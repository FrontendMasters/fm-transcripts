WEBVTT

1
00:00:00.380 --> 00:00:03.380
I just wanna point out
that this is a fire hose.

2
00:00:03.380 --> 00:00:05.341
What I'm teaching you now,

3
00:00:05.341 --> 00:00:09.192
what we've learned in a couple
of hours together here.

4
00:00:09.192 --> 00:00:13.592
I think they probably took weeks
in my college courses to get

5
00:00:13.592 --> 00:00:15.619
through all of this stuff.

6
00:00:15.619 --> 00:00:18.598
So if this feels like a lot, it is, right?

7
00:00:18.598 --> 00:00:21.977
So I'm validating if you're
feeling like this is hard.

8
00:00:25.902 --> 00:00:27.860
Now watch,
it's just gonna get more fun, okay?

9
00:00:29.180 --> 00:00:35.860
So let's say if you wanna model
people showing up to your party.

10
00:00:35.860 --> 00:00:38.285
So you start with this
many friendsAtYourParty.

11
00:00:38.285 --> 00:00:40.838
We use let, cuz obviously this
is gonna change over time.

12
00:00:40.838 --> 00:00:44.523
If I did const, this would say,
hey, you're trying to reassign

13
00:00:44.523 --> 00:00:49.150
friendsAtYourParty, you told me you
wouldn't do that, I'm not gonna let you.

14
00:00:49.150 --> 00:00:50.300
So I say let here.

15
00:00:51.860 --> 00:00:54.760
So notice I can reference
friendsAtYourParty here, right?

16
00:00:56.630 --> 00:01:02.310
So, after line 2, what is the number
that's stored in friendsAtYourParty?

17
00:01:04.370 --> 00:01:07.220
1, right, cuz it takes the 0 here.

18
00:01:07.220 --> 00:01:10.514
This is what we started at and it adds 1.

19
00:01:10.514 --> 00:01:13.170
What happens after line 3?

20
00:01:13.170 --> 00:01:19.246
2, 3, 4, 5, 6, 7, 8, 9, 10,
and we end up at 10 here.

21
00:01:20.728 --> 00:01:24.625
So people sometimes have this problem
with self referential, right?

22
00:01:24.625 --> 00:01:29.079
I just wanted to demonstrate that you can
keep doing that and it's totally okay.

23
00:01:29.079 --> 00:01:34.473
So you can reference what it was and
then you can re-write over it later.

24
00:01:37.837 --> 00:01:40.730
Obviously, this is incredibly repetitive,
right?

25
00:01:42.780 --> 00:01:46.046
So wouldn't it be great if there was some
way that we could kind of do this faster,

26
00:01:46.046 --> 00:01:48.360
like if we wanted to add
10 friends to our party?

27
00:01:48.360 --> 00:01:51.376
Obviously, we could just say,
+10 here, I suppose, but

28
00:01:51.376 --> 00:01:53.469
I wanna do it in a much
more roundabout way.

29
00:01:58.847 --> 00:02:03.208
Okay, So

30
00:02:03.208 --> 00:02:08.843
what I wanted to talk about
is what's called a loop.

31
00:02:08.843 --> 00:02:14.526
So I have friends in my party,
0, we start at that.

32
00:02:14.526 --> 00:02:17.312
And then I'm gonna put a while statement,
a while is a loop,

33
00:02:17.312 --> 00:02:20.060
it's gonna keep doing something
until something is true.

34
00:02:21.730 --> 00:02:26.082
So you're saying while
friendsAtYourParty is less than 10,

35
00:02:27.639 --> 00:02:30.760
Keep doing this over, and
over, and over again.

36
00:02:32.320 --> 00:02:38.850
So [LAUGH] I forgot this always happens to
me when I teach this part of the course.

37
00:02:40.770 --> 00:02:46.480
Let's refresh the page,
I crashed my browser.

38
00:02:46.480 --> 00:02:50.457
So there's a thing called
an infinite loop, and

39
00:02:50.457 --> 00:02:56.959
your browser does not know how to recover
from it, jeez, this is real crashed.

40
00:02:56.959 --> 00:02:58.050
Okay, here we go.

41
00:02:59.580 --> 00:03:02.465
So let's do this, I'm gonna copy and
paste it so I don't do that again.

42
00:03:07.776 --> 00:03:11.658
This is super easy to do because this is
running your code literally every time

43
00:03:11.658 --> 00:03:13.760
that you type something, right?

44
00:03:13.760 --> 00:03:15.360
It's very easy to do this.

45
00:03:15.360 --> 00:03:19.678
So console.log friendsAtYourParty.

46
00:03:22.046 --> 00:03:28.490
Or let's say another
friend joined your party.

47
00:03:28.490 --> 00:03:33.490
I'm just gonna cut this and
then I'm going to paste this here.

48
00:03:33.490 --> 00:03:35.440
How many times do you
think it's gonna log out?

49
00:03:36.590 --> 00:03:45.667
Another friend joins your party,
10 times, right?

50
00:03:45.667 --> 00:03:47.577
I think, yeah, 10 times.

51
00:03:49.372 --> 00:03:50.328
Why?

52
00:03:52.676 --> 00:03:55.593
Well, we have this variables,
friendsAtYourParty,

53
00:03:55.593 --> 00:03:57.025
right now it's signed 0.

54
00:03:57.025 --> 00:04:00.909
Then it's going to keep running
this loop over, and over,

55
00:04:00.909 --> 00:04:05.034
and over again,
while friendsAtYourParty is less than 10.

56
00:04:05.034 --> 00:04:08.709
It's like an if statement, right, but it
keeps evaluating that if statement over,

57
00:04:08.709 --> 00:04:09.893
and over, and over again.

58
00:04:09.893 --> 00:04:14.110
So while this condition is not yet
true it's going to keep doing this.

59
00:04:15.992 --> 00:04:18.576
You can see here I have this kind
of control variable that I keep

60
00:04:18.576 --> 00:04:19.229
adding one to.

61
00:04:19.229 --> 00:04:22.632
Eventually this is gonna
end up being what?

62
00:04:22.632 --> 00:04:24.863
10, right?

63
00:04:28.541 --> 00:04:32.141
And at that point it's going to finish,
and then it's done,

64
00:04:36.126 --> 00:04:41.283
Right, because when this is 9,
or is 9 less than 10?

65
00:04:41.283 --> 00:04:46.343
Yes, then it's gonna end up being 10,
is 10 less than 10?

66
00:04:47.842 --> 00:04:50.070
No, it's not, right?

67
00:04:50.070 --> 00:04:55.233
So then this loop finishes and it logs out
how many friendsAtYourParty which is 10.

68
00:04:55.233 --> 00:04:56.949
What happens if I put or equal to here?

69
00:05:00.878 --> 00:05:02.980
It's gonna run one more time, right?

70
00:05:02.980 --> 00:05:05.939
Just one more friend joins your
party this ends up being 11.

71
00:05:10.257 --> 00:05:12.129
What happens if I make this 100?

72
00:05:13.954 --> 00:05:15.251
Lot of friends join your party.

73
00:05:19.599 --> 00:05:23.183
So that's what loops are really
useful for, they're useful for

74
00:05:23.183 --> 00:05:27.042
running code over and over again
until some condition is met, right?

75
00:05:29.742 --> 00:05:32.745
I showed you a while loop first
because while loops look like if

76
00:05:32.745 --> 00:05:33.857
statements, right?

77
00:05:33.857 --> 00:05:38.261
If you've seen an if statement,
the while loop looks really familiar.

78
00:05:38.261 --> 00:05:40.539
You actually don't really end
up using while loops that much.

79
00:05:40.539 --> 00:05:43.496
I'm gonna show you the next one which is
a for loop and we use those all the time.

80
00:05:46.176 --> 00:05:49.830
Let's refresh the page here.

81
00:05:49.830 --> 00:05:52.736
Most of the other code blocks or
you can just like modify willy nilly and

82
00:05:52.736 --> 00:05:54.180
it's totally fine.

83
00:05:54.180 --> 00:05:58.628
Be careful with the loops because
it's really easy to turn them into

84
00:05:58.628 --> 00:05:59.807
a infinite loop.

85
00:05:59.807 --> 00:06:08.197
So for example, Whatever,
I'm gonna show you just for fun.

86
00:06:08.197 --> 00:06:14.110
We're gonna open this in another tab
here though, cuz I don't wanna wait.

87
00:06:14.110 --> 00:06:19.060
What happens if I flip this
to be going the other way?

88
00:06:19.060 --> 00:06:21.844
Right, so that it's, well,
friendsAtYourParty is greater than 10.

89
00:06:25.221 --> 00:06:27.311
Well, it's actually not gonna run, right?

90
00:06:29.258 --> 00:06:33.142
But now what happens if I put like 11 or
20 here?

91
00:06:37.650 --> 00:06:42.789
If I put 20 here,
I've now locked up my browser again, why?

92
00:06:47.494 --> 00:06:49.310
This is never gonna come back by the way.

93
00:06:49.310 --> 00:06:53.111
Eventually Firefox would be like,
hey, I think something bad happened.

94
00:06:55.530 --> 00:06:58.157
What's the bug here in this five lines?

95
00:07:00.878 --> 00:07:03.699
Okay, well,
let's just work through it piece by piece.

96
00:07:04.830 --> 00:07:08.860
I'm asking while friendsAtYourParty
is greater than 10, right?

97
00:07:08.860 --> 00:07:09.952
Is 20 greater than 10?

98
00:07:11.677 --> 00:07:15.541
After the first loop,
what it is friendsAtYourParty?

99
00:07:15.541 --> 00:07:19.549
21, then 22, then 23, then 24.

100
00:07:19.549 --> 00:07:25.115
Is this ever gonna be not true?

101
00:07:25.115 --> 00:07:27.716
So it's gonna keep doing it forever and
ever.

102
00:07:29.601 --> 00:07:32.629
This is called an infinite loop,
it's a type of bug.

103
00:07:36.306 --> 00:07:38.316
And unfortunately for us,
if you do this in your browser,

104
00:07:38.316 --> 00:07:39.595
your browser just crashes, right?

105
00:07:39.595 --> 00:07:41.277
Your browser doesn't
know what to do about,

106
00:07:41.277 --> 00:07:42.793
your browser has no guard against this.

107
00:07:46.746 --> 00:07:48.875
To this,
it looks like it eventually gave up.

108
00:07:51.035 --> 00:07:53.185
Nope, it didn't.

109
00:07:53.185 --> 00:07:57.795
But notice that Mike, it's really
struggling here to keep up with this cuz

110
00:07:57.795 --> 00:08:00.145
it's just running this infinitely.

111
00:08:00.145 --> 00:08:03.069
Okay, I'm gonna close that.

112
00:08:03.069 --> 00:08:05.345
So infinite loops, those are super fun,

113
00:08:05.345 --> 00:08:09.719
it will lock up your browser if that's
happening to you that's what happened.

114
00:08:09.719 --> 00:08:11.297
You hit some sort of infinite condition.

115
00:08:13.860 --> 00:08:18.163
Okay, So

116
00:08:18.163 --> 00:08:22.005
I keep showing you this friendsAtYourParty
= friendsAtYourParty + 1.

117
00:08:22.005 --> 00:08:23.715
There's a bunch of shorthand
ways to do this and

118
00:08:23.715 --> 00:08:25.357
I just wanted to show
you those really quick.

119
00:08:28.590 --> 00:08:32.076
So you have line 2 here =
friendsAtYourParty + 1.

120
00:08:32.076 --> 00:08:35.162
There's another way you
can write that as +=,

121
00:08:35.162 --> 00:08:38.333
it's saying take whatever's in here and
add 1.

122
00:08:38.333 --> 00:08:43.645
That's what += does,
which by the way, -= works,

123
00:08:43.645 --> 00:08:48.180
×=, division is with slash, so /= works.

124
00:08:48.180 --> 00:08:51.615
Even exponents which is asterisk,
asterisk also works.

125
00:08:56.036 --> 00:09:01.655
Yeah, for that, if that was unclear,
2 asterisk asterisk to the third, right?

126
00:09:01.655 --> 00:09:04.406
This is 2 to the power of 3.

127
00:09:05.590 --> 00:09:10.615
So this would be 8, double asterisk, okay?

128
00:09:10.615 --> 00:09:13.490
Anyway, +=.

129
00:09:13.490 --> 00:09:16.540
What's nice about this is I
can put like 10 here, right?

130
00:09:16.540 --> 00:09:21.820
If you just wanna add something to
a number, you could do that, right?

131
00:09:21.820 --> 00:09:22.620
Whatever you wanna put there.

132
00:09:23.750 --> 00:09:28.920
There's also a ++,
take whatever is in this and add 1.

133
00:09:30.150 --> 00:09:31.810
You can also have ++ on the beginning.

134
00:09:34.330 --> 00:09:37.945
So, I'm sure many of
you have heard of C++,

135
00:09:37.945 --> 00:09:41.861
it's one better than C,
that's the joke there.

136
00:09:48.310 --> 00:09:50.862
I don't actually know the truth of this,
but

137
00:09:50.862 --> 00:09:54.550
I've heard that the joke with
C# is it's a ++ ++, right?

138
00:09:54.550 --> 00:09:58.188
It was like the hash is
2++'s shoved together.

139
00:09:58.188 --> 00:10:00.128
I don't actually know if
that was intentional or not.

140
00:10:03.278 --> 00:10:08.093
Anyway, all these four lines
do exactly the same thing.

141
00:10:11.859 --> 00:10:15.747
Now don't get petty with me,
I know that there is a very,

142
00:10:15.747 --> 00:10:20.784
very slight difference between ++
at the beginning and ++ at the end.

143
00:10:20.784 --> 00:10:24.301
99.999% of people never have to know or

144
00:10:24.301 --> 00:10:30.171
care because you should not be using
++ on anything other than its own line.

145
00:10:34.473 --> 00:10:38.092
To prove my point to
your friendsAtYourParty,

146
00:10:44.372 --> 00:10:45.523
Let's say,

147
00:11:03.953 --> 00:11:06.503
Or maybe this is actually even
more clear if I do it this way.

148
00:11:09.769 --> 00:11:13.180
Now we'll just take this one out so
you don't have to see it.

149
00:11:13.180 --> 00:11:17.523
Why is this 5 and why is this also 5?

150
00:11:17.523 --> 00:11:23.589
If you put the ++ at the beginning, before
the statement is evaluated it adds 1.

151
00:11:23.589 --> 00:11:27.890
If you put the ++ at the end,
then it's evaluated at the end.

152
00:11:27.890 --> 00:11:31.915
So if I put console.log
friendsAtYourParty without anything,

153
00:11:31.915 --> 00:11:34.190
what would you expect one more time?

154
00:11:38.211 --> 00:11:44.140
It is 6, right, because it evaluates this
so it logs this out, then it adds 1.

155
00:11:44.140 --> 00:11:45.640
That's why this is 6.

156
00:11:45.640 --> 00:11:48.910
So this is 5 when it starts and
then ends up being 6.

157
00:11:48.910 --> 00:11:52.612
Whereas ++ at the beginning evaluates
that before and then does it so

158
00:11:52.612 --> 00:11:54.670
this was 4 beforehand.

159
00:11:54.670 --> 00:11:59.782
So it's 4 here then after this,
it ends up being 5, right?

160
00:12:01.800 --> 00:12:06.466
So before 4, after 5,

161
00:12:09.012 --> 00:12:13.300
This is not important at all,
but it's interesting, right?

162
00:12:14.713 --> 00:12:20.597
Before this is 5 and then after it's 6.

163
00:12:26.305 --> 00:12:31.034
And that's why these are both
ended up being 5, okay.

164
00:12:31.034 --> 00:12:32.063
Never have to know,

165
00:12:32.063 --> 00:12:35.580
just wipe that out in memory because
this should never be important.

166
00:12:35.580 --> 00:12:38.250
If you're writing code where this is
important, you're doing it wrong.

167
00:12:40.150 --> 00:12:42.479
Okay, that's all, that's my entire spiel.

168
00:12:45.250 --> 00:12:50.080
So the reason why I wanna show you is that
JavaScript people almost always write ++

169
00:12:50.080 --> 00:12:53.030
at the end,
JS almost always writes it at the end.

170
00:12:53.030 --> 00:12:55.980
There are other languages that
preferred right at the beginning.

171
00:12:55.980 --> 00:12:58.910
Doesn't matter, I would just say
follow whatever the language prefers.

172
00:12:58.910 --> 00:13:03.550
In JavaScript, put the ++ at the end.

173
00:13:03.550 --> 00:13:05.723
Okay, so
I wanna show you now the for loop.

174
00:13:08.019 --> 00:13:15.453
So I have friendsAtYourParty, and
let's just make this simple for a second.

175
00:13:15.453 --> 00:13:17.520
No, I broke it again, hold on.

176
00:13:19.580 --> 00:13:24.230
So easy to make an infinite loop here,
friendsAtYourParty equal to 0, right?

177
00:13:25.320 --> 00:13:27.810
And I wanted to do it just like
I did up here in the while loop.

178
00:13:29.360 --> 00:13:31.616
Where I wanted to add 10
friends to the party, right?

179
00:13:34.504 --> 00:13:36.066
That's what this for loop does.

180
00:13:38.898 --> 00:13:45.160
So every part of the for loop,
it has these three distinct parts.

181
00:13:45.160 --> 00:13:47.320
The first part is you declare
your control variable.

182
00:13:48.840 --> 00:13:52.150
For whatever reason in the history
of programming, that's always i.

183
00:13:53.770 --> 00:13:55.950
Doesn't stand for anything.

184
00:13:55.950 --> 00:14:00.370
I think it might stand for index,
I'm not really sure, but just use i.

185
00:14:02.410 --> 00:14:06.393
And then you start at some variable so
we're gonna start our for loop at 0,

186
00:14:06.393 --> 00:14:07.730
that's really common.

187
00:14:09.140 --> 00:14:11.600
This is the while part.

188
00:14:11.600 --> 00:14:15.331
So while i is less than 10, do something.

189
00:14:15.331 --> 00:14:19.253
And then at the end of that loop,
do something to the variable,

190
00:14:19.253 --> 00:14:20.660
usually it's i++.

191
00:14:21.770 --> 00:14:26.900
So this part here is a really
common way of writing a for loop.

192
00:14:28.000 --> 00:14:31.635
Start at 0,
run while this is less than 10, and

193
00:14:31.635 --> 00:14:34.674
at the end of every loop increment i by 1.

194
00:14:34.674 --> 00:14:37.310
So this is gonna start at 0.

195
00:14:37.310 --> 00:14:39.690
This is gonna be true until this is 9,
right?

196
00:14:39.690 --> 00:14:42.530
Once it's 10, it's no longer true so
it will not run again.

197
00:14:42.530 --> 00:14:45.490
And then at the end of
this it'll increment by 1.

198
00:14:45.490 --> 00:14:47.124
So how many times will this loop run?

199
00:14:49.896 --> 00:14:51.361
10 times.

200
00:14:57.335 --> 00:15:01.750
You're gonna write loops for
the most part like this.

201
00:15:01.750 --> 00:15:05.484
So let's say you wanted this to run 100
times instead of 10, just like that.

202
00:15:07.930 --> 00:15:14.498
1000 times, 10,000 times, 100,000 times.

203
00:15:14.498 --> 00:15:21.792
Notice this is running this loop 100,000
times, and it's going extremely fast.

204
00:15:21.792 --> 00:15:24.232
That's because browsers are really
good at running for loops.

205
00:15:30.056 --> 00:15:33.350
So let me do this so
I don't cause an infinite loop.

206
00:15:33.350 --> 00:15:36.260
I'm just gonna write this
in a comment really quick.

207
00:15:36.260 --> 00:15:41.052
You don't have to go from, typically it's
just clear to go from 0 to something cuz

208
00:15:41.052 --> 00:15:44.691
that makes it really easy for
people to wrap their head around.

209
00:15:44.691 --> 00:15:50.762
But there's absolutely no reason that
you couldn't do it like this either.

210
00:15:58.170 --> 00:16:06.141
Right, I

211
00:16:06.141 --> 00:16:10.486
could just delete that for a second or

212
00:16:10.486 --> 00:16:15.122
we can start from 10 and go down to 0.

213
00:16:15.122 --> 00:16:18.335
Yeah, there's absolutely no reason
that you can't start at 10, and

214
00:16:18.335 --> 00:16:20.556
then go down until it's greater than 0,
right?

215
00:16:20.556 --> 00:16:25.134
And then as you might imagine
you have ++ which which

216
00:16:25.134 --> 00:16:28.802
increments by 1, -- decrements by 1.

217
00:16:28.802 --> 00:16:30.829
So there's no reason that
you have to climb up,

218
00:16:30.829 --> 00:16:34.240
I'm just trying to demonstrate your free
to manipulate this however you want.

219
00:16:34.240 --> 00:16:39.586
You can have this go until

220
00:16:39.586 --> 00:16:44.683
it's 0, 5, right?

221
00:16:44.683 --> 00:16:47.281
You would never write a loop like this cuz

222
00:16:47.281 --> 00:16:51.039
this is super unclear of why
you're going from 10 to 5.

223
00:16:52.470 --> 00:16:57.068
But you could, right, so anyway.

224
00:17:00.271 --> 00:17:02.735
Again, be careful about infinite loops,

225
00:17:02.735 --> 00:17:06.680
as you've seen I've now hit
it seven times in my course.

226
00:17:06.680 --> 00:17:07.940
It's very easy to do.

227
00:17:11.656 --> 00:17:16.360
Yeah, so like this one,
This is an infinite loop.

228
00:17:18.250 --> 00:17:21.189
Cuz your friendsAtYourParty starts at 1,
and

229
00:17:21.189 --> 00:17:25.162
at the end of the first loop
it's gonna be 2, then 3, then 4.

230
00:17:25.162 --> 00:17:28.434
4 is always gonna be greater than 0,
it's just counting up so

231
00:17:28.434 --> 00:17:31.907
this is going to always happen so
this is gonna be an infinite loop.

