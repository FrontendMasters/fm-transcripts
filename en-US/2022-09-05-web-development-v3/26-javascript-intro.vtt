WEBVTT

1
00:00:00.550 --> 00:00:04.528
I'm gonna say now that this course gets
significantly harder from this point

2
00:00:04.528 --> 00:00:05.084
forward.

3
00:00:05.084 --> 00:00:06.952
I apologize.

4
00:00:06.952 --> 00:00:10.678
I frequently got the feedback in
the first time that I did this,

5
00:00:10.678 --> 00:00:14.492
that the first parts people felt
really good about themselves.

6
00:00:14.492 --> 00:00:18.524
They were getting everything, and
then they hit the JavaScript portion,

7
00:00:18.524 --> 00:00:19.552
they hit the wall.

8
00:00:19.552 --> 00:00:22.153
We're gonna go slow, but
the other thing I'm gonna tell you is,

9
00:00:22.153 --> 00:00:23.350
this is just harder, right?

10
00:00:23.350 --> 00:00:26.320
There's more stuff going on here.

11
00:00:26.320 --> 00:00:32.025
This is the more difficult portion of this
for someone that hasn't programmed before.

12
00:00:32.025 --> 00:00:36.000
If you've programmed before,
a lot of this will look somewhat familiar.

13
00:00:36.000 --> 00:00:38.611
But again, remember this course is
geared towards people that haven't

14
00:00:38.611 --> 00:00:39.390
programmed before.

15
00:00:39.390 --> 00:00:42.313
So, bear with me through
the basics here and

16
00:00:42.313 --> 00:00:47.850
hopefully you'll learn tidbits about
programming that you didn't know before.

17
00:00:47.850 --> 00:00:50.644
I promise you there's stuff in
here that will help everybody.

18
00:00:52.570 --> 00:00:59.953
Okay, So, What is code?

19
00:00:59.953 --> 00:01:02.290
And I think my answer might
surprise a lot of people.

20
00:01:03.580 --> 00:01:06.601
People think it's something that
humans work really hard on so

21
00:01:06.601 --> 00:01:09.340
that computers will do the thing
that you tell them to do.

22
00:01:10.510 --> 00:01:12.196
Partial definition, I think is correct.

23
00:01:14.300 --> 00:01:20.879
But I'm gonna argue the code is for
humans first and computers second.

24
00:01:20.879 --> 00:01:24.321
And the reason why I say
that is you write code so

25
00:01:24.321 --> 00:01:28.035
that later you can go back and
maintain that code.

26
00:01:28.035 --> 00:01:31.095
If we were writing code purely for
computers, you and

27
00:01:31.095 --> 00:01:33.620
I would be both writing
Assembly right now.

28
00:01:33.620 --> 00:01:39.229
Or directly to binary, because that will
make it go faster, guaranteed, right?

29
00:01:39.229 --> 00:01:43.992
JavaScript has a lot of overhead just in
terms of it's a very high level language.

30
00:01:43.992 --> 00:01:47.936
There's a lot of layers to
get JavaScript to work, so

31
00:01:47.936 --> 00:01:52.504
why do we choose to write JavaScript
instead of C or Assembly?

32
00:01:52.504 --> 00:01:56.641
It's because it's easier for
humans to understand and

33
00:01:56.641 --> 00:01:59.467
maintain and continue forward with.

34
00:01:59.467 --> 00:02:02.467
So I want you to keep that in
mind when you're writing code,

35
00:02:02.467 --> 00:02:05.536
that you're writing this so
that someone later can read it.

36
00:02:05.536 --> 00:02:09.149
You're not writing it so
that your program will work correctly,

37
00:02:09.149 --> 00:02:11.586
necessarily, you're doing that as well.

38
00:02:11.586 --> 00:02:13.615
But you're writing it so
that you can come back and

39
00:02:13.615 --> 00:02:16.851
understand what you were thinking,
understand what you were trying to do, and

40
00:02:16.851 --> 00:02:18.802
then if there's a bug in
there be able to fix it.

41
00:02:20.679 --> 00:02:25.011
So another way I like thinking about this,
which I put here in my notes,

42
00:02:25.011 --> 00:02:29.996
is you're essentially writing notes to
yourself about how to solve a problem that

43
00:02:29.996 --> 00:02:31.752
a computer can understand.

44
00:02:31.752 --> 00:02:33.821
That's how I view code.

45
00:02:33.821 --> 00:02:36.951
Why is this an important distinction?

46
00:02:36.951 --> 00:02:41.485
Because we're really tempted to write
the most clever code possible, right?

47
00:02:41.485 --> 00:02:44.667
Have you ever heard of
what's called code golf?

48
00:02:44.667 --> 00:02:46.495
It's basically people try and

49
00:02:46.495 --> 00:02:50.857
write code that it's the smallest
thing possible to solve some problem.

50
00:02:50.857 --> 00:02:55.219
So you've seen people that can write
full video games in three kilobytes of

51
00:02:55.219 --> 00:02:56.061
JavaScript.

52
00:02:56.061 --> 00:02:59.412
It's just bonkers, some of
the things that people do with code.

53
00:02:59.412 --> 00:03:02.765
Just Google it, code golf,
there's some wild things out there.

54
00:03:02.765 --> 00:03:08.630
And the code that they have to do to
be able to achieve that is so clever.

55
00:03:08.630 --> 00:03:11.923
It's unreadably clever.

56
00:03:11.923 --> 00:03:15.409
Don't do that,
[LAUGH] unless you're doing code golf,

57
00:03:15.409 --> 00:03:17.865
you don't want your code to be clever.

58
00:03:17.865 --> 00:03:22.164
You want your code to be clear, succinct,
to the point, all these kinds of things.

59
00:03:26.036 --> 00:03:30.428
Yeah, I've had to maintain code
that's 10 years old, 15 years old,

60
00:03:30.428 --> 00:03:33.913
20 years old, and
the code that's really well written,

61
00:03:33.913 --> 00:03:37.208
makes it feel really nice to try and
maintain that code.

62
00:03:37.208 --> 00:03:41.027
Even if it's using really old style and
techniques and stuff like that,

63
00:03:41.027 --> 00:03:46.410
if it's well documented and well thought
out and clearly laid out, it's no problem.

64
00:03:46.410 --> 00:03:51.870
But then I had to maintain
this just bananas PHP for

65
00:03:51.870 --> 00:03:57.600
in-memory graph database
that someone invented.

66
00:03:57.600 --> 00:04:01.920
And it was just written in just the most
opaque, weird style of writing code.

67
00:04:01.920 --> 00:04:04.766
They used single letter variables and
a bunch of stuff like that.

68
00:04:04.766 --> 00:04:08.210
It was like a nightmare.

69
00:04:08.210 --> 00:04:12.075
One of the worst parts of my career is
trying to maintain this person's really

70
00:04:12.075 --> 00:04:13.210
old, terrible code.

71
00:04:14.830 --> 00:04:18.720
So, all this is,
I will probably be your coworker some day.

72
00:04:18.720 --> 00:04:22.925
This is my plea to you to write clear
code so that we can both understand it.

73
00:04:26.266 --> 00:04:29.110
Okay, be explicit.

74
00:04:29.110 --> 00:04:32.270
It's okay to write more
code to be more explicit.

75
00:04:34.750 --> 00:04:36.520
Computers are really fast these days.

76
00:04:36.520 --> 00:04:40.112
So for the most part, you can take a
little bit of performance hit to be extra

77
00:04:40.112 --> 00:04:43.376
clear on things, optimized for
humans first and computers later.

78
00:04:45.414 --> 00:04:49.444
Okay, that's my spiel to you, I start
with that because I want you to take that

79
00:04:49.444 --> 00:04:53.070
ethos with you of, I'm gonna write
clear code that I can understand.

