WEBVTT

1
00:00:00.000 --> 00:00:03.528
Okay, this is the exact
same functionality here,

2
00:00:03.528 --> 00:00:08.383
right click the Gimme dog button and
I get objectively a very cute dog.

3
00:00:08.383 --> 00:00:11.251
Now I have this async function.

4
00:00:11.251 --> 00:00:14.587
So this async here is critical.

5
00:00:14.587 --> 00:00:18.318
Now I can just say, a weight fetch(DOG).

6
00:00:18.318 --> 00:00:20.419
And then the code just waits.

7
00:00:20.419 --> 00:00:24.328
It just pauses for those like,
cool I'll wait here until this is done.

8
00:00:24.328 --> 00:00:28.014
And then I say, await promise.json.

9
00:00:28.014 --> 00:00:30.214
And I get this process response, right?

10
00:00:30.214 --> 00:00:33.322
And then now this process
response is just the object.

11
00:00:36.749 --> 00:00:40.446
Isn't this like a trillion
times easier to read?

12
00:00:40.446 --> 00:00:44.637
For me it is, cuz I can just say,
cool, wait for this.

13
00:00:44.637 --> 00:00:47.470
Okay, now I have everything
that I need and I'm done.

14
00:00:47.470 --> 00:00:52.173
As opposed to having had nested dot then,
dot then, dot then, dot then.

15
00:00:55.867 --> 00:00:57.296
So let's talk about it for just a second.

16
00:00:57.296 --> 00:01:00.083
What does await actually do?

17
00:01:00.083 --> 00:01:01.288
Await accepts a promise,

18
00:01:01.288 --> 00:01:04.537
which is that objects that we were
just talking about before, right?

19
00:01:04.537 --> 00:01:07.486
And then it just waits for it to finish.

20
00:01:07.486 --> 00:01:10.336
Once it's finished,
then your code resumes.

21
00:01:10.336 --> 00:01:14.825
So, if I click Add doggo right now,
it's going to call this and

22
00:01:14.825 --> 00:01:20.357
it's gonna say, it's going to actually
pause execution on this function.

23
00:01:20.357 --> 00:01:23.509
It's not going to go immediately
to line seven, right?

24
00:01:23.509 --> 00:01:25.355
It's just gonna wait.

25
00:01:25.355 --> 00:01:31.388
It's going to await,
one could say or did say, okay?

26
00:01:31.388 --> 00:01:33.644
Then I call await again
here on the second line, so

27
00:01:33.644 --> 00:01:37.460
whenever that comes back it's gonna go to
line seven and run this and I'm gonna say,

28
00:01:37.460 --> 00:01:40.018
await this promise.json
function to finish, right?

29
00:01:40.018 --> 00:01:42.659
The processing part of it.

30
00:01:42.659 --> 00:01:45.948
And then once this is done,
I now have this process response,

31
00:01:45.948 --> 00:01:48.745
which is the json object
that came back from the API.

32
00:01:52.954 --> 00:01:54.685
Makes it so much simpler to read.

33
00:01:54.685 --> 00:01:57.787
And then the rest of it runs line eight,
then line nine, then line ten,

34
00:01:57.787 --> 00:01:59.558
than line 11, and then you're done.

35
00:02:03.905 --> 00:02:08.198
So, one thing that's
critical to keep in mind,

36
00:02:08.198 --> 00:02:13.028
you can only use await if
you're in an async function.

37
00:02:13.028 --> 00:02:18.578
If I delete async here, it's gonna say,
await is only valid and async functions.

38
00:02:19.758 --> 00:02:23.107
So you have to tell
the browser ahead of time,

39
00:02:23.107 --> 00:02:27.525
this function is gonna use await,
so be prepared for that.

40
00:02:29.920 --> 00:02:37.821
You have to say async here,
If you are going to do await

41
00:02:40.229 --> 00:02:44.482
You might ask me, well, what if I'm in
a function that's not an async function?

42
00:02:44.482 --> 00:02:49.490
Then you can't await,
[LAUGH] that's simple.

43
00:02:49.490 --> 00:02:52.544
What you can do though, is you can
create another function that's async and

44
00:02:52.544 --> 00:02:55.517
then you can call that one, and
then you can use await from that function.

45
00:02:55.517 --> 00:02:57.151
That's probably how I would do it.

46
00:03:02.070 --> 00:03:07.036
So, by all means, if you're doing
AJAX request, just do async await.

47
00:03:07.036 --> 00:03:10.359
So nice, it's a relatively
recent addition to JavaScript.

48
00:03:10.359 --> 00:03:14.129
I wanna say it's, 2017 or 2018.

49
00:03:16.303 --> 00:03:21.583
And now browsers have caught up
basically that you can use a sync await,

50
00:03:21.583 --> 00:03:26.601
let's look at, can a use.com,
async functions in JavaScriptt.

51
00:03:26.601 --> 00:03:30.088
Not AP, async functions.

52
00:03:30.088 --> 00:03:34.015
Yeah, 94% of global users use it.

53
00:03:34.015 --> 00:03:38.445
It wasn't an IE11,
which will bring that total way down, but

54
00:03:38.445 --> 00:03:43.547
basically it's been in Firefox since 2017,
so good guess, Brian.

55
00:03:43.547 --> 00:03:47.010
[LAUGH] It was in old versions of Edge,

56
00:03:47.010 --> 00:03:51.496
that makes it really
widely supported as well.

57
00:03:51.496 --> 00:03:54.945
It's been in Chrome since 2016.

58
00:03:54.945 --> 00:03:57.653
So yeah, Chrome's shipped in 2016.

59
00:03:57.653 --> 00:04:01.144
Does this feel more
simple than thePromises?

60
00:04:01.144 --> 00:04:02.639
Yeah, I think so.

61
00:04:02.639 --> 00:04:04.092
I use it all the time.

62
00:04:05.888 --> 00:04:07.962
So, one way I did not
show you how to do this,

63
00:04:07.962 --> 00:04:11.500
is with what are called callback
functions, where basically you can say,

64
00:04:11.500 --> 00:04:15.066
hey, go out and do this and then call
this function whenever you're done.

65
00:04:15.066 --> 00:04:16.973
It looks really similar to Promises but

66
00:04:16.973 --> 00:04:19.297
you can run in this thing
called Callback Hell.

67
00:04:19.297 --> 00:04:20.322
I really don't wanna get too much into it.

68
00:04:20.322 --> 00:04:21.681
But that's like the old, old way.

69
00:04:21.681 --> 00:04:28.570
But if you see nested functions that nest
functions, that's what's happening there.

70
00:04:30.698 --> 00:04:36.301
One side note, that can throw
people off about async functions.

71
00:04:36.301 --> 00:04:40.640
The reason why you have to declare them
as async ahead of time, is because async

72
00:04:40.640 --> 00:04:45.402
functions, because they can wait for
things, always return promises themselves.

73
00:04:45.402 --> 00:04:49.618
Because, right,
you're basically saying to the browser,

74
00:04:49.618 --> 00:04:52.544
this function could take a while, right?

75
00:04:52.544 --> 00:04:56.391
Which means that the browser has to
have some way to be able to wait for

76
00:04:56.391 --> 00:04:57.684
that thing to finish.

77
00:04:57.684 --> 00:05:00.416
Even this function here where
I've made an async function,

78
00:05:00.416 --> 00:05:03.947
that all it does is return, Brian,
I already told the browser's like, hey,

79
00:05:03.947 --> 00:05:05.675
I could wait for things here, right?

80
00:05:05.675 --> 00:05:07.358
Things could happen.

81
00:05:07.358 --> 00:05:09.558
So the browser is going to, or

82
00:05:09.558 --> 00:05:14.408
your JavaScript basically is
already going to return a promise.

83
00:05:14.408 --> 00:05:21.328
Okay, so if I call getName here,
notice that this comes back as a promise.

84
00:05:21.328 --> 00:05:26.139
Which you can await an aafuture function,
right?

85
00:05:26.139 --> 00:05:30.260
But if I really wanna get the name out of
this, I just called, getName.then, and

86
00:05:30.260 --> 00:05:32.674
then finally I can get the actual name,
Brian.

87
00:05:37.745 --> 00:05:39.642
Just throwing that out there as a warning,

88
00:05:39.642 --> 00:05:42.392
just know that async functions
will always return promises.

89
00:05:42.392 --> 00:05:44.499
That's the the takeaway there.

90
00:05:49.056 --> 00:05:51.151
No, shouldn't have to
run into it too much.

91
00:05:51.151 --> 00:05:52.465
Yeah, question?

92
00:05:52.465 --> 00:05:55.677
&gt;&gt; Would it be possible to handle
multiple promises at the same time

93
00:05:55.677 --> 00:05:57.292
since they're asynchronous?

94
00:05:57.292 --> 00:05:58.235
&gt;&gt; Yes.

95
00:06:01.624 --> 00:06:06.544
Well, I'll show you, it just ends up
being a little bit more complicated.

96
00:06:06.544 --> 00:06:13.359
All right, I'm just gonna call
getName multiple times here.

97
00:06:13.359 --> 00:06:17.259
The way that she would do that,

98
00:06:17.259 --> 00:06:25.660
let's say I have another async
function called getLotsOfNames.

99
00:06:25.660 --> 00:06:29.485
And I wanted to call
getName multiple times.

100
00:06:29.485 --> 00:06:32.287
Let's say that this takes in a name and
it just returns the name.

101
00:06:37.540 --> 00:06:40.901
Let's say I wanted to go out and
get 15 names all at the same time.

102
00:06:40.901 --> 00:06:46.815
The way that you would do that,
is you would say, consNames = promise.all,

103
00:06:46.815 --> 00:06:51.039
and then you would give an array
of promises to await on.

104
00:06:51.039 --> 00:06:56.168
So I could say, getName(Brian),

105
00:06:56.168 --> 00:06:58.819
get a few of these.

106
00:06:58.819 --> 00:07:05.039
I don't know, Cassandra,

107
00:07:05.039 --> 00:07:09.970
Reid, Nikki, okay.

108
00:07:09.970 --> 00:07:17.477
And thes names here, if I just said
console, no I have to say await.

109
00:07:17.477 --> 00:07:23.948
Console.log(names) And
then I have to call it.

110
00:07:23.948 --> 00:07:29.937
So getLotsOfNames.

111
00:07:29.937 --> 00:07:33.361
Now I get an array back of
all these result promises.

112
00:07:39.849 --> 00:07:42.189
Kind of some advanced concepts here,
right?

113
00:07:42.189 --> 00:07:46.474
So, if this scares you, just go ahead and
ignore and move on, which is totally fine.

114
00:07:46.474 --> 00:07:48.942
But if you wanted to await a bunch
of things all at the same time and

115
00:07:48.942 --> 00:07:51.717
you wanted to wait for all of them to
finish, this is how you would do it.

