WEBVTT

1
00:00:01.380 --> 00:00:04.221
Let's connect the last bit of JavaScript
knowledge before we start doing more

2
00:00:04.221 --> 00:00:04.790
application.

3
00:00:04.790 --> 00:00:08.081
I'm trying to get you familiar with
programming fully as a concept and

4
00:00:08.081 --> 00:00:10.888
then we're gonna go to start
doing fun applications of it.

5
00:00:15.855 --> 00:00:19.733
You can think of objects
of grab bags of data.

6
00:00:19.733 --> 00:00:24.572
Think about as objects or unordered lists,

7
00:00:24.572 --> 00:00:29.424
so it's data with no
sense of kind of order.

8
00:00:29.424 --> 00:00:33.025
Arrays are like ordered lists where
things come in an order, right?

9
00:00:33.025 --> 00:00:37.870
So for example days of the week,
those come in a specific order.

10
00:00:37.870 --> 00:00:40.700
Monday, Tuesday, Wednesday, Thursday,
Friday, Saturday, Sunday, right?

11
00:00:42.220 --> 00:00:47.920
If I move Tuesday in front of Monday,
now it's incorrect, right?

12
00:00:47.920 --> 00:00:50.140
There's an order implied here and
that's what an array is.

13
00:00:50.140 --> 00:00:52.560
It's just a list of other data.

14
00:00:52.560 --> 00:00:55.900
In fact, you'll probably hear me say
the word list and array interchangeably.

15
00:00:56.950 --> 00:01:00.520
Most programming languages use
those two terms interchangeably.

16
00:01:00.520 --> 00:01:02.192
There's not a list in JavaScript,

17
00:01:02.192 --> 00:01:05.940
there's just arrays which means that I
use list to describe arrays sometimes.

18
00:01:07.040 --> 00:01:08.806
They're called arrays, just so you know.

19
00:01:10.653 --> 00:01:15.579
Okay, so if I say console.log days of
the week, I will get the full array.

20
00:01:17.153 --> 00:01:19.786
Right, and
this is just a list of strings, right?

21
00:01:19.786 --> 00:01:23.042
It's an array of strings.

22
00:01:23.042 --> 00:01:27.358
Okay, if I say
console.log(daysOfTheWeek) and

23
00:01:27.358 --> 00:01:32.260
then I use the square brackets to look for
the 0th element,

24
00:01:32.260 --> 00:01:34.920
then I'll get Monday, right?

25
00:01:36.270 --> 00:01:38.812
So that's the one thing
about programming and

26
00:01:38.812 --> 00:01:42.592
this is generally applicable to
almost every single language is we,

27
00:01:42.592 --> 00:01:46.390
computer scientists start counting
from zero not from one, right.

28
00:01:48.310 --> 00:01:52.253
So the 0th element is the first element,

29
00:01:52.253 --> 00:01:56.510
the one element is the second element.

30
00:01:56.510 --> 00:02:00.462
So if I asked for the one index of
days of the week like I do here,

31
00:02:00.462 --> 00:02:02.442
which one do you expect to get?

32
00:02:05.475 --> 00:02:09.140
Tuesday, correct, because zero would
be Monday, that makes Tuesday, one.

33
00:02:10.940 --> 00:02:14.176
If I asked for the sixth index,
which one do you expect to get?

34
00:02:16.508 --> 00:02:20.516
Sunday, right,
because it's the seventh one there.

35
00:02:22.158 --> 00:02:25.230
So it's kind of hard to get used
to it at the beginning, but

36
00:02:25.230 --> 00:02:29.182
once you start programming for a while,
you can't think of any other way of

37
00:02:29.182 --> 00:02:32.850
counting other than from like
starting from zero and going forward.

38
00:02:32.850 --> 00:02:34.442
It just makes things a lot easier.

39
00:02:38.459 --> 00:02:43.240
And so that's, I mean, mostly what arrays
are is they're just collections of data.

40
00:02:43.240 --> 00:02:48.722
They're just like a shape
that you can put data into.

41
00:02:48.722 --> 00:02:53.206
So you can have arrays of strings.
You can have arrays of numbers.

42
00:02:53.206 --> 00:02:54.989
You can have arrays of objects.

43
00:02:54.989 --> 00:02:57.299
You can have arrays of arrays.

44
00:02:57.299 --> 00:03:00.168
You can have arrays of strings and
numbers.

45
00:03:00.168 --> 00:03:03.500
It doesn't really care, right,
it doesn't have to be homogenous, right,

46
00:03:03.500 --> 00:03:05.680
you can mix and match, right?

47
00:03:05.680 --> 00:03:09.349
Generally you don't, generally it's
a good idea to kind of keep them

48
00:03:09.349 --> 00:03:12.280
homogenous cuz I think that
makes your code more clear.

49
00:03:12.280 --> 00:03:15.510
But there's absolutely no reason I
can't just put 5 here arbitrarily.

50
00:03:16.860 --> 00:03:20.912
So now what is this one
gonna log out here?

51
00:03:20.912 --> 00:03:24.652
5, it doesn't care, right,
it'll just do whatever you tell it to do.

52
00:03:30.432 --> 00:03:34.230
Cool, so square brackets.

53
00:03:34.230 --> 00:03:37.780
When you see square brackets,
you know that you're looking at an array.

54
00:03:37.780 --> 00:03:40.619
When you see angle bracket or
angle curly braces,

55
00:03:40.619 --> 00:03:44.750
sorry, when you see curly braces you
know you're looking at an object.

56
00:03:46.440 --> 00:03:47.700
Just something to keep in mind there.

57
00:03:49.150 --> 00:03:52.584
You're always gonna
separate them with a comma,

58
00:03:52.584 --> 00:03:56.190
all of the various different
elements in the array.

59
00:03:56.190 --> 00:03:59.976
And this last one here,
technically optional.

60
00:04:01.891 --> 00:04:04.185
Up to you if you wanna put it there,
but the last one is optional.

61
00:04:09.010 --> 00:04:11.996
Generally, I put it cuz then I don't have
to think about which one I'm looking at.

62
00:04:11.996 --> 00:04:16.135
And the other thing that's nice about it,
let's say I wanted to go add another thing

63
00:04:16.135 --> 00:04:20.697
to the end of the list,
I don't have to go back and

64
00:04:20.697 --> 00:04:22.592
write another comma,
it's just already there.

65
00:04:31.459 --> 00:04:32.042
Okay?

66
00:04:38.590 --> 00:04:42.889
So looking at this one, prime numbers,

67
00:04:42.889 --> 00:04:47.319
which is just a array of numbers, right?

68
00:04:47.319 --> 00:04:54.505
Prime numbers that I just put in there,
1, 2, 3, 5, 7, 11, 13 and 17.

69
00:04:54.505 --> 00:04:56.806
The length is how many
items are in that array, so

70
00:04:56.806 --> 00:05:00.249
it's gonna give you back a number
representing how many items are in it.

71
00:05:01.360 --> 00:05:04.210
It doesn't start from 0 by the way.

72
00:05:04.210 --> 00:05:10.896
So 1, 2, 3, 4, 5, 6, 7, 8, so
I would expect to see 8 there.

73
00:05:10.896 --> 00:05:11.653
And I do.

74
00:05:15.587 --> 00:05:17.044
Makes sense I think, right?

75
00:05:19.490 --> 00:05:24.181
Join is kind of a fun little
method that's on arrays,

76
00:05:24.181 --> 00:05:28.060
cuz arrays have a ton
of built-ins as well.

77
00:05:28.060 --> 00:05:31.035
It's going to take whatever
string you put in here, and

78
00:05:31.035 --> 00:05:34.470
then it's going to make a string
out of the entire array for you.

79
00:05:34.470 --> 00:05:40.320
So this is now one string and is separated
by these horizontal bars, right?

80
00:05:40.320 --> 00:05:42.551
But I could put question marks there,
right?

81
00:05:42.551 --> 00:05:45.250
I could put exclamation points,
it doesn't care.

82
00:05:45.250 --> 00:05:48.670
Whatever you put there it's how
it's gonna join those things.

83
00:05:48.670 --> 00:05:49.638
I can put empty string and

84
00:05:49.638 --> 00:05:52.653
it'll actually literally just mush them
all together into a single number.

85
00:05:55.290 --> 00:05:59.908
Or I can do comments,
right, or bars or slashes.

86
00:06:03.366 --> 00:06:04.853
Whatever you wanna do.

87
00:06:12.157 --> 00:06:16.191
So that's kind of fun, if you need
to take an array of something and

88
00:06:16.191 --> 00:06:18.003
collapse it down to a string.

89
00:06:21.425 --> 00:06:27.251
Okay, so let's look at this one.

90
00:06:27.251 --> 00:06:28.890
I have an array called courses.

91
00:06:28.890 --> 00:06:30.310
These are objects, right?

92
00:06:31.730 --> 00:06:36.190
So I have a teacher on here,
right, there's me.

93
00:06:37.510 --> 00:06:38.600
I teach the React course.

94
00:06:38.600 --> 00:06:40.320
I think it's pretty good my opinion.

95
00:06:42.370 --> 00:06:46.560
There's a function here on courses
called push on arrays, right?

96
00:06:46.560 --> 00:06:48.947
Push is just going to add
something to the end of the array.

97
00:06:48.947 --> 00:06:51.364
You're trying to push something on it,
right?

98
00:06:51.364 --> 00:06:54.556
So if I push another course on there,

99
00:06:57.511 --> 00:07:01.553
Now there's the same array, but
this array has one more course on it.

100
00:07:01.553 --> 00:07:05.563
It has this Jen Kramer course on it,
right?

101
00:07:08.597 --> 00:07:14.803
So if I say console.log,
courses.length here,

102
00:07:14.803 --> 00:07:18.133
and then I do it again here,

103
00:07:20.282 --> 00:07:24.939
Is line 9 and
line 13 going to log the same thing?

104
00:07:24.939 --> 00:07:26.270
No, why?

105
00:07:26.270 --> 00:07:29.749
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yeah, so

106
00:07:29.749 --> 00:07:32.000
there's one more thing on it,
so it's one longer, right?

107
00:07:32.000 --> 00:07:36.378
So if I go look at my output here,
there was five before, one,

108
00:07:36.378 --> 00:07:38.412
two, three, four, five.

109
00:07:38.412 --> 00:07:42.525
And now there are six on it
cuz I added one more to it.

110
00:07:42.525 --> 00:07:43.750
So that's what push does.

111
00:07:46.488 --> 00:07:49.034
Courses is just gonna log
out the entire array, right?

112
00:07:49.034 --> 00:07:51.760
So you can see here on the end that
Jen's course has now been added to it.

113
00:07:54.180 --> 00:07:55.762
And I can replace things, right?

114
00:07:55.762 --> 00:08:01.690
So I say course is two,
which one's course is two, zero, one, two.

115
00:08:01.690 --> 00:08:03.879
I'm replacing my own course on it there,
right?

116
00:08:06.830 --> 00:08:10.032
And I'm changing that to be now to
be the Complete Intro to Databases,

117
00:08:10.032 --> 00:08:11.564
a different course that I teach.

118
00:08:11.564 --> 00:08:14.275
You know something I
didn't even think about,

119
00:08:14.275 --> 00:08:18.902
we could even do something like this,
cuz we're not changing teacher, right?

120
00:08:18.902 --> 00:08:24.050
We could totally just
say course equals blah.

121
00:08:24.050 --> 00:08:25.148
Course 2, and

122
00:08:25.148 --> 00:08:30.563
on that object change the course to be
equal to complete intro to databases.

123
00:08:32.339 --> 00:08:33.828
This sign this needs to be equals.

124
00:08:36.415 --> 00:08:40.636
Now if you go down here,
still the same thing, right?

125
00:08:46.312 --> 00:08:50.250
You can combine those accessories
together, which is interesting.

126
00:08:53.382 --> 00:08:54.276
What else can we do?

127
00:08:54.276 --> 00:08:59.335
We can also say, all right, so
let's get rid of some of this stuff.

128
00:09:08.639 --> 00:09:11.070
Let's do another function here.

129
00:09:11.070 --> 00:09:13.566
So I'm gonna say courses.pop.

130
00:09:15.744 --> 00:09:18.754
What pop does is it removes
the last thing in the array.

131
00:09:20.488 --> 00:09:25.540
So I have Scott Moss' course here, and
this is going to be taken off, right?

132
00:09:25.540 --> 00:09:28.883
And actually if I say
const scott equals this,

133
00:09:28.883 --> 00:09:32.150
it'll actually take it and
return it to you.

134
00:09:32.150 --> 00:09:38.506
So now Scott, this variable here will
be this particular variable, right?

135
00:09:38.506 --> 00:09:42.689
So if I say console.log, Scott,

136
00:09:42.689 --> 00:09:47.172
you'll see that it's just
Scott's course right there.

137
00:09:47.172 --> 00:09:49.762
No, it's Jen's cuz
that's the one I put on.

138
00:09:49.762 --> 00:09:51.406
See, I wasn't even thinking through it.

139
00:09:51.406 --> 00:09:55.133
[LAUGH] Right,
cuz I pushed Jen's course on here.

140
00:09:59.485 --> 00:10:02.551
Okay, so that's not Scott,
we should say Jen.

141
00:10:06.083 --> 00:10:12.740
Now if I say console.log(courses.length),

142
00:10:16.015 --> 00:10:21.851
This was five, this was six, what is this?

143
00:10:21.851 --> 00:10:24.810
Five, we went back down.

144
00:10:24.810 --> 00:10:25.476
There we go.

145
00:10:30.269 --> 00:10:33.582
So there's just a bunch of functions like
that built into, there's a shift and

146
00:10:33.582 --> 00:10:36.151
unshift, which are the worst
named functions by the way, but

147
00:10:36.151 --> 00:10:37.502
that's what they're called.

148
00:10:39.332 --> 00:10:42.734
Shift removes off the front, and I think
they invented that one for instance like,

149
00:10:42.734 --> 00:10:45.522
okay, you might need to take
something off the beginning, right?

150
00:10:45.522 --> 00:10:48.715
So if I said courses.shift,

151
00:10:48.715 --> 00:10:54.084
console.log(courses.shift) it's going to

152
00:10:54.084 --> 00:10:59.333
remove I think Wills course and
return it to you.

153
00:10:59.333 --> 00:11:01.445
You can see right there
removes Will's course there.

154
00:11:04.392 --> 00:11:11.625
And now I can say courses,
what's the opposite of shifting?

155
00:11:11.625 --> 00:11:17.801
unshifting(jen).

156
00:11:17.801 --> 00:11:19.989
So now what's the first item in my array?

157
00:11:22.241 --> 00:11:28.513
Jen, right, cuz undoes what shift does.

158
00:11:28.513 --> 00:11:31.839
It's not intuitive at all, it is the
dumbest name that I can possibly think of,

159
00:11:31.839 --> 00:11:33.191
but that's what it's called.

160
00:11:35.713 --> 00:11:37.707
By the way,
I almost always have to look this up,

161
00:11:37.707 --> 00:11:39.710
cuz it just doesn't make any sense to me.

162
00:11:39.710 --> 00:11:42.350
I can never remember what it is,
so I have to usually look it up.

163
00:11:42.350 --> 00:11:45.526
I just feel lucky that I remembered
this time cuz I'm on camera.

