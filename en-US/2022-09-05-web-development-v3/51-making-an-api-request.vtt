WEBVTT

1
00:00:00.210 --> 00:00:05.457
So I have coated objectively
one of the greatest programs

2
00:00:05.457 --> 00:00:11.600
of all time here that if I click
the gimme doggo button, I get a dog.

3
00:00:11.600 --> 00:00:17.450
This is peak programming, by the way,
dog btn, dog btn is peak programming.

4
00:00:17.450 --> 00:00:21.230
So let's see how we made
this lovely dog btn button.

5
00:00:21.230 --> 00:00:26.060
I have a button here with called dog-btn.

6
00:00:26.060 --> 00:00:30.200
And then I have some div where I'm
just gonna stick dog pictures, right?

7
00:00:30.200 --> 00:00:34.050
So I'm target to stick some stuff there.

8
00:00:34.050 --> 00:00:36.560
I'm gonna just throw this out here.

9
00:00:36.560 --> 00:00:39.340
I don't control Dog star CEO, by the way.

10
00:00:39.340 --> 00:00:40.410
It's not mine.

11
00:00:40.410 --> 00:00:44.540
Someone makes it, I make a donation every
time I teach a class because it's awesome

12
00:00:44.540 --> 00:00:47.040
that there's a free dog API out there.

13
00:00:47.040 --> 00:00:50.250
But if you get something back here
that you don't expect I have no

14
00:00:50.250 --> 00:00:51.149
control of that.

15
00:00:53.318 --> 00:00:55.134
You have to remember that
I used to work at Reddit,

16
00:00:55.134 --> 00:00:56.660
where it was all user generated content.

17
00:00:56.660 --> 00:01:00.354
I've seen what users can generate and

18
00:01:00.354 --> 00:01:04.748
I'm always concerned
of what can come back.

19
00:01:04.748 --> 00:01:06.873
Okay, so, we have the URL,

20
00:01:06.873 --> 00:01:12.019
which I just got from the documentation
here from Dog.CEO, right?

21
00:01:15.025 --> 00:01:22.088
So this is a API endpoint that I can
request random images from, okay?

22
00:01:25.434 --> 00:01:30.230
And then what I do here is I
run a function called fetch.

23
00:01:32.050 --> 00:01:34.320
Fetch is built into your
browser as part of the DOM.

24
00:01:35.930 --> 00:01:40.764
And it has the ability to go out and
request information from a server.

25
00:01:44.199 --> 00:01:46.600
This gives you back
what's called a promise.

26
00:01:48.010 --> 00:01:49.550
This tends to be pretty difficult for
people.

27
00:01:49.550 --> 00:01:51.070
So if this feels hard, it's okay.

28
00:01:51.070 --> 00:01:54.766
It took me a while to wrap my head
around fully what a promise is.

29
00:01:54.766 --> 00:01:57.710
But a promise is just it's an object,
right?

30
00:01:57.710 --> 00:02:00.361
And it's an object that represents
a future value that you're gonna get back

31
00:02:00.361 --> 00:02:02.460
from the API because you
have to think about it.

32
00:02:02.460 --> 00:02:06.980
If I click this Gimme Doggo button,
it's not instant, right?

33
00:02:06.980 --> 00:02:11.160
It can't be instant because
the random dog is not on my computer.

34
00:02:11.160 --> 00:02:13.371
This is going to Dog.CEO server.

35
00:02:13.371 --> 00:02:15.890
There's a delay, right?

36
00:02:15.890 --> 00:02:19.987
So we have to wait, this is asynchronous
programming, right, it's not synchronous.

37
00:02:19.987 --> 00:02:23.048
If I had the dog picture already
I could just instantly change

38
00:02:23.048 --> 00:02:25.158
it I wouldn't have to wait for anything.

39
00:02:25.158 --> 00:02:28.795
But because it has to go out to
the Internet, ask a service like, hey,

40
00:02:28.795 --> 00:02:31.540
give me something and then come back.

41
00:02:31.540 --> 00:02:33.440
Just takes time, right?

42
00:02:33.440 --> 00:02:35.330
What if the user is on
really slow Internet?

43
00:02:35.330 --> 00:02:37.080
It takes even more time, right?

44
00:02:38.470 --> 00:02:41.895
So that's why we have to
use promises to say, hey,

45
00:02:41.895 --> 00:02:45.940
I'm gonna go do something and
then I have to wait for it.

46
00:02:45.940 --> 00:02:47.542
That's why promises are useful here.

47
00:02:52.349 --> 00:02:55.370
So I'm gonna call fetch
here with the DOG_URL.

48
00:02:55.370 --> 00:02:59.229
And what I'm going to say is,
when this comes back,

49
00:02:59.229 --> 00:03:03.110
that's what this .then function means,
do this.

50
00:03:05.770 --> 00:03:08.610
So you say promise .then you give
it a function of something to do

51
00:03:08.610 --> 00:03:09.510
when it comes back.

52
00:03:11.310 --> 00:03:15.260
So whenever the server finally responds
back, all right, here's your random dog.

53
00:03:17.070 --> 00:03:19.660
I have to call response.text here.

54
00:03:22.270 --> 00:03:24.830
It takes a second for
the browser to process this, right?

55
00:03:24.830 --> 00:03:26.590
So we have to do it again.

56
00:03:26.590 --> 00:03:30.994
Where we say return processing promise and
then we'll say .then, right?

57
00:03:30.994 --> 00:03:33.570
So this is another promise.

58
00:03:33.570 --> 00:03:37.230
And then here,
I finally have the finished result.

59
00:03:37.230 --> 00:03:40.234
So you have to go through two promises
to finally get to the information that

60
00:03:40.234 --> 00:03:41.150
you're looking for.

61
00:03:42.950 --> 00:03:43.870
It's a strange API.

62
00:03:43.870 --> 00:03:46.636
Typically I would have expected
this to just be one, right, but

63
00:03:46.636 --> 00:03:49.880
with the way this works, it actually
takes two promises to get through it.

64
00:03:52.100 --> 00:03:57.540
Finally, this processedResponse
here will be a JSON string, right?

65
00:03:57.540 --> 00:04:00.016
So it'll be this string here.

66
00:04:04.860 --> 00:04:09.590
Of unprocessed JSON, right?

67
00:04:09.590 --> 00:04:13.491
Oops, so I have to do JSON.parse, right?

68
00:04:13.491 --> 00:04:18.852
I have to turn this process
response this string of HTML or

69
00:04:18.852 --> 00:04:22.740
sorry the string of JSON into an object.

70
00:04:22.740 --> 00:04:24.540
That's what this JSON.parse does, right?

71
00:04:27.170 --> 00:04:30.570
And then here, I'm just gonna
create an element of an image tag.

72
00:04:30.570 --> 00:04:34.620
I'm going to set the source of
it to be the message, right?

73
00:04:34.620 --> 00:04:41.810
Remember here if we look at the response,
the message is the picture, right?

74
00:04:41.810 --> 00:04:43.950
I don't know why they call it message.

75
00:04:43.950 --> 00:04:45.110
It's not really a message.

76
00:04:45.110 --> 00:04:49.552
It's an URL or an image but
Dog.CEO decided to call that the message.

77
00:04:52.141 --> 00:04:56.637
Okay, I set the alt text to be cute
doggo because we should have an alt text

78
00:04:56.637 --> 00:04:58.205
because it's an image.

79
00:04:58.205 --> 00:05:03.767
And then I say doggos which is
the name of what I called my variable

80
00:05:03.767 --> 00:05:08.615
here of this particular div,
right, and I say append.

81
00:05:12.449 --> 00:05:17.293
And then I added an event listener that
every time I click add new doggo it

82
00:05:17.293 --> 00:05:18.684
does that, right?

83
00:05:21.918 --> 00:05:26.637
So now if I click this several times,
right,

84
00:05:26.637 --> 00:05:31.120
it'll append several dog pictures here.

85
00:05:35.055 --> 00:05:37.630
Now I'm gonna show you
how to do this faster.

86
00:05:37.630 --> 00:05:42.257
But I wanted to show you this the
painstakingly long way to do this, right?

87
00:05:42.257 --> 00:05:46.200
But this is how you make
a request from a server.

88
00:05:46.200 --> 00:05:50.060
You call fetch to some URL
that you know is an API.

89
00:05:50.060 --> 00:05:53.807
You're gonna get back some blob,
you have to then say,

90
00:05:53.807 --> 00:05:56.420
this is what I expected from the blob.

91
00:05:56.420 --> 00:05:59.090
In this case,
everything can be made text, right?

92
00:05:59.090 --> 00:06:01.980
So text is a safe one that always works.

93
00:06:01.980 --> 00:06:05.960
And then here finally I will
get this response, right?

94
00:06:05.960 --> 00:06:07.686
And then I can start doing things with it.

95
00:06:10.424 --> 00:06:15.018
Now, you might ask me what
happens if there's a error?

96
00:06:15.018 --> 00:06:22.560
Well, I can say .catch(function(error.

97
00:06:22.560 --> 00:06:25.039
And I can handle the error.

98
00:06:28.175 --> 00:06:30.492
Like imagine if Dog.CEO went down, right?

99
00:06:30.492 --> 00:06:34.580
Maybe they, I don't know, mess something
up and then the whole thing goes down.

100
00:06:34.580 --> 00:06:37.120
You could get back an error from the API,
right?

101
00:06:37.120 --> 00:06:41.289
So might have to show that these
are like a you can do like alert.

102
00:06:44.067 --> 00:06:47.142
No it\'s bad, I don't know.

103
00:06:52.881 --> 00:06:54.099
Something like that.

104
00:06:57.232 --> 00:07:02.149
But that's what the catches the catch is
basically, no something happened I have

105
00:07:02.149 --> 00:07:05.830
to respond to something going
wrong between me and the server.

106
00:07:06.900 --> 00:07:10.433
What I showed you here is called
promise chaining by the way.

107
00:07:10.433 --> 00:07:14.764
You'll sometimes see that referred
to it's just doing multiple promises

108
00:07:14.764 --> 00:07:19.301
particularly here that you have to return
the promise to be able to .then again

109
00:07:19.301 --> 00:07:21.931
that piece of it is
called promise chaining.

110
00:07:21.931 --> 00:07:24.840
Just to make this a little bit easier.

111
00:07:24.840 --> 00:07:26.698
There's actually a response.json.

112
00:07:26.698 --> 00:07:28.958
So remember we did .text here before.

113
00:07:28.958 --> 00:07:34.002
Here I'm doing .json because I know that
the server is gonna give me back json.

114
00:07:34.002 --> 00:07:36.236
I get to skip a step which is nice.

115
00:07:36.236 --> 00:07:41.343
So instead of this process response being
texted I have to go say json.parse on.

116
00:07:41.343 --> 00:07:45.570
I can just say response.json and
this is already an object.

117
00:07:45.570 --> 00:07:49.538
So basically, I'm making
the browser do the parsing for me,

118
00:07:49.538 --> 00:07:52.070
I don't have to do it manually myself.

119
00:07:52.070 --> 00:07:53.611
I will say 99% of time,

120
00:07:53.611 --> 00:07:57.760
you're just going to do response.json
instead of response.text.

121
00:07:59.230 --> 00:08:00.960
But sometimes it's text.

122
00:08:00.960 --> 00:08:02.850
In which case you would
have to do response.text.

123
00:08:05.483 --> 00:08:10.665
So just to be super concrete about it
here, here we did response.text, right?

124
00:08:10.665 --> 00:08:15.655
And then here with processedResponse,
I had to do a JSON.parse.

125
00:08:16.965 --> 00:08:20.445
If I do it this way down here
where I say response.json,

126
00:08:20.445 --> 00:08:23.045
I don't have to do the parsing part of it.

127
00:08:24.285 --> 00:08:26.105
All right, let's make this even easier.

128
00:08:26.105 --> 00:08:29.740
I've shown you how to do
this promise chaining.

129
00:08:29.740 --> 00:08:31.663
Let's make this 100 times more simple.

130
00:08:31.663 --> 00:08:35.403
This is really dense, you're learning
coding for the first time we're already

131
00:08:35.403 --> 00:08:40.240
talking about promises, unfortunately it's
unavoidable because they're everywhere.

132
00:08:40.240 --> 00:08:43.110
Anytime you have to wait for
something, you're gonna use a promise.

133
00:08:43.110 --> 00:08:47.024
But I'm going to show you how to use
a sync await to make this just 100 times

134
00:08:47.024 --> 00:08:47.890
easier to read.

