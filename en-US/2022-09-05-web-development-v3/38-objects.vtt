WEBVTT

1
00:00:00.295 --> 00:00:04.814
What happens if you have a collection of
data that you wanna kinda keep together on

2
00:00:04.814 --> 00:00:07.082
a in a barrel of data or
a package of data?

3
00:00:07.082 --> 00:00:10.837
Well, JavaScript lets you
do that with objects.

4
00:00:10.837 --> 00:00:15.449
So this curly brace here denotes that
I'm declaring a new object, right?

5
00:00:15.449 --> 00:00:16.478
So it's one object.

6
00:00:16.478 --> 00:00:21.127
So I have this person object that
contains all of this sub-information.

7
00:00:21.127 --> 00:00:25.809
So I have Brian.

8
00:00:25.809 --> 00:00:31.247
I have a person object who has a name,
a city, a state, a favorite food.

9
00:00:31.247 --> 00:00:33.681
WantsTacosRightNow, it's
just a generally true thing.

10
00:00:33.681 --> 00:00:38.594
That was wantsTacos and numbers of
tacos wanted, I have no control,

11
00:00:38.594 --> 00:00:41.487
so I would like 100 of them right now.

12
00:00:41.487 --> 00:00:46.614
So if I console.log(person), I get
the whole object, right, all of this.

13
00:00:46.614 --> 00:00:51.446
If I console.log(person.name),
this is what the name again remember,

14
00:00:51.446 --> 00:00:54.287
like console.log is a function on console.

15
00:00:54.287 --> 00:00:58.062
Person.name is just a property,
it's a variable built into Brian.

16
00:00:58.062 --> 00:01:01.213
So those are two words that
I'll use synonymously as well,

17
00:01:01.213 --> 00:01:04.376
a property is just a variable
built into an object, right?

18
00:01:04.376 --> 00:01:09.070
So this person object has a name property,
is city property,

19
00:01:09.070 --> 00:01:11.970
a state property, so on and so forth.

20
00:01:11.970 --> 00:01:15.074
This could also be called a key, right?

21
00:01:15.074 --> 00:01:19.464
Has a name key, a city key and
then, this is a key value pair.

22
00:01:19.464 --> 00:01:21.206
So you would call Brian Holt here,

23
00:01:21.206 --> 00:01:23.741
this part of it would be called the value,
right?

24
00:01:23.741 --> 00:01:26.515
Name being the key,
Brian Holt being the value.

25
00:01:30.018 --> 00:01:34.472
One thing to note about keys is they're
unique, right, so I can't have two names.

26
00:01:38.302 --> 00:01:42.107
What will actually end up happening
here is this one overwrites this one.

27
00:01:42.107 --> 00:01:47.209
Not that you would ever want to do this,
right, there's no reason that

28
00:01:47.209 --> 00:01:52.311
you would want to declare it twice but
you can it just overwrites it, but

29
00:01:52.311 --> 00:01:58.122
you can have as many of the same values,
right, the value is not unique, right?

30
00:01:58.122 --> 00:02:01.735
So I have name and other name here and

31
00:02:01.735 --> 00:02:06.925
they're both Brian Holt,
totally fine, right?

32
00:02:06.925 --> 00:02:10.938
So the name is not necessarily unique,
a sort of the value,

33
00:02:10.938 --> 00:02:12.635
the value is not unique.

34
00:02:17.913 --> 00:02:23.069
Okay, and then this is the way that
you access things on the object,

35
00:02:23.069 --> 00:02:28.857
this is a person.name and you can see
down here it gives you back Brian Holt or

36
00:02:28.857 --> 00:02:34.661
if I said person.favoriteFood,
I'll get the toggle emoji back, right?

37
00:02:37.052 --> 00:02:41.493
So I did line 11 here just to show
you that technically you can do this,

38
00:02:41.493 --> 00:02:44.983
where you use the square
brackets with the quotes here.

39
00:02:44.983 --> 00:02:48.652
This and
this do exactly the same thing, right?

40
00:02:48.652 --> 00:02:52.160
I just wanna show it to you so
that you see them, they're both the same,

41
00:02:52.160 --> 00:02:52.813
it's fine.

42
00:02:52.813 --> 00:02:55.089
This is,
I would argue much easier to read,

43
00:02:55.089 --> 00:02:58.111
so I'm gonna implore you to use
the way I do it on line 10.

44
00:02:58.111 --> 00:03:02.057
But if you see like on stack overflow or
something, then it's fine, it still works.

45
00:03:02.057 --> 00:03:06.639
The reason why this can actually
be useful is let's say,

46
00:03:06.639 --> 00:03:11.793
I have a variable out here if const
propertyName equal to name and

47
00:03:11.793 --> 00:03:17.058
I console.log propertyName here
between the square brackets.

48
00:03:17.058 --> 00:03:18.375
What do you expect this to log now?

49
00:03:21.477 --> 00:03:23.621
What's stored in name, right?

50
00:03:26.379 --> 00:03:29.402
Or let's maybe change
this to be like city.

51
00:03:32.879 --> 00:03:37.481
That's why you sometimes need to use
that square brackets because obviously I

52
00:03:37.481 --> 00:03:39.793
can't just say .propertyName here.

53
00:03:39.793 --> 00:03:43.641
That doesn't make any sense because
there's nothing on here called

54
00:03:43.641 --> 00:03:44.579
property name.

55
00:03:44.579 --> 00:03:52.248
So if I wanna use the variable name as
the accessor, you have to do it this way.

56
00:03:52.248 --> 00:03:54.914
Makes sense?

57
00:03:54.914 --> 00:03:55.414
It's kind of weird.

58
00:03:59.289 --> 00:04:07.772
&gt;&gt; Why does the property name become
accessible through the brackets of person.

59
00:04:07.772 --> 00:04:10.277
Does it become a part of
the object when you declare it?

60
00:04:10.277 --> 00:04:11.442
&gt;&gt; Well, it's looking for

61
00:04:11.442 --> 00:04:14.669
some sort of, sorry to use
the technical term literal, right?

62
00:04:14.669 --> 00:04:19.584
So it's looking for something that
it can literally uses that, so

63
00:04:19.584 --> 00:04:24.339
if I wanted to have the city here,
I'd have to put sorry, city.

64
00:04:24.339 --> 00:04:29.410
I have to put this in quotes
because it's looking for

65
00:04:29.410 --> 00:04:33.682
something that I can use as the key,
right?

66
00:04:33.682 --> 00:04:37.974
So I can either take this,
right, which is this or

67
00:04:37.974 --> 00:04:41.358
I can replace it with this and get that.

68
00:04:41.358 --> 00:04:45.604
But I can't put city here, right?

69
00:04:45.604 --> 00:04:50.276
This doesn't work because there's
nothing called city, right?

70
00:04:50.276 --> 00:04:55.610
It's looking for a variable called
city and no city variable exists.

71
00:04:57.089 --> 00:05:00.965
&gt;&gt; It turns into just
quotes with nothing in it.

72
00:05:00.965 --> 00:05:04.166
All right, undefined.

73
00:05:04.166 --> 00:05:05.069
&gt;&gt; Yep.

74
00:05:14.630 --> 00:05:17.809
I don't know why this is
not happy about that.

75
00:05:17.809 --> 00:05:18.943
There is a city defined.

76
00:05:18.943 --> 00:05:22.571
Okay, sometimes it just
gets in a bad state.

77
00:05:22.571 --> 00:05:24.160
Yeah, no Mark's exactly right.

78
00:05:24.160 --> 00:05:25.359
So if you put city here and

79
00:05:25.359 --> 00:05:30.698
there's no such thing as a city
variable This is just undefined, right?

80
00:05:30.698 --> 00:05:36.032
So yeah, it tells you right
there city is not defined.

81
00:05:36.032 --> 00:05:42.379
Let's just comment this out, so
there's all there we can see is that.

82
00:05:42.379 --> 00:05:45.979
So if you wanted to do that, you would
have to put either quotes around this or

83
00:05:45.979 --> 00:05:48.924
you'd have to have some variable
up here like property name.

84
00:05:54.008 --> 00:05:57.259
That makes sense, kind of?

85
00:05:57.259 --> 00:06:04.018
&gt;&gt; It just seems to me that property name
is declared outside the scope of person.

86
00:06:10.082 --> 00:06:14.324
&gt;&gt; Property name here exists in the same
scope that we're using it as the accessor

87
00:06:14.324 --> 00:06:15.040
right here.

88
00:06:15.040 --> 00:06:17.411
So let's get rid of these as well.

89
00:06:17.411 --> 00:06:19.339
I'm using property names here.

90
00:06:21.281 --> 00:06:24.154
This is in scope, right?

91
00:06:24.154 --> 00:06:29.135
It's going to replace this
literally right here with city.

92
00:06:29.135 --> 00:06:32.399
That's what the engine's
doing underneath the hood.

93
00:06:32.399 --> 00:06:35.400
And then city is going to be used
to go grab city out of here, right?

94
00:06:35.400 --> 00:06:39.161
So there's kinda like a chain
of actions here, that help?

95
00:06:39.161 --> 00:06:40.038
&gt;&gt; Yeah.
&gt;&gt; Cool.

96
00:06:41.310 --> 00:06:45.357
For the most part, don't need to care.

97
00:06:45.357 --> 00:06:48.967
You're gonna wanna do person.city,
this would only be for

98
00:06:48.967 --> 00:06:53.852
some weird case where you wanted to access
different variables on the object based

99
00:06:53.852 --> 00:06:57.923
on the situation But
for now this is enough.

100
00:06:57.923 --> 00:07:03.986
&gt;&gt; So maybe because propertyName is
tied to city which is in the object,

101
00:07:03.986 --> 00:07:09.743
we can console log person propertyName,
we'll get something.

102
00:07:09.743 --> 00:07:14.711
But if we say something like cons
propertyName equals a random,

103
00:07:14.711 --> 00:07:16.279
say happy, right?

104
00:07:16.279 --> 00:07:20.507
But because there is no direct
relationship with hobby or

105
00:07:20.507 --> 00:07:23.597
in the object, they won't be anything.

106
00:07:23.597 --> 00:07:24.520
&gt;&gt; Yeah.
&gt;&gt; Undefined.

107
00:07:24.520 --> 00:07:26.206
&gt;&gt; Undefined.

108
00:07:26.206 --> 00:07:26.736
You got it.

109
00:07:26.736 --> 00:07:30.349
Exactly, good job.

110
00:07:30.349 --> 00:07:32.659
Everyone's kinda kind of like
coming up from their own angle and

111
00:07:32.659 --> 00:07:33.826
I'm super here for it, right?

112
00:07:33.826 --> 00:07:36.010
Like I had to approach
a lot of these things and

113
00:07:36.010 --> 00:07:39.575
I'm sharing with you my problems with
I had when I was learning these, but

114
00:07:39.575 --> 00:07:42.820
my problems are definitely your
problems and vice versa, right?

115
00:07:42.820 --> 00:07:48.089
So yeah,
I appreciate you working through it.

116
00:07:48.089 --> 00:07:53.975
Okay, so let's say we have some
music recommendation engine,

117
00:07:53.975 --> 00:08:00.410
I'm pretty sure this is how Spotify works,
it's exactly like this.

118
00:08:00.410 --> 00:08:03.214
That's a joke,
that definitely doesn't work like this.

119
00:08:03.214 --> 00:08:06.731
So I have to suggest music function,
right,

120
00:08:06.731 --> 00:08:11.183
it takes in person or
some sort of person object, right?

121
00:08:11.183 --> 00:08:14.377
And so I call suggest music with person1,
right?

122
00:08:14.377 --> 00:08:19.954
So person1 here is Angie and
Angie is age 25 to 35.

123
00:08:19.954 --> 00:08:26.528
So what's the first thing that's
gonna be logged out for Angie.

124
00:08:26.528 --> 00:08:32.259
So her age range is 25 to 35 here,
right, so personnel age range,

125
00:08:32.259 --> 00:08:37.993
so it's gonna say, we think you will
like Daft Punk because if you're

126
00:08:37.993 --> 00:08:43.459
in the demographic by law you must
like Daft Punk or make the rules.

127
00:08:43.459 --> 00:08:46.258
Okay, second one is Francesca.

128
00:08:46.258 --> 00:08:49.699
Franchesca is age 65 to 75, and

129
00:08:49.699 --> 00:08:54.413
looks like she's in this demographic,
right?

130
00:08:54.413 --> 00:08:59.114
So person.ageRange = 65 to 75.

131
00:08:59.114 --> 00:09:00.855
Probably gonna like Johnny Cash.

132
00:09:00.855 --> 00:09:04.055
I like Johnny Cash too, you probably
could have put that in mind, that's fine.

133
00:09:04.055 --> 00:09:10.162
But Francesca definitely, according to
her Spotify algorithm likes Johnny Cash.

134
00:09:10.162 --> 00:09:12.357
And we didn't do a one
with anyone else but

135
00:09:12.357 --> 00:09:16.454
pretty sure everyone likes David Bowie,
right, so that's good fallback.

136
00:09:19.387 --> 00:09:22.994
But this is like one way
you can use objects, right?

137
00:09:22.994 --> 00:09:27.029
You can get this like whole kind of
barrel of information about someone,

138
00:09:27.029 --> 00:09:29.872
one of your users and
then you can pass it through and

139
00:09:29.872 --> 00:09:33.596
read properties off of them and
do different things based on that.

140
00:09:33.596 --> 00:09:35.293
Good, makes sense?

141
00:09:39.543 --> 00:09:40.600
&gt;&gt; I guess I do have a question.

142
00:09:40.600 --> 00:09:41.335
&gt;&gt; Yeah, please do?

143
00:09:41.335 --> 00:09:46.366
&gt;&gt; So like just trying to
understand like the context

144
00:09:46.366 --> 00:09:51.274
of this cuz some people may
do this in a database or

145
00:09:51.274 --> 00:09:54.046
you could use JavaScript.

146
00:09:54.046 --> 00:09:57.986
Databases are very capable
of doing things like select,

147
00:09:57.986 --> 00:10:01.852
star where age range equals 65 through 75,
right?

148
00:10:01.852 --> 00:10:06.450
And they will only give you back records
that necessarily have those things,

149
00:10:06.450 --> 00:10:07.943
totally valid use case.

150
00:10:07.943 --> 00:10:10.387
And that would be like done on like
on a back end with a server and

151
00:10:10.387 --> 00:10:12.181
the server would return that to you,
right?

152
00:10:12.181 --> 00:10:14.419
And this we're all doing in the browser,
right?

153
00:10:14.419 --> 00:10:17.580
So we're not reaching out
to any sort of database or

154
00:10:17.580 --> 00:10:20.238
doing all this processing in the browser.

155
00:10:20.238 --> 00:10:22.581
So it's gonna be contextual.

156
00:10:22.581 --> 00:10:24.066
So however you're solving a problem,

157
00:10:24.066 --> 00:10:26.958
Spotify doesn't do this in your browser,
they do it on a server somewhere.

158
00:10:26.958 --> 00:10:31.749
They probably do it in some sort of
like AI machine learning kind of cluster

159
00:10:31.749 --> 00:10:33.232
sort of idea, right?

160
00:10:33.232 --> 00:10:35.776
And then they probably save
that to a database and

161
00:10:35.776 --> 00:10:38.078
then you read it from the database, right?

162
00:10:38.078 --> 00:10:42.354
But imagine a world where you read
an app that has no back end server,

163
00:10:42.354 --> 00:10:46.256
it just takes in a person's interests and
then based on that,

164
00:10:46.256 --> 00:10:51.209
returns them information, this would all
have to be done in JavaScript in your

165
00:10:51.209 --> 00:10:54.237
browser and
you will be doing things like this.

166
00:10:54.237 --> 00:10:58.803
So it just depends on how and
where you're doing that.

167
00:10:59.962 --> 00:11:03.824
In other words,
there's many right ways to do this.

168
00:11:03.824 --> 00:11:05.075
Cool, good question.

169
00:11:09.921 --> 00:11:13.449
So objects, so I have a dog object here.

170
00:11:13.449 --> 00:11:16.923
Can even have their own functions.

171
00:11:16.923 --> 00:11:21.019
So an example here is I have dog and
I gave the name dog,

172
00:11:21.019 --> 00:11:24.495
I'm very creative, we'll put Luna there.

173
00:11:24.495 --> 00:11:26.507
Luna is my dog.

174
00:11:26.507 --> 00:11:32.460
And I gave Luna a function of
speak where she says woof woof.

175
00:11:32.460 --> 00:11:35.783
So I can say dog.speak.

176
00:11:35.783 --> 00:11:38.785
We see our telltale parentheses there,
right?

177
00:11:38.785 --> 00:11:44.007
So this is going to invoke,
invoke is another word for call or use.

178
00:11:44.007 --> 00:11:47.480
It's going to invoke the speak function or
the speak method.

179
00:11:47.480 --> 00:11:52.036
You could speaker method here as well.

180
00:11:52.036 --> 00:11:58.852
The speak function, right,
this is the shorthand from doing it,

181
00:11:58.852 --> 00:12:03.843
you can also do speak colon
function like that and

182
00:12:03.843 --> 00:12:06.774
that totally works as well.

183
00:12:08.868 --> 00:12:11.231
Up to you, I like this one,
it's nice and short

184
00:12:17.293 --> 00:12:20.120
Objects can have nested
objects inside of them.

185
00:12:20.120 --> 00:12:24.876
So I can have me here and I have a name
object inside of the me object but

186
00:12:24.876 --> 00:12:29.475
the first and last and
a location with a city, state and country.

187
00:12:29.475 --> 00:12:36.315
And then here I can say me.name.first,
right, which I'll get Brian.

188
00:12:36.315 --> 00:12:43.029
Me.location.state, I get Washington.

189
00:12:43.029 --> 00:12:44.359
I think that makes sense, right?

190
00:12:53.044 --> 00:12:57.753
So to drive home another point here,
what do you think console is then?

191
00:13:00.281 --> 00:13:03.749
Console's just an object that
the browser provides for you, right?

192
00:13:03.749 --> 00:13:07.060
It's an object full of functions.

193
00:13:07.060 --> 00:13:12.466
I mean, you can console.log(console),

194
00:13:12.466 --> 00:13:15.880
and you're just gonna get,

195
00:13:15.880 --> 00:13:21.578
it's an object with a bunch
of functions on it.

196
00:13:21.578 --> 00:13:24.663
These are all the functions
that you can call and

197
00:13:24.663 --> 00:13:28.921
we've been using console.log but
there's a console.error.

198
00:13:28.921 --> 00:13:31.684
There's a console.info.

199
00:13:31.684 --> 00:13:35.563
Now mostly's, aren't being captured here,
so you're not gonna see them.

200
00:13:35.563 --> 00:13:39.393
But if I do hear,
you can actually see it here.

201
00:13:39.393 --> 00:13:44.697
So if I say console, let's just trash
this so you can see everything.

202
00:13:44.697 --> 00:13:47.967
If I say console.info,

203
00:13:47.967 --> 00:13:53.582
notice there's like this little i there.

204
00:13:53.582 --> 00:13:58.318
It's large differently so you can kind of
look at your logs in different lengths.

205
00:13:58.318 --> 00:14:04.791
If I say console.error,
no there was an error.

206
00:14:04.791 --> 00:14:06.424
You can see that there's red here,

207
00:14:06.424 --> 00:14:09.426
it actually gives me like a trace
of where that happened, right?

208
00:14:09.426 --> 00:14:10.164
It tries to be helpful.

209
00:14:10.164 --> 00:14:11.352
It's like, you had a problem here.

210
00:14:11.352 --> 00:14:13.032
You told me that you had an error.

211
00:14:13.032 --> 00:14:15.745
I'm gonna try and
make this helpful for you.

212
00:14:15.745 --> 00:14:19.887
And then I can say console.log.

213
00:14:19.887 --> 00:14:22.618
This is a log, right?

214
00:14:22.618 --> 00:14:27.084
Now I can say, now only show me infos.

215
00:14:27.084 --> 00:14:32.384
Also I can say, rather don't show
me errors and don't show me infos.

216
00:14:34.562 --> 00:14:37.855
And don't show me the bugs, you can go
in there and kind of slice and dice and

217
00:14:37.855 --> 00:14:38.812
show me some things.

218
00:14:38.812 --> 00:14:40.363
Don't show me other things.

219
00:14:40.363 --> 00:14:41.431
It's kind of fun, right?

220
00:14:44.722 --> 00:14:48.624
So, that's all console is,
it's just an object full of functions,

221
00:14:48.624 --> 00:14:50.022
same with math, right?

222
00:14:50.022 --> 00:14:52.698
We saw math.floor, math.ceiling,

223
00:14:52.698 --> 00:14:56.191
math is just an object full
of math methods for you.

224
00:14:58.668 --> 00:15:04.403
And again, if I just say math and
we can look at it here.

225
00:15:04.403 --> 00:15:06.615
The browser actually let me explore it.

226
00:15:06.615 --> 00:15:10.139
Here's all of the functions
that are on maths for you.

227
00:15:10.139 --> 00:15:15.879
Absolute value,
like you can get into like sine and

228
00:15:15.879 --> 00:15:23.104
cosine and A10, 8# and
things like that are tench, right?

229
00:15:24.405 --> 00:15:29.971
Man it's been a long time since I've
had that's like hyperbolic tan,

230
00:15:29.971 --> 00:15:36.678
it's been a long time since I've had a
geometry class, I don't actually remember.

231
00:15:36.678 --> 00:15:38.198
But there's logs.

232
00:15:38.198 --> 00:15:40.325
There's like math.pi, right?

233
00:15:40.325 --> 00:15:47.112
If you like to know what pi is, they'd
have this value of pi that you can use.

234
00:15:47.112 --> 00:15:48.228
Notice it's an all in caps.

235
00:15:48.228 --> 00:15:52.104
That's just like a way of saying like this
is a constant number that doesn't change.

236
00:15:52.104 --> 00:15:55.036
It's called screening case.

237
00:15:55.036 --> 00:16:01.957
Math tardy which I think is,
no it's math.E2.718, right?

238
00:16:01.957 --> 00:16:06.774
That's like E to the X, kind of thing for

239
00:16:06.774 --> 00:16:11.888
like logarithms, things of that nature.

240
00:16:11.888 --> 00:16:16.786
Yeah, they're just objects, everything
in JavaScript is just functions and

241
00:16:16.786 --> 00:16:19.062
objects and other things like that.

