WEBVTT

1
00:00:00.000 --> 00:00:06.311
So, remember we said this, a component is
like this block, it's just the one piece.

2
00:00:06.311 --> 00:00:11.739
But with blocks, if you have kids,
they're really painful to step on.

3
00:00:11.739 --> 00:00:12.714
I've stepped on a lot of toys.

4
00:00:12.714 --> 00:00:13.997
I have a small child right now.

5
00:00:13.997 --> 00:00:15.777
I've stepped on a lot of toys.

6
00:00:15.777 --> 00:00:18.525
A lot of toys have disappeared
mysteriously from my house.

7
00:00:18.525 --> 00:00:19.802
Just letting you know.

8
00:00:19.802 --> 00:00:21.564
But when you take those blocks and
put them together,

9
00:00:21.564 --> 00:00:22.983
you can build incredible things, right?

10
00:00:22.983 --> 00:00:27.423
So a single Lego block is one thing, but
when you have a bunch of them together,

11
00:00:27.423 --> 00:00:30.267
you can do anything you put your mind to,
really.

12
00:00:30.267 --> 00:00:32.604
And that's the same idea
with components in Angular.

13
00:00:32.604 --> 00:00:35.489
You have that one component that
we just saw for that product.

14
00:00:35.489 --> 00:00:38.209
But what if we could combine that
with other components to build up

15
00:00:38.209 --> 00:00:39.105
a full application?

16
00:00:39.105 --> 00:00:40.245
How does that start to look?

17
00:00:40.245 --> 00:00:46.580
Well, the first step to making that
happen is component composition, okay?

18
00:00:46.580 --> 00:00:49.622
Component composition,
that's the first step to getting there.

19
00:00:49.622 --> 00:00:51.387
And how do we get to
component composition?

20
00:00:51.387 --> 00:00:52.330
Here's our idea.

21
00:00:52.330 --> 00:00:53.881
We have our dashboard templates.

22
00:00:53.881 --> 00:00:55.530
So this is on top of dashboard.

23
00:00:55.530 --> 00:00:56.518
You say welcome back,

24
00:00:56.518 --> 00:00:59.488
you always wanna make your users
feel welcome in your application.

25
00:00:59.488 --> 00:01:05.387
So what if I wanna use my UserInfo that
has all the information about that person,

26
00:01:05.387 --> 00:01:10.443
but I have a component that maybe
I wanna reuse other places, right?

27
00:01:10.443 --> 00:01:12.741
Or I wanna separate my stuff.

28
00:01:12.741 --> 00:01:16.320
Maybe somebody else is working on it and
I'm working on a dashboard.

29
00:01:16.320 --> 00:01:17.545
How do we combine that work?

30
00:01:17.545 --> 00:01:18.210
What do we do?

31
00:01:18.210 --> 00:01:19.604
How do we make that happen?

32
00:01:19.604 --> 00:01:22.954
Okay, well, here's what it looks
like in our component class.

33
00:01:22.954 --> 00:01:29.279
So in the dashboard,
first thing we do is bring in the imports.

34
00:01:29.279 --> 00:01:31.093
It's the imports property.

35
00:01:31.093 --> 00:01:34.950
Okay, let me explain what's kinda
happening here, because you might say,

36
00:01:34.950 --> 00:01:36.803
but, Mark, you already imported.

37
00:01:36.803 --> 00:01:39.354
There's an import right at the top.

38
00:01:39.354 --> 00:01:43.995
Remember I told you about that module
thing that kinda manage the imports and

39
00:01:43.995 --> 00:01:46.254
what's available as a dependency.

40
00:01:46.254 --> 00:01:50.297
Well, when we took the modules away,
we still needed a way to say, well,

41
00:01:50.297 --> 00:01:53.839
what other things does this
component depend on to run, right?

42
00:01:53.839 --> 00:01:56.366
And so we have to right now, at this time,

43
00:01:56.366 --> 00:02:00.919
we have to do it manually through this
imports array, where we say, okay,

44
00:02:00.919 --> 00:02:04.416
we file level import so
that it's available to the file.

45
00:02:04.416 --> 00:02:06.586
And now how do we tell that the component,

46
00:02:06.586 --> 00:02:10.246
when the compiler gets involved,
it knows that this is a dependency?

47
00:02:10.246 --> 00:02:12.141
So you add it to this imports array.

48
00:02:12.141 --> 00:02:15.522
Is this the most ergonomic
version of this story?

49
00:02:15.522 --> 00:02:18.392
Not really,
we're looking at ways to solve for

50
00:02:18.392 --> 00:02:22.426
this where you can just import at
the top and just use in a template.

51
00:02:22.426 --> 00:02:24.596
Yeah, we know,
other people do this, all right?

52
00:02:24.596 --> 00:02:25.593
We get it, I know.

53
00:02:25.593 --> 00:02:26.825
React does this, we get it.

54
00:02:26.825 --> 00:02:28.725
Okay, everybody relax, all right?

55
00:02:28.725 --> 00:02:33.396
[LAUGH] But for Angular, this is a relic
of this other thing, right, where we had

56
00:02:33.396 --> 00:02:37.963
the module system and components need
their dependencies defined this way.

57
00:02:37.963 --> 00:02:41.174
And so this is what we're doing for
now, but we are working on a solution.

58
00:02:41.174 --> 00:02:46.834
So we imported the file, then you
import it, and then you reference it.

59
00:02:46.834 --> 00:02:49.394
Remember that selector I was
telling you about before?

60
00:02:49.394 --> 00:02:52.039
That's how you can talk about your
component in a different place.

61
00:02:54.051 --> 00:02:59.542
So now the app info selector
is from UserInfoComponent.

62
00:02:59.542 --> 00:03:02.827
Now, this is a little bit of
a departure from other places.

63
00:03:02.827 --> 00:03:04.883
I use React the most,
cuz a lot of people know React.

64
00:03:04.883 --> 00:03:08.078
In React, you use that class name or
that function name,

65
00:03:08.078 --> 00:03:10.219
right, directly as your component.

66
00:03:10.219 --> 00:03:15.657
But here, we're using the selector, right,
which is defined in your component.

67
00:03:15.657 --> 00:03:21.011
Cuz at the high level,
this is just a way that Angular works when

68
00:03:21.011 --> 00:03:26.278
you wanna reference a different
component in your template.

69
00:03:26.278 --> 00:03:28.212
You have to import it into the file,

70
00:03:28.212 --> 00:03:32.013
add it as a dependency to the component
through the imports array, and

71
00:03:32.013 --> 00:03:35.251
then you use a selector for
that component to reference it.

72
00:03:38.376 --> 00:03:44.620
Okay, I told you, I show you how we
do it and then we go do it together.

73
00:03:44.620 --> 00:03:49.972
Now, this one, I'm gonna give you a few
seconds to get started with this one.

74
00:03:49.972 --> 00:03:52.579
Few moments,
I'm not gonna do seconds on you.

75
00:03:52.579 --> 00:03:55.023
All right, so let's do this.

76
00:03:55.023 --> 00:03:59.225
We're in 03-component-composition.

77
00:03:59.225 --> 00:04:02.559
Does anybody remember what's one of
the first things we should do right now as

78
00:04:02.559 --> 00:04:03.956
we're switching activities?

79
00:04:05.654 --> 00:04:07.052
&gt;&gt; Serve the new one.

80
00:04:07.052 --> 00:04:08.954
&gt;&gt; Yeah, serve the new one.

81
00:04:08.954 --> 00:04:10.491
What did you say?

82
00:04:10.491 --> 00:04:11.542
&gt;&gt; Okay.

83
00:04:11.542 --> 00:04:13.573
&gt;&gt; No, I didn't-
&gt;&gt; I said look at the README.

84
00:04:13.573 --> 00:04:15.356
&gt;&gt; That's definitely a part of it, yeah.

85
00:04:15.356 --> 00:04:18.721
But I just don't want people to get stuck,
and then I wanna do this this and

86
00:04:18.721 --> 00:04:19.660
stop the other one.

87
00:04:19.660 --> 00:04:20.408
&gt;&gt; It will stop the other one.

88
00:04:20.408 --> 00:04:23.634
&gt;&gt; Yeah, that way we're not
stuck on that part, okay?

89
00:04:23.634 --> 00:04:24.867
So let's do that.

90
00:04:24.867 --> 00:04:26.445
So, yeah, we should look at the README.

91
00:04:26.445 --> 00:04:28.988
We should be good developers and
read the manuals,

92
00:04:28.988 --> 00:04:31.601
which I know developers do
not love documentation.

93
00:04:31.601 --> 00:04:32.367
We don't do it.

94
00:04:32.367 --> 00:04:33.357
That's just a part of our story.

95
00:04:33.357 --> 00:04:36.918
I don't know why, it is just how we act,
to our detriment.

96
00:04:36.918 --> 00:04:39.278
So let's read the documentation and
know what's going on.

97
00:04:39.278 --> 00:04:45.815
So in the later activities as we get
deeper, I leave you some context in case.

98
00:04:45.815 --> 00:04:48.590
So this is for
you if you come back to this later and

99
00:04:48.590 --> 00:04:53.328
you just wanna go through the code itself,
you can know the context of the example,

100
00:04:53.328 --> 00:04:55.918
and then you can also
know what steps to take.

101
00:04:55.918 --> 00:04:58.674
So you don't have to read this
now cuz we just talked about it.

102
00:04:58.674 --> 00:05:00.517
But if you came back to this later,

103
00:05:00.517 --> 00:05:04.281
you could just look through
the examples itself, okay, and do this.

104
00:05:04.281 --> 00:05:06.871
We know how to run this example, so
we can copy this code if we want.

105
00:05:08.993 --> 00:05:12.395
We can run it and then see what happens.

106
00:05:12.395 --> 00:05:16.646
I've tried not to give you broken code,
so you can always at least run it.

107
00:05:18.744 --> 00:05:24.239
See, so this is what it starts off as,
as our kinda dashboard.

108
00:05:24.239 --> 00:05:28.925
And we're gonna fill in this
blank space with something.

109
00:05:28.925 --> 00:05:30.438
So let's go through the instructions.

110
00:05:30.438 --> 00:05:32.199
You can go ahead on your own and
read them.

111
00:05:32.199 --> 00:05:34.877
I'm just gonna read them all out for
our friends, all right?

112
00:05:34.877 --> 00:05:37.045
So we're going back to app.component.ts.

113
00:05:37.045 --> 00:05:42.077
So we're gonna update the component simply
to refer to the UserInfoComponent, okay?

114
00:05:42.077 --> 00:05:44.648
Create this component with
the following command.

115
00:05:44.648 --> 00:05:46.794
All right, so
you gotta create a component.

116
00:05:46.794 --> 00:05:50.774
I gave you the command to run, you run
this from the root of your project.

117
00:05:50.774 --> 00:05:53.813
You don't have to go into a separate,
I mean, into the individual project.

118
00:05:53.813 --> 00:05:55.586
You just run it from
the root of your project.

119
00:05:55.586 --> 00:06:02.663
Okay, then after you do that,
Save your changes,

120
00:06:02.663 --> 00:06:07.492
and then we're gonna make sure we can
run it, and then we're off to the races.

121
00:06:07.492 --> 00:06:09.629
Things are gonna be awesome.

122
00:06:09.629 --> 00:06:11.248
All right, so go ahead and
get started with that.

123
00:06:11.248 --> 00:06:15.354
You gotta create the UserInfoComponent.

124
00:06:15.354 --> 00:06:17.954
So let's start doing this together now.

125
00:06:19.894 --> 00:06:21.944
So I'm going to 03-component-composition.

126
00:06:21.944 --> 00:06:22.676
I got my source.

127
00:06:22.676 --> 00:06:25.009
I go to app &gt; app.component.

128
00:06:25.009 --> 00:06:27.973
And so there's a lot of code here.

129
00:06:27.973 --> 00:06:31.786
One of my ideas for this course was to
give you some examples that felt a little

130
00:06:31.786 --> 00:06:35.662
bit more like something you'd actually
encounter when you're working, so

131
00:06:35.662 --> 00:06:38.067
you just have a different experience,
right?

132
00:06:38.067 --> 00:06:43.991
So for this one,
we have this dashboard space, okay?

133
00:06:43.991 --> 00:06:45.373
That's this dashboard space.

134
00:06:45.373 --> 00:06:49.589
And so this first tile is where
we're gonna put our work, okay?

135
00:06:49.589 --> 00:06:50.823
Whatever we do should go here.

136
00:06:50.823 --> 00:06:53.706
And I'm just gonna show
you what I would do.

137
00:06:53.706 --> 00:06:57.650
And so you may have done this in your own
work, like, okay, something goes here,

138
00:06:57.650 --> 00:06:59.892
just so
I can make sure I'm in the right place.

139
00:06:59.892 --> 00:07:03.055
Anybody ever done it before when
you're working on some new code?

140
00:07:03.055 --> 00:07:05.240
Okay, so
now I'm in the right space, right?

141
00:07:05.240 --> 00:07:07.379
So that's the first tile, I know.

142
00:07:07.379 --> 00:07:09.858
Now, I just wanna put my
user info component there.

143
00:07:09.858 --> 00:07:11.205
How do I create that?

144
00:07:11.205 --> 00:07:12.756
So let's see how to create that.

145
00:07:12.756 --> 00:07:19.181
So if we go to ng generate component, and
I'll explain this command step by step.

146
00:07:19.181 --> 00:07:22.722
Let me just open up another thing.

147
00:07:22.722 --> 00:07:24.739
Let me explain this one step by step.

148
00:07:24.739 --> 00:07:27.040
Okay, I'm gonna explain it from here.

149
00:07:27.040 --> 00:07:27.944
That way you can see it.

150
00:07:27.944 --> 00:07:30.200
So first thing is ng, okay?

151
00:07:30.200 --> 00:07:33.105
So you've been typing ng a bit, friends.

152
00:07:33.105 --> 00:07:37.108
ng is from Angular, like ang.

153
00:07:37.108 --> 00:07:39.931
Somebody in the community, many moons ago,

154
00:07:39.931 --> 00:07:42.838
started calling it ng as a prefix and
it stuck.

155
00:07:42.838 --> 00:07:44.787
And so now we're ng, right?

156
00:07:44.787 --> 00:07:46.497
Okay, so ng and then generate.

157
00:07:46.497 --> 00:07:50.080
So ng is for the Angular CLI,
then generate is a command,

158
00:07:50.080 --> 00:07:51.977
it's a self command.

159
00:07:51.977 --> 00:07:54.287
The Angular CLI can do a lot of stuff.

160
00:07:54.287 --> 00:07:57.866
Can somebody tell me one other
thing that Angular CLI can do?

161
00:07:57.866 --> 00:07:59.473
&gt;&gt; Generate services.

162
00:07:59.473 --> 00:08:02.595
&gt;&gt; Services, but what's one thing
you did today, it's been doing?

163
00:08:02.595 --> 00:08:03.568
&gt;&gt; It starts the server.

164
00:08:03.568 --> 00:08:05.215
&gt;&gt; It starts the server, right?

165
00:08:05.215 --> 00:08:09.338
So ng serve is one sub-command,
generate is another one.

166
00:08:09.338 --> 00:08:11.813
And then as you hinted toward, right,

167
00:08:11.813 --> 00:08:16.463
now we're saying generate components,
but it also generate services.

168
00:08:16.463 --> 00:08:20.145
It could also generate interfaces,
also generate files.

169
00:08:20.145 --> 00:08:22.089
Can it generate tests?

170
00:08:22.089 --> 00:08:23.391
I'm not sure if it can generate tests or
not.

171
00:08:23.391 --> 00:08:25.087
It might even be able to generate tests.

172
00:08:25.087 --> 00:08:28.953
The documentation has the full
scope of what the CLI can do.

173
00:08:28.953 --> 00:08:33.085
But this is one of the things that
makes Angular very interesting and

174
00:08:33.085 --> 00:08:37.871
compelling as a solution, is that this
tooling is fully featured, okay, and

175
00:08:37.871 --> 00:08:41.081
very ergonomic driven for
a developer experience.

176
00:08:41.081 --> 00:08:43.117
So we really wanna give
you a nice experience.

177
00:08:43.117 --> 00:08:45.276
So then what's the name of
the component we wanna generate?

178
00:08:45.276 --> 00:08:46.524
userinfo.

179
00:08:46.524 --> 00:08:49.347
Now, I have one other flag here.

180
00:08:49.347 --> 00:08:53.007
Again, this is going back to
our multi-project workspace.

181
00:08:53.007 --> 00:08:55.711
So I gotta say, where should this go?

182
00:08:55.711 --> 00:08:56.868
If I generate it, where am I gonna put it?

183
00:08:56.868 --> 00:09:00.677
Okay, I wanna put it in this project.

184
00:09:00.677 --> 00:09:04.153
Okay, so we have that command, so
let's just keep the party going.

185
00:09:04.153 --> 00:09:06.847
What happened to it?

186
00:09:06.847 --> 00:09:09.136
Okay, that's not me,
that's VS Code acting weird.

187
00:09:09.136 --> 00:09:11.530
Okay, cuz I'm like, y'all,
somebody put it in there.

188
00:09:11.530 --> 00:09:15.776
So ng generate, and
then we'll tell you what it generates.

189
00:09:15.776 --> 00:09:20.186
Now, I've configured our projects
today to be scaffolded in such

190
00:09:20.186 --> 00:09:23.270
a way it doesn't add a lot
of that extra stuff.

191
00:09:23.270 --> 00:09:27.064
Don't be alarmed that if you ever
do an Angular project on your own,

192
00:09:27.064 --> 00:09:30.393
not with our project setup,
you'll get tests by default,

193
00:09:30.393 --> 00:09:35.053
you'll get a separate CSS by default,
you'll get a separate HTML by default, and

194
00:09:35.053 --> 00:09:37.980
it also goes into its own file by default.

195
00:09:37.980 --> 00:09:41.800
So it does a lot for you, but for us,
we don't need all that extra stuff.

196
00:09:41.800 --> 00:09:44.594
Good, so we generated it.

197
00:09:44.594 --> 00:09:49.593
Anybody remember the first thing
we gotta do since we generated

198
00:09:49.593 --> 00:09:52.052
the component so we can use it?

199
00:09:52.052 --> 00:09:54.203
We gotta import it, that's right.

200
00:09:54.203 --> 00:09:59.187
We gotta import it cuz it's not a part of
our file, it's called UserInfoComponent.

201
00:09:59.187 --> 00:10:00.358
That's the wrong one.

202
00:10:00.358 --> 00:10:01.910
All right, hold on.

203
00:10:01.910 --> 00:10:04.770
Let me just make sure I get the right one
cuz now it's reading from everywhere.

204
00:10:04.770 --> 00:10:07.391
So there it is.

205
00:10:07.391 --> 00:10:11.002
You see, the name is UserinfoComponent.

206
00:10:11.002 --> 00:10:13.771
That's all right, sounds good.

207
00:10:13.771 --> 00:10:18.488
If I wanted that to be camel cased,
I would have did user-info, right?

208
00:10:18.488 --> 00:10:21.561
And then it'll do a nice camel case for
you.

209
00:10:21.561 --> 00:10:25.344
All right, so back, so
we wanna get this component named as such.

210
00:10:25.344 --> 00:10:26.829
And now, if we try to ask for it,

211
00:10:26.829 --> 00:10:29.159
it should be able to find
it from our local folder.

212
00:10:29.159 --> 00:10:31.375
Okay, good, from ./user-info.

213
00:10:31.375 --> 00:10:32.852
Okay, so that's the first step.

214
00:10:32.852 --> 00:10:36.273
Next step, let's go ahead and
add our imports.

215
00:10:36.273 --> 00:10:39.473
I'm starting to as myself as
a practice because sometimes

216
00:10:39.473 --> 00:10:42.751
my templates can start to grow
a little bit of my component.

217
00:10:42.751 --> 00:10:43.731
I'm starting to do this.

218
00:10:43.731 --> 00:10:48.376
I do imports before the template,
just so I can see it up front and

219
00:10:48.376 --> 00:10:52.862
I can just know, that's what I do,
just a Mark thing, okay?

220
00:10:52.862 --> 00:10:57.538
So imports, and then [UserinfoComponent],
make sure I put my comma in there.

221
00:10:57.538 --> 00:10:59.465
So now I'm ready to use it here.

222
00:10:59.465 --> 00:11:06.401
But it's gonna get nice, because the
Angular Language Service is gonna help me.

223
00:11:06.401 --> 00:11:07.406
If I type.

224
00:11:09.538 --> 00:11:12.126
App, which is the prefix for
our component,

225
00:11:12.126 --> 00:11:14.524
it'll show up there as one of my options.

226
00:11:14.524 --> 00:11:16.850
And, yes,
I do wanna reference this component.

227
00:11:16.850 --> 00:11:20.193
Okay, we support self-closing tags for
components as well, so

228
00:11:20.193 --> 00:11:22.090
this is something that you'll see.

229
00:11:22.090 --> 00:11:25.688
Sometimes you could write the full way,
where you have open and close tags.

230
00:11:25.688 --> 00:11:29.499
But if you don't have anything
to put in between, any children,

231
00:11:29.499 --> 00:11:30.967
you just do this, okay?

232
00:11:30.967 --> 00:11:35.645
So if we save it, userinfo works,
which is the default message that you get.

233
00:11:36.716 --> 00:11:38.736
Now, if we wanted to,
we can go in here and we can start.

234
00:11:38.736 --> 00:11:41.616
Now, we can flesh out our component and
add more data if we wanted to.

235
00:11:41.616 --> 00:11:42.906
So a question from our community.

236
00:11:44.496 --> 00:11:48.177
&gt;&gt; Where does the app-userinfo
name come from?

237
00:11:48.177 --> 00:11:49.436
&gt;&gt; Good question.

238
00:11:49.436 --> 00:11:51.346
Where does that name come from?

239
00:11:51.346 --> 00:11:53.035
So let's look at this.

240
00:11:53.035 --> 00:11:55.452
So I'm gonna dive into
the actual component.

241
00:11:57.578 --> 00:12:01.907
All right, and then in my component
metadata for the decorator, I have

242
00:12:01.907 --> 00:12:07.278
the selector, and whatever this is, is
what is going to be in your application.

243
00:12:07.278 --> 00:12:09.818
So you can change this, you can update
this to be whatever you want it to be.

244
00:12:11.058 --> 00:12:15.811
But watch out for name conflicts, because
I don't know what will happen if you

245
00:12:15.811 --> 00:12:20.219
have components from two different
name spaces with the same selector.

246
00:12:20.219 --> 00:12:22.893
I don't know what would happened,
so just watch out.

247
00:12:22.893 --> 00:12:25.260
But that's why these
prefixes are interesting.

248
00:12:25.260 --> 00:12:27.133
So this could be your company prefix.

249
00:12:27.133 --> 00:12:29.897
So let's say that I was still
at American Express, right?

250
00:12:29.897 --> 00:12:33.730
I might do something like amex- or
amx or something like that,

251
00:12:33.730 --> 00:12:38.627
you know what I mean, to know that it's
a component from my team or whatever.

252
00:12:38.627 --> 00:12:40.528
Or maybe I'm on a different team, right?

253
00:12:40.528 --> 00:12:43.362
At Google, we have lots and
lots of teams that use Angular.

254
00:12:43.362 --> 00:12:46.999
Thousands of applications at Google
use Angular, okay, thousands.

255
00:12:46.999 --> 00:12:50.116
So we had different developers
building component systems, so

256
00:12:50.116 --> 00:12:51.742
maybe a different team, right?

257
00:12:51.742 --> 00:12:55.941
Let's say I was on a team called, I don't
know, fun team, you might do fun and

258
00:12:55.941 --> 00:12:58.579
then you know that's where that came from.

259
00:12:58.579 --> 00:13:00.884
So you got a lot of options here for
this thing.

260
00:13:00.884 --> 00:13:01.845
Very good question.

261
00:13:01.845 --> 00:13:03.114
What other question can I answer?

262
00:13:05.849 --> 00:13:10.110
&gt;&gt; Curious about the CSS,
you're using the host pseudo selector.

263
00:13:10.110 --> 00:13:11.503
&gt;&gt; Good question.

264
00:13:11.503 --> 00:13:12.895
Go ahead, continue.

265
00:13:12.895 --> 00:13:14.742
&gt;&gt; I just haven't seen that
before in the browser.

266
00:13:14.742 --> 00:13:17.911
The support isn't it great, so
I'm curious why that was used.

267
00:13:17.911 --> 00:13:19.386
&gt;&gt; Let's talk about that.

268
00:13:19.386 --> 00:13:23.238
Host pseudo selector,
what is going on in my CSS?

269
00:13:23.238 --> 00:13:24.358
What does that mean?

270
00:13:24.358 --> 00:13:25.752
All right, good question.

271
00:13:25.752 --> 00:13:27.859
To answer that question,

272
00:13:27.859 --> 00:13:32.851
the best thing we can do is look
at what is actually generated.

273
00:13:32.851 --> 00:13:34.851
Okay, let's look at what's
actually generated.

274
00:13:34.851 --> 00:13:39.459
So if I go into the Chrome DevTools,
I go all the way down,

275
00:13:39.459 --> 00:13:44.163
you can kinda tell that,
okay, so here's my app-root.

276
00:13:44.163 --> 00:13:47.950
Let's see if I can find my application,
because, here it is.

277
00:13:47.950 --> 00:13:53.187
You see where it says nghost and
display: flex, from app component?

278
00:13:53.187 --> 00:13:58.141
So I'm saying whatever your container is
going to be, because the app-root is not

279
00:13:58.141 --> 00:14:02.981
an HTML tag, that's an Angular,
that's my app component container, right?

280
00:14:02.981 --> 00:14:03.892
Let's confirm.

281
00:14:03.892 --> 00:14:05.622
We don't have to guess, right?

282
00:14:05.622 --> 00:14:06.528
Where's my selector?

283
00:14:06.528 --> 00:14:08.561
You see, app-root.

284
00:14:08.561 --> 00:14:13.775
So an element is created for
this component with that tag.

285
00:14:13.775 --> 00:14:14.809
How does that feel so far?

286
00:14:14.809 --> 00:14:21.761
&gt;&gt; So it's not the data of CSS,
it's an Angular hook attaching to that.

287
00:14:21.761 --> 00:14:23.794
&gt;&gt; I see the question.

288
00:14:23.794 --> 00:14:25.359
I don't know the answer for
sure about that.

289
00:14:25.359 --> 00:14:29.656
I don't know how we're linking it,
whether it's the native functionality or

290
00:14:29.656 --> 00:14:31.545
Angular specific.

291
00:14:31.545 --> 00:14:34.314
Yeah, but with that app-root,
guess what I'm able to do?

292
00:14:34.314 --> 00:14:37.543
So I find the element and then I can
confirm that these are the styles.

293
00:14:37.543 --> 00:14:39.340
You the specificity, look at that.

294
00:14:39.340 --> 00:14:40.772
I haven't forgot about your question.

295
00:14:40.772 --> 00:14:41.495
It's still on my heart.

296
00:14:41.495 --> 00:14:42.137
You see that?

297
00:14:42.137 --> 00:14:48.246
All right, but now that's applying
the style to this custom element here.

298
00:14:48.246 --> 00:14:50.155
Yeah, good question, I love that.

299
00:14:50.155 --> 00:14:50.800
Excellent question.

300
00:14:53.263 --> 00:14:57.355
All right,
what other questions can I answer?

301
00:14:57.355 --> 00:15:00.041
Any questions in person and
our friends here?

302
00:15:00.041 --> 00:15:01.378
&gt;&gt; So go back to your,

303
00:15:07.645 --> 00:15:09.581
The app.component.ts-
&gt;&gt; Sure.

304
00:15:09.581 --> 00:15:13.665
&gt;&gt; So article class title, so

305
00:15:13.665 --> 00:15:18.456
I put in app userinfo like that,

306
00:15:18.456 --> 00:15:22.715
I don't have the space, but

307
00:15:22.715 --> 00:15:28.928
what I'm getting in my browser is -1 and

308
00:15:28.928 --> 00:15:33.534
then shana@melissa.tv.

309
00:15:33.534 --> 00:15:34.531
&gt;&gt; You know why?

310
00:15:34.531 --> 00:15:36.606
I could tell you why.

311
00:15:36.606 --> 00:15:40.493
If you look at the path from
which you imported your userinfo,

312
00:15:40.493 --> 00:15:42.899
you probably imported the wrong one.

313
00:15:42.899 --> 00:15:43.553
&gt;&gt; I see.

314
00:15:43.553 --> 00:15:45.041
&gt;&gt; Yeah, that's from lesson 11.

315
00:15:45.041 --> 00:15:46.783
&gt;&gt; Yeah., because it auto-filled this-
&gt;&gt; It did.

316
00:15:46.783 --> 00:15:50.600
&gt;&gt; Rather long with trip.., okay, okay.

317
00:15:50.600 --> 00:15:51.870
&gt;&gt; Yeah, so you want the one.

318
00:15:51.870 --> 00:15:54.983
So if this happens to you at home,
so great, great point,

319
00:15:54.983 --> 00:15:59.367
if you try to import UserinfoComponent and
then if something weird is happening,

320
00:15:59.367 --> 00:16:02.737
it's because it imported
the one from lesson 11.

321
00:16:02.737 --> 00:16:03.574
&gt;&gt; Yeah.

322
00:16:03.574 --> 00:16:05.838
&gt;&gt; And so that happened to me,
right, when I started this.

323
00:16:05.838 --> 00:16:07.362
I was like, wait, that feels weird.

324
00:16:07.362 --> 00:16:08.151
&gt;&gt; Okay.
&gt;&gt; Yeah, so

325
00:16:08.151 --> 00:16:09.880
now it should be the right component.

326
00:16:09.880 --> 00:16:15.654
So you wanna make sure it's the one
from ./userinfo/userinfo.component.

327
00:16:15.654 --> 00:16:16.864
&gt;&gt; Okay.
&gt;&gt; Yeah, good stuff and

328
00:16:16.864 --> 00:16:18.264
make sure that spelling is right.

329
00:16:18.264 --> 00:16:19.873
&gt;&gt; Yeah.
&gt;&gt; So lowercase i.

330
00:16:19.873 --> 00:16:21.668
All right, friends, let's get into it.

331
00:16:21.668 --> 00:16:27.690
So now we have our component setup and
we have a nice little dashboard.

332
00:16:27.690 --> 00:16:30.293
And you could go and
build your next SAS startup.

333
00:16:30.293 --> 00:16:32.679
Just make sure you include AI or
something, so

334
00:16:32.679 --> 00:16:35.443
it can get $1 million
evaluation right off the bet.

335
00:16:35.443 --> 00:16:37.688
All right, [LAUGH] that's a joke.

336
00:16:37.688 --> 00:16:40.824
Nobody do that, this is not ready for
that, it's a joke.

337
00:16:40.824 --> 00:16:42.444
All right, so
we've got our dashboard example.

338
00:16:43.884 --> 00:16:46.127
Before we move on,
were there any other questions?

339
00:16:46.127 --> 00:16:50.134
What other questions were there, friends,
that I can answer about this example?

340
00:16:50.134 --> 00:16:50.790
Sure.

341
00:16:50.790 --> 00:16:53.538
&gt;&gt; What is standalone: true?

342
00:16:53.538 --> 00:16:56.040
&gt;&gt; Mm-hm, so standalone: true.

343
00:16:56.040 --> 00:16:59.777
This is to let this be
a component that doesn't require

344
00:16:59.777 --> 00:17:01.897
our module system in Angular.

345
00:17:01.897 --> 00:17:06.496
Angular has an optional module system
that can organize your dependencies, and

346
00:17:06.496 --> 00:17:09.820
if you don't want to use that,
you do standalone: true.

347
00:17:11.954 --> 00:17:15.909
And then you manage your own dependencies
in the component with this import

348
00:17:15.909 --> 00:17:16.546
function.

349
00:17:16.546 --> 00:17:20.021
That's what the import function does then,
yes.

350
00:17:20.021 --> 00:17:24.970
&gt;&gt; Do component selectors need to
be lowercase or kebab case, or

351
00:17:24.970 --> 00:17:27.169
is that just a convention?

352
00:17:27.169 --> 00:17:28.236
&gt;&gt; I have never tried.

353
00:17:28.236 --> 00:17:30.263
Let's try it.
Let's find out together.

354
00:17:30.263 --> 00:17:33.663
Let's see if we change this
to be capital I, well,

355
00:17:33.663 --> 00:17:38.817
let's see if it selects it with capital
I without us changing anything else.

356
00:17:38.817 --> 00:17:40.226
That's the first test.

357
00:17:40.226 --> 00:17:42.650
It does not select it anymore.

358
00:17:42.650 --> 00:17:45.269
You see, so
it does not show up in our component.

359
00:17:45.269 --> 00:17:48.142
So now that means our end,
we had an error, right?

360
00:17:48.142 --> 00:17:50.631
Ooh, that's too far, slow down.

361
00:17:50.631 --> 00:17:52.273
And then we also got an error, right?

362
00:17:52.273 --> 00:17:56.105
So the casing, that's what you're asking.

363
00:17:56.105 --> 00:17:57.689
The casing actually matters here.

364
00:17:57.689 --> 00:18:02.967
Excellent question, and I love that we get
to experiment together to find out, okay?

365
00:18:02.967 --> 00:18:05.801
Now, do you need the hyphen there?

366
00:18:05.801 --> 00:18:08.704
I think it's what the kebab part means,
yeah.

367
00:18:08.704 --> 00:18:13.658
I was like, Bob, who's Bob?

368
00:18:13.658 --> 00:18:16.137
Okay, so that still breaks down,
but then we put it back together.

369
00:18:16.137 --> 00:18:17.904
And so you don't need any of that stuff.

370
00:18:17.904 --> 00:18:21.718
You get to customize your casing.

