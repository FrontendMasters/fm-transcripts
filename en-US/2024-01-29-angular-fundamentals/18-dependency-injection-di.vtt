WEBVTT

1
00:00:00.001 --> 00:00:04.431
One of the things that's really special
about Angular is dependency injection.

2
00:00:04.431 --> 00:00:05.942
Now, here's dependency injection.

3
00:00:05.942 --> 00:00:09.025
DI is really a design pattern, all right?

4
00:00:09.025 --> 00:00:11.045
We didn't create dependency injection.

5
00:00:11.045 --> 00:00:15.613
This is not an Angular thing, this is
a design pattern in computer science, and

6
00:00:15.613 --> 00:00:19.105
we've just implemented it on
the front end using our tools.

7
00:00:19.105 --> 00:00:23.419
So it's a mechanism for
creating and delivering.

8
00:00:23.419 --> 00:00:28.408
Creating, so getting instances of things,
and then delivering them,

9
00:00:28.408 --> 00:00:31.857
right, parts of the application
to other parts.

10
00:00:31.857 --> 00:00:35.221
So earlier there were questions about,
well, how do you get data around your

11
00:00:35.221 --> 00:00:37.985
application if you can't send
it through the inputs, right?

12
00:00:37.985 --> 00:00:41.243
If you don't want me to prop drill,
what else can I do?

13
00:00:41.243 --> 00:00:43.026
This is a part of that story.

14
00:00:43.026 --> 00:00:46.651
But I like to take this up to say,
creating and delivering.

15
00:00:46.651 --> 00:00:50.305
Create instances,
make them available, create, deliver.

16
00:00:50.305 --> 00:00:53.464
Or you could also say create and
share, right?

17
00:00:53.464 --> 00:00:55.748
I'm sharing this information
some other place.

18
00:00:55.748 --> 00:00:59.319
Those are my two ways to kind of
think about dependency injection.

19
00:00:59.319 --> 00:01:06.462
All right, to make something injectable
we have to use our decorators once again.

20
00:01:06.462 --> 00:01:08.834
Angular relies on decorators, right?

21
00:01:08.834 --> 00:01:11.063
Because remember, without our decorator,

22
00:01:11.063 --> 00:01:13.415
this thing is just
a regular TypeScript class.

23
00:01:13.415 --> 00:01:15.016
Okay, so here's what we got, friends.

24
00:01:15.016 --> 00:01:16.006
Friends at home, check this out.

25
00:01:16.006 --> 00:01:18.300
You got Injectable as your decorator and

26
00:01:18.300 --> 00:01:21.547
then you have this thing
called providedIn: 'root'.

27
00:01:21.547 --> 00:01:23.448
What does that even mean?

28
00:01:23.448 --> 00:01:25.515
Okay, here's what
providedIn: 'root' means.

29
00:01:25.515 --> 00:01:29.898
providedIn: 'root' means that it's
available at the top of your application

30
00:01:29.898 --> 00:01:32.606
because with Angular's
dependency injection,

31
00:01:32.606 --> 00:01:35.062
you can actually provide different places.

32
00:01:35.062 --> 00:01:39.600
So meaning at the highest level is not
the only place to provide something.

33
00:01:39.600 --> 00:01:44.065
A component could provide
resources to its children and

34
00:01:44.065 --> 00:01:48.918
services to its children, and
the scope could be only that.

35
00:01:48.918 --> 00:01:52.103
So we're saying this thing
is providedIn: 'root', okay,

36
00:01:52.103 --> 00:01:53.735
at the root of the application.

37
00:01:53.735 --> 00:01:56.751
But you could also provide
across application boundaries,

38
00:01:56.751 --> 00:02:00.414
meaning if you have multiple elements
on the screen, when I say element,

39
00:02:00.414 --> 00:02:04.610
I mean an Angular element, which is kinda
like a web component, you might say well,

40
00:02:04.610 --> 00:02:07.121
this one can provide to
the other web components.

41
00:02:07.121 --> 00:02:12.491
So you could do a lot, this thing is
powerful, you have a lot of flexibility.

42
00:02:12.491 --> 00:02:17.304
Okay, so root means available to
the entire application, all right?

43
00:02:17.304 --> 00:02:20.499
And then you can export class and
it's a service, and

44
00:02:20.499 --> 00:02:22.773
in that service is business as usual.

45
00:02:22.773 --> 00:02:26.959
When I say business as usual,
I mean making your API calls,

46
00:02:26.959 --> 00:02:30.666
fetching data,
everything you normally would do.

47
00:02:30.666 --> 00:02:33.610
Business as usual, okay?

48
00:02:33.610 --> 00:02:36.165
Here's how you make it available, though.

49
00:02:36.165 --> 00:02:38.485
So we just defined our car service, but

50
00:02:38.485 --> 00:02:42.012
how do I make it available in
my application to other parts?

51
00:02:42.012 --> 00:02:45.226
Well, we have the inject function.

52
00:02:45.226 --> 00:02:49.122
Okay, inject means just inject it, bring
it in, it creates an injection context.

53
00:02:49.122 --> 00:02:53.010
And then that's a place where you
can then ask Angular's dependency

54
00:02:53.010 --> 00:02:55.162
injection system for things, okay?

55
00:02:55.162 --> 00:02:57.227
And inject allows us to do that.

56
00:02:57.227 --> 00:03:02.737
But let's say that if you want to use it,
you can also combine

57
00:03:02.737 --> 00:03:07.617
things like inject and
then do your constructor too.

58
00:03:07.617 --> 00:03:09.592
And you can inject in the constructor.

59
00:03:09.592 --> 00:03:11.419
So there are two ways to do this.

60
00:03:11.419 --> 00:03:12.839
Use the inject function.

61
00:03:12.839 --> 00:03:17.115
You can also use some other syntax for
constructor injection.

62
00:03:17.115 --> 00:03:21.910
But let's jump into an example, because
too much theory about dependency injection

63
00:03:21.910 --> 00:03:24.785
is just not as helpful as
actually doing it, okay?

64
00:03:24.785 --> 00:03:28.068
So let's jump right into an example here.

65
00:03:28.068 --> 00:03:30.311
So we got 11-dependency-injection,
here we go.

66
00:03:32.457 --> 00:03:34.074
Close up.

67
00:03:34.074 --> 00:03:36.417
It's closing time.

68
00:03:45.348 --> 00:03:47.187
That's not Semisonic, is it?

69
00:03:47.187 --> 00:03:48.148
&gt;&gt; It is.

70
00:03:48.148 --> 00:03:49.415
&gt;&gt; Yeah, Semisonic.

71
00:03:49.415 --> 00:03:52.968
Yeah, I remember when that song came
out is right around time that one and

72
00:03:52.968 --> 00:03:55.076
The Freshmen, by The Verve Pipe came out.

73
00:03:55.076 --> 00:03:59.474
And I remember both those songs, I was
in high school when that stuff happened.

74
00:03:59.474 --> 00:04:04.014
And I just remember singing both of
those songs and it being super weird for

75
00:04:04.014 --> 00:04:05.783
people, cuz I can't sing.

76
00:04:05.783 --> 00:04:11.903
Okay, but what I can do is ng serve,
so let's ng serve this one.

77
00:04:11.903 --> 00:04:13.126
Is it spelled properly?

78
00:04:13.126 --> 00:04:16.131
Still spelled properly,
still a professional.

79
00:04:16.131 --> 00:04:19.576
We go to our user listing, here's where
things are gonna get really fun here.

80
00:04:19.576 --> 00:04:21.281
Again, check this out.

81
00:04:25.523 --> 00:04:27.738
First, we're gonna make
that class injectable.

82
00:04:27.738 --> 00:04:31.790
How do we do that,
how do we make it injectable?

83
00:04:31.790 --> 00:04:36.157
We gotta use the @Injectable decorator and
do providedIn: 'root', so

84
00:04:36.157 --> 00:04:37.695
let's make that happen.

85
00:04:37.695 --> 00:04:41.471
All right, I'm not gonna go that way,
I'll go this way,

86
00:04:41.471 --> 00:04:46.695
cuz it'll open up the wrong one, app and
then app.component, user.service.

87
00:04:46.695 --> 00:04:49.729
Pardon me, pardon my interruption here.

88
00:04:49.729 --> 00:04:54.401
Okay, make it @Injectable, import inject.

89
00:04:59.614 --> 00:05:04.308
Okay, and then the property we want,
providedIn.

90
00:05:04.308 --> 00:05:05.446
Where do we want to provide it?

91
00:05:08.117 --> 00:05:09.350
Root, yeah, that's right.

92
00:05:09.350 --> 00:05:12.104
Whoever said that, that was so
right, providedIn: 'root',

93
00:05:12.104 --> 00:05:14.474
which means it's available
to our whole application.

94
00:05:19.396 --> 00:05:24.922
Now that it's available to our entire
application here's what we can do now.

95
00:05:24.922 --> 00:05:29.295
We can inject the service, so
we use the inject function,

96
00:05:29.295 --> 00:05:33.500
we can inject the service,
and then we can get the data.

97
00:05:33.500 --> 00:05:35.007
So let's do all of that.

98
00:05:35.007 --> 00:05:37.385
Let's do all that together.

99
00:05:37.385 --> 00:05:39.663
So we're in app.component.

100
00:05:41.158 --> 00:05:47.192
Okay, let's see, app.component, yes.

101
00:05:47.192 --> 00:05:48.723
First, we need to get inject.

102
00:05:48.723 --> 00:05:50.397
So we'll get that from @angular/core.

103
00:05:56.061 --> 00:05:57.859
Okay, excellent.

104
00:05:57.859 --> 00:06:00.946
Then down here,
we can call it userService.

105
00:06:00.946 --> 00:06:06.661
And so in our component body,
we call it userService.

106
00:06:06.661 --> 00:06:09.697
Not @Injectable there,
just the word inject, okay?

107
00:06:09.697 --> 00:06:10.886
And what do we want to inject?

108
00:06:10.886 --> 00:06:12.931
The user service.

109
00:06:12.931 --> 00:06:14.046
Let's go.

110
00:06:17.103 --> 00:06:18.524
So now we have an instance.

111
00:06:18.524 --> 00:06:23.321
Remember I said,
creating and sharing, right?

112
00:06:23.321 --> 00:06:28.935
So, we're asking Angular for
an instance of our service.

113
00:06:28.935 --> 00:06:32.323
Here's a question that I'm
sure some of you are thinking.

114
00:06:32.323 --> 00:06:36.380
When it creates that instance,
is it like a singleton instance or

115
00:06:36.380 --> 00:06:38.162
is it a copy of the instance?

116
00:06:38.162 --> 00:06:40.705
In this case,
it's actually a singleton, right?

117
00:06:40.705 --> 00:06:44.719
Meaning there's one instantiation of it
and we shared that in the application,

118
00:06:44.719 --> 00:06:45.669
which is helpful.

119
00:06:45.669 --> 00:06:48.225
But if you want to make
copies of a service,

120
00:06:48.225 --> 00:06:51.917
you can provide them at the component
level to the children and

121
00:06:51.917 --> 00:06:56.108
then it can also make a copy instead
of doing the same shared instance.

122
00:06:56.108 --> 00:06:58.797
Okay, so you have that flexibility,
friends.

123
00:06:58.797 --> 00:07:03.864
Awesome, so now that we have that,
we're really almost there, we did this.

124
00:07:03.864 --> 00:07:05.459
Shit, import userData.

125
00:07:08.249 --> 00:07:13.147
Sure, okay, so
we got to add our userData property.

126
00:07:13.147 --> 00:07:16.587
Okay, let me if I need to slow down,
I'm gonna go userData.

127
00:07:16.587 --> 00:07:21.147
This is gonna be an array of type User.

128
00:07:21.147 --> 00:07:26.000
But make sure you pull the right one
from the same project can be an array

129
00:07:26.000 --> 00:07:26.995
of type User.

130
00:07:26.995 --> 00:07:29.604
And it's gonna equal empty array for now.

131
00:07:37.613 --> 00:07:40.268
Okay, you got an empty array.

132
00:07:40.268 --> 00:07:46.205
And now in our constructor,
Let's have some fun here.

133
00:07:46.205 --> 00:07:52.902
Let's do this, we'll say this.userService,
and then we say getUserData.

134
00:07:52.902 --> 00:07:53.519
But guess what?

135
00:07:53.519 --> 00:08:00.690
UserData returns a promise,
actually, returns a promise.

136
00:08:00.690 --> 00:08:06.383
So we use promises.then, okay, and
then we can start to just get busy.

137
00:08:06.383 --> 00:08:09.063
Okay, so when I gave you this code,
I'm typing it out so

138
00:08:09.063 --> 00:08:11.073
that way we can have it together, right?

139
00:08:11.073 --> 00:08:14.694
But we can just say data, so
I already gave this code so

140
00:08:14.694 --> 00:08:16.880
you can copy it from the readme.

141
00:08:16.880 --> 00:08:19.990
Okay, so at home friends, I'm typing this
but you can copy the readme version,

142
00:08:19.990 --> 00:08:20.650
it still works.

143
00:08:20.650 --> 00:08:24.862
So we got this,userData = data.

144
00:08:27.516 --> 00:08:30.008
Okay, so now we got that going.

145
00:08:30.008 --> 00:08:34.368
So,this is a promise because I wanted
to simulate what would it be like to do

146
00:08:34.368 --> 00:08:38.939
an HTTP request cuz those usually return
promises except for if you use fetch,

147
00:08:38.939 --> 00:08:42.561
you got to do the promise and
then you got to do resolve.json.

148
00:08:42.561 --> 00:08:48.964
So I didn't wanna do that extra step,
Cuz I don't like it.

149
00:08:54.716 --> 00:08:56.290
All right, let's keep moving.

150
00:08:56.290 --> 00:08:59.709
So now, since we locked that in

151
00:09:03.077 --> 00:09:08.423
Let's just iterate over,
take a user of userData, all right,

152
00:09:08.423 --> 00:09:14.729
track, I think user has a user.id,
I think this one does, let's see.

153
00:09:14.729 --> 00:09:17.729
What did I say, @for,
sorry, there you go, yeah,

154
00:09:17.729 --> 00:09:20.558
I'm pretty sure there's
a user.id on this one.

155
00:09:20.558 --> 00:09:24.989
Okay, is there a component for this?

156
00:09:24.989 --> 00:09:27.084
A user-info component, there sure is.

157
00:09:27.084 --> 00:09:30.379
So then we're just gonna say, that's rad.

158
00:09:30.379 --> 00:09:33.986
All right, and
then we'll do a user-info component, so

159
00:09:33.986 --> 00:09:36.500
let's import a user-info component.

160
00:09:41.446 --> 00:09:47.102
Yeah, from the same local directory,
so ./user dash-info.component.

161
00:09:47.102 --> 00:09:50.112
This is the one earlier today
when we were doing a user,

162
00:09:50.112 --> 00:09:54.511
this is a component that kept showing up
and it was like what is this random data?

163
00:09:54.511 --> 00:09:57.403
This is where it came from, all right?

164
00:09:57.403 --> 00:10:01.568
And before we continue to
reference it in our template,

165
00:10:01.568 --> 00:10:05.744
we do our imports, okay,
and get UserInfoComponent.

166
00:10:05.744 --> 00:10:07.537
Look at that, looking good.

167
00:10:07.537 --> 00:10:11.776
So app-user-info, what do you want?

168
00:10:11.776 --> 00:10:14.386
There has to be some
type of property on here.

169
00:10:14.386 --> 00:10:16.332
Can you tell me?

170
00:10:16.332 --> 00:10:17.709
You're not gonna tell me?

171
00:10:17.709 --> 00:10:20.528
Okay, let's see, let's go in there.

172
00:10:20.528 --> 00:10:21.574
Is there an input?

173
00:10:23.738 --> 00:10:25.727
&gt;&gt; Directions say it's called user.

174
00:10:25.727 --> 00:10:33.252
&gt;&gt; Well, that's the data,
we gotta set up our input then, Right?

175
00:10:33.252 --> 00:10:38.209
So if we're gonna use it we got to
set up the input, so let's do it.

176
00:10:38.209 --> 00:10:41.303
So we'll bring in our input and

177
00:10:41.303 --> 00:10:46.423
the only thing that's gonna
change is we do input.

178
00:10:46.423 --> 00:10:47.803
And now we have default data.

179
00:10:50.358 --> 00:10:53.292
No, go ahead, ask your question,
cuz somebody else probably has it.

180
00:10:53.292 --> 00:11:00.696
Okay, so now we have a user there, but
so we have some default data, right?

181
00:11:00.696 --> 00:11:02.632
That way it just doesn't matter.

182
00:11:02.632 --> 00:11:05.100
This is just default data,
which is why it's a -1.

183
00:11:05.100 --> 00:11:08.765
So we have our input and
we provided some default data there.

184
00:11:08.765 --> 00:11:14.441
Okay, excellent, so now we set up our
user, we're gonna buy into it and

185
00:11:14.441 --> 00:11:20.917
then we'll take each user,
From right here and then get each user.

186
00:11:20.917 --> 00:11:24.486
Okay, let me just slow down for a second
and let's all get on the same page.

187
00:11:24.486 --> 00:11:26.435
So let's go back to UserInfoComponent.

188
00:11:26.435 --> 00:11:31.495
Only thing I did here was I tagged
the property with the input,

189
00:11:31.495 --> 00:11:34.915
I decorated it with the input decorator.

190
00:11:34.915 --> 00:11:36.999
Didn't change any other data in there,

191
00:11:36.999 --> 00:11:39.398
I just decorated it with
the input decorator.

192
00:11:39.398 --> 00:11:42.245
All right, rad.

193
00:11:42.245 --> 00:11:43.592
Okay, I'm going to go back.

194
00:11:43.592 --> 00:11:47.940
And then in here,
I referenced the selector and

195
00:11:47.940 --> 00:11:50.886
then I had my property binding.

196
00:11:50.886 --> 00:11:56.387
And then I sent in my property of user,
but user came from our user data list.

197
00:11:56.387 --> 00:11:57.898
Okay, what questions can I answer,
friends?

198
00:12:00.652 --> 00:12:01.783
Yes, please.

199
00:12:01.783 --> 00:12:05.479
&gt;&gt; Can we use async await for getUserData?

200
00:12:05.479 --> 00:12:10.614
&gt;&gt; No, okay, so the question is can
use async await for getUserData?

201
00:12:10.614 --> 00:12:16.912
You can't make a constructor async,
you see?

202
00:12:16.912 --> 00:12:19.857
That's the problem,
the constructor cannot be async,

203
00:12:19.857 --> 00:12:23.539
which makes sense because if you
think about what asynchronous means,

204
00:12:23.539 --> 00:12:26.874
it means that something will happen
at some point in the future.

205
00:12:26.874 --> 00:12:29.517
You don't know when it's
gonna be done finishing.

206
00:12:29.517 --> 00:12:32.817
When you instantiate an object,
that construct is gonna be called.

207
00:12:32.817 --> 00:12:35.932
And whenever you do an object,
this is just programming in general,

208
00:12:35.932 --> 00:12:39.102
you don't want your constructor to
be too heavy, because you could be

209
00:12:39.102 --> 00:12:42.187
creating millions of these and
you don't want it to be really slow.

210
00:12:42.187 --> 00:12:45.661
So if you wanted to deal with async await,
there's another way.

211
00:12:45.661 --> 00:12:46.594
Would you all like to see that?

212
00:12:46.594 --> 00:12:47.208
Give me a thumbs up.

213
00:12:47.208 --> 00:12:48.674
See async await version of this?

214
00:12:48.674 --> 00:12:53.037
Yeah, okay, here's another way to do it,
we can implement,

215
00:12:57.401 --> 00:13:02.081
I think it's called OnInit,
which is a lifecycle method for

216
00:13:02.081 --> 00:13:06.321
Angular, so
let's see if we can get that from onInit.

217
00:13:06.321 --> 00:13:09.699
Yeah, so this is one of our lifecycle
methods that you can tap into.

218
00:13:09.699 --> 00:13:13.105
So what we can do instead, so
let me first take that off, okay?

219
00:13:13.105 --> 00:13:15.575
Implements, okay, so that works.

220
00:13:15.575 --> 00:13:20.823
So now it's complaining that we have not
implemented it, so let's make ngOnInit.

221
00:13:20.823 --> 00:13:24.665
So we do ngOnInit, I can make this async.

222
00:13:28.378 --> 00:13:30.339
You see, this can become async.

223
00:13:30.339 --> 00:13:33.875
All right, what are you complaining about?

224
00:13:33.875 --> 00:13:35.802
No, I don't mean that.

225
00:13:35.802 --> 00:13:38.097
Let me finish the work and
then we'll fix that error,

226
00:13:38.097 --> 00:13:40.454
cuz I don't really mean what
they're asking me to do.

227
00:13:40.454 --> 00:13:45.483
So we could take this function and
then we can say

228
00:13:45.483 --> 00:13:50.638
const data = await instead of the then,
right,

229
00:13:50.638 --> 00:13:56.064
so we got that and
we can take this right out, okay?

230
00:14:01.416 --> 00:14:04.748
So I don't really want to
return a promise void, but

231
00:14:04.748 --> 00:14:09.083
I think you just want me to,
which is fine, I just won't fight you.

232
00:14:09.083 --> 00:14:11.454
Okay, fine, yeah, all right, sounds good.

233
00:14:11.454 --> 00:14:14.207
You don't need to do both.

234
00:14:14.207 --> 00:14:16.834
Okay, so this is the alternative way.

235
00:14:16.834 --> 00:14:18.545
So what is ngOnInit?

236
00:14:18.545 --> 00:14:22.832
ngOnInit is a lifecycle hook and
it has an order from

237
00:14:22.832 --> 00:14:28.128
the creation of a component when
this lifecycle hook will run.

238
00:14:28.128 --> 00:14:31.330
Not the same hooks that you
think about with React, right?

239
00:14:31.330 --> 00:14:34.534
React has state hooks and
things like that, these are not the same.

240
00:14:34.534 --> 00:14:39.078
These are places in the lifecycle of
the component from when it's first

241
00:14:39.078 --> 00:14:42.190
created until it dies or
until it's destroyed.

242
00:14:42.190 --> 00:14:44.701
It has a list of things you can tap into.

243
00:14:44.701 --> 00:14:50.961
One of the first ones that happens
after the constructor is ngOnInit.

244
00:14:50.961 --> 00:14:53.612
So the component is being initialized.

245
00:14:53.612 --> 00:14:55.421
So you can make API calls there.

246
00:14:55.421 --> 00:15:00.290
That's actually the safest place to make
API calls that are not really fast, right?

247
00:15:00.290 --> 00:15:04.758
Fast, meaning if I had to make 50
of these components, we don't want

248
00:15:04.758 --> 00:15:09.528
the component to be hung up on
instantiation with the constructor, right?

249
00:15:09.528 --> 00:15:13.249
This works asynchronously cuz
the constructor is synchronous.

250
00:15:13.249 --> 00:15:16.836
So you can't block waiting, but
you can asynchronously wait.

251
00:15:16.836 --> 00:15:19.516
So ngOnInit is where you
can put your data, okay?

252
00:15:19.516 --> 00:15:20.369
Good question.

253
00:15:20.369 --> 00:15:24.650
I like this update,
we can keep it that way, totally works.

254
00:15:24.650 --> 00:15:26.322
So I think we're done with this example.

255
00:15:26.322 --> 00:15:31.766
Let's look at the screen,
[SOUND] it's there.

256
00:15:31.766 --> 00:15:33.952
I mean, this one is not beautiful.

257
00:15:33.952 --> 00:15:37.360
Not beautiful, but, okay, yeah?

258
00:15:37.360 --> 00:15:44.023
&gt;&gt; Where does root come from in
providedIn, is it from app-root?

259
00:15:44.023 --> 00:15:48.263
What would we put if we did
not want the whole app?

260
00:15:48.263 --> 00:15:49.264
&gt;&gt; Okay, good question,

261
00:15:49.264 --> 00:15:52.229
where does root come into play,
that word in providedIn: 'root'?

262
00:15:52.229 --> 00:15:53.327
It's a really great question.

263
00:15:53.327 --> 00:15:59.641
Let's go back to our service.

264
00:15:59.641 --> 00:16:01.494
This right here,
where does that come from?

265
00:16:01.494 --> 00:16:02.817
What would you do?

266
00:16:02.817 --> 00:16:04.978
What would you do if you didn't want root?

267
00:16:04.978 --> 00:16:07.533
Okay, so what would you do here if
you didn't want root to be a part

268
00:16:07.533 --> 00:16:08.095
of the story?

269
00:16:08.095 --> 00:16:13.011
You would provide this service
at your component level, right?

270
00:16:13.011 --> 00:16:17.255
At the component level that you
wanted it to be available from,

271
00:16:17.255 --> 00:16:19.187
you could provide it there.

272
00:16:19.187 --> 00:16:23.550
Because the options at this level where
you say providedIn is only platform

273
00:16:23.550 --> 00:16:24.251
and root.

274
00:16:24.251 --> 00:16:27.952
So meaning make it for
the whole application or also make it for

275
00:16:27.952 --> 00:16:32.307
the cross application boundaries if
you have multiple on the same page.

276
00:16:32.307 --> 00:16:37.532
But if you wanna control it where it
doesn't show up to every component,

277
00:16:37.532 --> 00:16:43.716
then you provide it at the component level
cuz components have more properties here.

278
00:16:43.716 --> 00:16:46.543
So you can do, let me show you some stuff.

279
00:16:46.543 --> 00:16:49.907
You see, you have a lot of stuff,
animations,

280
00:16:49.907 --> 00:16:54.804
imports, inputs, outputs,
preserveWhitespaces, providers.

281
00:16:54.804 --> 00:16:57.363
Okay, so you can get involved,
query schemas, styles.

282
00:16:57.363 --> 00:16:59.699
I mean, we have a lot of things.

283
00:16:59.699 --> 00:17:02.004
Okay, those are not properties, but

284
00:17:02.004 --> 00:17:06.051
you see kinda where we are that you
can get even more involved here.

