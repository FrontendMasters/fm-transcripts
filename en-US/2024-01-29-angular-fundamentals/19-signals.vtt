WEBVTT

1
00:00:00.240 --> 00:00:01.707
You've learned a lot so far.

2
00:00:01.707 --> 00:00:05.933
Before we get to the apt optimizations,
cuz these are just fun things we can do,

3
00:00:05.933 --> 00:00:08.851
let's just talk about what we've done so
far, okay?

4
00:00:08.851 --> 00:00:14.631
You've learned almost a full,
I guess space of the component

5
00:00:14.631 --> 00:00:18.626
API that you need to do everything that
you could probably think of so far.

6
00:00:18.626 --> 00:00:22.767
Meaning you can accept inputs from users.

7
00:00:22.767 --> 00:00:26.566
You can communicate across
component boundaries.

8
00:00:26.566 --> 00:00:28.979
You can do custom events.

9
00:00:28.979 --> 00:00:30.927
You can bring in data services now.

10
00:00:30.927 --> 00:00:35.322
You just saw how to bring in data, cuz
right now that promise was the same syntax

11
00:00:35.322 --> 00:00:39.518
that you would get if you're using
something like Axios or whatever.

12
00:00:39.518 --> 00:00:41.799
I mean, I was just using,
just a promise of like,

13
00:00:41.799 --> 00:00:45.168
hey, here's some asynchronous data
that you get from the Internet, right?

14
00:00:45.168 --> 00:00:48.418
You get from a service, you got to
do services, dependency injection.

15
00:00:48.418 --> 00:00:50.668
I mean, you could do pretty
much anything you want.

16
00:00:50.668 --> 00:00:54.148
What about if you wanna improve your
applications in some other ways?

17
00:00:54.148 --> 00:00:56.142
What are some other
things that you can do?

18
00:00:56.142 --> 00:01:00.169
So for this next section,
it's not about completing the exercises so

19
00:01:00.169 --> 00:01:03.586
much as being familiar with other ideas,
okay?

20
00:01:03.586 --> 00:01:06.086
That's all we're gonna be doing.

21
00:01:06.086 --> 00:01:10.191
You can code some things, especially if
you wanna take some time to really dig

22
00:01:10.191 --> 00:01:14.187
into them, but that's not our focus
cuz we're just about at the end here.

23
00:01:14.187 --> 00:01:15.486
Okay, check this out.

24
00:01:15.486 --> 00:01:16.816
Angular signals.

25
00:01:16.816 --> 00:01:19.143
Can I get a thumbs up in a chat
if you ever heard of signals.

26
00:01:19.143 --> 00:01:20.623
Let me see thumbs up in the chat.

27
00:01:20.623 --> 00:01:21.233
Thumbs up in the room.

28
00:01:21.233 --> 00:01:22.393
What about you?
You ever heard of signals?

29
00:01:22.393 --> 00:01:25.693
You're probably thinking like, yeah,
why doesn't everybody use signals?

30
00:01:25.693 --> 00:01:27.553
Well, we probably should
cuz they're pretty good.

31
00:01:27.553 --> 00:01:29.823
So let me tell you what a signal is,
if you've never heard of a signal.

32
00:01:31.143 --> 00:01:32.903
Let me tell you just the backstory.

33
00:01:32.903 --> 00:01:38.003
So Angular has this idea
called change detection.

34
00:01:38.003 --> 00:01:41.576
So if you noticed in all
of our applications,

35
00:01:41.576 --> 00:01:44.122
we never did a single set state.

36
00:01:46.647 --> 00:01:50.015
You never did a single set anything
to make the screen update.

37
00:01:50.015 --> 00:01:51.440
When did it update?

38
00:01:51.440 --> 00:01:53.095
It was almost like magic, right?

39
00:01:53.095 --> 00:01:54.818
It just knew to update.

40
00:01:56.518 --> 00:02:00.289
That was one of our greatest strengths
of Angular for a very long time.

41
00:02:00.289 --> 00:02:01.836
It just knew how to update and

42
00:02:01.836 --> 00:02:05.747
the way it knew how to update was
through something called Zones.

43
00:02:05.747 --> 00:02:10.716
Zones we kinda wrap your application and
the special thing called a Zone, and

44
00:02:10.716 --> 00:02:15.533
then that Zone would look for reads and writes
and modifications to the model and

45
00:02:15.533 --> 00:02:17.327
asynchronous events.

46
00:02:17.327 --> 00:02:18.737
It's like, something happened.

47
00:02:18.737 --> 00:02:22.860
All right, let me check to see which
component in my component tree needs to be

48
00:02:22.860 --> 00:02:24.265
refreshed on the screen.

49
00:02:26.245 --> 00:02:28.735
That sounds really good, right?

50
00:02:28.735 --> 00:02:30.875
And it is really good until it isn't.

51
00:02:30.875 --> 00:02:35.165
And this is one of those times where I
told you in the beginning, the Angular team,

52
00:02:35.165 --> 00:02:37.815
we've learned over time a lot of lessons.

53
00:02:37.815 --> 00:02:41.980
At scale with hundreds of components,
hundreds of events,

54
00:02:41.980 --> 00:02:45.909
lots of data changing,
it became problematic, right?

55
00:02:45.909 --> 00:02:49.326
People had problems at scale where they
had to come up with all these workarounds

56
00:02:49.326 --> 00:02:50.609
to try to make things faster.

57
00:02:52.119 --> 00:02:54.666
What we decided to do was
get back in the lab and

58
00:02:54.666 --> 00:02:58.319
start thinking about how we
can improve this experience.

59
00:02:58.319 --> 00:03:02.142
And we looked at all the solutions
that were available we prototyped and

60
00:03:02.142 --> 00:03:05.530
then we said, hey, this signals thing,
this is pretty good.

61
00:03:07.440 --> 00:03:08.630
Maybe we should try it.

62
00:03:08.630 --> 00:03:10.440
And that's where we are now, right?

63
00:03:10.440 --> 00:03:16.060
We've made our first steps toward
completely signal-based reactivity.

64
00:03:16.060 --> 00:03:19.729
Meaning instead of using Zones
to do everything, we do signals.

65
00:03:19.729 --> 00:03:21.790
Signals are great because guess what?

66
00:03:21.790 --> 00:03:25.740
If you use another framework that uses
signals, the same logic applies, right?

67
00:03:25.740 --> 00:03:28.111
So reuse the skills becomes very high.

68
00:03:28.111 --> 00:03:31.501
Okay, so we got three reactive primitives.

69
00:03:31.501 --> 00:03:36.075
You got your signal, you got your
computed, and then you have your effects.

70
00:03:36.075 --> 00:03:38.261
Okay, signal computed effect.

71
00:03:38.261 --> 00:03:41.744
Reactive primitive only means that these
are just like three functions that you're

72
00:03:41.744 --> 00:03:45.179
gonna get in Angular, but it sounds really
fancy when you say reactive primitive,

73
00:03:45.179 --> 00:03:46.785
like it sounds super good.

74
00:03:46.785 --> 00:03:49.473
So when you are at your next meetup,
be like, so

75
00:03:49.473 --> 00:03:52.785
which reactive primitives
does your framework use?

76
00:03:52.785 --> 00:03:56.725
People are gonna be like, man, this person
is a straight up genius, cuz you are.

77
00:03:56.725 --> 00:04:00.010
All right, a signal's magic is this.

78
00:04:00.010 --> 00:04:02.330
I use the word magic a lot,
but signals are kinda magical.

79
00:04:02.330 --> 00:04:04.190
Here's what it is.

80
00:04:04.190 --> 00:04:08.085
Variables are like a box of memory that
has some data in it that you could

81
00:04:08.085 --> 00:04:09.350
recall.

82
00:04:09.350 --> 00:04:13.230
You can look in that box and say,
this is three, close the lid.

83
00:04:13.230 --> 00:04:15.470
What happens when you
change that value though?

84
00:04:15.470 --> 00:04:20.467
If someone is using that variable,
they don't know that you've changed it,

85
00:04:20.467 --> 00:04:22.979
you have to go and recalculate things.

86
00:04:24.249 --> 00:04:29.055
Well, a signal knows when it's
been updated and is able to go and

87
00:04:29.055 --> 00:04:32.709
notify different parts of the application.

88
00:04:32.709 --> 00:04:37.259
It can notify the different parts of the
application, which is really wild, right?

89
00:04:37.259 --> 00:04:39.383
So, they're just really smart.

90
00:04:39.383 --> 00:04:42.959
It's almost like the publisher subscriber
model, where if you're subscribed to me,

91
00:04:42.959 --> 00:04:45.873
I get a new video that goes out,
you will get it cuz you're subscribed.

92
00:04:45.873 --> 00:04:48.371
And it's kinda this idea
with a variable now.

93
00:04:48.371 --> 00:04:52.232
You have a variable that can tell people,
hey, I have a new change a new value.

94
00:04:52.232 --> 00:04:56.993
And then we're gonna be able to use this
to do fine grained updates, where instead

95
00:04:56.993 --> 00:05:01.203
of having to search our component tree
to know what things have changed,

96
00:05:01.203 --> 00:05:03.638
we'll be able to say, this changed.

97
00:05:03.638 --> 00:05:04.446
How do I know?

98
00:05:04.446 --> 00:05:09.275
The signal, it told me,
refresh that part, only that part.

99
00:05:09.275 --> 00:05:11.149
Only that part, not the whole tree,
just that little part.

100
00:05:11.149 --> 00:05:12.075
Really nice.

101
00:05:12.075 --> 00:05:12.655
Here's how you do it.

102
00:05:14.105 --> 00:05:16.645
You use the function rest
at the reactive primitives.

103
00:05:16.645 --> 00:05:18.015
There it is right there.

104
00:05:18.015 --> 00:05:20.723
We got a function for you now.

105
00:05:20.723 --> 00:05:25.293
Here's the difference though with
the way signals are being used.

106
00:05:25.293 --> 00:05:29.796
When you use it, you say what the,
Signal name is and

107
00:05:29.796 --> 00:05:35.003
you got to put parentheses
because it's a function.

108
00:05:35.003 --> 00:05:37.860
You say, so the signal is a function.

109
00:05:37.860 --> 00:05:40.711
So that's how you have to use it,
all right?

110
00:05:40.711 --> 00:05:42.144
So let me go back, just let you know.

111
00:05:42.144 --> 00:05:44.456
That's why those parentheses
are after the first name or

112
00:05:44.456 --> 00:05:46.594
last name because signal
returns a function.

113
00:05:46.594 --> 00:05:49.314
And that function is the smart
function that can like notify and

114
00:05:49.314 --> 00:05:51.444
subscribe things, okay?

115
00:05:51.444 --> 00:05:52.485
The get computed.

116
00:05:52.485 --> 00:05:56.977
Computed is one of the ones I love
because there's a really good

117
00:05:56.977 --> 00:06:01.993
example that I learned when I was
hanging out with Wes Bos on a podcast.

118
00:06:01.993 --> 00:06:04.979
He was like, here's how I think about computed.

119
00:06:04.979 --> 00:06:05.845
Think about this.

120
00:06:05.845 --> 00:06:06.878
If you have a shopping cart,

121
00:06:06.878 --> 00:06:09.820
here's the thing about your
shopping cart when you're online.

122
00:06:09.820 --> 00:06:12.443
Shopping card has a total,
where does that total come from?

123
00:06:15.346 --> 00:06:17.359
&gt;&gt; Price of the items and how many items.

124
00:06:17.359 --> 00:06:19.392
&gt;&gt; That's right,
the price and how many items.

125
00:06:20.743 --> 00:06:22.766
But if you change the list of items or

126
00:06:22.766 --> 00:06:25.807
something changes you want
that total to be updated.

127
00:06:25.807 --> 00:06:28.754
If you get a coupon,
it's like 50% off of this item so

128
00:06:28.754 --> 00:06:31.531
the price changes you want
your total to be changed.

129
00:06:31.531 --> 00:06:37.953
A computed lets you have an updated signal
value based on other signal values.

130
00:06:37.953 --> 00:06:40.669
So if you have a whole bunch
of things in there, you see?

131
00:06:40.669 --> 00:06:43.719
So, that's how that kinda works for you.

132
00:06:43.719 --> 00:06:46.209
So that's the really good
example I like about this.

133
00:06:46.209 --> 00:06:51.109
A much less complex example is full name.

134
00:06:52.179 --> 00:06:54.389
First name plus last
name equals full name.

135
00:06:54.389 --> 00:06:56.947
If the first name changes,
full name should change.

136
00:06:56.947 --> 00:07:00.866
If the last name changes,
last name should change.

137
00:07:00.866 --> 00:07:03.055
But here's what's really rad.

138
00:07:03.055 --> 00:07:05.476
From a performance point of view,

139
00:07:05.476 --> 00:07:10.075
this is great because we only
recalculate if something changes.

140
00:07:11.395 --> 00:07:15.115
So we do memorization and caching, right?

141
00:07:15.115 --> 00:07:17.135
So really nice experience.

142
00:07:17.135 --> 00:07:19.425
So you can get this value at all times.

143
00:07:19.425 --> 00:07:21.995
It's like, yeah,
the last value was, Simona Cotton.

144
00:07:21.995 --> 00:07:22.595
Okay, fine.

145
00:07:22.595 --> 00:07:24.325
That's the last known value.

146
00:07:24.325 --> 00:07:26.635
Nothing changed,
why would I rerun this function?

147
00:07:26.635 --> 00:07:28.055
I'll give you the cash value.

148
00:07:28.055 --> 00:07:31.778
Can you imagine how an application to
scale, how much faster everything becomes,

149
00:07:31.778 --> 00:07:34.035
because you're no longer having to do it?

150
00:07:34.035 --> 00:07:36.125
And here's was even better
about signals and Angular.

151
00:07:37.245 --> 00:07:40.891
You don't even only have to
use them in your component,

152
00:07:40.891 --> 00:07:43.997
you just use them in your application.

153
00:07:43.997 --> 00:07:45.839
Okay, use them in your application.

154
00:07:45.839 --> 00:07:46.768
Anywhere you want to.

155
00:07:46.768 --> 00:07:49.635
In your state,
remember I said the state thing earlier?

156
00:07:49.635 --> 00:07:52.164
You're gonna use redux,
you're gonna use this.

157
00:07:52.164 --> 00:07:53.684
Don't use any of that stuff.

158
00:07:53.684 --> 00:07:54.377
Use signals.

159
00:07:54.377 --> 00:07:59.061
Unless you wanna use a state library
specifically for more advanced needs,

160
00:07:59.061 --> 00:08:03.613
fine, but otherwise just use a signal
cuz the signal will stay up to date.

161
00:08:03.613 --> 00:08:05.794
And you could share your services where?

162
00:08:05.794 --> 00:08:09.052
With dependency injection.

163
00:08:09.052 --> 00:08:11.550
Feel's good, right? Okay.

164
00:08:11.550 --> 00:08:12.754
And then you get your effects.

165
00:08:12.754 --> 00:08:15.290
That's the last reactive primitive, okay?

166
00:08:15.290 --> 00:08:16.860
The last reactive primitive.

167
00:08:16.860 --> 00:08:20.238
Now effects is where you
can have something happen,

168
00:08:20.238 --> 00:08:25.405
like you could call a function, do some
behavior if one of the signals changes.

169
00:08:25.405 --> 00:08:28.757
Here's a good example,
like you wanna console.log.

170
00:08:28.757 --> 00:08:29.797
This is great for debugging.

171
00:08:29.797 --> 00:08:32.457
That's one of the best ones I've seen so
far.

172
00:08:32.457 --> 00:08:36.547
Or maybe you wanna make an API call
because the user finished satisfying

173
00:08:36.547 --> 00:08:41.248
all the data, but you don't want it to be
based on like events of clicking,

174
00:08:41.248 --> 00:08:42.221
like, yeah.

175
00:08:42.221 --> 00:08:46.441
All the values are valid now,
let me go ahead and make an API call.

176
00:08:46.441 --> 00:08:47.405
I will do that automatically, right?

177
00:08:47.405 --> 00:08:51.979
So you can do some nice things where
you can do a behavior if one of your

178
00:08:51.979 --> 00:08:55.925
signals changes, but
an effect takes a function, okay?

179
00:08:55.925 --> 00:08:57.415
And effect takes a function.

