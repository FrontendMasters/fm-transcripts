WEBVTT

1
00:00:00.000 --> 00:00:03.810
Now, I touched on this, but
Angular, TypeScript, HTML, and CSS,

2
00:00:03.810 --> 00:00:08.476
those are the three parts you need to know
for Angular, TypeScript, HTML, and CSS.

3
00:00:08.476 --> 00:00:12.398
If you are at home and let's say you
don't have any TypeScript experience,

4
00:00:12.398 --> 00:00:15.522
your JavaScript experience will
be enough to get you there,

5
00:00:15.522 --> 00:00:19.580
because the TypeScript stuff is just
really JavaScript with Types involved.

6
00:00:19.580 --> 00:00:23.516
And just being able to describe the
objects and data that you're working with.

7
00:00:23.516 --> 00:00:26.944
TypeScript is very complex in
terms of how far you can go.

8
00:00:26.944 --> 00:00:28.965
You can go as far as you want
with complexity in TypeScript.

9
00:00:28.965 --> 00:00:32.671
But for this course,
you don't need that experience, right?

10
00:00:32.671 --> 00:00:35.753
Your JavaScript skills will
help you read the code and

11
00:00:35.753 --> 00:00:37.954
we will do examples that work for you.

12
00:00:37.954 --> 00:00:44.672
Now, at the core, at the bottom level,
right, you need components in Angular.

13
00:00:44.672 --> 00:00:49.622
They're like the fundamental building
block of any application, okay?

14
00:00:49.622 --> 00:00:55.177
The fundamental building
block of any application.

15
00:00:55.177 --> 00:00:59.544
So you got TypeScript for
your logic in your component.

16
00:00:59.544 --> 00:01:02.107
So you have a component
class with TypeScript.

17
00:01:02.107 --> 00:01:10.087
Your templates are made with HTML, okay?

18
00:01:10.087 --> 00:01:13.303
And this isn't like our version of HTML,
it's just HTML.

19
00:01:13.303 --> 00:01:16.454
So if you have HTML skills,
you use that with the application.

20
00:01:16.454 --> 00:01:19.866
And then let's say you're styling,
you use CSS.

21
00:01:19.866 --> 00:01:24.830
But we also support SAS and LESS if you
wanna use one of those preprocessors.

22
00:01:24.830 --> 00:01:30.156
You can also use a CSS
preprocessor if you'd like.

23
00:01:30.156 --> 00:01:33.210
But again, here's some of the strengths,
right, cuz people wonder,

24
00:01:33.210 --> 00:01:34.270
why would I use Angular?

25
00:01:34.270 --> 00:01:38.838
Well, if you already had HTML skills,
and let's say you were a CSS wizard and

26
00:01:38.838 --> 00:01:43.556
you knew how to build incredible UIs,
directly transferable skills, right?

27
00:01:43.556 --> 00:01:47.958
You use that same stuff,
not a special Angular version of CSS,

28
00:01:47.958 --> 00:01:52.786
your same CSS skills, apply your
same HTML like knowledge applies.

29
00:01:52.786 --> 00:01:55.737
So all these you know, for accessibility,

30
00:01:55.737 --> 00:02:00.705
you bring all this stuff right in, and
it just works out of the box, okay?

31
00:02:00.705 --> 00:02:02.764
Now, how do you actually
build a component in Angular?

32
00:02:02.764 --> 00:02:07.228
So let's start from the very beginning of
building a component in Angular, very,

33
00:02:07.228 --> 00:02:08.514
very top level, okay?

34
00:02:08.514 --> 00:02:12.484
Yeah, your component,
you gotta import it at the file level.

35
00:02:12.484 --> 00:02:15.694
Okay, we import at the file
level from Angular.

36
00:02:15.694 --> 00:02:18.004
Then we use this pattern
called decorators.

37
00:02:18.004 --> 00:02:20.772
Give me your hands up if you
seen a decorator before?

38
00:02:20.772 --> 00:02:23.550
Maybe in Java,
any Java developers in the room?

39
00:02:23.550 --> 00:02:26.792
Yeah, okay, so decorators,
you've seen this magic before.

40
00:02:26.792 --> 00:02:30.886
But a decorator just allows you
to take a property or a class and

41
00:02:30.886 --> 00:02:33.029
add some behavior to it, okay?

42
00:02:33.029 --> 00:02:35.083
We're gonna add some behavior to it.

43
00:02:35.083 --> 00:02:37.716
This decorator, the component decorator,

44
00:02:37.716 --> 00:02:41.316
lets us take what would normally
be just a TypeScript class and

45
00:02:41.316 --> 00:02:45.000
imbue it with magical powers
that make it a component, right?

46
00:02:45.000 --> 00:02:46.587
It just makes it very special, okay?

47
00:02:46.587 --> 00:02:49.137
Now, this decorator takes some properties.

48
00:02:49.137 --> 00:02:50.681
Let's look at the properties.

49
00:02:50.681 --> 00:02:55.719
First thing you do, because components
are referenced in our HTML templates,

50
00:02:55.719 --> 00:03:00.022
you gotta give it a tag name,
like a selector, we call it selector.

51
00:03:00.022 --> 00:03:00.955
Yeah, questions.

52
00:03:00.955 --> 00:03:09.180
&gt;&gt; Do decorators work similarly
to extending classes?

53
00:03:09.180 --> 00:03:12.891
&gt;&gt; Do decorators work similarly
to extending classes?

54
00:03:12.891 --> 00:03:15.626
I don't know if that's
a completely accurate way,

55
00:03:15.626 --> 00:03:19.991
because when you extend the class here,
that's more about inheritance, right?

56
00:03:19.991 --> 00:03:23.376
Versus decorator is more
about just adding things on.

57
00:03:23.376 --> 00:03:24.635
&gt;&gt; Like an interface?

58
00:03:24.635 --> 00:03:26.398
&gt;&gt; Almost like an interface, right?

59
00:03:26.398 --> 00:03:31.652
So where your interface is behavior that
you can add to your class versus saying,

60
00:03:31.652 --> 00:03:36.211
I inherit the behavior of this other
thing and now I have new behavior,

61
00:03:36.211 --> 00:03:38.082
my own behavior on top of it.

62
00:03:38.082 --> 00:03:41.013
But you're not inheriting anything
with a component decorator,

63
00:03:41.013 --> 00:03:42.801
you're just gonna be adding on things.

64
00:03:42.801 --> 00:03:43.827
So think about your car.

65
00:03:43.827 --> 00:03:45.212
Okay, here's the good way
to think about your car.

66
00:03:45.212 --> 00:03:47.733
You can add on a spoiler
to the back of your car and

67
00:03:47.733 --> 00:03:49.760
that will decorate your car, right?

68
00:03:49.760 --> 00:03:53.476
And now the spoiler has all the
aerodynamic changes that add it to your

69
00:03:53.476 --> 00:03:58.084
car, which your car is still the same car,
you take it off, it's still the same car,

70
00:03:58.084 --> 00:03:59.261
right, at the core.

71
00:03:59.261 --> 00:04:00.704
And so think about a decorator like that.

72
00:04:00.704 --> 00:04:03.626
You can add things onto a car
to give it more things.

73
00:04:03.626 --> 00:04:08.063
You can add on some Nitros or
some boosting, okay?

74
00:04:08.063 --> 00:04:09.140
Hopefully that answers your question.

75
00:04:09.140 --> 00:04:09.885
Thanks for a good question.

76
00:04:09.885 --> 00:04:11.704
Okay, standalone: true.

77
00:04:11.704 --> 00:04:15.669
Now, one of the things in
Angular's history was that we had

78
00:04:15.669 --> 00:04:19.649
this thing called modules that
were really good in theory.

79
00:04:19.649 --> 00:04:20.592
We thought it was a good idea.

80
00:04:20.592 --> 00:04:24.053
It was a good idea, except for
at scale, it became problematic.

81
00:04:24.053 --> 00:04:27.203
And I'll tell that story a little bit
more throughout the day of where there

82
00:04:27.203 --> 00:04:30.603
are things that we've changed now, because
at the time, it was a good idea, and

83
00:04:30.603 --> 00:04:34.412
then at scale, we found trouble or
problems with it from the community.

84
00:04:34.412 --> 00:04:38.365
You used to need something called a module
which handled all of your dependencies for

85
00:04:38.365 --> 00:04:39.319
your application.

86
00:04:39.319 --> 00:04:44.139
So you're like, this component is going
to reference A, B, and C service.

87
00:04:44.139 --> 00:04:47.477
So I have a module that will organize
that for me, and then I'll know, hey,

88
00:04:47.477 --> 00:04:50.204
whatever is in this module is
available to these components.

89
00:04:50.204 --> 00:04:50.998
That sounds great.

90
00:04:50.998 --> 00:04:54.993
Yeah, the right abstraction layer,
except for

91
00:04:54.993 --> 00:04:59.963
it became confusing,
because was it a Ng Angular module, or

92
00:04:59.963 --> 00:05:05.138
was it a ECMAScript module,
or was it a CommonJS module?

93
00:05:05.138 --> 00:05:06.598
Did it have the same behavior?

94
00:05:06.598 --> 00:05:08.184
Were they related?
And they weren't even related.

95
00:05:08.184 --> 00:05:13.626
And then when you had a large application,
again, at scale, you had so

96
00:05:13.626 --> 00:05:19.072
many modules that it created a level
of indirection where you couldn't

97
00:05:19.072 --> 00:05:24.811
be sure where things belong anymore,
right, and it became more complex.

98
00:05:24.811 --> 00:05:28.308
And so we made modules optional.

99
00:05:28.308 --> 00:05:32.530
But in order to do that, we have to add
a new flag called standalone: true, okay?

100
00:05:32.530 --> 00:05:34.852
So that's means you don't need a module.

101
00:05:34.852 --> 00:05:40.928
So whatever you get in this component
is what you get, it's this stuff, okay?

102
00:05:40.928 --> 00:05:42.564
Then you have your template string.

103
00:05:42.564 --> 00:05:47.146
Now, your template string is
just a regular string, but

104
00:05:47.146 --> 00:05:51.545
you can also make this separate
into a file if you want.

105
00:05:51.545 --> 00:05:53.261
So what are the rules around that?

106
00:05:53.261 --> 00:05:54.714
Because I know people are gonna
be thinking about this.

107
00:05:54.714 --> 00:05:57.386
I be reading y'all mind at home,
I already know.

108
00:05:57.386 --> 00:05:59.561
But Mark,
what if my template is really big?

109
00:05:59.561 --> 00:06:00.332
You're right.

110
00:06:00.332 --> 00:06:07.424
If the template is huge, you can separate
this into a separate .html file.

111
00:06:07.424 --> 00:06:10.701
So for small templates, put it in line.

112
00:06:10.701 --> 00:06:12.185
There's just less files to manage.

113
00:06:12.185 --> 00:06:14.796
For large templates,
take it out, take it out.

114
00:06:14.796 --> 00:06:17.510
Somebody else can work on that while you
work on the class or the logic, right?

115
00:06:17.510 --> 00:06:20.235
You can separate things like that.

116
00:06:20.235 --> 00:06:23.107
Okay, styles, the same idea.

117
00:06:23.107 --> 00:06:27.987
Styles is a string in your component,
or you can make it a separate file,

118
00:06:27.987 --> 00:06:28.792
all right?

119
00:06:28.792 --> 00:06:31.561
Same idea, if you've got a lot of styles,
separate them.

120
00:06:31.561 --> 00:06:36.108
Here's what's interesting about styles
though, they're scoped in Angular.

121
00:06:36.108 --> 00:06:38.882
So they don't leak out of your component.

122
00:06:38.882 --> 00:06:43.198
So you can define styles for
things like a P tag, for example,

123
00:06:43.198 --> 00:06:47.597
that will be scoped to your component but
not leak out to the rest

124
00:06:47.597 --> 00:06:52.495
of your application, which makes
your components really reusable.

125
00:06:52.495 --> 00:06:56.329
Because now you can say, well, I have all
these styles that are for my, let's say,

126
00:06:56.329 --> 00:07:00.163
user profile component, custom stuff that
I wrote up, and I could just take that and

127
00:07:00.163 --> 00:07:03.619
plop it anywhere else in my application
and those styles will not conflict,

128
00:07:03.619 --> 00:07:05.620
because they're scoped to the component.

129
00:07:08.484 --> 00:07:09.276
I know that feels good.

130
00:07:09.276 --> 00:07:12.548
When I first saw that myself, I thought,
ooh, that feels good, I like that idea.

131
00:07:12.548 --> 00:07:15.450
All right, and
then you have our component class,

132
00:07:15.450 --> 00:07:18.903
which if you don't have any logic,
it can be an empty class.

133
00:07:18.903 --> 00:07:20.419
But you cannot do functions, why?

134
00:07:20.419 --> 00:07:22.574
We don't support function components.

135
00:07:22.574 --> 00:07:26.871
And we get that question a lot like,
will we support function components?

136
00:07:26.871 --> 00:07:30.044
And the answer is,
there is no answer right now.

137
00:07:30.044 --> 00:07:34.839
We don't see the value yet
that'll help move everyone forward.

138
00:07:34.839 --> 00:07:38.937
Right now, class components solve
the problems that the community has and

139
00:07:38.937 --> 00:07:41.874
that's what we're sticking with right now,
okay?

140
00:07:41.874 --> 00:07:43.462
But we'll never say never, right?

141
00:07:43.462 --> 00:07:48.146
Because, again, at scale over time,
you learn lessons, and you have to adjust.

142
00:07:48.146 --> 00:07:51.769
But for now,
know the function components, okay?

143
00:07:51.769 --> 00:07:56.257
And so this AppComponent class could
stand alone without this decorator, and

144
00:07:56.257 --> 00:07:58.781
it would still be a valid
TypeScript class.

145
00:07:58.781 --> 00:08:02.222
But remember, I talked about the car
example with the spoiler, right?

146
00:08:02.222 --> 00:08:04.802
We add the decorator on there,
now a special.

147
00:08:04.802 --> 00:08:06.335
It can do some extra stuff.

148
00:08:06.335 --> 00:08:09.270
Questions from our community, sure.

149
00:08:09.270 --> 00:08:11.291
&gt;&gt; Can you still use a global style sheet?

150
00:08:11.291 --> 00:08:12.438
&gt;&gt; Yes, you can.

151
00:08:12.438 --> 00:08:14.861
Excellent question,
can you still use a global style sheet?

152
00:08:14.861 --> 00:08:20.265
If we were to look back at our
application, you'll actually see that,

153
00:08:20.265 --> 00:08:24.781
let's see, well,
we can look in this one, in the source.

154
00:08:24.781 --> 00:08:27.855
So there's my app, but
then we got styles.css.

155
00:08:27.855 --> 00:08:31.537
This is global, so for that first example,

156
00:08:31.537 --> 00:08:36.513
I want every component to
inherit the font family, right,

157
00:08:36.513 --> 00:08:40.593
every element that to have
this font family, and

158
00:08:40.593 --> 00:08:44.499
I can put whatever I want
in this global style.

159
00:08:44.499 --> 00:08:45.821
Yeah, it's good.

160
00:08:45.821 --> 00:08:47.500
Good question, I love that question.

161
00:08:47.500 --> 00:08:53.062
All right, so
remember how we talked about the format?

162
00:08:53.062 --> 00:08:56.649
I'll do some stuff, we'll look at the
example, and then we'll do it together.

163
00:08:56.649 --> 00:08:58.139
So let's get back into the code.

164
00:08:58.139 --> 00:09:03.482
So now, let's go back to this project,
the one we just ran.

165
00:09:03.482 --> 00:09:08.576
And now, if you open up the README,
I have some tasks.

166
00:09:08.576 --> 00:09:10.042
I got some tasks.

167
00:09:10.042 --> 00:09:15.046
So if you open up the README,
did you know in VS Code that you could

168
00:09:15.046 --> 00:09:20.437
preview a README in here by doing
Cmd+Shift+V or Ctrl+Shift+V?

169
00:09:20.437 --> 00:09:22.168
And if you didn't know, now you know.

170
00:09:22.168 --> 00:09:23.193
Check this out.

171
00:09:23.193 --> 00:09:25.270
[SOUND] Look at that, really nice.

172
00:09:25.270 --> 00:09:26.737
Okay, so now,
we can see what our task are.

173
00:09:26.737 --> 00:09:29.887
So if you wanna run this example,
there are the steps.

174
00:09:29.887 --> 00:09:31.226
But here's what I want you to do.

175
00:09:31.226 --> 00:09:34.924
Let's go in here and
let's make these changes.

176
00:09:34.924 --> 00:09:37.624
I'll do this one with us, and
then we'll see as the day goes on,

177
00:09:37.624 --> 00:09:39.474
I'll get a feel for how everyone's doing,

178
00:09:39.474 --> 00:09:41.885
and maybe I'll let you try some
of them on your own first.

179
00:09:41.885 --> 00:09:45.301
But for this one, let's do it together and
go through all the steps together.

180
00:09:45.301 --> 00:09:50.260
Okay, so our first step, we need to
create an ordered list with three of our

181
00:09:50.260 --> 00:09:52.795
favorite books, movies, or songs.

182
00:09:52.795 --> 00:09:55.145
Okay, where should we do that?

183
00:09:55.145 --> 00:09:56.798
Can somebody just yell it out for me?

184
00:09:58.761 --> 00:09:59.658
Where should we do that?

185
00:09:59.658 --> 00:10:01.122
&gt;&gt; The component?

186
00:10:01.122 --> 00:10:02.196
&gt;&gt; App component?

187
00:10:02.196 --> 00:10:07.164
&gt;&gt; Right, in app.component.ts, that's
right, that's where we should do that.

188
00:10:07.164 --> 00:10:11.395
Okay, so let's go and make sure
that we find and track all of that,

189
00:10:11.395 --> 00:10:15.113
in app.component.ts under
our Hello Angular project.

190
00:10:15.113 --> 00:10:16.872
We open that up.

191
00:10:19.492 --> 00:10:22.626
So the first thing was we
had to make our ordered list.

192
00:10:22.626 --> 00:10:23.651
How do you make an ordered list?

193
00:10:25.167 --> 00:10:27.832
&gt;&gt; ol.

194
00:10:27.832 --> 00:10:31.394
Yeah, ol, I don't ask trick questions,
I promise.

195
00:10:33.037 --> 00:10:37.002
The reason why I'm asking you folks
what to do is because I want you to feel

196
00:10:37.002 --> 00:10:40.457
comfortable because this is a new framework for
some of you, right?

197
00:10:40.457 --> 00:10:43.126
I want you to feel comfortable
just jumping in and doing stuff.

198
00:10:43.126 --> 00:10:44.431
So trust your instincts.

199
00:10:44.431 --> 00:10:45.835
So we make our ordered list.

200
00:10:45.835 --> 00:10:50.956
And I asked you for your favorite songs,
movies, or books, I think.

201
00:10:50.956 --> 00:10:54.331
So I'll do one of each, okay?

202
00:10:54.331 --> 00:10:56.154
So my favorite song right now.

203
00:10:56.154 --> 00:10:59.394
What is my favorite song right now
at the time of this recording?

204
00:10:59.394 --> 00:11:03.278
Hmm, there's a lot of good song.

205
00:11:04.662 --> 00:11:09.249
[LAUGH] all right, friends at home,
I need a commitment from you

206
00:11:09.249 --> 00:11:13.765
right now that this is a safe space and
a judgment-free zone.

207
00:11:13.765 --> 00:11:17.775
Because the song that
I love right now that

208
00:11:17.775 --> 00:11:21.451
I cannot stop with is ETA by NewJeans.

209
00:11:21.451 --> 00:11:26.060
Now, NewJeans is this K-pop band,
and I know, that's what I'm saying.

210
00:11:26.060 --> 00:11:30.106
And they have a hold on me right now,
I can't break it.

211
00:11:30.106 --> 00:11:34.327
It's in my brain, I mean, I'm actually
writing a solo for this song on guitar,

212
00:11:34.327 --> 00:11:38.259
because I like it so much, so I'm like,
I'm gonna add a solo to this.

213
00:11:38.259 --> 00:11:40.459
And yeah, the song is so good.

214
00:11:40.459 --> 00:11:41.502
Do you feel good?

215
00:11:41.502 --> 00:11:42.946
All right, stop, let's keep going on.

216
00:11:42.946 --> 00:11:45.407
All right, we'll add another one,
I'll keep moving faster, sorry.

217
00:11:45.407 --> 00:11:46.572
I don't wanna tell too many stories.

218
00:11:46.572 --> 00:11:47.410
All right, let's keep going.

219
00:11:47.410 --> 00:11:51.990
One of my favorite books
is Ready Player One.

220
00:11:53.594 --> 00:11:59.618
And this is by, I cannot think
of the author's name right now.

221
00:11:59.618 --> 00:12:01.102
All of a sudden, my brain is going blank.

222
00:12:01.102 --> 00:12:02.267
Let's go, we'll come back to it.

223
00:12:02.267 --> 00:12:06.798
Somebody on the chat tell me the author of
Ready Player One, cuz I can't remember.

224
00:12:06.798 --> 00:12:10.873
All right, favorite movie, somebody
give me one of your favorite movies,

225
00:12:10.873 --> 00:12:12.282
if you're comfortable.

226
00:12:12.282 --> 00:12:13.126
&gt;&gt; Dodgeball.

227
00:12:13.126 --> 00:12:17.327
&gt;&gt; Dodgeball, if you can dodge a wrench,
you can dodge a ball, that's right.

228
00:12:17.327 --> 00:12:19.177
[LAUGH] That's a really good one.

229
00:12:19.177 --> 00:12:20.112
Yeah, I like that.

230
00:12:20.112 --> 00:12:23.436
All right, awesome, awesome,
how can we tell if this even worked?

231
00:12:26.674 --> 00:12:27.562
&gt;&gt; Go back to the browser.

232
00:12:27.562 --> 00:12:29.985
&gt;&gt; Go back to the browser,
that's right, no trick questions.

233
00:12:29.985 --> 00:12:35.475
So to run this example, I do ng serve
from the command line in my project,

234
00:12:35.475 --> 00:12:38.265
and I type in the name of the project.

235
00:12:38.265 --> 00:12:42.068
And just a quick note about this,
this ng serve hello-world,

236
00:12:42.068 --> 00:12:46.542
you don't have to do this if you
don't have a multi-project workspace.

237
00:12:46.542 --> 00:12:48.503
You just do ng serve if
you have a single project.

238
00:12:48.503 --> 00:12:54.199
But because I have a multi-project
workspace, I gotta specify my project.

239
00:12:54.199 --> 00:12:56.059
&gt;&gt; Someone said, Ernest Cline.

240
00:12:56.059 --> 00:12:58.564
&gt;&gt; Ernest Cline,
that's right, that's right.

241
00:12:58.564 --> 00:13:00.464
Okay, so this isn't working.

242
00:13:00.464 --> 00:13:03.342
Did I-
&gt;&gt; hello-angular.

243
00:13:03.342 --> 00:13:04.983
&gt;&gt; It's hello-angular.

244
00:13:04.983 --> 00:13:08.064
Well, look how helpful
we're trying to be here.

245
00:13:08.064 --> 00:13:12.236
This error message is awesome, because it
tells you, here are the projects that you

246
00:13:12.236 --> 00:13:15.136
can choose from,
cuz the one you chose is not listed here.

247
00:13:16.751 --> 00:13:18.523
So it's hello-angular.

248
00:13:18.523 --> 00:13:20.094
But that red is scary, though.

249
00:13:20.094 --> 00:13:22.855
Imagine seeing all that red
[LAUGH] on the first example.

250
00:13:22.855 --> 00:13:25.190
[LAUGH] Not a good time.

251
00:13:25.190 --> 00:13:27.185
All right, super awesome.

252
00:13:27.185 --> 00:13:32.793
So we got that, so
let's go back to my browser, let's reload.

253
00:13:32.793 --> 00:13:35.383
Okay, so we're most of the way there for
this example.

254
00:13:35.383 --> 00:13:38.129
We've got our ordered list, but
I asked you to do one thing here.

255
00:13:38.129 --> 00:13:40.233
So let's go back.

256
00:13:42.270 --> 00:13:44.080
That's why, pressed the wrong button.

257
00:13:44.080 --> 00:13:45.886
Okay, in the same file,

258
00:13:45.886 --> 00:13:50.961
we need to update the styles to use
Roman numerals instead of bullets.

259
00:13:50.961 --> 00:13:54.485
Now, I care about you, so
I gave you the styles for this already.

260
00:13:54.485 --> 00:13:55.803
I don't wanna make your life harder.

261
00:13:55.803 --> 00:13:57.809
Friends at home, I care about you,
watch this, all right?

262
00:13:57.809 --> 00:14:04.336
So we just need to apply style to our ul.

263
00:14:04.336 --> 00:14:08.642
So let's do that in
app.component under styles.

264
00:14:08.642 --> 00:14:13.573
So I'm seeing ol, so
we do ol, same exact syntax,

265
00:14:13.573 --> 00:14:18.176
ol, and then you put your list-style-type.

266
00:14:18.176 --> 00:14:21.924
Now, some of you may have
some experience with HTML and

267
00:14:21.924 --> 00:14:27.153
know that you can also specify it at
the ol level and the HTML as an attribute.

268
00:14:27.153 --> 00:14:28.370
I know you can do that, I know.

269
00:14:28.370 --> 00:14:30.503
You don't have to yell at
me about that on the chat.

270
00:14:30.503 --> 00:14:34.391
I know you can do that,
I want you to try it in CSS, okay?

271
00:14:34.391 --> 00:14:36.123
Don't be mad at me.

272
00:14:36.123 --> 00:14:40.167
So the reason that you can see all the
highlighting in this template like this is

273
00:14:40.167 --> 00:14:42.543
because of the Angular Language Service.

274
00:14:42.543 --> 00:14:46.780
That's why I was saying if you install
that plug in, it gives you highlighting in

275
00:14:46.780 --> 00:14:50.706
a template and then it'll also do some
other really nice features that'll

276
00:14:50.706 --> 00:14:55.031
make our development life, our development
experience more ergonomic, okay?

277
00:14:55.031 --> 00:14:55.937
So now, in my styles, I have my ol.

278
00:14:55.937 --> 00:14:59.556
And then the Angular CLI
with that build server,

279
00:14:59.556 --> 00:15:02.652
you see where it says reloading clients?

280
00:15:02.652 --> 00:15:07.475
It does a refresh, but
temper your expectations because it's

281
00:15:07.475 --> 00:15:10.935
not gonna maintain state right now, right?

282
00:15:10.935 --> 00:15:13.284
So we don't do full HMR yet.

283
00:15:13.284 --> 00:15:17.030
You can enable HMR, like hot module
replacement, where you can maintain state,

284
00:15:17.030 --> 00:15:18.672
navigation, etc.

285
00:15:18.672 --> 00:15:22.152
We can maintain your navigation,
but it's going to reset your state,

286
00:15:22.152 --> 00:15:24.994
right, cuz it's just reloading
the page for you, okay?

287
00:15:24.994 --> 00:15:27.569
But we are working on a better
HMR experience right now.

288
00:15:27.569 --> 00:15:31.814
All right, and then we got it, let's go.

289
00:15:31.814 --> 00:15:32.408
This feels so good to me.

290
00:15:32.408 --> 00:15:32.923
You know why?

291
00:15:32.923 --> 00:15:34.043
Because we just did two things.

292
00:15:34.043 --> 00:15:38.841
We did three things, we ran a project,
we updated the template,

293
00:15:38.841 --> 00:15:43.306
and we updated the styles,
with the skills we already have.

294
00:15:43.306 --> 00:15:45.461
Really, really nice experience.

