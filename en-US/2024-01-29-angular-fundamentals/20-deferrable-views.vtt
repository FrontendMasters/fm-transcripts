WEBVTT

1
00:00:00.280 --> 00:00:04.605
In Angular's history, there have been
a few moments where we've done things that

2
00:00:04.605 --> 00:00:08.310
has led the industry and set patterns
that will be used by other teams and

3
00:00:08.310 --> 00:00:11.890
other frameworks because they
were just good ideas, right?

4
00:00:11.890 --> 00:00:12.910
We had that before.

5
00:00:12.910 --> 00:00:16.474
One of the first things was our two-way
data binding in the very beginning with

6
00:00:16.474 --> 00:00:17.410
Angular.js.

7
00:00:17.410 --> 00:00:20.220
It was incredible when
you saw an input field, and

8
00:00:20.220 --> 00:00:24.586
then the data changing on the screen,
and there was only one line of code.

9
00:00:24.586 --> 00:00:25.573
Why was it so incredible?

10
00:00:25.573 --> 00:00:30.026
Because at that time, we all could only
imagine all the lines of code that

11
00:00:30.026 --> 00:00:35.412
it would take with jQuery, and everything
you had to do just to get that to work.

12
00:00:35.412 --> 00:00:40.482
And we came out like, here,
ngModel, and just walked away.

13
00:00:40.482 --> 00:00:42.658
And then it was like, whoa,
this is amazing, right?

14
00:00:42.658 --> 00:00:46.672
And so this with Deferrable Views is
another one of those moments that I think

15
00:00:46.672 --> 00:00:50.257
all frameworks are just gonna adopt
because of what this gets to do.

16
00:00:52.815 --> 00:00:56.118
This is a way for
us to do lazy loading, okay?

17
00:00:56.118 --> 00:01:00.039
Now, lazy loading is a way to
keep your initial bundle smaller,

18
00:01:00.039 --> 00:01:04.397
meaning what gets shipped to the clients,
that size matters, because

19
00:01:04.397 --> 00:01:09.894
you have clients that can be on maybe
a device that has low bandwidth, right?

20
00:01:09.894 --> 00:01:14.321
You might be in a rural area where you
have an iPhone, but you got no signal,

21
00:01:14.321 --> 00:01:14.824
right?

22
00:01:14.824 --> 00:01:18.299
Or you're like using satellite,
there are all kinds of different

23
00:01:18.299 --> 00:01:22.655
bandwidth restrictions or constraints that
you need to have smaller bundles for.

24
00:01:22.655 --> 00:01:26.191
Well, lazy loading helps you do that.

25
00:01:26.191 --> 00:01:30.219
Now, when you ever done lazy loading
before, you may have done it with

26
00:01:30.219 --> 00:01:34.591
some like fancy configuration at your
router level, where you take parts of

27
00:01:34.591 --> 00:01:40.231
your application and then you say don't
ship this part, don't ship this route.

28
00:01:40.231 --> 00:01:43.770
What if I told you that with Deferrable
Views you can take parts of your

29
00:01:43.770 --> 00:01:46.821
component, the template and
say, don't ship this line,

30
00:01:46.821 --> 00:01:50.805
don't ship this part of the component
until something meaningful happens.

31
00:01:52.195 --> 00:01:54.425
And what if I told you do all
that work in the template?

32
00:01:56.755 --> 00:01:59.055
Well, I wanna say I said it was special.

33
00:01:59.055 --> 00:02:00.495
Let me show you what I mean.

34
00:02:00.495 --> 00:02:02.579
Check out this template.

35
00:02:02.579 --> 00:02:03.528
Okay, this is a template.

36
00:02:06.443 --> 00:02:11.255
I want to load the recommended
movies component only if someone

37
00:02:11.255 --> 00:02:13.540
interacts with the trigger.

38
00:02:15.737 --> 00:02:16.629
Check this out.

39
00:02:16.629 --> 00:02:19.849
So, you use the @defer syntax.

40
00:02:21.109 --> 00:02:25.957
So this is saying defer the loading
of whatever's in my curly braces,

41
00:02:25.957 --> 00:02:30.116
defer that loading until
the interaction happens.

42
00:02:30.116 --> 00:02:32.616
Why does my interaction says trigger,
what does that trigger?

43
00:02:32.616 --> 00:02:34.976
Okay, now we're really cooking.

44
00:02:34.976 --> 00:02:39.058
Because this trigger is what's called
a template variable in Angular, so

45
00:02:39.058 --> 00:02:43.322
you can just like, say hey,
I wanna reference to this button.

46
00:02:43.322 --> 00:02:46.202
Okay hash tag and give it a name and
then you get a reference to the element.

47
00:02:46.202 --> 00:02:47.132
It works on any element.

48
00:02:47.132 --> 00:02:48.272
There's just so you can do an Angular.

49
00:02:48.272 --> 00:02:50.342
I don't know, pretty cool.

50
00:02:50.342 --> 00:02:53.892
All right, so if someone interacts
with the trigger, then what happens?

51
00:02:53.892 --> 00:02:55.933
The recommended movies load.

52
00:02:55.933 --> 00:03:00.552
When I say load,
I don't mean it appears on the screen.

53
00:03:00.552 --> 00:03:06.287
I mean the request for
the data for the actual packets

54
00:03:06.287 --> 00:03:12.296
happens cuz it is not shipped
with your code, you see.

55
00:03:12.296 --> 00:03:16.118
I know, just stay with me, I know,
friends at home, I know some of y'all just

56
00:03:16.118 --> 00:03:19.646
have to wear a hat so your brain
doesn't blow up like my god.

57
00:03:19.646 --> 00:03:22.367
Okay, just stick with me.

58
00:03:22.367 --> 00:03:27.940
When I'm waiting for it to load, because
it has to make the HTTP request again,

59
00:03:27.940 --> 00:03:31.349
right for that code,
I can set a loading screen,

60
00:03:31.349 --> 00:03:35.027
whatever I want it to be,
whatever I want this to be.

61
00:03:36.527 --> 00:03:38.042
Any HTML, any component.

62
00:03:38.042 --> 00:03:41.956
Something goes wrong,
I have an error that I can show as well.

63
00:03:43.527 --> 00:03:48.937
And while I'm loading it, while it is
in flight, I can also show something.

64
00:03:48.937 --> 00:03:50.147
This is all in a template.

65
00:03:50.147 --> 00:03:52.477
There is no special back end coding.

66
00:03:52.477 --> 00:03:54.597
There is nothing fancy that I've done.

67
00:03:55.787 --> 00:03:59.997
This is all in its simple level, but we're
gonna demonstrate this, don't you worry.

68
00:03:59.997 --> 00:04:02.495
Because some of you are like,
man, that seems good, Mark, but

69
00:04:02.495 --> 00:04:03.947
what if I wanted to do custom things.

70
00:04:03.947 --> 00:04:06.245
I wanna make my own triggers.

71
00:04:06.245 --> 00:04:11.252
Fine, when the count or
some arbitrary expression that can be

72
00:04:11.252 --> 00:04:16.275
defined as truthy or falsy,
right, happens, load it then.

73
00:04:17.345 --> 00:04:19.775
So that means that count came from where?

74
00:04:19.775 --> 00:04:21.545
That's from my application class.

75
00:04:21.545 --> 00:04:26.864
So that means it's programmatic at
that point, that's what cooking.

76
00:04:26.864 --> 00:04:29.576
We are, [SOUND] I smell so good, plug it.

77
00:04:29.576 --> 00:04:30.655
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] So

78
00:04:30.655 --> 00:04:32.394
there are a whole bunch of triggers.

79
00:04:32.394 --> 00:04:36.374
When the browser sends the idle message,
that's the thing that browser can do.

80
00:04:36.374 --> 00:04:40.083
I can load some components then or
I can do it immediately, right,

81
00:04:40.083 --> 00:04:42.746
once the other stuff is rendered,
I'm sorry.

82
00:04:42.746 --> 00:04:44.474
Once this thing gets
rendered on the screen,

83
00:04:44.474 --> 00:04:46.496
cuz you know how browsers render, right?

84
00:04:46.496 --> 00:04:50.505
Once it hits this one, okay,
fine then start the fetching, but

85
00:04:50.505 --> 00:04:52.819
don't fetch it before that, okay?

86
00:04:52.819 --> 00:04:54.036
Wait some time.

87
00:04:54.036 --> 00:04:57.732
Maybe I know that our service at
work is a little slow because it's

88
00:04:57.732 --> 00:05:01.628
like a legacy service written in COBOL and
it takes a little bit time,

89
00:05:01.628 --> 00:05:03.597
I don't wanna call it yet.

90
00:05:03.597 --> 00:05:08.347
Fine, give some time, say one minute,
two seconds, whatever, put your time in there.

91
00:05:08.347 --> 00:05:11.431
Or maybe I don't want to happen
until you scroll the page and

92
00:05:11.431 --> 00:05:13.417
then something enters the viewport.

93
00:05:15.187 --> 00:05:18.087
Then I'll load cuz they never scroll down,
why would I load the component?

94
00:05:18.087 --> 00:05:21.321
Why load 150 comments if
they're never gonna look at it?

95
00:05:23.182 --> 00:05:28.109
[SOUND] I know, I know, or that you saw
the interaction like that's like a click,

96
00:05:28.109 --> 00:05:28.626
right?

97
00:05:28.626 --> 00:05:30.372
You can do that.

98
00:05:30.372 --> 00:05:34.791
Or let's say you hover over area of
your screen that you can define.

99
00:05:34.791 --> 00:05:37.832
You can go even further.

100
00:05:37.832 --> 00:05:41.832
There's a difference between lazy
loading and prefetching and displaying.

101
00:05:41.832 --> 00:05:45.140
So, lazy load, you can just do this whole
thing where you're like, all right,

102
00:05:45.140 --> 00:05:47.763
when it's time to load it,
load it, then display.

103
00:05:47.763 --> 00:05:51.464
Or what you can do is say,
you know what, start getting it,

104
00:05:51.464 --> 00:05:54.353
but I'm not ready for you to show it yet.

105
00:05:54.353 --> 00:05:59.223
But start getting it at my condition,
whatever my condition is.

106
00:05:59.223 --> 00:06:04.937
So then I can say, load on interaction or
if they haven't interacted yet, but

107
00:06:04.937 --> 00:06:11.136
the browser has been done with everything
else, start prefetching the code.

108
00:06:11.136 --> 00:06:15.016
Get started, get a head start or
a custom trigger.

109
00:06:15.016 --> 00:06:18.965
Okay, this one will do, cuz I think you
have to see it to believe it because

110
00:06:18.965 --> 00:06:22.850
what I'm describing is kinda wait,
what, I kinda get it, but, Mark,

111
00:06:22.850 --> 00:06:24.816
what are you talking about?

112
00:06:24.816 --> 00:06:28.866
Let me show you.
So we're gonna skip to 13.

113
00:06:28.866 --> 00:06:30.756
Bar's closing down, all right.

114
00:06:32.976 --> 00:06:36.656
So you can come with 13 with me if
you want, but I'm just gonna do this.

115
00:06:36.656 --> 00:06:38.059
So I'm gonna run this one.

116
00:06:40.517 --> 00:06:43.623
Okay, all right.

117
00:06:43.623 --> 00:06:45.113
All right, all right,
all right, all right.

118
00:06:46.393 --> 00:06:50.333
Deferable Views, all right,
so what's the task in here?

119
00:06:50.333 --> 00:06:51.389
We got some tasks.

120
00:06:51.389 --> 00:06:53.818
We're just gonna add a defer block and
not just put it in here.

121
00:06:53.818 --> 00:06:55.433
See, this was meant to be playful.

122
00:06:55.433 --> 00:06:59.400
So you just experiment this on
your own time, the code is there.

123
00:06:59.400 --> 00:07:01.183
But I want you to just try stuff out.

124
00:07:01.183 --> 00:07:07.098
We'll do a couple of these, and then we'll
start our march toward the end, man.

125
00:07:07.098 --> 00:07:08.258
Look at this page.

126
00:07:08.258 --> 00:07:12.154
This looks amazing, was a whole bunch of,
this came from the Internet, right,

127
00:07:12.154 --> 00:07:15.038
meaning like I made HTTP requests,
just so you can see it.

128
00:07:15.038 --> 00:07:16.478
Let's do the network.

129
00:07:16.478 --> 00:07:18.042
Wanna reload this page?

130
00:07:18.042 --> 00:07:21.958
Let's close that out, and
then reload, all right.

131
00:07:21.958 --> 00:07:22.666
I didn't reload.

132
00:07:25.399 --> 00:07:27.457
That's why,
I get that word chucking down like what?

133
00:07:27.457 --> 00:07:32.117
See, posts came from the Internet so
that's not like local.

134
00:07:32.117 --> 00:07:35.261
So this page,
depending on the traffic to the site,

135
00:07:35.261 --> 00:07:39.767
could be super slow, right, to load
a bunch of posts can be super slow.

136
00:07:39.767 --> 00:07:40.307
What can we do?

137
00:07:40.307 --> 00:07:43.371
We wanna defer the loading
until we're ready to do it.

138
00:07:43.371 --> 00:07:46.595
And the way I wanna do it is when
you interact with this button,

139
00:07:46.595 --> 00:07:47.711
then I wanna load it.

140
00:07:47.711 --> 00:07:48.281
So let's do that.

141
00:07:49.361 --> 00:07:51.621
All right, so let's get cooking.

142
00:07:51.621 --> 00:07:57.011
So I'm gonna go into app.component.ts.

143
00:07:57.011 --> 00:08:02.911
Okay, now, it's a lot of work to set this
up cuz I wanna dynamically load this code.

144
00:08:02.911 --> 00:08:07.812
Not defer the loading of the call
of saying I only wanna ship

145
00:08:07.812 --> 00:08:09.811
the app post code.

146
00:08:09.811 --> 00:08:13.490
I don't even want it to be shipped to
the browser until I request it.

147
00:08:13.490 --> 00:08:16.171
Okay, let's see if I can do it.

148
00:08:16.171 --> 00:08:17.941
Oh,Mark, do we get enough time for this?

149
00:08:17.941 --> 00:08:19.925
[SOUND] so much, I don't know.

150
00:08:19.925 --> 00:08:23.488
Let me just try, I'm so

151
00:08:23.488 --> 00:08:27.951
stressed, it's so much to write.

152
00:08:29.777 --> 00:08:33.291
Man, what's going on, does that thing,
okay I need the trigger.

153
00:08:33.291 --> 00:08:34.341
I need a trigger.

154
00:08:36.781 --> 00:08:38.219
Okay, I'm done.

155
00:08:38.219 --> 00:08:41.781
&gt;&gt; [LAUGH]
&gt;&gt; That's the whole thing.

156
00:08:41.781 --> 00:08:44.536
Now, that's a pretty advanced
scenario that I described to you.

157
00:08:44.536 --> 00:08:47.707
Let me show you how it works.

158
00:08:47.707 --> 00:08:51.075
Okay, so this is everything that came,
in a couple of chunks they came,

159
00:08:51.075 --> 00:08:52.527
platform browser.

160
00:08:52.527 --> 00:08:56.827
We got, I don't see any data,
wait, it was called post.

161
00:08:57.897 --> 00:08:58.987
No data for posts.

162
00:09:00.557 --> 00:09:02.277
Now, check this out.

163
00:09:02.277 --> 00:09:04.372
So I'm gonna clear this,
not refresh, clear it.

164
00:09:04.372 --> 00:09:07.052
I'm gonna click load post.

165
00:09:07.052 --> 00:09:09.176
Look at the order of operation.

166
00:09:09.176 --> 00:09:10.886
Look at the order of operation.

167
00:09:10.886 --> 00:09:12.533
First, the chunk of code came.

168
00:09:15.520 --> 00:09:16.348
Okay?

169
00:09:16.348 --> 00:09:20.411
Then the library that Angular
needed to make our code work,

170
00:09:20.411 --> 00:09:22.292
then what happened third?

171
00:09:23.796 --> 00:09:25.376
Data requests have been third.

172
00:09:25.376 --> 00:09:29.076
So that's evidence to you that we
did not ship this code, right?

173
00:09:29.076 --> 00:09:33.432
It did not go to the initial bundle
browser bundle, which is really,

174
00:09:33.432 --> 00:09:35.256
really special.

175
00:09:35.256 --> 00:09:37.256
So here's our data, just proof.

176
00:09:37.256 --> 00:09:38.386
Okay, cool.

177
00:09:38.386 --> 00:09:40.676
Here's our chunk, wait a minute.

178
00:09:43.216 --> 00:09:46.941
This is like the the code that
gets written by our compiler,

179
00:09:46.941 --> 00:09:49.847
as it compiles it so it can be optimized.

180
00:09:49.847 --> 00:09:53.337
So it won't look identical, but
you can see it's our post component.

181
00:09:53.337 --> 00:09:55.592
You see, I'm not lying about that, right?

182
00:09:55.592 --> 00:10:01.917
[LAUGH] There's our fetch
call to go get our data.

183
00:10:01.917 --> 00:10:05.777
So now, that's why I said this is early
on, cuz I know that optimizations

184
00:10:05.777 --> 00:10:09.995
are kinda tricky, cuz people are really
worried about like pre-optimizing.

185
00:10:09.995 --> 00:10:11.315
This isn't really pre-optimizing.

186
00:10:11.315 --> 00:10:14.135
This is just making your app better,
right?

187
00:10:14.135 --> 00:10:17.385
You just throw the defer on there,
it didn't cost you anything.

188
00:10:17.385 --> 00:10:19.345
I didn't set up any configuration.

189
00:10:19.345 --> 00:10:20.545
I did nothing.
I just typed defer.

190
00:10:20.545 --> 00:10:23.626
And I think this is a really good idea,
and I do think that we'll see

191
00:10:23.626 --> 00:10:26.760
even more adoption of this pattern where
you can just block out parts of your

192
00:10:26.760 --> 00:10:30.241
application, just choose any part you
want, and just start wrapping it in defer,

193
00:10:30.241 --> 00:10:32.473
just start having a good old time.

194
00:10:32.473 --> 00:10:35.379
What questions can I answer
about lazy loading with defer?

195
00:10:39.690 --> 00:10:41.926
&gt;&gt; On an error, can you re-trigger it?

196
00:10:43.097 --> 00:10:43.867
&gt;&gt; Good question.

197
00:10:43.867 --> 00:10:48.197
We don't have re-trigger implemented yet,
but that is on our list.

198
00:10:48.197 --> 00:10:53.307
Yes, so question is about what happens
if this messes up, an error is thrown?

199
00:10:53.307 --> 00:10:53.967
Then what do you do?

200
00:10:55.237 --> 00:10:57.230
We, right now,
we can only display something, but

201
00:10:57.230 --> 00:11:00.437
we don't have like a retry yet, but
that's something that's on our list.

202
00:11:00.437 --> 00:11:02.054
Yeah, good question.

203
00:11:02.054 --> 00:11:03.166
Any questions from the chat?

204
00:11:08.283 --> 00:11:12.344
&gt;&gt; Can prototype pollution
happen when lazy loading?

205
00:11:12.344 --> 00:11:16.964
&gt;&gt; Prototype pollution, it depends on
your code for prototype pollution.

206
00:11:16.964 --> 00:11:17.804
That depends on your code.

207
00:11:17.804 --> 00:11:21.022
Like if you're writing code,
that pollutes the prototype, literally,

208
00:11:21.022 --> 00:11:24.139
like you're adding things directly
to the window.object prototype,

209
00:11:24.139 --> 00:11:27.533
then that could happen, but I don't see
it happening just with lazy loading.

210
00:11:27.533 --> 00:11:31.403
No, cuz the same rules apply, the same
scoping and everything still applies.

211
00:11:31.403 --> 00:11:34.683
We're just chunking stuff up for
you and sending it back to you.

212
00:11:36.103 --> 00:11:38.935
&gt;&gt; Is defer something like a promise?

213
00:11:38.935 --> 00:11:39.713
&gt;&gt; Good question.

214
00:11:39.713 --> 00:11:41.423
Is defer something like a promise?

215
00:11:41.423 --> 00:11:47.481
No, because with defer, so what
the problem is you get directly involved.

216
00:11:47.481 --> 00:11:50.671
And then you want to like
respond to the promise, right?

217
00:11:50.671 --> 00:11:52.835
You do like .then() or your async await.

218
00:11:52.835 --> 00:11:54.813
With defer, just at the template level,

219
00:11:54.813 --> 00:11:57.421
where you're just saying
don't load this template.

220
00:11:57.421 --> 00:11:59.531
Until one of these conditions happen.

221
00:11:59.531 --> 00:12:02.476
Now, the default condition
is the browser idle state.

222
00:12:02.476 --> 00:12:05.476
Meaning that all the work on
the main thread has been done.

223
00:12:05.476 --> 00:12:09.617
And then I'm like, okay, then we could
like defer on low, but I'm doing on

224
00:12:09.617 --> 00:12:13.856
interaction which is like on demand
like click, then do something, right.

225
00:12:13.856 --> 00:12:16.256
And there are all those other
triggers that you can do.

226
00:12:16.256 --> 00:12:18.092
Yeah, really good question.

