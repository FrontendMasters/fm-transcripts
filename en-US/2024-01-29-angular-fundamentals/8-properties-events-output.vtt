WEBVTT

1
00:00:00.000 --> 00:00:01.236
Let's talk about property binding.

2
00:00:01.236 --> 00:00:03.940
So we'll talk about event binding and
property binding.

3
00:00:03.940 --> 00:00:07.631
These are two really important
parts of angular components.

4
00:00:07.631 --> 00:00:13.562
Because here's the other thing, maybe what
you want to do is have an attribute or

5
00:00:13.562 --> 00:00:18.205
a property on an element, and
you want to have a dynamic value.

6
00:00:20.062 --> 00:00:22.530
Okay?
Okay, so I'll show you what I mean.

7
00:00:22.530 --> 00:00:25.405
So, we're property binding that
is the magic of property binding.

8
00:00:25.405 --> 00:00:29.976
You can set values for
properties of elements in your template.

9
00:00:29.976 --> 00:00:34.511
So let's say you want to dynamically set
disabled or enabled based on something

10
00:00:34.511 --> 00:00:38.585
else in your component, like you
wanna bind to that property, right.

11
00:00:38.585 --> 00:00:42.808
Or you wanna set the the number of rows
for a text area based on a number, for

12
00:00:42.808 --> 00:00:47.192
example, things like that, you got to
wait it goes even further than that.

13
00:00:47.192 --> 00:00:54.266
So let's take the disabled and enable
part for a template for a component.

14
00:00:54.266 --> 00:00:58.687
First thing you do is that you find
that the property that you want to bind

15
00:00:58.687 --> 00:01:01.486
it to that you want to
have it dynamic value and

16
00:01:01.486 --> 00:01:04.591
then you add square brackets
right around there.

17
00:01:04.591 --> 00:01:10.471
So on the disabled property of the button,
so this is still HTML stuff, right.

18
00:01:10.471 --> 00:01:12.921
But now the brackets
are what make it special.

19
00:01:12.921 --> 00:01:14.595
We got our brackets around it.

20
00:01:14.595 --> 00:01:19.448
And then that means whatever's on
the right hand-side of the equal sign,

21
00:01:19.448 --> 00:01:23.847
we got Is disabled right here,
that is going to link to guess where.

22
00:01:23.847 --> 00:01:25.208
Look at that.

23
00:01:25.208 --> 00:01:25.845
Is disabled.

24
00:01:25.845 --> 00:01:30.377
So those values are now bound together.

25
00:01:30.377 --> 00:01:34.902
It gives you the power to
programmatically adjust values in your

26
00:01:34.902 --> 00:01:36.843
template now on elements.

27
00:01:36.843 --> 00:01:41.715
But there's a sibling tool that you
can You can use with property binding,

28
00:01:41.715 --> 00:01:43.813
which is event binding, okay.

29
00:01:43.813 --> 00:01:45.511
You get property binding and
event binding.

30
00:01:45.511 --> 00:01:46.759
Okay, let's do that.

31
00:01:46.759 --> 00:01:52.519
So, event binding enables you to respond
to you like your events of your template.

32
00:01:52.519 --> 00:01:57.041
Let's say what's an event
mouseover click custom events

33
00:01:57.041 --> 00:02:01.112
that we'll see even more
you got all these options.

34
00:02:01.112 --> 00:02:05.584
Okay, so now let's say that we wanna, we
have this template, this component, we got

35
00:02:05.584 --> 00:02:10.027
a button that says save progress, maybe
there's some other stuff in the component.

36
00:02:10.027 --> 00:02:15.014
Then, if I wanna handle it, okay fine,
I take the name of the event.

37
00:02:15.014 --> 00:02:18.119
So if you were in the react world,
you have your on something, something,

38
00:02:18.119 --> 00:02:19.910
something, that you're trying to like.

39
00:02:19.910 --> 00:02:21.612
Attach your function to.

40
00:02:21.612 --> 00:02:23.229
In Angular, we're just saying,
what is the event name?

41
00:02:23.229 --> 00:02:26.974
The same thing that when you did
document.addEventListener quote,

42
00:02:26.974 --> 00:02:30.667
remember that value that goes in
that quote in the plain JavaScript?

43
00:02:30.667 --> 00:02:34.461
When you add an event listener,
it's that same value.

44
00:02:34.461 --> 00:02:37.913
Those same values are valid here,
because they're just HTML events or

45
00:02:37.913 --> 00:02:39.648
JavaScript events for your thing.

46
00:02:39.648 --> 00:02:41.979
So, boom, you get a click.

47
00:02:41.979 --> 00:02:45.095
How do I identify that
I'm binding to it though?

48
00:02:45.095 --> 00:02:45.712
Parentheses.

49
00:02:47.995 --> 00:02:48.600
How y'all doing?

50
00:02:48.600 --> 00:02:50.534
See that parentheses, okay.

51
00:02:50.534 --> 00:02:56.216
And then on the right hand side, we
have the function, but with parentheses.

52
00:02:59.836 --> 00:03:00.470
Okay.
Okay, so

53
00:03:00.470 --> 00:03:01.867
you can't forget those parentheses there.

54
00:03:01.867 --> 00:03:04.148
That matters.

55
00:03:04.148 --> 00:03:06.575
Okay, and now, but what does that link to?

56
00:03:06.575 --> 00:03:10.446
Some value in our class.

57
00:03:10.446 --> 00:03:12.170
Awesome.

58
00:03:12.170 --> 00:03:15.105
Okay, before I go from there,
how's that feel so far?

59
00:03:15.105 --> 00:03:15.929
Feel pretty good?

60
00:03:15.929 --> 00:03:20.540
All right, I had to show you that,
so I can show you this next part.

61
00:03:20.540 --> 00:03:24.613
So you need to understand the fact
that you can bind to properties and

62
00:03:24.613 --> 00:03:27.127
bind to events, properties and events.

63
00:03:27.127 --> 00:03:32.113
Because remember I said a moment ago,
if we were to break out that listing

64
00:03:32.113 --> 00:03:37.211
template into its own component,
how would it know what data to display?

65
00:03:37.211 --> 00:03:40.574
Cuz if all of our data lived in
app.component or so earlier on,

66
00:03:40.574 --> 00:03:45.080
one of the questions was, what if you have
data in another part of your application,

67
00:03:45.080 --> 00:03:47.315
but you want to share it with a component?

68
00:03:47.315 --> 00:03:48.341
Now we're gonna answer that question.

69
00:03:48.341 --> 00:03:49.651
So we're coming back to that.

70
00:03:49.651 --> 00:03:50.955
So I said, give me a second.
We're gonna get there.

71
00:03:50.955 --> 00:03:51.835
So how do you do that?

72
00:03:51.835 --> 00:03:53.569
So you use that with inputs.

73
00:03:53.569 --> 00:03:56.754
And I say that you can customize
a component with an input.

74
00:03:56.754 --> 00:04:00.329
But you can also frame this as you
can share data with the component,

75
00:04:00.329 --> 00:04:01.156
with an input.

76
00:04:01.156 --> 00:04:05.142
But the reason I say customizing
is because I like the idea of if

77
00:04:05.142 --> 00:04:08.146
you take a user profile or
something, right.

78
00:04:08.146 --> 00:04:11.184
And you say, well, I wanna define what
the data is for that user profile,

79
00:04:11.184 --> 00:04:13.586
you're kinda customizing it
cuz it's no longer static.

80
00:04:13.586 --> 00:04:15.310
That's why I say customizing, but

81
00:04:15.310 --> 00:04:18.251
you could also say share data
if that's more helpful to you.

82
00:04:18.251 --> 00:04:22.451
If you are a person who's done like react,

83
00:04:22.451 --> 00:04:26.312
inputs in angular are just like props.

84
00:04:26.312 --> 00:04:29.391
Props are how you send in
information to a component in React.

85
00:04:29.391 --> 00:04:35.125
Inputs are named for
that same concept, okay.

86
00:04:35.125 --> 00:04:35.677
So here's what we have.

87
00:04:35.677 --> 00:04:40.838
So let's say we have our user card,
which has some user information in it.

88
00:04:40.838 --> 00:04:46.301
All right, and then we have our
object which is of type user and

89
00:04:46.301 --> 00:04:48.731
has all this information.

90
00:04:48.731 --> 00:04:55.429
App user has an input called user data and

91
00:04:55.429 --> 00:05:00.748
it accepts a value of type user.

92
00:05:00.748 --> 00:05:04.520
If that just works,
why do I need the square brackets, right?

93
00:05:04.520 --> 00:05:05.484
Why do I need the square brackets?

94
00:05:05.484 --> 00:05:06.783
Let me tell you why.

95
00:05:06.783 --> 00:05:14.217
The square brackets make the right-hand
side be an expression and not a string.

96
00:05:14.217 --> 00:05:19.085
Because without the brackets,
it will be the string user.

97
00:05:19.085 --> 00:05:22.441
With the brackets Typescript and
Angular are gonna say, wait,

98
00:05:22.441 --> 00:05:24.481
this is a like property or something.

99
00:05:24.481 --> 00:05:27.112
Let me look and see what the value is.

100
00:05:27.112 --> 00:05:28.891
Let me actually get that instead.

101
00:05:28.891 --> 00:05:35.474
So those brackets can imbue it
with more powers make it dynamic.

102
00:05:35.474 --> 00:05:37.681
But lets us understand how this works.

103
00:05:37.681 --> 00:05:39.091
See that user data, right.

104
00:05:39.091 --> 00:05:42.433
That's an input on app-user-card.

105
00:05:42.433 --> 00:05:44.873
And this user data is that actual data.

106
00:05:44.873 --> 00:05:48.715
So we're saying pass that
in to this property name.

107
00:05:48.715 --> 00:05:52.993
But then if we go to the user card, let's
actually look look at what that does.

108
00:05:52.993 --> 00:05:57.348
So now I have this thing called
it a decorator called @Input.

109
00:05:57.348 --> 00:06:02.081
So it takes a normal property
that you normally would just be

110
00:06:02.081 --> 00:06:04.549
called user data of type user.

111
00:06:04.549 --> 00:06:09.945
But with the at input it allows
the value to be set from where?

112
00:06:09.945 --> 00:06:12.748
Outside the component.

113
00:06:12.748 --> 00:06:18.675
Whoa, hold on, I gotta cover my ears so
my brain doesn't explode out, hold on.

114
00:06:18.675 --> 00:06:19.700
This is so good.

115
00:06:19.700 --> 00:06:22.839
Yeah, so, that's how we're able
to accept values in there.

116
00:06:22.839 --> 00:06:25.498
And then we have our property, and

117
00:06:25.498 --> 00:06:29.905
we can still use that property
normally in our template.

118
00:06:29.905 --> 00:06:33.739
The same behavior that we've had so far.

119
00:06:33.739 --> 00:06:35.315
So nothing has changed.

120
00:06:35.315 --> 00:06:36.838
You know what the only
thing that changed is?

121
00:06:36.838 --> 00:06:38.207
Where the data came from.

122
00:06:38.207 --> 00:06:41.060
But how we work with it,
how we use it, remains the same.

123
00:06:43.536 --> 00:06:47.992
It's okay, if this feels a little
abstract, a little confusing,

124
00:06:47.992 --> 00:06:51.131
because this is just
a different way to do this.

125
00:06:51.131 --> 00:06:54.653
All right, so if inputs are to
get data into the component,

126
00:06:54.653 --> 00:06:57.190
what if you need to tell
another part of your

127
00:06:57.190 --> 00:07:02.129
application that something happened in
your component when they go the other way?

128
00:07:02.129 --> 00:07:06.268
Output, input is into the component
output is out of the component.

129
00:07:06.268 --> 00:07:10.218
And the way you send data out of
a component is through an event.

130
00:07:10.218 --> 00:07:13.591
So we emit information so check this out.

131
00:07:13.591 --> 00:07:17.608
Let's say that we had
a component with an output.

132
00:07:17.608 --> 00:07:21.977
So when something happens like
addItemEvent all right, addItemEvent,

133
00:07:21.977 --> 00:07:27.129
someone's add an item in this component,
we use this class called new EventEmitter.

134
00:07:27.129 --> 00:07:29.399
Now how can we tell what's
going to come out, though?

135
00:07:29.399 --> 00:07:32.775
What the event emitter what
type of data comes out

136
00:07:32.775 --> 00:07:33.668
&gt;&gt; A string,

137
00:07:33.668 --> 00:07:35.399
&gt;&gt; A string, say TypeScript to the rescue.

138
00:07:35.399 --> 00:07:36.869
You don't have to guess.

139
00:07:36.869 --> 00:07:41.530
It's a string and then when we ready to do

140
00:07:41.530 --> 00:07:45.652
that event, here's how it works.

141
00:07:45.652 --> 00:07:49.608
We have a function that gets
called at some point and

142
00:07:49.608 --> 00:07:53.571
then you do the event and
you emit the event you say.

143
00:07:53.571 --> 00:07:57.955
So whenever,
whenever the additem function is called

144
00:07:57.955 --> 00:08:02.062
this adding function runs and
it emits this event.

145
00:08:02.062 --> 00:08:04.486
And right now since a cute little turtle,
because, you know,

146
00:08:04.486 --> 00:08:07.069
It's turtles all the way down like
what's under the next turtle.

147
00:08:07.069 --> 00:08:08.349
It's turtles all the way down, baby.

148
00:08:08.349 --> 00:08:09.444
That's what that is.

149
00:08:09.444 --> 00:08:11.341
All right, I wonder sorry, okay.

150
00:08:11.341 --> 00:08:16.602
All right, so I guess that's talking about
for there, and actually, we'll look at it.

151
00:08:16.602 --> 00:08:20.860
So this is in the actual component that
has the output what about where you're

152
00:08:20.860 --> 00:08:22.113
using the component?

153
00:08:22.113 --> 00:08:24.020
What about where you're using it?

154
00:08:24.020 --> 00:08:27.258
Well, we are binding to that event name.

155
00:08:27.258 --> 00:08:29.478
How do you know what that name was?

156
00:08:29.478 --> 00:08:32.313
You saw that event name addItemEvent?

157
00:08:32.313 --> 00:08:34.069
That's that event name.

158
00:08:34.069 --> 00:08:36.773
And so that's what you bind
to because it's an output.

159
00:08:36.773 --> 00:08:42.503
So I'm gonna bind to that event name.

160
00:08:42.503 --> 00:08:45.426
I'm going to handle the event,
make my own handler for it,

161
00:08:45.426 --> 00:08:48.714
just like how it bounces the click
when somebody click the button.

162
00:08:48.714 --> 00:08:50.049
This is a custom event.

163
00:08:50.049 --> 00:08:51.208
It's called add item event.

164
00:08:51.208 --> 00:08:52.194
I made that.

165
00:08:52.194 --> 00:08:53.641
I have the power, right?

166
00:08:53.641 --> 00:08:55.185
And then I have my event handler.

167
00:08:55.185 --> 00:08:58.628
That dollar sign event is
whatever came from the event.

168
00:09:01.416 --> 00:09:05.767
It's finally a stream because we
said it was going to be right.

169
00:09:05.767 --> 00:09:11.391
So then in our event handler, I said it's
going to be a string in our event emitter.

170
00:09:11.391 --> 00:09:14.599
And then I could do whatever I want
with it, just just as we expected.

171
00:09:18.281 --> 00:09:21.586
All right, I know 100% that event
part can be a little weird.

172
00:09:21.586 --> 00:09:25.523
So, just to kind of more further
illustrate it, that dollar sign event,

173
00:09:25.523 --> 00:09:28.200
angular word,
you put that right there, right.

174
00:09:28.200 --> 00:09:32.572
It's like letting you know angular word,
 dollar sign event, and then it gets

175
00:09:32.572 --> 00:09:36.516
passed into your event handler under
whatever parameter name you said.

