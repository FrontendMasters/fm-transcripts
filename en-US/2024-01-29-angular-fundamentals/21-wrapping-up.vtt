WEBVTT

1
00:00:00.000 --> 00:00:03.363
I won't go super deep into the CLI,
cuz you've been using it today, but

2
00:00:03.363 --> 00:00:04.697
the CLI can do a lot of stuff.

3
00:00:04.697 --> 00:00:08.429
One, you can create applications,
that's a big part of it.

4
00:00:08.429 --> 00:00:14.022
It scaffolds out the code that you
need to create a new application.

5
00:00:14.022 --> 00:00:18.414
And that is super helpful, because
here's a good way to think about it.

6
00:00:18.414 --> 00:00:22.101
If you've ever used Create React App,
the Angular CLI is like that, but

7
00:00:22.101 --> 00:00:25.499
here's the difference between
Create React App and Angular CLI.

8
00:00:25.499 --> 00:00:28.847
People eject Create React App
after a certain time, right?

9
00:00:28.847 --> 00:00:30.907
They are like, okay, I got what I need,
I'm gonna do my own thing,

10
00:00:30.907 --> 00:00:31.639
let's get rid of that.

11
00:00:31.639 --> 00:00:34.579
Angular CLI is just there
with you the whole time,

12
00:00:34.579 --> 00:00:37.179
because it's not only a scaffolding tool.

13
00:00:37.179 --> 00:00:38.420
That's the way to think about it.

14
00:00:38.420 --> 00:00:39.874
There's a lot of things you can do.

15
00:00:39.874 --> 00:00:44.615
You can create resources like we talked
about, you can generate components and

16
00:00:44.615 --> 00:00:48.150
services, just take some of
the busy work out of it for you,

17
00:00:48.150 --> 00:00:50.364
where you're not typing in things.

18
00:00:50.364 --> 00:00:52.578
But you can create a component by hand,
you can.

19
00:00:52.578 --> 00:00:57.409
Or you can just use CLI and say,
yeah, NGGC, component name, and

20
00:00:57.409 --> 00:00:59.237
just be on with your day.

21
00:00:59.237 --> 00:01:03.469
The local dev server, that's another big
part of the Angular CLI, local dev server.

22
00:01:03.469 --> 00:01:07.038
We've been using the Vite as
a dev server the whole day.

23
00:01:07.038 --> 00:01:10.729
It's been fast, it's been updating,
everything has been working for us.

24
00:01:10.729 --> 00:01:13.509
We didn't have to do any
additional installation for that.

25
00:01:13.509 --> 00:01:16.639
And this goes back to where
we're opinionated, right?

26
00:01:16.639 --> 00:01:19.114
We spent a lot of time making decisions.

27
00:01:19.114 --> 00:01:21.883
We have our opinions,
we do listen to the community, but

28
00:01:21.883 --> 00:01:25.521
we're always thinking about how we can
make your experience the best, and

29
00:01:25.521 --> 00:01:27.849
this is what we're thinking
is good right now.

30
00:01:27.849 --> 00:01:29.127
And there's so much more.

31
00:01:29.127 --> 00:01:32.968
You can run your tests,
you can, [SOUND] let's say,

32
00:01:32.968 --> 00:01:36.036
yout build process is run through there.

33
00:01:36.036 --> 00:01:40.900
We have our own Angular ecosystem
package installer, where you NG add,

34
00:01:40.900 --> 00:01:44.741
and then you can add things
that are specific to Angular.

35
00:01:44.741 --> 00:01:47.982
If there's a library for Tailwind or
something that's written for Angular,

36
00:01:47.982 --> 00:01:50.743
you can also do that through the CLI,
all that stuff comes for you.

37
00:01:50.743 --> 00:01:55.898
And the CLI also helps with this thing
called schematics, which are ways

38
00:01:55.898 --> 00:02:01.492
that developers in general can write code
that helps to do a task like migrate.

39
00:02:01.492 --> 00:02:06.138
So let's say you were using our
previous syntax before the add f stuff,

40
00:02:06.138 --> 00:02:10.413
right, we wrote a schematic that
will migrate your code for you.

41
00:02:10.413 --> 00:02:15.191
We wrote a schematic that will migrate
your way from standalone component, sorry,

42
00:02:15.191 --> 00:02:16.884
from modules to standalone.

43
00:02:16.884 --> 00:02:18.022
We write schematics.

44
00:02:18.022 --> 00:02:20.131
With every release,
we write new schematics,

45
00:02:20.131 --> 00:02:23.465
especially if we have a new feature,
we'll write new schematics for you.

46
00:02:23.465 --> 00:02:27.493
But you can also do,
a community can write schematics as well,

47
00:02:27.493 --> 00:02:29.623
that will help us to do even more.

48
00:02:29.623 --> 00:02:31.749
And so that's all a part of it.

49
00:02:31.749 --> 00:02:34.479
One thing I didn't get to today
because Angular, like I said,

50
00:02:34.479 --> 00:02:35.569
there's a lot to learn.

51
00:02:35.569 --> 00:02:39.590
We have a material design
system from Google.

52
00:02:39.590 --> 00:02:43.085
We have an official
library that we maintain.

53
00:02:43.085 --> 00:02:45.252
But on top of the official library,

54
00:02:45.252 --> 00:02:49.373
we also maintain something called
the component development kit,

55
00:02:49.373 --> 00:02:54.230
which has a bunch of unstyled accessible
components like tabs, drop-downs.

56
00:02:54.230 --> 00:02:56.707
I mean, so many things to think about.

57
00:02:56.707 --> 00:02:59.826
All these things that you don't
wanna build yourself, carousels,

58
00:02:59.826 --> 00:03:02.203
they're all accessible,
they're all unstyled.

59
00:03:02.203 --> 00:03:05.050
So you can go in and style them
yourself and just drop them in your

60
00:03:05.050 --> 00:03:08.138
applications right now and
build even more complex applications.

61
00:03:08.138 --> 00:03:12.817
All that stuff is there, so I guess I'm
answering, what do you do next, right?

62
00:03:12.817 --> 00:03:15.972
If you're looking at Angular and
you're like, okay, what else is there?

63
00:03:15.972 --> 00:03:19.536
I showed you literally over
this last six or seven hours.

64
00:03:19.536 --> 00:03:23.835
I showed you just a small sliver
of what's possible with Angular.

65
00:03:23.835 --> 00:03:27.586
But it feels like a lot though,
right, cuz it was a lot.

66
00:03:27.586 --> 00:03:32.531
But that's just the tip of the iceberg,
because Angular is a very mature and

67
00:03:32.531 --> 00:03:37.091
robust framework for applications
that you could never imagine, for

68
00:03:37.091 --> 00:03:39.576
instance, there's an airline KLM.

69
00:03:39.576 --> 00:03:44.906
They serve a half billion users, I think,
per year, and they have an Angular app,

70
00:03:44.906 --> 00:03:49.873
and they stay up to date with the latest
version of Angular, and they just do.

71
00:03:49.873 --> 00:03:55.315
So scalable applications, Cisco is another
company, big Angular applications.

72
00:03:55.315 --> 00:03:59.655
So people click up another Angular place,
people will do angular stuff,

73
00:03:59.655 --> 00:04:01.125
so angular is out there.

74
00:04:01.125 --> 00:04:04.874
But what do you do if you wanna
continue down that journey?

75
00:04:04.874 --> 00:04:06.453
Head over to angular.dev.

76
00:04:06.453 --> 00:04:11.460
If you like the way that I teach, well,
there is two things there for you.

77
00:04:11.460 --> 00:04:16.067
There's some more self-paced exercises
that you can go through in our tutorial

78
00:04:16.067 --> 00:04:19.400
land, on this camera,
they're just text only, right?

79
00:04:19.400 --> 00:04:22.911
But they're self-paced,
the same kind of style, you do that.

80
00:04:22.911 --> 00:04:26.864
I recorded a course on
YouTube that you can do.

81
00:04:26.864 --> 00:04:28.326
It's the same thing we cover here.

82
00:04:28.326 --> 00:04:31.664
But in that one,
we're building a whole application, right?

83
00:04:31.664 --> 00:04:36.056
So everything is compiled together to
build one app versus a bunch of smaller

84
00:04:36.056 --> 00:04:37.850
apps or whatever, so do that.

85
00:04:37.850 --> 00:04:41.078
Stay connected with us if you're
interested in more Angular stuff, right?

86
00:04:41.078 --> 00:04:43.221
Stay connected, get locked in.

87
00:04:43.221 --> 00:04:46.135
You can hang out with
us on the framework or

88
00:04:46.135 --> 00:04:49.395
the place formerly known as Twitter,
right?

89
00:04:49.395 --> 00:04:51.854
The social media [LAUGH] knownTwitter.

90
00:04:51.854 --> 00:04:56.083
Hang on YouTube, we do live streams and
stuff, we hang out there as well, yes.

91
00:04:56.083 --> 00:04:59.614
&gt;&gt; What was the Toolkit that you
were talking about where it's

92
00:04:59.614 --> 00:05:01.294
got the tabs and all?

93
00:05:01.294 --> 00:05:06.425
&gt;&gt; Sure, sure, sure, sure,
let me see if I can show you that.

94
00:05:06.425 --> 00:05:11.715
Angular CDK, okay, so that's what it's
called the Component Development Kit.

95
00:05:11.715 --> 00:05:13.025
So this is what I mean.

96
00:05:13.025 --> 00:05:15.288
Okay, got it, got it, got it, got it.

97
00:05:15.288 --> 00:05:17.655
Can I zoom in a little bit so
it's legible?

98
00:05:17.655 --> 00:05:21.858
Okay, yeah, so you got accordion,
clipboard, coercion, collections,

99
00:05:21.858 --> 00:05:24.574
component harnesses,
dialogs, drag and drop,

100
00:05:24.574 --> 00:05:29.052
which is a big feature that people always
have to implement for some application.

101
00:05:29.052 --> 00:05:32.152
Somebody in your organization is like,
all right, well,

102
00:05:32.152 --> 00:05:35.195
I want the user to be able to
drag this intervention, why?

103
00:05:35.195 --> 00:05:35.990
Nobody wanna do that.

104
00:05:35.990 --> 00:05:40.928
But if you have to, this is built there
for you, right, and you can reorder lists.

105
00:05:40.928 --> 00:05:42.023
This is the thing.

106
00:05:42.023 --> 00:05:46.966
You get your playlist thing and do that.

107
00:05:46.966 --> 00:05:47.659
I don't know.

108
00:05:47.659 --> 00:05:50.909
Can we order this the right
way with the best movies?

109
00:05:50.909 --> 00:05:54.155
&gt;&gt; [LAUGH]
&gt;&gt; I can't think of the machete order

110
00:05:54.155 --> 00:05:56.201
right on top of my head,
but I know there is one.

111
00:05:56.201 --> 00:05:57.791
Anyway, so you got all this stuff.

112
00:05:57.791 --> 00:05:59.817
I'll just say a couple more things.

113
00:05:59.817 --> 00:06:05.926
You got some layout stuff if you wanna
have some programmatic layout stuff,

114
00:06:05.926 --> 00:06:09.947
you wanna do menus,
overlays, tables, a tree.

115
00:06:09.947 --> 00:06:12.826
Sometimes I gotta do that tree stuff,
right?

116
00:06:12.826 --> 00:06:15.655
And you can get trees in here.

117
00:06:15.655 --> 00:06:17.482
Yeah, it's cool, a lot of cool stuff.

118
00:06:17.482 --> 00:06:22.360
Angular CDK and Angular Material is where
we have other components that are styled.

119
00:06:22.360 --> 00:06:23.906
Yes, questions.

120
00:06:23.906 --> 00:06:28.162
&gt;&gt; Are pipes still supported or
are they deprecated?

121
00:06:28.162 --> 00:06:29.692
&gt;&gt; No, pipes are totally supported.

122
00:06:29.692 --> 00:06:33.543
Pipes are a way for
us to transform values, right?

123
00:06:33.543 --> 00:06:37.032
So that first example that we did today,
where we had the dollar sign,

124
00:06:37.032 --> 00:06:40.357
the reason it didn't work is because
they had the template thing.

125
00:06:40.357 --> 00:06:44.317
And normally, you wouldn't put
a dollar sign in your template,

126
00:06:44.317 --> 00:06:47.701
cuz you use a pipe to convert
the value into a dollar, and

127
00:06:47.701 --> 00:06:52.241
it can put the region specific monetary
value there, so you get the right.

128
00:06:52.241 --> 00:06:57.106
If you're doing stuff in Asia, you get
the Yen, or you'll get Canada dollars.

129
00:06:57.106 --> 00:06:59.716
You know what I mean, so
we have pipes that transform data.

130
00:06:59.716 --> 00:07:02.346
They're for data transformation,
totally supported.

131
00:07:02.346 --> 00:07:05.665
I can't talk about everything in one day.

132
00:07:05.665 --> 00:07:07.089
Yeah, Moore?

133
00:07:07.089 --> 00:07:12.026
&gt;&gt; What is the actual line of where
the code is executed when you

134
00:07:12.026 --> 00:07:13.517
put a defer on it?

135
00:07:13.517 --> 00:07:18.571
Is it compiled and ready,
and it pulls it in?

136
00:07:18.571 --> 00:07:20.374
How does it pull it in?

137
00:07:20.374 --> 00:07:23.317
&gt;&gt; How does it pull it in?

138
00:07:23.317 --> 00:07:26.184
Okay, sure, sure, sure,
I understand the question now.

139
00:07:26.184 --> 00:07:31.265
So when you have a defer, so this would be
helpful for a visual, just to show you how

140
00:07:31.265 --> 00:07:36.143
this works, cuz I want you to think that
I'm doing some sleight of hand stuff.

141
00:07:36.143 --> 00:07:40.220
Okay, so this is, let's say, After defer.

142
00:07:42.310 --> 00:07:45.974
Before, okay, just so
you can kinda see what's going on,

143
00:07:45.974 --> 00:07:48.335
I don't care about that formatting.

144
00:07:48.335 --> 00:07:51.316
But you see there's nothing
in there right now, but

145
00:07:51.316 --> 00:07:54.114
everything below it is still rendered,
right?

146
00:07:54.114 --> 00:07:57.375
Then, After defer was below that code,
you see?

147
00:07:57.375 --> 00:08:01.825
So now, if I do low posts,
it's put in the place in the code, man,

148
00:08:01.825 --> 00:08:06.294
that's why you see why I deferred it,
look how many posts it says.

149
00:08:06.294 --> 00:08:09.121
All right, you can see it's
still down at the After defer.

150
00:08:09.121 --> 00:08:11.001
You see, so how does it pull it in?

151
00:08:11.001 --> 00:08:15.327
So that's something at a compile time, we
read your templates, and then we're like,

152
00:08:15.327 --> 00:08:18.661
we can chunk these codes that you
have isolated with your defer blocks.

153
00:08:18.661 --> 00:08:22.017
We could chunk them and put, and
then build separate bundles for those.

154
00:08:22.017 --> 00:08:26.391
And then, when it's satisfied,
the condition is satisfied,

155
00:08:26.391 --> 00:08:30.124
we can then make that request for
it, good questions.

156
00:08:30.124 --> 00:08:35.335
&gt;&gt; What's the difference between
using input transform and pipes?

157
00:08:35.335 --> 00:08:36.449
&gt;&gt; Good question,

158
00:08:36.449 --> 00:08:41.070
what's the difference between using
an input transform and a pipe?

159
00:08:41.070 --> 00:08:44.342
Okay, let's talk about that.

160
00:08:44.342 --> 00:08:49.540
Input transform, so remember your inputs,
that's how you send data into a component.

161
00:08:49.540 --> 00:08:51.051
We agree with that?

162
00:08:51.051 --> 00:08:56.279
Yeah, so what you can do there is you can
specify a function called a transform

163
00:08:56.279 --> 00:09:01.187
that says, whatever the format that
it comes in, I want you to apply this

164
00:09:01.187 --> 00:09:06.025
function to it, and then give me
a different output right out of there.

165
00:09:06.025 --> 00:09:08.874
The reason you use an input
transform versus a pipe,

166
00:09:08.874 --> 00:09:10.893
a pipe can also do transform on data.

167
00:09:10.893 --> 00:09:12.244
But where do you do a pipe?

168
00:09:12.244 --> 00:09:13.770
You do a pipe in a template.

169
00:09:13.770 --> 00:09:17.591
The input is not in the template,
so that's the difference, right?

170
00:09:17.591 --> 00:09:20.956
And when things are rendered,
the template is rendered, but

171
00:09:20.956 --> 00:09:25.504
those inputs are bound before you get to
the template, so that's the difference.

172
00:09:25.504 --> 00:09:30.436
They both can serve similar use cases.

173
00:09:30.436 --> 00:09:33.573
Or sorry, they solve similar problems,
but they are different use cases.

174
00:09:33.573 --> 00:09:34.823
That's the best way to say that.

175
00:09:34.823 --> 00:09:37.001
Similar problems, different use cases.

176
00:09:37.001 --> 00:09:42.551
Mm-hm, mm-hm, if I get more questions,
I'm gonna show a quick example of a pipe

177
00:09:42.551 --> 00:09:47.807
because I've been talking about it and
I feel like people kinda need to see it.

178
00:09:47.807 --> 00:09:53.825
Let's say I have a salary I'm gonna
show you how much I made last year,

179
00:09:53.825 --> 00:09:55.153
don't laugh.

180
00:09:57.757 --> 00:09:58.957
All right, good plan.

181
00:09:58.957 --> 00:10:00.730
All right, so then I got that and

182
00:10:00.730 --> 00:10:04.362
what I can do is I can bring in
this thing called the CurrencyPipe.

183
00:10:06.210 --> 00:10:09.551
And in my template,
I can say whatever the salary was.

184
00:10:09.551 --> 00:10:10.651
Wait, I messed up my salary.

185
00:10:10.651 --> 00:10:15.167
Hold on, yeah.

186
00:10:15.167 --> 00:10:16.993
There we go, okay?

187
00:10:16.993 --> 00:10:19.492
[LAUGH] What did I say I did for a living?

188
00:10:19.492 --> 00:10:20.742
I said I was famous.

189
00:10:20.742 --> 00:10:23.894
All right, so if I got my salary,

190
00:10:23.894 --> 00:10:29.312
if I wanna format that nicely,
and then you do currency.

191
00:10:29.312 --> 00:10:34.196
Okay, so now,
it's taking the salary property and

192
00:10:34.196 --> 00:10:37.311
applying that pipe to it, okay?

193
00:10:37.311 --> 00:10:39.138
They call it a pipe because of this,
right?

194
00:10:39.138 --> 00:10:40.958
The pipe character,
that's why we call it a pipe.

195
00:10:40.958 --> 00:10:45.324
Okay, so now, if we look at our component,
you see it put commas in there.

196
00:10:45.324 --> 00:10:47.390
Hold on me.

197
00:10:47.390 --> 00:10:48.684
You see how nice that is?

198
00:10:48.684 --> 00:10:52.048
It put commas in, comma separators,
it put the dollar sign in, but

199
00:10:52.048 --> 00:10:55.898
I don't wanna say about that in the
beginning because you know anything yet.

200
00:10:55.898 --> 00:10:58.487
So if I showed you that first,
you'd be like, wait, what?

201
00:10:58.487 --> 00:10:59.949
What's the pipe doing?

202
00:10:59.949 --> 00:11:02.347
This is the worst framework I ever used.

203
00:11:02.347 --> 00:11:05.988
But this is what you would do instead
of putting a dollar sign, right, and

204
00:11:05.988 --> 00:11:07.828
then you have a whole bunch of these.

205
00:11:07.828 --> 00:11:11.385
So let's say you don't wanna do currency,

206
00:11:11.385 --> 00:11:16.303
you could also do decimal, okay,
and then I can do decimal.

207
00:11:16.303 --> 00:11:19.863
Let's see,
I forget what the actual thing is.

208
00:11:19.863 --> 00:11:21.969
I forgot, I honestly forget.

209
00:11:21.969 --> 00:11:23.916
Decimal pipe, Angular, okay,

210
00:11:23.916 --> 00:11:28.375
we actually got to look it up because I
forgot what the format is for that one.

211
00:11:28.375 --> 00:11:31.650
Okay, so that didn't help me, hold on.

212
00:11:31.650 --> 00:11:35.353
Right, [LAUGH] this is a format.

213
00:11:35.353 --> 00:11:39.546
So the number of digits,
the number of fraction digits, and so

214
00:11:39.546 --> 00:11:40.902
I can specify this.

215
00:11:40.902 --> 00:11:44.096
And then that way I can say every
number will have two digits, or

216
00:11:44.096 --> 00:11:46.152
you know what I mean, commas and stuff.

217
00:11:46.152 --> 00:11:48.895
So you can get really
involved if you want, yeah.

218
00:11:48.895 --> 00:11:52.975
Good questions, good questions, okay,
let's just keep the party going,

219
00:11:52.975 --> 00:11:53.932
more questions.

220
00:11:53.932 --> 00:11:59.600
&gt;&gt; How would you compare Angular to
some of the other sort of up and

221
00:11:59.600 --> 00:12:02.989
coming frameworks like Nox to Nest?

222
00:12:02.989 --> 00:12:03.748
&gt;&gt; Sure.

223
00:12:03.748 --> 00:12:06.069
&gt;&gt; Cuz I know that there's
a lot of similar features.

224
00:12:06.069 --> 00:12:09.444
&gt;&gt; Yeah, I think what they're
doing with the team at for

225
00:12:09.444 --> 00:12:11.849
sale is doing what Nest is fantastic.

226
00:12:11.849 --> 00:12:15.607
They're definitely redefining
the server side story and

227
00:12:15.607 --> 00:12:18.376
what you can do, which is really special.

228
00:12:18.376 --> 00:12:21.370
And the reason I think it's so
interesting is because of this.

229
00:12:21.370 --> 00:12:25.889
Some of us we've been around long
enough to remember that everything was

230
00:12:25.889 --> 00:12:28.344
server-side at first, everything.

231
00:12:28.344 --> 00:12:30.294
There was no client-side programing.

232
00:12:30.294 --> 00:12:36.381
What you did was this, you had a folder
called CGI bin on a server and

233
00:12:36.381 --> 00:12:39.003
you wrote your code in Perl.

234
00:12:39.003 --> 00:12:41.607
And then guess what the deployment was?

235
00:12:41.607 --> 00:12:45.049
You click your mouse and you drag
the file into your FTP client, and

236
00:12:45.049 --> 00:12:46.967
that's how you deployed your code.

237
00:12:46.967 --> 00:12:48.770
And you rendered everything on the server,

238
00:12:48.770 --> 00:12:50.632
that's how the Internet worked for
so long.

239
00:12:50.632 --> 00:12:53.471
And that's why it was like,
wait a minute, why go back to the server?

240
00:12:53.471 --> 00:12:54.467
Let's stay on the client.

241
00:12:54.467 --> 00:12:57.095
We're already here and make small request.

242
00:12:57.095 --> 00:13:01.294
And that's how we get the whole Ajax and
the rest API stuff being more popular.

243
00:13:01.294 --> 00:13:03.717
Now, we're doing this hybrid thing and

244
00:13:03.717 --> 00:13:06.505
I think what Nest is doing
is just really nice.

245
00:13:06.505 --> 00:13:10.645
They have a really nice thing where you
can define your API endpoints to find

246
00:13:10.645 --> 00:13:14.586
things that only render on the server
with server components, I mean,

247
00:13:14.586 --> 00:13:15.785
really good API's.

248
00:13:15.785 --> 00:13:17.915
I think that for us on the Angular team,

249
00:13:17.915 --> 00:13:21.155
so what will we do to kinda
compare to those types of things?

250
00:13:21.155 --> 00:13:23.107
We're really good at writing Angular code.

251
00:13:23.107 --> 00:13:25.372
That's what we're really, really good at.

252
00:13:25.372 --> 00:13:29.208
And what we wanna do is let
the community around us solve for

253
00:13:29.208 --> 00:13:31.803
whatever next is gonna be for Angular.

254
00:13:31.803 --> 00:13:36.913
One person called Brandon Roberts has
this thing called analog, which is a meta

255
00:13:36.913 --> 00:13:42.267
framework for Angular, where you can do
file-based routing, some other stuff.

256
00:13:42.267 --> 00:13:44.906
And so what we like to do is say, well,

257
00:13:44.906 --> 00:13:49.534
what can we build into Angular that
will make his work much easier?

258
00:13:49.534 --> 00:13:54.423
So he can focus on that part, but
we'll build all the foundation that

259
00:13:54.423 --> 00:13:58.655
makes him able to tap in to
Angular on the server side story.

260
00:13:58.655 --> 00:14:03.210
Because we do have server side rendering
Angular and full hydration where you could

261
00:14:03.210 --> 00:14:07.062
render, ship that code and
pick up where you left off and re-render.

262
00:14:07.062 --> 00:14:08.603
We have all that now.

263
00:14:08.603 --> 00:14:12.295
But people can build off of that though,
and they can make it and

264
00:14:12.295 --> 00:14:13.836
take it to the next level.

265
00:14:13.836 --> 00:14:15.713
Great question, yeah,
but that stuff is great.

266
00:14:15.713 --> 00:14:18.955
I said I think Nest is great, I really do.

267
00:14:18.955 --> 00:14:22.591
I think it's a really brilliant
engineering teams building some really

268
00:14:22.591 --> 00:14:23.255
cool stuff.

269
00:14:23.255 --> 00:14:24.620
I think Astro is great.

270
00:14:24.620 --> 00:14:27.241
That's another one that's very, very good.

271
00:14:27.241 --> 00:14:30.917
Server side, rendering,
you get islands architecture,

272
00:14:30.917 --> 00:14:36.152
which is almost like defer, but not quite
because islands is defined differently.

273
00:14:36.152 --> 00:14:38.914
This is that simple level you
can just do anything like this.

274
00:14:38.914 --> 00:14:41.743
And you can also defer your
routes in Angular, right?

275
00:14:41.743 --> 00:14:45.174
So you can be like, this whole routes,
I don't even want you to ship.

276
00:14:45.174 --> 00:14:47.910
But that's more complexity
at the router file.

277
00:14:47.910 --> 00:14:51.054
Defer is like, in my components, right,

278
00:14:51.054 --> 00:14:54.135
that's the part I'm
still amazed by myself.

279
00:14:54.135 --> 00:14:55.212
At the component level,

280
00:14:55.212 --> 00:14:58.145
I'm like, I don't want this little
part of the component to come.

281
00:14:58.145 --> 00:15:03.041
Because this widget that my team wants me
to include slows my page load down, and

282
00:15:03.041 --> 00:15:04.516
I don't wanna do that.

283
00:15:04.516 --> 00:15:09.345
But I still wanna ship this so it's fast,
and now you have that flexibility, right?

284
00:15:09.345 --> 00:15:12.295
So I think we all learn from each
other to be honest with you.

285
00:15:12.295 --> 00:15:17.176
Here's the thing that people don't
know about all the framework teams.

286
00:15:17.176 --> 00:15:18.833
We all talk.

287
00:15:18.833 --> 00:15:23.533
We've had meetings with Rich Harris,
and we've all shared ideas.

288
00:15:23.533 --> 00:15:27.227
Because what we all care about is moving
the web forward and giving you all,

289
00:15:27.227 --> 00:15:29.994
as developers,
the tools to build your next great app.

290
00:15:29.994 --> 00:15:36.261
&gt;&gt; I think a lot of people
associate Nest with Angular.

291
00:15:36.261 --> 00:15:38.164
I don't know if you could
speak to that at all.

292
00:15:38.164 --> 00:15:41.262
&gt;&gt; I can't because I've never used it,
yeah, but I know what it is.

293
00:15:41.262 --> 00:15:42.919
But yeah, I've never used it.

294
00:15:42.919 --> 00:15:47.375
But I have heard that people
like to use Nest with Angular.

295
00:15:47.375 --> 00:15:50.470
So that's a place to explore if you're
looking for that type of solution.

296
00:15:50.470 --> 00:15:53.700
Yeah, Analog, and then I would say, yeah,

297
00:15:53.700 --> 00:15:57.106
check out Nest for
some really cool solutions.

298
00:15:57.106 --> 00:16:00.876
I'll speak a little bit to this, too,
cuz I think people are interested.

299
00:16:00.876 --> 00:16:05.319
We've gotten a lot of new attention
on Angular, because we've done

300
00:16:05.319 --> 00:16:10.156
our recent brand identity refresh,
new logo, new colors, new website.

301
00:16:10.156 --> 00:16:11.916
So what do we care about now?

302
00:16:11.916 --> 00:16:13.823
What are we gonna be thinking about now?

303
00:16:13.823 --> 00:16:16.202
For us, the future is thinking
about a lot of things.

304
00:16:16.202 --> 00:16:19.363
How can we continue to
improve the server story?

305
00:16:19.363 --> 00:16:23.625
With server-side rendering,
static site generation, maybe potentially

306
00:16:23.625 --> 00:16:28.619
incremental rendering where you can do,
hey, only, or yeah, incremental rendering.

307
00:16:28.619 --> 00:16:32.893
So many different things we have ideas for
a reactivity, right?

308
00:16:32.893 --> 00:16:36.589
So we have signals, and we didn't really
get to spend a lot of time on that, but

309
00:16:36.589 --> 00:16:39.893
we're thinking about how do we make
our whole reactivity system based

310
00:16:39.893 --> 00:16:42.303
around signals to get that
lightning fast update.

311
00:16:42.303 --> 00:16:44.898
That's something we're working toward now,
right?

312
00:16:44.898 --> 00:16:49.365
And then the next thing, we can look
out and say what we think is next, but

313
00:16:49.365 --> 00:16:53.258
we really have to continue to
listen to the community, right?

314
00:16:53.258 --> 00:16:56.025
Continue to see what people want and
what people are needing.

315
00:16:56.025 --> 00:16:59.180
Where's the space going in general and

316
00:16:59.180 --> 00:17:04.064
to see how we can be the best
partners to the web that we can be.

317
00:17:04.064 --> 00:17:08.219
All right, so here's what I'll do, cuz I
know that there were some other questions

318
00:17:08.219 --> 00:17:11.102
that required some further
exploration of programming.

319
00:17:11.102 --> 00:17:15.599
I will update this repository with
the answers to those questions, right?

320
00:17:15.599 --> 00:17:17.110
I didn't forget them, I wrote them down.

321
00:17:17.110 --> 00:17:20.428
I'll update the repository, so if you pull
down the latest code in a couple of days

322
00:17:20.428 --> 00:17:23.717
or so, you'll be able to see, and I'll
write an explanation about what we did.

323
00:17:23.717 --> 00:17:26.861
And if it worked or did not work,
I'll know why it happened.

324
00:17:26.861 --> 00:17:29.503
But I need some more time to
think about it and to experiment.

325
00:17:29.503 --> 00:17:34.431
&gt;&gt; What's the equivalent of feature
modules when it comes to using standalone

326
00:17:34.431 --> 00:17:35.727
components?

327
00:17:35.727 --> 00:17:39.591
&gt;&gt; Good question,
if you wanna do a feature module,

328
00:17:39.591 --> 00:17:44.469
right now there really isn't
an equivalent with standalone.

329
00:17:44.469 --> 00:17:47.479
So here's what a feature module is for
people who may be like, what is that?

330
00:17:47.479 --> 00:17:52.236
So one thing that you could do is you
could put your features, let's say,

331
00:17:52.236 --> 00:17:54.937
login, and you made a module in Angular.

332
00:17:54.937 --> 00:17:59.370
And then you can have everything related
to login all managed by this module and

333
00:17:59.370 --> 00:18:02.474
then you can load that module
if you wanted to, right?

334
00:18:02.474 --> 00:18:06.071
And so without modules,
how do you accomplish that same thing?

335
00:18:06.071 --> 00:18:09.620
Well, you don't necessarily have to stay
without modules because here's the other

336
00:18:09.620 --> 00:18:12.249
thing, if modules work for you,
then you should use modules.

337
00:18:12.249 --> 00:18:13.820
We didn't deprecate modules.

338
00:18:13.820 --> 00:18:15.085
We make them optional,

339
00:18:15.085 --> 00:18:18.704
which is a really big distinction
that we want teams to understand.

340
00:18:18.704 --> 00:18:22.441
It still works, it is still a valid
use case, because there are still

341
00:18:22.441 --> 00:18:26.956
some things I'm sure that people want to
do that are only capable, only possible,

342
00:18:26.956 --> 00:18:28.262
sorry, with modules.

343
00:18:28.262 --> 00:18:30.581
So modules are optional, not deprecated.

344
00:18:30.581 --> 00:18:33.406
&gt;&gt; All right, what are some resources for

345
00:18:33.406 --> 00:18:37.698
component-driven architecture and
testing in Angular?

346
00:18:37.698 --> 00:18:40.448
&gt;&gt; Yeah, check out angular.dev and
angular.io.

347
00:18:40.448 --> 00:18:43.385
angular.dev is in beta,
so we're pushing it up.

348
00:18:43.385 --> 00:18:47.134
If you're watching this in the future,
it's fully graduated to our primary site.

349
00:18:47.134 --> 00:18:51.400
But maybe if you're watching it now,
check out angular.io and

350
00:18:51.400 --> 00:18:54.879
angular.dev, we have guides
written by our team.

351
00:18:54.879 --> 00:18:56.492
We rewrote a bunch of the guides and

352
00:18:56.492 --> 00:18:58.839
a bunch of the content to
talk about those things.

353
00:18:58.839 --> 00:19:02.516
And then if you check out
component-driven architecture,

354
00:19:02.516 --> 00:19:05.112
there's also a Frontend Masters course,

355
00:19:05.112 --> 00:19:09.595
where the principles will be the same
that was already listed on the site.

356
00:19:09.595 --> 00:19:12.315
So check that one out,
because I know there's some sections about

357
00:19:12.315 --> 00:19:14.560
component-driven architecture
that you can learn.

358
00:19:14.560 --> 00:19:19.090
Again, the syntax may be a little bit
different for the templates where you got

359
00:19:19.090 --> 00:19:23.911
your new foreign stuff, but the ideas are
gonna be the same, so check that out too.

360
00:19:23.911 --> 00:19:27.257
And really to say thank you, this has
been a blast, you folks are fantastic.

361
00:19:27.257 --> 00:19:31.045
Thank you so much,
this has been so great, and yeah.

362
00:19:31.045 --> 00:19:33.883
&gt;&gt; [APPLAUSE]
&gt;&gt; Thank you, thank you, thank you,

363
00:19:33.883 --> 00:19:35.971
thank you, thank you, thank you.

