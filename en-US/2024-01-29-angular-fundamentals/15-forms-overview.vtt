WEBVTT

1
00:00:00.059 --> 00:00:02.389
All right, so
how do you gather input from your users?

2
00:00:02.389 --> 00:00:04.855
Because we got routing out the way now,
right?

3
00:00:04.855 --> 00:00:06.899
We got all the pieces, we're so

4
00:00:06.899 --> 00:00:12.148
close to building a full application that
we can just ship and get some VC funding.

5
00:00:12.148 --> 00:00:15.224
We're super close.

6
00:00:16.586 --> 00:00:21.780
All right, now this is an area
where angular is very interesting,

7
00:00:21.780 --> 00:00:23.373
very interesting.

8
00:00:23.373 --> 00:00:27.643
We have a tale of two systems for
our forms.

9
00:00:27.643 --> 00:00:29.303
Okay, a tale of two systems.

10
00:00:29.303 --> 00:00:34.133
We provide you two ways to define forms
and gather input from users in angular.

11
00:00:34.133 --> 00:00:38.486
One way is called template-driven forms.

12
00:00:38.486 --> 00:00:43.661
Template-driven forms where the source
of truth is the actual template.

13
00:00:43.661 --> 00:00:48.201
So you start putting information in
the actual template of your component that

14
00:00:48.201 --> 00:00:51.845
then in your component class,
you can start to access later but

15
00:00:51.845 --> 00:00:55.788
everything is in the template though,
and you'll see what I mean.

16
00:00:55.788 --> 00:00:58.256
Here's why it's great though, right?

17
00:00:58.256 --> 00:01:00.608
It's quick and easy to use.

18
00:01:00.608 --> 00:01:02.310
And well, I won't say quick and easy, but

19
00:01:02.310 --> 00:01:05.211
it's like very straightforward cuz
you don't have to set up anything.

20
00:01:05.211 --> 00:01:07.781
You just start typing stuff and it works.

21
00:01:07.781 --> 00:01:09.313
Really great for small forms.

22
00:01:09.313 --> 00:01:13.166
So if you, let's say you're
gonna do an input, like for

23
00:01:13.166 --> 00:01:15.990
a login, you got username and password.

24
00:01:15.990 --> 00:01:18.301
Two things, use a template-driven form.

25
00:01:18.301 --> 00:01:24.193
No need to go to the more
of robust version.

26
00:01:24.193 --> 00:01:28.204
Downside when you go to do unit testing,
it requires so

27
00:01:28.204 --> 00:01:30.743
much more configuration, okay?

28
00:01:30.743 --> 00:01:32.489
So much more configuration.

29
00:01:32.489 --> 00:01:35.932
And so that's kind of a trade-off,
okay, it's a trade-off.

30
00:01:35.932 --> 00:01:40.219
Then you have what we call reactive forms,
reactive forms.

31
00:01:40.219 --> 00:01:44.828
Now, these are fantastic because it
becomes about the data model that you

32
00:01:44.828 --> 00:01:47.662
define programmatically, the data model.

33
00:01:47.662 --> 00:01:50.776
And then you take that data model,
and you bind it to your form.

34
00:01:50.776 --> 00:01:53.979
Ever does something like some .net,
and why it doesn't .net stuff.

35
00:01:53.979 --> 00:01:57.429
And you know how you define
your form model in .net and

36
00:01:57.429 --> 00:02:00.120
then you can then link
it to your ASP file.

37
00:02:00.120 --> 00:02:04.131
That's what reactive forms
are closer to that idea, okay?

38
00:02:04.131 --> 00:02:08.272
Where you define the model,
you define your validations, everything is

39
00:02:08.272 --> 00:02:12.566
programmatic, and then you go back to
the representation in the template.

40
00:02:12.566 --> 00:02:15.167
Really great cuz you can do typing,
which is great.

41
00:02:15.167 --> 00:02:17.540
If you know that form values
should have a certain type,

42
00:02:17.540 --> 00:02:18.916
you can take advantage of that.

43
00:02:18.916 --> 00:02:23.848
They're reusable because the model's
an object, then you can share that object,

44
00:02:23.848 --> 00:02:27.813
meaning you can define it in some
other file and then just import it.

45
00:02:27.813 --> 00:02:32.673
And be like, I'm gonna import this model
and build a different type of form around

46
00:02:32.673 --> 00:02:37.086
it, but reuse all of the functionality
cuz it's already done for me, right?

47
00:02:37.086 --> 00:02:38.883
Somebody already made it.

48
00:02:38.883 --> 00:02:44.617
And unit testing it just has
a better experience right now, okay?

49
00:02:44.617 --> 00:02:46.704
So let's start with template-driven forms.

50
00:02:46.704 --> 00:02:49.131
Here's a form.

51
00:02:49.131 --> 00:02:50.920
Okay, here's a form.

52
00:02:50.920 --> 00:02:53.849
When you're making your forms,
I see a lot of people do this.

53
00:02:53.849 --> 00:02:57.111
Here's a way to make your forms
a step above out of the gate.

54
00:02:57.111 --> 00:02:59.769
Add labels to all your inputs and
controls.

55
00:02:59.769 --> 00:03:01.287
You know what those labels are for?

56
00:03:01.287 --> 00:03:03.267
Anybody know by any chance?

57
00:03:03.267 --> 00:03:04.249
&gt;&gt; Accessibility.

58
00:03:04.249 --> 00:03:08.381
&gt;&gt; Accessibility, not everybody uses
the Internet the same way, right?

59
00:03:08.381 --> 00:03:11.831
And so why would you cut out millions and
millions of users because you don't wanna

60
00:03:11.831 --> 00:03:13.843
put the labels,
which labels in there, okay?

61
00:03:13.843 --> 00:03:15.578
Make your stuff for everybody.

62
00:03:15.578 --> 00:03:16.730
Good, good, good, good, good.

63
00:03:16.730 --> 00:03:17.643
I'm off my solo box.

64
00:03:17.643 --> 00:03:22.387
Okay, so we've got a label for
username and then we got a label for

65
00:03:22.387 --> 00:03:25.418
password, and then we got a type, okay.

66
00:03:25.418 --> 00:03:29.282
Here's how you can do it with
a template-driven form, all right?

67
00:03:29.282 --> 00:03:32.919
Use this attribute called ng model, okay?

68
00:03:32.919 --> 00:03:37.639
And the model is kinda like based in the
form, it's like based on this element now,

69
00:03:37.639 --> 00:03:39.265
where we got both syntaxes.

70
00:03:39.265 --> 00:03:40.585
Anybody see that right there?

71
00:03:40.585 --> 00:03:43.525
You got your binding and your event, and

72
00:03:43.525 --> 00:03:47.947
that might seem a little tricky
like what's going on, bro?

73
00:03:47.947 --> 00:03:49.667
We didn't make up this name.

74
00:03:49.667 --> 00:03:50.903
Y'all made up this name.

75
00:03:50.903 --> 00:03:53.318
It's called banana in a box.

76
00:03:53.318 --> 00:03:57.279
&gt;&gt; [LAUGH]
&gt;&gt; Yeah, I mean, listen, there's

77
00:03:57.279 --> 00:04:01.220
the streets we're talking, and they
came up with that name, banana in a box.

78
00:04:01.220 --> 00:04:02.772
We did not come up with that.

79
00:04:02.772 --> 00:04:08.426
But it represents property binding and
input binding, so two-way data flow.

80
00:04:08.426 --> 00:04:13.279
And you can use banana in a box on your
own components like an attribute that

81
00:04:13.279 --> 00:04:17.662
you make by following a strict
naming convention that we provide,

82
00:04:17.662 --> 00:04:22.768
then you can use the syntax to take an
input and an output input into one thing.

83
00:04:22.768 --> 00:04:23.723
Okay, you can do it.

84
00:04:23.723 --> 00:04:26.304
You can do it if you want to.

85
00:04:26.304 --> 00:04:28.317
So what this means is this,

86
00:04:28.317 --> 00:04:34.374
user name comes from your component value
cuz you're binding it with the square.

87
00:04:34.374 --> 00:04:37.659
And when it changes,
it gets updated back to your value.

88
00:04:37.659 --> 00:04:40.611
So you could set the value
programmatically with those box, and

89
00:04:40.611 --> 00:04:44.000
then if it changes box, you see,
that's what those two words together,

90
00:04:44.000 --> 00:04:45.384
square parenthesis, okay?

91
00:04:47.569 --> 00:04:50.675
Yeah, okay, so it's probably binding and
event binding.

92
00:04:50.675 --> 00:04:55.983
All right, and then you get your
ngModel for password, same idea.

93
00:04:55.983 --> 00:04:57.933
Okay, same idea.

94
00:04:57.933 --> 00:05:01.562
Now, in our component we
got our forms module,

95
00:05:01.562 --> 00:05:05.300
we got to bring that in so
we can make things work.

96
00:05:05.300 --> 00:05:09.492
And then we got the username and
password, okay?

97
00:05:09.492 --> 00:05:13.724
And so if we go back,
you see the username and password there?

98
00:05:13.724 --> 00:05:15.220
That's what those represent.

99
00:05:17.751 --> 00:05:21.137
But if you were to take away,
so look at this.

100
00:05:21.137 --> 00:05:22.832
Just check the screen out for
me for a second.

101
00:05:22.832 --> 00:05:24.564
You know what's really
interesting about the screen?

102
00:05:24.564 --> 00:05:28.432
How can you tell that this had
anything to do with the form?

103
00:05:28.432 --> 00:05:29.733
&gt;&gt; Forms module.

104
00:05:29.733 --> 00:05:31.805
&gt;&gt; That's really the only hint, right?

105
00:05:31.805 --> 00:05:33.909
But let's say you took away the decorator.

106
00:05:33.909 --> 00:05:37.628
There's nothing to tell you
that this is a form related.

107
00:05:37.628 --> 00:05:40.781
That's why it's template-driven forms.

108
00:05:40.781 --> 00:05:44.681
Because the template has
all the form information.

109
00:05:44.681 --> 00:05:48.804
That's why we call it template-driven
forms cuz the template is driving all your

110
00:05:48.804 --> 00:05:50.069
form information here.

111
00:05:50.069 --> 00:05:53.575
Versus what we'll see with reactive,
it's gonna look very different.

