WEBVTT

1
00:00:00.240 --> 00:00:04.223
&gt;&gt; Eric: So, we left off on the pros and
cons of distributed services and

2
00:00:04.223 --> 00:00:07.510
why they're helpful, why they're not.

3
00:00:07.510 --> 00:00:09.118
Let's talk about the use cases now.

4
00:00:09.118 --> 00:00:13.789
So, distributed service-oriented
architecture is really great for

5
00:00:13.789 --> 00:00:17.460
at least a few of the ones
that I'm gonna be mentioning.

6
00:00:17.460 --> 00:00:23.313
But to be honest with you, I encourage all
of you to apply these principles and these

7
00:00:23.313 --> 00:00:29.318
designs to your own challenges or your
own projects that you're trying to do.

8
00:00:29.318 --> 00:00:31.778
Like I said, it's not just
like a one-size-fits-all here.

9
00:00:31.778 --> 00:00:35.924
I'm not telling you that your best
opportunity of creating an e-commerce

10
00:00:35.924 --> 00:00:39.688
platform is because it's
a service-oriented approach, right?

11
00:00:39.688 --> 00:00:43.453
Even Amazon started as a monolith, right?

12
00:00:43.453 --> 00:00:49.053
It's about understanding where you are and
understanding where you wanna be, right?

13
00:00:49.053 --> 00:00:54.341
So in a distributed service-oriented
design, e-commerce platforms can

14
00:00:54.341 --> 00:01:00.345
be very beneficial to use backend system
architectures that are distributed.

15
00:01:00.345 --> 00:01:04.727
They often need to handle a high volume of
transactions and user interactions which

16
00:01:04.727 --> 00:01:08.655
can efficiently manage throughout
independent microservices.

17
00:01:08.655 --> 00:01:12.613
Now, this is a little bit
spoiler when we get to it, but

18
00:01:12.613 --> 00:01:15.035
this is exactly what Amazon did.

19
00:01:15.035 --> 00:01:19.881
[LAUGH] This is exactly why Amazon is so
powerful.

20
00:01:19.881 --> 00:01:24.721
Is because they slowly started decoupling
these systems giving them to different

21
00:01:24.721 --> 00:01:28.859
teams, and now Amazon is a multi-billion
whatever dollar company,

22
00:01:28.859 --> 00:01:33.015
I don't even know what they're worth now,
but they're worth a lot.

23
00:01:33.015 --> 00:01:37.219
And a big reason for that is coz
they moved fast with microservices.

24
00:01:37.219 --> 00:01:39.922
They realized where
their bottlenecks were.

25
00:01:39.922 --> 00:01:42.481
They gave those teams those ownerships,
and

26
00:01:42.481 --> 00:01:45.252
then they were able to
iterate really quickly.

27
00:01:45.252 --> 00:01:48.002
Another company that was
able to do that is Netflix.

28
00:01:48.002 --> 00:01:52.412
That's another reason why both of these
platforms have such good user experiences

29
00:01:52.412 --> 00:01:53.472
around them.

30
00:01:53.472 --> 00:01:55.968
How many times have you seen
Amazon's storefront go down?

31
00:01:58.664 --> 00:01:59.442
&gt;&gt; Eric: Exactly.

32
00:01:59.442 --> 00:02:01.873
And that's why you keep using it.

33
00:02:01.873 --> 00:02:06.757
It's kinda the quote from the Social
Network, if anyone has seen that movie,

34
00:02:06.757 --> 00:02:11.864
I would imagine most of us had, where,
what's his name, playing Zuckerberg's

35
00:02:11.864 --> 00:02:16.403
character is, do you know what the most
important part of the system is?

36
00:02:16.403 --> 00:02:17.843
Not going down.

37
00:02:17.843 --> 00:02:20.651
Anytime we go down,
we lose customer confidence.

38
00:02:20.651 --> 00:02:25.452
And that's true especially when you're
talking about something that is you wanna

39
00:02:25.452 --> 00:02:30.781
buy and sell items, or you wanna have
a social network or something like that.

40
00:02:30.781 --> 00:02:35.117
If you go down,
you lose the confidence of the user.

41
00:02:35.117 --> 00:02:38.877
And I'm sure each of us here
have dealt with websites or

42
00:02:38.877 --> 00:02:44.541
other platforms that went down once and
you're, I'm not gonna use this again.

43
00:02:44.541 --> 00:02:48.231
Once, that's all it takes, one time,
and you lose a user, right?

44
00:02:48.231 --> 00:02:53.450
So distributed systems can help with that,
especially if you wanna make sure that you

45
00:02:53.450 --> 00:02:58.828
have high availability, high uptime, and
have good processing within your systems.

46
00:02:58.828 --> 00:02:59.938
As I just mentioned,

47
00:02:59.938 --> 00:03:03.869
social media platforms are also
really beneficial to this too.

48
00:03:03.869 --> 00:03:06.814
The various functionalities like posting,
messaging,

49
00:03:06.814 --> 00:03:10.299
notifications can be divided
into separate microservices.

50
00:03:10.299 --> 00:03:14.924
For example, every time you get
a notification on Facebook or TikTok or

51
00:03:14.924 --> 00:03:19.317
whatever, those are all more than
likely handled in the background

52
00:03:19.317 --> 00:03:23.405
asynchronously under through
massive distributed systems so

53
00:03:23.405 --> 00:03:27.434
that those don't block other
interactions on the platform.

54
00:03:27.434 --> 00:03:30.593
Like posting,
you don't want to have to wait for

55
00:03:30.593 --> 00:03:34.302
a post because a notification
is being sent out, right?

56
00:03:34.302 --> 00:03:40.365
And so decoupling those systems makes
it a lot easier to have a more social,

57
00:03:40.365 --> 00:03:43.167
real-time experience, right?

58
00:03:43.167 --> 00:03:44.813
Also streaming services.

59
00:03:44.813 --> 00:03:49.563
So Twitch, Twitch is a microservice and
service-based company.

60
00:03:49.563 --> 00:03:54.431
A lot of the things that provide things
like the streaming capabilities to what

61
00:03:54.431 --> 00:03:58.045
you guys are watching right now
on Twitch is a specific part

62
00:03:58.045 --> 00:04:02.075
of the infrastructure that
processes just the video feed.

63
00:04:02.075 --> 00:04:05.645
You don't want your video being
interrupted by processing requests

64
00:04:05.645 --> 00:04:07.005
on the front end, right?

65
00:04:07.005 --> 00:04:10.112
And so that's why they decouple
these systems and make it so

66
00:04:10.112 --> 00:04:11.915
that they can run independently,

67
00:04:11.915 --> 00:04:16.385
so that they can also work on them
independently, scale them independently.

68
00:04:16.385 --> 00:04:21.358
And in all honesty, scaling video is
a much different beast than scaling

69
00:04:21.358 --> 00:04:24.903
normal HTTP transactions and
things like that.

70
00:04:24.903 --> 00:04:29.865
So it helps with the architecture and
the design of

71
00:04:29.865 --> 00:04:34.719
what you're trying to approach or
trying to do.

72
00:04:34.719 --> 00:04:41.333
I think overall kind of consensus here
is if you're doing a lot of stuff.

73
00:04:41.333 --> 00:04:45.885
If your platform is doing a lot of things,
then microservice and

74
00:04:45.885 --> 00:04:50.542
service distribution or
architecture could be valuable to you.

75
00:04:50.542 --> 00:04:56.340
Because you don't wanna have one system
impact the performance of another system,

76
00:04:56.340 --> 00:04:59.533
which impacts your user experience, right?

77
00:04:59.533 --> 00:05:04.763
So this is why some of the biggest
things out right now, like e-commerce,

78
00:05:04.763 --> 00:05:10.295
again, Amazon, social media platforms
like Facebook or whatever else.

79
00:05:10.295 --> 00:05:15.382
And streaming services like Twitch and
YouTube have these separations and

80
00:05:15.382 --> 00:05:18.853
these different logical
components is to make it so

81
00:05:18.853 --> 00:05:23.146
that they can scale to the amount
of people that are using them.

82
00:05:23.146 --> 00:05:24.892
Twitter as well, I guess,
[LAUGH] I'll mention Twitter.

83
00:05:24.892 --> 00:05:32.210
[LAUGH] One other thing is
also online gaming platforms.

84
00:05:32.210 --> 00:05:37.108
Now I wanna note with this one, and
why I'm not directly including these,

85
00:05:37.108 --> 00:05:42.007
because I know for a fact that there
are a lot of game developers potentially

86
00:05:42.007 --> 00:05:45.983
watching right now that would go,
that is not accurate.

87
00:05:45.983 --> 00:05:49.403
If you're building a game server
that's gonna go to one service and

88
00:05:49.403 --> 00:05:50.853
you're not wrong, right?

89
00:05:50.853 --> 00:05:53.173
You're not wrong, however,

90
00:05:53.173 --> 00:05:58.988
you can build a distributed gaming
platform and it could be beneficial if so.

91
00:05:58.988 --> 00:06:03.231
Even games like what World of Warcraft or
highly MMOs,

92
00:06:03.231 --> 00:06:07.937
multiplayer games,
things that require a lot of servers and

93
00:06:07.937 --> 00:06:13.075
a lot of different regions and
sharding and things like that.

94
00:06:13.075 --> 00:06:17.509
Those do require distribution still
because of the scale that they're trying

95
00:06:17.509 --> 00:06:18.835
to produce for.

96
00:06:18.835 --> 00:06:22.960
And so that is equally its own challenge
of how do you synchronize game state

97
00:06:22.960 --> 00:06:24.016
across services?

98
00:06:24.016 --> 00:06:28.646
How do you make sure that users go to the
right most local server to be able to have

99
00:06:28.646 --> 00:06:30.809
the best player experience?

100
00:06:30.809 --> 00:06:35.417
But they're still distributed in the sense
that they're separating like game logic

101
00:06:35.417 --> 00:06:39.389
from player data from real-time data
interactions and stuff like that.

102
00:06:39.389 --> 00:06:41.893
So even games like Call of Duty, right,

103
00:06:41.893 --> 00:06:47.331
things like that will have a certain
level of distribution in how they work.

104
00:06:47.331 --> 00:06:51.976
But I wouldn't be surprised
if gaming platforms still had

105
00:06:51.976 --> 00:06:56.621
monoliths in specific places
that make sense, right?

106
00:06:56.621 --> 00:06:57.401
Right, okay, cool, yeah.

107
00:06:57.401 --> 00:06:57.961
Just to make sure.

108
00:06:57.961 --> 00:07:02.478
Cuz again,
if you're talking about a video game,

109
00:07:02.478 --> 00:07:06.115
movements are requests to the server.

110
00:07:06.115 --> 00:07:09.270
Every time you move that's a request,
every time you shoot something,

111
00:07:09.270 --> 00:07:12.595
that's a request, every time you do
whatever, that's a request as well.

112
00:07:12.595 --> 00:07:16.883
And scaling that vertically versus
horizontally can be easier to do,

113
00:07:16.883 --> 00:07:20.745
especially if you're trying to
make sure performance is key.

114
00:07:23.023 --> 00:07:25.253
Also, large-scale IoT systems, so

115
00:07:25.253 --> 00:07:29.163
this is something that's kind of
really getting out in the world.

116
00:07:29.163 --> 00:07:33.036
We still haven't really
fully gotten comfortable yet

117
00:07:33.036 --> 00:07:36.570
with IoT systems, but
yeah, any kind of device or

118
00:07:36.570 --> 00:07:40.628
sensor type can be managed
by a dedicated microservice.

119
00:07:40.628 --> 00:07:43.407
If you've ever been curious
about like Alexa and

120
00:07:43.407 --> 00:07:46.030
its system, it's very distributed.

121
00:07:46.030 --> 00:07:50.567
And it's also very microservice-oriented
because of the interactions and

122
00:07:50.567 --> 00:07:51.890
how they happen.

123
00:07:51.890 --> 00:07:54.590
They utilize things like
serverless as well for that.

124
00:07:54.590 --> 00:07:59.600
So each interaction is in its own
nice service or serverless function.

125
00:07:59.600 --> 00:08:04.100
And so again, we're talking about scale,

126
00:08:04.100 --> 00:08:08.731
the key overall theme here is scale,
right?

127
00:08:08.731 --> 00:08:12.581
You're doing a lot, you're working with
a lot, and so distributed services

128
00:08:12.581 --> 00:08:16.036
can really help with that if that's
what you're trying to solve for.

