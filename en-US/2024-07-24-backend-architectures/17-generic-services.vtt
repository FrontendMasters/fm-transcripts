WEBVTT

1
00:00:00.310 --> 00:00:03.961
So, we're gonna define generic
services now, because as I said,

2
00:00:03.961 --> 00:00:07.610
we're gonna talk about both generic and
microservices.

3
00:00:07.610 --> 00:00:11.691
So, generic services often refer to a
component of an application that provides

4
00:00:11.691 --> 00:00:13.860
specific functionality to the platform.

5
00:00:15.410 --> 00:00:20.355
Here's the biggest thing to note about
generic services, generic services could

6
00:00:20.355 --> 00:00:25.382
be part of a monolithic application where
all services run within the same process.

7
00:00:25.382 --> 00:00:28.796
Or it could be a part of
a distributed system where

8
00:00:28.796 --> 00:00:33.725
services may run in separate
processes on separate machines.

9
00:00:33.725 --> 00:00:37.984
So, when we talk about service, we might
not necessarily just be talking about

10
00:00:37.984 --> 00:00:42.643
a literal running service, you might also
be talking about a service design, right?

11
00:00:42.643 --> 00:00:45.356
Things like MVC, patterns and
things like that,

12
00:00:45.356 --> 00:00:47.753
that exist in different
types of back ends.

13
00:00:47.753 --> 00:00:52.672
Where you have things like factories and
other approaches in

14
00:00:52.672 --> 00:00:57.599
the logic that allow you to spin
up a service in the monolith.

15
00:00:57.599 --> 00:01:03.555
Or saying that you wanted to separate that
service into its own running process,

16
00:01:03.555 --> 00:01:08.034
it can be either of those,
it doesn't really matter there.

17
00:01:08.034 --> 00:01:14.127
So, this is what a basic distributed
generic service architecture looks like,

18
00:01:14.127 --> 00:01:17.454
and if we recall what we had before,
right?

19
00:01:17.454 --> 00:01:21.801
We had our frontend service, and
our backend service in our monolith, and

20
00:01:21.801 --> 00:01:24.150
then that went to the database, right?

21
00:01:25.260 --> 00:01:30.532
Who can tell me by looking at this, what
benefits we get by going to this approach

22
00:01:30.532 --> 00:01:36.060
from the monolith approach, of just simply
separating the frontend and backend?

23
00:01:36.060 --> 00:01:38.290
What are some benefits we get from this?

24
00:01:39.684 --> 00:01:41.424
&gt;&gt; Speaker 1: Scale them separately.

25
00:01:41.424 --> 00:01:42.294
&gt;&gt; Eric Reinert: Yep.

26
00:01:42.294 --> 00:01:43.414
&gt;&gt; Speaker 2: Fault tolerance.

27
00:01:43.414 --> 00:01:44.003
&gt;&gt; Eric Reinert: Yep.

28
00:01:46.965 --> 00:01:48.894
&gt;&gt; Speaker 2: And easier to deploy and
manage, I guess.

29
00:01:48.894 --> 00:01:50.864
&gt;&gt; Eric Reinert: Exactly, yeah,
those are pretty much it.

30
00:01:50.864 --> 00:01:54.203
Yeah, so you can scale your
frontend services separately,

31
00:01:54.203 --> 00:01:56.764
right, you can have
better fault tolerance.

32
00:01:56.764 --> 00:01:59.818
So, for example, if your frontend
only needs a couple of replicas or

33
00:01:59.818 --> 00:02:02.452
something like that but
then your backend needs a ton more,

34
00:02:02.452 --> 00:02:05.686
you can have different fault
requirements and things like that.

35
00:02:05.686 --> 00:02:10.086
And you can now have a frontend team that
works in their own world while having

36
00:02:10.086 --> 00:02:13.486
a backend team that works
in their own world as well.

37
00:02:13.486 --> 00:02:16.528
And going back to the library and
stuff like that,

38
00:02:16.528 --> 00:02:19.576
sharing it between the frontend and
the backend.

39
00:02:21.064 --> 00:02:25.743
This approach also makes it so
that you start thinking out of the box,

40
00:02:25.743 --> 00:02:28.254
how can we serve each other, right?

41
00:02:28.254 --> 00:02:31.431
Instead of thinking, well,
this just works here,

42
00:02:31.431 --> 00:02:35.866
you start thinking more of I'm serving or
providing a service to the frontend,

43
00:02:35.866 --> 00:02:38.864
how do we do that as
efficiently as possible, right?

44
00:02:38.864 --> 00:02:42.071
You don't really think about that as
much when you're in a monolith because

45
00:02:42.071 --> 00:02:44.858
everything's tied together,
it's all in one place.

46
00:02:44.858 --> 00:02:48.886
And so, you really just kind of, again,
going back to the Next.js example,

47
00:02:48.886 --> 00:02:52.917
you're literally rendering your backend
logic with your frontend view, and

48
00:02:52.917 --> 00:02:54.398
then you show the frontend.

49
00:02:54.398 --> 00:02:59.928
But with this, you really do start
having these teams work together and

50
00:02:59.928 --> 00:03:04.538
talking about, okay,
well instead of it being a library,

51
00:03:04.538 --> 00:03:09.905
I'd rather make this be something
like a restful endpoint, right?

52
00:03:09.905 --> 00:03:15.075
That maybe has its own schema and
its own request flow.

53
00:03:15.075 --> 00:03:18.900
And then that makes it so
that the responsibility of controlling and

54
00:03:18.900 --> 00:03:23.529
maintaining that endpoint relies on the
backend team, and then the frontend team

55
00:03:23.529 --> 00:03:27.379
just simply focuses on implementing
that logic into the frontend.

56
00:03:30.483 --> 00:03:33.174
&gt;&gt; Eric Reinert: Also,
what's another thing to notice here,

57
00:03:33.174 --> 00:03:36.901
what's one other thing we could
notice about this architecture

58
00:03:36.901 --> 00:03:40.364
compared to the monolith going
back to the security thing?

59
00:03:43.242 --> 00:03:45.132
&gt;&gt; Speaker 3: There's more space
between the frontend where people

60
00:03:45.132 --> 00:03:46.961
will actually be-
&gt;&gt; Eric Reinert: Exactly.

61
00:03:46.961 --> 00:03:50.010
&gt;&gt; Speaker 3: And you're fancy-
&gt;&gt; Eric Reinert: Exactly, yeah, so say for

62
00:03:50.010 --> 00:03:53.929
example, somebody decides
to DDoS your frontend and

63
00:03:53.929 --> 00:03:59.173
they don't hit a route that
potentially accesses the database.

64
00:03:59.173 --> 00:04:03.500
In the monolith approach, it don't matter,
it's still gonna potentially exhaust those

65
00:04:03.500 --> 00:04:07.166
connections, it still could potentially
affect other parts of the system.

66
00:04:08.206 --> 00:04:12.509
Whereas this clear separation in
this clear isolation, makes it so

67
00:04:12.509 --> 00:04:15.386
that the backend only
talks to the database.

68
00:04:15.386 --> 00:04:19.461
The frontend doesn't need to have
access to it, it can't be exploited and

69
00:04:19.461 --> 00:04:22.161
access through it and things like that.

70
00:04:22.161 --> 00:04:26.612
So, this separation here does start to
even give you some of that security out

71
00:04:26.612 --> 00:04:30.308
of the box where you just don't
have to be worried as much about,

72
00:04:30.308 --> 00:04:34.891
is my frontend going to give access to
my database, or something like that.

73
00:04:34.891 --> 00:04:39.652
This is genuinely one of the reasons
why I prefer a distributed approach

74
00:04:39.652 --> 00:04:42.760
than a monolith, especially for frontends.

75
00:04:42.760 --> 00:04:47.306
Because I want to know that my
frontend will never impact my backend

76
00:04:47.306 --> 00:04:51.020
unless I explicitly tell it it should,
right?

77
00:04:51.020 --> 00:04:57.380
And a good example of this is login pages,
right, login components, right?

78
00:04:57.380 --> 00:04:58.535
You might have it so

79
00:04:58.535 --> 00:05:03.386
that your logins on your front frontend
fail fast if you're unauthenticated.

80
00:05:03.386 --> 00:05:07.451
But you might need to have more logic in
a monolith for them to share that,

81
00:05:07.451 --> 00:05:10.741
which means you're still
putting stress on the database.

82
00:05:10.741 --> 00:05:13.666
Versus potentially just
having a caching service and

83
00:05:13.666 --> 00:05:15.619
making that much more performant.

