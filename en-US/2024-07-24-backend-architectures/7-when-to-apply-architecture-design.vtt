WEBVTT

1
00:00:00.400 --> 00:00:03.760
&gt;&gt; Erik Reinert: Now we're
gonna go through the when.

2
00:00:03.760 --> 00:00:08.440
I actually really liked this GIF [LAUGH]
because I felt like it was a good example

3
00:00:08.440 --> 00:00:12.768
of when you should do something,
especially survivability, right?

4
00:00:12.768 --> 00:00:18.255
And a lot of this next section is
really supposed to help you understand

5
00:00:18.255 --> 00:00:22.998
when you should do some of
the things to build these designs or

6
00:00:22.998 --> 00:00:26.355
when or you should or when you shouldn't.

7
00:00:26.355 --> 00:00:30.299
So now we're gonna get into when to
use backend architecture designs.

8
00:00:30.299 --> 00:00:33.441
So again, we're gonna start
out with a quote from AI.

9
00:00:33.441 --> 00:00:38.841
I did not know AI was as prolific
as it is, but I'm here for it.

10
00:00:38.841 --> 00:00:43.336
When I asked about the how you would
summarize this section it said

11
00:00:43.336 --> 00:00:46.940
the right time to act is not simply found,
but felt.

12
00:00:46.940 --> 00:00:51.287
It arises at the intersection of
preparation and intuition where

13
00:00:51.287 --> 00:00:55.870
opportunities whispered becomes too
compelling to ignore [LAUGH] And

14
00:00:55.870 --> 00:01:00.782
I loved how whimsical that sounded but
it's actually very true, right?

15
00:01:00.782 --> 00:01:05.113
A lot of the times when you're
trying to implement something,

16
00:01:05.113 --> 00:01:09.622
it might be a gut feeling of like,
okay, this isn't gonna work.

17
00:01:09.622 --> 00:01:15.127
I know this isn't gonna work,
or it might be intuition.

18
00:01:15.127 --> 00:01:20.484
But a lot of understanding
of that complexity.

19
00:01:20.484 --> 00:01:25.388
All those other things we talked about
before and when to use them is also really

20
00:01:25.388 --> 00:01:30.458
important, especially when you're at
a company trying to make large changes.

21
00:01:30.458 --> 00:01:35.054
Or even in an interview and somebody is,
when would you do something?

22
00:01:35.054 --> 00:01:40.446
It can be a really,
really quick red flag to an interviewer.

23
00:01:40.446 --> 00:01:42.072
If you go like, why would you use this?

24
00:01:42.072 --> 00:01:45.752
And they're like, whoa, hold on,
pump the brakes, man, like,

25
00:01:45.752 --> 00:01:47.250
we're not even there yet.

26
00:01:47.250 --> 00:01:52.461
And having that nuance can help you again
get the job that you're looking for

27
00:01:52.461 --> 00:01:56.380
or help you make the change
you're trying to make, yep.

28
00:01:56.380 --> 00:02:00.294
&gt;&gt; Student: Yeah, I had to reject a
candidate that I really liked because that

29
00:02:00.294 --> 00:02:01.654
was like everything.

30
00:02:01.654 --> 00:02:02.252
Yeah.

31
00:02:02.252 --> 00:02:05.872
The solution was ready and
it was this tool.

32
00:02:05.872 --> 00:02:06.789
&gt;&gt; Erik Reinert: Yeah.
&gt;&gt; Student: Absolutely.

33
00:02:06.789 --> 00:02:08.229
&gt;&gt; Erik Reinert: Yeah.
&gt;&gt; Student: It's like,

34
00:02:08.229 --> 00:02:10.090
I really like you, but.

35
00:02:10.090 --> 00:02:12.456
&gt;&gt; Erik Reinert: Yeah,
it's scary, it's scary.

36
00:02:12.456 --> 00:02:16.229
You kinda look at it and
you go like, do I trust this person?

37
00:02:16.229 --> 00:02:17.579
Because I don't know.

38
00:02:17.579 --> 00:02:21.930
And like you and I have even talked about
this before, Mark, with some of the like,

39
00:02:21.930 --> 00:02:25.178
just to go back quickly,
I proposed the other course as well.

40
00:02:25.178 --> 00:02:30.086
The platform directory course,
and I remember you were like,

41
00:02:30.086 --> 00:02:33.987
I don't know what this is,
even accomplishing.

42
00:02:33.987 --> 00:02:39.647
[LAUGH] And yeah, you have to, again,
part of building these textures and

43
00:02:39.647 --> 00:02:45.507
and doing these things is making sure
that you're moving with the company.

44
00:02:45.507 --> 00:02:49.965
Making sure that you are making
everyone feel comfortable.

45
00:02:49.965 --> 00:02:54.948
That you're not trying to just overload
what your goals are with maybe

46
00:02:54.948 --> 00:02:57.234
what the company's goals are.

47
00:02:57.234 --> 00:03:02.815
And yeah having that ability to
act when the time is right rather

48
00:03:02.815 --> 00:03:09.892
than making it your job to constantly
change things is a much different nuance.

49
00:03:09.892 --> 00:03:13.032
Okay, so
when to use backend architecture designs?

50
00:03:13.032 --> 00:03:16.845
We're gonna talk about understanding when,

51
00:03:16.845 --> 00:03:21.251
the factors of when, and
considering when, right?

52
00:03:21.251 --> 00:03:23.158
So let's get into it.

53
00:03:23.158 --> 00:03:26.704
So understanding when to use
backend architecture designs.

54
00:03:26.704 --> 00:03:30.856
The first one probably makes
a lot of sense to most of you,

55
00:03:30.856 --> 00:03:33.637
which is when starting a new project.

56
00:03:33.637 --> 00:03:35.392
Does anyone here know the term greenfield?

57
00:03:35.392 --> 00:03:36.906
What does that mean?

58
00:03:36.906 --> 00:03:38.115
Can somebody give it to me?

59
00:03:38.115 --> 00:03:39.060
Anybody?

60
00:03:39.060 --> 00:03:41.783
&gt;&gt; Student: Just starting something
brand new like from scratch.

61
00:03:41.783 --> 00:03:42.406
&gt;&gt; Erik Reinert: Exactly.

62
00:03:42.406 --> 00:03:43.988
&gt;&gt; Student: Not evolving
an existing thing.

63
00:03:43.988 --> 00:03:44.871
&gt;&gt; Erik Reinert: Exactly, yeah.

64
00:03:44.871 --> 00:03:49.292
So when you're talking about a greenfield
scenario, you're talking about

65
00:03:49.292 --> 00:03:52.975
something that doesn't really
have impact anywhere, right?

66
00:03:52.975 --> 00:03:54.416
Why is this valuable?

67
00:03:54.416 --> 00:03:59.412
Well, because you don't have,
like you lose a or not lose, but you,

68
00:03:59.412 --> 00:04:05.023
you get rid of a lot of the challenges of,
well, why should we do this, right?

69
00:04:05.023 --> 00:04:06.582
How does this work?

70
00:04:06.582 --> 00:04:08.821
How can we make this integrated into this?

71
00:04:08.821 --> 00:04:13.054
If there's a completely like going back to
the rules thing that that person mentioned

72
00:04:13.054 --> 00:04:14.190
before, right?

73
00:04:14.190 --> 00:04:18.680
It may be easier to implement that rule
system when that rule system doesn't touch

74
00:04:18.680 --> 00:04:20.056
anything else, right?

75
00:04:20.056 --> 00:04:23.976
Or it's completely new and
it's a completely new part of the system

76
00:04:23.976 --> 00:04:28.116
that's never really been explored before,
or things like that.

77
00:04:28.116 --> 00:04:34.486
A new project can help you
have opportunities to explore,

78
00:04:34.486 --> 00:04:38.647
try new things and build new systems.

79
00:04:38.647 --> 00:04:42.801
Even again, Mark, what you were
saying with the candidate, right?

80
00:04:42.801 --> 00:04:46.547
They might have looked at a lot of that as
greenfield because they weren't here yet.

81
00:04:46.547 --> 00:04:50.633
They might not have
understood all the already

82
00:04:50.633 --> 00:04:55.043
technical foundation you've created,
right?

83
00:04:55.043 --> 00:04:58.983
And so that could be the difference
between somebody coming in and

84
00:04:58.983 --> 00:05:01.499
changing everything right out the gate.

85
00:05:01.499 --> 00:05:04.786
To coming in and actually
integrating with those systems and

86
00:05:04.786 --> 00:05:07.619
working on growing what already exists.

87
00:05:07.619 --> 00:05:11.561
So greenfield can be a really
good opportunity for that, but

88
00:05:11.561 --> 00:05:15.593
you have to know when that is
actually a greenfield scenario.

89
00:05:15.593 --> 00:05:19.505
&gt;&gt; Student: Yeah, I think a lot of
companies are probably like generally

90
00:05:19.505 --> 00:05:24.809
broken and looking for a candidate coming
in to solve like particular solutions.

91
00:05:24.809 --> 00:05:27.868
But there are cases where
the system works great.

92
00:05:27.868 --> 00:05:30.276
&gt;&gt; Erik Reinert: Yeah.
&gt;&gt; Student: It's scaling wonderfully and

93
00:05:30.276 --> 00:05:32.886
people are loving it, so it does happen.

94
00:05:32.886 --> 00:05:33.646
&gt;&gt; Erik Reinert: Yeah.

95
00:05:33.646 --> 00:05:35.447
&gt;&gt; Student: But I think that's, yeah.

96
00:05:35.447 --> 00:05:37.199
&gt;&gt; Erik Reinert: Yeah, no, absolutely,

97
00:05:37.199 --> 00:05:42.707
having that understanding of when it's
greenfield as well is really important.

98
00:05:42.707 --> 00:05:47.000
Again, if you come into
something with a fresh mind, but

99
00:05:47.000 --> 00:05:52.732
you don't have the context, it might
not actually be greenfield, right?

100
00:05:52.732 --> 00:05:55.795
And that can make you look bad,
in all honesty,

101
00:05:55.795 --> 00:05:59.732
that means that you didn't
do your proper research.

102
00:05:59.732 --> 00:06:03.474
It means that you didn't think about all
the already existing factors, right?

103
00:06:03.474 --> 00:06:06.748
And if somebody can come into a
conversation and easily be like, well, no,

104
00:06:06.748 --> 00:06:07.527
this isn't new.

105
00:06:07.527 --> 00:06:13.171
[LAUGH] Like we've already got all
the like, what about all this over here?

106
00:06:13.171 --> 00:06:18.138
And you didn't consider and be ready for
that kind of discussion, then people

107
00:06:18.138 --> 00:06:23.570
are gonna lose face in what you're trying
to accomplish or what you're trying to do.

108
00:06:23.570 --> 00:06:28.987
So knowing when it's a greenfield
scenario can be important,

109
00:06:28.987 --> 00:06:34.416
can be helpful, but
having that context is really important.

110
00:06:34.416 --> 00:06:39.573
So the next one is understanding when
it's scaling an existing system.

111
00:06:39.573 --> 00:06:43.090
Because system designs can help use
to identify bottlenecks in areas for

112
00:06:43.090 --> 00:06:43.846
improvement.

113
00:06:43.846 --> 00:06:47.040
So again, going back to what
we were just talking about,

114
00:06:47.040 --> 00:06:49.643
maybe most of the system works great,
right?

115
00:06:49.643 --> 00:06:52.795
Maybe everything's good, everyone's happy,

116
00:06:52.795 --> 00:06:57.454
we're making money, developers
are working and they're productive.

117
00:06:57.454 --> 00:07:01.336
But you might notice one
particular problem, right?

118
00:07:01.336 --> 00:07:07.954
And you go, okay, well, I'm not gonna
scale my focus back out to this huge view.

119
00:07:07.954 --> 00:07:11.908
I'm just gonna focus on this one
particular problem and try and

120
00:07:11.908 --> 00:07:15.499
build a good architecture or
system design around that.

121
00:07:15.499 --> 00:07:20.163
This is what I do a lot,
to be clear, right?

122
00:07:20.163 --> 00:07:21.553
At the company I work at,

123
00:07:21.553 --> 00:07:24.877
a lot of the times,
we've already got something in place.

124
00:07:24.877 --> 00:07:28.927
And more often than not, somebody at my
company will be, well, what about this?

125
00:07:28.927 --> 00:07:29.914
What about that?

126
00:07:29.914 --> 00:07:32.998
And you will get to a point
after being at a company and

127
00:07:32.998 --> 00:07:37.499
developing systems for years and
iterating over that a long period of time.

128
00:07:37.499 --> 00:07:40.646
Most of those problems might
already be solved, right?

129
00:07:40.646 --> 00:07:44.806
However, say these solutions have also

130
00:07:44.806 --> 00:07:49.587
introduced unexpected challenges, right?

131
00:07:49.587 --> 00:07:53.513
A good example of this is,
say for example,

132
00:07:53.513 --> 00:07:58.987
whenever you have a user sign
up it sends an email, right?

133
00:07:58.987 --> 00:08:03.361
More often than not when people will
create that, they'll put the email request

134
00:08:03.361 --> 00:08:07.625
in with the sign up request, which means
that that request takes even longer.

135
00:08:07.625 --> 00:08:11.607
Because now it's gotta go out to your
email service, send that message, wait for

136
00:08:11.607 --> 00:08:13.641
that message to come back with a success.

137
00:08:13.641 --> 00:08:16.075
And so when somebody clicks sign up,
right,

138
00:08:16.075 --> 00:08:20.381
they're now sitting there waiting for
like maybe five, 10, 15 seconds.

139
00:08:20.381 --> 00:08:25.070
And just staring at a loading bar or
something like that, or a loader, right?

140
00:08:25.070 --> 00:08:28.009
That is an opportunity of a bottleneck,
where it's to say,

141
00:08:28.009 --> 00:08:29.578
how can we get users in quicker?

142
00:08:29.578 --> 00:08:32.473
How can we get them using
the platform faster, right?

143
00:08:32.473 --> 00:08:36.266
And maybe there's a way we can introduce
things like asynchronicity, right?

144
00:08:36.266 --> 00:08:38.482
Or separating that logic out so

145
00:08:38.482 --> 00:08:42.585
that the business gets to get
to where they want quicker.

146
00:08:42.585 --> 00:08:44.721
And I'm gonna be honest with you,

147
00:08:44.721 --> 00:08:49.152
you will always be able to sell something
if you can sell it to business.

148
00:08:49.152 --> 00:08:52.806
Engineering is always gonna have a high
opinion, but at the end of the day,

149
00:08:52.806 --> 00:08:56.750
the people who literally control the money
of the company are normally the people

150
00:08:56.750 --> 00:08:58.503
who will have the ending decision.

151
00:08:58.503 --> 00:09:01.174
And if you should or
should not do something.

152
00:09:01.174 --> 00:09:05.215
And so I've dealt with that a lot
where I've wanted to make a change and

153
00:09:05.215 --> 00:09:08.998
then I've approached it from
a technical perspective, right?

154
00:09:08.998 --> 00:09:13.904
And gotten it thrown away, but then gone
back to it and been like, well wait, no,

155
00:09:13.904 --> 00:09:16.756
this also gets people onto
the platform quicker.

156
00:09:16.756 --> 00:09:19.396
It gets them more involved with
the features that we want faster,

157
00:09:19.396 --> 00:09:22.675
things like that, then business will
be like, yeah, yeah, absolutely.

158
00:09:22.675 --> 00:09:25.552
Yeah, yeah, we like that,
yes, yes, please.

159
00:09:25.552 --> 00:09:30.752
So existing systems and
figuring out where you can identify

160
00:09:30.752 --> 00:09:36.058
challenges to or
problems to improve can be really helpful.

161
00:09:36.058 --> 00:09:39.643
So understanding when there are complex
problems that need to be broken into

162
00:09:39.643 --> 00:09:40.602
manageable parts.

163
00:09:40.602 --> 00:09:44.871
Going back to the original workflow or
workflow I showed you of

164
00:09:44.871 --> 00:09:50.241
the Quark V1 infrastructure,
that's a good example of that, right?

165
00:09:50.241 --> 00:09:55.499
For example, if I was to say, okay,
we wanna use serverless, but honestly,

166
00:09:55.499 --> 00:10:00.280
I don't wanna spend the man hours of
having a team manage the open source

167
00:10:00.280 --> 00:10:05.088
software, excuse me, the open source
software that we used, right?

168
00:10:05.088 --> 00:10:08.318
Going back to the question of when
to use open source and when not,

169
00:10:08.318 --> 00:10:10.329
this is a prime example of that, right?

170
00:10:10.329 --> 00:10:15.238
Where we're spending 10,
20 hours of engineering hours a week when

171
00:10:15.238 --> 00:10:18.305
we could just pay somebody
to take care of it.

172
00:10:18.305 --> 00:10:22.963
We could just literally have as a cloud
provider, provide that as a service,

173
00:10:22.963 --> 00:10:27.048
and that is, that's also decoupling
the complexity of a system and

174
00:10:27.048 --> 00:10:30.295
really just giving that
complexity to someone else.

175
00:10:30.295 --> 00:10:35.187
Saying you've got the engineers to do it,
you've got the time to do it, so

176
00:10:35.187 --> 00:10:40.488
why don't you take care of it, and that
can be a part of the architecture rework.

177
00:10:40.488 --> 00:10:42.703
Where it say like, all right,
well, we're gonna rip this out.

178
00:10:42.703 --> 00:10:46.054
We're gonna have this go to here now,

179
00:10:46.054 --> 00:10:50.779
and then,
there you go you have a new design, right?

180
00:10:50.779 --> 00:10:54.230
Understanding when there is a need for
improved efficiency and

181
00:10:54.230 --> 00:10:55.606
productivity, right?

182
00:10:55.606 --> 00:10:59.720
And a good example of this is
understanding not just a bottleneck,

183
00:10:59.720 --> 00:11:03.835
but understanding where developers
have multiple touch points or

184
00:11:03.835 --> 00:11:05.904
data has multiple touch points.

185
00:11:05.904 --> 00:11:11.403
[LAUGH] I had somebody in my chat
one day come in and say that,

186
00:11:11.403 --> 00:11:18.826
[LAUGH] I can't believe I'm gonna mention
this, that UUIDs are not scalable.

187
00:11:18.826 --> 00:11:22.828
Can anyone guess what they meant by that?

188
00:11:22.828 --> 00:11:24.917
&gt;&gt; Student: You run out
of them eventually.

189
00:11:24.917 --> 00:11:26.282
&gt;&gt; Erik Reinert: No, no.

190
00:11:26.282 --> 00:11:30.679
So when we're talking about like users,
for example, right?

191
00:11:30.679 --> 00:11:33.609
If you do nothing but
user IDs for everything,

192
00:11:33.609 --> 00:11:37.079
you're gonna have to need
a lookup with that, right?

193
00:11:37.079 --> 00:11:41.445
And if you're in a distributed system, and
you have to do multiple lookup, between

194
00:11:41.445 --> 00:11:45.762
services, you're doing the same request
over and over and over and over and over.

195
00:11:45.762 --> 00:11:47.342
And then you've got data or

196
00:11:47.342 --> 00:11:51.887
logic that has to be updated in each one
of those systems over and over and over.

197
00:11:51.887 --> 00:11:55.465
And I was actually interviewing at
a fang company, I'll put it that way,

198
00:11:55.465 --> 00:11:58.568
and that was a problem
they were trying to solve.

199
00:11:58.568 --> 00:12:02.729
They were at a huge scale, but
they constantly had to do lookups

200
00:12:02.729 --> 00:12:07.692
to user information for like login,
authentication, things like that.

201
00:12:07.692 --> 00:12:12.782
And that's what that person actually
meant, but understanding, right?

202
00:12:12.782 --> 00:12:14.682
if you need that efficiency,

203
00:12:14.682 --> 00:12:18.634
if that is something that's
a bottleneck to you or not, can be

204
00:12:18.634 --> 00:12:23.125
another opportunity of understanding
when you can make that change.

205
00:12:23.125 --> 00:12:26.759
Maybe instead of having to do
multiple lookups in multiple places,

206
00:12:26.759 --> 00:12:28.681
you're passing context, right?

207
00:12:28.681 --> 00:12:33.773
So you have context that passes between
services that gives more information

208
00:12:33.773 --> 00:12:38.644
about the user so there's less lookups and
less stress put on the system.

209
00:12:38.644 --> 00:12:42.798
So efficiency,
that also comes productivity, right?

210
00:12:42.798 --> 00:12:47.356
A good example of that is say developers,
when they go to make a change to a system,

211
00:12:47.356 --> 00:12:51.337
they have to update three places,
four places, five places, right?

212
00:12:51.337 --> 00:12:55.290
That's even very common as well,
because more often than not,

213
00:12:55.290 --> 00:12:57.350
developers copy and paste code.

214
00:12:57.350 --> 00:13:01.629
Avoiding that so that productivity
can be smoother, whether it be,

215
00:13:01.629 --> 00:13:04.521
okay, well we know all
the user stuff is here.

216
00:13:04.521 --> 00:13:06.872
Maybe we need a user service, right?

217
00:13:06.872 --> 00:13:11.033
Maybe we need a way so that the user
all logic is all together and

218
00:13:11.033 --> 00:13:16.170
then we can have another service
handling transactions or something else.

219
00:13:16.170 --> 00:13:20.557
That is not just productivity for
the infrastructure or the, what is it,

220
00:13:20.557 --> 00:13:25.726
not the infrastructure, the services and
their scalability as well as performance,

221
00:13:25.726 --> 00:13:29.368
but it's also the performance
of your developers, right?

222
00:13:29.368 --> 00:13:32.608
Having one team focused on one tool or
one service, and

223
00:13:32.608 --> 00:13:34.660
that's all they have to focus on.

224
00:13:34.660 --> 00:13:37.075
And that kinda steps into the service or

225
00:13:37.075 --> 00:13:40.231
microservice design that
companies move toward.

226
00:13:40.231 --> 00:13:45.424
Because as you grow bigger and bigger,
you wanna separate those teams out so

227
00:13:45.424 --> 00:13:49.645
that they have a narrow focus
on what they're working on, and

228
00:13:49.645 --> 00:13:53.154
then those components get
glued together easily.

229
00:13:53.154 --> 00:13:57.698
And this one's also really important too,
which is when there's a need for

230
00:13:57.698 --> 00:14:00.825
better communication among team members,
right?

231
00:14:00.825 --> 00:14:05.709
Maybe there's something that got
implemented that never was thought through

232
00:14:05.709 --> 00:14:07.338
or never got documented.

233
00:14:07.338 --> 00:14:11.524
Maybe there's already a system design
that exists and is in there, but

234
00:14:11.524 --> 00:14:14.680
it's nowhere to be found in documentation,
right?

235
00:14:14.680 --> 00:14:18.942
And this can be something as simple
as going out, looking at that system,

236
00:14:18.942 --> 00:14:21.623
documenting seeing it wire,
framing it out so

237
00:14:21.623 --> 00:14:26.255
that people don't have to depend on
things like tribal knowledge or guessing.

238
00:14:26.255 --> 00:14:30.388
And it makes it easier to understand
the communication, especially for

239
00:14:30.388 --> 00:14:32.841
things like handoffs and stuff like that.

240
00:14:32.841 --> 00:14:36.428
So designs can be helpful
with communication as well.

241
00:14:36.428 --> 00:14:42.189
And again, when you're talking
about 100s of developers, 10s or

242
00:14:42.189 --> 00:14:49.001
20s of teams, the power of just a simple
document shared around is irreplaceable.

