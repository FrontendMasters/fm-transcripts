[00:00:00]
>> Erik: Who uses Backend System Architectures? Again, I love this gif because this is how I feel like a lot of people feel when they're first getting is this, who can I relate to? Where are these people and how can I understand how they're doing the things that they are?

[00:00:17]
So we're gonna talk really quickly about Amazon. We're gonna talk about four companies in total and the first one we're gonna talk about is Amazon. So Amazon utilizes a microservices architecture to manage its vast operations. And let's be clear, Amazon is vast. I mean, they're at the point now where people aren't even maintaining the warehouses anymore, it's all automated and guess what?

[00:00:39]
Those are run-on distributed systems, right? So Amazon has figured out a way of what's called dogfooding, or basically saying, hey, I'm gonna to build an architecture that I can reuse in multiple places and grow and keep building on top of. And that's a really, really, really powerful tool to be able to reuse logic that you've already created gives more value to that logic and saves time.

[00:01:03]
So each microservice functions independently facilitating teams to modify their services without affecting others. This approach has propelled Amazon scalability and innovation. With each of these examples, I have included a diagram to come kind of show you where they are. And so the first diagram we're gonna look at is Amazon's Backend System or one of their Backend Systems.

[00:01:27]
Now, these diagrams that I found are official diagrams. These aren't diagrams I found on some random blogger's websites. These are actually from their own blogs or their own documentation. And so this is a good example of showing how they handle a lot of different things, Suppliers, Transporters, Consumers, Stores, Warehouses.

[00:01:46]
They have enterprise planning, Scanners, RFID readers, AWS IOT, they have Temp and Geo Sensors, they have Sitewise connectors, they have Transport Management Systems. District Order Managers, they have Warehouse Management Systems, they have Store Inventory Managers, right? All these different components are built and put in place to solve problems.

[00:02:08]
And then as you look, you can see that they slowly start utilizing their own software or their own infrastructure. Amazon store and Amazon shipping would not be where it is today if it wasn't for Amazon Cloud, okay? I really want you guys to understand what Jeff Bezos did and how he made this company so profitable, because everything they do, they build on top of what they already have.

[00:02:39]
It's all in-house, and they all solve specific problems that they were able to resell for other companies and other things that are needing to solve similar problems. That's how we got IoT Core, that's how we got Kinesis Data Streams. That's how we got Textract, Comprehend, API Gateway, Lambda, DynamoDB, Pinpoint.

[00:03:00]
SageMaker, Forecast, Lake Formation, Redshift, S3, IoT Analytics and QuickSight, they built it for themselves. That means that Amazon's number one user is Amazon, and that's really powerful when you talk about building systems, right? When you're able to look at your own problems and say, how can we dog food this and make it so that we're solving it ourselves.

[00:03:25]
It's really powerful than saying, okay, we're gonna just lean on another provider, right? And so Amazon, the only downtime they really experience is with Amazon, right? They don't really have to deal with third party providers or other things like that. And that's what made them so powerful because once they built this incredibly robust and extensible system, they could sell it.

[00:03:48]
And this is why Amazon as a web service is one of the most powerhouses in the industry today. They're not just solving your problems, they're solving their own. And this chart really should show you the evolution of how many things they've built to solve their own problems.
>> Erik: The next one is Netflix, right?

[00:04:11]
Netflix employs a hybrid of serverless and microservice architectures to provide streaming services to millions of users globally. This architecture enables Netflix to manage enormous traffic surges and deliver a smooth user experience. How often do you see Netflix lag?
>> Erik: It's because they have put billions of dollars into figuring out how to solve that problem, right?

[00:04:35]
Again, people that I know at Netflix and even people who you may know work at Netflix did what they did. They were specific problem solver for the massive, massive tool chain and massive infrastructure that Netflix provides, right? And so they have had specific people try and just solve latency problems of connectability or start times of watching a video or things like that.

[00:05:02]
Because they have grown to this massive microservice scale. Now, what I know about Netflix is that a lot of it is microservice driven. I know that they use Lambdas and serverless and stuff like that, but they still heavily rely on microservices as a way of joining those two teams.

[00:05:19]
So Netflix has a really high expectation basically of saying, okay, this team owns this thing, this team owns this thing, this team owns this thing, and that's all you do, right? Which can be fun but can also be kind of boring depending on how you look at it.

[00:05:39]
However, when you think about what they've made, this, for example, is a chart of their Video Services. Where they have Time Text Services, they have Audio Services, they have Packaging Services, they have Streaming Workflow Orchestrators and Studio Workflow Orchestrators. These are things for editing videos and then shipping them directly to the platform.

[00:06:01]
These are things like streaming videos and shipping them directly to users. They have in Video Inspection Service and a Ladder Generation Service and Video Encoding Service and a Video Validation Service and Complex Analysis Services and Video Quality Services. These are all things that solve specific problems. You're not seeing anything here that says backend, frontend, right?

[00:06:23]
This is what microservices and service architecture really looks like when you're solving specific problems within your company, right? This is a really good example of what it looks like of solving problems with architecture.
>> Erik: There's another thing I do wanna note, which is they have something called Netflix Cosmos.

[00:06:44]
Cosmos is a computing platform that combines the best aspects of microservices with asynchronous workflows and serverless function. So I did wanna show you a little bit of the serverless side of things. But what you're gonna note about this itty-bitty little diagram that I took from their blog is that it's actually a microservice that fires a workflow, which fires serverless functions.

[00:07:06]
So they are even going as far as to glue all of these components together to find the best solution. And this is really what I mean by good architecture design of saying, well, I'm not just gonna do a monolith, I'm not just gonna do services, I'm not just gonna do serverless.

[00:07:22]
I'm gonna glue these components together so that they have a really good harmony in working together. Specific components can scale as far as they need, but then other components don't have to have these other requirements of serverless and can scale on their own specific requirements. Again, Netflix has done a really great job of showing a lot of people how to build these kinds of complex but really good problem-solving systems.

