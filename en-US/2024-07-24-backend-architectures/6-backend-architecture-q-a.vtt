WEBVTT

1
00:00:00.410 --> 00:00:06.238
&gt;&gt; Audience: Are you gonna talk about
managing complexity and simplicity?

2
00:00:06.238 --> 00:00:11.066
To give an example, I'm working on
an email service that moderates

3
00:00:11.066 --> 00:00:13.873
encrypted-signed standard emails.

4
00:00:13.873 --> 00:00:17.538
I'm implementing a rule system, but the
other developer doesn't know the system.

5
00:00:17.538 --> 00:00:22.176
The rule system adds complexity, but
it adds flexibility, modularity, and

6
00:00:22.176 --> 00:00:27.249
scalability for future additions to the
system, but adds complexity to the design.

7
00:00:27.249 --> 00:00:31.522
How do we manage complexity down the road?

8
00:00:31.522 --> 00:00:36.469
&gt;&gt; Erik Reinert: Okay, so if I'm
understanding the question is basically,

9
00:00:36.469 --> 00:00:41.812
well, so, okay, so I think a good
approach to that is planning.

10
00:00:41.812 --> 00:00:45.388
It's really around planning.

11
00:00:45.388 --> 00:00:50.910
If you have something that you know is
going to be a big change to the system but

12
00:00:50.910 --> 00:00:52.998
it's for the good, right?

13
00:00:52.998 --> 00:00:57.538
Your job is not to technically
build that well, but

14
00:00:57.538 --> 00:01:02.825
it's to educate and
to share the understanding of it well.

15
00:01:02.825 --> 00:01:07.495
You're not gonna be able to get that sold
unless the other developer and any other

16
00:01:07.495 --> 00:01:12.388
person on any other team can confidently
answer why you're doing that rule system.

17
00:01:12.388 --> 00:01:15.212
You might think it's a great rule system,
but

18
00:01:15.212 --> 00:01:20.067
if you don't have documentation that
backs why this rule system should exist,

19
00:01:20.067 --> 00:01:25.293
again, where I work, at Hippo, we have
technical documentation around anything.

20
00:01:25.293 --> 00:01:28.879
The first time anyone brings anything
up in a discussion, it's okay,

21
00:01:28.879 --> 00:01:30.271
where's the TDD, right?

22
00:01:30.271 --> 00:01:34.634
And that's not meant to be rude.

23
00:01:34.634 --> 00:01:40.060
It's meant to make it so that our culture
focuses on education first, right?

24
00:01:40.060 --> 00:01:44.130
It's kind of like being in a meeting,
but then not knowing the agenda, right?

25
00:01:44.130 --> 00:01:48.260
You kinda just sit there and you're like,
okay, as long as everyone's on the same

26
00:01:48.260 --> 00:01:50.743
page, then you can make
any change that you want.

27
00:01:50.743 --> 00:01:54.522
But I do think what that person
is dealing with is more of

28
00:01:54.522 --> 00:01:59.052
a communication challenge than
the actual technical side of it.

29
00:01:59.052 --> 00:02:03.046
And so
figuring out what works best for you.

30
00:02:03.046 --> 00:02:08.561
For example, at Hippo, we want to
move to Kubernetes for everything.

31
00:02:08.561 --> 00:02:10.281
That wasn't an overnight thing.

32
00:02:10.281 --> 00:02:13.717
I started working on that a year ago, and

33
00:02:13.717 --> 00:02:18.682
I just showed a demo to the entire
company last week [LAUGH].

34
00:02:18.682 --> 00:02:22.187
So it took a lot of preparation,
a lot of preparing,

35
00:02:22.187 --> 00:02:26.031
and also being prepared for
anybody who might push back.

36
00:02:26.031 --> 00:02:27.386
Right, be prepared.

37
00:02:27.386 --> 00:02:31.288
Engineers have opinions,
they all do, gosh, they do.

38
00:02:31.288 --> 00:02:35.662
And you have to be prepared for those
opinions and be open to them as well.

39
00:02:35.662 --> 00:02:40.225
Don't be like, well,
it's good system, just deal.

40
00:02:40.225 --> 00:02:43.525
No, you need to be able to handle that
in a way where you're actually trying.

41
00:02:43.525 --> 00:02:44.681
You're a salesman,

42
00:02:44.681 --> 00:02:48.412
you're trying to figure out how to
sell what you're trying to make.

43
00:02:48.412 --> 00:02:52.414
And so I think with complexity
also needs to come understanding.

44
00:02:55.986 --> 00:03:00.843
&gt;&gt; Audience: Do you have any
advice when to use open source

45
00:03:00.843 --> 00:03:06.372
solutions like Keycloak or
making your own auth?

46
00:03:07.793 --> 00:03:10.709
&gt;&gt; Erik Reinert: I can't say
much about making your own auth,

47
00:03:10.709 --> 00:03:13.563
because I pretty much
always do that [LAUGH].

48
00:03:13.563 --> 00:03:18.062
I have tried a lot of different systems,
I've tried Clerk,

49
00:03:18.062 --> 00:03:21.782
I've tried Auth0,
I've tried whatever else.

50
00:03:21.782 --> 00:03:26.591
I think you need to be able to
be confident in which system is

51
00:03:26.591 --> 00:03:29.353
going to give you the most value.

52
00:03:29.353 --> 00:03:34.022
And that might mean, again,
timeboxing it, setting requirements and

53
00:03:34.022 --> 00:03:37.401
asking, and
even potentially exploring, right?

54
00:03:37.401 --> 00:03:41.559
Open source is great, but
business is business.

55
00:03:41.559 --> 00:03:44.224
And if business can afford to pay for
something so

56
00:03:44.224 --> 00:03:47.929
that engineers don't have to manage
their own auth for five hours,

57
00:03:47.929 --> 00:03:51.704
eight hours out of the week,
then you're saving engineering time.

58
00:03:51.704 --> 00:03:56.217
And I guarantee you, the cost of the
engineering in a company is normally a lot

59
00:03:56.217 --> 00:03:59.967
more than the resources you put
towards cloud infrastructure or

60
00:03:59.967 --> 00:04:01.302
something like that.

61
00:04:01.302 --> 00:04:06.308
So a good example is, if you wanted to go
with an open source solution, make sure

62
00:04:06.308 --> 00:04:11.572
before you make that decision, that you
understand the maintenance challenges.

63
00:04:11.572 --> 00:04:15.669
Make sure you understand the scalability
challenges, because at some

64
00:04:15.669 --> 00:04:20.598
point you're gonna have to figure out how
to maintain, or how to update that system.

65
00:04:20.598 --> 00:04:25.699
You're gonna have to figure out
how to fix it if something breaks.

66
00:04:25.699 --> 00:04:30.051
And if you're really good at that
open source framework, then yeah,

67
00:04:30.051 --> 00:04:31.689
it might be a perfect fit.

68
00:04:31.689 --> 00:04:36.358
But I think checking all
the boxes on the requirements,

69
00:04:36.358 --> 00:04:41.439
going even back to,
how do I prepare for future complexity?

70
00:04:41.439 --> 00:04:44.320
That other question fits
really well into here.

71
00:04:44.320 --> 00:04:47.257
Because you might use
an open source project and

72
00:04:47.257 --> 00:04:49.318
solve a problem really quickly.

73
00:04:49.318 --> 00:04:53.906
But then down the road, you didn't
expect the complexity of, for example,

74
00:04:53.906 --> 00:04:56.314
Vault uses a Raft consensus algorithm.

75
00:04:56.314 --> 00:04:59.449
How many here know what a Raft
consensus algorithm is?

76
00:04:59.449 --> 00:05:02.145
Okay, okay, one person,
yeah, there [LAUGH] you go.

77
00:05:02.145 --> 00:05:02.888
Do you as well?

78
00:05:02.888 --> 00:05:04.387
Okay, so yeah, so one person.

79
00:05:04.387 --> 00:05:07.541
So if you don't understand how it works,
but

80
00:05:07.541 --> 00:05:12.853
you just deploy it because it's easy
to deploy, it's not the same as making

81
00:05:12.853 --> 00:05:17.671
it an educated decision on whether or
not it should actually be used.

82
00:05:22.651 --> 00:05:27.105
&gt;&gt; Audience: When you refer to
documentation, are you always

83
00:05:27.105 --> 00:05:32.111
referring to markdown files or
things in that nature?

84
00:05:32.111 --> 00:05:35.556
Or sometimes TDD or tests and
stuff for this documentation?

85
00:05:35.556 --> 00:05:37.074
&gt;&gt; Erik Reinert: Any
kind of documentation.

86
00:05:37.074 --> 00:05:40.598
Yeah, any kind of documentation.

87
00:05:40.598 --> 00:05:44.214
One of the best pieces of advice I can
give anyone out there listening is,

88
00:05:44.214 --> 00:05:46.241
learn how to become a salesman, right?

89
00:05:46.241 --> 00:05:50.629
Sometimes it means flashy charts and
things that people can get excited about.

90
00:05:50.629 --> 00:05:55.160
Sometimes it means very verbose documents
in Confluence that are just paragraphs of

91
00:05:55.160 --> 00:05:58.307
you writing and
getting all of your thoughts on the paper.

92
00:05:58.307 --> 00:06:02.784
Both are valuable,
both have their use case.

93
00:06:02.784 --> 00:06:07.729
But I think it's really,
you have to think about your audience.

94
00:06:07.729 --> 00:06:11.770
And that was a big challenge for
me when building systems like this, too.

95
00:06:11.770 --> 00:06:15.974
Was, it's like, if I'm talking to
developers, flashy, flashy, [LAUGH] right,

96
00:06:15.974 --> 00:06:17.527
cuz that's what dev's like.

97
00:06:17.527 --> 00:06:19.170
Sorry, [LAUGH] but it's true.

98
00:06:19.170 --> 00:06:20.509
Whereas stakeholders,

99
00:06:20.509 --> 00:06:24.778
one of the biggest challenges I had was
writing huge documents and then going and

100
00:06:24.778 --> 00:06:27.852
being like, okay,
let me show this to a business owner.

101
00:06:27.852 --> 00:06:29.797
And them being like,
I'm not gonna read this.

102
00:06:29.797 --> 00:06:31.500
I don't have time to read this,
this is huge.

103
00:06:31.500 --> 00:06:34.908
This is a thesis on why you
should use Kubernetes, right?

104
00:06:34.908 --> 00:06:39.436
Break it down into bullet points, get
it to me so I can read in five minutes.

105
00:06:39.436 --> 00:06:42.914
And different documentation
solves different problems.

