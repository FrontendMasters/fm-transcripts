WEBVTT

1
00:00:00.000 --> 00:00:03.587
&gt;&gt; Erik Reinert: So, we talked about
these a little bit in the earlier slides.

2
00:00:03.587 --> 00:00:07.517
But now we're gonna actually go
into deeper detail around the,

3
00:00:07.517 --> 00:00:12.174
I like to call the main four principles
of architecture designs, which is,

4
00:00:12.174 --> 00:00:16.380
modularity, scalability,
robustness, and flexibility.

5
00:00:16.380 --> 00:00:19.034
Now, you have to think about
each of these individually,

6
00:00:19.034 --> 00:00:21.970
you can't just kind of Kind of try and
lump everything into one.

7
00:00:21.970 --> 00:00:24.813
You wanna be able to look at
your architecture and say, okay,

8
00:00:24.813 --> 00:00:26.318
is it modular enough?

9
00:00:26.318 --> 00:00:28.450
Am I reusing things in the right place?

10
00:00:28.450 --> 00:00:30.890
Are things coupled the right way?

11
00:00:30.890 --> 00:00:34.578
For scalability, you wanna be
able to understand things like,

12
00:00:34.578 --> 00:00:37.638
how much traffic are we gonna have so
forth and so on.

13
00:00:37.638 --> 00:00:40.020
Robustness, is the system dependable?

14
00:00:40.020 --> 00:00:42.548
Right, are we dealing
with problems every day?

15
00:00:42.548 --> 00:00:46.419
If you build an architecture and
you're dealing problems every day,

16
00:00:46.419 --> 00:00:49.239
it might not be very robust
as well as flexibility,

17
00:00:49.239 --> 00:00:52.532
being able to support future changes and
things like that.

18
00:00:54.722 --> 00:00:57.809
So, let's get into modularity first,
right?

19
00:00:57.809 --> 00:01:01.291
Each component of the system
should have a specific task.

20
00:01:01.291 --> 00:01:05.124
This is probably the easiest way
I can describe modularity for

21
00:01:05.124 --> 00:01:06.756
a backend architecture.

22
00:01:06.756 --> 00:01:09.742
Maybe you only have one component,
that's fine,

23
00:01:09.742 --> 00:01:13.831
as long as it solves the one
specific task that you need it to.

24
00:01:13.831 --> 00:01:15.867
We're not saying that again,

25
00:01:15.867 --> 00:01:19.703
this has to be a crazy
distributed platform, it's just,

26
00:01:19.703 --> 00:01:24.657
you have to be able to say this component
does this, and why does it do this.

27
00:01:24.657 --> 00:01:29.841
And that will help you a lot with your
argument, communication, learning,

28
00:01:29.841 --> 00:01:34.946
and hopefully it'll get to a point where
it becomes easier to understand and

29
00:01:34.946 --> 00:01:39.118
people can say, okay, well,
this component's over here.

30
00:01:39.118 --> 00:01:40.631
Okay, this component's over here.

31
00:01:40.631 --> 00:01:42.708
I could just use this.

32
00:01:42.708 --> 00:01:47.272
And hopefully, you'll have good
naming conventions around it.

33
00:01:47.272 --> 00:01:52.254
For example, I do know some companies name
their internal services all sorts of crazy

34
00:01:52.254 --> 00:01:52.818
things.

35
00:01:52.818 --> 00:01:57.913
I would shy away from that,
I know it can be fun to call your

36
00:01:57.913 --> 00:02:02.595
system Pokemon names or
something, I don't know.

37
00:02:02.595 --> 00:02:06.610
But realistically, if they don't
understand what the modules are,

38
00:02:06.610 --> 00:02:11.740
it's a lot harder to build on top of them,
there's more communication needed.

39
00:02:11.740 --> 00:02:17.044
We call that friction basically,
there's more friction added.

40
00:02:17.044 --> 00:02:21.939
Scalability, so the system should be
designed to handle growth of traffic,

41
00:02:21.939 --> 00:02:22.747
right?

42
00:02:22.747 --> 00:02:24.878
So after we talk about modularity,

43
00:02:24.878 --> 00:02:28.652
we wanna be able to scale those
modules individually, right?

44
00:02:28.652 --> 00:02:32.507
Is there a certain part of your system
that takes more traffic than other?

45
00:02:32.507 --> 00:02:37.095
A good example of that is I'm currently
working on building a content

46
00:02:37.095 --> 00:02:41.998
creator tools platform, and one of
the things that we do is that we process

47
00:02:41.998 --> 00:02:45.976
chat messages from Twitch and
other streaming platforms.

48
00:02:45.976 --> 00:02:49.783
And for every single message
that comes into our system,

49
00:02:49.783 --> 00:02:51.606
there may be three or four or

50
00:02:51.606 --> 00:02:56.776
five other calls lower down in the system
that you need to be able to consider.

51
00:02:56.776 --> 00:03:01.928
And that's a big part of it, is making
sure that you don't have any Bottlenecks,

52
00:03:01.928 --> 00:03:06.037
anything that will potentially
impact system performance, and

53
00:03:06.037 --> 00:03:07.547
things of that nature.

54
00:03:07.547 --> 00:03:12.032
You wanna be able to make sure that every
module or every component can scale,

55
00:03:12.032 --> 00:03:12.796
basically.

56
00:03:15.353 --> 00:03:19.637
&gt;&gt; Erik Reinert: Robustness, again, as I
said before, the system should be able to

57
00:03:19.637 --> 00:03:23.942
handle unexpected situations or
errors or things like that.

58
00:03:23.942 --> 00:03:27.901
And I think actually this is a really
big thing that a lot of people fail at.

59
00:03:27.901 --> 00:03:32.334
And the reason why I say that is because,
more often than not,

60
00:03:32.334 --> 00:03:37.932
I noticed a lot of companies do not
spend time in proper error handling.

61
00:03:37.932 --> 00:03:42.691
Like, how many of you at companies
today have errors that you have no

62
00:03:42.691 --> 00:03:45.712
idea what they are or what they do, right?

63
00:03:45.712 --> 00:03:47.299
What is this error code?

64
00:03:47.299 --> 00:03:48.852
Why did it give me a 404?

65
00:03:48.852 --> 00:03:50.692
I didn't expect a 404, right?

66
00:03:50.692 --> 00:03:53.552
What is Unknown Error, [LAUGH] right?

67
00:03:53.552 --> 00:03:58.012
Like, that's not robust, that doesn't
help you scale a system, right?

68
00:03:58.012 --> 00:04:02.718
So it is a really good consideration
to think about, when you connect two

69
00:04:02.718 --> 00:04:08.025
different components together,
how's it gonna handle errors, right?

70
00:04:08.025 --> 00:04:11.411
How's it gonna receive those errors?

71
00:04:11.411 --> 00:04:13.317
How's it gonna respond to those errors?

72
00:04:13.317 --> 00:04:18.234
Another big thing that I see
a lot is the code itself

73
00:04:18.234 --> 00:04:23.386
doesn't know how to handle
the specific message and

74
00:04:23.386 --> 00:04:26.447
then it just crashes, right?

75
00:04:26.447 --> 00:04:28.264
Being able to think about that,

76
00:04:28.264 --> 00:04:33.529
think about what could potentially break
in your architectures is really important.

77
00:04:33.529 --> 00:04:37.627
And I would recommend,
especially around error handling and

78
00:04:37.627 --> 00:04:41.188
things like that,
build your own language, right?

79
00:04:41.188 --> 00:04:43.643
Frontend users don't care
about your error codes,

80
00:04:43.643 --> 00:04:46.473
you don't need to show those
in the frontend, right?

81
00:04:46.473 --> 00:04:49.391
But if you can show better
errors to your systems so

82
00:04:49.391 --> 00:04:54.324
that they can react accordingly, that just
makes it easier for those systems to heal

83
00:04:54.324 --> 00:04:58.513
themselves or be able to continue
with whatever they're trying to do.

84
00:05:00.913 --> 00:05:05.176
&gt;&gt; Erik Reinert: And this one, now,
this one is very challenging, flexibility,

85
00:05:05.176 --> 00:05:05.717
right?

86
00:05:05.717 --> 00:05:07.542
I deal with this a lot and

87
00:05:07.542 --> 00:05:13.403
I definitely don't think there's
a perfect science to this either.

88
00:05:13.403 --> 00:05:15.206
What does flexibility mean?

89
00:05:15.206 --> 00:05:20.100
It really means that the system should
be designed to accommodate changes or

90
00:05:20.100 --> 00:05:21.864
future features, right?

91
00:05:24.114 --> 00:05:29.338
This kinda depends on how much your
company wants to invest into this, right?

92
00:05:29.338 --> 00:05:32.524
But the main goal here, and I think
a lot of us have dealt with this too,

93
00:05:32.524 --> 00:05:35.548
is you don't wanna be in a scenario
where you have to take one step or

94
00:05:35.548 --> 00:05:38.054
two steps back to take one step forward.

95
00:05:38.054 --> 00:05:42.656
And I've worked with this a lot in
the past, where I've gone to a specific

96
00:05:42.656 --> 00:05:46.604
system and then I've been like,
okay, we wanna change this.

97
00:05:46.604 --> 00:05:51.488
And they're like, well, to do that,
we gotta refactor this and then move

98
00:05:51.488 --> 00:05:57.171
this around and move that around, and
that really isn't a flexible system.

99
00:05:57.171 --> 00:06:01.396
That means that that system was
potentially designed to solve one problem,

100
00:06:01.396 --> 00:06:02.650
one problem only, but

101
00:06:02.650 --> 00:06:06.491
it wasn't considering the potential
changes of the architecture.

102
00:06:06.491 --> 00:06:10.319
Again, maybe one system doesn't have
the error handling of another system,

103
00:06:10.319 --> 00:06:12.724
and things like that, yeah.

104
00:06:12.724 --> 00:06:16.465
&gt;&gt; Speaker 2: Someone online said every
mistake that you've mentioned so far,

105
00:06:16.465 --> 00:06:19.152
there's a company that
this person worked at.

106
00:06:19.152 --> 00:06:20.723
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 2: Basically,

107
00:06:20.723 --> 00:06:22.535
that's why they quit,
was cuz of all of this.

108
00:06:22.535 --> 00:06:23.902
&gt;&gt; Erik Reinert: Yeah.

109
00:06:23.902 --> 00:06:28.166
&gt;&gt; Speaker 2: And then Amber was asking
about, so you mean loggers, like,

110
00:06:28.166 --> 00:06:31.095
showing better errors in the system?

111
00:06:31.095 --> 00:06:33.555
&gt;&gt; Erik Reinert: Yeah,
well, it can literally be,

112
00:06:33.555 --> 00:06:38.887
having responses come back in a structured
format of your choosing, right?

113
00:06:38.887 --> 00:06:42.243
I've worked at companies and
I actually like this approach,

114
00:06:42.243 --> 00:06:44.965
where they create their own error codes,
right?

115
00:06:44.965 --> 00:06:49.931
Where you sure you have response
codes of 200, 300, 400, whatever,

116
00:06:49.931 --> 00:06:54.106
but then you can create like enums
that are in like a shared library.

117
00:06:54.106 --> 00:06:57.685
And then all of your systems
use those shared enums, right?

118
00:06:57.685 --> 00:07:02.751
And then, instead of having like,
okay, how many of you guys have

119
00:07:02.751 --> 00:07:08.638
had to do a contains error message to
be able to respond to something, right?

120
00:07:08.638 --> 00:07:10.436
That's not a good approach.

121
00:07:10.436 --> 00:07:14.042
If that changes in the future,
then you have to now go back and

122
00:07:14.042 --> 00:07:17.664
update all your contains in
your functional logic, right?

123
00:07:17.664 --> 00:07:21.419
A much better system would be
to design your own, again,

124
00:07:21.419 --> 00:07:23.781
language around your errors.

125
00:07:23.781 --> 00:07:28.533
It can be error codes of your own, for
example, I'm sure a lot of us have either

126
00:07:28.533 --> 00:07:33.222
played a video game or been on a website
and it's like, error code 1064.

127
00:07:33.222 --> 00:07:36.221
Well, that doesn't mean anything to
anything but the company, right?

128
00:07:36.221 --> 00:07:39.000
But at the same time,
the company can immediately

129
00:07:39.000 --> 00:07:42.917
understand the problem all the way
down to customer support, right?

130
00:07:42.917 --> 00:07:44.262
Think about that, right?

131
00:07:44.262 --> 00:07:47.312
Say you have a really weird
error pop up in a frontend and

132
00:07:47.312 --> 00:07:50.228
somebody has to call in and
solve or wanna know like,

133
00:07:50.228 --> 00:07:53.362
why am I just getting this
weird internal server error?

134
00:07:53.362 --> 00:07:56.432
But if the customer support can say,
well, what's the code?

135
00:07:56.432 --> 00:07:58.409
They can immediately look that up and

136
00:07:58.409 --> 00:08:01.038
be able to trace that error
a lot quicker for you.

137
00:08:01.038 --> 00:08:04.863
And so, anything like that,
even logging as well, right,

138
00:08:04.863 --> 00:08:08.169
having good logs,
don't log everything, right?

139
00:08:08.169 --> 00:08:12.352
A big thing that I see a lot as well at
companies is they log everything, and

140
00:08:12.352 --> 00:08:15.273
then they wonder why their
cloud costs are so high.

141
00:08:15.273 --> 00:08:18.189
[LAUGH] You're logging everything, right?

142
00:08:18.189 --> 00:08:22.435
Having really good structured logging,
only logging when you need to, right?

143
00:08:22.435 --> 00:08:25.607
Sometimes you don't need all of those
logs, so don't worry about them.

144
00:08:25.607 --> 00:08:29.194
So yeah, again, flexibility is really
important with regards to all these

145
00:08:29.194 --> 00:08:33.119
things, because if you're building a
flexible architecture, you may have other

146
00:08:33.119 --> 00:08:36.555
principles that already exist that
even make it more flexible, right?

147
00:08:36.555 --> 00:08:40.484
Think about it like this, think about
having 50 services and then having asked

148
00:08:40.484 --> 00:08:44.432
yourself the question, how do we handle
errors for all these services, right?

149
00:08:44.432 --> 00:08:48.664
If you have one standard library that does
all that for you, then you can easily have

150
00:08:48.664 --> 00:08:52.675
everything in that standard library,
all the services can use that library.

151
00:08:52.675 --> 00:08:56.561
And now you're structured, you don't
have to worry so much about, well,

152
00:08:56.561 --> 00:08:59.002
what happens if we add
a new error in the future?

153
00:08:59.002 --> 00:09:00.524
How do we handle that, right?

154
00:09:00.524 --> 00:09:04.515
All those standardizations have
already kind of been put in place, and

155
00:09:04.515 --> 00:09:08.052
it can help a lot with the flexibility
of newer systems as well.

