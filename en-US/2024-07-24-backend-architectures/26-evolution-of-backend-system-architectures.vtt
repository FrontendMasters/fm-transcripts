WEBVTT

1
00:00:00.000 --> 00:00:01.228
&gt;&gt; Erik Reinert: The next one is going to

2
00:00:01.228 --> 00:00:03.885
be Evolution of
Backend System Architectures.

3
00:00:03.885 --> 00:00:08.464
And so, I really like this GIF because
it really does kinda show the process of

4
00:00:08.464 --> 00:00:10.648
something over a period of time, and

5
00:00:10.648 --> 00:00:13.686
this is really how your
architecture should grow.

6
00:00:13.686 --> 00:00:18.098
It should slowly become more defined,
more understandable, and

7
00:00:18.098 --> 00:00:21.102
easier to look at, basically, as it grows.

8
00:00:21.102 --> 00:00:25.806
And so what we're gonna do really quickly,
is we're gonna go through

9
00:00:25.806 --> 00:00:30.444
the evolution of a backend system
architecture from one to another.

10
00:00:30.444 --> 00:00:33.217
So, we're gonna start with a monolith,
right?

11
00:00:33.217 --> 00:00:37.079
This is the most common scenario that
a lot of people start with, right?

12
00:00:37.079 --> 00:00:39.879
We've already talked about this,
we've already explained why.

13
00:00:39.879 --> 00:00:42.521
So we don't really need to go
into a lot of detail with this.

14
00:00:42.521 --> 00:00:47.366
But if you were at a company and you were
wanting to start something from scratch,

15
00:00:47.366 --> 00:00:49.502
or you didn't know where to begin,

16
00:00:49.502 --> 00:00:53.917
a monolith is a great place to start
because of, again, the simplicity,

17
00:00:53.917 --> 00:00:58.225
the consistency and the efficiency
of being able to run that monolith.

18
00:00:58.225 --> 00:01:02.148
You don't have to worry about the
distributed, all the complexities of that.

19
00:01:02.148 --> 00:01:05.203
You don't have to worry about
the limitations around serverless and

20
00:01:05.203 --> 00:01:06.052
things like that.

21
00:01:06.052 --> 00:01:09.871
You have a lot more control of running
that thing locally, developing it,

22
00:01:09.871 --> 00:01:13.992
putting it in the cloud, and then letting
that iterate over that time and time and

23
00:01:13.992 --> 00:01:16.678
time again until you get
to something a bit further.

24
00:01:16.678 --> 00:01:20.818
So, when we talk about that,
again, here's our monolith, right?

25
00:01:20.818 --> 00:01:24.366
And this is where something like
Next.js going back to that as

26
00:01:24.366 --> 00:01:27.586
Next.js as a monolith,
this is why it's so powerful.

27
00:01:27.586 --> 00:01:32.448
This is why people are getting excited
about it, is because it's so easy to have

28
00:01:32.448 --> 00:01:37.471
all of your components in one spot, drop
it in as a monolith and off you go, right?

29
00:01:37.471 --> 00:01:40.901
And this is most of the reasons
why smaller companies, and

30
00:01:40.901 --> 00:01:45.384
I'm gonna be very clear when I say
smaller companies, can do this, right?

31
00:01:45.384 --> 00:01:49.464
This is what makes Next.js so attractive,
as well as why a lot of people

32
00:01:49.464 --> 00:01:53.818
are getting onto it because here's
the truth about the software industry.

33
00:01:53.818 --> 00:01:59.026
90% of the people that are doing huge
crazy elaborate architecture are not

34
00:01:59.026 --> 00:02:04.488
90 % of the rest of the industry, a lot
of people are still running monoliths.

35
00:02:04.488 --> 00:02:07.702
Some people are still even running
a co-located facilities and

36
00:02:07.702 --> 00:02:09.139
running their own servers.

37
00:02:09.139 --> 00:02:12.878
So, things like this are very attractive,
right?

38
00:02:12.878 --> 00:02:15.908
You get a really nice clean
interface to build your monolith in,

39
00:02:15.908 --> 00:02:18.599
you can drag and drop it,
it's all available to you, and

40
00:02:18.599 --> 00:02:21.258
you really don't have to think
too much about doing it.

41
00:02:21.258 --> 00:02:25.477
So this is where you would start,
you would start with a monolith and

42
00:02:25.477 --> 00:02:26.895
something like this.

43
00:02:26.895 --> 00:02:30.818
Then what you would do is, you would
start splitting to services, right?

44
00:02:30.818 --> 00:02:36.427
So we talk about having a monolith and
having it all in one place.

45
00:02:36.427 --> 00:02:40.587
We've talked about microservices and
services and how those approaches work.

46
00:02:40.587 --> 00:02:45.043
The idea here is that after a company or
project grows, there begins the need to

47
00:02:45.043 --> 00:02:49.365
split out functional logic into units for
the following benefits, again,

48
00:02:49.365 --> 00:02:53.634
independent development,
independent deployment, fault isolation.

49
00:02:53.634 --> 00:02:57.637
So independent development means
you're hiring more people, right?

50
00:02:57.637 --> 00:03:00.311
That you have more teams,
that you're growing, that's good.

51
00:03:00.311 --> 00:03:04.472
This is a very common approach for
a company that's starting to grow,

52
00:03:04.472 --> 00:03:09.069
that's starting to accumulate more,
not just users, but also employees.

53
00:03:09.069 --> 00:03:12.799
Again, when you accumulate more employees,
you want those employees to be able to

54
00:03:12.799 --> 00:03:16.551
deploy things on their own and have their
own fault isolation and things like that.

55
00:03:16.551 --> 00:03:20.923
So again, you go from this
monolith approach where everybody's

56
00:03:20.923 --> 00:03:24.526
working together,
everybody's drinking the same Kool-Aid.

57
00:03:24.526 --> 00:03:28.714
And then you say, okay, now that we have
little cups of Kool-Aid for everyone,

58
00:03:28.714 --> 00:03:32.654
here's your cup, here's your cup,
here's your cup, here's your cup,

59
00:03:32.654 --> 00:03:36.120
go work together and start splitting
out the things that you need.

60
00:03:36.120 --> 00:03:40.302
Also, when you get to this point,
the idea is that you're also hiring for

61
00:03:40.302 --> 00:03:41.862
specific things, right?

62
00:03:41.862 --> 00:03:46.448
You want a team that handles user data,
you want a team that handles, again,

63
00:03:46.448 --> 00:03:49.290
processing transactions or
things like that.

64
00:03:49.290 --> 00:03:54.946
So, the split to services approach should
be easier to identify once you get here.

65
00:03:54.946 --> 00:03:59.340
If you start with this, it might be
hard because you're one person, right?

66
00:03:59.340 --> 00:04:03.500
If you want person making a microservice
or in a service based architecture,

67
00:04:03.500 --> 00:04:07.276
you might not even need to split it,
so you don't know how to split it.

68
00:04:07.276 --> 00:04:10.339
You're like, I guess I could split this,
but you don't know,

69
00:04:10.339 --> 00:04:12.735
you won't know until
you're actually at scale.

70
00:04:12.735 --> 00:04:17.305
Again, going back to the original slides,
testing, monitoring and

71
00:04:17.305 --> 00:04:22.275
managing the system for a while to see
what needs to scale and what doesn't.

72
00:04:22.275 --> 00:04:25.753
One last thing to note about
splitting to services,

73
00:04:25.753 --> 00:04:29.717
you should only split to
services when you need to, right?

74
00:04:29.717 --> 00:04:33.275
So if you're in a monolith architecture,
stay in it, right?

75
00:04:33.275 --> 00:04:36.659
And start looking at what
are things that need to scale and

76
00:04:36.659 --> 00:04:38.500
only move those things first.

77
00:04:38.500 --> 00:04:43.196
Dip your toe into the distributed
architecture, don't just dive in.

78
00:04:43.196 --> 00:04:46.532
If you dive in and
do everything at once, it's gonna hurt,

79
00:04:46.532 --> 00:04:50.271
it's gonna be a bad experience,
and it's basically gonna be like

80
00:04:50.271 --> 00:04:53.231
belly flopping into a pool,
it's not gonna be fun.

81
00:04:53.231 --> 00:04:55.410
So again,
we're gonna go back to this, right?

82
00:04:55.410 --> 00:04:56.985
We start splitting to services,

83
00:04:56.985 --> 00:05:00.993
hopefully now this really encompasses
everything that we've talked about today.

84
00:05:00.993 --> 00:05:03.924
And you understand why you
can have a frontend team,

85
00:05:03.924 --> 00:05:08.865
you can have a backend team, those are two
isolated and they're two working together.

86
00:05:08.865 --> 00:05:12.293
Finally, saving with serverless, right?

87
00:05:12.293 --> 00:05:16.141
So we talked about monoliths,
we talked about services, but

88
00:05:16.141 --> 00:05:21.025
then we also talked about the need of
saving money in specific circumstances or

89
00:05:21.025 --> 00:05:25.995
saving operations cost, saving resource
cost, saving scaling challenges.

90
00:05:25.995 --> 00:05:30.637
So again, after starting with a monolith
than separating that logic with services,

91
00:05:30.637 --> 00:05:34.584
a system can further benefit from
serverless for those things, right?

92
00:05:34.584 --> 00:05:38.346
At this point, you should have a pretty
good experience with distributed,

93
00:05:38.346 --> 00:05:42.166
at this point you should already kind
of have your team separated, you should

94
00:05:42.166 --> 00:05:46.376
already have a good understanding of how
these processes separate from each other.

95
00:05:46.376 --> 00:05:49.330
And maybe specific teams wanna
start using serverless.

96
00:05:49.330 --> 00:05:52.221
It doesn't mean that all
the infrastructure has to move to

97
00:05:52.221 --> 00:05:52.988
serverless.

98
00:05:52.988 --> 00:05:57.356
It just means that maybe a specific
team is taking up a lot of costs.

99
00:05:57.356 --> 00:06:02.963
Maybe they have a lot of management in
infrastructure or scaling issues, right?

100
00:06:02.963 --> 00:06:06.042
This is where you could go to that
specific team and say, okay, cool.

101
00:06:06.042 --> 00:06:11.429
Well why don't you guys start moving some
of these things off to serverless and

102
00:06:11.429 --> 00:06:13.150
work with those as well.

103
00:06:13.150 --> 00:06:17.413
And so again, this is where we
see this slow creep to moving

104
00:06:17.413 --> 00:06:22.198
to more serverless approach,
trying to save money, and again,

105
00:06:22.198 --> 00:06:26.553
we just kinda go back to the same
diagram we saw this before.

106
00:06:26.553 --> 00:06:29.717
But now this encompasses everything,
right?

107
00:06:29.717 --> 00:06:34.564
This now shows you the evolution
in more detail why you go from

108
00:06:34.564 --> 00:06:36.761
one to another to another?

109
00:06:36.761 --> 00:06:40.977
Does this mean as well that you can
go from serverless back to server or

110
00:06:40.977 --> 00:06:42.147
back to monolith?

111
00:06:42.147 --> 00:06:44.603
Yeah, if you have a reason for it, right?

112
00:06:44.603 --> 00:06:48.670
I told you guys earlier that I'm at some
point gonna have to put a service in front

113
00:06:48.670 --> 00:06:50.006
of Twitch chat messages,

114
00:06:50.006 --> 00:06:53.243
otherwise my cloud bill's gonna
go through the roof, right?

115
00:06:53.243 --> 00:06:56.796
So, it doesn't just mean that you're
just gonna go in one direction.

116
00:06:56.796 --> 00:06:59.170
It could mean that you go in one
direction, and then you move back, and

117
00:06:59.170 --> 00:07:01.198
then you move forward again,
and then you move back again.

118
00:07:01.198 --> 00:07:04.139
These architectures are dynamic,
they're alive,

119
00:07:04.139 --> 00:07:06.367
they're living creatures in some way.

120
00:07:06.367 --> 00:07:09.488
And so it evolves it grows,
it has pain points and

121
00:07:09.488 --> 00:07:12.320
then eventually solves those pain points.

