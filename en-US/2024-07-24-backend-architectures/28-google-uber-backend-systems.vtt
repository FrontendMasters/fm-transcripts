WEBVTT

1
00:00:00.000 --> 00:00:00.640
&gt;&gt; Erik Reinert: Google, so

2
00:00:00.640 --> 00:00:05.120
Google's search backend engine uses
concepts such as monolithic architecture,

3
00:00:05.120 --> 00:00:08.192
service-oriented architecture,
and microservice,

4
00:00:08.192 --> 00:00:12.353
each of which represents stages in
the evolution of backend architectures.

5
00:00:12.353 --> 00:00:16.451
Google has been around for
a while, as we all know, right?

6
00:00:16.451 --> 00:00:21.769
And so Google has adapted with
the technology as it's grown, right?

7
00:00:21.769 --> 00:00:25.530
And in a lot of ways, some of the things
that we work with today are directly

8
00:00:25.530 --> 00:00:29.545
related because of how Google implemented
them in their own systems, right?

9
00:00:29.545 --> 00:00:32.336
And so a good example of
that is the search engine.

10
00:00:32.336 --> 00:00:36.910
Now, [LAUGH] Google's a little bit of a
black box when it comes to the things that

11
00:00:36.910 --> 00:00:37.475
they do.

12
00:00:37.475 --> 00:00:42.337
I couldn't really find an official
Google document on the search engine.

13
00:00:42.337 --> 00:00:47.089
However, what I was able to find
was the original high level

14
00:00:47.089 --> 00:00:52.140
Google architecture diagram for
the original search engine.

15
00:00:52.140 --> 00:00:56.733
And so you can even see, 20-something
years ago when they first made this,

16
00:00:56.733 --> 00:01:01.762
they had a URL server, they had a crawler,
they had a store server with a repository.

17
00:01:01.762 --> 00:01:06.252
They had a URL resolver, and an indexer,
and linking, and document indexing, and

18
00:01:06.252 --> 00:01:09.225
page ranking, and searching,
and sorting, and all of

19
00:01:09.225 --> 00:01:13.669
these other things that eventually got
created into microservices and services.

20
00:01:13.669 --> 00:01:18.434
And distributed and higher scaling and
more distribution and

21
00:01:18.434 --> 00:01:22.932
more complexity as the software and
as the platform grew.

22
00:01:22.932 --> 00:01:27.457
But even this as a start was already
distributed because of the type of

23
00:01:27.457 --> 00:01:30.117
problem that they were trying to solve.

24
00:01:31.962 --> 00:01:34.620
&gt;&gt; Erik Reinert: And finally,
we have Uber, right?

25
00:01:34.620 --> 00:01:36.092
As it expanded worldwide,

26
00:01:36.092 --> 00:01:39.941
Uber transitioned from a monolithic
to a microservice architecture.

27
00:01:39.941 --> 00:01:44.897
Each service, such as ride-hailing, food
delivery, and driver-partner services,

28
00:01:44.897 --> 00:01:47.842
is managed by separated microservices or
services.

29
00:01:47.842 --> 00:01:51.350
This has enabled Uber to scale and
customize its services for

30
00:01:51.350 --> 00:01:52.596
different markets.

31
00:01:52.596 --> 00:01:57.282
So, who here remembers when Uber
started doing food deliveries?

32
00:01:57.282 --> 00:01:58.649
That was crazy, right?

33
00:01:58.649 --> 00:02:02.418
You were so used to using Uber for
ride-hailing, but

34
00:02:02.418 --> 00:02:05.620
they already had half
of the platform there.

35
00:02:05.620 --> 00:02:07.599
They already had the geolocation part.

36
00:02:07.599 --> 00:02:09.721
They already had the hailing part.

37
00:02:09.721 --> 00:02:12.846
All they needed to do was throw
on food on top of it, and

38
00:02:12.846 --> 00:02:16.472
now they have a whole other
market that they're tapped into.

39
00:02:16.472 --> 00:02:21.353
That's another reason why backend
system architectures are so valuable.

40
00:02:21.353 --> 00:02:24.913
And again, this is from Silicon Valley,
but you can pivot, [LAUGH] you can pivot,

41
00:02:24.913 --> 00:02:26.212
and you could try new things.

42
00:02:26.212 --> 00:02:29.541
And that's also what made
Uber a massive company.

43
00:02:29.541 --> 00:02:33.791
They're not just ride-sharing anymore,
they're food delivery and they have

44
00:02:33.791 --> 00:02:38.116
partner services, and you can rent cars
on Uber and all this other stuff, right?

45
00:02:38.116 --> 00:02:43.147
They are, once again, like Amazon,
dogfooding their platform and

46
00:02:43.147 --> 00:02:46.802
finding out multiple ways
to make money off of it.

47
00:02:46.802 --> 00:02:48.927
And that is how you get
to a billion dollars.

48
00:02:48.927 --> 00:02:53.453
That's how you get to a huge company,
is not just doing one thing, but

49
00:02:53.453 --> 00:02:55.698
doing a lot of things really well.

50
00:02:55.698 --> 00:02:58.462
And so
when we look at Uber's infrastructure,

51
00:02:58.462 --> 00:03:02.552
you can see here that they have core
services and WebSocket services.

52
00:03:02.552 --> 00:03:03.952
And for example,

53
00:03:03.952 --> 00:03:09.560
a customer creates a chat contact
which goes to a chat channel manager.

54
00:03:09.560 --> 00:03:13.281
That content is created or
uploaded to a contact service.

55
00:03:13.281 --> 00:03:17.405
The contact is added for
routing to a router, and

56
00:03:17.405 --> 00:03:22.040
then that get pushed to a web,
basically a web server.

57
00:03:22.040 --> 00:03:26.366
That gets sent to an agent state service
for managing agents stay online,

58
00:03:26.366 --> 00:03:27.982
offline, all that stuff.

59
00:03:27.982 --> 00:03:32.066
They have a lower level Kafka service
which handles a lot of these messages.

60
00:03:32.066 --> 00:03:35.377
They have a WebSocket proxy
which then goes to the frontend.

61
00:03:35.377 --> 00:03:37.407
And then that connects to the frontend so

62
00:03:37.407 --> 00:03:40.822
that agents have a real-time
interaction with all these systems.

63
00:03:40.822 --> 00:03:45.168
And then multiple services
are connected through that frontend,

64
00:03:45.168 --> 00:03:47.427
which is the app that we use today.

65
00:03:47.427 --> 00:03:52.861
And again, they're doing a really good
job of looking at what they already have,

66
00:03:52.861 --> 00:03:57.351
their fleets, their infrastructure,
and saying, okay, cool,

67
00:03:57.351 --> 00:03:59.744
this is a way that we can make money.

