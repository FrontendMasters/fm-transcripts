WEBVTT

1
00:00:01.350 --> 00:00:05.172
&gt;&gt; Erik Reinert: So let's factor in when
you should use back-end architecture

2
00:00:05.172 --> 00:00:06.610
designs, right?

3
00:00:06.610 --> 00:00:09.661
So the first factor of
an architecture design should really

4
00:00:09.661 --> 00:00:11.750
be the project requirements, right?

5
00:00:11.750 --> 00:00:16.000
The functionality, performance, security,
and scalability needs of the project.

6
00:00:16.000 --> 00:00:20.911
You should be able to answer these
questions really before you even start

7
00:00:20.911 --> 00:00:22.130
making a design.

8
00:00:22.130 --> 00:00:24.890
This is part of the technical
design approach,

9
00:00:24.890 --> 00:00:28.668
which is thinking about the problem
you're trying to solve.

10
00:00:28.668 --> 00:00:33.381
And I do talk about this in the DevOps for
developers course as well,

11
00:00:33.381 --> 00:00:36.936
which we call it hippo,
the 3 W's, who, what and

12
00:00:36.936 --> 00:00:41.835
why, really first is who,
who am I solving this problem for, right?

13
00:00:41.835 --> 00:00:45.690
If you're not solving the problem for
a specific part of the company,

14
00:00:45.690 --> 00:00:48.857
then who really benefits from it, right?

15
00:00:48.857 --> 00:00:51.517
What is the problem you're
trying to solve, right?

16
00:00:51.517 --> 00:00:54.982
If you don't know the problem you're
trying to solve, and you don't know

17
00:00:54.982 --> 00:00:58.459
who you're solving it for, maybe it's
not as valuable as you think it is.

18
00:00:58.459 --> 00:01:02.446
And then why you're trying to solve
that problem is really important.

19
00:01:02.446 --> 00:01:07.150
So these project requirements
can help you before you even

20
00:01:07.150 --> 00:01:12.149
start designing things on how you
can get to where you want to.

21
00:01:12.149 --> 00:01:14.788
This is another big one, team expertise,

22
00:01:14.788 --> 00:01:19.830
we talked about this earlier where
maybe you're a complete go shop, right?

23
00:01:19.830 --> 00:01:22.710
But some reason you saw
somebody who uses Rust,

24
00:01:22.710 --> 00:01:26.610
so now you're really interested into Rust,
right?

25
00:01:26.610 --> 00:01:32.010
Selling that, even though you might
need to, can be very difficult, right?

26
00:01:32.010 --> 00:01:35.010
And so you need to consider
the factors of the experience and

27
00:01:35.010 --> 00:01:39.062
the skill set of the development team
that you're working with, right?

28
00:01:39.062 --> 00:01:43.220
I'm sure each of us at our companies have
that one weird system that some person

29
00:01:43.220 --> 00:01:46.315
made and then left and
now you have no idea how to manage it.

30
00:01:46.315 --> 00:01:51.368
This is a prime example of that, where the
team doesn't understand it but the person

31
00:01:51.368 --> 00:01:56.153
who did do it does and now it's this black
box that nobody can maintain, right?

32
00:01:56.153 --> 00:02:00.058
Team expertise is crucial,
don't do that team to your teammates,

33
00:02:00.058 --> 00:02:01.496
[LAUGH] like just don't,

34
00:02:01.496 --> 00:02:06.163
eventually you might have the opportunity
to do the thing that you want, right?

35
00:02:06.163 --> 00:02:08.428
But again, if it's something that's so

36
00:02:08.428 --> 00:02:12.438
out of left field that nobody can
relate to it, nobody can understand it,

37
00:02:12.438 --> 00:02:15.757
it might not be a good thing to
incorporate into your design.

38
00:02:17.857 --> 00:02:22.110
Budget, so we were just talking about
open source and vendor lock-in and

39
00:02:22.110 --> 00:02:24.046
things like that, right?

40
00:02:24.046 --> 00:02:29.016
Considering your budget,
whether it be engineering hours, right?

41
00:02:29.016 --> 00:02:31.534
How many developers
are gonna be on the project?

42
00:02:31.534 --> 00:02:34.686
How much time are they gonna be
working on the project, right?

43
00:02:34.686 --> 00:02:37.693
That's really important,
those are resources as well.

44
00:02:37.693 --> 00:02:42.693
Guys, developers are resources, okay,
[LAUGH] I don't know how many times I have

45
00:02:42.693 --> 00:02:46.049
to say that, but they are,
nothing is free.

46
00:02:46.049 --> 00:02:47.299
Nothing is free.

47
00:02:47.299 --> 00:02:50.369
You might think that open
source software is free.

48
00:02:50.369 --> 00:02:52.889
No, it's not, you have to maintain it.

49
00:02:52.889 --> 00:02:58.345
You have to be able to support it,
right, that costs.

50
00:02:58.345 --> 00:03:00.488
And sometimes as crazy as it sounds,

51
00:03:00.488 --> 00:03:04.650
it might be easier to lock into a vendor
because they have good pricing.

52
00:03:04.650 --> 00:03:07.773
Now they have an on demand
pricing that's easy to use, and

53
00:03:07.773 --> 00:03:11.422
they also take care of the management
of the system for you, right?

54
00:03:11.422 --> 00:03:17.110
So budget is a huge part of it and just
another side story at Hippo where I work,

55
00:03:17.110 --> 00:03:21.835
we've had situations in the past
where people have come to me and

56
00:03:21.835 --> 00:03:26.551
been like, yeah,
I've only got like a $500 budget.

57
00:03:26.551 --> 00:03:27.581
And I'm like, so

58
00:03:27.581 --> 00:03:31.575
you're gonna do like one thing then
because [LAUGH] that's not a lot.

59
00:03:31.575 --> 00:03:36.211
But it is then going and saying, okay,
you don't have a lot of a budget.

60
00:03:36.211 --> 00:03:38.418
Where can you allocate those resources so

61
00:03:38.418 --> 00:03:41.075
that you're using the most of your time,
right?

62
00:03:41.075 --> 00:03:47.614
Or using the most of your budget or
whatever towards valuable time.

63
00:03:47.614 --> 00:03:50.834
So again, it's not just cloud costs and
things like that.

64
00:03:50.834 --> 00:03:54.663
It's also making sure that
you're considering how

65
00:03:54.663 --> 00:03:58.064
much effort you're gonna
be putting into it.

66
00:03:58.064 --> 00:04:00.607
Time constraints Is a big one, right?

67
00:04:00.607 --> 00:04:04.341
As I said earlier with regards to
exploration and things like that,

68
00:04:04.341 --> 00:04:06.830
if you've only got a week
to build a project,

69
00:04:06.830 --> 00:04:09.794
don't spend five out of
those seven days exploring.

70
00:04:09.794 --> 00:04:12.658
[LAUGH] That's probably not a good idea.

71
00:04:12.658 --> 00:04:17.144
I've definitely done that before,
but I've seen a lot of developers

72
00:04:17.144 --> 00:04:21.934
fail at time constraints, constraining
yourself to again, time boxes so

73
00:04:21.934 --> 00:04:26.723
that you're not overly complicating
the system or you're not making it so

74
00:04:26.723 --> 00:04:29.709
that it takes too long to implement.

75
00:04:29.709 --> 00:04:34.687
Having good time constraints and having
good structure around that can help you

76
00:04:34.687 --> 00:04:39.663
build things faster, help you iterate
quicker, and help you even come back and

77
00:04:39.663 --> 00:04:42.647
maybe do it again a different
way the next time.

78
00:04:42.647 --> 00:04:45.177
Project size and complexity, right?

79
00:04:45.177 --> 00:04:50.269
A good example of that,
again is like the the blog and Kubernetes.

80
00:04:50.269 --> 00:04:54.963
You don't need a massive
system to run a very simple

81
00:04:54.963 --> 00:04:59.343
problem that you're trying to solve,
right?

82
00:04:59.343 --> 00:05:04.293
The larger the project and more complex
may benefit from certain systems, but

83
00:05:04.293 --> 00:05:08.609
smaller projects may benefit
from not even using a system.

84
00:05:08.609 --> 00:05:13.399
And again, we're gonna be talking
about this later on in the course with

85
00:05:13.399 --> 00:05:18.189
the different systems or architectures
that we'll be discussing, and

86
00:05:18.189 --> 00:05:21.030
why it may just be simple
to avoid all of it.

87
00:05:21.030 --> 00:05:24.482
Seriously, it's okay to avoid all
of that complexity if it means

88
00:05:24.482 --> 00:05:26.617
that you're getting to market sooner,

89
00:05:26.617 --> 00:05:30.124
that you have an opportunity to
get it into the users hands.

90
00:05:30.124 --> 00:05:31.354
And I'll be real with you.

91
00:05:31.354 --> 00:05:34.224
Kubernetes is great but if you've
only got one user, it doesn't matter.

92
00:05:34.224 --> 00:05:38.926
[LAUGH] Like it really doesn't so project
size and complexity is really Important.

93
00:05:41.125 --> 00:05:44.977
Maintenance, again,
we've talked about this a lot, right?

94
00:05:44.977 --> 00:05:49.805
How long is it gonna take you to maintain
this thing that you're building, right?

95
00:05:49.805 --> 00:05:53.325
If you're creating something and
then you gotta be like, okay,

96
00:05:53.325 --> 00:05:57.485
now we've gotta set up pager duty for
alerts on off hours and stuff like that,

97
00:05:57.485 --> 00:05:59.608
nobody's gonna look forward to that.

98
00:05:59.608 --> 00:06:01.427
I don't look forward to that.

99
00:06:01.427 --> 00:06:06.245
I am on a pager duty, and I hate it
[LAUGH] but I maintain those systems and

100
00:06:06.245 --> 00:06:11.228
we built them in a way where if the front
end goes down because we decided to

101
00:06:11.228 --> 00:06:13.947
not be serverless or things like that.

102
00:06:13.947 --> 00:06:17.447
Then I'm in charge of that I
have to consider that, right?

103
00:06:17.447 --> 00:06:20.164
And that's a part of it
is how easy is it for

104
00:06:20.164 --> 00:06:23.928
you to maintain the system
that you're creating?

105
00:06:23.928 --> 00:06:28.832
Another good example of that is,
before I started

106
00:06:28.832 --> 00:06:34.108
working at Hippo,
we have one service called POD.

107
00:06:34.108 --> 00:06:36.328
It's a very monolithic application.

108
00:06:36.328 --> 00:06:43.296
It basically predates when
the actual company was created and

109
00:06:43.296 --> 00:06:48.388
I found out through
research that we actually

110
00:06:48.388 --> 00:06:54.016
spent more time and
literal CPU resources on tests

111
00:06:54.016 --> 00:06:59.112
in PRS than we did on
our production cluster.

112
00:06:59.112 --> 00:07:02.296
So literally we're spending
more time managing our like

113
00:07:02.296 --> 00:07:04.098
we were basically a CI company.

114
00:07:04.098 --> 00:07:07.464
I literally walked into a meeting one day
and I said you guys realize that we're

115
00:07:07.464 --> 00:07:10.372
basically just a CI company with
a front end and they were like what?

116
00:07:10.372 --> 00:07:15.322
And I was like yeah like we have thousands
of cores being provisioned daily just

117
00:07:15.322 --> 00:07:19.003
to do tests and
our cluster doesn't even scale this much.

118
00:07:19.003 --> 00:07:22.483
Why are we spending so
much time on testing?

119
00:07:22.483 --> 00:07:28.510
And now we're at a point to where it's
like fractions of what it used to be.

120
00:07:28.510 --> 00:07:33.597
And that's really important is
having that maintenance control and

121
00:07:33.597 --> 00:07:36.939
understanding how easy
it is to maintain it.

122
00:07:36.939 --> 00:07:40.839
Considering technological choices as well,
right?

123
00:07:40.839 --> 00:07:44.291
Keeping track of the latest technological
trends can influence the choice of

124
00:07:44.291 --> 00:07:45.619
the system design.

125
00:07:45.619 --> 00:07:48.029
Be weary with these trends, right?

126
00:07:48.029 --> 00:07:51.203
I'm not saying here that you should
follow all the latest trends and

127
00:07:51.203 --> 00:07:52.159
just adapt to them.

128
00:07:52.159 --> 00:07:55.379
What I'm saying is you should
be aware of them, right?

129
00:07:55.379 --> 00:07:59.484
It's a good thing to know the potential
things that you can do in the future,

130
00:07:59.484 --> 00:08:03.335
things like serverless,
things like microservices, events buses,

131
00:08:03.335 --> 00:08:04.686
things like that.

132
00:08:04.686 --> 00:08:09.816
But it's also good to understand when
you shouldn't use those things, right?

133
00:08:09.816 --> 00:08:14.903
Event bus might sound cool, but if you
don't understand how event systems work,

134
00:08:14.903 --> 00:08:19.044
you could really be shooting
yourself in the foot pretty quickly.

135
00:08:19.044 --> 00:08:24.302
And then going back to maintenance, how
do you maintain that event system, right?

136
00:08:24.302 --> 00:08:29.869
If you don't have good understanding
of those technological choices,

137
00:08:29.869 --> 00:08:32.706
they can hurt you as well as help you.

138
00:08:32.706 --> 00:08:37.128
This one's huge, and
I never see a lot of people doing this,

139
00:08:37.128 --> 00:08:39.797
which is user feedback, right?

140
00:08:39.797 --> 00:08:43.217
Actually talking to your users and
asking their experience.

141
00:08:43.217 --> 00:08:48.039
You might not think that the architecture
somehow relates to them,

142
00:08:48.039 --> 00:08:49.567
but it does, right?

143
00:08:49.567 --> 00:08:54.618
Because what users might be dealing with
might be because of your architecture,

144
00:08:54.618 --> 00:08:55.147
right?

145
00:08:55.147 --> 00:08:58.657
It might be because you designed
something in a specific way.

146
00:08:58.657 --> 00:09:02.126
And so because of that they're
seeing lagged responses or

147
00:09:02.126 --> 00:09:05.610
they're seeing more challenges
in the user experience.

148
00:09:05.610 --> 00:09:10.121
And things like that because you didn't
consider a lot of times I've seen people

149
00:09:10.121 --> 00:09:13.118
just be like,
just throw a loader on it, it's fine.

150
00:09:13.118 --> 00:09:17.040
[LAUGH] That's not always a good solution.

151
00:09:17.040 --> 00:09:21.457
Your users don't like to wait,
especially in the year of 2024.

152
00:09:21.457 --> 00:09:25.926
User's like the attention span of
a user now is like seven seconds.

153
00:09:25.926 --> 00:09:29.276
If you can't get a response within like
five to seven seconds, they're out,

154
00:09:29.276 --> 00:09:30.001
they're done.

155
00:09:30.001 --> 00:09:36.299
They're like this feels slow because we've
become accustom to that user experience.

156
00:09:36.299 --> 00:09:39.457
I'm sure if you guys are scrolling
on apps or things like that and

157
00:09:39.457 --> 00:09:41.394
a video doesn't load, you just skip.

158
00:09:41.394 --> 00:09:45.804
You don't care what that,
that could have been a really cool thing,

159
00:09:45.804 --> 00:09:50.748
but because it didn't load in time and
because you didn't think about that,

160
00:09:50.748 --> 00:09:53.967
that could be an impact and
a consideration.

161
00:09:53.967 --> 00:09:58.781
As a matter of fact, I actually do think,
one company that does a really,

162
00:09:58.781 --> 00:10:01.732
really, really good job
of this is Netflix,

163
00:10:01.732 --> 00:10:06.104
because Netflix constantly
considers like the user experience?

164
00:10:06.104 --> 00:10:09.158
Has anyone noticed that, like nowadays,
when you log into Netflix,

165
00:10:09.158 --> 00:10:12.450
sometimes you don't even
need to use your password?

166
00:10:12.450 --> 00:10:15.620
That's because I actually to
go back to the interview part.

167
00:10:15.620 --> 00:10:19.676
I was actually interviewing at Netflix,
and I was going to work on

168
00:10:19.676 --> 00:10:23.879
that system that was going to make it so
that they could figure out and

169
00:10:23.879 --> 00:10:28.396
authenticate you without actually
having to authenticate you.

170
00:10:28.396 --> 00:10:31.421
They could look at things like your
IP address, where you're coming from,

171
00:10:31.421 --> 00:10:33.646
your network, things like that.

172
00:10:33.646 --> 00:10:36.546
And that was enough to have
a score of being like, okay,

173
00:10:36.546 --> 00:10:41.460
this is the person we expect them to be,
let's get them into the platform quicker.

174
00:10:41.460 --> 00:10:45.420
So, I do think Netflix does
a really good job of user feedback.

175
00:10:45.420 --> 00:10:49.981
Market trends,
this is kind of circumstantial,

176
00:10:49.981 --> 00:10:53.781
but if you work in finance, for example,

177
00:10:53.781 --> 00:10:58.819
considerations of how
financial structures change.

178
00:10:58.819 --> 00:11:03.379
For example I work in
an insurance company, right?

179
00:11:03.379 --> 00:11:10.009
Every year we have to redefine our plans,
our rates for specific states.

180
00:11:10.009 --> 00:11:13.159
There's different rates that we
can provide and things like that.

181
00:11:13.159 --> 00:11:16.456
And we have to follow market trends for
that.

182
00:11:16.456 --> 00:11:19.247
Understanding when things
are going to change and

183
00:11:19.247 --> 00:11:22.827
you having to follow that
flow is really important.

184
00:11:22.827 --> 00:11:27.297
Because if you're not considering that,
that might go back to how easy it is to

185
00:11:27.297 --> 00:11:30.564
maintain that system even
from a developer standpoint.

186
00:11:30.564 --> 00:11:35.059
And to give you an example of this,
I don't know why, but

187
00:11:35.059 --> 00:11:40.740
a long time ago, we decided that
everything should be in JSON files.

188
00:11:40.740 --> 00:11:43.520
All of our rate plans
should be in JSON files.

189
00:11:43.520 --> 00:11:48.750
And now we have thousands [LAUGH] of
JSON files that we have to maintain.

190
00:11:48.750 --> 00:11:54.069
And I'm actually working on a project
right now at my job to figure out how to

191
00:11:54.069 --> 00:11:59.236
make that easier for developers because
our rate changes go years back.

192
00:11:59.236 --> 00:12:01.347
We need like we have to keep that data.

193
00:12:01.347 --> 00:12:04.837
We can't change it, it's immutable, right?

194
00:12:04.837 --> 00:12:06.923
But because the market changes,

195
00:12:06.923 --> 00:12:11.287
because there might be more storms
in Texas versus California.

196
00:12:11.287 --> 00:12:16.227
We have to change those and these become
thousands and thousands of snapshots

197
00:12:16.227 --> 00:12:20.711
that unfortunately, we didn't
really consider where we are today,

198
00:12:20.711 --> 00:12:23.145
how much of a challenge that would be.

199
00:12:23.145 --> 00:12:26.039
And the last one is legal and
regulatory requirements.

200
00:12:26.039 --> 00:12:30.911
So, we don't really deal with this
a ton in America just because we

201
00:12:30.911 --> 00:12:33.209
love selling personal data.

202
00:12:33.209 --> 00:12:38.069
But again, if you work in Europe,
right, or other parts of the world,

203
00:12:38.069 --> 00:12:43.172
you might have other personal data
requirements on how to store that data,

204
00:12:43.172 --> 00:12:45.371
how to share that data, right?

205
00:12:45.371 --> 00:12:47.378
The whole do not sell my information.

206
00:12:47.378 --> 00:12:50.865
That little button alone can
be an entire system of, okay,

207
00:12:50.865 --> 00:12:55.677
how do we make sure that this information
doesn't get leaked, or get exposed, or

208
00:12:55.677 --> 00:12:57.951
get resold or things like that.

209
00:12:57.951 --> 00:12:59.861
So compliance with laws and

210
00:12:59.861 --> 00:13:05.517
regulations may dictate the kind of system
that you create and how you create it.

