WEBVTT

1
00:00:00.070 --> 00:00:01.970
&gt;&gt; Erik Reinert: So
we talked about complexity.

2
00:00:01.970 --> 00:00:03.950
Let's talk about adaptability, right?

3
00:00:03.950 --> 00:00:09.508
Designing systems that adapt to changing
business needs is challenging, right?

4
00:00:09.508 --> 00:00:12.890
It's a challenging part of
building an architecture.

5
00:00:12.890 --> 00:00:17.200
But it is something that
you should consider, right?

6
00:00:17.200 --> 00:00:21.700
Especially, if you have multiple systems,
you don't really want to,

7
00:00:21.700 --> 00:00:26.299
what I would kinda say, keep piling
systems on top of each other, right?

8
00:00:26.299 --> 00:00:29.199
You don't wanna say, well,
we're just gonna do it this way,

9
00:00:29.199 --> 00:00:30.491
this new way this time.

10
00:00:30.491 --> 00:00:32.349
We'll just do it this new way this time.

11
00:00:32.349 --> 00:00:36.129
Then you're gonna have seven different
systems that handle seven different ways.

12
00:00:36.129 --> 00:00:39.509
And then all of those ways have to
be troubleshooted and supported.

13
00:00:39.509 --> 00:00:44.434
And it becomes really challenging, again,
what we call friction at a company, right?

14
00:00:44.434 --> 00:00:49.535
Developers should really only be expected
to handle so much at any given time so

15
00:00:49.535 --> 00:00:53.614
that they can focus on building
the things that they are.

16
00:00:53.614 --> 00:00:55.774
But it's kind of like
going into Costco and

17
00:00:55.774 --> 00:00:57.934
then coming out with a huge grocery cart.

18
00:00:57.934 --> 00:01:01.900
It's gonna take a while for
you to unload that.

19
00:01:01.900 --> 00:01:06.714
And I think adaptability here is
really important to making sure that

20
00:01:06.714 --> 00:01:09.951
you're not overloading the developers, but

21
00:01:09.951 --> 00:01:14.860
at the same time you are considering,
okay, we use HTTP everywhere.

22
00:01:15.870 --> 00:01:18.560
Maybe we don't change that, right?

23
00:01:18.560 --> 00:01:24.325
Or, okay, we use queues everywhere,
maybe we don't need to change that, right?

24
00:01:24.325 --> 00:01:27.874
And that adaptability can also
help you grow and say, okay,

25
00:01:27.874 --> 00:01:32.685
well we made this decision now that we do
this, we can handle all of these this way.

26
00:01:32.685 --> 00:01:37.995
And I talk about this even as well in the
enterprise, cloud infrastructure course.

27
00:01:37.995 --> 00:01:40.705
A common thing is like tiers, right?

28
00:01:40.705 --> 00:01:45.700
So you have a worker tier, then you say,
okay this is how workers process data,

29
00:01:45.700 --> 00:01:46.231
right?

30
00:01:46.231 --> 00:01:51.226
And then you have a, what we call,
a runner tier, which is like Crons, okay,

31
00:01:51.226 --> 00:01:53.796
this is how Crons work, right?

32
00:01:53.796 --> 00:01:57.620
Having less conversation around
a specific technology and

33
00:01:57.620 --> 00:02:02.208
having more of a conversation around
what problems these are solving,

34
00:02:02.208 --> 00:02:05.047
can make that adaptability easier.

35
00:02:05.047 --> 00:02:07.809
And as example again, where I work,

36
00:02:07.809 --> 00:02:12.517
I think we've broken it down to,
five different tiers.

37
00:02:12.517 --> 00:02:15.790
We have a frontend tier,
where all of our frontends go, and

38
00:02:15.790 --> 00:02:19.477
all of those frontends can adapt
on their own in that tier.

39
00:02:19.477 --> 00:02:23.610
We have a backend tier, whereas really
all of our internal services, so

40
00:02:23.610 --> 00:02:25.052
nothing public facing.

41
00:02:25.052 --> 00:02:28.738
That's the first thing to note with
our backend tier, no public facing,

42
00:02:28.738 --> 00:02:30.102
right, whatsoever.

43
00:02:30.102 --> 00:02:34.362
What we decided was to call our public
facing services gateways, right?

44
00:02:34.362 --> 00:02:36.482
They're a gateway into our system.

45
00:02:36.482 --> 00:02:39.812
Is that something that I
learned in a tech course?

46
00:02:39.812 --> 00:02:43.715
No, it was just us trying to figure
out a way of designing this so

47
00:02:43.715 --> 00:02:47.781
that developers know these are private,
these are not, right?

48
00:02:47.781 --> 00:02:52.432
And that adaptability has made it so
we have 50, 60 back-ends, and

49
00:02:52.432 --> 00:02:57.082
it's really easy to add, and
developers have a better focus on, okay,

50
00:02:57.082 --> 00:02:59.691
well, I need this, I can adapt to this.

51
00:03:00.861 --> 00:03:05.791
So we have frontends, backends,
gateways, runners, and workers, and each

52
00:03:05.791 --> 00:03:11.080
one of those solves different problems
that we can adapt and grow if we need to.

53
00:03:11.080 --> 00:03:14.638
Another thing to note about
that adaptability is that

54
00:03:14.638 --> 00:03:19.619
those categorizations make it so
that if I need to change a specific thing,

55
00:03:19.619 --> 00:03:22.642
I don't have to change everything, right?

56
00:03:22.642 --> 00:03:26.903
If I just wanna change frontend so
that they can support serverless or

57
00:03:26.903 --> 00:03:29.185
server side rendering or whatever.

58
00:03:29.185 --> 00:03:32.419
Then all I have to do is focus
on that one component or

59
00:03:32.419 --> 00:03:37.159
that one tier rather than saying, okay,
how do I think about this thing and

60
00:03:37.159 --> 00:03:39.432
how it works with everything else?

61
00:03:39.432 --> 00:03:43.609
There's a bit of a separation there, that
I have more flexibility with working with.

62
00:03:43.609 --> 00:03:47.409
So here's a good design of
kind of this adaptability.

63
00:03:49.089 --> 00:03:53.509
With Quirk and what we're doing now,
we're doing a lot of serverless.

64
00:03:53.509 --> 00:03:58.468
And the main thing I want you to take away
from this design is the patterns that

65
00:03:58.468 --> 00:04:00.279
we have here.

66
00:04:00.279 --> 00:04:04.237
Basically, we have
multiple entry points for

67
00:04:04.237 --> 00:04:11.247
different types of the system that then
work the same for each component, right?

68
00:04:11.247 --> 00:04:15.357
Now this is actually for our logging and
how we do metrics and things like that.

69
00:04:15.357 --> 00:04:17.967
But because we have tons of lambdas,

70
00:04:17.967 --> 00:04:22.438
we wanna be able to have a similar
process for each one of those.

71
00:04:22.438 --> 00:04:24.538
But if we change those and adapt them,

72
00:04:24.538 --> 00:04:27.978
we should be able to change
them all at the same time.

73
00:04:27.978 --> 00:04:32.807
And so in this scenario, we have
lambdas going to a internal forwarder,

74
00:04:32.807 --> 00:04:37.918
which then has its own autoscaler,
which sends out to Grafana Cloud.

75
00:04:37.918 --> 00:04:43.707
Again, the main takeaway here is that
we decoupled these different parts so

76
00:04:43.707 --> 00:04:48.234
that we can change or
grow different parts if we need to.

77
00:04:48.234 --> 00:04:53.230
Like I said, we will have tons of lambdas,
but we don't wanna have to go into each

78
00:04:53.230 --> 00:04:57.574
lambda and figure out how we're
gonna forward that traffic, right?

79
00:04:57.574 --> 00:05:02.428
So what we did was, we decoupled that and
made a forward itself so that then we can

80
00:05:02.428 --> 00:05:07.065
adapt in the future and say, okay, well,
if we change the metrics we send or

81
00:05:07.065 --> 00:05:10.921
things like that, we only have
to change those in the lambdas.

82
00:05:10.921 --> 00:05:13.885
We don't also have to change
where they're being sent to or

83
00:05:13.885 --> 00:05:17.211
how we're batch processing them or
things like that.

84
00:05:17.211 --> 00:05:19.882
And another nice thing about this is that,

85
00:05:19.882 --> 00:05:24.848
this design could potentially support
not just lambdas, but other things.

86
00:05:24.848 --> 00:05:28.901
Because we've designed it in a way where
the forter can kind of be plug and

87
00:05:28.901 --> 00:05:31.638
played with many different components.

88
00:05:31.638 --> 00:05:35.483
It doesn't matter if it's a lambda or
a service or anything like that,

89
00:05:35.483 --> 00:05:39.470
we built it so that it can adapt and
we can get that telemetry out of the box.

90
00:05:39.470 --> 00:05:44.436
So security is also really important to
backend architecture design for a lot of

91
00:05:44.436 --> 00:05:49.490
reasons, maybe you have legal requirements
that you need to be able to satisfy.

92
00:05:49.490 --> 00:05:54.012
Maybe you also have
other policies that your

93
00:05:54.012 --> 00:05:58.296
SecOps team wants you to follow, right?

94
00:05:58.296 --> 00:06:03.203
And I would say, more often than not
a lot of places consider security to be

95
00:06:03.203 --> 00:06:07.204
one of the last things that
you think about, right?

96
00:06:07.204 --> 00:06:12.042
Whether it be internal security,
how many people actually have

97
00:06:12.042 --> 00:06:15.994
authorization between
services at where you work?

98
00:06:17.284 --> 00:06:20.134
Okay, two, okay, kind of, yeah.

99
00:06:20.134 --> 00:06:25.478
It's very common to say, well, it's in the
Internet, or it's in internal networks.

100
00:06:25.478 --> 00:06:28.548
Don't worry about it,
they can talk to each other, right?

101
00:06:28.548 --> 00:06:33.541
But if somebody gets into those internal
networks, even though you might think they

102
00:06:33.541 --> 00:06:37.348
might not, it could still show
as a really big problem, right?

103
00:06:37.348 --> 00:06:40.802
And so considering the security
of these services, even how

104
00:06:40.802 --> 00:06:46.247
they authenticate with each other, the
complexity of that is really important.

105
00:06:46.247 --> 00:06:50.023
Even something as simple as
having rotated passphrases or

106
00:06:50.023 --> 00:06:54.437
keys that each service can use
to communicate with each other.

107
00:06:54.437 --> 00:06:56.819
This is something we did where I work,

108
00:06:56.819 --> 00:07:00.737
where we just created what
are called consumer secrets.

109
00:07:00.737 --> 00:07:04.403
And we loaded those in from vault,
and then whenever a service started it

110
00:07:04.403 --> 00:07:08.430
had its own consumer secret and those
secrets were shared between services, so

111
00:07:08.430 --> 00:07:11.927
that they knew how to
communicate with each other.

112
00:07:11.927 --> 00:07:16.558
Not super scalable, especially when you
have 100 services or something like that.

113
00:07:16.558 --> 00:07:20.627
But at least it gives you some kind of
system that you can iterate off of and

114
00:07:20.627 --> 00:07:25.628
say okay, we'll rotate consumer secrets
every week, every month, whatever.

115
00:07:25.628 --> 00:07:28.218
And then we don't have to worry
about the security of that.

116
00:07:28.218 --> 00:07:32.767
Another thing to note about security
is maybe your service becomes

117
00:07:32.767 --> 00:07:34.808
public by accident, right?

118
00:07:34.808 --> 00:07:39.173
This is actually very common as well,
where maybe it's not deployed properly or

119
00:07:39.173 --> 00:07:43.536
the routing is set up wrong, or rules are,
permissions are firewall whatever,

120
00:07:43.536 --> 00:07:45.742
aren't set the way that they should be.

121
00:07:45.742 --> 00:07:50.530
And so because of that, now a service is
accessible SecOps is freaking out and

122
00:07:50.530 --> 00:07:53.193
you're kind of scared for
your job [LAUGH].

123
00:07:53.193 --> 00:07:57.039
Yeah, security is important man,
you really need to think about it.

124
00:07:57.039 --> 00:08:03.524
Not having any kind of security around
something can cost millions of dollars.

125
00:08:03.524 --> 00:08:08.184
And again,
I work at a billion dollar company.

126
00:08:08.184 --> 00:08:13.097
We're insurance and we have a lot of
customer data that even if a little

127
00:08:13.097 --> 00:08:18.093
bit of it got leaked, we're talking
about not even just it got leaked,

128
00:08:18.093 --> 00:08:21.864
but also potentially getting sued or
fined, right?

129
00:08:21.864 --> 00:08:26.275
And it might not even mean that
it actually leaked anything, but

130
00:08:26.275 --> 00:08:32.510
that potential and that not knowing could
be detrimental to what you're doing.

131
00:08:32.510 --> 00:08:36.853
So security is a pretty massive concern
when talking about architecture.

