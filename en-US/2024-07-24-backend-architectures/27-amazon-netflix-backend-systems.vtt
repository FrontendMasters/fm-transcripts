WEBVTT

1
00:00:00.000 --> 00:00:04.060
&gt;&gt; Erik: Who uses
Backend System Architectures?

2
00:00:04.060 --> 00:00:08.591
Again, I love this gif because this is
how I feel like a lot of people feel when

3
00:00:08.591 --> 00:00:11.751
they're first getting is this,
who can I relate to?

4
00:00:11.751 --> 00:00:13.360
Where are these people and

5
00:00:13.360 --> 00:00:17.397
how can I understand how they're
doing the things that they are?

6
00:00:17.397 --> 00:00:19.888
So we're gonna talk really
quickly about Amazon.

7
00:00:19.888 --> 00:00:22.190
We're gonna talk about four
companies in total and

8
00:00:22.190 --> 00:00:24.393
the first one we're gonna
talk about is Amazon.

9
00:00:24.393 --> 00:00:28.622
So Amazon utilizes a microservices
architecture to manage its

10
00:00:28.622 --> 00:00:29.906
vast operations.

11
00:00:29.906 --> 00:00:33.167
And let's be clear, Amazon is vast.

12
00:00:33.167 --> 00:00:36.813
I mean, they're at the point now
where people aren't even maintaining

13
00:00:36.813 --> 00:00:39.994
the warehouses anymore,
it's all automated and guess what?

14
00:00:39.994 --> 00:00:43.140
Those are run-on distributed systems,
right?

15
00:00:43.140 --> 00:00:47.968
So Amazon has figured out a way of what's
called dogfooding, or basically saying,

16
00:00:47.968 --> 00:00:52.525
hey, I'm gonna to build an architecture
that I can reuse in multiple places and

17
00:00:52.525 --> 00:00:54.442
grow and keep building on top of.

18
00:00:54.442 --> 00:00:59.123
And that's a really, really, really
powerful tool to be able to reuse logic

19
00:00:59.123 --> 00:01:03.748
that you've already created gives more
value to that logic and saves time.

20
00:01:03.748 --> 00:01:08.344
So each microservice functions
independently facilitating teams to modify

21
00:01:08.344 --> 00:01:10.967
their services without affecting others.

22
00:01:10.967 --> 00:01:15.693
This approach has propelled Amazon
scalability and innovation.

23
00:01:15.693 --> 00:01:17.544
With each of these examples,

24
00:01:17.544 --> 00:01:21.551
I have included a diagram to come
kind of show you where they are.

25
00:01:21.551 --> 00:01:25.740
And so the first diagram we're gonna
look at is Amazon's Backend System or

26
00:01:25.740 --> 00:01:27.477
one of their Backend Systems.

27
00:01:27.477 --> 00:01:30.540
Now, these diagrams that I
found are official diagrams.

28
00:01:30.540 --> 00:01:33.814
These aren't diagrams I found on
some random blogger's websites.

29
00:01:33.814 --> 00:01:37.980
These are actually from their own blogs or
their own documentation.

30
00:01:37.980 --> 00:01:42.825
And so this is a good example of showing
how they handle a lot of different things,

31
00:01:42.825 --> 00:01:46.834
Suppliers, Transporters,
Consumers, Stores, Warehouses.

32
00:01:46.834 --> 00:01:50.715
They have enterprise planning,
Scanners, RFID readers, AWS IOT,

33
00:01:50.715 --> 00:01:54.333
they have Temp and Geo Sensors,
they have Sitewise connectors,

34
00:01:54.333 --> 00:01:56.727
they have Transport Management Systems.

35
00:01:56.727 --> 00:02:00.680
District Order Managers,
they have Warehouse Management Systems,

36
00:02:00.680 --> 00:02:03.293
they have Store Inventory Managers, right?

37
00:02:03.293 --> 00:02:08.124
All these different components are built
and put in place to solve problems.

38
00:02:08.124 --> 00:02:11.990
And then as you look,
you can see that they slowly start

39
00:02:11.990 --> 00:02:16.293
utilizing their own software or
their own infrastructure.

40
00:02:16.293 --> 00:02:21.573
Amazon store and
Amazon shipping would not be where

41
00:02:21.573 --> 00:02:26.743
it is today if it wasn't for
Amazon Cloud, okay?

42
00:02:26.743 --> 00:02:31.137
I really want you guys to
understand what Jeff Bezos did and

43
00:02:31.137 --> 00:02:36.428
how he made this company so profitable,
because everything they do,

44
00:02:36.428 --> 00:02:39.763
they build on top of
what they already have.

45
00:02:39.763 --> 00:02:41.258
It's all in-house,

46
00:02:41.258 --> 00:02:45.823
and they all solve specific problems
that they were able to resell for

47
00:02:45.823 --> 00:02:51.030
other companies and other things that
are needing to solve similar problems.

48
00:02:51.030 --> 00:02:55.249
That's how we got IoT Core,
that's how we got Kinesis Data Streams.

49
00:02:55.249 --> 00:03:00.874
That's how we got Textract, Comprehend,
API Gateway, Lambda, DynamoDB, Pinpoint.

50
00:03:00.874 --> 00:03:05.260
SageMaker, Forecast,
Lake Formation, Redshift, S3,

51
00:03:05.260 --> 00:03:09.825
IoT Analytics and QuickSight,
they built it for themselves.

52
00:03:09.825 --> 00:03:13.721
That means that Amazon's
number one user is Amazon, and

53
00:03:13.721 --> 00:03:18.690
that's really powerful when you
talk about building systems, right?

54
00:03:18.690 --> 00:03:21.601
When you're able to look at
your own problems and say,

55
00:03:21.601 --> 00:03:25.416
how can we dog food this and make it so
that we're solving it ourselves.

56
00:03:25.416 --> 00:03:27.245
It's really powerful than saying,

57
00:03:27.245 --> 00:03:30.258
okay, we're gonna just lean
on another provider, right?

58
00:03:30.258 --> 00:03:35.288
And so Amazon, the only downtime they
really experience is with Amazon, right?

59
00:03:35.288 --> 00:03:39.813
They don't really have to deal with third
party providers or other things like that.

60
00:03:39.813 --> 00:03:44.113
And that's what made them so
powerful because once they built this

61
00:03:44.113 --> 00:03:48.278
incredibly robust and
extensible system, they could sell it.

62
00:03:48.278 --> 00:03:52.178
And this is why Amazon as a web
service is one of the most

63
00:03:52.178 --> 00:03:54.878
powerhouses in the industry today.

64
00:03:54.878 --> 00:03:58.756
They're not just solving your problems,
they're solving their own.

65
00:03:58.756 --> 00:04:01.960
And this chart really should
show you the evolution of how

66
00:04:01.960 --> 00:04:05.172
many things they've built to
solve their own problems.

67
00:04:08.593 --> 00:04:11.115
&gt;&gt; Erik: The next one is Netflix, right?

68
00:04:11.115 --> 00:04:15.434
Netflix employs a hybrid of serverless and
microservice architectures to provide

69
00:04:15.434 --> 00:04:18.160
streaming services to
millions of users globally.

70
00:04:18.160 --> 00:04:22.347
This architecture enables Netflix to
manage enormous traffic surges and

71
00:04:22.347 --> 00:04:24.380
deliver a smooth user experience.

72
00:04:24.380 --> 00:04:26.426
How often do you see Netflix lag?

73
00:04:28.497 --> 00:04:33.389
&gt;&gt; Erik: It's because they have put
billions of dollars into figuring out how

74
00:04:33.389 --> 00:04:35.675
to solve that problem, right?

75
00:04:35.675 --> 00:04:38.165
Again, people that I know at Netflix and

76
00:04:38.165 --> 00:04:41.984
even people who you may know work
at Netflix did what they did.

77
00:04:41.984 --> 00:04:47.195
They were specific problem solver for
the massive, massive tool chain and

78
00:04:47.195 --> 00:04:51.261
massive infrastructure that
Netflix provides, right?

79
00:04:51.261 --> 00:04:56.931
And so they have had specific people
try and just solve latency problems of

80
00:04:56.931 --> 00:05:02.432
connectability or start times of
watching a video or things like that.

81
00:05:02.432 --> 00:05:07.143
Because they have grown to this
massive microservice scale.

82
00:05:07.143 --> 00:05:11.481
Now, what I know about Netflix is that
a lot of it is microservice driven.

83
00:05:11.481 --> 00:05:15.211
I know that they use Lambdas and
serverless and stuff like that, but

84
00:05:15.211 --> 00:05:19.472
they still heavily rely on microservices
as a way of joining those two teams.

85
00:05:19.472 --> 00:05:24.136
So Netflix has a really high
expectation basically of saying,

86
00:05:24.136 --> 00:05:28.712
okay, this team owns this thing,
this team owns this thing,

87
00:05:28.712 --> 00:05:33.125
this team owns this thing,
and that's all you do, right?

88
00:05:33.125 --> 00:05:39.796
Which can be fun but can also be kind of
boring depending on how you look at it.

89
00:05:39.796 --> 00:05:44.155
However, when you think about
what they've made, this, for

90
00:05:44.155 --> 00:05:47.375
example, is a chart of
their Video Services.

91
00:05:47.375 --> 00:05:50.507
Where they have Time Text Services,
they have Audio Services,

92
00:05:50.507 --> 00:05:54.451
they have Packaging Services, they have
Streaming Workflow Orchestrators and

93
00:05:54.451 --> 00:05:56.137
Studio Workflow Orchestrators.

94
00:05:56.137 --> 00:05:57.304
These are things for

95
00:05:57.304 --> 00:06:01.081
editing videos and then shipping
them directly to the platform.

96
00:06:01.081 --> 00:06:05.638
These are things like streaming videos and
shipping them directly to users.

97
00:06:05.638 --> 00:06:10.122
They have in Video Inspection Service and
a Ladder Generation Service and

98
00:06:10.122 --> 00:06:13.667
Video Encoding Service and
a Video Validation Service and

99
00:06:13.667 --> 00:06:17.153
Complex Analysis Services and
Video Quality Services.

100
00:06:17.153 --> 00:06:19.618
These are all things that
solve specific problems.

101
00:06:19.618 --> 00:06:23.485
You're not seeing anything here
that says back in front in, right?

102
00:06:23.485 --> 00:06:28.307
This is what microservices and service
architecture really looks like when

103
00:06:28.307 --> 00:06:32.539
you're solving specific problems
within your company, right?

104
00:06:32.539 --> 00:06:37.189
This is a really good example of what
it looks like of solving problems with

105
00:06:37.189 --> 00:06:38.242
architecture.

106
00:06:40.434 --> 00:06:42.340
&gt;&gt; Erik: There's another
thing I do wanna note,

107
00:06:42.340 --> 00:06:44.870
which is they have something
called Netflix Cosmos.

108
00:06:44.870 --> 00:06:49.024
Cosmos is a computing platform that
combines the best aspects of microservices

109
00:06:49.024 --> 00:06:52.002
with asynchronous workflows and
serverless function.

110
00:06:52.002 --> 00:06:54.924
So I did wanna show you a little bit
of the serverless side of things.

111
00:06:54.924 --> 00:06:59.761
But what you're gonna note about this
itty-bitty little diagram that I took from

112
00:06:59.761 --> 00:07:04.038
their blog is that it's actually
a microservice that fires a workflow,

113
00:07:04.038 --> 00:07:06.228
which fires serverless functions.

114
00:07:06.228 --> 00:07:11.216
So they are even going as far as to glue
all of these components together to find

115
00:07:11.216 --> 00:07:12.539
the best solution.

116
00:07:12.539 --> 00:07:16.856
And this is really what I mean by good
architecture design of saying, well,

117
00:07:16.856 --> 00:07:20.473
I'm not just gonna do a monolith,
I'm not just gonna do services,

118
00:07:20.473 --> 00:07:22.394
I'm not just gonna do serverless.

119
00:07:22.394 --> 00:07:24.750
I'm gonna glue these
components together so

120
00:07:24.750 --> 00:07:27.789
that they have a really good
harmony in working together.

121
00:07:27.789 --> 00:07:31.306
Specific components can scale
as far as they need, but

122
00:07:31.306 --> 00:07:36.812
then other components don't have to have
these other requirements of serverless and

123
00:07:36.812 --> 00:07:39.880
can scale on their own
specific requirements.

124
00:07:39.880 --> 00:07:44.838
Again, Netflix has done a really great job
of showing a lot of people how to build

125
00:07:44.838 --> 00:07:49.068
these kinds of complex but
really good problem-solving systems.

