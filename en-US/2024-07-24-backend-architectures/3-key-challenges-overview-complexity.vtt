WEBVTT

1
00:00:00.000 --> 00:00:02.504
&gt;&gt; Erik: So let's talk about
the key challenges, right?

2
00:00:02.504 --> 00:00:06.029
These are always fun because
these are what most people deal

3
00:00:06.029 --> 00:00:09.283
with when talking about
doing architecture designs.

4
00:00:09.283 --> 00:00:13.279
There's a lot of challenges with
building architecture designs.

5
00:00:13.279 --> 00:00:18.033
And as you go higher up at a company or
you deal with more people,

6
00:00:18.033 --> 00:00:21.731
basically, you have more challenges,
right?

7
00:00:21.731 --> 00:00:24.426
If you're just building
a system by yourself, sure,

8
00:00:24.426 --> 00:00:28.236
you might deal with things like
complexity, adaptability, security, and

9
00:00:28.236 --> 00:00:30.659
technology, and
even potentially resources.

10
00:00:30.659 --> 00:00:34.807
But I think the last one there,
which is also incredibly important,

11
00:00:34.807 --> 00:00:38.468
especially if you work at a company,
is your stakeholders.

12
00:00:38.468 --> 00:00:41.964
And we'll talk about each
one of these in more detail.

13
00:00:41.964 --> 00:00:46.237
But again, the main challenges that we're
gonna go over are the complexity of

14
00:00:46.237 --> 00:00:51.157
an architecture design, the adaptability
of it, the security around it, technology,

15
00:00:51.157 --> 00:00:54.288
resources, and then,
as I mentioned, stakeholders.

16
00:00:57.980 --> 00:01:02.711
&gt;&gt; Erik: First one, and this is probably
hands down the one that people deal

17
00:01:02.711 --> 00:01:05.426
with the most, which is complexity.

18
00:01:05.426 --> 00:01:09.580
I personally have struggled
with this a lot in the past

19
00:01:09.580 --> 00:01:12.268
because I'm slightly autistic.

20
00:01:12.268 --> 00:01:15.819
Building wireframes and charts for
me is very soothing, and so

21
00:01:15.819 --> 00:01:18.700
I can spend four hours
building an architecture and

22
00:01:18.700 --> 00:01:22.190
then go step back and go like,
my gosh, this is spaghetti.

23
00:01:22.190 --> 00:01:27.870
You really want to think of the complexity
of the system while you're building it.

24
00:01:27.870 --> 00:01:31.739
A lot of times, the higher, or
the more often you distribute,

25
00:01:31.739 --> 00:01:36.422
the more often you spread out,
the more that complexity enhances, right?

26
00:01:36.422 --> 00:01:40.341
So you wanna think about handling
the intricate details and

27
00:01:40.341 --> 00:01:44.415
interdependencies in a system
before they become too plex and

28
00:01:44.415 --> 00:01:48.411
basically completely,
what's the word I'm looking for,

29
00:01:48.411 --> 00:01:52.278
uncharitable to other teams or
things like that, right?

30
00:01:52.278 --> 00:01:55.726
If you have to sit in a meeting and
share something for like 20 minutes and

31
00:01:55.726 --> 00:01:58.895
then nobody understands what you
just talked about, I'm sorry but

32
00:01:58.895 --> 00:02:01.806
you actually failed not them
that they don't understand it.

33
00:02:01.806 --> 00:02:06.496
I know that you might feel that way,
but no, it's that you actually

34
00:02:06.496 --> 00:02:11.534
might have made too complex of a system
that was too hard to communicate.

35
00:02:11.534 --> 00:02:13.516
Here's a good example of that.

36
00:02:13.516 --> 00:02:17.415
This is actually one of
the first systems I ever built.

37
00:02:17.415 --> 00:02:23.852
And this was probably when I first started
getting into architecture designs.

38
00:02:23.852 --> 00:02:28.569
This is actually the V1 of
the content creator tools platform

39
00:02:28.569 --> 00:02:31.209
that I'm building called Quirk.

40
00:02:31.209 --> 00:02:39.356
I had originally built this as kind
of an explorative opportunity for me.

41
00:02:39.356 --> 00:02:41.715
I was working on a project by myself,

42
00:02:41.715 --> 00:02:45.533
I wanted to work with a lot of
new systems and try new things.

43
00:02:45.533 --> 00:02:51.213
What I didn't realize was the complexities
that I had created had become so much

44
00:02:51.213 --> 00:02:57.086
that I really needed a team of 10 people
to manage that system after I created it.

45
00:02:57.086 --> 00:03:02.224
And to showcase that a little bit further,
the users are on the left,

46
00:03:02.224 --> 00:03:06.123
so you have the main users
who access the system, and

47
00:03:06.123 --> 00:03:11.897
then you have the developers who actually
need to access to build the system.

48
00:03:11.897 --> 00:03:16.838
As we go from left to right, the users
will send requests to like an ingress,

49
00:03:16.838 --> 00:03:19.480
so something like CloudFlare, right?

50
00:03:19.480 --> 00:03:21.895
Then that will go to like a load balancer,

51
00:03:21.895 --> 00:03:26.656
which I was really interested in getting
more comfortable with WAFs at the time and

52
00:03:26.656 --> 00:03:29.909
figuring out how to work with CDNs and
things like that.

53
00:03:29.909 --> 00:03:32.643
But I also really wanted
to work with Kubernetes,

54
00:03:32.643 --> 00:03:35.703
which if anybody here has
ever used Kubernetes before,

55
00:03:35.703 --> 00:03:40.408
you probably know that that's not a very
simple system, especially for one person.

56
00:03:40.408 --> 00:03:44.822
But I was very adamant on using
Kubernetes because I wanted to try it.

57
00:03:44.822 --> 00:03:49.292
But if anybody here has ever built a
system before, you can immediately look at

58
00:03:49.292 --> 00:03:53.371
this and go like, this person kinda
didn't know what they were doing.

59
00:03:53.371 --> 00:03:58.264
And so I wanted to figure
out distributed services.

60
00:03:58.264 --> 00:04:00.039
And I went as far as even,

61
00:04:00.039 --> 00:04:04.864
you'll notice in the middle there
with the little purple squares,

62
00:04:04.864 --> 00:04:09.956
I went as far as to running my own
serverless framework called Knative.

63
00:04:09.956 --> 00:04:11.258
Why did I do this?

64
00:04:11.258 --> 00:04:12.557
I have no idea.

65
00:04:12.557 --> 00:04:16.089
When I could have just used AWS Lambdas,
which already existed,

66
00:04:16.089 --> 00:04:20.339
which already had robustness,
extensibility, all these things around it.

67
00:04:20.339 --> 00:04:24.141
But, again, I wanted to be able to
learn how does serverless work?

68
00:04:24.141 --> 00:04:25.844
How do you deal with it?

69
00:04:25.844 --> 00:04:31.703
And again, I think a big takeaway here
is that the more complexity you add,

70
00:04:31.703 --> 00:04:34.122
the more that you own, right?

71
00:04:34.122 --> 00:04:39.131
If you are one person,
you probably cannot maintain something

72
00:04:39.131 --> 00:04:45.384
like this at scale without never sleeping,
which I don't recommend, yeah.

73
00:04:45.384 --> 00:04:49.967
&gt;&gt; Speaker 1: Someone's online says
they only know one thing on that chart,

74
00:04:49.967 --> 00:04:51.268
which is the API.

75
00:04:51.268 --> 00:04:52.144
&gt;&gt; Erik: Yeah.

76
00:04:52.144 --> 00:04:56.990
&gt;&gt; Speaker 1: And things like load
balancers and etc are newer to them.

77
00:04:56.990 --> 00:04:59.083
&gt;&gt; Erik: Yeah, I mean, in all honesty,

78
00:04:59.083 --> 00:05:03.051
it was It was some of these things
were new to me as well [LAUGH].

79
00:05:03.051 --> 00:05:07.768
And if a system becomes too
complex to where you show somebody

80
00:05:07.768 --> 00:05:11.931
something like this, and
then they immediately go,

81
00:05:11.931 --> 00:05:17.685
you might need to even figure out
better ways of showing that complexity.

82
00:05:17.685 --> 00:05:21.171
There might be reason why you
have complexity, I'm not saying

83
00:05:21.171 --> 00:05:25.576
Kubernetes is bad, I love Kubernetes I
use it at work, I actually just recently

84
00:05:25.576 --> 00:05:30.481
designed our new infrastructure that will
be running entirely on Kubernetes, right?

85
00:05:30.481 --> 00:05:34.755
But what I realized when I was going
through that process was domains, right,

86
00:05:34.755 --> 00:05:37.164
figuring out how to separate these things.

87
00:05:37.164 --> 00:05:42.906
So maybe we just show the backend for
a specific team and how that domain works,

88
00:05:42.906 --> 00:05:48.650
right, or how we can separate routing
from inter-service communication and

89
00:05:48.650 --> 00:05:52.318
things like that,
like external from internal.

90
00:05:52.318 --> 00:05:57.054
Complexity sometimes is required and just
throwing it all in one huge chart like

91
00:05:57.054 --> 00:06:01.295
this and kind of making like a where's
Waldo, doesn't really help and

92
00:06:01.295 --> 00:06:05.619
that's probably the biggest thing I
want to be able to showcase, yeah.

93
00:06:05.619 --> 00:06:09.983
&gt;&gt; Speaker 2: You talked about
a structured approach to complex problems.

94
00:06:09.983 --> 00:06:14.007
And then you have
the content media platform.

95
00:06:14.007 --> 00:06:18.759
Can you talk a little bit about
the questions that you would ask to

96
00:06:18.759 --> 00:06:23.424
sort of arrive at this content
platform is where I wanna end up?

97
00:06:23.424 --> 00:06:24.347
&gt;&gt; Erik: Yeah.

98
00:06:24.347 --> 00:06:27.691
&gt;&gt; Speaker 2: What are some of those steps
that would lead whether it's this complex

99
00:06:27.691 --> 00:06:28.320
or simpler?

100
00:06:28.320 --> 00:06:30.740
&gt;&gt; Erik: Yeah, okay.

101
00:06:30.740 --> 00:06:33.181
I think always having a North Star and

102
00:06:33.181 --> 00:06:37.212
what problem you're trying to
solve is important, right?

103
00:06:37.212 --> 00:06:41.831
I think one of the things that
is in the system that doesn't

104
00:06:41.831 --> 00:06:46.825
really do a good job of showcasing
it is every one of those orange

105
00:06:46.825 --> 00:06:51.747
things is basically a container
solving a specific problem.

106
00:06:51.747 --> 00:06:56.257
You can see that the API in the top
left-hand corner is really focused on just

107
00:06:56.257 --> 00:07:00.647
serving the frontend requests,
things like that, one problem solved.

108
00:07:00.647 --> 00:07:04.332
I now have solved where my
frontend requests go, right?

109
00:07:04.332 --> 00:07:08.868
However, maybe we also have WebSocket
requirements that we need, and

110
00:07:08.868 --> 00:07:12.876
we don't want those to be coupled
with the API because they're

111
00:07:12.876 --> 00:07:15.238
two different transports, right?

112
00:07:15.238 --> 00:07:20.038
HTTP is normally what you use for an API,
which is just normal transactional

113
00:07:20.038 --> 00:07:24.392
requests, but then say, okay,
I wanna interact with real-time.

114
00:07:24.392 --> 00:07:26.388
Should you join those together?

115
00:07:26.388 --> 00:07:28.218
Should you separate them?

116
00:07:28.218 --> 00:07:30.476
That's kind of a North Star as well.

117
00:07:30.476 --> 00:07:32.298
It's like,
do you wanna keep those together?

118
00:07:32.298 --> 00:07:36.518
Do you want to scale your API and
your WebSockets together?

119
00:07:36.518 --> 00:07:38.606
Do you wanna separate them?

120
00:07:38.606 --> 00:07:43.327
And then as we kina move further in the
architecture, you'll see that there's like

121
00:07:43.327 --> 00:07:47.713
a Twitch bot there, which allows me to
handle all of the Twitch connections and

122
00:07:47.713 --> 00:07:49.324
all of the Twitch messages.

123
00:07:49.324 --> 00:07:51.017
There's a Discord bot in there.

124
00:07:51.017 --> 00:07:56.170
And that separation is, okay,
well, I know I could create a bot,

125
00:07:56.170 --> 00:08:01.426
but do I want my Twitch logic and
my Discord logic together, right?

126
00:08:01.426 --> 00:08:04.774
So those are kinda the questions
you wanna ask yourself is like,

127
00:08:04.774 --> 00:08:06.574
what problem am I trying to solve?

128
00:08:06.574 --> 00:08:08.962
And am I solving it too complex?

129
00:08:08.962 --> 00:08:10.670
Is it too simple, right?

130
00:08:10.670 --> 00:08:15.422
Going into the scaling and
robustness and things like that.

131
00:08:15.422 --> 00:08:18.772
One of the things that I would say,
for example,

132
00:08:18.772 --> 00:08:22.614
that was probably a bit overkill was,
in this example,

133
00:08:22.614 --> 00:08:27.716
the Twitch bot really just fires a lambda
for every time a message is sent.

134
00:08:27.716 --> 00:08:31.055
Scaling that is not a good thing [LAUGH],
right?

135
00:08:31.055 --> 00:08:35.872
Especially if you are using something
like AWS lambda and you have millions of

136
00:08:35.872 --> 00:08:40.760
requests coming in, it may just be better
to have it all in one bot, right, and

137
00:08:40.760 --> 00:08:44.343
have that just be a process
that's running all the time.

138
00:08:44.343 --> 00:08:48.553
So considering, again,
what problem you're trying to solve,

139
00:08:48.553 --> 00:08:53.220
as well as how complex you wanna solve,
it should be able to help guide you

140
00:08:53.220 --> 00:08:56.906
with those specific components
you're trying to make.

141
00:08:56.906 --> 00:08:58.725
Does that answer your question?

142
00:08:58.725 --> 00:08:59.506
&gt;&gt; Speaker 2: That's helpful.

143
00:08:59.506 --> 00:09:00.459
&gt;&gt; Erik: Okay, cool, awesome.

144
00:09:00.459 --> 00:09:05.822
Yeah, don't be afraid to
start simple as well.

145
00:09:05.822 --> 00:09:08.603
I know there's a lot of egos
in our industry [LAUGH],

146
00:09:08.603 --> 00:09:12.094
but the reality of it is, is,
if you're building the system for

147
00:09:12.094 --> 00:09:15.739
the requirements that you need,
everyone else can shut up [LAUGH].

148
00:09:15.739 --> 00:09:19.869
It's true, and I've been in many
conversations with that where somebody

149
00:09:19.869 --> 00:09:22.173
will say, well, it's too simple.

150
00:09:22.173 --> 00:09:24.273
And I'm like, well,
have you done this before?

151
00:09:24.273 --> 00:09:25.309
And they're like, whoa.

152
00:09:25.309 --> 00:09:28.701
And I'm like, okay, well,
then let's try this first, and

153
00:09:28.701 --> 00:09:32.173
see the easier approach before
we make it overly complicated.

154
00:09:32.173 --> 00:09:35.851
And that is even something that
I would lean on more than not.

155
00:09:35.851 --> 00:09:38.108
The biggest thing you wanna
do is save your time.

156
00:09:38.108 --> 00:09:42.315
And this architecture
did not save me time,

157
00:09:42.315 --> 00:09:46.755
this architecture also
did not save me money.

158
00:09:46.755 --> 00:09:49.039
I think it was like 500 dollars a month.

159
00:09:49.039 --> 00:09:55.265
And again, I'm just like a balling on a
budget [LAUGH], don't have a lot of money.

160
00:09:55.265 --> 00:09:58.320
We're taking it, put subscribers,
by the way, subscribe.

161
00:09:58.320 --> 00:10:01.238
&gt;&gt; Speaker 3: [LAUGH].
But yeah, no, seriously this was entirely

162
00:10:01.238 --> 00:10:04.322
not even considering the fact
of our budget concerns and

163
00:10:04.322 --> 00:10:07.351
how many people were working on it and
stuff like that.

164
00:10:07.351 --> 00:10:11.274
&gt;&gt; Erik: Even though it might
look really cool [LAUGH],

165
00:10:11.274 --> 00:10:15.620
it depends on how valuable it actually is,
yeah.

166
00:10:15.620 --> 00:10:17.260
&gt;&gt; Speaker 3: You may touch
on it in a minute here

167
00:10:17.260 --> 00:10:18.021
but-
&gt;&gt; Erik: Sure.

168
00:10:18.021 --> 00:10:22.611
&gt;&gt; Speaker 3: When building out something
like this, how do you determine how

169
00:10:22.611 --> 00:10:27.035
much new I just wanna explore something,
things to get into?

170
00:10:27.035 --> 00:10:33.614
&gt;&gt; Erik: Right, yeah, well,
this is a good example of that [LAUGH].

171
00:10:33.614 --> 00:10:37.857
And we will talk about it
a little in a little bit, but

172
00:10:37.857 --> 00:10:43.457
I think it's that's all about how
much value your time has, right?

173
00:10:43.457 --> 00:10:47.544
It's really good to explore things
when you're at home chilling and

174
00:10:47.544 --> 00:10:51.358
watching a stream or watching a YouTube or
something like that.

175
00:10:51.358 --> 00:10:56.317
But I've even done this as well where
I've been like, yeah, don't worry,

176
00:10:56.317 --> 00:10:58.776
we'll get it, we'll get it in a week.

177
00:10:58.776 --> 00:11:02.760
But then I keep making it more complex,
keep digging myself into a hole and

178
00:11:02.760 --> 00:11:07.515
then being like, yeah, this is why it's
not there, and then they're like, well,

179
00:11:07.515 --> 00:11:08.630
why did you do this?

180
00:11:08.630 --> 00:11:10.807
Exploration can be great, but

181
00:11:10.807 --> 00:11:15.169
as some of our frontiers have also seen,
it can also hurt you.

182
00:11:15.169 --> 00:11:20.481
So avoiding pitfalls, avoiding things
that are completely out of your term or

183
00:11:20.481 --> 00:11:24.103
understanding might be good
things to kind of avoid,

184
00:11:24.103 --> 00:11:26.530
at least if you're at your day job.

185
00:11:26.530 --> 00:11:31.703
I personally think software engineering is
not just like a job, it's also a passion.

186
00:11:31.703 --> 00:11:35.663
I think it's something you
wanna be very passionate about.

187
00:11:35.663 --> 00:11:41.053
And kind of like doctors are constantly
reading medical books, we're constantly

188
00:11:41.053 --> 00:11:46.451
looking at tech articles, we're constantly
seeing how people are doing things.

189
00:11:46.451 --> 00:11:51.216
And so I think having a good guide to why
you're exploring can be really important.

