WEBVTT

1
00:00:00.000 --> 00:00:02.453
&gt;&gt; Erik: Let's talk about
use cases of monoliths,

2
00:00:02.453 --> 00:00:07.029
the first use case of monoliths is
really small-scale applications, right?

3
00:00:07.029 --> 00:00:11.266
Given its simplicity, a monolithic
architecture is often suitable for

4
00:00:11.266 --> 00:00:15.990
small-scale applications or startups
where the application scope is clear and

5
00:00:15.990 --> 00:00:18.504
unlikely to drastically change or scale.

6
00:00:18.504 --> 00:00:22.405
I have a friend who is a founder
who works on a lot of projects, and

7
00:00:22.405 --> 00:00:27.031
I think he's probably one of the few
people I've ever met that have mastered

8
00:00:27.031 --> 00:00:30.881
creating monoliths and
turning them into sellable products.

9
00:00:30.881 --> 00:00:35.486
He can build fast, he can get his project
across, and then he can immediately get

10
00:00:35.486 --> 00:00:40.247
buy-in for it and that's his goal on a lot
of the projects that he works on, right?

11
00:00:40.247 --> 00:00:44.243
Monoliths are a great,
great solution for that, right?

12
00:00:44.243 --> 00:00:48.566
If you go out the gate too fast
with too much complexity, right?

13
00:00:48.566 --> 00:00:52.446
You're gonna find yourself managing
services way more than you're gonna

14
00:00:52.446 --> 00:00:54.548
find yourself actually making profit.

15
00:00:54.548 --> 00:00:59.365
And so especially early on,
this is really where that whole term of

16
00:00:59.365 --> 00:01:03.332
like start out with a monolith
really comes into play.

17
00:01:03.332 --> 00:01:08.701
Because more likely than not,
you don't need to have distributed crazy

18
00:01:08.701 --> 00:01:13.906
systems as the first thing you do,
maybe it might be helpful, right?

19
00:01:13.906 --> 00:01:18.479
But seriously, if you can just
build a monolith and get started,

20
00:01:18.479 --> 00:01:23.072
that's normally going to help
you a lot more, and again, yeah.

21
00:01:23.072 --> 00:01:27.777
&gt;&gt; Speaker 1: You mentioned earlier about
flexibility, accommodating changes,

22
00:01:27.777 --> 00:01:31.535
new feature requests,
sort of I have this new startup.

23
00:01:31.535 --> 00:01:36.499
I don't intend for it to not scale,
are there any strategies that

24
00:01:36.499 --> 00:01:40.393
you've seen where I'm
starting with a Monolith?

25
00:01:40.393 --> 00:01:45.345
But I've sort of,
encapsulated some of those boundaries

26
00:01:45.345 --> 00:01:49.792
such that I can turn it into
distributed if needed and

27
00:01:49.792 --> 00:01:53.144
what might be some approaches to that?

28
00:01:53.144 --> 00:01:53.672
&gt;&gt; Erik: Yeah, so

29
00:01:53.672 --> 00:01:58.297
we are gonna talk about that a little bit
later in the evolution of an architecture.

30
00:01:58.297 --> 00:02:03.403
But, yeah, a good way of doing
that is really trying to

31
00:02:03.403 --> 00:02:08.854
do the modular approach, but
on a logical level, right?

32
00:02:08.854 --> 00:02:13.112
Think about the shared logic
between your controllers, right?

33
00:02:13.112 --> 00:02:17.893
Think about the things that they need
to use outside of those controllers.

34
00:02:17.893 --> 00:02:22.675
And a good kind of approach I like to
take is I like to design even the logic

35
00:02:22.675 --> 00:02:27.454
in a way where if I ever have to go like,
okay, I want a service for this,

36
00:02:27.454 --> 00:02:30.445
I should be able to just
separate that code.

37
00:02:30.445 --> 00:02:34.307
It should almost be copy and
paste to where I can copy out those files,

38
00:02:34.307 --> 00:02:38.519
wrap them in a new listener, and
then bam, that's a new service, right?

39
00:02:38.519 --> 00:02:44.043
If you have a lot of complexity around
the logic of those shared components,

40
00:02:44.043 --> 00:02:46.901
then that becomes harder to decouple.

41
00:02:46.901 --> 00:02:51.901
But you could very easily set
up data structures in the way so

42
00:02:51.901 --> 00:02:58.606
that it's, again, just user data,
just product data, just check out data.

43
00:02:58.606 --> 00:03:02.423
And then when you get to a point where
you're, okay, I want three services,

44
00:03:02.423 --> 00:03:06.006
all the user data goes over here,
all the checkout stuff goes over here,

45
00:03:06.006 --> 00:03:08.028
all the processing data goes over here.

46
00:03:08.028 --> 00:03:12.155
And then they can exist as three different
services that you scale individually.

47
00:03:12.155 --> 00:03:18.143
But it really comes down to you as
a programmer thinking about how coupled

48
00:03:18.143 --> 00:03:24.146
your logic is to the other parts of
your software that you're building.

49
00:03:24.146 --> 00:03:29.634
And if you feel like that's going
to happen like nesting functions,

50
00:03:29.634 --> 00:03:31.439
for example, right?

51
00:03:31.439 --> 00:03:35.362
Like, if you've got a bunch of different
things happening in the same route,

52
00:03:35.362 --> 00:03:37.449
maybe that should be two routes, right?

53
00:03:37.449 --> 00:03:40.052
Maybe that should be three route, right?

54
00:03:40.052 --> 00:03:44.897
For example a sign-in flow, maybe
a sign-in flow only needs to take care of

55
00:03:44.897 --> 00:03:49.530
this one thing and then you can
off-board other things to other routes.

56
00:03:49.530 --> 00:03:53.448
Don't do too much in one space,
basically is what I'm trying to say.

57
00:03:53.448 --> 00:03:55.794
If you do too much in one specific space,

58
00:03:55.794 --> 00:03:59.599
it becomes harder to decouple
those things and move them around.

59
00:03:59.599 --> 00:04:01.398
Does that answer your question?

60
00:04:01.398 --> 00:04:02.518
&gt;&gt; Speaker 1: Yeah.

61
00:04:02.518 --> 00:04:04.673
&gt;&gt; Erik: Cool, yeah.

62
00:04:04.673 --> 00:04:08.464
&gt;&gt; Speaker 2: Are there higher potential
security risks with monoliths since

63
00:04:08.464 --> 00:04:11.072
everything's all just kinda right there?

64
00:04:11.072 --> 00:04:12.122
&gt;&gt; Erik: Right.

65
00:04:12.122 --> 00:04:15.836
&gt;&gt; Speaker 2: You have to take extra
measures to make sure things are protected

66
00:04:15.836 --> 00:04:17.952
and-
&gt;&gt; Erik: Yeah, absolutely, I mean,

67
00:04:17.952 --> 00:04:21.767
if you If you think about it,
the monolith is your golden goose.

68
00:04:21.767 --> 00:04:25.533
It's the one thing that's bringing
all traffic to your system,

69
00:04:25.533 --> 00:04:28.283
it's what you're managing everything with.

70
00:04:28.283 --> 00:04:30.012
And so, yeah, I mean,

71
00:04:30.012 --> 00:04:35.378
it could be very possible that you
could have an endpoint that is exposed,

72
00:04:35.378 --> 00:04:40.151
but doesn't even directly relate
to what the vulnerability is.

73
00:04:40.151 --> 00:04:43.592
Just because it shares logic
with the user data, or

74
00:04:43.592 --> 00:04:48.648
just because it shares logic with credit
card lookups and stuff like that.

75
00:04:48.648 --> 00:04:54.570
If that is attacked, the whole system
could be compromised, yeah, absolutely.

76
00:04:54.570 --> 00:04:58.376
So, I think that is where,
going back to the planning stage,

77
00:04:58.376 --> 00:05:02.130
you really have to start
thinking about security concerns.

78
00:05:02.130 --> 00:05:07.469
How do you make sure that, for example,
it's probably very common in monoliths

79
00:05:07.469 --> 00:05:12.257
to have public routes and secured
routes in the sense of some are public,

80
00:05:12.257 --> 00:05:15.026
some session stores and stuff like that.

81
00:05:15.026 --> 00:05:18.834
Yeah, you got to be good at that,
you got to be able to be prepared that

82
00:05:18.834 --> 00:05:21.610
this route is secured,
how do you secure routes?

83
00:05:21.610 --> 00:05:22.679
Is it easy to secure routes?

84
00:05:22.679 --> 00:05:24.984
What happens if it's not secured?

85
00:05:24.984 --> 00:05:30.094
Or even further,
if it becomes compromised on a shell level

86
00:05:30.094 --> 00:05:35.418
at that point then, yeah,
you're not in a good place at all.

87
00:05:35.418 --> 00:05:39.514
So yeah, security definitely, I think
becomes a lot more challenging when

88
00:05:39.514 --> 00:05:42.266
you have just a bunch of
things going on at once, and

89
00:05:42.266 --> 00:05:44.838
you have to be considerate
of all those things.

90
00:05:44.838 --> 00:05:49.714
So, again, that's where I would kind
of go back to his question even as well

91
00:05:49.714 --> 00:05:54.290
if modularizing your code in a way
where you have a good structure around

92
00:05:54.290 --> 00:05:57.590
securing off routes versus on off routes,
right?

93
00:05:57.590 --> 00:06:02.470
You have a good structure around how
your configuration data is loaded or

94
00:06:02.470 --> 00:06:05.350
how the process runs and things like that,

95
00:06:05.350 --> 00:06:09.591
those definitely need to be considered,
yeah, absolutely.

96
00:06:09.591 --> 00:06:12.903
Okay, so another use case,
applications with simple,

97
00:06:12.903 --> 00:06:15.111
well-defined business processes.

98
00:06:15.111 --> 00:06:19.596
So, monolithic structure can be beneficial
in scenarios where the business

99
00:06:19.596 --> 00:06:24.359
processes are simple and unlikely to
require significant changes or additions.

100
00:06:24.359 --> 00:06:29.983
A lot of what we're talking about here
is just, you wanna implement something.

101
00:06:29.983 --> 00:06:33.367
You don't wanna spend a ton of time
on it in figuring out how a design

102
00:06:33.367 --> 00:06:34.284
approach for it.

103
00:06:34.284 --> 00:06:38.376
But you really wanna make sure that
it's at least solving the problem that

104
00:06:38.376 --> 00:06:41.544
you want, and making sure that
it handles the scenario or

105
00:06:41.544 --> 00:06:43.738
the business processes that you need.

106
00:06:43.738 --> 00:06:47.451
You don't have to necessarily,
let's go distributed and

107
00:06:47.451 --> 00:06:49.760
have inter service communication.

108
00:06:49.760 --> 00:06:52.191
You could technically just
create another monolith and

109
00:06:52.191 --> 00:06:53.698
put it next to the other monolith.

110
00:06:53.698 --> 00:06:58.579
Now you have two monoliths, but
it's definitely a part of where you start

111
00:06:58.579 --> 00:07:03.476
saying like, okay, this monolith
does this, this monolith does that.

112
00:07:03.476 --> 00:07:07.263
And in that case,
you're not really distributed, right?

113
00:07:07.263 --> 00:07:10.463
Because if one goes down,
then it's still in that case,

114
00:07:10.463 --> 00:07:13.272
will probably be impacting
most of your systems.

115
00:07:13.272 --> 00:07:18.800
But if you already know how to build
a monolith, or you wanna start decoupling

116
00:07:18.800 --> 00:07:24.004
those things, you could effectively
make two monoliths if you wanted.

117
00:07:24.004 --> 00:07:26.477
And that's a design, services and

118
00:07:26.477 --> 00:07:31.183
monoliths are a bit different in
their scope and what they focus on.

119
00:07:31.183 --> 00:07:36.596
But again, if you have two
different things that you are like,

120
00:07:36.596 --> 00:07:40.275
a reason to have that separate operation,

121
00:07:40.275 --> 00:07:45.302
you could at least try to do
that with multiple monoliths.

122
00:07:45.302 --> 00:07:48.616
And then high performance,
where high performance is critical.

123
00:07:48.616 --> 00:07:52.795
You will, nine times out of 10,
always deal with performance issues with

124
00:07:52.795 --> 00:07:57.696
distribution, because there's more network
latency, there's more hops required,

125
00:07:57.696 --> 00:07:58.964
and things like that.

126
00:07:58.964 --> 00:08:03.515
Going back to the bot example that I
shared with you guys earlier, right?

127
00:08:03.515 --> 00:08:08.235
Not only does a lambda you know firing
a bunch of time bad for cost but

128
00:08:08.235 --> 00:08:11.541
what is another thing
that makes lambdas bad?

129
00:08:11.541 --> 00:08:13.478
Does anyone know?

130
00:08:13.478 --> 00:08:17.481
What is it number one common things
with lambdas that everyone deals with?

131
00:08:17.481 --> 00:08:18.473
&gt;&gt; Speaker 3: Cold starts.

132
00:08:18.473 --> 00:08:23.492
&gt;&gt; Erik: Cold starts, exactly, yeah, and
so what can be tough is that you wanna

133
00:08:23.492 --> 00:08:29.280
be able to have a bot that responds under
a millisecond or 5, 10 milliseconds.

134
00:08:29.280 --> 00:08:32.036
You're gonna be at
the mercy of cold starts,

135
00:08:32.036 --> 00:08:36.397
you're gonna be at the mercy of
whatever architecture you're using.

136
00:08:36.397 --> 00:08:40.582
And so again, in this scenario,
I could have a Twitch monolith and

137
00:08:40.582 --> 00:08:43.498
a discord monolith, but
they both process and

138
00:08:43.498 --> 00:08:47.868
have high throughput and performance for
the things that they want.

139
00:08:47.868 --> 00:08:53.186
Or I could join them together and have
one big bot that processes all requests.

140
00:08:53.186 --> 00:08:58.056
But high performance, you cannot argue
that a process just sitting there waiting

141
00:08:58.056 --> 00:09:00.949
to return a request is
gonna be slower than like,

142
00:09:00.949 --> 00:09:05.202
something that requires multiple jumps,
it's just gonna be faster.

143
00:09:05.202 --> 00:09:09.933
It always will be, because you're not
talking about the performance of network,

144
00:09:09.933 --> 00:09:13.178
you're just talking about
the performance of the CPU and

145
00:09:13.178 --> 00:09:15.490
how fast it can process it, basically.

146
00:09:15.490 --> 00:09:20.381
So again, if you're in like real-time
chat applications, stuff like that,

147
00:09:20.381 --> 00:09:23.447
that can really be a benefit
to using a monolith for

148
00:09:23.447 --> 00:09:27.099
the specific type of processing
that you're trying to do.

149
00:09:27.099 --> 00:09:32.112
Because you're shifting network
latency to compute latency and

150
00:09:32.112 --> 00:09:36.134
again, compute latency is
always gonna be faster.

151
00:09:36.134 --> 00:09:40.984
&gt;&gt; Speaker 3: You're sharing
the same types between front-end and

152
00:09:40.984 --> 00:09:44.787
backend worth the increased complexity.

153
00:09:44.787 --> 00:09:49.091
&gt;&gt; Erik: Okay,
it sounds like somebody using TypeScript.

154
00:09:49.091 --> 00:09:54.297
[LAUGH] So,
that really depends on how coupled

155
00:09:54.297 --> 00:09:59.923
you want your frontend to your backend,
right?

156
00:09:59.923 --> 00:10:05.802
Types become a logical change, which
means that if I wanna update a type for

157
00:10:05.802 --> 00:10:09.269
both systems, I have to redeploy, right?

158
00:10:09.269 --> 00:10:11.180
Does that mean that that's a bad thing?

159
00:10:11.180 --> 00:10:14.453
No, because technically, again,
if you are using typescript,

160
00:10:14.453 --> 00:10:16.850
which I'm not trying to
pool on typescript, but

161
00:10:16.850 --> 00:10:20.893
if you are using typescript TypeScript,
that's a valuable purpose of using it.

162
00:10:20.893 --> 00:10:23.656
You have the same language in
the frontend, the same language in

163
00:10:23.656 --> 00:10:26.635
the backend, and it becomes really
easy to share those components.

164
00:10:26.635 --> 00:10:31.332
However, think about the changes you
have to make, first off, you have to go

165
00:10:31.332 --> 00:10:35.903
to the library potentially and
make your Enum change or whatever, right?

166
00:10:35.903 --> 00:10:39.477
Then you have to go to the service,
update that library, right?

167
00:10:39.477 --> 00:10:42.704
And make sure that that's got the latest
and then you've got to deploy that, so

168
00:10:42.704 --> 00:10:44.745
now you've got two changes
that need deploying.

169
00:10:44.745 --> 00:10:47.132
And then you have to go to
the front-end and change that and

170
00:10:47.132 --> 00:10:48.312
then redeploy that as well.

171
00:10:48.312 --> 00:10:51.678
And if anything happens with that,
then you got to go back and

172
00:10:51.678 --> 00:10:54.519
restart the whole process all over again,
right?

173
00:10:54.519 --> 00:10:57.867
In my mind, that is not decoupling, right?

174
00:10:57.867 --> 00:11:02.053
In my mind, that is just
improving developer experience,

175
00:11:02.053 --> 00:11:06.910
which I would even argue is not
really a great developer experience,

176
00:11:06.910 --> 00:11:12.044
because you have to update two or
three things at least to be able to do it.

177
00:11:12.044 --> 00:11:16.100
And on top of it, if you remove
the library from the scenario,

178
00:11:16.100 --> 00:11:18.059
then which one is in control?

179
00:11:18.059 --> 00:11:21.635
Is it the back-end that's control
of the types of the front-end and

180
00:11:21.635 --> 00:11:23.120
the front-end follows it?

181
00:11:23.120 --> 00:11:26.478
Or is it the front-end that controls
the back-end and the back-end follows it,

182
00:11:26.478 --> 00:11:27.656
which gets deployed first?

183
00:11:27.656 --> 00:11:29.305
Which gets deployed second?

184
00:11:29.305 --> 00:11:32.313
What happens if they're different, right?

185
00:11:32.313 --> 00:11:37.173
That becomes a really big challenge
when talking about consistency you

186
00:11:37.173 --> 00:11:40.900
can get data consistency issues and
things like that.

187
00:11:40.900 --> 00:11:44.970
So I think the goal that would
absolutely be a monolithic

188
00:11:44.970 --> 00:11:48.707
approach versus a distributed
service approach.

189
00:11:48.707 --> 00:11:53.677
Where, well, no, that becomes an end point
and only that endpoint changes whenever

190
00:11:53.677 --> 00:11:57.280
you need instead of having to
update code in multiple places.

