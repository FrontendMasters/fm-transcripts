WEBVTT

1
00:00:00.008 --> 00:00:04.853
&gt;&gt; Eric Reinert: All right, Serverless,
I love that gif, because I feel like this

2
00:00:04.853 --> 00:00:09.875
describes Serverless perfectly,
shut up and take my money, right?

3
00:00:09.875 --> 00:00:14.586
We talked about monoliths being deep
thought, this huge, massive beast that,

4
00:00:14.586 --> 00:00:18.413
either does this one little thing,
or like tons of other things.

5
00:00:18.413 --> 00:00:21.918
We talked about distributed having
these satellites all over the place and

6
00:00:21.918 --> 00:00:25.144
having them work together and
now we're talking about Serverless,

7
00:00:25.144 --> 00:00:29.052
basically being like, hey, I don't wanna
worry about any of this stuff, right?

8
00:00:29.052 --> 00:00:32.281
I just wanna run my code and
you cloud provider,

9
00:00:32.281 --> 00:00:37.041
you take care of the rest and so,
this gif really does do a good job of,

10
00:00:37.041 --> 00:00:42.172
in my mind kind of describing what
you end up using Serverless for.

11
00:00:42.172 --> 00:00:46.212
So, let's talk about Serverless because
Serverless doesn't necessarily mean

12
00:00:46.212 --> 00:00:47.242
one thing.

13
00:00:47.242 --> 00:00:52.138
It can mean one thing, but
I wanna remind anyone out there watching

14
00:00:52.138 --> 00:00:56.613
that Serverless doesn't just
mean functions as a service.

15
00:00:56.613 --> 00:01:02.113
So, if we read the definition, Serverless
architecture refers to applications

16
00:01:02.113 --> 00:01:07.695
that significantly depend on third
party services, backend-as-a-service or

17
00:01:07.695 --> 00:01:12.397
BaaS, or on custom code that's run
in ephemeral containers, FaaS,

18
00:01:12.397 --> 00:01:17.666
functions as a service,
which I forgot to put hyphens between.

19
00:01:17.666 --> 00:01:21.670
But who can help me differentiate
what a BaaS is versus a FaaS,

20
00:01:21.670 --> 00:01:23.827
and I'm not talking about fish.

21
00:01:25.877 --> 00:01:32.313
So, can anyone,
name a backend as a service platform?

22
00:01:32.313 --> 00:01:33.071
&gt;&gt; Speaker 1: Firebase.

23
00:01:33.071 --> 00:01:36.177
&gt;&gt; Eric Reinert: Firebase, yep, what else?

24
00:01:36.177 --> 00:01:36.997
&gt;&gt; Speaker 1: Supabase.

25
00:01:36.997 --> 00:01:39.429
&gt;&gt; Eric Reinert: Supabase,
yep, exactly, yeah,

26
00:01:39.429 --> 00:01:42.348
really any kind of
platform that makes it so

27
00:01:42.348 --> 00:01:47.395
that all you have to work with is an API
is a back end as a service, or a BaaS.

28
00:01:48.455 --> 00:01:53.422
When we talk about Serverless Quirke
doesn't just use Serverless

29
00:01:53.422 --> 00:01:57.915
functions we actually use
Supabase as well, why?

30
00:01:57.915 --> 00:01:59.705
Why do you use Supabase?

31
00:01:59.705 --> 00:02:04.635
Well, because Supabase gives us
the functionality out of the box as having

32
00:02:04.635 --> 00:02:09.300
a PostgreSQL instance, but
I don't need to do it in RDS.

33
00:02:09.300 --> 00:02:11.447
I don't have to manage
that service myself,

34
00:02:11.447 --> 00:02:14.140
I don't have to manage
that instance myself.

35
00:02:14.140 --> 00:02:17.969
And on top of that for now,
since we're such a small company and

36
00:02:17.969 --> 00:02:21.582
we're just getting started,
I don't wanna have to pay for

37
00:02:21.582 --> 00:02:25.089
the 24-hour consumption of ARDS instance,
right?

38
00:02:25.089 --> 00:02:29.719
I'd rather just pay for the requests and
the data usages that I have.

39
00:02:29.719 --> 00:02:34.529
This is what makes backend as a service or
Baas so valuable, right?

40
00:02:34.529 --> 00:02:37.368
Is you can lean on what
they've already built and

41
00:02:37.368 --> 00:02:39.869
just have a simple interface to work with.

42
00:02:41.336 --> 00:02:46.459
Functions as a service, however, are
almost a step lower than microservices,

43
00:02:46.459 --> 00:02:51.433
where functions as a service means that
there's one particular function that

44
00:02:51.433 --> 00:02:53.186
you wanna do, that's it.

45
00:02:53.186 --> 00:02:55.953
Just this one thing, ring the doorbell,
cool, ring the doorbell,

46
00:02:55.953 --> 00:02:58.896
ring the doorbell, ring the doorbell,
that's all it does.

47
00:02:58.896 --> 00:03:03.244
And I talked about before with
microservices, you should normally expect

48
00:03:03.244 --> 00:03:08.278
the same response, you should always
expect the same response as a function.

49
00:03:08.278 --> 00:03:12.211
You should never have a function do two
different things, if you're doing that,

50
00:03:12.211 --> 00:03:15.631
that means you have two functions and
you need to separate them out, and

51
00:03:15.631 --> 00:03:18.948
you're probably not using functions
[LAUGH] as a service properly.

52
00:03:18.948 --> 00:03:24.112
Functions as a service is really meant
to say I have one specific process

53
00:03:24.112 --> 00:03:29.203
that I want to run, and I want to
run it to the N-th power, right?

54
00:03:29.203 --> 00:03:32.234
And I wanna scale that
to the N-th power,

55
00:03:32.234 --> 00:03:38.215
Serverless overall whether if it's backend
as a service or functions as a service,

56
00:03:38.215 --> 00:03:43.017
is the idea that, again,
you're either utilizing a provider that

57
00:03:43.017 --> 00:03:48.180
you're paying to give you the services
without the cost of management.

58
00:03:48.180 --> 00:03:52.371
Again, shut up and take my money,
or you're doing it so that you have

59
00:03:52.371 --> 00:03:56.780
an isolated specific use case that you
want to scale to the N, and on top

60
00:03:56.780 --> 00:04:02.056
of that, you don't have to worry about
the management of the infrastructure.

61
00:04:02.056 --> 00:04:08.546
Serverless isn't so much about a design in
the sense of decoupling, though it can be.

62
00:04:08.546 --> 00:04:13.266
It's more also about cost savings and
finding ways to save money, and

63
00:04:13.266 --> 00:04:17.586
we'll talk a little bit more about
how that is sometimes good and

64
00:04:17.586 --> 00:04:19.426
how that is sometimes bad.

65
00:04:21.139 --> 00:04:26.178
So, Serverless architectures, the app
logic is still running on servers but

66
00:04:26.178 --> 00:04:31.309
all the management is done by the cloud
provider, Amazon, Azure, GCP, etc.

67
00:04:31.309 --> 00:04:36.459
You just need to run your code and
the cloud provider takes care of the rest.

68
00:04:36.459 --> 00:04:40.812
Now, this can either be code in your own
service that's reaching out to the cloud

69
00:04:40.812 --> 00:04:43.053
provider and getting data like a BaaS, or

70
00:04:43.053 --> 00:04:46.529
it means that you're literally
taking one specific function.

71
00:04:46.529 --> 00:04:50.887
You're putting that up in Amazon, and
then you're letting it run thousands and

72
00:04:50.887 --> 00:04:53.960
thousands of times a day, but
the goal here is to make it so

73
00:04:53.960 --> 00:04:58.405
that you're just running your code and
the cloud provider takes care of the rest.

74
00:04:58.405 --> 00:05:02.223
You don't have to worry about uptime,
you don't have to worry about scalability,

75
00:05:02.223 --> 00:05:05.880
you don't have to worry about pretty much
most of the stuff we've already talked

76
00:05:05.880 --> 00:05:06.550
about today.

