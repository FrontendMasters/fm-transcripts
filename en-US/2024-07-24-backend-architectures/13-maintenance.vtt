WEBVTT

1
00:00:00.480 --> 00:00:05.144
&gt;&gt; Erik Reinert: However, [LAUGH] this
goes back to what I kinda mentioned before

2
00:00:05.144 --> 00:00:10.620
about deploying and putting it out
there is only part of it, right?

3
00:00:10.620 --> 00:00:13.342
The other part of it is
learning how to maintain it.

4
00:00:13.342 --> 00:00:15.929
And sometimes you're really
gonna never know how to

5
00:00:15.929 --> 00:00:18.800
maintain a system until
it's in production.

6
00:00:18.800 --> 00:00:24.593
Until you've actually got users using it,
you've got actual data

7
00:00:24.593 --> 00:00:29.978
going through it, this can be things,
user data sometimes and

8
00:00:29.978 --> 00:00:34.977
most of the times is only
really accurate in prod, right?

9
00:00:34.977 --> 00:00:39.779
At Hippo where I work we have
something called prod copy.

10
00:00:40.880 --> 00:00:45.864
And it's a literal copy of production
that is closed off still, but

11
00:00:45.864 --> 00:00:51.810
it has backups from nightly databases
of the production environment.

12
00:00:51.810 --> 00:00:55.219
And so that makes it so
that we can test maintenance,

13
00:00:55.219 --> 00:00:59.414
we can test deployments and
things like that against real data.

14
00:00:59.414 --> 00:01:03.220
And until you get to the point you are
maintaining the architecture in a way that

15
00:01:03.220 --> 00:01:06.911
you regularly updating it, maintaining it,
ensuring that is effective,

16
00:01:06.911 --> 00:01:09.293
accommodating any changes or
things like that.

17
00:01:09.293 --> 00:01:14.141
This part,
is really going to tell you if you

18
00:01:14.141 --> 00:01:18.870
built something that is easy to maintain.

19
00:01:19.980 --> 00:01:22.691
And this part of alone, can make it so

20
00:01:22.691 --> 00:01:27.381
that you might end up going back and
changing a lot, right?

21
00:01:27.381 --> 00:01:31.821
Testing something and maintaining
it are two very different things.

22
00:01:31.821 --> 00:01:33.903
Testing it is to make sure that it works,

23
00:01:33.903 --> 00:01:37.651
maintaining it is making sure
that it's up all the time, right?

24
00:01:37.651 --> 00:01:42.858
And so maintenance around
this can be very learning

25
00:01:42.858 --> 00:01:48.076
to how you actually end up
with the final solution.

26
00:01:51.211 --> 00:01:53.680
&gt;&gt; Erik Reinert: So I do have some
best practices that I'm gonna go over,

27
00:01:53.680 --> 00:01:54.889
which are kind of, again,

28
00:01:54.889 --> 00:01:58.120
just reiterations of some of the stuff
that we've talked about before.

29
00:01:59.904 --> 00:02:03.329
You should really involve all
stakeholders from the beginning and

30
00:02:03.329 --> 00:02:07.074
going back to your question about
should developers be involved or not?

31
00:02:07.074 --> 00:02:10.894
There might be an opportunity where
developers should be involved, right?

32
00:02:10.894 --> 00:02:14.965
Maybe you've gone through challenges in
the past at a company where you've dealt

33
00:02:14.965 --> 00:02:19.374
with, maintainability being difficult and
you wanna improve on that.

34
00:02:19.374 --> 00:02:23.692
Maybe they didn't like the type of design
or the type of technologies that we

35
00:02:23.692 --> 00:02:28.491
were using the past so that you can hear
those needs and those expectations, right?

36
00:02:28.491 --> 00:02:33.841
Which phase do you think
this should be in?

37
00:02:33.841 --> 00:02:34.967
&gt;&gt; Speaker 2: That
should be in a research.

38
00:02:34.967 --> 00:02:36.437
&gt;&gt; Erik Reinert: Yep,
research exactly, yeah,

39
00:02:36.437 --> 00:02:38.334
this should be in the research stage.

40
00:02:39.554 --> 00:02:45.025
It's never too late or
too wrong to reach out to somebody and

41
00:02:45.025 --> 00:02:47.772
ask them, what do you think?

42
00:02:47.772 --> 00:02:51.205
And it never hurts to ask
that question either, and so

43
00:02:51.205 --> 00:02:55.782
the more people that you get as
a stakeholder in what you're building,

44
00:02:55.782 --> 00:02:58.546
like I said, it's easier to get that out.

45
00:02:58.546 --> 00:03:00.877
It's easier to get more backing behind it,

46
00:03:00.877 --> 00:03:04.791
it's good to get more people involved
in the project you're working on.

47
00:03:04.791 --> 00:03:05.558
&gt;&gt; Speaker 2: Question.
&gt;&gt; Erik Reinert: Yeah.

48
00:03:05.558 --> 00:03:09.912
&gt;&gt; Speaker 2: Would you say that it would
have value or I guess what it makes sense

49
00:03:09.912 --> 00:03:15.391
to incorporate things what Google does
with SLEs you have your SLOs as your SLIs.

50
00:03:15.391 --> 00:03:17.629
&gt;&gt; Erik Reinert: Yeah.
&gt;&gt; Speaker 2: In where would you put in,

51
00:03:17.629 --> 00:03:18.753
I guess in here?

52
00:03:18.753 --> 00:03:23.883
&gt;&gt; Erik Reinert: So that would be in the
research stage, you'd wanna think about

53
00:03:23.883 --> 00:03:28.633
any uptime requirements,
any SLAs, anything like that.

54
00:03:28.633 --> 00:03:32.679
Anything that exists already
that could impact the design or

55
00:03:32.679 --> 00:03:37.833
how it works should happen in the research
phase, because, I mean, again,

56
00:03:37.833 --> 00:03:42.620
as I'm sure you understand what's SLAs,
it could change a lot [LAUGH].

57
00:03:42.620 --> 00:03:48.340
That can be a very simple system to being,
well, we need not many four nines,

58
00:03:48.340 --> 00:03:53.493
four nines is tough, that is a very
tough thing to provide as an SLA.

59
00:03:53.493 --> 00:03:55.137
I mean, almost literally,

60
00:03:55.137 --> 00:03:58.366
I think four nines is one day
of downtime a year, right?

61
00:03:58.366 --> 00:04:02.610
And that's crazy, and
if you have that requirement for

62
00:04:02.610 --> 00:04:07.392
that system, then it may be more
necessary to look into it, but

63
00:04:07.392 --> 00:04:12.209
it might also just be good to
ask because maybe you don't.

64
00:04:12.209 --> 00:04:16.157
When you talk about building a modular
system, it doesn't mean that everything

65
00:04:16.157 --> 00:04:20.175
needs to have a high SLA, right, it may
mean that, well, yeah we have a high SLA.

66
00:04:20.175 --> 00:04:20.782
But you know what?

67
00:04:20.782 --> 00:04:23.277
You don't even have to worry about it,
it's really just for the frontend.

68
00:04:23.277 --> 00:04:26.465
We just want to make sure that
users can still access the page.

69
00:04:26.465 --> 00:04:30.817
We don't have to be worried about,
this deep, deep low level system that,

70
00:04:30.817 --> 00:04:34.227
only really gets fired whenever
a specific event happens.

71
00:04:34.227 --> 00:04:39.693
So yeah, SLA would definitely be
something you'd want to investigate,

72
00:04:39.693 --> 00:04:42.107
early on into the research.

73
00:04:42.107 --> 00:04:48.005
Again, best practice, use a modular
approach like modularity is really good.

74
00:04:48.005 --> 00:04:52.175
As I kind of mentioned before, when you
have that modularity, it makes it so

75
00:04:52.175 --> 00:04:55.587
that specific components can be easier,
updated.

76
00:04:55.587 --> 00:05:00.734
Modularity is good, but you just,
there's like it, It's an art [LAUGH],

77
00:05:00.734 --> 00:05:06.665
it really becomes an art, how much do you
abstract, how much do you modularize?

78
00:05:06.665 --> 00:05:11.332
And if you feel like you have to be
honest with yourself, like again,

79
00:05:11.332 --> 00:05:15.354
going back to that first workflow
I showed you of Quirk V1,

80
00:05:15.354 --> 00:05:18.749
I can look at that now and
be that is way overkill [LAUGH].

81
00:05:18.749 --> 00:05:22.146
And you need to be able to
be honest with yourself and

82
00:05:22.146 --> 00:05:24.626
just ask yourself the question.

83
00:05:24.626 --> 00:05:27.989
Is it too complex,
is it not modular enough?

84
00:05:27.989 --> 00:05:36.006
Don't look at these as, I would look at
them as Legos, do they fit well together?

85
00:05:36.006 --> 00:05:37.389
If they don't fit well together,

86
00:05:37.389 --> 00:05:39.926
then it's a good idea to figure
out how to make them fit better.

87
00:05:41.136 --> 00:05:41.937
Again, plan for

88
00:05:41.937 --> 00:05:45.576
scalability it should definitely be
something that you can think about.

89
00:05:45.576 --> 00:05:50.910
I would say that plan for
scalability doesn't necessarily have to

90
00:05:50.910 --> 00:05:57.588
be massively in the research phase, but
it should be in the testing phase, right?

91
00:05:57.588 --> 00:05:58.692
In the testing phase,

92
00:05:58.692 --> 00:06:02.822
cuz that's really when you're gonna start
asking or answering questions around,

93
00:06:02.822 --> 00:06:05.745
can it scale, do we have good
performance through things?

94
00:06:05.745 --> 00:06:09.228
And that doesn't really start getting
answered until you start hitting it and

95
00:06:09.228 --> 00:06:10.397
actually trying, yeah.

96
00:06:10.397 --> 00:06:14.557
&gt;&gt; Speaker 3: Yeah, how do you think about
scalability in terms of, I don't know,

97
00:06:14.557 --> 00:06:16.108
time horizons, I guess,

98
00:06:16.108 --> 00:06:20.352
I don't know if you've heard like
YAGNI you ain't gonna need it [LAUGH].

99
00:06:20.352 --> 00:06:21.254
&gt;&gt; Erik Reinert: Yeah,
I've heard it a lot.

100
00:06:21.254 --> 00:06:23.616
&gt;&gt; Speaker 3: Yeah,
that I think it's really easy to be,

101
00:06:23.616 --> 00:06:26.742
we need to add a bunch of complexity so
that it's more scalable.

102
00:06:26.742 --> 00:06:30.643
But you're, considering scalability at
a level that your company's not gonna

103
00:06:30.643 --> 00:06:34.658
achieve for 10 years, in which case
everything's gonna be different anyways,

104
00:06:34.658 --> 00:06:36.744
like where do you find
that balance [LAUGH]?

105
00:06:36.744 --> 00:06:37.871
&gt;&gt; Erik Reinert: So, okay.
&gt;&gt; Speaker 3: Theoretically [LAUGH].

106
00:06:37.871 --> 00:06:41.693
&gt;&gt; Erik Reinert: No, it's great that
you're asking that because I work at

107
00:06:41.693 --> 00:06:44.621
a publicly traded company, right?

108
00:06:44.621 --> 00:06:49.541
Our value is described entirely by
what we're building and whatever.

109
00:06:49.541 --> 00:06:53.184
So you're never gonna be,
there is a terrible thing to have for

110
00:06:53.184 --> 00:06:57.671
a publicly traded company [LAUGH],
you eventually want to get there, right?

111
00:06:57.671 --> 00:07:01.517
You wanna have your stock go
over a hundred to $200, right?

112
00:07:01.517 --> 00:07:07.581
They have good intent, but
they're not a good approach,

113
00:07:07.581 --> 00:07:12.777
to say,
we'll never get there just means to say,

114
00:07:12.777 --> 00:07:19.367
okay, well, you telling me
the company's never gonna grow?

115
00:07:19.367 --> 00:07:22.041
&gt;&gt; Speaker 3: Yeah, I think there's
something there though about, okay,

116
00:07:22.041 --> 00:07:25.419
maybe you're not never gonna need it, but
are you gonna need it on a time horizon

117
00:07:25.419 --> 00:07:27.398
where it's relevant to worry about it,
now?

118
00:07:27.398 --> 00:07:31.614
&gt;&gt; Erik Reinert: So I think a good
way of kinda thinking about this, and

119
00:07:31.614 --> 00:07:37.423
don't know if this will come off
the right, cuz I'm doing it off the top of my head,

120
00:07:37.423 --> 00:07:41.190
but think about loading dock for
boat, right?

121
00:07:41.190 --> 00:07:43.921
You can easily just drop
a boat in the water, but

122
00:07:43.921 --> 00:07:48.720
it's really hard to get that boat out of
the water if there's no, ease in, right?

123
00:07:48.720 --> 00:07:52.720
So I think the goal there is,
is to have that ease in, sure,

124
00:07:52.720 --> 00:07:57.930
we don't need that yet, but can our
auto scaler support it at least, right?

125
00:07:57.930 --> 00:08:02.043
So that if we get there, we don't
have to rebuild everything, right?

126
00:08:02.043 --> 00:08:07.322
Or, can this service handle this?

127
00:08:07.322 --> 00:08:13.722
So here's a good example, Quirk V2
is built entirely to be serverless.

128
00:08:13.722 --> 00:08:18.283
And the reason for that is for and
I was gonna talk about this later, but

129
00:08:18.283 --> 00:08:21.220
I can talk about it now,
too, is for costs.

130
00:08:21.220 --> 00:08:25.821
I wanna sell Quirk at a very low cost
because content creators are cheap,

131
00:08:25.821 --> 00:08:28.550
[LAUGH] it's the easiest
way to put it. I'm cheap.

132
00:08:28.550 --> 00:08:31.980
I don't wanna have to spend a lot of
money on a bot or something like that.

133
00:08:31.980 --> 00:08:37.296
But the value I'm providing with that
bot is also hopefully enough to pay for

134
00:08:37.296 --> 00:08:39.219
and make people pay for it.

135
00:08:39.219 --> 00:08:45.009
And I had a conversation with a really
good friend of mine who works on probably

136
00:08:45.009 --> 00:08:51.513
one of the most known and scalable bots
on the Twitch platform called Fossabot.

137
00:08:51.513 --> 00:08:55.896
And I was, yeah, we're going to build
it serverless to start and he goes,

138
00:08:55.896 --> 00:08:57.228
I could never do that.

139
00:08:57.228 --> 00:08:59.412
And I was, well, what do you mean?

140
00:08:59.412 --> 00:09:03.565
And he's, dude, I process hundreds
of thousands of requests,

141
00:09:03.565 --> 00:09:07.955
if I pop that through Lambdas my cost
would go through the roof [LAUGH].

142
00:09:07.955 --> 00:09:12.794
And I was, well, we're not there yet, so
should I worry about this right now or

143
00:09:12.794 --> 00:09:14.160
should I not?

144
00:09:14.160 --> 00:09:15.697
And so I decided, well,

145
00:09:15.697 --> 00:09:20.605
maybe if I can build the system to modular
enough to where just that one component

146
00:09:20.605 --> 00:09:25.383
that I'm worried about could be replaced
with a service instead of a Lambda.

147
00:09:25.383 --> 00:09:28.303
Then it's easier to prepare for
that future and

148
00:09:28.303 --> 00:09:31.039
I don't have to be as worried about it.

149
00:09:31.039 --> 00:09:34.651
And that's going back to the whole,
plug and play of the bot engine,

150
00:09:34.651 --> 00:09:36.399
why we built it that way.

151
00:09:36.399 --> 00:09:42.541
It was to make it so that, for
example, discord can't be serverless.

152
00:09:42.541 --> 00:09:46.946
Discord needs a WebSocket connection,
we can't get around that.

153
00:09:46.946 --> 00:09:51.548
And so we already even know that
we're going to be building services

154
00:09:51.548 --> 00:09:56.554
versus serverless and so we can take
this time over here where we know it's

155
00:09:56.554 --> 00:10:01.499
gonna be valuable, to build that
loading dock and get comfortable.

156
00:10:01.499 --> 00:10:03.199
So once I get to a point where,

157
00:10:03.199 --> 00:10:07.486
I'm connecting this to a huge streamers
platform, I can just say, okay,

158
00:10:07.486 --> 00:10:11.974
rip out the logic out of the Lambda, put
it into service, plug it into the API or

159
00:10:11.974 --> 00:10:15.769
to the gateway and then bam,
now we have that scalability.

160
00:10:15.769 --> 00:10:17.867
So make sure you have an out basically,

161
00:10:17.867 --> 00:10:21.948
just make sure you have some kind of path
to where you can get to there, yeah.

162
00:10:24.685 --> 00:10:28.179
&gt;&gt; Erik Reinert: And honestly, this is
kinda similar to what we were just talking

163
00:10:28.179 --> 00:10:32.526
about, but you wanna make sure that
the system is robust and flexible, right?

164
00:10:32.526 --> 00:10:37.574
Think about, what kind of deep problems
you're dealing with today, while also

165
00:10:37.574 --> 00:10:42.793
making yourself a pathway to solving or
dealing with other problems in the future.

166
00:10:42.793 --> 00:10:48.733
Like I said, I knew at some point,
Lambdas are gonna be costly,

167
00:10:48.733 --> 00:10:55.223
every single time we literally fire
Lambda for every message in chat.

168
00:10:55.223 --> 00:10:59.136
And for me, who's,
smaller streamer, I stream 150,

169
00:10:59.136 --> 00:11:03.198
maybe max 200 people at a time,
that's not too bad.

170
00:11:03.198 --> 00:11:07.995
But when you're streaming to 25,000,
50,000 people and chat's just,

171
00:11:07.995 --> 00:11:09.053
[LAUGH] what I mean?

172
00:11:09.053 --> 00:11:12.512
That's your Lambda bill, baby, and
that's gonna shoot real quick.

173
00:11:12.512 --> 00:11:17.035
So you have to be prepared for
that robustness and that flexibility, and

174
00:11:17.035 --> 00:11:18.963
like I said, we knew that, but

175
00:11:18.963 --> 00:11:23.893
what's also nice is you might even
find really awesome opportunities.

176
00:11:23.893 --> 00:11:26.753
So for example, this was brought
up in my chat the other day and

177
00:11:26.753 --> 00:11:30.973
they were absolutely right, which was,
well, couldn't you have both?

178
00:11:30.973 --> 00:11:35.032
Couldn't you have dedicated things for
huge streamers, but

179
00:11:35.032 --> 00:11:40.193
still offload other things to Lambda and
still have that cost effectiveness.

180
00:11:40.193 --> 00:11:44.523
And we could, yeah, we totally could,
now that we have that modularity,

181
00:11:44.523 --> 00:11:48.852
we could even do something and say,
okay, well, if you're on this plan,

182
00:11:48.852 --> 00:11:50.884
then you use the Lambdas, right?

183
00:11:50.884 --> 00:11:54.954
And that's because you're low traffic, we
don't have to worry about the cost there.

184
00:11:54.954 --> 00:11:59.254
But if you're on this plan, then we'll
actually route you to the running service

185
00:11:59.254 --> 00:12:02.182
so that everything is going through this,
fire hose and

186
00:12:02.182 --> 00:12:06.891
we don't have to worry about your traffic
affecting other people's traffic.

187
00:12:06.891 --> 00:12:12.063
And so that's robustness, that's
flexibility that we were able to get

188
00:12:12.063 --> 00:12:17.909
because we said, no, we're gonna do this
first, but we're also gonna make it so

189
00:12:17.909 --> 00:12:22.357
that the system can be kind of plug and
play with other things.

190
00:12:22.357 --> 00:12:25.491
Again, security is heavily,
heavily important,

191
00:12:25.491 --> 00:12:30.124
making sure that you're constantly
addressing security if you have a SecOps

192
00:12:30.124 --> 00:12:32.942
team do involve them in the research part.

193
00:12:32.942 --> 00:12:37.682
I would involve any teams like security or
anything like that in the research

194
00:12:37.682 --> 00:12:41.681
because I don't know how it works
at your guys' companies, but

195
00:12:41.681 --> 00:12:45.551
the moment security walks in and
says no, its a hard no [LAUGH].

196
00:12:45.551 --> 00:12:51.458
I cannot move much when our CTO or
not our CTO, our CSO,

197
00:12:51.458 --> 00:12:56.992
comes in and is, hey, no,
that dude lays the law.

198
00:12:56.992 --> 00:13:02.556
And so you don't wanna go through building
a design and then having your CSOs,

199
00:13:02.556 --> 00:13:07.125
or your security team being like,
no, [LAUGH] we can't do this.

200
00:13:07.125 --> 00:13:11.856
So those are a good part to
include in the original design.

201
00:13:13.446 --> 00:13:16.221
Again, keeping up with
latest technology trends and

202
00:13:16.221 --> 00:13:18.942
stuff like that to make
informed design decisions.

203
00:13:18.942 --> 00:13:22.699
It's even good to keep up with
these after you've deployed, right?

204
00:13:22.699 --> 00:13:26.163
Being able to say, okay, well I see that
this is out there, but you know what?

205
00:13:26.163 --> 00:13:29.909
Our system is still good that can help
validate what you've already built.

206
00:13:29.909 --> 00:13:33.664
Or there could be opportunities for
change even after I'm saying, well,

207
00:13:33.664 --> 00:13:34.449
you know what?

208
00:13:34.449 --> 00:13:38.831
There's this new thing that we can easily
drag and drop and it'll work pretty well.

209
00:13:38.831 --> 00:13:43.483
Let's give it a shot, let's go back to the
research, let's change the design a bit,

210
00:13:43.483 --> 00:13:45.796
and let's make our changes where we want.

211
00:13:45.796 --> 00:13:51.088
I would say, the hardest part about
architecture design is the initial design.

212
00:13:51.088 --> 00:13:54.353
After you've got something
that you're sitting on top of,

213
00:13:54.353 --> 00:13:58.397
that you're comfortable with,
that you've already got in production.

214
00:13:58.397 --> 00:14:03.293
Again, this is why companies like Netflix,
Google and Amazon are actually able

215
00:14:03.293 --> 00:14:08.202
to iterate so well, is because they've
solved a lot of these problems already.

216
00:14:08.202 --> 00:14:12.050
They can go, okay now I'm just
gonna tweak just a little bit,

217
00:14:12.050 --> 00:14:14.197
tweak a little bit here and there.

218
00:14:14.197 --> 00:14:18.549
And again, I have friends who work
at Netflix and their sole job was to

219
00:14:18.549 --> 00:14:22.691
just tweak that one lever,
just make that one thing much faster.

220
00:14:22.691 --> 00:14:25.703
They didn't have to worry
about the entire system,

221
00:14:25.703 --> 00:14:29.679
because a lot of that was already
solved for, or it was taken care of.

222
00:14:29.679 --> 00:14:34.644
And that's where, you get those
kind of engineers who have worked

223
00:14:34.644 --> 00:14:39.342
on these crazy, weird situations that are,
very unique, but

224
00:14:39.342 --> 00:14:44.323
also very hard to solve,
that laser focus can help a lot with that.

225
00:14:44.323 --> 00:14:48.527
And again, incorporating feedback from
users to improve the system this should be

226
00:14:48.527 --> 00:14:49.576
in all phases.

227
00:14:49.576 --> 00:14:53.031
This should be in research, this should be
in test, this should be in development,

228
00:14:53.031 --> 00:14:55.676
this should be in deployment and
this should be in maintenance.

229
00:14:55.676 --> 00:14:57.796
It should be in all of those phases.

230
00:14:57.796 --> 00:15:02.478
If there's ever a point where you
feel like, you don't understand what

231
00:15:02.478 --> 00:15:07.158
problem this is solving for the user,
then you need to take a step back and

232
00:15:07.158 --> 00:15:10.405
understand what it is,
and why you're doing it.

233
00:15:10.405 --> 00:15:14.742
It can remove from that scope,
it can realign your focus and

234
00:15:14.742 --> 00:15:19.178
can help either slim the design or
even make it more complex.

