WEBVTT

1
00:00:00.000 --> 00:00:03.331
&gt;&gt; Erik Reinert: All right, so
now let's talk about microservices.

2
00:00:03.331 --> 00:00:07.444
So we talked about generic services,
and to be clear, like,

3
00:00:07.444 --> 00:00:11.729
even at Hippo, where I work,
we mostly have generic services.

4
00:00:11.729 --> 00:00:15.351
Microservices are something you
really have to think about and

5
00:00:15.351 --> 00:00:17.888
why you're doing them
the way that you are.

6
00:00:17.888 --> 00:00:23.378
Also, microservices normally nine times
out of ten have a coupling to a team,

7
00:00:23.378 --> 00:00:25.300
an ownership of some sort.

8
00:00:25.300 --> 00:00:30.376
For example, [LAUGH] why give
a team ten microservices to manage

9
00:00:30.376 --> 00:00:35.567
when they only really need manage
one generic service, right?

10
00:00:35.567 --> 00:00:39.283
And that's another architectural
decision that you wanna think about.

11
00:00:39.283 --> 00:00:44.028
Is there a reason why we're splitting
these all into individual services, or is

12
00:00:44.028 --> 00:00:48.726
it because you have a lot of teams and you
want this team to just handle payments.

13
00:00:48.726 --> 00:00:51.725
You want this team to just
handle the outflow, right?

14
00:00:51.725 --> 00:00:55.041
And at a huge company that's
why micro services work so

15
00:00:55.041 --> 00:00:59.439
well, is because that a company
again like Google, Amazon, Netflix,

16
00:00:59.439 --> 00:01:02.341
whatever they have hundreds of teams,
right?

17
00:01:02.341 --> 00:01:04.572
And thousands of engineers potentially.

18
00:01:04.572 --> 00:01:09.603
And so that's when it becomes more micro
where those teams, one team's auth,

19
00:01:09.603 --> 00:01:13.889
one team's security, one team's,
again, payments, right?

20
00:01:13.889 --> 00:01:15.185
Things like that.

21
00:01:15.185 --> 00:01:19.886
But each of these teams are handling these
services that are potentially processing

22
00:01:19.886 --> 00:01:22.083
thousands of requests at a given time.

23
00:01:22.083 --> 00:01:27.185
It's almost like, if you really think
about it in the simplest of terms,

24
00:01:27.185 --> 00:01:32.147
it's still a service, but
the scope of concern becomes much smaller.

25
00:01:32.147 --> 00:01:34.600
And that's why we call it a microservice.

26
00:01:34.600 --> 00:01:37.073
That's really the only reason why,

27
00:01:37.073 --> 00:01:42.272
is because the scope of the concern of
the service is much smaller to the team.

28
00:01:42.272 --> 00:01:46.191
So, microservices are a specific
style of service-based architecture.

29
00:01:46.191 --> 00:01:49.572
In a microservice architecture,
each service is small,

30
00:01:49.572 --> 00:01:51.781
independent, and loosely coupled.

31
00:01:51.781 --> 00:01:54.802
Then again,
small being the real key word here.

32
00:01:54.802 --> 00:01:58.773
If you have a service that
is handling multiple things,

33
00:01:58.773 --> 00:02:03.093
you do not have a microservice,
you have a generic service.

34
00:02:03.093 --> 00:02:06.964
If you have a service that is only
solving one specific problem,

35
00:02:06.964 --> 00:02:09.988
then you potentially might
have a micro service.

36
00:02:09.988 --> 00:02:15.124
Another thing about microservices
are they run in their own process always.

37
00:02:15.124 --> 00:02:19.056
So, they'll normally always run in their
own process as compared to generic

38
00:02:19.056 --> 00:02:22.623
services where you still might be able
to couple them with a monolith or

39
00:02:22.623 --> 00:02:23.788
something like that.

40
00:02:23.788 --> 00:02:28.637
Microservices run in their own process,
and they communicate nine

41
00:02:28.637 --> 00:02:33.739
times out of ten with other services
using protocols such as HTTP REST or

42
00:02:33.739 --> 00:02:37.074
messaging queues or
gRPC or things like that.

43
00:02:37.074 --> 00:02:41.390
So, if you have services that
are not talking to each other and

44
00:02:41.390 --> 00:02:47.130
don't have a small specific requirement,
you're just dealing with services.

45
00:02:47.130 --> 00:02:51.570
And so I would encourage everyone
out there, whether you're working on

46
00:02:51.570 --> 00:02:56.298
a project by yourself or working at a
company to look at your services and ask,

47
00:02:56.298 --> 00:02:59.456
am I actually using
a microservice architecture?

48
00:02:59.456 --> 00:03:03.020
Or am I just using a service
based architecture?

49
00:03:03.020 --> 00:03:07.373
I have had this at Hippo where
we've had people be like, yeah,

50
00:03:07.373 --> 00:03:10.001
we have a microservice architecture.

51
00:03:10.001 --> 00:03:11.636
And I'll be like, where?

52
00:03:11.636 --> 00:03:14.819
Tell me, where do we have
a microservice architecture?

53
00:03:14.819 --> 00:03:19.601
And nine times out of ten, they can't
because a lot of the times it's individual

54
00:03:19.601 --> 00:03:24.316
services being accessed directly instead
of services being interconnected,

55
00:03:24.316 --> 00:03:25.737
talking to each other.

56
00:03:25.737 --> 00:03:29.240
Now, we do have microservices, we do,

57
00:03:29.240 --> 00:03:34.191
but it's not as many as I think
people may think you have.

58
00:03:34.191 --> 00:03:39.659
&gt;&gt; Speaker 2: When would you change from a
monolithic architecture to microservices?

59
00:03:39.659 --> 00:03:43.537
&gt;&gt; Erik Reinert: So, you probably
would not go from monoliths to micro.

60
00:03:43.537 --> 00:03:48.436
That's a huge jump, that normally means
that your company is scaled huge or

61
00:03:48.436 --> 00:03:49.903
gotten quite larger.

62
00:03:49.903 --> 00:03:54.574
That would mean that, a good way of
looking at it is is that the specific

63
00:03:54.574 --> 00:03:57.266
component in your monoliths has grown so

64
00:03:57.266 --> 00:04:02.358
big that a specific team has to handle
that one specific component, right?

65
00:04:02.358 --> 00:04:06.718
That's really when a microservice becomes
something that you need to separate

66
00:04:06.718 --> 00:04:07.374
like that.

67
00:04:07.374 --> 00:04:10.777
Normally, what you would do is
you would split off into like,

68
00:04:10.777 --> 00:04:14.321
a service that handles a specific thing or
something like that.

69
00:04:14.321 --> 00:04:17.706
But it still is coupled with
other services in some way,

70
00:04:17.706 --> 00:04:22.604
which means that service has a dependency
on other services which means it's not

71
00:04:22.604 --> 00:04:24.132
really a microservice.

72
00:04:24.132 --> 00:04:25.275
A microservice,

73
00:04:25.275 --> 00:04:29.618
a good example of a microservice
which we'll show here in a second,

74
00:04:29.618 --> 00:04:34.588
is only having one service with one
database processing one specific thing.

75
00:04:34.588 --> 00:04:37.837
And then another service with
another database processing another

76
00:04:37.837 --> 00:04:38.699
specific thing.

77
00:04:38.699 --> 00:04:41.837
But if you have services that
are potentially sharing databases and

78
00:04:41.837 --> 00:04:44.929
stuff like that, those domains
are technically crossing still.

79
00:04:44.929 --> 00:04:48.823
So, you have to have a really
good line in the sand of like,

80
00:04:48.823 --> 00:04:53.512
this is just this microservice and
what it does and what it access, and

81
00:04:53.512 --> 00:04:57.730
it doesn't necessarily touch or
need to touch anything else.

82
00:04:57.730 --> 00:05:01.411
But if you have that requirement
where you can say like, okay,

83
00:05:01.411 --> 00:05:04.550
this one specific feature
doesn't touch anything.

84
00:05:04.550 --> 00:05:06.457
It can just exist on its own,

85
00:05:06.457 --> 00:05:11.398
then that's a good opportunity to
create that into like a microservice.

86
00:05:11.398 --> 00:05:15.548
And again, I wanna note,
messaging queues in this,

87
00:05:15.548 --> 00:05:19.339
we talked about HTTP/REST or
messaging queues.

88
00:05:19.339 --> 00:05:25.197
Microservices can also be what I call,
or what we call it, my workers, right?

89
00:05:25.197 --> 00:05:30.224
Which is it's on a queue listening for
one event, and that's all it does.

90
00:05:30.224 --> 00:05:31.832
That is a microservice.

91
00:05:31.832 --> 00:05:35.977
So if you have a scenario where, say,
you're processing chat messages and

92
00:05:35.977 --> 00:05:38.521
you just wanna process
Twitch chat messages.

93
00:05:38.521 --> 00:05:43.417
Then you would have a microservice that
just processes the messaging from Twitch

94
00:05:43.417 --> 00:05:44.431
chat services.

95
00:05:44.431 --> 00:05:46.521
That's all it does,
it doesn't do anything.

96
00:05:46.521 --> 00:05:50.624
A good way of looking at microservices
are kind of what we're gonna talk about in

97
00:05:50.624 --> 00:05:54.868
a little bit, which is also serverless or
functions, where it just has one goal.

98
00:05:54.868 --> 00:05:56.932
And every time you hit that microservice,

99
00:05:56.932 --> 00:05:59.234
it basically just does the same thing,
right?

100
00:05:59.234 --> 00:06:03.877
And you can scale that individual
function to N amount.

101
00:06:03.877 --> 00:06:09.394
So having a really good understanding of
that logical separation and how big or

102
00:06:09.394 --> 00:06:14.909
small that impacts other systems is when
you're gonna be in either a service or

103
00:06:14.909 --> 00:06:16.093
microservice.

104
00:06:16.093 --> 00:06:18.373
&gt;&gt; Speaker 2: If you were to,
I guess in your own example,

105
00:06:18.373 --> 00:06:22.383
if you want to grab that server that
receives chat messages and he's gonna get

106
00:06:22.383 --> 00:06:26.223
messages from different providers at
that point would that be called in?

107
00:06:26.223 --> 00:06:28.920
Or will you consider a generic service or

108
00:06:28.920 --> 00:06:32.025
a generic service instead
of a microservice?

109
00:06:32.025 --> 00:06:34.295
&gt;&gt; Erik Reinert: So
if it was processing both providers, yeah,

110
00:06:34.295 --> 00:06:36.010
it would become a generic service.

111
00:06:36.010 --> 00:06:40.867
Yeah, because it's doing more than one
thing, you have to have more than one

112
00:06:40.867 --> 00:06:45.139
maintain it on it, you have to modify
more than one thing with that.

113
00:06:45.139 --> 00:06:49.927
And so, yeah, it would become more
generic in that sense than saying this

114
00:06:49.927 --> 00:06:54.271
one thing does this one thing scale
it to as much as you want, yeah.

115
00:06:54.271 --> 00:07:01.162
So this is actually a scenario of a
service working with microservices, right?

116
00:07:01.162 --> 00:07:04.399
Now, when we first talked about
the design we saw earlier,

117
00:07:04.399 --> 00:07:07.959
we saw our front end and
our back end in two separate services, but

118
00:07:07.959 --> 00:07:10.845
they really kind of handle generic things,
right?

119
00:07:10.845 --> 00:07:14.795
In this scenario, what we're doing is
just we're saying, well, you know what?

120
00:07:14.795 --> 00:07:19.425
We wanna front end to be a service because
we know that that's going to handle all of

121
00:07:19.425 --> 00:07:24.189
our front end requests, but we wanna have
a specific team handle the user's service

122
00:07:24.189 --> 00:07:25.956
or microservice in this case.

123
00:07:25.956 --> 00:07:30.615
And it only has its own database,
it has its own logical unit,

124
00:07:30.615 --> 00:07:34.833
you can see that users has no
shared data with payments.

125
00:07:34.833 --> 00:07:39.746
What this also means is that the users
database may have records inside

126
00:07:39.746 --> 00:07:42.908
of it that even relate to one or
the other, but

127
00:07:42.908 --> 00:07:47.486
it's just a relational like ID
potentially or no ID whatsoever,

128
00:07:47.486 --> 00:07:52.179
which could mean that the user's
database only has user IDs in it.

129
00:07:52.179 --> 00:07:55.309
And the payment database only
has payment IDs in it, and

130
00:07:55.309 --> 00:07:59.779
then those are joined together somehow
via lookups or other kinds of requests.

131
00:07:59.779 --> 00:08:05.008
But this type of logical separation makes
it so that my team can own the users

132
00:08:05.008 --> 00:08:11.150
microservice, anything else with it, and
then have that database ownership as well.

133
00:08:11.150 --> 00:08:13.444
&gt;&gt; Speaker 2: Now, even users,
in this case, is rough,

134
00:08:13.444 --> 00:08:17.613
because you could still kind of consider
the user service as a generic service.

135
00:08:17.613 --> 00:08:19.484
&gt;&gt; Erik Reinert: It could be doing a lot,
right?

136
00:08:19.484 --> 00:08:24.449
So if you wanted to take this step
further, you could even say that

137
00:08:24.449 --> 00:08:29.438
maybe this is the, update users or
something like that, right?

138
00:08:29.438 --> 00:08:33.615
But this is just to kinda give you
that logical separation of, okay,

139
00:08:33.615 --> 00:08:36.639
this team manages this,
this team manages this,

140
00:08:36.639 --> 00:08:41.263
and they don't really need to communicate
or work, explicitly together.

141
00:08:41.263 --> 00:08:44.872
They can work separately, and then
whenever a change is made from any one or

142
00:08:44.872 --> 00:08:48.266
the other they just update those
teams of hey, we updated the scheme.

143
00:08:48.266 --> 00:08:53.342
Hey, we did this and
the other teams can work accordingly.

144
00:08:53.342 --> 00:08:56.054
Another thing about microservices and

145
00:08:56.054 --> 00:09:01.063
I didn't really include it in this design,
but it's kind of shown which

146
00:09:01.063 --> 00:09:06.007
is the front end is used as almost
like proxy to those services, right?

147
00:09:06.007 --> 00:09:10.345
So, the user themselves do not
talk to the user's service or

148
00:09:10.345 --> 00:09:12.566
the payment service, right?

149
00:09:12.566 --> 00:09:17.712
Those are being sent through the front
end so that the front end then has its

150
00:09:17.712 --> 00:09:23.041
own standards of how it talks to these
internal services or microservices.

151
00:09:23.041 --> 00:09:27.746
And we don't necessarily need to worry
about, well, if we change something to

152
00:09:27.746 --> 00:09:32.749
users, does it need to be updated all the
way to the user-facing side here, right?

153
00:09:32.749 --> 00:09:36.140
It's just the coupling of
these two segments here.

154
00:09:36.140 --> 00:09:42.098
And so this could be gRPC, for example,
but then this could be HTTP, right?

155
00:09:42.098 --> 00:09:47.792
And honestly going back to like,
languages and stuff like that.

156
00:09:47.792 --> 00:09:53.531
Go is a really great language to
build services and microservices in.

157
00:09:53.531 --> 00:09:57.224
Go has a lot of really
good tooling around.

158
00:09:57.224 --> 00:10:02.733
I've said it a few times with gRPC, which
is basically a really great protocol.

159
00:10:02.733 --> 00:10:07.366
And the reason why is because gRPC
allows you to describe schemas and

160
00:10:07.366 --> 00:10:12.087
then share those schemas throughout
your architecture as clients.

161
00:10:12.087 --> 00:10:15.882
And so, in the circumstance of
having a user's microservice and

162
00:10:15.882 --> 00:10:20.160
a payment's microservice or anything
like that, I could write it in Go,

163
00:10:20.160 --> 00:10:22.302
generate clients for the front end.

164
00:10:22.302 --> 00:10:25.111
And I don't even have to
write that request code.

165
00:10:25.111 --> 00:10:29.332
I don't have to go in and write like
an HTTP request and a URL endpoint.

166
00:10:29.332 --> 00:10:33.233
The microservices should
generate their own clients so

167
00:10:33.233 --> 00:10:38.880
that they can just be embedded into any
upstream or downstream services easily.

168
00:10:38.880 --> 00:10:43.484
So if those clients get updated, they just
get regenerated, and then the services

169
00:10:43.484 --> 00:10:47.719
around them can easily just pull in
those changes and use those new clients.

170
00:10:47.719 --> 00:10:53.087
This makes it really easy to maintain
distributed services, because now there

171
00:10:53.087 --> 00:10:58.069
really isn't even much of a communication
needed between the two teams.

172
00:10:58.069 --> 00:11:00.742
It's just saying, hey,
we updated our schemas.

173
00:11:00.742 --> 00:11:04.454
Go run an update on your client code,
get the latest version of the client and

174
00:11:04.454 --> 00:11:05.851
you're good to go, right?

175
00:11:05.851 --> 00:11:13.749
This is very similar to services that
exist outside of your architecture, right?

176
00:11:13.749 --> 00:11:15.737
A lot of SDKs and things like that,

177
00:11:15.737 --> 00:11:20.609
these are basically your own internal SDKs
that become available that you can use. And

178
00:11:20.609 --> 00:11:23.917
again Go's really great at services and
microservices.

179
00:11:23.917 --> 00:11:27.087
So, it is it is one I recommend,
as a matter of fact,

180
00:11:27.087 --> 00:11:29.980
it's probably the only
one I [LAUGH] recommend.

181
00:11:29.980 --> 00:11:34.460
I built services and
microservices in Nodo.js.

182
00:11:34.460 --> 00:11:38.536
Don't recommend it,
it's got its own overhead and challenges.

183
00:11:38.536 --> 00:11:41.517
Again Rust Is a great language,
but I feel like,

184
00:11:41.517 --> 00:11:44.879
there's a really big reason
to why you would use Rust.

185
00:11:44.879 --> 00:11:48.810
And most of the times it's not for
building web [LAUGH] applications.

186
00:11:48.810 --> 00:11:53.291
You normally have a much more specific
need of like, memory, security,

187
00:11:53.291 --> 00:11:56.992
things like that,
Go really checks off a lot of those boxes.

188
00:11:56.992 --> 00:12:00.558
So, if you were to ask me,
what would I build a monolith in?

189
00:12:00.558 --> 00:12:05.064
Whatever you want, [LAUGH] it doesn't
matter, whatever you want, whatever your

190
00:12:05.064 --> 00:12:09.716
team's comfortable with, like, genuinely
do whatever you want with a monolith.

191
00:12:09.716 --> 00:12:13.474
That's really, the monolith is there
to really get you to move quick.

192
00:12:13.474 --> 00:12:16.930
But when you're talking about
distribution and needing like,

193
00:12:16.930 --> 00:12:21.538
a standardized flow of updating things, Go
really is great for creating services and

194
00:12:21.538 --> 00:12:25.635
microservices, because a lot of
the tooling that's been built around it.

195
00:12:25.635 --> 00:12:28.570
And a lot of the stuff that exists in
the world today, as a matter of fact,

196
00:12:28.570 --> 00:12:30.370
it's one of the reasons
why it was created.

197
00:12:30.370 --> 00:12:34.211
Google needed a better approach
to creating safe systems, but

198
00:12:34.211 --> 00:12:36.754
also be able to make them really quickly.

199
00:12:36.754 --> 00:12:41.746
And so that's why we have gRPC, that's
why we have Go, And those two are so

200
00:12:41.746 --> 00:12:45.171
tightly coupled because they work so
well together

