WEBVTT

1
00:00:00.000 --> 00:00:02.589
&gt;&gt; Erik Reinert: After you
set your requirements,

2
00:00:02.589 --> 00:00:05.183
I do recommend some exploration.

3
00:00:05.183 --> 00:00:08.232
Give yourself, like,
that's the fun part of the job, right?

4
00:00:08.232 --> 00:00:11.245
Giving yourself an opportunity to play and

5
00:00:11.245 --> 00:00:15.269
explore, researching of
testing of new technologies.

6
00:00:15.269 --> 00:00:23.487
But can anyone guess why we do that after
setting the requirements [LAUGH] right?

7
00:00:23.487 --> 00:00:25.326
&gt;&gt; Speaker 2: We can find
the right design and tools?

8
00:00:25.326 --> 00:00:28.016
&gt;&gt; Erik Reinert: Exactly, yeah, and
I get this question all the time,

9
00:00:28.016 --> 00:00:30.545
which is how do you pick
the right tools for the job?

10
00:00:30.545 --> 00:00:32.191
Well, I define the job first.

11
00:00:32.191 --> 00:00:33.301
[LAUGH] You know what I mean?

12
00:00:33.301 --> 00:00:37.993
I sit down and I say, well, here's my
requirements, and then it becomes really

13
00:00:37.993 --> 00:00:42.348
easy to throw out things or keep things,
that scope becomes a lot smaller.

14
00:00:42.348 --> 00:00:46.828
So, set your requirements first and
then explore, right?

15
00:00:46.828 --> 00:00:51.487
You'll avoid falling down rabbit holes,
you'll avoid wasting time, but

16
00:00:51.487 --> 00:00:55.364
it still gives you an opportunity
to try new things if you want.

17
00:00:55.364 --> 00:00:57.750
It's just a more structured
way of doing it.

18
00:00:59.854 --> 00:01:02.238
&gt;&gt; Erik Reinert: Also new
methodologies and tools, right?

19
00:01:02.238 --> 00:01:04.926
So we're talking about technologies and
stuff like that,

20
00:01:04.926 --> 00:01:06.977
but we also wanna talk
about methodologies.

21
00:01:06.977 --> 00:01:12.528
Maybe you want to readdress how inter
service communication works, right?

22
00:01:12.528 --> 00:01:17.874
Maybe you want to readdress how a specific
thing is maintained or managed, right?

23
00:01:17.874 --> 00:01:21.412
So it's not just about
exploring new technologies,

24
00:01:21.412 --> 00:01:24.871
but it's also about
exploring new methodologies,

25
00:01:24.871 --> 00:01:29.754
new approaches to things that could
improve other systems in the future.

26
00:01:29.754 --> 00:01:33.599
A good example of that is going back to

27
00:01:33.599 --> 00:01:38.809
the Kubernetes example
that I'm doing at my job,

28
00:01:38.809 --> 00:01:45.154
we have to use ECS to deploy all
of our services at the moment.

29
00:01:45.154 --> 00:01:47.122
And ECS is great, however,

30
00:01:47.122 --> 00:01:51.560
it doesn't really provide us with
a lot of deployment options.

31
00:01:51.560 --> 00:01:53.772
You can get like basic blue-green,

32
00:01:53.772 --> 00:01:56.991
but canary deployments
are a little bit harder to do.

33
00:01:56.991 --> 00:01:58.827
Say you wanna do user testing,

34
00:01:58.827 --> 00:02:03.922
where like 50% of your audience goes to
one service versus 50% goes to another.

35
00:02:03.922 --> 00:02:08.701
This was actually a massive argument
that we were able to win because we

36
00:02:08.701 --> 00:02:12.265
know that on Kubernetes and
using the right system,

37
00:02:12.265 --> 00:02:15.592
we can do that very easily,
like, very easily.

38
00:02:15.592 --> 00:02:18.788
And that's not as easy
with our current platform.

39
00:02:18.788 --> 00:02:22.260
So, exploring the tools that
you're using and asking,

40
00:02:22.260 --> 00:02:25.440
is it worth going back to
the question we had before,

41
00:02:25.440 --> 00:02:30.022
when did you know to change everything or
a specific thing, this can help.

42
00:02:30.022 --> 00:02:33.658
As you start seeing more things change,
you might start saying, well,g,

43
00:02:33.658 --> 00:02:35.166
there's a lot we need to change.

44
00:02:37.780 --> 00:02:41.809
&gt;&gt; Erik Reinert: This one, however,
is probably the most important,

45
00:02:41.809 --> 00:02:46.365
especially in exploration,
which is determine if the goal is

46
00:02:46.365 --> 00:02:50.234
to improve the system design entirely or
innovate.

47
00:02:50.234 --> 00:02:53.972
Or make small changes
when needed iteration.

48
00:02:53.972 --> 00:02:57.612
You might find yourself in a scenario
where you start exploring,

49
00:02:57.612 --> 00:03:00.271
you start looking at the system and
then you go.

50
00:03:00.271 --> 00:03:04.555
We could also just make a very small
change here and probably work off of that

51
00:03:04.555 --> 00:03:08.299
for the next six months and
then readdress this six months later.

52
00:03:08.299 --> 00:03:11.393
That's fine, honestly, that's fine.

53
00:03:11.393 --> 00:03:14.386
You might be like, why say that?

54
00:03:14.386 --> 00:03:16.213
But the reality of it is,

55
00:03:16.213 --> 00:03:20.304
is your job is just to serve
the company the best you can.

56
00:03:20.304 --> 00:03:25.957
And innovation sometimes does impact the
ability to keep moving and keep growing.

57
00:03:25.957 --> 00:03:30.044
And I mean, more often than not, I'm sure
we've all dealt with this where we wanted

58
00:03:30.044 --> 00:03:34.035
to change a lot, but then realized that it
was gonna be a ton of work, a ton of time.

59
00:03:34.035 --> 00:03:38.319
And it could have potentially add six
months to a scope of a project that

60
00:03:38.319 --> 00:03:43.490
probably do in, like, a month, depending
on whatever you're trying to achieve.

61
00:03:43.490 --> 00:03:45.942
So, be honest with yourself.

62
00:03:45.942 --> 00:03:50.281
During this exploration time,
after setting your requirements,

63
00:03:50.281 --> 00:03:53.704
ask yourself,
do we really need to innovate here, or

64
00:03:53.704 --> 00:03:57.604
do we just need to make some
small changes in certain places?

65
00:03:57.604 --> 00:04:02.369
After you've done your requirements,
after you've done your exploration,

66
00:04:02.369 --> 00:04:05.508
this is where technical documents come in,
right?

67
00:04:05.508 --> 00:04:10.278
So, start writing documents down and
start getting comfortable with writing

68
00:04:10.278 --> 00:04:14.832
documentation and understanding how
to put your thoughts, your ideas and

69
00:04:14.832 --> 00:04:17.957
everything you're trying to do on paper,
right?

70
00:04:17.957 --> 00:04:22.404
Whether it be, I've written technical
documentation around stuff we've

71
00:04:22.404 --> 00:04:24.426
explored and never used, right?

72
00:04:24.426 --> 00:04:28.184
But a big value for that is, is the next
time that somebody else comes to

73
00:04:28.184 --> 00:04:30.621
the table and asks, well, what about this?

74
00:04:30.621 --> 00:04:33.930
We could say, well, here's the doc
on last time we explored this.

75
00:04:33.930 --> 00:04:38.144
And a good example to that,
is right now, we are working at

76
00:04:38.144 --> 00:04:43.143
making a centralized observability
system for testing it at Hippo.

77
00:04:43.143 --> 00:04:48.237
Basically, we have 40 integration
test repositories and they

78
00:04:48.237 --> 00:04:54.363
all use JUnit behind the hood to produce
report artifacts and stuff like that.

79
00:04:54.363 --> 00:04:59.292
But we don't have a way to satisfy
what our engineering managers now

80
00:04:59.292 --> 00:05:04.151
want which is understanding how
often are those failing, right?

81
00:05:04.151 --> 00:05:06.063
How often are they flaky?

82
00:05:06.063 --> 00:05:06.777
What are flaky?

83
00:05:06.777 --> 00:05:07.714
Where are they failing?

84
00:05:07.714 --> 00:05:11.392
All these kinda things, because
the errors are literally in console logs.

85
00:05:11.392 --> 00:05:13.803
[LAUGH] That's the only way
you can get to the errors.

86
00:05:13.803 --> 00:05:16.890
There's no report that you
could just easily look at.

87
00:05:16.890 --> 00:05:23.609
And so, we discussed it, and I was like,
well, we need a portal of some sort.

88
00:05:23.609 --> 00:05:27.750
We need some kind of UI or something, and
they're like, yeah, we looked into it, but

89
00:05:27.750 --> 00:05:28.818
the cost was too much.

90
00:05:28.818 --> 00:05:32.292
And I was like, I didn't though.

91
00:05:32.292 --> 00:05:34.581
So I'm gonna try looking into it.

92
00:05:34.581 --> 00:05:38.015
And sure enough, I went back,
I looked at a few of the open source and

93
00:05:38.015 --> 00:05:39.530
even proprietary examples.

94
00:05:39.530 --> 00:05:43.969
And one of the examples that was
proprietary had moved to an open

95
00:05:43.969 --> 00:05:45.068
source model.

96
00:05:45.068 --> 00:05:49.745
And we didn't check it, we were just like,
well, the article's right there, whatever.

97
00:05:49.745 --> 00:05:54.044
But because it was there and I was able
to look at it and read what they said and

98
00:05:54.044 --> 00:05:57.591
then go back and say, okay,
now I can go and say, well, hey,

99
00:05:57.591 --> 00:05:59.799
this article is actually out of date.

100
00:05:59.799 --> 00:06:02.765
There's the potential of us
being able to use this software.

101
00:06:02.765 --> 00:06:06.777
And here's how we can, like, update
the article, here's how we can update and

102
00:06:06.777 --> 00:06:07.496
try a new POC.

103
00:06:07.496 --> 00:06:09.372
And that's what we're doing,

104
00:06:09.372 --> 00:06:13.690
we're trying a new POC of a product
to hopefully help solve that problem.

105
00:06:13.690 --> 00:06:15.095
So technical documents can help.

106
00:06:15.095 --> 00:06:19.726
They can understand where you've been
as well a iterating over them and

107
00:06:19.726 --> 00:06:22.666
helping to where you
want to go in the future.

108
00:06:22.666 --> 00:06:24.022
And as I just mentioned,

109
00:06:24.022 --> 00:06:27.780
provide detailed descriptions of
those explored systems, right?

110
00:06:27.780 --> 00:06:30.978
Architectures, models, interfaces, data,

111
00:06:30.978 --> 00:06:35.658
anything relevant to the project is
super helpful with making your case

112
00:06:35.658 --> 00:06:39.722
helping understand how you're
trying to implement things.

113
00:06:39.722 --> 00:06:42.978
But you really want to, you really wanna,

114
00:06:42.978 --> 00:06:46.783
like, you are an explorer in a new world,
right?

115
00:06:46.783 --> 00:06:47.937
This is your journal.

116
00:06:47.937 --> 00:06:52.258
This is your way that you're going
to figure out how to showcase and

117
00:06:52.258 --> 00:06:56.518
share where you've already been,
as well as where you wanna go.

118
00:06:58.039 --> 00:07:01.176
&gt;&gt; Erik Reinert: And then a big part
of reason why technical documents

119
00:07:01.176 --> 00:07:05.666
are important is that you can then take
all of that stuff and not have to say,

120
00:07:05.666 --> 00:07:09.159
over and over and over and over and
over and over and over and

121
00:07:09.159 --> 00:07:11.180
over again in meetings, right?

122
00:07:11.180 --> 00:07:15.482
Instead of having to have long Slack
conversations about the same thing five or

123
00:07:15.482 --> 00:07:17.707
seven times, you just give them a link.

124
00:07:17.707 --> 00:07:22.235
Say, here's the link on this architecture
and why we decided to do it this way.

125
00:07:22.235 --> 00:07:25.173
If you have any comments,
add it to the article, right?

126
00:07:25.173 --> 00:07:29.888
Don't put this in a Slack discussion or
in a teams or whatever you use, but

127
00:07:29.888 --> 00:07:35.062
keep the conversation together and let
everyone be a part of that conversation,

128
00:07:35.062 --> 00:07:38.353
whether it be development teams or
stakeholders.

129
00:07:38.353 --> 00:07:42.149
And again, this will facilitate
communication and collaboration,

130
00:07:42.149 --> 00:07:45.567
you do not wanna work on
an architecture designed by yourself.

131
00:07:45.567 --> 00:07:50.384
You might start it, you might create
the initial foundation for it.

132
00:07:50.384 --> 00:07:54.335
But you do wanna facilitate that
communication and collaboration because

133
00:07:54.335 --> 00:07:58.170
when you go to present it,
you'll have more people behind you, right?

134
00:07:58.170 --> 00:08:00.658
You'll have more backing and
it'll become easier.

135
00:08:00.658 --> 00:08:04.415
Going back to the EKS
versus ECS conversation.

136
00:08:04.415 --> 00:08:08.578
When we tried presenting EKS for the first
time, it was just the dev team that had

137
00:08:08.578 --> 00:08:11.764
the backing, that was the DevOps
team that had the backing.

138
00:08:11.764 --> 00:08:16.684
But we learned from that and we decided,
okay, well, let's figure out a way

139
00:08:16.684 --> 00:08:20.619
of piloting a certain part of
the company to try this product,

140
00:08:20.619 --> 00:08:25.264
to try this approach, and then six
months later, we had great results.

141
00:08:25.264 --> 00:08:30.134
And this team literally went in front of
the entire engineering staff and said,

142
00:08:30.134 --> 00:08:34.799
we've had zero problems with this
infrastructure for the past six months.

143
00:08:34.799 --> 00:08:39.539
That is irrefutable, you can't say that
it doesn't work because at that point,

144
00:08:39.539 --> 00:08:41.817
we've already tested it with people.

145
00:08:41.817 --> 00:08:45.813
We've already facilitated a lot of that
communication and collaboration to where

146
00:08:45.813 --> 00:08:49.763
we solved a lot of those problems because
we worked very closely with those teams.

147
00:08:52.962 --> 00:08:55.663
&gt;&gt; Erik Reinert: Okay, so
again, that's research.

148
00:08:55.663 --> 00:08:59.813
Really, that's all about research, right?

149
00:08:59.813 --> 00:09:01.362
When you're ready,

150
00:09:01.362 --> 00:09:05.932
you can start implementing
the systems design of your choice.

151
00:09:05.932 --> 00:09:08.733
And these are really steps to that, right?

152
00:09:08.733 --> 00:09:12.350
First off,
choosing the appropriate design, right?

153
00:09:12.350 --> 00:09:16.903
Defining the architecture,
developing the architecture, testing it,

154
00:09:16.903 --> 00:09:19.150
deploying it, and maintaining it.

155
00:09:19.150 --> 00:09:23.112
All of these are very,
very crucial, but also very,

156
00:09:23.112 --> 00:09:28.327
very different steps of the process
that you really wanna go through.

157
00:09:28.327 --> 00:09:30.680
I said before,
you don't wanna create something and

158
00:09:30.680 --> 00:09:33.407
then just put it in production and
hope to God that that works.

159
00:09:33.407 --> 00:09:37.897
You can, but
that might not help work out well for you.

160
00:09:37.897 --> 00:09:41.301
[LAUGH] So
trying to do as much as you can before

161
00:09:41.301 --> 00:09:46.183
you put it into the customer's
hands can be really important.

162
00:09:46.183 --> 00:09:49.223
So, again,
some of this is a little repetitive, but

163
00:09:49.223 --> 00:09:53.491
it really should help you understand
now why we talked about these things.

164
00:09:53.491 --> 00:09:57.604
You wanna choose the design that best fits
the project requirements that you set,

165
00:09:57.604 --> 00:10:01.074
the team expertise that you have,
the understanding of the budget.

166
00:10:01.074 --> 00:10:05.043
The time constraints outlined in
the technical documents mentioned,

167
00:10:05.043 --> 00:10:09.275
everything that you have built to
understand why you're building the thing

168
00:10:09.275 --> 00:10:13.394
that you are should at this point help
you choose the appropriate design.

169
00:10:13.394 --> 00:10:18.103
If you get to this point and you're okay,
I still don't know what to choose,

170
00:10:18.103 --> 00:10:19.630
then you need to go back.

171
00:10:19.630 --> 00:10:24.083
You need to go back to research, you need
to go back to exploration and you need to

172
00:10:24.083 --> 00:10:28.602
go back to working on those technical
design documents because realistically,

173
00:10:28.602 --> 00:10:31.673
more times than not,
it should just be a no-brainer.

174
00:10:31.673 --> 00:10:34.610
At the point of where you finally
have collected everything,

175
00:10:34.610 --> 00:10:38.279
you should have at least enough of the
puzzle together to where you could say,

176
00:10:38.279 --> 00:10:40.388
well, here's the project requirements.

177
00:10:40.388 --> 00:10:44.407
Here's the team expertise, here's
the budget, here's the time constraints.

178
00:10:44.407 --> 00:10:46.518
This is the best solution, yeah.

179
00:10:46.518 --> 00:10:49.233
&gt;&gt; Speaker 2: How much time I realize
every project is different, but

180
00:10:49.233 --> 00:10:51.323
sort of like, proportionally speaking.

181
00:10:51.323 --> 00:10:55.948
Do you feel like, you spend on sort of
the research requirements defining phase?

182
00:10:55.948 --> 00:10:57.500
&gt;&gt; Erik Reinert: Yeah.
&gt;&gt; Speaker 2: Versus when you're in,

183
00:10:57.500 --> 00:11:00.308
I don't know, I mean,
there was six things on that list.

184
00:11:00.308 --> 00:11:01.664
&gt;&gt; Erik Reinert: Yeah.
&gt;&gt; Speaker 2: [LAUGH] Implementation so

185
00:11:01.664 --> 00:11:04.432
if we just take all of that, like,
&gt;&gt; Erik Reinert: It can be anything from

186
00:11:04.432 --> 00:11:05.459
a week to a month.

187
00:11:05.459 --> 00:11:06.863
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Erik Reinert: Yeah, I think,

188
00:11:06.863 --> 00:11:10.114
I honestly don't think you wanna
go too far beyond a month,

189
00:11:10.114 --> 00:11:12.205
at least without knowing something.

190
00:11:12.205 --> 00:11:16.141
Otherwise, that's a lot of time wasted,
[LAUGH] like,

191
00:11:16.141 --> 00:11:20.178
researching, you do wanna
find a good balance of where.

192
00:11:20.178 --> 00:11:23.154
It's gonna get to a point as
well where your team lead, or

193
00:11:23.154 --> 00:11:26.878
whoever your managers is gonna kinda
be like, hey, what's going on?

194
00:11:26.878 --> 00:11:28.609
[LAUGH] Like, what's happening?

195
00:11:28.609 --> 00:11:30.483
I don't know what you're doing, right?

196
00:11:30.483 --> 00:11:31.585
And you don't wanna be,

197
00:11:31.585 --> 00:11:34.744
you don't wanna be concerning people
about what you're trying to do.

198
00:11:34.744 --> 00:11:39.305
Or, that means that you've kind of been
black boxing yourself, and not a lot of

199
00:11:39.305 --> 00:11:43.889
people understand that might mean that
you need to have better communication.

200
00:11:43.889 --> 00:11:46.095
You're not talking to the right teams.

201
00:11:46.095 --> 00:11:50.363
And I dealt with this a lot, actually,
when I first started getting into DevOps

202
00:11:50.363 --> 00:11:52.927
and platform engineering and
stuff like that.

203
00:11:52.927 --> 00:11:56.021
I would work solely with myself,
and then like,

204
00:11:56.021 --> 00:11:59.874
two to three weeks later,
nobody knew what I was working on.

205
00:11:59.874 --> 00:12:04.203
But it wasn't because I wasn't working,
it was because I wasn't talking about it.

206
00:12:04.203 --> 00:12:06.197
I wasn't sharing it with the other teams.

207
00:12:06.197 --> 00:12:11.057
Nobody was seeing me ask questions,
nobody was seeing me do what I was,

208
00:12:11.057 --> 00:12:13.408
especially supposed to be doing.

209
00:12:13.408 --> 00:12:18.760
And so, that made it harder to
understand what the progress was.

210
00:12:18.760 --> 00:12:19.726
More people,

211
00:12:19.726 --> 00:12:24.565
more opinions to make it easier to
get to your point quicker basically.

212
00:12:27.254 --> 00:12:30.382
&gt;&gt; Erik Reinert: So, we talked about
choosing the appropriate design,

213
00:12:30.382 --> 00:12:33.852
now we wanna define the actual
architecture itself, right?

214
00:12:33.852 --> 00:12:37.775
So, at this point you should have a good
understanding if you wanna have high

215
00:12:37.775 --> 00:12:38.954
modularity, right?

216
00:12:38.954 --> 00:12:42.752
You should be able to have a good
understanding of how things should work.

217
00:12:42.752 --> 00:12:46.567
And so this is really where you
start putting pen to paper and

218
00:12:46.567 --> 00:12:50.087
what I would kind of consider
is like the jigsaw stage.

219
00:12:50.087 --> 00:12:53.163
Where you're gonna take each
one of these components,

220
00:12:53.163 --> 00:12:56.238
you're just gonna throw them
down on a piece of paper and

221
00:12:56.238 --> 00:13:00.375
you start moving things around until
they kind of start meshing together.

222
00:13:00.375 --> 00:13:05.025
But they all need to be their own
individual ideas or components.

223
00:13:05.025 --> 00:13:10.154
And then, this in my mind is
where workflows and charts and

224
00:13:10.154 --> 00:13:17.494
designs and diagrams and things like that
can become massively valuable, right?

225
00:13:17.494 --> 00:13:23.719
You throw all of your components onto
a piece of paper, or into a diagram.

226
00:13:23.719 --> 00:13:25.499
And then you start
moving things around and

227
00:13:25.499 --> 00:13:27.581
figuring out does this
interface work with this?

228
00:13:27.581 --> 00:13:30.700
Does this work well with this,
is this architecture fit well for

229
00:13:30.700 --> 00:13:31.984
what we're trying to do.

230
00:13:31.984 --> 00:13:36.695
This can solve a lot when it comes
to trying to actually figure out

231
00:13:36.695 --> 00:13:39.061
what you're trying to define.

