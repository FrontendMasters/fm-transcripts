WEBVTT

1
00:00:00.060 --> 00:00:02.226
&gt;&gt; Erik Reinert: All right,
so let's talk about the pros.

2
00:00:02.226 --> 00:00:04.904
As we just mentioned,
there's no service management or

3
00:00:04.904 --> 00:00:06.755
server management required, right?

4
00:00:06.755 --> 00:00:11.559
I can easily just push my code up and
run it, and I don't have to worry about,

5
00:00:11.559 --> 00:00:16.010
is the server gonna be up,
does the server have enough compute power?

6
00:00:16.010 --> 00:00:19.324
Does the server have enough network layer,
networking, throughput,

7
00:00:19.324 --> 00:00:22.327
all that kind of stuff,
this taken care of by the cloud provider.

8
00:00:22.327 --> 00:00:23.826
Which again, is really,

9
00:00:23.826 --> 00:00:27.651
really nice when we're talking
about being a small team, right?

10
00:00:27.651 --> 00:00:30.746
Or having a little limited amount
of resources of working on,

11
00:00:30.746 --> 00:00:34.740
you might even be a big team, but maybe
only one person can work on this, right?

12
00:00:34.740 --> 00:00:39.710
It gives you a lot more flexibility
with not having to also consider

13
00:00:39.710 --> 00:00:42.651
the management requirements as well.

14
00:00:42.651 --> 00:00:44.400
Cost-based usage, right?

15
00:00:44.400 --> 00:00:49.098
So there's no pre-purchase capacity,
I don't have to pay for

16
00:00:49.098 --> 00:00:53.709
a $50 a month database or
EC2 instance or things like that,

17
00:00:53.709 --> 00:00:56.755
it's based on entirely off of the usage.

18
00:00:56.755 --> 00:01:02.019
So again, when you're talking
about dev environment, right?

19
00:01:02.019 --> 00:01:04.281
One of the challenges that
we even had Hippo for

20
00:01:04.281 --> 00:01:07.819
a while was that our dev environments
almost cost as much as production,

21
00:01:07.819 --> 00:01:11.068
because it's still the same
infrastructure at the end of the day.

22
00:01:11.068 --> 00:01:13.168
It might not scale out the same way,

23
00:01:13.168 --> 00:01:16.320
but it still means we have to
be running EKS cluster and

24
00:01:16.320 --> 00:01:20.751
ECS cluster, we have to have instances
sitting there and stuff like that.

25
00:01:20.751 --> 00:01:26.127
And so this can be a massive cost
saved by just simply saying, hey,

26
00:01:26.127 --> 00:01:32.465
we're just gonna focus on usage here
rather than pre-purchase capacity, or

27
00:01:32.465 --> 00:01:37.670
always running on demand capacity
is really what it's called.

28
00:01:37.670 --> 00:01:40.291
And then finally,
automated scaling, right?

29
00:01:40.291 --> 00:01:43.964
We talked about scaling and how difficult
it can be and all these things.

30
00:01:43.964 --> 00:01:46.591
Well, if you build it
pretty much all serverless,

31
00:01:46.591 --> 00:01:49.720
that's one of the few things
you don't have to worry about.

32
00:01:49.720 --> 00:01:57.355
However, and I have to say this as my
due-diligence as an architect or whatever.

33
00:01:57.355 --> 00:02:01.515
Automated scaling can
also hurt you [LAUGH].

34
00:02:01.515 --> 00:02:06.703
Why might saying I'm not gonna care
about my scaling might hurt you,

35
00:02:06.703 --> 00:02:08.145
can anyone guess?

36
00:02:08.145 --> 00:02:10.106
&gt;&gt; Speaker 2: DDoS is expensive [LAUGH].

37
00:02:10.106 --> 00:02:14.875
&gt;&gt; Erik Reinert: Exactly, yeah, at any
point where scaling goes way beyond your

38
00:02:14.875 --> 00:02:18.861
expectations, you might
have a massive cloud bill.

39
00:02:18.861 --> 00:02:21.418
I don't know if you guys
recently noticed but

40
00:02:21.418 --> 00:02:24.656
Amazon actually made a huge
change to their S3 buckets.

41
00:02:24.656 --> 00:02:27.349
To where anything that is publicly hosted,

42
00:02:27.349 --> 00:02:31.508
they're no longer going to charge for
errors and things like that.

43
00:02:31.508 --> 00:02:35.504
This was a huge problem because
people could DDoS S3 buckets and

44
00:02:35.504 --> 00:02:38.910
stuff like that and
then effectively blow somebody's

45
00:02:38.910 --> 00:02:42.405
cloud costs through the roof
based off of errors alone.

46
00:02:42.405 --> 00:02:45.653
And so I believe it was either
they subtracted that cost or

47
00:02:45.653 --> 00:02:50.267
they removed it entirely, but now they
realize, all right, this is a problem.

48
00:02:50.267 --> 00:02:55.396
We need to figure out, meaning Amazon
needs to figure out how to fix that so

49
00:02:55.396 --> 00:03:01.131
that customers who are using this don't
have to worry about that cost incursion.

50
00:03:01.131 --> 00:03:06.280
And so that is where you need to be
careful, right, with automated scaling

51
00:03:06.280 --> 00:03:11.283
because another thing that's very
common is Lambdas calling Lambdas.

52
00:03:13.244 --> 00:03:16.439
&gt;&gt; Erik Reinert: You can easily scale
through the roof if a Lambda calls

53
00:03:16.439 --> 00:03:20.570
a Lambda and then it calls itself back,
then it'll just skyrocket.

54
00:03:20.570 --> 00:03:24.424
So automated scaling is great but
it is a bit of a double-edged sword,

55
00:03:24.424 --> 00:03:28.930
you have to be prepared of what happens if
your throughput goes through the roof and

56
00:03:28.930 --> 00:03:30.917
you're not ready for those costs.

57
00:03:30.917 --> 00:03:33.946
And there's a lot of different
ways that you can deal with it,

58
00:03:33.946 --> 00:03:36.393
you can deal with it through
like billing alerts,

59
00:03:36.393 --> 00:03:40.192
you can deal with like thresholds and
like rate limiting, things like that.

60
00:03:40.192 --> 00:03:43.403
It's just other ways of
solving that problem, so

61
00:03:43.403 --> 00:03:46.944
you don't have to deal with those costs.

62
00:03:46.944 --> 00:03:49.647
&gt;&gt; Erik Reinert: So let's talk about cons.

63
00:03:49.647 --> 00:03:52.755
So we've already kinda mentioned
this a few times again,

64
00:03:52.755 --> 00:03:56.372
with Quirk architecture and
dealing with things like thousands and

65
00:03:56.372 --> 00:03:58.797
thousands of requests
coming in per second.

66
00:03:58.797 --> 00:04:03.845
The architecture can become more
expensive for long-term applications.

67
00:04:03.845 --> 00:04:04.494
So again,

68
00:04:04.494 --> 00:04:09.483
if you're in a scenario where you have
thousands of requests per second, right?

69
00:04:09.483 --> 00:04:13.157
That means thousands of Lambdas
per second being fired,

70
00:04:13.157 --> 00:04:16.685
you are being charged per
every Lambda that's fired.

71
00:04:16.685 --> 00:04:20.889
However, there will be a point and
it's pure math, right?

72
00:04:20.889 --> 00:04:25.073
There will be a point at the end of
the day where the amount of dollars you're

73
00:04:25.073 --> 00:04:29.392
incurring per minute is more than
the amount of dollars you're incurring per

74
00:04:29.392 --> 00:04:32.663
minute in just like an on-demand
EC2 instance, right?

75
00:04:32.663 --> 00:04:36.318
Because that's a fixed cost,
whereas Lambdas and

76
00:04:36.318 --> 00:04:42.197
serverless are not a fixed cost, they will
go until you tell them to stop, right?

77
00:04:42.197 --> 00:04:47.177
And so like I said, there will become
a time where when Quirk is needed to

78
00:04:47.177 --> 00:04:50.829
connect to much larger content creators,
counts or

79
00:04:50.829 --> 00:04:54.822
things like that,
that we will need to think about that.

80
00:04:54.822 --> 00:04:59.472
Will need to go okay, well,
we can't process some random streamer

81
00:04:59.472 --> 00:05:04.369
who's got like 50,000 viewers
just flooding their chat that one

82
00:05:04.369 --> 00:05:09.453
person could incur more costs than
everyone else on the entire platform.

83
00:05:09.453 --> 00:05:10.997
How do you basically handle that?

84
00:05:10.997 --> 00:05:14.848
Well, that one component might not
need to be serverless anymore.

85
00:05:14.848 --> 00:05:19.108
And so that's where you can then say,
okay, we're gonna take this component out,

86
00:05:19.108 --> 00:05:21.149
we're gonna put a service in its place.

87
00:05:21.149 --> 00:05:26.793
And now we're scaling off of a fixed cost
of how much that instance costs per day,

88
00:05:26.793 --> 00:05:29.366
and that will save you a lot of money.

89
00:05:29.366 --> 00:05:33.481
Again, going back to Fossabot
in comparison to Quirk and

90
00:05:33.481 --> 00:05:39.222
the conversation I had with Aiden,
that was, the first thing he said, he was,

91
00:05:39.222 --> 00:05:44.384
that's great bro, but I couldn't do that,
and that's exactly why.

92
00:05:44.384 --> 00:05:48.616
So testing can be difficult on
the environments reliance on the Internet,

93
00:05:48.616 --> 00:05:52.122
this is exactly what you were
talking about earlier, right?

94
00:05:52.122 --> 00:05:54.861
How do you test this thing
properly without having to

95
00:05:54.861 --> 00:05:58.969
have these requirements and you kinda
can't, you have to be on the Internet,

96
00:05:58.969 --> 00:06:02.910
you have to make sure that your Lambdas
are exposed on the Internet as well.

97
00:06:02.910 --> 00:06:07.575
Or you might have to have a VPN which
connects you into the network so

98
00:06:07.575 --> 00:06:11.089
that you can fire internal Lambdas and
we do both.

99
00:06:11.089 --> 00:06:16.024
For Quirk, we have public API gateways and
private API gateways actually.

100
00:06:16.024 --> 00:06:18.709
And so sometimes we need
to connect to the VPN, so

101
00:06:18.709 --> 00:06:21.853
that you can then access
the internal gateways and test,

102
00:06:21.853 --> 00:06:25.279
database connections or
database calls and stuff like that.

103
00:06:25.279 --> 00:06:28.104
Versus public connections,
which is like, again,

104
00:06:28.104 --> 00:06:31.763
the chat messages coming in from Twitch or
Discord or whatever else.

105
00:06:31.763 --> 00:06:36.678
So there is a difficulty around the
environment's reliance on the Internet.

106
00:06:36.678 --> 00:06:40.314
Personally, in the year of 2024,
it's not that big

107
00:06:40.314 --> 00:06:45.031
of a deal to me cuz I'm always on
the Internet, but that's a preference.

108
00:06:45.031 --> 00:06:49.329
So take that with a grain of salt,
it doesn't mean that you feel the same way

109
00:06:49.329 --> 00:06:52.124
I do, I know some people
who like to be able to go,

110
00:06:52.124 --> 00:06:55.486
completely zero access off
the Internet and off the grid.

111
00:06:55.486 --> 00:06:58.458
That's great, but I like being on,
the grid's nice [LAUGH].

112
00:06:58.458 --> 00:07:03.355
So for me, it's not that big of a con,
but again,

113
00:07:03.355 --> 00:07:07.449
it really depends on your requirements.

114
00:07:07.449 --> 00:07:10.544
Troubleshooting and
debugging is also more complex,

115
00:07:10.544 --> 00:07:12.900
can anyone guess why troubleshooting and

116
00:07:12.900 --> 00:07:17.482
debugging might be more complex outside
of it just needing to be on the Internet?

117
00:07:17.482 --> 00:07:20.000
When we're talking about,
basses and facets and stuff.

118
00:07:20.000 --> 00:07:21.955
&gt;&gt; Speaker 3: You don't know when one or
see anything.

119
00:07:21.955 --> 00:07:22.589
&gt;&gt; Erik Reinert: Exactly.

120
00:07:22.589 --> 00:07:23.369
&gt;&gt; Speaker 3: Behind the wall.

121
00:07:23.369 --> 00:07:24.476
&gt;&gt; Erik Reinert: Exactly, yeah, so

122
00:07:24.476 --> 00:07:28.191
you don't know how somebody
implemented something you don't know

123
00:07:28.191 --> 00:07:32.310
if there's actually pre-imposed rate
limits that you're not aware of.

124
00:07:32.310 --> 00:07:37.425
You don't know if there might be an outage
on the service that you're relying on,

125
00:07:37.425 --> 00:07:37.953
right?

126
00:07:37.953 --> 00:07:42.020
These are all challenges that you have
to be aware of when you're talking

127
00:07:42.020 --> 00:07:45.164
about relying on other people for
that functionality.

128
00:07:45.164 --> 00:07:49.344
And if you're not considerate of that,
you can easily have outages, downtime and

129
00:07:49.344 --> 00:07:51.747
completely unplanned
you're not aware of it.

130
00:07:51.747 --> 00:07:56.646
You have to stay synchronized
with those providers as well.

131
00:07:56.646 --> 00:08:01.164
So you have to be aware and say, hey,
whenever they announce an outage,

132
00:08:01.164 --> 00:08:03.696
you have to announce an outage, right?

133
00:08:03.696 --> 00:08:06.433
It becomes a little bit more
dependant in that sense as well.

134
00:08:06.433 --> 00:08:11.536
So this is where again, a lot more older
people in the industry who were around

135
00:08:11.536 --> 00:08:17.050
when we just had data centers and stuff
like that are, forget cloud architecture.

136
00:08:17.050 --> 00:08:20.240
It's a big reason why they normally
say that is because they are so

137
00:08:20.240 --> 00:08:23.844
used to relying on themselves that
they don't wanna rely on anyone else.

138
00:08:23.844 --> 00:08:28.686
So it can definitely become more
challenging when your intellectual

139
00:08:28.686 --> 00:08:33.532
property is dependent on somebody
else's intellectual property.

