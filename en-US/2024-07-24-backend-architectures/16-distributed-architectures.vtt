WEBVTT

1
00:00:00.220 --> 00:00:02.007
&gt;&gt; Erik Reinert: So
let's talk about distributed or

2
00:00:02.007 --> 00:00:03.918
service-oriented architectures.

3
00:00:03.918 --> 00:00:08.580
Now one of the reasons why I used this
GIF is because I've always felt like

4
00:00:08.580 --> 00:00:12.760
services or distributed
services are really satellites.

5
00:00:12.760 --> 00:00:16.602
They're these things that you throw up
into the cloud, you hope that they talk to

6
00:00:16.602 --> 00:00:19.836
each other, you hope that they get
a signal and work together fine.

7
00:00:19.836 --> 00:00:23.587
And you've got a bunch of these floating
in the sky somewhere working together.

8
00:00:25.187 --> 00:00:29.854
However, distributed doesn't necessarily
just mean service-oriented, right?

9
00:00:29.854 --> 00:00:31.658
Distributed can mean a lot of things.

10
00:00:31.658 --> 00:00:35.584
I'm just going over the service-oriented
design because there's two types

11
00:00:35.584 --> 00:00:37.947
of services that I wanna talk about.

12
00:00:37.947 --> 00:00:42.600
Distributed alone as its
own conversation of,

13
00:00:42.600 --> 00:00:46.795
how do you handle distributed workloads?

14
00:00:46.795 --> 00:00:50.621
There's things like queues,
there's things like, again, event busses.

15
00:00:50.621 --> 00:00:54.735
There's a lot of different approaches
to handling distributed architecture.

16
00:00:55.865 --> 00:01:02.996
However, those aren't used as much as
just service-oriented or SOA approaches.

17
00:01:02.996 --> 00:01:06.420
So that's why we're gonna be talking
about service-oriented today.

18
00:01:06.420 --> 00:01:10.398
I also wanna note, monolith,
distributed, and serverless,

19
00:01:10.398 --> 00:01:15.113
the things that we're talking about
are normally at almost every company or

20
00:01:15.113 --> 00:01:17.710
have been worked on with most companies.

21
00:01:18.768 --> 00:01:22.645
A lot of companies are still getting
comfortable with event based systems.

22
00:01:22.645 --> 00:01:28.137
A lot of companies are still getting
comfortable with more advanced approaches,

23
00:01:28.137 --> 00:01:32.833
even like PubSub and stuff like that,
are still new in the industry and

24
00:01:32.833 --> 00:01:33.961
a lot of places.

25
00:01:33.961 --> 00:01:38.810
A lot of the forward leading companies
are in that because they need to.

26
00:01:38.810 --> 00:01:41.798
But monoliths, distributed services, and

27
00:01:41.798 --> 00:01:46.987
even serverless are really still like
the big beasts that everyone are talking

28
00:01:46.987 --> 00:01:51.404
about when we talk about building
backend system architectures.

29
00:01:51.404 --> 00:01:52.435
So let's get into it.

30
00:01:53.585 --> 00:01:57.284
So we're gonna talk about two
different types of service-oriented

31
00:01:57.284 --> 00:01:59.825
architectures for distribution.

32
00:01:59.825 --> 00:02:04.445
The first is gonna be generic services and
the second is gonna be microservices.

33
00:02:04.445 --> 00:02:07.280
And I'll go into that in a little
bit in just a second, but

34
00:02:07.280 --> 00:02:09.765
let's do our definition first.

35
00:02:09.765 --> 00:02:14.529
So generic services and or microservices
architecture is a method of developing

36
00:02:14.529 --> 00:02:19.012
software systems that are loosely
coupled and independently deployable,

37
00:02:19.012 --> 00:02:22.798
smaller services which run
have their own processes.

38
00:02:22.798 --> 00:02:26.607
Now again, we've talked a lot about
architectures, how to define them,

39
00:02:26.607 --> 00:02:28.218
how to understand them.

40
00:02:28.218 --> 00:02:33.838
My hopes are at this point, you can
see why this can be valuable, right?

41
00:02:33.838 --> 00:02:38.428
Compared to a monolith,
distributed services can make it so

42
00:02:38.428 --> 00:02:42.388
that you change smaller
things more intricately and

43
00:02:42.388 --> 00:02:47.704
more quicker without impacting
other parts of the system.

44
00:02:47.704 --> 00:02:53.289
However, I do wanna make sure at least
in this course that you understand

45
00:02:53.289 --> 00:02:58.155
the difference between generic
services and microservices.

46
00:02:58.155 --> 00:03:02.224
Because a lot of people do not
design microservices correctly.

47
00:03:02.224 --> 00:03:07.855
[LAUGH] It's something that most people
will say, yeah, we use microservices.

48
00:03:07.855 --> 00:03:10.001
And I'm, okay, cool,
can you show me your architecture?

49
00:03:10.001 --> 00:03:12.486
And I'm, no,
you're just using generic services.

50
00:03:12.486 --> 00:03:15.116
That's not a microservice approach.

51
00:03:15.116 --> 00:03:19.740
Companies, again like Google,
Amazon, Netflix.

52
00:03:19.740 --> 00:03:23.630
These are companies who are separating
microservices into teams.

53
00:03:23.630 --> 00:03:28.068
So one team is handling one small
service that has its all own isolation,

54
00:03:28.068 --> 00:03:33.860
its own database, its own running service,
its own replicas, its own processes.

55
00:03:33.860 --> 00:03:37.424
That is the difference between
a generic service and a micro service.

56
00:03:37.424 --> 00:03:40.500
Let's talk about
the service-oriented overview.

57
00:03:40.500 --> 00:03:44.075
This architecture allows for continuous
delivery and deployment of large,

58
00:03:44.075 --> 00:03:45.650
complex applications.

59
00:03:45.650 --> 00:03:49.115
It also enhances the organization's
capability to innovate and

60
00:03:49.115 --> 00:03:51.970
reduces the time to market for
new features.

61
00:03:51.970 --> 00:03:56.314
As I said before, when you've already got
a lot of infrastructure that you've built,

62
00:03:56.314 --> 00:03:59.485
you've worked on, you've iterated over,
you've solved for

63
00:03:59.485 --> 00:04:03.353
a lot of these problems, and
if you distributed it well, it will work.

64
00:04:03.353 --> 00:04:08.330
Now let me ask you guys
a question in the situation of I

65
00:04:08.330 --> 00:04:13.053
wanna have a way to add
new features quicker.

66
00:04:13.053 --> 00:04:17.895
Which do you think is better using
a monolith or using distributed services?

67
00:04:17.895 --> 00:04:21.862
Which do you think is actually would get
you services or changes out quicker?

68
00:04:22.892 --> 00:04:24.662
&gt;&gt; Speaker 2: Distributed services?

69
00:04:24.662 --> 00:04:26.012
&gt;&gt; Speaker 3: It depends
on the feature [LAUGH].

70
00:04:26.012 --> 00:04:28.146
&gt;&gt; Erik Reinert: Yeah, it does,
it does, it definitely does.

71
00:04:28.146 --> 00:04:32.640
And so that's something I want you
guys to take away from this is it

72
00:04:32.640 --> 00:04:35.610
really depends on the scale, right?

73
00:04:35.610 --> 00:04:37.824
And what already exists, right?

74
00:04:37.824 --> 00:04:41.678
In a monolith, if you've already got
a lot of these things in the monolith,

75
00:04:41.678 --> 00:04:45.005
then it could be just as easy to
add stuff to the monolith, right?

76
00:04:45.005 --> 00:04:48.105
But if you have a large
scale of microservices and

77
00:04:48.105 --> 00:04:51.964
you're already dealing with
things like authorization and

78
00:04:51.964 --> 00:04:55.185
security or encryption and
things like that.

79
00:04:55.185 --> 00:04:59.548
That means that in the future when you
wanna add just this one small component.

80
00:04:59.548 --> 00:05:03.813
You've already solved a lot of these other
challenges in other locations you can

81
00:05:03.813 --> 00:05:07.295
automatically again going back
to the bot example, right?

82
00:05:07.295 --> 00:05:12.022
We know that the way we built the bot
engine, I can just easily plug in YouTube.

83
00:05:12.022 --> 00:05:14.759
I can easily plug in Twitch,
I can easily plug in Discord.

84
00:05:14.759 --> 00:05:18.761
That would actually be simpler than
me doing it in a monolith approach.

85
00:05:18.761 --> 00:05:22.757
Because if I did it in a monolith
approach, I'd also have to consider, okay,

86
00:05:22.757 --> 00:05:24.648
what about the YouTube connection?

87
00:05:24.648 --> 00:05:26.090
What about the Discord connection?

88
00:05:26.090 --> 00:05:27.220
What about the Twitch connection?

89
00:05:27.220 --> 00:05:28.861
Are they all working together?

90
00:05:28.861 --> 00:05:32.641
Is there one that's gonna get disconnected
while the other two are working, right?

91
00:05:32.641 --> 00:05:36.173
So that's where it kinda
becomes circumstantial.

92
00:05:36.173 --> 00:05:40.471
But there will be a point where you
will have enough of an architecture

93
00:05:40.471 --> 00:05:44.770
underneath you to where you should
be able to add a small component and

94
00:05:44.770 --> 00:05:48.571
then it works with the rest of
the components pretty freely.

