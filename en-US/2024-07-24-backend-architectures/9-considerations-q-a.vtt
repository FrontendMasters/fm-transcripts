WEBVTT

1
00:00:00.360 --> 00:00:05.137
&gt;&gt; Speaker 1: So I'm currently working on
a large-scale platform for e-learning with

2
00:00:05.137 --> 00:00:10.160
a small team for backend devs, so
we're starting out the project as modular.

3
00:00:10.160 --> 00:00:14.390
So if we need to turn it into
microservices, it's easy.

4
00:00:14.390 --> 00:00:18.720
We're planning to use DDD,
do you have any suggestions for us?

5
00:00:18.720 --> 00:00:19.880
&gt;&gt; Erik Reinert: Planning to use what?

6
00:00:19.880 --> 00:00:21.060
&gt;&gt; Speaker 1: Domain-driven design.

7
00:00:21.060 --> 00:00:24.757
&gt;&gt; Erik Reinert: Okay, yeah, I mean,
when you use domain-driven design,

8
00:00:24.757 --> 00:00:27.221
you really wanna have good structure and

9
00:00:27.221 --> 00:00:31.950
understanding of your domains basically,
how do you define those domains?

10
00:00:31.950 --> 00:00:34.530
What exactly do they connect to?

11
00:00:34.530 --> 00:00:38.450
Right, so domains could be something
as simple as saying, okay,

12
00:00:38.450 --> 00:00:42.300
this is all frontend learning,
this is all backend learning, or

13
00:00:42.300 --> 00:00:45.747
it could be structured more
on the organization, right?

14
00:00:45.747 --> 00:00:52.137
Like this team owns this domain versus
owning that domain or things like that.

15
00:00:52.137 --> 00:00:56.964
Domain-driven designs are really
just about you separating

16
00:00:56.964 --> 00:01:00.588
how you want to separate your platform.

17
00:01:00.588 --> 00:01:05.578
In a way where you can easily organize it,
that's really it.

18
00:01:05.578 --> 00:01:10.566
So if you're more focused on how to manage
and maintain these domains, then it

19
00:01:10.566 --> 00:01:15.176
might be helpful to think about the teams
that are gonna be working on it or

20
00:01:15.176 --> 00:01:17.918
the people that are gonna
be working on it.

21
00:01:17.918 --> 00:01:21.797
Think about how you isolate those
components through those teams so

22
00:01:21.797 --> 00:01:24.994
that it's easier for
them to do what they need to do, and

23
00:01:24.994 --> 00:01:27.396
they're not impacting any other teams.

24
00:01:27.396 --> 00:01:30.325
You should probably sit down and

25
00:01:30.325 --> 00:01:35.533
break down your company into
the domains that you want and

26
00:01:35.533 --> 00:01:42.063
then let that trickle through all of
your designs and how you do things.

27
00:01:43.235 --> 00:01:45.228
&gt;&gt; Erik Reinert: But
if you don't know those domains,

28
00:01:45.228 --> 00:01:46.793
you gotta start there [LAUGH].

29
00:01:46.793 --> 00:01:51.043
&gt;&gt; Speaker 3: Especially with the user
feedback portion you touched on,

30
00:01:51.043 --> 00:01:54.871
it feels kinda cyclical of put this out,
get it back.

31
00:01:54.871 --> 00:01:57.529
&gt;&gt; Erik Reinert: Yeah.
&gt;&gt; Speaker 3: But working with designs,

32
00:01:57.529 --> 00:01:58.305
right?

33
00:01:58.305 --> 00:02:03.117
How do you make sure you go back to the
design and look at that versus just okay,

34
00:02:03.117 --> 00:02:07.529
let's implement this piece kind of thing,
is it just diligence?

35
00:02:07.529 --> 00:02:11.001
&gt;&gt; Erik Reinert: Yeah, I mean it's a bit
of that culture we were talking about

36
00:02:11.001 --> 00:02:11.554
before.

37
00:02:11.554 --> 00:02:15.278
If you make a design once, and
then you keep iterating over it,

38
00:02:15.278 --> 00:02:20.225
but you don't really know why it was done
the way it was, right or things like that.

39
00:02:20.225 --> 00:02:25.490
Then you'll have this amalgamation of what
it used to be and now what it is, right?

40
00:02:25.490 --> 00:02:31.120
And you can easily crawl away from why
some of the decisions were even made.

41
00:02:31.120 --> 00:02:34.775
I've done this myself
where I've moved something

42
00:02:34.775 --> 00:02:38.354
from asynchronous to synchronous or
vice versa.

43
00:02:38.354 --> 00:02:41.472
And then somebody being well, no, no, no,

44
00:02:41.472 --> 00:02:46.258
we did this because of this,
we don't wanna move back, right?

45
00:02:46.258 --> 00:02:50.328
Having good context and keeping that
context can be really important.

46
00:02:50.328 --> 00:02:54.790
I mean, I think this also kind
of just is also a bit focused on

47
00:02:54.790 --> 00:02:57.484
the organization of your company.

48
00:02:57.484 --> 00:03:01.421
For example, at Hippo,
we have principal engineers,

49
00:03:01.421 --> 00:03:05.818
we have staff engineers,
which is really what I am now.

50
00:03:05.818 --> 00:03:09.508
And then we also have senior engineers and
stuff like that.

51
00:03:09.508 --> 00:03:14.002
And I think what happens is,
the company needs to have good structure

52
00:03:14.002 --> 00:03:18.508
to where it gets to a point where
a principal needs to step in, right?

53
00:03:18.508 --> 00:03:22.002
And be able to say okay,
let's reconsider why we're doing this and

54
00:03:22.002 --> 00:03:24.454
let's think about what we did before.

55
00:03:24.454 --> 00:03:28.871
That's also, I kinda talk about that
in the DevOps for developers course,

56
00:03:28.871 --> 00:03:31.366
which is DevOps is not just implementing.

57
00:03:31.366 --> 00:03:35.974
Because again, a month later you'll
have a completely different system.

58
00:03:35.974 --> 00:03:40.512
It's about thinking about,
why you're doing what you're doing.

59
00:03:40.512 --> 00:03:45.281
Sometimes, it's not the expectation of
somebody who's just taking tickets and

60
00:03:45.281 --> 00:03:47.364
building things all day to do that.

61
00:03:47.364 --> 00:03:51.447
But it is on the responsibility
of your engineering manager,

62
00:03:51.447 --> 00:03:56.393
of your product manager to be able to
say okay, we need to pull in a principle

63
00:03:56.393 --> 00:04:01.485
here we need to pull in somebody
else to help with the knowledge gap.

64
00:04:01.485 --> 00:04:03.645
But understanding that
knowledge gap is important.

65
00:04:03.645 --> 00:04:08.665
Don't do something just because you can,
have reason for it.

66
00:04:08.665 --> 00:04:13.286
&gt;&gt; Speaker 1: What's your
TLDR answer to when should

67
00:04:13.286 --> 00:04:17.923
you use backend architecture design?

68
00:04:17.923 --> 00:04:22.269
&gt;&gt; Erik Reinert: I think,
again, kind of going back all

69
00:04:22.269 --> 00:04:26.892
the way to this the quote from AI, right?

70
00:04:26.892 --> 00:04:33.283
Part of it is noticing a problem
that might be happening.

71
00:04:33.283 --> 00:04:36.213
You have to have a reason to do it.

72
00:04:36.213 --> 00:04:38.931
If you're introducing complexity for
no reason,

73
00:04:38.931 --> 00:04:42.639
then you're just really doing
something for yourself, right?

74
00:04:42.639 --> 00:04:45.439
But as I do in DevOps and
things like that,

75
00:04:45.439 --> 00:04:50.879
my goal is to help better a different part
or a certain part of the system, right?

76
00:04:50.879 --> 00:04:53.609
So I would start first and
foremost by saying,

77
00:04:53.609 --> 00:04:58.517
if you have a reason to do the design,
then you're already 50% of the way there.

78
00:04:59.638 --> 00:05:05.055
But normally these designs come out of
problems that you're trying to solve,

79
00:05:05.055 --> 00:05:05.638
right?

80
00:05:05.638 --> 00:05:08.528
And so if you don't have
a problem that you're trying to

81
00:05:08.528 --> 00:05:11.367
solve you probably don't need
to be doing any of this.

82
00:05:11.367 --> 00:05:14.577
&gt;&gt; Speaker 4: What would be a good key
indicator that an existing system that

83
00:05:14.577 --> 00:05:18.296
exists needs to be re-implemented or
re-architected from scratch?

84
00:05:19.835 --> 00:05:23.422
&gt;&gt; Erik Reinert: So there's two parts to
that there's first the doesn't need to be

85
00:05:23.422 --> 00:05:25.408
implemented, and the second part,

86
00:05:25.408 --> 00:05:28.825
which is does it need to be
implemented from scratch, right?

87
00:05:28.825 --> 00:05:33.865
I think you have to answer
them separately not together.

88
00:05:35.305 --> 00:05:40.634
When you get to a point
in your career where you

89
00:05:40.634 --> 00:05:45.964
start just looking at
problems as a detective

90
00:05:45.964 --> 00:05:51.012
trying to solve them,
you need to have some

91
00:05:51.012 --> 00:05:56.162
sort of trail of why we're here, right?

92
00:05:56.162 --> 00:06:00.228
What has this produced as
a problem over a period of time.

93
00:06:00.228 --> 00:06:03.508
Where are the breadcrumbs to finding that,
right?

94
00:06:03.508 --> 00:06:07.497
At the end of the day,
you really just don't have any need

95
00:06:07.497 --> 00:06:11.778
to change anything if there's no value or
reason to it.

96
00:06:11.778 --> 00:06:15.705
So that's what I would say is
the first part is, find proof,

97
00:06:15.705 --> 00:06:21.111
find evidence that helps with your theory,
of should it be changed, right?

98
00:06:21.111 --> 00:06:26.636
I've heard this a lot, and I've slowly
begun to accept it more in my career,

99
00:06:26.636 --> 00:06:31.144
which is just because you don't
like dealing with something,

100
00:06:31.144 --> 00:06:35.181
doesn't mean it should be changed,
[LAUGH] right?

101
00:06:35.181 --> 00:06:39.860
And a lot of the times in
DevOps especially going back to

102
00:06:39.860 --> 00:06:44.541
the who are you helping,
if you're not helping anyone

103
00:06:44.541 --> 00:06:48.873
making that change then
there's no value to it.

104
00:06:48.873 --> 00:06:51.693
So again,
that breadcrumb is really important.

105
00:06:51.693 --> 00:06:55.164
The second part of should
be changed entirely,

106
00:06:55.164 --> 00:06:58.303
that becomes a much bigger scope, right?

107
00:06:58.303 --> 00:07:00.791
And sometimes it even
is easier to say well,

108
00:07:00.791 --> 00:07:04.356
let's change it a little bit now,
learn from that change, and

109
00:07:04.356 --> 00:07:09.224
then see if we still need to change it
on a higher scale or on a bigger scope.

110
00:07:09.224 --> 00:07:14.284
And if you do, then I think at
that point it becomes buy in.

111
00:07:14.284 --> 00:07:17.824
Does anyone else at the company
feel the same way you do, right?

112
00:07:17.824 --> 00:07:22.746
Can you find those people to jump behind
you and say yeah, this is a problem and

113
00:07:22.746 --> 00:07:23.970
we need to do this.

114
00:07:25.620 --> 00:07:31.392
It's really, really hard to make massive
change by yourself at a company,

115
00:07:31.392 --> 00:07:33.475
especially a big company.

116
00:07:33.475 --> 00:07:35.890
As a good example, like I said,

117
00:07:35.890 --> 00:07:40.458
where I work right now we're
moving to Kubernetes, right?

118
00:07:41.718 --> 00:07:43.853
Do you know what the first thing was said,

119
00:07:43.853 --> 00:07:47.278
or when we brought up we
should move to Kubernetes?

120
00:07:47.278 --> 00:07:48.608
Why, ECS is fine.

121
00:07:50.098 --> 00:07:54.943
And they're not wrong, it does work,
it does run for us, right?

122
00:07:54.943 --> 00:07:58.998
But our only argument with that
in the beginning was well,

123
00:07:58.998 --> 00:08:01.826
because we wanna make our lives easier.

124
00:08:01.826 --> 00:08:05.310
Which was true, but
it took us a year of research and

125
00:08:05.310 --> 00:08:11.001
development to figure out well, we can
also improve our CD, our delivery system.

126
00:08:11.001 --> 00:08:15.501
We can also improve our scaling we
can also give developers control over

127
00:08:15.501 --> 00:08:17.980
routing and things like that, right?

128
00:08:17.980 --> 00:08:20.817
And at that point I'm not
talking about Kubernetes,

129
00:08:20.817 --> 00:08:23.835
I'm talking about problems
that I can solve.

130
00:08:23.835 --> 00:08:27.491
So if you have a need to
make a change at that scale,

131
00:08:27.491 --> 00:08:33.615
you also need to have a lot of reasons
as to why you should make such a change.

132
00:08:33.615 --> 00:08:40.145
And normally, it cannot just be because of
you, or what you or even your team wants.

133
00:08:40.145 --> 00:08:43.157
You normally want other
teams to back you so

134
00:08:43.157 --> 00:08:48.437
that that radical change is easier to
promote through the company, yeah.

135
00:08:48.437 --> 00:08:53.605
Again, it's salesman [LAUGH] why
buy this car instead of that car.

136
00:08:53.605 --> 00:08:57.525
Well, because that one's a lot more
comfortable, [LAUGH] stuff like that.

