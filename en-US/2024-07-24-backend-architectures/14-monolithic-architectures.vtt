WEBVTT

1
00:00:00.123 --> 00:00:02.804
&gt;&gt; Erik Reinert: So I think now we're
gonna go into the part where a lot of

2
00:00:02.804 --> 00:00:05.503
people were really like,
what about model this?

3
00:00:05.503 --> 00:00:08.525
What about distributed [SOUND], right?

4
00:00:08.525 --> 00:00:13.788
Again, I really hope that this meme,
if anything, can kind of show you

5
00:00:13.788 --> 00:00:19.168
now what I mean by you don't just pick
something and run with it, right?

6
00:00:19.168 --> 00:00:24.081
There's a lot of validity of using
a one architecture for a long time,

7
00:00:24.081 --> 00:00:29.174
just because, again, it works,
it serves the purpose of the company.

8
00:00:29.174 --> 00:00:31.747
It's solving problems, right?

9
00:00:31.747 --> 00:00:35.211
There is no like, well, I work at
a company and they use monoliths.

10
00:00:35.211 --> 00:00:37.246
Nobody should judge you on that.

11
00:00:37.246 --> 00:00:39.934
If it's a multimillion dollar company,

12
00:00:39.934 --> 00:00:44.712
then they're making money that at
the end of the day, that's what wins.

13
00:00:44.712 --> 00:00:47.929
So again, one does not simply
choose backend architectures,

14
00:00:47.929 --> 00:00:49.639
it's something that you craft.

15
00:00:49.639 --> 00:00:53.951
And so we're gonna talk about common
backend system architectures really with

16
00:00:53.951 --> 00:00:58.152
everything that we just had in mind and
everything that we just talked about.

17
00:00:58.152 --> 00:01:04.521
So we are going to talk about three
commonly used architectures, all right?

18
00:01:04.521 --> 00:01:10.190
Now, there are tons of architectures
out there, because, again,

19
00:01:10.190 --> 00:01:15.580
there are tons of problems being
solved in the technology space.

20
00:01:15.580 --> 00:01:20.701
And it does not even mean that
you should use only one of these.

21
00:01:20.701 --> 00:01:25.472
Everything that I'm about to go through
is only showing you three different

22
00:01:25.472 --> 00:01:29.362
approaches and how you can use
them in different situations.

23
00:01:29.362 --> 00:01:33.705
However, it does not mean that you can
have monoliths with distributed or

24
00:01:33.705 --> 00:01:37.709
not with distributed, or
with serverless or not with serverless.

25
00:01:37.709 --> 00:01:40.894
It's really about solving
the problems that you need.

26
00:01:40.894 --> 00:01:45.455
There might be one team that's really
good at working on monoliths and so

27
00:01:45.455 --> 00:01:48.387
a monolith architecture works well for
them.

28
00:01:48.387 --> 00:01:53.465
There might be another team that works
really well with distributed services,

29
00:01:53.465 --> 00:01:56.888
and so maybe that's a better solution for
that team.

30
00:01:56.888 --> 00:02:01.514
Before I go forward, again,
I really want you to take away that this

31
00:02:01.514 --> 00:02:05.016
is not a one-size-fits-all solution,
right?

32
00:02:05.016 --> 00:02:09.617
One particular way of doing things
doesn't mean that it's the only way

33
00:02:09.617 --> 00:02:14.525
of doing things or it doesn't mean that
that's the only approach you have to

34
00:02:14.525 --> 00:02:16.069
do to do things as well.

35
00:02:16.069 --> 00:02:19.201
So let's get into the first one, monolith.

36
00:02:19.201 --> 00:02:22.146
Has anyone seen Hitchhiker's Guide,
by the way?

37
00:02:22.146 --> 00:02:26.713
Okay, so if you don't know,
this is deep thought.

38
00:02:26.713 --> 00:02:30.467
It's really funny to me at
least because in the story,

39
00:02:30.467 --> 00:02:35.941
they have this huge supercomputer that's
supposed to solve life's answers,

40
00:02:35.941 --> 00:02:38.896
and it says that the answer of life is 42.

41
00:02:38.896 --> 00:02:41.827
And so I feel like sometimes
that's how monoliths feel.

42
00:02:41.827 --> 00:02:43.917
You've got this huge, massive thing and

43
00:02:43.917 --> 00:02:46.254
then it just gives you
this one little result.

44
00:02:46.254 --> 00:02:51.339
So I felt this fit really well for
monoliths.

45
00:02:51.339 --> 00:02:55.928
So let's define a monolithic architecture.

46
00:02:55.928 --> 00:03:00.884
So monolithic architecture is a model
where all the necessary code and

47
00:03:00.884 --> 00:03:06.606
components for a software application
are combined into a single unit, right?

48
00:03:06.606 --> 00:03:12.214
Just out of curiosity, how many
here uses monoliths where you work?

49
00:03:12.214 --> 00:03:17.344
Yeah, it's probably one of
the most common architectures that

50
00:03:17.344 --> 00:03:23.147
you would start with at a company or
even at a project or things like that.

51
00:03:23.147 --> 00:03:29.363
Monoliths are very powerful in their own
right, by the problems that they solve,

52
00:03:29.363 --> 00:03:34.964
how they solve those problems, and
how they can help growth of a company.

53
00:03:34.964 --> 00:03:38.887
So this is really what
a monolith looks like.

54
00:03:38.887 --> 00:03:40.117
It's very simple.

55
00:03:40.117 --> 00:03:43.863
You have users,
they get sent to a specific monolith.

56
00:03:43.863 --> 00:03:48.057
It can normally be the frontend and
backend combined into one, right?

57
00:03:48.057 --> 00:03:52.354
And then maybe there's a database instance
that's behind that or something like that.

58
00:03:52.354 --> 00:03:55.029
But at the end of the day, most projects,

59
00:03:55.029 --> 00:03:58.019
most companies start
with a system like this.

60
00:03:58.019 --> 00:04:02.023
And as I said before,
it's normally completely coupled.

61
00:04:02.023 --> 00:04:04.753
Meaning that your frontend and
your backend are the same thing.

62
00:04:04.753 --> 00:04:09.343
Something like Next.js, for example,
that technically could be considered

63
00:04:09.343 --> 00:04:12.767
as a monolith because you're
doing your frontend logic and

64
00:04:12.767 --> 00:04:14.903
your backend logic all in one place.

65
00:04:14.903 --> 00:04:19.144
And there's a lot of reasons why
Next.js and other frameworks like this

66
00:04:19.144 --> 00:04:23.053
are becoming really popular,
because you can move fast, right?

67
00:04:23.053 --> 00:04:26.916
The idea is that in this
kind of architecture,

68
00:04:26.916 --> 00:04:29.602
everybody's in the same seat.

69
00:04:29.602 --> 00:04:30.965
We're all working together.

70
00:04:30.965 --> 00:04:34.017
We're all modifying or
working on the same code.

71
00:04:34.017 --> 00:04:38.338
There's not tons of changes with regards
to the languages that are being used or

72
00:04:38.338 --> 00:04:40.928
the definitions or
the libraries or whatever.

73
00:04:40.928 --> 00:04:43.852
We're all basically cooking
in the same kitchen.

74
00:04:43.852 --> 00:04:48.612
And so this is what a monolith
can look like if you're

75
00:04:48.612 --> 00:04:52.735
working on something
like that at a company.

76
00:04:52.735 --> 00:04:56.290
So, again,
monolithic architecture basically has all

77
00:04:56.290 --> 00:05:00.371
functionalities tightly coupled,
running in the same system.

78
00:05:00.371 --> 00:05:04.631
So again, if we go back to this monolithic
chart, we'll see that the frontend and

79
00:05:04.631 --> 00:05:06.446
the backend are joined together.

80
00:05:06.446 --> 00:05:09.141
And that means that they can be
worked on in the same sense.

81
00:05:09.141 --> 00:05:13.041
If they need to be updated,
they can be updated together and

82
00:05:13.041 --> 00:05:17.342
you don't have to worry about going
to different places to do so.

83
00:05:17.342 --> 00:05:19.866
Why is monolithic architecture so
valuable?

84
00:05:19.866 --> 00:05:25.634
Well, it's simple to develop, test, and
deploy due to its unified system, right?

85
00:05:25.634 --> 00:05:27.889
You're developing in the same location,

86
00:05:27.889 --> 00:05:30.455
all of your tests exist
in the same location, and

87
00:05:30.455 --> 00:05:34.732
what you're deploying is the same thing,
right, over and over and over again.

88
00:05:34.732 --> 00:05:39.650
It's a small, tightly coupled architecture
that allows you to iterate quickly and

89
00:05:39.650 --> 00:05:43.680
not worry about complications,
abstractions, things like that.

90
00:05:46.573 --> 00:05:49.983
&gt;&gt; Erik Reinert: So the pros, again,
simplicity, it's easy to develop,

91
00:05:49.983 --> 00:05:51.634
test, and deploy, right?

92
00:05:51.634 --> 00:05:55.457
It makes it so that that simple
architecture allows you to move fast.

93
00:05:55.457 --> 00:05:59.987
If a project comes in, everyone's got a
unified understanding of the system and so

94
00:05:59.987 --> 00:06:03.936
that they don't really need to be
asking questions even as well as like,

95
00:06:03.936 --> 00:06:05.315
how do you do something?

96
00:06:05.315 --> 00:06:05.899
It's already there.

97
00:06:05.899 --> 00:06:09.723
Normally, nine times out of ten,
it's already been defined and

98
00:06:09.723 --> 00:06:14.463
there's a good pathway of how to work on
the thing that you're trying to work on.

99
00:06:14.463 --> 00:06:17.894
Monoliths are also really great for
new hires.

100
00:06:17.894 --> 00:06:21.665
You don't have to talk about tons
of complexity or things like that.

101
00:06:21.665 --> 00:06:25.015
You could just say, well, here's
the monolith and here's what we work on.

102
00:06:25.015 --> 00:06:27.823
And as you get more comfortable with it,

103
00:06:27.823 --> 00:06:31.054
you'll start to understand it more and
more.

104
00:06:31.054 --> 00:06:33.719
Another pro is consistency, right?

105
00:06:33.719 --> 00:06:37.982
So there's a uniform approach
to handling requests as every

106
00:06:37.982 --> 00:06:40.829
module uses the same set of procedures.

107
00:06:40.829 --> 00:06:42.623
So, again, for example,

108
00:06:42.623 --> 00:06:48.008
if you're using the monolith frontend
backend system, it's all gonna be HTTP.

109
00:06:48.008 --> 00:06:51.010
You don't have to think about
services talking to each other.

110
00:06:51.010 --> 00:06:56.788
It's really just functional logic in
your backend that you're modifying.

111
00:06:56.788 --> 00:07:05.016
There's no overhead of really anything
else outside of the actual service Itself.

112
00:07:05.016 --> 00:07:07.328
Again, efficiency is
really important here,

113
00:07:07.328 --> 00:07:10.047
because all the functionalities
are interconnected,

114
00:07:10.047 --> 00:07:13.418
it can be more efficient in terms
of inter-process communication.

115
00:07:13.418 --> 00:07:17.908
So when we say efficiency, I wanna be
clear in saying that I'm not talking about

116
00:07:17.908 --> 00:07:19.929
performance efficiency, right?

117
00:07:19.929 --> 00:07:21.746
Although, this can be a part of it.

118
00:07:21.746 --> 00:07:26.745
What I'm talking about is the fact
that everything is in one place.

119
00:07:26.745 --> 00:07:30.630
We do what's called vertical
scaling effectively, right?

120
00:07:30.630 --> 00:07:34.793
It doesn't mean that I will potentially
be creating replicas of this, but

121
00:07:34.793 --> 00:07:37.450
it means that I can just make it bigger,
right?

122
00:07:37.450 --> 00:07:41.366
And when we talk about scaling for
server or for companies,

123
00:07:41.366 --> 00:07:45.218
sometimes vertical scaling
is the much easier approach.

124
00:07:45.218 --> 00:07:50.802
Instead of having to worry about tons of
replicas and how do you auto-scale those,

125
00:07:50.802 --> 00:07:55.297
and then how do you do round-robin
requests and things like that.

126
00:07:55.297 --> 00:08:01.117
It's just make it bigger, [LAUGH] give it
more memory, give it more CPUs, that's it.

127
00:08:01.117 --> 00:08:07.162
And so going back to the Fossabot example,
I've talked to my friend,

128
00:08:07.162 --> 00:08:12.181
Aiden, about it, and
one of the reasons why Fossabot is so

129
00:08:12.181 --> 00:08:16.193
powerful is because he
vertically scales it.

130
00:08:16.193 --> 00:08:22.081
He realized that basically instead of
trying to handle routing requests and

131
00:08:22.081 --> 00:08:25.761
having multiple replicas and
stuff like that,

132
00:08:25.761 --> 00:08:29.453
it made more sense just
to make huge instances.

133
00:08:29.453 --> 00:08:34.227
And so most of the components in that
system are just vertically scaled.

134
00:08:34.227 --> 00:08:36.041
There's not tons of replicas and

135
00:08:36.041 --> 00:08:39.745
thousands of instances processing
hundreds of requests a second.

136
00:08:39.745 --> 00:08:44.135
It's just one huge service processing
all of these requests, again,

137
00:08:44.135 --> 00:08:45.607
kinda like a fire hose.

138
00:08:45.607 --> 00:08:50.415
So the efficiency there is that
if you want to be able to scale

139
00:08:50.415 --> 00:08:55.516
vertically instead of horizontally,
monolith architecture

140
00:08:55.516 --> 00:09:00.826
can actually be very valuable to
what you're trying to achieve.

141
00:09:00.826 --> 00:09:07.423
The cons, however, right,
are the limited scalability, right?

142
00:09:07.423 --> 00:09:11.098
So scaling specific functions
of a system is not possible,

143
00:09:11.098 --> 00:09:13.975
the entire system needs to be scaled,
right?

144
00:09:13.975 --> 00:09:17.747
And so for example, in a monolith,
say you have your frontend and

145
00:09:17.747 --> 00:09:19.678
your backend coupled together.

146
00:09:19.678 --> 00:09:23.142
But maybe you're just doing
a lot of Vue rendering or

147
00:09:23.142 --> 00:09:26.292
processing requests to render something,
but

148
00:09:26.292 --> 00:09:31.586
not necessarily needing to do a bunch of
database requests or things like that.

149
00:09:31.586 --> 00:09:36.503
That's where maybe it would be nicer to be
able to scale the frontend services and

150
00:09:36.503 --> 00:09:38.754
not the backend services with them.

151
00:09:38.754 --> 00:09:42.927
If it's coupled together,
you're scaling both, right?

152
00:09:42.927 --> 00:09:44.710
And so that's something to take away.

153
00:09:44.710 --> 00:09:49.080
With regards to monolithic, you're
limited by the scope of the service and

154
00:09:49.080 --> 00:09:50.526
how it's implemented.

155
00:09:50.526 --> 00:09:53.768
If everything's in one place,
you have to scale everything.

156
00:09:56.662 --> 00:09:58.100
&gt;&gt; Erik Reinert: So lack of flexibility,

157
00:09:58.100 --> 00:10:01.323
this also becomes a challenge
with monoliths, right?

158
00:10:01.323 --> 00:10:06.469
Changes to a single component can require
the entire system to be redeployed.

159
00:10:06.469 --> 00:10:10.090
This is actually a problem we
deal with at my company today.

160
00:10:10.090 --> 00:10:12.649
We have one monolith called Pod.

161
00:10:12.649 --> 00:10:16.608
And Pod, because it serves routes for
everything of that service,

162
00:10:16.608 --> 00:10:20.012
if we update a lower-level route or
lower-level logic,

163
00:10:20.012 --> 00:10:24.111
say like a middleware or something
like that, we now have to test every

164
00:10:24.111 --> 00:10:27.674
single route again to make sure
that everything is working.

165
00:10:27.674 --> 00:10:31.888
And this is a big reason
earlier on in our discussion,

166
00:10:31.888 --> 00:10:37.976
when I talked about our testing resources
versus our production resources,

167
00:10:37.976 --> 00:10:40.425
this was a big reason as to why.

168
00:10:40.425 --> 00:10:42.595
Because every time we made a change,

169
00:10:42.595 --> 00:10:45.540
we were constantly
retesting everything again.

170
00:10:45.540 --> 00:10:50.262
Even routes that weren't touched were
still being retested because it's all part

171
00:10:50.262 --> 00:10:51.551
of the same monolith.

172
00:10:51.551 --> 00:10:56.813
So lack of flexibility is
very challenging there.

173
00:10:56.813 --> 00:11:01.477
Complexity, now you might think that,
okay, well, it's a monolith,

174
00:11:01.477 --> 00:11:02.994
how complex can it get?

175
00:11:02.994 --> 00:11:07.649
I would really encourage you to
look at a huge monolith over

176
00:11:07.649 --> 00:11:09.646
like two to three years.

177
00:11:09.646 --> 00:11:15.733
Monoliths can be complex in the sense that
again, the file system for it can be huge.

178
00:11:15.733 --> 00:11:18.974
You might have tons of libraries,
tons of implementations,

179
00:11:18.974 --> 00:11:22.045
even different design patterns
that are mixed together.

180
00:11:22.045 --> 00:11:26.006
As the monolith grows, it becomes
harder to organize the components in

181
00:11:26.006 --> 00:11:30.441
the monolith, because at the end of
the day, it's still all in the same place.

182
00:11:30.441 --> 00:11:35.322
So you have to have really good design or
really good theory around, okay, well,

183
00:11:35.322 --> 00:11:39.013
how am I decoupling these
components from these components?

184
00:11:39.013 --> 00:11:44.105
A good example of this is we were
doing a change to our monolith,

185
00:11:44.105 --> 00:11:48.827
and we were trying to restrict
access to a given endpoint.

186
00:11:48.827 --> 00:11:53.168
However, the middleware was lower
than the endpoint itself, and

187
00:11:53.168 --> 00:11:55.970
that's where the restriction was put in.

188
00:11:55.970 --> 00:12:00.062
And when they put that restriction in,
it was done via an environment variable.

189
00:12:00.062 --> 00:12:04.721
However, in production, that environment
variable didn't get set, and so

190
00:12:04.721 --> 00:12:09.521
all of our routes stopped working because
of that lower level change that was made

191
00:12:09.521 --> 00:12:14.054
without realizing the impact of how it
could affect the rest of the routing.

192
00:12:14.054 --> 00:12:19.237
And so that's complexity, that's being
able to say, I don't really know how

193
00:12:19.237 --> 00:12:24.566
this was made, right, and so because of
that, I now don't know what I'm impacting.

194
00:12:24.566 --> 00:12:28.791
And so that's when you have to
kind of fully rely on tests.

195
00:12:28.791 --> 00:12:32.725
And if your testing isn't good,
then that can lead to more complexity,

196
00:12:32.725 --> 00:12:33.765
more challenges.

197
00:12:33.765 --> 00:12:38.353
And again, monoliths are great, but
it really needs to be considered how your

198
00:12:38.353 --> 00:12:41.285
monolith is scaling from
a logical perspective.

