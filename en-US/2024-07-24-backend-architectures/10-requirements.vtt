WEBVTT

1
00:00:00.100 --> 00:00:03.467
&gt;&gt; Erik Reinert: We've got one last
definition section that we're gonna go

2
00:00:03.467 --> 00:00:08.680
through, and then we're gonna jump into a
lot of the examples and things like that.

3
00:00:08.680 --> 00:00:13.309
And this last section that we're gonna be
going over is really how you implement

4
00:00:13.309 --> 00:00:15.740
backend architecture designs, right?

5
00:00:15.740 --> 00:00:17.529
So we talked about what they are, right?

6
00:00:17.529 --> 00:00:22.692
We talked about when you should
consider making these changes.

7
00:00:22.692 --> 00:00:25.497
Right now, we can actually talk
about how to implement them.

8
00:00:25.497 --> 00:00:29.972
So, good practices,
good processes on how to think about,

9
00:00:29.972 --> 00:00:32.177
well, how am I gonna do this?

10
00:00:32.177 --> 00:00:36.027
And I really like this GIF,
because I feel like we've all been there,

11
00:00:36.027 --> 00:00:37.604
of like [SOUND] I don't know.

12
00:00:37.604 --> 00:00:41.840
[LAUGH] So hopefully this section will
help you guys with that confidence.

13
00:00:43.270 --> 00:00:48.262
So again, we're gonna talk about
another quote from AI here,

14
00:00:48.262 --> 00:00:51.275
the prolific AI wisdom, which said,

15
00:00:51.275 --> 00:00:56.620
mastering something isn't
a matter of precise science.

16
00:00:56.620 --> 00:01:01.180
It's a craft honed through
the persistence of trial of experience,

17
00:01:01.180 --> 00:01:05.752
learning and adapting as we navigate
the ever-unfolding journey.

18
00:01:05.752 --> 00:01:10.042
[LAUGH] I love how prolific AI is.

19
00:01:10.042 --> 00:01:13.804
So, one of the things I
did like about this was,

20
00:01:13.804 --> 00:01:19.170
it's absolutely right in the sense
that these designs are normally

21
00:01:19.170 --> 00:01:24.047
built based off of past experiences,
past knowledge.

22
00:01:24.047 --> 00:01:28.618
You normally won't get a junior engineer
working on high level architecture

23
00:01:28.618 --> 00:01:29.647
designs.

24
00:01:29.647 --> 00:01:31.086
And that's not out of rudeness but

25
00:01:31.086 --> 00:01:34.568
it's because they've probably only
experienced a couple of different systems.

26
00:01:34.568 --> 00:01:38.831
They've probably only had the opportunity
to experience a couple of

27
00:01:38.831 --> 00:01:42.613
different ways of doing
things in that whole process.

28
00:01:42.613 --> 00:01:47.034
But after a company or a person has
spent a long time building these things,

29
00:01:47.034 --> 00:01:51.177
understanding how they work,
understanding their fail points, and

30
00:01:51.177 --> 00:01:55.459
things like that, that's really where
that value of expertise comes in

31
00:01:55.459 --> 00:01:58.373
in improving your decision-making.

32
00:01:58.373 --> 00:02:01.153
And again, it's not precision.

33
00:02:01.153 --> 00:02:04.352
You could work at one company
spending your whole time there,

34
00:02:04.352 --> 00:02:08.780
building systems one way, and then go to a
different company and even be frustrated,

35
00:02:08.780 --> 00:02:11.133
cuz it was like, woah,
I'm so used to this.

36
00:02:11.133 --> 00:02:14.877
And it's like, well,
you weren't working in this field before.

37
00:02:14.877 --> 00:02:17.103
What are you gonna do?

38
00:02:17.103 --> 00:02:20.340
The only thing to do is to learn,
adapt, and grow.

39
00:02:20.340 --> 00:02:24.897
And so that's a lot of what I would like
you guys to at least keep in mind when we

40
00:02:24.897 --> 00:02:27.620
talk about how you
implement these designs.

41
00:02:29.160 --> 00:02:34.343
So, how we implement these designs in my
opinion really comes down to three stages,

42
00:02:34.343 --> 00:02:38.440
research, implementation, and
then the last one, iteration.

43
00:02:40.142 --> 00:02:45.455
And something about these design stages
are they are recursive, meaning you will

44
00:02:45.455 --> 00:02:51.842
research something, you'll spend a lot of
time figuring things out and how to do it.

45
00:02:51.842 --> 00:02:54.302
You'll then implement that design, right?

46
00:02:54.302 --> 00:02:56.635
Get it into production,
get it into people's hands, and

47
00:02:56.635 --> 00:02:58.312
then you'll probably iterate, right?

48
00:02:58.312 --> 00:03:03.572
You'll probably make more changes over it,
and then figure out where you can improve,

49
00:03:03.572 --> 00:03:07.311
where there might be other
changes that need to be made.

50
00:03:07.311 --> 00:03:11.261
But then the process starts
all over again, right?

51
00:03:11.261 --> 00:03:15.821
With iteration becomes potentially more
research, more implementation, and

52
00:03:15.821 --> 00:03:17.571
then again, more iteration.

53
00:03:17.571 --> 00:03:21.815
So this is a cyclical
process that never ends.

54
00:03:21.815 --> 00:03:26.773
If you build an architecture at
a system and then leave it there and

55
00:03:26.773 --> 00:03:31.935
never touch it again, it's for
either one of two reasons.

56
00:03:31.935 --> 00:03:38.248
One, the system works so well [LAUGH]
that nobody needs to touch it,

57
00:03:38.248 --> 00:03:45.033
which is rare but can happen, or
two, it's being neglected, right?

58
00:03:45.033 --> 00:03:47.793
It's something that was just put there,
done, and then move on,

59
00:03:47.793 --> 00:03:49.432
go to the next thing, right?

60
00:03:49.432 --> 00:03:54.400
But massive companies that deal with
these crazy architectures almost

61
00:03:54.400 --> 00:03:58.124
are always touching the same
systems over and over and

62
00:03:58.124 --> 00:04:02.276
over again, iterating on them,
improving them, right?

63
00:04:02.276 --> 00:04:06.248
They understand, as an organization,
that it's ever-growing,

64
00:04:06.248 --> 00:04:10.466
just because we built something
one way today, we might change it.

65
00:04:10.466 --> 00:04:14.707
And again, even companies, we'll be
talking a little later about Uber,

66
00:04:14.707 --> 00:04:18.226
we'll be talking about Google,
Netflix, stuff like that.

67
00:04:18.226 --> 00:04:22.381
And you can really see and
even documentation or things that they've

68
00:04:22.381 --> 00:04:27.239
shared, that it's an always growing
process to the growth of the company.

69
00:04:27.239 --> 00:04:30.129
First off and foremost,
we're gonna set requirements, right?

70
00:04:30.129 --> 00:04:33.769
We're gonna identify the primary
purpose and the scope of the system.

71
00:04:33.769 --> 00:04:38.859
Why are we building the thing that we're
building and the purpose of the system?

72
00:04:38.859 --> 00:04:43.327
If you have multiple systems that you
have to make, break it down, right?

73
00:04:43.327 --> 00:04:45.067
So what is this system's purpose?

74
00:04:45.067 --> 00:04:49.727
What is the reason for why we're doing
this specific thing and scope it?

75
00:04:49.727 --> 00:04:53.833
You don't really wanna deal with what's
called scope creep, or basically having

76
00:04:53.833 --> 00:04:57.567
your scope continually grow bigger and
bigger and bigger and bigger.

77
00:04:57.567 --> 00:05:00.905
That might mean that you're
actually not focusing properly and

78
00:05:00.905 --> 00:05:04.110
you need to separate those
into two different scopes.

79
00:05:04.110 --> 00:05:07.615
So having a good understanding
of the primary purpose,

80
00:05:07.615 --> 00:05:11.120
keeping that very simple so
that you understand it, and

81
00:05:11.120 --> 00:05:17.110
then defining really good scope around
the research that you're gonna do, right?

82
00:05:17.110 --> 00:05:21.812
&gt;&gt; Speaker 2: Do you have any advice for
like, say you're on a project, and

83
00:05:21.812 --> 00:05:28.053
in the middle of implementation phase,
it's clear that scope is creeping a lot or

84
00:05:28.053 --> 00:05:32.505
maybe not enough time was spent
on the design [LAUGH] phase.

85
00:05:32.505 --> 00:05:36.083
If you're not necessarily the person
in charge of the project,

86
00:05:36.083 --> 00:05:40.256
how do you encourage other people to
maybe walk things back or press pause so

87
00:05:40.256 --> 00:05:41.464
that you can-
&gt;&gt; Erik Reinert: Right.

88
00:05:41.464 --> 00:05:45.154
&gt;&gt; Speaker 2: Get back to a scoped
thing that's well-designed?

89
00:05:45.154 --> 00:05:49.295
&gt;&gt; Erik Reinert: So it's my seriously
firm belief that everyone has

90
00:05:49.295 --> 00:05:52.771
a vocal voice in the engineering process.

91
00:05:52.771 --> 00:05:55.942
Even if it's a junior engineer
who sees something and goes,

92
00:05:55.942 --> 00:05:58.624
we're kinda taking a left-hand turn here,
man.

93
00:05:58.624 --> 00:06:00.324
I don't know if we should do this.

94
00:06:00.324 --> 00:06:03.453
It's gotta be up to
the culture to accept that.

95
00:06:03.453 --> 00:06:09.613
Your are getting paid to do your job,
right?

96
00:06:09.613 --> 00:06:14.512
And so I think that you should be in
a team that gives that opportunity, for

97
00:06:14.512 --> 00:06:15.312
starters.

98
00:06:15.312 --> 00:06:18.843
If it doesn't, then that's
a problem you need to fix, right?

99
00:06:18.843 --> 00:06:22.708
You need to be able to go to your manager
and say, hey, listen, I'm trying to

100
00:06:22.708 --> 00:06:26.703
say something about this, but
nobody's listening, and this sucks, right?

101
00:06:26.703 --> 00:06:29.203
That's your manager's job.

102
00:06:29.203 --> 00:06:34.269
It's the same way of having an employee
who's really not doing anything but

103
00:06:34.269 --> 00:06:37.293
you don't know how to address that, right?

104
00:06:37.293 --> 00:06:41.087
That's part of your manager's job or
your PM's job.

105
00:06:41.087 --> 00:06:46.139
So I think the first thing to
do is address if it's ignored,

106
00:06:46.139 --> 00:06:52.923
right, and then go to your manager and
say like hey, this is a serious problem.

107
00:06:52.923 --> 00:06:59.630
But also having a really good
argument as well, right?

108
00:06:59.630 --> 00:07:04.126
When you're moving really fast,
it's hard to be like, okay,

109
00:07:04.126 --> 00:07:08.394
let's change everything when
you're halfway in, right?

110
00:07:08.394 --> 00:07:13.312
But if you can, again, sit down and
write a 30-minute document on why this

111
00:07:13.312 --> 00:07:17.474
is happening, and kind of have
a really good argument to convey,

112
00:07:17.474 --> 00:07:19.927
then that should also be acceptable.

113
00:07:19.927 --> 00:07:24.266
But you definitely don't wanna be the
person who just walks into the discussion

114
00:07:24.266 --> 00:07:26.348
and is like, everything's on fire.

115
00:07:26.348 --> 00:07:29.474
[LAUGH] That doesn't really help anyone.

116
00:07:29.474 --> 00:07:33.648
So, being accurate with the problem and

117
00:07:33.648 --> 00:07:42.468
then making sure you have a good culture
around vocal concerns and stuff like that.

118
00:07:42.468 --> 00:07:46.381
Yeah, it's not easy, especially if
a lot of money's been put into it,

119
00:07:46.381 --> 00:07:48.638
a lot of time's already been put into it.

120
00:07:48.638 --> 00:07:51.906
I've been in that scenario where
halfway through, I've been like, guys,

121
00:07:51.906 --> 00:07:53.377
I don't think this is gonna work.

122
00:07:53.377 --> 00:07:57.434
[LAUGH] And then they're like, well, we're
too far, and it's like, all right, well.

123
00:07:57.434 --> 00:08:02.758
One of the things I was taught by
a mentor of mine was it's never too late,

124
00:08:02.758 --> 00:08:07.196
because it's going to be
even worse later on, right?

125
00:08:07.196 --> 00:08:11.574
And you may have accidentally just
allocated too much resources in

126
00:08:11.574 --> 00:08:13.246
the wrong place.

127
00:08:13.246 --> 00:08:17.702
And so, yeah, again,
it's a bit of that salesman thing again,

128
00:08:17.702 --> 00:08:20.959
you really gotta be able
to sell your argument.

129
00:08:27.355 --> 00:08:29.387
&gt;&gt; Erik Reinert: Okay, so yeah,
again, back to research and

130
00:08:29.387 --> 00:08:30.887
setting requirements, right?

131
00:08:30.887 --> 00:08:34.718
We've talked about this a bit already,
but now you can kinda see how it's coming

132
00:08:34.718 --> 00:08:38.507
together, which is, we first talked
about the primary purpose and the scope.

133
00:08:38.507 --> 00:08:43.477
We now need to determine the expectations
of the end users of the system, right?

134
00:08:43.477 --> 00:08:46.467
And normally, the end users of
the system are one of the two.

135
00:08:46.467 --> 00:08:50.772
It's either developers using the system
for development purposes, or,

136
00:08:50.772 --> 00:08:56.217
which is more common, the users themselves
and how they're going to use the system.

137
00:08:56.217 --> 00:08:58.393
And you might think that, well,

138
00:08:58.393 --> 00:09:02.542
that's just the forward-facing API
that they're interacting with.

139
00:09:02.542 --> 00:09:07.672
No, it's anything that that API talks to
or anything that that API interacts with.

140
00:09:07.672 --> 00:09:12.863
And this is where, again,
huge companies that have incredibly large,

141
00:09:12.863 --> 00:09:17.472
distributed systems have to
factor in everything downstream.

142
00:09:17.472 --> 00:09:19.663
I don't know if you guys have seen it,

143
00:09:19.663 --> 00:09:24.186
but there's a funny video online of
microservices, and this guy being like,

144
00:09:24.186 --> 00:09:28.899
we can't do it because of this, and
it's gotta go to this, and then over here.

145
00:09:28.899 --> 00:09:32.756
And that is absolutely
accurate in a lot of ways, and

146
00:09:32.756 --> 00:09:35.042
even gave me PTSD watching it.

147
00:09:35.042 --> 00:09:38.148
Because, yeah,
it's not just one component, and

148
00:09:38.148 --> 00:09:42.947
the more you drill down into that, the
more you realize that the user's touching

149
00:09:42.947 --> 00:09:45.931
a lot more things than you
actually expect it to.

150
00:09:45.931 --> 00:09:50.763
So, if you have a huge architecture for
one specific thing,

151
00:09:50.763 --> 00:09:56.165
you might need to understand if
that need and expectation is there,

152
00:09:56.165 --> 00:10:01.120
right, versus just having
a massively over complex system.

153
00:10:01.120 --> 00:10:03.229
And then finally, or
one of the final ones,

154
00:10:03.229 --> 00:10:05.282
is determine the functionality, right?

155
00:10:05.282 --> 00:10:10.052
So we understand,
who's gonna be using this, right?

156
00:10:10.052 --> 00:10:13.612
What is the functionality of that
system and what is its purpose?

157
00:10:13.612 --> 00:10:16.262
Again, going back to
the whole scope creep.

158
00:10:16.262 --> 00:10:21.112
This is actually a really good way to have
a valid argument where you can say, well,

159
00:10:21.112 --> 00:10:25.190
listen, this is just for
the user's functionality to do this.

160
00:10:25.190 --> 00:10:26.690
Why are we including this, right?

161
00:10:27.800 --> 00:10:32.069
That's a really easy way of being able
to communicate that scope creep may be

162
00:10:32.069 --> 00:10:36.072
happening, that you might be in
a situation where it's going too far or

163
00:10:36.072 --> 00:10:39.073
getting too complex, and
that can reel back as well,

164
00:10:39.073 --> 00:10:40.971
cuz anyone can understand that.

165
00:10:40.971 --> 00:10:45.076
Anyone can understand this is
[LAUGH] too much for what is needed.

166
00:10:47.576 --> 00:10:51.747
Performance as well, you do wanna
think about performance, right, not so

167
00:10:51.747 --> 00:10:55.986
much in the sense of, can it take
a billion requests or something like that?

168
00:10:55.986 --> 00:10:57.832
But is it performant, right?

169
00:10:57.832 --> 00:11:01.975
What happens when we throw
a little bit of load on it,

170
00:11:01.975 --> 00:11:06.141
going back to the UUIDs
don't scale example.

171
00:11:06.141 --> 00:11:11.256
There is a valid argument in saying that
if one specific function has to make seven

172
00:11:11.256 --> 00:11:16.241
lookups to a user, maybe you have your
user model spread out too much, right?

173
00:11:16.241 --> 00:11:21.718
Maybe your data is not all in one
place as efficiently as it could be.

174
00:11:21.718 --> 00:11:26.223
And so because of that, it's going to make
it so that if we do ever have a thousand

175
00:11:26.223 --> 00:11:31.678
requests at one time, we're gonna DDoS
the database or something like that.

176
00:11:31.678 --> 00:11:36.691
So understanding the performance that
is actually needed for the system and

177
00:11:36.691 --> 00:11:41.870
not, again, having that over complication
will make it so that it should be.

178
00:11:41.870 --> 00:11:47.128
It might not scale perfectly, but
it's the KISS principle, right?

179
00:11:47.128 --> 00:11:48.188
Keep it super simple.

180
00:11:48.188 --> 00:11:49.643
If you keep it super simple,

181
00:11:49.643 --> 00:11:53.048
then you'll probably be able to
scale that system better as well.

182
00:11:55.018 --> 00:11:57.528
And this is also really important as well.

183
00:11:57.528 --> 00:12:01.536
Any constraints that you can think
of whatsoever, any constraints.

184
00:12:01.536 --> 00:12:05.448
It can be budget,
it can be resources, it can be time,

185
00:12:05.448 --> 00:12:10.693
challenge yourself before
letting others challenge you.

186
00:12:10.693 --> 00:12:14.370
Because you'll be more impressive in a
discussion if you've already thought about

187
00:12:14.370 --> 00:12:17.373
what a concern of somebody
else might bring up.

188
00:12:17.373 --> 00:12:22.699
And that's part of the salesmen part
of building an architecture, right?

189
00:12:22.699 --> 00:12:25.216
You know what,
I've already thought about that and

190
00:12:25.216 --> 00:12:27.573
this is what I found,
what do you think, right?

191
00:12:27.573 --> 00:12:30.961
That makes the person listen to you and
wanna buy in.

192
00:12:30.961 --> 00:12:34.393
The conversation becomes less about
I'm right, and you're wrong, and

193
00:12:34.393 --> 00:12:38.061
more about let's work on this together,
here's what I found first, right?

194
00:12:38.061 --> 00:12:43.518
So, seriously guys,
challenge your own designs, right?

195
00:12:43.518 --> 00:12:47.236
It's really important to look
at something and be like,

196
00:12:47.236 --> 00:12:50.338
how would I push back on this if I was to,
right?

197
00:12:50.338 --> 00:12:54.766
It can help a lot, and
those constraints can help narrow scope,

198
00:12:54.766 --> 00:12:59.448
they can help lower budget costs,
they can help with a lot of stuff.

199
00:13:01.596 --> 00:13:03.183
&gt;&gt; Erik Reinert: We talked
about this a bit, but

200
00:13:03.183 --> 00:13:07.762
now we're talking more about the actual
scalability of the system itself, right?

201
00:13:07.762 --> 00:13:10.852
How can it grow and adapt?

202
00:13:10.852 --> 00:13:16.557
For example, going back to the user
service scenario, if you're heavily,

203
00:13:16.557 --> 00:13:21.121
heavily dependent on user data,
and you know tons of requests

204
00:13:21.121 --> 00:13:25.719
are gonna go to that service,
consider separating that out.

205
00:13:25.719 --> 00:13:29.564
Consider, is this going to
be something that's going

206
00:13:29.564 --> 00:13:32.499
to be reused by a bunch of other services.

207
00:13:32.499 --> 00:13:36.946
A good example of that is
in the V2 version of Quirk,

208
00:13:36.946 --> 00:13:42.213
what I'm building,
I wanted a plug and play bot system.

209
00:13:42.213 --> 00:13:46.254
And what I mean by that is, is we knew
that in the future we were gonna support

210
00:13:46.254 --> 00:13:50.231
Twitch, we were gonna support YouTube,
we were gonna support Discord,

211
00:13:50.231 --> 00:13:51.450
other platforms, but

212
00:13:51.450 --> 00:13:56.153
I didn't wanna have to reinvent the wheel
every time we connected those systems.

213
00:13:56.153 --> 00:13:57.683
And so what did we do?

214
00:13:57.683 --> 00:14:00.101
We built what we call our bot engine,

215
00:14:00.101 --> 00:14:04.469
which really just means that you can
send any kind of text to it, and

216
00:14:04.469 --> 00:14:08.698
it knows how to respond with
natural language, NLP basically.

217
00:14:09.898 --> 00:14:13.694
And so that made it so that when
Discord was ready to be connected,

218
00:14:13.694 --> 00:14:16.800
it was just like, all right,
create the listener and

219
00:14:16.800 --> 00:14:19.728
then send all the messages
to the same place.

220
00:14:19.728 --> 00:14:23.901
The way that it's processed, the way
that the AI actually computes it and

221
00:14:23.901 --> 00:14:25.915
returns it, it's the same.

222
00:14:25.915 --> 00:14:28.315
It works the exact same
across all platforms.

223
00:14:28.315 --> 00:14:31.803
And what's nice about that,
Plug for Quirk,

224
00:14:31.803 --> 00:14:35.828
whenever it comes out,
[LAUGH] hopefully Twitchcon,

225
00:14:35.828 --> 00:14:40.515
[LAUGH] is that you have
a unified user experience as well.

226
00:14:40.515 --> 00:14:45.399
Now the user knows that they
can expect the same AI ML

227
00:14:45.399 --> 00:14:51.567
responses on Discord, on Twitch,
on YouTube, whatever.

228
00:14:51.567 --> 00:14:55.176
And we did that not only
as a experience part, but

229
00:14:55.176 --> 00:14:59.664
also just make it easier so
that when we want to in the future,

230
00:14:59.664 --> 00:15:04.520
we can hook in more systems,
and it's easier to process.

231
00:15:04.520 --> 00:15:08.582
I mean, theoretically, if we wanted,
we could hook it up to Twitter,

232
00:15:08.582 --> 00:15:09.610
it's just text.

233
00:15:09.610 --> 00:15:13.750
It just processes text
at the end of the day.

234
00:15:13.750 --> 00:15:16.640
Again, security requirements
are also really important.

235
00:15:16.640 --> 00:15:21.429
You should absolutely be thinking about
data, protection of data, processes

236
00:15:21.429 --> 00:15:26.511
within systems, how they communicate with
each other, right, things like that.

237
00:15:26.511 --> 00:15:29.919
And to be clear,
this is all part of the research, okay?

238
00:15:29.919 --> 00:15:34.067
This isn't taking a design and saying,
does this fit their requirements?

239
00:15:34.067 --> 00:15:39.166
This is no, we're going to think about
all of these things beforehand so

240
00:15:39.166 --> 00:15:43.428
that we step forward with,
again, scalability concerns,

241
00:15:43.428 --> 00:15:46.538
security requirements, stuff like that.

242
00:15:46.538 --> 00:15:49.405
And again,
this kinda goes into this as well, but

243
00:15:49.405 --> 00:15:52.968
I have to mention it just because
I work at a company like this.

244
00:15:52.968 --> 00:15:55.966
Regulatory or
compliance requirements, right?

245
00:15:55.966 --> 00:16:00.789
If you have HIPAA requirements
that you need to stick with,

246
00:16:00.789 --> 00:16:06.288
be sure that anything that is
considered knows how to play process or

247
00:16:06.288 --> 00:16:08.131
handle those things.

248
00:16:08.131 --> 00:16:13.678
Really research should be thinking
about anything that you possibly can.

249
00:16:13.678 --> 00:16:18.646
And if you also have integrated systems,
say you already have existing systems,

250
00:16:18.646 --> 00:16:21.670
this is part of that
conversation of preparing for

251
00:16:21.670 --> 00:16:25.631
anyone to bring up maybe something
that already exists, right?

252
00:16:25.631 --> 00:16:30.398
So if you're integrating a system,
you wanna think about, okay,

253
00:16:30.398 --> 00:16:34.999
well, maybe a requirement is,
is that it uses HTTP versus GRPC or

254
00:16:34.999 --> 00:16:38.703
maybe that we stick with
the same kind of protocols.

255
00:16:38.703 --> 00:16:41.836
So that, again, we're not changing
something on the fly, and

256
00:16:41.836 --> 00:16:45.540
then we can't hook that system up
to other things in the future.

257
00:16:45.540 --> 00:16:47.388
All of these roles play together.

