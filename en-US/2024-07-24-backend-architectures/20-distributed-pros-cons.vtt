WEBVTT

1
00:00:00.430 --> 00:00:04.637
&gt;&gt; Erik Reinert: Okay, so let's talk about
the pros of service-oriented systems,

2
00:00:04.637 --> 00:00:05.150
right?

3
00:00:05.150 --> 00:00:09.941
Now, again, my goals are not to just
be reiterating this to you guys,

4
00:00:09.941 --> 00:00:14.260
but it's to hope that by now,
you see what I'm talking about.

5
00:00:14.260 --> 00:00:17.130
You understand, and
it's just like obvious.

6
00:00:17.130 --> 00:00:21.092
You probably didn't think this was obvious
at the beginning of this course, but

7
00:00:21.092 --> 00:00:23.940
it should now,
it should be a lot more obvious.

8
00:00:23.940 --> 00:00:28.652
So one of the first pros of doing
service-oriented design is independent

9
00:00:28.652 --> 00:00:29.910
development.

10
00:00:29.910 --> 00:00:33.364
Each service can be developed
independently by a team that is focused on

11
00:00:33.364 --> 00:00:34.210
that service.

12
00:00:34.210 --> 00:00:36.806
This is one of the biggest reasons why

13
00:00:36.806 --> 00:00:40.668
companies move to
service-oriented architecture.

14
00:00:40.668 --> 00:00:44.549
Because they wanna be able to say,
this team, you focus on this, this team,

15
00:00:44.549 --> 00:00:45.527
you focus on that.

16
00:00:45.527 --> 00:00:47.517
And at Hippo, we do the same thing.

17
00:00:47.517 --> 00:00:49.663
We have teams that focus
on customer portal.

18
00:00:49.663 --> 00:00:52.057
We have teams that focus
on lender agreements.

19
00:00:52.057 --> 00:00:55.087
We have teams that focus on
different parts of the system.

20
00:00:55.087 --> 00:00:57.447
And we don't have to worry about them.

21
00:00:57.447 --> 00:01:01.634
Now, why you should watch my other
courses is because I show you

22
00:01:01.634 --> 00:01:06.532
guys how you automate and deploy those
systems and serve those systems for

23
00:01:06.532 --> 00:01:10.641
those teams, because that's
another challenge in its own.

24
00:01:10.641 --> 00:01:15.218
Although you want these teams to
be able to independently develop,

25
00:01:15.218 --> 00:01:18.187
the cycles should be the same, right?

26
00:01:18.187 --> 00:01:20.555
We should all deploy
services the same way.

27
00:01:20.555 --> 00:01:23.430
We should all configure
services the same way.

28
00:01:23.430 --> 00:01:27.420
We should all have expectations
around how services run the same way.

29
00:01:27.420 --> 00:01:30.498
Again, unless the architecture
is different for some reason,

30
00:01:30.498 --> 00:01:32.810
that's how we build off
the shelf solutions.

31
00:01:32.810 --> 00:01:36.290
And again, that's why I really do
recommend watching those courses,

32
00:01:36.290 --> 00:01:38.500
because all of this plays together, right?

33
00:01:38.500 --> 00:01:40.840
You design it, you build it.

34
00:01:40.840 --> 00:01:45.618
You maintain it, but then you also figure
out how to automate it, how to deploy it,

35
00:01:45.618 --> 00:01:47.070
how to scale it, right?

36
00:01:47.070 --> 00:01:51.827
And all of it kind of glues together in
this cohesive architecture that you get to

37
00:01:51.827 --> 00:01:53.110
build and maintain.

38
00:01:53.110 --> 00:01:56.080
And if you do it right,
you enjoy it [LAUGH].

39
00:01:56.080 --> 00:01:58.180
You actually don't hate it.

40
00:01:58.180 --> 00:02:04.596
And that is what DevOps is for and that's
one of the main reasons why it is tough.

41
00:02:04.596 --> 00:02:07.958
It is tough, I know a lot of
people who have built systems or

42
00:02:07.958 --> 00:02:12.976
have worked on systems with distributed
services and gone this is a nightmare.

43
00:02:12.976 --> 00:02:16.336
Like this sucks, there feels like
there's no design thought around this.

44
00:02:16.336 --> 00:02:19.236
We just kind of threw a bunch
of services out there.

45
00:02:19.236 --> 00:02:22.871
And even at Hippo, we definitely have
some of that technical debt as well.

46
00:02:22.871 --> 00:02:24.741
And we're trying to get
better at improving it.

47
00:02:24.741 --> 00:02:33.171
But if you do it right, the benefits of
independent development is remarkable.

48
00:02:33.171 --> 00:02:35.920
It's a game changer for a company.

49
00:02:35.920 --> 00:02:39.188
That means that teams can
easily work separated and

50
00:02:39.188 --> 00:02:43.530
they don't have to think about
each other and what they're doing.

51
00:02:45.810 --> 00:02:49.860
This one, however, is huge, okay?

52
00:02:49.860 --> 00:02:52.370
Now, I have a story for this,
independent deployments.

53
00:02:52.370 --> 00:02:54.490
Services can be deployed independently.

54
00:02:56.170 --> 00:03:00.115
Up until about a year ago,
and if I give you guys PTSD,

55
00:03:00.115 --> 00:03:03.741
I'm sorry, but
this is what I went through.

56
00:03:03.741 --> 00:03:08.185
Up until about a year ago,
Hippo had to, every two weeks,

57
00:03:08.185 --> 00:03:13.861
get together on a call with every team,
and we had deployment nights.

58
00:03:13.861 --> 00:03:17.319
And we would sit on a call for
about five to six hours, and

59
00:03:17.319 --> 00:03:19.392
we'd have a deployment leader.

60
00:03:19.392 --> 00:03:22.529
It was like a raid in a dungeons and
dragons thing.

61
00:03:22.529 --> 00:03:27.249
Somebody led the group into battle and
we went through the systems one by one.

62
00:03:27.249 --> 00:03:29.129
Okay, go deploy your system.

63
00:03:29.129 --> 00:03:30.689
Okay, go deploy your system.

64
00:03:30.689 --> 00:03:35.443
Okay, go deploy your system and
I hated it.

65
00:03:35.443 --> 00:03:37.769
I absolutely hated it.

66
00:03:37.769 --> 00:03:39.851
The fact that we had our system so

67
00:03:39.851 --> 00:03:45.342
tightly coupled meant that every time we
had to deploy, we had to get together.

68
00:03:45.342 --> 00:03:48.382
Otherwise, if we didn't,
we could have cascading failures.

69
00:03:48.382 --> 00:03:50.282
We wouldn't know where they came from.

70
00:03:50.282 --> 00:03:54.536
And so it made more sense for us as
an organization to all sit on a slack

71
00:03:54.536 --> 00:03:59.241
call and just go through the whole
process of deploying like 40 different

72
00:03:59.241 --> 00:04:02.798
services from 10 to 20
different teams all at once.

73
00:04:02.798 --> 00:04:03.638
It was terrible.

74
00:04:03.638 --> 00:04:05.672
It was terrible.

75
00:04:05.672 --> 00:04:12.018
And these are like the days that shall not
be spoken of because we hated it so much.

76
00:04:12.018 --> 00:04:16.556
But what we implemented to fix
this was something called FBR,

77
00:04:16.556 --> 00:04:19.728
which is feature-based releases.

78
00:04:19.728 --> 00:04:25.726
And the idea behind this was is we already
kind of had this service-oriented design,

79
00:04:25.726 --> 00:04:32.039
but because we didn't have the confidence
in deploying it, we needed to fix that.

80
00:04:32.039 --> 00:04:36.419
And so what we did was is we kind of
developed this process of like a bus.

81
00:04:36.419 --> 00:04:39.659
The bus is going around
the school every day.

82
00:04:39.659 --> 00:04:42.357
It's picking up kids,
it's dropping kids off.

83
00:04:42.357 --> 00:04:44.997
And you can hop on that bus anytime.

84
00:04:44.997 --> 00:04:48.937
And when you hop on that bus, that bus is
gonna go all the way to production, and

85
00:04:48.937 --> 00:04:50.693
anybody on that bus can go with it.

86
00:04:50.693 --> 00:04:54.909
And so, this feature-based release
made it so that we moved from a,

87
00:04:54.909 --> 00:04:59.271
okay, everyone deploy all at once to,
okay, teams, you can deploy as

88
00:04:59.271 --> 00:05:04.393
many times as you want during the day,
and you will not impact other systems.

89
00:05:04.393 --> 00:05:09.823
And this independent deployment made our,
God, it's so much nicer.

90
00:05:09.823 --> 00:05:11.949
It is, it's so much nicer.

91
00:05:11.949 --> 00:05:15.979
It made a lot of people happy, just
genuinely happier because you don't have

92
00:05:15.979 --> 00:05:20.243
to sit on a phone call until 8 o'clock,
9 o'clock, this was a thing.

93
00:05:20.243 --> 00:05:22.413
Nobody has to stay up late anymore.

94
00:05:22.413 --> 00:05:25.405
Nobody has to be worried about if
a deployment is gonna happen or

95
00:05:25.405 --> 00:05:26.483
if it's gonna be bad.

96
00:05:26.483 --> 00:05:32.696
And also what's really nice is it made our
deployments happened earlier in the day.

97
00:05:32.696 --> 00:05:37.613
We didn't have to think about, well, let's
deploy that after hours just to be safe.

98
00:05:37.613 --> 00:05:38.653
That disappeared.

99
00:05:38.653 --> 00:05:40.403
A lot of that really disappeared.

100
00:05:40.403 --> 00:05:45.387
And so now developers and teams can
easily deploy whenever they want.

101
00:05:45.387 --> 00:05:49.537
And that deployment is just that
one little change of that commit.

102
00:05:49.537 --> 00:05:54.547
Like it's literally just the commit and
the Docker build of that commit.

103
00:05:54.547 --> 00:05:56.537
And they just drag it all
the way to production.

104
00:05:56.537 --> 00:06:00.677
And it's literally like taking the
container and going, okay, you're in dev.

105
00:06:00.677 --> 00:06:02.124
Okay, that looks good.

106
00:06:02.124 --> 00:06:03.794
You're in staging, okay?

107
00:06:03.794 --> 00:06:05.794
You're in prod copy, okay?

108
00:06:05.794 --> 00:06:06.814
You're in prod.

109
00:06:06.814 --> 00:06:11.544
And that separation of independent
deployment is really what made Hippo be

110
00:06:11.544 --> 00:06:13.205
able to move a lot faster.

111
00:06:13.205 --> 00:06:18.778
And honestly, even though the system
itself is something that we took probably

112
00:06:18.778 --> 00:06:24.257
like a year in itself to be like, okay,
let's try and do something better.

113
00:06:24.257 --> 00:06:26.567
It's still works fantastically.

114
00:06:26.567 --> 00:06:29.437
And going back to the Kubernetes,
me trying or

115
00:06:29.437 --> 00:06:32.314
my team trying to get us
to move to Kubernetes.

116
00:06:32.314 --> 00:06:35.684
It was a hard sell to be like,
let's change this again,

117
00:06:35.684 --> 00:06:39.056
because we already found
a solution that works so well,

118
00:06:39.056 --> 00:06:43.885
that it was hard to be like, well,
let's find something even better, right?

119
00:06:43.885 --> 00:06:48.076
And so independent deployments, if
you're at a company that has to do that,

120
00:06:48.076 --> 00:06:51.106
that has to get together every week and
do deployments,

121
00:06:51.106 --> 00:06:53.893
this should be one of your top priorities,
right?

122
00:06:53.893 --> 00:06:57.973
You do not wanna have to worry about
other teams deploying with you and

123
00:06:57.973 --> 00:07:01.013
are you gonna break
somebody else's components?

124
00:07:01.013 --> 00:07:04.583
That's an architecture problem
that needs to be solved for.

125
00:07:09.184 --> 00:07:13.865
&gt;&gt; Erik Reinert: And as we noted before,
fault isolation, right?

126
00:07:13.865 --> 00:07:19.805
So we talked about services and
microservices being distributed.

127
00:07:19.805 --> 00:07:24.446
The nice thing about it, as well,
is that you can Isolate failures and

128
00:07:24.446 --> 00:07:29.729
things like that to specific services and
your outages don't become massive.

129
00:07:29.729 --> 00:07:35.542
Again, if we talk about the monolith,
what happens if your front end goes down?

130
00:07:35.542 --> 00:07:38.702
Everything goes down yeah,
it's everything.

131
00:07:38.702 --> 00:07:40.696
It's not just your front end,
it's your back end.

132
00:07:40.696 --> 00:07:42.427
It's everything, right?

133
00:07:42.427 --> 00:07:45.609
And so
when we talk about having to worry about

134
00:07:45.609 --> 00:07:49.306
fire drills at two o'clock in the morning,
right?

135
00:07:49.306 --> 00:07:53.407
If we're not worried about one
specific component, you know what?

136
00:07:53.407 --> 00:07:54.947
Let it be broken until the morning.

137
00:07:54.947 --> 00:07:58.766
We'll fix it or we'll wait until the other
team in Poland or whatever hops on and

138
00:07:58.766 --> 00:07:59.607
fixes it.

139
00:07:59.607 --> 00:08:02.096
It's not as big of a fire, right?

140
00:08:02.096 --> 00:08:04.829
And these two, oops, sorry.

141
00:08:04.829 --> 00:08:06.858
Independent deployments and

142
00:08:06.858 --> 00:08:11.836
fault isolation can make your
developers live so much better, right?

143
00:08:11.836 --> 00:08:15.971
This is not just architecture, but
this is also developer experience.

144
00:08:15.971 --> 00:08:19.746
You don't have to make your
developers go through the mud.

145
00:08:19.746 --> 00:08:25.052
You can make, I like to say, you can have
nice things and we can have nice thing.

146
00:08:25.052 --> 00:08:29.118
So this is why distributed is so
valuable, right?

147
00:08:29.118 --> 00:08:34.428
But again, I want you guys to keep in your
mind when we talked about what and when.

148
00:08:34.428 --> 00:08:38.328
It's still doesn't mean that
monoliths aren't valuable, right?

149
00:08:38.328 --> 00:08:42.290
But hopefully this gives you
a better understanding of the real

150
00:08:42.290 --> 00:08:44.768
differences between the two, right?

151
00:08:44.768 --> 00:08:48.673
And then, this is really awesome as well.

152
00:08:48.673 --> 00:08:52.500
Say you do have that one rogue team
that just wants to build Rust.

153
00:08:52.500 --> 00:08:53.787
Yeah, you know what?

154
00:08:53.787 --> 00:08:54.938
Go for it.

155
00:08:54.938 --> 00:08:59.284
As long as you guys can maintain
your own systems and support it, and

156
00:08:59.284 --> 00:09:02.641
you guys can plug into our existing stack.

157
00:09:02.641 --> 00:09:07.081
Sure, go for it, right?

158
00:09:07.081 --> 00:09:12.286
Nobody at a C level is gonna give
a crap if you're using Rust or Go.

159
00:09:12.286 --> 00:09:17.196
[LAUGH] Nobody at the corporate
level is gonna care.

160
00:09:17.196 --> 00:09:18.801
Nobody's gonna argue that.

161
00:09:18.801 --> 00:09:23.355
So if you have a good argument, you have a
good solution and you have something that

162
00:09:23.355 --> 00:09:27.645
works well and plays nicely with
everything else, then distributed systems

163
00:09:27.645 --> 00:09:31.155
also gives more freedom to
the developers to do what they want.

164
00:09:31.155 --> 00:09:36.486
And this can mean that you can try
innovating with new things easier, right?

165
00:09:36.486 --> 00:09:40.104
In the scenario where you say,
you know what, let's try this one system,

166
00:09:40.104 --> 00:09:43.403
maybe we'll try Elixir, or
maybe we'll try this other thing, right?

167
00:09:43.403 --> 00:09:48.032
And I know for a fact, like again,
I know friends who work at Twitch and

168
00:09:48.032 --> 00:09:52.901
other large companies like I do, and
they've talked about this as well,

169
00:09:52.901 --> 00:09:57.636
that there's always this one weird
service that exists that is weird.

170
00:09:57.636 --> 00:10:00.901
But they tried it, and
now we're just keeping it around.

171
00:10:00.901 --> 00:10:01.998
And that's okay.

172
00:10:01.998 --> 00:10:06.202
Those are welcome in this kind of
architecture as long as they're built with

173
00:10:06.202 --> 00:10:08.266
the considerations around them.

174
00:10:08.266 --> 00:10:13.736
So distributed definitely allows you to
have a much more diverse technology stack,

175
00:10:13.736 --> 00:10:14.436
for sure.

176
00:10:16.246 --> 00:10:18.106
So let's talk about cons, right?

177
00:10:18.106 --> 00:10:20.654
And we've already kind of
talked about this, but

178
00:10:20.654 --> 00:10:22.847
distributed system complexity, right?

179
00:10:22.847 --> 00:10:27.036
Developers must deal with the additional
complexity of co-creating

180
00:10:27.036 --> 00:10:28.462
a distributed system.

181
00:10:28.462 --> 00:10:35.286
This means that developers might still
need to consider how other systems work.

182
00:10:35.286 --> 00:10:38.856
They might need to also think
about how their systems plug and

183
00:10:38.856 --> 00:10:40.616
play into the other systems.

184
00:10:40.616 --> 00:10:44.837
Again, going back to the video of
the guy talking about everything jumping

185
00:10:44.837 --> 00:10:49.266
around and all the complexity there,
this is a prime example of that, right?

186
00:10:50.876 --> 00:10:54.005
If somebody adds something, and
then somebody adds something else, and

187
00:10:54.005 --> 00:10:55.721
then somebody adds something else, and

188
00:10:55.721 --> 00:10:58.445
nobody thought about the other
three things that happened, and

189
00:10:58.445 --> 00:11:01.986
they just add their own thing, now you've
got four levels of complexity, right?

190
00:11:03.628 --> 00:11:08.354
Excuse me, one of the things that we did
at Hippo that I actually think was a bit

191
00:11:08.354 --> 00:11:09.952
of a mistake is we made it so

192
00:11:09.952 --> 00:11:14.859
that developers can pretty much create
their own services whenever they want.

193
00:11:14.859 --> 00:11:19.368
But to the point where we kind of stopped
doing like approval processes and

194
00:11:19.368 --> 00:11:24.239
things like that because we just wanted
developers to be agile and now we've got

195
00:11:24.239 --> 00:11:29.884
a lot of challenges with that, like for
starters, development environments, right?

196
00:11:29.884 --> 00:11:33.078
How do you create a development
environment when you've got 150

197
00:11:33.078 --> 00:11:36.551
distributed services that all need
to be online, talking to each other,

198
00:11:36.551 --> 00:11:39.083
know about routing,
know about service discovery?

199
00:11:39.083 --> 00:11:41.054
That becomes really challenging.

200
00:11:41.054 --> 00:11:45.445
And so in our case, we actually saw
the provisioning of development

201
00:11:45.445 --> 00:11:49.428
environments in the cloud
go up by like 20 minutes.

202
00:11:49.428 --> 00:11:53.046
Just because it's got to go through
every service, restart every service,

203
00:11:53.046 --> 00:11:56.908
make sure it's got the latest Docker
image and all these other things.

204
00:11:56.908 --> 00:12:00.258
And this is a big reason as to
why we wanna move to Kubernetes.

205
00:12:00.258 --> 00:12:04.194
Because in Kubernetes, we can at
least describe them in namespaces,

206
00:12:04.194 --> 00:12:08.463
we can just focus on containers versus
ECS, which is you need to have hosts,

207
00:12:08.463 --> 00:12:11.953
you need to have clusters for
it, and all these other things.

208
00:12:11.953 --> 00:12:14.730
And so, distributed system
complexity is out of the box,

209
00:12:14.730 --> 00:12:19.313
gonna be a challenge you're gonna deal
with right away with distributed systems.

210
00:12:19.313 --> 00:12:24.288
So being aware of that scale as
it's happening Is important.

211
00:12:29.747 --> 00:12:32.132
&gt;&gt; Erik Reinert: Also with
distributed systems, development and

212
00:12:32.132 --> 00:12:34.012
testing becomes a lot more difficult.

213
00:12:34.012 --> 00:12:39.050
Like I just mentioned with things like
developer environments, testing locally.

214
00:12:39.050 --> 00:12:43.626
Because we have such a distributed system,
we also have tons of repos.

215
00:12:43.626 --> 00:12:48.892
For an example, at Hippo,
we probably have around

216
00:12:48.892 --> 00:12:53.795
200 to 300 active repos, which is a lot.

217
00:12:53.795 --> 00:12:58.334
And we've built tools that I even
talk about in the DevOps for

218
00:12:58.334 --> 00:13:03.258
developers course,
like something we call Hippo Build.

219
00:13:03.258 --> 00:13:05.018
So think about this, right?

220
00:13:05.018 --> 00:13:07.742
Say you're a developer and
you wanna create a new service, but

221
00:13:07.742 --> 00:13:10.520
you wanna create that new service
exactly like other services,

222
00:13:10.520 --> 00:13:12.648
meaning you get the same
deployment pipelines.

223
00:13:12.648 --> 00:13:16.791
You get the same configuration files, you
get the same workflows and everything, but

224
00:13:16.791 --> 00:13:18.948
you wanna build it a different way.

225
00:13:18.948 --> 00:13:21.308
Cool, just create a template, no big deal.

226
00:13:21.308 --> 00:13:23.217
Awesome, what happens when
you need to update it?

227
00:13:24.617 --> 00:13:28.177
What happens when you need to update
50 of those repos at once, right?

228
00:13:28.177 --> 00:13:32.286
This is where that complexity really
becomes a challenge because you need

229
00:13:32.286 --> 00:13:36.060
a tool that knows how to go out to
all those 50 repos, update them,

230
00:13:36.060 --> 00:13:38.202
update their build configurations.

231
00:13:38.202 --> 00:13:39.327
Here's a good example.

232
00:13:39.327 --> 00:13:42.165
We were talking about Nix earlier,
Nix mentioned,

233
00:13:42.165 --> 00:13:44.819
we were talking about Nix earlier, right?

234
00:13:44.819 --> 00:13:48.329
What happens when I wanna move all
of our development flows to Nix?

235
00:13:49.779 --> 00:13:53.079
That's 200 repos I have
to update with flakes and

236
00:13:53.079 --> 00:13:55.409
other things to make that happen.

237
00:13:55.409 --> 00:13:57.379
And so, how do you solve for that?

238
00:13:57.379 --> 00:13:59.239
How do you batch update repos?

239
00:13:59.239 --> 00:14:01.219
How do you batch update tests, right?

240
00:14:01.219 --> 00:14:04.568
How do you batch update other things,
how do you make sure that all of these

241
00:14:04.568 --> 00:14:07.481
components are being properly tested,
right?

242
00:14:07.481 --> 00:14:11.830
What we ended up doing in Hippo was is we
started creating integration repositories

243
00:14:11.830 --> 00:14:13.771
for service repositories.

244
00:14:13.771 --> 00:14:16.622
So you'd have a service repository
like billing service, but

245
00:14:16.622 --> 00:14:20.441
then you could also create a billing
service integration tests repo.

246
00:14:20.441 --> 00:14:25.029
And so the billing service is in its own
repo and coupled with all of its logic,

247
00:14:25.029 --> 00:14:28.982
but then the integration test repo
is all of the end to end testing,

248
00:14:28.982 --> 00:14:33.727
reaching out to environments,
doing API calls and stuff like that.

249
00:14:33.727 --> 00:14:37.127
But that means that
everything doubled [LAUGH].

250
00:14:37.127 --> 00:14:41.556
So now we've got 80 repos for
40 services, right?

251
00:14:41.556 --> 00:14:46.503
And so again, that complexity becomes
basically exponential with how

252
00:14:46.503 --> 00:14:49.560
many services and
how many things you have.

253
00:14:49.560 --> 00:14:54.621
So it definitely does make development and
testing much more difficult just because

254
00:14:54.621 --> 00:14:59.650
of the fact that it's so distributed and
you have more things to think about.

255
00:14:59.650 --> 00:15:02.075
Again, let's think about monoliths, and

256
00:15:02.075 --> 00:15:05.148
then think about what I just described,
right?

257
00:15:05.148 --> 00:15:07.368
Monolith's way easier.

258
00:15:07.368 --> 00:15:10.288
You go one place, update one thing,
and you're done, right?

259
00:15:10.288 --> 00:15:11.708
This is a bit more.

260
00:15:11.708 --> 00:15:14.568
And again, data management is
also a big challenge here.

261
00:15:14.568 --> 00:15:18.926
We talked about the databases and how if
they don't share databases, how do we make

262
00:15:18.926 --> 00:15:23.473
sure that the data schemas match,
that they have the proper representations.

263
00:15:23.473 --> 00:15:26.902
Well, what happens when you need
to first update a user table and

264
00:15:26.902 --> 00:15:30.093
then update a payment table and
the payment request fails?

265
00:15:31.133 --> 00:15:31.973
What do you do?

266
00:15:31.973 --> 00:15:36.319
How do you fix that data inconsistency,
right?

267
00:15:36.319 --> 00:15:40.666
It's things like that become much more
challenging when you have multiple

268
00:15:40.666 --> 00:15:45.020
services that are distributed and
this is also something we deal at Hippo.

269
00:15:45.020 --> 00:15:49.140
As a matter of fact,
I'm just giving you all of Hippo secrets.

270
00:15:49.140 --> 00:15:53.845
As a matter of fact, one of the biggest
challenges we're dealing with today

271
00:15:53.845 --> 00:15:58.980
is we have integration repos that talk
to the same services while they run.

272
00:15:58.980 --> 00:16:04.271
So some integration repos talk to the same
services as other integration repos and

273
00:16:04.271 --> 00:16:06.352
they have version mismatches.

274
00:16:06.352 --> 00:16:09.184
And we literally have this error
now showing up a lot in our

275
00:16:09.184 --> 00:16:12.193
integration reports where
it's saying version mismatch,

276
00:16:12.193 --> 00:16:14.691
version mismatch, version mismatch.

277
00:16:14.691 --> 00:16:18.071
The reason for that is because we're
running those things at the same time.

278
00:16:18.071 --> 00:16:21.867
We're running both of those integration
tests at the same time, and

279
00:16:21.867 --> 00:16:27.133
they're both trying to update user data or
mock data, but it's the same mock data.

280
00:16:27.133 --> 00:16:28.983
So you have to be considerate of that.

281
00:16:28.983 --> 00:16:33.059
You have to think about like, okay,
is this service going to touch or

282
00:16:33.059 --> 00:16:36.097
impact the other service
as it's working as well?

283
00:16:36.097 --> 00:16:39.128
And that consistency can
be really challenging.

