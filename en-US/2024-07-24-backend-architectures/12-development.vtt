WEBVTT

1
00:00:00.220 --> 00:00:03.686
&gt;&gt; Erik: Once you've created
that workflow or that diagram,

2
00:00:03.686 --> 00:00:06.955
this is where you start
the development process.

3
00:00:06.955 --> 00:00:11.387
[LAUGH] Do you see how much work it takes
just to get to the development process?

4
00:00:11.387 --> 00:00:16.974
[LAUGH] At this point, you should
be able to hand off your design or

5
00:00:16.974 --> 00:00:20.492
your architecture to another person and

6
00:00:20.492 --> 00:00:25.463
they make it without having to
really ask you much at all.

7
00:00:25.463 --> 00:00:28.416
This is really a principal engineer's job,

8
00:00:28.416 --> 00:00:33.712
which is think about it from a theory and
a practice and a principal perspective.

9
00:00:33.712 --> 00:00:38.763
So that when you give something
to the developer they can go,

10
00:00:38.763 --> 00:00:42.229
okay, well I understand what you want and

11
00:00:42.229 --> 00:00:47.194
I can pick the technologies
because of your requirements.

12
00:00:47.194 --> 00:00:50.783
And again, if you set those
requirements really well and

13
00:00:50.783 --> 00:00:55.718
have really good scope, then you can
actually put the whole responsibility of

14
00:00:55.718 --> 00:00:58.357
the technology on someone else, right?

15
00:00:58.357 --> 00:01:01.720
And then if that technology is chosen and
maybe it's not accurate,

16
00:01:01.720 --> 00:01:05.437
then you can at least have a discussion
with that person and be like, okay,

17
00:01:05.437 --> 00:01:09.508
I see where you're going with this, but
maybe I wasn't accurate with my design or

18
00:01:09.508 --> 00:01:11.338
what I was trying to convey.

19
00:01:11.338 --> 00:01:12.948
Here's how we can meet in the middle.

20
00:01:12.948 --> 00:01:17.265
But at this point, when you talk
about developing the architecture,

21
00:01:17.265 --> 00:01:21.216
you should really be confident
in what you're doing building or

22
00:01:21.216 --> 00:01:25.914
at least the components that are required
to create what you're building.

23
00:01:27.154 --> 00:01:29.904
&gt;&gt; Speaker 1: A question on the handoff.

24
00:01:29.904 --> 00:01:31.374
&gt;&gt; Erik: Yeah.

25
00:01:31.374 --> 00:01:36.180
&gt;&gt; Speaker 1: How much of the process do
you think the individual contributors

26
00:01:36.180 --> 00:01:41.787
should, the IC, rehash everything that
happened in step one in terms of,

27
00:01:41.787 --> 00:01:46.693
you're the principal you say go do this,
here's everything.

28
00:01:46.693 --> 00:01:49.245
&gt;&gt; Erik: Yeah, so as a principal engineer,

29
00:01:49.245 --> 00:01:54.092
you normally find yourself being
spread across a lot of system, but

30
00:01:54.092 --> 00:01:58.441
you'll have like a main domain
that you'll be focusing on.

31
00:01:58.441 --> 00:02:04.755
Like in hippo, we have principal engineers
that focus on our insurance again quoting

32
00:02:04.755 --> 00:02:11.007
and rate plans and all that stuff and
like that's their job is to focus on that.

33
00:02:11.007 --> 00:02:15.880
&gt;&gt; Speaker 1: Yeah, I guess I'm saying
more like as the developer who's

34
00:02:15.880 --> 00:02:20.655
going to build it,
do you think they should also obviously

35
00:02:20.655 --> 00:02:24.741
maybe part of it but how much research,
&gt;&gt; Erik: Right, okay.

36
00:02:24.741 --> 00:02:25.281
&gt;&gt; Speaker 1: etc.

37
00:02:25.281 --> 00:02:30.079
&gt;&gt; Erik: Yeah, so the way we we do it,
where I work is, again,

38
00:02:30.079 --> 00:02:35.751
you should really not add any
technology to the design.

39
00:02:35.751 --> 00:02:39.597
In the sense of like, are we using Amazon,
are we using Google, whatever,

40
00:02:39.597 --> 00:02:42.184
unless that's a hard stop requirement.

41
00:02:42.184 --> 00:02:47.089
So it is part of the due diligence of
the IC or your principle to make sure

42
00:02:47.089 --> 00:02:52.114
to think about any questions that
the developer may have, right?

43
00:02:52.114 --> 00:02:56.622
And so there can be sections in a proposal
where there's a solutions section and

44
00:02:56.622 --> 00:03:01.124
it talks about, well, we thought about
this, we thought about this we thought

45
00:03:01.124 --> 00:03:04.799
about this, but
this is the approach we wanna take.

46
00:03:04.799 --> 00:03:09.117
Normally, there definitely
can be developer input, but

47
00:03:09.117 --> 00:03:14.325
it's also kinda like there's too
many cooks in the kitchen, right?

48
00:03:14.325 --> 00:03:19.029
When you're starting to cook in
architecture or something like that.

49
00:03:19.029 --> 00:03:21.461
Somebody has to sit down and spend, again,

50
00:03:21.461 --> 00:03:25.705
I just showed you like nine slides on
thinking, somebody has to do that.

51
00:03:25.705 --> 00:03:31.338
But it is also up to the developer
once they get that design to say,

52
00:03:31.338 --> 00:03:38.055
well, I see where you're going with this
but I don't understand what you mean.

53
00:03:38.055 --> 00:03:42.015
And then at that point, the IC should
probably go back to the designs and

54
00:03:42.015 --> 00:03:44.375
address the developers concerns.

55
00:03:44.375 --> 00:03:47.893
So there's definitely a collaborative
process, it shouldn't just be like,

56
00:03:47.893 --> 00:03:49.705
hand over, see you later, right?

57
00:03:49.705 --> 00:03:54.955
But a really good principal engineer
will more than likely be able to hand

58
00:03:54.955 --> 00:03:59.961
off something and at least have a good
guide for where they should go.

59
00:03:59.961 --> 00:04:02.079
However, and this is also important,

60
00:04:02.079 --> 00:04:05.364
the developers shouldn't wait
to bring up their concerns.

61
00:04:06.414 --> 00:04:10.365
If you get a design and you look at it and
you go like, this doesn't make any sense.

62
00:04:10.365 --> 00:04:14.061
Then you should go directly to the IC or
the principal and be like, hey,

63
00:04:14.061 --> 00:04:17.954
I just don't understand what
you're trying to accomplish here.

64
00:04:17.954 --> 00:04:23.510
Yeah, but I would say it's
actually more time efficient

65
00:04:23.510 --> 00:04:28.486
to let them work separately,
because you can get in

66
00:04:28.486 --> 00:04:33.483
conversations about technology and
other stuff.

67
00:04:33.483 --> 00:04:38.730
And one of the things that I,
[LAUGH] I'm even doing more now that

68
00:04:38.730 --> 00:04:43.979
I used to deal with when I was
first dealing with that handoff was

69
00:04:43.979 --> 00:04:51.206
knowing when it's a technological
conversation versus a design conversation.

70
00:04:51.206 --> 00:04:54.919
And more often than not,
I might be talking about the philosophy of

71
00:04:54.919 --> 00:05:00.106
approaching something, but then somebody
being like, well, we can use S3 for that.

72
00:05:00.106 --> 00:05:05.412
No, don't, that's not for
this right now, right?

73
00:05:05.412 --> 00:05:08.738
Let's define the philosophy and
what we're trying to do, and

74
00:05:08.738 --> 00:05:10.882
then we can take the technical side.

75
00:05:10.882 --> 00:05:13.613
But normally it's good to
have those separated cuz

76
00:05:13.613 --> 00:05:16.402
then they can iterate individually.

77
00:05:16.402 --> 00:05:17.802
Does that answer your question?

78
00:05:17.802 --> 00:05:18.712
All right, cool, awesome.

79
00:05:20.272 --> 00:05:22.242
It is a tough handoff though,
don't get me wrong.

80
00:05:22.242 --> 00:05:27.278
The culture around it,
having good, like communication

81
00:05:27.278 --> 00:05:33.426
around it is what's really gonna
make the success of that, yeah.

82
00:05:33.426 --> 00:05:36.150
So after you develop the architecture,

83
00:05:36.150 --> 00:05:39.926
you should know how to test
your architecture, right?

84
00:05:39.926 --> 00:05:46.370
It could mean that you're using tools to
help put load onto the infrastructure or

85
00:05:46.370 --> 00:05:50.052
on the architecture so
that you can emulate.

86
00:05:50.052 --> 00:05:56.539
It could also be creating integration
tests or end-to-end tests.

87
00:05:56.539 --> 00:05:59.432
And that's something that
we do at Hippo as well.

88
00:06:00.822 --> 00:06:02.489
Whenever we deploy a service,

89
00:06:02.489 --> 00:06:07.177
we have integration tests that run on that
environment after the service is deployed.

90
00:06:07.177 --> 00:06:10.254
So that we know we have
good regression testing,

91
00:06:10.254 --> 00:06:15.030
we know that the environment is
still working the way as expected.

92
00:06:15.030 --> 00:06:17.734
When you have tons of changes like that,

93
00:06:17.734 --> 00:06:21.635
you wanna be aware of how it
could change underneath you and

94
00:06:21.635 --> 00:06:26.925
making sure that it's still meeting
the requirements of the project.

95
00:06:26.925 --> 00:06:32.026
And I'll be honest, we only started doing
integration, we are probably like, I mean,

96
00:06:32.026 --> 00:06:36.241
we're probably like a 10-year-old
company now or something like that.

97
00:06:36.241 --> 00:06:38.595
But we only started doing integration
tests like two years ago [LAUGH].

98
00:06:39.975 --> 00:06:44.273
So like a lot of the stuff I'm
talking about is still very

99
00:06:44.273 --> 00:06:46.625
uncommon in most places.

100
00:06:46.625 --> 00:06:52.600
But testing can make it so that
developers can get stuff out quicker and

101
00:06:52.600 --> 00:06:57.835
have those red lights or
those warnings show faster.

102
00:06:57.835 --> 00:07:04.419
So testing the architectures is really
important for all edge cases that you can.

103
00:07:06.837 --> 00:07:11.020
&gt;&gt; Erik: And then finally,
deploy the architecture, so at this point,

104
00:07:11.020 --> 00:07:12.687
again, let's recap.

105
00:07:12.687 --> 00:07:16.896
We started with research, right,
we started with exploration,

106
00:07:16.896 --> 00:07:21.807
we started with putting our ideas down and
putting them on paper, right?

107
00:07:21.807 --> 00:07:26.363
We then develop that system,
we then tested that system.

108
00:07:26.363 --> 00:07:31.723
At this point, you should feel comfortable
putting this in production, right?

109
00:07:31.723 --> 00:07:35.640
And if you don't, then you need to
go back, you need to go back and

110
00:07:35.640 --> 00:07:38.663
address what stages you might have missed.

111
00:07:38.663 --> 00:07:42.806
But it's really up until the point
where you feel like, okay, yes,

112
00:07:42.806 --> 00:07:46.811
I feel confident that this system
is doing what we want it to.

113
00:07:46.811 --> 00:07:51.580
We've tested it, we've addressed
all the developer concerns,

114
00:07:51.580 --> 00:07:54.361
now it's ready to go to production.

115
00:07:54.361 --> 00:07:59.429
I can't tell you on how many occurrences
I've had, where a lot of problems

116
00:07:59.429 --> 00:08:04.954
have happened just because some of those
things were considered earlier on.

117
00:08:04.954 --> 00:08:08.843
And I'm sure you guys have probably
even dealt with that too at some point,

118
00:08:08.843 --> 00:08:13.084
where it was like, why wasn't this tested,
why didn't we think of this?

119
00:08:13.084 --> 00:08:19.104
And it kind of becomes, well, maybe
the IC or the principal forgot, right?

120
00:08:19.104 --> 00:08:23.060
Or maybe a developer didn't raise their
opinions when they should have and

121
00:08:23.060 --> 00:08:25.584
now we're dealing with that problem,
right?

122
00:08:25.584 --> 00:08:28.393
So you should feel comfortable to deploy

123
00:08:28.393 --> 00:08:32.612
the architecture once you've
gone through all those phases

