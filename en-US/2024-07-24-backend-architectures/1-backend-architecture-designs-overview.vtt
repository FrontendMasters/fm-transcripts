WEBVTT

1
00:00:00.400 --> 00:00:03.026
&gt;&gt; Erik: So we're gonna get
into our first subject here,

2
00:00:03.026 --> 00:00:05.727
which is what
are Backend Architecture Designs.

3
00:00:05.727 --> 00:00:10.150
And I love this GIF, because I feel like
this is what happens a lot of times when

4
00:00:10.150 --> 00:00:14.530
people look at architecture or their
design is what am I looking at, right?

5
00:00:14.530 --> 00:00:17.509
It's a huge flowchart and
it's incredibly confusing.

6
00:00:17.509 --> 00:00:21.319
I wanna be able to help you guys again,
feel more comfortable being able to

7
00:00:21.319 --> 00:00:25.013
design these things, more comfortable
having input on these things.

8
00:00:25.013 --> 00:00:28.739
And again, be able to if this
is something new for you,

9
00:00:28.739 --> 00:00:33.518
inject yourself into, whether it be
the conversations at your work or

10
00:00:33.518 --> 00:00:37.011
have an opportunity to explore and
try new things.

11
00:00:39.211 --> 00:00:43.435
So I did this last course and I wanted
to do it again just because I thought it

12
00:00:43.435 --> 00:00:47.607
was very interesting to see how well
AI had evolved from the last course.

13
00:00:47.607 --> 00:00:51.003
And so each section has
a quote from AI that I asked.

14
00:00:51.003 --> 00:00:55.587
I basically gave it a very
simple a very simple prompt on

15
00:00:55.587 --> 00:00:59.687
trying to describe the course
in a very wise way.

16
00:00:59.687 --> 00:01:04.360
And so this quote was success
begins with understanding.

17
00:01:04.360 --> 00:01:06.585
Before we lay a single brick,

18
00:01:06.585 --> 00:01:12.281
it is crucial that we fully grasp
the blueprint for a thorough comprehension

19
00:01:12.281 --> 00:01:17.359
of the foundation leads to a structure
that stands the test of time.

20
00:01:17.359 --> 00:01:22.167
And I feel it actually did a pretty good
job with this, especially with the, before

21
00:01:22.167 --> 00:01:27.501
we lay a single brick, I've seen a lot of
people just go direct to implementation.

22
00:01:27.501 --> 00:01:30.907
And then two months later,
they turn around and they're like,

23
00:01:30.907 --> 00:01:32.621
I have no idea what I just built.

24
00:01:32.621 --> 00:01:39.290
And so I strongly urge if you're
somebody out there who wants

25
00:01:39.290 --> 00:01:45.296
to get a job in whether be architecture or
design.

26
00:01:45.296 --> 00:01:49.966
You have to you have to be
comfortable with building these

27
00:01:49.966 --> 00:01:52.896
things out on paper first, right?

28
00:01:52.896 --> 00:01:55.656
You wouldn't build a house
without a blueprint.

29
00:01:55.656 --> 00:02:00.161
I mean, you could try, but probably
wouldn't stand the test of time, for sure,

30
00:02:00.161 --> 00:02:03.253
and so that's a lot of what
this first section is about.

31
00:02:04.960 --> 00:02:08.290
&gt;&gt; Erik: So let's talk about the
definition of what backend architecture

32
00:02:08.290 --> 00:02:09.022
designs are.

33
00:02:09.022 --> 00:02:14.063
So the definition that we have is
the process of defining the modularity,

34
00:02:14.063 --> 00:02:19.662
interfaces and data flow for a system
to satisfy specified requirements.

35
00:02:19.662 --> 00:02:23.140
So Let's talk about the three
things that it mentions here.

36
00:02:23.140 --> 00:02:25.160
First, modularity, right?

37
00:02:26.160 --> 00:02:28.480
Modularity can mean a lot of things.

38
00:02:28.480 --> 00:02:33.637
It doesn't necessarily have to mean
that you have a highly extensible,

39
00:02:33.637 --> 00:02:36.190
highly distributed system.

40
00:02:36.190 --> 00:02:39.980
It just means that you have to break down
these components in the way that works

41
00:02:39.980 --> 00:02:44.122
best for the problem that you're trying to
solve, and sometimes it means that it's

42
00:02:44.122 --> 00:02:47.880
just one module,
sometimes it means that it's many modules.

43
00:02:47.880 --> 00:02:49.512
The modularity is up to you,

44
00:02:49.512 --> 00:02:52.851
it doesn't mean that you have
to be heavily distributed.

45
00:02:52.851 --> 00:02:57.517
And as we'll talk about later on in the
course, decisions even around modularity

46
00:02:57.517 --> 00:03:01.170
can impact developer productivity
as well as understanding and

47
00:03:01.170 --> 00:03:03.144
complexity and things like that.

48
00:03:04.154 --> 00:03:08.213
Interfaces, so
interfaces is really the in and

49
00:03:08.213 --> 00:03:12.484
out of the system or
of the architecture, right?

50
00:03:12.484 --> 00:03:16.814
How do these systems or
back ends communicate with each other?

51
00:03:16.814 --> 00:03:20.719
Are you gonna standardize the interface
that they're using, right?

52
00:03:20.719 --> 00:03:24.113
These are really good to
consider because you don't wanna

53
00:03:24.113 --> 00:03:26.606
build one system that maybe uses GRPC, but

54
00:03:26.606 --> 00:03:31.209
then another system that uses rest unless
you have a reason for that, right?

55
00:03:31.209 --> 00:03:35.119
It's very common,
especially in backend design or backend

56
00:03:35.119 --> 00:03:40.025
systems where there will be a similar
interface across all of these system so

57
00:03:40.025 --> 00:03:45.399
that you can handle things like error
handling properly or things like that.

58
00:03:45.399 --> 00:03:49.287
And then the last one is data flow,
which modularity and

59
00:03:49.287 --> 00:03:52.359
interfaces impact your data flow, right?

60
00:03:52.359 --> 00:03:57.423
Understanding how information routes
through your system, how many jumps

61
00:03:57.423 --> 00:04:02.421
does it have to take is the interfaces
between the two performant, right?

62
00:04:02.421 --> 00:04:05.530
Things like that will impact
the data flow of that system and

63
00:04:05.530 --> 00:04:07.961
basically how it resolves through it.

64
00:04:07.961 --> 00:04:10.491
So let's talk about the importance
of architecture design.

65
00:04:10.491 --> 00:04:14.851
Because, as I said, it's one thing I
wanna be able to empower you guys, and

66
00:04:14.851 --> 00:04:19.350
I talk about this in the introduction for
developer or DevOps for developers,

67
00:04:19.350 --> 00:04:20.498
course.

68
00:04:20.498 --> 00:04:25.475
You should feel comfortable walking
into a room full of engineers and say,

69
00:04:25.475 --> 00:04:30.888
wait, before we implement anything,
we need to think this through, right?

70
00:04:30.888 --> 00:04:34.391
And so it's very important to
have a structured approach to

71
00:04:34.391 --> 00:04:36.338
solving complex problems.

72
00:04:36.338 --> 00:04:38.493
And that's what these
architecture designs do.

73
00:04:38.493 --> 00:04:44.231
Again, going back to the house example,
a house is a very complicated building or

74
00:04:44.231 --> 00:04:49.221
a very complicated structure to create
when you really break it down and

75
00:04:49.221 --> 00:04:50.998
think about it.

76
00:04:50.998 --> 00:04:53.718
Right, you've got the foundation
that has to be laid.

77
00:04:53.718 --> 00:04:56.758
You've got the actual travel
paths through the home.

78
00:04:56.758 --> 00:04:58.798
You've got electrical.

79
00:04:58.798 --> 00:05:00.499
&gt;&gt; Speaker 1: You've got plumbing, right?

80
00:05:00.499 --> 00:05:02.239
&gt;&gt; Erik: You've got roofing.

81
00:05:02.239 --> 00:05:04.609
There's a lot of layers to that.

82
00:05:04.609 --> 00:05:06.292
And we have, again,

83
00:05:06.292 --> 00:05:11.319
added these complexities to
make our lives better, right?

84
00:05:11.319 --> 00:05:16.395
And so
having an architecture design around that

85
00:05:16.395 --> 00:05:23.226
helps making a better structure
that lasts the test of time.

86
00:05:23.226 --> 00:05:27.232
Architecture designs facilitate
communication among team members by

87
00:05:27.232 --> 00:05:30.386
providing a common language and reference.

88
00:05:30.386 --> 00:05:35.316
So you're not just making these for
building.

89
00:05:35.316 --> 00:05:37.994
These architecture designs
are also there to help

90
00:05:37.994 --> 00:05:42.150
facilitate the conversation
between the teams at your company.

91
00:05:42.150 --> 00:05:47.350
If you want to be able to sell an idea or
a specific design that you want

92
00:05:47.350 --> 00:05:52.280
to implement, it's really important
to be able to show that and

93
00:05:52.280 --> 00:05:56.980
facilitate that conversation
easily between teams.

94
00:05:56.980 --> 00:06:02.509
And so architecture designs can help with
the confidence between teams that may

95
00:06:02.509 --> 00:06:08.769
not fully understand the problem or may
also need help understanding the problem.

96
00:06:08.769 --> 00:06:13.393
It can also provide a common language
in the sense of not like a programming

97
00:06:13.393 --> 00:06:17.879
language, but saying this is how we
build this type of system, right?

98
00:06:17.879 --> 00:06:21.649
This is how we do this, so that in
the future, if a developer need something,

99
00:06:21.649 --> 00:06:24.326
they have that off-the-shelf solution.

100
00:06:24.326 --> 00:06:28.548
And I talk about this in Intro to DevOps,
as well as in the ECI or

101
00:06:28.548 --> 00:06:33.831
Enterprise Cloud Infrastructure course,
which is when you have systems and

102
00:06:33.831 --> 00:06:37.186
designs already in place,
you can move faster.

103
00:06:38.346 --> 00:06:43.638
If you already have solved for the problem
of how you process asynchronous messages,

104
00:06:43.638 --> 00:06:48.746
right, with maybe events, buses,
or workers and queues, right?

105
00:06:48.746 --> 00:06:51.076
Then you don't have to
think about that again.

106
00:06:51.076 --> 00:06:54.981
That's a system that has already
solved a problem very well, and

107
00:06:54.981 --> 00:07:00.136
that makes it easier for teams to move
quicker, especially going back to DevOps.

108
00:07:00.136 --> 00:07:03.640
It'll help you build those systems
as well as automate those systems?

109
00:07:03.640 --> 00:07:04.270
Yep?

110
00:07:04.270 --> 00:07:07.386
&gt;&gt; Speaker 1: Assuming you're
gonna get into this later, but

111
00:07:07.386 --> 00:07:11.340
do you have any tools for
drawing up designs that you'd like?

112
00:07:11.340 --> 00:07:17.140
&gt;&gt; Erik: Yeah, so I'll be showing a few
of the designs I really use lucid charts.

113
00:07:17.140 --> 00:07:18.960
Lucid is probably my favorite.

114
00:07:18.960 --> 00:07:23.999
I've been using Excalidraw more and
more, but lucid has.

115
00:07:23.999 --> 00:07:29.103
Okay, so [LAUGH] the thing to note
about designs is I've had principal

116
00:07:29.103 --> 00:07:33.943
engineers come into meetings with
scribbles on a piece of paper,

117
00:07:33.943 --> 00:07:38.872
and then just screenshot that and
put it in a Confluence document.

118
00:07:38.872 --> 00:07:41.228
[LAUGH] And those are terrible..

119
00:07:41.228 --> 00:07:46.196
I'm sorry but I have to say it,
I understand that back in the 90s we

120
00:07:46.196 --> 00:07:51.505
just had whiteboards but
we don't really need to do that anymore.

121
00:07:51.505 --> 00:07:58.245
And I do think that it it helps to have
your design in a good layout format,

122
00:07:58.245 --> 00:08:04.124
easy to read and
help identify each different component.

123
00:08:04.124 --> 00:08:06.094
Lucid does a really great job at that.

124
00:08:06.094 --> 00:08:10.295
You can pick if you're using a container,
you can pick if you're using a service or

125
00:08:10.295 --> 00:08:11.334
a subnet.

126
00:08:11.334 --> 00:08:15.205
There's a lot of really great ways
of kind of architecting the design

127
00:08:15.205 --> 00:08:20.274
to your specifications while being able
to present it in a nice visual format.

128
00:08:20.274 --> 00:08:24.232
So I would normally lean towards
the tools that help with that.

129
00:08:24.232 --> 00:08:26.302
It might take a little bit more, but

130
00:08:26.302 --> 00:08:31.132
as you'll see in some of the slides later,
it still allows anyone to pick this up and

131
00:08:31.132 --> 00:08:34.662
eventually understand what
you're trying to accomplish.

132
00:08:37.702 --> 00:08:41.816
And the last real importance here
is they can improve efficiency and

133
00:08:41.816 --> 00:08:46.015
productivity by reducing redundancy and
facilitating code reuse.

134
00:08:46.015 --> 00:08:51.135
The point here really is is after you've
designed something you've put it to paper,

135
00:08:51.135 --> 00:08:51.641
right?

136
00:08:51.641 --> 00:08:53.923
You might look back at it and say, well,

137
00:08:53.923 --> 00:08:59.041
this this service does the same thing as
this service and they share some code.

138
00:08:59.041 --> 00:09:03.756
Maybe we could refactor this and so that
all the code exists in one place, right?

139
00:09:03.756 --> 00:09:08.802
And then every service sends their request
to this specific service, which then makes

140
00:09:08.802 --> 00:09:13.656
the decoupling easier, the management
of that specific component easier.

141
00:09:13.656 --> 00:09:18.641
And again, going back to
the house example, it's really,

142
00:09:18.641 --> 00:09:24.535
really hard to have a whole
Architecture in your head at all times.

143
00:09:24.535 --> 00:09:28.418
I know that there are some people
who say that they can do it, but

144
00:09:28.418 --> 00:09:32.672
then when you're talking about multiple architectures
across multiple systems,

145
00:09:32.672 --> 00:09:36.925
I can guarantee you that companies
like Amazon, Netflix, Google,

146
00:09:36.925 --> 00:09:41.354
they've got tons and tons of charts,
tons and tons of documentation.

147
00:09:41.354 --> 00:09:45.462
Because it's a lot of extra energy
to just keep that in your head,

148
00:09:45.462 --> 00:09:48.462
keep trying to reiterate it to people,
right?

149
00:09:48.462 --> 00:09:52.343
That's also kind of tribal knowledge,
which becomes very challenging when you

150
00:09:52.343 --> 00:09:54.902
wanna iterate on those
things in the future.

151
00:09:54.902 --> 00:09:57.390
And so having these designs available,

152
00:09:57.390 --> 00:10:01.706
just being able to say go look at it
can also help again look at things for

153
00:10:01.706 --> 00:10:06.892
improvements, as well as removing
redundancy and things like that.

154
00:10:06.892 --> 00:10:11.687
&gt;&gt; Speaker 2: Do you have any opinions on
how to keep things like this up to date?

155
00:10:11.687 --> 00:10:12.431
I mean.
&gt;&gt; Erik: Yeah.

156
00:10:12.431 --> 00:10:16.253
&gt;&gt; Speaker 2: I think a lot of places
have designed documents that are like,

157
00:10:16.253 --> 00:10:20.090
I don't know if this is remotely
trustworthy and relevant still.

158
00:10:20.090 --> 00:10:23.022
&gt;&gt; Erik: Yeah,
that's a super fair question.

159
00:10:23.022 --> 00:10:27.720
And what's funny is they do talk about
that a bit in the DevOps courses,

160
00:10:27.720 --> 00:10:31.022
because that was really my job for
a while as well.

161
00:10:33.386 --> 00:10:36.742
&gt;&gt; Erik: Listen,
right now I work at a very large company.

162
00:10:36.742 --> 00:10:40.712
We have over 100 developers,
we've got probably 15 different teams.

163
00:10:42.323 --> 00:10:44.023
It's got to be your culture.

164
00:10:44.023 --> 00:10:49.170
It's really got to be your culture,
the engineering managers need to

165
00:10:49.170 --> 00:10:55.183
be able to appreciate and understand
why these things need to be updated.

166
00:10:55.183 --> 00:10:58.223
They need to be able to promote that time,
right?

167
00:10:58.223 --> 00:11:01.318
I'm pretty sure all of us here, I'm not
even gonna ask you to raise your hands.

168
00:11:01.318 --> 00:11:03.402
Because I'm sure all of
us here have experienced,

169
00:11:03.402 --> 00:11:04.908
we don't need to have time for docs.

170
00:11:04.908 --> 00:11:06.388
Let's just build, right?

171
00:11:06.388 --> 00:11:08.772
That's a terrible, terrible culture.

172
00:11:08.772 --> 00:11:13.707
Pretty much almost every company I've
worked at, I've dealt with that.

173
00:11:13.707 --> 00:11:20.038
And I am a very much
a proponent of fixing that.

174
00:11:20.038 --> 00:11:24.829
And so I think part of that is being
vocal, bringing it to your managers and

175
00:11:24.829 --> 00:11:29.462
being like, hey, I have no confidence
in this, and what am I to do when I

176
00:11:29.462 --> 00:11:34.062
don't have any confidence in
the documentation that I have, right?

177
00:11:34.062 --> 00:11:38.122
And actually, I will say, how many of you
at your companies you're at today have

178
00:11:38.122 --> 00:11:40.826
confidence in the documentation
that you guys have?

179
00:11:40.826 --> 00:11:44.523
Just by a raise of hands
&gt;&gt; Erik: cool so

180
00:11:44.523 --> 00:11:47.135
a little bit yeah, okay, yeah.

181
00:11:47.135 --> 00:11:49.401
So I know you guys on stream can't see but

182
00:11:49.401 --> 00:11:52.335
basically it was like one and
a half people.

183
00:11:52.335 --> 00:11:54.045
And that's really common.

184
00:11:54.045 --> 00:11:55.495
It's really common.

185
00:11:55.495 --> 00:12:00.508
And that should really kind of show
how often companies deal with this and

186
00:12:00.508 --> 00:12:03.638
how little they actually prioritize it.

187
00:12:03.638 --> 00:12:08.398
So I do think that even the culture of
the developer, while you're implementing

188
00:12:08.398 --> 00:12:13.158
the design or going through it, make sure
you spend time going back, looking for

189
00:12:13.158 --> 00:12:17.728
any other documentation, outdating it,
marking it, deleting it.

190
00:12:17.728 --> 00:12:22.258
And you might even find other
situations where the code or the sorry,

191
00:12:22.258 --> 00:12:27.390
not the code, the documentation and
how you're doing it is not good.

192
00:12:27.390 --> 00:12:31.090
You might need to find newer ways of how
to share these things, whether it be

193
00:12:31.090 --> 00:12:35.000
switching to something like, I don't
like Confluence, I hate Confluence.

194
00:12:35.000 --> 00:12:39.189
It's one of the worst platforms
on the face of the planet,

195
00:12:39.189 --> 00:12:43.759
and every company I've ever
worked at uses it, and I hate it.

196
00:12:43.759 --> 00:12:48.430
I really do not like Confluence at all and
I actually had a conversation the other

197
00:12:48.430 --> 00:12:51.094
day with my engineering
manager about this.

198
00:12:51.094 --> 00:12:55.789
Where I was like listen dude, we have the
exact same problem we don't have a lot of

199
00:12:55.789 --> 00:13:00.641
confidence in our documentation but we
have thousands of pages of documentation.

200
00:13:00.641 --> 00:13:04.809
And so yeah, that it's really important
to have up to date documents,

201
00:13:04.809 --> 00:13:08.698
up to date specs and design so
that you can build that confidence and

202
00:13:08.698 --> 00:13:10.304
more people want to use it.

203
00:13:10.304 --> 00:13:14.892
Otherwise, you'll get to a point where
nobody ends up updating anything, and

204
00:13:14.892 --> 00:13:16.544
you don't wanna get there.

205
00:13:18.304 --> 00:13:20.654
We have one more important.

206
00:13:20.654 --> 00:13:24.542
They also play a key role in
ensuring the final product, right?

207
00:13:24.542 --> 00:13:29.020
So really, the big reason why you make
a design is to be able to say, okay,

208
00:13:29.020 --> 00:13:33.212
I've solved the problem that
we're trying to solve, right?

209
00:13:33.212 --> 00:13:36.862
And you can show that through the design.

210
00:13:36.862 --> 00:13:41.777
And even this stage of the design
can mean and show whether or

211
00:13:41.777 --> 00:13:46.567
not it's overly complex if
it's too simple, right?

212
00:13:46.567 --> 00:13:50.974
Once you are able to look at it at a high
level and kind of share it with other

213
00:13:50.974 --> 00:13:54.951
people and other teams,
you might find out that this is the design

214
00:13:54.951 --> 00:13:59.725
system that you're approaching may not
even work or may not be what the company

215
00:13:59.725 --> 00:14:04.392
needs just because of different business
objectives and things like that.

216
00:14:04.392 --> 00:14:10.145
So it definitely plays a key role in
before even spending developer money,

217
00:14:10.145 --> 00:14:15.805
which is really what this is, guys,
you can save your developer money and

218
00:14:15.805 --> 00:14:19.855
time a lot at a company by
just writing it down first.

219
00:14:19.855 --> 00:14:24.657
And spending a couple of hours documenting
that, building out that design, and

220
00:14:24.657 --> 00:14:29.035
thinking it through before you
actually start saying, okay, now team,

221
00:14:29.035 --> 00:14:29.899
go work on it.

222
00:14:29.899 --> 00:14:34.059
You do not wanna build something
that you don't have confidence in,

223
00:14:34.059 --> 00:14:36.793
otherwise you are wasting company dollars.

224
00:14:36.793 --> 00:14:39.823
So sgain, be aware of that.

225
00:14:39.823 --> 00:14:43.138
You really wanna make sure that
you're meeting the user needs and

226
00:14:43.138 --> 00:14:44.352
business objectives.

