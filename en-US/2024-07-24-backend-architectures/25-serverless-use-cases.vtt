WEBVTT

1
00:00:00.110 --> 00:00:02.709
&gt;&gt; Erik Reinert: So let's talk
about the use cases for serverless,

2
00:00:02.709 --> 00:00:04.290
real-time file processing.

3
00:00:04.290 --> 00:00:06.296
So as soon as the file is uploaded in S3,

4
00:00:06.296 --> 00:00:09.060
AWS Lambda can trigger
a function to process it.

5
00:00:09.060 --> 00:00:13.249
This is really awesome for being able to
do things like post processing files,

6
00:00:13.249 --> 00:00:18.190
making changes to files, checking files,
validation, stuff like that.

7
00:00:18.190 --> 00:00:21.182
It allows you to say, okay,
we'll hear from my one little function,

8
00:00:21.182 --> 00:00:24.174
I don't have to create a whole service,
I don't have to figure out how

9
00:00:24.174 --> 00:00:27.875
that service listens for changes,
it's just integrated into the platform.

10
00:00:27.875 --> 00:00:30.412
I can just wait for
Amazon to say, file updated, and

11
00:00:30.412 --> 00:00:34.735
then I can immediately hop in there and do
the thing that I need to with the Lambda.

12
00:00:34.735 --> 00:00:38.184
So real-time file processing is
really powerful with Lambdas and

13
00:00:38.184 --> 00:00:40.105
functions as a service.

14
00:00:40.105 --> 00:00:44.144
Mostly because a lot of these
cloud providers like Amazon,

15
00:00:44.144 --> 00:00:49.473
like Google, have integrations with
these services in other places.

16
00:00:49.473 --> 00:00:54.461
And this can even be queues, distributed
queues can have Lambdas hooked up to

17
00:00:54.461 --> 00:00:58.849
them so that you can have a queue,
drop a payload to a Lambda worker.

18
00:00:58.849 --> 00:01:02.662
And then you only process that one thing
and that's when we start talking about

19
00:01:02.662 --> 00:01:05.222
like how do things communicate
between each other.

20
00:01:05.222 --> 00:01:08.765
That's how Lambdas could potentially
communicate with each other by using

21
00:01:08.765 --> 00:01:10.101
queues and stuff like that.

22
00:01:11.911 --> 00:01:14.184
Real-time stream processing as well, so

23
00:01:14.184 --> 00:01:18.031
perform real time analytics on
data streams using Kinesis.

24
00:01:18.031 --> 00:01:21.767
Things like Kinesis allow you to do
real-time stream processing, and so

25
00:01:21.767 --> 00:01:23.875
using functions as
a service can make it so

26
00:01:23.875 --> 00:01:28.618
that you can handle this in real-time and
then this function just disappears, right?

27
00:01:28.618 --> 00:01:30.178
And this happens per request.

28
00:01:31.228 --> 00:01:35.158
And this can be any time of
real-time stream processing.

29
00:01:35.158 --> 00:01:41.037
This can be video, this can be audio, this
can be text, this can be machine learning.

30
00:01:41.037 --> 00:01:44.447
It really just depends on what you
wanna shove in that function and

31
00:01:44.447 --> 00:01:47.122
let it run for
the period it does before it's done.

32
00:01:47.122 --> 00:01:51.515
So real-time stream processing is really
nice with functions as a service as well.

33
00:01:52.555 --> 00:01:55.455
Who here knows what ETL is?

34
00:01:56.705 --> 00:01:58.515
&gt;&gt; Speaker 2: Extract, transform, load.

35
00:01:58.515 --> 00:01:59.675
&gt;&gt; Erik Reinert: Yep, exactly, yeah.

36
00:01:59.675 --> 00:02:05.062
So ETL is really around like data
manipulation and things like that.

37
00:02:05.062 --> 00:02:07.922
It's not as common as it used to be.

38
00:02:07.922 --> 00:02:12.280
But there are companies like my company,
for example, that still deal with ETL

39
00:02:12.280 --> 00:02:16.352
especially with datasets and
being able to process data properly.

40
00:02:16.352 --> 00:02:20.182
You can extract that data, you can
transform it and then you can reload it.

41
00:02:20.182 --> 00:02:23.170
So for example,
to perform an ETL on demand,

42
00:02:23.170 --> 00:02:28.048
when a new file is uploaded to S3,
AWS can trigger to process that data and

43
00:02:28.048 --> 00:02:32.777
then load it into a database,
that's what an ETL is effectively.

44
00:02:32.777 --> 00:02:36.665
And so, think about every time a piece
of data is loaded onto a S3 bucket,

45
00:02:36.665 --> 00:02:39.895
having to have a service that's
handling that all the time.

46
00:02:39.895 --> 00:02:42.820
Or just have a Lambda that
triggers literally every time and

47
00:02:42.820 --> 00:02:44.760
can scale to the end whenever you need.

48
00:02:44.760 --> 00:02:45.980
The management,

49
00:02:45.980 --> 00:02:51.115
the cost effectiveness are just way
easier than hooking up a service to it.

50
00:02:53.342 --> 00:02:57.311
&gt;&gt; Erik Reinert: Finally websites, as I
mentioned before with Frontend Masters and

51
00:02:57.311 --> 00:02:59.478
a bunch of other websites like Cork.

52
00:02:59.478 --> 00:03:04.308
Websites that are purely static,
HTML,CSS, JavaScript can be served from

53
00:03:04.308 --> 00:03:08.929
S3 directly or other cloud providers,
serverless solutions, right?

54
00:03:08.929 --> 00:03:13.416
And so again, when you're talking about
the costs of running a frontend for

55
00:03:13.416 --> 00:03:16.922
your company,
serverless does become very interesting,

56
00:03:16.922 --> 00:03:20.027
especially if you already
fit these requirements.

57
00:03:20.027 --> 00:03:24.172
If you're basically taking a flat file,
shoving it in a container and

58
00:03:24.172 --> 00:03:27.823
putting Nginx in front of it,
you should move to serverless,

59
00:03:27.823 --> 00:03:30.937
because you're already two
steps on the way there.

60
00:03:30.937 --> 00:03:35.515
The only reason why you have a container
there is just hosting it and

61
00:03:35.515 --> 00:03:40.684
Nginx can process, and serverless can
handle that for you really easily.

62
00:03:40.684 --> 00:03:45.547
As a matter of fact, we do some of this at
HIPAA today and I'm already working with

63
00:03:45.547 --> 00:03:49.998
teams to try and get us out of that so
that we don't have to pay those costs.

64
00:03:49.998 --> 00:03:53.718
We might have circumstances where
teams wanna use, again, Nextjs and

65
00:03:53.718 --> 00:03:58.026
other kind of server side rendering,
things like that, HTMX or whatever.

66
00:03:58.026 --> 00:04:01.888
But if you're purely static, and
you're running that in a container,

67
00:04:01.888 --> 00:04:04.019
you should move to serverless.

68
00:04:04.019 --> 00:04:06.577
There should really be no
reason why you couldn't,

69
00:04:06.577 --> 00:04:09.493
unless you've got other requirements or
stuff like that.

