WEBVTT

1
00:00:00.550 --> 00:00:05.480
Anyone that has taken any of my courses
before knows that like I am a front end

2
00:00:05.480 --> 00:00:09.370
infrastructure nerd,
like I just love build processes.

3
00:00:09.370 --> 00:00:12.830
I like fighting Webpack,
I like TypeScript.

4
00:00:12.830 --> 00:00:16.800
I like parcel like I like all
these tools that make code work,

5
00:00:16.800 --> 00:00:19.810
make code better and it's like it's
my favorite part of setting it up.

6
00:00:19.810 --> 00:00:23.340
So whenever I teach these classes I
get really excited to teach these.

7
00:00:23.340 --> 00:00:27.230
So I spent half the damn class
just setting up all these tools.

8
00:00:27.230 --> 00:00:30.240
And so if you don't like that,
I don't care because I love it and

9
00:00:30.240 --> 00:00:31.910
you're gonna sit through it with me.

10
00:00:31.910 --> 00:00:36.400
So, I mean, I care like this much like
I don't like making you suffer but

11
00:00:36.400 --> 00:00:37.990
I also like making me happy.

12
00:00:37.990 --> 00:00:41.550
So if you suffer a little bit to make me
feel a lot happier, so I'm gonna do it.

13
00:00:41.550 --> 00:00:42.050
It's okay.

14
00:00:44.084 --> 00:00:45.250
Got them and I'm a jerk.

15
00:00:45.250 --> 00:00:46.040
That's fine, it's okay.

16
00:00:46.040 --> 00:00:52.570
So we're gonna be building this project.

17
00:00:52.570 --> 00:00:55.160
And we could put everything in one file,
right?

18
00:00:55.160 --> 00:00:55.730
That would work.

19
00:00:57.920 --> 00:01:00.850
So like all the JavaScript and everything
like that could go in one file and

20
00:01:00.850 --> 00:01:02.980
we could load one file in our HTML.

21
00:01:02.980 --> 00:01:03.990
That's not ideal.

22
00:01:03.990 --> 00:01:08.150
What would be better is if we could have
multiple files that were kind of smaller

23
00:01:08.150 --> 00:01:09.470
and more modular.

24
00:01:09.470 --> 00:01:11.538
That would be better organized.

25
00:01:11.538 --> 00:01:12.810
So we're gonna do that.

26
00:01:12.810 --> 00:01:17.310
But the problem with that is up until
very, very recently, there was no

27
00:01:17.310 --> 00:01:21.810
strategy that the browser could
employ to have multiple files loaded,

28
00:01:21.810 --> 00:01:25.727
other than just literally listing
all the files in your HTML.

29
00:01:25.727 --> 00:01:28.810
And that is tedious, it's brittle and
it's just a bad idea.

30
00:01:28.810 --> 00:01:31.530
I've done it before professionally,
I do not recommend it.

31
00:01:32.850 --> 00:01:37.950
So, what I'm going to recommend is
we're gonna have a build process to

32
00:01:37.950 --> 00:01:39.980
make this a bit easier and to work better.

33
00:01:41.120 --> 00:01:46.100
Until recently, browsers didn't have
the ability to load ES modules natively.

34
00:01:46.100 --> 00:01:49.300
They actually did get that
ability fairly recently.

35
00:01:49.300 --> 00:01:55.320
But we won't be able to reliably
ship code to our end users for

36
00:01:55.320 --> 00:02:00.820
five or six years doing that and
the reason is there's

37
00:02:00.820 --> 00:02:03.580
a lot of people out there that just have
old browsers that never update them.

38
00:02:03.580 --> 00:02:07.240
And you don't want to exclude them from
your website just because you want to use

39
00:02:07.240 --> 00:02:08.780
new shiny tech.

40
00:02:08.780 --> 00:02:13.590
That's just something that's never sat
well with me and it's not a good idea.

41
00:02:13.590 --> 00:02:16.060
There's no reason,
if someone wants to go to your site, and

42
00:02:16.060 --> 00:02:19.320
the only reason they're not able to get
your product is because you wanted to

43
00:02:19.320 --> 00:02:23.110
use the new south VS modules or you wanna
use generators or something like that.

44
00:02:23.110 --> 00:02:24.600
You're a jerk [LAUGH].

45
00:02:25.960 --> 00:02:27.240
Like me, you're a jerk.

46
00:02:29.030 --> 00:02:32.910
So, the nice thing about using a bundler
is we can use those new features and

47
00:02:32.910 --> 00:02:35.030
it will back transpile them.

48
00:02:35.030 --> 00:02:40.900
So that we can use something really new,
let's say like nilesh operators or

49
00:02:40.900 --> 00:02:44.490
coalescence, or
some of these other newer features.

50
00:02:46.530 --> 00:02:49.410
And our tools will transform that into

51
00:02:49.410 --> 00:02:51.630
old JavaScript that all
browsers can understand.

52
00:02:53.680 --> 00:02:55.940
So, we're gonna use a bundler.

53
00:02:55.940 --> 00:02:58.720
That's I've been talking a lot about
why we're gonna use a bundler.

54
00:02:58.720 --> 00:03:00.680
We're going to use a bundler.

55
00:03:00.680 --> 00:03:03.070
There's a lot of really
good bundlers out there.

56
00:03:03.070 --> 00:03:05.220
The most common one that you'll
hear everyone talk about,

57
00:03:05.220 --> 00:03:06.240
there's a course on it.

58
00:03:06.240 --> 00:03:10.035
I work with the one of the core
maintainer, Sean Larkin is webpack.

59
00:03:10.035 --> 00:03:11.430
Webpack is a fantastic tool.

60
00:03:11.430 --> 00:03:12.900
It's very reliable.

61
00:03:12.900 --> 00:03:14.930
It's very configurable, it's robust.

62
00:03:17.050 --> 00:03:19.970
For a lot of enterprise projects,
I would recommend you use webpack

63
00:03:19.970 --> 00:03:22.610
just because there's such
a rich ecosystem around it.

64
00:03:22.610 --> 00:03:25.510
And the maintainers of it take
really good care to make sure that

65
00:03:25.510 --> 00:03:26.140
it's a good product.

66
00:03:26.140 --> 00:03:32.040
The thing that I'll say about webpack
is it can be difficult to set up.

67
00:03:32.040 --> 00:03:36.770
And I think someone out, there's probably
people watching right now and saying that

68
00:03:36.770 --> 00:03:40.570
I'm understating it, which is true, it can
be very difficult to set up sometimes.

69
00:03:41.670 --> 00:03:44.790
So the tool that I want you to use
right now is one called parcel and

70
00:03:44.790 --> 00:03:46.650
I've used this in my other classes before.

71
00:03:46.650 --> 00:03:48.410
I'm quite fond of it.

72
00:03:48.410 --> 00:03:51.160
Parcel is a very smart tool.

73
00:03:51.160 --> 00:03:53.940
That like you just point
it at an entry point and

74
00:03:53.940 --> 00:03:58.440
it just figures out your graph for you,
all your various different files, and

75
00:03:58.440 --> 00:03:59.620
it figures out all the transformations.

76
00:03:59.620 --> 00:04:01.580
So you actually don't configure it at all.

77
00:04:01.580 --> 00:04:03.470
It just works out of the box.

78
00:04:03.470 --> 00:04:05.930
There's other really good ones,
browsifies, old, but

79
00:04:05.930 --> 00:04:07.410
it's still works really well.

80
00:04:07.410 --> 00:04:09.530
It's really stable, so
it's another good choice.

81
00:04:09.530 --> 00:04:13.220
There's one called Snowpack,
Roll-up and Microbundle,

82
00:04:13.220 --> 00:04:15.640
those are all really
good bundlers as well.

83
00:04:15.640 --> 00:04:17.610
But we're gonna use parcel today.

84
00:04:17.610 --> 00:04:18.760
So I want you to come to your project,

85
00:04:18.760 --> 00:04:23.250
make sure you're in the,
wherever your Foxgame is, right?

86
00:04:23.250 --> 00:04:28.290
So if I hit LS here you can see that
I have package.json right there.

87
00:04:28.290 --> 00:04:31.430
I'm gonna say npm install.

88
00:04:32.820 --> 00:04:35.290
Now, I can type npm
install every single time.

89
00:04:35.290 --> 00:04:40.650
I'm lazy, so I just type npmi,
it's the same thing, it's an alias.

90
00:04:40.650 --> 00:04:45.470
And then I put dash capital D for
this is a developer tool.

91
00:04:45.470 --> 00:04:48.460
So your npm dependencies
have tools that you need for

92
00:04:48.460 --> 00:04:51.820
production, like react and
things that actually go into your code.

93
00:04:51.820 --> 00:04:54.780
And then you have tools that are used
to build your project that don't go

94
00:04:54.780 --> 00:04:55.640
out to production, right?

95
00:04:55.640 --> 00:04:58.450
Like I have parcel on my
computer to build it, but

96
00:04:58.450 --> 00:05:01.270
I don't ship parcel to my web
servers at the end of this.

97
00:05:01.270 --> 00:05:03.040
So that's what the dash capital D is for.

98
00:05:05.100 --> 00:05:08.880
And I'm gonna put parcel-bundler,
like that.

99
00:05:10.420 --> 00:05:14.715
So I'm going to npm install in my
developer tools, parcel-bundler.

100
00:05:17.780 --> 00:05:20.840
Okay, then I hit enter and this is
gonna show a bunch of stuff like this.

101
00:05:22.310 --> 00:05:25.610
You should, if you installed node already,
you should already have npm.

102
00:05:25.610 --> 00:05:30.880
Npm doesn't stand for node package manager
but it's the node package manager.

103
00:05:30.880 --> 00:05:33.580
So I don't actually know
what it stands for.

104
00:05:33.580 --> 00:05:36.080
Now that Microsoft has bought
npm maybe I can figure it out.

105
00:05:36.080 --> 00:05:38.710
Maybe there's like some secret
document somewhere that tells me what

106
00:05:38.710 --> 00:05:39.400
npm stands for.

107
00:05:39.400 --> 00:05:44.270
And if I find out I will tell you,
maybe not because I like my job, but

108
00:05:44.270 --> 00:05:45.730
I will tell you that I know what it is.

109
00:05:48.460 --> 00:05:52.220
Cool, so now we have npm installed.

110
00:05:53.630 --> 00:05:56.810
If you see some sort of npm not found,

111
00:05:56.810 --> 00:06:00.000
make sure you that node is definitely
installed, maybe restart your computer.

112
00:06:00.000 --> 00:06:01.840
Those are some things that you can try.

113
00:06:01.840 --> 00:06:06.140
Okay, so
we need to give parcel somewhere to start.

114
00:06:06.140 --> 00:06:10.194
So we're gonna go into,
I'm gonna go back to VS code.

115
00:06:10.194 --> 00:06:12.500
So let's look at VS code here.

116
00:06:12.500 --> 00:06:16.530
So first thing you're gonna notice,
if I go to my package JSON,

117
00:06:16.530 --> 00:06:19.560
I have a Dev dependency,
which is what the dash capital D is.

118
00:06:19.560 --> 00:06:21.200
Notice that it's in Dev dependencies,

119
00:06:21.200 --> 00:06:24.380
there's another one called dependencies
which we don't have any of yet.

120
00:06:25.520 --> 00:06:28.540
And it tells you that when when
you bring down this project,

121
00:06:28.540 --> 00:06:30.280
it needs parcel bundler, right?

122
00:06:30.280 --> 00:06:32.030
And so this is gonna pin a version here.

123
00:06:33.800 --> 00:06:37.240
If you have problems in
the future watching this course

124
00:06:37.240 --> 00:06:39.840
with parcel just make sure that you're
probably on the same version of me.

125
00:06:39.840 --> 00:06:45.717
So you can do npm install-capital D
parcel-bundler at with this character,

126
00:06:45.717 --> 00:06:47.053
1.12.4 and

127
00:06:47.053 --> 00:06:52.940
that might fix some of your problems
because these things update frequently.

128
00:06:54.258 --> 00:06:59.380
Okay, so parcel-bundler,
that's what we got there.

129
00:07:00.510 --> 00:07:06.160
We now have a package lock.JSON,
which you can see here is enormously long.

130
00:07:06.160 --> 00:07:12.706
If we look down here it is
already 7000 lines, 7500 lines.

131
00:07:12.706 --> 00:07:15.532
So this is a file that you do
commit to your get repo and

132
00:07:15.532 --> 00:07:18.020
it locks down all of your versions.

133
00:07:18.020 --> 00:07:20.940
So that in the future,
if someone comes in reinstalls everything,

134
00:07:20.940 --> 00:07:23.490
they're gonna get exactly
the same thing that you did.

135
00:07:23.490 --> 00:07:25.430
That's what the package lock is.

136
00:07:25.430 --> 00:07:26.490
It's a useful thing.

137
00:07:26.490 --> 00:07:28.500
You'll never edit package lock by hand.

138
00:07:28.500 --> 00:07:29.750
Never, never, never.

139
00:07:29.750 --> 00:07:31.370
It's just there.

140
00:07:31.370 --> 00:07:32.613
It's for the tools, not for you.

141
00:07:35.031 --> 00:07:39.228
Okay, and then notice here, now I have
a node modules directory which has a bunch

142
00:07:39.228 --> 00:07:42.773
of stuff and this is all the packages
that parcel needs to do its job.

143
00:07:42.773 --> 00:07:44.500
So that's where all that came from.

144
00:07:44.500 --> 00:07:49.420
And this is why we get ignore it because
we can also npm install these later.

145
00:07:49.420 --> 00:07:52.620
We don't necessarily need
to npm install them or

146
00:07:52.620 --> 00:07:55.090
we don't need to commit
those to our git repo.

147
00:07:55.090 --> 00:07:59.090
We can always recreate
it whenever we need to.

148
00:07:59.090 --> 00:08:00.830
I'm going to create a new file.

149
00:08:02.220 --> 00:08:05.890
And I'm going to save it
to my source directory.

150
00:08:08.310 --> 00:08:12.154
And it's gonna be called index.html.

151
00:08:15.220 --> 00:08:16.870
This is the main entry to our project.

152
00:08:16.870 --> 00:08:19.170
This is going to be the HTML
that kicks everything off.

153
00:08:21.780 --> 00:08:26.560
Now that I'm in index.html,
notice that this is an HTML mode, right?

154
00:08:28.460 --> 00:08:30.740
There's a really cool trick here
in VS code, it's called Emmet.

155
00:08:30.740 --> 00:08:33.127
So I'm gonna say HTML colon 5, and

156
00:08:33.127 --> 00:08:36.780
you can see here that I have
this Emmet abbreviation.

157
00:08:36.780 --> 00:08:42.580
If I click on that, notice it just
generates a bunch of HTML for me.

158
00:08:42.580 --> 00:08:45.966
This is really nice because I can never
remember all the things that I need to get

159
00:08:45.966 --> 00:08:48.551
started with a project, and
this just kinda does it for me.

160
00:08:50.672 --> 00:08:53.350
For the title here,
I'm going to call this the fox game.

161
00:08:53.350 --> 00:08:57.490
This is what like what's gonna show
up on the little tab in your browser,

162
00:08:57.490 --> 00:08:58.330
like it's the title.

163
00:08:59.550 --> 00:09:00.770
So I'm gonna call this a fox game.

164
00:09:00.770 --> 00:09:01.977
You can call it whatever you want.

165
00:09:04.191 --> 00:09:08.849
And here in the body, we're just gonna
put an H1 here that says hello world or

166
00:09:08.849 --> 00:09:13.430
something like that, just so
we can tell that everything's working.

167
00:09:13.430 --> 00:09:19.130
Now I have like a bare bones totally
just the essential parts of our

168
00:09:19.130 --> 00:09:21.240
projects like our HTML.

169
00:09:21.240 --> 00:09:25.720
So we have enough now to tell parcel how
to build our project which is kind of fun.

170
00:09:27.750 --> 00:09:29.940
Now we're gonna go back
to our package JSON.

171
00:09:29.940 --> 00:09:31.624
Now that this is all written now.

172
00:09:35.441 --> 00:09:38.300
And here, there's a thing called scripts.

173
00:09:38.300 --> 00:09:45.310
So scripts is really cool because I
can make scripts that I can run later.

174
00:09:46.650 --> 00:09:51.410
And you can see there's one already
here called test that says,

175
00:09:51.410 --> 00:09:54.690
echo test not specified and exit one.

176
00:09:54.690 --> 00:09:57.570
So that means if I ever run npm run test,

177
00:09:57.570 --> 00:09:59.720
it's gonna run whatever
is in the colon here.

178
00:09:59.720 --> 00:10:05.073
So if I say npm run test, it's gonna
execute everything that's in here.

179
00:10:08.062 --> 00:10:09.890
You'll see an error that's on purpose.

180
00:10:09.890 --> 00:10:12.170
That's what this exit one does.

181
00:10:12.170 --> 00:10:17.340
But you can see here,
it echoes out, no test specified.

182
00:10:17.340 --> 00:10:19.461
In fact, I could literally just copy this.

183
00:10:24.672 --> 00:10:25.710
And run that.

184
00:10:26.800 --> 00:10:30.510
It actually exited my console, maybe
not necessarily what you want it to do.

185
00:10:30.510 --> 00:10:32.676
But I can bring back another console,
that's fine.

186
00:10:33.994 --> 00:10:35.330
But that's what this is going to do.

187
00:10:35.330 --> 00:10:38.080
So I need,
it's basically like a placeholder that can

188
00:10:38.080 --> 00:10:40.100
remember scripts that I want to run.

189
00:10:40.100 --> 00:10:44.289
So we're gonna write one here ourselves,
and we're gonna write one called Dev.

190
00:10:46.697 --> 00:10:52.170
And it's just gonna be
parcel src/index.html,

191
00:10:59.195 --> 00:11:05.539
So now any time that I do npm run Dev,
it's gonna run parcel and

192
00:11:05.539 --> 00:11:11.300
you're giving parcel the entry
point of index.html.

193
00:11:11.300 --> 00:11:18.570
So if I say npm run dev, you can see here
it's running parcel on source index.html.

194
00:11:18.570 --> 00:11:23.296
And it's gonna run a local web server for
you at localhost:1234.

195
00:11:23.296 --> 00:11:27.105
So if you're VS code,
I can actually just hold command and

196
00:11:27.105 --> 00:11:29.690
I think in Windows, you hold control.

197
00:11:30.750 --> 00:11:33.970
And I click on it, if you just hover
over it, it'll tell you what to click.

198
00:11:33.970 --> 00:11:37.420
So I'm gonna command click on this and
you can see here,

199
00:11:37.420 --> 00:11:41.960
I now have local host :1234 and
it should be telling you hello world.

200
00:11:43.090 --> 00:11:44.440
It's pretty cool, right?

201
00:11:44.440 --> 00:11:49.680
So parcel generated to directory's force
one called.cash which is just full of

202
00:11:49.680 --> 00:11:51.150
garbage don't look in.

203
00:11:51.150 --> 00:11:54.850
It's just a bunch of stuff that
makes parcel build stuff faster and

204
00:11:54.850 --> 00:11:58.380
there's one here called dist which
is actually like the built outputs.

205
00:11:58.380 --> 00:12:02.000
So if I click on this,
you can see it's actually

206
00:12:02.000 --> 00:12:04.460
literally the exact same thing
because it's copying everything over.

207
00:12:04.460 --> 00:12:08.390
But eventually, it'll be the files
that you build for your project.

208
00:12:09.730 --> 00:12:16.030
So that when you do parcel build my
project, everything will end up in disk.

209
00:12:16.030 --> 00:12:18.250
So this is the generated
output from parcel.

210
00:12:20.710 --> 00:12:22.310
So these two folders,

211
00:12:22.310 --> 00:12:25.380
we don't want to commit to our git
repo because they're generated files.

212
00:12:25.380 --> 00:12:27.678
And in general,
you don't want to commit generated files.

213
00:12:29.636 --> 00:12:33.410
Except package lock, do commit that one,
but the rest of them don't.

214
00:12:34.980 --> 00:12:38.250
So we're gonna come in to our get ignore,
and we're going to ignore dist and

215
00:12:38.250 --> 00:12:40.610
we're going ignore .cash slash.

216
00:12:42.690 --> 00:12:46.030
And you can see here VS code has
now smartly grade things up.

217
00:12:46.030 --> 00:12:48.170
It's like cool, I'm going to ignore this,

218
00:12:48.170 --> 00:12:50.780
I'm not gonna index them,
everything is totally fine.

219
00:12:50.780 --> 00:12:53.460
So any questions so far?

220
00:12:53.460 --> 00:12:57.780
That was the end of the built
process part of the course.

221
00:12:57.780 --> 00:12:58.770
&gt;&gt; I have a question,

222
00:12:58.770 --> 00:13:02.887
how does the creation of the dist folder
make the execution more efficient?

223
00:13:03.940 --> 00:13:07.020
&gt;&gt; Let me kind of split
that into two questions.

224
00:13:07.020 --> 00:13:12.540
The cache is actually, it'll go
through and save a bunch of stuff so

225
00:13:12.540 --> 00:13:14.000
it doesn't have to recompile stuff later.

226
00:13:14.000 --> 00:13:18.185
So that's what's speeds up the rebuilds
and all that stuff lives in .cache.

227
00:13:18.185 --> 00:13:20.040
The dist part of the project and

228
00:13:20.040 --> 00:13:24.950
this is place right now is actually
just dumb because we have just HTML.

229
00:13:24.950 --> 00:13:26.670
But eventually,
when we have a bunch of JavaScript and

230
00:13:26.670 --> 00:13:31.170
CSS, all the compiled JavaScript and
all the compiled CSS will live here.

231
00:13:31.170 --> 00:13:33.300
So this is actually like the end product.

232
00:13:33.300 --> 00:13:35.540
So when you just have the HTML,
dist is worthless,

233
00:13:35.540 --> 00:13:41.036
there is no reason you would use parcel to
build HTML, probably none, I don't know.

234
00:13:41.036 --> 00:13:42.440
I can't give a reason,
I can't think of one.

235
00:13:43.580 --> 00:13:47.590
But once we have JavaScript and
CSS and all this stuff, it'll be here.

236
00:13:47.590 --> 00:13:49.020
It'll have all the correct links.

237
00:13:49.020 --> 00:13:50.240
It'll replace a bunch of stuff.

238
00:13:50.240 --> 00:13:53.850
It'll compile it and run it through all
the various different build processes.

