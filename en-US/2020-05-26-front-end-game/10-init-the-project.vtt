WEBVTT

1
00:00:00.592 --> 00:00:02.490
All right, so
we're here on Init the Project.

2
00:00:03.790 --> 00:00:07.863
So we're going to go
into our VS Code here.

3
00:00:07.863 --> 00:00:12.767
So I'm gonna save a new file
here inside of my source

4
00:00:12.767 --> 00:00:18.294
directory and
it's gonna be called init.js.

5
00:00:18.294 --> 00:00:23.290
So here's kind of my first kind of theory
of round doing front-end development

6
00:00:23.290 --> 00:00:24.390
in particular.

7
00:00:24.390 --> 00:00:29.226
I always try to have like one defined
entry point to my app that the browser

8
00:00:29.226 --> 00:00:29.790
loads.

9
00:00:29.790 --> 00:00:33.305
And then everything else behind it,
I try and make those modules.

10
00:00:33.305 --> 00:00:37.095
The reason being is that I can put
all the garbage in this init.js that

11
00:00:37.095 --> 00:00:38.965
I'm not gonna test, right?

12
00:00:38.965 --> 00:00:41.635
Like a really good example of something
that would go in this init.js

13
00:00:41.635 --> 00:00:45.295
would be like all this stuff setting
up analytics, like Google Analytics or

14
00:00:45.295 --> 00:00:46.745
something like that.

15
00:00:46.745 --> 00:00:48.615
I'm not gonna test Google Analytics.

16
00:00:48.615 --> 00:00:52.290
I assume they test their own crap
because that's their product.

17
00:00:52.290 --> 00:00:54.345
It's not my product, right?

18
00:00:54.345 --> 00:01:00.230
So all that kind of fluffy stuff goes here
in init.js, I don't have to test init.js.

19
00:01:00.230 --> 00:01:02.630
I just know this is code that
gets run in the browser and

20
00:01:02.630 --> 00:01:03.712
I can stop thinking about it.

21
00:01:03.712 --> 00:01:08.440
Okay, so

22
00:01:08.440 --> 00:01:11.550
what I'm going to start doing in
this is I'm gonna start the clock.

23
00:01:11.550 --> 00:01:17.190
So if you remember back in our game,
going back here,

24
00:01:17.190 --> 00:01:19.490
there has to be some sort
of clock that's going.

25
00:01:19.490 --> 00:01:21.155
Let's refresh the page here.

26
00:01:21.155 --> 00:01:24.560
There has to be some sort of
clock that's going here, right?

27
00:01:24.560 --> 00:01:29.570
That's gonna be dictating is
the fox hungry, is the fox idling,

28
00:01:29.570 --> 00:01:32.800
is the fox,
doing that kind of stuff, right?

29
00:01:32.800 --> 00:01:36.570
And so we're gonna have a clock
that ticks every three seconds.

30
00:01:36.570 --> 00:01:38.960
That's going to advance the game
every three seconds and

31
00:01:38.960 --> 00:01:41.050
we're gonna be basically
running on this timer.

32
00:01:42.690 --> 00:01:46.450
Now you could try and
write this game using set timeouts.

33
00:01:46.450 --> 00:01:50.305
And I strongly advise against
that because there's just

34
00:01:50.305 --> 00:01:54.095
bears of synchronicity problems
that lay down that path.

35
00:01:54.095 --> 00:01:56.855
I don't know if synchronicity is a word,
but it is now.

36
00:01:58.675 --> 00:02:03.865
So what we're still going to do,
we're going to standardize on one clock

37
00:02:03.865 --> 00:02:08.825
that we're going to run because then we're
in control of how the project advances.

38
00:02:09.960 --> 00:02:13.403
Okay, well, that was a very sad game.

39
00:02:13.403 --> 00:02:18.220
Sorry, [LAUGH] warning,
fox death ahead, okay.

40
00:02:19.860 --> 00:02:24.480
So on this init.js, we're going to make
some sort of tick rate, const tick rate.

41
00:02:25.480 --> 00:02:27.920
And for now we're going to
have that equal to 3000,

42
00:02:27.920 --> 00:02:30.340
which is going to be 3000 milliseconds.

43
00:02:31.800 --> 00:02:34.730
So everything in this is gonna
be done in milliseconds because

44
00:02:34.730 --> 00:02:36.220
that's how the browser
keeps track of time.

45
00:02:37.450 --> 00:02:40.730
Now, you might be,
this is called screaming case.

46
00:02:40.730 --> 00:02:44.710
Why am I putting this in screaming
case is because it's a constant.

47
00:02:44.710 --> 00:02:45.690
This never changes.

48
00:02:45.690 --> 00:02:48.730
So anywhere that I see my
code in the screaming case,

49
00:02:48.730 --> 00:02:52.930
I know this is a constant tick rate
that never changes, it's not a variable.

50
00:02:52.930 --> 00:02:58.280
It's a constant that I have because
JavaScript doesn't have the construct of

51
00:02:58.280 --> 00:03:00.380
immutable const.

52
00:03:00.380 --> 00:03:05.093
I know there's const here, and whatever,
but it's not a frozen variable.

53
00:03:05.093 --> 00:03:09.506
So that's why we use these kind of
patterns to let ourselves know that this

54
00:03:09.506 --> 00:03:11.360
is how this is working.

55
00:03:11.360 --> 00:03:13.783
Okay, and then I'm gonna have
a function here called tick.

56
00:03:13.783 --> 00:03:17.630
So it's gonna be called function tick.

57
00:03:17.630 --> 00:03:21.796
And all we're gonna do right
now is console.log tic and

58
00:03:21.796 --> 00:03:24.264
we're gonna put our date.

59
00:03:24.264 --> 00:03:29.957
So date.now, which is just gonna
print out what time it is basically.

60
00:03:29.957 --> 00:03:33.550
So the first thing that you might be
noticing is these have underlines, and

61
00:03:33.550 --> 00:03:37.503
that's our es lint kicking in to say, hey,
tick rate is assigned and never used.

62
00:03:37.503 --> 00:03:40.264
Which we know, we will eventually but
for now that's an error,

63
00:03:40.264 --> 00:03:42.430
but it's good to know nonetheless.

64
00:03:42.430 --> 00:03:43.030
Same with tick.

65
00:03:44.190 --> 00:03:46.880
We created it, but it's never used.

66
00:03:47.920 --> 00:03:52.380
Now the yellow underline here says
you're using a console log here.

67
00:03:52.380 --> 00:03:55.140
I'm gonna warn you about that but
I'm not gonna error out.

68
00:03:55.140 --> 00:03:58.360
So that's what that one
did when we added that.

69
00:03:58.360 --> 00:04:04.140
The next thing we're gonna do here is
we're gonna make a function called init.

70
00:04:04.140 --> 00:04:08.640
This is the function that we're
going to call to start our program.

71
00:04:08.640 --> 00:04:09.880
So we're gonna make the function and

72
00:04:09.880 --> 00:04:12.800
then immediately underneath
it we're gonna call it.

73
00:04:12.800 --> 00:04:16.480
I just think this is easier to
kind of visualize how init works.

74
00:04:16.480 --> 00:04:19.264
You could actually just write
this in the root scope, but

75
00:04:19.264 --> 00:04:21.184
I don't typically advise doing that.

76
00:04:23.289 --> 00:04:26.307
I think, in my code,
I actually put here async.

77
00:04:26.307 --> 00:04:28.745
This just is letting me know
that I can do async await,

78
00:04:28.745 --> 00:04:31.140
which is kind of an advanced
JavaScript construct.

79
00:04:31.140 --> 00:04:33.580
I don't think I actually do
it anywhere in this course.

80
00:04:33.580 --> 00:04:35.401
So you can put it there, you can not.

81
00:04:35.401 --> 00:04:38.350
It's not gonna do anything for
you right now.

82
00:04:38.350 --> 00:04:41.573
So I'm just gonna throw out here
a console.log('starting game').

83
00:04:41.573 --> 00:04:45.344
It's just a way for me to let
myself know I'm starting right now.

84
00:04:49.521 --> 00:04:53.940
Okay, and then we're going to
kinda get this clock rolling.

85
00:04:55.170 --> 00:05:00.211
So let, and we're gonna put

86
00:05:00.211 --> 00:05:05.890
nextTimeToTick = date.now.

87
00:05:07.010 --> 00:05:10.387
So we're gonna create this
variable called nextTimeToTick,

88
00:05:10.387 --> 00:05:14.030
which is how we're going to track
next time we're gonna call tick.

89
00:05:15.350 --> 00:05:20.285
Okay, so the first time I'm gonna
tick is whenever this starts,

90
00:05:20.285 --> 00:05:24.000
that's how we're going
to set it to date.now.

91
00:05:24.000 --> 00:05:29.711
Inside of our function here, we're
gonna say function, nextAnimationFrame.

92
00:05:32.980 --> 00:05:35.510
So again,
function within a function that's fine.

93
00:05:35.510 --> 00:05:36.780
It's called a closure.

94
00:05:36.780 --> 00:05:41.007
We're gonna be using a closure
to keep track of our time.

95
00:05:41.007 --> 00:05:46.545
And inside of our closure,
we're gonna say const now = date.now

96
00:05:49.603 --> 00:05:53.715
And we're gonna say if

97
00:05:53.715 --> 00:05:58.694
nextTimeToTick &gt;= now,

98
00:05:58.694 --> 00:06:05.842
then we're going to tick, like that.

99
00:06:05.842 --> 00:06:10.493
And then we're going to reset our

100
00:06:10.493 --> 00:06:15.981
nextTimeToTick = now + TICK_RATE.

101
00:06:18.501 --> 00:06:22.016
And then at the very end
of this we're gonna say

102
00:06:22.016 --> 00:06:26.084
requestAnimationFrame(nextAnimationFrame).

103
00:06:29.281 --> 00:06:32.532
Okay, almost done here.

104
00:06:32.532 --> 00:06:35.598
The next thing we have
to do is we want to call

105
00:06:35.598 --> 00:06:40.303
requestAnimationFrame(nextAnimationFrame)
here as well.

106
00:06:40.303 --> 00:06:42.740
So let's talk about animationFrame for
a second.

107
00:06:44.565 --> 00:06:49.970
requestAnimationFrame, it's
provided by the browser.

108
00:06:49.970 --> 00:06:54.280
So all browsers have built into them
this function called animationFrame.

109
00:06:54.280 --> 00:06:58.446
animationFrame, as it suggests,
is typically used for

110
00:06:58.446 --> 00:07:01.640
doing JavaScript animations.

111
00:07:01.640 --> 00:07:03.190
It's a really cool function.

112
00:07:03.190 --> 00:07:06.786
Because, what it does is it says,
hey browser,

113
00:07:06.786 --> 00:07:11.347
next time you got an idle second and
you can pause for a second,

114
00:07:11.347 --> 00:07:16.022
go ahead and call this function
that I provided to you, right?

115
00:07:16.022 --> 00:07:21.752
So, the key here is it's saying,
hey, browser when idle do this.

116
00:07:21.752 --> 00:07:25.956
And that's important because if you'd
use something like set timeout or

117
00:07:25.956 --> 00:07:29.616
set interval, it's saying,
hey browser, drop everything,

118
00:07:29.616 --> 00:07:33.900
stop what you're doing and
run this function at exactly this time.

119
00:07:33.900 --> 00:07:36.851
When in reality, it doesn't
actually matter if it runs now or

120
00:07:36.851 --> 00:07:37.882
in one millisecond.

121
00:07:37.882 --> 00:07:39.330
Cuz it almost never, in fact,

122
00:07:39.330 --> 00:07:42.173
I can guarantee you it doesn't
take much more than like two or

123
00:07:42.173 --> 00:07:45.889
three milliseconds for the browser to
idle because it's frequently idling.

124
00:07:45.889 --> 00:07:49.306
But that way we can basically guarantee
ourselves we're not interrupting stuff

125
00:07:49.306 --> 00:07:52.490
when we call animationFrame.

126
00:07:52.490 --> 00:07:57.075
Now, this happens a lot,
like really frequently.

127
00:07:57.075 --> 00:08:02.150
animationFrame is gonna, in fact, we can
just show you how quickly it happens.

128
00:08:02.150 --> 00:08:04.540
So let's just do this for fun.

129
00:08:06.600 --> 00:08:10.538
Well, let's go ahead and
first see this working.

130
00:08:10.538 --> 00:08:16.080
And then I'll show you how frequently
requestAnimationFrame happens.

131
00:08:16.080 --> 00:08:18.340
Suffice to say, it happens a ton.

132
00:08:20.570 --> 00:08:23.290
So what we're doing here for
nextAnimationFrame, which is going to be

133
00:08:23.290 --> 00:08:27.940
called by requestAnimationFrame,
we're saying, hey, is it time to tick yet?

134
00:08:27.940 --> 00:08:28.870
It's not, cool.

135
00:08:28.870 --> 00:08:31.820
Don't do anything, just schedule me again.

136
00:08:31.820 --> 00:08:34.480
So that's what this is doing
right here is it's saying,

137
00:08:34.480 --> 00:08:38.180
cool, I'm calling myself back, just call
me the next time you have an idle second.

138
00:08:38.180 --> 00:08:42.250
And so it's doing that a lot until
eventually this if statement is true,

139
00:08:42.250 --> 00:08:44.930
which is the next time we're
going to advance our clock,

140
00:08:44.930 --> 00:08:46.940
then it's gonna call tick, right?

141
00:08:46.940 --> 00:08:50.540
And tick is where we're gonna do all of
our business logic of advancing the game,

142
00:08:50.540 --> 00:08:55.020
doing new stuff, making the fox hungry,
all that kind of stuff.

143
00:08:57.280 --> 00:08:59.800
And then we have to call it again
here at the beginning cuz we have to

144
00:08:59.800 --> 00:09:00.730
schedule it once.

145
00:09:03.510 --> 00:09:05.890
And actually, you could even make
this easier if you wanted to.

146
00:09:05.890 --> 00:09:10.780
You could just say, nextAnimationFrame,
you could just call it directly first.

147
00:09:10.780 --> 00:09:12.230
It doesn't matter.

148
00:09:12.230 --> 00:09:14.040
Okay, so let's talk about the closure.

149
00:09:14.040 --> 00:09:15.450
This might be a little bit confusing of,

150
00:09:15.450 --> 00:09:17.000
why do we have a function
within a function?

151
00:09:18.510 --> 00:09:20.090
We have this nextTimeToTick,

152
00:09:20.090 --> 00:09:24.700
which is like we have to keep track
of when it's time to advance, right?

153
00:09:24.700 --> 00:09:27.470
We have to keep track of one three seconds
from now because that's constantly going

154
00:09:27.470 --> 00:09:28.620
to be advancing.

155
00:09:28.620 --> 00:09:30.760
That's actually why we use let here right,

156
00:09:30.760 --> 00:09:32.720
because it's going to
be changing over time.

157
00:09:34.440 --> 00:09:38.590
We use the closure because this
closure can refer to nextTimeToTick

158
00:09:38.590 --> 00:09:39.960
which is outside of its own scope.

159
00:09:39.960 --> 00:09:41.410
So it's going to survive it right?

160
00:09:41.410 --> 00:09:43.810
We're using closure to
encapsulate that state.

161
00:09:45.590 --> 00:09:48.260
And so
that way when we say nextTimeToTick,

162
00:09:48.260 --> 00:09:53.180
if this was inside of it this would get
reset every single time this gets called.

163
00:09:53.180 --> 00:09:53.970
We don't want that.

164
00:09:53.970 --> 00:09:57.150
We want that to survive the calls of this.

165
00:09:57.150 --> 00:10:00.730
That's why we're using closures
to advance the state here.

166
00:10:00.730 --> 00:10:02.180
So let's go see this in action.

167
00:10:02.180 --> 00:10:05.867
So we have an init.js,
we have to go back to our index.html.

168
00:10:05.867 --> 00:10:12.750
And we're going to say, down here at
the bottom, or sorry, inside of the body.

169
00:10:12.750 --> 00:10:14.403
Last line inside of the body.

170
00:10:14.403 --> 00:10:18.925
We're say script source equals, and

171
00:10:18.925 --> 00:10:22.184
we'll say ./init.js.

172
00:10:26.743 --> 00:10:28.710
So this is the one inside of source.

173
00:10:28.710 --> 00:10:30.290
Make sure you're not
looking inside of dist.

174
00:10:30.290 --> 00:10:32.868
That's important,
do not look inside of dist.

175
00:10:32.868 --> 00:10:38.684
So index.html here we're saying ./init.js.

176
00:10:38.684 --> 00:10:42.385
So what's cool about parcel,
our bundler, it immediately saw,

177
00:10:42.385 --> 00:10:43.780
I see a JavaScript file.

178
00:10:43.780 --> 00:10:46.530
And so it's going to follow that through
so we don't have to change parcel or

179
00:10:46.530 --> 00:10:47.040
anything like that.

180
00:10:47.040 --> 00:10:49.380
It just understands, cool,
there's my JavaScript.

181
00:10:50.660 --> 00:10:53.300
And it's automatically
going to include it.

182
00:10:53.300 --> 00:11:00.010
So now if we go over to, I guess a key
point that I should probably mention.

183
00:11:00.010 --> 00:11:02.890
So if I look down here,
I still have parcel running.

184
00:11:04.300 --> 00:11:07.220
So if you don't have parcel running,
make sure you have npm run dev, so

185
00:11:07.220 --> 00:11:08.900
that parcel is running
here in the background.

186
00:11:10.020 --> 00:11:11.330
If you do need to stop it for any reason,

187
00:11:11.330 --> 00:11:15.260
you can hit Ctrl+C and
that'll stop the server.

188
00:11:15.260 --> 00:11:18.000
And I can just say npm run dev again,
it'll start it back up.

189
00:11:20.180 --> 00:11:23.110
So now if I go back to localhost:1234.

190
00:11:23.110 --> 00:11:26.920
And if I look at the console
here at the bottom,

191
00:11:26.920 --> 00:11:31.533
which I just did with Cmd+ Option,
I think it's K or J.

192
00:11:35.451 --> 00:11:39.239
So you probably are seeing an error here
that says regenerator runtime is not

193
00:11:39.239 --> 00:11:39.781
defined.

194
00:11:39.781 --> 00:11:42.200
That's expected.

195
00:11:42.200 --> 00:11:47.083
And that's a quirk of how
parcel is rendering our code.

196
00:11:47.083 --> 00:11:51.546
I want you to go back to your
package.json really quick.

197
00:11:51.546 --> 00:11:54.756
And we're just gonna put one last line
here underneath devDependencies actually

198
00:11:54.756 --> 00:11:55.880
doesn't matter the order.

199
00:11:55.880 --> 00:11:58.310
I'm going to put it
underneath devDependencies.

200
00:11:58.310 --> 00:12:03.920
And this is going to be called
browserslist like that.

201
00:12:03.920 --> 00:12:07.833
Make sure you do not forget the s there,

202
00:12:07.833 --> 00:12:12.230
browserslist:, it's gonna be an array.

203
00:12:12.230 --> 00:12:15.941
And then we're just gonna tell parcels,
here are the browsers we are targeting.

204
00:12:15.941 --> 00:12:18.640
Don't include anything that
we don't need for that.

205
00:12:18.640 --> 00:12:21.620
So our problem right now with the
regenerator runtime thing is it's trying

206
00:12:21.620 --> 00:12:26.920
to target old browsers and old browsers
don't understand async functions.

207
00:12:28.630 --> 00:12:34.400
But my Firefox, your Chrome, Edge,
Safari all understand async functions.

208
00:12:34.400 --> 00:12:38.740
So we're just gonna say, hey,
don't try and target those browsers.

209
00:12:38.740 --> 00:12:42.750
So inside of that,
you just put square brackets for an array.

210
00:12:42.750 --> 00:12:48.440
And here we're gonna say
last 2 Firefox versions,

211
00:12:48.440 --> 00:12:51.070
or you could put Chrome,
whatever you want to put there.

212
00:12:51.070 --> 00:12:53.990
I'm using Firefox so
I say Firefox it doesn't matter.

213
00:12:53.990 --> 00:12:55.392
It amounts to be about the same thing.

214
00:12:55.392 --> 00:13:01.395
Now, don't ship code that only
targets the last two Firefox versions.

215
00:13:01.395 --> 00:13:02.412
That's a terrible idea.

216
00:13:02.412 --> 00:13:04.573
But when you're writing code for
yourself totally fine.

217
00:13:07.768 --> 00:13:13.118
Okay, so now if we go back to our code,
you can see we see it's ticking

218
00:13:13.118 --> 00:13:21.080
every couple of seconds,
Which is exactly what we want, right?

219
00:13:21.080 --> 00:13:24.750
So now we have a real clock that's
working for our code, which is great.

220
00:13:26.060 --> 00:13:28.950
Last thing I'll say,
if you're still seeing some issues here,

221
00:13:28.950 --> 00:13:33.330
just a pro tip for making it work.

222
00:13:33.330 --> 00:13:36.257
So I'm just gonna go start my
server really quick, Ctrl+C here.

223
00:13:38.530 --> 00:13:41.963
Something you can do that sometimes helps,

224
00:13:41.963 --> 00:13:46.693
you can say rm -rf.cache end dist,
which will clear out all

225
00:13:46.693 --> 00:13:51.631
of the built files for parcel and
it can kinda reset its memory.

226
00:13:51.631 --> 00:13:54.126
So if I do that, and
then I do npm run dev again.

227
00:13:56.721 --> 00:13:57.831
That's only if things aren't working.

228
00:13:57.831 --> 00:13:59.320
You don't have to do it
if things are working.

229
00:14:04.432 --> 00:14:07.141
But in any case,
if I refresh my page again,

230
00:14:07.141 --> 00:14:10.452
you can see it's still
ticking every three seconds.

231
00:14:14.249 --> 00:14:19.527
All right, so this is kind of
giving us the temporal framework,

232
00:14:19.527 --> 00:14:22.670
if you will, to work within, right?

233
00:14:22.670 --> 00:14:26.260
This is going to allow us to advance
our game every three seconds.

234
00:14:26.260 --> 00:14:29.500
And you can, these are just
the rules that I made for myself.

235
00:14:29.500 --> 00:14:33.180
If you wanna make this tick every
second and have more granular time,

236
00:14:33.180 --> 00:14:34.100
you can do that.

237
00:14:34.100 --> 00:14:37.050
If you wanna make it tick every
five seconds, that works too.

238
00:14:37.050 --> 00:14:40.060
That's totally up to you,
however you want to architect this game.

239
00:14:40.060 --> 00:14:41.318
I'm gonna give you all the variables and

240
00:14:41.318 --> 00:14:42.954
then you're welcome to
play with them afterwards.

