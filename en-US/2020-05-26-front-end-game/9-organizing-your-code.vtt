WEBVTT

1
00:00:00.360 --> 00:00:04.670
So the next thing I wanted to get
into was organizing your code.

2
00:00:04.670 --> 00:00:06.280
And this is something
that people ask me a lot,

3
00:00:06.280 --> 00:00:09.240
particularly in my react courses,
how do you organize your code?

4
00:00:09.240 --> 00:00:13.322
It's kind of like an existential
problem that developers always have.

5
00:00:13.322 --> 00:00:17.970
There's the saying that naming
your variables is really hard, but

6
00:00:17.970 --> 00:00:21.260
I also think along those lines,
organizing your code is very difficult.

7
00:00:22.390 --> 00:00:28.920
So there is an endless ocean of
good ways to organize your code.

8
00:00:28.920 --> 00:00:32.340
They all have some sort of trade off one
versus another, some favor searchability,

9
00:00:32.340 --> 00:00:36.340
some favor discoverability, some favor
being understandable from a file explorer.

10
00:00:37.680 --> 00:00:42.150
And I have no strong preference one way or
the other towards it

11
00:00:42.150 --> 00:00:46.840
because they're all well-intentioned and
they all eventually fall apart.

12
00:00:46.840 --> 00:00:49.900
And I'm kind of a pessimist when it
comes to this, everyone starts out with

13
00:00:49.900 --> 00:00:53.610
great intentions, we're gonna organize
it this way and everything's gonna work.

14
00:00:53.610 --> 00:00:56.540
And people are always gonna put their
files in this format in this way, and

15
00:00:56.540 --> 00:00:58.670
then it never works.

16
00:00:58.670 --> 00:01:01.510
And the reason why is if you can't
automate it, it's not gonna get enforced.

17
00:01:01.510 --> 00:01:05.640
It goes back to that thing I was telling
you before, unless you can force your code

18
00:01:05.640 --> 00:01:08.500
to not compile unless it's
organized a certain way,

19
00:01:08.500 --> 00:01:10.090
it's just always going to drift.

20
00:01:11.140 --> 00:01:13.690
Even the best code bases I've worked on,

21
00:01:13.690 --> 00:01:16.280
the Netflix codebase was
probably the cleanest,

22
00:01:16.280 --> 00:01:20.450
best kept code that I've ever seen, and
it was still it just an enormous mess.

23
00:01:20.450 --> 00:01:23.760
It was so hard to find things
just cuz it's a big code base and

24
00:01:23.760 --> 00:01:25.330
big code bases are inherently hard.

25
00:01:26.770 --> 00:01:29.330
And someone's gonna send me
a message afterwards like Brian,

26
00:01:29.330 --> 00:01:33.730
I have the best organize code and it's
30 years old and it's older than you and

27
00:01:33.730 --> 00:01:34.710
it can blah blah, blah.

28
00:01:34.710 --> 00:01:35.720
Fine, okay, I believe you.

29
00:01:37.400 --> 00:01:39.088
Maybe the common denominator is me and

30
00:01:39.088 --> 00:01:41.206
I haven't worked on
a code base that's great.

31
00:01:41.206 --> 00:01:44.216
I don't know, you can tell me.

32
00:01:44.216 --> 00:01:49.904
Anyway, yeah, in here I said it just
ends up being a junk drawer, right?

33
00:01:49.904 --> 00:01:53.827
Everyone has their junk drawer and they
organize it once every spring cleaning,

34
00:01:53.827 --> 00:01:56.720
and then two weeks later it's
just back in total disarray.

35
00:01:58.010 --> 00:02:00.230
So that's kinda how I
feel about code bases.

36
00:02:02.300 --> 00:02:07.298
But I wanna talk about my theory behind
how I try to organize my code and

37
00:02:07.298 --> 00:02:10.390
why, and all the benefits thereof.

38
00:02:10.390 --> 00:02:14.992
So I optimize for deleteability, and
I actually stole this from another

39
00:02:14.992 --> 00:02:20.040
friend of mine who has taught at
Frontend Masters, is Ryan Florence.

40
00:02:20.040 --> 00:02:23.520
I heard him say this in a workshop that
he optimizes for deleteability, and

41
00:02:23.520 --> 00:02:24.760
that just really stuck with me.

42
00:02:25.930 --> 00:02:29.020
And people are like why would you
optimize your code to be deleted?

43
00:02:30.680 --> 00:02:34.650
Well, let me kind of explain
a little bit more what I mean.

44
00:02:34.650 --> 00:02:37.660
All of us that have worked
on really large code bases

45
00:02:37.660 --> 00:02:39.710
know that there's a lot
of dead code in there.

46
00:02:39.710 --> 00:02:42.520
Either code that doesn't get
used that's inside of a file or

47
00:02:42.520 --> 00:02:48.290
just entire directories or entire files
that were written, well-intentioned.

48
00:02:48.290 --> 00:02:50.780
And then we migrated forward or
we fixed a bug,

49
00:02:50.780 --> 00:02:53.470
and that code ends up being dead, right?

50
00:02:54.980 --> 00:02:57.810
And dead code is the enemy of
trying to understand a code base.

51
00:02:57.810 --> 00:03:01.460
So if I'm reading through a code base and
I see a bunch of code,

52
00:03:01.460 --> 00:03:04.939
I can't inherently tell is this
being used, is this not being used?

53
00:03:06.120 --> 00:03:08.610
And so if you optimize your code for
deleteability,

54
00:03:08.610 --> 00:03:11.950
that as soon as something is finished, is
no longer being used, you can delete it.

55
00:03:13.180 --> 00:03:17.440
That's going to make your code base
inherently more readable because there's

56
00:03:17.440 --> 00:03:18.680
less code, right?

57
00:03:18.680 --> 00:03:20.290
Less code is less bugs.

58
00:03:20.290 --> 00:03:24.290
And the other thing is, particularly
as JavaScript front end developers,

59
00:03:24.290 --> 00:03:26.830
we're very sensitive to code bundle size.

60
00:03:26.830 --> 00:03:30.710
So if you're including dead code in your
bundle that goes down to the end user,

61
00:03:30.710 --> 00:03:34.690
that's a cardinal sin because
you're wasting bandwidth for

62
00:03:34.690 --> 00:03:37.150
no use to you or to your user, right?

63
00:03:37.150 --> 00:03:38.770
It's just bad all the way around.

64
00:03:40.370 --> 00:03:42.900
So I optimize for deletability,
that as soon as something is finished,

65
00:03:42.900 --> 00:03:44.150
it's easily deleted.

66
00:03:44.150 --> 00:03:47.260
And the nice thing about that,
in order for something to be deletable,

67
00:03:47.260 --> 00:03:51.046
it has to be modular, and so it kind
of forces you into some good practices.

68
00:03:51.046 --> 00:03:54.730
Cuz if I wanna be able to rip something
out and put something new in,

69
00:03:54.730 --> 00:03:57.910
it has to be well-defined of
how the pieces fit together.

70
00:03:57.910 --> 00:04:03.788
If it's this spaghetti code that goes
everywhere, then that sucks, right?

71
00:04:03.788 --> 00:04:06.320
You're not gonna end up with very
good code at the end of the day, and

72
00:04:06.320 --> 00:04:07.910
it's not gonna be very deletable.

73
00:04:07.910 --> 00:04:09.850
Here we are, this is kind of my thought.

74
00:04:09.850 --> 00:04:12.630
I try and put a things kind of
organized into directories.

75
00:04:12.630 --> 00:04:16.140
I get accused of putting too many
directories into projects, but

76
00:04:16.140 --> 00:04:18.140
I think that's the trade off, right?

77
00:04:18.140 --> 00:04:21.720
A lot of directories, a lot of nesting,
but you end up with kind of, hey,

78
00:04:21.720 --> 00:04:27.020
we're using this module but
this module has all of its tests in

79
00:04:27.020 --> 00:04:30.520
the same directory, all of its CSS, all of
its JavaScript and it's all in one folder.

80
00:04:30.520 --> 00:04:33.270
And then once I'm done with it,
just delete the directory and

81
00:04:33.270 --> 00:04:37.920
everything goes with it,
that's kind of my mantra here.

82
00:04:37.920 --> 00:04:39.785
And I tried to do that with
this project a little bit,

83
00:04:39.785 --> 00:04:41.700
it ended up being actually less useful.

84
00:04:41.700 --> 00:04:44.890
So I actually kind of redid the project

85
00:04:44.890 --> 00:04:48.500
back into kind of a more
monolithic kind of state.

86
00:04:48.500 --> 00:04:51.900
So I actually don't really follow it too
much in this kind of organizing code, but

87
00:04:51.900 --> 00:04:54.910
I wanted to talk about it
because people wanted to know.

88
00:04:55.940 --> 00:04:57.970
All of these rules and theories and

89
00:04:57.970 --> 00:05:00.910
things that I'm throwing out at
you right now, they're just that.

90
00:05:00.910 --> 00:05:03.120
They're their guidelines,
their theories, and

91
00:05:03.120 --> 00:05:06.550
if it doesn't make sense in the projects
that you're doing, then don't follow them.

92
00:05:06.550 --> 00:05:09.710
All of this is just guidelines and
thought processes.

93
00:05:10.860 --> 00:05:12.361
So actually,
I'm telling you all these things and

94
00:05:12.361 --> 00:05:15.130
then I don't follow them,
and that's kinda a lesson in

95
00:05:15.130 --> 00:05:19.970
don't be such an idealogue to follow
rules just because the rules.

96
00:05:19.970 --> 00:05:22.850
Always be thinking about always
making the trade offs in your head.

97
00:05:22.850 --> 00:05:26.180
And if it doesn't make sense to follow one
of the rules, then don't follow the rules.

