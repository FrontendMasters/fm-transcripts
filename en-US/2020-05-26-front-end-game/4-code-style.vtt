WEBVTT

1
00:00:00.700 --> 00:00:04.660
So, we've now arrived at
the build process milestone.

2
00:00:04.660 --> 00:00:07.470
So, if you didn't get something or
you fell behind or

3
00:00:07.470 --> 00:00:10.940
something like that, the build process
milestones, the build process directory,

4
00:00:10.940 --> 00:00:14.940
instead of that Git repo that I had to
clone, all the files will be in there.

5
00:00:14.940 --> 00:00:16.790
There's also a link in
the course notes as well.

6
00:00:18.930 --> 00:00:20.100
So everything should be working there.

7
00:00:22.290 --> 00:00:24.790
And so if we go to Project Fox Game here,

8
00:00:24.790 --> 00:00:28.650
this is the website,
we just finished build process.

9
00:00:28.650 --> 00:00:30.690
So we were down here if
you click this link here,

10
00:00:30.690 --> 00:00:34.610
this will take you to the part of
the repository with the build process.

11
00:00:34.610 --> 00:00:37.060
So this is kind of the state
of where we are at the moment.

12
00:00:38.970 --> 00:00:44.450
Okay, so
we are going to move on to code style.

13
00:00:44.450 --> 00:00:45.920
So if you've watched my other courses,

14
00:00:45.920 --> 00:00:50.670
you can quickly figure out that I'm pretty
passionate about automated code quality.

15
00:00:51.700 --> 00:00:54.901
I have the mantra that that which
is not automated is not enforced,

16
00:00:54.901 --> 00:00:58.674
like if you ever have been working on
a professional project is big tendency for

17
00:00:58.674 --> 00:01:00.462
people to come in and make nitpicks.

18
00:01:00.462 --> 00:01:05.219
And I actually got so passive aggressive
about that at my previous company that I

19
00:01:05.219 --> 00:01:09.408
wrote a bot that if you put a comment
on my pull request that said nitpick

20
00:01:09.408 --> 00:01:14.160
it automatically closed your comment,
because I think it's dumb, right?

21
00:01:14.160 --> 00:01:15.890
I don't believe in nitpicks.

22
00:01:15.890 --> 00:01:20.270
If it's either a code quality issue and
I should fix it, or it's not an issue, and

23
00:01:20.270 --> 00:01:21.920
you shouldn't say it, right?

24
00:01:21.920 --> 00:01:23.050
Not necessarily shouldn't say it.

25
00:01:23.050 --> 00:01:26.130
I'm all about teaching and
collaborating and things like that, but

26
00:01:26.130 --> 00:01:29.750
if you're telling me that I
have two equivalent things and

27
00:01:29.750 --> 00:01:31.630
you prefer the other, I don't care.

28
00:01:32.890 --> 00:01:37.390
So that's why I believe that you
need to automate things, right?

29
00:01:37.390 --> 00:01:40.230
So if you have something that you feel
passionate that should be enforced in your

30
00:01:40.230 --> 00:01:44.290
code base, either write an automated
rule that enforces that or

31
00:01:44.290 --> 00:01:47.915
don't write it, or just don't do it.

32
00:01:47.915 --> 00:01:50.475
Having worked in front of
infrastructure before,

33
00:01:50.475 --> 00:01:54.115
like I feel pretty strongly
about these kind of things.

34
00:01:54.115 --> 00:01:58.323
And I feel like any time to introduce
rules like that, like let's say you have

35
00:01:58.323 --> 00:02:01.821
to, you're not allowed to use
arrow functions in JavaScript or

36
00:02:01.821 --> 00:02:03.539
something like that, right?

37
00:02:03.539 --> 00:02:08.236
Anytime you do that you're creating
artificial friction for your team, for

38
00:02:08.236 --> 00:02:10.909
your project, for anything like that, and

39
00:02:10.909 --> 00:02:15.679
you need to take care of when that's
useful and when that's not useful because

40
00:02:15.679 --> 00:02:20.700
you're intentionally slowing down your
team to adhere to some set of rules.

41
00:02:20.700 --> 00:02:23.770
And you better make sure that
those set of rules is worthwhile.

42
00:02:25.080 --> 00:02:29.362
So if something like outline arrow
functions like, is that worth it?

43
00:02:29.362 --> 00:02:33.918
Like if my brain thinks an arrow functions
is it worth kicking me out of how I think

44
00:02:33.918 --> 00:02:36.240
about things, the answer to that is no.

45
00:02:36.240 --> 00:02:38.569
That's a terrible rule and
don't put that in your code base.

46
00:02:40.640 --> 00:02:44.490
Developers have a pure idea of how they
want to solve problems in their head and

47
00:02:44.490 --> 00:02:47.240
anytime that you modify that,
you're introducing friction,

48
00:02:47.240 --> 00:02:49.950
you're slowing them down,
you're making them enjoy their job less.

49
00:02:49.950 --> 00:02:51.130
Like there's a bunch of stuff there, so

50
00:02:51.130 --> 00:02:53.914
make sure that any rule that you
add to your code base is worth it.

51
00:02:53.914 --> 00:02:57.110
This is why we have tests,
this is why we have Linton,

52
00:02:57.110 --> 00:02:59.180
this is why we have creating and
code formatting.

53
00:02:59.180 --> 00:03:04.430
All these stuff is to automate away a lot
of these problems, but just be cautious.

54
00:03:04.430 --> 00:03:10.380
Be cognizant, be intentional about the
friction that you introduce to your team,

55
00:03:10.380 --> 00:03:13.272
to your projects and that kind of stuff.

56
00:03:13.272 --> 00:03:16.761
So, the reason why I like automation is
because it presents immediate feedback

57
00:03:16.761 --> 00:03:17.340
to someone.

58
00:03:17.340 --> 00:03:21.630
So if I write code that's wrong,
that's either not gonna work or

59
00:03:21.630 --> 00:03:24.470
has a problem with it or
doesn't match our code style,

60
00:03:24.470 --> 00:03:27.840
the great thing about these tools is
that you can present immediate feedback.

61
00:03:27.840 --> 00:03:30.370
And I can get like
a little red squiggly line

62
00:03:30.370 --> 00:03:33.600
inside of my project that says
this is wrong, fix it right now.

63
00:03:34.980 --> 00:03:35.970
And so that,

64
00:03:35.970 --> 00:03:39.180
I'm still in the same code flow I'm still
have everything in my mind is like, cool,

65
00:03:39.180 --> 00:03:43.830
that is wrong, fix it really quick, and
I move on and it's not a lot of friction.

66
00:03:43.830 --> 00:03:48.680
The problem with like nitpicks, and
PRs is that I wrote code, I finished

67
00:03:48.680 --> 00:03:52.700
writing the rest of the code, I committed
it, I pushed it, I marked you on a PR and

68
00:03:52.700 --> 00:03:55.540
then like two days later, you look
at the PR and you come back to it.

69
00:03:55.540 --> 00:03:57.586
When I say PR,
I mean pull requests on Github so

70
00:03:57.586 --> 00:04:00.006
it's like when I'm trying
to merge code into Github.

71
00:04:01.984 --> 00:04:05.378
After that span of like five
days since I wrote the code,

72
00:04:05.378 --> 00:04:10.070
I have to go regain all the context of
what I wrote and then try and fix it.

73
00:04:10.070 --> 00:04:13.730
So it's a very, very inefficient and
frustrating process.

74
00:04:13.730 --> 00:04:17.530
That's why I don't like these nitpick
things like PRs are really great and

75
00:04:17.530 --> 00:04:23.350
PR reviews are really great for big things
like, hey you wrote this code, we actually

76
00:04:23.350 --> 00:04:26.850
already have that code over here and we
can reuse it over here, things like that.

77
00:04:26.850 --> 00:04:31.280
Pull Requests are perfect for to make
those kind of comments but like, hey,

78
00:04:31.280 --> 00:04:36.280
you named your variable in a way that
is minorly offensive to me is like,

79
00:04:36.280 --> 00:04:37.020
fine I don't care.

80
00:04:37.020 --> 00:04:38.290
That's my rant on code style.

81
00:04:38.290 --> 00:04:41.280
I don't know why I necessarily
had to say it here, but I had to.

82
00:04:41.280 --> 00:04:42.370
You're all starting out and

83
00:04:42.370 --> 00:04:45.900
I want you to be thinking about these
things like code style is important but

84
00:04:45.900 --> 00:04:49.740
the most important thing is like,
the best code is code that exists, right?

85
00:04:49.740 --> 00:04:52.580
And if it doesn't exist,
then it doesn't work obviously.

86
00:04:52.580 --> 00:04:54.610
So, all right.

87
00:04:54.610 --> 00:04:56.410
We're gonna get into some
code style things and

88
00:04:56.410 --> 00:04:59.580
I kind of split code style into
two different kind of things.

89
00:04:59.580 --> 00:05:02.590
One is like, code formatting and

90
00:05:02.590 --> 00:05:06.610
one of them is like the style rules
of like linting and stuff like that.

91
00:05:06.610 --> 00:05:09.150
So we're gonna start with code formatting
because it's more mechanical and

92
00:05:09.150 --> 00:05:09.770
it's easier to solve.

