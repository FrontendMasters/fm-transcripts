WEBVTT

1
00:00:00.710 --> 00:00:04.858
So let's head back to gameStates.

2
00:00:07.917 --> 00:00:13.143
And let's go ahead and
make a transition between day and night.

3
00:00:13.143 --> 00:00:17.649
So inside of constants.js,
we're gonna put some

4
00:00:17.649 --> 00:00:22.880
sort of DAY_LENGTH, so
export const DAY_LENGTH.

5
00:00:22.880 --> 00:00:25.250
This is how many ticks you
want before day and night.

6
00:00:28.610 --> 00:00:32.655
I typically leave it at 60 for how long a
day is otherwise it's kinda too short for

7
00:00:32.655 --> 00:00:35.336
the game to be any sort of fun.

8
00:00:35.336 --> 00:00:39.985
But for testing purposes, let's just go
ahead and make it 10 for right now, and

9
00:00:39.985 --> 00:00:41.773
then we'll come back later and change it.

10
00:00:41.773 --> 00:00:46.574
And then export const NIGHT_LENGTH,
for how long your fox sleeps,

11
00:00:46.574 --> 00:00:51.227
we can make it like three right now,
maybe make it like five later,

12
00:00:54.122 --> 00:00:56.930
Okay, so let's go back to gameState now.

13
00:00:59.810 --> 00:01:04.178
And we're gonna import DAY_LENGTH,

14
00:01:04.178 --> 00:01:07.900
NIGHT_LENGTH from constants.

15
00:01:07.900 --> 00:01:10.794
We're gonna add in a new
thing called sleepTime.

16
00:01:16.522 --> 00:01:19.270
And we're gonna add an else if here.

17
00:01:19.270 --> 00:01:24.156
So else if (this.time

18
00:01:24.156 --> 00:01:29.783
=== this.sleepTime)

19
00:01:34.092 --> 00:01:38.600
Then we're gonna say this.sleep.

20
00:01:38.600 --> 00:01:40.260
No not sleeptime, just sleep.

21
00:01:40.260 --> 00:01:44.040
And we're gonna make a new
function down here called sleep.

22
00:01:50.352 --> 00:01:53.017
So, whenever the fox wakes up,

23
00:01:53.017 --> 00:01:58.460
we need the fox to set a new timer
when it's gonna go back to sleep.

24
00:01:58.460 --> 00:02:05.265
So we're gonna say
this.sleepTime=this.clock

25
00:02:05.265 --> 00:02:09.410
+ DAY_LENGTH, right?

26
00:02:09.410 --> 00:02:12.040
So that's gonna be how long
before it goes back to sleep.

27
00:02:14.370 --> 00:02:19.390
And then when it goes to sleep,
we're gonna say this.state = sleep.

28
00:02:19.390 --> 00:02:21.140
That's the new state it's in.

29
00:02:21.140 --> 00:02:23.390
We're gonna modFox to be asleep.

30
00:02:23.390 --> 00:02:27.480
We're gonna modScene to be night.

31
00:02:30.615 --> 00:02:38.770
And we're gonna say this.wake
time = this.clock + NIGHT_LENGTH.

32
00:02:41.619 --> 00:02:44.114
And that's it.

33
00:02:46.760 --> 00:02:52.480
Now what's really cool about this is with
sleep, we're just reusing wake, right?

34
00:02:52.480 --> 00:02:55.810
That's the same function we programmed
to start the game here, wake.

35
00:02:56.910 --> 00:03:02.461
But we can actually double its use to make
it also work for awakening after night.

36
00:03:02.461 --> 00:03:04.804
So we got a nice bit of
code reusability here.

37
00:03:08.351 --> 00:03:11.704
And I need a comma there on line 40.

38
00:03:14.043 --> 00:03:15.578
Let's go take a look at the game.

39
00:03:17.722 --> 00:03:21.320
So now if I refresh,
it shouldn't have to refresh on its own.

40
00:03:22.960 --> 00:03:26.320
But now if I wait, it should be
about 30 seconds of being awake.

41
00:03:28.600 --> 00:03:32.950
So our little friend here should stand for
about 30 seconds.

42
00:03:32.950 --> 00:03:34.540
And then eventually
it's gonna go to sleep.

43
00:03:34.540 --> 00:03:38.160
It should be asleep for about 9
seconds and then should wake back up.

44
00:03:40.240 --> 00:03:43.030
sleepTime, startGame.

45
00:03:43.030 --> 00:03:45.650
sleepTime = this.clock + DAY_LENGTH.

46
00:03:47.810 --> 00:03:50.730
If this.time,
that's what I did here on line 15.

47
00:03:50.730 --> 00:03:53.535
I put this.time so this.clock.

48
00:03:56.461 --> 00:04:00.275
And just for brevity's sake,
let's put this at 3, so

49
00:04:00.275 --> 00:04:03.374
we can test really quick if this works or
not.

50
00:04:07.433 --> 00:04:09.945
So about 5, it should go to sleep.

51
00:04:12.301 --> 00:04:13.528
Right, I suppose.

52
00:04:18.832 --> 00:04:21.820
And there we go.

53
00:04:21.820 --> 00:04:22.970
Now the fox is sleeping.

54
00:04:24.190 --> 00:04:26.760
Then it should sleep for about 3,
and then it should wake back up.

55
00:04:30.081 --> 00:04:30.730
And there we go.

56
00:04:31.760 --> 00:04:33.920
And what's cool is every time
the day rolls back around,

57
00:04:33.920 --> 00:04:35.540
we still have that chance of rain, right?

58
00:04:35.540 --> 00:04:38.220
We already built that into wake and
so every day it might rain.

59
00:04:40.700 --> 00:04:42.570
Okay, cool.

60
00:04:42.570 --> 00:04:45.643
So let's go ahead and
set that day length back to maybe 60.

61
00:04:45.643 --> 00:04:49.380
And let's set the NIGHT_LENGTH to 4,
something like that.

62
00:04:52.360 --> 00:04:58.725
So, let's go ahead and do.

63
00:04:58.725 --> 00:05:02.191
We're gonna go back to constants.js,
constants.js, and

64
00:05:02.191 --> 00:05:05.008
we're gonna write a couple
of functions in here.

65
00:05:05.008 --> 00:05:12.140
These aren't quite constants, but this
felt like the right place to put these.

66
00:05:12.140 --> 00:05:16.432
I made three or
two functions called getNextHungerTime.

67
00:05:16.432 --> 00:05:19.290
And it's how long it takes for
the fox to get hungry.

68
00:05:19.290 --> 00:05:22.410
But I made them functions because
there's some randomness and

69
00:05:22.410 --> 00:05:25.170
we want it to be random every
single time that we call it.

70
00:05:26.240 --> 00:05:29.607
So, getNextHungerTime,

71
00:05:33.290 --> 00:05:36.270
= an arrow function clock.

72
00:05:38.090 --> 00:05:42.780
And that's gonna return math.floor
cuz it needs to be in a whole number.

73
00:05:43.790 --> 00:05:45.970
So it's math.floor always rounds down.

74
00:05:45.970 --> 00:05:49.003
I'm gonna say math.random.

75
00:05:51.323 --> 00:05:52.180
* 3.

76
00:05:52.180 --> 00:05:56.380
So math.random *3 inside of math.floor.

77
00:05:56.380 --> 00:06:00.795
This entire equation is gonna give you
a number between 0 on the lowest end and

78
00:06:00.795 --> 00:06:03.370
2 on the high end, right?

79
00:06:03.370 --> 00:06:07.121
And then we're gonna add 5, so

80
00:06:07.121 --> 00:06:11.730
this is saying, give me a number
between 0 and 2, + add 5, so

81
00:06:11.730 --> 00:06:16.770
5 is the floor, 7 is the ceiling,
so you can either 5, 6 or 7.

82
00:06:16.770 --> 00:06:19.390
And then, we're gonna add clock.

83
00:06:21.110 --> 00:06:25.030
So we're gonna pass in this.clock and
we'll get back the correct time for

84
00:06:25.030 --> 00:06:26.210
the fox to become hungry.

85
00:06:28.680 --> 00:06:29.980
And we're gonna duplicate that line.

86
00:06:29.980 --> 00:06:31.990
So I just hit Ctrl + C, Ctrl + V, and

87
00:06:31.990 --> 00:06:36.571
that'll duplicate the line that I'm on as
long as I haven't highlighted anything.

88
00:06:36.571 --> 00:06:39.830
Or you can just copy and paste.

89
00:06:39.830 --> 00:06:40.370
That works too.

90
00:06:42.460 --> 00:06:48.960
I'm gonna do getNextDieTime, for
how long it takes the fox to die.

91
00:06:50.110 --> 00:06:52.370
And for now, let's make that fairly short.

92
00:06:52.370 --> 00:06:54.800
So, *2 + 3.

93
00:06:56.290 --> 00:06:59.374
So it's really similar,
just I changed the numbers here, and

94
00:06:59.374 --> 00:07:01.830
I'm leaving these formulas
like on the outside.

95
00:07:01.830 --> 00:07:04.750
So here you can go and play with
the timings to make your game more fun.

96
00:07:04.750 --> 00:07:07.555
I don't know if I've made
the most fun version of this,

97
00:07:07.555 --> 00:07:09.534
I entrust you to make the game more fun.

98
00:07:12.614 --> 00:07:16.913
All right so, you have getNextHungerTime,
and getNextDieTime.

99
00:07:18.633 --> 00:07:23.786
And then what we're gonna do is, we're
gonna come back over to our gameState.

100
00:07:23.786 --> 00:07:28.797
And we're gonna grab out of here,
getNextDieTime, and getNextHungerTime and

101
00:07:28.797 --> 00:07:32.720
that'll rearrange that so
it's a little bit easier to read.

102
00:07:32.720 --> 00:07:34.440
It's when you say that thanks prettier.

103
00:07:35.840 --> 00:07:42.198
Add to the state here we're
gonna have a hungryTime -1,

104
00:07:42.198 --> 00:07:46.350
and we're gonna have 1 dieTime, for

105
00:07:46.350 --> 00:07:50.000
how long it takes your Fox to die.

106
00:07:52.900 --> 00:07:58.122
Okay then we're gonna
add in here to our tic

107
00:07:58.122 --> 00:08:06.260
else if this.clock ===
this.hungryTime this.getHungry.

108
00:08:09.144 --> 00:08:14.268
Else if this.clock ===

109
00:08:14.268 --> 00:08:20.061
this.dieTime then dieTime,

110
00:08:20.061 --> 00:08:25.190
you guessed it this.die.

111
00:08:27.160 --> 00:08:34.133
Okay, now in the last lines of wake here,

112
00:08:34.133 --> 00:08:40.114
we're gonna add this.HungryTime

113
00:08:40.114 --> 00:08:44.320
= getNextHungerTime.

114
00:08:44.320 --> 00:08:47.524
And we're just gonna pass in this.clock,
and

115
00:08:47.524 --> 00:08:52.020
now we'll have a appropriately set
time for the fox to get hungry.

116
00:08:55.082 --> 00:09:00.848
And underneath sleep here we're gonna add,
getHungry.

117
00:09:05.200 --> 00:09:12.076
And here we're gonna do
this.current = Hungry.

118
00:09:15.343 --> 00:09:20.015
This.dieTime = getNextDieTime and

119
00:09:20.015 --> 00:09:24.107
I'm gonna pass on this.clock.

120
00:09:28.970 --> 00:09:37.856
And, We're gonna set this.hungryTime,
cuz it became hungry already.

121
00:09:37.856 --> 00:09:42.359
So we're gonna reset that back to -1,
right because it doesn't make sense for

122
00:09:42.359 --> 00:09:44.160
it to continue getting hungry.

123
00:09:48.502 --> 00:09:51.920
And then down here we're gonna
say modFox hungry, right?

124
00:09:51.920 --> 00:09:57.228
Because now it's gonna be doing the word
points at its mouth, animation.

125
00:10:01.923 --> 00:10:03.410
And then one more function here.

126
00:10:03.410 --> 00:10:04.930
We'll do die last.

127
00:10:04.930 --> 00:10:06.858
But for now we'll just have a function.

128
00:10:06.858 --> 00:10:11.881
We're just gonna say console.log,
log dead or something like that.

129
00:10:14.892 --> 00:10:20.490
Or you can just be more appropriate
than I am and say die, okay.

130
00:10:26.001 --> 00:10:28.385
And I need a comma there on line 63.

131
00:10:34.713 --> 00:10:37.659
Okay, so
now I should be able to start my Fox game.

132
00:10:38.751 --> 00:10:39.743
Fox will hatch.

133
00:10:47.092 --> 00:10:54.154
And after 5 to 7 seconds of being awake,
the Fox should start pointing out smells.

134
00:10:58.062 --> 00:11:00.260
And there you go, so
now, the fox is hungry.

135
00:11:01.640 --> 00:11:08.220
And if we wait a bit of time,
like 5, or 10 to 15 seconds, right?

136
00:11:08.220 --> 00:11:11.130
Should wait,
eventually it'll say die, right?

137
00:11:11.130 --> 00:11:12.705
So at that point the fox
would have died and

138
00:11:12.705 --> 00:11:14.966
we would have gone through that
animation process as well.

139
00:11:16.394 --> 00:11:21.298
So the question is, which is a valid
question in this particular case,

140
00:11:21.298 --> 00:11:24.582
why do I prefer here like
we have a lot of else if.

141
00:11:29.241 --> 00:11:35.440
Honestly if I was writing this code from
myself, I probably would have use switch.

142
00:11:35.440 --> 00:11:39.940
But I was reading the code, and
it felt a little too opaque.

143
00:11:39.940 --> 00:11:44.667
So I just felt really obvious for anyone
reading the code that this.clock ===

144
00:11:44.667 --> 00:11:48.640
this.wakeTime, that's readable in a bite.

145
00:11:48.640 --> 00:11:50.650
And so I kinda just went with that.

146
00:11:52.110 --> 00:11:53.370
I have no better reason than that.

147
00:11:53.370 --> 00:11:55.830
Either one of them would have
worked in this particular case.

148
00:11:57.050 --> 00:12:01.920
I use switch down here
because the strings felt

149
00:12:01.920 --> 00:12:06.260
very obvious to me that, I guess string
and number matching felt different to me.

150
00:12:06.260 --> 00:12:09.220
And I don't really have a good
reason other than that.

151
00:12:09.220 --> 00:12:10.087
But that's a valid question.

152
00:12:13.261 --> 00:12:13.854
Okay.

153
00:12:16.732 --> 00:12:21.933
Let's go ahead, and we're gonna
implement how to feed our poorFox,

154
00:12:21.933 --> 00:12:26.815
which you can see here in
the background is just tormenting me.

155
00:12:26.815 --> 00:12:29.685
Let's just cover up our problem there,
perfect.

156
00:12:30.915 --> 00:12:34.175
And we're gonna now implement
the feeding part of this.

157
00:12:37.065 --> 00:12:40.795
So, we have our feed function
already ready, it's here.

158
00:12:40.795 --> 00:12:46.410
So what we're gonna do now,
is we're gonna say if this.current

159
00:12:46.410 --> 00:12:51.910
is not equal to hungry, then this
button doesn't do anything, right?

160
00:12:51.910 --> 00:12:57.338
So we're just gonna return,
but if the fox is hungry,

161
00:12:57.338 --> 00:13:03.359
then you're gonna say
this.current = ''feeding''.

162
00:13:06.657 --> 00:13:13.460
This.dieTime cuz it's no longer
gonna be on the verge of death = -1.

163
00:13:13.460 --> 00:13:20.429
this.poopTime, Is gonna be = getNext,

164
00:13:22.549 --> 00:13:27.529
PoopTime we'll have to go write that
function here in just a second with

165
00:13:27.529 --> 00:13:32.271
passing this.clock and
then we're gonna mod the fox to be eating.

166
00:13:38.252 --> 00:13:42.580
Okay and then the Fox likes to celebrate
whenever it's finished eating.

167
00:13:42.580 --> 00:13:46.320
So we have to set a timer in the future
for the fox to finish eating and

168
00:13:46.320 --> 00:13:48.100
then begin celebrating.

169
00:13:48.100 --> 00:13:52.475
So this time to start celebrating,

170
00:13:52.475 --> 00:13:59.853
timeToStartCelebrating =

171
00:13:59.853 --> 00:14:05.160
this.clock + and I put 2,

172
00:14:05.160 --> 00:14:10.962
that's how long it'll finish eating and
then begin celebrating.

173
00:14:10.962 --> 00:14:13.832
[BLANK AUDIO]

