WEBVTT

1
00:00:00.000 --> 00:00:05.765
So now we have a running clock, we have
user inactivity, and we have the ability

2
00:00:05.765 --> 00:00:11.373
to respond to a user saying feed or
change the weather or something like that.

3
00:00:11.373 --> 00:00:15.178
So let's just start at our finite
state machine moving, right, and

4
00:00:15.178 --> 00:00:16.168
get it in motion.

5
00:00:17.803 --> 00:00:21.825
So the first thing I wanna do is I
wanna make a startGame function.

6
00:00:21.825 --> 00:00:23.727
So we're gonna go back over to gameState.

7
00:00:25.669 --> 00:00:28.604
And inside of it here doesn't really
matter what order these functions come in

8
00:00:28.604 --> 00:00:30.120
I'm just gonna put a here in the middle.

9
00:00:30.120 --> 00:00:35.417
I'm gonna make a function
called startGame, Okay.

10
00:00:38.961 --> 00:00:43.869
And just to kind of reassure myself
that stuff is happening I'm gonna put

11
00:00:43.869 --> 00:00:45.090
a console.log.

12
00:00:45.090 --> 00:00:47.937
You can see I'm a big fan of console.log,
I use it quite a bit.

13
00:00:47.937 --> 00:00:53.566
I'm gonna put ("Hatching"), And

14
00:00:53.566 --> 00:00:57.548
I'm gonna say this.current =

15
00:00:57.548 --> 00:01:02.461
"HATCHING", Right?

16
00:01:02.461 --> 00:01:07.482
So I've moved my finite state machine
forward from INIT to HATCHING.

17
00:01:07.482 --> 00:01:10.950
So now, this.current this one here
will now be equal to HATCHING.

18
00:01:13.052 --> 00:01:18.296
And then, I'm going to define a time
that I'm going to wake up, so

19
00:01:18.296 --> 00:01:25.053
I'm gonna say this.wakeTime = this.clock,
so the current time, +3, right?

20
00:01:25.053 --> 00:01:28.463
You can define what you want this to be,
I'm gonna make it wait for

21
00:01:28.463 --> 00:01:32.390
3 seconds, so it takes the fox
9 seconds to hatch, right?

22
00:01:32.390 --> 00:01:35.515
And then I'll also have to
initialize that as well.

23
00:01:35.515 --> 00:01:37.794
So I'm gonna put wakeTime and

24
00:01:37.794 --> 00:01:42.362
I just put anything that's
not currently working as -1.

25
00:01:42.362 --> 00:01:46.280
This is called a sentinel value that it
doesn't actually mean that the clock's

26
00:01:46.280 --> 00:01:50.436
gonna do something at -1 it just means
if it's at -1 it's not currently active.

27
00:01:50.436 --> 00:01:51.552
You could put this at undefined.

28
00:01:51.552 --> 00:01:53.090
You could put whatever you want.

29
00:01:53.090 --> 00:01:56.947
I tend to keep things in the same type,
and I think that's just a habit of writing

30
00:01:56.947 --> 00:02:00.135
too much type script cuz type
script would yell at you otherwise.

31
00:02:02.901 --> 00:02:06.827
All right, so that will start the game
whenever I call that function.

32
00:02:08.331 --> 00:02:10.690
But we have to have a wake as well, so

33
00:02:10.690 --> 00:02:14.872
whenever the hatching time comes
up we want it to wake, right?

34
00:02:16.917 --> 00:02:22.209
So what we're gonna do is make a function
here I'm gonna put a console.log,

35
00:02:23.282 --> 00:02:24.513
And we'll put awoken.

36
00:02:27.489 --> 00:02:30.920
This.current will go from
hatching to idling, right?

37
00:02:30.920 --> 00:02:35.885
To just standing by, so
we're gonna put this.current = "IDLING''.

38
00:02:37.622 --> 00:02:45.643
And then we'll set this.wakeTime back to
-1 cuz it's no longer waiting to wake up.

39
00:02:45.643 --> 00:02:48.422
If I call startGame
this will get it going.

40
00:02:48.422 --> 00:02:50.832
I mean,
I could even go as far as to do this.

41
00:02:50.832 --> 00:02:52.946
You don't have to follow this
I'm just gonna show you.

42
00:02:52.946 --> 00:02:56.894
window.gameState = gameState.

43
00:02:56.894 --> 00:03:03.153
And now if I come back over here,
I can actually say gameState.startGame and

44
00:03:03.153 --> 00:03:06.619
call it you can see here
it says hatching and

45
00:03:06.619 --> 00:03:10.774
then after a few amount of
ticks it'll say awoken.

46
00:03:10.774 --> 00:03:15.088
It actually won't do that because we
haven't actually made that work yet

47
00:03:15.088 --> 00:03:18.511
but it would if there was
anything watching for that time.

48
00:03:18.511 --> 00:03:20.442
So we're gonna have to go
put that into tick, right?

49
00:03:20.442 --> 00:03:25.072
Because tick to has to track these times.

50
00:03:25.072 --> 00:03:28.981
Before we go do that let's go make
the handleUserAction work first.

51
00:03:28.981 --> 00:03:31.371
I think that's a better thing to do first.

52
00:03:31.371 --> 00:03:35.084
So inside of handleUserAction,
we already know this console or

53
00:03:35.084 --> 00:03:40.118
this works it's getting the correct icon
so I'm just gonna delete the console.log.

54
00:03:42.009 --> 00:03:46.932
And I'm gonna say the first thing,
like one of our rules is that if the fox

55
00:03:46.932 --> 00:03:51.780
is sleeping, feeding, celebrating or
hatching it can't do anything

56
00:03:51.780 --> 00:03:56.502
which means that you do not respond
to user input during those times.

57
00:03:56.502 --> 00:03:59.982
So I'm gonna say if it's ([ "SLEEP",
"FEEDING",

58
00:04:03.024 --> 00:04:09.011
"CELEBRATING", Or

59
00:04:09.011 --> 00:04:12.339
"HATCHING" ], And you say,

60
00:04:12.339 --> 00:04:17.475
includes (this.current) which
is another way of saying if

61
00:04:17.475 --> 00:04:23.499
this.current is inside of this array
that'll be true if it's asleep,

62
00:04:23.499 --> 00:04:28.732
feeding, celebrating, or
hatching, then // do nothing,

63
00:04:28.732 --> 00:04:32.983
and you just return, Okay?

64
00:04:34.812 --> 00:04:38.395
So that's our first order of business,
do nothing in these particular states.

65
00:04:40.622 --> 00:04:42.032
When do we start the game?

66
00:04:42.032 --> 00:04:46.410
If the user presses the middle button
w/hen do we actually call startGame?

67
00:04:46.410 --> 00:04:51.186
So we're gonna say, And
we can use the same trick actually,

68
00:04:51.186 --> 00:04:54.097
you can do it either one of two ways,
my notes have it this way.

69
00:04:54.097 --> 00:05:00.953
You could do it this way where you
say this array includes blah, or

70
00:05:00.953 --> 00:05:06.200
you can say if (this.current === "INIT".

71
00:05:06.200 --> 00:05:13.126
Or you can restart the game if the fox
is dead, so this.current === "DEAD".

72
00:05:15.592 --> 00:05:19.729
If either one of those is true then
you're gonna say this.startGame,

73
00:05:23.631 --> 00:05:27.208
And then you return because at
that point you're done, okay?

74
00:05:28.976 --> 00:05:33.794
And then next, Last thing we're
gonna do is we're gonna put switch,

75
00:05:33.794 --> 00:05:36.663
we're gonna use a switch statement
based on which icon they clicked.

76
00:05:39.052 --> 00:05:46.728
So in case "weather" you're gonna call
a function called this.changeWeather,

77
00:05:49.884 --> 00:05:52.202
Which we'll make in a second and
then break.

78
00:06:01.868 --> 00:06:09.480
Case, poop,
Then we're gonna say this.cleanupPoop.

79
00:06:14.423 --> 00:06:15.755
Break.

80
00:06:18.028 --> 00:06:21.838
In case "fish",

81
00:06:24.007 --> 00:06:27.873
Call this.feed and then break.

82
00:06:32.370 --> 00:06:36.018
Okay, so this is just kind of
saying if icon is equal, and

83
00:06:36.018 --> 00:06:41.420
icon refers to this icon right,
the one that's passed into the function.

84
00:06:41.420 --> 00:06:43.382
If it's weather,
then call the changeWeather function.

85
00:06:43.382 --> 00:06:45.538
If it's poop,
call the cleanupPoop function.

86
00:06:45.538 --> 00:06:48.752
If it's fish then call the feed function.

87
00:06:48.752 --> 00:06:50.872
And we're gonna go just
make placeholders for that.

88
00:06:50.872 --> 00:06:56.887
So changeWeather,
I'm just gonna make a console.log.

89
00:06:58.534 --> 00:07:01.585
ChangeWeather.

90
00:07:04.098 --> 00:07:12.602
For cleanup poop,
console.log ("cleanUpPoop").

91
00:07:20.561 --> 00:07:27.987
And last one feed,
Is console.log ("feed").

92
00:07:31.848 --> 00:07:34.071
And I need to comma there.

93
00:07:34.071 --> 00:07:36.290
There we go.

94
00:07:36.290 --> 00:07:42.330
Okay, so the one thing that we did
accomplish in this particular case,

95
00:07:44.431 --> 00:07:49.475
If you click the middle button now
you should get, this is undefined.

96
00:07:49.475 --> 00:07:53.921
That's true and
we do still have a problem with this.

97
00:07:53.921 --> 00:07:56.372
What is that?

98
00:07:56.372 --> 00:08:00.320
Well, if we come back over
here to our function.

99
00:08:00.320 --> 00:08:05.369
When I call this.startGame what is this?

100
00:08:05.369 --> 00:08:07.654
What is this right here?

101
00:08:09.340 --> 00:08:14.794
Well, you would hope it would be gameState
that's what your intention of that is.

102
00:08:14.794 --> 00:08:17.710
But it turns out that's actually
not the case right now.

103
00:08:17.710 --> 00:08:18.999
Why?

104
00:08:18.999 --> 00:08:21.251
Where is it actually being called?

105
00:08:21.251 --> 00:08:25.869
If you go over to buttons.js it's being
called here handleUserAction which

106
00:08:25.869 --> 00:08:27.980
is being called from here.

107
00:08:27.980 --> 00:08:32.622
And this is going to be, it's probably
a window if I had to take my guess.

108
00:08:32.622 --> 00:08:33.837
We can take a look.

109
00:08:36.890 --> 00:08:42.162
So if I say console.log this
right here and I refresh, and

110
00:08:42.162 --> 00:08:47.556
I click, it's just undefined so
it's not even that.

111
00:08:47.556 --> 00:08:52.440
And that's because it's invoking that
from the browser it's not invoking it

112
00:08:52.440 --> 00:08:54.441
from the context of gameState.

113
00:08:54.441 --> 00:08:55.981
So how do we handle this?

114
00:08:55.981 --> 00:08:57.982
We can use something called bind.

115
00:08:57.982 --> 00:09:04.074
So what we're gonna do is we're gonna
say export default handleUserAction or

116
00:09:04.074 --> 00:09:08.229
not default rather export
const handleUserAction =

117
00:09:08.229 --> 00:09:11.661
handleUserAction.bind (gameState).

118
00:09:17.003 --> 00:09:18.961
So what is this?

119
00:09:18.961 --> 00:09:23.771
Now we have a named export here called
handleUserAction and we've pulled out

120
00:09:23.771 --> 00:09:28.877
handleUserAction and we've bound,
this is a something built into JavaScript,

121
00:09:28.877 --> 00:09:34.510
we've bound gameState to be this no
matter what, no matter where it's called.

122
00:09:34.510 --> 00:09:38.295
If you've watched my previous
versions of the React training,

123
00:09:38.295 --> 00:09:41.949
we have to handle this as well in React,
it's pretty common.

124
00:09:41.949 --> 00:09:47.227
So this is just binding the context of
handleUserAction to always be this,

125
00:09:47.227 --> 00:09:49.002
to always be gameState.

126
00:09:49.002 --> 00:09:53.687
Now we have to go back over to,
INIT.js and

127
00:09:53.687 --> 00:10:01.774
here next to game we're gonna also
pull out handleUserAction like this.

128
00:10:03.131 --> 00:10:06.073
And we're just going to
pass in handleUserAction

129
00:10:06.073 --> 00:10:08.882
instead of gain.handleUserAction, right?

130
00:10:08.882 --> 00:10:12.564
And now this is going to be the bound
version of handleUserAction and

131
00:10:12.564 --> 00:10:15.414
that's what's gonna be
passed into INIT buttons.

132
00:10:18.420 --> 00:10:23.961
Okay, so now, Can't access lexical

133
00:10:23.961 --> 00:10:29.383
declaration, handleUserAction.

134
00:10:29.383 --> 00:10:36.215
It's actually going to be = export const
handleUserAction game.handleUserAction,

135
00:10:37.687 --> 00:10:44.372
gameState, gameState.handleUserAction,
Right?

136
00:10:44.372 --> 00:10:48.502
Because it's actually on
gameState right there.

137
00:10:48.502 --> 00:10:52.321
So gameState.handleUserAction.

138
00:10:52.321 --> 00:10:56.498
So game state.handleUserAction.bind
(gameState) and

139
00:10:56.498 --> 00:11:01.408
you're exporting that which you're
then passing over to buttons.js

140
00:11:01.408 --> 00:11:05.358
that's importing or
it's actually rather it's INIT.

141
00:11:07.331 --> 00:11:11.431
This here is now a bound handleUserAction
which is then being passed into an INIT

142
00:11:11.431 --> 00:11:14.868
buttons, which is here in buttons,
which is this function here.

143
00:11:14.868 --> 00:11:17.973
And that's only being called when
the user clicks the middle button.

144
00:11:20.572 --> 00:11:24.920
Now, if I click this,
you can see it goes to hatching which so

145
00:11:24.920 --> 00:11:27.150
it's calling that INIT game.

