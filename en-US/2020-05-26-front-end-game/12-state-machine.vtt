WEBVTT

1
00:00:00.008 --> 00:00:01.613
So I'm gonna take a second.

2
00:00:01.613 --> 00:00:03.808
This is the most computer
science we're gonna get, and

3
00:00:03.808 --> 00:00:05.880
it's not gonna be that computer sciency.

4
00:00:05.880 --> 00:00:09.430
But I wanna talk about kind of
some thought process that kind of

5
00:00:09.430 --> 00:00:13.950
revolutionized the way that I thought
about writing code, and particularly,

6
00:00:13.950 --> 00:00:18.920
user interface kind of facing
code/front-end development.

7
00:00:18.920 --> 00:00:22.096
So there's a thing called
a Finite State Machine, or an FSM,

8
00:00:22.096 --> 00:00:23.632
as it's often abbreviated.

9
00:00:23.632 --> 00:00:27.360
But let's stick to a state machine,
this is what I'm gonna call it.

10
00:00:27.360 --> 00:00:30.050
It's a methodology of writing code, and

11
00:00:30.050 --> 00:00:34.270
how to track variables that
prevents a lot of styles of bugs.

12
00:00:35.420 --> 00:00:39.300
So I think the best way to illustrate
what a finite state machine is is to use

13
00:00:39.300 --> 00:00:39.870
an example.

14
00:00:40.930 --> 00:00:45.452
And I'm gonna borrow this example from
xdate docs, because it's a great library

15
00:00:45.452 --> 00:00:49.700
that does finite state machines,
and they have good docs.

16
00:00:49.700 --> 00:00:55.390
So you as a human being are either asleep,
or awake at any given time.

17
00:00:55.390 --> 00:00:57.460
And let's just assume
that that's the case.

18
00:00:57.460 --> 00:01:00.120
I'm sure that you can come up with some
medical reason that's not the case.

19
00:01:00.120 --> 00:01:03.930
But for now, just bear with me, I suppose.

20
00:01:03.930 --> 00:01:06.877
Okay, so you're either awake,
or you're asleep.

21
00:01:06.877 --> 00:01:08.753
There's no in between state there.

22
00:01:08.753 --> 00:01:15.470
And you are never both awake and asleep,
and you are neither awake nor asleep.

23
00:01:15.470 --> 00:01:18.460
You're either awake,
or you are asleep, and

24
00:01:18.460 --> 00:01:20.590
you're always in exactly
one of those states.

25
00:01:22.070 --> 00:01:25.180
This is kind of what a finite
state machine does for

26
00:01:25.180 --> 00:01:29.770
you, is it's saying here are my
various different states.

27
00:01:29.770 --> 00:01:32.510
I can only be in one of
these states at a time.

28
00:01:32.510 --> 00:01:36.770
And I can only go from this state to this
state, and this state to this state.

29
00:01:36.770 --> 00:01:41.060
So using our fox as the example,
our fox is idling.

30
00:01:41.060 --> 00:01:42.697
Then they become hungry.

31
00:01:42.697 --> 00:01:44.078
Then they become fed.

32
00:01:44.078 --> 00:01:47.560
Then they poop, and then they get cleaned
up, and they're back to idling, right?

33
00:01:47.560 --> 00:01:51.648
And so they're in one of these
distinct states at any given time.

34
00:01:51.648 --> 00:01:54.687
So we're gonna kind of model
our code in the sense.

35
00:01:54.687 --> 00:01:59.036
A lot of people will use like
Booleans to track these,

36
00:01:59.036 --> 00:02:03.009
like is awake, is asleep,
is feeding, is fed.

37
00:02:03.009 --> 00:02:07.060
And it's really easy to get out
of sync using these Booleans.

38
00:02:08.090 --> 00:02:11.580
So we're gonna use something
called an enumerated type,

39
00:02:11.580 --> 00:02:12.830
is what you would call it.

40
00:02:12.830 --> 00:02:15.608
If you're using programming terms,

41
00:02:15.608 --> 00:02:19.300
it's basically a variable that can only
be one of these separate things, right?

42
00:02:19.300 --> 00:02:21.600
So you can see here,
I have a list of here.

43
00:02:21.600 --> 00:02:25.532
These are actually all of the states that
our game can be in at any given time.

44
00:02:25.532 --> 00:02:28.760
Our game can only be in one of these
states at any given time, right?

45
00:02:28.760 --> 00:02:31.910
It can only be in it hashing,
idling, sleeping, eating, pooping,

46
00:02:31.910 --> 00:02:34.550
hungry, celebrating, or
dead, and that is it.

47
00:02:35.590 --> 00:02:37.110
And so our game will constantly

48
00:02:38.580 --> 00:02:41.180
go through these various different
states at different points, right?

49
00:02:42.260 --> 00:02:43.908
And those will have derived states, right?

50
00:02:43.908 --> 00:02:48.590
So a good example of a derived state,
like our eyes closed, right?

51
00:02:48.590 --> 00:02:50.910
If you're asleep, your eyes are closed.

52
00:02:50.910 --> 00:02:55.280
And if you're awake your eyes are,
in general, open, right?

53
00:02:55.280 --> 00:02:58.440
So that's what these kind of
derived states, is you look at

54
00:02:58.440 --> 00:03:02.410
the master state of this, and then you
look at the derived states from there.

55
00:03:02.410 --> 00:03:06.585
The person that talks a lot about
finite state machines in the front-end

56
00:03:06.585 --> 00:03:10.976
development communities is David
Khourshid, or davidkpiano on Twitter.

57
00:03:10.976 --> 00:03:13.220
Definitely worth following him.

58
00:03:13.220 --> 00:03:17.209
He has an upcoming course on Frontend
Masters about finite state machines,

59
00:03:17.209 --> 00:03:21.344
and I am going to watch it, because it's
something that I wanna get better at.

60
00:03:21.344 --> 00:03:23.130
So I would definitely take a look at that.

61
00:03:23.130 --> 00:03:24.250
By the time that you watch this,

62
00:03:24.250 --> 00:03:26.600
it might have already happened,
or it might already be recorded.

63
00:03:26.600 --> 00:03:28.190
So definitely keep an eye on that.

64
00:03:29.360 --> 00:03:31.260
But he wrote the library called xstate,
and

65
00:03:31.260 --> 00:03:34.790
it's a great way of modeling finite
state machines in JavaScript.

66
00:03:36.460 --> 00:03:39.530
Actually, a really good thing to do
after this course would be go and

67
00:03:39.530 --> 00:03:43.940
redo this with xstate, and I think your
code would end up cleaner, honestly.

68
00:03:43.940 --> 00:03:45.245
So keep that in mind.

69
00:03:45.245 --> 00:03:46.054
Maybe give it a shot.

70
00:03:46.054 --> 00:03:48.460
If you do, put it on GitHub and show me.

71
00:03:50.518 --> 00:03:54.760
So we're gonna kind of approximate this,
and I think we might offensively do it

72
00:03:54.760 --> 00:03:57.978
to David, cuz he is a bit of a purist
when it comes to these kind of things.

73
00:03:57.978 --> 00:04:00.690
But we're gonna have this
thing called current,

74
00:04:00.690 --> 00:04:03.680
which is going to be basically
the state of our finite state machine.

75
00:04:05.000 --> 00:04:08.680
So your game is going to start
in the state called init, right?

76
00:04:08.680 --> 00:04:11.470
Which means that in init,
you can't be fed, right?

77
00:04:11.470 --> 00:04:14.970
So it's a really easy thing that we
[INAUDIBLE] wait, can I do this right now?

78
00:04:14.970 --> 00:04:18.860
No I can, or yes I can,
or something like that.

79
00:04:18.860 --> 00:04:26.977
So what I want you to do is I want you
to pop back over to your editor, okay?

80
00:04:26.977 --> 00:04:29.433
Now I want you to create a new file.

81
00:04:29.433 --> 00:04:34.721
And I want you to put it in fox game
source, inside of the source directory.

82
00:04:34.721 --> 00:04:39.427
And this is gonna be
called gamestate.js okay?

83
00:04:43.117 --> 00:04:48.974
Inside of gamestate,
I want you to put const gamestate =,

84
00:04:48.974 --> 00:04:56.020
and then it's an object, and
it's gonna have a value called current.

85
00:04:57.070 --> 00:05:00.060
And that state is going to be in net.

86
00:05:02.018 --> 00:05:05.230
Okay, we're gonna keep track of
what clock tick we're on, so

87
00:05:05.230 --> 00:05:07.410
we can kind of keep track over time.

88
00:05:07.410 --> 00:05:08.912
So we're gonna start at one.

89
00:05:08.912 --> 00:05:10.980
You could start at zero,
you could start at whatever you want.

90
00:05:10.980 --> 00:05:14.446
I'm just gonna start at one,
doesn't really matter.

91
00:05:14.446 --> 00:05:16.190
We're gonna write our own
tick function in here, and

92
00:05:16.190 --> 00:05:17.640
then we're gonna use
it in the other place.

93
00:05:20.510 --> 00:05:26.065
And then whenever it ticks,
we're gonna say at this.clock++, right?

94
00:05:26.065 --> 00:05:30.600
++ meaning it's going to increment every
single time that tick gets called.

95
00:05:31.890 --> 00:05:36.435
For now, we're just gonna say console.log.

96
00:05:36.435 --> 00:05:40.754
And we're gonna say clock, this.clock.

97
00:05:43.898 --> 00:05:46.266
And then you can return this.clock.

98
00:05:46.266 --> 00:05:50.150
I tend to return it, but I don't think we
ever use it anymore, so it doesn't matter.

99
00:05:52.973 --> 00:05:55.355
Okay, and
then we're gonna say at the bottom,

100
00:05:58.194 --> 00:06:02.998
Export default on a clock, but gamestate.

101
00:06:05.847 --> 00:06:10.243
Okay, so I think in my notes there,
I actually had it as module or exports.

102
00:06:10.243 --> 00:06:12.643
Really, what you want is export default,

103
00:06:12.643 --> 00:06:15.589
cuz we're gonna use
the latest ES6 style modules.

104
00:06:17.560 --> 00:06:21.380
Okay, so now I've made this module, and

105
00:06:21.380 --> 00:06:24.875
I'm gonna go then import this inside
of init, and use it inside of init.

106
00:06:26.560 --> 00:06:30.933
Okay, so
we're gonna go over to our init.js.

107
00:06:30.933 --> 00:06:35.951
And at the very, very top, we're gonna

108
00:06:35.951 --> 00:06:42.010
say import gamestate from "./gamestate".

109
00:06:43.080 --> 00:06:47.500
So now that module,
I just wrote in the other library, or

110
00:06:47.500 --> 00:06:52.855
in the other file is now available
to be used here inside of init.js.

111
00:06:54.983 --> 00:06:56.771
So we can delete our tick function,

112
00:06:56.771 --> 00:06:59.639
cuz we now have reimplemented
that inside of gamestate.

113
00:07:03.228 --> 00:07:10.660
Here inside of where we have tick,
we're just gonna put gamestate.tick

114
00:07:13.579 --> 00:07:16.490
And actually, my notes here just to
say stay consistent with my notes.

115
00:07:17.930 --> 00:07:20.090
I have game, it doesn't really matter.

116
00:07:20.090 --> 00:07:21.420
It's just a variable name.

117
00:07:21.420 --> 00:07:23.060
But game.tick, doesn't matter.

118
00:07:23.060 --> 00:07:23.620
Both of them work.

119
00:07:23.620 --> 00:07:28.690
Okay, so now, if we save it, and we go
back over to our running game over here,

120
00:07:28.690 --> 00:07:31.540
which, you should still have parcel
running, if not, go restart that.

121
00:07:33.900 --> 00:07:37.180
And I refresh my page, which I don't,
you can see that I don't have it running.

122
00:07:37.180 --> 00:07:39.500
So let's just do that npm run dev.

123
00:07:42.390 --> 00:07:44.040
Okay, and
now we can go back over here and run it.

124
00:07:45.200 --> 00:07:49.440
And you can see down at the bottom,
you will have our clock running.

125
00:07:49.440 --> 00:07:53.320
So you can see it says 234, and it's
pretty consistent at every three seconds.

126
00:07:53.320 --> 00:07:56.664
It's going to log out
the current state of our clock.

127
00:07:58.680 --> 00:08:02.159
And now with our clock,
we can say if this is the correct number,

128
00:08:02.159 --> 00:08:03.711
then do this thing, right?

129
00:08:03.711 --> 00:08:07.100
If it's clock is equal to 10,
then make the fox hungry, right?

130
00:08:07.100 --> 00:08:09.710
We're kind of making that clock work now.

