WEBVTT

1
00:00:00.000 --> 00:00:05.525
The last thing I wanna talk about in
terms of fundamentals is what to animate.

2
00:00:05.525 --> 00:00:09.518
So with CSS, you could actually
animate a lot of things.

3
00:00:09.518 --> 00:00:16.711
So, for example, let's say that I wanted
to animate the font size of this h1.

4
00:00:16.711 --> 00:00:21.333
So let's say that this is font size,
probably 2rem or something like that.

5
00:00:21.333 --> 00:00:23.270
Let's say I wanted to make it really big.

6
00:00:23.270 --> 00:00:28.296
And so when I hover over it, and
this is a good SAS lesson, too, if you

7
00:00:28.296 --> 00:00:34.386
put the ampersand, it's going to basically
copy this over and put that over here.

8
00:00:34.386 --> 00:00:38.051
So if I do hover and I do font-size,

9
00:00:38.051 --> 00:00:43.318
something big, like 5vw or
something like that.

10
00:00:45.634 --> 00:00:50.442
That's not very big,
[LAUGH] let's do it like 10vw, just so

11
00:00:50.442 --> 00:00:54.424
you could see that it is
going from small to bigger.

12
00:00:54.424 --> 00:01:01.200
And again, if you don't want to use SCSS,
this is exactly the same as doing this.

13
00:01:01.200 --> 00:01:07.157
So, When you hover over it,
the font size is going to be big.

14
00:01:07.157 --> 00:01:08.684
Now, let's add a transition.

15
00:01:10.665 --> 00:01:12.595
And so again, this is just an example,

16
00:01:12.595 --> 00:01:15.294
we're gonna be talking about
this in the next lesson.

17
00:01:15.294 --> 00:01:22.560
But, When I hover over it, the font
size does get a little bit bigger.

18
00:01:22.560 --> 00:01:27.238
Now, the problem with this, which it
might not seem like a problem, but

19
00:01:27.238 --> 00:01:30.996
it definitely does become a problem
when you had a web app or

20
00:01:30.996 --> 00:01:34.677
a complex website that has
a ton of different elements and

21
00:01:34.677 --> 00:01:39.235
those elements are all nested in
each other and everything like that.

22
00:01:39.235 --> 00:01:44.739
The problem is that these kinds of
animations actually become expensive.

23
00:01:44.739 --> 00:01:50.423
And so by expensive,
I mean they trigger what's called layouts.

24
00:01:50.423 --> 00:01:54.825
And so you could look at more
information on csstriggers.com.

25
00:01:54.825 --> 00:01:58.815
But the main idea is that
when you're animating,

26
00:01:58.815 --> 00:02:04.239
there's two different things that
are doing the animation in CSS.

27
00:02:04.239 --> 00:02:09.365
There is the GPU, which is the graphics
processing unit, and the CPU,

28
00:02:09.365 --> 00:02:15.195
which is the, I just say CPU, computer
processing unit, something like that.

29
00:02:15.195 --> 00:02:20.346
And so the GPU, when you hand things
off to the GPU, you're basically

30
00:02:20.346 --> 00:02:25.756
giving it a surface in which it could do
a lot of things in a really fast way,

31
00:02:25.756 --> 00:02:29.541
which is to transform it and
to change the opacity.

32
00:02:29.541 --> 00:02:33.432
Because think about having it on
a really stretchy piece of paper.

33
00:02:33.432 --> 00:02:37.256
With that paper, you don't care about
any other elements on the website.

34
00:02:37.256 --> 00:02:40.464
You could stretch it, you can make
it longer, you could shrink it,

35
00:02:40.464 --> 00:02:44.310
you could skew it, you could rotate it,
you could do all sorts of things with it.

36
00:02:44.310 --> 00:02:46.765
You could even animate it in 3D.

37
00:02:46.765 --> 00:02:50.745
And so what's performance about this and
what the GPU is really good at

38
00:02:50.745 --> 00:02:55.481
is because it's on its own layer, we don't
need to care about the other elements.

39
00:02:55.481 --> 00:02:59.252
So we don't need to do
the computation of if this moves,

40
00:02:59.252 --> 00:03:01.995
then these other elements should move.

41
00:03:01.995 --> 00:03:04.627
So again, the GPU is really good at that.

42
00:03:04.627 --> 00:03:08.782
And these are going to be where your
most performant animations are.

43
00:03:08.782 --> 00:03:13.457
And by performance I mean getting
to 60 frames per second or

44
00:03:13.457 --> 00:03:17.132
as close to 60 frames
per second as possible.

45
00:03:17.132 --> 00:03:21.847
Now when we do color in background,
now we're not talking to the GPU.

46
00:03:21.847 --> 00:03:24.487
We're talking to the browser,
or, well, I mean,

47
00:03:24.487 --> 00:03:28.150
we're always talking to the browser but
we're more talking to the CPU.

48
00:03:28.150 --> 00:03:32.066
Because it needs to actually
change the color of something or

49
00:03:32.066 --> 00:03:36.213
change the background,
just replace it with something else and

50
00:03:36.213 --> 00:03:41.158
calculate the transitions between,
for example, two different colors.

51
00:03:41.158 --> 00:03:45.419
Now, while this is not going to trigger
layout and it's not going to say,

52
00:03:45.419 --> 00:03:49.780
cuz when you change the color of
something, you're not moving anything.

53
00:03:49.780 --> 00:03:53.978
So we're not having to do
any of those computations,

54
00:03:53.978 --> 00:03:59.034
instead we're just changing the color,
that triggers paint.

55
00:03:59.034 --> 00:04:03.462
And so triggering paints, you could
still get to 60 frames per second, but

56
00:04:03.462 --> 00:04:06.393
if you're triggering paints
on a lot of elements,

57
00:04:06.393 --> 00:04:09.483
that could actually be
computationally expensive.

58
00:04:09.483 --> 00:04:14.363
So whereas transforms and
opacity are really performance, color and

59
00:04:14.363 --> 00:04:19.077
background is something that of course,
you can animate them, but

60
00:04:19.077 --> 00:04:22.732
you want to be really
careful about animating them.

61
00:04:22.732 --> 00:04:27.286
Now the things where you want to
avoid animating as much as possible,

62
00:04:27.286 --> 00:04:29.497
are things that trigger layout.

63
00:04:29.497 --> 00:04:34.303
And so these are things like height,
width, left, right, margin,

64
00:04:34.303 --> 00:04:36.430
padding, even border sizes.

65
00:04:36.430 --> 00:04:39.390
Those things are going
to trigger layout and

66
00:04:39.390 --> 00:04:43.641
be the most computationally expensive for
the CPU to animate.

67
00:04:43.641 --> 00:04:48.462
And the reason is because when you
are changing one of these properties,

68
00:04:48.462 --> 00:04:53.204
the browser has to reflow all
the elements that are surrounding it, and

69
00:04:53.204 --> 00:04:56.143
maybe even more elements like the parents.

70
00:04:56.143 --> 00:04:59.085
And so
now you're not just animating one thing.

71
00:04:59.085 --> 00:05:02.473
You also have to think about how
everything else is positioned in

72
00:05:02.473 --> 00:05:03.236
the browser.

73
00:05:03.236 --> 00:05:08.030
So it's sort of like a domino effect where
if you change the margin on one elements

74
00:05:08.030 --> 00:05:13.321
that affects another elements, which could
affect the parents, which could affect its

75
00:05:13.321 --> 00:05:18.569
neighboring elements, which could affect
their parents, and it just becomes a mess.

76
00:05:18.569 --> 00:05:23.812
So we're gonna be talking about that too,
we're basically only

77
00:05:23.812 --> 00:05:29.260
going to be using transform opacity,
and color, and background.

78
00:05:29.260 --> 00:05:34.431
So again, try to avoid animating height,
width, left, and right.

79
00:05:34.431 --> 00:05:39.376
Now the last thing I wanna say about
this is I talked about 60 frames per

80
00:05:39.376 --> 00:05:41.070
second as a goal.

81
00:05:41.070 --> 00:05:44.875
And so 60 frames per second seems
like a really arbitrary number.

82
00:05:44.875 --> 00:05:47.001
And some of you might be saying, hey,

83
00:05:47.001 --> 00:05:51.388
I have games that play at 30 frames per
second and they're pretty snappy, or

84
00:05:51.388 --> 00:05:54.385
I have a VR headset that's
100 frames per second.

85
00:05:54.385 --> 00:05:57.722
So what is so
special about 60 frames per second?

86
00:05:57.722 --> 00:06:03.084
And so what's special about is that,
that is the monitor refresh rate.

87
00:06:03.084 --> 00:06:09.754
So the monitor is refreshing every,
it comes out to 16.667 milliseconds,

88
00:06:09.754 --> 00:06:15.663
and so that is your window where it's
basically a frame of an animation.

89
00:06:15.663 --> 00:06:21.042
So if you remember those old films,
those big film strips, you could

90
00:06:21.042 --> 00:06:27.087
think of every 16.667 milliseconds
as one panel of those film strips.

91
00:06:27.087 --> 00:06:32.092
So what happens if you miss that window
because something is taking too long to

92
00:06:32.092 --> 00:06:37.097
animate, or to compute for the animation,
is that it's going to exceed that

93
00:06:37.097 --> 00:06:42.415
budget of 16.67 milliseconds and
bleed over into the next animation frame.

94
00:06:42.415 --> 00:06:46.774
And now you're going to have multiple
animation frames with the same animation.

95
00:06:46.774 --> 00:06:51.764
And so the result to the user is what's
called jank, where it doesn't feel smooth,

96
00:06:51.764 --> 00:06:53.609
it feels like it's stopping.

97
00:06:53.609 --> 00:06:57.267
And then it's going back to where it
needs to be and then stopping, and

98
00:06:57.267 --> 00:06:58.637
it just feels very laggy.

99
00:06:58.637 --> 00:07:02.326
It's not a very pleasant user experience.

100
00:07:02.326 --> 00:07:06.094
So that is all the fundamentals
I wanted to talk about.

101
00:07:06.094 --> 00:07:07.805
Are there any questions?

102
00:07:10.106 --> 00:07:11.459
&gt;&gt; You got more of a comment, I guess.

103
00:07:11.459 --> 00:07:12.405
But-
&gt;&gt; Yeah.

104
00:07:12.405 --> 00:07:15.599
&gt;&gt; I'm glad you bring this up because
I think with a lot of animations,

105
00:07:15.599 --> 00:07:19.259
you don't really think about the end
performance, you try and make it cool.

106
00:07:19.259 --> 00:07:22.185
And that's taxing on the page.

107
00:07:22.185 --> 00:07:24.670
And with things coming up
like Google performance,

108
00:07:24.670 --> 00:07:28.397
your Lighthouse score goes way down with
your repaints and your reshifts, and

109
00:07:28.397 --> 00:07:30.605
then your page drops
down in that SEO listing.

110
00:07:30.605 --> 00:07:34.521
Which is not something that every
developer thinks about when they're making

111
00:07:34.521 --> 00:07:36.311
a feature or animating something.

112
00:07:36.311 --> 00:07:41.113
So I'm glad you bring that up because
it's not always on the forefront of every

113
00:07:41.113 --> 00:07:45.224
developer in my experience,
&gt;&gt; Right, yeah, that's a really good

114
00:07:45.224 --> 00:07:49.998
point, especially if you want your website
to get all of those green rings for

115
00:07:49.998 --> 00:07:55.569
Lighthouse insights, where,
You could generate a report,

116
00:07:55.569 --> 00:07:58.146
I actually don't know how well
this is going to perform.

117
00:07:58.146 --> 00:08:02.903
But, [LAUGH] it does become a factor,
where if you're doing a lot of layout

118
00:08:02.903 --> 00:08:07.606
animations and things like that,
then it is going to affect your score.

119
00:08:07.606 --> 00:08:12.468
So you see here we have a 99
performance and other things.

120
00:08:12.468 --> 00:08:16.029
SEO, I don't care about because we're on
local host we don't really want anyone to

121
00:08:16.029 --> 00:08:16.740
discover this.

122
00:08:16.740 --> 00:08:20.590
But yeah,
that is an important factor, yes.

123
00:08:20.590 --> 00:08:24.607
&gt;&gt; What if you would use
transform to scale size?

124
00:08:24.607 --> 00:08:28.891
&gt;&gt; So again, using transform,
it's going to be on the GPU,

125
00:08:28.891 --> 00:08:33.799
not the CPU, and so it's actually
going to be really performant.

126
00:08:33.799 --> 00:08:38.585
And so by scaling size,
there's two different things you could do,

127
00:08:38.585 --> 00:08:41.884
you could scale the x which
is how wide it is, and

128
00:08:41.884 --> 00:08:44.957
you could scale the y
which is how tall it is.

129
00:08:44.957 --> 00:08:49.556
And so, again, with that metaphor
of considering your elements on

130
00:08:49.556 --> 00:08:52.467
a piece of paper that's really stretchy.

131
00:08:52.467 --> 00:08:55.859
That's really performant, because you're
not affecting any other elements.

132
00:08:55.859 --> 00:08:57.490
So just think of a stretchy paper.

133
00:08:57.490 --> 00:09:00.920
You can move it this way, this way,
rotate it, do whatever you want with it.

