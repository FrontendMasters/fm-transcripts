WEBVTT

1
00:00:00.180 --> 00:00:02.159
So we talked about states, and

2
00:00:02.159 --> 00:00:06.280
now we're going to move into
something a little bit different.

3
00:00:06.280 --> 00:00:12.490
So these next two sections are getting
into more advanced CSS animations.

4
00:00:12.490 --> 00:00:16.378
These are things that you might
not use too frequently, but

5
00:00:16.378 --> 00:00:20.550
it's also very,
very useful to know regardless.

6
00:00:20.550 --> 00:00:24.430
So the first one is layout animations.

7
00:00:24.430 --> 00:00:29.333
And so a layout animation is actually
one of those things that we talked about

8
00:00:29.333 --> 00:00:32.900
at the beginning where
you want to avoid doing.

9
00:00:32.900 --> 00:00:36.790
Remember we want to avoid doing things
that are going to do what's called

10
00:00:36.790 --> 00:00:38.010
triggering layouts.

11
00:00:39.220 --> 00:00:45.917
And so this means avoiding manipulating
height, width, margin, padding,

12
00:00:45.917 --> 00:00:52.460
border, things like that, and
only using transform and opacity.

13
00:00:52.460 --> 00:00:56.506
But sometimes we actually do wanna do
animations where we do change the width or

14
00:00:56.506 --> 00:00:58.010
we change the height.

15
00:00:58.010 --> 00:01:01.090
So how exactly do we do this?

16
00:01:01.090 --> 00:01:06.651
There's something called called the FLIP
technique that helps us with this.

17
00:01:06.651 --> 00:01:10.796
And so, let me just search this there.

18
00:01:10.796 --> 00:01:12.663
It's a pretty old technique.

19
00:01:12.663 --> 00:01:17.034
And it was first introduced
by Paul Lewis at Google, and

20
00:01:17.034 --> 00:01:19.920
this is all the way back in 2015.

21
00:01:19.920 --> 00:01:25.870
But the FLIP technique stands for
First, Last, Invert and Play.

22
00:01:25.870 --> 00:01:31.292
And so the basic idea behind this is
that instead of animating the width and

23
00:01:31.292 --> 00:01:36.378
height of something, you animate
an element to its final position.

24
00:01:36.378 --> 00:01:41.067
And then you just sort of like
a rubber band, you sort of inverse

25
00:01:41.067 --> 00:01:45.849
the transition so
that you're shrinking it using transforms,

26
00:01:45.849 --> 00:01:50.554
and then you're playing it so
that it transforms back to zero.

27
00:01:50.554 --> 00:01:54.187
So I know that might have
been a little bit confusing,

28
00:01:54.187 --> 00:01:57.754
I actually have a visual
explainer right over here.

29
00:02:01.785 --> 00:02:06.120
Okay, so let's say that you have
a box that's right over here,

30
00:02:06.120 --> 00:02:09.411
how do we animate it to
somewhere like over here,

31
00:02:09.411 --> 00:02:13.775
especially when we don't know
exactly where it's going to be?

32
00:02:13.775 --> 00:02:18.758
So we don't know how many pixels or
how far it's traveling down,

33
00:02:18.758 --> 00:02:21.397
but we want to do it in a smooth way.

34
00:02:21.397 --> 00:02:25.027
So the first step, and
this is the F in FLIP,

35
00:02:25.027 --> 00:02:30.118
is you want to get the initial
dimensions of the elements.

36
00:02:30.118 --> 00:02:33.591
Now, we could use that by
elements.getboundingclientrects,

37
00:02:33.591 --> 00:02:35.430
which we'll show you in a minute.

38
00:02:37.130 --> 00:02:41.800
And then secondly, you want to get
the dimensions after it changes.

39
00:02:41.800 --> 00:02:46.693
So let's say that you're doing something
in JavaScript, you click a button,

40
00:02:46.693 --> 00:02:51.013
something is changing, and
you need to basically change the layout.

41
00:02:51.013 --> 00:02:54.910
So this isn't just x and y position but
it could also be width and height.

42
00:02:55.930 --> 00:02:59.143
So, when you get the dimensions
after the change,

43
00:02:59.143 --> 00:03:02.970
now you have two rectangles,
the first one and the last one.

44
00:03:02.970 --> 00:03:07.050
So, now what you want to do
is you want to invert it.

45
00:03:07.050 --> 00:03:11.947
So you calculate the delta,
which is this starting x in this final x,

46
00:03:11.947 --> 00:03:14.732
and also the starting y and the final y,

47
00:03:14.732 --> 00:03:19.730
and you're going to move that element
back to its original position.

48
00:03:19.730 --> 00:03:25.266
So right now, this is actually
translated like a negative x value and

49
00:03:25.266 --> 00:03:29.250
a negative y value from
its final position.

50
00:03:29.250 --> 00:03:34.227
So it looks like it's in the first
position, but really it's in the last

51
00:03:34.227 --> 00:03:39.710
position, but inverted so
that it's back where it originally was.

52
00:03:39.710 --> 00:03:46.423
And then after that,
you just animate everything to zero.

53
00:03:46.423 --> 00:03:51.462
So, I know that was a lot, but
if you look on dribble and

54
00:03:51.462 --> 00:03:58.350
even on mobile apps, layout animations
are pretty much everywhere.

55
00:03:58.350 --> 00:04:03.860
So, let's talk about how we could do
this with just JavaScript and CSS.

56
00:04:03.860 --> 00:04:11.640
So in order to do this, we are going to be
looking at the layout animations exercise.

57
00:04:11.640 --> 00:04:13.988
So I'm going to do the first
part with you, and

58
00:04:13.988 --> 00:04:16.830
then hopefully you could do
the second part on your own.

59
00:04:18.710 --> 00:04:22.240
So here's the layout animation
that I want us to do.

60
00:04:23.240 --> 00:04:25.540
It's this little box here,
it says Animation.

61
00:04:26.760 --> 00:04:30.882
And so when we click it,
it's going to get bigger and

62
00:04:30.882 --> 00:04:36.706
then we're gonna have an animated text
showing up on the right hand side.

63
00:04:36.706 --> 00:04:39.295
And so we could just go back and
forth between that.

64
00:04:39.295 --> 00:04:43.363
And this is also using that same data
state attribute that we talked about in

65
00:04:43.363 --> 00:04:44.600
the previous lesson.

66
00:04:46.160 --> 00:04:51.890
So the question becomes,
how do we animate between this and that?

67
00:04:53.400 --> 00:04:58.630
Because they're in two separate positions,
we can't just translate it.

68
00:04:58.630 --> 00:05:01.631
This could be a completely different
layout, and actually it is.

69
00:05:01.631 --> 00:05:04.242
So, over here we have a figure, and

70
00:05:04.242 --> 00:05:07.898
this figure is just showing
the box over here, but

71
00:05:07.898 --> 00:05:14.230
now it's a different layout where we have
some padding and we also have CSS grid.

72
00:05:14.230 --> 00:05:19.438
So again, we can't just add
a translate and call it a day, we have

73
00:05:19.438 --> 00:05:25.435
to figure out a way to smoothly animate
this box to be in the other position.

74
00:05:25.435 --> 00:05:27.879
So, let's go ahead and do that.

75
00:05:31.234 --> 00:05:36.808
We're going to be in index.html over here,
and we have a few things set up.

76
00:05:36.808 --> 00:05:39.276
First we have the figure elements and

77
00:05:39.276 --> 00:05:42.388
so that's going to be
this blue box over here.

78
00:05:42.388 --> 00:05:46.652
We also have the caption elements which
is going to be the text over here.

79
00:05:46.652 --> 00:05:50.626
That's not important right now,
that's gonna be for you to do.

80
00:05:50.626 --> 00:05:52.850
And we have the app.

81
00:05:52.850 --> 00:05:57.253
So we're listening for clicks on the app,
so we're not gonna use anything from that.

82
00:05:57.253 --> 00:06:03.378
And all we're doing right now, is changing
the state from collapsed to expanded.

83
00:06:03.378 --> 00:06:07.530
All right, so FLIP technique,
what do we do first?

84
00:06:07.530 --> 00:06:14.503
So the first thing we do is we want to
capture the first rectangle of the figure.

85
00:06:14.503 --> 00:06:18.882
So const first, and
I'm gonna call this firstrect =

86
00:06:18.882 --> 00:06:22.494
figureEL.getBoundingClientRect().

87
00:06:22.494 --> 00:06:27.504
So let's console.log,
what that firstRect is.

88
00:06:31.004 --> 00:06:36.006
All right, so
when we look in the console, and

89
00:06:36.006 --> 00:06:41.540
we click,
you're gonna see this DOMRect object.

90
00:06:41.540 --> 00:06:44.129
So this has a few properties.

91
00:06:44.129 --> 00:06:50.618
The top left, which is also x and
y or y and x respectively,

92
00:06:50.618 --> 00:06:55.267
and the bottom, the height, the width.

93
00:06:55.267 --> 00:07:00.200
So basically all of the dimensions of
this rectangle relative to the viewports.

94
00:07:01.230 --> 00:07:04.727
So this is going to be really useful for
us.

95
00:07:04.727 --> 00:07:06.730
And so I'm gonna just call this first.

96
00:07:09.047 --> 00:07:11.566
And so this is the change that happens.

97
00:07:11.566 --> 00:07:17.430
We have app.dataset.state, and
we're doing something over here and

98
00:07:17.430 --> 00:07:23.306
now we want to capture what the rectangle
is after this change happened.

99
00:07:23.306 --> 00:07:27.936
Now in order to let the documents
read paint, read layouts and

100
00:07:27.936 --> 00:07:33.203
do everything, it's better to do
this in a request animation frame.

101
00:07:33.203 --> 00:07:37.539
Which remember, we were talking about
those 60 frames per second in which

102
00:07:37.539 --> 00:07:39.241
the browser renders things.

103
00:07:39.241 --> 00:07:43.279
So if a change like adding
this collapsed attributes to

104
00:07:43.279 --> 00:07:45.913
the dataset.state is happening,

105
00:07:45.913 --> 00:07:51.638
then we want to make sure that the browser
has a chance to actually apply that.

106
00:07:51.638 --> 00:07:55.769
So it's better to read it in the next
animation frame where we could pretty much

107
00:07:55.769 --> 00:07:58.440
guarantee that that change is being made.

108
00:07:58.440 --> 00:08:03.752
So we're going to then get
the second rectangle, so

109
00:08:03.752 --> 00:08:09.801
const secondRect=
figureEl.getBoundingClientRect.

110
00:08:09.801 --> 00:08:13.051
And let's console.log, that second one.

111
00:08:17.292 --> 00:08:21.790
Okay, so we click here.

112
00:08:21.790 --> 00:08:25.313
Now, we have the first one and
the second one.

113
00:08:25.313 --> 00:08:30.817
And already you could tell that
the values are a little bit different,

114
00:08:30.817 --> 00:08:35.673
x is 354 in the first one, and
in the second one x is 169.

115
00:08:35.673 --> 00:08:38.627
So you could tell that
it moved to the left.

116
00:08:38.627 --> 00:08:41.930
This is all really useful
information that we could use.

117
00:08:43.200 --> 00:08:48.934
So, now what do we do now that
we have these two rectangles?

118
00:08:48.934 --> 00:08:54.393
We have to find the delta between,

119
00:08:54.393 --> 00:08:58.911
we'll start with x and y, so

120
00:08:58.911 --> 00:09:03.242
we're gonna say const dx =

121
00:09:03.242 --> 00:09:08.905
firstRect.left minus lastRect.

122
00:09:08.905 --> 00:09:12.011
What did I call this, secondRect?

123
00:09:12.011 --> 00:09:18.179
Let's call it lastRect.left.

124
00:09:18.179 --> 00:09:24.450
And so we're going to be using this
to basically invert the position.

125
00:09:24.450 --> 00:09:29.718
And so the results of this or at least
the intermediate result is we want

126
00:09:29.718 --> 00:09:35.390
the last rectangle to look like
it's in the spot of the first one.

127
00:09:35.390 --> 00:09:39.860
So I'm gonna console.log,
let's get that dx value.

128
00:09:39.860 --> 00:09:42.110
And then we're going to be
setting a CSS variable.

129
00:09:42.110 --> 00:09:49.044
So figureEL.style.setProperty.

130
00:09:49.044 --> 00:09:52.920
And now,
we're going to set dx to that dx variable.

131
00:09:55.920 --> 00:09:58.330
And we're going to be using that in a bit.

132
00:09:58.330 --> 00:10:00.970
So bear with me.

133
00:10:00.970 --> 00:10:05.396
When we click here, we had dx of 185.

134
00:10:05.396 --> 00:10:11.198
And if we look at the elements, we can see
that we have that CSS variable applied.

135
00:10:11.198 --> 00:10:16.641
So what's cool about this
is that we could actually

136
00:10:16.641 --> 00:10:21.197
say that we want to
transform this such that

137
00:10:21.197 --> 00:10:26.387
we're gonna calc that
variable times 1 pixel,

138
00:10:26.387 --> 00:10:30.970
sorry if you can see that, where'd it go?

139
00:10:30.970 --> 00:10:33.046
All right there this.

140
00:10:33.046 --> 00:10:40.030
Okay, so now we're using that dx variable
to basically move it to its initial spot.

141
00:10:42.010 --> 00:10:45.103
And so, we're doing that with CSS.

142
00:10:45.103 --> 00:10:49.443
And so if we look at the styles over here,

143
00:10:49.443 --> 00:10:54.051
where we're going to be adding it to here.

144
00:10:54.051 --> 00:10:59.296
So let's just do the same thing over here,

145
00:10:59.296 --> 00:11:02.939
so transform, translate and

146
00:11:02.939 --> 00:11:07.466
we're gonna calc dx times 1 pixel.

147
00:11:07.466 --> 00:11:11.833
Okay, so we click here.

148
00:11:11.833 --> 00:11:16.433
Notice that this is supposed to
be in the second position but

149
00:11:16.433 --> 00:11:19.101
at least as far as the x value goes,

150
00:11:19.101 --> 00:11:24.440
it's still in the first position,
so we know that our dx is working.

151
00:11:25.450 --> 00:11:29.653
And so now, let's do it for dy as well.

152
00:11:29.653 --> 00:11:35.003
So I'm just gonna copy this dy, top,

153
00:11:35.003 --> 00:11:41.370
and we're gonna set it right over here,
dy.

154
00:11:41.370 --> 00:11:44.890
Okay, now we just have to
add the style for that.

155
00:11:47.120 --> 00:11:50.879
So this is gonna be dy.

156
00:11:50.879 --> 00:11:55.637
And so now hopefully, when we click this,
this rectangle should

157
00:11:55.637 --> 00:12:00.410
look like it didn't move,
at least as far as the x and y position.

158
00:12:01.720 --> 00:12:04.270
So now we clicked, it's still there.

159
00:12:04.270 --> 00:12:07.762
And so basically what we do from here is,

160
00:12:07.762 --> 00:12:13.740
we are going to take this,
in fact, we could do it over here.

161
00:12:13.740 --> 00:12:18.221
And I am going to first add a transition,
and

162
00:12:18.221 --> 00:12:21.613
this transition is going to be for

163
00:12:21.613 --> 00:12:25.990
transform over, let's say, 1 second.

164
00:12:27.180 --> 00:12:33.102
So watch, if I do transform: none.

165
00:12:33.102 --> 00:12:37.828
Notice how it's sliding to the place
where it's supposed to be.

166
00:12:37.828 --> 00:12:45.830
So the way we could do this is by
adding some more data attributes.

167
00:12:45.830 --> 00:12:49.286
So you see everything is being
tied together over here.

168
00:12:49.286 --> 00:12:54.358
So we have dx and we have dy, and so

169
00:12:54.358 --> 00:13:00.337
we are going to add, yeah, here we go,

170
00:13:00.337 --> 00:13:06.340
figureEL.dataset.flip = invert.

171
00:13:06.340 --> 00:13:12.045
So we got the first rectangle, we got the
last rectangle which is the FL of FLIP.

172
00:13:12.045 --> 00:13:15.514
Now, we're doing invert, and so

173
00:13:15.514 --> 00:13:20.419
in the invert style,
which I'm gonna add here,

174
00:13:20.419 --> 00:13:24.860
this is going to be &amp; data-flip=invert.

175
00:13:27.740 --> 00:13:31.401
We are going to be doing that transform.

176
00:13:31.401 --> 00:13:35.160
So I'm just gonna move this over here.

177
00:13:35.160 --> 00:13:40.621
And also, notice how we're not
doing any transition here just yet.

178
00:13:40.621 --> 00:13:44.418
And that's because I want to also add

179
00:13:44.418 --> 00:13:49.450
a data-flip= play and
transform that to none.

180
00:13:50.540 --> 00:13:53.070
And so here's what we're
gonna do just to demonstrate.

181
00:13:53.070 --> 00:13:59.034
We're gonna set a timeout and
after let's say one second,

182
00:13:59.034 --> 00:14:03.813
we're gonna say that
this flip should be play.

183
00:14:03.813 --> 00:14:06.490
So it's gonna change
state after one second.

184
00:14:06.490 --> 00:14:09.299
So let's see what happens.

185
00:14:09.299 --> 00:14:14.540
We click here, it's in the original
position and then it snaps back.

186
00:14:14.540 --> 00:14:19.129
So now, if you're probably
thinking what I'm thinking,

187
00:14:19.129 --> 00:14:24.350
just add a transition, and
transform, 0.3 seconds.

188
00:14:24.350 --> 00:14:25.519
Now let's see what happens.

189
00:14:25.519 --> 00:14:32.260
We click here, so actually we
don't really need that setTimeout.

190
00:14:33.920 --> 00:14:36.860
So now,
I'm going to remove the setTimeout, but

191
00:14:36.860 --> 00:14:39.200
there's a problem over here.

192
00:14:39.200 --> 00:14:41.708
We have flip invert and flip play,

193
00:14:41.708 --> 00:14:46.128
so this flip invert will actually
really not have an effect.

194
00:14:46.128 --> 00:14:48.935
And we're gonna see it just
snap immediately to play,

195
00:14:48.935 --> 00:14:50.760
which isn't really what we want.

196
00:14:50.760 --> 00:14:55.605
We want some sort of a delay so that
the browser knows, okay, I'm here, and

197
00:14:55.605 --> 00:14:57.360
I need to move it over here.

198
00:14:58.770 --> 00:15:01.878
So we could just put this
in another animation frame.

199
00:15:08.333 --> 00:15:16.711
Okay, so
now you see it moves back and forth.

200
00:15:16.711 --> 00:15:23.033
But there is one missing piece, and
so that is the width and the height.

201
00:15:23.033 --> 00:15:28.613
So let's just add those real quick,
const dw equals, we're going to get

202
00:15:28.613 --> 00:15:34.750
basically the percentage or the ratio
of the first width and the last width.

203
00:15:34.750 --> 00:15:39.617
So firstRect.width divided
by lastRect.width,

204
00:15:39.617 --> 00:15:43.493
and, oops, same thing with the height.

205
00:15:43.493 --> 00:15:50.254
So dh height lastRect.height.

206
00:15:50.254 --> 00:15:52.962
So now we could set all these over here.

207
00:15:57.636 --> 00:16:01.250
And then we have to add
a little bit of styling too.

208
00:16:01.250 --> 00:16:03.636
So, now we're not just translating, but

209
00:16:03.636 --> 00:16:07.095
we also have to scale it according
to the width and the height.

210
00:16:07.095 --> 00:16:13.230
So this is gonna be scale[var--dw|,

211
00:16:13.230 --> 00:16:17.269
var(-- dh)], okay.

212
00:16:17.269 --> 00:16:22.335
That's wrong [LAUGH] That
happened the wrong way,

213
00:16:22.335 --> 00:16:25.841
so let me just see what I did wrong.

214
00:16:25.841 --> 00:16:31.723
So what's cool about this is
that sometimes it's just,

215
00:16:31.723 --> 00:16:37.112
okay, the numbers should
be the other way around but

216
00:16:37.112 --> 00:16:44.846
let me just check over here because I did
do it yeah so we have var dw, var dh.

217
00:16:44.846 --> 00:16:48.416
Let's see, just checking what I did wrong,

218
00:16:48.416 --> 00:16:52.980
I have this dy over here,
that's not good, it should be dh.

219
00:16:52.980 --> 00:16:54.940
[LAUGH] Okay, cool.

220
00:16:54.940 --> 00:17:00.550
So now when we click, you could see that
it stretches and it does everything.

221
00:17:03.050 --> 00:17:04.630
And it's working pretty well.

222
00:17:06.200 --> 00:17:09.828
Okay, so you might be looking at this and
thinking,

223
00:17:09.828 --> 00:17:14.090
okay, why can't I use
a JavaScript library for this?

224
00:17:14.090 --> 00:17:18.120
Which I mean, Greenstock sort of has
something that allows you to do this.

225
00:17:18.120 --> 00:17:23.930
If you're using React, then framer motion
has this idea of layout animations, too.

226
00:17:23.930 --> 00:17:27.230
And so there's a few reasons
why I want to show you this.

227
00:17:27.230 --> 00:17:31.020
Not to explain that,
this is super easy to do.

228
00:17:31.020 --> 00:17:35.488
Although you could just put this in
the function and then use it in your app

229
00:17:35.488 --> 00:17:40.543
without having to install any libraries,
but really, it's to sort of introduce

230
00:17:40.543 --> 00:17:46.000
you to request animation frame and just
doing advanced animations without fear.

231
00:17:46.000 --> 00:17:51.115
So basically the combination of using
data set, just getting the bounding

232
00:17:51.115 --> 00:17:55.757
client rect of the elements you and
using request animation frame.

233
00:17:55.757 --> 00:18:00.334
And also using CSS variables
allow you to do a whole range of

234
00:18:00.334 --> 00:18:05.484
styling which you might not have
been comfortable doing before.

235
00:18:05.484 --> 00:18:09.798
Or you might have said, okay, I should
really reach out for an animation library

236
00:18:09.798 --> 00:18:14.120
or reach out for this custom thing that
someone made to do my specific animation.

