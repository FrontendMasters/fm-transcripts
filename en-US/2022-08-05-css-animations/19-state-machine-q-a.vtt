WEBVTT

1
00:00:00.000 --> 00:00:03.452
So, what does this have
to do with animations?

2
00:00:03.452 --> 00:00:07.323
Well, animations can be in various states,
and so

3
00:00:07.323 --> 00:00:12.462
you want to define how these states
transition between each other.

4
00:00:12.462 --> 00:00:17.430
Rive does a really good job at this, here,

5
00:00:17.430 --> 00:00:21.295
let's just show you [INAUDIBLE].

6
00:00:21.295 --> 00:00:25.671
Rive is an animation editor, it doesn't
let you build web animations, or

7
00:00:25.671 --> 00:00:29.362
at least not easily,
at least not the way that we're doing it.

8
00:00:29.362 --> 00:00:35.720
But, it shows you how an animation
can be in various states.

9
00:00:35.720 --> 00:00:39.733
So, try and
find a good example here, okay.

10
00:00:39.733 --> 00:00:42.168
So, this is a great example where,

11
00:00:42.168 --> 00:00:46.229
right now we have this arrow
where it's in the idle state and

12
00:00:46.229 --> 00:00:51.042
then it's blending, blending and
then eventually it's complete.

13
00:00:51.042 --> 00:00:55.551
So you can see, each one of
these are different animations.

14
00:00:55.551 --> 00:00:58.815
And so
when you get into more complex animations,

15
00:00:58.815 --> 00:01:04.114
that's when defining your animations
as a state machine really, really help.

16
00:01:04.114 --> 00:01:09.590
So, I want to show you some other examples

17
00:01:09.590 --> 00:01:16.641
of some CSS animations which states see,
here we go.

18
00:01:16.641 --> 00:01:21.297
This is a password model in which we have
a different animation for each state.

19
00:01:21.297 --> 00:01:25.271
We are using data states
in order to do this, and so

20
00:01:25.271 --> 00:01:28.501
we have again, a different animation.

21
00:01:28.501 --> 00:01:31.161
If we type some password,
and click Submit,

22
00:01:31.161 --> 00:01:35.501
now we're in a different state where
we're playing this animation, and

23
00:01:35.501 --> 00:01:39.985
after a while it goes to an error state
where it shows a different animation.

24
00:01:39.985 --> 00:01:43.433
So, I'll show you that
error animation again.

25
00:01:43.433 --> 00:01:45.105
So it's validating, and

26
00:01:45.105 --> 00:01:50.281
then it shows that shake animation which
hopefully by now, you know how to make.

27
00:01:50.281 --> 00:01:54.545
So, we could also enter
the correct password and

28
00:01:54.545 --> 00:01:57.564
it will show a success animation.

29
00:01:57.564 --> 00:02:02.666
So that's just one of many examples

30
00:02:02.666 --> 00:02:09.476
of using different states just for
animation.

31
00:02:09.476 --> 00:02:14.949
All right, so any questions on
how we use data attributes,

32
00:02:14.949 --> 00:02:19.667
data states, data sets,
and setting that state?

33
00:02:19.667 --> 00:02:22.942
Any questions on how we could
use that with animation?

34
00:02:22.942 --> 00:02:26.987
&gt;&gt; For React, aren't CSS variables and
data attributes a little complicated?

35
00:02:30.138 --> 00:02:35.319
&gt;&gt; So the answer actually is no,
they are not really that complicated.

36
00:02:35.319 --> 00:02:37.300
You could definitely use both of them.

37
00:02:37.300 --> 00:02:38.465
And so just to explain,

38
00:02:38.465 --> 00:02:40.011
hopefully I could point-
&gt;&gt; So

39
00:02:40.011 --> 00:02:44.652
the benefit of React is very declarative?

40
00:02:44.652 --> 00:02:50.341
&gt;&gt; Right, so one way to think about
it is that there's the JavaScript

41
00:02:50.341 --> 00:02:55.227
world in which JavaScript
variables they live in there.

42
00:02:55.227 --> 00:02:58.720
JavaScript variables could read other
JavaScript variables et cetera,

43
00:02:58.720 --> 00:03:00.532
functions can read those variables.

44
00:03:00.532 --> 00:03:04.980
And then there's the CSS world where
you can read CSS variables and

45
00:03:04.980 --> 00:03:08.411
all the stuffs, properties and
things like that.

46
00:03:08.411 --> 00:03:13.589
And of course in JavaScript,
you could also write to the CSS variables.

47
00:03:13.589 --> 00:03:16.462
But one thing that's hard to do,

48
00:03:16.462 --> 00:03:22.105
is to actually communicate that
this elements should be in this,

49
00:03:22.105 --> 00:03:27.254
you want JavaScript to provide
that value over to CSS land.

50
00:03:27.254 --> 00:03:31.817
Now, you could do that by adding
class names and things like that.

51
00:03:31.817 --> 00:03:38.012
However, the problem with that,
is that you here and let me just fix this.

52
00:03:38.012 --> 00:03:41.932
The problem with that is
that with class names,

53
00:03:41.932 --> 00:03:45.959
you can't enforce that
you have only one value.

54
00:03:45.959 --> 00:03:53.572
And so, for example,
let me just show this here.

55
00:03:53.572 --> 00:03:59.859
Let's say that instead of
data state loading and

56
00:03:59.859 --> 00:04:06.604
data state success,
we had this as a loading class,

57
00:04:06.604 --> 00:04:10.757
so is loading, and is success.

58
00:04:10.757 --> 00:04:14.571
Okay, so the problem here is
that sure we have classes and

59
00:04:14.571 --> 00:04:18.075
this might feel like the normal
way of doing things.

60
00:04:18.075 --> 00:04:22.726
But now in our app, if we specify

61
00:04:22.726 --> 00:04:29.543
the classes.

62
00:04:29.543 --> 00:04:35.290
One second, let's actually get
rid of these just for a minute.

63
00:04:35.290 --> 00:04:40.118
And so, let's just make sure
that we have our class set up.

64
00:04:40.118 --> 00:04:46.473
All right, so we have the is loading
class, and should the background be white?

65
00:04:46.473 --> 00:04:48.139
Sorry, forgot to put the hand.

66
00:04:50.960 --> 00:04:54.367
Okay, so here's our is loading class, so

67
00:04:54.367 --> 00:04:59.491
if we set this to is loading,
then sure we had the loading state.

68
00:04:59.491 --> 00:05:05.196
If we set it to is success,
we have the success state.

69
00:05:05.196 --> 00:05:09.929
But you could also do this, we could say
is success, is loading, and you would

70
00:05:09.929 --> 00:05:14.829
think that the second one would win, but
it's actually the first one that wins.

71
00:05:14.829 --> 00:05:19.683
Because it's declared later, but
of course that changes depending

72
00:05:19.683 --> 00:05:24.631
on if you move this up here,
then it's a completely different story.

73
00:05:24.631 --> 00:05:29.138
So you just run into cases where
it's definitely possible for

74
00:05:29.138 --> 00:05:31.487
you to have impossible states.

75
00:05:31.487 --> 00:05:36.486
And using data state is no more
complicated than using class, or

76
00:05:36.486 --> 00:05:39.179
in React, it would be class name.

77
00:05:39.179 --> 00:05:41.579
So they actually work
really well together.

78
00:05:41.579 --> 00:05:46.385
And again, you don't have to say
data set dot state in React,

79
00:05:46.385 --> 00:05:50.360
you could just put data
state equals curly braces,

80
00:05:50.360 --> 00:05:53.894
whatever you want inside
of that attribute.

81
00:05:53.894 --> 00:05:58.003
And so yeah, the question was about
like that versus injecting class names.

82
00:05:58.003 --> 00:06:03.149
Again, you cannot enforce that
you only have one class name.

83
00:06:03.149 --> 00:06:08.525
Whereas with the data state,
the way that we're selecting it over here,

84
00:06:08.525 --> 00:06:13.220
is such that we're only looking for
it to be exactly that value.

85
00:06:13.220 --> 00:06:14.255
So, yeah.

86
00:06:18.049 --> 00:06:20.175
All right, any other questions?

87
00:06:20.175 --> 00:06:26.446
Back to your the state machine was your
reason for the capitalization on click or

88
00:06:26.446 --> 00:06:30.293
is that just a naming
convention you like to use?

89
00:06:30.293 --> 00:06:34.333
&gt;&gt; So this is just a convention to make
it really clear that this is an event.

90
00:06:34.333 --> 00:06:36.424
So that when you're
scanning in the machine,

91
00:06:36.424 --> 00:06:38.685
you could be like, that's an event, yeah.

92
00:06:41.562 --> 00:06:45.108
And just to visualize this,

93
00:06:45.108 --> 00:06:49.846
I want to show you something else too.

94
00:06:49.846 --> 00:06:51.971
This is what that state
machine looks like.

95
00:06:51.971 --> 00:06:56.842
So we're on the start state, and
we might be in some loading state,

96
00:06:56.842 --> 00:06:58.990
and then some success state.

97
00:06:58.990 --> 00:07:05.129
So we could just say,
when we click we go to success,

98
00:07:05.129 --> 00:07:10.160
and when we click again, we go to loading.

99
00:07:10.160 --> 00:07:12.532
And, this is also a click over here.

100
00:07:12.532 --> 00:07:15.129
So you could see that
when the user clicks,

101
00:07:15.129 --> 00:07:19.962
we're gonna go from the start state to
the loading state, and then to success,

102
00:07:19.962 --> 00:07:23.225
then back to loading success,
loading, et cetera.

103
00:07:23.225 --> 00:07:24.800
So, yeah.

104
00:07:24.800 --> 00:07:29.169
&gt;&gt; So, are those the only [INAUDIBLE]
the states that are in CSS loading and

105
00:07:29.169 --> 00:07:30.691
start [CROSSTALK]?

106
00:07:30.691 --> 00:07:34.308
&gt;&gt; No, so these are just
custom states that I defined.

107
00:07:34.308 --> 00:07:34.983
&gt;&gt; So, you defined it?

108
00:07:34.983 --> 00:07:39.168
Okay.
&gt;&gt; Yeah, and this would actually be a good

109
00:07:39.168 --> 00:07:44.227
point for me to show
the inflight example that I did.

110
00:07:44.227 --> 00:07:49.041
Because this inflight example,
right now there are no animations,

111
00:07:49.041 --> 00:07:52.615
but you see over here I have
a data state of welcome.

112
00:07:52.615 --> 00:07:57.237
And so each of the screens are shown
depending on what that data state is.

113
00:07:57.237 --> 00:08:00.746
So if I click Get Started,
that's going to change the state.

114
00:08:00.746 --> 00:08:05.186
And so now we're in the home state, so
we have a completely different view.

115
00:08:05.186 --> 00:08:12.758
And so now from the home state,
we could go to movies and to music.

116
00:08:12.758 --> 00:08:17.229
And you can just show this
pop up over here, or overlay,

117
00:08:17.229 --> 00:08:19.617
whatever you want to call it.

118
00:08:19.617 --> 00:08:25.466
So data states are really useful because
now you could actually define states,

119
00:08:25.466 --> 00:08:28.694
which you could use in
CSS to style the app and

120
00:08:28.694 --> 00:08:32.550
to add animations based on
those different states.

