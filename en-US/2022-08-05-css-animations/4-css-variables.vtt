WEBVTT

1
00:00:00.210 --> 00:00:04.378
All right, so just like I promised
that we would talk about,

2
00:00:04.378 --> 00:00:06.590
there's also CSS variables.

3
00:00:06.590 --> 00:00:09.276
Now these aren't directly
related to animations but

4
00:00:09.276 --> 00:00:12.670
we're going to be using them
throughout all of our examples.

5
00:00:12.670 --> 00:00:16.172
CSS variables are also known
as CSS custom properties,

6
00:00:16.172 --> 00:00:19.385
and that's because they
behave like properties.

7
00:00:19.385 --> 00:00:23.639
They could be inherited,
they're sort of like variables, and

8
00:00:23.639 --> 00:00:27.499
conceptually, you could think
of them as variables, but

9
00:00:27.499 --> 00:00:32.959
the important thing to remember is that
they are inherited and they also cascade.

10
00:00:32.959 --> 00:00:39.510
So you could overwrite them depending
on specificity and things like that.

11
00:00:39.510 --> 00:00:44.517
So the way that we write CSS properties or
CSS custom properties or

12
00:00:44.517 --> 00:00:48.920
CSS variables is that you
first add a double dash.

13
00:00:48.920 --> 00:00:55.180
And so this double dash, let me choose
a different color, yeah, that's fine.

14
00:00:55.180 --> 00:01:00.311
So this double dash is what signifies
to CSS that this property is custom,

15
00:01:00.311 --> 00:01:04.878
it's not the built in property,
it's one of my own properties.

16
00:01:04.878 --> 00:01:09.570
And these are case sensitive by the way,
and then you just give it a name.

17
00:01:09.570 --> 00:01:13.894
Now, I picks duration here, but
you could call it anything you want,

18
00:01:13.894 --> 00:01:17.264
you could call it dur or
my duration or animation time,

19
00:01:17.264 --> 00:01:21.830
just whatever you want to call it,
it's completely up to you.

20
00:01:21.830 --> 00:01:25.489
And then just by convention,
I put it in the root,

21
00:01:25.489 --> 00:01:29.423
you could also put it on
the HTML elements or the body.

22
00:01:29.423 --> 00:01:37.292
Typically the roots in HTML documents
is going to be the HTML element itself,

23
00:01:37.292 --> 00:01:44.208
and so you then specify some property for
that custom CSS variable.

24
00:01:44.208 --> 00:01:49.040
Now, actually using the CSS variable
you do by, actually I don't know why

25
00:01:49.040 --> 00:01:53.738
calc is here it doesn't need to be but
we'll talk about that in a minute.

26
00:01:53.738 --> 00:01:58.648
But you could use the CSS
variable by passing in var V-A-R,

27
00:01:58.648 --> 00:02:03.565
opening your parentheses and
passing the variable in.

28
00:02:03.565 --> 00:02:06.725
And then as an optional second argument,

29
00:02:06.725 --> 00:02:11.241
you could specify what the value
the evaluated value of this

30
00:02:11.241 --> 00:02:15.861
property should be if we have no value for
this CSS variable.

31
00:02:15.861 --> 00:02:20.960
So just to show you an example, and
we'll go back to our scratchpad over here.

32
00:02:21.960 --> 00:02:25.707
I am going to edit the styles a bit.

33
00:02:25.707 --> 00:02:29.270
So again, by convention,
we're gonna be doing this in roots.

34
00:02:30.900 --> 00:02:36.664
And just for starters,
we're going to be doing colors, so

35
00:02:36.664 --> 00:02:42.094
let's call this primary color and
we're gonna do red.

36
00:02:42.094 --> 00:02:46.846
Okay, so the background color of
the body right now is some hard

37
00:02:46.846 --> 00:02:51.882
coded color over here, but instead,
we're gonna put var or var.

38
00:02:51.882 --> 00:02:56.461
I don't know why people call it var,
it's not variable it's variable, but

39
00:02:56.461 --> 00:02:59.645
anyway, and
then we are gonna type in primary color.

40
00:03:01.145 --> 00:03:07.073
Okay, so now you're going to see
that this is now a disgusting red,

41
00:03:07.073 --> 00:03:12.585
so let's add a foreground color and
this is going to be whites,

42
00:03:12.585 --> 00:03:17.280
and so I could just say color,
var foreground color.

43
00:03:19.970 --> 00:03:24.207
Okay, cool, that's a little bit better,
of course this circle is very,

44
00:03:24.207 --> 00:03:28.810
very hard to see, but yeah that just gives
you an idea of how to use CSS variables.

45
00:03:28.810 --> 00:03:33.727
Now let's say that,
let's make this variable,

46
00:03:33.727 --> 00:03:40.177
let's make this navy or
I could even pick a custom variable here.

47
00:03:40.177 --> 00:03:43.932
Let's say that we didn't
have a foreground color.

48
00:03:43.932 --> 00:03:50.969
So the problem is, this is going to
fall back to the browser defaults or

49
00:03:50.969 --> 00:03:55.761
the normal uninherited
value of the property.

50
00:03:55.761 --> 00:03:59.713
So the color is going to end
up as black in this case.

51
00:03:59.713 --> 00:04:03.461
You could also specify a default
just like we talked about, and so

52
00:04:03.461 --> 00:04:05.517
let's say that I put white in here.

53
00:04:05.517 --> 00:04:09.702
Now because FG color doesn't
really evaluate to anything,

54
00:04:09.702 --> 00:04:14.470
it's going to go for the default
that we specified, which is white.

55
00:04:15.480 --> 00:04:22.850
And you could also inspect these by,
let's hover here, see the body.

56
00:04:23.920 --> 00:04:28.385
We can see in the dev tools that if we
hover over for example var primary color,

57
00:04:28.385 --> 00:04:32.851
you really can't see that but there is
a tooltip under that primary color that

58
00:04:32.851 --> 00:04:35.710
tells you exactly what
that color value is.

59
00:04:35.710 --> 00:04:41.854
So in Chrome Dev Tools,
you could actually click into that and

60
00:04:41.854 --> 00:04:45.649
see this variable and then change it.

61
00:04:45.649 --> 00:04:50.728
So we could change it to green, or
this disgusting orange color, let's go

62
00:04:50.728 --> 00:04:56.630
like red or something like that, and you
could see a change throughout the site.

63
00:04:56.630 --> 00:05:00.928
So, CSS custom properties are really,
really useful, and

64
00:05:00.928 --> 00:05:04.888
they're not only useful as
a way of sharing styles, but

65
00:05:04.888 --> 00:05:10.860
they're useful for actually being
manipulated with JavaScript as well.

66
00:05:10.860 --> 00:05:15.581
So, besides just the CSS thing,
we also have

67
00:05:15.581 --> 00:05:20.688
a JavaScript API for
changing these variables.

68
00:05:20.688 --> 00:05:27.288
And so on any elements, we could call
the element.style.setProperty and

69
00:05:27.288 --> 00:05:33.367
we pass it that color, you can do this
with any property by the way, but

70
00:05:33.367 --> 00:05:38.445
it's honestly really useful for
CSS custom properties.

71
00:05:38.445 --> 00:05:41.140
And then you could set
the value of that property.

72
00:05:42.320 --> 00:05:48.144
So just an example of this,
let us reload so it's going to be blue,

73
00:05:48.144 --> 00:05:52.720
and so let's do this just
as a JavaScript exercise.

74
00:05:52.720 --> 00:05:56.815
Again, you can play around
with this as you want, but

75
00:05:56.815 --> 00:06:01.917
when I click the body, I want to
change this from blue to say green.

76
00:06:01.917 --> 00:06:06.948
So we're going to go in index.HTML,
I'm gonna open up

77
00:06:06.948 --> 00:06:12.514
the script tag over here, and
then we're going to get the,

78
00:06:12.514 --> 00:06:17.349
yeah, documents.body.event listener,
click.

79
00:06:17.349 --> 00:06:22.073
And so when we click, I'm going to say

80
00:06:22.073 --> 00:06:27.397
document.body.style.setProperty.

81
00:06:27.397 --> 00:06:34.525
And we're going to set the, what did
we call it, we called it primary color,

82
00:06:34.525 --> 00:06:39.695
so should be background color but
primary color to red.

83
00:06:39.695 --> 00:06:45.350
And so now, just trying that out,
when we click the body, it changes to red.

84
00:06:45.350 --> 00:06:48.921
So we're going to be getting more
into this when we talk about reactive

85
00:06:48.921 --> 00:06:51.350
animations but it's really, really useful.

86
00:06:52.500 --> 00:06:58.384
So I recommend learning about CSS custom
properties also known as CSS variables and

87
00:06:58.384 --> 00:07:03.008
there is another Frontend Masters
workshop by Lea Verou that does

88
00:07:03.008 --> 00:07:04.871
teach this more in depth.

89
00:07:04.871 --> 00:07:08.050
So I really recommend that
you check that one out.

90
00:07:09.460 --> 00:07:12.194
Okay, I'm going to use this,

91
00:07:12.194 --> 00:07:17.768
just because we're going to be
using CSS variables not only for

92
00:07:17.768 --> 00:07:22.938
styles but visual styles but
also for animations as well.

93
00:07:22.938 --> 00:07:26.703
So I just want to get you in
the habit of doing that, and

94
00:07:26.703 --> 00:07:31.898
this little animation we created,
I want to actually substitute this for

95
00:07:31.898 --> 00:07:37.850
a duration variable which I'm gonna
set at the top, so duration 1 second.

96
00:07:37.850 --> 00:07:44.969
And so this, of course, would be the same,
and let's change the easing a bit,

97
00:07:44.969 --> 00:07:49.767
easing: cubic-bezier(.5, 0, .5, 1).

98
00:07:49.767 --> 00:07:52.687
Again, this is one of my
favorite defaults, so

99
00:07:52.687 --> 00:07:56.264
if you have trouble thinking
of which easing should I use,

100
00:07:56.264 --> 00:07:59.632
start with this one and
then adjust these two numbers.

101
00:07:59.632 --> 00:08:05.070
So now we actually need to use that,
again, we're gonna be getting into this

102
00:08:05.070 --> 00:08:11.220
in future lessons, but I'm just gonna put
it here for now, and now, nothing works.

103
00:08:11.220 --> 00:08:15.555
So, let's take a look at what's going on,
easing cubic-bezier, okay,

104
00:08:15.555 --> 00:08:19.980
we have two conflicting properties there,
that's why that's happening.

105
00:08:21.235 --> 00:08:25.606
And there we go, so
now we have a smoothly animating ball, so

106
00:08:25.606 --> 00:08:30.945
let's get, any questions about
CSS variables before I move on?

107
00:08:30.945 --> 00:08:36.170
&gt;&gt; So this change is reflected on every
element that is using this variable?

108
00:08:36.170 --> 00:08:36.869
&gt;&gt; All right, so

109
00:08:36.869 --> 00:08:40.380
the way that it works, and yeah,
that's an extremely good question.

110
00:08:40.380 --> 00:08:45.750
So the way that it works, and I'm just
going to do this as an example here.

111
00:08:45.750 --> 00:08:49.670
Let's say that we put this
ball in some container, right?

112
00:08:53.156 --> 00:08:58.387
And actually, I'm going to be changing
this so that the body is not the primary

113
00:08:58.387 --> 00:09:03.270
color but instead we're going to
be giving that to the ball itself.

114
00:09:03.270 --> 00:09:06.253
So right now it has this
cool little radial gradient,

115
00:09:06.253 --> 00:09:10.050
we're going to override that by
just giving it that primary color.

116
00:09:11.590 --> 00:09:16.880
Okay, so let's change this color here too.

117
00:09:16.880 --> 00:09:20.539
All right, so you can see right
now the ball is navy, and so

118
00:09:20.539 --> 00:09:25.097
if I actually wanted to change,
let's make it a bit of a brighter color,

119
00:09:25.097 --> 00:09:27.970
just so
that you could see it a little better.

120
00:09:27.970 --> 00:09:29.840
We're gonna make it bright blue, and so

121
00:09:29.840 --> 00:09:33.620
we're also going to make the heading
bright blue just to illustrate this.

122
00:09:33.620 --> 00:09:39.048
So if I said color there,
what do I call it?

123
00:09:39.048 --> 00:09:43.977
Primary color then you're
going to see that both

124
00:09:43.977 --> 00:09:48.431
the heading and
the ball are the same color.

125
00:09:48.431 --> 00:09:55.547
However, if I go and I add a style for the
container, which I'm gonna add up here,

126
00:09:55.547 --> 00:10:00.516
and I set that's primary
color to something different.

127
00:10:00.516 --> 00:10:06.612
Like let's call it red, then what's going
to happen is that only the container and

128
00:10:06.612 --> 00:10:09.748
all the elements under that container, so

129
00:10:09.748 --> 00:10:14.734
descendants of that container
are going to have that CSS variable.

130
00:10:14.734 --> 00:10:16.446
So if we go back here,

131
00:10:16.446 --> 00:10:21.322
now you could see that the heading
is blue but the ball is red.

132
00:10:21.322 --> 00:10:24.435
And so we could override this
even further by just saying,

133
00:10:24.435 --> 00:10:28.896
I'm going to define the primary color here
to be something completely different.

134
00:10:28.896 --> 00:10:34.637
So primary color, let's do green, although
I don't really like the default green,

135
00:10:34.637 --> 00:10:39.090
so let's do something nice and
bright here, and there we go.

136
00:10:39.090 --> 00:10:42.400
So not only are we overwriting
the root style but

137
00:10:42.400 --> 00:10:48.700
we're overriding the container style and
defining it within the element itself.

138
00:10:48.700 --> 00:10:53.851
So this goes to show you that even though
you could conceptually think of CSS

139
00:10:53.851 --> 00:10:59.513
variables as variables, they behave more
like properties in that they inherit.

140
00:10:59.513 --> 00:11:03.761
Now, this is more of an advanced topic but
there is a way for

141
00:11:03.761 --> 00:11:07.664
you to say that a CSS variable
should not inherit, but

142
00:11:07.664 --> 00:11:11.860
I don't know if there's full
browser support for that.

143
00:11:11.860 --> 00:11:16.361
So just know that CSS variables
inherit and they cascade, so

144
00:11:16.361 --> 00:11:20.246
if you override a variable
in some parent elements,

145
00:11:20.246 --> 00:11:25.740
then those changes are going to be
reflected for all descendants of that.

146
00:11:25.740 --> 00:11:30.755
&gt;&gt; Can you override CSS
variables in a pseudo element?

147
00:11:30.755 --> 00:11:35.210
&gt;&gt; Ooh good question, yes you definitely
can, and let's see an example of that.

148
00:11:35.210 --> 00:11:40.208
So, let's say that I added before, and

149
00:11:40.208 --> 00:11:47.780
I'm just gonna make it big,
with 100%, 0, top 0.

150
00:11:47.780 --> 00:11:52.567
And so now I want the background color to
be the primary color, and so this before

151
00:11:52.567 --> 00:11:57.840
is going to show up as a square because
we're not adding a border radius to it.

152
00:11:57.840 --> 00:12:03.430
So just like you could see here,
we have a square moving across the screen.

153
00:12:03.430 --> 00:12:08.105
But I could actually say,
hey, I want this primary

154
00:12:08.105 --> 00:12:12.685
color to actually be orange,
let's do that one.

155
00:12:12.685 --> 00:12:15.665
And so now we're overriding
it in the pseudo element.

156
00:12:15.665 --> 00:12:20.142
So this follows the cascade,
follows inheritance, and

157
00:12:20.142 --> 00:12:25.176
should work just as you expect,
as long as you keep that in mind,

158
00:12:25.176 --> 00:12:27.710
that CSS variables do inherit.

