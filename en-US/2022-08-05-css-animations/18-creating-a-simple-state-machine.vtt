WEBVTT

1
00:00:00.249 --> 00:00:04.967
All right, so let's control this a little
bit better with some JavaScript,

2
00:00:04.967 --> 00:00:07.010
just the same example over here.

3
00:00:08.600 --> 00:00:12.935
So we're going to be
adding a script over here.

4
00:00:12.935 --> 00:00:19.190
And remember, we put the data state
attribute on the app element.

5
00:00:19.190 --> 00:00:26.120
So what we could do is just have a way of
just toggling that from JavaScript itself.

6
00:00:26.120 --> 00:00:32.616
So first, like we showed before,
I'm gonna grab that app element,

7
00:00:32.616 --> 00:00:38.328
document.querySelector, and
we're gonna grab the app.

8
00:00:38.328 --> 00:00:45.015
And then what I want to do is this button,
so let's grab the button as well,

9
00:00:45.015 --> 00:00:51.723
const button = document.querySelector,
well, just the same button.

10
00:00:51.723 --> 00:00:56.712
We're going to add an event listener so
that when you click the button,

11
00:00:56.712 --> 00:00:59.299
we change the data states of the app.

12
00:00:59.299 --> 00:01:03.510
So button, call this buttonEl,

13
00:01:05.298 --> 00:01:08.580
.addEventListener, 'click'.

14
00:01:08.580 --> 00:01:12.288
And we are going to say

15
00:01:12.288 --> 00:01:19.720
appEl.dataset.state = 'loading'.

16
00:01:19.720 --> 00:01:24.210
Okay, so now let's actually
make this even more prominent.

17
00:01:24.210 --> 00:01:29.473
When this data state equals loading, let's
just change the background to orange.

18
00:01:29.473 --> 00:01:34.973
So I'm just gonna say bg,
let's call this, well,

19
00:01:34.973 --> 00:01:41.410
first, it will be white, and
then we want it to be orange.

20
00:01:41.410 --> 00:01:45.269
So now for the entire app,

21
00:01:45.269 --> 00:01:50.013
let's just say background bg.

22
00:01:50.013 --> 00:01:56.774
Okay, so right now it's loading just
because the data state is already loading.

23
00:01:56.774 --> 00:02:02.730
So if we remove that,
Then we have a plain app.

24
00:02:02.730 --> 00:02:06.480
And when we click the button,
now it changes to loading.

25
00:02:06.480 --> 00:02:10.789
So we could toggle between these, and so

26
00:02:10.789 --> 00:02:14.592
we could read that dataset state and

27
00:02:14.592 --> 00:02:19.664
say if the dataset.state
is already loading,

28
00:02:19.664 --> 00:02:26.420
then make it success,
otherwise, keep it as loading.

29
00:02:26.420 --> 00:02:29.720
So now it's going to
basically toggle back and

30
00:02:29.720 --> 00:02:34.210
forth between loading, success,
loading, success, etc.

31
00:02:36.090 --> 00:02:40.917
Now, there's other techniques for
how you could transition between states.

32
00:02:40.917 --> 00:02:44.581
One of my favorite techniques
is by using an object,

33
00:02:44.581 --> 00:02:47.009
so I could just say const machine.

34
00:02:47.009 --> 00:02:51.259
And this is related to my other
workshops on state machines, but

35
00:02:51.259 --> 00:02:54.418
you could do this without
using any libraries.

36
00:02:54.418 --> 00:02:59.178
So we could say machine, we have states,

37
00:02:59.178 --> 00:03:03.263
loading, success, and initial.

38
00:03:03.263 --> 00:03:05.350
This is just a plain object.

39
00:03:05.350 --> 00:03:10.149
And so we could say that we're
starting in the loading state,

40
00:03:10.149 --> 00:03:13.470
and so on: { CLICK: 'success'}, and

41
00:03:13.470 --> 00:03:17.970
in the success state on CLICK,
we go to 'loading'.

42
00:03:17.970 --> 00:03:22.191
And so now instead of doing this,
especially when your logic gets

43
00:03:22.191 --> 00:03:27.025
a lot more complex, we could just say
read whatever the current state is and

44
00:03:27.025 --> 00:03:31.670
figure out, using this object,
what the next state should be.

45
00:03:31.670 --> 00:03:36.865
So we could say const currentState

46
00:03:36.865 --> 00:03:41.348
= appEl.dataset.state.

47
00:03:41.348 --> 00:03:46.326
And so the next state should
be the machine.states,

48
00:03:46.326 --> 00:03:49.091
and so we're going to look for

49
00:03:49.091 --> 00:03:54.077
what the current state is,
so just do currentState.

50
00:03:54.077 --> 00:03:59.200
And then .on, and
then we're just gonna say this is a CLICK.

51
00:04:00.750 --> 00:04:03.940
And if that doesn't exist,
then just stay with the current state.

52
00:04:05.850 --> 00:04:11.485
And so now that is going to allow
us to just use that logic and

53
00:04:11.485 --> 00:04:14.017
set the state from there.

54
00:04:14.017 --> 00:04:16.745
Now, you don't have to do all this, but

55
00:04:16.745 --> 00:04:22.790
it does make it a lot easier to visualize
exactly how states can change in your app.

56
00:04:22.790 --> 00:04:29.395
So let's see, we have a little error,
cannot read on.

57
00:04:29.395 --> 00:04:33.632
Okay, so
we want to get the current state, so

58
00:04:33.632 --> 00:04:37.769
that's gonna be that or the initial state.

59
00:04:37.769 --> 00:04:44.416
Okay, so yeah, now we're going back and
forth between the three.

60
00:04:44.416 --> 00:04:50.210
And so we could even,
let's just have a start state.

61
00:04:51.870 --> 00:04:55.910
And then on CLICK,
we're gonna go to loading.

62
00:04:57.590 --> 00:05:01.799
So it's going to start in the start state,
and when you click, it goes to loading,

63
00:05:01.799 --> 00:05:05.588
and then when you click again, it's
gonna go to success, and then back and

64
00:05:05.588 --> 00:05:07.476
forth between loading and success.

65
00:05:07.476 --> 00:05:13.029
And again,
going back to data state attributes,

66
00:05:13.029 --> 00:05:18.848
we could change the background
to let's say green,

67
00:05:18.848 --> 00:05:21.623
make it a nicer green, so

68
00:05:21.623 --> 00:05:26.539
one of these greens, on the success state.

69
00:05:26.539 --> 00:05:31.296
So now, when we reload,
we're toggling back and

70
00:05:31.296 --> 00:05:34.806
forth between each of those states,

71
00:05:34.806 --> 00:05:39.238
we just have to set
the initial state to start,

72
00:05:45.239 --> 00:05:46.579
And there we go.

