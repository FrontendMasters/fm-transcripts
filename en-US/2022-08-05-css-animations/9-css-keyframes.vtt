WEBVTT

1
00:00:00.069 --> 00:00:01.310
All right, awesome.

2
00:00:01.310 --> 00:00:06.233
So let's move to the other big topic,
we're going from 0 to 60 now because

3
00:00:06.233 --> 00:00:10.343
we're gonna be talking about
animations using CSS keyframes.

4
00:00:10.343 --> 00:00:13.952
So to do this,
you're going to go to keyframe animations,

5
00:00:13.952 --> 00:00:17.433
you're basically going to see
the same thing over here.

6
00:00:17.433 --> 00:00:23.865
But now we're not going to be talking
about transitions between states,

7
00:00:23.865 --> 00:00:30.413
but rather explicitly defining
animations just for different elements.

8
00:00:30.413 --> 00:00:32.879
So to describe this, you know what,

9
00:00:32.879 --> 00:00:36.867
let me get rid of [LAUGH] that
big animation I have over there.

10
00:00:36.867 --> 00:00:41.563
Again, this is an anti pattern you
don't want to be changing the height of

11
00:00:41.563 --> 00:00:44.918
the font size, or
the font size, it's not height.

12
00:00:44.918 --> 00:00:49.687
Animations are different than
transitions because animations

13
00:00:49.687 --> 00:00:54.286
explicitly defined what happens
between state A and state B?

14
00:00:54.286 --> 00:00:58.310
So instead of just saying, go just
between those states, whatever properties

15
00:00:58.310 --> 00:01:02.288
are changed, we're going to find a smooth
way to animate between one and two.

16
00:01:02.288 --> 00:01:06.797
You could actually define exactly
what happens between those states.

17
00:01:06.797 --> 00:01:11.131
So let's take the ball as an example.

18
00:01:11.131 --> 00:01:14.779
Let's say that we want for
it to move around,

19
00:01:14.779 --> 00:01:17.759
so this is just a very basic example.

20
00:01:17.759 --> 00:01:20.821
What I'm going to do is
I'm going to remove all

21
00:01:20.821 --> 00:01:25.544
of the transition stuff in there, and
we are going to add an animation.

22
00:01:25.544 --> 00:01:29.300
So this is going to be animation,

23
00:01:29.300 --> 00:01:34.266
let's call it, move-like-a-square,

24
00:01:34.266 --> 00:01:38.704
very, very, random animation name.

25
00:01:38.704 --> 00:01:44.342
And so
this is going to be our animation-name.

26
00:01:44.342 --> 00:01:47.423
And just like a transition,
we are going to give it a duration.

27
00:01:47.423 --> 00:01:53.403
So transition-duration, we're going to
say that this happens over four seconds.

28
00:01:56.168 --> 00:02:00.003
Sorry, this should be animation-duration,
[COUGH].

29
00:02:00.003 --> 00:02:03.089
Okay, so those are the two basic
things we need to get started.

30
00:02:03.089 --> 00:02:07.330
Remember the default's timing
function is going to be ease or

31
00:02:07.330 --> 00:02:10.192
ease announced, it's one of those two.

32
00:02:10.192 --> 00:02:15.459
So now that we provided an animation name,
we have to define that animation.

33
00:02:15.459 --> 00:02:20.877
And so the way you do that is by using CSS
keyframes and then providing that name.

34
00:02:20.877 --> 00:02:26.203
So move-like-a-square.

35
00:02:26.203 --> 00:02:31.691
Okay, so CSS keyframes you could think
of as a timeline at the very beginning,

36
00:02:31.691 --> 00:02:34.952
and this timeline is
defined in percentages.

37
00:02:34.952 --> 00:02:39.537
So the very beginning is going to be 0%,

38
00:02:39.537 --> 00:02:43.598
the very end is going to be 100%.

39
00:02:43.598 --> 00:02:48.575
So just like transitions, you could
think of this as, we're defining many

40
00:02:48.575 --> 00:02:52.721
states along this timeline for
our elements to transition to.

41
00:02:52.721 --> 00:02:58.038
So we could say that this
might be transform: none.

42
00:02:58.038 --> 00:03:04.632
And that this 100% might be
transform: translate x().

43
00:03:04.632 --> 00:03:10.678
And let's say that we
want to move this 20vw.

44
00:03:10.678 --> 00:03:16.136
So 20, I guess you could think of
it as 20% of the viewport width,

45
00:03:16.136 --> 00:03:18.273
so the width of the screen.

46
00:03:18.273 --> 00:03:21.062
Okay, so now let's see when we do this,

47
00:03:21.062 --> 00:03:25.428
you can see it's actually moving
smoothly from here to there.

48
00:03:25.428 --> 00:03:29.114
And it doesn't really look like
an animation, it's warranted over here,

49
00:03:29.114 --> 00:03:31.143
it looks like you could use a transition.

50
00:03:31.143 --> 00:03:36.416
But remember, we're not changing states,
we're just defining the animation so

51
00:03:36.416 --> 00:03:39.595
that it's gonna start
pretty much immediately.

52
00:03:39.595 --> 00:03:44.218
Now, the cool thing about
keyframes is that you could define

53
00:03:44.218 --> 00:03:48.762
points in between that timeline
like what we talked about.

54
00:03:48.762 --> 00:03:53.770
So let's say that instead
of this being 100%,

55
00:03:53.770 --> 00:03:57.968
this is going to be,
I have to do some math.

56
00:03:57.968 --> 00:04:04.701
So 1, okay so
this is basically gonna be 33.3333%,

57
00:04:04.701 --> 00:04:09.367
and actually let's make it a smooth 25.

58
00:04:09.367 --> 00:04:14.032
So because this animation
is four seconds long,

59
00:04:14.032 --> 00:04:22.360
this 25% mark is going to happen at 25% of
four seconds which is one second later.

60
00:04:22.360 --> 00:04:25.594
So I'm going to move this over here.

61
00:04:25.594 --> 00:04:29.661
And so now we're going to
see that after one second,

62
00:04:29.661 --> 00:04:33.553
if I reload this,
it's going to move over there.

63
00:04:33.553 --> 00:04:36.953
After four seconds,
it is going to snap back and

64
00:04:36.953 --> 00:04:39.933
we're gonna talk about that in a minute.

65
00:04:39.933 --> 00:04:46.436
But notice over here we have the exact
same definition for 25% and 100%.

66
00:04:46.436 --> 00:04:51.174
So a shorthand for
that is you could separate by comma,

67
00:04:51.174 --> 00:04:55.191
the other percentage
marks of the keyframes so

68
00:04:55.191 --> 00:04:59.210
I could just put 25%, 100% over here.

69
00:04:59.210 --> 00:05:04.811
And so that's going to be the same thing
as moving and then stopping there for

70
00:05:04.811 --> 00:05:08.677
the duration of the animation and
then moving back.

71
00:05:08.677 --> 00:05:11.077
So let's continue our square.

72
00:05:11.077 --> 00:05:16.276
We have 25%,
we're moving to the right, 20vw and

73
00:05:16.276 --> 00:05:21.474
then at 50%,
we are going to move translateY maybe,

74
00:05:21.474 --> 00:05:25.139
I want it to be a square I did say square.

75
00:05:25.139 --> 00:05:30.235
So 20vw, and then, let's see,
that's gonna be translateY,

76
00:05:30.235 --> 00:05:36.250
but we do want to maintain the same
translateX, so we're gonna put that here.

77
00:05:39.708 --> 00:05:46.034
And at 75%,
we're going to translate this back to 0,

78
00:05:46.034 --> 00:05:50.809
and we're going to keep that Y the same,
and

79
00:05:50.809 --> 00:05:56.379
then at 100%,
we are going to transform none.

80
00:05:56.379 --> 00:06:01.337
So we want to get rid of all
the animation or sorry, all translation.

81
00:06:01.337 --> 00:06:05.714
So this is the same as doing this,
having 0 translation for X and

82
00:06:05.714 --> 00:06:11.324
0 translation for Y, but we're going to
change that to none just as a shorthand.

83
00:06:11.324 --> 00:06:15.113
So now let's see how it looks, Okay,

84
00:06:15.113 --> 00:06:19.208
it goes down to the left and back up.

85
00:06:19.208 --> 00:06:24.452
Now something that you might
have noticed before, and

86
00:06:24.452 --> 00:06:31.300
just to clarify what's happening,
let's make this overshoot a bit.

87
00:06:31.300 --> 00:06:36.170
So now, it will go like a square and
then go really up, but

88
00:06:36.170 --> 00:06:38.515
notice that it snaps back.

89
00:06:38.515 --> 00:06:42.954
So the reason that it snaps back
is because of what's known as

90
00:06:42.954 --> 00:06:44.615
animation fill mode.

91
00:06:44.615 --> 00:06:51.563
So if we inspect this element, anyway,
so that doesn't tell the full story.

92
00:06:51.563 --> 00:06:56.878
And neither of those computed values,
but what's happening is that by default,

93
00:06:56.878 --> 00:07:00.125
we're not going to have a fill for
the animation.

94
00:07:00.125 --> 00:07:05.232
And what that means is that,
at the 0% in 100%, so basically,

95
00:07:05.232 --> 00:07:10.518
when the animation starts and ends,
we're basically saying wherever

96
00:07:10.518 --> 00:07:15.740
the element is naturally supposed to be,
that's where it should be.

97
00:07:15.740 --> 00:07:20.966
So naturally the element is at 0, 0, so
it's not translated anywhere, so when

98
00:07:20.966 --> 00:07:25.988
this animation is finished we're going
to put that element back in its place.

99
00:07:25.988 --> 00:07:32.291
Now if we don't want that,
if we want this value to be sticky,

100
00:07:32.291 --> 00:07:40.197
then we are gonna have to add an animation
fill mode, so animation fill mode.

101
00:07:40.197 --> 00:07:44.627
And so there's three possible values for
this, there's forwards,

102
00:07:44.627 --> 00:07:46.137
backwards, and both.

103
00:07:46.137 --> 00:07:49.516
So let's do forwards first just
to show you what that looks like.

104
00:07:56.371 --> 00:07:58.103
It's gonna go back up here, and

105
00:07:58.103 --> 00:08:01.254
notice that it's actually
sticking to the top this time.

106
00:08:03.417 --> 00:08:06.126
So this is just as we expect.

107
00:08:06.126 --> 00:08:12.218
Now let's add a delay to this so that
we could demonstrate what backwards is.

108
00:08:12.218 --> 00:08:17.851
So animation-delay, 1 second,

109
00:08:17.851 --> 00:08:23.109
so now let's start the transform

110
00:08:23.109 --> 00:08:27.627
at translateX, -20vw.

111
00:08:27.627 --> 00:08:32.541
So when we do this, it's going to
start in its natural place and

112
00:08:32.541 --> 00:08:38.786
then sort of immediately go to its -20vw
place and then start the animation.

113
00:08:38.786 --> 00:08:42.863
So that also might not look right,
depending on what you want to do.

114
00:08:42.863 --> 00:08:49.418
So if we add,
Animation fill mode backwards,

115
00:08:49.418 --> 00:08:54.003
then that will solve that problem
because now we're saying,

116
00:08:54.003 --> 00:08:57.717
place this element at
the start of the animation.

117
00:08:57.717 --> 00:09:02.565
Okay, so now we have the reverse
problem where it's not coming back,

118
00:09:02.565 --> 00:09:05.700
or it's not sticking
to its final position.

119
00:09:05.700 --> 00:09:10.260
And that's why we have
animation-fill-mode: both.

120
00:09:10.260 --> 00:09:15.147
And so what this is going to do, is it's
going to make sure that it's sticky at

121
00:09:15.147 --> 00:09:17.493
the beginning, and at the very end.

122
00:09:17.493 --> 00:09:21.486
So it's not going to snap back
to its original position.

123
00:09:21.486 --> 00:09:28.041
All right, so we talked about animation
name, duration, delay, fill mode.

124
00:09:28.041 --> 00:09:32.221
So now I'm gonna change a couple of
things, we're gonna put transform none

125
00:09:32.221 --> 00:09:37.888
over here, And transform none over here.

126
00:09:37.888 --> 00:09:45.142
And let's say that I actually
want this to just keep animating.

127
00:09:45.142 --> 00:09:51.173
So we could have an animation, it's called
iteration count, and you could give it

128
00:09:51.173 --> 00:09:56.190
a number where you could say, hey,
I want this to happen five times.

129
00:09:56.190 --> 00:09:59.246
And so, it's not gonna do it here, so

130
00:09:59.246 --> 00:10:04.032
I had to do it here,
animation-iteration-counts: 5.

131
00:10:04.032 --> 00:10:08.041
And let's actually make this
a little bit faster just so

132
00:10:08.041 --> 00:10:11.549
you could see,
we'll remove the delay as well.

133
00:10:11.549 --> 00:10:16.852
So it's gonna happen basically five times,
so that a second iteration,

134
00:10:16.852 --> 00:10:22.511
third, here's a fourth, and here's
a fifth, and then it's going to stop.

135
00:10:22.511 --> 00:10:24.903
So if you want it to keep going,

136
00:10:24.903 --> 00:10:29.144
you could basically say that
this should be infinite.

137
00:10:29.144 --> 00:10:33.761
And now this is gonna keep going, so
this is a really great way to make

138
00:10:33.761 --> 00:10:38.477
loading spinners or things that
just have to continuously animate.

139
00:10:38.477 --> 00:10:40.814
Like I talked about in the fundamentals,

140
00:10:40.814 --> 00:10:44.622
it's important to keep in mind
that the animation-duration is for

141
00:10:44.622 --> 00:10:47.917
a single iteration, it's not for
the entire animation.

142
00:10:47.917 --> 00:10:53.179
Because the math wouldn't exactly work
out there if you have an infinite

143
00:10:53.179 --> 00:10:59.218
animation iteration count, and only two
seconds then things are gonna be really,

144
00:10:59.218 --> 00:11:02.335
really, really, really fast, so yeah.

145
00:11:02.335 --> 00:11:07.759
And so there's another property too
which you might not use to often, but

146
00:11:07.759 --> 00:11:14.602
it's really useful to know about, and that
is animation-duration, sorry, direction.

147
00:11:14.602 --> 00:11:20.829
So animation-direction
specifies when you have 0% and

148
00:11:20.829 --> 00:11:28.845
100%, do you want us to go from
0% to 100%, or 100% to 0%?

149
00:11:28.845 --> 00:11:35.014
So if we do reverse,
notice how now it's gonna go backwards.

150
00:11:35.014 --> 00:11:37.609
And we could also do
some really cool things.

151
00:11:37.609 --> 00:11:39.374
We could say, alternate.

152
00:11:39.374 --> 00:11:42.484
And so now at every other iteration,

153
00:11:42.484 --> 00:11:47.311
it's actually going to do
the reverse of the animation.

154
00:11:47.311 --> 00:11:51.086
And, of course,
you could even do alternate-reverse.

155
00:11:53.217 --> 00:11:58.071
So there's some pretty interesting
things that you could do here.

156
00:11:58.071 --> 00:12:00.696
Additionally, what you could do is,

157
00:12:00.696 --> 00:12:04.725
you could specify the timing function for
each keyframe.

158
00:12:04.725 --> 00:12:09.719
And so this is a bit more of an advanced
thing, but it's there if you need it.

159
00:12:09.719 --> 00:12:13.077
We could say animation-timing-function,

160
00:12:13.077 --> 00:12:17.303
let's just call this linear and
see what that looks like.

161
00:12:17.303 --> 00:12:23.783
So now, notice that at the second leg over
here, it's going very, very straight,

162
00:12:23.783 --> 00:12:29.743
it's a linear easing, it's not a nice
smooth easing like the rest of these.

163
00:12:29.743 --> 00:12:33.055
So basically at the 25% mark,

164
00:12:33.055 --> 00:12:38.025
it's going to take the linear
timing function and

165
00:12:38.025 --> 00:12:41.944
apply that between 25% and 50%.

166
00:12:41.944 --> 00:12:48.038
So the final thing I wanna talk about
here before we get to our exercise is,

167
00:12:48.038 --> 00:12:54.649
again, notice how both our 0% and
100% animations have transform none.

168
00:12:54.649 --> 00:12:56.261
We could group those together.

169
00:12:56.261 --> 00:13:01.217
So we could say 0%, 100%, just like that.

170
00:13:02.655 --> 00:13:07.952
And also, there are some keywords for
0% and 100%.

171
00:13:07.952 --> 00:13:13.320
So 0%, you could call it from,
and 100%, you could call it to.

172
00:13:16.728 --> 00:13:20.954
And so
now it's going to work exactly the same.

173
00:13:20.954 --> 00:13:24.406
And actually,
I'd add one more thing to talk about,

174
00:13:24.406 --> 00:13:27.717
you could have multiple
animations on an element.

175
00:13:27.717 --> 00:13:34.963
So we could say,
Let's just call this red to green,

176
00:13:34.963 --> 00:13:40.168
and so
we could have keyframes red to green, and

177
00:13:40.168 --> 00:13:47.340
let's just say this is from
background red to background green.

178
00:13:47.340 --> 00:13:51.852
And so what's interesting is
that these two animations

179
00:13:51.852 --> 00:13:55.885
are going to happen pretty
much simultaneously.

180
00:13:55.885 --> 00:13:59.830
And the second animation, or
the subsequent animations

181
00:13:59.830 --> 00:14:03.952
are not going to assume the same
divisions as the first one.

182
00:14:03.952 --> 00:14:08.871
So the red to green is not going
to happen at 25%, 50% etc,

183
00:14:08.871 --> 00:14:11.799
it's going to be doing its own thing.

184
00:14:11.799 --> 00:14:18.824
And so one thing to keep in mind is that
you cannot do this with the same property.

185
00:14:18.824 --> 00:14:23.440
So if red to green for whatever reason
you added a transform over here,

186
00:14:23.440 --> 00:14:28.459
it's actually going to conflict with
the original transform that you had.

187
00:14:28.459 --> 00:14:32.081
So, it's just something to keep in mind.

188
00:14:32.081 --> 00:14:37.302
All right, any questions about
keyframe animations in CSS?

189
00:14:37.302 --> 00:14:40.810
&gt;&gt; So in that last example,
will that override and

190
00:14:40.810 --> 00:14:45.993
cascade that style down with that
second declaration of red to green?

191
00:14:45.993 --> 00:14:50.160
Will that transform take effect or
will they just kind of cancel out?

192
00:14:50.160 --> 00:14:50.907
&gt;&gt; Let's find out?

193
00:14:50.907 --> 00:14:53.002
&gt;&gt; Let's find out.

194
00:14:53.002 --> 00:14:59.738
Okay, so we have both scale and,
so it overrides the first one.

195
00:14:59.738 --> 00:15:04.204
Just because CSS is trying to
determine at any given point of time,

196
00:15:04.204 --> 00:15:08.751
which style should we apply and
because this one is defined second,

197
00:15:08.751 --> 00:15:10.770
it's going to take that one.

