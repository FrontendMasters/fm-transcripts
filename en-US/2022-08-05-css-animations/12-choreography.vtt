WEBVTT

1
00:00:00.000 --> 00:00:04.996
Okay now we are gonna talk about
the next topic which is choreography.

2
00:00:04.996 --> 00:00:09.504
Now we've so far been talking
about doing transitions and

3
00:00:09.504 --> 00:00:12.636
animations with individual elements.

4
00:00:12.636 --> 00:00:17.837
But sometimes when you're doing
an animation for a website or a web app.

5
00:00:17.837 --> 00:00:22.449
You might have multiple things that need
to actually coordinate with each other.

6
00:00:22.449 --> 00:00:26.065
And so there's nothing built in for
CSS to do that.

7
00:00:26.065 --> 00:00:28.673
Of course, there's JavaScript
libraries for animations.

8
00:00:28.673 --> 00:00:31.927
But honestly, by using CSS variables,

9
00:00:31.927 --> 00:00:36.438
we could choreograph our CSS
animations just the same.

10
00:00:36.438 --> 00:00:39.563
So first of all,
what do I mean by choreography?

11
00:00:39.563 --> 00:00:44.265
By choreography,
I mean multiple elements coordinating with

12
00:00:44.265 --> 00:00:48.443
each other to make it seem
like one cohesive animation.

13
00:00:48.443 --> 00:00:52.418
So if you think of dancers,choreography
moves, then one dancer might

14
00:00:52.418 --> 00:00:56.801
do something and then in response,
the other dancer might do something else.

15
00:00:56.801 --> 00:00:58.622
Then they might do things together.

16
00:00:58.622 --> 00:01:01.727
So this is pretty much the same thing.

17
00:01:01.727 --> 00:01:06.559
Okay, so
in order to demonstrate choreography,

18
00:01:06.559 --> 00:01:10.354
let's make multiple squares or what,

19
00:01:10.354 --> 00:01:14.272
we'll just make two or three, why not?

20
00:01:14.272 --> 00:01:17.391
So let's see how that looks.

21
00:01:17.391 --> 00:01:22.962
Okay, we're gonna get rid of
this animation real quick, well,

22
00:01:22.962 --> 00:01:29.874
let's not move it like a square anymore
but let's just get rid of that right now.

23
00:01:29.874 --> 00:01:30.454
Okay.

24
00:01:34.187 --> 00:01:40.201
Okay, so now let's say that we
wanna make a loader in a way.

25
00:01:40.201 --> 00:01:46.991
So what we wanna happen is basically had
this go then this one than this one.

26
00:01:46.991 --> 00:01:51.328
And you want them to move back and
forth one after the other this.

27
00:01:51.328 --> 00:01:56.173
So the first thing that we could
do is we need some sorta way and

28
00:01:56.173 --> 00:01:59.032
again this is using CSS variables.

29
00:01:59.032 --> 00:02:03.888
But we need some sorta way to indicate
which ball we're talking about.

30
00:02:03.888 --> 00:02:07.554
So one way you could do that
right now is you could the let

31
00:02:07.554 --> 00:02:10.607
well let's start by
giving it an animation.

32
00:02:10.607 --> 00:02:15.290
So animation we're gonna say move right.

33
00:02:15.290 --> 00:02:18.570
And that's gonna be after one second and
so

34
00:02:18.570 --> 00:02:23.684
we want the film out to be both so
let's add the key frames for that.

35
00:02:26.719 --> 00:02:32.875
And so we're gonna go from
transform none to transform,

36
00:02:32.875 --> 00:02:36.605
let's say 25 viewpoint width.

37
00:02:36.605 --> 00:02:41.750
Okay, so right now won't do anything.

38
00:02:41.750 --> 00:02:48.372
Let me make sure I have everything right
so animation, move right one second, both.

39
00:02:51.280 --> 00:02:52.290
What am I missing?

40
00:02:52.290 --> 00:02:54.876
Let's.

41
00:02:54.876 --> 00:02:57.106
So, gonna close this out.

42
00:02:59.967 --> 00:03:06.142
And this should be working well.

43
00:03:06.142 --> 00:03:13.622
[LAUGH] Okay, so
transform this should be translate X.

44
00:03:13.622 --> 00:03:15.798
There we go.

45
00:03:15.798 --> 00:03:18.156
Okay, so now it's gonna move to the right.

46
00:03:18.156 --> 00:03:22.770
So I'm just refreshing the page and
showing that that's moving to the right.

47
00:03:22.770 --> 00:03:25.049
Now,let's say that I
wanna choreograph this.

48
00:03:25.049 --> 00:03:27.886
So it happens one at a time.

49
00:03:27.886 --> 00:03:33.063
Well, because we know that there
are three, we could use nth

50
00:03:33.063 --> 00:03:38.354
index to just specify an animation
delay for each one of them.

51
00:03:38.354 --> 00:03:43.934
So we could say an nth index or
sorry nth child at the second and

52
00:03:43.934 --> 00:03:46.793
child we wanna give it a delay.

53
00:03:46.793 --> 00:03:50.917
So we're gonna say animation
delay in this is gonna be,

54
00:03:50.917 --> 00:03:54.093
let's see what happens after one second.

55
00:03:59.000 --> 00:04:03.632
And then for nth child three,
we can say two seconds.

56
00:04:03.632 --> 00:04:09.642
So now, each one of them
is gonna happen one by one.

57
00:04:09.642 --> 00:04:14.958
But there's a problem with
this let's see that we change

58
00:04:14.958 --> 00:04:19.620
the overall animation
to be just 0.5 seconds.

59
00:04:19.620 --> 00:04:26.959
So now you have that awkward pause
in between each of the animations.

60
00:04:26.959 --> 00:04:30.502
It's not easy to just go and
find all of them.

61
00:04:30.502 --> 00:04:34.070
I mean, it's easy over here but when
you have multiple to pull elements that

62
00:04:34.070 --> 00:04:36.039
live in different parts of the document.

63
00:04:36.039 --> 00:04:39.580
Then it's not easy to hunt them down and
change their values.

64
00:04:39.580 --> 00:04:41.016
So what can we do?

65
00:04:41.016 --> 00:04:43.373
Well, we could use CSS variables.

66
00:04:43.373 --> 00:04:49.439
So, if I set the duration here,
duration to 0.5 seconds,

67
00:04:49.439 --> 00:04:52.834
I can substitute this value here.

68
00:04:52.834 --> 00:04:59.288
So this is gonna be
variable duration oops.

69
00:04:59.288 --> 00:05:05.381
And so now the animation delay here,
we could just set it as that duration.

70
00:05:05.381 --> 00:05:07.044
But now we have to do something here.

71
00:05:07.044 --> 00:05:11.286
We know that this is gonna happen,
after the first two animations.

72
00:05:11.286 --> 00:05:14.310
So we have to use calc.

73
00:05:14.310 --> 00:05:21.369
So inside of calc if we pass the duration
and we're gonna multiply it by two.

74
00:05:21.369 --> 00:05:25.219
Okay, so now that we use CSS variables,

75
00:05:25.219 --> 00:05:29.759
we see that they now happen
one after the other.

76
00:05:29.759 --> 00:05:35.269
And so if we make this like really short.

77
00:05:35.269 --> 00:05:42.794
We see that everything is working,
so that's pretty great.

78
00:05:42.794 --> 00:05:46.792
Yeah, so we could even make it a second
and basically you get the idea.

79
00:05:50.784 --> 00:05:53.794
We can also do what's called a stagger.

80
00:05:53.794 --> 00:05:56.351
And so when you stagger animations,

81
00:05:56.351 --> 00:06:00.732
that means that there's actually
some overlap between them.

82
00:06:00.732 --> 00:06:04.221
So, instead of just var duration or
var duration,

83
00:06:04.221 --> 00:06:09.426
we could say calc var duration and
subtracted by some sorta fixed value you.

84
00:06:09.426 --> 00:06:15.342
So we could say just subtract
0.1 seconds here and

85
00:06:15.342 --> 00:06:19.382
subtract 0.1 seconds here too.

86
00:06:19.382 --> 00:06:22.539
[COUGH] Now some of you might
look at this and say hey,

87
00:06:22.539 --> 00:06:26.151
that could be a CSS variable
to you're absolutely right.

88
00:06:26.151 --> 00:06:31.437
So let's just call this stagger and
then negative 0.1 seconds.

89
00:06:31.437 --> 00:06:34.927
And then we could just
replace each of these.

90
00:06:41.689 --> 00:06:44.111
Okay, let's see what happened over here.

91
00:06:44.111 --> 00:06:47.634
Let's make this actually more pronounced.

92
00:06:50.565 --> 00:06:51.099
No.

93
00:06:54.180 --> 00:06:58.306
It's because I'm subtracting so
there we go math is hard.

94
00:07:01.023 --> 00:07:04.095
Okay so you see we almost have it working.

95
00:07:04.095 --> 00:07:08.608
We just have to, let's see,
minus fair stagger and

96
00:07:08.608 --> 00:07:12.003
we have to multiply that by two as well.

97
00:07:12.003 --> 00:07:16.376
Okay, so now we have a stagger over there.

98
00:07:18.670 --> 00:07:22.770
Okay, so if someone says like,
hey, I like your animation

99
00:07:22.770 --> 00:07:27.613
with the three red balls looks really
nice but I wanna add a fourth one.

100
00:07:27.613 --> 00:07:32.575
All of a sudden that becomes a little
bit of a headache because now you

101
00:07:32.575 --> 00:07:37.637
have to add nth child four and
everything so what do we do in that case.

102
00:07:37.637 --> 00:07:42.585
More CSS variables but this is actually
better because inside the HTML.

103
00:07:42.585 --> 00:07:47.761
And this is pretty much the only thing
I like using this style type for,

104
00:07:47.761 --> 00:07:50.323
is for setting that CSS variable.

105
00:07:50.323 --> 00:07:55.544
So I like to use I as a variable
just like you would use an array.

106
00:07:55.544 --> 00:07:59.729
And set that to the index of each
HTML element like in a list or

107
00:07:59.729 --> 00:08:04.862
something like that now if you're
using a framework like view or react.

108
00:08:04.862 --> 00:08:09.515
Then you could just when you're
mapping over items in the list you

109
00:08:09.515 --> 00:08:14.350
already had this value so
it's pretty easy to do this dynamically.

110
00:08:14.350 --> 00:08:15.155
And so now.

111
00:08:17.814 --> 00:08:24.057
Instead of doing nth child,
we could pretty abstract this and

112
00:08:24.057 --> 00:08:28.389
say this is gonna be animation move right.

113
00:08:28.389 --> 00:08:32.806
And it's gonna be for the duration but

114
00:08:32.806 --> 00:08:39.164
our delay is gonna be the calc
bear duration actually.

115
00:08:39.164 --> 00:08:46.981
So we had to put this in
parentheses minus the stagger.

116
00:08:46.981 --> 00:08:52.711
So actually,
we could just do this interval calc,

117
00:08:52.711 --> 00:08:56.456
var duration minus var stagger.

118
00:08:56.456 --> 00:09:04.118
Okay, so now we have each of
the intervals over here and

119
00:09:04.118 --> 00:09:10.794
we are gonna multiply
that by that index value.

120
00:09:10.794 --> 00:09:13.825
So if I get rid of all these.

121
00:09:13.825 --> 00:09:18.574
Then, hopefully it works the same and
yet it works exactly the same.

122
00:09:18.574 --> 00:09:24.751
So now in our HTML,
I could add maybe a couple more.

123
00:09:26.228 --> 00:09:28.800
And there we go.

124
00:09:28.800 --> 00:09:31.078
Now we have a nice stagger animation.

125
00:09:31.078 --> 00:09:35.845
So the main idea here is that we're
using CSS variables to coordinate

126
00:09:35.845 --> 00:09:38.075
animations between elements.

127
00:09:38.075 --> 00:09:42.916
And so the reason that this is useful
is because these variables can

128
00:09:42.916 --> 00:09:45.604
be defined actually at the parents.

129
00:09:45.604 --> 00:09:48.763
So now you sorta have this shared context,

130
00:09:48.763 --> 00:09:54.041
you have these values to where any
child element can read these values.

131
00:09:54.041 --> 00:09:58.946
And say hey I wanna animate after
this thing animates well you could

132
00:09:58.946 --> 00:10:03.160
grab that CSS variable from
the parents and do just that.

133
00:10:03.160 --> 00:10:06.450
So that's the basics behind choreography.

