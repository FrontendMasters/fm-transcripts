WEBVTT

1
00:00:00.520 --> 00:00:04.188
All right, so, this works pretty well.

2
00:00:04.188 --> 00:00:10.512
And this is pretty much the basics of
how you could do reactive animations

3
00:00:10.512 --> 00:00:17.158
with CSS by just sending those values
over from JavaScript land to CSS land.

4
00:00:17.158 --> 00:00:21.905
But I actually do want to take
this a little bit further.

5
00:00:21.905 --> 00:00:28.220
And so, to do this, we're going to be
using what's known as the lerp technique.

6
00:00:28.220 --> 00:00:32.615
And so, this is gonna be combining
things from the previous lesson with

7
00:00:32.615 --> 00:00:34.980
requestAnimationFrame.

8
00:00:34.980 --> 00:00:38.458
So first of all, what is lerp?

9
00:00:38.458 --> 00:00:41.316
It sounds like a weird made up word,
it's sort of is.

10
00:00:41.316 --> 00:00:45.000
And in fact, for a while,
I thought that lerp stood for something.

11
00:00:45.000 --> 00:00:48.129
I don't think it does,
I think it's supposed to be for

12
00:00:48.129 --> 00:00:50.859
linear interpolation or
something like that.

13
00:00:50.859 --> 00:00:56.150
But yeah, so anyway, let me take this.

14
00:00:57.960 --> 00:00:59.770
Here's what lerp is.

15
00:00:59.770 --> 00:01:04.358
Let's say that you have your
first position over here, and

16
00:01:04.358 --> 00:01:06.761
your last position over here.

17
00:01:06.761 --> 00:01:12.779
So let's say the mouse is moving really
fast, and you go from here to here.

18
00:01:12.779 --> 00:01:15.228
And you don't want it to do that,

19
00:01:15.228 --> 00:01:20.730
you want it to move smoothly from
one position to another position.

20
00:01:20.730 --> 00:01:24.345
So, instead of it moving
directly with your mouse,

21
00:01:24.345 --> 00:01:27.468
a lot of websites do
this where it's actually

22
00:01:27.468 --> 00:01:31.838
doing a very smooth transition
from where it was to your mouse.

23
00:01:31.838 --> 00:01:36.891
And so, because the distance isn't known
ahead of time, you can't just calculate

24
00:01:36.891 --> 00:01:41.620
keyframes, or animation duration,
or anything like that, on the fly.

25
00:01:41.620 --> 00:01:47.200
Instead, it's using a different technique
in which there is no defined animation.

26
00:01:47.200 --> 00:01:48.780
So here's the technique.

27
00:01:48.780 --> 00:01:54.301
Let's say that, instead of doing this,
going from this frame to this frame,

28
00:01:54.301 --> 00:01:59.590
basically going from here to there,
like the blue to the red in two frames.

29
00:01:59.590 --> 00:02:01.989
We want to do that over
a series of frames, but

30
00:02:01.989 --> 00:02:04.260
we want to do it in a smooth way.

31
00:02:04.260 --> 00:02:06.210
Well, here's what we could do.

32
00:02:06.210 --> 00:02:09.520
Let's pick a fraction, like 0.5.

33
00:02:09.520 --> 00:02:14.335
So with 0.5, we could say hey,
on the next frame,

34
00:02:14.335 --> 00:02:17.656
go halfway there, and then repeat.

35
00:02:17.656 --> 00:02:21.413
So on the next frame, go halfway there.

36
00:02:21.413 --> 00:02:25.820
In fact, that should be there,
and there, and then repeat again.

37
00:02:25.820 --> 00:02:30.847
On the next frame, halfway there,
on the next frame,

38
00:02:30.847 --> 00:02:37.312
halfway there, on the next frame,
halfway there, you get the idea.

39
00:02:37.312 --> 00:02:42.614
So if you look at this as sort of like
positions over time, you could see that

40
00:02:42.614 --> 00:02:48.022
it's going really fast, and then slowing
down as it reaches its position.

41
00:02:48.022 --> 00:02:51.847
And by following the same,
the formula, you could call it,

42
00:02:51.847 --> 00:02:56.200
by going only halfway every time,
it doesn't matter where this is.

43
00:02:56.200 --> 00:03:00.157
So let's say that this is here,
we're going to apply the same thing.

44
00:03:00.157 --> 00:03:06.537
So we're gonna go halfway,
and halfway, and halfway.

45
00:03:06.537 --> 00:03:10.473
And so you could see that, over time,
we're going from here to here, and

46
00:03:10.473 --> 00:03:14.040
it's smoothly animating to
wherever your cursor is.

47
00:03:14.040 --> 00:03:15.770
All right, so how could we do that?

48
00:03:15.770 --> 00:03:21.047
Well, we could use both a combination
of CSS variables and lerp.

49
00:03:21.047 --> 00:03:23.081
Which, again, stands for

50
00:03:23.081 --> 00:03:27.691
linear interpolation, I believe,
don't quote me on that.

51
00:03:27.691 --> 00:03:30.843
Okay, so, how does lerp work?

52
00:03:30.843 --> 00:03:33.579
So, for lerp to work,

53
00:03:33.579 --> 00:03:39.750
I'm just going to take
these two over here.

54
00:03:39.750 --> 00:03:43.087
Let's keep track of our currents points,

55
00:03:43.087 --> 00:03:46.803
which we're just gonna say is x at 0 and
y at 0.

56
00:03:46.803 --> 00:03:50.859
And our target points, which is
wherever the mouse cursor currently is.

57
00:03:50.859 --> 00:03:54.383
So instead of setting the x and
y from the event,

58
00:03:54.383 --> 00:03:59.069
we are going to set the target
points to whatever that x and y is.

59
00:03:59.069 --> 00:04:05.011
So we're going to say
targetPoint.x = clientX,

60
00:04:05.011 --> 00:04:08.888
and targetPoint.y = clientY.

61
00:04:08.888 --> 00:04:13.258
Now, remember, over here,
every animation frame,

62
00:04:13.258 --> 00:04:18.203
we want to move a portion of
the way towards the target points.

63
00:04:18.203 --> 00:04:22.257
And so that's what's gonna
get us our smooth animation.

64
00:04:22.257 --> 00:04:27.950
All right, so, that's something that
we're going to do in the lerp function.

65
00:04:27.950 --> 00:04:33.049
Okay, so to do this,
we have to calculate a couple of things,

66
00:04:33.049 --> 00:04:36.098
first of all the delta between the x.

67
00:04:36.098 --> 00:04:41.588
I know this is sort of a flashback to our
previous exercise on layout animations.

68
00:04:41.588 --> 00:04:46.523
But we're calculating the delta for
the x value and the delta for

69
00:04:46.523 --> 00:04:52.610
the y value, just to see how do we get
to the middle of those two points.

70
00:04:52.610 --> 00:04:58.240
So const dx = targetPoint.x-
the currentPoint.x.

71
00:04:59.980 --> 00:05:05.547
dy = targetPoint.y- minus
the currentPoint.y.

72
00:05:05.547 --> 00:05:10.449
And then we are going to make
the currents point such that

73
00:05:10.449 --> 00:05:15.781
it's moving closer to the target
point by some percentage.

74
00:05:15.781 --> 00:05:21.174
So to do that,
we're gonna say currentPoint.x

75
00:05:21.174 --> 00:05:25.916
= currentPoint.x + a fraction of this.

76
00:05:25.916 --> 00:05:30.941
So let's just say 0.5, dx times 0.5.

77
00:05:30.941 --> 00:05:35.982
And then we're gonna do the same here,
dy * 0.5.

78
00:05:35.982 --> 00:05:41.969
And then we are going to set those
styles inside of that lerp function.

79
00:05:41.969 --> 00:05:44.336
So we're gonna do it over here.

80
00:05:46.951 --> 00:05:51.053
Okay, so
this is going to run continuously, and

81
00:05:51.053 --> 00:05:54.264
I'll show you what I mean in a minute.

82
00:05:54.264 --> 00:05:59.708
So this is going to be currentPoint.x and

83
00:05:59.708 --> 00:06:02.357
currentPoint.y.

84
00:06:02.357 --> 00:06:06.916
Okay, so, right now this isn't
gonna do much of anything.

85
00:06:06.916 --> 00:06:09.754
But let's just take a look,
so moving this.

86
00:06:12.986 --> 00:06:17.901
Let me make sure that we have the right
file, let me just close this out.

87
00:06:21.243 --> 00:06:24.844
Okay, so we actually need to call lerp,
sorry about that.

88
00:06:24.844 --> 00:06:29.615
So whenever this happens,
I'm gonna call lerp, not lert, the lerp.

89
00:06:29.615 --> 00:06:35.447
Okay, so now, it's not moving halfway yet,
we still have to do that.

90
00:06:35.447 --> 00:06:40.402
And so that's something that we
could do in an animation frame.

91
00:06:40.402 --> 00:06:44.019
So, this is going to
recursively call itself.

92
00:06:44.019 --> 00:06:48.551
Because, again, when we're moving
somewhere, we want it to move halfway, and

93
00:06:48.551 --> 00:06:50.863
then we want it to do
the same thing again.

94
00:06:50.863 --> 00:06:54.369
So move halfway, then halfway,
then halfway, and so

95
00:06:54.369 --> 00:06:57.330
on, until it reaches that point.

96
00:06:57.330 --> 00:07:02.450
So we're going to request the animation
frame, and we're gonna lerp again.

97
00:07:02.450 --> 00:07:05.953
And so,
let's kick it off by actually lerping, and

98
00:07:05.953 --> 00:07:11.680
then that's going to recursively call
lerp every single animation frame.

99
00:07:11.680 --> 00:07:15.000
Okay, so, by doing that,
hopefully this works.

100
00:07:16.160 --> 00:07:20.320
All right, you could see that now it
is smoothly animating to my mouse.

101
00:07:20.320 --> 00:07:25.911
And we did pick 0.5, and so that's going
to make it go really quickly to our mouse.

102
00:07:25.911 --> 00:07:29.352
So it doesn't really look
like it's being super smooth,

103
00:07:29.352 --> 00:07:33.087
because it looks like it's just
almost attached to our mouse.

104
00:07:33.087 --> 00:07:38.705
So to make this more apparent,
I'm gonna change this to 0.1.

105
00:07:38.705 --> 00:07:45.121
And so now, you see it's taking its
sweet time getting to the mouse.

106
00:07:45.121 --> 00:07:52.337
So if I get rid of the before,
let's just do display: none.

107
00:07:56.293 --> 00:08:02.292
Now you can see we have a ball
smoothly following our mouse.

108
00:08:02.292 --> 00:08:06.878
So the combination of the lerp,
using the lerp technique,

109
00:08:06.878 --> 00:08:11.021
which is, again, just a four or
five line function.

110
00:08:11.021 --> 00:08:15.998
And using requestAnimationFrame, and
using CSS variables allow you to do

111
00:08:15.998 --> 00:08:20.900
these kinds of smooth animations that
don't have a specified duration.

112
00:08:22.940 --> 00:08:25.789
And so, by combining this with data state,

113
00:08:25.789 --> 00:08:29.332
there's a lot of possibilities for
what you could do.

114
00:08:29.332 --> 00:08:33.430
Some of the reactive animations I have,
I'd love to show you over here.

115
00:08:33.430 --> 00:08:39.470
So there's, let's see, this one,
where we sort of use the same technique.

116
00:08:40.600 --> 00:08:43.090
And so this is something that
we've done on the key framers.

117
00:08:43.090 --> 00:08:44.510
So we're following this circle.

118
00:08:44.510 --> 00:08:48.888
And then when we click,
we're changing some states so

119
00:08:48.888 --> 00:08:54.390
that we could actually reveal
the next states when we click.

120
00:08:54.390 --> 00:08:57.930
So there's that one, diamond slider.

121
00:08:57.930 --> 00:09:03.040
This one was really fun, because,
this I believe, also uses lerp.

122
00:09:03.040 --> 00:09:06.928
Yep, so I even have something
called createLerper over here.

123
00:09:06.928 --> 00:09:08.970
You don't have to worry
about what that is.

124
00:09:08.970 --> 00:09:11.570
It's using the exact same lerp function.

125
00:09:11.570 --> 00:09:17.014
And so, this is for the diamond over here,
where, when we go really fast over here,

126
00:09:17.014 --> 00:09:21.800
it tilts a little bit, and
then it finally reaches its position.

127
00:09:21.800 --> 00:09:26.254
So now we're using it in slightly
a different way than we use over here,

128
00:09:26.254 --> 00:09:31.390
where instead of interpolating the
position, we're interpolating rotation.

129
00:09:32.950 --> 00:09:38.559
And so, that's why it's useful to,
basically, have unitless values.

130
00:09:38.559 --> 00:09:43.575
Because now you could use how
far the mouse moved in order

131
00:09:43.575 --> 00:09:48.386
to translate that into degrees,
instead of pixels.

132
00:09:48.386 --> 00:09:55.939
So it's just a fun little thing that we
did over there, yeah, thanks [LAUGH].

133
00:09:55.939 --> 00:09:59.335
Let's see,
this is one that I created a while ago, so

134
00:09:59.335 --> 00:10:01.311
this one uses pointer events.

135
00:10:01.311 --> 00:10:06.219
And so this is an example of
another reactive animation, where,

136
00:10:06.219 --> 00:10:12.170
depending on how far the pointer has
moved, it affects how far we tilt.

137
00:10:12.170 --> 00:10:17.510
So it's sort of a silly animation,
but you get the idea.

138
00:10:19.070 --> 00:10:23.320
This one will probably crash my machine,
so I won't do that.

139
00:10:23.320 --> 00:10:27.189
The most recent one I did was
the one that I showed you on linear,

140
00:10:27.189 --> 00:10:29.022
where it's the cursor glow.

141
00:10:29.022 --> 00:10:34.579
This isn't using lerp, but it is using
a combination, state based animations,

142
00:10:34.579 --> 00:10:39.340
where we're not using data state,
we're using the hover property.

143
00:10:39.340 --> 00:10:41.420
But the same principle applies,

144
00:10:41.420 --> 00:10:45.588
where we only want to show the glow
when it's on a certain element.

145
00:10:45.588 --> 00:10:48.257
And for the other ones,
we only want to show it on the border.

146
00:10:48.257 --> 00:10:52.839
So the way that this is actually
accomplished is that there is a glow on

147
00:10:52.839 --> 00:10:54.425
every single element.

148
00:10:54.425 --> 00:11:00.125
And every single element is following that
mouse position relative to that element.

149
00:11:00.125 --> 00:11:04.851
And so we're doing the same,
we're listening for the pointer, and

150
00:11:04.851 --> 00:11:07.306
we're calculating the x and the y.

151
00:11:07.306 --> 00:11:11.824
So if I could zoom in there a bit,
we're calculating the x and y, and

152
00:11:11.824 --> 00:11:15.940
we're setting those to each
element of the feature.

153
00:11:15.940 --> 00:11:21.690
And then we are just positioning
the glow where that mouse is.

154
00:11:21.690 --> 00:11:24.389
And so, if we're hovering over it,
that's when

155
00:11:24.389 --> 00:11:28.649
we tell CSS that we should show the full
glow, instead of just the border glow.

156
00:11:32.938 --> 00:11:35.550
All right, so any questions on that?

157
00:11:35.550 --> 00:11:39.380
There's no exercise for this one,
because we basically did it together.

158
00:11:39.380 --> 00:11:44.239
But hopefully this gives you some ideas on
how you could add some reactive animations

159
00:11:44.239 --> 00:11:45.560
to your site.

160
00:11:45.560 --> 00:11:50.617
One more thing I want to mention,
if you look at the styles over there,

161
00:11:50.617 --> 00:11:53.721
you could see that it's just moving a lot.

162
00:11:53.721 --> 00:11:59.668
So the reason that it's doing this is
because, obviously if we calculate 0.5%,

163
00:11:59.668 --> 00:12:04.470
0.5%, it's gonna happen infinitely,
which is not good.

164
00:12:04.470 --> 00:12:09.445
So if you are using the lerp technique,
what I really recommend that

165
00:12:09.445 --> 00:12:13.900
you do is find some sort of
stopping condition for this.

166
00:12:13.900 --> 00:12:18.968
And so the stopping condition
that I like to do is,

167
00:12:18.968 --> 00:12:25.501
if dx is less than, I don't know,
like 2 or something, or 1.

168
00:12:25.501 --> 00:12:29.360
Because then you're getting
into the sub pixel range.

169
00:12:29.360 --> 00:12:32.990
And there it doesn't really
make sense to keep on lerping.

170
00:12:32.990 --> 00:12:38.441
So if dx &lt; 1 or dy &lt; 1, and

171
00:12:38.441 --> 00:12:43.419
actually, Math.abs.

172
00:12:43.419 --> 00:12:46.357
So basically if we
are in within one pixel,

173
00:12:46.357 --> 00:12:50.205
then we could basically say
that we're there already.

174
00:12:50.205 --> 00:12:54.300
We don't have to calculate
these sub pixel ranges.

175
00:12:54.300 --> 00:12:59.917
So now you could see,
no, it's still going on,

176
00:12:59.917 --> 00:13:03.903
but I mean that's the basic idea.

177
00:13:03.903 --> 00:13:05.632
You would have some sort of stop.

178
00:13:05.632 --> 00:13:07.673
It's because I didn't stop it.

179
00:13:07.673 --> 00:13:10.310
So I'm just gonna return over here.

180
00:13:10.310 --> 00:13:16.877
[LAUGH] Okay, so, Well,
that's gonna stop immediately, it's great.

181
00:13:19.851 --> 00:13:23.720
So let's do the inverse of that.

182
00:13:25.225 --> 00:13:28.774
Okay, so this is happening because,
at first,

183
00:13:28.774 --> 00:13:33.720
it's not doing anything, so,
we're gonna just put this in here.

184
00:13:40.190 --> 00:13:44.048
Let isLerping = false, if !isLerping,

185
00:13:44.048 --> 00:13:48.120
I know I should use a state machine here,
so,

186
00:13:48.120 --> 00:13:53.498
!isLerping, then lerp(),
isLerping = true, okay?

187
00:13:53.498 --> 00:14:00.182
So every single time we move our mouse,
we're going to lerp.

188
00:14:00.182 --> 00:14:05.100
And hopefully,
we hit that stopping condition, okay?

189
00:14:05.100 --> 00:14:08.374
Well, yeah, anyway,
just keep in mind there is a way for

190
00:14:08.374 --> 00:14:12.480
you to add a stopping condition,
it escapes me right now, but, yeah.

191
00:14:13.950 --> 00:14:15.340
So any questions?

192
00:14:15.340 --> 00:14:18.959
&gt;&gt; Yeah, is that basically used to
debounce that addEventListener?

193
00:14:18.959 --> 00:14:22.341
So we're not just always listening for
a mouse move?

194
00:14:22.341 --> 00:14:26.261
Just the one pixel, or would we wanna add

195
00:14:26.261 --> 00:14:31.140
stopEventListener on
that mouse move at all?

196
00:14:31.140 --> 00:14:36.480
&gt;&gt; Good question, so basically, you're
asking, we're lerping the entire time.

197
00:14:36.480 --> 00:14:43.005
So when do we start lerping,
when do we stop lerping, right?

198
00:14:43.005 --> 00:14:44.482
So, yeah, that's a good question.

199
00:14:44.482 --> 00:14:47.362
So I guess you can make this so

200
00:14:47.362 --> 00:14:53.129
that you're only lerping
while some condition is true.

201
00:14:53.129 --> 00:14:54.752
So let's say-
&gt;&gt; Specific area, or something?

202
00:14:54.752 --> 00:14:55.306
&gt;&gt; Sorry?

203
00:14:55.306 --> 00:15:00.876
&gt;&gt; A specific box, or location and-
&gt;&gt; Yeah, so let's call this let lerpState

204
00:15:00.876 --> 00:15:07.089
= [COUGH] let's say 1 is it should be
active, and 0 it should not be active.

205
00:15:07.089 --> 00:15:13.158
So we could say, right now it's 0, and

206
00:15:13.158 --> 00:15:19.941
then, so we'll just call doLerp over here,

207
00:15:19.941 --> 00:15:24.776
and then just function doLerp.

208
00:15:24.776 --> 00:15:28.579
So basically, we could say,

209
00:15:28.579 --> 00:15:34.980
if lerpState ==== 0,
then we have the lerp.

210
00:15:34.980 --> 00:15:42.018
And then, otherwise, just don't do
anything, because we're already lerping.

211
00:15:42.018 --> 00:15:48.923
And then so, now,
over here we could do the if dx is &lt; 1.

212
00:15:48.923 --> 00:15:53.822
And we'll just go by x, because both x and
y are gonna converge on that point.

213
00:15:53.822 --> 00:15:58.785
Then lerpState = 0 and then we return.

214
00:15:58.785 --> 00:16:05.400
And so, hopefully, that's going to prevent
us from doing the unnecessary lerping.

215
00:16:06.920 --> 00:16:11.052
Okay, perfect, so now if you look on
the right, we actually stop a lot sooner,

216
00:16:11.052 --> 00:16:12.780
which is great.

217
00:16:12.780 --> 00:16:17.561
So yeah, and so now we're not

218
00:16:17.561 --> 00:16:22.537
doing any unnecessary browser

219
00:16:22.537 --> 00:16:28.095
animations, so that worked out.

