WEBVTT

1
00:00:00.374 --> 00:00:01.077
All right, so

2
00:00:01.077 --> 00:00:05.070
the first thing that we're gonna be
talking about are animation fundamentals.

3
00:00:05.070 --> 00:00:09.362
These are all the building blocks we need
to actually get started with animations.

4
00:00:09.362 --> 00:00:12.143
And so the first question is why animate?

5
00:00:12.143 --> 00:00:15.108
And so there's two main reasons for that.

6
00:00:15.108 --> 00:00:17.887
The first is guidance and clarification.

7
00:00:17.887 --> 00:00:22.581
And just like we talked about before,
we want to use animation for a purpose.

8
00:00:22.581 --> 00:00:28.272
We want to guide the user to doing things
and to seeing where things come from.

9
00:00:28.272 --> 00:00:30.864
And I'm gonna be talking about this a lot,

10
00:00:30.864 --> 00:00:34.254
but seeing how one state
transitions to another state.

11
00:00:34.254 --> 00:00:36.326
And so this is really important,

12
00:00:36.326 --> 00:00:39.212
especially if you're
used to mobile phones.

13
00:00:39.212 --> 00:00:44.257
You have these motion design idioms on
your phone where when you click something,

14
00:00:44.257 --> 00:00:48.437
it might expand, it might slide to
the left, or slide to the right.

15
00:00:48.437 --> 00:00:52.969
And that's not meant to be flashy,
it's meant to inform the user,

16
00:00:52.969 --> 00:00:56.161
again, what could happen and
what did happen.

17
00:00:56.161 --> 00:01:01.794
The other thing, the other reason for
why we animate is first dial in branding.

18
00:01:01.794 --> 00:01:06.774
So just like your website or your web
application might have a palette of

19
00:01:06.774 --> 00:01:12.003
colors, different fonts and font sizes
that are used throughout the app in

20
00:01:12.003 --> 00:01:17.491
different spacing primitives, there
is also animation primitives as well.

21
00:01:17.491 --> 00:01:22.220
So that's why when it comes to style and
branding, having a consistent fill for

22
00:01:22.220 --> 00:01:24.770
animation is really, really important.

23
00:01:24.770 --> 00:01:29.929
So you want to be able to choose your
durations, choose your timing functions,

24
00:01:29.929 --> 00:01:34.780
and choose the kinds of animations that
you're doing in a consistent way so

25
00:01:34.780 --> 00:01:36.785
that your app feels cohesive.

26
00:01:36.785 --> 00:01:41.994
And also so that it gives the user
trust that they know when they're

27
00:01:41.994 --> 00:01:48.426
in that app and they can expect things to
basically work the same and feel the same.

28
00:01:48.426 --> 00:01:53.306
So the first fundamental that we're
gonna be talking about is duration.

29
00:01:53.306 --> 00:01:56.968
Now when we talk about animation or
transition duration,

30
00:01:56.968 --> 00:02:01.013
this is how long an iteration of
an animation takes to complete.

31
00:02:01.013 --> 00:02:06.339
Now I put iteration in there because some
animations can actually be infinite.

32
00:02:06.339 --> 00:02:10.560
Like, for example, if you're loading
a site and it takes a really, really long

33
00:02:10.560 --> 00:02:14.797
time, it might feel like that spinner is
going on forever, and ever, and ever.

34
00:02:14.797 --> 00:02:17.196
So what is the duration of that?

35
00:02:17.196 --> 00:02:20.429
Well, the total duration might be
infinity, it might not be, but

36
00:02:20.429 --> 00:02:23.549
I've seen websites where it will
literally not stop loading and

37
00:02:23.549 --> 00:02:26.051
you're not sure whether
there's an error or not.

38
00:02:26.051 --> 00:02:28.091
And, I mean, to fix that problem,

39
00:02:28.091 --> 00:02:32.785
I have other workshops on state machines
where you could sort of avoid that issue.

40
00:02:32.785 --> 00:02:35.203
But when we're talking about duration,

41
00:02:35.203 --> 00:02:39.289
we're talking about how long one
iteration of that animation takes.

42
00:02:39.289 --> 00:02:42.629
So, taking the spinner as an example,

43
00:02:42.629 --> 00:02:46.679
we could say that the spinner
takes one second or

44
00:02:46.679 --> 00:02:51.044
maybe half a second to go
one full rotation around.

45
00:02:51.044 --> 00:02:54.958
And so
even though it might go on infinitely,

46
00:02:54.958 --> 00:02:58.673
the duration of it is
just one second long.

47
00:02:58.673 --> 00:03:00.231
There's also delay.

48
00:03:00.231 --> 00:03:07.554
And so a delay is how long it takes before
an animation or a transition starts.

49
00:03:07.554 --> 00:03:09.429
So, when you click something,

50
00:03:09.429 --> 00:03:12.978
it might wait a little bit
before actually doing something.

51
00:03:12.978 --> 00:03:17.571
And delays are actually really useful for
orchestrating animations too.

52
00:03:17.571 --> 00:03:20.665
And we're going to get into that as well.

53
00:03:20.665 --> 00:03:26.645
Delays might also present a little problem
when you're doing orchestrated animations,

54
00:03:26.645 --> 00:03:29.016
because a delay only happens once.

55
00:03:29.016 --> 00:03:35.287
And so remember, delay is from the time
before you start an animation.

56
00:03:35.287 --> 00:03:38.125
If your animation has many iterations,

57
00:03:38.125 --> 00:03:42.138
that delay is only going to
apply to the first iteration.

58
00:03:42.138 --> 00:03:45.908
So that's something that's really
important to keep in mind.

59
00:03:45.908 --> 00:03:47.976
But delay is a very useful tool.

60
00:03:50.122 --> 00:03:54.561
The third thing is something
that actually might be tricky.

61
00:03:54.561 --> 00:03:58.541
And so, I'd love to talk about
this more in detail, but

62
00:03:58.541 --> 00:04:03.636
it's the timing function,
also known as the easing of the animation.

63
00:04:03.636 --> 00:04:07.154
And so,
this is how the animation feels, or

64
00:04:07.154 --> 00:04:10.969
how it accelerates and
decelerates over time.

65
00:04:10.969 --> 00:04:17.060
So if an animation takes one second
long and you have a linear easing,

66
00:04:17.060 --> 00:04:22.100
which we're going to show in a minute,
then that is going

67
00:04:22.100 --> 00:04:27.159
to have the same consistent
speed from beginning to end.

68
00:04:27.159 --> 00:04:31.715
However, you could define
the easing using cubic-bezier or

69
00:04:31.715 --> 00:04:36.533
a few CSS keywords, and
that's actually going to help you define

70
00:04:36.533 --> 00:04:40.836
how an animation accelerates and
decelerates at the end.

71
00:04:40.836 --> 00:04:44.064
Now, the cubic-bezier syntax
might seem really weird.

72
00:04:44.064 --> 00:04:48.794
There's four numbers,
you're not sure what those numbers do.

73
00:04:48.794 --> 00:04:51.944
And it's actually a lot
simpler than you might think.

74
00:04:51.944 --> 00:04:56.559
So the first two numbers,
if you imagine this curve like this,

75
00:04:56.559 --> 00:04:58.660
we have two control points.

76
00:04:58.660 --> 00:05:01.772
We have the first control points,
which is the control point for

77
00:05:01.772 --> 00:05:02.932
the start of our curve.

78
00:05:02.932 --> 00:05:07.527
And the second control point is the
control point for the end of our curve.

79
00:05:07.527 --> 00:05:11.283
So this 0.50, think of it as coordinates.

80
00:05:11.283 --> 00:05:15.891
We have x at 0.5,
which is halfway through, and

81
00:05:15.891 --> 00:05:19.225
y at 0, so it's at the very bottom.

82
00:05:19.225 --> 00:05:23.588
Now for the next one,
we have x at 0.5 again, and y at 1.

83
00:05:23.588 --> 00:05:26.163
So it's going to be at the very top.

84
00:05:26.163 --> 00:05:30.581
And so, if you play the around
with tools such as Figma or

85
00:05:30.581 --> 00:05:36.129
Adobe Illustrator, you might be
used to this cubic-bezier thing and

86
00:05:36.129 --> 00:05:41.594
how the control points affect
the shape of the cubic-bezier curve.

87
00:05:41.594 --> 00:05:47.999
So we could see here that, especially
when compared to just a straight line,

88
00:05:47.999 --> 00:05:52.740
that was a terrible straight line,
but you get the idea.

89
00:05:52.740 --> 00:05:57.910
That this animation is actually
gonna start a little bit slow and

90
00:05:57.910 --> 00:06:01.261
then it's gonna speed up in the middle and

91
00:06:01.261 --> 00:06:05.490
then it's going to slow down
a little bit at the end.

92
00:06:05.490 --> 00:06:09.820
And that's really hard to
read these cubic-beziers.

