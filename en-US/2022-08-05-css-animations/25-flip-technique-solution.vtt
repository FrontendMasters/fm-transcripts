WEBVTT

1
00:00:00.000 --> 00:00:05.029
All right, so let's get to flipping
this caption elements over here.

2
00:00:05.029 --> 00:00:09.578
Because we have the parent elements,
at least through the use of

3
00:00:09.578 --> 00:00:14.466
the background pseudo elements
smoothly translating from its first

4
00:00:14.466 --> 00:00:19.537
position to its last position, but
not this inner elements over here.

5
00:00:19.537 --> 00:00:23.769
So when we look at the code,
this is the final code.

6
00:00:23.769 --> 00:00:28.257
So when we look at this code, we see
that we're doing this specifically for

7
00:00:28.257 --> 00:00:29.620
the first rectangle.

8
00:00:29.620 --> 00:00:34.140
So specifically what we're doing is,
we're getting the first rectangle,

9
00:00:34.140 --> 00:00:37.071
we're doing something
that changes the layout.

10
00:00:37.071 --> 00:00:38.964
So I'll just label this.

11
00:00:38.964 --> 00:00:43.777
This is our first, well, do something, and

12
00:00:43.777 --> 00:00:48.719
then we're getting
the last rectangle here,

13
00:00:48.719 --> 00:00:52.151
and then, we are inverting it.

14
00:00:52.151 --> 00:00:56.753
So we're doing the inversion over here,
and then we're doing the play.

15
00:00:56.753 --> 00:01:00.923
So we have all steps of
flip over here first,

16
00:01:00.923 --> 00:01:05.340
last invert play but
specific to this figure.

17
00:01:05.340 --> 00:01:07.191
And now we wanna do it for the caption.

18
00:01:07.191 --> 00:01:11.626
The easiest thing to do would be
to replace a figure L with caption

19
00:01:11.626 --> 00:01:16.309
L over here, but we're developers so
maybe we could find a better,

20
00:01:16.309 --> 00:01:18.546
more abstracted way to do this.

21
00:01:18.546 --> 00:01:25.221
And so I am going to actually
make a function here called flip.

22
00:01:25.221 --> 00:01:28.165
And so
we're gonna provide it a couple of things.

23
00:01:28.165 --> 00:01:31.226
We're going to give it our function and so

24
00:01:31.226 --> 00:01:36.219
this is a function that we want to
call when we're doing something.

25
00:01:36.219 --> 00:01:42.296
And so, I want the first rectangles or
the first elements rather.

26
00:01:42.296 --> 00:01:46.868
And so, I'm gonna call this first Els and
the last elements

27
00:01:46.868 --> 00:01:51.630
which by defaults are going to
be equal to the first elements.

28
00:01:54.454 --> 00:01:57.900
Okay, so now we are going to grab, so

29
00:01:57.900 --> 00:02:03.030
basically we're doing this
flip technique in batch.

30
00:02:03.030 --> 00:02:07.580
So we're going to grab the first
rectangles from each of the first

31
00:02:07.580 --> 00:02:08.413
elements.

32
00:02:08.413 --> 00:02:13.023
So firstEls.map el and this is going to

33
00:02:13.023 --> 00:02:17.921
be el.getBoundingclients rectangle.

34
00:02:17.921 --> 00:02:20.856
And then, so
that's our first step over here.

35
00:02:20.856 --> 00:02:25.292
Then we're gonna do something, and
so this is our function over here.

36
00:02:25.292 --> 00:02:31.191
That's our do something step, and then
we're going to request animation frame.

37
00:02:31.191 --> 00:02:37.525
And we're gonna start getting our last
elements, sorry, our last rectangles.

38
00:02:37.525 --> 00:02:42.208
So const lastRects = lastEls

39
00:02:42.208 --> 00:02:46.329
same thing.map el return

40
00:02:46.329 --> 00:02:51.395
el.getbaundingclientrect.

41
00:02:51.395 --> 00:02:56.687
Okay, so now for each one of these
racks we are going to calculate

42
00:02:56.687 --> 00:03:01.789
the difference between all
the deltas that we have over here.

43
00:03:01.789 --> 00:03:09.094
In fact, I could pretty much copy and
paste all of this.

44
00:03:09.094 --> 00:03:13.329
So I'm just going to do this, And

45
00:03:13.329 --> 00:03:18.556
then lastRects.forEach and
we're going to get the lastRect and

46
00:03:18.556 --> 00:03:24.173
the index of that Rects because we
do need the first rectangle as well.

47
00:03:26.359 --> 00:03:31.034
Equals firstRects I.

48
00:03:31.034 --> 00:03:35.341
And then we're going to
calculate the inversion

49
00:03:35.341 --> 00:03:39.444
between the first rectangle and
the last one.

50
00:03:42.142 --> 00:03:43.994
And then we're gonna get
the elements as well.

51
00:03:43.994 --> 00:03:50.119
So const lastEL= lastELs, I.

52
00:03:52.883 --> 00:03:54.885
LastEl.

53
00:03:54.885 --> 00:03:59.958
Okay, so we have the first Rect,
we have the last Rect we're

54
00:03:59.958 --> 00:04:06.335
calculating the delta x, y, width and
height from each of the rectangles.

55
00:04:06.335 --> 00:04:09.380
And then, we invert them.

56
00:04:09.380 --> 00:04:17.239
And after doing all that, We're going
to request animation frame again,

57
00:04:17.239 --> 00:04:21.717
and for each of the elements so
last Els.forEach.

58
00:04:21.717 --> 00:04:26.730
We are going to set the flip to play,

59
00:04:26.730 --> 00:04:31.921
so lastEl.data set.flip =play.

60
00:04:31.921 --> 00:04:37.045
And so
now instead of duplicating this logic for

61
00:04:37.045 --> 00:04:41.911
both of these elements,
all we have to do is,

62
00:04:41.911 --> 00:04:47.566
where we gonna do this on click,
or we going to flip.

63
00:04:49.749 --> 00:04:54.519
And we going pass in
our function over here.

64
00:04:54.519 --> 00:04:58.035
This is what's going to
cause the layout change, and

65
00:04:58.035 --> 00:05:01.564
then we going pass the elements
that we wants to flip.

66
00:05:01.564 --> 00:05:07.026
So, that's going to be the figureEL and
the captionEI.

67
00:05:07.026 --> 00:05:11.058
So figureEL captionEl.

68
00:05:11.058 --> 00:05:16.065
Now remember by defaults the last elements
are going to be exactly the same,

69
00:05:16.065 --> 00:05:18.346
so we don't need to specify that.

70
00:05:18.346 --> 00:05:21.481
Okay, so let's hope that this works.

71
00:05:21.481 --> 00:05:27.055
Now when we click here, Let's take a look.

72
00:05:27.055 --> 00:05:31.152
Okay we could see that this fig
caption which is our caption elements,

73
00:05:31.152 --> 00:05:33.454
it is getting all of these attributes.

74
00:05:33.454 --> 00:05:36.990
It's getting the CSS variables,
it's getting the data attribute.

75
00:05:36.990 --> 00:05:41.866
So now we have to jump into our CSS and
actually animate it.

76
00:05:41.866 --> 00:05:46.859
So, Because we're

77
00:05:46.859 --> 00:05:51.292
not animating the before
of the previous one.

78
00:05:51.292 --> 00:05:54.652
Sorry, we're not animating
the before of the caption,

79
00:05:54.652 --> 00:05:57.242
whereas we are doing it
to the previous one.

80
00:05:57.242 --> 00:06:02.033
There's [LAUGH] a little bit of nasty
styling that we have to do over here.

81
00:06:02.033 --> 00:06:07.903
And so what I have over here is another
data attribute called data-flip-bg.

82
00:06:07.903 --> 00:06:11.501
And so
data-flip-bg what that's going to do,

83
00:06:11.501 --> 00:06:16.593
is it's going to say whichever
elements have this data-flip-bg,

84
00:06:16.593 --> 00:06:21.880
like over here, these are the ones
where I want the background to flip.

85
00:06:21.880 --> 00:06:24.669
And for the other ones, I just want you to

86
00:06:24.669 --> 00:06:29.526
flip the actual elements instead
of the background pseudo elements.

87
00:06:29.526 --> 00:06:32.190
So I know that was a mouthful, but

88
00:06:32.190 --> 00:06:36.386
we'll see how it works when
we actually inspect it.

89
00:06:36.386 --> 00:06:43.444
So I'm gonna remove this and
now we're gonna play.

90
00:06:43.444 --> 00:06:45.216
So now you could see and

91
00:06:45.216 --> 00:06:50.164
I'm gonna slow down the animation
over here as well to 25%.

92
00:06:52.114 --> 00:06:55.360
That we are flipping both
the parents elements, so

93
00:06:55.360 --> 00:06:58.765
that background elements,
and the child elements.

94
00:06:58.765 --> 00:07:04.205
And there's no skewing or
stretching or morphing taking place

95
00:07:04.205 --> 00:07:09.346
over here because we're in
meaning to separate elements.

96
00:07:09.346 --> 00:07:14.407
And so what's great about this is
that you could individually control

97
00:07:14.407 --> 00:07:20.256
the different animation properties or
transition properties of each element.

98
00:07:20.256 --> 00:07:24.627
So, for example,
with a ui-caption over here,

99
00:07:24.627 --> 00:07:29.728
we could say that this should
be transition I don't know,

100
00:07:29.728 --> 00:07:34.642
transition-duration, let's
say an entire second.

101
00:07:34.642 --> 00:07:42.070
So now, Interesting, hold on.

102
00:07:42.070 --> 00:07:47.205
Okay, so the reason that this isn't
working right now is because we are doing

103
00:07:47.205 --> 00:07:54.790
a bunch of transitions over here and,
This might be overriding it.

104
00:07:54.790 --> 00:07:57.086
Let me just double check real quick.

105
00:07:57.086 --> 00:08:03.000
Yeah, so this is going to overwrite
that transition-duration.

106
00:08:03.000 --> 00:08:08.956
So let's just, we put that as important.

107
00:08:08.956 --> 00:08:14.092
This is why specificity is interesting.

108
00:08:14.092 --> 00:08:16.463
All right so,
let's get rid of that for now.

109
00:08:19.999 --> 00:08:22.869
And so now it's working together.

110
00:08:22.869 --> 00:08:27.560
So the solution over here is that
you could specify individual

111
00:08:27.560 --> 00:08:30.455
transition properties for each one.

112
00:08:30.455 --> 00:08:36.703
So we could say that the transition over
here should be transform at 0.3 seconds,

113
00:08:36.703 --> 00:08:40.672
you could also just give
the individual properties.

114
00:08:40.672 --> 00:08:44.673
And even use CSS variables to say, hey,

115
00:08:44.673 --> 00:08:52.576
we just want to pull this from some CSS
variable instead of just overwriting it.

116
00:08:52.576 --> 00:08:56.195
So actually, this is a real problem
that we're running into right now.

117
00:08:56.195 --> 00:09:01.046
And this is actually a really good
opportunity to show you how CSS variables

118
00:09:01.046 --> 00:09:03.048
actually solve this problem.

119
00:09:03.048 --> 00:09:07.861
So instead of saying
transition-transform 0.3 seconds,

120
00:09:07.861 --> 00:09:11.311
we could just say transition-transform and

121
00:09:11.311 --> 00:09:15.315
give it a duration with
a default of 0.3 seconds.

122
00:09:15.315 --> 00:09:21.910
And so now what we could do in that
ui-caption is give the duration over here,

123
00:09:21.910 --> 00:09:26.786
of let's just say 1 second and
so hopefully this works.

124
00:09:26.786 --> 00:09:31.604
Okay, so now you could see that
the duration between these two elements is

125
00:09:31.604 --> 00:09:33.247
completely different.

126
00:09:33.247 --> 00:09:36.521
And so this gives you some
creative possibilities.

127
00:09:36.521 --> 00:09:39.628
Because now that each of these
elements are individual,

128
00:09:39.628 --> 00:09:42.680
you could control the transition
between each of them.

129
00:09:42.680 --> 00:09:47.554
You could give them different easings,
different timings, do different

130
00:09:47.554 --> 00:09:52.361
properties, and things like that even
different delays if you wants to.

131
00:09:52.361 --> 00:09:55.525
So this is actually pretty fun.

132
00:09:55.525 --> 00:09:58.097
So one of the questions in the chat was,
for

133
00:09:58.097 --> 00:10:02.834
flip to work can we say we need a function
that will result in painting the node?

134
00:10:02.834 --> 00:10:07.628
We call that function and
then in the next animation frame get

135
00:10:07.628 --> 00:10:11.300
the bounding rectangle for
the new position.

136
00:10:11.300 --> 00:10:15.662
[COUGH] I'm not sure that I
understand the question fully,

137
00:10:15.662 --> 00:10:21.102
I think the question is more around
that function that we call over here.

138
00:10:21.102 --> 00:10:26.507
So this, Function

139
00:10:26.507 --> 00:10:33.901
that we're setting up that dataset states,
what should that do?

140
00:10:33.901 --> 00:10:38.835
So basically, this is the function
that causes layouts to change.

141
00:10:38.835 --> 00:10:44.780
So, for example, if we're adding a class,
removing a class, adding a data attribute,

142
00:10:44.780 --> 00:10:50.179
doing something where it's going to affect
the position of different elements,

143
00:10:50.179 --> 00:10:53.327
that's the kind of function
we want over here.

144
00:10:53.327 --> 00:10:56.809
Otherwise, the flip technique
doesn't really make any sense,

145
00:10:56.809 --> 00:11:00.547
because you're not capturing the exact
moment in time where you could

146
00:11:00.547 --> 00:11:04.428
figure out what the first rectangle is,
and what the last rectangle is.

147
00:11:04.428 --> 00:11:09.510
So, yeah,
hopefully that answers that question.

148
00:11:09.510 --> 00:11:13.915
And the second question in flip,
notice in the first position and

149
00:11:13.915 --> 00:11:16.237
then we painted to a new position,

150
00:11:16.237 --> 00:11:21.461
immediately inverted back to the first
position using translate and scale.

151
00:11:21.461 --> 00:11:24.740
And then we played the animation
to the new position again.

152
00:11:24.740 --> 00:11:29.066
And because of this, we must use
backwards and animation fill mode,

153
00:11:29.066 --> 00:11:30.266
did I get it right?

154
00:11:30.266 --> 00:11:33.984
So the great thing about the flip
technique is it actually does not

155
00:11:33.984 --> 00:11:36.561
use keyframes, it doesn't use animation.

156
00:11:36.561 --> 00:11:41.135
Instead, because from our previous
lesson where we talked about

157
00:11:41.135 --> 00:11:45.471
transitioning between states,
this is doing exactly that.

158
00:11:45.471 --> 00:11:50.298
But this time, the states are the ones
that we defined here which is the invert

159
00:11:50.298 --> 00:11:52.090
state, and the play state.

160
00:11:52.090 --> 00:11:58.820
And we're using CSS transitions to make it
rubberband back to its original position.

161
00:12:01.769 --> 00:12:03.406
There was another question.

162
00:12:03.406 --> 00:12:07.256
What will happen if there
are other elements around this?

163
00:12:07.256 --> 00:12:11.219
And so what's going to happen
is pretty much nothing.

164
00:12:11.219 --> 00:12:16.241
And so the reason why is because
this does not affect layouts.

165
00:12:16.241 --> 00:12:20.158
So when we animate this,
all we're doing is transforming.

166
00:12:20.158 --> 00:12:25.390
So we're doing, yeah, we're doing
a transform, and we're doing a scale.

167
00:12:25.390 --> 00:12:28.069
And so all of that is on the GPU.

168
00:12:28.069 --> 00:12:31.970
And again, these are the most
performant animations you could do,

169
00:12:31.970 --> 00:12:34.511
because it's not going to affect layouts.

170
00:12:34.511 --> 00:12:37.054
So in the comments, got it,
no animation and flip.

171
00:12:37.054 --> 00:12:41.966
But but we do paint it to a new position
immediately inverted back to the first

172
00:12:41.966 --> 00:12:44.902
position, by translate and scale, right?

173
00:12:44.902 --> 00:12:46.862
And yes, that's exactly right.

174
00:12:46.862 --> 00:12:53.726
So does everyone sort of understand
what's going on with flip?

175
00:12:53.726 --> 00:12:56.910
Okay, so that was a lot.

176
00:12:56.910 --> 00:12:58.753
Flip is a little complicated but

177
00:12:58.753 --> 00:13:03.470
it is a technique that you could use to
get these really smooth layout animations.

178
00:13:03.470 --> 00:13:08.377
And so the best part is for pretty
much most of the animations where you

179
00:13:08.377 --> 00:13:11.940
might want to use flip,
just copy and paste this.

180
00:13:11.940 --> 00:13:16.686
Go back to the workshop, copy and
paste the code, and just use it wherever.

181
00:13:16.686 --> 00:13:21.255
In fact, it could be one file, just flip,
do this, here's my first elements.

182
00:13:21.255 --> 00:13:23.680
Here's my last ones, make it go smooth.

183
00:13:23.680 --> 00:13:27.348
So you just have to copy this, and

184
00:13:27.348 --> 00:13:32.722
the resulting CSS which is these ten or
so lines.

