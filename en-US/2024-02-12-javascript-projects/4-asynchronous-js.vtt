WEBVTT

1
00:00:00.270 --> 00:00:06.115
Let's press on to something way more
challenging than what we've already done,

2
00:00:06.115 --> 00:00:11.210
which, to be fair, before we knew
JavaScript would have been tricky.

3
00:00:14.350 --> 00:00:17.408
Although there's ways to get around that,
but that's a whole other conversation.

4
00:00:17.408 --> 00:00:20.344
The concept of time.

5
00:00:20.344 --> 00:00:24.845
So fun fact, I was a philosophy major,
so if you wanna like,

6
00:00:24.845 --> 00:00:29.701
just totally like geek out about
like what is the nature of time and

7
00:00:29.701 --> 00:00:34.374
our existential expectations,
like, I'm your girl.

8
00:00:34.374 --> 00:00:38.343
But, JavaScript also has
its own philosophical

9
00:00:38.343 --> 00:00:41.692
interpretation of what is time.

10
00:00:41.692 --> 00:00:46.178
And it's a little tricky, at least,
in my experience and in I think

11
00:00:46.178 --> 00:00:51.060
the entire rest of the web's experience
because it is something that we,

12
00:00:51.060 --> 00:00:55.153
over the years as a JavaScript community,
have come up with,

13
00:00:55.153 --> 00:01:00.028
hopefully increasingly useful
solutions for, but it is a problem.

14
00:01:00.028 --> 00:01:01.198
Time is a problem.

15
00:01:01.198 --> 00:01:02.388
Is it just me that feels that way?

16
00:01:02.388 --> 00:01:05.898
Especially, it's like where
did the years go this rate?

17
00:01:05.898 --> 00:01:10.170
Okay, so asynchronous JavaScript,

18
00:01:10.170 --> 00:01:16.976
we're jumping all the way from
the document getElementById

19
00:01:16.976 --> 00:01:22.847
to the fancy new features
of a very complex syntactic

20
00:01:22.847 --> 00:01:28.584
sugar situation that is
known as async await.

21
00:01:28.584 --> 00:01:30.678
Have folks written async functions or

22
00:01:30.678 --> 00:01:33.574
used the await keyword to
await async functions?

23
00:01:33.574 --> 00:01:35.422
Excellent, so reviewing,

24
00:01:35.422 --> 00:01:40.665
we declare an async function with
the async keyword in front of function.

25
00:01:40.665 --> 00:01:45.413
And when we have an async function, like
for example, the built-in fetch function,

26
00:01:45.413 --> 00:01:49.508
which is part of the browser APIs,
which we're going to talk about later,

27
00:01:49.508 --> 00:01:50.645
is asynchronous.

28
00:01:50.645 --> 00:01:53.858
And so we can await it to wait for

29
00:01:53.858 --> 00:01:59.047
that value that needs some
time to be figured out,

30
00:01:59.047 --> 00:02:04.992
which internally is represented
by a promise of a value.

31
00:02:06.452 --> 00:02:11.622
We wait for that promise to resolve,
ideally, it resolves and doesn't reject.

32
00:02:11.622 --> 00:02:18.922
And then we can capture that value and
use it through the rest of our code.

33
00:02:18.922 --> 00:02:21.531
So, we're all on the same page?

34
00:02:22.741 --> 00:02:23.681
Excellent.

35
00:02:23.681 --> 00:02:28.071
But I have a question,
why do we have to do all this?

36
00:02:28.071 --> 00:02:33.441
Like, what is going on with all this
promises and these asynchronous things?

37
00:02:33.441 --> 00:02:36.611
And, why can't we just like run the code?

38
00:02:36.611 --> 00:02:41.002
Why can't I just say,
response equals fetch.

39
00:02:41.002 --> 00:02:43.888
Like why do I have to await it?

40
00:02:43.888 --> 00:02:44.596
&gt;&gt; Yeah.

41
00:02:44.596 --> 00:02:47.889
&gt;&gt; Pesky users expect to do other things.

42
00:02:47.889 --> 00:02:50.758
&gt;&gt; Pesky users expect to do other things.

43
00:02:50.758 --> 00:02:53.510
&gt;&gt; JavaScript is a single
threaded language.

44
00:02:53.510 --> 00:02:56.742
&gt;&gt; JavaScript is
a single-threaded language.

45
00:02:56.742 --> 00:02:59.640
So yeah, those are simple answers.

46
00:02:59.640 --> 00:03:04.080
And correct, but also,
like, what is any of that?

47
00:03:04.080 --> 00:03:07.647
At least when I was
starting out in JavaScript,

48
00:03:07.647 --> 00:03:13.534
after learning some of the mechanics of,
okay, I type this magical formula,

49
00:03:13.534 --> 00:03:17.367
and then poof,
my web page does what I want it to do,

50
00:03:17.367 --> 00:03:22.626
I found it very useful to dig in a little
bit to what is happening here and

51
00:03:22.626 --> 00:03:27.658
why we need to do this stuff,
the async, await, promises, etc.

52
00:03:30.008 --> 00:03:33.178
So as we said, some stuff,
it's just a fact of life.

53
00:03:33.178 --> 00:03:34.898
Sometimes stuff takes time.

54
00:03:37.258 --> 00:03:38.969
In my life,
I feel like stuff always takes so

55
00:03:38.969 --> 00:03:40.649
much more time than I think it's going to.

56
00:03:40.649 --> 00:03:44.449
And that is generally true around
anyone who builds software.

57
00:03:44.449 --> 00:03:48.004
If you ask them how long it will take for
them to build the given software,

58
00:03:48.004 --> 00:03:49.943
whatever their answer is, triple it.

59
00:03:49.943 --> 00:03:56.965
And that goes for yourself, don't do
as I do, do as I say, yeah, me too.

60
00:03:56.965 --> 00:04:02.304
Anyways, all right, but as mentioned,
the browser needs to stay responsive.

61
00:04:02.304 --> 00:04:07.480
If it takes a while to go talk to like
the dog CEO API, or whatever fun,

62
00:04:07.480 --> 00:04:12.569
the Star Wars API, whatever fun API or
whatever it is that I'm doing

63
00:04:12.569 --> 00:04:17.884
that takes a long time,
that's just life, stuff takes time.

64
00:04:17.884 --> 00:04:22.714
But I have users, and
users don't wanna sit there unable to

65
00:04:22.714 --> 00:04:27.752
click on anything or
interact with anything else on the page.

66
00:04:27.752 --> 00:04:33.608
The browser needs to stay responsive
to any events that the user is doing,

67
00:04:33.608 --> 00:04:37.500
any interactions that
they're trying to make.

68
00:04:37.500 --> 00:04:43.519
And, complicating factors,
JavaScript is a single-threaded language,

69
00:04:43.519 --> 00:04:49.074
which those of us who have a lot more
experience in operating systems and

70
00:04:49.074 --> 00:04:55.201
lower level programming and
things like that can expound upon later.

71
00:04:55.201 --> 00:04:56.963
But for our intents and purposes,

72
00:04:56.963 --> 00:05:00.730
it basically means that JavaScript
can only do one thing at a time.

73
00:05:00.730 --> 00:05:05.148
It can't simultaneously be
fetching this resource and

74
00:05:05.148 --> 00:05:11.260
also running an event handler function
that I passed in to a listener I set up.

75
00:05:12.710 --> 00:05:18.580
So, what does this mean for our lives?

76
00:05:18.580 --> 00:05:23.584
This is a very exciting drawing I made,

77
00:05:23.584 --> 00:05:31.448
about a lot of stuff that is happening
when we do stuff in JavaScript.

78
00:05:33.178 --> 00:05:37.078
Don't know how to get that to go away,
so I'm just gonna move it.

79
00:05:37.078 --> 00:05:43.491
Okay, so this is a simplified
diagram of what is happening inside

80
00:05:43.491 --> 00:05:48.517
of the magical creature we
know as the web browser.

81
00:05:50.157 --> 00:05:55.737
So, inside our browsers, sorry,

82
00:05:55.737 --> 00:06:00.286
let me bring my slides back.

83
00:06:00.286 --> 00:06:05.856
We have a JavaScript runtime,
or JavaScript engine.

84
00:06:07.396 --> 00:06:09.948
These are separate entities
from the browser itself,

85
00:06:09.948 --> 00:06:13.607
which also has its own browser engine
that's doing a whole bunch of other stuff

86
00:06:13.607 --> 00:06:15.986
we're gonna talk about in a second.

87
00:06:15.986 --> 00:06:21.235
But you might have heard of these or
be familiar with the V8 engine

88
00:06:21.235 --> 00:06:27.171
is what runs in Chrome and also Node,
and Firefox has a different engine.

89
00:06:27.171 --> 00:06:30.361
It's called SpiderMonkey,
different JavaScript engine.

90
00:06:30.361 --> 00:06:31.201
There's others.

91
00:06:31.201 --> 00:06:36.051
All the browsers got their own fun little
thing, although it seems like they're,

92
00:06:36.051 --> 00:06:40.738
there's increasingly V8 is sort of
taking over this space, but in any case.

93
00:06:40.738 --> 00:06:44.708
In order to run JavaScript,
you need a runtime for JavaScript.

94
00:06:44.708 --> 00:06:47.558
So that is part of the browser.

95
00:06:47.558 --> 00:06:51.187
The browser has this
JavaScript environment and

96
00:06:51.187 --> 00:06:55.888
inside of the JavaScript world,
JavaScript has a call stack.

97
00:06:57.138 --> 00:07:03.224
So this is essentially where
the code to run a given function,

98
00:07:03.224 --> 00:07:06.734
when you call it kind of stacks up and

99
00:07:06.734 --> 00:07:11.815
sits at the top of the stack
while it's running.

100
00:07:11.815 --> 00:07:14.385
And when it's finished,
it pops off of the stack.

101
00:07:14.385 --> 00:07:19.243
And if your function calls another
function that calls another function,

102
00:07:19.243 --> 00:07:23.945
you get these what are called stack
frames, one for each function call,

103
00:07:23.945 --> 00:07:25.024
stacking up, so

104
00:07:25.024 --> 00:07:30.676
that the function your function called has
to return before your function can return.

105
00:07:30.676 --> 00:07:33.890
So, that is what we call the call stack.

106
00:07:33.890 --> 00:07:36.580
We've got these functions
kind of piling up.

107
00:07:36.580 --> 00:07:40.843
So basically, the functions stack
up on the stack in frames, and

108
00:07:40.843 --> 00:07:43.378
they run to completion.

109
00:07:43.378 --> 00:07:46.320
With an asterisk, literally, and and

110
00:07:46.320 --> 00:07:50.706
then they pop off the stack
magically when they're done.

111
00:07:50.706 --> 00:07:59.618
Now meanwhile, functions need
data to do stuff with, right?

112
00:07:59.618 --> 00:08:03.391
And so all of that data
has to live somewhere, and

113
00:08:03.391 --> 00:08:08.636
it lives in a beautiful,
very tidy place in memory called the heap,

114
00:08:08.636 --> 00:08:15.002
which probably looks a lot like my room in
that it's just a big pile of random crap.

115
00:08:16.842 --> 00:08:23.005
So essentially the heap is a sort
of disorganized collection.

116
00:08:23.005 --> 00:08:25.914
Well, disorganized in the sense that
everything is just sort of sitting

117
00:08:25.914 --> 00:08:27.205
around wherever.

118
00:08:27.205 --> 00:08:31.965
All of these different bits of data, which
in JavaScript are objects are just all

119
00:08:31.965 --> 00:08:36.935
sitting around in the heap, but they have
useful references like variable names and

120
00:08:36.935 --> 00:08:40.155
addresses and things like that,
that we can then use to

121
00:08:40.155 --> 00:08:43.880
do whatever the function on
the stacks thinks that needs to do.

122
00:08:45.300 --> 00:08:50.362
So we talked in the JavaScript
first steps course

123
00:08:50.362 --> 00:08:58.580
about pointers from a variable to
an object that's in memory somewhere.

124
00:08:58.580 --> 00:09:01.391
And this is all happening
within JavaScript.

125
00:09:01.391 --> 00:09:04.621
So we've got the call stack
where the function stack up.

126
00:09:04.621 --> 00:09:10.016
We've got the heap where data piles
up in a big old pile of memory.

127
00:09:10.016 --> 00:09:16.085
But this is not enough to
make a browser run and

128
00:09:16.085 --> 00:09:20.103
make the whole web page work.

129
00:09:20.103 --> 00:09:22.679
There is other stuff going on.

130
00:09:23.709 --> 00:09:26.259
So the browser has a whole
bunch of other stuff going on.

131
00:09:26.259 --> 00:09:29.749
Like, for example,
it's interpreting your CSS.

132
00:09:29.749 --> 00:09:31.629
It's parsing your HTML.

133
00:09:31.629 --> 00:09:34.209
It's doing all kinds of nonsense.

134
00:09:34.209 --> 00:09:38.173
It's reading your operating system and
what you got going on in your, which media

135
00:09:38.173 --> 00:09:41.981
devices you gave a permission to,
which we're gonna talk about later, etc.

136
00:09:43.001 --> 00:09:46.781
But for our intents and purposes as
JavaScript developers we care most about

137
00:09:46.781 --> 00:09:48.621
a couple of things that it's doing.

138
00:09:50.511 --> 00:09:55.291
So the problem, again, is that some
stuff in the browser takes time.

139
00:09:55.291 --> 00:09:57.251
Like for example, Fetch.

140
00:09:57.251 --> 00:09:59.371
Fetch is what we call a browser API.

141
00:09:59.371 --> 00:10:03.155
We access it from JavaScript, but
the browser is really what knows how

142
00:10:03.155 --> 00:10:07.003
to fetch something, how to fetch
a resource, which you can also see all

143
00:10:07.003 --> 00:10:11.578
of those network requests in your
network tab in the DevTools, yeah?

144
00:10:11.578 --> 00:10:16.495
So what happens is, if something
takes a long time to complete,

145
00:10:16.495 --> 00:10:21.048
we don't want the browser to
frees up because JavaScript,

146
00:10:21.048 --> 00:10:27.511
with its one little thread, is still doing
something, still fetching, or still,

147
00:10:27.511 --> 00:10:33.000
I don't know, running some very
complex math equation or something.

148
00:10:34.050 --> 00:10:38.910
We want that browser to stay responsive.

149
00:10:38.910 --> 00:10:44.342
So the browser has a little queue
where essentially schedules like,

150
00:10:44.342 --> 00:10:50.987
this is the next thing that you should
do JavaScript when you have a second.

151
00:10:50.987 --> 00:10:56.507
So kind of like a little like a to-do
list for the JavaScript engine.

152
00:10:56.507 --> 00:11:00.097
Like okay, when you get to it, can you
please go to the store and grab some milk?

153
00:11:00.097 --> 00:11:00.932
Thank you.

154
00:11:00.932 --> 00:11:07.907
[LAUGH] So what we've got is a queue
where these messages kind of get in line.

155
00:11:09.697 --> 00:11:14.440
And each of the messages is basically
going to say to JavaScript,

156
00:11:14.440 --> 00:11:19.757
hey, this function is what I need
you to put on the stack next.

157
00:11:19.757 --> 00:11:25.117
But we can't just Willy nilly be
throwing function calls onto the stack

158
00:11:25.117 --> 00:11:30.759
because other stuff is already at
the top of the stack, it's running.

159
00:11:30.759 --> 00:11:33.929
So if I throw something on top of it,
then JavaScript would be running that,

160
00:11:33.929 --> 00:11:35.429
it runs whatever is top most.

161
00:11:35.429 --> 00:11:37.369
And it don't only run one thing at a time.

162
00:11:37.369 --> 00:11:42.428
So if I were just chaotically throwing
new function calls onto the stack

163
00:11:42.428 --> 00:11:48.329
at random times, everything would become
chaos, and we would live in a nonsense,

164
00:11:48.329 --> 00:11:53.986
abstract universe of just particles
swirling around in the ether.

165
00:11:53.986 --> 00:11:55.688
Wait.

166
00:11:55.688 --> 00:11:59.213
Okay, so the the point is that
there needs to be some way to

167
00:11:59.213 --> 00:12:03.772
sync up this message queue with
what's happening on the stack.

168
00:12:03.772 --> 00:12:06.822
And that is what is called the event loop.

169
00:12:06.822 --> 00:12:12.833
Very simple but crucial part of this whole
equation, where essentially the browser is

170
00:12:12.833 --> 00:12:18.712
running a continuous loop that's
checking the queue for any to-do items.

171
00:12:18.712 --> 00:12:23.548
And if there's a to-do item,
and the stack is empty,

172
00:12:23.548 --> 00:12:29.665
it's going to push that next stack
frame onto the JavaScript stack.

173
00:12:29.665 --> 00:12:31.475
It's gonna give JavaScript a task to do.

174
00:12:32.955 --> 00:12:37.453
But it's going to keep checking
as long as it needs to for

175
00:12:37.453 --> 00:12:41.805
the stack to be ready to
accept that to-do list item.

176
00:12:41.805 --> 00:12:45.234
Just like you see someone carrying
a big pile of grocery bags and stuff,

177
00:12:45.234 --> 00:12:49.165
you don't wanna be like, yeah,
can you also go get some milk right now?

178
00:12:49.165 --> 00:12:53.016
No, it's how you make enemies,
or so I hear.

179
00:12:53.016 --> 00:12:58.575
[LAUGH] The event loop is this very simple
loop that's essentially running and

180
00:12:58.575 --> 00:13:03.451
constantly scheduling the to-do
items that the browser or sorry,

181
00:13:03.451 --> 00:13:08.242
it's executing or getting JavaScript
to execute the to-do items

182
00:13:08.242 --> 00:13:13.226
that the browser has been kind of
queuing up or scheduling to happen.

183
00:13:15.106 --> 00:13:19.580
So, this is all a kind of
a very high level overview,

184
00:13:19.580 --> 00:13:25.178
a very simplified overview of some
of the things that our browsers

185
00:13:25.178 --> 00:13:30.091
are doing all the time while
we're looking at cat memes.

186
00:13:31.611 --> 00:13:36.095
And the event loop is one
of those things where,

187
00:13:36.095 --> 00:13:41.027
well, this whole model of the queue and
the stack and

188
00:13:41.027 --> 00:13:46.296
all of this stuff has some
interesting implications for

189
00:13:46.296 --> 00:13:49.227
how time feels in JavaScript.

190
00:13:49.227 --> 00:13:54.113
And sometimes we get unexpected results
in terms of things running before or

191
00:13:54.113 --> 00:13:59.697
after we expected them to because all of
the details of this are largely obscured.

192
00:13:59.697 --> 00:14:02.476
And like I, for example,
was writing JavaScript for

193
00:14:02.476 --> 00:14:04.904
quite a while before I
understood this at all.

194
00:14:04.904 --> 00:14:09.199
And would I say that I 100% understand
everything about what's happening in a web

195
00:14:09.199 --> 00:14:10.074
browser?

196
00:14:10.074 --> 00:14:11.714
Again, absolutely not.

197
00:14:11.714 --> 00:14:15.931
There is so much happening in a browser,
it is one of the most complicated

198
00:14:15.931 --> 00:14:19.954
programs, I think,
that we generally use every day.

199
00:14:19.954 --> 00:14:22.111
And there's a lot to learn about it.

200
00:14:22.111 --> 00:14:25.671
So good, there's an image, okay.

201
00:14:27.101 --> 00:14:31.391
So the idea is that now you know
everything about the browser.

202
00:14:31.391 --> 00:14:35.910
No, one does not simply completely
explain complex situations

203
00:14:35.910 --> 00:14:38.731
with a single diagram or meme.

204
00:14:38.731 --> 00:14:41.748
But don't worry, I don't have
a single meme in these slides.

205
00:14:41.748 --> 00:14:46.530
As I have many, many memes, which
hopefully will be loading appropriately.

206
00:14:46.530 --> 00:14:51.634
But if you would like to dig deeper,
I recommended this talk also in

207
00:14:51.634 --> 00:14:57.285
the JavaScript first steps course,
but this is an amazing talk on YouTube

208
00:14:57.285 --> 00:15:02.410
by Philip Roberts called What
the heck is the event loop anyway?.

209
00:15:02.410 --> 00:15:06.500
It's from, I wanna say, 2015 or
something around there, and

210
00:15:06.500 --> 00:15:09.729
it's a really, really great,
much more detailed,

211
00:15:09.729 --> 00:15:14.131
much more thorough explanation of all
of the stuff we just talked about.

