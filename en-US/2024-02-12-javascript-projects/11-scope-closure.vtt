WEBVTT

1
00:00:00.000 --> 00:00:05.447
So what happens then,
if in the next line of code,

2
00:00:05.447 --> 00:00:11.177
I changed the value of level and
I change it to error.

3
00:00:11.177 --> 00:00:14.939
And so
now I'm trying to really weary the user,

4
00:00:14.939 --> 00:00:20.029
you've made a terrible mistake
you shouldn't have done this.

5
00:00:20.029 --> 00:00:21.659
I still get a warning.

6
00:00:21.659 --> 00:00:26.351
Even if I changed level, I still get
a warning when I call where a user.

7
00:00:26.351 --> 00:00:31.616
And this is a similar issue to why earlier
we were still getting the same values for

8
00:00:31.616 --> 00:00:34.108
the position of our beautiful clock.

9
00:00:34.108 --> 00:00:40.352
Even when we were running the callback
function over and over again.

10
00:00:40.352 --> 00:00:44.832
So what's going on here?

11
00:00:44.832 --> 00:00:47.642
It all comes down to scope.

12
00:00:47.642 --> 00:00:52.567
So in JavaScript,
[LAUGH] as in most programming

13
00:00:52.567 --> 00:00:57.491
languages that we would
find ourselves using,

14
00:00:57.491 --> 00:01:01.308
there are essentially a variety of,

15
00:01:01.308 --> 00:01:06.479
we could think of them as
contexts called scopes,

16
00:01:06.479 --> 00:01:12.529
where JavaScript knows what
you mean when you say a thing.

17
00:01:12.529 --> 00:01:18.625
For example, it knows what value
I'm referring to when I say level,

18
00:01:18.625 --> 00:01:23.473
only because I declared it
earlier in my global scope.

19
00:01:23.473 --> 00:01:28.378
And so we talked about this a little
bit in JavaScript first steps so

20
00:01:28.378 --> 00:01:30.049
might be worth a look.

21
00:01:30.049 --> 00:01:35.222
But I like the metaphor of a limousine for
JavaScript scopes, and

22
00:01:35.222 --> 00:01:40.874
we can just refresh our memories of
like how Scope works in JavaScript.

23
00:01:40.874 --> 00:01:42.501
Let's move over to the,

24
00:01:42.501 --> 00:01:47.000
whoa, let's move over [LAUGH] to
the virtual whiteboard, shall we?

25
00:01:47.000 --> 00:01:53.392
Okay, so we've got our,
when we're in a particular window or

26
00:01:53.392 --> 00:01:57.732
what have you, we have our kind of global,

27
00:01:57.732 --> 00:02:02.696
I hope you can read what passes for
handwriting.

28
00:02:02.696 --> 00:02:05.657
We have our global scope, right,

29
00:02:05.657 --> 00:02:11.589
where I can do things like maybe
I've declared like level is a thing.

30
00:02:11.589 --> 00:02:16.116
And that points to some value over
on the heap, right, we now know.

31
00:02:16.116 --> 00:02:20.783
So level points to some value that's like,
well,

32
00:02:20.783 --> 00:02:26.218
I guess, I should have used,
yeah, okay, so it's warn.

33
00:02:26.218 --> 00:02:29.128
Then I have a function,
and what did I call it?

34
00:02:29.128 --> 00:02:30.547
Makelogger.

35
00:02:33.293 --> 00:02:39.541
And inside of this function, JavaScript
create, or when I declare this function,

36
00:02:39.541 --> 00:02:45.274
JavaScript in the body of that function
has sort of moved into another scope.

37
00:02:45.274 --> 00:02:48.609
And I like the limo metaphor for

38
00:02:48.609 --> 00:02:53.996
this because basically makelogger,
whoa okay,

39
00:02:53.996 --> 00:03:01.192
can see outside of its scope to
the level variable that I declared.

40
00:03:01.192 --> 00:03:05.441
So if I call level in here,

41
00:03:05.441 --> 00:03:10.463
it's still going to be the same

42
00:03:10.463 --> 00:03:17.812
value that's declared in the global scope.

43
00:03:17.812 --> 00:03:20.021
I can actually access that value.

44
00:03:20.021 --> 00:03:27.321
Whereas if I declare another variable,
like, that's hard to read,

45
00:03:27.321 --> 00:03:32.466
let's say I do a cons new
var equals blah blah blah,

46
00:03:32.466 --> 00:03:38.210
and then after defining my
function in the global scope,

47
00:03:38.210 --> 00:03:43.142
I try to access new var,
it's not gonna happen.

48
00:03:43.142 --> 00:03:48.101
So imagine you're in like a stretch
limo when you're in this function.

49
00:03:48.101 --> 00:03:52.270
You can see out the tinted glass,
but nobody can see in to you and

50
00:03:52.270 --> 00:03:55.432
whatever life of luxury
you're living there.

51
00:03:55.432 --> 00:04:00.253
[LAUGH] So this is sort of this
concept of these nested scopes,

52
00:04:00.253 --> 00:04:05.934
where a function can access things
that don't just exist in its scope.

53
00:04:05.934 --> 00:04:10.384
Becomes very important when
we think about when and

54
00:04:10.384 --> 00:04:14.532
where JavaScript is looking for
these values.

55
00:04:14.532 --> 00:04:19.767
So to go back to our whiteboard when

56
00:04:19.767 --> 00:04:25.724
I instead of declaring a new variable,

57
00:04:25.724 --> 00:04:32.416
I have declared some makelogger function.

58
00:04:32.416 --> 00:04:36.682
And that's going to return a function,

59
00:04:36.682 --> 00:04:43.467
actually we've got another
little scope nest, hello, okay.

60
00:04:43.467 --> 00:04:48.117
That's gonna be, sorry,
this is the log function.

61
00:04:48.117 --> 00:04:53.216
And this function within a function
can also access what's in

62
00:04:53.216 --> 00:04:58.128
both the makelogger scope and
what's in the global scope.

63
00:04:58.128 --> 00:05:00.432
This function that I'm declaring,

64
00:05:06.804 --> 00:05:09.490
In here within the makelager function,

65
00:05:09.490 --> 00:05:13.681
we've got kind of like a limo within
a limo within [LAUGH] a limo.

66
00:05:13.681 --> 00:05:16.789
So the metaphor breaks down, but

67
00:05:16.789 --> 00:05:21.451
[LAUGH] the idea is again
like we have access to other

68
00:05:21.451 --> 00:05:26.565
scopes than the one that
we're in when we're inside.

69
00:05:26.565 --> 00:05:29.280
Not necessarily when we're outside,
well, not when we're outside,

70
00:05:29.280 --> 00:05:30.935
we can't see into somebody else's scope.

71
00:05:30.935 --> 00:05:36.796
But the fact that we can see
out means that the values and

72
00:05:36.796 --> 00:05:42.277
the decisions,
that we're gonna be making inside

73
00:05:42.277 --> 00:05:47.248
of this inner function
might be based on values

74
00:05:47.248 --> 00:05:52.100
as they were in the scope
where we defined it.

75
00:05:52.100 --> 00:05:54.690
So let's look at this.

76
00:05:54.690 --> 00:05:59.040
So, okay,
we have level in the global scope.

77
00:06:00.569 --> 00:06:05.620
We then call makeLogger
with this value level.

78
00:06:05.620 --> 00:06:11.058
So now, makeLogger, in its little scope,
it declares a new variable, log level,

79
00:06:11.058 --> 00:06:16.814
that's defined by, this is created by the
way JavaScript function declarations work.

80
00:06:16.814 --> 00:06:20.540
We can just declare the variable right
there as an argument in the middle of

81
00:06:20.540 --> 00:06:21.511
the parentheses.

82
00:06:21.511 --> 00:06:26.675
So now I have access to the variable log
level within the makeLogger function.

83
00:06:26.675 --> 00:06:31.807
For example, if I wanted to put
a console log here before returning,

84
00:06:31.807 --> 00:06:34.387
I could, and level would be warn.

85
00:06:34.387 --> 00:06:39.834
But also, that value gets referenced when

86
00:06:39.834 --> 00:06:45.431
this log function is
defined in order to look

87
00:06:45.431 --> 00:06:52.255
up the given string as a method
on the console object.

88
00:06:54.012 --> 00:06:59.785
So what's happening is that
when this function runs,

89
00:06:59.785 --> 00:07:03.429
let's go back to the whiteboard.

90
00:07:03.429 --> 00:07:05.107
Clean this up a little bit, okay.

91
00:07:05.107 --> 00:07:08.702
[COUGH] So this was called,

92
00:07:13.340 --> 00:07:17.685
I don't know,
log level was another variable in here.

93
00:07:17.685 --> 00:07:23.515
And that points to whatever was level
before, cuz that's the value we passed in,

94
00:07:23.515 --> 00:07:27.668
which then ultimately points
us back to this string warn.

95
00:07:27.668 --> 00:07:33.182
Pretend that's an arrow,
[LAUGH] and the log function

96
00:07:33.182 --> 00:07:38.215
then is going to say,
okay, I am now a function.

97
00:07:38.215 --> 00:07:44.288
Where I'm trying to do console and
then whatever log level is and so

98
00:07:44.288 --> 00:07:51.765
this is where it's like okay what is the
value of log level let me go look for it.

99
00:07:51.765 --> 00:07:57.054
I found it eventually through a series of

100
00:07:57.054 --> 00:08:04.055
pointers now I'm gonna replace
this value in here and

101
00:08:04.055 --> 00:08:11.692
the function that's returned
is pointing to that value.

102
00:08:11.692 --> 00:08:16.327
Even if I later change it down
here in the global scope,

103
00:08:19.918 --> 00:08:26.395
If I change it over here, this is
just gonna repoint this variable and

104
00:08:26.395 --> 00:08:32.874
not change anything about this
function that was already created and

105
00:08:32.874 --> 00:08:36.795
stored as its very own object on the heap.

106
00:08:36.795 --> 00:08:41.708
Okay, so I fill out a very chaotic arrows.

107
00:08:41.708 --> 00:08:46.550
But the point here is that, We

108
00:08:46.550 --> 00:08:51.567
can essentially remember data from

109
00:08:51.567 --> 00:08:57.085
the context in which this particular,

110
00:08:57.085 --> 00:09:02.613
in this case function, was declared.

111
00:09:02.613 --> 00:09:07.453
But regardless,
when I looked up this value level,

112
00:09:07.453 --> 00:09:12.403
later renamed to log level,
and I got that value, and

113
00:09:12.403 --> 00:09:18.233
then I used that value in the code
that I then stored as a function

114
00:09:18.233 --> 00:09:23.086
returned as a value,
which I could then later call.

115
00:09:23.086 --> 00:09:27.739
That string,
because here we're dealing with a string

116
00:09:27.739 --> 00:09:32.106
gets remembered even after
level has long changed.

117
00:09:32.106 --> 00:09:37.208
So where user is remembering
something that's

118
00:09:37.208 --> 00:09:42.183
kind of stuck in time at
whatever it referenced

119
00:09:42.183 --> 00:09:46.901
when it was first running
through its code,

120
00:09:46.901 --> 00:09:55.208
which needed to reference values that
were pointed to by certain variables.

121
00:09:55.208 --> 00:10:01.423
So this is all to say, essentially,
what we have is Jurassic Park and

122
00:10:01.423 --> 00:10:08.283
a value of our little warn string trapped
like a mosquito in the metaphorical

123
00:10:08.283 --> 00:10:14.956
amber of this function value that was
returned from the parent function.

124
00:10:14.956 --> 00:10:19.926
So we can put aside the fact
that this may not have any

125
00:10:19.926 --> 00:10:25.716
scientific accuracy of how mosquitos and
dinosaurs work.

126
00:10:25.716 --> 00:10:32.155
Shockingly, the Jurassic Park was
a non-fiction film, but anyway [LAUGH].

127
00:10:32.155 --> 00:10:37.667
The idea here is that we can trap things

128
00:10:37.667 --> 00:10:43.352
inside of a function that we have passed

129
00:10:43.352 --> 00:10:49.229
back out of a parent function as a value.

130
00:10:49.229 --> 00:10:55.184
And that is, to add some more jargon
on us, a concept called closure.

131
00:10:55.184 --> 00:10:59.498
So while the words
are sometimes used differently,

132
00:10:59.498 --> 00:11:05.772
a bit like essentially what we're saying
is that this worry user function,

133
00:11:05.772 --> 00:11:10.774
this internal log function,
the internal log function that

134
00:11:10.774 --> 00:11:17.263
is the value that I'm getting back when
I call my mmakeLogger has closed over.

135
00:11:17.263 --> 00:11:23.466
Or sort of it is encased
in amber the value

136
00:11:23.466 --> 00:11:29.128
from the scope where it was defined.

137
00:11:29.128 --> 00:11:35.200
So not the value in the global scope
as many times as it may change but

138
00:11:35.200 --> 00:11:40.514
the value that was pointed to
by that variable in the global

139
00:11:40.514 --> 00:11:45.730
scope at the time that this
inner function was declared.

140
00:11:45.730 --> 00:11:47.846
And it doesn't have to just be
something from the global scope.

141
00:11:47.846 --> 00:11:51.959
It could also be a variable declared
within the parent function or

142
00:11:51.959 --> 00:11:55.266
within the parent of a grandparent or
what have you.

143
00:11:55.266 --> 00:12:00.013
So any of those outer scopes
that the limo can see out to,

144
00:12:00.013 --> 00:12:04.659
the infinite nested limo,
the Russian doll of limos,

145
00:12:04.659 --> 00:12:09.305
if you will, can be closed over and
trapped in amber and

146
00:12:09.305 --> 00:12:13.966
remembered for
the lifetime of that function itself.

147
00:12:13.966 --> 00:12:18.051
Okay, so this is a little bit of scope
review that we have different scopes.

148
00:12:18.051 --> 00:12:23.045
It's also a bit of this is why we
need to remember that if we want

149
00:12:23.045 --> 00:12:27.480
a new random value we have to
call it in the right place.

150
00:12:27.480 --> 00:12:33.349
Or if we want to not call a random
value too many different times,

151
00:12:33.349 --> 00:12:38.674
we can also declare it or
get that value in a higher scope and

152
00:12:38.674 --> 00:12:44.237
then pull it down into our little
ambery nugget of a closure.

