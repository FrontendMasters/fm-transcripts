WEBVTT

1
00:00:00.000 --> 00:00:02.462
We were just talking about, well,

2
00:00:02.462 --> 00:00:07.548
all of the ways that Date can be tricky
to work with and all of the things that

3
00:00:07.548 --> 00:00:12.337
we wish we had from other languages
that other languages might have.

4
00:00:12.337 --> 00:00:15.993
But of course, all different
languages kind of deal with dates and

5
00:00:15.993 --> 00:00:17.832
times differently and whatnot.

6
00:00:17.832 --> 00:00:24.083
So a note, about the date object,
or the D Date object and

7
00:00:24.083 --> 00:00:28.650
the date objects that we create with new.

8
00:00:28.650 --> 00:00:32.670
Pretty much everyone ever
finds them problematic and

9
00:00:32.670 --> 00:00:37.227
inadequate for our lives as developers and
our experience as

10
00:00:37.227 --> 00:00:42.245
humans with this thing called the web
that we have to deal with now.

11
00:00:42.245 --> 00:00:47.791
[COUGH] So, as you may have
noticed on the MDN Date page,

12
00:00:47.791 --> 00:00:55.267
there's a little note that TC 39,
which again is the standards body for

13
00:00:55.267 --> 00:01:00.212
ECMAScript Which is
the official specification

14
00:01:00.212 --> 00:01:04.810
of the JavaScript language
is working on it.

15
00:01:04.810 --> 00:01:09.561
[LAUGH] They're working on a new
alternative because they have heard

16
00:01:09.561 --> 00:01:15.239
the people, the people have taken to
the Internet and complained anonymously.

17
00:01:15.239 --> 00:01:20.854
[LAUGH] Tthat Date is
not meeting our need.

18
00:01:20.854 --> 00:01:26.072
So, if you click through some of these
links, you will find fun sentences like,

19
00:01:26.072 --> 00:01:29.862
Date has been a long-standing
pain point in ECMAScript.

20
00:01:29.862 --> 00:01:34.748
And there is a detailed look at some
of the problems with date in a blog

21
00:01:34.748 --> 00:01:37.494
post called Fixing JavaScript Date,

22
00:01:37.494 --> 00:01:42.319
which has the most adorable little
JavaScript, developer on it.

23
00:01:42.319 --> 00:01:47.093
And so, yes, if you want to
learn more about all of the ways

24
00:01:47.093 --> 00:01:50.797
that Date can go horribly, horribly wrong,

25
00:01:50.797 --> 00:01:56.059
click through these links that
are on the Date reference in MDN,

26
00:01:56.059 --> 00:02:01.734
and you will hopefully find some fun or
perhaps horrifying stories.

27
00:02:01.734 --> 00:02:05.034
Cool, okay, good point.

28
00:02:05.034 --> 00:02:09.451
Before we leave the land of iterables and
iterators,

29
00:02:09.451 --> 00:02:13.868
there was also a question
that came up around, are for

30
00:02:13.868 --> 00:02:18.004
of loops the only place
that we can use iterables?

31
00:02:18.004 --> 00:02:22.954
No, there's actually several
different places where JavaScript

32
00:02:22.954 --> 00:02:26.005
syntax is expecting an iterable object.

33
00:02:26.005 --> 00:02:33.231
So if we go back to our
amazingly interesting page,

34
00:02:33.231 --> 00:02:39.794
and scroll down
the iterative protocol page.

35
00:02:39.794 --> 00:02:45.632
And if we scroll down we have
some built-in iterables,

36
00:02:45.632 --> 00:02:47.832
like we saw array is one.

37
00:02:47.832 --> 00:02:53.735
And we also have, yeah, some different
APIs that accept iterables, wow.

38
00:02:53.735 --> 00:02:56.906
And we have some different
syntax in JavaScript,

39
00:02:56.906 --> 00:03:01.594
some different statements and
expressions that do look for an integral.

40
00:03:01.594 --> 00:03:06.359
For of is the foster child
as it were,but we also

41
00:03:06.359 --> 00:03:10.183
have the spread operator dot dot dot.

42
00:03:10.183 --> 00:03:15.756
We could spread our clock
out into a clocky array.

43
00:03:15.756 --> 00:03:21.136
There's also an even
deeper rabbit hole within

44
00:03:21.136 --> 00:03:27.187
generators which is generators
can yield successive

45
00:03:27.187 --> 00:03:32.431
values from another
iterable with a yield star

46
00:03:32.431 --> 00:03:39.027
that is sort of like yield each
of the things in this thing.

47
00:03:39.027 --> 00:03:41.210
Which I deliberately didn't
tell I'll tell you about so

48
00:03:41.210 --> 00:03:42.765
that we could do our exercise together.

49
00:03:42.765 --> 00:03:48.265
[LAUGH] But in any case, it does mean
that you can do some fanciness there.

50
00:03:48.265 --> 00:03:49.574
YoungStar is one of those.

51
00:03:49.574 --> 00:03:57.084
So, essentially, these iterables
pop up in different places.

52
00:03:57.084 --> 00:04:01.795
And, for example, the Spread Operator I
think is one of the more

53
00:04:01.795 --> 00:04:06.254
useful relatively new syntactic
additions to JavaScript.

54
00:04:06.254 --> 00:04:10.944
It's very helpful, and we talked about it
a little bit in JavaScript First Steps.

55
00:04:10.944 --> 00:04:15.441
But yeah,
you can spread your own custom iterable

56
00:04:15.441 --> 00:04:20.054
objects if they implement
the iterator protocol.

57
00:04:20.054 --> 00:04:21.233
And that's what's nice about it.

58
00:04:21.233 --> 00:04:24.644
Again, it's not just one method that
you always have to call this method and

59
00:04:24.644 --> 00:04:27.062
then you have to pass it on callback or
blah blah blah.

60
00:04:27.062 --> 00:04:32.472
It can pop up in lots of different places
because it is an accepted protocol

61
00:04:32.472 --> 00:04:37.986
in the language as opposed to a convention
of naming a method a certain thing

