[00:00:00]
>> What are the most important things a junior should be expected to know to land their first job?
>> Well, I believe for that question, I will refer you to the entire wealth of interview-related content and courses that there are.
>> We have a beginner learning path.
>> A learning path, yes, exactly.

[00:00:20]
And isn't there a course about interviewing?
>> There is, we also have a free getting a job course by Jerome Hardaway.
>> Right.
>> So yeah, take a look at that on Frontend Masters, it's completely free.
>> Yeah.
>> We do have a lot of great free beginner resources.

[00:00:38]

>> Definitely, but I will say this, as someone who has been on both sides of the hiring table as a junior developer and as someone interviewing junior developers and looking for them. In general, when people are hiring a junior developer, and by people, I mean companies, which apparently in the United States are also people.

[00:00:56]
But anyway, [LAUGH] the thing that folks are hiring a junior developer for is not expertise, right? For that, you would be looking for someone, if you really need someone who just wrote the book on some very specific thing, that's not the role that a junior dev is gonna be applying for.

[00:01:16]
Instead, what they're looking for are people who are willing to learn new concepts, willing to take guidance from others, willing to work themselves on solving problems that they might have before going and asking somebody else for help. So in my experience, sure, there might be certain things where they say, it's nice if you have some experience with X,Y, Z tool and JavaScript, some particular framework that they use on their product, what have you.

[00:01:51]
But for junior level, there is a real, real value to being able to ask good questions, which Julia Evans has a fabulous blog post about asking good questions. So yeah, Julia Evans, ask good questions, ought to do it in your search engine of choice and I think it's jvns.ca is your site but don't quote me on that.

[00:02:21]
Anyway, basically, for example, being able to say, okay, I have understood that this is the case and I have understood that that is the case, but I'm confused about this thing and I tried debugging it with this, this, and this, and I still don't know what that means.

[00:02:36]
So could you please help me? So a team that has some senior engineer's a lot of experience, but not a lot of time to mentor junior devs is going to want people like that who are able to pick up new skills as they go. They're able to help get themselves unstuck, and then they're able to go and ask for help when they need it, and not just be stuck and not move forward.

[00:03:00]
So I would say, more than worrying about, have I learned the right frameworks and things like that? Learning on those higher level kind of core scale things about communicating what you're thinking about a problem, communicating what you have struggled with or have learned and ideas that you have and things that you're interested in learning.

[00:03:24]
All of that is also super valuable, especially when you're at that junior dev job search level. So don't undervalue those type of things, I would say.
>> Trade offs for starting your career at a startup versus a corporation.
>> [LAUGH] Trade offs for starting your career at a startup versus a corporation.

[00:03:48]
Well, there's lots, I suppose [LAUGH]. Startups generally tend to be pretty high intensity environments, not all of them. But a lot of them are small teams that are trying to do big things and are willing to put in super long hours and weekends and kind of make it the main thing in their lives a lot.

[00:04:08]
So that's a whole, Situation that you may or may not be in for. Startups also generally tend to have maybe not the best salaries, but a potential large upside on the equity front. But the thing is that, most startups don't become the unicorns, as they say, worth billions of dollars, [LAUGH] what have you, so your mileage may vary.

[00:04:35]
Corporations, in my experience, having not been a software developer at very big corporations myself, but can sometimes be the helpful structure, especially if you're coming in at a junior level. A helpful structure of a very tightly scoped. This team works on this small thing and not so much that everyone is wearing many hats and trying to do many things at the same time vibe of a startup.

[00:05:03]
Which can be a good thing if it is helpful for you to kind of focus and kind of get your foot in the door there. It can also sometimes feel a bit constraining to people, especially once they start to get a little more developed in their career. Or if you're the type of person who likes to do all kinds of different things and doesn't like to be in a very specialized role a lot, but that can also be different.

[00:05:27]
There are some corporations that have kind of sub organizations that essentially function like startups. So this is all to say it depends, [LAUGH] I guess, but these days, unfortunately, the hiring market right now, as at the time of filming, is pretty rough. And so I think regardless of whether the market is good or the market is bad, regardless of whether it's a startup that's got a job opening or a corporation that's got a job opening.

[00:05:53]
If you look for the people that you're gonna work with and are they the kinda people that you're really excited to learn from and collaborate with, I think that is gonna make a bigger difference than the overarching company structure to your experience and career growth. But that's all one random person on the Internet's opinion, so [LAUGH] take it with a grain of salt.

[00:06:19]
So Mohammed works as a language teacher and is now in the way of shifting career or mixing careers, and I just wanna say that is exactly what I did. So I was an English as a foreign language teacher, Circa, I don't know, 2008 to 2013, something like that.

[00:06:39]
And during that time, I started getting interested in code, I started getting interested in language learning tools and language teaching tools, things like computer assisted language learning. And that's what opened the doors to me and got me interested in software. And so first of all, it is awesome to see other people going through that shift and I also know how hard it is and I feel you and it is a climb, but you can do it.

[00:07:05]
And then the question is, is it feasible to create a whole website by myself? Yes, it is indeed feasible. And hopefully, through this course, we have learned some tools for getting our selfie cam is a whole website. It is maybe not the most complex website, it's not a Facebook or what have you, but it is a whole website and you'll built it, so great job.

[00:07:29]
And also, sometimes we find, I'm trying to recap here that we rabbit hole on certain questions or certain things that we find, and we spend way too much time writing code that we didn't know wasn't really the best way to do it at the time, and I would say that is just the way of [LAUGH] things.

[00:07:56]
So for example, there is a great resource that I meant to mention earlier when we were talking about Git. Its real name starts with O and then there's a word that starts with SH and rhymes with Git, but there is another version of the site called dangitgit.com, I think.

[00:08:20]
It makes a great point. It's a basically a way to get yourself out of bad oopses in Git, so very useful thing. Also, I believe Julia Evans and the author of that site who I'm blanking on right now have a zine about it. Anyway, it makes the excellent point point that sometimes you don't know the thing to put into your search engine to look for to solve your problem until you already know how to solve your problem.

[00:08:49]
So it's like this catch 22 chicken and egg situation. And so sometimes, as we've seen in JavaScript, there's eight bajillion ways to do everything. So sometimes the way that gets you moving forward, whether it's the most optimal way or something that somebody was really mean about on the Internet when you asked question or whatever.

[00:09:12]
Don't listen to the haters, shake it off like Taylor, and keep writing the code that gets you moving to the next step, I would say. So may the force be with you.

