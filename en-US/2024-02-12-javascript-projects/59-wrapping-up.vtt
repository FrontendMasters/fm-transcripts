WEBVTT

1
00:00:00.205 --> 00:00:04.631
So let us take a moment to
pat ourselves on the back and

2
00:00:04.631 --> 00:00:09.870
review and recap a few of the things
that we have learned here.

3
00:00:09.870 --> 00:00:14.959
And I will say that one of my, if I were
to say in a word, [LAUGH] the takeaway

4
00:00:14.959 --> 00:00:19.817
here is you can't have bugs in your
code if you don't write any code.

5
00:00:19.817 --> 00:00:23.674
So that's for sure, but we do need
to write code to do some things, so

6
00:00:23.674 --> 00:00:25.413
we've been talking about it.

7
00:00:25.413 --> 00:00:31.025
And we have done so javascript, much wow,
hope everyone appreciates the Comic Sans.

8
00:00:31.025 --> 00:00:35.989
And we have been over a lot of
different features of JavaScript, and

9
00:00:35.989 --> 00:00:40.011
the browsers, and
the other environments it runs in.

10
00:00:40.011 --> 00:00:43.111
For example, we talked about
a lot of browser internals,

11
00:00:43.111 --> 00:00:46.720
how JavaScript engines use the Stack and
the Heap to do their thing,

12
00:00:46.720 --> 00:00:49.715
how the event loop queues up
stuff that needs to happen.

13
00:00:49.715 --> 00:00:54.547
And what that means for us trying to
predict when the code that we thought was

14
00:00:54.547 --> 00:00:57.387
gonna run 1,000 milliseconds later,

15
00:00:57.387 --> 00:01:01.313
actually runs 1,200 milliseconds later or
whatever.

16
00:01:01.313 --> 00:01:03.407
We talked about asynchronous
code in a little more detail.

17
00:01:03.407 --> 00:01:08.377
We talked about callbacks and other ways
other APIs that we have to do things like

18
00:01:08.377 --> 00:01:11.652
setTimeouts and
sort of schedule things to happen.

19
00:01:11.652 --> 00:01:13.006
Or set intervals and

20
00:01:13.006 --> 00:01:18.266
do things on every frame of data coming
in from the video stream, for example.

21
00:01:18.266 --> 00:01:23.729
We talked about higher-level ways
to think about complex programs,

22
00:01:23.729 --> 00:01:27.534
and kind of stay organized and
stay principled.

23
00:01:27.534 --> 00:01:31.752
So things like programming paradigms,
functional programming,

24
00:01:31.752 --> 00:01:36.266
object-oriented programming, and
some of the ways that those play out

25
00:01:36.266 --> 00:01:41.003
in JavaScript, which is a pretty
multi-paradigm language in that sense.

26
00:01:41.003 --> 00:01:45.239
We talked about prototypes plenty,
and the prototype chain, and

27
00:01:45.239 --> 00:01:48.504
the zombie object at the top of it,
object object.

28
00:01:48.504 --> 00:01:54.094
So now when we go to,
I don't know, an airport and

29
00:01:54.094 --> 00:01:58.221
the next flight to object object is,

30
00:01:58.221 --> 00:02:02.230
[LAUGH] then we will do a knowing nod.

31
00:02:02.230 --> 00:02:05.387
[LAUGH] And
we also talked a lot about iteration and

32
00:02:05.387 --> 00:02:09.853
some of these underlying protocols
that is the magic that's going on

33
00:02:09.853 --> 00:02:14.627
under the hood when we do things like
a for of loop, or a spread operator and

34
00:02:14.627 --> 00:02:19.114
how we can leverage that to even
implement our own iterable objects.

35
00:02:19.114 --> 00:02:23.751
We talked about, yeah,
Symbol.iterator and generators, and

36
00:02:23.751 --> 00:02:27.808
how we can use those to satisfy
the iteration protocols.

37
00:02:27.808 --> 00:02:32.400
And we talked about class declarations and
inheritance of classes, and

38
00:02:32.400 --> 00:02:36.239
setting methods and properties,
and making them private or

39
00:02:36.239 --> 00:02:41.073
keeping them public, or having getters and
setters, all that good stuff.

40
00:02:41.073 --> 00:02:45.431
So we can start to write code a little
bit more in the style that we might

41
00:02:45.431 --> 00:02:49.885
be used to if we're coming from
another object-oriented language.

42
00:02:49.885 --> 00:02:54.963
And we definitely talked about a tiny,
tiny tip of the iceberg of

43
00:02:54.963 --> 00:03:01.089
the APIs that are available to us through
the magical thing we call a browser.

44
00:03:01.089 --> 00:03:03.996
We talked about the DOM, and
the Canvas, and MediaDevices.

45
00:03:03.996 --> 00:03:09.381
And now, also things like the share
API and the ways to figure out

46
00:03:09.381 --> 00:03:16.386
what the user individually has as their
settings, do they prefer dark mode or not?

47
00:03:16.386 --> 00:03:20.786
So we've really done so javaScript,

48
00:03:20.786 --> 00:03:25.877
much wow, and also very workflow, amaze.

49
00:03:25.877 --> 00:03:27.382
These are all Doge memes.

50
00:03:27.382 --> 00:03:28.672
Okay, anyway,

51
00:03:28.672 --> 00:03:34.214
we also talked a lot about the context
in which we are using JavaScript.

52
00:03:34.214 --> 00:03:36.979
It's not enough to just
know the keywords and

53
00:03:36.979 --> 00:03:41.219
all of that in order to really be
a productive JavaScript developer.

54
00:03:41.219 --> 00:03:45.045
So we need to know things like
the fact that Node.js exists and

55
00:03:45.045 --> 00:03:49.626
the historical accidents and what that
means for us [LAUGH] as developers.

56
00:03:49.626 --> 00:03:53.727
And how npm and
the whole package ecosystem lets us pull

57
00:03:53.727 --> 00:03:57.753
random strangers code into ours for
better or worse.

58
00:03:57.753 --> 00:04:02.656
And [LAUGH] we talked about the different
module systems that there are in

59
00:04:02.656 --> 00:04:08.048
JavaScript and how we need to specify
ES Modules in certain contexts if we wanna

60
00:04:08.048 --> 00:04:13.052
use those imports and exports to be
able to keep our code base organized.

61
00:04:13.052 --> 00:04:17.198
And not have all of our code in
one massively long script tag or

62
00:04:17.198 --> 00:04:18.756
something like that.

63
00:04:18.756 --> 00:04:25.151
We learn how to use a Vite to kind of
very quickly, as the name would imply,

64
00:04:25.151 --> 00:04:30.328
get a dev server up and running and
iterate on development.

65
00:04:30.328 --> 00:04:35.342
Which then we can use to build for
a more production-ready version

66
00:04:35.342 --> 00:04:39.742
of the site that does a whole
bunch of magic under the hood.

67
00:04:39.742 --> 00:04:43.846
And also opens the doors to all kinds
of other tooling, like Astro or

68
00:04:43.846 --> 00:04:48.024
other kind of meta frameworks that
allow us to start building more and

69
00:04:48.024 --> 00:04:51.282
more complex sites on top
of these kinda principles.

70
00:04:51.282 --> 00:04:56.338
So there's almost this whole network
of these different tools and layers.

71
00:04:56.338 --> 00:05:01.513
We talked about linting and ESLint,
and formatting with pruettier,

72
00:05:01.513 --> 00:05:05.721
and how to set up our own custom
scripts in our packages and

73
00:05:05.721 --> 00:05:10.387
configure everything with JSON files,
and so on and so forth.

74
00:05:10.387 --> 00:05:15.098
We even deployed a site to the interwebs,
which might not have felt so magical, but

75
00:05:15.098 --> 00:05:16.863
I think it's pretty magical.

76
00:05:16.863 --> 00:05:22.229
We all,
Shipped something real to the world,

77
00:05:22.229 --> 00:05:26.844
and that, I think,
everyone should feel good about.

78
00:05:26.844 --> 00:05:31.679
And even if it didn't happen,
it's all good because we now

79
00:05:31.679 --> 00:05:36.418
have a way to start exploring
the whole world of what we call

80
00:05:36.418 --> 00:05:41.642
continuous delivery in the sense
of automatically building and

81
00:05:41.642 --> 00:05:45.631
deploying our sites
whenever we push to Github.

82
00:05:45.631 --> 00:05:48.414
And there's all kinds of
other things we can do.

83
00:05:48.414 --> 00:05:53.067
Things like continuous integration,
running our test suite, for example,

84
00:05:53.067 --> 00:05:57.095
every time we push a commit opens
up a whole world of possibilities.

85
00:05:57.095 --> 00:06:01.417
And we got a little friendly with Github
and some of Github specifics here,

86
00:06:01.417 --> 00:06:05.807
and things like VS Code, and other goodies
that Microsoft [LAUGH] has for us,

87
00:06:05.807 --> 00:06:06.371
I guess.

88
00:06:06.371 --> 00:06:10.563
So we've also even now all forked
a project, and the next step would be to

89
00:06:10.563 --> 00:06:15.169
make a pull request or essentially a
request to the original project, Meme Me,

90
00:06:15.169 --> 00:06:18.012
to incorporate the feature
that you've added.

91
00:06:18.012 --> 00:06:22.930
So I can't promise I will keep up with
the, open source maintainer struggle is

92
00:06:22.930 --> 00:06:27.867
real, but this is essentially what you
might be doing if you're using a tool.

93
00:06:27.867 --> 00:06:32.184
Yeah, like Vite, for example, and
you find a bug and you wanna be useful and

94
00:06:32.184 --> 00:06:36.167
contribute back to these open source
projects that we know and love and

95
00:06:36.167 --> 00:06:36.860
depend on.

96
00:06:36.860 --> 00:06:41.561
As developers, we can do all that through
Github and through this forking and

97
00:06:41.561 --> 00:06:42.149
PR flow.

98
00:06:42.149 --> 00:06:47.672
So we've opened, hopefully,
a lot of doors for ourselves.

99
00:06:47.672 --> 00:06:51.892
And I don't know about you all, but I am
very impressed with everybody's work and

100
00:06:51.892 --> 00:06:53.738
everybody's amazing questions.

101
00:06:53.738 --> 00:07:00.489
So thank you all so much for all of the
engagement, and all of the rabbit holes,

102
00:07:00.489 --> 00:07:05.421
and all of the edge cases and
new ideas and imaginations.

103
00:07:05.421 --> 00:07:08.124
So amazing, amazing work.

104
00:07:08.124 --> 00:07:13.972
And I hope from here, we are all
feeling empowered to go forth and

105
00:07:13.972 --> 00:07:18.197
continue adventuring into the wide, weird,

106
00:07:18.197 --> 00:07:23.528
sometimes wonderful,
sometimes wacky world of the web.

107
00:07:23.528 --> 00:07:26.952
And may the force be
with you as you do so.

108
00:07:26.952 --> 00:07:28.793
Thanks so much.

109
00:07:28.793 --> 00:07:33.862
&gt;&gt; [APPLAUSE]

