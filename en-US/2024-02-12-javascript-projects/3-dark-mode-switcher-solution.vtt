WEBVTT

1
00:00:00.000 --> 00:00:05.339
All righty, so
we may have noticed that there

2
00:00:05.339 --> 00:00:10.538
is a handy dandy pre ID'd
[LAUGH] script tag at

3
00:00:10.538 --> 00:00:15.877
the bottom of this HTML
file where we can write

4
00:00:15.877 --> 00:00:21.096
the JavaScript we need
to make this happen.

5
00:00:21.096 --> 00:00:26.618
So how did it feel to be just stretching

6
00:00:26.618 --> 00:00:31.285
our legs, messing with a page?

7
00:00:31.285 --> 00:00:31.789
&gt;&gt; Pretty good.

8
00:00:31.789 --> 00:00:38.250
&gt;&gt; All right, we're getting our feet wet,
and again, the quick win category.

9
00:00:38.250 --> 00:00:43.220
I think it's important to start with some
small wins or maybe not start but continue

10
00:00:43.220 --> 00:00:47.207
to try to find those opportunities for
the quick wins all the time.

11
00:00:47.207 --> 00:00:51.746
Because there's a lot of very slow losses.

12
00:00:51.746 --> 00:00:57.066
So [LAUGH] all righty,
so hopefully we've now

13
00:00:57.066 --> 00:01:03.231
got a input check box that
actually does something.

14
00:01:03.231 --> 00:01:07.875
I'm going to walk you
through how I solve this, but

15
00:01:07.875 --> 00:01:12.314
there's lots of different
ways to JavaScript.

16
00:01:12.314 --> 00:01:16.875
So [LAUGH] we're going to also have
a chance like if folks have done

17
00:01:16.875 --> 00:01:21.775
it a different way, perhaps in one
line of code [LAUGH] or in many more,

18
00:01:21.775 --> 00:01:24.241
we can share that with each other.

19
00:01:24.241 --> 00:01:28.755
All right, we can grab that document
element that we were talking

20
00:01:28.755 --> 00:01:32.219
about before with
document.documentElement.

21
00:01:32.219 --> 00:01:35.261
And my handy-dandy, very smart,

22
00:01:35.261 --> 00:01:40.548
very large code editor is [LAUGH]
helping me out with some suggestions.

23
00:01:40.548 --> 00:01:43.863
But that's not a method it's a property.

24
00:01:43.863 --> 00:01:49.401
We're going to then be able to
do stuff like doc get attribute

25
00:01:49.401 --> 00:01:54.397
data theme to get the value
of the currently set theme so

26
00:01:54.397 --> 00:01:59.407
I could capture that as
something like current theme.

27
00:02:02.314 --> 00:02:07.651
And follows well,
we can [LAUGH] log the value

28
00:02:07.651 --> 00:02:12.706
to the console just to
check on what it is.

29
00:02:12.706 --> 00:02:16.142
All right, so now I see some output, dark.

30
00:02:16.142 --> 00:02:17.729
What's all this other stuff about Vite?

31
00:02:17.729 --> 00:02:21.996
We're gonna talk about it later.

32
00:02:21.996 --> 00:02:27.642
[LAUGH] This is not the console log
you are looking for Star Wars people.

33
00:02:27.642 --> 00:02:29.779
No, just okay,
we've got the current theme.

34
00:02:29.779 --> 00:02:33.555
Now we want to figure out
what the new theme would be.

35
00:02:33.555 --> 00:02:36.087
So I'm gonna make a new
variable new theme.

36
00:02:36.087 --> 00:02:40.882
We want this to basically be,
so it's either gonna be dark or

37
00:02:40.882 --> 00:02:44.736
light, the string dark or
the string light, and

38
00:02:44.736 --> 00:02:50.023
we want it to be the other one from
what the current theme is, yeah?

39
00:02:50.023 --> 00:02:54.256
So I could write, I

40
00:02:54.256 --> 00:02:59.249
could write a whole like I
could declare a let variable so

41
00:02:59.249 --> 00:03:04.577
that I can change it to value
later that's like a new theme.

42
00:03:04.577 --> 00:03:09.862
And then I could do
a whole if current theme

43
00:03:09.862 --> 00:03:14.846
is dark then new theme should be light.

44
00:03:14.846 --> 00:03:21.503
But this is taking me forever and
I've had to use multiple lines of code,

45
00:03:21.503 --> 00:03:25.992
which for
some reason developers are averse to.

46
00:03:25.992 --> 00:03:29.674
[LAUGH] So
there is a shorter way to do that.

47
00:03:29.674 --> 00:03:34.447
Can anybody tell me what
the shorter way to write like

48
00:03:34.447 --> 00:03:38.361
an if-else statement like this would be?

49
00:03:38.361 --> 00:03:38.963
Yeah.

50
00:03:38.963 --> 00:03:40.383
&gt;&gt; Ternary operator.

51
00:03:40.383 --> 00:03:42.461
&gt;&gt; Ternary operator, yes, so

52
00:03:42.461 --> 00:03:46.537
this was mentioned briefly
in JavaScript first steps.

53
00:03:46.537 --> 00:03:51.758
But in addition to doing a whole
if-else branching logic this way,

54
00:03:51.758 --> 00:03:53.955
we could replace this with,

55
00:03:53.955 --> 00:03:59.004
well this is gonna be upset because
I already declared new theme.

56
00:03:59.004 --> 00:04:03.576
But we can replace it with a ternary

57
00:04:03.576 --> 00:04:08.939
operator that's like condition move,

58
00:04:08.939 --> 00:04:13.826
then this is the kind of if block, and

59
00:04:13.826 --> 00:04:17.466
then if not, else, yeah.

60
00:04:17.466 --> 00:04:24.311
So, in this case,
our condition is current theme is dark.

61
00:04:24.311 --> 00:04:29.090
And our if block is the value we want for
new theme is light.

62
00:04:29.090 --> 00:04:33.600
So that means that is what this is
going to evaluate to which is then

63
00:04:33.600 --> 00:04:38.366
going to be on the right hand side
of the assignment operator equals.

64
00:04:38.366 --> 00:04:40.935
So that's what the value
of new theme is gonna be.

65
00:04:40.935 --> 00:04:47.054
And if it's not, then that means
the current theme must be light.

66
00:04:47.054 --> 00:04:50.796
So we're going to want to
assign the opposite value,

67
00:04:50.796 --> 00:04:53.220
in this case dark to the new theme.

68
00:04:53.220 --> 00:04:59.288
Okay, so now I can do all of this,
fabulous.

69
00:04:59.288 --> 00:05:02.408
Now I could just, for example,

70
00:05:02.408 --> 00:05:07.610
change the value of this data
theme attribute once and

71
00:05:07.610 --> 00:05:14.200
for all with set attribute [LAUGH]
set attribute, thank you VS Code,

72
00:05:14.200 --> 00:05:20.342
tab completion there if you start
typing something in VS Code.

73
00:05:20.342 --> 00:05:25.099
And you have certain language
settings enabled for JavaScript,

74
00:05:25.099 --> 00:05:27.441
it'll complete what it knows.

75
00:05:27.441 --> 00:05:28.706
Is it always correct?

76
00:05:28.706 --> 00:05:29.839
Absolutely not.

77
00:05:29.839 --> 00:05:31.077
Does it help most of the time?

78
00:05:31.077 --> 00:05:32.047
Sure.

79
00:05:32.047 --> 00:05:39.733
Okay, so I can set the attribute
data theme to the new theme instead.

80
00:05:39.733 --> 00:05:43.778
So now if I run this, okay.

81
00:05:43.778 --> 00:05:48.899
So it's in light mode, so that's good,
but this still doesn't do anything.

82
00:05:48.899 --> 00:05:55.803
And that's because I need
an event listener, exactly.

83
00:05:55.803 --> 00:06:00.651
Okay, so
I am going to put all this fun little

84
00:06:00.651 --> 00:06:05.237
code in a function which
then I can parse as

85
00:06:05.237 --> 00:06:10.625
the handler function to
the addEventListener.

86
00:06:10.625 --> 00:06:18.350
So we're gonna need to attach this
to the input, this checkbox input.

87
00:06:18.350 --> 00:06:23.764
So I can grab that with, I'm gonna call
it toggle and it has that ID toggle.

88
00:06:23.764 --> 00:06:30.553
So I can do document.getElementbyId,
toggle,

89
00:06:30.553 --> 00:06:36.533
and hopefully, let's just double check,

90
00:06:36.533 --> 00:06:40.746
get the toggle input element.

91
00:06:40.746 --> 00:06:43.115
Which is yes what I am receiving here,
fabulous.

92
00:06:43.115 --> 00:06:48.221
Okay, so now I could do a toggle,
addEventListener,

93
00:06:48.221 --> 00:06:54.552
drink coffee before programming
if you're into that kinda thing.

94
00:06:54.552 --> 00:06:59.668
[LAUGH] The addEventListener, we're going

95
00:06:59.668 --> 00:07:06.452
to parse in the name of the event
that we want to listen for.

96
00:07:06.452 --> 00:07:08.708
In this case, it would be a,

97
00:07:08.708 --> 00:07:13.691
anybody know the name of the event
that we'd wanna listen for?

98
00:07:13.691 --> 00:07:16.903
So, like buttons,
we can listen for clicks, but

99
00:07:16.903 --> 00:07:19.704
on input elements we often listen for-
&gt;&gt; Change.

100
00:07:19.704 --> 00:07:22.909
&gt;&gt; Change events, absolutely.

101
00:07:22.909 --> 00:07:28.830
And there are a whole bunch of other
events that the browser knows about.

102
00:07:28.830 --> 00:07:36.085
So change is a pretty useful one,
and then we can parse in a function.

103
00:07:36.085 --> 00:07:40.655
Okay, so now, let's create a function
that we can parse [LAUGH] in.

104
00:07:40.655 --> 00:07:46.221
So why don't I take all of this fun
little code that we have here of getting

105
00:07:46.221 --> 00:07:51.331
the current theme, figuring out
what the new theme should be, and

106
00:07:51.331 --> 00:07:57.369
then setting that as the new value of
the data theme attribute into a function.

107
00:07:57.369 --> 00:08:01.346
Which I could call a toggleTheme or
changeTheme theme or

108
00:08:01.346 --> 00:08:03.386
whatever you wanna call it.

109
00:08:03.386 --> 00:08:07.182
It's not gonna take any
arguments because really all

110
00:08:07.182 --> 00:08:11.576
of the information this needs
it's figuring out for itself.

111
00:08:11.576 --> 00:08:16.616
And now if I parse in
the toggle theme function to

112
00:08:16.616 --> 00:08:22.286
the addEventListener method
on the toggle element,

113
00:08:22.286 --> 00:08:27.333
ideally we have [LAUGH]
a working input element.

114
00:08:27.333 --> 00:08:29.495
Let's find out.

115
00:08:29.495 --> 00:08:33.012
My gosh, it worked, it worked.

116
00:08:36.394 --> 00:08:38.707
Doesn't it feel good?

117
00:08:38.707 --> 00:08:39.789
Even if it took forever.

118
00:08:39.789 --> 00:08:46.087
[LAUGH] Okay, did anybody else
have a different solution?

119
00:08:46.087 --> 00:08:49.626
&gt;&gt; Someone just asked why
not use the arrow function?

120
00:08:49.626 --> 00:08:52.743
&gt;&gt; Why not use the arrow function?

121
00:08:52.743 --> 00:08:55.267
Great question.

122
00:08:55.267 --> 00:08:58.504
In this case, we can totally do that.

123
00:08:58.504 --> 00:09:03.624
So maybe I don't actually need
this toggle theme function for

124
00:09:03.624 --> 00:09:07.865
anywhere else except this one reference,
right?

125
00:09:07.865 --> 00:09:12.561
And I could have declared
this as like toggleTheme =,

126
00:09:12.561 --> 00:09:16.033
and then an arrow function expression,

127
00:09:16.033 --> 00:09:20.540
which looks like this
sometimes called a fat arrow.

128
00:09:20.540 --> 00:09:24.645
So we have the arguments,
and then this fat arrow, and

129
00:09:24.645 --> 00:09:26.972
then the body of the function.

130
00:09:26.972 --> 00:09:31.866
So I could have declared it like that,
and then this would still work.

131
00:09:31.866 --> 00:09:36.214
No reason not to, I like arrows,
we all Arrow people?

132
00:09:36.214 --> 00:09:38.793
Arrow fans?

133
00:09:38.793 --> 00:09:39.750
Arrowers?

134
00:09:39.750 --> 00:09:44.726
Whatever, and in this case, I don't even
really need to name this function and

135
00:09:44.726 --> 00:09:46.671
save it in a variable, right?

136
00:09:46.671 --> 00:09:49.165
Because I'm not gonna use it anywhere but
this one place.

137
00:09:49.165 --> 00:09:55.194
So I could actually make
this an anonymous function

138
00:09:55.194 --> 00:10:01.091
because it has no name,
likes to stay incognito.

139
00:10:01.091 --> 00:10:06.498
That I declare where I need it.

140
00:10:06.498 --> 00:10:12.291
So I could totally use an arrow
function or the function keyword even,

141
00:10:12.291 --> 00:10:16.917
to declare a, well, actually,
let me take that back.

142
00:10:16.917 --> 00:10:21.700
I could use an arrow function
[LAUGH] to declare a anonymous

143
00:10:21.700 --> 00:10:25.799
function that will work
the same way hopefully.

144
00:10:25.799 --> 00:10:29.417
Indeed, okay, so good question.

145
00:10:29.417 --> 00:10:32.311
In this case, there is no difference.

146
00:10:32.311 --> 00:10:36.254
Yeah.
&gt;&gt; Someone had a solution where they just

147
00:10:36.254 --> 00:10:40.339
put, if this dot checked in the function,

148
00:10:40.339 --> 00:10:45.232
and then dot dot Set Attribute
get a them = dark or.

149
00:10:45.232 --> 00:10:52.315
&gt;&gt; Okay, so we can also read
attributes of the input object and

150
00:10:52.315 --> 00:10:57.283
we can check whether it is checked or not.

151
00:10:57.283 --> 00:11:02.086
We just have to make sure that
we are also updating that

152
00:11:02.086 --> 00:11:06.998
every time the checked value changes,
which is pretty

153
00:11:06.998 --> 00:11:12.252
much the only thing in a checkbox,
that there is a change.

154
00:11:12.252 --> 00:11:16.339
And that's why we want to be listening for
that change event so

155
00:11:16.339 --> 00:11:20.437
that we're not just basically
setting it and forgetting it.

156
00:11:20.437 --> 00:11:25.642
We're allowing the user to have their way.

157
00:11:25.642 --> 00:11:31.385
Okay, so this was meant to be a quick

158
00:11:31.385 --> 00:11:38.479
just review example to
get us into the flow.

159
00:11:38.479 --> 00:11:45.394
And we are gonna be in our quick wins,
essentially working in the same pattern.

160
00:11:45.394 --> 00:11:52.362
We're gonna have some very simple HTML,
a script tag that is our job to fill out,

161
00:11:52.362 --> 00:11:58.938
and hopefully we'll add some super
impressive functionality to the page.

162
00:11:58.938 --> 00:12:04.808
[LAUGH] Then what we're gonna be
doing in part two of the course

163
00:12:04.808 --> 00:12:10.923
is pulling all that together into
a more full featured web app.

164
00:12:10.923 --> 00:12:15.966
So we're gonna be starting with bite
sized pieces as we go through some

165
00:12:15.966 --> 00:12:21.009
of these language features and
then we're going to pull them together

166
00:12:21.009 --> 00:12:25.979
into a bigger-than-bite-sized
piece into a meal-sized piece?

167
00:12:25.979 --> 00:12:27.156
I don't know, we'll figure it out.

