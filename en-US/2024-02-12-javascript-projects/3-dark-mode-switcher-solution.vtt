WEBVTT

1
00:00:00.018 --> 00:00:05.559
All righty, so, We

2
00:00:05.559 --> 00:00:10.736
may have noticed that there
is a handy dandy pre-ided

3
00:00:10.736 --> 00:00:15.796
[LAUGH] script tag at the bottom
of this HTML file where

4
00:00:15.796 --> 00:00:21.220
we can write the JavaScript
we need to make this happen.

5
00:00:21.220 --> 00:00:25.821
So how, Did it feel to be

6
00:00:25.821 --> 00:00:30.823
just stretching our legs,
messing with a page?

7
00:00:30.823 --> 00:00:31.763
&gt;&gt; Felt pretty good.

8
00:00:31.763 --> 00:00:36.461
&gt;&gt; All right, we're getting our feet wet.

9
00:00:36.461 --> 00:00:38.747
And again, the quick win category,

10
00:00:38.747 --> 00:00:42.154
I think it's important to
start with some small wins.

11
00:00:42.154 --> 00:00:46.894
Or maybe not start, but continue to
try to find those opportunities for

12
00:00:46.894 --> 00:00:51.564
the quick wins all the time because
there's a lot of very slow losses.

13
00:00:51.564 --> 00:00:55.203
So, [LAUGH] all righty, so hopefully,

14
00:00:55.203 --> 00:01:01.064
we've now got a input check box
that actually does something.

15
00:01:03.424 --> 00:01:06.481
I'm going to walk you
through how I solve this.

16
00:01:06.481 --> 00:01:12.814
But there's lots of different
ways to Java a script.

17
00:01:12.814 --> 00:01:15.959
So [LAUGH] we're going
to also have a chance,

18
00:01:15.959 --> 00:01:20.889
if folks have done it a different way,
perhaps in one line of code, or

19
00:01:20.889 --> 00:01:24.378
in many more,
we can share that with each other.

20
00:01:24.378 --> 00:01:28.077
All right,
we can grab that document element that we

21
00:01:28.077 --> 00:01:32.549
were talking about before with
document.documentElement.

22
00:01:32.549 --> 00:01:35.544
And my handy-dandy, very smart,

23
00:01:35.544 --> 00:01:40.755
very large code editor is [LAUGH]
helping me out with some suggestions.

24
00:01:40.755 --> 00:01:43.051
But, that's not a method it's a property.

25
00:01:44.191 --> 00:01:49.850
We're going to then be able to
do stuff like doc.getAttribute

26
00:01:49.850 --> 00:01:54.975
data-theme to get the value
of the currently set theme so

27
00:01:54.975 --> 00:01:59.909
I could capture that as
something like currentTheme.

28
00:02:02.452 --> 00:02:07.228
And if all goes well,
we can log the value to

29
00:02:07.228 --> 00:02:11.622
the console just to check on what it is.

30
00:02:12.812 --> 00:02:16.522
All right, so now I see some output, dark.

31
00:02:16.522 --> 00:02:18.612
What's all this other stuff about vite?

32
00:02:18.612 --> 00:02:22.012
We're gonna talk about it later [LAUGH],

33
00:02:22.012 --> 00:02:27.619
this is not the console log you
are looking for, Star Wars people?

34
00:02:27.619 --> 00:02:30.279
No, just okay, we've got the currentTheme.

35
00:02:30.279 --> 00:02:33.739
Now we want to figure out
what the new theme would be.

36
00:02:33.739 --> 00:02:36.249
So I'm gonna make a new variable newTheme.

37
00:02:36.249 --> 00:02:43.360
So it's either gonna be dark or light,
the string, dark or the string light.

38
00:02:43.360 --> 00:02:48.546
And we want it to be the other one
from what the current theme is.

39
00:02:48.546 --> 00:02:52.157
[SOUND]

40
00:02:54.239 --> 00:02:57.542
I could declare a let variable so

41
00:02:57.542 --> 00:03:01.465
that I can change its value later.

42
00:03:01.465 --> 00:03:04.665
That's like newTheme.

43
00:03:04.665 --> 00:03:09.676
And then I could do
a whole if currentTheme

44
00:03:09.676 --> 00:03:15.065
is dark, then newTheme should be light.

45
00:03:15.065 --> 00:03:17.305
But this is taking me forever.

46
00:03:18.335 --> 00:03:22.884
And I've had to use multiple
lines of code, which for

47
00:03:22.884 --> 00:03:26.561
some reason developers are averse to.

48
00:03:26.561 --> 00:03:28.711
So there is a shorter way to do that.

49
00:03:29.851 --> 00:03:34.779
Can anybody tell me what
the shorter way to write an if

50
00:03:34.779 --> 00:03:39.121
else statement like this would be, yeah?

51
00:03:39.121 --> 00:03:40.564
&gt;&gt; Ternary operator.

52
00:03:40.564 --> 00:03:43.688
&gt;&gt; Ternary operator.

53
00:03:43.688 --> 00:03:48.328
Yes, so, this was mentioned briefly
in JavaScript first steps, but

54
00:03:48.328 --> 00:03:53.832
in addition to doing a whole, if else,
branching logic this way, we could replace

55
00:03:53.832 --> 00:03:59.126
this with, well, this is gonna be upset
because I already declared newTheme.

56
00:03:59.126 --> 00:04:03.871
But we can replace it with a ternary

57
00:04:03.871 --> 00:04:08.780
operator that's like condition,

58
00:04:08.780 --> 00:04:14.177
[SOUND] then this is the kind of if block,

59
00:04:14.177 --> 00:04:17.464
and then if not or else.

60
00:04:17.464 --> 00:04:23.716
So, in this case,
our condition is currentTheme is dark and

61
00:04:23.716 --> 00:04:29.369
our if block is the value we want for
newTheme is light.

62
00:04:29.369 --> 00:04:34.340
So that means that is what this is going
to evaluate to which is then going to

63
00:04:34.340 --> 00:04:38.443
be on the right hand side of
the assignment operator equals.

64
00:04:38.443 --> 00:04:41.662
So that's what the value
of newTheme is gonna be.

65
00:04:41.662 --> 00:04:47.440
And if it's not, then that means the
currentTheme must be light, so we're going

66
00:04:47.440 --> 00:04:53.499
to want to assign the opposite value,
in this case, dark, to the new Theme.

67
00:04:53.499 --> 00:04:55.687
Okay, so now, I can do all of this.

68
00:04:55.687 --> 00:05:01.486
Fabulous, now, I could just, for example,

69
00:05:01.486 --> 00:05:08.478
change the value of this
data-theme attribute once and

70
00:05:08.478 --> 00:05:12.048
for all with setAttribute,

71
00:05:12.048 --> 00:05:17.422
thank you VS Code, tab completion there.

72
00:05:17.422 --> 00:05:22.556
If you start typing something in
VS Code and you have certain language

73
00:05:22.556 --> 00:05:27.616
settings enabled for JavaScript,
it'll complete what it knows.

74
00:05:27.616 --> 00:05:28.912
Is it always correct?

75
00:05:28.912 --> 00:05:30.032
Absolutely not.

76
00:05:30.032 --> 00:05:31.362
Does it help most of the time?

77
00:05:31.362 --> 00:05:39.852
Sure, okay, so I can set the attribute
data-theme to the newTheme instead.

78
00:05:39.852 --> 00:05:43.959
So now if I run this, okay.

79
00:05:43.959 --> 00:05:49.297
So it's in light mode, so that's good,
but this still doesn't do anything.

80
00:05:49.297 --> 00:05:53.254
And that's because I need an-
&gt;&gt; Event listener.

81
00:05:53.254 --> 00:05:56.608
&gt;&gt; Event listener, exactly, so

82
00:05:56.608 --> 00:06:02.542
I am going to put all this fun
little code in a function,

83
00:06:02.542 --> 00:06:11.125
which then I can pass as the handler
function to the addEventListener.

84
00:06:11.125 --> 00:06:17.894
So, we're gonna need to attach this
to the input, this check box input.

85
00:06:17.894 --> 00:06:24.264
So I can grab that with, I'm gonna call
it toggle and it has that ID toggle.

86
00:06:24.264 --> 00:06:30.526
So I can do
document.getElementById toggle.

87
00:06:30.526 --> 00:06:35.169
And hopefully, let's just double check.

88
00:06:35.169 --> 00:06:42.622
Get the toggle, Input element which is,
yes, what I am receiving here.

89
00:06:42.622 --> 00:06:50.811
Fabulous, so
now I could do a toggle addEventListener.

90
00:06:50.811 --> 00:06:55.223
Drink coffee before programming if
you're into that kind of thing.

91
00:06:55.223 --> 00:07:00.728
[LAUGH] The addEventListener,
we're going to pass

92
00:07:00.728 --> 00:07:06.952
in the name of the event
that we want to listen for.

93
00:07:06.952 --> 00:07:09.052
In this case, it would be a,

94
00:07:09.052 --> 00:07:13.902
anybody know the name of the event
that we'd wanna listen for?

95
00:07:13.902 --> 00:07:16.102
So like buttons, we can listen for clicks.

96
00:07:16.102 --> 00:07:18.864
But on input elements,
we often listen for-

97
00:07:18.864 --> 00:07:19.656
&gt;&gt; Change.

98
00:07:19.656 --> 00:07:23.033
&gt;&gt; Change events, absolutely.

99
00:07:23.033 --> 00:07:29.093
And there are a whole bunch of other
events that the browser knows about.

100
00:07:29.093 --> 00:07:32.069
So change is a pretty useful one.

101
00:07:32.069 --> 00:07:36.529
And then we can pass in a function.

102
00:07:36.529 --> 00:07:40.381
So now let's create a function
that we can pass [LAUGH] in.

103
00:07:40.381 --> 00:07:46.021
So why don't I take all of this fun
little code that we have here of getting

104
00:07:46.021 --> 00:07:51.199
the currentTheme, figuring out
what the newTheme should be, and

105
00:07:51.199 --> 00:07:57.764
then setting that as the new value of the
data-theme attribute into a function which

106
00:07:57.764 --> 00:08:03.522
I could call, toggleTheme or
changeTheme or whatever you wanna call it.

107
00:08:03.522 --> 00:08:08.058
It's not gonna take any arguments because
really all of the information this needs

108
00:08:08.058 --> 00:08:09.823
it's figuring out for itself.

109
00:08:11.769 --> 00:08:16.566
And now if I pass in
the toggleTheme function to

110
00:08:16.566 --> 00:08:22.102
the addEventListener method
on the toggle element,

111
00:08:22.102 --> 00:08:27.432
ideally, we have a working input element.

112
00:08:27.432 --> 00:08:29.346
Let's find out.

113
00:08:29.346 --> 00:08:34.095
My gosh, it worked.

114
00:08:36.293 --> 00:08:37.872
Doesn't it feel good?

115
00:08:37.872 --> 00:08:40.747
Did anybody else have
a different solution?

116
00:08:41.948 --> 00:08:44.378
&gt;&gt; Someone just asked,
why not use the arrow function?

117
00:08:45.438 --> 00:08:48.628
&gt;&gt; Why not use the arrow function?

118
00:08:48.628 --> 00:08:50.131
Great question.

119
00:08:50.131 --> 00:08:54.348
In this case, we can totally do that.

120
00:08:54.348 --> 00:08:58.237
So maybe I don't actually need
this toggle theme function for

121
00:08:58.237 --> 00:09:02.087
anywhere else except this one reference,
right?

122
00:09:02.087 --> 00:09:07.577
And I could also declare this,
I could have declared this as toggleTheme

123
00:09:07.577 --> 00:09:12.797
equals and then an arrow function
expression which looks like this,

124
00:09:12.797 --> 00:09:15.137
sometimes called a fat arrow.

125
00:09:16.277 --> 00:09:20.898
So we have the arguments and then this fat
arrow and then the body of the function.

126
00:09:22.874 --> 00:09:25.773
So I could have declared it like that and
then this would still work.

127
00:09:27.665 --> 00:09:29.484
No reason not to.

128
00:09:29.484 --> 00:09:30.604
I like arrows.

129
00:09:30.604 --> 00:09:36.154
We all arrow people, arrow fans,
arrowers or whatever.

130
00:09:36.154 --> 00:09:40.838
And in this case, I don't even really
need to name this function and

131
00:09:40.838 --> 00:09:42.408
save it in a variable.

132
00:09:42.408 --> 00:09:45.378
Because I'm not gonna use it anywhere but
this one place.

133
00:09:45.378 --> 00:09:49.836
So I could actually make
this an anonymous function

134
00:09:49.836 --> 00:09:54.199
because it has no name,
likes to stay incognito,

135
00:09:56.779 --> 00:10:02.633
That I declare where I need it.

136
00:10:02.633 --> 00:10:08.404
So I could totally use an arrow function,
or the function keyword even,

137
00:10:08.404 --> 00:10:12.673
to declare a, well actually,
let me take that back.

138
00:10:12.673 --> 00:10:17.746
I could use an arrow function
to declare a anonymous function

139
00:10:17.746 --> 00:10:22.455
that will work the same way,
hopefully, indeed.

140
00:10:22.455 --> 00:10:25.215
So good question.

141
00:10:25.215 --> 00:10:27.614
In this case,
there is no difference, yeah.

142
00:10:27.614 --> 00:10:35.877
&gt;&gt; Someone had a solution where they just
put ifthis.checked in the function and

143
00:10:35.877 --> 00:10:41.648
then doc.setAttribute
data-theme equals dark or.

144
00:10:41.648 --> 00:10:47.966
&gt;&gt; So we can also read attributes
of the input object and

145
00:10:47.966 --> 00:10:52.998
we can check whether it is checked or not.

146
00:10:52.998 --> 00:10:57.814
We just have to make sure that
we are also updating that

147
00:10:57.814 --> 00:11:02.956
every time the checked value
changes which is pretty much

148
00:11:02.956 --> 00:11:08.360
the only thing in a checkbox
that there is to change.

149
00:11:08.360 --> 00:11:12.358
And that's why we want to be listening for
that change event, so

150
00:11:12.358 --> 00:11:16.220
that we're not just basically
setting it and forgetting it.

151
00:11:16.220 --> 00:11:19.980
We're allowing the user to have their way.

152
00:11:21.770 --> 00:11:26.506
So this was meant to be a quick,

153
00:11:26.506 --> 00:11:33.268
just review example to
get us into the flow.

154
00:11:33.268 --> 00:11:39.648
And we are gonna be in our quick wins
essentially working in the same pattern.

155
00:11:39.648 --> 00:11:43.603
We're gonna have some very simple HTML,

156
00:11:43.603 --> 00:11:49.140
a script tag that is our job to
fill out and hopefully we'll

157
00:11:49.140 --> 00:11:54.577
add some super-impressive
functionality to the page.

158
00:11:54.577 --> 00:12:00.319
[LAUGH] Then what we're gonna be
doing in part two of the course

159
00:12:00.319 --> 00:12:06.304
is pulling all that together into
a more full featured web app.

160
00:12:06.304 --> 00:12:10.636
So we're gonna be starting with bite
sized pieces as we go through some of

161
00:12:10.636 --> 00:12:15.195
these language features and then we're
going to pull them together into a,

162
00:12:16.708 --> 00:12:21.784
Bigger than bite sized piece
into a meal sized piece.

163
00:12:21.784 --> 00:12:22.504
I don't know.

164
00:12:22.504 --> 00:12:23.568
We'll figure it out.

