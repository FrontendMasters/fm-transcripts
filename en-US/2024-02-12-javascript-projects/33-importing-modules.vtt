WEBVTT

1
00:00:00.140 --> 00:00:05.099
Okay so and yes and so for
brevity we often do npm i or

2
00:00:05.099 --> 00:00:10.177
npm ig if we need to to install these and
if we just run

3
00:00:10.177 --> 00:00:16.936
just as a recap if we just run npm
install without any words after it.

4
00:00:16.936 --> 00:00:21.765
What it's doing is looking for
a package.json right here where I am.

5
00:00:21.765 --> 00:00:25.633
And installing all of the dependencies and
their dependencies and so

6
00:00:25.633 --> 00:00:29.709
on and so forth of that package.json
described by that package.json.

7
00:00:29.709 --> 00:00:31.415
Does that make sense?

8
00:00:31.415 --> 00:00:36.015
So that is how we're gonna be finding
ourselves as developers a lot of the time.

9
00:00:36.015 --> 00:00:40.773
We're gonna be doing something like
cloning a repository from GitHub or

10
00:00:40.773 --> 00:00:41.631
something.

11
00:00:41.631 --> 00:00:46.597
And then npm installing so
that we now have local copies of

12
00:00:46.597 --> 00:00:51.471
all of those packages that we
need to make this thing go.

13
00:00:51.471 --> 00:00:54.462
And we're gonna look at more
examples of that later.

14
00:00:54.462 --> 00:00:58.002
So now the question is, all right,
I installed cowsay, beautiful,

15
00:00:58.002 --> 00:01:01.072
beautiful cowsay,
as a dependency of my whereAmi project.

16
00:01:03.509 --> 00:01:08.410
What use is a dependency in your project
with all of the bloat of those 40-some

17
00:01:08.410 --> 00:01:13.179
other packages that it comes with if
you're not using it in your project?

18
00:01:13.179 --> 00:01:15.649
So, how do we use it in our project?

19
00:01:15.649 --> 00:01:19.714
And so now that I have npm installed,

20
00:01:19.714 --> 00:01:24.829
within my amazing script
whereAmi.json I now

21
00:01:24.829 --> 00:01:29.814
have this node modules
folder gives me access

22
00:01:29.814 --> 00:01:34.289
to all of the code of all of these things.

23
00:01:35.389 --> 00:01:40.524
Right so I get like there's JavaScript
files in here and do they use var still

24
00:01:40.524 --> 00:01:45.834
sure, because we're not gonna talk about
that, but VAR will outlive us all.

25
00:01:45.834 --> 00:01:51.907
And what did I just,
it's because I typoed.

26
00:01:51.907 --> 00:01:56.808
Okay, so the way that I access that
amazing code that is going to help me say

27
00:01:56.808 --> 00:02:01.096
things with a cow, in this case,
is with the import statement.

28
00:02:04.161 --> 00:02:05.215
There's more to say
about that in a minute.

29
00:02:05.215 --> 00:02:09.477
[LAUGH] And so for example, in this case,

30
00:02:14.315 --> 00:02:17.516
Cowsay exposes a,

31
00:02:21.898 --> 00:02:29.118
Essentially method but it's, we'll call
it a function called say that I can,

32
00:02:29.118 --> 00:02:34.503
if I import it, I essentially
now have a variable say in my,

33
00:02:34.503 --> 00:02:41.550
whereAmi.js file that does whatever
cowsay, defined that function to do.

34
00:02:41.550 --> 00:02:46.225
And I can now use it like
a regular old function in my code.

35
00:02:46.225 --> 00:02:51.023
So for example, I can wrap these in a say,

36
00:02:51.023 --> 00:02:55.960
and now we're getting
into like the VS code

37
00:02:55.960 --> 00:03:01.325
versus doing this at
the terminal situation.

38
00:03:01.325 --> 00:03:02.755
And this is very zoomed in.

39
00:03:02.755 --> 00:03:05.963
So this is basically taking
up my entire screen now, but

40
00:03:05.963 --> 00:03:11.510
what VS code is doing, you've noticed all
these things popping up as I type, right?

41
00:03:11.510 --> 00:03:15.754
VS code is giving me what it thinks
are helpful information, and

42
00:03:15.754 --> 00:03:19.841
hopefully most of the time
actually is helpful information,

43
00:03:19.841 --> 00:03:24.180
about what it knows about this
thing that I'm currently typing.

44
00:03:24.180 --> 00:03:28.854
And so in this case it knows
from the cowsay module

45
00:03:28.854 --> 00:03:33.763
what this say function
looks like what it expects.

46
00:03:35.553 --> 00:03:40.350
And some of [LAUGH] you can make a
paranoid cow you can make a wired cow some

47
00:03:40.350 --> 00:03:42.879
of the amazing things that it can do.

48
00:03:42.879 --> 00:03:44.511
And in this case, and

49
00:03:44.511 --> 00:03:50.607
this is all coming from documentation
that this lovely developer wrote for me.

50
00:03:50.607 --> 00:03:55.211
In this case, it's telling me
that the way you use this say,

51
00:03:55.211 --> 00:03:59.364
method, which I have just
de structured from cowsay,

52
00:03:59.364 --> 00:04:03.246
is that you pass in a object
with all your options and

53
00:04:03.246 --> 00:04:07.433
then a text property,
that is the text you want to say.

54
00:04:07.433 --> 00:04:13.533
And you can change the eyes,
you can change the tongue, whatever.

55
00:04:13.533 --> 00:04:17.643
In this case, we're just we're just gonna
be fine with the default cow, I think.

56
00:04:17.643 --> 00:04:20.041
And so we're going to say, and

57
00:04:20.041 --> 00:04:25.216
we have to conform to the API that
this developer has chosen for us.

58
00:04:25.216 --> 00:04:28.574
We're going to say with
cowsay the text and

59
00:04:28.574 --> 00:04:33.248
maybe we even want to just like
add in the current year here.

60
00:04:34.938 --> 00:04:37.328
And we'll just forget the timeout part.

61
00:04:37.328 --> 00:04:40.179
Helps if I define it first, okay.

62
00:04:40.179 --> 00:04:43.227
And so now if all goes well

63
00:04:45.496 --> 00:04:50.046
When I go back to my last terminal and

64
00:04:50.046 --> 00:04:54.898
I close you, and we do in our okay and so

65
00:04:54.898 --> 00:04:58.843
now we run this whereAmi.js,

66
00:04:58.843 --> 00:05:07.883
which I can again access through
that main key of the package here.

67
00:05:07.883 --> 00:05:13.098
Well, we get a fun little message
that says, [LAUGH] Anjana,

68
00:05:13.098 --> 00:05:17.613
excuse you,
you cannot use this import statement.

69
00:05:19.413 --> 00:05:23.835
I do not know, this is not the import
that, [LAUGH] you are looking for.

70
00:05:23.835 --> 00:05:28.770
I do not know what you're talking about
because you are outside of a module, and

71
00:05:28.770 --> 00:05:32.617
you can only use the import
statement from inside of a module.

72
00:05:34.097 --> 00:05:39.420
Now, this is one that I actually did
intentionally do on purpose, because

73
00:05:39.420 --> 00:05:44.926
that brings us to our next topic, which
is a whole beast of a thing that again.

74
00:05:44.926 --> 00:05:47.653
There could be an entire day
of discussion about, but

75
00:05:47.653 --> 00:05:49.816
modules in JavaScript and in Node.

76
00:05:49.816 --> 00:05:55.289
The idea of modularity, right,
just as like a high-level

77
00:05:55.289 --> 00:06:00.325
concept in coding is that
just like NASA doesn't build

78
00:06:00.325 --> 00:06:07.342
an entire massive space telescope all
in one go with like one engineer.

79
00:06:07.342 --> 00:06:12.075
Neither do we build massive,
large scale software projects

80
00:06:12.075 --> 00:06:17.012
with one JavaScript file and
one developer writing that file.

81
00:06:17.012 --> 00:06:21.241
Like that would be [LAUGH] there's some
other timeline where that's happening, and

82
00:06:21.241 --> 00:06:24.227
I guess at least we know we're
not in the darkest timeline.

83
00:06:24.227 --> 00:06:30.010
So the idea here is that we want
to be able to create a really

84
00:06:30.010 --> 00:06:34.962
complex program out of
very much simpler parts.

85
00:06:34.962 --> 00:06:39.210
And be able to put them all together
like little Lego bricks together or

86
00:06:39.210 --> 00:06:42.333
little integrated science instruments.

87
00:06:42.333 --> 00:06:45.955
I'm on a massive space telescope for
example, and have one team work on that

88
00:06:45.955 --> 00:06:49.369
and another team work on that and
one person on the Internet over there.

89
00:06:49.369 --> 00:06:52.533
Kindly work on that and make it
open source and so on and so forth.

90
00:06:52.533 --> 00:06:57.215
So then we can pull all these
modules together into a beautiful,

91
00:06:57.215 --> 00:07:01.043
complex program that does
whatever we need it to do.

92
00:07:03.004 --> 00:07:07.630
So, that is something that many
languages have, from the get-go,

93
00:07:07.630 --> 00:07:13.634
an idea of like, how are we going to
deal with modularity in this language?

94
00:07:13.634 --> 00:07:15.254
JavaScript's not one of them.

95
00:07:15.254 --> 00:07:20.155
So, in 1995 we were like, just add in some

96
00:07:20.155 --> 00:07:24.687
event listeners to some buttons, right?

97
00:07:24.687 --> 00:07:27.609
What else do we need a JavaScript to do?

98
00:07:27.609 --> 00:07:29.129
That's not too much.

99
00:07:29.129 --> 00:07:32.709
That's a few lines you can put between
a couple script tags, no big deal.

100
00:07:35.369 --> 00:07:38.254
Then things started getting more and
more complicated,

101
00:07:38.254 --> 00:07:41.678
more and more complicated, and
then stuff like Node came around and

102
00:07:41.678 --> 00:07:45.485
was like all right now we're really
dealing with a lot of complexity here.

103
00:07:45.485 --> 00:07:51.735
We saw even one little cow saying
something involves 40 packages.

104
00:07:51.735 --> 00:07:59.075
So we're gonna have to come up with a
solution to deal with all this complexity.

105
00:07:59.075 --> 00:08:03.907
And now we've got massive projects
on both sides of the Internet.

106
00:08:03.907 --> 00:08:08.441
We have client side projects
that are absolutely huge,and we

107
00:08:08.441 --> 00:08:13.320
definitely don't want to be writing
in a single script tag in an TML

108
00:08:13.320 --> 00:08:16.823
document,if we want to
keep our wits about us.

109
00:08:16.823 --> 00:08:19.964
And we also have massive
server side node projects.

110
00:08:19.964 --> 00:08:23.600
So we have a ton of JavaScript, just so

111
00:08:23.600 --> 00:08:28.383
much JavaScript,
eating the world, as it were.

112
00:08:28.383 --> 00:08:30.411
Like if they say software
is eating the world,

113
00:08:30.411 --> 00:08:34.207
JavaScript is like eating software and the
food chain is we're gonna, I don't know,

114
00:08:34.207 --> 00:08:36.396
some zombie is gonna eat
JavaScript eventually.

115
00:08:36.396 --> 00:08:39.994
But anyway, the point being,
this has been, again,

116
00:08:39.994 --> 00:08:43.106
a gradual evolution over time.

117
00:08:43.106 --> 00:08:46.854
And at the beginning, that complexity
wasn't necessarily at the top of

118
00:08:46.854 --> 00:08:50.496
Brandon Eich's mind when he was
writing this language in 10 days.

119
00:08:50.496 --> 00:08:52.586
So some stuff evolved.

120
00:08:52.586 --> 00:08:58.826
And one of the things involved is a module
system that Node uses by default.

121
00:08:58.826 --> 00:09:01.776
And that goes back to
the historical reason that that was

122
00:09:01.776 --> 00:09:04.494
its solution before there
was any other solution.

123
00:09:04.494 --> 00:09:05.914
We'll talk about other solutions later.

124
00:09:07.014 --> 00:09:12.831
So CommonJS or
CJS is a different way of dealing with

125
00:09:12.831 --> 00:09:17.984
getting code in and
out of JavaScript files.

126
00:09:19.134 --> 00:09:21.664
And so
CommonJS has a different API for that.

127
00:09:22.666 --> 00:09:27.594
And CommonJS we have a require keyword
that is like a function that we

128
00:09:27.594 --> 00:09:32.436
call on the name of the module that
gives us an object that then we can

129
00:09:32.436 --> 00:09:35.216
like do stuff with like cowsay.say.

130
00:09:37.256 --> 00:09:41.931
And if we want to export something
like another function for

131
00:09:41.931 --> 00:09:48.768
a somebody else who's importing this code
to use we would have to do module.exports.

132
00:09:48.768 --> 00:09:52.661
And like create this object that has
all of the keys and the values and

133
00:09:52.661 --> 00:09:54.998
whatever and they could be properties.

134
00:09:54.998 --> 00:09:58.887
They could just be constant values,
they could be functions like this one.

135
00:09:58.887 --> 00:10:04.507
So now somebody could import my module and
run the whereAmi.move function or

136
00:10:04.507 --> 00:10:07.539
what have you get you
see what I did there?

137
00:10:07.539 --> 00:10:10.849
[LAUGH] And the world kept turning and

138
00:10:10.849 --> 00:10:15.263
no developers built super
complex projects and

139
00:10:15.263 --> 00:10:22.225
they used requires all over the place and
everything was more or less fine.

140
00:10:24.158 --> 00:10:28.877
But then, over the years, as we said,
the client-side stuff evolves a lot,

141
00:10:28.877 --> 00:10:29.745
right, too.

142
00:10:29.745 --> 00:10:34.166
We have super massive client-side things,
and for various reasons,

143
00:10:34.166 --> 00:10:38.379
a new solution emerges called
ECMAScript modules, or ES modules.

144
00:10:38.379 --> 00:10:43.499
Again, ECMAScript being the actual
factual name of the JavaScript language

145
00:10:43.499 --> 00:10:49.012
specification that the specified language
that is specified by the thing though,

146
00:10:49.012 --> 00:10:51.155
we call the JavaScript anyway.

147
00:10:51.155 --> 00:10:55.539
ECMAScript is the real true
nature of JavaScript and

148
00:10:55.539 --> 00:11:00.129
it came up with a whole other
way of doing module stuff.

149
00:11:01.179 --> 00:11:07.236
And this is where that import syntax
comes in that we were doing before and

150
00:11:07.236 --> 00:11:11.209
this is the more universal
solution now because

151
00:11:11.209 --> 00:11:15.896
the common.js stuff was not
supported in the browser.

152
00:11:15.896 --> 00:11:23.331
That was a node-ish thing and now we have
ESM ES modules in the browser Browser and

153
00:11:23.331 --> 00:11:30.456
Node also allows us to work with them,
but it still uses CommonJS by default.

154
00:11:32.996 --> 00:11:34.544
And from here on out,

155
00:11:34.544 --> 00:11:40.326
like essentially ESM is the way that
we are moving forward as a community.

156
00:11:40.326 --> 00:11:43.866
So we want to be doing stuff with ESM
because we don't want to be writing

157
00:11:43.866 --> 00:11:46.394
different code for
the front end and the back end.

158
00:11:46.394 --> 00:11:51.060
And we'd like to just have one
less thing to worry about please

159
00:11:51.060 --> 00:11:54.668
please Internet and so this is the way.

160
00:11:54.668 --> 00:11:58.821
ES modules so we're not from here we're
just going to put down CommonJS sure there

161
00:11:58.821 --> 00:12:02.408
is plenty more you could say about
that but this is it we're doing ESM.

162
00:12:02.408 --> 00:12:03.462
This is the way.

163
00:12:03.462 --> 00:12:04.808
Enjoy your baby yoda,

