WEBVTT

1
00:00:00.000 --> 00:00:01.322
Zooming back out.

2
00:00:01.322 --> 00:00:06.509
So all of this exploration into iteration

3
00:00:06.509 --> 00:00:11.251
has been also kind of an exploration of

4
00:00:11.251 --> 00:00:15.547
the details of the object system,

5
00:00:15.547 --> 00:00:19.861
let's say, within JavaScript.

6
00:00:19.861 --> 00:00:24.415
And what we've been doing is
assigning properties to objects and

7
00:00:24.415 --> 00:00:26.992
then passing those objects around.

8
00:00:26.992 --> 00:00:31.552
And so again, we're kind of in the domain
of object-oriented programming,

9
00:00:31.552 --> 00:00:34.797
but the question came up before and
comes up a lot is, but

10
00:00:34.797 --> 00:00:37.024
where are the classes in JavaScript?

11
00:00:37.024 --> 00:00:40.426
How do I define the blueprint for
an object.

12
00:00:40.426 --> 00:00:49.069
And that is what our next order of
business is to explore classy jazz.

13
00:00:49.069 --> 00:00:54.168
And I don't just mean in
the Tuxedo Pooh sense,

14
00:00:54.168 --> 00:00:59.396
I also mean in the sense
of the class definition,

15
00:00:59.396 --> 00:01:05.027
which we can use with our friend,
the new operator.

16
00:01:05.027 --> 00:01:10.633
Okay, so the new operator basically gives
us a new instance of a particular object.

17
00:01:10.633 --> 00:01:11.387
And again,

18
00:01:11.387 --> 00:01:15.916
type is used in the [LAUGH] loosey-goosey
JavaScript sense of the word,

19
00:01:15.916 --> 00:01:21.367
which essentially is a special keyword
that's looking for a constructor function.

20
00:01:21.367 --> 00:01:27.463
Which some languages have an init or

21
00:01:27.463 --> 00:01:31.327
other names of stuff.

22
00:01:31.327 --> 00:01:36.752
[LAUGH] And so in JavaScript,
we're calling them constructors,

23
00:01:36.752 --> 00:01:41.497
which is essentially a term
borrowed from the OOP world.

24
00:01:41.497 --> 00:01:43.924
And so in a constructor, and

25
00:01:43.924 --> 00:01:48.792
you can just define any old
function to be a constructor.

26
00:01:48.792 --> 00:01:53.589
If you use the this keyword,
which personally,

27
00:01:53.589 --> 00:01:58.504
fun fact,
my least favorite word in JavaScript.

28
00:01:58.504 --> 00:02:04.033
[LAUGH] And that's why we haven't
been talking about it too much yet,

29
00:02:04.033 --> 00:02:07.095
but here we go, we're thising it up.

30
00:02:07.095 --> 00:02:12.351
This keyword refers to
this objectish here.

31
00:02:12.351 --> 00:02:17.058
Now, what exactly that evaluates to
depends a lot on a lot of things,

32
00:02:17.058 --> 00:02:22.514
there's all these rules, Kyle Simpson
has great info on it, go listen to him.

33
00:02:22.514 --> 00:02:27.606
We're gonna be trying to keep our brains
as functioning as they possibly can and

34
00:02:27.606 --> 00:02:31.562
just talk about the practicalities
of how we can work with it.

35
00:02:31.562 --> 00:02:37.205
So when we use this.img=img,
we're essentially assigning

36
00:02:37.205 --> 00:02:42.207
whatever the value was of image
to a property on the thing

37
00:02:42.207 --> 00:02:47.437
created when you call this
function with the new keyword.

38
00:02:47.437 --> 00:02:52.850
So that if we call a new meme, but
we're passing in a regularPooh.jpg,

39
00:02:52.850 --> 00:02:56.133
and the text next to
him is using functions,

40
00:02:56.133 --> 00:03:00.870
we've got a kind of object-y function,
this capital M meme.

41
00:03:00.870 --> 00:03:05.176
And we use the capital M like with date,
and object, and so on and so forth.

42
00:03:05.176 --> 00:03:09.790
Kind of convention wise as a way to say,
this is a thing that you can construct.

43
00:03:09.790 --> 00:03:11.944
So we can do new meme.

44
00:03:11.944 --> 00:03:16.484
And then I can capture that value
in a good old variable like Pooh.

45
00:03:16.484 --> 00:03:24.073
And I'll get out the values like
pooh.image is regularPoohImg,

46
00:03:24.073 --> 00:03:28.827
or [COUGH] pooh.text is using functions.

47
00:03:28.827 --> 00:03:33.910
And if I try to access an object
that wasn't initialized,

48
00:03:33.910 --> 00:03:38.177
like fancy, I don't get it,
it's undefined.

49
00:03:38.177 --> 00:03:42.789
Like everything else
that is the complement of

50
00:03:42.789 --> 00:03:46.225
the things I have defined, okay.

51
00:03:46.225 --> 00:03:51.711
So, now, relatively recently again,
in JavaScript,

52
00:03:51.711 --> 00:03:56.855
we have a class keyword which
gives us the opportunity

53
00:03:56.855 --> 00:04:01.883
to write code that looks
more like what we're used to

54
00:04:01.883 --> 00:04:06.798
if we are coming from
a classical object-oriented

55
00:04:06.798 --> 00:04:12.542
language like Java or
a language like Python, let's say.

56
00:04:12.542 --> 00:04:16.495
So lots of different languages
have this kind of class vibe,

57
00:04:16.495 --> 00:04:18.361
little classy vibes for us.

58
00:04:18.361 --> 00:04:22.244
Okay, so this is maybe slightly different.

59
00:04:22.244 --> 00:04:26.672
As with everything in JavaScript, there's
even a few different ways that you can

60
00:04:26.672 --> 00:04:29.058
kind of structure your class definitions.

61
00:04:29.058 --> 00:04:34.240
But essentially, this gives us
a little bit more fanciness to

62
00:04:34.240 --> 00:04:39.931
how we can declare custom object kinds,
I should really be saying.

63
00:04:39.931 --> 00:04:46.723
So in this case, I've got an analogous
to my meme, I have a ClassyMeme.

64
00:04:46.723 --> 00:04:49.606
And again,
we use the convention of the capitals.

65
00:04:49.606 --> 00:04:55.986
We have class, ClassyMeme, curlies,
similar to how we would use function.

66
00:04:55.986 --> 00:04:58.066
And then we can, if we want to,

67
00:04:58.066 --> 00:05:02.162
declare some properties that
we expect this object to have.

68
00:05:02.162 --> 00:05:07.412
And we could even assign
them default values so

69
00:05:07.412 --> 00:05:13.038
that we can, Access things by default.

70
00:05:13.038 --> 00:05:13.910
For example,

71
00:05:13.910 --> 00:05:18.856
the fanciness of this object is just gonna
be assumed to be true cuz it's classy.

72
00:05:18.856 --> 00:05:22.633
It's a ClassyMeme, it's not just any old
meme, it's Pooh in a tuxedo, all right?

73
00:05:22.633 --> 00:05:28.401
So [LAUGH] we've got a constructor
function that is named constructor,

74
00:05:28.401 --> 00:05:34.662
that takes in whatever those arguments
are that we need for the new instance.

75
00:05:34.662 --> 00:05:39.369
And basically does the same thing
as our function from before.

76
00:05:39.369 --> 00:05:45.424
And we can also define other functions in
here that end up as methods on the object.

77
00:05:45.424 --> 00:05:51.861
For example, the classyPooh can ask, I beg
your pardon, do you have any Grey Poupon?

78
00:05:51.861 --> 00:05:55.342
If anybody remembers that very,
very old commercial, okay,

79
00:05:55.342 --> 00:05:58.701
[LAUGH] that ran in the US for,
I don't know, 30 years ago?

80
00:05:58.701 --> 00:06:03.862
[LAUGH] So, now instead of Pooh,
we have ooh.

81
00:06:03.862 --> 00:06:10.866
And ooh is going to be a new ClassyMeme
with fancyPooh and using classes.

82
00:06:10.866 --> 00:06:12.983
And now is ooh fancy?

83
00:06:12.983 --> 00:06:14.067
Why, yes, it is.

84
00:06:14.067 --> 00:06:19.084
Even though we didn't pass
in a Boolean value that

85
00:06:19.084 --> 00:06:25.534
got assigned to the fancy property,
in our class declaration,

86
00:06:25.534 --> 00:06:30.311
we can put this default
value at the beginning to

87
00:06:30.311 --> 00:06:34.622
make sure that if there isn't a override.

88
00:06:34.622 --> 00:06:39.439
For example, ClassyMeme that just,
for some reason, fell from grace and

89
00:06:39.439 --> 00:06:44.025
now is just not gonna be let into
the exclusive clubs into the dive bars or

90
00:06:44.025 --> 00:06:47.555
I'm hanging out,
we're gonna see each other there.

91
00:06:47.555 --> 00:06:51.496
Anyway, if we have a a override,
we can set it, but

92
00:06:51.496 --> 00:06:54.176
we can have these default values.

93
00:06:54.176 --> 00:07:00.798
And so now, I can call ooh.fancy, and
it's true, and I have this method,

94
00:07:00.798 --> 00:07:05.767
.begPardon, which doesn't
look a whole lot different

95
00:07:05.767 --> 00:07:10.755
than if we had it be an additional
property on the object.

96
00:07:10.755 --> 00:07:15.887
But essentially,
it's just a new syntactic way

97
00:07:15.887 --> 00:07:21.655
that we can make these fancy,
constructible object.

