WEBVTT

1
00:00:00.000 --> 00:00:04.785
So we also had some questions
before about inheritance,

2
00:00:04.785 --> 00:00:09.269
I think, and
you can inherit from another class using

3
00:00:09.269 --> 00:00:13.273
the extends keyword in
the class declaration.

4
00:00:13.273 --> 00:00:19.925
So, for example, I can make a special
version of a meme which is a GifMeme,

5
00:00:19.925 --> 00:00:25.525
obviously superior to a non-animated,
non-disturbing for

6
00:00:25.525 --> 00:00:29.768
folks with motion sensitivity image,
right?

7
00:00:29.768 --> 00:00:32.896
No, we can't have that we need
flashing lights at all times.

8
00:00:32.896 --> 00:00:38.234
[LAUGH] And
what we need to do if we want to extend

9
00:00:38.234 --> 00:00:43.571
a class is call,
in our constructor method,

10
00:00:43.571 --> 00:00:48.634
call the constructor of the parent class.

11
00:00:48.634 --> 00:00:54.021
So in this case,
within the GifMeme constructor,

12
00:00:54.021 --> 00:00:58.782
on the last line of that
constructor function

13
00:00:58.782 --> 00:01:03.560
we are calling this
special function super.

14
00:01:03.560 --> 00:01:07.928
Which has its own
specialness in JavaScript,

15
00:01:07.928 --> 00:01:13.196
that calls the constructor
method on the parent class.

16
00:01:13.196 --> 00:01:16.470
And we have to do that if
we're extending a class.

17
00:01:16.470 --> 00:01:20.273
We have to do that before
we get access to this.

18
00:01:20.273 --> 00:01:25.243
So if we're extending classes,
we have to first of all call that super.

19
00:01:25.243 --> 00:01:28.205
Okay, but Anjana you said you
have to first call the super so

20
00:01:28.205 --> 00:01:29.993
why is there code before the super?

21
00:01:29.993 --> 00:01:34.611
Well, because we can do things in
an extended class like we can,

22
00:01:34.611 --> 00:01:36.663
for example, in this case,

23
00:01:36.663 --> 00:01:41.639
make sure that you are passing in
a correct Gif file for this new meme.

24
00:01:41.639 --> 00:01:48.581
And if not, refuse to instantiate
the object, and then call super.

25
00:01:48.581 --> 00:01:53.926
And then we can go on after this line
that calls super, we can access this,

26
00:01:53.926 --> 00:02:00.244
do whatever, set up new properties, have
whatever fanciness we need in our GifMeme.

27
00:02:00.244 --> 00:02:08.386
So, for example, if I try to instantiate
a GifMeme with pooh.jpg, can't do it.

28
00:02:08.386 --> 00:02:09.766
That's a failed pooh [LAUGH].

29
00:02:09.766 --> 00:02:14.114
And so, if we have a GifMeme with a .gif,

30
00:02:14.114 --> 00:02:17.856
okay, it passes that first check.

31
00:02:17.856 --> 00:02:22.722
And it gets to the parent constructor
which remember had that little whisper

32
00:02:22.722 --> 00:02:25.089
with the secret images console log.

33
00:02:25.089 --> 00:02:29.785
And so that's being called we can
see that because we didn't write any

34
00:02:29.785 --> 00:02:33.059
console login code in
our GifMeme constructor.

35
00:02:33.059 --> 00:02:39.508
So we've got now a way to access any
of the properties on the parent class,

36
00:02:39.508 --> 00:02:44.615
any of the methods and whatnot,
unless we override them.

37
00:02:44.615 --> 00:02:50.717
In which case we'll get the more
specific version from the GifMeme class.

38
00:02:50.717 --> 00:02:54.788
If I wanted to make a new
secret image getter or

39
00:02:54.788 --> 00:03:00.482
something that let's say makes
sure that if you set the image.

40
00:03:00.482 --> 00:03:05.332
You're Setting the right, sorry, you're
setting the right type of file that you

41
00:03:05.332 --> 00:03:08.395
can't just set the image to a .jpeg,
for example.

42
00:03:08.395 --> 00:03:09.010
Yeah.

43
00:03:09.010 --> 00:03:12.539
&gt;&gt; Do you need to
override the constructor?

44
00:03:12.539 --> 00:03:14.782
&gt;&gt; Do you need to
override the constructor?

45
00:03:14.782 --> 00:03:18.911
&gt;&gt; If you don't make one,
will it just use the super constructor?

46
00:03:18.911 --> 00:03:21.802
&gt;&gt; If you don't, let's find out.

47
00:03:21.802 --> 00:03:23.372
I think I understand what you're asking.

48
00:03:23.372 --> 00:03:24.814
Okay, let's see.

49
00:03:24.814 --> 00:03:28.017
When in doubt, sorry
&gt;&gt; My understanding is you always have to

50
00:03:28.017 --> 00:03:29.402
call super in a constructor.

51
00:03:29.402 --> 00:03:32.617
&gt;&gt; I think it's not gonna be happy but
there's only one way to find out and

52
00:03:32.617 --> 00:03:35.303
that's to make JavaScript do
stuff it doesn't wanna do.

53
00:03:35.303 --> 00:03:36.548
So let's find out, okay?

54
00:03:36.548 --> 00:03:39.762
So if I do a class GifMeme extends meme.

55
00:03:39.762 --> 00:03:41.330
Well, I don't have a meme, okay?

56
00:03:41.330 --> 00:03:46.518
[LAUGH] Class meme we're
just gonna this is

57
00:03:46.518 --> 00:03:52.308
just gonna be a very
simple this.meme is yes.

58
00:03:52.308 --> 00:03:54.747
Okay, oops, what did I do?

59
00:03:54.747 --> 00:03:57.198
I called that that's not how it works.

60
00:03:57.198 --> 00:04:01.800
I always do this for some reason I'm to
use two functions as you can tell I'm not

61
00:04:01.800 --> 00:04:03.910
a big class-er, I'm not classy.

62
00:04:03.910 --> 00:04:06.397
Okay, so we don't need those parens.

63
00:04:06.397 --> 00:04:11.161
Okay, great.
So now I can do, let's just

64
00:04:11.161 --> 00:04:16.363
make sure, I can make a new meme.

65
00:04:16.363 --> 00:04:18.170
Okay, m.meme.

66
00:04:18.170 --> 00:04:19.319
Yes, okay great.

67
00:04:19.319 --> 00:04:23.358
[LAUGH] Such a useful object we have okay.

68
00:04:23.358 --> 00:04:30.227
Now if we try to do a class
GifMeme extends Meme.

69
00:04:30.227 --> 00:04:35.367
And so if I understand correctly you're
saying just like with nothing happening.

70
00:04:35.367 --> 00:04:41.123
Interesting, okay, now let's try

71
00:04:41.123 --> 00:04:49.496
a GifMeme All right,

72
00:04:49.496 --> 00:04:53.983
well, JavaScript doesn't care so
that's a little surprising.

73
00:04:53.983 --> 00:04:58.831
And again, I find a lot of stuff about
the way this object orientation works in

74
00:04:58.831 --> 00:05:01.156
JavaScript sometimes surprising.

75
00:05:01.156 --> 00:05:06.643
Well, it's hard to know what magic
JavaScript is gonna do under the hood,

76
00:05:06.643 --> 00:05:11.696
where it's going to be strict about stuff,
like no hash property for

77
00:05:11.696 --> 00:05:15.023
you or
where it's just gonna be like, okay.

78
00:05:15.023 --> 00:05:20.432
You wanna empty a completely
identical object to the parent?

79
00:05:20.432 --> 00:05:22.771
Sure, knock yourself out.

80
00:05:22.771 --> 00:05:27.980
I think what this is
tantamount to is essentially

81
00:05:27.980 --> 00:05:32.691
assigning an alias to
the name of the class.

82
00:05:32.691 --> 00:05:35.823
So perhaps that might be useful if for
example,

83
00:05:35.823 --> 00:05:40.926
you're trying to support an older name for
the class or something like that.

84
00:05:40.926 --> 00:05:44.102
But you don't want to have to maintain
two separate ones or anything like that.

85
00:05:44.102 --> 00:05:46.512
So today we learned.

86
00:05:46.512 --> 00:05:49.722
Amazing question, sorry
&gt;&gt; Yeah what if you wanted to

87
00:05:49.722 --> 00:05:52.292
just like override one of the methods?

88
00:05:52.292 --> 00:05:53.411
&gt;&gt; What if you wanted to override?

89
00:05:53.411 --> 00:05:58.722
&gt;&gt; Would that be a use case for extending
this without redoing your constructor?

90
00:05:58.722 --> 00:06:05.840
Let's say you want on your GifMeme you
want to actually override what the image

91
00:06:05.840 --> 00:06:11.018
&gt;&gt; Right, so for example, we could do

92
00:06:11.018 --> 00:06:17.059
like a class PngMeme that extends Meme and

93
00:06:17.059 --> 00:06:21.545
maybe has a like a method that,

94
00:06:21.545 --> 00:06:25.014
okay, let's go back.

95
00:06:25.014 --> 00:06:27.625
What did it mean, sorry.

96
00:06:27.625 --> 00:06:29.761
&gt;&gt; Like the .yell
&gt;&gt; Yeah, yell okay.

97
00:06:29.761 --> 00:06:34.426
Right, exactly so let's say we have

98
00:06:34.426 --> 00:06:39.247
a new yell method that, whoa, okay.

99
00:06:39.247 --> 00:06:43.554
That gives us

100
00:06:43.554 --> 00:06:50.200
a Very helpful yell, okay.

101
00:06:50.200 --> 00:06:53.057
[LAUGH] All right let's
see what we get here.

102
00:06:53.057 --> 00:06:57.859
So now if I do a new

103
00:06:57.859 --> 00:07:04.384
PngMeme with no data,

104
00:07:07.584 --> 00:07:10.614
It has worked so what have you learnt?

105
00:07:10.614 --> 00:07:11.322
&gt;&gt; No.
&gt;&gt; [LAUGH]

106
00:07:11.322 --> 00:07:13.132
&gt;&gt; Just out of curiosity,

107
00:07:13.132 --> 00:07:16.941
if you do a pm.meme,
you should get yes, right?

108
00:07:16.941 --> 00:07:22.563
Okay, can you scroll back to where
you defined the mean classic?

109
00:07:22.563 --> 00:07:24.212
Again just let me look at that again.

110
00:07:24.212 --> 00:07:24.821
&gt;&gt; Mm-hmm.

111
00:07:24.821 --> 00:07:27.739
&gt;&gt; So just .meme, I got it all right.

112
00:07:27.739 --> 00:07:31.766
&gt;&gt; Yeah and so this is where
&gt;&gt; So meme is yeah, right.

113
00:07:31.766 --> 00:07:35.477
That's a attribute as opposed to
&gt;&gt; Right.

114
00:07:35.477 --> 00:07:40.727
&gt;&gt; Object or a method.

115
00:07:40.727 --> 00:07:45.246
&gt;&gt; Yes, so
essentially everything's a property.

116
00:07:45.246 --> 00:07:50.224
We got the JavaScript world where
basically JavaScript only sees,

117
00:07:50.224 --> 00:07:56.074
it's like it has object colored glasses
on that sees everything as an object and

118
00:07:56.074 --> 00:07:58.886
it sees every dot value as a property.

119
00:07:58.886 --> 00:08:03.054
If the value of that property is
a function then we call it a method.

120
00:08:03.054 --> 00:08:07.014
But that's,
about the end of the difference.

121
00:08:07.014 --> 00:08:12.582
And so when we are, when we have public
properties and methods like .meme,

122
00:08:12.582 --> 00:08:16.932
.yell like I said before we
don't have to like declare them

123
00:08:16.932 --> 00:08:21.643
right here before the constructor but
those private ones we do.

124
00:08:21.643 --> 00:08:23.443
Was there another question?.

125
00:08:23.443 --> 00:08:24.644
Okay.

126
00:08:24.644 --> 00:08:27.509
So yes so okay, what are we learning?

127
00:08:27.509 --> 00:08:32.787
We are learning again that there
are now these like facilities,

128
00:08:32.787 --> 00:08:36.696
these these keywords class, extend, super,

129
00:08:36.696 --> 00:08:42.963
etc that help us do this kind of object
oriented programming in JavaScript.

130
00:08:42.963 --> 00:08:47.180
And also we should keep in mind
that these are built on top

131
00:08:47.180 --> 00:08:51.054
of the underlying prototypal
inheritance model.

132
00:08:51.054 --> 00:08:52.893
That has not gone away.

133
00:08:52.893 --> 00:08:56.977
And there's a lot more
to say about classes,

134
00:08:56.977 --> 00:09:00.853
which again, MDN
&gt;&gt; Is our friend.

135
00:09:00.853 --> 00:09:02.127
&gt;&gt; Yay, okay yes.

136
00:09:02.127 --> 00:09:07.996
MDN is our friend [LAUGH] just
making sure everybody's awake.

137
00:09:07.996 --> 00:09:12.823
The things that you can
kind of mess with with

138
00:09:12.823 --> 00:09:17.665
classes are hopefully kind of limited now.

139
00:09:17.665 --> 00:09:19.771
They did think long and
hard about how to do this and

140
00:09:19.771 --> 00:09:21.233
how to implement stuff like that.

141
00:09:21.233 --> 00:09:25.289
Private methods and
private properties and things so

142
00:09:25.289 --> 00:09:28.815
there is a little bit more,
what's the word?

143
00:09:28.815 --> 00:09:33.545
Rigidity than our usual JavaScript
functions, for example.

144
00:09:33.545 --> 00:09:38.186
But that said, sometimes you might
find discrepancies if you're used to,

145
00:09:38.186 --> 00:09:42.476
again, these constructs and
these concepts from another language.

146
00:09:42.476 --> 00:09:46.361
So again, just keep in mind under the
hood, it's all objects with prototypes.

147
00:09:46.361 --> 00:09:50.254
And it's functions creating
objects with prototypes and

148
00:09:50.254 --> 00:09:52.168
setting that all up for you.

149
00:09:52.168 --> 00:09:57.417
And that's essentially,
this is essentially a nice kind of,

150
00:09:57.417 --> 00:10:01.982
hopefully more dev friendly
interface on top of that.

