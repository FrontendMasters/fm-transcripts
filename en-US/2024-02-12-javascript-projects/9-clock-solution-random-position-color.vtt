WEBVTT

1
00:00:00.000 --> 00:00:02.990
&gt;&gt; Speaker 1: Now is the fun
part of making it look for

2
00:00:02.990 --> 00:00:06.455
some definition of pretty, pretty [LAUGH].

3
00:00:06.455 --> 00:00:12.065
&gt;&gt; Speaker 2: So, there's lots of ways
we could style this, but same as HTML,

4
00:00:12.065 --> 00:00:17.369
we have the power within our
JavaScript to change the styles of

5
00:00:17.369 --> 00:00:22.979
elements that will be interpreted
by the browser's CSS engine,

6
00:00:22.979 --> 00:00:28.193
which is a whole other ball of wax,
to make things look nice.

7
00:00:28.193 --> 00:00:29.282
&gt;&gt; Speaker 1: So what did folks do?

8
00:00:29.282 --> 00:00:32.453
&gt;&gt; Speaker 2: How did we style this?

9
00:00:32.453 --> 00:00:36.023
&gt;&gt; Speaker 1: And this is now starting
to be the open-ended question of taste.

10
00:00:36.023 --> 00:00:43.264
&gt;&gt; Speaker 2: But one thing we said is,
it would be nice to move it around, right?

11
00:00:43.264 --> 00:00:47.685
&gt;&gt; Speaker 1: So there's a few
different ways we could do this,

12
00:00:47.685 --> 00:00:52.634
but since these are,
if we check the little in page style

13
00:00:52.634 --> 00:00:56.439
tags here in this little mini stylesheet.

14
00:00:56.439 --> 00:01:03.824
&gt;&gt; Speaker 2: These are positioned
relatively, which means we can choose and

15
00:01:03.824 --> 00:01:09.981
specify exactly where within
their parent element,

16
00:01:09.981 --> 00:01:14.371
this p element is going to get placed.

17
00:01:14.371 --> 00:01:19.246
&gt;&gt; Speaker 1: That can be done with top,
for

18
00:01:19.246 --> 00:01:25.293
example, if I did top 100px and,

19
00:01:25.293 --> 00:01:30.168
I don't know, left 50px,

20
00:01:30.168 --> 00:01:33.887
I could do that in CSS.

21
00:01:33.887 --> 00:01:35.445
&gt;&gt; Speaker 2: And this is, again,

22
00:01:35.445 --> 00:01:40.651
not a CSS course by any stretch of
the imagination, but we see it moved.

23
00:01:40.651 --> 00:01:45.719
&gt;&gt; Speaker 1: So if I don't necessarily
set those in my CSS right here,

24
00:01:45.719 --> 00:01:50.470
but if I set them through JavaScript and
change it up,

25
00:01:50.470 --> 00:01:57.138
I can get a very impressive to a 90s
child animated [LAUGH] animated clock.

26
00:01:57.138 --> 00:02:02.478
&gt;&gt; Speaker 2: So let us figure out
how we can get randomness involved,

27
00:02:02.478 --> 00:02:08.612
so that we can, instead of just
having topOffset = 100px and

28
00:02:08.612 --> 00:02:13.723
leftOffset is, what did I say,
50px or whatever,

29
00:02:13.723 --> 00:02:20.556
we don't want these to be hardcoded
values, we want them to be random.

30
00:02:20.556 --> 00:02:25.277
&gt;&gt; Speaker 1: So, how did people do this?

31
00:02:25.277 --> 00:02:26.940
&gt;&gt; Speaker 2: Yeah,
anybody wanna share their solution?

32
00:02:26.940 --> 00:02:27.689
&gt;&gt; Speaker 1: Yeah, go ahead.

33
00:02:27.689 --> 00:02:32.179
&gt;&gt; Speaker 2: Math.random [LAUGH]
&gt;&gt; Speaker 1: Math.random is gonna be our

34
00:02:32.179 --> 00:02:32.980
friend here.

35
00:02:32.980 --> 00:02:35.677
&gt;&gt; Speaker 2: For sure, but
we still have a couple more steps to go.

36
00:02:35.677 --> 00:02:40.339
&gt;&gt; Speaker 1: So if I call, if I get a new

37
00:02:40.339 --> 00:02:45.445
value from Math.random.

38
00:02:45.445 --> 00:02:49.262
&gt;&gt; Speaker 2: This is gonna be a random
number, as we said, between 0 and 1,

39
00:02:49.262 --> 00:02:49.775
right?

40
00:02:49.775 --> 00:02:54.570
&gt;&gt; Speaker 1: Now if I were to,
let's say, have the topOffset now,

41
00:02:54.570 --> 00:02:58.748
I'm moving it around in VS Code,
but whatevs.

42
00:02:58.748 --> 00:03:05.904
&gt;&gt; Speaker 2: If I were to have
this be a random number plus px and

43
00:03:05.904 --> 00:03:10.102
then, where are we, okay?

44
00:03:10.102 --> 00:03:16.752
&gt;&gt; Speaker 1: And then on my text,
we could set an attribute,

45
00:03:16.752 --> 00:03:20.908
let's say, of top, sorry,

46
00:03:20.908 --> 00:03:25.897
style, to a little mini stylesheet

47
00:03:25.897 --> 00:03:31.019
where we have,
&gt;&gt; Speaker 2: Let's say, okay,

48
00:03:31.019 --> 00:03:36.619
we have the first part of the CSS rule,
top, and then we have a,

49
00:03:36.619 --> 00:03:41.924
okay, all right, thank you VS Code,
you're so helpful.

50
00:03:41.924 --> 00:03:44.660
&gt;&gt; Speaker 1: Top offset.

51
00:03:46.107 --> 00:03:51.117
&gt;&gt; Speaker 2: Then we might get something
interesting, let's see what happens.

52
00:03:53.215 --> 00:03:56.214
&gt;&gt; Speaker 1: It looks exactly the same.

53
00:03:56.214 --> 00:03:58.889
&gt;&gt; Speaker 2: Any guess why this is?

54
00:03:58.889 --> 00:04:04.020
&gt;&gt; Speaker 1: Because the random
number is a portion of a single pixel.

55
00:04:04.020 --> 00:04:04.870
&gt;&gt; Speaker 2: Exactly.

56
00:04:04.870 --> 00:04:06.579
&gt;&gt; Speaker 1: You need to
scale it to the window size.

57
00:04:06.579 --> 00:04:07.698
&gt;&gt; Speaker 2: Exactly, so

58
00:04:07.698 --> 00:04:12.795
we're essentially moving this
like a negligible amount.

59
00:04:12.795 --> 00:04:16.495
&gt;&gt; Speaker 1: So we wanna scale
up that value, as you said, and

60
00:04:16.495 --> 00:04:19.305
we can use various values to do that.

61
00:04:19.305 --> 00:04:22.088
&gt;&gt; Speaker 2: But
one thing that might simplify our lives.

62
00:04:22.088 --> 00:04:24.728
&gt;&gt; Speaker 1: We have access
to the whole browser, so

63
00:04:24.728 --> 00:04:28.653
we know all kinds of stuff about
the window, how big it is.

64
00:04:28.653 --> 00:04:31.695
&gt;&gt; Speaker 2: We're getting to
a world where we can even get more

65
00:04:31.695 --> 00:04:36.197
detailed information about, layout,
as it's happening, whatever.

66
00:04:36.197 --> 00:04:42.289
&gt;&gt; Speaker 1: But we could also use
the percentage convenience of CSS and

67
00:04:42.289 --> 00:04:46.025
make our lives a little bit easier.

68
00:04:46.025 --> 00:04:49.641
&gt;&gt; Speaker 2: So
if I add a percentage and maybe multiply,

69
00:04:49.641 --> 00:04:54.136
why don't I get my random number times,
okay, well,

70
00:04:54.136 --> 00:04:58.174
this math equation is not gonna work out,
okay.

71
00:04:58.174 --> 00:05:03.128
&gt;&gt; Speaker 1: So if I multiply my random
number times 100, now I will have

72
00:05:03.128 --> 00:05:09.341
something between 0 and 100 instead
of 0 and 1, and I can add a percent.

73
00:05:09.341 --> 00:05:13.900
&gt;&gt; Speaker 2: Let's see if
that made any difference?

74
00:05:13.900 --> 00:05:17.020
&gt;&gt; Speaker 1: Well, no.

75
00:05:17.020 --> 00:05:18.209
&gt;&gt; Speaker 2: What happened?

76
00:05:18.209 --> 00:05:21.680
&gt;&gt; Speaker 1: Can you see in the inspector
what it's setting [CROSSTALK]

77
00:05:21.680 --> 00:05:22.599
&gt;&gt; Speaker 2: We sure can, and

78
00:05:22.599 --> 00:05:24.967
that's exactly what we're gonna do, and

79
00:05:24.967 --> 00:05:28.267
it's entirely possible that
something silly is going on.

80
00:05:28.267 --> 00:05:33.353
&gt;&gt; Speaker 1: All right, yeah, okay.

81
00:05:33.353 --> 00:05:33.943
&gt;&gt; Speaker 2: What happened?

82
00:05:33.943 --> 00:05:36.829
&gt;&gt; Speaker 1: Why is this staying put?

83
00:05:36.829 --> 00:05:42.335
&gt;&gt; Speaker 2: This was an intentional
mistake because we're learning things.

84
00:05:42.335 --> 00:05:44.484
&gt;&gt; Speaker 1: Is it cuz
it's never changing?

85
00:05:44.484 --> 00:05:46.925
&gt;&gt; Speaker 2: Did you set it
outside of the setInterval?

86
00:05:46.925 --> 00:05:48.546
&gt;&gt; Speaker 1: So
this is interesting, right?

87
00:05:48.546 --> 00:05:53.941
&gt;&gt; Speaker 2: I'm giving it this random
value every time, and we see something's

88
00:05:53.941 --> 00:05:59.065
happening every three seconds,
the time is actually changing.

89
00:05:59.065 --> 00:06:00.704
&gt;&gt; Speaker 1: Does it
change if you reload?

90
00:06:00.704 --> 00:06:01.283
&gt;&gt; Speaker 2: Go back to your code.

91
00:06:01.283 --> 00:06:02.622
&gt;&gt; Speaker 1: Does it change if I reload?

92
00:06:02.622 --> 00:06:03.683
&gt;&gt; Speaker 2: Let's find out.

93
00:06:06.676 --> 00:06:11.593
&gt;&gt; Speaker 1: Well,
it's a little hard to tell, but

94
00:06:11.593 --> 00:06:16.361
what's happening is we chose a random

95
00:06:16.361 --> 00:06:20.390
number once and for all, yeah?

96
00:06:20.390 --> 00:06:23.434
&gt;&gt; Speaker 2: You've got const for
your offset.

97
00:06:23.434 --> 00:06:25.367
&gt;&gt; Speaker 1: We are using a const,

98
00:06:25.367 --> 00:06:29.861
and that,
&gt;&gt; Speaker 2: Adds a little layer

99
00:06:29.861 --> 00:06:33.318
of complication, so
we can talk about that later.

100
00:06:33.318 --> 00:06:38.637
&gt;&gt; Speaker 1: But most importantly,
the call to Math.random is not happening

101
00:06:38.637 --> 00:06:43.964
within the callback function that
I'm passing to the interval.

102
00:06:43.964 --> 00:06:48.680
&gt;&gt; Speaker 2: So that means this call
to Math.random only runs once when

103
00:06:48.680 --> 00:06:51.191
I'm defining this variable.

104
00:06:51.191 --> 00:06:54.687
&gt;&gt; Speaker 1: And
then every three seconds,

105
00:06:54.687 --> 00:06:58.727
I keep setting it to the same value.

106
00:06:58.727 --> 00:07:01.402
&gt;&gt; Speaker 2: Even though, for example,

107
00:07:01.402 --> 00:07:06.529
the date is changing because
we notice the date is being

108
00:07:06.529 --> 00:07:11.891
newly reborn every time this
updateTime function runs.

109
00:07:11.891 --> 00:07:16.071
&gt;&gt; Speaker 1: And the setInterval here
schedules this updateTime function to run

110
00:07:16.071 --> 00:07:17.472
every three seconds.

111
00:07:17.472 --> 00:07:22.488
&gt;&gt; Speaker 2: It does not schedule this
entire script to run every three seconds.

112
00:07:22.488 --> 00:07:27.312
&gt;&gt; Speaker 1: It does not schedule
JavaScript to time travel back

113
00:07:27.312 --> 00:07:32.257
3,000 milliseconds ago to find out and
rerun.

114
00:07:32.257 --> 00:07:35.737
&gt;&gt; Speaker 2: No,
it only knows what we have in here.

115
00:07:35.737 --> 00:07:38.621
&gt;&gt; Speaker 1: And this is getting
at something very interesting,

116
00:07:38.621 --> 00:07:43.340
which we're gonna talk about a bit later,
related to how scope works in JavaScript,

117
00:07:43.340 --> 00:07:46.112
so we'll have a little
refresher on scope there.

118
00:07:46.112 --> 00:07:54.063
&gt;&gt; Speaker 2: But for now,
if I were to take this calculation here,

119
00:07:54.063 --> 00:08:00.261
and move it in to
the body of the function.

120
00:08:00.261 --> 00:08:01.147
&gt;&gt; Speaker 1: That I want to call.

121
00:08:01.147 --> 00:08:04.177
&gt;&gt; Speaker 2: We might have a little
bit better of an experience,

122
00:08:04.177 --> 00:08:06.830
it moved a tiny bit, but it still moved.

123
00:08:06.830 --> 00:08:10.328
&gt;&gt; Speaker 1: Okay, now, it's moving
around, and sometimes it's moving up and

124
00:08:10.328 --> 00:08:13.280
sometimes it's moving down,
but this feels better.

125
00:08:13.280 --> 00:08:15.713
&gt;&gt; Speaker 2: This is more in
the direction of what we wanted, but

126
00:08:15.713 --> 00:08:18.160
it's still always on this
left side of the screen.

127
00:08:18.160 --> 00:08:24.625
&gt;&gt; Speaker 1: So what I could do is we
could even get a, we could change this.

128
00:08:24.625 --> 00:08:28.251
&gt;&gt; Speaker 2: So let's say I'm
gonna just get the top offset by

129
00:08:28.251 --> 00:08:32.237
calling math.random and
multiplying it by 100.

130
00:08:32.237 --> 00:08:36.883
&gt;&gt; Speaker 1: And then I could
get a left offset by making a new

131
00:08:36.883 --> 00:08:39.514
call to math.random.

132
00:08:39.514 --> 00:08:42.602
&gt;&gt; Speaker 2: Because if I use
that same math.random value,

133
00:08:42.602 --> 00:08:46.084
it's just gonna be always on the diagonal,
I guess.

134
00:08:46.084 --> 00:08:51.220
&gt;&gt; Speaker 1: So if I now, what else
can kind of make our life easier here

135
00:08:51.220 --> 00:08:58.864
is a fancier way of doing this little
plus operation of concatenating strings.

136
00:08:58.864 --> 00:09:02.468
&gt;&gt; Speaker 2: What if I had a way to just
write the string once, and then fill in

137
00:09:02.468 --> 00:09:06.766
the values I needed, that would be a,
anybody know what they're called?

138
00:09:06.766 --> 00:09:08.152
&gt;&gt; Speaker 1: A string template literal.

139
00:09:08.152 --> 00:09:10.606
&gt;&gt; Speaker 2: A string template
literal in JavaScript, exactly,

140
00:09:10.606 --> 00:09:13.872
which I can make with my good friend,
the backtick.

141
00:09:13.872 --> 00:09:19.468
&gt;&gt; Speaker 1: So, in general,
what I want CSS to see is something

142
00:09:19.468 --> 00:09:25.340
like top blah blah percent,
left blah blah percent.

143
00:09:25.340 --> 00:09:30.854
&gt;&gt; Speaker 2: And I can tell JavaScript
to inject or interpolate the values

144
00:09:30.854 --> 00:09:36.269
of these blah blahs by using
a dollar sign and curly braces.

145
00:09:36.269 --> 00:09:39.221
&gt;&gt; Speaker 1: Which is saying,
okay, leave the string land and

146
00:09:39.221 --> 00:09:43.318
reenter JavaScript land and
evaluates what's between the braces.

147
00:09:43.318 --> 00:09:50.304
&gt;&gt; Speaker 2: So this is all a little
bit of review here if some syntax, so

148
00:09:50.304 --> 00:09:56.734
I can do topOffset% and
similarly, leftOffset%.

149
00:09:58.773 --> 00:10:03.680
&gt;&gt; Speaker 1: The other thing I could do
is event just put this whole operation in

150
00:10:03.680 --> 00:10:09.174
here since I'm not really using
this offset value anywhere else.

151
00:10:09.174 --> 00:10:13.973
&gt;&gt; Speaker 2: So ideally this should work
pretty much the same as it did before,

152
00:10:13.973 --> 00:10:17.694
and now it is moving in both dimensions.

153
00:10:17.694 --> 00:10:18.194
&gt;&gt; Speaker 1: Huzzah!

154
00:10:19.574 --> 00:10:24.595
&gt;&gt; Speaker 2: And so we can do something
similar with color values, for

155
00:10:24.595 --> 00:10:31.585
example, to add a little pizzazz,
and for that, I would recommend.

156
00:10:31.585 --> 00:10:36.165
&gt;&gt; Speaker 1: Well, did folks manage
to change the color of it, yeah, okay.

157
00:10:36.165 --> 00:10:37.175
&gt;&gt; Speaker 2: What did you use?

158
00:10:37.175 --> 00:10:40.223
&gt;&gt; Speaker 1: Well,
to be perfectly transparent,

159
00:10:40.223 --> 00:10:42.906
copilot told me to do this [LAUGH].

160
00:10:42.906 --> 00:10:48.890
&gt;&gt; Speaker 2: Okay, so
Github's copilot, AKA the AI developer

161
00:10:48.890 --> 00:10:55.166
that makes us all feel things
about ourselves [LAUGH].

162
00:10:55.166 --> 00:10:58.483
&gt;&gt; Speaker 1: You certainly have to,
you certainly need to check it.

163
00:10:58.483 --> 00:11:00.302
&gt;&gt; Speaker 2: Exactly, so yes, so copilot.

164
00:11:00.302 --> 00:11:01.138
&gt;&gt; Speaker 1: Still got to
know what you're doing.

165
00:11:01.138 --> 00:11:04.556
&gt;&gt; Speaker 2: Copilot can be very useful,
but it, for example,

166
00:11:04.556 --> 00:11:06.775
does not know JavaScript.

167
00:11:06.775 --> 00:11:11.515
&gt;&gt; Speaker 1: It knows the internet, and
the internet kinda knows JavaScript, but

168
00:11:11.515 --> 00:11:15.305
it also has been knowing JavaScript for
many years now.

169
00:11:15.305 --> 00:11:17.206
&gt;&gt; Speaker 2: And
JavaScript has changed a lot, and

170
00:11:17.206 --> 00:11:20.535
all kinds of blog posts are just
plain wrong, so word of warning.

171
00:11:20.535 --> 00:11:22.793
&gt;&gt; Speaker 1: All right,
what did we learn from Copilot?

172
00:11:22.793 --> 00:11:24.019
&gt;&gt; Speaker 2: What myself and

173
00:11:24.019 --> 00:11:29.123
Copilot came up with was
randomizing RGB between 0 and 255.

174
00:11:29.123 --> 00:11:30.493
&gt;&gt; Speaker 1: Okay, great.

175
00:11:30.493 --> 00:11:35.288
&gt;&gt; Speaker 2: So, in CSS,
I could do something

176
00:11:35.288 --> 00:11:39.912
like color RGB, I don't know,

177
00:11:39.912 --> 00:11:46.212
100 and get a beautiful muddy color.

178
00:11:46.212 --> 00:11:50.192
&gt;&gt; Speaker 1: That's not gonna help,
let's do 255.

179
00:11:50.192 --> 00:11:54.434
&gt;&gt; Speaker 2: Okay, now I got a bright
green, because this is the red, green,

180
00:11:54.434 --> 00:11:57.692
blue side, up to the green,
we got a fancy thing.

181
00:11:57.692 --> 00:12:02.492
&gt;&gt; Speaker 1: So, same logic as before,

182
00:12:02.492 --> 00:12:07.502
we can scale our random value

183
00:12:07.502 --> 00:12:12.943
to a value in the domain of RGB.

184
00:12:14.333 --> 00:12:19.601
&gt;&gt; Speaker 2: So for example,
I could do R is like

185
00:12:19.601 --> 00:12:24.328
math.random times 255 and

186
00:12:24.328 --> 00:12:28.704
so on and so forth for g and b.

187
00:12:34.104 --> 00:12:39.808
&gt;&gt; Speaker 1: And then I can add into
my handy dandy little template here,

188
00:12:39.808 --> 00:12:40.957
color rgb.

189
00:12:43.426 --> 00:12:48.127
&gt;&gt; Speaker 2: And
then do my r, my g, and my b,

190
00:12:48.127 --> 00:12:52.499
now let's see what happens.

191
00:12:52.499 --> 00:12:57.860
&gt;&gt; Speaker 1: Well, all right, we allowed
the thing to be positioned all the way

192
00:12:57.860 --> 00:13:02.953
near 100%, so
that's why it's sticking over the sides.

193
00:13:02.953 --> 00:13:07.646
&gt;&gt; Speaker 2: But we are indeed getting
different colors now, so that's exciting.

194
00:13:07.646 --> 00:13:11.562
&gt;&gt; Speaker 1: Another thing that
could make our life easier and

195
00:13:11.562 --> 00:13:15.777
make math.random have to
do a little bit less work.

196
00:13:15.777 --> 00:13:18.627
&gt;&gt; Speaker 2: Is there's also
a color space function HSL,

197
00:13:18.627 --> 00:13:20.960
have folks worked with this before.

198
00:13:22.491 --> 00:13:30.171
&gt;&gt; Speaker 1: So, HSL stands for Hue
Saturation Luminance, let's double check.

199
00:13:30.171 --> 00:13:35.059
&gt;&gt; Speaker 2: All right,
so, if I type in HSL

200
00:13:35.059 --> 00:13:40.136
into our friend MDN, we see that

201
00:13:40.136 --> 00:13:45.225
in CSS world, HLSL takes a hue.

202
00:13:45.225 --> 00:13:50.078
&gt;&gt; Speaker 1: A saturation and a lightness
instead of analogous to the R, the G,

203
00:13:50.078 --> 00:13:53.124
and the B that RGB takes red, green blue.

204
00:13:53.124 --> 00:13:57.850
&gt;&gt; Speaker 2: And so this is a little bit
strange to wrap your head around at first.

205
00:13:57.850 --> 00:14:01.952
&gt;&gt; Speaker 1: But what it means is that
instead of with RGB all of the values

206
00:14:01.952 --> 00:14:06.069
affect what the color is gonna
be all of the different ways.

207
00:14:06.069 --> 00:14:08.898
&gt;&gt; Speaker 2: And it's hard to kind of
predict what a combination of those three

208
00:14:08.898 --> 00:14:09.934
at least if you're me.

209
00:14:09.934 --> 00:14:13.123
&gt;&gt; Speaker 1: It's hard to predict what
a combination of those three is gonna

210
00:14:13.123 --> 00:14:13.730
look like.

211
00:14:13.730 --> 00:14:18.518
&gt;&gt; Speaker 2: So HSL is a fun
thing where basically saturation,

212
00:14:18.518 --> 00:14:23.420
the second value is very
much similar to saturation

213
00:14:23.420 --> 00:14:27.402
like on your TV settings or whatever.

214
00:14:27.402 --> 00:14:32.093
&gt;&gt; Speaker 1: So it sort of dials up
the intensity, luminance is sort of like

215
00:14:32.093 --> 00:14:36.642
brightness or how kind of white and
shiny the color looks.

216
00:14:36.642 --> 00:14:40.749
&gt;&gt; Speaker 2: And then the hue is gonna
be something from the color wheel,

217
00:14:40.749 --> 00:14:44.543
where we basically have all
of the colors in one space.

218
00:14:44.543 --> 00:14:47.292
&gt;&gt; Speaker 1: Instead of having
separate spaces for R and G and B.

219
00:14:47.292 --> 00:14:51.764
&gt;&gt; Speaker 2: And so what we could

220
00:14:51.764 --> 00:14:56.515
do is pick kind of a,

221
00:14:56.515 --> 00:15:00.987
okay, let's, so

222
00:15:00.987 --> 00:15:06.506
I could do a S and an L.

223
00:15:06.506 --> 00:15:09.611
&gt;&gt; Speaker 1: I'm doing a little
destructuring here to only have one line

224
00:15:09.611 --> 00:15:10.116
of code.

225
00:15:10.116 --> 00:15:14.851
&gt;&gt; Speaker 2: Not necessary, but, we're
trying to sprinkle in our fancy syntax, so

226
00:15:14.851 --> 00:15:15.480
why not.

227
00:15:15.480 --> 00:15:18.139
&gt;&gt; Speaker 1: So I can just,
I could actually set these to something

228
00:15:18.139 --> 00:15:21.244
that doesn't change
between different calls.

229
00:15:21.244 --> 00:15:24.507
&gt;&gt; Speaker 2: Which means I could even
move this out of the body of the callback

230
00:15:24.507 --> 00:15:25.134
function.

231
00:15:25.134 --> 00:15:29.638
&gt;&gt; Speaker 1: And I could have this
be something like I don't know

232
00:15:29.638 --> 00:15:32.898
what's a good value like, 75%.

233
00:15:32.898 --> 00:15:35.766
&gt;&gt; Speaker 2: We can tweak it later and

234
00:15:35.766 --> 00:15:41.511
now I can get my H inside
the body of my callback.

235
00:15:41.511 --> 00:15:46.810
&gt;&gt; Speaker 1: And in this case
the wheel is measured in degrees,

236
00:15:46.810 --> 00:15:55.154
so we actually kind of, we measure it in
degrees around a circle like an angle.

237
00:15:55.154 --> 00:15:59.312
&gt;&gt; Speaker 2: And so you'll see here that
like often we can put just like D, E G.

238
00:15:59.312 --> 00:16:03.391
&gt;&gt; Speaker 1: For degrees, to this
value instead of percent or whatever.

239
00:16:03.391 --> 00:16:09.080
&gt;&gt; Speaker 2: And so
since the wheel has 360 of those degrees,

240
00:16:09.080 --> 00:16:14.239
we can choose our scaling
value to be 360 and

241
00:16:14.239 --> 00:16:18.338
now, we can do hsl, hsl with our s and

242
00:16:18.338 --> 00:16:25.085
l don't change because we can
have all the same brightness or

243
00:16:25.085 --> 00:16:29.209
whatever, but our hue will change.

244
00:16:29.209 --> 00:16:31.765
&gt;&gt; Speaker 1: So,
just a fun other color space.

245
00:16:31.765 --> 00:16:36.747
&gt;&gt; Speaker 2: Let's see if this worked or
if I got something problematic going on.

246
00:16:39.155 --> 00:16:41.327
&gt;&gt; Speaker 1: I mean, it's changing color.

247
00:16:41.327 --> 00:16:45.557
&gt;&gt; Speaker 2: I think this is a good
lesson in co-pilot because this is

248
00:16:45.557 --> 00:16:49.157
a better solution because
this is accessible,

249
00:16:49.157 --> 00:16:55.098
mine every once in a while I do a really
dark color, and then you can't read it.

250
00:16:55.098 --> 00:16:58.544
&gt;&gt; Speaker 1: Versus this,
you can control the brightness.

251
00:16:58.544 --> 00:16:59.339
&gt;&gt; Speaker 2: Exactly.

252
00:16:59.339 --> 00:17:03.419
&gt;&gt; Speaker 1: Or you can do some scaling
thing on the RGB values to keep it

253
00:17:03.419 --> 00:17:04.184
up above.

254
00:17:04.184 --> 00:17:07.711
&gt;&gt; Speaker 2: You'd have to do some
work on the RGB side to make sure that

255
00:17:07.711 --> 00:17:09.625
the colors are bright enough.

256
00:17:09.625 --> 00:17:14.115
&gt;&gt; Speaker 1: You didn't put it
unit specifier in the string.

257
00:17:14.115 --> 00:17:15.477
&gt;&gt; Speaker 2: Good call.

258
00:17:15.477 --> 00:17:18.638
&gt;&gt; Speaker 1: So, I'm just wondering
if that used the default unit?

259
00:17:18.638 --> 00:17:21.103
&gt;&gt; Speaker 2: I think it might
be defaulting to degrees, but

260
00:17:21.103 --> 00:17:23.009
you know where we could go to check.

261
00:17:23.009 --> 00:17:25.455
&gt;&gt; Speaker 1: Yeah.

262
00:17:25.455 --> 00:17:30.687
&gt;&gt; Speaker 2: All right, so,
&gt;&gt; Speaker 1: The function

263
00:17:30.687 --> 00:17:32.781
also accepts a legacy
syntax used by Anjana,

264
00:17:32.781 --> 00:17:35.274
[LAUGH] in which all values
are separated with commas.

265
00:17:35.274 --> 00:17:37.307
&gt;&gt; Speaker 2: You don't
actually need the commas, but

266
00:17:37.307 --> 00:17:39.641
they were already there
from our cheapy thing.

267
00:17:39.641 --> 00:17:41.960
&gt;&gt; Speaker 1: And so, yes,
so what value can h be?

268
00:17:41.960 --> 00:17:45.491
&gt;&gt; Speaker 2: It can be a number,
an angle, or none,

269
00:17:45.491 --> 00:17:48.489
which represents the hue angle.

270
00:17:48.489 --> 00:17:49.459
&gt;&gt; Speaker 1: What does that mean?

271
00:17:49.459 --> 00:17:52.294
&gt;&gt; Speaker 2: I don't know,
let's go find out, but not right now.

272
00:17:52.294 --> 00:17:57.158
&gt;&gt; Speaker 1: So, yes, and then we'll find
all kinds of different examples of like,

273
00:17:57.158 --> 00:18:01.221
okay, yes, if I can just pass in
a degree value as a number and

274
00:18:01.221 --> 00:18:03.882
it'll interpret it as a degree value.

275
00:18:03.882 --> 00:18:07.382
&gt;&gt; Speaker 2: But excellent point that
I wanna be careful when swapping out my

276
00:18:07.382 --> 00:18:08.511
template strings.

277
00:18:08.511 --> 00:18:12.741
&gt;&gt; Speaker 1: Cuz as I seem to be
finding out over and over again today,

278
00:18:12.741 --> 00:18:17.246
hard coding stuff in any kind
of string is a risky business.

279
00:18:17.246 --> 00:18:20.654
&gt;&gt; Speaker 2: All right,
so [LAUGH] yes, okay, so

280
00:18:20.654 --> 00:18:25.315
we have now successfully
with a lot of JavaScript

281
00:18:25.315 --> 00:18:30.543
reproduced what my old DOS,
well no, not the DOS one,

282
00:18:30.543 --> 00:18:35.677
but the first color computer I had,
I think could do.

283
00:18:35.677 --> 00:18:36.799
&gt;&gt; Speaker 1: Windows 95.

284
00:18:36.799 --> 00:18:39.521
&gt;&gt; Speaker 2: There we go.
&gt;&gt; Speaker 1: Your CRT won't get burned in

285
00:18:39.521 --> 00:18:40.083
now.

286
00:18:40.083 --> 00:18:42.085
&gt;&gt; Speaker 2: Exactly, exactly.

287
00:18:42.085 --> 00:18:42.585
&gt;&gt; Speaker 1: [LAUGH]
&gt;&gt; Speaker 2: [INAUDIBLE] 286.

288
00:18:42.585 --> 00:18:44.521
&gt;&gt; Speaker 1: And another good point about

289
00:18:44.521 --> 00:18:49.925
the, so not only is it convenient that we
only had to set one random value here for

290
00:18:49.925 --> 00:18:55.735
HSL, but another advantage is because that
RGB randomness sometimes turns up really

291
00:18:55.735 --> 00:18:58.426
dark values and this is in dark mode.
&gt;&gt; Speaker 2: Or

292
00:18:58.426 --> 00:19:03.198
vice versa if we were in light mode,
could turn up really light value

293
00:19:03.198 --> 00:19:08.358
sometimes that is not good for all of us.
&gt;&gt; Speaker 1: Because if we have in any

294
00:19:08.358 --> 00:19:14.122
way any kind of difficulty with vision or
things like that,

295
00:19:14.122 --> 00:19:18.734
we have a problem
differentiating the text from

296
00:19:18.734 --> 00:19:23.346
the background, and
that means some of the text

297
00:19:23.346 --> 00:19:27.819
could essentially be non-existent to us.
&gt;&gt; Speaker 2: So

298
00:19:27.819 --> 00:19:32.833
this is an accessibility issue and
there are recommendations for

299
00:19:32.833 --> 00:19:37.392
what amount of contrast you
should have between your text or

300
00:19:37.392 --> 00:19:41.616
whatever, and background.
&gt;&gt; Speaker 1: And I'm not an expert in all

301
00:19:41.616 --> 00:19:44.358
of that, but you know who is?
&gt;&gt; Speaker 2: MDN.

302
00:19:44.358 --> 00:19:46.014
&gt;&gt; Speaker 1: So, and there's links in

303
00:19:46.014 --> 00:19:50.383
there to the accessibility guidelines for
web content, so we want to

304
00:19:50.383 --> 00:19:54.100
generally be trying to be mindful of that.
&gt;&gt; Speaker 2: Not just with color,

305
00:19:54.100 --> 00:19:57.672
also with all kinds of stuff, like
putting alt tags on images, for example.

306
00:19:57.672 --> 00:19:58.869
&gt;&gt; Speaker 1: So that when your path

307
00:19:58.869 --> 00:20:03.397
value is wrong and the image doesn't load,
you at least get some kind of string,

308
00:20:03.397 --> 00:20:07.878
and everybody else who's using a screen
reader gets some useful information.

309
00:20:07.878 --> 00:20:09.862
&gt;&gt; Speaker 2: As opposed to just thinking

310
00:20:09.862 --> 00:20:15.470
there's a blank page because someone
injected a bunch of JavaScript without

311
00:20:15.470 --> 00:20:18.600
updating things in an accessible way.
&gt;&gt; Speaker 1: Sidebar,

312
00:20:18.600 --> 00:20:20.198
accessibility is important.
&gt;&gt; Speaker 2: Okay,

313
00:20:20.198 --> 00:20:24.966
I think we have had a win and
we can take it,

314
00:20:24.966 --> 00:20:28.804
we'll take the W.
&gt;&gt; Speaker 1: And for our reward,

315
00:20:28.804 --> 00:20:32.965
we get a random color changer
that somebody made for

316
00:20:32.965 --> 00:20:39.281
a very fancy music video with Drake in it,
where he could do his little dance.

