WEBVTT

1
00:00:00.000 --> 00:00:02.680
So what about other stuff
that the browser knows?

2
00:00:02.680 --> 00:00:08.165
How about, does it know what time it's
[LAUGH] any BoJack correspond fans?

3
00:00:08.165 --> 00:00:10.209
[LAUGH], what time is it now .com?

4
00:00:10.209 --> 00:00:15.090
Okay, [LAUGH],
the browser has a concept of time,

5
00:00:15.090 --> 00:00:19.283
which gives JavaScript a concept of time.

6
00:00:19.283 --> 00:00:23.069
But we're gonna be putting a pin
in this for a little bit later.

7
00:00:23.069 --> 00:00:29.679
There is a capital D date object,
everything is an object.

8
00:00:29.679 --> 00:00:31.473
We'll talk about that more later, too.

9
00:00:31.473 --> 00:00:39.061
That we can use with the new constructor
to get an instance of a date.

10
00:00:39.061 --> 00:00:44.311
A little preview of some
object-oriented programming,

11
00:00:44.311 --> 00:00:50.107
which represents the current
moment in this thing we call time.

12
00:00:50.107 --> 00:00:54.707
And the date object that
I get from calling new

13
00:00:54.707 --> 00:00:59.078
Date comes with some handy-dandy tools.

14
00:00:59.078 --> 00:01:02.103
For example,
we have date to string on objects.

15
00:01:02.103 --> 00:01:06.152
Well, in this case, we have
a special one called, toDateString,

16
00:01:06.152 --> 00:01:09.004
which gives me a kind
of high-level overview.

17
00:01:09.004 --> 00:01:12.629
If it's a Tuesday,
it's November 20th, etc.

18
00:01:12.629 --> 00:01:17.542
And then we also get a toLocaleDateString,

19
00:01:17.542 --> 00:01:24.179
which knows that I have my
browser set to English US locale,

20
00:01:24.179 --> 00:01:29.513
and in the US we put the month,
and then a slash.

21
00:01:29.513 --> 00:01:33.056
And then the day, and
then a slash, and then the year,

22
00:01:33.056 --> 00:01:37.159
even though the rest of the world
thinks that that's bonkers.

23
00:01:37.159 --> 00:01:41.968
[LAUGH], in any case,
you'll also see that used a lot in

24
00:01:41.968 --> 00:01:47.103
sites where you know you have
an international audience.

25
00:01:47.103 --> 00:01:51.622
And you wanna make sure you're displaying
things in their expected format,

26
00:01:51.622 --> 00:01:55.863
because otherwise those early periods
of the year get very confusing for

27
00:01:55.863 --> 00:01:57.477
the international crowd.

28
00:01:57.477 --> 00:02:02.849
Okay, so
also without the new constructor we can

29
00:02:02.849 --> 00:02:08.744
call a method on the capital
D date object called now,

30
00:02:08.744 --> 00:02:14.770
we can call Date.now, and
it gives us the very helpful

31
00:02:14.770 --> 00:02:20.420
value of one trillion or
something milliseconds.

32
00:02:20.420 --> 00:02:22.842
Yeah, all of my refs are this dated.

33
00:02:22.842 --> 00:02:26.386
Okay, [LAUGH], the ridiculously large and

34
00:02:26.386 --> 00:02:31.210
unhelpful number there is
milliseconds since the epoch,

35
00:02:31.210 --> 00:02:37.814
which we could have a whole other course
on talking about how that all happened.

36
00:02:37.814 --> 00:02:40.979
But in any case, it's basically,

37
00:02:40.979 --> 00:02:46.149
a number of milliseconds that
computers can interpret and

38
00:02:46.149 --> 00:02:52.708
figure out what that corresponds to
in something resembling human time.

39
00:02:52.708 --> 00:02:57.806
I say this with a lot of caveats
because time is a construct.

40
00:02:57.806 --> 00:03:01.199
We're all experiencing it differently and

41
00:03:01.199 --> 00:03:05.698
computers think that everything
is happening right now.

42
00:03:05.698 --> 00:03:10.328
So, anyway, we can, however,
use this very unhelpful

43
00:03:10.328 --> 00:03:15.255
human readable value for
helpful things like timing stuff.

44
00:03:15.255 --> 00:03:18.820
So, for example,
if I grab Date.now as the start and

45
00:03:18.820 --> 00:03:23.828
then I do some really long complicated
blocking synchronous separation.

46
00:03:23.828 --> 00:03:28.099
And then I call date on now again and
say that is the end time,

47
00:03:28.099 --> 00:03:31.785
I can tell what's
the difference between the two.

48
00:03:31.785 --> 00:03:34.378
And I can find how many seconds or

49
00:03:34.378 --> 00:03:38.710
whatever milliseconds it took for
this thing to run.

50
00:03:38.710 --> 00:03:42.048
So that can be useful.

51
00:03:42.048 --> 00:03:46.990
But we also have a fun little
built-in timer on the console object.

52
00:03:46.990 --> 00:03:49.475
Have folks used console.time?

53
00:03:49.475 --> 00:03:54.415
This is a fun one that it's not
100% reliable, of course, but for

54
00:03:54.415 --> 00:03:57.366
general purpose, none of this stuff is.

55
00:03:57.366 --> 00:04:02.969
Don't trust JavaScript
when it comes to time.

56
00:04:02.969 --> 00:04:05.660
But, [LAUGH], this can be useful for

57
00:04:05.660 --> 00:04:10.887
a high-level idea of whether things
are moving along as you expect.

58
00:04:10.887 --> 00:04:17.672
So I can start a new timer by calling
console.time with the name of this timer.

59
00:04:17.672 --> 00:04:20.056
And that's just an arbitrary
string that I choose.

60
00:04:20.056 --> 00:04:23.156
So in this case,
I'll start one called stopwatched.

61
00:04:23.156 --> 00:04:26.876
And then I will runAround,
in my mind, because I hate running.

62
00:04:26.876 --> 00:04:31.640
And then I can call
.timelog on the console and

63
00:04:31.640 --> 00:04:35.182
pass in the same ID for this timer,

64
00:04:35.182 --> 00:04:39.839
which again, was what I chose, stopwatch.

65
00:04:39.839 --> 00:04:45.494
And it will tell me how many milliseconds
that timer has been running.

66
00:04:45.494 --> 00:04:50.573
And I can then maybe even set
another timer, like a lap timer.

67
00:04:50.573 --> 00:04:54.693
So for example, create a new
console.time with a different ID.

68
00:04:54.693 --> 00:04:58.657
So I now have a different timer,
which then I can do more stuff.

69
00:04:58.657 --> 00:05:03.834
And then I could maybe stop that
timer totally by calling .timeend

70
00:05:03.834 --> 00:05:08.469
with my given ID that I'm interested in,
in this case lap.

71
00:05:08.469 --> 00:05:12.302
And now the console will tell me,
okay, the lap took this long and

72
00:05:12.302 --> 00:05:13.428
the timer is done.

73
00:05:13.428 --> 00:05:16.429
I'm not paying attention to lap anymore.

74
00:05:16.429 --> 00:05:19.649
That's we're done, we're past it.

75
00:05:19.649 --> 00:05:23.527
And then the stopwatch timer is still
running at this point because I haven't

76
00:05:23.527 --> 00:05:24.549
called .timeend.

77
00:05:24.549 --> 00:05:27.620
So once I do that, we'll see,
a much larger value for

78
00:05:27.620 --> 00:05:30.027
a timer that's been running for longer.

79
00:05:30.027 --> 00:05:37.004
So anyway, time, it's fun, especially
when you can only count in milliseconds.

80
00:05:37.004 --> 00:05:41.928
So get used to a lot of divide by
a thousand, or multiply by a thousand,

81
00:05:41.928 --> 00:05:42.934
or whatever.

82
00:05:42.934 --> 00:05:46.944
All righty, but console has some
other fun tricks up its sleeve.

83
00:05:46.944 --> 00:05:53.142
So again, poke around to see what else
you got on that console object in there.

84
00:05:53.142 --> 00:05:58.996
But there is another concept
of timers that JavaScript and,

85
00:05:58.996 --> 00:06:04.635
well, I should say the browser has,
which are timeouts.

86
00:06:04.635 --> 00:06:09.422
So try this out as we go in the console.

87
00:06:09.422 --> 00:06:14.784
If we log something,
we expect to see it right away, right?

88
00:06:14.784 --> 00:06:19.646
But if we call the built-in
function set timeout,

89
00:06:19.646 --> 00:06:24.394
and we pass in a callback function,
in this case,

90
00:06:24.394 --> 00:06:30.970
we're doing the little anonymous
fat arrow that we saw a minute ago.

91
00:06:30.970 --> 00:06:33.809
And we log something in that function,

92
00:06:33.809 --> 00:06:38.634
the second argument to set timeout
is a delay, in guess what unit?

93
00:06:38.634 --> 00:06:42.033
In milliseconds, because everything's
milliseconds in our world,

94
00:06:42.033 --> 00:06:43.342
because we're a browser.

95
00:06:43.342 --> 00:06:48.386
And we just see time stretch
infinitely in front of us.

96
00:06:48.386 --> 00:06:53.349
Anyway, so basically the way set timeout
works is I give it a function to run.

97
00:06:53.349 --> 00:06:59.728
I give it a delay after which I
want it to try to run the function.

98
00:06:59.728 --> 00:07:03.114
We're gonna get back to our
whole event loop situation.

99
00:07:03.114 --> 00:07:07.891
And what happens then,
if I have the next line in my program,

100
00:07:07.891 --> 00:07:10.713
also just be a regular console log.

101
00:07:10.713 --> 00:07:16.243
So, if people try running this code,
I'm just gonna copy it.

102
00:07:16.243 --> 00:07:16.927
What do you think?

103
00:07:16.927 --> 00:07:24.244
Will this last one print before or
after this one second later?

104
00:07:24.244 --> 00:07:25.354
&gt;&gt; Before.

105
00:07:25.354 --> 00:07:26.903
&gt;&gt; Before, okay.

106
00:07:26.903 --> 00:07:30.399
Immediately, I don't know
let's see what is immediate.

107
00:07:30.399 --> 00:07:35.040
Okay, so if we do this,
we get it immediately.

108
00:07:35.040 --> 00:07:41.178
But if we run like these two right after
one another, it does print immediately.

109
00:07:41.178 --> 00:07:49.063
And then about one second later this runs.

110
00:07:49.063 --> 00:07:54.500
And if you are capable in your
mind of not having the SpongeBob

111
00:07:54.500 --> 00:07:59.616
name one second later in your
head then you are a different

112
00:07:59.616 --> 00:08:06.345
brain than me because that's all I can
can ever think of with these things.

113
00:08:06.345 --> 00:08:08.725
Many hours later, okay.

114
00:08:08.725 --> 00:08:10.291
&gt;&gt; Excuse me.
&gt;&gt; Yes.

115
00:08:10.291 --> 00:08:18.301
&gt;&gt; Where does the set timeout method live?

116
00:08:18.301 --> 00:08:19.020
What is that?

117
00:08:19.020 --> 00:08:20.636
&gt;&gt; What is that?

118
00:08:20.636 --> 00:08:22.565
Shall we ask our friend?

119
00:08:22.565 --> 00:08:23.322
&gt;&gt; Yeah.

120
00:08:23.322 --> 00:08:27.557
&gt;&gt; Let's ask our best friend,
every web dev's best friend, BFF,

121
00:08:27.557 --> 00:08:30.488
type in the thing that
we're curious about.

122
00:08:30.488 --> 00:08:34.552
SetTimeout, global function, okay?

123
00:08:34.552 --> 00:08:38.958
Also available in web workers,
outside of the scope of this course.

124
00:08:38.958 --> 00:08:44.255
So basically the setTimeout
function is a global

125
00:08:44.255 --> 00:08:49.424
variable in the JavaScript
client side runtime

126
00:08:49.424 --> 00:08:55.237
that gives us access to this
browser API under the hood

127
00:08:55.237 --> 00:09:01.978
that the browser is managing
of maintaining these timeouts.

128
00:09:01.978 --> 00:09:06.424
And so, we can read a lot
more about timeouts in here.

129
00:09:06.424 --> 00:09:10.564
But again,
this is one of those things that

130
00:09:10.564 --> 00:09:14.939
the browser is doing
outside of JavaScript.

131
00:09:14.939 --> 00:09:18.500
And it has this notion of a timer.

132
00:09:18.500 --> 00:09:23.760
So, it sees the call, or JavaScript has
this function on the stack that says,

133
00:09:23.760 --> 00:09:26.646
setTimeout with some callback function.

134
00:09:26.646 --> 00:09:30.467
And then the browser is,
you wanted me to set a timeout.

135
00:09:30.467 --> 00:09:34.262
And then remember that that's the function
I'm supposed to run that callback you

136
00:09:34.262 --> 00:09:34.926
just gave me.

137
00:09:34.926 --> 00:09:36.667
Okay, cool.

138
00:09:36.667 --> 00:09:40.108
Start the timer [SOUND].

139
00:09:40.108 --> 00:09:43.819
It's been 1000 milliseconds or whatever.

140
00:09:43.819 --> 00:09:47.585
Now you should be ready to
run that callback function.

141
00:09:47.585 --> 00:09:55.825
So the browser pushes that into the queue
to be processed as quickly as possible,

142
00:09:55.825 --> 00:10:01.655
and this is why I keep saying
it runs about a second later.

143
00:10:01.655 --> 00:10:04.821
It runs about immediately.

144
00:10:04.821 --> 00:10:08.106
Because again, there could be all
kinds of other stuff happening.

145
00:10:08.106 --> 00:10:11.776
So really,
when we're setting a timeout, and

146
00:10:11.776 --> 00:10:17.758
using similar API's which we'll see in
a second, the delay is not precise.

147
00:10:17.758 --> 00:10:20.690
The delay is essentially a minimum.

148
00:10:20.690 --> 00:10:24.879
It's telling the browser,
wait 1000 seconds or

149
00:10:24.879 --> 00:10:29.355
milliseconds and
then schedule this function to be run.

150
00:10:29.355 --> 00:10:34.686
So put this callback function into the
queue in a little message to JavaScript.

151
00:10:34.686 --> 00:10:39.370
And then only once the call stack
is empty and that message is

152
00:10:39.370 --> 00:10:44.345
the front of the queue is that
callback actually gonna get run.

153
00:10:44.345 --> 00:10:47.437
So it might be 2,000 milliseconds later.

154
00:10:47.437 --> 00:10:52.184
If somebody else was doing
something else that blocked

155
00:10:52.184 --> 00:10:56.317
the call stack for
a second, one whole second.

156
00:10:56.317 --> 00:11:00.842
So this is why we have very fuzzy
notions of when things are happening,

157
00:11:00.842 --> 00:11:04.459
because the browser's doing
all kinds of other stuff.

158
00:11:04.459 --> 00:11:08.379
What do we think we're the most
important person in the browser's life?

159
00:11:08.379 --> 00:11:12.411
It doesn't have anything else better to
do than just listen for our commands and

160
00:11:12.411 --> 00:11:13.866
execute them immediately?

161
00:11:13.866 --> 00:11:14.734
Whoa, browser.

162
00:11:14.734 --> 00:11:18.820
All right, but it's kind of fair,
there's other things happening.

163
00:11:18.820 --> 00:11:21.234
So this is why be careful with timeouts.

164
00:11:21.234 --> 00:11:27.212
Don't trust them as an exact time and
same with console.time and all this stuff.

165
00:11:27.212 --> 00:11:31.511
Nothing in JavaScript,
[LAUGH] time-wise, is certain really.

166
00:11:31.511 --> 00:11:32.914
Although they're working on it.

167
00:11:32.914 --> 00:11:39.013
That standards body that I mentioned is
working on a new alternative to date.now.

168
00:11:39.013 --> 00:11:43.028
So hopefully, one day,
we'll have easier time as web developers.

169
00:11:43.028 --> 00:11:49.005
But anyway, for now, when we set timeouts,
it's essentially a minimum, minimum delay.

170
00:11:49.005 --> 00:11:50.456
Just keep that in mind.

171
00:11:50.456 --> 00:11:52.617
We can also cancel timeouts.

172
00:11:52.617 --> 00:11:57.250
Sometimes got a rocket launch

173
00:11:57.250 --> 00:12:02.257
planned as one does these days.

174
00:12:02.257 --> 00:12:03.885
Cuz that's what JavaScript is for, right?

175
00:12:03.885 --> 00:12:04.803
Launching rockets.

176
00:12:04.803 --> 00:12:11.080
And let's say we have a countdown timeout.

177
00:12:11.080 --> 00:12:13.181
And this bears mentioning,

178
00:12:13.181 --> 00:12:18.877
sometimes it's useful to keep the return
value of the set timeout function.

179
00:12:18.877 --> 00:12:20.832
And if we look at what that value is,

180
00:12:20.832 --> 00:12:24.954
if we log this countdown variable
we've stored it in, it's some number.

181
00:12:24.954 --> 00:12:29.970
And it'll depend on how many
other timers are going, whatever.

182
00:12:29.970 --> 00:12:34.784
But essentially,
each running JavaScript process will

183
00:12:34.784 --> 00:12:39.605
give it an ID that can't be confused for
any other timer.

184
00:12:39.605 --> 00:12:45.959
And we can use that ID to then clear or
cancel the timeout if we need to.

185
00:12:45.959 --> 00:12:52.112
So if somebody smashes that abort button,
for example,

186
00:12:52.112 --> 00:12:58.148
then we want to clear this time out and
not have liftoff.

187
00:12:58.148 --> 00:13:02.740
So this is also kind of mirrored in

188
00:13:02.740 --> 00:13:07.992
a very similar API called intervals.

189
00:13:07.992 --> 00:13:11.482
So similar to timeout,
where we're essentially saying,

190
00:13:11.482 --> 00:13:14.780
okay, wait this long and
then try to run this function.

191
00:13:14.780 --> 00:13:18.756
With an interval, we're saying, wait this
long and then try to run this function,

192
00:13:18.756 --> 00:13:21.724
and then wait that long again,
and then try to run it again, and

193
00:13:21.724 --> 00:13:24.430
then wait that long again and
try to run it again forever.

194
00:13:24.430 --> 00:13:29.393
Or until we run clear interval on the ID

195
00:13:29.393 --> 00:13:33.279
of the timeout we want to run.

196
00:13:33.279 --> 00:13:36.257
Now, be careful with these things.

197
00:13:36.257 --> 00:13:41.136
If you're setting an interval to
do some very long or expensive or,

198
00:13:41.136 --> 00:13:43.960
yeah, I don't know, operation, and

199
00:13:43.960 --> 00:13:48.861
you're doing it every second,
you might not be having a good time.

200
00:13:48.861 --> 00:13:53.178
But sometimes that is
exactly what you want.

201
00:13:53.178 --> 00:13:57.332
Yes, and so back to our concept again,
just to review that terminology or

202
00:13:57.332 --> 00:14:01.620
jargon, cuz let's keep in mind that
these are all just arbitrary words that

203
00:14:01.620 --> 00:14:03.640
we made up to refer to these things.

204
00:14:03.640 --> 00:14:08.971
However, in the community, you will see
words thrown around like blocking code,

205
00:14:08.971 --> 00:14:13.097
synchronous, asynchronous,
non-blocking, yada, yada.

206
00:14:13.097 --> 00:14:18.648
So essentially, as a recap,
if there weren't this whole process

207
00:14:18.648 --> 00:14:24.010
of the event loop being able to
queue up things into JavaScript.

208
00:14:24.010 --> 00:14:28.801
Then JavaScript would basically
have to block its execution until

209
00:14:28.801 --> 00:14:30.863
the current thing was done.

210
00:14:30.863 --> 00:14:34.097
And we wouldn't be able to do anything
else with the browser if we were running

211
00:14:34.097 --> 00:14:35.155
a timeout, let's say.

212
00:14:35.155 --> 00:14:37.999
Or we wouldn't have a timeout
because that's a browser thing.

213
00:14:37.999 --> 00:14:42.020
But if we were doing
a very long complex task.

214
00:14:42.020 --> 00:14:49.016
So the event loop helps us avoid blocking
the the browser's interactivity and

215
00:14:49.016 --> 00:14:53.898
being able to respond to
other stuff that's going on.

216
00:14:53.898 --> 00:14:58.581
But we've all had the experience
probably in our lives of some

217
00:14:58.581 --> 00:15:02.466
page that is indeed freezing
up our whole browser.

218
00:15:02.466 --> 00:15:07.413
We can't do anything and so
our goal forever, and to today,

219
00:15:07.413 --> 00:15:10.711
and in the future, is to not do that, and

220
00:15:10.711 --> 00:15:16.444
to give users a responsive experience
by managing time consciously.

221
00:15:16.444 --> 00:15:21.881
So this is just the beginning of
what could be said about this,

222
00:15:21.881 --> 00:15:25.448
but TLDR, a blocking code, less good.

223
00:15:25.448 --> 00:15:29.864
Non-blocking code, and that's where
our async friends come in, excellent.

224
00:15:29.864 --> 00:15:30.718
Drake approves.

225
00:15:30.718 --> 00:15:32.399
So you know it's good.

