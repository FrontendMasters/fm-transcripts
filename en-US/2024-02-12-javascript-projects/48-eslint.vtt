WEBVTT

1
00:00:00.000 --> 00:00:06.018
We do want to get involved with some
other JavaScripty friendly tooling

2
00:00:06.018 --> 00:00:12.535
that can help us make sure that the code
we are about to push to the interwebs for

3
00:00:12.535 --> 00:00:17.448
all to maybe see or
not if we haven't done right, Anjana,

4
00:00:17.448 --> 00:00:22.289
[LAUGH] is one very handy type of tool,
is called a linter.

5
00:00:22.289 --> 00:00:24.429
Has anybody worked with linters before?

6
00:00:24.429 --> 00:00:28.558
Yeah, okay, so
folks have maybe heard of this, eslint.

7
00:00:28.558 --> 00:00:31.190
And again, that's es ECMAScript.

8
00:00:31.190 --> 00:00:36.092
[LAUGH] So the eslint is a super
popular one, there are lots of others.

9
00:00:36.092 --> 00:00:40.922
But essentially, the idea here is that
this linter is a program that's gonna look

10
00:00:40.922 --> 00:00:43.239
at our code base and do the jargon term.

11
00:00:43.239 --> 00:00:46.989
And be like statically analyze
all the files that we have and

12
00:00:46.989 --> 00:00:48.565
the text in those files.

13
00:00:48.565 --> 00:00:52.935
And make sure that we
don't have any obvious,

14
00:00:52.935 --> 00:00:57.643
glaring errors that
are defined by some rules that

15
00:00:57.643 --> 00:01:01.246
we can customize for a given project.

16
00:01:01.246 --> 00:01:05.451
But we can also use some kind of default
best practice rules that are baked in

17
00:01:05.451 --> 00:01:06.800
already out of the box.

18
00:01:06.800 --> 00:01:08.208
And that's what we're
gonna be doing today.

19
00:01:08.208 --> 00:01:12.988
So these are things like, for example,
if you declare a variable, but

20
00:01:12.988 --> 00:01:17.226
you never use it, you never refer to it,
you don't need that.

21
00:01:17.226 --> 00:01:22.147
It might not be a bug, but it's probably
something that you don't really want just

22
00:01:22.147 --> 00:01:24.056
hanging around your code base.

23
00:01:24.056 --> 00:01:28.076
And so linters can catch
that type of thing for you.

24
00:01:28.076 --> 00:01:30.649
They can also catch reference errors and

25
00:01:30.649 --> 00:01:33.909
things like that before
you actually run the code.

26
00:01:33.909 --> 00:01:38.304
Before you even push the code,
you can catch some degree of issues.

27
00:01:38.304 --> 00:01:40.280
Not all of them, obviously,

28
00:01:40.280 --> 00:01:43.922
because [LAUGH] then we
wouldn't need to be doing this.

29
00:01:43.922 --> 00:01:49.644
[LAUGH] But
the idea is that we will be installing

30
00:01:49.644 --> 00:01:54.052
eslint in our project repository.

31
00:01:54.052 --> 00:01:57.330
So what we can do is together,

32
00:01:57.330 --> 00:02:03.375
we can do this in whatever
your selfie cam project was.

33
00:02:03.375 --> 00:02:05.819
If you called it selfie cam like I did,
or if you called it something else.

34
00:02:05.819 --> 00:02:11.952
But the Vite project
that we started earlier,

35
00:02:11.952 --> 00:02:16.198
we can go into that directory and

36
00:02:16.198 --> 00:02:20.917
run from within that directory this

37
00:02:20.917 --> 00:02:25.958
command npm init @eslint/config.

38
00:02:25.958 --> 00:02:32.210
And I will move over to a window so
we can all do this together.

39
00:02:32.210 --> 00:02:33.770
What did I call it?

40
00:02:33.770 --> 00:02:38.318
awesome-vite-starter was what mine
was called because I already had,

41
00:02:38.318 --> 00:02:41.849
I'll talk about that later,
I already had a selfie cam.

42
00:02:41.849 --> 00:02:45.554
[LAUGH] So can folks see this?

43
00:02:45.554 --> 00:02:49.760
Okay, so now pretend that this
is what you called your project.

44
00:02:49.760 --> 00:02:53.686
So if we run, whoo, [LAUGH] always
typing it in the wrong window,

45
00:02:53.686 --> 00:02:55.299
it's like my whole vibe.

46
00:02:55.299 --> 00:02:58.730
Okay, whoo, fun tabs.

47
00:02:58.730 --> 00:03:03.811
If we run npm init @eslint/config,
we're gonna

48
00:03:03.811 --> 00:03:09.600
get a handy dandy little wizard
similar to our Vite project

49
00:03:09.600 --> 00:03:15.524
bootstrapper that's gonna
walk us through some choices.

50
00:03:15.524 --> 00:03:20.291
And what this is going to do is set up
eslint as a development dependency of

51
00:03:20.291 --> 00:03:21.238
our project.

52
00:03:21.238 --> 00:03:27.816
And set up some configuration for eslint
so it knows what type of project this is,

53
00:03:27.816 --> 00:03:33.740
what kind of things, what kind of
code I'm gonna be working with, etc.

54
00:03:33.740 --> 00:03:38.523
Now, eslint comes with what
are called rules and sets of rules.

55
00:03:38.523 --> 00:03:41.497
So for example, no unused vars or

56
00:03:41.497 --> 00:03:47.248
no unused variable declarations
that you never refer to again.

57
00:03:47.248 --> 00:03:50.922
And these are kind of grouped
into different sets so

58
00:03:50.922 --> 00:03:56.653
that we can have some sets that are
related to syntax problems, syntax errors.

59
00:03:56.653 --> 00:04:00.113
Then we can have, for example,

60
00:04:00.113 --> 00:04:04.994
a const equals semicolon, not JavaScript.

61
00:04:04.994 --> 00:04:07.306
JavaScript's just immediately
gonna have a problem with that, so

62
00:04:07.306 --> 00:04:08.328
eslint can catch that for us.

63
00:04:08.328 --> 00:04:10.481
That's a syntax problem.

64
00:04:10.481 --> 00:04:15.146
Then it can also find those other
problems that aren't illegal JavaScript,

65
00:04:15.146 --> 00:04:17.308
things like the unused variables.

66
00:04:17.308 --> 00:04:22.127
And there also is the option to enforce
some formatting with eslint, but

67
00:04:22.127 --> 00:04:26.632
we're not gonna use it for that,
we're gonna use something else.

68
00:04:26.632 --> 00:04:31.084
And so right now, we're gonna
stick with this middle version,

69
00:04:31.084 --> 00:04:33.645
the check syntax and find problems.

70
00:04:33.645 --> 00:04:37.499
And what type of modules
does our project use?

71
00:04:37.499 --> 00:04:39.540
&gt;&gt; JavaScript.

72
00:04:39.540 --> 00:04:43.256
&gt;&gt; Exactly, yes, this is referring
to ECMAScript modules, but

73
00:04:43.256 --> 00:04:46.902
the import export modules,
not the require module exports,

74
00:04:46.902 --> 00:04:49.793
CommonJS modules that
were the older solution.

75
00:04:49.793 --> 00:04:51.733
So we're gonna choose that one, fabulous.

76
00:04:51.733 --> 00:04:53.700
Which framework do we use?

77
00:04:53.700 --> 00:04:56.721
None of those, vanilla all the way.

78
00:04:56.721 --> 00:04:57.653
Are we on TypeScript?

79
00:04:57.653 --> 00:05:00.639
No, not at the moment.

80
00:05:00.639 --> 00:05:02.634
And where does our code run?

81
00:05:02.634 --> 00:05:03.835
&gt;&gt; Browser.

82
00:05:03.835 --> 00:05:08.749
&gt;&gt; For this project, we're not developing
a command line tool or something,

83
00:05:08.749 --> 00:05:13.679
some other library that we expect people
to install in their node backends.

84
00:05:13.679 --> 00:05:17.119
We're writing front-end code,
so we want Browser.

85
00:05:17.119 --> 00:05:20.322
And for this one, we're gonna choose JSON.

86
00:05:20.322 --> 00:05:23.094
I'm just gonna dictate that.

87
00:05:23.094 --> 00:05:28.077
[LAUGH] So we'll choose JSON for
the config file.

88
00:05:28.077 --> 00:05:35.424
Okay, so now, Did I say I'm using,
I said I'm using TypeScript, oops.

89
00:05:35.424 --> 00:05:38.929
All right, well, hopefully, you did
not say that you are using TypeScript.

90
00:05:38.929 --> 00:05:42.870
If I'm like, no,
I didn't want any of this,

91
00:05:42.870 --> 00:05:46.558
what I just did is press Ctrl+C and
it aborted.

92
00:05:46.558 --> 00:05:49.842
So I can run through it again and
type in the correct values.

93
00:05:49.842 --> 00:05:51.716
So I want syntax and problems.

94
00:05:51.716 --> 00:05:54.505
We're using ES modules,
we're not using a framework.

95
00:05:54.505 --> 00:05:56.283
We are not using TypeScript.

96
00:05:56.283 --> 00:06:00.835
We are in the browser and we want JSON.

97
00:06:00.835 --> 00:06:06.038
Okay, so now it's gonna say something
like, all right, you have asked

98
00:06:06.038 --> 00:06:11.172
me to set this up and I am going to
need to install a dependency of ESLint.

99
00:06:11.172 --> 00:06:13.597
Well, that makes sense cuz this is
what we're asking ESLint to do.

100
00:06:13.597 --> 00:06:17.931
So I accept, I consent,
thank you for asking me.

101
00:06:17.931 --> 00:06:22.035
Okay, and
which package manager are we using?

102
00:06:22.035 --> 00:06:23.774
&gt;&gt; npm.
&gt;&gt; npm today.

103
00:06:23.774 --> 00:06:25.099
And then there it goes.

104
00:06:25.099 --> 00:06:30.668
So now it is running behind the scenes,
a little install, and

105
00:06:30.668 --> 00:06:37.534
it says it also successfully created
an eslintrc.json file in my project.

106
00:06:37.534 --> 00:06:40.849
So I'm just gonna close this, Don't Save.

107
00:06:40.849 --> 00:06:47.200
So if I go into my project here,
I'll see I have a new .eslintrc.json file,

108
00:06:47.200 --> 00:06:51.891
which is, again,
in the JavaScript npm package world,

109
00:06:51.891 --> 00:06:57.783
we're gonna have lots of different
tools that have their own configs.

110
00:06:57.783 --> 00:07:02.283
We're gonna talk about Vite
has its own config files, too.

111
00:07:02.283 --> 00:07:08.394
So we'll get used to seeing lots of JSON
files with [LAUGH] settings and things.

112
00:07:08.394 --> 00:07:13.221
And so right here, we just have some of
the default, kind of out-of-the-box rules,

113
00:07:13.221 --> 00:07:14.933
are this eslint recommended?

114
00:07:14.933 --> 00:07:20.066
And unless your project has any
specific reason to use other things,

115
00:07:20.066 --> 00:07:21.670
that should be fine.

116
00:07:21.670 --> 00:07:22.648
That's all we're gonna do today.

117
00:07:22.648 --> 00:07:26.838
But if you have some specific
rules you want to include,

118
00:07:26.838 --> 00:07:31.652
maybe some custom rules that your
company has, for example, or

119
00:07:31.652 --> 00:07:36.308
anything else, you can also add
into this rules object here.

120
00:07:36.308 --> 00:07:40.198
You can specify which other
rules you want to use.

121
00:07:40.198 --> 00:07:46.428
And those will be added with, as you might
guess, from this extends keyword, those

122
00:07:46.428 --> 00:07:52.767
will be added in addition to whatever else
you've kind of pulled in from that extent.

123
00:07:52.767 --> 00:07:58.697
Okay, so now, [LAUGH] and
I don't need to say that.

124
00:07:58.697 --> 00:08:03.356
We wanna take a look at our package.json.

125
00:08:03.356 --> 00:08:05.774
And notice that we have a new friend,

126
00:08:05.774 --> 00:08:10.688
a new dependency in our dev dependencies,
because the linter is something

127
00:08:10.688 --> 00:08:15.771
that we run as developers before we
send the code to the interwebs, ideally.

128
00:08:15.771 --> 00:08:21.186
[LAUGH] And not something that our users
are gonna be running in the browser.

129
00:08:21.186 --> 00:08:27.283
This is a dev time helper.

130
00:08:27.283 --> 00:08:29.705
So now we have an eslint dependency.

131
00:08:29.705 --> 00:08:33.015
Okay, now, how do we use this thing?

132
00:08:33.015 --> 00:08:39.421
So there is a fun little command
that comes with npm called npx.

133
00:08:39.421 --> 00:08:47.546
And what that does, it essentially allows
you to run a dependency of your project.

134
00:08:47.546 --> 00:08:50.315
Yeah, just as if you're running
it at the command line and

135
00:08:50.315 --> 00:08:52.526
you have it globally installed, let's say.

136
00:08:52.526 --> 00:08:56.656
So what I could do is npx eslint, and

137
00:08:56.656 --> 00:09:01.906
maybe ask it for eslint, what's your deal?

138
00:09:01.906 --> 00:09:05.582
Okay, well, at least it exists, so
that's nice, it tells me some things.

139
00:09:05.582 --> 00:09:10.894
Look, a bajillion options,
almost like every CLI [LAUGH] tool ever.

140
00:09:10.894 --> 00:09:14.821
So we're not gonna worry too much
about all of this, but essentially,

141
00:09:14.821 --> 00:09:17.516
about all of the configuration and
everything.

142
00:09:17.516 --> 00:09:22.194
But the idea is that by default,
eslint, when we run it,

143
00:09:22.194 --> 00:09:25.709
is gonna look for that .eslintrc.json.

144
00:09:25.709 --> 00:09:29.070
And we're gonna maybe give it
some optional options, but

145
00:09:29.070 --> 00:09:32.305
we're gonna tell it where we
want it to look at our code.

146
00:09:32.305 --> 00:09:34.578
And so in this case,
we probably wanted to look at everything.

147
00:09:34.578 --> 00:09:40.047
So what we can do is run
npx eslint [LAUGH] and

148
00:09:40.047 --> 00:09:44.892
then dot for the current directory,

149
00:09:44.892 --> 00:09:48.030
and it will go through.

150
00:09:48.030 --> 00:09:50.968
And okay, well,
there was a small delay and

151
00:09:50.968 --> 00:09:55.742
nothing really happened, but
that might be because nothing is wrong.

152
00:09:55.742 --> 00:10:00.627
So let's make something wrong and
see if it can catch it.

153
00:10:00.627 --> 00:10:04.542
All right, so for example,
that shouldn't fly,

154
00:10:04.542 --> 00:10:07.829
I just put two random backwards thingies.

155
00:10:07.829 --> 00:10:10.730
VS Code is already like,
that's not, you're not, nope, and

156
00:10:10.730 --> 00:10:12.410
there's a little Easter egg there.

157
00:10:12.410 --> 00:10:16.192
But so now, if I run es,
hopefully, this is gonna catch it.

158
00:10:16.192 --> 00:10:20.410
Indeed, it's like I have
a parsing error in camera.js.

159
00:10:20.410 --> 00:10:24.909
You can't start a JavaScript file
with a closed square bracket.

160
00:10:24.909 --> 00:10:26.048
Anjana, what are you doing?

161
00:10:26.048 --> 00:10:30.586
Don't do anything further,
just go fix that.

162
00:10:30.586 --> 00:10:34.225
So that's good to know, right?

163
00:10:34.225 --> 00:10:38.463
This is actually gonna be catching
not just the syntax errors, but

164
00:10:38.463 --> 00:10:40.664
also stuff, like I said, const.

165
00:10:40.664 --> 00:10:44.880
If I have a useless variable, and
you can see VS Code is already telling me

166
00:10:44.880 --> 00:10:49.169
something's wrong, which is because
there's an ESLint integration,

167
00:10:49.169 --> 00:10:51.329
which we're gonna talk about soon.

168
00:10:51.329 --> 00:10:54.532
There's ESLint integrations for code.

169
00:10:54.532 --> 00:10:59.038
But so yeah, so if I run it again,
it's gonna tell me, yeah,

170
00:10:59.038 --> 00:11:04.175
in that file camera.js, useless is
assigned a value but never used.

171
00:11:04.175 --> 00:11:07.160
And that's the rule, no unused vars.

172
00:11:07.160 --> 00:11:12.033
As we get into more and
more complex projects and as we are,

173
00:11:12.033 --> 00:11:16.807
something is on fire and
we have to fix it really quickly,

174
00:11:16.807 --> 00:11:21.097
we really appreciate eslint
doing all this for us.

175
00:11:21.097 --> 00:11:26.027
And we probably wanna go bake
this into our package script so

176
00:11:26.027 --> 00:11:31.663
that we don't have to keep going and
running npx eslint., right?

177
00:11:31.663 --> 00:11:37.833
So after I fix this, [LAUGH] what I
can do is go into my package.json.

178
00:11:37.833 --> 00:11:42.495
And these scripts in this little thing
here, these were put in by Vite, but

179
00:11:42.495 --> 00:11:45.087
I can put in whatever scripts I want here.

180
00:11:45.087 --> 00:11:50.969
And they will be run within
the kind of dependency access.

181
00:11:50.969 --> 00:11:54.863
So I don't need that npx the same way I do
when I'm running it from the command line.

182
00:11:54.863 --> 00:11:58.787
Because if we're running these scripts,
we're running them with npm run.

183
00:11:58.787 --> 00:12:01.256
And so it already knows where we are, and

184
00:12:01.256 --> 00:12:05.914
that we want to run the dependency of
our project called Vite, for example.

185
00:12:05.914 --> 00:12:08.807
So what I can do, and
what you'll often see,

186
00:12:08.807 --> 00:12:12.324
is add a lint script with
whatever the lint command is.

187
00:12:12.324 --> 00:12:15.027
If we have very complex flags and things,

188
00:12:15.027 --> 00:12:18.889
options that we want to be
passing into the eslint command,

189
00:12:18.889 --> 00:12:23.389
we can bake them all in there so
we don't have to type them every time.

190
00:12:23.389 --> 00:12:25.813
So I can save this.

191
00:12:25.813 --> 00:12:33.059
And now, just like I could run npm run
build, I'm able to run npm run lint.

192
00:12:33.059 --> 00:12:39.404
And actually, let me unfix this just so
we can make sure it's still catching.

193
00:12:39.404 --> 00:12:43.929
And it does the same thing,
but within our project.

194
00:12:43.929 --> 00:12:47.836
So again, it's catching problems,
it's catching syntax errors,

195
00:12:47.836 --> 00:12:50.099
it's doing all kinds of helpful stuff.

196
00:12:53.358 --> 00:12:58.584
And so then what you can also do, and what
you'll see in larger complex projects,

197
00:12:58.584 --> 00:13:03.906
is you'll then have scripts that kind of
layer these different scripts together.

198
00:13:03.906 --> 00:13:09.525
So for example, I could have
something like, before I build,

199
00:13:09.525 --> 00:13:14.507
for example, I could do an npm run lint,
and then the and

200
00:13:14.507 --> 00:13:19.402
is like, if that succeeds,
then go on with the build.

201
00:13:19.402 --> 00:13:24.168
So if the linter fails,
let me unfix, I should not even get

202
00:13:24.168 --> 00:13:29.134
to wasting my computer's
resources on running the build and

203
00:13:29.134 --> 00:13:35.386
wasting my time on like if there's
a very a lot of optimizations happening.

204
00:13:35.386 --> 00:13:40.492
So let's see what happens now
when I run npm run build.

205
00:13:40.492 --> 00:13:44.751
It's like whoa, whoa, whoa,
whoa, whoa, whoa, whoa,

206
00:13:44.751 --> 00:13:48.447
first of all,
you have to pass lint and you didn't.

207
00:13:48.447 --> 00:13:53.687
And this is telling me when I run, sorry.

208
00:13:53.687 --> 00:13:57.924
Okay, when I run build,
npm is looking at, okay,

209
00:13:57.924 --> 00:14:01.089
what does your build script say to do?

210
00:14:01.089 --> 00:14:08.351
It says to do npm run lint and
and vite build.

211
00:14:08.351 --> 00:14:13.025
So first, I'm gonna do npm run lint,
what does that say to do?

212
00:14:13.025 --> 00:14:18.905
That says to do eslint., so
check the files in this directory.

213
00:14:18.905 --> 00:14:22.194
And that did not succeed,
so I'm not gonna do it.

214
00:14:22.194 --> 00:14:27.078
Okay, so but now if I fix the problem and

215
00:14:27.078 --> 00:14:32.702
I try this again,
hopefully, we got through

216
00:14:32.702 --> 00:14:38.179
the eslint and
we got to the vite build step.

217
00:14:38.179 --> 00:14:44.306
So this is how we can start to bake in any
other checks and balances that we need.

218
00:14:44.306 --> 00:14:50.490
As projects get bigger and as teams
are collaborating across time zones and

219
00:14:50.490 --> 00:14:55.790
whatnot, it's very helpful to all
be on the same page about this

220
00:14:55.790 --> 00:15:00.911
needs to pass the linter before
it can go to the build process.

221
00:15:00.911 --> 00:15:05.912
And with things like an eslint config
file, and there are a few other

222
00:15:05.912 --> 00:15:10.762
ways to do the config as you might
have gathered from the prompts.

223
00:15:10.762 --> 00:15:14.033
This way,
everybody that's using this project,

224
00:15:14.033 --> 00:15:19.369
everybody that's developing this project
is gonna be using the same set of rules.

225
00:15:19.369 --> 00:15:23.473
So that's fun, cuz otherwise,
chaos might ensue.

226
00:15:23.473 --> 00:15:26.812
So if you want chaos, don't do this.

