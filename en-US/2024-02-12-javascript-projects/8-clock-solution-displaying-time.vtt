WEBVTT

1
00:00:00.005 --> 00:00:04.354
JavaScript time again, and forever.

2
00:00:04.354 --> 00:00:08.852
[LAUGH] So if you check out
instead of clock/index.html,

3
00:00:08.852 --> 00:00:13.827
clock/finished.html, you'll
find my finished solution.

4
00:00:13.827 --> 00:00:16.972
But there's a lot of different ways and

5
00:00:16.972 --> 00:00:21.171
different results y'all
could have got from this.

6
00:00:21.171 --> 00:00:25.088
The output of yours might even
look totally different, but

7
00:00:25.088 --> 00:00:27.136
here's what mine looks like.

8
00:00:27.136 --> 00:00:32.164
All right, so let's see how we could
do this, one way we could do this.

9
00:00:32.164 --> 00:00:33.417
But I'm also, again,

10
00:00:33.417 --> 00:00:38.234
very curious to hear what other people did
that might be super different from mine.

11
00:00:38.234 --> 00:00:40.751
Okay, we've got this
very exciting webpage.

12
00:00:40.751 --> 00:00:44.327
And we've got our little script tag for
our clock script.

13
00:00:44.327 --> 00:00:51.353
How did y'all go about grabbing
the clock and the time element?

14
00:00:51.353 --> 00:00:52.204
&gt;&gt; getElementById.

15
00:00:52.204 --> 00:00:56.393
&gt;&gt; getElementById.

16
00:00:56.393 --> 00:01:04.468
&gt;&gt; It's like const clock =
document.getElementById('clock').

17
00:01:04.468 --> 00:01:06.551
&gt;&gt; Clock, all right, great.

18
00:01:06.551 --> 00:01:10.851
Yeah, and IDs are our best friend,
cuz we can just grab anything.

19
00:01:10.851 --> 00:01:14.459
So for example, maybe we also grab this,
I'm gonna call it the text,

20
00:01:14.459 --> 00:01:16.171
even though it's a paragraph.

21
00:01:16.171 --> 00:01:20.211
We could do like document.getElementById.

22
00:01:20.211 --> 00:01:22.450
But there's also other ways
we could have done this,

23
00:01:22.450 --> 00:01:24.251
we could use a query selector or whatever.

24
00:01:26.171 --> 00:01:29.673
Okay, so I got some stuff to work with.

25
00:01:29.673 --> 00:01:34.781
And now we said,
let's go back to those slides, maybe.

26
00:01:34.781 --> 00:01:37.555
Okay, we said we want to know
what the current time is.

27
00:01:37.555 --> 00:01:40.502
I don't wanna know about yesterday,
I wanna know about now.

28
00:01:40.502 --> 00:01:44.018
So, how did we do that?

29
00:01:44.018 --> 00:01:51.603
There's a few ways, but essentially,
they're gonna start with,

30
00:01:51.603 --> 00:01:56.988
I'm gonna call this currentTime,
cuz why not?

31
00:01:56.988 --> 00:02:02.685
We can create a date object
that represents time sort

32
00:02:02.685 --> 00:02:07.740
of with new Date(),
date with an e, [LAUGH].

33
00:02:09.440 --> 00:02:10.310
Okay, cool.

34
00:02:10.310 --> 00:02:15.153
So now if I console.log
the current time just

35
00:02:15.153 --> 00:02:19.109
to gut check myself, and I inspect.

36
00:02:22.448 --> 00:02:24.336
Maybe, okay.

37
00:02:24.336 --> 00:02:27.463
[LAUGH] So
I have some kinda time happening and

38
00:02:27.463 --> 00:02:32.374
it is at least the correct day, so
we'll consider that good enough.

39
00:02:32.374 --> 00:02:38.964
All right, so now we don't wanna
necessarily be telling them all of that.

40
00:02:40.289 --> 00:02:42.766
Nobody needs all of that
on their screensaver.

41
00:02:42.766 --> 00:02:48.681
So maybe I just want to
get the time as a string,

42
00:02:48.681 --> 00:02:55.832
which I can do by calling
the method toDateString().

43
00:02:55.832 --> 00:02:57.663
Sorry, toTimeString().

44
00:03:00.214 --> 00:03:05.014
All right, so now it's at least
something a little bit more readable,

45
00:03:05.014 --> 00:03:07.020
but it's still a lot of info.

46
00:03:07.020 --> 00:03:12.360
So maybe I just want this to look more
like what you would expect a clock

47
00:03:12.360 --> 00:03:17.517
to look like wherever you are on
the planet, which conveniently,

48
00:03:17.517 --> 00:03:22.126
there is another method
called toLocaleTimeString(),

49
00:03:22.126 --> 00:03:26.881
which now just gives me a usable,
reasonably short value.

50
00:03:26.881 --> 00:03:28.201
Okay, great.

51
00:03:28.201 --> 00:03:33.542
So I now have the value I need.

52
00:03:33.542 --> 00:03:38.588
I'm gonna save this as a timeString,
so I remember what it is

53
00:03:40.731 --> 00:03:47.015
And now I can, let's say,
set the text of my text [LAUGH].

54
00:03:47.015 --> 00:03:53.035
It's a bit confusing terminology here,
but the .textContent property of an HTML

55
00:03:53.035 --> 00:03:58.287
element can allow me to assign some
new value to the text content of this.

56
00:03:58.287 --> 00:04:02.437
So I could do timeString, and

57
00:04:02.437 --> 00:04:07.447
let's see if anything happens.

58
00:04:07.447 --> 00:04:08.974
Good.

59
00:04:08.974 --> 00:04:12.475
I have a time, but
it's just staying there.

60
00:04:12.475 --> 00:04:15.995
If I refresh the page, okay, it is
changing based on when it was called.

61
00:04:15.995 --> 00:04:19.645
But it's always in the top left corner,
boring.

62
00:04:19.645 --> 00:04:24.804
And it's always stagnant if
I just leave the page open.

63
00:04:24.804 --> 00:04:29.034
So, now we got to get our
timing friends involved.

64
00:04:29.034 --> 00:04:36.634
So, what could I use to, let's say,
update this time every three seconds?

65
00:04:37.757 --> 00:04:38.742
&gt;&gt; Intervals.

66
00:04:38.742 --> 00:04:40.479
&gt;&gt; Intervals, exactly.

67
00:04:40.479 --> 00:04:41.706
Okay, great.

68
00:04:41.706 --> 00:04:45.972
So now if I were to, let's say,

69
00:04:45.972 --> 00:04:52.134
take all of this stuff and
put a function on it,

70
00:04:52.134 --> 00:04:57.106
put a bird on it, So

71
00:04:57.106 --> 00:05:01.494
this is It's gonna be, I'm just gonna
give it a name for my reference.

72
00:05:01.494 --> 00:05:05.721
So I'll call this updateTime(),
for example.

73
00:05:08.151 --> 00:05:10.071
Thank you auto format.

74
00:05:10.071 --> 00:05:13.011
Talk about that a little bit later.

75
00:05:13.011 --> 00:05:17.816
This now is something that I could
pass into a call to setInterval().

76
00:05:19.277 --> 00:05:21.793
I want an interval cuz I want
this to run continuously,

77
00:05:21.793 --> 00:05:24.877
not a timer which is just gonna wait and
then run it once.

78
00:05:24.877 --> 00:05:28.687
Sorry, not a timeout which is
just gonna wait and run it once.

79
00:05:28.687 --> 00:05:33.832
So I'm gonna set the interval, I pass in
my callback function which is updateTime,

80
00:05:33.832 --> 00:05:36.947
and then I need to pass in
the number of seconds, and

81
00:05:36.947 --> 00:05:39.931
I gave you the arbitrary
value of three seconds.

82
00:05:39.931 --> 00:05:45.120
But here is where I could mess with that
and choose something else if I wanted to.

83
00:05:45.120 --> 00:05:48.463
And so now, what did I forget to do?

84
00:05:51.633 --> 00:05:59.922
Now, I'm, there it goes.

85
00:05:59.922 --> 00:06:00.502
Yes, okay.

86
00:06:00.502 --> 00:06:02.637
Now let's refresh.

87
00:06:02.637 --> 00:06:06.618
I have to wait a little while
to get the clock because

88
00:06:06.618 --> 00:06:11.258
setInterval() doesn't
run at the beginning.

89
00:06:11.258 --> 00:06:17.914
So if I want the user to not get confused
like I just did on my own page [LAUGH] and

90
00:06:17.914 --> 00:06:24.465
see at least some kinda time at first,
I could call updateTime() once,

91
00:06:24.465 --> 00:06:28.397
so that I make sure to, now let's refresh.

92
00:06:28.397 --> 00:06:34.019
Make sure to update it and then three
seconds laterish, it'll update again.

