[00:00:00]
>> All righty, so we may have noticed that there is a handy dandy pre ID'd [LAUGH] script tag at the bottom of this HTML file where we can write the JavaScript we need to make this happen. So how did it feel to be just stretching our legs, messing with a page?

[00:00:31]

>> Pretty good.
>> All right, we're getting our feet wet, and again, the quick win category. I think it's important to start with some small wins or maybe not start but continue to try to find those opportunities for the quick wins all the time. Because there's a lot of very slow losses.

[00:00:51]
So [LAUGH] all righty, so hopefully we've now got a input check box that actually does something. I'm going to walk you through how I solve this, but there's lots of different ways to JavaScript. So [LAUGH] we're going to also have a chance like if folks have done it a different way, perhaps in one line of code [LAUGH] or in many more, we can share that with each other.

[00:01:24]
All right, we can grab that document element that we were talking about before with document.documentElement. And my handy-dandy, very smart, very large code editor is [LAUGH] helping me out with some suggestions. But that's not a method it's a property. We're going to then be able to do stuff like doc get attribute data theme to get the value of the currently set theme so I could capture that as something like current theme.

[00:02:02]
And follows well, we can [LAUGH] log the value to the console just to check on what it is. All right, so now I see some output, dark. What's all this other stuff about Vite? We're gonna talk about it later. [LAUGH] This is not the console log you are looking for Star Wars people.

[00:02:27]
No, just okay, we've got the current theme. Now we want to figure out what the new theme would be. So I'm gonna make a new variable new theme. We want this to basically be, so it's either gonna be dark or light, the string dark or the string light, and we want it to be the other one from what the current theme is, yeah?

[00:02:50]
So I could write, I could write a whole like I could declare a let variable so that I can change it to value later that's like a new theme. And then I could do a whole if current theme is dark then new theme should be light. But this is taking me forever and I've had to use multiple lines of code, which for some reason developers are averse to.

[00:03:25]
[LAUGH] So there is a shorter way to do that. Can anybody tell me what the shorter way to write like an if-else statement like this would be? Yeah.
>> Ternary operator.
>> Ternary operator, yes, so this was mentioned briefly in JavaScript first steps. But in addition to doing a whole if-else branching logic this way, we could replace this with, well this is gonna be upset because I already declared new theme.

[00:03:59]
But we can replace it with a ternary operator that's like condition move, then this is the kind of if block, and then if not, else, yeah. So, in this case, our condition is current theme is dark. And our if block is the value we want for new theme is light.

[00:04:29]
So that means that is what this is going to evaluate to which is then going to be on the right hand side of the assignment operator equals. So that's what the value of new theme is gonna be. And if it's not, then that means the current theme must be light.

[00:04:47]
So we're going to want to assign the opposite value, in this case dark to the new theme. Okay, so now I can do all of this, fabulous. Now I could just, for example, change the value of this data theme attribute once and for all with set attribute [LAUGH] set attribute, thank you VS Code, tab completion there if you start typing something in VS Code.

[00:05:20]
And you have certain language settings enabled for JavaScript, it'll complete what it knows. Is it always correct? Absolutely not. Does it help most of the time? Sure. Okay, so I can set the attribute data theme to the new theme instead. So now if I run this, okay. So it's in light mode, so that's good, but this still doesn't do anything.

[00:05:48]
And that's because I need an event listener, exactly. Okay, so I am going to put all this fun little code in a function which then I can parse as the handler function to the addEventListener. So we're gonna need to attach this to the input, this checkbox input. So I can grab that with, I'm gonna call it toggle and it has that ID toggle.

[00:06:23]
So I can do document.getElementbyId, toggle, and hopefully, let's just double check, get the toggle input element. Which is yes what I am receiving here, fabulous. Okay, so now I could do a toggle, addEventListener, drink coffee before programming if you're into that kinda thing. [LAUGH] The addEventListener, we're going to parse in the name of the event that we want to listen for.

[00:07:06]
In this case, it would be a, anybody know the name of the event that we'd wanna listen for? So, like buttons, we can listen for clicks, but on input elements we often listen for-
>> Change.
>> Change events, absolutely. And there are a whole bunch of other events that the browser knows about.

[00:07:28]
So change is a pretty useful one, and then we can parse in a function. Okay, so now, let's create a function that we can parse [LAUGH] in. So why don't I take all of this fun little code that we have here of getting the current theme, figuring out what the new theme should be, and then setting that as the new value of the data theme attribute into a function.

[00:07:57]
Which I could call a toggleTheme or changeTheme theme or whatever you wanna call it. It's not gonna take any arguments because really all of the information this needs it's figuring out for itself. And now if I parse in the toggle theme function to the addEventListener method on the toggle element, ideally we have [LAUGH] a working input element.

[00:08:27]
Let's find out. My gosh, it worked, it worked. Doesn't it feel good? Even if it took forever. [LAUGH] Okay, did anybody else have a different solution?
>> Someone just asked why not use the arrow function?
>> Why not use the arrow function? Great question. In this case, we can totally do that.

[00:08:58]
So maybe I don't actually need this toggle theme function for anywhere else except this one reference, right? And I could have declared this as like toggleTheme =, and then an arrow function expression, which looks like this sometimes called a fat arrow. So we have the arguments, and then this fat arrow, and then the body of the function.

[00:09:26]
So I could have declared it like that, and then this would still work. No reason not to, I like arrows, we all Arrow people? Arrow fans? Arrowers? Whatever, and in this case, I don't even really need to name this function and save it in a variable, right? Because I'm not gonna use it anywhere but this one place.

[00:09:49]
So I could actually make this an anonymous function because it has no name, likes to stay incognito. That I declare where I need it. So I could totally use an arrow function or the function keyword even, to declare a, well, actually, let me take that back. I could use an arrow function [LAUGH] to declare a anonymous function that will work the same way hopefully.

[00:10:25]
Indeed, okay, so good question. In this case, there is no difference. Yeah.
>> Someone had a solution where they just put, if this dot checked in the function, and then dot dot Set Attribute get a them = dark or.
>> Okay, so we can also read attributes of the input object and we can check whether it is checked or not.

[00:10:57]
We just have to make sure that we are also updating that every time the checked value changes, which is pretty much the only thing in a checkbox, that there is a change. And that's why we want to be listening for that change event so that we're not just basically setting it and forgetting it.

[00:11:20]
We're allowing the user to have their way. Okay, so this was meant to be a quick just review example to get us into the flow. And we are gonna be in our quick wins, essentially working in the same pattern. We're gonna have some very simple HTML, a script tag that is our job to fill out, and hopefully we'll add some super impressive functionality to the page.

[00:11:58]
[LAUGH] Then what we're gonna be doing in part two of the course is pulling all that together into a more full featured web app. So we're gonna be starting with bite sized pieces as we go through some of these language features and then we're going to pull them together into a bigger-than-bite-sized piece into a meal-sized piece?

[00:12:25]
I don't know, we'll figure it out.

