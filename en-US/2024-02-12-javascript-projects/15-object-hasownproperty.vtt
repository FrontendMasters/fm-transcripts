WEBVTT

1
00:00:00.090 --> 00:00:06.237
So Object,
this capital O Object is a pretty special

2
00:00:06.237 --> 00:00:11.697
object in JavaScript,
it has a no prototype.

3
00:00:11.697 --> 00:00:14.454
So what is the deal?

4
00:00:14.454 --> 00:00:17.871
Ever seen this string before, square,

5
00:00:17.871 --> 00:00:23.311
bracket lowercase object,
capital Object, square bracket?

6
00:00:25.085 --> 00:00:29.430
It's a common, I don't know how
many random airline websites or

7
00:00:29.430 --> 00:00:34.494
whatever, no shade on anybody who works
for airlines, [LAUGH] but you know.

8
00:00:34.494 --> 00:00:37.866
Random websites around the world, where,

9
00:00:37.866 --> 00:00:42.602
some thing didn't work out as
it should and I see this string,

10
00:00:42.602 --> 00:00:47.084
object Object, and it's like,
welcome object Object.

11
00:00:47.084 --> 00:00:51.553
And I'm like, [LAUGH] that's
a little objectifying but okay.

12
00:00:51.553 --> 00:00:55.439
So, and as the, again,
I haven't been on Twitter and

13
00:00:55.439 --> 00:00:59.168
the artist formerly known
as Twitter in a long time.

14
00:00:59.168 --> 00:01:04.227
But there was a classic tweet of like,
if you wanna mess with your friends,

15
00:01:04.227 --> 00:01:09.208
set your profile name to object Object and
all your developer friends will

16
00:01:09.208 --> 00:01:14.027
just get totally nerd sniped trying
to figure out what's going on, but

17
00:01:14.027 --> 00:01:16.871
really you just hard-coded the string.

18
00:01:16.871 --> 00:01:21.872
So anyway, the, if we call the two

19
00:01:21.872 --> 00:01:26.702
string method on the prototype of

20
00:01:26.702 --> 00:01:32.050
the prototype of the engines array,

21
00:01:32.050 --> 00:01:34.997
we get this string.

22
00:01:34.997 --> 00:01:38.108
And now we're getting into,

23
00:01:38.108 --> 00:01:43.838
where do we find these
properties from these objects?

24
00:01:43.838 --> 00:01:50.583
If we have an object,
That is just super random,

25
00:01:50.583 --> 00:01:54.109
but we'll call it objectina and
is she a genie in the bottle?

26
00:01:54.109 --> 00:01:59.118
Yes, the capital O, Object.entries

27
00:01:59.118 --> 00:02:04.127
method is a convenient way to enumerate

28
00:02:04.127 --> 00:02:10.670
some of the properties of
an object in JavaScript.

29
00:02:10.670 --> 00:02:15.486
And in general,
this will be pretty similar to what I

30
00:02:15.486 --> 00:02:18.337
declared this object to have.

31
00:02:20.246 --> 00:02:25.042
In the case of Object.entries,
what it returns is

32
00:02:25.042 --> 00:02:30.518
an array with the key value
pairs captured by this object.

33
00:02:30.518 --> 00:02:34.973
So the key is the property name and
the value is its value.

34
00:02:34.973 --> 00:02:39.838
So the first entity in this
array is an array with name and

35
00:02:39.838 --> 00:02:45.220
then objectina, and
then the second entity is isGenie true,

36
00:02:45.220 --> 00:02:49.583
and so on and so
forth if I had a much longer object.

37
00:02:49.583 --> 00:02:54.690
So like a fun game would be calling
Object.entries on navigator,

38
00:02:54.690 --> 00:03:00.720
let's say, or anything else that's fun
in the global scope of your console.

39
00:03:00.720 --> 00:03:07.658
Now, if I have my little obj and
I try to access the toString property,

40
00:03:11.802 --> 00:03:19.963
I get a return value that evaluates to
a function that is called toString.

41
00:03:19.963 --> 00:03:26.087
Okay, but I didn't write a toString
property in my objectina object,

42
00:03:26.087 --> 00:03:28.237
so what is the deal here?

43
00:03:28.237 --> 00:03:33.892
And that's where the .hasOwnProperty
method comes in, is it can differentiate,

44
00:03:33.892 --> 00:03:40.719
am I, Getting this value for

45
00:03:40.719 --> 00:03:45.538
this property from the object itself?

46
00:03:45.538 --> 00:03:51.462
Because if JavaScript looks for
.toString on obj,

47
00:03:51.462 --> 00:03:55.903
and it only finds name and isGenie, and

48
00:03:55.903 --> 00:04:02.364
there's no toString,
it's gonna look up the prototype

49
00:04:02.364 --> 00:04:07.225
chain to whatever the prototype of obj is.

50
00:04:09.735 --> 00:04:14.255
And if it finds a toString there,

51
00:04:14.255 --> 00:04:22.984
it's gonna use that value as if
it were objectina's own value.

52
00:04:22.984 --> 00:04:26.944
But the property doesn't belong to obj,

53
00:04:26.944 --> 00:04:32.489
it belongs to the prototype of obj and
so hasOwnProperty,

54
00:04:32.489 --> 00:04:37.920
like this is my own,
as a tiny little objectina that I am,

55
00:04:37.920 --> 00:04:42.020
my own property toString does not exists.

56
00:04:42.020 --> 00:04:43.847
It does not have its own property.

57
00:04:43.847 --> 00:04:47.635
However, it does have this
property in every sense of

58
00:04:47.635 --> 00:04:50.587
the word because of the prototype chain.

59
00:04:50.587 --> 00:04:54.837
Because JavaScript keeps looking up and
up and up and

60
00:04:54.837 --> 00:05:00.827
up the prototype chain until it finds
a correspondingly named property or

61
00:05:00.827 --> 00:05:05.754
it goes all the way to the end,
all the way to the top of the food

62
00:05:05.754 --> 00:05:10.312
chain which is object Object and
it doesn't find that,

63
00:05:16.174 --> 00:05:17.827
Property.

64
00:05:17.827 --> 00:05:21.229
And then it says, I don't know what
you're talking about, that's not a thing,

65
00:05:21.229 --> 00:05:23.568
reference or I don't have it,
there's no such thing.

66
00:05:23.568 --> 00:05:28.980
So, in this case,
if we call .toString on our obj,

67
00:05:28.980 --> 00:05:33.531
on many, many, many other objs out there,

68
00:05:33.531 --> 00:05:41.527
we will get our prototype to end all
prototypes implementation of toString,

69
00:05:41.527 --> 00:05:48.431
which is to return the extremely
helpful string, object Object.

70
00:05:49.879 --> 00:05:54.910
And I think this is one that's caused
a lot of the JavaScript community

71
00:05:54.910 --> 00:06:00.463
great harm and trauma, so we're all
healing as we go, we're working on it.

72
00:06:00.463 --> 00:06:04.534
But at least understanding why this
happens is hopefully the first step in

73
00:06:04.534 --> 00:06:05.789
the right direction.

74
00:06:05.789 --> 00:06:09.301
So yes, so
going back to our map confusion of like,

75
00:06:09.301 --> 00:06:13.239
why did for of work on both,
but map didn't work on both?

76
00:06:13.239 --> 00:06:17.456
Well, because .map is not
a universal property or

77
00:06:17.456 --> 00:06:21.486
in this case method,
because it's a function.

78
00:06:21.486 --> 00:06:24.070
It's not universal to
every JavaScript object.

79
00:06:24.070 --> 00:06:28.336
It is actually implemented
by the Array object,

80
00:06:28.336 --> 00:06:32.185
capital A Array,
which is the prototype for

81
00:06:32.185 --> 00:06:37.294
all other arrays,
which is why our engines.map worked.

82
00:06:37.294 --> 00:06:43.920
But HTMLCollection,
which was the kind of group of things that

83
00:06:43.920 --> 00:06:49.808
our element.children gave us,
that's not an array.

84
00:06:49.808 --> 00:06:54.117
It doesn't have array anywhere
up to the prototype chain, and

85
00:06:54.117 --> 00:06:58.762
it doesn't implement a .map property,
so there is no such thing.

86
00:06:58.762 --> 00:07:06.035
So this is just shedding a little bit
of light on what happened before,

87
00:07:06.035 --> 00:07:10.721
but this still might be
asking the question,

88
00:07:10.721 --> 00:07:14.318
but then how did the for-of work?

89
00:07:14.318 --> 00:07:21.002
Because is it not just calling,
top map under the hood or what?

90
00:07:21.002 --> 00:07:26.751
So, I felt compelled to include
this face meme which I personally

91
00:07:26.751 --> 00:07:32.196
make it my computer,
most days if not all days, yeah, same?

92
00:07:32.196 --> 00:07:33.098
Same, yeah.

93
00:07:33.098 --> 00:07:36.874
All right, so
let us ponder that question for a moment.

