WEBVTT

1
00:00:00.000 --> 00:00:02.467
How did all of these packages get there?

2
00:00:02.467 --> 00:00:04.637
How is a package born?

3
00:00:04.637 --> 00:00:10.213
And that is what we're gonna do right now,
is we are going to birth a new package,

4
00:00:10.213 --> 00:00:14.151
bring out of nothingness
an npm package into existence.

5
00:00:14.151 --> 00:00:16.850
We're not gonna publish
it to the interwebs for

6
00:00:16.850 --> 00:00:21.517
everyone to see the amazing three lines of
JavaScript of node that we wrote [LAUGH].

7
00:00:21.517 --> 00:00:26.731
But just to get used to what is
an npm package, we're gonna do this.

8
00:00:26.731 --> 00:00:28.735
So we're gonna make a new directory, and

9
00:00:28.735 --> 00:00:30.976
you don't have to do
this at the command line.

10
00:00:30.976 --> 00:00:34.806
You can also do this in your file explorer
or your finder or whatever it is.

11
00:00:34.806 --> 00:00:36.177
We're gonna make a directory.

12
00:00:36.177 --> 00:00:37.390
You can call it whatever you want.

13
00:00:37.390 --> 00:00:40.391
I very creatively called it where am I.

14
00:00:40.391 --> 00:00:45.264
And for some reason there is
a convention to use hyphens in the name

15
00:00:45.264 --> 00:00:47.922
of packages if we notice, [LAUGH] but

16
00:00:47.922 --> 00:00:53.608
I'm honestly not sure if that's enforced
or just really a cultural thing.

17
00:00:53.608 --> 00:00:58.551
But then we also tend to use camel
case for stuff in JavaScript a lot.

18
00:00:58.551 --> 00:01:02.739
So it's all over the place, but
we're going to create a new directory.

19
00:01:02.739 --> 00:01:07.550
We're going to move our beautiful node
script that tells us where we are into

20
00:01:07.550 --> 00:01:08.688
that directory.

21
00:01:08.688 --> 00:01:11.003
Again, you can do this graphically,
whatever.

22
00:01:11.003 --> 00:01:15.914
And then we're going to move into that
directory, change directories in there,

23
00:01:15.914 --> 00:01:17.701
and run the command npm init.

24
00:01:20.926 --> 00:01:24.922
So now that I have set all of that,
let me do it [LAUGH], okay?

25
00:01:24.922 --> 00:01:29.548
Did I already have, yes, okay?

26
00:01:29.548 --> 00:01:32.520
So I've already got a where am I?

27
00:01:32.520 --> 00:01:36.778
And so if we run no, you know what?

28
00:01:40.058 --> 00:01:42.047
Start a new.

29
00:01:42.047 --> 00:01:45.889
Okay, so if we run,

30
00:01:45.889 --> 00:01:49.962
we make a directory.

31
00:01:49.962 --> 00:01:51.105
This is not relevant, but whatever.

32
00:01:51.105 --> 00:01:51.964
We make our new directory.

33
00:01:51.964 --> 00:01:54.099
Where am I?

34
00:01:54.099 --> 00:01:56.315
We go into it.

35
00:01:56.315 --> 00:01:57.953
We copy.

36
00:02:01.470 --> 00:02:03.997
And now is where the fun begins.

37
00:02:03.997 --> 00:02:10.334
We run npm init and
a whole bunch of stuff comes out.

38
00:02:10.334 --> 00:02:14.703
So it is helpfully telling us that
essentially npm init is a command we can

39
00:02:14.703 --> 00:02:16.934
use to start a fresh new npm project.

40
00:02:16.934 --> 00:02:21.771
Yeah, package, and what this is going to

41
00:02:21.771 --> 00:02:26.483
do is actually in the end pretty simple.

42
00:02:26.483 --> 00:02:30.670
But it is helpful, especially
if we're new to npm packages and

43
00:02:30.670 --> 00:02:34.628
know ecosystem and everything,
to know what's going on.

44
00:02:34.628 --> 00:02:36.048
So let's go through it.

45
00:02:36.048 --> 00:02:37.354
It's gonna ask me for a name.

46
00:02:37.354 --> 00:02:38.964
Sure, the default is fine.

47
00:02:38.964 --> 00:02:41.659
Version.
Okay, I'm not gonna publish this.

48
00:02:41.659 --> 00:02:47.080
A very helpful program is super helpful

49
00:02:47.080 --> 00:02:52.345
[LAUGH] tells you which dir you're in.

50
00:02:52.345 --> 00:02:54.898
Okay, so I'm gonna give it a description,

51
00:02:54.898 --> 00:02:57.800
which were all those things
we saw on the npm page.

52
00:02:57.800 --> 00:03:02.790
An entry point is gonna be basically
what Is the script that you want

53
00:03:02.790 --> 00:03:06.545
me to run when somebody
tries to run your package.

54
00:03:06.545 --> 00:03:08.959
So, there's only one file in here.

55
00:03:08.959 --> 00:03:10.923
Test command is something
we'll get to in a second.

56
00:03:10.923 --> 00:03:12.911
I'm just gonna leave it blank.

57
00:03:12.911 --> 00:03:14.866
There's no git repository for this yet.

58
00:03:14.866 --> 00:03:17.518
I'm not gonna bother with the keywords.

59
00:03:17.518 --> 00:03:18.861
The author is me, but

60
00:03:18.861 --> 00:03:22.452
we would put something thing
[LAUGH] more useful in there.

61
00:03:22.452 --> 00:03:25.797
And we would think about what license we
want if we're developing open source.

62
00:03:25.797 --> 00:03:29.987
And now, npm is asking us all right,
this is what you said.

63
00:03:29.987 --> 00:03:31.487
Does that look correct?

64
00:03:31.487 --> 00:03:32.828
And if I say yes.

65
00:03:35.511 --> 00:03:36.602
Nothing happens.

66
00:03:36.602 --> 00:03:40.756
No, something did happen, and what
happened is what it just told me it was

67
00:03:40.756 --> 00:03:43.715
about to do,
it wrote a file called package.json.

68
00:03:43.715 --> 00:03:49.485
And this little JSON file, which again,
JSON is JavaScript Object Notation.

69
00:03:49.485 --> 00:03:53.635
It's just a bunch of keys and
a bunch of values.

70
00:03:53.635 --> 00:04:00.776
And that is what a npm package essentially
is defined by is its package.json.

71
00:04:00.776 --> 00:04:06.207
This is like a manifest for
what is this package doing?

72
00:04:06.207 --> 00:04:07.114
What can you do with it?

73
00:04:07.114 --> 00:04:08.402
Where does its code live?

74
00:04:08.402 --> 00:04:09.271
Who is it by?

75
00:04:09.271 --> 00:04:09.837
What version?

76
00:04:09.837 --> 00:04:15.282
Is it all of this stuff,
which then npm and all of the information,

77
00:04:15.282 --> 00:04:21.215
all the metadata that we saw on the npm
website is using to understand this

78
00:04:21.215 --> 00:04:26.394
as a usable, wrapped up with
a little bow JavaScript program.

79
00:04:26.394 --> 00:04:31.576
All right, so this is review for those
of us who've been working with No js for

80
00:04:31.576 --> 00:04:36.779
a while, but what we now have, if I look
in my directory, is I have two files.

81
00:04:36.779 --> 00:04:37.866
So exciting.

82
00:04:37.866 --> 00:04:42.890
The package.json, that it just
wrote with all of these keys and

83
00:04:42.890 --> 00:04:49.046
values that look exactly the same as my
command line prompts that I filled out.

84
00:04:49.046 --> 00:04:53.661
And the only thing that's
interesting here is

85
00:04:53.661 --> 00:04:58.274
that when it asked me
about that test command,

86
00:04:58.274 --> 00:05:02.884
it was asking me for
a script as we call in here,

87
00:05:02.884 --> 00:05:08.233
that would be what happens
when I run the test script.

88
00:05:08.233 --> 00:05:13.208
Which is defined just in this
JSON file by a string called test

89
00:05:13.208 --> 00:05:18.573
with some other string of commands
that I want to come after node at

90
00:05:18.573 --> 00:05:23.671
that at the command line or
anything else like echoing stuff.

91
00:05:23.671 --> 00:05:27.680
And this is where we end up
doing a lot of our developer

92
00:05:27.680 --> 00:05:31.701
workflow stuff is some tools,
and also ourselves.

93
00:05:31.701 --> 00:05:36.282
We'll write little scripts for ourselves
that make those repetitive tasks and

94
00:05:36.282 --> 00:05:40.108
those really long commands, and
lots of flags and stuff easier for

95
00:05:40.108 --> 00:05:41.694
us to run from within node.

96
00:05:41.694 --> 00:05:45.309
So we'll look at some other options for
that later.

97
00:05:45.309 --> 00:05:50.279
But the way that these scripts work
is if I now run well, okay, so

98
00:05:50.279 --> 00:05:55.619
the way that the package now works is
that I could run the where am I file

99
00:05:55.619 --> 00:06:00.709
directly like we did before, but
I can also run this as a program.

100
00:06:00.709 --> 00:06:04.270
So, dot representing
the current directory.

101
00:06:04.270 --> 00:06:08.980
Node now thanks to its buddy MBM knows,

102
00:06:08.980 --> 00:06:14.419
thanks to my entry point or
main script here.

103
00:06:14.419 --> 00:06:18.647
If I'm just running this whole package,
what am I running and

104
00:06:18.647 --> 00:06:24.276
that's gonna be the same code as if I run
node whereAmI.js directly in this case.

105
00:06:24.276 --> 00:06:28.739
But in a more complex project, there might
be an entry point that then does a whole

106
00:06:28.739 --> 00:06:31.889
bunch of other stuff and
figures out things, and it looks

107
00:06:31.889 --> 00:06:36.506
at different values of the process and bla
bla and doesn't just print out a string.

108
00:06:36.506 --> 00:06:38.601
But still, this is the basic idea.

109
00:06:38.601 --> 00:06:41.468
Now about these scripts,
how do I run that?

110
00:06:41.468 --> 00:06:44.681
If I do node test, is it that?

111
00:06:44.681 --> 00:06:47.254
Module not found.

112
00:06:47.254 --> 00:06:48.748
No, that didn't work.

113
00:06:48.748 --> 00:06:55.188
So this is looking for something like a
file called test, and that's not a thing.

114
00:06:55.188 --> 00:07:00.181
This test word is literally just
a definition of a key with a value

115
00:07:00.181 --> 00:07:01.667
in this JSON file.

116
00:07:01.667 --> 00:07:07.115
And so there's a little bit of
a different ergonomic thing for

117
00:07:07.115 --> 00:07:10.274
this, which is that we run npm run.

118
00:07:10.274 --> 00:07:16.038
And then the name of the script
that is within the package.json

119
00:07:16.038 --> 00:07:20.941
that is in the place where
I am currently running npm.

120
00:07:20.941 --> 00:07:23.572
Let's just see what that means.

121
00:07:23.572 --> 00:07:28.072
So if I run npm run tests,
now this is telling me which

122
00:07:28.072 --> 00:07:32.472
package is actually I'm
executing a script from,

123
00:07:32.472 --> 00:07:36.769
this is, where am I version 1.0.0.0, and

124
00:07:36.769 --> 00:07:41.298
version 0.0 will probably
be more appropriate.

125
00:07:41.298 --> 00:07:42.652
And it's the which script I'm running.

126
00:07:42.652 --> 00:07:43.609
It's called test.

127
00:07:43.609 --> 00:07:46.101
What is the actual value of that script?

128
00:07:46.101 --> 00:07:51.284
Well, it was this command
to basically print error

129
00:07:51.284 --> 00:07:56.115
no test specified to the console and
then exit.

130
00:07:56.115 --> 00:07:58.781
And that is exactly
what it did after that.

131
00:07:58.781 --> 00:08:01.994
So, this is just about the most
basic script we could do, and

132
00:08:01.994 --> 00:08:05.335
it's important to note that like
this echo thing, all right?

133
00:08:05.335 --> 00:08:08.248
We're not in JavaScript land.

134
00:08:08.248 --> 00:08:12.431
We're talking about, in this shell,

135
00:08:12.431 --> 00:08:18.911
executing as if I had typed it
right here at the command line.

136
00:08:18.911 --> 00:08:23.925
Wait, hello, so basically there is

137
00:08:23.925 --> 00:08:32.177
a difference between running
a JavaScript script that may or

138
00:08:32.177 --> 00:08:37.352
may not be exposed as the entry point or

139
00:08:37.352 --> 00:08:44.986
the main scripter of your package and
a package script.

140
00:08:44.986 --> 00:08:49.658
We could think of it, which is essentially
useful for doing things that we,

141
00:08:49.658 --> 00:08:54.403
as the developer, will need to do while
we're working on or in this package.

142
00:08:54.403 --> 00:08:58.032
It's not usually something that the end
user is gonna be worried about.

143
00:08:58.032 --> 00:09:00.755
It's things related to
our developer workflow.

144
00:09:00.755 --> 00:09:04.674
So that's why test is a very common one.

145
00:09:04.674 --> 00:09:06.527
And in the ideal JavaScript world,

146
00:09:06.527 --> 00:09:10.743
we would not just be logging like,
you forgot to write tests to the console.

147
00:09:10.743 --> 00:09:14.994
We would be, to the terminal rather,
we would be running a test

148
00:09:14.994 --> 00:09:19.907
suite that actually tests that our
code does what it says it's gonna do.

149
00:09:19.907 --> 00:09:21.068
Which, if I had done,

150
00:09:21.068 --> 00:09:24.997
might have caught many of the errors
that we have been learning so much from.

151
00:09:24.997 --> 00:09:26.559
So good that I didn't do that.

152
00:09:26.559 --> 00:09:30.912
But so this is where we're starting
to get into the world of like,

153
00:09:30.912 --> 00:09:33.604
now we're out of writing JavaScript and

154
00:09:33.604 --> 00:09:37.982
we're into like dealing with
JavaScript packages and tooling.

155
00:09:37.982 --> 00:09:44.261
And so we're gonna look at some other ways
that these scripts come into use often,

156
00:09:44.261 --> 00:09:49.190
but things like npm run test are very
common in a lot of projects.

157
00:09:49.190 --> 00:09:54.524
And a lot of the time if you
are looking at it a complex code base,

158
00:09:54.524 --> 00:10:00.260
and there will be, for example,
a script to build it for yourself or

159
00:10:00.260 --> 00:10:05.411
a script to run a different
version of it or things like that.

160
00:10:05.411 --> 00:10:08.489
So there can be whatever script you want.

161
00:10:08.489 --> 00:10:11.770
It's arbitrarily defined
by the package creator, and

162
00:10:11.770 --> 00:10:14.851
it's really just key values,
string in your JSON.

163
00:10:14.851 --> 00:10:17.129
So that's the magic.

164
00:10:17.129 --> 00:10:19.096
That is all of the magic, basically.

165
00:10:19.096 --> 00:10:23.133
Now, there's some more magic
going on under the hood.

166
00:10:23.133 --> 00:10:27.968
And we're gonna take advantage
of some of that magic in a bit.

167
00:10:27.968 --> 00:10:30.154
So yes, so we've seen this package JSON,

168
00:10:30.154 --> 00:10:32.715
I guess it is helpful to
have a little coloration.

169
00:10:32.715 --> 00:10:36.878
And this is basically whatever
words we define as keys and

170
00:10:36.878 --> 00:10:40.272
that script file we can
then put after npm run.

