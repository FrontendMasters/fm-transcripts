WEBVTT

1
00:00:00.109 --> 00:00:05.375
Okay, so what we're gonna try to
do now is not a quick win with

2
00:00:05.375 --> 00:00:11.471
our little just simple old index.htmls,
but rather not a quick win,

3
00:00:11.471 --> 00:00:16.347
but a Vitr win,
[LAUGH] a little French pun for you there.

4
00:00:16.347 --> 00:00:17.839
[LAUGH] That's not how French works.

5
00:00:17.839 --> 00:00:23.830
But anyway, of making this starter app
that the lovely create Vite package

6
00:00:23.830 --> 00:00:29.455
booted up for us to help us understand
the structure of a Vite project.

7
00:00:29.455 --> 00:00:35.112
We're gonna take this and
morph it into a little selfie cam

8
00:00:35.112 --> 00:00:40.770
that uses some browsery goodness
in order to take a photo,

9
00:00:40.770 --> 00:00:45.735
[LAUGH] which is just the very
scratching the surface

10
00:00:45.735 --> 00:00:50.007
of what this stuff can do in the browser,
but

11
00:00:50.007 --> 00:00:55.000
let's talk about some more
of these browser APIs.

12
00:00:55.000 --> 00:00:58.162
Because for some reason, memes always
involve different spellings, so

13
00:00:58.162 --> 00:01:01.222
developers slides always have to
involve [LAUGH] different spellings.

14
00:01:01.222 --> 00:01:06.292
Okay, so there is on our
handy-dandy navigator object,

15
00:01:06.292 --> 00:01:09.809
and again in browser land, not in Node,

16
00:01:09.809 --> 00:01:14.888
in the browser that we are running
this client side app in.

17
00:01:14.888 --> 00:01:18.717
There is a navigator, and
that has a mediaDevices, and

18
00:01:18.717 --> 00:01:21.497
that has a method called getUserMedia.

19
00:01:21.497 --> 00:01:24.072
And can you read all about the details and

20
00:01:24.072 --> 00:01:27.496
all of the other stuff that
you can do with this on MDN?

21
00:01:27.496 --> 00:01:29.712
Why, you betcha, you sure can.

22
00:01:29.712 --> 00:01:36.042
So we're just gonna talk about this
getUserMedia, which we call this and

23
00:01:36.042 --> 00:01:41.452
we pass in a kind of little options
object where we can say at what

24
00:01:41.452 --> 00:01:46.781
kinds of media we are trying to
get from the user's computer.

25
00:01:46.781 --> 00:01:51.037
And so we could be trying to get
their microphone, their audio media,

26
00:01:51.037 --> 00:01:54.659
we could be trying to get their camera,
their video media.

27
00:01:54.659 --> 00:01:59.899
And this is where there's
websites that they're like,

28
00:01:59.899 --> 00:02:05.150
do you wanna give permission to
your camera off to this thing.

29
00:02:05.150 --> 00:02:09.712
There's other APIs for things like
location and whatever other stuff we might

30
00:02:09.712 --> 00:02:13.109
need, so this is just, again,
scratching the surface.

31
00:02:13.109 --> 00:02:18.160
So this is an async operation, because it
might take a minute for, first of all,

32
00:02:18.160 --> 00:02:23.383
the user to approve that it wants to allow
this random website access to its system.

33
00:02:23.383 --> 00:02:27.237
But also,
it takes a minute to do all the things,

34
00:02:27.237 --> 00:02:30.250
to talk to the camera and set it all up.

35
00:02:30.250 --> 00:02:35.194
So that's why there's an async
function and we need to await it.

36
00:02:35.194 --> 00:02:40.671
And then what we can do,
what we get back here is a stream.

37
00:02:40.671 --> 00:02:47.216
Again, we can go to our best friend
forever and be like, getUserMedia.

38
00:02:47.216 --> 00:02:48.561
How does that work?

39
00:02:48.561 --> 00:02:52.361
And look at all the details of
what is it blah, blah, blah,

40
00:02:52.361 --> 00:02:56.782
produces a media stream with all
this stuff and it returns a promise.

41
00:02:56.782 --> 00:03:00.166
So it's asynchronous, so
we can go and check if we want to,

42
00:03:00.166 --> 00:03:01.875
what is the API of this thing?

43
00:03:01.875 --> 00:03:04.809
Again, it's just a convention
that the browser exposes.

44
00:03:04.809 --> 00:03:10.965
But for now, you can just trust
me that it returns a stream,

45
00:03:10.965 --> 00:03:16.753
and that then what we can do
is if we have a video element,

46
00:03:16.753 --> 00:03:21.803
an HTML video element,
we can assign that stream

47
00:03:21.803 --> 00:03:26.632
to be the source object
of this video element.

48
00:03:26.632 --> 00:03:30.376
And then we can do stuff
like play the video, or

49
00:03:30.376 --> 00:03:35.280
pause the video, or
whatever else someone might want to do.

50
00:03:35.280 --> 00:03:38.778
And so in this case, because we asked for
audio, this will be a video with audio.

51
00:03:38.778 --> 00:03:42.004
We might also, for
a selfie cam, for example,

52
00:03:42.004 --> 00:03:44.839
just to need the video part of the stream.

53
00:03:44.839 --> 00:03:49.210
And is there a whole bunch more one could
say about these streams and this data and

54
00:03:49.210 --> 00:03:51.179
how it's being all passed around?

55
00:03:51.179 --> 00:03:52.037
Of course, there is.

56
00:03:52.037 --> 00:03:58.559
But for now, we just wanna do some fun
stuff of messing with the browser.

57
00:03:58.559 --> 00:04:04.125
And so this is one way that we
can grab the video media or

58
00:04:04.125 --> 00:04:07.107
audio media from our users.

59
00:04:07.107 --> 00:04:10.085
And just a quick note is that this
is like the modern way to do this,

60
00:04:10.085 --> 00:04:12.210
but some older browsers
don't support this.

61
00:04:12.210 --> 00:04:16.305
So you sometimes see try catch or
whatever around it, but you know what,

62
00:04:16.305 --> 00:04:20.671
we are living in the modern world here
in our quick little Vite project that's

63
00:04:20.671 --> 00:04:24.526
running in our modern browser, so
we're not gonna worry about it.

64
00:04:26.060 --> 00:04:30.785
Okay, so
we're gonna pull all this in a second,

65
00:04:30.785 --> 00:04:35.743
but the other thing that
becomes useful here is when

66
00:04:35.743 --> 00:04:40.470
we mix this video situation
with another super,

67
00:04:40.470 --> 00:04:43.931
super useful and super powerful and

68
00:04:43.931 --> 00:04:49.261
super massive API of canvases,
the canvas [LAUGH] API.

69
00:04:49.261 --> 00:04:53.986
So canvas,
it's another element in our angled

70
00:04:53.986 --> 00:04:57.538
tags that we might have in our HTML.

71
00:04:57.538 --> 00:05:01.866
And the canvas API is one
of these entire sections of

72
00:05:01.866 --> 00:05:06.798
[LAUGH] the browser APIs that
allows us to do, whoa, okay,

73
00:05:06.798 --> 00:05:11.142
yes, this is an element,
and blah, blah, blah.

74
00:05:11.142 --> 00:05:16.198
And I was actually trying to get the API,
but I pressed Enter, too.

75
00:05:16.198 --> 00:05:20.965
So okay, the canvas API, which again,
is part of our massive reference of all

76
00:05:20.965 --> 00:05:25.602
these web API's, tells us all about
different stuff that we can do with it.

77
00:05:25.602 --> 00:05:30.245
Basically, it all hinges upon
we have a canvas element.

78
00:05:30.245 --> 00:05:36.669
And then we get what's called a rendering
context that's provided by that element.

79
00:05:36.669 --> 00:05:41.761
And the way this works is that
we call a method on the HTML

80
00:05:41.761 --> 00:05:47.091
canvas element object called
getContext and we pass in.

81
00:05:47.091 --> 00:05:51.701
There's also a 3D option, perhaps, there's
all kinds of stuff you can do with this,

82
00:05:51.701 --> 00:05:53.713
but we want a 2D context in this case.

83
00:05:53.713 --> 00:05:59.455
We're gonna get that context and
then we can use the context object,

84
00:05:59.455 --> 00:06:04.014
which is just this whole long
thing I can go read about.

85
00:06:04.014 --> 00:06:08.285
This exposes a whole
bunch of properties in

86
00:06:08.285 --> 00:06:13.269
a highly imperative paradigm
that allow us to mess

87
00:06:13.269 --> 00:06:18.149
with this canvas object
in our user's browser.

88
00:06:18.149 --> 00:06:24.107
So that can be used, there's entire
art and creative coding libraries.

89
00:06:24.107 --> 00:06:27.054
If you've heard of P5.js, for example,

90
00:06:27.054 --> 00:06:31.528
or there's whole kinds of things
that are built on top of this API.

91
00:06:31.528 --> 00:06:36.048
Right now,
we're just gonna do a couple tricks.

92
00:06:36.048 --> 00:06:40.291
And so, okay, so
one of the tricks that we can do,

93
00:06:40.291 --> 00:06:44.939
once we have this context is
we can change the style of,

94
00:06:44.939 --> 00:06:50.295
it's almost pick the paint color
in your MSPaint or whatever,

95
00:06:50.295 --> 00:06:56.590
[LAUGH] and set the fill style property
to, let's say, the color yellow.

96
00:06:56.590 --> 00:07:02.159
And then we can fill a rectangle
by calling .fillRect.

97
00:07:02.159 --> 00:07:05.826
And that is we're gonna pass in a bunch
of numbers to it that the canvas

98
00:07:05.826 --> 00:07:09.702
is gonna know how to turn into an actual
yellow rectangle on your screen.

