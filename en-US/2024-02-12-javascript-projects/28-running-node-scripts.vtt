WEBVTT

1
00:00:00.130 --> 00:00:04.909
So the thing that we're
mostly gonna be doing

2
00:00:04.909 --> 00:00:09.436
is writing some JavaScript code in a file,

3
00:00:09.436 --> 00:00:13.735
often with a .js extension, usually.

4
00:00:13.735 --> 00:00:18.297
And then running that script, as it were,

5
00:00:18.297 --> 00:00:22.109
in Node by passing the file name in.

6
00:00:22.109 --> 00:00:27.153
So, if folks want to take this
opportunity to make a new file,

7
00:00:27.153 --> 00:00:30.940
whereAmi.js or
whatever you want to call it.

8
00:00:30.940 --> 00:00:35.305
And you can do this in your
code editor of choice,

9
00:00:35.305 --> 00:00:40.640
you can do it at the command line,
if you would like, with.

10
00:00:42.674 --> 00:00:47.232
Your command line code editor of choice,
I feel like people can.

11
00:00:47.232 --> 00:00:52.252
Okay, so
if we create a script like whereAmI.js,

12
00:00:52.252 --> 00:00:59.982
which I'm just gonna do right in here
by touching a file called whereAmI.js.

13
00:00:59.982 --> 00:01:04.820
And I'm just gonna open my little
friend vim [LAUGH] because I

14
00:01:04.820 --> 00:01:07.828
don't want to just leave my window.

15
00:01:07.828 --> 00:01:11.049
So just real quickly, I'm gonna paste
this in, which I can do now, and

16
00:01:11.049 --> 00:01:12.578
just a little Ctrl+V, okay.

17
00:01:12.578 --> 00:01:18.082
And then I'm going to quit vim [LAUGH] and
let's just make sure with cat,

18
00:01:18.082 --> 00:01:22.571
which is just gonna print out
whatever is in this file.

19
00:01:22.571 --> 00:01:25.181
Let's just make sure that this worked.

20
00:01:25.181 --> 00:01:29.725
And so, okay, so I have exactly
whatever I had in my slides.

21
00:01:29.725 --> 00:01:34.211
Help me, [LAUGH] in this file now,
okay, cool.

22
00:01:34.211 --> 00:01:37.841
So now we're gonna talk about what is
all going on in there in a second.

23
00:01:37.841 --> 00:01:40.032
But we see some words
that we recognize and

24
00:01:40.032 --> 00:01:42.671
we see some words that we
don't recognize maybe.

25
00:01:42.671 --> 00:01:46.826
And for
now we're just going to try it out,

26
00:01:46.826 --> 00:01:50.873
we're just going to node whereAmI.js.

27
00:01:50.873 --> 00:01:53.678
And my shell knows what files I have, so

28
00:01:53.678 --> 00:01:57.773
it's completing things for
me, thank you, computer.

29
00:01:57.773 --> 00:02:02.703
So if I run this, it said,
you are here, and then after a minute,

30
00:02:02.703 --> 00:02:06.664
it told me the path to my
current working directory.

31
00:02:08.424 --> 00:02:12.637
And so let us look at the contents here,
with some syntax highlighting,

32
00:02:12.637 --> 00:02:15.204
to see exactly how we
got that information.

33
00:02:15.204 --> 00:02:19.746
And again, keeping in mind
that there was a little delay,

34
00:02:19.746 --> 00:02:26.381
roughly a second or so between the first
line printing and the second line.

35
00:02:26.381 --> 00:02:28.645
And so let's look at what's going on.

36
00:02:28.645 --> 00:02:34.031
We've got our regular old console.log,
looks the same as our client side scripts.

37
00:02:34.031 --> 00:02:39.028
We've got a line that doesn't look
like something we usually write in

38
00:02:39.028 --> 00:02:40.644
client side scripts.

39
00:02:40.644 --> 00:02:46.580
And that is calling a built in that
we have access to called process.

40
00:02:46.580 --> 00:02:51.853
Which this gives us, so
it's not the same, but in the client,

41
00:02:51.853 --> 00:02:58.634
in the browser, we can get access to the
window where this is currently running.

42
00:02:58.634 --> 00:03:03.704
In the server side, we have access
to the process in this system

43
00:03:03.704 --> 00:03:08.487
where this JavaScript stack and
its heap and all of its stuff

44
00:03:08.487 --> 00:03:13.461
that's going on and
all of the Node environment [COUGH] sorry,

45
00:03:13.461 --> 00:03:19.179
all of the Node stuff that's around it,
is actually running.

46
00:03:19.179 --> 00:03:21.769
And that process object exposes
a whole bunch of different stuff,

47
00:03:21.769 --> 00:03:23.584
you can read all about
it in the Node.js docs.

48
00:03:23.584 --> 00:03:28.495
And by the way, we've now sort of exited

49
00:03:28.495 --> 00:03:34.278
the frontier of what MDN
is our best friend for.

50
00:03:34.278 --> 00:03:38.241
So now we're gonna have to
use other websites, which.

51
00:03:38.241 --> 00:03:42.845
Anyway, so the Node.js docs will give you
all kinds of details about process and

52
00:03:42.845 --> 00:03:44.682
all of the things that it can do.

53
00:03:44.682 --> 00:03:45.690
And we're not going to
talk about all of them.

54
00:03:45.690 --> 00:03:49.740
But one of the things it has is
a cwd method, which stands for

55
00:03:49.740 --> 00:03:54.293
Current Working Directory,
which when you call it will give you.

56
00:03:55.811 --> 00:03:57.041
The current working directory [LAUGH].

57
00:03:58.491 --> 00:04:03.025
So, what we're doing then is calling our
good friend setTimeout, which we can use.

58
00:04:03.025 --> 00:04:07.101
But similar to console is referring to
a totally different thing than what it

59
00:04:07.101 --> 00:04:08.511
refers to in the browser.

60
00:04:08.511 --> 00:04:11.274
Which is the browser's
built in timeout method.

61
00:04:11.274 --> 00:04:14.255
So Node again has like
reimplemented this for us, so

62
00:04:14.255 --> 00:04:17.597
that we can continue setting
timeouts all over the place.

63
00:04:17.597 --> 00:04:22.290
And in our timeout, we are just
basically logging that string and

64
00:04:22.290 --> 00:04:25.373
we're waiting a second for that timeout.

65
00:04:25.373 --> 00:04:27.261
So that's what's happening.

66
00:04:27.261 --> 00:04:30.791
Tiny little script, but
lots going on under the hood.

67
00:04:30.791 --> 00:04:35.431
And really decades of evolution
of JavaScript encapsulated in

68
00:04:35.431 --> 00:04:37.641
these three lines of code.

69
00:04:37.641 --> 00:04:41.809
So yeah, so these are some things,
we just have to keep in mind,

70
00:04:41.809 --> 00:04:43.443
some things are common.

71
00:04:43.443 --> 00:04:48.186
There's like a Venn diagram of
APIs available in the browser

72
00:04:48.186 --> 00:04:52.194
that we're used to,
like setTimeout and window.

73
00:04:52.194 --> 00:04:56.021
And APIs that are available
in Node like process and

74
00:04:56.021 --> 00:05:00.478
setTimeout [LAUGH] and
then ones that are available in both.

75
00:05:00.478 --> 00:05:01.957
And so in this case,

76
00:05:01.957 --> 00:05:07.443
setTimeout is the only one of these
three that is cross platform as it were.

77
00:05:07.443 --> 00:05:11.635
But suffice it to say, this is obviously
not an exhaustive list of all of the,

78
00:05:11.635 --> 00:05:13.196
well, perhaps obviously.

79
00:05:13.196 --> 00:05:17.682
This is not an exhaustive list of all of
the things that you have access to out of

80
00:05:17.682 --> 00:05:19.487
the box, as it were, in Node.

81
00:05:19.487 --> 00:05:25.558
But keep in mind that not
everything you're used to getting,

82
00:05:25.558 --> 00:05:33.431
like document, might be provided by
the ever so loving Node developers.

83
00:05:33.431 --> 00:05:37.607
So keep in mind that we're now
in a totally different context.

84
00:05:37.607 --> 00:05:40.502
And again JavaScript isn't really so

85
00:05:40.502 --> 00:05:44.576
good at just running without
a surrounding context.

86
00:05:44.576 --> 00:05:48.540
Because it was developed to live within
everything the browser was doing.

87
00:05:48.540 --> 00:05:53.357
So, when it got brought to the server
side, a lot of that doing,

88
00:05:53.357 --> 00:05:59.426
if we wanna keep using the same principles
and the same syntax and the same model,

89
00:05:59.426 --> 00:06:05.871
if we will, paradigm of programming needs
to be reimplemented in a new environment.

90
00:06:05.871 --> 00:06:10.276
And now there's even more different
environments where JavaScript can run.

91
00:06:10.276 --> 00:06:14.455
We're not gonna get into it, but
Node is the most common one.

