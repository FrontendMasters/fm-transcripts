WEBVTT

1
00:00:00.006 --> 00:00:02.980
All right, lift off.

2
00:00:02.980 --> 00:00:04.380
Let the confusion begin.

3
00:00:04.380 --> 00:00:10.038
Okay, we have been talking about
iteration in JavaScript, and

4
00:00:10.038 --> 00:00:15.560
we know a couple of ways to
iterate in JavaScript from before.

5
00:00:15.560 --> 00:00:18.280
We've done some dot mapping on arrays.

6
00:00:18.280 --> 00:00:22.062
We learned recently we can
only do it on arrays and

7
00:00:22.062 --> 00:00:26.981
things that ultimately have
an array somewhere up the chain.

8
00:00:26.981 --> 00:00:30.371
We've seen the for of loop.

9
00:00:31.891 --> 00:00:38.791
Any other iteration flavors that
folks would like to share they use?

10
00:00:38.791 --> 00:00:41.054
I heard a couple earlier.

11
00:00:41.054 --> 00:00:45.308
Other ways to iterate
over stuff in JavaScript?

12
00:00:45.308 --> 00:00:47.122
There's a few.

13
00:00:47.122 --> 00:00:49.192
&gt;&gt; .filter()?

14
00:00:49.192 --> 00:00:53.726
&gt;&gt; Well, okay, so .filter(),
similar to map, is iterating over things.

15
00:00:53.726 --> 00:00:56.104
It's just kind of doing
a different operation, but

16
00:00:56.104 --> 00:00:57.515
that's also an array friend.

17
00:00:57.515 --> 00:00:58.544
&gt;&gt; .forEach()?

18
00:00:58.544 --> 00:01:02.807
&gt;&gt; So .forEach() is another one which you
might have noticed actually does work on

19
00:01:02.807 --> 00:01:04.982
things like HTML collections, I think.

20
00:01:04.982 --> 00:01:06.347
Let's double-check that.

21
00:01:11.691 --> 00:01:16.859
Children, well,
there's just one thing in it,

22
00:01:16.859 --> 00:01:23.258
okay, but let's try [LAUGH]
document.children.forEach,

23
00:01:23.258 --> 00:01:25.736
not a function, okay.

24
00:01:25.736 --> 00:01:30.041
In any case, forEach does prop
up on a lot of objects, but

25
00:01:30.041 --> 00:01:34.056
it is not something we
can always count on.

26
00:01:34.056 --> 00:01:39.949
And there are other similarly iterative
methods that specific objects and

27
00:01:39.949 --> 00:01:45.237
their descendants down the prototype
chain might implement.

28
00:01:45.237 --> 00:01:49.834
So there's really as many
different methods that iterate

29
00:01:49.834 --> 00:01:52.187
over stuff as you might want.

30
00:01:53.437 --> 00:01:58.821
And things like for
of have come in more recently as a more

31
00:01:58.821 --> 00:02:05.472
kind of standardized way that
we're able to iterate over things.

32
00:02:05.472 --> 00:02:10.146
So that is a pretty relatively,
not super new, but

33
00:02:10.146 --> 00:02:15.150
relatively new development
in JavaScript that allows

34
00:02:15.150 --> 00:02:19.824
us to not only I call this method,
like .map() or

35
00:02:19.824 --> 00:02:25.044
.forEach() on objects which
implement this method or

36
00:02:25.044 --> 00:02:31.375
have a prototype that implements
this method or blah, blah, blah.

37
00:02:31.375 --> 00:02:38.134
But for
of is designed to work on any object,

38
00:02:38.134 --> 00:02:43.260
whatsoever, that is iterable.

39
00:02:45.320 --> 00:02:47.720
Okay, didn't I just talk in circles?

40
00:02:47.720 --> 00:02:53.000
So what's an object that's iterable if
not an object that has certain things?

41
00:02:53.000 --> 00:02:55.537
Well, it is an object that
has a certain property,

42
00:02:55.537 --> 00:02:59.375
as everything is in JavaScript, we have
objects and they have properties and

43
00:02:59.375 --> 00:03:01.453
that's pretty much the end of the story.

44
00:03:01.453 --> 00:03:06.446
Although, not really, cuz we have decades
of humans trying to deal with that.

45
00:03:06.446 --> 00:03:13.025
But anyway, the definition of
an iterable in JavaScript now,

46
00:03:13.025 --> 00:03:17.992
since ES6, which I believe is like 2015,

47
00:03:17.992 --> 00:03:25.336
is an object iterable if it has
an iterator, an @@iterator method.

48
00:03:25.336 --> 00:03:26.598
Which, like, what is that?

49
00:03:26.598 --> 00:03:30.745
We don't even have that character
much except in strings.

50
00:03:32.475 --> 00:03:37.765
The way we access that
iterator thing is as a symbol.

51
00:03:37.765 --> 00:03:43.309
So there is this concept of symbols,
the symbol,

52
00:03:43.309 --> 00:03:48.721
capital S symbol,
will give you certain of these

53
00:03:48.721 --> 00:03:54.148
special properties, like symbol.iterator.

54
00:03:54.148 --> 00:04:01.576
That property existing doesn't
quite make an object iterable.

55
00:04:01.576 --> 00:04:06.719
That property has to return or
evaluate to,

56
00:04:06.719 --> 00:04:11.584
point to, the correct type of function,

57
00:04:11.584 --> 00:04:17.005
which is a function that
takes no arguments and

58
00:04:17.005 --> 00:04:21.314
returns an iterator object, Cool,

59
00:04:21.314 --> 00:04:25.067
we're just going up the chain of

60
00:04:25.067 --> 00:04:30.932
vocabulary like it's a prototype chain.

61
00:04:30.932 --> 00:04:34.492
Okay, so then we need to talk
about what is an iterator then.

62
00:04:34.492 --> 00:04:37.122
How do I know what
function I need to write?

63
00:04:37.122 --> 00:04:40.422
If I wanna make an object iterable,
what do I need to do?

64
00:04:40.422 --> 00:04:45.114
You need to return an iterator from
the function that is the value of symbol

65
00:04:45.114 --> 00:04:46.612
iterator, okay.

66
00:04:46.612 --> 00:04:54.068
So the iterator definition then is
basically any object that has a .next(),

67
00:04:54.068 --> 00:04:59.296
which is a method,
meaning it points to a function, and

68
00:04:59.296 --> 00:05:06.217
that function returns objects with
a done property and a value property.

69
00:05:06.217 --> 00:05:10.423
And done is a Boolean, which shockingly

70
00:05:10.423 --> 00:05:15.134
indicates whether iteration is done or
not.

71
00:05:15.134 --> 00:05:21.480
And value is the latest value

72
00:05:21.480 --> 00:05:26.782
to have been iterated.

73
00:05:26.782 --> 00:05:31.175
At this point the English language is
starting to break down with JavaScript,

74
00:05:31.175 --> 00:05:33.162
but it's my version of it.

75
00:05:33.162 --> 00:05:38.449
But the idea is that an iterator,
you can call .next() on, and

76
00:05:38.449 --> 00:05:43.930
when you call .next() on an iterator,
you get back an object that

77
00:05:43.930 --> 00:05:49.910
tells you whether the iterator is done and
what value it has just spit out.

78
00:05:50.960 --> 00:05:54.426
And so by repetitively calling .next(),

79
00:05:54.426 --> 00:05:58.630
you can get each successive
value out of the iterator.

