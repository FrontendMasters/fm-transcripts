WEBVTT

1
00:00:00.590 --> 00:00:06.570
All right, so why don't we put our heads
together and work through a solution?

2
00:00:07.630 --> 00:00:11.934
And again,
this is not the only way one could do it.

3
00:00:11.934 --> 00:00:14.470
This whole API, if you will,

4
00:00:14.470 --> 00:00:19.036
of this is how we expect our
colleague across the way,

5
00:00:19.036 --> 00:00:24.210
who doesn't wanna have to worry
about how to implement modal

6
00:00:24.210 --> 00:00:30.344
dialogues with JavaScript,
let them just have this nice interface.

7
00:00:30.344 --> 00:00:35.082
And again, we're just sort of pretending
I've given you this edict that this is how

8
00:00:35.082 --> 00:00:39.524
the modal object should work, but
it's the web, it's the free-for-all.

9
00:00:39.524 --> 00:00:44.569
So [LAUGH] if you want to redo this with
a totally different way to break down

10
00:00:44.569 --> 00:00:50.276
these objects, these classes, if you
wanna try doing it again without classes,

11
00:00:50.276 --> 00:00:54.526
with functional programming,
what have you, have at it.

12
00:00:54.526 --> 00:00:59.734
But right now, to practice our
class syntax, we're gonna go for

13
00:00:59.734 --> 00:01:05.713
it, and we're gonna fill in the blanks
here on our modal and form classes.

14
00:01:07.153 --> 00:01:08.873
So why don't we start with the form?

15
00:01:10.503 --> 00:01:17.253
Because that way, we can, at least,
[LAUGH] help the modal get started.

16
00:01:17.253 --> 00:01:23.371
And what we want to do with the form
is satisfy this interaction here,

17
00:01:23.371 --> 00:01:27.386
where we can call new form,
pass in the type.

18
00:01:27.386 --> 00:01:28.746
In this case, it's gonna be a dialog.

19
00:01:28.746 --> 00:01:29.986
That's what the modal wants to do.

20
00:01:29.986 --> 00:01:33.219
But maybe somebody else wants to
create a different type of form, and

21
00:01:33.219 --> 00:01:35.446
give it a name and some content.

22
00:01:35.446 --> 00:01:40.393
And what we get back is
something with an element

23
00:01:40.393 --> 00:01:45.712
that then is the actual
HTML form element reference

24
00:01:45.712 --> 00:01:49.932
that I can use to later attach to the DOM.

25
00:01:49.932 --> 00:01:54.876
So we've got a jumpstart here

26
00:01:54.876 --> 00:01:59.623
with some pre default valued

27
00:01:59.623 --> 00:02:05.229
properties for form objects.

28
00:02:05.229 --> 00:02:06.953
They're gonna have an element,

29
00:02:06.953 --> 00:02:09.939
which is created by this
create element with a form.

30
00:02:09.939 --> 00:02:13.329
That's gonna be that form element
that we can later use in the modal.

31
00:02:15.389 --> 00:02:20.221
And they'll have a little heading and

32
00:02:20.221 --> 00:02:27.623
a button to submit the form
which closes the modal dialog.

33
00:02:27.623 --> 00:02:32.265
Okay, so any ideas how we can
proceed with this constructor?

34
00:02:32.265 --> 00:02:35.525
&gt;&gt; Be element.appendChild closeButton.

35
00:02:35.525 --> 00:02:39.326
&gt;&gt; Okay, now,
since we're talking about the,

36
00:02:39.326 --> 00:02:45.041
we want this to happen on
the actual instance of the object.

37
00:02:45.041 --> 00:02:48.816
&gt;&gt; So
we wanna throw it in the dom not create.

38
00:02:48.816 --> 00:02:54.282
&gt;&gt; Well, so we've got, okay, so
what happens up here is when I create,

39
00:02:54.282 --> 00:02:59.472
so I can declare a variable sort
of instance, properties up here,

40
00:02:59.472 --> 00:03:03.019
and I can also assign
default values to them.

41
00:03:04.759 --> 00:03:07.512
So that, for example,
in here, I don't have any,

42
00:03:07.512 --> 00:03:10.719
I'm not asking the user to,
give me their own form element.

43
00:03:10.719 --> 00:03:16.151
I'm gonna make a form element for
my user that's gonna

44
00:03:16.151 --> 00:03:21.241
be on the instance object
as the element property.

45
00:03:23.312 --> 00:03:28.651
And so the way that we access properties
of an instance within the constructor and

46
00:03:28.651 --> 00:03:31.714
within any other methods
that we might be using

47
00:03:31.714 --> 00:03:35.038
is with my least favorite
keyword in JavaScript.

48
00:03:35.038 --> 00:03:36.807
&gt;&gt; This.

49
00:03:36.807 --> 00:03:41.709
&gt;&gt; This, exactly, so
what we can do is this element to

50
00:03:41.709 --> 00:03:46.843
access the new form element
that is going to run here.

51
00:03:50.593 --> 00:03:54.344
And we're going to assign, sorry,

52
00:03:54.344 --> 00:03:59.063
we're going to pick up
with your suggestion.

53
00:03:59.063 --> 00:04:01.282
&gt;&gt; Append, yeah, I was,
yeah, I was referring to-

54
00:04:01.282 --> 00:04:02.288
&gt;&gt; Append.

55
00:04:02.288 --> 00:04:04.369
&gt;&gt; Incorrectly,
I forgot about this part, yes.

56
00:04:04.369 --> 00:04:09.578
But yeah, this.element.appendChild,

57
00:04:09.578 --> 00:04:12.258
this.closeButton.

58
00:04:12.258 --> 00:04:14.295
&gt;&gt; This.closeButton, okay.

59
00:04:14.295 --> 00:04:19.740
So now, when this runs,
this.closeButton is going

60
00:04:19.740 --> 00:04:24.943
to resolve to this new
element that I created here.

61
00:04:26.479 --> 00:04:30.990
And then the constructor is going
to find element which is gonna

62
00:04:30.990 --> 00:04:35.001
resolve to this new form
element that's created here.

63
00:04:35.001 --> 00:04:41.474
And these are HTML elements so
they have the appendChild, thanks VS Code.

64
00:04:41.474 --> 00:04:45.293
[LAUGH] They have an appendChild method,
so

65
00:04:45.293 --> 00:04:49.544
I can nest the button inside of the form,
okay.

66
00:04:49.544 --> 00:04:53.417
&gt;&gt; Shall we put [COUGH]
the heading before that?

67
00:04:53.417 --> 00:04:57.146
&gt;&gt; We could also put a heading in
the form, and probably, it makes sense for

68
00:04:57.146 --> 00:05:00.607
the heading to be near the top
of the form, so let's do that.

69
00:05:00.607 --> 00:05:02.127
Would you like to walk me through it?

70
00:05:02.127 --> 00:05:07.881
&gt;&gt; Sure, this.element.appendChild

71
00:05:07.881 --> 00:05:12.560
open current this.heading.

72
00:05:12.560 --> 00:05:17.294
&gt;&gt; Okay, same vibe,
same energy, [LAUGH] great.

73
00:05:17.294 --> 00:05:22.001
Okay, so we've got now
a heading appended to the form,

74
00:05:22.001 --> 00:05:27.009
a button appended to the form,
but we haven't really taken

75
00:05:27.009 --> 00:05:33.948
in any of the information that the user is
passing in to this particular instance.

76
00:05:35.598 --> 00:05:40.288
So what can we do about that?

77
00:05:40.288 --> 00:05:44.993
For example, I want whatever
the user passes in as the type,

78
00:05:44.993 --> 00:05:49.997
maybe it'll be dialogue,
to be the type attribute of the form.

79
00:05:49.997 --> 00:05:58.689
So now we have type coming in as
an argument to our constructor.

80
00:06:00.599 --> 00:06:05.809
We can use that data to mess
with our form element and

81
00:06:05.809 --> 00:06:10.413
set the type of this form,
so that the browser

82
00:06:10.413 --> 00:06:15.510
knows this is a dialogue
form inside of a dialog.

83
00:06:15.510 --> 00:06:18.846
So when you submit, close the dialog.

84
00:06:18.846 --> 00:06:25.270
Okay, so to set an attribute [LAUGH],

85
00:06:25.270 --> 00:06:32.994
we have the handy method, set attribute.

86
00:06:32.994 --> 00:06:33.963
Okay, so

87
00:06:33.963 --> 00:06:38.188
we want to call set attribute on the-
&gt;&gt; Element.

88
00:06:38.188 --> 00:06:39.135
&gt;&gt; Elements.

89
00:06:39.135 --> 00:06:42.527
&gt;&gt; Element and again, we're gonna

90
00:06:42.527 --> 00:06:47.737
this.element.setAttribute [SOUND]
attribute,

91
00:06:47.737 --> 00:06:53.438
type, and then the type string
that the user passed in.

92
00:06:53.438 --> 00:06:56.766
Cool, okay.

93
00:06:58.109 --> 00:07:00.490
Now how about the title?

94
00:07:02.260 --> 00:07:04.768
Probably, a good place to
put that is in the heading.

95
00:07:06.328 --> 00:07:12.336
So in this case,
we're not setting it as an element,

96
00:07:12.336 --> 00:07:17.418
we would have an h2,
my title sort of thing.

97
00:07:19.188 --> 00:07:26.386
What we can do with another handy little
property, on HTML elements, anybody know?

98
00:07:27.556 --> 00:07:28.786
&gt;&gt; Text content?

99
00:07:28.786 --> 00:07:29.946
&gt;&gt; Text content, that'll work.

100
00:07:31.026 --> 00:07:34.296
I mean, again, there's lots of
different ways that we can do this.

101
00:07:34.296 --> 00:07:37.674
So we want to set the text content of the-
&gt;&gt; Heading.

102
00:07:37.674 --> 00:07:43.454
&gt;&gt; Heading to whatever the title
is that's passed in and

103
00:07:43.454 --> 00:07:46.284
now, okay, so content.

104
00:07:46.284 --> 00:07:47.662
What is content gonna be?

105
00:07:47.662 --> 00:07:52.905
Well, again, passed down from on high,
this is gonna be some kind of content

106
00:07:52.905 --> 00:07:58.002
element that has its own children and
has its own like subtree of elements.

107
00:07:59.442 --> 00:08:05.292
So we want that to be within the form.

108
00:08:05.292 --> 00:08:08.724
Essentially, we don't want the form to
just have a heading and a button and

109
00:08:08.724 --> 00:08:12.103
no information that the user passed in
of what they need to do in this form or

110
00:08:12.103 --> 00:08:14.033
what they need the user
to do in this form.

111
00:08:14.033 --> 00:08:18.765
So all of their inputs and
field sets and so on and so

112
00:08:18.765 --> 00:08:21.929
forth, so where can we put that?

113
00:08:24.025 --> 00:08:28.169
&gt;&gt; Can you do
this.element.appendChildContent?

114
00:08:28.169 --> 00:08:31.324
&gt;&gt; We sure can,
do we wanna do that down here?

115
00:08:31.324 --> 00:08:33.380
&gt;&gt; Nope.

116
00:08:33.380 --> 00:08:34.922
&gt;&gt; Nope.
&gt;&gt; Nope?

117
00:08:34.922 --> 00:08:38.919
&gt;&gt; Well, I think you would
want it before the button.

118
00:08:38.919 --> 00:08:41.309
&gt;&gt; We might wanna put the close
button at the bottom.

119
00:08:41.309 --> 00:08:44.679
We might not, we might have other
ideas in mind, but let's say we do so

120
00:08:44.679 --> 00:08:47.894
we wanna make sure that we're
appending it in the right order.

121
00:08:47.894 --> 00:08:53.924
Cuz append is pushing onto an array,
it's gonna go at the end.

122
00:08:53.924 --> 00:08:58.909
So this element appendChild,

123
00:08:58.909 --> 00:09:03.900
this.content ought to work.

124
00:09:03.900 --> 00:09:08.210
Again, expecting this.content
to be a HTML element.

125
00:09:08.210 --> 00:09:13.558
Now, exercise for the reader [LAUGH]
is how could we make sure that the form

126
00:09:13.558 --> 00:09:20.062
isn't being instantiated with some random
thing that appendChild isn't gonna like.

127
00:09:20.062 --> 00:09:25.903
So that's a later exploration
we can take on our own.

128
00:09:25.903 --> 00:09:29.828
&gt;&gt; We want to append content,
not this.content, right?

129
00:09:29.828 --> 00:09:30.399
&gt;&gt; Sorry.
&gt;&gt; Yeah.

130
00:09:30.399 --> 00:09:31.598
&gt;&gt; Yes, the catch.

131
00:09:31.598 --> 00:09:32.437
&gt;&gt; That's what I was gonna say.

132
00:09:32.437 --> 00:09:33.431
&gt;&gt; Excellent catch.

133
00:09:33.431 --> 00:09:36.133
&gt;&gt; Yep, cuz-
&gt;&gt; Some of those are, I thought, and

134
00:09:36.133 --> 00:09:37.553
some of them are not, yeah.

135
00:09:37.553 --> 00:09:40.053
&gt;&gt; It's a function parameter,
not a member.

136
00:09:40.053 --> 00:09:44.448
&gt;&gt; Exactly,
totally did that to point this out to you.

137
00:09:44.448 --> 00:09:49.670
[LAUGH] Yeah, so
keep in mind that we're not actually

138
00:09:49.670 --> 00:09:55.730
storing the content as a property
on this object, could we?

139
00:09:57.030 --> 00:10:04.621
Sure, we could also in our constructor,
we can add new properties to the instance.

140
00:10:04.621 --> 00:10:09.181
So we could do this.content
equals content, we could do that.

141
00:10:09.181 --> 00:10:12.159
We could also, let's say,
since I declared here,

142
00:10:12.159 --> 00:10:16.831
these objects are gonna have titles,
we could do the same with the title.

143
00:10:16.831 --> 00:10:20.568
But depending on what we want, what the
experiences we want other developers to

144
00:10:20.568 --> 00:10:22.317
have as they're using this object.

145
00:10:22.317 --> 00:10:26.835
And by other developers, I also mean
us in the future or what have you.

146
00:10:26.835 --> 00:10:33.308
We can decide what we want to expose as
properties of this object versus what

147
00:10:33.308 --> 00:10:39.058
we just want to know about so that we
can put it where it needs to go and

148
00:10:39.058 --> 00:10:44.059
then expose like the just the element,
let's say.

149
00:10:44.059 --> 00:10:46.039
So in this case, let's see.

150
00:10:47.719 --> 00:10:52.121
I think the only thing we're really gonna
need to refer to here is an element of

151
00:10:52.121 --> 00:10:52.739
the form.

152
00:10:54.759 --> 00:10:57.369
We could definitely
expose things like title.

153
00:10:57.369 --> 00:11:02.324
We could have a two-string that prints
a pretty summary of what's going on

154
00:11:02.324 --> 00:11:04.799
in this form or what have you.

155
00:11:04.799 --> 00:11:08.699
In the interest of time,
we're not gonna do that.

156
00:11:08.699 --> 00:11:13.495
And right now, since we're all in this,
right, constrained environment where we

157
00:11:13.495 --> 00:11:17.680
know that our only user is us, and
nobody's gonna be kind of switching out

158
00:11:17.680 --> 00:11:21.417
stuff under us because we're
writing this entire program here.

159
00:11:21.417 --> 00:11:25.402
We're gonna, for
the interest of time, blow past that.

160
00:11:25.402 --> 00:11:27.859
But it would be a good
thing to think about for

161
00:11:27.859 --> 00:11:29.719
later is how could you make sure,

162
00:11:29.719 --> 00:11:34.852
how could you expose ways to change out
some of this underlying stuff in the form?

163
00:11:34.852 --> 00:11:39.234
And how could you make sure that it's
difficult to mess up [LAUGH] for

164
00:11:39.234 --> 00:11:40.102
your users?

