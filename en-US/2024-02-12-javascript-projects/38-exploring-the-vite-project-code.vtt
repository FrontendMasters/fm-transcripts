WEBVTT

1
00:00:00.204 --> 00:00:04.348
So we notice we have an index.html file.

2
00:00:04.348 --> 00:00:07.931
We're still in HTML and
we're building stuff for the browser.

3
00:00:07.931 --> 00:00:09.418
HTML is not going anywhere.

4
00:00:09.418 --> 00:00:13.397
I'm gonna turn on the wrap.

5
00:00:13.397 --> 00:00:18.628
Okay, and in our index.html,
we have a relatively simple HTML file.

6
00:00:18.628 --> 00:00:19.791
It's got a head with some stuff.

7
00:00:19.791 --> 00:00:27.179
It's got a title, and it's got one little
div in the [LAUGH] body with an id on it,

8
00:00:27.179 --> 00:00:34.033
and then it has this very important
line right here, an empty script tag.

9
00:00:34.033 --> 00:00:39.910
[LAUGH] This tag is empty, but
it is referring to by its source attribute

10
00:00:39.910 --> 00:00:45.096
a file called main.js that is
in the root of their directory.

11
00:00:45.096 --> 00:00:48.418
That's the slashes starting here, main js.

12
00:00:48.418 --> 00:00:53.084
And that is, basically,
Vite is going to put that in here, and

13
00:00:53.084 --> 00:00:59.004
the browser is gonna think that it was
there all along, the code in that module.

14
00:00:59.004 --> 00:01:03.496
And again, we've got to type module to
make sure that we're in ES module land.

15
00:01:03.496 --> 00:01:08.614
So let us go look at that code,
main.js right here.

16
00:01:08.614 --> 00:01:12.877
My gosh, can you really not remember
to just wrap everything, okay.

17
00:01:12.877 --> 00:01:15.976
All right, [LAUGH] what's happening?

18
00:01:15.976 --> 00:01:17.761
All right,
we've got a lot of import statements.

19
00:01:17.761 --> 00:01:20.629
So we're definitely in ES module's land,
we got a module type.

20
00:01:20.629 --> 00:01:24.543
We see this kind of syntax
that we saw before,

21
00:01:24.543 --> 00:01:30.012
of importing a useful function or
method from another module.

22
00:01:30.012 --> 00:01:33.568
In this case,
it's not an external package,

23
00:01:33.568 --> 00:01:36.404
it is another file in this code base.

24
00:01:36.404 --> 00:01:41.557
So it is the file counter.js that is
in the same directory that we are in.

25
00:01:41.557 --> 00:01:46.170
And there's some other stuff going
on that's a little bit more unusual.

26
00:01:46.170 --> 00:01:52.020
We're importing SVG files and CSS files.

27
00:01:52.020 --> 00:01:57.195
And so this is a Vite thing where,
essentially, in our JavaScript,

28
00:01:57.195 --> 00:02:01.925
we can be referring to all these
other resources, styles, and

29
00:02:01.925 --> 00:02:06.924
images, and things like that,
that Vite then will figure out from

30
00:02:06.924 --> 00:02:11.595
the ones that we're actually importing and
actually using.

31
00:02:11.595 --> 00:02:16.798
If I have hypothetically a bajillion
GIFs in a folder, in a project,

32
00:02:16.798 --> 00:02:22.903
hypothetically, Vite will only pull in
those images that I'm actually using or

33
00:02:22.903 --> 00:02:26.405
those style sheets that
I'm actually using,

34
00:02:26.405 --> 00:02:30.379
looking at all these
different import statements.

35
00:02:30.379 --> 00:02:33.472
And of course, the tree of,
if I import something from counter,

36
00:02:33.472 --> 00:02:36.578
then whatever counter needs to
import is also gonna be included.

37
00:02:36.578 --> 00:02:40.926
And so what Vite is doing is kind of
leveraging a whole bunch of other tools to

38
00:02:40.926 --> 00:02:45.688
give us this experience of just, okay, I
want that CSS, I want this image and that

39
00:02:45.688 --> 00:02:50.482
image, and blah, blah, blah, and allow
us to work with that in our JavaScript.

40
00:02:50.482 --> 00:02:53.837
And then we see this line right here,

41
00:02:53.837 --> 00:02:59.693
which I don't know about you,
but makes me feel some kinda way.

42
00:02:59.693 --> 00:03:04.431
[LAUGH] So again, this is like
a minimum viable Vite project.

43
00:03:04.431 --> 00:03:08.596
[LAUGH] The idea here from the Vite
team is just to show people what is

44
00:03:08.596 --> 00:03:10.575
the structure of the Vite app?

45
00:03:10.575 --> 00:03:16.737
Not to necessarily show us how we
should be writing our JavaScript code.

46
00:03:16.737 --> 00:03:21.503
But what is interesting is that
this kind of mimics with just some

47
00:03:21.503 --> 00:03:24.594
vanilla JavaScript, query selectors,

48
00:03:24.594 --> 00:03:29.116
and setting the inner HTML to a big,
long template literal.

49
00:03:29.116 --> 00:03:32.947
Mimics a little bit what some
of these flashy frameworks,

50
00:03:32.947 --> 00:03:35.761
these big things like React and whatever,

51
00:03:35.761 --> 00:03:40.470
are doing, when they essentially
take a very simple, where did it go?

52
00:03:40.470 --> 00:03:45.859
A very simple HTML file
with one element in it,

53
00:03:45.859 --> 00:03:51.396
and put a whole bunch of
other stuff in it for us.

54
00:03:51.396 --> 00:03:56.173
So this is not something
we would wanna be doing.

55
00:03:56.173 --> 00:04:00.664
It's having a meaningless div element and
then setting inner HTML on it.

56
00:04:00.664 --> 00:04:07.089
That's breaking a lot of, I think,
HTML and Web standards people's heart.

57
00:04:07.089 --> 00:04:10.251
But [LAUGH] it is kinda pointing
us in the direction of,

58
00:04:10.251 --> 00:04:12.935
if we start working
with bigger frameworks.

59
00:04:12.935 --> 00:04:17.778
I mean, it's not that different
from really what they're gonna

60
00:04:17.778 --> 00:04:21.475
be doing when they flesh
out our HTML with whatever

61
00:04:21.475 --> 00:04:25.193
we have written in their
fancy framework syntax.

62
00:04:25.193 --> 00:04:28.553
So that's one justification
of what's happening here.

63
00:04:28.553 --> 00:04:33.124
But I don't know about you, I would feel
a lot more comfortable if as much of

64
00:04:33.124 --> 00:04:35.461
this as possible was just in the HTML.

65
00:04:35.461 --> 00:04:37.312
Are we on the same page about that?

66
00:04:37.312 --> 00:04:39.280
Cool, so we can fix that in a minute.

67
00:04:39.280 --> 00:04:42.951
But let's move on with our lives,
and let's see what's happening here.

68
00:04:42.951 --> 00:04:44.753
So in this template literal, sorry.

69
00:04:44.753 --> 00:04:45.718
&gt;&gt; I just have a quick question.

70
00:04:45.718 --> 00:04:47.870
&gt;&gt; Yeah.
&gt;&gt; Is main.js, is that valid?

71
00:04:47.870 --> 00:04:54.450
Is that all valid JavaScript without Vite,
or is Vite something special with this?

72
00:04:54.450 --> 00:04:55.770
Is this-
&gt;&gt; So the JavaScript,

73
00:04:55.770 --> 00:04:59.739
this up here without Vite's
kind of fanciness, these parts?

74
00:04:59.739 --> 00:05:04.310
&gt;&gt; Okay, yeah, I didn't know if you get
it, that felt like importing a CSS file or

75
00:05:04.310 --> 00:05:06.162
an image, I wasn't sure-
&gt;&gt; No,

76
00:05:06.162 --> 00:05:11.164
there are certain things like JSON files,
for example, you can use their basically-

77
00:05:11.164 --> 00:05:11.823
&gt;&gt; So that's.

78
00:05:11.823 --> 00:05:13.171
&gt;&gt; Stringify JSON object.

79
00:05:13.171 --> 00:05:17.956
But there's a little bit of magic
happening here in order to do some

80
00:05:17.956 --> 00:05:20.862
conveniences of, for example, okay,

81
00:05:20.862 --> 00:05:25.572
when I tell you to import this logo
from that SVG, give me the URL.

82
00:05:25.572 --> 00:05:30.942
I would go to that, like the resolved
path to that resource, which may be

83
00:05:30.942 --> 00:05:36.853
different in development and production,
for example, or so on and so forth.

84
00:05:36.853 --> 00:05:39.474
So there is some magic happening here.

85
00:05:39.474 --> 00:05:44.293
But the syntax of import statements and

86
00:05:44.293 --> 00:05:48.533
importing stuff is JavaScripty.

87
00:05:48.533 --> 00:05:55.060
And this syntax without the curly
braces here is also, fair, JavaScript.

88
00:05:55.060 --> 00:05:56.819
We can talk about it a little bit later.

89
00:05:56.819 --> 00:06:01.740
But this, with a JavaScript file,
like if I [COUGH] earlier in my Cowsay,

90
00:06:01.740 --> 00:06:06.581
I did import {say} from, and
this is gonna not like it cuz it's like,

91
00:06:06.581 --> 00:06:11.610
well, I don't have Cowsay, I mean,
all right, VS Code knows about it.

92
00:06:11.610 --> 00:06:17.360
But the other option
that I have is to import

93
00:06:17.360 --> 00:06:23.272
the entire module as
Cowsay with this syntax

94
00:06:23.272 --> 00:06:30.158
where essentially I get
that whole Cowsay object.

95
00:06:30.158 --> 00:06:33.658
So now I would do like Cowsay.say,
what have you.

96
00:06:33.658 --> 00:06:40.109
Anyway, so there's a little bit more like,
that is JavaScript, that's not Vite,

97
00:06:40.109 --> 00:06:46.401
but Vite is sort of using this JavaScripty
syntax to help us do other useful things.

98
00:06:46.401 --> 00:06:51.319
Okay, so then we're selecting
our one element [LAUGH] and

99
00:06:51.319 --> 00:06:54.093
injecting a bunch of HTML in it.

100
00:06:54.093 --> 00:06:59.501
And in this HTML we are using some
Vite magic to get the resolved URL for

101
00:06:59.501 --> 00:07:02.950
these images, or assets, if you will, and

102
00:07:02.950 --> 00:07:07.238
put it into our HTML, so
that we can find those images or

103
00:07:07.238 --> 00:07:12.575
the browser can find those images
when somebody looks at this page.

104
00:07:12.575 --> 00:07:15.284
Which is how we get our very pretty,
where did it go?

105
00:07:15.284 --> 00:07:18.721
Logos, exciting.

106
00:07:18.721 --> 00:07:23.109
And same with the JavaScript logo.

107
00:07:23.109 --> 00:07:27.158
And then we've got this code that's not
particularly different from a lot of

108
00:07:27.158 --> 00:07:30.095
the stuff we've been doing,
where we call a function.

109
00:07:30.095 --> 00:07:31.128
Where do we get that function?

110
00:07:31.128 --> 00:07:35.442
We imported it from somewhere else,
and then we are giving,

111
00:07:35.442 --> 00:07:38.838
passing in some,
in this case, element to it.

112
00:07:38.838 --> 00:07:43.362
So this is not a whole lot different
than when we created our forms, or

113
00:07:43.362 --> 00:07:46.407
set up our toggle switches,
or what have you.

114
00:07:46.407 --> 00:07:51.850
So let's go look at counter and
see what that's doing.

115
00:07:51.850 --> 00:07:56.930
And keeping in mind that,
yeah, all this page did,

116
00:07:56.930 --> 00:08:02.944
all this app did, was we click a button,
and it counts for us.

117
00:08:02.944 --> 00:08:06.079
And that is basically all that
functionality is coming from right here.

118
00:08:07.839 --> 00:08:13.246
So there's hopefully nothing super
shocking going on in this code,

119
00:08:13.246 --> 00:08:15.960
but again, minimum viable Vite.

120
00:08:15.960 --> 00:08:21.457
[LAUGH] The idea here is that we have
a function that takes in an element,

121
00:08:21.457 --> 00:08:27.420
does some stuff to it, and we are
exporting that function from this module,

122
00:08:27.420 --> 00:08:30.325
so that it can be imported into main.

123
00:08:34.258 --> 00:08:39.741
Okay, if I run my, what did I do here?

124
00:08:39.741 --> 00:08:41.211
Did I edit something?

125
00:08:41.211 --> 00:08:44.952
Yeah, backticks everywhere.

126
00:08:44.952 --> 00:08:48.474
Okay, now,
&gt;&gt; Sorry,

127
00:08:48.474 --> 00:08:53.560
I just saw your browser
change to your styling rules.

128
00:08:53.560 --> 00:08:56.848
It added a bunch of semicolons,
my copy doesn't have them.

129
00:08:56.848 --> 00:08:57.983
&gt;&gt; Indeed.

130
00:08:57.983 --> 00:08:59.331
We will talk about that.

131
00:08:59.331 --> 00:09:02.202
&gt;&gt; All right
&gt;&gt; A bit later.

132
00:09:02.202 --> 00:09:06.346
Yeah, so VS Code is responsible for
that, well,

133
00:09:06.346 --> 00:09:10.599
VS Code and
some friends that VS Code has access to.

134
00:09:10.599 --> 00:09:14.164
So we are also in a much larger
environment than it would

135
00:09:14.164 --> 00:09:17.195
seem right now when I run
this stuff in VS Code.

136
00:09:17.195 --> 00:09:21.061
So when I save, it does some stuff,
we'll talk about that later.

137
00:09:21.061 --> 00:09:26.890
Okay, so now, we have an idea of what is
actually happening when we run this code.

138
00:09:26.890 --> 00:09:28.865
But I had quit my development server.

139
00:09:28.865 --> 00:09:32.473
So that was just still in my browser.

140
00:09:32.473 --> 00:09:33.209
It's not actually running.

141
00:09:33.209 --> 00:09:34.400
Let's try to run it.

142
00:09:36.303 --> 00:09:39.676
Npm run dev, which is gonna call Vite, and

143
00:09:39.676 --> 00:09:44.002
it's gonna start a new local
server at whatever port.

144
00:09:44.002 --> 00:09:46.036
And we can customize that and everything,

145
00:09:46.036 --> 00:09:48.193
and this is the same
thing that we saw before.

146
00:09:48.193 --> 00:09:53.342
But I can now mess with stuff and

147
00:09:53.342 --> 00:09:58.131
have it be, for example-
&gt;&gt; What was

148
00:09:58.131 --> 00:10:00.799
the command you just entered
to restart the server?

149
00:10:00.799 --> 00:10:03.417
&gt;&gt; Yep, npm run dev.

150
00:10:03.417 --> 00:10:04.590
&gt;&gt; Okay, got it.

151
00:10:04.590 --> 00:10:06.436
&gt;&gt; npm run dev.

152
00:10:06.436 --> 00:10:11.576
And what that command is doing might
differ from project to project,

153
00:10:11.576 --> 00:10:16.271
but many, many projects that we
will find ourselves needing to

154
00:10:16.271 --> 00:10:20.010
work on will have a dev command for
the dev server.

155
00:10:20.010 --> 00:10:24.213
And often a build command for
doing all that fancy optimization and

156
00:10:24.213 --> 00:10:26.702
stuff to create the production build.

157
00:10:26.702 --> 00:10:30.729
Okay, so
anybody who watched Sesame Street?

158
00:10:30.729 --> 00:10:33.273
Four [SOUND] the count, no?

159
00:10:33.273 --> 00:10:38.663
Okay, so I just changed
the string that's in the button,

160
00:10:38.663 --> 00:10:43.503
and boom, lo and behold,
no refresh, no nothing,

161
00:10:43.503 --> 00:10:48.123
Vite just automagically
updated only the modules

162
00:10:48.123 --> 00:10:52.308
that I changed in this
app that I'm running.

163
00:10:52.308 --> 00:10:55.914
Now, it doesn't look that special because
we could have just edited this in HTML,

164
00:10:55.914 --> 00:10:56.541
in this case.

165
00:10:56.541 --> 00:11:01.368
But this becomes very, very useful when
you're working on a complex project

166
00:11:01.368 --> 00:11:05.823
with lots of different modules, and
you don't wanna have to be redoing

167
00:11:05.823 --> 00:11:10.374
everything every time you change
something that really slows you down.

168
00:11:10.374 --> 00:11:15.455
Especially if there are a whole bunch of
tools involved in building the site to

169
00:11:15.455 --> 00:11:20.704
the development server, and then that
could be a very slow iteration process.

170
00:11:20.704 --> 00:11:23.973
So this is one of the main
advantages of Vite,

171
00:11:23.973 --> 00:11:28.531
is you get this very quick,
which the name is French for quick or

172
00:11:28.531 --> 00:11:32.246
fast, via the very quick
kind of iteration cycle.

173
00:11:32.246 --> 00:11:35.547
So that you can mess with stuff and
immediately see the results and

174
00:11:35.547 --> 00:11:39.748
mess with stuff and immediately see the
results, and you don't have those moments

175
00:11:39.748 --> 00:11:43.791
in between to just ponder the nature of
existence and your life and its choices.

176
00:11:43.791 --> 00:11:47.388
So basically just a win-win.

