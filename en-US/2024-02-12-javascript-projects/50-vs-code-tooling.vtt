WEBVTT

1
00:00:00.000 --> 00:00:05.355
This is all just tooling.

2
00:00:05.355 --> 00:00:07.315
Are these tools gonna
be around in ten years?

3
00:00:07.315 --> 00:00:09.358
I have no idea.

4
00:00:09.358 --> 00:00:13.076
Are they super,
super conventional right now and for

5
00:00:13.076 --> 00:00:18.212
the last few years and for hopefully
[LAUGH] several years at least to come?

6
00:00:18.212 --> 00:00:19.787
Yes, question.

7
00:00:19.787 --> 00:00:23.678
&gt;&gt; So edlint--fix fixes syntax errors and
things,

8
00:00:23.678 --> 00:00:27.302
and then Prettier fixes spacing,
tabs, etc.

9
00:00:27.302 --> 00:00:32.551
&gt;&gt; Bingo, so Prettier is,
again, the name is sort

10
00:00:32.551 --> 00:00:39.607
of a good reminder that it's about
making the style of your code.

11
00:00:39.607 --> 00:00:43.246
For example, indentation,
semicolons or not,

12
00:00:43.246 --> 00:00:46.718
spaces around those brackets,
what have you?

13
00:00:46.718 --> 00:00:51.628
Double quotes, single quotes,
all that kinda stuff,

14
00:00:51.628 --> 00:00:55.915
making your style both
consistent internally.

15
00:00:55.915 --> 00:01:00.313
And because we saved the exact
version consistent within everybody

16
00:01:00.313 --> 00:01:05.020
in a project and that doesn't matter
when it's just me hacking away on my

17
00:01:05.020 --> 00:01:06.812
own little toy selfie cam.

18
00:01:06.812 --> 00:01:10.525
But when I'm working with other people,
whether on an open source project and

19
00:01:10.525 --> 00:01:13.352
they're just other friendly
strangers on the interwebs.

20
00:01:13.352 --> 00:01:18.945
Or whether it's my coworkers and we're all
working in a code base together, having

21
00:01:18.945 --> 00:01:24.397
that enforcement of everybody has the same
opinion on semicolons is very useful.

22
00:01:24.397 --> 00:01:29.131
So that people aren't constantly
overwriting each other's changes in a very

23
00:01:29.131 --> 00:01:33.933
trivial way when we don't have, let's say,
a Git commit that says you changed

24
00:01:33.933 --> 00:01:38.809
a thousand lines of code because you added
semicolons to them or what have you, so

25
00:01:38.809 --> 00:01:40.631
that is what Prettier is for.

26
00:01:40.631 --> 00:01:46.387
But ESLint s going to know
a lot more about things,

27
00:01:46.387 --> 00:01:51.734
for example,
having an unused const variable

28
00:01:51.734 --> 00:01:56.268
stylistically might look beautiful.

29
00:01:56.268 --> 00:02:00.155
But in terms of the actual
functionality and

30
00:02:00.155 --> 00:02:04.041
the keeping our code base
as kind of a lean and

31
00:02:04.041 --> 00:02:08.677
fit as possible,
that is not a formatting problem.

32
00:02:08.677 --> 00:02:13.743
That's a sort of a higher level problem

33
00:02:13.743 --> 00:02:20.967
of how we want our code base
to be polished, if you will.

34
00:02:20.967 --> 00:02:23.079
So this is the idea is that these days,

35
00:02:23.079 --> 00:02:26.577
and it is possible to use ESLint for
formatting, editing, and

36
00:02:26.577 --> 00:02:30.143
it is also possible to combine
them in all bunches of weird ways.

37
00:02:30.143 --> 00:02:34.427
And there's a whole bunch of different
ways that over the years this has evolved.

38
00:02:34.427 --> 00:02:39.583
But for now, the kind of best
practice is to use Prettier for

39
00:02:39.583 --> 00:02:45.358
formatting, and ESLint for syntax,
and any other types of errors

40
00:02:45.358 --> 00:02:50.413
that are gonna make our code
base a little bit more clean and

41
00:02:50.413 --> 00:02:55.903
a little bit less likely to give
us a headache at [LAUGH] runtime.

42
00:02:55.903 --> 00:03:01.907
Okay, so back to our VS Code magic,
what can VS Code do?

43
00:03:01.907 --> 00:03:02.573
A lot of stuff.

44
00:03:02.573 --> 00:03:05.701
So yeah, again there's a whole on
Frontend Masters course about VS Code.

45
00:03:05.701 --> 00:03:12.028
But suffice it to say, and it perhaps
is no surprise given that Github and

46
00:03:12.028 --> 00:03:17.942
VS Code are both Microsoft situations,
the git version control and

47
00:03:17.942 --> 00:03:23.461
Github integrations are already
out of the box part of VS Code.

48
00:03:23.461 --> 00:03:28.077
There is a Source Control tab in VS Code.

49
00:03:28.077 --> 00:03:31.632
So if I go to my tabs over here,
I'm used to using this file tab, or

50
00:03:31.632 --> 00:03:34.038
I can search for
things throughout my repo.

51
00:03:34.038 --> 00:03:38.691
And then there's this one here that looks
like the kind of Git logo a little bit,

52
00:03:38.691 --> 00:03:43.275
and that is where, well, I guess I
haven't initialized one in this, but

53
00:03:43.275 --> 00:03:46.975
let's look at one where I have,
no, not this one, okay.

54
00:03:46.975 --> 00:03:52.296
[LAUGH] All right, and
if you've got some changes,

55
00:03:52.296 --> 00:03:56.999
spoilers, spoilers, spoilers, okay, so

56
00:03:56.999 --> 00:04:00.603
maybe I don't know, I have a new,

57
00:04:03.114 --> 00:04:08.361
I have a new or a fewer commands.

58
00:04:08.361 --> 00:04:10.784
Comma, no, [LAUGH] okay, so

59
00:04:10.784 --> 00:04:15.720
once I have changes that my Git
repository doesn't know about yet,

60
00:04:15.720 --> 00:04:20.397
I can also instead of doing the Git
commands at the command line,

61
00:04:20.397 --> 00:04:24.580
I can also type in my commit message and
commit them here.

62
00:04:24.580 --> 00:04:30.052
So if you're a little bit more
comfortable using this kind of interface

63
00:04:30.052 --> 00:04:35.809
to manage your git ads and your Git
commits and things like that, go for it.

64
00:04:35.809 --> 00:04:41.858
Personally, I guess I got used to it
before VS Code swept the world [LAUGH] and

65
00:04:41.858 --> 00:04:44.642
so I don't use this tab so much, so

66
00:04:44.642 --> 00:04:49.846
I don't know all of its bells and
whistles, but totally legit.

67
00:04:49.846 --> 00:04:55.502
It is just basically an interface
to be doing those commands for you.

68
00:04:55.502 --> 00:05:02.747
And it's also possible to integrate
your VS Code with your Github account.

69
00:05:02.747 --> 00:05:06.626
So there's a link In the slides and
VS Code will helpfully suggest.

70
00:05:06.626 --> 00:05:08.931
I believe that you do all of this for you.

71
00:05:08.931 --> 00:05:13.678
So have at it, I personally don't, but

72
00:05:13.678 --> 00:05:17.177
go for it if that is your vibe.

73
00:05:17.177 --> 00:05:21.644
So you don't have to do anything special
if you have VS Code to get Git and

74
00:05:21.644 --> 00:05:22.993
Github integrated.

75
00:05:22.993 --> 00:05:27.490
But there's also in our
handy-dandy panel here,

76
00:05:27.490 --> 00:05:30.847
I'm a little too zoomed in for you to see.

77
00:05:30.847 --> 00:05:36.360
But there's also Extensions panel

78
00:05:36.360 --> 00:05:43.532
here where we can look for, my goodness.

79
00:05:43.532 --> 00:05:47.145
Okay, we can look for
a particular extension like ESLint, and

80
00:05:47.145 --> 00:05:50.350
there's a million keyboard shortcuts for
VS Code, but

81
00:05:50.350 --> 00:05:52.891
I haven't taken the time
to learn them all.

82
00:05:52.891 --> 00:05:53.425
I only have a few.

83
00:05:53.425 --> 00:05:57.331
[LAUGH] Go take that course about VS Code
to probably learn a lot more dips and

84
00:05:57.331 --> 00:05:57.841
tricks.

85
00:05:57.841 --> 00:06:03.387
Anyway, so we can search for extensions
in the Extensions tab and we can find

86
00:06:03.387 --> 00:06:09.294
extensions for things like ESLint, and
for Prettier, and we can install them.

87
00:06:09.294 --> 00:06:10.946
And these are like,
we'll have to set that up.

88
00:06:10.946 --> 00:06:15.752
And then we can also configure
them to say, for example, hey,

89
00:06:15.752 --> 00:06:20.391
ESLint, use whatever ESLint
config I have in this project.

90
00:06:20.391 --> 00:06:27.853
So I can go to this settings here,
Extension settings, yes.

91
00:06:27.853 --> 00:06:32.347
And then I can tweak things,
I can tell it where to find config files,

92
00:06:32.347 --> 00:06:36.920
I can tell it what type of config
we're using, cuz there's currently

93
00:06:36.920 --> 00:06:41.910
a migration in process of ESLint config
syntax, just to spice up our lives.

94
00:06:41.910 --> 00:06:47.262
Anyway, the settings for all of these
extensions are, again, just like as many

95
00:06:47.262 --> 00:06:52.864
settings as there might be command line
flags, and options, and things like that.

96
00:06:52.864 --> 00:06:57.184
So we're not gonna cover all of that,
but suffice it to say,

97
00:06:57.184 --> 00:07:01.589
you can also set your VS Code up so
that when you press Ctrl+S or

98
00:07:01.589 --> 00:07:06.627
Cmd+S, Prettier automatically
reformats your code, let's say.

99
00:07:06.627 --> 00:07:11.254
And so that when you type in an error,
ESLint squiggles

100
00:07:11.254 --> 00:07:16.392
a little red line under it to
tell you that there is a problem.

101
00:07:16.392 --> 00:07:25.073
And so that is what we have been
seeing when I do things like nonsense.

102
00:07:25.073 --> 00:07:29.091
When I hover over that squiggle,
I'll see that ESLint and

103
00:07:29.091 --> 00:07:34.014
ESLint's rule called no undefined
variables,which is a very helpful

104
00:07:34.014 --> 00:07:38.622
thing to have in your project,
is saying nonsense is not defined.

105
00:07:38.622 --> 00:07:45.450
And this is how I can even before
I have to go to the command and

106
00:07:45.450 --> 00:07:49.548
run npm run lint and all this stuff,

107
00:07:49.548 --> 00:07:55.164
I can make sure as I type
that things are in order.

108
00:07:55.164 --> 00:07:58.554
Okay, so that is all the magic
that's been happening here.

109
00:07:58.554 --> 00:08:00.829
For example, Prettier just said, hey,

110
00:08:00.829 --> 00:08:04.218
you got all those useless extra
lines at the top of your thing.

111
00:08:04.218 --> 00:08:10.408
So when you save, because I have my
VS Code setup to format on save,

112
00:08:10.408 --> 00:08:14.601
it deletes all those extra spaces for me.

113
00:08:14.601 --> 00:08:17.540
So this is all tooling again.

114
00:08:17.540 --> 00:08:22.986
[LAUGH] So far, this is basically
has nothing to do with JavaScript

115
00:08:22.986 --> 00:08:29.036
except that these are very,
very conventional tools in our community.

116
00:08:29.036 --> 00:08:30.211
[LAUGH]

