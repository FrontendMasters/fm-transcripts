WEBVTT

1
00:00:00.270 --> 00:00:08.740
So moving on,
we were talking about installing stuff.

2
00:00:08.740 --> 00:00:13.723
And as I said, we want to be careful
when we install stuff because basically

3
00:00:13.723 --> 00:00:18.783
when we do npm install some package,
npm is going to go grab that package from

4
00:00:18.783 --> 00:00:23.557
some stranger that put it on the internet
and pull it into our code base.

5
00:00:24.827 --> 00:00:27.791
So right now,
we're gonna do what hopefully is a pretty

6
00:00:27.791 --> 00:00:31.132
innocuous one [LAUGH],
which is a super old package that maybe,

7
00:00:31.132 --> 00:00:33.737
I don't know,
folks might not have heard of it.

8
00:00:33.737 --> 00:00:36.516
It's like an ask key art thing called
cowsay, and we're just gonna leave it as

9
00:00:36.516 --> 00:00:39.702
a surprise, but maybe you can
guess already what it's gonna do.

10
00:00:39.702 --> 00:00:46.262
So if I am now within my,
can folks see this terminal?

11
00:00:46.262 --> 00:00:49.481
If I'm within my terminal and

12
00:00:49.481 --> 00:00:54.629
I run npm install and
then the name of a package,

13
00:00:54.629 --> 00:00:59.672
cowsay, for example, Sstuff is happening.

14
00:01:00.897 --> 00:01:07.356
And so, NPM says, okay,
I added 41 packages [LAUGH] and

15
00:01:07.356 --> 00:01:12.347
audited even more packages in two seconds.

16
00:01:12.347 --> 00:01:17.077
Auditing is basically checking for
any known security vulnerabilities.

17
00:01:17.077 --> 00:01:21.450
That's a whole other detail about trying
to deal with the complexity of an entire

18
00:01:21.450 --> 00:01:24.150
interwebs of people
sharing each other's code,

19
00:01:24.150 --> 00:01:26.482
that we're not gonna talk too much about.

20
00:01:26.482 --> 00:01:30.166
But there's also an NPM fund command if
you wanna give some love back to your

21
00:01:30.166 --> 00:01:31.812
favorite open source projects.

22
00:01:32.822 --> 00:01:36.646
And the NPM audit is telling us that
it didn't find any vulnerabilities,

23
00:01:36.646 --> 00:01:37.392
thankfully.

24
00:01:37.392 --> 00:01:42.316
So sometimes NPM will be helpful and
tell you that it will It knows that there

25
00:01:42.316 --> 00:01:46.457
is a problem, a known issue,
security-wise, for example,

26
00:01:46.457 --> 00:01:51.281
in some of the 40-some packages
that just got installed.

27
00:01:51.281 --> 00:01:57.231
Okay, so let us try to make sense of
what do you mean 41 packages were added?

28
00:01:58.931 --> 00:02:04.846
So now, if I look at my package.json,
and is this too big?

29
00:02:04.846 --> 00:02:06.112
Is that still legible?

30
00:02:06.112 --> 00:02:09.962
&gt;&gt; Sure.
&gt;&gt; Okay, if I look at my package.json,

31
00:02:09.962 --> 00:02:13.232
I have a new addition to the family,

32
00:02:13.232 --> 00:02:18.246
which is a dependencies
object that only says there's

33
00:02:18.246 --> 00:02:22.606
one package [LAUGH] and
it's called cowsay, and

34
00:02:22.606 --> 00:02:28.398
then it tells me what version of
that package I just installed.

35
00:02:28.398 --> 00:02:33.423
And generally, we would want that to
be like the latest major version or

36
00:02:33.423 --> 00:02:38.197
whatever it is, but you can also
install a specific version by doing

37
00:02:38.197 --> 00:02:41.612
like NPM install cowsay at two or
whatever.

38
00:02:41.612 --> 00:02:46.046
In this case I don't think there is
cowsay 2.0, but some packages, so

39
00:02:46.046 --> 00:02:49.738
let's say a major JavaScript
front end framework.

40
00:02:49.738 --> 00:02:52.998
The difference between version two and
version three is like an entirely

41
00:02:52.998 --> 00:02:56.686
different project, and so you really want
to make sure that you know which version

42
00:02:56.686 --> 00:02:59.188
you're importing so
you can also do all of that.

43
00:02:59.188 --> 00:03:01.036
And that's a whole other,

44
00:03:01.036 --> 00:03:06.016
we could do a whole day of talking
about package versioning, but anyway,

45
00:03:06.016 --> 00:03:11.021
what we've got is like a version of
cowsay as a dependency of our project.

46
00:03:12.671 --> 00:03:16.904
And we also notice we
have some new files and

47
00:03:16.904 --> 00:03:20.321
a new folder called node modules.

48
00:03:22.351 --> 00:03:27.750
So node modules has now, I'm gonna,

49
00:03:27.750 --> 00:03:33.321
say 40 some different folders within

50
00:03:33.321 --> 00:03:38.568
it that are all different packages.

51
00:03:38.568 --> 00:03:42.208
One of them I recognize, the others
I did not type into my command line.

52
00:03:42.208 --> 00:03:44.312
Did you type them into my command line?

53
00:03:44.312 --> 00:03:47.422
No, okay, so they just magically
appeared all right, cool.

54
00:03:47.422 --> 00:03:53.878
So, if we look into one of these perhaps
the one that I intended to install,

55
00:03:53.878 --> 00:03:58.899
we'll notice that each of them
has its own package Jason,

56
00:03:58.899 --> 00:04:04.502
and in cowsay there is a whole
bunch of other dependencies.

57
00:04:04.502 --> 00:04:06.574
And so now we're getting into,

58
00:04:06.574 --> 00:04:10.333
we have a package that I wanted
to install as a dependency,

59
00:04:10.333 --> 00:04:15.032
that package uses other packages as
its dependencies, and guess what?

60
00:04:15.032 --> 00:04:18.730
If I go into each one of those,
get-stdin or whatever,

61
00:04:18.730 --> 00:04:23.219
they have their own package.json,
with their own dependencies,

62
00:04:23.219 --> 00:04:28.812
maybe, and so this is where all those
40 some odd packages come from.

63
00:04:28.812 --> 00:04:34.147
NPM goes and grabs the entire tree of
all of the dependencies that we need,

64
00:04:34.147 --> 00:04:38.452
all of the little JavaScripts,
all of the little modules,

65
00:04:38.452 --> 00:04:41.464
we're gonna talk about that in a second,

66
00:04:41.464 --> 00:04:46.857
that we need in order to run
the dependencies of our project.

67
00:04:46.857 --> 00:04:52.153
So this kind of tree of like dependency
to dependency to dependency is,

68
00:04:52.153 --> 00:04:54.817
where we get all those packages from.

69
00:04:56.157 --> 00:05:01.367
And that whole tree of all of the stuff
going on there is captured or

70
00:05:01.367 --> 00:05:07.053
sort of like locked, if you will,
in this file package-lock.json,

71
00:05:07.053 --> 00:05:11.602
which tells you exactly which version and
like the SHA and

72
00:05:11.602 --> 00:05:16.574
all of the things,
all the details about all these packages.

73
00:05:16.574 --> 00:05:20.475
Now, this is not necessarily intended for
humans, us,

74
00:05:20.475 --> 00:05:25.429
to be reading, but this is one of
the ways that we can also make sure that,

75
00:05:25.429 --> 00:05:30.145
let's say, if we're installing
two different dependencies, but

76
00:05:30.145 --> 00:05:36.111
they have conflicting different versions
of a dependency that they have, whatever.

77
00:05:36.111 --> 00:05:40.058
NPM is sort of figuring all of this out
and warning us about those things, or

78
00:05:40.058 --> 00:05:44.196
about missing dependencies, or
dependencies it couldn't find anymore, or

79
00:05:44.196 --> 00:05:46.392
whatever else, right?

80
00:05:46.392 --> 00:05:50.406
So it's using this information
to help us do all of this, and

81
00:05:50.406 --> 00:05:52.548
to help us keep things updated.

82
00:05:54.138 --> 00:05:59.110
So, there's a lot more we
could say about that, but

83
00:05:59.110 --> 00:06:03.856
we're gonna kind of just
trust NPM to do its job and

84
00:06:03.856 --> 00:06:10.114
figure out what are all these
node modules that we need to run.

85
00:06:10.114 --> 00:06:14.010
And these all get stored in this
local node modules directory,

86
00:06:14.010 --> 00:06:18.644
which incidentally, when we start
talking about like version control and

87
00:06:18.644 --> 00:06:23.350
Git and stuff, we generally do not
want to check into our code bases.

88
00:06:23.350 --> 00:06:28.388
And it can also just be
reproduced quite easily

89
00:06:28.388 --> 00:06:36.540
by NPM installing a package once you
have got its dependencies specified.

90
00:06:36.540 --> 00:06:41.790
So, back up when we have what we just

91
00:06:41.790 --> 00:06:46.340
did with npm install is we saved

92
00:06:46.340 --> 00:06:51.416
cowsay as, what have I done?

93
00:06:51.416 --> 00:06:55.538
As a dependency of our project,
where am I?

94
00:06:55.538 --> 00:07:02.086
And we have also installed all of
the dependencies of that project.

95
00:07:03.611 --> 00:07:07.127
And in so doing,
we have essentially installed our project,

96
00:07:07.127 --> 00:07:09.841
which earlier didn't
have any dependencies.

97
00:07:12.181 --> 00:07:17.950
And so, what we have access to
now is the entire everything

98
00:07:17.950 --> 00:07:22.661
else that is exposed through this package,
but

99
00:07:22.661 --> 00:07:29.756
if I try to do npm run cowsay,
it doesn't know what I'm talking about.

100
00:07:29.756 --> 00:07:34.689
If I try to do node cowsay in here,

101
00:07:34.689 --> 00:07:38.486
it's also not happy.

102
00:07:38.486 --> 00:07:42.907
And so the idea is that these are intended
to be run from within the code inside your

103
00:07:42.907 --> 00:07:43.503
package.

104
00:07:43.503 --> 00:07:48.033
It's almost they're intended to
be sort of private for the for

105
00:07:48.033 --> 00:07:50.767
the package to be using, and you may or

106
00:07:50.767 --> 00:07:56.066
may not be exposing any of the
functionality of these packages with let's

107
00:07:56.066 --> 00:08:00.962
say scripts that you can run for
as a developer within your package.

108
00:08:00.962 --> 00:08:05.702
Or within your main actual script
that is running your project,

109
00:08:05.702 --> 00:08:10.526
which may or may not be providing
a higher level interface to one of

110
00:08:10.526 --> 00:08:14.054
these dependencies, or
something like that.

