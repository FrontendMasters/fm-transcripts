WEBVTT

1
00:00:00.310 --> 00:00:05.229
We have been plowing
through our quick wins,

2
00:00:05.229 --> 00:00:08.339
like just racking up the Ws.

3
00:00:08.339 --> 00:00:12.827
And in so doing, we've been sort of
reviewing some features we know,

4
00:00:12.827 --> 00:00:16.569
we've been finding out some
little fun facts and things.

5
00:00:16.569 --> 00:00:23.079
And we have been using a lot of functions
but not really talking about it as much.

6
00:00:23.079 --> 00:00:26.520
So that's gonna change right now.

7
00:00:26.520 --> 00:00:31.521
[LAUGH] So functions,
little itty-bitty topic that you could

8
00:00:31.521 --> 00:00:37.589
spend your entire life thinking about,
and many people do have, I guess.

9
00:00:38.999 --> 00:00:43.464
And for example, we've been seeing a lot
of these callback functions, right?

10
00:00:43.464 --> 00:00:48.634
Like when we pass in handlers to
the addEventListener method, or

11
00:00:48.634 --> 00:00:55.584
when we pass in callbacks to the timeout
and interval setters and cancellers.

12
00:00:55.584 --> 00:01:00.384
And we as JavaScript developers might
just be used to thinking, yeah,

13
00:01:00.384 --> 00:01:04.864
of course, I can just pass in
a function as an argument to some other

14
00:01:04.864 --> 00:01:09.744
function that does some other stuff,
but then also uses that function,

15
00:01:09.744 --> 00:01:14.784
sends it to the queue, and then it
eventually ends up on the call stack, and

16
00:01:14.784 --> 00:01:20.494
we're, we kinda take that for granted a
little bit sometimes, at least I do sided.

17
00:01:20.494 --> 00:01:25.799
But it's actually really cool
that JavaScript does this and

18
00:01:25.799 --> 00:01:28.615
totally crucial for our lives.

19
00:01:28.615 --> 00:01:32.966
And so just to throw a little bit more
jargon at you, we're talking about,

20
00:01:32.966 --> 00:01:37.248
the fact that JavaScript has functions
that can accept other functions as

21
00:01:37.248 --> 00:01:41.601
arguments or return other functions as
return values means it has a feature

22
00:01:41.601 --> 00:01:44.849
that's often referred to
as first-class functions,

23
00:01:44.849 --> 00:01:48.015
meaning functions are sort
of first-class data.

24
00:01:48.015 --> 00:01:53.545
They can be passed around like a string or
like an array.

25
00:01:53.545 --> 00:01:58.044
So in JavaScript,
you can pass a function as the input or

26
00:01:58.044 --> 00:02:03.598
the output return value of another
function and we do that all the time

27
00:02:03.598 --> 00:02:08.912
with our adEventListeners and
our set timeouts and whatnot.

28
00:02:08.912 --> 00:02:12.671
And so those functions that
take in other functions or

29
00:02:12.671 --> 00:02:17.600
might return another function as
a value would be in the Jargon world,

30
00:02:17.600 --> 00:02:21.277
something we could call
higher-order functions,

31
00:02:21.277 --> 00:02:26.018
meaning they're functions that
operate on other functions.

32
00:02:26.018 --> 00:02:31.152
This can become important for
certain things, for example,

33
00:02:31.152 --> 00:02:35.595
earlier we noticed that our
math random value wasn't

34
00:02:35.595 --> 00:02:40.431
updating because it was captured
outside of a function and

35
00:02:40.431 --> 00:02:46.249
then passed in or used in the body
of another callback function.

36
00:02:46.249 --> 00:02:50.750
So that is sort of something
that often tends to happen when,

37
00:02:50.750 --> 00:02:55.695
not just when we're declaring
functions within a particular, or

38
00:02:55.695 --> 00:03:01.346
variables within a particular scope
in our program, but also when we're,

39
00:03:01.346 --> 00:03:05.585
let's say returning a function
from another function,

40
00:03:05.585 --> 00:03:08.549
from a higher order function.

41
00:03:08.549 --> 00:03:11.049
Now, you might say why
would you want to do that?

42
00:03:11.049 --> 00:03:13.609
Why would I need a function
back from my function?

43
00:03:13.609 --> 00:03:16.079
I already had a function,
I don't want another function.

44
00:03:16.079 --> 00:03:18.309
How many times am I gonna
say the word function today?

45
00:03:18.309 --> 00:03:19.790
I don't know anybody's guess.

46
00:03:19.790 --> 00:03:23.161
It's gonna stop having any meaning to all
of us because of whatever that thing is

47
00:03:23.161 --> 00:03:25.336
that's called that your brain does.

48
00:03:25.336 --> 00:03:30.931
Anyway, these functions
that return other functions

49
00:03:30.931 --> 00:03:36.038
can be very useful when
there's like a particular

50
00:03:36.038 --> 00:03:40.658
operation that you tend
to have to run a lot and

51
00:03:40.658 --> 00:03:45.646
you want a kind of more
compact way to call it.

52
00:03:45.646 --> 00:03:51.220
So for example, in the console, have
we tried so in addition to console.log?

53
00:03:51.220 --> 00:03:57.186
Have we used things like console.warn,
console.error?

54
00:03:57.186 --> 00:04:02.130
Try it out if you haven't in your browser
console, just try seeing what those do.

55
00:04:02.130 --> 00:04:07.298
So there's so these are the different log

56
00:04:07.298 --> 00:04:13.951
levels that we can access
in our JavaScript console.

57
00:04:13.951 --> 00:04:18.935
So for example, if I do,
console.log ('hello') I

58
00:04:18.935 --> 00:04:24.129
get a regular old message that
we're used to looking at but

59
00:04:24.129 --> 00:04:29.536
if I do console.warn,
it's full as well yellow,

60
00:04:29.536 --> 00:04:35.792
whatever, and even more scary
I could do like console error.

61
00:04:35.792 --> 00:04:37.618
No, okay.

62
00:04:37.618 --> 00:04:42.985
And now it's very intense looking.

63
00:04:42.985 --> 00:04:45.771
And what's nice is in when
you're debugging, sometimes,

64
00:04:45.771 --> 00:04:48.774
have you ever loaded a page and
just poked around in the console and

65
00:04:48.774 --> 00:04:52.955
there's just a bajillion things and it's
like how am I supposed to find anything?

66
00:04:52.955 --> 00:04:59.425
Well, we can tell our console to only
display certain levels of information, for

67
00:04:59.425 --> 00:05:05.986
example, maybe I only want errors, I don't
wanna see the warnings or the logs, or

68
00:05:05.986 --> 00:05:11.654
maybe I don't know, just yellowing and
I don't want the word errors.

69
00:05:11.654 --> 00:05:14.305
[LAUGH] But in any case,
so log levels, right?

70
00:05:14.305 --> 00:05:18.986
So maybe I want like,
as a developer, maybe I am super

71
00:05:18.986 --> 00:05:24.085
excited to not have to type
console dot every single time,

72
00:05:24.085 --> 00:05:28.559
[LAUGH] and I can make a logger
function where I give it

73
00:05:28.559 --> 00:05:32.616
a certain log level that
I want to be using, and

74
00:05:32.616 --> 00:05:39.068
then I return a function that Itself
will take in the message I want to log,

75
00:05:39.068 --> 00:05:44.271
that returned function,
which I've called log here, but

76
00:05:44.271 --> 00:05:49.516
I don't even really need to give
it a name if I don't wanna.

77
00:05:49.516 --> 00:05:54.369
That is gonna find the appropriate
console method by using

78
00:05:54.369 --> 00:06:00.267
the property access in the square
bracket that we can do on objects.

79
00:06:00.267 --> 00:06:05.903
We can access a programmatically
determined property without the dot using

80
00:06:05.903 --> 00:06:11.107
the square brackets, and then call
that on the message that I gave it.

81
00:06:11.107 --> 00:06:16.173
So the way I could use this then is
like I've determined a particular level,

82
00:06:16.173 --> 00:06:20.845
and I've determined that I don't
wanna keep typing console.warn,

83
00:06:20.845 --> 00:06:25.069
I wanna just type worryUser,
and then my message.

84
00:06:25.069 --> 00:06:27.839
Probably not something you would
write in prod, but you get the idea.

85
00:06:27.839 --> 00:06:33.299
So I can make a logger with this level,
and then I will get,

86
00:06:33.299 --> 00:06:38.984
when I call worryUser
a console.warn little warning flag,

87
00:06:38.984 --> 00:06:43.344
and it'll be in that
level of my console logs.

