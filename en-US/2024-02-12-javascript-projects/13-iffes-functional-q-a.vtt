WEBVTT

1
00:00:00.270 --> 00:00:05.683
It bears mentioning that this syntax
is something useful to know about.

2
00:00:05.683 --> 00:00:10.660
Anybody know what this is called,
or what this is an instance of,

3
00:00:10.660 --> 00:00:13.559
or a couple instances of, actually?

4
00:00:13.559 --> 00:00:15.910
There's a term for it in JavaScript.

5
00:00:15.910 --> 00:00:17.509
It has an acronym.

6
00:00:17.509 --> 00:00:18.922
&gt;&gt; Iife.

7
00:00:18.922 --> 00:00:23.740
&gt;&gt; It is called an iife, or an I-I-F-E,

8
00:00:23.740 --> 00:00:29.426
an immediately invoked
function expression.

9
00:00:29.426 --> 00:00:35.468
So the syntax is, essentially,
instead of declaring this function,

10
00:00:35.468 --> 00:00:39.095
essentially with a function expression,

11
00:00:39.095 --> 00:00:44.147
a function keyword, or
it could also be an arrow function.

12
00:00:44.147 --> 00:00:50.567
Then using that name to invoke
it later at some other point, so

13
00:00:50.567 --> 00:00:55.629
not immediately,
we have a function expression

14
00:00:55.629 --> 00:01:01.925
that's evaluated to the function
itself with the parens and

15
00:01:01.925 --> 00:01:05.640
then called or invoked right away.

16
00:01:05.640 --> 00:01:08.801
So immediately invoked
function expression.

17
00:01:08.801 --> 00:01:14.250
And there's a couple of
cases where you might need

18
00:01:14.250 --> 00:01:19.190
to use this, for example, async and await.

19
00:01:19.190 --> 00:01:24.005
Await is something that you,
in some contexts

20
00:01:24.005 --> 00:01:28.823
in JavaScript,
do not have global access to.

21
00:01:28.823 --> 00:01:30.731
There's more to be said about that,

22
00:01:30.731 --> 00:01:33.326
guess where you can go to
find out all the details?

23
00:01:33.326 --> 00:01:34.556
&gt;&gt; Our good friend.

24
00:01:34.556 --> 00:01:37.560
&gt;&gt; Our good friend, MDN, exactly.

25
00:01:37.560 --> 00:01:42.152
But, for example,
if you need to await something but

26
00:01:42.152 --> 00:01:46.029
you don't have access
to the await keyword,

27
00:01:46.029 --> 00:01:51.030
you can put things in
an immediately invoked asynchronous

28
00:01:51.030 --> 00:01:55.846
function to essentially
accomplish the same thing as,

29
00:01:58.434 --> 00:02:02.327
Top level awaiting a fetch or
what have you.

30
00:02:02.327 --> 00:02:07.345
So this is all to say,
this syntax, as unintuitive

31
00:02:07.345 --> 00:02:12.259
as it might seem,
is gonna crop up once in a while.

32
00:02:12.259 --> 00:02:15.678
So now you know a fancy jargony term,
if you didn't already.

33
00:02:15.678 --> 00:02:16.557
Yeah?

34
00:02:16.557 --> 00:02:19.902
&gt;&gt; Do you have to name a function
that you define in that way?

35
00:02:19.902 --> 00:02:20.663
&gt;&gt; You do not.

36
00:02:20.663 --> 00:02:23.477
&gt;&gt; Yeah, and I don't imagine you
can get to it any other way.

37
00:02:23.477 --> 00:02:26.375
There's no way to get to
it by that name later?

38
00:02:26.375 --> 00:02:33.275
&gt;&gt; Essentially,
if all this function does is get invoked,

39
00:02:33.275 --> 00:02:37.155
right, just once, then yeah,

40
00:02:37.155 --> 00:02:42.346
there's absolutely no reason to name it.

41
00:02:42.346 --> 00:02:44.497
There's no reason to
have a reference to it.

42
00:02:44.497 --> 00:02:47.418
There's no reason to what have you.

43
00:02:47.418 --> 00:02:48.897
&gt;&gt; It'll go out of scope.

44
00:02:48.897 --> 00:02:54.861
&gt;&gt; And yes, exactly,
so let's double check.

45
00:02:54.861 --> 00:03:01.089
But let's go, when in doubt,
to the console.

46
00:03:01.089 --> 00:03:05.118
Okay, so I invoked it, I got one thing.

47
00:03:05.118 --> 00:03:10.807
Now, bling is not defined,
reference error, because,

48
00:03:10.807 --> 00:03:16.157
exactly, this was within its
own little world [LAUGH].

49
00:03:16.157 --> 00:03:21.376
And not, if I had done this this way,
essentially what

50
00:03:21.376 --> 00:03:26.485
that told JavaScript to do
is create a variable called

51
00:03:26.485 --> 00:03:31.838
bling in the global scope
that points to this function.

52
00:03:31.838 --> 00:03:39.158
So when I run that function, or when I
tell JavaScript this function expression,

53
00:03:39.158 --> 00:03:43.521
and I give JavaScript this command,
as it were.

54
00:03:43.521 --> 00:03:48.502
Remember this value, it's a function,

55
00:03:48.502 --> 00:03:54.207
call it bling,
I wanna be able to find it later.

56
00:03:54.207 --> 00:03:57.622
JavaScript's like, cool,
got you, that function keyword.

57
00:03:57.622 --> 00:04:02.908
Yeah, that tells me in my syntax that I'm
gonna set this up in the global scope.

58
00:04:02.908 --> 00:04:07.028
But when we put these parens around it,
and

59
00:04:07.028 --> 00:04:10.924
this could be an arrow function as well.

60
00:04:10.924 --> 00:04:15.560
In which case it's even more obvious that
we don't have to name it because we're

61
00:04:15.560 --> 00:04:18.911
not gonna do a const assignment here,
it's not allowed.

62
00:04:18.911 --> 00:04:21.858
So what we're going to get is, and yeah,

63
00:04:21.858 --> 00:04:26.671
this is not purely functional,
but that's a whole other problem.

64
00:04:26.671 --> 00:04:31.808
So what we're going to get is essentially

65
00:04:31.808 --> 00:04:38.871
not a reference to a function,
but the function itself.

66
00:04:38.871 --> 00:04:44.383
So we have no reference to it,
it's just a value.

67
00:04:44.383 --> 00:04:50.444
And we can see that little preview down
there that we've got a function line.

68
00:04:50.444 --> 00:04:53.442
Sorry, it's a function that
takes an argument line.

69
00:04:53.442 --> 00:04:59.688
But this is just a value, not a named
value like with our function expression.

70
00:04:59.688 --> 00:05:05.426
And that's fine cuz all we wanted
to do was call it, like this.

71
00:05:05.426 --> 00:05:10.388
Same as we would call any function,
because we got that value with

72
00:05:10.388 --> 00:05:16.089
the parens that said, hey, JavaScript,
go evaluate this chunk of code.

73
00:05:18.827 --> 00:05:25.513
Might have been a variable,
might have been some other thing.

74
00:05:27.818 --> 00:05:35.262
[LAUGH] A little Easter egg on the,
yeah, go looking for those funny memes.

75
00:05:35.262 --> 00:05:40.144
Anyway, via the value inside of it,
JavaScript doesn't care about

76
00:05:40.144 --> 00:05:44.114
how you got to it anymore,
all it knows is it has a value.

77
00:05:44.114 --> 00:05:49.548
And it can now do whatever you tell it
to do only as long as it knows about

78
00:05:49.548 --> 00:05:54.724
that value, which is only,
in this case, within those parens.

79
00:05:54.724 --> 00:05:59.576
Okay, so this is all a little
philosophical and whatever, but this,

80
00:05:59.576 --> 00:06:04.769
as I said, is a syntax that can be very
confusing when you first run into it.

81
00:06:04.769 --> 00:06:09.295
But does crop up in production
JavaScript sometimes because there

82
00:06:09.295 --> 00:06:13.659
are certain intricacies [LAUGH]
of the language that don't allow

83
00:06:13.659 --> 00:06:16.698
certain things at the global scope.

84
00:06:16.698 --> 00:06:20.445
So by scoping ourselves
out a new little world,

85
00:06:20.445 --> 00:06:24.483
we can get around some
things with these iifes.

86
00:06:24.483 --> 00:06:29.084
So this is all to say,
JavaScript support's doing

87
00:06:29.084 --> 00:06:32.619
the same thing lots of different ways.

88
00:06:32.619 --> 00:06:37.603
Another way we can refer to that
is it's a multi-paradigm language.

89
00:06:37.603 --> 00:06:42.511
So to keep with our theme of memes,
the meme theme, if you will.

90
00:06:42.511 --> 00:06:46.490
The handshake is like yeah,
object-oriented programming,

91
00:06:46.490 --> 00:06:50.026
functional programming,
what do they have in common?

92
00:06:50.026 --> 00:06:52.414
JavaScript, and
a whole bunch of other stuff, but

93
00:06:52.414 --> 00:06:53.975
that's [LAUGH] beside the point.

94
00:06:53.975 --> 00:06:55.895
So this is not a programming
paradigms course,

95
00:06:55.895 --> 00:06:58.247
although I do love talking
about programming paradigms.

96
00:06:58.247 --> 00:07:00.039
This is not a functional programming or

97
00:07:00.039 --> 00:07:02.874
even a specifically object-oriented
programming course.

98
00:07:02.874 --> 00:07:07.747
But this is all to say that one of
the things I think that makes life in

99
00:07:07.747 --> 00:07:12.013
the JavaScript universe,
I was gonna say difficult, but

100
00:07:12.013 --> 00:07:16.908
maybe I just wanted to, richer and
more complex and interesting.

101
00:07:16.908 --> 00:07:21.784
[LAUGH] Is that there are lots of
different ways to do similar things, and

102
00:07:21.784 --> 00:07:26.093
there are lots of extremely
different ways to conceive of doing

103
00:07:26.093 --> 00:07:28.468
different things in JavaScript.

104
00:07:28.468 --> 00:07:31.486
JavaScript supports all
kinds of different, well,

105
00:07:31.486 --> 00:07:36.113
especially these two different paradigms,
and so the code you'll find out there

106
00:07:36.113 --> 00:07:40.019
might look totally different from
the code you're used to writing.

107
00:07:40.019 --> 00:07:45.733
And it helps to know that both
of these are kind of possible.

108
00:07:45.733 --> 00:07:50.367
This is all to say, what do you think,
does JavaScript pick a side, objects or

109
00:07:50.367 --> 00:07:51.151
functions?

110
00:07:53.387 --> 00:07:56.178
&gt;&gt; I mean, you said everything
in JavaScripts and objects.

111
00:07:56.178 --> 00:07:57.577
So I'd like to say object.

112
00:07:57.577 --> 00:08:00.601
[LAUGH]
&gt;&gt; [LAUGH] What does co-pilot think?

113
00:08:00.601 --> 00:08:01.284
No, just kidding.

114
00:08:01.284 --> 00:08:03.134
[LAUGH]
&gt;&gt; [LAUGH]

115
00:08:03.134 --> 00:08:04.485
&gt;&gt; And indeed, yeah,

116
00:08:04.485 --> 00:08:09.252
as you might have seen in a little
preview Easter egg when we were talking

117
00:08:09.252 --> 00:08:12.756
about the heap earlier,
it was all full of objects.

118
00:08:12.756 --> 00:08:15.925
And yeah,
that function value that came back,

119
00:08:15.925 --> 00:08:19.184
[SOUND] that's an object
that's under the hood.

120
00:08:19.184 --> 00:08:24.369
No matter what we look at in JavaScript,
if we pull its mask off,

121
00:08:24.369 --> 00:08:28.896
because we're meddling kids,
we'll find an object.

122
00:08:28.896 --> 00:08:33.649
They're all different objects,
but in JavaScript,

123
00:08:33.649 --> 00:08:37.791
pretty much all data is
thought of as an object.

124
00:08:37.791 --> 00:08:44.377
And that brings us to
the OOP side of the coin.

125
00:08:44.377 --> 00:08:49.149
And yeah, speaking of accessibility,
this isn't the best on this GIF here, but

126
00:08:49.149 --> 00:08:52.966
in other words, life is a prototype
in JavaScript, it's true.

127
00:08:52.966 --> 00:08:56.987
Kind of everything comes
down to prototypes.

128
00:08:56.987 --> 00:09:02.909
I just wanna check if we need a break for
anything, or if anybody has questions?

129
00:09:02.909 --> 00:09:05.404
Also on the interwebs, yeah?

130
00:09:05.404 --> 00:09:08.874
&gt;&gt; Just a quick question
about the paradigm styles.

131
00:09:08.874 --> 00:09:13.638
Which style would be preferred when we
would write a pure function, functional or

132
00:09:13.638 --> 00:09:14.890
object-oriented?

133
00:09:14.890 --> 00:09:17.590
&gt;&gt; So kind of the concept of
pure functions is a big deal in

134
00:09:17.590 --> 00:09:21.790
functional programming, which if you
are interested in programming paradigms,

135
00:09:21.790 --> 00:09:25.403
I do have another course about
functional programming specifically.

136
00:09:25.403 --> 00:09:29.542
But suffice it to say that in JavaScript,

137
00:09:29.542 --> 00:09:33.929
we're not usually doing the purest stuff.

138
00:09:33.929 --> 00:09:36.449
Now, what do I mean when I'm
talking about pure functions?

139
00:09:36.449 --> 00:09:42.052
Well, a pure function is something that,
first of all,

140
00:09:42.052 --> 00:09:48.257
does absolutely nothing else in
the world than return a value.

141
00:09:48.257 --> 00:09:53.469
No logging to the console,
no setting no timeouts,

142
00:09:53.469 --> 00:09:58.918
no none of this fetching data
from the outside world and

143
00:09:58.918 --> 00:10:03.307
then posting to some other API, whatever.

144
00:10:03.307 --> 00:10:06.976
None of that, all a peer function
can do is return a value.

145
00:10:06.976 --> 00:10:11.364
And, to make matters
even more constrained,

146
00:10:11.364 --> 00:10:18.122
all it can do to compute that value is
look at the arguments that it gets.

147
00:10:18.122 --> 00:10:22.387
So that means,
every time it gets the same arguments,

148
00:10:22.387 --> 00:10:27.670
it doesn't matter what the weather is,
what date.now says it is,

149
00:10:27.670 --> 00:10:33.808
whether somebody's user agent has
a problem with its dependent, whatever.

150
00:10:33.808 --> 00:10:35.413
None of that matters,

151
00:10:35.413 --> 00:10:40.658
it's always going to return the same
value if you give it the same inputs.

152
00:10:40.658 --> 00:10:44.053
In other word, it's deterministic.

153
00:10:44.053 --> 00:10:49.274
So when we're talking about
functions in JavaScript,

154
00:10:49.274 --> 00:10:54.616
for example,
this function that we just looked at here,

155
00:10:58.437 --> 00:11:04.237
Or this one even, which I [LAUGH]
put the label functional programming

156
00:11:04.237 --> 00:11:09.337
on this slide, and
the functional programmers among us will

157
00:11:09.337 --> 00:11:14.437
be like [SOUND] horrified because
this is not a pure function,

158
00:11:14.437 --> 00:11:20.955
if we're using this to do something that
logs to the console or what have you.

159
00:11:20.955 --> 00:11:25.807
But that's why in this version we're using
console log, and in this version we're

160
00:11:25.807 --> 00:11:30.247
just returning a string, which if we're
entering this code in the console,

161
00:11:30.247 --> 00:11:33.284
we get the string out either way,
so it's all good.

162
00:11:33.284 --> 00:11:38.018
But in JavaScript we're often writing
functions with the function keyword or

163
00:11:38.018 --> 00:11:41.472
the arrow syntax that do stuff
other than return things.

164
00:11:41.472 --> 00:11:45.530
Sometimes we don't even have the return
keyword because we're not trying to return

165
00:11:45.530 --> 00:11:49.703
anything, we're just trying to execute a
bunch of instructions one after the other,

166
00:11:49.703 --> 00:11:51.033
do some imperative stuff.

167
00:11:51.033 --> 00:11:52.867
And those are all side effects, so

168
00:11:52.867 --> 00:11:56.103
then we're now not in the realm
of functional programming.

169
00:11:56.103 --> 00:11:59.440
So if you wanna learn more about
that stuff, there are resources,

170
00:11:59.440 --> 00:12:02.122
you can check out my other
Frontend Masters courses,

171
00:12:02.122 --> 00:12:04.821
which have links to a whole
bunch of other resources.

172
00:12:04.821 --> 00:12:09.865
But in general, to go back to the
question, if we're trying to write a pure

173
00:12:09.865 --> 00:12:15.005
function in JavaScript, we would be
in the functional programming world.

174
00:12:15.005 --> 00:12:20.093
And even sometimes in what's called
functional programming, like this

175
00:12:20.093 --> 00:12:25.521
little bling guy here that's logging
into the console, not a peer function.

176
00:12:25.521 --> 00:12:28.580
So we can have functional-ish
programming in JavaScript and

177
00:12:28.580 --> 00:12:30.827
sometimes call it functional programming.

