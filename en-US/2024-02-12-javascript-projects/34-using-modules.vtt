WEBVTT

1
00:00:00.140 --> 00:00:04.469
All right, so
we can also use ESMs in the browser, ESM,

2
00:00:04.469 --> 00:00:09.078
ESModule syntax,
the import statements and whatnot, and

3
00:00:09.078 --> 00:00:12.970
export, if we put a type
module in our script tag.

4
00:00:13.970 --> 00:00:16.940
Browser loves those types attributes.

5
00:00:16.940 --> 00:00:21.934
So, we can use this same syntax
in a client-side script that has

6
00:00:21.934 --> 00:00:23.609
type equals module.

7
00:00:25.219 --> 00:00:30.447
And in node, there are a couple ways we
can tell node that we wanna use the ESM,

8
00:00:30.447 --> 00:00:37.949
the ES modules, Vibe, the ES module
solution instead of CommonJS.

9
00:00:37.949 --> 00:00:41.396
And one is that we can give
a different extension to our file.

10
00:00:41.396 --> 00:00:46.266
So instead of .js, I could call them .mjs.

11
00:00:46.266 --> 00:00:53.652
Or I can add the key type module,
the entry type module to my package.json.

12
00:00:53.652 --> 00:00:57.340
So I'm gonna do that because I only have
to edit one line of code rather than

13
00:00:57.340 --> 00:00:58.776
a whole bunch of file names.

14
00:00:59.787 --> 00:01:04.418
So if we add type module
to our package.json,

15
00:01:04.418 --> 00:01:09.643
that is going to transform
this from a thing that will

16
00:01:09.643 --> 00:01:14.867
be interpreted by node as
a common js module to a thing

17
00:01:14.867 --> 00:01:19.735
that will be interpreted
by node as an ES module,

18
00:01:19.735 --> 00:01:24.177
allowing the different syntax that I want.

19
00:01:24.177 --> 00:01:29.424
So I can, we can do, I'll just put it
right here, doesn't really matter.

20
00:01:29.424 --> 00:01:33.447
There's, yeah, so and
you can see here VS code is very helpfully

21
00:01:33.447 --> 00:01:38.512
auto-completing the options, and it is
good to be explicit in general, right?

22
00:01:38.512 --> 00:01:43.139
Because for example, some other thing
might make a different default choice if

23
00:01:43.139 --> 00:01:46.451
there is no type set, but
in this case, these days we're

24
00:01:46.451 --> 00:01:51.836
likely just gonna be writing type module
a lot, so let's get friendly with it.

25
00:01:51.836 --> 00:01:58.190
Okay, now that I have declared
this to be a ES module,

26
00:01:58.190 --> 00:02:02.425
whoops, my gosh, I keep [LAUGH]

27
00:02:02.425 --> 00:02:07.668
entering code in completely wrong places.

28
00:02:08.828 --> 00:02:11.048
Type module, clear, cool, okay.

29
00:02:11.048 --> 00:02:20.293
All right, so now if I run,
What I was just trying to do,

30
00:02:20.293 --> 00:02:24.383
which is the script that's from
the entry point of main.js.

31
00:02:24.383 --> 00:02:27.690
Before that gave me the error about,
I don't know what import,

32
00:02:27.690 --> 00:02:32.693
you're trying to import and you're outside
a module, so like, now it's not a problem.

33
00:02:32.693 --> 00:02:37.718
Now we just have a beautiful cow saying
some stuff, it has a very default eyes and

34
00:02:37.718 --> 00:02:41.403
tongue set, but
you all can figure that out later.

35
00:02:41.403 --> 00:02:46.284
So the point here is [LAUGH] there is
a big difference between, [LAUGH] well,

36
00:02:46.284 --> 00:02:51.325
first of all, between the way that
node historically handles modules, and

37
00:02:51.325 --> 00:02:56.207
now that most kind of modern projects
are moving towards, is that to say,

38
00:02:56.207 --> 00:03:01.283
you're not gonna find a whole bunch of
requires in your node dependencies?

39
00:03:01.283 --> 00:03:03.023
You definitely are.

40
00:03:03.023 --> 00:03:07.753
Go poking around through node modules
you'll require all kinds of other things.

41
00:03:07.753 --> 00:03:11.379
But since the browser
supports yes modules too, and

42
00:03:11.379 --> 00:03:16.080
we have to be explicit about it
there also, so that it doesn't think

43
00:03:16.080 --> 00:03:20.944
it's just dealing with our regular
old script tag that can't support

44
00:03:20.944 --> 00:03:25.659
this type of import output system,
we need to be explicit about it.

45
00:03:26.899 --> 00:03:31.829
So type module is gonna show up on
both sides of the interweb divide.

46
00:03:31.829 --> 00:03:36.674
This also works now with the scripts
that I have defined in my package

47
00:03:36.674 --> 00:03:41.523
JSON that are going to use the code
that I've written to run things.

48
00:03:41.523 --> 00:03:48.444
So, for example,
this one I got a little cowier with.

49
00:03:48.444 --> 00:03:53.507
Anyway, [LAUGH] okay, the idea here is
not to have wrapped our heads around

50
00:03:53.507 --> 00:03:58.488
everything there is to know about
modules in JavaScript because again,

51
00:03:58.488 --> 00:04:00.312
it's an infinite task.

52
00:04:00.312 --> 00:04:03.822
But now that we're at least in a nice
moment of time where people have

53
00:04:03.822 --> 00:04:06.842
generally reached a consensus
of the Mandalorian style,

54
00:04:06.842 --> 00:04:09.302
this is the way forward with ES modules.

55
00:04:09.302 --> 00:04:12.199
It's a lot better than when there was
a moment there where it was like,

56
00:04:12.199 --> 00:04:14.322
we got to support both all the time and
everything.

57
00:04:14.322 --> 00:04:17.632
So that's still a historical
fact we have to live with.

58
00:04:17.632 --> 00:04:21.382
But for now, from here on out,
we're just gonna be in ES module land.

