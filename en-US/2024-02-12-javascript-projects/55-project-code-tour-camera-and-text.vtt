WEBVTT

1
00:00:00.220 --> 00:00:04.992
Now we have a camera.js,
which again looks, really,

2
00:00:04.992 --> 00:00:09.263
really similar to what we had,
if not identical.

3
00:00:09.263 --> 00:00:17.702
The only difference is that it
is taking in a preview canvas.

4
00:00:17.702 --> 00:00:22.675
Argument, parameter,
which would be that little canvas that's

5
00:00:22.675 --> 00:00:26.506
in the modal that we put there for
a preview, okay?

6
00:00:26.506 --> 00:00:29.537
And all this other stuff is great.

7
00:00:29.537 --> 00:00:33.683
It's saying, okay,
if I have a preview canvas,

8
00:00:33.683 --> 00:00:40.596
then when the video is ready to play, and
we're using our canplay listener here for

9
00:00:40.596 --> 00:00:46.561
that meaning like when the video is
like got some stream data coming in.

10
00:00:48.241 --> 00:00:54.941
Then we're gonna run this
drop preview function.

11
00:00:56.691 --> 00:01:00.534
And then we noticed we have our like our
draw video which looks the same as what we

12
00:01:00.534 --> 00:01:03.854
did before of drawing an image to
the canvas from the video element,

13
00:01:03.854 --> 00:01:06.082
that's we already did that.

14
00:01:06.082 --> 00:01:14.172
Drawpreview looks very very
similar with one small difference.

15
00:01:14.172 --> 00:01:21.187
The call to draw image, well it's a little
bit, it's using one of those fancier,

16
00:01:21.187 --> 00:01:26.793
elaborate options of the ways
you can tell Canvas what to do.

17
00:01:26.793 --> 00:01:31.842
Essentially what this is doing is scaling
down the video to fit in a smaller

18
00:01:31.842 --> 00:01:36.332
Canvas so that I'm not just drawing
like a corner of my forehead.

19
00:01:36.332 --> 00:01:40.444
But this is all we looked at the docs and
we saw kind of how we can access the video

20
00:01:40.444 --> 00:01:43.055
width and the canvas width and
all of that stuff.

21
00:01:43.055 --> 00:01:45.606
So this is what's happening in this call.

22
00:01:45.606 --> 00:01:50.056
And if I did that once I would
get my just small little selfie.

23
00:01:50.056 --> 00:01:54.736
But what we're doing is
putting that draw image

24
00:01:54.736 --> 00:01:59.650
inside of a set interval
callback which is running

25
00:01:59.650 --> 00:02:04.681
every 16 milliseconds,
so essentially every,

26
00:02:04.681 --> 00:02:10.416
I think that's, what is that,
60 hertz or something?

27
00:02:10.416 --> 00:02:14.272
Whatever the fastest, basically,
refresh rate that the browser and

28
00:02:14.272 --> 00:02:16.576
the video are both kind of able to do.

29
00:02:16.576 --> 00:02:19.708
Okay, so now,
what else is happening in our main.js?

30
00:02:20.954 --> 00:02:22.732
Now, we know some of these APIs,

31
00:02:22.732 --> 00:02:25.983
essentially that our various
modules are kind of exposing.

32
00:02:25.983 --> 00:02:30.170
Which, again, these are choices that,
well, I made a lot of the choices,

33
00:02:30.170 --> 00:02:32.735
you might decide you
want different choices.

34
00:02:32.735 --> 00:02:38.811
And you are totally free to refactor
a codebase like this as you would like.

35
00:02:38.811 --> 00:02:40.741
We'll talk about it in a second.

36
00:02:40.741 --> 00:02:45.051
And essentially, like I said, there's
only one other little extra thing that

37
00:02:45.051 --> 00:02:49.641
is happening here that we haven't really
talked about in our quick wins, which is.

38
00:02:49.641 --> 00:02:55.121
Okay, so the memecanvas is
that the big main Canvas.

39
00:02:55.121 --> 00:03:00.084
But instead of drawing directly to that,
what I've done is I've split

40
00:03:00.084 --> 00:03:04.563
out two kind of like secret canvay
elements of canvas elements.

41
00:03:04.563 --> 00:03:09.830
So I'm creating new elements that
are never attached to the page.

42
00:03:09.830 --> 00:03:14.845
They're never actually rendered
visually for the user to see but

43
00:03:14.845 --> 00:03:20.224
what this allows me to do is to have
essentially separate layers one for

44
00:03:20.224 --> 00:03:23.072
the selfie and then one for the text,

45
00:03:24.726 --> 00:03:28.530
That are the same width and
height as the memeCanvas, both of them.

46
00:03:30.442 --> 00:03:35.308
And what that lets me do is create
a little redrawMeme function,

47
00:03:37.589 --> 00:03:42.304
That is using again,
that's same draw image.

48
00:03:42.304 --> 00:03:46.257
It's grabbing our memeCanvas context,
and it's using our same,

49
00:03:46.257 --> 00:03:51.332
our good old friend drawImage, which we're
just doing the simplest version of here.

50
00:03:51.332 --> 00:03:54.448
Because we know that we already
made sure the width and

51
00:03:54.448 --> 00:03:56.811
the height are the same for all of these.

52
00:03:56.811 --> 00:04:01.712
And you can pass in anything here that
Canvas API knows how to interpret

53
00:04:01.712 --> 00:04:03.219
as an image, right?

54
00:04:03.219 --> 00:04:04.607
So we passed in a video.

55
00:04:04.607 --> 00:04:09.065
You could also pass in like a .jpeg or
whatever that you've loaded into

56
00:04:09.065 --> 00:04:12.408
the browser, but
we can even pass in another Canvas,

57
00:04:12.408 --> 00:04:15.551
because Canvas knows how
to make an image of that.

58
00:04:15.551 --> 00:04:18.032
That's how we could like save
image by right clicking.

59
00:04:19.243 --> 00:04:25.068
So what we're doing is we're creating
ourselves a little redraw function so

60
00:04:25.068 --> 00:04:29.817
that basically any time one of
the two changes, either layer,

61
00:04:29.817 --> 00:04:34.044
we can redraw the selfie and
then redraw the fresh text.

62
00:04:34.044 --> 00:04:39.401
So that we're not piling up just
text objects on top of each other,

63
00:04:39.401 --> 00:04:45.602
on the Canvas, and then you wouldn't
be able to read them, yeah?

64
00:04:45.602 --> 00:04:51.713
&gt;&gt; So there's no step to [LAUGH] since
the memeCanvas is made up of these other

65
00:04:51.713 --> 00:04:58.943
layers., you don't have to clear them out
because they're stacked on each other.

66
00:04:58.943 --> 00:05:03.913
By the way,
Canvas knows how to do its thing, right?

67
00:05:03.913 --> 00:05:07.099
&gt;&gt; So,
that's actually a very good question and

68
00:05:07.099 --> 00:05:11.277
it's something that we can kind
of decide how we're doing.

69
00:05:11.277 --> 00:05:14.235
And okay,
we're jumping ahead a little bit but,

70
00:05:14.235 --> 00:05:17.909
let's take a look at some of
these draw functions, shall we?

71
00:05:17.909 --> 00:05:23.375
So we have this drawText function and
our text.js, and the text is really

72
00:05:23.375 --> 00:05:28.859
the one that's going to be a problem
here because when we're redrawing.

73
00:05:28.859 --> 00:05:29.670
For example,

74
00:05:29.670 --> 00:05:34.276
in our drop preview where we're redrawing
that image every 16 milliseconds.

75
00:05:34.276 --> 00:05:37.987
Yes, there it is overwriting the data for

76
00:05:37.987 --> 00:05:43.512
the entire Canvas because it's
always the same sized image.

77
00:05:43.512 --> 00:05:46.439
So it's essentially like blasting
away all the previous pixels and

78
00:05:46.439 --> 00:05:49.841
putting in new pixels and blasting
those away again every 16 milliseconds.

79
00:05:49.841 --> 00:05:56.273
But text as we saw,
it doesn't take up the entire frame,

80
00:05:56.273 --> 00:06:00.696
it's kind of weird like transparent,

81
00:06:00.696 --> 00:06:04.727
the holes in the letters and stuff.

82
00:06:04.727 --> 00:06:09.859
So Canvas knows how with the drawText
method which we use already.

83
00:06:09.859 --> 00:06:12.105
It knows how to kind of
figure all that out and

84
00:06:12.105 --> 00:06:15.811
like only overwrite the pixels that
correspond to where the font based on

85
00:06:15.811 --> 00:06:18.380
I'm using impact and
not Comic Sans or whatever.

86
00:06:20.411 --> 00:06:25.633
However, since that is not all
of the pixels on the Canvas,

87
00:06:25.633 --> 00:06:29.503
when we draw that text, sorry, wrong tab.

88
00:06:29.503 --> 00:06:34.427
When we draw that text, we do want to make
sure that we're clearing any previous

89
00:06:34.427 --> 00:06:36.198
text that's on the canvas.

90
00:06:36.198 --> 00:06:38.748
So thank you for
reminding me to mention that.

91
00:06:38.748 --> 00:06:42.511
And there is a method for that,
there's an app for that [LAUGH],

92
00:06:42.511 --> 00:06:44.075
there's an API for that.

93
00:06:44.075 --> 00:06:48.998
And it's called, same as we had drawRect
when we drew our beautiful JavaScript

94
00:06:48.998 --> 00:06:51.214
logo, we drew a yellow rectangle.

95
00:06:51.214 --> 00:06:56.109
We also can clearRect, and if we make
the Rect that we're clearing as big

96
00:06:56.109 --> 00:07:01.004
as the canvas so starting from 00 and
going all the way to width height,

97
00:07:01.004 --> 00:07:04.954
the whole thing,
then we're clearing the whole canvas.

98
00:07:04.954 --> 00:07:10.981
This is basically saying,
get rid of all the pixels you had before,

99
00:07:10.981 --> 00:07:15.553
and then it'll be filling
text like we saw before.

100
00:07:15.553 --> 00:07:19.719
Just for a little better readability and
contrast, as and

101
00:07:19.719 --> 00:07:22.694
meminess, we're also adding a stroke or

102
00:07:22.694 --> 00:07:28.404
sort of an outline around that text with
the corresponding strokeText method.

103
00:07:28.404 --> 00:07:32.934
Which is, again you can go on MDN and read
all about all of how all these work and

104
00:07:32.934 --> 00:07:36.979
everything, but essentially fill is
like the inside of an object and

105
00:07:36.979 --> 00:07:39.374
the stroke is the outline of the object.

106
00:07:39.374 --> 00:07:43.019
And we're setting up some styles,
some colours,

107
00:07:43.019 --> 00:07:45.569
some fonts got to have that impact.

108
00:07:45.569 --> 00:07:46.244
[LAUGH] And

109
00:07:46.244 --> 00:07:51.140
that is then what we're redrawing
on our new blank slate of a canvas.

110
00:07:51.140 --> 00:07:56.222
So what's happening is that we're
not actually clearing the main

111
00:07:56.222 --> 00:08:01.941
canvas because every time we redraw
the selfie it already sort of clears for

112
00:08:01.941 --> 00:08:04.589
us by redrawing all those pixels.

113
00:08:04.589 --> 00:08:07.902
And then when we draw the text
canvas on top of that.

114
00:08:11.813 --> 00:08:16.576
I want main here we are okay so

115
00:08:16.576 --> 00:08:19.757
then when we draw.

116
00:08:19.757 --> 00:08:24.413
So first we draw the selfieLayer
to the memeContext, and

117
00:08:24.413 --> 00:08:30.815
that essentially is indistinguishable
from first doing like a memecontext,

118
00:08:30.815 --> 00:08:34.793
clearRect width, height, 00 width height.

119
00:08:34.793 --> 00:08:38.753
Because we know that the selfieLayer
is the exact same dimensions.

120
00:08:38.753 --> 00:08:41.620
And that the video is the exact
same dimensions and so

121
00:08:41.620 --> 00:08:44.108
it's gonna redraw all those pixels anyway.

122
00:08:44.108 --> 00:08:46.835
So we don't need to bother
making them transparent and

123
00:08:46.835 --> 00:08:49.931
then filling them back in again
we can just redraw on top of it.

124
00:08:49.931 --> 00:08:54.483
And the canvas itself doesn't
have any concept of layers,

125
00:08:54.483 --> 00:08:59.137
it's just pixels it knows that
there's x and a y and a pixel.

126
00:08:59.137 --> 00:09:00.192
That's what it knows.

127
00:09:00.192 --> 00:09:04.980
So that's why we have to kind of implement
our own layering if we want things

128
00:09:04.980 --> 00:09:08.532
like that transparency of the text, right?

129
00:09:08.532 --> 00:09:13.116
And since we're gonna be hacking on this,
y'all can find out what happens

130
00:09:13.116 --> 00:09:16.902
if you don't do this and
why we're doing it this way.

131
00:09:16.902 --> 00:09:18.848
But suffice it to say.

132
00:09:18.848 --> 00:09:21.590
We're using all the same tools
with the addition of clearRect,

133
00:09:21.590 --> 00:09:23.668
which is pretty analogous to drawRect.

134
00:09:23.668 --> 00:09:28.338
We're using all the same API's and
same things that we already used.

135
00:09:28.338 --> 00:09:31.965
We're also taking advantage of the fact
that a canvas is an image as far as

136
00:09:31.965 --> 00:09:33.338
the browser is concerned.

137
00:09:33.338 --> 00:09:36.964
And so we can use drawImage
with another canvas as data to

138
00:09:36.964 --> 00:09:39.508
fill in our beautiful meme.

139
00:09:39.508 --> 00:09:45.188
And the selfie tech, the selfieCanvas,
and the selfieLayerCanvas and

140
00:09:45.188 --> 00:09:50.976
the textLayerCanvas, the user never
actually sees those two canvases.

141
00:09:50.976 --> 00:09:53.633
I don't know why the plural
of Canvas is just,

142
00:09:53.633 --> 00:09:56.438
I'm not satisfied with
any of these solutions.

143
00:09:56.438 --> 00:09:57.869
&gt;&gt; It would be Canvi.

144
00:09:57.869 --> 00:10:03.317
&gt;&gt; Exactly, can be like be, whatever.

145
00:10:03.317 --> 00:10:07.558
Anyway, neither of these two layer
canvases is exposed to the user.

146
00:10:07.558 --> 00:10:10.811
They essentially just exist for

147
00:10:10.811 --> 00:10:15.998
us to save some data to,
if you think of it that way.

148
00:10:15.998 --> 00:10:20.104
And we had that case like a couple
of times where we were for example,

149
00:10:20.104 --> 00:10:24.947
creating elements secretly before we
actually render them by attaching them.

150
00:10:24.947 --> 00:10:27.745
Or appending them to elements
that are in the DOM.

151
00:10:30.336 --> 00:10:30.848
Okay, so

152
00:10:30.848 --> 00:10:34.957
I believe we've now covered pretty
much everything that's going on here.

153
00:10:34.957 --> 00:10:40.857
Again, other than the CSS and things like
that which you can peruse at your leisure.

154
00:10:42.357 --> 00:10:47.212
And then in terms of how I got this up
onto anjana.dev/meme-me it's the exact

155
00:10:47.212 --> 00:10:50.052
same thing that we just did for
our selfie cam.

156
00:10:50.052 --> 00:10:55.964
So that's where we have a github/workflow
in here, exact same file,

157
00:10:55.964 --> 00:11:02.467
deploy pages, YAML, and we have that
vite.config.js, exact same thing,

158
00:11:02.467 --> 00:11:07.507
just with a different base path for
the different repo name.

159
00:11:07.507 --> 00:11:12.513
And everything else is like all stuff
that we just did with the selfieCam.

