WEBVTT

1
00:00:00.006 --> 00:00:06.540
Objects, shall we object?

2
00:00:06.540 --> 00:00:08.840
Let's talk about for of loops for a sec.

3
00:00:10.190 --> 00:00:10.820
We use them.

4
00:00:12.020 --> 00:00:14.381
We love them, maybe.

5
00:00:14.381 --> 00:00:14.969
Do we?

6
00:00:14.969 --> 00:00:18.730
Perhaps, okay, we're okay with them.

7
00:00:18.730 --> 00:00:22.789
We earlier were talking about different
ways to iterate over stuff in JavaScript.

8
00:00:22.789 --> 00:00:26.879
And there's been many
options over the years.

9
00:00:26.879 --> 00:00:29.509
for of is a relatively new one.

10
00:00:29.509 --> 00:00:36.189
We also have the forEach() method
sometimes that we can call.

11
00:00:36.189 --> 00:00:40.750
We also have the .map() method
that we can call sometimes.

12
00:00:40.750 --> 00:00:42.310
What's going on with all this?

13
00:00:42.310 --> 00:00:43.630
Let's talk about it.

14
00:00:43.630 --> 00:00:45.350
But let's start with for of.

15
00:00:45.350 --> 00:00:48.050
Okay, so
hopefully you've seen this syntax before.

16
00:00:49.330 --> 00:00:52.819
When we have something like an array,
for example,

17
00:00:52.819 --> 00:00:57.275
here I have an array of engines,
V8, SpiderMonkey, etc, etc.

18
00:00:57.275 --> 00:01:02.224
I can put in a for loop, for
(let eng of engines), and

19
00:01:02.224 --> 00:01:08.250
then console.log() that engine
to uppercase, and we get out,

20
00:01:08.250 --> 00:01:14.073
as we would expect, one log for
each of the values in my engines.

21
00:01:16.313 --> 00:01:23.731
Similarly, when I do an element.children
property from our dom API.

22
00:01:23.731 --> 00:01:28.877
If I wanna get the children
elements of a document,

23
00:01:28.877 --> 00:01:37.386
if I wanna get the divs inside of another
div that's inside of another div, yeah.

24
00:01:37.386 --> 00:01:41.785
If I wanna get the children of an element,
there's a .children for that, and

25
00:01:41.785 --> 00:01:43.871
I can also use that in a for of.

26
00:01:43.871 --> 00:01:50.457
And so, for example,
if I log each of the child's tag names,

27
00:01:50.457 --> 00:01:55.033
I'll get head and body and blah blah blah.

28
00:01:55.033 --> 00:01:59.846
You can try this out in the browser,
in the console.

29
00:01:59.846 --> 00:02:05.098
The important thing is,
in both of these cases,

30
00:02:05.098 --> 00:02:12.525
we are able to iterate over this data,
all of the strings in an array,

31
00:02:12.525 --> 00:02:17.391
all of the HTML elements
that are the children

32
00:02:17.391 --> 00:02:23.072
of another HTML element,
this is iteration.

33
00:02:23.072 --> 00:02:24.182
And this is one way of doing it.

34
00:02:25.542 --> 00:02:29.726
Now we also know,
as we just mentioned, .map().

35
00:02:29.726 --> 00:02:34.002
And if I try to do the .map()
approach on the array engines,

36
00:02:34.002 --> 00:02:37.262
all good, I get basically the same thing.

37
00:02:37.262 --> 00:02:41.181
It's not logged to the console, it's a new
array with the uppercase values in it, but

38
00:02:41.181 --> 00:02:43.855
I've still iterated over all of them.

39
00:02:43.855 --> 00:02:50.405
But if I try to do that on the document
children, I get TypeError, not a function.

40
00:02:51.845 --> 00:02:56.441
How many times in my life have I
seen these words, not a function?

41
00:02:56.441 --> 00:02:57.925
Goodness.

42
00:02:57.925 --> 00:03:01.209
Anyway, what is going on here?

43
00:03:01.209 --> 00:03:03.319
The for of loop worked the same way.

44
00:03:03.319 --> 00:03:05.159
The .map() does not work.

45
00:03:05.159 --> 00:03:07.413
It works on engines, but
it doesn't work on children.

46
00:03:07.413 --> 00:03:10.463
What gives?

47
00:03:10.463 --> 00:03:15.713
So let's try to dig in,
after briefly appreciating this classic

48
00:03:15.713 --> 00:03:22.655
meme of confusion, which JavaScript,
I feel like, puts me in all the time.

49
00:03:22.655 --> 00:03:28.365
All right, so for of worked on both,
.map() doesn't work.

50
00:03:28.365 --> 00:03:29.855
What's the deal?

51
00:03:29.855 --> 00:03:34.286
Okay, we have a typeof
operator in JavaScript, so

52
00:03:34.286 --> 00:03:38.155
let's see what kinda
types we got going on.

53
00:03:38.155 --> 00:03:42.435
So if I do typeof engines,
I get object, okay, all right?

54
00:03:42.435 --> 00:03:45.974
I thought it was an array, but
I guess an array is an object.

55
00:03:45.974 --> 00:03:46.960
And then what about children?

56
00:03:46.960 --> 00:03:48.411
Yeah, that's also an object.

57
00:03:48.411 --> 00:03:50.030
Cool, great, fabulous, thank you.

58
00:03:50.030 --> 00:03:52.685
This is not helpful typeof.

59
00:03:52.685 --> 00:03:59.069
[LAUGH] What if we start looking for

60
00:03:59.069 --> 00:04:05.462
the prototype of the object?

61
00:04:05.462 --> 00:04:06.922
What are we dealing with, prototype?

62
00:04:06.922 --> 00:04:12.604
So we mentioned this briefly in
first steps, but essentially,

63
00:04:12.604 --> 00:04:19.340
in JavaScript's object oriented
programming, everything is an object,

64
00:04:19.340 --> 00:04:23.776
an array, a string,
sort of, a [LAUGH] function.

65
00:04:23.776 --> 00:04:25.366
They're all objects.

66
00:04:25.366 --> 00:04:31.103
And, Objects have prototypes,

67
00:04:31.103 --> 00:04:39.460
where a prototype is sort of like
an object that all of its properties and

68
00:04:39.460 --> 00:04:44.197
methods are gonna be accessible to the,

69
00:04:44.197 --> 00:04:51.771
we could sort of think of it as
a sub object with that prototype.

70
00:04:51.771 --> 00:04:57.815
So let's use this, we're just gonna invoke
without thinking about it too hard,

71
00:04:57.815 --> 00:05:04.422
the capital O object.getPrototype of
method and give it a value, like engines.

72
00:05:04.422 --> 00:05:06.962
And now we get a little bit
more useful differentiation.

73
00:05:06.962 --> 00:05:10.522
We see that they're both type object,
not helpful, but

74
00:05:10.522 --> 00:05:12.982
they have different prototypes.

75
00:05:12.982 --> 00:05:15.202
The first one has an array
as its prototype.

76
00:05:16.202 --> 00:05:19.106
This is the same thing as
the built-in array, object.

77
00:05:20.126 --> 00:05:23.630
In case you've done array.from or
anything like that,

78
00:05:23.630 --> 00:05:26.226
we'll talk about it in a second.

79
00:05:26.226 --> 00:05:28.692
But also, if we call it on doc.children,

80
00:05:28.692 --> 00:05:31.886
we see we get a totally
different type of thing.

81
00:05:31.886 --> 00:05:34.036
Well, totally different thing.

82
00:05:34.036 --> 00:05:36.309
Types really have gone out
the window at this point,

83
00:05:36.309 --> 00:05:39.161
which is the whole reason TypeScript
exists, basically [LAUGH].

84
00:05:39.161 --> 00:05:41.748
Well, no, I'm oversimplifying, but
there's other courses about that.

85
00:05:41.748 --> 00:05:42.658
We're not doing that here.

86
00:05:42.658 --> 00:05:47.565
Anyway, the prototype of the children
property on an HTML element is

87
00:05:47.565 --> 00:05:52.388
something called HTML collection
prototype, which, all right,

88
00:05:52.388 --> 00:05:55.517
I still don't really know what that is,
but

89
00:05:55.517 --> 00:06:00.275
at least we can tell that these
are two different kinds of objects.

90
00:06:02.185 --> 00:06:07.025
So we talk about the prototype
chain in JavaScript.

91
00:06:07.025 --> 00:06:11.972
Every object has a prototype,
and that prototype,

92
00:06:11.972 --> 00:06:16.015
like array, has its own prototype.

93
00:06:16.015 --> 00:06:21.780
So we can follow this kind of chain,
and there's this sort of secret-ish,

94
00:06:21.780 --> 00:06:27.818
not really secret, but fancy, cuz it has
double underscores [LAUGH] around it,

95
00:06:27.818 --> 00:06:30.990
a property called __proto__ [LAUGH].

96
00:06:30.990 --> 00:06:36.240
And that will tell you also what
the prototype is of an object.

97
00:06:36.240 --> 00:06:39.261
The nice part is you can chain them
together so you can keep going up.

98
00:06:39.261 --> 00:06:45.623
Okay, so engines.proto is array, but
engines.proto.proto is object, all right?

99
00:06:45.623 --> 00:06:47.916
What about engines.proto.proto.proto?

100
00:06:47.916 --> 00:06:49.364
Null, whoa!

101
00:06:52.065 --> 00:06:57.173
We've reached the top of the prototype
chain, or the end of the prototype chain.

102
00:06:57.173 --> 00:06:59.535
This is a slightly different chain,

103
00:06:59.535 --> 00:07:04.572
a food chain in which plants are at
the bottom, that's our individual array.

104
00:07:04.572 --> 00:07:08.232
Animals are in the middle, this is
our array, then there's humans, and

105
00:07:08.232 --> 00:07:10.960
then there's zombies at
the top that eat everything.

