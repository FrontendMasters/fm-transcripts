WEBVTT

1
00:00:00.370 --> 00:00:05.162
So this brings us to the end of part two,

2
00:00:05.162 --> 00:00:13.014
where we have now done a developer
workflow in the dev mode here.

3
00:00:13.014 --> 00:00:17.675
And maybe just to round things off,
now that we've got the thing

4
00:00:17.675 --> 00:00:21.404
that basically works and
we wanna ship it, right?

5
00:00:21.404 --> 00:00:23.633
Go ahead and ship it off to production.

6
00:00:23.633 --> 00:00:30.757
What we can do is Ctrl+C to get
out of our npm run dev server and

7
00:00:30.757 --> 00:00:36.939
instead use that other command,
npm run build.

8
00:00:36.939 --> 00:00:41.656
What happened, it's the top-level await.

9
00:00:41.656 --> 00:00:44.344
Okay, there's some config
there that's happening.

10
00:00:44.344 --> 00:00:48.591
Where am I doing top-level await again?

11
00:00:48.591 --> 00:00:50.943
Okay, does anybody remember
about a workaround for

12
00:00:50.943 --> 00:00:52.768
when you don't have top-level await?

13
00:00:52.768 --> 00:00:54.013
So let me just back up here.

14
00:00:54.013 --> 00:00:54.980
There's a couple things we can do.

15
00:00:54.980 --> 00:01:00.722
One is, the configured target environment.

16
00:01:00.722 --> 00:01:05.624
Which is, this is part of the Vite
build tooling, is essentially,

17
00:01:05.624 --> 00:01:11.300
when it's running, it's not really
trying to match all popular browsers and

18
00:01:11.300 --> 00:01:17.492
environments and things like that and
make all of the compilation decisions of,

19
00:01:17.492 --> 00:01:22.308
that doesn't have that in that browser,
that's not supported.

20
00:01:22.308 --> 00:01:27.475
For example, when we're poking around MDN,
and we see at

21
00:01:27.475 --> 00:01:33.913
the bottom this browser compatibility
table of a lot of these features.

22
00:01:33.913 --> 00:01:35.985
Right now, this is green across the board.

23
00:01:35.985 --> 00:01:43.107
But if we look at something else like XR,
WebXR,

24
00:01:43.107 --> 00:01:48.163
something experimental, yeah.

25
00:01:48.163 --> 00:01:51.644
So once we start getting
into experimental things,

26
00:01:51.644 --> 00:01:55.452
we'll see that not all browsers
support the same stuff.

27
00:01:55.452 --> 00:02:00.468
On MDN, this is also often,
there's little labs,

28
00:02:00.468 --> 00:02:05.604
like experimental beaker,
no, flask, whatever.

29
00:02:05.604 --> 00:02:10.349
[LAUGH] That tells us that this
isn't a widely supported feature, so

30
00:02:10.349 --> 00:02:12.772
it's not green across the board.

31
00:02:12.772 --> 00:02:17.456
So for example like this,
I don't know WebXR stuff, for example,

32
00:02:17.456 --> 00:02:21.167
is pretty new,
it's extended reality, whatever.

33
00:02:22.177 --> 00:02:24.715
Point being,
when Vite is building for us, and

34
00:02:24.715 --> 00:02:29.497
this is a good note about like dev
versus prod, or production, right?

35
00:02:29.497 --> 00:02:31.941
Is it's going to kind of target
all these different environments.

36
00:02:31.941 --> 00:02:36.160
And if it sees that stuff like top
level await isn't actually supported,

37
00:02:36.160 --> 00:02:39.373
even when I have a script type module and
all that stuff.

38
00:02:39.373 --> 00:02:46.062
And maybe it's even compiling away that
modulification, that's gonna be a problem.

39
00:02:47.412 --> 00:02:51.775
So good note about the difference between,
it works on my machine and

40
00:02:51.775 --> 00:02:53.744
it's gonna build for the web.

41
00:02:53.744 --> 00:02:57.998
And again, an important reason why a lot
of these tools, like the building,

42
00:02:57.998 --> 00:03:02.450
the build process here, which I believe
uses Rollup, are going to do some of that

43
00:03:02.450 --> 00:03:06.770
work for us of try to catch some of the
ways that it might break on other people's

44
00:03:06.770 --> 00:03:10.404
machines that don't happen in
our particular dev environment.

45
00:03:10.404 --> 00:03:15.176
So, however, there is a way that we
can get around this top-level await

46
00:03:15.176 --> 00:03:18.192
that we briefly mentioned earlier.

47
00:03:18.192 --> 00:03:21.664
Does anybody remember, yeah?

48
00:03:21.664 --> 00:03:25.074
&gt;&gt; IIFE.
&gt;&gt; IIFE, let's get IIFE with it.

49
00:03:25.074 --> 00:03:26.902
&gt;&gt; Don't ask me what it stands for,
I forgot.

50
00:03:26.902 --> 00:03:33.845
&gt;&gt; So IIFE, Immediately Invoked
Function Expression should work.

51
00:03:33.845 --> 00:03:36.965
What it will do,
the way it works, let's find out.

52
00:03:36.965 --> 00:03:38.613
I mean, I say should, but
[LAUGH] at this point,

53
00:03:38.613 --> 00:03:40.438
I don't know why you believe
anything I'm saying.

54
00:03:40.438 --> 00:03:42.166
[LAUGH] No, just kidding.

55
00:03:42.166 --> 00:03:44.918
The way it works is we declare a function,

56
00:03:44.918 --> 00:03:49.558
an async function in this case,
within, not the top level scope, but

57
00:03:49.558 --> 00:03:54.300
within a new little scope that we get
by evaluating it within parenths.

58
00:03:54.300 --> 00:03:59.786
So this can be async function, I don't
know run, or it doesn't even need a name.

59
00:03:59.786 --> 00:04:04.804
And then we do the stuff we wanna
do in the main part of our script.

60
00:04:04.804 --> 00:04:05.614
Okay, cool,

61
00:04:05.614 --> 00:04:10.786
now if I go back, this is probably, I have
stopped running the dev server, right?

62
00:04:10.786 --> 00:04:13.621
But we're not trying to do the dev server,
we're trying to run the project.

63
00:04:13.621 --> 00:04:15.781
So if I run the build, okay,

64
00:04:15.781 --> 00:04:20.467
the build is satisfied, but
we're not quite were there yet.

65
00:04:20.467 --> 00:04:25.090
Because if we look closely, we declared
a function inside of these parenths and

66
00:04:25.090 --> 00:04:26.132
we evaluated it.

67
00:04:26.132 --> 00:04:30.049
But now, at least the build succeeded.

68
00:04:31.119 --> 00:04:35.694
And again, there is a version of
the local server for the built directory,

69
00:04:35.694 --> 00:04:39.366
which if you are keen-eyed,
you might have noticed.

70
00:04:39.366 --> 00:04:42.994
There is a new little folder in
my project now, it's called dist.

71
00:04:42.994 --> 00:04:45.836
And that's a default of the config.

72
00:04:45.836 --> 00:04:48.679
We haven't quite gotten into all of
the configuration options for Vite, but

73
00:04:48.679 --> 00:04:50.221
you can go read about it on their website.

74
00:04:50.221 --> 00:04:55.915
But so dist is where essentially
the production site,

75
00:04:55.915 --> 00:05:00.258
which is just assets and index and an SVG.

76
00:05:00.258 --> 00:05:07.480
The assets having our little JavaScript
all, goodness, would you remember to wrap?

77
00:05:07.480 --> 00:05:10.630
Okay, this is what it has output.

78
00:05:10.630 --> 00:05:13.890
That is not something we wanna be using
in our day-to-day as a developer, right?

79
00:05:13.890 --> 00:05:15.220
I don't wanna read that.

80
00:05:15.220 --> 00:05:16.150
Do you wanna read that?

81
00:05:16.150 --> 00:05:20.241
No, so this, however,
the JavaScript don't care.

82
00:05:20.241 --> 00:05:23.276
It doesn't really matter to it,
what we name stuff, or

83
00:05:23.276 --> 00:05:26.191
how many whitespaces there are,
that sort of thing.

84
00:05:26.191 --> 00:05:29.562
So anyway,
now I can run a server that loads that,

85
00:05:29.562 --> 00:05:33.351
the stuff in the dist directory,
with npm run preview.

86
00:05:33.351 --> 00:05:36.556
That was our third script in our
package.json, which is essentially,

87
00:05:36.556 --> 00:05:38.301
now it's gonna be on a different port.

88
00:05:38.301 --> 00:05:41.911
It's 4173 for whatever reasons.

89
00:05:41.911 --> 00:05:44.063
Okay, so now it loads.

90
00:05:44.063 --> 00:05:45.493
Let's see, do I have errors?

91
00:05:45.493 --> 00:05:47.279
I hope not.

92
00:05:47.279 --> 00:05:48.923
We do indeed.

93
00:05:48.923 --> 00:05:54.163
Cool, cool, cool, cool,
button is not defined, [LAUGH] great.

94
00:05:54.163 --> 00:05:59.016
I did not move the addEventListener
into it, so there was no button.

95
00:05:59.016 --> 00:06:02.524
Okay, thank you JavaScript console, but

96
00:06:02.524 --> 00:06:08.571
we can see that this is running actually,
not what I have in my dev folder.

97
00:06:08.571 --> 00:06:10.683
So this server is still running, but

98
00:06:10.683 --> 00:06:13.964
this page hasn't updated
because I didn't rebuild it.

99
00:06:13.964 --> 00:06:18.560
So it's not listening for
those changes like the dev server is.

100
00:06:18.560 --> 00:06:25.287
So instead,
what I can do is build again, and

101
00:06:25.287 --> 00:06:32.024
then preview again,
see if we have a button.

102
00:06:32.024 --> 00:06:36.252
I had to refresh cuz, again,
it doesn't have the fancy reloading.

103
00:06:36.252 --> 00:06:38.514
It seems like it knows what
a button is now, excellent.

104
00:06:38.514 --> 00:06:42.654
It doesn't do anything yet,
though, because we have missed

105
00:06:42.654 --> 00:06:47.514
a crucial ingredient of the immediately
invoked function expression,

106
00:06:47.514 --> 00:06:50.235
which is the immediately invoked part.

107
00:06:50.235 --> 00:06:54.494
So what I have is a function expression
that is immediately evaluated between

108
00:06:54.494 --> 00:06:56.796
these parenths, but it is never called.

109
00:06:57.796 --> 00:06:58.756
So how can I do that?

110
00:07:00.549 --> 00:07:03.194
&gt;&gt; Parenths at the end,
right before the semicolon?

111
00:07:03.194 --> 00:07:06.627
&gt;&gt; Parenths at the end, yes, and?

112
00:07:06.627 --> 00:07:08.413
&gt;&gt; It's like there's no parameters.

113
00:07:08.413 --> 00:07:11.634
&gt;&gt; Yeah, because we don't have parameters,
it looks kinda weird.

114
00:07:11.634 --> 00:07:15.694
But again, it's returning a function,
and then we're calling that function.

115
00:07:15.694 --> 00:07:19.072
Let's see if it works, [LAUGH] okay?

116
00:07:19.072 --> 00:07:24.574
So now we've got to make some changes,
so we build, and we preview,

117
00:07:27.046 --> 00:07:30.916
And we reload, and okay,
it's asking me for permission.

118
00:07:30.916 --> 00:07:34.252
That seems like a good sign.

119
00:07:34.252 --> 00:07:39.393
Cross your fingers for me, and
send me all of your shamrocks and

120
00:07:39.393 --> 00:07:44.545
four-leaf clovers and
whatever we use for, hey, all right?

121
00:07:44.545 --> 00:07:48.974
We have the most amazing selfie,
my goodness,

122
00:07:48.974 --> 00:07:52.606
okay, all right, that we have ever seen.

123
00:07:52.606 --> 00:07:56.914
[LAUGH] And
I hope you all are having as much fun

124
00:07:56.914 --> 00:08:00.304
with these selfies as I am up here.

125
00:08:00.304 --> 00:08:06.671
[LAUGH] I feel like I need like some kind
of prop here to involve in my selfie.

126
00:08:06.671 --> 00:08:12.255
But in any case, we're just going
to give ourselves a thumbs up for

127
00:08:12.255 --> 00:08:17.443
having built a production-ready
site that took advantage of

128
00:08:17.443 --> 00:08:23.926
a whole bunch of these fancy features for
the browsers that know about them and

129
00:08:23.926 --> 00:08:29.734
also workarounds for situations
where we can't do the fancy thing.

130
00:08:31.691 --> 00:08:36.007
And it hopefully has been a perhaps
long and winding road, but

131
00:08:36.007 --> 00:08:38.167
a road that ends with a selfie.

