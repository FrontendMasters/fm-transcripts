WEBVTT

1
00:00:00.000 --> 00:00:03.101
Let's complicate things even more.

2
00:00:03.101 --> 00:00:06.282
All right, so how do you write a iterator?

3
00:00:06.282 --> 00:00:10.888
Well, it's just a function that
returns a certain type of object, so

4
00:00:10.888 --> 00:00:12.379
you can already do it.

5
00:00:12.379 --> 00:00:15.626
We all know how to write a function
that returns an object, and

6
00:00:15.626 --> 00:00:19.622
you can write a complicated function
that's like, if this is fun, and

7
00:00:19.622 --> 00:00:24.072
then return, that it's not done, and then
if it is done, then return done, true.

8
00:00:24.072 --> 00:00:29.302
And essentially, that's totally
possible without generators.

9
00:00:29.302 --> 00:00:34.025
But generators are a particular
type of special function,

10
00:00:34.025 --> 00:00:37.997
they have their own keyword,
it's function*.

11
00:00:37.997 --> 00:00:43.252
So when I said before that,
functions run to completion,

12
00:00:43.252 --> 00:00:47.121
asterisk, it literally meant asterisk.

13
00:00:47.121 --> 00:00:49.076
Because generator functions,

14
00:00:49.076 --> 00:00:53.417
which you declare basically the same
way you do a regular function, but

15
00:00:53.417 --> 00:00:57.413
with a little star after the word
function, are really special.

16
00:00:57.413 --> 00:01:01.898
They have their own special keyword yield,

17
00:01:01.898 --> 00:01:07.229
which is similar to return,
except return is like,

18
00:01:07.229 --> 00:01:13.546
and we're done forever, adieu,
goodbye forever, adios.

19
00:01:13.546 --> 00:01:17.326
And yield is a little bit more like, okay,

20
00:01:17.326 --> 00:01:22.681
here's your value output but,
au revior, hasta la vista,

21
00:01:22.681 --> 00:01:28.570
and not goodbye forever,
we'll see you next time, see you soon.

22
00:01:28.570 --> 00:01:33.840
And so, for example, in a function body,
when you have the word return,

23
00:01:33.840 --> 00:01:38.430
and then any other stuff after that,
you've got a whole bunch of

24
00:01:38.430 --> 00:01:43.295
useless code that's never gonna run,
right, unreachable code.

25
00:01:43.295 --> 00:01:49.535
Yield is just like, let's put a pin in it.

26
00:01:49.535 --> 00:01:54.990
And what this does is, instead of the
function on the call stack having to run

27
00:01:54.990 --> 00:02:00.532
through its whole thing, the generator
function can pop off the call stack,

28
00:02:00.532 --> 00:02:05.752
and then at some later point,
resume execution right where it left off.

29
00:02:05.752 --> 00:02:08.177
And there is a whole bunch
more to say about generators,

30
00:02:08.177 --> 00:02:09.896
I think they're super cool.

31
00:02:09.896 --> 00:02:12.338
They're not extremely widely used,

32
00:02:12.338 --> 00:02:15.766
even though I think they
could be in JavaScript.

33
00:02:15.766 --> 00:02:19.770
But one thing that they are super, super,

34
00:02:19.770 --> 00:02:24.332
super useful for,
is implementing iterables,

35
00:02:24.332 --> 00:02:30.135
because a generator qualifies
according to both protocols.

36
00:02:30.135 --> 00:02:34.667
The iterator protocol, it is an iterator,

37
00:02:34.667 --> 00:02:38.830
meaning that you can call .next on it and

38
00:02:38.830 --> 00:02:44.590
get out the next value that
was yielded in the function.

39
00:02:46.062 --> 00:02:49.868
And it's also an iterable,

40
00:02:49.868 --> 00:02:55.738
meaning that you can
iterate over the values

41
00:02:55.738 --> 00:03:00.347
that it spits out, essentially.

42
00:03:00.347 --> 00:03:03.124
You can treat it like as if it
were an array of those values or

43
00:03:03.124 --> 00:03:05.401
any other iterable of those values.

44
00:03:05.401 --> 00:03:10.189
So this is all to say,
generators, function*,

45
00:03:10.189 --> 00:03:15.775
are a great easy way to write
that specific type of iterator

46
00:03:15.775 --> 00:03:22.502
function that you need to be the value
returned by symbol .iterator.

47
00:03:22.502 --> 00:03:27.586
Okay, now, where are we gonna go to
read way more about all of this later,

48
00:03:27.586 --> 00:03:32.014
so that we can really get clear on
all these different symbols and

49
00:03:32.014 --> 00:03:35.474
these different protocols and
so on and so forth?

50
00:03:35.474 --> 00:03:38.648
&gt;&gt; MDN.
&gt;&gt; MDN, of course, and I also, if you're

51
00:03:38.648 --> 00:03:44.182
curious, I have a couple other talks and
things about iterators and generators.

52
00:03:44.182 --> 00:03:48.243
But for now,
let's just look at a very relevant,

53
00:03:48.243 --> 00:03:54.846
very professional example in this
professional JavaScript course.

54
00:03:54.846 --> 00:03:57.748
Okay, I have a generator
that's called dogerator.

55
00:03:59.099 --> 00:04:05.153
And it essentially is gonna
spit out different strings,

56
00:04:05.153 --> 00:04:08.809
randomly selected, not at all for

57
00:04:08.809 --> 00:04:13.238
compliance with a certain meme grammar.

58
00:04:13.238 --> 00:04:19.662
[LAUGH] So
yield is sort similar to return, right?

59
00:04:19.662 --> 00:04:24.148
We notice the differences between
dogerator and a regular function is,

60
00:04:24.148 --> 00:04:28.778
we've got the star on the function and
we've got yield instead of return,

61
00:04:28.778 --> 00:04:32.477
and their stuff after the yield,
and then we have a return.

62
00:04:32.477 --> 00:04:37.031
So generators are functions,
they can return stuff,

63
00:04:37.031 --> 00:04:42.186
although that's not really
what they're super useful for.

64
00:04:42.186 --> 00:04:45.730
Yield works much the same way as return,

65
00:04:45.730 --> 00:04:51.785
except that the generator can later
be picked up and resume running.

66
00:04:52.855 --> 00:04:57.229
So for example,
if I create an object called meme, and

67
00:04:57.229 --> 00:05:01.711
this object literally has
nothing else in it of its own.

68
00:05:01.711 --> 00:05:06.884
[LAUGH] Other than I assign
a value to symbol .iterator,

69
00:05:06.884 --> 00:05:12.167
which is this very special
property that then JavaScript

70
00:05:12.167 --> 00:05:18.129
knows what to do with in the context
of a for of loop, let's say.

71
00:05:18.129 --> 00:05:26.014
And I give the value of that
iterator as the generator function,

72
00:05:26.014 --> 00:05:32.781
which yields, Strings, a few of them.

73
00:05:34.221 --> 00:05:38.312
Now, I can use meme in a for of loop.

74
00:05:38.312 --> 00:05:43.787
So I can say for (;et phrase of meme) and

75
00:05:43.787 --> 00:05:49.271
hopefully get out the extremely useful,

76
00:05:53.320 --> 00:05:55.758
Output that we're gonna see here.

77
00:05:58.923 --> 00:06:03.674
So iterator much generate, wow, undefined.

78
00:06:05.894 --> 00:06:08.184
So what's happening here?

79
00:06:08.184 --> 00:06:13.283
First, we got the so
iterator yielded out, and

80
00:06:13.283 --> 00:06:18.010
that was essentially the value of calling,

81
00:06:23.200 --> 00:06:28.961
dogerator.next, but now,
it's not working because,

82
00:06:28.961 --> 00:06:34.842
all right, in any case,
this is essentially the same thing as,

83
00:06:37.472 --> 00:06:41.546
Asking it one at a time for
the next value.

84
00:06:41.546 --> 00:06:45.881
for of is doing this under the hood for
us.

85
00:06:45.881 --> 00:06:50.351
It is calling these .next methods, it's
looking up the iterator from the symbol.

86
00:06:50.351 --> 00:06:54.205
It's following all of that,
all of those pointers to find

87
00:06:54.205 --> 00:06:58.216
the right function which has
the right type of return value,

88
00:06:58.216 --> 00:07:03.821
which returns the right type of objects
that conform with this iteration protocol.

89
00:07:03.821 --> 00:07:07.112
So there's kind of a lot of magic
happening under the hood, and

90
00:07:07.112 --> 00:07:12.014
it's way more complex than just calling
.map on the underlying object, right?

91
00:07:12.014 --> 00:07:17.129
But the nice part about that is,
once we wrap our heads

92
00:07:17.129 --> 00:07:24.416
around being able to quickly define
iterators as generators, let's say.

93
00:07:24.416 --> 00:07:30.224
And being able to assign
whatever objects we want a symbol

94
00:07:30.224 --> 00:07:35.548
iterator property with
a particular type of value,

95
00:07:35.548 --> 00:07:40.911
we have now custom iterables for
whatever we want.

96
00:07:40.911 --> 00:07:47.450
So you wanna make a meme collection,
no problem, slapping iterator on it.

97
00:07:47.450 --> 00:07:52.592
You want to make a recommended
Frontend Masters

98
00:07:52.592 --> 00:07:59.542
courses collection that you can
put in a for of loop, have at it.

99
00:07:59.542 --> 00:08:04.923
And this is essentially why both
the array of our engines and

100
00:08:04.923 --> 00:08:09.118
the HTML collection were
able to be used in a for

101
00:08:09.118 --> 00:08:13.868
of loop,
is because they implement this protocol.

102
00:08:16.128 --> 00:08:20.617
Now, that is all to say,
are we gonna be implementing custom

103
00:08:20.617 --> 00:08:25.031
iterables every day in our
life as JavaScript developers?

104
00:08:25.031 --> 00:08:27.511
I don't know too many who are.

105
00:08:27.511 --> 00:08:31.258
But it is,
I think very important to understand,

106
00:08:31.258 --> 00:08:36.079
how we can expose a more convenient
interface for, let's say,

107
00:08:36.079 --> 00:08:41.255
some very complex piece of data that
our particular code base needs to

108
00:08:41.255 --> 00:08:46.991
pass around and people need to be able to
get stuff out of it and what have you.

109
00:08:46.991 --> 00:08:51.018
How can we make it easier
to work with that data,

110
00:08:51.018 --> 00:08:56.959
instead of having to remember some
arcane method name that's like for

111
00:08:56.959 --> 00:09:02.011
each but not every single one,
maybe just every third one?

112
00:09:02.011 --> 00:09:05.236
Whatever you wanna do in your fancy,

113
00:09:05.236 --> 00:09:11.167
complex piece of data that other
people wanna be able to go through,

114
00:09:11.167 --> 00:09:15.641
you can implement that for
your users or yourself,

115
00:09:15.641 --> 00:09:20.870
your future self,
[LAUGH] with these iteration protocols.

