WEBVTT

1
00:00:00.050 --> 00:00:04.241
This is not a functional programming
[LAUGH] Course I promise.

2
00:00:04.241 --> 00:00:11.750
But we have started entering the deep
dark forest of functional programming.

3
00:00:11.750 --> 00:00:17.980
So, yeah, as Samuel L Jackson would say
in Jurassic Park, hold on your butt's.

4
00:00:20.327 --> 00:00:26.897
And this sort of brings us to the wider
topic of programming paradigms in

5
00:00:26.897 --> 00:00:33.417
JavaScript, which I think bears mentioning
as we are professional JavaScripters,

6
00:00:33.417 --> 00:00:39.628
because there's a lot of chaos going
on here with different paradigms.

7
00:00:39.628 --> 00:00:40.578
Being mixed.

8
00:00:40.578 --> 00:00:42.218
So what am I talking about?

9
00:00:42.218 --> 00:00:43.278
Programming paradigms.

10
00:00:43.278 --> 00:00:47.508
Well, some examples, there's
a bajillion programming paradigms, but

11
00:00:47.508 --> 00:00:51.828
the most, some of the most common ones,
and I think in the web development world,

12
00:00:51.828 --> 00:00:55.618
the ones that we're most likely to
encounter are functional programming,

13
00:00:55.618 --> 00:00:59.854
or FP, and
object-oriented programming, or Or

14
00:00:59.854 --> 00:01:06.154
if you were prefer, ooh,
know what we'll call it.

15
00:01:06.154 --> 00:01:10.724
Anyways, and they're,
they're kind of instances if we will,

16
00:01:10.724 --> 00:01:14.814
mixing metaphors of what
we could think of as like.

17
00:01:14.814 --> 00:01:17.414
Also as paradigms are often referred
to as programming paradigms,

18
00:01:17.414 --> 00:01:19.986
but I kind of think of
as like meta paradigms.

19
00:01:19.986 --> 00:01:25.066
Paradigms that encompass
a whole way of imagining,

20
00:01:25.066 --> 00:01:29.206
ways of conceiving of programming.

21
00:01:29.206 --> 00:01:32.966
So these paradigms, or meta-paradigms,
essentially have a very different approach

22
00:01:32.966 --> 00:01:36.486
and a different focus on, like what we
care about when we're writing a program.

23
00:01:37.696 --> 00:01:41.909
And in general, so functional
programming Programming is sort of

24
00:01:41.909 --> 00:01:47.049
a implementation, if you will, of
the declarative programming meta paradigm,

25
00:01:47.049 --> 00:01:52.269
which in general is focused
on what you want to get.

26
00:01:52.269 --> 00:01:57.059
What the result is that you would
like to have from the computer.

27
00:01:57.059 --> 00:01:59.509
Computer, please give me this.

28
00:01:59.509 --> 00:02:04.246
As a As opposed to imperative programming,
which is

29
00:02:04.246 --> 00:02:09.356
what OOP is sort of a subset of, usually.

30
00:02:09.356 --> 00:02:12.651
There's a lot more to say about that,
but not in this course.

31
00:02:12.651 --> 00:02:15.136
[LAUGH] The how is more the answer.

32
00:02:15.136 --> 00:02:20.161
So like an imperative command in English,
like do this, do that.

33
00:02:20.161 --> 00:02:24.481
Set, log this to the console,
set that time out,

34
00:02:24.481 --> 00:02:29.901
these kind of commands of first do A,

35
00:02:29.901 --> 00:02:35.701
then do B, then do a thing, and at some
time later,do C, so on and so forth.

36
00:02:35.701 --> 00:02:40.112
This kind of very much order of
how to do things, step by step.

37
00:02:40.112 --> 00:02:43.102
Step is more the focus in that paradigm.

38
00:02:44.392 --> 00:02:52.642
And it's interesting because we see kind
of, in JavaScript, we see both happen.

39
00:02:53.892 --> 00:02:54.922
Yeah.

40
00:02:54.922 --> 00:03:00.466
Well, we can have, for example, we're
pretty used to talking about objects.

41
00:03:00.466 --> 00:03:01.166
In JavaScript.

42
00:03:01.166 --> 00:03:05.086
And we're gonna keep talking about
objects a lot more in JavaScript.

43
00:03:05.086 --> 00:03:10.986
And we're pretty used to writing these
like, do this thing, and then do this

44
00:03:10.986 --> 00:03:15.876
other thing, and then do this third thing,
kind of one at a time, like this, right?

45
00:03:15.876 --> 00:03:18.266
So we could define a variable, config, and

46
00:03:18.266 --> 00:03:20.446
that's essentially saying to JavaScript,
hey.

47
00:03:20.446 --> 00:03:27.106
remember this value when I use
the name config in the future and

48
00:03:27.106 --> 00:03:31.906
maybe it's an object that has some data
what have you then I can maybe I have some

49
00:03:31.906 --> 00:03:36.616
program class or
what have you I can define it in a new

50
00:03:36.616 --> 00:03:42.468
instance with the new keyword passing
in The config that I just referenced.

51
00:03:42.468 --> 00:03:46.188
And now that program is gonna
probably remember that config for

52
00:03:46.188 --> 00:03:47.418
the whole rest of its existence.

53
00:03:47.418 --> 00:03:50.048
So we're mixing already
a little closure in.

54
00:03:50.048 --> 00:03:53.768
But then maybe there's like
a run method on that program.

55
00:03:53.768 --> 00:04:00.790
And I, in the run method, it's,
we're setting it to a, just a very.

56
00:04:00.790 --> 00:04:05.060
Exciting program that just tells you
what paradigm it's programming in.

57
00:04:05.060 --> 00:04:09.100
[LAUGH] And so if we call program.run,
we will get that out.

58
00:04:10.710 --> 00:04:15.720
Now we can accomplish the exact
same thing in a functional way, but

59
00:04:15.720 --> 00:04:18.390
it looks quite different.

60
00:04:18.390 --> 00:04:23.270
So in functional programming
Everything is functions.

61
00:04:23.270 --> 00:04:28.410
And we want to try to avoid
this imperative do this,

62
00:04:28.410 --> 00:04:31.530
and then do that, and then do this
other thing, for a few reasons.

63
00:04:31.530 --> 00:04:35.840
But one of the reasons is how we can just
swap out not with const, but with let.

64
00:04:35.840 --> 00:04:39.798
Let's say we can just swap out
the values of things, and I don't know,

65
00:04:39.798 --> 00:04:43.278
there's all these asynchronous things that
may or may not be running and whatever.

66
00:04:43.278 --> 00:04:47.898
And so in functional programming,
we would tend to not sort of

67
00:04:49.368 --> 00:04:53.538
imperatively list out all the things
we want JavaScript to do.

68
00:04:53.538 --> 00:04:55.738
Remember this value, remember that value,
remember this value.

69
00:04:55.738 --> 00:04:59.337
Instead, we're going to try
to start from the what.

70
00:04:59.337 --> 00:05:00.847
Do we want?

71
00:05:00.847 --> 00:05:04.477
Well, we want a string, which we're
using our little string template friend,

72
00:05:05.737 --> 00:05:10.517
that says,
we're doing stuff in some paradigm.

73
00:05:10.517 --> 00:05:17.847
And that is gonna be, we want that to be
the result of calling this run function

74
00:05:19.447 --> 00:05:24.697
with Some arguments, and
we want that function,

75
00:05:24.697 --> 00:05:28.684
that thing that can run to be

76
00:05:28.684 --> 00:05:33.987
the output of a program

77
00:05:33.987 --> 00:05:39.295
creator that takes in, in this case,
some configuration that has a.

78
00:05:39.295 --> 00:05:40.245
Paradigm in it.

79
00:05:41.565 --> 00:05:45.465
And that's gonna kinda percolate
through these functions and

80
00:05:45.465 --> 00:05:47.885
end up in what we see from the string.

81
00:05:49.095 --> 00:05:52.395
And so what we've got here is we
are instead of saying, hey, JavaScript,

82
00:05:52.395 --> 00:05:57.565
remember this function as this name and
remember this function as that name,

83
00:05:57.565 --> 00:05:59.443
we're naming these functions,
which we don't have.

84
00:05:59.443 --> 00:06:02.593
To in this syntax, but
just for visibility.

85
00:06:02.593 --> 00:06:08.603
And so we're declaring a function saying
this is what this function should do.

86
00:06:08.603 --> 00:06:11.473
It should turn a input

87
00:06:11.473 --> 00:06:16.893
argument of this object with the paradigm
property into a function called run.

88
00:06:16.893 --> 00:06:20.572
And that function called run
should turn some argument Into

89
00:06:20.572 --> 00:06:23.332
this a string that tells
us what's happening and

90
00:06:23.332 --> 00:06:25.232
probably does a bunch of
other stuff in the program.

91
00:06:26.432 --> 00:06:33.112
And that function, that program, or that
program function that we declare we want

92
00:06:33.112 --> 00:06:38.252
to kick it off immediately
with declarative paradigm.

93
00:06:38.252 --> 00:06:40.681
And so you'll notice we have.

94
00:06:40.681 --> 00:06:43.421
A bunch of parens going in here.

95
00:06:43.421 --> 00:06:46.391
We've got parens around this
function expression, and

96
00:06:46.391 --> 00:06:51.351
then parens like we're calling it
with some value which is gonna

97
00:06:51.351 --> 00:06:55.501
be passed to paradigm which I'm
destructuring here in the arguments.

98
00:06:55.501 --> 00:07:00.446
And then a call of the value
returned by that Because

99
00:07:00.446 --> 00:07:05.066
this is gonna evaluate to a function run.

100
00:07:06.126 --> 00:07:11.256
And then we can call that
function to get our stringout.

101
00:07:11.256 --> 00:07:12.186
So this is gonna print out.

102
00:07:12.186 --> 00:07:14.816
Well, it's gonna say declaratively
instead of imperatively.

103
00:07:14.816 --> 00:07:18.746
But essentially, it's gonna do the same
thing as our object-oriented program.

104
00:07:21.152 --> 00:07:24.092
Question, just a quick poll,
a matter of taste.

105
00:07:32.952 --> 00:07:35.564
How many folks prefer this syntax.

106
00:07:35.564 --> 00:07:36.409
Seeing some shaking hands.

107
00:07:36.409 --> 00:07:37.262
How many folks prefer this?

108
00:07:37.262 --> 00:07:39.102
Okay, I'm seeing more hands.

109
00:07:39.102 --> 00:07:46.098
All right, in general, This seems to be
a little bit more common, I would say.

110
00:07:46.098 --> 00:07:51.508
But we can also a mix and
match with we don't have to be being so

111
00:07:51.508 --> 00:07:56.358
deliberate about being super functional
programmers that can't use a variable ever

112
00:07:56.358 --> 00:08:00.878
we could, let's say declare these as
functions and then call it just once and

113
00:08:00.878 --> 00:08:03.018
we would be functional ish programming

