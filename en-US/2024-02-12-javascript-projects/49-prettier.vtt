WEBVTT

1
00:00:00.190 --> 00:00:05.207
So, earlier I said,
okay, and in the options

2
00:00:05.207 --> 00:00:10.610
in our ESLint wizard,
we had the choice of whether

3
00:00:10.610 --> 00:00:16.157
to use it to also enforce
some formatting choices.

4
00:00:16.157 --> 00:00:19.063
Like for example,
semicolons, are they good?

5
00:00:19.063 --> 00:00:19.988
Are they bad?

6
00:00:19.988 --> 00:00:21.266
Do we always want them?

7
00:00:21.266 --> 00:00:22.972
Do we never want them?

8
00:00:22.972 --> 00:00:28.797
These type of stylistic questions.

9
00:00:28.797 --> 00:00:33.929
And we are not gonna use ESLint for that
because there is another tool that's like

10
00:00:33.929 --> 00:00:38.776
really, really popular and very good for
this, which is called Prettier.

11
00:00:38.776 --> 00:00:41.313
It makes your code prettier,
I guess is why they called it that.

12
00:00:42.323 --> 00:00:47.492
So this is for, it's going to enforce
certain style constraints and

13
00:00:47.492 --> 00:00:50.663
those are kinda baked into the package.

14
00:00:50.663 --> 00:00:52.975
So there can be no debate on your team.

15
00:00:52.975 --> 00:00:57.830
There can be nobody changing
a rule away from semicolons and

16
00:00:57.830 --> 00:01:03.668
then back to semicolons and
then away like that, like dueling forces.

17
00:01:03.668 --> 00:01:07.804
So if everybody has the same
exact version of Prettier,

18
00:01:07.804 --> 00:01:11.908
they will have the same
exact formatting rules.

19
00:01:11.908 --> 00:01:16.402
And this is intended to solve
the wasting time debating semicolons

20
00:01:16.402 --> 00:01:19.702
problem cuz ain't nobody got time for
for that.

21
00:01:19.702 --> 00:01:23.677
All right, so the way that we
are going to do this install, and

22
00:01:23.677 --> 00:01:27.425
so remember we saw that ESLint and
VT were both installed as

23
00:01:27.425 --> 00:01:31.726
developer dev dependencies,
right, development dependency.

24
00:01:31.726 --> 00:01:37.077
So, that we can indicate with this
save-dev flag to npm install.

25
00:01:37.077 --> 00:01:43.781
If we don't use save-dev, it's just going
to save it in our regular dependencies,

26
00:01:43.781 --> 00:01:47.892
which will be included in
whatever the client gets.

27
00:01:47.892 --> 00:01:52.768
And so, in this case,
we're also using a flag called save-exact,

28
00:01:52.768 --> 00:01:55.721
and we'll talk about that in one second.

29
00:01:55.721 --> 00:02:02.209
So, okay,
we are gonna go back to our project and

30
00:02:02.209 --> 00:02:07.922
our terminal and we'll run this command.

31
00:02:07.922 --> 00:02:11.272
[SOUND] [LAUGH] Okay, in the command line,

32
00:02:11.272 --> 00:02:17.428
we're gonna run that command that
we just showed, and what did it do?

33
00:02:17.428 --> 00:02:21.959
Because I'm printing the slides
[LAUGH] and they included that.

34
00:02:21.959 --> 00:02:23.249
Okay, sorry.

35
00:02:23.249 --> 00:02:26.397
Don't do that, do this.

36
00:02:26.397 --> 00:02:27.706
Okay [LAUGH].

37
00:02:27.706 --> 00:02:31.647
And it says, all right, I added one
package and audited a whole bunch.

38
00:02:31.647 --> 00:02:36.880
[LAUGH] But I added one package and that
hopefully was the prettier that I asked

39
00:02:36.880 --> 00:02:41.731
it to install, so let's go look at
package.json and see what we got.

40
00:02:41.731 --> 00:02:46.846
And so now indeed I have a dev
dependency called prettier and

41
00:02:46.846 --> 00:02:51.346
this is where we're gonna
now notice the difference

42
00:02:51.346 --> 00:02:55.348
between that save-exact and
leaving it off.

43
00:02:55.348 --> 00:02:59.011
Can anybody take a stab
at what's happening here?

44
00:02:59.011 --> 00:03:03.487
What's the difference between Prettier and
ESLint Invent, Vite?

45
00:03:03.487 --> 00:03:06.167
&gt;&gt; It doesn't have the caret up arrow, so

46
00:03:06.167 --> 00:03:10.893
it's locking it to a specific
version instead of one that's close.

47
00:03:10.893 --> 00:03:11.935
&gt;&gt; Exactly, yeah.

48
00:03:11.935 --> 00:03:14.664
And so this syntax is like, all right,

49
00:03:14.664 --> 00:03:18.404
which versions of this
package are acceptable to me?

50
00:03:18.404 --> 00:03:21.698
And so, for example, if ESLint says,
and and Vite says, hey,

51
00:03:21.698 --> 00:03:23.103
we're using five, okay?

52
00:03:23.103 --> 00:03:27.371
We don't wanna get four involved because
that was a totally different major

53
00:03:27.371 --> 00:03:31.103
release, which means there might
be breaking changes in five or,

54
00:03:31.103 --> 00:03:33.521
there should be breaking changes in five.

55
00:03:33.521 --> 00:03:36.858
And, so anything above five
hopefully it will be okay,

56
00:03:36.858 --> 00:03:39.629
let anything in the fives
should will be okay.

57
00:03:39.629 --> 00:03:42.125
But Prettier is saying, no, no,

58
00:03:42.125 --> 00:03:47.132
I don't just want 3 point whatever,
I want 3.1.0, exactly.

59
00:03:47.132 --> 00:03:51.586
And that's because the style rules might
change between different versions.

60
00:03:51.586 --> 00:03:56.737
So, again, to avoid that debate and
to avoid any confusion because somebody

61
00:03:56.737 --> 00:04:01.510
ran npm install a little earlier than
somebody else, we do save exact.

62
00:04:01.510 --> 00:04:06.756
Okay, so now, how do we get Prettier
to make our code [LAUGH] prettier?

63
00:04:06.756 --> 00:04:12.325
So the way that we could do this
kind of at the command line,

64
00:04:12.325 --> 00:04:15.734
again, we could do npx prettier and

65
00:04:15.734 --> 00:04:20.621
then dot,
which is going to run the Prettier syntax

66
00:04:20.621 --> 00:04:25.418
checker style checker in
the current directory.

67
00:04:25.418 --> 00:04:30.068
And we can also do this right flag to
just have it fix any problems it finds.

68
00:04:30.068 --> 00:04:34.666
Like if I have semi colons but
the package says not to use semi colons,

69
00:04:34.666 --> 00:04:37.378
get rid of the semi colons or vice versa.

70
00:04:37.378 --> 00:04:42.074
So what we can do is we can
run that command With npx,

71
00:04:42.074 --> 00:04:46.881
but we can also just go
straight to the adding a script

72
00:04:46.881 --> 00:04:51.265
to our package.json stage and
run it that way.

73
00:04:54.217 --> 00:05:02.036
So now I should be able to do npm run,
&gt;&gt; Format.

74
00:05:02.036 --> 00:05:04.836
&gt;&gt; Format, yes, and again,
these are arbitrary, right?

75
00:05:04.836 --> 00:05:08.882
I could have called it like,
prettify or make beautiful or

76
00:05:08.882 --> 00:05:12.695
whatever I want to call it,
I'm gonna call it format.

77
00:05:12.695 --> 00:05:15.441
And it's okay, look,
it did a bunch of stuff.

78
00:05:15.441 --> 00:05:19.318
And it's telling me which, so again,
npm is telling me, all right,

79
00:05:19.318 --> 00:05:23.623
this is the command I just ran, that's
what you told me to do in your scripts.

80
00:05:23.623 --> 00:05:25.679
And then I looked at all these files.

81
00:05:25.679 --> 00:05:30.224
And so for example,
I disagree with how ESLint started it's,

82
00:05:30.224 --> 00:05:35.906
[LAUGH] it's default JSON file or
you have some problems in your HTML even.

83
00:05:35.906 --> 00:05:39.823
So Prettier even helps us beyond
JavaScript and there are ways to configure

84
00:05:39.823 --> 00:05:43.799
this if you only want it to be looking
at JavaScript files, for example, but

85
00:05:43.799 --> 00:05:46.054
I'll let you all look at the docs for
that.

86
00:05:46.054 --> 00:05:49.981
And it's telling me which
ones it didn't change and

87
00:05:49.981 --> 00:05:54.455
the ones that are more salient
here are the ones that it did.

