WEBVTT

1
00:00:00.600 --> 00:00:04.813
There's probably one more thing
we want to make sure we do so

2
00:00:04.813 --> 00:00:09.279
that the idea is that when the user
clicks on that close button,

3
00:00:09.279 --> 00:00:15.298
the form gets submitted which the browser
knows means we want to close the dialogue.

4
00:00:15.298 --> 00:00:20.199
So, if we look at our little example here,

5
00:00:20.199 --> 00:00:24.284
not all buttons are created equal,

6
00:00:24.284 --> 00:00:29.730
right, buttons can do different things.

7
00:00:29.730 --> 00:00:34.505
And then the types of buttons,
let the browser know

8
00:00:34.505 --> 00:00:39.403
what it should do when
somebody clicks this button.

9
00:00:39.403 --> 00:00:43.729
So one way we can tell the browser
what behavior we want for

10
00:00:43.729 --> 00:00:46.083
this button is using the type.

11
00:00:48.773 --> 00:00:55.460
Are there other ways we could
tell the browser that we want,

12
00:00:55.460 --> 00:01:03.509
let's say, when someone clicks on
this button to close the dialogue?

13
00:01:03.509 --> 00:01:05.945
We could mess with that, but

14
00:01:05.945 --> 00:01:10.816
keep in mind that right now we
are in the world of the form,

15
00:01:10.816 --> 00:01:15.383
and we're making this form
to hopefully be useful for

16
00:01:15.383 --> 00:01:20.088
other forms that may or
may not be in dialogs.

17
00:01:20.088 --> 00:01:24.968
Forms that might just be part of your
regular webpage and not stop everything

18
00:01:24.968 --> 00:01:30.168
else, that article that you were reading
by blurring out the background, etc.

19
00:01:31.268 --> 00:01:35.393
So, in this case,
we would not be able to know that, like,

20
00:01:35.393 --> 00:01:40.509
since the user's passing in the type
of this form, we wouldn't be able to

21
00:01:40.509 --> 00:01:46.538
know that we're gonna have a dialogue
here and we're gonna call close on it.

22
00:01:46.538 --> 00:01:48.378
So why don't we just use the type submit?

23
00:01:49.428 --> 00:01:54.332
Also because you know what, and
this just, I think, I probably should

24
00:01:54.332 --> 00:01:59.486
have mentioned at the very beginning and
should mention very frequently,

25
00:01:59.486 --> 00:02:04.266
is you can't mess up the JavaScript
if there isn't any JavaScript.

26
00:02:04.266 --> 00:02:09.262
So, [LAUGH] the fewer times that we
enter the realm of JavaScript and

27
00:02:09.262 --> 00:02:14.172
the more that we can use the very
powerful features of HTML, CSS,

28
00:02:14.172 --> 00:02:19.556
all these other things, the less
JavaScript we can have, the better.

29
00:02:19.556 --> 00:02:26.294
In general, that's sort of maybe a
controversial statement, but I don't know.

30
00:02:26.294 --> 00:02:29.321
I think most of the web is
on the same page about,

31
00:02:29.321 --> 00:02:32.444
let's try to use
the underlying capabilities.

32
00:02:32.444 --> 00:02:36.248
So why don't we just make
this a submit button, and

33
00:02:36.248 --> 00:02:41.556
then if the user wants to do something
else with it, they can figure that

34
00:02:41.556 --> 00:02:47.228
out in the user land code of where
they're instantiating this form object.

35
00:02:48.678 --> 00:02:52.972
So, similar to our form element,

36
00:02:52.972 --> 00:02:58.303
getting whatever type the user parsed in,

37
00:02:58.303 --> 00:03:02.614
we can effect the button element.

38
00:03:02.614 --> 00:03:06.323
&gt;&gt; Can we also do that when
we create the button element?

39
00:03:06.323 --> 00:03:09.193
&gt;&gt; We could also do that when
we create the button element.

40
00:03:09.193 --> 00:03:15.173
I'm not sure if we can run arbitrary
code in the class declaration.

41
00:03:15.173 --> 00:03:18.290
&gt;&gt; I meant in the create element call,
can we parse-

42
00:03:18.290 --> 00:03:20.049
&gt;&gt; In the create element call,

43
00:03:20.049 --> 00:03:24.592
that's a good question, I understood
what you were asking is to be like,

44
00:03:24.592 --> 00:03:28.639
is there some other thing that we
can pass in here that goes here?

45
00:03:28.639 --> 00:03:32.199
And that's actually a good question,
which we can ask MDN.

46
00:03:34.479 --> 00:03:37.567
Create element is the name of the thing
that we're trying to figure out,

47
00:03:37.567 --> 00:03:39.324
what is the API of this function?

48
00:03:39.324 --> 00:03:43.457
Okay, so it does have an overloaded
signature that accepts some options,

49
00:03:43.457 --> 00:03:45.639
now let's see what those objects are.

50
00:03:45.639 --> 00:03:51.227
It's [LAUGH] cool, so
I'm not sure gonna accomplish

51
00:03:51.227 --> 00:03:56.561
the goal that we wish it
would accomplish of just,

52
00:03:56.561 --> 00:04:02.797
let's say,
parsing some attributes to this element.

53
00:04:02.797 --> 00:04:07.348
We can use it to define custom elements,
so that's fun, but

54
00:04:07.348 --> 00:04:12.703
I don't think that it's gonna work for
our type attribute based on this

55
00:04:12.703 --> 00:04:18.190
documentation, which, again,
is not an infallible resource.

56
00:04:18.190 --> 00:04:23.498
But what we can do probably is chain
the call to set attribute here

57
00:04:23.498 --> 00:04:28.430
because this is going to evaluate
to a HTML button element.

58
00:04:29.870 --> 00:04:34.360
And then we should be able to
call set attribute type submit.

59
00:04:34.360 --> 00:04:39.473
So this whole thing returns
an HTML button element,

60
00:04:39.473 --> 00:04:45.295
but this whole thing returns undefined,
our best friend.

61
00:04:46.295 --> 00:04:51.461
So, excellent catch that probably
this isn't what we want here because

62
00:04:51.461 --> 00:04:56.763
a reference to undefined is not
something that's very hard to come by.

63
00:04:56.763 --> 00:05:01.689
They're sort of a dime a dozen,
these undefineds, so,

64
00:05:01.689 --> 00:05:06.903
[LAUGH] we can do this in our constructor,
makes more sense.

65
00:05:06.903 --> 00:05:12.634
And we're gonna get to another
tricksy part of this in a moment,

66
00:05:12.634 --> 00:05:18.790
where we can use our closeButton
reference to get that HTML element,

67
00:05:18.790 --> 00:05:24.259
and then make our call to setAttribute,
all right.

68
00:05:24.259 --> 00:05:28.436
&gt;&gt; Do we wanna change its content here,
too?

69
00:05:30.788 --> 00:05:33.709
&gt;&gt; That is a good question, right?

70
00:05:33.709 --> 00:05:37.669
So what is this button
gonna look like right now?

71
00:05:39.486 --> 00:05:42.796
It's gonna be, so
if we were to write it out,

72
00:05:42.796 --> 00:05:47.079
it's gonna be a button,
it's gonna have type, submit.

73
00:05:50.923 --> 00:05:52.529
And that's all, so

74
00:05:52.529 --> 00:05:58.389
we probably want our users to have
a little bit better experience than just

75
00:05:58.389 --> 00:06:03.554
seeing like an empty button in
front of them, how can we fix it?

76
00:06:03.554 --> 00:06:04.784
&gt;&gt; We can set the text content.

77
00:06:04.784 --> 00:06:05.994
&gt;&gt; We can set the text content.

78
00:06:05.994 --> 00:06:10.487
Yeah, so we can do this closeButton,
textContent, and then, I mean,

79
00:06:10.487 --> 00:06:14.538
we could parametrize this,
let the user parse in something, but

80
00:06:14.538 --> 00:06:18.588
basically this is called a close
button because it's gonna be for

81
00:06:18.588 --> 00:06:22.886
closing, so we can just sort of
decide it's gonna be called closed.

