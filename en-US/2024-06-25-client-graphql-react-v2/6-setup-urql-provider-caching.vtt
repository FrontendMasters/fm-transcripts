WEBVTT

1
00:00:00.000 --> 00:00:02.801
&gt;&gt; Scott Moss: Let's go to
the part that we'll be using.

2
00:00:02.801 --> 00:00:04.678
So that's how you would do it.

3
00:00:04.678 --> 00:00:08.296
And plain old fetch, we're not gonna
use fetch, we're gonna use something,

4
00:00:08.296 --> 00:00:09.922
we're gonna use a GraphQL Client.

5
00:00:09.922 --> 00:00:11.278
There's so many of them.

6
00:00:11.278 --> 00:00:13.305
The most popular one is called Apollo.

7
00:00:13.305 --> 00:00:16.095
They have a frontend component,
they have a backend component.

8
00:00:16.095 --> 00:00:19.406
On the server side GraphQL,
I will be using Apollo on the server side.

9
00:00:19.406 --> 00:00:22.742
But for the frontend, I'm actually
not using Apollo on the frontend and

10
00:00:22.742 --> 00:00:24.389
it's not because I don't like it.

11
00:00:24.389 --> 00:00:25.059
I don't think it's good.

12
00:00:25.059 --> 00:00:27.491
I actually think it's probably
the best one you can use.

13
00:00:27.491 --> 00:00:31.714
I just don't think it's the appropriate
tool to introduce people to client-side

14
00:00:31.714 --> 00:00:33.703
GraphQL because, it's so complex and

15
00:00:33.703 --> 00:00:36.917
it makes so many assumptions
about your knowledge of GraphQL.

16
00:00:36.917 --> 00:00:41.257
It gets quite confusing its I kind of
think of it as the Angular of GraphQL,

17
00:00:41.257 --> 00:00:43.358
where it's useful and it's good.

18
00:00:43.358 --> 00:00:47.229
But like, the terms they use and the
things that they do are off putting for

19
00:00:47.229 --> 00:00:49.803
people when they first learn it's just so
much.

20
00:00:49.803 --> 00:00:54.037
Whereas like this one, which is pronounced
Er-kull or Urql but I'm pretty sure it's

21
00:00:54.037 --> 00:00:57.923
pronounced Er-kull, that's too clever for
it not to be pronounced that way.

22
00:00:57.923 --> 00:01:00.339
So I [LAUGH] I think that's what it's.

23
00:01:00.339 --> 00:01:01.769
I'm pretty sure that's how you print.

24
00:01:01.769 --> 00:01:02.772
At least that's what I call it.

25
00:01:02.772 --> 00:01:06.408
I call it Er-kull but
I heard some people say Urql.

26
00:01:06.408 --> 00:01:08.750
This was like a more lightweight client.

27
00:01:08.750 --> 00:01:12.401
It has pretty much the same
features as Apollo,

28
00:01:12.401 --> 00:01:17.259
but their APIs is a lot easier
to digest and it's just simpler.

29
00:01:17.259 --> 00:01:19.471
Their docs are not as intimidating.

30
00:01:19.471 --> 00:01:22.287
Apollo is such a huge
company at this point.

31
00:01:22.287 --> 00:01:26.460
Their documentation is like
looking at Google's documentation.

32
00:01:26.460 --> 00:01:28.564
If you ever had to look at
Google's SDK documentation,

33
00:01:28.564 --> 00:01:30.733
it's just the most terrifying
thing you've ever seen.

34
00:01:30.733 --> 00:01:32.269
Apollo's kind of like that.

35
00:01:32.269 --> 00:01:35.018
So it's not that it's bad,
it's great, I love it, but

36
00:01:35.018 --> 00:01:37.787
not the best thing to use when
you're starting to learn.

37
00:01:37.787 --> 00:01:39.208
So we're gonna use Urql.

38
00:01:39.208 --> 00:01:41.385
What is a GraphQL client?

39
00:01:41.385 --> 00:01:42.828
What the hell is a GraphQL client?

40
00:01:42.828 --> 00:01:46.776
Well, it's basically a wrapper
around the fetch like I showed you,

41
00:01:46.776 --> 00:01:48.418
but it does a bunch of stuff.

42
00:01:48.418 --> 00:01:51.556
It gives us hooks for React so
we can do queries and mutations.

43
00:01:51.556 --> 00:01:58.881
If you ever used something like React
Query or SWR with Next.js, it's like that.

44
00:01:58.881 --> 00:02:01.824
But for GraphQL,
that's the best way I can describe it,

45
00:02:01.824 --> 00:02:06.132
which is kinda confusing because you can
also use GraphQL for those things as well.

46
00:02:06.132 --> 00:02:07.512
I know it's very confusing.

47
00:02:07.512 --> 00:02:11.825
The biggest difference I would say is
something called normalized caching.

48
00:02:11.825 --> 00:02:13.494
We'll talk about that eventually.

49
00:02:13.494 --> 00:02:18.476
But because everything in
GraphQL is essentially a node it

50
00:02:18.476 --> 00:02:22.146
can do normalize caching on the frontend.

51
00:02:22.146 --> 00:02:27.662
Which allows you to do like optimistic
updates and like better cache rewriting,

52
00:02:27.662 --> 00:02:31.230
whereas if you do something
like React Query or SWR,

53
00:02:31.230 --> 00:02:37.087
you don't get normalized caching, you have
to rewrite the cache on a request basis.

54
00:02:37.087 --> 00:02:38.487
Like for this whole request,

55
00:02:38.487 --> 00:02:42.072
rewrite this cache whereas maybe I
don't wanna rewrite the whole request.

56
00:02:42.072 --> 00:02:44.989
I just wanna change just this one
to do in this list of to dos.

57
00:02:44.989 --> 00:02:49.564
So normalized caching is something that
a lot of people speak highly of, but

58
00:02:49.564 --> 00:02:52.650
I would say most people
don't even really need it.

59
00:02:52.650 --> 00:02:55.147
But anyway, we'll be using it,
we get it for free.

60
00:02:55.147 --> 00:03:01.145
So first thing first,
let's set up this Urql client in our app.

61
00:03:01.145 --> 00:03:04.456
So what we need to do is need
to go to our app folder and

62
00:03:04.456 --> 00:03:09.086
make a new file called gqlProvider.tsx and
here is all the code for it.

63
00:03:09.086 --> 00:03:12.936
So if you want you can just throw it in
there I'm gonna go through it all one by

64
00:03:12.936 --> 00:03:16.178
one just to kind of tell you like
what's actually happening and

65
00:03:16.178 --> 00:03:19.929
I'll be referencing this so I keep
my code very similar to what's here.

66
00:03:19.929 --> 00:03:22.166
So let's go do that.

67
00:03:22.166 --> 00:03:25.168
So I'm gonna go back to my code.

68
00:03:25.168 --> 00:03:27.027
I'm gonna go to my app directory.

69
00:03:27.027 --> 00:03:28.353
I'm gonna make a new folder.

70
00:03:28.353 --> 00:03:32.523
I'm gonna call it

71
00:03:32.523 --> 00:03:37.532
gqlProvider.tsx.

72
00:03:37.532 --> 00:03:39.997
And again,
this is I'm on the client zero branch.

73
00:03:39.997 --> 00:03:41.964
So if you're on the main branch,
this is already here.

74
00:03:41.964 --> 00:03:43.252
It's already filled out.

75
00:03:43.252 --> 00:03:44.063
If you're like, why?

76
00:03:44.063 --> 00:03:45.108
How's he making this file?

77
00:03:45.108 --> 00:03:45.624
It's already here.

78
00:03:45.624 --> 00:03:46.578
You're on the wrong branch.

79
00:03:46.578 --> 00:03:48.055
Go to client zero.

80
00:03:48.055 --> 00:03:50.707
It should not be there.

81
00:03:50.707 --> 00:03:53.017
If it is there,
I don't know how it got there, but

82
00:03:53.017 --> 00:03:55.218
everything from the client
should be deleted.

83
00:03:55.218 --> 00:03:59.922
So first thing is we're gonna import
all of our stuff from Urql It

84
00:03:59.922 --> 00:04:04.725
should already be installed when
you did an npm install earlier.

85
00:04:04.725 --> 00:04:07.252
So, what is it?

86
00:04:07.252 --> 00:04:12.743
@urql that's how you know when
an open source project made it,

87
00:04:12.743 --> 00:04:17.727
they get that at namespace,
like they go from just urql and

88
00:04:17.727 --> 00:04:22.507
then like they get some donations and
now it's @urql so

89
00:04:22.507 --> 00:04:26.184
let's see though they got some sponsors.

90
00:04:26.184 --> 00:04:27.328
Cool, so we got these few things.

91
00:04:27.328 --> 00:04:28.757
I'm just gonna copy them.

92
00:04:28.757 --> 00:04:32.780
Gotta put them in here.

93
00:04:32.780 --> 00:04:35.512
Well, we'll talk about these in
a minute when we start using them.

94
00:04:35.512 --> 00:04:40.719
We're also gonna get useMemo from
Reacts which rip is basically dead,

95
00:04:40.719 --> 00:04:46.634
with new React 19, which I'm sure Brian's
gonna teach a course on very soon.

96
00:04:46.634 --> 00:04:51.380
And yeah, just to keep this,
if you never use Next.js app router,

97
00:04:51.380 --> 00:04:56.064
this won't mean anything to you,
but if you have what I'm doing.

98
00:04:56.064 --> 00:04:59.255
You have to put this directive
at the top called use client.

99
00:04:59.255 --> 00:05:02.765
If you don't know if this means, this just
means I just wanna stay in React land.

100
00:05:02.765 --> 00:05:06.547
Don't give me any of
the server side Next.js stuff.

101
00:05:06.547 --> 00:05:09.062
Just keep this vanilla
client side React please.

102
00:05:09.062 --> 00:05:10.647
So that's what we're gonna do for
this whole course.

103
00:05:10.647 --> 00:05:14.347
I don't want to get into
next day a specific thing.

104
00:05:14.347 --> 00:05:18.397
So I'm gonna be doing use client pretty
much in all my components just to make

105
00:05:18.397 --> 00:05:22.215
sure that what we're doing here can
apply to any React app that you use.

106
00:05:22.215 --> 00:05:27.189
But note gone forward, React 19
does support server components and

107
00:05:27.189 --> 00:05:28.378
all this stuff.

108
00:05:28.378 --> 00:05:29.894
It's not specific to Next.js.

109
00:05:29.894 --> 00:05:31.703
Next.js didn't invent server components.

110
00:05:31.703 --> 00:05:35.829
React did, so in the future,
none of this is gonna matter.

111
00:05:35.829 --> 00:05:38.785
You're probably gonna do server
stuff anyway, but just so

112
00:05:38.785 --> 00:05:41.099
we can just get rid of
that barrier of all that.

113
00:05:41.099 --> 00:05:42.642
I'm just gonna put use client everywhere.

114
00:05:42.642 --> 00:05:47.418
And then also, I just don't think
it makes sense to do GraphQL on

115
00:05:47.418 --> 00:05:51.939
a server component in the same
API that your app is hosted on.

116
00:05:51.939 --> 00:05:54.186
Because you can just talk
to the database directly,

117
00:05:54.186 --> 00:05:56.957
you can just skip the network requests and
just pull in your ORM.

118
00:05:56.957 --> 00:05:58.643
So it doesn't really make sense,
in my opinion,

119
00:05:58.643 --> 00:06:00.502
to do GraphQL on the server
if you're using Next.js.

120
00:06:00.502 --> 00:06:04.104
So we're just gonna use use client
that just makes more sense.

121
00:06:04.104 --> 00:06:07.864
So there we go this cache exchange.

122
00:06:07.864 --> 00:06:09.796
This is the normalised caching.

123
00:06:09.796 --> 00:06:12.137
And again, we'll talk more
about that in a little bit.

124
00:06:12.137 --> 00:06:17.338
But this right here, you get to get
is like Redux is basically the Redux.

125
00:06:17.338 --> 00:06:18.906
It's like Redux.

126
00:06:18.906 --> 00:06:23.071
It's like automatic Redux for all your
entities from your GraphQL queries it'll

127
00:06:23.071 --> 00:06:25.060
like figure out where they need to go and

128
00:06:25.060 --> 00:06:28.155
like store them in a Redux the way and
and do updates that way.

129
00:06:28.155 --> 00:06:29.631
That's basically what this is.

130
00:06:29.631 --> 00:06:34.819
I don't know why they may have to come
up with terms like cache exchange and

131
00:06:34.819 --> 00:06:36.500
like, all this stuff.

132
00:06:36.500 --> 00:06:37.786
I don't know.

133
00:06:37.786 --> 00:06:41.274
These other inputs here and these are just
utility functions that I created.

134
00:06:41.274 --> 00:06:45.536
You can go look at them, but
basically this URL function

135
00:06:45.536 --> 00:06:49.534
right here just figures out
the full path of the URL.

136
00:06:49.534 --> 00:06:51.177
If you go to production, it'll be that.

137
00:06:51.177 --> 00:06:55.469
If not, I'm assuming you're on 3,000 and
it's gonna be that.

138
00:06:55.469 --> 00:06:57.427
That's actually where the GraphQL API is.

139
00:06:57.427 --> 00:06:59.757
We'll load it up in a second
you'll see what I'm talking about.

140
00:07:01.868 --> 00:07:03.641
&gt;&gt; Scott Moss: And then this getToken one.

141
00:07:03.641 --> 00:07:06.073
We're using JSON Web Tokens for
authentication, so

142
00:07:06.073 --> 00:07:09.002
this getToken function just gets
the token from local storage.

143
00:07:09.002 --> 00:07:11.338
That's all it does nothing fancy.

144
00:07:11.338 --> 00:07:12.715
I'm not using cookies.

145
00:07:12.715 --> 00:07:17.407
I tried to use cookies, and the way that I
have API set up on server, it just wasn't

146
00:07:17.407 --> 00:07:21.631
working, and I didn't feel like doing
the hack and explaining the hack.

147
00:07:21.631 --> 00:07:24.172
So we're using, we're just gonna
store it in local storage.

148
00:07:24.172 --> 00:07:28.719
But in production, you probably
wanna store your JSON Web Tokens in

149
00:07:28.719 --> 00:07:31.130
a secure HTTP only cookie for sure.

150
00:07:31.130 --> 00:07:34.561
And just have it be sent every single
time, assuming you're on the same domain.

151
00:07:34.561 --> 00:07:36.402
If you're not,
then this point doesn't matter.

152
00:07:36.402 --> 00:07:40.454
Okay, so
the goal here is to make a provider.

153
00:07:40.454 --> 00:07:43.696
And then we're gonna make a client
that we need to memoize and

154
00:07:43.696 --> 00:07:46.251
then we're going to wrap
the children in that.

155
00:07:46.251 --> 00:07:47.356
So let's do that.

156
00:07:47.356 --> 00:07:52.122
So I'm gonna export default GQLProvider

157
00:07:52.122 --> 00:07:56.349
call it whatever you want, really.

158
00:07:56.349 --> 00:07:57.307
Actually, you know what?

159
00:07:57.307 --> 00:08:00.471
I don't know why I have it like that in
notes cuz I actually write my functions

160
00:08:00.471 --> 00:08:00.974
like this.

161
00:08:00.974 --> 00:08:02.248
I just like arrow functions way better.

162
00:08:02.248 --> 00:08:05.833
So I'm just gonna go to
an arrow function here.

163
00:08:05.833 --> 00:08:08.122
And I like to just export
default at the bottom.

164
00:08:10.951 --> 00:08:12.334
&gt;&gt; Scott Moss: There we go,
so we got that.

165
00:08:12.334 --> 00:08:16.308
I know this thing's gonna take its
children because it's a provider,

166
00:08:16.308 --> 00:08:19.765
so there's gonna be children here,
so I'm gonna take that.

167
00:08:19.765 --> 00:08:24.274
And then from here, the strategy is we
just want to keep the same client for

168
00:08:24.274 --> 00:08:25.239
the whole app.

169
00:08:25.239 --> 00:08:27.706
Because if we make a new
client every single time,

170
00:08:27.706 --> 00:08:30.128
then we're gonna a new
redux every single time.

171
00:08:30.128 --> 00:08:30.934
And then what's the point?

172
00:08:30.934 --> 00:08:33.440
So we want the whole app to
experience the same cache.

173
00:08:33.440 --> 00:08:35.585
If you were doing this server side,

174
00:08:35.585 --> 00:08:38.528
you definitely want a new
client every request.

175
00:08:38.528 --> 00:08:41.048
Otherwise all your users would
share the same cache and

176
00:08:41.048 --> 00:08:42.483
that would be a security risk.

177
00:08:42.483 --> 00:08:46.121
So you wanna create the client on
the fly per request on the server side,

178
00:08:46.121 --> 00:08:49.344
which is another reason why I'm
doing use client everywhere.

179
00:08:49.344 --> 00:08:53.187
So I don't have to address that and
talk about it because I think that's too

180
00:08:53.187 --> 00:08:56.864
specific to Next.js and I said that
we will cover the Next.js course.

181
00:08:56.864 --> 00:09:01.043
So for this one, we're gonna use memo and
we're gonna create this client.

182
00:09:01.043 --> 00:09:03.662
So let's do that.

183
00:09:03.662 --> 00:09:09.527
So we're gonna say const clients and
then what do I have here?

184
00:09:09.527 --> 00:09:13.743
Yeah, ssr equals useMemo if you
don't know what useMemo is,

185
00:09:13.743 --> 00:09:18.608
it's basically a hook that memorizes
a function to memorize something

186
00:09:18.608 --> 00:09:23.795
basically just means if I call this
function again with the same arguments,

187
00:09:23.795 --> 00:09:29.413
give me the results that you compute it
the first time and don't compute it again.

188
00:09:29.413 --> 00:09:30.766
This is perfect for the client.

189
00:09:30.766 --> 00:09:33.658
That way, if I try to get the client,
it'll just give me the client that it

190
00:09:33.658 --> 00:09:35.678
created the first time and
won't create it again.

191
00:09:35.678 --> 00:09:37.488
So that's what memorization is.

192
00:09:37.488 --> 00:09:41.065
It's a hook, so we pass it
dependency array of nothing because

193
00:09:41.065 --> 00:09:45.464
we just wanted to run on the initial
render of this component and never again.

194
00:09:45.464 --> 00:09:52.238
So we have that and then, what we wanna do
is we have to create this SSR exchange.

195
00:09:52.238 --> 00:09:57.141
The best way I could describe this well,
I guess I need to describe exchanges for

196
00:09:57.141 --> 00:09:59.564
a little bit and exchanges is a plugin.

197
00:09:59.564 --> 00:10:00.710
Why do they call it exchange?

198
00:10:00.710 --> 00:10:01.473
I don't know.

199
00:10:01.473 --> 00:10:03.302
It's just a plugin.

200
00:10:03.302 --> 00:10:09.396
Apollo calls it a link,
I think Urql calls it an exchange.

201
00:10:09.396 --> 00:10:11.063
It's literally just a plugin.

202
00:10:11.063 --> 00:10:18.317
This SSR plugin just makes sure that this
doesn't break on server, essentially.

203
00:10:18.317 --> 00:10:21.602
And you might be thinking like,
why is this gonna run on a server?

204
00:10:21.602 --> 00:10:23.095
I thought you put use client.

205
00:10:23.095 --> 00:10:25.484
Next.js it's a little tricky.

206
00:10:25.484 --> 00:10:30.444
There's a difference between server
components and server side rendering.

207
00:10:30.444 --> 00:10:34.658
Those are two different things by
doing use client, I opt out of server

208
00:10:34.658 --> 00:10:38.815
components, but this component
still does server side rendering.

209
00:10:38.815 --> 00:10:42.260
Still gets rendered on the server,
its business logic won't execute in

210
00:10:42.260 --> 00:10:44.869
the context of a server like
a server component would.

211
00:10:44.869 --> 00:10:48.386
So it's not streamable it doesn't
have a suspense built into it.

212
00:10:48.386 --> 00:10:52.473
So it's not a server component, but
it will be rendered on the server.

213
00:10:52.473 --> 00:10:56.363
So if I just throw the word window
in here it will 100% break.

214
00:10:56.363 --> 00:10:58.481
So I have to do type of window
how to do things like that.

215
00:10:58.481 --> 00:11:01.310
And this plugin,
this ensures that the cache

216
00:11:01.310 --> 00:11:04.440
gets transferred over from
server side rendering

217
00:11:04.440 --> 00:11:09.144
to client side rendering on hydration
cuz that's actually what happens.

218
00:11:09.144 --> 00:11:12.044
If you don't know hydration is
it's basically just an object that

219
00:11:12.044 --> 00:11:14.631
gets created on the server with
all the data that you made and

220
00:11:14.631 --> 00:11:17.504
then it gets passed to the frontend so
the frontend can pick it up.

221
00:11:17.504 --> 00:11:20.479
It's just like an exchange of
data over the network layer.

222
00:11:20.479 --> 00:11:22.996
This just makes sure
that that runs smoothly.

223
00:11:22.996 --> 00:11:27.688
Yeah, that's what this is so we got that.

224
00:11:27.688 --> 00:11:31.194
And then we can actually
create our clients.

225
00:11:31.194 --> 00:11:33.097
This one interesting so
let's walk through this one.

226
00:11:33.097 --> 00:11:38.569
So let's say,
&gt;&gt; Scott Moss: Client equal and

227
00:11:38.569 --> 00:11:42.683
then we have the createClients
function here.

228
00:11:42.683 --> 00:11:44.672
This is gonna take an options object.

229
00:11:44.672 --> 00:11:45.818
There's a few things.

230
00:11:45.818 --> 00:11:47.549
We have the URL.

231
00:11:47.549 --> 00:11:50.636
So this is our input to our GraphQL API,
which for

232
00:11:50.636 --> 00:11:53.433
us is gonna be 3,000/API/GraphQL.

233
00:11:53.433 --> 00:11:54.527
It's already there.

234
00:11:54.527 --> 00:11:58.962
And then we have our plugins,
fancy exchanges here.

235
00:11:58.962 --> 00:12:01.281
And then we have options
we wanna do on fetch.

236
00:12:01.281 --> 00:12:03.426
So let's do that.

237
00:12:03.426 --> 00:12:05.764
So we have our URL.

238
00:12:05.764 --> 00:12:08.504
It's already in my scope,
so I can just do that.

239
00:12:08.504 --> 00:12:12.235
And then we have our exchanges,
aka plugins.

240
00:12:12.235 --> 00:12:16.340
We're gonna do the cache exchange,
which is a function.

241
00:12:16.340 --> 00:12:19.866
I'm just gonna put an empty object
in there for now, like that.

242
00:12:19.866 --> 00:12:24.476
We're gonna pass in the SSR like that.

243
00:12:24.476 --> 00:12:26.518
But then we need to pass
in the fetchExchange.

244
00:12:26.518 --> 00:12:28.540
fetchExchange is exactly
what it sounds like.

245
00:12:28.540 --> 00:12:34.045
It's telling Uqrl to use
fetch to make the API calls.

246
00:12:34.045 --> 00:12:36.996
You can have, like for instance,
if you didn't wanna use fetch,

247
00:12:36.996 --> 00:12:40.160
you wanna use Axios or some other
custom HTTP library that you created,

248
00:12:40.160 --> 00:12:43.716
you would make an exchange and use that
instead, but anybody got time for that.

249
00:12:43.716 --> 00:12:44.959
So we're gonna use fetch.

250
00:12:47.956 --> 00:12:52.922
&gt;&gt; Scott Moss: Okay, and then lastly,
it's gonna be fetchOptions.

251
00:12:52.922 --> 00:12:55.517
fetchOptions, this is
gonna be a function and

252
00:12:55.517 --> 00:12:59.120
it returns an object of like options
you wanna pass to the fetch.

253
00:12:59.120 --> 00:13:01.541
Literally anything you
can pass to window.fetch,

254
00:13:01.541 --> 00:13:02.976
you can pretty much pass here.

255
00:13:02.976 --> 00:13:05.388
So what we wanna do, the strategy is like,

256
00:13:05.388 --> 00:13:08.611
we wanna send our JSON Web Token
on every single request.

257
00:13:08.611 --> 00:13:11.392
That way it's always there.

258
00:13:11.392 --> 00:13:12.917
You would do this with fetch anyway.

259
00:13:12.917 --> 00:13:16.451
So what we wanna do is like go look
in local stores, get the token.

260
00:13:16.451 --> 00:13:19.976
If it's there add it to the authorization
headers a getToken, if not,

261
00:13:19.976 --> 00:13:21.460
just return an empty object.

262
00:13:21.460 --> 00:13:25.641
So that's what we're gonna do here,
just to make sure we can pass our token.

263
00:13:25.641 --> 00:13:27.252
If you use cookies,
you won't have to do this.

264
00:13:31.614 --> 00:13:37.657
&gt;&gt; Scott Moss: So I'm gonna say getToken,
and then I'm gonna return.

265
00:13:37.657 --> 00:13:42.827
If there is a token, then I'm gonna return

266
00:13:42.827 --> 00:13:48.729
an object with headers
that has authorization.

267
00:13:48.729 --> 00:13:53.726
And it's gonna be bearer and
then the token and

268
00:13:53.726 --> 00:13:59.634
then if there is no token was
gonna put it in the object,

269
00:14:05.003 --> 00:14:07.319
&gt;&gt; Scott Moss: Pretty straight forward,

270
00:14:07.319 --> 00:14:09.237
nothing crazy there.

271
00:14:09.237 --> 00:14:11.822
And then we just need to return
a tuple here with our client and

272
00:14:11.822 --> 00:14:13.862
our SSR since we're
trying to destructure it.

273
00:14:13.862 --> 00:14:20.687
So I'm just gonna do that,
return our client and ssr.

274
00:14:23.875 --> 00:14:25.115
&gt;&gt; Scott Moss: Okay.

275
00:14:26.754 --> 00:14:29.747
&gt;&gt; Scott Moss: So now that we have
our client, we can go ahead and

276
00:14:29.747 --> 00:14:31.725
start creating this provider.

277
00:14:31.725 --> 00:14:36.481
It's pretty simple,
we're just gonna return the UrqlProvider.

278
00:14:36.481 --> 00:14:37.880
I really like that name Urql.

279
00:14:37.880 --> 00:14:39.021
I'm like where can I use that?

280
00:14:39.021 --> 00:14:42.276
Get a cat, another cat or
a dog named Urql.

281
00:14:42.276 --> 00:14:44.979
That would be cool, UrqlProvider.

282
00:14:44.979 --> 00:14:48.575
We just need to pass it the client, pass
it the SSR plugin, and then obviously,

283
00:14:48.575 --> 00:14:49.500
wrap the children.

284
00:14:49.500 --> 00:14:51.328
So let's just do that really quick.

285
00:14:51.328 --> 00:14:56.725
So I'm gonna return that,
get our UrqlProvider,

286
00:14:56.725 --> 00:15:00.749
and then clients is gonna be clients.

287
00:15:00.749 --> 00:15:06.409
And then SSR is gonna be SSR and
then wrap our children.

288
00:15:06.409 --> 00:15:08.464
Otherwise, nothing's gonna
show up on the page.

289
00:15:14.865 --> 00:15:19.880
&gt;&gt; Scott Moss: And just like that, three
easy steps, we have our UrqlProvider.

290
00:15:22.116 --> 00:15:24.500
&gt;&gt; Scott Moss: So
why do we need a provider?

291
00:15:24.500 --> 00:15:26.404
You don't need a provider
to do window.fetch.

292
00:15:26.404 --> 00:15:27.488
So why do we need this?

293
00:15:27.488 --> 00:15:30.451
Well, it's just for caching.

294
00:15:30.451 --> 00:15:33.317
It's just for caching and for
this logic that's literally it.

295
00:15:33.317 --> 00:15:38.682
It's like, if you might not know this, but

296
00:15:38.682 --> 00:15:44.196
there's a hook in React called useReducer.

297
00:15:44.196 --> 00:15:45.664
It's like, why would you use this?

298
00:15:45.664 --> 00:15:48.914
UseReducer, it's like a local Redux for
a component, but

299
00:15:48.914 --> 00:15:51.579
if you wanted this to work
across your whole app,

300
00:15:51.579 --> 00:15:55.676
you would put this in a context so
your whole app can share the same reducer.

301
00:15:55.676 --> 00:15:57.042
Otherwise, how would they know?

302
00:15:57.042 --> 00:15:58.089
How would they share?

303
00:15:58.089 --> 00:16:03.336
So in order for us to share the cache,
we have to create a provider,

304
00:16:03.336 --> 00:16:08.521
because react uses context,
which is just like internal state.

305
00:16:08.521 --> 00:16:13.162
Context is basically like props that don't
need to be passed down, any component can

306
00:16:13.162 --> 00:16:16.843
access the context, no matter what
their parent is directly to it.

307
00:16:16.843 --> 00:16:18.811
So if all the state is in the context,

308
00:16:18.811 --> 00:16:22.378
then any component in your app
should be able to access this cache.

309
00:16:22.378 --> 00:16:26.313
Which means you should be able to use
Urql queries anywhere in your app and

310
00:16:26.313 --> 00:16:29.038
access the same cache,
which is the whole point.

311
00:16:29.038 --> 00:16:30.919
So that's why we need a provider.

312
00:16:30.919 --> 00:16:32.251
Will it work without one?

313
00:16:32.251 --> 00:16:35.497
Absolutely they'll just all
have no cache to share.

314
00:16:35.497 --> 00:16:39.833
So next thing we need to do is go to our
providers.tsx and we need to include it,

315
00:16:39.833 --> 00:16:43.007
I'm sorry, we need to go to
our layout.tsx on the root.

316
00:16:43.007 --> 00:16:44.388
There's a lot of layouts.

317
00:16:44.388 --> 00:16:48.777
Make sure you go to the one on
the on the root of app should be

318
00:16:48.777 --> 00:16:52.259
/app layout.tsx not the one in I'm sorry.

319
00:16:52.259 --> 00:16:54.503
This one, not the one in auth,
almost messed up.

320
00:16:54.503 --> 00:16:59.070
Not the one in auth,
not the one in dashboard, but this one.

321
00:16:59.070 --> 00:17:01.037
One on the route.

322
00:17:01.037 --> 00:17:02.771
It's a lot of layouts.

323
00:17:02.771 --> 00:17:05.195
It's the Next.js thing.

324
00:17:05.195 --> 00:17:07.996
It's layout everybody gets a layout now.

325
00:17:07.996 --> 00:17:12.022
So what we're gonna do is this provider's
run here is for our component library.

326
00:17:12.022 --> 00:17:20.075
I'm going to pass in our UrqlProvider
inside of this one or what Did I call it?

327
00:17:20.075 --> 00:17:22.332
Is my core UrqlProvider?

328
00:17:22.332 --> 00:17:23.947
GQLProvider, okay.

329
00:17:23.947 --> 00:17:30.887
I'm gonna pass mine inside the providers,
the component library.

330
00:17:30.887 --> 00:17:35.291
And the reason I'm doing that is
just because I don't know what this

331
00:17:35.291 --> 00:17:38.237
component library does, what its context.

332
00:17:38.237 --> 00:17:42.629
And I don't wanna wrap it inside of
my context and mess it up somehow,

333
00:17:42.629 --> 00:17:47.175
like I don't know, maybe this
component library does GraphQL stuff,

334
00:17:47.175 --> 00:17:49.239
maybe it uses Urql internally.

335
00:17:49.239 --> 00:17:54.859
And if I wrap it inside of my context, my
UrqlProvider it could conflict with that.

336
00:17:54.859 --> 00:17:58.563
So I'm gonna put mine inside of
the component library one I know for

337
00:17:58.563 --> 00:18:01.617
sure it doesn't, but
that's just me being careful.

338
00:18:01.617 --> 00:18:03.632
I've had things like that to pass and

339
00:18:03.632 --> 00:18:07.216
those are the hardest bots to
track down because it won't break.

340
00:18:07.216 --> 00:18:10.014
It just won't behave the way you thought
it would and you'd like what's going on?

341
00:18:10.014 --> 00:18:15.090
And it's like, the providers are weird
because this thing uses something similar.

342
00:18:15.090 --> 00:18:21.199
So, always just try to get as close to the
children as possible with my providers and

343
00:18:21.199 --> 00:18:25.303
keep third-party providers
outside of my providers,

344
00:18:25.303 --> 00:18:28.206
it's like a priority provider thing.

345
00:18:28.206 --> 00:18:30.284
Nobody really talks about that,
but it's real.

