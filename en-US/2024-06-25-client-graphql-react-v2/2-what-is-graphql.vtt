WEBVTT

1
00:00:00.011 --> 00:00:05.278
&gt;&gt; Scott Moss: First thing is,
what is GraphQL?

2
00:00:05.278 --> 00:00:07.032
And why is it here?

3
00:00:07.032 --> 00:00:10.164
So here's the definition of GraphQL, and

4
00:00:10.164 --> 00:00:14.516
I'll basically tell you what I
think it is and how it works.

5
00:00:14.516 --> 00:00:18.874
Graphkill is a powerful query language for
APIs and a runtime for

6
00:00:18.874 --> 00:00:22.758
executing those queries with
your data's type system.

7
00:00:22.758 --> 00:00:27.050
Unlike REST, which uses predefined
endpoints to access data,

8
00:00:27.050 --> 00:00:32.140
GraphQL allows clients to request
exactly what they need and nothing more.

9
00:00:32.140 --> 00:00:36.660
ChatGPT helped me write that, by the way,
cuz it sounds nothing like me.

10
00:00:36.660 --> 00:00:42.160
[LAUGH] What I think GraphQL is
in the way I would describe it,

11
00:00:42.160 --> 00:00:46.562
it's basically like TypeScript for
your API.

12
00:00:46.562 --> 00:00:49.171
That's basically it.

13
00:00:49.171 --> 00:00:52.637
Who here has used TRPC or heard of it?

14
00:00:52.637 --> 00:00:57.213
Okay, TRPC is another way
you can get typed queries.

15
00:00:57.213 --> 00:00:59.824
It's another way you can get
typed data for your APIs.

16
00:00:59.824 --> 00:01:03.122
GraphQL what it is,
it's basically a few things.

17
00:01:03.122 --> 00:01:07.240
There's a query language,
which looks very similar to JSON and

18
00:01:07.240 --> 00:01:10.609
which you can use to describe
the shape of your data.

19
00:01:10.609 --> 00:01:15.676
And then there's a backend component
that takes that query language,

20
00:01:15.676 --> 00:01:20.069
does exact type matching with it
to make sure it fits the type so

21
00:01:20.069 --> 00:01:25.907
it does the craziest input validation you
can think of on down to a property level.

22
00:01:25.907 --> 00:01:27.621
And then if that works,

23
00:01:27.621 --> 00:01:33.458
it then tries to resolve each one of those
fields on your query that you asked for.

24
00:01:33.458 --> 00:01:38.934
So that way, you can query highly
relational data in any format that you

25
00:01:38.934 --> 00:01:45.139
want, whereas if you didn't have GraphQL,
you could only query the relational

26
00:01:45.139 --> 00:01:50.636
data in whatever way that the person
who built it back in allowed you to.

27
00:01:50.636 --> 00:01:54.057
Because they would have to write those
queries, those database queries ahead of

28
00:01:54.057 --> 00:01:57.275
time, and it create the routes ahead of
time and then give you the options for

29
00:01:57.275 --> 00:02:00.516
the query string ahead of time and like
here are the rules you have to follow.

30
00:02:00.516 --> 00:02:03.427
With GraphQL it's infinite.

31
00:02:03.427 --> 00:02:04.727
You can do whatever you want.

32
00:02:04.727 --> 00:02:09.791
So it's a different mental model when
thinking about it, especially on the back

33
00:02:09.791 --> 00:02:14.778
end, but basically it's just a way for
you to describe the data that you want and

34
00:02:14.778 --> 00:02:19.496
get it back exactly the way that you
asked for it and guarantee type safety.

35
00:02:19.496 --> 00:02:20.949
That's it So, that's GraphQL.

36
00:02:20.949 --> 00:02:22.869
So it's pretty cool.

37
00:02:22.869 --> 00:02:26.319
Created by Facebook a long time ago,
and then they open sourced it.

38
00:02:26.319 --> 00:02:29.680
And so far it's been well used.

39
00:02:29.680 --> 00:02:32.632
You have big companies
like Netflix using it.

40
00:02:32.632 --> 00:02:37.603
There are like startups who have billion
dollar products that are tools just for

41
00:02:37.603 --> 00:02:38.279
GraphQL.

42
00:02:38.279 --> 00:02:42.764
It's a huge ecosystem of people
building products, companies using it,

43
00:02:42.764 --> 00:02:44.055
tons of open source.

44
00:02:44.055 --> 00:02:51.483
There's so many plugins and applications
and tooling built around GraphQL.

45
00:02:51.483 --> 00:02:56.113
And one use case that I've learned with
GraphQL that's quite useful in the client

46
00:02:56.113 --> 00:02:59.885
is for mobile, like mobile and
GraphQL actually works very well.

47
00:02:59.885 --> 00:03:03.724
Because for mobile you're very data
constrained, you're network constrained.

48
00:03:03.724 --> 00:03:07.755
You really only wanna get the information
that you need to put it on the screens.

49
00:03:07.755 --> 00:03:11.777
Anything more is can be quite expensive
as far as like network requests.

50
00:03:11.777 --> 00:03:14.285
So GraphQL is great for that.

51
00:03:14.285 --> 00:03:18.077
And there's many other but
that's actually a really great one.

52
00:03:18.077 --> 00:03:21.109
I kind of already talked about some
of the main advantages of rest and

53
00:03:21.109 --> 00:03:21.969
things like that.

54
00:03:21.969 --> 00:03:26.725
But really, the big advantage is
you basically get type checking for

55
00:03:26.725 --> 00:03:30.254
free, you don't have to
do the input validation.

56
00:03:30.254 --> 00:03:35.908
And on the Frontend, at least you
get to describe what you want.

57
00:03:35.908 --> 00:03:39.846
Whereas like with REST, you would have to
have a conversation with the back end team

58
00:03:39.846 --> 00:03:43.443
like, okay, this is what I need on
the frontend, can you make me a route that

59
00:03:43.443 --> 00:03:46.274
returns it exactly like this so
I can use it on the frontend?

60
00:03:46.274 --> 00:03:48.030
You don't have to have
that conversation anymore.

61
00:03:48.030 --> 00:03:50.352
You just write the code for
it and it just works.

62
00:03:50.352 --> 00:03:54.640
So you describe that shape within
the constraints of the schema that you

63
00:03:54.640 --> 00:03:55.292
created.

64
00:03:55.292 --> 00:03:58.550
Some of the bigger differences are,

65
00:03:58.550 --> 00:04:04.443
REST is like a combination of a URL and
a verb, basically, right?

66
00:04:04.443 --> 00:04:08.878
So if I have resources, like a user,
a post, an article, whatever,

67
00:04:08.878 --> 00:04:12.259
for every one of those resources,
I have a URL path for

68
00:04:12.259 --> 00:04:16.619
it, and then I have a verb that
describes some crud action, a post for

69
00:04:16.619 --> 00:04:21.468
creating, Git for getting a patch, or
a put for updating things like that.

70
00:04:21.468 --> 00:04:25.472
So for every one resource,
you might have, I don't know, five,

71
00:04:25.472 --> 00:04:28.706
six different routes just for
one resource and REST.

72
00:04:28.706 --> 00:04:32.235
And then if you have many resources, those
are a lot of routes you gotta manage.

73
00:04:32.235 --> 00:04:37.164
With GraphQL, it's just one URL the entire
time, no matter what you wanna get,

74
00:04:37.164 --> 00:04:38.699
it's usually GraphQL.

75
00:04:38.699 --> 00:04:42.456
And it's mostly always
gonna be a post request.

76
00:04:42.456 --> 00:04:44.715
Pretty much guaranteed always
gonna be a poster Chris.

77
00:04:44.715 --> 00:04:48.034
So that right there just
makes it simpler in its own.

78
00:04:48.034 --> 00:04:51.150
You're only managing one URL or
one route and

79
00:04:51.150 --> 00:04:54.107
you don't have to think about HTTP verbs.

80
00:04:54.107 --> 00:04:57.182
You don't have to think
about any of those verbs or

81
00:04:57.182 --> 00:05:00.418
those methods because it's
always gonna be a post.

82
00:05:00.418 --> 00:05:02.020
So that already makes it simple.

83
00:05:02.020 --> 00:05:07.036
And then I would say, yeah,
I could talk about the differences

84
00:05:07.036 --> 00:05:12.445
a lot in practicality, but
high level, that's it, yeah, Mark.

85
00:05:12.445 --> 00:05:16.746
&gt;&gt; Mark: What do you get with type
safety when it comes to GraphQL?

86
00:05:16.746 --> 00:05:21.419
&gt;&gt; Scott Moss: Yeah, so type safety is
just a fancy word of saying when a client

87
00:05:21.419 --> 00:05:24.857
is sending some type of
query to the back ends,

88
00:05:24.857 --> 00:05:27.955
let's say it's trying to create a user.

89
00:05:27.955 --> 00:05:32.725
And to create a user, you have to
supply an email and a password.

90
00:05:32.725 --> 00:05:36.105
Well, if you wrote a really good back enf,
what you would do,

91
00:05:36.105 --> 00:05:40.720
you would first before you operate on your
database, you would check the inputs that

92
00:05:40.720 --> 00:05:44.165
came from that client to make sure
that there is an email there,

93
00:05:44.165 --> 00:05:46.700
you would make sure there
is a password there.

94
00:05:46.700 --> 00:05:49.957
If you had other validations that you put
on the front end as far as like the length

95
00:05:49.957 --> 00:05:52.400
of the password,
you would also check that on the back end.

96
00:05:52.400 --> 00:05:57.370
So it's like you're validating the input
before you operate on the database, but

97
00:05:57.370 --> 00:06:02.340
you'd have to write that code yourself
if you were doing something non-GraphQl.

98
00:06:02.340 --> 00:06:05.536
Whereas with GraphQL,
that's done for you for free.

99
00:06:05.536 --> 00:06:11.707
That type of validation is executed by
the GraphQL server without you having to

100
00:06:11.707 --> 00:06:18.077
write the code for it before any of your
logic runs to actually satisfy the query.

101
00:06:18.077 --> 00:06:22.710
So it basically just means it'll
break if the query that you send up

102
00:06:22.710 --> 00:06:27.194
doesn't satisfy the type
constraints of your GraphQL server.

103
00:06:27.194 --> 00:06:32.032
Just the same way as if you would throw
an error if someone sent up a payload that

104
00:06:32.032 --> 00:06:36.961
wasn't the exact shape or type that you
need in order to resolve that request.

105
00:06:36.961 --> 00:06:39.023
It's just done for you for free.

106
00:06:39.023 --> 00:06:43.210
So that's what I mean by type safety and
then to expand on that,

107
00:06:43.210 --> 00:06:47.950
you can generate type scripts from
your graph QL and have type safety all

108
00:06:47.950 --> 00:06:52.389
the way down to your frontend code,
and then it gets even crazier.

109
00:06:52.389 --> 00:06:53.907
So that's what that means.

110
00:06:53.907 --> 00:06:57.965
&gt;&gt; Speaker 3: When you say generate
type script, I mean, you mean like for

111
00:06:57.965 --> 00:07:00.526
Frontend or explain that expansion?

112
00:07:00.526 --> 00:07:01.083
&gt;&gt; Scott Moss: Yeah, for sure.

113
00:07:01.083 --> 00:07:05.841
So there are tools in GraphQL that
will look at a GraphQL schema and

114
00:07:05.841 --> 00:07:10.772
then output a TypeScript file that
has TypeScript types that you can

115
00:07:10.772 --> 00:07:14.681
then import into any other
TypeScript file you want.

116
00:07:14.681 --> 00:07:17.067
So in this case,
maybe it's a React component,

117
00:07:17.067 --> 00:07:21.201
it's a file in which you're doing a query
and then now, instead of just getting back

118
00:07:21.201 --> 00:07:24.021
a generic data property that
is the result of your query.

119
00:07:24.021 --> 00:07:28.094
You can map that to an actual type
that matches a server, right?

120
00:07:28.094 --> 00:07:30.557
So like, you have
&gt;&gt; Speaker 3: Like object mapping.

121
00:07:30.557 --> 00:07:31.451
&gt;&gt; Scott Moss: Yep, object mapping.

122
00:07:31.451 --> 00:07:32.185
Exactly, yeah.

123
00:07:32.185 --> 00:07:34.822
Because it's very common.

124
00:07:34.822 --> 00:07:38.540
TypeScript is great, but where it starts
to fall apart is when you have to do

125
00:07:38.540 --> 00:07:42.553
network requests, because how would
TypeScript know that this API returns this

126
00:07:42.553 --> 00:07:44.459
type of data, it just doesn't know.

127
00:07:44.459 --> 00:07:47.318
So with GraphQL and
then doing code generation,

128
00:07:47.318 --> 00:07:51.513
you can bring that all the way down to,
literally the component level.

129
00:07:51.513 --> 00:07:57.208
So if you integrate with that tooling,
yeah, you will have full type safety.

130
00:07:57.208 --> 00:07:59.235
So, and there's different ways to do that.

131
00:07:59.235 --> 00:08:01.612
TRPC solves this differently than GraphQL.

132
00:08:01.612 --> 00:08:05.897
GraphQL you have your cogeneration,
TRPC you don't because it's Typescript and

133
00:08:05.897 --> 00:08:08.602
it uses TypeScript in the same
repo to get it to work.

134
00:08:08.602 --> 00:08:11.406
So there's different ways but
yeah, there's cogent.

135
00:08:11.406 --> 00:08:15.125
We won't be doing code in this
course because I felt like it's

136
00:08:15.125 --> 00:08:16.776
too TypeScript specific.

137
00:08:16.776 --> 00:08:18.641
And you have to know TypeScript
to really understand it.

138
00:08:18.641 --> 00:08:21.582
So I didn't do it, but
it's actually quite easy to do.

139
00:08:21.582 --> 00:08:22.825
Let's talk about the query language.

140
00:08:22.825 --> 00:08:25.349
So GraphQL language, GraphQL.

141
00:08:25.349 --> 00:08:29.250
So let's talk about the foundations of it
and then we'll kind of take a look at it.

142
00:08:29.250 --> 00:08:30.561
So one of the few things or

143
00:08:30.561 --> 00:08:34.627
one of the basic things about the Query
language is something called a field.

144
00:08:34.627 --> 00:08:37.347
And again, I said,
if you've written JSON before or

145
00:08:37.347 --> 00:08:39.342
you've written Javascript objects,

146
00:08:39.342 --> 00:08:43.406
you'll probably feel pretty familiar
with GraphQL, is very similar to that.

147
00:08:43.406 --> 00:08:45.683
So a field is exactly what it sounds like.

148
00:08:45.683 --> 00:08:47.141
It's like a field on an object.

149
00:08:47.141 --> 00:08:51.255
So you can specify which fields
from what objects you need, and

150
00:08:51.255 --> 00:08:56.222
you'll only get back that field if it's
there, depending on the schema and

151
00:08:56.222 --> 00:09:00.202
whether or not it's a non no field or
it can be no or whatever.

152
00:09:00.202 --> 00:09:04.588
But if you ask for it,
that's what you'll get and nothing else.

153
00:09:04.588 --> 00:09:05.646
Nested objects,

154
00:09:05.646 --> 00:09:09.743
this is really cool because this has
a lot to do with relational data.

155
00:09:09.743 --> 00:09:16.019
So if you had an author that had posts and
you wanted to be able to get the posts for

156
00:09:16.019 --> 00:09:20.109
an author,
you can start from the author object and

157
00:09:20.109 --> 00:09:24.606
nest into t the post object and
ask for that data as well.

158
00:09:24.606 --> 00:09:28.550
So you can do that in a way that is
beneficial for the front end and

159
00:09:28.550 --> 00:09:33.090
not the other way around where the person
writing the back end will have to

160
00:09:33.090 --> 00:09:37.580
predefine those queries ahead of time or
they'll have to like create.

161
00:09:37.580 --> 00:09:40.759
Basically what will end up happening is
people in the back end end up creating

162
00:09:40.759 --> 00:09:43.985
their own query language on a query
string, and like, yeah, if you sent me

163
00:09:43.985 --> 00:09:47.034
this on a query string, this is how
you can change how I do the relations.

164
00:09:47.034 --> 00:09:49.818
But at that point,
they're creating their own query language.

165
00:09:49.818 --> 00:09:51.502
So GraphQL is like trying to solve that.

166
00:09:51.502 --> 00:09:52.506
And then there's arguments.

167
00:09:52.506 --> 00:09:57.250
So you can pass different arguments to
some of these fields and nested objects.

168
00:09:57.250 --> 00:10:00.730
That way you can do things like
give me this author by this ID or

169
00:10:00.730 --> 00:10:02.651
given this user by this e-mail.

170
00:10:02.651 --> 00:10:04.130
So there's a lot of argument passing.

171
00:10:04.130 --> 00:10:06.269
We'll discuss a lot of that as well.

172
00:10:06.269 --> 00:10:13.518
But those are the basic building blocks
of doing a query from a request site.

173
00:10:13.518 --> 00:10:16.460
There's a little more we'll cover,
but these are like the foundation,

174
00:10:16.460 --> 00:10:17.181
the basic stuff.

175
00:10:17.181 --> 00:10:19.118
So enough talking, let's get into it.

176
00:10:19.118 --> 00:10:21.863
So here's what a graphical
query looks like.

177
00:10:21.863 --> 00:10:23.678
Like I said,
the kind of looks like an object, right?

178
00:10:23.678 --> 00:10:27.728
There's some slight differences here,
you don't see like a key value,

179
00:10:27.728 --> 00:10:31.839
so it isn't like a field and then a value
here, what this is describing is,

180
00:10:31.839 --> 00:10:35.329
imagine if we had a blog application
where authors have posts.

181
00:10:35.329 --> 00:10:40.251
This is saying, hey,
I want to execute the author query, and

182
00:10:40.251 --> 00:10:43.199
I want to get the author with this ID.

183
00:10:43.199 --> 00:10:47.766
And then on the author object, I wanna
get the name, I wanna get the email.

184
00:10:47.766 --> 00:10:51.757
And then I know authors
have a list of posts.

185
00:10:51.757 --> 00:10:55.756
So what I wanna do is I wanna get
the title and the content and

186
00:10:55.756 --> 00:10:59.280
the publish date for
all the posts for this author.

187
00:10:59.280 --> 00:11:04.697
So what I would get back is an object
called author that has all these

188
00:11:04.697 --> 00:11:10.722
properties on it the exact same name,
it will have an array of posts on it.

189
00:11:10.722 --> 00:11:13.162
And those objects will have
these properties on it.

190
00:11:13.162 --> 00:11:14.491
Nothing more, nothing less.

191
00:11:14.491 --> 00:11:16.395
It'll be exactly this shape.

192
00:11:16.395 --> 00:11:19.508
So now you can write your
UI in a predictable way.

193
00:11:19.508 --> 00:11:21.484
You know it's always
gonna come back this way.

194
00:11:21.484 --> 00:11:26.434
And the reason you know that is because
GraphQL would break before it didn't

195
00:11:26.434 --> 00:11:27.758
come back this way.

196
00:11:27.758 --> 00:11:30.700
There's no way that it will respond to you

197
00:11:30.700 --> 00:11:34.654
with a successful request
without it being this shape,

198
00:11:34.654 --> 00:11:39.968
because you can only send a query that
matches the schema that was created.

199
00:11:39.968 --> 00:11:44.254
So if you send something that wasn't
possible, you'll get back an error.

200
00:11:44.254 --> 00:11:47.270
So if you didn't get back an error,
you got back what you asked for.

201
00:11:47.270 --> 00:11:50.521
And that's the guarantee,
that's the contract that type safety.

202
00:11:50.521 --> 00:11:54.077
So it's quite cool, but you would
have to see the other side of it,

203
00:11:54.077 --> 00:11:57.699
which is a GraphQL schema,
which is more backend related GraphQL,

204
00:11:57.699 --> 00:11:59.745
I'll cover that the backend course.

205
00:11:59.745 --> 00:12:03.525
This course there is no GraphQL schema,
you're just interacting with the GraphQL

206
00:12:03.525 --> 00:12:05.744
server you don't actually
create the schemer.

207
00:12:05.744 --> 00:12:08.425
So you just have to imagine that
there is scheme in the background.

