WEBVTT

1
00:00:00.590 --> 00:00:04.840
&gt;&gt; Scott Moss: So
I'm gonna go into my signup file.

2
00:00:04.840 --> 00:00:07.580
I pretty much copied and
pasted the whole file here, but

3
00:00:07.580 --> 00:00:10.570
obviously if you go look at the file,
it's it's all there.

4
00:00:10.570 --> 00:00:14.130
Really, the only thing that we're gonna
be changing here is this handle signup.

5
00:00:15.350 --> 00:00:21.426
Where we actually use the mutation and
sign up, so let's go do that.

6
00:00:21.426 --> 00:00:27.766
I'm gonna go to the sign up page,
which is gonna be app/(auth)/sign up.

7
00:00:29.506 --> 00:00:36.566
I'm gonna import use mutation,
be sure you're importing from Oracle.

8
00:00:36.566 --> 00:00:39.376
I don't remember if I still
have Apollo installed in here.

9
00:00:39.376 --> 00:00:41.227
And Apollo has a use mutation hook.

10
00:00:41.227 --> 00:00:45.137
Do not import the one from Apollo,
it does not work the same.

11
00:00:45.137 --> 00:00:48.957
It will break, I got stuck on that for
an hour at one point.

12
00:00:48.957 --> 00:00:52.941
So yep,
you gonna do that use mutation, and

13
00:00:52.941 --> 00:00:58.017
then we're gonna import our
mutation that we created.

14
00:00:58.017 --> 00:01:04.874
So I'm gonna import our sign-up
mutation from @gql/signupMutation,

15
00:01:04.874 --> 00:01:08.442
{SignupMutation}, like that.

16
00:01:08.442 --> 00:01:10.060
So we have our SignupMutation.

17
00:01:13.104 --> 00:01:15.990
&gt;&gt; Scott Moss: I'm gonna come down here,
and

18
00:01:15.990 --> 00:01:19.884
I'm going to say useMutation like this.

19
00:01:19.884 --> 00:01:22.311
And I'm passing our SignupMutation.

20
00:01:22.311 --> 00:01:26.951
This is not going to make a mutation
immediately when a component renders

21
00:01:26.951 --> 00:01:28.861
because you need variables.

22
00:01:28.861 --> 00:01:31.461
It needs to know when you
want to do the mutation.

23
00:01:31.461 --> 00:01:34.066
Queries, on the other hand, will execute
as soon as the component renders,

24
00:01:34.066 --> 00:01:35.761
by default you can turn that off.

25
00:01:35.761 --> 00:01:39.732
But that's the same behavior as the React
Query, SWR, it's like the same thing.

26
00:01:39.732 --> 00:01:42.130
Queries happen as soon as
the component renders,

27
00:01:42.130 --> 00:01:44.592
mutations have to be
triggered by some functions.

28
00:01:44.592 --> 00:01:46.172
So let's get that function.

29
00:01:46.172 --> 00:01:50.632
So in this Tupo here, we'll get the
result, so this will be sign up result.

30
00:01:50.632 --> 00:01:53.552
We probably won't use it, so
I'm just putting a placeholder here.

31
00:01:53.552 --> 00:01:56.645
And then this other one is actually
the function to call to signup,

32
00:01:56.645 --> 00:01:58.148
I'm just gonna call it signup.

33
00:01:58.148 --> 00:02:02.499
So we got that, and then basically,
the strategy here is pretty simple.

34
00:02:02.499 --> 00:02:07.235
We call signup, remember, we have to
pass in argument called input has to be

35
00:02:07.235 --> 00:02:11.979
the same name, and then its type is
an object that has an email and password.

36
00:02:11.979 --> 00:02:13.839
Well, that's what state has.

37
00:02:13.839 --> 00:02:16.519
State is an object with email and
password.

38
00:02:16.519 --> 00:02:22.052
So we just pass in state, and
then if we see that we get something back.

39
00:02:22.052 --> 00:02:26.422
We'll set the token in local storage and
we're redirected to the homepage.

40
00:02:26.422 --> 00:02:28.372
So, let's do that.

41
00:02:29.852 --> 00:02:34.672
So I'll say result

42
00:02:34.672 --> 00:02:39.195
= await signup.

43
00:02:40.910 --> 00:02:46.771
&gt;&gt; Scott Moss: Pass in my inputs and
then pass in my state like that.

44
00:02:46.771 --> 00:02:51.310
And then if I say,
if (results.data), remember,

45
00:02:51.310 --> 00:02:57.144
GraphQL never not does 200,
you have to look at these properties.

46
00:02:57.144 --> 00:03:00.902
So for the most part,
it'll just be these two.

47
00:03:00.902 --> 00:03:02.958
Data or error,
if there's an error you'll get error,

48
00:03:02.958 --> 00:03:04.282
if there's data you'll get data.

49
00:03:04.282 --> 00:03:10.472
You almost never get them both,
these other ones don't really matter.

50
00:03:10.472 --> 00:03:13.549
We wanna check for data,
so if there is data.

51
00:03:13.549 --> 00:03:16.405
I'm just gonna go a step further,
I'm gonna say if there's data., and

52
00:03:16.405 --> 00:03:18.477
then what I can do is,
if I go look at SignupMutation,

53
00:03:18.477 --> 00:03:20.354
it's always gonna be
whatever this is called.

54
00:03:20.354 --> 00:03:22.251
So there's gonna be data.createUser.

55
00:03:23.811 --> 00:03:29.114
It's gonna say that, so
I'm gonna say if data.createUser.

56
00:03:29.114 --> 00:03:30.621
Then we're good.

57
00:03:30.621 --> 00:03:35.264
So I can say setToken, which is gonna be

58
00:03:35.264 --> 00:03:40.053
result.data.createUser.token and

59
00:03:40.053 --> 00:03:44.992
I know it's .token because it's rare.

60
00:03:44.992 --> 00:03:47.210
Let's call it token, it`s right there.

61
00:03:50.005 --> 00:03:52.863
&gt;&gt; Scott Moss: I can actually rename
this if I didn't wanna call it token,

62
00:03:52.863 --> 00:03:54.802
I could say something like this.

63
00:03:54.802 --> 00:03:57.754
And that will actually rename it,
that's a neat trick,

64
00:03:57.754 --> 00:04:00.901
If you wanted to call it thing and
not token you could do that.

65
00:04:00.901 --> 00:04:04.378
That way the database functionality
still works and it can map the fields

66
00:04:04.378 --> 00:04:08.368
to the database or whatever data source,
but then the client gets renamed to this.

67
00:04:08.368 --> 00:04:12.152
So you can do that if you want,
I'm not doing that.

68
00:04:13.943 --> 00:04:15.713
&gt;&gt; Scott Moss: So
I'm gonna keep it like that.

69
00:04:17.695 --> 00:04:22.428
&gt;&gt; Scott Moss: There we go that and
then the last thing we wanna do is just

70
00:04:22.428 --> 00:04:27.473
a router.push(``/``) to
the homepage like that.

71
00:04:27.473 --> 00:04:31.661
Everything else should already be set up,
handle sign up should already be on form.

72
00:04:31.661 --> 00:04:35.587
Submit, looks like it's good here,
the set state's already working,

73
00:04:35.587 --> 00:04:37.371
that looks to be doing just fine.

74
00:04:37.371 --> 00:04:39.963
So, let's go see if we can sign up and

75
00:04:39.963 --> 00:04:43.571
let's see if we successfully
were able to do this.

76
00:04:43.571 --> 00:04:47.835
So I'm gonna go my app here,

77
00:04:47.835 --> 00:04:53.961
make sure I gonna go /sign up like that.

78
00:04:53.961 --> 00:04:56.681
I'm gonna sign up now,
I'll pick a new email.

79
00:04:56.681 --> 00:05:02.410
I'm admin2@gmail.com and on password,

80
00:05:02.410 --> 00:05:08.447
okay go away and boom,
we signed up [INAUDIBLE].

81
00:05:11.506 --> 00:05:12.381
&gt;&gt; Scott Moss: Already missed it,

82
00:05:12.381 --> 00:05:14.651
I was gonna show the Network
tab I already missed it.

83
00:05:14.651 --> 00:05:17.191
So if you did it right,
you should be able to sign up here.

84
00:05:17.191 --> 00:05:23.729
If you go look at the terminal, the output
you can see we did a POST/api/graphql 200.

85
00:05:23.729 --> 00:05:26.131
It's always gonna say that on success.

86
00:05:26.131 --> 00:05:28.661
Even on failure,
it's gonna say POST/api/graphql/200.

87
00:05:28.661 --> 00:05:33.021
So logs aren't even useful anymore for
GraphQL because they're all gonna say 200.

88
00:05:33.021 --> 00:05:37.492
So you can forget about streaming your
logs to some log provider because this is

89
00:05:37.492 --> 00:05:40.758
gonna say 200,
you got to figure something else out.

90
00:05:43.503 --> 00:05:44.668
&gt;&gt; Scott Moss: Any questions on sign up?

91
00:05:46.258 --> 00:05:48.375
Cool, then let's do the same
thing right click for sign in,

92
00:05:48.375 --> 00:05:50.088
it should be pretty much the same thing,
right?

93
00:05:50.088 --> 00:05:54.708
So, we go here,
I'm just gonna get rid of this.

94
00:05:54.708 --> 00:05:58.068
I'm gonna say instead of create user,
I wanna sign in and

95
00:05:58.068 --> 00:06:02.058
I'm gonna add the A token field,
the input is actually the same, so

96
00:06:02.058 --> 00:06:04.072
I don't even have to change it.

97
00:06:04.072 --> 00:06:05.202
It has the same AuthInput,

98
00:06:05.202 --> 00:06:07.862
just whatever you sign up with
you also have to sign in with.

99
00:06:07.862 --> 00:06:10.772
So I made them exactly the same, so
I don't even have to change that.

100
00:06:10.772 --> 00:06:16.039
Just gonna copy this sign in thing here,
&gt;&gt; Scott Moss: And

101
00:06:16.039 --> 00:06:19.662
I'm gonna go back to our gql folder.

102
00:06:19.662 --> 00:06:24.840
I'm gonna make a new one,
call signinMutation.

103
00:06:27.238 --> 00:06:32.803
&gt;&gt; Scott Moss: And I'm gonna import gql,
why am I doing that?

104
00:06:32.803 --> 00:06:38.905
Imports from @urql, gql and

105
00:06:38.905 --> 00:06:45.013
exports my SigninMutation.

106
00:06:46.173 --> 00:06:50.317
I use GQL and just that.

107
00:06:55.951 --> 00:07:01.338
&gt;&gt; Scott Moss: If you don't have
syntax highlighting for your GraphQL.

108
00:07:01.338 --> 00:07:04.220
Just go to the plugin store and
type GraphQL.

109
00:07:04.220 --> 00:07:06.453
There's probably so
many of them at this point, but

110
00:07:06.453 --> 00:07:08.650
I think most editors kind
of support it by default.

111
00:07:11.664 --> 00:07:14.350
&gt;&gt; Scott Moss: Okay, got a signinMutation,
we're gonna do the same thing.

112
00:07:14.350 --> 00:07:19.597
We're gonna go to our signin file and
go to the page,

113
00:07:19.597 --> 00:07:24.265
and we're gonna do
the exact same thing here.

114
00:07:24.265 --> 00:07:31.281
So we're gonna import our
useMutation like that, and

115
00:07:31.281 --> 00:07:38.615
we're going to import our signinMutation,
like that.

116
00:07:38.615 --> 00:07:43.400
We're gonna make the mutation
here with useMutation,

117
00:07:43.400 --> 00:07:48.196
passing our signinMutation
will get the results here.

118
00:07:48.196 --> 00:07:50.769
We won't ever really use those, and

119
00:07:50.769 --> 00:07:54.504
we'll get the actual function
I will call it signin.

120
00:07:56.533 --> 00:07:57.983
&gt;&gt; Scott Moss: Like that.

121
00:08:00.044 --> 00:08:02.430
&gt;&gt; Scott Moss: And
then down here, we'll do this.

122
00:08:02.430 --> 00:08:07.898
data = await signin, takes the object

123
00:08:07.898 --> 00:08:13.042
with the input whose value is state.

124
00:08:15.525 --> 00:08:19.969
&gt;&gt; Scott Moss: And if data.data,
that's pretty redundant, .signin,

125
00:08:19.969 --> 00:08:26.736
I know it's called signin, cuz if I look
at the mutation, it's called signin here.

126
00:08:26.736 --> 00:08:31.116
This was called,
then it'd be data.data.thing.

127
00:08:31.116 --> 00:08:35.897
But in this case it's data.data.sign in,
cuz that's the name of the actual function

128
00:08:35.897 --> 00:08:38.866
here, or mutation,
which is basically a function.

129
00:08:38.866 --> 00:08:42.569
So, if data.data.signin, we are good.

130
00:08:42.569 --> 00:08:49.165
Then I need to set the token,
which should be data.data.

131
00:08:49.165 --> 00:08:56.682
My God, these pop ups like ads,
[LAUGH] (data.data.signin.token),

132
00:08:56.682 --> 00:09:00.869
and then router.push(``/``).

133
00:09:02.750 --> 00:09:03.715
Go to home.

134
00:09:07.151 --> 00:09:10.620
&gt;&gt; Scott Moss: Everything else is
wired up, should work just fine.

135
00:09:12.800 --> 00:09:18.584
So now if we go back to home, see if I
can remember what I just signed in or

136
00:09:18.584 --> 00:09:21.833
signed up with, let's try to sign in.

137
00:09:21.833 --> 00:09:27.513
If I go to sign in,
like I said, admin2@gmail.com.

138
00:09:27.513 --> 00:09:29.333
And I think a password was just password.

139
00:09:30.363 --> 00:09:31.583
Yeah it was, so there we go.

140
00:09:31.583 --> 00:09:33.050
Sign in works, and

141
00:09:33.050 --> 00:09:38.103
again you can test all this out
just by trying it out here, right?

142
00:09:38.103 --> 00:09:45.728
I can try sign in right now with that
same credential, admin2@gmail.com.

143
00:09:45.728 --> 00:09:48.428
Password, if I run this, I just sign in.

144
00:09:48.428 --> 00:09:49.618
Here's my JSON Web Token.

145
00:09:49.618 --> 00:09:53.288
If I wanna get my id in my email,
here's my id.

146
00:09:53.288 --> 00:09:55.388
Here's my email, I can run it again.

147
00:09:55.388 --> 00:09:57.441
There it is, here's my id,
there's my email.

148
00:09:57.441 --> 00:10:01.868
So this is a great place to test things
out just to make sure things are working

149
00:10:01.868 --> 00:10:05.118
the way they should,
figure out what queries you need,

150
00:10:05.118 --> 00:10:07.568
and then bring them into the app.

151
00:10:07.568 --> 00:10:12.022
Just to quickly walk through them
one more time to see what we did, so

152
00:10:12.022 --> 00:10:15.238
we can retain that a little bit and
move forward.

153
00:10:16.418 --> 00:10:20.743
I'm gonna use our Apollo Studio here, and

154
00:10:20.743 --> 00:10:25.322
I'm I'm gonna close my
sidebar there we go.

155
00:10:25.322 --> 00:10:29.784
And the comment I made
about the variables,

156
00:10:29.784 --> 00:10:34.608
again, $ sign represents
the argument name,

157
00:10:34.608 --> 00:10:40.652
you could pass it into any other
function here in this case.

158
00:10:40.652 --> 00:10:41.916
I pass it to the signup function.

159
00:10:41.916 --> 00:10:43.951
And then obviously we
have our inputs here,

160
00:10:43.951 --> 00:10:47.476
which are the variables that you have
to pass in, and then we get our output.

161
00:10:48.646 --> 00:10:54.806
So, nothing too complicated here, I think
they did a really good job of mapping.

162
00:10:54.806 --> 00:10:57.746
I mean, that's the whole point
of GraphQL is like mapping

163
00:10:57.746 --> 00:11:00.686
these fields to the actual
data that you get back.

164
00:11:00.686 --> 00:11:04.158
So, some of the things that I wanted
to walk through before we hop into like

165
00:11:04.158 --> 00:11:07.070
the querying, which I think is
gonna be useful for querying,

166
00:11:07.070 --> 00:11:08.480
are just some of these small.

167
00:11:08.480 --> 00:11:11.997
You might have seen me do them here or
there, but some small transforms and

168
00:11:11.997 --> 00:11:13.074
things like that, and

169
00:11:13.074 --> 00:11:17.304
even some smaller things that you didn't
know about that are quite powerful.

170
00:11:17.304 --> 00:11:25.110
So for instance, if I wanted to rename
one of these fields to something else.

171
00:11:25.110 --> 00:11:28.480
If I didn't want this to be called token,
instead I wanted to be called jwt.

172
00:11:28.480 --> 00:11:34.347
I can rename the field like this
with a colon, and if I rerun this,

173
00:11:34.347 --> 00:11:39.160
you'll see now in the output it's jwt and
not token.

174
00:11:40.250 --> 00:11:41.451
So why would I wanna do this?

175
00:11:41.451 --> 00:11:43.602
What is the purpose of this?

176
00:11:43.602 --> 00:11:48.472
Well, this is just something
that benefits the client itself.

177
00:11:48.472 --> 00:11:53.792
In the case of this the GraphQL API
is resolving for the field token.

178
00:11:53.792 --> 00:11:59.322
Maybe that's just, I mean, this is what
the GraphQL schema says, is allowed.

179
00:11:59.322 --> 00:12:02.869
It's a token, but if the front
end doesn't want it to be token,

180
00:12:02.869 --> 00:12:04.828
then they can just remap it here.

181
00:12:04.828 --> 00:12:06.868
This just saves you from
writing that code yourself.

182
00:12:06.868 --> 00:12:10.239
If you were gonna, do that transformation,

183
00:12:10.239 --> 00:12:14.448
I highly recommend using
GraphQL as much as possible.

184
00:12:14.448 --> 00:12:18.040
So when you get the output from it, you
can put it right on the screen, and that

185
00:12:18.040 --> 00:12:21.768
there isn't really a lot of manipulating
and transforming that you have to do.

186
00:12:21.768 --> 00:12:25.334
Before you put it on the screen,
you should try to find a way to do that in

187
00:12:25.334 --> 00:12:28.622
GraphQL with some of these
things what I just did here.

188
00:12:28.622 --> 00:12:32.462
There's also tons of other GraphQL
plugins that allow you to manipulate and

189
00:12:32.462 --> 00:12:34.572
change things, to alter things.

190
00:12:34.572 --> 00:12:37.792
You can also make your own,
it's a little more advanced,

191
00:12:37.792 --> 00:12:41.800
you kinda got to understand the AST
a little bit when it comes to GraphQL,

192
00:12:41.800 --> 00:12:45.370
but you can definitely try to,
that's the whole point of this.

193
00:12:45.370 --> 00:12:49.348
If you're getting a result from GraphQL,
just to map over it and

194
00:12:49.348 --> 00:12:52.970
pick the properties you really want and
change the names.

195
00:12:52.970 --> 00:12:56.306
And you're not using GraphQL right,
you need to do that here.

196
00:12:56.306 --> 00:13:01.202
Get the right names, get the right values,
get the fields that you want in the query,

197
00:13:01.202 --> 00:13:03.517
and then put them on the screen, right?

198
00:13:03.517 --> 00:13:07.587
So that's the use case,
I'll try to figure out how to do that.

199
00:13:07.587 --> 00:13:08.767
It's just like database queries.

200
00:13:08.767 --> 00:13:13.753
You could query the database, and
get all the things you need it,

201
00:13:13.753 --> 00:13:17.937
and run some code, and
map over them and do this stuff.

202
00:13:17.937 --> 00:13:21.475
Or you could find the database query that
does that for you on the database level,

203
00:13:21.475 --> 00:13:24.877
and get back get exactly what you want in
a way that you want from the database.

204
00:13:24.877 --> 00:13:27.385
So you wouldn't sort in the code,

205
00:13:27.385 --> 00:13:30.937
you would just ask the database to sort,
right?

206
00:13:30.937 --> 00:13:32.807
So it's a very similar mindset.

207
00:13:32.807 --> 00:13:35.546
Try to get GraphQL to do the thing
that you want, so you can go ahead and

208
00:13:35.546 --> 00:13:36.567
put it on the screen.

209
00:13:36.567 --> 00:13:38.597
So that's one trick there.

210
00:13:38.597 --> 00:13:43.353
The other thing is you can do inside
of one operation like this or

211
00:13:43.353 --> 00:13:47.860
a function, you can do many queries or
mutations, right?

212
00:13:47.860 --> 00:13:54.976
So for instance, if I wanted to,
let me see if I have one for all users.

213
00:13:54.976 --> 00:13:55.859
I don't.
Okay,

214
00:13:55.859 --> 00:13:59.380
this will make more sense with a query.

215
00:13:59.380 --> 00:14:00.840
It doesn't really make sense with sign.

216
00:14:00.840 --> 00:14:03.066
You're not gonna sign in
two people at once, so

217
00:14:03.066 --> 00:14:05.358
it doesn't really make sense for
this example.

218
00:14:05.358 --> 00:14:11.372
But you could come down here and say,
you know what, I want to sign in again,

219
00:14:11.372 --> 00:14:16.340
so I could say again and I can say,
signin and I could do this again.

220
00:14:16.340 --> 00:14:20.701
And I could sign in again and
run this and give it an input and

221
00:14:20.701 --> 00:14:25.062
it'll run both of these at
the same time simultaneously.

222
00:14:25.062 --> 00:14:28.695
Again, this is really not a good use
case for signing into people, but for

223
00:14:28.695 --> 00:14:30.112
a query it might make sense.

224
00:14:30.112 --> 00:14:33.218
Maybe you do a query to get
these things and then unrelated,

225
00:14:33.218 --> 00:14:35.402
you do another query to get these things.

226
00:14:35.402 --> 00:14:39.292
So it's kinda batching,
that's the best way I can describe it.

227
00:14:39.292 --> 00:14:42.410
So you can do that in
one operation as well.

228
00:14:42.410 --> 00:14:47.800
It's quite powerful and
there's some more things here and

229
00:14:47.800 --> 00:14:52.111
there, but
those things are quite advanced and

230
00:14:52.111 --> 00:14:56.340
they really depend on
the client that you use.

231
00:14:56.340 --> 00:15:01.056
A lot of the stuff when it comes to
front end GraphQL really depends on

232
00:15:01.056 --> 00:15:07.023
the actual client that you use and
they aren't specific to the GraphQL spec.

233
00:15:07.023 --> 00:15:10.893
So I'm refraining from
showing those things.

234
00:15:10.893 --> 00:15:13.313
I know Urkel has some stuff
that's specific to them.

235
00:15:13.313 --> 00:15:15.713
I know Apollo has some stuff
that's specific to them.

236
00:15:15.713 --> 00:15:18.865
And I'm trying to refrain from using that,
but for

237
00:15:18.865 --> 00:15:21.960
the most part you wanna
stick to the GraphQL spec.

238
00:15:21.960 --> 00:15:27.380
And kinda do some stuff here, so
just a quick note on a little bit of that.

