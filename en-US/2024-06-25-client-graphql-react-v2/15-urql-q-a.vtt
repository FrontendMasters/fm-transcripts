WEBVTT

1
00:00:00.180 --> 00:00:04.363
&gt;&gt; Scott Moss: I highly recommend
going to the urql docs and

2
00:00:04.363 --> 00:00:07.470
reading about cache updates.

3
00:00:07.470 --> 00:00:10.193
Or if you click on Graphcache,
you got to Cache Updates,

4
00:00:10.193 --> 00:00:12.483
I highly recommend reading about this,
okay?

5
00:00:12.483 --> 00:00:16.935
This right here is you'll most
likely 100% be doing this in

6
00:00:16.935 --> 00:00:22.144
a production app if you're using any
type of systems like urql or Apollo,

7
00:00:22.144 --> 00:00:26.696
you're gonna have to interact
with the local cache on updates.

8
00:00:26.696 --> 00:00:30.330
Like an example right here, this is
actually the perfect example for us.

9
00:00:30.330 --> 00:00:33.866
This is how we would have
fixed our issue being added to

10
00:00:33.866 --> 00:00:36.010
a list when we create an issue.

11
00:00:36.010 --> 00:00:39.472
We would have, so in their case,
they're making a new todo.

12
00:00:39.472 --> 00:00:40.583
We were making a new issue.

13
00:00:40.583 --> 00:00:41.523
So very similar.

14
00:00:41.523 --> 00:00:45.435
In our cache exchange,
we can write a handler for

15
00:00:45.435 --> 00:00:48.113
our create issue mutation here.

16
00:00:48.113 --> 00:00:53.268
And this is where it kinda gets confusing,
so I didn't really wanna talk about it.

17
00:00:53.268 --> 00:00:56.499
So they're querying the local
cache with GraphQL.

18
00:00:56.499 --> 00:00:57.619
And this is where it gets crazy.

19
00:00:57.619 --> 00:01:00.762
So they're not querying
the API with this query here.

20
00:01:00.762 --> 00:01:06.042
This query is for the local cache,
because the cache itself is a graph.

21
00:01:06.042 --> 00:01:09.292
So you can query the cache with GraphQL.

22
00:01:09.292 --> 00:01:13.021
GraphQL doesn't have to go over
the network, it can query any data source,

23
00:01:13.021 --> 00:01:14.402
even if it's local.

24
00:01:14.402 --> 00:01:18.042
So they created a query to get
all the todos by their ID.

25
00:01:19.262 --> 00:01:20.724
That'll give them a todo list, and

26
00:01:20.724 --> 00:01:23.523
then what they can do is they can
update the query for this todo list.

27
00:01:23.523 --> 00:01:25.702
They'll get all the todos here.

28
00:01:25.702 --> 00:01:29.889
And they'll return a new
cache with all the previous

29
00:01:29.889 --> 00:01:34.456
data on there unrelated to todos,
and make a new array for

30
00:01:34.456 --> 00:01:40.277
todos with the current todos on it,
plus the new one that just got added.

31
00:01:40.277 --> 00:01:42.306
Right, so it's very similar to Redux.

32
00:01:42.306 --> 00:01:43.936
It's immutable operations, right?

33
00:01:43.936 --> 00:01:45.626
They're doing an immutable operation here.

34
00:01:45.626 --> 00:01:49.905
But this is very specific to urql.

35
00:01:49.905 --> 00:01:53.506
Every client that I saw has a version
of this and they're all different.

36
00:01:53.506 --> 00:01:56.268
So I was just like, okay,
I'm just not gonna teach it, but

37
00:01:56.268 --> 00:01:59.993
I'll talk about it because as you can see,
they're never gonna be this small.

38
00:01:59.993 --> 00:02:01.337
They're gonna be way bigger than this.

39
00:02:01.337 --> 00:02:02.607
They're gonna be massive.

40
00:02:02.607 --> 00:02:09.018
So it can get quite complicated,
caching strategies is quite complicated.

41
00:02:09.018 --> 00:02:12.959
I didn't wanna dive into a lot of that
stuff because they're just advanced

42
00:02:12.959 --> 00:02:16.666
performance level things that you
don't really need to get started.

43
00:02:16.666 --> 00:02:19.522
And this is more of like a getting started
course, so I didn't really dive into them.

44
00:02:19.522 --> 00:02:23.406
But I'm talking about them now as
a means for you to go and check out.

45
00:02:23.406 --> 00:02:25.679
So if you start using this
in production and are like,

46
00:02:25.679 --> 00:02:27.203
how do you get past certain things?

47
00:02:27.203 --> 00:02:31.217
So something to keep an eye out on.

48
00:02:31.217 --> 00:02:32.947
Yeah, so I would say check that out.

49
00:02:32.947 --> 00:02:37.336
And then all the other stuff is probably

50
00:02:37.336 --> 00:02:41.728
gonna be covered in the server course.

51
00:02:41.728 --> 00:02:44.527
The server course covers 90% of GraphQL.

52
00:02:44.527 --> 00:02:46.247
The frontend stuff is quite simple.

53
00:02:46.247 --> 00:02:51.147
It's the backend stuff that's really
hard to wrap your head around sometimes.

54
00:02:51.147 --> 00:02:53.150
So we'll do that, yes.

55
00:02:53.150 --> 00:03:00.143
&gt;&gt; Speaker 1: What factors do you consider
when choosing between urql versus Apollo?

56
00:03:00.143 --> 00:03:01.983
&gt;&gt; Scott Moss: What factors do I consider?

57
00:03:01.983 --> 00:03:07.320
Documentation, resources,
recent updates, and whether or

58
00:03:07.320 --> 00:03:13.774
not they have a good track record of
supporting some of the latest features.

59
00:03:13.774 --> 00:03:16.163
Like, I use Next.js quite often.

60
00:03:16.163 --> 00:03:18.424
App Directory has been out for
a long time.

61
00:03:18.424 --> 00:03:23.255
The fact that urql had support for
it, that's not experimental.

62
00:03:24.805 --> 00:03:29.138
What's good for me, if I click here,
they actually have.

63
00:03:33.382 --> 00:03:36.645
&gt;&gt; Scott Moss: I know they talk about it
in here somewhere, but the app directory,

64
00:03:36.645 --> 00:03:39.175
they support server components,
they do all that.

65
00:03:39.175 --> 00:03:43.162
Whereas all the other ones,
also Legacy, here we go,

66
00:03:43.162 --> 00:03:47.075
all the other ones have
experimental support for it.

67
00:03:47.075 --> 00:03:51.488
I'm just like, App Directory been out for,
I don't know, a year plus now.

68
00:03:51.488 --> 00:03:53.141
It's still experimentalist.

69
00:03:53.141 --> 00:03:56.325
I just don't like that,
I'm just like, move a little faster.

70
00:03:56.325 --> 00:04:00.829
So for me, I'm always looking at something
that's useful, that a lot of people use,

71
00:04:00.829 --> 00:04:03.576
but it's being updated and
is staying up to date.

72
00:04:03.576 --> 00:04:06.346
Documentation is simple, easy to use.

73
00:04:06.346 --> 00:04:07.596
So that's kinda how I look at it.

74
00:04:07.596 --> 00:04:09.726
I mean,
urql is gonna be just as good as Apollo.

75
00:04:09.726 --> 00:04:14.236
It's just that Apollo
has a bigger ecosystem.

76
00:04:14.236 --> 00:04:16.220
So it's like urql can do
everything Apollo can, but

77
00:04:16.220 --> 00:04:18.676
Apollo probably already has a plugin for
it.

78
00:04:18.676 --> 00:04:23.370
So it's just a massive ecosystem, which
is why we're using it on the server for

79
00:04:23.370 --> 00:04:28.065
the server course, but I didn't use it on
the client course cuz I felt like it was

80
00:04:28.065 --> 00:04:30.186
like shooting a fly with a shotgun.

81
00:04:30.186 --> 00:04:30.952
It was just too much.

82
00:04:30.952 --> 00:04:32.114
It was like, you didn't need all of that.

83
00:04:32.114 --> 00:04:35.282
You just need something a little
more simple, so I chose urql.

84
00:04:36.402 --> 00:04:41.484
&gt;&gt; Speaker 2: So I'm familiar
with some tools like Qlik, and

85
00:04:41.484 --> 00:04:48.617
that's sort of for data aggregation and
business intelligence.

86
00:04:48.617 --> 00:04:54.897
Now, I,
&gt;&gt; Speaker 2: Was under the impression.

87
00:04:54.897 --> 00:04:59.768
I mean, somebody gave me some wrong
information about GraphQL a long time ago,

88
00:04:59.768 --> 00:05:02.177
and it's in this life, I had to reset.

89
00:05:02.177 --> 00:05:07.217
But I look at the fact that you're dealing
with graph data underneath the covers.

90
00:05:07.217 --> 00:05:07.734
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Speaker 2: And

91
00:05:07.734 --> 00:05:12.720
that you've got different ways of
mapping information into it and

92
00:05:12.720 --> 00:05:16.217
then how to get it out, which is great.

93
00:05:16.217 --> 00:05:18.356
But I was curious if a tool like Qlik,

94
00:05:18.356 --> 00:05:21.740
do you think that's the kinda
thing that they're doing?

95
00:05:21.740 --> 00:05:26.613
Because they've got a lot of that kind of,
whether it's Qlik or

96
00:05:26.613 --> 00:05:29.683
other data aggregation type services,

97
00:05:29.683 --> 00:05:34.646
I can see that this would be really
sort of a good core technology to

98
00:05:34.646 --> 00:05:39.160
accomplish that kinda stuff for a SaaS or-
&gt;&gt; Scott Moss: Yeah, I think a lot of

99
00:05:39.160 --> 00:05:44.353
those tools, what they're probably doing,
I mean, they could benefit from GraphQL.

100
00:05:44.353 --> 00:05:45.665
I think for them,

101
00:05:45.665 --> 00:05:51.123
it's like the end result of GraphQL
is some client querying it, right?

102
00:05:51.123 --> 00:05:54.183
But if a product like Qlik,
which is probably doing,

103
00:05:54.183 --> 00:05:57.813
their end result is to get
this data from here to here.

104
00:05:57.813 --> 00:06:00.326
And yeah, eventually,
there is a client somewhere, but

105
00:06:00.326 --> 00:06:02.801
that client doesn't pull it
directly from this source.

106
00:06:02.801 --> 00:06:06.078
It goes into this warehouse or something,
and then there's some analysis, and

107
00:06:06.078 --> 00:06:07.681
then out comes something else.

108
00:06:07.681 --> 00:06:12.555
So for them, GraphQL probably might not be
that useful because they're not allowing

109
00:06:12.555 --> 00:06:17.511
someone to directly query this data that's
coming from all these different sources.

110
00:06:17.511 --> 00:06:20.431
They're just trying to move
data from here to here.

111
00:06:20.431 --> 00:06:24.135
So they could use it, but it probably
wouldn't be worth the time of them

112
00:06:24.135 --> 00:06:26.438
building the infrastructure for GraphQL.

113
00:06:26.438 --> 00:06:28.667
It's probably better for them just to say,

114
00:06:28.667 --> 00:06:32.111
we'll just write the code that maps
directly to these field types.

115
00:06:32.111 --> 00:06:35.121
We'll just rely on the database
schemas as our contract and not so

116
00:06:35.121 --> 00:06:36.821
much the GraphQL schemas.

117
00:06:36.821 --> 00:06:38.091
And hopefully, that never changes.

118
00:06:38.091 --> 00:06:40.141
If there's a migration,
we'll have to adjust.

119
00:06:40.141 --> 00:06:44.098
I think that's probably what they're
doing, they're just relying on the fact

120
00:06:44.098 --> 00:06:47.248
that the sources that they're
pulling from have version APIs.

121
00:06:47.248 --> 00:06:50.008
And they can subscribe to
those different versions and

122
00:06:50.008 --> 00:06:52.415
without fear of those APIs breaking.

123
00:06:52.415 --> 00:06:54.705
And they probably just do that.

124
00:06:54.705 --> 00:06:58.846
But yeah, I think that would probably
be the best use case because, yeah,

125
00:06:58.846 --> 00:07:03.386
you'd only get half the value of using
GraphQL without eventually having someone

126
00:07:03.386 --> 00:07:05.597
on the client be able to query that.

127
00:07:05.597 --> 00:07:08.960
You know what I mean?
So I would say probably that, yeah.

