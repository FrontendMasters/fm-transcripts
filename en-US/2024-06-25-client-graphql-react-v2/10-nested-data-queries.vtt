WEBVTT

1
00:00:00.000 --> 00:00:04.270
&gt;&gt; Speaker 1: What we wanna look at
next is gonna be the issues query.

2
00:00:04.270 --> 00:00:07.509
So we wanna be able to pull
down any issues, and so

3
00:00:07.509 --> 00:00:10.757
that they can actually show up on a page,
right?

4
00:00:10.757 --> 00:00:15.799
So if I go to my app,
it's not gonna show anything.

5
00:00:15.799 --> 00:00:22.950
One, cuz I don't have any issues, but
also, two, it's not really making a query.

6
00:00:22.950 --> 00:00:24.013
We don't really have that hooked up.

7
00:00:24.013 --> 00:00:26.537
So let me go check.

8
00:00:26.537 --> 00:00:29.064
Yeah, we're not doing anything, so
we actually have to hook this up.

9
00:00:29.064 --> 00:00:32.278
So we need to make the query and
we need to pull them down.

10
00:00:32.278 --> 00:00:35.142
And even then we won't actually get
anything because you don't have any in

11
00:00:35.142 --> 00:00:35.737
the database.

12
00:00:35.737 --> 00:00:39.008
You won't see anything until
you actually create the issue.

13
00:00:39.008 --> 00:00:44.810
So let's go ahead and
make the query that gets the issues.

14
00:00:44.810 --> 00:00:48.320
So again,
I'm gonna do the same thing I always do.

15
00:00:48.320 --> 00:00:53.233
I'm gonna go into the Apollo studio, I'm
gonna use the tool there to explore and

16
00:00:53.233 --> 00:00:57.871
help me write the query cuz I get the type
checks, I get all that stuff there.

17
00:00:57.871 --> 00:01:01.340
You could set all that stuff up in your
editor I talked about a little earlier

18
00:01:01.340 --> 00:01:03.887
using code generation to
generate typescript types.

19
00:01:03.887 --> 00:01:08.009
That'll give you autocomplete with your
query schema and all that stuff, but

20
00:01:08.009 --> 00:01:11.082
I'll just use a studio,
which is better, in my opinion.

21
00:01:11.082 --> 00:01:12.207
So I'm just gonna do that.

22
00:01:12.207 --> 00:01:18.260
Also, I'm, I guess, a little hardheaded,
or I'm just anti anything Codegen.

23
00:01:18.260 --> 00:01:22.510
I think it's just not the best way
[LAUGH] to get what you need, but

24
00:01:22.510 --> 00:01:24.731
sometimes that's the only way.

25
00:01:24.731 --> 00:01:28.119
And so I like TRPC cuz you
don't have to do Codegen, but

26
00:01:28.119 --> 00:01:31.443
at the same time I like
the query language of GraphQL.

27
00:01:31.443 --> 00:01:34.104
So that's just how it is.

28
00:01:34.104 --> 00:01:37.128
But yeah, let's go here,
let's go to Apollo server.

29
00:01:37.128 --> 00:01:43.070
I'm gonna just get rid of this,
I'm going to click on Query.

30
00:01:43.070 --> 00:01:44.673
I'm gonna click on the issues query.

31
00:01:47.200 --> 00:01:49.533
&gt;&gt; Speaker 1: And then you can see
all the fields that issue has.

32
00:01:49.533 --> 00:01:51.825
I'm just gonna get rid of
these variables for now.

33
00:01:54.122 --> 00:01:57.664
So I have a bunch of stuff here.

34
00:01:57.664 --> 00:02:01.871
So one, I can get the content,
that's the actual body,

35
00:02:01.871 --> 00:02:06.092
the issue, the createdAt,
the ID, the name, status.

36
00:02:06.092 --> 00:02:09.785
And then I'm gonna talk about this,
the user in a little bit,

37
00:02:09.785 --> 00:02:12.000
because that one's kinda special.

38
00:02:12.000 --> 00:02:17.929
And then as far as the arguments go,
it looks like I have a null argument.

39
00:02:17.929 --> 00:02:19.868
So it can be null.

40
00:02:19.868 --> 00:02:22.273
So I don't have to supply this argument,
it's not not-null.

41
00:02:22.273 --> 00:02:25.429
But if I were,
it looks like it's an array of statuses.

42
00:02:25.429 --> 00:02:27.715
So it's an array of issueStatus.

43
00:02:27.715 --> 00:02:32.225
But look at issueStatus, you can see it's
actually a enum of one of these values.

44
00:02:32.225 --> 00:02:34.852
So backlog, todo, inprogress, done.

45
00:02:34.852 --> 00:02:36.012
It could be one of those.

46
00:02:38.546 --> 00:02:40.613
But we don't have to supply it,
it's optional.

47
00:02:40.613 --> 00:02:41.526
So I'm gonna run this.

48
00:02:41.526 --> 00:02:45.895
I should just get back to empty array cuz
I don't have any issues for this user.

49
00:02:48.120 --> 00:02:52.149
Or maybe I do have some issues for
this user, I guess.

50
00:02:52.149 --> 00:02:55.657
Yeah, I did actually sign up
to make some for this user.

51
00:02:55.657 --> 00:03:00.707
Okay, or whatever user is actually
signed in here has issues.

52
00:03:00.707 --> 00:03:06.126
I would have to make a new user for
my database that doesn't have issues.

53
00:03:06.126 --> 00:03:09.036
But I guess this is great cuz I
can actually show you some things.

54
00:03:09.036 --> 00:03:10.787
So this is perfect.

55
00:03:10.787 --> 00:03:12.071
So let's take a look at this.

56
00:03:12.071 --> 00:03:16.704
So with the issues here,
obviously we're getting back an array of

57
00:03:16.704 --> 00:03:20.438
objects with the properties
on them that I asked for.

58
00:03:20.438 --> 00:03:23.173
But then also, if we go and
look at the input filter, so

59
00:03:23.173 --> 00:03:26.390
if I click on the input filter here,
you can see I have statuses.

60
00:03:26.390 --> 00:03:28.446
So I'm gonna add this,
I'm gonna say statuses.

61
00:03:28.446 --> 00:03:33.048
And then I want to, I'm gonna click
on this, I wanna get all the ones,

62
00:03:33.048 --> 00:03:35.400
let me see, are all these backlog?

63
00:03:35.400 --> 00:03:39.325
I think they're all backlog,
although I have it inprogress, inprogress.

64
00:03:39.325 --> 00:03:40.289
Okay, this will work then.

65
00:03:40.289 --> 00:03:45.914
So I'm gonna get all the ones that are,
say, inprogress.

66
00:03:45.914 --> 00:03:52.863
So I'll say statuses, and
then I'll say inprogress.

67
00:03:52.863 --> 00:03:55.811
So if I do this,
if my database query works,

68
00:03:55.811 --> 00:04:00.219
I should only get back the issues
whose statuses are inprogress.

69
00:04:00.219 --> 00:04:04.728
So if I run this, I definitely only get
back the statuses that are inprogress.

70
00:04:04.728 --> 00:04:08.612
So you won't see this as you probably
don't have any issues in your database.

71
00:04:08.612 --> 00:04:10.497
But that's how that filtering works.

72
00:04:10.497 --> 00:04:13.741
So it's quite powerful
on how you can do that.

73
00:04:16.354 --> 00:04:21.384
And then when it comes to relational data,
how you would do that and rest.

74
00:04:21.384 --> 00:04:26.460
How would you invest, say,
give me all the issues, and

75
00:04:26.460 --> 00:04:33.062
then also join this table on the issues
and give me this relational data?

76
00:04:33.062 --> 00:04:36.246
I don't know how you would do that and
rest, that kinda defeats the purpose.

77
00:04:36.246 --> 00:04:37.780
Rest will just be another API call.

78
00:04:37.780 --> 00:04:42.720
Technically, you'd have to get the ID of
the joint table resource that you want,

79
00:04:42.720 --> 00:04:45.523
map it to another rest call for
that resource.

80
00:04:45.523 --> 00:04:49.392
Or again, some developer created a query
language that lets you do it in one call,

81
00:04:49.392 --> 00:04:50.525
which is kinda sloppy.

82
00:04:50.525 --> 00:04:54.195
But here in GraphQL, if I wanted to
get the user for all these issues,

83
00:04:54.195 --> 00:04:55.729
I could just come down here.

84
00:04:55.729 --> 00:04:57.523
And if I go look at a schema,

85
00:04:57.523 --> 00:05:02.761
you can see that issue does have a user
whose type is user, and it's non-null.

86
00:05:02.761 --> 00:05:04.681
So it's guaranteed to be there.

87
00:05:04.681 --> 00:05:08.806
And that user has these fields on them,
an ID.

88
00:05:08.806 --> 00:05:10.142
It also has issues.

89
00:05:10.142 --> 00:05:12.944
I'm gonna demonstrate
something that's gonna be,

90
00:05:12.944 --> 00:05:15.009
do I have that hooked up on the backend?

91
00:05:15.009 --> 00:05:15.538
We're gonna see.

92
00:05:15.538 --> 00:05:16.781
We're gonna see something
interesting here.

93
00:05:16.781 --> 00:05:19.533
And if you're already
seeing what I'm thinking,

94
00:05:19.533 --> 00:05:22.736
then you're probably curious
what's gonna happen here.

95
00:05:22.736 --> 00:05:27.890
But let's see, so I'm gonna say,
I'm gonna get the user, right?

96
00:05:27.890 --> 00:05:31.156
And then I wanna get the ID of the user,
so let's just run that.

97
00:05:32.847 --> 00:05:36.373
&gt;&gt; Speaker 1: Cool, so I got the user,
and I got the ID of the user.

98
00:05:36.373 --> 00:05:37.436
Let me close this.

99
00:05:41.577 --> 00:05:43.630
&gt;&gt; Speaker 1: Give this some more space.

100
00:05:43.630 --> 00:05:45.233
There we go, I'll just do that.

101
00:05:45.233 --> 00:05:48.604
So we got the user, and
we got the ID of the user for

102
00:05:48.604 --> 00:05:51.749
every single size, and it's the same user.

103
00:05:51.749 --> 00:05:53.261
So they all have the same ID.

104
00:05:53.261 --> 00:05:57.768
But now because a user
can also have issues, and

105
00:05:57.768 --> 00:06:03.064
an issue can have a user but
get into this cyclic scenario

106
00:06:03.064 --> 00:06:07.696
where it's recursive, right, it's cyclic.

107
00:06:07.696 --> 00:06:12.607
So now if I go in here and I say,
I wanna get the issues for this user.

108
00:06:12.607 --> 00:06:16.918
All right, I could do that and
I can get the names and the status.

109
00:06:16.918 --> 00:06:20.851
So if you look at the query I'm doing,
I'm saying, give me all the issues,

110
00:06:20.851 --> 00:06:24.796
give me the user for those issues, and
then give me the issues for that user.

111
00:06:24.796 --> 00:06:30.593
So if I run this, look what I got,
I got the issues, and I got the users for

112
00:06:30.593 --> 00:06:36.511
the issues, and then I got the issues for
the user, and it resolved them.

113
00:06:36.511 --> 00:06:40.725
And then I could say,
give me the user for these issues, for

114
00:06:40.725 --> 00:06:42.675
the user for these issues.

115
00:06:42.675 --> 00:06:43.883
And I could run that.

116
00:06:43.883 --> 00:06:45.815
And what do you know?

117
00:06:45.815 --> 00:06:46.878
That works as well.

118
00:06:46.878 --> 00:06:51.142
This might show you how
powerful GraphQL is, but

119
00:06:51.142 --> 00:06:56.862
it also might make you scared about
how you have this N+1 problem

120
00:06:56.862 --> 00:07:03.315
on the backend where this is recursive
in nature, like where does it end?

121
00:07:03.315 --> 00:07:07.110
If this was a developer API,
like a public-facing API or private,

122
00:07:07.110 --> 00:07:10.051
if it was private but
it was consumed by developers.

123
00:07:10.051 --> 00:07:13.580
And they could, I mean,
they could basically DDoS you, I guess,

124
00:07:13.580 --> 00:07:14.600
if they wanted to.

125
00:07:14.600 --> 00:07:18.185
[LAUGH] Somebody could just write
a really, really long script, a really

126
00:07:18.185 --> 00:07:22.143
long query, just keep it going and then,
how does your server respond to that?

127
00:07:22.143 --> 00:07:24.575
How does it know when to stop?

128
00:07:24.575 --> 00:07:28.745
There is no one way to get past that.

129
00:07:28.745 --> 00:07:33.036
There are many solutions with
trade-offs to help you get past it, but

130
00:07:33.036 --> 00:07:34.789
it's definitely not like.

131
00:07:34.789 --> 00:07:39.396
You still have to write your GraphQL
server in a way that it can resolve this

132
00:07:39.396 --> 00:07:44.077
query, and then you add protections on
top of it to prevent users from doing

133
00:07:44.077 --> 00:07:47.967
things like this,
cuz I could just keep going cuz it's cool.

134
00:07:47.967 --> 00:07:52.653
Give me the issues, give me the user,
give me the issues, give me the user,

135
00:07:52.653 --> 00:07:56.488
give me the issues, give me the user,
and then give me the ID.

136
00:07:56.488 --> 00:08:00.897
I could just do that,
and then let's run it.

137
00:08:00.897 --> 00:08:04.667
You can see it's taking a lot longer now.

138
00:08:04.667 --> 00:08:07.601
I don't know if this is even
gonna resolve, or if it does.

139
00:08:07.601 --> 00:08:14.595
[LAUGH] Yeah, you can see I just broke my
own server pretty much trying to do that.

140
00:08:14.595 --> 00:08:18.421
Let me see if it actually is broken.

141
00:08:18.421 --> 00:08:20.182
I think it's trying.

142
00:08:20.182 --> 00:08:22.292
Well, you see,
that's a huge problem, right?

143
00:08:22.292 --> 00:08:26.818
So some of the solutions
that some people do is,

144
00:08:26.818 --> 00:08:33.619
I've seen people basically give
certain fields weights like scores.

145
00:08:33.619 --> 00:08:37.911
And then what they can do is,
every time there's a new resolver running,

146
00:08:37.911 --> 00:08:42.134
they can count the score so far and
they give the query a maximum score of,

147
00:08:42.134 --> 00:08:43.953
you cannot go over this score.

148
00:08:43.953 --> 00:08:47.236
If that's the case,
you just did too much retrieval.

149
00:08:47.236 --> 00:08:48.544
So it won't allow that to happen.

150
00:08:48.544 --> 00:08:50.096
So sometimes I'll see that.

151
00:08:50.096 --> 00:08:55.008
There's other ways where you can
tap into the AST of the GraphQL and

152
00:08:55.008 --> 00:08:59.140
determine how many levels
deep they might be right now.

153
00:08:59.140 --> 00:09:01.984
And then you can try to
resolve it that way.

154
00:09:01.984 --> 00:09:06.993
There's a lot of ways to get past it, but
like I said, there isn't just one way.

155
00:09:06.993 --> 00:09:09.170
So it can be pretty fragile, but

156
00:09:09.170 --> 00:09:12.971
at the same time you can see just how,
there you go.

157
00:09:12.971 --> 00:09:14.273
It finally timed out.

158
00:09:14.273 --> 00:09:15.800
I was gonna say, did it do it?

159
00:09:15.800 --> 00:09:17.660
No, it finally timed out.

160
00:09:17.660 --> 00:09:21.148
So it gave up on trying to
make that dream happen.

161
00:09:21.148 --> 00:09:23.879
So pretty impressive there.

162
00:09:23.879 --> 00:09:25.504
Any questions?

163
00:09:29.632 --> 00:09:34.555
&gt;&gt; Speaker 1: And I think the thing
that's important to remember here is,

164
00:09:34.555 --> 00:09:35.721
no one wrote.

165
00:09:35.721 --> 00:09:38.291
No one explicitly wrote the queries for
that, this is dynamic.

166
00:09:38.291 --> 00:09:42.336
I'm querying that myself and
the server just has to respond to it.

167
00:09:42.336 --> 00:09:45.879
So it has to be dynamic in
how it handles queries.

168
00:09:45.879 --> 00:09:48.368
So it wasn't written ahead of time,

169
00:09:48.368 --> 00:09:52.718
which is something you would have
to do with any other protocol.

170
00:09:52.718 --> 00:09:53.926
You have to write it ahead of time.

171
00:09:53.926 --> 00:09:58.854
And I think that's the power of using
GraphQL on the frontend is that you

172
00:09:58.854 --> 00:10:03.306
can be dynamic with your queries and
the things that you ask for.

173
00:10:03.306 --> 00:10:07.766
Although in practice what tends
to happen is, for the queries,

174
00:10:07.766 --> 00:10:12.721
one of the big reasons people have
these names here on these queries like

175
00:10:12.721 --> 00:10:17.013
this is so that they can have
these name queries in which they,

176
00:10:17.013 --> 00:10:19.922
I forgot the word that they would call it.

177
00:10:19.922 --> 00:10:25.576
The airman has different words for it,
but it's basically a saved query, whereas

178
00:10:25.576 --> 00:10:30.764
I can register a query on the backend
cuz I'm never gonna change it, right?

179
00:10:30.764 --> 00:10:32.672
Once I forgot my queries from my app,

180
00:10:32.672 --> 00:10:35.638
I'm never gonna change them
again unless it's time to.

181
00:10:35.638 --> 00:10:39.126
They're not gonna be dynamic as if
a developer was hitting my API, and

182
00:10:39.126 --> 00:10:40.380
is changing every time.

183
00:10:40.380 --> 00:10:43.364
But if it's for my app,
I know what the query is, I wrote it.

184
00:10:43.364 --> 00:10:48.195
So therefore, I can just save that
query on the backend somewhere,

185
00:10:48.195 --> 00:10:51.346
and then I can just get
an ID to reference it.

186
00:10:51.346 --> 00:10:53.893
So this is query one,
this is query two, this is query three.

187
00:10:53.893 --> 00:10:57.104
So then I can just go to my API and
like, give me the results for query one,

188
00:10:57.104 --> 00:10:58.220
here are the variables.

189
00:10:58.220 --> 00:11:00.706
Give me the results for query two,
here are the variables.

190
00:11:00.706 --> 00:11:04.511
So there's people who do stuff in
their build pipeline where they

191
00:11:04.511 --> 00:11:07.083
will register their queries and save them.

192
00:11:07.083 --> 00:11:10.336
And that's kinda saves on
the step on the backend

193
00:11:10.336 --> 00:11:15.269
where your GraphQL server needs to
validate your query against a schema.

194
00:11:15.269 --> 00:11:18.482
It bypasses all of that because
you validated it when you saved it

195
00:11:18.482 --> 00:11:19.322
the first time.

196
00:11:19.322 --> 00:11:21.993
So it kinda speeds things up and
it saves your queries, but

197
00:11:21.993 --> 00:11:24.403
it's like a performance
thing that some people do.

198
00:11:24.403 --> 00:11:28.759
But again, you wouldn't do that if you had
a GraphQL API that was developer-facing.

199
00:11:28.759 --> 00:11:30.349
That would only be for,

200
00:11:30.349 --> 00:11:34.333
I know what queries I'm writing
because this is for my app.

201
00:11:34.333 --> 00:11:37.895
Is this called nested queries or
recursive queries?

202
00:11:37.895 --> 00:11:45.003
I don't think it has official term,
I've always referred to it as N+1 queries.

203
00:11:47.083 --> 00:11:51.441
&gt;&gt; Speaker 1: Pretty sure that's
&gt;&gt; Speaker 1: Yeah,

204
00:11:51.441 --> 00:11:54.708
the N+1 query problem performance issue,
yeah.

205
00:11:54.708 --> 00:11:57.258
That's basically how I think
the community refers to it as.

206
00:11:57.258 --> 00:12:01.946
So anytime you go more than
one level deep, and N is like,

207
00:12:01.946 --> 00:12:04.498
how many levels are you going?

208
00:12:04.498 --> 00:12:05.561
You just don't know.

209
00:12:05.561 --> 00:12:08.337
So I think that's what
it's actually called.

210
00:12:08.337 --> 00:12:11.091
But yeah,
you are getting nested data for sure.

211
00:12:11.091 --> 00:12:14.164
It's basically like cyclic data.

212
00:12:14.164 --> 00:12:19.454
If you are referencing a node that
can reference it's parent's node,

213
00:12:19.454 --> 00:12:25.272
then it's like, if you try to log out
with something circular in JavaScript,

214
00:12:25.272 --> 00:12:27.403
can't even think about it.

215
00:12:27.403 --> 00:12:30.461
But if you had a circular object and
you tried to log that out, or

216
00:12:30.461 --> 00:12:32.848
if you try to JSON stringify it,
it won't work.

217
00:12:32.848 --> 00:12:35.321
Because the way Jason stringify works,

218
00:12:35.321 --> 00:12:40.058
it recursively goes through everything,
and it tries to turn into a string.

219
00:12:40.058 --> 00:12:43.609
But if it's recursive, if it's cyclic,
it can't, it doesn't know when to stop.

220
00:12:43.609 --> 00:12:46.200
So you'll get a error saying,
cannot stringify,

221
00:12:46.200 --> 00:12:47.894
this object is cyclic in nature.

222
00:12:47.894 --> 00:12:51.264
It's the same problem,
it doesn't know when to stop.

223
00:12:51.264 --> 00:12:55.295
And because now you're not just playing
with some one CPU, stringifying it,

224
00:12:55.295 --> 00:12:59.144
you're playing with database resources or
whatever your data source is,

225
00:12:59.144 --> 00:13:00.440
it's quite expensive.

226
00:13:00.440 --> 00:13:03.913
As you can see, I literally killed
my server on just that one call,

227
00:13:03.913 --> 00:13:06.592
imagine a team of people
doing that to your server.

228
00:13:06.592 --> 00:13:09.084
It would come crashing down instantly, so.

