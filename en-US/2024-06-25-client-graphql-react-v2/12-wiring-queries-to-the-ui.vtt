WEBVTT

1
00:00:00.570 --> 00:00:03.650
&gt;&gt; Scott Moss: Okay, so now what we
need to do is need to make this work.

2
00:00:03.650 --> 00:00:07.540
So if you click create issue or
New Issue, this modal comes up.

3
00:00:07.540 --> 00:00:11.230
You can type in an issue,
a description, and click this button.

4
00:00:11.230 --> 00:00:13.596
And not only do we wanna create an issue,

5
00:00:13.596 --> 00:00:16.250
we want it to show up on
the page immediately.

6
00:00:16.250 --> 00:00:18.730
And there's a lot of ways you can do that.

7
00:00:18.730 --> 00:00:21.163
Some of them are very library specific,
and

8
00:00:21.163 --> 00:00:25.306
I wasn't gonna do it that approach cuz
maybe production you would do that,

9
00:00:25.306 --> 00:00:29.910
but also it's so specific to the library
that I don't think it's worth showing cuz

10
00:00:29.910 --> 00:00:33.975
you can pick whatever library you want and
they're all very different.

11
00:00:33.975 --> 00:00:37.285
So I'm gonna show you how to
do it outside of the library.

12
00:00:37.285 --> 00:00:40.667
I think just knowing the mentality around,
how this is working,

13
00:00:40.667 --> 00:00:44.122
is more useful than walking through
how the framework would do it.

14
00:00:44.122 --> 00:00:47.246
But I could also walk through
the framework example as well,

15
00:00:47.246 --> 00:00:50.062
just to kinda show you
what it would be like.

16
00:00:50.062 --> 00:00:51.532
But it's basically just like Redux.

17
00:00:51.532 --> 00:00:54.982
It's you either do the Redux way with
the framework, in this case, @urql, or

18
00:00:54.982 --> 00:00:58.612
you just refresh the whole query,
which is something React query would do.

19
00:00:58.612 --> 00:01:04.418
So we're gonna go to that approach, which
I think is much simpler because otherwise

20
00:01:04.418 --> 00:01:09.819
you gotta understand normalized caching
and local doing graphical queries on

21
00:01:09.819 --> 00:01:15.417
local data versus doing graphical queries
on remote data is quite complicated.

22
00:01:15.417 --> 00:01:18.167
So I kinda avoided it 'cause I
think it's a little more advanced.

23
00:01:19.327 --> 00:01:22.062
But anyway,
let's go make the create habit.

24
00:01:22.062 --> 00:01:25.931
Before I do that, I'm gonna push
this up so people can have this so.

25
00:01:31.530 --> 00:01:36.932
&gt;&gt; Scott Moss: Say, stash,
gIt checkouts clients.

26
00:01:52.553 --> 00:01:55.465
&gt;&gt; Scott Moss: Okay, so
this will be on client /2,

27
00:01:55.465 --> 00:02:00.433
if you want to kinda see what I was doing,
if kick off from there.

28
00:02:00.433 --> 00:02:03.677
I'm just gonna go ahead and make a new
branch right now, before I forget.

29
00:02:06.800 --> 00:02:08.956
&gt;&gt; Scott Moss: All right, so
now we're on client/3, and

30
00:02:08.956 --> 00:02:12.723
here we're gonna allow this onCreate
to actually work, so let's go do that.

31
00:02:12.723 --> 00:02:20.296
So I'm gonna go to our notes just to make
sure I'm staying on track with that.

32
00:02:23.420 --> 00:02:27.520
&gt;&gt; Scott Moss: So for create issue,
we already did the mutation before.

33
00:02:27.520 --> 00:02:30.944
So it's mostly what we did before
with the create user except we

34
00:02:30.944 --> 00:02:33.080
have a create issue mutation.

35
00:02:33.080 --> 00:02:37.360
We know how the inputs work,
we know how to do all of that.

36
00:02:37.360 --> 00:02:41.648
So we mostly just gonna do that and
then tie that back into the same page,

37
00:02:41.648 --> 00:02:44.149
we were just on for
the onCreate method and

38
00:02:44.149 --> 00:02:47.375
everything should just be
hooked up already for you.

39
00:02:47.375 --> 00:02:50.705
We just got to figure out
where did those things tie in?

40
00:02:50.705 --> 00:02:54.460
And then more importantly,
the last part is, we created it, but

41
00:02:54.460 --> 00:02:57.915
we'll have to refresh
the page to see the new data.

42
00:02:57.915 --> 00:03:01.817
So how do we get the data on the page
without having to refresh the page,

43
00:03:01.817 --> 00:03:03.600
which it would be kinda bad.

44
00:03:03.600 --> 00:03:05.510
So let's do that.

45
00:03:05.510 --> 00:03:08.848
So like always,
I'm gonna go to my Apollo server,

46
00:03:08.848 --> 00:03:13.352
I'm gonna clear this out,
&gt;&gt; Scott Moss: And

47
00:03:13.352 --> 00:03:16.440
I'm gonna use the mutation.

48
00:03:16.440 --> 00:03:21.640
I'm gonna click +,
I'm gonna click createIssue,

49
00:03:21.640 --> 00:03:24.997
let me see, I need the id for sure.

50
00:03:24.997 --> 00:03:28.517
I need the name, I need the status,
and I need the content.

51
00:03:28.517 --> 00:03:30.497
I'm gonna go ahead and get all of those.

52
00:03:30.497 --> 00:03:32.513
Probably don't even really
need the content, actually,

53
00:03:32.513 --> 00:03:34.707
just those three are probably fine.

54
00:03:34.707 --> 00:03:39.221
And as far as the arguments, I'm gonna
click here and I'm gonna say yes.

55
00:03:39.221 --> 00:03:43.701
I want to be able to pass in content and
name those are required.

56
00:03:43.701 --> 00:03:47.601
And then you don't have to pass
in the status cuz it defaults.

57
00:03:47.601 --> 00:03:50.331
It defaults to one so
you don't have to do it so that's fine.

58
00:03:50.331 --> 00:03:53.850
So we're good there,

59
00:03:53.850 --> 00:03:58.488
get rid of this, there we go.

60
00:04:00.546 --> 00:04:06.304
&gt;&gt; Scott Moss: And I'm just gonna
copy this, but first I'm gonna rename

61
00:04:06.304 --> 00:04:12.077
this from mutation to CreateIssueMutation,
like this.

62
00:04:12.077 --> 00:04:18.947
So I'm gonna copy that.

63
00:04:21.010 --> 00:04:23.626
&gt;&gt; Scott Moss: And
then now I'm gonna go into our gql file,

64
00:04:23.626 --> 00:04:25.262
gonna make a new file here.

65
00:04:26.442 --> 00:04:32.562
And I'm gonna call it
createIssueMutation.ts.

66
00:04:32.562 --> 00:04:37.934
And we're gonna do the same thing we've

67
00:04:37.934 --> 00:04:43.629
been doing from @urql/next, GraphQL.

68
00:04:44.879 --> 00:04:50.515
&gt;&gt; Scott Moss: export
const CreateIssueMutation

69
00:04:50.515 --> 00:04:54.839
= gql`, and paste that.

70
00:05:04.510 --> 00:05:09.492
&gt;&gt; Scott Moss: All right, so there we go,
got my mutation ready to go.

71
00:05:09.492 --> 00:05:13.440
All I have to do is import it and
use it inside of our page,

72
00:05:13.440 --> 00:05:16.722
which is gonna be an app
dashboard page.tsx.

73
00:05:16.722 --> 00:05:19.743
So let's go back there,
we're gonna import it here.

74
00:05:23.217 --> 00:05:31.735
&gt;&gt; Scott Moss: @gql, I'll just say
CreateIssueMutation there we go.

75
00:05:31.735 --> 00:05:35.195
So we got that,
we already have useMutation at the top.

76
00:05:35.195 --> 00:05:38.594
If you don't import that from @urql/next,
get the useMutation,

77
00:05:42.809 --> 00:05:45.457
&gt;&gt; Scott Moss: Underneath I'm just gonna

78
00:05:45.457 --> 00:05:52.603
say, = useMutation(CreateIssuedMutation)
here for the mutation.

79
00:05:53.743 --> 00:05:57.357
We're probably not gonna use these
results, so I'm gonna give it a name.

80
00:05:57.357 --> 00:06:04.400
createResults, and then this is
the actual creatIssue function.

81
00:06:10.543 --> 00:06:14.599
&gt;&gt; Scott Moss: Okay, so,
a couple things we wanna do here.

82
00:06:14.599 --> 00:06:17.979
I think I have the notes for exactly what,
I'll make sure I follow that.

83
00:06:19.089 --> 00:06:22.041
First we wanna make the call
to create the issue,

84
00:06:22.041 --> 00:06:26.649
I wanna make sure we pass in the
issueName, that's here bound to this date,

85
00:06:26.649 --> 00:06:30.965
passing the IssueDescription
that's bound to this date.

86
00:06:30.965 --> 00:06:34.773
And then if it does not error out,
we then want to close the modal and

87
00:06:34.773 --> 00:06:36.625
every set those dates.

88
00:06:36.625 --> 00:06:40.980
And then eventually we will need to
figure out how to refresh everything, so

89
00:06:40.980 --> 00:06:42.213
well let's do that.

90
00:06:44.123 --> 00:06:45.953
So I'll say data.

91
00:06:45.953 --> 00:06:48.303
All right, what about color here?

92
00:06:48.303 --> 00:06:51.324
Result, I'll just call it result,
otherwise it's data.data.

93
00:06:51.324 --> 00:06:55.273
That's gotta = createIssue.

94
00:06:55.273 --> 00:06:58.473
We have that, we know we can pass in
a name, which is gonna be issueName.

95
00:07:00.673 --> 00:07:07.270
We can pass in the content,
which gonna be issueDescription like that.

96
00:07:07.270 --> 00:07:11.880
And then I can say if (result.data),

97
00:07:11.880 --> 00:07:17.846
I can say close the modal,
which is passed in here and

98
00:07:17.846 --> 00:07:21.110
then just reset the states.

99
00:07:22.924 --> 00:07:27.662
setIssueName(` `) and

100
00:07:27.662 --> 00:07:33.638
setIssueDescription(` `).

101
00:07:38.794 --> 00:07:41.073
&gt;&gt; Scott Moss: Okay,
everything else should be hooked up.

102
00:07:41.073 --> 00:07:47.361
[COUGH] Let me double check, yeah,
onCreate is here, looks good.

103
00:07:47.361 --> 00:07:49.696
Let's give it a try, so
if I go back to the browser.

104
00:07:54.906 --> 00:07:58.831
&gt;&gt; Scott Moss: Refresh this,
if I click new issue,

105
00:07:58.831 --> 00:08:04.274
if I click New Issue give it a issue,
I don't know,

106
00:08:04.274 --> 00:08:09.112
clean my hoodies that I
got Cheetos all over.

107
00:08:09.112 --> 00:08:12.338
[LAUGH]

108
00:08:16.738 --> 00:08:19.214
&gt;&gt; Scott Moss: I need to wash them,

109
00:08:19.214 --> 00:08:26.073
I can click Create Issue,
and we'll see what happens.

110
00:08:26.073 --> 00:08:28.875
Either it error or
nothing happened, let's see.

111
00:08:28.875 --> 00:08:31.645
Let's try this again, I don't see
an error, so I'm gonna try this again.

112
00:08:31.645 --> 00:08:35.419
Create Issue, here we go.

113
00:08:35.419 --> 00:08:38.255
Okay, so it says, variable input.

114
00:08:38.255 --> 00:08:42.675
So I forgot to call
the actual variable input.

115
00:08:42.675 --> 00:08:44.322
It's very strict, right?

116
00:08:44.322 --> 00:08:46.012
So I just put an object in here like this,
right?

117
00:08:46.012 --> 00:08:48.922
But really what it wants, it wants this.

118
00:08:48.922 --> 00:08:51.194
It wants input, and
then it wants an object.

119
00:08:54.456 --> 00:08:55.952
&gt;&gt; Scott Moss: But you see,
it still gave me a 200, right?

120
00:08:57.412 --> 00:08:59.902
So you have to look at the error messages,
right?

121
00:08:59.902 --> 00:09:04.035
And in a realistic app, what I would
have done, let's just go back,

122
00:09:04.035 --> 00:09:05.919
let's put this back here.

123
00:09:05.919 --> 00:09:07.469
What you would do is you would do this,
right?

124
00:09:07.469 --> 00:09:13.949
You say, if (result.error) and
then I can see that here.

125
00:09:13.949 --> 00:09:20.749
So I would say console.log, or
console.error (result.error).

126
00:09:20.749 --> 00:09:23.704
So let's do that, run that back.

127
00:09:23.704 --> 00:09:27.944
Go to the Console, and
then here you go, I have it right here.

128
00:09:27.944 --> 00:09:31.744
Variable input of required type
CreateissueInput was not provided.

129
00:09:31.744 --> 00:09:35.134
It's pretty damn specific
about what you messed up on.

130
00:09:35.134 --> 00:09:37.904
You can't miss it, it's there.

131
00:09:37.904 --> 00:09:40.304
So that's what I like about it.

132
00:09:40.304 --> 00:09:42.784
I know you guys didn't write the server,
but I wrote the server.

133
00:09:42.784 --> 00:09:48.882
I didn't have to write that code, that's
given to me for free, that error message,

134
00:09:48.882 --> 00:09:54.153
that type checking is done for
free because that's what the schema says.

135
00:09:54.153 --> 00:09:57.623
So, I didn't show you guys the schema cuz
you don't really need to see the schema.

136
00:09:57.623 --> 00:10:00.689
And when you're working
on client side only,

137
00:10:00.689 --> 00:10:05.812
you can't do anything with the schema,
but you can explore the schema here.

138
00:10:05.812 --> 00:10:11.269
Obviously, this is what this is for,
but if you click here,

139
00:10:11.269 --> 00:10:17.162
it will actually show you the entire
schema for your API, right?

140
00:10:17.162 --> 00:10:19.062
So here's the actual schema.

141
00:10:19.062 --> 00:10:23.216
Here's the fields on the queries,
I can get all the issues,

142
00:10:23.216 --> 00:10:28.954
I can get this current user if I click
on mutation you see I have five of them.

143
00:10:28.954 --> 00:10:32.236
I can create an issue that
returns the issue type and

144
00:10:32.236 --> 00:10:36.889
create a user returns a user type,
I could delete an issue returns an ID,

145
00:10:36.889 --> 00:10:41.074
edit, signin all these everything so
here's the schema.

146
00:10:41.074 --> 00:10:45.637
So you can take a look at this to get
an idea, what it is you need to do.

147
00:10:45.637 --> 00:10:51.687
So for me, I just did the mutation on or
I did the query on issues.

148
00:10:51.687 --> 00:10:58.037
I could clearly see that,
this thing has an issue input.

149
00:10:58.037 --> 00:11:01.327
So I can see here that,
this is what it's requiring.

150
00:11:01.327 --> 00:11:04.276
So I don't have to guess, there isn't
a lot of guessing here, is go here, and

151
00:11:04.276 --> 00:11:05.364
you can kinda figure it out.

152
00:11:05.364 --> 00:11:09.424
If you wanna see what it actually looks
like in code, this is what it looks like.

153
00:11:09.424 --> 00:11:12.504
So on the server, if you take the server
side cores, you'll be making this.

154
00:11:12.504 --> 00:11:15.547
This is the actual GraphQL schema and

155
00:11:15.547 --> 00:11:20.074
the syntax that it uses to
actually create the schema.

156
00:11:20.074 --> 00:11:22.092
What is it called?

157
00:11:22.092 --> 00:11:26.206
There's the SDL query.

158
00:11:26.206 --> 00:11:31.816
I don't know there's a word for it,
acronym for it, for the GraphQL schema.

159
00:11:31.816 --> 00:11:33.719
I just call it the GraphQL schema, but

160
00:11:33.719 --> 00:11:36.646
I think it's called the SDL
schema definition language.

161
00:11:36.646 --> 00:11:40.766
I'm pretty sure that's what it's called,
but nobody calls it that.

162
00:11:40.766 --> 00:11:41.966
It's just a GraphQL schema.

163
00:11:43.446 --> 00:11:44.956
So, yeah, you can look at that.

164
00:11:44.956 --> 00:11:49.444
But if you wanted to see it in a code,
it's here, you can go to schema.ts,

165
00:11:49.444 --> 00:11:53.526
go to the one that's on GraphQL,
not the one on DB, and it's here.

166
00:11:53.526 --> 00:11:54.934
You can see it, it's a GraphQL schema.

167
00:11:57.544 --> 00:11:58.626
&gt;&gt; Scott Moss: That way
you can kind of see.

168
00:11:58.626 --> 00:12:03.352
So if I go and look at the issues
query again, you can see query issues,

169
00:12:03.352 --> 00:12:05.346
it takes input.

170
00:12:05.346 --> 00:12:08.766
It needs an object with the input
field and its type is this.

171
00:12:08.766 --> 00:12:10.776
I didn't give it an input field,
I just gave it this type.

172
00:12:12.016 --> 00:12:14.436
So it has to be an input field,
that's what it's saying, right?

173
00:12:14.436 --> 00:12:20.351
If you go back and read that error
&gt;&gt; Scott Moss: It says variable $input of

174
00:12:20.351 --> 00:12:26.788
required type, CreateIssueInput, was not
I'm sorry, I'm looking at the wrong query.

175
00:12:26.788 --> 00:12:28.468
It needs to be created, here we go.

176
00:12:28.468 --> 00:12:34.668
So this input is, it's got an exclamation,
so it's not null.

177
00:12:34.668 --> 00:12:40.298
You have to pass it, if you don't
pass this input it won't execute.

178
00:12:40.298 --> 00:12:42.833
It won't even run your code on
the back end, this has to pass.

179
00:12:42.833 --> 00:12:46.771
So what it's saying is,
$input of required type

180
00:12:46.771 --> 00:12:51.195
CreateIssueInput was not provided or
$input is this.

181
00:12:51.195 --> 00:12:54.562
It's saying you didn't provide this and
it's required.

182
00:12:57.281 --> 00:12:59.320
&gt;&gt; Scott Moss: So
that's what it's saying, but

183
00:12:59.320 --> 00:13:03.630
all of that is just show you how you
can look at the schema through Apollo.

184
00:13:03.630 --> 00:13:07.021
Even if it's API that you didn't make,

185
00:13:07.021 --> 00:13:12.925
you obviously you can't go and
look at the schema like I just did here.

186
00:13:14.135 --> 00:13:17.306
But if you use Apollo Studio or
anything like this,

187
00:13:17.306 --> 00:13:21.216
it'll do introspection on the schema and
it'll pull it down,

188
00:13:21.216 --> 00:13:24.345
it basically will create documentation for
you.

189
00:13:24.345 --> 00:13:25.292
This what this is, right?

190
00:13:25.292 --> 00:13:28.312
It's creating documentation for
you off the GraphQL schema.

191
00:13:28.312 --> 00:13:33.472
So you can see you can put any GraphQL
url here, as long as it's public or

192
00:13:33.472 --> 00:13:37.858
if you have any headers,
you have to pass it get access to it,

193
00:13:37.858 --> 00:13:42.022
as long as that API has
introspection enabled.

194
00:13:42.022 --> 00:13:45.522
It will send down all of its types and
objects and everything like that, so

195
00:13:45.522 --> 00:13:47.503
the tooling can support it and create it.

196
00:13:47.503 --> 00:13:52.363
So this gets into something really cool
which is called GraphQL Federation,

197
00:13:52.363 --> 00:13:57.822
where GraphQL API's can talk to each other
and understand each other by introspecting

198
00:13:57.822 --> 00:14:03.423
to each other, and stitch schemas
together to create one federated schema.

199
00:14:03.423 --> 00:14:05.389
Backend, there's a whole other world.

200
00:14:05.389 --> 00:14:07.459
Frontend is just, all right,
query language, that's cool.

201
00:14:07.459 --> 00:14:11.509
Backend, it's a graph,
it's literally a graph.

202
00:14:11.509 --> 00:14:16.989
So it gets kind of crazy, but
sorry that's that's my little tangent.

203
00:14:19.119 --> 00:14:25.399
Let's get back to it, so fix this issue
by just putting this in another object,

204
00:14:25.399 --> 00:14:31.558
objects called inputs and doing that,
so hopefully that fixes that.

205
00:14:31.558 --> 00:14:35.908
And let's try this again, so now I'm gonna
go here, I'm gonna click Create Issue.

206
00:14:35.908 --> 00:14:39.273
This time it didn't create the issue, but
as you can see, we wouldn't know that,

207
00:14:39.273 --> 00:14:40.588
it doesn't show up on the page.

208
00:14:40.588 --> 00:14:44.248
But if I hit refresh, there it is.

209
00:14:44.248 --> 00:14:47.459
It does show up because we
already wrote the query for this,

210
00:14:47.459 --> 00:14:51.186
way we're gonna run the query that
does this and it the query runs when

211
00:14:51.186 --> 00:14:54.744
the page renders and refresh
triggers a render, so it showed up.

