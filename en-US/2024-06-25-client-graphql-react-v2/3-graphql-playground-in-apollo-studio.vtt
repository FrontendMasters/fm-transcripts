WEBVTT

1
00:00:00.960 --> 00:00:03.270
&gt;&gt; Scott Moss: And what we're gonna do now
is we're gonna hop into the playground.

2
00:00:03.270 --> 00:00:06.238
So I have a link here for
this Star Wars API,

3
00:00:06.238 --> 00:00:09.300
it's like the classic go to GraphQL thing.

4
00:00:09.300 --> 00:00:13.260
So click on that, join me here,
it's gonna load up this app.

5
00:00:13.260 --> 00:00:15.190
This app is, well,
actually it's gonna load this web page.

6
00:00:15.190 --> 00:00:18.730
And then there's a button that says,
run and explore, and that's the app.

7
00:00:18.730 --> 00:00:20.821
But if you read the docs here,
it just kinda talks about,

8
00:00:20.821 --> 00:00:22.979
what is this thing that
you're about to see?

9
00:00:22.979 --> 00:00:26.723
It's a GraphQL API, for
all Star Wars movies and references and

10
00:00:26.723 --> 00:00:29.439
things like that, that somebody maintains.

11
00:00:29.439 --> 00:00:31.919
It's read only, so you can't write to it.

12
00:00:31.919 --> 00:00:35.507
But the cool thing is that it's
loaded up in this app right here,

13
00:00:35.507 --> 00:00:38.909
which is called,
they've remade this thing so many times.

14
00:00:38.909 --> 00:00:42.659
I think it's called Apollo Studio now,
used to be called graphical and

15
00:00:42.659 --> 00:00:44.168
it was GraphQL playground.

16
00:00:44.168 --> 00:00:47.848
And now I think it's Apollo studio at RSC,
I can't keep up.

17
00:00:47.848 --> 00:00:50.486
But this is really cool
because the community can

18
00:00:50.486 --> 00:00:54.388
create tools like this because
your GraphQL API is type check.

19
00:00:54.388 --> 00:00:58.530
So this tool can run an inference on your
server to figure out all the possible

20
00:00:58.530 --> 00:01:02.479
types, all the possible queries,
what is possible from this GraphQL,

21
00:01:02.479 --> 00:01:04.961
and then it could build tooling around it.

22
00:01:04.961 --> 00:01:06.001
And that's what this app is.

23
00:01:06.001 --> 00:01:09.013
This app is like,
if you ever use Postman or

24
00:01:09.013 --> 00:01:14.971
insomnia to issue HTTP requests,
it's the graphical equivalent of that.

25
00:01:14.971 --> 00:01:19.241
This is how you would, it's like an HTTP
client GUI for your graphical server.

26
00:01:19.241 --> 00:01:22.294
So this one is in front
of the store server.

27
00:01:22.294 --> 00:01:24.992
So what we're gonna do is, we're gonna
play around a little bit with some of

28
00:01:24.992 --> 00:01:27.194
the things that we learned just so
you can get a feel of it.

29
00:01:27.194 --> 00:01:28.784
There's two ways to interact with this.

30
00:01:28.784 --> 00:01:30.900
You can just come in here and
write your queries from scratch,

31
00:01:30.900 --> 00:01:32.004
if you know what you're doing.

32
00:01:32.004 --> 00:01:36.414
It is type checked, so as I start typing,
you can see I get autocomplete.

33
00:01:36.414 --> 00:01:38.474
Again, type safety all the way down.

34
00:01:38.474 --> 00:01:40.066
That's the sweet thing about GraphQL.

35
00:01:40.066 --> 00:01:43.738
So you can do that if you're a boss but if
you don't know what this API is doing, or

36
00:01:43.738 --> 00:01:46.546
you need to explore it a little more,
you can come over here and

37
00:01:46.546 --> 00:01:47.966
mess around with these types.

38
00:01:47.966 --> 00:01:50.073
So you can see here we have
a root type called query,

39
00:01:50.073 --> 00:01:52.041
you don't really need to
know what that means.

40
00:01:52.041 --> 00:01:55.868
It just means that, you can think of
query as things that you can get.

41
00:01:55.868 --> 00:01:57.746
So you can think of these
as give requests, right?

42
00:01:57.746 --> 00:01:59.186
So I'm gonna click on query,

43
00:01:59.186 --> 00:02:01.963
and then these are all the possible
queries that I can do.

44
00:02:01.963 --> 00:02:05.314
So I can do allFilms,
allPeople, allPlanets,

45
00:02:05.314 --> 00:02:09.873
a specific film, a specific person,
a specific planet.

46
00:02:09.873 --> 00:02:10.913
I'm gonna do all films.

47
00:02:10.913 --> 00:02:14.443
So what I can do is I can click this +
button and it's gonna add it for me.

48
00:02:14.443 --> 00:02:17.523
As soon as I click the + button,
it adds the code for me.

49
00:02:17.523 --> 00:02:21.506
And then I wanna break this down a little
bit about what you see right here on

50
00:02:21.506 --> 00:02:22.789
the right.

51
00:02:22.789 --> 00:02:25.837
So what you see on the right,
this first part right here,

52
00:02:25.837 --> 00:02:28.039
this wasn't in my example in the notes.

53
00:02:28.039 --> 00:02:32.909
This is naming your query,
this is giving your query a name.

54
00:02:32.909 --> 00:02:34.889
You can you can put whatever
name you want here.

55
00:02:34.889 --> 00:02:38.381
This part doesn't matter,
it's like when you create a function.

56
00:02:38.381 --> 00:02:42.090
You can give your function whatever name
you want, it doesn't change how it works,

57
00:02:42.090 --> 00:02:43.551
it's just a name, right?

58
00:02:43.551 --> 00:02:45.311
So this is me naming the query.

59
00:02:45.311 --> 00:02:50.321
It has a different purpose, but
it doesn't actually change the behavior.

60
00:02:50.321 --> 00:02:55.006
The actual query itself is this part,
this part actually does matter

61
00:02:55.006 --> 00:03:00.197
because it is the name of the actual
Query called AllFilms, this part here.

62
00:03:01.387 --> 00:03:02.842
But this part appears is,

63
00:03:02.842 --> 00:03:07.417
it is the difference between an anonymous
function or not an anonymous function.

64
00:03:07.417 --> 00:03:09.727
I'm actually giving this function a name.

65
00:03:09.727 --> 00:03:13.117
But this is the actual query that runs,
so I have that,

66
00:03:13.117 --> 00:03:15.717
there's some optional arguments here.

67
00:03:15.717 --> 00:03:20.442
So if you wanna do some,
looks like pagination, probably.

68
00:03:20.442 --> 00:03:23.202
I don't want any of those,
I'm just gonna go straight to Fields.

69
00:03:23.202 --> 00:03:26.762
So these fields are the things
that I wanna get back.

70
00:03:26.762 --> 00:03:29.982
I'm gonna click on films,
that's an array of films.

71
00:03:31.382 --> 00:03:36.582
And then for each film, I wanna get back,
when it was created, the director.

72
00:03:38.411 --> 00:03:43.953
The id, the title obviously,
we need to know what it is,

73
00:03:43.953 --> 00:03:47.421
and all the other producers for it.

74
00:03:47.421 --> 00:03:51.343
So once I do that, I can click
this button, AllFilms, okay and

75
00:03:51.343 --> 00:03:54.821
after running that query,
you get all the films here and

76
00:03:54.821 --> 00:03:58.835
as you can see they have the appropriate
fields that I asked for.

77
00:03:58.835 --> 00:04:04.535
So we have an id, we have a director,
we have a list of producers.

78
00:04:04.535 --> 00:04:08.465
And I know it's a list because you can see
right here it's an array of string types.

79
00:04:08.465 --> 00:04:11.845
It says it right here, and
then we have the title of course, so

80
00:04:11.845 --> 00:04:14.445
we can see what the actual
name of that movie is.

81
00:04:14.445 --> 00:04:18.275
And then because I didn't do any other
arguments, it should literally be

82
00:04:18.275 --> 00:04:22.983
all the films, which are just six of them,
should just be six Star Wars films here.

83
00:04:22.983 --> 00:04:26.663
So what I wanna do now is demonstrate
how arguments might work, right?

84
00:04:26.663 --> 00:04:30.083
So what I can do is, I can take,
let's just take this id right here,

85
00:04:30.083 --> 00:04:31.763
this id of this movie right here.

86
00:04:31.763 --> 00:04:34.933
This is for A New Hope,
so I'm gonna take that.

87
00:04:34.933 --> 00:04:39.287
And I'm gonna go back
to our operation here.

88
00:04:39.287 --> 00:04:45.297
And I don't want to use
this query anymore.

89
00:04:45.297 --> 00:04:48.627
So I'm gonna go back and
get a different query.

90
00:04:48.627 --> 00:04:53.047
So let me shrink this a little bit,
there we go.

91
00:04:53.047 --> 00:04:58.091
I'm gonna remove this, go back.

92
00:04:58.091 --> 00:05:01.851
Go back, and
then I'm gonna go to just a single film.

93
00:05:01.851 --> 00:05:05.711
So if I click on, well, first remove
that one, and then go to single film.

94
00:05:05.711 --> 00:05:07.321
Now I have a single film.

95
00:05:07.321 --> 00:05:10.571
If I look at it,
you can see it takes a film ID and an ID.

96
00:05:10.571 --> 00:05:13.601
They're both optional, because they
don't have an exclamation mark.

97
00:05:13.601 --> 00:05:17.428
I'm just gonna assume that the ID that
I copied from here is gonna be film,

98
00:05:17.428 --> 00:05:18.736
or it's gonna be the ID.

99
00:05:18.736 --> 00:05:25.008
So I'm just gonna select that, you can
see that it added this funky syntax.

100
00:05:25.008 --> 00:05:27.140
I'll dive into this a lot
throughout the course.

101
00:05:27.140 --> 00:05:33.350
But the best way I can describe this is,
I am creating a argument for a function.

102
00:05:33.350 --> 00:05:37.634
I'm calling it film id, and I know that
because there's a $ sign in front of it,

103
00:05:37.634 --> 00:05:41.288
and then I'm passing that argument
into this function called film,

104
00:05:41.288 --> 00:05:42.416
whose value is id.

105
00:05:42.416 --> 00:05:46.386
So, the best way I can describe it, but
again, we'll dive more into it later.

106
00:05:46.386 --> 00:05:47.486
And I'm just gonna get the same thing.

107
00:05:47.486 --> 00:05:50.286
I want a title, I want the id
just to make sure it's the same.

108
00:05:50.286 --> 00:05:54.046
Look at the director, and
then where are the producers?

109
00:05:54.046 --> 00:05:55.676
There we go, there are the producers.

110
00:05:55.676 --> 00:05:56.903
So I can do that, and

111
00:05:56.903 --> 00:06:00.803
then I just need to make sure I
pass in that variable down here, so

112
00:06:00.803 --> 00:06:06.285
it's by the same name, filmid here, is the
same name as the variable up here, filmid.

113
00:06:06.285 --> 00:06:12.027
So I'm gonna do that, passing that id that
I copied, get rid of that double string.

114
00:06:12.027 --> 00:06:16.455
And if I run this, I should get
back the film with that same id.

115
00:06:16.455 --> 00:06:18.819
It's New Hope,
just like we said in the director and

116
00:06:18.819 --> 00:06:20.981
the producers with those same fields,
right?

117
00:06:20.981 --> 00:06:22.769
So if I delete those two fields and
run it,

118
00:06:22.769 --> 00:06:25.831
you can see that it also
deletes those fields as well.

119
00:06:25.831 --> 00:06:26.521
Yes, Mark.

120
00:06:28.161 --> 00:06:32.484
&gt;&gt; Mark: Is your data's type system
the same as the database type system or

121
00:06:32.484 --> 00:06:34.611
just a server type system?

122
00:06:34.611 --> 00:06:35.401
&gt;&gt; Scott Moss: That's a great question.

123
00:06:35.401 --> 00:06:38.527
So the question was,
is the data's type system for

124
00:06:38.527 --> 00:06:43.613
GraphQL the same as the database type
system or is that just for the server?

125
00:06:43.613 --> 00:06:50.283
That is up to you, I don't think that has
anything to do with GraphQL specifically.

126
00:06:50.283 --> 00:06:54.313
I think that just has to do with what
you wanna expose to your clients.

127
00:06:54.313 --> 00:06:58.839
For instance, I might have on my schema
something called password, which we do in

128
00:06:58.839 --> 00:07:03.984
this app, but that doesn't mean I want the
client to be able to query for a password.

129
00:07:03.984 --> 00:07:06.681
So it's like,
I won't map everything one for one,

130
00:07:06.681 --> 00:07:09.438
from my database schema to
what I show my clients, and

131
00:07:09.438 --> 00:07:14.234
that's independent of GraphQL that could
be with rest, that can be with anything.

132
00:07:14.234 --> 00:07:16.887
So I would say for the most part,

133
00:07:16.887 --> 00:07:22.197
your GraphQL schema does heavily
follow your database schema,

134
00:07:22.197 --> 00:07:27.822
because most apps do, but
you will have differences between them.

135
00:07:27.822 --> 00:07:31.892
There are some fields that are private,
some fields need to be transformed,

136
00:07:31.892 --> 00:07:35.332
some fields get combined,
some fields get renamed.

137
00:07:35.332 --> 00:07:37.621
Maybe it's called some weird
thing in a database, but

138
00:07:37.621 --> 00:07:40.131
in GraphQL you don't want it
to be called that weird thing.

139
00:07:40.131 --> 00:07:42.671
You want it to be not snake case.

140
00:07:42.671 --> 00:07:47.081
You want it to be camel case or you remap
the name, so it doesn't have to but

141
00:07:47.081 --> 00:07:51.471
it is heavily inspired by your
actual database schema, for sure.

142
00:07:51.471 --> 00:07:53.093
But the other thing is,

143
00:07:53.093 --> 00:07:57.816
GraphQL doesn't only have to talk
to your database or any database.

144
00:07:57.816 --> 00:08:02.732
It can actually talk to any other service,
it can talk to another GraphQL server,

145
00:08:02.732 --> 00:08:07.000
it can talk to stripe, it can talk
to another API hosted anywhere.

146
00:08:07.000 --> 00:08:08.510
So it's not always a database.

147
00:08:08.510 --> 00:08:12.590
So you won't always know the shape of
something because the thing you might be

148
00:08:12.590 --> 00:08:16.540
getting data from is a third party
source that you didn't create.

149
00:08:16.540 --> 00:08:20.676
So it's not always gonna be one for one,
but in the case of a database, yeah,

150
00:08:20.676 --> 00:08:23.876
it's heavily gonna follow
your schema until it doesn't.

