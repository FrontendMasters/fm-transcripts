WEBVTT

1
00:00:00.068 --> 00:00:05.373
&gt;&gt; Speaker 1: If you already know how to
do mutations, which you should we have

2
00:00:05.373 --> 00:00:11.283
a lot of examples, then this one is
pretty much the same thing, right?

3
00:00:11.283 --> 00:00:13.019
We just we need to
figure out our mutation.

4
00:00:13.019 --> 00:00:16.469
We have one called edit issue, we're
gonna use it, we're gonna create it, and

5
00:00:16.469 --> 00:00:19.036
then we're gonna go into
the component in which it exists.

6
00:00:19.036 --> 00:00:20.441
We're gonna put it in there.

7
00:00:20.441 --> 00:00:24.316
And we're gonna edit our issues, but

8
00:00:24.316 --> 00:00:31.716
we also want this change to be reflected
whenever you click edit issues.

9
00:00:31.716 --> 00:00:34.978
So we'll have to see if we
need to do something, or

10
00:00:34.978 --> 00:00:37.477
maybe it might be done for us for free.

11
00:00:37.477 --> 00:00:39.075
And if it is, I'll tell you why.

12
00:00:39.075 --> 00:00:43.625
If not, we'll fix it we're gonna say
EditIssueMutation, and we're gonna go and

13
00:00:43.625 --> 00:00:44.865
pass on our mutation.

14
00:00:44.865 --> 00:00:48.399
I'm not gonna copy from notion
because they have tabs apparently.

15
00:00:48.399 --> 00:00:52.357
And instead I'm gonna go
here to Apollo studio.

16
00:00:52.357 --> 00:00:58.594
I'm gonna click on my explorer and
I'm going to use that sound.

17
00:00:58.594 --> 00:01:04.677
We're gonna make the mutation here,
I'm gonna say I want to edit the issue.

18
00:01:04.677 --> 00:01:09.791
I'm gonna say I want to, get back.

19
00:01:09.791 --> 00:01:14.318
I wanna get back the same fields that
I got back from the issues query.

20
00:01:14.318 --> 00:01:19.165
Because if I edit this issue and when it
comes back to me, I want it to fit exactly

21
00:01:19.165 --> 00:01:23.659
what the other issues in the list,
without it having any missing field.

22
00:01:23.659 --> 00:01:25.853
So it works seamlessly.

23
00:01:25.853 --> 00:01:28.381
So I'm just gonna ask for
all those similar things.

24
00:01:28.381 --> 00:01:32.288
I know I have an ID, I know I have a name
there, I know I asked for content, and

25
00:01:32.288 --> 00:01:33.647
I know I asked for status.

26
00:01:33.647 --> 00:01:37.173
I don't think I asked for
anything else on the issues query.

27
00:01:37.173 --> 00:01:38.177
I can go check.

28
00:01:38.177 --> 00:01:43.472
So I'll go to the issues query and I can
see, yeah, content, id, name, status.

29
00:01:43.472 --> 00:01:47.948
So I'm gonna add those four things,
content, id, name, status.

30
00:01:50.242 --> 00:01:54.232
And this one has a non-null input.

31
00:01:54.232 --> 00:01:57.607
Obviously, if you're gonna edit an issue,
what is the idea of the issue you

32
00:01:57.607 --> 00:02:00.374
wanna edit and what the hell
are you trying to edit, right?.

33
00:02:00.374 --> 00:02:01.893
So that's what these are.

34
00:02:01.893 --> 00:02:06.780
So you can see here, I'm gonna say,

35
00:02:06.780 --> 00:02:09.623
yeah, I want the id.

36
00:02:09.623 --> 00:02:13.858
And you can pick, id is required, but
then you have to pick one of these.

37
00:02:13.858 --> 00:02:15.355
Are you changing the content?

38
00:02:15.355 --> 00:02:16.447
Are you changing the name?

39
00:02:16.447 --> 00:02:18.329
Are you changing the issue status?

40
00:02:18.329 --> 00:02:20.014
In this case,
I would change an issue status.

41
00:02:20.014 --> 00:02:22.293
So I can put status here.

42
00:02:22.293 --> 00:02:25.432
This part is irrelevant because we're not
really gonna use this unless you're using

43
00:02:25.432 --> 00:02:26.181
it in the Explorer.

44
00:02:26.181 --> 00:02:28.209
What I want is this part up here.

45
00:02:28.209 --> 00:02:32.710
So I'm gonna say,
this is the EditIssueMutation, and

46
00:02:32.710 --> 00:02:34.928
I'm gonna copy it, okay?

47
00:02:34.928 --> 00:02:42.779
Go back to our app, GQL folder,
editIssueMutation.ts,

48
00:02:44.499 --> 00:02:52.052
Import GQL from urql like that.

49
00:02:52.052 --> 00:02:53.380
Export const.

50
00:02:55.703 --> 00:03:00.127
EdditIssueMutation.

51
00:03:02.676 --> 00:03:03.762
There we go.

52
00:03:03.762 --> 00:03:06.271
So now we have our edit
issue mutation it's written,

53
00:03:06.271 --> 00:03:07.849
we declared our variables here.

54
00:03:07.849 --> 00:03:12.659
We pass it into the input here on
the input field of the edit issue.

55
00:03:12.659 --> 00:03:14.283
We got the right fields.

56
00:03:14.283 --> 00:03:15.503
Everything seems great.

57
00:03:15.503 --> 00:03:19.320
So let's head over to,
I think where we wanna do this is,

58
00:03:19.320 --> 00:03:22.898
it's gonna be on the status component,
so go look for

59
00:03:22.898 --> 00:03:26.807
the status component in app
slash auto score components.

60
00:03:26.807 --> 00:03:29.378
And yeah, I think we wanna do this here.

61
00:03:29.378 --> 00:03:33.907
So because it is a mutation,
we know we need to import use mutation.

62
00:03:33.907 --> 00:03:39.317
So let's do that from urql,
urql/next actually.

63
00:03:41.975 --> 00:03:45.074
&gt;&gt; Speaker 1: There we go and
then let's import the mutation itself.

64
00:03:45.074 --> 00:03:50.425
So EditIssueMutation like that.

65
00:03:50.425 --> 00:03:53.542
So what we wanna do here
is we get this new status.

66
00:03:53.542 --> 00:03:57.494
We just wanna go ahead and
call the function so I can say await or

67
00:03:57.494 --> 00:04:00.387
actually we need to
describe the hook first.

68
00:04:00.387 --> 00:04:07.170
So let's do that, so
let's get the hook, useMutation.

69
00:04:07.170 --> 00:04:11.603
That's gonna take in
the editMutation like that.

70
00:04:11.603 --> 00:04:17.608
This will give me an object
here that I'll de-structure and

71
00:04:17.608 --> 00:04:22.916
then this is the actual function,
so editMutation.

72
00:04:22.916 --> 00:04:28.074
So this will either give me an error,
some data, or a fetching.

73
00:04:34.794 --> 00:04:36.887
And then I can say I wanna wait.

74
00:04:39.597 --> 00:04:44.847
EditMutation, which takes
in object with the input,

75
00:04:44.847 --> 00:04:48.952
and then that object has
to have an id on it,

76
00:04:48.952 --> 00:04:53.516
whose id is gonna be issue
id from the props, and

77
00:04:53.516 --> 00:04:58.101
then the actual status
that we wanna change to.

78
00:04:58.101 --> 00:04:59.664
In this case, it's gonna be new status.

79
00:04:59.664 --> 00:05:04.091
So I'm gonna say status, newstatus.

80
00:05:04.091 --> 00:05:04.948
So we'll try that.

81
00:05:04.948 --> 00:05:06.792
Let's make sure that this
on action is hooked up.

82
00:05:06.792 --> 00:05:09.256
On action is hooked up here.

83
00:05:09.256 --> 00:05:12.300
Don't worry about the TypeScript error,
it's fine.

84
00:05:12.300 --> 00:05:16.376
On action is just, you'll see there's
a dropout menu when you click it,

85
00:05:16.376 --> 00:05:17.967
on action response to that.

86
00:05:17.967 --> 00:05:25.183
So let's go try, we'll go here, we'll
just refresh just for sanity reasons.

87
00:05:25.183 --> 00:05:28.321
So now if you click on one of these
rings here, the status rings,

88
00:05:28.321 --> 00:05:30.372
you can see it's currently backlogged.

89
00:05:30.372 --> 00:05:32.044
I should be able to say in progress or
done.

90
00:05:32.044 --> 00:05:37.667
So if I say in progress,
it changed to in progress.

91
00:05:37.667 --> 00:05:40.565
If I refresh it,
it should still be in progress.

92
00:05:40.565 --> 00:05:41.883
You can see kind of jumped down.

93
00:05:41.883 --> 00:05:43.724
I could talk about that in a second.

94
00:05:43.724 --> 00:05:45.795
But I can change this one to done.

95
00:05:45.795 --> 00:05:47.017
It's done.

96
00:05:47.017 --> 00:05:49.771
Refresh it,
probably dropped down to as well.

97
00:05:53.572 --> 00:05:58.262
So, on the previous mutation that
we made for creating an issue,

98
00:05:58.262 --> 00:06:03.230
we had to explicitly refresh the query
to get the new state to show up.

99
00:06:03.230 --> 00:06:10.352
But for this mutation,
we didn't it just showed it immediately.

100
00:06:10.352 --> 00:06:11.013
Why?

101
00:06:11.013 --> 00:06:13.832
[LAUGH] Why did it do that?

102
00:06:13.832 --> 00:06:17.592
Yeah, the reason it did that is because
urqel was able to figure that out for us,

103
00:06:17.592 --> 00:06:20.231
and this is why I didn't want
to dive too much into this,

104
00:06:20.231 --> 00:06:22.045
I feel like it's quite complicated.

105
00:06:22.045 --> 00:06:24.559
But if we go back to the GQL provider,

106
00:06:24.559 --> 00:06:27.645
urql uses this thing
called a cash exchange,

107
00:06:27.645 --> 00:06:32.939
which I'm just gonna show you the docs so
we can talk about it for a little bit.

108
00:06:37.126 --> 00:06:38.424
Here we go.

109
00:06:38.424 --> 00:06:42.691
This right here does something called,

110
00:06:42.691 --> 00:06:47.214
where's it, it's normalized caching.

111
00:06:47.214 --> 00:06:52.702
So normalized caching, it's complicated
but basically what it means is,

112
00:06:52.702 --> 00:06:56.746
you see if I can find a good
like it's getting deep here.

113
00:06:56.746 --> 00:07:00.267
Let me see if I can find
a good example of that,

114
00:07:00.267 --> 00:07:04.256
the best way I can describe
normalized caching is,

115
00:07:04.256 --> 00:07:09.475
ergos gonna treat every entity in
our schema as like a collection.

116
00:07:09.475 --> 00:07:14.479
So for instance, if I do a issues query,
it's going to take every issue and

117
00:07:14.479 --> 00:07:17.831
put it in its own array in
the cache called issues.

118
00:07:17.831 --> 00:07:18.942
Every issue that I get,

119
00:07:18.942 --> 00:07:21.955
no matter what query it comes from
is gonna put it there, right?

120
00:07:21.955 --> 00:07:26.519
So it normalizes all the data
that I get versus saving it as

121
00:07:26.519 --> 00:07:28.905
the way that it came, right?

122
00:07:28.905 --> 00:07:31.926
If it wasn't normalizing, it would just
cash it the way that it got it back and

123
00:07:31.926 --> 00:07:32.445
that was it.

124
00:07:32.445 --> 00:07:34.714
So you might have duplicate
issues everywhere.

125
00:07:34.714 --> 00:07:38.553
If it normalizes the issues,
it won't duplicate them.

126
00:07:38.553 --> 00:07:41.637
It won't save them the way that they
came back instead of it'll go grab all

127
00:07:41.637 --> 00:07:43.592
the issues, and
put them in this collection.

128
00:07:43.592 --> 00:07:48.152
And now whenever you start doing things on
an issue, it'll automatically update for

129
00:07:48.152 --> 00:07:52.469
you if you send back the appropriate stuff
because it can match them by their ids.

130
00:07:52.469 --> 00:07:55.080
So that's what happened on this last one.

131
00:07:55.080 --> 00:07:59.732
The creating the update if you go back and
look here,

132
00:07:59.732 --> 00:08:04.806
if we go back to see what comes
back from the editIssue, so

133
00:08:04.806 --> 00:08:09.989
editIssue sends back an issue,
so does createIssue but,

134
00:08:09.989 --> 00:08:16.482
the editIssue worked because,
there was already an issue in the cache.

135
00:08:16.482 --> 00:08:21.231
So it knew, same id, cool,
I'm just gonna update it for you, right?

136
00:08:21.231 --> 00:08:25.615
Whereas the new issue didn't exist,
so it didn't put it there.

137
00:08:25.615 --> 00:08:27.682
We would have had to put
that there manually.

138
00:08:27.682 --> 00:08:30.894
It wasn't smart to know that,
not by default.

139
00:08:30.894 --> 00:08:35.635
I think there's some like hints you
can like give it to tell it like,

140
00:08:35.635 --> 00:08:37.226
yeah, it gets crazy.

141
00:08:37.226 --> 00:08:39.204
There's like some hints you
can do to like tell it, but

142
00:08:39.204 --> 00:08:41.408
otherwise you'd have to write
to the cash yourself to do it.

143
00:08:41.408 --> 00:08:46.280
But on the edit one, it was like, yeah,
this one already exists, cool, same id,

144
00:08:46.280 --> 00:08:47.242
great, merge.

145
00:08:47.242 --> 00:08:50.082
The one that came from the server
overrides the one that's in the cache.

146
00:08:50.082 --> 00:08:53.602
It has a new status, it reflects
immediately that's why it happens so

147
00:08:53.602 --> 00:08:55.340
quick without a network request.

148
00:08:55.340 --> 00:08:58.769
So that's why I think writing to the cache
off of mutation is probably the best

149
00:08:58.769 --> 00:09:01.779
approach because you wait until
the server actually responds, and

150
00:09:01.779 --> 00:09:03.443
then you write to the cache, right?

151
00:09:03.443 --> 00:09:07.526
And then, in the meantime, show,
like a local loading animation.

152
00:09:07.526 --> 00:09:11.362
So if you, if you seen the,
what is it called?

153
00:09:11.362 --> 00:09:13.258
The shimmer?

154
00:09:13.258 --> 00:09:16.194
The shimmer loading animation?

155
00:09:16.194 --> 00:09:18.096
I think most people call
it a skeleton I think.

156
00:09:18.096 --> 00:09:20.219
So like this.

157
00:09:20.219 --> 00:09:21.930
Show something like that, right?

158
00:09:21.930 --> 00:09:25.695
That way you're not showing a whole
loading spinner or loading the whole page.

159
00:09:25.695 --> 00:09:30.499
You're just showing just a little
loading icon for that one thing.

160
00:09:30.499 --> 00:09:33.496
So in our example,
it would be just for that issue,

161
00:09:33.496 --> 00:09:38.101
you might see something like this until
we can confirm back from the server that

162
00:09:38.101 --> 00:09:42.668
the mutation was accepted and then we can
write to the cache with that new one.

163
00:09:42.668 --> 00:09:45.294
Because the opposite is like
doing an optimistic update,

164
00:09:45.294 --> 00:09:48.617
where you just skip the loading period and
you just show it on the screen and

165
00:09:48.617 --> 00:09:50.776
pray that the server sends
back the same thing.

166
00:09:50.776 --> 00:09:55.717
But if it doesn't it's quite jarring and
confusing for the user to see something

167
00:09:55.717 --> 00:09:59.654
pop up immediately and
then have it be taken away almost as fast.

168
00:09:59.654 --> 00:10:02.621
So I recommend this.

169
00:10:02.621 --> 00:10:06.482
It's a good middle growl, but I didn't
feel like adding that, so I didn't add it.

170
00:10:06.482 --> 00:10:08.573
But you get the point.

171
00:10:08.573 --> 00:10:11.782
I did say I was gonna talk about why
these things jump around, right?

172
00:10:11.782 --> 00:10:15.922
So if I do this and
I create this issue, it's here, but

173
00:10:15.922 --> 00:10:21.055
that when I do this and refresh,
only when I refresh, it goes down.

174
00:10:21.055 --> 00:10:23.238
That's actually just how I'm
doing the database stuff, right?

175
00:10:23.238 --> 00:10:27.750
So on the database query
it's a little weird.

176
00:10:27.750 --> 00:10:29.497
Okay, I'm gonna show
you some service stuff.

177
00:10:29.497 --> 00:10:31.097
Don't worry about it.

178
00:10:31.097 --> 00:10:32.001
Don't get too crazy.

179
00:10:32.001 --> 00:10:35.592
So basically,
I'm ordering here by these enums.

180
00:10:35.592 --> 00:10:40.210
So, I'm setting an order, but
that only happens on the server side,

181
00:10:40.210 --> 00:10:42.810
which happens when I refresh the page.

182
00:10:42.810 --> 00:10:46.861
But when when the cache gets updated
locally and the status reflects

183
00:10:46.861 --> 00:10:51.279
the frontend doesn't know this,
the frontend doesn't know this part.

184
00:10:51.279 --> 00:10:55.351
It's not doing sorting, so it doesn't know
to this thing got changed to progress,

185
00:10:55.351 --> 00:10:57.376
I need to resort it
according to this logic.

186
00:10:57.376 --> 00:10:59.953
It doesn't know that,
that happens on the backend.

187
00:10:59.953 --> 00:11:04.507
So the front end will have to implement
similar sorting to the database sorting

188
00:11:04.507 --> 00:11:07.613
for that to also reflect
when the cache gets updated.

189
00:11:07.613 --> 00:11:11.540
Otherwise, it won't happen
until I refresh and

190
00:11:11.540 --> 00:11:16.632
it comes back from the database
with this order buy right here.

191
00:11:16.632 --> 00:11:19.647
So as far as implementing sorting and

192
00:11:19.647 --> 00:11:24.716
stuff like that in the query,
how does that accomplish them?

193
00:11:24.716 --> 00:11:27.260
Yeah, that's a great point.

194
00:11:27.260 --> 00:11:29.791
So how can you accomplish
this in the query?

195
00:11:29.791 --> 00:11:34.557
Well, there isn't any argument
that you couldn't ask for.

196
00:11:34.557 --> 00:11:38.641
So you would have to ask yourself,
what about the ordering?

197
00:11:38.641 --> 00:11:40.402
Do you want to be dynamic?

198
00:11:40.402 --> 00:11:43.944
And then you would add that
into your schema, right?

199
00:11:43.944 --> 00:11:50.466
So an example would be, let me see,
I have- So you do it in the schema?

200
00:11:50.466 --> 00:11:52.485
You have to define it in the schema,
right?

201
00:11:52.485 --> 00:11:56.082
So like here you can see for
the issues query, I allow you to

202
00:11:56.082 --> 00:12:00.710
pass up an array of statuses and I will
return any issue that belongs to you,

203
00:12:00.710 --> 00:12:04.260
that is one of the statuses,
so that's kind of a filter.

204
00:12:04.260 --> 00:12:08.531
There's nothing stopping you from
also saying, orderBy, right, and

205
00:12:08.531 --> 00:12:10.778
then what do you want someone to pass in?

206
00:12:10.778 --> 00:12:15.352
Maybe they can pass in a string, and that
is something that you can use dynamically

207
00:12:15.352 --> 00:12:17.886
in your SQL query to do
some type of ordering.

208
00:12:17.886 --> 00:12:22.221
So it's whatever part of your
ordering that you want to be dynamic,

209
00:12:22.221 --> 00:12:26.951
make that a input variable inside your
schema and then now it'll show up.

210
00:12:26.951 --> 00:12:30.486
Cuz if I save this right now,
watch, I'm gonna save this.

211
00:12:30.486 --> 00:12:33.332
So now you can see this is
on IssuesFilterInput, right?

212
00:12:33.332 --> 00:12:34.652
So I'm gonna save that.

213
00:12:34.652 --> 00:12:39.029
I'm going to go back to here.

214
00:12:39.029 --> 00:12:41.083
I don't think I need to
refresh cuz it's polling.

215
00:12:41.083 --> 00:12:43.061
So it might already be good.

216
00:12:43.061 --> 00:12:50.025
And then if I go to issues,
what did I call it?

217
00:12:50.025 --> 00:12:53.514
IssueFilterInput.

218
00:12:53.514 --> 00:12:54.810
Okay, and it's not gonna find it there.

219
00:12:54.810 --> 00:12:59.386
So let's just go to query,
IssueFilterInput.

220
00:12:59.386 --> 00:13:01.570
There it is, or to buy it's already there.

221
00:13:01.570 --> 00:13:03.774
So that's how you expose it.

222
00:13:03.774 --> 00:13:07.566
There's another side to this, you now then
have to take that value and resolve it.

223
00:13:07.566 --> 00:13:09.214
And we'll talk about that in
the service side of course.

224
00:13:09.214 --> 00:13:12.238
But yeah,
you expose it through your schema, and

225
00:13:12.238 --> 00:13:14.256
then you use it in your resolver.

226
00:13:14.256 --> 00:13:15.395
Yeah.

227
00:13:15.395 --> 00:13:18.154
And there was a comment in the chat.

228
00:13:18.154 --> 00:13:19.972
Does this sound right?

229
00:13:19.972 --> 00:13:25.889
GraphQL allows you to build a local graph
of related data, it knows the relationship

230
00:13:25.889 --> 00:13:31.235
between data, so it knows the data
structure, and it knows what to update?

231
00:13:31.235 --> 00:13:32.226
Close.

232
00:13:32.226 --> 00:13:34.786
So it's not GraphQL that knows that,
by default,

233
00:13:34.786 --> 00:13:37.711
GraphQL doesn't have anything
to do with updating cash.

234
00:13:37.711 --> 00:13:38.860
It doesn't even do a cash.

235
00:13:38.860 --> 00:13:40.883
It knows nothing about it.

236
00:13:40.883 --> 00:13:43.506
GraphQL Graph QL exists purely for
the network layer.

237
00:13:43.506 --> 00:13:48.295
Well, technically, you can use Graph QL
for anything, not just for networking and

238
00:13:48.295 --> 00:13:51.410
Graph QL is just a way in which
you can query your graph.

239
00:13:51.410 --> 00:13:51.959
That's it.

240
00:13:51.959 --> 00:13:55.495
It's a mechanism like here's,
a syntax to query and

241
00:13:55.495 --> 00:13:58.882
then here's some tools to
resolve those queries.

242
00:13:58.882 --> 00:14:03.402
That's all Graph QL is, it doesn't know
anything about what's on the other side of

243
00:14:03.402 --> 00:14:07.094
that resolver as far as like a cache,
a database, another service,

244
00:14:07.094 --> 00:14:08.639
another graphical server.

245
00:14:08.639 --> 00:14:12.103
So no,
it doesn't know anything about that, but

246
00:14:12.103 --> 00:14:17.888
it does provide the metadata in which URQL
can then use to figure out what to update.

247
00:14:17.888 --> 00:14:21.603
And that's what I was describing
as like the normalized caching.

248
00:14:21.603 --> 00:14:26.715
So, it was smart enough to know that
that id existed because ids are keys by

249
00:14:26.715 --> 00:14:31.671
default in urql you can change the keys
if you want and it just merged it.

250
00:14:31.671 --> 00:14:32.755
It just merged it.

251
00:14:32.755 --> 00:14:37.043
So, not entirely urql, urql definitely
needs the metadata from GraphQL, but

252
00:14:37.043 --> 00:14:40.186
GraphQL doesn't, it doesn't know,
it doesn't do it.

253
00:14:40.186 --> 00:14:42.264
It has nothing to do with caching or
anything like that?

254
00:14:44.316 --> 00:14:45.640
Yes.

255
00:14:45.640 --> 00:14:50.383
If we want to extend what we learned here
to actually work with the server does urql

256
00:14:50.383 --> 00:14:53.964
automatically keep its local
cache in sync with the server?

257
00:14:53.964 --> 00:14:58.418
Or is it a different set of
operations to actually update the DB?

258
00:14:58.418 --> 00:15:02.523
Does urql automatically keep
its local state in sync, no.

259
00:15:02.523 --> 00:15:05.769
So I think what they're
describing is subscriptions.

260
00:15:05.769 --> 00:15:08.227
So subscription would be
what they're describing,

261
00:15:08.227 --> 00:15:10.092
whereas that would be like a web socket.

262
00:15:10.092 --> 00:15:15.195
So if you wanted your local application,
in this case, urql, to be in sync with

263
00:15:15.195 --> 00:15:20.014
some data on the backend, you would
have to set up a subscription for that.

264
00:15:20.014 --> 00:15:22.015
We're not gonna cover subscriptions.

265
00:15:22.015 --> 00:15:24.742
For a lot of reasons,
one they're actually not that quite,

266
00:15:24.742 --> 00:15:28.433
they're not that complicated, but like
we're using Next.js and doing like web

267
00:15:28.433 --> 00:15:32.095
sockets on Next.js is like, you can't
really do it because it's serverless.

268
00:15:32.095 --> 00:15:34.993
So you have to use a third
party service for that and

269
00:15:34.993 --> 00:15:37.206
something else you got to sign up for.

270
00:15:37.206 --> 00:15:39.285
None of them are really free or good.

271
00:15:39.285 --> 00:15:43.335
So I didn't do it, but you would
need to subscription for that, yeah,

272
00:15:43.335 --> 00:15:45.910
otherwise, I mean, I guess you could pull.

273
00:15:45.910 --> 00:15:47.247
There's nothing stopping you from pulling.

274
00:15:47.247 --> 00:15:50.512
Urql supports pulling so
you could pull a query.

275
00:15:50.512 --> 00:15:52.774
And whenever new updates come,
you can do that.

276
00:15:52.774 --> 00:15:54.278
And for some UIs, you might do that.

277
00:15:54.278 --> 00:15:58.354
Like if you're on Twitter and you're on
the Twitter feed and you're all the way at

278
00:15:58.354 --> 00:16:01.779
the bottom, Twitter shows you a bubble
at the top of your feed, hey,

279
00:16:01.779 --> 00:16:04.553
you got 10 new tweets,
click here, you click it, and

280
00:16:04.553 --> 00:16:07.833
it scrolls all the way to the top and
it loads in those two new ones.

281
00:16:07.833 --> 00:16:10.600
They're probably pulling that, right,
there while you're on your feed.

282
00:16:10.600 --> 00:16:13.735
They're just going to their server every,
I don't know, 30 seconds,

283
00:16:13.735 --> 00:16:15.490
maybe I don't know what they're doing.

284
00:16:15.490 --> 00:16:19.041
They're asking like, hey, are there
anything new since this timestamp anything

285
00:16:19.041 --> 00:16:22.604
new since this timestamp, if there is they
show that w bubble that you can click on.

286
00:16:22.604 --> 00:16:24.643
So that's some way you
could like keep it in sync.

287
00:16:24.643 --> 00:16:26.016
That definitely wouldn't be real time.

288
00:16:26.016 --> 00:16:29.005
You have a gap between whatever
your polling window was.

289
00:16:29.005 --> 00:16:31.635
But other than that,
you have to use subscriptions.

290
00:16:31.635 --> 00:16:32.268
Yeah.

