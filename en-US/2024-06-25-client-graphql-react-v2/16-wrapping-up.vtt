WEBVTT

1
00:00:00.070 --> 00:00:03.816
&gt;&gt; Scott Moss: Cool, okay, so what I
recommend doing is, especially if you

2
00:00:03.816 --> 00:00:08.569
are going to take the Serverside GraphQL
course that talks about the back end of

3
00:00:08.569 --> 00:00:13.250
this, but you don't have to take it
to do what I'm about to recommend.

4
00:00:13.250 --> 00:00:15.600
I do recommend going in here.

5
00:00:15.600 --> 00:00:20.938
And, for instance, if you notice,
I have a, if you go to Apollo Server,

6
00:00:20.938 --> 00:00:26.128
if you go to mutations, you notice
I have a deleteIssue mutation here.

7
00:00:26.128 --> 00:00:27.148
It works.

8
00:00:27.148 --> 00:00:28.928
It's ready to go.

9
00:00:28.928 --> 00:00:30.868
Make a UI where you can delete an issue.

10
00:00:30.868 --> 00:00:34.921
Add a button on the issue, click it,
have it delete, update the cache so

11
00:00:34.921 --> 00:00:39.388
it removes it from the page if it doesn't
do it automatically, and start that.

12
00:00:39.388 --> 00:00:41.979
That is, you don't have to do anything
on a server side to make that work.

13
00:00:41.979 --> 00:00:44.661
The query's already done,
the mutation's already done,

14
00:00:44.661 --> 00:00:46.194
database query's already done.

15
00:00:46.194 --> 00:00:48.239
You just gotta write the UI for
it in interaction.

16
00:00:48.239 --> 00:00:50.199
So hook that up, try that.

17
00:00:50.199 --> 00:00:52.637
And then if you do the server-side stuff,

18
00:00:52.637 --> 00:00:56.444
there's gonna [LAUGH] be a lot of
stuff you could do, so much stuff.

19
00:00:56.444 --> 00:00:59.042
But yeah, I highly recommend doing that,

20
00:00:59.042 --> 00:01:02.013
if you wanna go a little further and
try that out.

21
00:01:02.013 --> 00:01:05.811
So other than that,
most of the other resources are usually,

22
00:01:05.811 --> 00:01:08.733
there are a lot of more
frontend resources, but

23
00:01:08.733 --> 00:01:12.113
they're mostly just
alternatives to what Oracle is.

24
00:01:12.113 --> 00:01:14.864
I talked about code gen,
if you wanna check that out,

25
00:01:14.864 --> 00:01:18.854
if you wanna generate TypeScript types for
your queries, you could do that.

26
00:01:18.854 --> 00:01:23.677
There is a lot more about querying
that I did not talk about

27
00:01:23.677 --> 00:01:28.311
because I myself almost never
use them in production.

28
00:01:28.311 --> 00:01:31.021
So I just don't teach
things that I don't use.

29
00:01:31.021 --> 00:01:33.249
But I heard they're pretty useful, so

30
00:01:33.249 --> 00:01:36.964
I highly recommend going to
the GraphQL documentation website,

31
00:01:36.964 --> 00:01:40.760
and they have a best practice
thing in here, that's pretty good.

32
00:01:40.760 --> 00:01:41.690
I highly recommend checking that out.

33
00:01:41.690 --> 00:01:45.124
But they have different things in
here where they talk about something

34
00:01:45.124 --> 00:01:46.520
called fragments.

35
00:01:46.520 --> 00:01:47.600
That's quite useful.

36
00:01:47.600 --> 00:01:49.210
I don't actually use fragments.

37
00:01:50.260 --> 00:01:54.150
Here they are, fragments are like, they're
like little pieces of a query that you can

38
00:01:54.150 --> 00:01:58.160
share with other queries, so
you don't have to rewrite them every time.

39
00:01:58.160 --> 00:02:01.551
So if you have multiple queries that
always get this piece of a user and

40
00:02:01.551 --> 00:02:05.540
you don't have to rewrite that every
single time, you can make that a fragment.

41
00:02:05.540 --> 00:02:07.967
And then you can share
those fragments everywhere.

42
00:02:07.967 --> 00:02:12.356
But, I don't know, you can also just
share a string around, too, I don't know.

43
00:02:12.356 --> 00:02:14.821
[LAUGH] There's a lot of stuff.

44
00:02:14.821 --> 00:02:17.280
There's also unions and
things like that, but

45
00:02:17.280 --> 00:02:20.059
that actually requires
a lot of server-side stuff.

46
00:02:20.059 --> 00:02:21.089
So I didn't get to it.

47
00:02:21.089 --> 00:02:23.859
I couldn't find a good use case
to introduce that to you guys.

48
00:02:23.859 --> 00:02:27.379
But on the back end,
we could probably do it.

49
00:02:27.379 --> 00:02:30.409
Directives are really cool,
also pretty advanced.

50
00:02:30.409 --> 00:02:32.669
You can add directives,

51
00:02:32.669 --> 00:02:38.493
which are custom functions that
run on the AST of the schema.

52
00:02:38.493 --> 00:02:42.747
It's all GraphQL back end stuff,
you have to actually write the logic for

53
00:02:42.747 --> 00:02:47.412
this directive on the back end, even
though you're querying it on your client,

54
00:02:47.412 --> 00:02:49.213
but that's the syntax for it.

55
00:02:49.213 --> 00:02:53.831
And there are tons of libraries,
people make lodash directives,

56
00:02:53.831 --> 00:02:57.210
so you can do all different
types of mapping and,

57
00:02:57.210 --> 00:03:02.333
just all types of crazy stuff in
a GraphQL schema, so it gets pretty cool.

58
00:03:02.333 --> 00:03:05.673
And then, yeah, this is unions and
things like that.

59
00:03:05.673 --> 00:03:06.803
So we don't have to talk about that.

60
00:03:06.803 --> 00:03:09.503
But, yeah, I highly recommend
just looking at this stuff.

61
00:03:09.503 --> 00:03:13.539
It's just a little more than we talked
about, but again, I almost never use any

62
00:03:13.539 --> 00:03:17.533
of those things in production, so I
didn't feel the need of talking about it.

63
00:03:17.533 --> 00:03:20.687
But like I said,
a lot of people swear by these things.

64
00:03:20.687 --> 00:03:26.937
Other than that,
I would say just build something in it.

65
00:03:26.937 --> 00:03:30.734
There are tons of open APIs,
like the Star Wars API that I showed you,

66
00:03:30.734 --> 00:03:34.155
if you just Google Open GraphQL APIs,
there's tons of them.

67
00:03:34.155 --> 00:03:38.304
Go find one, connect to it,
go build a frontend with it, or honestly,

68
00:03:38.304 --> 00:03:39.967
just pull it open in here.

69
00:03:39.967 --> 00:03:44.549
Add the URL into Apollo Client or
Apollo Studio and explore that API,

70
00:03:44.549 --> 00:03:48.973
try the queries, if they have mutations,
try the mutations, and

71
00:03:48.973 --> 00:03:51.427
just get familiar with that syntax.

72
00:03:51.427 --> 00:03:55.983
You don't even need to make an app just to
get more practice with it because I think

73
00:03:55.983 --> 00:04:00.167
when you use GraphQL on the client side,
it clearly feels better.

74
00:04:00.167 --> 00:04:02.727
Making it is where the pain is.

75
00:04:02.727 --> 00:04:06.177
So you can skip all the pain and
just play with something that's public.

76
00:04:06.177 --> 00:04:08.187
So that's what I recommend.

77
00:04:08.187 --> 00:04:11.902
But other than that, definitely recommend
taking the server-side course that we're

78
00:04:11.902 --> 00:04:13.537
gonna be teaching.

79
00:04:13.537 --> 00:04:15.327
It covers the server-side version of this.

80
00:04:15.327 --> 00:04:19.178
It's gonna go way more in depth
to the real value of GraphQL.

81
00:04:19.178 --> 00:04:23.214
It's gonna be backend
heavy database stuff.

82
00:04:24.944 --> 00:04:26.804
Basically, how do you
resolve a graph query?

83
00:04:26.804 --> 00:04:29.214
How do you enable this
experience that we use today?

84
00:04:29.214 --> 00:04:30.830
It's quite different than
anything you've ever done.

85
00:04:30.830 --> 00:04:35.634
So I do recommend taking that course to
really bring your knowledge full circle.

86
00:04:35.634 --> 00:04:37.174
And, yeah, that's it.

87
00:04:37.174 --> 00:04:40.642
Thanks for coming to the course, folks.

88
00:04:40.642 --> 00:04:43.985
&gt;&gt; Speaker 2: [APPLAUSE]

