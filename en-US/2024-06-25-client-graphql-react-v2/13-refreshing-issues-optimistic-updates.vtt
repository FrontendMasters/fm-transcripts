WEBVTT

1
00:00:00.000 --> 00:00:01.393
&gt;&gt; Scott: Obviously,
that's not a good experience.

2
00:00:01.393 --> 00:00:06.578
So outside of GraphQL,
what are the solutions?

3
00:00:06.578 --> 00:00:09.192
If you were to do this with REST,
how would you solve this?

4
00:00:09.192 --> 00:00:12.665
I did a post request,
I created a new to-do item,

5
00:00:12.665 --> 00:00:17.070
I needed to show up on my to-do list,
how would you solve this?

6
00:00:20.502 --> 00:00:23.944
&gt;&gt; Scott: Anybody wanna tell
me how they would solve it?

7
00:00:23.944 --> 00:00:25.077
No wrong answers.

8
00:00:27.573 --> 00:00:29.595
&gt;&gt; Scott: No, okay, I know y'all know.

9
00:00:29.595 --> 00:00:30.636
All y'all are smart.

10
00:00:30.636 --> 00:00:34.605
I have a to-do list, I made a post
request to go creator to-do, but

11
00:00:34.605 --> 00:00:37.182
now I want that new to-do
to show up on my list

12
00:00:37.182 --> 00:00:40.263
immediately without me
having to refresh the page.

13
00:00:40.263 --> 00:00:46.027
How would I solve that issue
if I'm using REST, yes?

14
00:00:46.027 --> 00:00:47.356
&gt;&gt; Speaker 1: Rerun the issue query.

15
00:00:47.356 --> 00:00:50.051
&gt;&gt; Scott: Yeah, you would just say, cool,

16
00:00:50.051 --> 00:00:54.149
just rerun that get request
that got all the to-dos again.

17
00:00:54.149 --> 00:00:57.560
Because this time, it should be whatever
it was plus the one I just created, so

18
00:00:57.560 --> 00:00:58.971
you'll just rerun it, right?

19
00:00:58.971 --> 00:01:00.635
That's something you could do.

20
00:01:00.635 --> 00:01:05.057
You might be, I don't know, maybe this
is a feed, maybe this is not a list, but

21
00:01:05.057 --> 00:01:09.283
it's a feed, maybe there's someone else,
there's real time elements.

22
00:01:09.283 --> 00:01:13.200
So maybe you're polling, so on some
interval, it's checking for new things.

23
00:01:13.200 --> 00:01:14.923
And then eventually, it will show up.

24
00:01:14.923 --> 00:01:17.719
That's another solution
depending on your UX.

25
00:01:17.719 --> 00:01:23.132
If you were using something like Redux,
after you created that new one,

26
00:01:23.132 --> 00:01:26.784
you would get back the new
one from the mutation.

27
00:01:26.784 --> 00:01:27.950
You go into Redux and

28
00:01:27.950 --> 00:01:31.524
insert it exactly where it needs
to be in the array of to-dos.

29
00:01:31.524 --> 00:01:33.856
So, and
then Redux would trigger a re-render and

30
00:01:33.856 --> 00:01:36.751
then it would just show up on
a page without a network request.

31
00:01:36.751 --> 00:01:38.699
That is something you can
also do with Urql and

32
00:01:38.699 --> 00:01:40.506
it's probably a recommended approach.

33
00:01:40.506 --> 00:01:45.985
But it's very specific,
[LAUGH] it's quite complicated.

34
00:01:45.985 --> 00:01:50.025
It seems simple, I'm sure they built it
in a simple way, but it's still quite

35
00:01:50.025 --> 00:01:53.719
complicated in my opinion, but
that's typically how you would do it.

36
00:01:53.719 --> 00:01:55.911
What we're gonna do is we're
just gonna refetch it.

37
00:01:55.911 --> 00:01:59.537
We're just gonna just refetch
the whole query to be like,

38
00:01:59.537 --> 00:02:04.066
hey, you got some new stuff,
your data is stale, I need you to refetch.

39
00:02:04.066 --> 00:02:05.843
So let's go do that.

40
00:02:05.843 --> 00:02:11.525
And the best way to do that is to
figure out where we need to do it.

41
00:02:11.525 --> 00:02:15.967
So in this example, onCreate,
where we need to refetch,

42
00:02:15.967 --> 00:02:19.602
would be here after we
know that there's data.

43
00:02:19.602 --> 00:02:24.615
And right before we close the model,
we wanna do a refetch here, right?

44
00:02:24.615 --> 00:02:27.759
So how do we refetch their original query?

45
00:02:27.759 --> 00:02:32.651
Is there a function we can use from
the original query that allows

46
00:02:32.651 --> 00:02:34.015
us to refetch it?

47
00:02:36.672 --> 00:02:37.717
&gt;&gt; Scott: Anybody wanna guess?

48
00:02:37.717 --> 00:02:41.672
Right here, replay,
this function right here.

49
00:02:41.672 --> 00:02:43.452
This function right here,
that's what it's here for.

50
00:02:43.452 --> 00:02:47.224
This function allows it, if you just call
it, it'll rerun this whole query again.

51
00:02:47.224 --> 00:02:50.608
And this query is responsible for
getting the issues.

52
00:02:50.608 --> 00:02:53.857
So this should work.

53
00:02:53.857 --> 00:02:54.680
So let's try that.

54
00:02:54.680 --> 00:02:59.299
So I'm gonna say, cool,
go here, await replay.

55
00:02:59.299 --> 00:03:00.174
So let's try that.

56
00:03:00.174 --> 00:03:01.425
I'm gonna create an issue.

57
00:03:03.902 --> 00:03:06.075
&gt;&gt; Scott: Do that, and that, boom,

58
00:03:06.075 --> 00:03:11.508
now it shows up,
&gt;&gt; Scott: Right?

59
00:03:18.396 --> 00:03:21.644
&gt;&gt; Scott: Right, it goes through all the
states, it goes through the loading again,

60
00:03:21.644 --> 00:03:23.948
checks for error again,
it goes through all of that.

61
00:03:23.948 --> 00:03:25.570
So that's one way you can do it.

62
00:03:25.570 --> 00:03:28.230
Is it the most optimal way?

63
00:03:28.230 --> 00:03:29.368
Probably not.

64
00:03:29.368 --> 00:03:33.781
The most optimal way would be
using an optimistic update,

65
00:03:33.781 --> 00:03:38.913
which if you know what that is,
it's basically updating your local

66
00:03:38.913 --> 00:03:43.887
cache to what you think or
know the server is gonna come back with.

67
00:03:43.887 --> 00:03:44.722
So in this case,

68
00:03:44.722 --> 00:03:48.800
we would actually know what the server
would come back with if it was successful.

69
00:03:48.800 --> 00:03:51.720
We know everything minus the ID,
cuz we don't generate the ID, but

70
00:03:51.720 --> 00:03:53.985
we know what the name of
the issue is cuz we sent it up.

71
00:03:53.985 --> 00:03:56.850
We know the content of the issue
because we sent it up.

72
00:03:56.850 --> 00:04:00.679
We know the status of the issue because
we know it defaults to a certain status.

73
00:04:00.679 --> 00:04:03.513
So we don't even have to wait for
the server to come back,

74
00:04:03.513 --> 00:04:05.060
you can put that on the screen.

75
00:04:05.060 --> 00:04:09.596
Just go ahead and make a fake issue
with that same name, that same content,

76
00:04:09.596 --> 00:04:12.697
that same status,
the ID doesn't really matter.

77
00:04:12.697 --> 00:04:16.900
And then put it in the cache so
it shows up on the screen immediately.

78
00:04:16.900 --> 00:04:21.623
And then when the new one comes back,
cuz it's still gonna come back, or

79
00:04:21.623 --> 00:04:26.581
if we refresh it, what we'll do is we'll
go and we'll basically do a diff on

80
00:04:26.581 --> 00:04:30.308
the one that we created,
the fake one, and the real one.

81
00:04:30.308 --> 00:04:32.546
And whatever is different,
the real one will override it.

82
00:04:32.546 --> 00:04:35.336
In this case, only that would
be different would be the ID.

83
00:04:35.336 --> 00:04:38.538
Everything else will stay the same,
so therefore, you won't even

84
00:04:38.538 --> 00:04:42.486
see anything change on the screen cuz
nothing really got changed that's visible.

85
00:04:42.486 --> 00:04:48.472
But the bad thing about that is if you
optimistically put that on the screen and

86
00:04:48.472 --> 00:04:52.909
then there's server errors,
now you gotta take it off.

87
00:04:52.909 --> 00:04:57.145
And that's a really shitty experience
to be like, I showed you this.

88
00:04:57.145 --> 00:05:01.107
That's like you at your bank and
you go initiate a transfer,

89
00:05:01.107 --> 00:05:05.999
and the money leaves your account,
but then I guess something happens, so

90
00:05:05.999 --> 00:05:08.420
then it immediately reverted back.

91
00:05:08.420 --> 00:05:11.239
You'd be very confused,
what actually happened here,

92
00:05:11.239 --> 00:05:14.130
cuz I saw the money leave my account,
but now it came back.

93
00:05:14.130 --> 00:05:16.172
So did it send it or did it not send it?

94
00:05:16.172 --> 00:05:17.902
So it's really not a good experience.

95
00:05:17.902 --> 00:05:21.934
So optimistic updates are like,
you have the utmost level of confidence,

96
00:05:21.934 --> 00:05:25.847
[LAUGH] and everything, and you just
know that things are gonna work out.

97
00:05:25.847 --> 00:05:30.789
And also, I guess I don't really
like optimistic updates that much,

98
00:05:30.789 --> 00:05:33.805
because even though the thing is loading,

99
00:05:33.805 --> 00:05:38.277
depending on how you load it,
it could be blocking rendering.

100
00:05:38.277 --> 00:05:42.317
So even though the thing just popped
up as loading in the background,

101
00:05:42.317 --> 00:05:45.314
that could prevent some
interactions on the page,

102
00:05:45.314 --> 00:05:49.649
and the user wouldn't know that
because there's no loading indicator.

103
00:05:49.649 --> 00:05:52.284
You just threw something on a screen and
it's loading in the background.

104
00:05:52.284 --> 00:05:54.407
So how would the user know
something is loading?

105
00:05:54.407 --> 00:05:56.886
So it can get pretty sloppy
with optimistic updates.

106
00:05:56.886 --> 00:05:59.636
If used right and used well,
I think they're the best, but

107
00:05:59.636 --> 00:06:00.901
you have to invest in them.

108
00:06:00.901 --> 00:06:05.564
So I think the next intermediate step is
just wait for the server to come back.

109
00:06:05.564 --> 00:06:07.956
I'm sorry, the next immediate step,
yeah, wait for

110
00:06:07.956 --> 00:06:10.720
the server to come back and
then write that result to the cache.

111
00:06:10.720 --> 00:06:14.231
And then the third best is what we did,
which is just refresh the whole query,

112
00:06:14.231 --> 00:06:17.597
just go get the whole query all over
again, which is fine in this example.

113
00:06:17.597 --> 00:06:20.817
But if you have something like
pagination or something like that,

114
00:06:20.817 --> 00:06:24.151
you couldn't refetch, or
you wouldn't wanna refetch all the pages

115
00:06:24.151 --> 00:06:26.639
just to get one new thing,
that would be wasteful.

116
00:06:26.639 --> 00:06:31.923
So you probably do wanna write to
the cache and come back, so yeah.

117
00:06:31.923 --> 00:06:36.587
&gt;&gt; Speaker 1: Can you explain
a little more about the .db/ and

118
00:06:36.587 --> 00:06:39.101
./migrations folder?

119
00:06:39.101 --> 00:06:45.000
&gt;&gt; Scott: The .db and .migrations folder.

120
00:06:45.000 --> 00:06:46.275
What are we talking about?

121
00:06:46.275 --> 00:06:51.802
Are we talking about,
this right, the db folder and?

122
00:06:51.802 --> 00:06:54.536
Okay, I mean, yeah,
I could talk a little bit about this.

123
00:06:54.536 --> 00:06:55.683
So the db folder,

124
00:06:55.683 --> 00:07:00.508
I want to make sure I'm not missing
anything that they were talking about.

125
00:07:00.508 --> 00:07:02.578
&gt;&gt; Speaker 1: And
I think that migrations folder,

126
00:07:02.578 --> 00:07:05.019
that's about middle of-
&gt;&gt; Scott: There we go.

127
00:07:05.019 --> 00:07:06.904
Okay, I see, I see what they're saying.

128
00:07:06.904 --> 00:07:07.699
Yes, I'll talk about these.

129
00:07:07.699 --> 00:07:11.810
So this has nothing to do with GraphQL.

130
00:07:11.810 --> 00:07:13.582
This has nothing to do with Next.js or
React.

131
00:07:13.582 --> 00:07:18.008
This is just the actual interface
in the database that we're using.

132
00:07:18.008 --> 00:07:19.311
So we're Turso.

133
00:07:19.311 --> 00:07:24.722
The db file is where we create our
client that connects to Turso.

134
00:07:24.722 --> 00:07:28.535
And then we create our instance
of our ORM using Drizzle.

135
00:07:28.535 --> 00:07:34.097
There are plenty ORMs out there
like Prisma, Drizzle, Kysely, SQL.

136
00:07:34.097 --> 00:07:36.601
There's so many of them, TypeORM, name it.

137
00:07:36.601 --> 00:07:38.309
There's so many of them, but
we're using Drizzle here.

138
00:07:38.309 --> 00:07:40.288
It's my favorite one,
it's the one I know the best right now.

139
00:07:40.288 --> 00:07:41.736
I also like Prisma.

140
00:07:41.736 --> 00:07:44.733
The schema file is literally
the database schema,

141
00:07:44.733 --> 00:07:48.156
you can take a look at it if you want,
it's using Drizzle.

142
00:07:48.156 --> 00:07:53.196
If you know SQL, you'll feel pretty
familiar with this, it's nothing crazy.

143
00:07:53.196 --> 00:07:58.034
The migrations folder is, so
this is where you store the migrations for

144
00:07:58.034 --> 00:07:59.170
your database.

145
00:07:59.170 --> 00:08:02.710
When you ran that command at
the beginning of the course,

146
00:08:02.710 --> 00:08:06.568
where you had to do db push,
that didn't create a migration.

147
00:08:06.568 --> 00:08:10.808
Actually, I already pre-generated the
migration in the repo ahead of time, and

148
00:08:10.808 --> 00:08:13.090
this was the migration that got generated.

149
00:08:13.090 --> 00:08:18.390
It's a random name, I didn't come up
with a name, but it's basically the SQL.

150
00:08:18.390 --> 00:08:21.999
When you run a migration on a SQL
database, you have to describe all

151
00:08:21.999 --> 00:08:25.623
the things, all the commands that
you want the SQL database to do.

152
00:08:25.623 --> 00:08:30.157
So you could think of this as
a reflection of the schema written here.

153
00:08:30.157 --> 00:08:31.567
So this is the schema,

154
00:08:31.567 --> 00:08:35.439
you can see I have a table called
users that have these fields.

155
00:08:35.439 --> 00:08:37.391
If I go to the migrations file,

156
00:08:37.391 --> 00:08:41.231
I should also have a table called
users to have these fields.

157
00:08:41.231 --> 00:08:46.789
And this is just the SQL version of that,
that whenever you run a migration, this

158
00:08:46.789 --> 00:08:52.534
would get pushed to database to have this
schema now be reflected on that database.

159
00:08:52.534 --> 00:08:56.439
We did something called a push,
which is it has the same effect but

160
00:08:56.439 --> 00:08:59.216
without checking, so it's more dangerous.

161
00:08:59.216 --> 00:09:04.814
A migration will check for
conflicts and try to resolve things and

162
00:09:04.814 --> 00:09:08.595
break if it can't merge without data loss.

163
00:09:08.595 --> 00:09:11.635
Whereas when we do a db push,
it's like doing a forced push to get.

164
00:09:11.635 --> 00:09:14.771
It's just like, whatever, I don't care
what's in the database, just push it up,

165
00:09:14.771 --> 00:09:15.741
I don't wanna do a check.

166
00:09:15.741 --> 00:09:19.625
So we skip this and did a push, but
I originally generated a migration at

167
00:09:19.625 --> 00:09:22.690
the start of the course and
it got checked in the GitHub.

168
00:09:22.690 --> 00:09:24.310
So that's what this is for.

169
00:09:24.310 --> 00:09:28.903
This meta folder is just some meta data
associated with the migrations that got

170
00:09:28.903 --> 00:09:31.422
created and
in what order they need to run.

171
00:09:31.422 --> 00:09:34.393
Migrations have to run in a certain
order in which they got created.

172
00:09:34.393 --> 00:09:37.323
So the state of the database
can be reproducible and

173
00:09:37.323 --> 00:09:39.173
it can go in either directions.

174
00:09:39.173 --> 00:09:42.613
This journal.json,
whenever I generate a new migration,

175
00:09:42.613 --> 00:09:46.464
it'll create a new entry here for
when that migration was created.

176
00:09:46.464 --> 00:09:48.811
The name of it and what the index is so

177
00:09:48.811 --> 00:09:52.268
we can keep track of it when
you run your migrations.

178
00:09:52.268 --> 00:09:57.050
And I guess this snapshot thing is
just a text, a JSON representation of

179
00:09:57.050 --> 00:10:01.847
the snapshot of the schema at the time
with which you ran the migration.

180
00:10:01.847 --> 00:10:06.299
So bunch of database stuff,
you'll probably never have to do it, but

181
00:10:06.299 --> 00:10:07.892
that's what it's for.

