WEBVTT

1
00:00:00.080 --> 00:00:04.431
&gt;&gt; Scott Moss: Now that's hooked up,
we are ready to make GraphQL queries and

2
00:00:04.431 --> 00:00:07.080
mutations and all those things.

3
00:00:07.080 --> 00:00:07.907
Any questions on this?

4
00:00:12.590 --> 00:00:14.019
&gt;&gt; Scott Moss: No, pretty sure?

5
00:00:14.019 --> 00:00:15.172
Yes, Mark.

6
00:00:15.172 --> 00:00:18.749
&gt;&gt; Mark: Well,
there's a few Next.js questions like

7
00:00:18.749 --> 00:00:24.346
why are there parentheses around
the dashboard directories?

8
00:00:24.346 --> 00:00:25.540
&gt;&gt; Scott Moss: These?

9
00:00:25.540 --> 00:00:26.311
Boy, okay.

10
00:00:26.311 --> 00:00:30.267
So if you wanna learn more about Next.js,
highly recommend taking the Next.js as

11
00:00:30.267 --> 00:00:33.692
courses we have in front of masters,
I cover a lot of this stuff.

12
00:00:33.692 --> 00:00:37.276
And then also in the upcoming one
with intermediate Next.js that we'll

13
00:00:37.276 --> 00:00:38.642
be teaching later.

14
00:00:38.642 --> 00:00:45.216
But in short, these parentheses are, so
a folder in App.js is a route, okay?

15
00:00:45.216 --> 00:00:49.060
So if I have API,
now I have my URL slash API.

16
00:00:49.060 --> 00:00:55.230
If I have a folder called AUTH,
it'll be my URL slash AUTH.

17
00:00:55.230 --> 00:00:59.599
But if I put parentheses around it,
it doesn't add a route segment.

18
00:00:59.599 --> 00:01:04.339
So now, by having parentheses around it,
there's no such thing as slash off.

19
00:01:04.339 --> 00:01:06.109
So why would I add this folder here?

20
00:01:06.109 --> 00:01:10.492
The only reason you would add a folder of
a parentheses and Next.js app directory,

21
00:01:10.492 --> 00:01:14.873
is because there's more than one route in
there and you need them to share a layout,

22
00:01:14.873 --> 00:01:17.869
but you don't want to
create a new URL segment.

23
00:01:17.869 --> 00:01:22.757
So in this case, I want to be able to
go to slash sign in and slash sign up,

24
00:01:22.757 --> 00:01:25.376
and they share the exact same layout.

25
00:01:25.376 --> 00:01:30.000
And I don't want it to be slash AUTH slash
sign up or slash AUTH slash sign in,

26
00:01:30.000 --> 00:01:33.108
which is gross, so
I put parentheses around AUTH so

27
00:01:33.108 --> 00:01:38.742
it doesn't get included in the URL, but
I can still give them a common layout.

28
00:01:38.742 --> 00:01:40.966
That is the only reason, yes.

29
00:01:42.426 --> 00:01:45.039
&gt;&gt; Mark: Are the assumptions
about our understanding of SSR,

30
00:01:45.039 --> 00:01:48.406
server components and caching and
next relevant for this course, or

31
00:01:48.406 --> 00:01:50.496
are we skipping that stuff on purpose?

32
00:01:50.496 --> 00:01:53.086
&gt;&gt; Scott Moss: We are 100%
skipping that stuff on purpose.

33
00:01:53.086 --> 00:01:55.903
We are in client land only.

34
00:01:55.903 --> 00:01:58.492
We're doing full client react SSR, and

35
00:01:58.492 --> 00:02:02.001
server components has nothing
to do with any of this.

36
00:02:02.001 --> 00:02:06.842
I think server components completely
breaks people's mental models on

37
00:02:06.842 --> 00:02:08.676
how you actually get data.

38
00:02:08.676 --> 00:02:11.304
I looked at the documentation
on like Urkel and Apollo and

39
00:02:11.304 --> 00:02:15.961
a lot of them are like, this is how you do
GraphQL queries with server components.

40
00:02:15.961 --> 00:02:18.602
But I still can't reconcile why you
would ever do it in the first place,

41
00:02:18.602 --> 00:02:20.791
when you can just go
straight to the database.

42
00:02:20.791 --> 00:02:23.779
Why would you even make a network
requests, leave the network,

43
00:02:23.779 --> 00:02:27.501
come back into the same network just to
get the data when you're already there?

44
00:02:27.501 --> 00:02:31.251
If you want the type safety, I get it,
but you can just make a database request.

45
00:02:31.251 --> 00:02:34.946
It makes sense if your GraphQL API was
on a third party, hosted somewhere else,

46
00:02:34.946 --> 00:02:36.781
obviously you have to do that.

47
00:02:36.781 --> 00:02:38.671
But in our example, it doesn't make sense.

48
00:02:38.671 --> 00:02:41.570
So I still think there's
a lot of patterns there and

49
00:02:41.570 --> 00:02:44.268
I don't wanna push my strong opinions yet,
but

50
00:02:44.268 --> 00:02:48.797
also it is just quite confusing if you've
never dealt with server components.

51
00:02:48.797 --> 00:02:53.946
And then SSR,
that's just a hard topic to understand.

52
00:02:53.946 --> 00:02:57.402
They make it seem so easy, but I don't
think anyone really understands what's

53
00:02:57.402 --> 00:03:00.704
actually happening on SSR, so yeah,
we're just avoiding all of that, and

54
00:03:00.704 --> 00:03:02.995
we're just gonna do straight
up client side react.

55
00:03:04.405 --> 00:03:08.319
But choosing Next.js because if you
go to the React documentation or

56
00:03:08.319 --> 00:03:12.246
getting started, the very first
thing they say is Donald Next.js.

57
00:03:12.246 --> 00:03:16.691
So that's what we're doing Next.js
because react recommends you use Next.js

58
00:03:16.691 --> 00:03:17.351
for react.

59
00:03:17.351 --> 00:03:20.497
&gt;&gt; Mark: The handle sign in
function doesn't have a type?

60
00:03:21.837 --> 00:03:26.267
When do you use types versus not?

61
00:03:26.267 --> 00:03:27.047
&gt;&gt; Scott Moss: That's a great question.

62
00:03:27.047 --> 00:03:28.177
When do I use types versus not?

63
00:03:28.177 --> 00:03:31.637
I'm not the right person to ask because
I don't like using types at all.

64
00:03:31.637 --> 00:03:33.947
I want them done for me,
but I don't wanna do them.

65
00:03:33.947 --> 00:03:37.677
So, [LAUGH] [COUGH] I just want them done.

66
00:03:37.677 --> 00:03:41.035
So really, my number one use case for
GPT is types.

67
00:03:41.035 --> 00:03:45.278
So I'll just go and like GPT fig types
do the types cuz I don't wanna make them

68
00:03:45.278 --> 00:03:50.505
because it seems like a waste of time, but
man, when they're there, they're so nice.

69
00:03:50.505 --> 00:03:53.519
So yeah, you'll see me not
doing types in some places, but

70
00:03:53.519 --> 00:03:56.245
then in some other places
I'll do the types.

71
00:03:56.245 --> 00:03:58.875
So there's no wrong answer or
types cuz they are always optional.

72
00:03:58.875 --> 00:03:59.674
You can ignore them.

73
00:04:00.925 --> 00:04:04.471
So I guess the question is
always do the types, but

74
00:04:04.471 --> 00:04:07.425
sometimes doing the types ain't fun.

75
00:04:07.425 --> 00:04:09.855
So, there it is.

76
00:04:09.855 --> 00:04:12.505
&gt;&gt; Mark: Assuming
a microservice architecture,

77
00:04:12.505 --> 00:04:16.820
what would be the advantage of having
a GraphQL layer instead of just

78
00:04:16.820 --> 00:04:20.849
calling the microservice API
directly from the Next.js app?

79
00:04:22.917 --> 00:04:27.155
&gt;&gt; Scott Moss: Assuming a microservice
architecture, what would be the benefit of

80
00:04:27.155 --> 00:04:31.573
having GraphQL versus just calling
the microservices from the API?

81
00:04:31.573 --> 00:04:39.722
A lot of the benefits would be obvious
when you do server side GraphQL.

82
00:04:40.743 --> 00:04:45.233
So, if you had a SLA,
a microservice oriented architecture,

83
00:04:45.233 --> 00:04:50.320
then that means you have smaller services,
like instead of having like

84
00:04:50.320 --> 00:04:55.321
a route that handles water resource,
you might have a whole service,

85
00:04:55.321 --> 00:04:59.333
a whole API on its own that
handles a specific resource.

86
00:04:59.333 --> 00:05:01.138
It might even have its own database.

87
00:05:01.138 --> 00:05:06.097
GraphQL is helpful in that regard, because
each one of those servers has their

88
00:05:06.097 --> 00:05:08.778
own protocol on how you retrieve data.

89
00:05:08.778 --> 00:05:09.838
They could be using GraphQL.

90
00:05:09.838 --> 00:05:11.158
They could be using REST.

91
00:05:11.158 --> 00:05:12.628
The types that come back are different.

92
00:05:12.628 --> 00:05:15.698
How you authenticate might be different,
depends on how you set it up.

93
00:05:15.698 --> 00:05:18.654
GraphQL will orchestrate all
of that into one schema.

94
00:05:18.654 --> 00:05:21.334
So you'll just have one main schema,

95
00:05:21.334 --> 00:05:26.973
that is aware of all the micro services
and the types of data they return.

96
00:05:26.973 --> 00:05:31.679
So when you're on the front end and
you're writing code, or if you're just any

97
00:05:31.679 --> 00:05:36.178
client querying that API, you won't
even know that when you're asking for

98
00:05:36.178 --> 00:05:39.342
a user and you're asking for
the user's settings and

99
00:05:39.342 --> 00:05:43.981
then their profile that that's coming
from three different microservices,

100
00:05:43.981 --> 00:05:47.245
because GraphQL can combine
them all into one schema.

101
00:05:47.245 --> 00:05:50.174
So when you make your query,
you're getting back that data and

102
00:05:50.174 --> 00:05:53.489
all you have to do is make one query
on the front end, but on the back end,

103
00:05:53.489 --> 00:05:56.888
the way it's resolved, we'll be
talking to all those microservices.

104
00:05:56.888 --> 00:06:01.849
So it's really great for abstracting
a way all the different microservices

105
00:06:01.849 --> 00:06:06.346
you might have into a trusted-typed
schema in which it is completely

106
00:06:06.346 --> 00:06:09.619
abstracted away from
the person on the front end.

107
00:06:09.619 --> 00:06:13.979
They don't know, this one field on
this query can come from Stripe,

108
00:06:13.979 --> 00:06:18.379
this other field next to it can
come from another microservice.

109
00:06:18.379 --> 00:06:20.972
This field over here could come
directly from this database.

110
00:06:20.972 --> 00:06:22.735
And the person on
the front end has no idea.

111
00:06:22.735 --> 00:06:26.114
So in that regard,
it's quite useful, because,

112
00:06:26.114 --> 00:06:29.975
yeah, GraphQL doesn't care
where your data comes from.

113
00:06:31.175 --> 00:06:32.265
Yes.

114
00:06:32.265 --> 00:06:38.616
&gt;&gt; Mark: How did you set the headers
in the next config for access control?

115
00:06:38.616 --> 00:06:42.145
How do you debug it to get the state
from the default settings?

116
00:06:42.145 --> 00:06:45.094
&gt;&gt; Scott Moss: What was
the question again?

117
00:06:45.094 --> 00:06:50.886
&gt;&gt; Mark: Setting the AUTH headers
in the config, The AUTH headers.

118
00:06:50.886 --> 00:06:52.539
&gt;&gt; Scott Moss: These are just cores so

119
00:06:52.539 --> 00:06:56.961
they're specifically talking
about the next config.

120
00:06:56.961 --> 00:07:03.927
This is course, this is me basically
setting up Cross-Origin Resource Sharing.

121
00:07:03.927 --> 00:07:05.695
You don't really need this for
this course.

122
00:07:05.695 --> 00:07:10.055
The reason I added this is because
that Star Wars API that we were using,

123
00:07:10.055 --> 00:07:14.853
you can actually put whatever URL you
want in there, you can put your localhost

124
00:07:14.853 --> 00:07:19.565
URL in there, and you can explore it,
but only if your API has CORS enabled.

125
00:07:19.565 --> 00:07:21.821
So I enabled Cores so
I can load it up in another app, but

126
00:07:21.821 --> 00:07:24.469
since then I actually figured out
how to embed that into our app,

127
00:07:24.469 --> 00:07:27.532
so we don't need to do that, and
that's what I was gonna show next.

128
00:07:27.532 --> 00:07:31.153
But yeah, this is Cores,
it's not authorization,

129
00:07:31.153 --> 00:07:35.122
Cores is basically something
a browser would do.

130
00:07:35.122 --> 00:07:39.678
It's called a preflight check, so before
you make a request to a server, something

131
00:07:39.678 --> 00:07:43.915
like a browser will go check that server
with an options request to like, hey,

132
00:07:43.915 --> 00:07:47.337
this client is trying to send you
a request, what do you allow?

133
00:07:47.337 --> 00:07:49.972
And the server has to respond
back with these headers,

134
00:07:49.972 --> 00:07:51.963
these are the things that I allow.

135
00:07:51.963 --> 00:07:53.183
I allow these things.

136
00:07:53.183 --> 00:07:54.403
I allow these things.

137
00:07:54.403 --> 00:07:57.821
So any origin, I allow these methods and
these headers and

138
00:07:57.821 --> 00:08:01.602
then the browser we get that back and
be like, okay, cool.

139
00:08:01.602 --> 00:08:04.340
Based on what the client is asking and
what the server allows,

140
00:08:04.340 --> 00:08:06.142
I'll allow it, here's your request.

141
00:08:06.142 --> 00:08:09.819
So sometimes if you go in your browser,
you'll see two requests for

142
00:08:09.819 --> 00:08:14.362
every one request you do, and that first
one is always like, it says options.

143
00:08:14.362 --> 00:08:15.142
That's what this is.

144
00:08:15.142 --> 00:08:17.412
This is the server
allowing that to happen.

145
00:08:17.412 --> 00:08:22.101
In production, unless you have an API
that developers are consuming,

146
00:08:22.101 --> 00:08:27.261
if it's just like some internal API,
you probably don't wanna have chorus,

147
00:08:27.261 --> 00:08:32.442
you probably wanna limit it to just the
URL in which your client is coming from.

148
00:08:32.442 --> 00:08:33.777
But obviously, if you have mobile or

149
00:08:33.777 --> 00:08:35.509
something like that,
that's not gonna work.

