WEBVTT

1
00:00:00.240 --> 00:00:04.810
&gt;&gt; Shirley Wu: Okay, so
the second thing that D3 helps us do,

2
00:00:06.200 --> 00:00:09.360
but needs access to the DOM,
is transitions.

3
00:00:09.360 --> 00:00:13.960
And so this is a slightly

4
00:00:13.960 --> 00:00:19.490
janky GIF of the animation.

5
00:00:19.490 --> 00:00:24.580
If you look at it in actuality it's quite
smooth, just please take my word for that.

6
00:00:26.640 --> 00:00:32.140
And the reason why D3 needs
direct access to the DOM and

7
00:00:32.140 --> 00:00:39.480
the way that it was designed is
that to do the transistions,

8
00:00:39.480 --> 00:00:43.730
what D3 does it you tell D3
the attributes that you want to animate.

9
00:00:43.730 --> 00:00:47.240
So in this case, I'm animating for
the bars, for example,

10
00:00:47.240 --> 00:00:52.400
I'm animating the Y position and
the height of each of these bars.

11
00:00:52.400 --> 00:00:57.660
And so to do that, D3 is like okay, give

12
00:00:57.660 --> 00:01:02.820
me the starting attributes, the starting y
end height, and the ending y end height.

13
00:01:02.820 --> 00:01:07.219
And I'm going to calculate all
of the steps in between to

14
00:01:07.219 --> 00:01:10.690
basically get from
the starting to the end.

15
00:01:10.690 --> 00:01:18.261
It just figures out and then, after it
figures out all of the in between points,

16
00:01:18.261 --> 00:01:23.475
it just goes and
updates the DOM attributes directly.

17
00:01:23.475 --> 00:01:28.098
So it will be like, okay,
going from y zero, y is one,

18
00:01:28.098 --> 00:01:31.428
let me figure out all of the in between.

19
00:01:31.428 --> 00:01:36.408
And then directly update
the attribute Y to all of those in

20
00:01:36.408 --> 00:01:40.578
between points so
that it can do the animation.

21
00:01:40.578 --> 00:01:45.211
And the reason why I've
asked around a little bit

22
00:01:45.211 --> 00:01:48.714
about React animation libraries and

23
00:01:48.714 --> 00:01:53.912
the way that in general React
recommends that you do for

24
00:01:53.912 --> 00:01:58.771
animations is that it asks
you at every single one of

25
00:01:58.771 --> 00:02:03.973
those in between points,
set state on the component.

26
00:02:03.973 --> 00:02:06.047
But if you can imagine,

27
00:02:06.047 --> 00:02:11.870
let's say this animation is
happening at 60 frames per second.

28
00:02:11.870 --> 00:02:17.140
That's If I remember correctly,
16 milliseconds.

29
00:02:17.140 --> 00:02:21.542
It's updating the DOM
every 16 milliseconds.

30
00:02:21.542 --> 00:02:26.142
If you can imagine having to set state
on your React component every 16

31
00:02:26.142 --> 00:02:30.053
milliseconds, like that might
be fine if you have just one or

32
00:02:30.053 --> 00:02:32.677
two elements that you want to do this on.

33
00:02:32.677 --> 00:02:35.863
Let's say you just have like a button
you're trying to animate or something.

34
00:02:35.863 --> 00:02:41.624
But, if you have a data visualization
that has this is only 300 elements but

35
00:02:41.624 --> 00:02:45.817
let's say you have 1,000 elements or
something and

36
00:02:45.817 --> 00:02:48.980
you're trying to animate the attribute.

37
00:02:48.980 --> 00:02:54.160
Like you're trying to set state
on the react component for

38
00:02:54.160 --> 00:02:57.460
300 something elements
every 16 milliseconds,

39
00:02:57.460 --> 00:02:59.830
your browser is not going
to be very happy at all.

40
00:02:59.830 --> 00:03:03.210
And your user's browser is not
going to be happy at all either.

41
00:03:04.650 --> 00:03:09.468
And so that's why I tend to use D3 for

42
00:03:09.468 --> 00:03:15.235
transitions or GreenSock for animations.

43
00:03:15.235 --> 00:03:20.301
And this is where I kind of
show you how to do it and

44
00:03:20.301 --> 00:03:27.161
tell you it's not the most recommended,
but it's how to do it.

45
00:03:27.161 --> 00:03:33.325
And this is probably the place where
React and D3 don't play nicely the most.

46
00:03:33.325 --> 00:03:35.331
This is the ugliest part.

47
00:03:35.331 --> 00:03:42.033
But how to do transitions, you want select
the elements that you want to animate.

48
00:03:42.033 --> 00:03:43.981
You want to bind that data.

49
00:03:43.981 --> 00:03:46.400
You want to call D3 transition on it.

50
00:03:46.400 --> 00:03:53.280
And then you want to give it
the attributes to animate.

51
00:03:53.280 --> 00:03:58.990
And then the key thing
to note here is that

52
00:03:58.990 --> 00:04:03.970
in the render function,
previously we were citing the y,

53
00:04:03.970 --> 00:04:08.310
the height, and
the fill in the render function.

54
00:04:09.350 --> 00:04:15.960
Now, we're not, because D3 is
now handling those attributes.

55
00:04:15.960 --> 00:04:21.290
So makes sure that React doesn't manage
the attributes that D3 is transitioning.

56
00:04:21.290 --> 00:04:24.660
So these three are no longer
in the render function.

57
00:04:26.450 --> 00:04:29.370
And that's the reason why
there's this big asterisk,

58
00:04:29.370 --> 00:04:33.330
because it works, it's performant,
but the code is really ugly.

59
00:04:33.330 --> 00:04:40.680
And especially if you work in a large team
and this doesn't get communicated clearly,

60
00:04:40.680 --> 00:04:46.160
then that's potentially how you
can get bugs to start happening.

61
00:04:46.160 --> 00:04:50.430
If somebody is like, why are the y and
the height missing from here?

62
00:04:50.430 --> 00:04:51.700
And they put it in here, or something.

63
00:04:53.030 --> 00:04:55.920
That's where it could
potentially be pretty bad.

64
00:04:55.920 --> 00:04:57.920
So, I don't highly recommend it.

65
00:04:57.920 --> 00:05:02.669
But it's unfortunately,

66
00:05:02.669 --> 00:05:09.694
I don't have a better solution for you.

67
00:05:09.694 --> 00:05:14.990
The only other solution I have is
usually what happens when I need

68
00:05:14.990 --> 00:05:20.108
transitions is I'll actually
not use React to render at all.

69
00:05:20.108 --> 00:05:23.789
I'll just get myself a group element and

70
00:05:23.789 --> 00:05:29.200
instead of using these React renders,
I'll go into D3 and

71
00:05:29.200 --> 00:05:34.192
I'll use enter update exit
to manage the whole thing.

72
00:05:34.192 --> 00:05:37.670
And so all React sees is
this empty group element.

73
00:05:37.670 --> 00:05:41.100
And then within there,
I'll be animating the bars myself.

74
00:05:41.100 --> 00:05:46.510
So there's no React manage is a part
of it, and D3 manages a part of it.

75
00:05:46.510 --> 00:05:49.510
It's D3 is managing absolutely everything.

76
00:05:49.510 --> 00:05:53.470
So that's what I would recommend if
you do have to do a lot of animations.

77
00:05:54.536 --> 00:05:59.730
Yeah, so
I haven't found a good way around it,

78
00:05:59.730 --> 00:06:03.620
and I don't think my friends have
found a good way around it either.

79
00:06:03.620 --> 00:06:07.330
So this is a use if you must,
but proceed with extreme caution.

