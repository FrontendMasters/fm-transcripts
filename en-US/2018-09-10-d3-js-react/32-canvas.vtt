WEBVTT

1
00:00:00.120 --> 00:00:01.465
&gt;&gt; Shirley Wu: And
then we have one last part.

2
00:00:01.465 --> 00:00:04.750
[LAUGH] And it’s Canvas.

3
00:00:04.750 --> 00:00:09.004
And I want to talk about Canvas really
quick, not only because it’s really,

4
00:00:09.004 --> 00:00:11.894
really important for
when you have large datasets.

5
00:00:11.894 --> 00:00:15.146
And I talk about large datasets as like,

6
00:00:15.146 --> 00:00:20.599
if you need to render any more
than let's say 2,000 SVG nodes,

7
00:00:20.599 --> 00:00:26.723
or if you have to have more than 1,000
something SVG nodes annimating or

8
00:00:26.723 --> 00:00:30.280
something, I would recommend Canvas.

9
00:00:30.280 --> 00:00:35.130
Although if you have more than 2 or 3,000
nodes on the screen, I would first like to

10
00:00:35.130 --> 00:00:40.580
ask you to consider why you have 2 or
3,000 plus nodes on the screen, and

11
00:00:40.580 --> 00:00:45.230
consider filtering it or aggregating it or
doing something to like bring it down.

12
00:00:45.230 --> 00:00:49.344
But if there's a really good reason as
to why you want all of those elements,

13
00:00:49.344 --> 00:00:51.606
Canvas is a really, really good option.

14
00:00:51.606 --> 00:00:58.342
And it's really performant because instead
of having a bunch of SVG elements,

15
00:00:58.342 --> 00:01:04.792
it's only one DOM element and that
we're quote unquote drawing shapes on.

16
00:01:04.792 --> 00:01:09.484
And so, it's kind of a different way of
thinking because whereas SVG elements,

17
00:01:09.484 --> 00:01:13.762
interactivity is really easy because
you can interact with each circle or

18
00:01:13.762 --> 00:01:16.601
each rectangle just like
any other DOM element.

19
00:01:16.601 --> 00:01:20.310
But with a Canvas,
it's literally what it sounds like.

20
00:01:20.310 --> 00:01:22.342
You have a canvas that you're drawing on.

21
00:01:22.342 --> 00:01:27.178
So as soon as you've drawn a circle,
you can't take that back,

22
00:01:27.178 --> 00:01:31.748
and you can't interact with it
because it's basically just

23
00:01:31.748 --> 00:01:36.421
a splotch of color that you've
put on to this Canvas element.

24
00:01:36.421 --> 00:01:41.599
Having said that, I do want to show
you how easy it is to do the things

25
00:01:41.599 --> 00:01:46.239
that we've been doing today
with Canvas and D3 and React.

26
00:01:46.239 --> 00:01:54.002
And so, how to do Canvas is in render
we want to do just like with SVG,

27
00:01:54.002 --> 00:01:58.227
we want to create a Canvas element and

28
00:01:58.227 --> 00:02:01.656
then set styles with height.

29
00:02:01.656 --> 00:02:05.494
And then this is, I believe,
the way to get it retina screen friendly.

30
00:02:05.494 --> 00:02:08.888
If you don't do this in Canvas,

31
00:02:08.888 --> 00:02:14.797
some of the edges look kind
of blurry on a retina screen,

32
00:02:14.797 --> 00:02:20.248
so if you do this magical thing,
it makes it crisp.

33
00:02:20.248 --> 00:02:24.506
And then,
what you want to do is you want to go and

34
00:02:24.506 --> 00:02:29.741
grab that Canvas element and
then you want to get context.

35
00:02:29.741 --> 00:02:35.532
So it's .getContext 2d and this is how
we're going to be drawing everything.

36
00:02:35.532 --> 00:02:42.357
So we're going to be drawing everything
on, I usually shorthand it to CTX context.

37
00:02:42.357 --> 00:02:45.658
And so, just like with SVG,

38
00:02:45.658 --> 00:02:51.301
you can draw circles,
you can draw rectangles,

39
00:02:51.301 --> 00:02:56.392
you can draw paths, and
you can draw text but

40
00:02:56.392 --> 00:03:01.225
the commands are a little bit different.

41
00:03:01.225 --> 00:03:07.120
SVG is dominoes and
it looks like HTML, right?

42
00:03:07.120 --> 00:03:11.510
But Canvas is strictly, I want to say

43
00:03:11.510 --> 00:03:16.650
it's strictly JavaScript, and so you have
to draw all of these for your JavaScript.

44
00:03:16.650 --> 00:03:21.570
I think,
I haven't confirmed the opposite, but so

45
00:03:21.570 --> 00:03:26.830
that context that we grabbed earlier
if we want to draw a rectangle we say,

46
00:03:26.830 --> 00:03:30.713
fillRect and these should look
familiar to you to fillRect.

47
00:03:30.713 --> 00:03:36.230
It's x, y, width, height or
if you want to only give it an outline,

48
00:03:36.230 --> 00:03:39.530
StrokeRect the same exact attributes.

49
00:03:39.530 --> 00:03:44.510
And to do a circle,
it's a little bit more tedious.

50
00:03:44.510 --> 00:03:49.000
You have to tell it to begin
a path because in Canvas,

51
00:03:49.000 --> 00:03:52.060
the circle is apparently
a special type of a path.

52
00:03:52.060 --> 00:03:56.465
So begin path and this is like,
the move to in the SVG

53
00:03:56.465 --> 00:04:00.986
path where you say,
I'm going to start a new shape.

54
00:04:00.986 --> 00:04:07.044
And then an arc is xy, the radius,
the start angle which is usually zero,

55
00:04:07.044 --> 00:04:12.144
the end angle which is usually 2 pi,
and the anticlockwise.

56
00:04:12.144 --> 00:04:15.264
This just gives you a little bit
more options so that you can draw,

57
00:04:15.264 --> 00:04:17.385
I don't know, a semicircle or something?

58
00:04:17.385 --> 00:04:22.209
I've actually never really seen anybody
do that but if you want to do that or

59
00:04:22.209 --> 00:04:24.365
maybe I've seen people do that.

60
00:04:24.365 --> 00:04:31.505
And then you have to tell Canvas context
to fill that circle or to stroke it.

61
00:04:31.505 --> 00:04:36.359
And again, with paths you can also do,
you can give it commands

62
00:04:36.359 --> 00:04:40.755
to you can chain a bunch of
commands to move to somewhere,

63
00:04:40.755 --> 00:04:44.898
draw a line to somewhere,
draw a curve to somewhere.

64
00:04:44.898 --> 00:04:48.711
And then once you're finished drawing
that shape, drawing that path,

65
00:04:48.711 --> 00:04:51.344
you can tell it to fill or
you can tell it to stroke.

