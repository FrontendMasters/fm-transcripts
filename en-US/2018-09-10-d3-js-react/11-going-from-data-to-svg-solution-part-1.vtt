WEBVTT

1
00:00:00.100 --> 00:00:06.839
&gt;&gt; Shirley Wu: For this example,
what we want to do is take this data,

2
00:00:06.839 --> 00:00:14.467
use the date, map the date to
the x position using time scale.

3
00:00:14.467 --> 00:00:19.783
And I made a tiny little change
earlier during the break,

4
00:00:19.783 --> 00:00:27.335
which is use the high temperature to map
to the y position using the linear scale.

5
00:00:27.335 --> 00:00:32.959
And calculate the height of each
of the bars as the difference

6
00:00:32.959 --> 00:00:38.480
between the high and
low temperatures, with an Asterisk.

7
00:00:38.480 --> 00:00:44.468
And then using all of those, return an
array of object where each object has x,

8
00:00:44.468 --> 00:00:50.459
y, and height attributes that will be
mapped to the SVG rectangle elements and

9
00:00:50.459 --> 00:00:52.035
their attributes.

10
00:00:52.035 --> 00:00:54.688
So let's go through this together,
and let's,

11
00:00:54.688 --> 00:00:58.178
while we're going through it,
console.log a bunch of things.

12
00:00:58.178 --> 00:01:03.109
So we can get, hopefully, an intuitive
understanding of how all of this works.

13
00:01:04.470 --> 00:01:11.610
So the very first thing I wanna do is I
want to map the date to the exposition.

14
00:01:12.830 --> 00:01:18.792
And so, the very first thing we
need to do is get the min and max.

15
00:01:18.792 --> 00:01:22.584
Let me make this bigger.

16
00:01:22.584 --> 00:01:26.823
So get min and max of the date, so

17
00:01:26.823 --> 00:01:33.418
to do that I just sent to
use extent d3.extent and

18
00:01:33.418 --> 00:01:39.708
I pass in my data array and
I give it an accessor.

19
00:01:39.708 --> 00:01:46.800
So basically, telling d3 that for every
while we're looping through the data,

20
00:01:46.800 --> 00:01:52.553
get the date of each object and
then give me back the minimum date and

21
00:01:52.553 --> 00:01:57.251
maximum date.
&gt;&gt; Shirley Wu: And

22
00:01:57.251 --> 00:02:01.506
I'm going to console.log my extent,
shift enter, and

23
00:02:01.506 --> 00:02:06.750
then you'll see it's a minimum,
where the minimum is January 1st.

24
00:02:06.750 --> 00:02:07.870
It's an array.

25
00:02:07.870 --> 00:02:10.770
Where the minimum,
the first one is January 1st and

26
00:02:10.770 --> 00:02:13.130
the second one is December 31st.

27
00:02:13.130 --> 00:02:16.020
And that's the minimum and
maximum of your date.

28
00:02:17.970 --> 00:02:24.405
That's super simple in d3,
to get the min and max.

29
00:02:24.405 --> 00:02:28.962
And then, we want to pass the minimum and

30
00:02:28.962 --> 00:02:33.930
maximum into the time
scale that we create.

31
00:02:33.930 --> 00:02:40.770
So xScale, and
I tend to call it whatever the screen

32
00:02:40.770 --> 00:02:46.840
space thing is going to be,
so xScale = d3.

33
00:02:46.840 --> 00:02:51.890
And it we said, let's use a time scale,
so d3.scaleTime pass

34
00:02:51.890 --> 00:02:58.800
in the domain that we just calculated and
the range.

35
00:03:00.210 --> 00:03:05.094
And we want the range to be the minimum,
the January 1st,

36
00:03:05.094 --> 00:03:11.548
we wanted to be at positions 0.
&gt;&gt; Shirley Wu: And

37
00:03:11.548 --> 00:03:17.790
then, we want the December 31st
to be whatever our width is and

38
00:03:17.790 --> 00:03:25.036
I've defined our width as 650.
&gt;&gt; Shirley Wu: So that's the xScale.

39
00:03:25.036 --> 00:03:30.060
And now let's take a look at so
I think was it Derek that

40
00:03:30.060 --> 00:03:35.930
noticed that if you could just console
log the xScale it's just a function.

41
00:03:35.930 --> 00:03:41.660
So this is a function that
takes in you want to pass in,

42
00:03:41.660 --> 00:03:44.180
in this case you want to
pass in a date object.

43
00:03:44.180 --> 00:03:47.230
Because you've defined it as scaled time.

44
00:03:47.230 --> 00:03:51.147
So you want to pass in,
let's just try passing in for

45
00:03:51.147 --> 00:03:55.808
example,
&gt;&gt; Shirley Wu: Let's

46
00:03:55.808 --> 00:03:59.719
start with January 1st, 2017.

47
00:03:59.719 --> 00:04:04.890
Let me clear this.
&gt;&gt; Shirley Wu: Look, it gives me back a 0.

48
00:04:04.890 --> 00:04:07.581
And which is just exactly as we expect.

49
00:04:07.581 --> 00:04:12.877
Let's try February 1st,
which is apparently 55.35, so

50
00:04:12.877 --> 00:04:17.891
that's gonna be our x position,
it's gonna be our pixels.

51
00:04:17.891 --> 00:04:23.733
And then,
if we do June 1st it's at 269 pixels.

52
00:04:23.733 --> 00:04:29.590
And if we do December 31st,
wait, that's not 31st.

53
00:04:29.590 --> 00:04:31.990
December 31st, it's at 650 pixels.

54
00:04:33.070 --> 00:04:36.930
Super useful, because imagine
having to calculate yourself and

55
00:04:36.930 --> 00:04:40.360
going between dates to expositions.

56
00:04:40.360 --> 00:04:42.430
Imagine having to do this yourself.

57
00:04:42.430 --> 00:04:46.210
I feel like that would be
half my day right there.

58
00:04:46.210 --> 00:04:48.770
But makes it really really easy for you.

59
00:04:50.240 --> 00:04:51.450
So that's the xScale.

60
00:04:52.530 --> 00:04:56.950
That's all good,
then let's calculate the same thing for

61
00:04:56.950 --> 00:05:02.760
the y, so I am just gonna call it yExtent,
cuz I already used extent there.

62
00:05:02.760 --> 00:05:07.480
And I am gonna do the exact same thing but
this time.

63
00:05:07.480 --> 00:05:10.780
So this I am trying to do with map,

64
00:05:10.780 --> 00:05:15.276
I'm trying to map the high
temperature to the y position.

65
00:05:15.276 --> 00:05:19.910
So get the min/max of
the high temperature.

66
00:05:20.950 --> 00:05:26.160
So exactly the same code as above, d.high.

67
00:05:26.160 --> 00:05:30.990
So I'm telling d3, hey, loop through my
data object, access the high temperature,

68
00:05:30.990 --> 00:05:34.420
the high attribute, and
give me back the min and max of that.

69
00:05:35.900 --> 00:05:43.887
And let me console log that.
&gt;&gt; Shirley Wu: And

70
00:05:43.887 --> 00:05:48.688
the min and
max of my high temperature is 49 and

71
00:05:48.688 --> 00:05:54.277
104.
&gt;&gt; Shirley Wu: And

72
00:05:54.277 --> 00:05:56.510
again, we want to create a scale.

73
00:05:56.510 --> 00:06:02.850
This time, a yScale, d3.scaleLinear().

74
00:06:02.850 --> 00:06:05.370
Again, pass in this extent.

75
00:06:05.370 --> 00:06:10.360
This 49 to 104 and

76
00:06:10.360 --> 00:06:14.160
I want to map the 49 degrees.

77
00:06:14.160 --> 00:06:19.980
I want to map that because it's going
to be lowered down on the screen,

78
00:06:19.980 --> 00:06:23.990
I want to map that to what
I define as height and

79
00:06:23.990 --> 00:06:27.020
I define height up here as 400 pixels.

80
00:06:27.020 --> 00:06:33.700
So I basically want to map
the 49 degrees to 400 pixels

81
00:06:33.700 --> 00:06:39.270
down on the screen, and
I want to map my 104,

82
00:06:39.270 --> 00:06:44.196
my highest temperature to
the highest part of my screen which

83
00:06:44.196 --> 00:06:49.430
would be 0 pixels in the y coordinate.

84
00:06:50.980 --> 00:06:56.011
And then now if we console.log,
let's say we want

85
00:06:56.011 --> 00:07:02.095
to look at how much 49 degrees is and
it's of 400 pixels.

86
00:07:02.095 --> 00:07:07.062
Let's say, I'm curious about
70 degrees that's I wait,

87
00:07:07.062 --> 00:07:12.134
let me stop console log in extend and
that's at 247 pixels.

88
00:07:12.134 --> 00:07:16.249
And then for 104 degrees,

89
00:07:16.249 --> 00:07:21.040
that's at 0 pixels in the y axis.

90
00:07:21.040 --> 00:07:27.460
So that's why, so that's the scales.
&gt;&gt; Speaker 2: What's

91
00:07:27.460 --> 00:07:30.870
the difference between scale time and
scaling here, are they the same?

92
00:07:30.870 --> 00:07:33.170
Can you use either one?
&gt;&gt; Shirley Wu: Yes,

93
00:07:33.170 --> 00:07:34.110
that's a great question.

94
00:07:34.110 --> 00:07:39.310
So they're similar in that they
both take continuous domains and

95
00:07:40.670 --> 00:07:42.720
they output continuous ranges.

96
00:07:42.720 --> 00:07:46.070
But the only difference
is that with scale time,

97
00:07:46.070 --> 00:07:49.680
it specifically takes in
JavaScript date objects.

98
00:07:49.680 --> 00:07:54.550
And scale linear takes in integers and
numbers or numbers, yeah.

99
00:07:54.550 --> 00:07:56.670
So yeah, they both output numbers though.

100
00:07:57.710 --> 00:08:00.640
That's a great question.
&gt;&gt; Speaker 2: Do you have

101
00:08:00.640 --> 00:08:04.910
to use a date object or you could use
like a Unix time stamp like a string.

102
00:08:04.910 --> 00:08:08.024
&gt;&gt; Shirley Wu: For scale time I believe

103
00:08:08.024 --> 00:08:15.730
it has to be a date object.

104
00:08:15.730 --> 00:08:21.945
But let me double check, because I
would think if you do a Unix timestamp

105
00:08:21.945 --> 00:08:27.229
you could probably just do
linear because it's technically

106
00:08:27.229 --> 00:08:32.549
a number.
&gt;&gt; Shirley Wu: Scale

107
00:08:32.549 --> 00:08:37.620
time that have a temporal
domain are course to dates.

108
00:08:37.620 --> 00:08:44.991
So I guess if you want to pass in domain
by user coarse to dates JavaScript dates,

109
00:08:44.991 --> 00:08:50.008
rather than numbers.
&gt;&gt; Shirley Wu: Yeah,

110
00:08:50.008 --> 00:08:53.112
and we'll get in to this later on, but

111
00:08:53.112 --> 00:08:57.775
scale time is really great for
when you want to draw axes.

112
00:08:57.775 --> 00:09:02.774
Because it will naturally just pull
out the months or years to display in

113
00:09:02.774 --> 00:09:08.105
the axes where as scale linear if you
just did the Unix timestamp, if you ever

114
00:09:08.105 --> 00:09:13.137
drew the axes it would just be those
numbers and no one wants to see that.

115
00:09:13.137 --> 00:09:18.898
So I mean its pretty easy to
coarse into JavaScript dates.

116
00:09:18.898 --> 00:09:22.810
So passing the dates.

117
00:09:22.810 --> 00:09:26.250
I think it, yeah,
I think its required to be.

118
00:09:26.250 --> 00:09:32.001
It looks like its, it looks like

119
00:09:32.001 --> 00:09:37.967
it's expecting a date, right?

120
00:09:37.967 --> 00:09:42.809
Or maybe it says its coarse dates.

121
00:09:42.809 --> 00:09:49.631
Yeah, in general,
use JavaScript dates for scale time.

122
00:09:49.631 --> 00:09:56.329
Okay, and then we said, that we
want to return an array of objects,

123
00:09:56.329 --> 00:10:01.864
with each object having x,
y, and height attributes.

124
00:10:01.864 --> 00:10:08.128
Okay, data.map, and
we want to loop through the data,

125
00:10:08.128 --> 00:10:12.173
and for each data point we want to be,

126
00:10:12.173 --> 00:10:19.629
actually even before we do that
let's console log and see our data.

127
00:10:19.629 --> 00:10:22.875
We have a date object, the average
temperature, high temperature and

128
00:10:22.875 --> 00:10:23.749
low temperature.

129
00:10:23.749 --> 00:10:29.543
And so, using that I want to return for

130
00:10:29.543 --> 00:10:33.888
the x position, I want to use

131
00:10:33.888 --> 00:10:39.514
the xScale that we defined earlier.

132
00:10:39.514 --> 00:10:41.892
And I'm going to use d.date and

133
00:10:41.892 --> 00:10:46.383
for the y I'm going to use the yScale
I use earlier and then for

134
00:10:46.383 --> 00:10:52.220
the yScale I used d.high, so this time
around I'm also going to use d.high.

135
00:10:53.580 --> 00:10:58.990
And for the height I define
that as low minus high.

136
00:11:00.750 --> 00:11:08.180
And it has to be the y position of
the low minus the y position of the high.

137
00:11:08.180 --> 00:11:12.440
It can't just be low minus high,
the temperatures themselves,

138
00:11:12.440 --> 00:11:14.100
cause then that wouldn't
be the right height,

139
00:11:14.100 --> 00:11:18.540
it has to be the y position of the low
minus the y position of the highs, so

140
00:11:18.540 --> 00:11:24.198
we're gonna do the yScale(d.low),
minus yScale(d.high).

141
00:11:24.198 --> 00:11:27.613
And so,
&gt;&gt; Shirley Wu: if we just do

142
00:11:27.613 --> 00:11:32.549
that
&gt;&gt; Shirley Wu: We'll see that for

143
00:11:32.549 --> 00:11:37.890
each of the objects we have the x
position, the y position and

144
00:11:37.890 --> 00:11:43.431
the height calculated.
&gt;&gt; Shirley Wu: And

145
00:11:43.431 --> 00:11:47.110
we'll see right here our black bars,
actually,

146
00:11:47.110 --> 00:11:53.080
let me keep with the code, and then
you can see the black bars yourselves.

147
00:11:53.080 --> 00:11:58.170
If you don't write all of this down,
I have the full code.

148
00:11:58.170 --> 00:12:00.950
If you go into my slides
where it says full notebook,

149
00:12:00.950 --> 00:12:06.520
it has all of the code there, so
you can go back and take a look at it, but

150
00:12:06.520 --> 00:12:12.140
don't look ahead in the full one or else
it defeats the point of the exercises.

151
00:12:12.140 --> 00:12:15.730
But yeah, even if you don't have it all
written down, it's going to be okay.

152
00:12:17.260 --> 00:12:21.770
Yeah, is there any part of
this that you want me to

153
00:12:21.770 --> 00:12:26.722
explain in more detail,
explain in a different way.

154
00:12:26.722 --> 00:12:30.598
I just want to make sure all of this
stick intuitively in your heads,

155
00:12:30.598 --> 00:12:35.358
because I think these are some of the most
important parts of d3 that you probably be

156
00:12:35.358 --> 00:12:38.962
using over and over again when
you're building charts whether

157
00:12:38.962 --> 00:12:41.510
with react or not.
&gt;&gt; Speaker 3: Can you talk about

158
00:12:41.510 --> 00:12:46.151
how you're getting the height?
&gt;&gt; Shirley Wu: Yes, so

159
00:12:46.151 --> 00:12:54.441
let's actually console log that.

160
00:12:54.441 --> 00:12:58.011
So let's do it this way.

161
00:12:58.011 --> 00:13:03.675
So this right here, this yExtent is
the min and max of the height, right?

162
00:13:03.675 --> 00:13:06.584
So let's just together do this exercise.

163
00:13:06.584 --> 00:13:12.096
Let's get the min max of the,
do you mean like how I'm getting it or

164
00:13:12.096 --> 00:13:15.075
why I'm doing it that way?
&gt;&gt; Speaker 3: Why you're doing it that

165
00:13:15.075 --> 00:13:19.142
way.
&gt;&gt; Shirley Wu: Okay, so let's do the min

166
00:13:19.142 --> 00:13:23.036
and max of the high temp and

167
00:13:23.036 --> 00:13:27.654
then a min and max of the low temp

168
00:13:29.196 --> 00:13:34.305
&gt;&gt; Shirley Wu: So let's say highExtent =

169
00:13:34.305 --> 00:13:40.533
d3.extent(data d.high).

170
00:13:40.533 --> 00:13:45.250
And then, same thing is equal to

171
00:13:45.250 --> 00:13:52.603
d3.extent(data d.low)
&gt;&gt; Shirley Wu: And

172
00:13:52.603 --> 00:13:57.950
you'll see, hopefully,
once I console log these.

173
00:13:59.120 --> 00:14:02.020
And this you don't have to copy down,
this I just want to show.

174
00:14:02.020 --> 00:14:06.970
Okay, so here you'll see that for,

175
00:14:06.970 --> 00:14:11.510
let me make this easier to read.

176
00:14:13.340 --> 00:14:18.240
And so you'll see that for
the high temperatures, the min is 49 and

177
00:14:18.240 --> 00:14:24.730
the max is 104, and the low the min
is 11 and the maximum is 72.

178
00:14:24.730 --> 00:14:29.300
So this is the min and max of these two
temperatures throughout the whole year.

179
00:14:31.140 --> 00:14:35.620
And the reason why I'm,
I think there's probably two part to that,

180
00:14:35.620 --> 00:14:38.250
two answers,
two parts of the answer to that question.

181
00:14:38.250 --> 00:14:43.145
The first part is I'm guessing why not,
cuz I made it sound like in

182
00:14:43.145 --> 00:14:47.604
my instructions to subtract
the low from the high, right?

183
00:14:47.604 --> 00:14:51.154
So why not just subtract this
number from this number or

184
00:14:51.154 --> 00:14:53.168
this number from this number.

185
00:14:53.168 --> 00:14:58.403
And that's because this is the raw data,

186
00:14:58.403 --> 00:15:03.339
whereas the height that we want is the,

187
00:15:03.339 --> 00:15:09.337
let me try and
figure out how to talk about this.

188
00:15:09.337 --> 00:15:12.868
So first of all,
if we subtract the low from the high,

189
00:15:12.868 --> 00:15:17.040
that would be 11 minus 49 and
it would be a negative number.

190
00:15:17.040 --> 00:15:20.110
And widths and
heights don't take negative numbers.

191
00:15:20.110 --> 00:15:26.350
That's one, but the more important part
is that when we talk about height,

192
00:15:26.350 --> 00:15:29.900
it's the height of the bar,
the height of the bar in the screen space.

193
00:15:29.900 --> 00:15:34.580
So then we want to be subtracting

194
00:15:34.580 --> 00:15:39.320
screen spaces or basically coordinates.
&gt;&gt; Speaker 2: The location on the graph-

195
00:15:39.320 --> 00:15:39.930
&gt;&gt; Shirley Wu: Yes, thank you.

196
00:15:39.930 --> 00:15:41.115
&gt;&gt; Speaker 2: Actual data points, okay.

197
00:15:41.115 --> 00:15:41.846
&gt;&gt; Shirley Wu: Thank you so much.

198
00:15:41.846 --> 00:15:42.569
&gt;&gt; Speaker 2: I understand.

199
00:15:42.569 --> 00:15:43.877
&gt;&gt; Shirley Wu: Yeah, location of

200
00:15:43.877 --> 00:15:46.500
the graph, location in the screen.

201
00:15:46.500 --> 00:15:51.850
And that's why we can't, actually,
we can probably do this.

202
00:15:53.150 --> 00:15:54.910
No, we can't do that, never mind.

203
00:15:54.910 --> 00:15:58.869
We can't do a d.low- d.high and
then do the yScale.

204
00:15:58.869 --> 00:16:04.073
We have to first get the location
of the lower temperature and

205
00:16:04.073 --> 00:16:09.696
then subtract that from the location
of the higher temperature.

206
00:16:09.696 --> 00:16:15.932
And it's also very specifically has to be
the low minus the high because the low is

207
00:16:15.932 --> 00:16:20.990
further down on the screen and
the high is higher up in the screen.

208
00:16:20.990 --> 00:16:23.213
So that's why those two parts,

209
00:16:23.213 --> 00:16:28.331
y has to be converted to yScale both
of them have to be converted to yScale.

210
00:16:28.331 --> 00:16:34.620
That's also the reason for
the order of which one gets subtracted.

211
00:16:34.620 --> 00:16:40.540
Yeah, thank you so much for
letting me make that clarification.

212
00:16:40.540 --> 00:16:43.836
And then, let's look up this.

213
00:16:43.836 --> 00:16:48.967
You might actually see something that's
unexpected, which is that the lower

214
00:16:48.967 --> 00:16:53.957
some of the lower temperatures are going
of the screen and that makes sense.

215
00:16:53.957 --> 00:16:58.401
Because we defined our domain, so

216
00:16:58.401 --> 00:17:04.069
if we take a look at our
yScale we told it hey,

217
00:17:04.069 --> 00:17:09.460
map the minimum of the high to the bottom.

218
00:17:09.460 --> 00:17:13.490
But if you notice, the minimum
of the height is 49 degrees, but

219
00:17:13.490 --> 00:17:17.700
then there are some temperatures, low
temperatures, that are lower than that.

220
00:17:17.700 --> 00:17:20.209
The lowest for
the low temperatures are 11.

221
00:17:20.209 --> 00:17:26.861
And that's why it's going below
the screen, sorry, below.

222
00:17:26.861 --> 00:17:31.749
And remember earlier when we were talking
about viewports and how I think of SVG

223
00:17:31.749 --> 00:17:36.191
as just like we draw like the outside
world is where we draw the shapes and

224
00:17:36.191 --> 00:17:39.322
then the SVG is just
basically a window into that?

225
00:17:39.322 --> 00:17:44.095
So we've basically drawn
all of these bars,

226
00:17:44.095 --> 00:17:48.501
but some of them just go below our window.

227
00:17:48.501 --> 00:17:53.518
And so, to fix that, we actually need to

228
00:17:53.518 --> 00:17:58.684
say something along the lines of, okay,

229
00:17:58.684 --> 00:18:03.997
so we don’t want the range, we don’t want

230
00:18:03.997 --> 00:18:09.310
the range to be mapped from 49 to 104,

231
00:18:09.310 --> 00:18:14.180
we actually want it to be, let's say,

232
00:18:14.180 --> 00:18:18.754
min, max, and we want it to be from,

233
00:18:18.754 --> 00:18:23.650
we actually want something like this.

234
00:18:23.650 --> 00:18:28.944
So for the minimum,
I want it to be either 0

235
00:18:28.944 --> 00:18:36.149
if this number is above 0,
I want the minimum to be 0, and

236
00:18:36.149 --> 00:18:43.077
if this number is negative,
I want it to be that number.

237
00:18:43.077 --> 00:18:44.397
And that way.

238
00:18:50.316 --> 00:18:53.765
&gt;&gt; Shirley Wu: We can have all of our bars

239
00:18:53.765 --> 00:18:57.222
fit in to the SVG window.

