WEBVTT

1
00:00:00.060 --> 00:00:05.280
&gt;&gt; Shirley Wu: Let's do the radial chart
together, because it's the same concept.

2
00:00:07.200 --> 00:00:12.252
So, let's just really quickly grab
the data for the radial chart.

3
00:00:17.425 --> 00:00:18.868
&gt;&gt; Shirley Wu: Then, in this case,

4
00:00:18.868 --> 00:00:24.004
I have to go to the starter code.
&gt;&gt; Shirley Wu: And

5
00:00:24.004 --> 00:00:27.542
then I already grabbed the data for

6
00:00:27.542 --> 00:00:32.544
the radial chart,
just copy and paste that in and

7
00:00:32.544 --> 00:00:39.405
then instead of returning let me
call that slices is equal to that.

8
00:00:39.405 --> 00:00:44.418
Return slices as state,
make sure that slices diff

9
00:00:44.418 --> 00:00:50.375
is defined in the initial state
as an empty array, and then,

10
00:01:03.461 --> 00:01:07.544
&gt;&gt; Shirley Wu: Loop through those slices,

11
00:01:07.544 --> 00:01:11.798
this.state.slices and for

12
00:01:11.798 --> 00:01:17.410
each one of them create a path element,

13
00:01:17.410 --> 00:01:22.512
and use d.path as the d attribute,

14
00:01:22.512 --> 00:01:26.781
and use fill to color them in.

15
00:01:26.781 --> 00:01:30.723
And then,
&gt;&gt; Shirley Wu: Yay, so

16
00:01:30.723 --> 00:01:33.159
it gets drawn right here.

17
00:01:35.400 --> 00:01:37.743
So the bars are getting
drawn right here and

18
00:01:37.743 --> 00:01:40.685
you might be like why is it
getting drawn right there?

19
00:01:40.685 --> 00:01:44.516
And that's because when we
did the arcs generator,

20
00:01:44.516 --> 00:01:48.531
the arcs generator assumes
the center to be at 0,0.

21
00:01:48.531 --> 00:01:53.390
So what we need to do is
do an SVG transformation.

22
00:01:54.900 --> 00:02:04.010
So wrap that around.
&gt;&gt; Shirley Wu: In a group element.

23
00:02:06.480 --> 00:02:13.040
And so group elements are the only
SVG elements that can have children.

24
00:02:13.040 --> 00:02:18.690
So with HTML, you can have children in
pretty much almost every element, right?

25
00:02:18.690 --> 00:02:19.930
But with SVG,

26
00:02:19.930 --> 00:02:24.390
the only elements that can have children
nested inside of it are group elements.

27
00:02:24.390 --> 00:02:29.190
And then you want to put SVG elements
within the group elements, so

28
00:02:29.190 --> 00:02:32.250
that you can transform it
to get it all together.

29
00:02:32.250 --> 00:02:37.147
So, in this case, I want to say that
everything within this group element,

30
00:02:37.147 --> 00:02:44.829
please move it.
&gt;&gt; Shirley Wu: So

31
00:02:44.829 --> 00:02:49.962
please move it, and
moving an SVG is called translating,

32
00:02:49.962 --> 00:02:53.310
so move it by half of the width.

33
00:02:53.310 --> 00:02:57.680
And actually, if you wanna see.

34
00:02:57.680 --> 00:03:04.514
So that moves it to the center and
then please move it by half of the height,

35
00:03:04.514 --> 00:03:08.934
and that will move it down
to where it should be.

36
00:03:08.934 --> 00:03:13.631
And that's all it takes to

37
00:03:13.631 --> 00:03:18.340
draw the slices in React.

38
00:03:18.340 --> 00:03:22.980
And so this is actually probably
the easiest part of this whole workshop.

39
00:03:22.980 --> 00:03:26.940
I want to talk really briefly
about in this exercise,

40
00:03:26.940 --> 00:03:31.100
we did all of the data calculations and
get derived state from props.

41
00:03:31.100 --> 00:03:34.350
But I did mention that
there is other options and

42
00:03:34.350 --> 00:03:38.320
so this was one of
the suggestions I've gotten of

43
00:03:38.320 --> 00:03:43.340
putting the calculations in both
componentDidMount, and componentDidUpdate.

44
00:03:43.340 --> 00:03:49.240
And then so in this particular example,
we have the data calculation in a separate

45
00:03:49.240 --> 00:03:54.470
function, and after we calculate all
of the data, we set that as state.

46
00:03:54.470 --> 00:03:58.024
And then in componentDidUpdate,

47
00:03:58.024 --> 00:04:03.170
we check to make sure that
something has changed,

48
00:04:03.170 --> 00:04:10.170
so we use some sort of a prop to make
sure that something has changed.

49
00:04:10.170 --> 00:04:16.794
Only if something has changed with
the data do we recalculate the data.

50
00:04:16.794 --> 00:04:21.434
In this one, just to make sure that
the component is already rendered

51
00:04:21.434 --> 00:04:24.110
before we calculate the data.

52
00:04:24.110 --> 00:04:29.380
So this is another option that we can do.

53
00:04:31.020 --> 00:04:34.210
We just didn't do it in the example
cuz it just takes a few more lines.

54
00:04:34.210 --> 00:04:37.108
But I think this is a really
good suggestion also.

55
00:04:37.108 --> 00:04:42.198
As long as there's some easy way for
you to figure

56
00:04:42.198 --> 00:04:48.420
out if the data has updated or
not, so this is the main part.

57
00:04:50.260 --> 00:04:53.345
So this is the architecture for
React rendering.

