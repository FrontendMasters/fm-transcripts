WEBVTT

1
00:00:00.240 --> 00:00:03.480
&gt;&gt; Shirley Wu: I want to
show you the D3 API again.

2
00:00:03.480 --> 00:00:09.390
I want to break it down so that you
know which parts of the D3 API might

3
00:00:09.390 --> 00:00:15.590
be relevant to you, and which parts
you can replace it with other things.

4
00:00:15.590 --> 00:00:21.670
So this is kind of what we
were talking about before.

5
00:00:21.670 --> 00:00:25.890
These are some of the,
I call it the, so the first section,

6
00:00:25.890 --> 00:00:28.060
this first column,
I call it data preparation.

7
00:00:28.060 --> 00:00:33.280
And this is how I think of like all of the
utility kind of like utility functions,

8
00:00:34.610 --> 00:00:39.380
where you could just use

9
00:00:39.380 --> 00:00:43.400
native JavaScript or low dash functions.

10
00:00:43.400 --> 00:00:45.550
This is like the D3 dot map.

11
00:00:45.550 --> 00:00:49.380
I'm sorry,
this is like the map functions, filter,

12
00:00:49.380 --> 00:00:54.750
reduce Is I think in a lot of these array
ones, I think in the transformations.

13
00:00:56.090 --> 00:01:00.230
The D3 min and max and
extend is under statistics.

14
00:01:00.230 --> 00:01:03.400
So each of the bolded
things are D3 modules.

15
00:01:03.400 --> 00:01:06.470
So, this is how you can find
it in the documentation.

16
00:01:06.470 --> 00:01:11.920
So like for D3 coords for example,
you can judy say D3 dash coord.

17
00:01:11.920 --> 00:01:16.096
And that's how you find
the documentation for

18
00:01:16.096 --> 00:01:19.353
it.
&gt;&gt; Shirley Wu: And then,

19
00:01:19.353 --> 00:01:22.720
each of these are subsections
within that module.

20
00:01:22.720 --> 00:01:29.280
So each of these little bolded
sections are modules of D3.

21
00:01:30.450 --> 00:01:34.640
And so these two sections,

22
00:01:34.640 --> 00:01:39.860
I mostly ignore because I end up
just using native array functions or

23
00:01:39.860 --> 00:01:44.410
lodash but it really depends on
what you feel comfortable with.

24
00:01:45.560 --> 00:01:50.680
This and the next part are what I think
is really the most powerful things

25
00:01:50.680 --> 00:01:55.820
about D3 and what makes it a unique
selling point of D3 for me.

26
00:01:55.820 --> 00:01:59.333
These are functions that are helpful for
getting the data ready for

27
00:01:59.333 --> 00:02:01.661
D3's scale/shape/layout functions.

28
00:02:01.661 --> 00:02:06.133
So you can see like this coord you
pass in raw data to this code,

29
00:02:06.133 --> 00:02:10.777
function and then that will return
the data that is necessary for

30
00:02:10.777 --> 00:02:15.425
this code, will then function
that will then give you the path.

31
00:02:15.425 --> 00:02:21.225
String, and similar things for
a nessen hierarchy will get you data

32
00:02:21.225 --> 00:02:26.615
that you can then pass into the hierarchy
section to get you back x-y positions.

33
00:02:26.615 --> 00:02:30.828
And pies are really helpful for
getting like this one,

34
00:02:30.828 --> 00:02:36.610
if you pass in an array of numbers,
it will give you back the start an angle.

35
00:02:36.610 --> 00:02:39.696
Radius, et cetera for the arcs.

36
00:02:39.696 --> 00:02:42.035
Which is what we just used.

37
00:02:42.035 --> 00:02:45.173
So, this, and I mispoke earlier, so

38
00:02:45.173 --> 00:02:49.598
this is really the unique
selling point of d3 for me.

39
00:02:49.598 --> 00:02:54.275
Because this is where d3 will help turn

40
00:02:54.275 --> 00:02:59.242
your raw data into what SVG needs to draw.

41
00:02:59.242 --> 00:03:01.553
This is how you can get XY positions.

42
00:03:01.553 --> 00:03:04.366
This is how you can get path strings,
et cetera.

43
00:03:04.366 --> 00:03:08.075
That otherwise, would be really hard for
you to do it yourself,

44
00:03:08.075 --> 00:03:12.040
or it would just take a lot of
calculations to do it for yourself.

45
00:03:12.040 --> 00:03:15.050
And I kind of want to show you some
of the things that are available.

46
00:03:15.050 --> 00:03:19.707
So, this whole time we've
been using D3 Shape and

47
00:03:19.707 --> 00:03:25.574
D3 Shape will help you draw pie charts,
so that's using arcs.

48
00:03:25.574 --> 00:03:31.938
It will help you create line charts.
&gt;&gt; Shirley Wu: Area

49
00:03:31.938 --> 00:03:36.234
charts if you want to do anything stacked.

50
00:03:41.250 --> 00:03:42.051
&gt;&gt; Shirley Wu: And then,

51
00:03:42.051 --> 00:03:47.391
we'll also help you do a stacked bar
chart and this stream graph thing,

52
00:03:47.391 --> 00:03:52.070
which I never fully understood
as a visualization.

53
00:03:52.070 --> 00:03:55.710
I think this is another one of those like
very controversial visualizations where

54
00:03:55.710 --> 00:03:57.160
some people are like, this is great!

55
00:03:57.160 --> 00:04:00.260
And then there's other people like
me that are like I don't get it.

56
00:04:02.080 --> 00:04:03.660
But it's possible with D3.

57
00:04:03.660 --> 00:04:08.310
And for each one of these, the way
that you read the documentation is it

58
00:04:08.310 --> 00:04:11.350
will always, always tell you
what it expects as an input.

59
00:04:11.350 --> 00:04:16.940
So for example it's saying, this one is
telling you D3 expects the data to be in

60
00:04:16.940 --> 00:04:21.950
this format and then it expects

61
00:04:21.950 --> 00:04:27.580
you to give this as kind of
the settings so this one in particular.

62
00:04:27.580 --> 00:04:32.420
Saying like to create stack bar chart,
you need to give me this kind of data.

63
00:04:32.420 --> 00:04:36.380
And then, you need to tell me what
the keys are to make the stacks

64
00:04:36.380 --> 00:04:39.680
out of each of the levels of stacks.

65
00:04:39.680 --> 00:04:48.100
And then, it will basically
then give you this array.

66
00:04:49.170 --> 00:04:54.010
Of arrays, and this is what then
you plug in to an xScale or

67
00:04:54.010 --> 00:05:00.091
yScale to figure out
how to draw this stack.

68
00:05:00.091 --> 00:05:04.300
So that's how you can go
through the documentation.

69
00:05:04.300 --> 00:05:10.660
If you get for work handed an area chart,
you come over here, find the area chart.

70
00:05:10.660 --> 00:05:16.530
And then figure out what it expects for
it's input, and then

71
00:05:16.530 --> 00:05:23.620
what kind of settings you need to give it,
the default settings you need to give it.

72
00:05:23.620 --> 00:05:29.776
And then it will tell you
what it returns somewhere.

73
00:05:29.776 --> 00:05:33.179
Somewhere here will tell
you what it returns, or

74
00:05:33.179 --> 00:05:35.758
you can console log what it returns.

75
00:05:35.758 --> 00:05:37.269
So that's one of them.

76
00:05:37.269 --> 00:05:43.298
This helps you calculate histograms.

77
00:05:43.298 --> 00:05:49.220
So this is chord diagram, this one is for
showing flows, source to target flow.

78
00:05:49.220 --> 00:05:53.650
And so for
this one I think you can just take a look,

79
00:05:53.650 --> 00:05:55.880
this is how it expects the input.

80
00:05:55.880 --> 00:06:00.840
And then it will give you as output
these things that you can then

81
00:06:00.840 --> 00:06:06.050
plug into this ribbon function.

82
00:06:06.050 --> 00:06:10.160
So this is how you expect its input,
this is how you expects its output.

83
00:06:10.160 --> 00:06:14.470
And so the documentation follows

84
00:06:16.680 --> 00:06:20.800
this sort of pattern for
every single thing that it does.

85
00:06:20.800 --> 00:06:22.550
So this one in particular is heirarchy.

86
00:06:22.550 --> 00:06:25.103
This one is the one that
helps you draw trees.

87
00:06:25.103 --> 00:06:29.846
So draws trees, draws these tree maps, and

88
00:06:29.846 --> 00:06:33.577
this is kinda showing hierarchy.

89
00:06:33.577 --> 00:06:39.218
It's basically I think
categorical hierarchy and

90
00:06:39.218 --> 00:06:45.126
it's showing you everything
here is a child of this.

91
00:06:45.126 --> 00:06:47.680
And then I think it shows you the size.

92
00:06:47.680 --> 00:06:51.470
It's laid out based on the size
of that particular child

93
00:06:51.470 --> 00:06:52.990
relative to everything else.

94
00:06:54.910 --> 00:06:58.078
And then this partition,

95
00:06:58.078 --> 00:07:01.075
I'm in a circle packs.
&gt;&gt; Speaker 2: So

96
00:07:01.075 --> 00:07:04.535
when you're reading through the
documentation and you see some code and

97
00:07:04.535 --> 00:07:08.045
you just want to run it to see how it
works, is there a website or a sandbox or

98
00:07:08.045 --> 00:07:10.815
something that you can-
&gt;&gt; Shirley Wu: Again, a great question.

99
00:07:10.815 --> 00:07:18.090
[LAUGH] I wish I was smart
enough to plant these questions.

100
00:07:18.090 --> 00:07:23.258
So a lot of times,
if you just click on the picture,

101
00:07:23.258 --> 00:07:28.441
it will take you to, so
this is kind of the example.

102
00:07:28.441 --> 00:07:33.485
So before Mike Bostock,
the creator of D3 went and

103
00:07:33.485 --> 00:07:38.178
made observable networks,
he actually hosted

104
00:07:38.178 --> 00:07:43.221
a lot of his examples on blocks,
B,L .ox.org and

105
00:07:43.221 --> 00:07:48.900
this is where like a lot
of the examples and code.

106
00:07:48.900 --> 00:07:52.982
And then what you can do is going here and

107
00:07:52.982 --> 00:08:00.500
then instead of ox.org I'm replace
that with blogbuilder.org.

108
00:08:00.500 --> 00:08:05.720
And this is something that Ian Johnson,
who's one

109
00:08:05.720 --> 00:08:12.010
of the primary organizers
of the D3 user group built.

110
00:08:12.010 --> 00:08:19.680
So if you just replace the blogs.org
part with blockbuilder.org, then it

111
00:08:19.680 --> 00:08:26.250
will pop you into this online editor where
you can kinda play around with the code.

112
00:08:26.250 --> 00:08:29.620
Like, maybe if I was like,
what does this do?

113
00:08:29.620 --> 00:08:31.200
And I just delete this whole thing.

114
00:08:31.200 --> 00:08:36.180
Look, it live updates to show you
I've deleted all the rectangles.

115
00:08:37.800 --> 00:08:39.330
So that's what I would recommend.

116
00:08:41.500 --> 00:08:43.980
So, like for each of these.

117
00:08:43.980 --> 00:08:47.250
Usually if you click on the picture
sometimes it's a little disappointing and

118
00:08:47.250 --> 00:08:49.260
it just takes you to the picture itself,
but

119
00:08:49.260 --> 00:08:51.510
most of the time it actually
takes you to the code.

120
00:08:53.280 --> 00:08:58.020
And, you just replace a blocks
part with blockbuilder.org and

121
00:08:58.020 --> 00:08:59.730
it takes you to a live editor.

122
00:08:59.730 --> 00:09:01.660
I think these days.

123
00:09:02.930 --> 00:09:08.950
A lot of the most popular examples
I think are being replaced and

124
00:09:08.950 --> 00:09:10.450
redone in Observable.

125
00:09:10.450 --> 00:09:16.580
So I think if you go to observable dot,
so it's beta.observable@hq.com,

126
00:09:16.580 --> 00:09:20.860
but the notebooks that we've been
working in and if you just look for

127
00:09:20.860 --> 00:09:26.570
Any of the modules that you want to try,
like the cord one earlier.

128
00:09:26.570 --> 00:09:31.900
So somebody will have
done an example with it.

129
00:09:31.900 --> 00:09:34.450
So, look at that.

130
00:09:36.810 --> 00:09:41.190
So I highly recommend you checking out.

131
00:09:41.190 --> 00:09:43.290
Any of these.

132
00:09:43.290 --> 00:09:48.080
So either on Observable search
whatever you're looking for and

133
00:09:48.080 --> 00:09:52.180
go to someone's notebook and
then you can actually like this.

134
00:09:52.180 --> 00:09:58.790
As you know, because we've been using it,
we can live edit and see what happens.

135
00:09:58.790 --> 00:10:00.800
Or in block builder.

136
00:10:00.800 --> 00:10:07.860
I think this one I'm really a fan
of blockbuilder.org/search.

137
00:10:07.860 --> 00:10:13.994
This one let's you search by the API
function so then I can do d3.chord.

138
00:10:13.994 --> 00:10:19.309
And this will have basically
have every single block

139
00:10:19.309 --> 00:10:24.761
ever that uses D3.cord and
then you can edit those.

140
00:10:24.761 --> 00:10:30.264
So, when you're trying to find that

141
00:10:30.264 --> 00:10:36.305
layout to implement whichever design.

142
00:10:36.305 --> 00:10:40.066
Yeah, just try clicking on the image and
then if not,

143
00:10:40.066 --> 00:10:43.336
try going to observable HQ and
try and find it.

144
00:10:43.336 --> 00:10:48.269
In one of the examples, or
Block-Build our search,

145
00:10:48.269 --> 00:10:53.528
quite a few options, yeah.
&gt;&gt; Speaker 3: You said that d3 is going

146
00:10:53.528 --> 00:10:59.153
to be the tool to put the data
in the format it needs to.

147
00:10:59.153 --> 00:11:00.560
How does it get the data?

148
00:11:00.560 --> 00:11:03.040
Can it go to a database?
&gt;&gt; Shirley Wu: No.

149
00:11:03.040 --> 00:11:05.904
Okay, so that's the part it doesn't do.

150
00:11:05.904 --> 00:11:12.371
It does have a little
bit of functionality for

151
00:11:12.371 --> 00:11:16.464
helping you with requests.

152
00:11:16.464 --> 00:11:22.991
So it will have things like It helps you
to get request, I think post request?

153
00:11:22.991 --> 00:11:29.575
Json, it has one like D3.json so
helps you like fetch json files,

154
00:11:29.575 --> 00:11:34.658
csv files, etcetera but
it doesn't ever try to talk

155
00:11:34.658 --> 00:11:39.528
to any database that you
need something else too.

156
00:11:39.528 --> 00:11:42.999
D3 is really for
once you've gotten the data.

157
00:11:44.000 --> 00:11:49.310
From wherever your data source
is then translating that into

158
00:11:49.310 --> 00:11:51.520
what you need to draw it onto the screen.
&gt;&gt; Speaker 3: So

159
00:11:51.520 --> 00:11:55.130
it's always like a flat file type thing?

160
00:11:55.130 --> 00:12:00.650
I'm not clear when you say already
gotten the data, is it like XML string?

161
00:12:00.650 --> 00:12:06.170
What does it look like?
&gt;&gt; Shirley Wu: So, usually,

162
00:12:06.170 --> 00:12:11.260
you want to get whatever your data is,
wherever it's from,

163
00:12:11.260 --> 00:12:16.110
to I think for most of the calculations,

164
00:12:16.110 --> 00:12:22.370
most of the D3 functions,
it would want it in a JSON format.

165
00:12:23.910 --> 00:12:24.520
Yeah.

166
00:12:24.520 --> 00:12:27.270
And then, so just arrays and objects.

167
00:12:27.270 --> 00:12:33.510
And then, you can go from there
to do whatever you need with D3.

168
00:12:33.510 --> 00:12:34.010
Yeah.

169
00:12:38.420 --> 00:12:40.400
That's a great question also.

170
00:12:40.400 --> 00:12:42.370
D3 contour.

171
00:12:42.370 --> 00:12:46.193
This is one of the new things
that got added in in Version

172
00:12:46.193 --> 00:12:51.054
5.
&gt;&gt; Shirley Wu: I think it helps with,

173
00:12:51.054 --> 00:12:56.003
this says density contour, I haven't
really quite read into exactly what

174
00:12:56.003 --> 00:12:58.768
it's for, but it's one of the options.

175
00:12:58.768 --> 00:13:04.411
And the force layout,
that helps you layout network diagrams or

176
00:13:04.411 --> 00:13:09.020
bee swarm plots,
sometimes physics simulations.

177
00:13:09.020 --> 00:13:13.380
And then, I'm of course, D3 geo,

178
00:13:13.380 --> 00:13:16.906
that helps you with mapping.

179
00:13:16.906 --> 00:13:23.883
And it has all of these different
projections that you can choose from.

180
00:13:23.883 --> 00:13:28.949
And unfortunately I think
most people go with mercader.

181
00:13:28.949 --> 00:13:32.600
I'm glad isn't even
the first thing on here.

182
00:13:32.600 --> 00:13:37.530
And then this is the U.S.A., so
a lot of different projections to

183
00:13:39.930 --> 00:13:43.380
get geodata onto the screen.

184
00:13:43.380 --> 00:13:48.750
And this is how we do that we saw earlier.

185
00:13:48.750 --> 00:13:53.960
Now there's directions and write ups on
how to get geodata onto the screen too.

186
00:13:55.340 --> 00:14:01.820
So yeah, so that's the, this whole
part of the layout calculations.

187
00:14:01.820 --> 00:14:06.420
And this is where, what I use a lot for
getting data into what SVG needs to draw

188
00:14:06.420 --> 00:14:10.930
and this to me is,
personally I think the best part of D3.

