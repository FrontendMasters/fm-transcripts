WEBVTT

1
00:00:00.025 --> 00:00:05.493
&gt;&gt; Shirley Wu: Now let's
draw a bar chart together.

2
00:00:05.493 --> 00:00:10.639
So this actually,
&gt;&gt; Shirley Wu: Should actually

3
00:00:10.639 --> 00:00:15.752
be much more straightforward than
all of our other previous examples.

4
00:00:15.752 --> 00:00:22.065
So let's take the data
calculation we did earlier.

5
00:00:22.065 --> 00:00:29.375
So this whole part,
&gt;&gt; Shirley Wu: Let's just copy that over.

6
00:00:31.940 --> 00:00:34.570
&gt;&gt; Shirley Wu: Get that into
getDerivedStateFromProps.

7
00:00:40.245 --> 00:00:45.020
&gt;&gt; Shirley Wu: And
then we're gonna say, I'm going to,

8
00:00:45.020 --> 00:00:49.531
instead of returning the array of bars,

9
00:00:49.531 --> 00:00:55.969
I'm going to return instead,
&gt;&gt; Shirley Wu: I'm

10
00:00:55.969 --> 00:01:01.719
gonna save it in variable bars and
I'm going to return that so

11
00:01:01.719 --> 00:01:07.490
that I get the data as state and
that I can access it in render.

12
00:01:07.490 --> 00:01:14.430
So if I do console.log(this.state.bars),
now you can see console.log.

13
00:01:14.430 --> 00:01:21.066
The state has bars and the bars
are exactly what we calculated before.

14
00:01:23.282 --> 00:01:25.554
&gt;&gt; Shirley Wu: And so
now that we have that,

15
00:01:25.554 --> 00:01:31.638
all we have to do is create a rectangle
element for every single one of those.

16
00:01:34.667 --> 00:01:42.110
&gt;&gt; Shirley Wu: So then what that will look
like is, in React, I have my SVG element.

17
00:01:42.110 --> 00:01:45.610
Let me get my closing tag.

18
00:01:45.610 --> 00:01:50.130
And so we just want to create
a rectangle for every single one,

19
00:01:50.130 --> 00:01:54.130
so this.state.bars.map.

20
00:01:54.130 --> 00:01:56.838
So loop through each of the bars.

21
00:01:59.778 --> 00:02:04.433
&gt;&gt; Shirley Wu: And then create
a rectangle element for each of those.

22
00:02:07.086 --> 00:02:11.772
&gt;&gt; Shirley Wu: And you can see
that there's nothing being drawn

23
00:02:11.772 --> 00:02:16.923
right now because a rectangle
element needs a width.

24
00:02:16.923 --> 00:02:24.121
So d.width, a height, a d.height.

25
00:02:28.267 --> 00:02:29.460
&gt;&gt; Shirley Wu: Does it say?

26
00:02:29.460 --> 00:02:30.441
&gt;&gt; Speaker 2: You want some brackets?

27
00:02:30.441 --> 00:02:35.232
&gt;&gt; Shirley Wu: this.state.bars has to be
wrapped in brackets, the whole thing.

28
00:02:35.232 --> 00:02:36.761
&gt;&gt; Speaker 2: Thank you so much.

29
00:02:48.011 --> 00:02:49.396
&gt;&gt; Speaker 2: That makes sense, right?

30
00:02:52.663 --> 00:02:54.993
&gt;&gt; Shirley Wu: So I'm wrapping it in.

31
00:02:54.993 --> 00:02:57.092
&gt;&gt; Speaker 3: That read map of undefined,
so

32
00:02:57.092 --> 00:03:00.834
it doesn't think that
state.bars is a thing?

33
00:03:00.834 --> 00:03:06.615
&gt;&gt; Speaker 2: Did you put bars in
your state above, cuz it's empty.

34
00:03:06.615 --> 00:03:07.520
&gt;&gt; Shirley Wu: Thank you so much.

35
00:03:18.945 --> 00:03:24.382
&gt;&gt; Shirley Wu: Okay, so now, you should
hopefully, okay, we still can't see them.

36
00:03:24.382 --> 00:03:28.616
d.width, wait, no, because I don't
have d.width defined for width.

37
00:03:28.616 --> 00:03:30.650
I'm just gonna give it 2.

38
00:03:30.650 --> 00:03:36.014
And then now you can see just these
little, thin black lines over here.

39
00:03:41.125 --> 00:03:45.019
&gt;&gt; Shirley Wu: Okay, so
now we have the x position, so

40
00:03:45.019 --> 00:03:50.566
you can now see all of the bars,
but not placed correctly

41
00:03:50.566 --> 00:03:55.418
in the y direction, so
let's put that in there.

42
00:03:58.325 --> 00:03:59.990
&gt;&gt; Shirley Wu: And
now it's in place correctly.

43
00:04:01.320 --> 00:04:02.463
And then one more thing.

44
00:04:02.463 --> 00:04:06.820
Obviously, we've calculated the fill for
each of these bars.

45
00:04:06.820 --> 00:04:08.379
Let me get it onto two lines.

46
00:04:09.430 --> 00:04:11.098
And tada, that's all it took.

47
00:04:11.098 --> 00:04:14.610
It took longer than it should have
because I missed some things.

48
00:04:14.610 --> 00:04:17.691
But that's all it took for

49
00:04:17.691 --> 00:04:23.012
us to return the bars as
part of the state, and

50
00:04:23.012 --> 00:04:27.914
then for
us to draw a rectangle element for

51
00:04:27.914 --> 00:04:31.433
each one of the bars objects.

52
00:04:31.433 --> 00:04:37.332
And then the fun thing about this is,

53
00:04:37.332 --> 00:04:40.384
how do, I hold on.

54
00:04:40.384 --> 00:04:46.850
The very fun thing about this
is as long as I have this,

55
00:04:46.850 --> 00:04:51.737
because it's React, if I just update it

56
00:04:51.737 --> 00:04:56.503
to New York, it updates it correctly.

57
00:04:56.503 --> 00:05:01.317
And I don't have to bother with managing

58
00:05:01.317 --> 00:05:07.122
elements to enter,
managing elements to exit,

59
00:05:07.122 --> 00:05:13.300
managing elements to update
like I would with D3.

60
00:05:13.300 --> 00:05:18.740
With these few lines,
I just get this for free.

61
00:05:18.740 --> 00:05:21.390
So that's all it took.

62
00:05:21.390 --> 00:05:26.180
And that's why I'm really excited
about doing React and D3 together.

63
00:05:26.180 --> 00:05:31.030
This is one of the places I feel React and
D3 go together so, so well.

64
00:05:31.030 --> 00:05:36.022
And then what I do want to show you,
so this is the part I was

65
00:05:36.022 --> 00:05:40.916
talking about about where to
put the calculations, but

66
00:05:40.916 --> 00:05:45.936
I also want to show you
the architecture really quickly.

67
00:05:45.936 --> 00:05:50.315
So this is the chart component itself.

68
00:05:50.315 --> 00:05:52.085
It manages the data calculations.

69
00:05:52.085 --> 00:05:53.800
It manages the rendering.

70
00:05:53.800 --> 00:05:56.945
We don't have any interactions,
so it doesn't manage that, but

71
00:05:56.945 --> 00:05:58.474
I also want to show you App.js.

72
00:05:58.474 --> 00:06:03.812
And all App.js does is it manages

73
00:06:03.812 --> 00:06:08.202
a object of temperatures.

74
00:06:08.202 --> 00:06:15.780
And this one, when it gets filled in, it's
basically, I go and fetch all of my data.

75
00:06:15.780 --> 00:06:23.510
So I just have my datasets in the public
folder under sf.json and newyork.json.

76
00:06:23.510 --> 00:06:25.950
You can imagine right here
in componentDidMount,

77
00:06:25.950 --> 00:06:30.610
you could probably do something else
with any APIs that you might have.

78
00:06:30.610 --> 00:06:38.400
And then I set the data I get back,
which are just in JSON format.

79
00:06:38.400 --> 00:06:40.224
I set that onto the temperature.

80
00:06:40.224 --> 00:06:46.034
The temps attribute in the state.

81
00:06:46.034 --> 00:06:51.944
I also remember which city
is being shown right now.

82
00:06:51.944 --> 00:06:56.025
So this,
&gt;&gt; Shirley Wu: This

83
00:06:56.025 --> 00:07:00.250
drop-down is being remembered here.

84
00:07:00.250 --> 00:07:07.325
And all that happens,
&gt;&gt; Shirley Wu: In the render is,

85
00:07:07.325 --> 00:07:12.156
first of all, I have a select for
the drop-down,

86
00:07:12.156 --> 00:07:17.115
where I can choose either SF or
New York as the city.

87
00:07:17.115 --> 00:07:20.405
And then what I do is I say, well,

88
00:07:20.405 --> 00:07:25.342
the data that I want to be
rendering in each of these

89
00:07:25.342 --> 00:07:29.811
charts is get the city that's selected,
and

90
00:07:29.811 --> 00:07:36.090
then get the temperatures for
the city that's selected.

91
00:07:36.090 --> 00:07:40.160
And then I pass that into the BarChart and
the Chart.

92
00:07:40.160 --> 00:07:46.076
And then that gets calculated and
in the Chart.js.

93
00:07:46.076 --> 00:07:49.202
And that gets rendered in Chart.js.

94
00:07:49.202 --> 00:07:54.055
And that's,
&gt;&gt; Shirley Wu: That's how

95
00:07:54.055 --> 00:07:57.770
it's working, yeah.

96
00:07:57.770 --> 00:07:59.339
So quite straightforward.

97
00:08:05.974 --> 00:08:08.244
&gt;&gt; Shirley Wu: And
then depending on your needs,

98
00:08:08.244 --> 00:08:11.856
you might just build on top
of these kinds of examples.

99
00:08:11.856 --> 00:08:16.691
But I think at the very basic,
it's just as simple as that,

100
00:08:16.691 --> 00:08:20.754
having the root manage the data and
the state, and

101
00:08:20.754 --> 00:08:25.426
then passing that data down
into your chart components.

