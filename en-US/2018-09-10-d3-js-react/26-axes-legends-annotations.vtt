WEBVTT

1
00:00:00.050 --> 00:00:02.580
&gt;&gt; Shirley Wu: So
the first example I want to give is axes.

2
00:00:02.580 --> 00:00:07.260
So these are axes, these beautiful things.

3
00:00:08.420 --> 00:00:09.984
And as you might imagine,

4
00:00:09.984 --> 00:00:14.190
axes are extremely important to make
sure that your data is readable.

5
00:00:16.240 --> 00:00:20.263
Because if you notice something.

6
00:00:20.263 --> 00:00:23.950
We've been making these
really fun bar charts and

7
00:00:23.950 --> 00:00:28.950
radio charts thus far, except there
is no labelling on them, and so

8
00:00:28.950 --> 00:00:34.149
[LAUGH] without that context you
don't know what's going on, right?

9
00:00:35.210 --> 00:00:39.580
And here too, these bar charts and
stuff are kind of fun, and

10
00:00:39.580 --> 00:00:42.110
at least you have some colors in there.

11
00:00:42.110 --> 00:00:47.300
But then if you don't have axes,
you don't know what time frame this is.

12
00:00:47.300 --> 00:00:50.060
You don't know what this y axis is.

13
00:00:50.060 --> 00:00:53.990
So axes are extremely important
in data visualization.

14
00:00:53.990 --> 00:00:57.240
For the readability of your chart, and

15
00:00:57.240 --> 00:00:59.980
the good thing is D3 makes it really,
really, easy.

16
00:01:01.060 --> 00:01:04.110
And they make it really, really,
easy because if you think about it,

17
00:01:04.110 --> 00:01:09.310
to render this whole thing with SVG,
that's like,

18
00:01:09.310 --> 00:01:12.480
a bunch of text elements,
a bunch of line elements,

19
00:01:12.480 --> 00:01:17.450
a bunch of path elements, and
you've already seen how much work that is.

20
00:01:17.450 --> 00:01:20.820
And you can see in this,
this is kind of like the DOM

21
00:01:23.440 --> 00:01:26.720
the DOM elements required to
like just draw this one thing.

22
00:01:26.720 --> 00:01:32.860
It's like, at the beginning of the day,
you are like, these path elements are not

23
00:01:32.860 --> 00:01:38.170
fun, or having to hand coat these as SVG
elements are not going to be fun so.

24
00:01:38.170 --> 00:01:39.890
Same thing for

25
00:01:39.890 --> 00:01:44.880
drawing these axes, like you don't want to
be hand coding axes every single time for

26
00:01:44.880 --> 00:01:48.340
your visualization and
D3 makes that really, really easy for you.

27
00:01:49.620 --> 00:01:54.620
But on the flip side,
that's why it needs access to the DOM so

28
00:01:54.620 --> 00:01:58.910
that it can do all of these
SVG elements for you.

29
00:01:58.910 --> 00:02:03.210
And so, it's really quite easy to do axes.

30
00:02:03.210 --> 00:02:08.180
So create a D3 axes generator.

31
00:02:08.180 --> 00:02:13.096
axisLeft, axisBottom are the ones I
usually use at the beginning of the React

32
00:02:13.096 --> 00:02:13.936
lifecycle.

33
00:02:13.936 --> 00:02:18.273
And set the corresponding scales so
all we have to do is axisLeft and

34
00:02:18.273 --> 00:02:22.306
then pass in, in this case,
we're trying to do the y-axis.

35
00:02:22.306 --> 00:02:28.567
So pass in the y-scale that
we already have from earlier.

36
00:02:28.567 --> 00:02:32.179
And then create an SVG group
element in the render.

37
00:02:33.890 --> 00:02:38.580
And finally, a componentDidUpdate
call the axis on the group element.

38
00:02:40.720 --> 00:02:41.530
And that's all it takes.

39
00:02:41.530 --> 00:02:47.990
These three parts will draw
this on the screen for you.

40
00:02:47.990 --> 00:02:49.094
It's really quite nice.

