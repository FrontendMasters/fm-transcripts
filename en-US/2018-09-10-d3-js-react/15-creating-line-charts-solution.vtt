WEBVTT

1
00:00:00.080 --> 00:00:04.130
&gt;&gt; Shirley Wu: I want to quickly
go through the example together.

2
00:00:04.130 --> 00:00:09.310
So we start out quite similarly
to the last time around,

3
00:00:09.310 --> 00:00:11.590
because it's still the same
skills that we're using.

4
00:00:11.590 --> 00:00:15.885
So let me really quickly write that out,

5
00:00:15.885 --> 00:00:19.730
d3.extent, and we pass in the data.

6
00:00:19.730 --> 00:00:25.300
And again, for the exposition,
we're using the date.

7
00:00:25.300 --> 00:00:29.620
And then I'm going to define xScale,
scaleTime.

8
00:00:29.620 --> 00:00:33.961
So this should be exactly
the same as before, oops, sorry.

9
00:00:33.961 --> 00:00:41.149
.domain, pass in xExtent, .range,
and pass in from 0 to width.

10
00:00:42.820 --> 00:00:46.049
The y scale is where I'm
going change it a little bit.

11
00:00:46.049 --> 00:00:48.690
Because while I was going around,

12
00:00:48.690 --> 00:00:53.515
I think we realized that the correct
[LAUGH] way to do the y scale is

13
00:00:53.515 --> 00:00:58.889
actually to have the minimum be
the minimum of the low temperatures and

14
00:00:58.889 --> 00:01:03.720
the maximum be the maximum
of the high temperatures.

15
00:01:03.720 --> 00:01:08.530
So this is a little bit of an edit to
previously when we were doing the y scale.

16
00:01:10.190 --> 00:01:13.781
So let's do that together.

17
00:01:13.781 --> 00:01:18.001
So the max of the high temperatures,

18
00:01:18.001 --> 00:01:22.369
d3.max(data, and then d.high.

19
00:01:22.369 --> 00:01:28.003
And so this will give me just
the value of right here.

20
00:01:28.003 --> 00:01:34.162
Just the value, 104,
that's the highest temperature all year.

21
00:01:34.162 --> 00:01:38.477
And then lowMin, d3.min(data,.

22
00:01:38.477 --> 00:01:47.060
And then this one, I want the minimum of
the low temperatures, so then lowMin.

23
00:01:47.060 --> 00:01:52.210
And then that's 11 degrees, and
that's the lowest temperature all year.

24
00:01:52.210 --> 00:01:56.610
And that way, I can map it such that it's

25
00:01:56.610 --> 00:02:01.540
const yScale is equal to d3.scaleLinear.

26
00:02:01.540 --> 00:02:06.953
So the scale linear,
this time instead of using the min max of

27
00:02:06.953 --> 00:02:12.595
the high temperature,
we'll use the lowMin and the highMax.

28
00:02:12.595 --> 00:02:16.595
And this will probably be
the most accurate way.

29
00:02:16.595 --> 00:02:21.929
And so we will map that lowMin,
the 11 degrees,

30
00:02:21.929 --> 00:02:26.120
to the height, the bottom part.

31
00:02:26.120 --> 00:02:31.310
And we will map the highMax,
that 104 degrees to 0, the highest point.

32
00:02:33.210 --> 00:02:37.157
So that's the one change from prior.

33
00:02:37.157 --> 00:02:42.541
We don't need a color
scale this time around

34
00:02:42.541 --> 00:02:47.059
because we just need a red and a blue.

35
00:02:47.059 --> 00:02:50.413
So,
&gt;&gt; Shirley Wu: We want to then return,

36
00:02:50.413 --> 00:02:51.778
right?

37
00:02:51.778 --> 00:02:58.219
We need to then create a line generator.

38
00:02:58.219 --> 00:03:04.330
So this is where it's the line generator

39
00:03:04.330 --> 00:03:10.266
that we talked about, the d3.line.

40
00:03:10.266 --> 00:03:14.904
And I saw a lot of people do two line

41
00:03:14.904 --> 00:03:19.555
generators, which make sense.

42
00:03:19.555 --> 00:03:24.689
Because you want a line generator that
will access the high temperature for

43
00:03:24.689 --> 00:03:25.593
the y value.

44
00:03:25.593 --> 00:03:30.961
And you want another line
generator that accesses

45
00:03:30.961 --> 00:03:35.703
the low value for
each of the temperatures.

46
00:03:35.703 --> 00:03:40.060
So,
&gt;&gt; Shirley Wu: I saw this

47
00:03:40.060 --> 00:03:45.123
going on where it's for the x.

48
00:03:45.123 --> 00:03:51.271
The x value of each of the points,

49
00:03:51.271 --> 00:03:56.860
the accessor is we do this.

50
00:03:56.860 --> 00:03:59.360
And so I want to talk about
this a little bit more.

51
00:03:59.360 --> 00:04:04.358
So this is basically saying,
for each of the dates,

52
00:04:04.358 --> 00:04:09.014
translate that into an x value,
and that's the x

53
00:04:09.014 --> 00:04:14.027
coordinate of that particular point for
that data.

54
00:04:14.027 --> 00:04:22.085
And then, for the y,
&gt;&gt; Shirley Wu: We want to do a yScale.

55
00:04:22.085 --> 00:04:24.241
Because this is the high,

56
00:04:24.241 --> 00:04:29.936
we want to pass the high temperature
into the yScale and return that.

57
00:04:29.936 --> 00:04:35.729
And so if you put

58
00:04:35.729 --> 00:04:42.716
that,
&gt;&gt; Shirley Wu: Into an object,

59
00:04:42.716 --> 00:04:49.778
I think I called it path.
&gt;&gt; Shirley Wu: And

60
00:04:49.778 --> 00:04:55.530
then it would be highLine is a function,

61
00:04:55.530 --> 00:05:03.145
console.log(highLine) is
a function like that,

62
00:05:03.145 --> 00:05:07.543
which means that if I pass in our

63
00:05:07.543 --> 00:05:12.464
data,
&gt;&gt; Shirley Wu: Oops.

64
00:05:19.143 --> 00:05:20.519
&gt;&gt; Shirley Wu: It will give me back

65
00:05:20.519 --> 00:05:26.039
the string, this really, really,
long string, of moveTos and lineTos.

66
00:05:26.039 --> 00:05:29.730
And all of the x and y coordinates
that it's drawing lines between.

67
00:05:29.730 --> 00:05:33.850
And you'll see down here
that there's nothing

68
00:05:33.850 --> 00:05:38.797
because you'll also need a fill,
so for the fill [LAUGH].

69
00:05:38.797 --> 00:05:41.956
And then once you have the fill,

70
00:05:41.956 --> 00:05:47.252
it will draw the upper line.
&gt;&gt; Shirley Wu: And

71
00:05:47.252 --> 00:05:53.817
to do the lower one,
&gt;&gt; Shirley Wu: Another line generator.

72
00:05:53.817 --> 00:05:59.155
Actually, so I think a lot of
people did another line generator,

73
00:05:59.155 --> 00:06:02.561
but I want to show you a different option.

74
00:06:02.561 --> 00:06:06.784
So let's do line.

75
00:06:06.784 --> 00:06:13.008
And then instead of setting
the y accessor on here,

76
00:06:13.008 --> 00:06:20.679
I want to show you that you can
actually do the line generator and

77
00:06:20.679 --> 00:06:25.766
then set the y accessor on that variable.

78
00:06:25.766 --> 00:06:32.154
So line.y, and
then give back yScale(d.high).

79
00:06:32.154 --> 00:06:36.855
So this modifies the line generator and

80
00:06:36.855 --> 00:06:41.330
tells it how to get the y position.

81
00:06:41.330 --> 00:06:46.370
And then because this whole
thing gives you back a function,

82
00:06:46.370 --> 00:06:52.950
we can then pass in data
to this whole thing.

83
00:06:52.950 --> 00:06:57.550
So that's how to read
what's going on here.

84
00:06:57.550 --> 00:07:04.028
And so as you can imagine, then the next
thing that we can do is do the same thing,

85
00:07:04.028 --> 00:07:08.113
exact same thing, but for
the low temperatures.

86
00:07:08.113 --> 00:07:14.556
So return a function that
will use the dates for the x.

87
00:07:14.556 --> 00:07:19.302
And then use the low temperatures for
the y, pass in the data,

88
00:07:19.302 --> 00:07:24.076
give it a fill.
&gt;&gt; Shirley Wu: And

89
00:07:24.076 --> 00:07:25.839
then that's the lower line.

90
00:07:25.839 --> 00:07:33.535
So you could either create two line
generators or reuse the same one.

91
00:07:33.535 --> 00:07:36.481
Both work perfectly well.

92
00:07:36.481 --> 00:07:41.056
But I wanted to present that as an option.

93
00:07:41.056 --> 00:07:45.387
This one's quite straightforward
after the bar chart one.

94
00:07:46.955 --> 00:07:48.825
&gt;&gt; Shirley Wu: Just say line generator,

95
00:07:48.825 --> 00:07:52.687
but,
&gt;&gt; Shirley Wu: Hopefully the fact that you

96
00:07:52.687 --> 00:07:56.173
don't have to write this
yourself is really nice.

