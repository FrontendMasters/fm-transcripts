WEBVTT

1
00:00:00.210 --> 00:00:01.330
&gt;&gt; Speaker 1: Okay, so line chart, so

2
00:00:01.330 --> 00:00:04.630
this is one of the ones that you were
looking at earlier with the exercise,

3
00:00:04.630 --> 00:00:09.348
being like, my God, these paths and
these D commands, like these commands are.

4
00:00:09.348 --> 00:00:14.031
So,
&gt;&gt; Speaker 1: I want to

5
00:00:14.031 --> 00:00:18.964
introduce you to D3.Line(),
which is one of those

6
00:00:18.964 --> 00:00:23.470
magical functions that
translates your data into

7
00:00:23.470 --> 00:00:28.740
the really complex looking
commands that draw this line.

8
00:00:29.820 --> 00:00:37.566
And how we do that is how D3.Line
works is we have, let's say, our data.

9
00:00:37.566 --> 00:00:41.912
And for this data, again,
we just have date, and

10
00:00:41.912 --> 00:00:46.710
we have value.
&gt;&gt; Speaker 1: And

11
00:00:46.710 --> 00:00:51.912
all we need to do is to find d3.line(),

12
00:00:51.912 --> 00:00:56.679
and we tau d3.line, our accessor for

13
00:00:56.679 --> 00:01:00.867
the x position and the accessor for

14
00:01:00.867 --> 00:01:05.774
the y position.
&gt;&gt; Speaker 1: And

15
00:01:05.774 --> 00:01:12.673
then we pass in our data array.
&gt;&gt; Speaker 1: And

16
00:01:12.673 --> 00:01:19.500
it goes and outputs the path
string we need to draw that line.

17
00:01:19.500 --> 00:01:27.032
And it's really just those few lines,
and you get back that string.

18
00:01:27.032 --> 00:01:31.690
And let me kind of explain
to you what's going on.

19
00:01:31.690 --> 00:01:38.150
So essentially what d3.line is doing
is given this array of data points,

20
00:01:39.700 --> 00:01:44.220
it's basically mapping those
data points onto the screen.

21
00:01:44.220 --> 00:01:47.369
It's mapping it first to these x,
y positions, and

22
00:01:47.369 --> 00:01:51.520
that's why we need to give it accessors
telling it where each of these

23
00:01:51.520 --> 00:01:53.828
points should be drawn on the screen.

24
00:01:53.828 --> 00:01:58.853
And so it's basically saying,
okay, so given this array of data,

25
00:01:58.853 --> 00:02:03.360
I am going to draw all of these
x positions around the screen.

26
00:02:03.360 --> 00:02:07.640
And then I'm going to connect
them with a bunch of lines, and

27
00:02:07.640 --> 00:02:08.780
that's all that's happening.

28
00:02:08.780 --> 00:02:13.390
So that's why, I just realized something.

29
00:02:13.390 --> 00:02:18.040
I may or may not have just copy and pasted
the dates, and it all says March 24th,

30
00:02:18.040 --> 00:02:22.010
but they're supposed to
be increasing by days.

31
00:02:22.010 --> 00:02:26.716
So they're supposed to be 24,
25, 26, 27, 28, 29.

32
00:02:26.716 --> 00:02:29.704
Please imagine with me that
that's what it's doing.

33
00:02:29.704 --> 00:02:35.558
And so, if you can imagine
the bar chart we just drew,

34
00:02:35.558 --> 00:02:42.211
where it was a point here,
a point here, a point here, etc.

35
00:02:42.211 --> 00:02:47.409
D3.Line is doing something very similar
where it's mapping the x, y points.

36
00:02:47.409 --> 00:02:49.859
But instead of drawing any bars,

37
00:02:49.859 --> 00:02:55.910
it's creating the command where it draws
the lines between each of these points.

38
00:02:55.910 --> 00:03:00.977
That's all I gotta say about D3.Line,
because it's just that easy.

39
00:03:00.977 --> 00:03:06.966
It might actually be even easier to
do than the previous example, maybe.

