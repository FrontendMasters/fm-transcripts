WEBVTT

1
00:00:00.020 --> 00:00:04.535
&gt;&gt; Shirley Wu: So
let's go through this together.

2
00:00:06.608 --> 00:00:09.155
&gt;&gt; Shirley Wu: I think there might have

3
00:00:09.155 --> 00:00:14.380
been a little bit of confusion,
so let's do it.

4
00:00:14.380 --> 00:00:18.890
So, this time around the scales,
we don't need a time scale anymore

5
00:00:18.890 --> 00:00:24.270
because if you notice there's no x-axis,
there's only angles and radius.

6
00:00:24.270 --> 00:00:29.836
So, we're going to have a radius scale,
and this is basically

7
00:00:29.836 --> 00:00:35.834
gonna be the same exact thing as
when we had the scale linear before.

8
00:00:35.834 --> 00:00:39.599
And for this one we're going to
map the low and high temperatures.

9
00:00:39.599 --> 00:00:44.747
So for this one let's do d3scalelinear,

10
00:00:44.747 --> 00:00:52.183
again, that's scalelinear and
then I saw this I liked this,

11
00:00:52.183 --> 00:00:57.193
I saw this I thought this was really nice.

12
00:00:57.193 --> 00:01:01.792
So let's pass in an array and
then here we'll have D3 min.

13
00:01:01.792 --> 00:01:05.569
So the min value is, again, the data and

14
00:01:05.569 --> 00:01:09.580
then the accessor is d.lowtemperature.

15
00:01:09.580 --> 00:01:16.101
And then the max is dated and
then d.hightemperature.

16
00:01:16.101 --> 00:01:21.029
And then the range,
&gt;&gt; Shirley Wu: Is basically

17
00:01:21.029 --> 00:01:24.810
whatever you want the radius to be.

18
00:01:24.810 --> 00:01:27.800
And so for me what I'm gonna do is,

19
00:01:27.800 --> 00:01:33.250
I'm going to just make it half
this width of the screen,

20
00:01:33.250 --> 00:01:38.350
that's what I'm gonna
make the maximum radius.

21
00:01:38.350 --> 00:01:42.010
So, I'll just put that
as width divided by two.

22
00:01:43.300 --> 00:01:46.880
And again,
if I console.log that radius scale.

23
00:01:46.880 --> 00:01:49.070
I am in zero degrees.

24
00:01:49.070 --> 00:01:54.560
Let's see,
is because there is no zero degrees,

25
00:01:54.560 --> 00:01:58.160
so it's gonna be a negative number,
we don't want negative numbers.

26
00:01:58.160 --> 00:02:04.524
So I think, let's do 20,
20 degrees is going to be a radius of 31.

27
00:02:04.524 --> 00:02:10.320
And then I think the maximum,
it was 104, and that's going to be 325.

28
00:02:10.320 --> 00:02:13.800
Think the minimum is 11 so
that's going to be zero.

29
00:02:13.800 --> 00:02:16.780
So these are going to be our radius

30
00:02:16.780 --> 00:02:20.480
that we're going to use to calculate
the inner and outer radius.

31
00:02:20.480 --> 00:02:27.140
And we talked a little bit before
about using the per slice angle.

32
00:02:27.140 --> 00:02:28.780
So, what do we want to do?

33
00:02:28.780 --> 00:02:33.540
Let's only calculate it for
just the first slice to start out with.

34
00:02:33.540 --> 00:02:37.544
So let's just say, temporarily,

35
00:02:37.544 --> 00:02:42.616
let's just do something, and we need to

36
00:02:42.616 --> 00:02:49.109
actually make the arc generator.
&gt;&gt; Shirley Wu: So

37
00:02:49.109 --> 00:02:54.517
let's do that.
&gt;&gt; Shirley Wu: And all we need to do for

38
00:02:54.517 --> 00:03:02.779
that is declare d3.arc().
&gt;&gt; Shirley Wu: That's the very basic,

39
00:03:02.779 --> 00:03:08.477
if we don't pass in settings or anything,
so we can just start with that.

40
00:03:08.477 --> 00:03:12.356
And let's just generate the,

41
00:03:16.163 --> 00:03:20.835
&gt;&gt; Shirley Wu: Path string for the first,

42
00:03:20.835 --> 00:03:24.497
the very first date.

43
00:03:24.497 --> 00:03:31.190
So, what the arc generator
takes is an object.

44
00:03:31.190 --> 00:03:36.920
And in this startangle and
so will make that

45
00:03:40.080 --> 00:03:47.321
the basically origin on the zeroith
index times per slice angle.

46
00:03:50.130 --> 00:03:56.450
And then end angle for that first
one would be 0 + 1 * persliceAngle.

47
00:03:58.700 --> 00:04:02.380
We need an inner radius, so

48
00:04:02.380 --> 00:04:07.600
lets get the first thing out of the data.

49
00:04:07.600 --> 00:04:09.880
And then the inner radius is low.

50
00:04:09.880 --> 00:04:16.110
But then we also have to translate
that raw data into screen space,

51
00:04:16.110 --> 00:04:18.250
into the radius we want.

52
00:04:18.250 --> 00:04:21.841
And then the outer radius is,

53
00:04:21.841 --> 00:04:28.458
we'll translate it into radiance or
.sorry radius.

54
00:04:28.458 --> 00:04:37.142
And we want the high temperature
of the very first data.

55
00:04:37.142 --> 00:04:41.068
And if we console.log the path string,
this is what it looks like.

56
00:04:41.068 --> 00:04:46.302
So, I think the confusion might happen

57
00:04:46.302 --> 00:04:53.441
because in that example I had,
in this example I had,

58
00:04:53.441 --> 00:04:58.850
I set the inner radius and outer radius.

59
00:04:58.850 --> 00:05:02.740
And I asked for the start angle and
end angle to be

60
00:05:05.030 --> 00:05:08.300
the start angle and
end angle of the data I pass in.

61
00:05:11.430 --> 00:05:17.690
But we could just as easily just
pass in an object that has all of

62
00:05:17.690 --> 00:05:22.610
this to our angle and angle inner radius
and outer radius already calculated.

63
00:05:22.610 --> 00:05:28.797
And then, the arc generator
&gt;&gt; Shirley Wu: Will

64
00:05:28.797 --> 00:05:30.207
just know what to do with it.

65
00:05:30.207 --> 00:05:34.271
So this is actually
the easiest way to do it.

66
00:05:34.271 --> 00:05:39.800
But if you want to see it done the other
way, we can go through that too.

67
00:05:39.800 --> 00:05:42.805
But this is the way that I recommend.

68
00:05:42.805 --> 00:05:47.239
Just pass in an object with all of the
settings that the arcGenerator requires.

69
00:05:48.390 --> 00:05:52.590
So if we think about that
we can extrapolate that.

70
00:05:52.590 --> 00:05:57.090
If we think about this we can
extrapolate this to each of the dates.

71
00:05:58.720 --> 00:06:03.300
So we can do data.map and then for

72
00:06:03.300 --> 00:06:07.380
each of the slices we want to get both

73
00:06:07.380 --> 00:06:11.920
the data itself as well as and
the index of that data.

74
00:06:12.950 --> 00:06:18.966
I want to calculate

75
00:06:18.966 --> 00:06:22.726
the path for

76
00:06:22.726 --> 00:06:27.240
each of them.

77
00:06:32.680 --> 00:06:36.440
And so the start angle is,
the index times per slice angle,

78
00:06:36.440 --> 00:06:40.490
an angle is index plus one
times per slice angle.

79
00:06:40.490 --> 00:06:46.630
And the inner radius is the low
temperature translated into radius and

80
00:06:46.630 --> 00:06:51.290
the outer radius is the high
temperature translated into the radius.

81
00:06:52.570 --> 00:06:57.250
And so if we then console.log this,
we should be

82
00:06:57.250 --> 00:07:01.025
seeing over here 365 path strings.

83
00:07:04.232 --> 00:07:07.338
&gt;&gt; Shirley Wu: Yes.
&gt;&gt; Shirley Wu: And so

84
00:07:07.338 --> 00:07:09.940
these are all the path strings.

85
00:07:09.940 --> 00:07:11.910
And so
that's the first part of what we need.

86
00:07:13.730 --> 00:07:19.870
to return that path and
the other part is the color.

87
00:07:21.780 --> 00:07:24.440
Let's do this first.

88
00:07:24.440 --> 00:07:29.655
So if we just get back
the path we'll see all of

89
00:07:29.655 --> 00:07:35.408
these slices except black.
&gt;&gt; Shirley Wu: And

90
00:07:35.408 --> 00:07:40.274
then let's really quickly go through and
create the colorScale

91
00:07:40.274 --> 00:07:45.930
again because that's the exact
same as what we've done before.

92
00:07:45.930 --> 00:07:53.338
The colorSequential and
the domain is d3.extent.

93
00:07:53.338 --> 00:07:57.990
I'm passing data, and
then use the average temperature, and

94
00:07:57.990 --> 00:08:03.510
the range, sorry, and then for the
sequential, I have to use interpolator,

95
00:08:03.510 --> 00:08:07.630
and then, am I going to be able to
remember this off the top of my head?

96
00:08:07.630 --> 00:08:09.640
Red, yellow, blue.

97
00:08:09.640 --> 00:08:10.730
Hopefully, this is it.

98
00:08:12.480 --> 00:08:15.220
So that's the same as
our bar chart example.

99
00:08:15.220 --> 00:08:19.600
And for the fill,
I just say colorScale D dot average.

100
00:08:25.060 --> 00:08:26.330
Sorry.
Scale sequential.

101
00:08:26.330 --> 00:08:27.380
Sorry.

102
00:08:27.380 --> 00:08:30.530
Up here I accidentally
said "colorSequential".

103
00:08:30.530 --> 00:08:36.250
I meant "scaleSequential." And
then that should have worked.

104
00:08:37.700 --> 00:08:42.551
This is what it ends up looking like.

105
00:08:42.551 --> 00:08:48.110
And for all of these exercises and
it's not as important for

106
00:08:48.110 --> 00:08:54.410
you to know exactly how d3 land works or
d3 arc works that and my hope is in.

107
00:08:54.410 --> 00:08:56.080
My goal isn't for

108
00:08:56.080 --> 00:08:59.580
you to like memorize how I knew this
work that's with documentation is for.

109
00:08:59.580 --> 00:09:02.860
And if you had a chance to
look at the documentation,

110
00:09:02.860 --> 00:09:07.430
it's really quite extensive and detail.

111
00:09:07.430 --> 00:09:14.700
My goal is primarily to just
show you how easy it is to get.

112
00:09:14.700 --> 00:09:20.116
I get these shapes that when
SVG looks really complicated,

113
00:09:20.116 --> 00:09:22.510
but the goal is to make it.

114
00:09:22.510 --> 00:09:27.710
the goal is to show you how

115
00:09:27.710 --> 00:09:33.040
easy D3 makes it and
that's really what I love about D3.

