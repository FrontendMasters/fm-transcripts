WEBVTT

1
00:00:00.240 --> 00:00:01.568
&gt;&gt; Shirley Wu: So the code for

2
00:00:01.568 --> 00:00:07.273
the bar chart,
&gt;&gt; Shirley Wu: Is just

3
00:00:07.273 --> 00:00:13.523
the,
&gt;&gt; Shirley Wu: The data

4
00:00:13.523 --> 00:00:17.352
calculation part remains exactly the same.

5
00:00:17.352 --> 00:00:22.574
But now what we want to do is,
in return we have the Canvas,

6
00:00:22.574 --> 00:00:29.628
and then Canvas is kind of like the group
element that is the black box to React.

7
00:00:29.628 --> 00:00:33.510
We just create it, and then something
happens in this Canvas element, and

8
00:00:33.510 --> 00:00:36.540
React doesn't need to know
what's happening within it.

9
00:00:39.150 --> 00:00:44.250
And so after we create the canvas
element and componentDidMmount,

10
00:00:44.250 --> 00:00:49.002
I go and grab the Canvas and
I get the context, the 2d context.

11
00:00:49.002 --> 00:00:52.432
And then I call this function
called this.drawBars, and

12
00:00:52.432 --> 00:00:55.442
I call that same function
in componentDidUpdate.

13
00:00:55.442 --> 00:01:01.454
And all that drawBars does is goes
through that same data object of bars,

14
00:01:01.454 --> 00:01:06.197
and for each of them, I just say,
define the fill style.

15
00:01:06.197 --> 00:01:10.524
So basically define the color of

16
00:01:10.524 --> 00:01:15.179
whatever that I'm going to draw.

17
00:01:15.179 --> 00:01:18.819
And set that to bar.fill, and

18
00:01:18.819 --> 00:01:24.699
then fillRect(bar.x, bar.y, a width of 2,

19
00:01:24.699 --> 00:01:30.906
bar.height),
&gt;&gt; Shirley Wu: And it draws that.

20
00:01:30.906 --> 00:01:37.360
It's that same thing,
&gt;&gt; Shirley Wu: With just as easy of code.

21
00:01:38.560 --> 00:01:43.003
This is all it takes.
&gt;&gt; Shirley Wu: Yeah,

22
00:01:45.501 --> 00:01:48.415
&gt;&gt; Shirley Wu: And then let's talk about

23
00:01:48.415 --> 00:01:53.316
the very, very last thing, almost there,

24
00:01:53.316 --> 00:01:56.368
which is this radio chart.

25
00:01:56.368 --> 00:02:02.911
[COUGH] And let's go through how easy
it is to do that in Canvas with d3.

26
00:02:02.911 --> 00:02:07.760
So again, in the radio chart, remember,

27
00:02:07.760 --> 00:02:11.262
we have the arcGenerator, and

28
00:02:11.262 --> 00:02:15.574
then in getDerivedStateFromProps,

29
00:02:15.574 --> 00:02:21.515
we calculate the data, and
we give back the slices.

30
00:02:21.515 --> 00:02:27.264
The only difference here,
that I want to point out,

31
00:02:27.264 --> 00:02:33.797
is that before,
when we were returning each of the slices,

32
00:02:33.797 --> 00:02:39.807
I had a path string because I
needed that path string for

33
00:02:39.807 --> 00:02:43.980
each of the SVG path elements.

34
00:02:43.980 --> 00:02:48.860
But now, I'm going to return
just the data object that has

35
00:02:48.860 --> 00:02:54.660
the startAngle, and
angle innerRadius, and outerRadius.

36
00:02:54.660 --> 00:03:00.170
And the reason for that is because for
canvas to draw to Canvas,

37
00:03:00.170 --> 00:03:05.336
it's a bunch of JavaScript
commands instead of a path string.

38
00:03:05.336 --> 00:03:12.350
So d3, we just basically tell
d3 what the Canvas context is,

39
00:03:12.350 --> 00:03:16.630
and d3 will generate all of
those JavaScript commands and

40
00:03:16.630 --> 00:03:18.360
does all of the work underneath the hood.

41
00:03:20.250 --> 00:03:25.512
So for this one,
we do a componentDidMount,

42
00:03:25.512 --> 00:03:29.666
and we grab that Canvas context, so

43
00:03:29.666 --> 00:03:34.653
we define it here as this.refs.canvas,

44
00:03:34.653 --> 00:03:38.818
and I say getContext('2d').

45
00:03:38.818 --> 00:03:43.093
And then I'm going to define
a drawSlices function, and

46
00:03:43.093 --> 00:03:47.485
I'm going to call that.
&gt;&gt; Shirley Wu: And

47
00:03:47.485 --> 00:03:51.444
I'm also going to do the same thing in

48
00:03:51.444 --> 00:03:56.320
componentDidUpdate, this.drawSlices.

49
00:03:56.320 --> 00:04:01.125
And then in here, we're going to do
something very, very similar to the bars,

50
00:04:01.125 --> 00:04:08.234
where we loop through each of the slices.
&gt;&gt; Shirley Wu: Sorry,

51
00:04:08.234 --> 00:04:13.482
and then right here,
after we've defined the context,

52
00:04:13.482 --> 00:04:20.151
we have to tell the arcGenerator,
tell the d3 arcGenerator the context

53
00:04:20.151 --> 00:04:25.466
that it's going to be drawing on,
&gt;&gt; Shirley Wu: So

54
00:04:25.466 --> 00:04:29.357
that D3 knows which Canvas to give

55
00:04:29.357 --> 00:04:34.460
the JavaScript commands to.
&gt;&gt; Shirley Wu: And

56
00:04:34.460 --> 00:04:40.230
then we just need to go
through each of the slices.

57
00:04:41.900 --> 00:04:45.684
So this is a forEach, not a map.

58
00:04:49.276 --> 00:04:53.877
&gt;&gt; Shirley Wu: And we say, hey, Canvas,

59
00:04:53.877 --> 00:05:01.883
set my fill to the fill that
I have from my data and

60
00:05:01.883 --> 00:05:09.836
then begin a path.
&gt;&gt; Shirley Wu: And

61
00:05:09.836 --> 00:05:15.098
then all I have to do is
save this,artGenerator,

62
00:05:15.098 --> 00:05:19.733
and I pass in my start angle and
angle etc.,

63
00:05:19.733 --> 00:05:26.272
all of that calculation I did above,
the arc data right here.

64
00:05:26.272 --> 00:05:32.985
And then I say, okay, after you've
loaded up all of those Canvas commands,

65
00:05:32.985 --> 00:05:37.942
of whatever move to's and
line to's that you have to do,

66
00:05:37.942 --> 00:05:41.370
then fill that with the correct color.

67
00:05:41.370 --> 00:05:45.125
And if I did it correctly, yes!

68
00:05:45.125 --> 00:05:49.963
There we go!
&gt;&gt; Shirley Wu: That's

69
00:05:49.963 --> 00:05:54.931
all it takes with d3 in Canvas.

70
00:05:54.931 --> 00:05:58.691
So I drew that, and
you might notice that, again,

71
00:05:58.691 --> 00:06:02.288
it's right here,
it's the 00 is right here.

72
00:06:02.288 --> 00:06:07.095
So for this one, we just have
to tell the Canvas context, hey,

73
00:06:07.095 --> 00:06:09.560
translate by width and height.

74
00:06:11.080 --> 00:06:17.473
So let me go do that,
translate width five by two,

75
00:06:17.473 --> 00:06:22.497
height divided by two, and then we have

76
00:06:22.497 --> 00:06:28.760
that again.
&gt;&gt; Shirley Wu: Not

77
00:06:28.760 --> 00:06:33.546
very much a code to convert
from SVG to Canvas,

78
00:06:33.546 --> 00:06:38.101
and the huge gains in
terms of performance.

