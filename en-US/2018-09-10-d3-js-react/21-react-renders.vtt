WEBVTT

1
00:00:00.000 --> 00:00:03.610
&gt;&gt; Shirley Wu: We've finally,
finally come to the React section

2
00:00:03.610 --> 00:00:07.890
of this workshop I titled
Data Visualization for React developers.

3
00:00:09.480 --> 00:00:12.324
We took a few hours.

4
00:00:12.324 --> 00:00:16.437
But so before we start rendering
with React, because remember at

5
00:00:16.437 --> 00:00:20.714
the beginning of the morning I said
I wanted to use D3 to calculate.

6
00:00:20.714 --> 00:00:25.526
So we just talked about [LAUGH] of the
different ways that D3 can calculate your

7
00:00:25.526 --> 00:00:28.126
data and
turn it into what we need to draw.

8
00:00:28.126 --> 00:00:31.642
And now we're getting the second
half which is about React and

9
00:00:31.642 --> 00:00:33.676
how should React do the rendering.

10
00:00:33.676 --> 00:00:36.849
But before we get into that specifics,

11
00:00:36.849 --> 00:00:40.985
I want to kind of talk about
the architecture of your

12
00:00:40.985 --> 00:00:45.326
data visualization within
your React application.

13
00:00:45.326 --> 00:00:50.662
And so I have this general
guideline that I follow for

14
00:00:50.662 --> 00:00:57.710
myself that has come from a few years
of doing React and D3 together.

15
00:00:57.710 --> 00:00:59.146
I guess this is my fourth year.

16
00:00:59.146 --> 00:01:04.860
And so first of all,
I think of a division of responsibilities.

17
00:01:04.860 --> 00:01:08.580
So I always, always have a component.

18
00:01:08.580 --> 00:01:10.480
Each chart gets its own component.

19
00:01:10.480 --> 00:01:15.418
So for example, the 3D charts that we had
just now, each of them will have, I'll

20
00:01:15.418 --> 00:01:20.375
have a line chart component, a bar chart
component and a radial chart component.

21
00:01:20.375 --> 00:01:22.216
That's probably really straightforward.

22
00:01:22.216 --> 00:01:23.790
And then I'll also have a root component.

23
00:01:23.790 --> 00:01:27.234
That's the parent of it
all that manages them all.

24
00:01:27.234 --> 00:01:31.851
And the way that I think about them
is that for the chart component its

25
00:01:31.851 --> 00:01:36.558
responsibilities are to get passed
in the raw data from its parents.

26
00:01:36.558 --> 00:01:41.561
So that it can do those D3 calculations
and translate those raw data

27
00:01:41.561 --> 00:01:47.113
into screen space, basically everything
we've been doing up until now.

28
00:01:47.113 --> 00:01:53.472
And then it renders that calculated
data in the render function,

29
00:01:53.472 --> 00:01:59.843
so the chart component is responsible for
three of those things.

30
00:01:59.843 --> 00:02:02.127
And then it also manages state for

31
00:02:02.127 --> 00:02:06.625
interactions that don't require
redrawing ofthe whole chart.

32
00:02:06.625 --> 00:02:09.648
And so those interactions
might be hover interactions.

33
00:02:09.648 --> 00:02:14.040
Maybe in the bar chart you can hover over
each of the bars to see the date and

34
00:02:14.040 --> 00:02:17.370
the high temperature,
low temperature, etc.

35
00:02:17.370 --> 00:02:21.430
That interaction doesn't require
you to redraw the whole bar chart.

36
00:02:21.430 --> 00:02:23.885
And similarly,
if you have click interactions,

37
00:02:23.885 --> 00:02:26.560
if you click on one of them to bring
up more detailed information or

38
00:02:26.560 --> 00:02:30.860
something like that, that also doesn't
require you to redraw the whole thing.

39
00:02:30.860 --> 00:02:32.450
And so I manage state for

40
00:02:32.450 --> 00:02:35.850
those sorts of interactions in
the chart component itself.

41
00:02:37.380 --> 00:02:43.750
And for the root component, for the parent
component, that's where I manage loading

42
00:02:43.750 --> 00:02:48.790
in that raw data either from just a static

43
00:02:48.790 --> 00:02:52.940
file that lives on a server somewhere or
from an API that I'm accessing.

44
00:02:54.320 --> 00:02:58.534
So I let that route component
manage loading in the data and

45
00:02:58.534 --> 00:03:00.432
any updates to that data.

46
00:03:00.432 --> 00:03:05.636
So for example you mention
having real-time data come in.

47
00:03:05.636 --> 00:03:10.639
So the root component might manage like
if you have to open up web socket or

48
00:03:10.639 --> 00:03:14.997
something and manage that sort
of real-time communication.

49
00:03:14.997 --> 00:03:17.825
For me personally,
I'll do it in a root component.

50
00:03:17.825 --> 00:03:21.541
And this has some asterisks,
as in this makes some

51
00:03:21.541 --> 00:03:27.050
assumptions about your application
that I'll go into later.

52
00:03:27.050 --> 00:03:30.830
But the root component manages
update to that raw data.

53
00:03:30.830 --> 00:03:36.929
It also manages state for interactions
that require redrawing of the charts.

54
00:03:36.929 --> 00:03:40.527
And so that might be interactions
will filter down your data or

55
00:03:40.527 --> 00:03:43.230
aggregate your data or sort your data.

56
00:03:43.230 --> 00:03:47.340
And if you can imagine like for
the bar chart, if you have some sort of

57
00:03:47.340 --> 00:03:52.890
user interaction, that filters down to
maybe just a few months out of the year.

58
00:03:52.890 --> 00:03:56.320
You can imagine that takes redrawing
the whole bar chart cuz now you're

59
00:03:56.320 --> 00:03:59.770
only down to a few months
instead of the whole year.

60
00:03:59.770 --> 00:04:04.200
And so I'll have the root component, the
parent component, and manage all of that.

61
00:04:06.370 --> 00:04:11.700
And in terms of, we've been talking
a lot about calculating the data.

62
00:04:11.700 --> 00:04:15.920
In terms of where to put that calculation,

63
00:04:15.920 --> 00:04:20.160
I have a few different places
that I want to suggest.

64
00:04:20.160 --> 00:04:24.153
The very first one is
getDerivedStateFromProps.

65
00:04:24.153 --> 00:04:29.543
So then as soon as you
get passed in raw data or

66
00:04:29.543 --> 00:04:36.977
any updates through raw data
down from your parent as props,

67
00:04:36.977 --> 00:04:42.532
that's where you put your calculations in.

68
00:04:42.532 --> 00:04:47.634
And then your calculated data
can be returned as state.

69
00:04:47.634 --> 00:04:53.680
So if we calculate the array of bars,
that can be returned as a state.

70
00:04:53.680 --> 00:04:56.650
The pro of this, it's really simple and
it's really straightforward.

71
00:04:56.650 --> 00:05:00.530
And we'll see that in our
example in a little bit.

72
00:05:00.530 --> 00:05:03.880
The con is obviously that
getDerivedStateFromProps is

73
00:05:03.880 --> 00:05:05.850
a static method and it's asynchronous.

74
00:05:05.850 --> 00:05:08.690
And you can get race
conditions if not careful.

75
00:05:08.690 --> 00:05:12.760
It could be returning things from
this that doesn't actually belong,

76
00:05:12.760 --> 00:05:14.600
and the render function.

77
00:05:14.600 --> 00:05:19.040
You can be calling it in one instance,
and then

78
00:05:20.480 --> 00:05:26.370
it will get passed into the render
function of another instance or something.

79
00:05:26.370 --> 00:05:31.540
That is my understanding of what can
happen with getDerivedStateFromProps.

80
00:05:31.540 --> 00:05:36.216
I've never gotten that yet
just because it's so new, but

81
00:05:36.216 --> 00:05:40.650
that is what I would say,
be careful with using this.

82
00:05:40.650 --> 00:05:44.680
I would use it like as
a first run through to just

83
00:05:46.800 --> 00:05:53.410
prototype and get your idea out, and then
from there on like consider other options.

84
00:05:53.410 --> 00:05:57.355
Another option is to just put
the calculations in a render function of

85
00:05:57.355 --> 00:06:01.776
the lifecycle, and that's extremely
straightforward cuz that right where

86
00:06:01.776 --> 00:06:03.827
you're going to do the rendering.

87
00:06:03.827 --> 00:06:07.397
The con is it's going to recalculate
on every single lifecycle.

88
00:06:07.397 --> 00:06:12.402
So if you have interactions like the hover
I was telling you about, it's going to

89
00:06:12.402 --> 00:06:17.943
redo your calculations every single time
someone's hovering or someone's clicking.

90
00:06:17.943 --> 00:06:21.517
Every single time there's
a lifecycle trigger,

91
00:06:21.517 --> 00:06:25.014
but you don't want the data
to be recalculated.

92
00:06:25.014 --> 00:06:30.488
Then I would not suggest render anymore.

93
00:06:30.488 --> 00:06:35.766
But on the flipside, if you don't have
any sort of interaction that's the hover

94
00:06:35.766 --> 00:06:41.368
click or something, then render is a great
place to put your data calculations into.

95
00:06:41.368 --> 00:06:47.803
And then this is also,
&gt;&gt; Shirley Wu: Actually a pretty

96
00:06:47.803 --> 00:06:53.501
good suggestion that I got of putting into
componentDidMount and componentDidUpdate.

97
00:06:53.501 --> 00:06:55.549
It's got no race conditions.

98
00:06:55.549 --> 00:06:59.085
You just have to make sure that you
don't get into an infinite loop.

99
00:06:59.085 --> 00:07:03.854
Cuz if you can imagine, if you set state
at the end of your component to update,

100
00:07:03.854 --> 00:07:06.254
it's gonna trigger like a lifecycle.

101
00:07:06.254 --> 00:07:09.973
And then it's gonna hit
componentDidUpdate and set state and

102
00:07:09.973 --> 00:07:12.416
then trigger another lifecycle, etc.

103
00:07:12.416 --> 00:07:16.082
So just make sure that in
your componentDidUpdate

104
00:07:16.082 --> 00:07:19.585
that you're checking if the data is new or
not.

105
00:07:19.585 --> 00:07:24.015
And the con for me for
that is you have to do that check.

106
00:07:24.015 --> 00:07:27.116
And sometimes checking
if the data is new or

107
00:07:27.116 --> 00:07:32.640
not might require like a little bit of
a backflip maneuvering to figure out.

108
00:07:32.640 --> 00:07:37.626
It depends on how your
application is set up, but

109
00:07:37.626 --> 00:07:42.855
when I usually do calculations,
I don't really do

110
00:07:42.855 --> 00:07:47.842
componentDidUpdate just
because that requires

111
00:07:47.842 --> 00:07:52.480
someone checking that
the data has updated.

112
00:07:52.480 --> 00:07:55.147
So those are the options.

113
00:07:55.147 --> 00:08:01.160
And what I want to say for what I
just talked about the architecture is

114
00:08:01.160 --> 00:08:06.860
that first of all, it assumes that React
is doing all of the state management and

115
00:08:06.860 --> 00:08:10.520
that you don't have any redux or
anything similar.

116
00:08:10.520 --> 00:08:16.488
Obviously, some of things that I've said
might change for you if you have redux.

117
00:08:16.488 --> 00:08:21.340
I've personally not used redux before
just because a lot of my visualizations

118
00:08:21.340 --> 00:08:26.350
are I guess the interactions is
simple enough that I can just manage

119
00:08:26.350 --> 00:08:28.670
all of the state changes with React.

120
00:08:28.670 --> 00:08:33.893
And also these recommendations
are based on having,

121
00:08:33.893 --> 00:08:38.770
you're trying to render
multiple charts that all

122
00:08:38.770 --> 00:08:42.381
share some part of the data or state.

123
00:08:42.381 --> 00:08:48.432
And that's why you have a parent that
manages all of the raw data, etc.

124
00:08:48.432 --> 00:08:53.822
And then the children are only, the chart
components, are only responsible for

125
00:08:53.822 --> 00:08:58.590
translating that raw data into
the screen space and then rendering it.

126
00:08:58.590 --> 00:09:01.344
So these are some of
the assumptions that it makes.

127
00:09:01.344 --> 00:09:05.493
But the main takeway,
the thing that I really,

128
00:09:05.493 --> 00:09:10.888
really want to drill home for
this workshop is that kind of that

129
00:09:10.888 --> 00:09:16.285
very clear division between have
D3 do the calculations that

130
00:09:16.285 --> 00:09:21.811
are really hard to do by hand,
and have React do the rendering.

131
00:09:21.811 --> 00:09:26.692
Because, and I want to kind of make
that very clear because once you

132
00:09:26.692 --> 00:09:31.225
kind of separate those two parts
of drawing a visualization,

133
00:09:31.225 --> 00:09:35.845
then it's very easy to just be like,
the D3 calculations

134
00:09:35.845 --> 00:09:40.310
can actually go anywhere that
makes sense for your project.

135
00:09:40.310 --> 00:09:46.759
As long as React can access it in its
render function to draw all the bars or

136
00:09:46.759 --> 00:09:51.013
draw all of the lines or
draw all of those archs.

137
00:09:51.013 --> 00:09:58.082
So I don't want to sit here telling you
the D3 code must go in this function,

138
00:09:58.082 --> 00:10:02.616
and the rendering code
must go in this function.

139
00:10:02.616 --> 00:10:06.483
Or I don't want to give you
this over-arching rule.

140
00:10:06.483 --> 00:10:10.023
I just want to say,
I think put it anywhere or

141
00:10:10.023 --> 00:10:14.620
architect it any way that makes sense for
your project and

142
00:10:14.620 --> 00:10:20.880
the needs of your project, as long as
React can access that calculated data.

