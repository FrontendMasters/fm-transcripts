WEBVTT

1
00:00:00.710 --> 00:00:05.880
&gt;&gt; Shirley Wu: And then you might notice
that it's very black and kind of sad.

2
00:00:05.880 --> 00:00:09.819
So let's also bring in a color

3
00:00:09.819 --> 00:00:14.850
scale.
&gt;&gt; Shirley Wu: So three,

4
00:00:14.850 --> 00:00:19.685
the secret directions that
aren't in the directions.

5
00:00:19.685 --> 00:00:28.129
Let's map the average
temperature to a color.

6
00:00:28.129 --> 00:00:32.627
So first of all, get the minimax of

7
00:00:32.627 --> 00:00:38.524
the average temperature and so we're very,

8
00:00:38.524 --> 00:00:44.887
very practiced with that now,
so d3.extent,

9
00:00:44.887 --> 00:00:50.207
d.avg.
&gt;&gt; Shirley Wu: And

10
00:00:50.207 --> 00:00:58.795
then I'm going to introduce a new scale
to you that I didn't talk about before.

11
00:00:58.795 --> 00:01:04.019
Okay, it's called scaleSequential, and

12
00:01:04.019 --> 00:01:10.089
it's very similar to scale linear and
scale time,

13
00:01:10.089 --> 00:01:14.901
in that it takes in a continuous domain.

14
00:01:14.901 --> 00:01:18.696
But, it outputs for

15
00:01:18.696 --> 00:01:23.182
range
&gt;&gt; Shirley Wu: It outputs a continuous

16
00:01:23.182 --> 00:01:29.290
range, but it outputs a sequential
scale that is fixed by an interpolater.

17
00:01:29.290 --> 00:01:33.270
And that's just really fancy for saying,

18
00:01:33.270 --> 00:01:39.510
scale sequential is basically like scale
linear, but you can pass one of these in.

19
00:01:39.510 --> 00:01:42.600
I mean you can pass other things in,
but for

20
00:01:42.600 --> 00:01:48.080
what we want to do,
it just means we can pass one of these in.

21
00:01:48.080 --> 00:01:52.395
So, imagine instead of
mapping to X Y coordinates,

22
00:01:52.395 --> 00:01:55.840
we're now mapping to this as the output.

23
00:01:55.840 --> 00:01:58.570
So this will be basically,

24
00:01:58.570 --> 00:02:04.140
the minimum will be mapped to this red and
the maximum will be mapped to this blue.

25
00:02:04.140 --> 00:02:09.790
And so for us, we want that to
be that our lowest temperatures,

26
00:02:09.790 --> 00:02:14.130
average temperatures are mapped to
this blue right here and our maximum,

27
00:02:15.550 --> 00:02:19.970
our highest average temperatures
are going to be mapped to this red.

28
00:02:21.065 --> 00:02:25.320
Cuz this is also extremely useful
if you want to map to color, but

29
00:02:25.320 --> 00:02:31.300
the way that you want to map to color,
your domain, your input is continuous.

30
00:02:31.300 --> 00:02:38.140
If your input is categorical, then you
can use one of these to map to color.

31
00:02:39.370 --> 00:02:44.296
So yeah, so we will use scale
sequential and we'll map to this

32
00:02:44.296 --> 00:02:50.810
interpolateRdYlBlu.
&gt;&gt; Shirley Wu: So

33
00:02:50.810 --> 00:02:56.735
pass in our domain, and
we say .interpolator and

34
00:02:56.735 --> 00:03:02.378
then we pass in D3.interplate red, yellow,

35
00:03:02.378 --> 00:03:07.511
blue.
&gt;&gt; Shirley Wu: And

36
00:03:07.511 --> 00:03:14.320
then, once we have the color
scale defined, color scale.

37
00:03:15.470 --> 00:03:17.475
And then we say d.average, and

38
00:03:17.475 --> 00:03:22.669
that should give us back an RGB.
&gt;&gt; Shirley Wu: For

39
00:03:22.669 --> 00:03:30.886
that temperature.
&gt;&gt; Shirley Wu: Actually,

40
00:03:30.886 --> 00:03:32.700
let me just console log and show you.

41
00:03:34.960 --> 00:03:40.630
So let's say color scale and
we have a temperature of, let's say zero.

42
00:03:42.020 --> 00:03:42.520
Whoops.

43
00:03:45.350 --> 00:03:46.120
Yeah.

44
00:03:46.120 --> 00:03:49.543
And it's this rgb.

45
00:03:49.543 --> 00:03:56.786
I don't know if anybody can read that and
be, this is the color [LAUGH] And

46
00:03:56.786 --> 00:04:01.970
let's say we have-
&gt;&gt; Speaker 2: Mostly reddish?

47
00:04:01.970 --> 00:04:02.560
&gt;&gt; Shirley Wu: Yeah!

48
00:04:02.560 --> 00:04:05.700
Actually, and we'll talk about that.

49
00:04:08.050 --> 00:04:14.580
So, if I do 50 degrees,
then this is what it outputs.

50
00:04:14.580 --> 00:04:19.950
100 degrees, and this is what it outputs.

51
00:04:19.950 --> 00:04:23.030
Has anyone noticed something weird yet?

52
00:04:23.030 --> 00:04:25.610
Why is zero giving me
something mostly red?

53
00:04:25.610 --> 00:04:29.489
And why is a 100 giving
me something mostly blue?

54
00:04:29.489 --> 00:04:30.661
&gt;&gt; Speaker 2: It's sorta inverted.

55
00:04:30.661 --> 00:04:31.725
&gt;&gt; Shirley Wu: So if you take a look at

56
00:04:31.725 --> 00:04:34.160
what's down here, it's currently inverted.

57
00:04:34.160 --> 00:04:40.440
And that's because, if you look at that
scale, sorry, that interplate red,

58
00:04:40.440 --> 00:04:45.124
yellow, blue as I mentioned
before zero is a red and one is,

59
00:04:45.124 --> 00:04:51.340
the minimum is getting mapped to red and
the maximum is getting mapped to blue.

60
00:04:53.490 --> 00:04:58.520
So there's a really easy fix that I
learned where you just have to do dot

61
00:04:58.520 --> 00:05:03.680
reverse on your array, and
that should take care of it.

62
00:05:06.030 --> 00:05:10.610
And now you can see 100

63
00:05:10.610 --> 00:05:15.120
is getting mapped to something mostly red

64
00:05:16.790 --> 00:05:19.070
and zero is getting mapped
to something mostly blue.

65
00:05:20.090 --> 00:05:25.064
And indeed, if you look down
here that's what you'll see.

66
00:05:25.064 --> 00:05:30.450
So I think what I want to stress is,
while you are doing these exercises,

67
00:05:30.450 --> 00:05:36.123
console log every single step so that
you can see what D3 is giving you back.

68
00:05:36.123 --> 00:05:39.963
Actually the first thing to stress is
yeah, console log every single step so

69
00:05:39.963 --> 00:05:41.827
you can kind of see what D3 is doing.

70
00:05:41.827 --> 00:05:46.528
And then, basically the user just,
you get output from one thing and

71
00:05:46.528 --> 00:05:51.231
you're putting it into another thing
to help you translate from that

72
00:05:51.231 --> 00:05:54.252
data into whatever you
need to draw the SVG.

73
00:05:54.252 --> 00:05:59.172
And the key thing is basically,
for all of these calculations,

74
00:05:59.172 --> 00:06:05.820
it's what do you need to draw your SVG and
how do you get there from your raw data.

75
00:06:05.820 --> 00:06:06.930
So that's the first thing.

76
00:06:08.380 --> 00:06:09.940
And a second thing is,

77
00:06:09.940 --> 00:06:13.840
I know I saw Madeline struggle
a little bit with D3.map.

78
00:06:13.840 --> 00:06:18.770
I'm going to talk about this more later
on, but you don't need to use D3 for

79
00:06:18.770 --> 00:06:19.750
everything.

80
00:06:19.750 --> 00:06:22.580
If you're much more familiar
with Vanilla Java Script,

81
00:06:22.580 --> 00:06:24.394
use that just use Java Script Map.

82
00:06:24.394 --> 00:06:25.910
If you're, for example,

83
00:06:25.910 --> 00:06:30.850
I tend to like using Lodash in terms
of getting my data ready, use that.

84
00:06:32.050 --> 00:06:33.790
Use whatever you're comfortable with.

85
00:06:33.790 --> 00:06:37.890
You don't need to use D3 for
everything to do your visualizations.

86
00:06:37.890 --> 00:06:42.478
I'll even go ahead and
cover later on what D3 is really,

87
00:06:42.478 --> 00:06:46.398
really good for and
where it's not as good for and

88
00:06:46.398 --> 00:06:53.113
you can use other Java Script libraries or
Vanilla Java Script to supplement that.

