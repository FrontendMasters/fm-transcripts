WEBVTT

1
00:00:00.470 --> 00:00:05.466
So there's kind of three common
mistakes that I often come across when

2
00:00:05.466 --> 00:00:10.463
I see people kind of prioritizing
their workloads around features and

3
00:00:10.463 --> 00:00:14.205
minimal viable products and
all that kind of stuff.

4
00:00:14.205 --> 00:00:17.260
And I just wanted to flag up for
people really.

5
00:00:17.260 --> 00:00:23.860
First is rushed The pressure to deliver
is often so high that people jumped

6
00:00:23.860 --> 00:00:29.302
straight into prototyping without doing
any kind of upfront user research and

7
00:00:29.302 --> 00:00:34.332
on the course that we did on user
research and testing, I shared some ways

8
00:00:34.332 --> 00:00:39.526
that you can actually do a discovery
phase pretty quickly and pretty well.

9
00:00:39.526 --> 00:00:44.479
I So, I'm not saying we always need
long drawn out discovery phases with

10
00:00:44.479 --> 00:00:49.970
endless user interviews and diary studies
and all these kinds of convoluted stuff.

11
00:00:49.970 --> 00:00:54.985
But just taking a pause for a minute and
establishing some of the basics

12
00:00:54.985 --> 00:01:01.166
in terms of what users need, who the user
groups are, those kinds of things.

13
00:01:01.166 --> 00:01:05.617
You can't just jump straight
into Figma every time when

14
00:01:05.617 --> 00:01:10.169
you're kicking off a new feature,
or working on an MVP.

15
00:01:10.169 --> 00:01:16.006
The other big problem is post
launch iteration not happening.

16
00:01:16.006 --> 00:01:20.879
I've really already said that, so I don't
need to say a huge amount more there.

17
00:01:20.879 --> 00:01:22.496
But after a feature is delivered,

18
00:01:22.496 --> 00:01:25.638
nobody's checking back to
ensure that it's performing.

19
00:01:25.638 --> 00:01:26.878
Whose job is that?

20
00:01:27.958 --> 00:01:29.117
There's a question for you.

21
00:01:29.117 --> 00:01:32.011
I honestly don't know, right?

22
00:01:32.011 --> 00:01:35.176
Whose job is that?

23
00:01:35.176 --> 00:01:38.288
If you've got a product owner,
then fair enough.

24
00:01:38.288 --> 00:01:41.639
But oftentimes,
there isn't a product owner,

25
00:01:41.639 --> 00:01:45.081
which is a whole problem in its own right,
right?

26
00:01:45.081 --> 00:01:48.752
So if I'm working in
a product design role,

27
00:01:48.752 --> 00:01:53.070
I would take that on as one
of my responsibilities.

28
00:01:53.070 --> 00:01:57.646
Because I feel that, that post launch
optimization and iteration is so

29
00:01:57.646 --> 00:02:01.992
fundamental to the success of
a product and the design of a product,

30
00:02:01.992 --> 00:02:03.986
but I have to keep flagging it.

31
00:02:05.116 --> 00:02:11.120
And then finally,
a lack of holistic thinking.

32
00:02:11.120 --> 00:02:13.646
This can be a problem with Agile, right?

33
00:02:13.646 --> 00:02:21.058
Don't get me wrong, I wouldn't dare
criticize Agile, because I value my life.

34
00:02:21.058 --> 00:02:28.304
But, Agile is, I dare to say
not perfect in every scenario.

35
00:02:28.304 --> 00:02:34.006
And it is a model that has been born out
of developers and how developers work.

36
00:02:34.006 --> 00:02:38.720
And one of the things when it comes
to product design is it's very

37
00:02:38.720 --> 00:02:43.802
important to think holistically and
to kind of see things as a whole.

38
00:02:43.802 --> 00:02:49.062
And when you work in sprints, which
are focused on an individual feature or

39
00:02:49.062 --> 00:02:54.155
something like that, you don't have
that sense of kind of big picture,

40
00:02:54.155 --> 00:02:56.674
how all of these bits fit together.

41
00:02:56.674 --> 00:03:00.662
And so that's dangerous.

42
00:03:00.662 --> 00:03:02.915
And I just wanted to flag that.

43
00:03:02.915 --> 00:03:07.983
In terms of solutions to it,
you can do things like a Sprint Zero

44
00:03:07.983 --> 00:03:13.354
upfront where the designer gets
some time to do that kind of stuff.

45
00:03:13.354 --> 00:03:18.624
I tend to say there is value to that.

46
00:03:18.624 --> 00:03:23.226
But there is another solution that
I'm gonna propose in a minute, but

47
00:03:23.226 --> 00:03:25.729
was there a question, did I see Mark?

48
00:03:25.729 --> 00:03:29.027
&gt;&gt; Yeah, there's a little
bit of discussion going on-

49
00:03:29.027 --> 00:03:30.597
&gt;&gt; I'm scared now,

50
00:03:30.597 --> 00:03:33.533
please don't be horrible to me.

51
00:03:33.533 --> 00:03:35.298
I didn't mean to criticize Agile.

52
00:03:35.298 --> 00:03:40.565
&gt;&gt; No, I feel like product requests should
be handled mostly by the product owner,

53
00:03:40.565 --> 00:03:45.098
not the developers, but also that
depends on how big the company is.

54
00:03:45.098 --> 00:03:49.438
&gt;&gt; Yeah, this is the trouble
with doing a course like this.

55
00:03:49.438 --> 00:03:54.559
It's hugely different talking about
an enterprise customer compared

56
00:03:54.559 --> 00:03:59.860
to something that's the size of front
end masters or maybe even smaller.

57
00:03:59.860 --> 00:04:04.404
Obviously, you have to work in
different ways in different situations.

58
00:04:04.404 --> 00:04:08.905
If you've got product owners, then the
product owner should own the backlog of

59
00:04:08.905 --> 00:04:13.472
features, etc., using all the same
principles that we've talked about, but

60
00:04:13.472 --> 00:04:16.234
the ownership should probably lie on them.

61
00:04:16.234 --> 00:04:20.961
It certainly shouldn't lie on
the developers, in my opinion.

62
00:04:20.961 --> 00:04:25.831
Because, that's not your job, yes?

63
00:04:25.831 --> 00:04:29.589
&gt;&gt; But on the other end, somebody said
that the highest functioning teams that

64
00:04:29.589 --> 00:04:33.911
they've been on the developers did
share some of the product ownership.

65
00:04:33.911 --> 00:04:39.992
&gt;&gt; Yeah,
there's a difference between contributing

66
00:04:39.992 --> 00:04:46.523
to that process and
owning that process, right?

67
00:04:46.523 --> 00:04:53.298
So I'm a great believer that product
should have an owner, right?

68
00:04:53.298 --> 00:04:56.483
A person ultimately makes the decision.

69
00:04:56.483 --> 00:04:59.423
But if that owner is a good owner, right?

70
00:04:59.423 --> 00:05:02.958
They should be working
incredibly collaboratively

71
00:05:02.958 --> 00:05:07.865
with their entire team to define
the order of which things are done with.

72
00:05:07.865 --> 00:05:13.152
So for example, I was saying well,
okay, the pointing of features.

73
00:05:13.152 --> 00:05:16.402
One of the criteria should be the time and
effort involved.

74
00:05:16.402 --> 00:05:22.100
Well, that's down to the developer
primarily to tell you what the time and

75
00:05:22.100 --> 00:05:24.731
effort is gonna be involved in it.

76
00:05:24.731 --> 00:05:27.185
And so, yeah,
it should be a collaborative process, but

77
00:05:27.185 --> 00:05:31.132
that doesn't mean you shouldn't have
someone that ultimately owns it.

78
00:05:31.132 --> 00:05:36.699
Because if everything is done
in this kind of group, think,

79
00:05:36.699 --> 00:05:41.621
mind kind of approach,
things slip through the gap.

80
00:05:41.621 --> 00:05:47.719
Especially around things like post-launch
iteration and stuff like that.

81
00:05:47.719 --> 00:05:49.889
So yeah, there's a balance there.

82
00:05:49.889 --> 00:05:53.305
And it also, it depends on the culture
of the individual organization and

83
00:05:53.305 --> 00:05:54.649
the team that makes it up.

84
00:05:54.649 --> 00:05:55.646
Yeah, go for it.

85
00:05:55.646 --> 00:06:00.293
&gt;&gt; So Valve is a 350 person company,
a multi-billion

86
00:06:00.293 --> 00:06:05.343
dollar game platform that also
makes their own hardware and

87
00:06:05.343 --> 00:06:09.396
games and there are no PMs or
managers there.

88
00:06:09.396 --> 00:06:13.572
Leads are volunteer roles that
focus on organization and

89
00:06:13.572 --> 00:06:18.017
deal with the press and
lead baton is passed every few years.

90
00:06:18.017 --> 00:06:19.967
But they do have leads.

91
00:06:19.967 --> 00:06:23.118
&gt;&gt; Yeah.
&gt;&gt; It's just they're a little bit more

92
00:06:23.118 --> 00:06:23.744
fluid.

93
00:06:23.744 --> 00:06:27.852
&gt;&gt; Valve is an really
interesting case study.

94
00:06:27.852 --> 00:06:30.665
I love Valve and
the way that they operate.

95
00:06:30.665 --> 00:06:35.610
Which is this like for example, I don't
know whether it's like anymore, but for

96
00:06:35.610 --> 00:06:39.064
a long time,
projects with the survival of the fittest.

97
00:06:39.064 --> 00:06:43.051
If you had an idea for a product,
you had to persuade the team to come and

98
00:06:43.051 --> 00:06:45.291
work with you on that product, right?

99
00:06:45.291 --> 00:06:47.214
Brilliant, really interesting.

100
00:06:47.214 --> 00:06:49.834
So they do some really
innovative stuff there.

101
00:06:49.834 --> 00:06:54.651
And it's great to look at them and
go, that's interesting, but

102
00:06:54.651 --> 00:07:00.082
you can't take that and suddenly
plaster that on another organization,

103
00:07:00.082 --> 00:07:02.446
it just doesn't work.

104
00:07:02.446 --> 00:07:06.333
Every organization has
a deep rooted culture and

105
00:07:06.333 --> 00:07:10.803
ways of working, ways of thinking,
ways of behaving.

106
00:07:10.803 --> 00:07:14.891
And something like Valve needs to be
built from the ground up from the very

107
00:07:14.891 --> 00:07:16.606
beginning.

108
00:07:16.606 --> 00:07:20.962
So it is really interesting story, but
I don't think it's one that you can

109
00:07:20.962 --> 00:07:23.953
necessarily learn huge
amounts from personally.

110
00:07:23.953 --> 00:07:24.956
&gt;&gt; Well, I have a question.

111
00:07:24.956 --> 00:07:27.276
So no holistic thinking is a mistake.

112
00:07:27.276 --> 00:07:29.918
How do you prevent holistic overthinking?

113
00:07:29.918 --> 00:07:35.584
Especially, if you have a group where you
try to get contribution from stakeholders,

114
00:07:35.584 --> 00:07:40.646
developers, design team, and
sometimes it's just becomes the war ducks.

115
00:07:40.646 --> 00:07:41.428
&gt;&gt; Yeah.

116
00:07:41.428 --> 00:07:45.777
&gt;&gt; Especially for legacy systems.

117
00:07:45.777 --> 00:07:53.935
&gt;&gt; Yeah, so I would encourage you to
check out my course on user research and

118
00:07:53.935 --> 00:07:57.948
testing, because I use testing and

119
00:07:57.948 --> 00:08:03.413
research to cut through all of that,
right?

120
00:08:03.413 --> 00:08:08.374
So, the problem only comes it's
fine having lots of stakeholders,

121
00:08:08.374 --> 00:08:10.949
all expressing opinions, right?

122
00:08:10.949 --> 00:08:13.047
That's all right, okay?

123
00:08:13.047 --> 00:08:18.409
The problem only comes when a there's
nobody to make the final decision over it.

124
00:08:19.740 --> 00:08:25.582
And b, there becomes points of conflict
and disagreement between the stakeholders,

125
00:08:25.582 --> 00:08:28.952
both of which pretty much always happen,
right?

126
00:08:28.952 --> 00:08:31.350
Those are so common, it's ridiculous.

127
00:08:31.350 --> 00:08:35.655
So, if we don't have someone that's
making the final decision and

128
00:08:35.655 --> 00:08:38.536
who is informed to make
that final decision.

129
00:08:38.536 --> 00:08:42.134
Then, well, let's find out.

130
00:08:42.134 --> 00:08:44.614
Let's get hard evidence to support this.

131
00:08:44.614 --> 00:08:49.515
So whenever there's any kind of
disagreement, I turn to testing, right?

132
00:08:49.515 --> 00:08:51.005
Let's ask users.

133
00:08:51.005 --> 00:08:52.472
Let's find out.

134
00:08:52.472 --> 00:08:56.500
And that course is all about lightweight
ways of basically doing that.

135
00:08:56.500 --> 00:09:01.045
And we will touch more on some of that
latest, if I ever get moving forward,

136
00:09:01.045 --> 00:09:04.885
cuz we're all getting so
into the questions, which is great.

137
00:09:05.895 --> 00:09:07.579
So let's push on.

138
00:09:07.579 --> 00:09:09.827
So yeah,
we've got these three problems, right?

139
00:09:09.827 --> 00:09:13.607
And the last one in particular,
this holistic thinking is a big issue,

140
00:09:13.607 --> 00:09:17.770
because often we don't have time to do
that, yet it's incredibly valuable.

