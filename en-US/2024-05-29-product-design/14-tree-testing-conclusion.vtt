WEBVTT

1
00:00:00.080 --> 00:00:03.307
Then you might think that's a bit
of a laissez-faire attitude for

2
00:00:03.307 --> 00:00:06.310
creating your sub navigation and
organizing stuff.

3
00:00:06.310 --> 00:00:11.069
But I will often do a tree testing
exercise after I've got my information

4
00:00:11.069 --> 00:00:16.152
architecture for my app with all
the different features and functionality.

5
00:00:16.152 --> 00:00:21.343
And a tree testing exercise
basically looks something like this.

6
00:00:21.343 --> 00:00:26.663
So you create a task where you say, where
would you find information relating to so

7
00:00:26.663 --> 00:00:30.333
and so, or
where would you complete this task?

8
00:00:30.333 --> 00:00:34.691
And then they can navigate through
the hierarchy until they find the page

9
00:00:34.691 --> 00:00:38.623
where they think it would be, or
the screen where it would be.

10
00:00:38.623 --> 00:00:45.707
And I can then see whether people
are navigating to the right place.

11
00:00:45.707 --> 00:00:47.368
In terms of obviously those,

12
00:00:47.368 --> 00:00:51.556
you can't test absolutely everything
in your app like that, any more than

13
00:00:51.556 --> 00:00:56.387
about ten tests and people start getting
peed off and not wanting to do them.

14
00:00:56.387 --> 00:01:01.143
So the things that I tend to test is
anything that had a really low agreement

15
00:01:01.143 --> 00:01:01.691
score.

16
00:01:01.691 --> 00:01:07.032
In other words, in the card sorting,
they weren't sure where to place it,

17
00:01:07.032 --> 00:01:09.712
I tend to test that with tree testing.

18
00:01:09.712 --> 00:01:14.629
Anything that got put into not sure
with a very high percentage of

19
00:01:14.629 --> 00:01:19.471
people putting it into not sure,
I make sure that I test those.

20
00:01:19.471 --> 00:01:24.663
And then finally, if you've got one of
your top tasks that you identified,

21
00:01:24.663 --> 00:01:29.532
and you've ended up burying it in
your information architecture, for

22
00:01:29.532 --> 00:01:30.846
whatever reason.

23
00:01:30.846 --> 00:01:34.882
Then I try and test those as well to make
sure they can find them cuz we don't wanna

24
00:01:34.882 --> 00:01:36.941
make people struggle to find top tasks.

25
00:01:38.271 --> 00:01:42.675
To create a top tree test,
it's really super simple.

26
00:01:42.675 --> 00:01:46.425
You click on Add a New Tree Test,
wow, that blows your mind.

27
00:01:46.425 --> 00:01:52.448
You give your test a title,
you give what is you want people to do.

28
00:01:52.448 --> 00:01:57.013
And then you describe where it is
on the hierarchy, on the site and

29
00:01:57.013 --> 00:01:58.385
stuff like that.

30
00:01:58.385 --> 00:02:00.606
You don't need to watch that video,
you get the idea and

31
00:02:00.606 --> 00:02:02.316
you can play around with the app yourself.

32
00:02:02.316 --> 00:02:07.478
It's got a free tier on it, so it won't
cost you anything to give it a go.

33
00:02:07.478 --> 00:02:14.027
When you get results back, they look
something like this on your tree testing.

34
00:02:14.027 --> 00:02:19.581
And your success score is the key
metric that you wanna look at.

35
00:02:19.581 --> 00:02:27.380
So how many people have successfully found
where that task is on the application?

36
00:02:27.380 --> 00:02:31.010
But it's also useful to look at
how directly they did that, right?

37
00:02:32.330 --> 00:02:36.214
And if they didn't get it right
where they ended up, right,

38
00:02:36.214 --> 00:02:40.954
because oftentimes a bit crosslinking
can fix the problem if you need to.

39
00:02:40.954 --> 00:02:45.624
And also I quite like to look at how
long it took them to do it as well.

40
00:02:45.624 --> 00:02:48.013
Cuz if it's taking them a long time,

41
00:02:48.013 --> 00:02:52.974
then you've got some changes to make and
fiddle around with that.

42
00:02:52.974 --> 00:02:56.805
So information architecture is a thing
that's often not given enough attention in

43
00:02:56.805 --> 00:02:58.457
my opinion within product design.

44
00:02:58.457 --> 00:03:03.908
But if there's a problem, you can either
move the thing to a different section,

45
00:03:03.908 --> 00:03:06.987
or you can just cross-link to it.

46
00:03:06.987 --> 00:03:11.986
So there's a little bit around kind
of information architecture and

47
00:03:11.986 --> 00:03:13.547
how I work with that.

48
00:03:13.547 --> 00:03:17.307
And particularly around top tasks,
that's the big one.

49
00:03:17.307 --> 00:03:19.343
When it comes to an application,

50
00:03:19.343 --> 00:03:22.914
you need to know which tasks
are most important to people.

51
00:03:22.914 --> 00:03:25.904
So you wanna identify your top tasks and

52
00:03:25.904 --> 00:03:30.304
then organize them with
some open card sorting.

53
00:03:30.304 --> 00:03:35.275
Check the tiny tasks supported by your new
information architecture with your closed

54
00:03:35.275 --> 00:03:36.380
card sorting, and

55
00:03:36.380 --> 00:03:41.504
then finally use some tree testing to
confirm that everything's working.

56
00:03:41.504 --> 00:03:45.921
So normally, before I even jump
into Figma, or do any prototyping,

57
00:03:45.921 --> 00:03:48.284
I tend to start with that.

58
00:03:48.284 --> 00:03:53.060
Because if I can get that right,
I at least know that people can find

59
00:03:53.060 --> 00:03:58.621
the functionality within the app, and
that's often half the battle, yes?

60
00:03:58.621 --> 00:04:01.981
&gt;&gt; I guess one year we
did a general survey and

61
00:04:01.981 --> 00:04:06.397
then we took the top features,
and then we basically,

62
00:04:06.397 --> 00:04:11.295
sort these features based on
what you wanted as a community.

63
00:04:11.295 --> 00:04:14.851
And that was really interesting
to see kinda at a high level,

64
00:04:14.851 --> 00:04:18.665
where users thought that
the priority should be.

65
00:04:18.665 --> 00:04:23.112
We didn't end up following it exactly,
but still, it was very helpful to-

66
00:04:23.112 --> 00:04:24.602
&gt;&gt; That's top task analysis.

67
00:04:24.602 --> 00:04:28.222
You've done exactly it.

68
00:04:28.222 --> 00:04:31.672
And yeah, you're right,
you shouldn't blindly follow it.

69
00:04:31.672 --> 00:04:35.041
Because there are other considerations,
there are business considerations,

70
00:04:35.041 --> 00:04:37.272
there are time and
effort that goes into it.

71
00:04:37.272 --> 00:04:41.854
But just knowing what those main
things that people care about is so,

72
00:04:41.854 --> 00:04:42.881
so important.

73
00:04:44.161 --> 00:04:45.861
So yeah, that's really good.

74
00:04:45.861 --> 00:04:51.565
&gt;&gt; We just had a discussion kinda
around feedback and triaging feedback,

75
00:04:51.565 --> 00:04:57.362
and how certain companies will search
Reddit and find users complaining

76
00:04:57.362 --> 00:05:01.332
about certain things and then fix it and-
&gt;&gt; Yeah.

77
00:05:01.332 --> 00:05:04.527
&gt;&gt; They wouldn't
necessarily rely on voting,

78
00:05:04.527 --> 00:05:07.586
they would just see social as a indicator.

79
00:05:07.586 --> 00:05:10.087
&gt;&gt; Yeah.
&gt;&gt; We definitely do that up Frontend

80
00:05:10.087 --> 00:05:14.961
Masters as well, every day I'm searching
across all the socials and seeing.

81
00:05:14.961 --> 00:05:15.981
&gt;&gt; Yeah.

82
00:05:15.981 --> 00:05:18.523
&gt;&gt; Trying to find the actual
criticism because-

83
00:05:18.523 --> 00:05:19.512
&gt;&gt; Absolutely.

84
00:05:19.512 --> 00:05:23.607
For me, the way that I operate in that is,

85
00:05:23.607 --> 00:05:29.232
that's fed into the list of
that backlog I talked about.

86
00:05:29.232 --> 00:05:31.870
And those things would get pointed and
then go

87
00:05:31.870 --> 00:05:37.132
into the backlog into that optimization
stream of where we can make improvements.

88
00:05:37.132 --> 00:05:42.018
So that's kind of how I deal with them but
absolutely, it's definitely worth doing.

89
00:05:42.018 --> 00:05:47.408
There is some good apps for that, which I
touch on on the other course, which is,

90
00:05:47.408 --> 00:05:52.184
if you have a big idea for an app,
how do you go about developing the app?

91
00:05:52.184 --> 00:05:57.073
One of the things I mentioned and
that is apps called Mention and BuzzSumo,

92
00:05:57.073 --> 00:06:02.282
which are really good for kind of knowing
problems with your competitors apps.

93
00:06:02.282 --> 00:06:06.062
And finding out what people are moaning
about them, but you could use it for

94
00:06:06.062 --> 00:06:08.523
that social media monitoring as well.

95
00:06:08.523 --> 00:06:09.153
Very cool.

96
00:06:09.153 --> 00:06:12.325
&gt;&gt; People are really surprised if I
respond to it with my personal account or

97
00:06:12.325 --> 00:06:12.903
something.

98
00:06:12.903 --> 00:06:14.077
&gt;&gt; Yeah.
&gt;&gt; I always respond with

99
00:06:14.077 --> 00:06:15.223
a business account.

100
00:06:15.223 --> 00:06:17.376
If it's just something, hey,

101
00:06:17.376 --> 00:06:21.216
totally understand we're
working on this or whatever.

102
00:06:21.216 --> 00:06:23.977
&gt;&gt; And people really appreciate,
I know I do.

103
00:06:23.977 --> 00:06:27.262
If you suddenly get you've
had a bit of a moan online,

104
00:06:27.262 --> 00:06:32.080
I don't like it when it's like you get
this message back from support saying,

105
00:06:32.080 --> 00:06:37.285
we're really sorry you feel unhappy about
this, please DM us with your complaint.

106
00:06:37.285 --> 00:06:41.405
I mean, I don't know, but to be reached
out by someone that actually works on it,

107
00:06:41.405 --> 00:06:45.739
and he's genuinely a human person, and
he's taken an interest, that's amazing.

108
00:06:45.739 --> 00:06:48.743
That's really really good and
definitely worth doing, so yeah.

