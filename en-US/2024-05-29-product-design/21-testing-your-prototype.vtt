WEBVTT

1
00:00:00.000 --> 00:00:01.294
We talked about prototyping.

2
00:00:01.294 --> 00:00:05.965
I've had a bit of a rant about how
people organize their Figma files

3
00:00:05.965 --> 00:00:07.396
that out of the way.

4
00:00:07.396 --> 00:00:09.041
Let's talk about testing for a little bit.

5
00:00:09.041 --> 00:00:14.526
Now, I will say I'm now trying to cram a
four-hour workshop into one small section,

6
00:00:14.526 --> 00:00:18.656
so I would encourage you to go away and
watch the other workshop.

7
00:00:18.656 --> 00:00:23.745
But I will kinda briefly touch on
the role of testing in product design and

8
00:00:23.745 --> 00:00:26.499
how it kinda fits in with prototypes and

9
00:00:26.499 --> 00:00:30.179
what kind of testing you
can do at different stages.

10
00:00:30.179 --> 00:00:35.686
Very briefly, obviously,
testing is essential to product design.

11
00:00:35.686 --> 00:00:40.422
It would be madness not to test your
product if you need to justify it to

12
00:00:40.422 --> 00:00:42.880
anybody who doesn't know better.

13
00:00:42.880 --> 00:00:45.812
After you've given them a good slapping,

14
00:00:45.812 --> 00:00:49.322
you can tell them that it
leads to better products.

15
00:00:49.322 --> 00:00:54.073
It's useful in resolving arguments, and
ultimately, it's gonna save you money.

16
00:00:54.073 --> 00:00:59.072
So it's a kinda no brainer really,
but you have to say these things.

17
00:00:59.072 --> 00:01:03.851
I personally,
a fan have lots of lightweight testing.

18
00:01:03.851 --> 00:01:07.633
I'm not a fan of what often happens,
especially in larger,

19
00:01:07.633 --> 00:01:12.469
more traditional organizations where
all the testing is saved up to the end.

20
00:01:12.469 --> 00:01:17.779
That seems like madness to me, because the
end is the most expensive time to test.

21
00:01:17.779 --> 00:01:23.092
Because if you find anything, well,
you've already built everything,

22
00:01:23.092 --> 00:01:26.815
so the cost of changing it is gonna,
be really high.

23
00:01:26.815 --> 00:01:29.839
And also, if you test a little and
often and

24
00:01:29.839 --> 00:01:32.788
early, you tend to uncover more things.

25
00:01:32.788 --> 00:01:37.297
Steve Crew covered this in his book,
Don't Make Me Think,

26
00:01:37.297 --> 00:01:41.366
from where this illustration
comes that basically.

27
00:01:41.366 --> 00:01:46.064
The crux of the matter is that if
you just do one round of testing,

28
00:01:46.064 --> 00:01:47.717
people get stuck, and

29
00:01:47.717 --> 00:01:53.815
then they don't see problems deeper in the
app because they never get any further.

30
00:01:53.815 --> 00:01:59.722
Well, if you do multiple rounds of
testing, then it gets a lot easier.

31
00:01:59.722 --> 00:02:05.973
So do lots of lightweight testing is
my advice, test early is my advice.

32
00:02:05.973 --> 00:02:10.999
Leaving testing to the end of the project
is pointless, really, as I just said.

33
00:02:10.999 --> 00:02:15.015
In terms of opportunities to test,
I think the further you get

34
00:02:15.015 --> 00:02:18.734
in the development cycle,
the higher the costs become.

35
00:02:18.734 --> 00:02:24.326
So testing in the design phase
obviously makes a lot of sense.

36
00:02:24.326 --> 00:02:27.274
As I said earlier,
I don't test paper prototypes,

37
00:02:27.274 --> 00:02:30.163
cuz I don't think they're very good for
testing.

38
00:02:30.163 --> 00:02:32.868
I know other people would
disagree with me and

39
00:02:32.868 --> 00:02:36.291
think that you should be
testing with paper prototypes.

40
00:02:36.291 --> 00:02:39.199
If you've managed to get
it to work good on you,

41
00:02:39.199 --> 00:02:41.469
you're a better designer than I am.

42
00:02:41.469 --> 00:02:45.899
And I haven't managed to do that
particularly successfully, but

43
00:02:45.899 --> 00:02:48.124
I do test wireframes quite a lot.

44
00:02:48.124 --> 00:02:53.635
And also test mockups, even mockups of
single pages, single screens, and an app.

45
00:02:53.635 --> 00:02:57.507
I think there's definitely room for
mocking up those, and

46
00:02:57.507 --> 00:03:01.312
then obviously full blown
prototypes I definitely test.

47
00:03:01.312 --> 00:03:05.804
Then once we move into the build phase,
I will do a bit of testing at this stage,

48
00:03:05.804 --> 00:03:10.026
especially if things have been changed
from the prototype tend to focus on

49
00:03:10.026 --> 00:03:13.044
navigation at this point,
functionality as well.

50
00:03:13.044 --> 00:03:15.819
The key things, can people find stuff?

51
00:03:15.819 --> 00:03:18.505
Are they successfully
finding their way around it?

52
00:03:18.505 --> 00:03:21.025
So I'll do a little bit at that stage.

53
00:03:21.025 --> 00:03:24.529
And then post-launch,
I tend to do quite a lot.

54
00:03:24.529 --> 00:03:29.393
Even though the cost is higher for
change at this point,

55
00:03:29.393 --> 00:03:34.156
there are a lots of opportunities
to make small changes

56
00:03:34.156 --> 00:03:38.415
that aren't necessarily
that expensive to do.

57
00:03:38.415 --> 00:03:43.152
And so I look for things like exit point
where people are abandoning the app.

58
00:03:43.152 --> 00:03:48.360
I'm looking for friction points where
people get frustrated using the app.

59
00:03:48.360 --> 00:03:53.068
And obviously any new functionality
that gets built would need to be

60
00:03:53.068 --> 00:03:54.231
tested as well.

61
00:03:54.231 --> 00:03:57.518
I favor a very pragmatic
approach to testing.

62
00:03:57.518 --> 00:04:02.389
The testing something is always better
than testing nothing as long as you're

63
00:04:02.389 --> 00:04:07.721
aware that your testing isn't necessarily
perfect and you might introduce biases.

64
00:04:07.721 --> 00:04:13.634
I think sometimes there is a fear of,
I need to make my test perfect.

65
00:04:13.634 --> 00:04:19.139
And so you never quite get around to it or
you don't do it as often as you should do.

66
00:04:19.139 --> 00:04:21.094
So I take the average of,

67
00:04:21.094 --> 00:04:25.843
I don't mind doing rubbish testing
as long as I do a lot of it,

68
00:04:25.843 --> 00:04:30.706
and that I'm aware of any biases
that are associated with it.

69
00:04:30.706 --> 00:04:34.555
I tend to avoid telling
anyone I'm gonna do testing,

70
00:04:34.555 --> 00:04:40.285
because immediately they start interfering
with it and if you ask management,

71
00:04:40.285 --> 00:04:45.860
they're gonna have opinions about it and
maybe they say we don't have time.

72
00:04:45.860 --> 00:04:49.157
So I tend to do testing below the radar,
and

73
00:04:49.157 --> 00:04:53.016
I keep it very lightweight and
very inexpensive.

74
00:04:53.016 --> 00:04:55.663
That's how I do it.

75
00:04:55.663 --> 00:04:59.412
One of the big problems with
testing is always recruitment,

76
00:04:59.412 --> 00:05:02.216
finding people to
actually do testing with.

77
00:05:02.216 --> 00:05:07.937
So when I'm testing usability, I don't
always bother with the exact audience.

78
00:05:07.937 --> 00:05:11.916
I'm quite happy to test with friends and
family,

79
00:05:11.916 --> 00:05:14.948
anyone outside of the organization,

80
00:05:14.948 --> 00:05:20.551
anybody who is not associated with
the project or anything like that.

81
00:05:20.551 --> 00:05:25.567
With usability, the only thing you
need to bear in mind is the people

82
00:05:25.567 --> 00:05:31.646
you test with needs to have comparable
levels of physical and cognitive ability.

83
00:05:31.646 --> 00:05:37.647
So if you're aiming at a children
audience or the elderly audience,

84
00:05:37.647 --> 00:05:42.933
then you probably need to test
with children or the elderly.

85
00:05:42.933 --> 00:05:45.377
But for everybody in between,

86
00:05:45.377 --> 00:05:51.111
you're probably with usability fairly
safe just to test with anybody.

87
00:05:51.111 --> 00:05:54.811
That's not to say it's always preferable
to test with your target audience, but

88
00:05:54.811 --> 00:05:57.718
if you can't get hold of them,
then it's better than nothing.

89
00:05:59.987 --> 00:06:03.926
However, please do not ever test with
anyone related to the company or

90
00:06:03.926 --> 00:06:08.134
the project, they're gonna have a degree
of understanding that end users

91
00:06:08.134 --> 00:06:09.156
wouldn't have.

92
00:06:09.156 --> 00:06:13.301
And these days, many testing tools
will recruit participants for

93
00:06:13.301 --> 00:06:15.827
you often as little as a dollar a person.

94
00:06:15.827 --> 00:06:18.350
So it really isn't that much.

95
00:06:18.350 --> 00:06:23.603
I mean, there's a tool that I
use called Askable that you can

96
00:06:23.603 --> 00:06:29.381
recruit people via Askable and
get them to test anything you want.

97
00:06:29.381 --> 00:06:31.587
It's completely platform agnostic.

98
00:06:31.587 --> 00:06:37.616
So whether you're using figma or
anything else, it doesn't care.

99
00:06:37.616 --> 00:06:43.755
And I think I paid 1 pounds 20 per user.

100
00:06:43.755 --> 00:06:47.275
I don't know what that is in dollars
these days, maybe a couple of dollars,

101
00:06:47.275 --> 00:06:48.331
something like that.

102
00:06:48.331 --> 00:06:51.095
So if you're testing
with just a few people,

103
00:06:51.095 --> 00:06:54.671
you can pay that out of your own pocket,
really, so yeah.

104
00:06:54.671 --> 00:06:59.696
I mean, there's there's so many testing
methodologies that you can use and

105
00:06:59.696 --> 00:07:01.947
so many research methodologies.

106
00:07:01.947 --> 00:07:04.973
It can be quite overwhelming, and so

107
00:07:04.973 --> 00:07:10.544
don't get too worried about it,
don't get too hung up on about it.

108
00:07:10.544 --> 00:07:14.850
I'll share with you the kind
of testing that I do a lot of.

109
00:07:14.850 --> 00:07:18.137
But if you wanna give something a go,

110
00:07:18.137 --> 00:07:22.918
then means have a go at it,
see what happens.

