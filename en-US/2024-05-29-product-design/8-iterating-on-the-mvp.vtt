WEBVTT

1
00:00:00.000 --> 00:00:04.868
And then once you've got that feedback,
then you can start iterating, right,

2
00:00:04.868 --> 00:00:08.174
you can start improving it and
adding stuff around it.

3
00:00:08.174 --> 00:00:13.236
And it's basically, I mean,
we've all seen this kind of cycle before,

4
00:00:13.236 --> 00:00:16.350
so the whole thing goes
something like this.

5
00:00:16.350 --> 00:00:20.634
You start your MVP with discovering
the needs, understanding the users,

6
00:00:20.634 --> 00:00:24.995
setting your value proposition,
all that kind of upfront discovery work.

7
00:00:24.995 --> 00:00:30.118
Then you prototype your MVP,
which you do a bit of internal testing on.

8
00:00:30.118 --> 00:00:34.422
And then you iterate on that MVP and
do some more prototyping, and maybe

9
00:00:34.422 --> 00:00:39.172
the prototype moves to code and you test
a bit more, and then you iterate on it.

10
00:00:39.172 --> 00:00:42.165
And maybe you do a soft launch
with a small number of people, and

11
00:00:42.165 --> 00:00:45.288
you test with those and you iterate
upon it and go round and round.

12
00:00:45.288 --> 00:00:49.035
Now, eventually,
you'll then launch your MVP.

13
00:00:49.035 --> 00:00:53.910
Now, once you've launched your MVP,
right, then you start monitoring and

14
00:00:53.910 --> 00:00:58.195
you look at how people are using it,
how people are interacting it.

15
00:00:58.195 --> 00:01:03.085
And then you refine based on what
you've learned from them, of suggesting

16
00:01:03.085 --> 00:01:08.301
different things you could do, which
are then implemented and then launched.

17
00:01:08.301 --> 00:01:11.686
But then you monitor again,
you refine again, and

18
00:01:11.686 --> 00:01:14.608
you keep going round and
round in this loop.

19
00:01:14.608 --> 00:01:18.331
So essentially, you're never done
when it comes to product design.

20
00:01:18.331 --> 00:01:23.262
And maybe that's another big
difference between product design and

21
00:01:23.262 --> 00:01:27.693
some very informational websites
like a marketing website.

22
00:01:27.693 --> 00:01:31.649
A marketing website,
you can launch and yeah, okay,

23
00:01:31.649 --> 00:01:34.143
maybe update some content, etc.

24
00:01:34.143 --> 00:01:39.445
But if it's mainly informational, there's
not a lot of design work to do long term.

25
00:01:39.445 --> 00:01:42.620
When you get into the middle
of that line that I had, and

26
00:01:42.620 --> 00:01:46.279
you get into e-commerce and
those kinds of things, then yes,

27
00:01:46.279 --> 00:01:50.771
post-launch iteration becomes more
important because you can improve your

28
00:01:50.771 --> 00:01:53.834
conversion rate through iterating and
improving.

29
00:01:53.834 --> 00:01:57.806
Once you get to a SAS app or
a web app or product design,

30
00:01:57.806 --> 00:02:01.001
then it is the heart of what you're doing.

31
00:02:01.001 --> 00:02:03.564
It's the majority of what you're doing,
and

32
00:02:03.564 --> 00:02:06.002
there's so much that you can iterate upon.

33
00:02:06.002 --> 00:02:13.474
You can iterate upon your MVP as a whole,
but also when you launch future features,

34
00:02:13.474 --> 00:02:19.051
those features themselves need
to be iterated upon, right?

35
00:02:19.051 --> 00:02:24.092
And this is another thing that often
goes wrong when it comes to product

36
00:02:24.092 --> 00:02:29.815
design is there is such a focus on pump
out a new feature, pump out a new feature,

37
00:02:29.815 --> 00:02:34.024
pump out a new feature,
one after another after another.

38
00:02:34.024 --> 00:02:38.418
And nobody's going back through
the system iterating upon those features

39
00:02:38.418 --> 00:02:40.447
that have already been launched.

40
00:02:40.447 --> 00:02:45.878
Cuz the chances of you getting
the perfect feature first time that works

41
00:02:45.878 --> 00:02:51.868
seamlessly and everybody just gets and
understands is frankly zero, right?

42
00:02:51.868 --> 00:02:59.294
There is always room for improvement about
anything that you put into the world.

43
00:02:59.294 --> 00:03:01.949
Now, you've got a problem of mine.

44
00:03:01.949 --> 00:03:06.254
Because, well, hang on a minute,
if we can endlessly iterate on our MVP and

45
00:03:06.254 --> 00:03:08.677
we can endlessly iterate on our features,

46
00:03:08.677 --> 00:03:11.996
how do we ever get new features
out into the world, right?

47
00:03:11.996 --> 00:03:14.926
There's a balance to be struck there.

48
00:03:14.926 --> 00:03:19.796
And this is where there's almost a little
bit of project management stuff that needs

49
00:03:19.796 --> 00:03:22.756
to come into our role as
product designers, okay?

50
00:03:22.756 --> 00:03:26.874
And obviously, we'll be working
with the rest of the team of this,

51
00:03:26.874 --> 00:03:31.285
that we need to actually essentially
start building backlogs, right,

52
00:03:31.285 --> 00:03:34.196
of work and
we need multiple backlogs, right?

53
00:03:34.196 --> 00:03:41.255
So I always find if you give it a fancy
name, people are impressed, right?

54
00:03:41.255 --> 00:03:46.670
So I tend to have an optimization stream
and an innovation stream cuz that

55
00:03:46.670 --> 00:03:52.461
sounds cool, or does to senior managers
who love that kind of stuff, right?

56
00:03:52.461 --> 00:03:57.729
So the innovation stream, that's where
you have your new features, right?

57
00:03:57.729 --> 00:04:00.311
We wanna do something completely new, so

58
00:04:00.311 --> 00:04:04.534
we're gonna have this stream of
work that is new features, right?

59
00:04:04.534 --> 00:04:07.043
And then we have an optimization stream,

60
00:04:07.043 --> 00:04:10.561
which is where we're iterating
upon existing features.

61
00:04:10.561 --> 00:04:15.312
Now, how you split and deal with those
two different streams will depend on so

62
00:04:15.312 --> 00:04:16.785
many factors, right?

63
00:04:16.785 --> 00:04:21.567
If you're a one-man band, by yourself,
you might spend half the week

64
00:04:21.567 --> 00:04:26.044
working on innovation and
half the week working on optimization.

65
00:04:26.044 --> 00:04:29.994
If you're a team,
then you might wanna split the team, and

66
00:04:29.994 --> 00:04:34.429
half the team works on innovation and
half works on optimization.

67
00:04:34.429 --> 00:04:39.032
And then you might have separate teams
that work on this different stuff.

68
00:04:39.032 --> 00:04:42.174
But the principle of having two streams,

69
00:04:42.174 --> 00:04:47.649
two backlogs of work dedicated to new
things you wanna put in the world and

70
00:04:47.649 --> 00:04:51.981
the stuff that you wanna
optimize is really worthwhile.

71
00:04:51.981 --> 00:04:56.741
But obviously, there is another
element to this which is, well,

72
00:04:56.741 --> 00:05:00.319
how do we decide what we
wanna focus on first here?

73
00:05:00.319 --> 00:05:03.608
What get at the top of that, right?

74
00:05:03.608 --> 00:05:08.405
Because traditionally,
the way that these streams,

75
00:05:08.405 --> 00:05:13.203
these backlogs are organized
in a lot of organizations

76
00:05:13.203 --> 00:05:16.448
is which is the most urgent, right?

77
00:05:16.448 --> 00:05:21.193
Which comes down to, have we got
a big client that is screaming that

78
00:05:21.193 --> 00:05:25.537
this has to be there, otherwise,
they're gonna abandon?

79
00:05:25.537 --> 00:05:30.911
Or, well, this idea was suggested by
the CEO, so we have to do that one next,

80
00:05:30.911 --> 00:05:35.709
that kind of logic, or we promised
we'd launch this by next week, so

81
00:05:35.709 --> 00:05:39.475
we need to prioritize it,
all of which suck, right?

82
00:05:39.475 --> 00:05:43.237
What you need is some
kind of point system,

83
00:05:43.237 --> 00:05:48.255
some way of establishing
the value of related products or

84
00:05:48.255 --> 00:05:53.600
jobs as they come in that decide
where they go in the backlog.

85
00:05:53.600 --> 00:05:57.332
So what happens then is
as new things come in,

86
00:05:57.332 --> 00:06:01.065
they don't just go to
the bottom of the list,

87
00:06:01.065 --> 00:06:06.090
they get pointed up and
slotted into the appropriate place.

88
00:06:06.090 --> 00:06:10.990
So there will be some features or some
things to iterate upon which never make

89
00:06:10.990 --> 00:06:14.513
it to the top of the list
cuz they're rubbish, right,

90
00:06:14.513 --> 00:06:17.748
because they're not
particularly worth doing.

91
00:06:17.748 --> 00:06:20.974
So, fair enough,
it's survival of the fittest.

92
00:06:20.974 --> 00:06:24.589
The things that matter the most wanna
get to the top of the backlog and

93
00:06:24.589 --> 00:06:27.013
everything else can
languish at the bottom.

94
00:06:27.013 --> 00:06:32.204
So how do you decide on this point system,
right, in order to judge that?

95
00:06:32.204 --> 00:06:37.415
Well, we've kind of already covered it,
really, when we identified our MVP.

96
00:06:37.415 --> 00:06:41.724
We can apply points based on user needs,
based on value proposition,

97
00:06:41.724 --> 00:06:46.415
based on time and effort, it's largely
up to you how you wanna organize it.

98
00:06:46.415 --> 00:06:48.798
There's no magic way of doing it.

99
00:06:48.798 --> 00:06:55.974
But often, I tend to have two
user-orientated criteria and

100
00:06:55.974 --> 00:07:00.344
there may be two business criteria.

101
00:07:00.344 --> 00:07:04.697
So to give you an example, the business
criteria might be the goals of

102
00:07:04.697 --> 00:07:08.836
the organization, what
the organization is trying to achieve.

103
00:07:08.836 --> 00:07:11.877
Are they trying to achieve market growth,

104
00:07:11.877 --> 00:07:15.598
are they trying to customer retention,
whatever?

105
00:07:15.598 --> 00:07:20.284
And then based on those goals,
I will then rank it from one to five.

106
00:07:20.284 --> 00:07:24.932
So it gets five points if it really
nails the big goals of the company,

107
00:07:24.932 --> 00:07:29.921
and one point if it's, well,
it'd be nice to have, but not essential.

108
00:07:29.921 --> 00:07:33.858
And then time and
effort is another one that I often use.

109
00:07:33.858 --> 00:07:36.629
So with that one, it's like, really,

110
00:07:36.629 --> 00:07:40.715
it's gonna be really easy to do,
then it gets five points.

111
00:07:40.715 --> 00:07:45.038
If it can be really hard to do and
it gets one point, okay?

112
00:07:45.038 --> 00:07:49.476
And then we might have user groups,
would be another criteria you might have.

113
00:07:49.476 --> 00:07:53.383
If it's our primary audience
that we're trying to reach and

114
00:07:53.383 --> 00:07:58.910
this new feature has been requested by our
primary audience, that gets five points.

115
00:07:58.910 --> 00:08:03.293
If it's been requested by a secondary
audience and one that we don't really care

116
00:08:03.293 --> 00:08:06.521
very much about,
then it costs one point, gets one point.

117
00:08:06.521 --> 00:08:08.462
And then there's also user needs.

118
00:08:08.462 --> 00:08:11.462
How important is it to those users, right?

119
00:08:11.462 --> 00:08:17.180
So if users are saying, we're gonna
quit if we don't get this feature,

120
00:08:17.180 --> 00:08:19.446
then that gets five points.

121
00:08:19.446 --> 00:08:23.294
And if they're going, well, this would be
nice to have, then it only gets one point,

122
00:08:23.294 --> 00:08:25.377
and then you can put it
in its place in the list.

123
00:08:25.377 --> 00:08:26.897
Yes, question.

124
00:08:26.897 --> 00:08:30.682
&gt;&gt; That's similar to what happens
in sprint planning, right?

125
00:08:30.682 --> 00:08:36.003
&gt;&gt; Yes, but sometimes there is a danger.

126
00:08:36.003 --> 00:08:39.268
Well, you say it's similar to
what they do in sprint planning.

127
00:08:39.268 --> 00:08:44.777
There are so many different ways
that agile and sprint are done,

128
00:08:44.777 --> 00:08:50.198
that it's very hard to definitively
say it's the same or not.

129
00:08:50.198 --> 00:08:53.229
I've seen companies that
supposedly do sprints,

130
00:08:53.229 --> 00:08:55.490
who don't do any of that whatsoever.

131
00:08:55.490 --> 00:09:00.796
And I've been in other organizations that
have massively over-engineered it and

132
00:09:00.796 --> 00:09:03.296
their point system is so complicated,

133
00:09:03.296 --> 00:09:08.394
it takes about a week to work out whether
anything should be done or not, right?

134
00:09:08.394 --> 00:09:11.862
And there's committees involved and
debates and discussions.

135
00:09:11.862 --> 00:09:14.826
I'm just saying,
you need to find a simple,

136
00:09:14.826 --> 00:09:18.575
clean system to prioritize
your work that works for you.

137
00:09:18.575 --> 00:09:21.912
Doesn't have to be the way
I've just described it, but

138
00:09:21.912 --> 00:09:24.114
avoid it being over-engineered and

139
00:09:24.114 --> 00:09:28.382
avoid it being based on who shouts
the loudest and what's most urgent.

140
00:09:28.382 --> 00:09:31.175
That's what I'm driving at, really.

141
00:09:31.175 --> 00:09:32.440
Yes, go for it.

142
00:09:32.440 --> 00:09:38.117
&gt;&gt; So I have a question on a lot of large
enterprises will have a data science or

143
00:09:38.117 --> 00:09:42.973
business intelligence kind of
organizations within them that

144
00:09:42.973 --> 00:09:47.669
are evaluating the success of
certain metrics or features.

145
00:09:47.669 --> 00:09:51.518
And I wonder how designers
can collaborate within

146
00:09:51.518 --> 00:09:56.194
those kind of organizations
also not stifling innovation?

147
00:09:56.194 --> 00:10:01.731
Because I know database decision-making
is a very hot topic these days,

148
00:10:01.731 --> 00:10:06.823
and so how can you collaborate
within larger enterprises while also

149
00:10:06.823 --> 00:10:12.912
making sure that you're producing
something that is valuable and innovative?

150
00:10:12.912 --> 00:10:16.707
&gt;&gt; That's an extremely good question
because a lot of the people,

151
00:10:16.707 --> 00:10:21.488
a lot of the organizations I've worked
with have business analysts who are going

152
00:10:21.488 --> 00:10:23.400
over data and that kinda thing.

153
00:10:23.400 --> 00:10:30.315
I tend to switch my approach a little
bit in those kinds of scenarios,

154
00:10:30.315 --> 00:10:36.648
and I shift to becoming more
the voice of the customer, right?

155
00:10:36.648 --> 00:10:40.395
So I try and offset,
that data is absolutely valuable,

156
00:10:40.395 --> 00:10:43.598
and I'm not in any way criticizing it,
right?

157
00:10:43.598 --> 00:10:47.347
But it needs to be balanced
with qualitative data as well,

158
00:10:47.347 --> 00:10:51.336
a more empathetic approach and
a more qualitative approach.

159
00:10:51.336 --> 00:10:55.379
So that's where my other
course comes in really useful,

160
00:10:55.379 --> 00:11:01.360
where we talked about user research, and
user testing, and those kinds of things,

161
00:11:01.360 --> 00:11:06.248
with a particular emphasis on
the more things like user interviews,

162
00:11:06.248 --> 00:11:11.587
usability testing, facilitated
usability testing, things like that.

163
00:11:11.587 --> 00:11:17.764
So I basically will lean more
into doing that kind of work and

164
00:11:17.764 --> 00:11:24.573
making sure that feeds into
the business analyst side of things.

165
00:11:24.573 --> 00:11:25.966
And in a large organization,

166
00:11:25.966 --> 00:11:29.423
some of the stuff that I've been talking
about here tends to happen more on

167
00:11:29.423 --> 00:11:33.344
the business analyst side than it does
the product design side, and that's fine.

168
00:11:33.344 --> 00:11:37.838
That's okay, if they wanna set the
roadmap, I'm entirely supportive of that.

169
00:11:37.838 --> 00:11:42.550
But then it's my responsibility as
the product designer to feed into them

170
00:11:42.550 --> 00:11:45.894
the additional context that
they need to know to make

171
00:11:45.894 --> 00:11:50.834
an informed decision because they have
this bias towards the data over time.

172
00:11:50.834 --> 00:11:53.804
Which is fine, but
it's not the whole picture.

