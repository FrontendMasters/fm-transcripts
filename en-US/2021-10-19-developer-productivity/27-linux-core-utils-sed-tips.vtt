WEBVTT

1
00:00:00.200 --> 00:00:03.415
Here's another one that I thought was
ridiculous that I can't believe I didn't

2
00:00:03.415 --> 00:00:04.180
use before.

3
00:00:04.180 --> 00:00:07.543
Let's solve one more problem
using just the shell right here,

4
00:00:07.543 --> 00:00:09.838
we're gonna have a bunch of lines of text.

5
00:00:09.838 --> 00:00:14.440
Each line of text is gonna contain
whitespace separated characters, right?

6
00:00:14.440 --> 00:00:19.072
Or whitespace separated words and each
one of these words are gonna be a number,

7
00:00:19.072 --> 00:00:21.860
we're gonna wanna sum them all together.

8
00:00:21.860 --> 00:00:24.360
And then, I wanna find the maximum sum.

9
00:00:24.360 --> 00:00:31.530
Now, if you remember earlier, if I go to
work temp, pipe actually kinda did this.

10
00:00:31.530 --> 00:00:34.360
It went in here,
it split the line and it did a sum.

11
00:00:34.360 --> 00:00:36.450
What it didn't do is it
didn't find the maximum one.

12
00:00:36.450 --> 00:00:38.740
So we actually kind of
did this once before.

13
00:00:38.740 --> 00:00:42.154
Which this took, requiring a module,
creating an interface and

14
00:00:42.154 --> 00:00:44.480
reading it line by line and
printing it out.

15
00:00:44.480 --> 00:00:49.067
So if I wanted to sum it, I'd also have to
be able to wait for this thing to close,

16
00:00:49.067 --> 00:00:51.910
then go through and
find the largest number.

17
00:00:51.910 --> 00:00:54.760
It'd be a little bit more
work to make this one work.

18
00:00:54.760 --> 00:00:58.747
But it's a little bit easier
with some core usals.

19
00:00:58.747 --> 00:01:01.675
So let's go up here and
let's do this one, there we go.

20
00:01:01.675 --> 00:01:05.684
We already have ourselves a couple lines
that have a bunch of numbers in it.

21
00:01:05.684 --> 00:01:07.910
There we go, look at that,
look how easy that is.

22
00:01:07.910 --> 00:01:12.650
So what I can do is I can actually
take this and I could pipe it to tr.

23
00:01:12.650 --> 00:01:15.430
And remember tr does
all those sweet things.

24
00:01:15.430 --> 00:01:19.210
I'm gonna take it and I'm gonna replace
every white space with the plus sign.

25
00:01:19.210 --> 00:01:20.700
Look at that, how great is that?

26
00:01:20.700 --> 00:01:24.560
Now I can take that and
pipe it to calculator.

27
00:01:24.560 --> 00:01:26.240
Look at that, I just summed it.

28
00:01:26.240 --> 00:01:28.210
It just summed all those numbers.

29
00:01:28.210 --> 00:01:33.230
I mean, how fantastic is this, tell me
you're not feeling fantastic right now.

30
00:01:33.230 --> 00:01:34.430
I'm feeling so good.

31
00:01:34.430 --> 00:01:36.921
And so then after we take that,
we gotta find the highest number.

32
00:01:36.921 --> 00:01:40.302
So remember, we can sort with
natural numbers and reverse it.

33
00:01:40.302 --> 00:01:41.430
39 is now on top.

34
00:01:41.430 --> 00:01:43.293
This is looking really good.

35
00:01:43.293 --> 00:01:46.588
So then all we need to do is go ahead and
we only want the first result.

36
00:01:46.588 --> 00:01:50.434
Look at that, I just solved it,
just solved that sweet problem in just so

37
00:01:50.434 --> 00:01:51.200
few letters.

38
00:01:51.200 --> 00:01:55.043
This is one of those, I cannot wait for
the day that I have an interview and

39
00:01:55.043 --> 00:01:57.185
someone asked me something like this and

40
00:01:57.185 --> 00:02:00.905
all I can do is just write core
utils instead of writing a program.

41
00:02:00.905 --> 00:02:02.795
It's gonna be the greatest day on earth.

42
00:02:02.795 --> 00:02:06.396
I just cannot wait for that to happen,
because they're so useful and

43
00:02:06.396 --> 00:02:10.485
people don't realize how many easy
problems you can solve just using this.

44
00:02:10.485 --> 00:02:12.295
I just used a couple little quick things.

45
00:02:12.295 --> 00:02:14.410
Yeah, sure I'm spawning
a bunch of processes.

46
00:02:14.410 --> 00:02:19.565
It's not resource efficient, but it is
certainly by the way factor efficient.

47
00:02:19.565 --> 00:02:22.805
And the reality is,
is that if you're doing your job,

48
00:02:22.805 --> 00:02:25.138
often you have some sort of log output.

49
00:02:25.138 --> 00:02:29.019
Some sort of set of strings you have
to manipulate or search through or to

50
00:02:29.019 --> 00:02:33.740
understand to be able to debug something
or gather some sort of information.

51
00:02:33.740 --> 00:02:37.488
If you know core utils better,
I find that this makes my job so

52
00:02:37.488 --> 00:02:40.590
much easier cuz I can do so
many forms of grabbing.

53
00:02:40.590 --> 00:02:44.157
I remember having this memory problem and
I had to go through a whole bunch of stuff

54
00:02:44.157 --> 00:02:46.720
and it only happened in
certain memory conditions.

55
00:02:46.720 --> 00:02:48.582
So I couldn't just put a breakpoint in it,

56
00:02:48.582 --> 00:02:50.820
plus it required a bunch
of programs to run.

57
00:02:50.820 --> 00:02:53.202
And so
instead I just printed stuff out and

58
00:02:53.202 --> 00:02:55.830
I printed out 10 million lines of logs.

59
00:02:55.830 --> 00:02:59.320
And so I just needed to find a series
of things happening in those logs,

60
00:02:59.320 --> 00:03:01.850
it was obvious I could
never use my eyeballs.

61
00:03:01.850 --> 00:03:06.487
So instead I just kept reducing it
using some simple string processing and

62
00:03:06.487 --> 00:03:08.050
it became magical.

63
00:03:08.050 --> 00:03:12.180
It's just so nice having these things
in your tool belt, I strongly recommend

64
00:03:12.180 --> 00:03:15.872
taking a day and go and learn some core
utils because it can just solve so

65
00:03:15.872 --> 00:03:18.590
many problems you don't
realize it can solve.

66
00:03:18.590 --> 00:03:21.800
Now, not all the problems are great, but
some of them are really, really great.

67
00:03:21.800 --> 00:03:23.080
Now here's another question.

68
00:03:23.080 --> 00:03:27.042
I'm curious how many people would
have used awk, write a program or

69
00:03:27.042 --> 00:03:28.444
just used bc sort head.

70
00:03:28.444 --> 00:03:29.586
These are all things you could have used.

71
00:03:29.586 --> 00:03:31.829
You definitely could
have used awk to do that,

72
00:03:31.829 --> 00:03:34.770
awk has this cool kinda like array syntax,
you can print it.

73
00:03:34.770 --> 00:03:38.053
But then the printing is a little,
not as easy cuz you have to do for

74
00:03:38.053 --> 00:03:40.921
each entry in the dictionary and
print out each line, and

75
00:03:40.921 --> 00:03:43.960
blah blah blah, but either way,
this is pretty cool.

76
00:03:43.960 --> 00:03:47.120
The fact that you can use these is really,
really nice.

77
00:03:47.120 --> 00:03:49.893
There's some other utils that used,
I've used all these right here,

78
00:03:49.893 --> 00:03:51.510
throughout this presentation.

79
00:03:51.510 --> 00:03:54.278
You should just know these, grep is
probably the one I haven't used the most.

80
00:03:54.278 --> 00:03:58.334
And by the way, just me saying the word
grep, the proper Rustaceans would have

81
00:03:58.334 --> 00:04:02.214
interjected, well, actually RG is better,
RG's grep written in rust.

82
00:04:02.214 --> 00:04:06.060
So you should use that because
it's faster and safer and better.

83
00:04:06.060 --> 00:04:09.350
And lastly, I did wanna give
you one more quick tip on sed.

84
00:04:09.350 --> 00:04:11.225
If you're wondering why
I'm moving a little fast,

85
00:04:11.225 --> 00:04:12.513
I have a really super cool session.

86
00:04:12.513 --> 00:04:15.132
One last thing I want to cover and we're
kinda getting near the end of the day.

87
00:04:16.666 --> 00:04:19.740
And I didn't really wanna talk in
depth about a lot of these core utils.

88
00:04:19.740 --> 00:04:23.599
I just wanna show you the type of
problems you can solve with it.

89
00:04:23.599 --> 00:04:25.428
So you really feel
empowered to go look for

90
00:04:25.428 --> 00:04:28.824
the answers, as opposed to me just
giving you the answers, cuz ultimately,

91
00:04:28.824 --> 00:04:31.243
you're not gonna learn if I
only give you the answers.

92
00:04:31.243 --> 00:04:34.293
You're only gonna learn if you
do this yourself a few times.

93
00:04:34.293 --> 00:04:35.936
So some tips on sed.

94
00:04:35.936 --> 00:04:39.460
Sed is like one of those things
that feel super confusing.

95
00:04:39.460 --> 00:04:42.396
I'll give you an example,
echo hello world.

96
00:04:42.396 --> 00:04:48.109
Now, you can take this and you can pipe it
into sed, and you can say, I wanna take

97
00:04:48.109 --> 00:04:53.673
each line, and I wanna replace occurrences
of world with front end masters.

98
00:04:53.673 --> 00:04:56.480
End it with the slash and there you go.

99
00:04:56.480 --> 00:05:00.774
So instead of saying hello world,
it says hello front end masters.

100
00:05:00.774 --> 00:05:02.760
It's pretty radical.

101
00:05:02.760 --> 00:05:04.600
I love these kinda things,
I think they're super cool.

102
00:05:04.600 --> 00:05:08.564
You can do really cool
things solving it with sed.

103
00:05:08.564 --> 00:05:13.616
Look at that, someone's doing a nice
little sweet sed move instead of using tr.

104
00:05:13.616 --> 00:05:14.116
Cool move sed guy.

105
00:05:15.231 --> 00:05:18.957
So there we go, you can do that, awesome.

106
00:05:18.957 --> 00:05:22.384
You're using sed,
you see that we can do simple replaces.

107
00:05:22.384 --> 00:05:29.222
Well, for me, the language you can use
in sed can be sometimes a bit confusing.

108
00:05:29.222 --> 00:05:32.147
But what I found to be really
nice is that I use VIM.

109
00:05:32.147 --> 00:05:34.990
By the way, I don't know if you
know this but I actually use VIM,

110
00:05:34.990 --> 00:05:36.743
I needed to just say that one last time.

111
00:05:36.743 --> 00:05:40.638
So I wanna find, let's see, there has to
be a section that is kinda confusing.

112
00:05:40.638 --> 00:05:45.294
This one here, actually, let's go back
to here and let's use, I'm in my,

113
00:05:45.294 --> 00:05:46.650
there we go.

114
00:05:46.650 --> 00:05:49.140
Let's use the sessionizer, here we go.

115
00:05:49.140 --> 00:05:51.510
Let's say we wanted to take sed and

116
00:05:51.510 --> 00:05:56.390
replace everything that is found
in quotes with something else.

117
00:05:56.390 --> 00:05:59.583
Now, obviously we could open up our
editor, use find replace, go through each

118
00:05:59.583 --> 00:06:03.100
one of those, but let's just say we
just wanted to do that really simply.

119
00:06:03.100 --> 00:06:06.680
We wanna replace everything in
quotes with the word quote.

120
00:06:06.680 --> 00:06:11.020
So, how I kinda go about some of these
things is I actually end up using vim.

121
00:06:11.020 --> 00:06:14.660
So I come in here and I go like
this s slash, or before I do that,

122
00:06:14.660 --> 00:06:16.440
you have to set incsearch.

123
00:06:16.440 --> 00:06:20.800
This is very important, set in search
allows you to have incremental search.

124
00:06:20.800 --> 00:06:25.406
If you forget these things, I believe it's
chapter four inside of the vim tutor,

125
00:06:25.406 --> 00:06:28.630
which by the way,
World Record speed runner vim tutor.

126
00:06:28.630 --> 00:06:30.240
Just wanna throw that
out there right here.

127
00:06:30.240 --> 00:06:33.850
World Record, 2 minutes and
57 seconds I believe, all commands.

128
00:06:33.850 --> 00:06:36.490
100% no cheats, nothing but pure jumps.

129
00:06:36.490 --> 00:06:37.365
It's beautiful.

130
00:06:38.761 --> 00:06:42.446
So, if you wanted to do that,
what I do is I go like this.

131
00:06:42.446 --> 00:06:46.320
I go, you can start searching and
it will auto highlight for you.

132
00:06:46.320 --> 00:06:49.770
This syntax is almost
identical to sed syntax.

133
00:06:49.770 --> 00:06:54.090
So often I just use them as my test
ground, and then I can just go and

134
00:06:54.090 --> 00:06:55.680
do it elsewhere.

135
00:06:55.680 --> 00:06:56.950
So let's go like this.

136
00:06:56.950 --> 00:06:59.800
Let's take this and I go,
okay, I wanna search for that.

137
00:06:59.800 --> 00:07:03.036
And I could then .start
to the next parenthesis.

138
00:07:03.036 --> 00:07:04.545
That sort of works.

139
00:07:04.545 --> 00:07:08.730
If you have multiple strings on a single
line, my guess is that won't work.

140
00:07:08.730 --> 00:07:09.360
So let's try it.

141
00:07:09.360 --> 00:07:10.578
Let's go right here.

142
00:07:10.578 --> 00:07:12.686
Yeah, look at that, it doesn't work.

143
00:07:12.686 --> 00:07:14.520
And so
you can kinda see how these things work.

144
00:07:14.520 --> 00:07:18.060
You can kind of work with it and you can
start playing and go, that doesn't work.

145
00:07:18.060 --> 00:07:20.530
Maybe I need to do some
other type of lookup.

146
00:07:20.530 --> 00:07:23.235
I don't know how these things work,
I'm terrible at regexes,

147
00:07:23.235 --> 00:07:25.110
I don't plan on ever using regexes.

148
00:07:25.110 --> 00:07:28.356
But either way, you can go through,
use all these things and

149
00:07:28.356 --> 00:07:30.980
figure out how you want to replace stuff.

150
00:07:30.980 --> 00:07:32.839
And then you can go to sed and use that.

151
00:07:32.839 --> 00:07:34.405
That's kinda been my strategy for

152
00:07:34.405 --> 00:07:37.130
a long time to use more
complicated sed operations.

153
00:07:37.130 --> 00:07:41.060
Just cuz it just makes it a lot easier and
you can visually see it happen.

154
00:07:41.060 --> 00:07:43.398
Yeah, that's what I've
always done with them.

155
00:07:43.398 --> 00:07:47.186
And I figured that'd be like a nice
little, a quick tip on sed if you

156
00:07:47.186 --> 00:07:50.790
ever have something complicated
that you need to do with a log.

157
00:07:50.790 --> 00:07:54.625
And you can do it, just some ad hoc regex,
open up vim, put an example in there,

158
00:07:54.625 --> 00:07:55.824
do it in vim, go, okay,

159
00:07:55.824 --> 00:07:59.490
that's the exact one, I can see
it happen incrementally, awesome.

160
00:07:59.490 --> 00:08:03.644
Put it inside sed,
it should work for the most part.

161
00:08:03.644 --> 00:08:06.522
I wanna get to this one
last little section.

162
00:08:06.522 --> 00:08:09.435
This is the last and
final section of the day, and

163
00:08:09.435 --> 00:08:12.788
this is where I feel like I'm
gonna be the most excited.

164
00:08:12.788 --> 00:08:16.679
Cuz this is kind of interesting, cuz we're
gonna talk about today and the future.

165
00:08:16.679 --> 00:08:22.849
The future of mankind, 2022,
2023, who knows, maybe even 2024?

