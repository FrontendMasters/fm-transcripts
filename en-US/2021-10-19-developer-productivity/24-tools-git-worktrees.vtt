WEBVTT

1
00:00:00.000 --> 00:00:03.037
So now we're gonna go into section 3.

2
00:00:03.037 --> 00:00:06.768
All right, I know I backed away from
the computer so I didn't mute myself.

3
00:00:06.768 --> 00:00:08.439
I don't know if you saw
that I got really excited.

4
00:00:08.439 --> 00:00:09.829
I don't wanna mute it all.

5
00:00:09.829 --> 00:00:11.963
But this is tools in the future.

6
00:00:11.963 --> 00:00:16.124
Yes, the future, not just 2021 but
even further beyond, but

7
00:00:16.124 --> 00:00:19.257
first we're gonna take
a quick pit stop in tools.

8
00:00:19.257 --> 00:00:20.884
Cuz tools are fantastic.

9
00:00:20.884 --> 00:00:23.703
I just wanna highlight a couple of them.

10
00:00:23.703 --> 00:00:24.682
So let's do this.

11
00:00:24.682 --> 00:00:26.779
I call this part git the cool parts.

12
00:00:26.779 --> 00:00:31.746
Really, I know that most people probably
use git, I just assume use git.

13
00:00:31.746 --> 00:00:36.315
It's kind of like the hot thing for
like the last decade at least.

14
00:00:36.315 --> 00:00:38.018
I really liked git.

15
00:00:38.018 --> 00:00:41.414
But for about eight years, I really
only knew about push pull and rebase.

16
00:00:41.414 --> 00:00:41.941
Right?

17
00:00:41.941 --> 00:00:42.521
That was me.

18
00:00:42.521 --> 00:00:44.523
I rebased, I pushed, I pulled, William,

19
00:00:44.523 --> 00:00:46.969
I know you're around on
the stream from time to time.

20
00:00:46.969 --> 00:00:50.927
So you probably already know partially
where I'm going at this point with this,

21
00:00:50.927 --> 00:00:52.335
but there's this feature.

22
00:00:52.335 --> 00:00:53.203
That's really awesome.

23
00:00:53.203 --> 00:00:55.795
It's called work trees and
most people don't know about them.

24
00:00:55.795 --> 00:00:57.607
How do I know most people don't work?

25
00:00:57.607 --> 00:01:02.399
No bottom, well just this year Guido
van Rossum the Guido himself said why

26
00:01:02.399 --> 00:01:05.193
did I not know about get worktree, right?

27
00:01:05.193 --> 00:01:10.434
Sad face classic,
1990 sad face has the nose and everything.

28
00:01:10.434 --> 00:01:12.536
So people really don't
know about these features.

29
00:01:12.536 --> 00:01:13.194
It's true.

30
00:01:13.194 --> 00:01:17.673
Like these are weird features that
are hard to like you just you never

31
00:01:17.673 --> 00:01:19.256
run into them, right?

32
00:01:19.256 --> 00:01:23.189
You have no reason to run into them
because you're always just simply checking

33
00:01:23.189 --> 00:01:24.033
something out.

34
00:01:24.033 --> 00:01:27.787
What you don't realize is you're
actually in a work tree when you check

35
00:01:27.787 --> 00:01:30.490
something out, but
it's a little bit different.

36
00:01:30.490 --> 00:01:31.720
There's better ways to work with it.

37
00:01:31.720 --> 00:01:32.954
So what is the work tree?

38
00:01:32.954 --> 00:01:36.210
Well, there's a lot of ways, let's see.

39
00:01:36.210 --> 00:01:40.182
So how would you describe a work tree
a word tree simply is a commit in time.

40
00:01:40.182 --> 00:01:42.899
Just like if you're on master,
you're at technically art.

41
00:01:42.899 --> 00:01:44.328
Actually add a commit, right?

42
00:01:44.328 --> 00:01:47.768
You're not all of the commits
before it's do not make the branch.

43
00:01:47.768 --> 00:01:50.574
The current commit is
really what the branch is.

44
00:01:50.574 --> 00:01:52.401
And that's just a named commit.

45
00:01:52.401 --> 00:01:53.769
It's kind of how I think about it.

46
00:01:53.769 --> 00:01:56.991
A work tree is just a named commit, right?

47
00:01:56.991 --> 00:02:01.474
You're just gonna say hey, I'm gonna go to
this, this commit at this point in time,

48
00:02:01.474 --> 00:02:03.612
you can have several work trees at once.

49
00:02:03.612 --> 00:02:06.921
Meaning that you don't have to just have
this one that you're always working on.

50
00:02:06.921 --> 00:02:08.730
You can have several of them at once.

51
00:02:08.730 --> 00:02:09.584
It's quite fantastic.

52
00:02:09.584 --> 00:02:12.277
You can do it without having
bear repos and all that.

53
00:02:12.277 --> 00:02:16.234
But I suggest using bear posts will
kind of get into it here right away.

54
00:02:16.234 --> 00:02:19.014
So there's a lot of ways,
but I'm just gonna show you,

55
00:02:19.014 --> 00:02:20.560
you can read up on strategies.

56
00:02:20.560 --> 00:02:23.440
You don't have to use a bear repo,
I just prefer it that way.

57
00:02:23.440 --> 00:02:24.043
So here we go.

58
00:02:24.043 --> 00:02:26.694
So let's check out my favorite
project in the universe,

59
00:02:26.694 --> 00:02:29.469
which is the one I've been
working on called refactoring.

60
00:02:29.469 --> 00:02:32.661
Now, for whatever reason we're
gonna just do it inside of my temp,

61
00:02:32.661 --> 00:02:35.069
for whatever reason,
when you do a git clone bare.

62
00:02:35.069 --> 00:02:38.711
What will end up happening is that it
actually adds the dot git as part of

63
00:02:38.711 --> 00:02:39.283
the name.

64
00:02:39.283 --> 00:02:41.747
Normally, when you clone something
out you don't get that dot.

65
00:02:41.747 --> 00:02:44.566
You don't get the dot on the end
it just drops it, but bare for

66
00:02:44.566 --> 00:02:46.294
whatever reason refuses to drop it.

67
00:02:46.294 --> 00:02:47.250
So you always get the docket.

68
00:02:47.250 --> 00:02:49.148
So I always have a name afterwards.

69
00:02:49.148 --> 00:02:52.758
So I name it, I'm gonna clone from
this repo, and I'm gonna name it this.

70
00:02:52.758 --> 00:02:53.317
There we go.

71
00:02:53.317 --> 00:02:55.621
So we're gonna go,
we're gonna clone, it's fantastic.

72
00:02:55.621 --> 00:02:56.805
Awesome, we have it.

73
00:02:56.805 --> 00:02:58.885
Let's cd into refactoring.

74
00:02:58.885 --> 00:03:00.438
And what do we have here?

75
00:03:00.438 --> 00:03:03.638
Well, this looks not what
you're kinda used to, right?

76
00:03:03.638 --> 00:03:05.323
And if I go like this, git status,

77
00:03:05.323 --> 00:03:08.187
it's like I don't even know
what you're talking about?

78
00:03:08.187 --> 00:03:10.231
What's this status business, right?

79
00:03:10.231 --> 00:03:11.890
You're not in a work tree.

80
00:03:11.890 --> 00:03:15.660
So this is not how normally git works,
right?

81
00:03:15.660 --> 00:03:17.526
This is just not how it works.

82
00:03:17.526 --> 00:03:21.176
So, this is a little bit different,
but it does have a git folder.

83
00:03:21.176 --> 00:03:24.771
So if we go LS dash LA, you'll notice
there is a git folder somewhere else,

84
00:03:24.771 --> 00:03:27.523
nevermind that the information
is just all spread here.

85
00:03:27.523 --> 00:03:29.594
Sorry, it doesn't have a git
folder blah blah blah but

86
00:03:29.594 --> 00:03:31.406
there is always all that
information in there.

87
00:03:31.406 --> 00:03:33.347
This is effectively your git folder,
right?.

88
00:03:33.347 --> 00:03:35.848
It has a bunch of that in there.

89
00:03:35.848 --> 00:03:37.330
So how do we know what's available?.

90
00:03:37.330 --> 00:03:41.179
Well, we can start off with git,
work tree list.

91
00:03:41.179 --> 00:03:43.685
It's gonna say, hey,
this is what you have,

92
00:03:43.685 --> 00:03:46.464
which currently is nothing fantastic,
right?.

93
00:03:46.464 --> 00:03:50.323
So how do we know what to use, like right?

94
00:03:50.323 --> 00:03:53.120
Well guess what,
let's use man to start of with, right?

95
00:03:53.120 --> 00:03:58.237
Man git-worktree, here we go, I think the
first sentence is pretty good, let's see.

96
00:03:58.237 --> 00:04:00.611
A git repository can support
multiple work trees,

97
00:04:00.611 --> 00:04:04.322
allowing you to check out more than one
branch at a time, with git worktree add.

98
00:04:04.322 --> 00:04:08.166
Also we kinda already know what's going on
here a new work tree is associated with

99
00:04:08.166 --> 00:04:09.023
the repository.

100
00:04:09.023 --> 00:04:12.349
This working tree is also
called a linked working tree,

101
00:04:12.349 --> 00:04:16.541
as opposed to the main working tree
prepared by a git init or git clone.

102
00:04:16.541 --> 00:04:17.126
So there you go.

103
00:04:17.126 --> 00:04:22.240
So whenever you check out with just git
clone, you have a main working tree.

104
00:04:22.240 --> 00:04:24.035
Now this one's a little bit different,
all right?

105
00:04:24.035 --> 00:04:26.312
We're actually selecting
which ones we want.

106
00:04:26.312 --> 00:04:30.197
A repository has one main working tree,
if it's not a bear repo, right?

107
00:04:30.197 --> 00:04:32.524
And zero or more linked working trees.

108
00:04:32.524 --> 00:04:35.872
When you're done with linked working
trees, you can remove it with git or

109
00:04:35.872 --> 00:04:39.067
tree remove, or you can delete
the folder and use get work tree prune.

110
00:04:39.067 --> 00:04:42.916
I added that last part because it's part
of Griffin, he just got to keep going,

111
00:04:42.916 --> 00:04:44.074
just got to keep going.

112
00:04:44.074 --> 00:04:48.058
All right, so also it's really great,
we can use cht.sh.

113
00:04:48.058 --> 00:04:50.608
My goodness, it's like we're
already ready to use these things.

114
00:04:50.608 --> 00:04:52.465
So I'm just gonna go like this cht.sh.

115
00:04:52.465 --> 00:04:55.591
Here we go,
it's actually using something called TLDR.

116
00:04:55.591 --> 00:04:59.605
So we don't even need to use cht.sh we
could actually just use TLDR go git.

117
00:04:59.605 --> 00:05:02.195
I think it's worktree I always
forget how to use this.

118
00:05:02.195 --> 00:05:04.905
You use the TLDR here.

119
00:05:04.905 --> 00:05:08.883
My goodness, dash.

120
00:05:08.883 --> 00:05:09.392
There it is.

121
00:05:09.392 --> 00:05:10.017
Alright dash.

122
00:05:10.017 --> 00:05:13.735
Always forget how to use word tree.

123
00:05:13.735 --> 00:05:18.232
Okay, so we need to do get work tree
add path to directory branch name,

124
00:05:18.232 --> 00:05:21.449
we can create a new branch
by using the dashboard.

125
00:05:21.449 --> 00:05:24.750
So a lot like git checkout
dashboard creates a new branch.

126
00:05:24.750 --> 00:05:28.186
We can do get worked through your list and
get worked reproved.

127
00:05:28.186 --> 00:05:32.272
So there's a lot of its major operations
we kind of now just know how to use them.

128
00:05:32.272 --> 00:05:33.463
So let's use one.

129
00:05:33.463 --> 00:05:38.024
Let's go, git work tree add master up,
we got to do two things, right?

130
00:05:38.024 --> 00:05:41.778
Master, because that's the path
plus this one, it already exists.

131
00:05:41.778 --> 00:05:42.999
We can't just do that.

132
00:05:42.999 --> 00:05:43.913
So is it B?

133
00:05:43.913 --> 00:05:45.459
No, it already exists.

134
00:05:45.459 --> 00:05:46.446
So why didn't that work out?

135
00:05:46.446 --> 00:05:47.935
Do I already have master checked out?

136
00:05:47.935 --> 00:05:49.030
I do.
It's right here.

137
00:05:49.030 --> 00:05:49.660
Silly me.

138
00:05:49.660 --> 00:05:50.419
It comes with it.

139
00:05:50.419 --> 00:05:53.437
So let's check out something else.

140
00:05:53.437 --> 00:05:56.043
Let's check out a new work tree, right?

141
00:05:56.043 --> 00:06:02.727
So let's go -b and go foo, right?

142
00:06:02.727 --> 00:06:04.405
And let's create a branch called foo.

143
00:06:04.405 --> 00:06:06.437
There we go,
we now have a branch called foo.

144
00:06:06.437 --> 00:06:11.032
So if we real ls in here, we'll see
that we have a new folder called foo.

145
00:06:11.032 --> 00:06:11.880
It's right there.

146
00:06:11.880 --> 00:06:13.524
If we do git worktree list,

147
00:06:13.524 --> 00:06:17.605
you'll notice that we have these
two beautiful things right here.

148
00:06:17.605 --> 00:06:19.500
I must have actually added
master at some point.

149
00:06:19.500 --> 00:06:22.439
I don't know why I didn't see that before,
anyways either way,

150
00:06:22.439 --> 00:06:23.678
you'll see it right here.

151
00:06:23.678 --> 00:06:24.588
We have these two.

152
00:06:24.588 --> 00:06:28.410
So that means when I go into say foo and
I look at it,

153
00:06:28.410 --> 00:06:31.777
it actually is my repository, right here.

154
00:06:31.777 --> 00:06:34.785
This like genuinely is my repository.

155
00:06:34.785 --> 00:06:39.070
This is equivalent doing a git clone,
this is my working tree.

156
00:06:39.070 --> 00:06:40.557
So let's make it more obvious.

157
00:06:40.557 --> 00:06:45.112
All right, we're gonna go in here
we're gonna go to, let's go to 106.

158
00:06:45.112 --> 00:06:45.848
Here we go.

159
00:06:45.848 --> 00:06:47.179
I'm gonna put a space in here.

160
00:06:47.179 --> 00:06:47.960
I'm gonna go to GS.

161
00:06:47.960 --> 00:06:50.035
You'll notice that I'm in head foo.

162
00:06:50.035 --> 00:06:55.008
Where it's at all those things so I'm
gonna go over here and I'm gonna check out

163
00:06:55.008 --> 00:06:59.035
master for a quick second right
master does not have that right?

164
00:06:59.035 --> 00:06:59.728
Master does not have that.

165
00:06:59.728 --> 00:07:03.254
So look at that I just went from
one branch that has an act of

166
00:07:03.254 --> 00:07:07.240
change right now going to another
branch that doesn't have it.

167
00:07:07.240 --> 00:07:09.321
Right, I just switched
between those two branches.

168
00:07:09.321 --> 00:07:12.494
And they both exist on my system
at the exact same time, right?

169
00:07:12.494 --> 00:07:15.263
They're both still right here,
master and foo.

170
00:07:15.263 --> 00:07:18.575
So if I were to go see the foo,
git status,

171
00:07:18.575 --> 00:07:21.530
I actually have a change right here.

172
00:07:21.530 --> 00:07:25.018
And if I were to go back to my main
branch right here, I'd go git status.

173
00:07:25.018 --> 00:07:27.016
It has nothing in it.

174
00:07:27.016 --> 00:07:31.719
So this is one of the huge I think
superpowers of git work trees.

175
00:07:31.719 --> 00:07:34.827
When would I not use these?

176
00:07:34.827 --> 00:07:38.411
When would I not I always use work
trees if I have the chance to like so

177
00:07:38.411 --> 00:07:41.944
when I did the Gatsby course you
have to check it out using Gatsby.

178
00:07:41.944 --> 00:07:45.445
Gatsby does not allow me
to use working trees.

179
00:07:45.445 --> 00:07:48.423
I can't do linked working trees
the way I normally would like to.

180
00:07:48.423 --> 00:07:51.042
So it kind of it breaks my workflow.

181
00:07:51.042 --> 00:07:54.519
But on every other project,
I effectively use work trees.

182
00:07:54.519 --> 00:07:57.605
And if you have something that
has like a strict build to it,

183
00:07:57.605 --> 00:08:01.248
something that has like, especially
if you work on a version system,

184
00:08:01.248 --> 00:08:03.494
work trees are 10 times better, right?

185
00:08:03.494 --> 00:08:07.147
Because now you have all these separate
versions that each have their own builds

186
00:08:07.147 --> 00:08:08.248
associated with them.

187
00:08:08.248 --> 00:08:10.148
You can kinda keep them
all independently and

188
00:08:10.148 --> 00:08:12.450
all independently checked
out at the exact same time.

189
00:08:12.450 --> 00:08:15.777
It is kinda works out with web apps
when you're talking about JavaScript.

190
00:08:15.777 --> 00:08:18.424
The difference is that
when you check it out,

191
00:08:18.424 --> 00:08:21.776
you have a new place in which
you need to do an NPM install.

192
00:08:21.776 --> 00:08:25.140
The nice part is if you have a good
integrated editor with work trees,

193
00:08:25.140 --> 00:08:26.302
you could set up a hook.

194
00:08:26.302 --> 00:08:29.559
So that the moment you
check out a new branch,

195
00:08:29.559 --> 00:08:33.521
it auto kicks off like an NPM install or
a yarn install.

196
00:08:33.521 --> 00:08:37.735
So it could actually do all the setup for
your branch without you even seeing it.

197
00:08:37.735 --> 00:08:40.817
So by the time the 40 seconds go by or
however long it takes for

198
00:08:40.817 --> 00:08:43.266
you to install and
get your stuff up and running.

199
00:08:43.266 --> 00:08:47.042
It could already be ready for you per
branch, meaning you don't have to rely

200
00:08:47.042 --> 00:08:50.056
on this weird state of making
sure you're always up to date.

201
00:08:50.056 --> 00:08:51.522
It can do all those things for you.

202
00:08:51.522 --> 00:08:54.055
Every time you switch branches,
you can do another,

203
00:08:54.055 --> 00:08:57.276
NPM installed to make sure your pack
is all your lock is all correct.

204
00:08:57.276 --> 00:09:00.022
And all that it's really.

205
00:09:00.022 --> 00:09:01.117
I really like it.

206
00:09:01.117 --> 00:09:05.055
The only downside obviously is that you
literally have like a gigabyte of node

207
00:09:05.055 --> 00:09:06.340
modules on your system.

208
00:09:06.340 --> 00:09:11.099
Just because there's so many,
I hear it's heavier than a black hole, but

209
00:09:11.099 --> 00:09:14.214
like it's a lot of stuff
inside of node modules.

210
00:09:14.214 --> 00:09:18.883
To me, that would be the only real
downfall to this is that you just have to

211
00:09:18.883 --> 00:09:20.965
do these actions per checkout.

212
00:09:20.965 --> 00:09:24.960
As opposed to having most of your node
modules already set up from one checkout

213
00:09:24.960 --> 00:09:25.639
to the next.

214
00:09:25.639 --> 00:09:29.426
But to me,
just having some good linked up to link.

215
00:09:29.426 --> 00:09:34.094
Gets rid of that problem anyways,
I don't really care disk space is cheap.

216
00:09:34.094 --> 00:09:35.036
I use it all the time.

217
00:09:35.036 --> 00:09:36.409
I love these things.

218
00:09:36.409 --> 00:09:37.293
I think it's fantastic.

219
00:09:37.293 --> 00:09:40.796
And the best part about it is like
Sam right here, I can still go and

220
00:09:40.796 --> 00:09:43.100
I can fetch origin and update everything.

221
00:09:43.100 --> 00:09:46.733
So that means if I'm on one branch, so
let's just do something really quickly.

222
00:09:46.733 --> 00:09:48.850
I know people aren't going to
be that excited about this.

223
00:09:48.850 --> 00:09:49.569
But let's do it anyway.

224
00:09:49.569 --> 00:09:51.641
So I'm gonna go to my main branch, right?.

225
00:09:51.641 --> 00:09:53.812
We're gonna go up there,
I'm gonna go to 106.

226
00:09:53.812 --> 00:09:55.681
And I'm gonna go I think
it was right here.

227
00:09:55.681 --> 00:09:57.018
I'm gonna save this go here.

228
00:09:57.018 --> 00:10:01.412
I'm gonna take that CC, live test.

229
00:10:01.412 --> 00:10:03.527
Sorry about the command, whatever.

230
00:10:03.527 --> 00:10:05.143
Go here, go here.

231
00:10:05.143 --> 00:10:06.625
Quit get push.

232
00:10:06.625 --> 00:10:09.480
I am technically using my most
popular open source repo.

233
00:10:09.480 --> 00:10:11.923
People are gonna get this dumb commit
right in the middle of their stuff.

234
00:10:11.923 --> 00:10:12.592
Who knows?

235
00:10:12.592 --> 00:10:14.144
I put the space there, right?

236
00:10:14.144 --> 00:10:16.339
So now let's go and
let's check out Fu again.

237
00:10:16.339 --> 00:10:17.443
So there's Fu.

238
00:10:17.443 --> 00:10:19.661
Now Fu happens to have a space right here.

239
00:10:19.661 --> 00:10:22.179
So here I'm gonna put
that space right here and

240
00:10:22.179 --> 00:10:25.291
I'm gonna make the commit right now,
testing, right?

241
00:10:25.291 --> 00:10:26.952
And now we need the rebase, right?

242
00:10:26.952 --> 00:10:28.639
So I'm going to fetch from origin.

243
00:10:28.639 --> 00:10:29.822
Everything's updated.

244
00:10:29.822 --> 00:10:34.346
So technically I can git rebase foo.

245
00:10:34.346 --> 00:10:35.605
I can get rebase from master.

246
00:10:35.605 --> 00:10:36.218
Right.

247
00:10:36.218 --> 00:10:39.105
So rebasing,
everything still works, right?

248
00:10:39.105 --> 00:10:41.865
So just rewind that and put it on top
of it, it must been able to tell hey,

249
00:10:41.865 --> 00:10:43.352
you're doing the exact same commit.

250
00:10:43.352 --> 00:10:45.611
I'm sure if I would have done something
a little bit smarter right there,

251
00:10:45.611 --> 00:10:47.368
I could have caused a merge
conflict a little bit easier.

252
00:10:47.368 --> 00:10:51.034
But it works no different than if
you're just working on a single kind of

253
00:10:51.034 --> 00:10:52.574
the main working tree style.

254
00:10:52.574 --> 00:10:58.367
Where you can still rebase and
you can still rebase from another branch.

255
00:10:58.367 --> 00:11:00.324
It just simply,
you now have multiple branches,

256
00:11:00.324 --> 00:11:02.617
which means you can have
multiple things running at once.

257
00:11:02.617 --> 00:11:05.816
I don't know if he ever did this,
where you're working on something.

258
00:11:05.816 --> 00:11:09.314
You're making some progress someone
says hey, I need some help.

259
00:11:09.314 --> 00:11:10.489
Can you help me with this?

260
00:11:10.489 --> 00:11:11.625
You know this other thing.

261
00:11:11.625 --> 00:11:12.727
So what do you have to do?

262
00:11:12.727 --> 00:11:13.752
Either at the stash it or

263
00:11:13.752 --> 00:11:17.202
you have to commit it with some sort of
don't forget to squash me later message.

264
00:11:17.202 --> 00:11:20.315
You do that you go,
you check out something else.

265
00:11:20.315 --> 00:11:21.957
You hydrate everything back up.

266
00:11:21.957 --> 00:11:24.898
And now you're running on this new one.

267
00:11:24.898 --> 00:11:27.819
And then when you're done with that,
you have to take it all down,

268
00:11:27.819 --> 00:11:28.965
go back to the other one and

269
00:11:28.965 --> 00:11:32.579
either make sure that everything's working
correctly on that one or unstash it.

270
00:11:32.579 --> 00:11:36.430
And make sure the build and
everything is correct on this other one.

271
00:11:36.430 --> 00:11:39.417
With work trees, you just don't even have
that as part of your workflow, right?

272
00:11:39.417 --> 00:11:40.983
I just simply need to
create a new work tree.

273
00:11:40.983 --> 00:11:44.914
I have a nice script to do it for me at
this point, but here, I'll just quit and

274
00:11:44.914 --> 00:11:45.714
do right here.

275
00:11:45.714 --> 00:11:47.400
I'm okay, I need a new work tree.

276
00:11:47.400 --> 00:11:53.318
Git checkout, my goodness work tree add.

277
00:11:53.318 --> 00:11:54.784
They help-someone one, right?

278
00:11:54.784 --> 00:11:55.645
This is my path.

279
00:11:55.645 --> 00:11:59.112
I want a new branch and
help-someone, right?

280
00:11:59.112 --> 00:12:00.387
We'll name them the same thing.

281
00:12:00.387 --> 00:12:01.144
There we go.

282
00:12:01.144 --> 00:12:02.795
We have a new one right there.

283
00:12:02.795 --> 00:12:05.374
And so now it's right there,
it's right here.

284
00:12:05.374 --> 00:12:09.867
So we could actually have that
thing checked out from the latest

285
00:12:09.867 --> 00:12:12.254
commit from master right there.

286
00:12:12.254 --> 00:12:12.773
Fantastic.

287
00:12:12.773 --> 00:12:15.976
It just works and I just love that.

288
00:12:15.976 --> 00:12:19.538
To me this is one of the greatest features
that people just don't know about.

289
00:12:19.538 --> 00:12:23.834
You can really take advantage of a lot
cooler things and I feel like it's just as

290
00:12:23.834 --> 00:12:27.170
way less cumbersome than the old
way I just hated the old way.

291
00:12:27.170 --> 00:12:29.069
It just made me nuts.

292
00:12:29.069 --> 00:12:29.613
Right.

293
00:12:29.613 --> 00:12:32.520
You can still use stashing to write
I did forget to talk about this.

294
00:12:32.520 --> 00:12:33.285
So let's go.

295
00:12:33.285 --> 00:12:35.267
Let's go to foo, we got a foo.

296
00:12:35.267 --> 00:12:35.841
Awesome.

297
00:12:35.841 --> 00:12:38.400
Let's check out 106 there we go.

298
00:12:38.400 --> 00:12:41.385
Do that go here, right here.

299
00:12:41.385 --> 00:12:41.987
There we go.

300
00:12:41.987 --> 00:12:43.815
We have this I can stash it.

301
00:12:43.815 --> 00:12:44.471
There we go.

302
00:12:44.471 --> 00:12:45.979
I just stash that.

303
00:12:45.979 --> 00:12:48.344
And now I can go back to master.

304
00:12:48.344 --> 00:12:49.513
Right and there we go.

305
00:12:49.513 --> 00:12:54.082
It's right here and then I can go and
I can get stash pop right?

306
00:12:54.082 --> 00:12:55.538
I popped it there we go.

307
00:12:55.538 --> 00:12:57.511
There's the space, right so
you can still get.

308
00:12:57.511 --> 00:13:01.528
You can stash from one tree and
bring it over to another tree, right?

309
00:13:01.528 --> 00:13:03.474
It all the same.

310
00:13:03.474 --> 00:13:08.080
It's just now every check out or
every commit can have its own directory.

311
00:13:08.080 --> 00:13:09.949
So to me awesome.

312
00:13:09.949 --> 00:13:10.685
I love it.

313
00:13:10.685 --> 00:13:11.346
It's fantastic.

314
00:13:11.346 --> 00:13:12.110
All right, question.

315
00:13:12.110 --> 00:13:16.726
&gt;&gt; What happens when you push a changeup
scream after entry is created.

316
00:13:16.726 --> 00:13:18.556
&gt;&gt; It's the exact same thing effectively.

317
00:13:18.556 --> 00:13:20.328
So I created foo right?

318
00:13:20.328 --> 00:13:23.714
So now what I can do is let's go back and
let's check out foo.

319
00:13:23.714 --> 00:13:27.264
So if I were to go in here,
let's close this thing down like this.

320
00:13:27.264 --> 00:13:28.347
Git branch.

321
00:13:28.347 --> 00:13:31.053
All right, there's a bunch of branches but
look, I have little plus sign.

322
00:13:31.053 --> 00:13:36.301
So normally you just have a single item,
right inside of this list.

323
00:13:36.301 --> 00:13:39.266
But in this one, it's all the work trees
that I have versus all the other branches.

324
00:13:39.266 --> 00:13:41.583
So I can have like this.

325
00:13:41.583 --> 00:13:44.392
I can go git push origin foo, right?

326
00:13:44.392 --> 00:13:46.267
I'm gonna push to my origin foo.

327
00:13:46.267 --> 00:13:48.209
And when I go to GitHub refactoring,

328
00:13:48.209 --> 00:13:52.482
you'll notice right away it's no different
than if I just checked out a commit.

329
00:13:52.482 --> 00:13:55.127
Right, is I'm gonna have
something called foo.

330
00:13:55.127 --> 00:13:56.420
I don't know why it's not showing up.

331
00:13:56.420 --> 00:13:58.410
It's because it's
identical to master right?

332
00:13:58.410 --> 00:14:00.789
But I will have in here foo.

333
00:14:00.789 --> 00:14:02.066
So it's not different.

334
00:14:02.066 --> 00:14:04.547
Just treat them like
they are checkout right.

335
00:14:04.547 --> 00:14:06.130
That's what a work tree is.

336
00:14:06.130 --> 00:14:10.250
Remember when you do git clone some
project you're in a work tree.

337
00:14:10.250 --> 00:14:12.544
You're just in the main work tree.

338
00:14:12.544 --> 00:14:17.093
When you do a git check or clone bare,
you can only use linked work trees,

339
00:14:17.093 --> 00:14:19.267
which means you specify each one.

340
00:14:19.267 --> 00:14:22.760
So that's why when I did git branch,
I actually had multiple of them.

341
00:14:22.760 --> 00:14:24.221
So let's go like this.

342
00:14:24.221 --> 00:14:24.970
Let's do anything.

343
00:14:24.970 --> 00:14:27.619
Let's go grep.

344
00:14:27.619 --> 00:14:34.072
What does that star or plus, there we go.

345
00:14:34.072 --> 00:14:38.738
So I have these three work trees all
checked out at the exact same time,

346
00:14:38.738 --> 00:14:41.280
and I can go between them at any point.

347
00:14:41.280 --> 00:14:43.767
So they're no different than
just a standard checkout.

348
00:14:43.767 --> 00:14:47.696
It's just that they're simply separated

349
00:14:47.696 --> 00:14:52.068
by path to me just makes
it way more convenient.

350
00:14:52.068 --> 00:14:52.851
There you go.

351
00:14:52.851 --> 00:14:54.076
That's the pros and cons.

352
00:14:54.076 --> 00:14:57.115
Really the only con I can see is that
it's a little bit more work all right?

353
00:14:57.115 --> 00:15:01.506
So I don't know what, VS code has for
integration, but because, by the way I use

354
00:15:01.506 --> 00:15:05.717
vim I don't know if I type on Dvorak to I
don't know if you know that by the way.

355
00:15:05.717 --> 00:15:08.673
But I don't know the exact
tools that it has.

356
00:15:08.673 --> 00:15:12.013
So therefore,
I can't tell you how convenient it is.

357
00:15:12.013 --> 00:15:16.441
But because I wrote the actual tool to
work with work trees in git, and I use

358
00:15:16.441 --> 00:15:21.316
fugitive, I have it like perfectly and
seamlessly working the exact way I want.

359
00:15:21.316 --> 00:15:25.862
In fact, it works so well inside of my
vim experience that I actually have

360
00:15:25.862 --> 00:15:27.959
something called git work tree.

361
00:15:27.959 --> 00:15:29.380
Where I can go in here.

362
00:15:29.380 --> 00:15:33.758
Let's see what is it,
print hello and then go, op, path,

363
00:15:33.758 --> 00:15:38.590
upstream, there we go,
close all those things, reopen up vim.

364
00:15:38.590 --> 00:15:42.716
And whenever I change a tree, it will go
through here and it will tell me Hey,

365
00:15:42.716 --> 00:15:44.466
I've just switched the table.

366
00:15:44.466 --> 00:15:47.760
I've done all these things, or
I've just switched it gives me a table,

367
00:15:47.760 --> 00:15:49.007
it tells me what happened.

368
00:15:49.007 --> 00:15:52.731
So therefore, I can actually
take all this information and

369
00:15:52.731 --> 00:15:54.752
I could create hooks into tmux.

370
00:15:54.752 --> 00:15:55.274
Right?

371
00:15:55.274 --> 00:15:57.621
So, right when I switched that branch,
you know what I could have done?

372
00:15:57.621 --> 00:16:00.421
I could have created a command
to go out to the system,

373
00:16:00.421 --> 00:16:04.670
create a new tmux window using detach so
it doesn't take over my current window.

374
00:16:04.670 --> 00:16:06.909
Remember detach is a thing, right?

375
00:16:06.909 --> 00:16:08.557
So I could have, just to show you.

376
00:16:08.557 --> 00:16:13.907
T mux new window d look at that it created
a new window without me even seeing it.

377
00:16:13.907 --> 00:16:17.617
I could have created a new window
with the command NPM install.

378
00:16:17.617 --> 00:16:21.694
So could have done that in the background
every single time I switch branches so

379
00:16:21.694 --> 00:16:23.298
I know it's always up to date,

380
00:16:23.298 --> 00:16:26.658
whatever I'm working on at any
point I can do that through them.

381
00:16:26.658 --> 00:16:31.763
So very good kind of creamy experience
that that creamy beige we all want, right?

382
00:16:31.763 --> 00:16:32.792
That's a weird way to say it.

383
00:16:32.792 --> 00:16:34.037
I've watched too much old Greg.

384
00:16:34.037 --> 00:16:34.663
Alright.

385
00:16:34.663 --> 00:16:36.483
That is that there we go.

386
00:16:36.483 --> 00:16:37.306
That's pros and cons.

387
00:16:37.306 --> 00:16:40.422
Really.
I I think there's way too many pros versus

388
00:16:40.422 --> 00:16:41.111
the cons.

389
00:16:41.111 --> 00:16:41.690
Like I said,

390
00:16:41.690 --> 00:16:45.129
maybe a lot of NPM modules you'll probably
have like a tonne like a gigabyte.

391
00:16:45.129 --> 00:16:46.165
But honestly,

392
00:16:46.165 --> 00:16:51.039
I have 595 gigabytes left right now
I could have a lot of node modules.

