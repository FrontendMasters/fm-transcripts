WEBVTT

1
00:00:00.172 --> 00:00:03.896
All right, next, so before we get started
we kind of need to cover a little bit of

2
00:00:03.896 --> 00:00:06.412
like groundwork because I
don't know like I said,.

3
00:00:06.412 --> 00:00:09.988
I don't know how experienced you are with
the terminal but I know that you're

4
00:00:09.988 --> 00:00:13.645
somewhat experienced at this point
we've cut in typing some commands.

5
00:00:13.645 --> 00:00:15.335
So let's just talk about piping.

6
00:00:15.335 --> 00:00:18.517
Piping is something that we do often and
you may not realize you're doing it.

7
00:00:18.517 --> 00:00:20.028
Let's talk about this right now.

8
00:00:20.028 --> 00:00:22.853
So I'm gonna jump over to a little,
temporary folder really quickly,

9
00:00:22.853 --> 00:00:25.725
you're probably like how did he
just do such a quick navigation?

10
00:00:25.725 --> 00:00:28.255
Well, that's what we're building
right now, let's do this.

11
00:00:28.255 --> 00:00:31.455
I'm going to create a file called pipe.js,
right?

12
00:00:31.455 --> 00:00:34.780
I assume we're all fairly
familiar with JavaScript.

13
00:00:34.780 --> 00:00:38.830
I won't even use TypeScript keeping it
superduper simple here, very, very simple.

14
00:00:38.830 --> 00:00:44.050
So what I want to do is I want to show
you the value or how piping works.

15
00:00:44.050 --> 00:00:46.260
So you've seen these commands before,
right?

16
00:00:46.260 --> 00:00:52.000
Where you have some program a bar, another
program, a bar another program, right?

17
00:00:52.000 --> 00:00:55.047
You've probably typed this into
your terminal you probably cut and

18
00:00:55.047 --> 00:00:55.853
paste it before.

19
00:00:55.853 --> 00:00:58.650
If you remember when I did let's see.

20
00:00:58.650 --> 00:01:00.370
Let's go like this curl.

21
00:01:00.370 --> 00:01:01.018
There you go look at that.

22
00:01:01.018 --> 00:01:03.460
Are you gonna you're gonna pipe all these
things I thought I had something with.

23
00:01:03.460 --> 00:01:04.050
What did I do?

24
00:01:04.050 --> 00:01:06.403
I thought I had one inside my ansible.

25
00:01:06.403 --> 00:01:11.624
Ansible them slash my there we go.

26
00:01:11.624 --> 00:01:14.820
Okay, I curl and
I pipe it into sh right here.

27
00:01:14.820 --> 00:01:16.350
So it's something we do all the time.

28
00:01:16.350 --> 00:01:19.050
We may not realize we do
this all the time, right?

29
00:01:19.050 --> 00:01:20.610
But we actually do do it all the time.

30
00:01:20.610 --> 00:01:21.920
So let's go back.

31
00:01:21.920 --> 00:01:27.210
And what I want to what I want to show you
is like kind of how that works, right?

32
00:01:27.210 --> 00:01:29.590
So let's reopen a vim let's look at pipe.

33
00:01:29.590 --> 00:01:33.209
Now, I always forget how to
read from the standard in.

34
00:01:33.209 --> 00:01:35.653
So read standard in, all right?

35
00:01:35.653 --> 00:01:36.657
That's how we do that.

36
00:01:36.657 --> 00:01:40.960
Grab that, go down here,
yank that, all right, awesome.

37
00:01:40.960 --> 00:01:42.501
And now let's paste that in.

38
00:01:42.501 --> 00:01:44.590
So that there we go we're
reading from the standard in.

39
00:01:44.590 --> 00:01:47.913
So if you don't know what
the standard in is, let me show you.

40
00:01:47.913 --> 00:01:52.700
Also I hopefully you're like how did
he get all that information so quickly?

41
00:01:52.700 --> 00:01:53.950
Show you, don't worry, we'll get there.

42
00:01:53.950 --> 00:01:54.540
We're getting there.

43
00:01:54.540 --> 00:01:55.875
Okay, I wanna, I'm leading you,

44
00:01:55.875 --> 00:01:58.620
I want you to be excited about
what we're learning right now.

45
00:01:58.620 --> 00:02:02.430
So anytime you run a program from the
terminal, what is really is happening, and

46
00:02:02.430 --> 00:02:05.890
this is in some crude sense,
obviously this is not 100% true.

47
00:02:05.890 --> 00:02:07.480
It's just sort of true, right?

48
00:02:07.480 --> 00:02:11.160
You have a program that runs and
it gets standard in into it.

49
00:02:11.160 --> 00:02:14.082
Now if you're typing and pressing Enter,
have you ever used a program where you

50
00:02:14.082 --> 00:02:16.015
actually have to type into
it from the command line.

51
00:02:16.015 --> 00:02:18.104
That's because it's
taking your terminal and

52
00:02:18.104 --> 00:02:21.705
the input coming in from your terminal and
piping it into the program.

53
00:02:21.705 --> 00:02:25.116
And the stuff that it produces or
writes out to your terminal,

54
00:02:25.116 --> 00:02:28.085
it's coming out of the standard out,
the stdout.

55
00:02:28.085 --> 00:02:29.765
There's also another
one called the stdair.

56
00:02:29.765 --> 00:02:31.420
We don't need to worry
about that right now.

57
00:02:31.420 --> 00:02:36.338
So if you do the pipe operator say we
do A, B what's really happening is that

58
00:02:36.338 --> 00:02:41.256
the outright here from a is actually
being directly inputted much like your

59
00:02:41.256 --> 00:02:46.045
input from the terminal going into
A will be piped into B,, right?

60
00:02:46.045 --> 00:02:49.284
So that out from A is going
into the in from B and

61
00:02:49.284 --> 00:02:53.225
the out from B is going into the terminal.

62
00:02:53.225 --> 00:02:55.657
And so that's kind of like
what's happening with piping and

63
00:02:55.657 --> 00:02:57.090
to make it really obvious.

64
00:02:57.090 --> 00:02:59.880
We're gonna build a little small
program right now together.

65
00:02:59.880 --> 00:03:03.811
We're gonna build a program that
will read from the standard in and

66
00:03:03.811 --> 00:03:07.390
write to standard out, and
it's gonna take in a line.

67
00:03:07.390 --> 00:03:11.369
Now the line, let's say it's a bunch
of space delimited numbers and

68
00:03:11.369 --> 00:03:14.590
we wanna sum them and
we want to write it back out.

69
00:03:14.590 --> 00:03:15.940
Actually, let's keep that previous line.

70
00:03:17.690 --> 00:03:21.787
So let's like this, let's go

71
00:03:21.787 --> 00:03:27.515
line.split( )reduce(sum, x).

72
00:03:27.515 --> 00:03:28.380
Some plus x,

73
00:03:28.380 --> 00:03:33.395
but we need another plus because we
got to convert it to a number, right?

74
00:03:33.395 --> 00:03:35.515
Look at that.
That's just love JavaScript.

75
00:03:35.515 --> 00:03:36.092
There we go.

76
00:03:36.092 --> 00:03:37.175
We get that.

77
00:03:37.175 --> 00:03:37.873
And there we go.

78
00:03:37.873 --> 00:03:41.522
We've now done everything but
there we go beautiful.

79
00:03:41.522 --> 00:03:45.830
So now we've done everything we've
taken a line split by whitespace and

80
00:03:45.830 --> 00:03:49.799
summed every component casting
every single token into a number.

81
00:03:49.799 --> 00:03:50.467
Awesome.

82
00:03:50.467 --> 00:03:55.093
So if we provided a list of numbers, it's
going to provide us the sum back out, and

83
00:03:55.093 --> 00:03:57.412
we're going to read it from the line.

84
00:03:57.412 --> 00:03:59.352
So let's put one more
little thing right here.

85
00:03:59.352 --> 00:04:01.941
We'll just go like this how about line.

86
00:04:01.941 --> 00:04:02.484
Awesome.

87
00:04:02.484 --> 00:04:03.810
So let's close that.

88
00:04:03.810 --> 00:04:05.310
And now we need to feed it some lines.

89
00:04:05.310 --> 00:04:07.960
So we can go like this, node pipe, right?

90
00:04:07.960 --> 00:04:12.424
And so to kind of prove the point of
this picture that what you write into

91
00:04:12.424 --> 00:04:16.810
the terminal goes into the program,
I'm gonna go like this.

92
00:04:16.810 --> 00:04:21.670
I'm gonna go 5, 6 or 7, 9, press Enter.

93
00:04:21.670 --> 00:04:24.130
It just told me back out, line 21.

94
00:04:24.130 --> 00:04:28.047
The output from A is going into my
terminal the input from me is going into

95
00:04:28.047 --> 00:04:28.970
A, right?

96
00:04:28.970 --> 00:04:30.290
So let's close this thing down.

97
00:04:30.290 --> 00:04:35.445
And instead, let's use echo,
5, 7, 9 new line 11, 13 ,15.

98
00:04:35.445 --> 00:04:40.190
Why all odd numbers I don't know and
let's pipe it into node pipe dot j s.

99
00:04:40.190 --> 00:04:44.740
So it's gonna run, it's gonna sum
each line as it experiences it.

100
00:04:44.740 --> 00:04:46.280
And so
that's what just happened right there.

101
00:04:46.280 --> 00:04:49.390
Notice that A piped into B
be piped into my terminal.

102
00:04:49.390 --> 00:04:51.170
So hopefully you kinda
get this idea of pipes.

103
00:04:51.170 --> 00:04:54.130
I just really wanna make sure
that no one feels left behind.

104
00:04:54.130 --> 00:04:57.890
As we do these things or when they see the
pipe operator, it's not like some magical.

105
00:04:57.890 --> 00:04:59.710
There's nothing magical about it right?

106
00:04:59.710 --> 00:05:03.590
It's actually a pretty simple item and
it makes a lot of sense.

107
00:05:03.590 --> 00:05:04.490
Alright, awesome.

108
00:05:04.490 --> 00:05:06.310
I'm sure there's better
ways of explaining it.

109
00:05:06.310 --> 00:05:09.500
That's just my best way of explaining it,
writing a little program seeing how it is

110
00:05:09.500 --> 00:05:11.290
because we're about to
do some programming.

111
00:05:11.290 --> 00:05:14.316
And it's gonna be an everyone's
favorite language bash,

112
00:05:14.316 --> 00:05:15.957
which is a write once language.

113
00:05:15.957 --> 00:05:20.052
You write it once you enjoy it, it breaks,
you look at it, you delete it and

114
00:05:20.052 --> 00:05:21.580
you write it and go.

115
00:05:21.580 --> 00:05:23.282
So it's a right one's kinda language, but

116
00:05:23.282 --> 00:05:26.300
we're gonna start with bash because
you should know a little bit of bash.

117
00:05:26.300 --> 00:05:28.960
I like to write enough bash
to shoot myself in the foot.

118
00:05:28.960 --> 00:05:30.990
I feel like that's
the proper amount of bash.

