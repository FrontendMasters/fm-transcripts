WEBVTT

1
00:00:00.290 --> 00:00:01.970
We're gonna move on a little bit more.

2
00:00:01.970 --> 00:00:06.047
I'm gonna give a little bit of a Linux
Core Utils like quick ones that I think

3
00:00:06.047 --> 00:00:07.350
are super useful.

4
00:00:07.350 --> 00:00:09.879
And just to kinda show you the power,

5
00:00:09.879 --> 00:00:14.880
just because a lot of times I do
things that I feel kinda dumb about.

6
00:00:14.880 --> 00:00:19.174
And so just recently, maybe like three
months ago, we had kinda a competition on

7
00:00:19.174 --> 00:00:22.409
Twitch to see who was the greatest
blindfolded programmer.

8
00:00:22.409 --> 00:00:27.200
Now I was second then I became first, and
I became second and then someone cheated.

9
00:00:27.200 --> 00:00:30.855
But because he cheated in such a clever
way, they gave me the loss instead, so

10
00:00:30.855 --> 00:00:31.824
I was in last place.

11
00:00:31.824 --> 00:00:33.357
And they forced me to use Linux.

12
00:00:33.357 --> 00:00:35.355
It was very terrible,
I hated everything about it.

13
00:00:35.355 --> 00:00:40.400
But nonetheless, if I would have just
known the Core Utils a little bit better,

14
00:00:40.400 --> 00:00:45.539
I could have actually solved all the
problems honestly in like 20 characters.

15
00:00:45.539 --> 00:00:48.819
They are so dang simple, except for
the last one, I probably would have lost

16
00:00:48.819 --> 00:00:52.320
the last one no matter what turns out I
don't know what some of these things mean.

17
00:00:52.320 --> 00:00:56.800
So what are core utils, really how I
think of them is they're just a set of

18
00:00:56.800 --> 00:01:00.777
programs that make your life
easier doing ad hoc tasks, right?

19
00:01:00.777 --> 00:01:03.391
I know we use some of them in
our scripts that we're building,

20
00:01:03.391 --> 00:01:06.735
like the cheat sheet and all that we're
using fine, fine score Utah, right.

21
00:01:06.735 --> 00:01:09.439
But they are just things that
gonna make your life easier.

22
00:01:09.439 --> 00:01:12.698
And if you just don't know about them, you
just don't know what you don't know, and

23
00:01:12.698 --> 00:01:14.510
you don't know why they are so useful.

24
00:01:14.510 --> 00:01:18.031
It's the exact same reason why
when I was in that interview and

25
00:01:18.031 --> 00:01:19.934
the person said what about grap?

26
00:01:19.934 --> 00:01:20.877
And I was like, what is grap?

27
00:01:20.877 --> 00:01:23.409
It was just obvious that I
had no experience here, and

28
00:01:23.409 --> 00:01:26.330
I just wanted to kind of give
you some nice things here.

29
00:01:26.330 --> 00:01:28.329
So here's a real-world use case.

30
00:01:28.329 --> 00:01:32.090
So I don't know if anyone knows anything
about making YouTube videos, but I do.

31
00:01:32.090 --> 00:01:36.408
And something that happens with YouTube
videos is that YouTube doesn't care what

32
00:01:36.408 --> 00:01:38.200
you tag your video with.

33
00:01:38.200 --> 00:01:42.318
What it actually does is it goes
through and looks at your subtitles,

34
00:01:42.318 --> 00:01:47.153
either the ones that you hand in or
the ones, they auto-generate and go, okay.

35
00:01:47.153 --> 00:01:49.902
This is really what the things about.

36
00:01:49.902 --> 00:01:54.503
And so often because I type so fast and
ice cream so much I could not almost all

37
00:01:54.503 --> 00:01:59.271
my subtitles are generated assuming
that I speak Korean, this is not a joke.

38
00:01:59.271 --> 00:02:01.520
I don't know what it is,
it's just the way it is.

39
00:02:01.520 --> 00:02:04.117
And so I have to go in there and
I have to correct it every single time.

40
00:02:04.117 --> 00:02:06.035
But what I also do is go, okay.

41
00:02:06.035 --> 00:02:10.865
Did they even translate the words correct
because if vim is translated them, which

42
00:02:10.865 --> 00:02:15.627
happens all the time, they're not gonna
know how to categorize what I have made?

43
00:02:15.627 --> 00:02:17.287
And so here's a great example.

44
00:02:17.287 --> 00:02:21.889
I want to see what kind of words
am I using in my subtitles?

45
00:02:21.889 --> 00:02:23.165
Let's stack rank them,

46
00:02:23.165 --> 00:02:26.500
I wanna see the most use words
to the least use words, right?

47
00:02:26.500 --> 00:02:30.610
So I'm gonna go download the subtitles
script from YouTube and see what it is.

48
00:02:30.610 --> 00:02:33.056
So let's just do that now,
if I'm not mistaken,

49
00:02:33.056 --> 00:02:35.226
I actually already have it in here, right.

50
00:02:35.226 --> 00:02:38.450
The sub,
I did want to touch on a couple of things.

51
00:02:38.450 --> 00:02:41.130
We were talking about Linux core utils,
and

52
00:02:41.130 --> 00:02:43.963
I wanted to show just
showcase their ability.

53
00:02:43.963 --> 00:02:46.965
I didn't want to go into
in depth explanations, but

54
00:02:46.965 --> 00:02:51.030
really just to show you that,
there's a lot that is available.

55
00:02:51.030 --> 00:02:54.326
And if you're ever doing anything with
logs, with this, that, and the other,

56
00:02:54.326 --> 00:02:57.950
there's just so much out there that
actually can make your life a lot better.

57
00:02:57.950 --> 00:03:02.750
And so I have to be a little bit careful,
I can see William in the feed right there,

58
00:03:02.750 --> 00:03:05.942
and he knows more than I do,
likely in this category.

59
00:03:05.942 --> 00:03:09.285
So I got to be careful,
I don't wanna be wrong here.

60
00:03:09.285 --> 00:03:10.976
So it's just the way it is.

61
00:03:10.976 --> 00:03:15.849
But I'm gonna give you a couple
examples of some classic problems that

62
00:03:15.849 --> 00:03:17.520
can be easily solved.

63
00:03:17.520 --> 00:03:22.145
But if you're not familiar with them,
you will likely build a Node,

64
00:03:22.145 --> 00:03:25.273
Python script that does these things for
you.

65
00:03:25.273 --> 00:03:28.410
And they could have been
done dramatically simpler.

66
00:03:28.410 --> 00:03:32.032
So let's get started, so as I told you,
I was talking about YouTube subtitles.

67
00:03:32.032 --> 00:03:36.602
I want to find the most
frequently used words in

68
00:03:36.602 --> 00:03:40.712
the YouTube videos that I'm producing.

69
00:03:40.712 --> 00:03:44.079
So let's do that right now,
so I'll go in here.

70
00:03:44.079 --> 00:03:45.560
I actually did find the subtitles, right?

71
00:03:45.560 --> 00:03:48.160
So here's an example thing
of the subtitles, right?

72
00:03:48.160 --> 00:03:51.043
You can say look at all that,
just a lot of words, right?

73
00:03:51.043 --> 00:03:55.196
So, likely before I knew
anything about some core utils.

74
00:03:55.196 --> 00:03:57.708
What I would have done is created
a little node script, right?

75
00:03:57.708 --> 00:03:59.161
I would have read that, and

76
00:03:59.161 --> 00:04:03.467
I would have gone through each line from
the content fact here we can even do this.

77
00:04:03.467 --> 00:04:07.704
Let's go like this, test dot j s And

78
00:04:07.704 --> 00:04:11.386
go const Fs equals require Fs.

79
00:04:11.386 --> 00:04:15.234
There we go, take that,
take that go Fs Pap, right,

80
00:04:15.234 --> 00:04:17.680
replace that out and go Fs read file.

81
00:04:17.680 --> 00:04:18.790
I'm gonna use refile sync.

82
00:04:18.790 --> 00:04:21.668
I know I couldn't use Fs promises,
but come on, who does,

83
00:04:21.668 --> 00:04:25.320
who wants to use all that good stuff
when you could just use old stuff.

84
00:04:25.320 --> 00:04:30.990
All right dirname and then go,
what is it called sub, what is called?

85
00:04:30.990 --> 00:04:33.190
It's called x f subtitles,
that's what it's called.

86
00:04:33.190 --> 00:04:36.720
Ali right, there we go,
I'm going to read that to string spook.

87
00:04:38.210 --> 00:04:42.210
Let's see, man,
I can't even say that split on new line.

88
00:04:42.210 --> 00:04:45.542
And so now we have a bunch of lines,
and so let's map that.

89
00:04:45.542 --> 00:04:47.150
My goodness, this is getting way too long.

90
00:04:47.150 --> 00:04:50.410
This is why you should never
program JavaScript blindfolded.

91
00:04:50.410 --> 00:04:54.350
This is the reason why it just keeps
on getting longer and longer, I swear.

92
00:04:54.350 --> 00:04:59.320
Let's split each one of these
lines on spaces, there we go.

93
00:04:59.320 --> 00:05:01.050
Look at that, it's just so small.

94
00:05:01.050 --> 00:05:02.160
My, let's keep going, you know what?

95
00:05:02.160 --> 00:05:04.390
Screw it,
I only usually go to 80 characters.

96
00:05:04.390 --> 00:05:07.570
Right here, but we're gonna just keep
on going, let's see how far we can go.

97
00:05:07.570 --> 00:05:12.010
Now we have our accumulator and our word.

98
00:05:12.010 --> 00:05:14.450
And we're gonna go in here and
that's that, okay?

99
00:05:14.450 --> 00:05:19.730
So we take our accumulator,
if acc word, there we go.

100
00:05:19.730 --> 00:05:21.900
And not one of those,
why are you out here?

101
00:05:21.900 --> 00:05:27.880
Nobody knows, acc word =0,
that's just so beautiful, isn't it?

102
00:05:27.880 --> 00:05:32.080
x word ++ go like that, return x.

103
00:05:32.080 --> 00:05:37.655
There we go do one of those and now 10 up
go here constant words equals that back.

104
00:05:37.655 --> 00:05:41.347
Back down console dot log words, right?

105
00:05:41.347 --> 00:05:46.695
I believe we've done it, and
let's just see what happens.

106
00:05:46.695 --> 00:05:48.855
Node, what did I even call it, by the way?

107
00:05:49.985 --> 00:05:51.870
I call it a program, okay?

108
00:05:51.870 --> 00:05:54.200
Know to test dot JSON, right?

109
00:05:54.200 --> 00:05:57.617
And obviously I did a really
good job I split it really,

110
00:05:57.617 --> 00:06:00.030
like really some serious IQ here.

111
00:06:00.030 --> 00:06:04.200
So let's redo that, obviously kind
of a little bit low IQ there.

112
00:06:04.200 --> 00:06:07.200
I wasn't technically planning on
doing this, it just felt right.

113
00:06:07.200 --> 00:06:10.530
So split on the new lines and
then split on spaces.

114
00:06:10.530 --> 00:06:17.080
And why did I get it,
0, 0, and 0, of course.

115
00:06:17.080 --> 00:06:21.150
So each line, of course,
each word is not technically a word.

116
00:06:21.150 --> 00:06:24.556
It's, actually, like a line,
and so let's do this again.

117
00:06:24.556 --> 00:06:28.366
Yeah, this is such a great idea,
I was like this ACC line, right?

118
00:06:28.366 --> 00:06:30.890
It's gonna be a line of white spaces.

119
00:06:30.890 --> 00:06:37.422
Let's return ACC concat wine, right,
that creates a new one empty array.

120
00:06:37.422 --> 00:06:38.730
Yeah, how long is this line?

121
00:06:38.730 --> 00:06:41.290
We're going out of control here,
it's so long.

122
00:06:41.290 --> 00:06:43.630
I think that should work, there we go.

123
00:06:43.630 --> 00:06:45.710
And it didn't work, but
you get the idea, whatever.

124
00:06:45.710 --> 00:06:47.310
I'm not even gonna continue on with that.

125
00:06:47.310 --> 00:06:49.290
It was fun to see how
ridiculous I could make it.

126
00:06:49.290 --> 00:06:52.400
But you get the general idea
what was happening there, right?

127
00:06:52.400 --> 00:06:56.569
Is that every single word I'm gonna
have to go through I'm gonna have to

128
00:06:56.569 --> 00:06:57.620
Adam nailed it.

129
00:06:57.620 --> 00:06:59.810
That was a serious first
drive right there.

130
00:06:59.810 --> 00:07:05.500
Thank you, Taylor, for saying those nice
words anyways, so you get the idea right?

131
00:07:05.500 --> 00:07:08.075
That is it's a lot of programming, right?

132
00:07:08.075 --> 00:07:11.415
And clearly I love going
off to 170 characters.

133
00:07:11.415 --> 00:07:14.391
Also, my inner need to solve that
has just gone so through the roof,

134
00:07:14.391 --> 00:07:16.965
it's like painful, but
we're not gonna do it.

135
00:07:16.965 --> 00:07:20.430
So instead let's just cut out subtitles,
what do we see here?

136
00:07:20.430 --> 00:07:22.880
Well, we see a bunch of lines, right?

137
00:07:22.880 --> 00:07:25.669
And then of the lines, let's see those.

138
00:07:25.669 --> 00:07:28.500
Yeah, there has to be a better I know
there has to be a better way, right?

139
00:07:28.500 --> 00:07:31.795
So of all these lines,
there's just a bunch of text and

140
00:07:31.795 --> 00:07:34.090
then separated by white spaces.

141
00:07:34.090 --> 00:07:39.920
So let's try, can we take all of these
white spaces and tournament lines?

142
00:07:39.920 --> 00:07:40.846
So let's try some things.

143
00:07:40.846 --> 00:07:45.480
So I can cut out the subtitles, and
we can pass it to something called xargs.

144
00:07:45.480 --> 00:07:48.150
Now notice what xargs did,
look at that, that's kind of nice.

145
00:07:48.150 --> 00:07:51.740
We're getting a little bit better,
each line got reprinted back out.

146
00:07:51.740 --> 00:07:55.220
All right hey, all right, rock on, right?

147
00:07:55.220 --> 00:07:56.118
That's pretty cool, so

148
00:07:56.118 --> 00:07:59.160
now there's just white spaces in
between every single item, right?

149
00:07:59.160 --> 00:08:01.740
Okay, so we could also pass it to tr.

150
00:08:01.740 --> 00:08:04.480
We can convert every
whitespace to new line.

151
00:08:04.480 --> 00:08:08.590
Look, I mean look, look at that,
look at how easy that was.

152
00:08:08.590 --> 00:08:11.956
Telling me that was not easier than
reading from a file, doing taking all

153
00:08:11.956 --> 00:08:16.220
those lines, blah, blah, blah, like I
mean, this is already 10 times better.

154
00:08:16.220 --> 00:08:19.110
And I'm pretty sure I could have somehow
reduced these two into something that

155
00:08:19.110 --> 00:08:20.000
made more sense.

156
00:08:20.000 --> 00:08:21.730
But we're not even trying
to be efficient here.

157
00:08:21.730 --> 00:08:26.370
I'm just showing you how easy knowing some
of these tools can be to be really nice.

158
00:08:26.370 --> 00:08:30.200
Next, I can just sort it, look,
we just sorted the thing.

159
00:08:30.200 --> 00:08:32.880
How simple was the average,
just some sort, right?

160
00:08:32.880 --> 00:08:36.880
And then after that we can go like this,
unique with a count, right?

161
00:08:36.880 --> 00:08:39.790
And there we go, and
then now they're kinda out of order.

162
00:08:39.790 --> 00:08:44.426
Still, so we can sort it and reverse it,
or we can sort of remember their numbers,

163
00:08:44.426 --> 00:08:45.650
and then there we go.

164
00:08:45.650 --> 00:08:48.999
So now it's here's all my one, here's
all my single occurrences on my double,

165
00:08:48.999 --> 00:08:50.720
triple, 5,10 all the way up.

166
00:08:50.720 --> 00:08:53.800
So looks like the word
two is my most said word.

167
00:08:53.800 --> 00:08:57.881
So when you're making YouTube videos,
somewhere between eight to 12 mentions is

168
00:08:57.881 --> 00:09:00.500
kind of like your sweet
spot as far as I can tell.

169
00:09:00.500 --> 00:09:04.410
And so as you can see here,
I have like create need number this game.

170
00:09:04.410 --> 00:09:06.840
Yeah, right player,
these are all kind of good.

171
00:09:06.840 --> 00:09:07.760
I don't have them enough.

172
00:09:07.760 --> 00:09:11.470
So this is actually something I did
was to intentionally try to mention.

173
00:09:11.470 --> 00:09:15.813
He works 8 to 12 times, and so I actually
have to start looking at my subtitles and

174
00:09:15.813 --> 00:09:16.650
seeing.

175
00:09:16.650 --> 00:09:21.004
Am I mentioning the words that make
sense for this thing to be promoted to

176
00:09:21.004 --> 00:09:25.945
the correct people enough time, so
that Google going to favor this, right?

177
00:09:25.945 --> 00:09:29.975
Some real like 4000 iq,
by the way, haven't nailed it.

178
00:09:29.975 --> 00:09:32.465
And I also use Dvorak,
by the way, so it's okay.

179
00:09:32.465 --> 00:09:37.165
I think it's okay, but there you go,
I just solved such an easy problem.

180
00:09:37.165 --> 00:09:40.697
Like it was just that was
like what 40 characters,

181
00:09:40.697 --> 00:09:43.355
it was extremely simple to solve.

182
00:09:43.355 --> 00:09:47.695
And I used it with tools that have existed
longer than I have been alive, right.

183
00:09:47.695 --> 00:09:51.119
This should be I mean we should all know
these things unfortunately a lot of us

184
00:09:51.119 --> 00:09:52.521
don't I definitely didn't.

185
00:09:52.521 --> 00:09:54.811
If you would have asked me
that just even a year ago,

186
00:09:54.811 --> 00:09:56.745
I would not have used
that way right there.

187
00:09:56.745 --> 00:10:01.463
So anyways, so I'm curious how many people
chose awk how many people chose this like

188
00:10:01.463 --> 00:10:02.470
cat sort unique.

189
00:10:02.470 --> 00:10:06.385
Or how many people wrote a program If
you're honest with yourself, I bet

190
00:10:06.385 --> 00:10:11.000
you there's a lot of people out there
that probably just wrote the program.

191
00:10:11.000 --> 00:10:14.430
As opposed to this one off little
simple thing that you can just execute.

192
00:10:14.430 --> 00:10:18.463
And the best part is cuz I know this stuff
pretty well if I need to rewrite it.

193
00:10:18.463 --> 00:10:21.091
It's not like this takes
a lot of time to write,

194
00:10:21.091 --> 00:10:23.991
this is actually pretty straightforward,
right.

195
00:10:23.991 --> 00:10:27.799
I just know off the top of my head, so
I'll go, I don't have to remember and

196
00:10:27.799 --> 00:10:31.480
if I'm like I can't quite remember it,
I can always use fcf and go.

197
00:10:31.480 --> 00:10:34.790
Okay, yeah, here we go,
I remember it's cat subtitles.

198
00:10:34.790 --> 00:10:37.500
Okay, there it is,
I can just select the best one, right?

199
00:10:37.500 --> 00:10:41.010
So it just is very simple for
me to use this.

200
00:10:41.010 --> 00:10:43.460
And I don't have to write a script,
I don't have to maintain a script.

201
00:10:43.460 --> 00:10:45.170
I don't have to add features, right?

202
00:10:45.170 --> 00:10:46.300
It's good enough.

