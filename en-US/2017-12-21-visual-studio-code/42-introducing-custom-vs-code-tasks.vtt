WEBVTT

1
00:00:00.160 --> 00:00:03.990
&gt;&gt; Mike North: So where we're going
next is we're gonna talk about tasks.

2
00:00:03.990 --> 00:00:08.030
We're gonna touch on launch
configurations and then we'll be done.

3
00:00:09.770 --> 00:00:14.590
So one of the cool things about
the way task running is handled in

4
00:00:14.590 --> 00:00:19.510
visual studio code is it'll
look at your package jason.

5
00:00:19.510 --> 00:00:21.580
Your gulp file, your grunt file.

6
00:00:23.040 --> 00:00:26.620
Anything that has sort of,
things that can be run.

7
00:00:26.620 --> 00:00:31.090
Your rate file if you're using Ruby and
it'll extract those out and

8
00:00:31.090 --> 00:00:33.850
make them available for
you within the editor.

9
00:00:33.850 --> 00:00:37.110
So if we just say run task here.

10
00:00:37.110 --> 00:00:41.490
We can see I've got one that
TypeScript has provided, so

11
00:00:41.490 --> 00:00:43.700
TypeScript to build task is there and

12
00:00:43.700 --> 00:00:48.230
then a couple that were pulled out
of my package.json as npm scripts.

13
00:00:48.230 --> 00:00:52.950
So those are already there and already
kind of, just by that file being present,

14
00:00:52.950 --> 00:00:53.630
we get those.

15
00:00:55.270 --> 00:00:57.010
&gt;&gt; Mike North: In terms of my advice for

16
00:00:57.010 --> 00:01:02.056
deciding whether to put your stuff
into Visual Code specific tasks or

17
00:01:02.056 --> 00:01:07.198
these files, I would say mostly you
wanna keep things in those files.

18
00:01:07.198 --> 00:01:09.730
Like in package.json, all right.

19
00:01:09.730 --> 00:01:13.990
I've linked here to something called
Scripty which works with package.json to

20
00:01:13.990 --> 00:01:16.410
allow you to maintain a folder of scripts,

21
00:01:16.410 --> 00:01:21.460
rather than letting your npm script to
get difficult to maintain in large.

22
00:01:22.660 --> 00:01:26.700
And the reason is not everyone on your
team may use Visual Studio Code and

23
00:01:26.700 --> 00:01:32.170
so it becomes more useful to kind of
have that consistency in a way that is

24
00:01:32.170 --> 00:01:33.180
editor agnostic.

25
00:01:34.370 --> 00:01:38.290
However, code add some interesting
things on top of those tasks,

26
00:01:39.580 --> 00:01:42.260
on top of things that like NPM could do.

27
00:01:42.260 --> 00:01:46.370
So this is what a very
basic test looks like, and

28
00:01:48.020 --> 00:01:51.730
this would go in the tasks.json file
that I've linked to here, right?

29
00:01:51.730 --> 00:01:55.240
Currently it's saying it can't open
it cuz it doesn't exist yet, but

30
00:01:55.240 --> 00:02:01.037
if we were to say,
&gt;&gt; Mike North: Configure task runner and

31
00:02:01.037 --> 00:02:06.180
say others,
it would give us this tasks.json file.

32
00:02:06.180 --> 00:02:10.580
Created it for the first time right now
we should be able to click into it, yep.

33
00:02:11.960 --> 00:02:16.750
And it's just going to say,
hello to us when we run it.

34
00:02:18.070 --> 00:02:21.180
So if we say run task echo,

35
00:02:21.180 --> 00:02:23.260
it's going to say what do you
want me to do with the output?

36
00:02:23.260 --> 00:02:26.269
Right now we'll say continue
without scanning the output and,

37
00:02:26.269 --> 00:02:31.970
unfortunately, my color
scheme has bitten me here.

38
00:02:31.970 --> 00:02:32.990
I'm gonna disable that.

39
00:02:36.467 --> 00:02:38.400
&gt;&gt; Mike North: There's our hello,
right there.

40
00:02:41.630 --> 00:02:45.310
&gt;&gt; Mike North: And so
this is an example of a shell task.

41
00:02:45.310 --> 00:02:50.070
Any shell command you can run you can set
up in VS Code to execute in this way.

42
00:02:51.750 --> 00:02:56.200
&gt;&gt; Mike North: There is also an arguments
property we can add here, this args array.

43
00:02:56.200 --> 00:03:00.480
This simply ensures that any arguments
you pass are properly quoted.

44
00:03:00.480 --> 00:03:04.640
Because we've got single quotes,
double quotes, back-ticks and especially,

45
00:03:04.640 --> 00:03:07.300
when you're mixing tasks together,
when it commence together,

46
00:03:07.300 --> 00:03:09.940
it can become difficult to
keep all of that straight.

47
00:03:11.980 --> 00:03:16.310
You can add a current working
directory inside this options object.

48
00:03:16.310 --> 00:03:20.390
This would do nothing here simply
cuz workspaceRoot is a default.

49
00:03:20.390 --> 00:03:22.490
Now, think of that as a blank.

50
00:03:22.490 --> 00:03:25.600
It's a placeholder that'll get filled
in with the appropriate folder name.

51
00:03:25.600 --> 00:03:28.180
There are sort of parameters we can

52
00:03:28.180 --> 00:03:31.000
put into any of the strings
that we have as values here.

53
00:03:32.870 --> 00:03:35.190
All right so
here's where things get interesting.

54
00:03:35.190 --> 00:03:37.210
If I have a task that
is designed like this,

55
00:03:37.210 --> 00:03:42.060
it is going to run the command Echo,
the arg, it's going to pass echo.

56
00:03:42.060 --> 00:03:43.910
It's that long string here and

57
00:03:43.910 --> 00:03:48.140
that kind of looks like some
of our static analysis tools.

58
00:03:48.140 --> 00:03:52.820
You could read this as a problem
that we have found online eight and

59
00:03:52.820 --> 00:03:55.020
that problem says, this line stinks.

60
00:03:56.500 --> 00:04:00.360
And what we want is to be able to extract
that out and to see it show up the same

61
00:04:00.360 --> 00:04:04.440
way we've been seeing type script errors,
and that nice little problems tab.

62
00:04:06.140 --> 00:04:11.878
&gt;&gt; Mike North: So if the output of
our task looks something like this,

63
00:04:11.878 --> 00:04:19.240
we can basically use a regular
expression to parse this out into pieces

64
00:04:19.240 --> 00:04:25.330
of data that can help us
create those clickable links.

65
00:04:25.330 --> 00:04:26.700
Which file is this on?

66
00:04:26.700 --> 00:04:27.880
What line number?

67
00:04:27.880 --> 00:04:29.160
What column number?

68
00:04:29.160 --> 00:04:30.450
What's the message?

69
00:04:30.450 --> 00:04:31.980
Is this a warning, is this an error?

70
00:04:31.980 --> 00:04:32.580
Things like that.

71
00:04:33.710 --> 00:04:38.120
So we together are going to
create a regular expression

72
00:04:38.120 --> 00:04:39.500
that will solve this problem.

73
00:04:39.500 --> 00:04:41.539
Here's a cheat sheet if you
wanna do this yourself.

74
00:04:43.320 --> 00:04:48.510
And this is whole domain in and of
itself dealing with regular expressions.

75
00:04:48.510 --> 00:04:50.170
Here are two tools that I love to use,

76
00:04:50.170 --> 00:04:53.760
this one's probably my favorite
these days, regex101.com.

77
00:04:53.760 --> 00:04:58.960
And we're gonna figure out a way to
extract the data that we're interested in.

78
00:05:02.410 --> 00:05:05.080
So here's

79
00:05:05.080 --> 00:05:10.050
what we wanna end up creatingaAnd
it is called a problem matcher.

80
00:05:10.050 --> 00:05:12.010
And we say, who is the owner of this?

81
00:05:12.010 --> 00:05:14.150
That lets us say that this
is a JavaScript problem, or

82
00:05:14.150 --> 00:05:16.683
this is a TS link problem, or whatever.

83
00:05:16.683 --> 00:05:19.840
And we've got a pattern which has a regex.

84
00:05:19.840 --> 00:05:20.520
And then basically,

85
00:05:20.520 --> 00:05:24.480
we can point to what are called capture
groups of this regular expression.

86
00:05:24.480 --> 00:05:28.130
And say, in the first group,
you can find the name of the file.

87
00:05:28.130 --> 00:05:30.720
The second group is the line number,
the third group is the message.

88
00:05:32.200 --> 00:05:33.830
So let's take a look.

89
00:05:35.230 --> 00:05:36.810
&gt;&gt; Mike North: I'm gonna grab this here.

90
00:05:38.100 --> 00:05:43.120
And we're gonna open this regex 101 thing
and I just wanna paste this down here.

91
00:05:43.120 --> 00:05:44.822
This is sort of our test line.

92
00:05:44.822 --> 00:05:50.930
So I've used regex's for

93
00:05:50.930 --> 00:05:53.670
a while, so this may seem

94
00:05:55.090 --> 00:05:58.260
a little like you wouldn't you may not
be able to figure this out on your own.

95
00:05:58.260 --> 00:06:00.280
But that's okay, you can just look it up.

96
00:06:00.280 --> 00:06:04.050
Over time you kind of get
get a hand on this thing.

97
00:06:04.050 --> 00:06:09.169
So slash w is like any word character and
we're going to say, we want one or more

98
00:06:10.190 --> 00:06:15.460
word characters or
a forward slash or a period.

99
00:06:15.460 --> 00:06:18.950
Okay so now we've kind of captured
everything leading up to that TSX.

100
00:06:18.950 --> 00:06:23.150
All right so
this kind of represents the file name.

101
00:06:23.150 --> 00:06:26.970
After that, we're going to have a comma,
the literal word line.

102
00:06:26.970 --> 00:06:29.300
That word is always going to be there,
and then, now,

103
00:06:29.300 --> 00:06:32.630
we begin something else we want to
capture, which is the line number.

104
00:06:32.630 --> 00:06:33.990
That's gonna be a digit from 0 to 9.

105
00:06:33.990 --> 00:06:36.650
There could be one or more of them.

106
00:06:36.650 --> 00:06:39.530
That's what the plus means,
one or more characters 0 to 9.

107
00:06:39.530 --> 00:06:43.300
We're gonna capture that, another comma.

108
00:06:43.300 --> 00:06:44.570
And then, at the end here,

109
00:06:44.570 --> 00:06:48.900
last capture group, we're gonna say that
just basically means anything, at all.

110
00:06:51.250 --> 00:06:53.710
&gt;&gt; Mike North: And that should do it.

111
00:06:55.780 --> 00:06:57.130
So let's see if this works.

112
00:07:00.340 --> 00:07:05.765
&gt;&gt; Mike North: So if we create our tasks,
task.json, let me just update

113
00:07:05.765 --> 00:07:12.282
it with the beginning,
&gt;&gt; Mike North: This

114
00:07:12.282 --> 00:07:17.942
thing here,
&gt;&gt; Mike North: Paste it there,

115
00:07:17.942 --> 00:07:23.810
we need the right argument, cuz I
didn't include that, there is our args.

116
00:07:26.766 --> 00:07:31.460
&gt;&gt; Mike North: Okay and now we're gonna
just paste in that regular expression.

117
00:07:31.460 --> 00:07:35.250
Sorry, it's over here, and
we will have to escape some things, but

118
00:07:35.250 --> 00:07:36.320
we should be done after that.

119
00:07:39.180 --> 00:07:46.253
&gt;&gt; Mike North: So it's complaining that,
&gt;&gt; Mike North: Invalid escape characters

120
00:07:46.253 --> 00:07:51.470
and I'm gonna just temporarily adjust my
color scheme so I can see a little better.

121
00:07:55.018 --> 00:07:58.810
&gt;&gt; Mike North: That's better.

122
00:07:58.810 --> 00:08:02.570
So it has a problem with that and
with that, and now we're okay.

123
00:08:07.050 --> 00:08:09.230
&gt;&gt; Mike North: Okay, so
let's try running this task.

124
00:08:12.380 --> 00:08:14.240
It's called echo here.

125
00:08:14.240 --> 00:08:18.280
All right, so we saw that there's
the output, this line stinks.

126
00:08:18.280 --> 00:08:20.810
but note we have a problem down here,
and if we click on it,

127
00:08:20.810 --> 00:08:22.450
it says this line stinks.

128
00:08:22.450 --> 00:08:27.430
And then we click on that, and it's
highlighting line 8 of that specific file.

129
00:08:27.430 --> 00:08:29.590
So, there's no special magic here,

130
00:08:29.590 --> 00:08:33.270
in terms of the ability to pick up
on problems that are found in code.

131
00:08:33.270 --> 00:08:37.780
It's just a regular expression that can
make sense out of a line of text, and

132
00:08:37.780 --> 00:08:40.710
can extract out the appropriate things.

133
00:08:40.710 --> 00:08:44.230
Right, and then it will end up things
will get grouped together by file.

134
00:08:44.230 --> 00:08:48.310
If types group found problems with this
and this script that we built found

135
00:08:48.310 --> 00:08:52.010
problems, we would all be grouped
together under the same file.

136
00:08:52.010 --> 00:08:57.590
It would all be one set of issues detected
by a number of pieces of software there.

137
00:09:04.170 --> 00:09:09.370
&gt;&gt; Mike North: That's
basically how we did it.

138
00:09:09.370 --> 00:09:11.110
We created a problem matcher.

139
00:09:11.110 --> 00:09:14.230
We defined an owner,
we said this belongs to type script.

140
00:09:14.230 --> 00:09:17.680
And then we defined a pattern
that had a regular expression.

141
00:09:17.680 --> 00:09:20.750
And then we said group 1 is where
you can find the file name,

142
00:09:20.750 --> 00:09:23.870
group 2 you can find the line,
group 3 you can find the message.

143
00:09:23.870 --> 00:09:28.580
And just so it's clear what groups mean.

144
00:09:28.580 --> 00:09:29.420
Over here,

145
00:09:29.420 --> 00:09:34.820
this is telling us, when the regular
expression operated on this line here.

146
00:09:34.820 --> 00:09:36.320
This is what it found in group one.

147
00:09:36.320 --> 00:09:37.570
This is what it found in group two.

148
00:09:37.570 --> 00:09:39.160
This is what it found in group three.

149
00:09:39.160 --> 00:09:40.170
So it's really easy.

150
00:09:40.170 --> 00:09:42.220
You kind of fiddle with
it until you get right.

151
00:09:42.220 --> 00:09:44.870
You can paste a bunch of
different examples here and

152
00:09:44.870 --> 00:09:48.159
you can see like you make sure you
catch all of the important cases.

153
00:09:51.610 --> 00:09:54.470
&gt;&gt; Mike North: All right,
we ended up seeing problems and

154
00:09:54.470 --> 00:09:57.030
the underline which is great.

155
00:09:57.030 --> 00:10:00.810
In this case, we didn't specify column
numbers, the whole line gets underlined,

156
00:10:00.810 --> 00:10:04.420
instead of just one particular
symbol at a particular spot.

