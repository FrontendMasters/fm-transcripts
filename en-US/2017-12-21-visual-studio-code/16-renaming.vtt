WEBVTT

1
00:00:00.130 --> 00:00:03.702
&gt;&gt; Mike: I've got rename here, and
there are three levels to rename.

2
00:00:03.702 --> 00:00:06.970
It goes from pretty good,
we've been using find and

3
00:00:06.970 --> 00:00:11.400
replace for a while, and
then starts to get better from there.

4
00:00:11.400 --> 00:00:15.360
So pretty good is Find and Replace, and
that works exactly as you would expect.

5
00:00:15.360 --> 00:00:19.770
So if we go back to our listener-support
here, we can hit Cmd+F,

6
00:00:19.770 --> 00:00:22.610
find something, open this up and
replace it with something else.

7
00:00:22.610 --> 00:00:25.200
This has been around for
ages, not really interesting.

8
00:00:25.200 --> 00:00:29.870
Level two is using Cmd+D for
selection, and

9
00:00:29.870 --> 00:00:35.830
then using basically multicursor
support to write out the new name.

10
00:00:35.830 --> 00:00:40.110
So level three would be F2 for

11
00:00:40.110 --> 00:00:45.000
renaming a symbol in all files,
and here's what that looks like.

12
00:00:45.000 --> 00:00:48.913
If I were to say, go to the cart-store,

13
00:00:48.913 --> 00:00:52.953
I'm looking for a public function here.

14
00:00:52.953 --> 00:00:57.635
doCheckout(), that seems pretty important,
checkout with my order here.

15
00:00:57.635 --> 00:01:00.785
I can hit F2 and
it's gonna let me rename this.

16
00:01:02.924 --> 00:01:08.458
&gt;&gt; Mike: I'll say checkoutNow,
I'm gonna hit Enter.

17
00:01:08.458 --> 00:01:12.785
So you'll see this little dot up here
indicates I have unsaved changes.

18
00:01:12.785 --> 00:01:15.207
And if I show my sidebar here and

19
00:01:15.207 --> 00:01:20.855
go back to my File Explorer view,
&gt;&gt; Mike: It

20
00:01:20.855 --> 00:01:25.786
looks like this was all localized
within this one file, let's see.

21
00:01:29.458 --> 00:01:30.392
&gt;&gt; Mike: What are my diffs here?

22
00:01:34.029 --> 00:01:36.309
&gt;&gt; Mike: Show changes.

23
00:01:38.540 --> 00:01:39.377
&gt;&gt; Mike: Open changes.

24
00:01:42.420 --> 00:01:43.450
&gt;&gt; Mike: I guess I have to save it.

25
00:01:45.400 --> 00:01:49.622
So there's checkoutNow,
maybe this wasn't wired up?

26
00:01:49.622 --> 00:01:51.426
Let me check a couple other places.

27
00:01:54.753 --> 00:01:57.091
&gt;&gt; Mike: Actually,
I've got a different idea here,

28
00:01:57.091 --> 00:01:58.945
let's look at all the references.

29
00:02:00.357 --> 00:02:01.820
&gt;&gt; Mike: doCheckout's only used here.

30
00:02:06.676 --> 00:02:13.408
&gt;&gt; Mike: Cart
&gt;&gt; Mike: Ah-ha,

31
00:02:13.408 --> 00:02:19.120
so maybe this is sort of too deep in
React land for it to be detected here.

32
00:02:19.120 --> 00:02:22.489
Let me pick something a little
bit less of a back flip here.

33
00:02:24.395 --> 00:02:29.435
&gt;&gt; Mike: Let's do in our listener-support,
cuz I'm gonna pick something that

34
00:02:29.435 --> 00:02:35.380
is only used in JavaScript outside of
the render function of our React stuff.

35
00:02:35.380 --> 00:02:40.013
So if I have register and
unregister, I could hit F2,

36
00:02:40.013 --> 00:02:42.930
do registerListener, save it.

37
00:02:42.930 --> 00:02:46.370
And what we've got here are a couple
of other files that were open.

38
00:02:46.370 --> 00:02:49.130
And if we look at what's
happened in each of those,

39
00:02:49.130 --> 00:02:51.590
it's actually changed it
across multiple files here.

40
00:02:52.750 --> 00:02:55.607
So through it's knowledge of
the way our code is structured.

41
00:02:55.607 --> 00:02:59.014
It appears there's a little
gap where if you're using it,

42
00:02:59.014 --> 00:03:03.650
if it's something that's bound into
a React component in the render function,

43
00:03:03.650 --> 00:03:07.350
maybe it has trouble walking that syntax,
that part of the AST.

44
00:03:07.350 --> 00:03:10.360
But for the most part,
this is pretty nice, and

45
00:03:10.360 --> 00:03:15.410
you could go into each of these and
use these little things in the gutter.

46
00:03:15.410 --> 00:03:17.760
See I've got two little blue notches here,

47
00:03:17.760 --> 00:03:20.660
those represent
modifications to this file.

48
00:03:20.660 --> 00:03:24.920
So we could go check them out one by one,
everything looks good, save it.

49
00:03:26.160 --> 00:03:28.655
And we should be good now, and
our app will continue to work.

50
00:03:31.099 --> 00:03:31.940
&gt;&gt; Mike: Or it should.

51
00:03:35.636 --> 00:03:37.625
&gt;&gt; Mike: If it's in the foreground,
if we let it work.

52
00:03:37.625 --> 00:03:42.840
[LAUGH] And if we wanted to change
it back, we could just do this.

53
00:03:42.840 --> 00:03:45.494
You could actually do it from
within any of those functions,

54
00:03:45.494 --> 00:03:48.889
you don't have to go to the definition,
you could just go to the use, right?

55
00:03:48.889 --> 00:03:52.834
We could go here and say, nope change it
back, we're just gonna to have register.

56
00:03:54.763 --> 00:03:57.470
&gt;&gt; Mike: And then, now we've got
all of these modifications again.

57
00:03:57.470 --> 00:04:00.820
We can do Save All if we wanted to.

58
00:04:00.820 --> 00:04:06.675
And just say, well, we will proofread
this when we're making our git commit.

59
00:04:06.675 --> 00:04:12.754
So that's a relatively recent
addition to Visual Studio Code.

60
00:04:12.754 --> 00:04:18.420
Another type of refactoring that
is common is taking some code and

61
00:04:18.420 --> 00:04:21.520
extracting it out into a function.

62
00:04:22.980 --> 00:04:24.152
So let's look at how that works.

63
00:04:26.241 --> 00:04:30.760
&gt;&gt; Mike: Let's say that we've
got this code here, right?

64
00:04:30.760 --> 00:04:33.270
So basically this is
adding an item to a cart.

65
00:04:33.270 --> 00:04:36.150
If it's already in the cart,
we're just gonna bump up

66
00:04:36.150 --> 00:04:40.670
the quantity of the existing item, rather
than adding a new item to this cart.

67
00:04:40.670 --> 00:04:43.980
So for some reason we want
to make this its own file.

68
00:04:43.980 --> 00:04:47.660
You see that when we select this and
click this little light bulb,

69
00:04:47.660 --> 00:04:52.870
this is giving us the ability to make this
a new function within the same class.

70
00:04:52.870 --> 00:04:57.216
So if I hit Enter,
you'll see we've got newFunction here.

71
00:04:57.216 --> 00:04:58.680
And we could click on that and see,

72
00:04:58.680 --> 00:05:02.310
there's our stuff,
probably needs some formatting love.

73
00:05:02.310 --> 00:05:06.244
We could select that, hit F2,

74
00:05:06.244 --> 00:05:11.206
say addOrIncrementCartItem, Enter.

75
00:05:11.206 --> 00:05:16.410
And now that was also renamed
wherever it was used, right here.

76
00:05:17.710 --> 00:05:22.936
So pretty nice,
this is opening up a new workflow that is,

77
00:05:22.936 --> 00:05:26.253
in my view, a great way to do things.

78
00:05:26.253 --> 00:05:28.460
But typically requires some manual work.

79
00:05:28.460 --> 00:05:31.277
And that is just start
writing your function, and

80
00:05:31.277 --> 00:05:36.843
as you see chunks of code that might be,
&gt;&gt; Mike: More broadly useful

81
00:05:36.843 --> 00:05:41.585
than just accomplishing this one thing,
refactor that out into it's own thing.

82
00:05:41.585 --> 00:05:44.899
And then rename lets you just do
the finishing step of adding something

83
00:05:44.899 --> 00:05:45.640
descriptive.

84
00:05:45.640 --> 00:05:49.770
And then go back into that function again,
and it's really easy now,

85
00:05:49.770 --> 00:05:53.470
just select, refactor out,
and it just works.

86
00:05:53.470 --> 00:05:56.440
And depending on what
context you may be in,

87
00:05:56.440 --> 00:06:00.340
it could say create a new global
function called this, right?

88
00:06:00.340 --> 00:06:03.180
If you're not inside a class,
that would be the option given to you.

89
00:06:04.650 --> 00:06:09.370
So that is pretty cool, and
that landed two weeks ago?

90
00:06:10.574 --> 00:06:15.740
So, again, this is approaching IDE
level code manipulation features

