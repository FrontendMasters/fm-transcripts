WEBVTT

1
00:00:00.000 --> 00:00:01.616
&gt;&gt; Mike North: Here is your exercise.

2
00:00:01.616 --> 00:00:04.407
So, has anyone tried adding
something to the cart?

3
00:00:04.407 --> 00:00:05.824
I know you did.

4
00:00:05.824 --> 00:00:09.619
You tried adding something to the cart and
it turns out there's a bug,

5
00:00:09.619 --> 00:00:13.627
where you're getting like,
can I call map of undefined, or something?

6
00:00:13.627 --> 00:00:15.665
It's, our server side is complaining.

7
00:00:15.665 --> 00:00:18.186
It's trying to do something and
it can't do it.

8
00:00:18.186 --> 00:00:22.325
So I just through my intuition and
the fact that I set this bug up for

9
00:00:22.325 --> 00:00:27.066
you personally, tells me there might
be some misalignment between the way

10
00:00:27.066 --> 00:00:31.380
the client is providing like data and
the server is receiving data.

11
00:00:31.380 --> 00:00:33.217
Like maybe the server expects something,
and

12
00:00:33.217 --> 00:00:34.827
the client is giving it something else.

13
00:00:34.827 --> 00:00:38.712
So I want us to use this
multi-process debugging feature,

14
00:00:38.712 --> 00:00:43.760
to basically set break points where
the client is just about to send the data,

15
00:00:43.760 --> 00:00:45.484
so he can take a look at it.

16
00:00:45.484 --> 00:00:49.433
And then set a break point on the server
side where the server has just received

17
00:00:49.433 --> 00:00:50.422
the data.

18
00:00:50.422 --> 00:00:54.720
And then that 'll help us understand
like what's going on, in a way that we

19
00:00:54.720 --> 00:00:58.760
can sort of just step straight from
client, let the network request go out and

20
00:00:58.760 --> 00:01:02.720
then pick up debugging on the server
side in our other process.

21
00:01:02.720 --> 00:01:05.950
So you have both running at the same time,
break points in both.

22
00:01:05.950 --> 00:01:09.770
Where you want to set the break point for
the client side,

23
00:01:09.770 --> 00:01:11.970
it's right in the save cart function.

24
00:01:11.970 --> 00:01:14.920
I'm saving you the trouble of
tracking through the react code and

25
00:01:14.920 --> 00:01:18.530
finding ultimately that the fetch
is sent from this file here.

26
00:01:18.530 --> 00:01:22.270
So oops, I appear to have a broken link.

27
00:01:22.270 --> 00:01:24.330
Client data cart store.

28
00:01:24.330 --> 00:01:27.958
You'll just have to, I'll fix it, but

29
00:01:27.958 --> 00:01:32.291
cart-store and save cart.
&gt;&gt; Mike North: So

30
00:01:32.291 --> 00:01:34.410
it's this function right here.

31
00:01:34.410 --> 00:01:37.700
So this is probably
an interesting area to look.

32
00:01:39.020 --> 00:01:42.990
On the server side, see if this works.

33
00:01:44.040 --> 00:01:45.110
Yes, that works.

34
00:01:45.110 --> 00:01:51.390
So, this is in the cart route,
under the put items handler.

35
00:01:51.390 --> 00:01:55.030
So that would be here,
at least for now, it's line 49.

36
00:01:55.030 --> 00:01:59.966
I reserve the right to rebase, fixes in
and to keep this code base up to date, but

37
00:01:59.966 --> 00:02:01.452
it's this thing here.

38
00:02:01.452 --> 00:02:06.226
So you'll probably wanna set some break
points somewhere around this area

39
00:02:06.226 --> 00:02:10.480
before the data start getting chewed
on just so you can take a look.

40
00:02:11.860 --> 00:02:17.843
Here we're finally getting to deal with a
complicated type of new language feature,

41
00:02:17.843 --> 00:02:20.600
it's called an async function.

42
00:02:20.600 --> 00:02:24.840
It is a generator function, sorry it is
a function that returns a promise and

43
00:02:24.840 --> 00:02:29.229
you can pause execution in the middle
of this function, which is pretty cool.

44
00:02:29.229 --> 00:02:34.367
This is a really new idea and
I'm showing this to you because you'll

45
00:02:34.367 --> 00:02:39.147
have no more difficulty walking
through this advanced thing,

46
00:02:39.147 --> 00:02:43.579
than you would just stepping
through a regular function.

47
00:02:43.579 --> 00:02:47.063
You'll see the call stacks stitched
together exactly as you'd want to see

48
00:02:47.063 --> 00:02:49.618
them, and
it should be a pretty seamless experience.

49
00:02:49.618 --> 00:02:53.429
The reason is TypeScript has had
a sync and a weight around for

50
00:02:53.429 --> 00:02:58.100
a very long time compared to how long
they've been around in JavaScript.

51
00:02:58.100 --> 00:03:05.118
So they had it for a while, and that has
in some way has informed the JavaScript's

52
00:03:05.118 --> 00:03:08.660
standards body, as to how it should
work and how it should be implemented.

53
00:03:10.120 --> 00:03:11.870
So you'll set those two breakpoints and

54
00:03:11.870 --> 00:03:17.200
you'll use the above guidelines to create,
attach and launch configurations.

55
00:03:17.200 --> 00:03:19.310
You don't have to worry about this,
it's been done for you.

56
00:03:20.360 --> 00:03:24.370
Find and fix the problem and the idea
is you should be able to seamlessly

57
00:03:24.370 --> 00:03:26.680
transition between server and client.

58
00:03:26.680 --> 00:03:30.760
Because it's one set of break points,
two processes, and

59
00:03:30.760 --> 00:03:32.050
you can toggle between them easily.

