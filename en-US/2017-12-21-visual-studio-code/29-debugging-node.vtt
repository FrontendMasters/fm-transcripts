WEBVTT

1
00:00:00.330 --> 00:00:03.070
&gt;&gt; Mike: So the last thing
we're gonna look at in terms of

2
00:00:03.070 --> 00:00:06.770
using Visual Studio code is debugging.

3
00:00:06.770 --> 00:00:13.530
Man, does this text editor do a great
job at allowing us to remain in our

4
00:00:13.530 --> 00:00:19.680
code authoring environment, while
getting first class debugging support.

5
00:00:19.680 --> 00:00:24.610
That I would be hard pressed
to find anywhere else.

6
00:00:24.610 --> 00:00:28.398
I don't know if it's
possible to do the kinds of

7
00:00:28.398 --> 00:00:32.104
things we're gonna look
at in other editors.

8
00:00:32.104 --> 00:00:35.964
In order to sort of work our way up,
let's talk about debugging various things.

9
00:00:35.964 --> 00:00:40.623
And we've got two system
components of interest here.

10
00:00:40.623 --> 00:00:45.489
We've got node.js backend,
that's what providing our JSON.

11
00:00:45.489 --> 00:00:48.195
And then we've got react React
that's running in browser.

12
00:00:48.195 --> 00:00:52.079
So the old node debugging experience,
I will show it to you,

13
00:00:52.079 --> 00:00:53.690
looks kind of like this.

14
00:00:55.290 --> 00:01:00.060
Node debug, and then you'd say,
here's the image of your file.

15
00:01:01.650 --> 00:01:06.010
And effectively what's happened here,
like we're in a text-only environment,

16
00:01:06.010 --> 00:01:07.480
number one.

17
00:01:07.480 --> 00:01:11.520
The extent of the user
interface we've got is

18
00:01:11.520 --> 00:01:13.980
it looks like something has
been highlighted in green.

19
00:01:13.980 --> 00:01:15.589
I really don't know what that is.

20
00:01:17.620 --> 00:01:22.190
And if I tried like help,
what you find is that

21
00:01:22.190 --> 00:01:27.160
we can use some of these commands to
set breakpoints on particular files,

22
00:01:27.160 --> 00:01:30.250
on particular lines,
it's all done through your terminal.

23
00:01:30.250 --> 00:01:32.847
It's all done with text.

24
00:01:32.847 --> 00:01:36.837
And my key, you see here we can continue,
we can step, we can use the next.

25
00:01:36.837 --> 00:01:39.292
These where the things if you
use debugging with Chrome,

26
00:01:39.292 --> 00:01:41.194
we use to having the whole buttons for
that.

27
00:01:41.194 --> 00:01:44.243
Here you have to know the key bindings.

28
00:01:44.243 --> 00:01:47.700
And if were gonna like inspect for
whats going on,

29
00:01:47.700 --> 00:01:52.469
we actually have to enter the repl,
which is the, what is it, read,

30
00:01:52.469 --> 00:01:52.981
edit-

31
00:01:52.981 --> 00:01:54.303
&gt;&gt; Speaker 2: Execute.
&gt;&gt; Mike: Read,

32
00:01:54.303 --> 00:01:55.277
execute.
&gt;&gt; Speaker 2: Print, loop.

33
00:01:55.277 --> 00:01:56.920
&gt;&gt; Mike: Print, loop.

34
00:01:56.920 --> 00:01:57.970
Read, execute, print, loop.

35
00:02:00.020 --> 00:02:03.870
So now, I'm actually,
I can't see where I am at the stack now.

36
00:02:03.870 --> 00:02:06.150
I've lost that, cuz I'm out of that mode.

37
00:02:06.150 --> 00:02:10.581
But I could do something like,
&gt;&gt; Mike: And

38
00:02:10.581 --> 00:02:12.921
you'll see, I can run JavaScript here.

39
00:02:12.921 --> 00:02:15.237
This is the equivalent of just
running the node command,

40
00:02:15.237 --> 00:02:17.030
except we're frozen at this point in time.

41
00:02:18.370 --> 00:02:21.167
Who liked this debugging experience?

42
00:02:21.167 --> 00:02:23.759
Okay, for the record,
zero hands in the room just went up.

43
00:02:23.759 --> 00:02:24.599
&gt;&gt; [LAUGH]

44
00:02:24.599 --> 00:02:26.370
&gt;&gt; Mike: Let that stand on the video.

45
00:02:27.490 --> 00:02:30.420
Okay, so luckily May 2016,

46
00:02:30.420 --> 00:02:35.260
Google I/O of last year,
they launched something really cool.

47
00:02:37.060 --> 00:02:40.900
By the way,
I am not being totally fair to node.

48
00:02:40.900 --> 00:02:43.550
You could have added some packages
to this that would have improved

49
00:02:43.550 --> 00:02:44.780
the experience here.

50
00:02:44.780 --> 00:02:48.850
But you had to know how to do that,
it wasn't part of the core node thing.

51
00:02:51.110 --> 00:02:53.290
So here's what we got last year.

52
00:02:54.790 --> 00:02:55.940
We could do the same thing.

53
00:02:55.940 --> 00:02:59.126
Instead of saying, debug, we're gonna say,

54
00:02:59.126 --> 00:03:03.880
inspect and inspect PRK,

55
00:03:03.880 --> 00:03:10.140
which is this first flag here
tells the V8 one time to start up.

56
00:03:10.140 --> 00:03:14.280
Listening to the inspector protocol,
which is next generation of,

57
00:03:15.530 --> 00:03:21.780
the way that the JavaScript
runtime will talk

58
00:03:21.780 --> 00:03:25.910
to like tools and then inform them about,
like here's the current stock and you just

59
00:03:25.910 --> 00:03:29.880
stop to your break point, just think of
it like it's JSON going back and forth.

60
00:03:29.880 --> 00:03:32.400
This is a new version of the protocol.

61
00:03:32.400 --> 00:03:33.420
This here,

62
00:03:33.420 --> 00:03:38.600
adds the additional benefit of basically
freezing as soon as you start up.

63
00:03:38.600 --> 00:03:40.640
And listening for

64
00:03:40.640 --> 00:03:44.730
break points to be set even after
the debugging session has started.

65
00:03:44.730 --> 00:03:48.620
So we need that if we wanna be able to
click on lines as we're stepping through

66
00:03:48.620 --> 00:03:53.110
the code and have those break points
be something the debugger listens to.

67
00:03:53.110 --> 00:03:56.630
Otherwise, you got what
you got when you start up.

68
00:03:56.630 --> 00:04:00.870
So once we do this,
you'll see you get a web socket URL.

69
00:04:02.630 --> 00:04:07.750
Some versions of Node would give you
a chrome://URL you could click on.

70
00:04:07.750 --> 00:04:10.009
And you could jump right into Chrome.

71
00:04:10.009 --> 00:04:13.606
What you would do here is go in to Chrome,
inspect, and

72
00:04:13.606 --> 00:04:17.691
what you'll see is hey look,
I've got a remote target here.

73
00:04:17.691 --> 00:04:22.701
I click this and we'll find that we're
frozen at this particular break point,

74
00:04:22.701 --> 00:04:26.570
and if we look over here,
it says debugger attached.

75
00:04:26.570 --> 00:04:32.830
And so, now we can actually say step,
step, step, and it will do stuff.

76
00:04:32.830 --> 00:04:36.090
So you get to use Chrome's tools here,
which is great.

77
00:04:36.090 --> 00:04:38.636
This is so much better than
what we were looking at before.

78
00:04:38.636 --> 00:04:43.321
And frankly,
this was the major advancement

79
00:04:43.321 --> 00:04:48.017
here.
&gt;&gt; Mike: What we can do to make

80
00:04:48.017 --> 00:04:51.470
this even better is bring it
into our environment, but

81
00:04:51.470 --> 00:04:56.367
I wanna show you, this is not Visual
Studio code, but I have to show it to you.

82
00:04:56.367 --> 00:05:00.917
You see I've got multiple break points
here, this is a relatively new Chrome

83
00:05:00.917 --> 00:05:04.349
feature where I can say,
I want a break point on this line.

84
00:05:04.349 --> 00:05:08.516
Let me make it a little bigger, and
I do not need this console right now.

85
00:05:08.516 --> 00:05:11.620
I want a break point on this line,
but this is async, right,

86
00:05:11.620 --> 00:05:15.840
where I'm saying DB instance,
returns of value, then I've got start.

87
00:05:15.840 --> 00:05:20.250
And that result, that returns of promise,
that results to something.

88
00:05:20.250 --> 00:05:22.430
I can actually pick which one of these or

89
00:05:22.430 --> 00:05:25.490
multiple I wish to stop
at on the single line.

90
00:05:26.720 --> 00:05:27.780
So there's sort of like,

91
00:05:27.780 --> 00:05:32.760
which step in this chain of
things do you want to stop at?

92
00:05:35.670 --> 00:05:38.952
Goes to show you that
debugging is evolving, and

93
00:05:38.952 --> 00:05:42.405
the basics of just like breakpoint and
watchlist.

94
00:05:42.405 --> 00:05:47.156
This is sort of, this is the,
just the table steaks, right?

95
00:05:47.156 --> 00:05:49.300
This is the least you can implement.

96
00:05:50.400 --> 00:05:55.020
Many, many teams are working
on more advanced stuff.

97
00:05:55.020 --> 00:06:01.620
So let's get out of here.
&gt;&gt; Mike: And let's do something else.

98
00:06:01.620 --> 00:06:08.260
So I'm gonna run, you may notice,
I've got in this project.

99
00:06:08.260 --> 00:06:10.810
Let's see if I have it, great, aunch.json.

100
00:06:10.810 --> 00:06:12.490
So we're gonna talk about this in detail.

101
00:06:12.490 --> 00:06:14.610
We're gonna deal with
launch configurations.

102
00:06:14.610 --> 00:06:15.820
I've got two in here.

103
00:06:15.820 --> 00:06:17.040
Don't worry about them for now.

104
00:06:17.040 --> 00:06:21.870
We're going to dive into this in detail,
but the consequence of this is if we open

105
00:06:21.870 --> 00:06:26.830
up the Debug View, and
if you have you Activity Bar on,

106
00:06:26.830 --> 00:06:29.880
it's the little bug with the circle and
slash through it.

107
00:06:29.880 --> 00:06:34.370
What we can do here is we can say,
attach and

108
00:06:34.370 --> 00:06:37.460
that is the equivalent of like
clicking on that link in Chrome.

109
00:06:37.460 --> 00:06:42.260
So I wanna start up Node,
same flags, inspect, inspect, break.

110
00:06:42.260 --> 00:06:46.880
And I've selected attach here,
and I can hit play.

111
00:06:46.880 --> 00:06:50.700
And now I am stopped at a break
point right within code.

112
00:06:50.700 --> 00:06:52.180
I can have a watch here.

113
00:06:52.180 --> 00:06:54.485
These are basically,
if you have ever used these before,

114
00:06:54.485 --> 00:06:58.950
they're expressions where whatever you
stop at a break point whenever you pause

115
00:06:58.950 --> 00:07:02.980
essentially you get to see what
certain expressions evaluate to.

116
00:07:02.980 --> 00:07:05.580
You've got your list of
breakpoints here and

117
00:07:05.580 --> 00:07:08.380
a call stack, and
then here is your local scope.

118
00:07:10.320 --> 00:07:12.270
So I've got a break point here,

119
00:07:12.270 --> 00:07:16.000
you will note that I can't
step into this as easily.

120
00:07:16.000 --> 00:07:19.780
I am fairly sure that we will
soon get that kind of thing,

121
00:07:19.780 --> 00:07:22.780
at the rate that the VS
code team is working.

122
00:07:22.780 --> 00:07:28.110
Then we'll be able to jump into specific,
some people call these column break

123
00:07:28.110 --> 00:07:35.820
points, where you can say this part
of this chain call should be used.

124
00:07:35.820 --> 00:07:40.880
So in addition to that,
let me not get ahead of my slides here.

125
00:07:40.880 --> 00:07:45.840
But we can do other stuff, so
we'll look at that later on.

126
00:07:45.840 --> 00:07:48.250
But we're currently at
a break point in Chrome.

127
00:07:48.250 --> 00:07:51.210
Rather than using these flags here,
you have an npm

128
00:07:51.210 --> 00:07:54.950
script that will do the exact same
thing for you within this project.

129
00:07:54.950 --> 00:07:59.350
So if you just run npm run debug, attach.

130
00:07:59.350 --> 00:08:01.040
You'll start up with the correct flags,
and

131
00:08:01.040 --> 00:08:02.710
you'll be able to attach just like I did.

