WEBVTT

1
00:00:00.300 --> 00:00:02.980
&gt;&gt; Mike North: So one of the interesting
things about tools for JavaScript, for

2
00:00:02.980 --> 00:00:08.570
editors for JavaScript,
is that unlike other languages like Java,

3
00:00:08.570 --> 00:00:12.450
it seems that these light editors
are way more popular than

4
00:00:13.450 --> 00:00:17.860
like the heavier IDE type experience.

5
00:00:17.860 --> 00:00:21.290
IDEs would be like, Eclipse, or NetBeans,

6
00:00:21.290 --> 00:00:24.320
that's one that I used to use,
or IntelliJ.

7
00:00:24.320 --> 00:00:27.310
These are things that are designed for

8
00:00:27.310 --> 00:00:31.350
typed languages where you can analyze
the code and figure out you know

9
00:00:32.490 --> 00:00:35.900
you can do a bunch of indexing in the
background and figure out what's going on.

10
00:00:37.100 --> 00:00:42.460
Traditionally this is not really been
easy or possible with JavaScript because.

11
00:00:42.460 --> 00:00:44.700
It is dynamically typed and

12
00:00:44.700 --> 00:00:48.570
you know we kind figure out if
something is gonna work at run time.

13
00:00:48.570 --> 00:00:52.300
Static analysis cannot traditionally
get us as quite as far.

14
00:00:53.410 --> 00:00:57.950
So this is where we saw things
like Sublime and Atom and

15
00:00:57.950 --> 00:01:03.560
like Notepad++ for
Windows users becoming really popular.

16
00:01:03.560 --> 00:01:06.570
More cell than the heavier experiences.

17
00:01:06.570 --> 00:01:10.600
Now, it's not to say that it is bad to
use this other types of development

18
00:01:10.600 --> 00:01:16.220
environments but they have not become,
the defacto standard for

19
00:01:16.220 --> 00:01:22.370
the JavaScript world as they have been for
languages like Java or Ruby, right?

20
00:01:22.370 --> 00:01:25.200
Those sort of have
a go-to editor of sorts.

21
00:01:26.670 --> 00:01:29.480
So I think code strikes a great balance.

22
00:01:29.480 --> 00:01:33.882
Visual Studio Code strikes a great balance
between providing some of the features we

23
00:01:33.882 --> 00:01:38.040
like in these heavier experiences while
keeping things as simple as possible.

24
00:01:38.040 --> 00:01:41.180
It all starts with just
opening a text file.

25
00:01:41.180 --> 00:01:44.910
And we don't have to create a big
project or a big workplace.

26
00:01:44.910 --> 00:01:46.460
We can opt into that as we go.

27
00:01:48.160 --> 00:01:52.720
So one of the most impressive things
about the way that this works,

28
00:01:52.720 --> 00:01:55.460
the way Visual Studio code
has started to evolve

29
00:01:55.460 --> 00:01:59.630
is we're seeing like great
features drop every month.

30
00:01:59.630 --> 00:02:04.370
Every release seems to have more and
more rich functionality for us.

31
00:02:04.370 --> 00:02:10.000
And they have a habit, a good habit,
of developing features

32
00:02:10.000 --> 00:02:15.430
that sort of enrich our experience without
introducing any complexity from our part.

33
00:02:15.430 --> 00:02:15.940
Right?

34
00:02:15.940 --> 00:02:19.060
Like next to a color,
why not put a little swatch

35
00:02:19.060 --> 00:02:23.550
of what that color looks like that
you can click on and you can change.

36
00:02:23.550 --> 00:02:25.440
That doesn't require any set up.

37
00:02:25.440 --> 00:02:28.460
It doesn't detract from
anyone's experience.

38
00:02:28.460 --> 00:02:31.550
And it makes it feel like
way more than just text.

39
00:02:32.690 --> 00:02:37.170
So, over time, we've seen
the ability to add task running.

40
00:02:37.170 --> 00:02:41.840
So this is auto detection of things
that are in your npm scripts, or

41
00:02:41.840 --> 00:02:43.370
your gulp file, or your grunt file.

42
00:02:43.370 --> 00:02:46.370
You can launch those
from within the editor.

43
00:02:46.370 --> 00:02:49.520
We see the ability to check
settings into a project.

44
00:02:49.520 --> 00:02:52.710
So if you have a particular
set of paths or particular

45
00:02:54.620 --> 00:02:58.110
set of launch configurations,
which we'll talk about later in the day,

46
00:02:58.110 --> 00:03:02.880
that relate to That specific piece of
code, that can be checked in with get.

47
00:03:02.880 --> 00:03:05.860
That can be something
your whole team shares.

48
00:03:05.860 --> 00:03:09.230
The plug in ecosystem has
been really successful.

49
00:03:09.230 --> 00:03:13.860
I think the code team has
taken one of Adam's great

50
00:03:13.860 --> 00:03:19.250
decisions and made it so
that web developers.

51
00:03:19.250 --> 00:03:22.380
Can build plugins more easily.

52
00:03:22.380 --> 00:03:24.810
It's all built with web technology,

53
00:03:24.810 --> 00:03:29.190
like what you're looking at here,
this in fact is a browser.

54
00:03:29.190 --> 00:03:33.642
If we toggle developer tools,
you may recognize this as like,

55
00:03:33.642 --> 00:03:37.180
what we're looking at is a Chrome,
more or less.

56
00:03:37.180 --> 00:03:39.270
I can actually inspect element.

57
00:03:39.270 --> 00:03:43.110
Maybe I can inspect all the way down
there, because we have an object here,

58
00:03:43.110 --> 00:03:47.050
but this is definitely HTML and CSS.

59
00:03:47.050 --> 00:03:49.800
We as web developers know
how to work with this.

60
00:03:49.800 --> 00:03:52.090
And it's more approachable and so

61
00:03:52.090 --> 00:03:58.410
the result is people are writing plug ins
like crazy and they are high quality.

62
00:03:58.410 --> 00:04:01.700
Sublime had a little bit of a challenging.

63
00:04:01.700 --> 00:04:04.070
It'll ramp up to building plug-ins.

64
00:04:04.070 --> 00:04:08.160
Because behind the scenes
everything was Perl, right.

65
00:04:08.160 --> 00:04:10.350
So you had to know Perl and

66
00:04:10.350 --> 00:04:16.090
be a wed developer to build
those web development plug-ins.

67
00:04:16.090 --> 00:04:20.620
So one of the great things that
IDEs bring to the table is this

68
00:04:20.620 --> 00:04:23.090
ability to analyze our
code in the background.

69
00:04:23.090 --> 00:04:26.680
And Visual Studio code has
started to incorporate that.

70
00:04:26.680 --> 00:04:28.820
Recently, as of this year,

71
00:04:28.820 --> 00:04:34.170
we get to use typescript which is
at the core of Visual Studio code.

72
00:04:34.170 --> 00:04:38.090
We use some typescript tools to
analyze regular JavaScript and

73
00:04:38.090 --> 00:04:41.310
we're gonna look at how we
can go about doing that and

74
00:04:42.670 --> 00:04:47.010
Catch subtle errors or
subtle inconsistencies within our code.

75
00:04:47.010 --> 00:04:51.510
So we're starting to get
IDE-like benefits in a light and

76
00:04:51.510 --> 00:04:54.870
thin sort of text editor experience.

77
00:04:54.870 --> 00:04:59.430
And then finally,
this has been built, and again,

78
00:04:59.430 --> 00:05:04.450
this is probably the newest editor on the
market, in terms of widespread adoption.

79
00:05:04.450 --> 00:05:07.690
They get to stand on the shoulders
of everything that came before them.

80
00:05:07.690 --> 00:05:10.860
And it seems that they've built things

81
00:05:10.860 --> 00:05:15.700
that the Visual Studio Code team has built
things in a way that is really extensible.

82
00:05:15.700 --> 00:05:21.010
So you see plug ins for things like elixir
and go, languages that really have nothing

83
00:05:21.010 --> 00:05:26.590
to do with what this editor
was originally intended for.

84
00:05:26.590 --> 00:05:29.410
But the experiences ends
up being really good,

85
00:05:29.410 --> 00:05:33.960
where you can have the right
abstractions around debugging

86
00:05:33.960 --> 00:05:39.240
tools where you can hook up a go
debugger or rust debugger really easily.

87
00:05:39.240 --> 00:05:44.330
Despite the fact that like this is really
built with web developers in mind.

