WEBVTT

1
00:00:00.370 --> 00:00:03.630
&gt;&gt; Mike North: And
the next topic is refactoring.

2
00:00:03.630 --> 00:00:05.260
What we're talking about here,

3
00:00:05.260 --> 00:00:09.108
it is sort of like finding
your way through a code base.

4
00:00:09.108 --> 00:00:14.280
Navigating, trying to find the right
function of interest and potentially like

5
00:00:14.280 --> 00:00:18.960
changing things that are already entangled
with other pieces of code, right?

6
00:00:18.960 --> 00:00:21.153
Renaming a function for example.

7
00:00:21.153 --> 00:00:25.395
So this is one of the areas
where we as developers,

8
00:00:25.395 --> 00:00:29.637
we have learned as web developers,
I should say,

9
00:00:29.637 --> 00:00:36.409
we have learned to accept the fact that
our editors force most of this work on us.

10
00:00:36.409 --> 00:00:41.271
And for me, personally, I use Shell
commands that existed 30 years ago to sort

11
00:00:41.271 --> 00:00:44.910
of to find all references
to a particular function.

12
00:00:44.910 --> 00:00:49.850
I use the Shell command find, and I've
been using that same command for years and

13
00:00:49.850 --> 00:00:51.456
years and years.

14
00:00:51.456 --> 00:00:57.010
Just sort of having accepted that
there's no other easy way to search

15
00:00:57.010 --> 00:01:02.530
through folders and files for a particular
use, or get graph is another one.

16
00:01:02.530 --> 00:01:05.340
You shouldn't put these ideas aside.

17
00:01:05.340 --> 00:01:10.061
But for regular use, as we went around and
talked about our pet peeves with our

18
00:01:10.061 --> 00:01:13.705
various tools,
context switching is one of them, right?

19
00:01:13.705 --> 00:01:17.978
It is not ideal to go from, even if
we have an embedded terminal in here,

20
00:01:17.978 --> 00:01:20.845
to go from terminal to
code to terminal to code.

21
00:01:20.845 --> 00:01:24.185
It would be nice if we could
sorta stay focused in one area.

22
00:01:24.185 --> 00:01:27.948
So the first thing I'm gonna
show is to how to go to a file.

23
00:01:27.948 --> 00:01:31.805
And you do that, so you can look at
your particular key binding, and

24
00:01:31.805 --> 00:01:34.453
we're gonna be living in this go menu for
now.

25
00:01:34.453 --> 00:01:37.498
Going to File it is, it is Cmd+T for

26
00:01:37.498 --> 00:01:41.870
me because I have Sublime
key bindings installed.

27
00:01:41.870 --> 00:01:46.050
I have Cmd+P as well because if
you're used to Atom and Sublime,

28
00:01:46.050 --> 00:01:49.570
that's sort of become
a defacto way to do it.

29
00:01:49.570 --> 00:01:52.860
And you see we've got
a list of files here, so

30
00:01:52.860 --> 00:01:56.950
they're sorted in order
that we last opened them.

31
00:01:56.950 --> 00:02:00.460
So very recently,
we were looking at refactoring

32
00:02:00.460 --> 00:02:03.770
this markdown file before we
said render the markdown.

33
00:02:03.770 --> 00:02:06.050
Show me the nice layout.

34
00:02:06.050 --> 00:02:07.220
This was where we came from.

35
00:02:07.220 --> 00:02:08.880
Here's where we implemented our solution.

36
00:02:08.880 --> 00:02:14.330
And we were toying around down here with
little emmet extensions in CSS and HTML.

37
00:02:14.330 --> 00:02:15.940
So if I were to just
click on one of these,

38
00:02:15.940 --> 00:02:17.520
it would open it in the current window.

39
00:02:17.520 --> 00:02:21.190
And of course, as you might expect,
this will open stuff to the side.

40
00:02:23.020 --> 00:02:30.760
Ad I want you to know that anytime we see
a box like this, there is only one box.

41
00:02:30.760 --> 00:02:35.540
We'll talk about key bindings that you
can use for finding things by symbol,

42
00:02:36.730 --> 00:02:40.940
running commands within Visual Studio
code itself, like install an extension.

43
00:02:41.950 --> 00:02:46.180
Those all just are special strings
that we would type into this box.

44
00:02:46.180 --> 00:02:50.270
So, for example,
if we begin with a greater than symbol,

45
00:02:50.270 --> 00:02:52.690
we're gonna get away from files.

46
00:02:52.690 --> 00:02:56.305
And now we're sort of telling
code to do particular things.

47
00:02:56.305 --> 00:03:02.125
If you're used to Sublime or Atom,
this would be this is Cmd+Shift+P, right?

48
00:03:02.125 --> 00:03:07.101
This is not open a file but rather,
editor, do something for me,

49
00:03:07.101 --> 00:03:11.547
change my color theme,
run a task, something like that.

50
00:03:11.547 --> 00:03:14.258
So that should be pretty simple.

51
00:03:14.258 --> 00:03:16.481
Let's talk about going to a definition.

52
00:03:16.481 --> 00:03:21.720
I'm just gonna open up
a relatively simple file.

53
00:03:21.720 --> 00:03:26.674
So this is a regular JavaScript file and
I refer to other

54
00:03:26.674 --> 00:03:32.073
objects in here,
some of which are within my own code base.

55
00:03:32.073 --> 00:03:35.025
Some of which are core language features,

56
00:03:35.025 --> 00:03:38.807
like a promise that comes
with JavaScript these days.

57
00:03:38.807 --> 00:03:43.850
And some of which are in libraries
that I have sort of brought along.

58
00:03:43.850 --> 00:03:48.120
But what we can do is hold
down the Command key and

59
00:03:48.120 --> 00:03:50.710
when we hover over things,
they become links.

60
00:03:50.710 --> 00:03:52.214
And we can click on them, and

61
00:03:52.214 --> 00:03:56.190
that'll take us to the definition
of whatever we were clicking on.

62
00:03:56.190 --> 00:03:59.300
So in the event that, sorry,
let me go back to that file.

63
00:04:00.620 --> 00:04:03.770
Nice, it's on the top
cuz we were just there.

64
00:04:03.770 --> 00:04:07.970
So if we can click on this,
we'll sort of jump to that function.

65
00:04:07.970 --> 00:04:10.140
Click on this,
we'll jump to that property.

66
00:04:10.140 --> 00:04:15.110
It's really nice to have linked code so
that we can sort of drill in and

67
00:04:15.110 --> 00:04:17.693
drill in and explore our code base.

68
00:04:17.693 --> 00:04:20.623
So that is Go To definition.

69
00:04:20.623 --> 00:04:23.297
There's also something
called the type definition.

70
00:04:23.297 --> 00:04:27.848
And you'll note that I
get some pretty great

71
00:04:27.848 --> 00:04:33.260
autocomplete style feedback
from the editor here.

72
00:04:33.260 --> 00:04:38.203
When I do something like this,
first off, it seems that the editor

73
00:04:38.203 --> 00:04:43.250
knows that there's this thing
called freeze on an object, right?

74
00:04:43.250 --> 00:04:45.577
It has is frozen, freeze, fire.

75
00:04:45.577 --> 00:04:49.778
It's actually picking fire up
because there's a method down,

76
00:04:49.778 --> 00:04:51.812
there's a method somewhere.

77
00:04:51.812 --> 00:04:53.731
Sorry, it's in listener
support called fire.

78
00:04:56.549 --> 00:05:00.980
&gt;&gt; Mike North: So it's basically
picked up that string recently and

79
00:05:00.980 --> 00:05:03.840
it's saying, did you mean this?

80
00:05:03.840 --> 00:05:04.689
Is this what you're trying to use?

81
00:05:04.689 --> 00:05:09.430
And then when we have freeze selected
up here, you can see that we've got

82
00:05:09.430 --> 00:05:13.641
this big kinda description of
the various types involved here.

83
00:05:13.641 --> 00:05:16.843
And if you are already
TypeScript indoctrinated,

84
00:05:16.843 --> 00:05:20.418
you will see that,
this is the object constructor,

85
00:05:20.418 --> 00:05:24.530
which is the capital O object,
freeze is the function name.

86
00:05:24.530 --> 00:05:30.920
It takes in an argument and it returns
a Readonly array with this item in it.

87
00:05:32.650 --> 00:05:34.750
So where are we getting
this information from?

88
00:05:36.620 --> 00:05:40.268
Where could we look at the definitions
of everything that's on an object?

89
00:05:40.268 --> 00:05:43.370
We would right-click on this and
we can say Go to Type Definition.

90
00:05:43.370 --> 00:05:50.357
And it'll take us basically to a file
that is built into TypeScript.

91
00:05:50.357 --> 00:05:55.075
In this case, it's because we have
TypeScript involved in this project and

92
00:05:55.075 --> 00:05:56.780
these aren't functions.

93
00:05:56.780 --> 00:06:02.380
These aren't implementations of these
things because those are internal

94
00:06:02.380 --> 00:06:05.030
browser code pieces, right?

95
00:06:05.030 --> 00:06:09.450
But it is a description of, with types,

96
00:06:09.450 --> 00:06:15.572
anything that can be done on this
object constructor, more specifically.

97
00:06:15.572 --> 00:06:17.054
So oftentimes,
you want to take a look of that.

98
00:06:20.151 --> 00:06:22.570
&gt;&gt; Mike North: So
that was type definition.

99
00:06:22.570 --> 00:06:24.090
Symbol is pretty nice.

100
00:06:24.090 --> 00:06:28.050
And this was implemented in Sublime and
Atom as well.

101
00:06:28.050 --> 00:06:31.730
So if we're in this file,
we can actually hit Cmd+R or

102
00:06:31.730 --> 00:06:35.498
you can just open this thing up and
start with a hashtag.

103
00:06:35.498 --> 00:06:38.377
And you basically start to search for
symbols.

104
00:06:38.377 --> 00:06:44.156
And so if I said cart, it's basically
found a couple of functions.

105
00:06:44.156 --> 00:06:50.355
So it's found objects like a class called
CartStore, a component called Cart.

106
00:06:50.355 --> 00:06:55.448
And then here it's found
a couple of functions here,

107
00:06:55.448 --> 00:06:58.910
so if I said, let's say saveCart.

108
00:06:58.910 --> 00:07:00.480
Actually, I think it's like this.

109
00:07:02.160 --> 00:07:06.310
There it is, saveCart, so I can click
on that and it'll take me to this.

110
00:07:06.310 --> 00:07:10.290
So symbols would be basically high level

111
00:07:11.400 --> 00:07:14.799
names of things that relate
to your data structures.

112
00:07:15.820 --> 00:07:19.540
Classes, functions,
constants, things like that.

113
00:07:23.142 --> 00:07:26.094
&gt;&gt; Mike North: So you can hit Cmd+R.

114
00:07:26.094 --> 00:07:30.601
Sorry, let me add a little
bit of detail here.

115
00:07:30.601 --> 00:07:34.588
What we were just looking
at with the hashtag,

116
00:07:34.588 --> 00:07:39.505
that is searching in our workspace for
a symbol, right?

117
00:07:39.505 --> 00:07:45.110
Note that if we had cart,
there was multiple files here.

118
00:07:45.110 --> 00:07:50.720
If we begin with an @ sign,
this is only within this particular file.

119
00:07:50.720 --> 00:07:53.290
And you'll note that I get a much
more complete set of results.

120
00:07:53.290 --> 00:07:57.349
I didn't even have to type anything, just
because it is feasible to just show you

121
00:07:57.349 --> 00:08:00.165
all of the symbols that
are available within this file.

122
00:08:03.200 --> 00:08:07.956
&gt;&gt; Mike North: So those are symbols,
great way to jump around to

123
00:08:07.956 --> 00:08:12.139
different functions within a given file.

124
00:08:12.139 --> 00:08:15.391
And then finding by line, I use this.

125
00:08:15.391 --> 00:08:18.546
There's basically one situation
where I find myself using this.

126
00:08:18.546 --> 00:08:23.490
And that is if I have a production
asset and I have a stack

127
00:08:23.490 --> 00:08:28.867
trace that points to
line 21,000 of 80,000 and

128
00:08:28.867 --> 00:08:33.370
source maps have failed me for
some reason.

129
00:08:33.370 --> 00:08:39.440
You can just hit Ctrl+G, or
in the Go menu, there's Go to Line.

130
00:08:39.440 --> 00:08:42.980
And here we could type in Go to line 900,
and it'll take us right there.

131
00:08:44.010 --> 00:08:46.519
But again, this is the same box, same box.

132
00:08:46.519 --> 00:08:51.009
We just begin with a :,

133
00:08:51.009 --> 00:08:54.606
an @, a #, a &gt;.

134
00:08:54.606 --> 00:08:59.068
And that helps us understanding
exactly what we're asking for,

135
00:08:59.068 --> 00:09:00.537
sort of the command.

136
00:09:00.537 --> 00:09:04.104
And then think of the rest of the string
as your argument that you're passing to

137
00:09:04.104 --> 00:09:04.815
that command.

138
00:09:08.676 --> 00:09:12.965
&gt;&gt; Mike North: All right, so
that's sort of jumping around to

139
00:09:12.965 --> 00:09:17.800
various important milestones
within your project.

