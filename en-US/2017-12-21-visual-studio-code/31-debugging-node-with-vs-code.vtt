WEBVTT

1
00:00:00.030 --> 00:00:04.070
&gt;&gt; Mike North: So you're gonna
start with MPM run debug inspect,

2
00:00:04.070 --> 00:00:04.900
I think it's inspect.

3
00:00:04.900 --> 00:00:08.290
Let me double check here,
cuz I know I said attach earlier.

4
00:00:10.670 --> 00:00:14.520
It is inspect, attach was a typo and
I will fix that.

5
00:00:14.520 --> 00:00:15.750
Here it is, that's the proof.

6
00:00:16.880 --> 00:00:17.730
So this is correct.

7
00:00:19.010 --> 00:00:22.830
You are gonna open the debugger side
panel, create a launch configuration.

8
00:00:22.830 --> 00:00:25.010
This has been done for you already.

9
00:00:25.010 --> 00:00:28.080
We will explain in detail
what this means line by line

10
00:00:28.080 --> 00:00:29.620
when you get into launch configuration.

11
00:00:30.770 --> 00:00:32.200
Take it on faith for now.

12
00:00:32.200 --> 00:00:35.150
You will press the launch button and

13
00:00:35.150 --> 00:00:39.100
you will end up being like
where I am right now.

14
00:00:40.100 --> 00:00:43.490
So let's talk a little bit about
the particulars of debugging.

15
00:00:43.490 --> 00:00:48.200
I mentioned there's this new protocol for
talking to a job discript run time,

16
00:00:48.200 --> 00:00:50.940
that is what we mean by
this inspector protocol.

17
00:00:50.940 --> 00:00:53.920
If you see legacy protocol
you might also see

18
00:00:53.920 --> 00:00:57.640
v8debugger protocol that is the old stuff.

19
00:00:57.640 --> 00:01:04.300
That was the only option before node
six and then, or six point something,

20
00:01:04.300 --> 00:01:08.210
and then from six point something
up to eight, we could use either.

21
00:01:08.210 --> 00:01:11.410
And now in node eight,
you can only use the new one, right?

22
00:01:12.450 --> 00:01:14.020
So launch versus attach.

23
00:01:14.020 --> 00:01:16.940
When we talk about launch
that's one button and

24
00:01:16.940 --> 00:01:19.130
your app is booted and it's running.

25
00:01:19.130 --> 00:01:23.300
Attach means you're looking for
something that is already started and

26
00:01:23.300 --> 00:01:27.560
you're gonna sort of connect to that
debugger and operate off of it.

27
00:01:27.560 --> 00:01:29.440
I will show you a conditional breakpoint,

28
00:01:29.440 --> 00:01:32.650
there are two things that we can
do that are pretty cool here.

29
00:01:34.030 --> 00:01:35.230
Let's actually jump in and do that.

30
00:01:36.410 --> 00:01:38.540
Conditional breakpoint.

31
00:01:38.540 --> 00:01:42.180
So this is the entry point for our server.

32
00:01:42.180 --> 00:01:45.550
What I can do here is,
I'll say, edit breakpoint.

33
00:01:45.550 --> 00:01:47.720
And I've got two options here.

34
00:01:47.720 --> 00:01:49.630
An expression and a hit count.

35
00:01:49.630 --> 00:01:51.510
If I say hit count and

36
00:01:51.510 --> 00:01:56.760
I set this equal to, actually, let me
put this in a more reasonable place.

37
00:01:56.760 --> 00:01:58.820
This will only get hit once.

38
00:01:58.820 --> 00:02:06.620
So let's look in routes
&gt;&gt; Mike North: Grocery,

39
00:02:06.620 --> 00:02:09.780
you don't need to worry about this.

40
00:02:09.780 --> 00:02:12.450
Just watch along.

41
00:02:12.450 --> 00:02:14.480
Okay, so here getting categories.

42
00:02:14.480 --> 00:02:17.300
So this happens every time
the app is started up,

43
00:02:17.300 --> 00:02:19.470
its how we know what
the rows are gonna be.

44
00:02:20.600 --> 00:02:29.790
So I'll say, I want this break point
when it is equal to 3 to freeze, right?

45
00:02:29.790 --> 00:02:32.390
So the third time we hit this freeze.

46
00:02:32.390 --> 00:02:35.570
Has anyone tried to set a break
point inside a loop before?

47
00:02:35.570 --> 00:02:39.610
Where you're like, you have to hit next,
next, next, next, next, next, next.

48
00:02:39.610 --> 00:02:44.260
So here, you can say, you can look
through your list of items, and see, hey,

49
00:02:44.260 --> 00:02:49.150
looks like it's the 1,758th item in here.

50
00:02:49.150 --> 00:02:53.260
Let's say,
when our hit count is this, freeze.

51
00:02:53.260 --> 00:02:54.678
And it sort of will track that for you.

52
00:02:54.678 --> 00:02:58.370
So were gonna, oop,

53
00:02:58.370 --> 00:03:03.950
the address is in use, interesting,
based on the errors is here as well.

54
00:03:08.040 --> 00:03:12.673
Okay, so
lets killall node in case there is

55
00:03:12.673 --> 00:03:17.309
something lingering back there were gonna

56
00:03:17.309 --> 00:03:21.830
start it back up npm run debug:inspect.

57
00:03:21.830 --> 00:03:23.599
And then we're gonna
bring our debugger back

58
00:03:26.239 --> 00:03:29.391
&gt;&gt; Mike North: And attach.

59
00:03:29.391 --> 00:03:34.190
And you'll note that it starts with
the break point on the first line.

60
00:03:34.190 --> 00:03:36.260
This is to give us a chance to attach.

61
00:03:36.260 --> 00:03:37.930
It doesn't run away from us.

62
00:03:37.930 --> 00:03:40.500
And sort of waits to
start until we attach.

63
00:03:40.500 --> 00:03:43.817
So I'm gonna run.

64
00:03:43.817 --> 00:03:46.501
Something is still on 3000.

65
00:03:50.201 --> 00:03:51.160
&gt;&gt; Mike North: There you go.

66
00:03:56.084 --> 00:03:57.820
&gt;&gt; Mike North: Come on node,
why won't you die?

67
00:03:59.830 --> 00:04:00.683
It's too robust.

68
00:04:02.857 --> 00:04:03.988
&gt;&gt; Mike North: All right, once more.

69
00:04:06.106 --> 00:04:08.120
&gt;&gt; Mike North: Hey, no errors.

70
00:04:08.120 --> 00:04:13.020
Okay, so we're running, that's fun.

71
00:04:13.020 --> 00:04:19.584
We're gonna go to our app,
we're gonna refresh, what's going on here?

72
00:04:27.224 --> 00:04:30.650
&gt;&gt; Mike North: All right, I'm gonna
dial back type script a little bit.

73
00:04:30.650 --> 00:04:33.020
Feel free to do this in
your own thing as well.

74
00:04:34.400 --> 00:04:36.673
We'll allow that any type again.

75
00:04:39.355 --> 00:04:41.730
&gt;&gt; Mike North: Looks like I
left something, left a mess.

76
00:04:43.510 --> 00:04:44.426
My previous solution.

77
00:04:51.761 --> 00:04:54.070
&gt;&gt; Mike North: And it's still waiting.

78
00:04:54.070 --> 00:04:56.258
Gotta attach and run.

79
00:05:03.643 --> 00:05:06.548
&gt;&gt; Mike North: Nope, okay, it looks like
I'll have to fix this on the fly here.

80
00:05:06.548 --> 00:05:13.062
So home/index and
something is unhappy here.

81
00:05:16.110 --> 00:05:17.330
&gt;&gt; Mike North: Categories

82
00:05:27.601 --> 00:05:29.194
&gt;&gt; Mike North: And I left a c somewhere.

83
00:05:34.580 --> 00:05:36.039
&gt;&gt; Mike North: ArrayLike&lt;any&gt;

84
00:05:45.267 --> 00:05:46.047
&gt;&gt; Mike North: On line 29,

85
00:05:46.047 --> 00:05:47.350
what's going on here?

86
00:05:48.728 --> 00:05:49.325
Here we go

87
00:06:00.099 --> 00:06:01.535
&gt;&gt; Mike North: In here,

88
00:06:01.535 --> 00:06:07.098
we can say this.state.categories

89
00:06:07.098 --> 00:06:12.126
as Array, something like that.

90
00:06:12.126 --> 00:06:13.321
There we go, and we're back.

91
00:06:13.321 --> 00:06:18.070
Don't worry, I will have you
guys start working on this.

92
00:06:19.420 --> 00:06:21.840
Okay, so now it should work.

93
00:06:21.840 --> 00:06:30.280
And we're at a break point that I
had set earlier, ignore that please.

94
00:06:30.280 --> 00:06:35.140
Great, so now the app is loaded,
so that should be one time,

95
00:06:35.140 --> 00:06:38.320
two times, three times.

96
00:06:38.320 --> 00:06:39.250
Maybe we have to over shoot.

97
00:06:39.250 --> 00:06:40.810
I do not trust it anymore.

98
00:06:40.810 --> 00:06:46.860
I think we lost it through
our coded thing here.

99
00:06:46.860 --> 00:06:48.270
Let me double check real quick.

100
00:06:48.270 --> 00:06:55.605
Grocery
&gt;&gt; Mike North: Hit Count, I'll just do 2.

101
00:07:00.112 --> 00:07:05.030
&gt;&gt; Mike North: One, two, so
only on the second time we hit it.

102
00:07:05.030 --> 00:07:09.680
So that's the first one and here's
the other type of conditional break point.

103
00:07:09.680 --> 00:07:10.940
We can have an expression and

104
00:07:10.940 --> 00:07:16.010
when this expression evaluates true, only
then will we stop at this break point.

105
00:07:16.010 --> 00:07:20.240
So I can see right now, I've got context.

106
00:07:20.240 --> 00:07:25.080
Let's see, I can run some stuff
actually in this debug console

107
00:07:25.080 --> 00:07:30.200
to see what's going on, ctx.params,
let's see what that looks like.

108
00:07:30.200 --> 00:07:32.170
Not interesting query.

109
00:07:32.170 --> 00:07:33.194
That might be interesting.

110
00:07:39.563 --> 00:07:42.130
&gt;&gt; Mike North: This is a less
interesting one for that kind of thing.

111
00:07:42.130 --> 00:07:43.121
Let's do items.

112
00:07:49.189 --> 00:07:50.849
&gt;&gt; Mike North: Just looking for
an appropriate.

113
00:07:53.470 --> 00:07:54.490
Nope, this is wrong.

114
00:07:54.490 --> 00:08:00.520
Rout, it should be in here.

115
00:08:02.010 --> 00:08:04.070
Categories, there it is, items.

116
00:08:04.070 --> 00:08:09.310
Okay, so, we'll get rid of this
breakpoint, we're currently paused there,

117
00:08:09.310 --> 00:08:17.390
so here, I'm gonna stop here and
we will just freeze the first time.

118
00:08:17.390 --> 00:08:20.960
So here we got a query category is bakery.

119
00:08:20.960 --> 00:08:26.422
So I'm gonna edit the breakpoint and
say only when ctx.query,

120
00:08:30.835 --> 00:08:34.313
&gt;&gt; Mike North: Category is fruit,

121
00:08:34.313 --> 00:08:37.180
should we stop.

122
00:08:39.860 --> 00:08:42.480
Now we've stopped at 'fruit'.

123
00:08:42.480 --> 00:08:45.680
So that's like, only in this specific
situation should I freeze here.

124
00:08:45.680 --> 00:08:47.220
So that is a conditional breakpoint.

125
00:08:47.220 --> 00:08:52.563
You have support for
both of those in code.

126
00:08:54.350 --> 00:08:58.990
&gt;&gt; Mike North: So restart frame,
that is interesting.

127
00:08:58.990 --> 00:09:00.610
Let's see if we can make that work.

128
00:09:00.610 --> 00:09:04.284
Okay,
&gt;&gt; Mike North: Should,

129
00:09:04.284 --> 00:09:05.845
actually we got rid of that.

130
00:09:09.914 --> 00:09:13.776
&gt;&gt; Mike North: So the way that works is
you just pick one of these stack frames

131
00:09:13.776 --> 00:09:15.300
here in the call stack.

132
00:09:16.510 --> 00:09:22.340
So you see this represents handle
requests and then parse the body and

133
00:09:22.340 --> 00:09:26.970
this is sort of trickling all the way down
to finding the right function to use.

134
00:09:26.970 --> 00:09:31.940
Dispatch this thing to the appropriate
route, and then we finally got this.

135
00:09:31.940 --> 00:09:37.375
So if I wanted to stop up here, I can
actually click on this anonymous function.

136
00:09:37.375 --> 00:09:41.221
And say, restart frame.

137
00:09:44.632 --> 00:09:48.160
&gt;&gt; Mike North: And now,
I haven't actually made a new API call.

138
00:09:48.160 --> 00:09:50.790
I've kind of taken a little bit
of a step back in my debugger.

139
00:09:50.790 --> 00:09:55.810
I didn't have to refresh my browser,
it has sort of traveled back in time,

140
00:09:55.810 --> 00:09:56.770
keeping me frozen.

141
00:09:56.770 --> 00:10:00.060
And then, I could manipulate things and
play it forward.

142
00:10:00.060 --> 00:10:02.330
Really, really cool powerful thing.

143
00:10:02.330 --> 00:10:06.380
And you are only gonna get it when
you have a crack team working on your

144
00:10:06.380 --> 00:10:12.430
debugging tools, cuz these are specific
run time protocols that have to be used.

145
00:10:12.430 --> 00:10:15.710
And all of these different job
descript run times are optimized for

146
00:10:15.710 --> 00:10:16.260
different things.

147
00:10:16.260 --> 00:10:18.940
It is great that we have many of them,
right?

148
00:10:18.940 --> 00:10:21.990
Does things that V8 doesn't do yet.

149
00:10:21.990 --> 00:10:25.800
V8 does things the tracker
hasn't implemented yet.

150
00:10:25.800 --> 00:10:30.560
And then, we've got JS Core,
which is Safari's runtime.

151
00:10:30.560 --> 00:10:35.350
And it is really, really, really fast,
but it doesn't have some of the modern

152
00:10:35.350 --> 00:10:39.160
language features that
V8 has been pushing on.

153
00:10:39.160 --> 00:10:41.168
And then, we've got Servo coming up.

154
00:10:41.168 --> 00:10:44.348
Which is this new JavaScript runtime for

155
00:10:44.348 --> 00:10:47.902
the next generation of
Mozilla of Firefox and

156
00:10:47.902 --> 00:10:53.150
it is built with rust and
handles parallelism really really well.

157
00:10:53.150 --> 00:10:58.190
I mean, there believing engine
a totally different dimension here.

158
00:10:58.190 --> 00:11:02.144
So it's starting to get to the point where
it's not really generic debugging and

159
00:11:02.144 --> 00:11:05.518
we might have a use for hacking into
some of these specific features,

160
00:11:05.518 --> 00:11:08.152
cuz restarting a stack firm
is pretty freaking cool.

161
00:11:11.382 --> 00:11:16.197
&gt;&gt; Mike North: All right, moving on,
finally, i just wanted to say skipping

162
00:11:16.197 --> 00:11:21.180
code if you don't know what that is,
it's just black boxing where you

163
00:11:21.180 --> 00:11:26.880
would basically say if I didn't write
it don't step through it, right?

164
00:11:26.880 --> 00:11:32.240
This means you're not gonna dig deep
into React or into Express or something.

165
00:11:32.240 --> 00:11:37.650
This also like this may be
referred to as black boxing or

166
00:11:37.650 --> 00:11:42.300
a SmartStep is one of the terms
that the vscode team uses.

167
00:11:42.300 --> 00:11:46.350
It's just trying to let you, trying
to decide what is interesting to you.

168
00:11:46.350 --> 00:11:51.340
And to not take you like out into
the woods into your dependencies,

169
00:11:51.340 --> 00:11:55.190
because in that mode you would
say look I trust that they have

170
00:11:56.590 --> 00:12:00.440
a thousand tests for this library like,
that is probably working fine.

171
00:12:00.440 --> 00:12:04.840
I am working on something I no test for
yet, so let's step through my code and

172
00:12:04.840 --> 00:12:06.960
who we can have need to
go through their stuff.

