WEBVTT

1
00:00:00.440 --> 00:00:03.270
&gt;&gt; Mike North: So first I want to do
the best I can to convince you that

2
00:00:03.270 --> 00:00:04.810
Types are a good thing to use.

3
00:00:04.810 --> 00:00:09.530
Any time you can catch a bug at
compile time instead of run time,

4
00:00:10.640 --> 00:00:12.580
you are better off for that.

5
00:00:12.580 --> 00:00:14.480
You basically want things
that are gonna break.

6
00:00:14.480 --> 00:00:19.006
You want them to break hard and break
right now, so that you can identify them

7
00:00:19.006 --> 00:00:22.840
and fix them and those things
never make it out into production.

8
00:00:22.840 --> 00:00:27.050
And these type errors,
type mismatch errors,

9
00:00:27.050 --> 00:00:30.660
they happen all the time in JavaScript.

10
00:00:30.660 --> 00:00:34.160
They happen for
very experienced developers.

11
00:00:34.160 --> 00:00:40.000
They happen for people that are on the TC
39 like JavaScript's standards body.

12
00:00:40.000 --> 00:00:44.160
So this is not,
it will help catch newbie mistakes,

13
00:00:44.160 --> 00:00:48.880
this is a tool that will help
keep us honest and keep us

14
00:00:48.880 --> 00:00:53.720
writing things in a well defined way
regardless of level of experience.

15
00:00:54.900 --> 00:00:57.020
So Types provide a better
developer experience.

16
00:00:57.020 --> 00:01:01.158
It is not like all these little auto
complete hints you've been seeing pop

17
00:01:01.158 --> 00:01:02.034
up when I code.

18
00:01:02.034 --> 00:01:05.720
This is not magic from Visual Studio Code.

19
00:01:05.720 --> 00:01:10.489
It's just simply that we know exactly
when we're working with an object

20
00:01:10.489 --> 00:01:13.783
that that is a promise or
that's a window object.

21
00:01:13.783 --> 00:01:18.161
And it's not just an arbitrary JavaScript
thing and we're gonna see what happens

22
00:01:18.161 --> 00:01:22.770
when we run our code and hope that all
those properties that we need are there.

23
00:01:22.770 --> 00:01:25.780
We know what type it's gonna be,
and therefore,

24
00:01:25.780 --> 00:01:30.224
it's easy to use what is called this
TypeScript language service to say,

25
00:01:30.224 --> 00:01:34.472
okay, give me all of the functions
that are available on this object.

26
00:01:34.472 --> 00:01:36.880
Tell me what are the valid
completions here.

27
00:01:36.880 --> 00:01:41.626
And you can present that in the UI and
the IntelliSense like auto complete.

28
00:01:43.510 --> 00:01:47.680
Third point here is you want your code
to be an expression of your intent

29
00:01:47.680 --> 00:01:49.010
as a developer.

30
00:01:49.010 --> 00:01:51.839
So if I had this function here and

31
00:01:51.839 --> 00:01:56.950
I passed in two numbers, what do you
think that this function would do?

32
00:01:58.410 --> 00:02:00.810
That's a question for you.

33
00:02:00.810 --> 00:02:02.900
It's not a rhetorical question.

34
00:02:02.900 --> 00:02:05.840
So if I had a function add and
I pass in three and four,

35
00:02:05.840 --> 00:02:07.070
what would you expect to happen?

36
00:02:08.410 --> 00:02:09.240
&gt;&gt; Speaker 2: Add it together?

37
00:02:09.240 --> 00:02:10.130
&gt;&gt; Speaker 3: Three plus four.

38
00:02:10.130 --> 00:02:11.945
&gt;&gt; Mike North: We'd get seven, right?

39
00:02:11.945 --> 00:02:13.095
We'd be doing arithmetic.

40
00:02:13.095 --> 00:02:18.323
Now if I had a function like that and I
passed in as the first argument, an array,

41
00:02:18.323 --> 00:02:23.642
and the second argument I parse like an
object, what might you expect to happen?

42
00:02:25.917 --> 00:02:28.648
&gt;&gt; Mike North: I think, maybe we should
concat that item into the array,

43
00:02:28.648 --> 00:02:30.630
we should push it into the array.

44
00:02:30.630 --> 00:02:34.834
So this here, this is a poor
expression of an intent, right?

45
00:02:34.834 --> 00:02:38.773
This, without knowing what
types of objects these are,

46
00:02:38.773 --> 00:02:40.751
this is ambiguous, right?

47
00:02:40.751 --> 00:02:44.280
This could mean there are multiple
interpretations of add.

48
00:02:44.280 --> 00:02:46.930
There are multiple
interpretations of remove.

49
00:02:46.930 --> 00:02:51.900
And so being able to say,
this function is called add,

50
00:02:51.900 --> 00:02:55.440
and, well, first of all,
I've picked terrible variable names here.

51
00:02:55.440 --> 00:02:57.820
That's mostly what we do
as JavaScript developers.

52
00:02:57.820 --> 00:03:03.640
We might try to add some better
intent here by saying add, and

53
00:03:03.640 --> 00:03:08.990
then the first argument's array, and the
second argument is item to add into array.

54
00:03:08.990 --> 00:03:10.060
Something like that.

55
00:03:10.060 --> 00:03:11.430
But just adding the types there,

56
00:03:11.430 --> 00:03:14.770
that would help us understand, all right,
this is what we're working with here.

57
00:03:14.770 --> 00:03:17.030
This is what I should be passing in here.

58
00:03:17.030 --> 00:03:21.547
Even for options objects,
if you've ever used Fetch or Ajax,

59
00:03:21.547 --> 00:03:26.010
you're passing a URL as a first argument,
that's pretty straightforward.

60
00:03:26.010 --> 00:03:29.093
But then you have this options object and
we don't know, you have to go and

61
00:03:29.093 --> 00:03:32.195
look at the documentation to figure
out what are all the properties here.

62
00:03:32.195 --> 00:03:35.487
Like is there a well defined structure for
this object and

63
00:03:35.487 --> 00:03:37.750
if so what am I allowed to use?

64
00:03:37.750 --> 00:03:39.470
If we have Types, then we say, okay,

65
00:03:39.470 --> 00:03:45.090
well, somewhere in code it is
the structure of this object is defined.

66
00:03:45.090 --> 00:03:48.630
Show me that, right click on it,
show me the type definition.

67
00:03:48.630 --> 00:03:51.600
Like, now we know exactly what
this is designed to receive.

68
00:03:53.710 --> 00:03:59.760
So, it goes a long way in terms of
helping us build more intent into code.

69
00:03:59.760 --> 00:04:02.812
I don't remember, I wish I could credit
the person that I heard this from,

70
00:04:02.812 --> 00:04:03.743
I don't remember it.

71
00:04:03.743 --> 00:04:09.964
But there's a nice quote I like which is,
the signature of your function,

72
00:04:09.964 --> 00:04:16.384
this what you're seeing on your screen,
that is almost like a hypothesis and

73
00:04:16.384 --> 00:04:22.310
the implementation of the function
is the proof that it works.

74
00:04:22.310 --> 00:04:26.775
So, you need to have a well defined
statement of what you're trying to do

75
00:04:26.775 --> 00:04:31.590
in order for there to be any hope with it
like people are going to use it properly.

76
00:04:33.470 --> 00:04:38.665
Finally, you by writing things in
a way that is aligned with a strongly

77
00:04:38.665 --> 00:04:42.830
typed language, you avoid situations
where your code can be de-optimized.

78
00:04:42.830 --> 00:04:46.850
And I could go much deeper
into this topic, but

79
00:04:46.850 --> 00:04:49.770
let me do the best I can to see
if we can just touch on it.

80
00:04:49.770 --> 00:04:54.960
So let's look at one popular,
modern JavaScript runtime, Chrome,

81
00:04:54.960 --> 00:04:57.790
or the V8 engine inside
Chrome more specifically.

82
00:04:57.790 --> 00:05:00.280
That's where your JavaScript runs.

83
00:05:00.280 --> 00:05:05.388
So there are two pieces of
program machinery inside Chrome,

84
00:05:05.388 --> 00:05:11.714
one is called ignition and that is
an interpreter for JavaScript, right?

85
00:05:11.714 --> 00:05:16.042
It works the way all interpreters work in
that it takes your source code directly

86
00:05:16.042 --> 00:05:20.048
and basically like statement by statement,
expression by expression,

87
00:05:20.048 --> 00:05:24.390
it's going to build things up as it goes
and execute what you told it to execute.

88
00:05:25.540 --> 00:05:30.370
If your code is found to be
reliably behaving in the same way.

89
00:05:30.370 --> 00:05:34.210
Meaning, it's an object that has
consistent properties on it,

90
00:05:34.210 --> 00:05:37.500
it always has the same
names of properties and

91
00:05:37.500 --> 00:05:40.740
the values of those properties
are always of the same type.

92
00:05:40.740 --> 00:05:44.640
We would actually call this the shape
of this object is the same.

93
00:05:44.640 --> 00:05:48.160
Where shape simply means,
names of properties, and

94
00:05:48.160 --> 00:05:50.330
the types of the values
of those properties.

95
00:05:50.330 --> 00:05:54.410
If that's found to be consistent,
your code gets promoted into this second,

96
00:05:54.410 --> 00:05:58.600
faster piece of the V8 run time and
it's called Turbo Fan.

97
00:05:58.600 --> 00:06:01.720
And that is a compiler for JavaScript.

98
00:06:01.720 --> 00:06:05.480
It actually takes your JavaScript and
makes assembly code out of it.

99
00:06:05.480 --> 00:06:11.200
That runs right on the architecture that
that particular browser is built for.

100
00:06:11.200 --> 00:06:13.890
And it ends up running a lot faster,
right?

101
00:06:13.890 --> 00:06:17.830
Compiled code is a lot faster in
general than interpreted code.

102
00:06:17.830 --> 00:06:19.924
So, you're in the fast lane now.

103
00:06:19.924 --> 00:06:25.120
We would call this code hot, like this
is a hot function, it is now optimized.

104
00:06:25.120 --> 00:06:29.990
If you break the rules once,
if you basically like change the type of

105
00:06:29.990 --> 00:06:33.890
one of those values and now you sort
of break with the assumptions or

106
00:06:33.890 --> 00:06:39.130
break, you deviate from that consistent
behavior that got you into the fast lane,

107
00:06:39.130 --> 00:06:41.110
you're back into slow lane again.

108
00:06:41.110 --> 00:06:43.080
And potentially code that's around that,

109
00:06:43.080 --> 00:06:45.780
that's using it,
also back in the slow lane.

110
00:06:45.780 --> 00:06:47.250
And it becomes de-optimized.

111
00:06:47.250 --> 00:06:50.660
And you're in the penalty
box basically forever.

112
00:06:50.660 --> 00:06:54.600
I mean, until the next page load, until
you basically start the program again.

113
00:06:54.600 --> 00:07:00.750
So, writing code in a strongly typed
way where you're forced, you basically

114
00:07:00.750 --> 00:07:06.250
get errors or warnings whenever you add
a property that wasn't there before,

115
00:07:06.250 --> 00:07:10.540
or you change the type of the value of
a property, you want to get those errors.

116
00:07:10.540 --> 00:07:15.080
You want to detect those
while you're developing so

117
00:07:15.080 --> 00:07:20.033
that your code is more likely
to remain in this fast lane,

118
00:07:20.033 --> 00:07:24.175
in this optimized compiler and
to not fall out.

119
00:07:26.486 --> 00:07:30.287
&gt;&gt; Mike North: So when you're optimized,
even the assembly that's used to sort of

120
00:07:30.287 --> 00:07:34.678
set up the initial function invocation,
maybe it's just taking arguments and

121
00:07:34.678 --> 00:07:39.068
making them available on the particular
names and sort of allocating memory for

122
00:07:39.068 --> 00:07:40.220
the closure.

123
00:07:40.220 --> 00:07:43.130
That assembly code is actually cached and
reused over and

124
00:07:43.130 --> 00:07:48.210
over and over for repeated function
invocations or repeated use of an object.

125
00:07:48.210 --> 00:07:52.880
So you kinda get the benefit of
caching and reusing stuff, and

126
00:07:52.880 --> 00:07:56.620
you're dealing with compiled code,
not interpreted code.

127
00:07:56.620 --> 00:08:01.696
So you want to be strongly typed, or
consistent use of property names and

128
00:08:01.696 --> 00:08:07.121
types will get you into a position where
you're more likely to be optimized.

129
00:08:07.121 --> 00:08:08.006
Yes?
&gt;&gt; Speaker 4: You might have a question in

130
00:08:08.006 --> 00:08:08.840
chat you haven't addressed.

131
00:08:08.840 --> 00:08:10.302
&gt;&gt; Mike North: Question from chat.

132
00:08:10.302 --> 00:08:13.290
So why does ES6 not support Types?

133
00:08:13.290 --> 00:08:18.106
Simple answer there is ES6 is
designed to be a super set of ES5.

134
00:08:18.106 --> 00:08:25.690
And adding Types in that is not
backwards compatible, really.

135
00:08:25.690 --> 00:08:30.440
And for that matter, it would be changing
the fundamental nature of JavaScript,

136
00:08:30.440 --> 00:08:32.000
which you really can't do.

137
00:08:32.000 --> 00:08:36.410
So in order for ES6 to just be
a collection of features that are added

138
00:08:36.410 --> 00:08:41.430
on top of ES5, for it to be just the next
version of the same programming language,

139
00:08:41.430 --> 00:08:44.800
we can't really add Types to it.

140
00:08:44.800 --> 00:08:51.600
Now remember, there are Types in ES6 but
it is a dynamically typed language.

141
00:08:51.600 --> 00:08:54.190
There are no strong Types, right?

142
00:08:54.190 --> 00:08:58.530
Which is why we can have an array and
put two strings and then a number and

143
00:08:58.530 --> 00:09:01.480
then a function, and then another array,
and then the window object.

144
00:09:01.480 --> 00:09:05.450
That can all exist quite
happily in the same array.

145
00:09:05.450 --> 00:09:09.100
So we want to make sure that when we say,
next generation of JavaScript,

146
00:09:09.100 --> 00:09:15.480
we are not crossing a line and
saying that that's not okay anymore.

147
00:09:15.480 --> 00:09:18.900
It may be that it is not okay anymore,
if you want your code to be fast.

148
00:09:18.900 --> 00:09:23.130
But we can't make that
disruptive change to JavaScript.

