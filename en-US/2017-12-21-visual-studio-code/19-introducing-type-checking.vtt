WEBVTT

1
00:00:00.250 --> 00:00:04.840
&gt;&gt; Mike North: So we're going to dive into
the next area of using visual studio code.

2
00:00:04.840 --> 00:00:08.600
And what we're about to talk
about is type checking.

3
00:00:08.600 --> 00:00:12.670
So Javascript is it as well as called
the dynamically typed language and

4
00:00:12.670 --> 00:00:15.450
that basically means we
start worrying about

5
00:00:15.450 --> 00:00:21.020
the types of things only when we
encounter like we're about to use it.

6
00:00:21.020 --> 00:00:23.290
Right, so you get a value and
you try to do something with it.

7
00:00:24.710 --> 00:00:27.410
Up until that point we don't
care about the types of things.

8
00:00:27.410 --> 00:00:31.070
Types exist, if you've ever used type of,

9
00:00:31.070 --> 00:00:35.830
you can see like there's some things
undefined or a function or a strength.

10
00:00:35.830 --> 00:00:37.750
So it's not untyped.

11
00:00:37.750 --> 00:00:42.520
I mean, people use that word but really
it's dynamically tight or duck tight.

12
00:00:44.160 --> 00:00:48.270
So let's talk a little
bit about type checking

13
00:00:48.270 --> 00:00:53.010
as it pertains to the modern web and
Javascript these days.

14
00:00:53.010 --> 00:00:54.500
Let me bump my phone up a little bit.

15
00:00:56.750 --> 00:00:58.650
So Visual Studio Code.

16
00:00:58.650 --> 00:01:01.410
It is written mostly in TypeScript and

17
00:01:01.410 --> 00:01:04.460
TypeChecking in general has
become really popular as of late.

18
00:01:05.780 --> 00:01:10.130
So if you've used react before and
gone through the official tutorials,

19
00:01:10.130 --> 00:01:15.920
you will see that proptypes was formerly
part of the react library as a whole.

20
00:01:15.920 --> 00:01:18.630
It's been refactored out
into another library now.

21
00:01:18.630 --> 00:01:22.080
But this did what is called
run time typechecking.

22
00:01:22.080 --> 00:01:24.460
So if you pass things to a component,

23
00:01:24.460 --> 00:01:28.790
the types of those things that you passed
to the component are verified to make sure

24
00:01:28.790 --> 00:01:32.770
that you have alignment with what
that component is aligned to receive.

25
00:01:32.770 --> 00:01:36.320
Facebook also has a project called flow.

26
00:01:36.320 --> 00:01:41.918
And if you watch Brian Holt's
Complete Introduction to React,

27
00:01:41.918 --> 00:01:45.410
version three, I believe this uses flow.

28
00:01:45.410 --> 00:01:51.360
And this is static type checking, which
is similar to what TypeScript gives us.

29
00:01:51.360 --> 00:01:55.630
And TypeScript, of course it's
a programming language and a library.

30
00:01:56.790 --> 00:01:59.650
That is built and maintained by Microsoft.

31
00:01:59.650 --> 00:02:04.200
And one of the advantages of static
type checking is there is no cost when

32
00:02:04.200 --> 00:02:06.050
your program is actually running.

33
00:02:06.050 --> 00:02:11.130
This is sort of, it's an advantage
in terms of making sure that

34
00:02:11.130 --> 00:02:16.030
this eventual product of our
programming efforts is fast and

35
00:02:16.030 --> 00:02:20.390
it ends up like having no
extra weight added to it.

36
00:02:20.390 --> 00:02:25.630
But it also comes with a disadvantage
that we can only do so

37
00:02:25.630 --> 00:02:27.430
much with static analysis.

38
00:02:27.430 --> 00:02:32.020
Static analysis really doesn't it doesn't
tell us the full set of things that

39
00:02:32.020 --> 00:02:34.190
could potentially go wrong with our code.

40
00:02:34.190 --> 00:02:38.950
Just kinda looking at all of the obvious
usages without worrying about

41
00:02:38.950 --> 00:02:42.440
all of the particular,
like paths that we can take through all

42
00:02:42.440 --> 00:02:45.620
the different functions and all
the different objects of our code, right?

43
00:02:45.620 --> 00:02:48.170
You need dynamic analysis for that.

44
00:02:48.170 --> 00:02:53.370
So, We're gonna be talking mostly
about type script today but

45
00:02:53.370 --> 00:02:58.520
these concepts, this hold true for
anything that cares about types.

46
00:02:58.520 --> 00:03:02.980
A lot of what we're gonna be dealing with
today holds up equally well when dealing

47
00:03:02.980 --> 00:03:10.490
with something like flow or closure
compiler that is an old Google project for

48
00:03:10.490 --> 00:03:15.620
taking some raw JavaScript and
creating a minified, optimized build.

49
00:03:15.620 --> 00:03:19.240
There are signs that it's sort of coming
back and that a rewrite is underway, and

50
00:03:19.240 --> 00:03:22.770
that we might see a reboot
of closure compiler.

51
00:03:22.770 --> 00:03:25.780
But that also involved
adding type information,

52
00:03:25.780 --> 00:03:29.749
so there was potential to
optimize in type-specific ways.

53
00:03:31.190 --> 00:03:35.720
So type script is,
I say it's a tight superset of JavaScript,

54
00:03:35.720 --> 00:03:42.730
meaning that by default, most JavaScript
will work, as long as it can be kind of

55
00:03:42.730 --> 00:03:47.920
interpreted in a strongly typed way,
most JavaScript expressions will work.

56
00:03:47.920 --> 00:03:53.500
There are some that won't, for example,
if you had the number five double equals

57
00:03:53.500 --> 00:03:57.710
the string with the number five in it,
in a strongly-typed world,

58
00:03:57.710 --> 00:04:02.120
there's really no way to deal with
that kind of comparison, right?

59
00:04:02.120 --> 00:04:05.160
In the strongly-typed world,
that's apples and oranges.

60
00:04:05.160 --> 00:04:06.480
Its strings and numbers.

61
00:04:07.870 --> 00:04:14.750
So type script relies heavily on type
inference which basically starts with

62
00:04:14.750 --> 00:04:19.760
some of the most obvious to determined
types in your code and expands that

63
00:04:19.760 --> 00:04:25.720
information outward in order to figure
out larger higher level type information.

64
00:04:25.720 --> 00:04:32.480
For example, if you say I have a variable
x and that it's initial value is 65,

65
00:04:32.480 --> 00:04:37.850
we can say well yes,
that has a type of number.

66
00:04:37.850 --> 00:04:41.720
And if we have a function that eventually
returns that, we can say okay,

67
00:04:41.720 --> 00:04:44.010
well this function returns a number.

68
00:04:44.010 --> 00:04:46.880
We can kind of like expand out relay and

69
00:04:46.880 --> 00:04:52.770
use some explicit type information that
we can get some you know value literal

70
00:04:52.770 --> 00:04:57.510
to you know then determine like
what's going on with this function,

71
00:04:57.510 --> 00:05:02.750
what's going on with object and
you know detect and deduce.

72
00:05:02.750 --> 00:05:07.240
What various types may be
involved in other places.

73
00:05:07.240 --> 00:05:12.002
So an important part of this were these
type definitions that we've been looking

74
00:05:12.002 --> 00:05:19.640
at, .d.ts files where we had
the DOM API and we had object.freeze.

75
00:05:19.640 --> 00:05:21.490
We looked at that type definition.

76
00:05:21.490 --> 00:05:24.780
So this also,
whenever you use one of those,

77
00:05:24.780 --> 00:05:29.610
that immediately gives TypeScript
a clue as to like how this might

78
00:05:29.610 --> 00:05:32.380
be used cuz those functions
were turn a particular type or

79
00:05:32.380 --> 00:05:37.650
they take a certain type of argument and
like deductions can be made there.

80
00:05:37.650 --> 00:05:43.660
One of the core missions of type script
is you opt in to a type system here.

81
00:05:43.660 --> 00:05:48.990
It is not a situation where you need
to like rewrite all of your code.

82
00:05:48.990 --> 00:05:54.250
The hope is, one of the happy paths
to starting to use type script,

83
00:05:54.250 --> 00:05:59.095
is you take you JS files,
you rename them to .ts files.

84
00:05:59.095 --> 00:06:03.585
Files so they're type script and
most of your code should work right away.

85
00:06:03.585 --> 00:06:08.445
Now you may get a ton of warnings and
you may need to supply clues where

86
00:06:08.445 --> 00:06:13.475
type inference is not enough to figure
out what's going on but it shouldn't

87
00:06:13.475 --> 00:06:18.655
be a situation where you must go through
and explicitly define as much as possible.

88
00:06:20.000 --> 00:06:24.390
So this here as Typescript 2.3
which was only a couple months ago,

89
00:06:26.360 --> 00:06:31.570
visual studio code can apply this
type analysis to regular Javascript.

90
00:06:31.570 --> 00:06:34.060
You don't need to be
using type script files.

91
00:06:34.060 --> 00:06:36.860
It will make as much sense as it can.

92
00:06:36.860 --> 00:06:41.400
Out of your regular Javascript and we can
add comments in a way that are not going

93
00:06:41.400 --> 00:06:45.200
to disrupt treating these
files as regular Javascript.

94
00:06:45.200 --> 00:06:50.990
So if you have an existing project and
maybe some subset of your code

95
00:06:50.990 --> 00:06:54.450
is particularly complex and

96
00:06:54.450 --> 00:06:59.610
type information would go a long way in
order to like maintain order in that area.

97
00:06:59.610 --> 00:07:04.076
Maintain like that you're doing
things in a consistent way.

98
00:07:04.076 --> 00:07:09.320
You can up in to, using type
analysis in that are of your code

99
00:07:09.320 --> 00:07:14.160
without having to bring in the TypeScript
compiler to process your files and to

100
00:07:14.160 --> 00:07:19.140
like you now have the whole rest of your
team learn a new programming language.

101
00:07:19.140 --> 00:07:24.290
It's just comments, it's just inert
stuff that is not technically code,

102
00:07:24.290 --> 00:07:27.270
it's just sort of clues around your code.

103
00:07:27.270 --> 00:07:29.140
So we're gonna use these JSDoc comments.

104
00:07:29.140 --> 00:07:34.320
And Closure Compiler also uses
JSDoc comments, so this is another

105
00:07:34.320 --> 00:07:38.910
example of like Let's adapt an existing
standard, an existing way of doing things.

106
00:07:38.910 --> 00:07:43.160
Closing compiler,
I was using it last 2007, 2008 so

107
00:07:43.160 --> 00:07:48.880
that's been about ten years and
it still works so let's keep using it.

108
00:07:48.880 --> 00:07:52.550
We don't need a new method
to do this kind of thing.

