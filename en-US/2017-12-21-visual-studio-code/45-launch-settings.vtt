WEBVTT

1
00:00:00.470 --> 00:00:04.170
&gt;&gt; Mike North: So we've already dealt
with launch configuration it turns out.

2
00:00:04.170 --> 00:00:06.040
We dealt with that when we were debugging.

3
00:00:06.040 --> 00:00:09.590
There where two there waiting for you,
once was for Chrome, one was or node.

4
00:00:09.590 --> 00:00:13.611
And they were the ability to sort
of either start an app up or

5
00:00:13.611 --> 00:00:18.223
attach to a running app and
to potentially like debug in that mode.

6
00:00:18.223 --> 00:00:20.980
Launch.json is the file
where this is define.

7
00:00:20.980 --> 00:00:25.880
It's in your .vscode
Settings that vscode folder.

8
00:00:25.880 --> 00:00:28.710
Usually, it's something you want
to check in with your project.

9
00:00:30.400 --> 00:00:34.320
So, I promised that I would break
down exactly what's going on here and

10
00:00:34.320 --> 00:00:37.080
let's go ahead and do it line by line.

11
00:00:37.080 --> 00:00:41.150
So, the first here, type node.

12
00:00:41.150 --> 00:00:43.130
That tells us which debugger to use.

13
00:00:43.130 --> 00:00:46.250
So you have one launch configuration
that's subtype Chrome.

14
00:00:46.250 --> 00:00:47.780
Ones that have type node.

15
00:00:47.780 --> 00:00:51.950
They've done a really good job without
distraction away any job description here.

16
00:00:51.950 --> 00:00:56.670
So that means you can install that go like
debugger it's an extension that you can

17
00:00:56.670 --> 00:01:01.990
install and you can debug go or you can
install the Ruby debugger and debug Ruby.

18
00:01:01.990 --> 00:01:06.270
It's a very generic thing that can
support a wide range of languages.

19
00:01:06.270 --> 00:01:12.290
So the request has to do with,
now that we know our debugger type,

20
00:01:12.290 --> 00:01:16.960
how are we,
what is the mode of operation here?

21
00:01:16.960 --> 00:01:22.190
Are we asking to start an app up, or
are we attaching to a running app?

22
00:01:22.190 --> 00:01:23.440
That is what request means.

23
00:01:24.840 --> 00:01:26.160
The name, that's for you.

24
00:01:26.160 --> 00:01:29.161
That's so that you can see in
your menus what this is called.

25
00:01:29.161 --> 00:01:33.964
SourceMaps tells this launch
configuration that when you're

26
00:01:33.964 --> 00:01:38.677
setting breakpoints it should
basically use the sourcemap to

27
00:01:38.677 --> 00:01:43.220
figure of what really what line
should we break on, right?

28
00:01:43.220 --> 00:01:48.010
So that's a Visual Studio Code thing,
so that it can do that

29
00:01:48.010 --> 00:01:52.610
transformation before asking the debugger
to set a breakpoint on a particular line.

30
00:01:52.610 --> 00:01:55.890
And in this case that's important because,
at least for

31
00:01:55.890 --> 00:01:59.790
Chrome, like we're not running
typescript in the browser,

32
00:01:59.790 --> 00:02:02.260
but plenty of that app is
written in typescript, so

33
00:02:02.260 --> 00:02:07.580
source maps are what sort of allow us to
say, in my original code it was this line,

34
00:02:07.580 --> 00:02:11.000
we can go through that source map and
it'll say, well that was five lines lower

35
00:02:11.000 --> 00:02:14.810
down in the eventual code that's running
in the browser, so we'll stop there.

36
00:02:16.250 --> 00:02:21.429
The port this is usually standard
on a path debugger basis 9229,

37
00:02:21.429 --> 00:02:27.338
is the standard, is the default for
the new node, you know debugging scheme.

38
00:02:27.338 --> 00:02:31.655
And then finally we've got protocol
here that tells us we wanna use

39
00:02:31.655 --> 00:02:36.126
the smarter protocol not the old
legacy stuff that was dropped in node

40
00:02:36.126 --> 00:02:42.160
8.
&gt;&gt; Mike North: So we talked about type.

41
00:02:42.160 --> 00:02:43.360
It's node or chrome.

42
00:02:43.360 --> 00:02:45.550
You can others via extensions.

43
00:02:45.550 --> 00:02:50.085
Run time executable, we don't have this
in our launch configuration yet But

44
00:02:50.085 --> 00:02:52.815
this has to do with anything
that might have a run time.

45
00:02:52.815 --> 00:02:54.025
Like JavaScript.

46
00:02:54.025 --> 00:02:58.085
It's not like a C++ built thing
where we can just run an executable

47
00:02:58.085 --> 00:03:02.495
that's been compiled for our system and
we can just let it grip.

48
00:03:02.495 --> 00:03:04.383
We say no [INAUDIBLE].

49
00:03:04.383 --> 00:03:05.965
Please start.

50
00:03:05.965 --> 00:03:08.205
And here is the program which I wish for
you to run.

51
00:03:08.205 --> 00:03:10.630
That's how we know there's
a run time involved

52
00:03:10.630 --> 00:03:13.980
right we pass this program
to something and it runs.

53
00:03:13.980 --> 00:03:17.790
So a great example of like when
you might want to customize this,

54
00:03:17.790 --> 00:03:21.670
sometimes there is a different
flavor of mode you want to run in.

55
00:03:21.670 --> 00:03:26.360
And for example we have got something
called available in this project.

56
00:03:26.360 --> 00:03:32.560
Which will on a line by line basis
as a program is read Transform your

57
00:03:32.560 --> 00:03:38.730
typescript into JavaScript,
giving you a typescript like node jazz.

58
00:03:38.730 --> 00:03:42.962
Babble has the same thing, if you wanna
use like ultra modern JavaScript language

59
00:03:42.962 --> 00:03:47.007
features, potentially in an older
version of node, you can use Babbelnode,

60
00:03:47.007 --> 00:03:49.538
which'll do that conversion for
you on the fly.

61
00:03:49.538 --> 00:03:52.669
And that effectively is you saying,
I have a different run time,

62
00:03:52.669 --> 00:03:55.410
a slightly customized run
time that I wanna use.

63
00:03:55.410 --> 00:04:00.070
For running this program and then usually
when you specify run time like this,

64
00:04:00.070 --> 00:04:05.360
you want to say here is the program that
I want to run as opposed to just breaking

65
00:04:05.360 --> 00:04:09.790
it up to a command that you running
which is the whole thing in one shot.

66
00:04:12.160 --> 00:04:15.920
And one of the reasons is if
you have restart set to true,

67
00:04:15.920 --> 00:04:18.920
you can actually have your app.

68
00:04:18.920 --> 00:04:22.370
Like, whenever you hit a break point or
something.

69
00:04:22.370 --> 00:04:24.090
Sorry, better to say.

70
00:04:25.320 --> 00:04:29.770
Like whenever the app dies you
basically try to restart it again.

71
00:04:29.770 --> 00:04:32.920
An example would be, if you were
attaching to your note process and

72
00:04:32.920 --> 00:04:38.570
you managed to crash it somehow
Your session is done, you're over.

73
00:04:38.570 --> 00:04:40.260
Or if you hit that restart button,

74
00:04:40.260 --> 00:04:43.420
turns out that you were not
necessarily attached to it anymore.

75
00:04:43.420 --> 00:04:46.970
If we said restart true,
you would basically say, okay,

76
00:04:46.970 --> 00:04:48.850
attach to this process.

77
00:04:48.850 --> 00:04:52.680
And then as soon as that node
thing you were attached to dies

78
00:04:52.680 --> 00:04:57.450
your VS code is still there listening
on that port for the next sign of life.

79
00:04:57.450 --> 00:05:01.070
And as Node comes back up,
it'll attack again to it.

80
00:05:01.070 --> 00:05:04.640
So it kind of lets you,
as you're iterating on code, inevitably,

81
00:05:04.640 --> 00:05:08.070
you will crash something,
because you're writing code.

82
00:05:08.070 --> 00:05:09.720
You have an incomplete function.

83
00:05:09.720 --> 00:05:11.130
You accidentally save.

84
00:05:11.130 --> 00:05:17.200
This will stop you from having to spin
up everything again and start again.

85
00:05:17.200 --> 00:05:21.520
It just constantly wants to,
whenever something goes wrong,

86
00:05:21.520 --> 00:05:24.810
start back up again and
try to get into a listening mode.

87
00:05:27.410 --> 00:05:32.130
So Console Options,
this let's us tell Code where to put

88
00:05:32.130 --> 00:05:36.840
the output of this task that we're running
by default, you get integrated terminal.

89
00:05:36.840 --> 00:05:40.550
You could have output go
to the external terminal.

90
00:05:40.550 --> 00:05:44.980
So, I heard some comments about people
that somehow you're running VS code,

91
00:05:44.980 --> 00:05:48.330
and another terminal popped up,
and they saw their output there.

92
00:05:48.330 --> 00:05:48.860
This could be,

93
00:05:48.860 --> 00:05:51.670
this could have to do with that if
you have external terminals set up.

94
00:05:52.710 --> 00:05:56.740
The integrated console that's
just a different panel down here.

95
00:05:56.740 --> 00:06:00.301
It's just DEBUG CONSOLE verses the
TERMINAL like, where do you want you're

96
00:06:00.301 --> 00:06:05.026
output showing up?
&gt;&gt; Mike North: So

97
00:06:05.026 --> 00:06:10.380
finally this option here tells
tells code how you want that?

98
00:06:10.380 --> 00:06:13.160
Now that we've said we want
the output to go in this space,

99
00:06:13.160 --> 00:06:14.450
how do we treat opening it?

100
00:06:14.450 --> 00:06:16.890
Do we never open it?

101
00:06:16.890 --> 00:06:21.030
If it were still open, it would stay open,
but when we execute this task,

102
00:06:21.030 --> 00:06:23.620
do we wanna pop up the terminal?

103
00:06:23.620 --> 00:06:28.050
And if so, do we wanna pop it open
every single time we restart, or

104
00:06:28.050 --> 00:06:29.940
is it just the first
time we want to do it?

105
00:06:29.940 --> 00:06:31.320
So that's what this option's about.

106
00:06:33.220 --> 00:06:34.980
We've already dealt with
some of these here.

107
00:06:34.980 --> 00:06:38.870
Arguments that is taking care
of the quoting properly.

108
00:06:38.870 --> 00:06:41.950
You can pass environment
variables with env and

109
00:06:41.950 --> 00:06:44.630
we did mention current working directory.

110
00:06:44.630 --> 00:06:47.790
Here are all of the variables
that you can pass in

111
00:06:47.790 --> 00:06:50.890
this is straight copy pasted from
the VS Code documentation so

112
00:06:50.890 --> 00:06:55.480
you can look there if in doubt but
these all can be treated as

113
00:06:55.480 --> 00:06:59.340
placeholders that are sort of evaluated
right at the moment you run your task.

114
00:06:59.340 --> 00:07:02.120
And you can see, some of these
like the current opened file,

115
00:07:02.120 --> 00:07:03.850
that third bullet point down.

116
00:07:03.850 --> 00:07:09.490
That is for task that are oriented
towards working on something that is,

117
00:07:09.490 --> 00:07:13.810
learning in the context of
the current line on the current file.

118
00:07:15.120 --> 00:07:22.510
Potentially you could have
contextually important tasks

119
00:07:22.510 --> 00:07:27.370
that are run in that way so you get all
that information, even the line number.

