WEBVTT

1
00:00:00.060 --> 00:00:03.760
&gt;&gt; Mike North: Lets talk about
functions a little bit and just as

2
00:00:03.760 --> 00:00:08.610
JavaScript treats functions as first class
value types and so that doesnt change.

3
00:00:08.610 --> 00:00:14.450
One of the more interesting things we can
do with functions as it pertains to types

4
00:00:14.450 --> 00:00:19.400
is we can define the kinds of
arguments we expect to get.

5
00:00:19.400 --> 00:00:21.010
And so we have an array here and

6
00:00:21.010 --> 00:00:26.790
we're saying I expect this to be
the type of mouse listeners is an array,

7
00:00:26.790 --> 00:00:29.410
coz that's what this little
thing here over here means.

8
00:00:29.410 --> 00:00:35.960
It's an array of functions, each of which
takes us an argument a mouse event.

9
00:00:35.960 --> 00:00:37.620
So we can call this a mouse listener.

10
00:00:38.860 --> 00:00:44.070
And then down here you can see like,
we have naively attempted to hook

11
00:00:44.070 --> 00:00:49.160
these functions up in such a way that
this key press event, when it's fired,

12
00:00:49.160 --> 00:00:54.390
we're gonna take this array
of mouse listeners and

13
00:00:54.390 --> 00:00:59.420
whatever event we get here we're gonna try
to invoke each mouse listener with that.

14
00:00:59.420 --> 00:01:02.810
But a key press that's gonna
give us a keyboard event.

15
00:01:02.810 --> 00:01:08.920
So here TypeScript will tell us, whoa
you said you were expecting this type,

16
00:01:08.920 --> 00:01:11.650
now you're trying to invoke
the function with a different type.

17
00:01:11.650 --> 00:01:12.758
Those are not equivalent.

18
00:01:12.758 --> 00:01:15.591
Stop, fix it.

19
00:01:18.310 --> 00:01:22.598
So here it's like you're saying the first
piece of information you get is,

20
00:01:22.598 --> 00:01:29.070
we couldn't like basically take a keyboard
event and regard it as a mouse event.

21
00:01:29.070 --> 00:01:32.510
We couldn't,
because some structure was not there.

22
00:01:32.510 --> 00:01:35.580
And then the second line here
tells us exactly the first

23
00:01:35.580 --> 00:01:37.590
problem that it ran into.

24
00:01:37.590 --> 00:01:38.400
And it's the button.

25
00:01:38.400 --> 00:01:42.880
There's a button property
on the mouse event object.

26
00:01:42.880 --> 00:01:45.960
That is not on the keyboard event.

27
00:01:48.150 --> 00:01:52.460
A more abbreviated way to represent
functions is through arrow functions here.

28
00:01:52.460 --> 00:01:55.640
This looks much nicer to my eyes here.

29
00:01:55.640 --> 00:01:57.210
This would say.

30
00:01:57.210 --> 00:01:59.500
We have a type called requestHandler and

31
00:01:59.500 --> 00:02:03.650
we take in an argument,
we can call it request.

32
00:02:03.650 --> 00:02:07.830
So if we had multiple named arguments
this would be a way to do that.

33
00:02:07.830 --> 00:02:09.160
And we return a response.

34
00:02:09.160 --> 00:02:11.940
So now this is the first time
we are seeing that we can

35
00:02:11.940 --> 00:02:16.050
define exactly what types we
expect functions to return.

36
00:02:16.050 --> 00:02:19.590
That right there is probably one of
the biggest wins you can get in terms of

37
00:02:19.590 --> 00:02:23.990
getting all of your code completion in
your own projects to work really nicely.

38
00:02:23.990 --> 00:02:27.290
If you just start with functions,
return, particular types.

39
00:02:27.290 --> 00:02:31.550
Now when you call a function it returns
a value, you get that as a variable.

40
00:02:31.550 --> 00:02:35.496
Now all of that autocomplete stuff
will work on those variables, right?

41
00:02:37.017 --> 00:02:41.903
&gt;&gt; Mike North: So we could also have used,
we could have defined this as sort of its

42
00:02:41.903 --> 00:02:46.750
own named function and
used this JS dock annotation, @return.

43
00:02:46.750 --> 00:02:50.650
Which you will see, you'll see that in
a couple places in the code already,

44
00:02:50.650 --> 00:02:53.990
there's some of that sprinkled in.

45
00:02:53.990 --> 00:02:56.840
Just keep in mind static analysis
is not the whole picture.

46
00:02:56.840 --> 00:03:00.560
It's not like an iron clad guarantee.

47
00:03:00.560 --> 00:03:05.090
For example,
if you pass functions as arguments

48
00:03:05.090 --> 00:03:08.770
those are not validated for
argument types.

49
00:03:08.770 --> 00:03:12.620
So if I had those mouse listeners and
instead of iterating over an array of

50
00:03:12.620 --> 00:03:17.120
things I know are mouse listeners and
basically saying, here's a function,

51
00:03:17.120 --> 00:03:22.760
pass me an argument and that argument
should be a function that takes a number.

52
00:03:22.760 --> 00:03:26.170
That is not checked at the time
that that argument is passed.

53
00:03:26.170 --> 00:03:30.850
It's only when we use the function
that the arguments are validated.

54
00:03:30.850 --> 00:03:34.320
And only in terms of the type
information we have.

55
00:03:34.320 --> 00:03:41.680
So, just know that there are limits as
far as like what static analysis can do.

56
00:03:41.680 --> 00:03:45.080
Cuz all it can do is try to
like learn as much as it can

57
00:03:45.080 --> 00:03:46.150
without ruining your program.

