WEBVTT

1
00:00:00.310 --> 00:00:03.160
&gt;&gt; Mike North: Getting a little bit
more involved here, there is support for

2
00:00:03.160 --> 00:00:08.160
generics, so if anyone here has
worked with Android apps, or

3
00:00:08.160 --> 00:00:13.780
other languages that support parameterized
types, this is what that looks like.

4
00:00:13.780 --> 00:00:18.990
The benefit here, before we look at
what it does exactly, we want all

5
00:00:18.990 --> 00:00:24.197
of the benefits of our
build-time type safety.

6
00:00:24.197 --> 00:00:28.100
But we may want to operate across
a variety of different types.

7
00:00:29.380 --> 00:00:33.760
So in this case, we've got a function
with some interesting annotations here.

8
00:00:33.760 --> 00:00:35.328
Some interesting stuff in the comments.

9
00:00:35.328 --> 00:00:39.929
It's called gimmieFive, and
if we look at what the function does,

10
00:00:39.929 --> 00:00:43.980
it creates an array with
pre-allocated with five spaces.

11
00:00:43.980 --> 00:00:49.546
And then it will fill all of
the items from zero, one, two, three,

12
00:00:49.546 --> 00:00:56.300
and four with a copy of or a reference to
whatever item is passed into the function.

13
00:00:56.300 --> 00:00:59.360
So if I pass into students,

14
00:00:59.360 --> 00:01:02.470
we're going to get an array with
five copies of that string.

15
00:01:02.470 --> 00:01:05.030
Students, students, students,
students, students.

16
00:01:05.030 --> 00:01:06.810
Right, five times.

17
00:01:06.810 --> 00:01:10.600
And so the type of this variable here,

18
00:01:10.600 --> 00:01:14.240
type of students,
is going to be an array of strings.

19
00:01:15.840 --> 00:01:19.140
So we can push something in it,
and it should work just fine.

20
00:01:19.140 --> 00:01:21.180
It will be great.

21
00:01:21.180 --> 00:01:26.130
Now if we do something like this and
we push in when we say gimmieFive,

22
00:01:26.130 --> 00:01:29.050
we pass in an object like that.

23
00:01:29.050 --> 00:01:34.838
The type of this object variable

24
00:01:34.838 --> 00:01:39.280
here is gonna be a little bit
different than what you might expect,

25
00:01:39.280 --> 00:01:43.500
especially if you're coming
from the Java world or

26
00:01:43.500 --> 00:01:47.800
the nominally typed world where you'd
say that's an array of objects.

27
00:01:47.800 --> 00:01:51.560
Really it's an array of this type here.

28
00:01:54.150 --> 00:01:58.540
It's an array of objects who have
a property key whose value is a string.

29
00:01:58.540 --> 00:02:02.260
So when we try to push an empty object
in here whose structure doesn't match,

30
00:02:02.260 --> 00:02:05.910
that it has no key or
if we provided a key and

31
00:02:05.910 --> 00:02:10.700
they had a number as the value,
it would object in a very similar way.

32
00:02:10.700 --> 00:02:14.381
The structure did not match.

33
00:02:14.381 --> 00:02:17.840
But that's the idea behind a generic.

34
00:02:17.840 --> 00:02:20.120
Now let's look at how we're defining it.

35
00:02:21.840 --> 00:02:27.199
What we're saying here, this line here
says I have a parameterized type and

36
00:02:27.199 --> 00:02:32.250
I'm going to refer to it as T,
meaning we'll figure it out later.

37
00:02:32.250 --> 00:02:34.460
Whatever T is,
we're going to refer to it later.

38
00:02:34.460 --> 00:02:38.280
But here on out, when I say capital T,

39
00:02:38.280 --> 00:02:40.950
I mean whatever type we happen
to be working with here.

40
00:02:42.210 --> 00:02:47.830
I take as a parameter called item,

41
00:02:47.830 --> 00:02:52.260
I take a parameter called item and
its type is T, and

42
00:02:52.260 --> 00:02:57.530
whatever I return, it is an array of Ts,
so when I give this function a string,

43
00:02:57.530 --> 00:03:01.040
T becomes string and so
I return an array of strings.

44
00:03:01.040 --> 00:03:05.750
When I give it a number, I say give
me five and I pass the number one in.

45
00:03:05.750 --> 00:03:08.380
It's gonna give me back
an array of numbers, right.

46
00:03:08.380 --> 00:03:12.895
Whatever you pass it, it's gonna
return an array of the same type.

47
00:03:14.698 --> 00:03:15.770
&gt;&gt; Mike North: So that is a generic.

48
00:03:17.060 --> 00:03:22.046
Now, we can use generics more
deliberately using a syntax like this.

49
00:03:22.046 --> 00:03:26.590
So, this is useful when dealing with
things like arrays and promises,

50
00:03:26.590 --> 00:03:29.470
usually containers for
other values, right?

51
00:03:29.470 --> 00:03:35.650
Where what we're effectively saying is,
I am a promise,

52
00:03:35.650 --> 00:03:41.390
or promise-looking thing that
resolves to a string Right?

53
00:03:41.390 --> 00:03:44.920
This is useful, because now we can
type not only that it's a promise, but

54
00:03:44.920 --> 00:03:47.410
that it resolves to the correct thing.

55
00:03:47.410 --> 00:03:51.830
And so if we were expecting to take
a promise that resolves to a number

56
00:03:51.830 --> 00:03:54.780
as an argument, type script would
provide us some safety here.

57
00:03:54.780 --> 00:03:57.180
It would let us know I'm
not supposed to mix those,

58
00:03:57.180 --> 00:03:58.759
it's not going to give me what I want.

59
00:04:00.440 --> 00:04:03.220
You may look at this and

60
00:04:03.220 --> 00:04:08.770
see, we might have some JSX issues,
that's true.

61
00:04:08.770 --> 00:04:10.870
So this predates JSX.

62
00:04:10.870 --> 00:04:14.780
There are some loopholes that we can use.

63
00:04:14.780 --> 00:04:22.047
For example, we can use this here
instead of something like this.

64
00:04:22.047 --> 00:04:26.420
And this will only really bite you
in TypeScript where that kind of

65
00:04:26.420 --> 00:04:30.170
expression lives outside of a comment,
right.

66
00:04:30.170 --> 00:04:34.330
But this here might throw
TypeScript off a little bit

67
00:04:34.330 --> 00:04:37.420
in particular when we talk about casting.

68
00:04:37.420 --> 00:04:39.150
In TypeScript, which for

69
00:04:39.150 --> 00:04:43.350
those who are going to the TypeScript
workshop later, it looks kinda like this.

70
00:04:47.150 --> 00:04:48.930
This is only valid in TypeScript.

71
00:04:48.930 --> 00:04:53.397
We're basically saying cast 31 to a number
but this looks a lot like JSX, so

72
00:04:53.397 --> 00:04:55.057
we run into problems there.

