WEBVTT

1
00:00:00.440 --> 00:00:02.110
&gt;&gt; Mike North: We're getting
into some cool stuff now.

2
00:00:02.110 --> 00:00:05.321
So we're done with navigation, and
selection, and things like that.

3
00:00:05.321 --> 00:00:08.400
Now we're diving into the refactoring.

4
00:00:08.400 --> 00:00:10.951
So when we're updating values,
how might we do this?

5
00:00:10.951 --> 00:00:17.140
So let's look at Cart Store,
and we've got a function here.

6
00:00:18.780 --> 00:00:21.737
Actually, I'm gonna look at a base
class that's used in a bunch of places,

7
00:00:21.737 --> 00:00:22.533
listener support.

8
00:00:25.658 --> 00:00:29.433
&gt;&gt; Mike North: So this is used in many
places, if you search through the code,

9
00:00:29.433 --> 00:00:32.460
we could do that a couple
of different ways.

10
00:00:32.460 --> 00:00:37.151
We could open up this search panel here,
and this is exactly what you think it is.

11
00:00:39.046 --> 00:00:41.610
&gt;&gt; Mike North: You type in a string or
regular expression.

12
00:00:43.140 --> 00:00:47.260
And it'll show you all of the different
occurrences where this is used.

13
00:00:47.260 --> 00:00:50.750
So I'm referring to it in
the mark down documents.

14
00:00:50.750 --> 00:00:54.460
Nice to have these icons here, by the way,
so I can see that's a document.

15
00:00:54.460 --> 00:00:57.280
I mean, I should probably change it there,
but it's not gonna break my tests.

16
00:00:58.940 --> 00:01:01.730
Here we've used the string unregister,
here we've used it.

17
00:01:03.070 --> 00:01:06.380
If we have a listener and search for

18
00:01:06.380 --> 00:01:11.330
that, it starts to get a little less
useful because effectively here,

19
00:01:11.330 --> 00:01:14.620
we're just searching through code for
the occurrence of a string.

20
00:01:15.660 --> 00:01:19.610
Thankfully, because we've got
the TypeScript compiler working for

21
00:01:19.610 --> 00:01:23.420
us in the background and basically trying
to understand the way our whole program is

22
00:01:23.420 --> 00:01:27.956
structured, if we were
to select Register and

23
00:01:27.956 --> 00:01:32.681
say Find All References which
is also I think Shift+F12,

24
00:01:32.681 --> 00:01:34.600
I still use the mouse for this one.

25
00:01:36.260 --> 00:01:41.760
Something cool happens where our
editor splits apart and we get this,

26
00:01:42.850 --> 00:01:47.400
they call it like a peak view,
where you get to peak at other files.

27
00:01:47.400 --> 00:01:53.390
Now notice the line numbers I go like 13,
14, 15 and then I've got like 11, 12, 13.

28
00:01:53.390 --> 00:01:57.020
It turns out this is a scrollable
like little mini editor

29
00:01:57.020 --> 00:01:59.490
inside the outer editor here.

30
00:01:59.490 --> 00:02:01.900
And what we have on the right side

31
00:02:01.900 --> 00:02:06.330
is basically a little outline of
places where this function is used.

32
00:02:06.330 --> 00:02:12.460
So this is not simply like searching for
a currentism of a string.

33
00:02:12.460 --> 00:02:16.880
This is through something
called type inference,

34
00:02:16.880 --> 00:02:22.030
which when we talk about type checking,
we will define what this term means, but

35
00:02:22.030 --> 00:02:24.520
it basically understands that.

36
00:02:25.670 --> 00:02:29.550
This is an instance of a particular
object that we're dealing with and

37
00:02:29.550 --> 00:02:31.850
it's invoking this particular function.

38
00:02:31.850 --> 00:02:36.860
So it is much more closely
tied to our types of objects.

39
00:02:36.860 --> 00:02:40.420
It's not just a plain text search.

40
00:02:40.420 --> 00:02:45.320
So if we were to just search for
what's a good, fire, so

41
00:02:45.320 --> 00:02:48.910
fire's gonna be like,
in a bunch of places within our code.

42
00:02:48.910 --> 00:02:50.620
That text will be in a bunch of places.

43
00:02:50.620 --> 00:02:54.600
But if we find all references,
like we're only gonna have a couple.

44
00:02:54.600 --> 00:02:57.790
This is the one that we're
looking at right now.

45
00:02:57.790 --> 00:03:02.450
And here,
this isn't a listener support object, and

46
00:03:02.450 --> 00:03:06.040
we're calling it Same here,
ListenerSupport object.

47
00:03:06.040 --> 00:03:09.774
So here you're not getting all those false
positives even for very simple names.

48
00:03:09.774 --> 00:03:14.536
The cool thing here is we can start to get
out of the habit as Java Script developers

49
00:03:14.536 --> 00:03:19.530
of having these super descriptive like
almost global unique names for things.

50
00:03:19.530 --> 00:03:24.044
Especially if you're a functional
programmer where you don't have like this.

51
00:03:24.044 --> 00:03:30.470
You don't have objects of particular
types, you have collections of functions.

52
00:03:30.470 --> 00:03:35.880
This can be really valuable in terms of
recognizing that, hey this is an object

53
00:03:35.880 --> 00:03:40.580
that came out of this constructor,
which was from this module here.

54
00:03:40.580 --> 00:03:43.400
And it can piece together
the way your code is connected,

55
00:03:43.400 --> 00:03:46.450
in a way that goes way beyond
just regular text search.

56
00:03:47.940 --> 00:03:51.010
So this is super, super cool, and

57
00:03:51.010 --> 00:03:56.110
the benefit of it being presented in this
way means you're not taken out of context.

58
00:03:56.110 --> 00:03:59.280
You're not removed from the file
that you were looking at.

59
00:03:59.280 --> 00:04:03.030
You can kinda just check the stuff out and
then you're done with it you have this

60
00:04:03.030 --> 00:04:07.530
little x, and it's like the fold
is stitched back together.

61
00:04:07.530 --> 00:04:10.520
And you're back to your
original editor there.

62
00:04:10.520 --> 00:04:11.990
I really love this.

63
00:04:11.990 --> 00:04:15.720
And this is where, like once we started
seeing this kind of feature added to VS

64
00:04:15.720 --> 00:04:20.750
code, you can't call it like
just a text editor anymore.

65
00:04:20.750 --> 00:04:23.870
I mean it's light, it starts up quickly.

66
00:04:23.870 --> 00:04:27.340
You can just point it to any file and
it'll try to handle

67
00:04:27.340 --> 00:04:31.110
it It doesn't need these big
projects like a typical IDE would.

68
00:04:31.110 --> 00:04:36.330
But this is not a feature that you would
find In many ID, or in many light editors.

69
00:04:36.330 --> 00:04:40.090
Most light editors because they don't
have this deeper analysis of your code

70
00:04:40.090 --> 00:04:41.670
happening in the background.

71
00:04:41.670 --> 00:04:45.649
They're not gonna even attempt to do this,
and you'll be back in the world of finding

72
00:04:45.649 --> 00:04:48.985
the string in my code base and
you'll get all of those false positives.

73
00:04:52.533 --> 00:04:56.880
&gt;&gt; Mike North: So
it opens up a split in the editor.

74
00:04:56.880 --> 00:04:59.960
We can peek at a type definition,
I'll show you what that looks like.

75
00:04:59.960 --> 00:05:04.580
So lets see, push, so this is on an array

76
00:05:07.900 --> 00:05:13.710
and you can see like this again judging by
this file name, I'll translate this for

77
00:05:13.710 --> 00:05:17.420
you, it is what typescript
refers to as a library, right?

78
00:05:17.420 --> 00:05:23.500
So you can say, I, this type script
program needs type definitions for

79
00:05:23.500 --> 00:05:26.710
the dummy API and for ES5 JavaScript and

80
00:05:26.710 --> 00:05:30.120
for experimental decorator support and
things like that.

81
00:05:30.120 --> 00:05:36.040
And you bring those in like as a you know,
valid.

82
00:05:36.040 --> 00:05:39.430
Things to use within that particular
context because you can write

83
00:05:39.430 --> 00:05:41.220
Type Script for the browser, or for

84
00:05:41.220 --> 00:05:45.690
NodeJS and you'd just say different set
of libraries that we're working with.

85
00:05:45.690 --> 00:05:48.770
But here this is the ES Five library, and

86
00:05:48.770 --> 00:05:54.480
DTS that just means it's
a definition file for Type Script.

87
00:05:54.480 --> 00:06:02.780
And here push Takes in any number of
items, and then it returns a number.

88
00:06:02.780 --> 00:06:05.980
Push returns something less
useful than most people think but

89
00:06:07.220 --> 00:06:11.680
we can use the same way of sort of
opening the code up and taking a look.

90
00:06:11.680 --> 00:06:15.770
If we looked at this react
component we have here

91
00:06:15.770 --> 00:06:19.430
you can look at the type definition there
and we'll see something interesting.

92
00:06:20.570 --> 00:06:23.980
We've go two and
it turns out that one of these is for

93
00:06:23.980 --> 00:06:28.060
writing react components with prototypes,

94
00:06:28.060 --> 00:06:35.050
writing react components
without ES2015 classes, right?

95
00:06:35.050 --> 00:06:39.370
Without this class keyword, so that's
this, sorry, that was that first one,

96
00:06:40.810 --> 00:06:45.620
I'll get us back,
I'm going click happy this morning.

97
00:06:47.400 --> 00:06:51.760
So this first one that's highlighted,
I'm on 269, that's, that is sort of for.

98
00:06:51.760 --> 00:06:59.230
For like building react components
as constructures with prototypes.

99
00:06:59.230 --> 00:07:02.230
And then down here we have
another type definition for

100
00:07:02.230 --> 00:07:04.690
those that are using classes.

101
00:07:05.760 --> 00:07:08.790
So you can have more than one of these and
this would let you kind of search

102
00:07:08.790 --> 00:07:13.299
through your code base for the appropriate
one for that particular use case.

103
00:07:14.400 --> 00:07:18.840
And it turns out like if you've
never used TypeScript with React,

104
00:07:18.840 --> 00:07:23.360
TypeScript with React before which
we'll go into in the TypeScript course,

105
00:07:23.360 --> 00:07:28.630
like we get to describe the structure
of our props and our state as well,

106
00:07:28.630 --> 00:07:34.690
so it adds a lot of structure
that helps keep you honest,

107
00:07:34.690 --> 00:07:37.520
keep you consistent about
the way this thing should behave

