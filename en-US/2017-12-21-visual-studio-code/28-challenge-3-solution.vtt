WEBVTT

1
00:00:00.110 --> 00:00:07.006
&gt;&gt; Mike North: And let's proceed

2
00:00:07.006 --> 00:00:13.906
to the next topic.

3
00:00:13.906 --> 00:00:22.131
And let's proceed to the next topic.

4
00:00:22.131 --> 00:00:24.183
Once we start sort of unraveling this,

5
00:00:24.183 --> 00:00:27.487
we'll see that we kind of have to
sort of fix some other things.

6
00:00:27.487 --> 00:00:31.433
But essentially, we should only
end up adding comments here and

7
00:00:31.433 --> 00:00:35.525
we should in the end have some
assurance around the various types of

8
00:00:35.525 --> 00:00:39.780
things that can be passed in due
functions within this piece of code.

9
00:00:41.070 --> 00:00:44.195
&gt;&gt; Mike North: So just to show you
what we started out with here,

10
00:00:44.195 --> 00:00:49.307
I went to my compiler configuration,
my type script compiler configuration,

11
00:00:49.307 --> 00:00:52.770
and I added these two lines here,
check JavaScript.

12
00:00:52.770 --> 00:00:55.140
Otherwise, it would just work
with our type script files.

13
00:00:55.140 --> 00:00:58.500
It would ignore all of the JavaScript and
then no implicit any.

14
00:00:58.500 --> 00:01:02.035
We're saying,
do not tolerate ImplicitAny anymore,

15
00:01:02.035 --> 00:01:06.920
just bust us whenever you
can't figure something out.

16
00:01:06.920 --> 00:01:11.300
And now it's our job to go in and to be
either explicit about the any type or

17
00:01:11.300 --> 00:01:14.200
to maybe define something
that's not the Any type.

18
00:01:15.360 --> 00:01:17.220
Usually it's the latter
that you're interested in.

19
00:01:18.340 --> 00:01:22.000
So with that, let's jump in.

20
00:01:22.000 --> 00:01:27.411
I'm gonna start with the listener
support module here.

21
00:01:27.411 --> 00:01:32.284
And let's

22
00:01:32.284 --> 00:01:37.157
proceed to

23
00:01:37.157 --> 00:01:45.030
the next topic.

24
00:01:45.030 --> 00:01:47.040
So we start from the bottom up,
in general.

25
00:01:48.600 --> 00:01:53.160
Okay so, the parameter listener
has an implicit any type.

26
00:01:54.560 --> 00:01:57.480
And that error actually is
happening in two places.

27
00:01:57.480 --> 00:01:59.880
And then this payload has an any type.

28
00:02:01.000 --> 00:02:07.690
So up here, at the top of this module,
I'm going to define a new type.

29
00:02:09.580 --> 00:02:13.500
And we're gonna say that this is one
of the listeners we're gonna register.

30
00:02:14.830 --> 00:02:21.740
And it's gonna be a function that
receives as an argument an object.

31
00:02:23.290 --> 00:02:25.140
That covers an array, by the way.

32
00:02:25.140 --> 00:02:30.080
An array is a special flavor
of JavaScript object.

33
00:02:30.080 --> 00:02:33.510
So it's a function that
receives an object and

34
00:02:33.510 --> 00:02:37.070
it returns a void,
that means it returns nothing.

35
00:02:37.070 --> 00:02:41.720
I'm gonna actually opt for
the arrow syntax like this

36
00:02:43.510 --> 00:02:47.280
function that takes an object as a single
argument, and it returns nothing.

37
00:02:47.280 --> 00:02:49.930
It would be like it returns undefined,
right?

38
00:02:51.350 --> 00:02:53.330
And we'll call this a listener.

39
00:02:55.880 --> 00:03:01.782
Now we can go down to these areas here and
say, I'm going to take in a param of

40
00:03:01.782 --> 00:03:09.350
type listener in this last argument here,
that's sort of the name of the parameter.

41
00:03:09.350 --> 00:03:11.030
So that's basically to
say it's this one here,

42
00:03:11.030 --> 00:03:15.650
it would have more, would mean more
if we took multiple arguments.

43
00:03:15.650 --> 00:03:20.510
Do the same thing here,
and those two went away.

44
00:03:20.510 --> 00:03:24.350
So now we've got this payload
that has an implicit any type.

45
00:03:24.350 --> 00:03:26.138
We'll do this one in line.

46
00:03:28.900 --> 00:03:29.889
&gt;&gt; Mike North: Type.

47
00:03:33.230 --> 00:03:37.481
&gt;&gt; Mike North: And
the type here is gonna just be data.

48
00:03:37.481 --> 00:03:42.512
It takes, like the value is
this object array is here.

49
00:03:42.512 --> 00:03:46.479
Let's see, why is it complaining?

50
00:03:46.479 --> 00:03:52.214
&gt;&gt; Mike North: I think the C should be
above it or something, let's try that.

51
00:03:52.214 --> 00:03:54.580
Sorry there we go, param.

52
00:03:54.580 --> 00:03:58.443
So now if we hover over
this payload you can see,

53
00:03:58.443 --> 00:04:01.640
hey it's not just like a random thing.

54
00:04:03.022 --> 00:04:07.487
It is an object that has
a property on it called data and

55
00:04:07.487 --> 00:04:10.770
the value can be pretty much anything.

56
00:04:10.770 --> 00:04:14.901
And as we iterate over this,
you can see there are my listeners.

57
00:04:14.901 --> 00:04:16.410
That's an any array.

58
00:04:16.410 --> 00:04:19.280
I think it can infer enough there.

59
00:04:19.280 --> 00:04:21.797
It's not using any implicit anys.

60
00:04:21.797 --> 00:04:24.217
Let's see what happens if
we do something like this.

61
00:04:27.385 --> 00:04:33.008
&gt;&gt; Mike North: Type,
&gt;&gt; Mike North: Something like that and

62
00:04:33.008 --> 00:04:33.840
we go down here.

63
00:04:36.140 --> 00:04:36.990
&gt;&gt; Mike North: There we go.

64
00:04:36.990 --> 00:04:41.910
So now, this is not just an array of anys,
it's an array

65
00:04:41.910 --> 00:04:46.480
of functions that take an object
as an argument and return nothing.

66
00:04:47.840 --> 00:04:53.939
And so even when we're in here, like this
thing here, we know what it is, right?

67
00:04:57.499 --> 00:05:00.505
&gt;&gt; Mike North: So x, it's telling us
basically it takes an object in there and

68
00:05:00.505 --> 00:05:01.310
returns a void.

69
00:05:03.962 --> 00:05:08.290
&gt;&gt; Mike North: All right, so here,
why are we complaining about this?

70
00:05:08.290 --> 00:05:11.040
Object implicitly has an any type.

71
00:05:11.040 --> 00:05:13.479
Fine, we'll say it's an array.

72
00:05:16.230 --> 00:05:17.405
&gt;&gt; Mike North: We'll say
it's an array of anys.

73
00:05:26.120 --> 00:05:32.500
&gt;&gt; Mike North: Let's see, items, we'll
give it a name, something like that, yes?

74
00:05:32.500 --> 00:05:33.840
&gt;&gt; Speaker 2: I had
another question in chat.

75
00:05:33.840 --> 00:05:36.540
&gt;&gt; Mike North: So
if you're in my libraries,

76
00:05:38.897 --> 00:05:41.111
&gt;&gt; Mike North: If my libraries.d.ts is not

77
00:05:41.111 --> 00:05:46.875
published but you do have it, do you just
place it at the root of your project?

78
00:05:46.875 --> 00:05:52.703
So if you have in the root of a project
for your type definitions an index.d.ts,

79
00:05:52.703 --> 00:05:55.631
that will get picked up automatically.

80
00:05:55.631 --> 00:05:58.229
So if you have that and
it's part of your mpm module,

81
00:05:58.229 --> 00:06:02.090
consumers of your mpm module will
pick up on those type definitions.

82
00:06:02.090 --> 00:06:07.640
If the file has a different name,
you may need to finesse the compiler

83
00:06:07.640 --> 00:06:11.940
configuration a little bit and you'll
see I've got this paths file down here.

84
00:06:11.940 --> 00:06:16.560
So let me get rid of this,
it's paths within compiler options and

85
00:06:16.560 --> 00:06:18.610
that's where we would say,
okay, I'm gonna ask for

86
00:06:18.610 --> 00:06:23.410
this muicss which is this little
mini material design library.

87
00:06:23.410 --> 00:06:28.160
But here's where you can find the modules
of interest, and that sort of,

88
00:06:28.160 --> 00:06:33.140
this mapping is used whenever you
import and something is present here.

89
00:06:33.140 --> 00:06:35.900
That will be used instead
of the normal conventions.

90
00:06:38.704 --> 00:06:42.420
&gt;&gt; Mike North: All right, so
let's keep plugging away here.

91
00:06:42.420 --> 00:06:46.284
We've got now three files,
we'll focus on those.

92
00:06:46.284 --> 00:06:50.706
Let's start with the grocery item store.

93
00:06:50.706 --> 00:06:57.118
So here,
&gt;&gt; Mike North: Data

94
00:06:57.118 --> 00:07:00.010
item has implicitly has an any type.

95
00:07:00.010 --> 00:07:04.870
So you've got update items and
wherever this is used

96
00:07:04.870 --> 00:07:09.570
like given an array of grocery items,
add new ones.

97
00:07:09.570 --> 00:07:14.680
So this given an array of grocery items,
like that sounds like

98
00:07:14.680 --> 00:07:19.250
an array of something called like that.

99
00:07:19.250 --> 00:07:21.370
So we need to define this up top.

100
00:07:30.210 --> 00:07:34.880
And we will augment it as necessary.

101
00:07:37.430 --> 00:07:40.372
So here we've got update categories,

102
00:07:40.372 --> 00:07:45.552
we've got some JSON data coming back,
and in this case, like item.

103
00:07:45.552 --> 00:07:46.990
This is a good example for

104
00:07:46.990 --> 00:07:51.108
me to show a case where there's
something sort of deep in our code here.

105
00:07:51.108 --> 00:07:55.697
I happen to know that this
here is an object that

106
00:07:55.697 --> 00:08:00.530
just has a category property on it,
that's it.

107
00:08:09.720 --> 00:08:10.450
&gt;&gt; Mike North: Something like that.

108
00:08:15.380 --> 00:08:18.790
&gt;&gt; Mike North: We need one more set of
braces so the first set of braces says,

109
00:08:18.790 --> 00:08:22.060
I will define my type here and
the second one says, I am an object.

110
00:08:24.640 --> 00:08:28.160
And still has the implicit any type.

111
00:08:32.528 --> 00:08:35.797
&gt;&gt; Mike North: You know what we could do,
there's a different way to do this,

112
00:08:35.797 --> 00:08:38.490
arguably a better way
than what I just did.

113
00:08:38.490 --> 00:08:41.210
So we'll say categories.

114
00:08:41.210 --> 00:08:46.040
We're gonna cast that,
&gt;&gt; Mike North: Or

115
00:08:46.040 --> 00:08:49.439
define that as an array of those things.

116
00:08:57.590 --> 00:08:58.700
&gt;&gt; Mike North: Something like that.

117
00:08:58.700 --> 00:09:01.860
So now we've got categories and
category names.

118
00:09:01.860 --> 00:09:04.350
And we've sort of said,
based on this end point,

119
00:09:04.350 --> 00:09:06.220
I know my structure's gonna be this.

120
00:09:06.220 --> 00:09:09.620
And here's an example where it might be
overblown to create a type definition that

121
00:09:09.620 --> 00:09:14.680
says please expect an array of
objects that have a property

122
00:09:14.680 --> 00:09:18.120
on them that's a string, that's under
the property key called category.

123
00:09:22.550 --> 00:09:24.380
&gt;&gt; Mike North: And now that's happy.

124
00:09:24.380 --> 00:09:28.550
So categories,
that was known to be a string array, and

125
00:09:28.550 --> 00:09:30.930
now we've got that as a string array,
everything's happy.

126
00:09:32.070 --> 00:09:38.180
Okay, so here, on items updating, updated,
it's passing something into fire.

127
00:09:38.180 --> 00:09:42.520
Fire wants an any array.

128
00:09:42.520 --> 00:09:46.318
So now we're getting into
a situation where really we just

129
00:09:46.318 --> 00:09:49.010
need need an array-like thing.

130
00:09:49.010 --> 00:09:53.990
We don't necessarily need a mutable
array like capital A array.

131
00:09:53.990 --> 00:09:56.270
So if we go in here and
we change this a little bit.

132
00:10:08.339 --> 00:10:10.600
&gt;&gt; Mike North: Bring back any is not

133
00:10:10.600 --> 00:10:16.750
[SOUND]
&gt;&gt; Mike North: Actually

134
00:10:16.750 --> 00:10:18.360
this will work just as well.

135
00:10:19.820 --> 00:10:23.200
So this.items is a read only array.

136
00:10:26.650 --> 00:10:31.250
&gt;&gt; Mike North: So read only array and
this one wants to receive an any array,

137
00:10:31.250 --> 00:10:33.580
you could do it like this.

138
00:10:33.580 --> 00:10:40.350
We're gonna create a union type here,
so this is an or operator.

139
00:10:46.520 --> 00:10:47.970
&gt;&gt; Mike North: No, still don't like it?

140
00:10:47.970 --> 00:10:51.690
Push is missing from read only array.

141
00:10:53.060 --> 00:10:55.550
All right, let's come back to that one.

142
00:10:58.900 --> 00:11:02.620
&gt;&gt; Mike North: Okay, items implicitly has
an any type because with an empty array,

143
00:11:02.620 --> 00:11:05.550
there's no way to know exactly
what we expect to put in here.

144
00:11:05.550 --> 00:11:07.450
But, I happen to know
this is a cart store,

145
00:11:07.450 --> 00:11:10.110
so we're gonna have an array with
something we'll call a cart item.

146
00:11:14.690 --> 00:11:16.580
&gt;&gt; Mike North: We have to go
define that up at the top here.

147
00:11:23.874 --> 00:11:25.099
&gt;&gt; Mike North: Wrong.

148
00:11:27.840 --> 00:11:33.190
&gt;&gt; Mike North: Okay, and now it's saying,
so this is the same issue as before.

149
00:11:33.190 --> 00:11:34.410
We're gonna leave that in place.

150
00:11:36.790 --> 00:11:38.640
&gt;&gt; Mike North: Actually,
that's all we have left here.

151
00:11:38.640 --> 00:11:43.410
So argument of type, read only array any
is not assignable to parameter of type

152
00:11:45.653 --> 00:11:48.175
&gt;&gt; Mike North: array double bracket.

153
00:11:50.420 --> 00:11:53.610
&gt;&gt; Mike North: Cuz push is missing
in the type read only array.

154
00:11:53.610 --> 00:11:55.480
Now, I don't really need
to push anything in here.

155
00:12:02.590 --> 00:12:04.430
&gt;&gt; Mike North: So
I should be able to do this.

156
00:12:04.430 --> 00:12:10.090
Now this here,
&gt;&gt; Mike North: Let me make sure that

157
00:12:10.090 --> 00:12:17.540
I'm not just lagging behind in terms of
&gt;&gt; Mike North: Type checking here.

158
00:12:21.740 --> 00:12:23.150
&gt;&gt; Mike North: I do need to
just change this up here.

159
00:12:25.240 --> 00:12:29.524
Array like any and
now we're down to no problems.

160
00:12:29.524 --> 00:12:36.520
So you see, this forced me to basically
go as soon as I had to deal with

161
00:12:36.520 --> 00:12:41.610
an immutable array of any type,
and there were certain

162
00:12:41.610 --> 00:12:47.060
situations where I was getting a read-only
array which would be, let's see.

163
00:12:47.060 --> 00:12:48.440
Where is that ultimately coming from?

164
00:12:49.890 --> 00:12:51.850
Item object freeze.

165
00:12:51.850 --> 00:12:56.730
So this is a case where I basically said,
okay give me read only copy of this

166
00:12:56.730 --> 00:13:01.791
item like consumers cannot mutate this,
you can just read it, that's it.

167
00:13:01.791 --> 00:13:03.839
You cannot add,
you cannot push things into this array.

168
00:13:03.839 --> 00:13:09.414
So then that forced me to go back and
basically relax constraints all the way

169
00:13:09.414 --> 00:13:15.750
back to defining what a listener looks
like, so that it is ready to receive this.

170
00:13:15.750 --> 00:13:20.260
Now it wouldn't have been forced to do
that in JavaScript, but his is now,

171
00:13:20.260 --> 00:13:23.540
whoever consumes that code,
whoever is building listeners and

172
00:13:23.540 --> 00:13:28.610
registering them, they know that
potentially the array that they get

173
00:13:30.150 --> 00:13:33.430
you cannot push things into it, right?

174
00:13:33.430 --> 00:13:36.610
Now my intent is clearer, right?

175
00:13:36.610 --> 00:13:40.522
Because when you're adding a listener,
it has to look like this.

176
00:13:40.522 --> 00:13:44.949
It's just an array-like thing and
all you're allowed to do on

177
00:13:44.949 --> 00:13:50.140
an array-like thing, it doesn't have
a type definition, there it is.

178
00:13:50.140 --> 00:13:53.220
It's just got a length and
you can grab things off of it.

179
00:13:55.150 --> 00:14:01.920
You're not given license to use the full
spectrum of array functionality.

180
00:14:01.920 --> 00:14:06.090
All you're guaranteed is you can do
that which is great because now,

181
00:14:06.090 --> 00:14:08.324
it works for read only arrays as well.

182
00:14:08.324 --> 00:14:12.960
Whereas otherwise,
you would find that runtime,

183
00:14:12.960 --> 00:14:17.365
one array in one scenario,
it's gonna end up being read-only.

184
00:14:17.365 --> 00:14:22.010
And now, the function push cannot be
found on object, whatever, whatever.

185
00:14:22.010 --> 00:14:25.110
And you might have to get into
the just perfect situation for

186
00:14:25.110 --> 00:14:26.740
user to discover this problem.

187
00:14:26.740 --> 00:14:31.650
Whereas now, we have moved that into build
time where we said, all right, ArrayLike,

188
00:14:31.650 --> 00:14:34.270
that's all we need,
everything should work fine.

189
00:14:34.270 --> 00:14:39.010
It's a very low, this is a super simple,

190
00:14:39.010 --> 00:14:42.830
super simple shape of an object,
just two properties.

191
00:14:42.830 --> 00:14:45.680
And in this situation,
it is all that we need.

192
00:14:45.680 --> 00:14:47.670
And so that's what we're gonna use.

193
00:14:47.670 --> 00:14:51.750
There's no need for us to get more
specific, to say give me a mutable array.

194
00:14:51.750 --> 00:14:53.050
I don't need it.

195
00:14:53.050 --> 00:14:53.870
All I need is this.

196
00:14:56.460 --> 00:14:57.856
&gt;&gt; Mike North: And
now we're done at zero problems.

197
00:14:57.856 --> 00:15:03.490
So you've added type information and
as a result, our auto complete is better.

198
00:15:03.490 --> 00:15:07.960
We've clearly defined the constraints that
we need in order for our code to work and

199
00:15:07.960 --> 00:15:12.660
anyone else that would like,
if in a listener, you attempted to

200
00:15:14.880 --> 00:15:18.930
like here, where would this work?

201
00:15:18.930 --> 00:15:21.380
It would be in a listener that fires.

202
00:15:21.380 --> 00:15:22.800
Where is my register happening?

203
00:15:25.930 --> 00:15:27.880
I can use find symbol and file.

204
00:15:34.280 --> 00:15:36.040
Actually we'll go back
to listener support.

205
00:15:42.940 --> 00:15:45.557
&gt;&gt; Mike North: Find references.

206
00:15:45.557 --> 00:15:47.526
Go here.

207
00:15:49.150 --> 00:15:51.450
&gt;&gt; Mike North: Okay, so
when we register a listener and

208
00:15:51.450 --> 00:15:56.980
we've got this item update listener here
&gt;&gt; Mike North: That's

209
00:15:56.980 --> 00:15:58.950
where we've got this thing here.

210
00:15:58.950 --> 00:16:01.120
So if we had a list of things.

211
00:16:03.070 --> 00:16:07.590
&gt;&gt; Mike North: Then we should really,
this would have to be ArrayLike

212
00:16:09.180 --> 00:16:13.030
or something for us to add this.

213
00:16:13.030 --> 00:16:14.950
Cuz now we're fully in Typescript land.

214
00:16:14.950 --> 00:16:20.164
But we can mix this in,

215
00:16:20.164 --> 00:16:23.736
just the same.

216
00:16:32.012 --> 00:16:36.656
&gt;&gt; Mike North: [SOUND] So
this would be, sorry,

217
00:16:36.656 --> 00:16:45.270
a function that takes as
an argument an array-like thing.

218
00:16:45.270 --> 00:16:45.879
No, not happy?

219
00:16:48.330 --> 00:16:50.759
&gt;&gt; Mike North: All right.

220
00:16:54.250 --> 00:16:55.330
&gt;&gt; Mike North: No,
we can do it the same way.

221
00:16:58.900 --> 00:17:00.650
&gt;&gt; Mike North: So
this would be the equivalent.

222
00:17:00.650 --> 00:17:06.120
And then in here when we have,
&gt;&gt; Mike North: The listener

223
00:17:06.120 --> 00:17:10.220
being defined, there it is.

224
00:17:10.220 --> 00:17:14.090
Now we've really only got length.

225
00:17:14.090 --> 00:17:16.120
That's all that's available here.

226
00:17:16.120 --> 00:17:23.210
So if I tried to do list.push,
nope, not allowed.

227
00:17:23.210 --> 00:17:24.080
Now without going so

228
00:17:24.080 --> 00:17:27.940
far as defining that type information,
you would totally be allowed to do this.

229
00:17:29.845 --> 00:17:32.145
You would've said, well it's an array.

230
00:17:32.145 --> 00:17:35.465
I see it's using the word here
a mutable array is being used.

231
00:17:35.465 --> 00:17:39.155
But now, to get all of our warnings down,
we had to really make all of

232
00:17:39.155 --> 00:17:42.125
the static analysis cases
that could be uncovered work.

233
00:17:42.125 --> 00:17:43.445
And so, we've tightened it up quite a bit.

234
00:17:45.465 --> 00:17:51.310
All right, so hopefully,
I've made a pretty compelling case for

235
00:17:51.310 --> 00:17:53.310
adding type information
to your JavaScript.

236
00:17:55.160 --> 00:17:56.790
Let me make a quick commit here.

237
00:18:00.340 --> 00:18:03.210
And this is,
let's make sure we actually work here.

238
00:18:04.930 --> 00:18:07.210
And we still do so
these are errors that are left over

239
00:18:17.076 --> 00:18:20.087
&gt;&gt; Mike North: I wanna be in

240
00:18:25.315 --> 00:18:29.330
&gt;&gt; Mike North: Git stash, great.

241
00:18:32.030 --> 00:18:33.650
&gt;&gt; Mike North: Little more advanced than

242
00:18:35.870 --> 00:18:40.770
what I'd wanna do in,
&gt;&gt; Mike North: In the UI for git here.

243
00:18:48.060 --> 00:18:48.981
&gt;&gt; Mike North: Did I pop?

244
00:18:51.237 --> 00:18:52.889
&gt;&gt; Mike North: There you go.

245
00:19:03.214 --> 00:19:07.399
&gt;&gt; Mike North: And
let's proceed to the next topic.

246
00:19:10.630 --> 00:19:13.270
And let's proceed to the next topic.

