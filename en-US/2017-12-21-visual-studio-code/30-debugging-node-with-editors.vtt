WEBVTT

1
00:00:00.140 --> 00:00:02.103
&gt;&gt; Mike North: Debugging Node
with editors.

2
00:00:02.103 --> 00:00:04.840
It turns out that this is bad.

3
00:00:04.840 --> 00:00:07.355
We as JavaScript developers,
as web developers,

4
00:00:07.355 --> 00:00:10.346
we have learned to tolerate
a pretty miserable experience.

5
00:00:12.908 --> 00:00:16.268
&gt;&gt; Mike North: If you work with people
who have been back end developers or

6
00:00:16.268 --> 00:00:19.491
game developers and
they start to move towards the web,

7
00:00:19.491 --> 00:00:24.680
all of this context switching that we're
so used to, this is really horrifying.

8
00:00:24.680 --> 00:00:29.800
And it hurts our productivity and it
means that we have to learn like seven or

9
00:00:29.800 --> 00:00:32.740
eight different tools as
supposed to like one or two.

10
00:00:34.540 --> 00:00:39.283
And we've been trying for a while to
consolidate around a single tool, so

11
00:00:39.283 --> 00:00:41.132
here's a little showcase.

12
00:00:41.132 --> 00:00:44.561
This is NetBeans which
I used a long time ago,

13
00:00:44.561 --> 00:00:49.177
and I used it a lot and
actually developed on their platform.

14
00:00:49.177 --> 00:00:54.123
But they had an embedded little browser
here with sort of an elements tree and

15
00:00:54.123 --> 00:00:56.470
sort of looks like a browser.

16
00:00:56.470 --> 00:01:03.140
But it was never really standards
compliant, really, really basic.

17
00:01:03.140 --> 00:01:05.950
There was very limited support for
debugging.

18
00:01:05.950 --> 00:01:09.357
But the benefit here was
you're in one environment and

19
00:01:09.357 --> 00:01:13.739
you don't have to have two windows
open with a multi-monitor setup.

20
00:01:13.739 --> 00:01:17.260
It is one workspace that sort of works.

21
00:01:17.260 --> 00:01:19.590
So, never really took off.

22
00:01:19.590 --> 00:01:22.068
So this is the flip side.

23
00:01:22.068 --> 00:01:26.958
This is Chrome adding features
to try to make their dev

24
00:01:26.958 --> 00:01:30.590
tools look more like an editor.

25
00:01:30.590 --> 00:01:35.340
So we've got like syntax highlighting and
different themes and now you can

26
00:01:35.340 --> 00:01:40.150
drop folders into your sources,
folder in dev tools.

27
00:01:40.150 --> 00:01:46.300
But frankly, I do not expect these
like subset of browser functionality,

28
00:01:46.300 --> 00:01:49.960
dev tools, to become the place
where we're all writing our code.

29
00:01:49.960 --> 00:01:53.664
If there is a single destination
to do this kind of stuff,

30
00:01:53.664 --> 00:01:58.772
I doubt it's going to be in the bottom
50% of your browser Windows, right?

31
00:02:01.505 --> 00:02:02.800
&gt;&gt; Mike North: So this is interesting.

32
00:02:02.800 --> 00:02:07.340
This was a pretty promising step forward
and I learned about this the first time I

33
00:02:07.340 --> 00:02:10.120
started working with
the Visual Studio code team.

34
00:02:10.120 --> 00:02:14.836
I was up at Microsoft,
they have developer days once in a while.

35
00:02:14.836 --> 00:02:19.020
And they just survey the open source
community about what features are you

36
00:02:19.020 --> 00:02:22.930
interested, where should
we deploy our resources?

37
00:02:22.930 --> 00:02:26.289
They even had exercises where they
gave us like points to spend.

38
00:02:26.289 --> 00:02:30.180
And we 'd go up on walls and
say, debugging web applications.

39
00:02:30.180 --> 00:02:35.049
And I've heard a bunch of points in
automated testing around like Cordova

40
00:02:35.049 --> 00:02:39.692
style apps where it's not just
the JavaScript that's being tested.

41
00:02:39.692 --> 00:02:41.332
Test the whole app.

42
00:02:41.332 --> 00:02:44.840
And they were working on this
simultaneously to Visual Studio code,

43
00:02:44.840 --> 00:02:47.992
just trying to chase down some
way to get a good solution here.

44
00:02:51.452 --> 00:02:52.529
&gt;&gt; Mike North: It worked.

45
00:02:52.529 --> 00:02:55.430
It was incredibly difficult to set up.

46
00:02:55.430 --> 00:02:58.453
It is clearly a hack, right?

47
00:02:58.453 --> 00:03:03.407
Because everything here it is,
&gt;&gt; Mike North: In our JavaScript call

48
00:03:03.407 --> 00:03:07.313
stack we've got lines,
line numbers starting one, two, three.

49
00:03:07.313 --> 00:03:09.422
Line two is the buttons.

50
00:03:09.422 --> 00:03:14.102
This is all text with a little bit of
decoration around it, trying to simulate

51
00:03:14.102 --> 00:03:18.494
a UI using Unicode characters to try
to create rounded button corners and

52
00:03:18.494 --> 00:03:20.170
things like that.

53
00:03:20.170 --> 00:03:23.581
And what's more, the step-in-step-over,

54
00:03:23.581 --> 00:03:29.416
that's all built into this omni-box,
the single drop down that drives Sublime.

55
00:03:29.416 --> 00:03:34.261
So that they managed to implement
everything that's necessary for

56
00:03:34.261 --> 00:03:38.596
this protocol to work but
it was brittle, really, really,

57
00:03:38.596 --> 00:03:43.611
hard to set up, and the contributors
to this effort had to know Perl and

58
00:03:43.611 --> 00:03:47.111
JavaScript and
browser internals really well.

59
00:03:47.111 --> 00:03:49.010
And so
you're starting to approach a really,

60
00:03:49.010 --> 00:03:51.995
really small subset of developers
that can maintain this kind of thing.

61
00:03:54.105 --> 00:03:55.641
&gt;&gt; Mike North: So yeah, this was cool.

62
00:03:55.641 --> 00:04:00.220
It didn't really work incredibly well but

63
00:04:00.220 --> 00:04:05.100
it was a very promising step to take.

64
00:04:05.100 --> 00:04:10.510
So here, this is a world's better than
other approaches we've just looked at.

65
00:04:10.510 --> 00:04:15.740
This is Adam, with some plugins, and
you can see, we have real buttons there.

66
00:04:15.740 --> 00:04:21.170
Break points are obvious, we have
proper UI for call stacks and things.

67
00:04:21.170 --> 00:04:26.793
This is not like an editor tab that we're
trying to squeeze a call stack into.

68
00:04:26.793 --> 00:04:28.161
This is starting to look right.

69
00:04:28.161 --> 00:04:31.455
However, you'll note that like
this is still very basic.

70
00:04:31.455 --> 00:04:35.710
This is step in, step out,
step forward and stop.

71
00:04:35.710 --> 00:04:40.250
And over time more advanced debugging
functionality is being added.

72
00:04:40.250 --> 00:04:45.210
And so you may be able to get the basics
right, but this is not a theme.

73
00:04:45.210 --> 00:04:48.330
This is not add Spotify to your editor so

74
00:04:48.330 --> 00:04:51.340
that you can change which
track your listening to.

75
00:04:51.340 --> 00:04:54.239
And by the way, I love those extensions,
they're fantastic.

76
00:04:57.587 --> 00:05:01.619
&gt;&gt; Mike North: But you want something like
this to be handled by a really dedicated

77
00:05:01.619 --> 00:05:06.500
team that is committed to
comprehensively solving this problem.

78
00:05:06.500 --> 00:05:12.610
And that's where you want the following
things to be handled properly.

79
00:05:12.610 --> 00:05:16.027
Source maps are really hard to get right.

80
00:05:16.027 --> 00:05:19.460
For really smart people it is
hard to get source maps right.

81
00:05:19.460 --> 00:05:21.680
They're broken all over the place.

82
00:05:21.680 --> 00:05:24.946
They're broken in Ember and in React.

83
00:05:24.946 --> 00:05:29.056
And I don't mean for
the basic Hello World cases, but

84
00:05:29.056 --> 00:05:34.076
you can do things that will just
make it so you're in this familiar

85
00:05:34.076 --> 00:05:39.374
situation that I can guarantee
everyone in here who's tried to debug

86
00:05:39.374 --> 00:05:45.075
stuff in a real app you set a break point
and then you look at your dev tools.

87
00:05:45.075 --> 00:05:49.212
And it thinks you're on the last line
of this file which is an empty line and

88
00:05:49.212 --> 00:05:50.630
there's no code there.

89
00:05:50.630 --> 00:05:53.194
But clearly there's something there.

90
00:05:53.194 --> 00:05:57.380
If you start logging stuff in the console
you're not where it thinks you are.

91
00:05:57.380 --> 00:05:59.159
So source maps can break.

92
00:05:59.159 --> 00:06:04.067
Advance debugging features, we're gonna
look at something we can do in Node

93
00:06:04.067 --> 00:06:07.763
which is amazing,
where you can like pick a stack frame and

94
00:06:07.763 --> 00:06:11.328
restart execution at the top
of that stock frame again.

95
00:06:11.328 --> 00:06:15.422
So this is something
that only node can do.

96
00:06:15.422 --> 00:06:20.238
Chakra, which is the JavaScript runtime
for Edge, it's another Microsoft project,

97
00:06:20.238 --> 00:06:23.870
there they have something
called time travel debugging.

98
00:06:23.870 --> 00:06:30.203
So that's another ability to go backwards
and to see what happened earlier.

99
00:06:30.203 --> 00:06:33.270
I overshot, take me a few steps back.

100
00:06:33.270 --> 00:06:37.780
And anyone who's ever overshot a problem
where you find your break point, or

101
00:06:37.780 --> 00:06:41.600
you say stop on all exceptions and
then you find you're in an error, and

102
00:06:41.600 --> 00:06:45.950
getting back upstream to where that
error was thrown is really difficult.

103
00:06:45.950 --> 00:06:49.460
So, handling asynchrony is hard.

104
00:06:49.460 --> 00:06:53.650
Finding that you're in an error that
happened because some random promise

105
00:06:53.650 --> 00:06:55.990
failed, particularly,

106
00:06:55.990 --> 00:06:59.850
I work on a bunch of Ember apps where we
have something called the Ember run loop.

107
00:07:01.180 --> 00:07:04.580
I have not worked with fibers enough
in this new version of React but

108
00:07:04.580 --> 00:07:07.360
it's another scheduling idea.

109
00:07:07.360 --> 00:07:11.150
And without handling
asynchronous call stacks well,

110
00:07:11.150 --> 00:07:13.850
where you're not just saying,
what happened?

111
00:07:13.850 --> 00:07:16.172
Let's trace this back to our roots.

112
00:07:16.172 --> 00:07:18.635
It's a function that was
passed to set time at zero.

113
00:07:18.635 --> 00:07:21.620
That is not useful information.

114
00:07:21.620 --> 00:07:24.340
You wanna know, well,
what scheduled that task?

115
00:07:24.340 --> 00:07:27.860
What was the async thing that
led to another async thing,

116
00:07:27.860 --> 00:07:29.940
that finally led to this blowing up?

117
00:07:29.940 --> 00:07:34.699
And I would not trust a community-sourced

118
00:07:34.699 --> 00:07:38.820
debugger to handle all of
the important cases there.

119
00:07:38.820 --> 00:07:41.750
And then, finally, multiple threads and
multiple debugging sessions.

120
00:07:41.750 --> 00:07:44.980
So that was something Sublime
could never do, where you'd say,

121
00:07:44.980 --> 00:07:47.540
I've got a web worker or
I've got a service worker.

122
00:07:47.540 --> 00:07:50.645
More than one thread going on,
I've got break points.

123
00:07:50.645 --> 00:07:55.171
Do we wanna freeze them all at once or
do we want to just freeze one thread and

124
00:07:55.171 --> 00:07:56.709
let the rest of them run?

125
00:07:56.709 --> 00:07:59.269
There are good uses for
both of those ideas, but

126
00:07:59.269 --> 00:08:01.980
you need to be able to
handle that properly.

127
00:08:01.980 --> 00:08:03.890
And then finally,
multiple debugging sessions.

128
00:08:03.890 --> 00:08:05.085
I've never seen that handled right.

129
00:08:05.085 --> 00:08:08.373
And we're gonna do that today
where we've basically got Node and

130
00:08:08.373 --> 00:08:11.598
Chrome, and we wanna be able to,
within the same environment,

131
00:08:11.598 --> 00:08:14.310
transition from one to
the other pretty seamlessly.

