WEBVTT

1
00:00:00.630 --> 00:00:04.264
&gt;&gt; Mike North: So the last thing I
wanna talk about are a couple, these

2
00:00:04.264 --> 00:00:09.890
are a couple extensions that I really
like when working with this editor here.

3
00:00:09.890 --> 00:00:11.150
So our app is running right now.

4
00:00:11.150 --> 00:00:15.616
I wanna show you the first one, and

5
00:00:15.616 --> 00:00:19.064
it is called REST Client.

6
00:00:19.064 --> 00:00:23.250
So the benefit of REST Client,
the thing that it does,

7
00:00:23.250 --> 00:00:26.030
it does one thing and
it does it really well.

8
00:00:26.030 --> 00:00:29.300
We can create a file that looks like this.

9
00:00:29.300 --> 00:00:31.780
So this is just a regular text file.

10
00:00:31.780 --> 00:00:33.423
It's got comments in it,

11
00:00:33.423 --> 00:00:37.543
and like request information that
matches a very specific form.

12
00:00:37.543 --> 00:00:42.087
Now what the extension does is it ads
these little send request buttons on top

13
00:00:42.087 --> 00:00:45.283
of things that it can
recognize as a request, right?

14
00:00:45.283 --> 00:00:47.250
This is a GET to this URL.

15
00:00:47.250 --> 00:00:48.240
We can click this.

16
00:00:49.610 --> 00:00:52.564
Let's try this.

17
00:00:52.564 --> 00:00:58.311
I don't think our

18
00:00:58.311 --> 00:01:07.180
app's running.
&gt;&gt; Mike North: Let's try it again.

19
00:01:08.240 --> 00:01:09.180
There it is.

20
00:01:09.180 --> 00:01:10.300
So we can click this and

21
00:01:10.300 --> 00:01:16.084
we basically get the output of
whatever JSON this endpoint emitted.

22
00:01:17.156 --> 00:01:23.150
So if you've ever used something like post
man this does basically the same thing.

23
00:01:23.150 --> 00:01:26.350
The benefit being,
you can check this file into your app.

24
00:01:26.350 --> 00:01:30.210
So this kind of describes exactly
how this backend should work.

25
00:01:30.210 --> 00:01:33.660
You can even do stuff like this,
where this is a PUT request.

26
00:01:33.660 --> 00:01:35.281
This is a header here.

27
00:01:35.281 --> 00:01:38.120
You can use HTTP/1.1 or HTTP/2.

28
00:01:38.120 --> 00:01:40.288
And here is the payload, so

29
00:01:40.288 --> 00:01:46.150
this would like set the contents of
a shopping cart, I had that selected.

30
00:01:47.600 --> 00:01:50.580
Sets the contents of a shopping
cart to a particular thing.

31
00:01:50.580 --> 00:01:53.414
Apparently, that's something
has gone wrong with that,

32
00:01:53.414 --> 00:01:54.780
let's try it one more time.

33
00:01:56.430 --> 00:01:58.902
Nope, it doesn't like that for

34
00:01:58.902 --> 00:02:02.816
some reason.
&gt;&gt; Mike North: But really,

35
00:02:02.816 --> 00:02:07.720
really nice in terms of being able
to work with a backend like this.

36
00:02:07.720 --> 00:02:08.910
So that's number one.

37
00:02:08.910 --> 00:02:10.458
That is REST Client.

38
00:02:10.458 --> 00:02:16.976
Number two.
&gt;&gt; Mike North: So

39
00:02:16.976 --> 00:02:21.962
when working with CSS, there are a couple
things you have to pay attention to.

40
00:02:21.962 --> 00:02:25.120
And as we've focus on making
more performance apps,

41
00:02:25.120 --> 00:02:29.891
we need to have an understanding about
what's cheap and what's expensive in CSS

42
00:02:29.891 --> 00:02:34.870
the same way that we know what's cheap and
what's expensive in code.

43
00:02:34.870 --> 00:02:37.053
So there's a great website here and

44
00:02:37.053 --> 00:02:41.830
I will plug it
&gt;&gt; Mike North: It's called CSS Triggers.

45
00:02:41.830 --> 00:02:45.950
And effectively,
what this describes is the cost

46
00:02:45.950 --> 00:02:49.330
of altering different CSS properties.

47
00:02:49.330 --> 00:02:54.440
If you see, we've got three markers here,
Layout, Paint, and Composite.

48
00:02:54.440 --> 00:02:56.380
Composites are generally cheap.

49
00:02:56.380 --> 00:02:59.240
If you have to re-composite,
it just means that you've got two or

50
00:02:59.240 --> 00:03:03.910
three pre-calculated layers, right, maybe
with some opacity involved or something.

51
00:03:04.970 --> 00:03:08.330
They're held in memory and you just have
to maybe move them with respect to one

52
00:03:08.330 --> 00:03:13.670
another, and then figure out what is
the resultant combination of that

53
00:03:13.670 --> 00:03:18.120
thing that those layers become
when they're put together.

54
00:03:18.120 --> 00:03:20.020
So that's pretty cheap.

55
00:03:20.020 --> 00:03:22.256
Painting is a level more expensive,

56
00:03:22.256 --> 00:03:27.233
and that would require on a particular
layer, let's say we've changed a color,

57
00:03:27.233 --> 00:03:30.637
we have to go and
redraw a particular area of that layer.

58
00:03:30.637 --> 00:03:33.574
That's a little bit more
expensive than simply moving,

59
00:03:33.574 --> 00:03:37.690
basically doing the little linear
algebra that's required for compositing.

60
00:03:39.030 --> 00:03:41.740
The most expensive thing
by far is a relayout.

61
00:03:41.740 --> 00:03:47.210
And that would be like if we
changed the dimensions of a div or

62
00:03:47.210 --> 00:03:51.990
something, or
like an image size was not defined and

63
00:03:51.990 --> 00:03:55.910
it arrived on our HTML
after the page loaded.

64
00:03:55.910 --> 00:03:59.680
And it sort of sent all the text
around flying in various directions.

65
00:03:59.680 --> 00:04:03.480
We basically have to calculate
the size of everything on the page.

66
00:04:03.480 --> 00:04:06.270
And that is the most
expensive thing by far.

67
00:04:06.270 --> 00:04:09.880
So it's good to know about these things,
and it varies from browser to browser.

68
00:04:09.880 --> 00:04:13.810
What this extension does is it
adds something in the gutter here

69
00:04:13.810 --> 00:04:17.290
that helps you understand for
a given property

70
00:04:17.290 --> 00:04:22.580
what all is required in order
to respond to that change.

71
00:04:22.580 --> 00:04:26.330
For example, let's say we had a modal.

72
00:04:27.600 --> 00:04:32.979
And when that modal is open,
&gt;&gt; Mike North: So

73
00:04:32.979 --> 00:04:37.998
the modal starts off at,

74
00:04:37.998 --> 00:04:42.063
let's say left 0.

75
00:04:42.063 --> 00:04:50.283
And when the modal is open we wanna
use like a transition of left,

76
00:04:50.283 --> 00:04:56.233
and if we're gonna take like 0.3 seconds.

77
00:04:56.233 --> 00:05:01.398
And we're gonna say left is 300.
&gt;&gt; Mike North: So

78
00:05:01.398 --> 00:05:05.730
what we've done here is like this is
gonna require a whole bunch of work.

79
00:05:05.730 --> 00:05:08.490
A re-layout, a repaint,
and a re-composite.

80
00:05:08.490 --> 00:05:17.638
If we instead did something like this,
&gt;&gt; Mike North: That

81
00:05:17.638 --> 00:05:23.000
will actually create the same visual
result, but it's just a re-composite.

82
00:05:23.000 --> 00:05:25.710
From many browsers this work can
actually be done on the GPU,

83
00:05:25.710 --> 00:05:28.930
so you get a really smooth
animation coming out of the back.

84
00:05:28.930 --> 00:05:32.710
There's way too much information
to remember and to keep track of.

85
00:05:32.710 --> 00:05:35.660
I just love having these
little gutter things here, so

86
00:05:35.660 --> 00:05:39.980
that basically whenever I'm doing anything
with CSS that involves animation,

87
00:05:39.980 --> 00:05:41.630
I wanna see little green marks here.

88
00:05:41.630 --> 00:05:43.880
I certainly want, if I see a purple one,

89
00:05:43.880 --> 00:05:45.959
think about whether there's any
better way that I can do things.

90
00:05:54.640 --> 00:05:57.980
So the last one I wanna
talk about is Code Runner.

91
00:05:57.980 --> 00:05:59.472
Code Runner is fantastic.

92
00:05:59.472 --> 00:06:04.329
So I've got these little scratchpad
that I have been playing with

93
00:06:04.329 --> 00:06:06.280
all day like to copy .js.

94
00:06:09.770 --> 00:06:13.684
Code Runner adds this
little play button up here,

95
00:06:13.684 --> 00:06:18.820
where I can just say run code and
it will say, where's my output?

96
00:06:23.670 --> 00:06:32.551
Let's try that one more time.
&gt;&gt; Mike North: I didn't save the file,

97
00:06:32.551 --> 00:06:33.720
but there it is.

98
00:06:33.720 --> 00:06:40.621
So you can select the piece of code and
run that.

99
00:06:40.621 --> 00:06:42.240
I think the command here is like,

100
00:06:49.563 --> 00:06:50.447
&gt;&gt; Mike North: Run code and

101
00:06:50.447 --> 00:06:55.119
it will just run.
&gt;&gt; Mike North: It just runs

102
00:06:55.119 --> 00:06:56.860
the saved file.

103
00:06:56.860 --> 00:07:01.290
But it works in a variety of languages and
you can map, like you can map

104
00:07:01.290 --> 00:07:04.790
things to custom executables, particularly
when you're learning a new language.

105
00:07:04.790 --> 00:07:08.280
If you start just learning typescript,
it's really nice to just have a scratch

106
00:07:08.280 --> 00:07:12.090
pad where you can just write a small
program and hit the play button and

107
00:07:12.090 --> 00:07:16.490
see what it evaluates to, instead of
having to worry about setting up tools and

108
00:07:16.490 --> 00:07:17.650
running commands.

109
00:07:17.650 --> 00:07:21.580
This basically has everything it
needs to take a simple file, and

110
00:07:21.580 --> 00:07:22.800
to show you the output.

111
00:07:22.800 --> 00:07:29.820
So this is probably my top three
recommended Visual Studio extensions.

