WEBVTT

1
00:00:00.103 --> 00:00:01.153
&gt;&gt; Mike North: Welcome back.

2
00:00:01.153 --> 00:00:06.390
We're going to be adding TSLint as
a task to finding our task JSON.

3
00:00:06.390 --> 00:00:10.798
Building a regular expression to kind
of take that raw text output and

4
00:00:10.798 --> 00:00:12.247
make some sense of it.

5
00:00:12.247 --> 00:00:18.045
And then see if we can get the problem
that you're looking to the right groups.

6
00:00:18.045 --> 00:00:20.901
Right capture groups of
that regular expression, so

7
00:00:20.901 --> 00:00:24.920
that these problems start
showing up in our problems tab.

8
00:00:24.920 --> 00:00:27.750
So I'm just gonna copy this here.

9
00:00:27.750 --> 00:00:30.480
Go to our tasks.json here, and

10
00:00:30.480 --> 00:00:35.530
I'm gonna add this as a second task
on top of what we built there before.

11
00:00:37.142 --> 00:00:40.501
And the,
I'll just use it as a model actually.

12
00:00:40.501 --> 00:00:44.350
So we'll say the task
name is gonna be TSLint.

13
00:00:48.595 --> 00:00:54.400
&gt;&gt; Mike North: The type,
is going to be a shell.

14
00:00:57.130 --> 00:00:58.280
Why is this?

15
00:00:58.280 --> 00:01:00.000
Sorry the task name.

16
00:01:00.000 --> 00:01:03.381
One of the great things about this,
if you know that like,

17
00:01:03.381 --> 00:01:07.045
we got some feedback here saying
property name is not allowed.

18
00:01:07.045 --> 00:01:11.500
Even JSON is, there is some like
type of information for JSON.

19
00:01:11.500 --> 00:01:14.915
There is some domain that hosts
a bunch of JSON Schemas, and

20
00:01:14.915 --> 00:01:19.800
it knows exactly what properties should
be here and what shouldn't be here.

21
00:01:19.800 --> 00:01:23.175
So really helps, assists us in
building this thing up reasonably.

22
00:01:23.175 --> 00:01:28.468
The command, is gonna be this,

23
00:01:28.468 --> 00:01:34.162
tslint, args are gonna be those.

24
00:01:40.582 --> 00:01:41.640
&gt;&gt; Mike North: Something like that.

25
00:01:42.840 --> 00:01:47.323
And we can try to run this and
see what happens.

26
00:01:47.323 --> 00:01:49.742
So I did actually give some
additional instructions.

27
00:01:49.742 --> 00:01:50.790
No I didn't.

28
00:01:50.790 --> 00:01:51.350
We're good.

29
00:01:51.350 --> 00:01:54.010
That must be the last
exercise we're about to do.

30
00:01:54.010 --> 00:01:59.630
So when we run TSLint,
we're gonna say run task, TSlint.

31
00:02:00.980 --> 00:02:05.490
Don't bother scanning the output,
and here we go, we get some errors.

32
00:02:05.490 --> 00:02:07.095
Mostly having to do with alignment and

33
00:02:07.095 --> 00:02:10.970
JSdocs and some consecutive
blank lines being forbidden.

34
00:02:10.970 --> 00:02:15.470
I'm gonna grab this whole thing,
this is a nice variety of errors, and

35
00:02:15.470 --> 00:02:19.410
we're gonna go back to our little
regex helper here, paste those in, and

36
00:02:19.410 --> 00:02:20.500
we're gonna kinda start over.

37
00:02:22.050 --> 00:02:26.812
So this is pretty much right, it looks
like I can just tell by this first

38
00:02:26.812 --> 00:02:29.799
result here, I should probably add a dash,

39
00:02:29.799 --> 00:02:33.350
as something that can be
a valid part of a file name and

40
00:02:33.350 --> 00:02:38.636
everything else looks like I'm getting
the complete file name pretty well.

41
00:02:38.636 --> 00:02:43.999
Okay, so the next thing is you've got
a bracket and then a line number.

42
00:02:43.999 --> 00:02:47.105
That's gonna be a zero through nine, and

43
00:02:47.105 --> 00:02:50.934
then plus just means one or
more of that character.

44
00:02:54.159 --> 00:02:58.823
&gt;&gt; Mike North: See pattern error,
zero through nine plus.

45
00:03:03.093 --> 00:03:05.062
&gt;&gt; Mike North: Why am I
getting a pattern error?

46
00:03:05.062 --> 00:03:07.285
&gt;&gt; [INAUDIBLE]
&gt;&gt; Speaker 2: I knew that.

47
00:03:09.593 --> 00:03:13.173
&gt;&gt; Mike North: Cuz a bracket as a
character literally you need to escape it.

48
00:03:13.173 --> 00:03:15.900
Cuz it means something
in regular expression.

49
00:03:15.900 --> 00:03:18.588
So that was the fix there,
literally the bracket.

50
00:03:18.588 --> 00:03:22.390
So there's one, here is the other comma.

51
00:03:22.390 --> 00:03:28.150
Basically another thing here we'll add
some number of characters of white-space,

52
00:03:28.150 --> 00:03:29.140
and a close.

53
00:03:29.140 --> 00:03:36.015
So now, you can see, we've got group
1 is gonna have a filename there,

54
00:03:36.015 --> 00:03:42.131
and then 68, and then group 3
is gonna be this number 1 here.

55
00:03:42.131 --> 00:03:48.819
We've got a colon, some space after that,
and then everything else.

56
00:03:50.992 --> 00:03:53.290
&gt;&gt; Mike North: We'll
call that the message.

57
00:03:53.290 --> 00:03:57.590
And I do, I did actually miss this first
thing, that that, there's a thing for

58
00:03:57.590 --> 00:03:59.540
that and it's called the severity.

59
00:03:59.540 --> 00:04:03.948
So we can add that at the beginning and
we'll just say it has to be a capital

60
00:04:03.948 --> 00:04:09.575
letter
&gt;&gt; Mike North: It'll be capital letter,

61
00:04:09.575 --> 00:04:12.100
one or more of them.

62
00:04:12.100 --> 00:04:15.130
So effectively here,
if we look at just one of these matches,

63
00:04:15.130 --> 00:04:19.800
we've got error as group 1,
group 2 is the filename,

64
00:04:19.800 --> 00:04:23.120
group 3 is the row number,
group 4 is the column number.

65
00:04:23.120 --> 00:04:28.280
And then group 5 is this message
consecutive spaces are not allowed.

66
00:04:28.280 --> 00:04:33.632
So we'll take this, probably have
to switch my color scheme again,

67
00:04:33.632 --> 00:04:38.083
so I can tell the difference
between like red and off red.

68
00:04:38.083 --> 00:04:39.915
We'll go to this one.

69
00:04:42.535 --> 00:04:46.304
&gt;&gt; Mike North: Pattern problem matcher,
so we define an owner and

70
00:04:46.304 --> 00:04:51.990
let's call this one, maybe it will
allow us to do that, let's see.

71
00:04:51.990 --> 00:04:55.290
Pattern is gonna be first the regex.

72
00:04:56.490 --> 00:05:02.310
We'll paste that in and then fix all
of the things we have to double slash,

73
00:05:02.310 --> 00:05:05.420
just cuz it's more special
character treatment.

74
00:05:06.840 --> 00:05:11.080
You do have to pass a string into this,
you cannot pass a regular expression.

75
00:05:11.080 --> 00:05:14.290
The reason being, this is JSON,
it's not a JavaScript file,

76
00:05:14.290 --> 00:05:18.910
and regx is not a valid
value in a JSON file.

77
00:05:18.910 --> 00:05:22.470
So there's our regx and then the first
thing we have is severity, so

78
00:05:22.470 --> 00:05:23.770
that's group 1.

79
00:05:23.770 --> 00:05:26.100
Then we have a file name, that's group 2.

80
00:05:26.100 --> 00:05:29.715
Then we have a line number,
that's group 3.

81
00:05:29.715 --> 00:05:36.165
4 is gonna be the column number and
the last one is the message, that's 5.

82
00:05:36.165 --> 00:05:38.286
If we save that and rerun our task.

83
00:05:43.524 --> 00:05:45.336
&gt;&gt; Mike North: We've got six problems.

84
00:05:45.336 --> 00:05:49.280
And if we open that up, we've got
this line stinks, that's still here.

85
00:05:49.280 --> 00:05:52.720
Cuz, typically you'd have something
you'd rerun over and over, and

86
00:05:52.720 --> 00:05:55.030
it 'll eventually stop
saying this line stinks.

87
00:05:55.030 --> 00:05:57.429
That's not the way that this
piece of software works,

88
00:05:57.429 --> 00:05:58.899
it always says this line stinks.

89
00:05:58.899 --> 00:06:03.647
Cart-store, it is, we have an issue here.

90
00:06:03.647 --> 00:06:07.238
We couldn't open the file,
I do like the way it structured here.

91
00:06:07.238 --> 00:06:13.120
One thing is, I see that we got
an absolute path here and relative path,

92
00:06:13.120 --> 00:06:18.135
there is something we forgot and
that is, what is it called?

93
00:06:23.992 --> 00:06:24.978
&gt;&gt; Mike North: It's a.

94
00:06:24.978 --> 00:06:27.291
&gt;&gt; Speaker 2: Well, file location.

95
00:06:27.291 --> 00:06:30.463
&gt;&gt; Mike North: It's inside
the problem matter?

96
00:06:30.463 --> 00:06:31.271
&gt;&gt; Speaker 2: Yeah.

97
00:06:31.271 --> 00:06:34.809
&gt;&gt; Mike North: Yep, file location and
that's gonna be an absolute path,

98
00:06:34.809 --> 00:06:36.166
good catch thank you.

99
00:06:36.166 --> 00:06:37.942
&gt;&gt; Speaker 2: I cheated,
I looked at your repo.

100
00:06:37.942 --> 00:06:39.126
&gt;&gt; Mike North: You looked at my solution?

101
00:06:39.126 --> 00:06:40.579
&gt;&gt; Speaker 2: I did.

102
00:06:40.579 --> 00:06:47.984
&gt;&gt; Mike North: All right, so now if we
run it one more time, run the task.

103
00:06:47.984 --> 00:06:49.528
Open up our problems tab.

104
00:06:49.528 --> 00:06:52.880
Okay, all of our absolute paths fell away.

105
00:06:52.880 --> 00:06:54.288
And now if we click on these,

106
00:06:54.288 --> 00:06:57.639
it's actually showing us that it
was apparently supposed to like,

107
00:06:57.639 --> 00:07:01.598
hinting on these apps, it's really
important that we do that for some reason.

108
00:07:01.598 --> 00:07:03.406
Save that and if we were to run again.

109
00:07:05.380 --> 00:07:08.270
&gt;&gt; Mike North: It should stop
complaining about that feature.

110
00:07:08.270 --> 00:07:12.802
So any type of thing like this, when
it's a task that generates this output,

111
00:07:12.802 --> 00:07:17.471
you have to explicitly run it in order to,
for it to like basically generate a new

112
00:07:17.471 --> 00:07:21.825
set of issues, which no longer have
those particular concerns anymore.

113
00:07:21.825 --> 00:07:23.522
So this tells us what?

114
00:07:23.522 --> 00:07:27.290
That JSDoc is not formatted
correctly on this line.

115
00:07:30.679 --> 00:07:31.620
&gt;&gt; Mike North: Seriously?

116
00:07:31.620 --> 00:07:33.080
Could that be it?

117
00:07:33.080 --> 00:07:33.650
A space?

118
00:07:35.270 --> 00:07:36.650
And that was it.

119
00:07:36.650 --> 00:07:40.970
So consecutive blank lines are forbidden.

120
00:07:40.970 --> 00:07:43.470
Get rid of that, and we should be back to

121
00:07:43.470 --> 00:07:48.201
just having the one error from our
echo that always, does its thing.

122
00:07:49.610 --> 00:07:52.810
Here no more TypeScript,
no more TSLint errors.

123
00:07:52.810 --> 00:07:55.246
Now there's a great extension
you can install for

124
00:07:55.246 --> 00:07:58.690
TSLint that will not require you
to run this task over and over.

125
00:07:58.690 --> 00:08:02.360
But this is great if you had some
internal tool that maybe scanned for

126
00:08:02.360 --> 00:08:05.610
specific issues,
that relate to your particular code, or

127
00:08:05.610 --> 00:08:08.540
maybe it's like test failures,
this, I have not

128
00:08:08.540 --> 00:08:12.800
taught you how to capture arbitrary app,
put the looks kinda like this and

129
00:08:12.800 --> 00:08:18.490
to turn it into problems that the user
will see in their, right in their editor.

