WEBVTT

1
00:00:00.030 --> 00:00:03.548
&gt;&gt; Mike North: So
where we're going to next is Emmet.

2
00:00:03.548 --> 00:00:05.697
And this leads up to our
first exercise here.

3
00:00:05.697 --> 00:00:08.330
So we're looking at Emmet.md now.

4
00:00:08.330 --> 00:00:13.577
Oop, I have and error, silly image paths.

5
00:00:13.577 --> 00:00:20.175
We can fix that up here,
I think I'm one level too deep.

6
00:00:20.175 --> 00:00:22.194
Yep, there we go.

7
00:00:22.194 --> 00:00:24.353
I only ever learned this at a basic level.

8
00:00:24.353 --> 00:00:28.405
But it is,
it is proven to be really useful.

9
00:00:28.405 --> 00:00:32.190
And I'm just gonna show you
where we're going with this.

10
00:00:32.190 --> 00:00:38.586
So I'm just gonna open
up a scratch pad here.

11
00:00:38.586 --> 00:00:39.954
Sorry.

12
00:00:39.954 --> 00:00:45.343
So what I've got, just ignore that
thing at the top for the moment.

13
00:00:45.343 --> 00:00:50.660
Emmet basically allows us to
write abbreviations for things,

14
00:00:50.660 --> 00:00:56.690
and then hit the Tab key, and
that abbreviation will get expanded out.

15
00:00:56.690 --> 00:01:01.222
So for example,
if I wanted to say I wish to render a div,

16
00:01:01.222 --> 00:01:06.633
they do something like this,
div tab and we've got a div, right?

17
00:01:06.633 --> 00:01:09.175
So I don't have to write
the word div twice,

18
00:01:09.175 --> 00:01:13.517
I don't have to do the open then a close
tag, already pretty interesting.

19
00:01:13.517 --> 00:01:17.836
I can also use CSS like things, right?

20
00:01:17.836 --> 00:01:24.613
Like a class, so I can say,
&gt;&gt; Mike North: .frontendmasters tab,

21
00:01:24.613 --> 00:01:27.795
and I'll get a div with a class,
frontend masters.

22
00:01:27.795 --> 00:01:35.330
So, when we get complicated here, say.

23
00:01:35.330 --> 00:01:41.347
What I've created up here is,
&gt;&gt; Mike North: A more

24
00:01:41.347 --> 00:01:43.534
elaborate expansion here.

25
00:01:43.534 --> 00:01:45.937
And I'm just gonna expand
out what that looks like.

26
00:01:47.993 --> 00:01:53.068
&gt;&gt; Mike North: So I have created an
unordered list with ten list items in it,

27
00:01:53.068 --> 00:01:55.467
each of which has an img tag.

28
00:01:55.467 --> 00:01:58.613
And you'll note where my cursor
is positioned right now.

29
00:01:58.613 --> 00:02:01.237
It's sort of in the first
blank to fill in.

30
00:02:01.237 --> 00:02:02.253
And as I hit Tab,

31
00:02:02.253 --> 00:02:07.147
I'm actually gonna be able to sort of
cycle through all of these little blanks.

32
00:02:07.147 --> 00:02:11.089
So the idea here is if you're to create
this HTML structure you'd have to do

33
00:02:11.089 --> 00:02:12.778
a bunch of copying and pasting,

34
00:02:12.778 --> 00:02:15.797
and like positioning your
cursor in just the right spot.

35
00:02:15.797 --> 00:02:19.454
Or get really used to like advancing
your cursor into the position perfectly.

36
00:02:19.454 --> 00:02:24.554
Here it's almost just like, let me
define the form I wish to fill out and

37
00:02:24.554 --> 00:02:26.690
then let's fill in the form.

38
00:02:26.690 --> 00:02:31.101
And it greatly reduces the number of key
strokes that you have to worry about.

39
00:02:31.101 --> 00:02:33.772
So this is what we're gonna talk about,
this is Emmet.

40
00:02:37.093 --> 00:02:41.462
&gt;&gt; Mike North: And the idea here as you
just saw, we can speed up repetitive tasks

41
00:02:41.462 --> 00:02:45.210
by typing in some abbreviation and
hitting the Tab key.

42
00:02:45.210 --> 00:02:48.759
This is available, it doesn't
matter if Code is your main editor,

43
00:02:48.759 --> 00:02:51.642
it's available as a plug-in for
almost everything.

44
00:02:51.642 --> 00:02:56.644
I've used it in Atom,
I've used it in Sublime,

45
00:02:56.644 --> 00:02:59.457
I've used it in WebStorm.

46
00:02:59.457 --> 00:03:04.865
And once you get used to these
things it works really easily and

47
00:03:04.865 --> 00:03:07.886
you internalize it very quickly.

48
00:03:07.886 --> 00:03:12.738
And one of the ways you can internalize
it quickly is just realize it's basically

49
00:03:12.738 --> 00:03:16.106
the same way you describe
HTML in the CSS world, right?

50
00:03:16.106 --> 00:03:17.696
Dot for classes.

51
00:03:17.696 --> 00:03:21.993
So there are plugins for most editors.

52
00:03:21.993 --> 00:03:24.316
It is built into Visual Studio code.

53
00:03:24.316 --> 00:03:27.333
You do not need an extension to
add it to Visual Studio code.

54
00:03:27.333 --> 00:03:31.228
It's already in there, and it's one of
these things that just sort of works.

55
00:03:31.228 --> 00:03:35.207
In fact, it is the foundation for
a concept of code snippets,

56
00:03:35.207 --> 00:03:38.420
where you can define your
own repetitive chunks of

57
00:03:38.420 --> 00:03:43.336
code that might be unique to you as
a user or, your workspace, for example.

58
00:03:43.336 --> 00:03:46.328
And Emmet is the basis for doing that,

59
00:03:46.328 --> 00:03:50.546
you define your own little
custom Emmet completion.

60
00:03:50.546 --> 00:03:54.318
If you're a React developer,
if you use React or

61
00:03:54.318 --> 00:03:59.847
React like things such as Preact or
Inferno, this works in JSX as well.

62
00:03:59.847 --> 00:04:05.359
So you can expand HTML
into React-friendly CSS.

63
00:04:05.359 --> 00:04:09.940
Or you'll even get class name
instead of class because you

64
00:04:09.940 --> 00:04:14.717
can't use class as a reserved
word in the JavaScript world.

65
00:04:17.399 --> 00:04:20.500
&gt;&gt; Mike North: And for that matter you
can use it in like handlebars as well.

66
00:04:20.500 --> 00:04:23.472
You'll just need to bring in
some handlebars snippets.

67
00:04:26.292 --> 00:04:30.689
&gt;&gt; Mike North: So, the way you want to
think of this is, we use CSS selectors for

68
00:04:30.689 --> 00:04:31.918
DOM generation.

69
00:04:31.918 --> 00:04:37.085
And as we saw, the cursor kind of ends up
being in a really convenient place for

70
00:04:37.085 --> 00:04:39.708
us to start filling in all of the gaps for

71
00:04:39.708 --> 00:04:43.062
our list of grocery items
that we just generated.

72
00:04:43.062 --> 00:04:49.457
That we could, those gaps are likely
to change on a per list item basis.

73
00:04:49.457 --> 00:04:52.725
So we've gotten to the point
where we've extended it out and

74
00:04:52.725 --> 00:04:55.041
then we can go about
whatever we need to do.

75
00:04:55.041 --> 00:04:57.527
Some of this may look messy at first.

76
00:04:57.527 --> 00:05:02.589
Keep in mind you don't need to worry about
Emmet readability because it's disposable.

77
00:05:02.589 --> 00:05:05.189
Like you type it and
you hit Tab and it's gone.

78
00:05:05.189 --> 00:05:09.766
So there's no, even if you're
the only one who understands it,

79
00:05:09.766 --> 00:05:12.190
you will benefit from it, right?

80
00:05:12.190 --> 00:05:16.007
Because you're transforming it into
something else, as opposed to other types

81
00:05:16.007 --> 00:05:18.994
of mark-up for that mark-up is
long living in your document.

82
00:05:18.994 --> 00:05:25.015
If that were for example, we had that
complicated string i typed in and

83
00:05:25.015 --> 00:05:30.539
we saved that and like something
magically made HTML from that.

84
00:05:30.539 --> 00:05:32.641
But the string was
committed into our code.

85
00:05:32.641 --> 00:05:35.299
We probably want to worry
about the readability there.

86
00:05:35.299 --> 00:05:38.787
So we already showed
how we could use a div.

87
00:05:38.787 --> 00:05:41.678
We could apply a class here.

88
00:05:41.678 --> 00:05:44.465
I do want to show you
one thing about this.

89
00:05:44.465 --> 00:05:47.959
So you'll note we didn't
specify a tag name here.

90
00:05:47.959 --> 00:05:54.056
By default you get a div, but there is
some sense of contextual awareness.

91
00:05:54.056 --> 00:05:57.214
So, and it's not about the context
of where you expanding.

92
00:05:57.214 --> 00:06:03.936
So, if I did like this, if I was inside a
span, and I had something in it like this.

93
00:06:03.936 --> 00:06:06.038
It'll become a div.

94
00:06:06.038 --> 00:06:13.400
But if I did something like this, span,
and then used this descendant selector,

95
00:06:13.400 --> 00:06:17.986
you'll see that I get like
because I am saying I want

96
00:06:17.986 --> 00:06:23.338
an element with this class,
to be outside this outerspan.

97
00:06:23.338 --> 00:06:26.798
We're already in a world
of inline elements, and so

98
00:06:26.798 --> 00:06:29.473
creates another inline element for us,

99
00:06:29.473 --> 00:06:35.112
same with an unordered list,
&gt;&gt; Mike North: We get an li.

100
00:06:35.112 --> 00:06:38.526
So there is some smart detection of,
what is your parent?

101
00:06:38.526 --> 00:06:42.566
But it only looks at
the completion itself, right?

102
00:06:42.566 --> 00:06:46.235
That's the only stuff
within that string matters.

103
00:06:46.235 --> 00:06:48.605
It doesn't matter if there's
other text around it.

104
00:06:48.605 --> 00:06:52.922
Emmet only operates on that little string
and replaces it with something else.

105
00:06:52.922 --> 00:06:54.745
It has no knowledge of
what's going on around it.

106
00:07:00.006 --> 00:07:04.200
&gt;&gt; Mike North: So just like with CSS,
we can use IDs as well with a hashtag.

107
00:07:04.200 --> 00:07:09.228
And you see here we've got one tag
that has both an ID and a class on it.

108
00:07:09.228 --> 00:07:13.544
You could also use .foo.bar
whatever to add multiple classes.

109
00:07:13.544 --> 00:07:17.270
And again, in React this would not
be class, it would be a class name.

110
00:07:17.270 --> 00:07:20.452
This is the React appropriate expansion.

111
00:07:20.452 --> 00:07:25.345
Some tags end up having default attributes
that you sort of must implement.

112
00:07:25.345 --> 00:07:28.156
An img tag doesn't really
make sense without a source.

113
00:07:28.156 --> 00:07:33.079
And you're not making it accessible
unless you have an alt there.

114
00:07:33.079 --> 00:07:39.093
So only a screen reader can
dictate to a vision impaired user.

115
00:07:39.093 --> 00:07:43.573
So it will basically like give
you these to fill out by default.

116
00:07:43.573 --> 00:07:50.610
So, similar in concept
to what we have in CSS.

117
00:07:50.610 --> 00:07:54.244
There's a direct descendant selector and
a sibling selector.

118
00:07:54.244 --> 00:07:59.898
I am likening this to CSS, so that we
can remember how these are treated.

119
00:07:59.898 --> 00:08:04.826
But keep in mind,
what we're trying to do with CSS is very

120
00:08:04.826 --> 00:08:08.432
specifically target one or more things.

121
00:08:08.432 --> 00:08:13.421
We would say only this pen that's inside
this div that's inside the element of this

122
00:08:13.421 --> 00:08:14.642
particular class.

123
00:08:14.642 --> 00:08:17.522
Here we're looking to
generate a chunk of DOM.

124
00:08:17.522 --> 00:08:22.420
So there's a slight conceptual difference
here in that we're trying to describe like

125
00:08:22.420 --> 00:08:24.308
the structure of an object here.

126
00:08:24.308 --> 00:08:30.380
Whereas in CSS we're trying to surgically
get down to a very specific thing and

127
00:08:30.380 --> 00:08:33.978
only apply a style where
we intend to apply it.

128
00:08:33.978 --> 00:08:38.374
So the descendant selector
here can be used to say,

129
00:08:38.374 --> 00:08:43.498
I want to put stuff inside
an element that I'm generating.

130
00:08:43.498 --> 00:08:49.074
And again here, we saw that we could
drop the li here, the context of already

131
00:08:49.074 --> 00:08:54.318
being inside an unordered list would
give us that li by default anyway.

132
00:08:54.318 --> 00:08:56.813
So we could just remove that piece.

133
00:08:56.813 --> 00:09:01.721
So the sibling selector just basically
says I want these things to be

134
00:09:01.721 --> 00:09:03.281
side by side by side.

135
00:09:06.926 --> 00:09:09.794
&gt;&gt; Mike North: So
there's also this climb up operator.

136
00:09:09.794 --> 00:09:14.090
And I don't use this at all.

137
00:09:14.090 --> 00:09:18.621
If you look through my Emmet history for
like the past decade,

138
00:09:18.621 --> 00:09:23.777
you would not find more than one or
two occurrences of this character.

139
00:09:23.777 --> 00:09:27.520
And it was probably just
me playing with it, and

140
00:09:27.520 --> 00:09:30.709
then having a disgusted look on my face.

141
00:09:30.709 --> 00:09:32.868
So what's happening here?

142
00:09:32.868 --> 00:09:34.146
Let's read left to right.

143
00:09:34.146 --> 00:09:36.746
So we're,
I should not double click in these.

144
00:09:36.746 --> 00:09:40.687
So we have a div, and
then a sibling div that follows it and

145
00:09:40.687 --> 00:09:42.505
so that's this one here.

146
00:09:42.505 --> 00:09:48.154
And then inside that second div,
we've got a paragraph with a span and

147
00:09:48.154 --> 00:09:52.863
m next to it, so
that's this thing here on the third line.

148
00:09:52.863 --> 00:09:57.704
And then basically we've got to
climb up to get out of that,

149
00:10:01.536 --> 00:10:04.022
&gt;&gt; Mike North: Paragraph tag effectively.

150
00:10:04.022 --> 00:10:08.666
So think of it as canceling this out,
this descendant selector thing.

151
00:10:08.666 --> 00:10:13.328
And so we climb out and now we're back
inside the scope of this second div, and

152
00:10:13.328 --> 00:10:15.423
we can put this block put element.

153
00:10:15.423 --> 00:10:22.389
I don't use this, and I will show you why,
cuz we can use parenthesis.

154
00:10:22.389 --> 00:10:25.047
Parenthesis makes sense to me,
it's just like math, right?

155
00:10:25.047 --> 00:10:27.768
Where you can group some stuff together,
and

156
00:10:27.768 --> 00:10:30.714
that is regarded as sort
of a single expression.

157
00:10:30.714 --> 00:10:34.976
So in this case, we're able to create
exactly the same thing, but to my eye,

158
00:10:34.976 --> 00:10:37.612
this is much easier to
reason your way through.

159
00:10:37.612 --> 00:10:42.140
Or basically saying, I've gat two side
by side divs, inside the second one,

160
00:10:42.140 --> 00:10:43.660
I've got the following.

161
00:10:43.660 --> 00:10:48.654
First, a paragraph tag with a span and
siblings inside of it,

162
00:10:48.654 --> 00:10:55.236
close parenthesis, and then next to that,
a whole thing, I've got a blockquote.

163
00:10:55.236 --> 00:10:58.865
So I can read this much more easily it
makes sense a bit much more easily.

164
00:10:58.865 --> 00:11:01.768
So I tend to never ever use
that climb up operator.

165
00:11:01.768 --> 00:11:05.123
I do use this once in a while.

166
00:11:05.123 --> 00:11:07.232
And what I'm showing you here, by the way,

167
00:11:07.232 --> 00:11:10.092
this is much more complicated
than my typical use of Emmet.

168
00:11:10.092 --> 00:11:14.242
You will see that as you start
experimenting with this,

169
00:11:14.242 --> 00:11:19.011
a couple small, simple expansions
are way easier than trying to

170
00:11:19.011 --> 00:11:23.780
craft the perfect thing that will
just dump out some complicated

171
00:11:23.780 --> 00:11:28.926
structure perfectly on the first
expansion like it's not worth it.

172
00:11:28.926 --> 00:11:33.780
In fact you'll end up basically
putting enough mental energy into

173
00:11:33.780 --> 00:11:38.633
trying to think about what you want
to expand that you basically eat

174
00:11:38.633 --> 00:11:42.633
up all the productivity
benefits of using this thing.

175
00:11:42.633 --> 00:11:47.453
if you have to think too hard about like
exactly what incantation you have to

176
00:11:47.453 --> 00:11:49.979
utter in order to make this stuff work,

177
00:11:49.979 --> 00:11:53.361
to generate something of
significant complexity.

178
00:11:53.361 --> 00:11:56.971
This is already at the point
where it's a little bit,

179
00:11:56.971 --> 00:11:59.389
this is like giving questionable.

180
00:11:59.389 --> 00:12:02.888
So, multiplication is
something that I do use, and

181
00:12:02.888 --> 00:12:05.204
I typically only use it for lists.

182
00:12:05.204 --> 00:12:07.094
You could use it for whatever but

183
00:12:07.094 --> 00:12:10.463
I find that lists are where
this ends up shining the most.

184
00:12:10.463 --> 00:12:15.005
And in this case, we're basically
saying for a given element,

185
00:12:15.005 --> 00:12:17.707
we can say times 5, times n, right?

186
00:12:17.707 --> 00:12:18.776
Any number of these.

187
00:12:18.776 --> 00:12:23.292
And here we're gonna get col and
then five li's inside of it.

188
00:12:23.292 --> 00:12:26.348
And then we could actually
keep going inside of this, and

189
00:12:26.348 --> 00:12:30.866
that would basically say 5 li's, each of
which has the following inside of it, and

190
00:12:30.866 --> 00:12:32.281
then you can continue on.

191
00:12:35.195 --> 00:12:39.734
&gt;&gt; Mike North: So we can use these braces
to add text to the body of elements.

192
00:12:39.734 --> 00:12:43.872
And I don't find that I use this,
but if you see it,

193
00:12:43.872 --> 00:12:46.480
this is what it's trying to do.

194
00:12:46.480 --> 00:12:50.392
This is where we're just
showing off like crazy.

195
00:12:50.392 --> 00:12:52.678
See I've got a dollar sign here,

196
00:12:52.678 --> 00:12:57.007
think of it that's like your
iteration variable within the for

197
00:12:57.007 --> 00:13:02.900
loop that's creating this, and so we've
got one, two, three, four, five here.

198
00:13:02.900 --> 00:13:08.451
Again, you'll be hard pressed to find
that you're using this all the time.

199
00:13:08.451 --> 00:13:11.757
But it may be that someone
gets used to this and

200
00:13:11.757 --> 00:13:14.460
finds an occasional place to use it.

