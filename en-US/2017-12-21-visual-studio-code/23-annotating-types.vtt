WEBVTT

1
00:00:00.390 --> 00:00:05.138
&gt;&gt; Mike North: So let's talk about ways,
without going full TypeScript.

2
00:00:05.138 --> 00:00:08.621
Let's talk about ways that
we can annotate types,

3
00:00:08.621 --> 00:00:12.680
add information to our JavaScript
in the form of comments.

4
00:00:12.680 --> 00:00:18.741
So the main way to do it is to use
this @ type kind of comment here.

5
00:00:18.741 --> 00:00:22.260
It is a JSDoc comment.

6
00:00:22.260 --> 00:00:28.818
JSDoc is just a particular convention for
writing comments in JavaScript files.

7
00:00:28.818 --> 00:00:31.746
And you gotta make sure you begin
with the two asterisks here,

8
00:00:31.746 --> 00:00:33.672
it always has to be an in-line comment.

9
00:00:33.672 --> 00:00:38.642
Basically, it always has to look just like
this where between the braces, you have

10
00:00:38.642 --> 00:00:43.760
the type that you wish to, basically, here
we're saying, value is of type number.

11
00:00:46.190 --> 00:00:49.270
So, in this case, you would start
to see this is an error, here.

12
00:00:49.270 --> 00:00:53.780
We can paste that in, see what happens.

13
00:00:53.780 --> 00:00:58.304
I need to turn type checking on.
&gt;&gt; Mike North: And so,

14
00:00:58.304 --> 00:01:02.327
even if we were to get rid of this,
now, you can see,

15
00:01:02.327 --> 00:01:06.634
before we had the initial
assignment of this variable.

16
00:01:06.634 --> 00:01:08.474
That was determining the type.

17
00:01:08.474 --> 00:01:10.321
Here we're annotating it.

18
00:01:10.321 --> 00:01:15.267
So if I were to change this to string and

19
00:01:15.267 --> 00:01:20.197
save it.
&gt;&gt; Mike North: It just hasn't picked

20
00:01:20.197 --> 00:01:21.637
up on something.

21
00:01:21.637 --> 00:01:26.410
Come on now.
&gt;&gt; Mike North: There we go.

22
00:01:26.410 --> 00:01:27.781
Just had to kick it in the butt.

23
00:01:27.781 --> 00:01:30.819
It was a background process,
we were probably waiting for

24
00:01:30.819 --> 00:01:35.239
it to come back.
&gt;&gt; Mike North: So if you change it back to

25
00:01:35.239 --> 00:01:41.968
number, let's see how long it takes.
&gt;&gt; Mike North: It

26
00:01:41.968 --> 00:01:43.093
does take a little while.

27
00:01:50.892 --> 00:01:53.409
&gt;&gt; Mike North: All right there we go.

28
00:01:53.409 --> 00:01:57.228
Apparently you have to perturb the code
a little bit to get it to actually do it's

29
00:01:57.228 --> 00:01:57.800
checking.

30
00:01:57.800 --> 00:02:04.368
But we're getting this and in fact we can,
if we look at this problems tab,

31
00:02:04.368 --> 00:02:08.769
which is in this panel at
the bottom of the editor.

32
00:02:08.769 --> 00:02:15.085
You see that it's been detected as it
relate to this JS service here, right?

33
00:02:15.085 --> 00:02:18.535
And it says type 21 is not
assignable two type number.

34
00:02:18.535 --> 00:02:21.798
So you can add this to a couple
different files and then go and

35
00:02:21.798 --> 00:02:25.793
play whack-a-mole and swat,
all of the type mismatches you may have.

36
00:02:35.934 --> 00:02:37.061
&gt;&gt; Mike North: So constructors

37
00:02:37.061 --> 00:02:38.832
are regarded as type two.

38
00:02:38.832 --> 00:02:43.989
Anything that you can use a new operator
with, you can use that as a type.

39
00:02:43.989 --> 00:02:47.509
So you can say that we have
a type of React component or

40
00:02:47.509 --> 00:02:51.990
we have a type of cart store, or
we have a type of listener support.

41
00:02:51.990 --> 00:02:53.764
That would all be fine.

42
00:02:53.764 --> 00:02:58.206
It's still structural,
you're just naming the structure.

43
00:02:58.206 --> 00:03:00.521
You're referring to a structure by name.

44
00:03:00.521 --> 00:03:05.244
But it is the structure that ultimately is
looked at when we're trying to see if it,

45
00:03:05.244 --> 00:03:09.099
I have designed to receive this type,
you've given me this thing.

46
00:03:09.099 --> 00:03:13.096
How do I determine what it's
called type equivalence?

47
00:03:13.096 --> 00:03:15.741
It is the structure that
is the factor there,

48
00:03:15.741 --> 00:03:19.816
not the name.
&gt;&gt; Mike North: So

49
00:03:19.816 --> 00:03:26.212
we have built in type definitions for
things like the DOM API, so querySelector.

50
00:03:26.212 --> 00:03:31.503
If we ran this, we would see
this code will be happy, right?

51
00:03:31.503 --> 00:03:33.516
querySelector returns
a variety of elements.

52
00:03:33.516 --> 00:03:37.756
It can return things like divs and
image tags and

53
00:03:37.756 --> 00:03:42.210
meta tags and input elements and
a bunch of stuff.

54
00:03:42.210 --> 00:03:46.414
Now because it returns a bunch of
different things, we could say,

55
00:03:46.414 --> 00:03:51.907
it provides us with something a little bit
less specific than what we're looking for.

56
00:03:51.907 --> 00:03:56.648
But in this case, just as in this example,
where we're invoking this function

57
00:03:56.648 --> 00:04:00.137
getFruit, we kinda know based
on what we're asking for.

58
00:04:00.137 --> 00:04:04.970
Based on the arguments that we pass in, we
can say, look, I expect to get an orange.

59
00:04:04.970 --> 00:04:07.680
I asked for an orange,
you gave me something back.

60
00:04:07.680 --> 00:04:10.451
I know it's an orange, right?

61
00:04:10.451 --> 00:04:13.512
So in this case,
what we wanna do is, first of all,

62
00:04:13.512 --> 00:04:18.805
getFruit can only return the, think of it
like the lowest common denominator, right?

63
00:04:18.805 --> 00:04:23.343
It is the base class
that all of the different

64
00:04:23.343 --> 00:04:27.153
things that returns have in common.

65
00:04:27.153 --> 00:04:33.011
So in this case it might just be a fruit,
it returns a fruit.

66
00:04:33.011 --> 00:04:38.440
So what I'm trying to lead up to here
is that in this example we had where

67
00:04:38.440 --> 00:04:44.820
we were grabbing the passwords field,
we probably know that this is an input.

68
00:04:44.820 --> 00:04:46.560
We only get an element out.

69
00:04:46.560 --> 00:04:48.040
How would we make this happy?

70
00:04:48.040 --> 00:04:52.523
How would we essentially say,
I know what I'm doing?

71
00:04:52.523 --> 00:04:54.870
This is an input, I asked for an input.

72
00:04:54.870 --> 00:04:57.263
You could even put an input right here.

73
00:04:57.263 --> 00:04:59.202
Right to the left of the period.

74
00:04:59.202 --> 00:05:03.462
So that, based on the conventions we
know about how querySelector works,

75
00:05:03.462 --> 00:05:07.737
it's gonna only return results that
are of that type, it's guaranteed.

76
00:05:09.230 --> 00:05:14.680
So what we would do there is you'd
run into a problem if you just

77
00:05:14.680 --> 00:05:19.630
try to say let's define this variable as
the correct type here, HTMLInputElement.

78
00:05:20.630 --> 00:05:22.167
This is what the error looks like.

79
00:05:22.167 --> 00:05:25.802
It's saying element is not
assignable to HTMLInputElement.

80
00:05:25.802 --> 00:05:29.310
Basically, because this
structure has things in

81
00:05:29.310 --> 00:05:32.417
it.
&gt;&gt; Mike North: This structure here has

82
00:05:32.417 --> 00:05:35.690
things in it that this structure does not.

83
00:05:35.690 --> 00:05:38.500
And here's your indication of
the first thing that it's finding.

84
00:05:38.500 --> 00:05:43.028
Accept is missing in type Element.
&gt;&gt; Mike North: So

85
00:05:43.028 --> 00:05:47.501
the TypeScript compiler has found that
element is lacking the accept property.

86
00:05:47.501 --> 00:05:54.737
If we look at that in MDN, you'll see
that this is global input attributes.

87
00:05:54.737 --> 00:05:56.500
It's pretty early in the list.

88
00:05:56.500 --> 00:06:00.659
Maybe this is is even an indication that
the values are checked alphabetically or

89
00:06:00.659 --> 00:06:01.910
something.

90
00:06:01.910 --> 00:06:05.410
Or probably just in the order that
they're expressed in the type definition.

91
00:06:05.410 --> 00:06:09.514
But it's basically saying look I
tried to do the structural match,

92
00:06:09.514 --> 00:06:11.674
I found one thing that's missing.

93
00:06:11.674 --> 00:06:16.879
So we can say right now these types
are not equivalent, full stop.

94
00:06:16.879 --> 00:06:19.658
You're done.
&gt;&gt; Speaker 2: I missed something about

95
00:06:19.658 --> 00:06:21.694
a couple minutes in the chapter.

96
00:06:21.694 --> 00:06:23.782
I'm not sure if you covered it.
&gt;&gt; Mike North: So,

97
00:06:23.782 --> 00:06:27.042
the question online was,
in Visual Studio code,

98
00:06:27.042 --> 00:06:32.410
where do you put the TypeScript file for
a library you could use if it has one?

99
00:06:32.410 --> 00:06:38.073
So, this is a question about,
let's say I'm using React,

100
00:06:38.073 --> 00:06:41.416
and I want to add type definitions.

101
00:06:41.416 --> 00:06:45.213
It's a mega library,
called definitely typed.

102
00:06:45.213 --> 00:06:47.455
And here's how you would
install something like that.

103
00:06:55.923 --> 00:06:58.267
&gt;&gt; Mike North: Or I'll use zero yarn,

104
00:06:58.267 --> 00:07:03.553
yarn add as a development dependency,
types react.

105
00:07:03.553 --> 00:07:07.685
So @types that's pointing
to this one thing.

106
00:07:09.123 --> 00:07:11.256
&gt;&gt; Mike North: Definitely typed.

107
00:07:14.898 --> 00:07:16.739
&gt;&gt; Mike North: One big mega repository,

108
00:07:16.739 --> 00:07:20.168
and if we look in this types folder,
get ready for

109
00:07:20.168 --> 00:07:25.355
GitHub to choke.
&gt;&gt; Mike North: It's taking awhile.

110
00:07:25.355 --> 00:07:31.000
So, they had to show you
the first 1,000 files,

111
00:07:31.000 --> 00:07:34.889
they omitted about 2,500, but

112
00:07:34.889 --> 00:07:39.658
here are type definitions for everything.

113
00:07:39.658 --> 00:07:41.417
D3, that should be interesting.

114
00:07:41.417 --> 00:07:45.422
So here is the modular version of d3,
the most recent version.

115
00:07:45.422 --> 00:07:50.920
And if we look at d3-scale, we can see
that in here, it's got an index.d.ts,

116
00:07:50.920 --> 00:07:54.761
which is sort of like the index.js for
type definition.

117
00:07:54.761 --> 00:08:01.645
And here we've got different scales just
as typed definitions that are exported.

118
00:08:01.645 --> 00:08:06.347
Now, even if you're just using a
JavsScript project, and you haven't fully

119
00:08:06.347 --> 00:08:11.350
adopted TypeScript as the language you're
going to use for writing you're code.

120
00:08:11.350 --> 00:08:13.900
You can still add these to your project.

121
00:08:13.900 --> 00:08:14.969
It's pretty much harmless.

122
00:08:14.969 --> 00:08:19.193
They're left alone by anything that
doesn't care about types like people

123
00:08:19.193 --> 00:08:20.675
are using other editors.

124
00:08:20.675 --> 00:08:25.008
But adding these to your project well
make it so that you have the type

125
00:08:25.008 --> 00:08:29.873
definitions in place for some of the stuff
that we're about to work with as it

126
00:08:29.873 --> 00:08:33.698
pertains to commenting and
annotating types using JSDoc.

127
00:08:33.698 --> 00:08:36.218
So the information's available to you,

128
00:08:36.218 --> 00:08:39.244
the autocompletes full
work as you would expect.

129
00:08:39.244 --> 00:08:41.731
And for
anyone who doesn't care about types,

130
00:08:41.731 --> 00:08:47.467
it's sort of left alone.
&gt;&gt; Mike North: So and you'll note that,

131
00:08:47.467 --> 00:08:52.006
for clever people who've poked
through this a little bit,

132
00:08:52.006 --> 00:08:56.909
in my client folder I've also
got this global.d.ts file where

133
00:08:56.909 --> 00:09:01.481
I've got some of my own types
that pertain just to this app.

134
00:09:01.481 --> 00:09:06.288
I can put stuff here and
know they're globally defined things.

135
00:09:06.288 --> 00:09:10.367
Now again, if you're just ignoring
any files that aren't JavaScript,

136
00:09:10.367 --> 00:09:13.655
if you're just using Babel,
it'll skip right over this,

137
00:09:13.655 --> 00:09:17.813
it doesn't care.
&gt;&gt; Mike North: So,

138
00:09:21.092 --> 00:09:22.936
&gt;&gt; Mike North: So, what we wanna do is

139
00:09:22.936 --> 00:09:28.180
basically perform what is called
an explicit type conversion,

140
00:09:28.180 --> 00:09:32.466
or this is known in other
languages as type casting.

141
00:09:32.466 --> 00:09:36.595
And type casting is what's happening
where we have the second comment, and

142
00:09:36.595 --> 00:09:40.865
then immediately following the close
of the comment, we open a parentheses.

143
00:09:40.865 --> 00:09:46.048
And whatever expression is between
these parentheses effectively,

144
00:09:46.048 --> 00:09:49.136
we're gonna regard that as the new type.

145
00:09:49.136 --> 00:09:53.424
So this will basically
say whatever I'm given,

146
00:09:53.424 --> 00:10:00.132
I am saying as the developer, you will
regard this as an HTML input element.

147
00:10:00.132 --> 00:10:02.118
Regardless of what this returns,

148
00:10:02.118 --> 00:10:06.232
we are forcing it.
&gt;&gt; Mike North: And because,

149
00:10:06.232 --> 00:10:10.736
as we already saw, when we initialize
variables, and the values have a type,

150
00:10:10.736 --> 00:10:14.367
we can infer that that variable
is gonnahave that type as well.

151
00:10:14.367 --> 00:10:18.549
So, this first line up here,
it doesn't really add anything anymore.

152
00:10:18.549 --> 00:10:21.913
So, effectively, we've just sort
of in a situation where we're

153
00:10:21.913 --> 00:10:24.556
annotating the type of something and
the function,

154
00:10:24.556 --> 00:10:28.840
that we're using to initialize it, returns
something that's a little too vague.

155
00:10:28.840 --> 00:10:32.224
We can just sort of move
the comment to the right hand

156
00:10:32.224 --> 00:10:36.580
side of the assignment operator and
we get what we expect.

157
00:10:36.580 --> 00:10:40.480
And now this is regarded as an input
element, and we could get its value for

158
00:10:40.480 --> 00:10:42.200
example which you can not do with a div.

