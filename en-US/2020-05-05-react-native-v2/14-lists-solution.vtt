WEBVTT

1
00:00:00.420 --> 00:00:05.292
Let's look at the solution for
our list exercise.

2
00:00:05.292 --> 00:00:10.653
So the first thing you want to do is you
want to just take this colors constant and

3
00:00:10.653 --> 00:00:11.880
add it to our app.

4
00:00:16.797 --> 00:00:19.278
Now as discussed,
we want to use a FlatList for this,

5
00:00:19.278 --> 00:00:21.915
because we're rendering multiple things.

6
00:00:21.915 --> 00:00:25.669
So let's just import
FlatList from React Native.

7
00:00:30.621 --> 00:00:32.535
And now I'm going to just add it.

8
00:00:32.535 --> 00:00:34.775
Do we need a SafeAreaView?

9
00:00:34.775 --> 00:00:38.634
Yeah, I'm gonna just add it just
underneath the SafeAreaView.

10
00:00:44.278 --> 00:00:47.322
So the data is going to
be our COLORS array.

11
00:00:51.354 --> 00:00:51.953
Oops.

12
00:00:54.155 --> 00:00:58.877
Then our keyExtractor is
going to take the item,

13
00:00:58.877 --> 00:01:03.492
and we're just going
to use item.colorName.

14
00:01:06.196 --> 00:01:12.210
So we've got our data and keyExtractor,
and then we'll have to add our renderItem.

15
00:01:14.212 --> 00:01:19.050
So renderItem is the function that takes
the item and renders whatever we need.

16
00:01:19.050 --> 00:01:25.485
So in this case, we'll have the item,
notice that we'll have to destructure

17
00:01:25.485 --> 00:01:30.951
the item from here because it also
returns the item ID as an object.

18
00:01:30.951 --> 00:01:34.899
And let's just get one of our color boxes.

19
00:01:36.698 --> 00:01:42.437
And then the colorName
will be item.colorName,

20
00:01:42.437 --> 00:01:46.680
and hex code will be item.hexCode.

21
00:01:50.210 --> 00:01:51.760
And because we're going
to get rid of our view,

22
00:01:51.760 --> 00:01:55.925
I'm going to take the view styles and
add them to my FlatList instead.

23
00:01:55.925 --> 00:02:00.370
Yehey, it's running, that's awesome.

24
00:02:00.370 --> 00:02:01.242
I'm happy with this.

25
00:02:06.307 --> 00:02:12.930
Cool, so one thing that I've just found
out, thanks to someone who pointed it out.

26
00:02:12.930 --> 00:02:17.180
Is that you don't actually need to use
keyExtractor if you add the key here.

27
00:02:17.180 --> 00:02:22.560
So if your data already has
a property called key, and

28
00:02:22.560 --> 00:02:30.330
it's a string, then you don't need to
add this at all, which is quite handy.

29
00:02:30.330 --> 00:02:34.493
So for example,
if I just gonna do two of these, just so

30
00:02:34.493 --> 00:02:36.857
you could see it as an example.

31
00:02:39.807 --> 00:02:42.219
And comment the rest of these out.

32
00:02:45.273 --> 00:02:46.620
I can see it renders.

33
00:02:46.620 --> 00:02:51.970
And you know that it's not working because
you need it, because if I get rid of it,

34
00:02:51.970 --> 00:02:55.580
you'll get a little yellow box warning
saying that you should have a key.

35
00:02:55.580 --> 00:02:58.767
So that's just a tip that if your
data already has a unique key,

36
00:02:58.767 --> 00:03:01.304
you don't need to worry
about the keyExtractor.

37
00:03:19.954 --> 00:03:20.742
Cool.

38
00:03:23.999 --> 00:03:24.847
What else?

39
00:03:24.847 --> 00:03:28.229
Yes, we had the solarized color name.

40
00:03:28.229 --> 00:03:32.711
I think that was a text, so we could
just use the ListHeader component here.

41
00:03:37.403 --> 00:03:40.428
And then here you can actually,
you can use this,

42
00:03:40.428 --> 00:03:43.384
it can be a function that
returns a component, or

43
00:03:43.384 --> 00:03:47.517
you can just pass in a text directly,
which is what I'm going to do.

44
00:03:58.902 --> 00:04:02.918
Cool, now one thing you might
have noticed is that this looks

45
00:04:02.918 --> 00:04:05.911
really really good on the darker colors,
but

46
00:04:05.911 --> 00:04:10.740
you can't really see the white
text at all on the lighter ones.

47
00:04:10.740 --> 00:04:12.030
Let's see what it looks like on Android.

48
00:04:13.230 --> 00:04:19.492
So it's pretty much similar on Android,
we can see the scroll,

49
00:04:19.492 --> 00:04:24.090
and that the darker colors work and
the lighter colors not so much.

50
00:04:24.090 --> 00:04:28.330
So what we'd really like is that for
the darker colors, we want to display

51
00:04:28.330 --> 00:04:31.509
the white text, and for the lighter
colors you want to display a black text.

52
00:04:32.670 --> 00:04:38.370
Now one thing you could do
is you could do textColor,

53
00:04:38.370 --> 00:04:42.920
and then just say white or
black depending on the item.

54
00:04:42.920 --> 00:04:47.690
But that won't really scale for arbitrary
colors because you'd have to go and

55
00:04:47.690 --> 00:04:49.620
do it for every single one.

56
00:04:49.620 --> 00:04:51.960
So, I said is for extra credit.

57
00:04:51.960 --> 00:04:55.273
So what I actually did is
I googled how to do this.

58
00:04:55.273 --> 00:04:59.851
And I found this handy
little piece of code,

59
00:04:59.851 --> 00:05:07.174
which basically takes the hex code and
they compares it to just white.

60
00:05:07.174 --> 00:05:12.968
And if the RGB values are in
the end 10% of the white spectrum,

61
00:05:12.968 --> 00:05:17.165
and you can adjust for
just that color scheme.

62
00:05:17.165 --> 00:05:21.772
So I'm going to use this little
code snippet to basically,

63
00:05:23.856 --> 00:05:26.837
Decide whether to display the dark text or
the lights text.

64
00:05:26.837 --> 00:05:28.190
I'm just gonna copy this.

65
00:05:30.098 --> 00:05:36.594
I'm gonna go to the ColorBox,
I'm gonna add a const textColor.

66
00:05:38.652 --> 00:05:43.976
And I can color, I can do

67
00:05:43.976 --> 00:05:49.000
this, so I'll go to hexCode.

68
00:05:49.000 --> 00:05:53.235
So this replaces the hash
with empty string, and

69
00:05:53.235 --> 00:05:56.238
passes it, this takes the white.

70
00:05:56.238 --> 00:05:59.861
And this is, the last 10% is this,

71
00:05:59.861 --> 00:06:04.634
then we're going to do light,
otherwise black.

72
00:06:07.246 --> 00:06:09.572
And I'm gonna add the textColor here.

73
00:06:13.606 --> 00:06:16.036
Okay, we want the converse of that.

74
00:06:19.341 --> 00:06:23.800
Cool, so
I found that this value works for me.

75
00:06:23.800 --> 00:06:29.235
You can do it like, if you did 2,
that's actually like, split in the middle.

76
00:06:30.235 --> 00:06:33.391
But I found that,
I was playing around with the values, and

77
00:06:33.391 --> 00:06:37.355
I quite liked it when it was this, so
just the whites get the dark color.

78
00:06:37.355 --> 00:06:39.055
So I thought that looked nice.

79
00:06:39.055 --> 00:06:41.908
So there's definitely better out like,

80
00:06:43.451 --> 00:06:46.908
Algorithms to decide this, but
I thought this was quite neat.

81
00:06:51.191 --> 00:06:53.780
All right, well,
that's the end of this section.

82
00:06:53.780 --> 00:06:56.290
So before we move on to navigation,
do you have any questions?

83
00:06:58.230 --> 00:07:03.408
&gt;&gt; Is there any reason why it scrolls
even though we don't have a ScrollView?

84
00:07:03.408 --> 00:07:07.968
&gt;&gt; Yeah, because FlatList and
SectionList are always scrollable.

85
00:07:07.968 --> 00:07:08.690
&gt;&gt; Okay.

86
00:07:08.690 --> 00:07:14.268
&gt;&gt; Yeah, so you'd use a ScrollView only
if you don't have a list component.

