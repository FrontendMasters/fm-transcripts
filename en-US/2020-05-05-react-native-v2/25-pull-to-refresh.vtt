WEBVTT

1
00:00:00.000 --> 00:00:03.180
Let's talk about pull to refresh.

2
00:00:03.180 --> 00:00:05.190
You might have,
you've probably seen this and

3
00:00:05.190 --> 00:00:07.740
it might be an action that
you've been do without thinking.

4
00:00:07.740 --> 00:00:11.760
But to refresh a list, you kind of
pull down and then use a spinner and

5
00:00:11.760 --> 00:00:14.400
then things happen and
then you get a new data.

6
00:00:14.400 --> 00:00:16.668
Well, you might be surprised to know or

7
00:00:16.668 --> 00:00:20.674
not, that is actually built into
react Native which is really cool.

8
00:00:20.674 --> 00:00:23.110
Any element that is scrollable.

9
00:00:23.110 --> 00:00:29.050
So a scroll view, flat list or a section
list has this refresh control prop,

10
00:00:29.050 --> 00:00:32.360
where you can pass in a special
refresh control element.

11
00:00:32.360 --> 00:00:35.850
That's displays loading, so
it's built exactly for that.

12
00:00:35.850 --> 00:00:39.110
And it also adapts itself based
on the environment that it's in.

13
00:00:39.110 --> 00:00:42.210
So it looks different on
Android than it does on iOS.

14
00:00:43.660 --> 00:00:49.810
So the refresh control component
has a link to it here and

15
00:00:49.810 --> 00:00:51.790
it doesn't have a lot of properties.

16
00:00:51.790 --> 00:00:55.920
The main ones that we care about
are refreshing, which is a Boolean for

17
00:00:55.920 --> 00:00:59.750
whether the view should be indicating
that the refresh is active.

18
00:00:59.750 --> 00:01:04.100
And on refresh, which is basically
called when the view starts refreshing.

19
00:01:04.100 --> 00:01:06.776
So if the user pulls down,
then this gets triggered.

20
00:01:08.997 --> 00:01:12.260
So let's go into our home.

21
00:01:12.260 --> 00:01:14.690
Which is where we have the main FlatList.

22
00:01:14.690 --> 00:01:17.947
And let's import RefreshControl
from React Native.

23
00:01:22.771 --> 00:01:26.997
And now let's go into our FlatList and

24
00:01:26.997 --> 00:01:33.867
let's pass in Refresh control
in our refresh control probe,

25
00:01:33.867 --> 00:01:38.560
refreshControl, refresh Control.

26
00:01:38.560 --> 00:01:42.050
We just passed a component into
the self closing components.

27
00:01:42.050 --> 00:01:46.350
And then let's just do refreshing true,
so we could see what it looks like.

28
00:01:48.060 --> 00:01:50.170
And, was it handle refresh?

29
00:01:50.170 --> 00:01:56.490
OnRefresh, and onRefresh, let's just
pass in an empty function for now.

30
00:01:59.905 --> 00:02:01.715
Alright, so this is what it looks like.

31
00:02:01.715 --> 00:02:06.635
So it looks like on IOS, and
this is what it looks like on Android.

32
00:02:06.635 --> 00:02:10.365
So you can see that they look a little
bit different because there's platform

33
00:02:10.365 --> 00:02:13.670
specific, differences.

34
00:02:13.670 --> 00:02:18.450
Now currently, it's set to always be
refreshing because we added this as true.

35
00:02:18.450 --> 00:02:20.000
And we wanna make this dynamic.

36
00:02:22.810 --> 00:02:28.611
&gt;&gt; I have a question do you know why
they wouldn't make refreshing and

37
00:02:28.611 --> 00:02:33.170
unrefresh, just props of
the Flatlist component,

38
00:02:33.170 --> 00:02:39.780
it seems a little bit indirect to
import a refresh control component.

39
00:02:39.780 --> 00:02:44.400
&gt;&gt; That's because you might want
to customize this component.

40
00:02:44.400 --> 00:02:49.550
And because some people you might want to
have like a custom refresh spinner, so

41
00:02:49.550 --> 00:02:51.430
this actually inherits the props.

42
00:02:51.430 --> 00:02:52.860
You can wrap it in anything you want.

43
00:02:52.860 --> 00:02:56.050
So if you want a completely custom one,
you can just swap it out.

44
00:02:56.050 --> 00:02:58.610
&gt;&gt; So you could build your
own refresh controllers.

45
00:02:58.610 --> 00:03:01.150
&gt;&gt; Yeah.
&gt;&gt; From using the provided one.

46
00:03:01.150 --> 00:03:06.080
I think when we did it,
we we kind of forgot what it is.

47
00:03:06.080 --> 00:03:10.528
I feel like we kind of wrapped around it,
I think it has some.

48
00:03:12.781 --> 00:03:15.030
Yeah, I think we wrapped around it.

49
00:03:15.030 --> 00:03:18.641
So you can replace it with
your custom one [INAUDIBLE].

50
00:03:18.641 --> 00:03:21.944
&gt;&gt; Flat list does have those two props,
actually that's what I

51
00:03:21.944 --> 00:03:25.920
did first before understanding
you could do refresh control.

52
00:03:25.920 --> 00:03:29.952
So you can do that if you don't
wanna pass in a refresh control.

53
00:03:29.952 --> 00:03:31.950
That might be a new feature, but I didn't.

54
00:03:31.950 --> 00:03:36.823
&gt;&gt; That was probably not I'm
learning all kinds of things today.

55
00:03:40.355 --> 00:03:42.904
Yes, so it has refreshing unrefreshed.

56
00:03:42.904 --> 00:03:44.460
So thank you for that.

57
00:03:44.460 --> 00:03:46.980
And you can pass them directly.

58
00:03:46.980 --> 00:03:49.170
I think I always had to
have a customized one.

59
00:03:49.170 --> 00:03:51.120
So I'm just used to doing this.

60
00:03:51.120 --> 00:03:51.959
That's a good shout outs.

61
00:03:53.980 --> 00:03:56.128
Yeah, so let's actually try this.

62
00:03:56.128 --> 00:04:03.860
So refreshing=true onRefresh.

63
00:04:10.352 --> 00:04:11.410
Yeah and it works the same.

64
00:04:11.410 --> 00:04:15.403
That's great, let's just use this.

65
00:04:18.862 --> 00:04:21.900
All right, now let's make this dynamic.

66
00:04:21.900 --> 00:04:25.860
Well, the first thing you wanna
do is we want a state parameter

67
00:04:25.860 --> 00:04:29.100
to store when we are doing a refresh.

68
00:04:29.100 --> 00:04:31.500
So we're going to use,
useSate for this again.

69
00:04:31.500 --> 00:04:36.433
So let's do refreshing,

70
00:04:36.433 --> 00:04:39.802
refreshing set.

71
00:04:39.802 --> 00:04:45.000
Well I always actually make my
booleans with an is, is refreshing.

72
00:04:45.000 --> 00:04:50.760
And sets is refreshing, useState.

73
00:04:50.760 --> 00:04:55.590
And let's default to false, because
we want to only trigger the refresh

74
00:04:55.590 --> 00:04:58.848
once a user does the pull action and

75
00:04:58.848 --> 00:05:05.490
now we I want to write the code for
actually doing the production.

76
00:05:05.490 --> 00:05:09.266
So what do we wanna do we want
to set refreshing to true.

77
00:05:09.266 --> 00:05:12.640
You wanna do the refresh,
I want to set refreshing into false.

78
00:05:14.340 --> 00:05:16.552
So I want to use a use callback for
this again.

79
00:05:21.810 --> 00:05:28.096
Refresh that's to handleRefresh and

80
00:05:28.096 --> 00:05:31.047
we useCallback.

81
00:05:36.564 --> 00:05:38.800
Let's pass in the empty array again.

82
00:05:43.250 --> 00:05:50.480
And now, we use set this to
set to refreshing to true,

83
00:05:50.480 --> 00:05:54.659
so setIsRefreshing, true and

84
00:05:54.659 --> 00:06:01.099
then we want to call this
fetch color palettes.

85
00:06:01.099 --> 00:06:06.601
I want to await this,
which means that we actually

86
00:06:06.601 --> 00:06:11.976
have to make this async
to use the await keyword.

87
00:06:11.976 --> 00:06:13.376
And then finally,

88
00:06:13.376 --> 00:06:18.635
what we wanna do is just use the set
is setRefreshing and set it to false.

89
00:06:21.795 --> 00:06:28.215
And now we want to pass these parameters
into refreshing and onRefresh.

90
00:06:28.215 --> 00:06:32.645
So isRefreshing and so

91
00:06:32.645 --> 00:06:38.707
this ends up being on refresh,

92
00:06:38.707 --> 00:06:42.680
handleRefresh.

93
00:06:42.680 --> 00:06:47.020
So as a shorthand, we can just pass
in the function handleRefresh.

94
00:06:47.020 --> 00:06:51.611
We don't need to pass in any arguments.

95
00:06:51.611 --> 00:06:56.152
So now when you pull to refresh,
it kind of displays there and

96
00:06:56.152 --> 00:06:58.922
it disappears when the call is done.

97
00:06:58.922 --> 00:07:02.379
But the thing is we actually have
the problem that we don't usually have,

98
00:07:02.379 --> 00:07:03.840
which is our network request.

99
00:07:03.840 --> 00:07:05.560
It's so quick,

100
00:07:05.560 --> 00:07:08.990
we don't really see the refresh the way
you would normally see it on the web.

101
00:07:08.990 --> 00:07:14.155
So just to emulate a bit of a timeout,
I'm gonna add an actual timeout.

102
00:07:20.211 --> 00:07:24.703
So if you never use setTimeOut before the
first argument is the function that you

103
00:07:24.703 --> 00:07:27.461
want to execute after
the timeout is completed.

104
00:07:27.461 --> 00:07:31.638
And then a second argument is the amount
of time that you want to wait in

105
00:07:31.638 --> 00:07:32.655
milliseconds.

106
00:07:32.655 --> 00:07:34.545
So I'm just gonna do one second.

107
00:07:35.825 --> 00:07:40.920
So now when I pull to refresh,
you notice that even when of release it,

108
00:07:40.920 --> 00:07:45.010
the loading spinner kinda stays there for
a bit before disappearing.

109
00:07:46.620 --> 00:07:49.720
And it's kind of a weird thing cause
normally we don't want to make our

110
00:07:49.720 --> 00:07:50.270
app slower.

111
00:07:50.270 --> 00:07:54.900
We're kind of chasing the opposite, but
sometimes from a user experience point of

112
00:07:54.900 --> 00:07:57.970
view, users just wanna know
that something's going on.

113
00:07:57.970 --> 00:08:00.870
And when you have a super
short spinning cycle,

114
00:08:00.870 --> 00:08:03.530
the thing that they were
trying to do didn't happen.

115
00:08:03.530 --> 00:08:05.480
So sometimes this is handy to do.

116
00:08:05.480 --> 00:08:10.290
So one thing to note that the API that I
used, it's actually public on my GitHub.

117
00:08:13.910 --> 00:08:19.530
Let's see, I think it's is
called the color palette API.

118
00:08:20.570 --> 00:08:26.490
It's just a tiny Express app, but
I added some more functionality.

119
00:08:26.490 --> 00:08:30.526
For example, you can fetch an individual
palettes and these are commented out but

120
00:08:30.526 --> 00:08:34.286
you can also add a new pallet actually,
this was when I was doing the recipe.

121
00:08:34.286 --> 00:08:36.030
I'm gonna update this to work on palettes.

122
00:08:36.030 --> 00:08:40.731
So if you want to, maybe try on your
own to extend it and actually push to

123
00:08:40.731 --> 00:08:45.455
an API or something like that,
feel free to fork this code and edit it.

124
00:08:45.455 --> 00:08:50.408
I deployed it using now.sh, so
if you clone it log into now.sh in

125
00:08:50.408 --> 00:08:55.374
your terminal you just do,
now it will deploy it to your account.

126
00:08:55.374 --> 00:08:57.074
So you can do it as well if you want to.

