WEBVTT

1
00:00:00.200 --> 00:00:03.696
In React Native,
all styling is done by inline styles.

2
00:00:03.696 --> 00:00:07.860
So that problems with Cascading Style
Sheets where things override things and

3
00:00:07.860 --> 00:00:11.150
there's all your priority, none of that,
you can forget about that,

4
00:00:11.150 --> 00:00:13.530
there's not even a choice,
which is actually great.

5
00:00:16.160 --> 00:00:22.996
To create styles we use a StyleSheet
element which is in React Native.

6
00:00:22.996 --> 00:00:25.948
So, we import it from here.

7
00:00:34.051 --> 00:00:37.213
And then we basically
create our styles object,

8
00:00:37.213 --> 00:00:42.310
I usually create it at the bottom
of the file just before the export.

9
00:00:42.310 --> 00:00:43.832
Let's do const styles.

10
00:00:47.652 --> 00:00:53.294
And the command is StyleSheet.create,

11
00:00:53.294 --> 00:00:57.491
and then you pass it an object.

12
00:01:01.952 --> 00:01:04.978
And the one style,
let's add a style to the container.

13
00:01:10.106 --> 00:01:13.454
Let's do margin: 10.

14
00:01:20.477 --> 00:01:22.850
And you'll notice that obviously,
it's not applied yet.

15
00:01:22.850 --> 00:01:26.100
And that's because we haven't
actually added it to our components.

16
00:01:26.100 --> 00:01:29.820
You can style pretty much any
component using the style props, so

17
00:01:29.820 --> 00:01:31.620
let's add this to our view.

18
00:01:31.620 --> 00:01:35.440
Let's go to the View, and

19
00:01:35.440 --> 00:01:41.353
there's style = styles.container.

20
00:01:41.353 --> 00:01:45.110
This style subject pretty much
creates a normal object, and

21
00:01:45.110 --> 00:01:49.394
you can access any attributes in
this object using the dot notation.

22
00:01:49.394 --> 00:01:53.219
And you'll notice that all content
now has a little border around it.

23
00:01:54.385 --> 00:01:58.465
I'm gonna add some background color so
you can see what it looks like.

24
00:02:01.033 --> 00:02:06.568
Great, so one of the things that
you find yourself doing quite

25
00:02:06.568 --> 00:02:13.300
often in Native is adding margins left and
right, or top and bottom.

26
00:02:13.300 --> 00:02:18.753
So for example, you might have want to
have marginTop be 10, marginBottom.

27
00:02:20.742 --> 00:02:22.544
Let's just do padding so we can see them.

28
00:02:27.380 --> 00:02:30.842
All right, so we got top and
bottom padding, 10.

29
00:02:30.842 --> 00:02:35.763
paddingLeft, let's do this 30.

30
00:02:37.077 --> 00:02:45.618
Oops All right,

31
00:02:45.618 --> 00:02:47.885
so we've got all
the padding that we wanted,

32
00:02:47.885 --> 00:02:50.880
but this is four lines of styles,
which is pretty tedious.

33
00:02:50.880 --> 00:02:55.984
If you're familiar with web development,
you'll know that on web,

34
00:02:55.984 --> 00:03:02.482
there's a convenient method that you can
use, you could just do padding: 10, 30.

35
00:03:02.482 --> 00:03:05.641
We can't do this in React Native, but

36
00:03:05.641 --> 00:03:09.702
instead we have horizontal and
vertical props.

37
00:03:09.702 --> 00:03:14.408
So instead of paddingTop and
paddingBottom,

38
00:03:14.408 --> 00:03:19.120
I can do paddingVertical,
just quite handy.

39
00:03:19.120 --> 00:03:25.428
Get through this, and paddingHorizontal.

40
00:03:29.101 --> 00:03:36.520
And this actually works with both
padding and margin, that's quite handy.

41
00:03:36.520 --> 00:03:38.940
In general,
you might have noticed that these

42
00:03:38.940 --> 00:03:40.820
styles are similar to the web styles.

43
00:03:40.820 --> 00:03:45.700
The difference being that the Native
styles don't have any units, and

44
00:03:45.700 --> 00:03:52.480
they are useless, I think, they correspond
to density-independent pixels, yeah.

45
00:03:52.480 --> 00:03:55.680
So if I use designs for

46
00:03:55.680 --> 00:03:59.810
React Native, designs often have pixels,
otherwise this won't work.

47
00:03:59.810 --> 00:04:03.060
So in my head,
I still think of them as pixels, but

48
00:04:03.060 --> 00:04:04.470
you don't need to write the units,
which is good.

49
00:04:06.000 --> 00:04:09.429
The other thing is, so
I added some documentation here.

50
00:04:11.220 --> 00:04:15.976
So there are some documentation on
the different props there are, so

51
00:04:15.976 --> 00:04:21.552
they'll view props, text props and
image props, style props that you can use.

52
00:04:21.552 --> 00:04:23.555
This list is not actually comprehensive.

53
00:04:25.402 --> 00:04:30.120
Basically, most web styles
will work in React Native.

54
00:04:30.120 --> 00:04:36.290
The difference is that on the web,
you have to use the dash notation,

55
00:04:36.290 --> 00:04:38.575
but here we just use camel case.

56
00:04:38.575 --> 00:04:42.130
And the other note is, on the web,
whenever there's a convenience function,

57
00:04:42.130 --> 00:04:48.110
for example, for borders, you might do
border, 1 pixel, solid, and then a color.

58
00:04:49.200 --> 00:04:53.940
In Native, you have to do border,
they're all separate.

59
00:04:53.940 --> 00:04:57.172
So you have to do borderBottom.

60
00:04:57.172 --> 00:04:59.288
Actually, just do borderColor, I think.

61
00:05:02.451 --> 00:05:08.162
Pink, and borderWidth.

62
00:05:11.021 --> 00:05:12.920
Yeah, got a little border here, yeah.

63
00:05:12.920 --> 00:05:14.920
So you have to write them out separately.

64
00:05:14.920 --> 00:05:18.870
The other thing to note is
that all positioning in

65
00:05:18.870 --> 00:05:21.840
Native applications is done using Flexbox.

66
00:05:21.840 --> 00:05:25.934
So if you've never used Flex, or you've
heard of it and not really gotten into it,

67
00:05:25.934 --> 00:05:28.225
this is the time because
there is no other way.

68
00:05:28.225 --> 00:05:32.848
If you want to, you can use this cute
little app, it's called Flexbox Froggy,

69
00:05:32.848 --> 00:05:35.059
and this is what I used to get started.

70
00:05:35.059 --> 00:05:41.705
It's basically a little tool that lets you
put a little frog in the lower leaves,

71
00:05:41.705 --> 00:05:46.805
and it kind of introduces
you the concept of Flex.

72
00:05:46.805 --> 00:05:52.508
And all the elements in React Native
have display: Flex on by default.

73
00:05:52.508 --> 00:05:56.487
So on the web, if you want to use Flex,
you have to do display: Flex, but

74
00:05:56.487 --> 00:05:58.532
here everything is display: Flex.

75
00:05:58.532 --> 00:06:03.305
So if you've never really worked with
Flex, the main thing to remember is,

76
00:06:03.305 --> 00:06:08.392
whereas normally on the web, the element
that you style is positioning itself.

77
00:06:08.392 --> 00:06:11.712
With Flex you apply styles to
the containing element, and

78
00:06:11.712 --> 00:06:15.247
then the containing element
positions the children inside.

79
00:06:17.612 --> 00:06:21.018
One thing we might wanna do is we might
want to just position this text at

80
00:06:21.018 --> 00:06:23.641
the center of the screen,
that would be quite handy.

81
00:06:26.519 --> 00:06:32.050
Select these, so let's do,
we already have display: Flex.

82
00:06:32.050 --> 00:06:36.822
So let's do alignItems: center.

83
00:06:42.252 --> 00:06:45.930
Cool, so now we've centered text
horizontally, that was pretty easy.

84
00:06:45.930 --> 00:06:51.106
Now, in order to center text vertically,
we use justifyContent.

85
00:06:54.231 --> 00:06:56.096
But you notice that this doesn't work.

86
00:06:56.096 --> 00:06:58.610
The reason that this
doesn't work is because,

87
00:06:58.610 --> 00:07:04.500
it centers the content
inside the current element,

88
00:07:04.500 --> 00:07:08.420
we can see the current element is
exactly the same height as the content.

89
00:07:08.420 --> 00:07:09.370
So in order to do that,

90
00:07:09.370 --> 00:07:13.240
we need to make the containing
element the full width of the screen.

91
00:07:14.610 --> 00:07:17.002
So it was pointed out that
the text is not very visible,

92
00:07:17.002 --> 00:07:20.813
so let's make the background pink instead,
so you can see the text, that's better.

93
00:07:22.802 --> 00:07:31.370
Right, so we want to be able to center
this content this way, horizontally.

94
00:07:31.370 --> 00:07:33.670
And we want to make our content
full width of the screen.

95
00:07:33.670 --> 00:07:36.760
And the way we basically
do this is we use flex: 1.

96
00:07:36.760 --> 00:07:40.510
And this basically means that,
making this content,

97
00:07:40.510 --> 00:07:45.020
the same height as the content
that is its parent.

98
00:07:45.020 --> 00:07:46.580
And that actually makes
the text disappear,

99
00:07:46.580 --> 00:07:48.430
you're ever going what's going on.

100
00:07:48.430 --> 00:07:50.742
But let's look at our component tree.

101
00:07:50.742 --> 00:07:54.276
Well, notice that we have this
safeAreaView that is containing our

102
00:07:54.276 --> 00:07:57.072
component, and
this doesn't have any properties.

103
00:07:57.072 --> 00:08:02.057
So all we'll need to do is we need to
give this a flex property as well.

104
00:08:05.513 --> 00:08:09.466
So now if this is flex: 1, so if you want
to use flex: 1, you need to make sure that

105
00:08:09.466 --> 00:08:12.231
all the components,
all the way up to the component tree,

106
00:08:12.231 --> 00:08:14.900
are using flex: 1 as well,
otherwise it won't work.

107
00:08:14.900 --> 00:08:19.620
And the other thing you might
notice that I've done is I've used

108
00:08:19.620 --> 00:08:23.040
a style property without
actually using the StyleSheet.

109
00:08:23.040 --> 00:08:24.090
So those are thing you can do.

110
00:08:24.090 --> 00:08:28.340
It's not really recommended because
StyleSheets optimizes the properties and

111
00:08:28.340 --> 00:08:30.300
kind of caches them.

112
00:08:30.300 --> 00:08:35.418
But sometimes you have to do this in
order to have dynamic styles like colors,

113
00:08:35.418 --> 00:08:37.713
or dynamic width, or something.

114
00:08:37.713 --> 00:08:46.596
So I could also do safeArea, flex: 2,

115
00:08:53.621 --> 00:08:54.550
And this is equivalent.

116
00:08:55.560 --> 00:09:00.730
I did a thing that you can do is sometimes
you might want to have multiple styles,

117
00:09:00.730 --> 00:09:05.670
you might have shared
styles in your StyleSheets

118
00:09:05.670 --> 00:09:09.510
that you might want to apply both of
them but I can not combine into one.

119
00:09:09.510 --> 00:09:12.130
There's actually a built
in way to do this,

120
00:09:12.130 --> 00:09:16.730
instead of passing in a single style, you
can actually pass in an array of styles.

121
00:09:16.730 --> 00:09:21.260
So suppose that we wanted to have
the background color style separately,

122
00:09:21.260 --> 00:09:23.580
I'm just going to create
a style called pink.

123
00:09:25.260 --> 00:09:30.580
And then I'm gonna move this
background color into here,

124
00:09:30.580 --> 00:09:35.600
and then we're going to convert
this style prop into an array.

125
00:09:35.600 --> 00:09:37.770
And the first element of
the array is the container,

126
00:09:37.770 --> 00:09:40.960
and then the second one is pink.

127
00:09:42.270 --> 00:09:44.790
Another birth kind of stuff, get applied.

128
00:09:44.790 --> 00:09:50.880
Another thing to note is that
these will cascade, hopefully.

129
00:09:50.880 --> 00:09:56.690
So that if the container had for
example, red, and this had pink,

130
00:09:56.690 --> 00:10:01.390
then the pink will override the red,
this is similar to the web.

131
00:10:01.390 --> 00:10:05.028
Whereas, I think,
if I had them the other way around,

132
00:10:08.052 --> 00:10:11.326
Yeah, if I happen to did it around,
it will be a very jarring red.

133
00:10:15.801 --> 00:10:20.350
And just as a side note, some of you
might have used style components before.

134
00:10:20.350 --> 00:10:24.420
And style components actually have
a React Native compatible module.

135
00:10:24.420 --> 00:10:28.900
So if you want to write your
Native styles exactly the same

136
00:10:28.900 --> 00:10:33.820
as you write your style components, like
web front end, you can actually do it.

137
00:10:33.820 --> 00:10:38.404
They work exactly the same,
the only difference is that here you have

138
00:10:38.404 --> 00:10:41.422
a StyledDiv, and
here we have a StyledView.

139
00:10:41.422 --> 00:10:45.552
And you can use snake case like styles as
well, so they'll look like the web ones.

140
00:10:47.192 --> 00:10:50.403
Yeah, for this workshop, we'll be
using just a plain built in styles,

141
00:10:50.403 --> 00:10:52.840
but just to know that this is
something that you can do.

142
00:10:55.252 --> 00:10:59.553
So, just a quick recap, with and
you need to use StyleSheet.create for

143
00:10:59.553 --> 00:11:01.230
all the styles.

144
00:11:01.230 --> 00:11:05.953
All the styles are pretty much
what you would expect on the web.

145
00:11:05.953 --> 00:11:09.362
And if you're not sure, you can try them
and a lot of the time, they'll work.

146
00:11:14.893 --> 00:11:17.410
The difference is that
you don't use units.

147
00:11:17.410 --> 00:11:21.240
So all the things that you would
have normally as pixel values,

148
00:11:21.240 --> 00:11:23.450
you will have just number values.

149
00:11:23.450 --> 00:11:27.230
For the colors, you can use all
the web colors that are available,

150
00:11:27.230 --> 00:11:31.250
that are named, and
you can also use hex colors, RGB, or RGBA.

151
00:11:33.770 --> 00:11:40.232
All the positioning is done using Flex, so
you will have to use Flex for positioning,

152
00:11:40.232 --> 00:11:45.376
if you want to center anything,
if you want to put anything in a row.

153
00:11:45.376 --> 00:11:49.763
And you can pass in styles directly
without using a StyleSheet if need be, but

154
00:11:49.763 --> 00:11:51.800
you should avoid it when possible.

155
00:11:53.853 --> 00:11:58.168
And finally, you can have multiple styles
in one component by passing in an array

156
00:11:58.168 --> 00:11:59.955
instead of an individual style.

