WEBVTT

1
00:00:00.100 --> 00:00:01.520
It's all about Hooks.

2
00:00:01.520 --> 00:00:05.360
Now if you're already familiar with React,
you're familiar with Hooks.

3
00:00:05.360 --> 00:00:10.430
But for those of you aren't this is
quite an important section because

4
00:00:11.700 --> 00:00:15.925
React Hooks are basically how you do
anything asynchronist in reaction.

5
00:00:15.925 --> 00:00:19.545
How you save state,
it's how you do callbacks,

6
00:00:19.545 --> 00:00:24.185
it's how you do anything that's dynamic,
and if you're gonna use function

7
00:00:24.185 --> 00:00:27.325
components instead of class components,
you will have to use Hooks.

8
00:00:27.325 --> 00:00:29.815
Hooks actually quite a recent addition.

9
00:00:29.815 --> 00:00:35.245
They've only been in React maybe a year,
but everyone's using them and so are we.

10
00:00:36.730 --> 00:00:42.250
Now there are quite a few built in Hooks,
but generally the main ones that

11
00:00:42.250 --> 00:00:47.220
you need to know about are useState,
useCallback and useEffect.

12
00:00:47.220 --> 00:00:49.350
And I'm going to go through
each of these in turn.

13
00:00:52.355 --> 00:00:56.490
UseState is for saving and
updating state inside your component.

14
00:00:56.490 --> 00:01:00.270
You will import it from
React not React Native.

15
00:01:00.270 --> 00:01:04.110
They work exactly the same in React
as you do in React Native by the way.

16
00:01:04.110 --> 00:01:09.760
So you import it from React, and the way
to use it is inside a function component.

17
00:01:09.760 --> 00:01:13.320
So this you can't use in a class
component and you cause can't use it

18
00:01:13.320 --> 00:01:17.820
outside a component, so this has to be
inside a component before the return.

19
00:01:19.840 --> 00:01:24.110
And what we do here is we call
useState with an initial value, so

20
00:01:24.110 --> 00:01:30.830
in this case the initial value is zero and
it returns an array of two items.

21
00:01:30.830 --> 00:01:34.630
So here we use the array destructuring,
and the first

22
00:01:34.630 --> 00:01:39.450
item which returns is the value, so
this is the current value of the state and

23
00:01:39.450 --> 00:01:44.580
the second argument, so the second thing
it returns is a function to set the value.

24
00:01:44.580 --> 00:01:46.990
Now there's two ways to set the value,

25
00:01:46.990 --> 00:01:51.460
you can either pass in a function,
which takes the current value, and

26
00:01:51.460 --> 00:01:56.480
then you can use the current value
to set the next value, or you can

27
00:01:56.480 --> 00:02:00.552
just simply set device directly without
any reference to the current value.

28
00:02:03.670 --> 00:02:12.780
I added a little example, just to
illustrate the useState [INAUDIBLE].

29
00:02:12.780 --> 00:02:15.882
This takes a little while to warm up

30
00:02:31.168 --> 00:02:33.834
I might just launch this on
my phone it might be quicker

31
00:02:51.840 --> 00:02:55.910
All right, so this is a little
counter application that I wrote.

32
00:02:55.910 --> 00:02:57.840
This is what it looks like on my phone.

33
00:02:57.840 --> 00:02:59.630
So there's nothing special going on here.

34
00:02:59.630 --> 00:03:03.390
We've got a counter at the top left,
and we've got 2 buttons for

35
00:03:03.390 --> 00:03:05.220
increment and decrement.

36
00:03:05.220 --> 00:03:08.270
So when I tap on increment, it goes up.

37
00:03:08.270 --> 00:03:13.130
When I tap on decrement,
it goes down, so classic counter.

38
00:03:13.130 --> 00:03:16.940
I'm not going to do a to do list,
I promise, and

39
00:03:16.940 --> 00:03:19.731
let's look at the code for this.

40
00:03:19.731 --> 00:03:23.940
Here I've used the use state from react.

41
00:03:23.940 --> 00:03:29.620
I've set the default values as zero,
and I'm using count and set count.

42
00:03:29.620 --> 00:03:33.180
Notice that in my example here,
I used value and set value.

43
00:03:33.180 --> 00:03:36.200
This is because it doesn't matter
what you name them, it's up to you.

44
00:03:36.200 --> 00:03:38.180
So you can have as many
useSates as you want.

45
00:03:40.090 --> 00:03:42.220
Now, as far as the code goes,

46
00:03:42.220 --> 00:03:47.550
I have just a text that displays
the current account and then two buttons.

47
00:03:47.550 --> 00:03:50.080
I have one for increment and
one for decrement.

48
00:03:51.930 --> 00:03:55.220
For this, I have an onPress handler, and

49
00:03:55.220 --> 00:03:59.980
both of these use the setCount,
which was a second argument from useState.

50
00:03:59.980 --> 00:04:04.350
And both of these use the current
value and either increment or

51
00:04:04.350 --> 00:04:09.270
decrement it,
those that if I was to change this to

52
00:04:11.470 --> 00:04:17.040
lots of nines, then my starting
value would be lots of nines.

53
00:04:17.040 --> 00:04:20.690
And if I just deleted it all together,
I think oops.

54
00:04:22.620 --> 00:04:24.760
If I delete it all together,
there would be no value.

55
00:04:24.760 --> 00:04:26.852
I think it wouldn't even work because,
yeah,

56
00:04:26.852 --> 00:04:29.536
it would be a NaN because it's
trying to add 1 to undefined.

57
00:04:35.046 --> 00:04:38.026
Right, so next up we have useCallback.

58
00:04:38.026 --> 00:04:43.090
useCollback is used for

59
00:04:43.090 --> 00:04:47.950
any actions you may want to perform be
it a state update, a network request, or

60
00:04:47.950 --> 00:04:50.190
launching a modal.

61
00:04:51.760 --> 00:04:56.200
You don't have to use useCallback always,
but

62
00:04:56.200 --> 00:05:00.280
is quite handy to know and
in most of the applications that I worked

63
00:05:00.280 --> 00:05:04.960
at we tend to migrate all of our
side effect in to useCallbacks.

64
00:05:06.170 --> 00:05:13.578
So looking at the country example that
we had before, We would like to, yeah,

65
00:05:13.578 --> 00:05:19.600
so currently in that country example,
we have the onPress handlers inline.

66
00:05:19.600 --> 00:05:23.670
So look at here yesterday inline, which is
kind of fine because it's just a country,

67
00:05:23.670 --> 00:05:26.520
it just says do one thing, but
it's not really great because

68
00:05:28.210 --> 00:05:31.700
if we had a longer on press, so instead,

69
00:05:31.700 --> 00:05:37.100
we kind of want to extract those
into constant functions, like so.

70
00:05:37.100 --> 00:05:40.120
So now we have handle increment and
handle decrement, which we can pass in.

71
00:05:41.540 --> 00:05:45.480
Now this works with the problem
is that the way React works

72
00:05:45.480 --> 00:05:48.960
is every time there is
a change either inside or

73
00:05:48.960 --> 00:05:51.960
outside the component,
this component gets a re render.

74
00:05:51.960 --> 00:05:55.610
So everything inside the components
gets recalculated, so

75
00:05:55.610 --> 00:05:59.640
especially if you were doing something
complex inside here, this will get rerun

76
00:05:59.640 --> 00:06:03.270
every single time you do, like anything
you are related in your application.

77
00:06:05.105 --> 00:06:08.940
This is why you might
want to use useCallback.

78
00:06:08.940 --> 00:06:15.650
So instead of what we can do is we can put
this exact function inside a useCallback.

79
00:06:15.650 --> 00:06:20.360
So if you notice that this and
this are exactly the same.

80
00:06:20.360 --> 00:06:22.470
To use callback basically
takes two arguments.

81
00:06:22.470 --> 00:06:26.000
The first, is the function
that you want to execute, and

82
00:06:26.000 --> 00:06:28.910
the second is an array of variables.

83
00:06:28.910 --> 00:06:31.020
So here we use an empty array.

84
00:06:31.020 --> 00:06:33.660
What this array of variables does is, it

85
00:06:35.160 --> 00:06:40.102
basically tells you when you
should recalculate this function.

86
00:06:40.102 --> 00:06:44.672
So especially this is only
used if you use something

87
00:06:44.672 --> 00:06:49.681
outside of what's already here,
if that makes sense.

88
00:06:49.681 --> 00:06:54.574
So if I was to use any okay,
I will again show an example.

89
00:06:58.110 --> 00:07:02.500
All right, so okay, so this actually
works in here, this is great.

90
00:07:02.500 --> 00:07:05.720
Right, so here I've got a count and
a setCount.

91
00:07:05.720 --> 00:07:06.360
And I created a callback for
handleIncrement and

92
00:07:06.360 --> 00:07:12.240
I created a callback for
handleDecrement, so this works.

93
00:07:14.540 --> 00:07:19.110
And this works because I've
used the current value for

94
00:07:19.110 --> 00:07:24.390
set count, but what if I just use this
if I did this to be counted plus one,

95
00:07:24.390 --> 00:07:27.170
instead of the current value plus one.

96
00:07:27.170 --> 00:07:32.990
So now if I incremented it, no matter how
often I increment it, it's still one.

97
00:07:32.990 --> 00:07:36.040
And that's because I'm
using this count variable.

98
00:07:36.040 --> 00:07:41.540
And this gets cached, and in order for
this function to get re-executed,

99
00:07:41.540 --> 00:07:45.020
then anything that you use
inside this function that

100
00:07:46.600 --> 00:07:50.980
you want to make sure it's reflected,
you have to add them here in the array.

101
00:07:50.980 --> 00:07:54.080
So now if I add count to this array and

102
00:07:54.080 --> 00:07:57.640
I start incrementing that
increment works again.

103
00:07:57.640 --> 00:08:01.480
So that's why hooks are really handy and
really powerful, but

104
00:08:01.480 --> 00:08:03.360
it's really easy to make
mistakes like that.

105
00:08:05.080 --> 00:08:06.747
In general, if you have a hook and

106
00:08:06.747 --> 00:08:10.502
things aren't updating like looking
whether you're passing everything

107
00:08:10.502 --> 00:08:14.156
you need to interdependencies array
is a good place to start debugging.

108
00:08:25.872 --> 00:08:29.080
The last hook that we're going
to look at is called useEffects.

109
00:08:30.500 --> 00:08:35.980
If you're already familiar with React,
like React components then use effect is

110
00:08:35.980 --> 00:08:39.615
comparable to componented mounts,
and componented updates.

111
00:08:39.615 --> 00:08:43.580
It's basically tied to
the component lifecycle.

112
00:08:43.580 --> 00:08:48.898
It gets run generally when
the component is initially mounted,

113
00:08:48.898 --> 00:08:52.200
and another part of it gets run
when the component is unmounted.

114
00:08:53.810 --> 00:08:57.830
You would use this for example,
when you want to subscribe to something

115
00:08:57.830 --> 00:09:02.170
during the converted life cycle, and
you could also use it if you wanted

116
00:09:02.170 --> 00:09:07.280
to do some action based on the properties.

117
00:09:07.280 --> 00:09:10.510
Or if you wanted to do
some action just once

118
00:09:10.510 --> 00:09:12.110
when the component is initially rendered.

119
00:09:13.670 --> 00:09:18.660
So here's an example, for a ChatAPI.

120
00:09:18.660 --> 00:09:22.530
So this is a effect that is run once,
when the component is mounted.

121
00:09:22.530 --> 00:09:26.840
And this is a ChatAPI,
we subscribe to messages.

122
00:09:26.840 --> 00:09:30.760
And when the component gets mounted,
this gets run, so you subscribe.

123
00:09:30.760 --> 00:09:34.100
I noticed that useEffect
actually returns a function.

124
00:09:34.100 --> 00:09:36.680
It doesn't always return a function,
but it's may.

125
00:09:36.680 --> 00:09:41.010
And this is basically the cleanup
part of the useEffect.

126
00:09:41.010 --> 00:09:44.830
If you do something in useEffect
that has a potential for

127
00:09:44.830 --> 00:09:47.500
a memory leak, for example,
subscribing to something

128
00:09:47.500 --> 00:09:51.700
you should also add a cleanup
function which undoes that effect.

129
00:09:53.090 --> 00:09:58.030
In this case, we subscribe to the friend
status when the component is launched.

130
00:09:58.030 --> 00:10:01.880
And then when the component is unmounted,
we unsubscribed from friend status.

131
00:10:03.960 --> 00:10:08.480
All of these functions, you can have
as many useEffects as you want.

132
00:10:08.480 --> 00:10:11.776
And all of these get run when
the component is removed to an estate.

133
00:10:14.748 --> 00:10:19.522
And the other thing you might use it for
is if you just want to do an action, well,

134
00:10:19.522 --> 00:10:22.200
once or multiple times, actually.

135
00:10:22.200 --> 00:10:25.690
So in this case,
notice that it has a dependencies array,

136
00:10:25.690 --> 00:10:28.020
this action gets run just once.

137
00:10:29.420 --> 00:10:31.170
And you need to make
sure that you pass this,

138
00:10:31.170 --> 00:10:33.780
otherwise it gets run every
time the componentry renders.

139
00:10:35.830 --> 00:10:38.170
If you pass the parameter here, for

140
00:10:38.170 --> 00:10:42.260
example, this action would be run
whenever that parameter changes.

141
00:10:44.760 --> 00:10:45.615
Let's look at an example.

142
00:10:50.970 --> 00:10:53.865
All right, so
I have to use my phone for this,

143
00:10:53.865 --> 00:10:58.451
because the network request doesn't
work for the in browser version.

144
00:11:04.287 --> 00:11:09.205
Cool, so basically what I'm doing
here is I am fetching some cat

145
00:11:09.205 --> 00:11:12.840
facts from a public cat facts API.

146
00:11:12.840 --> 00:11:16.850
And I've got a state parameter
here I've got useState.

147
00:11:16.850 --> 00:11:21.350
Which stores all the facts, so
I'm using a facts to solve the array and

148
00:11:21.350 --> 00:11:23.560
I've got a set facts for
updating the array.

149
00:11:23.560 --> 00:11:25.430
I'm gonna start with an empty array.

150
00:11:27.460 --> 00:11:29.710
Now I'm going to have a useCallback.

151
00:11:30.730 --> 00:11:36.950
And now have a useCallback which
basically does the net request.

152
00:11:36.950 --> 00:11:40.387
So a little bit hard to see here because
everything's open and I can't close it.

153
00:11:47.123 --> 00:11:47.623
Okay.

154
00:11:49.130 --> 00:11:53.000
So here I'm going to use call back.

155
00:11:53.000 --> 00:11:57.300
I'm doing an asynchronous call and
this is the entire call.

156
00:11:57.300 --> 00:12:02.050
I'm going to fetch from this API and
then I'm going to get

157
00:12:04.850 --> 00:12:08.580
the Jason from the cat facts, and
then I'm going to set the facts here.

158
00:12:10.430 --> 00:12:15.606
And finally we've got a useEffect,
and this is run when the component

159
00:12:15.606 --> 00:12:19.921
is initially launched and
is going to call this function.

160
00:12:19.921 --> 00:12:23.146
Now, the reason that I
had to do a useCallback,

161
00:12:23.146 --> 00:12:27.986
rather than doing all the fetching
stuff in here is because you can't do

162
00:12:27.986 --> 00:12:30.610
asynchronous things in a useEffect.

163
00:12:30.610 --> 00:12:36.200
You can in a use effect you can trigger
functions that are asynchronous, but

164
00:12:36.200 --> 00:12:41.476
this itself, if I tried to do this,
it would just tell me no, it wouldn't run.

165
00:12:41.476 --> 00:12:48.940
And the other thing to notice that
is that I said, so look at what

166
00:12:48.940 --> 00:12:54.370
my screen is that you need to be wary of
making sure you remember to pass this in.

167
00:12:54.370 --> 00:12:59.587
So let's see what happens if I don't pass
this then, you see that it just loads,

168
00:12:59.587 --> 00:13:04.670
and loads, and loads, and loads for
requests and keys auto updating.

169
00:13:04.670 --> 00:13:09.260
That is because it gets rerun every
time the component is rendered, and

170
00:13:09.260 --> 00:13:12.290
the component gets rendered
every time something changes.

171
00:13:12.290 --> 00:13:16.040
So this will get triggered to get to this,
which fetches this,

172
00:13:16.040 --> 00:13:18.940
which sets the fact and then this
causes the component to re-render and

173
00:13:18.940 --> 00:13:20.580
you end up with an infinite loop.

174
00:13:20.580 --> 00:13:22.710
So you need to be quite
careful in using these.

