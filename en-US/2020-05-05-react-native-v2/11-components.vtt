WEBVTT

1
00:00:00.100 --> 00:00:03.630
React Native the same as React
is a component based framework.

2
00:00:03.630 --> 00:00:08.790
This means that your app is basically
built out of these tiny little Lego books,

3
00:00:08.790 --> 00:00:11.250
and they are nested within each other.

4
00:00:11.250 --> 00:00:14.640
And we want to reuse
them as much as possible.

5
00:00:14.640 --> 00:00:17.320
Generally you have one root component.

6
00:00:17.320 --> 00:00:21.960
In our case, this is the app j s,
and this is the entry point for

7
00:00:21.960 --> 00:00:23.430
your whole application.

8
00:00:23.430 --> 00:00:25.750
And inside it will have lots,
and lots, and

9
00:00:25.750 --> 00:00:29.641
lots of little components that are inside
each other next to each other and

10
00:00:29.641 --> 00:00:31.854
we want to reuse them as much as possible.

11
00:00:34.510 --> 00:00:38.830
Yeah, it's generally good practice
to break your app into many

12
00:00:38.830 --> 00:00:42.590
small components and
it has a couple of benefits.

13
00:00:42.590 --> 00:00:44.670
It promotes component reuse,

14
00:00:44.670 --> 00:00:48.950
like you've already built a button you
made sure that it interacts correctly.

15
00:00:48.950 --> 00:00:53.580
It has the right colors why would
you want to build it twice, and

16
00:00:53.580 --> 00:00:55.050
it's easier to follow.

17
00:00:55.050 --> 00:01:00.610
No one wants to debug a 1000 line react
component if they can help it, and

18
00:01:00.610 --> 00:01:02.820
finally, it's easier to test.

19
00:01:02.820 --> 00:01:07.290
It's significantly easier to unit test
a small component than it is a huge one.

20
00:01:09.070 --> 00:01:11.690
Now, let's look at the app
that we've built so far.

21
00:01:11.690 --> 00:01:14.420
Can you see something that can
be extracted into a component?

22
00:01:16.130 --> 00:01:20.050
Well, I think the colored boxes
is a pretty good candidate for

23
00:01:20.050 --> 00:01:21.430
being refactored.

24
00:01:21.430 --> 00:01:25.700
So let's see that in general.

25
00:01:27.150 --> 00:01:29.120
Yeah, in general in react,

26
00:01:29.120 --> 00:01:33.770
we have a components directory
where we add our components.

27
00:01:33.770 --> 00:01:39.590
So let's go to the root directory of your
project, and let's create a new folder.

28
00:01:39.590 --> 00:01:43.110
How do I create folders here,
yeah called components.

29
00:01:47.330 --> 00:01:55.920
And now inside this component let's
create a new file called color box.js.

30
00:01:55.920 --> 00:01:59.200
This is going to be our
reusable colored box component.

31
00:02:01.440 --> 00:02:05.800
I always start all new components
with my default hello world,

32
00:02:05.800 --> 00:02:09.260
display something in the screen
to make sure it's working code.

33
00:02:09.260 --> 00:02:11.310
So let's do this here as well.

34
00:02:11.310 --> 00:02:12.735
So let's import React.

35
00:02:14.345 --> 00:02:22.105
Okay, [SOUND] let's import the view and

36
00:02:22.105 --> 00:02:27.519
text from react-native.

37
00:02:27.519 --> 00:02:32.429
Now let's create a constant
component called ColorBox.

38
00:02:40.002 --> 00:02:43.516
Let's have it return,
same as what we did before,

39
00:02:43.516 --> 00:02:46.395
we just have a view with some text inside.

40
00:02:50.051 --> 00:02:56.589
And finally don't forget to return that
ColorBox component as the default export.

41
00:03:02.102 --> 00:03:06.632
You can have multiple components per file,
but generally, a good practice is just

42
00:03:06.632 --> 00:03:10.776
to stick with one component per file
[be]cause then you don't lose them,

43
00:03:10.776 --> 00:03:14.163
you'll just see what the components
are based on file names.

44
00:03:23.394 --> 00:03:25.887
Now that we have this component,

45
00:03:25.887 --> 00:03:30.080
let's import it to our app and
display it on the screen.

46
00:03:30.080 --> 00:03:34.209
So let's import ColorBox

47
00:03:34.209 --> 00:03:40.221
from './components/ColorBox'

48
00:03:43.970 --> 00:03:48.825
And let's add it after the last
box that we already have.

49
00:03:54.912 --> 00:03:58.911
You should be seeing the text that you
added on the screen underneath all your

50
00:03:58.911 --> 00:04:00.110
other boxes.

51
00:04:00.110 --> 00:04:02.720
Now if you've not done React before,

52
00:04:02.720 --> 00:04:08.168
one thing to note here is I've used a
what's called a self closing, JSX element.

53
00:04:08.168 --> 00:04:13.900
So normally, JSX elements have
a starting tag and an ending tag.

54
00:04:13.900 --> 00:04:20.230
So the ending tag has what they call,
the little dash to say that it ends it.

55
00:04:20.230 --> 00:04:23.790
And then for
the one I called children inside.

56
00:04:23.790 --> 00:04:24.690
Whereas this color box,

57
00:04:24.690 --> 00:04:28.720
we don't want to pass any children into
it, so we just want the component itself.

58
00:04:28.720 --> 00:04:33.100
So rather than having us do this,
which we wish we could,

59
00:04:33.100 --> 00:04:36.020
and it's just empty children,
but it's redundant.

60
00:04:36.020 --> 00:04:39.510
We just close it immediately, so
there's just a handy little feature.

61
00:04:42.690 --> 00:04:47.270
Cool, so
what we should do now is let's just

62
00:04:47.270 --> 00:04:52.460
copy the code that we had for
our first color box,

63
00:04:52.460 --> 00:04:57.560
the cyan one, and add it here and
replace the content here.

64
00:05:01.120 --> 00:05:03.089
You'll also have to copy the styles.

65
00:05:04.220 --> 00:05:09.559
So I'm gonna create import StyleSheet.

66
00:05:14.008 --> 00:05:21.545
And we need const styles,
use style sheet creates,

67
00:05:21.545 --> 00:05:27.207
stylesheet create, and we have a box,

68
00:05:30.015 --> 00:05:36.828
Style, and cyan style, And

69
00:05:36.828 --> 00:05:42.843
a box text I'm just gonna
copy these styles over.

70
00:05:42.843 --> 00:05:45.808
So box style,

71
00:05:50.338 --> 00:05:57.688
Cyan, And text.

72
00:06:04.094 --> 00:06:06.130
Cool, well this is working.

73
00:06:06.130 --> 00:06:09.330
But now what we're doing is we're
just taking our cyan box and

74
00:06:09.330 --> 00:06:11.740
created a color box for
it which is not very handy.

75
00:06:11.740 --> 00:06:15.360
What we'd like is for
this box to display the color, and

76
00:06:15.360 --> 00:06:16.860
the name of the color dynamically.

77
00:06:18.455 --> 00:06:23.280
Now what we can use for
this, props, or properties.

78
00:06:23.280 --> 00:06:27.870
You've already actually used properties,
specifically the style property, but, what

79
00:06:27.870 --> 00:06:32.460
you might not know is that you can add
your own properties as many as you want.

80
00:06:32.460 --> 00:06:36.250
So for the color box we have two
properties we would like to add.

81
00:06:36.250 --> 00:06:41.650
We have the color name which in

82
00:06:41.650 --> 00:06:47.483
this case is cyan and colorHex.

83
00:06:55.620 --> 00:06:59.743
Now in order to get access to these
two properties in the color box,

84
00:06:59.743 --> 00:07:02.140
they get passed into here.

85
00:07:02.140 --> 00:07:05.991
So if you assign this to props,

86
00:07:05.991 --> 00:07:12.806
you can replace cyan with props,
dots, color name and

87
00:07:12.806 --> 00:07:18.584
you can replaces this
hex code with props dot,

88
00:07:18.584 --> 00:07:22.751
I think I should call it hex code.

89
00:07:27.206 --> 00:07:29.368
I think I called it hex
code in my solutions,

90
00:07:29.368 --> 00:07:31.009
I'm gonna rename it to hex code.

91
00:07:37.107 --> 00:07:41.646
Notice that if we want to use any
kind of variables in as text,

92
00:07:41.646 --> 00:07:45.651
we have to wrap them into
curly braces cause that tells

93
00:07:45.651 --> 00:07:50.457
react-native that this is text,
because if I didn't do this,

94
00:07:50.457 --> 00:07:55.976
it would just render props.colorName
as a text which is not what we want.

95
00:08:00.315 --> 00:08:04.160
And finally,
this is a convention in React.

96
00:08:04.160 --> 00:08:09.518
And I think I'm going to follow throughout
this course that these structure,

97
00:08:09.518 --> 00:08:15.199
the properties, so rather than having a
props here and doing props dot color name,

98
00:08:15.199 --> 00:08:20.800
we can actually replace this with curly
braces and these structure the properties

99
00:08:20.800 --> 00:08:26.187
directly, so we can do a color name, and
hex code and then just get rid of this.

100
00:08:31.160 --> 00:08:34.198
So this is just a convenience, but
you'll see it all the time, so

101
00:08:34.198 --> 00:08:35.535
it's good to get used to it.

102
00:08:39.766 --> 00:08:44.540
And now finally, you notice that
still we use cyan here and styles.

103
00:08:44.540 --> 00:08:47.260
Now if you remember,
we can pass in inline styles and

104
00:08:47.260 --> 00:08:50.780
we can pass in multiple styles,
and we can do it all at once.

105
00:08:50.780 --> 00:08:57.581
So we can add a constant
here called box color and

106
00:08:57.581 --> 00:09:02.682
the background color hex code, and

107
00:09:02.682 --> 00:09:08.304
just pass this in as a second argument.

108
00:09:12.382 --> 00:09:14.860
Now we can get rid of
the actual color stat as well.

109
00:09:17.280 --> 00:09:20.870
That's it,
this is our reusable color box component.

110
00:09:20.870 --> 00:09:26.800
So now all we want to do is replace
all of the rest of the colors with it.

111
00:09:26.800 --> 00:09:33.225
So let's create four of these, and
then just copy this we got blue,

112
00:09:33.225 --> 00:09:38.772
magenta, orange,
I'm gonna copy the hex codes as well.

113
00:09:43.600 --> 00:09:45.600
And finally we can get rid of all this.

114
00:09:50.143 --> 00:09:54.958
And we can also get rid of the styles
here so the box, textbox, style,

115
00:09:54.958 --> 00:09:56.600
and all the text style.

116
00:09:56.600 --> 00:09:59.140
So you should only have the container and
textiles left.

117
00:10:02.330 --> 00:10:05.809
Now we've basically converted
our component into,

118
00:10:05.809 --> 00:10:10.523
we've refactored our code so
that our color box component is separate,

119
00:10:10.523 --> 00:10:13.706
making our code much cleaner and
easier to read.

