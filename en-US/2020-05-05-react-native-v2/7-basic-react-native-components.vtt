WEBVTT

1
00:00:00.110 --> 00:00:03.320
First off,
let's look at what a component looks like.

2
00:00:03.320 --> 00:00:06.921
If you're already familiar with React,
this will be super familiar with you.

3
00:00:06.921 --> 00:00:10.521
But if you're less familiar with React or
you've never used it,

4
00:00:10.521 --> 00:00:12.100
we're just going to recap.

5
00:00:14.115 --> 00:00:18.145
This is an example of a React component
as you will find them on the web.

6
00:00:18.145 --> 00:00:19.175
Let's look at this in detail.

7
00:00:20.655 --> 00:00:24.385
First, we have the React input with
the other constant function, and

8
00:00:24.385 --> 00:00:25.985
then we got an export.

9
00:00:27.075 --> 00:00:29.595
Notice that here we're using a div.

10
00:00:29.595 --> 00:00:33.825
And this looks suspiciously like HTML on
the web, it's actually what's called JSX,

11
00:00:33.825 --> 00:00:36.450
which stands for JavaScript and XML.

12
00:00:36.450 --> 00:00:41.515
But you can pretty much think of it as
HTML that you can write JavaScript in.

13
00:00:41.515 --> 00:00:46.848
It's really handy because you can
make your code completely dynamic.

14
00:00:48.637 --> 00:00:52.403
The React import, you'll notice that we're
not actually using React inside this

15
00:00:52.403 --> 00:00:53.760
component anywhere.

16
00:00:53.760 --> 00:00:57.840
But as a rule of thumb, if you're using
anything that has these tiny braces,

17
00:00:57.840 --> 00:00:59.960
just JSX, they'll have to import React.

18
00:01:02.330 --> 00:01:05.037
Now let's look at the corresponding
React Native components.

19
00:01:07.756 --> 00:01:09.660
They're actually pretty similar.

20
00:01:09.660 --> 00:01:14.027
But one thing that you might notice as
a difference is that we have these new

21
00:01:14.027 --> 00:01:18.340
components view and text, which we
import directly from React Native.

22
00:01:19.660 --> 00:01:24.420
Now, one difference between React and
React Native is that whereas in React we

23
00:01:24.420 --> 00:01:29.200
have some JSX elements that are the same

24
00:01:29.200 --> 00:01:34.430
as HTML elements like the p tag or
div or span or button.

25
00:01:34.430 --> 00:01:37.360
We'll have them available
just magically globally.

26
00:01:37.360 --> 00:01:40.277
Whereas in React Native,
every single thing has to be imported.

27
00:01:41.398 --> 00:01:46.800
The other thing we'll notice is that
we've used a view here for a container.

28
00:01:46.800 --> 00:01:50.120
And then, we have this text component
which doesn't exist on the web.

29
00:01:51.280 --> 00:01:54.840
In React Native,
whenever you want to display any text,

30
00:01:54.840 --> 00:01:58.480
it has to be wrapped inside a text
elements otherwise, you'll get error.

31
00:01:58.480 --> 00:02:03.769
If you've done old timey programming,
where you had this MVC patterns,

32
00:02:03.769 --> 00:02:09.484
and you might be used to thinking of views
as these one big container component or

33
00:02:09.484 --> 00:02:10.607
a single page.

34
00:02:10.607 --> 00:02:12.810
This is not actually the case,

35
00:02:12.810 --> 00:02:17.990
you can pretty much think of use to
be equivalent to divs on the web.

36
00:02:17.990 --> 00:02:21.900
You can use them for containing things,
for positioning, for anything.

37
00:02:21.900 --> 00:02:25.770
You don't need to worry about using
too many div elements as well.

38
00:02:25.770 --> 00:02:28.221
Because React Native, in a compile step,

39
00:02:28.221 --> 00:02:32.451
automatically compresses two divs
that don't have any visible styles.

40
00:02:35.669 --> 00:02:38.867
Now we're going to
introduce three components,

41
00:02:38.867 --> 00:02:42.070
we've got our view which
is basically like a div.

42
00:02:42.070 --> 00:02:46.770
We've got a scroll view,
which is a div, but it scrolls.

43
00:02:46.770 --> 00:02:49.880
So content doesn't automatically
scroll in React Native.

44
00:02:49.880 --> 00:02:52.310
If there's anything that needs
to have the scroll action,

45
00:02:52.310 --> 00:02:54.070
need to use a scroll
view instead of a view.

46
00:02:55.070 --> 00:03:00.700
And finally, a text, a text component is
used for displaying any text and or text.

47
00:03:00.700 --> 00:03:03.580
If you don't use a text element,
you put some text and you get an error.

48
00:03:06.072 --> 00:03:07.880
Right, well let's get coding.

49
00:03:07.880 --> 00:03:12.305
So regardless of whether your using
Expo or not, go into your App.js.

50
00:03:12.305 --> 00:03:17.156
And then just delete everything and
you get an error.

51
00:03:17.156 --> 00:03:18.565
I'm gonna start from scratch.

52
00:03:18.565 --> 00:03:20.821
First thing we do is we import React.

53
00:03:24.447 --> 00:03:28.360
This is basically the first thing you
do in every single React component.

54
00:03:28.360 --> 00:03:32.690
Now, what we're going to do is we're going
to import the React Native elements that

55
00:03:32.690 --> 00:03:33.522
we're going to use.

56
00:03:33.522 --> 00:03:36.353
We're going to import view and

57
00:03:36.353 --> 00:03:42.190
text from react-native.

58
00:03:42.190 --> 00:03:44.250
Now I always use constant functions,

59
00:03:44.250 --> 00:03:47.370
especially nowadays when there's
no need for cost functions.

60
00:03:49.265 --> 00:03:52.811
So let's do a new const called App.

61
00:03:55.354 --> 00:03:58.887
So this is basically the template for
a const.

62
00:03:58.887 --> 00:04:05.062
And now the next thing I usually do is
I also export it, export default App.

63
00:04:08.822 --> 00:04:12.186
Right, so now we've got a little template,
but nothing, still rendering, and

64
00:04:12.186 --> 00:04:15.990
that's because we haven't actually
added anything visible here.

65
00:04:15.990 --> 00:04:21.020
Let's do a return, and
let's return a view.

66
00:04:22.890 --> 00:04:27.250
Inside that view, you can see that
there's already no error which is great.

67
00:04:27.250 --> 00:04:30.841
We'll add a text, with some Hello world!

68
00:04:33.671 --> 00:04:39.770
Now, notice that this text gets
bended way at the top of the screen.

69
00:04:39.770 --> 00:04:41.062
This is not what we want.

70
00:04:41.062 --> 00:04:45.465
And you might be tempted to add some
padding at the top of the screen

71
00:04:45.465 --> 00:04:46.835
to get around this.

72
00:04:46.835 --> 00:04:48.357
But that's actually not
a great thing to do.

73
00:04:48.357 --> 00:04:53.017
Because this will work on this
iPhone 11 emulate, what we have but

74
00:04:53.017 --> 00:04:55.644
what about if you're using Android?

75
00:04:55.644 --> 00:04:57.230
Let's see how this looks
on Android as well.

76
00:04:58.360 --> 00:04:59.150
Yeah, so in Android,

77
00:04:59.150 --> 00:05:04.240
it doesn't actually look that bad
because the screen starts from the top.

78
00:05:04.240 --> 00:05:04.950
But thankfully,

79
00:05:04.950 --> 00:05:09.290
there is a component that helps us get
around this it's called SafeAreaView.

80
00:05:09.290 --> 00:05:11.248
So let's import the SafeAreaView as well.

81
00:05:15.874 --> 00:05:20.758
And then let's just wrap the whole thing,

82
00:05:20.758 --> 00:05:25.160
oops, in a SafeAreaView, cool.

83
00:05:25.160 --> 00:05:29.954
And you'll notice that
the content automatically gets

84
00:05:29.954 --> 00:05:33.728
rendered just below our notification bar.

85
00:05:33.728 --> 00:05:37.264
And in Android, it already worked so
there's no change.

86
00:05:41.147 --> 00:05:45.561
And you know how I said that you have
to use a text element to display text?

87
00:05:45.561 --> 00:05:47.244
Now let's see what happens if you don't.

88
00:05:49.761 --> 00:05:53.302
React Native will immediately tell you
that you're doing something wrong.

89
00:05:53.302 --> 00:05:55.529
The error messages in React Native
are actually really good.

90
00:05:55.529 --> 00:05:57.450
So if you end up getting an error,

91
00:05:57.450 --> 00:06:01.375
just reading the error message
usually guides you to the solution.

