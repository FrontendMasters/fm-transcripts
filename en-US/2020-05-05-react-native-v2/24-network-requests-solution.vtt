WEBVTT

1
00:00:00.810 --> 00:00:04.270
All right, let's look at the solution
to the network requests exercise.

2
00:00:04.270 --> 00:00:07.800
I'm just gonna go ahead and
leave this open.

3
00:00:07.800 --> 00:00:08.722
So, I have the URL.

4
00:00:15.179 --> 00:00:15.810
Here it is.

5
00:00:16.940 --> 00:00:22.520
All right, and pretty much we want to do
exactly what we did in the Hooks example.

6
00:00:22.520 --> 00:00:26.382
So the first thing we're going
to do is we're going to go to,

7
00:00:28.374 --> 00:00:33.203
Our home, because this is where we hard
coded all the palettes originally.

8
00:00:33.203 --> 00:00:35.575
So we're gonna just use this here.

9
00:00:42.240 --> 00:00:43.620
Yeah, cool.

10
00:00:43.620 --> 00:00:48.330
All right, so the first thing we'll do is
we want to import useState from react.

11
00:00:50.630 --> 00:00:54.840
And we're going to start a state
parameter to hold our color palettes.

12
00:00:56.440 --> 00:01:01.640
So that's do color palettes,

13
00:01:01.640 --> 00:01:09.850
setColorPalettes, = useState.

14
00:01:09.850 --> 00:01:13.227
And then let's set an initial value for
that for an empty array.

15
00:01:15.289 --> 00:01:19.965
All right, the next thing you want
to do is actually write the code

16
00:01:19.965 --> 00:01:22.280
that does the network request.

17
00:01:22.280 --> 00:01:25.440
So to do that,
we're going to use a useCallback,

18
00:01:25.440 --> 00:01:30.202
because we need to use useCallback if
we want to do anything asynchronous.

19
00:01:33.180 --> 00:01:37.305
So let call this fetchColorPalettes,

20
00:01:40.435 --> 00:01:42.674
And lets do useCallback.

21
00:01:45.566 --> 00:01:49.395
And usually, I create an empty
function if I'm writing these.

22
00:01:49.395 --> 00:01:54.545
And then immediately do a comma and
pass in an empty array so

23
00:01:54.545 --> 00:01:57.602
we won't forget to do that later.

24
00:01:59.825 --> 00:02:02.512
And we want to do a network request,
so let's make this async.

25
00:02:06.604 --> 00:02:11.170
Fetch works on React Native the same
way it does in the web, which is great.

26
00:02:11.170 --> 00:02:18.365
So we can just do const results = fetch,
and we can just fetch the URL.

27
00:02:18.365 --> 00:02:19.639
Oops, that's not the URL.

28
00:02:21.458 --> 00:02:22.567
Can I get this?

29
00:02:24.509 --> 00:02:25.310
That's pretty much it.

30
00:02:25.310 --> 00:02:29.652
If you want to do a post,
you could add more attributes here.

31
00:02:32.482 --> 00:02:34.286
And let's do an await.

32
00:02:36.764 --> 00:02:41.834
And if, we have result.Ok,
usually it's good to account for

33
00:02:41.834 --> 00:02:45.374
the case that the network request fails,
so

34
00:02:45.374 --> 00:02:49.790
you should always do a if
result.Ok handle the thing.

35
00:02:51.460 --> 00:02:53.553
And you can do const pallettes.

36
00:02:55.493 --> 00:02:58.762
And we await results.json, and

37
00:02:58.762 --> 00:03:03.434
this will basically get
the network request and

38
00:03:03.434 --> 00:03:08.354
convert it to get the JSON
response from it first.

39
00:03:08.354 --> 00:03:12.890
And last thing you wanna do is you
want to use set colorPalettes to

40
00:03:12.890 --> 00:03:16.003
actually set it to
the response that we got.

41
00:03:20.259 --> 00:03:24.344
And here we really don't care about
what the original value was, so

42
00:03:24.344 --> 00:03:27.079
we can just go ahead and
pass the palettes in.

43
00:03:30.438 --> 00:03:33.451
Cool, and lastly,
what we want to do is actually make this

44
00:03:33.451 --> 00:03:36.740
happen dynamically when
the component is mounted.

45
00:03:36.740 --> 00:03:39.341
And for that,
we're going to import useEffect.

46
00:03:44.198 --> 00:03:53.441
And here we're going to do useEffect,
Pass in a function,

47
00:03:53.441 --> 00:03:59.020
don't forget to do the empty array,
we saw what happens when you don't.

48
00:03:59.020 --> 00:04:01.838
And let's just call fetchColorPalettes.

49
00:04:05.977 --> 00:04:09.058
Nice, and
the very last thing you should do

50
00:04:09.058 --> 00:04:13.430
is actually pass the colorPalettes
into a Flatlist as data.

51
00:04:14.590 --> 00:04:19.780
And because our data structure is exactly
the same, we can just replace them.

52
00:04:21.660 --> 00:04:24.437
Nice, got a whole bunch of them now, and

53
00:04:24.437 --> 00:04:27.475
now we can delete all
the hard coded values.

54
00:04:30.211 --> 00:04:32.330
And that's pretty much it.

55
00:04:32.330 --> 00:04:35.850
I added three color palettes that
I knew about which was Solarized,

56
00:04:35.850 --> 00:04:37.710
Frontend Masters, and the Rainbow.

57
00:04:37.710 --> 00:04:42.160
And then I added a bunch of other color
palettes just from the Public color API,

58
00:04:42.160 --> 00:04:46.140
and what I found is that people name
their colors very strange things,

59
00:04:46.140 --> 00:04:47.438
which is quite funny.

60
00:04:50.226 --> 00:04:50.920
All right.

61
00:04:51.940 --> 00:04:52.440
&gt;&gt; Question.

62
00:04:53.470 --> 00:04:54.750
&gt;&gt; Yes.

63
00:04:54.750 --> 00:04:58.444
&gt;&gt; For React Native,
what would you use for unit testing?

64
00:04:58.444 --> 00:05:01.710
Would you use something like React?

65
00:05:01.710 --> 00:05:04.650
&gt;&gt; There's a React Native testing
library that's special for

66
00:05:04.650 --> 00:05:07.310
React Native,
it is React Native test library.

67
00:05:07.310 --> 00:05:09.190
And then if you want to
do end to end testing,

68
00:05:09.190 --> 00:05:13.870
there's a framework called Detox,
that's kind of the best for that.

69
00:05:13.870 --> 00:05:18.670
There's some limitations on running on

70
00:05:18.670 --> 00:05:23.334
some Android devices on specific CIs.

71
00:05:23.334 --> 00:05:26.509
But in general, if you want to do
end to end testing in React Native,

72
00:05:26.509 --> 00:05:28.585
Detox is kind of like
the main thing you use.

73
00:05:28.585 --> 00:05:30.540
And you can write your tests in
JavaScript, which is pretty cool.

