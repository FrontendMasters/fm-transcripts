WEBVTT

1
00:00:00.450 --> 00:00:03.966
If you use web developments,
you kind of familiar with having

2
00:00:03.966 --> 00:00:07.546
to have a actual HTML form element,
where your form lives, and

3
00:00:07.546 --> 00:00:12.730
there's a button that has,
it's the submit button and kind of things.

4
00:00:12.730 --> 00:00:17.910
In React Native, things are sort
of simpler and more difficult.

5
00:00:17.910 --> 00:00:18.760
Simpler in that,

6
00:00:18.760 --> 00:00:22.511
there is no restraints and having to
have everything inside the form element.

7
00:00:22.511 --> 00:00:26.996
But more difficult is because you have to
track everything yourself with the state,

8
00:00:26.996 --> 00:00:29.218
when to submit it, and everything else.

9
00:00:31.232 --> 00:00:35.852
There are a bunch of inputs that
are available for React Native, and

10
00:00:35.852 --> 00:00:40.649
I'm just going to go through the main
ones that I use most frequently.

11
00:00:40.649 --> 00:00:45.384
TextInput is probably the most common,
most frequently used in React Native,

12
00:00:45.384 --> 00:00:49.553
it is actually incredibly powerful and
you can do loads of things, but

13
00:00:49.553 --> 00:00:51.830
it's similar to the input in the web.

14
00:00:53.903 --> 00:00:59.083
So I've created this little example
that should have four different forms.

15
00:01:06.449 --> 00:01:12.994
And, Yeah, so
this is four different forms,

16
00:01:12.994 --> 00:01:19.429
all using the TextInput, But
they do different things.

17
00:01:19.429 --> 00:01:24.510
So the first one we have is
just the basic TextInput.

18
00:01:24.510 --> 00:01:29.794
So this is the one that you would use
most frequently, just to input some text,

19
00:01:29.794 --> 00:01:34.370
so, I've got the current
value displaying here.

20
00:01:34.370 --> 00:01:35.810
So what we have here,

21
00:01:35.810 --> 00:01:39.448
I've used a style prop, I've used
the value, which is the current value.

22
00:01:39.448 --> 00:01:43.050
I used useState for all of these,
and then we have a function for

23
00:01:43.050 --> 00:01:45.210
onChangeText which sets the value.

24
00:01:46.450 --> 00:01:51.044
And finally, I've used that
placeholder attribute to have a little

25
00:01:51.044 --> 00:01:53.986
placeholder here if nothing is displayed.

26
00:01:56.400 --> 00:01:59.338
And then we have a number input.

27
00:01:59.338 --> 00:02:02.907
Basically for the number input,
I've used the same properties,

28
00:02:02.907 --> 00:02:06.870
the only differences that I've used
a keyboardType, which is numeric.

29
00:02:09.312 --> 00:02:11.863
Okay, so
this is what it looks like on a device.

30
00:02:11.863 --> 00:02:17.998
So, for a normal input, I can just
type it in here, which is pretty nice.

31
00:02:21.280 --> 00:02:25.595
For a number input,
notice that when I tap, sorry.

32
00:02:25.595 --> 00:02:29.805
For a number input,
notice that when I tap on this input,

33
00:02:29.805 --> 00:02:33.345
it actually brings up my number keyboard.

34
00:02:33.345 --> 00:02:36.235
This is what you can set
using the keyboardType.

35
00:02:36.235 --> 00:02:43.247
If you actually look at
React Native TextInput,

36
00:02:46.032 --> 00:02:53.323
If I do keyboardType, keyboardType, yeah.

37
00:02:53.323 --> 00:02:56.384
So this shows you all the different
keyboardTypes that you can have.

38
00:02:56.384 --> 00:03:00.633
These work across platform and
there are some that only works on iOS and

39
00:03:00.633 --> 00:03:01.722
only on Android.

40
00:03:04.952 --> 00:03:08.358
Now, going back to here,
if you have, for example,

41
00:03:08.358 --> 00:03:12.826
a password input or something sensitive
that the user needs to input,

42
00:03:12.826 --> 00:03:15.802
usually you don't want
to actually display,

43
00:03:19.410 --> 00:03:24.460
What the user inputs, so
we can obfuscate it, and

44
00:03:24.460 --> 00:03:29.281
we do this using secureTextEntry=[true].

45
00:03:30.482 --> 00:03:35.159
And finally,
we can have a multiline input.

46
00:03:37.820 --> 00:03:42.440
So this, Oops.

47
00:03:42.440 --> 00:03:44.827
I'm gonna do this again because I
forgot to show it on the screen.

48
00:03:47.851 --> 00:03:50.020
And finally,
we can have a multiline input.

49
00:03:56.702 --> 00:04:03.707
And you can see that,
This works with lots of lines.

50
00:04:03.707 --> 00:04:06.820
And these are basically the main
TextInputs that you can have.

51
00:04:11.983 --> 00:04:14.750
Now, moving on to a different component.

52
00:04:16.600 --> 00:04:19.410
The picker component is
an interesting one because it

53
00:04:19.410 --> 00:04:22.830
looks very different depending on
the platform that you're looking at.

54
00:04:22.830 --> 00:04:25.870
So this is the same picker code, and

55
00:04:25.870 --> 00:04:30.760
on the left is what I got on iOS and
on a Mac, right is what I had on Android.

56
00:04:30.760 --> 00:04:34.650
And that is because that is
the default view for both platforms.

57
00:04:34.650 --> 00:04:39.940
So on iOS, you kind of have this like
scroll view, which has tactical feedback.

58
00:04:39.940 --> 00:04:45.964
And on Android, it's like a thing that
you press on, and it launches a module.

59
00:04:49.845 --> 00:04:53.562
Now, another component that's quite
cute is the switch component,

60
00:04:53.562 --> 00:04:56.180
switch is essentially a toggle button.

61
00:04:56.180 --> 00:04:59.520
With some styling aside,
it looks really similar across platforms.

62
00:05:01.010 --> 00:05:02.165
So let's look at an example.

63
00:05:07.150 --> 00:05:10.307
So this is, I mean,
it would actually look very,

64
00:05:10.307 --> 00:05:13.104
very similar if when I
launch it on my phone.

65
00:05:13.104 --> 00:05:16.582
Yeah, so I just have this little
button in the middle of my screen.

66
00:05:16.582 --> 00:05:19.542
And the button color is
very easily customizable.

67
00:05:19.542 --> 00:05:24.508
I think switches actually weren't
the smallest components in terms of props.

68
00:05:24.508 --> 00:05:27.610
So you just have, whether it's disabled,
the background color,

69
00:05:27.610 --> 00:05:30.970
there's an unchanged value,
changed, and not really much else.

70
00:05:34.440 --> 00:05:40.050
There are loads and
loads of other components out there which

71
00:05:40.050 --> 00:05:43.880
you can explore in your own time, but
not everything is built into React Native.

72
00:05:43.880 --> 00:05:45.880
So when I build applications,

73
00:05:45.880 --> 00:05:50.430
I tend to rely on community and
third-party components quite a bit.

74
00:05:50.430 --> 00:05:54.150
A lot of them are actually under
the React Native community organization.

75
00:05:54.150 --> 00:06:00.060
This is basically a community,
it's a bunch of open source

76
00:06:00.060 --> 00:06:04.880
libraries that are in the React community,
like on the React Community care.

77
00:06:04.880 --> 00:06:07.200
So there's a Slack channel, and

78
00:06:07.200 --> 00:06:10.570
there's a bunch of components
that sometimes people have built,

79
00:06:10.570 --> 00:06:14.212
they don't have time to maintain so they
kind of hand them off to the community.

80
00:06:14.212 --> 00:06:19.420
So generally,
these are all quite reliable things.

81
00:06:19.420 --> 00:06:24.390
But a lot of the time, if you need
a component, you just Google for it.

82
00:06:24.390 --> 00:06:25.856
For example, a date picker,

83
00:06:25.856 --> 00:06:28.801
there isn't really a good date
picker solutions built in.

84
00:06:28.801 --> 00:06:31.436
So you would just do
React Native date picker.

85
00:06:33.418 --> 00:06:36.550
Any search words, and
then you have a bunch of options.

86
00:06:36.550 --> 00:06:41.690
So these, for example, say here are two
options, That I've looked at before.

87
00:06:43.070 --> 00:06:46.440
And you might wonder how you
would choose between them,

88
00:06:46.440 --> 00:06:48.350
if you did have to do a date picker.

89
00:06:48.350 --> 00:06:54.147
So what I usually do is I look at
the author, if it's someone that I know,

90
00:06:54.147 --> 00:06:58.342
especially if it's a company,
I feel more relied.

91
00:06:58.342 --> 00:07:04.093
But if it's an individual developer, the
thing to look at is how many stars it has.

92
00:07:04.093 --> 00:07:07.710
And also how many forks it has
because there are some libraries that

93
00:07:07.710 --> 00:07:11.923
are incredibly popular because the author
of the library is really popular.

94
00:07:11.923 --> 00:07:14.962
So they'll do a tweet and
then you get a thousands of stars but

95
00:07:14.962 --> 00:07:17.300
not actually many people are using it.

96
00:07:17.300 --> 00:07:20.530
So having lots of forks is a good
indication that library is quite active.

97
00:07:21.740 --> 00:07:26.060
The other thing I look at is, obviously
if it does the thing that I need.

98
00:07:26.060 --> 00:07:30.350
So you look at the API, you look at there,
what it looks like, and

99
00:07:30.350 --> 00:07:34.130
if it actually solves the thing
that you're trying to solve.

100
00:07:35.470 --> 00:07:38.790
And the last thing that I look at
is when the last commit was made.

101
00:07:38.790 --> 00:07:42.880
So if the last commit well, here,
this hasn't been updated in two years, but

102
00:07:42.880 --> 00:07:45.300
maybe it doesn't have to, but
that's something to be wary of.

103
00:07:45.300 --> 00:07:49.280
So you kind of know that if the last
commit here was two years ago,

104
00:07:49.280 --> 00:07:51.940
then you'll probably not get
a lot of updates here so

105
00:07:51.940 --> 00:07:55.130
you'll have to make do with
what was already there.

106
00:07:55.130 --> 00:07:58.712
So there are just some considerations that
you might have to think of when you're

107
00:07:58.712 --> 00:08:00.936
choosing which third-party
library to go with.

