WEBVTT

1
00:00:00.350 --> 00:00:05.070
This implementation is pretty good for
the four colors that we have.

2
00:00:05.070 --> 00:00:10.560
But what if instead of four colors
we had 10, or 100, or 1,000?

3
00:00:10.560 --> 00:00:11.890
This solution just wouldn't scale.

4
00:00:13.170 --> 00:00:19.970
Now, if you're familiar for how we render
these things on the web, you might

5
00:00:19.970 --> 00:00:25.320
be tempted to have a color array and just
map over it to render a bunch of colors.

6
00:00:25.320 --> 00:00:31.000
In Native development, you should never
use a map to display an array of items.

7
00:00:31.000 --> 00:00:33.380
And this is due to performance.

8
00:00:33.380 --> 00:00:37.680
Because basically the mobile
phone will render

9
00:00:37.680 --> 00:00:40.200
every single thing that's on the screen.

10
00:00:40.200 --> 00:00:44.885
So if you have an array of 100 colors,
it will try to render all of them.

11
00:00:44.885 --> 00:00:48.066
And it will try to rerender all of them
whenever the component tree renders,

12
00:00:48.066 --> 00:00:49.968
regardless of whether
the data has changed.

13
00:00:52.482 --> 00:00:54.175
So in order to render lists,

14
00:00:54.175 --> 00:00:59.240
we have special components in React Native
that you can use to display them.

15
00:00:59.240 --> 00:01:01.680
And these are called FlatList and
SectionList.

16
00:01:01.680 --> 00:01:04.731
So whenever you have an array of
data that you need to display,

17
00:01:04.731 --> 00:01:06.853
you should probably be using one of these.

18
00:01:09.592 --> 00:01:13.991
I refer to this documentation quite a lot.

19
00:01:13.991 --> 00:01:18.610
So this is the React Native documentation
for FlatList and SectionList.

20
00:01:18.610 --> 00:01:23.490
And on the right, it has all
the properties that there are available,

21
00:01:23.490 --> 00:01:25.406
and same for SectionList.

22
00:01:25.406 --> 00:01:29.550
I'm going to go through some of this in a
bit, but let's look at how it works first.

23
00:01:29.550 --> 00:01:32.500
There's a lot of configuration options for
FlatList, but

24
00:01:32.500 --> 00:01:35.010
at a minimum, you need to give it 3 props.

25
00:01:35.010 --> 00:01:38.979
The data, which is the array of items
you want to loop over and render.

26
00:01:38.979 --> 00:01:43.934
The renderItem function, which is
a property that you pass in a function

27
00:01:43.934 --> 00:01:49.030
that tells the FlatList how to
render each individual item.

28
00:01:49.030 --> 00:01:52.711
And then the keyExtractor,
which basically gets each item and

29
00:01:52.711 --> 00:01:55.498
you have to return a unique index for
that item.

30
00:01:58.610 --> 00:02:04.170
So you can go ahead and click on this if
you want to play around with it yourself.

31
00:02:04.170 --> 00:02:08.873
But this is an example of FlatList
that I created on Expo Snack,

32
00:02:08.873 --> 00:02:11.350
which usually appears here.

33
00:02:11.350 --> 00:02:11.941
It doesn't at the moment.

34
00:02:14.220 --> 00:02:18.882
So Expo Snack is basically like JSFiddle,
but for React Native,

35
00:02:18.882 --> 00:02:22.206
which is pretty cool,
but it's a little bit-

36
00:02:22.206 --> 00:02:25.781
&gt;&gt; You need to run it?

37
00:02:25.781 --> 00:02:27.438
&gt;&gt; Busy, yeah, it's a little bit busy.

38
00:02:27.438 --> 00:02:30.789
Yeah, okay, there we go.

39
00:02:30.789 --> 00:02:35.170
So this actually renders on the web,
so you need to be wary of it.

40
00:02:35.170 --> 00:02:37.084
It's not actually how it will
look on the phone sometimes.

41
00:02:37.084 --> 00:02:41.716
If you want to display it on a device, you
can just press here and scan the QR code.

42
00:02:41.716 --> 00:02:47.632
But I'm just gonna look at the web
one cuz I don't care for this one.

43
00:02:47.632 --> 00:02:48.478
All right,
let's look at what it looks like.

44
00:02:51.701 --> 00:02:52.878
I don't think I can make this smaller.

45
00:02:55.490 --> 00:02:58.837
Well, hopefully you can see most of this.

46
00:03:02.330 --> 00:03:06.480
Okay, right, so this is my app.

47
00:03:06.480 --> 00:03:09.609
And the only thing I'm returning
from this app is a single FlatList,

48
00:03:09.609 --> 00:03:12.350
which I've imported from React Native.

49
00:03:12.350 --> 00:03:15.410
Now I've got a data which
is an array of foods.

50
00:03:15.410 --> 00:03:18.340
These are just the names of the foods,
an array of strings.

51
00:03:18.340 --> 00:03:20.332
And then for the keyExtractor,

52
00:03:20.332 --> 00:03:24.450
it gets passed the item, which is whatever
this is, which could be an object.

53
00:03:25.540 --> 00:03:28.550
And then I need to return what's
the key for that item is.

54
00:03:28.550 --> 00:03:30.396
So this needs to be unique.

55
00:03:30.396 --> 00:03:33.360
This actually also has the index.

56
00:03:33.360 --> 00:03:37.258
So if your item doesn't have anything
unique, you can use the index,

57
00:03:37.258 --> 00:03:40.647
as well as something in the item
to create something unique.

58
00:03:43.189 --> 00:03:48.022
And then the main thing we
have here is the renderItem,

59
00:03:48.022 --> 00:03:52.332
which is basically a function
that takes the data

60
00:03:52.332 --> 00:03:56.975
element where data.item
is one of these elements.

61
00:03:56.975 --> 00:04:02.060
So usually you actually end up
doing this and destructuring.

62
00:04:04.700 --> 00:04:08.438
But it can be a little bit difficult to
read when you're first looking into it.

63
00:04:08.438 --> 00:04:12.843
And here I've got a food component,
which basically just has a view and

64
00:04:12.843 --> 00:04:14.981
a text that renders the food name.

65
00:04:17.697 --> 00:04:22.460
And FlatList and SectionList
are actually very cool in that they

66
00:04:22.460 --> 00:04:25.417
are completely optimized for the web.

67
00:04:25.417 --> 00:04:28.029
If you have 1,000 elements in your array,

68
00:04:28.029 --> 00:04:31.174
it actually only renders
the ones that your user can see.

69
00:04:34.781 --> 00:04:35.922
Let's look at a SectionList
example as well.

70
00:04:41.048 --> 00:04:44.671
All right, so
this is very similar to FlatList.

71
00:04:44.671 --> 00:04:47.560
They've actually shared
some of the properties.

72
00:04:47.560 --> 00:04:51.030
The difference here is that
we can add a section header

73
00:04:51.030 --> 00:04:53.070
in between a bunch of the items.

74
00:04:53.070 --> 00:04:56.107
So instead of data, notice that the
property we're using is called sections.

75
00:04:56.107 --> 00:05:00.691
And the data element is an array of

76
00:05:00.691 --> 00:05:05.618
objects where I've added a title.

77
00:05:05.618 --> 00:05:07.760
It doesn't have to be called a title.

78
00:05:07.760 --> 00:05:10.880
But the only key that
you really need is data.

79
00:05:10.880 --> 00:05:14.204
So this has to be an array of objects
where one of the keys is called data and

80
00:05:14.204 --> 00:05:17.275
the data is basically the content
that gets rendered in a section.

81
00:05:19.673 --> 00:05:24.611
The keyExtractor works the same,
but notice that the keys

82
00:05:24.611 --> 00:05:30.380
don't get extracted from this,
they get extracted from this.

83
00:05:30.380 --> 00:05:34.408
So that the item that you get is,
for example, apples and broccoli and

84
00:05:34.408 --> 00:05:35.850
not this entire object.

85
00:05:38.593 --> 00:05:41.984
Then we have a renderItem, which works
exactly the same as in a FlatList.

86
00:05:43.170 --> 00:05:45.860
And, finally, something that
we don't have in a FlatList,

87
00:05:45.860 --> 00:05:49.130
we have a property called
the renderSectionHeader.

88
00:05:49.130 --> 00:05:52.880
And this basically gets the section,
in this case, the whole section.

89
00:05:52.880 --> 00:05:54.929
And we use this to display the title.

90
00:05:57.666 --> 00:06:02.029
Now, SectionList has had these because
if you use it on the actual device,

91
00:06:02.029 --> 00:06:04.245
the sections actually get sticky, so

92
00:06:04.245 --> 00:06:08.260
they stay on the screen until
you parse the section, yes.

93
00:06:08.260 --> 00:06:11.611
&gt;&gt; So the SectionList only
works with array of object?

94
00:06:11.611 --> 00:06:19.040
&gt;&gt; Yes, yeah, so
they both need to have an array.

95
00:06:19.040 --> 00:06:20.939
But for SectionList,
you have to have an array of objects.

96
00:06:26.385 --> 00:06:31.560
So I've just listed some of
the properties that FlatList and

97
00:06:31.560 --> 00:06:35.520
SectionList have that
I use most frequently.

98
00:06:35.520 --> 00:06:37.210
So you might want to look into.

99
00:06:38.370 --> 00:06:40.601
Firstly, we have
the ItemSeparatorComponent.

100
00:06:40.601 --> 00:06:46.900
So this is, you can pass in either
a function or just the JSX components.

101
00:06:46.900 --> 00:06:49.620
And it renders a custom
separator between your items.

102
00:06:49.620 --> 00:06:52.706
So for example, if you have a line or
some kind of image or

103
00:06:52.706 --> 00:06:57.440
something custom that you wanna render,
instead of adding it underneath each item,

104
00:06:57.440 --> 00:06:59.891
you can use this ItemSeparatorComponent.

105
00:06:59.891 --> 00:07:02.490
Then there's a ListEmptyComponent.

106
00:07:02.490 --> 00:07:09.259
This is actually really cool because
if we did ListEmptyComponent,

107
00:07:09.259 --> 00:07:14.406
and I'm just going to do
a text that says List Empty.

108
00:07:20.484 --> 00:07:25.126
Cool, and now instead of foods,
if I pass in an empty array,

109
00:07:25.126 --> 00:07:29.250
it will automatically
render ListEmptyComponent.

110
00:07:29.250 --> 00:07:32.735
So this is really handy if you do
data fetching because you don't need

111
00:07:32.735 --> 00:07:37.260
to worry about going, if this data is
empty, then render this, otherwise, this.

112
00:07:37.260 --> 00:07:40.585
All you should do is just add
this ListEmptyComponent here.

113
00:07:43.143 --> 00:07:45.660
Then there's a ListFooterComponent.

114
00:07:45.660 --> 00:07:48.720
As you might imagine, this is something
that gets rendered at the very bottom of

115
00:07:48.720 --> 00:07:51.020
your list,
regardless of how big the list is.

116
00:07:52.270 --> 00:07:53.931
So I'm gonna add this back.

117
00:07:58.340 --> 00:08:00.593
ListFooterComponent.

118
00:08:03.752 --> 00:08:07.626
Cool, yep, so
this gets at the bottom of the list.

119
00:08:07.626 --> 00:08:10.445
And then there's an equivalent
ListHeaderComponent,

120
00:08:13.856 --> 00:08:21.465
Which, Gets rendered at
the top of the list.

121
00:08:21.465 --> 00:08:25.780
Here we're actually seeing what
this FlatList would look like in

122
00:08:25.780 --> 00:08:27.640
React Native web.

123
00:08:27.640 --> 00:08:31.260
I'm gonna show you what this
looks like on my actual phone.

124
00:08:31.260 --> 00:08:36.240
So I didn't add a SafeAreaView here,
which is not good of me.

125
00:08:36.240 --> 00:08:37.115
I'm gonna add one quickly.

126
00:08:58.623 --> 00:09:01.679
Yeah, so one thing to note
is that this scrolls, but

127
00:09:01.679 --> 00:09:05.019
the list header and
list footer scroll with the content.

128
00:09:05.019 --> 00:09:10.769
Whereas if I added a bit of
text outside of that list,

129
00:09:18.774 --> 00:09:21.150
Yeah, then this bit doesn't scroll.

130
00:09:21.150 --> 00:09:24.300
So this is something to bear in mind
cuz sometimes you might want to have

131
00:09:24.300 --> 00:09:26.790
the header just one thing be sticky.

132
00:09:26.790 --> 00:09:28.402
In this case,
you don't wanna use the list header.

133
00:09:28.402 --> 00:09:31.834
Another property that you'll
probably not use everyday,

134
00:09:31.834 --> 00:09:37.140
you'll definitely not use every time but
is good to know is the extraData property.

135
00:09:37.140 --> 00:09:38.010
You can pass anything in there.

136
00:09:38.010 --> 00:09:42.190
It can be just a single item or an array.

137
00:09:42.190 --> 00:09:46.401
But basically, the FlatList only
gets rerendered if the data changes.

138
00:09:46.401 --> 00:09:50.759
So if the renderItem function
that you have renders different

139
00:09:50.759 --> 00:09:55.619
things based on something in your
environment that's not the data,

140
00:09:55.619 --> 00:09:59.270
you'll have to put these
things in the extraData.

141
00:09:59.270 --> 00:10:02.530
So that's something that might
save you some hours of debugging.

142
00:10:02.530 --> 00:10:04.861
I wish someone had told me
before I spent hours on this.

143
00:10:04.861 --> 00:10:08.322
Another thing,
I think someone asked this on the chat,

144
00:10:08.322 --> 00:10:11.206
which is can you render
things horizontally?

145
00:10:11.206 --> 00:10:16.436
And FlatList actually has a prop called
horizontal, which takes true or false.

146
00:10:16.436 --> 00:10:20.544
And this renders the list
horizontally rather than vertically.

147
00:10:20.544 --> 00:10:27.178
Another thing that's cool is that
it has a numColumns property,

148
00:10:27.178 --> 00:10:31.168
I think I'll just do numColumns to 2.

149
00:10:31.168 --> 00:10:35.109
Yeah, it just renders these in a column,
which is so

150
00:10:35.109 --> 00:10:38.796
handy because on the web,
this is a huge hassle.

151
00:10:38.796 --> 00:10:41.888
And you can pretty much make
this any amount of numbers.

152
00:10:46.676 --> 00:10:50.532
And finally, onEndReached,
you can pass a callback here,

153
00:10:50.532 --> 00:10:55.080
which will get fired when the user
has scrolled to the end of a list.

154
00:10:55.080 --> 00:10:59.190
And this is handy if you're doing
data fetching here or pagination, so

155
00:10:59.190 --> 00:11:00.630
you'll know when to paginate.

156
00:11:00.630 --> 00:11:04.950
There's also attributes that let you
customize when this gets triggered,

157
00:11:04.950 --> 00:11:07.070
how far in advance do you need to know.

