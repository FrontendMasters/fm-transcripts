WEBVTT

1
00:00:00.000 --> 00:00:04.307
&gt;&gt; Melkey: So we just finished confirming
that we now are able to create tokens for

2
00:00:04.307 --> 00:00:07.525
our users,
we've seen these token we can use them.

3
00:00:07.525 --> 00:00:12.755
And now let's take it one step further
into routing this with Middleware and

4
00:00:12.755 --> 00:00:15.705
actually having proper authentication.

5
00:00:15.705 --> 00:00:20.086
Cuz right now, we just get the token, but
it's really not doing much for us, right?

6
00:00:20.086 --> 00:00:24.648
There's a lot of different ways that
we can use authentication tokens,

7
00:00:24.648 --> 00:00:28.631
like making sure that the workout
belongs to the correct user.

8
00:00:28.631 --> 00:00:32.923
And we're gonna explore this in
the next couple of submodules.

9
00:00:32.923 --> 00:00:40.292
So, let's actually start this
off in our user_store.go file.

10
00:00:40.292 --> 00:00:44.435
Cuz what we're going to be doing here
is we're gonna be adding a few things.

11
00:00:44.435 --> 00:00:48.381
We're gonna be setting ourselves up for
our Middleware, okay?

12
00:00:48.381 --> 00:00:54.300
So you can see we have our User
struct here, and this is great.

13
00:00:54.300 --> 00:01:00.212
What I'm going to add
is var AnonymousUser.

14
00:01:00.212 --> 00:01:07.092
And this is going to be simply
an empty user struck, okay?

15
00:01:07.092 --> 00:01:09.555
Now, why would we need
something like this?

16
00:01:09.555 --> 00:01:13.188
Well, if we think about it,
users who join our app, our web app,

17
00:01:13.188 --> 00:01:17.699
whatever it is, they don't have to be
logged in the first time to use it, right?

18
00:01:17.699 --> 00:01:20.326
When you before even register for account,

19
00:01:20.326 --> 00:01:23.451
you are technically
considered an anonymous user.

20
00:01:23.451 --> 00:01:28.488
So we are going to be leveraging this
ability of creating this variable,

21
00:01:28.488 --> 00:01:33.526
which was going to be used as validation
in our Middleware to determine if

22
00:01:33.526 --> 00:01:38.645
a user is a, anonymous, not logged in,
or if they are in fact logged in and

23
00:01:38.645 --> 00:01:42.139
they are a full user with
the struct fills, okay?

24
00:01:42.139 --> 00:01:43.519
So this is gonna set ourselves up.

25
00:01:43.519 --> 00:01:48.592
I'm gonna add a new method here, so
func u, it's gonna be a method on user.

26
00:01:48.592 --> 00:01:53.775
Okay, I'm gonna say IsAnonymous,
all right?

27
00:01:53.775 --> 00:01:55.175
It's gonna return a boolean.

28
00:01:55.175 --> 00:02:01.074
And all it's going to do is return u,
so compare it to an AnonymousUser.

29
00:02:01.074 --> 00:02:05.694
So if the user is an empty user struck,
we know they are anonymous.

30
00:02:05.694 --> 00:02:09.321
Else they are logged in.

31
00:02:09.321 --> 00:02:11.192
We are anonymous.

32
00:02:11.192 --> 00:02:15.399
And the next function we
wanna build here is we

33
00:02:15.399 --> 00:02:19.617
want to also retrieve
who a token belongs to.

34
00:02:19.617 --> 00:02:24.351
Cuz right now, if two of Jack Doe and
John Doe both create their tokens and

35
00:02:24.351 --> 00:02:29.004
they submit a request with that token,
we need to identify who does that

36
00:02:29.004 --> 00:02:32.827
token belong to and
what privileges does that token have.

37
00:02:32.827 --> 00:02:37.461
And can they do things to certain workout
apps that, for example, if I create

38
00:02:37.461 --> 00:02:42.477
a workout and I'm John Doe, I don't want
Jack Doe deleting it or doing stuff to it.

39
00:02:42.477 --> 00:02:45.754
So I want to make sure
that my authorization

40
00:02:45.754 --> 00:02:49.395
token is correctly adhered to,
and to do that,

41
00:02:49.395 --> 00:02:54.777
we start by creating a new function
called GetUserToken, all right?

42
00:02:54.777 --> 00:03:01.217
So take a scope, a tokenPlainText,
both of which are gonna be of type string.

43
00:03:01.217 --> 00:03:05.260
And it's simply going to return a User and
an error.

44
00:03:05.260 --> 00:03:06.394
So we get user token.

45
00:03:06.394 --> 00:03:07.754
Did we implement it?

46
00:03:07.754 --> 00:03:09.330
No, we did not.

47
00:03:09.330 --> 00:03:11.897
Okay, let's go func.

48
00:03:11.897 --> 00:03:16.796
So we're gonna implement
the GetUserFunction here,

49
00:03:16.796 --> 00:03:22.228
we used s, so
we can do (s *PostgresTokenStore) like so,

50
00:03:22.228 --> 00:03:25.541
okay, and then we do GetUserToken.

51
00:03:25.541 --> 00:03:30.764
Okay, GetUserToken has to adhere to scope,
which would be a string,

52
00:03:30.764 --> 00:03:34.230
and then plainTextPassword, also a string.

53
00:03:34.230 --> 00:03:39.573
And then here it's gonna return
a pointer to User as well as an error.

54
00:03:39.573 --> 00:03:42.906
Let's give ourselves more room.

55
00:03:42.906 --> 00:03:49.071
Okay, and then here, what we're going to
do is retrieve the hash of the token.

56
00:03:49.071 --> 00:03:53.157
I'm gonna try to compare it to
the color of this function.

57
00:03:53.157 --> 00:04:00.815
So first, we'll do tokenHash is going
to be sha256, we'll bring it for you.

58
00:04:00.815 --> 00:04:05.312
I'm gonna do sum256, and
it will be a slice of bytes like so.

59
00:04:05.312 --> 00:04:10.495
Now put in the token,
the plaintextPassword like so.

60
00:04:12.622 --> 00:04:13.995
&gt;&gt; Melkey: Oops.

61
00:04:18.488 --> 00:04:22.022
&gt;&gt; Melkey: Then we can go ahead and
create our query.

62
00:04:22.022 --> 00:04:28.655
Okay, so this query is gonna be the,
I would say, most advanced query we'll do.

63
00:04:28.655 --> 00:04:30.130
I think it might be
the last query we'll do.

64
00:04:30.130 --> 00:04:32.739
But this is going to be
actually an inner join.

65
00:04:32.739 --> 00:04:36.447
So we're gonna be selecting
the values from our user table and

66
00:04:36.447 --> 00:04:40.025
matching them with the values
from our token table, okay?

67
00:04:40.025 --> 00:04:44.202
So we do an INNER JOIN based
on the ID of the token, so

68
00:04:44.202 --> 00:04:48.400
the token user ID field as
well as the user id field.

69
00:04:48.400 --> 00:04:52.511
Okay, so it's gonna be a little more
complicated than the ones we've seen

70
00:04:52.511 --> 00:04:55.136
before, but
it's not gonna be too atrocious.

71
00:04:55.136 --> 00:04:57.228
So here we can do SELECT.

72
00:04:57.228 --> 00:05:04.489
We'll do u.id, and u is gonna be
representing of the user's table,

73
00:05:04.489 --> 00:05:09.668
u.username, u.email, u.password_hash.

74
00:05:09.668 --> 00:05:13.910
And these are values from our user table,
so

75
00:05:13.910 --> 00:05:19.425
u.bio u.created_at,
u.updated_at, like, so.

76
00:05:19.425 --> 00:05:25.705
FROM users u, so we're saying that the
users table, instead of writing user.id,

77
00:05:25.705 --> 00:05:29.960
user.bio, we can just use
the shorthand notation of u.

78
00:05:29.960 --> 00:05:35.707
And we can do INNER JOIN

79
00:05:35.707 --> 00:05:44.486
tokens t ON t.user_id = u.id.

80
00:05:44.486 --> 00:05:50.944
Okay, and we can say WHERE t.hash
= the first value passed in AND

81
00:05:50.944 --> 00:05:55.184
t.scope = the second value we passed in.

82
00:05:55.184 --> 00:06:02.133
And we have to check the expire, and
t.expiry &gt; than the third value.

83
00:06:04.634 --> 00:06:06.606
&gt;&gt; Melkey: And
that third value is gonna be time.now.

84
00:06:06.606 --> 00:06:08.089
So I'm gonna compare it
to the current time.

85
00:06:08.089 --> 00:06:12.950
I wanna execute this to the expiry of
something that's in our tokens table.

86
00:06:12.950 --> 00:06:15.049
So here we can declare our new user.

87
00:06:15.049 --> 00:06:17.346
So let's say User like so.

88
00:06:20.924 --> 00:06:22.883
&gt;&gt; Melkey: We can do PasswordHash.

89
00:06:22.883 --> 00:06:25.062
It's gonna be a password struck.

90
00:06:27.325 --> 00:06:28.575
&gt;&gt; Melkey: Oops.

91
00:06:31.067 --> 00:06:32.878
&gt;&gt; Melkey: Okay, and
then we can declare our error.

92
00:06:32.878 --> 00:06:36.414
I'm gonna call this, so s.db.QueryRow,

93
00:06:36.414 --> 00:06:42.197
I'm gonna pass in that query, and
then the three values we wanna pass in.

94
00:06:42.197 --> 00:06:46.763
So first would be, let's copy the slice

95
00:06:46.763 --> 00:06:51.206
of tokenHash like so, then the scope.

96
00:06:51.206 --> 00:06:55.769
All right, and
then the last one will be time.Now.

97
00:06:55.769 --> 00:06:58.234
And here, we'll do Scan.

98
00:06:58.234 --> 00:07:00.056
I'm gonna scan the values, all right?

99
00:07:00.056 --> 00:07:04.808
So the values that we're gonna

100
00:07:04.808 --> 00:07:09.925
scan into are gonna be user.ID,

101
00:07:09.925 --> 00:07:15.227
user.Username, user.Email,

102
00:07:15.227 --> 00:07:21.993
user.PasswordHash.hash, user.Bio,

103
00:07:21.993 --> 00:07:28.775
user.CreatedAt, and user.UpdatedAt.

104
00:07:28.775 --> 00:07:31.362
Make sure add the comma.

105
00:07:31.362 --> 00:07:34.912
If err is sql.ErrNoRows.

106
00:07:34.912 --> 00:07:38.943
Okay, so if there just doesn't
happen to be any of the values and

107
00:07:38.943 --> 00:07:42.615
return just the empty set,
we can just return nil and nil.

108
00:07:46.591 --> 00:07:47.877
&gt;&gt; Melkey: Make sure this is a pointer.

109
00:07:53.691 --> 00:07:56.923
&gt;&gt; Melkey: Okay,
if error does not equal to nil,

110
00:07:56.923 --> 00:08:00.663
we can just return nil and
the error itself.

111
00:08:00.663 --> 00:08:02.859
And then lastly, can return user and nil.

