WEBVTT

1
00:00:00.000 --> 00:00:02.157
&gt;&gt; Melkey: So, if we look at a PSQL now,
we can validate this.

2
00:00:02.157 --> 00:00:05.242
So, before we saw the two
previous entries, if we do this,

3
00:00:05.242 --> 00:00:09.215
now we see deadlifts, pull-up,
plank with the modification that we see.

4
00:00:09.215 --> 00:00:14.017
We have the workout id all tying back
into the workout that we have, again,

5
00:00:14.017 --> 00:00:15.858
one too many relationship.

6
00:00:15.858 --> 00:00:20.956
So, I think it's fair to say that we
are able to successfully update a workout,

7
00:00:20.956 --> 00:00:23.391
we're also able to create a workout,

8
00:00:23.391 --> 00:00:26.380
we can check the workout
as well if they exist.

9
00:00:26.380 --> 00:00:32.547
So back here, whatever you use,

10
00:00:32.547 --> 00:00:37.393
you can just simply do curl

11
00:00:37.393 --> 00:00:46.876
http://localhost8080/workouts/1.

12
00:00:57.754 --> 00:00:58.885
&gt;&gt; Melkey: There you go.

13
00:00:58.885 --> 00:01:03.530
So we can retrieve, we can create,
we can update, it's looking pretty good.

14
00:01:03.530 --> 00:01:09.106
The few things that are blatantly obvious
that we're gonna improve, and before

15
00:01:09.106 --> 00:01:14.778
we get to those, we need to add the last
kind of Horseman of crud, which is delete.

16
00:01:14.778 --> 00:01:17.674
And that shouldn't take us too long, but

17
00:01:17.674 --> 00:01:22.907
I do believe that now that kind of the way
to do it is fairly obvious, right?

18
00:01:22.907 --> 00:01:25.500
We start with a database layer,
create it there,

19
00:01:25.500 --> 00:01:28.606
hook it up to the API workout handler,
and then we route it.

20
00:01:28.606 --> 00:01:31.871
And we can repeat this for
any kind of path we want, right?

21
00:01:31.871 --> 00:01:35.828
Any path that is specifically going
to be interacting with the database.

22
00:01:35.828 --> 00:01:38.228
If there's no interaction
with the database,

23
00:01:38.228 --> 00:01:40.510
you can skip the database
layer altogether.

24
00:01:40.510 --> 00:01:45.720
But since we're not gonna do that,
let's go back to the workoutstore.go, and

25
00:01:45.720 --> 00:01:50.714
question to anyone, what is the first
thing we actually need to update here?

26
00:01:50.714 --> 00:01:52.176
&gt;&gt; Speaker 2: Interface?

27
00:01:52.176 --> 00:01:54.559
&gt;&gt; Melkey: Yes, exactly,
we need to update the interface.

28
00:01:54.559 --> 00:01:59.183
Cuz if we don't, we're gonna get an error
saying that we cannot pass the workout

29
00:01:59.183 --> 00:02:01.699
store as something in our workout handler.

30
00:02:01.699 --> 00:02:07.139
So here in update workout, we're gonna
create a new method called DeleteWorkout.

31
00:02:07.139 --> 00:02:12.259
DeleteWorkout is gonna take one argument,
which can be id of type int64 and

32
00:02:12.259 --> 00:02:15.428
it's gonna respond with an error,
all right?

33
00:02:15.428 --> 00:02:18.538
So now let's go all the way down,
make some room for yourself and

34
00:02:18.538 --> 00:02:20.913
in here we should probably
know the drill by now.

35
00:02:20.913 --> 00:02:25.192
Let's go ahead and make our func,
it's gonna be (pg *PostgresWorkoutStore).

36
00:02:25.192 --> 00:02:29.247
Let's call this DeleteWorkout,
give it that argument, int id 64,

37
00:02:29.247 --> 00:02:31.827
make sure it responds
with the error like so.

38
00:02:35.275 --> 00:02:38.796
&gt;&gt; Melkey: Let's make that query,
it's gonna be pretty easy.

39
00:02:38.796 --> 00:02:44.176
Delete from workouts, where id equals the
first value we are going to pass in and

40
00:02:44.176 --> 00:02:46.841
the only value we're going to pass in.

41
00:02:50.537 --> 00:02:53.213
&gt;&gt; Melkey: Following the same
kind of blueprint we laid out,

42
00:02:53.213 --> 00:02:57.482
we can just do result, and error is gonna
be pg.db, we can execute that query,

43
00:02:57.482 --> 00:03:00.373
pass in that query, and
the one argument which is id.

44
00:03:03.585 --> 00:03:05.289
&gt;&gt; Melkey: And then everyone's
favorite checking for error.

45
00:03:05.289 --> 00:03:10.082
So if error does not equal to nil,
we first check if it's nil or

46
00:03:10.082 --> 00:03:14.436
not, we can then return
whatever that error is, okay?

47
00:03:14.436 --> 00:03:20.356
You don't need to necessarily do this, but
I'm going to again, just to be explicit.

48
00:03:20.356 --> 00:03:26.065
We can do rowsAffected as
result.RowsAffected, check the error here.

49
00:03:26.065 --> 00:03:32.869
So, if error also does not equal to nil,
maybe we can return nil.

50
00:03:32.869 --> 00:03:38.916
Otherwise, if rows affected is 0,
we can return sql.ErrNoRows like so,

51
00:03:38.916 --> 00:03:43.264
everything works correctly,
we can just return nil.

52
00:03:47.487 --> 00:03:49.766
&gt;&gt; Speaker 3: Does that
need to be flipped again?

53
00:03:49.766 --> 00:03:54.537
If you have error not equal to nil, and

54
00:03:54.537 --> 00:03:58.277
then actually, never mind.

55
00:03:58.277 --> 00:04:02.643
&gt;&gt; Melkey: Let's read out, so
we first check if it's not nails.

56
00:04:02.643 --> 00:04:08.453
It's not that it has to be flipped,
this has to be error.

57
00:04:08.453 --> 00:04:10.313
&gt;&gt; Speaker 4: You ever set
up some sort of hockey or

58
00:04:10.313 --> 00:04:12.366
shortcut to do if error does not equal.

59
00:04:12.366 --> 00:04:13.908
&gt;&gt; Melkey: No.

60
00:04:13.908 --> 00:04:15.084
&gt;&gt; Speaker 4: You typing it?

61
00:04:15.084 --> 00:04:18.032
&gt;&gt; Melkey: I'm a masochist,
I love typing it at this point.

62
00:04:18.032 --> 00:04:23.148
There's been attempts to add packages that
do it for you, doing all these things,

63
00:04:23.148 --> 00:04:27.768
that's just been rejected by the Go
community, like outright rejected.

64
00:04:27.768 --> 00:04:32.376
Very nice, so now proud to announce
we have all of the functions for

65
00:04:32.376 --> 00:04:37.747
crud in our workout store, creating,
reading, updating, and deleting.

66
00:04:37.747 --> 00:04:42.776
And we should know that now we can go head
on, back up to a workout handler like so.

67
00:04:42.776 --> 00:04:46.902
Let's go all the way down,
give us some room, and

68
00:04:46.902 --> 00:04:51.045
here we just need to create
that delete function.

69
00:04:51.045 --> 00:04:54.676
And I actually am gonna
challenge everyone here,

70
00:04:54.676 --> 00:04:58.575
I'm gonna type it out,
see if you can do it yourself.

71
00:04:58.575 --> 00:05:02.295
If you can't, that's not a big deal at
all, we can make this a mini exercise.

72
00:05:02.295 --> 00:05:05.548
I just don't wanna pause in the action and
then kinda continue,

73
00:05:05.548 --> 00:05:08.992
so feel free to just look and
copy what I write or try it out yourself.

74
00:05:08.992 --> 00:05:11.795
Maybe the way you do it will
be cleaner and better, right?

75
00:05:11.795 --> 00:05:13.317
So, let's do this together,

76
00:05:13.317 --> 00:05:19.056
I won't be talking too much,
&gt;&gt; Melkey: And

77
00:05:19.056 --> 00:05:22.162
you don't have to worry about the naming
is just the only part is if you do name it

78
00:05:22.162 --> 00:05:25.528
something different than handle, delete,
workup by id, like the one I have here.

79
00:05:25.528 --> 00:05:28.723
When you add it back to your routes,
make sure reflects the function name,

80
00:05:28.723 --> 00:05:29.953
whatever you choose to use.

81
00:05:41.452 --> 00:05:42.643
&gt;&gt; Melkey: Okay.

82
00:05:50.556 --> 00:05:52.822
&gt;&gt; Melkey: I'm gonna go ahead and
grab this.

83
00:05:59.404 --> 00:06:03.151
&gt;&gt; Melkey: I'm gonna pull that worker id,
cuz we need it.

84
00:06:03.151 --> 00:06:07.379
And then here can do something like this,
the workoutStore and

85
00:06:07.379 --> 00:06:11.549
the DeleteWorkout method and
actually pass in that workoutID

86
00:06:40.133 --> 00:06:41.264
&gt;&gt; Melkey: All right, so

87
00:06:41.264 --> 00:06:45.518
I check if that error is
going to be a sql.ErrNoRows.

88
00:07:06.075 --> 00:07:09.799
&gt;&gt; Melkey: Okay, then we check with
the error exists or not, and then here we

89
00:07:09.799 --> 00:07:14.153
can just simply do w.WriteHeader,
cuz we don't want to respond with any.

90
00:07:14.153 --> 00:07:16.459
You can add a particular message
if you want in your JSON,

91
00:07:16.459 --> 00:07:19.258
if you want to do successful,
delete it or not, feel free to do that.

92
00:07:19.258 --> 00:07:23.248
I'm gonna do (http.StatusNoContent).

93
00:07:26.987 --> 00:07:28.394
&gt;&gt; Melkey: Like so.

94
00:07:28.394 --> 00:07:32.995
So let's go back to the route,
we can check if your function works,

95
00:07:32.995 --> 00:07:37.059
again, hopefully you try to
maybe do something yourself.

96
00:07:37.059 --> 00:07:40.924
If you just felt you wanted to copy and
learn it, totally fine, right?

97
00:07:40.924 --> 00:07:46.730
Whatever is easy for you, so here we can
do workout and then pass in that slug id.

98
00:07:46.730 --> 00:07:51.282
And in here we'll pass in
app.workoutHandler and then handle,

99
00:07:51.282 --> 00:07:55.098
delete, get workout by ID
as a first-class citizen.

100
00:07:55.098 --> 00:08:01.556
All right, moment of truth, let's bring
down the server and go run main.go, okay?

101
00:08:01.556 --> 00:08:07.923
And here in this particular manual test,
we wanna test for two things, well, three.

102
00:08:07.923 --> 00:08:12.243
One, does it work, two, is it deleting the
thing it should be deleting, and three,

103
00:08:12.243 --> 00:08:15.066
is it deleting the workout
entries as well, all right?

104
00:08:15.066 --> 00:08:19.257
So, if we look back in our psql,
we have one workout, right?

105
00:08:19.257 --> 00:08:22.629
We just have the workout id,
belongs to 1, so

106
00:08:22.629 --> 00:08:27.048
the slug that we're gonna pass
into our curl should be /1.

107
00:08:27.048 --> 00:08:31.569
You can do curl -X DELETE,
which is the method,

108
00:08:31.569 --> 00:08:37.538
the HTTP method,
localhost8080/workouts/1,okay?

109
00:08:37.538 --> 00:08:42.255
And if you do -v verbose,
it will give you the HTTP status in mind,

110
00:08:42.255 --> 00:08:44.798
I'm not responding with any JSON.

111
00:08:44.798 --> 00:08:48.244
So, there's no true indicator if it was
deleted or not, you can modify that.

112
00:08:48.244 --> 00:08:51.912
I use an HP header or status called stud.

113
00:08:51.912 --> 00:08:57.687
If you run this, like so, and then if we
go back and run the exact same query,

114
00:08:57.687 --> 00:09:01.776
select all from worker entries,
it should be empty.

115
00:09:01.776 --> 00:09:06.494
And if we do select all from workouts,
it's empty as well.

116
00:09:06.494 --> 00:09:11.974
So, we have now fully gone through
the implementation of a CRUD app,

117
00:09:11.974 --> 00:09:18.790
we are able to create, read, update, and
delete, and I think that's pretty cool.

