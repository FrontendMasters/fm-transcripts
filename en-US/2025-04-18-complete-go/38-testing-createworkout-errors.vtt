WEBVTT

1
00:00:00.000 --> 00:00:02.006
&gt;&gt; Melkey: So
we have this happy path error,

2
00:00:02.006 --> 00:00:05.097
let's also create some not happy errors,
right?

3
00:00:05.097 --> 00:00:09.734
Some paths that we want to error,
these should be errors, right?

4
00:00:09.734 --> 00:00:17.157
We can see the name of this is going
to be a workout with invalid entries.

5
00:00:17.157 --> 00:00:22.577
Okay, we can do the workout,
is going to be workout like so.

6
00:00:22.577 --> 00:00:26.817
And feel free to copy and
paste the values from workout up here,

7
00:00:26.817 --> 00:00:31.549
like the tile description,
duration, minutes, calories burned.

8
00:00:37.034 --> 00:00:38.076
&gt;&gt; Melkey: If it makes it typing easier.

9
00:00:38.076 --> 00:00:39.788
So I'm gonna make the title as full body.

10
00:00:39.788 --> 00:00:43.633
I'll make description as complete workout,
duration,

11
00:00:43.633 --> 00:00:48.111
we'll make it 90, and
calories burned, we'll make it 500.

12
00:00:48.111 --> 00:00:49.816
Doesn't truly matter.

13
00:00:49.816 --> 00:00:54.453
And here in the entries will
be a slice of WorkoutEntry.

14
00:00:58.395 --> 00:01:02.952
&gt;&gt; Melkey: Right, and here we'll
have two entries to demonstrate it

15
00:01:02.952 --> 00:01:05.468
catching a potential problem.

16
00:01:05.468 --> 00:01:09.511
So here we'll make the exercise name,
plank.

17
00:01:09.511 --> 00:01:13.557
Okay, we'll say this is just sets three,
reps for a plank.

18
00:01:13.557 --> 00:01:20.920
We could do something like 60.

19
00:01:20.920 --> 00:01:24.898
We could do notes and order index,
so this should be fine.

20
00:01:29.700 --> 00:01:31.001
&gt;&gt; Melkey: And this would be one.

21
00:01:37.214 --> 00:01:41.150
&gt;&gt; Melkey: Cool, and then here we'll add
another entry into the WorkoutEntries,

22
00:01:41.150 --> 00:01:43.939
and this is gonna have
the constraint that we have.

23
00:01:43.939 --> 00:01:47.232
So let's go to exercise name,
we'll say squats.

24
00:01:47.232 --> 00:01:50.885
Sets, we can set as 4.

25
00:01:50.885 --> 00:01:54.295
Reps, we can do int pointer as 12.

26
00:01:54.295 --> 00:01:56.163
And then here we'll put
duration in seconds.

27
00:01:56.163 --> 00:01:59.013
Now, if you remember, we can't have
both reps and duration in seconds.

28
00:01:59.013 --> 00:02:03.186
We expect this to fail on us, right?

29
00:02:03.186 --> 00:02:05.143
So that's why this is
gonna be a test case.

30
00:02:05.143 --> 00:02:06.468
We want to capture our error.

31
00:02:06.468 --> 00:02:10.370
So duration in seconds
would be an int pointer 60.

32
00:02:10.370 --> 00:02:14.772
We can do weight,
it doesn't really matter, FloatPtr.

33
00:02:14.772 --> 00:02:17.374
Just put this as whatever value you want,
185.0.

34
00:02:17.374 --> 00:02:24.022
We can put notes as,
Full depth, and OrderIndex 2.

35
00:02:24.022 --> 00:02:28.371
Okay, and one more thing, for
this case, do we wantErr true?

36
00:02:31.923 --> 00:02:40.384
&gt;&gt; Melkey: [COUGH]
&gt;&gt; Melkey: Cool, so

37
00:02:40.384 --> 00:02:47.063
now that we have the tests fully created,
&gt;&gt; Melkey: To make sure,

38
00:02:47.063 --> 00:02:50.675
right here, so
outside of the slices of your test,

39
00:02:50.675 --> 00:02:54.539
we're actually gonna go
through them individually.

40
00:02:54.539 --> 00:03:00.363
So we'll do 4, unless we can ignore
the first variable in test case,

41
00:03:00.363 --> 00:03:01.952
in range of tests.

42
00:03:01.952 --> 00:03:06.081
So the test we just created,
we're gonna leverage our testing fixture.

43
00:03:06.081 --> 00:03:07.723
So we do test.run.

44
00:03:07.723 --> 00:03:11.870
We'll pass in the name of every individual
test, we know what's currently running.

45
00:03:11.870 --> 00:03:15.373
And then we're gonna bring
in an anonymous function.

46
00:03:15.373 --> 00:03:20.337
Okay, and this anonymous function is
gonna be responsible for actually running

47
00:03:20.337 --> 00:03:24.863
the test that we are curious about,
or that we want to know about, right?

48
00:03:24.863 --> 00:03:30.734
So this func testing, so here,
we can do createdWorkout error.

49
00:03:30.734 --> 00:03:36.788
Is going to be store.CreateWorkout,
you can pass in tt.workout, like so.

50
00:03:39.664 --> 00:03:41.386
It's testing.t on the fixture.

51
00:03:41.386 --> 00:03:42.707
&gt;&gt; Melkey: I forgot to add it last time.

52
00:03:42.707 --> 00:03:46.542
Okay, so here we can do if,
our test case, if we want an error.

53
00:03:46.542 --> 00:03:52.876
So if this is true, we expect
store.CreateWorkout to in fact error out.

54
00:03:52.876 --> 00:03:58.234
So we can do assert, right, and
we should actually bring in that

55
00:03:58.234 --> 00:04:03.410
assert package, cuz sometimes
my LSP brings it in randomly.

56
00:04:03.410 --> 00:04:07.129
So it's github.com/ is going
to be the stretcher package.

57
00:04:07.129 --> 00:04:12.604
So, stretcher slash testify,
we can bring assert.

58
00:04:15.243 --> 00:04:17.082
&gt;&gt; Melkey: Says I don't have it,
so let's see.

59
00:04:19.404 --> 00:04:23.563
&gt;&gt; Melkey: And we get to do slash assert.

60
00:04:30.570 --> 00:04:32.414
&gt;&gt; Melkey: It's stretch.

61
00:04:32.414 --> 00:04:34.893
There you go.

62
00:04:34.893 --> 00:04:39.573
So here we can then use assert, okay,
and since we expect this to be an error,

63
00:04:39.573 --> 00:04:40.581
we can do error.

64
00:04:43.641 --> 00:04:45.678
&gt;&gt; Melkey: Okay, give me a second.

65
00:04:45.678 --> 00:04:49.724
And with this error, we can just make sure
that we pass in that texting fixture t,

66
00:04:49.724 --> 00:04:53.175
and then the error that we expect
from the call of CreateWorkout, and

67
00:04:53.175 --> 00:04:54.205
then we can return.

68
00:04:54.205 --> 00:04:56.656
And so this explicit return will
stop the test cases, right?

69
00:04:56.656 --> 00:05:01.196
We're gonna actually get out of the test
cases here, or the test suite, okay?

70
00:05:01.196 --> 00:05:06.108
So if If we don't want this to error,
we expect this to be a happy case.

71
00:05:06.108 --> 00:05:09.007
So what we can do is require no error,
okay?

72
00:05:09.007 --> 00:05:12.462
We can call it t, and then error.

73
00:05:12.462 --> 00:05:14.194
So this is gonna validate
that error is none.

74
00:05:14.194 --> 00:05:17.306
Okay, so here, we require that no error.

75
00:05:17.306 --> 00:05:18.333
And then here,

76
00:05:18.333 --> 00:05:23.635
we can just start asserting the fields we
expect to have in our created workout.

77
00:05:23.635 --> 00:05:28.681
So here we can do assert equal,
and pass in our t fixture,

78
00:05:28.681 --> 00:05:32.374
and here we can make the workout.title.

79
00:05:32.374 --> 00:05:36.769
We can make sure this matches
created workout.Title, right?

80
00:05:36.769 --> 00:05:39.106
We can just copy and
paste this a few times.

81
00:05:39.106 --> 00:05:42.817
We could do title and description,
so like, description, and

82
00:05:42.817 --> 00:05:45.919
then we could do something like,
DurationMinutes.

83
00:05:48.917 --> 00:05:52.563
&gt;&gt; Melkey: Like so, and
DurationMinutes, right?

84
00:05:52.563 --> 00:05:57.221
So we're gonna make sure that whatever
we're answering via created workout is,

85
00:05:57.221 --> 00:06:02.296
in fact, gonna be what we're inserting for
the text case that we've assembled, okay?

86
00:06:02.296 --> 00:06:05.862
And then one other thing I like to do is,
because we have an actual database,

87
00:06:05.862 --> 00:06:07.499
we can actually also retrieve it.

88
00:06:07.499 --> 00:06:10.180
Since we created it,
we know it's gonna exist in a database.

89
00:06:10.180 --> 00:06:13.454
Why, now we see what happens when we
pull it out and does it still match

90
00:06:13.454 --> 00:06:16.686
the values that we want it to when
we initially inserted it, right?

91
00:06:16.686 --> 00:06:20.622
So here we can do something
like retrieved error,

92
00:06:20.622 --> 00:06:24.195
is gonna be store.GetWorkoutByID, okay?

93
00:06:24.195 --> 00:06:27.793
And then we can cast the type,
you can use in 64,

94
00:06:27.793 --> 00:06:31.832
we can cast the type using
CreatedWorkout.ID, okay?

95
00:06:31.832 --> 00:06:36.844
So let's make sure,
AcquireNoError NoError(t, and

96
00:06:36.844 --> 00:06:42.186
an error like so,
to cover the error from GetWorkoutByID.

97
00:06:42.186 --> 00:06:47.174
And in here we can do assert.Equal,
pass in our t fixture, and

98
00:06:47.174 --> 00:06:49.726
we can do createdWorkout.ID.

99
00:06:49.726 --> 00:06:55.851
Matches the retrieved.CaloriesBurned
the ID, like so.

100
00:06:55.851 --> 00:06:59.483
We can also assert.Equal, okay?

101
00:06:59.483 --> 00:07:03.153
And for all of these functions,
it first expects the testing fixtures,

102
00:07:03.153 --> 00:07:05.452
that's why I'm passing in t continuously.

103
00:07:05.452 --> 00:07:11.269
You can also check that
the length of tt.workout.Entries

104
00:07:11.269 --> 00:07:16.862
matches the length of retrieved.Entries,
all right?

105
00:07:16.862 --> 00:07:21.116
And this is pretty good, but we also wanna
check the actual entries themselves.

106
00:07:21.116 --> 00:07:27.085
So here, for
i entry in range retrieved entries, okay?

107
00:07:27.085 --> 00:07:31.914
Now we can iterate through every single
entry that we have in our entry slice and

108
00:07:31.914 --> 00:07:33.903
see if they are in fact correct.

109
00:07:33.903 --> 00:07:39.898
So, one thing we can do is assert.Equal t,

110
00:07:39.898 --> 00:07:43.142
tt.Workout.Entry.

111
00:07:43.142 --> 00:07:47.577
We can index it by i to
get the specific one,

112
00:07:47.577 --> 00:07:51.654
ExerciseName matches the retrieved.

113
00:07:51.654 --> 00:07:59.938
I guess we also just do entry,
&gt;&gt; Melkey: Retrieved,

114
00:07:59.938 --> 00:08:02.099
not title, but retrieved.Entries.

115
00:08:02.099 --> 00:08:07.015
We can also index it at i,
and can do, ExerciseName.

116
00:08:07.015 --> 00:08:11.072
And then can, if you want,
just remove the entry here or use it.

117
00:08:13.009 --> 00:08:17.669
&gt;&gt; Melkey: I think I personally like
having this a little bit more explicit,

118
00:08:17.669 --> 00:08:21.990
just personally,
with the iteration i using the index, but

119
00:08:21.990 --> 00:08:23.953
I'll leave that up to you.

120
00:08:23.953 --> 00:08:25.848
And then we can do this
on a few more fields.

121
00:08:25.848 --> 00:08:32.518
So instead of ExerciseName,
we can check something like sets, oops.

122
00:08:34.071 --> 00:08:37.316
&gt;&gt; Melkey: Right, and we can also check
another field like OrderIndex, for

123
00:08:37.316 --> 00:08:37.849
example.

124
00:08:37.849 --> 00:08:41.165
So here, GetSets.

125
00:08:43.007 --> 00:08:44.734
&gt;&gt; Melkey: Here, OrderIndex.

126
00:08:44.734 --> 00:08:45.624
Interesting.

127
00:08:45.624 --> 00:08:46.588
So that's why I did v.

128
00:08:46.588 --> 00:08:51.374
So fatal f does not support error
wrapping directive, module w,

129
00:08:51.374 --> 00:08:53.645
that's why I did v, Michael.

130
00:08:53.645 --> 00:08:56.305
&gt;&gt; Micheal: I just noticed
those OSP warnings.

131
00:08:56.305 --> 00:08:58.092
&gt;&gt; Melkey: Yep, so the texting fixture,

132
00:08:58.092 --> 00:09:02.095
fatal f doesn't get the error
wrapping module of format specifier.

133
00:09:02.095 --> 00:09:04.936
So we have to use the v,
that's like a catch all, struct one.

134
00:09:04.936 --> 00:09:05.509
&gt;&gt; Micheal: Okay.

135
00:09:05.509 --> 00:09:07.630
&gt;&gt; Melkey: I knew there's a reason,
but I don't think my LSP was,

136
00:09:07.630 --> 00:09:10.037
when you asked the question,
I don't think it was pulling up.

