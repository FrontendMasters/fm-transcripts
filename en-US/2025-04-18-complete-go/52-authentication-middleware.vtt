WEBVTT

1
00:00:00.000 --> 00:00:03.306
&gt;&gt; Melkey: So now we have these
two helper functions to modify,

2
00:00:03.306 --> 00:00:07.758
to inject the context and also to
retrieve the value from the context.

3
00:00:07.758 --> 00:00:12.176
Let's go ahead and create a function so
it's gonna be on user middleware,

4
00:00:12.176 --> 00:00:15.696
and this function is gonna be
called authenticate, okay?

5
00:00:15.696 --> 00:00:20.487
And all this is gonna do this authenticate
function is gonna be a wrapper on our

6
00:00:20.487 --> 00:00:22.638
existing http handler function.

7
00:00:22.638 --> 00:00:27.795
So all those functions that we've declared
in our routes.go.handle, getUserID,

8
00:00:27.795 --> 00:00:32.257
handleCreateWorkout, etc., etc.,
this is gonna wrap them, right?

9
00:00:32.257 --> 00:00:37.484
And the way this can work is when
authenticate gets wrapped by a function,

10
00:00:37.484 --> 00:00:41.298
we want the next handler
function to work right away.

11
00:00:41.298 --> 00:00:43.944
We want authenticate to do its thing, and

12
00:00:43.944 --> 00:00:48.567
then we want the next chain of http
methods to be called right after that.

13
00:00:48.567 --> 00:00:52.551
And so we can do this by
writing next the call, http,

14
00:00:52.551 --> 00:00:57.352
what it's gonna accept is going
to be HandlerFunc, okay, and

15
00:00:57.352 --> 00:01:01.538
it's going to respond with
an http.Handler like so.

16
00:01:01.538 --> 00:01:05.192
And then here we can, right away,

17
00:01:05.192 --> 00:01:10.115
just return http.HandlerFunc, like this.

18
00:01:10.115 --> 00:01:14.090
It's gonna be anonymous function func,

19
00:01:14.090 --> 00:01:20.336
which is going to take w,
http.ResponseWriter, which again,

20
00:01:20.336 --> 00:01:27.730
this is a signature of all those handler
functions, http.Request like so.

21
00:01:27.730 --> 00:01:35.339
And so now within here,
within this anonymous function,

22
00:01:35.339 --> 00:01:43.580
we can interject any incoming
requests to our server, right?

23
00:01:43.580 --> 00:01:47.604
Any incoming request that we wrap
authenticate around, to be specific.

24
00:01:47.604 --> 00:01:53.064
So if you wrap them around all of them,
we will have this

25
00:01:53.064 --> 00:01:58.299
interjecting every single
call that we get, okay?

26
00:01:58.299 --> 00:02:03.805
So with that,
we can first start by adding a w.Header.

27
00:02:03.805 --> 00:02:09.435
I'm gonna add a vary and
an authorization tag,

28
00:02:09.435 --> 00:02:12.684
so authorization like so.

29
00:02:12.684 --> 00:02:17.037
Here we can do authHeader, okay, and

30
00:02:17.037 --> 00:02:22.750
we can do r.Header.Get so
it's gonna request or

31
00:02:22.750 --> 00:02:29.157
get all of the headers
associated with authorization.

32
00:02:31.292 --> 00:02:34.673
&gt;&gt; Melkey: Give ourselves some more room,
okay?

33
00:02:34.673 --> 00:02:37.338
And then we can check if it exists or not.

34
00:02:37.338 --> 00:02:42.072
So here, if authHeader is

35
00:02:42.072 --> 00:02:46.812
an empty string, right?

36
00:02:46.812 --> 00:02:52.181
So that means this request,
there is no authorization attempt.

37
00:02:52.181 --> 00:02:57.338
We can do r, is gonna be SetUser,
so we're gonna pass

38
00:02:57.338 --> 00:03:02.624
an r since it's the first
argument that user expects.

39
00:03:02.624 --> 00:03:06.774
And then we can do
store.AnonymousUser like this.

40
00:03:06.774 --> 00:03:12.664
So now, because the caller here did not
supply us with an authorization header,

41
00:03:12.664 --> 00:03:18.220
we know, or at least we can assume this
is an anonymous, not logged in user.

42
00:03:18.220 --> 00:03:23.556
And so with that,
we can just simply do next.ServeHTTP(w,

43
00:03:23.556 --> 00:03:29.300
r), so then it's going to go into
the next function in the chain,

44
00:03:29.300 --> 00:03:31.987
and then we can return like so.

45
00:03:31.987 --> 00:03:39.449
Otherwise we can start checking header
parts is going to be strings.Split,

46
00:03:39.449 --> 00:03:43.829
okay, we're gonna pass in the authHeader.

47
00:03:43.829 --> 00:03:47.373
At this point, we assume that
the authHeader is not an empty string, and

48
00:03:47.373 --> 00:03:48.719
it does, in fact, exist.

49
00:03:48.719 --> 00:03:53.172
I'm gonna split it on spacing
here because, remember,

50
00:03:53.172 --> 00:03:59.780
it's going to be something like Bearer
&lt;TOKEN&gt; or authorization TOKEN, right?

51
00:03:59.780 --> 00:04:04.382
So this is gonna be the space between the
string is what we're going to be after,

52
00:04:04.382 --> 00:04:06.663
what we're gonna be validating here.

53
00:04:06.663 --> 00:04:10.703
So here we split header parts
into two equivalent pieces.

54
00:04:10.703 --> 00:04:16.704
So here we can do if
len(headerParts) is not equal to 2,

55
00:04:16.704 --> 00:04:20.990
or headerParts at the 0th Index, okay,

56
00:04:20.990 --> 00:04:25.850
does not equal to something like Bearer.

57
00:04:25.850 --> 00:04:30.058
&gt;&gt; Melkey: Okay,
can do utils.WriteJSON, w,

58
00:04:30.058 --> 00:04:34.398
we can do http.StatusUnauthorized,

59
00:04:34.398 --> 00:04:38.613
utils.Envelope, we can say error.

60
00:04:42.218 --> 00:04:46.434
&gt;&gt; Melkey: The invalid
authorization header,

61
00:04:46.434 --> 00:04:49.971
like so and then we can return.

62
00:04:53.518 --> 00:04:57.474
&gt;&gt; Melkey: And so with that, we know
that the header part at the one, so

63
00:04:57.474 --> 00:05:01.289
the second part at the first
index is actually the token.

64
00:05:01.289 --> 00:05:05.507
So token would be headerParts,

65
00:05:05.507 --> 00:05:09.108
1 like so, then user err.

66
00:05:09.108 --> 00:05:12.188
Now we can use that token to
retrieve any sort of user.

67
00:05:12.188 --> 00:05:17.283
So we can use userMiddleware, UserStore,

68
00:05:17.283 --> 00:05:23.204
we can use that new function
GetUserToken like so,

69
00:05:23.204 --> 00:05:26.798
we can put in the token itself.

70
00:05:26.798 --> 00:05:28.562
Let me just remind myself, yeah.

71
00:05:28.562 --> 00:05:32.049
So this first argument is scope here, so

72
00:05:32.049 --> 00:05:37.911
we can do tokens.Scopeauth and
then the token underneath, okay?

73
00:05:37.911 --> 00:05:38.666
We can check that err.

74
00:05:38.666 --> 00:05:42.932
So if err does not equal to nil.

75
00:05:42.932 --> 00:05:46.630
Here we can do utils.writeJSON w,

76
00:05:46.630 --> 00:05:52.679
http.StatusUnauthorized like so,
utils.envelope.

77
00:05:52.679 --> 00:05:57.331
We can say error, all right, and

78
00:05:57.331 --> 00:06:01.375
we can say just invalid token.

79
00:06:03.980 --> 00:06:11.556
&gt;&gt; Melkey: Okay, if user is nil,
all right, we can do the same thing.

80
00:06:11.556 --> 00:06:17.934
So let's just go ahead and
also add the return.

81
00:06:20.627 --> 00:06:25.486
&gt;&gt; Melkey: We can say, if the user is no,
can do StatusUnauthorized, and

82
00:06:25.486 --> 00:06:26.780
we can do error.

83
00:06:26.780 --> 00:06:35.126
Instead of invalid token, we can just say
something like token expired or invalid.

84
00:06:35.126 --> 00:06:40.767
&gt;&gt; Melkey: At the end,
we can do r = SetUser r,

85
00:06:40.767 --> 00:06:45.655
and put in that user, you can do

86
00:06:45.655 --> 00:06:51.875
next.serveHTTP, (w, r) return.

