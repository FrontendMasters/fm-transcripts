WEBVTT

1
00:00:00.000 --> 00:00:03.034
&gt;&gt; Melkey: I wanna quickly jump into
functions cuz I know we're writing

2
00:00:03.034 --> 00:00:06.722
into a function, but I kind of cheated
the explanation of it because it's

3
00:00:06.722 --> 00:00:08.757
the func main, so I kinda just wrote it.

4
00:00:08.757 --> 00:00:11.096
I was like, yeah, and
I kinda just skidded my words.

5
00:00:11.096 --> 00:00:14.712
Let's kinda take some time to look
at the function signature in Go.

6
00:00:14.712 --> 00:00:16.873
So I mentioned earlier,
it's the func keyword.

7
00:00:16.873 --> 00:00:18.916
Every function is defined
with the func keyword.

8
00:00:18.916 --> 00:00:23.746
There is no pub or
public predecessor in Go.

9
00:00:23.746 --> 00:00:27.717
If you wanna make a function public,
you'd capitalize it.

10
00:00:27.717 --> 00:00:31.340
I'm gonna express and
go into some of those gotchas.

11
00:00:31.340 --> 00:00:36.110
But for instance,
if I call this function, add,

12
00:00:36.110 --> 00:00:40.893
and I do A-D-D like this,
this is not exported.

13
00:00:40.893 --> 00:00:44.653
Even if it was in an exportable package,
it cannot be exported.

14
00:00:44.653 --> 00:00:47.927
If I only change this,
it is now exportable.

15
00:00:47.927 --> 00:00:54.016
Well, I'll show you in real applications
of some gosh that this leads to.

16
00:00:54.016 --> 00:00:58.026
But for our case, we can just go ahead and
make a quick function called add,

17
00:00:58.026 --> 00:01:00.254
then it's gonna be the parentheses, and

18
00:01:00.254 --> 00:01:04.287
within the parentheses we're gonna
take the arguments for our function.

19
00:01:04.287 --> 00:01:08.008
These are separate with comma so
we can have a, b, okay?

20
00:01:08.008 --> 00:01:12.320
And then here it's the return
type of our function.

21
00:01:12.320 --> 00:01:14.957
So is our function return int type,
string type?

22
00:01:14.957 --> 00:01:18.991
Ours is going return an int and
then the curly braces define the function.

23
00:01:18.991 --> 00:01:21.832
Now, there's a few compiler
errors right away.

24
00:01:21.832 --> 00:01:27.191
One up here says a and b are undefined,
and that is because in every argument

25
00:01:27.191 --> 00:01:32.399
declaration in this parentheses,
you have to specify the type as well.

26
00:01:32.399 --> 00:01:38.981
So in this case, a is gonna be an int,
and b is also going to be an int.

27
00:01:38.981 --> 00:01:41.771
And then we have the missing return,
so the compiler, if it knows

28
00:01:41.771 --> 00:01:44.941
that it's gonna be a return type from
a function, it's gonna expect it.

29
00:01:44.941 --> 00:01:49.160
If I simply just remove this,
that error goes away, okay?

30
00:01:49.160 --> 00:01:55.727
So we can go like this and
we can simply return a + b, okay?

31
00:01:55.727 --> 00:01:59.453
So that's the very simple definition
of functions in Go, name,

32
00:01:59.453 --> 00:02:04.060
arguments with the type specification,
the return type, if it does exist, and

33
00:02:04.060 --> 00:02:07.948
then the actual logic of whatever
goes down in the function itself.

34
00:02:07.948 --> 00:02:12.899
If we wanna use this function,
we can simply just do add and

35
00:02:12.899 --> 00:02:15.131
then put 3, 4, right?

36
00:02:15.131 --> 00:02:20.890
Now, if you see this, is there anything
that looks a little off about this?

37
00:02:20.890 --> 00:02:23.118
&gt;&gt; Speaker 2: The return's
not being caught anywhere.

38
00:02:23.118 --> 00:02:23.674
&gt;&gt; Melkey: Yeah, exactly.

39
00:02:23.674 --> 00:02:29.312
So we could use add(3, 4) like this as
the actual return and just send it out.

40
00:02:29.312 --> 00:02:31.571
I mean, you could definitely do that.

41
00:02:31.571 --> 00:02:39.782
But in Go, you can actually omit
the returns entirely, point blank.

42
00:02:39.782 --> 00:02:42.857
If this function had five
different return types,

43
00:02:42.857 --> 00:02:46.228
we could ignore four of them and
be fine with it, right?

44
00:02:46.228 --> 00:02:48.486
There's a way you can ignore them.

45
00:02:48.486 --> 00:02:52.741
And this falls into conversation of error
handling because in Go, errors are values.

46
00:02:52.741 --> 00:02:54.410
I'm not gonna demonstrate it right here.

47
00:02:54.410 --> 00:02:57.445
You'll see the example of errors when
we create a function that actually

48
00:02:57.445 --> 00:02:58.250
handles an error.

49
00:02:58.250 --> 00:03:01.646
But you can see how that could
be a potential foot gun.

50
00:03:01.646 --> 00:03:03.746
So here in our case, we just do result.

51
00:03:03.746 --> 00:03:07.391
We can do the shorthand notation to
declare that add is gonna give us

52
00:03:07.391 --> 00:03:08.770
the result, all right?

53
00:03:08.770 --> 00:03:11.739
And we can print this, the format,
we'll use just print line.

54
00:03:11.739 --> 00:03:16.533
We can say this is the result.

55
00:03:16.533 --> 00:03:19.496
We can just paste result like this.

56
00:03:19.496 --> 00:03:25.317
If we save it and we flip, you can now
see this is the result, 7, all right?

57
00:03:25.317 --> 00:03:26.784
Nothing too crazy, but

58
00:03:26.784 --> 00:03:31.340
let's say we wanna make another
function that returns two return types.

59
00:03:31.340 --> 00:03:35.570
We could do calculate sum and product.

60
00:03:35.570 --> 00:03:39.033
We can go ahead and take a and
b in a nice little syntax sugar.

61
00:03:39.033 --> 00:03:40.808
It's starting a and b int.

62
00:03:40.808 --> 00:03:44.820
If you know they're going to be the same
type, you can just do int at the end to

63
00:03:44.820 --> 00:03:48.484
cover the grounds of all the arguments
before that int declaration.

64
00:03:48.484 --> 00:03:52.856
And if you want your function to return
more than one type, you have to specify

65
00:03:52.856 --> 00:03:57.519
it with a parentheses with these brackets
here, and you can do int, int, right?

66
00:03:57.519 --> 00:04:02.607
And then we can specify the logic,

67
00:04:02.607 --> 00:04:09.809
this can be return oops,
a + b, a * b, like so.

68
00:04:09.809 --> 00:04:14.566
So one return statement separated by comma
to distinguish between the two different

69
00:04:14.566 --> 00:04:17.188
types that we expect
this function to return.

70
00:04:17.188 --> 00:04:21.505
Then here,
we can just do something like sum, yeah?

71
00:04:21.505 --> 00:04:22.655
&gt;&gt; Speaker 3: Do you have multiples?

72
00:04:22.655 --> 00:04:24.756
If you had a, b, those are both ints.

73
00:04:24.756 --> 00:04:25.840
&gt;&gt; Melkey: Yep.
&gt;&gt; Speaker 3: Is it just like

74
00:04:25.840 --> 00:04:28.541
everything to the left
if you did another type?

75
00:04:28.541 --> 00:04:32.914
&gt;&gt; Melkey: Yeah, so let's say a, b, and
then let's say the next one's gonna be

76
00:04:32.914 --> 00:04:36.637
a float, f would just be float64 bit,
and that's fine.

77
00:04:36.637 --> 00:04:38.494
&gt;&gt; Speaker 3: And
you can put as many before that?

78
00:04:38.494 --> 00:04:42.965
&gt;&gt; Melkey: Yeah, exactly,
we could say name, string, continue this.

79
00:04:42.965 --> 00:04:48.035
If you want name and let's say,
I don't know what else could be a string?

80
00:04:48.035 --> 00:04:51.861
Tree, I don't know, this is first thing
came to my mind, this is all valid.

81
00:04:51.861 --> 00:04:56.280
The only thing that the compiler's gonna
yell at us is it's just unused parameter,

82
00:04:56.280 --> 00:04:58.084
but this, it will still compile,

83
00:04:58.084 --> 00:05:02.085
it's just gonna tell you that you have
unused parameters in your function.

84
00:05:04.860 --> 00:05:09.529
&gt;&gt; Melkey: Okay, so if you wanna get
multiple returns from that function,

85
00:05:09.529 --> 00:05:15.240
we can do something like sum separate
by product or comma separating product.

86
00:05:15.240 --> 00:05:21.508
Same kind of shorthand
notation to calculate sum and

87
00:05:21.508 --> 00:05:25.640
product, let's do 10, 10,

88
00:05:25.640 --> 00:05:29.913
fmt.printf("this is sum %s and

89
00:05:29.913 --> 00:05:35.762
this is product %s\n", sum, product").

90
00:05:35.762 --> 00:05:40.577
Save this and,
sorry these are not strings.

91
00:05:40.577 --> 00:05:43.015
That's an example of the specifier.

92
00:05:43.015 --> 00:05:46.852
These are supposed to be integers,
like so.

93
00:05:46.852 --> 00:05:48.149
So this is the error you get.

94
00:05:48.149 --> 00:05:50.334
This looks really bizarro.

95
00:05:50.334 --> 00:05:53.364
If you run this, that works.

96
00:05:53.364 --> 00:05:56.634
&gt;&gt; Speaker 4: When you're returning
multiple values like that,

97
00:05:56.634 --> 00:06:01.998
is that automatically de-structuring
a two-pool or something, or something or?

98
00:06:01.998 --> 00:06:04.046
If you just stored the result of that,

99
00:06:04.046 --> 00:06:06.542
calculate sum of products
into one variable,

100
00:06:06.542 --> 00:06:10.394
is that a different data type you can
work with or is that not even valid?

101
00:06:10.394 --> 00:06:11.865
&gt;&gt; Melkey: Sorry, what do you mean?

102
00:06:11.865 --> 00:06:14.647
&gt;&gt; Speaker 4: In Python, if you were
to return two values like that,

103
00:06:14.647 --> 00:06:16.161
it'll be returned as tuple.

104
00:06:16.161 --> 00:06:17.428
&gt;&gt; Melkey: Yeah, these are not tuples.

105
00:06:17.428 --> 00:06:21.252
So what you can do, so this is not gonna
be considered tuple because like I

106
00:06:21.252 --> 00:06:24.199
said earlier,
you can just do something like this, and

107
00:06:24.199 --> 00:06:28.362
now we can completely omit the return
type from our calculateSumAndProduct.

108
00:06:28.362 --> 00:06:30.728
Now we just have sum that we deal with.

109
00:06:30.728 --> 00:06:34.056
The compiler's mad at me cuz
we don't know what product is,

110
00:06:34.056 --> 00:06:36.747
cuz I removed it, but
this is completely valid.

111
00:06:36.747 --> 00:06:40.905
&gt;&gt; Speaker 4: So multiple returns
are like a kind of first class idea?

112
00:06:40.905 --> 00:06:44.687
&gt;&gt; Melkey: Exactly, yeah, so every
variable every return type is handled as

113
00:06:44.687 --> 00:06:48.139
a first class citizen that you
can do whatever you want with.

