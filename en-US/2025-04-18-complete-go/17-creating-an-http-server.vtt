WEBVTT

1
00:00:00.000 --> 00:00:03.698
&gt;&gt; Melkey: And
now we're going to declare our server.

2
00:00:03.698 --> 00:00:06.811
So here we're going to do server, okay?

3
00:00:06.811 --> 00:00:12.970
And we are going to bring in
a new package from the standard

4
00:00:12.970 --> 00:00:17.858
library, which will be a net/http, okay?

5
00:00:17.858 --> 00:00:23.028
And in here we're going to do
http.server and get the struck.

6
00:00:23.028 --> 00:00:26.365
Okay, we define properties
our HTTP server here.

7
00:00:26.365 --> 00:00:28.924
Okay, so
the first problem is gonna be the address.

8
00:00:28.924 --> 00:00:33.271
This takes a string, I'm gonna do colon,
8080, okay, so now this,

9
00:00:33.271 --> 00:00:38.042
this is going to run on port 8080,
we're gonna have our idle timeout, okay?

10
00:00:38.042 --> 00:00:41.538
So I'll time it is the maximum
amount of time to wait for

11
00:00:41.538 --> 00:00:44.590
the next request when
Keepalives are enabled.

12
00:00:44.590 --> 00:00:51.629
Okay, so idle timeout,
we can make this to like time dot minute.

13
00:00:51.629 --> 00:00:54.858
So it should bring in the time package for
you and

14
00:00:54.858 --> 00:00:58.351
it will have two more timeouts,
our read timeout.

15
00:00:58.351 --> 00:01:03.421
So it's the maximum duration for reading
the entire request, including the body.

16
00:01:03.421 --> 00:01:05.435
I think these are always
kind of good to implement.

17
00:01:05.435 --> 00:01:09.792
We can do ten times time.second, okay?

18
00:01:09.792 --> 00:01:13.033
So the time packaging go
is a very powerful package.

19
00:01:13.033 --> 00:01:16.813
It allows us to specify seconds,
minutes, hours, and even days.

20
00:01:16.813 --> 00:01:22.741
And then we have our right timeout, we'll
this something like 30 times time.second,

21
00:01:22.741 --> 00:01:27.582
cause if anything takes longer than this,
we know something is going on.

22
00:01:29.841 --> 00:01:32.531
&gt;&gt; Melkey: Okay, so
this is a definition of our server.

23
00:01:32.531 --> 00:01:35.651
Now, if you want to run our server,

24
00:01:35.651 --> 00:01:40.644
we can do error equals server.listen,
and serve here.

25
00:01:40.644 --> 00:01:44.752
That's a method on the server
struct which we just used.

26
00:01:44.752 --> 00:01:48.896
We can say if our error
does not equal to nil,

27
00:01:48.896 --> 00:01:55.962
now we can do app.logger.fatal and
it passes in the error like so, cool.

28
00:01:55.962 --> 00:01:59.962
So let's go ahead,
open up another terminal,

29
00:01:59.962 --> 00:02:03.265
let's go into CD, into that project.

30
00:02:03.265 --> 00:02:06.143
Okay, if you run, go, run main.go,

31
00:02:06.143 --> 00:02:10.874
if everything is working well,
you should see this statement.

32
00:02:10.874 --> 00:02:16.295
This basically means our, we have a
running HTTP server, panda back, and back.

33
00:02:16.295 --> 00:02:18.730
This doesn't really mean much, because
you can't do anything with it just yet.

34
00:02:18.730 --> 00:02:23.032
Let's go ahead and change that,
let's go back to our code and

35
00:02:23.032 --> 00:02:25.615
let's add a health check function.

36
00:02:25.615 --> 00:02:30.126
Something that just tells, hey, yes, I'm
receiving your request, here's the answer.

37
00:02:30.126 --> 00:02:33.181
We can do this very easily,
we can create a new function.

38
00:02:33.181 --> 00:02:37.652
This is gonna be called our handler, and
it's gonna be called health check, okay?

39
00:02:37.652 --> 00:02:42.980
Now because we know this function itself
is going to be called by our client,

40
00:02:42.980 --> 00:02:48.472
this could be us in our second terminal,
could be someone calling it from a UI,

41
00:02:48.472 --> 00:02:53.246
could be another service,
we don't know, we don't really care.

42
00:02:53.246 --> 00:02:58.187
But because we know this function
is going to be an HTTP handler,

43
00:02:58.187 --> 00:03:01.846
it has to have a specific signature and
by that,

44
00:03:01.846 --> 00:03:05.062
I mean it's gonna accept two arguments.

45
00:03:05.062 --> 00:03:10.470
The first one is typically WW and
it is HTTP response writer.

46
00:03:12.267 --> 00:03:16.212
&gt;&gt; Melkey: And the response
writer is an interface used by

47
00:03:16.212 --> 00:03:20.267
an HTTP handler to
construct an HTTP response.

48
00:03:20.267 --> 00:03:25.389
So this is how we communicate back to
the caller if we have to, we use w.

49
00:03:25.389 --> 00:03:31.089
The next argument is r, which is
gonna be a pointer to HTTP request.

50
00:03:31.089 --> 00:03:35.439
A request represents an HTTP
request received by a server or

51
00:03:35.439 --> 00:03:37.094
to be sent by a client.

52
00:03:37.094 --> 00:03:40.018
So this is what we get,
this is what the caller is sending us.

53
00:03:40.018 --> 00:03:43.828
And this has a bunch of metadata the ones
we typically are curious about are like

54
00:03:43.828 --> 00:03:46.672
body, the body of the JSON or
whatever they want, right?

55
00:03:46.672 --> 00:03:50.464
Or whatever they're sending us,
and then here,

56
00:03:50.464 --> 00:03:54.000
all we're going to do is fmt.Fprint, okay?

57
00:03:54.000 --> 00:03:59.802
Fprint is specifically used to
send back data to our HTTP client,

58
00:03:59.802 --> 00:04:04.230
and we can pass in W our
HTTP responses writer, and

59
00:04:04.230 --> 00:04:07.928
here we can just say status is available.

60
00:04:11.988 --> 00:04:14.097
&gt;&gt; Melkey: Very simple function,
nothing too crazy.

61
00:04:14.097 --> 00:04:16.391
Now my question is, how do we bind this?

62
00:04:16.391 --> 00:04:18.976
We have some random function
called health check,

63
00:04:18.976 --> 00:04:20.788
how do we bind it to our HTTP server?

64
00:04:20.788 --> 00:04:26.091
The answer is using
the built-in HTTP function.

65
00:04:26.091 --> 00:04:28.374
So we can use HTTP, okay?

66
00:04:28.374 --> 00:04:35.660
And we can say handler func like so
or handlefunc, excuse me, handlefunc.

67
00:04:35.660 --> 00:04:40.045
And handlefunc is going
to receive two arguments.

68
00:04:40.045 --> 00:04:43.382
One is going to be the path of
where this function is, and

69
00:04:43.382 --> 00:04:46.799
then the second argument is
what the function is itself.

70
00:04:46.799 --> 00:04:50.761
So here, I'm gonna do /health, okay?

71
00:04:50.761 --> 00:04:53.990
And in go,
functions are first class citizens,

72
00:04:53.990 --> 00:04:56.678
meaning you can pass them as variables.

73
00:04:56.678 --> 00:04:59.495
So we just declared our
function health check.

74
00:04:59.495 --> 00:05:03.384
I'm gonna write this here, and
instead of actually calling it,

75
00:05:03.384 --> 00:05:05.860
I'm just gonna remove those brackets and

76
00:05:05.860 --> 00:05:10.329
just pass it as a very passive as a first
class citizen into our handle func.

77
00:05:10.329 --> 00:05:14.537
&gt;&gt; Speaker 2: Why is R in the health
check, a pointer, but not W?

78
00:05:14.537 --> 00:05:18.237
&gt;&gt; Melkey: Yeah, so
the reason why R is a pointers and not W,

79
00:05:18.237 --> 00:05:23.129
R is a pointer because R is going
to contain data from our client.

80
00:05:23.129 --> 00:05:28.082
And in this particular instance,
it doesn't matter, right?

81
00:05:28.082 --> 00:05:33.309
But we'll see as we go on with the use of,
let's say, middleware,

82
00:05:33.309 --> 00:05:39.667
the use of modifying what R could possibly
hold with the body and like encoding it.

83
00:05:39.667 --> 00:05:44.993
We want it to be a pointer to persist the
data that they send versus data that we

84
00:05:44.993 --> 00:05:50.677
respond with through R, whereas W doesn't
actually come from our client call.

85
00:05:50.677 --> 00:05:53.171
W is something that we get
through our HTTP server,

86
00:05:53.171 --> 00:05:56.303
our through our handlefunc though,
we are allowed to modify and

87
00:05:56.303 --> 00:05:59.621
respond with whatever we want, so
it doesn't have to be a pointer.

88
00:05:59.621 --> 00:06:03.116
It's going to essentially live in
the scope of func HealthCheck.

89
00:06:05.563 --> 00:06:09.184
&gt;&gt; Melkey: So if we save this now,
go back, let's bring down and

90
00:06:09.184 --> 00:06:13.696
go back up to run main.go,
you can see that we are running our app.

91
00:06:13.696 --> 00:06:19.657
I have a typo here, and quickly open
up another window, I'm gonna zoom in.

92
00:06:19.657 --> 00:06:24.366
And here we can do curl,
local host, 8080, and

93
00:06:24.366 --> 00:06:30.150
then we called it what health
&gt;&gt; Melkey: Can see here,

94
00:06:30.150 --> 00:06:31.422
now we have statuses available.

95
00:06:31.422 --> 00:06:33.924
So this is pretty much at this point,
all green lights.

96
00:06:33.924 --> 00:06:36.644
We now know we have a function in go or

97
00:06:36.644 --> 00:06:41.559
a server that is connected to function and
we are able to call it.

