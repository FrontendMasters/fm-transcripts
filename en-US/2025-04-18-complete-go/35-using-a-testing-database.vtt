WEBVTT

1
00:00:00.000 --> 00:00:03.881
&gt;&gt; Melkey: So as we wrap up the core
CRUD portions of the application.

2
00:00:03.881 --> 00:00:08.849
We can start moving on to a different
aspect of Go entirely, and

3
00:00:08.849 --> 00:00:11.023
that's gonna be testing.

4
00:00:11.023 --> 00:00:14.347
Now testing is a pretty wide topic.

5
00:00:14.347 --> 00:00:17.774
You obviously have unit tests,
mock testing, integration testing,

6
00:00:17.774 --> 00:00:20.013
manual testing, beta environment testing.

7
00:00:20.013 --> 00:00:24.009
I mean, testing at itself,
could be an entire course.

8
00:00:24.009 --> 00:00:29.071
And for this particular course,
I want to incorporate testing

9
00:00:29.071 --> 00:00:34.038
techniques I think are very
valuable from a practical sense,

10
00:00:34.038 --> 00:00:39.117
but also valuable from a sense of
what others might have to say.

11
00:00:39.117 --> 00:00:41.687
[COUGH] So I have this slide here,

12
00:00:41.687 --> 00:00:47.797
there is some great books by this
really wonderful author, Thorsten Ball.

13
00:00:47.797 --> 00:00:50.812
And Thorsten has written
some really good books,

14
00:00:50.812 --> 00:00:55.560
two in particular is writing a compiler
in go and writing an interpreter in go.

15
00:00:55.560 --> 00:00:59.172
And in these two books, he actually goes
with a different approach of teaching.

16
00:00:59.172 --> 00:01:01.397
He goes with test-driven development.

17
00:01:01.397 --> 00:01:05.753
So he actually writes test first and
then the functions to couple it,

18
00:01:05.753 --> 00:01:07.490
which I think is very good.

19
00:01:07.490 --> 00:01:11.412
I personally don't adopt TDD all that
much, I think a lot of times running test

20
00:01:11.412 --> 00:01:14.037
over and over and
over again can become appetitive.

21
00:01:14.037 --> 00:01:19.012
But that's not to say that the style that
Thorsten chose to write his books is wrong

22
00:01:19.012 --> 00:01:23.137
by any means, it's just different
flavors for different people.

23
00:01:23.137 --> 00:01:25.689
And so what we're gonna do
here is we wrote the code,

24
00:01:25.689 --> 00:01:28.830
we gonna couple it with some unit
tests for our database, okay?

25
00:01:28.830 --> 00:01:34.731
And I have this video here, which I'm
going to click, I'm not gonna play it.

26
00:01:34.731 --> 00:01:41.182
But in this video,
this is Mitchell Hashimoto, actually.

27
00:01:41.182 --> 00:01:46.684
And Mitchell Hashimoto is
the creator of Ghostty.

28
00:01:46.684 --> 00:01:51.339
And he is at GopherCon in
2017 talking about different

29
00:01:51.339 --> 00:01:55.811
testing parameters and
different test fixtures in go.

30
00:01:55.811 --> 00:02:00.499
And one particular thing I wanted to
highlight from this talk, I'll link it in

31
00:02:00.499 --> 00:02:05.559
these slides so you can go ahead and watch
it, is the notion of table-driven tests.

32
00:02:05.559 --> 00:02:07.318
And we're gonna be using
table-driven tests.

33
00:02:07.318 --> 00:02:10.206
And the syntax here should
look fairly familiar.

34
00:02:10.206 --> 00:02:14.784
Maybe there's some quirks here that
if you're a first time go developer,

35
00:02:14.784 --> 00:02:17.847
you may be asking yourself,
what does this mean?

36
00:02:17.847 --> 00:02:22.892
But the part I wanna highlight is the use
of the anonymous struct here, right?

37
00:02:22.892 --> 00:02:26.163
We've talked about this when we were
designing structs in the first place.

38
00:02:26.163 --> 00:02:30.039
And structs, especially anonymous structs,
are very helpful and

39
00:02:30.039 --> 00:02:33.107
useful when it comes to
table-driven tests, okay?

40
00:02:33.107 --> 00:02:37.088
So we're gonna be adopting table-driven
tests in our code base here.

41
00:02:37.088 --> 00:02:39.263
We're gonna be doing quite a bit of tests.

42
00:02:39.263 --> 00:02:43.018
I'm actually going to approach
this in a systematic way.

43
00:02:43.018 --> 00:02:46.348
I'm gonna show you how to write a test.

44
00:02:46.348 --> 00:02:48.058
I'm not gonna show you how
to write all the tests,

45
00:02:48.058 --> 00:02:49.422
just because it gets very repetitive.

46
00:02:49.422 --> 00:02:52.080
It's like over and over and
over, the same thing, right?

47
00:02:52.080 --> 00:02:56.025
So I kinda wanna drill down the concept
of, what it is to write a test,

48
00:02:56.025 --> 00:02:59.240
how we go about it,
why I chose to do things I chose to do.

49
00:02:59.240 --> 00:03:03.863
And then you can feel free to accept it,
use any kind of testing approaches you

50
00:03:03.863 --> 00:03:08.218
feel that you're comfortable with,
and we can move forward with that.

51
00:03:08.218 --> 00:03:12.486
So before we get started, there is one
aspect I really want to break down, and

52
00:03:12.486 --> 00:03:15.392
that's currently how our
application looks like.

53
00:03:15.392 --> 00:03:19.396
And if you really, really look at it, it's
just, essentially, two main files, right?

54
00:03:19.396 --> 00:03:22.632
Three things include main, and
if we kind of ignore app and routes.

55
00:03:22.632 --> 00:03:26.412
We have our workout store function,
which is directly writing to our database.

56
00:03:26.412 --> 00:03:29.816
We've confirmed it works, we have
a database running, we know it works.

57
00:03:29.816 --> 00:03:34.543
And we also have this file here, which we
know also works, because it's accepting

58
00:03:34.543 --> 00:03:38.202
our request, it's able to handle them and
this is our handler.

59
00:03:38.202 --> 00:03:43.551
So the test I'm going to first approach is
gonna be focusing on the workout store,

60
00:03:43.551 --> 00:03:44.334
all right?

61
00:03:44.334 --> 00:03:47.546
And you may be thinking, okay,
well, how can we truly test this?

62
00:03:47.546 --> 00:03:50.478
Or what functions can
we write that will test

63
00:03:50.478 --> 00:03:53.499
the integrity of
the function we wrote here?

64
00:03:53.499 --> 00:03:58.063
And there's many different ways
that we can approach this, and

65
00:03:58.063 --> 00:04:03.910
the approach I'm going to use is actually
going to be spinning up a test database.

66
00:04:03.910 --> 00:04:07.757
So we're gonna be spinning up another
database that is going to be just

67
00:04:07.757 --> 00:04:09.597
specifically used for testing.

68
00:04:09.597 --> 00:04:12.487
Maybe you're asking, well,
what's the point if we

69
00:04:12.487 --> 00:04:17.062
have our current database here, that is,
the container_name: "workoutDB".

70
00:04:17.062 --> 00:04:21.374
And the way I look at this is,
in production, I would assume most of

71
00:04:21.374 --> 00:04:26.151
the time you'll have a dedicated
database running on some hosted sever.

72
00:04:26.151 --> 00:04:31.633
Whether it's AWS DynamoDB, whether you
have a separate database on a provider,

73
00:04:31.633 --> 00:04:34.345
[COUGH] like Superbase or some like that.

74
00:04:34.345 --> 00:04:38.927
Those are different ways that you can
kind of have a production level database.

75
00:04:38.927 --> 00:04:43.789
Here, this database that we see is simply
like our beta local database, right?

76
00:04:43.789 --> 00:04:45.312
And it persists our data,

77
00:04:45.312 --> 00:04:48.574
we have the volume persisting
that we can bring it back.

78
00:04:48.574 --> 00:04:52.517
We can tear it down, bring it back up,
and the data will still be there.

79
00:04:52.517 --> 00:04:57.107
The reason why I wanna have a test
database is this test database is going to

80
00:04:57.107 --> 00:05:00.152
only exist to validate
the integrity of our SQL.

81
00:05:00.152 --> 00:05:03.947
So we're actually going to be writing
values into this database, we're gonna be

82
00:05:03.947 --> 00:05:07.477
retrieving them, and we'll be checking
to see if they're correct or not.

83
00:05:07.477 --> 00:05:10.971
Is it storing the values it needs to
store, is it retrieving the values

84
00:05:10.971 --> 00:05:14.005
it needs to retrieve,
is it updating the values correctly?

85
00:05:14.005 --> 00:05:17.062
So here we're gonna actually
have a test database,

86
00:05:17.062 --> 00:05:21.309
which we're gonna use only for
this test case here for a data base layer.

87
00:05:21.309 --> 00:05:23.209
And this is just one approach, right?

88
00:05:23.209 --> 00:05:25.231
This is my personal opinion.

89
00:05:25.231 --> 00:05:27.649
With testing,
I'm actually very opinionated,

90
00:05:27.649 --> 00:05:31.227
as much as I like to meme on tests,
I'm a very, very opinionated tester.

91
00:05:31.227 --> 00:05:36.058
I truly think, if you're testing, you
really wanna truly test something, not for

92
00:05:36.058 --> 00:05:40.821
the sake of writing some garbage unit test
to prove to your senior engineer team that

93
00:05:40.821 --> 00:05:41.792
you have tests.

94
00:05:41.792 --> 00:05:45.357
But you actually wanna get
value out of your tests, right?

95
00:05:45.357 --> 00:05:49.161
It's not about writing tests for the sake
of telling people you write tests,

96
00:05:49.161 --> 00:05:51.221
it's you get anything out of your tests.

97
00:05:51.221 --> 00:05:56.194
And for me, writing a fake to mimic my
test database is kind of a waste of time.

98
00:05:56.194 --> 00:06:00.751
I believe in mocks, and I believe mockery,
and we're gonna use potentially mockery,

99
00:06:00.751 --> 00:06:01.622
if we have time.

100
00:06:01.622 --> 00:06:04.940
But if I'm interested in testing
a database, I wanna know,

101
00:06:04.940 --> 00:06:06.443
am I testing the database?

102
00:06:06.443 --> 00:06:08.799
And so that's my philosophy to it.

103
00:06:08.799 --> 00:06:11.707
It's a bit more, I guess, rigid, but

104
00:06:11.707 --> 00:06:17.187
I do hope that once we see it working,
there is some of appreciation to it.

105
00:06:17.187 --> 00:06:20.140
And if it's not your kind of cup of tea,
that's totally fine,

106
00:06:20.140 --> 00:06:22.048
go with whatever you feel is necessary.

107
00:06:22.048 --> 00:06:25.710
But because we're also not using
an ORM and we have our own SQL,

108
00:06:25.710 --> 00:06:28.144
we are literally writing SQL ourselves.

109
00:06:28.144 --> 00:06:31.762
We're processing the rows individually,
I wanna know, really,

110
00:06:31.762 --> 00:06:33.419
if we're doing it correctly.

111
00:06:33.419 --> 00:06:37.270
So in the dockercompose.yml file,
right underneath the db,

112
00:06:37.270 --> 00:06:40.695
we're gonna create another
service called test_db.

113
00:06:40.695 --> 00:06:45.317
Again, you can just watch your spacing and
to save us time,

114
00:06:45.317 --> 00:06:49.394
go ahead and just do the old Ctrl+C,
Ctrl+V here.

115
00:06:49.394 --> 00:06:53.366
Do like this, [COUGH] and then underneath,
after the container_name,

116
00:06:53.366 --> 00:06:55.396
workoutDB, just append test to it.

117
00:06:55.396 --> 00:06:58.949
It's still gonna be the exact same
image that we're going to pull.

118
00:06:58.949 --> 00:07:03.785
The volumes, so
on the right we have /database/postgres,

119
00:07:03.785 --> 00:07:07.319
we just do a -test-data, the rest is fine.

120
00:07:07.319 --> 00:07:10.931
And the last part you need to
make sure is the port here.

121
00:07:10.931 --> 00:07:14.103
I know some people who have
Postgres already running

122
00:07:14.103 --> 00:07:18.140
on their machine faced a bit of
an issue with the port 5432, and

123
00:07:18.140 --> 00:07:22.488
they may have moved their original
db to 5433, or to another port.

124
00:07:22.488 --> 00:07:24.352
Whatever is you have to do,

125
00:07:24.352 --> 00:07:29.719
just make sure that your test db is not on
the same port as your regular db above.

126
00:07:29.719 --> 00:07:35.300
[COUGH] And again, it's fine if the right
hand side of the colon is 5432,

127
00:07:35.300 --> 00:07:38.019
that is, the port of the container.

128
00:07:38.019 --> 00:07:41.429
So since these are gonna be two
separate individual containers,

129
00:07:41.429 --> 00:07:45.645
they're not gonna be intersecting each
other with what ports they are going to be

130
00:07:45.645 --> 00:07:47.140
binding the software with.

131
00:07:47.140 --> 00:07:52.081
Cool, all right, now,
since we have this, we can save this.

132
00:07:52.081 --> 00:07:55.537
And if you go back to your document post,
mine is still running,

133
00:07:55.537 --> 00:07:57.397
I'm gonna go ahead and nuke this.

134
00:07:57.397 --> 00:08:03.593
I'm gonna bring it down, and then I'm
just gonna do docker compose up --build.

135
00:08:03.593 --> 00:08:09.216
And now you can see, not only do I have
the workoutDB running as per usual,

136
00:08:09.216 --> 00:08:13.770
I've now actually pulled and
created a workoutDB_test.

