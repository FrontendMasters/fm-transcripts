WEBVTT

1
00:00:00.000 --> 00:00:01.056
&gt;&gt; Melkey: So with that,

2
00:00:01.056 --> 00:00:06.426
we're gonna create a function that
allows us to register users, okay?

3
00:00:06.426 --> 00:00:09.949
So the function is gonna be pretty easy,
I'm just gonna go and make some space.

4
00:00:09.949 --> 00:00:12.693
We can do funk, I'm gonna do h,

5
00:00:12.693 --> 00:00:17.689
I'm gonna make it a pointer
to our user handler, like so.

6
00:00:17.689 --> 00:00:22.731
And then here we'll do
handle register user,

7
00:00:22.731 --> 00:00:27.645
it's gonna take WH,
TTP response writer and

8
00:00:27.645 --> 00:00:32.059
then a pointer to HTP request, like so.

9
00:00:32.059 --> 00:00:35.970
All right, in this two-step process,
we should be fairly familiar with,

10
00:00:35.970 --> 00:00:39.652
we can do a var request, which you
can be of type registerUserRequest.

11
00:00:39.652 --> 00:00:43.835
And then we're gonna decode the values
we get from the R body into

12
00:00:43.835 --> 00:00:46.017
this particular variable here.

13
00:00:46.017 --> 00:00:51.300
So we can do err is gonna
be json.NewDecoder,

14
00:00:51.300 --> 00:00:54.148
pass it r.Body, okay?

15
00:00:54.148 --> 00:00:59.859
I'm gonna decode this into
the address of that request like so,

16
00:00:59.859 --> 00:01:05.057
if error does not equal to nil,
then we can do a few things.

17
00:01:05.057 --> 00:01:11.542
We do h.logger.Printf for ourselves,

18
00:01:11.542 --> 00:01:19.516
say, ERROR: decoding register request,
okay?

19
00:01:29.029 --> 00:01:29.830
&gt;&gt; Melkey: Oops.

20
00:01:33.138 --> 00:01:36.718
&gt;&gt; Melkey: And we could also bring
in the utils.WriteJSON library or

21
00:01:36.718 --> 00:01:38.919
function that we created earlier.

22
00:01:38.919 --> 00:01:45.367
And here we can do w,
http.StatusBadRequest to bring in utils,

23
00:01:45.367 --> 00:01:52.299
that envelope we can say error,
can say invalid pay request payload.

24
00:01:54.806 --> 00:01:58.134
&gt;&gt; Melkey: And then make sure you return.

25
00:01:58.134 --> 00:02:03.227
&gt;&gt; Speaker 2: So we only created that
type at the top, basically just encoded?

26
00:02:03.227 --> 00:02:07.079
&gt;&gt; Melkey: We created type-
&gt;&gt; Speaker 2: On type at the top of

27
00:02:07.079 --> 00:02:07.955
the register.

28
00:02:07.955 --> 00:02:08.596
&gt;&gt; Melkey: Yeah, this one?

29
00:02:08.596 --> 00:02:10.861
&gt;&gt; Speaker 2: One requires
just to basically have a dump.

30
00:02:10.861 --> 00:02:16.204
&gt;&gt; Melkey: Yep, yeah, so we have like
this structs gonna hold that data, right?

31
00:02:16.204 --> 00:02:19.721
Which is kind of like the definition
of structs, it just holds data, and

32
00:02:19.721 --> 00:02:21.691
you can use it across your application.

33
00:02:21.691 --> 00:02:26.587
So it's just an easier way for
us to extract the value from

34
00:02:26.587 --> 00:02:31.076
our do body into this not
permanent data structure.

35
00:02:31.076 --> 00:02:36.122
&gt;&gt; Speaker 3: Would you on a project have
some sort of maybe globally defined errors

36
00:02:36.122 --> 00:02:41.168
across the project, like they did with,
I can't remember, we were

37
00:02:41.168 --> 00:02:45.505
looking at the SQL package, and they had-
&gt;&gt; Melkey: Var error,

38
00:02:45.505 --> 00:02:51.025
this one actually var SQL error,
yeah, absolutely,

39
00:02:51.025 --> 00:02:55.472
there's many different ways you can do it.

40
00:02:55.472 --> 00:03:02.531
I for one, you can have even a file called
constants in your internal whatever.

41
00:03:02.531 --> 00:03:06.899
And that constants package could just
export a bunch of things for it to use,

42
00:03:06.899 --> 00:03:10.596
like errors, different print statements,
you can have that.

43
00:03:10.596 --> 00:03:13.579
Depends on how big the project
gets with the scope of it,

44
00:03:13.579 --> 00:03:17.019
you can reuse the variables like
definitely use the same error.

45
00:03:17.019 --> 00:03:20.641
And you can declare there, but yeah,
that's a pretty common practice have like

46
00:03:20.641 --> 00:03:23.794
a constant.go and you declare
everything there and it's exported.

47
00:03:23.794 --> 00:03:27.917
Okay, so we have this handle,
our registered user, so at this point,

48
00:03:27.917 --> 00:03:30.876
we can assume we've decoded
everything safely and

49
00:03:30.876 --> 00:03:34.615
securely into the register user
request into that dump struck.

50
00:03:34.615 --> 00:03:37.100
Now we need to validate it,
and how can we validate?

51
00:03:37.100 --> 00:03:42.189
Well, we actually have validate
register user request, so

52
00:03:42.189 --> 00:03:47.391
put it there, and
this has to be addressed like that, right?

53
00:03:47.391 --> 00:03:51.319
So now we can decode it, but
that's not validating yet, right?

54
00:03:51.319 --> 00:03:54.891
Now we have the valid
register request there,

55
00:03:54.891 --> 00:03:59.562
we can handle this error, but
if error does not equal to nil,

56
00:03:59.562 --> 00:04:04.521
we can do utils.WriteJSON(w,
http.statusBadRequest).

57
00:04:04.521 --> 00:04:08.492
And in here we can do utils.Envelope,
you put error, and

58
00:04:08.492 --> 00:04:11.585
this time it's gonna be err.Error like so.

59
00:04:11.585 --> 00:04:16.703
Because we've created that error message
using the errors built in package,

60
00:04:16.703 --> 00:04:19.503
and then don't forget the return, okay?

61
00:04:19.503 --> 00:04:23.451
Next, we can go ahead and
create store.User, so

62
00:04:23.451 --> 00:04:28.721
this is the actual user,
we are okay to persist into our database.

63
00:04:28.721 --> 00:04:32.724
We can make the username as req.Username,
and

64
00:04:32.724 --> 00:04:36.638
we can also make the email
as request.Email.

65
00:04:39.087 --> 00:04:42.377
&gt;&gt; Melkey: Because bio
is an optional field,

66
00:04:42.377 --> 00:04:47.823
we can do if req.Bio does not
equal to this empty string,

67
00:04:47.823 --> 00:04:52.371
we can then also insert
user.Bio = req.Bio.

68
00:04:52.371 --> 00:04:56.120
This could also be in its own function
in the validate request function,

69
00:04:56.120 --> 00:04:56.801
if you want.

