WEBVTT

1
00:00:00.000 --> 00:00:05.235
&gt;&gt; Melkey: We are going to now leverage
the structure that we have developed using

2
00:00:05.235 --> 00:00:10.396
our Qi router and the HTTP server
to start building out our handlers.

3
00:00:10.396 --> 00:00:15.667
And we're gonna do this by continuing
to organize our application.

4
00:00:15.667 --> 00:00:18.790
So here in the internal folder,

5
00:00:18.790 --> 00:00:23.426
let's create a new package called api,
okay?

6
00:00:23.426 --> 00:00:30.135
Within the api package, we're gonna create
a new file called workout_handler.go.

7
00:00:33.384 --> 00:00:38.096
&gt;&gt; Melkey: Let's define
the package api name, okay?

8
00:00:38.096 --> 00:00:41.587
And in here, again,
with every new package,

9
00:00:41.587 --> 00:00:45.623
I always ask myself,
how am I gonna handling be data?

10
00:00:45.623 --> 00:00:50.614
Now, at an api layer, it's not obvious
because if you really think about it,

11
00:00:50.614 --> 00:00:55.168
we accept requests from a client,
we do some stuff with something bad.

12
00:00:55.168 --> 00:00:57.842
What data are we gonna really have, right?

13
00:00:57.842 --> 00:01:03.680
Data doesn't have to be just like
a string, or anything like that data,

14
00:01:03.680 --> 00:01:10.398
as we saw with structs, could also be just
functions and different access layers.

15
00:01:10.398 --> 00:01:15.966
And because our API is going to be
directly talking to our database,

16
00:01:15.966 --> 00:01:21.161
we know that our api needs to have
access to the database layer.

17
00:01:21.161 --> 00:01:24.855
So I'm gonna jump back and
forth a little bit,

18
00:01:24.855 --> 00:01:28.752
but here in internal,
let's make a new folder.

19
00:01:28.752 --> 00:01:30.894
Let's call this store, okay?

20
00:01:30.894 --> 00:01:35.797
It's gonna be package store,
and within the store folder,

21
00:01:35.797 --> 00:01:40.034
let's make a new file
called workout_store.go.

22
00:01:40.034 --> 00:01:42.670
The naming pattern is intentional.

23
00:01:42.670 --> 00:01:47.567
So you know that workout handler will
most likely have some relationship

24
00:01:47.567 --> 00:01:49.580
with a workout store, okay?

25
00:01:49.580 --> 00:01:50.915
Again, this isn't like a hard rule.

26
00:01:50.915 --> 00:01:53.696
Here, let's just create package store.

27
00:01:53.696 --> 00:01:58.295
Now, what I typically do when I write
functions or code is I always, and

28
00:01:58.295 --> 00:02:02.833
this is personal preference,
I love starting from the lowest level.

29
00:02:02.833 --> 00:02:05.460
And for me, the lowest level
is a database layer, right?

30
00:02:05.460 --> 00:02:09.273
If I know how my database layer is gonna
look and like how that world works,

31
00:02:09.273 --> 00:02:13.163
I can go one level above, which is like
api level calls the database layer.

32
00:02:13.163 --> 00:02:14.986
When I satisfied there I go one level up,

33
00:02:14.986 --> 00:02:18.058
which is like the routing make sure
everything is corrected there.

34
00:02:18.058 --> 00:02:22.682
In this case, in the first example,
we're going to start api letter first, so

35
00:02:22.682 --> 00:02:26.426
we're going to leave the data store as is,
but just be mindful.

36
00:02:26.426 --> 00:02:30.934
We're gonna come back to this file when
we tell our app exactly what to do and

37
00:02:30.934 --> 00:02:33.307
how to communicate with our database.

38
00:02:33.307 --> 00:02:36.444
So here, because I said we
are gonna be handling data,

39
00:02:36.444 --> 00:02:39.390
we're gonna create a new
WorkoutHandler struck.

40
00:02:39.390 --> 00:02:43.813
Let's leave this empty for right now, but
with every new struct, let's go ahead and

41
00:02:43.813 --> 00:02:45.176
create our constructor.

42
00:02:45.176 --> 00:02:48.246
So NewWorkoutHandler.

43
00:02:48.246 --> 00:02:53.723
Right now, it's not gonna take any
argument, but it's going to return a point

44
00:02:53.723 --> 00:02:59.304
to WorkoutHandler and so we can do return
the address of WorkoutHandler like so.

45
00:02:59.304 --> 00:03:02.840
And because of this, and
we have this struct available to us,

46
00:03:02.840 --> 00:03:06.382
let's create methods that will
live on the workout handler.

47
00:03:06.382 --> 00:03:08.003
This is a CRUD app.

48
00:03:08.003 --> 00:03:11.227
We need to be able to create,
read, update, delete.

49
00:03:11.227 --> 00:03:13.162
So we're gonna create those methods.

50
00:03:13.162 --> 00:03:19.785
But we're gonna start with getting
the workout and creating the workout.

51
00:03:19.785 --> 00:03:23.038
Those are gonna be, first we're gonna do,
then we'll do update, and

52
00:03:23.038 --> 00:03:24.621
then we'll save delete for last.

53
00:03:24.621 --> 00:03:27.365
So here, let's go ahead and do func.

54
00:03:27.365 --> 00:03:30.535
We'll do a receive to we'll call it wh and

55
00:03:30.535 --> 00:03:34.431
this will be appointed to
our WorkoutHandler, and

56
00:03:34.431 --> 00:03:38.883
we'll call the first one
HandleGetWorkoutByID, okay?

57
00:03:38.883 --> 00:03:44.384
This is gonna take two arguments
which we've seen before,

58
00:03:44.384 --> 00:03:49.348
http.Responsewriter and
r http.Request, okay?

59
00:03:49.348 --> 00:03:54.205
And the body of a function,
if we take a step back,

60
00:03:54.205 --> 00:03:58.601
when we think about how
we access the things,

61
00:03:58.601 --> 00:04:02.897
the name is kind of HandleGetWorkoutByID.

62
00:04:02.897 --> 00:04:04.729
I wonder what that does.

63
00:04:04.729 --> 00:04:06.651
Probably get to work out by the ID.

64
00:04:06.651 --> 00:04:08.789
So if you ever seen,
if you go to a blog post, and

65
00:04:08.789 --> 00:04:12.383
you guys have probably built stuff like
this already, you have UUIDs, right?

66
00:04:12.383 --> 00:04:14.446
You go to a blog post, is that long hash.

67
00:04:14.446 --> 00:04:15.472
That's the ID.

68
00:04:15.472 --> 00:04:17.650
That lives in the URL query.

69
00:04:17.650 --> 00:04:21.194
We could extract that cuz we wanna
know if someone on our website,

70
00:04:21.194 --> 00:04:23.784
our app clicks workout
one versus workout two.

71
00:04:23.784 --> 00:04:27.705
We wanna make sure that we direct
them to the appropriate workout.

72
00:04:27.705 --> 00:04:33.140
So what we can do is actually
retrieve that parameter from the URL,

73
00:04:33.140 --> 00:04:35.476
and we can do that using chi.

74
00:04:35.476 --> 00:04:41.038
So here we can do paramsWorkoutID
is going to be chi.URLParam,

75
00:04:41.038 --> 00:04:44.746
we're gonna pass it that pointer to r, and

76
00:04:44.746 --> 00:04:49.794
then we're gonna extract the slug,
which will dub as id.

77
00:04:49.794 --> 00:04:52.800
And we define the slug when
we define it in our routes.

78
00:04:52.800 --> 00:04:54.300
Here, following,

79
00:04:54.300 --> 00:04:59.692
can just do some preliminary checks
if paramWorkoutID is empty, okay?

80
00:04:59.692 --> 00:05:01.918
We can just simply respond,
hey, this doesn't exist.

81
00:05:01.918 --> 00:05:04.752
Can do http.NotFound, okay?

82
00:05:04.752 --> 00:05:06.978
w, r, and then return.

83
00:05:06.978 --> 00:05:08.697
The return is absolutely critical.

84
00:05:08.697 --> 00:05:11.907
If you don't put a return continues.

85
00:05:11.907 --> 00:05:14.350
Now that we have the workoutID,

86
00:05:14.350 --> 00:05:19.606
the one gotcha is when we use
chi.URLParam, it returns us a string.

87
00:05:19.606 --> 00:05:21.371
WorkoutID is not a string.

88
00:05:21.371 --> 00:05:24.989
WorkoutID is going to be an int for
this example, okay?

89
00:05:24.989 --> 00:05:29.889
Now, typically this could be something
like a UUID, that's probably more valid.

90
00:05:29.889 --> 00:05:34.170
For the sake of this course,
we're gonna stick to using an int,

91
00:05:34.170 --> 00:05:38.213
just because when we start querying,
posting, updating,

92
00:05:38.213 --> 00:05:42.119
it's easier to put one or
two versus a UUID string, okay?

93
00:05:42.119 --> 00:05:45.981
So just for the sake of teaching,
it's a little bit more digestible,

94
00:05:45.981 --> 00:05:48.015
I guess would be the best word to use.

95
00:05:48.015 --> 00:05:53.029
So here we're gonna do workoutID,
and we're gonna do error.

96
00:05:53.029 --> 00:05:57.990
I'm gonna bring in a new
standard library package called

97
00:05:57.990 --> 00:06:02.860
string conversion, so S-T-R-C-U-N-V, okay?

98
00:06:02.860 --> 00:06:06.076
And the function we're gonna do is parse.

99
00:06:06.076 --> 00:06:15.610
I'm gonna bring this one cuz my editor,
&gt;&gt; Melkey: And do parse int.

100
00:06:21.118 --> 00:06:22.170
&gt;&gt; Melkey: There you go.

101
00:06:22.170 --> 00:06:23.635
Okay, so parse int.

102
00:06:23.635 --> 00:06:27.090
It's going to take an argument,
which can be the params or workout ID,

103
00:06:27.090 --> 00:06:28.194
which is type string.

104
00:06:28.194 --> 00:06:29.776
It's been converted to base 10.

105
00:06:29.776 --> 00:06:34.395
It's been converted to a 64 bit int.

106
00:06:34.395 --> 00:06:37.915
Here, if our error does not equal to nil,

107
00:06:37.915 --> 00:06:42.943
what we're going to do is,
I'm gonna kind of cheat this one

108
00:06:42.943 --> 00:06:47.990
I'm going to do http NotFound,
w, r, and return, okay?

109
00:06:47.990 --> 00:06:53.702
I know some individuals may have questions
about error logging and stuff like that.

110
00:06:53.702 --> 00:06:56.176
Hold those questions until we're done,
allow this module.

111
00:06:56.176 --> 00:07:01.463
I'm taking a lot of liberties right now to
kinda get a dirty version of working and

112
00:07:01.463 --> 00:07:04.886
we'll follow it up with
properly formatting this,

113
00:07:04.886 --> 00:07:09.031
giving the proper utils and
how to handle errors accordingly.

114
00:07:09.031 --> 00:07:10.468
So now if we have no errors,

115
00:07:10.468 --> 00:07:14.911
we know that we have succesfully converted
our workout ID and we have the workout ID.

116
00:07:14.911 --> 00:07:19.681
All I wanna do is format.f,
printf, we can do W,

117
00:07:19.681 --> 00:07:24.680
and let's just say this is
the workout id module OD,

118
00:07:24.680 --> 00:07:28.901
break the line, and let's put workoutID.

119
00:07:28.901 --> 00:07:32.645
Cool, so TLDR, here we call this.

120
00:07:32.645 --> 00:07:33.692
We have a slug.

121
00:07:33.692 --> 00:07:35.720
We extract the slug,
we respond with the slug.

122
00:07:35.720 --> 00:07:37.068
Let's all read about it right now.

123
00:07:37.068 --> 00:07:42.746
Okay, as you finish writing that up,
I'm going to start on the second handler.

124
00:07:42.746 --> 00:07:46.059
Don't feel rushed because this
one is gonna be even easier.

125
00:07:46.059 --> 00:07:50.166
So all I'm gonna do here is handle
CreateWorkout, not by ID cuz when you

126
00:07:50.166 --> 00:07:54.348
created workout we did not care about
this, we handled this on our side.

127
00:07:54.348 --> 00:07:57.612
We'll do again the ResponseWriter,
a pointer to http RequestAll I wanna do is

128
00:07:57.612 --> 00:07:59.739
format We handled this on
our side We'll do again,

129
00:07:59.739 --> 00:08:02.027
the response writer a pointer
to HTTP request, okay?

130
00:08:02.027 --> 00:08:06.321
And then here we're just
gonna do is format.f,

131
00:08:06.321 --> 00:08:11.242
printf, we can do W, and
we'll say created a workout,

132
00:08:11.242 --> 00:08:15.347
just to tell us how things are working,
cool.

133
00:08:15.347 --> 00:08:18.525
Now that we have our handle workout,
the struck,

134
00:08:18.525 --> 00:08:22.922
we want to essentially allow people
to curl these requests, right?

135
00:08:22.922 --> 00:08:24.752
We want to get and do a post.

136
00:08:24.752 --> 00:08:25.884
How do we do that?

137
00:08:25.884 --> 00:08:29.806
In routes, we can put in routes,
but even if you put in routes,

138
00:08:29.806 --> 00:08:32.628
how does routes know
about these functions?

139
00:08:32.628 --> 00:08:35.768
And this is where that structure
of our app comes back.

140
00:08:35.768 --> 00:08:39.834
So here we have our type
application struck,

141
00:08:39.834 --> 00:08:46.684
what we're going to add onto this is
now a new field called WorkoutHandler.

142
00:08:46.684 --> 00:08:52.284
And this workoutHandler is gonna be
a pointer to API workoutHandler like this,

143
00:08:52.284 --> 00:08:56.462
and so we're gonna pull in that package,
we just created,

144
00:08:56.462 --> 00:09:00.324
malkidev then project,
internal/API, all right?

145
00:09:00.324 --> 00:09:05.718
And over here,
we gonna create our stores will go here.

146
00:09:05.718 --> 00:09:11.001
And then right below it,
our handlers will go here.

147
00:09:11.001 --> 00:09:19.100
And we can define our first handler as
a workoutHandler as api.NewWorkoutHandler.

148
00:09:22.463 --> 00:09:27.275
&gt;&gt; Melkey: And once we define that, we
can feed it into our application like so.

149
00:09:32.802 --> 00:09:35.493
&gt;&gt; Melkey: So I'm hoping that
the structure is now becoming a little bit

150
00:09:35.493 --> 00:09:36.558
more obvious, right?

151
00:09:36.558 --> 00:09:40.583
We're gonna have multiple handlers,
workout users, whatever you want, and

152
00:09:40.583 --> 00:09:43.237
there's a kind of exist in
their own package realm.

153
00:09:43.237 --> 00:09:48.134
The way we bring them in is using our
application struct to be this kind of one

154
00:09:48.134 --> 00:09:52.828
crux that now has the ability to be
called throughout our application.

155
00:09:52.828 --> 00:09:54.517
We pass that application shrug.

156
00:09:54.517 --> 00:09:58.768
So instead of passing each individual
work on handler across to routes.go

157
00:09:58.768 --> 00:10:03.227
we just pass app and that app has access
to all of the underlying fields, okay?

158
00:10:03.227 --> 00:10:04.120
Now we have this.

159
00:10:04.120 --> 00:10:08.530
We can go to our routes.go,
and very easily,

160
00:10:08.530 --> 00:10:11.933
just hook this up to our functions.

161
00:10:11.933 --> 00:10:13.747
Gonna be two function we're gonna add.

162
00:10:13.747 --> 00:10:16.287
We'll do r.get, okay?

163
00:10:16.287 --> 00:10:18.657
The first one is going to be the slug.

164
00:10:18.657 --> 00:10:22.461
So the workout, so we do /workouts/.

165
00:10:22.461 --> 00:10:29.937
And then this how you do a slug in cheese
specifically, it's curly braces Id, okay?

166
00:10:29.937 --> 00:10:33.308
And then the function is
gonna be app.workoutHandler.

167
00:10:33.308 --> 00:10:37.982
The thing we just passed
into our app struck, and

168
00:10:37.982 --> 00:10:42.097
it's going to be HandleGetWorkoutByID.

169
00:10:46.477 --> 00:10:51.441
&gt;&gt; Melkey: Okay, once you finish that up,
the next function is going to be

170
00:10:51.441 --> 00:10:56.041
the createFunction,
which is gonna be a post, r.post.

171
00:10:56.041 --> 00:11:00.231
The path is just going to be /workouts.

172
00:11:00.231 --> 00:11:04.954
And in here, I'm gonna app.WorkoutHandler,

173
00:11:04.954 --> 00:11:08.069
handleCreateWorkout like so.

174
00:11:08.069 --> 00:11:13.362
So if we're done with that,
we can just quickly go back to our server,

175
00:11:13.362 --> 00:11:16.258
go ahead and rerun this again, okay?

176
00:11:16.258 --> 00:11:21.691
And now we can validate
those new working paths.

177
00:11:21.691 --> 00:11:29.842
So here we can do curl
localhost:8080/workout/2.

178
00:11:29.842 --> 00:11:32.582
You can see this is the workout id 2.

179
00:11:32.582 --> 00:11:37.168
And if you want to try
out the POST method,

180
00:11:37.168 --> 00:11:43.600
you can do curl -x POST
localhost:8080/workout.

181
00:11:43.600 --> 00:11:48.218
And you can see here, created a workout,
so we have full confirmation, and

182
00:11:48.218 --> 00:11:51.047
now our workout handler
is routed correctly.

183
00:11:51.047 --> 00:11:55.097
We're able to query the routes and
they work as we expect.

