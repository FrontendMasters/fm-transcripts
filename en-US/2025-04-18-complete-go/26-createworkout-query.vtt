WEBVTT

1
00:00:00.000 --> 00:00:02.534
&gt;&gt; Melkey: So we're gonna create
a light to, it's two functions, but

2
00:00:02.534 --> 00:00:03.387
one is like a gimme.

3
00:00:03.387 --> 00:00:07.622
The one that actually matters is
going to be the CreateWorkout.

4
00:00:07.622 --> 00:00:12.198
So we're gonna do a func, we're gonna
set a method receiver as pg, and

5
00:00:12.198 --> 00:00:17.554
this is gonna be our PostgresWorkoutStore,
I'm gonna call this CreateWorkout.

6
00:00:17.554 --> 00:00:22.600
Now, the CreateWorkout we are about
to define with the arguments and

7
00:00:22.600 --> 00:00:27.385
the return have to be the exact same
that we defined it in a few lines

8
00:00:27.385 --> 00:00:32.003
above to the create workout
interface method up there, okay?

9
00:00:32.003 --> 00:00:35.092
So to do that, we'll just do
name is gonna be workout, but

10
00:00:35.092 --> 00:00:36.867
the type is what really matters.

11
00:00:36.867 --> 00:00:40.266
It's gonna be a pointer to workout, okay?

12
00:00:40.266 --> 00:00:45.941
And just like our interface dictates,
it has to return a type Workout or

13
00:00:45.941 --> 00:00:49.263
a pointer to Workout and an error, okay?

14
00:00:49.263 --> 00:00:54.258
So here we're gonna actually
get pretty deep into the SQL.

15
00:00:54.258 --> 00:00:59.406
Here, we're gonna start a transaction,

16
00:00:59.406 --> 00:01:04.126
tx error is going to be pg.db.Begin.

17
00:01:04.126 --> 00:01:07.508
This is gonna tell us we're gonna do
a transaction which we can commit

18
00:01:07.508 --> 00:01:08.103
at the end.

19
00:01:08.103 --> 00:01:12.070
The reason I wanna commit this transaction
at the end is because our workout is not

20
00:01:12.070 --> 00:01:15.979
only gonna have it's own workout property,
but remember all those one too many

21
00:01:15.979 --> 00:01:20.088
relationships, those also need to be
committed into the workout entry database.

22
00:01:20.088 --> 00:01:24.492
And if something happens in between, let's
say we're about to commit our workout,

23
00:01:24.492 --> 00:01:27.309
something like freezes our
communication channel and

24
00:01:27.309 --> 00:01:31.104
we don't have the workout entries,
we're actually going against asset

25
00:01:31.104 --> 00:01:33.765
principles in database communications,
right?

26
00:01:33.765 --> 00:01:37.358
So we commit at the end and
if something were to happen,

27
00:01:37.358 --> 00:01:41.044
we actually have a function
that allows us to rollback.

28
00:01:41.044 --> 00:01:42.805
So what does that look like?

29
00:01:42.805 --> 00:01:46.555
So here,
if our error does not equal to nil for

30
00:01:46.555 --> 00:01:51.513
whatever reason,
we can simply just return nil and error.

31
00:01:51.513 --> 00:01:56.582
However, we're gonna do
a defer transaction rollback.

32
00:01:56.582 --> 00:02:01.160
So if anything happens in this
function that causes it to just die or

33
00:02:01.160 --> 00:02:05.002
cause anything to error out or
any kind of nasty things,

34
00:02:05.002 --> 00:02:10.093
we can roll back that transaction to
a state before we call this function.

35
00:02:10.093 --> 00:02:11.501
&gt;&gt; Speaker 2: Do you defer on that,

36
00:02:11.501 --> 00:02:15.270
wanted to call regardless
though when X is the function?

37
00:02:15.270 --> 00:02:17.064
&gt;&gt; Melkey: What do you mean?

38
00:02:17.064 --> 00:02:21.133
&gt;&gt; Speaker 2: That's misunderstanding.

39
00:02:21.133 --> 00:02:22.686
So if we defer the rollback.

40
00:02:22.686 --> 00:02:23.375
&gt;&gt; Melkey: Yeah.

41
00:02:23.375 --> 00:02:25.714
&gt;&gt; Speaker 2: And
then we do the insert statement, right?

42
00:02:25.714 --> 00:02:29.998
Everything goes well, we leave the
function, won't rollback still be called?

43
00:02:29.998 --> 00:02:33.862
&gt;&gt; Melkey: Yeah,
because we have this active transaction,

44
00:02:33.862 --> 00:02:38.652
this tx, we're gonna be using
tx with a bunch of our queries.

45
00:02:38.652 --> 00:02:42.154
So we're gonna use tx dot
query row a few times.

46
00:02:42.154 --> 00:02:46.529
And let's say, in between the two
transactions, if we do two methods on

47
00:02:46.529 --> 00:02:51.426
query row, something happens, it's going
to collect that into the tx struct.

48
00:02:51.426 --> 00:02:53.361
So here, this returns tx,

49
00:02:53.361 --> 00:02:58.410
tx is a struct with all these kind of
things here, and it's gonna kind of

50
00:02:58.410 --> 00:03:03.307
continuously collect any errors in
the status of our transactions.

51
00:03:03.307 --> 00:03:07.541
So when we rollback it's going to
validate, if there's any errors,

52
00:03:07.541 --> 00:03:11.417
if there are it's says no and
nothing essentially happens, but

53
00:03:11.417 --> 00:03:14.529
if it rolls back the transactions
to previous day.

54
00:03:14.529 --> 00:03:17.407
&gt;&gt; Speaker 2: So do you commit
then if there is no error in it-

55
00:03:17.407 --> 00:03:17.920
&gt;&gt; Melkey: Yeah, so

56
00:03:17.920 --> 00:03:20.109
if there is no errors, you'll commit.

57
00:03:20.109 --> 00:03:20.921
&gt;&gt; Speaker 2: Okay, gotcha-
&gt;&gt; Melkey: And

58
00:03:20.921 --> 00:03:24.664
we actually specify that at the end,
we actually have to call tx dot commit.

59
00:03:24.664 --> 00:03:25.521
&gt;&gt; Speaker 2: Gotcha.
&gt;&gt; Melkey: Yeah.

60
00:03:25.521 --> 00:03:27.130
&gt;&gt; Speaker 2: All right, thanks.

61
00:03:27.130 --> 00:03:30.209
&gt;&gt; Melkey: Okay, so
here we're gonna get pretty nasty.

62
00:03:30.209 --> 00:03:34.137
We're gonna create query,
we're gonna define our query, okay?

63
00:03:34.137 --> 00:03:36.889
Old school style,
it's not really old school.

64
00:03:36.889 --> 00:03:40.632
Just INSERT INTO workouts and

65
00:03:40.632 --> 00:03:46.019
the values we're gonna pass in are title,

66
00:03:46.019 --> 00:03:50.809
description, duration_minutes,

67
00:03:50.809 --> 00:03:53.961
and calories_burned.

68
00:03:53.961 --> 00:03:58.543
I'm gonna open this up cuz that's
not the only thing I'm gonna be

69
00:03:58.543 --> 00:04:03.228
inserting into this or
writing into the SQL, just like so, okay?

70
00:04:03.228 --> 00:04:05.240
Then I'm gonna pass in the VALUES.

71
00:04:05.240 --> 00:04:10.106
So here post stress notation
uses the money symbol,

72
00:04:10.106 --> 00:04:13.098
$1, $2, $3, and $4.

73
00:04:13.098 --> 00:04:17.869
The reason why it's four is cuz we are
inserting four values, title, description,

74
00:04:17.869 --> 00:04:20.797
duration, minutes, and
calories burned, okay?

75
00:04:20.797 --> 00:04:28.511
And then we want RETURNING
id that's correct, yeah.

76
00:04:28.511 --> 00:04:30.136
So we have our query defined.

77
00:04:30.136 --> 00:04:33.896
Here we're gonna do error is
going to be our transaction,

78
00:04:33.896 --> 00:04:38.128
that tx that we've initialized,
and we're gonna do QueryRow.

79
00:04:38.128 --> 00:04:42.200
And QueryRow is gonna take our query and
all those values,

80
00:04:42.200 --> 00:04:44.202
the four values it expects.

81
00:04:44.202 --> 00:04:45.241
And how do we get those?

82
00:04:45.241 --> 00:04:46.841
Well, they belong on workout.

83
00:04:46.841 --> 00:04:52.551
So workout.Title, workout.Description,

84
00:04:52.551 --> 00:04:56.691
workout.DurationMinutes, and

85
00:04:56.691 --> 00:05:00.265
workout.CaloriesBurned.

86
00:05:00.265 --> 00:05:03.520
And here we need to scan this,
we do a dot method.

87
00:05:03.520 --> 00:05:11.806
So .Scan into the address of
the ID that we wanna scan into,

88
00:05:11.806 --> 00:05:16.291
which is address.workoutID.

89
00:05:16.291 --> 00:05:20.325
I'm gonna zoom out, just everyone can
kinda see the full query function here.

90
00:05:20.325 --> 00:05:25.875
Next always check the error, so
if error does not equal to nil,

91
00:05:25.875 --> 00:05:30.500
we want to just return nil and
the error, all right?

92
00:05:30.500 --> 00:05:36.864
At this point we also need
to insert the entries.

93
00:05:36.864 --> 00:05:38.699
And so how can we do that?

94
00:05:38.699 --> 00:05:45.043
Well, if you remember entries is a slice,
what we can do is for,

95
00:05:45.043 --> 00:05:49.390
ignore the index values cuz we don't care,

96
00:05:49.390 --> 00:05:53.636
entry in range workout.Entries like so.

97
00:05:53.636 --> 00:05:58.473
We now have the ability to gather
the values of every individual

98
00:05:58.473 --> 00:06:02.488
entry that someone may
submit with their response,

99
00:06:02.488 --> 00:06:06.334
with their payloads from the client or
whatever.

100
00:06:06.334 --> 00:06:11.757
So here we can create another
query in line like this.

101
00:06:11.757 --> 00:06:17.948
And we can say INSERT INTO
workout_entries,

102
00:06:17.948 --> 00:06:22.710
and then the values we want to insert

103
00:06:22.710 --> 00:06:27.471
in here is going to be workout_id,

104
00:06:27.471 --> 00:06:30.963
exercise_name, sets,

105
00:06:30.963 --> 00:06:35.585
reps duration_seconds, okay?

106
00:06:35.585 --> 00:06:39.943
Weight, notes and order index.

107
00:06:42.165 --> 00:06:44.692
&gt;&gt; Melkey: Okay, this followed
the same pattern we saw above.

108
00:06:44.692 --> 00:06:46.667
Next, have to pass in the VALUES.

109
00:06:46.667 --> 00:06:51.151
So VALUES, it's gonna be one because
there's eight, workout id, exercise name,

110
00:06:51.151 --> 00:06:55.841
sets, reps, duration, weight, notes, order
index, we have to do this eight times.

111
00:07:01.708 --> 00:07:02.938
&gt;&gt; Melkey: Eight.

112
00:07:05.562 --> 00:07:08.360
&gt;&gt; Melkey: Like so.

113
00:07:08.360 --> 00:07:12.507
And we can also do RETURNING id.

114
00:07:12.507 --> 00:07:16.871
Next thing we gonna do is just
basically execute the query.

115
00:07:16.871 --> 00:07:22.052
We can do err is, again, our transaction,
I'm gonna query this row.

116
00:07:22.052 --> 00:07:25.106
We're gonna pass it this new query and
all of those arguments.

117
00:07:25.106 --> 00:07:27.724
So the first one is workout.ID, and

118
00:07:27.724 --> 00:07:31.363
then all the other ones
belong on the entry struct.

119
00:07:31.363 --> 00:07:35.556
So it can be entry.ExerciseName,

120
00:07:35.556 --> 00:07:39.192
entry.Sets, entry.Reps,

121
00:07:39.192 --> 00:07:44.647
entry.DurationSeconds, entry.Weight,

122
00:07:44.647 --> 00:07:49.694
entry.Notes, and entry.OrderIndex.

123
00:07:53.370 --> 00:07:55.852
&gt;&gt; Melkey: Okay, I'm just gonna zoom out,
I'm gonna zoom back in real quick.

124
00:07:55.852 --> 00:08:03.289
The next thing we need to do is just
scan this into entry.ID like so.

125
00:08:03.289 --> 00:08:05.714
Now last part, check these errors too.

126
00:08:05.714 --> 00:08:11.497
So if error does not equal to nil,
let's go ahead and

127
00:08:11.497 --> 00:08:15.314
return nil and the error, right?

128
00:08:15.314 --> 00:08:20.368
And now, outside of that for loop for when
we're ranging over our workout entries,

129
00:08:20.368 --> 00:08:24.514
here is where we're going to do
error equals transaction.Commit.

130
00:08:24.514 --> 00:08:28.199
So commit commits the transactions for

131
00:08:28.199 --> 00:08:33.342
all of the entries that
we've kinda queued up, okay?

132
00:08:33.342 --> 00:08:36.672
And in here we can do one final check,

133
00:08:36.672 --> 00:08:41.088
if err does not equal to nil,
return nil and err.

134
00:08:41.088 --> 00:08:46.074
And the final return here
to satisfy it all will be

135
00:08:46.074 --> 00:08:50.396
return workout and nil
&gt;&gt; Speaker 3: My LSP is mad at me because

136
00:08:50.396 --> 00:08:53.928
we're not checking if there's an error for

137
00:08:53.928 --> 00:08:58.039
rollback, unless you check
that I didn't get it.

138
00:08:58.039 --> 00:09:01.665
&gt;&gt; Melkey: We check error for
rollback up here and then defer, I mean,

139
00:09:01.665 --> 00:09:02.608
at that point,

140
00:09:02.608 --> 00:09:07.251
this is where we could use something
like just an anonymous function to defer

141
00:09:07.251 --> 00:09:12.062
create error equals tx.rollback if error
does not equal to nil, check that.

142
00:09:12.062 --> 00:09:18.065
I've typically used just for rollback my
LSP, I thought my LSP was pretty picky,

143
00:09:18.065 --> 00:09:21.430
but I'm not getting that error, but-
&gt;&gt; Speaker 3: Yeah,

144
00:09:21.430 --> 00:09:25.881
I don't know, that's weird,
maybe it's just mine being odd.

145
00:09:25.881 --> 00:09:28.936
&gt;&gt; Melkey: That's weird mine even was not
saying that, but it's cool that's yours.

146
00:09:28.936 --> 00:09:30.985
Are you using Go PLS?

147
00:09:30.985 --> 00:09:33.580
Wow me too, [LAUGH] okay.

148
00:09:33.580 --> 00:09:36.443
I'm gonna quickly just
scaffold the next function.

149
00:09:36.443 --> 00:09:40.213
We're not gonna put a lot of logic into
this, but we're just gonna make sure that

150
00:09:40.213 --> 00:09:43.043
we have the second function
fulfilling our interface here,

151
00:09:43.043 --> 00:09:44.669
which is called get workout by ID.

152
00:09:44.669 --> 00:09:49.100
So let's quickly just create our function,
make our method receiver

153
00:09:49.100 --> 00:09:54.747
the PostgresWorkoutStore like so, and then
let's call the function GetWorkoutByID.

154
00:09:54.747 --> 00:10:01.083
This function should take an ID of int64,
and it's going to return two things for

155
00:10:01.083 --> 00:10:05.261
us, two types,
our pointer to workout and the error.

156
00:10:05.261 --> 00:10:09.852
And within the function body,
I'm gonna quickly just create a workout,

157
00:10:09.852 --> 00:10:12.158
so just create a new workout like so.

158
00:10:12.158 --> 00:10:14.655
You don't have to put any fields in it,
you can just make it empty.

159
00:10:14.655 --> 00:10:20.993
And then one line below it, let's go ahead
and return the workout and nil, cool.

160
00:10:20.993 --> 00:10:25.124
And the reason why we're doing this is
because of our interface, all right?

161
00:10:25.124 --> 00:10:27.748
Which again, quick reminder,
is defined right here.

