WEBVTT

1
00:00:00.000 --> 00:00:05.782
&gt;&gt; Melkey: So the next part we're gonna
do is starting to poke at our database.

2
00:00:05.782 --> 00:00:09.506
I said that typically I like starting from
the lowest level and build my way up.

3
00:00:09.506 --> 00:00:14.129
We started with the API layer, now we're
gonna start working in that store file,

4
00:00:14.129 --> 00:00:17.550
that database layer,
a clear problem is we need a database.

5
00:00:17.550 --> 00:00:19.844
So we're gonna create our database here.

6
00:00:19.844 --> 00:00:23.351
The First thing I want you to do,
if you don't do this,

7
00:00:23.351 --> 00:00:27.623
you might have a pretty unfortunate
situation if you do a git push,

8
00:00:27.623 --> 00:00:31.686
not the end of the world, but
I want you to touch dot git ignore.

9
00:00:38.383 --> 00:00:42.899
&gt;&gt; Melkey: Now and git ignore
we're gonna do slash database and

10
00:00:42.899 --> 00:00:47.732
I'm gonna also just database like,
so just to be safe.

11
00:00:47.732 --> 00:00:52.857
And this is basically going
to ignore any database values

12
00:00:52.857 --> 00:00:57.874
that we are gonna create in
our local environment here,

13
00:00:57.874 --> 00:01:03.444
and so they don't get pushed up
to get home, that one be good.

14
00:01:03.444 --> 00:01:08.031
All right, now the next fog gonna
create is the doctor compose file,

15
00:01:08.031 --> 00:01:10.100
I'm always excited for this.

16
00:01:10.100 --> 00:01:15.181
At the root of your project,
let's go ahead and

17
00:01:15.181 --> 00:01:19.764
add a new file Docker
dash compose dot yml.

18
00:01:24.180 --> 00:01:27.211
&gt;&gt; Melkey: Now, if this is your first
time using Docker, like I said earlier,

19
00:01:27.211 --> 00:01:28.541
the best explanation I have,

20
00:01:28.541 --> 00:01:32.339
it's a black box that runs software that
doesn't actually exist on your computer.

21
00:01:32.339 --> 00:01:34.967
What your computer is
aware of is Docker and

22
00:01:34.967 --> 00:01:39.427
the software that lives within Docker
is containerized within Docker.

23
00:01:39.427 --> 00:01:44.607
We're gonna do a few things that
kind of bridges the black box of

24
00:01:44.607 --> 00:01:51.468
Docker onto a local machine, which is
persisting and having volumes, all right?

25
00:01:51.468 --> 00:01:54.727
But we're going to use
Docker to have our database.

26
00:01:54.727 --> 00:02:00.782
And I've used this, I don't want to say
trick, because it's not a trick, but I've

27
00:02:00.782 --> 00:02:06.181
used this approach for local development
for many, many different years.

28
00:02:06.181 --> 00:02:10.657
It's a quick, cheap way to spin up
a Postgres database on your computer,

29
00:02:10.657 --> 00:02:15.641
and it's 14 lines of code, all right,
so, and that's not including spaces,

30
00:02:15.641 --> 00:02:17.033
spaces, it's more.

31
00:02:17.033 --> 00:02:22.142
But here we'll start in a dogged compose
just it's say the version I'm using,

32
00:02:22.142 --> 00:02:23.600
version 3.8 okay?

33
00:02:23.600 --> 00:02:27.760
That's probably an outdated version,
but it's not broken, don't fix it.

34
00:02:27.760 --> 00:02:32.946
Here we'll specify the services, and

35
00:02:32.946 --> 00:02:39.398
we will name the service DB for
database, okay?

36
00:02:39.398 --> 00:02:41.815
The tabs do matter a little bit.

37
00:02:44.746 --> 00:02:49.358
&gt;&gt; Melkey: Okay, so the first thing
we'll put is the container name, and

38
00:02:49.358 --> 00:02:51.544
we call this just workout Db.

39
00:02:55.532 --> 00:02:59.483
&gt;&gt; Melkey: Okay, and next the most
important argument is the image.

40
00:02:59.483 --> 00:03:04.050
Now, we have a black box,
how does it know what software to run?

41
00:03:04.050 --> 00:03:07.970
That software is identified by the image,
okay?

42
00:03:07.970 --> 00:03:12.345
The image tells Docker, hey,
pull this software, the snapshot of

43
00:03:12.345 --> 00:03:16.820
the software into your Docker
container and you're going to run it.

44
00:03:16.820 --> 00:03:21.472
So here, I'm gonna use a fairly older
It's not that old, but it's old.

45
00:03:21.472 --> 00:03:24.532
It's not the cutting
edge version of Postgres.

46
00:03:24.532 --> 00:03:28.115
You can, it's not going to be a problem,
again, Postgres is extremely reliable,

47
00:03:28.115 --> 00:03:29.894
it's extremely backwards compatible.

48
00:03:29.894 --> 00:03:35.600
So do what you have to do, I'm using
version 12.4 and to specify the image,

49
00:03:35.600 --> 00:03:39.873
we just type in the name of the software,
Postgres, okay?

50
00:03:39.873 --> 00:03:44.442
12, dash or 12.4 slash alpine.

51
00:03:53.811 --> 00:03:58.701
&gt;&gt; Melkey: So this is telling exactly
what snapshot version of Postgres we want

52
00:03:58.701 --> 00:04:00.858
our Docker container to use.

53
00:04:00.858 --> 00:04:03.387
Next up, we're gonna define the volume.

54
00:04:03.387 --> 00:04:06.900
Now, the volume here
has a particular rule.

55
00:04:06.900 --> 00:04:11.971
If we don't specify a volume, and it
doesn't persist, every time we run up and

56
00:04:11.971 --> 00:04:17.368
down our database, we wipe everything,
which is not the best experience, right?

57
00:04:17.368 --> 00:04:21.613
If you wanna store some users or
Developing.

58
00:04:21.613 --> 00:04:23.027
It's gonna mount a volume.

59
00:04:23.027 --> 00:04:26.401
This volume is going to be mounted
in our database location, and

60
00:04:26.401 --> 00:04:30.462
this is we're specifying this,
doesn't necessarily exist right now, but

61
00:04:30.462 --> 00:04:33.729
we're telling Docker this where
you can mount the volume to.

62
00:04:33.729 --> 00:04:36.806
Postgres dash data, colon slash,

63
00:04:36.806 --> 00:04:42.661
after the colon is where it's gonna
exist In the Docker container.

64
00:04:42.661 --> 00:04:50.795
So that exists in
/var/lib/postgresql/data or

65
00:04:50.795 --> 00:04:56.350
to give it read/write abilities.

66
00:04:56.350 --> 00:04:59.136
Next, we're gonna specify the ports.

67
00:04:59.136 --> 00:05:03.596
So this is telling Docker,
you can use this part of my actual machine

68
00:05:03.596 --> 00:05:07.989
to port it on your actual Docker
container or the Docker instance.

69
00:05:07.989 --> 00:05:11.968
We're to use 5432 and bind it to 5432,

70
00:05:11.968 --> 00:05:16.054
which is the default that Postgres uses,
okay?

71
00:05:16.054 --> 00:05:18.955
And here we're gonna supply with
some environment variables.

72
00:05:18.955 --> 00:05:22.348
These environment variables
are going be Important,

73
00:05:22.348 --> 00:05:26.771
because gonna tell us how to basically
log into a Postgres database from

74
00:05:26.771 --> 00:05:29.954
not only our application,
but using psql as well.

75
00:05:29.954 --> 00:05:34.366
So here we do Postgres underscore Db.

76
00:05:34.366 --> 00:05:37.204
When it says Postgres, okay?

77
00:05:37.204 --> 00:05:43.738
I'm gonna say Postgres underscore user,
it's gonna be Postgres as well.

78
00:05:43.738 --> 00:05:50.762
Postgres underscore password,

79
00:05:50.762 --> 00:05:54.779
postgres, okay?

80
00:05:54.779 --> 00:05:58.105
And then one last command
is restart unless stopped.

81
00:06:06.110 --> 00:06:08.592
&gt;&gt; Speaker 2: The restart
should be one tab in, right?

82
00:06:08.592 --> 00:06:10.115
Or is that one out.

83
00:06:10.115 --> 00:06:11.005
&gt;&gt; Melkey: That one's out.

84
00:06:11.005 --> 00:06:13.126
The resource is not in the environment.

85
00:06:13.126 --> 00:06:15.807
&gt;&gt; Speaker 2: Okay, and
then, sorry, the port,

86
00:06:15.807 --> 00:06:20.750
I always forget this with Docker,
is the first one the Docker port?

87
00:06:20.750 --> 00:06:22.010
&gt;&gt; Melkey: No, first one's our port.

88
00:06:22.010 --> 00:06:22.528
&gt;&gt; Speaker 2: Port, okay.

89
00:06:22.528 --> 00:06:23.380
&gt;&gt; Melkey: Yep.

90
00:06:26.971 --> 00:06:28.750
&gt;&gt; Melkey: And the same applies
to volumes as well, right?

91
00:06:28.750 --> 00:06:32.908
The volume is on the left side of the
colon, it's what we're giving Docker and

92
00:06:32.908 --> 00:06:37.330
in the right side is what Docker is going
to be binding it from, it's on container.

93
00:06:40.175 --> 00:06:43.086
&gt;&gt; Melkey: Okay, cool, so
now you have that Rin,

94
00:06:43.086 --> 00:06:46.364
we can take a quick moment
to see if it works.

95
00:06:46.364 --> 00:06:50.996
So here, if you have Docker installed and
Docker Compose installed,

96
00:06:50.996 --> 00:06:54.776
you should be able to write,
Docker Compose up-build.

97
00:06:54.776 --> 00:06:59.603
So docker space compose
space up dash dash build.

98
00:06:59.603 --> 00:07:02.353
So if I run this you.

99
00:07:02.353 --> 00:07:03.782
You can see here,

100
00:07:03.782 --> 00:07:09.705
we now have a working Postgres database
running on our Docker container.

