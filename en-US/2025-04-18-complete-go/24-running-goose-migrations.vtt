WEBVTT

1
00:00:00.215 --> 00:00:01.996
&gt;&gt; Melkey: We are almost there.

2
00:00:01.996 --> 00:00:05.330
All we have to do is kind of route
our application to then read

3
00:00:05.330 --> 00:00:06.806
the file structure here.

4
00:00:06.806 --> 00:00:11.612
That goose up command, we're gonna
run it in our application first, and

5
00:00:11.612 --> 00:00:14.566
we are gonna run it in
the database.go file.

6
00:00:14.566 --> 00:00:18.760
So if you go back to your database.go,
again, ignore this little error here.

7
00:00:18.760 --> 00:00:19.947
I'm gonna have to restart my LSB.

8
00:00:25.717 --> 00:00:29.472
&gt;&gt; Melkey: Underneath our open function,
we're gonna create a few more functions,

9
00:00:29.472 --> 00:00:30.671
or two more functions.

10
00:00:30.671 --> 00:00:32.851
The first one is gonna be called migrate.

11
00:00:32.851 --> 00:00:35.883
So we're going to do func migrate.

12
00:00:35.883 --> 00:00:38.918
This migrate function is
going to take two arguments.

13
00:00:38.918 --> 00:00:41.414
So dg, so we're gonna pointer sequel.db.

14
00:00:44.517 --> 00:00:48.098
&gt;&gt; Melkey: Okay, it's also gonna take
a directory, which can be a string,

15
00:00:48.098 --> 00:00:50.062
and it's going to return an error.

16
00:00:53.534 --> 00:00:54.180
&gt;&gt; Melkey: Like so.

17
00:00:56.552 --> 00:01:00.219
&gt;&gt; Melkey: So this migrate function
is gonna have a very simple purpose.

18
00:01:00.219 --> 00:01:03.525
It's gonna tell goose what
database we're using, and

19
00:01:03.525 --> 00:01:08.041
it's also going to tell it exactly what
we want to do, which is run goose up.

20
00:01:08.041 --> 00:01:10.763
So here we can do error,

21
00:01:10.763 --> 00:01:15.945
is going to be goose.setdialect, like so.

22
00:01:15.945 --> 00:01:19.669
It should bring in the goose package for
you, okay?

23
00:01:19.669 --> 00:01:23.628
I have to make sure mine is v3.

24
00:01:23.628 --> 00:01:28.551
We do actually have to bring it into
a project, because we installed it to have

25
00:01:28.551 --> 00:01:32.596
the goose command, but
we also to do a Go get on the command now.

26
00:01:32.596 --> 00:01:37.268
So if you do go back to goose, instead of

27
00:01:37.268 --> 00:01:42.518
doing Go install, let's also run a Go get.

28
00:01:42.518 --> 00:01:43.023
Okay, cool.

29
00:01:43.023 --> 00:01:45.745
Now you can see it's imported as goose and
not used.

30
00:01:45.745 --> 00:01:50.454
So now I know there's no import issue,
it's just, the compiler is yelling at me,

31
00:01:50.454 --> 00:01:51.749
which I'm fine with.

32
00:01:51.749 --> 00:01:54.835
So here we'll do goose.SelectDialect.

33
00:01:54.835 --> 00:01:58.585
And this is basically telling
goose what we're using,

34
00:01:58.585 --> 00:02:00.668
which is going to be Postgres.

35
00:02:00.668 --> 00:02:05.454
Like so, we'll check if
error does not equal to nil.

36
00:02:05.454 --> 00:02:11.879
We're going to return fmt.Errorf, okay?

37
00:02:11.879 --> 00:02:13.630
I'm gonna say issue with migrates.

38
00:02:13.630 --> 00:02:20.138
We're just gonna say, migrate,
&gt;&gt; Melkey: Modulo w,

39
00:02:20.138 --> 00:02:23.058
them and pass in the error.

40
00:02:23.058 --> 00:02:25.566
Okay, next we're gonna do error.

41
00:02:25.566 --> 00:02:28.668
I'm going to equal this to goose.up.

42
00:02:28.668 --> 00:02:32.693
We'll do goose.up, I'll pass in
the database and then the directory.

43
00:02:39.440 --> 00:02:44.103
&gt;&gt; Melkey: If error does
not equal to nil here,

44
00:02:44.103 --> 00:02:49.859
all we're gonna do is return fmt.Errorf.

45
00:02:49.859 --> 00:02:56.936
All right, I'm gonna say,
goose up module W, pass in the error.

46
00:02:56.936 --> 00:02:59.849
Like so, and then we'll just return nil.

47
00:02:59.849 --> 00:03:02.327
There's no errors at this point.

48
00:03:02.327 --> 00:03:06.184
Okay, now, the last part we
gotta do is be fairly quick.

49
00:03:06.184 --> 00:03:09.593
We have to now bind in that FS,
that file structure.

50
00:03:09.593 --> 00:03:14.436
So all we've done so far is tell goose
what we're using and what command to run,

51
00:03:14.436 --> 00:03:15.750
which is goose.up.

52
00:03:15.750 --> 00:03:19.046
The last part is to bind that
migrations package we have.

53
00:03:19.046 --> 00:03:22.949
So here we'll just call this MigrateFS(),
okay?

54
00:03:22.949 --> 00:03:25.974
It's going to take sql.db.

55
00:03:25.974 --> 00:03:31.630
It will take MigrationsFS(),
which is going to be of type.fs,

56
00:03:31.630 --> 00:03:35.772
we can bring this into
our library using IO/FS.

57
00:03:35.772 --> 00:03:38.425
At the top there in the import statements.

58
00:03:38.425 --> 00:03:42.045
And I'm goinna bring in
our directory string.

59
00:03:42.045 --> 00:03:44.437
And this is gonna return an error for us.

60
00:03:46.944 --> 00:03:49.133
&gt;&gt; Melkey: Okay, so
here we're gonna set a function.

61
00:03:49.133 --> 00:03:51.776
We're gonna set the base file structure,
and

62
00:03:51.776 --> 00:03:55.788
then we're actually gonna call
the Migrate function we wrote below.

63
00:03:55.788 --> 00:04:02.298
So here we'll do goose.SetBaseFS.

64
00:04:02.298 --> 00:04:06.679
We'll put in the MigrationsFS, like so.

65
00:04:06.679 --> 00:04:10.183
And then we're gonna create a defer func,
an anonymous function.

66
00:04:10.183 --> 00:04:14.119
We'll do defer,
which we've already talked about, and

67
00:04:14.119 --> 00:04:18.071
then we'll create our anonymous
function func, right?

68
00:04:18.071 --> 00:04:20.990
The body of our function here,

69
00:04:20.990 --> 00:04:25.832
which is gonna be just
goose.Set Base back to nil.

70
00:04:25.832 --> 00:04:29.004
This does not require any
additional arguments,

71
00:04:29.004 --> 00:04:32.261
which is what these parentheses will mean,
okay?

72
00:04:32.261 --> 00:04:36.058
And then, we'll return Migrate like so,

73
00:04:36.058 --> 00:04:39.967
I'm gonna pass in our DB and
our directory.

74
00:04:39.967 --> 00:04:42.710
Cool, okay, so now we have MigrateFS.

75
00:04:42.710 --> 00:04:43.549
We have Migrate.

76
00:04:43.549 --> 00:04:47.780
The last part is to hook
this all up into our app.go.

77
00:04:47.780 --> 00:04:53.351
So if we go into app.go,
&gt;&gt; Melkey: Okay, the only

78
00:04:53.351 --> 00:04:59.401
part that I think would make sense to
add this is is right above the logger.

79
00:04:59.401 --> 00:05:04.859
And here we can do,
error is going to be store.MigrateFS,

80
00:05:04.859 --> 00:05:08.475
when it passed in our database, pgdb.

81
00:05:08.475 --> 00:05:13.028
We're also going to bring in our
migrations package, so migrations.fs,

82
00:05:13.028 --> 00:05:14.743
that variable we declared.

83
00:05:14.743 --> 00:05:16.894
So, .fs, okay?

84
00:05:16.894 --> 00:05:19.423
And then the directory
is going to be just dot.

85
00:05:19.423 --> 00:05:22.764
So we're gonna be running this
from the base of our directory.

86
00:05:22.764 --> 00:05:27.295
That's where we can find
the migrations package for goose here.

87
00:05:30.523 --> 00:05:34.903
&gt;&gt; Melkey: Now, if error does not
equal to nil, we can just panic.

88
00:05:34.903 --> 00:05:36.597
Cuz if our database doesn't work,

89
00:05:36.597 --> 00:05:38.973
application definitely
should not work as well.

90
00:05:41.887 --> 00:05:44.703
&gt;&gt; Melkey: There's one more thing I want
to do, and that's gonna be to run this.

91
00:05:44.703 --> 00:05:46.544
So we have all these migration files.

92
00:05:46.544 --> 00:05:49.662
We've set them all, and
they look like they work.

93
00:05:49.662 --> 00:05:53.651
Now, if we go back,
we should still have, let me see.

94
00:05:53.651 --> 00:05:54.338
Did I bring it down?

95
00:05:54.338 --> 00:05:55.077
I did.

96
00:05:55.077 --> 00:05:58.060
So here, let's bring everything down.

97
00:05:58.060 --> 00:06:01.766
And what I want to do is, again,
let's go docker compose build up.

98
00:06:03.966 --> 00:06:08.241
&gt;&gt; Melkey: It's gonna run
our workout DB container.

99
00:06:08.241 --> 00:06:14.834
And then here, if you run Go, run main.go.

100
00:06:14.834 --> 00:06:16.344
You should see we have a few things.

101
00:06:16.344 --> 00:06:20.183
Connect it to our database and
we have these three okays, okay?

102
00:06:20.183 --> 00:06:23.657
For users, workouts, and our entries.

103
00:06:23.657 --> 00:06:27.911
And you should see now, successfully
migrated database to version three,

104
00:06:27.911 --> 00:06:31.898
because we have three SQL files,
all with the goose statement begin and

105
00:06:31.898 --> 00:06:32.978
goose up command.

106
00:06:32.978 --> 00:06:37.654
One more thing that we can do is now
we can actually use PSQL, right?

107
00:06:37.654 --> 00:06:41.648
So this is the thing, you can use any
kind of DBUI that you'd like, but

108
00:06:41.648 --> 00:06:42.881
PSQL is the one I use.

109
00:06:42.881 --> 00:06:46.051
Here's the command- usual be Postgres.

110
00:06:46.051 --> 00:06:50.110
The host is localhost, and
the port is 54 through d2.

111
00:06:50.110 --> 00:06:54.176
So if I run this, it should ask me for
the password for Postgres.

112
00:06:54.176 --> 00:06:56.747
That's just Postgres.

113
00:06:56.747 --> 00:07:02.802
If I run this, you can see,
PSQL version 17.4, server 12.4.

114
00:07:02.802 --> 00:07:05.587
That's important because
that's the image that we have.

115
00:07:05.587 --> 00:07:10.734
And now if you do forward slash DT,
you can see that we have our users table,

116
00:07:10.734 --> 00:07:16.481
our workout entries table, our workouts
table, and the actual GooseDB version.

117
00:07:16.481 --> 00:07:21.516
So we've kind of completed the loop
here of now having our database spun up,

118
00:07:21.516 --> 00:07:24.427
our back and
connected to our database, and

119
00:07:24.427 --> 00:07:28.770
us actually inserting new SQL
schemas into the database itself.

