WEBVTT

1
00:00:00.052 --> 00:00:04.957
&gt;&gt; Melkey: I wanted to provide everyone
with all the tools that they would

2
00:00:04.957 --> 00:00:09.123
need if they were to go back and
write go on their own.

3
00:00:09.123 --> 00:00:13.295
We'll write HTTP Servers using Go,
we'll write Unit tests in Go.

4
00:00:13.295 --> 00:00:17.965
So we'll write pretty intense
tests as a whole section of it.

5
00:00:17.965 --> 00:00:21.488
We'll obviously learn how to connect and
write to our database.

6
00:00:21.488 --> 00:00:25.490
We'll learn to connect and
write to our API, Stella Write and Go.

7
00:00:25.490 --> 00:00:29.045
We'll also have handlers for
user interaction, so

8
00:00:29.045 --> 00:00:31.240
imagine having users, right?

9
00:00:31.240 --> 00:00:33.900
Imagine building an app and
actually having users,

10
00:00:33.900 --> 00:00:35.959
we wanna give them a proper experience.

11
00:00:35.959 --> 00:00:39.792
We're gonna show them we can handle their
information, that their information safe,

12
00:00:39.792 --> 00:00:42.763
that it's able to communicate
through everything else in the app.

13
00:00:42.763 --> 00:00:47.691
So we're definitely gonna have a core
part of how users will work in

14
00:00:47.691 --> 00:00:49.364
a back-end setting.

15
00:00:49.364 --> 00:00:53.388
And then for that, we'll have
a middleware, we'll create our routing.

16
00:00:53.388 --> 00:00:57.394
I think middleware is actually
a really cool topic that shows how

17
00:00:57.394 --> 00:01:00.063
we can inject something
into the request or

18
00:01:00.063 --> 00:01:03.862
the response, and
how we can really use it to our advantage.

19
00:01:03.862 --> 00:01:06.288
Who does this course benefit the most?

20
00:01:06.288 --> 00:01:10.816
I think that's probably an important
question to ask, and it's really simple,

21
00:01:10.816 --> 00:01:14.174
kind of going back to the objective
function of this course.

22
00:01:14.174 --> 00:01:17.150
And it's anyone who's interested in
learning the Go program language.

23
00:01:17.150 --> 00:01:20.355
And again, that's kind of it,
I can move on to the next slide, but

24
00:01:20.355 --> 00:01:21.284
I'm not going to.

25
00:01:21.284 --> 00:01:25.473
It's a very simple kind of mission
statement, if you think about it,

26
00:01:25.473 --> 00:01:28.034
because it covers a lot of ground, right?

27
00:01:28.034 --> 00:01:30.684
If you someone who's a junior engineer,
right?

28
00:01:30.684 --> 00:01:34.994
Let's say you're very green, out of
school, you're just learning it, and

29
00:01:34.994 --> 00:01:38.390
you maybe tinker around with JavaScript,
or TypeScript, or

30
00:01:38.390 --> 00:01:42.793
Python, one of those first languages
that introduces people to programming.

31
00:01:42.793 --> 00:01:45.437
I think Go is a great
first language to learn,

32
00:01:45.437 --> 00:01:50.590
I truly think when we think about first
programming languages, Python, JavaScript,

33
00:01:50.590 --> 00:01:54.930
are one, two, I don't see any reason
why Go is not in that conversation.

34
00:01:54.930 --> 00:01:57.974
I actually would make the argument that
Go is probably better than the other two.

35
00:01:57.974 --> 00:02:02.403
Because if you wanna make
a solid career as an engineer,

36
00:02:02.403 --> 00:02:07.398
as a programmer, as a developer,
Go will expose more elements

37
00:02:07.398 --> 00:02:12.039
of computer science than JavaScript and
Python, right?

38
00:02:12.039 --> 00:02:16.272
It's just more intricacies about Go,
I'm not saying it's the lowest level

39
00:02:16.272 --> 00:02:19.853
implementation because when you
go lower the barrier to entry for

40
00:02:19.853 --> 00:02:22.080
a new person is kind of tougher, right?

41
00:02:22.080 --> 00:02:26.828
You're not gonna really recommend someone
brand new, something like C right?

42
00:02:26.828 --> 00:02:30.771
Or Rust, or maybe you would, but
I think a lot of times you do that,

43
00:02:30.771 --> 00:02:34.373
there's a chance some people
may get discouraged, right?

44
00:02:34.373 --> 00:02:36.858
Because programming is hard,
especially if you're new,

45
00:02:36.858 --> 00:02:39.343
I don't know if you remember
the first time you wrote code,

46
00:02:39.343 --> 00:02:42.242
you're probably I don't like,
what, I don't get how this works.

47
00:02:42.242 --> 00:02:47.620
And so I think Go it's a very subtle way
to get introduced to programming, and

48
00:02:47.620 --> 00:02:53.004
it introduces quote, unquote advanced
intermediate topics that Python and

49
00:02:53.004 --> 00:02:55.183
JavaScript kind of abstract.

50
00:02:55.183 --> 00:02:58.231
But it's also different
people's experience, so

51
00:02:58.231 --> 00:03:03.011
let's say you're a mid-level engineer and
you've been mastering your tools,

52
00:03:03.011 --> 00:03:06.072
which could be web dev, or
could be something else.

53
00:03:06.072 --> 00:03:07.398
But you wanna make a transition, right?

54
00:03:07.398 --> 00:03:11.954
You wanna go from front-end to back-end,
you sometimes pique your interest.

55
00:03:11.954 --> 00:03:18.065
Go, again, is a great language to seek
out in that endeavor because I think

56
00:03:18.065 --> 00:03:23.703
other languages may have different
criteria for use cases, right?

57
00:03:23.703 --> 00:03:27.006
Maybe have different boiler
plates attached to them,

58
00:03:27.006 --> 00:03:29.894
which makes everything
kind of overwhelming.

59
00:03:29.894 --> 00:03:33.739
I think if you're first kind of interested
in back-end languages, and you see if

60
00:03:33.739 --> 00:03:37.381
it's truly something for you, I think
Go is a great language that does that.

61
00:03:37.381 --> 00:03:40.267
And then even for seniors,
even if you're a senior engineer and

62
00:03:40.267 --> 00:03:42.199
you've been mastering Go for a long time.

63
00:03:42.199 --> 00:03:45.119
I do hope there's going to
be things in this course

64
00:03:45.119 --> 00:03:49.862
that either remind you about certain
topics of Go that maybe you've forgotten.

65
00:03:49.862 --> 00:03:53.200
Or maybe you choose something new that you
didn't even think of implementing in your

66
00:03:53.200 --> 00:03:53.817
own projects.

67
00:03:53.817 --> 00:03:59.226
So I truly hope this covers a wide
array of people who want to learn Go,

68
00:03:59.226 --> 00:04:02.131
or going out of their way to learn Go.

69
00:04:02.131 --> 00:04:05.944
Or maybe have heard of it, have this kind
of itch, and then hopefully this course,

70
00:04:05.944 --> 00:04:06.985
scratches that itch.

71
00:04:06.985 --> 00:04:09.994
So finally with all that yapping,
we're gonna talk about,

72
00:04:09.994 --> 00:04:11.361
what are we going to build?

73
00:04:11.361 --> 00:04:17.141
So we are going to be building
a workout posting service.

74
00:04:17.141 --> 00:04:21.764
In our project, we're going to give users
the ability to create accounts where

75
00:04:21.764 --> 00:04:24.328
you're gonna have people that can sign up.

76
00:04:24.328 --> 00:04:28.920
We'll talk about different
authentication methods, cuz I think

77
00:04:28.920 --> 00:04:34.087
there's a few more popular ones I think
a lot of people may know of already.

78
00:04:34.087 --> 00:04:38.709
And I think there's some that maybe
some individuals aren't aware of.

79
00:04:38.709 --> 00:04:43.425
And I did a bit of a deep dive in
authentication methods myself, and this

80
00:04:43.425 --> 00:04:49.023
section here where I talk about different
methods and which one we're going to use.

81
00:04:49.023 --> 00:04:52.759
But yeah, we're gonna allow
our users to create workouts,

82
00:04:52.759 --> 00:04:56.861
we're gonna give our users the ability
to edit their own workout,

83
00:04:56.861 --> 00:04:59.886
that's a key,
distinguish the quick key part.

84
00:04:59.886 --> 00:05:03.150
We don't want someone to create a workout
and someone else edit that workout,

85
00:05:03.150 --> 00:05:04.938
that's obviously not something we want.

86
00:05:04.938 --> 00:05:06.562
Users can delete their workouts.

87
00:05:06.562 --> 00:05:10.457
Again, I wanna create a workout, I don't
want someone else to delete my workout.

88
00:05:10.457 --> 00:05:11.742
We can retrieve workouts.

89
00:05:11.742 --> 00:05:17.150
And all of that is a CRUD app, which is
create, read, update, delete, all right?

90
00:05:17.150 --> 00:05:22.745
And on the topic of CRUD,
just for a second, I've noticed,

91
00:05:22.745 --> 00:05:27.795
because on Twitter and
looking at other stuff online,

92
00:05:27.795 --> 00:05:31.088
that maybe CRUD has this reputation

93
00:05:31.088 --> 00:05:35.938
of being an older style of
developing apps, right?

94
00:05:35.938 --> 00:05:42.566
CRUD apps are out-of-date compared
to RPC design applications,

95
00:05:42.566 --> 00:05:47.340
and I just wanna say that is so
far from the truth.

96
00:05:47.340 --> 00:05:51.988
So if for any moment,
you want to build a CRUD up, or

97
00:05:51.988 --> 00:05:57.397
you are hesitant about building a CRUD up,
everything that

98
00:05:57.397 --> 00:06:03.686
continues to be built is going to
implement and be a CRUD app, right?

99
00:06:03.686 --> 00:06:06.470
Yes, there's aspects where
you can use RPC, right?

100
00:06:06.470 --> 00:06:11.188
Something like gRPC is great for
microservices, but most apps that we use,

101
00:06:11.188 --> 00:06:15.389
like Instagram, Twitter, whatever,
literally you can name it,

102
00:06:15.389 --> 00:06:17.842
it's going to have CRUD aspects to it.

103
00:06:17.842 --> 00:06:25.045
So really, do not focus on what the hot,
new, sexy thing is, right?

104
00:06:25.045 --> 00:06:28.328
At the end of the day, the foundation
is gonna get you a lot further,

105
00:06:28.328 --> 00:06:30.409
in my opinion, of how things are written.

106
00:06:30.409 --> 00:06:33.185
And even at Twitch,
a lot of the work that's done,

107
00:06:33.185 --> 00:06:36.232
all the applications are CRUD
apps at the end of the day.

108
00:06:36.232 --> 00:06:38.352
So what is the tech stack, right?

109
00:06:38.352 --> 00:06:41.887
The back-end is gonna be in Go,
if you were wondering what

110
00:06:41.887 --> 00:06:46.015
the back-end was going to be at
this point, that's pretty funny.

111
00:06:46.015 --> 00:06:50.961
Obviously, it's gonna be in Go,
that's it, that's the course, right?

112
00:06:50.961 --> 00:06:54.081
You will hear a lot of
time people talk about Go,

113
00:06:54.081 --> 00:06:57.982
people talk about the standard
library that comes with Go,

114
00:06:57.982 --> 00:07:03.072
kind of the out of box solution when you
install Go, what you have right away.

115
00:07:03.072 --> 00:07:07.294
A lot of purists will say that you
can write everything in Go with

116
00:07:07.294 --> 00:07:09.455
no external libraries needed.

117
00:07:09.455 --> 00:07:14.552
And I wanna say they are correct, you
don't need external libraries in Go, okay?

118
00:07:14.552 --> 00:07:20.098
You can build everything from scratch,
it's kind of the standard library is so

119
00:07:20.098 --> 00:07:23.820
rich that if you have a giant
import list in your file,

120
00:07:23.820 --> 00:07:27.319
it could be a bit of that's
an interesting thing.

121
00:07:27.319 --> 00:07:28.859
Cuz in Go, typically,

122
00:07:28.859 --> 00:07:33.024
a lot of things are made internally
using the standard library.

123
00:07:33.024 --> 00:07:35.876
So for something like routing,
you could, of course,

124
00:07:35.876 --> 00:07:37.707
use the standard library, right?

125
00:07:37.707 --> 00:07:40.898
It's actually not too
difficult to implement.

126
00:07:40.898 --> 00:07:46.313
The reason why I chose to use an external
library, and I'll get to the reason

127
00:07:46.313 --> 00:07:51.485
why she in particular, is because I
thought of in real-world aspects.

128
00:07:51.485 --> 00:07:54.554
When someone is working in a team
on a project at a company,

129
00:07:54.554 --> 00:07:58.630
there's gonna be instances we're gonna
be importing external libraries,

130
00:07:58.630 --> 00:08:00.842
there's no other way around it, right?

131
00:08:00.842 --> 00:08:04.877
They are there for a reason,
they're proven, they're battle-tested,

132
00:08:04.877 --> 00:08:05.703
and they work.

133
00:08:05.703 --> 00:08:10.421
And what they do is they
make your job easier, right?

134
00:08:10.421 --> 00:08:15.111
Now, not all external libraries will do
that, some of them are very opinionated,

135
00:08:15.111 --> 00:08:19.401
some of them may take away from the true
aspect of what you want to implement.

136
00:08:19.401 --> 00:08:23.309
But for me, I want to bring
a routing library that I trusted,

137
00:08:23.309 --> 00:08:28.230
that I've used before, and one that has
a really good rep, and that is Chi.

138
00:08:28.230 --> 00:08:30.709
So we're gonna be using Chi for
our routing library, and

139
00:08:30.709 --> 00:08:33.871
we're also gonna be bringing a lot
of other external libraries as well.

140
00:08:33.871 --> 00:08:39.267
So not be doing a lot of those, but
I'm gonna introduce the libraries

141
00:08:39.267 --> 00:08:43.827
that I think a lot of Go
developers use on a day-to-day and

142
00:08:43.827 --> 00:08:47.102
continue to use on a day-to-day basis.

143
00:08:47.102 --> 00:08:50.165
In our database, it's gonna be in
Postgres, I've already talked about this,

144
00:08:50.165 --> 00:08:51.662
it's going to be spun up using Docker.

145
00:08:51.662 --> 00:08:55.136
So we're gonna have a separate Docker
container that's gonna have our Postgres

146
00:08:55.136 --> 00:08:55.653
database.

147
00:08:55.653 --> 00:08:58.646
We're gonna be able to connect to
our Docker container that's gonna

148
00:08:58.646 --> 00:09:00.099
have Postgres running, right?

149
00:09:00.099 --> 00:09:03.672
And then we're gonna use, psql,
or whatever kind of UI for

150
00:09:03.672 --> 00:09:08.042
database that you have to check out
what's happening in that database.

151
00:09:08.042 --> 00:09:12.317
I think the cool part about this is we're
gonna be building everything from absolute

152
00:09:12.317 --> 00:09:13.289
scratch, right?

153
00:09:13.289 --> 00:09:15.856
So we're gonna start
with an empty directory,

154
00:09:15.856 --> 00:09:20.682
I'm gonna create literally touch main.go,
to create the file, I'm gonna spin it up.

155
00:09:20.682 --> 00:09:24.718
So there's no boilerplate, there's no
use this and then pull this in, and

156
00:09:24.718 --> 00:09:28.330
there's all this coterie written,
and you're what does that do?

157
00:09:28.330 --> 00:09:34.491
I personally have a bit of
a beef with that style, right?

158
00:09:34.491 --> 00:09:36.964
If you wanna teach someone,
let's truly teach them,

159
00:09:36.964 --> 00:09:39.833
let's do it all from scratch and
show them how things are done.

160
00:09:39.833 --> 00:09:43.987
And so, I think maybe in some cases,
that's easier said than done, but in Go,

161
00:09:43.987 --> 00:09:48.267
absolutely, we don't need anything to
demonstrate what we're gonna be doing.

162
00:09:48.267 --> 00:09:52.239
So just having a computer,
the prerequisites I mentioned earlier,

163
00:09:52.239 --> 00:09:55.054
will get us from nothing
to something at the end.

