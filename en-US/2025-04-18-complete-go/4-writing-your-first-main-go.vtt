WEBVTT

1
00:00:00.172 --> 00:00:04.956
&gt;&gt; Melkey: Okay, let's go ahead and
open up some code.

2
00:00:04.956 --> 00:00:07.251
So you can see if you open up main.go,
you're already greeted by the compiler,

3
00:00:07.251 --> 00:00:08.009
it's already mad at you.

4
00:00:08.009 --> 00:00:12.682
You haven't written anything and
the compiler is yelling at you.

5
00:00:12.682 --> 00:00:17.701
Go's compiler is very opinionated,
it's gonna yell at you a lot.

6
00:00:17.701 --> 00:00:21.811
There's a bunch of different rules that
the compiler wants you to follow so

7
00:00:21.811 --> 00:00:23.583
I can be happy, that Go can run.

8
00:00:23.583 --> 00:00:27.584
And we'll see more of these as
we kind of write more code.

9
00:00:27.584 --> 00:00:30.657
I'm not gonna list them right here,
we'll just see them as they come.

10
00:00:30.657 --> 00:00:35.329
But one highlight that I
want to emphasize here is,

11
00:00:35.329 --> 00:00:39.793
every Go project starts
with the same function.

12
00:00:39.793 --> 00:00:43.467
If you go to any project on GitHub,
your company, whatever,

13
00:00:43.467 --> 00:00:47.639
you look at a repository,
it could be like multiple different files,

14
00:00:47.639 --> 00:00:49.847
thousands upon thousands of lines.

15
00:00:49.847 --> 00:00:52.815
If you wanna see where
everything gets executed,

16
00:00:52.815 --> 00:00:55.368
it's a function called func main, okay?

17
00:00:55.368 --> 00:00:57.885
And it's going to exist
in a package called main.

18
00:00:57.885 --> 00:01:00.692
So, because it's our main.go file,

19
00:01:00.692 --> 00:01:04.615
we'll create our first
package called package main.

20
00:01:04.615 --> 00:01:07.650
Just like this, oops, okay?

21
00:01:07.650 --> 00:01:11.009
And package main,
when I talked about the Go module,

22
00:01:11.009 --> 00:01:14.754
I said that you can define your
package to be whatever it is.

23
00:01:14.754 --> 00:01:18.097
Package utils, package routing,
package middleware,

24
00:01:18.097 --> 00:01:20.764
you have control of what
to call your package.

25
00:01:20.764 --> 00:01:22.977
Accept the package main.

26
00:01:22.977 --> 00:01:25.238
The compiler is going to look for

27
00:01:25.238 --> 00:01:30.871
a package declared as main because we
wanna compile into an executable binary.

28
00:01:30.871 --> 00:01:32.344
That's our goal, it's a compiled language.

29
00:01:32.344 --> 00:01:37.032
So, there's a strict rule set
that the compiler needs to

30
00:01:37.032 --> 00:01:41.826
know to execute and
create this binary in the first place.

31
00:01:41.826 --> 00:01:43.597
So we have this package main.

32
00:01:43.597 --> 00:01:46.768
We've addressed one core rule
that the compiler wants.

33
00:01:46.768 --> 00:01:48.395
Next is the function.

34
00:01:48.395 --> 00:01:53.216
So, I'm gonna quickly go over
how to write a function.

35
00:01:53.216 --> 00:01:56.530
I'm gonna go in deep in detail
of it in just a little bit.

36
00:01:56.530 --> 00:01:59.988
So it's func main, like so, okay?

37
00:01:59.988 --> 00:02:03.687
So, func is the keyword for
go to declared function,

38
00:02:03.687 --> 00:02:08.800
main is the name of the function,
parentheses's the arguments within.

39
00:02:08.800 --> 00:02:12.374
There's a little gap right here where
it returns the type of where this

40
00:02:12.374 --> 00:02:16.445
function returns, and then curly braces
to execute the logic of the function.

41
00:02:16.445 --> 00:02:19.111
Here, func main has to
be defined like this.

42
00:02:19.111 --> 00:02:22.426
The signature of func main and
every package main and

43
00:02:22.426 --> 00:02:25.527
every Go project follows this pattern,
right?

44
00:02:25.527 --> 00:02:27.122
This is not negotiable.

45
00:02:27.122 --> 00:02:30.225
You can make other functions
called func not really main.

46
00:02:30.225 --> 00:02:34.338
That could be whatever you want as
a signature, but as far as the compiler,

47
00:02:34.338 --> 00:02:38.799
it needs to have a package main with a
func main here, exactly written like this.

48
00:02:38.799 --> 00:02:44.367
So, the first thing I want us to
do is just make a hello world.

49
00:02:44.367 --> 00:02:50.248
To do that, I'm gonna import the format
package from the standard library.

50
00:02:50.248 --> 00:02:52.653
To import,
we're gonna use the keyword import.

51
00:02:52.653 --> 00:02:54.464
I'm gonna open it up with parentheses.

52
00:02:54.464 --> 00:02:59.392
And then here, to import a package,
we'll do quotation and then FMT.

53
00:02:59.392 --> 00:03:03.128
You can see that the compiler's already
yelling at us, format import and not used.

54
00:03:03.128 --> 00:03:07.951
The compiler, if you have unused imports,
will not compile,

55
00:03:07.951 --> 00:03:10.873
another strict rule by the compiler.

56
00:03:10.873 --> 00:03:14.500
To print hello world,
we can do format.print line, and if you

57
00:03:14.500 --> 00:03:19.231
have everything except correctly, you
should see the hint of the function here.

58
00:03:19.231 --> 00:03:24.439
We'll do print line and
we'll just say hello from the masters,

59
00:03:24.439 --> 00:03:27.245
and we'll save this, all right?

60
00:03:27.245 --> 00:03:30.191
Nothing too crazy,
we can open up another terminal, or

61
00:03:30.191 --> 00:03:32.839
whatever it is you're comfortable with,
okay?

62
00:03:32.839 --> 00:03:39.162
And to run this file,
we can do the command Go, run main.go.

63
00:03:39.162 --> 00:03:41.885
Let me see, we have hello,
front end masters.

64
00:03:41.885 --> 00:03:46.048
Nothing too groundbreaking, hello world,
of course we're gonna have it, right?

65
00:03:46.048 --> 00:03:49.065
It is what it is, really.

66
00:03:49.065 --> 00:03:53.875
And we've explained kind of
the logistics of the compiler.

67
00:03:53.875 --> 00:03:56.652
One thing to note,
when we import packages,

68
00:03:56.652 --> 00:04:00.611
packages can import other things
from other packages, right?

69
00:04:00.611 --> 00:04:05.689
Of course, you can have cyclical imports,
that's kind of a no-brainer.

70
00:04:05.689 --> 00:04:10.257
Your package main can import other
packages from your application,

71
00:04:10.257 --> 00:04:11.130
no problem.

72
00:04:11.130 --> 00:04:17.387
It cannot export, so other packages cannot
import anything from your package main.

73
00:04:17.387 --> 00:04:21.840
Your package main brings everything in,
structures your project, and

74
00:04:21.840 --> 00:04:25.418
it executes whatever is in
the func main here, all right?

75
00:04:25.418 --> 00:04:29.434
So remember, it's not like a two-way door,
only in for the funk main, but not out.

76
00:04:29.434 --> 00:04:31.912
Other packages, there's less restriction.

77
00:04:31.912 --> 00:04:36.237
It's just a package main follows
this particular rule set, okay?

78
00:04:36.237 --> 00:04:38.832
One more thing on the compiling aspect,

79
00:04:38.832 --> 00:04:43.194
I wanna kinda cover this ASAP before
moving forward with anything.

80
00:04:43.194 --> 00:04:46.338
Right now we're running this,
we just do go run main.go again and

81
00:04:46.338 --> 00:04:48.539
it just runs whatever we
have in our func main.

82
00:04:48.539 --> 00:04:50.707
If you want this to be
compiled into a binary,

83
00:04:50.707 --> 00:04:54.149
which is something you would typically
see in like a pipeline, right?

84
00:04:54.149 --> 00:04:58.742
A project pipeline that it gets deployed,
you get your Go code, it lints it,

85
00:04:58.742 --> 00:05:01.790
checks it out, compiles it,
deploys it, sweet.

86
00:05:01.790 --> 00:05:05.982
The command to do that is, and again, this
is a very simple version of the command

87
00:05:05.982 --> 00:05:09.267
without specifying operating systems or
anything like that.

88
00:05:09.267 --> 00:05:13.349
But we do go build-o,
then the name of the executable file,

89
00:05:13.349 --> 00:05:17.925
we'll just call it main, and
then where it's from, so main.go.

90
00:05:17.925 --> 00:05:21.992
If you run this, you can see
now we have this new file main,

91
00:05:21.992 --> 00:05:26.826
which we then can run like, so
you can see hello, front end masters.

92
00:05:26.826 --> 00:05:31.359
So yeah, if this is someone's first
interaction with making a binary file,

93
00:05:31.359 --> 00:05:34.495
one thing I really want to
highlight is if we go back and

94
00:05:34.495 --> 00:05:38.279
just changes hello to something like,
I changed this, right?

95
00:05:38.279 --> 00:05:43.617
And we save this Go back and we use Go run
main.go, we'll see the reflection here.

96
00:05:43.617 --> 00:05:45.821
If I just use the exaxing binary,

97
00:05:45.821 --> 00:05:49.367
we'll get hello front end
masters because the binary

98
00:05:49.367 --> 00:05:54.272
file will act as a snap shot of the code
at the time we use the built command.

99
00:05:54.272 --> 00:05:58.729
So if we want to rerun it, we would Go
built, again we run the same command.

100
00:05:58.729 --> 00:06:02.326
And now if you execute that binary file,
we'll have I change this.

101
00:06:02.326 --> 00:06:04.112
So just something to be aware of, right?

102
00:06:04.112 --> 00:06:07.040
When you're building, if you're kinda
scratching your head like, wait, wait,

103
00:06:07.040 --> 00:06:08.293
why is my change still not working?

104
00:06:08.293 --> 00:06:11.579
If maybe you skip the step in
bundling your app or zipping it up,

105
00:06:11.579 --> 00:06:15.116
deploying it to whatever it is you
deploy on, that could be a thing.

106
00:06:15.116 --> 00:06:17.343
So, just a little heads up.

