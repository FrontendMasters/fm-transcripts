[00:00:00]
>> Melkey: We have a few of these strucks, now we have person contact, employee. We're gonna kind of shift our focus on the person struck, because something I want to address is this topic of passing values by reference or copies of each other, right? So let's say we have this function called func, modify, person name, okay?

[00:00:23]
And let's say this function is going to accept a person type. So again, we can just do person and actually type in our person type here, cuz now, person, if we look at a definition, it's a type, it's a struck. It's fully something that we can use and define, right?

[00:00:40]
This function is not going to return anything, cuz we're gonna try and modify a value. So here, what I'm going to write, let me just make some more room here. Let's do format, print line name before and we can access the property of our struct. We can do person.name, like so, all right?

[00:01:02]
Here I'm gonna do modify person name, I'm gonna pass my person that we declared, and over here, what I'm going to do is person.name, we'll set this to milky. All right, we can put format.printline inside scope, new name. You put person.name. Just to demonstrate that we did in fact modify something in our code here, and then above, after we call the function in our parent function, the main function, we're say name after, okay?

[00:01:38]
So if I run this, you can see, name before is John, inside scope, new name is Milky, name after is John, okay? Because what's happening here is the person that we've passed in our modified person name function is a copy of the actual person that we declared all the way, okay, up here.

[00:02:02]
Okay, so when we change the property name of the copied person, this only exists in the scope of our function. Once the function is executed, this variable, this person copy is deleted, it is no longer there, and that memory is then reallocated or it's freed up. If you want to pass a value by reference, right, so if you actually want to call the address and modify the address of a variable, what we can do is change the type of modified person name to accept a pointer to person.

[00:02:39]
This is the syntax for pointers, it is this asterisk here, and this basically says, this function accepts person, but the type is a pointer to person, okay? And then, we can see here, we cannot use variable of type person as pointer person because we need to pass in the address of our person variable.

[00:03:04]
And to do this, we can use the, I believe this is the ampersand symbol, if I'm not mistaken, and this directly is the address of our person, okay? So now, because person here is a pointer to this person variable that we've created, once we modify person.name, we can simply go back, right?

[00:03:28]
If I save this now, from this, now the value persists because we are no longer creating a copy of person that lives within the scope of the function. This pointer concept, I'll make it brief, we could do x as 20, right? This, we're gonna use inferred type, we know x is 20, then we could do pointer, and we can do the address of x, okay, now we have these two variables, we have x, and we have a pointer to x.

[00:03:55]
If we do a format printf, we can say value of x is doing %d, okay? And address of x is gonna be %p. Let's break the line and then pass in x, and then pass in the pointer, all right? And if I save this, and I run it, you can see here value of x is 20 and the address, it's this address here.

[00:04:20]
If we want to then modify this value, we can dereference the value from our pointer using the following notation, we can use asterisk pointer ptr. So the name of the pointer right here that points to the address of where x was declared. And we can reset this to 30, okay, so here if I just copy this print statement, okay, we have two.

[00:04:46]
I'll do value of X and value of new X, and if I save this, you can see now we have modified the underlying value of where our pointer is pointing to, it's kinda tough sentence, but yeah. We have the ability to create variable, we have the ability to create a pointer to the exact address of same variable, and then we have the ability to dereference to extract the value associated with that memory address and modify like so.

[00:05:17]

>> Speaker 2: Let you change pointers like so, whether pointing to, could you segfault and go, or is that not possible?
>> Melkey: No, it can't change like the underlying address of a pointer. Now, before you wrap up, there's one more thing I want to showcase. So, I'm gonna focus on this function here.

[00:05:35]
This function, if you remember earlier when we had the question about structs and passing structs. If we look at this function, we are passing person struck for this function, which, okay, not the end of the world. But structs give us a very cool ability, which is to create methods on them, method receivers or methods on the actual structure itself.

[00:05:59]
Now, just as a quick refresher, we have this person struck that's defined, we're good, we know what that is, we can add fields if we want, and can access them, we should be familiar. Here now, what I'm going to do is here, right after the func keyword, I'm gonna do parentheses, and I'm gonna put person person person, okay?

[00:06:22]
And I'm gonna change this like so, now, what have I done? I have specifically said, modify person name is now a method on my person struck type, okay, so you can see on line 11 or relative 11, I get this error. Undefined name or undefined, modified person name, this function no longer exists because in the global scope of our app, modified person name no longer exists.

[00:06:53]
Modified person name the function only exists on our person struck, so what you can do is, modify this, let's remove the argument, and here we have person. We can do person.modifypersonname, we see that. So instead of calling this function kind of free range, it's now a method on our person's truck.

[00:07:17]
So every new variable we create, new object that we create that is a person struck will have access to the modified person named function to it, okay? And some syntax, some just sugar here, typically you wouldn't see person, person, you do something like P, so now you have p.name, and p.name here.

[00:07:41]
Instead of doing the full person and then person type, you do something like p or a or it's like a letter. And this component here, this bracket components called a method receiver, okay? This means, we have a method called the function name, and this is only existing on the data type, which is person.

[00:08:02]

>> Melkey: And we can be a little more, I don't know. And just change this like this, right?
>> Melkey: Just to be a little more pragmatic, I suppose, and then all the things should work as in intended.
>> Speaker 3: How carefully should I consider when to pass by copy or reference?

[00:08:29]

>> Melkey: Yeah, great question. So, how carefully should you consider it? I mean, you obviously don't want to relook at your entire code and rearchitecture anything? I'd say a rule of thumb is, a, if you're passing structs along your application through multiple different functions, multiple different fields, over and over again, that would be like a bit of a smell.

[00:08:55]
I'd probably start reconsidering, maybe these should be methods on this truck instead, maybe I should be doing a pointer reference to that struct, as opposed to just handling it as a copy. And one gotcha that I tried to explain earlier is the the the scope of function, like the closures of a function, right, if you are intending to modify a value outside, like if you make a helper function.

[00:09:21]
And that function has a specific role of modifying a value, and you call that function, you pass it a copy, then the value isn't gonna persist, right? You're gonna just get the same, nothing's gonna really happen, that's when you would use a pointer, if you want to persist changes, that would be a use case of, of why you would use references over passing values as copies.

[00:09:45]
Yeah, and just one little thing here, this is intended. Modify, you can now have two methods, obvious, but you can have two of the same methods on the same struct.
>> Speaker 4: Even if they have a different signature? Like if you had a different type or a different number of types, would that be allowed?

[00:10:01]

>> Melkey: As arguments or as the method receiver?
>> Speaker 4: Like you have, maybe I misunderstand, you have name string there.
>> Melkey: Yeah, and so let's say I have, let's just do something like that, right?
>> Speaker 5: Like overloads and-
>> Speaker 4: Yeah, overloading, as opposed to overriding.
>> Melkey: Let's do string.

[00:10:23]
No, you'd still, even if you change the type, let me just be a little more specific here. If you change the method signature, it still would error out because it still looks at the actual name implementation, you can't share it. But you can have if you change this person two, and you have this method receivers, person two that's gonna be fine.

[00:10:45]

>> Speaker 4: Right?
>> Melkey: Yeah.
>> Speaker 6: Does the capitalization rule apply to the fields as well?
>> Melkey: Yes it does. So if you have two functions, let's have a modified person and modify person age, for example. And one of them is declared with a m, where this one is declared a M.

[00:11:04]
The M would be exported through other packages, where the m will not be, it will only be within the scope of the package.

