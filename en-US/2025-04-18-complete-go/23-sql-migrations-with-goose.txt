[00:00:00]
>> Melkey: So kind of building off of everything. Everything we've done so far, we've created our backend, we've created our database. We have a few things running, it's looking good. And we have the connection, but it's not the strongest connection. I'm gonna introduce another really good package, and this is called Goose.

[00:00:21]
Goose is a database migration tool. It supports SQL migrations and Go functions. If anyone has ever dealt with migrations, kind of just going at it, that is a very unfortunate experience. Migrations are notorious for losing data, breaking databases, unfortunately, just taking souls. Because if you're not properly equipped, whether it is not making backups, not having the right tools, just misaligning on your infrastructure on your initial schemas, you can possibly run into some really nasty consequences.

[00:01:07]
So I found this tool a while ago, and this is recommended to me by a very, very brilliant engineer. It's called Goose, and it's a migration tool specifically for Go. And what migrations are, for those who may be unfamiliar with the lingo, a migration is used when we have to make a modification to the underlying schema structure.

[00:01:33]
So when you create a database and you have a schema, unless it's a user and it has a bunch of fields. But let's say down the road, your project blew up and a new feature came in that your users absolutely want, that requires you to modify that database schema.

[00:01:48]
Well, you can't just add a column, and then what? How do you run that? How do you run that SQL, right? Or if you have to add that column and it had breaking changes and you have to revert, what do you do? So Goose allows us the ability to migrate between versions of our database.

[00:02:06]
So it allows us more flexibility and an easier way to run SQL that does the underlying changes to our database, okay? Now to install Go or install Goose, it's a bit different. Previously, we did GoGet. GoGet is specifically used to just bring in a package into the scope of our project for our go.mod and our go.sum.

[00:02:30]
In this one, I would like you guys to install Goose. And the reason for that is, Goose is going to be applied to our binary, to our Go path bin directory, because we're going to use the Goose command. Okay, so I'm gonna copy this command over to the terminal.

[00:02:47]
So hopefully, it's a bit easier to see. I'm gonna clear this. So it's go install github.com/pressly/goose/v3/cmd/goose@latest, to get the latest version of Goose installed. I'm gonna go ahead and click Enter. So I already have installed. To make sure you have installed, please do Goose version.
>> Melkey: Or goose -version.

[00:03:16]

>> Melkey: Is anyone getting any zsh or script not found? Okay, so to solve that, is open up a terminal. First of all, you wanna make sure that it's installed correctly. So you can do the following command to check first if it's installed. It's a grep command for Goose.

[00:03:42]
So that make sure that exist in the go/bin. If you have that, that's a pretty easy fix. All you need to do is export or run this command, export PATH=$HOME/go/bin to the path. Export that into your zsh or bash script, whatever it is. Cool, and then did you get it to work, the Goose, it works?

[00:04:05]

>> Student: This version.
>> Melkey: Cool, is everyone else able to see goose- version? We're good, okay, sweet. We're gonna have to write some SQL. I know you guys want to do a Go course, but because we're doing a backend application SQL, you cannot get too far from SQL in the backend already.

[00:04:23]
Eventually, you're gonna have to do it. And we had a question earlier, if we're going to use RMS, no, we're gonna write this. We're gonna write this raw, all right? So at the root of your project, let's go ahead and make a new folder. Let's call this migrations, okay?

[00:04:39]
And the first file we're gonna create is fs.go. This fs.go file is going to look a little wonky. So first, let's go ahead and declare a migrations package. And over here, we're gonna import the embedded library, embed. And what we're going to do, we're specifically reserving this file for when we compile our application to binary.

[00:05:06]
Because what this tells us, fs is going to be file structure. And what we're going to tell our compiler is that there's going to be a bunch of SQL files that exist in this file structure we're going to create. And then when we use this downstream, we actually run our Goose migration up in our application, it's going to refer to the file structure here, okay?

[00:05:27]
So I'll show you what I mean. So we do this Go build command, so it's commented out, and then go:embed. And then here, we're going to do wildcard.sql. This is saying, find all of the SQL files that are going to exist in the directory path here. I'm gonna create a new variable, var FS, and it's gonna be embed.FS.

[00:05:52]
You can see it's a read-only collection of files, usually initialized with a go:embed directive. And that's it. That's all this file is going to do. We're going to capitalize it because we're gonna pull in FS. But essentially, we're going to be building a bunch of these files into this variable, okay?

[00:06:08]
Now comes the fun part. In migrations, add a new file. The syntax of this doesn't really matter. I'm gonna share with you what I use. I use 0000, four zeros, and 1, and it's gonna be called _users.sql.
>> Melkey: Okay, so here, we're gonna ship rate SQL, but first, we're gonna actually give it some Goose command, some Goose directive.

[00:06:36]
So we're gonna do comment, decide to do a comment SQL file, -- +goose Up, which says, on Up, do the following, not that. [LAUGH] We'll do +goose, let's say +goose StatementBegin, okay? And here we'll do CREATE TABLE IF NOT EXISTS. I'm gonna fix this extra space here. The name of the table is gonna be users, all right?

[00:07:10]
And here we're gonna define what that schema looks like. So we're gonna have a field called id BIGSERIAL. It's gonna act as our primary key, okay? I'm gonna have our username, it's gonna be a VARCHAR. I didn't put the most effort into thinking about the size of a username, I just put 50.

[00:07:35]
I'm sure there's more optimal ways of handling this, for me, I just put 50 here, and it's gonna be fine. I'm gonna make sure this is UNIQUE and NOT NULL. Meaning, every entry in this user SQL database is going to have to have a username, and that username cannot be a copy of someone else's.

[00:07:52]
We're also gonna have another field called email. I'll make this one a bit longer, it's a VARCHAR(255). Oops, okay? We can make this unique, NOT NULL as well. Here, we'll do password_hash. So this one's gonna be pretty important. We are not going to be storing the actual hash of, look, the actual password, right?

[00:08:22]
That's not what we're going to be doing at all. We're gonna be storing a hash representation of the password. I'll show this down the line. We don't have to worry about this too long, or yet. We'll make this 255.
>> Melkey: 255, and we'll make this NOT NULL, okay?

[00:08:43]
And then here you can just add any field you want, right? This could be just extra fields. I'm gonna put bio to make this a text. And I'm gonna create a created_at field. It's gonna be a TIMESTAMP WITH TIME ZONE.
>> Student: I'm gonna put DEFAULT to CURRENT_TIMESTAMP, which is a built-in function for Postgres.

[00:09:10]

>> Melkey: And we also have an updated_at, which can be the same thing, TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP. When you do that, make sure to end the statement.
>> Melkey: So StatementEnd for goose. And basically what that block does is, when we run goose Up, this is gonna be the SQL that gets run, depending on the version of Goose that we're currently running at.

[00:09:36]
And with every Up command, we just also need a goose Down command. So do goose Down. We'll do +goose StatementBegin. And this is pretty easy, we should do DROP TABLE users. Because if you think about it, this is the world before the users table exist, and we wanna go back to it, whatever that world looks like, okay?

[00:09:57]

>> Student: And here we'll do +goose StatementEnd.
>> Melkey: Cool, now, what I'd like you to do is just go ahead and copy this. I'm gonna make a new file. It's gonna be 00002, and this is gonna be called workout, so _workouts.sql. Go ahead and just paste this, cuz we're gonna repeat a lot of stuff and it doesn't make sense, you just copy the same thing over.

[00:10:21]
So +goose Up. Goose begins to be the same thing, CREATE TABLE IF NOT EXISTS, not users, but workouts. The id still gonna be BIGSERIAL PRIMARY KEY. Now this whole project is allowing users to create workouts. So if you've ever worked with relational database, a workout has to be tied back to that user.

[00:10:43]
Here's the thing, I'm gonna make this not obvious. We're gonna ignore that for now. The reason why is cuz I wanna focus on, first, getting everything working with workouts. And then we're gonna introduce the user, and then we can tie back into users owning workouts. So for right now, we're gonna make a mental little note.

[00:11:00]
A comment, I'm gonna put user_id. Our workout is gonna have a title, which would be VARCHAR(255) NOT NULL.
>> Melkey: Gonna have a description, which is going to be TEXT. Also gonna have a duration_minutes, which are going to be INTEGER NOT NULL. And we're gonna have one more field called calories_burned.

[00:11:34]
And this also gonna be an INTEGER, and we don't care if this is null. And then you can go ahead and remove the username, email, password_hash in bio fields. So double-check that your end result look something like this. You should have a workouts table id, the commented out user id, title, description, duration_minutes, calories_burned, and then the created_at, and updated_at timestamps.

[00:12:03]

>> Student: Do you wanna drop workouts instead of users?
>> Melkey: Yeah, we're gonna workouts.
>> Melkey: Okay, let's do that one more time. Go ahead and go take up your file, copy everything. And in migration, we're gonna make our last SQL file. Let's go four zeros, so 00003. And this one's gonna be called workout_entries.sql.

[00:12:39]

>> Melkey: Just paste this here. And I'm gonna explain the dynamic here of what a workout entry is versus a workout. So a workout is going to be an umbrella, high level description of the workout. It's gonna have the title, duration, and things of that nature. But a workout could have many different workouts in it.

[00:12:58]
Someone could be doing leg day. Could be the title, the workout. But then they could be squatting, they could be lunging, they could be running, they could do calf raises. They could do all these different things. And each of those is going to be an individual workout entry.

[00:13:12]
So from a schema perspective, we're gonna have a one to many relationship here. One workout could have many workout entries to them, right? And all those workout entries are gonna have only one relationship, back to a workout.
>> Melkey: Okay, so with that being said, CREATE TABLE IF NOT EXISTS instead of workout is gonna be workout_entries.

[00:13:38]

>> Melkey: Let's make some space here. The id is still going to be BIGSERIAL PRIMARY KEY. We're gonna have a new field called workout_id. It's gonna be BIGINT, all right, NOT NULL. And it's going to references, we're gonna pass in our workouts table, like so. And the value is going to be id.

[00:14:00]
So the workout_id here references the id of our workout. And we're gonna do ON DELETE CASCADE. Meaning, if we delete the workout from the workouts table, all of the work and entries that are binded to it via this relationship will also be deleted, okay? Next field we're gonna have is the exercise_name, should be a VARCHAR, we'll make it 255.

[00:14:25]
Make sure this is NOT NULL. We'll have sets. This will be an INTEGER NOT NULL. We'll have reps. Make sure this is an INTEGER. Okay, we'll have duration_seconds. We'll make this also an INTEGER.
>> Melkey: Also have weight for the individual workout. We'll make this a DECIMAL VALUE.
>> Melkey: We'll add an optional field for notes.

[00:15:00]
This could be also a TEXT. So if anyone has PR or personal record, or, I mean, personal best, whatever, they can add into the notes section. And then another field that's gonna be crucial is order_index. This is because if somebody has a workout with five different workout entries, we want these to be ordered to mimic exactly what that user did in the workout, right?

[00:15:21]
If you submit a form with all those entries, we wanna adhere to that, and not just jumble them around. I'll make this INTEGER NOT NULL. Then go ahead and copy that created_at TIMESTAMP. So at this point, your SQL table should look similar to this so we can ignore the +goose Down for now.

[00:15:42]
We'll save that to the end, okay? I think this is a cool, we're gonna add a constraint. It's gonna add a CONSTRAINT, whoops, CONSTRAINT on our Postgres. I'm gonna call this valid_workout_entry. And there's gonna be a CHECK. And in this CHECK, we wanna make sure that if somebody submits a workout_entry, this could either be them lifting or running or doing some sort of non-lifting exercise.

[00:16:13]
So for example, if you are going to be lifting weights, if you're gonna be bench pressing, that's gonna have reps, right, reps and weight. If you're gonna be running, though, really rep running, but you can do duration, you can tell us how long you ran for. So we're gonna make sure that there's a constraint that not a workout_entry can have both of these fields, and every workout_entry must have at least one of these fields.

[00:16:39]
So how that looks like is, (reps IS NOT NULL OR duration_seconds IS NOT NULL). And we'll make another constraint here, (reps IS NULL OR duration_seconds IS NULL).

