WEBVTT

1
00:00:00.000 --> 00:00:02.104
&gt;&gt; Melkey: We're gonna do one more thing.

2
00:00:02.104 --> 00:00:05.475
You know those annoying format print line
errors I've been asking you guys to put?

3
00:00:05.475 --> 00:00:06.930
Those are not great.

4
00:00:06.930 --> 00:00:08.583
That's very, very bad error handling.

5
00:00:08.583 --> 00:00:10.645
It works when it has to, but

6
00:00:10.645 --> 00:00:15.859
we can make our jobs of error debugging
a little bit nicer and easier.

7
00:00:15.859 --> 00:00:21.413
So we can go back to our app.go, and
when we're declaring the workout handler,

8
00:00:21.413 --> 00:00:24.941
we're gonna give it a new argument logger,
okay?

9
00:00:24.941 --> 00:00:28.046
Right now it's gonna say too many
arguments in the call to our constructor,

10
00:00:28.046 --> 00:00:29.028
don't worry about it.

11
00:00:31.333 --> 00:00:34.425
&gt;&gt; Melkey: And we're actually going
to leverage our logger, the one we

12
00:00:34.425 --> 00:00:38.434
declared in the very first kind of
submodule, to write error messages for us.

13
00:00:38.434 --> 00:00:42.400
So now,
if we go back to our workout handler.

14
00:00:42.400 --> 00:00:46.934
Let me go all the way back up,
this workout handler struck no

15
00:00:46.934 --> 00:00:51.213
longer is just going to be
accepting the workout store.

16
00:00:51.213 --> 00:00:56.170
Now add logger,
which can be of type log.logger.

17
00:01:00.830 --> 00:01:03.999
&gt;&gt; Melkey: In our constructor
method it's gonna take logger,

18
00:01:03.999 --> 00:01:08.117
it's gonna be that argument that
we just passed in, log.logger.

19
00:01:08.117 --> 00:01:12.667
And then our actual return,
we can put logger as logger, like so.

20
00:01:12.667 --> 00:01:17.036
So here comes the fun part,
we'll be rewriting a lot of code.

21
00:01:17.036 --> 00:01:20.619
You can hate me,
that's fine, I'll take it.

22
00:01:20.619 --> 00:01:25.506
But I want to show how we can
really get something working,

23
00:01:25.506 --> 00:01:28.315
and then how we can improve on it.

24
00:01:28.315 --> 00:01:32.337
All right, so here we're gonna
start with the HandleGetWorkupByID.

25
00:01:32.337 --> 00:01:38.421
Everything here, from paramsWorkoutID
to the workoutID return we can delete.

26
00:01:38.421 --> 00:01:43.464
And here, what we're going to do instead

27
00:01:43.464 --> 00:01:49.519
is define workoutID err
as utils.ReadIDParam,

28
00:01:49.519 --> 00:01:52.413
I'm gonna pass it in r.

29
00:01:52.413 --> 00:01:56.299
Okay, so we're gonna use
the utility function we have here,

30
00:01:56.299 --> 00:01:57.803
we can check the error.

31
00:01:57.803 --> 00:02:01.315
So if err does not equal to nil,
we can go ahead and

32
00:02:01.315 --> 00:02:05.799
write our wh, our logger like so,
I'm gonna leverage this.

33
00:02:05.799 --> 00:02:09.934
We're gonna do Printf, and
now this print is gonna be for us.

34
00:02:09.934 --> 00:02:10.889
I'm gonna make it a little bit nice.

35
00:02:10.889 --> 00:02:12.865
I'm gonna do error, all right?

36
00:02:12.865 --> 00:02:19.193
We can do readIDParam,
something like this,

37
00:02:19.193 --> 00:02:23.747
%v, and I put the error like so.

38
00:02:23.747 --> 00:02:26.779
And we can also leverage
our new writeJSON function.

39
00:02:26.779 --> 00:02:31.472
So we can do utils.writeJSON(w can pass

40
00:02:31.472 --> 00:02:36.843
an http status, so StatusBadRequest, okay?

41
00:02:36.843 --> 00:02:41.643
And then we can use
utils.Envelope like so, and

42
00:02:41.643 --> 00:02:46.676
we can just say error and
then pass in the key invalid

43
00:02:46.676 --> 00:02:50.909
workout id and make sure we return, okay?

44
00:02:50.909 --> 00:02:56.212
And so go ahead and copy those two lines,
the logger line and the writeJSON line.

45
00:02:56.212 --> 00:03:01.460
And now, when we call or check errors,
we can simply use that style,

46
00:03:01.460 --> 00:03:06.632
that blueprint, that schema,
if you will, to handle our errors.

47
00:03:06.632 --> 00:03:12.868
So here, error,
which can be getWorkoutByID.

48
00:03:12.868 --> 00:03:17.148
So that tells us exactly what
the error is going to be, okay?

49
00:03:17.148 --> 00:03:22.879
Otherwise, instead of StatusBadRequest,
http.StatusInternalServerError.

50
00:03:27.369 --> 00:03:32.076
&gt;&gt; Melkey: Okay, and in the envelope after
error, we can just say internal server

51
00:03:32.076 --> 00:03:36.083
error, because remember,
this is gonna be for our client.

52
00:03:36.083 --> 00:03:40.345
Our client doesn't necessarily
need to know what's

53
00:03:40.345 --> 00:03:43.003
happening from our own back end.

54
00:03:43.003 --> 00:03:46.961
If our back end is breaking,
that's on us to log and figure out.

55
00:03:46.961 --> 00:03:50.913
We don't need to send every error message
back to the caller, especially users.

56
00:03:54.165 --> 00:03:58.268
&gt;&gt; Melkey: You can, of course, be more
explicit and maybe provide them an error

57
00:03:58.268 --> 00:04:02.465
code that they can then go to customer
support or something like that.

58
00:04:02.465 --> 00:04:07.255
But that kind of be outside the scope
of what we're doing here, all right?

59
00:04:07.255 --> 00:04:10.951
And then we can just simply delete all
this stuff from the get workout ID at

60
00:04:10.951 --> 00:04:11.625
the bottom.

61
00:04:11.625 --> 00:04:18.043
We can, again, utilize our new writeJSON,
cuz it's not just for handling errors,

62
00:04:18.043 --> 00:04:23.771
we can do utils.WriteJSON, pass in
our w and then here we http.StatusOK.

63
00:04:26.752 --> 00:04:28.967
&gt;&gt; Melkey: We can use utils.Envelope, and

64
00:04:28.967 --> 00:04:33.484
here we can see some of the cool
things of that interface or any type.

65
00:04:33.484 --> 00:04:38.837
We can just put workout, and
here just put workout like so.

66
00:04:38.837 --> 00:04:42.866
So it's a nice little flexible
function that we have for

67
00:04:42.866 --> 00:04:45.705
just handling JSON back to our client.

68
00:04:45.705 --> 00:04:50.867
Let's move on to the create workout.

69
00:04:50.867 --> 00:04:55.331
So again, I'm just gonna go ahead and
copy that logger in the utils print.

70
00:04:55.331 --> 00:04:59.597
And right here,
right underneath the decoder,

71
00:04:59.597 --> 00:05:02.934
we can go ahead and paste this like so.

72
00:05:02.934 --> 00:05:11.194
The first logger error could be
ERROR: decodingCreateWorkout.

73
00:05:11.194 --> 00:05:13.739
Again, this is for us.

74
00:05:13.739 --> 00:05:18.954
And here we can say invalid request sent,

75
00:05:18.954 --> 00:05:22.982
and this is back to our callers.

76
00:05:22.982 --> 00:05:29.400
Let's go ahead and take this, put it
down in underneath the created workout.

77
00:05:29.400 --> 00:05:35.372
So when we call our handler workout
store and the create workout,

78
00:05:35.372 --> 00:05:39.506
here the error mesh
would be CreateWorkout.

79
00:05:39.506 --> 00:05:41.874
And there's a bit of a pattern here.

80
00:05:41.874 --> 00:05:44.989
So the error message is followed by,
typically,

81
00:05:44.989 --> 00:05:49.975
what is the function calling that workout,
whatever is more flexible for you.

82
00:05:49.975 --> 00:05:53.093
There's this kind of pattern set,
but nothing set in stone.

83
00:05:53.093 --> 00:05:56.672
I'd always recommend do
what's most obvious for you.

84
00:05:56.672 --> 00:06:00.620
Here, we can do StatusInternalServerError,
cuz if something goes down and

85
00:06:00.620 --> 00:06:04.277
I was creating it, which is back to
our database layer, that's on us.

86
00:06:04.277 --> 00:06:08.514
So here we can just say
"Failed to create workout".

87
00:06:12.505 --> 00:06:17.219
&gt;&gt; Melkey: All right, and
then here instead of doing the header and

88
00:06:17.219 --> 00:06:24.153
the encoder, what we can do is
utils.writeJSON(w, http.StatusCreated).

89
00:06:29.206 --> 00:06:34.123
&gt;&gt; Melkey: Like so,
can use utils.Envelope.

90
00:06:34.123 --> 00:06:39.551
Okay, we can do workout
as the createdWorkout.

91
00:06:39.551 --> 00:06:43.892
Let's go ahead and finish up the update
workout and then the delete workout.

92
00:06:43.892 --> 00:06:48.467
So in the handle update,
we have, again, those params, so

93
00:06:48.467 --> 00:06:52.707
we can just simply go back to
handle workout right here.

94
00:06:52.707 --> 00:06:59.058
Let's go ahead and just delete
all that and declare workoutID,

95
00:06:59.058 --> 00:07:04.350
okay, and
error is going to be utils.ReadIDParam,

96
00:07:04.350 --> 00:07:08.361
pass in the pointer r, check the error.

97
00:07:13.785 --> 00:07:17.829
&gt;&gt; Melkey: All right, I'm gonna just go
scroll back up where I already wrote this,

98
00:07:17.829 --> 00:07:19.236
so something like this.

99
00:07:34.699 --> 00:07:38.241
&gt;&gt; Melkey: Okay, and
then when we fetch the workout, so

100
00:07:38.241 --> 00:07:41.793
we can just rename to
getWorkoutByID error.

101
00:07:45.763 --> 00:07:51.764
&gt;&gt; Melkey: You can make this
StatusInternalServerError, okay?

102
00:07:51.764 --> 00:07:57.889
And in the envelope, we can do error and
can do internal server error, okay?

103
00:07:57.889 --> 00:08:01.691
Now, again, you can feel free to modify
those error message to whatever you want.

104
00:08:01.691 --> 00:08:06.805
There's lots of flexibility with
the utils.WriteJSON utility function.

105
00:08:06.805 --> 00:08:11.145
If you wanna be more explicit to your
caller, more explicit to yourself,

106
00:08:11.145 --> 00:08:12.271
feel free to do so.

107
00:08:12.271 --> 00:08:14.838
I'm just taking a bit of a liberty here.

108
00:08:14.838 --> 00:08:19.220
I'm just kind of using the internal
server error as a catch-all statement.

109
00:08:19.220 --> 00:08:20.918
Is it the best user experience?

110
00:08:20.918 --> 00:08:23.722
We could probably debate that, but

111
00:08:23.722 --> 00:08:28.593
we can explore different ways
to make it better down the line.

112
00:08:28.593 --> 00:08:31.541
So we have a few more spots
we need to handle our errors.

113
00:08:31.541 --> 00:08:36.252
So if we go into the decode here,

114
00:08:36.252 --> 00:08:43.066
you can see ERROR: decodingUpdateRequest.

115
00:08:43.066 --> 00:08:47.199
Instead of internal server error,
this is is gonna be StatusBadRequest.

116
00:08:51.144 --> 00:08:57.642
&gt;&gt; Melkey: Okay, I'm gonna say
invalid request payload like so.

117
00:08:57.642 --> 00:09:04.402
And then in updateWorkout, you can go
ahead and say error updating the workout.

118
00:09:04.402 --> 00:09:08.240
This would be
StatusInternalServerError once again.

119
00:09:13.589 --> 00:09:18.826
&gt;&gt; Melkey: Like so, and then we can remove
these header types at the bottom here and

120
00:09:18.826 --> 00:09:23.559
again leverage our utils.Envelope,
but utils.WriteJSON.

121
00:09:23.559 --> 00:09:28.301
We'll say (w, http.StatusOK,

122
00:09:28.301 --> 00:09:31.309
utils.Envelope).

123
00:09:33.316 --> 00:09:37.183
&gt;&gt; Melkey: You can put workout, and
here you can put the existingWorkout.

124
00:09:37.183 --> 00:09:39.127
So we can do the rest for delete as well.

125
00:09:39.127 --> 00:09:41.592
I'll leave that up to you because
it's repeating the same thing.

126
00:09:41.592 --> 00:09:46.392
But this is just a way for us to handle
our errors, and specifically our JSON.

127
00:09:46.392 --> 00:09:52.532
And I wanna demonstrate that, so
we have the go server now fully running.

128
00:09:52.532 --> 00:09:57.647
If we go back to our post notes here,
so we finished 1.6.

129
00:09:57.647 --> 00:10:00.451
There's this new post
notes text section 1.8,

130
00:10:00.451 --> 00:10:03.253
and this is simply a summary
of the co-request, so

131
00:10:03.253 --> 00:10:07.049
we don't need to have them repeated,
but I think it's just easier.

132
00:10:07.049 --> 00:10:09.759
So here I'm gonna copy this post.

133
00:10:09.759 --> 00:10:13.086
This is the same one for creating, right?

134
00:10:13.086 --> 00:10:16.519
And in here, all I want to
demonstrate is how the JSON looks.

135
00:10:16.519 --> 00:10:18.859
So if I paste this and I click Enter,

136
00:10:18.859 --> 00:10:22.070
you can now see our
returnJSON looks much nicer.

137
00:10:22.070 --> 00:10:23.576
It's not just this blob at the bottom and

138
00:10:23.576 --> 00:10:25.358
you kind of looking like,
what does this mean?

139
00:10:25.358 --> 00:10:25.881
What is this?

140
00:10:25.881 --> 00:10:27.428
I don't really understand this.

141
00:10:27.428 --> 00:10:29.831
It's much nicer for
us to parse and release.

142
00:10:29.831 --> 00:10:32.746
You can see here's a request and
here are the values.

143
00:10:32.746 --> 00:10:38.156
And actually noticing "id": 0,
that is probably because we're not return

144
00:10:38.156 --> 00:10:43.177
the id from our entry, so we can modify
that, or even remove it entirely.

145
00:10:43.177 --> 00:10:45.460
So we can go ahead and do that.

146
00:10:45.460 --> 00:10:50.292
So here, if we go to workout-store, and

147
00:10:50.292 --> 00:10:53.890
this was in the Create method.

148
00:10:56.145 --> 00:11:02.487
&gt;&gt; Melkey: So here we're returning ID.

149
00:11:31.433 --> 00:11:35.066
&gt;&gt; Melkey: It's a bit odd,
I'm not too sure why it's actually empty.

150
00:11:38.675 --> 00:11:42.191
&gt;&gt; Melkey: Returning id,
let me just double-check.

151
00:11:42.191 --> 00:11:44.305
We'll explore that later.

152
00:11:44.305 --> 00:11:47.642
So the worker does, in fact, have the id.

153
00:11:47.642 --> 00:11:50.402
I'll debug why id here is 0.

154
00:11:50.402 --> 00:11:51.456
I'll make a quick fix for it.

155
00:11:51.456 --> 00:11:54.610
It's probably some typo going on, or

156
00:11:54.610 --> 00:12:00.136
maybe I'm not having that field
correctly in the actual entries.

157
00:12:00.136 --> 00:12:04.680
But the main point is that
now our JSON is legible and

158
00:12:04.680 --> 00:12:09.552
we can use this more accurately
in the rest of our code.

159
00:12:09.552 --> 00:12:11.978
And we can even do
something like a get now.

160
00:12:11.978 --> 00:12:15.172
So if you go back into the post_notes and
then here.

161
00:12:15.172 --> 00:12:17.258
So we just curled and created a workout.

162
00:12:17.258 --> 00:12:22.874
If we just do a simple GET, I'm gonna
go ahead and copy this and paste it.

163
00:12:22.874 --> 00:12:26.993
You can see we actually have
the work that's working.

164
00:12:26.993 --> 00:12:31.816
Yes, so GET is actually responding
with the appropriate ids,

165
00:12:31.816 --> 00:12:33.731
but to create isn't so.

166
00:12:33.731 --> 00:12:34.820
Gotta figure out why that is.

167
00:12:34.820 --> 00:12:38.053
But yeah, now we have much better JSON,
much better area handling as well.

