WEBVTT

1
00:00:00.150 --> 00:00:02.192
&gt;&gt; Melkey: We're gonna do one more thing.

2
00:00:02.192 --> 00:00:04.159
So you know, there's annoying format,
print, line errors.

3
00:00:04.159 --> 00:00:06.995
I've been asking you guys
to put those are not great.

4
00:00:06.995 --> 00:00:08.551
That's very, very bad error handling.

5
00:00:08.551 --> 00:00:10.667
It works when it has to, but

6
00:00:10.667 --> 00:00:16.013
we can make our jobs of error debugging
a little bit nicer and easier.

7
00:00:16.013 --> 00:00:19.907
So we can go back to our app.go.

8
00:00:19.907 --> 00:00:22.423
And when we're declaring
the workout handler,

9
00:00:22.423 --> 00:00:24.826
we're give it a new argument loggerm,
okay?

10
00:00:24.826 --> 00:00:27.871
Right now, it's gonna say too many
arguments in the call to our constructor.

11
00:00:27.871 --> 00:00:29.522
Don't worry about it.

12
00:00:31.348 --> 00:00:34.953
&gt;&gt; Melkey: And we're actually going to
leverage our logger, the one we declared

13
00:00:34.953 --> 00:00:38.513
in the very first kind of submodule,
to write error messages for us.

14
00:00:38.513 --> 00:00:42.186
So now if you go back to
our workout handler and

15
00:00:42.186 --> 00:00:46.730
we go all the way back up,
this workout handler stroke no

16
00:00:46.730 --> 00:00:51.297
longer is just going to be
accepting the workout store.

17
00:00:51.297 --> 00:00:56.388
We can now add logger which
can be of type log.logger.

18
00:01:00.892 --> 00:01:02.495
&gt;&gt; Melkey: And now our constructor method.

19
00:01:02.495 --> 00:01:03.769
It's gonna take logger.

20
00:01:03.769 --> 00:01:08.737
It's gonna be that argument that
we just passed in, log.logger.

21
00:01:08.737 --> 00:01:13.387
And then our actual return,
we can put logger as logger like so.

22
00:01:13.387 --> 00:01:15.193
So here comes the fun part.

23
00:01:15.193 --> 00:01:17.643
We're gonna be rewriting a lot of code.

24
00:01:17.643 --> 00:01:19.823
You can hate me, that's fine.

25
00:01:19.823 --> 00:01:20.618
I'll take it.

26
00:01:20.618 --> 00:01:25.298
But I want to show how we can
really get something working and

27
00:01:25.298 --> 00:01:28.583
then how we can improve on it, all right?

28
00:01:28.583 --> 00:01:32.767
So here we're gonna start with the handle,
get workup by ID.

29
00:01:32.767 --> 00:01:38.790
Everything here, from paramsworkoutID
to the workIDreturn we can delete.

30
00:01:38.790 --> 00:01:43.690
And here what we're going to do instead is

31
00:01:43.690 --> 00:01:49.292
define workoutID err as utils.readIDParam.

32
00:01:49.292 --> 00:01:52.482
I'm going to pass it in R.

33
00:01:52.482 --> 00:01:56.944
Okay, so we're going to use
the utility function we have here.

34
00:01:56.944 --> 00:01:57.712
We can check the error.

35
00:01:57.712 --> 00:02:01.930
So if error does not equal to nil,
we can go ahead and

36
00:02:01.930 --> 00:02:04.787
write our wh, our logger like so.

37
00:02:04.787 --> 00:02:06.128
I'm gonna leverage this.

38
00:02:06.128 --> 00:02:09.851
We're gonna do printf, and
now this print is gonna be for us.

39
00:02:09.851 --> 00:02:11.133
I'm gonna make it a little bit nice.

40
00:02:11.133 --> 00:02:12.938
I'm going to do error, right?

41
00:02:12.938 --> 00:02:18.907
We can do readIDParam,
something like this,

42
00:02:18.907 --> 00:02:23.810
module V, and I put the error like so.

43
00:02:23.810 --> 00:02:26.892
And we can also leverage
our new writeJSON function.

44
00:02:26.892 --> 00:02:31.917
So we're gonna do
utils.write JSON w to pass

45
00:02:31.917 --> 00:02:36.950
httpStatus, so StatusBadRequest, okay?

46
00:02:36.950 --> 00:02:41.627
And then we can use
utils.envelope like so, and

47
00:02:41.627 --> 00:02:46.531
we can just say error and
then pass in the key invalid

48
00:02:46.531 --> 00:02:50.888
workout id, and make sure we return, okay?

49
00:02:50.888 --> 00:02:57.057
And so go ahead and copy those two lines,
the logger line and the right JSON line,

50
00:02:57.057 --> 00:03:02.137
and now when we call or check errors,
we can simply use that style,

51
00:03:02.137 --> 00:03:06.698
that blueprint,
that scheme of fuel to handle our errors.

52
00:03:06.698 --> 00:03:12.912
So here error it's going
to be getWorkoutbyID.

53
00:03:12.912 --> 00:03:17.179
So that tells us exactly what
the error is going to be, okay?

54
00:03:17.179 --> 00:03:22.515
Otherwise, instead of status as being
http.statusInternalServerError.

55
00:03:27.368 --> 00:03:30.744
&gt;&gt; Melkey: Okay, and
in the envelope after error,

56
00:03:30.744 --> 00:03:34.032
we can just say internal server error.

57
00:03:34.032 --> 00:03:35.870
Because remember,
this is gonna be for our client.

58
00:03:35.870 --> 00:03:40.222
Our client doesn't necessarily
need to know what's

59
00:03:40.222 --> 00:03:42.936
happening from our own backend.

60
00:03:42.936 --> 00:03:46.969
If our backend is breaking,
that's on us to log and figure out.

61
00:03:46.969 --> 00:03:51.958
We don't need to send every error message
back to the caller, especially users.

62
00:03:54.183 --> 00:03:58.269
&gt;&gt; Melkey: You can, of course, be more
explicit and maybe provide them an error

63
00:03:58.269 --> 00:04:02.433
code that they can then go to customer
support or something like that.

64
00:04:02.433 --> 00:04:07.137
But that kinda be outside the scope
of what we're doing here, all right?

65
00:04:07.137 --> 00:04:10.802
And then we can just simply delete all
this stuff from the getWorkoutID at

66
00:04:10.802 --> 00:04:11.472
the bottom.

67
00:04:11.472 --> 00:04:15.337
We can again, utilize our new WriteJSON,
cuz it's not just for handling errors.

68
00:04:15.337 --> 00:04:20.121
We can do utils.WriteJSON,
pass in our w, and

69
00:04:20.121 --> 00:04:23.476
then here we http.Status,Ok.

70
00:04:27.029 --> 00:04:29.130
&gt;&gt; Melkey: We can use utils.envelope, and

71
00:04:29.130 --> 00:04:33.413
here we can see some of the cool
things of that interface or any type.

72
00:04:33.413 --> 00:04:35.265
We can just put workout.

73
00:04:35.265 --> 00:04:37.385
And here just put workout like so.

74
00:04:37.385 --> 00:04:42.508
So it's a nice little flexible
function that we have for

75
00:04:42.508 --> 00:04:46.107
just handling JSON back to our client.

76
00:04:46.107 --> 00:04:50.768
Let's move on to the CreateWorkout.

77
00:04:50.768 --> 00:04:55.523
So again, I'm just gonna go ahead and
copy that logger in the utils print.

78
00:04:55.523 --> 00:04:59.691
And right here,
right underneath the decoder,

79
00:04:59.691 --> 00:05:02.954
we can go ahead and paste this like so.

80
00:05:02.954 --> 00:05:11.043
The first logger error could be
error decodingCreateWorkout.

81
00:05:11.043 --> 00:05:12.602
Again, this is for us.

82
00:05:15.201 --> 00:05:19.413
&gt;&gt; Melkey: And
here we can say invalid request sent.

83
00:05:19.413 --> 00:05:23.150
And this is back to our colors.

84
00:05:23.150 --> 00:05:29.329
Let's go ahead and take this, put it
down in underneath the created workout.

85
00:05:29.329 --> 00:05:35.569
So when we call our handler workout
store and the CreateWorkout here,

86
00:05:35.569 --> 00:05:39.494
the error message would be createworkout.

87
00:05:39.494 --> 00:05:41.734
And there's a bit of a pattern here.

88
00:05:41.734 --> 00:05:45.178
So the error message is followed by,
typically, what is

89
00:05:45.178 --> 00:05:49.869
like the function calling that workout,
whatever is more flexible for you.

90
00:05:49.869 --> 00:05:52.636
There's this kind of pattern set,
but nothing set in stone.

91
00:05:52.636 --> 00:05:56.695
I'd always recommend do
what's most obvious for you.

92
00:05:56.695 --> 00:06:00.760
Here, we can do statusInternalServerError
cuz if something goes down and

93
00:06:00.760 --> 00:06:03.480
I was creating it,
which is back to our database.

94
00:06:03.480 --> 00:06:04.178
That's on us.

95
00:06:04.178 --> 00:06:08.065
So here we can just say
failed to create workout.

96
00:06:12.578 --> 00:06:17.646
&gt;&gt; Melkey: All right, and then here,
instead of doing the header and

97
00:06:17.646 --> 00:06:22.198
the encoder,
what we can do is utils.WriteJSON w,

98
00:06:22.198 --> 00:06:30.499
httpStatusCreated
&gt;&gt; Melkey: Like so.

99
00:06:30.499 --> 00:06:34.999
Use utils.Envelope, okay?

100
00:06:34.999 --> 00:06:40.202
We can do workout as the created workout.

101
00:06:40.202 --> 00:06:44.307
&gt;&gt; Speaker 2: We're not checking
the errors that WriteJSON could have, but

102
00:06:44.307 --> 00:06:45.783
would she default to?

103
00:06:45.783 --> 00:06:47.122
We could not write to the-
&gt;&gt; Melkey: No,

104
00:06:47.122 --> 00:06:48.237
you can definitely check the errors.

105
00:06:48.237 --> 00:06:49.675
I'm being a little lazy here.

106
00:06:49.675 --> 00:06:51.323
You can definitely check the errors this.

107
00:06:51.323 --> 00:06:56.089
This is actually an example of go, forcing
the program, or the engineer to check

108
00:06:56.089 --> 00:07:00.295
the errors cuz as you just noticed
WriteJSON, it returns an error, but

109
00:07:00.295 --> 00:07:05.298
we're not checking it, and I'm making
that decision, which is a wrong decision.

110
00:07:05.298 --> 00:07:08.218
I'm kind of doing that just
to save time a bit for

111
00:07:08.218 --> 00:07:11.730
kind of the course and
the time constraints we have here.

112
00:07:11.730 --> 00:07:16.692
But like doing this right, error is utils.

113
00:07:16.692 --> 00:07:22.722
And then check if error does not equal,
oops, it's not equal to nil.

114
00:07:22.722 --> 00:07:26.353
And then, handle your error here,

115
00:07:26.353 --> 00:07:30.962
something you definitely can and
should do.

116
00:07:30.962 --> 00:07:36.096
&gt;&gt; Speaker 3: Would but would she default
it to, Okay, if there was no SAS code

117
00:07:36.096 --> 00:07:41.040
written to the header, would it be,
this is a 400 or just,

118
00:07:41.040 --> 00:07:45.481
is there some sort of catch, I guess, in-
&gt;&gt; Melkey: Well,

119
00:07:45.481 --> 00:07:49.181
the way you handle your
error at this point,

120
00:07:49.181 --> 00:07:54.294
you would probably specify
a separate request to your user.

121
00:07:54.294 --> 00:07:57.660
You wouldn't use the WriteJSON
to write back to the header.

122
00:07:57.660 --> 00:08:01.651
You'd make something like again,
like an http error, something like that.

123
00:08:01.651 --> 00:08:04.472
The one we showed before, just fix this.

124
00:08:04.472 --> 00:08:10.042
You do http error, and you put W and

125
00:08:10.042 --> 00:08:17.358
then could not write back to client,
right?

126
00:08:17.358 --> 00:08:19.608
And then you put in any error you want.

127
00:08:19.608 --> 00:08:22.381
So in this case, from my understanding,

128
00:08:22.381 --> 00:08:26.835
this would be an internal server error,
which is 500, right?

129
00:08:26.835 --> 00:08:32.192
And again,
you do this if error does not equal to no.

130
00:08:42.155 --> 00:08:43.485
&gt;&gt; Melkey: Something like that, right?

131
00:08:43.485 --> 00:08:45.141
And even in this so
you cannot write back to client, but

132
00:08:45.141 --> 00:08:46.151
something was created, right?

133
00:08:46.151 --> 00:08:50.167
So you have to get kind of creative
with how you want to handle that,

134
00:08:50.167 --> 00:08:53.124
how you want to communicate
back to your caller.

135
00:08:53.124 --> 00:08:55.353
Give it up to you.

136
00:08:55.353 --> 00:08:58.193
I just don't wanna keep writing
if err does not equal the no,

137
00:08:58.193 --> 00:09:00.768
cuz I think writing it a decent
amount of time already.

138
00:09:00.768 --> 00:09:01.582
&gt;&gt; Speaker 3: Yeah.

139
00:09:01.582 --> 00:09:04.469
&gt;&gt; Melkey: Let's go ahead and
finish up the updateWorkout and

140
00:09:04.469 --> 00:09:05.953
then the deleteWorkout.

141
00:09:05.953 --> 00:09:09.567
So in the handleUpdate,
we have again those params.

142
00:09:09.567 --> 00:09:14.862
So we can just simply go back
to handleWorkout right here.

143
00:09:14.862 --> 00:09:20.892
Go ahead and just delete all that and
declare workoutID,

144
00:09:20.892 --> 00:09:26.545
okay, and
error is going to be utils.readIDparam,

145
00:09:26.545 --> 00:09:31.208
pass in the pointer, ar, check the error.

146
00:09:36.015 --> 00:09:39.414
&gt;&gt; Melkey: All right, I'm going to just go
scroll back up where I already wrote this.

147
00:09:39.414 --> 00:09:41.554
So something like this

148
00:09:56.848 --> 00:09:57.722
&gt;&gt; Melkey: Okay, and

149
00:09:57.722 --> 00:10:04.240
then when we fetch the workout, so we
can just rename to getWorkoutByID error.

150
00:10:07.924 --> 00:10:13.817
&gt;&gt; Melkey: We can make this status
internal server error, okay?

151
00:10:13.817 --> 00:10:15.201
And in the envelope, we can do error.

152
00:10:15.201 --> 00:10:19.994
We can do internal server error, okay?

153
00:10:19.994 --> 00:10:24.029
Now, again, you can feel free to modify
those error message to whatever you want.

154
00:10:24.029 --> 00:10:28.867
There's lots of flexibility with
the utils.WriteJSON utility function.

155
00:10:28.867 --> 00:10:33.243
If you wanna be more explicit to your
caller, more explicit to yourself,

156
00:10:33.243 --> 00:10:34.383
feel free to do so.

157
00:10:34.383 --> 00:10:36.997
I'm just taking a bit of a liberty here.

158
00:10:36.997 --> 00:10:41.130
I'm just kinda using the internal
server error as a catch-all statement.

159
00:10:41.130 --> 00:10:45.923
This is the best user experience,
we could probably debate that,

160
00:10:45.923 --> 00:10:50.643
but we can explore different ways
to make it better down the line.

161
00:10:50.643 --> 00:10:53.621
So we have a few more spots
we need to handle our errors.

162
00:10:53.621 --> 00:10:57.549
So if we go into the decode here,

163
00:10:57.549 --> 00:11:02.931
you can see error: decodingUpdateRequest

164
00:11:02.931 --> 00:11:07.296
instead of InternalServerError,

165
00:11:07.296 --> 00:11:11.235
this can be StatusBadRequest.

166
00:11:13.246 --> 00:11:19.647
&gt;&gt; Melkey: Okay, invalid request,
payload like so.

167
00:11:19.647 --> 00:11:22.606
And then in updateWorkout,
you can go ahead.

168
00:11:22.606 --> 00:11:26.527
And say, error updating the workout.

169
00:11:26.527 --> 00:11:30.817
This would be statusInternalServerError,
once again,

170
00:11:35.714 --> 00:11:39.106
&gt;&gt; Melkey: Like so, and then we can remove

171
00:11:39.106 --> 00:11:44.715
these header types at the bottom here,
and again,

172
00:11:44.715 --> 00:11:50.456
leverage our utils
envelope.utils.WriteJSON,

173
00:11:50.456 --> 00:11:55.291
say w, httpStatusOK, utils.envelope.

174
00:11:55.291 --> 00:11:59.177
You can put workout, and
here you can put the existingWorkout.

175
00:11:59.177 --> 00:12:01.079
So we can do the rest for delete as well.

176
00:12:01.079 --> 00:12:03.528
I'll leave that up to you because
it's repeating the same thing.

177
00:12:03.528 --> 00:12:08.496
But this is just a way for us to handle
our errors, and specifically our JSON.

178
00:12:08.496 --> 00:12:09.611
And I wanna demonstrate that.

179
00:12:09.611 --> 00:12:14.529
So we have the Go server
now fully running.

180
00:12:14.529 --> 00:12:18.128
And if we go back to our post notes here.

181
00:12:18.128 --> 00:12:19.685
So we finished 1.6.

182
00:12:19.685 --> 00:12:24.532
This is new post notes text section 1.8,
and this is simply a summary of

183
00:12:24.532 --> 00:12:28.297
the CO request, so
we don't need to have them repeated.

184
00:12:28.297 --> 00:12:29.082
But I think it's just easier.

185
00:12:29.082 --> 00:12:31.885
So here I'm gonna copy this post.

186
00:12:31.885 --> 00:12:34.944
There's the same one for creating, right?

187
00:12:34.944 --> 00:12:38.711
And here, all I want to
demonstrate is how the JSON looks.

188
00:12:38.711 --> 00:12:40.014
So if I paste this and

189
00:12:40.014 --> 00:12:44.169
I click Enter, you can now see
our Return JSON looks much nicer.

190
00:12:44.169 --> 00:12:46.634
It's not just this blob at the bottom,
and you kinda looking like,

191
00:12:46.634 --> 00:12:47.422
what does this mean?

192
00:12:47.422 --> 00:12:49.549
What is this?
I don't really understand this.

193
00:12:49.549 --> 00:12:51.730
It's much nicer for us to parse and raise.

194
00:12:51.730 --> 00:12:54.851
You can see, here's a request,
and here are the values.

195
00:12:54.851 --> 00:12:57.796
And I'm actually noticing id: 0.

196
00:12:57.796 --> 00:13:02.297
That is probably because we're not
returning the ID from our entry so

197
00:13:02.297 --> 00:13:05.330
we can modify that or
even remove it entirely.

198
00:13:05.330 --> 00:13:07.633
So we can go ahead and do that.

199
00:13:07.633 --> 00:13:12.603
So here, if we go to workout store, and

200
00:13:12.603 --> 00:13:16.821
this was in the create method, so

201
00:13:16.821 --> 00:13:20.296
here we're returning ID.

202
00:13:20.296 --> 00:13:23.450
Here we are returning.

203
00:13:23.450 --> 00:13:24.806
And I key

204
00:13:53.839 --> 00:13:55.757
&gt;&gt; Melkey: It's a bit odd,

205
00:13:55.757 --> 00:14:00.826
I'm not too sure why it's actually empty.

206
00:14:00.826 --> 00:14:04.162
Returning ID, returning ID,
let me just double check.

207
00:14:04.162 --> 00:14:06.826
We'll explore that later.

208
00:14:06.826 --> 00:14:09.200
The worker does, in fact, have the id.

209
00:14:09.200 --> 00:14:12.514
I'll debug why id here is zero.

210
00:14:12.514 --> 00:14:13.512
I'll make a quick fix for it.

211
00:14:13.512 --> 00:14:16.689
It's probably some typo going on, or

212
00:14:16.689 --> 00:14:22.367
maybe I'm not having that filled
correctly in the actual entries.

213
00:14:22.367 --> 00:14:26.545
But the main point is that
now our JSON is legible,

214
00:14:26.545 --> 00:14:31.433
and we can use this more accurately
in the rest of our code.

215
00:14:31.433 --> 00:14:34.011
And we can even do
something like a get now.

216
00:14:34.011 --> 00:14:36.595
So if you go back into the post notes.

217
00:14:36.595 --> 00:14:37.132
And then here.

218
00:14:37.132 --> 00:14:39.747
So we just curled and created a workout.

219
00:14:39.747 --> 00:14:45.065
If we just do a simple get, I'm gonna
go ahead and copy this and paste it.

220
00:14:45.065 --> 00:14:48.701
You can see we actually have
the work that's working.

221
00:14:48.701 --> 00:14:53.405
Yes, so get is actually responding
with the appropriate IDs, but

222
00:14:53.405 --> 00:14:56.935
the create isn't so
kinda figure out why that is.

223
00:14:56.935 --> 00:15:03.216
But yeah, now we have much better JSON,
much better error handling as well.

