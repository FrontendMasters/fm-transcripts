WEBVTT

1
00:00:00.190 --> 00:00:04.490
&gt;&gt; Melkey: We have a few of these strucks,
now we have person contact, employee.

2
00:00:04.490 --> 00:00:10.737
We're gonna kind of shift our focus on the
person struck, because something I want to

3
00:00:10.737 --> 00:00:17.005
address is this topic of passing values by
reference or copies of each other, right?

4
00:00:17.005 --> 00:00:23.538
So let's say we have this function
called func, modify, person name, okay?

5
00:00:23.538 --> 00:00:28.579
And let's say this function is
going to accept a person type.

6
00:00:28.579 --> 00:00:32.335
So again, we can just do person and
actually type in our person type here,

7
00:00:32.335 --> 00:00:36.286
cuz now, person, if we look at
a definition, it's a type, it's a struck.

8
00:00:36.286 --> 00:00:40.524
It's fully something that we can use and
define, right?

9
00:00:40.524 --> 00:00:44.124
This function is not going to return
anything, cuz we're gonna try and

10
00:00:44.124 --> 00:00:44.971
modify a value.

11
00:00:44.971 --> 00:00:51.562
So here, what I'm going to write,
let me just make some more room here.

12
00:00:51.562 --> 00:00:55.087
Let's do format,
print line name before and

13
00:00:55.087 --> 00:00:58.340
we can access the property of our struct.

14
00:00:58.340 --> 00:01:02.137
We can do person.name, like so, all right?

15
00:01:02.137 --> 00:01:08.165
Here I'm gonna do modify person name, I'm
gonna pass my person that we declared, and

16
00:01:08.165 --> 00:01:13.552
over here, what I'm going to do is
person.name, we'll set this to milky.

17
00:01:13.552 --> 00:01:19.959
All right, we can put format.printline
inside scope, new name.

18
00:01:19.959 --> 00:01:21.934
You put person.name.

19
00:01:21.934 --> 00:01:28.320
Just to demonstrate that we did in fact
modify something in our code here,

20
00:01:28.320 --> 00:01:34.191
and then above, after we call
the function in our parent function,

21
00:01:34.191 --> 00:01:38.630
the main function,
we're say name after, okay?

22
00:01:38.630 --> 00:01:43.000
So if I run this, you can see,
name before is John,

23
00:01:43.000 --> 00:01:48.300
inside scope, new name is Milky,
name after is John, okay?

24
00:01:48.300 --> 00:01:53.538
Because what's happening here
is the person that we've passed

25
00:01:53.538 --> 00:01:58.291
in our modified person name
function is a copy of the actual

26
00:01:58.291 --> 00:02:02.672
person that we declared all the way,
okay, up here.

27
00:02:02.672 --> 00:02:07.438
Okay, so when we change the property
name of the copied person,

28
00:02:07.438 --> 00:02:10.898
this only exists in
the scope of our function.

29
00:02:10.898 --> 00:02:15.668
Once the function is executed, this
variable, this person copy is deleted,

30
00:02:15.668 --> 00:02:20.385
it is no longer there, and that memory
is then reallocated or it's freed up.

31
00:02:20.385 --> 00:02:24.929
If you want to pass a value by reference,
right, so

32
00:02:24.929 --> 00:02:28.734
if you actually want to
call the address and

33
00:02:28.734 --> 00:02:33.807
modify the address of a variable,
what we can do is change

34
00:02:33.807 --> 00:02:39.436
the type of modified person name
to accept a pointer to person.

35
00:02:39.436 --> 00:02:44.162
This is the syntax for pointers,
it is this asterisk here,

36
00:02:44.162 --> 00:02:49.077
and this basically says,
this function accepts person, but

37
00:02:49.077 --> 00:02:52.214
the type is a pointer to person, okay?

38
00:02:52.214 --> 00:02:57.520
And then, we can see here,
we cannot use variable of type person

39
00:02:57.520 --> 00:03:04.123
as pointer person because we need to pass
in the address of our person variable.

40
00:03:04.123 --> 00:03:09.921
And to do this, we can use the,
I believe this is the ampersand symbol,

41
00:03:09.921 --> 00:03:16.220
if I'm not mistaken, and this directly
is the address of our person, okay?

42
00:03:16.220 --> 00:03:21.432
So now, because person here is
a pointer to this person variable

43
00:03:21.432 --> 00:03:28.302
that we've created, once we modify
person.name, we can simply go back, right?

44
00:03:28.302 --> 00:03:34.442
If I save this now, from this, now the
value persists because we are no longer

45
00:03:34.442 --> 00:03:40.032
creating a copy of person that lives
within the scope of the function.

46
00:03:40.032 --> 00:03:44.228
This pointer concept, I'll make it brief,
we could do x as 20, right?

47
00:03:44.228 --> 00:03:47.741
This, we're gonna use inferred type,
we know x is 20,

48
00:03:47.741 --> 00:03:51.540
then we could do pointer, and
we can do the address of x, okay,

49
00:03:51.540 --> 00:03:55.797
now we have these two variables,
we have x, and we have a pointer to x.

50
00:03:55.797 --> 00:04:03.370
If we do a format printf,
we can say value of x is doing %d, okay?

51
00:04:03.370 --> 00:04:06.805
And address of x is gonna be %p.

52
00:04:06.805 --> 00:04:12.307
Let's break the line and then pass in x,
and then pass in the pointer, all right?

53
00:04:12.307 --> 00:04:17.688
And if I save this, and I run it,
you can see here value of x is 20 and

54
00:04:17.688 --> 00:04:20.911
the address, it's this address here.

55
00:04:20.911 --> 00:04:26.517
If we want to then modify this value,
we can dereference the value from

56
00:04:26.517 --> 00:04:32.709
our pointer using the following notation,
we can use asterisk pointer ptr.

57
00:04:32.709 --> 00:04:36.721
So the name of the pointer right here
that points to the address of where x was

58
00:04:36.721 --> 00:04:37.367
declared.

59
00:04:37.367 --> 00:04:40.755
And we can reset this to 30, okay, so

60
00:04:40.755 --> 00:04:46.111
here if I just copy this print statement,
okay, we have two.

61
00:04:46.111 --> 00:04:50.811
I'll do value of X and
value of new X, and if I save this,

62
00:04:50.811 --> 00:04:56.211
you can see now we have modified
the underlying value of where our

63
00:04:56.211 --> 00:05:01.726
pointer is pointing to,
it's kinda tough sentence, but yeah.

64
00:05:01.726 --> 00:05:07.104
We have the ability to create variable,
we have the ability to create a pointer to

65
00:05:07.104 --> 00:05:12.403
the exact address of same variable, and
then we have the ability to dereference

66
00:05:12.403 --> 00:05:17.570
to extract the value associated with
that memory address and modify like so.

67
00:05:17.570 --> 00:05:21.550
&gt;&gt; Speaker 2: Let you change pointers
like so, whether pointing to,

68
00:05:21.550 --> 00:05:25.283
could you segfault and go,
or is that not possible?

69
00:05:25.283 --> 00:05:29.073
&gt;&gt; Melkey: No, it can't change like
the underlying address of a pointer.

70
00:05:29.073 --> 00:05:33.068
Now, before you wrap up,
there's one more thing I want to showcase.

71
00:05:33.068 --> 00:05:35.103
So, I'm gonna focus on this function here.

72
00:05:35.103 --> 00:05:39.780
This function, if you remember earlier
when we had the question about structs and

73
00:05:39.780 --> 00:05:40.874
passing structs.

74
00:05:40.874 --> 00:05:45.647
If we look at this function,
we are passing person struck for

75
00:05:45.647 --> 00:05:50.147
this function, which, okay,
not the end of the world.

76
00:05:50.147 --> 00:05:55.309
But structs give us a very cool ability,
which is to create methods on them,

77
00:05:55.309 --> 00:05:59.516
method receivers or
methods on the actual structure itself.

78
00:05:59.516 --> 00:06:03.162
Now, just as a quick refresher,
we have this person struck that's defined,

79
00:06:03.162 --> 00:06:06.309
we're good, we know what that is,
we can add fields if we want, and

80
00:06:06.309 --> 00:06:08.264
can access them, we should be familiar.

81
00:06:08.264 --> 00:06:11.993
Here now, what I'm going to do is here,

82
00:06:11.993 --> 00:06:17.481
right after the func keyword,
I'm gonna do parentheses,

83
00:06:17.481 --> 00:06:22.001
and I'm gonna put person person person,
okay?

84
00:06:22.001 --> 00:06:27.005
And I'm gonna change this like so,
now, what have I done?

85
00:06:27.005 --> 00:06:31.919
I have specifically said,
modify person name is now

86
00:06:31.919 --> 00:06:36.049
a method on my person struck type,
okay, so

87
00:06:36.049 --> 00:06:41.652
you can see on line 11 or
relative 11, I get this error.

88
00:06:41.652 --> 00:06:45.540
Undefined name or undefined,
modified person name,

89
00:06:45.540 --> 00:06:50.523
this function no longer exists because
in the global scope of our app,

90
00:06:50.523 --> 00:06:53.406
modified person name no longer exists.

91
00:06:53.406 --> 00:06:58.766
Modified person name the function only
exists on our person struck, so what you

92
00:06:58.766 --> 00:07:04.140
can do is, modify this, let's remove
the argument, and here we have person.

93
00:07:04.140 --> 00:07:10.946
We can do person.modifypersonname,
we see that.

94
00:07:10.946 --> 00:07:14.483
So instead of calling this
function kind of free range,

95
00:07:14.483 --> 00:07:17.205
it's now a method on our person's truck.

96
00:07:17.205 --> 00:07:23.186
So every new variable we create,
new object that we create that is a person

97
00:07:23.186 --> 00:07:29.372
struck will have access to the modified
person named function to it, okay?

98
00:07:29.372 --> 00:07:35.960
And some syntax, some just sugar here,
typically you wouldn't see person, person,

99
00:07:35.960 --> 00:07:41.135
you do something like P, so
now you have p.name, and p.name here.

100
00:07:41.135 --> 00:07:45.624
Instead of doing the full person and then
person type, you do something like p or

101
00:07:45.624 --> 00:07:47.031
a or it's like a letter.

102
00:07:47.031 --> 00:07:52.635
And this component here, this bracket
components called a method receiver, okay?

103
00:07:52.635 --> 00:07:56.172
This means, we have a method
called the function name, and

104
00:07:56.172 --> 00:07:59.588
this is only existing on the data type,
which is person.

105
00:08:02.622 --> 00:08:06.410
&gt;&gt; Melkey: And
we can be a little more, I don't know.

106
00:08:06.410 --> 00:08:08.776
And just change this like this, right?

107
00:08:15.960 --> 00:08:19.200
&gt;&gt; Melkey: Just to be a little
more pragmatic, I suppose,

108
00:08:19.200 --> 00:08:22.687
and then all the things
should work as in intended.

109
00:08:22.687 --> 00:08:27.828
&gt;&gt; Speaker 3: How carefully should
I consider when to pass by copy or

110
00:08:27.828 --> 00:08:29.091
reference?

111
00:08:29.091 --> 00:08:30.873
&gt;&gt; Melkey: Yeah, great question.

112
00:08:30.873 --> 00:08:35.116
So, how carefully should you consider it?

113
00:08:35.116 --> 00:08:40.870
I mean, you obviously don't want
to relook at your entire code and

114
00:08:40.870 --> 00:08:43.350
rearchitecture anything?

115
00:08:43.350 --> 00:08:47.987
I'd say a rule of thumb is, a, if you're
passing structs along your application

116
00:08:47.987 --> 00:08:52.490
through multiple different functions,
multiple different fields, over and

117
00:08:52.490 --> 00:08:55.194
over again,
that would be like a bit of a smell.

118
00:08:55.194 --> 00:08:59.999
I'd probably start reconsidering, maybe
these should be methods on this truck

119
00:08:59.999 --> 00:09:04.166
instead, maybe I should be doing
a pointer reference to that struct,

120
00:09:04.166 --> 00:09:06.585
as opposed to just handling it as a copy.

121
00:09:06.585 --> 00:09:12.267
And one gotcha that I tried to explain
earlier is the the the scope of function,

122
00:09:12.267 --> 00:09:16.743
like the closures of a function,
right, if you are intending

123
00:09:16.743 --> 00:09:21.328
to modify a value outside,
like if you make a helper function.

124
00:09:21.328 --> 00:09:25.429
And that function has a specific role
of modifying a value, and you call that

125
00:09:25.429 --> 00:09:29.616
function, you pass it a copy,
then the value isn't gonna persist, right?

126
00:09:29.616 --> 00:09:34.320
You're gonna just get the same,
nothing's gonna really happen,

127
00:09:34.320 --> 00:09:39.931
that's when you would use a pointer,
if you want to persist changes, that would

128
00:09:39.931 --> 00:09:45.482
be a use case of, of why you would use
references over passing values as copies.

129
00:09:45.482 --> 00:09:48.514
Yeah, and just one little thing here,
this is intended.

130
00:09:48.514 --> 00:09:51.709
Modify, you can now have two methods,
obvious,

131
00:09:51.709 --> 00:09:55.451
but you can have two of the same
methods on the same struct.

132
00:09:55.451 --> 00:09:57.358
&gt;&gt; Speaker 4: Even if they
have a different signature?

133
00:09:57.358 --> 00:10:00.516
Like if you had a different type or
a different number of types,

134
00:10:00.516 --> 00:10:01.716
would that be allowed?

135
00:10:01.716 --> 00:10:04.495
&gt;&gt; Melkey: As arguments or
as the method receiver?

136
00:10:04.495 --> 00:10:10.650
&gt;&gt; Speaker 4: Like you have, maybe I
misunderstand, you have name string there.

137
00:10:10.650 --> 00:10:16.255
&gt;&gt; Melkey: Yeah, and so let's say I have,
let's just do something like that, right?

138
00:10:16.255 --> 00:10:18.609
&gt;&gt; Speaker 5: Like overloads and-
&gt;&gt; Speaker 4: Yeah, overloading,

139
00:10:18.609 --> 00:10:20.272
as opposed to overriding.

140
00:10:20.272 --> 00:10:23.430
&gt;&gt; Melkey: Let's do string.

141
00:10:23.430 --> 00:10:27.960
No, you'd still,
even if you change the type,

142
00:10:27.960 --> 00:10:31.950
let me just be a little
more specific here.

143
00:10:31.950 --> 00:10:36.483
If you change the method signature,
it still would error out because it still

144
00:10:36.483 --> 00:10:40.262
looks at the actual name implementation,
you can't share it.

145
00:10:40.262 --> 00:10:44.253
But you can have if you change this person
two, and you have this method receivers,

146
00:10:44.253 --> 00:10:45.921
person two that's gonna be fine.

147
00:10:45.921 --> 00:10:49.134
&gt;&gt; Speaker 4: Right?
&gt;&gt; Melkey: Yeah.

148
00:10:49.134 --> 00:10:52.855
&gt;&gt; Speaker 6: Does the capitalization
rule apply to the fields as well?

149
00:10:52.855 --> 00:10:53.818
&gt;&gt; Melkey: Yes it does.

150
00:10:53.818 --> 00:10:57.364
So if you have two functions, let's have
a modified person and modify person age,

151
00:10:57.364 --> 00:10:57.980
for example.

152
00:10:57.980 --> 00:11:04.607
And one of them is declared with a m,
where this one is declared a M.

153
00:11:04.607 --> 00:11:07.996
The M would be exported
through other packages,

154
00:11:07.996 --> 00:11:12.968
where the m will not be, it will only
be within the scope of the package.

