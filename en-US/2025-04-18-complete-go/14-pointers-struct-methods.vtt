WEBVTT

1
00:00:00.000 --> 00:00:04.087
&gt;&gt; Melkey: We have a few of these trucks
now we have person, contact, employee.

2
00:00:04.087 --> 00:00:10.050
We're gonna shift our focus on the person
struct, because something I wanted to

3
00:00:10.050 --> 00:00:16.383
address is this topic of passing values by
reference or copies of each other, right?

4
00:00:16.383 --> 00:00:23.466
So let's say we have this function
called func modifyPersonName, okay?

5
00:00:23.466 --> 00:00:27.747
And let's say this function is
going to accept a person type, so

6
00:00:27.747 --> 00:00:32.365
again we can just do person and
actually type in our person type here.

7
00:00:32.365 --> 00:00:36.919
Because now person if we look at
a definition, it's a type, it's a shrug,

8
00:00:36.919 --> 00:00:40.422
it's fully something that we can use and
define, right?

9
00:00:40.422 --> 00:00:44.063
This function's not going to return
anything because we're gonna try and

10
00:00:44.063 --> 00:00:44.879
modify a value.

11
00:00:44.879 --> 00:00:51.439
So here, what I'm going to write,
let me just make some more room here.

12
00:00:51.439 --> 00:00:58.198
Let's do fmt.Println "name before: " and
we can access the property of our struct.

13
00:00:58.198 --> 00:01:02.156
We can do person.Name, like so, all right?

14
00:01:02.156 --> 00:01:07.795
Here I'm gonna do modifyPersonName,
I'm gonna pass my person that we declared.

15
00:01:07.795 --> 00:01:13.405
And over here, what I'm gonna do is
person.Name, we'll set this to Melkey.

16
00:01:13.405 --> 00:01:19.802
All right, we can put fmt.Println,
inside scope, new name.

17
00:01:19.802 --> 00:01:25.147
You've got person.Name,
just to demonstrate that we did,

18
00:01:25.147 --> 00:01:29.154
in fact,
modify something in our code here and

19
00:01:29.154 --> 00:01:34.498
then above after we call
the function in our parent function,

20
00:01:34.498 --> 00:01:38.533
the main function,
we say name after, okay?

21
00:01:38.533 --> 00:01:43.977
So if I run this, you can see
name before is John inside scope,

22
00:01:43.977 --> 00:01:48.190
new name is Melkey,
name after is John, okay?

23
00:01:48.190 --> 00:01:53.120
Because what's happening here
is the person that we've

24
00:01:53.120 --> 00:01:57.639
passed in our modifyPersonName
function is a copy of

25
00:01:57.639 --> 00:02:02.895
the actual person that we declare
all the way up here, okay?

26
00:02:02.895 --> 00:02:07.190
So when we change the property
name of the copied person,

27
00:02:07.190 --> 00:02:10.686
this only exists in
the scope of our function.

28
00:02:10.686 --> 00:02:15.900
Once the function is executed, this
variable, this person copy is deleted,

29
00:02:15.900 --> 00:02:19.771
it is no longer there and
that memory is then reallocated,

30
00:02:19.771 --> 00:02:24.282
or it's freed up, if you want to
pass a value by reference, right?

31
00:02:24.282 --> 00:02:28.464
So if you actually want
to call the address and

32
00:02:28.464 --> 00:02:33.748
modify the address of a variable,
what we can do is change

33
00:02:33.748 --> 00:02:39.379
the type of modifyPersonName
to accept a pointer to person.

34
00:02:39.379 --> 00:02:44.294
This is the Syntax for pointers,
it is this asterisk here, and

35
00:02:44.294 --> 00:02:48.656
this basically says this
function accepts person, but

36
00:02:48.656 --> 00:02:51.746
the type is a pointer to person, okay?

37
00:02:51.746 --> 00:02:57.890
And then we can see here we cannot use
variable of type person as pointer,

38
00:02:57.890 --> 00:03:03.951
person, because we need to pass in
the address of our person variable.

39
00:03:03.951 --> 00:03:09.081
And to do this,
I believe this is the ampersand symbol,

40
00:03:09.081 --> 00:03:16.191
if I'm not mistaken, and this directly
is the address of our person, okay?

41
00:03:16.191 --> 00:03:20.630
So now, because person here
is a pointer to this person

42
00:03:20.630 --> 00:03:23.244
variable that we've created.

43
00:03:23.244 --> 00:03:28.379
Once we modify person.Name,
we can simply go back, right?

44
00:03:28.379 --> 00:03:34.709
If I save this now, from this now, the
value persists, because we are no longer

45
00:03:34.709 --> 00:03:40.867
creating a copy of person that lives
within the scope of the function, okay?

46
00:03:40.867 --> 00:03:44.710
And a quick,
pretty simple example, I guess,

47
00:03:44.710 --> 00:03:49.610
to demonstrate this pointer concept,
I'll make it brief,

48
00:03:49.610 --> 00:03:52.410
we could do x as like 20, right?

49
00:03:52.410 --> 00:03:57.196
We're gonna use infer type,
we know x is 20, then we could do pointer,

50
00:03:57.196 --> 00:03:59.605
and we can do the address of x, okay?

51
00:03:59.605 --> 00:04:03.370
Now we have these two variables,
we have x and we have a pointer 2x.

52
00:04:03.370 --> 00:04:10.854
If we do a fmt.Printf, we can say
value of x is the only modulo d, okay?

53
00:04:10.854 --> 00:04:15.663
And address of x is gonna be modulo p,
let's break the line and

54
00:04:15.663 --> 00:04:19.930
then pass in x and
then pass in the pointer, all right?

55
00:04:19.930 --> 00:04:23.459
And if I save this and
I run it, you can see here,

56
00:04:23.459 --> 00:04:28.151
value of x is 20, and the address,
it's this address here.

57
00:04:28.151 --> 00:04:32.685
If we want to then modify this value,
we can de reference

58
00:04:32.685 --> 00:04:37.419
the value from our pointer
using the following notation.

59
00:04:37.419 --> 00:04:40.637
We can use asterisk, pointer, ptr, so

60
00:04:40.637 --> 00:04:45.561
the name of the pointer right here
that points to the address of

61
00:04:45.561 --> 00:04:50.314
where x was declared, and
we can reset this to 30, okay?

62
00:04:50.314 --> 00:04:52.908
So here,
if I just copy this print statement, okay?

63
00:04:52.908 --> 00:04:57.658
We have two, I'll do value of x and
value of new x, and

64
00:04:57.658 --> 00:05:01.775
if I save this,
you can see now we have modified

65
00:05:01.775 --> 00:05:06.760
the underlying value of where
a pointer is pointing to.

66
00:05:06.760 --> 00:05:11.964
It's kinda a tough sentence, but yeah,
we have the ability to create a variable.

67
00:05:11.964 --> 00:05:16.884
We have the ability to create a pointer
to the exact address of set variable, and

68
00:05:16.884 --> 00:05:19.456
then we have the ability to dereference,

69
00:05:19.456 --> 00:05:24.468
to extract the value associated with that
memory address and a modify, like so.

70
00:05:24.468 --> 00:05:29.202
&gt;&gt; Speaker 2: Does it go let you change
pointers like where they're pointing to,

71
00:05:29.202 --> 00:05:32.864
could you seg fault and go,
or is that not possible?

72
00:05:32.864 --> 00:05:36.140
&gt;&gt; Melkey: No, it can't change
the underlying address of a pointer,

73
00:05:36.140 --> 00:05:39.954
now before we wrap up, there's one
more thing I want to, showcase.

74
00:05:39.954 --> 00:05:44.867
So I'm gonna focus on this function here,
this function, if you remember earlier

75
00:05:44.867 --> 00:05:48.455
when we had the question about structs and
passing structs.

76
00:05:48.455 --> 00:05:53.362
If we look at this function,
we are passing person, struct for

77
00:05:53.362 --> 00:05:57.818
this function, which, okay,
not the end of the world.

78
00:05:57.818 --> 00:06:02.810
But structs give us a very cool ability,
which is to create methods on them,

79
00:06:02.810 --> 00:06:06.867
method receivers or
methods on the actual structure itself.

80
00:06:06.867 --> 00:06:10.648
Now, just as a quick refresher,
we have this person struct that's defined.

81
00:06:10.648 --> 00:06:13.820
We're good, we know what that is,
we can add fields if you want, and

82
00:06:13.820 --> 00:06:15.755
can access them, we should be familiar.

83
00:06:15.755 --> 00:06:19.853
Here now, what I'm going to do is here,

84
00:06:19.853 --> 00:06:25.884
right after the func keyword,
I'm gonna do parentheses,

85
00:06:25.884 --> 00:06:30.363
and I'm gonna put person *Person, okay?

86
00:06:30.363 --> 00:06:34.825
And I'm gonna change this like so,
now, what have I done?

87
00:06:34.825 --> 00:06:39.616
I have specifically said
modifyPersonName is

88
00:06:39.616 --> 00:06:44.292
now a method on my person struct type,
okay?

89
00:06:44.292 --> 00:06:48.985
So you can see on line 11 or
relative 11, I get this error,

90
00:06:48.985 --> 00:06:52.977
undefined name or undefined,
modifyPersonName.

91
00:06:52.977 --> 00:06:57.762
This function no longer exists because
in the global scope of our app,

92
00:06:57.762 --> 00:07:01.820
modifyPersonName no longer exists,
modifyPersonName,

93
00:07:01.820 --> 00:07:05.079
the function only exists
on our person struct.

94
00:07:05.079 --> 00:07:08.193
So what you can do is modify this,

95
00:07:08.193 --> 00:07:13.311
let's remove the argument,
and here we have person,

96
00:07:13.311 --> 00:07:18.440
we can do person.modifyPersonName,
do we see that?

97
00:07:18.440 --> 00:07:21.915
So instead of calling
this function free-range,

98
00:07:21.915 --> 00:07:24.675
it's now a method on our person struct.

99
00:07:24.675 --> 00:07:29.838
So every new variable we create,
new object that we create that is a person

100
00:07:29.838 --> 00:07:34.936
struct will have access to
the modifyPersonName function to it, okay?

101
00:07:34.936 --> 00:07:39.674
And some syntax,
some just sugar here, typically you

102
00:07:39.674 --> 00:07:44.721
wouldn't see person, person,
you do something like p,

103
00:07:44.721 --> 00:07:48.745
so now you have p.Name and
like p.Name here.

104
00:07:48.745 --> 00:07:53.485
Instead of doing the full person and then
person type, you do something like P or A,

105
00:07:53.485 --> 00:07:54.719
it's like a letter.

106
00:07:54.719 --> 00:07:56.247
And this component here,

107
00:07:56.247 --> 00:08:00.073
this like bracket component is
called a method receiver, okay?

108
00:08:00.073 --> 00:08:05.206
This means, we have a method
called the function name, and

109
00:08:05.206 --> 00:08:10.143
this is only existing on the data type,
which is person.

110
00:08:10.143 --> 00:08:13.663
And we can, be a little bit more,
I don't know, and

111
00:08:13.663 --> 00:08:16.147
just change this like this, right?

112
00:08:23.428 --> 00:08:27.119
&gt;&gt; Melkey: Just to be a little bit
more pragmatic, I suppose, and

113
00:08:27.119 --> 00:08:30.181
then all the things
should work as intended.

114
00:08:30.181 --> 00:08:35.311
&gt;&gt; Speaker 3: How carefully should
I consider when to pass by copy or

115
00:08:35.311 --> 00:08:36.681
a reference?

116
00:08:36.681 --> 00:08:41.774
&gt;&gt; Melkey: Yeah, great question, so
how carefully should you consider it?

117
00:08:41.774 --> 00:08:47.350
I mean, you obviously don't want
to re look at your entire code and

118
00:08:47.350 --> 00:08:49.748
re architecture anything.

119
00:08:49.748 --> 00:08:54.768
I'd say a rule of thumb is, if you're
passing structs along your application

120
00:08:54.768 --> 00:08:59.715
through multiple different functions,
multiple different fields over and

121
00:08:59.715 --> 00:09:02.774
over again,
that would be like a bit of a smell.

122
00:09:02.774 --> 00:09:06.221
I'd probably start reconsidering
maybe these should be methods

123
00:09:06.221 --> 00:09:07.481
on the struct instead.

124
00:09:07.481 --> 00:09:12.387
Maybe I should be doing a pointer
reference to the struct as opposed to

125
00:09:12.387 --> 00:09:14.339
just handling it as a copy.

126
00:09:14.339 --> 00:09:19.715
And like one gotcha that I tried to
explain earlier is the scope of function,

127
00:09:19.715 --> 00:09:22.667
like the closures of a function, right?

128
00:09:22.667 --> 00:09:27.362
If you are intending to modify a value
outside, like if you make a helper

129
00:09:27.362 --> 00:09:31.914
function and that function has
a specific role of modifying a value.

130
00:09:31.914 --> 00:09:35.692
And you call that function,
you pass it a copy,

131
00:09:35.692 --> 00:09:39.381
then the value isn't gonna persist, right?

132
00:09:39.381 --> 00:09:42.338
Nothing's gonna really happen,
that's when you would use a pointer.

133
00:09:42.338 --> 00:09:47.613
If you want to persist changes,
that would be a use case of why

134
00:09:47.613 --> 00:09:52.588
you would use references over
passing values as copies.

135
00:09:52.588 --> 00:09:58.361
Yeah, and just one little thing here, this
is intended, you cannot have two methods,

136
00:09:58.361 --> 00:10:02.902
obvious, but you can have two of
the same methods on the same struct.

137
00:10:02.902 --> 00:10:05.675
&gt;&gt; Speaker 2: Even if they have
a different signature, like if you had

138
00:10:05.675 --> 00:10:09.283
a different type or a different number
of types, would that be allowed?

139
00:10:09.283 --> 00:10:14.397
&gt;&gt; Melkey: As arguments or
as the method receiver?

140
00:10:14.397 --> 00:10:18.149
&gt;&gt; Speaker 2: Maybe I misunderstand,
you have name string there.

141
00:10:18.149 --> 00:10:23.785
&gt;&gt; Melkey: Yeah,
let's just do something like that, right?

142
00:10:23.785 --> 00:10:25.422
&gt;&gt; Speaker 3: Like overloads and-
&gt;&gt; Speaker 2: Yeah,

143
00:10:25.422 --> 00:10:27.775
overloading as opposed to overriding.

144
00:10:27.775 --> 00:10:34.771
&gt;&gt; Melkey: Hold on, it's too strange,
even if you change like the type,

145
00:10:34.771 --> 00:10:39.530
let me just be a little
more specific here.

146
00:10:39.530 --> 00:10:42.155
You need to change the method signature,

147
00:10:42.155 --> 00:10:47.106
it still would error out cuz it still
looks at the actual name implementation.

148
00:10:47.106 --> 00:10:49.943
You can't share it,
if you change this to person 2, and

149
00:10:49.943 --> 00:10:53.388
you have this method receivers,
person 2, that's gonna be fine.

150
00:10:53.388 --> 00:10:53.914
&gt;&gt; Speaker 2: Right.

151
00:10:53.914 --> 00:10:56.591
&gt;&gt; Melkey: Yeah.

152
00:10:56.591 --> 00:11:00.478
&gt;&gt; Speaker 4: Does the capitalization
rule apply to the fields as well.

153
00:11:00.478 --> 00:11:02.605
&gt;&gt; Melkey: Yeah, yes it does,
so if you have two functions,

154
00:11:02.605 --> 00:11:05.553
let's have modified person and
modified person age, for example.

155
00:11:05.553 --> 00:11:08.974
And one of them is declared
with a lowercase m,

156
00:11:08.974 --> 00:11:12.237
where this one is declared
with a capital M.

157
00:11:12.237 --> 00:11:16.944
The capital M would be exported through
other packages where the lowercase m

158
00:11:16.944 --> 00:11:20.706
will not be, it will only be
within the scope of the package.

