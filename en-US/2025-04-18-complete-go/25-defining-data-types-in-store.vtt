WEBVTT

1
00:00:00.340 --> 00:00:03.651
&gt;&gt; Melkey: We've closed the loop on
a bunch of different things here.

2
00:00:03.651 --> 00:00:05.207
We've set up a lot of the project here.

3
00:00:05.207 --> 00:00:10.283
We have a database, a lot of things for
the backend communication here.

4
00:00:10.283 --> 00:00:13.637
And we're gonna take this
just a few steps further.

5
00:00:13.637 --> 00:00:18.374
We might get kind of halfway
through this kind of submodule.

6
00:00:18.374 --> 00:00:23.778
But the part that we want to focus
on now is if we go back to internal,

7
00:00:23.778 --> 00:00:30.649
into store is now we are fully equipped to
start working in the workout store, okay?

8
00:00:30.649 --> 00:00:32.728
And the reason why I'm excited for

9
00:00:32.728 --> 00:00:37.672
this is the workout store is going to be
the section of our application where we'll

10
00:00:37.672 --> 00:00:40.983
be doing logic that communicates
with that database.

11
00:00:40.983 --> 00:00:44.233
We'll be again writing SQL, we'll be
doing all that scary stuff that people

12
00:00:44.233 --> 00:00:45.889
freak out about, like SQL injection.

13
00:00:45.889 --> 00:00:47.825
All of that is going to
be all defined here.

14
00:00:47.825 --> 00:00:52.675
So like always, when I look at a file,
especially a new package,

15
00:00:52.675 --> 00:00:55.684
I ask myself, am I going to handle data?

16
00:00:55.684 --> 00:00:59.674
The answer is yes because I'm going
to be communicating to a database.

17
00:00:59.674 --> 00:01:02.941
If the answer's yes,
I typically think of a struct.

18
00:01:02.941 --> 00:01:08.619
So here we're gonna create our type
Workout, it's gonna be a struct, okay?

19
00:01:08.619 --> 00:01:10.411
And this struct is gonna
have many different fields.

20
00:01:10.411 --> 00:01:13.237
The first one's gonna be ID of type int.

21
00:01:13.237 --> 00:01:18.251
It's gonna also include this json tag,
okay, this is called a struct tag.

22
00:01:18.251 --> 00:01:22.553
Go allows a bunch of different struct
tags on fields of structs, and

23
00:01:22.553 --> 00:01:24.825
they all have different purposes.

24
00:01:24.825 --> 00:01:29.287
So the json one helps us for encoding and
decoding JSON into a struct.

25
00:01:29.287 --> 00:01:34.244
So if you get a payload from our frontend
that has a JSON that matches this tag,

26
00:01:34.244 --> 00:01:38.453
we can easily decode that into our
Workout struct and vice versa.

27
00:01:38.453 --> 00:01:41.721
So here we can do ID.

28
00:01:41.721 --> 00:01:48.753
The next field we're gonna have is Title,
whoops, string.

29
00:01:53.157 --> 00:01:55.514
&gt;&gt; Melkey: Like this,
we're gonna also have a Description.

30
00:02:04.432 --> 00:02:07.766
&gt;&gt; Melkey: All right,
we're also gonna have DurationMinutes,

31
00:02:07.766 --> 00:02:09.296
it's going to be an int.

32
00:02:15.678 --> 00:02:20.200
&gt;&gt; Melkey: CaloriesBurned,
and this is gonna be

33
00:02:20.200 --> 00:02:24.875
an int "json:"calories_burned.

34
00:02:24.875 --> 00:02:28.135
And now the last field we're
gonna have here is Entries.

35
00:02:28.135 --> 00:02:32.877
And Entries is going to be
a slice of a new struct

36
00:02:32.877 --> 00:02:37.873
we're gonna have called WorkoutEntry,
okay?

37
00:02:37.873 --> 00:02:41.247
And here we'll just put it as entries,
like so.

38
00:02:41.247 --> 00:02:43.625
Our compiler's gonna yell at us,
rightfully so,

39
00:02:43.625 --> 00:02:45.850
we don't know what
a WorkoutEntry is just yet.

40
00:02:45.850 --> 00:02:52.919
But we can easily change that with
type WorkoutEntry is a struct, okay?

41
00:02:52.919 --> 00:02:58.355
Int should follow a lot of those same
parameters, so ID int json:"id".

42
00:02:58.355 --> 00:03:02.940
We're gonna have our ExerciseName,

43
00:03:02.940 --> 00:03:08.823
it's gonna be a string, "exercise_name".

44
00:03:08.823 --> 00:03:15.743
Sets is going to be an int,
I'm gonna do that as json:"sets".

45
00:03:15.743 --> 00:03:19.075
Now the next fields are Reps, and Reps,

46
00:03:19.075 --> 00:03:23.486
because of the constraint
we said earlier in our SQL,

47
00:03:23.486 --> 00:03:28.289
this is actually gonna be a pointer
to an int because we want

48
00:03:28.289 --> 00:03:33.013
to explicitly check Reps for
being nil or naught, okay?

49
00:03:33.013 --> 00:03:37.774
So here we can do json,
it's gonna be reps,

50
00:03:37.774 --> 00:03:41.264
have DurationSeconds, okay?

51
00:03:41.264 --> 00:03:46.154
It's also gonna be a pointer to an int,

52
00:03:46.154 --> 00:03:48.978
duration_seconds.

53
00:03:52.476 --> 00:03:55.593
&gt;&gt; Melkey: Okay-
&gt;&gt; Speaker 2: Typo on seconds.

54
00:03:55.593 --> 00:04:00.020
&gt;&gt; Melkey: Yes, [LAUGH] thank you.

55
00:04:00.020 --> 00:04:03.724
We'll have Weight,
which will be a pointer to a float64.

56
00:04:09.818 --> 00:04:13.552
&gt;&gt; Melkey: Weight, and
then we need two more, so

57
00:04:13.552 --> 00:04:17.999
Notes is gonna be a string json:"notes".

58
00:04:17.999 --> 00:04:23.216
And then the last field is OrderIndex,
right, so

59
00:04:23.216 --> 00:04:28.308
OrderIndex, and
this is going to be an int json,

60
00:04:28.308 --> 00:04:32.426
write this as order_index, like so.

61
00:04:32.426 --> 00:04:34.816
Now we have our two structs, great.

62
00:04:34.816 --> 00:04:39.255
So we have these two structs, I'm gonna
quickly also now create something we've

63
00:04:39.255 --> 00:04:42.485
seen before, which is going
to be the handler equivalent.

64
00:04:42.485 --> 00:04:47.543
So I'm gonna type PostgresWorkoutStore.

65
00:04:47.543 --> 00:04:53.852
This is gonna be a struct, so a third
struct, and this is gonna hold db DB.

66
00:04:53.852 --> 00:04:57.161
Now why, what is this, what is this thing,
why is it called Postgres?

67
00:04:57.161 --> 00:04:59.586
Tell Postregs we're using Postgres,
end of story.

68
00:04:59.586 --> 00:05:05.062
However, from a pragmatic perspective,
this is a really bad naming,

69
00:05:05.062 --> 00:05:11.560
right, because it directly says this
WorkoutStore is bounded to Postgres, okay?

70
00:05:11.560 --> 00:05:15.061
What if one day we use Postgres, but
the next day we have to use MongoDB?

71
00:05:15.061 --> 00:05:18.967
What if we get a new CTR company and
they say, hey,

72
00:05:18.967 --> 00:05:23.816
absolute to move Postgres we
have to use this other database.

73
00:05:23.816 --> 00:05:26.837
But we're completely bounded
by PostgresWorkoutStore right?

74
00:05:26.837 --> 00:05:28.781
But there is a good solution to this.

75
00:05:28.781 --> 00:05:33.711
Before I show the solution, I also
wanna just finalize the constructor for

76
00:05:33.711 --> 00:05:35.754
this PostgresWorkoutStore.

77
00:05:35.754 --> 00:05:41.582
So let's go ahead and
create func NewPostgresWorkoutStore.

78
00:05:41.582 --> 00:05:45.197
I'm gonna say this is a db sql.db, and

79
00:05:45.197 --> 00:05:50.136
we'll just return
a PostgresWorkoutStore like so.

80
00:05:50.136 --> 00:05:54.590
And here we'll return an address to

81
00:05:54.590 --> 00:05:59.343
PostgresWorkoutStore {db: db}.

82
00:05:59.343 --> 00:06:02.441
Okay, now back to
the PostgresWorkoutStore.

83
00:06:02.441 --> 00:06:05.717
So yeah, what happens if we
have to switch databases?

84
00:06:05.717 --> 00:06:10.373
That happens a fair amount of times,
right, like new constraints, new features,

85
00:06:10.373 --> 00:06:11.169
what do we do?

86
00:06:11.169 --> 00:06:13.888
It'd be a real shame if
we have to go back and

87
00:06:13.888 --> 00:06:17.525
rename all the instances of
Postgres to something else.

88
00:06:17.525 --> 00:06:21.849
Well, luckily for us,
Go gives us the ability not to have that.

89
00:06:21.849 --> 00:06:26.537
And this following thing is called
essentially decoupling our database.

90
00:06:26.537 --> 00:06:30.333
But what we're going to
use is an interface.

91
00:06:30.333 --> 00:06:35.824
And an interface is simply a collection
of method signatures, that's all it is.

92
00:06:35.824 --> 00:06:39.598
It's not a new type, it is not a function.

93
00:06:39.598 --> 00:06:43.372
It is literally a collection
of method signatures.

94
00:06:43.372 --> 00:06:48.662
And when you have something that
satisfies all of the method signatures

95
00:06:48.662 --> 00:06:53.345
in an interface, you can use that
type as that interface type.

96
00:06:53.345 --> 00:07:00.410
So I'll demonstrate here, we do type
WorkoutStore now as just an interface,

97
00:07:00.410 --> 00:07:06.419
okay, until we spin this up with
two functions, CreateWorkout.

98
00:07:06.419 --> 00:07:09.843
CreateWorkout's gonna take
a pointer to a Workout,

99
00:07:09.843 --> 00:07:14.342
and it's gonna return two things,
pointer to a Workout and an error.

100
00:07:14.342 --> 00:07:21.258
And it's also going to GetWorkoutByID and
it's going to take an id of int64,

101
00:07:21.258 --> 00:07:25.402
and it's going to return a Workout or
an error.

102
00:07:28.466 --> 00:07:30.725
&gt;&gt; Melkey: So
right now our interface is complete.

103
00:07:30.725 --> 00:07:32.550
This is it,
this is how it's going to look like.

104
00:07:32.550 --> 00:07:37.360
But if you notice, our interface
is just called WorkoutStore and

105
00:07:37.360 --> 00:07:39.816
we have PostgresWorkoutStore.

106
00:07:39.816 --> 00:07:44.206
So right now, even though we're bounded
to our PostgresWorkoutStore and we're

107
00:07:44.206 --> 00:07:48.850
gonna have our logic that communicates to
our database using Postgres native things,

108
00:07:48.850 --> 00:07:52.618
it doesn't mean that our application
layer also needs to be changed.

109
00:07:52.618 --> 00:07:57.882
Because our application layer, it's going
to accept the WorkoutStore interface.

110
00:07:57.882 --> 00:08:04.650
It is never going to accept directly
the PostgresWorkoutStore struct, okay?

111
00:08:04.650 --> 00:08:07.575
We're gonna define all the logic
using PostgresWorkoutStore, right,

112
00:08:07.575 --> 00:08:09.379
cuz that's what we're using to make sense.

113
00:08:09.379 --> 00:08:14.836
But if it comes to migration, all we have
to do is make the relative functions for

114
00:08:14.836 --> 00:08:17.370
this new database, but that's it.

115
00:08:17.370 --> 00:08:22.013
The migration's containerized
in this data store layer.

116
00:08:22.013 --> 00:08:27.772
Our application layer will not care,
it won't even know the difference because

117
00:08:27.772 --> 00:08:32.777
all it's going to do is communicate
via the WorkoutStore interface.

