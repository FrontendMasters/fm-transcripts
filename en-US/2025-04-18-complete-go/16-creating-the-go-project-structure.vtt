WEBVTT

1
00:00:00.000 --> 00:00:05.872
&gt;&gt; Melkey: And I'm actually going to get
out of that previous directory we have,

2
00:00:05.872 --> 00:00:11.059
because here, I would like us
to start the Go project, okay?

3
00:00:11.059 --> 00:00:13.813
So this is going to be us now working and

4
00:00:13.813 --> 00:00:17.093
creating the Go project
again from scratch.

5
00:00:17.093 --> 00:00:22.292
It's falling this similar pattern or,
quote unquote, style of the previous one,

6
00:00:22.292 --> 00:00:26.979
but I'm not gonna just write a bunch of
stuff in main and delete and rewrite,

7
00:00:26.979 --> 00:00:28.318
delete and rewrite.

8
00:00:28.318 --> 00:00:31.251
We are actually going to be
building out the project structure.

9
00:00:31.251 --> 00:00:36.399
So I just wanna kind of emphasize
that all that beginning stuff

10
00:00:36.399 --> 00:00:42.740
that we just did will help us create
the project as we move forward right now.

11
00:00:42.740 --> 00:00:46.767
And there's also gonna be new stuff that
we didn't cover in the beginning section,

12
00:00:46.767 --> 00:00:50.357
but that's gonna be expected,
especially when we spin up an HTTP server.

13
00:00:50.357 --> 00:00:52.232
We didn't cover HTTP servers at all,
right?

14
00:00:52.232 --> 00:00:55.228
We covered maybe underlying
data structures.

15
00:00:55.228 --> 00:00:59.479
But now we're gonna kind of
just utilize those into what

16
00:00:59.479 --> 00:01:03.738
I hope to be a more applicable
side of writing Go, okay?

17
00:01:03.738 --> 00:01:05.260
So let's start.

18
00:01:05.260 --> 00:01:09.255
So go ahead and
make a new directory, mkdir,

19
00:01:09.255 --> 00:01:14.315
I'm just gonna say,
Frontend Masters will do project.

20
00:01:14.315 --> 00:01:16.125
I'm gonna cd into this project.

21
00:01:16.125 --> 00:01:19.668
And for the Go mod in it,
I'm gonna leave it up to you.

22
00:01:19.668 --> 00:01:24.692
If you want to do the full implementation
of, let's say, github.com/the author

23
00:01:24.692 --> 00:01:29.735
name/the project, fem, and I'll just do
Project, go ahead and do this, right?

24
00:01:29.735 --> 00:01:31.634
If you wanna make it shorter,
it's gonna be easier.

25
00:01:31.634 --> 00:01:34.630
I'm gonna go ahead and
do the full length here, okay?

26
00:01:34.630 --> 00:01:38.788
So if I create this,
now we have our new go.mod.

27
00:01:38.788 --> 00:01:43.337
And then I'm gonna do touch main.go.

28
00:01:47.500 --> 00:01:51.527
&gt;&gt; Melkey: Okay, in our main.go file,
let's quickly just put our package main

29
00:01:51.527 --> 00:01:55.431
and then func main, and then get
our compiler to stop yelling at us.

30
00:01:55.431 --> 00:01:59.320
The first thing, and
I just alluded to this earlier,

31
00:01:59.320 --> 00:02:02.443
is we're not gonna bog down our main.go.

32
00:02:02.443 --> 00:02:08.116
You wanna keep it as slim and
as simple as possible.

33
00:02:08.116 --> 00:02:10.502
Now, that's not a hard rule of thumb.

34
00:02:10.502 --> 00:02:13.512
There's gonna be certain cases where you
just need to instantiate a bunch of things

35
00:02:13.512 --> 00:02:14.032
in main.go.

36
00:02:14.032 --> 00:02:15.249
That's completely fine.

37
00:02:15.249 --> 00:02:19.355
But your main.go should be just
the entry point to your application.

38
00:02:19.355 --> 00:02:24.060
And then your other data structures that
house the rest of your app should be

39
00:02:24.060 --> 00:02:28.841
responsible for other functionalities
that are the core implementation of

40
00:02:28.841 --> 00:02:30.721
whatever you're building.

41
00:02:30.721 --> 00:02:36.665
So in that, let's go ahead and make a new
directory in the root of our project now.

42
00:02:36.665 --> 00:02:39.485
I'm gonna call this internal, all right?

43
00:02:39.485 --> 00:02:44.655
And within internal,
we're gonna make a new folder called app.

44
00:02:44.655 --> 00:02:48.073
In this folder, I'm gonna stop
referring to them as folders,

45
00:02:48.073 --> 00:02:51.176
I'm gonna start referring
to these as packages, okay?

46
00:02:51.176 --> 00:02:57.360
Within app,
let's make a new file called app.go, okay?

47
00:02:57.360 --> 00:03:02.035
Here, we'll make and
declare our new package app, and

48
00:03:02.035 --> 00:03:06.128
this app is going to be
housing our application.

49
00:03:06.128 --> 00:03:10.901
So when I say housing,
the first thing I want

50
00:03:10.901 --> 00:03:15.420
us to start to think about is data, okay?

51
00:03:15.420 --> 00:03:17.112
When he says housing, okay, data.

52
00:03:17.112 --> 00:03:20.768
And then the second thing is
how are we gonna handle data?

53
00:03:20.768 --> 00:03:26.014
And whenever you ask that question of
how you're gonna handle data in Go,

54
00:03:26.014 --> 00:03:30.683
the first question-answer you
should have is do I need a struct?

55
00:03:30.683 --> 00:03:34.049
Does this package need a struct, yes, no?

56
00:03:34.049 --> 00:03:36.132
In our case, our app package,

57
00:03:36.132 --> 00:03:40.141
the responsibility of this app
package is going to be having

58
00:03:40.141 --> 00:03:44.572
a bunch of resources that we can
use throughout our application.

59
00:03:44.572 --> 00:03:47.230
And because we're gonna
be passing this around,

60
00:03:47.230 --> 00:03:49.137
a struct is a viable solution here.

61
00:03:49.137 --> 00:03:52.741
So we're gonna do type,
let's just call it Application.

62
00:03:52.741 --> 00:03:57.011
It's gonna be a struct, and the first
thing I'm gonna put is gonna be a logger.

63
00:03:57.011 --> 00:03:58.839
So let's just go ahead and
create a logger.

64
00:03:58.839 --> 00:04:02.479
We're gonna use the built-in
logger library,

65
00:04:02.479 --> 00:04:05.060
which you can use if you go up here.

66
00:04:05.060 --> 00:04:07.964
Let's do import, and let's just do log.

67
00:04:07.964 --> 00:04:14.620
And here,
it's going to be a pointer to log.Logger.

68
00:04:14.620 --> 00:04:17.707
And with a struct,
I didn't show this in a previous example.

69
00:04:17.707 --> 00:04:19.156
I like constructors.

70
00:04:19.156 --> 00:04:24.395
I like the theme, and
I like the purpose of a constructor.

71
00:04:24.395 --> 00:04:29.078
And I think for certain structs,
a constructor makes a lot of sense.

72
00:04:29.078 --> 00:04:30.480
So here,
we're gonna create our first construct.

73
00:04:30.480 --> 00:04:35.274
We're gonna do func, capital,
NewApplication, all right?

74
00:04:35.274 --> 00:04:36.921
And this is gonna return two things.

75
00:04:36.921 --> 00:04:42.359
It's gonna return a pointer to
Application and a potential error, okay?

76
00:04:42.359 --> 00:04:44.227
And here,
we're gonna instantiate our logger.

77
00:04:44.227 --> 00:04:48.548
So here we're gonna do log.New, okay?

78
00:04:48.548 --> 00:04:54.145
We're gonna have all of the message
from a logger go to our standard output,

79
00:04:54.145 --> 00:04:57.128
so we're gonna use os.Stdout, okay?

80
00:04:57.128 --> 00:05:01.457
If you have Go PLS setup,
you should get the built-in auto import.

81
00:05:01.457 --> 00:05:06.441
If not, make sure that you are bringing
the OS package at the top.

82
00:05:06.441 --> 00:05:08.769
The order does not matter between this and
the log import.

83
00:05:11.298 --> 00:05:13.102
&gt;&gt; Melkey: Okay,
the second I want to be blank, so

84
00:05:13.102 --> 00:05:16.019
we don't really care about any
of the semantic styling of log.

85
00:05:16.019 --> 00:05:19.235
But what we do wanna add to
our logger is timestamps.

86
00:05:19.235 --> 00:05:21.772
So what we can do is log.Ldate.

87
00:05:21.772 --> 00:05:26.417
I'm gonna pipe this with log.Ltime.

88
00:05:26.417 --> 00:05:30.671
Meaning, every time we use any of
the methods built into our logger, like

89
00:05:30.671 --> 00:05:35.903
printing, failing, error printing, we will
get the timestamp from our logger as well.

90
00:05:35.903 --> 00:05:38.428
Next, we're going to declare our app.

91
00:05:38.428 --> 00:05:42.435
So this is gonna be
a reference to our application.

92
00:05:42.435 --> 00:05:48.604
I'm gonna do Logger: logger, like so.

93
00:05:48.604 --> 00:05:51.995
And then we're gonna do return app and
nil.

94
00:05:51.995 --> 00:05:53.238
&gt;&gt; Student: What is the logger doing?

95
00:05:53.238 --> 00:05:57.510
&gt;&gt; Melkey: We're going to use the logger
as opposed to format println across our

96
00:05:57.510 --> 00:05:58.473
application.

97
00:05:58.473 --> 00:06:00.348
So this is gonna be
a more structured way for

98
00:06:00.348 --> 00:06:02.963
us to understand what's
happening in our backend system.

99
00:06:02.963 --> 00:06:06.894
And for us to properly diagnose
maybe error print statements or

100
00:06:06.894 --> 00:06:11.281
just things that we need to kind of
dig deeper and use print debugging.

101
00:06:14.046 --> 00:06:15.701
&gt;&gt; Melkey: Okay, so
a few things I wanna quickly mention here.

102
00:06:15.701 --> 00:06:20.030
So, one, we are returning a pointer
to application and an error type.

103
00:06:20.030 --> 00:06:24.457
This is the first time we should be
seeing the error type in our code.

104
00:06:24.457 --> 00:06:27.367
And you can see my return type,
I have app and nil.

105
00:06:27.367 --> 00:06:30.801
So nil are valid error types, okay?

106
00:06:30.801 --> 00:06:33.750
They satisfy the interface for an error.

107
00:06:33.750 --> 00:06:36.424
So you can put nil,
that's gonna be good, okay?

108
00:06:36.424 --> 00:06:40.518
As for the app itself, you can see here
I have the ampersand cuz I'm pointing to

109
00:06:40.518 --> 00:06:42.140
the memory of an application.

110
00:06:42.140 --> 00:06:45.046
If I remove this,
our compiler yells at us, right?

111
00:06:45.046 --> 00:06:48.891
If you want to solve this, you can just
move the pointer that we're responding

112
00:06:48.891 --> 00:06:50.996
with or returning with, to be more exact.

113
00:06:50.996 --> 00:06:54.999
But here, because we're gonna be
modifying our application and using it.

114
00:06:54.999 --> 00:06:59.935
And I also typically strongly recommend
that if you know the data structure

115
00:06:59.935 --> 00:07:03.942
of your app, I'd recommend
using a pointer to that struct.

116
00:07:03.942 --> 00:07:06.040
So here we have our application, okay?

117
00:07:06.040 --> 00:07:10.019
And right now, its simple functionality
is to create a new app for us.

118
00:07:13.475 --> 00:07:17.509
&gt;&gt; Melkey: Next, in internal,
we're not gonna write anything here, but

119
00:07:17.509 --> 00:07:20.135
let's make a new package called routes.

120
00:07:20.135 --> 00:07:22.072
And then within routes,
we're gonna do routes.go.

121
00:07:22.072 --> 00:07:25.435
And all I'm gonna write here is
package routes, cuz if you don't,

122
00:07:25.435 --> 00:07:27.099
your code's not gonna compile.

123
00:07:27.099 --> 00:07:33.111
That's all we're gonna do for now, okay?

124
00:07:35.393 --> 00:07:37.641
&gt;&gt; Melkey: And then back in our func main,

125
00:07:37.641 --> 00:07:41.024
we are going to do a couple
of exciting things.

126
00:07:41.024 --> 00:07:46.074
So first, we're not gonna change any
of the signature of the func main cuz

127
00:07:46.074 --> 00:07:51.548
we can't, but what we are going to do is
create and instantiate our app struct.

128
00:07:51.548 --> 00:07:53.839
So here, let's do an import, and

129
00:07:53.839 --> 00:07:59.384
this is gonna be where we import something
from our package, our own project here.

130
00:07:59.384 --> 00:08:02.867
If you need a reminder of
what your module is called,

131
00:08:02.867 --> 00:08:06.985
the go.mod is kind of the equivalent
of the package.json for

132
00:08:06.985 --> 00:08:10.014
those of us who are familiar
with the web dev.

133
00:08:10.014 --> 00:08:13.818
go.mod has the name of your module here.

134
00:08:13.818 --> 00:08:18.792
It will also have the version of Go that
was used to spin up, so the go.mod init.

135
00:08:18.792 --> 00:08:24.567
And as we bring in different imports
through our project, those direct and

136
00:08:24.567 --> 00:08:29.347
indirect projects and
imports will be listed in the go.mod.

137
00:08:29.347 --> 00:08:32.077
So here, I'm gonna go back to my main.

138
00:08:32.077 --> 00:08:37.957
I'm gonna import the name of my module
again, so github melkeydev femProject.

139
00:08:37.957 --> 00:08:43.307
And in here, I'm gonna route
it to internal/app, like so.

140
00:08:43.307 --> 00:08:45.855
And if you wanna confirm
that it worked correctly,

141
00:08:45.855 --> 00:08:49.184
you should be getting this error message,
imported but not used.

142
00:08:49.184 --> 00:08:51.062
If it says it cannot find the import,

143
00:08:51.062 --> 00:08:54.529
you may have some sort of mistake
going on between your module name.

144
00:08:54.529 --> 00:08:56.919
Don't forget the internal part.

145
00:08:56.919 --> 00:08:58.977
I do that sometimes.

146
00:08:58.977 --> 00:09:01.010
Here, were gonna instantiate your app.

147
00:09:01.010 --> 00:09:04.086
We're also gonna explicitly check for
the error,

148
00:09:04.086 --> 00:09:08.029
even though we know at this time
that error is always gonna be nil.

149
00:09:08.029 --> 00:09:15.651
We're gonna do app, error as the app name,
so app, I'm gonna do NewApplication.

150
00:09:23.475 --> 00:09:29.057
&gt;&gt; Melkey: Okay, here we say if err

151
00:09:29.057 --> 00:09:35.106
!= nil,
&gt;&gt; Melkey: We're going to panic.

152
00:09:35.106 --> 00:09:38.293
So this is the first
introduction to panic.

153
00:09:38.293 --> 00:09:42.438
Now, panic in Go is exactly
how it sounds like.

154
00:09:42.438 --> 00:09:45.802
It's gonna panic and
completely wipe and close your app.

155
00:09:45.802 --> 00:09:47.146
It's like self-destruction.

156
00:09:47.146 --> 00:09:50.857
It's going to exit the application
with a fatal error message.

157
00:09:50.857 --> 00:09:55.523
We reserve panic in situations
where it should never occur.

158
00:09:55.523 --> 00:09:59.574
And if it does,
stuff has hit the fan and we need to and

159
00:09:59.574 --> 00:10:03.092
our app deservedly should turn off or
break.

160
00:10:03.092 --> 00:10:06.830
You don't use panic if there is
a foreseen potential for an error or

161
00:10:06.830 --> 00:10:10.997
a controlled error statement,
because it will crash your application.

162
00:10:10.997 --> 00:10:15.125
So in this case,
we should never see our app.

163
00:10:15.125 --> 00:10:19.227
The kind of first step in our application,
we spin this up, error out.

164
00:10:19.227 --> 00:10:21.482
If we do,
then we know we can continue our app.

165
00:10:21.482 --> 00:10:26.459
We know if there's an error in getting
our application's struct that the rest of

166
00:10:26.459 --> 00:10:28.959
the app is gonna probably fault as well.

167
00:10:28.959 --> 00:10:31.621
So we have this panic here on purpose.

168
00:10:31.621 --> 00:10:36.555
It's a keyword and it has some pretty
powerful use cases that we can use.

169
00:10:38.943 --> 00:10:41.540
&gt;&gt; Melkey: Okay, next thing,
I'm gonna use app.

170
00:10:41.540 --> 00:10:44.567
I'm gonna use that logger property,
so .Logger.

171
00:10:44.567 --> 00:10:47.384
I'm just gonna do a println.

172
00:10:47.384 --> 00:10:52.789
And all I'm going to write is
we are running our app, like so.

