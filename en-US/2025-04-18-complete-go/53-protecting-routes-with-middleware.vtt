WEBVTT

1
00:00:00.000 --> 00:00:04.326
&gt;&gt; Melkey: So with a new middleware
handler, let's go back to our app.go and

2
00:00:04.326 --> 00:00:06.574
add this new middleware handler.

3
00:00:06.574 --> 00:00:08.886
So in application we
have our token handler.

4
00:00:08.886 --> 00:00:12.295
Let's add middleware, like so, okay?

5
00:00:12.295 --> 00:00:17.257
And this is gonna come from
the middleware.User middleware package.

6
00:00:17.257 --> 00:00:18.804
Okay, it gets auto imported.

7
00:00:23.000 --> 00:00:23.604
&gt;&gt; Melkey: So we have an error.

8
00:00:23.604 --> 00:00:26.547
So, GetUserToken,
let's see what's going on.

9
00:00:26.547 --> 00:00:31.495
So PostgresTokenStore, this sort of,

10
00:00:31.495 --> 00:00:36.322
okay, PostgresUserStore, there you go.

11
00:00:36.322 --> 00:00:39.056
Now it's happy.

12
00:00:39.056 --> 00:00:42.348
I put the wrong PostgresTokenStore
on the method receiver there.

13
00:00:42.348 --> 00:00:44.408
Make sure it's PostgresUserStore,

14
00:00:44.408 --> 00:00:48.796
or else you get errors that the interface
you're using isn't satisfied there.

15
00:00:48.796 --> 00:00:55.507
We'll do the middleware,
I guess we can call it handler, okay?

16
00:00:55.507 --> 00:01:00.199
And here we can just say,
middleware.UserMiddleware, like so.

17
00:01:00.199 --> 00:01:03.620
And then here, because we're going
to be instantiating a struct,

18
00:01:03.620 --> 00:01:07.102
we don't really necessarily need
a constructor every single time,

19
00:01:07.102 --> 00:01:09.214
we can instantiate it in place like this.

20
00:01:09.214 --> 00:01:11.542
So we can do middleware.UserMiddleware.

21
00:01:11.542 --> 00:01:16.100
And then user store will
be that UserStore variable.

22
00:01:16.100 --> 00:01:21.062
And down here we can do middleware,
is middleware handler, like so.

23
00:01:21.062 --> 00:01:25.360
All right, we have one more spot to
modify, which would be in routes.go.

24
00:01:25.360 --> 00:01:27.466
And this is gonna be
a pretty interesting one.

25
00:01:27.466 --> 00:01:32.388
So here you can see that we have
all of these methods declared.

26
00:01:32.388 --> 00:01:35.654
We have a get methods, post,
put, delete, etc, etc.

27
00:01:35.654 --> 00:01:40.341
So CH actually offers us this
really cool way of grouping

28
00:01:40.341 --> 00:01:43.541
a bunch of these functions together.

29
00:01:43.541 --> 00:01:46.753
And then we can basically
facilitate if any of them

30
00:01:46.753 --> 00:01:49.439
are going to require a middleware or not.

31
00:01:49.439 --> 00:01:54.650
So it gives us more control and
granularity over kinda, this access layer

32
00:01:54.650 --> 00:01:59.608
to what a logged in user, not logged
in user, and admin user can hit and

33
00:01:59.608 --> 00:02:04.506
access through our different methods here,
our different routes.

34
00:02:04.506 --> 00:02:11.569
So, we can do this by, right underneath
the rchi.NewRouter, you can do r.Group.

35
00:02:11.569 --> 00:02:12.569
You can see here,

36
00:02:12.569 --> 00:02:16.321
group creates a new inline mux with
a copy of the middleware stack.

37
00:02:16.321 --> 00:02:20.925
It's a useful group of handlers along the
same routing path that use an additional

38
00:02:20.925 --> 00:02:22.535
set of middlewares, okay?

39
00:02:22.535 --> 00:02:25.511
So again, you can also group them by /V1.

40
00:02:25.511 --> 00:02:26.801
You can have your V1 routes here.

41
00:02:26.801 --> 00:02:29.746
You can also group by V2 and
have your new modified routes there.

42
00:02:29.746 --> 00:02:35.794
But an aspect that I like about this is
it allows us to add a middleware into

43
00:02:35.794 --> 00:02:42.550
this group and have the functions within
the group kind of adhere to them, okay?

44
00:02:42.550 --> 00:02:44.590
So here we can do an anonymous func.

45
00:02:44.590 --> 00:02:52.795
So func, r will be a chi.Router, like so.

46
00:02:52.795 --> 00:02:54.239
Open the function body up.

47
00:02:54.239 --> 00:02:57.796
First argument will be r.Use.

48
00:02:57.796 --> 00:03:00.293
Or not argument, but
the first thing we'll write is Is r.Use.

49
00:03:00.293 --> 00:03:05.910
And then we put app.MiddlewareAuthenticate
as a first class citizen.

50
00:03:05.910 --> 00:03:08.452
And we can actually just see our .use,

51
00:03:08.452 --> 00:03:11.931
use appends more middlewares
onto the router stack.

52
00:03:11.931 --> 00:03:14.892
So exactly what we just
built as our middleware,

53
00:03:14.892 --> 00:03:18.012
we can now append it to
the existing Chi muck stack.

54
00:03:18.012 --> 00:03:21.954
So can do r.Use and
app.MiddlewareAuthenticate.

55
00:03:21.954 --> 00:03:26.144
So I had to repeat myself, I just want
to make sure that was clear, okay?

56
00:03:26.144 --> 00:03:31.897
And then we can go ahead and
take the workouts/{id} GET method,

57
00:03:31.897 --> 00:03:34.372
and all these methods here.

58
00:03:34.372 --> 00:03:37.759
Okay, so the handle GetWorkoutByID,
CreateWorkout, UpdateWorkout,

59
00:03:37.759 --> 00:03:38.572
DeleteWorkout.

60
00:03:38.572 --> 00:03:43.039
Actually, we don't even need to bring in
the CreateWorkout, we can leave that out.

61
00:03:43.039 --> 00:03:47.648
Actually, let's bring these ones, yeah.

62
00:03:47.648 --> 00:03:51.851
So the GetWorkout, CreateWorkout,
UpdateWorkout, and DeleteWorkout,

63
00:03:51.851 --> 00:03:55.609
we can take these and drop them within
the group that we just defined.

64
00:03:55.609 --> 00:03:59.882
And then you should have three
methods outside of that grouping,

65
00:03:59.882 --> 00:04:05.178
which is HealthCheck, HandleRegisterUser,
and HandleCreateToken, okay?

66
00:04:05.178 --> 00:04:08.124
So now if we save and
we restart our server.

67
00:04:10.789 --> 00:04:13.303
&gt;&gt; Melkey: Okay, no obvious scary errors.

68
00:04:13.303 --> 00:04:15.727
You can go here into one
of our other terminals.

69
00:04:15.727 --> 00:04:17.601
Clear., we can do the health check.

70
00:04:17.601 --> 00:04:24.585
So curl localhost:8080/health,
everything should be working accordingly.

71
00:04:24.585 --> 00:04:25.959
But you may be thinking,

72
00:04:25.959 --> 00:04:30.160
why do we just spend all this time to do
something that has really no benefit?

73
00:04:30.160 --> 00:04:37.182
Cuz if you notice, if you go back to
our middleware here in the method,

74
00:04:37.182 --> 00:04:43.371
regardless of the case for
a person without any auth headers or

75
00:04:43.371 --> 00:04:47.908
all of this logic,
the end is still the same.

76
00:04:47.908 --> 00:04:52.201
We're still just going to set the user and
then serve the HTTP,

77
00:04:52.201 --> 00:04:56.333
the next function that's in
the chain HTTP method, right?

78
00:04:56.333 --> 00:04:59.519
But really, we haven't done anything.

79
00:04:59.519 --> 00:05:03.299
Okay, so if we go back to our
routes here for a second, here,

80
00:05:03.299 --> 00:05:06.279
it's grouped with this
authenticate method.

81
00:05:06.279 --> 00:05:11.115
Okay, cool, so all requests are gonna
be injecting with anonymous user or

82
00:05:11.115 --> 00:05:12.281
a logged in user.

83
00:05:12.281 --> 00:05:15.669
But as far as the scope of these
functions, they actually don't care.

84
00:05:15.669 --> 00:05:17.192
They're gonna act the same way.

85
00:05:17.192 --> 00:05:21.525
There's no logic telling
them to behave differently

86
00:05:21.525 --> 00:05:25.770
depending on what that value
is within the context.

87
00:05:25.770 --> 00:05:30.772
So in the next bit, we're actually
going to introduce a new function

88
00:05:30.772 --> 00:05:36.551
that's actually going to wrap each
individual protected route, and it checks

89
00:05:36.551 --> 00:05:41.917
if the user in the request context is
an anonymous user and logged in user.

90
00:05:41.917 --> 00:05:42.781
And then what to do.

91
00:05:42.781 --> 00:05:46.760
Do we want to give them access to the rest
of the route, or do you want to just say

92
00:05:46.760 --> 00:05:50.159
block them and say, hey,
you cannot access these routes at all?

93
00:05:50.159 --> 00:05:53.522
So if we go back into our
middleware right here,

94
00:05:53.522 --> 00:05:58.582
we can go all the way to the bottom and
can give ourselves some more room.

95
00:05:58.582 --> 00:06:04.670
So, I just want to very much emphasize
the point of what happened, right?

96
00:06:04.670 --> 00:06:08.068
We just blanketed a bunch of
routes with this middleware.

97
00:06:08.068 --> 00:06:12.353
And all this authenticate method does
is insert user that's anonymous or

98
00:06:12.353 --> 00:06:14.506
insert user that's not anonymous.

99
00:06:14.506 --> 00:06:15.900
That's it.

100
00:06:15.900 --> 00:06:21.378
And so, this following function is going
to be able to receive that context,

101
00:06:21.378 --> 00:06:26.185
call the getUser function and
from the getUser function, depend or

102
00:06:26.185 --> 00:06:28.735
decide what to do, pass or no pass.

103
00:06:28.735 --> 00:06:30.468
So, how does that look?

104
00:06:30.468 --> 00:06:34.150
We can do func,
is gonna be a user middleware, and

105
00:06:34.150 --> 00:06:37.355
here we can call this
function requireUser.

106
00:06:39.306 --> 00:06:43.297
&gt;&gt; Melkey: Okay, a requireUser, it's
also going to have that same ability to

107
00:06:43.297 --> 00:06:45.967
pass on to the next HTTP
function right away.

108
00:06:45.967 --> 00:06:50.630
It's gonna be http.HandlerFunc,
like so, and

109
00:06:50.630 --> 00:06:55.521
to respond with an http.handlerFunc,
all right?

110
00:06:55.521 --> 00:06:59.489
And right away we can
return http.HandlerFunc.

111
00:06:59.489 --> 00:07:01.910
We're gonna call it an anonymous function.

112
00:07:01.910 --> 00:07:07.697
So, Func w HTTP ResponseWriter,

113
00:07:07.697 --> 00:07:12.093
pointer to HTTP request.

114
00:07:12.093 --> 00:07:15.865
I'm gonna open this up,
and here we're gonna do,

115
00:07:15.865 --> 00:07:18.780
user is going to be getUser, pass in r.

116
00:07:18.780 --> 00:07:20.283
And here we're gonna evaluate.

117
00:07:20.283 --> 00:07:27.566
If user.is anonymous,
I'm gonna do utils.writeJSON.

118
00:07:27.566 --> 00:07:29.151
I'm going to respond with w.

119
00:07:29.151 --> 00:07:32.286
And here I'm gonna do
HTTP status unauthorized.

120
00:07:39.884 --> 00:07:40.520
&gt;&gt; Melkey: Oops.

121
00:07:43.861 --> 00:07:48.667
&gt;&gt; Melkey: Okay, utils.envelope,
and here we can just say error.

122
00:07:48.667 --> 00:07:55.876
And say, you must be logged
in to access this route.

123
00:07:55.876 --> 00:07:57.780
Okay, and then we can return.

124
00:08:01.261 --> 00:08:07.273
&gt;&gt; Melkey: Next we can just
do next.serverHTTP(w, r).

125
00:08:07.273 --> 00:08:09.991
And that's all those
functions going to do,

126
00:08:09.991 --> 00:08:14.712
cuz the heavy lifting was already done
by the authenticate middleware that's

127
00:08:14.712 --> 00:08:18.014
injecting what that anonymous user or
user struck is.

128
00:08:18.014 --> 00:08:22.373
And getUser is gonna be a very
simple function that just

129
00:08:22.373 --> 00:08:24.853
extracts the value from that.

130
00:08:26.947 --> 00:08:31.657
&gt;&gt; Melkey: So now, if we go back
to routes, these functions here,

131
00:08:31.657 --> 00:08:35.281
we can actually do something pretty cool.

132
00:08:35.281 --> 00:08:40.098
We can do app.Middleware,
and we can do RequireUser,

133
00:08:40.098 --> 00:08:44.616
and we can wrap these functions around it,
like so.

134
00:08:47.470 --> 00:08:50.212
&gt;&gt; Melkey: Okay, so you can see we
had this app.WorkoutHandler handle

135
00:08:50.212 --> 00:08:51.030
getWorkuoutID.

136
00:08:51.030 --> 00:08:52.673
And now we're passing it and

137
00:08:52.673 --> 00:08:56.516
wrapping around this
app.Middleware.RequireUser function.

138
00:08:59.511 --> 00:09:03.493
&gt;&gt; Melkey: Okay, so
then we can do app.Middleware RequireUser.

139
00:09:12.299 --> 00:09:13.989
&gt;&gt; Melkey: Can do it to all of them.

140
00:09:13.989 --> 00:09:19.071
Or if you want, you can even add it to
a upper header of the use function.

141
00:09:19.071 --> 00:09:22.760
Having it fully authenticate
via this required user.

142
00:09:22.760 --> 00:09:28.542
I'm being a little bit more specific and
individually wrapping each and

143
00:09:28.542 --> 00:09:33.200
every single HTTP function I
want a user to be present for.

144
00:09:33.200 --> 00:09:35.528
There's many different
ways you can handle it.

145
00:09:35.528 --> 00:09:41.972
You can have your authenticate, you can
even have another function here, so r.Use,

146
00:09:41.972 --> 00:09:47.727
and you can have another one that checks
all the required users, if you want.

147
00:09:47.727 --> 00:09:49.074
And that can be part of the grouping.

148
00:09:49.074 --> 00:09:51.158
Or we can just handle them
individually like this.

149
00:09:54.122 --> 00:09:57.690
&gt;&gt; Melkey: And now, if we go back to
our Go, let's bring down the server.

150
00:09:57.690 --> 00:10:00.710
Go run main.go like so.

151
00:10:00.710 --> 00:10:02.763
Okay, that all works.

152
00:10:02.763 --> 00:10:08.218
If we go back to the exact same terminal,
if we run the exact same curl,

153
00:10:08.218 --> 00:10:12.940
this should work,
because status is unavailable, right?

154
00:10:12.940 --> 00:10:17.507
But if you do some like curl
localhost:8080/workout/2,

155
00:10:17.507 --> 00:10:21.186
you can see you must be logged
in to access this route.

156
00:10:21.186 --> 00:10:23.493
Because I just called it as
some random nobody, right?

157
00:10:23.493 --> 00:10:25.647
Some anonymous user.

158
00:10:25.647 --> 00:10:29.847
Again, the specific person
would probably ask,

159
00:10:29.847 --> 00:10:33.952
why are we blocking access
to getting workouts?

160
00:10:33.952 --> 00:10:35.597
This is just an example.

161
00:10:35.597 --> 00:10:38.337
This is a very just core example.

162
00:10:38.337 --> 00:10:42.697
Probably you want to have the ability for
anonymous users to look at workouts and

163
00:10:42.697 --> 00:10:45.054
peruse and
check out your app to an extent.

164
00:10:45.054 --> 00:10:49.854
And maybe you do these kind of blogs on
creating a workout, updating a workout,

165
00:10:49.854 --> 00:10:51.082
dealing a workout.

166
00:10:51.082 --> 00:10:56.023
But the the core here is that
we're demonstrating that you can

167
00:10:56.023 --> 00:11:01.353
fully block access to routes that
you control and that you choose.

