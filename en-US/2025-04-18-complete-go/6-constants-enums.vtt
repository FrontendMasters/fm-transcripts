WEBVTT

1
00:00:00.000 --> 00:00:03.411
&gt;&gt; Melkey: Next we can quickly talk about
constants, obviously they don't change.

2
00:00:03.411 --> 00:00:07.614
To use and to declare a const,
you can just use C-O-N-S-T, and

3
00:00:07.614 --> 00:00:11.530
then say something like pi
equals like 3.14, all right?

4
00:00:11.530 --> 00:00:14.442
Very key distinction between variable and
const,

5
00:00:14.442 --> 00:00:18.108
you can't re-sign this to anything,
it's gonna yell at you.

6
00:00:18.108 --> 00:00:24.664
But another cool thing is, the compiler
does not care if you have an unused const.

7
00:00:24.664 --> 00:00:27.462
You can have a const and you can never
reference it again, compilers don't care.

8
00:00:27.462 --> 00:00:29.626
But if it's a variable, it does, okay?

9
00:00:29.626 --> 00:00:33.291
And the reason for that is actually
it's a memory allocation reason,

10
00:00:33.291 --> 00:00:37.017
cuz if you have a variable that's
declared that can't change values,

11
00:00:37.017 --> 00:00:41.077
it wants to make sure it knows what
the value is when it's compiling, right?

12
00:00:41.077 --> 00:00:44.314
It's gonna use a string, it's unused,
it doesn't allocate any memory to it.

13
00:00:44.314 --> 00:00:47.181
Or if that string is going to be
something that you assign later,

14
00:00:47.181 --> 00:00:50.313
the compiler is aware of it versus
a const at the time that you write it,

15
00:00:50.313 --> 00:00:52.171
the time it compiles, it's gonna know,

16
00:00:52.171 --> 00:00:55.223
it's gonna allocate a certain
amount of memory for this constant.

17
00:00:55.223 --> 00:00:57.395
So it doesn't care if it's unused,
cuz you can't change it, right?

18
00:00:57.395 --> 00:00:59.821
It takes advantage of that concept.

19
00:00:59.821 --> 00:01:02.765
With consts,
you can do a few different things.

20
00:01:02.765 --> 00:01:06.425
You can do like consts and again,

21
00:01:06.425 --> 00:01:10.869
you can put something like Monday = 1,

22
00:01:10.869 --> 00:01:15.458
Tuesday = 2, and then Wednesday = 3.

23
00:01:15.458 --> 00:01:20.312
So you have this quick way to
assign consts with integers or

24
00:01:20.312 --> 00:01:24.881
any kinda value you want,
you can do format.printf.

25
00:01:24.881 --> 00:01:33.019
Again, I'm not gonna print the the pie
cuz the compiler doesn't care but

26
00:01:33.019 --> 00:01:38.794
even with printf,
we can do something like Monday,

27
00:01:38.794 --> 00:01:45.370
we can do press module %,
Tuesday module %, Wednesday.

28
00:01:45.370 --> 00:01:47.126
And then put them in
the order they come in.

29
00:01:47.126 --> 00:01:50.504
You can see here the compiler gives me
a warning that we have these format

30
00:01:50.504 --> 00:01:53.840
specifiers, but we haven't specified
the type associated to them.

31
00:01:53.840 --> 00:01:58.538
So we can just do Monday,
Tuesday, and Wednesday, save this.

32
00:01:58.538 --> 00:02:04.759
Run it, there you go, Monday, 1,
Tuesday, 2, Wednesday, 3, okay?

33
00:02:04.759 --> 00:02:07.823
So const have a certain use case.

34
00:02:07.823 --> 00:02:10.896
There's also typed versus untyped const,
so

35
00:02:10.896 --> 00:02:14.375
you can do something like const,
typed age, oops!

36
00:02:14.375 --> 00:02:17.276
Age, it's gonna be an int.

37
00:02:17.276 --> 00:02:18.363
It's gonna directly specify.

38
00:02:18.363 --> 00:02:20.979
You can do 25 or you can do const.

39
00:02:20.979 --> 00:02:25.260
UntypedAge and just set it to 25 like so.

40
00:02:25.260 --> 00:02:27.075
These are gonna be the same thing.

41
00:02:27.075 --> 00:02:30.652
So you can do format print line.

42
00:02:30.652 --> 00:02:34.242
You can say typedAge = untypedAge.

43
00:02:34.242 --> 00:02:37.093
Save this and this should print true,
there you go.

44
00:02:37.093 --> 00:02:38.278
So it doesn't matter, right?

45
00:02:38.278 --> 00:02:43.389
A little bit more flexibility with consts,
constants, I should say.

46
00:02:43.389 --> 00:02:48.641
With consts, there's a pretty
cool thing that we could do.

47
00:02:48.641 --> 00:02:53.201
So, a lot of people when they look at
Go and they maybe come from a different

48
00:02:53.201 --> 00:02:57.488
language, notice that there is
a certain lack of features, right?

49
00:02:57.488 --> 00:02:59.468
Of course, it's gonna happen.

50
00:02:59.468 --> 00:03:02.791
One feature that Go locks
that is one that a lot

51
00:03:02.791 --> 00:03:06.475
of people would like to see are enums,
all right?

52
00:03:06.475 --> 00:03:11.557
And so Go does not have a native
enum structure or type.

53
00:03:11.557 --> 00:03:16.603
However, there is a keyword function

54
00:03:16.603 --> 00:03:22.605
that provides a surface
level use of an enum.

55
00:03:22.605 --> 00:03:24.450
So here we can do const, right?

56
00:03:24.450 --> 00:03:27.658
We can open up our parentheses and
let's say we're gonna do some consts or

57
00:03:27.658 --> 00:03:28.498
enums for months.

58
00:03:28.498 --> 00:03:32.119
So we can say Jan and
here we can set it to an int, and

59
00:03:32.119 --> 00:03:34.977
we can use the built-in keyword iota.

60
00:03:34.977 --> 00:03:37.433
And I'm just gonna do plus 1.

61
00:03:37.433 --> 00:03:41.463
So the plus 1 just means it's not gonna
start at 0, it's gonna start at 1,

62
00:03:41.463 --> 00:03:43.155
January being the first month.

63
00:03:43.155 --> 00:03:48.377
And now if I do Feb, I can just leave
it like this, I can do March and April.

64
00:03:48.377 --> 00:03:51.949
And what it's gonna do is
enumerate February, March,

65
00:03:51.949 --> 00:03:56.511
April as the next integer value from
the start of our iota declaration.

66
00:03:56.511 --> 00:04:02.892
So if January over here,
this is going to be 1, right?

67
00:04:02.892 --> 00:04:06.700
Then Feb will be 2, March will be 3,

68
00:04:06.700 --> 00:04:11.106
April will be 4, and
so forth and so forth.

69
00:04:11.106 --> 00:04:15.111
As long as they are declared in
the scope of our constants here through

70
00:04:15.111 --> 00:04:16.086
the iota scope.

71
00:04:16.086 --> 00:04:19.195
&gt;&gt; Speaker 2: You could admit the int,
right?

72
00:04:19.195 --> 00:04:22.630
&gt;&gt; Melkey: Let's see, think so.

73
00:04:22.630 --> 00:04:25.368
I guess you can, yeah.

74
00:04:25.368 --> 00:04:28.379
Yeah, I think you can maybe
specify this definitely, but yeah.

75
00:04:28.379 --> 00:04:30.978
You can omit it or not.

76
00:04:30.978 --> 00:04:32.294
It's actually validate, that's a format.

77
00:04:32.294 --> 00:04:35.024
Let's just do a quick printf Jan.

78
00:04:35.024 --> 00:04:37.446
Let's do [INAUDIBLE].

79
00:04:44.323 --> 00:04:49.151
&gt;&gt; Melkey: And April, apr.

80
00:04:49.151 --> 00:04:54.940
Okay, we'll put Jan, Feb, March, April.

81
00:04:54.940 --> 00:04:58.167
Break the line.

82
00:04:58.167 --> 00:05:00.794
Yeah, you can definitely omit it.

83
00:05:00.794 --> 00:05:05.083
So that's like a very of
an implementation of enums.

84
00:05:05.083 --> 00:05:09.155
I kind of suspect that's
why the Go team has yet

85
00:05:09.155 --> 00:05:15.324
to fully implement enums into the core
library, because of the iota.

86
00:05:15.324 --> 00:05:19.806
But I do think there's a lot of different
use case of enums that go beyond just

87
00:05:19.806 --> 00:05:24.093
making sure that a string representation
is represented as an integer.

