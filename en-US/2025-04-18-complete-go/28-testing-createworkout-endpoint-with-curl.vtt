WEBVTT

1
00:00:00.000 --> 00:00:02.194
So we are missing one more thing and

2
00:00:02.194 --> 00:00:06.584
that's because we have declared
the workout store in the handler and

3
00:00:06.584 --> 00:00:09.915
our constructor is expecting
this workout store but

4
00:00:09.915 --> 00:00:14.853
we haven't actually called the workout
handler with the new work out store.

5
00:00:14.853 --> 00:00:19.796
So if we go back to our app.go you can
see here our lovely compile is already

6
00:00:19.796 --> 00:00:21.969
yelling at us, which is great.

7
00:00:21.969 --> 00:00:25.489
And here we're gonna do
declare our workout store.

8
00:00:25.489 --> 00:00:29.557
It's going to be
store.NewPostgresWorkoutStore, and

9
00:00:29.557 --> 00:00:34.708
it expects one argument, which is our
database, we can pass in our PGDB.

10
00:00:34.708 --> 00:00:38.827
And then to finalize the loop,
we can go into the workout handler and

11
00:00:38.827 --> 00:00:40.571
pass in that workout store.

12
00:00:40.571 --> 00:00:45.570
So with all that kinda hooked up, I think
it's a good time to try out if it works.

13
00:00:45.570 --> 00:00:49.840
So what we can do is if you
go to a different terminal,

14
00:00:49.840 --> 00:00:52.273
go ahead and do run main.go.

15
00:00:54.308 --> 00:00:59.706
&gt;&gt; Melkey: Let's see,
I almost forgot to turn my database.

16
00:00:59.706 --> 00:01:03.524
So if you go, docker, make sure
the database's running, docker compose up.

17
00:01:03.524 --> 00:01:06.061
Okay, so yeah,
make sure you have your database running.

18
00:01:06.061 --> 00:01:10.064
That was an example of our application
panicking because our database connection

19
00:01:10.064 --> 00:01:10.999
wasn't working.

20
00:01:10.999 --> 00:01:14.881
Now if we do go run main.go,
if this doesn't work,

21
00:01:14.881 --> 00:01:17.276
I'll be very sad, but it does.

22
00:01:17.276 --> 00:01:20.212
All right, so we have our database
connected, we're back and running.

23
00:01:20.212 --> 00:01:25.282
If you open up a business at
fourth terminal, all right?

24
00:01:25.282 --> 00:01:27.528
This is where we're gonna curl a request.

25
00:01:27.528 --> 00:01:32.447
Now, as at the beginning you can go ahead
and use any sort of API cutlery runner,

26
00:01:32.447 --> 00:01:37.085
post man, post woman, Bruno,
these are all viable options, I use curl.

27
00:01:37.085 --> 00:01:38.313
Now, curl is great,

28
00:01:38.313 --> 00:01:42.220
however typing all along takes quite
a bit of time, it looks messy.

29
00:01:42.220 --> 00:01:45.393
I have this file called post_notes.txt.

30
00:01:45.393 --> 00:01:49.170
Now, typically, I don't like doing this,
I don't like how people just,

31
00:01:49.170 --> 00:01:50.833
here's some code, bring it in.

32
00:01:50.833 --> 00:01:54.866
I'm making the exception here cuz they're
just pro requests with JSON bodies.

33
00:01:54.866 --> 00:01:57.029
Now, I just wanna quickly
explain how these are set out.

34
00:01:57.029 --> 00:02:01.472
There's this little number here
at the beginning, 1.5, and

35
00:02:01.472 --> 00:02:04.390
then the actual JSON request here, okay?

36
00:02:04.390 --> 00:02:07.701
And you can see the following is 1.6,
and if you keep scrolling down,

37
00:02:07.701 --> 00:02:09.011
there's 3.1, 3.2.

38
00:02:09.011 --> 00:02:13.131
These are related to the current
submodule that we are working on.

39
00:02:13.131 --> 00:02:16.917
So right now we are on submodule 1.5.

40
00:02:16.917 --> 00:02:20.708
So when you go back, what we're doing
here, and I'll add this to the commit

41
00:02:20.708 --> 00:02:24.519
message, 1.5 matches the 1.5 co
request that we're creating here.

42
00:02:24.519 --> 00:02:29.168
We have our Go server running,
we have our Davis connection.

43
00:02:29.168 --> 00:02:34.575
And then in the fourth terminal, go ahead
and connect via PSQL, so I use PSQL.

44
00:02:34.575 --> 00:02:38.940
We can do use Postgres,
the host is local host, port 5432.

45
00:02:38.940 --> 00:02:43.448
Remember, if you are doing
this on a different from port,

46
00:02:43.448 --> 00:02:47.777
not 5432,
make sure that is declared here, okay?

47
00:02:47.777 --> 00:02:51.429
And here now I can actually
access the database,

48
00:02:51.429 --> 00:02:56.965
I can do slash DT to see all of the
schemas we have through Goose migration.

49
00:02:56.965 --> 00:03:00.965
You can check, select all from workouts,
this should be empty as it is, but

50
00:03:00.965 --> 00:03:03.042
we can see the schema definition here.

51
00:03:13.900 --> 00:03:19.074
&gt;&gt; Melkey: So now with all that setup,
let's go ahead and copy the very first

52
00:03:19.074 --> 00:03:25.677
curl command from the postnotes.txt
right here, so that should be under 1.5.

53
00:03:25.677 --> 00:03:30.878
And if we go into,
I guess this would be a fifth terminal and

54
00:03:30.878 --> 00:03:36.200
we paste it, which should see
the response in JSON, okay?

55
00:03:36.200 --> 00:03:40.247
So now we have essentially created
a workout with the body of title,

56
00:03:40.247 --> 00:03:43.584
description duration minutes,
calories burned, and

57
00:03:43.584 --> 00:03:47.702
entries, the cool part here is
entries is a list of workout entries,

58
00:03:47.702 --> 00:03:52.118
each with the individual exercise name,
such as squats and bench press.

59
00:03:52.118 --> 00:03:53.813
And you can add on to this,
there's no limit.

60
00:03:53.813 --> 00:03:59.358
This could be empty if you want, well, no,
it has to have at least one workout entry,

61
00:03:59.358 --> 00:04:02.073
but this could be as
large as we want it to.

62
00:04:02.073 --> 00:04:06.397
And the expected response is
responding work to create

63
00:04:06.397 --> 00:04:09.781
a workout from our handler up here, okay?

64
00:04:09.781 --> 00:04:14.063
And if we kind of go back to PSQL,
and I just ran the command,

65
00:04:14.063 --> 00:04:19.290
select all from workouts before
running this command, this was empty,

66
00:04:19.290 --> 00:04:23.760
if I run this now, I now have
an actual entry into my database.

67
00:04:23.760 --> 00:04:27.780
You can see here morning strength
training, description, full body strength

68
00:04:27.780 --> 00:04:31.442
training session, duration 60 minutes,
I burned 500 calories.

69
00:04:31.442 --> 00:04:33.091
And the created ad and

70
00:04:33.091 --> 00:04:38.593
the updated ad is the time at which
this was inserted into our database.

71
00:04:38.593 --> 00:04:40.734
And we can even take this
one step further, right?

72
00:04:40.734 --> 00:04:45.597
Because we have workout entries,
if we do select all

73
00:04:45.597 --> 00:04:50.460
from workout_entries,
we can see here we do in fact

74
00:04:50.460 --> 00:04:55.450
see the squat and
the bench entries for that workout.

75
00:04:55.450 --> 00:05:00.662
You can see in the second column here that
the worker ID is one for both of these

76
00:05:00.662 --> 00:05:05.649
worker entries, which matches
the workout ID from the previous table.

77
00:05:05.649 --> 00:05:09.363
Does anyone have any questions,
anyone kind of seeing any errors,

78
00:05:09.363 --> 00:05:10.938
is it working for everyone?

79
00:05:10.938 --> 00:05:14.780
&gt;&gt; Speaker 2: Michael in chat
says he's getting an error,

80
00:05:14.780 --> 00:05:20.455
column exercise name of relation
workout entries does not exist.

81
00:05:20.455 --> 00:05:25.062
&gt;&gt; Melkey: That error is in the SQL
under migrations work on entries,

82
00:05:25.062 --> 00:05:28.924
they don't have the exercise
name column here.

83
00:05:28.924 --> 00:05:33.676
So make sure you have
double-checked the repo I pushed,

84
00:05:33.676 --> 00:05:36.943
make sure your SQL tables are correct.

85
00:05:36.943 --> 00:05:41.292
If you ran your migration with
an incorrect workout schema or

86
00:05:41.292 --> 00:05:46.747
you missed a field, what I recommend at
this point is just new to database and

87
00:05:46.747 --> 00:05:52.134
rerun it, or you can skip ahead and
figure out how to do the migration call.

