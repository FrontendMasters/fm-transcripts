WEBVTT

1
00:00:00.181 --> 00:00:04.509
&gt;&gt; Melkey: Next thing I kinda wanna
show is just some quality of life

2
00:00:04.509 --> 00:00:08.297
features in the funk main
with another package.

3
00:00:08.297 --> 00:00:12.005
So the standard library and
go is super rich.

4
00:00:12.005 --> 00:00:13.603
It's like, it's fat.

5
00:00:13.603 --> 00:00:15.051
That's the best way I could describe it.

6
00:00:15.051 --> 00:00:18.470
There's so
many different packages that, again,

7
00:00:18.470 --> 00:00:23.208
you don't need any external package,
like a purist, a code purist will

8
00:00:23.208 --> 00:00:27.730
write everything themselves,
which is very awesome, I would say.

9
00:00:27.730 --> 00:00:33.090
But because of that it makes a challenge
of someone trying to teach code hard.

10
00:00:33.090 --> 00:00:36.550
I can't teach everything
from the standard library,

11
00:00:36.550 --> 00:00:41.059
we'll be here until the next snowstorm
alert, but what I do want to do is

12
00:00:41.059 --> 00:00:46.117
introduce some packages that may catch
your eye, catching interest, right?

13
00:00:46.117 --> 00:00:51.157
And I think one that is worth
mentioning is the flag package.

14
00:00:51.157 --> 00:00:55.893
Okay, so the flag package in go
basically allows us to parse flags to be

15
00:00:55.893 --> 00:00:58.482
passed in when calling our function.

16
00:00:58.482 --> 00:01:02.120
This could be our binary executable
file if you create one or

17
00:01:02.120 --> 00:01:03.878
just using go run main.go.

18
00:01:03.878 --> 00:01:08.343
So here we can declare our
variable as port, can be int.

19
00:01:08.343 --> 00:01:11.441
We don't need to assign
a value right here.

20
00:01:11.441 --> 00:01:17.695
But what we can do is use our new
flag package and grab int var, okay?

21
00:01:17.695 --> 00:01:22.876
And here we're gonna pass it the address
of the port because we want to parse

22
00:01:22.876 --> 00:01:27.647
the value we are getting from
the command into our port integer here,

23
00:01:27.647 --> 00:01:30.543
our variable port, which is an integer.

24
00:01:30.543 --> 00:01:35.546
We're gonna say port, which is the name
of the flag that we will add, okay?

25
00:01:35.546 --> 00:01:38.290
And then we'll give it
a default value 8080.

26
00:01:38.290 --> 00:01:41.344
Meaning, if someone calls our function and
don't pass port,

27
00:01:41.344 --> 00:01:44.929
we will default this to 8080, and
we'll just give it a description.

28
00:01:44.929 --> 00:01:49.969
Go backend server port like so,
and then don't forget,

29
00:01:49.969 --> 00:01:53.119
you have to do flag.parse, okay?

30
00:01:53.119 --> 00:01:57.838
This actually calls the parse function,
which does all the heavy lifting for

31
00:01:57.838 --> 00:01:58.570
us, okay?

32
00:01:58.570 --> 00:02:04.602
And then here in address, we can actually
fully replace this with format.sprintf.

33
00:02:04.602 --> 00:02:07.743
Now, sprintf, very similar to printf, but

34
00:02:07.743 --> 00:02:10.893
the s in front of it
returns a variable for us.

35
00:02:10.893 --> 00:02:15.011
So printf, just quickly, just right away,
prints to the standard output.

36
00:02:15.011 --> 00:02:19.129
This printf returns a variable for
us, okay?

37
00:02:19.129 --> 00:02:23.697
And in here, When you're calling ("%d",

38
00:02:23.697 --> 00:02:28.502
port), and
we'll put in port variable like so.

39
00:02:28.502 --> 00:02:32.902
So now when we run we should
be able to go back, nuke this,

40
00:02:32.902 --> 00:02:35.488
run it again, and you know what?

41
00:02:35.488 --> 00:02:40.432
I'm gonna add something,
so here I'm wanna do,

42
00:02:40.432 --> 00:02:47.377
I wanna move up blogger, put it down here,
and I'm gonna say printf,

43
00:02:47.377 --> 00:02:51.988
I'm gonna say we are running
on port modulo d.

44
00:02:55.319 --> 00:02:57.500
&gt;&gt; Melkey: We can put our
port variable like so.

45
00:02:57.500 --> 00:03:02.900
And here, if you run this, we should
see we are running on port 8080 but

46
00:03:02.900 --> 00:03:07.473
if here, if we do go, run,
main.go, port 8081, oops.

47
00:03:07.473 --> 00:03:11.538
Go, run, main.go, port 8081,

48
00:03:11.538 --> 00:03:17.713
you should see we are now
running on port 8081, right?

49
00:03:17.713 --> 00:03:20.809
Key difference here versus here,
default value,

50
00:03:20.809 --> 00:03:24.345
it's gonna go back to whatever
the default we set up here.

51
00:03:24.345 --> 00:03:26.390
Otherwise you can specify the port.

52
00:03:26.390 --> 00:03:30.619
So that's just some of the abilities
that the flag package provides us.

53
00:03:30.619 --> 00:03:34.865
So we can use it for
distinguishing how we're gonna change

54
00:03:34.865 --> 00:03:39.036
the behavior app depending on
what the user passes to us.

55
00:03:39.036 --> 00:03:43.564
&gt;&gt; Speaker 2: Are there environment
variable techniques you can use as well?

56
00:03:43.564 --> 00:03:47.554
&gt;&gt; Melkey: Yeah, there is definitely lots
of environmental variable techniques

57
00:03:47.554 --> 00:03:48.489
that we can use.

58
00:03:48.489 --> 00:03:51.210
There's like the OS packaging go,

59
00:03:51.210 --> 00:03:54.941
the built in here has
something that you can use.

60
00:03:54.941 --> 00:03:58.355
I think it's got OS Getenv like here.

61
00:03:58.355 --> 00:04:01.562
So get into, choose a value of
the environment variable named by the key.

62
00:04:01.562 --> 00:04:06.324
So you can use something like this,
but there's actually a package that

63
00:04:06.324 --> 00:04:11.025
makes retrieving get environment
variables from a .env much easier.

64
00:04:11.025 --> 00:04:13.961
So again,
it's a function that you'd bring in, or

65
00:04:13.961 --> 00:04:17.714
package you'd bring in makes
environment variables super easy.

66
00:04:17.714 --> 00:04:20.537
And one thing you can do if you want is,

67
00:04:20.537 --> 00:04:24.608
you can parse a value from
the command line interface.

68
00:04:24.608 --> 00:04:30.901
If it's not there, you can default to the
OS.Getenv value, or you can replace it.

69
00:04:30.901 --> 00:04:32.944
So there's a few things you can do there.

