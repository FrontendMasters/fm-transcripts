WEBVTT

1
00:00:00.000 --> 00:00:02.535
&gt;&gt; Melkey: With arrays,
they're fairly defined.

2
00:00:02.535 --> 00:00:04.726
Then there's slices, okay?

3
00:00:04.726 --> 00:00:09.156
And so the kind of two hand
definition of a slice is,

4
00:00:09.156 --> 00:00:12.666
slices are dynamic arrays, all right?

5
00:00:12.666 --> 00:00:14.199
So when you think of an array in Python,

6
00:00:14.199 --> 00:00:16.019
that's kind of what a slice could be,
right?

7
00:00:16.019 --> 00:00:19.959
And what's happening under
the hood is a slice is defined.

8
00:00:19.959 --> 00:00:23.430
With a certain set size right,
that we don't define it.

9
00:00:23.430 --> 00:00:25.083
The com,
the memory compiler understands it.

10
00:00:25.083 --> 00:00:29.134
And then when we wanna add more
valleys to our slice, what's happening

11
00:00:29.134 --> 00:00:33.805
is the Go compilr, Go code is actually
just doubling it every single time, okay?

12
00:00:33.805 --> 00:00:37.101
So that's how it copies
that dynamic nature.

13
00:00:37.101 --> 00:00:40.359
An array, it's very rigid, it's defined.

14
00:00:40.359 --> 00:00:42.981
It can only hold five ints,
and that's all it could do.

15
00:00:42.981 --> 00:00:44.859
And it's your choice to use them or not.

16
00:00:44.859 --> 00:00:48.865
Whereas a slice, you can define it as
anything like it could be five slice,

17
00:00:48.865 --> 00:00:51.804
it could be five values, and
you can append more to it.

18
00:00:51.804 --> 00:00:56.056
You can continue to append to continuously
grow pros and cons arrays more

19
00:00:56.056 --> 00:01:00.445
memory efficient, more memory, you know,
good for better for the memory

20
00:01:00.445 --> 00:01:05.058
cuz the compound knows right away how
much allocate a slice changes on the fly.

21
00:01:05.058 --> 00:01:08.163
So some key distinctions there.

22
00:01:08.163 --> 00:01:14.223
And another definition of a slice is
a slice could be a slice of an array,

23
00:01:14.223 --> 00:01:17.157
so a portion of the array, right?

24
00:01:17.157 --> 00:01:22.214
If we defined our array as the full five
slot, a slice could be a portion there,

25
00:01:22.214 --> 00:01:27.212
or in some cases, could be the entire
thing that you wanna make more dynamic.

26
00:01:27.212 --> 00:01:28.687
Let me show you an example.

27
00:01:28.687 --> 00:01:31.337
So above,
we have our numbers array, right?

28
00:01:31.337 --> 00:01:34.288
We can have something like all numbers.

29
00:01:34.288 --> 00:01:35.611
We have a short form notation.

30
00:01:35.611 --> 00:01:39.981
We can say numbers with this syntax here.

31
00:01:39.981 --> 00:01:45.107
This is basically saying we are making
a slice copy of our numbers array,

32
00:01:45.107 --> 00:01:47.639
and now we have all numbers, okay?

33
00:01:47.639 --> 00:01:52.879
So at this point in time, all numbers and
numbers are both data structures

34
00:01:52.879 --> 00:01:58.304
that are hold five integers,
10, 20, 30, 40, and 50, okay?

35
00:01:58.304 --> 00:02:03.141
The key difference, however, with all
numbers slice is now we can append

36
00:02:03.141 --> 00:02:07.758
more values to it, and we do not
adhere to the constraint of the array.

37
00:02:07.758 --> 00:02:11.947
You can also do this a little
bit more explicitly,

38
00:02:11.947 --> 00:02:18.430
with first three as numbers, and we can
just bring in the first three values,

39
00:02:18.430 --> 00:02:22.655
so we can index the zeroth
to the third value here.

40
00:02:22.655 --> 00:02:25.377
And this is how it's like
a slice of the array.

41
00:02:25.377 --> 00:02:29.213
It's like a portion of the array
that we're going to use, okay.

42
00:02:29.213 --> 00:02:31.113
And so
we can have different methods on it.

43
00:02:31.113 --> 00:02:32.258
We can do all numbers.

44
00:02:32.258 --> 00:02:36.270
And you can even see here we're
getting this nice little hint for

45
00:02:36.270 --> 00:02:40.948
all numbers right with this append key
function here which if you notice if I

46
00:02:40.948 --> 00:02:43.782
type in numbers does not exist at all,
okay?

47
00:02:43.782 --> 00:02:48.037
Arrays do not have the ability
to have values appended to them.

48
00:02:48.037 --> 00:02:51.334
Slices can, and
what's happening under the hood?

49
00:02:51.334 --> 00:02:55.993
Don't fully call me on this, but depending
on how much size being allocated to

50
00:02:55.993 --> 00:03:00.174
the slice, Go is going to double it
in size every single time, right?

51
00:03:00.174 --> 00:03:03.884
So if you want a slice of three and
it starts off as a slice of two,

52
00:03:03.884 --> 00:03:05.219
goes gonna double it.

53
00:03:05.219 --> 00:03:08.333
So your slice is gonna
have a capacity of four.

54
00:03:08.333 --> 00:03:12.963
And next we add two more values, gonna
double it and continue so forth and so

55
00:03:12.963 --> 00:03:13.931
forth, yeah?

56
00:03:13.931 --> 00:03:16.016
&gt;&gt; Student: Is it like a linked list or
something,

57
00:03:16.016 --> 00:03:19.745
or is it actually just creating
a new array with twice the capacity?

58
00:03:19.745 --> 00:03:22.008
&gt;&gt; Melkey: It's creating a new
array of voice capacity.

59
00:03:22.008 --> 00:03:23.624
Check these things out.

60
00:03:23.624 --> 00:03:27.583
This is a really good case of a slice.

61
00:03:27.583 --> 00:03:32.684
However, I think a more practical,
less like, I'm gonna teach

62
00:03:32.684 --> 00:03:38.362
you something course feature of slices
is using them as dynamic arrays.

63
00:03:38.362 --> 00:03:41.915
Okay, so for example,
let's say we have this fruit slice.

64
00:03:41.915 --> 00:03:47.365
The syntax to declare your own slice is
very similar to the syntax to declare

65
00:03:47.365 --> 00:03:53.524
your own array with the square brackets,
but this time, that's it string like so.

66
00:03:53.524 --> 00:03:58.901
So the key difference is we do not have
the capacity in the notation here,

67
00:03:58.901 --> 00:04:01.031
it is just indicating to go.

68
00:04:01.031 --> 00:04:05.181
Then now this is going to be
a slice instead of a rigid array.

69
00:04:05.181 --> 00:04:08.256
This, again, I was saying this pros and

70
00:04:08.256 --> 00:04:11.784
cons to this right memory
allocation speed but

71
00:04:11.784 --> 00:04:17.221
see how it is with more of the use
case that those data structures offer.

72
00:04:17.221 --> 00:04:21.445
If you know the size of the data be
handling is going to be five and

73
00:04:21.445 --> 00:04:24.094
is no need to use a slice, use an array.

74
00:04:24.094 --> 00:04:25.446
Makes more sense you don't lose anything.

75
00:04:25.446 --> 00:04:30.129
If you know your data could be growing,
shrinking, going diagonal, I don't know,

76
00:04:30.129 --> 00:04:31.962
use a slice or yeah, use a slice.

77
00:04:31.962 --> 00:04:33.812
The other one use an array.

78
00:04:33.812 --> 00:04:38.650
For fruits, we can have apple, banana,

79
00:04:38.650 --> 00:04:43.498
and I don't know, strawberry, right?

80
00:04:43.498 --> 00:04:46.235
So now we have our
defined slice of fruits.

81
00:04:46.235 --> 00:04:51.942
We can do format, print F,
these are my fruits.

82
00:04:51.942 --> 00:04:56.340
Modulo V, break the line and
type in fruits, right?

83
00:04:56.340 --> 00:05:01.325
You can see now we have apple, banana,
strawberry, which is great for a smoothie.

84
00:05:01.325 --> 00:05:06.191
But now we can explore some built
in methods that really give a good

85
00:05:06.191 --> 00:05:08.500
appeal to two slices, right?

86
00:05:08.500 --> 00:05:11.450
So here we can do something like fruits,
and

87
00:05:11.450 --> 00:05:14.097
we can use the built in keyword append.

88
00:05:14.097 --> 00:05:18.225
So if you wanna append something
to a slice, you have to do append,

89
00:05:18.225 --> 00:05:23.166
then the existing slice as it is, as
the first argument to the append function,

90
00:05:23.166 --> 00:05:25.857
and then the value you
wantna append to it.

91
00:05:25.857 --> 00:05:28.239
So let's say I want to append a kiwi.

92
00:05:28.239 --> 00:05:36.320
This is great, this works if I now print
that same these are my fruits with kiwi.

93
00:05:36.320 --> 00:05:38.024
You can see now we have apple, banana,

94
00:05:38.024 --> 00:05:40.151
strawberry kiwi because
we've appended to it.

95
00:05:40.151 --> 00:05:41.158
We can look at more things.

96
00:05:41.158 --> 00:05:46.619
You can actually go a little bit more
intricate with the append method.

97
00:05:46.619 --> 00:05:47.674
So we have like append fruits and

98
00:05:47.674 --> 00:05:49.401
you can append like a bunch
of different things too.

99
00:05:49.401 --> 00:05:50.303
There's not gonna be just one.

100
00:05:50.303 --> 00:05:53.416
You can put like mango, pineapple, right?

101
00:05:53.416 --> 00:06:00.544
So from like a use case perspective, it's
very convenient with more fruits, right?

102
00:06:00.544 --> 00:06:04.807
But under the hood, like what's happening
with the append function is like,

103
00:06:04.807 --> 00:06:08.811
we take the size of the fruits array
as is, we look at how many things we're

104
00:06:08.811 --> 00:06:13.140
appending into this append function, and
then we either create the new slice,

105
00:06:13.140 --> 00:06:16.589
or we use the existing one with
the existing capacity, right?

106
00:06:16.589 --> 00:06:20.712
So now, if we just run this,
we can see now we have apple, banana,

107
00:06:20.712 --> 00:06:24.556
strawberry, kiwi, mango,
pineapple, we got all of them.

108
00:06:24.556 --> 00:06:27.662
And you can even append
two slice together.

109
00:06:27.662 --> 00:06:32.592
You can have, like, more fruits,
do the same syntax right here,

110
00:06:32.592 --> 00:06:36.480
string, I actually don't
even know blueberries.

111
00:06:36.480 --> 00:06:39.348
What's another fruit, tomato.

112
00:06:39.348 --> 00:06:43.985
And then you can do fruits,
append fruits and then more fruits.

113
00:06:43.985 --> 00:06:47.273
And you can also append it
with this syntax here for

114
00:06:47.273 --> 00:06:50.419
using all of the fruits
in the more fruit slice.

115
00:06:50.419 --> 00:06:53.547
And if you run this, yeah.

116
00:06:53.547 --> 00:06:57.122
&gt;&gt; Student: Does each
append create a new slice?

117
00:06:57.122 --> 00:07:01.682
&gt;&gt; Melkey: No, not necessarily,
like I said earlier, so we're,

118
00:07:01.682 --> 00:07:06.147
what happens under the hood
with slices in particular,

119
00:07:06.147 --> 00:07:09.102
Go will double the size of the slice.

120
00:07:09.102 --> 00:07:13.785
So if you go from a size of two,
you double it, it becomes four.

121
00:07:13.785 --> 00:07:18.105
If you wanna append one method to it, you
will append it to the newest one, right?

122
00:07:18.105 --> 00:07:19.781
So now you have three values and

123
00:07:19.781 --> 00:07:23.148
you have this open size under
the hood open size of your slice.

124
00:07:23.148 --> 00:07:25.655
So if you add one more value,
it becomes fully four.

125
00:07:25.655 --> 00:07:29.100
But if you add more,
that slice then gets doubled to eight, and

126
00:07:29.100 --> 00:07:32.489
you can add up to four new values
before it gets doubled again.

127
00:07:32.489 --> 00:07:37.010
One thing I want to show also, before we
move on to maps here is, we have arrays,

128
00:07:37.010 --> 00:07:38.162
right, or a slice.

129
00:07:38.162 --> 00:07:39.249
Let's just go with the arrays.

130
00:07:39.249 --> 00:07:43.223
Our numbers are if you go back,
it's 10, 20, 30, 40, 50.

131
00:07:43.223 --> 00:07:46.652
When I showed you the first for
loop with for i equals zero and

132
00:07:46.652 --> 00:07:49.612
the condition of increment it,
that works great.

133
00:07:49.612 --> 00:07:54.832
But if you wanna iterate through like
a range or iterate through us a for

134
00:07:54.832 --> 00:07:59.165
loop, a slice an array,
you can do something using the for

135
00:07:59.165 --> 00:08:02.191
loop you can do for index and then value.

136
00:08:02.191 --> 00:08:06.559
In range, so
the range keyword numbers, okay?

137
00:08:06.559 --> 00:08:11.290
And this is just a short form notation to
iterate through all the values in an array

138
00:08:11.290 --> 00:08:13.665
or a slice or any kind of object, right?

139
00:08:13.665 --> 00:08:16.062
And you can also do format print F.

140
00:08:16.062 --> 00:08:22.976
This is, or if you just say index,
module D, and value, the modulo D.

141
00:08:28.906 --> 00:08:32.885
&gt;&gt; Melkey: That's right, so
we have index 0, 1, 2, 3,

142
00:08:32.885 --> 00:08:36.038
4, 5 with the value associated to it.

