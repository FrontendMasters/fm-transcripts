WEBVTT

1
00:00:00.000 --> 00:00:03.486
&gt;&gt; Melkey: Now we're actually
going to do an exercise.

2
00:00:03.486 --> 00:00:09.080
So I'm gonna ask you guys to write some
code without me kind of yapping and

3
00:00:09.080 --> 00:00:10.650
writing it for you.

4
00:00:10.650 --> 00:00:15.200
So let's go here,
we're gonna make just a new directory,

5
00:00:15.200 --> 00:00:17.847
we wanna call it exercise, okay?

6
00:00:17.847 --> 00:00:21.971
Within exercise,
make a new file called exercise.go, okay?

7
00:00:21.971 --> 00:00:24.034
Here we're gonna make
a package called exercise.

8
00:00:24.034 --> 00:00:27.830
Again, we have a lot more freedom
now that we've made our own package.

9
00:00:27.830 --> 00:00:29.330
And if you notice by my voice,

10
00:00:29.330 --> 00:00:32.930
I'm gonna get a little more excited
because this is where I would assume

11
00:00:32.930 --> 00:00:37.074
the training was gonna come off because we
have a lot more control with our go code.

12
00:00:37.074 --> 00:00:40.744
We were all writing everything in
the main code, that is It's pretty rigid,

13
00:00:40.744 --> 00:00:42.272
here we have a lot more freedom.

14
00:00:42.272 --> 00:00:45.828
So here's the exercise,
I'm gonna read it out.

15
00:00:45.828 --> 00:00:48.163
I think I'm gonna give some code.

16
00:00:48.163 --> 00:00:51.942
But basically, we're gonna create,
this says a new main.go, but

17
00:00:51.942 --> 00:00:53.256
exercise.go is fine.

18
00:00:53.256 --> 00:00:56.049
I wanna make a falling RP game.

19
00:00:56.049 --> 00:00:59.046
And I guess you can create this in your
main.go if you wanna execute this.

20
00:00:59.046 --> 00:01:03.886
But basically I want you guys to create
a player struck that has a name and

21
00:01:03.886 --> 00:01:05.189
inventory field.

22
00:01:05.189 --> 00:01:10.455
I want you to create an item struct
that has a name and type field.

23
00:01:10.455 --> 00:01:13.662
And I want these to have certain methods,
okay?

24
00:01:13.662 --> 00:01:17.174
So I want these methods to
all be on the player struct.

25
00:01:17.174 --> 00:01:18.659
I want method one to be pick up item.

26
00:01:18.659 --> 00:01:22.144
It adds an item to a player's inventory.

27
00:01:22.144 --> 00:01:24.748
DropItem removes the item
from an inventory by name.

28
00:01:24.748 --> 00:01:26.920
And then use item, this one is,

29
00:01:26.920 --> 00:01:30.957
you could hard code this depending
on what the item name is.

30
00:01:30.957 --> 00:01:34.657
You can just do, let's say,
the item you pick up is a potion.

31
00:01:34.657 --> 00:01:39.501
Using the potion, we can hard code,
if potion regain five health.

32
00:01:39.501 --> 00:01:42.225
But you don't need to actually
have a player health bar,

33
00:01:42.225 --> 00:01:44.741
you just can print differences
between your items.

34
00:01:44.741 --> 00:01:50.038
Okay, so here I'm gonna paste
some just boiler plate code here.

35
00:01:52.880 --> 00:01:56.247
&gt;&gt; Melkey: So this is kind of
the preliminary setup I think would be

36
00:01:56.247 --> 00:01:57.721
appropriate, right?

37
00:01:57.721 --> 00:02:02.053
We have an items truck,
a players truck and three methods.

38
00:02:02.053 --> 00:02:05.875
So kind of already set up the the boulder
plate for those methods here.

39
00:02:05.875 --> 00:02:09.415
Try it out if you don't get it,
honestly, that's not a big deal.

40
00:02:09.415 --> 00:02:11.301
But yeah, explore it,
see how far you can go.

41
00:02:14.971 --> 00:02:19.310
&gt;&gt; Melkey: So we left off by
trying out an exercise where

42
00:02:19.310 --> 00:02:23.532
we basically are trying to mimic the very,

43
00:02:23.532 --> 00:02:29.883
very simple functionality of an MMORPG or
something like that.

44
00:02:29.883 --> 00:02:35.665
Where you have a player, an item, you can
pick items up, drop items and use items.

45
00:02:35.665 --> 00:02:40.058
This is just an intended exercise for

46
00:02:40.058 --> 00:02:44.598
us to get used to how things work in Go.

47
00:02:44.598 --> 00:02:49.368
And so I'm going to quickly just show
the solutions for some of these here.

48
00:02:49.368 --> 00:02:53.191
I'm not gonna spend too much time
exploring the intricacies of them.

49
00:02:53.191 --> 00:02:58.091
We can revisit this at the end,
but we're gonna just simply show

50
00:02:58.091 --> 00:03:02.289
how I personally implemented
these methods, right?

51
00:03:02.289 --> 00:03:08.738
So for PickUpItem, all I really did was,
I know I have my p.Inventory,

52
00:03:08.738 --> 00:03:14.155
so I'm gonna just quickly do import,
for me, PickUpItem.

53
00:03:14.155 --> 00:03:15.967
I know I have my p.Inventory, and

54
00:03:15.967 --> 00:03:19.482
I'm just going to append the item
that I pick up into my inventory.

55
00:03:19.482 --> 00:03:22.472
And add this little print statement
that says, I picked up an item.

56
00:03:22.472 --> 00:03:27.708
[SOUND] Okay, so
I think that one was maybe

57
00:03:27.708 --> 00:03:33.571
the most straightforward implementation.

58
00:03:33.571 --> 00:03:36.874
Next will be a drop item.

59
00:03:36.874 --> 00:03:42.172
So drop item, you can see my editor's
suggesting a functionality with

60
00:03:42.172 --> 00:03:47.293
replace append with slices.delete,
which we were talking about,

61
00:03:47.293 --> 00:03:52.149
that starting in Go 1.21,
there is the standard library that

62
00:03:52.149 --> 00:03:56.590
now provides some packages that
help with slices and maps.

63
00:03:56.590 --> 00:03:59.824
I think those are phenomenal, I think
those are great, they're very helpful.

64
00:03:59.824 --> 00:04:04.237
But nothing wrong doing things kind
of under the hood, cuz I think

65
00:04:04.237 --> 00:04:10.115
the slices.delete function does the exact
same as this append implementation here.

66
00:04:10.115 --> 00:04:13.086
But basically, the secret, I guess,

67
00:04:13.086 --> 00:04:16.874
of drop item is we iterate
through our inventory.

68
00:04:16.874 --> 00:04:20.151
If we find the name, the item, and

69
00:04:20.151 --> 00:04:25.462
in our inventory that matches
the item we are dropping,

70
00:04:25.462 --> 00:04:31.348
we are basically going to create
a combination of our slices.

71
00:04:31.348 --> 00:04:36.704
So here we are appending,
our p.Inventory up to i.

72
00:04:36.704 --> 00:04:42.729
And i is the index of the item that
we found ranging over our inventory.

73
00:04:42.729 --> 00:04:49.465
And then we are going to append it
to all the values after, so i+1.

74
00:04:49.465 --> 00:04:51.946
So remember back when we
were exploring slices,

75
00:04:51.946 --> 00:04:55.694
we had the ellipsis here that contains
all the values from another slice,

76
00:04:55.694 --> 00:04:58.064
which is essentially
what we're doing here.

77
00:04:58.064 --> 00:05:02.496
We're creating two slices
from our original slice, and

78
00:05:02.496 --> 00:05:06.373
just append those together
to get this new slice,

79
00:05:06.373 --> 00:05:10.359
this new inventory, and
then I have a return here.

80
00:05:10.359 --> 00:05:14.328
And just for a safe catch,
if the value does not exist,

81
00:05:14.328 --> 00:05:18.835
my inventory, I just quickly
say does not have in inventory.

82
00:05:18.835 --> 00:05:25.443
So the name of the player, Milky, does
not have, let's say, ax in the inventory.

83
00:05:32.036 --> 00:05:34.320
Okay, and then UseItem.

84
00:05:34.320 --> 00:05:39.927
&gt;&gt; Melkey: This one, I think, is probably
the one that has the most room for debate,

85
00:05:39.927 --> 00:05:46.185
I suppose, cuz lots of different ways I
was even talking to Michael just earlier.

86
00:05:46.185 --> 00:05:53.323
And I didn't even consider
using the drop method or

87
00:05:53.323 --> 00:05:58.967
drop item, I kind of just reimplemented

88
00:05:58.967 --> 00:06:04.453
the same append functionality again.

89
00:06:04.453 --> 00:06:08.181
But yeah,
I think the way I initially explained it,

90
00:06:08.181 --> 00:06:11.758
to use an item,
I just range over that item again.

91
00:06:11.758 --> 00:06:18.530
If I find it and I hard coded the name
potion and all I just say is I feel good,

92
00:06:18.530 --> 00:06:23.571
I feel rejuvenated,
let me remove the item after use.

93
00:06:23.571 --> 00:06:26.889
&gt;&gt; Speaker 2: So
with removing an item like this, I mean,

94
00:06:26.889 --> 00:06:32.268
at first it would seem like this is
pretty heavy on allocating new memory

95
00:06:32.268 --> 00:06:37.574
cuz it seems like you'd be wiping
away the old one while not wiping it.

96
00:06:37.574 --> 00:06:41.017
Well yeah,
wiping it the way the old inventorian,

97
00:06:41.017 --> 00:06:45.594
reallocating a new one,
is that what's happening under the hood?

98
00:06:45.594 --> 00:06:50.401
&gt;&gt; Melkey: It's wiping out the old

99
00:06:50.401 --> 00:06:56.172
memory and making a new one.

100
00:06:56.172 --> 00:06:59.849
The context of the append method, again,

101
00:06:59.849 --> 00:07:05.583
it depends on the capacity and
the length of the underlying array.

102
00:07:05.583 --> 00:07:11.010
Because here, I think what you're
referencing is here we're basically taking

103
00:07:11.010 --> 00:07:17.013
the existing one, splitting it up, adding
that, and here's a new inventory, right?

104
00:07:17.013 --> 00:07:18.978
The thing is, if you look,

105
00:07:18.978 --> 00:07:23.427
we're not explicitly
reinstantiating a new slice, right?

106
00:07:23.427 --> 00:07:27.004
Here we have this inventory and
we're just reassigning it a value,

107
00:07:27.004 --> 00:07:29.842
that's why there's single
equals operation here.

108
00:07:29.842 --> 00:07:35.340
And so, what's happening is we
are actually reusing the length and

109
00:07:35.340 --> 00:07:41.139
capacity of the original slice,
we're just replacing those values.

110
00:07:41.139 --> 00:07:46.989
So we're not recreating the underlying
data structure, the slice or the array.

111
00:07:46.989 --> 00:07:50.904
What we're doing is just
wiping out all the values.

112
00:07:50.904 --> 00:07:55.654
But let's say this append method is,
every time we use it,

113
00:07:55.654 --> 00:08:00.229
we're adding, I'm gonna say 20 or
100 new items.

114
00:08:00.229 --> 00:08:04.784
That would be pretty inefficient,
because then, in that case, we would be

115
00:08:04.784 --> 00:08:09.851
basically battling the doubling capacity
of the append method in Go under the hood.

116
00:08:09.851 --> 00:08:10.810
Does that answer your question?

117
00:08:10.810 --> 00:08:11.449
Does that make sense?

118
00:08:11.449 --> 00:08:12.355
&gt;&gt; Speaker 2: I think so.

119
00:08:12.355 --> 00:08:12.855
&gt;&gt; Melkey: Cool.

