WEBVTT

1
00:00:00.000 --> 00:00:03.315
Now we're actually going
to do an exercise.

2
00:00:03.315 --> 00:00:09.415
So I'm gonna ask you guys to write some
code without me kind of yapping and

3
00:00:09.415 --> 00:00:11.122
writing it for you.

4
00:00:11.122 --> 00:00:15.126
So let's go here,
we're gonna make just a new directory.

5
00:00:15.126 --> 00:00:17.600
I'm gonna call it exercise, okay?

6
00:00:17.600 --> 00:00:20.272
Within exercise, I'm gonna make
a new file called exercise.go, okay?

7
00:00:20.272 --> 00:00:23.832
Here we're gonna make a package
called exercise.1 Again,

8
00:00:23.832 --> 00:00:27.465
we have a lot more freedom now
that we've made our own package.

9
00:00:27.465 --> 00:00:30.520
And if you notice by my voice,
I'm gonna get a little more excited,

10
00:00:30.520 --> 00:00:33.967
because this is where I would assume
the training wheels was gonna come off.

11
00:00:33.967 --> 00:00:37.125
Because we have a lot more
control with our Go code.

12
00:00:37.125 --> 00:00:40.412
We were all writing everything in
the main code, that is pretty rigid.

13
00:00:40.412 --> 00:00:42.143
Here we have a lot more freedom.

14
00:00:42.143 --> 00:00:46.552
So here's the exercise, I'm gonna read
it out, and I'm gonna give some code.

15
00:00:46.552 --> 00:00:52.962
But basically we're gonna create, this is
a new main.go, but exercise.go is fine.

16
00:00:52.962 --> 00:00:55.178
I'm gonna make a following RP game, and

17
00:00:55.178 --> 00:00:59.037
I guess you can create this in your
main.go if you wanna execute this.

18
00:00:59.037 --> 00:01:04.183
But basically, I want you guys to create
a player struct that has a Name and

19
00:01:04.183 --> 00:01:05.513
Inventory field.

20
00:01:05.513 --> 00:01:09.509
I want you to create an item truck
that has a Name and Type field.

21
00:01:09.509 --> 00:01:13.153
And I want these to have certain methods,
okay?

22
00:01:13.153 --> 00:01:16.288
So I want these methods to
all be on the player struct.

23
00:01:16.288 --> 00:01:22.055
I want method one to be PickUpItem,
it adds an item to a players inventory.

24
00:01:22.055 --> 00:01:24.881
DropItem removes the item
from an inventory by name.

25
00:01:24.881 --> 00:01:30.730
And then UseItem, you could hard code
this depending on what the item name is.

26
00:01:30.730 --> 00:01:35.037
You can just do, let's say the item you
pick up is a potion, using the potion,

27
00:01:35.037 --> 00:01:38.692
we can hard code this like,
if potion, regain five health.` But

28
00:01:38.692 --> 00:01:41.630
you don't need to actually
have a player health bar,

29
00:01:41.630 --> 00:01:44.532
just you can print differences
between your items.

30
00:01:44.532 --> 00:01:51.310
Okay, so here I'm gonna paste some,
just boiler plate code here.

31
00:01:52.692 --> 00:01:56.725
So this is kind of the preliminary setup
I think, would be appropriate, right?

32
00:01:56.725 --> 00:02:01.741
We have an item struct,
a player struct, and three methods.

33
00:02:01.741 --> 00:02:06.687
So kinda already set up the boulder
plate for those methods here.

34
00:02:06.687 --> 00:02:12.549
Try it out, if you don't get it,
honestly, that's not a big deal.

35
00:02:12.549 --> 00:02:15.045
But yeah, explore it,
see how far you can go.

36
00:02:15.045 --> 00:02:18.885
So, we left off by trying out an exercise,

37
00:02:18.885 --> 00:02:23.261
where we basically are trying
to mimic the very,

38
00:02:23.261 --> 00:02:29.256
very simple functionality of an MMORPG,
or something like that.

39
00:02:29.256 --> 00:02:35.466
Where you have a player, an item, you can
pick items up, drop items, and use items.

40
00:02:35.466 --> 00:02:41.682
This is just an intended exercise for
us to get used to how things work in Go.

41
00:02:41.682 --> 00:02:49.083
And so, I'm going to quickly just show
the solutions for some of these here.

42
00:02:49.083 --> 00:02:52.978
I'm not gonna spend too much time
exploring the intricacies of them.

43
00:02:52.978 --> 00:02:57.870
We can revisit this at the end,
but we're gonna just simply show

44
00:02:57.870 --> 00:03:02.046
how I personally implemented
these methods, right?

45
00:03:02.046 --> 00:03:07.247
So for PickUpItem,
all I really did was, I know I have my

46
00:03:07.247 --> 00:03:12.358
p.Inventory, so
I'm gonna just quickly do import.

47
00:03:12.358 --> 00:03:15.703
For me, pickup item,
I know I have my p.Inventory, and

48
00:03:15.703 --> 00:03:19.482
I'm just gonna append the item
that I pick up into my inventory.

49
00:03:19.482 --> 00:03:23.034
And add his little print
statement that says,

50
00:03:23.034 --> 00:03:26.231
I picked up an item, do, do, do, okay?

51
00:03:26.231 --> 00:03:28.893
So, I think that one was,

52
00:03:28.893 --> 00:03:34.104
maybe the most straightforward
implementation.

53
00:03:34.104 --> 00:03:36.441
Next will be a DropItem.

54
00:03:36.441 --> 00:03:43.793
So, DropItem, You can see my editor's
suggesting a functionality which

55
00:03:43.793 --> 00:03:47.651
will replace a pen with slices.Delete,
which we were talking about.

56
00:03:47.651 --> 00:03:49.491
That starting in Go 121,

57
00:03:49.491 --> 00:03:54.717
the standard library now provides some
packages that help with slices and maps.

58
00:03:54.717 --> 00:03:58.151
I think those are phenomenal,
I think those are great.

59
00:03:58.151 --> 00:03:59.540
They're very helpful.

60
00:03:59.540 --> 00:04:04.030
But nothing wrong doing things kind
of under the hood, cuz I think

61
00:04:04.030 --> 00:04:10.009
the slices.Delete function does the exact
same as this append implementation here.

62
00:04:10.009 --> 00:04:13.951
But basically, the secret,
I guess, of DropItem,

63
00:04:13.951 --> 00:04:16.764
is we iterate through our inventory.

64
00:04:16.764 --> 00:04:24.683
If we find the item in our inventory
that matches the item we are dropping,

65
00:04:24.683 --> 00:04:31.342
we are basically going to create
a combination of our slices.

66
00:04:31.342 --> 00:04:36.158
So here we are appending our
p.Inventory up to i, and

67
00:04:36.158 --> 00:04:42.160
i is the index of the item that we
found ranging over our inventory.

68
00:04:42.160 --> 00:04:49.347
And then we are going to append it
to all the values after, so i + 1.

69
00:04:49.347 --> 00:04:53.347
So remember back when we were exploring
slices, we had the ellipsis here,

70
00:04:53.347 --> 00:04:56.023
that contains all the values
from another slice.

71
00:04:56.023 --> 00:04:59.026
Which is essentially
what we're doing here,

72
00:04:59.026 --> 00:05:02.722
we're creating two slices
from our original slice, and

73
00:05:02.722 --> 00:05:07.346
just append those together to get
this new slice, this new inventory.

74
00:05:07.346 --> 00:05:09.989
And then I have a return here.

75
00:05:09.989 --> 00:05:15.855
And just for a safe catch, if the value
does not exist in my inventory,

76
00:05:15.855 --> 00:05:19.941
I just quickly say,
does not have an inventory.

77
00:05:19.941 --> 00:05:27.400
So, the name of the player, Melkey does
not have, let's say, ax, in the inventory.

78
00:05:31.789 --> 00:05:35.434
Okay, and then use item,
this one, I think,

79
00:05:35.434 --> 00:05:40.590
is probably the one that has
the most room for debate, I suppose.

80
00:05:40.590 --> 00:05:44.833
Cuz there's lots of different ways,

81
00:05:44.833 --> 00:05:50.138
I was even talking to
Michael just earlier, and

82
00:05:50.138 --> 00:05:57.713
I didn't even consider using
the drop method in the, or DropItem.

83
00:05:57.713 --> 00:06:03.497
I kind of just re-implemented
the same append functionality again.

84
00:06:03.497 --> 00:06:07.685
But, yeah,
I think the way I initially explained it,

85
00:06:07.685 --> 00:06:11.519
to use an item,
I just range over that item again.

86
00:06:11.519 --> 00:06:15.129
If I find it, and I hard coded,
like the name potion,

87
00:06:15.129 --> 00:06:19.246
then all I'll just say is,
I feel good, feel rejuvenated.

88
00:06:19.246 --> 00:06:23.325
Let me remove that item after use.

89
00:06:23.325 --> 00:06:26.766
So with removing an item like this,
I mean,

90
00:06:26.766 --> 00:06:30.858
at first it would seem like
this is pretty heavy, and

91
00:06:30.858 --> 00:06:36.828
allocating new memory, cuz it seems
like you'd be wiping away the old one.

92
00:06:36.828 --> 00:06:42.504
Well not wiping it, but, yeah,
wiping it the old inventory and

93
00:06:42.504 --> 00:06:48.511
reallocating a new one,
is that what's happening under the hood?

94
00:06:48.511 --> 00:06:53.956
It's wiping out a new wiping out
the old memory and making a new one.

95
00:06:55.609 --> 00:06:59.448
The context of the append method, again,

96
00:06:59.448 --> 00:07:05.434
it depends on the capacity and
the length of the underlying array.

97
00:07:05.434 --> 00:07:09.148
Because here,
I think what you're referencing is,

98
00:07:09.148 --> 00:07:13.769
here we're basically taking
the existing one, splitting it up,

99
00:07:13.769 --> 00:07:17.415
adding that, and
here's a new inventory, right?

100
00:07:17.415 --> 00:07:19.191
The thing is, if you look,

101
00:07:19.191 --> 00:07:23.221
we're not explicitly
reinstantiating a new slice, right?

102
00:07:23.221 --> 00:07:26.865
Here we have this inventory, and
we're just reassigning it a value,

103
00:07:26.865 --> 00:07:29.664
that's why there's single
equals operation here.

104
00:07:29.664 --> 00:07:34.572
And so what's happening is
we are actually reusing

105
00:07:34.572 --> 00:07:39.147
the length and
capacity of the original slice.

106
00:07:39.147 --> 00:07:41.137
We're just replacing those values.

107
00:07:41.137 --> 00:07:46.306
So we're not recreating the underlying
data structure, the slice or

108
00:07:46.306 --> 00:07:51.045
the array, what we're doing is
just wiping out all the values.

109
00:07:51.045 --> 00:07:55.481
But let's say this append method is,
every time we use it,

110
00:07:55.481 --> 00:07:59.940
we're adding, I'm gonna say,
20 or 100 new items.

111
00:07:59.940 --> 00:08:05.634
That would be pretty inefficient, because
then in that case, we would be basically

112
00:08:05.634 --> 00:08:10.781
battling the doubling capacity of
the append method in Go, under the hood.

