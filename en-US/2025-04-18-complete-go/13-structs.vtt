WEBVTT

1
00:00:00.000 --> 00:00:06.011
&gt;&gt; Melkey: But I want to finish up
more advanced data structures with Go.

2
00:00:06.011 --> 00:00:10.613
And here, I wanna start introducing
us to custom data structures,

3
00:00:10.613 --> 00:00:13.044
which will be structs and pointer.

4
00:00:13.044 --> 00:00:17.719
And talk about a lot of more intricate
things that maybe are native to Go,

5
00:00:17.719 --> 00:00:20.402
as opposed to these control structures,

6
00:00:20.402 --> 00:00:24.174
which are pretty common to
other programming languages.

7
00:00:24.174 --> 00:00:28.081
So what I'm going to do is I'm gonna
remove the functions here, okay?

8
00:00:28.081 --> 00:00:32.662
And now we have func main,
we have our import.

9
00:00:32.662 --> 00:00:36.200
I wanted to I want to talk about structs.

10
00:00:36.200 --> 00:00:40.087
So, structs,
I've briefly mentioned them a few times,

11
00:00:40.087 --> 00:00:42.556
struct stand for structure, okay?

12
00:00:42.556 --> 00:00:47.556
And the textbook definition
of a struct is a data

13
00:00:47.556 --> 00:00:51.431
type that can hold data in your app and

14
00:00:51.431 --> 00:00:56.442
pass it around along your application,
okay?

15
00:00:56.442 --> 00:00:58.936
It holds data and
you can use it across your app.

16
00:00:58.936 --> 00:01:03.265
That's kind of,
a very bare-bone definition of a struct.

17
00:01:03.265 --> 00:01:09.300
But it has a lot more versatility,
power behind it than just that definition.

18
00:01:09.300 --> 00:01:14.189
So for example, structs were created for
a bunch of different reasons in Go.

19
00:01:14.189 --> 00:01:19.273
It's kind of, the author's original
answer to object-oriented programming,

20
00:01:19.273 --> 00:01:20.515
cuz it's not in Go.

21
00:01:20.515 --> 00:01:23.462
Go has this concept of interfaces and

22
00:01:23.462 --> 00:01:29.272
structs that remove the necessity for
object-oriented programming.

23
00:01:29.272 --> 00:01:34.202
But you can see, if you come from
an object-oriented programming language,

24
00:01:34.202 --> 00:01:38.392
you can see where structs kind of
play a role in solving that issue.

25
00:01:38.392 --> 00:01:42.095
So here,
I'm gonna create a struct called a person.

26
00:01:42.095 --> 00:01:45.948
So to define a struct we'll do type,
then the name of the struct.

27
00:01:45.948 --> 00:01:52.432
So our struct can be person, and then the
keyword struct, followed by curly braces.

28
00:01:52.432 --> 00:01:57.354
Now, if you notice, if we ignore this
compiler yelling at us for the unused

29
00:01:57.354 --> 00:02:02.615
format, our compiler does not yell though
we have person defined and not used.

30
00:02:02.615 --> 00:02:06.442
Because what is literally happening
is we are defining a new type.

31
00:02:06.442 --> 00:02:10.312
Person is a struct, but it is also a type.

32
00:02:10.312 --> 00:02:14.320
We now have the ability to use
person types across our application.

33
00:02:14.320 --> 00:02:18.280
Which means we can define functions
that take persons as arguments.

34
00:02:18.280 --> 00:02:21.217
We can write functions that
return persons as arguments.

35
00:02:21.217 --> 00:02:24.128
We can use persons as
an argument that we have made.

36
00:02:24.128 --> 00:02:27.678
It is our custom data type, okay?

37
00:02:27.678 --> 00:02:32.471
So obviously, with a person,
let's go ahead and create a person, right?

38
00:02:32.471 --> 00:02:35.405
So let's go ahead and
just do person, to create and

39
00:02:35.405 --> 00:02:37.941
use our struct,
we can use the struct name.

40
00:02:37.941 --> 00:02:43.122
So person, followed by the curly braces,
and then the explicit field.

41
00:02:43.122 --> 00:02:47.878
So we can put, oops, kinda ahead of
myself here, but the person struck,

42
00:02:47.878 --> 00:02:51.659
we can put a name, so
the name of the field, then the type.

43
00:02:51.659 --> 00:02:56.158
So a string, okay, and
then we put age and int.

44
00:02:56.158 --> 00:03:01.247
So our person struck now has two fields,
Name and Age.

45
00:03:01.247 --> 00:03:02.468
And it could have multiple fields.

46
00:03:02.468 --> 00:03:04.503
It could have many, many fields, right?

47
00:03:04.503 --> 00:03:05.771
Of all different types.

48
00:03:05.771 --> 00:03:08.738
It could have a struct as a type as well.

49
00:03:08.738 --> 00:03:11.073
So we have name and age.

50
00:03:11.073 --> 00:03:15.117
And if we wanna use this,
we can do our Person and then Name.

51
00:03:15.117 --> 00:03:18.335
We can say something like John, okay?

52
00:03:18.335 --> 00:03:21.881
And an age we'll say 25, okay?

53
00:03:21.881 --> 00:03:28.008
So now we have this person, it's not
declared, but we can do fmt.Printf,

54
00:03:28.008 --> 00:03:32.629
this is our person, and
we can use our format specifier.

55
00:03:32.629 --> 00:03:37.425
But here you have two options, so
you can use the modulo v, all right,

56
00:03:37.425 --> 00:03:39.718
don't forget to break the line.

57
00:03:39.718 --> 00:03:41.787
You can put person.

58
00:03:41.787 --> 00:03:46.511
If we save this,
I'm gonna clear my terminal here.

59
00:03:46.511 --> 00:03:52.877
If we save that and run this, you can
see this is our person, John 25, great.

60
00:03:52.877 --> 00:03:58.406
But if you wanna be a little bit more
explicit and showcase the values

61
00:03:58.406 --> 00:04:03.556
of your struct, you can prepend
a plus symbol in front of the v.

62
00:04:03.556 --> 00:04:08.045
So now when you run it,
you can see that our person shrug now also

63
00:04:08.045 --> 00:04:11.539
demonstrates the field
names associated to it.

64
00:04:11.539 --> 00:04:17.255
So it's a level of how explicit you
want to be in the variable declaration.

65
00:04:17.255 --> 00:04:19.871
There's also something
called anonymous structs.

66
00:04:19.871 --> 00:04:24.457
So here we have a not anonymous struct,
it's a defined struct.

67
00:04:24.457 --> 00:04:28.483
It's person, we know now it's a struct,
we can use it however many times we want.

68
00:04:28.483 --> 00:04:29.985
We can also have anonymous structs.

69
00:04:29.985 --> 00:04:36.050
We can have something like employee, and
in here we can define the struct in place.

70
00:04:36.050 --> 00:04:40.933
Struct, one set of brackecks,
a second set of brackets,

71
00:04:40.933 --> 00:04:43.835
curly brackets, to be specific.

72
00:04:43.835 --> 00:04:49.120
The first set here determines
the fields of the struct, okay?

73
00:04:49.120 --> 00:04:53.581
So here we'll put name string and
something like id int, and

74
00:04:53.581 --> 00:04:57.518
then the second set of
brackets fill those fields in,

75
00:04:57.518 --> 00:05:00.860
we actually provide values for
those field.

76
00:05:00.860 --> 00:05:07.385
So we can do name, Alice,
and we can do id, 123.

77
00:05:07.385 --> 00:05:11.613
And this is what's called
an anonymous struct, these have very,

78
00:05:11.613 --> 00:05:16.152
very powerful use cases,
especially when we get into testing, okay?

79
00:05:16.152 --> 00:05:19.931
We'll see when we get into our
testing module, how we make use

80
00:05:19.931 --> 00:05:24.232
of anonymous structs for handling
our test cases in our application.

81
00:05:24.232 --> 00:05:27.545
And we can use this as well,
right, fmt.Println, and

82
00:05:27.545 --> 00:05:29.810
you can say this is employee, right?

83
00:05:29.810 --> 00:05:33.732
I'm being a little lazy with the Println,
but you can go ahead and

84
00:05:33.732 --> 00:05:35.240
use format specifiers.

85
00:05:35.240 --> 00:05:36.393
That's totally fine.

86
00:05:36.393 --> 00:05:39.948
So you can see here, if you run it,
we now have our person struct,

87
00:05:39.948 --> 00:05:42.350
and our anonymous employee struck as well.

88
00:05:42.350 --> 00:05:47.077
&gt;&gt; Speaker 2: Are structs reference or
value semantics?

89
00:05:47.077 --> 00:05:49.845
Do they get copied when
you're passing them around?

90
00:05:49.845 --> 00:05:51.034
&gt;&gt; Melkey: Yeah, great question.

91
00:05:51.034 --> 00:05:56.529
Everything in Go,
you always ask one question ahead,

92
00:05:56.529 --> 00:06:01.319
I love it,
in Go everything is passed by value.

93
00:06:01.319 --> 00:06:03.715
It explicitly states something
as referenced, right?

94
00:06:03.715 --> 00:06:08.542
So, that spoils the next part of the next
thing, but when we pass even a struct,

95
00:06:08.542 --> 00:06:11.300
we are passing a copy of
it into our function.

96
00:06:11.300 --> 00:06:19.490
And that copy value of our struct will
only exist in the scope of the function.

97
00:06:19.490 --> 00:06:22.578
And so, once that function executes
the memory is released from

98
00:06:22.578 --> 00:06:23.730
the allocated struct.

99
00:06:23.730 --> 00:06:27.936
But you can pass structs by reference and
then modifications will persist,

100
00:06:27.936 --> 00:06:29.194
which I'll show you.

101
00:06:29.194 --> 00:06:31.723
We are going to continue on with structs.

102
00:06:31.723 --> 00:06:36.711
So we showcased anonymous structs,
we've showcased a defined struct,

103
00:06:36.711 --> 00:06:41.860
our person struct above, and here we're
going to define two more structs,

104
00:06:41.860 --> 00:06:44.933
just so I can demonstrate, nested structs.

105
00:06:44.933 --> 00:06:48.444
You will probably see this in a code,
basically, right?

106
00:06:48.444 --> 00:06:54.206
But here, let's say we have type address,
it's going to be a struct.

107
00:06:54.206 --> 00:06:56.166
I'm gonna make sure I type that correctly.

108
00:06:57.930 --> 00:07:02.598
&gt;&gt; Speaker 3: Just a question about,
when would you wanna avoid nested structs?

109
00:07:02.598 --> 00:07:06.210
&gt;&gt; Melkey: When you want to avoid nested,
so, essentially,

110
00:07:06.210 --> 00:07:09.405
there isn't one reason to avoid them or
not.

111
00:07:09.405 --> 00:07:13.750
However, like I was saying earlier,
Go passes things by value.

112
00:07:13.750 --> 00:07:16.035
So we make copies of everything.

113
00:07:16.035 --> 00:07:18.263
So if you know in your code base,

114
00:07:18.263 --> 00:07:22.062
if you have a giant struct
that has many nested fields,

115
00:07:22.062 --> 00:07:27.196
many nested trucks, and it continuous
passing that whole thing by copy.

116
00:07:27.196 --> 00:07:32.481
You're probably not exerting
the best memory practices there,

117
00:07:32.481 --> 00:07:34.891
so you may want to avoid that.

118
00:07:34.891 --> 00:07:39.147
You might wanna restructure and consider
if you wanna use a nested truck at all.

119
00:07:39.147 --> 00:07:43.030
That's still one of the main
things I can think of for

120
00:07:43.030 --> 00:07:48.161
when to not nest a struct, is passing
it down and making copies of it.

121
00:07:48.161 --> 00:07:48.821
All right, let's continue.

122
00:07:48.821 --> 00:07:52.813
So we have this type address struct,
let's just say this has a street string.

123
00:07:52.813 --> 00:07:53.686
I'm gonna keep it simple.

124
00:07:53.686 --> 00:07:55.925
Let's just say city also a string.

125
00:07:55.925 --> 00:08:00.295
And let's say we have another struct,
which we'll define as contact.

126
00:08:00.295 --> 00:08:03.781
So type contact is gonna be a struct,
like so.

127
00:08:03.781 --> 00:08:06.292
We'll save the name of this new contact.

128
00:08:06.292 --> 00:08:07.412
We'll say it's a string.

129
00:08:07.412 --> 00:08:12.253
And we can put address as
our address struct, like so.

130
00:08:12.253 --> 00:08:15.701
And then phone string, all right?

131
00:08:15.701 --> 00:08:20.019
So here we have a second struct
defined with a nested struct type.

132
00:08:20.019 --> 00:08:22.691
And again, it's not initiated.

133
00:08:22.691 --> 00:08:26.476
We don't have a contact just yet,
but we can do contact and

134
00:08:26.476 --> 00:08:28.649
create the contact struct type.

135
00:08:28.649 --> 00:08:33.242
We put our name, let's say, Mark, okay?

136
00:08:33.242 --> 00:08:38.683
And then for address here, with the
address struct just like this, we kind of

137
00:08:38.683 --> 00:08:44.476
put it inside the definition of the parent
struct that we have, we can say street.

138
00:08:44.476 --> 00:08:48.111
We can say is 123, Main Street.

139
00:08:48.111 --> 00:08:54.561
And in city, we can put something like,
any town, okay?

140
00:08:54.561 --> 00:08:59.231
And one thing I forgot to mention, but
we can actually omit fields in our struct.

141
00:08:59.231 --> 00:09:02.537
So here, if you wanna create this new
contact without actually passing in

142
00:09:02.537 --> 00:09:04.307
the phone, that's completely fine.

143
00:09:04.307 --> 00:09:07.695
And again, this is due to zero values and
the default values.

144
00:09:07.695 --> 00:09:13.970
So there's always a fallback to a type
that is not explicitly defined, question.

145
00:09:13.970 --> 00:09:17.948
&gt;&gt; Speaker 4: Are types scoped to the
function block they're declared in, and

146
00:09:17.948 --> 00:09:20.636
can you redeclare types from other blocks?

147
00:09:20.636 --> 00:09:23.089
&gt;&gt; Melkey: No,
you cannot redeclare a type in functions.

148
00:09:23.089 --> 00:09:26.208
Once you have a type defined,
that's the type.

149
00:09:26.208 --> 00:09:30.337
You cannot redefine them within
the function block or without.

150
00:09:30.337 --> 00:09:33.999
So the signature of the function has
to adhere to the function signature.

151
00:09:33.999 --> 00:09:36.495
Even if you have a variable
declared in the function,

152
00:09:36.495 --> 00:09:39.114
you cannot redeclare the variable
as a different type.

