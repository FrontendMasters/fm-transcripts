WEBVTT

1
00:00:00.000 --> 00:00:05.914
&gt;&gt; Melkey: But I want to finish up
more advanced data structures with Go.

2
00:00:05.914 --> 00:00:10.507
And here, I wanna start introducing
us to custom data structures,

3
00:00:10.507 --> 00:00:13.013
which will be structs and pointers.

4
00:00:13.013 --> 00:00:17.664
And talk about a lot of more intricate
things that maybe are native to Go,

5
00:00:17.664 --> 00:00:20.332
as opposed to these control structures,

6
00:00:20.332 --> 00:00:24.086
which are pretty common to
other programming languages.

7
00:00:24.086 --> 00:00:28.181
So what I'm going to do is,
I'm gonna remove the functions here, okay?

8
00:00:28.181 --> 00:00:30.823
And now we have func main,
we have our import.

9
00:00:30.823 --> 00:00:35.283
I wanna talk about structs, so structs,

10
00:00:35.283 --> 00:00:39.878
I've briefly mentioned them a few times.

11
00:00:39.878 --> 00:00:42.620
Structs stand for structure, okay?

12
00:00:42.620 --> 00:00:47.542
And the textbook definition
of a struct is a data

13
00:00:47.542 --> 00:00:51.355
type that can hold data in your app and

14
00:00:51.355 --> 00:00:56.288
pass it around along your application,
okay?

15
00:00:56.288 --> 00:00:59.028
It holds data and
you can use it across your app.

16
00:00:59.028 --> 00:01:03.628
That's kind of a very bare bone
definition of a struct, but

17
00:01:03.628 --> 00:01:09.251
it has a lot more versatility power
behind it than just that definition.

18
00:01:09.251 --> 00:01:13.900
So for example, structs were created for
a bunch of different reasons in Go,

19
00:01:13.900 --> 00:01:18.906
it's kind of like the author's original
answer to object oriented programming,

20
00:01:18.906 --> 00:01:20.565
because that's not in Go.

21
00:01:20.565 --> 00:01:23.532
Go has this concept of interfaces and

22
00:01:23.532 --> 00:01:29.187
structs that remove the necessity for
object oriented programming.

23
00:01:29.187 --> 00:01:34.203
But you can see, if you come from
an object-oriented programming language,

24
00:01:34.203 --> 00:01:38.466
you can see where structs kind of
play a role in solving that issue.

25
00:01:38.466 --> 00:01:42.143
So here, I'm gonna create
a structure called a person.

26
00:01:42.143 --> 00:01:45.857
So to define a struct,
we'll do type then the name of the struct.

27
00:01:45.857 --> 00:01:52.236
So our struct can be person, and then the
keyword struct followed by curly braces.

28
00:01:52.236 --> 00:01:57.431
Now if you notice, if we ignore this
compiler, the elements for the unused

29
00:01:57.431 --> 00:02:02.634
format our compiler does not yell that
we have person defined and not used.

30
00:02:02.634 --> 00:02:06.443
Because what is literally happening is,
we are defining a new type.

31
00:02:06.443 --> 00:02:10.461
Person is a struct, but it is also a type.

32
00:02:10.461 --> 00:02:15.033
We now have the ability to use person
types across our application, which means,

33
00:02:15.033 --> 00:02:18.227
we can define functions that
take persons as arguments.

34
00:02:18.227 --> 00:02:21.255
We can write functions that
return persons as arguments.

35
00:02:21.255 --> 00:02:24.123
We can use persons as
an argument that we have made.

36
00:02:24.123 --> 00:02:27.795
It is our custom data type, okay?

37
00:02:27.795 --> 00:02:32.478
So, obviously, with a person,
let's go ahead and create a person, right?

38
00:02:32.478 --> 00:02:37.065
So let's go ahead and just do,
person to create and use our struct, and

39
00:02:37.065 --> 00:02:39.206
use the struct name, so person,

40
00:02:39.206 --> 00:02:43.121
followed by the curly braces,
and then the explicit field.

41
00:02:43.121 --> 00:02:48.168
So we can put, oops, kind of ahead of
myself here, but the person struck,

42
00:02:48.168 --> 00:02:53.477
we can put a name, so the name of the
field, then the type, so a string, okay?

43
00:02:53.477 --> 00:02:56.096
And then we put age and int.

44
00:02:56.096 --> 00:03:01.199
So our person struck now has two fields,
name and age.

45
00:03:01.199 --> 00:03:04.645
And it could have multiple fields,
it could have many, many fields, right,

46
00:03:04.645 --> 00:03:05.754
of all different types.

47
00:03:05.754 --> 00:03:08.716
It could have a struct as a type as well.

48
00:03:08.716 --> 00:03:14.311
So you have name and age, and if you
wanna use this, we can do our person and

49
00:03:14.311 --> 00:03:18.565
then, name, we can say something like,
John, okay?

50
00:03:18.565 --> 00:03:21.956
And then age will say 25, okay?

51
00:03:21.956 --> 00:03:27.193
So now we have this person, it's not
declared, but we can do format, Printf.

52
00:03:27.193 --> 00:03:32.281
This is our person, and
we can use our format specifier,

53
00:03:32.281 --> 00:03:35.042
but here you have two options.

54
00:03:35.042 --> 00:03:42.147
So you can use the modulo v, all right,
don't forget to break the line per person.

55
00:03:42.147 --> 00:03:46.337
If we save this,
I'm gonna clear my terminal here.

56
00:03:46.337 --> 00:03:52.928
If we save that and run this, you can
see this is our person, John 25, great.

57
00:03:52.928 --> 00:03:59.701
But if you wanna be a little more explicit
and showcase the values of your struct,

58
00:03:59.701 --> 00:04:03.599
you can prepend a plus
symbol in front of the v.

59
00:04:03.599 --> 00:04:08.094
So now, when you run it, you can
see that our person struct now also

60
00:04:08.094 --> 00:04:11.393
demonstrates the field
names associated to it.

61
00:04:11.393 --> 00:04:17.254
So it's a level of how explicit you
want to be in the variable declaration.

62
00:04:17.254 --> 00:04:19.934
There's also something
called anonymous struct.

63
00:04:19.934 --> 00:04:23.352
So here, we have a not anonymous struct.

64
00:04:23.352 --> 00:04:24.987
It's a defined struct, it's person.

65
00:04:24.987 --> 00:04:26.598
We know now it's a type, it's a struct.

66
00:04:26.598 --> 00:04:28.254
We can use it however many times we want.

67
00:04:28.254 --> 00:04:29.967
We can also have anonymous structs.

68
00:04:29.967 --> 00:04:33.642
We can have something like employee,
and in here,

69
00:04:33.642 --> 00:04:36.125
we can define the struct in place.

70
00:04:36.125 --> 00:04:43.609
Struct wants our brackets a second set of
brackets, curly brackets to be specific.

71
00:04:43.609 --> 00:04:48.513
The first set here determines
the fields of the struct.

72
00:04:48.513 --> 00:04:53.934
Okay, so here, we'll put name string and
something like id int.

73
00:04:53.934 --> 00:04:58.663
And then the second set of
brackets fill those fields in.

74
00:04:58.663 --> 00:05:04.100
We actually provide values for
those fields, we can do name, Alice,

75
00:05:04.100 --> 00:05:09.738
and we can do id 123, and
this is what's called an anonymous struck.

76
00:05:09.738 --> 00:05:16.067
These have very, very powerful use cases,
especially when we get into testing, okay?

77
00:05:16.067 --> 00:05:20.683
We'll see when we get into our testing
module, how we make use of anonymous

78
00:05:20.683 --> 00:05:24.212
structs for handling our test
cases in our application.

79
00:05:24.212 --> 00:05:27.788
And we can use this as well,
right, format, just print law and

80
00:05:27.788 --> 00:05:29.963
you can say this is employee, right?

81
00:05:29.963 --> 00:05:33.729
I'm being a little lazy with the print
line, but you can go ahead and

82
00:05:33.729 --> 00:05:36.453
use format specifiers,
that's totally fine.

83
00:05:36.453 --> 00:05:40.117
So you can see here, if you run it,
we now have our person struct and

84
00:05:40.117 --> 00:05:42.362
our anonymous employee struck as well.

85
00:05:42.362 --> 00:05:45.662
&gt;&gt; Speaker 2: Are structs reference or
value semantics,

86
00:05:45.662 --> 00:05:49.684
do they get copied when
you're passing them around?

87
00:05:49.684 --> 00:05:53.088
&gt;&gt; Melkey: Yeah, great question,
everything in go,

88
00:05:53.088 --> 00:05:56.955
you always ask one question I had,
like I love it.

89
00:05:56.955 --> 00:06:01.437
In Go, everything's parsed by value.

90
00:06:01.437 --> 00:06:03.703
It explicitly say something is reference,
right?

91
00:06:03.703 --> 00:06:08.382
So gonna spoil the next part of the thing,
but when we passed even a struct,

92
00:06:08.382 --> 00:06:11.299
we were passing a copy
of it into our function.

93
00:06:11.299 --> 00:06:19.439
And in that copied value of our struct
only exists in the scope of the function.

94
00:06:19.439 --> 00:06:21.322
And so, once that function executes,

95
00:06:21.322 --> 00:06:23.782
the memories released from
the allocated struct.

96
00:06:23.782 --> 00:06:27.950
But you can pass structs by reference,
and then modifications will persist,

97
00:06:27.950 --> 00:06:29.159
which I'll show you.

98
00:06:29.159 --> 00:06:31.729
We are going to continue on with structs.

99
00:06:31.729 --> 00:06:34.372
So we showcased anonymous structs,

100
00:06:34.372 --> 00:06:38.902
we've showcased a defined struct,
our person struct above.

101
00:06:38.902 --> 00:06:42.635
And here, we're going to define
two more structs, just so

102
00:06:42.635 --> 00:06:44.884
I can demonstrate nested structs.

103
00:06:44.884 --> 00:06:48.519
You will probably see this in a code,
basically, right?

104
00:06:48.519 --> 00:06:50.936
But here, let's say we have type address.

105
00:06:50.936 --> 00:06:53.878
It's going to be a struct.

106
00:06:53.878 --> 00:06:56.536
I'm gonna make sure I type that correctly,
all right, let's continue so

107
00:06:56.536 --> 00:06:57.770
we have this type address struct.

108
00:06:57.770 --> 00:07:01.184
Let's just say this has a street string,
I'm gonna keep it simple.

109
00:07:01.184 --> 00:07:05.788
Let's just say city also a string,
and let's say we have another struct,

110
00:07:05.788 --> 00:07:07.846
which we'll define as contact.

111
00:07:07.846 --> 00:07:11.222
So type contact is gonna
be a struct like so,

112
00:07:11.222 --> 00:07:16.791
we'll save the name of this new contact,
we'll say it's a string, and

113
00:07:16.791 --> 00:07:23.301
we can put address as our address struck
like so, and then phone string, all right?

114
00:07:23.301 --> 00:07:28.076
So here, we have a second struct
defined with a nested struct type, and

115
00:07:28.076 --> 00:07:30.158
again, it's not initiated.

116
00:07:30.158 --> 00:07:34.504
We don't have a contact just yet,
but we do contact and

117
00:07:34.504 --> 00:07:40.752
create the contact struct type,
we can put our name, let's say Mark, okay?

118
00:07:40.752 --> 00:07:44.907
And then for address, we put address here
with the address struct just like this.

119
00:07:44.907 --> 00:07:50.679
So we kinda put it inside the definition
of the parent struct that we have.

120
00:07:50.679 --> 00:07:55.753
We can say street,
we can say is 123 Main street.

121
00:07:55.753 --> 00:08:02.110
And in City,
we can put something like Anytown, okay?

122
00:08:02.110 --> 00:08:06.714
And one thing I forgot to mention, but
we can actually omit fields in our struct.

123
00:08:06.714 --> 00:08:09.986
So here, if you wanna create this new
contact without actually passing in

124
00:08:09.986 --> 00:08:11.745
the phone, that's completely fine.

125
00:08:11.745 --> 00:08:16.043
And again, this is due to zero values and
the default values, so

126
00:08:16.043 --> 00:08:21.470
there's always a fallback to a type that
is not explicitly defined, question?

127
00:08:21.470 --> 00:08:24.999
&gt;&gt; Speaker 2: Are types scoped to
the function block they're declared in?

128
00:08:24.999 --> 00:08:28.151
And can you redeclare
types from other blocks?

129
00:08:28.151 --> 00:08:30.571
&gt;&gt; Melkey: No,
you cannot redeclare a type in functions.

130
00:08:30.571 --> 00:08:33.735
Once you have a type defined,
that's the type.

131
00:08:33.735 --> 00:08:37.860
You cannot redefine them within
the function block or without.

132
00:08:37.860 --> 00:08:41.455
So this didn't show the function has
to adhere to function signature.

133
00:08:41.455 --> 00:08:44.961
Even if you have a variable declared in
the function you cannot read declared

134
00:08:44.961 --> 00:08:46.455
a variable at a different type.

135
00:08:46.455 --> 00:08:51.117
&gt;&gt; Speaker 2: There's a question about,
when would you wanna avoid nested structs?

136
00:08:51.117 --> 00:08:53.898
&gt;&gt; Melkey: When you want
to avoid nested structs, so

137
00:08:53.898 --> 00:08:57.955
essentially, there isn't one
reason to avoid them or not.

138
00:08:57.955 --> 00:09:02.474
However, like I was saying earlier,
Go passes things by value, so

139
00:09:02.474 --> 00:09:04.549
we make copies of everything.

140
00:09:04.549 --> 00:09:06.390
So if you know in your code base,

141
00:09:06.390 --> 00:09:10.847
if you have a giant struct that has
many nested fields, many nested structs.

142
00:09:10.847 --> 00:09:16.132
And you continuously passing
that whole thing by copy,

143
00:09:16.132 --> 00:09:22.322
you're probably not exerting
the best memory practices there.

144
00:09:22.322 --> 00:09:25.077
So you may wanna avoid that,
you might wanna restructure and

145
00:09:25.077 --> 00:09:27.299
consider if you wanna use
a nested struct at all.

146
00:09:27.299 --> 00:09:31.934
That's one of the main things
I can think of when to not

147
00:09:31.934 --> 00:09:36.786
nest a struct is passing it down and
making copies of it.

