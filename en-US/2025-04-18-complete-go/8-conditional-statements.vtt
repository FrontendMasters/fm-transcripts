WEBVTT

1
00:00:00.000 --> 00:00:02.901
&gt;&gt; Melkey: Let's go ahead and
talk about control structures.

2
00:00:02.901 --> 00:00:06.600
This kind of involves if statements,
switch statements, for

3
00:00:06.600 --> 00:00:08.288
loops, while loops, etc.

4
00:00:08.288 --> 00:00:13.141
I won't go in too much depth with them,
I just wanna kinda show you how they are,

5
00:00:13.141 --> 00:00:17.423
how you can use them, because Go
doesn't have any tricks about them.

6
00:00:17.423 --> 00:00:19.758
An if statement in any other language,

7
00:00:19.758 --> 00:00:23.170
is more than likely going to
look the exact same way in Go.

8
00:00:23.170 --> 00:00:27.995
So with that being said, let's go
ahead and create some random variable.

9
00:00:27.995 --> 00:00:29.903
I'm gonna make one called age, and

10
00:00:29.903 --> 00:00:32.770
then I'm gonna explore
the conditional statement.

11
00:00:32.770 --> 00:00:33.579
So that's if.

12
00:00:33.579 --> 00:00:38.054
So in Go it's just if, we can put
a condition, if age is greater or equal to

13
00:00:38.054 --> 00:00:43.205
18, let's just say fmt.PrintLn, and
we can say, you are an adult, all right?

14
00:00:43.205 --> 00:00:48.013
If you wanna chain this with
something like an else if,

15
00:00:48.013 --> 00:00:52.924
well, then it's else if, and
then the sub condition of

16
00:00:52.924 --> 00:00:57.125
age is greater or equal to, let's say, 13.

17
00:00:57.125 --> 00:00:58.874
We can do fmt.PrintLn.

18
00:01:00.767 --> 00:01:02.432
&gt;&gt; Melkey: Like so.
You can say, you are a teenager,

19
00:01:02.432 --> 00:01:03.020
all right?

20
00:01:03.020 --> 00:01:08.879
And if you wanna capture everything
in kinda this default condition,

21
00:01:08.879 --> 00:01:11.471
let me just fix this typo here.

22
00:01:11.471 --> 00:01:15.099
You can just capture
everything in this else and

23
00:01:15.099 --> 00:01:19.094
just say, fmt.PrintLn,
you are a child, right?

24
00:01:19.094 --> 00:01:23.625
So, very simple, the if else statement,
we can go ahead and just run this.

25
00:01:23.625 --> 00:01:25.806
So, go run main.go.

26
00:01:25.806 --> 00:01:26.782
You can see you are an adult.

27
00:01:26.782 --> 00:01:31.216
Very straightforward, no kind of tricks.

28
00:01:31.216 --> 00:01:35.576
You can omit the else if,
if you want to just if else, very typical.

29
00:01:35.576 --> 00:01:38.836
The next kinda, control statement
we'll look at will be switches.

30
00:01:38.836 --> 00:01:43.054
So, switches are used quite a bit in Go.

31
00:01:43.054 --> 00:01:45.994
We can create this variable,
let's just call it Tuesday.

32
00:01:45.994 --> 00:01:48.291
All right, and
then we can do a switch statement.

33
00:01:48.291 --> 00:01:51.970
So it's the keyword switch, and
then the first argument is,

34
00:01:51.970 --> 00:01:54.673
what are you going to be evaluating,
right?

35
00:01:54.673 --> 00:01:58.299
So we can do switch day,
followed by the curly braces.

36
00:01:58.299 --> 00:02:02.068
So now, depending on the value of day,
we can go into the cases.

37
00:02:02.068 --> 00:02:07.124
That syntax looks like the keyword case,
and then what the results should be.

38
00:02:07.124 --> 00:02:11.855
So we can put Monday, followed by this
colon right here, so we have case Monday,

39
00:02:11.855 --> 00:02:15.005
depending on what the condition
of day is going to be.

40
00:02:15.005 --> 00:02:16.486
We can just do format.

41
00:02:16.486 --> 00:02:22.260
We can print the line and say,
start of the week, all right?

42
00:02:22.260 --> 00:02:24.825
So the syntax here looks
a little bit different, but

43
00:02:24.825 --> 00:02:28.217
it's not too crazy if you wanna chain
a bunch of conditions into one.

44
00:02:28.217 --> 00:02:33.102
So let's say we wanna look for Tuesday,
but we also wanna look for Wednesday,

45
00:02:33.102 --> 00:02:35.332
and let's say, Thursday as well.

46
00:02:35.332 --> 00:02:36.470
You can do so like this.

47
00:02:36.470 --> 00:02:40.054
So if a bunch of conditions
fall into the same logic,

48
00:02:40.054 --> 00:02:42.178
we can just chain them like so.

49
00:02:42.178 --> 00:02:47.974
We can just say fmt.PrintLn,
you can say midweek, and type it.

50
00:02:47.974 --> 00:02:52.621
All right, we can have one
more that says case Friday,

51
00:02:52.621 --> 00:02:57.283
you can say fmt.PrintLn,
TGIF, whatever you want.

52
00:02:57.283 --> 00:03:02.911
And then in switch statements, we also
have a keyword called default, all right?

53
00:03:02.911 --> 00:03:06.103
And this default is basically,
if none of the conditions are met,

54
00:03:06.103 --> 00:03:08.447
what does our switch statement fall to,
right?

55
00:03:08.447 --> 00:03:10.862
There has to be a terminating condition.

56
00:03:10.862 --> 00:03:13.762
You can actually omit
the default if you want to,

57
00:03:13.762 --> 00:03:17.880
your switch may not even be executed,
but here we can have a default.

58
00:03:17.880 --> 00:03:20.023
And you could just say, for fmt.PrintAll.

59
00:03:20.023 --> 00:03:23.203
It could be also considered
like a catch all, if you want.

60
00:03:23.203 --> 00:03:27.998
We can say it's the weekend, yeah.

61
00:03:27.998 --> 00:03:30.657
&gt;&gt; Speaker 2: You have dynamic
case statements in Go,

62
00:03:30.657 --> 00:03:32.696
like a Boolean check as a case?

63
00:03:32.696 --> 00:03:33.196
&gt;&gt; Melkey: Yep.
&gt;&gt; Speaker 2: Okay.

64
00:03:33.196 --> 00:03:36.401
&gt;&gt; Melkey: Yep, you can have dynamic check

65
00:03:36.401 --> 00:03:41.528
in Go as well.
So if the switch statement here again,

66
00:03:41.528 --> 00:03:47.464
you can also replace,
I'm not gonna show it, but our if else,

67
00:03:47.464 --> 00:03:53.268
you can do the same with the switch.
So it'd be a switch with no expression,

68
00:03:53.268 --> 00:03:57.666
and I'll turn it to if else.
I personally would recommend you stick

69
00:03:57.666 --> 00:04:00.037
with the if else.
It's not broken, don't fix it.

70
00:04:00.037 --> 00:04:01.756
If you have a particular use case for

71
00:04:01.756 --> 00:04:05.829
a switch, like you're valuing a certain
condition and there's different cases,

72
00:04:05.829 --> 00:04:09.292
obviously, I think switch has been
more appropriate structure here.

73
00:04:09.292 --> 00:04:10.399
&gt;&gt; Speaker 3: No break necessary,

74
00:04:10.399 --> 00:04:12.237
and switches?
&gt;&gt; Melkey: Never.

75
00:04:12.237 --> 00:04:13.392
&gt;&gt; Speaker 3: Or other languages,

76
00:04:13.392 --> 00:04:17.522
you would just keep hitting the other
&gt;&gt; Melkey: Yeah, a good question, so yeah,

77
00:04:17.522 --> 00:04:21.217
if your condition's met,
it only goes to that condition.

78
00:04:21.217 --> 00:04:22.497
It's not like it continues on.

79
00:04:22.497 --> 00:04:24.333
So it doesn't go into case one, and then,

80
00:04:24.333 --> 00:04:25.353
once it's evaluated,

81
00:04:25.353 --> 00:04:28.128
checks for the following cases.
Once it goes into

82
00:04:28.128 --> 00:04:31.255
the case one, that's it.
It will break out of the switch

83
00:04:31.255 --> 00:04:34.135
statement itself.
So once the switch statement has been

84
00:04:34.135 --> 00:04:36.484
adhered, it's good.
That's why we have the default.

85
00:04:36.484 --> 00:04:38.633
So in case none of them get hit,

86
00:04:38.633 --> 00:04:42.519
it's going to hit this last
statement regardless, and

87
00:04:42.519 --> 00:04:45.342
then break out of the switch statement.

