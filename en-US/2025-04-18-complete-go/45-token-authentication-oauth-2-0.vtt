WEBVTT

1
00:00:00.345 --> 00:00:05.607
&gt;&gt; Melkey: Yeah, okay, moving on, so
this gives us the ability to create users,

2
00:00:05.607 --> 00:00:08.778
now, let's talk about authentication.

3
00:00:08.778 --> 00:00:14.031
Okay, I'm gonna switch over to here.

4
00:00:14.031 --> 00:00:16.227
So I'm gonna briefly talk about this,

5
00:00:16.227 --> 00:00:19.026
there's different types auth methods,
right?

6
00:00:19.026 --> 00:00:23.304
I'm sure most of us,
if you've used auth before,

7
00:00:23.304 --> 00:00:28.083
you know that typically you
have used one of these three.

8
00:00:28.083 --> 00:00:32.304
And the three that I could think of,
and I'm sure they're probably more,

9
00:00:32.304 --> 00:00:36.392
but the main three that I'm aware of
is stateful token authentication,

10
00:00:36.392 --> 00:00:40.163
stateless token authentication and
an OAuth 2.0, all right?

11
00:00:40.163 --> 00:00:43.163
I'm going to briefly give you
an overview of all three, and

12
00:00:43.163 --> 00:00:45.803
I'm going to tell you which
one we're going to use.

13
00:00:45.803 --> 00:00:49.895
OAuth 2.0 I'm sure we're very familiar
with this, it's whenever you use

14
00:00:49.895 --> 00:00:53.429
an application, and it gives you
the prompt to sign in with Google,

15
00:00:53.429 --> 00:00:56.973
sign in with GitHub, sign with X,
Y, Z, you can sign in with this.

16
00:00:56.973 --> 00:01:00.796
TLDR is using a third party
provider like Google,

17
00:01:00.796 --> 00:01:04.993
GitHub, to basically store and
validate who you are.

18
00:01:04.993 --> 00:01:08.922
If you have a Google account and
they know that you're legit,

19
00:01:08.922 --> 00:01:12.399
if GitHub knows you're legit,
we can use that logic,

20
00:01:12.399 --> 00:01:17.555
that kind of ramp to also validate if
you're legit for our application, right?

21
00:01:17.555 --> 00:01:21.033
If you're good enough for Google and
GitHub, maybe a good enough for us,

22
00:01:21.033 --> 00:01:22.785
that's kind of how I like to view it.

23
00:01:22.785 --> 00:01:26.860
There is a lot of really good pros to
this, essentially Google and GitHub,

24
00:01:26.860 --> 00:01:29.397
they store everything
rather in your system.

25
00:01:29.397 --> 00:01:33.441
You have to store their password, you have
to store all these other information.

26
00:01:33.441 --> 00:01:38.427
You may store things related to their user
profile on your site, but in terms of like

27
00:01:38.427 --> 00:01:43.215
things that could go pretty nasty,
like passwords, gonna leave that to them.

28
00:01:43.215 --> 00:01:47.871
There is this possibility that you
may be storing a token, right?

29
00:01:47.871 --> 00:01:52.827
So typically when you get a redirect from
Google or Github or whatever third-party

30
00:01:52.827 --> 00:01:57.950
identity provider, it's like, hey, here
is this token, it is a temporary token.

31
00:01:57.950 --> 00:02:00.658
It has a short lifespan,
which you then can

32
00:02:00.658 --> 00:02:05.484
basically handshake to get a longer
term token with the identity provider.

33
00:02:05.484 --> 00:02:10.080
And then how you handle the token tool
up to you can store in your database,

34
00:02:10.080 --> 00:02:15.072
you can store in a client that's how
you authenticate a user with OAuth 2.0.

35
00:02:15.072 --> 00:02:20.207
Super fast implement lots of
libraries that does it, lots of Pros,

36
00:02:20.207 --> 00:02:25.162
some cons is like you obviously
don't have access to their data,

37
00:02:25.162 --> 00:02:29.239
and you don't really have
the full scope of the user.

38
00:02:29.239 --> 00:02:31.155
And also,
you're dependent on a third party.

39
00:02:31.155 --> 00:02:35.187
If Google goes down and your only way of
authenticating is through OAuth 2.0 point

40
00:02:35.187 --> 00:02:37.706
using Google,
you're kind of out of luck, right?

41
00:02:37.706 --> 00:02:43.322
So pros and cons, so stateless token auth
is something we are all familiar with,

42
00:02:43.322 --> 00:02:46.311
this is JSON web token or
a JWT pronounced.

43
00:02:46.311 --> 00:02:51.034
And here, this is where everything
is essentially encoded into a token,

44
00:02:51.034 --> 00:02:54.092
that is basically
encrypted into three parts.

45
00:02:54.092 --> 00:02:58.496
A JWT has the hashing algorithm
that's used to create the JWT,

46
00:02:58.496 --> 00:03:03.232
it has the signing signature of who
created and issued that JWT, and

47
00:03:03.232 --> 00:03:08.160
then it has information that you
choose to encode into the JWT itself.

48
00:03:08.160 --> 00:03:11.474
This is typically stored on client side,

49
00:03:11.474 --> 00:03:15.746
like in memory so on,
like a cookie or local storage.

50
00:03:15.746 --> 00:03:20.118
You'd get a JWT, store it there and
you use it to authenticate, and

51
00:03:20.118 --> 00:03:21.664
this is great, right?

52
00:03:21.664 --> 00:03:23.433
It's typically done in memory.

53
00:03:23.433 --> 00:03:26.583
All the information is kind of
contained within the token itself.

54
00:03:26.583 --> 00:03:31.330
And a really good pro is that you don't
need to perform an additional database

55
00:03:31.330 --> 00:03:34.324
lookup to really authenticate
who that user is,

56
00:03:34.324 --> 00:03:37.993
because that will be typically
stored on the token itself.

57
00:03:37.993 --> 00:03:41.719
Now there are some cons to this, such as,

58
00:03:41.719 --> 00:03:45.879
once you issue the JWT,
you can't revoke it.

59
00:03:45.879 --> 00:03:51.013
You have to change the signing method of
what you use to sign that JWT, right?

60
00:03:51.013 --> 00:03:55.261
JWT, JWTs typically have like, expiry of
24 hours, but let's say you issue it and

61
00:03:55.261 --> 00:03:58.927
then you get a call that says, hey,
my account was hacked, it logged in.

62
00:03:58.927 --> 00:03:59.846
What do you do now?

63
00:03:59.846 --> 00:04:01.499
You have to change the signing method,

64
00:04:01.499 --> 00:04:03.962
of your system because you
can't retract that JWT at all.

65
00:04:03.962 --> 00:04:08.185
Once it's out in the system, all you can
do is when you when it comes back as

66
00:04:08.185 --> 00:04:11.388
a request, say that that
signature is no longer valid,

67
00:04:11.388 --> 00:04:15.157
because we've revoked that or
we changed the signature, okay?

68
00:04:15.157 --> 00:04:20.142
That's gonna affect all the JWT on your
system in case you do it in a pretty

69
00:04:20.142 --> 00:04:22.034
creative and intense way.

70
00:04:22.034 --> 00:04:25.496
Another thing, common with JWTs is
if you store the wrong info on them,

71
00:04:25.496 --> 00:04:27.295
they could be pretty easily hacked.

72
00:04:27.295 --> 00:04:31.783
Anything on the client side like cookies,
local storage, it's fairly safe but

73
00:04:31.783 --> 00:04:34.687
nowadays, like a lot of
things are getting hacked,

74
00:04:34.687 --> 00:04:37.006
a lot of people are getting really smart.

75
00:04:37.006 --> 00:04:39.400
Again, I hate to use the example of LLMs,
but

76
00:04:39.400 --> 00:04:42.496
they're tools to be used to
do this kind of stuff, right?

77
00:04:42.496 --> 00:04:48.198
So you typically want to encode the JWT
with like superficial information,

78
00:04:48.198 --> 00:04:53.112
never store the password or
anything important in a JWT, right?

79
00:04:53.112 --> 00:04:57.032
And then the last one is
stateful token auth, okay?

80
00:04:57.032 --> 00:04:58.817
And this one is the hash,

81
00:04:58.817 --> 00:05:03.832
the token is actually stored server
side in a database with a user ID and

82
00:05:03.832 --> 00:05:09.871
expiry field, these tokens, think of it as
just a different table in our database.

83
00:05:09.871 --> 00:05:14.784
It's gonna have a token table, that's
gonna have who it belongs to the scope of

84
00:05:14.784 --> 00:05:17.881
it, when it expires and
how can we use it, right?

85
00:05:17.881 --> 00:05:21.913
The real good pro about this is our back
end maintains control over the token

86
00:05:21.913 --> 00:05:24.033
throughout the entirety of the token.

87
00:05:24.033 --> 00:05:28.443
So we issued that token, the users can use
it, but if we detect they're a bad user,

88
00:05:28.443 --> 00:05:31.971
we can easily just nuke that thing,
from one call in our database,

89
00:05:31.971 --> 00:05:33.110
that thing's gone.

90
00:05:33.110 --> 00:05:35.744
We don't change any signing methods,
we don't do anything like that,

91
00:05:35.744 --> 00:05:38.481
just that thing's gone, that's it,
we clean our hand out of it, right?

92
00:05:38.481 --> 00:05:41.921
Because we have control of
it in terms of our database.

93
00:05:41.921 --> 00:05:45.501
The con to that is,
that requires an additional database call.

94
00:05:45.501 --> 00:05:51.683
You have to check the integrity of that
token through this new tokens table,

95
00:05:51.683 --> 00:05:56.908
which hence token handler which
double hence token data store.

96
00:05:56.908 --> 00:06:00.013
And I wrote this little snippet I don't
know why I probably feel a little

97
00:06:00.013 --> 00:06:00.803
zesty, I guess.

98
00:06:00.803 --> 00:06:05.833
But even with a JWT, you probably
would be doing additional database

99
00:06:05.833 --> 00:06:11.225
call to pull additional info even with
a JWT, so I mean, is it truly a con?

100
00:06:11.225 --> 00:06:16.227
We can debate that,
it does take a bit more time to set up,

101
00:06:16.227 --> 00:06:21.763
so you can just use the library
like JSON or whatever and use it.

102
00:06:21.763 --> 00:06:26.787
You actually have to do a little bit of
setup, so we're gonna be using this one.

103
00:06:26.787 --> 00:06:30.109
We're gonna be using stateful token auth,

104
00:06:30.109 --> 00:06:33.625
it's rolling your own auth,
some would say.

105
00:06:33.625 --> 00:06:36.639
I think that really blew up in 2023,

106
00:06:36.639 --> 00:06:41.602
if you have a strong opinion on it,
obviously, I understand it and

107
00:06:41.602 --> 00:06:46.761
acknowledge it, I do think that was
really blown out of proportion.

108
00:06:46.761 --> 00:06:51.864
If you're not creating the own hashing
algorithm, I think you should be okay if

109
00:06:51.864 --> 00:06:56.817
you use a shot 256, that's already
made by computer science theorists,

110
00:06:56.817 --> 00:07:00.876
I think you are okay to handle
token authentication yourself.

111
00:07:00.876 --> 00:07:03.711
So with that,
that's what we're going to be exploring.

