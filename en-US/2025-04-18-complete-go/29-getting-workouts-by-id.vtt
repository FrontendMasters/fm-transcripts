WEBVTT

1
00:00:00.000 --> 00:00:04.084
&gt;&gt; Melkey: Okay, good stuff, so
now we're able to create workouts, and

2
00:00:04.084 --> 00:00:09.404
we're able to have the correct tooling
to validate that something's inserted,

3
00:00:09.404 --> 00:00:13.663
we can look at any error messages,
and we can debug them as we see.

4
00:00:13.663 --> 00:00:18.892
So the next part we're gonna do is do
the rest of the handlers, wo we wanna get

5
00:00:18.892 --> 00:00:24.228
the work ID, update the work ID, and
eventually delete them as well, okay?

6
00:00:24.228 --> 00:00:28.100
So we're gonna work back
into the workout store, so

7
00:00:28.100 --> 00:00:32.764
this file here, the one that has
our interface and our struck.

8
00:00:32.764 --> 00:00:36.288
And the first thing we're going to do,
and as always,

9
00:00:36.288 --> 00:00:39.582
if you have an interface
in your application code,

10
00:00:39.582 --> 00:00:44.353
what I would always recommend is add
the function definition here first.

11
00:00:44.353 --> 00:00:48.312
You can see here we have our Create and
GetWorkout,

12
00:00:48.312 --> 00:00:52.193
let's add a new one for
UpdateWorkout, like so.

13
00:00:52.193 --> 00:00:57.347
UpdateWorkout is gonna take
an argument of a pointer to a Workout,

14
00:00:57.347 --> 00:01:00.117
and it's going to return an error.

15
00:01:00.117 --> 00:01:06.513
So that's simply the function definition
for our workout store interface, okay?

16
00:01:06.513 --> 00:01:11.469
And I think an appropriate part for us to
pick up where we left off is finishing up

17
00:01:11.469 --> 00:01:16.668
the GetWorkoutByID, cuz right now it's
just simply a scaffold of the function.

18
00:01:16.668 --> 00:01:18.208
So we're gonna start right here.

19
00:01:18.208 --> 00:01:22.666
Now, for this one,
we're gonna follow the same pattern, so

20
00:01:22.666 --> 00:01:26.883
let's go ahead and
create our own query, like so, okay?

21
00:01:26.883 --> 00:01:30.400
We're gonna SELECT id, title,

22
00:01:30.400 --> 00:01:34.671
description, duration_minute, and

23
00:01:34.671 --> 00:01:40.456
the calories_burned from
our workout table, okay?

24
00:01:40.456 --> 00:01:45.204
So FROM workouts, and
we wanna make sure WHERE id equals

25
00:01:45.204 --> 00:01:48.951
the one value we're gonna pass in, right?

26
00:01:48.951 --> 00:01:53.781
If we're gonna have a bunch of workouts in
the table, we want to retrieve the one by

27
00:01:53.781 --> 00:01:57.640
its identifiable ID,
which in our case is simply just ID, okay?

28
00:01:57.640 --> 00:02:03.528
Once you have that query ready, we can
then declare the error here as pg.db,

29
00:02:03.528 --> 00:02:07.167
and here,
we're actually gonna do query row.

30
00:02:07.167 --> 00:02:13.350
So this executes a query that's expected
to return at most one row, okay?

31
00:02:13.350 --> 00:02:16.573
So different functionalities,
we have query row,

32
00:02:16.573 --> 00:02:21.628
we have query execute a bunch of different
things that we can use from the driver and

33
00:02:21.628 --> 00:02:23.545
the native SQL package and go.

34
00:02:23.545 --> 00:02:26.634
So it depends on what your use case is,
right?

35
00:02:26.634 --> 00:02:30.054
But here,
we're gonna pass in the query and

36
00:02:30.054 --> 00:02:35.243
then the one argument our query expects,
which is id, all right?

37
00:02:35.243 --> 00:02:38.949
And then here, we're gonna scan all
those fields that we're selecting into

38
00:02:38.949 --> 00:02:42.840
its appropriate fields, quick reminder,
these have to be addresses, right?

39
00:02:42.840 --> 00:02:47.787
These have to be pointers that we're gonna
scan this into the pointer of our workout.

40
00:02:47.787 --> 00:02:52.730
So what we can do here is reference
the address of our workout,

41
00:02:52.730 --> 00:02:56.625
we can put in the order they come in,
so it's ID,

42
00:02:56.625 --> 00:03:01.474
then it's workout.Title,
Description, description,

43
00:03:01.474 --> 00:03:07.974
DurationMinutes,
&gt;&gt; Melkey: And

44
00:03:07.974 --> 00:03:12.012
the last one is calories burned, like so.

45
00:03:12.012 --> 00:03:15.811
So all you have to do is make sure you
match the appropriate fields from our

46
00:03:15.811 --> 00:03:19.439
workout struct to the fields we're
selecting from the query above.

47
00:03:19.439 --> 00:03:23.163
Now, we have to appropriately
check our error, so

48
00:03:23.163 --> 00:03:26.376
we're gonna check two fields here, okay?

49
00:03:26.376 --> 00:03:29.639
So the column one is,
if our error does not equal to nil,

50
00:03:29.639 --> 00:03:33.474
we're gonna return nil and
the error, we've seen this before.

51
00:03:33.474 --> 00:03:37.695
However, there is a chance that someone
may be querying a workout that just

52
00:03:37.695 --> 00:03:38.704
doesn't exist.

53
00:03:38.704 --> 00:03:43.307
Which that's not an error that is simply
a behavior of what may happen with

54
00:03:43.307 --> 00:03:45.397
a relational database, right?

55
00:03:45.397 --> 00:03:48.782
The Postgres is gonna error out, if you
try to [INAUDIBLE] something that doesn't

56
00:03:48.782 --> 00:03:51.339
exist, it's going to return,
this thing doesn't exist.

57
00:03:51.339 --> 00:03:54.115
So we have to account for that, and SQL,

58
00:03:54.115 --> 00:03:58.125
the native package in go gives
us that tool to help do that.

59
00:03:58.125 --> 00:04:04.159
So we can do if error and we can check
does it equal to sql error, NoRows, okay?

60
00:04:04.159 --> 00:04:08.159
So this is returned by Row scan when DB

61
00:04:08.159 --> 00:04:13.076
query row doesn't return a row, all right?

62
00:04:13.076 --> 00:04:17.664
So in this case, what we're going to
do is just simply return nil and nil.

63
00:04:17.664 --> 00:04:20.057
&gt;&gt; Speaker 2: This data
structure just simply, or

64
00:04:20.057 --> 00:04:22.766
an interface that just returns nothing.

65
00:04:22.766 --> 00:04:23.416
&gt;&gt; Melkey: Which one of this?

66
00:04:23.416 --> 00:04:25.028
&gt;&gt; Speaker 2: The sql.ErrNoRows?

67
00:04:25.028 --> 00:04:26.808
&gt;&gt; Melkey: Yep, if you go into it,

68
00:04:26.808 --> 00:04:31.703
it's actually a variable that's
created from an errors.New.

69
00:04:31.703 --> 00:04:35.225
So the native errors package, it just
creates this variable that we can use.

70
00:04:37.236 --> 00:04:39.874
&gt;&gt; Melkey: So like you can literally
replace this with errors.New and

71
00:04:39.874 --> 00:04:43.092
return that if you want, but
it's gonna satisfy the error constraint,

72
00:04:43.092 --> 00:04:44.746
that's why we can put it as an error.

73
00:04:44.746 --> 00:04:48.263
&gt;&gt; Speaker 3: It always end up
returning early in this case though,

74
00:04:48.263 --> 00:04:52.886
if you have error not equal to nil
before that, or do I misunderstand?

75
00:04:52.886 --> 00:04:55.713
&gt;&gt; Melkey: Let's see, if error is not
equal to nil, return nil error otherwise

76
00:04:55.713 --> 00:04:59.154
it will always return, yeah, you're
right actually, these should be swapped.

77
00:04:59.154 --> 00:05:04.274
Yeah, so first we check if it's empty or
if it matches an ErrNoRows,

78
00:05:04.274 --> 00:05:08.888
then it's gonna nil, and
then we check if there's an error.

79
00:05:08.888 --> 00:05:13.592
Good, catch, cool, so
at this point, right here,

80
00:05:13.592 --> 00:05:17.881
we're able to retrieve the entire workout,
but

81
00:05:17.881 --> 00:05:21.661
we still have to retrieve all the entries.

82
00:05:21.661 --> 00:05:24.115
Remember, like a one
too many relationship.

83
00:05:24.115 --> 00:05:28.397
So if we only really cared about those
high level items on our workout,

84
00:05:28.397 --> 00:05:31.590
we can consider this done,
but we need to go ahead and

85
00:05:31.590 --> 00:05:35.240
query the individual entries
that belong to this workout.

86
00:05:35.240 --> 00:05:40.178
So to do this, I'm gonna quickly make
a comment, let's get the entries.

87
00:05:40.178 --> 00:05:45.144
Okay, and to get the entries,
it's gonna be a pretty interesting

88
00:05:45.144 --> 00:05:49.592
approach here, but
it always starts with our entryQuery.

89
00:05:54.613 --> 00:05:59.694
&gt;&gt; Melkey: Okay, here we're
gonna select all the fields that

90
00:05:59.694 --> 00:06:05.010
we care from our our entries,
so id exercise_name,

91
00:06:05.010 --> 00:06:10.564
sets, reps, duration_seconds,
weight, notes and

92
00:06:10.564 --> 00:06:17.672
then the last field is order_index
like so, FROM workout_entries.

93
00:06:17.672 --> 00:06:23.457
The entries table where
the workout_id equals

94
00:06:23.457 --> 00:06:28.525
to the [INAUDIBLE] we're going to pass in.

95
00:06:28.525 --> 00:06:33.140
Okay, I'm gonna ORDER BY
the order index so

96
00:06:33.140 --> 00:06:39.898
we get adhere to the order they
are represented in our database.

97
00:06:39.898 --> 00:06:44.412
Now since this is a one-to-many
relationship, this query can respond

98
00:06:44.412 --> 00:06:48.560
with multiple different results
from the workout entries table.

99
00:06:48.560 --> 00:06:52.714
So we have to handle this in a bit
different way than the query row above, so

100
00:06:52.714 --> 00:06:53.726
how do we do this?

101
00:06:53.726 --> 00:06:59.437
We need to clear rows and error as pg.db,
or we simply just write Query,

102
00:06:59.437 --> 00:07:03.184
and here we're gonna pass
in our entryQuery and

103
00:07:03.184 --> 00:07:08.171
the one argument this query expects,
which is just id, okay?

104
00:07:08.171 --> 00:07:12.383
We're gonna check the error, so
if error does not equal to nil,

105
00:07:12.383 --> 00:07:14.806
I'm gonna return nil and the error.

106
00:07:20.066 --> 00:07:25.837
&gt;&gt; Melkey: Otherwise, before we move on,
we want to defer rows.close, okay?

107
00:07:25.837 --> 00:07:31.498
So we make sure that we close any
lingering connections to the database and

108
00:07:31.498 --> 00:07:35.531
any lingering return results
from this query here.

109
00:07:35.531 --> 00:07:41.073
Again, gonna prepend it with our
defer function keyword, okay?

110
00:07:41.073 --> 00:07:44.791
So now, we have these rows, we're
gonna iterate through each single one,

111
00:07:44.791 --> 00:07:47.303
every result could be one,
could be a ton, right?

112
00:07:47.303 --> 00:07:49.249
We don't know, but we really don't care.

113
00:07:49.249 --> 00:07:52.891
So what we can do is for rows.Next, right?

114
00:07:52.891 --> 00:07:56.466
So it's gonna iterate through
the next result of our rows.

115
00:07:56.466 --> 00:08:01.967
Here, we're gonna create within
the function of this for loop,

116
00:08:01.967 --> 00:08:07.581
we're gonna do var entry is gonna
be of type WorkoutEntry like so.

117
00:08:07.581 --> 00:08:14.687
And here we're gonna do err
is going to be rows.Scan.

118
00:08:14.687 --> 00:08:17.216
We can potentially make this a little
bit easier to read instead of making

119
00:08:17.216 --> 00:08:17.885
it one giant line.

120
00:08:17.885 --> 00:08:22.570
I can stack them here, it just because the
screen has to be a little bit zoomed in.

121
00:08:22.570 --> 00:08:25.370
So here we can do entry.ID,

122
00:08:25.370 --> 00:08:30.749
I'm gonna scan all this into
the appropriate fields.

123
00:08:30.749 --> 00:08:37.379
We can do entry.ExerciseName, entry.Sets

124
00:08:43.579 --> 00:08:45.658
&gt;&gt; Melkey: entry.DurationSeconds.

125
00:08:48.687 --> 00:08:55.159
&gt;&gt; Melkey: Wait, notes and
then entry.OrderIndex.

126
00:08:57.774 --> 00:09:03.399
&gt;&gt; Melkey: Okay, so your scan should
have ID, exercise name, sets,

127
00:09:03.399 --> 00:09:09.035
reps, duration seconds,
wait notes and the order index.

128
00:09:09.035 --> 00:09:12.614
So, individual going through
every return result and

129
00:09:12.614 --> 00:09:17.297
a passing those results into its
individual entry workout entry type.

130
00:09:17.297 --> 00:09:20.869
Here we're gonna check if
there is any error, so

131
00:09:20.869 --> 00:09:26.018
if error does not equal to nil,
we can simply return nil and the error.

132
00:09:26.018 --> 00:09:31.418
And in the last part,
we can do workout.Entries and

133
00:09:31.418 --> 00:09:37.325
we can use the fact that entries
is a slice to append to it.

134
00:09:37.325 --> 00:09:42.868
So we can do workout.Entries equal append,
to pass in the existing slice,

135
00:09:42.868 --> 00:09:49.035
which is the workout dot entries, and then
we can pass in the newest entry, like so.

136
00:09:49.035 --> 00:09:54.651
So that's gonna actually be the completion
of the get workout by ID function

