WEBVTT

1
00:00:00.036 --> 00:00:01.803
&gt;&gt; Melkey: Time for
us to check if this works.

2
00:00:01.803 --> 00:00:03.956
Let's go back to our running Go server.

3
00:00:03.956 --> 00:00:06.014
Run it down and go run main.go.

4
00:00:06.014 --> 00:00:07.605
Is there any obvious errors?

5
00:00:07.605 --> 00:00:08.310
No?
That's good.

6
00:00:08.310 --> 00:00:12.969
You can see it's updated to the current
version of four, which is great.

7
00:00:12.969 --> 00:00:18.577
Okay, if we look at p s q l,
select we'll do a /dt.

8
00:00:18.577 --> 00:00:21.596
We now see we have our
tokens table right here.

9
00:00:21.596 --> 00:00:26.247
If we do select all from tokens,
we have nothing there.

10
00:00:26.247 --> 00:00:29.409
If I quickly double check
select all from users,

11
00:00:29.409 --> 00:00:31.960
you can see we have one user, John Doe.

12
00:00:31.960 --> 00:00:35.286
I'm actually going to create
a new user called Jack_,

13
00:00:35.286 --> 00:00:39.249
not to be confused with John_Doe,
but just to demonstrate that,

14
00:00:39.249 --> 00:00:44.230
you just can't create an account and then
we can use that account to authenticate.

15
00:00:44.230 --> 00:00:51.751
So you go back into the post_notes.txt,
you should see under section 3.2,

16
00:00:51.751 --> 00:00:55.851
we actually have two
sets of code requests.

17
00:00:55.851 --> 00:01:00.815
So here we can take this one, which would
be the usual, which creates A new user,

18
00:01:00.815 --> 00:01:01.332
right?

19
00:01:01.332 --> 00:01:03.572
So I'm gonna go ahead and copy this.

20
00:01:03.572 --> 00:01:07.589
I'm gonna paste it right
here into my terminal.

21
00:01:07.589 --> 00:01:10.122
So now I have this new user, id 2.

22
00:01:10.122 --> 00:01:15.668
Username, jack_doe, jack.doe@example.com,
we can check again, select all from users.

23
00:01:15.668 --> 00:01:22.840
There they are, john doe and
jack doe, very nice.

24
00:01:22.840 --> 00:01:27.753
And if you go back into the POST notes and
take the second curl request,

25
00:01:27.753 --> 00:01:31.348
which is going to be to
/token/authentication.

26
00:01:31.348 --> 00:01:35.046
So if you go ahead and
grab this and you paste it here,

27
00:01:35.046 --> 00:01:38.928
make sure that the username is,
in fact, jack_doe.

28
00:01:38.928 --> 00:01:42.004
If you don't wanna use that, just make
sure matches the username of the user

29
00:01:42.004 --> 00:01:44.472
you've created or
the other user you have in your database.

30
00:01:44.472 --> 00:01:46.053
Make sure the passwords match as well.

31
00:01:46.053 --> 00:01:50.788
And if this works,
you should see now we are able to generate

32
00:01:50.788 --> 00:01:54.591
an authentication token for
our user Jack Doe.

33
00:01:54.591 --> 00:01:58.015
And if you want,
we can be a little bit more let's try,

34
00:01:58.015 --> 00:02:00.564
let's see what if this is 124 right?

35
00:02:00.564 --> 00:02:01.325
Invalid credentials.

36
00:02:01.325 --> 00:02:05.269
So there's ways that we can validate
that this does in fact work, but

37
00:02:05.269 --> 00:02:08.678
now we can guarantee that our
username Jack Doe has a token.

38
00:02:08.678 --> 00:02:15.462
And if we double check in PSQL,
if we do select all from tokens,

39
00:02:15.462 --> 00:02:20.455
you can now see Jackdaw
has a hash token Token.

40
00:02:20.455 --> 00:02:21.492
His user ID is 2.

41
00:02:21.492 --> 00:02:23.330
We don't really know who that is.

42
00:02:23.330 --> 00:02:28.515
The expiry is 24 hours from now,
and the scope is authentication.

