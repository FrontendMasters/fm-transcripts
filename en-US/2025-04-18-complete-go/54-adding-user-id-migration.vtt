WEBVTT

1
00:00:00.000 --> 00:00:03.411
&gt;&gt; Melkey: We're close to wrapping up,
but there is one very,

2
00:00:03.411 --> 00:00:08.681
very obvious issue in this entire app,
not middleware at all, and it's the fact

3
00:00:08.681 --> 00:00:13.511
that people can still create workouts and
delete them however they want.

4
00:00:13.511 --> 00:00:19.087
There is no core safety
between someone deleting

5
00:00:19.087 --> 00:00:25.760
all of my workouts that even
if they don't belong to them.

6
00:00:25.760 --> 00:00:31.160
And if you remember at the very,
very beginning in migrations,

7
00:00:31.160 --> 00:00:35.965
in workouts, we have this commented out,
this user ID.

8
00:00:35.965 --> 00:00:40.640
Well, we have come to the time
where we're gonna basically start

9
00:00:40.640 --> 00:00:43.875
giving every workout
an associated user ID.

10
00:00:43.875 --> 00:00:48.726
So user IDs are gonna be
responsible of creating a workout,

11
00:00:48.726 --> 00:00:54.643
no more will people be quote, unquote,
anonymous to create workouts,

12
00:00:54.643 --> 00:00:59.397
and this will allow us to
validate if the person submitting

13
00:00:59.397 --> 00:01:03.976
the request is in fact the owner
of that workout, okay?

14
00:01:03.976 --> 00:01:05.321
And so how do we do this?

15
00:01:05.321 --> 00:01:08.341
Well, if we go back,
we're not gonna uncommon this,

16
00:01:08.341 --> 00:01:12.937
we're gonna leave this we won't touch
this file anymore, but under migrations,

17
00:01:12.937 --> 00:01:15.253
we're gonna create a fifth file, okay?

18
00:01:15.253 --> 00:01:18.552
We're gonna create 00005.

19
00:01:18.552 --> 00:01:23.453
This file,
we can call it user_id_alter.sql.

20
00:01:26.400 --> 00:01:30.733
&gt;&gt; Melkey: All right, so it should look
like just an empty file, but go ahead and

21
00:01:30.733 --> 00:01:34.572
just copy an existing SQL file
cuz it would save us some time.

22
00:01:34.572 --> 00:01:38.404
So paste it, let's go ahead and save.

23
00:01:38.404 --> 00:01:42.223
Okay, so we're not gonna be
creating a new table, but

24
00:01:42.223 --> 00:01:45.387
what we're going to be
doing is alter table.

25
00:01:45.387 --> 00:01:48.031
The table name is gonna be workouts.

26
00:01:48.031 --> 00:01:51.591
All right, and
this is truly a good use of of migrations.

27
00:01:51.591 --> 00:01:55.055
We're modifying the schema of this table,
okay?

28
00:01:55.055 --> 00:01:58.662
And here we're gonna do add column, okay?

29
00:01:58.662 --> 00:02:06.632
User_id, I'm gonna describe
what this user_id is,

30
00:02:06.632 --> 00:02:12.737
it's gonna be a BIGINT NOT NULL REFERENCES

31
00:02:12.737 --> 00:02:17.496
users(id) ON DELETE CASCADE.

32
00:02:17.496 --> 00:02:20.484
And then DROP TABLE,
we're not gonna be doing any drop tables.

33
00:02:20.484 --> 00:02:25.554
So on the goose down ALTER TABLE

34
00:02:25.554 --> 00:02:31.017
workouts DROP COLUMN user_id.

35
00:02:31.017 --> 00:02:35.496
And with that if we go back up,
here we can rerun our same Goose command,

36
00:02:35.496 --> 00:02:39.391
so you might have it saved, so
I recommend just using this up.

37
00:02:39.391 --> 00:02:43.965
So goose -dir migrations postgres, and
it's just the up command at the very end.

38
00:02:43.965 --> 00:02:50.374
And if you run this, you should see
this error, this is intentional.

39
00:02:50.374 --> 00:02:57.052
I wanted to showcase this because what I
wanted to do is highlight the importance

40
00:02:57.052 --> 00:03:03.246
of really understanding your data
before you go too deep in programming.

41
00:03:03.246 --> 00:03:07.240
The reason why we can't use
this is cuz we have already.

42
00:03:07.240 --> 00:03:13.313
If you go into PSQL and
we select all from workouts,

43
00:03:13.313 --> 00:03:17.136
we have a workout here already.

44
00:03:17.136 --> 00:03:20.698
And if we were to
introduce this new column,

45
00:03:20.698 --> 00:03:25.225
this user_id that makes
a relation to our users table,

46
00:03:25.225 --> 00:03:28.904
how do we find who remade this entry,
right?

47
00:03:28.904 --> 00:03:31.375
Do we call everyone, all of our users?

48
00:03:31.375 --> 00:03:35.513
No, so the unfortunate side
of this is this migration,

49
00:03:35.513 --> 00:03:38.772
although convenient to execute via Goose,

50
00:03:38.772 --> 00:03:44.249
it still presents a giant flaw in
the architecture engineering, right?

51
00:03:44.249 --> 00:03:50.375
So especially dealing with user databases
with relational database to user fields or

52
00:03:50.375 --> 00:03:55.222
even other fields, make sure that
when you are adding a field that if

53
00:03:55.222 --> 00:03:59.815
it is a field that references
another table, you make a backup or

54
00:03:59.815 --> 00:04:04.436
some way to identify how to make
that successful relationship.

55
00:04:04.436 --> 00:04:07.526
Because the answer here is,
there is no good answer.

56
00:04:07.526 --> 00:04:10.828
We actually have to delete and
wipe the data here.

57
00:04:10.828 --> 00:04:18.377
So NPSQL right here, what I'm gonna do
is write DELETE FROM workouts like so.

58
00:04:18.377 --> 00:04:21.294
And if I run this,
it should say I've deleted one workout.

59
00:04:21.294 --> 00:04:23.417
So here, DELETE 1.

60
00:04:23.417 --> 00:04:26.138
We can validate that
that no longer exists.

61
00:04:26.138 --> 00:04:34.575
We also validate from workout_entries
that they are in fact empty.

62
00:04:34.575 --> 00:04:37.373
So ON DELETE CASCADE does work indeed.

63
00:04:37.373 --> 00:04:40.995
So with that,
we can now rerun our Goose command, and

64
00:04:40.995 --> 00:04:45.278
here we are on successfully
migrate database to version five.

65
00:04:45.278 --> 00:04:50.333
So yeah, just kind of sound like a broken
record all because we have the ability

66
00:04:50.333 --> 00:04:55.944
to make migrations doesn't excuse any kind
of laziness on the engineer side, right?

67
00:04:55.944 --> 00:05:00.931
So again, just beware of
the feature you are going to add

68
00:05:00.931 --> 00:05:04.552
the level of your application, right?

69
00:05:04.552 --> 00:05:07.811
If your app is already having
the content of thousand of users,

70
00:05:07.811 --> 00:05:12.055
there's certain features that gonna be
very complicated to add if they do require

71
00:05:12.055 --> 00:05:13.975
adding a new relationship, right?

72
00:05:13.975 --> 00:05:16.995
That has to be some creative fields,
creative ways to do that.

73
00:05:16.995 --> 00:05:21.196
Some of this does actually involve
making a back of the DB in a script

74
00:05:21.196 --> 00:05:24.058
to put that data into
the modified database.

75
00:05:24.058 --> 00:05:29.665
So I just wanna kind of give a heads up
on how to handle something like this.

76
00:05:29.665 --> 00:05:35.361
Cool, so now, if we go to psql and
we do select all from workouts,

77
00:05:35.361 --> 00:05:42.010
we can see we now have our new user_id
field and that is working pretty well.

