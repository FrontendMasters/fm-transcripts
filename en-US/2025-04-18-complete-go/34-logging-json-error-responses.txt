[00:00:00]
>> Melkey: We're gonna do one more thing. So you know, there's annoying format, print, line errors. I've been asking you guys to put those are not great. That's very, very bad error handling. It works when it has to, but we can make our jobs of error debugging a little bit nicer and easier.

[00:00:16]
So we can go back to our app.go. And when we're declaring the workout handler, we're give it a new argument loggerm, okay? Right now, it's gonna say too many arguments in the call to our constructor. Don't worry about it.
>> Melkey: And we're actually going to leverage our logger, the one we declared in the very first kind of submodule, to write error messages for us.

[00:00:38]
So now if you go back to our workout handler and we go all the way back up, this workout handler stroke no longer is just going to be accepting the workout store. We can now add logger which can be of type log.logger.
>> Melkey: And now our constructor method.

[00:01:02]
It's gonna take logger. It's gonna be that argument that we just passed in, log.logger. And then our actual return, we can put logger as logger like so. So here comes the fun part. We're gonna be rewriting a lot of code. You can hate me, that's fine. I'll take it.

[00:01:20]
But I want to show how we can really get something working and then how we can improve on it, all right? So here we're gonna start with the handle, get workup by ID. Everything here, from paramsworkoutID to the workIDreturn we can delete. And here what we're going to do instead is define workoutID err as utils.readIDParam.

[00:01:49]
I'm going to pass it in R. Okay, so we're going to use the utility function we have here. We can check the error. So if error does not equal to nil, we can go ahead and write our wh, our logger like so. I'm gonna leverage this. We're gonna do printf, and now this print is gonna be for us.

[00:02:09]
I'm gonna make it a little bit nice. I'm going to do error, right? We can do readIDParam, something like this, module V, and I put the error like so. And we can also leverage our new writeJSON function. So we're gonna do utils.write JSON w to pass httpStatus, so StatusBadRequest, okay?

[00:02:36]
And then we can use utils.envelope like so, and we can just say error and then pass in the key invalid workout id, and make sure we return, okay? And so go ahead and copy those two lines, the logger line and the right JSON line, and now when we call or check errors, we can simply use that style, that blueprint, that scheme of fuel to handle our errors.

[00:03:06]
So here error it's going to be getWorkoutbyID. So that tells us exactly what the error is going to be, okay? Otherwise, instead of status as being http.statusInternalServerError.
>> Melkey: Okay, and in the envelope after error, we can just say internal server error. Because remember, this is gonna be for our client.

[00:03:35]
Our client doesn't necessarily need to know what's happening from our own backend. If our backend is breaking, that's on us to log and figure out. We don't need to send every error message back to the caller, especially users.
>> Melkey: You can, of course, be more explicit and maybe provide them an error code that they can then go to customer support or something like that.

[00:04:02]
But that kinda be outside the scope of what we're doing here, all right? And then we can just simply delete all this stuff from the getWorkoutID at the bottom. We can again, utilize our new WriteJSON, cuz it's not just for handling errors. We can do utils.WriteJSON, pass in our w, and then here we http.Status,Ok.

[00:04:27]

>> Melkey: We can use utils.envelope, and here we can see some of the cool things of that interface or any type. We can just put workout. And here just put workout like so. So it's a nice little flexible function that we have for just handling JSON back to our client.

[00:04:46]
Let's move on to the CreateWorkout. So again, I'm just gonna go ahead and copy that logger in the utils print. And right here, right underneath the decoder, we can go ahead and paste this like so. The first logger error could be error decodingCreateWorkout. Again, this is for us.

[00:05:15]

>> Melkey: And here we can say invalid request sent. And this is back to our colors. Let's go ahead and take this, put it down in underneath the created workout. So when we call our handler workout store and the CreateWorkout here, the error message would be createworkout. And there's a bit of a pattern here.

[00:05:41]
So the error message is followed by, typically, what is like the function calling that workout, whatever is more flexible for you. There's this kind of pattern set, but nothing set in stone. I'd always recommend do what's most obvious for you. Here, we can do statusInternalServerError cuz if something goes down and I was creating it, which is back to our database.

[00:06:03]
That's on us. So here we can just say failed to create workout.
>> Melkey: All right, and then here, instead of doing the header and the encoder, what we can do is utils.WriteJSON w, httpStatusCreated
>> Melkey: Like so. Use utils.Envelope, okay? We can do workout as the created workout.
>> Speaker 2: We're not checking the errors that WriteJSON could have, but would she default to?

[00:06:45]
We could not write to the-
>> Melkey: No, you can definitely check the errors. I'm being a little lazy here. You can definitely check the errors this. This is actually an example of go, forcing the program, or the engineer to check the errors cuz as you just noticed WriteJSON, it returns an error, but we're not checking it, and I'm making that decision, which is a wrong decision.

[00:07:05]
I'm kind of doing that just to save time a bit for kind of the course and the time constraints we have here. But like doing this right, error is utils. And then check if error does not equal, oops, it's not equal to nil. And then, handle your error here, something you definitely can and should do.

[00:07:30]

>> Speaker 3: Would but would she default it to, Okay, if there was no SAS code written to the header, would it be, this is a 400 or just, is there some sort of catch, I guess, in-
>> Melkey: Well, the way you handle your error at this point, you would probably specify a separate request to your user.

[00:07:54]
You wouldn't use the WriteJSON to write back to the header. You'd make something like again, like an http error, something like that. The one we showed before, just fix this. You do http error, and you put W and then could not write back to client, right? And then you put in any error you want.

[00:08:19]
So in this case, from my understanding, this would be an internal server error, which is 500, right? And again, you do this if error does not equal to no.
>> Melkey: Something like that, right? And even in this so you cannot write back to client, but something was created, right?

[00:08:46]
So you have to get kind of creative with how you want to handle that, how you want to communicate back to your caller. Give it up to you. I just don't wanna keep writing if err does not equal the no, cuz I think writing it a decent amount of time already.

[00:09:00]

>> Speaker 3: Yeah.
>> Melkey: Let's go ahead and finish up the updateWorkout and then the deleteWorkout. So in the handleUpdate, we have again those params. So we can just simply go back to handleWorkout right here. Go ahead and just delete all that and declare workoutID, okay, and error is going to be utils.readIDparam, pass in the pointer, ar, check the error.

[00:09:36]

>> Melkey: All right, I'm going to just go scroll back up where I already wrote this. So something like this
>> Melkey: Okay, and then when we fetch the workout, so we can just rename to getWorkoutByID error.
>> Melkey: We can make this status internal server error, okay? And in the envelope, we can do error.

[00:10:15]
We can do internal server error, okay? Now, again, you can feel free to modify those error message to whatever you want. There's lots of flexibility with the utils.WriteJSON utility function. If you wanna be more explicit to your caller, more explicit to yourself, feel free to do so. I'm just taking a bit of a liberty here.

[00:10:36]
I'm just kinda using the internal server error as a catch-all statement. This is the best user experience, we could probably debate that, but we can explore different ways to make it better down the line. So we have a few more spots we need to handle our errors. So if we go into the decode here, you can see error: decodingUpdateRequest instead of InternalServerError, this can be StatusBadRequest.

[00:11:13]

>> Melkey: Okay, invalid request, payload like so. And then in updateWorkout, you can go ahead. And say, error updating the workout. This would be statusInternalServerError, once again,
>> Melkey: Like so, and then we can remove these header types at the bottom here, and again, leverage our utils envelope.utils.WriteJSON, say w, httpStatusOK, utils.envelope.

[00:11:55]
You can put workout, and here you can put the existingWorkout. So we can do the rest for delete as well. I'll leave that up to you because it's repeating the same thing. But this is just a way for us to handle our errors, and specifically our JSON. And I wanna demonstrate that.

[00:12:09]
So we have the Go server now fully running. And if we go back to our post notes here. So we finished 1.6. This is new post notes text section 1.8, and this is simply a summary of the CO request, so we don't need to have them repeated. But I think it's just easier.

[00:12:29]
So here I'm gonna copy this post. There's the same one for creating, right? And here, all I want to demonstrate is how the JSON looks. So if I paste this and I click Enter, you can now see our Return JSON looks much nicer. It's not just this blob at the bottom, and you kinda looking like, what does this mean?

[00:12:47]
What is this? I don't really understand this. It's much nicer for us to parse and raise. You can see, here's a request, and here are the values. And I'm actually noticing id: 0. That is probably because we're not returning the ID from our entry so we can modify that or even remove it entirely.

[00:13:05]
So we can go ahead and do that. So here, if we go to workout store, and this was in the create method, so here we're returning ID. Here we are returning. And I key
>> Melkey: It's a bit odd, I'm not too sure why it's actually empty. Returning ID, returning ID, let me just double check.

[00:14:04]
We'll explore that later. The worker does, in fact, have the id. I'll debug why id here is zero. I'll make a quick fix for it. It's probably some typo going on, or maybe I'm not having that filled correctly in the actual entries. But the main point is that now our JSON is legible, and we can use this more accurately in the rest of our code.

[00:14:31]
And we can even do something like a get now. So if you go back into the post notes. And then here. So we just curled and created a workout. If we just do a simple get, I'm gonna go ahead and copy this and paste it. You can see we actually have the work that's working.

[00:14:48]
Yes, so get is actually responding with the appropriate IDs, but the create isn't so kinda figure out why that is. But yeah, now we have much better JSON, much better error handling as well.

