[00:00:00]
>> Melkey: All right, very nice. So now we have to get workout and the update workout methods only in our data store. Let's go all the way up to the workout handler and fix these up so that we can actually call them, query them and test them out. Let's go into the workout handler above.

[00:00:16]
So just a quick reminder we already have handle create workout function working. So now we're gonna work in the handle, get workout by ID. This can be fairly quick, not quick, but simple integration here. So at the bottom here, after we check the last error for the workout ID, what we can do is workout error is going to be a workout handler, the workout store and the get workout by ID function.

[00:00:48]
We can pass in the workout ID.
>> Melkey: As per usual let's check the error, so if error does not equal to nil, we're gonna do a format, print line error.
>> Melkey: Bear with me, it's not permanent, we will fix this in a couple of minutes. We'll do the HTTP error function, pass in the response writer like so, we can say failed to read the workout, or fail to retrieve the workout.

[00:01:23]
And here we can do HTTP status not found.
>> Melkey: So we can actually just say method to read the workout because they fail to fetch the work. Okay, I think it's a bit more explicit to what's happening. Okay, let's not forget the return at the end there, okay?

[00:01:48]
And at this point, we are assuming we're able to retrieve the workout correctly. So then what we can do is W header dot set content type.
>> Melkey: Application/json, you can do w.WriteHeader over here. I'm gonna give it the status of HTTP.StatusOK, like so. And right below we can do json.newencoder, pass in the response writer, and we're gonna encode the workout like so.

[00:02:25]
So let's go ahead and just create the update method now as well, so you can just at the bottom, get some room for us here, like so, create func wh for our pointer to our workout handler. I'm gonna call handle update workout by ID like so, this is gonna take our w HTTP response writer and the body of HTTP request or the pointer, excuse me.

[00:02:56]
All right, and here we have to parse that ID as well. Since we already have that logic written and this will be its own function, we can do is simply just go up here and let's go ahead and link this much code. Instead of rewriting it from scratch, go ahead and copy and paste this from the get workout by ID function, and just paste it in the first body, in the first line for the handle workout by ID, okay?

[00:03:20]
I'm gonna use this workout ID to first fetch and get the workout, so here we can do existing workout error. Is going to be our workout handler, the workout store, get workout by ID, and he passed in the workout ID that we just extracted from our query using chi.

[00:03:39]
Check the error, so if our error does not equal to nil. Down here, we can do HTTP error.
>> Melkey: W failed to fetch workout HTTP status, you do internal server error like so, and then we can return. And here we wanna check if existing workout is nil, because we can do a get request and see if it's empty or not.

[00:04:07]
So here, if existing workout is in fact nil after the error check, you just do HTTP not found for right now, WR, and then return. Okay, so at this point, we can assume we are able to find existing workout. Okay, now what we're gonna do right now is create a new struct which is gonna act as the request from our client struck.

[00:04:41]
So you remember, when we create a new workout, we are basically decoding that JSON into the struct. We need to do the same for update requests, okay? But the thing is, we don't wanna blindly trust our client. I'm sure there's gonna be some clients like client side validation, and that's important.

[00:04:59]
But we can also do some server side validation as well. Is it overkill, I don't think so. I think it's probably good to trust but validate at the same time. And so with that kind of thinking, we're gonna create this struck not anonymous. It's gonna live within the scope of this function, and you can make it live outside the scope.

[00:05:18]
You can globally declare it in the package, that's fine. But here this is gonna act as that preliminary location for us to decode that JSON. We can then validate that, are the fields correct, is it adhering to the password length that we want, etc. And then we can replace the values in our actual existing workout with those values from our client, and then call the update workout method.

[00:05:43]
So I'll show you how that looks, you can create a new variable called update workout request. This is gonna be struck, and this struck is basically gonna have the same fields our workout does, with a slight difference. We can do title, and this time, instead of being a string, this is gonna be a pointer to a string like so.

[00:06:03]
Same JSON tags, title, all right, and we'll follow up with the rest of them. Description is going to be also a pointer to a string. We can put description like so. Okay, we can have duration minutes.
>> Melkey: This is gonna be a pointer to an int JSON, duration underscore, minutes.

[00:06:31]
We're gonna have calories burned, whoops,
>> Melkey: Like so, this would be pointer to int.
>> Melkey: Okay, and the last one are entries, right? Because we know entries is a slice, the native default type for a slice is already nil. So we can do store.WorkoutEntry, okay? We can do our JSON tag as just entries like so, with that now declared, we can use the same JSON logic we had earlier of the new decoder.

[00:07:11]
Let's grab it from our r.body, and what we're gonna decode is in the update workout request like so. Let's check that error, so if our error does not equal to nil, we can just do HTTP error, pass in the response writer, and then we can just simply write the actual error message that we are extracting from the decoder like so.

[00:07:35]
I'm gonna HTTP something like status bad request.
>> Melkey: And make sure we return. So now that we have this update worker request, and let's say we successfully decoded it, the question is, why are these pointers? And the reason for that is this allows us to now check if those values are truly nil or if they intend to be empty.

[00:07:59]
Let's say someone goes back and updates the workout and they said, you know what? I don't want a description on this field, and they leave it empty, like an empty string, which we found out is the default or zero value of strings for go. Do we wanna treat that as if it's a non-existing value and not update that worker entry, or do we think that our user is actually trying to update this form a description to be empty?

[00:08:20]
So to do that successfully, we can check with a nil pointer, we can check if that value is actually nil or not from our client. Because if they don't send anything from our client, there's nothing gonna be there, and a nil is not the same thing as an empty string.

[00:08:35]
So this update work request variable that we have, we could do something a little bit repetitive, but I think it's worth it. We can check if update workout request.title, and we can do this for every field does not equal to nil, right? What we can then do is existing workout.title, reminder, existing workout is the worker we treat just a few lines above.

[00:08:59]
We can set this equal to the deep reference value of update worker request.title like so, cool. So just a little bit more server side validation on what we're getting and expecting from our client calls.
>> Melkey: Okay, and we can do this for all those fields, so you can go ahead and copy and paste this for description, duration, minutes, calories burned and entries.

[00:09:25]
You can do update worker request set of dot title we can do description. If you are copying, make sure you are careful with fixing the field names.
>> Student: Is there a way that you could have looked on that?
>> Melkey: Sorry.
>> Student: Maybe create a loop and just replace some key values instead of having all of that.

[00:09:52]

>> Melkey: You can, yeah, you for sure can. I just wrote it like this again, to be as explicit as possible. I think I took more of an explicit approach into this course, I think throughout the course, there's a ton of these optimization things that people can probably use.

[00:10:09]
We're gonna just keep it as this very unsettling if else over and over again, but you can just definitely do just range over all those values to check up their nail and replace them.
>> Melkey: So I got DurationMinutes, next, I'm gonna do calories burned,
>> Melkey: All right.
>> Melkey: And the last one is entries.

[00:11:15]

>> Melkey: Yeah?
>> Student: Could you explain why we don't need the pointer on the entries again?
>> Melkey: Yeah, absolutely, so string and ints. The zero value for those is either an empty string or a zero, right, with a slice, the zero or default value is nil. So the reason we're even using pointers on relative line 29 up for title description duration is because the zero value for a pointer is nil.

[00:11:43]
And so that gives us that ability to check does this actually exist or does it not exist? Which goes back to the example like maybe someone actually wants to send zero, right? If they do, okay, cool, we can process that, but if we don't have a way to fully check the integrity of the request that we may accidentally take a zero value by go and replace it to be something that it really shouldn't be.

[00:12:06]
So this nil check gives us more of that, not authenticity, but more of that confidence to make sure that we are processing the right request from our caller. Here we can just do it error, we can do workout handler is workout store. We can click update workout, you can pass in that new, fairly new, but we can say improved existing workout.

[00:12:31]
You can check if our error does not equal to nil. We can just print the error for ourselves but we can just do format print align and say update workout error to be more explicit in case some people do get errors here who are trying this out. We can do error we do W, we can also say failed to update the workout, we can put HTTP internal server error.

[00:13:01]
We can return, and the last little bit is running back to our client. So w header, we can set content dash type application slash JSON like so. We can do write our header, so w.write.
>> Melkey: There you go, right? Header we can do HTP status okay. And then we can just say JSON.new encoder, passed in our response writer, and then we can encode the existing workout like so.

[00:13:44]
So we just wrapped up writing our update handler, and for that, we just created the functions in our data store for creating, reading and updating the workouts. So now we're gonna test these out. There's just one thing we have to do, which is to route one of the new functions that update handler into our routes.

[00:14:05]
So we'll go here, so right underneath the workouts, we can do an r.Put, okay. And here we'll put passed in slash workouts, and then the slug, which is just the curly brackets, ID. And here it will be the function names, will be app.workout handler, and then handle, update workout by ID.

[00:14:29]
Again, we're not calling these functions cuz functions are passed as first class citizens in Go. So we could just pass them like so. So with all that, we can finally validate if those functions we created all work accordingly. So go to your running Go server, you can go ahead and nuke it and run it back up.

[00:14:46]
Awesome, if you have any errors, they'll show up right now. Any compiler errors or, not compilers, but any errors from a connected database, things like that, those will show up right now. All right, so I'm just gonna make sure I have my I'm talking to pose running. I have psql still running, so that's allows me to check what's going on my database.

[00:15:02]
And I have this last terminal which I can use to curl. And again, you can use whatever you want, but if you are following along, you can go into that post underscore notes section here, and the next sub section should be 1.6. Now this 1.6 request body, it's going to make the put function call to our address, HTTP local host 8082, workouts to the one workout we have in our database right now.

[00:15:30]
And here we're gonna be updating it, so you can see we have tile, description, duration, calories, burn entries. And one thing to note, we're actually adding a third entry here, the plank, right? So we had previous squats, and I think it was push ups, now we're modifying this to dead lifts, pull ups and adding a third and called plank.

[00:15:47]
And if you wanna validate this, we can go again into select all from workout underscore entries in psql and see that the two entries we have for our workout are just squats and bench. So ideally, once we call this function, we should see a bunch of this stuff be updated.

[00:16:06]
If not, we're in trouble with the debug. So go ahead and copy all this down and in your empty terminal, or again, whatever UI you wanna run. Paste it, you click Enter, you should now see this very very appealing looking JSON square blob thing.

