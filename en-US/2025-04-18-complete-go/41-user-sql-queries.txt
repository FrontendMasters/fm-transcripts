[00:00:00]
>> Melkey: So now that we have the interface, we have all the structs, we can start writing the functions for the things we have here. So first, let's go ahead and do the CreateUser, it's gonna do func you could do, I don't know, PostgresUserStore. It's gonna be called CreateUser, right?

[00:00:21]
So it has to, again, match the method of the interface there, the signature, so user be a pointer to user, and it's gonna turn an error like so. And then here we're gonna create our query, so exact same foundational things that we did earlier, nothing new is really changing.

[00:00:41]
So here we're gonna INSERT INTO users. We're gonna do all the fields that we care about, so username, email, password_hash and then bio values. We're gonna insert four VALUES. So one, two, three, and four, username, email, password, hash and bio, okay? And here we can just do something like RETURNING id, and if you want for users, for anniversaries of when they create the account, or if you want to store that sometimes you see like this account was created.

[00:01:20]
So like on Twitter, you can also return the created ad, and if you want, also the updated app, okay? And then here we can just do errors with s.db.QueryRow, I'm gonna pass in that query like so, and then all the fields as they appear. So, user.Username, user.Email, user.Password, Hash.hash, okay?

[00:01:51]
And user.Bios, [INAUDIBLE] because we need to use the scan method now and scan the returning fields into the appropriate fields here. So it's Id created at and updated at. Again, these have to be addresses, so we can do user.ID, user.CreatedAt, and then user.UpdatedAt, like so. Per standard, let's go ahead and check this error.

[00:02:24]
So if our error does not equal to nil, we can do a few things. Return error actually,
>> Melkey: Okay, otherwise, let's just return nil. And that's it, and that's the function for creating a user with our definition of what a user is. Let's move on to the next function, which is get user by user name.

[00:02:51]
Okay, so we just do us PostgresUserStore, GetUserByUsername. It's gonna take the username string and it's gonna return user and error like so. Okay, we're gonna first define our user. So here we can make it define a new user like so. Okay, and we have to instantiate the password, also PasswordHash, and we can just do, it's gonna be password like so.

[00:03:30]

>> Melkey: Okay, let's go ahead and run the query. So we can do SELECT, id, username, email, password_hash, bio, created_at and the last field is updated_at
>> Melkey: From our users table, where the username equals the value, the one and only value we're gonna pass in. And here We can declare our error as s.db.

[00:04:03]
We can do QueryRow, pass in that query like so, and all the fields that we wanna see,
>> Melkey: Which is just username. Okay, but then we can scan and I'll open this up just a bit easier to read. And because we declared our user a few lines above, it's gonna be pretty easy that we can just do user and start pulling in those fields with new user, dot, username, or sorry, the first field is ID, okay?

[00:04:40]
User.Username,
>> Melkey: User.Email, okay? Then we can do user dot oops, user.PasswordHash.hash like so. Okay, user.Bio, and then user.reatedAt that user.UpdatedAt.
>> Melkey: And as we know with the SELECT clause, it's not guaranteed to return anything, but nor is that an error. So we can handle this with if err equal sql Error, no errors or NoRows.

[00:05:24]
Excuse me, we can simply do return nil and nil if our error does not equal to nil. So if something wrong happened, you could turn nil and the error, okay? Otherwise, we can go ahead and return the user and nil like so let's rip that bandit off and create the update user function as well, and then we will not have to be in this file anymore for a little bit.

[00:05:52]
We do func, and feel free if you already kinda know where we're going with this, write it out as I'm writing it to maybe have if you have to look up to see if you kind of stumble, it's a good way. But I encourage everyone just to try it out as well.

[00:06:05]
So this update user, I'm gonna say user, pointer to our user like so. And since this is update user, all we care about is if there's an error or not. We don't necessarily need to return the full user up to you if you want to implement that, okay?

[00:06:21]
We're gonna define the query here, and here I'm gonna update the users table. We're gonna set username as the first value. We potentially could be getting email as the second, bio as the third, and then updated at we can set this to CURRENT_TIMESTAMP, which is a native function in Postgres.

[00:06:45]
WHERE id lower case equals the fourth value, okay? RETURNING updated at then we can do result and err as db, we gonna execute this, pass in that query and then the four variables it expects. So user.Username, user.Email, user.Bio, okay? And then user.ID, let's check that err, if err does not equal to nil, let's just return that error back to our caller
>> Melkey: With an update, we're gonna see how many rows were affected.

[00:07:31]
So we can do rowsAffected, error is gonna be result.RowsAffected like so, whoops,
>> Melkey: Okay, we can check this err, if err does not equal to nil, let's go ahead and also return the err. And if rowsAffected is 0, we can just return sql.Error NoRows. Otherwise we can return now.

