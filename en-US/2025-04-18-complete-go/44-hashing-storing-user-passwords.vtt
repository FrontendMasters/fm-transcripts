WEBVTT

1
00:00:00.000 --> 00:00:07.177
&gt;&gt; Melkey: But now comes the how do
we deal with their passwords, okay?

2
00:00:07.177 --> 00:00:12.626
And there's a very elegant way for
us to deal with the password here, okay?

3
00:00:12.626 --> 00:00:15.239
First thing is we have
to hash their password,

4
00:00:15.239 --> 00:00:17.792
everyone who see their
password store them.

5
00:00:17.792 --> 00:00:20.933
A good rule of thumb is
the less data you store,

6
00:00:20.933 --> 00:00:23.525
the better it is to maintain your app.

7
00:00:23.525 --> 00:00:25.748
The more PII, the more other stuff,

8
00:00:25.748 --> 00:00:30.125
then you have to kind of jump through
all these hoops, regulations, and

9
00:00:30.125 --> 00:00:34.243
it just makes your job harder and
tougher and more prone to attacks.

10
00:00:34.243 --> 00:00:38.772
But in our case,
because we do wanna store user passwords,

11
00:00:38.772 --> 00:00:41.499
we're going to have to hash these.

12
00:00:41.499 --> 00:00:43.261
And so, how can we do this?

13
00:00:43.261 --> 00:00:49.559
Well, if we go back to our
user_store.go file for just a second,

14
00:00:49.559 --> 00:00:54.513
you'll notice that our
password is its own struct.

15
00:00:54.513 --> 00:00:58.457
And we know because
a password is its own type or

16
00:00:58.457 --> 00:01:02.008
own struct, it can have its own methods.

17
00:01:02.008 --> 00:01:04.310
And this is a very powerful thing for

18
00:01:04.310 --> 00:01:08.318
us as we continue to create
methods that a hash the passwords.

19
00:01:08.318 --> 00:01:13.632
And then when a user logs in, we can
use that to see if the password they're

20
00:01:13.632 --> 00:01:18.970
passing is the plain text representation
of what we have in our database.

21
00:01:18.970 --> 00:01:24.230
So here we can do p,
it's gonna type password like so.

22
00:01:24.230 --> 00:01:29.206
Oops, and the first method we're
gonna create is called set.

23
00:01:29.206 --> 00:01:34.219
I'm gonna take a plaintextPassword
as a string and

24
00:01:34.219 --> 00:01:38.540
it's going to return an error, all right?

25
00:01:38.540 --> 00:01:43.030
And if you still kept bcrypt in you
import now's a good time to remove that,

26
00:01:43.030 --> 00:01:46.541
ignore import,
because here we're gonna do hash, err.

27
00:01:46.541 --> 00:01:51.263
I'm gonna write bcrypt,
if I'm not mistaken,

28
00:01:51.263 --> 00:01:58.763
I think bcrypt only has a few methods
we can do GenerateFromPassword, okay?

29
00:01:58.763 --> 00:02:05.290
And we're actually gonna transform that
plaintextPassword into a slice of byte.

30
00:02:05.290 --> 00:02:09.122
So we can do slice byte, and we can
pass in the plaintextPassword like so.

31
00:02:09.122 --> 00:02:13.560
And here would be the hashing algorithm,
the salt.

32
00:02:13.560 --> 00:02:20.561
So I'm not gonna try to pretend
I'm a security individual.

33
00:02:20.561 --> 00:02:23.611
The thing I know is
the higher this value is,

34
00:02:23.611 --> 00:02:28.647
the more secure the hashing algorithm
will be for hashing the password.

35
00:02:28.647 --> 00:02:32.587
However, the longer the compute time
it takes to do and process that.

36
00:02:32.587 --> 00:02:36.564
The lower it is,
the less secure that hash will be, but

37
00:02:36.564 --> 00:02:42.543
the faster it is at computing that hash
representation from plaintextPassword.

38
00:02:42.543 --> 00:02:46.601
I think standard documentation
shows 12 as a good middle ground.

39
00:02:46.601 --> 00:02:50.646
But again, this is depending on the need,
depending on how it is,

40
00:02:50.646 --> 00:02:53.625
depending on what computer
you have available.

41
00:02:53.625 --> 00:02:57.701
You can dial and
tune this value accordingly.

42
00:02:57.701 --> 00:03:03.908
So here, if err != nil,
we can just return that error like so.

43
00:03:03.908 --> 00:03:10.963
Otherwise, we can do be p.plainText
is going to be plaintextPassword.

44
00:03:10.963 --> 00:03:17.534
And p.hash is going to be the hash
like this, and then we can return nil.

45
00:03:17.534 --> 00:03:19.718
So we have one method to set the hash,

46
00:03:19.718 --> 00:03:23.955
we have to have another method that
compares the hash representation.

47
00:03:23.955 --> 00:03:27.730
So if a user is logging in,
that hash representation to a plain text,

48
00:03:27.730 --> 00:03:29.955
they could be submitting on the former.

49
00:03:29.955 --> 00:03:32.590
If you log in, you typically log
in with a username and password.

50
00:03:32.590 --> 00:03:36.707
So you wanna make sure that
that plain text representation

51
00:03:36.707 --> 00:03:41.256
of the password matches the hash
that we stored in our database.

52
00:03:41.256 --> 00:03:44.286
So to do this,
let's make another function, p.

53
00:03:48.273 --> 00:03:51.989
&gt;&gt; Melkey: Password, and we're gonna
call this function Matches like so.

54
00:03:51.989 --> 00:03:57.699
And it's gonna take a plaintextPassword
which is gonna be a string,

55
00:03:57.699 --> 00:04:02.335
and then we're gonna have a bool and
an error, like so.

56
00:04:02.335 --> 00:04:05.583
We're still gonna depend on bcrypt,
so we can create this error.

57
00:04:05.583 --> 00:04:10.012
And I'm gonna do
bcrypt.CompareHashAndPassword.

58
00:04:10.012 --> 00:04:13.909
So here we're gonna (p.hash),
okay, to again,

59
00:04:13.909 --> 00:04:18.078
the byte representation of
plaintextPassword like so.

60
00:04:18.078 --> 00:04:23.848
Oops, if err != nil.

61
00:04:23.848 --> 00:04:27.667
There're actually a few
errors that could happen,

62
00:04:27.667 --> 00:04:33.678
one is that CompareHashAndPassword does
throw an error if they mismatch, okay?

63
00:04:33.678 --> 00:04:38.727
So in this case we're gonna add a switch

64
00:04:38.727 --> 00:04:44.237
statement and here case errors.Is okay?

65
00:04:44.237 --> 00:04:49.253
So if the error from
calling bcrypt matches

66
00:04:49.253 --> 00:04:54.824
the error from bcrypt and
its Err, where is it,

67
00:04:54.824 --> 00:04:59.442
MismatchedHashAndPassword, okay?

68
00:04:59.442 --> 00:05:03.727
So if that's the case,
we're gonna return false and nil.

69
00:05:03.727 --> 00:05:10.803
Meaning false that the passwords do not
match, but there's no true error, okay?

70
00:05:10.803 --> 00:05:14.429
Bcrypt just throws an error
if it doesn't matches, okay?

71
00:05:14.429 --> 00:05:16.872
Otherwise, we're gonna
have our default case.

72
00:05:16.872 --> 00:05:24.278
So if error does not equal to nil and is
the error MismatchedHashAndPassword err,

73
00:05:24.278 --> 00:05:29.981
what we're gonna do is default,
return false and err, okay?

74
00:05:29.981 --> 00:05:32.459
So this is something like
an internal server error, right?

75
00:05:32.459 --> 00:05:36.649
Internal server error,
like something's going on.

76
00:05:36.649 --> 00:05:43.265
Otherwise, if anything is great,
we can return true and nill.

77
00:05:43.265 --> 00:05:46.667
Now, if we go back to our user_handler and

78
00:05:46.667 --> 00:05:52.149
we are underneath this part with how
do we deal with their passwords,

79
00:05:52.149 --> 00:05:57.275
we can now make use of those
password functions we just created.

80
00:05:57.275 --> 00:06:05.565
So here we can do err,
we can put user.PasswordHash.Set, okay?

81
00:06:05.565 --> 00:06:09.843
We can put in (req.Password), like so.

82
00:06:09.843 --> 00:06:12.040
Next, let's check the error.

83
00:06:12.040 --> 00:06:16.815
So if error != nil,
what we can do is h.logger and

84
00:06:16.815 --> 00:06:22.271
we can just do Printf not fatal,
we can do ("ERROR").

85
00:06:27.065 --> 00:06:31.542
&gt;&gt; Melkey: You can say hashing password,
again, this is going to be for us.

86
00:06:31.542 --> 00:06:35.581
So %V, err,
whereas we'll respond to our client.

87
00:06:35.581 --> 00:06:39.148
We can use utils.WriteJSON(w,

88
00:06:39.148 --> 00:06:45.053
) we can do
http.StatusInternalServerError, okay?

89
00:06:45.053 --> 00:06:49.365
And this part gets kinda dicey,
because, like I showed you earlier,

90
00:06:49.365 --> 00:06:52.154
well, if we're setting this not a problem.

91
00:06:52.154 --> 00:06:57.766
But for when we do matches, you don't
wanna tell a potential bad actor,

92
00:06:57.766 --> 00:07:01.262
like a fraud actually
try to hack an account,

93
00:07:01.262 --> 00:07:06.980
that combination of username exists and
the password's wrong, right?

94
00:07:06.980 --> 00:07:10.640
Then they know, okay, so there's
actually a user with that username or

95
00:07:10.640 --> 00:07:13.652
email in your database,
I just have to crack the password.

96
00:07:13.652 --> 00:07:19.439
So again, my expertise is definitely
not security or how to handle that.

97
00:07:19.439 --> 00:07:23.078
I'll refer to some experts to
give the best suggestions.

98
00:07:23.078 --> 00:07:25.641
But when you do respond to your client,

99
00:07:25.641 --> 00:07:29.615
you don't explicitly say,
hey, password is not correct.

100
00:07:29.615 --> 00:07:32.849
You just kinda give a broad statement,
say,

101
00:07:32.849 --> 00:07:38.251
we can't match the two combinations of
using our password, for example, right?

102
00:07:38.251 --> 00:07:44.052
But again, I'll refer to experts in
the field on what they suggest for

103
00:07:44.052 --> 00:07:45.437
handling that.

104
00:07:45.437 --> 00:07:49.152
But in this case, because we know
we are just setting the password,

105
00:07:49.152 --> 00:07:53.666
we know that we can do error, "internal
server error", and we can just return.

106
00:07:58.658 --> 00:08:01.390
&gt;&gt; Melkey: All right, now,
with all of that being done,

107
00:08:01.390 --> 00:08:05.959
we can finally call the function that
creates the user, so here we can do err.

108
00:08:05.959 --> 00:08:11.287
We can call h.userStore.CreateUser,

109
00:08:11.287 --> 00:08:15.858
and we can pass in that user like so.

110
00:08:15.858 --> 00:08:21.192
If err != nil go ahead and
just copy the logger and

111
00:08:21.192 --> 00:08:24.882
the Write.JSON with the return.

112
00:08:24.882 --> 00:08:28.081
So instead of hashing password,

113
00:08:28.081 --> 00:08:33.919
we can make registering user,
just notice the typo up here.

114
00:08:37.578 --> 00:08:41.902
&gt;&gt; Melkey: And you can keep it like that.

115
00:08:41.902 --> 00:08:44.751
And while you copy that down,
we're gonna do that.

116
00:08:44.751 --> 00:08:47.537
If there is no error, we're able
to successfully create the user.

117
00:08:47.537 --> 00:08:54.093
We can do w, http.StatusOK, and
we can also send back utils.Envelope,

118
00:08:54.093 --> 00:08:58.474
we can say "user", and
bring that user like so.

119
00:08:58.474 --> 00:09:01.054
And actually, it's not StatusOK,

120
00:09:01.054 --> 00:09:05.477
StatusCreated is the more
appropriate status response here.

121
00:09:05.477 --> 00:09:08.453
We did the database layer,
we did the API layer.

122
00:09:08.453 --> 00:09:11.188
We just have to do one last layer,
which is the easiest, and

123
00:09:11.188 --> 00:09:14.387
that's routing it across our application,
which we know how to do.

124
00:09:14.387 --> 00:09:19.556
We first should start
in the app.go like so.

125
00:09:19.556 --> 00:09:23.656
And now,
since we've introduced a new store,

126
00:09:23.656 --> 00:09:26.741
we can go all the way up here, okay?

127
00:09:26.741 --> 00:09:33.807
Let's first create the new UserHandler
*api.UserHandler, like so.

128
00:09:33.807 --> 00:09:38.567
And then right here,
we can do userStore :=

129
00:09:38.567 --> 00:09:44.091
store.NewPostgressUserStore, pass (pgDB).

130
00:09:44.091 --> 00:09:52.463
And in here,
userHandler := api.NewUserHandler.

131
00:09:52.463 --> 00:09:56.389
We'll pass in the userStore and
the logger, like so, and

132
00:09:56.389 --> 00:10:00.817
then underneath UserHandler,
we'll pass in the userHandler.

133
00:10:00.817 --> 00:10:03.198
Last thing we got to do is,
go into our routes.

134
00:10:03.198 --> 00:10:08.423
And let's do r.Post,
this is gonna be "/users", and

135
00:10:08.423 --> 00:10:13.875
here app.UserHandle.HandleRegisterUser,
all right?

136
00:10:13.875 --> 00:10:17.377
So now we have fully connected everything.

137
00:10:17.377 --> 00:10:19.910
Again, we do this one much faster.

138
00:10:19.910 --> 00:10:23.212
We've connected our user
database to our user API,

139
00:10:23.212 --> 00:10:25.620
across our app, through our routes.

140
00:10:25.620 --> 00:10:27.109
Only thing left is to test it.

141
00:10:27.109 --> 00:10:31.470
So we have this HandledRegisterUser,
go to your running go server,

142
00:10:31.470 --> 00:10:36.295
you can nuke that, run go run main.go,
see if you have any obvious errors.

143
00:10:36.295 --> 00:10:38.015
I do not, that's good.

144
00:10:38.015 --> 00:10:42.172
Make sure you Docker is still running,
okay?

145
00:10:45.627 --> 00:10:46.886
&gt;&gt; Melkey: Check, select all.

146
00:10:49.778 --> 00:10:54.033
&gt;&gt; Melkey: Okay, if you've got that issue,
I'm just double checking that just to

147
00:10:54.033 --> 00:10:58.218
confirm I don't have any users in
my database, select all from users,

148
00:10:58.218 --> 00:10:59.785
psql shows me it is empty.

149
00:10:59.785 --> 00:11:05.132
And if I just go back
to the post_notes.txt.

150
00:11:05.132 --> 00:11:08.829
If I go down to section 3.1 right here,

151
00:11:08.829 --> 00:11:14.219
I've provided an example payload
request for you to copy and

152
00:11:14.219 --> 00:11:21.421
paste into your terminal or into your
URL application, or app API application.

153
00:11:21.421 --> 00:11:26.429
So paste this, you can see here it's
curl -X POST, which is the method.

154
00:11:26.429 --> 00:11:30.793
Localhost:8080/users, the application
type, and then the payload,

155
00:11:30.793 --> 00:11:33.866
which includes a username,
email, password and bio.

156
00:11:33.866 --> 00:11:38.176
So click enter, you can now see we've
gotten a response, "user", "id": 1,

157
00:11:38.176 --> 00:11:42.398
"username", "email", "bio",
"created_at" and "updated_at".

158
00:11:42.398 --> 00:11:48.657
And now if I go to psql and run the exact
same command to check if we have a user.

159
00:11:48.657 --> 00:11:51.940
You now should see we do, in fact,
have our username, John Doe,

160
00:11:51.940 --> 00:11:53.568
with all of their credentials.

161
00:11:53.568 --> 00:11:56.316
And you can notice the password is,
in fact, hashed.

