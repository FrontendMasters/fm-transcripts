WEBVTT

1
00:00:00.141 --> 00:00:07.376
&gt;&gt; Melkey: But now comes the,
how do we deal with their passwords, okay?

2
00:00:07.376 --> 00:00:13.104
And there's a very elegant way for
us to deal with the password here, okay?

3
00:00:13.104 --> 00:00:14.994
First thing is,
we have to hash their password.

4
00:00:14.994 --> 00:00:17.996
We do not ever wanna see
their password store them.

5
00:00:17.996 --> 00:00:21.202
A good rule of thumb is,
the less data you store,

6
00:00:21.202 --> 00:00:26.146
the better it is to maintain your app,
the more PII, the more other stuff.

7
00:00:26.146 --> 00:00:30.637
Then you have to kind of jump through
all these like hoops regulations, and

8
00:00:30.637 --> 00:00:34.715
it just makes your job harder and
tougher and more prone to attacks.

9
00:00:34.715 --> 00:00:39.023
But our case,
because we do wanna store user passwords,

10
00:00:39.023 --> 00:00:41.727
we're gonna do have to hash these.

11
00:00:41.727 --> 00:00:43.451
And so how can we do this?

12
00:00:43.451 --> 00:00:49.837
Well, if we go back to our
user_store.go file for just a second,

13
00:00:49.837 --> 00:00:54.866
you'll notice that our
password is its own struct.

14
00:00:54.866 --> 00:00:59.129
And we know because a password
is its own type or own struct,

15
00:00:59.129 --> 00:01:03.819
you can have its own methods, and
this is a very powerful thing for

16
00:01:03.819 --> 00:01:08.443
us, as we continue to create
methods that a hash the passwords.

17
00:01:08.443 --> 00:01:10.416
And then when a user logs in,

18
00:01:10.416 --> 00:01:15.024
we can use that to see if the password
they're passing is the hash is

19
00:01:15.024 --> 00:01:19.411
the plain text representation
of what we have in our database.

20
00:01:19.411 --> 00:01:25.913
So here we can do p,
it's gonna type password like so, oops.

21
00:01:25.913 --> 00:01:29.970
And the first method we're
gonna create is called set.

22
00:01:29.970 --> 00:01:36.615
I'm gonna take a plain text password as a
string, and it's going to return an error,

23
00:01:36.615 --> 00:01:40.952
all right, and
if you still kept bcrypt in your import,

24
00:01:40.952 --> 00:01:44.762
now's a good time to
remove that ignore import.

25
00:01:44.762 --> 00:01:46.624
Because here we're gonna do hash error.

26
00:01:46.624 --> 00:01:48.839
I'm gonna write bcrypt.

27
00:01:48.839 --> 00:01:53.047
You can see it basically only has,
if I'm not mistaken,

28
00:01:53.047 --> 00:01:59.019
bcrypt only has like a few methods, but
we can do generate from password, okay?

29
00:01:59.019 --> 00:02:03.103
And reaction transform that plain
text password into a slice of bytes.

30
00:02:03.103 --> 00:02:09.998
So can do slice byte and we can pass
in the plain text password like so.

31
00:02:09.998 --> 00:02:14.480
And here would be the hashing algorithm,
the salt.

32
00:02:14.480 --> 00:02:19.084
So I'm not gonna try to pretend
like I'm a security individual.

33
00:02:19.084 --> 00:02:22.907
The thing I know is,
the higher this value is,

34
00:02:22.907 --> 00:02:28.903
the more secure the hashing algorithm
will be for hashing the password.

35
00:02:28.903 --> 00:02:33.118
However, the longer the compute time
it takes to do and process that,

36
00:02:33.118 --> 00:02:38.121
the lower it is, the less secure that hash
will be, but the faster it is at computing

37
00:02:38.121 --> 00:02:42.859
that password represents that hash
resentation from plain text, password.

38
00:02:42.859 --> 00:02:46.669
I think standard documentation
shows 12 as a good middle ground.

39
00:02:46.669 --> 00:02:52.008
But again, this is depending on the need,
depending on how it is, depending

40
00:02:52.008 --> 00:02:57.783
on what compute you have available, you
can dial and tune this value accordingly.

41
00:02:57.783 --> 00:03:00.889
So here,
if err does not equal to nil, we can,

42
00:03:00.889 --> 00:03:03.532
you can just return that error like so.

43
00:03:03.532 --> 00:03:11.125
Otherwise, when you p.plain text is
going to be plain text password and

44
00:03:11.125 --> 00:03:17.734
p.hash is gonna be the hash like this and
then we can return no.

45
00:03:17.734 --> 00:03:20.362
So we have one method to
set the hash we have to

46
00:03:20.362 --> 00:03:24.069
have another method that
compares the hash representation.

47
00:03:24.069 --> 00:03:27.273
So if a user is logging in,
that hash representation to a plain text

48
00:03:27.273 --> 00:03:30.134
that they could be submitting
on the format, if you log in,

49
00:03:30.134 --> 00:03:32.845
you typically log in with
like a username and password.

50
00:03:32.845 --> 00:03:37.325
So we wanna make sure that a plain
text representation of the password

51
00:03:37.325 --> 00:03:41.510
matches the hash for the the hash
that we stored in our database.

52
00:03:41.510 --> 00:03:44.478
So to do this,
let's make another function, p.

53
00:03:48.486 --> 00:03:52.403
&gt;&gt; Melkey: Password.
We're gonna call this function matches

54
00:03:52.403 --> 00:03:57.251
like so and it's gonna take
a plain text password which is

55
00:03:57.251 --> 00:04:02.514
gonna be a string and
then I'm have a bool and an error like so.

56
00:04:02.514 --> 00:04:05.842
We're still going to depend on bcrypt,
so we can create this error.

57
00:04:05.842 --> 00:04:10.201
I'm gonna do bcrypt,
compare, hash and password.

58
00:04:10.201 --> 00:04:14.634
So here we're going to p.hash,
okay, to again,

59
00:04:14.634 --> 00:04:20.215
the byte representation of plain
text password like so, oops.

60
00:04:20.215 --> 00:04:25.803
If err does not equal to nil, there's
actually a few errors that could happen.

61
00:04:25.803 --> 00:04:28.465
One is that compare hash and

62
00:04:28.465 --> 00:04:33.806
password does throw an error
if they mismatch, okay?

63
00:04:33.806 --> 00:04:36.522
So in this case,
we're gonna add a switch statement.

64
00:04:38.814 --> 00:04:40.740
&gt;&gt; Melkey: And here case errors.

65
00:04:42.827 --> 00:04:44.350
&gt;&gt; Melkey: dot is, okay?

66
00:04:44.350 --> 00:04:49.371
So if the error from
here from calling bcrypt

67
00:04:49.371 --> 00:04:56.031
matches the error from bcrypt and
its error, where is it?

68
00:04:56.031 --> 00:04:59.502
Mismatched hash and password, okay?

69
00:04:59.502 --> 00:05:05.111
So if that's the case,
we're gonna return false and nil.

70
00:05:05.111 --> 00:05:10.964
Meaning false that the passwords do not
match, but there's no true error, okay?

71
00:05:10.964 --> 00:05:14.825
They just bcrypt just throws an error
if it doesn't matches, okay?

72
00:05:14.825 --> 00:05:16.984
Otherwise, we're gonna
have our default case.

73
00:05:16.984 --> 00:05:20.899
So if there is still,
if error does not equal to nil and

74
00:05:20.899 --> 00:05:25.515
it's not error is
the ErrMismatchedHashAndPassword error,

75
00:05:25.515 --> 00:05:30.150
what we're gonna do is default
return false and error, okay?

76
00:05:30.150 --> 00:05:33.442
So this is something like
an internal server error, right,

77
00:05:33.442 --> 00:05:34.803
internal server error.

78
00:05:34.803 --> 00:05:36.432
Like something's going on.

79
00:05:38.607 --> 00:05:43.444
&gt;&gt; Melkey: Otherwise, if everything
is great, we can return true and no.

80
00:05:43.444 --> 00:05:46.697
Now if we go back to our user handler, and

81
00:05:46.697 --> 00:05:52.060
we are underneath this part with
how to deal with their passwords,

82
00:05:52.060 --> 00:05:57.254
we can now make use of those
password functions we just created.

83
00:05:57.254 --> 00:05:58.931
So here we can do error.

84
00:05:58.931 --> 00:06:05.665
You can hit user.PasswordHash.Set, okay?

85
00:06:05.665 --> 00:06:11.425
We can put in request.Password like so.

86
00:06:11.425 --> 00:06:12.125
Next, let's check the error.

87
00:06:12.125 --> 00:06:17.857
So if error does not equal to nil,
what we can do is h.Logger,

88
00:06:17.857 --> 00:06:21.179
and we can just do PrintF not fatal.

89
00:06:21.179 --> 00:06:22.415
We can do error.

90
00:06:27.224 --> 00:06:31.804
&gt;&gt; Melkey: You can say hashing password,
again, this is going to be for us so

91
00:06:31.804 --> 00:06:35.738
modulo V error,
whereas we'll respond to our client.

92
00:06:35.738 --> 00:06:39.287
We can use utils.WriteJSON w,

93
00:06:39.287 --> 00:06:45.339
we can do http.StatusInternalServerError,
okay?

94
00:06:45.339 --> 00:06:50.379
And this part gets kind of dicey,
because, like I showed you earlier,

95
00:06:50.379 --> 00:06:55.503
well, if we're setting this not a problem,
but for when we do matches,

96
00:06:55.503 --> 00:06:59.717
you don't wanna tell a potential
bad actor, like a fraud.

97
00:06:59.717 --> 00:07:04.965
Actually try to hack an account that
that combination of username exists and

98
00:07:04.965 --> 00:07:07.103
the passwords wrong, right?

99
00:07:07.103 --> 00:07:10.793
Then they know, okay, so there's
actually a user with that username or

100
00:07:10.793 --> 00:07:13.828
email in your database,
I just have to crack the password.

101
00:07:13.828 --> 00:07:19.050
So again, my expertise is definitely
not security or how to handle that.

102
00:07:19.050 --> 00:07:23.141
I'll refer to some experts to
give the best suggestions.

103
00:07:23.141 --> 00:07:27.774
But when you do respond to your client,
you don't explicitly say,

104
00:07:27.774 --> 00:07:29.817
hey, pastor is not correct.

105
00:07:29.817 --> 00:07:33.042
You just kind of give a broad statement,
say,

106
00:07:33.042 --> 00:07:38.303
we can't match the two combinations of
using our password, for example, right?

107
00:07:38.303 --> 00:07:44.157
But again, I'll refer to experts in
the field on what they suggest for

108
00:07:44.157 --> 00:07:45.556
handling that.

109
00:07:45.556 --> 00:07:49.518
But in this case, because we know
we are just setting the password,

110
00:07:49.518 --> 00:07:54.054
we know that we can do error, internal
server error, and we can just return.

111
00:07:58.818 --> 00:08:01.371
&gt;&gt; Melkey: All right, now,
with all that being done,

112
00:08:01.371 --> 00:08:04.482
can finally call the function
that creates the user.

113
00:08:04.482 --> 00:08:10.351
So here we can do error,
we can call h.userStore,

114
00:08:10.351 --> 00:08:16.092
create user, and
we can pass in that user like so.

115
00:08:16.092 --> 00:08:19.984
If error does not equal to nil,
go ahead and

116
00:08:19.984 --> 00:08:25.083
just copy the logger and
the right JSON with the return.

117
00:08:25.083 --> 00:08:28.611
So instead of hashing password,

118
00:08:28.611 --> 00:08:34.156
we can make registering user,
notice type up here.

119
00:08:37.786 --> 00:08:39.991
&gt;&gt; Melkey: And you can keep it like that.

120
00:08:42.067 --> 00:08:44.848
&gt;&gt; Melkey: And while you copy that down,
we're gonna do that.

121
00:08:44.848 --> 00:08:47.565
If there is no error, we're able
to successfully create the user.

122
00:08:47.565 --> 00:08:52.379
We can do whttpStatusOK.

123
00:08:52.379 --> 00:08:54.822
And we can also send back utils.Envelope.

124
00:08:54.822 --> 00:08:58.541
We can say user and
bring that user like so.

125
00:08:58.541 --> 00:09:01.395
And actually, it's not StatusOK,

126
00:09:01.395 --> 00:09:06.280
StatusCreated is the more
appropriate status response here.

127
00:09:06.280 --> 00:09:07.545
We did the database layer.

128
00:09:07.545 --> 00:09:08.829
We did the API layer.

129
00:09:08.829 --> 00:09:11.463
We just have to do one last layer,
which is the easiest, and

130
00:09:11.463 --> 00:09:14.535
that's routing it across our application,
which we know how to do.

131
00:09:14.535 --> 00:09:19.781
We first should start in the app.go,
like so.

132
00:09:19.781 --> 00:09:23.874
And now,
since we've introduced a new store,

133
00:09:23.874 --> 00:09:26.951
we can go all the way up here, okay?

134
00:09:26.951 --> 00:09:35.233
Let's first create the new
UserHandler api.UserHandler like so,

135
00:09:35.233 --> 00:09:40.086
and then right here we can do UserStore,

136
00:09:40.086 --> 00:09:45.514
store.NewPostgresUserStore past pgDB and

137
00:09:45.514 --> 00:09:51.084
in here UserHandler api.NewUseHandler will

138
00:09:51.084 --> 00:09:56.532
pass in the userStore and
the logger like so.

139
00:09:56.532 --> 00:10:00.899
And it underneath the UserHandler
will pass in the userHandler.

140
00:10:00.899 --> 00:10:06.062
Last thing we got to do is go into
our routes, and let's do r.Post.

141
00:10:06.062 --> 00:10:08.007
This gonna be /users.

142
00:10:08.007 --> 00:10:12.873
And here
app.UserHandler.Handle.RegisterUser,

143
00:10:12.873 --> 00:10:13.910
all right?

144
00:10:13.910 --> 00:10:18.733
So now we have fully
connected everything again.

145
00:10:18.733 --> 00:10:20.088
We do this one much faster.

146
00:10:20.088 --> 00:10:24.188
We've connected our user database
to our user API, across our app,

147
00:10:24.188 --> 00:10:25.470
through our routes.

148
00:10:25.470 --> 00:10:27.391
Only thing left is to test it, so

149
00:10:27.391 --> 00:10:31.171
we have this HandleRegisterUser
go to your running go server.

150
00:10:31.171 --> 00:10:31.872
You can nuke that.

151
00:10:31.872 --> 00:10:36.295
Run, Go, run main.go,
see if you have any obvious errors.

152
00:10:36.295 --> 00:10:38.241
I do not, that's good.

153
00:10:38.241 --> 00:10:42.700
Make sure your docker is still running,
okay?

154
00:10:45.774 --> 00:10:47.180
&gt;&gt; Melkey: Check, Select All.

155
00:10:49.902 --> 00:10:52.516
&gt;&gt; Melkey: Okay, if you have that issue,
you can just, I'm just double checking

156
00:10:52.516 --> 00:10:54.757
that it's to confirm I don't
have any users in my database.

157
00:10:54.757 --> 00:10:56.378
Select all from users.

158
00:10:56.378 --> 00:11:00.078
PSQL shows me it is empty.

159
00:11:00.078 --> 00:11:06.066
And if I just go back to
the post underscore notes.txt.

160
00:11:06.066 --> 00:11:09.654
If I go down to section 3.1 right here,

161
00:11:09.654 --> 00:11:14.883
I've provided an example payload
request for you to copy and

162
00:11:14.883 --> 00:11:19.719
paste into your terminal or
into your URL application.

163
00:11:19.719 --> 00:11:21.909
Or app API, application.

164
00:11:21.909 --> 00:11:22.890
So I paste this.

165
00:11:22.890 --> 00:11:26.307
You can see here it's curl-x POST,
which is the method,

166
00:11:26.307 --> 00:11:30.986
localhost:8080/users, the application
type, and then the payload,

167
00:11:30.986 --> 00:11:34.294
which includes a username,
email, password and bio.

168
00:11:34.294 --> 00:11:38.481
So click Enter,
you can now see we've gotten a response.

169
00:11:38.481 --> 00:11:43.965
User id:1, Username, email,
bio, created at and updated at.

170
00:11:43.965 --> 00:11:48.253
And now if I go to psql and run the exact
same command to check if we have a user,

171
00:11:48.253 --> 00:11:51.804
you now should see we do,
in fact have our username, John Doe,

172
00:11:51.804 --> 00:11:53.623
with all of their credentials.

173
00:11:53.623 --> 00:12:01.453
And you can notice the password is,
in fact hashed.

