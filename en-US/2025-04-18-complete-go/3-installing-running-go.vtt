WEBVTT

1
00:00:00.000 --> 00:00:04.223
&gt;&gt; Melkey: This section is gonna be
introducing the data structures of Go and

2
00:00:04.223 --> 00:00:06.081
how we can spin a project up.

3
00:00:06.081 --> 00:00:08.793
What does Go mod init mean?

4
00:00:08.793 --> 00:00:11.817
What's the entry point of function,
arrays, slices,

5
00:00:11.817 --> 00:00:16.038
we'll go through all of that in this
section, and then we'll start to build off

6
00:00:16.038 --> 00:00:18.889
of that knowledge in
implementing it with a project.

7
00:00:18.889 --> 00:00:21.182
So there's this website called go.dev.

8
00:00:21.182 --> 00:00:23.912
This is the official Go website.

9
00:00:23.912 --> 00:00:26.817
And you go into /doc/install, and

10
00:00:26.817 --> 00:00:31.041
you click this big blue button that says,
Download.

11
00:00:31.041 --> 00:00:37.089
The version of Go that's currently
available is version 124.1.

12
00:00:37.089 --> 00:00:42.042
Now, if you don't have this exact version,
it's actually okay.

13
00:00:42.042 --> 00:00:43.285
Go is very boring,

14
00:00:43.285 --> 00:00:48.264
in the sense that the majority of features
that individuals use are actually

15
00:00:48.264 --> 00:00:53.032
the same features that have been in
development for five plus years now.

16
00:00:53.032 --> 00:00:59.076
Of course, there's new features like, Go
121 and 123 introduced like iterators and

17
00:00:59.076 --> 00:01:02.418
generics, I think we're
introducing Go 118.

18
00:01:02.418 --> 00:01:04.903
And these are helpful tools as well,
of course.

19
00:01:04.903 --> 00:01:08.567
But typically, having a go
version that's patched version or

20
00:01:08.567 --> 00:01:12.316
whatever, out of date,
it's not gonna be the end of the world.

21
00:01:12.316 --> 00:01:16.240
So depending on what operating system you
are on, there's Linux, Mac, and Windows.

22
00:01:16.240 --> 00:01:18.455
Go ahead and click the button,
follow the instructions.

23
00:01:18.455 --> 00:01:20.530
It should be pretty,
relatively straightforward.

24
00:01:20.530 --> 00:01:24.931
I'm on Mac, so I followed the Mac
instructions, and I have it installed.

25
00:01:24.931 --> 00:01:28.018
So we can open up a terminal, all right?

26
00:01:28.018 --> 00:01:32.915
So here, I have this empty terminal,
well, there's this one folder, but

27
00:01:32.915 --> 00:01:34.073
we can ignore it.

28
00:01:34.073 --> 00:01:36.221
Just remove it, okay?

29
00:01:36.221 --> 00:01:38.568
So here we can check the Go version,
like so.

30
00:01:38.568 --> 00:01:40.593
So I'm running on 123.2.

31
00:01:40.593 --> 00:01:42.167
This is completely fine.

32
00:01:42.167 --> 00:01:45.222
And the first thing I'm going
to do is make a directory.

33
00:01:45.222 --> 00:01:48.509
So let's just do mkdir,
make directory, and

34
00:01:48.509 --> 00:01:52.822
let's call it beginner_go,
all right, stuff like that.

35
00:01:52.822 --> 00:01:54.260
Let's cd into it.

36
00:01:54.260 --> 00:01:56.648
And so here,
now this is truly an empty director.

37
00:01:56.648 --> 00:01:59.400
There's nothing in here at all.

38
00:01:59.400 --> 00:02:01.543
When you start a Go project,
like I said, there's no boiler plate.

39
00:02:01.543 --> 00:02:04.427
So we're not gonna go to GitHub,
repo, get cloud, none of that.

40
00:02:04.427 --> 00:02:07.477
We're doing this from the ground up,
sticks and stones, all right?

41
00:02:07.477 --> 00:02:12.427
What you wanna do is do a go mod init,
and then the following, after the init

42
00:02:12.427 --> 00:02:17.393
is the name of the module, the name
of your project, essentially, okay?

43
00:02:17.393 --> 00:02:23.146
Now, before I type this one in, I wanna
explain what that is in just a little bit.

44
00:02:23.146 --> 00:02:26.718
So I'm going to open up one of
the projects I mentioned earlier,

45
00:02:26.718 --> 00:02:27.587
Go blueprint.

46
00:02:27.587 --> 00:02:30.223
This is obviously a public facing project,
right?

47
00:02:30.223 --> 00:02:33.115
It's on GitHub, everyone can see it,
everyone can use it, right?

48
00:02:33.115 --> 00:02:37.009
Now, the Go mod init, the module name for

49
00:02:37.009 --> 00:02:40.804
this follows a very particular format.

50
00:02:40.804 --> 00:02:45.796
Now, if I go into this go.mod file,
I'll explain what that is in a second,

51
00:02:45.796 --> 00:02:49.080
you can see the module name is right here,
right?

52
00:02:49.080 --> 00:02:51.395
It's module, and then the name of it.

53
00:02:51.395 --> 00:02:56.446
So the pattern for something that
you intend to be public-facing used

54
00:02:56.446 --> 00:03:01.582
by other engineers, other products,
other software, or whatever,

55
00:03:01.582 --> 00:03:06.303
is the name of where this project
is hosted, the auth or org name.

56
00:03:06.303 --> 00:03:08.433
And then the name of the project itself.

57
00:03:08.433 --> 00:03:13.544
So following that pattern,
this is github.com, because it's hosted

58
00:03:13.544 --> 00:03:19.087
on github.com melkeydev, I was the sole
author at the time of creating this.

59
00:03:19.087 --> 00:03:23.333
And then Go blueprint,
the name of the actual project itself.

60
00:03:23.333 --> 00:03:27.813
And this module, this kind of
concatenation is how this project is

61
00:03:27.813 --> 00:03:30.458
identified in kinda the Go ecosystem.

62
00:03:30.458 --> 00:03:34.329
Even though its name is Go blueprint,
right, and like, okay,

63
00:03:34.329 --> 00:03:38.273
it's probably one Go blueprint,
maybe another, or whatever,

64
00:03:38.273 --> 00:03:41.518
the full kind of idea of it is,
the whole string here.

65
00:03:41.518 --> 00:03:43.376
And why am I emphasizing this?

66
00:03:43.376 --> 00:03:48.490
This module name is how the code is
known for other people to use it and

67
00:03:48.490 --> 00:03:51.720
put it into their project if they want,
but

68
00:03:51.720 --> 00:03:57.500
it's also how it is identifiable to
itself within the scope of the project.

69
00:03:57.500 --> 00:04:02.024
Go doesn't have the concept of relative
paths to plug in when you wanna

70
00:04:02.024 --> 00:04:06.403
import something from a utils
package into something, all right?

71
00:04:06.403 --> 00:04:11.379
It has this notion of basically
pulling in from packages.

72
00:04:11.379 --> 00:04:14.358
And these packages are identifiable.

73
00:04:14.358 --> 00:04:17.936
And when we create a Go script,
there's this package identifier,

74
00:04:17.936 --> 00:04:21.158
which could be like package utils,
package routing, etc.

75
00:04:21.158 --> 00:04:26.201
And how you can pull that into any
location within your project is by

76
00:04:26.201 --> 00:04:31.710
referencing the full module name,
and then where that package exists.

77
00:04:31.710 --> 00:04:35.193
I'm gonna show this in more depth,
but I wanna again,

78
00:04:35.193 --> 00:04:37.484
emphasize what the module name is.

79
00:04:37.484 --> 00:04:42.106
So before you do a go mod init back here,
maybe sometimes think about it.

80
00:04:42.106 --> 00:04:45.776
You can always change it, it's not like
a zero sum game that you've made it,

81
00:04:45.776 --> 00:04:46.747
you can't go back.

82
00:04:46.747 --> 00:04:48.622
You can obviously do that.

83
00:04:48.622 --> 00:04:51.352
But if you know something is
gonna be used by other people,

84
00:04:51.352 --> 00:04:52.757
you can follow that pattern.

85
00:04:52.757 --> 00:04:55.410
It's kind of, the accepted pattern here.

86
00:04:55.410 --> 00:05:02.313
So for us, in this portion, we do,
go mod init, we just call it a BeginnerGo.

87
00:05:02.313 --> 00:05:05.060
So, beginner, and then GO, all right?

88
00:05:05.060 --> 00:05:08.548
And then you can see, LS,
we have this, go.ModFile.

89
00:05:08.548 --> 00:05:13.773
Next, we're gonna go ahead and
create touch main.Go, all right?

90
00:05:13.773 --> 00:05:18.617
Now you should have this, go.Mod,
and your main.Go file here.

91
00:05:18.617 --> 00:05:23.607
So here at this point, we've installed go,
we have these two files.

92
00:05:23.607 --> 00:05:27.303
I'm going to briefly show you what
the setup looks like for VS Code, but for

93
00:05:27.303 --> 00:05:31.525
the following course and the remaining of
course, I'm going to be using new of them,

94
00:05:31.525 --> 00:05:33.951
which I'll also show you
how you can set that up.

95
00:05:33.951 --> 00:05:36.650
So if you are on VS Code,
and I do apologize for

96
00:05:36.650 --> 00:05:41.714
anyone who maybe is on a different editor,
couldn't cover all of them, all right?

97
00:05:41.714 --> 00:05:44.100
For VS Code, it's fairly straightforward.

98
00:05:44.100 --> 00:05:48.394
When you open up your project, again,
we're going to ignore all the compiler

99
00:05:48.394 --> 00:05:52.641
issues we see for just a second,
you'll be prompted to install a extension.

100
00:05:52.641 --> 00:05:57.343
And you can see, if you go, there's this
extension here by the Go team at Google.

101
00:05:57.343 --> 00:06:00.108
If you just type in,
Go into the Extension tab,

102
00:06:00.108 --> 00:06:03.494
if it doesn't pop up,
you can go ahead and install it, and

103
00:06:03.494 --> 00:06:07.321
this is all you really need to run Go,
truly, in VS Code, right?

104
00:06:07.321 --> 00:06:12.160
It's gonna format stuff that's gonna
give you the LSP, it uses gopls.

105
00:06:12.160 --> 00:06:15.645
You can see down here,
the Go language server for

106
00:06:15.645 --> 00:06:19.220
a bunch of our tooling recommendation and
hints.

107
00:06:19.220 --> 00:06:22.580
If you are on New Vim, or

108
00:06:22.580 --> 00:06:27.964
any kind of vim-configured editor.

109
00:06:27.964 --> 00:06:32.409
Obviously, this is a bit more involved,

110
00:06:32.409 --> 00:06:39.909
because what you have to do in that
instance is set up the LSP yourself.

111
00:06:41.955 --> 00:06:46.573
&gt;&gt; Melkey: Okay, so here,
&gt;&gt; Melkey: I have

112
00:06:46.573 --> 00:06:49.775
some core things for my plugins.

113
00:06:49.775 --> 00:06:53.199
You can see my LSP, right?

114
00:06:53.199 --> 00:06:56.176
Again, these are my settings,
my configuration.

115
00:06:56.176 --> 00:07:01.560
It varies very, very vastly for
however you set your services, right?

116
00:07:01.560 --> 00:07:05.894
I'm using Mason, so I have
the ability to use Mason like so, and

117
00:07:05.894 --> 00:07:09.120
it pulls up all of these
LSPs that I can install.

118
00:07:09.120 --> 00:07:13.264
You can see,
right here I have gopls installed.

119
00:07:13.264 --> 00:07:15.253
Which means whenever I open up a Go file,

120
00:07:15.253 --> 00:07:17.953
it's going to bind it to my
language server protocol.

121
00:07:17.953 --> 00:07:25.404
And then we have gopls available,
just like we saw in VS Code, okay?

122
00:07:25.404 --> 00:07:29.927
So again, it's gonna vary case by case
on how you set up, but typically, for

123
00:07:29.927 --> 00:07:33.060
someone with VS Code with
an extension marketplace or

124
00:07:33.060 --> 00:07:36.003
someone with something like new Vim,
whatever.

125
00:07:36.003 --> 00:07:39.446
That's typically the route to go about it.

