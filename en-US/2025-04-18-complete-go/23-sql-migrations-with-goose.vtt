WEBVTT

1
00:00:00.094 --> 00:00:02.901
&gt;&gt; Melkey: So
kind of building off of everything.

2
00:00:02.901 --> 00:00:05.847
Everything we've done so far,
we've created our backend,

3
00:00:05.847 --> 00:00:07.325
we've created our database.

4
00:00:07.325 --> 00:00:10.708
We have a few things running,
it's looking good.

5
00:00:10.708 --> 00:00:15.280
And we have the connection, but
it's not the strongest connection.

6
00:00:15.280 --> 00:00:21.784
I'm gonna introduce another really good
package, and this is called Goose.

7
00:00:21.784 --> 00:00:24.700
Goose is a database migration tool.

8
00:00:24.700 --> 00:00:28.578
It supports SQL migrations and
Go functions.

9
00:00:28.578 --> 00:00:32.898
If anyone has ever dealt with migrations,

10
00:00:32.898 --> 00:00:39.502
kind of just going at it,
that is a very unfortunate experience.

11
00:00:39.502 --> 00:00:44.510
Migrations are notorious for losing data,

12
00:00:44.510 --> 00:00:51.422
breaking databases,
unfortunately, just taking souls.

13
00:00:51.422 --> 00:00:56.636
Because if you're not properly equipped,
whether it is not making backups,

14
00:00:56.636 --> 00:01:01.773
not having the right tools, just
misaligning on your infrastructure on your

15
00:01:01.773 --> 00:01:07.004
initial schemas, you can possibly run
into some really nasty consequences.

16
00:01:07.004 --> 00:01:11.114
So I found this tool a while ago, and

17
00:01:11.114 --> 00:01:18.388
this is recommended to me by a very,
very brilliant engineer.

18
00:01:18.388 --> 00:01:22.696
It's called Goose, and
it's a migration tool specifically for Go.

19
00:01:22.696 --> 00:01:24.688
And what migrations are, for

20
00:01:24.688 --> 00:01:28.909
those who may be unfamiliar with
the lingo, a migration is used

21
00:01:28.909 --> 00:01:33.784
when we have to make a modification
to the underlying schema structure.

22
00:01:33.784 --> 00:01:37.133
So when you create a database and
you have a schema, unless it's a user and

23
00:01:37.133 --> 00:01:38.277
it has a bunch of fields.

24
00:01:38.277 --> 00:01:43.104
But let's say down the road, your project
blew up and a new feature came in that

25
00:01:43.104 --> 00:01:48.093
your users absolutely want, that requires
you to modify that database schema.

26
00:01:48.093 --> 00:01:51.832
Well, you can't just add a column,
and then what?

27
00:01:51.832 --> 00:01:52.494
How do you run that?

28
00:01:52.494 --> 00:01:53.996
How do you run that SQL, right?

29
00:01:53.996 --> 00:01:56.101
Or if you have to add that column and

30
00:01:56.101 --> 00:01:59.955
it had breaking changes and
you have to revert, what do you do?

31
00:01:59.955 --> 00:02:06.471
So Goose allows us the ability to migrate
between versions of our database.

32
00:02:06.471 --> 00:02:11.286
So it allows us more flexibility and
an easier way to run SQL

33
00:02:11.286 --> 00:02:16.112
that does the underlying
changes to our database, okay?

34
00:02:16.112 --> 00:02:21.260
Now to install Go or install Goose,
it's a bit different.

35
00:02:21.260 --> 00:02:23.326
Previously, we did GoGet.

36
00:02:23.326 --> 00:02:28.034
GoGet is specifically used to just bring
in a package into the scope of our

37
00:02:28.034 --> 00:02:30.747
project for our go.mod and our go.sum.

38
00:02:30.747 --> 00:02:34.637
In this one,
I would like you guys to install Goose.

39
00:02:34.637 --> 00:02:39.775
And the reason for that is, Goose is
going to be applied to our binary,

40
00:02:39.775 --> 00:02:45.450
to our Go path bin directory, because
we're going to use the Goose command.

41
00:02:45.450 --> 00:02:47.842
Okay, so I'm gonna copy this
command over to the terminal.

42
00:02:47.842 --> 00:02:50.381
So hopefully, it's a bit easier to see.

43
00:02:50.381 --> 00:02:51.731
I'm gonna clear this.

44
00:02:51.731 --> 00:02:56.741
So it's go install
github.com/pressly/goose/v3/cmd/goose@lat-

45
00:02:56.741 --> 00:03:00.114
est, to get the latest
version of Goose installed.

46
00:03:00.114 --> 00:03:04.084
I'm gonna go ahead and click Enter.

47
00:03:04.084 --> 00:03:05.038
So I already have installed.

48
00:03:05.038 --> 00:03:07.978
To make sure you have installed,
please do Goose version.

49
00:03:10.963 --> 00:03:13.179
&gt;&gt; Melkey: Or goose -version.

50
00:03:16.047 --> 00:03:20.185
&gt;&gt; Melkey: Is anyone getting any zsh or
script not found?

51
00:03:20.185 --> 00:03:25.703
Okay, so to solve that,
is open up a terminal.

52
00:03:25.703 --> 00:03:30.711
First of all, you wanna make sure
that it's installed correctly.

53
00:03:30.711 --> 00:03:38.493
So you can do the following command
to check first if it's installed.

54
00:03:38.493 --> 00:03:42.503
It's a grep command for Goose.

55
00:03:42.503 --> 00:03:45.715
So that make sure that
exist in the go/bin.

56
00:03:45.715 --> 00:03:49.159
If you have that,
that's a pretty easy fix.

57
00:03:49.159 --> 00:03:52.559
All you need to do is export or
run this command,

58
00:03:52.559 --> 00:03:55.792
export PATH=$HOME/go/bin to the path.

59
00:03:55.792 --> 00:04:01.400
Export that into your zsh or
bash script, whatever it is.

60
00:04:01.400 --> 00:04:05.003
Cool, and then did you get it to work,
the Goose, it works?

61
00:04:05.003 --> 00:04:05.855
&gt;&gt; Student: This version.
&gt;&gt; Melkey: Cool,

62
00:04:05.855 --> 00:04:08.635
is everyone else able
to see goose- version?

63
00:04:08.635 --> 00:04:09.552
We're good, okay, sweet.

64
00:04:09.552 --> 00:04:13.970
We're gonna have to write some SQL.

65
00:04:13.970 --> 00:04:18.739
I know you guys want to do a Go course,
but because we're doing a backend

66
00:04:18.739 --> 00:04:23.682
application SQL, you cannot get too
far from SQL in the backend already.

67
00:04:23.682 --> 00:04:25.654
Eventually, you're gonna have to do it.

68
00:04:25.654 --> 00:04:29.311
And we had a question earlier,
if we're going to use RMS, no,

69
00:04:29.311 --> 00:04:30.831
we're gonna write this.

70
00:04:30.831 --> 00:04:32.430
We're gonna write this raw, all right?

71
00:04:32.430 --> 00:04:36.415
So at the root of your project,
let's go ahead and make a new folder.

72
00:04:36.415 --> 00:04:39.902
Let's call this migrations, okay?

73
00:04:39.902 --> 00:04:44.363
And the first file we're
gonna create is fs.go.

74
00:04:44.363 --> 00:04:48.496
This fs.go file is going
to look a little wonky.

75
00:04:48.496 --> 00:04:52.436
So first, let's go ahead and
declare a migrations package.

76
00:04:52.436 --> 00:04:57.434
And over here, we're gonna import
the embedded library, embed.

77
00:04:57.434 --> 00:05:02.815
And what we're going to do,
we're specifically reserving this file for

78
00:05:02.815 --> 00:05:06.044
when we compile our application to binary.

79
00:05:06.044 --> 00:05:09.519
Because what this tells us,
fs is going to be file structure.

80
00:05:09.519 --> 00:05:14.109
And what we're going to tell our compiler
is that there's going to be a bunch of SQL

81
00:05:14.109 --> 00:05:17.717
files that exist in this file
structure we're going to create.

82
00:05:17.717 --> 00:05:22.792
And then when we use this downstream,
we actually run our Goose migration up

83
00:05:22.792 --> 00:05:27.965
in our application, it's going to refer
to the file structure here, okay?

84
00:05:27.965 --> 00:05:29.468
So I'll show you what I mean.

85
00:05:29.468 --> 00:05:35.116
So we do this Go build command, so
it's commented out, and then go:embed.

86
00:05:35.116 --> 00:05:39.325
And then here,
we're going to do wildcard.sql.

87
00:05:39.325 --> 00:05:42.283
This is saying, find all of the SQL

88
00:05:42.283 --> 00:05:47.190
files that are going to exist
in the directory path here.

89
00:05:47.190 --> 00:05:52.311
I'm gonna create a new variable,
var FS, and it's gonna be embed.FS.

90
00:05:52.311 --> 00:05:55.601
You can see it's a read-only
collection of files,

91
00:05:55.601 --> 00:05:58.833
usually initialized with
a go:embed directive.

92
00:05:58.833 --> 00:05:59.465
And that's it.

93
00:05:59.465 --> 00:06:00.546
That's all this file is going to do.

94
00:06:00.546 --> 00:06:03.606
We're going to capitalize it
because we're gonna pull in FS.

95
00:06:03.606 --> 00:06:04.513
But essentially,

96
00:06:04.513 --> 00:06:08.208
we're going to be building a bunch of
these files into this variable, okay?

97
00:06:08.208 --> 00:06:11.290
Now comes the fun part.

98
00:06:11.290 --> 00:06:13.164
In migrations, add a new file.

99
00:06:13.164 --> 00:06:15.430
The syntax of this doesn't really matter.

100
00:06:15.430 --> 00:06:18.340
I'm gonna share with you what I use.

101
00:06:18.340 --> 00:06:24.524
I use 0000, four zeros, and 1, and
it's gonna be called _users.sql.

102
00:06:27.113 --> 00:06:31.083
&gt;&gt; Melkey: Okay, so here,
we're gonna ship rate SQL, but first,

103
00:06:31.083 --> 00:06:36.309
we're gonna actually give it some
Goose command, some Goose directive.

104
00:06:36.309 --> 00:06:41.791
So we're gonna do comment,
decide to do a comment SQL file,

105
00:06:41.791 --> 00:06:47.927
-- +goose Up, which says, on Up,
do the following, not that.

106
00:06:47.927 --> 00:06:53.326
[LAUGH] We'll do +goose, let's say

107
00:06:53.326 --> 00:06:58.385
+goose StatementBegin, okay?

108
00:06:58.385 --> 00:07:05.162
And here we'll do
CREATE TABLE IF NOT EXISTS.

109
00:07:05.162 --> 00:07:07.388
I'm gonna fix this extra space here.

110
00:07:07.388 --> 00:07:10.182
The name of the table is gonna be users,
all right?

111
00:07:10.182 --> 00:07:12.319
And here we're gonna define
what that schema looks like.

112
00:07:12.319 --> 00:07:17.275
So we're gonna have a field
called id BIGSERIAL.

113
00:07:17.275 --> 00:07:22.592
It's gonna act as our primary key, okay?

114
00:07:22.592 --> 00:07:28.668
I'm gonna have our username,
it's gonna be a VARCHAR.

115
00:07:28.668 --> 00:07:34.082
I didn't put the most effort into
thinking about the size of a username,

116
00:07:34.082 --> 00:07:35.340
I just put 50.

117
00:07:35.340 --> 00:07:39.092
I'm sure there's more optimal
ways of handling this, for me,

118
00:07:39.092 --> 00:07:41.806
I just put 50 here, and
it's gonna be fine.

119
00:07:41.806 --> 00:07:43.532
I'm gonna make sure this is UNIQUE and
NOT NULL.

120
00:07:43.532 --> 00:07:48.294
Meaning, every entry in this user SQL
database is going to have to have

121
00:07:48.294 --> 00:07:52.910
a username, and that username
cannot be a copy of someone else's.

122
00:07:52.910 --> 00:07:56.319
We're also gonna have
another field called email.

123
00:07:56.319 --> 00:08:00.862
I'll make this one a bit longer,
it's a VARCHAR(255).

124
00:08:00.862 --> 00:08:04.772
Oops, okay?

125
00:08:04.772 --> 00:08:09.499
We can make this unique, NOT NULL as well.

126
00:08:09.499 --> 00:08:11.788
Here, we'll do password_hash.

127
00:08:11.788 --> 00:08:13.968
So this one's gonna be pretty important.

128
00:08:13.968 --> 00:08:18.744
We are not going to be
storing the actual hash of,

129
00:08:18.744 --> 00:08:22.484
look, the actual password, right?

130
00:08:22.484 --> 00:08:25.088
That's not what we're
going to be doing at all.

131
00:08:25.088 --> 00:08:28.470
We're gonna be storing a hash
representation of the password.

132
00:08:28.470 --> 00:08:29.900
I'll show this down the line.

133
00:08:29.900 --> 00:08:33.303
We don't have to worry about
this too long, or yet.

134
00:08:33.303 --> 00:08:34.912
We'll make this 255.

135
00:08:38.455 --> 00:08:43.010
&gt;&gt; Melkey: 255, and
we'll make this NOT NULL, okay?

136
00:08:43.010 --> 00:08:46.062
And then here you can just add
any field you want, right?

137
00:08:46.062 --> 00:08:47.169
This could be just extra fields.

138
00:08:47.169 --> 00:08:50.718
I'm gonna put bio to make this a text.

139
00:08:50.718 --> 00:08:53.965
And I'm gonna create a created_at field.

140
00:08:53.965 --> 00:08:58.450
It's gonna be a TIMESTAMP WITH TIME ZONE.

141
00:08:58.450 --> 00:09:02.286
&gt;&gt; Student: I'm gonna put
DEFAULT to CURRENT_TIMESTAMP,

142
00:09:02.286 --> 00:09:05.846
which is a built-in function for Postgres.

143
00:09:10.668 --> 00:09:15.374
&gt;&gt; Melkey: And we also have an updated_at,
which can be the same thing,

144
00:09:15.374 --> 00:09:19.731
TIMESTAMP WITH TIME ZONE
DEFAULT CURRENT_TIMESTAMP.

145
00:09:22.961 --> 00:09:25.243
When you do that,
make sure to end the statement.

146
00:09:25.243 --> 00:09:27.322
&gt;&gt; Melkey: So StatementEnd for goose.

147
00:09:27.322 --> 00:09:30.508
And basically what that block does is,
when we run goose Up,

148
00:09:30.508 --> 00:09:32.506
this is gonna be the SQL that gets run,

149
00:09:32.506 --> 00:09:36.145
depending on the version of Goose
that we're currently running at.

150
00:09:36.145 --> 00:09:39.044
And with every Up command,
we just also need a goose Down command.

151
00:09:39.044 --> 00:09:40.812
So do goose Down.

152
00:09:40.812 --> 00:09:45.282
We'll do +goose StatementBegin.

153
00:09:45.282 --> 00:09:48.651
And this is pretty easy,
we should do DROP TABLE users.

154
00:09:48.651 --> 00:09:53.441
Because if you think about it, this is the
world before the users table exist, and

155
00:09:53.441 --> 00:09:57.136
we wanna go back to it,
whatever that world looks like, okay?

156
00:09:57.136 --> 00:10:00.322
&gt;&gt; Student: And
here we'll do +goose StatementEnd.

157
00:10:00.322 --> 00:10:05.681
&gt;&gt; Melkey: Cool, now, what I'd like you
to do is just go ahead and copy this.

158
00:10:05.681 --> 00:10:07.068
I'm gonna make a new file.

159
00:10:07.068 --> 00:10:14.527
It's gonna be 00002, and this is gonna
be called workout, so _workouts.sql.

160
00:10:14.527 --> 00:10:18.151
Go ahead and just paste this,
cuz we're gonna repeat a lot of stuff and

161
00:10:18.151 --> 00:10:21.238
it doesn't make sense,
you just copy the same thing over.

162
00:10:21.238 --> 00:10:23.082
So +goose Up.

163
00:10:23.082 --> 00:10:27.190
Goose begins to be the same thing,
CREATE TABLE IF NOT EXISTS,

164
00:10:27.190 --> 00:10:28.983
not users, but workouts.

165
00:10:28.983 --> 00:10:32.496
The id still gonna be
BIGSERIAL PRIMARY KEY.

166
00:10:32.496 --> 00:10:38.931
Now this whole project is allowing
users to create workouts.

167
00:10:38.931 --> 00:10:41.622
So if you've ever worked
with relational database,

168
00:10:41.622 --> 00:10:43.728
a workout has to be
tied back to that user.

169
00:10:43.728 --> 00:10:47.089
Here's the thing,
I'm gonna make this not obvious.

170
00:10:47.089 --> 00:10:48.947
We're gonna ignore that for now.

171
00:10:48.947 --> 00:10:51.443
The reason why is cuz I wanna focus on,
first,

172
00:10:51.443 --> 00:10:53.879
getting everything working with workouts.

173
00:10:53.879 --> 00:10:55.986
And then we're gonna introduce the user,
and

174
00:10:55.986 --> 00:10:58.210
then we can tie back into
users owning workouts.

175
00:10:58.210 --> 00:11:00.754
So for right now,
we're gonna make a mental little note.

176
00:11:00.754 --> 00:11:03.873
A comment, I'm gonna put user_id.

177
00:11:08.114 --> 00:11:14.637
Our workout is gonna have a title,
which would be VARCHAR(255) NOT NULL.

178
00:11:17.238 --> 00:11:21.815
&gt;&gt; Melkey: Gonna have a description,
which is going to be TEXT.

179
00:11:21.815 --> 00:11:26.115
Also gonna have a duration_minutes,

180
00:11:26.115 --> 00:11:30.422
which are going to be INTEGER NOT NULL.

181
00:11:30.422 --> 00:11:34.628
And we're gonna have one more
field called calories_burned.

182
00:11:34.628 --> 00:11:39.093
And this also gonna be an INTEGER,
and we don't care if this is null.

183
00:11:39.093 --> 00:11:42.672
And then you can go ahead and
remove the username, email,

184
00:11:42.672 --> 00:11:44.654
password_hash in bio fields.

185
00:11:44.654 --> 00:11:49.944
So double-check that your end
result look something like this.

186
00:11:49.944 --> 00:11:54.930
You should have a workouts table id,
the commented out user id, title,

187
00:11:54.930 --> 00:11:59.267
description, duration_minutes,
calories_burned, and

188
00:11:59.267 --> 00:12:03.053
then the created_at, and
updated_at timestamps.

189
00:12:03.053 --> 00:12:05.899
&gt;&gt; Student: Do you wanna drop
workouts instead of users?

190
00:12:05.899 --> 00:12:07.756
&gt;&gt; Melkey: Yeah, we're gonna workouts.

191
00:12:16.318 --> 00:12:18.383
&gt;&gt; Melkey: Okay,
let's do that one more time.

192
00:12:18.383 --> 00:12:22.615
Go ahead and go take up your file,
copy everything.

193
00:12:22.615 --> 00:12:25.519
And in migration,
we're gonna make our last SQL file.

194
00:12:25.519 --> 00:12:29.759
Let's go four zeros, so 00003.

195
00:12:29.759 --> 00:12:35.253
And this one's gonna be
called workout_entries.sql.

196
00:12:39.094 --> 00:12:40.816
&gt;&gt; Melkey: Just paste this here.

197
00:12:40.816 --> 00:12:45.440
And I'm gonna explain the dynamic here of
what a workout entry is versus a workout.

198
00:12:45.440 --> 00:12:51.733
So a workout is going to be an umbrella,
high level description of the workout.

199
00:12:51.733 --> 00:12:54.223
It's gonna have the title, duration,
and things of that nature.

200
00:12:54.223 --> 00:12:58.526
But a workout could have many
different workouts in it.

201
00:12:58.526 --> 00:12:59.730
Someone could be doing leg day.

202
00:12:59.730 --> 00:13:01.148
Could be the title, the workout.

203
00:13:01.148 --> 00:13:05.646
But then they could be squatting, they
could be lunging, they could be running,

204
00:13:05.646 --> 00:13:07.155
they could do calf raises.

205
00:13:07.155 --> 00:13:08.985
They could do all these different things.

206
00:13:08.985 --> 00:13:12.541
And each of those is going to
be an individual workout entry.

207
00:13:12.541 --> 00:13:16.584
So from a schema perspective, we're gonna
have a one to many relationship here.

208
00:13:16.584 --> 00:13:19.890
One workout could have many
workout entries to them, right?

209
00:13:19.890 --> 00:13:23.358
And all those workout entries
are gonna have only one relationship,

210
00:13:23.358 --> 00:13:24.325
back to a workout.

211
00:13:26.754 --> 00:13:29.144
&gt;&gt; Melkey: Okay, so with that being said,

212
00:13:29.144 --> 00:13:34.916
CREATE TABLE IF NOT EXISTS instead of
workout is gonna be workout_entries.

213
00:13:38.277 --> 00:13:39.861
&gt;&gt; Melkey: Let's make some space here.

214
00:13:39.861 --> 00:13:44.267
The id is still going to
be BIGSERIAL PRIMARY KEY.

215
00:13:44.267 --> 00:13:47.102
We're gonna have a new
field called workout_id.

216
00:13:47.102 --> 00:13:51.668
It's gonna be BIGINT, all right, NOT NULL.

217
00:13:51.668 --> 00:13:57.286
And it's going to references, we're gonna
pass in our workouts table, like so.

218
00:13:57.286 --> 00:14:00.143
And the value is going to be id.

219
00:14:00.143 --> 00:14:04.002
So the workout_id here references
the id of our workout.

220
00:14:04.002 --> 00:14:07.615
And we're gonna do ON DELETE CASCADE.

221
00:14:07.615 --> 00:14:13.164
Meaning, if we delete the workout from
the workouts table, all of the work and

222
00:14:13.164 --> 00:14:18.902
entries that are binded to it via this
relationship will also be deleted, okay?

223
00:14:18.902 --> 00:14:23.727
Next field we're gonna have is
the exercise_name, should be a VARCHAR,

224
00:14:23.727 --> 00:14:25.269
we'll make it 255.

225
00:14:25.269 --> 00:14:29.184
Make sure this is NOT NULL.

226
00:14:29.184 --> 00:14:31.224
We'll have sets.

227
00:14:31.224 --> 00:14:35.918
This will be an INTEGER NOT NULL.

228
00:14:35.918 --> 00:14:37.285
We'll have reps.

229
00:14:37.285 --> 00:14:40.973
Make sure this is an INTEGER.

230
00:14:40.973 --> 00:14:44.164
Okay, we'll have duration_seconds.

231
00:14:44.164 --> 00:14:46.514
We'll make this also an INTEGER.

232
00:14:50.079 --> 00:14:52.660
&gt;&gt; Melkey: Also have weight for
the individual workout.

233
00:14:52.660 --> 00:14:54.305
We'll make this a DECIMAL VALUE.

234
00:14:58.537 --> 00:15:00.546
&gt;&gt; Melkey: We'll add an optional field for
notes.

235
00:15:00.546 --> 00:15:01.819
This could be also a TEXT.

236
00:15:01.819 --> 00:15:06.084
So if anyone has PR or personal record,
or, I mean, personal best, whatever,

237
00:15:06.084 --> 00:15:08.053
they can add into the notes section.

238
00:15:08.053 --> 00:15:11.689
And then another field that's
gonna be crucial is order_index.

239
00:15:11.689 --> 00:15:16.355
This is because if somebody has a workout
with five different workout entries, we

240
00:15:16.355 --> 00:15:21.102
want these to be ordered to mimic exactly
what that user did in the workout, right?

241
00:15:21.102 --> 00:15:24.321
If you submit a form
with all those entries,

242
00:15:24.321 --> 00:15:28.588
we wanna adhere to that, and
not just jumble them around.

243
00:15:28.588 --> 00:15:31.314
I'll make this INTEGER NOT NULL.

244
00:15:31.314 --> 00:15:34.469
Then go ahead and
copy that created_at TIMESTAMP.

245
00:15:34.469 --> 00:15:39.237
So at this point, your SQL table
should look similar to this so

246
00:15:39.237 --> 00:15:42.274
we can ignore the +goose Down for now.

247
00:15:42.274 --> 00:15:48.377
We'll save that to the end, okay?

248
00:15:48.377 --> 00:15:50.640
I think this is a cool,
we're gonna add a constraint.

249
00:15:50.640 --> 00:15:56.267
It's gonna add a CONSTRAINT,
whoops, CONSTRAINT on our Postgres.

250
00:15:56.267 --> 00:15:59.341
I'm gonna call this valid_workout_entry.

251
00:15:59.341 --> 00:16:01.297
And there's gonna be a CHECK.

252
00:16:01.297 --> 00:16:07.245
And in this CHECK, we wanna make sure
that if somebody submits a workout_entry,

253
00:16:07.245 --> 00:16:10.607
this could either be them lifting or
running or

254
00:16:10.607 --> 00:16:13.815
doing some sort of non-lifting exercise.

255
00:16:13.815 --> 00:16:17.139
So for example,
if you are going to be lifting weights,

256
00:16:17.139 --> 00:16:22.464
if you're gonna be bench pressing, that's
gonna have reps, right, reps and weight.

257
00:16:22.464 --> 00:16:26.975
If you're gonna be running, though, really
rep running, but you can do duration,

258
00:16:26.975 --> 00:16:28.868
you can tell us how long you ran for.

259
00:16:28.868 --> 00:16:33.676
So we're gonna make sure that there's
a constraint that not a workout_entry can

260
00:16:33.676 --> 00:16:35.487
have both of these fields, and

261
00:16:35.487 --> 00:16:39.125
every workout_entry must have
at least one of these fields.

262
00:16:39.125 --> 00:16:46.225
So how that looks like is,
(reps IS NOT NULL OR

263
00:16:46.225 --> 00:16:51.698
duration_seconds IS NOT NULL).

264
00:16:51.698 --> 00:16:56.821
And we'll make another constraint here,

265
00:16:56.821 --> 00:17:02.663
(reps IS NULL OR
duration_seconds IS NULL).

