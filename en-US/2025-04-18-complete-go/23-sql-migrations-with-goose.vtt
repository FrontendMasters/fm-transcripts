WEBVTT

1
00:00:00.000 --> 00:00:03.320
&gt;&gt; Melkey: So building off of
everything we've done so far,

2
00:00:03.320 --> 00:00:07.361
we've created our backend,
we've created our database.

3
00:00:07.361 --> 00:00:12.121
We have a few things running, it's looking
good, and we have the connection, but

4
00:00:12.121 --> 00:00:14.300
it's not the strongest connection.

5
00:00:14.300 --> 00:00:21.608
I'm gonna introduce another really good
package, and this is called Goose.

6
00:00:21.608 --> 00:00:24.837
Goose is a database migration tool.

7
00:00:24.837 --> 00:00:28.893
It supports SQL migrations and
Go functions.

8
00:00:28.893 --> 00:00:33.933
If anyone has ever dealt with migrations,

9
00:00:33.933 --> 00:00:40.793
just going at it,
that is a very unfortunate experience.

10
00:00:40.793 --> 00:00:47.197
Migrations are notorious for
losing data, breaking databases,

11
00:00:47.197 --> 00:00:51.438
and, unfortunately, just taking souls.

12
00:00:51.438 --> 00:00:56.500
Because if you're not properly equipped,
whether it is not making backups,

13
00:00:56.500 --> 00:01:01.182
not having the right tools,
just misaligning on your infrastructure,

14
00:01:01.182 --> 00:01:06.728
on your initial schemas, you can possibly
run into some really nasty consequences.

15
00:01:06.728 --> 00:01:10.930
So I found this tool a while ago, and

16
00:01:10.930 --> 00:01:18.087
this is recommended to me by
a very very brilliant engineer.

17
00:01:18.087 --> 00:01:19.301
It's called Goose.

18
00:01:19.301 --> 00:01:22.483
And it's a migration tool specifically for
Go.

19
00:01:22.483 --> 00:01:27.425
And what migrations are for those who
may be unfamiliar with the lingo.

20
00:01:27.425 --> 00:01:32.356
A migration is used when we have to
make a modification to the underlying

21
00:01:32.356 --> 00:01:33.760
schema structure.

22
00:01:33.760 --> 00:01:37.956
So when you create a database, and
you have a schema, unless it's a user, and

23
00:01:37.956 --> 00:01:42.215
it has a bunch of fields, but let's say,
down the road, your project blew up,

24
00:01:42.215 --> 00:01:45.330
and a new feature came in that
your users absolutely want,

25
00:01:45.330 --> 00:01:48.093
that requires you to modify
that database schema.

26
00:01:48.093 --> 00:01:51.946
Well, you can't just add a column and
then what?

27
00:01:51.946 --> 00:01:53.889
How do you run that?
How do you run that SQL, right?

28
00:01:53.889 --> 00:01:57.874
Or, if you have to add that column,
and it had breaking changes, and

29
00:01:57.874 --> 00:01:59.957
you have to revert, what do you do?

30
00:01:59.957 --> 00:02:06.485
So goose allows us the ability to migrate
between versions of our database,

31
00:02:06.485 --> 00:02:11.484
so it allows us more flexibility and
an easier way to run SQL

32
00:02:11.484 --> 00:02:16.500
that does the underlying
changes to our database, okay?

33
00:02:16.500 --> 00:02:18.932
Now to install Go or install goose,

34
00:02:18.932 --> 00:02:23.155
it's a bit different,
we've previously seen we did Go get.

35
00:02:23.155 --> 00:02:27.709
Go get is specifically used to just
bring in a package into the scope of

36
00:02:27.709 --> 00:02:30.701
our project for our go.mod and our go.sum.

37
00:02:30.701 --> 00:02:35.518
In this one, I would like you guys
to install goose, and the reason for

38
00:02:35.518 --> 00:02:41.168
that is goose is going to be applied to
our binary, to our GoPathBin, directory.

39
00:02:41.168 --> 00:02:44.049
Because we're going to
use the goose command.

40
00:02:44.049 --> 00:02:47.954
Okay, so I'm gonna copy this
command over to the terminal, so

41
00:02:47.954 --> 00:02:51.721
hopefully it's a bit easier to see,
I'm gonna clear this.

42
00:02:51.721 --> 00:02:56.768
So let's go install
github.com/presley/goose/v3/cmd/goose@Lat-

43
00:02:56.768 --> 00:03:00.114
est, to get the latest
version of goose installed.

44
00:03:00.114 --> 00:03:04.479
So I'm gonna go ahead and click Enter, so

45
00:03:04.479 --> 00:03:10.590
I already have installed to
make sure you have installed,

46
00:03:10.590 --> 00:03:15.593
please do goose version, or goose-version.

47
00:03:15.593 --> 00:03:19.952
Is anyone getting any ZSH or
script not found?

48
00:03:19.952 --> 00:03:25.653
Okay, so to solve that is open
up a terminal, first of all,

49
00:03:25.653 --> 00:03:30.798
you wanna make sure that
it's installed correctly.

50
00:03:30.798 --> 00:03:35.763
So you can do the following
command to check first

51
00:03:35.763 --> 00:03:40.365
if it's installed, it's a grep command for

52
00:03:40.365 --> 00:03:45.708
goose so
that makes sure that exists in the go/bin.

53
00:03:45.708 --> 00:03:51.075
If you have that, that's a pretty easy
fix, all you need to do is export or

54
00:03:51.075 --> 00:03:55.679
run this command,
export PATH=$HOME/go/bin:$PATH.

55
00:03:55.679 --> 00:03:59.835
Export that into your ZSH or bash script,

56
00:03:59.835 --> 00:04:05.188
whatever it is,
we're gonna have to write some SQL.

57
00:04:05.188 --> 00:04:09.883
I know you guys want to do a go course,
but because we're doing a back end

58
00:04:09.883 --> 00:04:14.737
application SQL, you cannot get too
far from SQL in the back end already,

59
00:04:14.737 --> 00:04:17.422
eventually you're gonna have to do it.

60
00:04:17.422 --> 00:04:21.508
And we had a question earlier,
if we're going to use RMS, no,

61
00:04:21.508 --> 00:04:24.221
we're gonna write this raw, all right?

62
00:04:24.221 --> 00:04:28.820
So, at the root of your project,
let's go ahead and make a new folder,

63
00:04:28.820 --> 00:04:31.287
let's call this migrations, okay?

64
00:04:31.287 --> 00:04:35.501
And the first file we're
gonna create is fs.go.

65
00:04:35.501 --> 00:04:40.137
This fs.go file is going to
look a little wonky, so first,

66
00:04:40.137 --> 00:04:44.335
let's go ahead and
declare our migrations package.

67
00:04:44.335 --> 00:04:49.017
And over here, we're gonna import
the embedded library, embed.

68
00:04:49.017 --> 00:04:54.520
And what we're going to do,
we're specifically reserving this file for

69
00:04:54.520 --> 00:04:57.816
when we compile our application to binary.

70
00:04:57.816 --> 00:05:01.326
Because what this tells us,
fs is going to be a file structure,

71
00:05:01.326 --> 00:05:05.900
and what we're going to tell our compiler
is that there's going to be a bunch of SQL

72
00:05:05.900 --> 00:05:09.505
files that exist in this file
structure we're going to create.

73
00:05:09.505 --> 00:05:14.769
And then when we use this downstream,
we actually run our goose migration up in

74
00:05:14.769 --> 00:05:19.820
our application, it's going to refer
to the file structure here, okay?

75
00:05:19.820 --> 00:05:24.320
So I'll show you what I mean, so
we do this Go build command so

76
00:05:24.320 --> 00:05:31.059
it's commented out, and then go:embed, and
then here we're gonna do wildcard.sql.

77
00:05:31.059 --> 00:05:32.271
This is saying,

78
00:05:32.271 --> 00:05:37.737
find all of the SQL files that are going
to exist in the directory path here.

79
00:05:37.737 --> 00:05:42.584
I'm gonna create a new variable,
var FS, and it's going to be embed.fs,

80
00:05:42.584 --> 00:05:47.434
you can see it's a read only collection
of files, usually initialized with

81
00:05:47.434 --> 00:05:52.324
a go embed directive, and that's it,
that's all this file is going to do.

82
00:05:52.324 --> 00:05:56.291
We're going to capitalize it because
we're gonna pull in FS, but essentially,

83
00:05:56.291 --> 00:06:00.042
we're going to be building a bunch of
these files into this variable, okay?

84
00:06:00.042 --> 00:06:03.647
Now comes the fun part,
in migrations, add a new file,

85
00:06:03.647 --> 00:06:08.894
the syntax of this doesn't really matter,
I'm gonna share with you what I use.

86
00:06:08.894 --> 00:06:14.437
I use 00001, and it's gonna

87
00:06:14.437 --> 00:06:19.795
be called _users.sql, okay?

88
00:06:19.795 --> 00:06:22.569
So here we're gonna ship right SQL, but

89
00:06:22.569 --> 00:06:28.126
first we're gonna actually give it some
goose command, some goose directive.

90
00:06:28.126 --> 00:06:35.280
So we need to decide to do
a comment SQL file--plus goose up,

91
00:06:35.280 --> 00:06:40.930
which says on up,
do the following, note that.

92
00:06:40.930 --> 00:06:45.127
We'll do plus, want to say

93
00:06:45.127 --> 00:06:50.061
goose statement begin, okay?

94
00:06:50.061 --> 00:06:54.953
And here we'll do create
TABLE IF NOT EXIST,

95
00:06:54.953 --> 00:06:59.084
I'm gonna fix this extra space here.

96
00:06:59.084 --> 00:07:01.925
The name of the table is gonna be users,
all right?

97
00:07:01.925 --> 00:07:06.647
And here we're gonna define
what that schema looks like, so

98
00:07:06.647 --> 00:07:10.536
we're gonna have a field called ID,
BIGSERIAL,

99
00:07:10.536 --> 00:07:13.880
It's gonna act as our primary key, okay?

100
00:07:13.880 --> 00:07:20.087
We're gonna have our username,
it's gonna be a VARCHAR.

101
00:07:20.087 --> 00:07:25.043
I didn't put the most effort to
thinking about the size of a username,

102
00:07:25.043 --> 00:07:30.175
I just put 50, I'm sure there's
more optimal ways of handling this.

103
00:07:30.175 --> 00:07:34.755
For me, I just put 50 here, and
it's gonna be fine, I'm gonna make sure

104
00:07:34.755 --> 00:07:39.557
this is unique and not null, meaning
every entry in the user's SQL database is

105
00:07:39.557 --> 00:07:44.532
going to have to have a username and that
user cannot be a copy of someone else's.

106
00:07:44.532 --> 00:07:49.354
We're also gonna have
another field called email,

107
00:07:49.354 --> 00:07:55.832
I'll make this one a bit longer,
VARCHAR(255), oops, okay?

108
00:07:55.832 --> 00:08:00.170
Now we can make this
UNIQUE NOT NULL as well,

109
00:08:00.170 --> 00:08:03.469
here we'll do password_ hash.

110
00:08:03.469 --> 00:08:08.607
So this one's gonna be pretty important,
we are not going to

111
00:08:08.607 --> 00:08:14.275
be storing the actual hash of like,
the actual password, right?

112
00:08:14.275 --> 00:08:16.818
That's not what we're
going to be doing at all,

113
00:08:16.818 --> 00:08:20.180
we're gonna be storing a hash
representation of the password.

114
00:08:20.180 --> 00:08:25.386
I'll show this down the line, we don't
have to worry about this too long or yet,

115
00:08:25.386 --> 00:08:31.348
we'll make this 255
&gt;&gt; Melkey: 255 and

116
00:08:31.348 --> 00:08:34.882
we'll make this not null, okay?

117
00:08:34.882 --> 00:08:37.842
And then here you can just add
any fields you want, right?

118
00:08:37.842 --> 00:08:42.522
This could be just extra fields,
I'm gonna put bio to make this a text,

119
00:08:42.522 --> 00:08:45.803
I'm gonna create a created
underscore at field.

120
00:08:45.803 --> 00:08:49.198
It's gonna be a TIMESTAMP WITH TME ZONE,

121
00:08:49.198 --> 00:08:53.951
I'm gonna put default to
current underscore timestamp,

122
00:08:53.951 --> 00:08:57.645
which is a built-in function for Postgres.

123
00:09:02.351 --> 00:09:07.442
And I'm gonna also have an updated_at,
which can be the same thing,

124
00:09:07.442 --> 00:09:11.512
TIMESTAMP WITH TME ZONE,
DEFAULT CURRENT TIMESTAMP.

125
00:09:14.815 --> 00:09:18.600
&gt;&gt; Melkey: When you do that, make sure to
end the statement, so StatementEnd for

126
00:09:18.600 --> 00:09:22.129
goose, and basically what that
blog does is when we run goose up,

127
00:09:22.129 --> 00:09:25.977
this is going to be the SQL that gets
run depending on the version of goose

128
00:09:25.977 --> 00:09:27.929
that we're currently running at.

129
00:09:27.929 --> 00:09:32.523
And with every up command,
we just also need a goose down command, so

130
00:09:32.523 --> 00:09:38.170
we'll do goose down, we'll do +goose
StatementBegin, and this is pretty easy.

131
00:09:38.170 --> 00:09:43.163
We just do DROP TABLE users because if you
think about it, this is the role before

132
00:09:43.163 --> 00:09:48.617
the users table exist and when we go back
to it whatever that looks like, okay?

133
00:09:48.617 --> 00:09:53.396
And here we'll do +goose StatementEnd,
cool, now,

134
00:09:53.396 --> 00:09:57.571
what I'd like you to do is go ahead and
copy this.

135
00:09:57.571 --> 00:10:02.097
I'm gonna make a new file,
it's gonna be 00002, and

136
00:10:02.097 --> 00:10:06.272
this is gonna be called workouts,
so workouts.sql.

137
00:10:06.272 --> 00:10:09.822
Go ahead and just paste this because
we're gonna repeat a lot of stuff,

138
00:10:09.822 --> 00:10:12.795
and it doesn't make sense to
just copy the same thing over.

139
00:10:12.795 --> 00:10:17.184
So goose up, goose down begins to
be the same thing, create table,

140
00:10:17.184 --> 00:10:19.728
if not exist, not users but workouts.

141
00:10:19.728 --> 00:10:24.206
The ID is still gonna be
a big serial primary key.

142
00:10:24.206 --> 00:10:29.082
Now, this whole project is allowing
users to create workouts, so

143
00:10:29.082 --> 00:10:32.827
if you've ever worked
with relational database,

144
00:10:32.827 --> 00:10:35.888
a workout has to be
tied back to that user.

145
00:10:35.888 --> 00:10:40.653
Here's the thing, I'm gonna make this not
obvious, we're gonna ignore that for now.

146
00:10:40.653 --> 00:10:44.635
The reason why is because I wanna focus
on first getting everything working with

147
00:10:44.635 --> 00:10:47.548
workouts, and
then we're gonna introduce the user, and

148
00:10:47.548 --> 00:10:50.115
then we can tie it back
into users owning workouts.

149
00:10:50.115 --> 00:10:53.920
So for right now, we're gonna make
a mental little note of a comment,

150
00:10:53.920 --> 00:10:55.869
I'm gonna put user underscore ID.

151
00:10:59.934 --> 00:11:03.139
&gt;&gt; Melkey: Our workout
is gonna have a title,

152
00:11:03.139 --> 00:11:07.561
which would be VARCHAR(255), NOT NULL,

153
00:11:07.561 --> 00:11:13.207
we're gonna have a description,
which is going to be text.

154
00:11:13.207 --> 00:11:17.286
We're also gonna have a duration_minutes,

155
00:11:17.286 --> 00:11:21.051
which are going to be INTEGER NOT NULL,
and

156
00:11:21.051 --> 00:11:26.396
we're gonna have one more
field called calories_burned.

157
00:11:26.396 --> 00:11:31.386
And this is also gonna be an INTEGER, and
we don't care if this is null, and then

158
00:11:31.386 --> 00:11:36.392
you can go ahead and remove the username,
email, password hash and biofuels.

159
00:11:36.392 --> 00:11:41.836
So double check that your end
result looks something like this.

160
00:11:41.836 --> 00:11:46.463
&gt;&gt; Melkey: You should have a workouts
table ID, the commented out user ID,

161
00:11:46.463 --> 00:11:51.262
title, description, duration minutes,
calories burned, and

162
00:11:51.262 --> 00:11:55.086
then the created and updated at timestamps
&gt;&gt; Speaker 2: You wanna

163
00:11:55.086 --> 00:11:57.623
drop workouts instead of users?

164
00:11:57.623 --> 00:11:59.422
&gt;&gt; Melkey: Yeah, we're gonna drop workouts

165
00:12:08.263 --> 00:12:08.822
&gt;&gt; Melkey: Okay,

166
00:12:08.822 --> 00:12:12.086
let's do that one more time, go ahead and

167
00:12:12.086 --> 00:12:17.215
go to the top of your file,
copy everything, and in migrations,

168
00:12:17.215 --> 00:12:21.692
we're gonna make our last SQL file,
have four zeros, so

169
00:12:21.692 --> 00:12:26.958
00003, and this one can be
called workout_entries.sql.

170
00:12:30.911 --> 00:12:32.587
&gt;&gt; Melkey: Just paste this here, and

171
00:12:32.587 --> 00:12:37.699
I'm gonna explain the dynamic here of
what a workout entry is versus a workout.

172
00:12:37.699 --> 00:12:43.556
So a workout is going to be an umbrella,
high level description of the workout.

173
00:12:43.556 --> 00:12:47.367
It's gonna have the title, duration and
things of that nature, but

174
00:12:47.367 --> 00:12:50.269
a workout could have many
different workouts in it.

175
00:12:50.269 --> 00:12:53.295
Someone could be doing leg day,
could be the title of the workout,

176
00:12:53.295 --> 00:12:57.024
but then they could be squatting, they
could be lunging, they could be running,

177
00:12:57.024 --> 00:13:00.236
they could do calf raises,
they could do all these different things.

178
00:13:00.236 --> 00:13:03.689
And each of those is going to be
an individual workout entry, so

179
00:13:03.689 --> 00:13:08.333
from a schema perspective, we're gonna
have a one-to-many relationship here.

180
00:13:08.333 --> 00:13:11.719
One workout can have many
workout entries to them, right?

181
00:13:11.719 --> 00:13:15.203
&gt;&gt; Melkey: And all those workout entries
are gonna have only one relationship back

182
00:13:15.203 --> 00:13:15.907
to a workout.

183
00:13:18.544 --> 00:13:19.352
&gt;&gt; Melkey: Okay?

184
00:13:19.352 --> 00:13:23.992
So with that being said,
CREATE TABLE IF NOT EXIST,

185
00:13:23.992 --> 00:13:28.534
instead of workout is
gonna be workout_entries.

186
00:13:28.534 --> 00:13:36.064
It's gonna make some space here, the ID is
still going to be big, serial primary key.

187
00:13:36.064 --> 00:13:39.488
We're gonna have a new
field called workout ID,

188
00:13:39.488 --> 00:13:42.087
it's gonna be big hint, all right?

189
00:13:42.087 --> 00:13:47.096
Not null, and going to references,
I'm gonna pass in our

190
00:13:47.096 --> 00:13:51.916
workouts table like so, and
the value is going to be ID.

191
00:13:51.916 --> 00:13:56.263
So the work at ID here references
the ID of our workout, and

192
00:13:56.263 --> 00:14:01.323
we're gonna do ON DELETE CASCADE,
meaning if we delete the workout

193
00:14:01.323 --> 00:14:06.294
from the workouts table,
all of the worker entries that are binded

194
00:14:06.294 --> 00:14:10.599
to it via this relationship
will also be deleted, okay?

195
00:14:10.599 --> 00:14:14.348
Next field we're gonna
have is the exercise name,

196
00:14:14.348 --> 00:14:17.060
this would be a VARCHAR(255).

197
00:14:17.060 --> 00:14:22.572
Make sure this is not null,
and we'll have sets,

198
00:14:22.572 --> 00:14:26.517
this will be an integer, not null.

199
00:14:26.517 --> 00:14:31.716
We'll have reps,
make sure this is an integer.

200
00:14:31.716 --> 00:14:38.308
Okay, we'll have duration, underscore,
seconds, we'll make this also an integer.

201
00:14:41.895 --> 00:14:44.386
&gt;&gt; Melkey: [INAUDIBLE] I have weight for
the individual workout,

202
00:14:44.386 --> 00:14:45.998
we'll make this a decimal value.

203
00:14:50.349 --> 00:14:53.834
&gt;&gt; Melkey: We'll add an optional field for
notes, this could be also a text, so

204
00:14:53.834 --> 00:14:58.039
if anyone has like PR, or personal record
or, I mean, personal dash, whatever,

205
00:14:58.039 --> 00:14:59.921
they can add into the notes section.

206
00:14:59.921 --> 00:15:03.520
And then another field that's
gonna be crucial is order index,

207
00:15:03.520 --> 00:15:08.121
this is because if somebody has a workout
with five different workout entries, we

208
00:15:08.121 --> 00:15:12.807
want these to be ordered to mimic exactly
what that user did in the workout, right?

209
00:15:12.807 --> 00:15:17.152
If you submit a form with all those
entries, we wanna adhere to that and

210
00:15:17.152 --> 00:15:19.006
not just jumble them around.

211
00:15:19.006 --> 00:15:26.463
I'll make this INTEGER NOT NULL, then go
ahead and copy that created at timestamp.

212
00:15:26.463 --> 00:15:31.445
So at this point, your SQL table
should look similar to this, so

213
00:15:31.445 --> 00:15:37.093
we can ignore the goose down for now,
let's save that to the end, okay?

214
00:15:37.093 --> 00:15:41.214
I think this is cool,
we're gonna add a constraint,

215
00:15:41.214 --> 00:15:43.879
I'm just gonna add a constraint.

216
00:15:43.879 --> 00:15:48.132
Oops, make sure, expel the right
constraint on our Postgres,

217
00:15:48.132 --> 00:15:53.041
I'm gonna call this valid_workout_entry
and this is gonna be a check.

218
00:15:53.041 --> 00:15:59.621
And in this check, we wanna make sure that
if somebody submits a work at entry, this

219
00:15:59.621 --> 00:16:05.648
could either be them lifting or running or
doing some non lifting exercise.

220
00:16:05.648 --> 00:16:10.348
So for example,
if you're going to be bench pressing,

221
00:16:10.348 --> 00:16:14.051
that's have reps, right reps and weight.

222
00:16:14.051 --> 00:16:17.816
If you're gonna be running, though,
you can't really rep running, but

223
00:16:17.816 --> 00:16:20.703
you can do duration,
you can tell us how long you ran for.

224
00:16:20.703 --> 00:16:24.049
So we're gonna make sure that
there's a constraint and

225
00:16:24.049 --> 00:16:27.250
not a workout entry can have
both of these fields, and

226
00:16:27.250 --> 00:16:30.822
every workout entry must have
at least one of these fields.

227
00:16:30.822 --> 00:16:37.186
So how that looks like is,
reps IS NOT NULL OR

228
00:16:37.186 --> 00:16:42.346
duration_ second IS NOT NULL, and

229
00:16:42.346 --> 00:16:48.022
we'll make another constraint here,

230
00:16:48.022 --> 00:16:54.218
REPS IS NULL OR duration_second IS NULL.

