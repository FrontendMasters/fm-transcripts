WEBVTT

1
00:00:00.278 --> 00:00:03.081
&gt;&gt; Melkey: For loops and
go, are relatively simple.

2
00:00:03.081 --> 00:00:07.469
I would say, there's a few gushes here,
but we can use the for keyword.

3
00:00:07.469 --> 00:00:10.469
So I'm gonna show you one
way to create a for loop.

4
00:00:10.469 --> 00:00:15.175
We can use the for keyword, and then
we're gonna create a variable in scope I.

5
00:00:15.175 --> 00:00:19.431
I'm gonna set I to 0, and
then it's going to be the condition of I,

6
00:00:19.431 --> 00:00:22.363
which will be evaluating
on every iteration.

7
00:00:22.363 --> 00:00:26.532
Say so, while i is less than 5
could be a way of phrasing this and

8
00:00:26.532 --> 00:00:27.961
then the increment.

9
00:00:27.961 --> 00:00:32.753
So, we wanna increase I per
iteration in the for loop, okay?

10
00:00:32.753 --> 00:00:40.997
And here, we can just say format
print line say this is I, okay?

11
00:00:40.997 --> 00:00:44.318
So if I run this, you can see
we have this is I 0, 1, 2, 3, 4.

12
00:00:48.438 --> 00:00:50.619
&gt;&gt; Melkey: We do have a recommendation
from the compiler to change this.

13
00:00:50.619 --> 00:00:51.765
We're gonna ignore this for now.

14
00:00:51.765 --> 00:00:56.695
We will look into this,
but I just wanna show kind

15
00:00:56.695 --> 00:01:01.038
of all the states of a for
loop, I suppose.

16
00:01:01.038 --> 00:01:05.821
While loops, I'm assuming everyone is
aware of the while loop they've used

17
00:01:05.821 --> 00:01:08.102
while loop probably like a keyword,

18
00:01:08.102 --> 00:01:11.804
while something like Python I
think has the while keyword.

19
00:01:11.804 --> 00:01:14.673
I think, maybe I'm wrong, but
typically language may have a while loop.

20
00:01:14.673 --> 00:01:18.447
So Go doesn't have a while keyword,
this does not exist.

21
00:01:18.447 --> 00:01:22.727
To do a while loop and Go,
it's simply a for loop, okay?

22
00:01:22.727 --> 00:01:25.145
So let's say we have this
variable called counter.

23
00:01:25.145 --> 00:01:28.420
We can set counter to 0,
and then for a while loop.

24
00:01:28.420 --> 00:01:30.900
It's simply just for counter and,

25
00:01:30.900 --> 00:01:34.132
essentially the condition
of the while loop.

26
00:01:34.132 --> 00:01:37.410
So, this basically saying while counter,
less than 3.

27
00:01:37.410 --> 00:01:40.567
So we just use the for loop instead.

28
00:01:40.567 --> 00:01:44.613
Now, careful if you run this like so,
you can have an infinite loop.

29
00:01:44.613 --> 00:01:49.113
So always add the conditions we can
do counter ++ which will increment

30
00:01:49.113 --> 00:01:52.422
our counter to make sure it
adhere to the while loop.

31
00:01:52.422 --> 00:01:57.161
And if you want you can do fmt.Println(
"this is the counter") to visualize

32
00:01:57.161 --> 00:01:58.021
what that is.

33
00:01:58.021 --> 00:02:00.438
You don't have to do this,
am gonna write here.

34
00:02:00.438 --> 00:02:04.050
You can see we have our first loop,
this is the for loop right here.

35
00:02:04.050 --> 00:02:06.942
And then we have the while loop down here.

36
00:02:06.942 --> 00:02:10.174
In go, this is also valid just this.

37
00:02:10.174 --> 00:02:12.703
If you just put a for
loop like this this is going to work.

38
00:02:12.703 --> 00:02:16.084
This is an infinite loop,
this is an explicit infinite loop.

39
00:02:16.084 --> 00:02:20.292
It's designed for
the case where you need one.

40
00:02:20.292 --> 00:02:23.490
I say that loosely because you'd
want to have a break, right?

41
00:02:23.490 --> 00:02:26.194
You typically have this
infinite loop running, running,

42
00:02:26.194 --> 00:02:29.652
running until some condition is met, and
then you have break to break the for

43
00:02:29.652 --> 00:02:32.699
loop cuz you don't want something to run,
I guess, infinitely.

44
00:02:32.699 --> 00:02:36.223
Maybe in some cases you do, but
this is how you do an infinite loop.

45
00:02:36.223 --> 00:02:41.132
So, for this, again, simple,
similar to the counter up above,

46
00:02:41.132 --> 00:02:43.248
you can do iterations=0.

47
00:02:43.248 --> 00:02:44.720
Put that into the for loop.

48
00:02:44.720 --> 00:02:50.080
You can say if iterations
is greater than 3,

49
00:02:50.080 --> 00:02:52.768
we can break, right?

50
00:02:52.768 --> 00:02:56.601
And then right here,
we can just put iterations plus plus and

51
00:02:56.601 --> 00:02:58.113
we can print it as well.

52
00:02:58.113 --> 00:03:01.463
So that's gonna be a way for
us to use infinite for

53
00:03:01.463 --> 00:03:05.245
loops without having to
actually brick our computer.

54
00:03:05.245 --> 00:03:09.926
And there's also the continue
keyword as well in for loop.

55
00:03:09.926 --> 00:03:11.539
So we have break, we also have continue.

56
00:03:11.539 --> 00:03:17.475
So if a condition is met,
you can continue through the for loop.

57
00:03:17.475 --> 00:03:21.754
But these are, I would say,
pretty basic interest to looping,

