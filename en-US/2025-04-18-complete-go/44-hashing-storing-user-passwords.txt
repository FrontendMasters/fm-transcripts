[00:00:00]
>> Melkey: But now comes the, how do we deal with their passwords, okay? And there's a very elegant way for us to deal with the password here, okay? First thing is, we have to hash their password. We do not ever wanna see their password store them. A good rule of thumb is, the less data you store, the better it is to maintain your app, the more PII, the more other stuff.

[00:00:26]
Then you have to kind of jump through all these like hoops regulations, and it just makes your job harder and tougher and more prone to attacks. But our case, because we do wanna store user passwords, we're gonna do have to hash these. And so how can we do this?

[00:00:43]
Well, if we go back to our user_store.go file for just a second, you'll notice that our password is its own struct. And we know because a password is its own type or own struct, you can have its own methods, and this is a very powerful thing for us, as we continue to create methods that a hash the passwords.

[00:01:08]
And then when a user logs in, we can use that to see if the password they're passing is the hash is the plain text representation of what we have in our database. So here we can do p, it's gonna type password like so, oops. And the first method we're gonna create is called set.

[00:01:29]
I'm gonna take a plain text password as a string, and it's going to return an error, all right, and if you still kept bcrypt in your import, now's a good time to remove that ignore import. Because here we're gonna do hash error. I'm gonna write bcrypt. You can see it basically only has, if I'm not mistaken, bcrypt only has like a few methods, but we can do generate from password, okay?

[00:01:59]
And reaction transform that plain text password into a slice of bytes. So can do slice byte and we can pass in the plain text password like so. And here would be the hashing algorithm, the salt. So I'm not gonna try to pretend like I'm a security individual. The thing I know is, the higher this value is, the more secure the hashing algorithm will be for hashing the password.

[00:02:28]
However, the longer the compute time it takes to do and process that, the lower it is, the less secure that hash will be, but the faster it is at computing that password represents that hash resentation from plain text, password. I think standard documentation shows 12 as a good middle ground.

[00:02:46]
But again, this is depending on the need, depending on how it is, depending on what compute you have available, you can dial and tune this value accordingly. So here, if err does not equal to nil, we can, you can just return that error like so. Otherwise, when you p.plain text is going to be plain text password and p.hash is gonna be the hash like this and then we can return no.

[00:03:17]
So we have one method to set the hash we have to have another method that compares the hash representation. So if a user is logging in, that hash representation to a plain text that they could be submitting on the format, if you log in, you typically log in with like a username and password.

[00:03:32]
So we wanna make sure that a plain text representation of the password matches the hash for the the hash that we stored in our database. So to do this, let's make another function, p.
>> Melkey: Password. We're gonna call this function matches like so and it's gonna take a plain text password which is gonna be a string and then I'm have a bool and an error like so.

[00:04:02]
We're still going to depend on bcrypt, so we can create this error. I'm gonna do bcrypt, compare, hash and password. So here we're going to p.hash, okay, to again, the byte representation of plain text password like so, oops. If err does not equal to nil, there's actually a few errors that could happen.

[00:04:25]
One is that compare hash and password does throw an error if they mismatch, okay? So in this case, we're gonna add a switch statement.
>> Melkey: And here case errors.
>> Melkey: dot is, okay? So if the error from here from calling bcrypt matches the error from bcrypt and its error, where is it?

[00:04:56]
Mismatched hash and password, okay? So if that's the case, we're gonna return false and nil. Meaning false that the passwords do not match, but there's no true error, okay? They just bcrypt just throws an error if it doesn't matches, okay? Otherwise, we're gonna have our default case. So if there is still, if error does not equal to nil and it's not error is the ErrMismatchedHashAndPassword error, what we're gonna do is default return false and error, okay?

[00:05:30]
So this is something like an internal server error, right, internal server error. Like something's going on.
>> Melkey: Otherwise, if everything is great, we can return true and no. Now if we go back to our user handler, and we are underneath this part with how to deal with their passwords, we can now make use of those password functions we just created.

[00:05:57]
So here we can do error. You can hit user.PasswordHash.Set, okay? We can put in request.Password like so. Next, let's check the error. So if error does not equal to nil, what we can do is h.Logger, and we can just do PrintF not fatal. We can do error.
>> Melkey: You can say hashing password, again, this is going to be for us so modulo V error, whereas we'll respond to our client.

[00:06:35]
We can use utils.WriteJSON w, we can do http.StatusInternalServerError, okay? And this part gets kind of dicey, because, like I showed you earlier, well, if we're setting this not a problem, but for when we do matches, you don't wanna tell a potential bad actor, like a fraud. Actually try to hack an account that that combination of username exists and the passwords wrong, right?

[00:07:07]
Then they know, okay, so there's actually a user with that username or email in your database, I just have to crack the password. So again, my expertise is definitely not security or how to handle that. I'll refer to some experts to give the best suggestions. But when you do respond to your client, you don't explicitly say, hey, pastor is not correct.

[00:07:29]
You just kind of give a broad statement, say, we can't match the two combinations of using our password, for example, right? But again, I'll refer to experts in the field on what they suggest for handling that. But in this case, because we know we are just setting the password, we know that we can do error, internal server error, and we can just return.

[00:07:58]

>> Melkey: All right, now, with all that being done, can finally call the function that creates the user. So here we can do error, we can call h.userStore, create user, and we can pass in that user like so. If error does not equal to nil, go ahead and just copy the logger and the right JSON with the return.

[00:08:25]
So instead of hashing password, we can make registering user, notice type up here.
>> Melkey: And you can keep it like that.
>> Melkey: And while you copy that down, we're gonna do that. If there is no error, we're able to successfully create the user. We can do whttpStatusOK. And we can also send back utils.Envelope.

[00:08:54]
We can say user and bring that user like so. And actually, it's not StatusOK, StatusCreated is the more appropriate status response here. We did the database layer. We did the API layer. We just have to do one last layer, which is the easiest, and that's routing it across our application, which we know how to do.

[00:09:14]
We first should start in the app.go, like so. And now, since we've introduced a new store, we can go all the way up here, okay? Let's first create the new UserHandler api.UserHandler like so, and then right here we can do UserStore, store.NewPostgresUserStore past pgDB and in here UserHandler api.NewUseHandler will pass in the userStore and the logger like so.

[00:09:56]
And it underneath the UserHandler will pass in the userHandler. Last thing we got to do is go into our routes, and let's do r.Post. This gonna be /users. And here app.UserHandler.Handle.RegisterUser, all right? So now we have fully connected everything again. We do this one much faster. We've connected our user database to our user API, across our app, through our routes.

[00:10:25]
Only thing left is to test it, so we have this HandleRegisterUser go to your running go server. You can nuke that. Run, Go, run main.go, see if you have any obvious errors. I do not, that's good. Make sure your docker is still running, okay?
>> Melkey: Check, Select All.

[00:10:49]

>> Melkey: Okay, if you have that issue, you can just, I'm just double checking that it's to confirm I don't have any users in my database. Select all from users. PSQL shows me it is empty. And if I just go back to the post underscore notes.txt. If I go down to section 3.1 right here, I've provided an example payload request for you to copy and paste into your terminal or into your URL application.

[00:11:19]
Or app API, application. So I paste this. You can see here it's curl-x POST, which is the method, localhost:8080/users, the application type, and then the payload, which includes a username, email, password and bio. So click Enter, you can now see we've gotten a response. User id:1, Username, email, bio, created at and updated at.

[00:11:43]
And now if I go to psql and run the exact same command to check if we have a user, you now should see we do, in fact have our username, John Doe, with all of their credentials. And you can notice the password is, in fact hashed.

