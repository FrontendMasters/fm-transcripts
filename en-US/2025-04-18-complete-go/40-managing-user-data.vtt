WEBVTT

1
00:00:00.000 --> 00:00:03.282
&gt;&gt; Melkey: So we just wrapped
up testing on a database layer.

2
00:00:03.282 --> 00:00:08.335
We're gonna quickly shift gears to
user and authentication methods,

3
00:00:08.335 --> 00:00:12.796
and we're going to kind of explore
how that's going to look for

4
00:00:12.796 --> 00:00:14.917
a Go back-end application.

5
00:00:14.917 --> 00:00:19.255
So the first thing is, this time, we
actually start from the lowest level and

6
00:00:19.255 --> 00:00:20.208
move our way up.

7
00:00:20.208 --> 00:00:27.367
So we're gonna create a user_store.go file
in the store package we have up here.

8
00:00:30.945 --> 00:00:34.467
&gt;&gt; Melkey: Okay, and in this package
it's going to be responsible for

9
00:00:34.467 --> 00:00:37.431
everything to do with our users and
the database.

10
00:00:37.431 --> 00:00:40.528
Now, like I've said before,
every time you open a new file,

11
00:00:40.528 --> 00:00:43.579
you're gonna ask yourself,
is it gonna hold data, right?

12
00:00:43.579 --> 00:00:45.560
The answer is, yes,
there's gonna be user data.

13
00:00:45.560 --> 00:00:46.899
How are gonna handle that user data?

14
00:00:46.899 --> 00:00:48.876
What are we gonna do with that user data?

15
00:00:48.876 --> 00:00:53.040
So with that, we can go ahead and
create our very first user struct.

16
00:00:53.040 --> 00:00:57.012
So here we're to type user,
there's going to be a struct, like so.

17
00:00:57.012 --> 00:01:02.199
It's gonna have an ID of int,
json:"id", right?

18
00:01:02.199 --> 00:01:04.448
It's gonna have our username string.

19
00:01:07.749 --> 00:01:09.988
&gt;&gt; Melkey: Username, email.

20
00:01:16.432 --> 00:01:17.572
&gt;&gt; Melkey: Email like so.

21
00:01:17.572 --> 00:01:21.836
We're gonna have,
our next part is the password_hash.

22
00:01:21.836 --> 00:01:26.232
All right, now, password_hash
isn't going to be a string, but

23
00:01:26.232 --> 00:01:29.462
I'm gonna leave it as a string right now,
okay?

24
00:01:29.462 --> 00:01:31.035
You'll see why in just a second.

25
00:01:31.035 --> 00:01:34.123
And then here we're actually going
to omit anything in the JSON field.

26
00:01:34.123 --> 00:01:38.661
And what this dash does, basically says,
no matter what we encode,

27
00:01:38.661 --> 00:01:43.139
decode, or write, we are going to
ignore the value in this struct.

28
00:01:43.139 --> 00:01:48.360
Just so it completely voting passed
from our end to the client end, okay?

29
00:01:48.360 --> 00:01:55.271
Next, we're gonna have our bio to
be a string, can do bio like so.

30
00:01:55.271 --> 00:02:00.880
And then we can add the other fields,
as well as create at,

31
00:02:00.880 --> 00:02:04.554
which will be of a type time, .time.

32
00:02:04.554 --> 00:02:10.219
Okay, so import the time package,
new JSON created at like this.

33
00:02:10.219 --> 00:02:14.374
You can go ahead and copy and
paste this to make updated at.

34
00:02:20.162 --> 00:02:23.681
&gt;&gt; Melkey: And another field we are very
interested in is the Postgres struck,

35
00:02:23.681 --> 00:02:26.163
that will handle
the database communication.

36
00:02:26.163 --> 00:02:30.067
So we can do type PostgresUserStore,

37
00:02:30.067 --> 00:02:33.849
in itself is going to be a struck, and

38
00:02:33.849 --> 00:02:39.832
this struck is going to have a field for
sql.db, like so.

39
00:02:39.832 --> 00:02:41.857
Import DB.

40
00:02:52.966 --> 00:02:56.411
&gt;&gt; Melkey: All right, and with our struct,
let's make a new constructor.

41
00:02:56.411 --> 00:03:02.383
So we can do func NewPostgresUserStore.

42
00:03:02.383 --> 00:03:07.643
Okay, this is gonna take one argument,
which would be DB, pointer to SQL DB,

43
00:03:07.643 --> 00:03:11.647
and it's going to return
a pointer to PostgresUserStore.

44
00:03:11.647 --> 00:03:14.920
I'm gonna return this, like this.

45
00:03:14.920 --> 00:03:18.753
I'm going to say, oops, not like that.

46
00:03:18.753 --> 00:03:24.970
Return PostgresUserStore,
put db as db, all right?

47
00:03:24.970 --> 00:03:29.003
So pretty fundamentally,
the thing we've seen before,

48
00:03:29.003 --> 00:03:33.708
the structs, the constructors,
and the Postgres struct as well.

49
00:03:33.708 --> 00:03:37.296
And with that, let's go ahead and
create the interface.

50
00:03:37.296 --> 00:03:42.293
So type, we'll say, UserStore.

51
00:03:42.293 --> 00:03:44.926
It's going to be an interface.

52
00:03:44.926 --> 00:03:46.891
And this interface is
gonna have three methods.

53
00:03:46.891 --> 00:03:49.547
One's going to be create user.

54
00:03:49.547 --> 00:03:54.897
It's going to take a type of
user to return with an error,

55
00:03:54.897 --> 00:03:57.802
and have GetUser by user name.

56
00:03:57.802 --> 00:04:01.182
It's gonna take a username as a string.

57
00:04:01.182 --> 00:04:05.186
It's gonna turn a pointer to user and
an error.

58
00:04:05.186 --> 00:04:09.114
And last is gonna be UpdateUser(), okay?

59
00:04:09.114 --> 00:04:14.121
And this is going to take a pointer
to a user and respond with an error.

60
00:04:14.121 --> 00:04:18.446
Now, before we continue,
I wanna bring in another package,

61
00:04:18.446 --> 00:04:22.704
it's gonna help us kind of,
handle hashing the passwords.

62
00:04:22.704 --> 00:04:27.394
So here if you open up your terminal and
you go get bcrypt,

63
00:04:27.394 --> 00:04:33.874
this is not from GitHub, so
let's go get golang.org/x/crypto/bcrypt.

64
00:04:40.958 --> 00:04:43.085
&gt;&gt; Melkey: Okay,
should install without any problems.

65
00:04:43.085 --> 00:04:48.802
[COUGH] Let's go ahead and
bring in bcrypt into our project.

66
00:04:48.802 --> 00:04:58.150
So it's again,
golang.org/x/crypto/bcrypt, okay?

67
00:04:58.150 --> 00:05:01.774
Input not used, this always a decent sign.

68
00:05:01.774 --> 00:05:04.524
And now we're going to
actually handle the password,

69
00:05:04.524 --> 00:05:07.103
cuz right now it's a string,
we don't want this.

70
00:05:07.103 --> 00:05:09.908
I actually want my password
to be its own struct.

71
00:05:09.908 --> 00:05:14.853
So here I'm gonna define password
lower capitalization, so lowercase.

72
00:05:14.853 --> 00:05:16.657
It's gonna be a struct.

73
00:05:16.657 --> 00:05:19.109
It's gonna have a plain text.

74
00:05:19.109 --> 00:05:20.906
Okay, I should type it like this.

75
00:05:20.906 --> 00:05:22.295
It's gonna be a pointer to a string.

76
00:05:22.295 --> 00:05:26.379
And I'm gonna have the hash,
which is going to be a slice of bytes.

77
00:05:29.572 --> 00:05:30.249
&gt;&gt; Melkey: Okay, so

78
00:05:30.249 --> 00:05:35.011
then we can replace password hash
from a string to a password type.

79
00:05:35.011 --> 00:05:37.607
So we're gonna do some
nested structs here.

80
00:05:38.982 --> 00:05:40.725
&gt;&gt; Melkey: I'm gonna leave this for
right now.

81
00:05:40.725 --> 00:05:43.224
So we can actually go back,
if the compiler is annoying you,

82
00:05:43.224 --> 00:05:45.882
put a little underscore there,
cuz we will come back to bcrypt.

83
00:05:45.882 --> 00:05:48.101
I just wanna put a pin on this for
right now.

