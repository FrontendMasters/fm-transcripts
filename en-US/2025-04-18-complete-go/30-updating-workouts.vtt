WEBVTT

1
00:00:00.000 --> 00:00:03.624
&gt;&gt; Melkey: I figured since we're
already in the workout store,

2
00:00:03.624 --> 00:00:07.729
let's just create the update
workout function as well, and

3
00:00:07.729 --> 00:00:12.334
then we can scaffold both of those
into the workout handler, okay?

4
00:00:12.334 --> 00:00:16.918
So right underneath the get workout
by ID function, we just created,

5
00:00:16.918 --> 00:00:22.438
we're gonna create our news function,
func pg is gonna be PostgresWorkoutStore,

6
00:00:22.438 --> 00:00:25.645
and this can be called UpdateWorkout,
like so.

7
00:00:25.645 --> 00:00:29.866
It's gonna take one argument, which gonna
be a workout, which can be a pointer

8
00:00:29.866 --> 00:00:34.158
to our workout, and it's gonna return our
error or a error, which could be nil.

9
00:00:34.158 --> 00:00:39.777
Now, updating a workout requires us
to go into two different tables,

10
00:00:39.777 --> 00:00:44.741
and if we update one part of the workout,
something happens.

11
00:00:44.741 --> 00:00:48.415
We don't want that, we wanna adhere
to the asset principle and databases.

12
00:00:48.415 --> 00:00:52.060
So because of that, we're gonna
again create our transaction here,

13
00:00:52.060 --> 00:00:53.866
like we did in the create workout.

14
00:00:53.866 --> 00:00:57.716
So here, let's go ahead and create our
transaction variable and an error.

15
00:00:57.716 --> 00:01:02.761
We can say pg.db and
we can say Begin like so.

16
00:01:02.761 --> 00:01:06.437
We can quickly check for the error
if our error does not equal to nil,

17
00:01:06.437 --> 00:01:08.125
we can just return that error.

18
00:01:08.125 --> 00:01:12.647
And like we did above,
we can just defer any rollbacks, so

19
00:01:12.647 --> 00:01:15.432
transaction not Rollback like so.

20
00:01:15.432 --> 00:01:19.647
All right, so now once that is defined,
we can go ahead and

21
00:01:19.647 --> 00:01:23.620
start creating the queries for
updating our workout.

22
00:01:23.620 --> 00:01:26.443
So here I'm gonna just
create the Query here.

23
00:01:30.372 --> 00:01:33.161
&gt;&gt; Melkey: Okay, and
this is gonna be fairly simple,

24
00:01:33.161 --> 00:01:36.033
we're gonna do update the workouts table.

25
00:01:36.033 --> 00:01:41.724
I'm gonna Set the title to value 1,

26
00:01:41.724 --> 00:01:45.763
description to value 2,

27
00:01:45.763 --> 00:01:50.904
duration_minutes to value 3,

28
00:01:50.904 --> 00:01:57.523
and calories burned to value 4, like so.

29
00:01:57.523 --> 00:02:01.880
Where the id is going to be value 5, okay?

30
00:02:01.880 --> 00:02:07.340
So now this query when we call it expects
five variables that we will parse in,

31
00:02:07.340 --> 00:02:07.851
okay?

32
00:02:07.851 --> 00:02:08.853
And luckily for

33
00:02:08.853 --> 00:02:13.871
us these all exist into the argument we
parsed in which is the workout, okay?

34
00:02:13.871 --> 00:02:17.395
And just like we did before,
we are going to now call this query,

35
00:02:17.395 --> 00:02:20.543
we're gonna first create
a results variable and error.

36
00:02:20.543 --> 00:02:25.052
And this is gonna be tx.Exec,
like so, parse in the query and

37
00:02:25.052 --> 00:02:29.496
then the five functions it
expects in the order they appear.

38
00:02:29.496 --> 00:02:35.493
So workout.Title, workout.Description,
workout.DurationMinutes.

39
00:02:39.003 --> 00:02:41.879
&gt;&gt; Melkey: Workout.CaloriesBurned, okay?

40
00:02:41.879 --> 00:02:47.587
And the last one which needs to forget,
workout.ID.

41
00:02:47.587 --> 00:02:51.135
With that, always check the error,
so if error does not equal to nil,

42
00:02:51.135 --> 00:02:53.371
let's go ahead and just return that error.

43
00:02:53.371 --> 00:02:57.652
And now what we wanna do, if there's
no error, we would like to know,

44
00:02:57.652 --> 00:02:58.608
did this work?

45
00:02:58.608 --> 00:03:02.494
Cuz again, you could update something
technically that doesn't exist.

46
00:03:02.494 --> 00:03:06.477
It's not gonna error out, but the query
can just say, yeah, nothing was updated.

47
00:03:06.477 --> 00:03:10.492
So we wanna know how many rows were
affected through this operation.

48
00:03:10.492 --> 00:03:13.034
It can do something like rows affected,
okay?

49
00:03:13.034 --> 00:03:18.587
Err, is going to be result dot this nifty
little function called RowsAffected,

50
00:03:18.587 --> 00:03:24.240
which returns the number of rows affected
by update, insert, or delete, okay?

51
00:03:24.240 --> 00:03:28.107
Little comment there, not every database
or driving may support this, Postgres and

52
00:03:28.107 --> 00:03:29.514
PGX does indeed support this.

53
00:03:32.660 --> 00:03:34.719
&gt;&gt; Melkey: All right, and again,
we can just check some errors.

54
00:03:34.719 --> 00:03:40.724
So if err does not equal to nil,
let's go ahead and return that err.

55
00:03:40.724 --> 00:03:47.204
And then we can check if rowsAffected is
zero, so if rowsAffected is zero like so

56
00:03:47.204 --> 00:03:52.250
we can just return our sql that err,
no rows like we saw above.

57
00:04:00.964 --> 00:04:05.614
&gt;&gt; Melkey: So this point, just like we
did with the with the get, we have only

58
00:04:05.614 --> 00:04:11.808
completed that first portion, the workout
part of our struck, which is a high level.

59
00:04:11.808 --> 00:04:14.288
But now we have to do the entries, okay?

60
00:04:14.288 --> 00:04:18.461
So with entries,
it can get complicated, and

61
00:04:18.461 --> 00:04:22.425
there's two ways someone can handle this.

62
00:04:22.425 --> 00:04:25.089
So you can actually, from the requester,

63
00:04:25.089 --> 00:04:29.234
get the request of the ID of
the individual entry you wanna update,

64
00:04:29.234 --> 00:04:32.652
iterate through it,
find the ID and update it like so.

65
00:04:32.652 --> 00:04:36.912
Or you can do what I'm gonna implement,
which is a full-on patch update.

66
00:04:36.912 --> 00:04:41.722
We're gonna actually delete all
the worker entries as a whole and

67
00:04:41.722 --> 00:04:45.934
then we're gonna reinsert
the workout entries, okay?

68
00:04:45.934 --> 00:04:49.972
So this seems like a bit of a small
potentially, but what we're going to do is

69
00:04:49.972 --> 00:04:53.901
in the caller, we're gonna first get
the workouts which we saw earlier.

70
00:04:53.901 --> 00:04:57.736
We're gonna have all the workout entries,
and then we're gonna match the request

71
00:04:57.736 --> 00:05:01.483
from our client to see if there's any
differences for fields they wanna update.

72
00:05:01.483 --> 00:05:06.430
And I'm gonna send all of
that into this function here.

73
00:05:06.430 --> 00:05:09.586
Okay, and we can, you can do both,
both are fairly effective,

74
00:05:09.586 --> 00:05:11.462
this one is just easier to implement.

75
00:05:11.462 --> 00:05:15.348
This one's easier to implement, but
potentially more at fault for things to

76
00:05:15.348 --> 00:05:19.592
go wrong, whereas the other solution,
where you iterate through work at entries,

77
00:05:19.592 --> 00:05:23.570
parse them by ID, make that ID, something
that you request from your client.

78
00:05:23.570 --> 00:05:26.489
Maybe it's a little bit more complicated,
but a little bit more secure.

79
00:05:26.489 --> 00:05:30.097
So I'll leave it up to you if
you wanna change it up, but

80
00:05:30.097 --> 00:05:33.871
we'll have a working solution
here with this approach.

81
00:05:33.871 --> 00:05:37.097
So we can start this by just
declaring a new error and

82
00:05:37.097 --> 00:05:39.805
using the transaction Exec one more time.

83
00:05:39.805 --> 00:05:43.460
I'm gonna build this query in line,
so use the backticks.

84
00:05:43.460 --> 00:05:50.176
We're gonna simply just write
DELETE FROM workout_entries

85
00:05:50.176 --> 00:05:55.342
WHERE workout_id equals the first value,
and

86
00:05:55.342 --> 00:06:01.034
that value can pass in
right away with workout.ID.

87
00:06:01.034 --> 00:06:03.876
We're getting yelled at that no new
variables exist on the left side.

88
00:06:03.876 --> 00:06:08.944
So if you're getting this, just remove
this local of the walrus operator.

89
00:06:08.944 --> 00:06:12.322
All right, let's check that err,

90
00:06:12.322 --> 00:06:18.073
if err does not equal to nil,
you just simply return the err.

91
00:06:18.073 --> 00:06:22.488
Otherwise, we can iterate through
the workout entries that we get from our

92
00:06:22.488 --> 00:06:26.639
client call, and then insert those
individually into our database.

93
00:06:26.639 --> 00:06:32.093
So here, we can do entry in range

94
00:06:32.093 --> 00:06:37.347
workout.Entries, like so,

95
00:06:37.347 --> 00:06:41.597
we create our new query.

96
00:06:41.597 --> 00:06:46.996
And this here is gonna be
INSERT INTO workout_entries,

97
00:06:46.996 --> 00:06:52.285
make sure you spell that right,
I keep typing entires.

98
00:06:52.285 --> 00:06:56.743
We can type in all the fields
we wanna insert, so

99
00:06:56.743 --> 00:07:02.101
we can do workout_id,
exercise_name, sets, reps.

100
00:07:02.101 --> 00:07:06.727
The duration in seconds, notes,

101
00:07:06.727 --> 00:07:10.401
and order index, like so.

102
00:07:10.401 --> 00:07:16.003
And again, should be eight values that
we're inserting, so we can do VALUES.

103
00:07:22.217 --> 00:07:27.677
&gt;&gt; Melkey: 3, 4, 5, 6, 7, 8.

104
00:07:27.677 --> 00:07:30.758
And for some people maybe asking
why is it like that money symbol?

105
00:07:30.758 --> 00:07:33.178
That's just Postgres native,
that's how we do it in Postgres,

106
00:07:33.178 --> 00:07:34.902
how you pass variables
via Postgres drivers.

107
00:07:34.902 --> 00:07:40.255
I think in no SQL, it's different,
I forget what it is in other

108
00:07:40.255 --> 00:07:46.023
database drivers, but I know in Postgres,
it is the money symbol.

109
00:07:46.023 --> 00:07:49.436
And I realize I've a typo here, so

110
00:07:49.436 --> 00:07:54.163
make sure that this is VALUES,
oops, like so.

111
00:07:54.163 --> 00:07:59.549
&gt;&gt; Speaker 2: Are you missing a item and
the insert query?

112
00:07:59.549 --> 00:08:05.869
&gt;&gt; Melkey: Let's see, Worker ID, 1,
2, 3, 4, 5, 6, 7, what am I missing?

113
00:08:05.869 --> 00:08:07.456
&gt;&gt; Speaker 2: Wait, I think.

114
00:08:07.456 --> 00:08:09.042
&gt;&gt; Melkey: Yeah, good catch.

115
00:08:11.804 --> 00:08:14.834
&gt;&gt; Melkey: So, duration, seconds,
weight, notes, order, index, yep.

116
00:08:14.834 --> 00:08:18.301
And so,
now that we have the query defined,

117
00:08:18.301 --> 00:08:21.789
we can then execute this with our tx.Exec.

118
00:08:21.789 --> 00:08:25.658
Let's put in query and in the order
at which these variables come in.

119
00:08:25.658 --> 00:08:28.378
So when it was noted
that weight was missing,

120
00:08:28.378 --> 00:08:31.457
I specifically put it after
duration seconds, and

121
00:08:31.457 --> 00:08:35.768
I'm gonna adhere to that when I pass
that variable into the order here.

122
00:08:35.768 --> 00:08:40.410
So I'm just gonna open this up just to
make it a little bit easier to read, okay?

123
00:08:40.410 --> 00:08:44.895
I'm gonna put workout.ID, and

124
00:08:44.895 --> 00:08:49.221
then, entry.ExerciseName,

125
00:08:49.221 --> 00:08:54.354
entry.Sets, entry.Reps, okay?

126
00:08:54.354 --> 00:09:00.726
Entry.DurationSeconds, entry.Weight,
entry.Note.

127
00:09:04.391 --> 00:09:07.870
&gt;&gt; Melkey: And
the last one is entry.OrderIndex.

128
00:09:07.870 --> 00:09:12.343
Okay, we have to just check that err,
so if err does not equal to nil,

129
00:09:12.343 --> 00:09:14.206
let's just return the err.

130
00:09:14.206 --> 00:09:19.151
And then the last compiler error that
we should be getting is that we're not

131
00:09:19.151 --> 00:09:23.482
returning anything, but
we can just simply return tx.Commit.

132
00:09:23.482 --> 00:09:27.884
&gt;&gt; Speaker 3: I guess, to recap, instead
of finding specifically, like two point

133
00:09:27.884 --> 00:09:31.926
the transaction and updating just
that one, just get rid of it.

134
00:09:31.926 --> 00:09:34.124
&gt;&gt; Melkey: Yeah,
this is like a full patch update, so

135
00:09:34.124 --> 00:09:37.924
we're just eliminating all the entries and
we're gonna reinsert them.

136
00:09:37.924 --> 00:09:42.294
And as is,
this puts more emphasis on the API layer.

137
00:09:42.294 --> 00:09:45.144
So we'll see once we hook this
up into our workout handler,

138
00:09:45.144 --> 00:09:47.659
we actually do a get workout
call to get everything.

139
00:09:47.659 --> 00:09:53.132
And then we match if there's any updates
to the entries from our caller's payload,

140
00:09:53.132 --> 00:09:56.153
and then we call this
function to insert them.

141
00:09:56.153 --> 00:10:01.437
&gt;&gt; Speaker 4: One quick question on the
tx.Exec call where you delete, I didn't

142
00:10:01.437 --> 00:10:08.176
really understand why we needed to get rid
of the colon there to get rid of that err?

143
00:10:08.176 --> 00:10:12.686
&gt;&gt; Melkey: So this is a compiler err and
what this is saying so you may be kind of

144
00:10:12.686 --> 00:10:18.595
wondering why this is erroring out like
let's say here it's not right like, right?

145
00:10:18.595 --> 00:10:23.147
Above, so if I were to just remove result
a bunch of things are gonna go red,

146
00:10:23.147 --> 00:10:24.101
just heads up.

147
00:10:24.101 --> 00:10:26.693
If we do this and
I ignore the first response,

148
00:10:26.693 --> 00:10:30.733
we're gonna get the same err here,
no new variables on the left side.

149
00:10:30.733 --> 00:10:36.649
And the reason for that is because
the compiler ignores the first response,

150
00:10:36.649 --> 00:10:40.451
which is this result, and
only cares about err.

151
00:10:40.451 --> 00:10:45.148
But since we've already declared err
way above here for the first time,

152
00:10:45.148 --> 00:10:50.232
the compiler doesn't allow us to redeclare
a new variable with the same name.

153
00:10:50.232 --> 00:10:52.127
We can rewrite err, right?

154
00:10:52.127 --> 00:10:56.192
Like so, so now it's fine, but
we can declare a new variable,

155
00:10:56.192 --> 00:11:01.509
which is what this shorthand form syntax
does, it declares new variables for us.

156
00:11:01.509 --> 00:11:03.820
So if we kinda go all the way back,
we have result.

157
00:11:03.820 --> 00:11:06.804
It's fine here, but at the bottom here,

158
00:11:06.804 --> 00:11:12.179
we don't really care about the result
from this particular delete query,

159
00:11:12.179 --> 00:11:16.701
which is why we can remove the short
form colon operator here and

160
00:11:16.701 --> 00:11:22.181
just rewrite what that error is, or
reassign it, the value from tx.Exec.

161
00:11:22.181 --> 00:11:26.707
&gt;&gt; Speaker 4: Got, so because you have the
result there, it's assigning result and

162
00:11:26.707 --> 00:11:29.883
kind of ignoring the fact
that error was already.

163
00:11:29.883 --> 00:11:32.218
&gt;&gt; Melkey: Exactly because
result is in fact new,

164
00:11:32.218 --> 00:11:36.687
it's going to give us the brand new
variable result and then reassign err.

