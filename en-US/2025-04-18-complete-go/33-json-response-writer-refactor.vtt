WEBVTT

1
00:00:00.000 --> 00:00:05.324
&gt;&gt; Melkey: So at this point in time,
we can actually go to the next section.

2
00:00:05.324 --> 00:00:09.316
But it won't be very good of me to do that
because there's lots of smelly things

3
00:00:09.316 --> 00:00:11.015
happening in a code base, okay.

4
00:00:11.015 --> 00:00:16.004
There's lots of DRI, there's lots of just
nastiness that I want to address now

5
00:00:16.004 --> 00:00:20.323
that we have this opportunity to kind
of go in between this section and

6
00:00:20.323 --> 00:00:23.311
the following one which
is going to be testing.

7
00:00:23.311 --> 00:00:28.594
Now, this particular sub module
section is going to be too long, but

8
00:00:28.594 --> 00:00:34.711
what it will do is it will introduce a new
utils package for us to use, all right.

9
00:00:34.711 --> 00:00:40.184
And this utils package will
do a few things for us.

10
00:00:40.184 --> 00:00:45.692
If you noticed, if you go back,
the JSON getting back looks very ugly.

11
00:00:45.692 --> 00:00:49.069
The JSON get back is just it's not
organized, it doesn't look like pure JSON.

12
00:00:49.069 --> 00:00:51.951
It's no indents, it looks very not nice.

13
00:00:51.951 --> 00:00:54.851
And then another thing is,
in all of our handlers,

14
00:00:54.851 --> 00:00:58.838
we are repeating the read ID parameter
function over three times now.

15
00:00:58.838 --> 00:01:02.791
And I'm actually a person who
isn't super particular DRI,

16
00:01:02.791 --> 00:01:05.360
if you have to do it, go ahead and do it.

17
00:01:05.360 --> 00:01:09.917
But in this case, it makes no sense,
because it's just updated to update in

18
00:01:09.917 --> 00:01:13.642
three different places now,
which is kind of just annoying.

19
00:01:13.642 --> 00:01:16.337
So what we're gonna do now is
gonna create a utils function.

20
00:01:16.337 --> 00:01:21.313
We're gonna address writing JSON in an
easier way, in much more maintainable way.

21
00:01:21.313 --> 00:01:24.116
I'm gonna add a read ID param function,

22
00:01:24.116 --> 00:01:29.069
I'm gonna clean up the handler
specifications that we have right now.

23
00:01:29.069 --> 00:01:32.839
So in the internal folder,
let's go ahead and

24
00:01:32.839 --> 00:01:37.383
make a new folder called utils,
and then within utils,

25
00:01:37.383 --> 00:01:41.754
go ahead and
make a new file called utils.go, okay.

26
00:01:41.754 --> 00:01:46.392
I'm gonna call this package utils, okay.

27
00:01:46.392 --> 00:01:51.614
And the first thing we're going to
create is func writeJSON, like so.

28
00:01:51.614 --> 00:01:54.796
This writeJSON is gonna take
a few arguments, first,

29
00:01:54.796 --> 00:01:56.397
it's gonna be the writer.

30
00:01:56.397 --> 00:02:00.488
So it's gonna be HTTP response writer,
like so.

31
00:02:00.488 --> 00:02:04.627
It's gonna take a status,
which can be a type int and a data type.

32
00:02:04.627 --> 00:02:08.599
Now, it's gonna be a really cool thing
that we're gonna realize how we can

33
00:02:08.599 --> 00:02:10.996
navigate through different types in Go,
but

34
00:02:10.996 --> 00:02:14.421
here we're gonna introduce a new
type called Envelope, okay?

35
00:02:14.421 --> 00:02:19.462
And this Envelope is going
to be a map which takes

36
00:02:19.462 --> 00:02:24.512
a string as key and
then an interface as a value.

37
00:02:24.512 --> 00:02:29.656
It's particularly a naked interface or
empty interface.

38
00:02:29.656 --> 00:02:34.050
Now you may be asking,
why and what does this mean?

39
00:02:34.050 --> 00:02:40.682
Well, the empty interface is goes way
of basically having the any type.

40
00:02:40.682 --> 00:02:43.982
And go does have the actual any type,
I believe now,

41
00:02:43.982 --> 00:02:48.110
I think this was introduced later
on in Go, call it for what it is.

42
00:02:48.110 --> 00:02:49.893
I'm gonna use just the interface type,

43
00:02:49.893 --> 00:02:52.783
I think my editor actually also
recommends to use any sometimes.

44
00:02:52.783 --> 00:02:56.855
But I'm gonna use just this
empty interface, and then here,

45
00:02:56.855 --> 00:02:59.926
data is gonna be of type,
envelope, like so.

46
00:02:59.926 --> 00:03:01.544
And so why does this matter?

47
00:03:01.544 --> 00:03:06.615
Well, now for Ray JSON, we can simply
give it data which is going to be a map,

48
00:03:06.615 --> 00:03:11.214
which is a type envelope with,
let's say the string says error, and

49
00:03:11.214 --> 00:03:16.876
then we can also pass it the error message
or the actual error type, or on successes.

50
00:03:16.876 --> 00:03:19.006
We can say, this is your workout and

51
00:03:19.006 --> 00:03:22.275
pass it the workout struct for
successful creations.

52
00:03:22.275 --> 00:03:27.028
So let's see how that looks, so
here we're gonna just do some variable js,

53
00:03:27.028 --> 00:03:30.094
okay, I'm going to say json.MarshalIndent.

54
00:03:30.094 --> 00:03:35.005
I'm gonna pass in data,
an empty string here, and

55
00:03:35.005 --> 00:03:38.099
then two tabs, or just one tab.

56
00:03:38.099 --> 00:03:44.088
The tabbing means how much you
wanna tab your JSON fields, okay.

57
00:03:44.088 --> 00:03:51.528
If error does not equal to nil,
we can go ahead and return an error.

58
00:03:51.528 --> 00:03:53.030
And that just reminds me,

59
00:03:53.030 --> 00:03:56.527
make sure your right JSON is
returning an error type like so.

60
00:04:01.869 --> 00:04:02.644
&gt;&gt; Melkey: Okay.

61
00:04:02.644 --> 00:04:07.348
We wanna add new lines to the JSON,
so we can do append js, and

62
00:04:07.348 --> 00:04:12.263
we can do single quotes,
forward slash and to break the lines.

63
00:04:15.531 --> 00:04:22.552
&gt;&gt; Melkey: And then here we can just
do W header, we'll set content dash,

64
00:04:22.552 --> 00:04:27.588
type, application, slash JSON, like so,

65
00:04:27.588 --> 00:04:33.435
W dot right header can do
the status that we bring in.

66
00:04:33.435 --> 00:04:37.923
So again, status is an int,

67
00:04:37.923 --> 00:04:41.669
W.rightjs, like so.

68
00:04:41.669 --> 00:04:43.312
And then we can return, no.

69
00:04:43.312 --> 00:04:46.250
And while we're here, let's go ahead and

70
00:04:46.250 --> 00:04:49.361
also create the func
read ID param function.

71
00:04:49.361 --> 00:04:54.732
So this is gonna take
the pointer to HTTP request like

72
00:04:54.732 --> 00:04:59.629
so-and-so, return an int 64 and an error.

73
00:04:59.629 --> 00:05:06.157
And here we'll do ID param is
going to be chi.URLParam,r,

74
00:05:06.157 --> 00:05:10.253
please slug we're extracting is ID.

75
00:05:10.253 --> 00:05:15.073
If ID param is empty,
we can simply do return,

76
00:05:15.073 --> 00:05:20.892
just put any default value as zero and
put errors.new.

77
00:05:20.892 --> 00:05:24.546
We're gonna create our
own error type here,

78
00:05:24.546 --> 00:05:27.630
we can just say invalid ID parameter.

79
00:05:27.630 --> 00:05:33.610
All right, then we can transform this
id param into a base 10 int 64 type,

80
00:05:33.610 --> 00:05:36.191
because right now it is a string.

81
00:05:36.191 --> 00:05:42.241
So we can do string conversion,
parse int we can pass it ID param,

82
00:05:42.241 --> 00:05:45.989
the base 10 into 64 check the error.

83
00:05:45.989 --> 00:05:52.366
If error does not equal to nil,
we can simply just again return zero and

84
00:05:52.366 --> 00:05:56.379
do errors.new invalid ID parameter type.

85
00:06:00.958 --> 00:06:03.801
&gt;&gt; Melkey: And
at the end here is return ID and no.

