WEBVTT

1
00:00:00.000 --> 00:00:03.868
&gt;&gt; Melkey: So with that done, we're
actually gonna introduce another package

2
00:00:03.868 --> 00:00:07.746
into our application, and
this is gonna be the middleware package.

3
00:00:07.746 --> 00:00:12.008
So if we go into internal,
go ahead and just close these down.

4
00:00:12.008 --> 00:00:16.441
Go ahead and
add another folder called middleware, and

5
00:00:16.441 --> 00:00:19.089
then we'll do Middleware.Go.

6
00:00:19.089 --> 00:00:21.118
It will be its own standalone package.

7
00:00:21.118 --> 00:00:25.518
Go ahead and
call this package Middleware, okay?

8
00:00:25.518 --> 00:00:30.107
This is gonna have a type user Middleware.

9
00:00:30.107 --> 00:00:32.472
It's gonna be a struck, okay?

10
00:00:32.472 --> 00:00:37.668
This struct is gonna
have a user store field,

11
00:00:37.668 --> 00:00:44.381
which gonna be a type store user,
store like that, okay?

12
00:00:44.381 --> 00:00:46.494
And then here,
we need to create two new functions.

13
00:00:46.494 --> 00:00:50.949
And these functions are going
to be basically injecting and

14
00:00:50.949 --> 00:00:54.969
extracting values from
the request.body pointer?

15
00:00:54.969 --> 00:00:56.668
So HTTP request, it's a pointer.

16
00:00:56.668 --> 00:00:58.722
Typically, we've seen it and
we've seen that.

17
00:00:58.722 --> 00:01:02.420
We've been able to use
the R.body object from it.

18
00:01:02.420 --> 00:01:06.963
This time, we're gonna be able
to basically interject incoming

19
00:01:06.963 --> 00:01:11.176
requests through that pointer,
using our middleware, and

20
00:01:11.176 --> 00:01:16.646
tell it is the person calling this an
anonymous user or a user who's logged in?

21
00:01:16.646 --> 00:01:18.487
So to do that,
we're gonna create two new functions.

22
00:01:18.487 --> 00:01:21.863
The first one is going to be set user,
okay?

23
00:01:21.863 --> 00:01:23.401
These are not gonna be methods
on the user middleware.

24
00:01:23.401 --> 00:01:27.848
These can just be standalone functions
that exist in the middleware package.

25
00:01:27.848 --> 00:01:30.794
It's gonna take an HTTP request, right?

26
00:01:30.794 --> 00:01:34.291
So that pointer,
cuz we're gonna be modifying it.

27
00:01:34.291 --> 00:01:39.709
And it's also going to take a user,
which is type PointerStore.User, like so.

28
00:01:41.986 --> 00:01:46.252
&gt;&gt; Melkey: And it's gonna
respond with HTTP request, okay?

29
00:01:46.252 --> 00:01:48.445
Because we're modifying it, and

30
00:01:48.445 --> 00:01:53.138
we're going to respond with that
modified HTTP request pointer, okay?

31
00:01:53.138 --> 00:01:58.018
So here we'll have the context,
because what we're going to do is going

32
00:01:58.018 --> 00:02:02.258
to be inserting our user into
the context property of request,

33
00:02:02.258 --> 00:02:04.738
not the body, but context, right?

34
00:02:04.738 --> 00:02:09.550
So every request that comes
through the point of HTTP request

35
00:02:09.550 --> 00:02:12.012
has this property of context.

36
00:02:12.012 --> 00:02:13.767
So here we have context.

37
00:02:13.767 --> 00:02:17.081
I'm gonna create this using
the standard context library from Go.

38
00:02:17.081 --> 00:02:19.278
So we need context with value.

39
00:02:19.278 --> 00:02:23.205
You should see got brought
in context package.

40
00:02:23.205 --> 00:02:26.319
And here we're gonna take the context
that gets brought from request.

41
00:02:26.319 --> 00:02:31.469
So, r.context like so.

42
00:02:31.469 --> 00:02:35.823
And here we're gonna put, not like that.

43
00:02:35.823 --> 00:02:39.861
But here we're gonna add
a new value to the r.context.

44
00:02:39.861 --> 00:02:42.136
I'm gonna first add a user key.

45
00:02:42.136 --> 00:02:47.043
So first,
you may think the first thing you wanna do

46
00:02:47.043 --> 00:02:51.167
is add like a user key like so
and then user.

47
00:02:51.167 --> 00:02:55.350
And this is gonna be completely fine and

48
00:02:55.350 --> 00:03:01.580
we can return r.withcontext and
pass in context, okay?

49
00:03:01.580 --> 00:03:07.258
So this is fine, but what will end up
happening with that user key, you're gonna

50
00:03:07.258 --> 00:03:12.954
potentially have collisions of different
users with the request param, okay?

51
00:03:12.954 --> 00:03:17.479
So what you can typically do is you
can have a separate type that you

52
00:03:17.479 --> 00:03:21.427
define as a context key,
which will be a type string, and

53
00:03:21.427 --> 00:03:25.810
you can set your user context key
as a value user using that key.

54
00:03:25.810 --> 00:03:31.423
So here I'll make a new type called
context key, which will be string.

55
00:03:31.423 --> 00:03:37.427
Okay, but
it's its own individual type here and

56
00:03:37.427 --> 00:03:43.292
I can do something like
const user context key.

57
00:03:43.292 --> 00:03:50.798
It is going to be context key, and
then we can put in something like user.

58
00:03:50.798 --> 00:03:53.863
&gt;&gt; Speaker 2: Do you expand
on the collisions a bit more?

59
00:03:53.863 --> 00:03:55.548
I'm not fully understanding.

60
00:03:55.548 --> 00:03:59.115
&gt;&gt; Melkey: So if we have just
the string like this, user key.

61
00:03:59.115 --> 00:04:02.019
With the way the context package works,

62
00:04:02.019 --> 00:04:06.298
you'll end up getting collisions
on just the string type.

63
00:04:06.298 --> 00:04:11.376
So you have to make like your own
custom type, which is still a string,

64
00:04:11.376 --> 00:04:15.953
and then you can embed it using
something like user or user key.

65
00:04:15.953 --> 00:04:20.582
And then instead of
putting the user key here,

66
00:04:20.582 --> 00:04:24.981
you can just put a user
contacts key like so.

67
00:04:24.981 --> 00:04:27.240
I didn't mean to do that.

68
00:04:27.240 --> 00:04:31.615
&gt;&gt; Speaker 3: You could have multiple keys
that are of type string that are the same

69
00:04:31.615 --> 00:04:36.372
string value, and by creating a new type,
then when it indexes that key or

70
00:04:36.372 --> 00:04:39.863
whatever in context because
it's a different type.

71
00:04:39.863 --> 00:04:40.412
&gt;&gt; Melkey: Yeah.

72
00:04:40.412 --> 00:04:41.644
&gt;&gt; Speaker 3: That's
what differentiates it.

73
00:04:41.644 --> 00:04:45.278
&gt;&gt; Melkey: Yeah, yeah,
cuz the different native type behind it.

74
00:04:45.278 --> 00:04:47.047
Okay, so
we have this set user store again.

75
00:04:47.047 --> 00:04:50.360
So this set user function,
it's not used right now, but

76
00:04:50.360 --> 00:04:53.411
we're gonna create a function
off our middleware.

77
00:04:53.411 --> 00:04:56.845
And that function is going
to be using the set user.

78
00:04:56.845 --> 00:05:01.508
And then we don't really need to have this
function right now, but what we can do is

79
00:05:01.508 --> 00:05:05.513
do func getUser, and it's gonna be
kind of the opposite of setUsers.

80
00:05:05.513 --> 00:05:07.854
It's gonna retrieve the value here.

81
00:05:07.854 --> 00:05:14.993
So this is still gonna take an r, which
can be a pointer to HTTP request, okay?

82
00:05:14.993 --> 00:05:18.697
And it's gonna return a store.user for us.

83
00:05:18.697 --> 00:05:25.532
And what we're gonna do here is user,
okay, and here we'll do r.context, okay?

84
00:05:25.532 --> 00:05:29.855
We'll get the value associated
with context, and here is,

85
00:05:29.855 --> 00:05:34.262
we'll put in the user context
key to retrieve that value, and

86
00:05:34.262 --> 00:05:39.803
we'll see it makes sure that this asserts
if the type is in fact Store.User.

87
00:05:39.803 --> 00:05:43.855
So this notation of the dot and
comparing the types,

88
00:05:43.855 --> 00:05:48.368
these assures us that the type
that we're retrieving from

89
00:05:48.368 --> 00:05:52.899
the context is value is going
to be of type, store.user.

90
00:05:52.899 --> 00:05:54.963
A pointer to store.user, okay?

91
00:05:54.963 --> 00:05:58.786
And so if this is not okay,
this is similar to like mapping,

92
00:05:58.786 --> 00:06:02.924
like if map exists or not,
we can use this okay notation as well.

93
00:06:02.924 --> 00:06:09.024
So if it's not okay, so if it's not
the same type, we can handle this error.

94
00:06:09.024 --> 00:06:12.388
We can bubble it up typically,
though we could also,

95
00:06:12.388 --> 00:06:14.946
in fact, panic on this as well, right?

96
00:06:14.946 --> 00:06:19.815
You can do panic,
let's say missing user in request.

97
00:06:19.815 --> 00:06:24.729
Because at this point, once we hook
this up, we expect every request that's

98
00:06:24.729 --> 00:06:29.205
going to be calling getUser is going
to have a pointer to store.user.

99
00:06:29.205 --> 00:06:34.148
Whether that's anonymous user or
whether that's a logged in user.

100
00:06:34.148 --> 00:06:37.385
So if something is not there,
we could panic.

101
00:06:37.385 --> 00:06:45.161
The reason behind the panic is like this:
could it be a bad actor call, right?

102
00:06:45.161 --> 00:06:48.811
Like a hacker, or something.

103
00:06:48.811 --> 00:06:50.435
So we could pack on this.

104
00:06:50.435 --> 00:06:58.590
That is a bit of an intense handling of
it that basically crashes into our app.

105
00:06:58.590 --> 00:07:00.848
So I'll leave it up to you.

106
00:07:00.848 --> 00:07:05.204
I will typically use something like panic,
honestly.

107
00:07:05.204 --> 00:07:09.334
And if anything's going
to try to be interjected,

108
00:07:09.334 --> 00:07:14.425
like a bad call, or
insert something through my application,

109
00:07:14.425 --> 00:07:18.859
I'll panic it, or
I'll kind of close the HTTP layer.

110
00:07:18.859 --> 00:07:23.305
Okay, so now that we have the user,

111
00:07:23.305 --> 00:07:27.612
we can just return user like that.

