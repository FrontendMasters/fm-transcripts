WEBVTT

1
00:00:00.000 --> 00:00:02.421
&gt;&gt; Melkey: So we just created
our new token SQL table, and

2
00:00:02.421 --> 00:00:04.603
we run the migration to get that working.

3
00:00:04.603 --> 00:00:06.253
Next, let's go ahead and

4
00:00:06.253 --> 00:00:10.086
write a package that will allow
us to generate these tokens.

5
00:00:10.086 --> 00:00:14.719
So in internal, go ahead and make a new
one called tokens, a new folder called

6
00:00:14.719 --> 00:00:18.945
tokens, and then within tokens,
make a new file called tokens.go.

7
00:00:18.945 --> 00:00:23.267
It's not gonna be in store
is going to be in internal.

8
00:00:23.267 --> 00:00:26.230
So within internal,
make a new folder called tokens, and

9
00:00:26.230 --> 00:00:28.717
it was in that make a new
file called tokens.go.

10
00:00:28.717 --> 00:00:32.783
Because I want it to be its own separate
package and not part of the store package.

11
00:00:32.783 --> 00:00:36.976
So here we can do package tokens,
as opposed to package store.

12
00:00:36.976 --> 00:00:38.132
Either would be fine.

13
00:00:38.132 --> 00:00:41.415
The structure I'm choosing
is gonna be packaged tokens,

14
00:00:41.415 --> 00:00:45.843
even though we're going to be going
back into the tokens.go file in store..

15
00:00:47.755 --> 00:00:48.759
&gt;&gt; Melkey: Okay, cool.

16
00:00:48.759 --> 00:00:53.822
So again, this is gonna require a struct,
so we can do type Token struct,

17
00:00:53.822 --> 00:00:58.906
and it's gonna have the field that we
just basically saw in our SQL table.

18
00:00:58.906 --> 00:01:02.760
So first, we're gonna have a plain
text which is going to be a string.

19
00:01:02.760 --> 00:01:06.351
We gonna have a json representation
of that, and just say token.

20
00:01:08.302 --> 00:01:11.678
&gt;&gt; Melkey: Okay, I'm gonna have the hash,
which is gonna be a slice of bytes.

21
00:01:11.678 --> 00:01:14.381
Excuse me.

22
00:01:14.381 --> 00:01:18.446
Json, we wanna not pass this around
to our client, so let's omit that.

23
00:01:18.446 --> 00:01:23.395
Or specifically, just dash it out so
it does not get sent out.

24
00:01:23.395 --> 00:01:27.299
We have our UserID,
there's gonna be an int.

25
00:01:27.299 --> 00:01:31.913
We also do not want to reveal who is
calling this or what users calling this.

26
00:01:31.913 --> 00:01:34.164
They should know if they
are the ones truly calling it.

27
00:01:34.164 --> 00:01:38.519
We do not need to pass any ID or
any PII text.

28
00:01:38.519 --> 00:01:43.621
Next we'll have an expiry,
we'll make this time.Duration, okay?

29
00:01:43.621 --> 00:01:45.801
Or sorry, time.Time.

30
00:01:47.139 --> 00:01:50.237
&gt;&gt; Melkey: We'll use a duration
function after, okay?

31
00:01:50.237 --> 00:01:51.998
Here we'll pass in expiry.

32
00:01:55.554 --> 00:01:58.720
&gt;&gt; Melkey: And
then scope which is going to be a string.

33
00:01:58.720 --> 00:02:02.442
And again, the caller does not need
to know the scope of this at all.

34
00:02:06.327 --> 00:02:08.458
&gt;&gt; Melkey: [COUGH] So
we have our token struck, and

35
00:02:08.458 --> 00:02:10.655
instead of making like a constructor,

36
00:02:10.655 --> 00:02:14.861
we're just gonna have one function
that just generates the token, okay?

37
00:02:14.861 --> 00:02:18.981
So, it's gonna be pretty
straightforward function.

38
00:02:18.981 --> 00:02:22.649
All it's going to do is from nothing,
we're gonna create this token, and

39
00:02:22.649 --> 00:02:25.227
then that token will be
inserted into the database.

40
00:02:25.227 --> 00:02:26.952
So here we'll do, yeah?

41
00:02:26.952 --> 00:02:29.873
&gt;&gt; Speaker 2: You got a missing.

42
00:02:29.873 --> 00:02:30.991
&gt;&gt; Melkey: Right here?

43
00:02:30.991 --> 00:02:33.321
Hell yeah, thank you.

44
00:02:33.321 --> 00:02:36.307
Okay, so here we'll do func GenerateToken.

45
00:02:36.307 --> 00:02:38.590
Okay, and it's not a method receive,
run token.

46
00:02:38.590 --> 00:02:40.817
You may think that, but
if you think about it,

47
00:02:40.817 --> 00:02:44.091
we need to first create a token to
have methods on the token, right?

48
00:02:44.091 --> 00:02:47.289
And because this function will be
responsible creating the token,

49
00:02:47.289 --> 00:02:49.603
it needs to come first,
chicken versus the egg.

50
00:02:49.603 --> 00:02:53.481
So here, we'll have user ID,
it's gonna be an int.

51
00:02:53.481 --> 00:02:58.594
It's gonna have also a time to live,
which will be time.duration.

52
00:02:58.594 --> 00:03:01.605
And to have a scope,
which is gonna be a string, and

53
00:03:01.605 --> 00:03:05.754
this is going to return a pointer to
our token and an error, all right?

54
00:03:05.754 --> 00:03:07.682
So let's go ahead and
assemble our token here.

55
00:03:07.682 --> 00:03:11.608
So let's make the address
of token like so, UserID.

56
00:03:11.608 --> 00:03:14.138
We'll just pass in userID directly.

57
00:03:14.138 --> 00:03:16.890
Expiry is gonna be time.Now.

58
00:03:18.983 --> 00:03:21.230
&gt;&gt; Melkey: .Now, okay?

59
00:03:21.230 --> 00:03:25.055
And we'll do add the TTL,
the time to live.

60
00:03:25.055 --> 00:03:28.832
So whatever time is .now, if you want
your token slip for 24, hours, 10 hours,

61
00:03:28.832 --> 00:03:32.137
one hour, one minute, we're basically
saying whatever the time is now,

62
00:03:32.137 --> 00:03:33.305
add that TTL to it, okay?

63
00:03:33.305 --> 00:03:36.025
So we know what timestamp
this will expire at.

64
00:03:38.027 --> 00:03:40.061
&gt;&gt; Melkey: And
also the time package can go is very nice.

65
00:03:41.700 --> 00:03:45.982
&gt;&gt; Melkey: And
then the scope will be the scope, okay?

66
00:03:45.982 --> 00:03:49.635
Here we're gonna make an empty
bytes of 32 characters.

67
00:03:49.635 --> 00:03:55.711
So here, we'll use the make function
like so, we'll have our slice of bytes,

68
00:03:55.711 --> 00:04:02.036
okay, and then we'll put 02 bytes like, so
&gt;&gt; Melkey: Next,

69
00:04:02.036 --> 00:04:04.189
we're actually going to
use the rand package.

70
00:04:04.189 --> 00:04:06.288
So random, this is built into go.

71
00:04:06.288 --> 00:04:10.500
We'll do rand.read,
I'm gonna pass in those empty bytes.

72
00:04:12.677 --> 00:04:15.238
&gt;&gt; Melkey: Just gonna basically
fill in the slice of bytes,

73
00:04:15.238 --> 00:04:18.121
which is the random assortment
of random characters.

74
00:04:20.794 --> 00:04:23.944
&gt;&gt; Melkey: If the error does not equal
to nil, this is gonna be an internal

75
00:04:23.944 --> 00:04:28.078
server error, meaning the random library
or our system something's going on.

76
00:04:28.078 --> 00:04:33.314
So we can just do return nil and
error like so, okay?

77
00:04:33.314 --> 00:04:38.828
And then for token, plain text,
what we're gonna use is base 32.

78
00:04:42.122 --> 00:04:44.560
&gt;&gt; Melkey: Standard encoding, okay?

79
00:04:44.560 --> 00:04:48.465
This is gonna be us actually encoding
the plain text password into our token.

80
00:04:50.324 --> 00:04:51.779
&gt;&gt; Melkey: Gonna say with padding.

81
00:04:55.727 --> 00:04:56.899
&gt;&gt; Melkey: Base 32, no padding.

82
00:04:56.899 --> 00:04:59.410
And then we're gonna do encode to string,

83
00:04:59.410 --> 00:05:02.636
we're gonna pass in the empty
bytes like this, okay?

84
00:05:02.636 --> 00:05:06.516
And just to kind of explain what this is,
so with padding creates a new encoding,

85
00:05:06.516 --> 00:05:09.713
identical with this, except with
a specific padding character or

86
00:05:09.713 --> 00:05:11.273
no pattern to disable padding.

87
00:05:11.273 --> 00:05:14.859
So padding is typically seen as like for
UTF-8.

88
00:05:14.859 --> 00:05:19.309
Sometimes I believe it's the extra equal
sign at the end if there's an empty

89
00:05:19.309 --> 00:05:20.847
character, empty slot.

90
00:05:20.847 --> 00:05:22.423
So that's what the width padding does.

91
00:05:22.423 --> 00:05:27.619
It just pads up if you send a value that
doesn't fully meet the length of what you

92
00:05:27.619 --> 00:05:33.076
set your encoder to be, it just pads it
with, typically the equal sign at the end.

93
00:05:36.939 --> 00:05:39.435
&gt;&gt; Melkey: Okay, so
now we have the token, plain text.

94
00:05:39.435 --> 00:05:42.893
What we're going to do is create our hash,

95
00:05:42.893 --> 00:05:48.189
which means sha256 should
bring it into crypto/sha256.

96
00:05:50.425 --> 00:05:52.728
&gt;&gt; Melkey: Then we're
gonna use the sum 256.

97
00:05:52.728 --> 00:05:55.975
Functions returns a shot
256 check some of the data.

98
00:05:55.975 --> 00:06:01.952
All of this, I'm just being honest, is us
not creating our own hashing algorithm.

99
00:06:01.952 --> 00:06:05.946
This is built in to go the shot
256 library, the crypto library,

100
00:06:05.946 --> 00:06:07.427
and the random library.

101
00:06:07.427 --> 00:06:13.955
It's just us essentially, we're rolling
our own auth using algorithm hashing

102
00:06:13.955 --> 00:06:20.009
tools created by much smarter people
than me, and in use by a lot of people.

103
00:06:20.009 --> 00:06:24.459
So again, I think rolling your own auth,
some people think this is the part where

104
00:06:24.459 --> 00:06:28.531
you're actually making your own algorithm,
like doing all this stuff.

105
00:06:28.531 --> 00:06:29.928
That's not really what it is.

106
00:06:29.928 --> 00:06:33.193
We're leveraging tools,
sometimes external tools,

107
00:06:33.193 --> 00:06:37.359
but because of, I guess, the richness
of the ghost standard library,

108
00:06:37.359 --> 00:06:40.149
we can use these tools
that are available to us.

109
00:06:43.813 --> 00:06:47.478
&gt;&gt; Melkey: Okay, so here we can
just pass in a slice of bytes, and

110
00:06:47.478 --> 00:06:51.971
then what we're gonna pass in
is token.Plaintext, all right?

111
00:06:51.971 --> 00:06:56.488
And then here all gonna
say is token.Hash like so

112
00:06:56.488 --> 00:07:01.004
is going to be hash,
bring in that entire slice,

113
00:07:01.004 --> 00:07:05.095
and here we're gonna return token and nil.

114
00:07:05.095 --> 00:07:10.603
And so one thing I realized that I may
have forgot to mention is the scope.

115
00:07:10.603 --> 00:07:14.871
Tokens, the way we are using them,

116
00:07:14.871 --> 00:07:19.150
could have many different scopes.

117
00:07:19.150 --> 00:07:22.887
We can have authentication scope, but
you can also have authorization scope.

118
00:07:22.887 --> 00:07:27.649
You could have mod scope, admin scope,
grandfathered in scope, right?

119
00:07:27.649 --> 00:07:32.107
And these are just basically levels of
privilege that we can assign to a user

120
00:07:32.107 --> 00:07:36.803
communicated through tokens that can
be used across our application, okay?

121
00:07:36.803 --> 00:07:41.179
So here in our instance,
because we're using authentication,

122
00:07:41.179 --> 00:07:43.493
we can create a const, all right?

123
00:07:43.493 --> 00:07:46.897
And this const could be
called ScopeAuth for

124
00:07:46.897 --> 00:07:52.700
right now we can just make this equal
the string authentication like, so.

125
00:07:52.700 --> 00:07:57.405
Cool, so
now we have a method of creating tokens.

126
00:07:57.405 --> 00:08:00.876
So generate token, and
we have the token struct,

127
00:08:00.876 --> 00:08:03.449
we can then go back to our store here.

128
00:08:03.449 --> 00:08:07.817
And within store,
we can finally create tokens.go.

129
00:08:07.817 --> 00:08:11.961
And the reason why I didn't create the
other file in the store is because that

130
00:08:11.961 --> 00:08:15.546
other file, as we just saw,
has nothing to do with the database.

131
00:08:15.546 --> 00:08:19.177
And so for me, I like that separation
here this file in particular,

132
00:08:19.177 --> 00:08:21.610
let me just quickly spin
it up package store.

133
00:08:21.610 --> 00:08:24.831
This is gonna be our tokens.go
talking directly to our database.

134
00:08:24.831 --> 00:08:26.261
So we'll be inserting those values.

135
00:08:26.261 --> 00:08:28.877
So I thought it makes more
sense to separate them.

136
00:08:28.877 --> 00:08:31.595
But if I'm being honest,
you can't keep them in one file.

137
00:08:31.595 --> 00:08:33.809
I'll leave it up to you if
you want to change it up and

138
00:08:33.809 --> 00:08:35.624
whatever makes more sense to you, okay?

139
00:08:35.624 --> 00:08:39.180
So in this case,
we don't actually need to create a struct,

140
00:08:39.180 --> 00:08:42.273
because we already have it
from our tokens package.

141
00:08:42.273 --> 00:08:44.773
But we can do is not a func, but

142
00:08:44.773 --> 00:08:50.186
we can create a type to handle
our Postgres token store, right?

143
00:08:50.186 --> 00:08:52.867
So we can do PostgresTokenStore.

144
00:08:52.867 --> 00:08:55.974
This is gonna be a struct, and
it's gonna have a field db.

145
00:08:55.974 --> 00:09:00.453
It's gonna be of type sql.DB which
you've seen plenty of times.

146
00:09:00.453 --> 00:09:02.426
With this,
we can create our new constructor.

147
00:09:02.426 --> 00:09:05.763
So func new Postgres token store, okay?

148
00:09:05.763 --> 00:09:08.167
It's gonna take a db like so,

149
00:09:08.167 --> 00:09:13.361
it's going to return a pointer
to Postgres token store like so,

150
00:09:13.361 --> 00:09:18.091
and we can return the postgres
token store db, all right?

151
00:09:18.091 --> 00:09:22.652
This should be pretty familiar
to us already, and with a store,

152
00:09:22.652 --> 00:09:27.302
we can also do something called
type token store as an interface.

153
00:09:29.205 --> 00:09:34.016
&gt;&gt; Melkey: Now, the chances of changing
the underlying structure of a token store

154
00:09:34.016 --> 00:09:39.229
is still fairly high because all really
doing is changing that constructor,

155
00:09:39.229 --> 00:09:44.468
that new Postgres token struct, so
it's as equal across the board, right?

156
00:09:44.468 --> 00:09:48.934
So that's why you would it's not
necessarily saying you're changing

157
00:09:48.934 --> 00:09:53.635
from a sha256, algorithm token, or
even stateful versus stateless.

158
00:09:53.635 --> 00:09:56.976
All this is saying is you no longer
use Postgres to store your token.

159
00:09:56.976 --> 00:10:01.558
So that's why it's still applicable
to have a interface on it as well.

160
00:10:01.558 --> 00:10:07.045
The methods on this interface
are gonna be token,

161
00:10:07.045 --> 00:10:10.832
which is going to be of type token,

162
00:10:10.832 --> 00:10:14.764
which can do token.to bring it in.

163
00:10:17.683 --> 00:10:19.235
&gt;&gt; Melkey: I think my editor
is gonna do it for me.

164
00:10:19.235 --> 00:10:27.346
So here, let's just move
all this github.com/melkey.

165
00:10:27.346 --> 00:10:31.477
Let me remind myself of what it is.

166
00:10:31.477 --> 00:10:35.396
FemProject, cool, and that's a little
helpful thing if you forget like me.

167
00:10:39.431 --> 00:10:45.758
&gt;&gt; Melkey: Okay, and then it's just slash-
&gt;&gt; Speaker 2: Is it tokens?

168
00:10:45.758 --> 00:10:47.649
&gt;&gt; Melkey: It's token, cool.

169
00:10:47.649 --> 00:10:52.480
Yeah, so don't forget the internal and
don't forget the the plural of tokens.

170
00:10:52.480 --> 00:10:55.411
Okay, cool, so then over here,
it's not token, it's tokens.

171
00:10:55.411 --> 00:10:58.030
And then we can put token like that.

172
00:11:00.224 --> 00:11:02.815
&gt;&gt; Melkey: Okay, so insert this is gonna
be what's actually gonna be communicating

173
00:11:02.815 --> 00:11:03.538
with the database.

174
00:11:03.538 --> 00:11:05.558
We're gonna be taking
that generate token and

175
00:11:05.558 --> 00:11:07.433
actually inserting it into the database.

176
00:11:07.433 --> 00:11:10.892
All we really need this
is to have an error, and

177
00:11:10.892 --> 00:11:15.340
then two more methods will be
createNewToken, all right?

178
00:11:15.340 --> 00:11:18.625
And this gonna include
information like the userID,

179
00:11:18.625 --> 00:11:22.643
which we know is gonna be an int,
ttl, which is time.Duration.

180
00:11:22.643 --> 00:11:27.053
It's also gonna have a scope
which is a string, and

181
00:11:27.053 --> 00:11:33.222
this is going to return a pointer
to tokens.token and an error, okay?

182
00:11:33.222 --> 00:11:38.641
And then one more method we can have
is deleteAllTokensForUser, right?

183
00:11:38.641 --> 00:11:40.902
And let's say someone gets hacked.

184
00:11:40.902 --> 00:11:44.593
Let's say someone wants to just delete
all their tokens they haven't been on for

185
00:11:44.593 --> 00:11:45.198
a long time.

186
00:11:45.198 --> 00:11:47.177
They got banned, whatever it is,

187
00:11:47.177 --> 00:11:51.564
you can just easily make a function which
takes user ID int and scope string.

188
00:11:51.564 --> 00:11:53.110
You can do error like so.

189
00:11:55.507 --> 00:11:57.958
&gt;&gt; Melkey: So we have our three methods we
know exactly what we need to implement.

190
00:11:57.958 --> 00:11:58.937
Let's go ahead and do that.

191
00:11:58.937 --> 00:12:02.115
So Postgres token store,
let's do CreateNewToken.

192
00:12:02.115 --> 00:12:06.325
We'll start with this and like,
the signature already tells us,

193
00:12:06.325 --> 00:12:07.839
we just have to user ID.

194
00:12:07.839 --> 00:12:08.615
It's gonna be int.

195
00:12:10.054 --> 00:12:13.310
&gt;&gt; Melkey: Ttl is time.Duration
scope is string..

196
00:12:13.310 --> 00:12:18.090
This is gonna return a tokens.Token and
an error.

197
00:12:21.849 --> 00:12:22.475
&gt;&gt; Melkey: Okay?

198
00:12:23.731 --> 00:12:27.931
&gt;&gt; Melkey: So here we can do token
error is gonna be tokens.GenerateToken.

199
00:12:27.931 --> 00:12:32.527
I'm gonna pass in the user ID,
the ttl and the scope.

200
00:12:38.878 --> 00:12:43.011
&gt;&gt; Melkey: I'm gonna check the errors,
we're gonna return nil and error,

201
00:12:43.011 --> 00:12:44.075
if there is one.

202
00:12:44.075 --> 00:12:47.238
Otherwise we're gonna do error
is going to be t.Insert,

203
00:12:47.238 --> 00:12:49.437
even though it doesn't exist just yet.

204
00:12:49.437 --> 00:12:54.357
But since we know the token signature,
insert is going to take our tokens,

205
00:12:54.357 --> 00:12:58.745
we're gonna drop it in here, and
we can say, return token error.

206
00:13:01.763 --> 00:13:05.232
&gt;&gt; Melkey: Next method,
let's do Postgres token store.

207
00:13:05.232 --> 00:13:09.230
Let's go ahead and just create the insert
one since we've already referenced it.

208
00:13:09.230 --> 00:13:15.449
All right, so token is going to
take token tokens.Token, like so.

209
00:13:15.449 --> 00:13:21.761
And it's going to return the error or
a error, okay?

210
00:13:21.761 --> 00:13:26.112
And here we're gonna create our

211
00:13:26.112 --> 00:13:30.795
query insert into tokens, okay?

212
00:13:30.795 --> 00:13:36.343
And here we're gonna be inserting hash_id,

213
00:13:36.343 --> 00:13:43.541
expiry, and scope
&gt;&gt; Melkey: Values are gonna be 1,

214
00:13:43.541 --> 00:13:48.134
2, 3, and 4, like that, okay?

215
00:13:48.134 --> 00:13:53.898
And very easy, we can just do
error is gonna be t.db.Exec.

216
00:13:53.898 --> 00:13:58.971
Pass in the query and
the four values we need, token and

217
00:13:58.971 --> 00:14:03.825
the orderly appear If you're in,
so token.Hash,

218
00:14:03.825 --> 00:14:09.034
token.UserID, token.Expiry,
and token.Scope.

219
00:14:09.034 --> 00:14:10.761
&gt;&gt; Speaker 2: For the t.insert?

220
00:14:10.761 --> 00:14:12.031
&gt;&gt; Melkey: Yeah.

221
00:14:12.031 --> 00:14:16.039
&gt;&gt; Speaker 2: Was that insert,
it's a Postgres token store,

222
00:14:16.039 --> 00:14:19.179
which doesn't have the insert on it.

223
00:14:19.179 --> 00:14:20.874
&gt;&gt; Melkey: That's what
we're building right now.

224
00:14:20.874 --> 00:14:22.257
&gt;&gt; Speaker 2: Okay, so
it's just not there yet.

225
00:14:22.257 --> 00:14:23.329
&gt;&gt; Melkey: But yeah, the,

226
00:14:23.329 --> 00:14:28.011
the function building now is the insert
on the t.Postgres token store.

227
00:14:29.771 --> 00:14:30.827
&gt;&gt; Speaker 2: Gotcha.
&gt;&gt; Melkey: Yeah.

228
00:14:33.227 --> 00:14:36.627
&gt;&gt; Melkey: Yeah, so
now if we do return error and you save,

229
00:14:36.627 --> 00:14:39.780
your error should go away on the t.insert.

230
00:14:39.780 --> 00:14:43.829
Because now the Postgres token store
struct does have a method on it called

231
00:14:43.829 --> 00:14:44.358
Insert.

232
00:14:44.358 --> 00:14:49.718
Rewriting this last function, so
we do t we have PostgresTokenStore, and

233
00:14:49.718 --> 00:14:55.177
the last function you wanna create is
going to be DeleteAllTokensForUser.

234
00:14:55.177 --> 00:15:01.924
This is gonna take a userID of type int
and the scope, which going to be a string.

235
00:15:01.924 --> 00:15:04.016
It's going to turn an error for us.

236
00:15:04.016 --> 00:15:06.823
And quickly create a query like so.

237
00:15:06.823 --> 00:15:10.701
It's gonna be DELETE FROM tokens.

238
00:15:10.701 --> 00:15:16.170
Oops, where scope equals
the first value passed in.

239
00:15:18.731 --> 00:15:25.367
&gt;&gt; Melkey: And user_id = the second value.

240
00:15:29.820 --> 00:15:33.595
&gt;&gt; Melkey: Then we can just
execute this with t.db.Exec,

241
00:15:33.595 --> 00:15:38.675
pass in the query, pass in the scope
first, and then the userID.

242
00:15:38.675 --> 00:15:41.178
And then we can go ahead and
return error like so.

