WEBVTT

1
00:00:00.057 --> 00:00:04.197
&gt;&gt; Melkey: I think it's pretty
cool that we have going on here,

2
00:00:04.197 --> 00:00:09.199
we have our back end, and
we have connection to this database.

3
00:00:09.199 --> 00:00:12.554
Well, that's actually not true, we don't
have true connection to this database, but

4
00:00:12.554 --> 00:00:14.180
we do have a running database, all right.

5
00:00:14.180 --> 00:00:18.338
So we're gonna go ahead and open up
another tab, because we should have,

6
00:00:18.338 --> 00:00:20.886
depending on what your
style is on my personal

7
00:00:20.886 --> 00:00:22.981
machine I have three tabs occupied.

8
00:00:22.981 --> 00:00:27.199
One with the editor, one with go dot
main running, and then one with Docker.

9
00:00:27.199 --> 00:00:31.548
And then I open up this new one so
I can keep importing stuff and exploring.

10
00:00:31.548 --> 00:00:35.749
When like I just said, we have Docker
running, we have a database connected but

11
00:00:35.749 --> 00:00:38.398
this database is just,
there's just chilling.

12
00:00:38.398 --> 00:00:41.788
It's just it has no affiliation
to our project whatsoever,

13
00:00:41.788 --> 00:00:45.985
all because it's defined in the same
project route, it doesn't matter.

14
00:00:45.985 --> 00:00:50.184
So here we're going to connect
to that database, all right.

15
00:00:50.184 --> 00:00:52.418
And for us to connect to that database,

16
00:00:52.418 --> 00:00:56.360
we're gonna actually introduce
a new package into our our project.

17
00:00:56.360 --> 00:01:03.039
And it's essentially a driver,
it's a Postgres QL driver,

18
00:01:03.039 --> 00:01:10.112
the one that I recommend is by Jack C,
and it is called pgx, okay?

19
00:01:10.112 --> 00:01:14.437
So it is a Postgres SQL driver and
toolkit for go,

20
00:01:14.437 --> 00:01:18.247
it has about 11.4000 get up stars.

21
00:01:18.247 --> 00:01:23.203
It is relatively actively maintained,
you can see a couple weeks ago,

22
00:01:23.203 --> 00:01:24.614
also written in Go.

23
00:01:24.614 --> 00:01:30.132
It's a pretty powerful driver
that we are going to install and

24
00:01:30.132 --> 00:01:32.370
use in our project here.

25
00:01:32.370 --> 00:01:37.533
Quick side note, this particular driver,

26
00:01:37.533 --> 00:01:42.425
this package, if you are on an LSP go PLS.

27
00:01:42.425 --> 00:01:46.504
It sometimes bugs out and
asks you to reinstall it, or

28
00:01:46.504 --> 00:01:51.410
install a particular version of
it if you put in other packages.

29
00:01:51.410 --> 00:01:57.077
I think we'll see this in this course
here, it's not a deal breaker,

30
00:01:57.077 --> 00:02:00.739
it's just very picky and
a bit opinionated.

31
00:02:00.739 --> 00:02:04.754
But yeah, pgx, what we're going to use
against just going to be our driver.

32
00:02:04.754 --> 00:02:11.028
So here we're gonna use version four,
so we're gonna do,

33
00:02:11.028 --> 00:02:18.568
go get github.com/jackC/pgx/v4/STD lib,
standard library.

34
00:02:23.636 --> 00:02:27.716
&gt;&gt; Melkey: Going back to our
editor within the store folder,

35
00:02:27.716 --> 00:02:32.687
add a new file, and
this file is going to be called database.

36
00:02:32.687 --> 00:02:38.359
So database.go and
we're actually gonna write stuff inside,

37
00:02:38.359 --> 00:02:41.624
so we can declare our package store.

38
00:02:41.624 --> 00:02:46.148
And the purpose of this particular
file is going to allow us to

39
00:02:46.148 --> 00:02:50.065
connect to our running
database right here, okay?

40
00:02:50.065 --> 00:02:53.494
The way we're gonna do this create
a new function, so func open.

41
00:02:53.494 --> 00:02:58.357
And func open is going to
not take any argument,

42
00:02:58.357 --> 00:03:02.613
but is going to return a type sql.db, and

43
00:03:02.613 --> 00:03:06.398
an error to bring in the SQL package.

44
00:03:06.398 --> 00:03:11.149
It's standard library import,

45
00:03:11.149 --> 00:03:18.678
you can do database slash SQL
&gt;&gt; Melkey: And

46
00:03:18.678 --> 00:03:24.431
then here we're going to
basically instantiate a database

47
00:03:24.431 --> 00:03:30.413
struct that we're going to use
throughout our application,

48
00:03:30.413 --> 00:03:35.257
so here we can type db err
is going to be sql.open.

49
00:03:35.257 --> 00:03:40.058
This whole argument here is the connection
string we're but the very first argument

50
00:03:40.058 --> 00:03:44.129
is going to be the driver that we're
using, and we just installed pgx.

51
00:03:44.129 --> 00:03:50.209
So here we can do pgx, and now this is
gonna be an interesting property in Go.

52
00:03:50.209 --> 00:03:54.235
Like I said, if I do FMT,
the compiler yells at me, you don't,

53
00:03:54.235 --> 00:03:56.257
you're not using FMT, right?

54
00:03:56.257 --> 00:04:02.248
But I could just do this, because
there are certain cases like the one

55
00:04:02.248 --> 00:04:09.288
we're going to see now with JAXI pgx where
we don't implicitly use the library.

56
00:04:09.288 --> 00:04:14.976
But we are using, or we don't explicitly
use the library, but we are implicitly

57
00:04:14.976 --> 00:04:19.755
using it via this pgx connection
string here in the SQL open method.

58
00:04:19.755 --> 00:04:27.808
So here we're going to bring in
github.com/jackC/pgx/v4/STD lib,

59
00:04:27.808 --> 00:04:34.871
it's gonna yell at us and
in here we're going to just ignore that.

60
00:04:37.782 --> 00:04:40.132
&gt;&gt; Melkey: Let me just go close all this.

61
00:04:45.736 --> 00:04:48.955
&gt;&gt; Melkey: Yeah, there you go, so it just
bugs out, so I have to do an LSP restart,

62
00:04:48.955 --> 00:04:52.126
I'm wondering if anyone else,
does anyone else get that or you guys,

63
00:04:52.126 --> 00:04:53.396
it's kosher on your side?

64
00:04:53.396 --> 00:04:57.845
Good, yeah, so depending for me, on U of
M with my configuration, it does bug out,

65
00:04:57.845 --> 00:05:01.257
but it Is working as expected,
but thank you for being patient.

66
00:05:01.257 --> 00:05:04.766
Okay, next is gonna be
the actual connection string, so

67
00:05:04.766 --> 00:05:08.655
here we'll do host equals,
it's gonna be local host, okay?

68
00:05:08.655 --> 00:05:12.771
The user is going to be Postgres,

69
00:05:12.771 --> 00:05:17.475
the password is going to be Postgres,

70
00:05:17.475 --> 00:05:22.773
the db name is going to be Postgres, okay?

71
00:05:22.773 --> 00:05:29.719
And in here we'll do port 5432, the one
we specified in our Docker compose file,

72
00:05:29.719 --> 00:05:33.781
and then we'll just add
SSL mode equals disable.

73
00:05:37.077 --> 00:05:38.538
&gt;&gt; Melkey: I'll zoom out
just a little bit so you,

74
00:05:38.538 --> 00:05:40.489
you can see the entirety of
the connection string and

75
00:05:40.489 --> 00:05:41.789
make sure I don't have any typos.

76
00:05:41.789 --> 00:05:46.615
Host localhost, user Postgres,
password Postgres, dbname Postgres,

77
00:05:46.615 --> 00:05:49.077
port 5432 and SSL mode disabled.

78
00:05:49.077 --> 00:05:53.841
Next up, let's check that error,
so if error does not equal to nil,

79
00:05:53.841 --> 00:05:56.484
what we're going to do is return nil.

80
00:05:56.484 --> 00:06:03.039
And here we're going to do format.error f,
and here we'll say db,

81
00:06:03.039 --> 00:06:08.022
open method modulo W and
pass in that error, right?

82
00:06:08.022 --> 00:06:11.908
So another format specify
that we haven't seen before.

83
00:06:11.908 --> 00:06:18.924
Otherwise we can do format, print line,
and we can say connected to database,

84
00:06:18.924 --> 00:06:24.075
instead of returning nil nil,
we're going to return db.

85
00:06:24.075 --> 00:06:25.210
&gt;&gt; Speaker 2: In a production app,

86
00:06:25.210 --> 00:06:28.303
where do you typically store
your database credentials?

87
00:06:28.303 --> 00:06:31.373
&gt;&gt; Melkey: Not in code,
for a connection string,

88
00:06:31.373 --> 00:06:35.195
I would typically store
them using AWS secrets.

89
00:06:35.195 --> 00:06:41.080
I actually am not a fan of doing.env
files, I think they are highly dangerous.

90
00:06:41.080 --> 00:06:46.915
And so, I prefer to handle that burden
with a proven service, like AWS client,

91
00:06:46.915 --> 00:06:51.802
secret manager, something like that,
and then you pull it down.

92
00:06:51.802 --> 00:06:56.991
Dot env files are good for
something you're building locally,

93
00:06:56.991 --> 00:07:01.809
I personally believe there's
more condom pros with them.

94
00:07:01.809 --> 00:07:06.156
Okay, let's go back to the application and
actually start using this db,

95
00:07:06.156 --> 00:07:09.404
so let's go ahead and
create Postgres database error.

96
00:07:09.404 --> 00:07:11.815
I'm going to store.open, so

97
00:07:11.815 --> 00:07:17.204
I bring in that store mod package
we just created, check that error.

98
00:07:17.204 --> 00:07:21.516
So if error does not equal to nil,
let's go ahead and

99
00:07:21.516 --> 00:07:26.711
return nil and the error, and
then in our application struck,

100
00:07:26.711 --> 00:07:30.153
let's go ahead and create a new db field.

101
00:07:30.153 --> 00:07:33.212
It's gonna be sql.db, like so

102
00:07:33.212 --> 00:07:39.230
you can see pgdb is yelling at us or
the compilers killing in us.

103
00:07:39.230 --> 00:07:42.071
We'll just put db as pg, db like so, so

104
00:07:42.071 --> 00:07:46.998
now our application struct also
has access to our database, okay?

105
00:07:46.998 --> 00:07:52.630
And this will work as is, but there is
one criteria that we need to be aware of,

106
00:07:52.630 --> 00:07:58.191
and that is like loose connections and
open connection with the db, right?

107
00:07:58.191 --> 00:08:00.482
So we want to make sure we close this,
now,

108
00:08:00.482 --> 00:08:03.546
Go offers a pretty cool way
of handling things like this.

109
00:08:03.546 --> 00:08:07.131
So if you go back to our main.go,

110
00:08:07.131 --> 00:08:12.256
right underneath the arrow
does not equal to nil

111
00:08:12.256 --> 00:08:17.651
where we declare app,
we can do app.db.close.

112
00:08:17.651 --> 00:08:21.303
Now, if you look at look at this,
this will make no sense,

113
00:08:21.303 --> 00:08:25.644
because the db will close before of
any ways of accessing it, right?

114
00:08:25.644 --> 00:08:31.358
But what we can do is use the built
in defer function from go.

115
00:08:31.358 --> 00:08:38.141
And this built in defer function tells our
application at the very end of execution,

116
00:08:38.141 --> 00:08:43.791
everything else has been done,
then go ahead and call this function.

117
00:08:45.797 --> 00:08:50.386
&gt;&gt; Melkey: So we defer it until the end,
hence the name, very good, so now,

118
00:08:50.386 --> 00:08:54.234
with all of that,
we can nuke our running go instance.

119
00:08:54.234 --> 00:09:01.758
If we do go run main.go, you should see
now that we are connected to our database,

120
00:09:01.758 --> 00:09:05.693
and we are still running on port 8080.

121
00:09:05.693 --> 00:09:09.308
So now we have a clear connection
between our back end and our database,

122
00:09:09.308 --> 00:09:13.115
even though it's not obvious,
we only have this little print statement.

123
00:09:13.115 --> 00:09:15.639
We will see in the next sub module
how we're actually going to load up

124
00:09:15.639 --> 00:09:16.670
our database with tables.

125
00:09:16.670 --> 00:09:21.823
How we're gonna explore them with psql,
and

126
00:09:21.823 --> 00:09:28.480
actually explore data that we persist,
read and delete.

