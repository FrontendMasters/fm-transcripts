WEBVTT

1
00:00:00.000 --> 00:00:01.918
&gt;&gt; Melkey: I think it's pretty
cool that we have going on here.

2
00:00:01.918 --> 00:00:05.507
We have our back end, and
we have connection to this database.

3
00:00:05.507 --> 00:00:11.101
Well, that's actually not true, we don't
have true connection to this database,

4
00:00:11.101 --> 00:00:14.139
but we do have a running database,
all right.

5
00:00:14.139 --> 00:00:17.963
So we're gonna go ahead and open up
another tab, because we should have,

6
00:00:17.963 --> 00:00:20.878
depending on what your style
is on my personal machine.

7
00:00:20.878 --> 00:00:25.411
I have three tabs occupied, one with
the editor, one with go.main running,

8
00:00:25.411 --> 00:00:26.928
and then one with Docker.

9
00:00:26.928 --> 00:00:31.516
And then I open up this new one so
I can keep importing stuff and exploring.

10
00:00:31.516 --> 00:00:35.416
Like I just said, we have Docker running,
we have a database connected.

11
00:00:35.416 --> 00:00:38.200
But this database, they're just chilling.

12
00:00:38.200 --> 00:00:40.608
It has no affiliation to
our project whatsoever,

13
00:00:40.608 --> 00:00:43.199
all because it's defined
in the same project route.

14
00:00:43.199 --> 00:00:45.860
For it, it doesn't matter.

15
00:00:45.860 --> 00:00:49.753
So here we're going to connect
to that database, all right?

16
00:00:49.753 --> 00:00:52.284
And for us to connect to that database,

17
00:00:52.284 --> 00:00:56.747
we're gonna actually introduce
a new package into our our project.

18
00:00:56.747 --> 00:00:59.451
And it's essentially a driver.

19
00:00:59.451 --> 00:01:05.334
It's a PostgreSQL driver,
the one that I recommend

20
00:01:05.334 --> 00:01:10.022
is by jackc, and it is called PGx, okay?

21
00:01:10.022 --> 00:01:15.180
So it is a PostgreSQL driver and
toolkit for Go.

22
00:01:15.180 --> 00:01:18.102
It has about 11,400 GitHub stars.

23
00:01:18.102 --> 00:01:20.498
It is relatively actively maintain.

24
00:01:20.498 --> 00:01:24.816
You can see, a couple weeks ago,
also written in Go.

25
00:01:24.816 --> 00:01:30.178
It's a pretty powerful driver
that we are going to install and

26
00:01:30.178 --> 00:01:32.353
use in our project here.

27
00:01:32.353 --> 00:01:37.525
Quick side note, this particular driver,

28
00:01:37.525 --> 00:01:42.429
this package, if you are on an LSP go PLS.

29
00:01:42.429 --> 00:01:46.215
It sometimes bugs out and
asks you to reinstall it or

30
00:01:46.215 --> 00:01:51.510
install like a particular version of it,
if you put in other packages.

31
00:01:51.510 --> 00:01:54.720
I think we'll see this
in this course here.

32
00:01:54.720 --> 00:02:00.719
It's not a deal breaker, it's just
very picky and a bit opinionated.

33
00:02:00.719 --> 00:02:02.021
But yeah, PGX is what we're gonna use.

34
00:02:02.021 --> 00:02:07.499
Again, it's just going to be our driver so
here, we're gonna use version four.

35
00:02:07.499 --> 00:02:10.634
So we're gonna do go get,

36
00:02:10.634 --> 00:02:18.483
github.com/jackc/pgx/v4/stdlib, standard
library.

37
00:02:23.548 --> 00:02:26.060
&gt;&gt; Melkey: Going back to our editor.

38
00:02:26.060 --> 00:02:29.903
Within the store folder,
we're gonna add a new file, and

39
00:02:29.903 --> 00:02:32.654
this file is going to be called database.

40
00:02:32.654 --> 00:02:38.966
So database.go, and
we're actually gonna write stuff inside.

41
00:02:38.966 --> 00:02:44.161
So we're gonna do declare our package
store and the purpose of this particular

42
00:02:44.161 --> 00:02:49.762
file, it's going to allow us to connect
to our running database right here, okay?

43
00:02:49.762 --> 00:02:51.609
The way we're gonna do this
is create a new function.

44
00:02:51.609 --> 00:02:58.887
So func open and func open is
going to not take any argument but

45
00:02:58.887 --> 00:03:04.463
is going to return a type sql.db and
an error.

46
00:03:04.463 --> 00:03:09.791
To bring in the SQL package, it's standard

47
00:03:09.791 --> 00:03:15.269
library import, you can do database/sql.

48
00:03:18.236 --> 00:03:22.395
&gt;&gt; Melkey: And in here, we're going to
basically instantiate a database struct

49
00:03:22.395 --> 00:03:25.646
that we're going to use
throughout our application.

50
00:03:25.646 --> 00:03:32.196
So here we can type db err
is going to be sql.open.

51
00:03:32.196 --> 00:03:36.738
And this whole argument here
is the connection string but

52
00:03:36.738 --> 00:03:42.144
the very first argument is going
to be the driver that we're using.

53
00:03:42.144 --> 00:03:44.063
And we just installed PGX.

54
00:03:44.063 --> 00:03:47.340
So here we can do PGX.

55
00:03:47.340 --> 00:03:52.074
And now this is gonna be an interesting
property in Go, like I said, if I do FMT,

56
00:03:52.074 --> 00:03:53.643
the compiler yells at me.

57
00:03:53.643 --> 00:03:56.132
You're not using FMT, right?

58
00:03:56.132 --> 00:03:59.452
But I could just do this.

59
00:03:59.452 --> 00:04:05.478
Because there are certain cases, like the
one we're gonna see now with Jax e PGX,

60
00:04:05.478 --> 00:04:10.106
where we don't implicitly use the library,
but we are using or

61
00:04:10.106 --> 00:04:13.009
we don't explicitly use the library.

62
00:04:13.009 --> 00:04:17.047
But we are implicitly using
it via this PGX connection

63
00:04:17.047 --> 00:04:19.750
string here in the SQL open method.

64
00:04:19.750 --> 00:04:29.407
So here we're gonna bring in
github.com/jackc/pgx/v4/stdlib.

65
00:04:29.407 --> 00:04:30.852
It's gonna yell at us.

66
00:04:30.852 --> 00:04:33.451
And here we're going to just ignore that.

67
00:04:37.744 --> 00:04:39.236
&gt;&gt; Melkey: Let me just
go close resolve this.

68
00:04:45.283 --> 00:04:46.372
&gt;&gt; Melkey: Yeah, there you go.

69
00:04:46.372 --> 00:04:48.766
So it just bugs out, so
I have to do an LSP restart.

70
00:04:48.766 --> 00:04:50.960
I'm wondering, does anyone else get that?

71
00:04:50.960 --> 00:04:53.796
Or you guys,
it's kosher on your side, good, yeah.

72
00:04:53.796 --> 00:04:58.053
So depending for me, on on UV with my
configuration, it does bug out, but

73
00:04:58.053 --> 00:05:01.986
it is working as expected, but
thank you for being patient, okay.

74
00:05:01.986 --> 00:05:03.663
Next is gonna be the actual
connection string.

75
00:05:03.663 --> 00:05:09.419
So here we'll do host equals,
it's gonna be local host, okay?

76
00:05:09.419 --> 00:05:12.250
The user is gonna be Postgres.

77
00:05:12.250 --> 00:05:17.128
The password is going to be Postgres.

78
00:05:17.128 --> 00:05:22.708
The db name is going to be Postgres, okay?

79
00:05:22.708 --> 00:05:28.079
And in here we'll do port 5432,
the one we specified in our Docker

80
00:05:28.079 --> 00:05:33.099
compose file, and then we'll just
add SSL mode equals disable.

81
00:05:37.013 --> 00:05:38.257
&gt;&gt; Melkey: I'll zoom out
just a little bit so

82
00:05:38.257 --> 00:05:40.434
you can we can see the entirety
of the connection string and

83
00:05:40.434 --> 00:05:41.739
make sure I don't have any typos.

84
00:05:41.739 --> 00:05:46.104
Host, local host, user, Postgres,
password, Postgres, db name,

85
00:05:46.104 --> 00:05:49.190
Postgres, port, 5432 and SSL mode disable.

86
00:05:49.190 --> 00:05:50.370
Next up, let's check that error.

87
00:05:50.370 --> 00:05:56.449
So if error does not equal to nil,
what we're going to do is return nil.

88
00:05:56.449 --> 00:06:01.133
And here we're going to do format.error f,
and

89
00:06:01.133 --> 00:06:07.883
here we'll say db open method modulo W and
pass in that error, right?

90
00:06:07.883 --> 00:06:11.919
So another format specify
that we haven't seen before.

91
00:06:11.919 --> 00:06:16.680
Otherwise we can do format,
print line, and

92
00:06:16.680 --> 00:06:20.325
we can say connected to database.

93
00:06:20.325 --> 00:06:23.944
Instead of returning nil nil,
we're gonna return db.

94
00:06:23.944 --> 00:06:25.264
&gt;&gt; Speaker 2: Yeah in a production app,

95
00:06:25.264 --> 00:06:28.211
where do you typically store
your database credentials?

96
00:06:28.211 --> 00:06:31.205
&gt;&gt; Melkey: Not in code for
a connection string,

97
00:06:31.205 --> 00:06:35.173
I would typically store
them using AWS secrets.

98
00:06:35.173 --> 00:06:38.392
I actually am not a fan
of doing .env files.

99
00:06:38.392 --> 00:06:40.983
I think they are highly dangerous.

100
00:06:40.983 --> 00:06:45.616
And so I prefer to handle that burden
with a proven service like AWS,

101
00:06:45.616 --> 00:06:49.619
client secrets, secret manager,
something like that.

102
00:06:49.619 --> 00:06:51.803
And then you pull it down.

103
00:06:51.803 --> 00:06:57.059
.ENV files, they're good for
something you're building locally,

104
00:06:57.059 --> 00:07:01.890
but I personally believe there's
more cons than pros with them.

105
00:07:01.890 --> 00:07:05.175
Okay, let's go back to our application and
actually start using this db.

106
00:07:05.175 --> 00:07:09.144
So let's go ahead and
create Postgres database error.

107
00:07:09.144 --> 00:07:11.113
I'm going to store.open.

108
00:07:11.113 --> 00:07:15.781
So to bring in that store
mod package we just created

109
00:07:15.781 --> 00:07:20.567
check that error, so
if error does not equal to nil.

110
00:07:20.567 --> 00:07:24.196
Let's go ahead and
return nil and the error and

111
00:07:24.196 --> 00:07:30.071
then in our application struck,
let's go ahead and create a new db field.

112
00:07:30.071 --> 00:07:36.407
It's gonna be sql.db like so,
you can see pgdb is yelling at us or

113
00:07:36.407 --> 00:07:42.879
the compilers yelling at us,
we'll just put db as pgdb, like so.

114
00:07:42.879 --> 00:07:46.589
So now our application struct
also has access to our database.

115
00:07:46.589 --> 00:07:52.351
Okay, and this will work as is, but there
is one criteria that we need to be aware

116
00:07:52.351 --> 00:07:58.039
of and that is like loose connections and
open connection with the db, right?

117
00:07:58.039 --> 00:08:00.067
So we wanna make sure we close this.

118
00:08:00.067 --> 00:08:03.634
Now Go offers a pretty cool way
of handling things like this.

119
00:08:03.634 --> 00:08:08.356
So if you go back to our main dog
go right underneath the airro

120
00:08:08.356 --> 00:08:11.572
is not equal to nil where we declare app.

121
00:08:11.572 --> 00:08:17.457
We can do app.db.close.

122
00:08:17.457 --> 00:08:22.031
Now if you look at this will make
no sense because the db will close

123
00:08:22.031 --> 00:08:25.176
before if any ways of accessing it, right?

124
00:08:25.176 --> 00:08:31.175
But what we can do is use
the built-in defer function from go.

125
00:08:31.175 --> 00:08:35.475
And this built-in defer
function tells our application,

126
00:08:35.475 --> 00:08:39.953
at the very end of execution,
everything else has been done.

127
00:08:39.953 --> 00:08:47.828
Then go ahead and call this function
&gt;&gt; Melkey: So we defer it until the end.

128
00:08:47.828 --> 00:08:49.493
Hence the name, very good.

129
00:08:49.493 --> 00:08:54.339
So now, with all of that,
we can nuke our running go instance.

130
00:08:54.339 --> 00:09:00.675
If we do go, run main.go, you should
see now that we are connected to

131
00:09:00.675 --> 00:09:05.828
our database and
we are still running on port 8080.

132
00:09:05.828 --> 00:09:08.985
So now we have a clear connection
between our back end and our database.

133
00:09:08.985 --> 00:09:15.393
Even though it's not obvious, we only have
this little print statement, we will see

134
00:09:15.393 --> 00:09:21.715
in the next submodule how we're actually
going to load up our database with tables.

135
00:09:21.715 --> 00:09:24.933
How we're gonna explore them,
with PSQL and

136
00:09:24.933 --> 00:09:29.262
actually explore data that we persist,
read, and delete.

