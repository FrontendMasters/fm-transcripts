WEBVTT

1
00:00:00.000 --> 00:00:05.969
&gt;&gt; Melkey: And I'm actually going to get
out of that previous directory we have,

2
00:00:05.969 --> 00:00:11.043
because here I would like us
to start the go project, okay?

3
00:00:11.043 --> 00:00:13.606
So this is going to be us now working and

4
00:00:13.606 --> 00:00:18.977
creating the go project again from
scratch, following this similar pattern,

5
00:00:18.977 --> 00:00:22.122
or quote,
unquote style of the previous one.

6
00:00:22.122 --> 00:00:26.840
But I'm not gonna just write a bunch of
stuff in main and delete and rewrite,

7
00:00:26.840 --> 00:00:28.178
delete and rewrite.

8
00:00:28.178 --> 00:00:31.141
We are actually going to be
building out the product structure.

9
00:00:31.141 --> 00:00:36.284
So I just want to kind of emphasize
that all that beginning stuff

10
00:00:36.284 --> 00:00:42.507
that we just did will help us create
the project as we move forward right now.

11
00:00:42.507 --> 00:00:46.554
And there's also gonna be new stuff that
we didn't cover in the beginning section,

12
00:00:46.554 --> 00:00:50.155
but that's gonna be expected,
especially when we spin up an HTTP server.

13
00:00:50.155 --> 00:00:52.172
We didn't cover HTTP servers at all,
right?

14
00:00:52.172 --> 00:00:55.851
We covered maybe underlying
data structures, but

15
00:00:55.851 --> 00:01:00.383
now we're gonna kind of just utilize
those into what I hope to be

16
00:01:00.383 --> 00:01:03.643
a more applicable side of writing go,
okay?

17
00:01:03.643 --> 00:01:05.253
So let's start.

18
00:01:05.253 --> 00:01:09.465
So go ahead and
make a new directory, mk directory,

19
00:01:09.465 --> 00:01:14.080
I'm just gonna say,
Frontend Masters will do project.

20
00:01:14.080 --> 00:01:15.862
I'm gonna cd into this project.

21
00:01:15.862 --> 00:01:19.596
And for the go mod init,
I'm gonna leave it up to you.

22
00:01:19.596 --> 00:01:23.168
If you want to the full implementation of,
let's say,

23
00:01:23.168 --> 00:01:28.338
github.com/the author name/the project,
fem, and I'll just do Project.

24
00:01:28.338 --> 00:01:29.606
Go ahead and do this, right?

25
00:01:29.606 --> 00:01:31.484
If you wanna make it shorter,
it's gonna be easier.

26
00:01:31.484 --> 00:01:34.557
I'm gonna go ahead and
do the full length here, okay?

27
00:01:34.557 --> 00:01:41.401
So if I create this, now we have our new
go.mod, and then I'm gonna do touch,

28
00:01:41.401 --> 00:01:47.748
oops, touch main.go
&gt;&gt; Melkey: Okay,

29
00:01:47.748 --> 00:01:52.550
in our main.go file, let's quickly just
put our package main and then func main,

30
00:01:52.550 --> 00:01:55.311
and then get our compiler
to stop yelling at us.

31
00:01:55.311 --> 00:01:59.251
The first thing, and
I just alluded to this earlier,

32
00:01:59.251 --> 00:02:02.412
is we're not gonna bog down our main.go.

33
00:02:02.412 --> 00:02:07.901
You wanna keep it as slim and
as simple as possible.

34
00:02:07.901 --> 00:02:11.316
Now, that's not a hard rule of thumb,
there's gonna be certain cases where you

35
00:02:11.316 --> 00:02:14.898
just need to instantiate a bunch of things
you may not go, that's completely fine.

36
00:02:14.898 --> 00:02:18.965
But your main.go should be just
the entry point to application.

37
00:02:18.965 --> 00:02:23.898
And then you're other data structures
that house the rest of your app should be

38
00:02:23.898 --> 00:02:28.534
responsible for other functionalities
that are the core implementation

39
00:02:28.534 --> 00:02:30.565
of whatever you're building.

40
00:02:30.565 --> 00:02:36.224
So in that, let's go ahead and make a new
directory in the root of our project now,

41
00:02:36.224 --> 00:02:39.272
I'm gonna call this internal, all right?

42
00:02:39.272 --> 00:02:44.549
And within internal,
we're gonna make a new folder called app.

43
00:02:44.549 --> 00:02:48.141
In this folder, I'm gonna stop
referring to them as folders.

44
00:02:48.141 --> 00:02:52.548
I'm gonna start referring
to these as packages, okay?

45
00:02:52.548 --> 00:02:56.540
Within app,
let's make a new file called app.go.

46
00:02:56.540 --> 00:03:01.439
Okay, here we'll make and
declare our new package app,

47
00:03:01.439 --> 00:03:05.943
and this app is going to
be housing our application.

48
00:03:05.943 --> 00:03:10.697
So when I say housing,
the first thing I want

49
00:03:10.697 --> 00:03:15.203
us to start to think about is data, okay?

50
00:03:15.203 --> 00:03:17.080
When he says housing, okay, data.

51
00:03:17.080 --> 00:03:20.423
And then the second thing is,
how are we gonna handle data?.

52
00:03:20.423 --> 00:03:25.640
And whenever you ask that question of
how you're gonna handle data in go,

53
00:03:25.640 --> 00:03:30.452
the first question or answer you
should have is, do I need a struck?

54
00:03:30.452 --> 00:03:33.882
Does this package need a struck, yes, no.

55
00:03:33.882 --> 00:03:35.902
In our case, our app package,

56
00:03:35.902 --> 00:03:40.412
the responsibility of this app package
is going to be having a bunch of

57
00:03:40.412 --> 00:03:44.091
resources that we can use
throughout our application.

58
00:03:44.091 --> 00:03:46.785
And because we're gonna
be passing this around,

59
00:03:46.785 --> 00:03:48.718
a struck is a viable solution here.

60
00:03:48.718 --> 00:03:53.777
So we're gonna do type, let's just call
it Application, it's gonna be a struct.

61
00:03:53.777 --> 00:03:56.915
And the first thing I'm gonna
put is gonna be a Logger.

62
00:03:56.915 --> 00:03:58.511
So let's just go ahead and
create a Logger.

63
00:03:58.511 --> 00:04:02.269
We're gonna use the built-in
Logger library,

64
00:04:02.269 --> 00:04:04.932
which you can use if you go up here.

65
00:04:04.932 --> 00:04:07.350
Let's do import and let's just do "log".

66
00:04:07.350 --> 00:04:11.565
And here it's going to be
a pointer to log.Logger.

67
00:04:14.484 --> 00:04:19.629
&gt;&gt; Melkey: And with a shrug, I didn't
show this in the previous example,

68
00:04:19.629 --> 00:04:21.484
I like constructors.

69
00:04:21.484 --> 00:04:24.263
I like the theme and
I like the purpose of a constructor.

70
00:04:24.263 --> 00:04:28.976
And I think for certain structs,
a constructor makes a lot of sense.

71
00:04:28.976 --> 00:04:30.544
So here we're gonna create
our first constructor.

72
00:04:30.544 --> 00:04:34.395
We're gonna do func capital
NewApplication, all right,

73
00:04:34.395 --> 00:04:36.790
and this is gonna return two things.

74
00:04:36.790 --> 00:04:42.148
It's gonna return a pointer to
application, and a potential error, okay?

75
00:04:42.148 --> 00:04:44.124
And here we're gonna
instantiate our logger.

76
00:04:44.124 --> 00:04:48.320
So here we do log.New, okay?

77
00:04:48.320 --> 00:04:51.793
We're gonna have all of the message
from a logger go to our standard output.

78
00:04:51.793 --> 00:04:56.940
So we're gonna use os.Stdout, okay?

79
00:04:56.940 --> 00:05:01.459
If you have go pls setup,
you should get the built-in auto import.

80
00:05:01.459 --> 00:05:06.380
If not, make sure that you are bringing
the OS package at the top.

81
00:05:06.380 --> 00:05:11.152
The order does not matter between this and
the log import.

82
00:05:11.152 --> 00:05:13.101
Okay, the second order is to be blank, so

83
00:05:13.101 --> 00:05:15.960
don't really care about any of
the semantic styling of log.

84
00:05:15.960 --> 00:05:19.100
But what we do wanna add to
our logger is timestamps.

85
00:05:19.100 --> 00:05:21.723
So what we can do is log.ldate.

86
00:05:21.723 --> 00:05:26.185
I'm gonna pipe this with log.ltime.

87
00:05:26.185 --> 00:05:30.386
I mean, every time we use any of
the methods built into our logger, like

88
00:05:30.386 --> 00:05:35.727
printing, failing, error printing, we'll
get the timestamp from our logger as well.

89
00:05:35.727 --> 00:05:38.428
Next we're going to declare our app.

90
00:05:38.428 --> 00:05:43.897
So this is gonna be
a reference to our application.

91
00:05:43.897 --> 00:05:47.481
I'm gonna do logger like so, and

92
00:05:47.481 --> 00:05:51.836
then we're gonna do return app and nil.

93
00:05:51.836 --> 00:05:53.041
What is the logger doing?

94
00:05:53.041 --> 00:05:55.606
We're going to use
the logger as opposed to

95
00:05:55.606 --> 00:05:58.249
format print line across our application.

96
00:05:58.249 --> 00:06:00.072
So this is gonna be
a more structured way for

97
00:06:00.072 --> 00:06:02.614
us to understand what's
happening in our backend system.

98
00:06:02.614 --> 00:06:06.907
And for us to properly diagnose
maybe error print statements or

99
00:06:06.907 --> 00:06:11.687
just things that we need to kind of
dig deeper and use print debugging.

100
00:06:13.907 --> 00:06:15.689
&gt;&gt; Melkey: Okay, so
a few things I wanna quickly mention here.

101
00:06:15.689 --> 00:06:19.972
So one, we are returning a pointer
to application and an error type.

102
00:06:19.972 --> 00:06:24.115
This is the first time we should be
seeing the error type in our code.

103
00:06:24.115 --> 00:06:27.284
And you can see my return type,
I have app and nil.

104
00:06:27.284 --> 00:06:33.717
So nil are valid error types, okay,
they satisfy the interface for an error.

105
00:06:33.717 --> 00:06:36.253
So you can put nil,
that's gonna be good, okay?

106
00:06:36.253 --> 00:06:40.385
As for the app itself, you can see here
I have the ampersand cuz I'm pointing to

107
00:06:40.385 --> 00:06:42.023
the memory of an application.

108
00:06:42.023 --> 00:06:44.943
If I remove this,
a compiler yells at us, right?

109
00:06:44.943 --> 00:06:48.173
If you want to solve this,
you can just move the pointer that we're

110
00:06:48.173 --> 00:06:50.838
responding with or
returning with, to be more exact.

111
00:06:50.838 --> 00:06:54.690
But here, because we're gonna be
modifying our application and using it.

112
00:06:54.690 --> 00:06:59.037
And I also typically strongly
recommend that if you know the data

113
00:06:59.037 --> 00:07:03.882
structure of your app, I'd recommend
using a pointer to that struct.

114
00:07:03.882 --> 00:07:07.250
So here we have our application, okay, and

115
00:07:07.250 --> 00:07:12.360
right now it's simple functionality
is to create a new app for us.

116
00:07:12.360 --> 00:07:17.153
Next, in internal,
I'm not gonna write anything here, but

117
00:07:17.153 --> 00:07:20.022
to make a new package called routes.

118
00:07:20.022 --> 00:07:23.933
And then within routes, we do routes.go
and all I'm gonna write here is package

119
00:07:23.933 --> 00:07:26.935
routes, cuz if you don't,
your code's not gonna compile.

120
00:07:26.935 --> 00:07:33.290
That's all we're gonna do for now, okay?

121
00:07:33.290 --> 00:07:36.376
And then back in our func main,

122
00:07:36.376 --> 00:07:41.024
we are going to do a couple
of exciting things.

123
00:07:41.024 --> 00:07:46.054
So first, we're not gonna change any
of the signature of the func main cuz

124
00:07:46.054 --> 00:07:51.508
we can't, but what we are going to do is
create and instantiate our app struct.

125
00:07:51.508 --> 00:07:53.647
So here let's do an import, and

126
00:07:53.647 --> 00:07:59.205
this is gonna be where we import something
from our package, our own project here.

127
00:07:59.205 --> 00:08:04.312
If you need a reminder of what your
modules is called, the go.mod is kind of

128
00:08:04.312 --> 00:08:09.921
the equivalent of the package.JSON for
those of us who are familiar with web dev.

129
00:08:09.921 --> 00:08:13.656
Go.mod has the name of your module here.

130
00:08:13.656 --> 00:08:18.824
It will also have the version of go that
was used to spin up, so the go mod init.

131
00:08:18.824 --> 00:08:24.368
And as we bring in different imports
through our project, those direct and

132
00:08:24.368 --> 00:08:28.952
indirect projects and
imports will be listed in the go.mod.

133
00:08:28.952 --> 00:08:31.861
So here, I'm gonna go back to my main,

134
00:08:31.861 --> 00:08:37.787
I'm gonna import the name of my module
against a Github melkeydev femProject.

135
00:08:37.787 --> 00:08:43.161
And in here, I'm gonna route
it to internal/app, like so.

136
00:08:43.161 --> 00:08:45.616
And if you wanna confirm
that it worked correctly,

137
00:08:45.616 --> 00:08:48.824
you should be getting this error message,
imported but not used.

138
00:08:48.824 --> 00:08:50.768
If it says it cannot find the import,

139
00:08:50.768 --> 00:08:54.361
you may have some sort of mistake
going on between your module name.

140
00:08:54.361 --> 00:08:58.370
Don't forget the internal part,
I do that sometimes.

141
00:08:58.370 --> 00:09:00.895
Here we're gonna instantiate our app.

142
00:09:00.895 --> 00:09:03.948
We're also gonna explicitly check for
the error,

143
00:09:03.948 --> 00:09:07.785
even though we know at this time
that error is always gonna be no.

144
00:09:07.785 --> 00:09:10.994
We're gonna do app error as the app name.

145
00:09:10.994 --> 00:09:15.621
So app, I'm gonna do new application.

146
00:09:23.316 --> 00:09:29.346
&gt;&gt; Melkey: Okay, here we'll say,

147
00:09:29.346 --> 00:09:33.370
if err != nil.

148
00:09:33.370 --> 00:09:35.019
We're going to PANIC.

149
00:09:35.019 --> 00:09:37.417
So this is the first
introduction to PANIC.

150
00:09:37.417 --> 00:09:41.336
Now, PANIC and
go is exactly how it sounds like,

151
00:09:41.336 --> 00:09:45.743
it's gonna PANIC and
completely wipe and cloche app.

152
00:09:45.743 --> 00:09:47.261
It's self-destruction,

153
00:09:47.261 --> 00:09:50.684
it's going to exit the application
with a fatal error message.

154
00:09:50.684 --> 00:09:55.441
We reserve PANIC in situations
where it should never occur.

155
00:09:55.441 --> 00:09:58.215
And if it does, stuff has hit the fan and

156
00:09:58.215 --> 00:10:02.270
we need to in our app deservedly
should turn off or break.

157
00:10:02.270 --> 00:10:06.326
You don't use PANIC if there is
a foreseen potential for an error or

158
00:10:06.326 --> 00:10:10.830
a controlled error statement,
because it will crash your application.

159
00:10:10.830 --> 00:10:14.974
So in this case,
we should never see our app.

160
00:10:14.974 --> 00:10:19.227
The kind of first step in our application,
we spin this up, error out.

161
00:10:19.227 --> 00:10:21.937
If we do,
then we know we can continue our app,

162
00:10:21.937 --> 00:10:25.692
we know if there's an error in
getting our application struck,

163
00:10:25.692 --> 00:10:28.976
that the rest of the app is
gonna probably fault as well.

164
00:10:28.976 --> 00:10:31.734
So we have this PANIC here on purpose.

165
00:10:31.734 --> 00:10:39.927
It's a keyword, and it has some pretty
powerful use cases that we can use, okay?

166
00:10:39.927 --> 00:10:41.525
Next thing I'm gonna use app.

167
00:10:41.525 --> 00:10:44.540
I'm gonna use that logger property,
so .logger.

168
00:10:44.540 --> 00:10:49.665
I'm just gonna do a print line,
and all I'm going to write is,

169
00:10:49.665 --> 00:10:52.580
"we are running our app" like so.

