WEBVTT

1
00:00:00.174 --> 00:00:04.756
&gt;&gt; Melkey: So now that we have the setup
test function, Go has a pretty cool

2
00:00:04.756 --> 00:00:10.038
feature that, you saw that this file
has test at the end of its file name.

3
00:00:10.038 --> 00:00:15.567
This lets the Go tester, which we'll
explore, identify that it's a test file.

4
00:00:15.567 --> 00:00:19.264
But now we wanna tell that tester,
that Go's built-in,

5
00:00:19.264 --> 00:00:22.214
tester, what functions are actually tests.

6
00:00:22.214 --> 00:00:26.003
And we can do this very simply by
just writing a function with the word

7
00:00:26.003 --> 00:00:26.676
test in it.

8
00:00:26.676 --> 00:00:30.223
So we can do TestCreateWorkout, like so.

9
00:00:30.223 --> 00:00:34.889
It's going to take our fixture,
t, testing.T, okay?

10
00:00:34.889 --> 00:00:36.264
It's not gonna return anything.

11
00:00:36.264 --> 00:00:41.110
And here is where we're going to
define not only our TestDB, but

12
00:00:41.110 --> 00:00:44.721
we're also gonna define
our Table tests here.

13
00:00:44.721 --> 00:00:50.306
So first things first, go ahead and
do setupTestDB(, pass it our fixture t,

14
00:00:50.306 --> 00:00:54.722
will defer db.Close,
I don't have any loose connections.

15
00:00:54.722 --> 00:00:56.828
Or lingering connections,
I think it's more appropriate.

16
00:00:56.828 --> 00:01:00.266
And here we can actually get
the pool.PostgresWorkoutStore,

17
00:01:00.266 --> 00:01:02.437
the actual WorkoutStore we're using.

18
00:01:02.437 --> 00:01:04.834
We don't need to make a fake,
we don't need to make a mock.

19
00:01:04.834 --> 00:01:08.277
None of that,
we're gonna use the real deal.

20
00:01:08.277 --> 00:01:12.535
What we're gonna use in production is
what we're gonna use here in testing.

21
00:01:12.535 --> 00:01:16.857
And so the goal of testing for me is to
get as close to the real deal as possible.

22
00:01:16.857 --> 00:01:19.863
So we have the store,
new.PostgresWorkoutStore.

23
00:01:19.863 --> 00:01:22.471
And here we're gonna
create our set of tests.

24
00:01:22.471 --> 00:01:28.676
So we have this variable tests, we can
declare it as a slice of structs, okay?

25
00:01:28.676 --> 00:01:31.537
And then we're gonna make sure
we format the struct correctly.

26
00:01:31.537 --> 00:01:36.545
So again, the first curly brace is the
fields identifying what that struck is,

27
00:01:36.545 --> 00:01:40.592
and the second set of curly braces
fills in those fields, okay?

28
00:01:40.592 --> 00:01:42.811
Again, this is an anonymous struct.

29
00:01:42.811 --> 00:01:45.667
So for our tests, every test needs a name.

30
00:01:45.667 --> 00:01:50.158
This helps us know what tests are failing,
so, Name string.

31
00:01:50.158 --> 00:01:54.243
For this particular test, we're gonna
be testing how to create a workout.

32
00:01:54.243 --> 00:01:59.310
We're gonna test workout, and there's
gonna be a pointer to a workout, like so.

33
00:01:59.310 --> 00:02:04.033
And then we want to see, do we want to
check if this is going to error or not?

34
00:02:04.033 --> 00:02:06.581
We wanna check happy path,
and the not-so-happy path.

35
00:02:06.581 --> 00:02:10.275
So, WantError,
this is gonna be a boolean, like so.

36
00:02:10.275 --> 00:02:12.643
So here we have defined
our anonymous struct.

37
00:02:12.643 --> 00:02:15.989
It has three fields,
all of different types.

38
00:02:15.989 --> 00:02:21.110
And then here, because our struct is
going to be a slice of these structs,

39
00:02:21.110 --> 00:02:23.919
every entry in the second set of brackets

40
00:02:23.919 --> 00:02:28.564
needs to be separated by its own
individual set of curly braces to.

41
00:02:28.564 --> 00:02:33.764
To identify one individual workout, or
one individual entry in the struck.

42
00:02:33.764 --> 00:02:37.967
So for example, we can do our first
workout as name, our first test.

43
00:02:37.967 --> 00:02:40.469
And we can say, ValidWorkout.

44
00:02:40.469 --> 00:02:42.605
All right,
that's gonna be the happy-path test.

45
00:02:42.605 --> 00:02:44.259
We do not expect this to fail, all right?

46
00:02:44.259 --> 00:02:47.394
We want this to work completely fine.

47
00:02:47.394 --> 00:02:51.897
And if it doesn't work, it's gonna
identify something is wrong in our system.

48
00:02:51.897 --> 00:02:55.899
Here we'll do a workout, and
it's going to be an address to workout.

49
00:02:55.899 --> 00:02:59.993
Okay, and here we're gonna pull in
the details for what work we wanna use.

50
00:02:59.993 --> 00:03:05.176
So these details, let's make sure we
get them correct, So Title B, Push Day.

51
00:03:05.176 --> 00:03:07.767
All right, we'll do our description.

52
00:03:07.767 --> 00:03:11.248
We'll say upper body day.

53
00:03:11.248 --> 00:03:13.453
Duration in minutes, we'll make it 60.

54
00:03:13.453 --> 00:03:14.658
So one hour.

55
00:03:14.658 --> 00:03:16.872
Calories burn,
we can say something like 200.

56
00:03:16.872 --> 00:03:19.229
And then for entries, right,

57
00:03:19.229 --> 00:03:24.132
we know this is going to be a slice
of our workout entry, like so.

58
00:03:24.132 --> 00:03:28.996
And again, because this is a slice,
every entry in the workout entry slice

59
00:03:28.996 --> 00:03:32.407
needs to be defined with its
own set of curly braces.

60
00:03:32.407 --> 00:03:35.252
All right, so here we can define
every entry in that workout.

61
00:03:35.252 --> 00:03:39.219
So here we can say, bench press,

62
00:03:39.219 --> 00:03:43.484
sets, we could say 3, all right?

63
00:03:43.484 --> 00:03:46.168
And now, here's gonna be a bit of a fall.

64
00:03:46.168 --> 00:03:49.378
So, reps, let's say I did 10 reps.

65
00:03:49.378 --> 00:03:50.852
There's gonna be an issue, right?

66
00:03:50.852 --> 00:03:56.944
If I fix this, can I use 10 untyped
in constant as pointer int value?

67
00:03:56.944 --> 00:04:00.925
Okay, so you may be thinking,
let's just do something like this.

68
00:04:00.925 --> 00:04:02.024
That also doesn't work, right?

69
00:04:02.024 --> 00:04:06.314
So the issue here is because,
if you remember, it's not kReps,

70
00:04:06.314 --> 00:04:08.271
excuse me, it's just Reps.

71
00:04:08.271 --> 00:04:12.432
The issue here is, if you remember,
when we first started to create

72
00:04:12.432 --> 00:04:16.083
our WorkoutEntry,
we determined that the type for reps and

73
00:04:16.083 --> 00:04:19.235
duration in seconds are gonna
be pointers to ints.

74
00:04:19.235 --> 00:04:22.570
And for Go, you can't just in place say

75
00:04:22.570 --> 00:04:27.231
that this 10 is going to
be a address of 10, right?

76
00:04:27.231 --> 00:04:32.416
You have to declare a separate variable
and then use that variable accordingly.

77
00:04:32.416 --> 00:04:36.822
You can extract the address
of that variable.

78
00:04:36.822 --> 00:04:41.188
Now, what I'm going to do,
just to help make this a little bit nicer,

79
00:04:41.188 --> 00:04:43.926
I'm gonna make a new function called func.

80
00:04:43.926 --> 00:04:47.479
I'm gonna intPtr, so int pointer,
it's gonna be (i int), and

81
00:04:47.479 --> 00:04:49.712
it's going to return a pointer to an int.

82
00:04:49.712 --> 00:04:54.003
And this is going to be simply a helper
function that allows me to extract

83
00:04:54.003 --> 00:04:57.092
the address of whatever
variable I pass into this.

84
00:04:57.092 --> 00:05:00.005
Okay, I'm gonna repeat this for a float.

85
00:05:00.005 --> 00:05:04.409
So, instead of int pointer, oops,
I'm gonna call this float pointer.

86
00:05:04.409 --> 00:05:09.176
And the argument is not long to be an int,
it's gonna be a float 64.

87
00:05:09.176 --> 00:05:12.226
And the return is not
gonna be a pointer int,

88
00:05:12.226 --> 00:05:15.123
it's gonna be a float 64 bit, like so.

89
00:05:15.123 --> 00:05:19.518
But continuing on, we're gonna do int
pointer, I'm gonna pass 10, okay?

90
00:05:19.518 --> 00:05:21.542
Then we do our weight.

91
00:05:21.542 --> 00:05:25.520
Again, weight is a pointer
to a float 64 bits.

92
00:05:25.520 --> 00:05:29.533
So we're gonna floatPtr,
I'm gonna put 135.5.

93
00:05:29.533 --> 00:05:36.090
And then here we'll do Notes, and
here we'll write, Warm up properly, okay?

94
00:05:36.090 --> 00:05:39.828
And then the order index will make 1,
okay?

95
00:05:39.828 --> 00:05:44.399
So we're not fully done yet,
because we are missing one more field.

96
00:05:44.399 --> 00:05:46.089
And do we want this to error?

97
00:05:46.089 --> 00:05:50.917
And since this is our valid test case, no,
I'm gonna set WantError to false, okay?

98
00:05:50.917 --> 00:05:53.566
&gt;&gt; Speaker 2: Since you're
using a slice of test cases,

99
00:05:53.566 --> 00:05:55.931
would all tests run even if one fails?

100
00:05:55.931 --> 00:05:58.026
&gt;&gt; Melkey: Will all tests
run even if one fails?

101
00:05:58.026 --> 00:06:00.638
So, that is actually fully up to you.

102
00:06:00.638 --> 00:06:04.862
I'll show you, and like,
once we range over the tests,

103
00:06:04.862 --> 00:06:09.634
we use the fixture to run each
individual test in our slice here.

104
00:06:09.634 --> 00:06:14.433
And if you explicitly face
an unforeseen error, it stops it.

105
00:06:14.433 --> 00:06:16.286
So it does not continue.

106
00:06:16.286 --> 00:06:18.687
It just stops the flow of the error.

107
00:06:18.687 --> 00:06:21.959
But also it's up to you
how you wanna handle it.

108
00:06:21.959 --> 00:06:26.764
You can actually explicitly say to return,
if you want a certain error or not.

109
00:06:26.764 --> 00:06:29.075
And I'll show you how that looks like.

