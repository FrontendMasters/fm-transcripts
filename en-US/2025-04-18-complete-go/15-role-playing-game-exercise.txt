[00:00:00]
>> Melkey: Now we're actually going to do an exercise. So I'm gonna ask you guys to write some code without me kind of yapping and writing it for you. So let's go here, we're gonna make just a new directory. I'm gonna call it exercise, okay? Within exercise, I'm gonna make a new file called exercise.go, okay?

[00:00:20]
Here we're gonna make a package called exercise.1 Again, we have a lot more freedom now that we've made our own package. And if you notice by my voice, I'm gonna get a little more excited, because this is where I would assume the training wheels was gonna come off.

[00:00:33]
Because we have a lot more control with our Go code. We were all writing everything in the main code, that is pretty rigid. Here we have a lot more freedom. So here's the exercise, I'm gonna read it out, and I'm gonna give some code. But basically we're gonna create, this is a new main.go, but exercise.go is fine.

[00:00:52]
I'm gonna make a following RP game, and I guess you can create this in your main.go if you wanna execute this. But basically, I want you guys to create a player struct that has a Name and Inventory field. I want you to create an item truck that has a Name and Type field.

[00:01:09]
And I want these to have certain methods, okay? So I want these methods to all be on the player struct. I want method one to be PickUpItem, it adds an item to a players inventory. DropItem removes the item from an inventory by name. And then UseItem, you could hard code this depending on what the item name is.

[00:01:30]
You can just do, let's say the item you pick up is a potion, using the potion, we can hard code this like, if potion, regain five health.` But you don't need to actually have a player health bar, just you can print differences between your items. Okay, so here I'm gonna paste some, just boiler plate code here.

[00:01:52]
So this is kind of the preliminary setup I think, would be appropriate, right? We have an item struct, a player struct, and three methods. So kinda already set up the boulder plate for those methods here. Try it out, if you don't get it, honestly, that's not a big deal.

[00:02:12]
But yeah, explore it, see how far you can go. So, we left off by trying out an exercise, where we basically are trying to mimic the very, very simple functionality of an MMORPG, or something like that. Where you have a player, an item, you can pick items up, drop items, and use items.

[00:02:35]
This is just an intended exercise for us to get used to how things work in Go. And so, I'm going to quickly just show the solutions for some of these here. I'm not gonna spend too much time exploring the intricacies of them. We can revisit this at the end, but we're gonna just simply show how I personally implemented these methods, right?

[00:03:02]
So for PickUpItem, all I really did was, I know I have my p.Inventory, so I'm gonna just quickly do import. For me, pickup item, I know I have my p.Inventory, and I'm just gonna append the item that I pick up into my inventory. And add his little print statement that says, I picked up an item, do, do, do, okay?

[00:03:26]
So, I think that one was, maybe the most straightforward implementation. Next will be a DropItem. So, DropItem, You can see my editor's suggesting a functionality which will replace a pen with slices.Delete, which we were talking about. That starting in Go 121, the standard library now provides some packages that help with slices and maps.

[00:03:54]
I think those are phenomenal, I think those are great. They're very helpful. But nothing wrong doing things kind of under the hood, cuz I think the slices.Delete function does the exact same as this append implementation here. But basically, the secret, I guess, of DropItem, is we iterate through our inventory.

[00:04:16]
If we find the item in our inventory that matches the item we are dropping, we are basically going to create a combination of our slices. So here we are appending our p.Inventory up to i, and i is the index of the item that we found ranging over our inventory.

[00:04:42]
And then we are going to append it to all the values after, so i + 1. So remember back when we were exploring slices, we had the ellipsis here, that contains all the values from another slice. Which is essentially what we're doing here, we're creating two slices from our original slice, and just append those together to get this new slice, this new inventory.

[00:05:07]
And then I have a return here. And just for a safe catch, if the value does not exist in my inventory, I just quickly say, does not have an inventory. So, the name of the player, Melkey does not have, let's say, ax, in the inventory. Okay, and then use item, this one, I think, is probably the one that has the most room for debate, I suppose.

[00:05:40]
Cuz there's lots of different ways, I was even talking to Michael just earlier, and I didn't even consider using the drop method in the, or DropItem. I kind of just re-implemented the same append functionality again. But, yeah, I think the way I initially explained it, to use an item, I just range over that item again.

[00:06:11]
If I find it, and I hard coded, like the name potion, then all I'll just say is, I feel good, feel rejuvenated. Let me remove that item after use. So with removing an item like this, I mean, at first it would seem like this is pretty heavy, and allocating new memory, cuz it seems like you'd be wiping away the old one.

[00:06:36]
Well not wiping it, but, yeah, wiping it the old inventory and reallocating a new one, is that what's happening under the hood? It's wiping out a new wiping out the old memory and making a new one. The context of the append method, again, it depends on the capacity and the length of the underlying array.

[00:07:05]
Because here, I think what you're referencing is, here we're basically taking the existing one, splitting it up, adding that, and here's a new inventory, right? The thing is, if you look, we're not explicitly reinstantiating a new slice, right? Here we have this inventory, and we're just reassigning it a value, that's why there's single equals operation here.

[00:07:29]
And so what's happening is we are actually reusing the length and capacity of the original slice. We're just replacing those values. So we're not recreating the underlying data structure, the slice or the array, what we're doing is just wiping out all the values. But let's say this append method is, every time we use it, we're adding, I'm gonna say, 20 or 100 new items.

[00:07:59]
That would be pretty inefficient, because then in that case, we would be basically battling the doubling capacity of the append method in Go, under the hood.

