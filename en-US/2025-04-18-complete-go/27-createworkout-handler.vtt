WEBVTT

1
00:00:00.000 --> 00:00:02.898
&gt;&gt; Melkey: Sweet, so with that created,

2
00:00:02.898 --> 00:00:07.698
we can actually hop back
into our WorkoutHandler.

3
00:00:07.698 --> 00:00:10.769
So if you wanna go into
the WorkoutHandler,

4
00:00:10.769 --> 00:00:12.681
this is in the API package.

5
00:00:12.681 --> 00:00:15.496
When we were querying these functions,

6
00:00:15.496 --> 00:00:20.709
we got preliminary kind of responses
of created a workout, and we show that

7
00:00:20.709 --> 00:00:25.695
we can parse the slug from a query
that we are hitting using Chi, right?

8
00:00:25.695 --> 00:00:28.893
We're using the params
workout ID right up here.

9
00:00:28.893 --> 00:00:31.645
So we're gonna kind of
up this up a little bit.

10
00:00:31.645 --> 00:00:36.811
We are no longer just going to return
these random things, we're actually

11
00:00:36.811 --> 00:00:42.154
gonna try and communicate through our
client, to our API, to our database.

12
00:00:42.154 --> 00:00:46.360
I'm gonna start with our handle,
create workout down here.

13
00:00:46.360 --> 00:00:49.613
So right now it should have
just a simple print statement.

14
00:00:49.613 --> 00:00:50.899
Go ahead and just nuke that.

15
00:00:50.899 --> 00:00:52.103
We no longer need that.

16
00:00:52.103 --> 00:00:56.411
I'm gonna start off by creating
a variable to store the workout, okay?

17
00:00:56.411 --> 00:00:58.480
So we can do var workout.

18
00:00:58.480 --> 00:01:01.558
It's going to be of type,
store.workout, like so.

19
00:01:01.558 --> 00:01:03.363
And I'm gonna decode this.

20
00:01:03.363 --> 00:01:06.594
We're gonna declare an error,
and this is gonna be JSON.

21
00:01:06.594 --> 00:01:08.909
So try to see if this is brought in.

22
00:01:08.909 --> 00:01:12.079
It's a standard package in Go,
the JSON package.

23
00:01:12.079 --> 00:01:16.567
I'm gonna json.NewDecoder, okay?

24
00:01:16.567 --> 00:01:19.384
And we're gonna decode the r.Body.

25
00:01:19.384 --> 00:01:21.155
And just a quick reminder,

26
00:01:21.155 --> 00:01:25.853
r is the pointer to our HTTP request
that we're getting from the caller.

27
00:01:25.853 --> 00:01:30.056
This could be client, this could
be whatever it is, just us testing

28
00:01:30.056 --> 00:01:35.165
a different terminal, but the contents of
the request are going to be in r.Body.

29
00:01:35.165 --> 00:01:41.003
And what we're essentially doing here
is we are using this JSON package to

30
00:01:41.003 --> 00:01:46.665
first of all, create a strut for
us that's going to parse the r.Body.

31
00:01:46.665 --> 00:01:52.585
And we're gonna parse the contents
of r.Body into our workout here.

32
00:01:52.585 --> 00:01:57.943
So do .Decode, and
then parse in the address of workout.

33
00:01:59.847 --> 00:02:03.343
&gt;&gt; Melkey: Now, the reason this
works is because if we go back to

34
00:02:03.343 --> 00:02:06.686
our store.workout,
we have our JSON tags here.

35
00:02:06.686 --> 00:02:11.752
JSON ID, title description, duration
minutes, calories burned, and entries.

36
00:02:11.752 --> 00:02:15.184
So when we expect r.Body,
the body of the request,

37
00:02:15.184 --> 00:02:19.643
it's going to have these JSON
fields with the appropriate values.

38
00:02:19.643 --> 00:02:24.849
But it allows us to easily decode
that content into our workout here,

39
00:02:24.849 --> 00:02:28.093
our variable that we declared just above.

40
00:02:28.093 --> 00:02:31.731
Let's go ahead and handle this error
cuz our compilers matter to us.

41
00:02:31.731 --> 00:02:34.550
We can do if error does not equal to nil.

42
00:02:34.550 --> 00:02:36.105
We can do a few things.

43
00:02:36.105 --> 00:02:41.909
First, we're gonna quickly just do
a fmt.PrintLn, I'm gonna say error, okay?

44
00:02:41.909 --> 00:02:47.419
This is not permanent, this is just for
us as we build this out, okay?

45
00:02:47.419 --> 00:02:50.149
So if there's any unforeseen errors,

46
00:02:50.149 --> 00:02:55.041
we'll see this in our terminal
that's running our Go server, okay?

47
00:02:55.041 --> 00:02:57.334
But this is not really
a good way to handle errors,

48
00:02:57.334 --> 00:03:00.020
I'll show you how we can improve
this in just a little bit.

49
00:03:00.020 --> 00:03:04.360
But I'm a fan of, let's get something
working that does a preliminary job and

50
00:03:04.360 --> 00:03:05.824
then we can improve on it.

51
00:03:05.824 --> 00:03:10.071
So with that, we now also have to
handle the error for the caller, okay?

52
00:03:10.071 --> 00:03:14.203
So that first error statement is for us
to see what's going down in our backend.

53
00:03:14.203 --> 00:03:17.009
This is to respond to the caller
that tells them, hey,

54
00:03:17.009 --> 00:03:18.844
I couldn't process your request.

55
00:03:18.844 --> 00:03:21.856
So we can pass in the ResponseWriter w,
and

56
00:03:21.856 --> 00:03:26.055
the message could be failed
to create workout, all right?

57
00:03:26.055 --> 00:03:27.588
And then the status code.

58
00:03:27.588 --> 00:03:31.243
So we can do
http.StatusInternalServerError,

59
00:03:31.243 --> 00:03:32.898
also known as 500.

60
00:03:32.898 --> 00:03:35.650
Once you have that, please make sure
you add the return, cuz if you don't,

61
00:03:35.650 --> 00:03:37.414
your client's gonna see the error message,
but

62
00:03:37.414 --> 00:03:39.325
then you're gonna continue
on with your function.

63
00:03:39.325 --> 00:03:41.524
Which is something you definitely
do not want to handle.

64
00:03:41.524 --> 00:03:46.625
Missing return series is pretty common,
it happens, so just make sure you add it.

65
00:03:46.625 --> 00:03:49.909
Now, the cool part is, I have a question,

66
00:03:49.909 --> 00:03:53.571
if anyone has the answer
right away let me know.

67
00:03:53.571 --> 00:03:58.129
But right now how do we have access from
the scope of this function, from the scope

68
00:03:58.129 --> 00:04:02.507
of this package, or API package page,
how can we possibly hit the database?

69
00:04:04.708 --> 00:04:06.623
&gt;&gt; Speaker 2: Through the app struct.

70
00:04:06.623 --> 00:04:08.500
&gt;&gt; Melkey: Through the app struct?

71
00:04:08.500 --> 00:04:14.564
That's a pretty good answer, but
it's not necessarily the app struct.

72
00:04:14.564 --> 00:04:18.617
It's actually gonna be through
our WorkoutHandler struct, okay?

73
00:04:18.617 --> 00:04:22.143
So right now, when we first created,
I purposely left it empty

74
00:04:22.143 --> 00:04:26.399
because I wanted to demonstrate how we
can add on to this truck to do things for

75
00:04:26.399 --> 00:04:30.016
us that can kind of connect with
other parts of our application.

76
00:04:30.016 --> 00:04:34.223
So here, the WorkoutHandler is
just simply the handler for

77
00:04:34.223 --> 00:04:36.421
us to create these methods on.

78
00:04:36.421 --> 00:04:42.531
But now what we can do is, If we go up
here, we can open up this struct and

79
00:04:42.531 --> 00:04:46.689
we can include a new WorkoutStore,
all right?

80
00:04:46.689 --> 00:04:51.545
Which can be of type store.WorkoutStore.

81
00:04:51.545 --> 00:04:55.780
And I wanna emphasize
this part a little bit.

82
00:04:55.780 --> 00:04:57.705
WorkoutStore is what?

83
00:04:57.705 --> 00:04:58.876
Does anyone remember?

84
00:05:00.970 --> 00:05:02.033
&gt;&gt; Speaker 3: The database.

85
00:05:02.033 --> 00:05:03.805
&gt;&gt; Melkey: It's the interface.

86
00:05:03.805 --> 00:05:05.689
&gt;&gt; Melkey: The WorkoutStore
is the interface, right?

87
00:05:05.689 --> 00:05:06.841
It's right here.

88
00:05:06.841 --> 00:05:10.535
And this is kind of the highlight I want
to incorporate when we first created this.

89
00:05:10.535 --> 00:05:15.142
From the perspective of our API layer,
all it knows is this interface.

90
00:05:15.142 --> 00:05:17.950
It doesn't know about our
PostgresWorkoutStore or

91
00:05:17.950 --> 00:05:20.640
any of the methods and
logic that we created on it.

92
00:05:20.640 --> 00:05:21.975
And why does this matter?

93
00:05:21.975 --> 00:05:25.910
Is again, if for one, whatever reason
you have to swap your database,

94
00:05:25.910 --> 00:05:29.727
you have to of course always make
the changes in your database layer.

95
00:05:29.727 --> 00:05:33.220
If you're gonna swap from Postgres
to like Mongo or something else,

96
00:05:33.220 --> 00:05:34.495
that work has to be done.

97
00:05:34.495 --> 00:05:37.039
But from the perspective
of your API layer,

98
00:05:37.039 --> 00:05:39.530
your API is not gonna
have to change at all.

99
00:05:39.530 --> 00:05:43.959
As long as your migration from
one database to a new one adheres

100
00:05:43.959 --> 00:05:48.145
to your interface,
your API layer can be left untouched.

101
00:05:48.145 --> 00:05:51.045
Which I think is a very powerful thing,
it's decoupling the database.

102
00:05:51.045 --> 00:05:55.382
And, yeah, we're gonna see how
we can fully leverage that.

103
00:05:55.382 --> 00:05:59.747
So now that we have this struct, we have
to also modify our constructor, okay?

104
00:05:59.747 --> 00:06:05.339
So now WorkoutHandler is gonna also
accept a WorkoutStore argument,

105
00:06:05.339 --> 00:06:09.330
which if type store.WorkoutStore,
all right?

106
00:06:09.330 --> 00:06:14.026
And then here in the return, you can
just put wWorkoutStore is WorkoutStore,

107
00:06:14.026 --> 00:06:14.606
like so.

108
00:06:14.606 --> 00:06:16.322
&gt;&gt; Speaker 4: Can you, like in JavaScript,

109
00:06:16.322 --> 00:06:20.414
I think you can just use the variable
if there's the same variable name and

110
00:06:20.414 --> 00:06:23.992
property name and
variable name that you're passing to it.

111
00:06:23.992 --> 00:06:25.909
&gt;&gt; Melkey: You mean like
kind of deconstruct it like-

112
00:06:25.909 --> 00:06:26.789
&gt;&gt; Speaker 4: Just a shortcut to-

113
00:06:26.789 --> 00:06:27.397
&gt;&gt; Melkey: Like that?

114
00:06:27.397 --> 00:06:28.544
&gt;&gt; Speaker 4: Yeah.
&gt;&gt; Melkey: Yeah, you can do that.

115
00:06:28.544 --> 00:06:29.233
You can do that.

116
00:06:29.233 --> 00:06:32.202
I like to be very explicit even
though I don't have to be.

117
00:06:32.202 --> 00:06:33.343
Okay.

118
00:06:33.343 --> 00:06:37.476
I think it'll also do the same with
like structs and declaring structs.

119
00:06:37.476 --> 00:06:39.577
They're not to be explicitly declared, but

120
00:06:39.577 --> 00:06:42.184
I'm gonna be as explicit I
can throughout this course.

121
00:06:42.184 --> 00:06:46.606
And typically, I think it's a good
pattern, if someone looks at your code and

122
00:06:46.606 --> 00:06:50.023
maybe they're not familiar with that,
to be explicit, but

123
00:06:50.023 --> 00:06:51.902
that's neither here nor there.

124
00:06:51.902 --> 00:06:56.950
&gt;&gt; Speaker 5: Is that JSON decoder
the same or similar to unmarshaling?

125
00:06:56.950 --> 00:06:58.668
&gt;&gt; Melkey: Yeah, it's very similar.

126
00:06:58.668 --> 00:07:00.717
They have the decoder.

127
00:07:00.717 --> 00:07:04.602
They are very similar,
you can kind of use one versus the other.

128
00:07:04.602 --> 00:07:09.110
On marshaling, from what I've seen,
is better used for internal,

129
00:07:09.110 --> 00:07:11.608
kind of within your own application.

130
00:07:11.608 --> 00:07:15.630
If you're gonna have to do something
with JSON, you kind of craft it and

131
00:07:15.630 --> 00:07:18.594
then send it to maybe another package or
something.

132
00:07:18.594 --> 00:07:22.666
The NewDecoder is typically what's seen
when you are accepting json payloads

133
00:07:22.666 --> 00:07:24.648
through HTTP or something like that.

134
00:07:24.648 --> 00:07:28.975
But I do believe you can
use them interchangeably,

135
00:07:28.975 --> 00:07:33.401
I just think the NewDecoder
is a bit more designed for

136
00:07:33.401 --> 00:07:36.734
handling requests over server calls.

137
00:07:36.734 --> 00:07:41.389
All right, so now that we have a bit of
our structure set up, what we're going to

138
00:07:41.389 --> 00:07:45.301
do is create a new variable called
WreatedWorkout, and in error.

139
00:07:45.301 --> 00:07:50.383
And here we're gonna use wh, and
you should see now a new field called

140
00:07:50.383 --> 00:07:54.949
WorkoutStore, and
then we can click CreateWorkout, okay?

141
00:07:54.949 --> 00:07:57.604
And we can pass in our workout like so.

142
00:07:57.604 --> 00:08:01.745
And this CreateWorkout is, in fact, the
CreateWorkout function we just created in

143
00:08:01.745 --> 00:08:05.481
the new PostgresWorkoutStore, but
because we're using an interface that

144
00:08:05.481 --> 00:08:08.541
satisfies the method signatures,
doesn't really matter.

145
00:08:08.541 --> 00:08:12.457
All right, and now, as always,
let's make sure we handle that error.

146
00:08:12.457 --> 00:08:16.411
So if error does not equal to nil, let's
just quickly do a fmt.PrintLn for us so

147
00:08:16.411 --> 00:08:17.602
we can keep that error.

148
00:08:17.602 --> 00:08:20.460
Remember, this is not
a permanent solution.

149
00:08:20.460 --> 00:08:25.344
And you go ahead, you can just copy and
paste it just to save yourself some time.

150
00:08:25.344 --> 00:08:27.503
The HTTP error message from above.

151
00:08:27.503 --> 00:08:29.884
Don't forget the return.

152
00:08:29.884 --> 00:08:34.582
And then we wanna kind of remind
the caller, or tell the caller,

153
00:08:34.582 --> 00:08:37.019
hey, we accepted your request.

154
00:08:37.019 --> 00:08:40.582
So what we can do here here is w header.

155
00:08:40.582 --> 00:08:42.584
We're going to set a field.

156
00:08:42.584 --> 00:08:49.845
I'm gonna type Content-Type like so,

157
00:08:49.845 --> 00:08:54.334
,application/json.

158
00:08:54.334 --> 00:08:59.914
And at the end,
we can do json.NewEncoder, okay?

159
00:08:59.914 --> 00:09:04.313
So new encoder returns a new encoder that
writes to w, which is our response writer.

160
00:09:04.313 --> 00:09:06.100
And here we can pass in w,

161
00:09:06.100 --> 00:09:11.050
and we're gonna encode what we want,
which is the created workout.

162
00:09:11.050 --> 00:09:16.138
So this pattern here is a pretty
powerful pattern that allows us

163
00:09:16.138 --> 00:09:23.050
to have more flexibility with different
quote unquote, layers of our application.

164
00:09:23.050 --> 00:09:25.812
Here we're demonstrating the API
layer to our database layer, but

165
00:09:25.812 --> 00:09:28.929
you can imagine this goes beyond the scope
of those two preliminary things.

166
00:09:28.929 --> 00:09:32.532
You can have multiple different layers,
especially if you have specific packages

167
00:09:32.532 --> 00:09:36.094
that are doing microservices and they have
a struct and they have function calls.

168
00:09:36.094 --> 00:09:38.582
You can kind of mess around
with how you handle and

169
00:09:38.582 --> 00:09:41.869
orchestrate the different
handlers across your application.

