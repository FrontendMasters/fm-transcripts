WEBVTT

1
00:00:00.000 --> 00:00:04.633
&gt;&gt; Melkey: With the database layer done,
let's go back into the API.

2
00:00:04.633 --> 00:00:08.108
Let's go user_handler.go.

3
00:00:08.108 --> 00:00:11.648
And we're gonna mimic the same behavior
we had with the workout handler, but

4
00:00:11.648 --> 00:00:14.168
now we're gonna have it with
the user handler, okay?

5
00:00:14.168 --> 00:00:17.891
So first thing, let's go ahead and
create the package API.

6
00:00:17.891 --> 00:00:21.391
Next, let's do a UserHandler.

7
00:00:21.391 --> 00:00:25.847
It's gonna be our struct, this UserHandler
needs to have two fields in it.

8
00:00:25.847 --> 00:00:31.676
One is going to be the UserStore, so
store.UserStore, which are interface and

9
00:00:31.676 --> 00:00:37.090
the second thing is the logger,
which is going to be point to log.logger.

10
00:00:37.090 --> 00:00:41.293
Right, underneath, let's go ahead and
create our constructor, so

11
00:00:41.293 --> 00:00:42.726
func NewUserHandler.

12
00:00:42.726 --> 00:00:46.895
This is gonna take the UserStore
of type store.UserStore, and

13
00:00:46.895 --> 00:00:50.690
it's also gonna take a logger,
pointer to log.logger.

14
00:00:50.690 --> 00:00:55.131
It's gonna return a pointer
to UserHandler like so.

15
00:00:55.131 --> 00:01:00.780
In the function, we can just return
the address of UserHandler, like so,

16
00:01:00.780 --> 00:01:06.442
user store is gonna be UserStore and
logger is gonna be logger, all right?

17
00:01:06.442 --> 00:01:11.486
And something different I'm going
to introduce into this section is,

18
00:01:11.486 --> 00:01:13.502
we're gonna have, again,

19
00:01:13.502 --> 00:01:18.224
remember we had that validation
request from updating a workout.

20
00:01:18.224 --> 00:01:22.647
We're gonna extract that over here,
so we can do something like type

21
00:01:22.647 --> 00:01:26.935
registeruserrequest, this is
gonna be its own struck, like so.

22
00:01:26.935 --> 00:01:32.535
It's gonna have its own field, so we're
have username, we can do some like string.

23
00:01:32.535 --> 00:01:35.937
You can have them as pointers,
I'm not gonna use points for

24
00:01:35.937 --> 00:01:39.478
here because this is for
specifically registering a user, so

25
00:01:39.478 --> 00:01:42.833
these are fields we want to
assure our mandatory, right?

26
00:01:42.833 --> 00:01:47.035
There's a bit of a difference between
creating something and updating something.

27
00:01:47.035 --> 00:01:48.159
For the update,

28
00:01:48.159 --> 00:01:52.908
that's what we had those pointer types
to check if they are nil or not.

29
00:01:52.908 --> 00:01:57.387
Just again, because it's go the zero
values could be a bit of a gotcha, but

30
00:01:57.387 --> 00:02:01.653
because this particular struck is
going to be used for creating a user,

31
00:02:01.653 --> 00:02:05.942
we can kind of take them more at face
value and not have that validation.

32
00:02:05.942 --> 00:02:09.297
Again, you don't it's just
added protection, if you want,

33
00:02:09.297 --> 00:02:12.843
you can definitely add a pointer and
do those same checks here, but

34
00:02:12.843 --> 00:02:15.694
since it's already implemented
in a previous file,

35
00:02:15.694 --> 00:02:18.511
I'll leave that up to you to
use if you like it or not.

36
00:02:18.511 --> 00:02:22.137
So here we have username string,
we can just continue on with the JSON.

37
00:02:22.137 --> 00:02:26.154
So we can put username, like so,

38
00:02:26.154 --> 00:02:32.902
we can have our email string can be,
oops, JSON email.

39
00:02:32.902 --> 00:02:35.248
Okay, we're gonna have our password.

40
00:02:35.248 --> 00:02:37.208
It's gonna be a string.

41
00:02:37.208 --> 00:02:41.528
Again, this is the password that
we get from the caller, okay,

42
00:02:41.528 --> 00:02:45.532
we do password, and
then we can have bio, which is string.

43
00:02:45.532 --> 00:02:50.468
Let's read bio, like so, okay,
now for server side validation,

44
00:02:50.468 --> 00:02:55.316
like I just finished talking,
we don't have those pointers, and

45
00:02:55.316 --> 00:02:58.018
we don't really need the pointers.

46
00:02:58.018 --> 00:03:01.933
However, we can still add some
sort of function to validate,

47
00:03:01.933 --> 00:03:04.131
is the email properly formatted?

48
00:03:04.131 --> 00:03:10.502
Is the password, less you can't put
a password one character, right?

49
00:03:10.502 --> 00:03:15.314
So we can have those validations
on our file here, again,

50
00:03:15.314 --> 00:03:20.435
you can have them in the front end for
client side validation.

51
00:03:20.435 --> 00:03:23.961
I don't see a problem having them on the
back end for backside validation as well.

52
00:03:23.961 --> 00:03:27.109
And I think it's just useful to
demonstrate how this could be done.

53
00:03:27.109 --> 00:03:30.774
So we'll just do a method
on our UserHandler.

54
00:03:30.774 --> 00:03:36.603
We can call this validateRegisterRequest,
okay?

55
00:03:36.603 --> 00:03:40.907
And this is going to take a pointer
to that new register request.

56
00:03:40.907 --> 00:03:43.780
Just struck that we've created and

57
00:03:43.780 --> 00:03:47.903
it's going to return an error or
no errors, okay?

58
00:03:47.903 --> 00:03:50.599
And here, it's pretty simple,

59
00:03:50.599 --> 00:03:56.390
we can do ifrequest.username is like,
empty, for example, right?

60
00:03:56.390 --> 00:04:00.857
We can say return errors dot, oops.

61
00:04:00.857 --> 00:04:04.529
So we've seen this when we looked
at the error SQL, new errors,

62
00:04:04.529 --> 00:04:06.433
we can say username is required.

63
00:04:08.977 --> 00:04:09.553
&gt;&gt; Melkey: Okay, and

64
00:04:09.553 --> 00:04:13.329
we can create this new errors using
the built in errors package and go,

65
00:04:13.329 --> 00:04:17.815
so errors.new, and here you can go nuts
with all of the constraints that you want.

66
00:04:17.815 --> 00:04:22.646
The username length, the username,
if it's too short, too long,

67
00:04:22.646 --> 00:04:26.580
you can add them here,
I'll show one example, right?

68
00:04:26.580 --> 00:04:32.816
If length, sorry,
if lengthrequest.username,

69
00:04:32.816 --> 00:04:37.359
let's say this is greater than 50.

70
00:04:37.359 --> 00:04:38.233
Well, this can be an error.

71
00:04:38.233 --> 00:04:43.648
First, we return errors.new,
we can say, username cannot be

72
00:04:43.648 --> 00:04:48.976
greater than 50 characters,
something like that, right?

73
00:04:48.976 --> 00:04:51.583
So however you wanna handle
usernames is totally up to you.

74
00:04:51.583 --> 00:04:54.699
We can do the same thing with email.

75
00:04:54.699 --> 00:04:59.571
So ifrequest.email is empty,
since it's a mandatory

76
00:04:59.571 --> 00:05:04.143
field in our database,
we can return errors.New.

77
00:05:04.143 --> 00:05:09.158
I'm going to say email is required, okay?

78
00:05:09.158 --> 00:05:13.213
And I think a more interesting one,
which may require me to push and

79
00:05:13.213 --> 00:05:17.714
you guys to pull down in just a second,
is the regex component of an email.

80
00:05:17.714 --> 00:05:23.244
So go has a standard library a Standard
Regex library, and it's pretty good.

81
00:05:23.244 --> 00:05:26.436
It's a pretty good Regex library,
I'm not gonna try and

82
00:05:26.436 --> 00:05:31.158
claim, I'm like a Regex master, I can't
read Regex, I don't believe people that

83
00:05:31.158 --> 00:05:34.567
can read Regex, I don't believe them,
they're wizards.

84
00:05:34.567 --> 00:05:39.402
But, essentially, it doesn't hurt us to
also have a validation for Regex, okay?

85
00:05:39.402 --> 00:05:41.740
So here,
we can do something like email regex.

86
00:05:41.740 --> 00:05:46.529
We can bring in the regex
standard library, so regexp.

87
00:05:46.529 --> 00:05:52.113
I can use the must compile function here,
and this accepts a string.

88
00:05:52.113 --> 00:05:53.826
I'm gonna particularly use backticks.

89
00:05:53.826 --> 00:05:59.615
Now, I'm gonna copy and paste what
this is, I'm gonna push the code up.

90
00:05:59.615 --> 00:06:02.847
So here, I'm gonna grab this.

91
00:06:05.687 --> 00:06:12.587
&gt;&gt; Melkey: And this is the formatted for
an email in regex, according to Google.

92
00:06:12.587 --> 00:06:16.552
So continuing on,
we can say if emailRegex, right,

93
00:06:16.552 --> 00:06:20.605
if it's not matching these strings,
so this method,

94
00:06:20.605 --> 00:06:24.587
right here,
match string into the request.email.

95
00:06:24.587 --> 00:06:29.996
Okay, so if this is false,
meaning the email does not

96
00:06:29.996 --> 00:06:36.849
match the regex email formula we have,
we can return errors.new,

97
00:06:36.849 --> 00:06:42.882
and we can say something like
invalid email format, okay?

98
00:06:42.882 --> 00:06:47.715
And so, again, we can imagine this like,
we can have password validation as well.

99
00:06:51.402 --> 00:06:56.896
&gt;&gt; Melkey: I can quickly just show you
one, but I think it's fairly obvious

100
00:06:56.896 --> 00:07:02.406
what what the thing is you can
do ifrequest.password is empty.

101
00:07:02.406 --> 00:07:07.537
You can see return error.New
password is okay and

102
00:07:07.537 --> 00:07:11.813
yes, I agree that this would probably and

103
00:07:11.813 --> 00:07:15.372
should be done with the front end.

104
00:07:15.372 --> 00:07:18.797
But what if your front end is written
by someone who doesn't know what

105
00:07:18.797 --> 00:07:19.691
they're doing?

106
00:07:19.691 --> 00:07:23.883
Or what if you wrote the front end like
a 3 AM when you're buzzing on Red Bull,

107
00:07:23.883 --> 00:07:27.185
jewels, Zins,
everything the devil's on your shoulder.

108
00:07:27.185 --> 00:07:31.357
Like, it's easy for things to slip right
up because it's said to be done on one

109
00:07:31.357 --> 00:07:35.849
side of your application, doesn't
necessarily mean it's, a, done correctly,

110
00:07:35.849 --> 00:07:38.846
or b, can have negative
consequences on your back end.

111
00:07:38.846 --> 00:07:43.154
And further strengthening my point,
stuff slips on the front, big whoop.

112
00:07:43.154 --> 00:07:46.376
Your form is gonna miss the value, okay?

113
00:07:46.376 --> 00:07:51.142
Here, if we accept values and persist
it into a database, that's big trouble,

114
00:07:51.142 --> 00:07:54.659
that could actually have some
some consequences, right?

115
00:07:54.659 --> 00:07:59.743
Now, our database is, I won't say the word
infected, but it has improper data.

116
00:07:59.743 --> 00:08:01.667
Yeah, so that's why I always,

117
00:08:01.667 --> 00:08:05.820
personally like to add the extra
stuff of my own back end validation.

118
00:08:05.820 --> 00:08:08.459
This is not gonna cover all the cases, but

119
00:08:08.459 --> 00:08:12.698
what it does try to do is validation
that you see in on the front end.

120
00:08:12.698 --> 00:08:15.684
You can easily copy it
on the back end as well.

