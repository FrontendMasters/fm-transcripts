WEBVTT

1
00:00:00.000 --> 00:00:03.009
&gt;&gt; Melkey: So, we have this Println,
we can just remove this, again,

2
00:00:03.009 --> 00:00:05.429
the compiler is gonna be yellow,
that's okay.

3
00:00:05.429 --> 00:00:08.706
We're gonna start off with variables and
variable declaration,

4
00:00:08.706 --> 00:00:11.349
cuz there's a couple different
ways you can do this.

5
00:00:11.349 --> 00:00:15.120
First of all, this how you write
a comment, I'll just say variables, right?

6
00:00:15.120 --> 00:00:19.923
Comments are just like slashes, you can
do other variations of comments, but

7
00:00:19.923 --> 00:00:21.903
it's in line, does the trick.

8
00:00:21.903 --> 00:00:26.562
So the first method of declaring
a variable is using the keyword var,

9
00:00:26.562 --> 00:00:30.675
the name of the variable, and
then the type of the variable.

10
00:00:30.675 --> 00:00:35.194
Or it's gonna be a string, and
we can say this is gonna be Melkey, okay?

11
00:00:35.194 --> 00:00:38.982
The compiler is once again yelling at us,
cuz we have unused variable.

12
00:00:38.982 --> 00:00:41.625
So if you have any unused
variables in your code,

13
00:00:41.625 --> 00:00:45.499
you will not be able to compile,
you won't be able to run your project.

14
00:00:45.499 --> 00:00:50.128
So again, unused imports, unused
variables, we don't like that in Go.

15
00:00:50.128 --> 00:00:54.261
To print this, instead of using Println,
which is the first print statement I used

16
00:00:54.261 --> 00:00:57.467
when we started this,
I'm gonna use something called Printf.

17
00:00:57.467 --> 00:01:01.285
And Printf formats according
to a format specifier and

18
00:01:01.285 --> 00:01:03.779
writes to standard output, okay?

19
00:01:03.779 --> 00:01:06.956
Now, what that means is it's
gonna first take what we want.

20
00:01:06.956 --> 00:01:10.484
So the template string here,
I'm gonna say, this is my name, and

21
00:01:10.484 --> 00:01:12.069
then the formatter, right?

22
00:01:12.069 --> 00:01:15.258
So different data types
have different formatters.

23
00:01:15.258 --> 00:01:19.668
A string is modulo s,
I might say percent sign s,

24
00:01:19.668 --> 00:01:24.524
or modulo,
I am referring to this symbol right here.

25
00:01:24.524 --> 00:01:27.452
Key distinction between Printf and
Println.

26
00:01:27.452 --> 00:01:30.591
Println gives you a free line,
Printf does not.

27
00:01:30.591 --> 00:01:35.068
So you have to specify the line
break with /n, like so, okay?

28
00:01:35.068 --> 00:01:39.457
And then with Printf, the arguments
are going to come in into the order they

29
00:01:39.457 --> 00:01:42.534
appear in the template string,
from left to right.

30
00:01:42.534 --> 00:01:47.572
So here we have one, it's gonna be
a string, and pass in our name, like so.

31
00:01:47.572 --> 00:01:52.475
We can save this, and we can just
quickly run, go run main.go, and

32
00:01:52.475 --> 00:01:56.185
we should see this is my name,
Melkey, all right?

33
00:01:56.185 --> 00:01:59.468
So that's one method of
declaring a variable.

34
00:01:59.468 --> 00:02:01.463
Another is Type inferencing, so

35
00:02:01.463 --> 00:02:04.535
the compiler can actually
inference a type for us.

36
00:02:04.535 --> 00:02:10.069
The way you can do this, let's say we
have an age, let's say the age is 27.

37
00:02:10.069 --> 00:02:13.343
You can see here, it looks vastly
different than the var name, but

38
00:02:13.343 --> 00:02:17.107
this is still a variable, but now
the compiler is inferring the type for us.

39
00:02:17.107 --> 00:02:20.654
It's gonna infer that 27 is a type int,
okay?

40
00:02:20.654 --> 00:02:25.205
So we can do the exact same thing,
fmt.Printf, okay?

41
00:02:25.205 --> 00:02:31.370
We can say this is my age, and then the
format specifier for an int is modulo D.

42
00:02:31.370 --> 00:02:35.862
Again, do not forget the break line,
and we can put age.

43
00:02:35.862 --> 00:02:39.593
Okay, now if we save this,
you can see this is my name, Melkey, and

44
00:02:39.593 --> 00:02:40.450
this is my age.

45
00:02:40.450 --> 00:02:43.455
So, Go has the ability to infer, and we
can do the same thing with name as well.

46
00:02:43.455 --> 00:02:48.335
We can just do name with
the shorthand operator, okay?

47
00:02:48.335 --> 00:02:52.711
I think this is called
the walrus operator in Python,

48
00:02:52.711 --> 00:02:57.488
to declare something and
have Go infer type for us, okay?

49
00:02:57.488 --> 00:03:01.459
Another method is to declare but
reassign later.

50
00:03:01.459 --> 00:03:06.649
So we can do var, keyword, the name,
city, and then the type, string.

51
00:03:06.649 --> 00:03:08.706
And we can just leave it like this.

52
00:03:08.706 --> 00:03:11.814
This is fine, so,
different than the first variation,

53
00:03:11.814 --> 00:03:14.032
we didn't explicitly set what city is.

54
00:03:14.032 --> 00:03:17.228
Cuz the compiler is only yelling at us,
hey, it's declared and not used,

55
00:03:17.228 --> 00:03:18.052
what's going on?

56
00:03:18.052 --> 00:03:20.991
So we could do something like this, and

57
00:03:20.991 --> 00:03:24.653
then we can say city = "Seattle",
all right?

58
00:03:24.653 --> 00:03:28.979
And again, we can do the exact same thing,
fmt.Printf,

59
00:03:28.979 --> 00:03:31.638
we can say, this is my city, okay?

60
00:03:31.638 --> 00:03:38.471
Format was the module operator,
and say, city, like so.

61
00:03:38.471 --> 00:03:40.960
You can now see we have Melkey,
age, Seattle.

62
00:03:40.960 --> 00:03:46.341
If you wanna declare multiple variables at
once, you could do something pretty easy.

63
00:03:46.341 --> 00:03:49.576
You could just do var country,
and then comma, and

64
00:03:49.576 --> 00:03:52.370
you can do another thing, like continent.

65
00:03:53.837 --> 00:03:55.359
Call these strings, and just equal.

66
00:03:55.359 --> 00:04:00.111
And then you can set them in
the order they appear, so

67
00:04:00.111 --> 00:04:04.221
you can do, USA, oops, and North America.

68
00:04:04.221 --> 00:04:05.572
Okay, declared and not used, so

69
00:04:05.572 --> 00:04:07.759
this is a different way to
just specify the same type.

70
00:04:07.759 --> 00:04:12.997
We can do fmt.Printf, this is my city,

71
00:04:12.997 --> 00:04:19.477
and then module s, and
this is continent, okay?

72
00:04:19.477 --> 00:04:25.118
And then in the order they appear, so
put country, and then continent, like so.

73
00:04:25.118 --> 00:04:29.093
It's going to keep going back and
forth, go run main.go.

74
00:04:29.093 --> 00:04:33.345
You can now see, I said city,

75
00:04:33.345 --> 00:04:37.466
whoops, sweet country, yeah?

76
00:04:37.466 --> 00:04:41.065
Can you declare variables
of different types?

77
00:04:41.065 --> 00:04:44.970
Yeah, [INAUDIBLE] Not exactly like that,
but very similar.

78
00:04:44.970 --> 00:04:48.539
So if you want to declare different types,
you can do var, and

79
00:04:48.539 --> 00:04:50.747
then open it with these parentheses.

80
00:04:50.747 --> 00:04:53.524
Okay, and this is where you can
put a list of different types.

81
00:04:53.524 --> 00:04:57.826
So let's say we have one called is
employed, I'll make this a Boolean.

82
00:04:57.826 --> 00:05:00.932
We can set this to true, okay?

83
00:05:00.932 --> 00:05:04.518
And then let's say we also have a salary,
all right?

84
00:05:04.518 --> 00:05:08.341
We can do salary of type int,
we can set this to like 50k.

85
00:05:08.341 --> 00:05:11.713
So, 50, 1, 2, 3, we can save this, okay?

86
00:05:11.713 --> 00:05:13.931
And then we can have one more,
that's position.

87
00:05:13.931 --> 00:05:19.124
Position, which would be string and
we'll just say, developer, okay?

88
00:05:19.124 --> 00:05:22.872
And you should notice, if you save,
depending on VS Code or whatever,

89
00:05:22.872 --> 00:05:25.940
you should get that auto
formatting from Go font, gofmt.

90
00:05:25.940 --> 00:05:28.687
So, double check if you have that working.

91
00:05:28.687 --> 00:05:33.867
All right, so this is a way to declare
different variables, different types, all

92
00:05:33.867 --> 00:05:39.355
kind of, in line, quote unquote, cuz it's
multiple lines, but you know what I mean.

93
00:05:39.355 --> 00:05:45.534
And again, can just do fmt.Printf,
you can say,

94
00:05:45.534 --> 00:05:51.137
is employed,
the formatter is going to be T for

95
00:05:51.137 --> 00:05:54.890
a Boolean, this is my salary.

96
00:05:58.131 --> 00:06:02.078
Modulo d, and this is my position.

97
00:06:06.281 --> 00:06:09.119
Okay, and in the order they come in, so

98
00:06:09.119 --> 00:06:12.915
we put isEmployed, salary,
and position, okay?

99
00:06:12.915 --> 00:06:15.331
And I'm gonna do this one
to show you something.

100
00:06:15.331 --> 00:06:20.558
So if I run Go, run main.go, you can see
we have everything, minus the typos,

101
00:06:20.558 --> 00:06:25.564
right, working, but you see this little
percent thing at the end, right?

102
00:06:25.564 --> 00:06:29.707
That's because I forgot to put
the break line, or a new line.

103
00:06:29.707 --> 00:06:32.063
So if we were to do
another print statement,

104
00:06:32.063 --> 00:06:35.068
it would just append directly
where this character is.

105
00:06:35.068 --> 00:06:39.336
So that's where we have the break line,
or you can use Println if you want.

106
00:06:39.336 --> 00:06:42.983
Someone may have noticed that we have
this interesting one right here,

107
00:06:42.983 --> 00:06:44.398
I wanna put a focus on this.

108
00:06:44.398 --> 00:06:49.695
So we have var city string,
var city string, okay?

109
00:06:49.695 --> 00:06:53.804
And we did assign it, so
in between this line right here, and

110
00:06:53.804 --> 00:06:58.893
this one where we assign it, what is
the value of city, what is it, right?

111
00:06:58.893 --> 00:07:04.028
Compiler's not yelling at us, it's
yelling that, it may not be on use, but

112
00:07:04.028 --> 00:07:09.795
at the time of writing it, it's valid, the
question is, what is this thing, right?

113
00:07:09.795 --> 00:07:14.459
So, there's a concept Go has
called zero values, okay?

114
00:07:14.459 --> 00:07:18.538
Also known as default values,
you can use whichever.

115
00:07:18.538 --> 00:07:21.342
And I'm gonna demonstrate these
with a few different types here.

116
00:07:21.342 --> 00:07:24.245
So let's say we have var default int,

117
00:07:24.245 --> 00:07:28.071
I'm gonna set this as an int,
var default float.

118
00:07:28.071 --> 00:07:31.995
I'm gonna set this as a float,
either 64 bit or 32 bit, we'll do 64 bit.

119
00:07:31.995 --> 00:07:36.678
We can do var default string.

120
00:07:36.678 --> 00:07:40.304
Okay, and then we can do var
default bool as a type bool.

121
00:07:40.304 --> 00:07:44.453
All right, so
we have these four different variables,

122
00:07:44.453 --> 00:07:48.703
all with this zero value
associated with them right now.

123
00:07:48.703 --> 00:07:54.255
So let me ask you guys, if I were to
print these, what will be printed out?

124
00:07:54.255 --> 00:07:58.685
If you were to guess just randomly,
what will be printed out?

125
00:07:58.685 --> 00:08:00.947
000, false.

126
00:08:00.947 --> 00:08:04.739
00, okay, so for the first int would be 0.

127
00:08:04.739 --> 00:08:09.511
Sorry, yeah, 0, 0.0, empty string, false.

128
00:08:09.511 --> 00:08:12.013
That's 100% right.

129
00:08:12.013 --> 00:08:16.939
So these zero values is how the compiler
basically assigns us that this

130
00:08:16.939 --> 00:08:21.877
is going to be an int, or a float 64,
or a string, or a bool, right?

131
00:08:21.877 --> 00:08:26.777
Now, that's pretty helpful, right, it
kind of avoids us having that nil error,

132
00:08:26.777 --> 00:08:27.687
potentially.

133
00:08:27.687 --> 00:08:33.524
The downfall of something like this
is when you wanna pass this as data,

134
00:08:33.524 --> 00:08:38.290
and you want this data to have
a very specific identity, or

135
00:08:38.290 --> 00:08:41.140
specific value associated to it.

136
00:08:41.140 --> 00:08:42.506
So like you said, right?

137
00:08:42.506 --> 00:08:45.313
The default bool is gonna be false.

138
00:08:45.313 --> 00:08:47.491
Well, booleans can only be false or
true, right?

139
00:08:47.491 --> 00:08:50.634
So it has to be one of the other, cuz it
has to be one of those default values.

140
00:08:50.634 --> 00:08:55.360
But let's say you're passing data and
it's neither false or true.

141
00:08:55.360 --> 00:08:57.229
Let's say it just doesn't exist.

142
00:08:57.229 --> 00:09:01.693
Let's say there's a form, right,
that we are accepting, that's JSON.

143
00:09:01.693 --> 00:09:06.141
And someone omitted a check that says
that they are either this or this, or

144
00:09:06.141 --> 00:09:09.530
whatever condition you can put for
a boolean decision.

145
00:09:09.530 --> 00:09:14.944
And it did not set it, so what is it, are
we gonna use the false value by default?

146
00:09:14.944 --> 00:09:16.631
Or do we put it as nil, right?

147
00:09:16.631 --> 00:09:19.098
As if we don't know, it's undefined.

148
00:09:19.098 --> 00:09:23.657
So that's one of one of the drawbacks
of having these zero values.

149
00:09:23.657 --> 00:09:26.715
They're very useful, and
they avoid potentially bigger issue.

150
00:09:26.715 --> 00:09:30.750
But there is a drawback where
sometimes it's not an empty string,

151
00:09:30.750 --> 00:09:32.994
sometimes it's not there, right?

152
00:09:32.994 --> 00:09:37.627
An empty string and just not having
a value are two different things, right?

153
00:09:37.627 --> 00:09:39.205
So there is a bit of a difference there.

154
00:09:39.205 --> 00:09:46.435
I'm gonna quickly just print these,
oops, fmt.Printf.

155
00:09:46.435 --> 00:09:53.338
I'm gonna do just int: float module d,

156
00:09:53.338 --> 00:10:00.252
float module f, and then it's string.

157
00:10:00.252 --> 00:10:07.107
In the order they come in,
so default and float.

158
00:10:11.784 --> 00:10:16.905
Cool, oops.

159
00:10:16.905 --> 00:10:20.103
All right,
let me make sure that works, cool.

