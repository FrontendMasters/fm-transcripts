WEBVTT

1
00:00:00.000 --> 00:00:01.145
&gt;&gt; Melkey: All right, very nice.

2
00:00:01.145 --> 00:00:02.815
So now we have to get workout and

3
00:00:02.815 --> 00:00:05.584
the update workout methods
only in our data store.

4
00:00:05.584 --> 00:00:09.713
Let's go all the way up to the workout
handler and fix these up, so

5
00:00:09.713 --> 00:00:13.637
that we can actually call them,
query them and test them out.

6
00:00:13.637 --> 00:00:16.606
Let's go into the workout handler above.

7
00:00:16.606 --> 00:00:22.434
So just a quick reminder we already have
HandleCreateWorkout function, working.

8
00:00:22.434 --> 00:00:26.136
So now we're gonna work in
the HandleGetWorkoutByID.

9
00:00:26.136 --> 00:00:31.114
This can be fairly quick, not quick, but

10
00:00:31.114 --> 00:00:34.394
simple integration here.

11
00:00:34.394 --> 00:00:39.748
So at the bottom here, after we check
the last error for the workoutID,

12
00:00:39.748 --> 00:00:44.476
what we can do is workout error
is gonna be our workout handler,

13
00:00:44.476 --> 00:00:48.515
the workoutStore and
the GetWorkoutByID function.

14
00:00:48.515 --> 00:00:50.813
We can pass in the workoutID.

15
00:00:54.270 --> 00:00:57.912
&gt;&gt; Melkey: As per usual, let's check the
error, so if error does not equal to nil,

16
00:00:57.912 --> 00:01:00.089
we're gonna do a format print line error.

17
00:01:04.819 --> 00:01:06.306
&gt;&gt; Melkey: Bear with me,
it's not permanent.

18
00:01:06.306 --> 00:01:11.351
We will fix this in a couple of minutes.

19
00:01:11.351 --> 00:01:17.558
We'll do the http.Error function,
pass in the response writer like so.

20
00:01:17.558 --> 00:01:23.795
We can say failed to read the workout or
fail to retrieve the workout.

21
00:01:23.795 --> 00:01:29.364
And here we can do http.StatusNotFound.

22
00:01:35.148 --> 00:01:39.146
&gt;&gt; Melkey: So we can actually just say
method to read the workout because they

23
00:01:39.146 --> 00:01:44.466
fail to fetch the work, I think it's a bit
more explicit to what's happening, okay?

24
00:01:44.466 --> 00:01:48.131
Let's not forget the return
at the end there, okay?

25
00:01:48.131 --> 00:01:52.571
And at this point, we are assuming we're
able to retrieve the workout correctly.

26
00:01:52.571 --> 00:01:59.620
So then what we can do is w.Header.Set,
Content=Type

27
00:02:04.128 --> 00:02:07.369
&gt;&gt; Melkey: Application/json.

28
00:02:07.369 --> 00:02:11.747
We can do w.WriteHeader over here,

29
00:02:11.747 --> 00:02:18.817
when I give it the status of
(http.StatusOK), like so.

30
00:02:18.817 --> 00:02:21.727
And right below,
we can do json.NewEncoder,

31
00:02:21.727 --> 00:02:25.815
pass in the response writer I'm
gonna encode the workout like so.

32
00:02:25.815 --> 00:02:29.515
Let's go ahead and
just create the update method now as well.

33
00:02:29.515 --> 00:02:36.599
At the bottom, let's get some room for
us here, like so.

34
00:02:36.599 --> 00:02:41.359
Create func wh for
our pointer to our WorkoutHandler.

35
00:02:41.359 --> 00:02:47.737
I'm gonna call HandleUpdateWorkoutByID,
like so.

36
00:02:47.737 --> 00:02:51.827
It's gonna take our w
http.ResponseWriter and

37
00:02:51.827 --> 00:02:56.423
the body of http.Request or
the pointer, excuse me.

38
00:02:56.423 --> 00:03:00.285
All right, and
here we have to parse that ID as well.

39
00:03:00.285 --> 00:03:04.916
Since we already have that logic written
and this will be its own function,

40
00:03:04.916 --> 00:03:09.635
we can do is simply just go up here and
let's go ahead and link this much code.

41
00:03:09.635 --> 00:03:12.742
Instead of rewriting it from scratch,
go ahead and copy and

42
00:03:12.742 --> 00:03:15.416
paste this from
the GetWorkoutByID function, and

43
00:03:15.416 --> 00:03:19.535
just paste it in the first body, in
the first line for the HandleWorkoutByID.

44
00:03:19.535 --> 00:03:23.837
Okay, I'm gonna use this workoutID
to first fetch and get the workout.

45
00:03:23.837 --> 00:03:30.049
So here we can do existingWorkout error
is going to be our workoutHandler,

46
00:03:30.049 --> 00:03:33.600
the workoutStore, GetWorkoutByID, and

47
00:03:33.600 --> 00:03:39.823
he passed in the workoutID that we just
extracted from our query using chi.

48
00:03:39.823 --> 00:03:46.033
Check the error, so
if our error does not equal to nil,

49
00:03:46.033 --> 00:03:50.094
down here, we can do http.Error.

50
00:03:50.094 --> 00:03:55.163
W failed to fetch workout http.Status you

51
00:03:55.163 --> 00:04:02.078
do InternalServerError like so,
and then we can return.

52
00:04:02.078 --> 00:04:05.737
And here we wanna check if existing
workout is nil cuz we can do a get request

53
00:04:05.737 --> 00:04:07.223
and see if it's empty or not.

54
00:04:07.223 --> 00:04:12.955
So here if existing workout is in
fact nil after the error check,

55
00:04:12.955 --> 00:04:18.594
you just do http.NotFound for
right now, w r and then return.

56
00:04:18.594 --> 00:04:24.108
Okay, so at this point, we can assume,

57
00:04:24.108 --> 00:04:29.312
we are able to find existing workout.

58
00:04:31.771 --> 00:04:36.825
&gt;&gt; Melkey: Okay, now what we're going
to do right now is create a new struct

59
00:04:36.825 --> 00:04:41.516
which is going to act as
the request from our Client struck.

60
00:04:41.516 --> 00:04:44.487
So you remember,
when we create a new workout,

61
00:04:44.487 --> 00:04:47.846
we are basically decoding
that JSON into the struct.

62
00:04:47.846 --> 00:04:51.712
We need to do the same for
update requests, okay?

63
00:04:51.712 --> 00:04:55.598
But the thing is,
we don't wanna blindly trust our client.

64
00:04:55.598 --> 00:04:59.462
I'm sure there's gonna be some client
side validation, and that's important.

65
00:04:59.462 --> 00:05:01.693
But we can also do some server
side validation as well.

66
00:05:01.693 --> 00:05:03.332
Is it overkill?

67
00:05:03.332 --> 00:05:07.013
I don't think so,
I think it's probably good to trust but

68
00:05:07.013 --> 00:05:08.749
validate at the same time.

69
00:05:08.749 --> 00:05:13.900
And so with that kind of thinking, we're
gonna create this struck, not anonymous.

70
00:05:13.900 --> 00:05:16.446
It's gonna live within
the scope of this function, and

71
00:05:16.446 --> 00:05:18.244
you can make it live outside the scope.

72
00:05:18.244 --> 00:05:20.650
You can globally declare it
in the package, that's fine.

73
00:05:20.650 --> 00:05:25.741
But here, this is going to act
as that preliminary location for

74
00:05:25.741 --> 00:05:27.672
us to decode that JSON.

75
00:05:27.672 --> 00:05:30.234
We can then validate that
are the fields correct,

76
00:05:30.234 --> 00:05:33.348
is it adhering to the password
length that we want etc, etc.

77
00:05:33.348 --> 00:05:38.344
And then we can replace the values in
our actual existing workout with those

78
00:05:38.344 --> 00:05:42.639
values from our client and
then call the update workout method.

79
00:05:42.639 --> 00:05:45.243
So I'll show you how that looks,

80
00:05:45.243 --> 00:05:50.090
you can create a new variable
called updateWorkoutRequest.

81
00:05:50.090 --> 00:05:54.278
This is gonna be struck, and this struck
is basically going to have the same fields

82
00:05:54.278 --> 00:05:56.659
our workout does,
with a slight difference.

83
00:05:56.659 --> 00:06:00.503
We can do title and this time,
instead of being a string,

84
00:06:00.503 --> 00:06:03.558
this is gonna be a pointer
to a string like so.

85
00:06:03.558 --> 00:06:08.892
Same json tags, title, all right, and
we'll follow up with the rest of them.

86
00:06:08.892 --> 00:06:13.312
Description is going to be
also a pointer to a string.

87
00:06:13.312 --> 00:06:17.233
We can put description like so,

88
00:06:17.233 --> 00:06:21.887
okay, we can have DurationMinutes.

89
00:06:21.887 --> 00:06:23.785
This is gonna be a pointer to an int.

90
00:06:26.644 --> 00:06:30.789
&gt;&gt; Melkey: json duration_minutes.

91
00:06:30.789 --> 00:06:36.124
We're gonna have calories_burned,
&gt;&gt; Melkey: Oops.

92
00:06:39.901 --> 00:06:41.804
&gt;&gt; Melkey: Like so,
this would be pointer to int.

93
00:06:47.562 --> 00:06:49.903
&gt;&gt; Melkey: Okay, and
the last one are entries, right?

94
00:06:49.903 --> 00:06:53.865
Because we know entries is a slice,
the native default type for

95
00:06:53.865 --> 00:06:55.294
slice is already nil.

96
00:06:55.294 --> 00:06:59.581
So we can do store.WorkoutEntry.

97
00:06:59.581 --> 00:07:04.822
Okay, we can do our json tag
as just entries, like so.

98
00:07:04.822 --> 00:07:06.718
With that now declared,

99
00:07:06.718 --> 00:07:11.518
we can use the same json logic we
had earlier of the NewDecoder.

100
00:07:11.518 --> 00:07:16.450
Let's grab it from our r.Body,
and what we're going to

101
00:07:16.450 --> 00:07:20.879
decode is in the updateWorkoutRequest,
like so.

102
00:07:20.879 --> 00:07:21.779
Let's check that error.

103
00:07:21.779 --> 00:07:24.854
So if our error does not equal to nil,

104
00:07:24.854 --> 00:07:29.532
we can just do http.Error
pass in the response writer.

105
00:07:29.532 --> 00:07:32.678
And then we can just simply write
the actual error message that we

106
00:07:32.678 --> 00:07:34.724
are extracting from the decoder like so.

107
00:07:34.724 --> 00:07:38.690
We can do http something
like StatusBadRequest.

108
00:07:41.362 --> 00:07:42.452
&gt;&gt; Melkey: And make sure we return.

109
00:07:44.785 --> 00:07:47.712
&gt;&gt; Melkey: So now that we have
this updateWorkerRequest, and

110
00:07:47.712 --> 00:07:52.491
let's say we successfully decoded it,
the question is, why are these pointers?

111
00:07:52.491 --> 00:07:56.027
And the reason for that is this
allows us to now check if those

112
00:07:56.027 --> 00:07:59.016
values are truly nil or
if they intend to be empty.

113
00:07:59.016 --> 00:08:01.834
Let's say someone goes back and
updates the workout, and they said,

114
00:08:01.834 --> 00:08:05.175
you know what, I don't want a description
on this field, and they leave it empty,

115
00:08:05.175 --> 00:08:06.108
like an empty string.

116
00:08:06.108 --> 00:08:09.748
Which we found out is the default or
zero value of strings for Go.

117
00:08:09.748 --> 00:08:12.853
Do we want to treat that as if
it's a non existing value and

118
00:08:12.853 --> 00:08:14.678
not update that work with entry?

119
00:08:14.678 --> 00:08:18.785
Or do we think that our user is
actually trying to update this form

120
00:08:18.785 --> 00:08:20.543
a description to be empty.

121
00:08:20.543 --> 00:08:24.113
So to do that successfully,
we can check with a nil pointer.

122
00:08:24.113 --> 00:08:27.678
We can check if that value is
actually nil or not from our client,

123
00:08:27.678 --> 00:08:30.716
because if they don't send
anything from our client,

124
00:08:30.716 --> 00:08:35.359
there's nothing gonna be there, and a nil
is not the same thing as an empty string.

125
00:08:35.359 --> 00:08:38.492
So this updateWorkoutRequest
variable that we have,

126
00:08:38.492 --> 00:08:42.795
we could do something a little bit
repetitive, but I think it's worth it.

127
00:08:42.795 --> 00:08:47.119
We can check if
updateWorkoutRequest.Title, and

128
00:08:47.119 --> 00:08:52.040
we can do this for
every field does not equal to nil, right?

129
00:08:52.040 --> 00:08:54.993
What we can then do is
existingWorkout.Title,

130
00:08:54.993 --> 00:08:59.535
reminder, existingWorkout is the worker
we treat just a few lines above.

131
00:08:59.535 --> 00:09:03.776
We could set this equal to
the def reference value of

132
00:09:03.776 --> 00:09:07.337
updateWorkerRequest.Title, like so.

133
00:09:07.337 --> 00:09:10.820
Cool, so just a little bit more
service-side validation on what we're

134
00:09:10.820 --> 00:09:13.060
getting and
expecting from our client calls.

135
00:09:17.562 --> 00:09:19.985
&gt;&gt; Melkey: Okay, and we can do this for
all those fields, so

136
00:09:19.985 --> 00:09:21.344
you can go ahead and copy and

137
00:09:21.344 --> 00:09:25.626
paste this for description, duration,
minutes, calories burned, and entries.

138
00:09:25.626 --> 00:09:31.707
You can do UpdateWorkerRequest instead
of .Title, we can do description.

139
00:09:31.707 --> 00:09:37.150
If you are copying, make sure you
are careful with fixing the field names.

140
00:09:58.668 --> 00:10:02.178
&gt;&gt; Melkey: So I got DurationMinutes,
next I'm gonna do CaloriesBurned.

141
00:10:09.688 --> 00:10:10.564
&gt;&gt; Melkey: All right.

142
00:10:15.729 --> 00:10:17.067
&gt;&gt; Melkey: And the last one is Entries.

143
00:10:39.088 --> 00:10:39.976
&gt;&gt; Melkey: Yeah.

144
00:10:39.976 --> 00:10:40.958
&gt;&gt; Speaker 2: Could you explain why we

145
00:10:40.958 --> 00:10:42.882
don't need the pointer
on the Entries again?

146
00:10:42.882 --> 00:10:47.918
&gt;&gt; Melkey: Yeah, absolutely, so
string and ints, the zero value for

147
00:10:47.918 --> 00:10:52.148
those is either an empty string or
a zero, right,

148
00:10:52.148 --> 00:10:56.399
with a slice, the zero or
different value is nil.

149
00:10:56.399 --> 00:11:01.871
So the reason we're even using pointers
like on relative line 29 up for title,

150
00:11:01.871 --> 00:11:06.870
description, duration, is because
the zero value for a pointer is nil.

151
00:11:06.870 --> 00:11:09.704
And so
that gives us that ability to check,

152
00:11:09.704 --> 00:11:12.793
does this actually exist or
does it not exist?

153
00:11:12.793 --> 00:11:14.523
And which goes back to the example,

154
00:11:14.523 --> 00:11:17.070
maybe someone actually wants to send zero,
right?

155
00:11:17.070 --> 00:11:21.735
If they do, okay, cool, we can process
that but if we don't have a way to fully

156
00:11:21.735 --> 00:11:26.547
check the integrity of the request that we
may accidentally take a zero value by Go

157
00:11:26.547 --> 00:11:30.199
and replace it to be something
that it really shouldn't be.

158
00:11:30.199 --> 00:11:32.778
So this nil check gives us more of that,

159
00:11:32.778 --> 00:11:37.156
not authenticity, but more of that
confidence to make sure that we

160
00:11:37.156 --> 00:11:40.533
are processing the right
request from our caller.

161
00:11:40.533 --> 00:11:42.268
Here, we can just do error.

162
00:11:42.268 --> 00:11:46.277
We can do workout handler is workoutStore.

163
00:11:46.277 --> 00:11:49.056
We can click UpdateWorkout.

164
00:11:49.056 --> 00:11:55.295
You can pass in that new, fairly new, but
we can say improved existing workout.

165
00:11:55.295 --> 00:11:58.430
You can check if our error
does not equal to nil.

166
00:11:58.430 --> 00:12:01.908
We can just print the error for ourselves.

167
00:12:01.908 --> 00:12:07.405
We can just do format.Println and
say, update workout error

168
00:12:07.405 --> 00:12:12.412
to be more explicit in case
some people do get errors here.

169
00:12:12.412 --> 00:12:13.454
So we're trying this out.

170
00:12:13.454 --> 00:12:17.853
We can do error w and we can also say,

171
00:12:17.853 --> 00:12:21.681
failed to update the workout.

172
00:12:21.681 --> 00:12:27.114
We can put http.InternalServerError,
we can return.

173
00:12:27.114 --> 00:12:29.304
And the last little bit is
running back to our client.

174
00:12:29.304 --> 00:12:35.993
So w.Header we can set Content-Type.

175
00:12:38.502 --> 00:12:44.810
&gt;&gt; Melkey: Application/json, like so,
we can do right our header, so w.Write.

176
00:12:51.692 --> 00:12:52.952
&gt;&gt; Melkey: There you go, right.

177
00:12:52.952 --> 00:12:58.508
Here we can do http.StatusOK.

178
00:12:58.508 --> 00:13:04.106
And then we can just say json.NewEncoder,
pass in our response writer,

179
00:13:04.106 --> 00:13:08.091
and then we can encode
the existing workout like so.

180
00:13:08.091 --> 00:13:12.783
So we just wrapped up writing
our update handler, and for

181
00:13:12.783 --> 00:13:17.475
that, we just created
the functions in our Data Store for

182
00:13:17.475 --> 00:13:21.502
creating, reading and
updating the workouts.

183
00:13:21.502 --> 00:13:23.545
So now we're gonna test these out.

184
00:13:23.545 --> 00:13:25.408
There's just one thing we have to do,

185
00:13:25.408 --> 00:13:29.266
which is to route one of the new functions
that update handler into our routes.

186
00:13:29.266 --> 00:13:34.762
So we'll go here, so
right underneath the workouts,

187
00:13:34.762 --> 00:13:37.512
we can do an r.Put, okay?

188
00:13:37.512 --> 00:13:41.595
And here we'll put passed in/workouts, and

189
00:13:41.595 --> 00:13:46.420
then the slug,
which is just the curly brackets, id.

190
00:13:46.420 --> 00:13:47.987
And here it will be the function name.

191
00:13:47.987 --> 00:13:53.223
So we app.WorkoutHandler and
then HandleUpdateWorkoutByID.

192
00:13:53.223 --> 00:13:57.035
Again, we're not calling these functions
cuz functions are pass as first class

193
00:13:57.035 --> 00:13:57.829
citizens in Go.

194
00:13:57.829 --> 00:13:59.719
So we could just pass them like so.

195
00:13:59.719 --> 00:14:00.809
So with all that,

196
00:14:00.809 --> 00:14:05.551
we can finally validate if those functions
we created all work accordingly.

197
00:14:05.551 --> 00:14:10.908
So go to your running go server, you can
go ahead and nuke it and run it back up.

198
00:14:10.908 --> 00:14:12.786
Awesome, if you have any errors,
I'll show up right now.

199
00:14:12.786 --> 00:14:16.613
Any compiler errors or not compilers but
any errors from connected to database,

200
00:14:16.613 --> 00:14:17.519
things like that.

201
00:14:17.519 --> 00:14:20.021
Those will show up right now.

202
00:14:20.021 --> 00:14:22.212
All right, so I'm gonna make sure
I have my Docker compose running.

203
00:14:22.212 --> 00:14:23.703
I have PSQL still running, so

204
00:14:23.703 --> 00:14:26.636
that's allows you to check
what's going on my database.

205
00:14:26.636 --> 00:14:30.031
And I have this last terminal
which I can use to curl.

206
00:14:30.031 --> 00:14:31.187
And again, you can use whatever you want.

207
00:14:31.187 --> 00:14:38.465
But if you are following along, you can
go into that post_notes section here,

208
00:14:38.465 --> 00:14:42.387
and the next sub section should be 1.6.

209
00:14:42.387 --> 00:14:47.765
Now this 1.6 request body, it's going to
make the put function call to our address,

210
00:14:47.765 --> 00:14:53.524
http.localhost8082, to workouts to the one
workout we have in our database right now.

211
00:14:53.524 --> 00:14:56.939
And here we're gonna be updating it, so
you can see we have tile description,

212
00:14:56.939 --> 00:14:58.666
duration, calories, burn entries.

213
00:14:58.666 --> 00:15:02.569
And one thing to note,
we're actually adding a third entry here,

214
00:15:02.569 --> 00:15:03.763
the plank, right?

215
00:15:03.763 --> 00:15:07.478
So we had previous squats,
and I think it was push ups.

216
00:15:07.478 --> 00:15:09.990
Now we're modifying this to dead lifts,
Pull-Ups, and

217
00:15:09.990 --> 00:15:11.482
adding a third ring called plank.

218
00:15:11.482 --> 00:15:14.149
And if you want to validate this,

219
00:15:14.149 --> 00:15:19.295
we can go again into select all
from workout_entries in PSQL and

220
00:15:19.295 --> 00:15:25.224
see that the two entries we have for
our workout are just squats and bench.

221
00:15:25.224 --> 00:15:27.606
So ideally, once we call this function,

222
00:15:27.606 --> 00:15:30.272
we should see a bunch of
this stuff be updated.

223
00:15:30.272 --> 00:15:31.957
If not, we're in trouble with the debug.

224
00:15:31.957 --> 00:15:36.867
So go ahead and copy all this down and
in your empty terminal or again,

225
00:15:36.867 --> 00:15:40.944
whatever UI you want to run,
paste it, you click Enter.

226
00:15:40.944 --> 00:15:48.566
You should now see this very, very
appealing looking JSON square blob thing.

