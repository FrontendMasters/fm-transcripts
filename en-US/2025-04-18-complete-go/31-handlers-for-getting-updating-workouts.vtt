WEBVTT

1
00:00:00.056 --> 00:00:01.237
All right, very nice.

2
00:00:01.237 --> 00:00:02.934
So now we have to get workout and

3
00:00:02.934 --> 00:00:05.752
the update workout methods
only in our data store.

4
00:00:05.752 --> 00:00:08.846
Let's go all the way up to
the workout handler and

5
00:00:08.846 --> 00:00:13.696
fix these up so that we can actually
call them, query them and test them out.

6
00:00:13.696 --> 00:00:16.227
Let's go into the workout handler above.

7
00:00:16.227 --> 00:00:22.601
So just a quick reminder we already have
handle create workout function working.

8
00:00:22.601 --> 00:00:26.341
So now we're gonna work in the handle,
get workout by ID.

9
00:00:26.341 --> 00:00:30.921
This can be fairly quick, not quick,

10
00:00:30.921 --> 00:00:34.653
but simple integration here.

11
00:00:34.653 --> 00:00:40.031
So at the bottom here, after we check
the last error for the workout ID,

12
00:00:40.031 --> 00:00:44.781
what we can do is workout error
is going to be a workout handler,

13
00:00:44.781 --> 00:00:48.841
the workout store and
the get workout by ID function.

14
00:00:48.841 --> 00:00:51.102
We can pass in the workout ID.

15
00:00:54.311 --> 00:00:57.940
&gt;&gt; Melkey: As per usual let's check the
error, so if error does not equal to nil,

16
00:00:57.940 --> 00:01:00.290
we're gonna do a format, print line error.

17
00:01:04.892 --> 00:01:08.068
&gt;&gt; Melkey: Bear with me,
it's not permanent,

18
00:01:08.068 --> 00:01:11.453
we will fix this in a couple of minutes.

19
00:01:11.453 --> 00:01:17.704
We'll do the HTTP error function,
pass in the response writer like so,

20
00:01:17.704 --> 00:01:23.862
we can say failed to read the workout,
or fail to retrieve the workout.

21
00:01:23.862 --> 00:01:29.833
And here we can do HTTP status not found.

22
00:01:35.218 --> 00:01:38.803
&gt;&gt; Melkey: So we can actually just say
method to read the workout because they

23
00:01:38.803 --> 00:01:40.116
fail to fetch the work.

24
00:01:40.116 --> 00:01:44.140
Okay, I think it's a bit more
explicit to what's happening.

25
00:01:44.140 --> 00:01:48.305
Okay, let's not forget the return
at the end there, okay?

26
00:01:48.305 --> 00:01:52.797
And at this point, we are assuming we're
able to retrieve the workout correctly.

27
00:01:52.797 --> 00:01:59.760
So then what we can do is W
header dot set content type.

28
00:02:04.222 --> 00:02:07.329
&gt;&gt; Melkey: Application/json,

29
00:02:07.329 --> 00:02:12.563
you can do w.WriteHeader over here.

30
00:02:12.563 --> 00:02:18.968
I'm gonna give it the status
of HTTP.StatusOK, like so.

31
00:02:18.968 --> 00:02:23.522
And right below we can do json.newencoder,
pass in the response writer, and

32
00:02:23.522 --> 00:02:25.937
we're gonna encode the workout like so.

33
00:02:25.937 --> 00:02:31.391
So let's go ahead and
just create the update method now as well,

34
00:02:31.391 --> 00:02:36.138
so you can just at the bottom,
get some room for us here,

35
00:02:36.138 --> 00:02:41.596
like so, create func wh for
our pointer to our workout handler.

36
00:02:41.596 --> 00:02:46.773
I'm gonna call handle update
workout by ID like so,

37
00:02:46.773 --> 00:02:51.480
this is gonna take our w
HTTP response writer and

38
00:02:51.480 --> 00:02:56.672
the body of HTTP request or
the pointer, excuse me.

39
00:02:56.672 --> 00:03:00.584
All right, and
here we have to parse that ID as well.

40
00:03:00.584 --> 00:03:05.120
Since we already have that logic written
and this will be its own function,

41
00:03:05.120 --> 00:03:09.735
we can do is simply just go up here and
let's go ahead and link this much code.

42
00:03:09.735 --> 00:03:12.923
Instead of rewriting it from scratch,
go ahead and copy and

43
00:03:12.923 --> 00:03:16.492
paste this from the get workout by
ID function, and just paste it in

44
00:03:16.492 --> 00:03:20.277
the first body, in the first line for
the handle workout by ID, okay?

45
00:03:20.277 --> 00:03:25.021
I'm gonna use this workout ID to
first fetch and get the workout, so

46
00:03:25.021 --> 00:03:27.780
here we can do existing workout error.

47
00:03:27.780 --> 00:03:34.018
Is going to be our workout handler,
the workout store, get workout by ID, and

48
00:03:34.018 --> 00:03:39.987
he passed in the workout ID that we
just extracted from our query using chi.

49
00:03:39.987 --> 00:03:45.016
Check the error, so
if our error does not equal to nil.

50
00:03:45.016 --> 00:03:47.979
Down here, we can do HTTP error.

51
00:03:50.154 --> 00:03:54.817
&gt;&gt; Melkey: W failed to
fetch workout HTTP status,

52
00:03:54.817 --> 00:04:02.179
you do internal server error like so,
and then we can return.

53
00:04:02.179 --> 00:04:04.615
And here we wanna check if
existing workout is nil,

54
00:04:04.615 --> 00:04:07.457
because we can do a get request and
see if it's empty or not.

55
00:04:07.457 --> 00:04:13.283
So here, if existing workout is in
fact nil after the error check,

56
00:04:13.283 --> 00:04:18.811
you just do HTTP not found for
right now, WR, and then return.

57
00:04:18.811 --> 00:04:23.074
Okay, so at this point,

58
00:04:23.074 --> 00:04:31.815
we can assume we are able
to find existing workout.

59
00:04:31.815 --> 00:04:37.022
Okay, now what we're gonna do
right now is create a new struct

60
00:04:37.022 --> 00:04:41.845
which is gonna act as the request
from our client struck.

61
00:04:41.845 --> 00:04:44.823
So you remember,
when we create a new workout,

62
00:04:44.823 --> 00:04:48.183
we are basically decoding
that JSON into the struct.

63
00:04:48.183 --> 00:04:52.003
We need to do the same for
update requests, okay?

64
00:04:52.003 --> 00:04:55.748
But the thing is,
we don't wanna blindly trust our client.

65
00:04:55.748 --> 00:04:58.839
I'm sure there's gonna be some clients
like client side validation, and

66
00:04:58.839 --> 00:04:59.731
that's important.

67
00:04:59.731 --> 00:05:01.925
But we can also do some server
side validation as well.

68
00:05:01.925 --> 00:05:04.218
Is it overkill, I don't think so.

69
00:05:04.218 --> 00:05:08.846
I think it's probably good to trust but
validate at the same time.

70
00:05:08.846 --> 00:05:14.182
And so with that kind of thinking, we're
gonna create this struck not anonymous.

71
00:05:14.182 --> 00:05:16.504
It's gonna live within
the scope of this function,

72
00:05:16.504 --> 00:05:18.418
and you can make it
live outside the scope.

73
00:05:18.418 --> 00:05:20.896
You can globally declare it
in the package, that's fine.

74
00:05:20.896 --> 00:05:25.847
But here this is gonna act as
that preliminary location for

75
00:05:25.847 --> 00:05:27.874
us to decode that JSON.

76
00:05:27.874 --> 00:05:30.591
We can then validate that,
are the fields correct,

77
00:05:30.591 --> 00:05:33.568
is it adhering to the password
length that we want, etc.

78
00:05:33.568 --> 00:05:38.285
And then we can replace the values
in our actual existing workout with

79
00:05:38.285 --> 00:05:43.264
those values from our client, and
then call the update workout method.

80
00:05:43.264 --> 00:05:45.720
So I'll show you how that looks,

81
00:05:45.720 --> 00:05:50.288
you can create a new variable
called update workout request.

82
00:05:50.288 --> 00:05:54.422
This is gonna be struck, and this struck
is basically gonna have the same fields

83
00:05:54.422 --> 00:05:56.841
our workout does,
with a slight difference.

84
00:05:56.841 --> 00:06:00.798
We can do title, and this time,
instead of being a string,

85
00:06:00.798 --> 00:06:03.821
this is gonna be a pointer
to a string like so.

86
00:06:03.821 --> 00:06:09.064
Same JSON tags, title, all right, and
we'll follow up with the rest of them.

87
00:06:09.064 --> 00:06:13.647
Description is going to be
also a pointer to a string.

88
00:06:13.647 --> 00:06:17.885
We can put description like so.

89
00:06:17.885 --> 00:06:20.542
Okay, we can have duration minutes.

90
00:06:22.222 --> 00:06:27.051
&gt;&gt; Melkey: This is gonna be
a pointer to an int JSON,

91
00:06:27.051 --> 00:06:31.179
duration underscore, minutes.

92
00:06:31.179 --> 00:06:35.243
We're gonna have calories burned,

93
00:06:35.243 --> 00:06:40.510
whoops,
&gt;&gt; Melkey: Like so,

94
00:06:40.510 --> 00:06:42.224
this would be pointer to int.

95
00:06:47.648 --> 00:06:50.144
&gt;&gt; Melkey: Okay, and
the last one are entries, right?

96
00:06:50.144 --> 00:06:53.997
Because we know entries is a slice,
the native default type for

97
00:06:53.997 --> 00:06:55.462
a slice is already nil.

98
00:06:55.462 --> 00:07:00.072
So we can do store.WorkoutEntry, okay?

99
00:07:00.072 --> 00:07:06.189
We can do our JSON tag as just entries
like so, with that now declared,

100
00:07:06.189 --> 00:07:11.698
we can use the same JSON logic we
had earlier of the new decoder.

101
00:07:11.698 --> 00:07:15.017
Let's grab it from our r.body, and

102
00:07:15.017 --> 00:07:21.028
what we're gonna decode is in
the update workout request like so.

103
00:07:21.028 --> 00:07:25.809
Let's check that error, so if our error
does not equal to nil, we can just do

104
00:07:25.809 --> 00:07:30.518
HTTP error, pass in the response writer,
and then we can just simply write

105
00:07:30.518 --> 00:07:35.194
the actual error message that we
are extracting from the decoder like so.

106
00:07:35.194 --> 00:07:39.132
I'm gonna HTTP something
like status bad request.

107
00:07:41.317 --> 00:07:45.031
&gt;&gt; Melkey: And make sure we return.

108
00:07:45.031 --> 00:07:48.044
So now that we have this
update worker request, and

109
00:07:48.044 --> 00:07:52.968
let's say we successfully decoded it,
the question is, why are these pointers?

110
00:07:52.968 --> 00:07:57.524
And the reason for that is this allows us
to now check if those values are truly nil

111
00:07:57.524 --> 00:07:59.233
or if they intend to be empty.

112
00:07:59.233 --> 00:08:02.652
Let's say someone goes back and updates
the workout and they said, you know what?

113
00:08:02.652 --> 00:08:06.490
I don't want a description on this field,
and they leave it empty, like an empty

114
00:08:06.490 --> 00:08:10.001
string, which we found out is the default
or zero value of strings for go.

115
00:08:10.001 --> 00:08:13.468
Do we wanna treat that as if
it's a non-existing value and

116
00:08:13.468 --> 00:08:18.137
not update that worker entry, or do we
think that our user is actually trying to

117
00:08:18.137 --> 00:08:20.787
update this form
a description to be empty?

118
00:08:20.787 --> 00:08:24.004
So to do that successfully,
we can check with a nil pointer,

119
00:08:24.004 --> 00:08:27.428
we can check if that value is
actually nil or not from our client.

120
00:08:27.428 --> 00:08:30.648
Because if they don't send
anything from our client,

121
00:08:30.648 --> 00:08:35.550
there's nothing gonna be there, and a nil
is not the same thing as an empty string.

122
00:08:35.550 --> 00:08:38.570
So this update work request
variable that we have,

123
00:08:38.570 --> 00:08:43.007
we could do something a little bit
repetitive, but I think it's worth it.

124
00:08:43.007 --> 00:08:47.325
We can check if update
workout request.title, and

125
00:08:47.325 --> 00:08:52.240
we can do this for
every field does not equal to nil, right?

126
00:08:52.240 --> 00:08:55.896
What we can then do is existing
workout.title, reminder,

127
00:08:55.896 --> 00:08:59.703
existing workout is the worker
we treat just a few lines above.

128
00:08:59.703 --> 00:09:03.823
We can set this equal to
the deep reference value of

129
00:09:03.823 --> 00:09:07.758
update worker request.title like so, cool.

130
00:09:07.758 --> 00:09:11.702
So just a little bit more server side
validation on what we're getting and

131
00:09:11.702 --> 00:09:13.559
expecting from our client calls.

132
00:09:17.722 --> 00:09:21.157
&gt;&gt; Melkey: Okay, and we can do this for
all those fields, so you can go ahead and

133
00:09:21.157 --> 00:09:25.259
copy and paste this for description,
duration, minutes, calories burned and

134
00:09:25.259 --> 00:09:25.822
entries.

135
00:09:25.822 --> 00:09:31.792
You can do update worker request set
of dot title we can do description.

136
00:09:31.792 --> 00:09:37.754
If you are copying, make sure you
are careful with fixing the field names.

137
00:09:45.586 --> 00:09:47.423
&gt;&gt; Student: Is there a way that
you could have looked on that?

138
00:09:47.423 --> 00:09:48.234
&gt;&gt; Melkey: Sorry.

139
00:09:48.234 --> 00:09:49.469
&gt;&gt; Student: Maybe create a loop and

140
00:09:49.469 --> 00:09:52.725
just replace some key values
instead of having all of that.

141
00:09:52.725 --> 00:09:54.773
&gt;&gt; Melkey: You can,
yeah, you for sure can.

142
00:09:54.773 --> 00:09:58.353
I just wrote it like this again,
to be as explicit as possible.

143
00:09:58.353 --> 00:10:02.345
I think I took more of an explicit
approach into this course,

144
00:10:02.345 --> 00:10:04.460
I think throughout the course,

145
00:10:04.460 --> 00:10:09.410
there's a ton of these optimization
things that people can probably use.

146
00:10:09.410 --> 00:10:13.082
We're gonna just keep it as this
very unsettling if else over and

147
00:10:13.082 --> 00:10:15.802
over again, but
you can just definitely do just

148
00:10:15.802 --> 00:10:19.684
range over all those values to check
up their nail and replace them.

149
00:10:34.676 --> 00:10:38.456
&gt;&gt; Melkey: So I got DurationMinutes,
next, I'm gonna do calories burned,

150
00:10:46.032 --> 00:10:47.369
&gt;&gt; Melkey: All right.

151
00:10:51.737 --> 00:10:53.469
&gt;&gt; Melkey: And the last one is entries.

152
00:11:15.046 --> 00:11:16.054
&gt;&gt; Melkey: Yeah?

153
00:11:16.054 --> 00:11:19.040
&gt;&gt; Student: Could you explain why we don't
need the pointer on the entries again?

154
00:11:19.040 --> 00:11:22.882
&gt;&gt; Melkey: Yeah, absolutely,
so string and ints.

155
00:11:22.882 --> 00:11:27.511
The zero value for
those is either an empty string or a zero,

156
00:11:27.511 --> 00:11:31.871
right, with a slice, the zero or
default value is nil.

157
00:11:31.871 --> 00:11:37.155
So the reason we're even using
pointers on relative line 29 up for

158
00:11:37.155 --> 00:11:43.010
title description duration is because
the zero value for a pointer is nil.

159
00:11:43.010 --> 00:11:47.710
And so that gives us that ability to
check does this actually exist or

160
00:11:47.710 --> 00:11:49.034
does it not exist?

161
00:11:49.034 --> 00:11:52.500
Which goes back to the example like
maybe someone actually wants to send

162
00:11:52.500 --> 00:11:53.258
zero, right?

163
00:11:53.258 --> 00:11:57.963
If they do, okay, cool, we can process
that, but if we don't have a way to fully

164
00:11:57.963 --> 00:12:02.672
check the integrity of the request that we
may accidentally take a zero value by go

165
00:12:02.672 --> 00:12:06.228
and replace it to be something
that it really shouldn't be.

166
00:12:06.228 --> 00:12:10.397
So this nil check gives us more of that,
not authenticity, but

167
00:12:10.397 --> 00:12:14.882
more of that confidence to make sure
that we are processing the right

168
00:12:14.882 --> 00:12:16.624
request from our caller.

169
00:12:16.624 --> 00:12:22.442
Here we can just do it error, we can
do workout handler is workout store.

170
00:12:22.442 --> 00:12:26.858
We can click update workout,
you can pass in that new,

171
00:12:26.858 --> 00:12:31.383
fairly new, but
we can say improved existing workout.

172
00:12:31.383 --> 00:12:34.507
You can check if our error
does not equal to nil.

173
00:12:34.507 --> 00:12:39.691
We can just print the error for
ourselves but we can just do format

174
00:12:39.691 --> 00:12:44.683
print align and say update workout
error to be more explicit in

175
00:12:44.683 --> 00:12:49.498
case some people do get errors
here who are trying this out.

176
00:12:49.498 --> 00:12:57.171
We can do error we do W, we can also
say failed to update the workout,

177
00:12:57.171 --> 00:13:01.626
we can put HTTP internal server error.

178
00:13:01.626 --> 00:13:05.474
We can return, and the last little
bit is running back to our client.

179
00:13:05.474 --> 00:13:11.968
So w header, we can set content dash type

180
00:13:11.968 --> 00:13:17.323
application slash JSON like so.

181
00:13:17.323 --> 00:13:22.710
We can do write our header, so w.write.

182
00:13:28.026 --> 00:13:29.207
&gt;&gt; Melkey: There you go, right?

183
00:13:29.207 --> 00:13:34.490
Header we can do HTP status okay.

184
00:13:34.490 --> 00:13:40.233
And then we can just say JSON.new encoder,
passed in our response writer,

185
00:13:40.233 --> 00:13:44.195
and then we can encode
the existing workout like so.

186
00:13:44.195 --> 00:13:48.935
So we just wrapped up writing
our update handler, and for

187
00:13:48.935 --> 00:13:53.675
that, we just created
the functions in our data store for

188
00:13:53.675 --> 00:13:57.751
creating, reading and
updating the workouts.

189
00:13:57.751 --> 00:13:59.673
So now we're gonna test these out.

190
00:13:59.673 --> 00:14:01.529
There's just one thing we have to do,

191
00:14:01.529 --> 00:14:05.363
which is to route one of the new functions
that update handler into our routes.

192
00:14:05.363 --> 00:14:10.959
So we'll go here, so
right underneath the workouts,

193
00:14:10.959 --> 00:14:13.767
we can do an r.Put, okay.

194
00:14:13.767 --> 00:14:17.931
And here we'll put passed
in slash workouts, and

195
00:14:17.931 --> 00:14:22.508
then the slug,
which is just the curly brackets, ID.

196
00:14:22.508 --> 00:14:26.953
And here it will be the function names,
will be app.workout handler,

197
00:14:26.953 --> 00:14:29.485
and then handle, update workout by ID.

198
00:14:29.485 --> 00:14:33.221
Again, we're not calling these functions
cuz functions are passed as first class

199
00:14:33.221 --> 00:14:33.978
citizens in Go.

200
00:14:33.978 --> 00:14:35.823
So we could just pass them like so.

201
00:14:35.823 --> 00:14:36.913
So with all that,

202
00:14:36.913 --> 00:14:41.662
we can finally validate if those functions
we created all work accordingly.

203
00:14:41.662 --> 00:14:46.978
So go to your running Go server, you can
go ahead and nuke it and run it back up.

204
00:14:46.978 --> 00:14:48.900
Awesome, if you have any errors,
they'll show up right now.

205
00:14:48.900 --> 00:14:53.422
Any compiler errors or, not compilers,
but any errors from a connected database,

206
00:14:53.422 --> 00:14:56.046
things like that,
those will show up right now.

207
00:14:56.046 --> 00:14:58.307
All right, so I'm just gonna make sure
I have my I'm talking to pose running.

208
00:14:58.307 --> 00:14:59.837
I have psql still running, so

209
00:14:59.837 --> 00:15:02.783
that's allows me to check
what's going on my database.

210
00:15:02.783 --> 00:15:06.105
And I have this last terminal
which I can use to curl.

211
00:15:06.105 --> 00:15:11.404
And again, you can use whatever you want,
but if you are following along,

212
00:15:11.404 --> 00:15:15.696
you can go into that post
underscore notes section here, and

213
00:15:15.696 --> 00:15:18.491
the next sub section should be 1.6.

214
00:15:18.491 --> 00:15:24.212
Now this 1.6 request body, it's going to
make the put function call to our address,

215
00:15:24.212 --> 00:15:30.038
HTTP local host 8082, workouts to the one
workout we have in our database right now.

216
00:15:30.038 --> 00:15:32.630
And here we're gonna be updating it,
so you can see we have tile,

217
00:15:32.630 --> 00:15:34.816
description, duration,
calories, burn entries.

218
00:15:34.816 --> 00:15:38.722
And one thing to note,
we're actually adding a third entry here,

219
00:15:38.722 --> 00:15:39.918
the plank, right?

220
00:15:39.918 --> 00:15:44.379
So we had previous squats, and I think it
was push ups, now we're modifying this to

221
00:15:44.379 --> 00:15:47.533
dead lifts, pull ups and
adding a third and called plank.

222
00:15:47.533 --> 00:15:50.018
And if you wanna validate this,

223
00:15:50.018 --> 00:15:55.726
we can go again into select all from
workout underscore entries in psql and

224
00:15:55.726 --> 00:16:01.453
see that the two entries we have for
our workout are just squats and bench.

225
00:16:01.453 --> 00:16:03.833
So ideally, once we call this function,

226
00:16:03.833 --> 00:16:06.489
we should see a bunch of
this stuff be updated.

227
00:16:06.489 --> 00:16:08.055
If not, we're in trouble with the debug.

228
00:16:08.055 --> 00:16:12.462
So go ahead and copy all this down and
in your empty terminal, or again,

229
00:16:12.462 --> 00:16:14.159
whatever UI you wanna run.

230
00:16:14.159 --> 00:16:19.453
Paste it, you click Enter,
you should now see this

231
00:16:19.453 --> 00:16:25.010
very very appealing looking
JSON square blob thing.

