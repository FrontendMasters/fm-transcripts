WEBVTT

1
00:00:00.000 --> 00:00:05.711
&gt;&gt; Melkey: So like I said, main file
is supposed to be kind of tight, clean.

2
00:00:05.711 --> 00:00:09.206
Ours is getting there, especially
with the flag ports getting nicer.

3
00:00:09.206 --> 00:00:10.737
But this is just an eyesore.

4
00:00:10.737 --> 00:00:13.159
This HealthCheck, it's an eyesore.

5
00:00:13.159 --> 00:00:14.229
Why is this there, right?

6
00:00:14.229 --> 00:00:17.089
Does this mean every time we
add a new handle function,

7
00:00:17.089 --> 00:00:18.527
it has to be appended here?

8
00:00:18.527 --> 00:00:21.228
That would be sickening.

9
00:00:21.228 --> 00:00:24.832
So what I'm going to do is
I'm gonna just copy this.

10
00:00:24.832 --> 00:00:27.641
I'm gonna go to our
app.go file right here.

11
00:00:27.641 --> 00:00:33.139
I'm gonna paste it into its
own separate function, okay?

12
00:00:33.139 --> 00:00:38.851
My editor hates me, so
I have to bring in all those packages,

13
00:00:38.851 --> 00:00:42.659
so net/http, and then format, okay?

14
00:00:42.659 --> 00:00:46.860
But the next thing I wanna do is I wanna
make this exist on our app struct, and

15
00:00:46.860 --> 00:00:51.278
this is slowly going to present how we're
gonna structure the rest of our app.

16
00:00:51.278 --> 00:00:59.055
So here I'm gonna make a method receiver
on a Application, like so, all right?

17
00:00:59.055 --> 00:01:00.835
And just as a final reminder,

18
00:01:00.835 --> 00:01:05.477
this means that our application struct
has now a method called HealthCheck.

19
00:01:05.477 --> 00:01:09.144
But if I just did that,
what's going on in main.go?

20
00:01:09.144 --> 00:01:11.091
We have this.

21
00:01:11.091 --> 00:01:16.469
If I remove this, now, we have this error,
right, undefined HealthCheck.

22
00:01:16.469 --> 00:01:18.445
So how do we solve this?

23
00:01:18.445 --> 00:01:21.510
Well, there's a few things
we can do to solve it.

24
00:01:21.510 --> 00:01:27.393
The one I'm gonna introduce is actually
introducing our Chi package, so Chi v5.

25
00:01:27.393 --> 00:01:30.127
So I'm gonna briefly go here and

26
00:01:30.127 --> 00:01:36.114
showcase the first package we're
gonna bring into our application.

27
00:01:36.114 --> 00:01:38.891
This is Go Chi, all right?

28
00:01:38.891 --> 00:01:42.289
So Go Chi is a lightweight, idiomatic and

29
00:01:42.289 --> 00:01:46.473
composable router for
building Go HTTP services.

30
00:01:46.473 --> 00:01:49.230
You can see it has 19.2
thousand GitHub stars.

31
00:01:49.230 --> 00:01:51.077
It is decently maintained.

32
00:01:51.077 --> 00:01:56.814
Still from three weeks ago, it has some
maintenance, even some two weeks ago.

33
00:01:56.814 --> 00:02:02.303
It is a very standard package that
a lot of engineers choose to use.

34
00:02:02.303 --> 00:02:04.525
And you don't have to use Chi,
there's a bunch of these.

35
00:02:04.525 --> 00:02:08.791
There's Gin, there's Echo,
there's Gorilla Mux.

36
00:02:08.791 --> 00:02:10.956
It really depends on what you want, right?

37
00:02:10.956 --> 00:02:15.763
And we're gonna use Chi to handle our
routing, but also Chi gives the ability to

38
00:02:15.763 --> 00:02:19.377
create middlewares and
use Chi's built-in middleware.

39
00:02:19.377 --> 00:02:24.563
So I personally like Chi because it's so
close to the standard library.

40
00:02:24.563 --> 00:02:28.486
It implements the interfaces for
the standard library,

41
00:02:28.486 --> 00:02:31.766
much do like the other
ones I mentioned as well.

42
00:02:31.766 --> 00:02:36.315
But for me, I just thought Chi was
just super simple, super light to use.

43
00:02:36.315 --> 00:02:37.820
We're gonna implement Chi,
we're gonna take it.

44
00:02:37.820 --> 00:02:41.646
So the way we do this is
we're gonna copy this.

45
00:02:41.646 --> 00:02:44.912
I'm gonna write that in my terminal and
give you guys a chance to copy it down.

46
00:02:44.912 --> 00:02:48.854
But if we go back to the terminal,
open up a terminal here.

47
00:02:48.854 --> 00:02:52.910
We can just do, go get -u, and

48
00:02:52.910 --> 00:02:58.537
then github.com/go-chi/chi/v5.

49
00:02:58.537 --> 00:03:02.994
Now, remember when I talked about the Go
module publicly facing, this is why.

50
00:03:02.994 --> 00:03:07.196
This is how we pull different
packages from GitHub,

51
00:03:07.196 --> 00:03:12.651
from Go Codeberg, GitLab,
I don't know, into our package here.

52
00:03:12.651 --> 00:03:17.460
&gt;&gt; Speaker 2: You mentioned with Chi,
that it enables us to write middleware.

53
00:03:17.460 --> 00:03:20.959
Do you mean it's easier to write
middleware with, or what is the?

54
00:03:20.959 --> 00:03:22.245
&gt;&gt; Melkey: Yeah, no, great question.

55
00:03:22.245 --> 00:03:26.807
So enables middleware is probably
not the best description,

56
00:03:26.807 --> 00:03:30.149
we are able to write
middleware without Chi.

57
00:03:30.149 --> 00:03:34.640
What Chi does is it modifies
the request pointer from our methods,

58
00:03:34.640 --> 00:03:36.977
from curls that request pointer.

59
00:03:36.977 --> 00:03:41.101
And it allows us to inject things and
retrieve things from the request,

60
00:03:41.101 --> 00:03:43.518
to basically insert our own middleware.

61
00:03:43.518 --> 00:03:46.739
And it does that very elegantly, okay?

62
00:03:46.739 --> 00:03:48.415
But you can do this without Chi.

63
00:03:48.415 --> 00:03:54.221
I just found the way it groups everything,
it made sense to me to use it, okay?

64
00:03:54.221 --> 00:03:55.453
Let's go ahead and run this.

65
00:03:55.453 --> 00:03:57.212
You can see Go added.

66
00:03:57.212 --> 00:04:03.047
Now, one thing I wanna point out
is we now have a go.sum file,

67
00:04:03.047 --> 00:04:05.976
which we didn't have before.

68
00:04:05.976 --> 00:04:08.916
For those of us who
are in the web dev world,

69
00:04:08.916 --> 00:04:12.692
we are probably familiar
with package-lock.json.

70
00:04:12.692 --> 00:04:15.009
This is the package-lock.json equivalent.

71
00:04:15.009 --> 00:04:22.665
This is particular hashes of what we
pulled down from Go, from Chi v5.

72
00:04:22.665 --> 00:04:27.528
So when our application runs,
the go.sum provides the exact hashes for

73
00:04:27.528 --> 00:04:30.807
us to replicate that pull
into our application.

74
00:04:30.807 --> 00:04:37.629
And then if you look,
our go.mod now has a new require field for

75
00:04:37.629 --> 00:04:43.696
our Chi package, okay, so
small modifications here.

76
00:04:43.696 --> 00:04:48.679
And with all that, we're gonna go into
our route and we're going to set this up.

77
00:04:48.679 --> 00:04:53.243
So our routes package is gonna
have one really crucial role.

78
00:04:53.243 --> 00:04:55.233
It's gonna route everything, okay?

79
00:04:55.233 --> 00:04:58.155
And it's gonna have one function.

80
00:04:58.155 --> 00:05:02.536
And for me, the way I like to organize my
projects, this allows me to just go here,

81
00:05:02.536 --> 00:05:03.691
know what to modify.

82
00:05:03.691 --> 00:05:06.544
Middlewares go here,
new functions defined here.

83
00:05:06.544 --> 00:05:08.380
Grouping functions go here, okay?

84
00:05:08.380 --> 00:05:12.646
Private functions that a person
signed in versus not signed in,

85
00:05:12.646 --> 00:05:14.546
will be all defined in here.

86
00:05:14.546 --> 00:05:18.595
And the way we're gonna do this
is we're gonna create a function,

87
00:05:18.595 --> 00:05:20.483
capital SetupRoutes, okay?

88
00:05:20.483 --> 00:05:23.206
And SetupRoutes is going
to take one argument.

89
00:05:23.206 --> 00:05:30.200
It's going to be our application,
app.Application.

90
00:05:30.200 --> 00:05:36.231
And it's going to return one item,

91
00:05:36.231 --> 00:05:41.466
a pointer to chi.Mux, okay?

92
00:05:41.466 --> 00:05:43.149
And then Mux just adheres.

93
00:05:43.149 --> 00:05:46.301
Again, if you look into Mux real quick,

94
00:05:46.301 --> 00:05:52.063
it is basically a struct that computes
all the handlers for our function.

95
00:05:52.063 --> 00:05:56.826
And this Mux struct has
all the fields to satisfy

96
00:05:56.826 --> 00:06:02.433
the native standard library
HTTP function interface.

97
00:06:02.433 --> 00:06:07.428
Meaning we can use now this new Chi Mux,
if we go back to

98
00:06:07.428 --> 00:06:12.312
our main.go,
to replace this HandleFunc, okay?

99
00:06:12.312 --> 00:06:15.724
So now if we go back to routes,

100
00:06:15.724 --> 00:06:20.644
we can define r as chi.NewRouter, okay?

101
00:06:20.644 --> 00:06:26.232
And then here we're gonna do r.Get,
cuz we wanna create a new GET method.

102
00:06:26.232 --> 00:06:28.734
The path is gonna be /health.

103
00:06:28.734 --> 00:06:33.606
And then the function, well,
remember our HealthCheck function

104
00:06:33.606 --> 00:06:37.529
that used to exist in
main.go it's no longer there.

105
00:06:37.529 --> 00:06:44.352
We moved it to app.go, but we made it
as a method on our Application struct.

106
00:06:44.352 --> 00:06:49.169
Which now, if we go back here,
we can just simply put

107
00:06:49.169 --> 00:06:53.342
app.HealthCheck as a first class citizen.

108
00:06:53.342 --> 00:06:57.520
Then we can return r.

109
00:06:57.520 --> 00:07:02.367
If we go back to our main.go now,
we can import up

110
00:07:02.367 --> 00:07:07.467
here internal/routes,
okay, import not used.

111
00:07:07.467 --> 00:07:10.172
Let's go down here,
where we had the previous HealthCheck.

112
00:07:10.172 --> 00:07:12.586
Nuke that, we don't want that anymore.

113
00:07:12.586 --> 00:07:18.721
What we're going to do is
declare r as route.SetupRoutes.

114
00:07:18.721 --> 00:07:22.484
I'm gonna pass in our app, like so.

115
00:07:22.484 --> 00:07:25.104
Now we've declared unused r,

116
00:07:25.104 --> 00:07:30.656
we can put into the property of
our HTTP server struct, Handler.

117
00:07:30.656 --> 00:07:33.660
And we just pass r, like so.

118
00:07:33.660 --> 00:07:37.991
And now in terms of every
time we add new methods,

119
00:07:37.991 --> 00:07:42.016
we know that all we have
to do is add them here.

120
00:07:42.016 --> 00:07:47.332
The pipelining is done because
of this small handler passing r,

121
00:07:47.332 --> 00:07:49.601
that's been fixed for us.

122
00:07:49.601 --> 00:07:56.334
And so if we go back, nuke our server,
go run main.go, it's going to run.

123
00:07:56.334 --> 00:08:00.797
And here,
if we just curl localhost:8080/health,

124
00:08:00.797 --> 00:08:03.571
it's gonna work the exact same way.

125
00:08:03.571 --> 00:08:05.445
But now we are using Chi.

126
00:08:05.445 --> 00:08:08.091
Now we have a way to
orchestrate all of our routes.

127
00:08:08.091 --> 00:08:12.700
And now we have a way to safely and
maybe better organize our project for

128
00:08:12.700 --> 00:08:15.841
when we include more
methods onto the project.

