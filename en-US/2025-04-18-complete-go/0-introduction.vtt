WEBVTT

1
00:00:00.024 --> 00:00:01.606
&gt;&gt; Melkey: So, my name is Melkey.

2
00:00:01.606 --> 00:00:06.260
I am a machine learning
infrastructure engineer at Twitch.

3
00:00:06.260 --> 00:00:09.818
I've been there for over three and
half years now, which is crazy,

4
00:00:09.818 --> 00:00:10.891
time really flies.

5
00:00:10.891 --> 00:00:15.886
I joined as a junior engineer
with very little work experience.

6
00:00:15.886 --> 00:00:20.622
And then three and half years later, I'm
still there and I really much so enjoy it.

7
00:00:20.622 --> 00:00:24.500
And the interesting part about,
I guess the title,

8
00:00:24.500 --> 00:00:29.360
is people always ask me,
how do you write Go in machine learning?

9
00:00:29.360 --> 00:00:32.347
I thought it's more like a Python thing or
something like that.

10
00:00:32.347 --> 00:00:35.957
And people who make those
comments are absolutely right.

11
00:00:35.957 --> 00:00:39.087
If I was creating the machine
learning modules and models,

12
00:00:39.087 --> 00:00:41.035
I would probably be writing Python.

13
00:00:41.035 --> 00:00:45.054
The part that benefits me is
the infrastructure part of the title.

14
00:00:45.054 --> 00:00:49.903
And because of that infrastructure aspect,
that's where I use Go a lot.

15
00:00:49.903 --> 00:00:52.347
I write everything
around the actual model.

16
00:00:52.347 --> 00:00:56.616
So I work really closely with data
scientists, who develop the model,

17
00:00:56.616 --> 00:00:59.687
train the model, and
then I work to make it usable.

18
00:00:59.687 --> 00:01:00.782
How to put in production?

19
00:01:00.782 --> 00:01:02.651
How do we make it reliable?

20
00:01:02.651 --> 00:01:06.834
How do we make sure it's quick,
it's fast, it's safe?

21
00:01:06.834 --> 00:01:08.545
Train new data, the pipeline.

22
00:01:08.545 --> 00:01:13.588
So, all those aspects is kind of my bread
and butter, and we use Go at Twitch,

23
00:01:13.588 --> 00:01:18.256
and that's how I've developed my own
set of skills with the language.

24
00:01:18.256 --> 00:01:21.305
I stream live code at twitch.tv/melkey.

25
00:01:21.305 --> 00:01:26.929
So I am actually a user of the product
at the company that I work for.

26
00:01:26.929 --> 00:01:28.790
And I think that's also really cool.

27
00:01:28.790 --> 00:01:31.314
I think if any aspect
where you are a user or

28
00:01:31.314 --> 00:01:34.778
you experience something that
you are part of building,

29
00:01:34.778 --> 00:01:39.483
I think it just adds more of that kinda
passion to do it, that the want to do it.

30
00:01:39.483 --> 00:01:43.147
And then I also make coding
videos at youtube.com/melkey.

31
00:01:43.147 --> 00:01:47.120
The YouTube videos are not just
reruns of the live stream,

32
00:01:47.120 --> 00:01:50.858
I don't just take snippets of my life and
box them out.

33
00:01:50.858 --> 00:01:52.799
I actually record everything new,

34
00:01:52.799 --> 00:01:56.432
because I want my YouTube to be
more core tutorials, core topics.

35
00:01:56.432 --> 00:01:57.851
So, yeah, check it out.

36
00:01:57.851 --> 00:01:59.725
I have lots of videos on Go,

37
00:01:59.725 --> 00:02:04.535
where I explore cool packages found
on GitHub that solve a problem, or

38
00:02:04.535 --> 00:02:09.602
how to do something with Go that maybe
some people haven't really faced.

39
00:02:09.602 --> 00:02:13.056
And then there's also just topics that
I think are interesting to talk about.

40
00:02:13.056 --> 00:02:16.137
I constantly try to build
many different things.

41
00:02:16.137 --> 00:02:20.477
I'm one of those people that gets an idea,
try to spin it up, buy a domain.

42
00:02:20.477 --> 00:02:23.486
And then hopefully I finish it,
but sometimes I don't.

43
00:02:23.486 --> 00:02:27.009
But some of the things I have
finished include go-blueprint.

44
00:02:27.009 --> 00:02:29.538
So, it is a project on GitHub.

45
00:02:29.538 --> 00:02:31.670
It has about 7000 stars.

46
00:02:31.670 --> 00:02:36.461
It's a CLI tool that spins
up Go projects for you.

47
00:02:36.461 --> 00:02:40.082
So, when I first started,
it only spun up the routing for

48
00:02:40.082 --> 00:02:43.176
Go projects,
like just the file structure, and

49
00:02:43.176 --> 00:02:47.338
then some some endpoints that
people can query and some options.

50
00:02:47.338 --> 00:02:51.456
But it's really evolved due
to people kind of being

51
00:02:51.456 --> 00:02:54.537
interested in what this could offer.

52
00:02:54.537 --> 00:02:58.905
And so, now it can spin up a front
end portion using HTML, React,

53
00:02:58.905 --> 00:03:01.616
we have a svelte component in the works.

54
00:03:01.616 --> 00:03:03.878
So yeah, it's a really cool project.

55
00:03:03.878 --> 00:03:06.841
I'm very proud of it.
And I'm more proud of the contributions

56
00:03:06.841 --> 00:03:10.950
honestly, and being part of
a bigger scene in open source.

57
00:03:10.950 --> 00:03:15.255
Another thing I've built is that pfglabs,
it's a platform for

58
00:03:15.255 --> 00:03:17.016
people to learn about Go.

59
00:03:17.016 --> 00:03:20.726
It's not a platform for
courses to be hosted,

60
00:03:20.726 --> 00:03:25.590
it's more of a platform for
doing projects interactively.

61
00:03:25.590 --> 00:03:30.676
So, at pfglabs, you will write code
on your own Ide could be VS Code and

62
00:03:30.676 --> 00:03:32.415
even whatever you use.

63
00:03:32.415 --> 00:03:35.881
And then you actually submit using Git,
your project.

64
00:03:35.881 --> 00:03:40.527
And then we run it through our system to
tell you if you've passed the tests for

65
00:03:40.527 --> 00:03:42.832
whatever project you're building.

66
00:03:42.832 --> 00:03:44.932
So, it's a little more interactive.

67
00:03:44.932 --> 00:03:47.118
It's also focused on Go.

68
00:03:47.118 --> 00:03:48.535
And then, some other things,

69
00:03:48.535 --> 00:03:51.214
I actually taught a previous
course on Frontend Masters.

70
00:03:51.214 --> 00:03:56.203
The first course was how to build
production apps that scale using Go

71
00:03:56.203 --> 00:03:56.910
and AWS.

72
00:03:56.910 --> 00:03:59.567
So again, we touch on Go in that course.

73
00:03:59.567 --> 00:04:03.088
I go through, maybe more of
a preliminary beginner aspect of Go,

74
00:04:03.088 --> 00:04:05.273
really showcasing some of that syntax.

75
00:04:05.273 --> 00:04:09.027
And then we encompass AWS
to deploy the application.

76
00:04:09.027 --> 00:04:11.657
So if that's something that
you'd like to check out,

77
00:04:11.657 --> 00:04:14.701
definitely encourage everyone
to look at that course as well.

78
00:04:14.701 --> 00:04:20.687
For this course in particular, I've jotted
down four things that we will be needing.

79
00:04:20.687 --> 00:04:23.387
And I'm not gonna say the obvious one,
like a Wi Fi connection,

80
00:04:23.387 --> 00:04:26.739
obviously we need Internet, which will
be bringing in different components.

81
00:04:26.739 --> 00:04:31.994
But the things that we absolutely
need in our machine is Go.

82
00:04:31.994 --> 00:04:34.296
So we'll have Go installed your machine.

83
00:04:34.296 --> 00:04:39.929
I'll actually show people how we can
install Go when we get to the component.

84
00:04:39.929 --> 00:04:43.407
So I'll show you how you can set
it up on VS Code or any of them.

85
00:04:43.407 --> 00:04:46.765
Docker and
Docker compose installed on your computer.

86
00:04:46.765 --> 00:04:49.871
This one, I was very hesitant about,

87
00:04:49.871 --> 00:04:54.736
because we can do a full Go
course without using any Docker.

88
00:04:54.736 --> 00:05:00.055
But I thought, I wanna just kinda rip the
bandit off, and I wanna encompass Docker.

89
00:05:00.055 --> 00:05:04.078
And if you're not familiar with Docker,
it's simply just the way I describe is,

90
00:05:04.078 --> 00:05:06.993
it is simply just these containers
that have software, and

91
00:05:06.993 --> 00:05:10.581
that software just lives in the container,
not on your actual machine.

92
00:05:10.581 --> 00:05:13.209
So on your actual machine,
you'll have this Docker container,

93
00:05:13.209 --> 00:05:15.039
which you can think of,
just this black box.

94
00:05:15.039 --> 00:05:18.543
And within it it will have any
software that you specify to have.

95
00:05:18.543 --> 00:05:23.450
And the reason we're gonna have Docker
is cuz I don't want to be too invasive

96
00:05:23.450 --> 00:05:25.304
into people's computers.

97
00:05:25.304 --> 00:05:29.023
So Docker, think is just
a good way to spin things up.

98
00:05:29.023 --> 00:05:31.907
And we're gonna be using Docker for
our database.

99
00:05:31.907 --> 00:05:34.910
And our database is going
to be with Postgres.

100
00:05:34.910 --> 00:05:38.453
I chose Postgres because simply,
it's an industry standard.

101
00:05:38.453 --> 00:05:41.558
I think it's the best
solution to relational data.

102
00:05:41.558 --> 00:05:45.562
Of course, if you're interested
in non relational data,

103
00:05:45.562 --> 00:05:50.698
document-style data, there's Mongo,
no SQL solutions like DynamoDB.

104
00:05:50.698 --> 00:05:54.558
But I thought for our case,
let's keep the data relational.

105
00:05:54.558 --> 00:05:55.983
I think it's a little bit
more straightforward.

106
00:05:55.983 --> 00:05:59.684
And Postgres is all reliable, I think
that's the best way I could put it.

107
00:05:59.684 --> 00:06:00.761
It's going to work.

108
00:06:00.761 --> 00:06:03.898
The future rolls out,
they're always great.

109
00:06:03.898 --> 00:06:08.120
You can really throw anything at
Postgres and it typically works.

110
00:06:08.120 --> 00:06:13.218
There's very few situations
where people break Postgres.

111
00:06:13.218 --> 00:06:14.731
So, I'm a big fan of it.

112
00:06:14.731 --> 00:06:16.333
If you couldn't tell.

113
00:06:16.333 --> 00:06:19.234
And then, there's this little + PSQL.

114
00:06:19.234 --> 00:06:24.275
PSQL is simply a way for
us to interact with Postgres.

115
00:06:24.275 --> 00:06:27.647
So if you're kind of following the trend
here, we'll have Docker, Docker will

116
00:06:27.647 --> 00:06:30.834
have Postgres, and that will have our
database, and we'll connect to it.

117
00:06:30.834 --> 00:06:34.286
And then we kind of wanna see
what's happening in the database.

118
00:06:34.286 --> 00:06:35.867
So we're gonna be using PSQL.

119
00:06:35.867 --> 00:06:40.023
However, if you wanna use another
app that has a UI component,

120
00:06:40.023 --> 00:06:45.686
there's stuff like Bruno, Postman,
Postwoman, apps like that, that works too.

121
00:06:45.686 --> 00:06:50.207
Or sorry, for PSQL it would be DBeaver and
other tools where you can actually look at

122
00:06:50.207 --> 00:06:53.839
the database interactively,
pgAdmin I think is also a solution.

123
00:06:53.839 --> 00:06:56.541
For me, PSQL was simply a tool
that runs in a terminal.

124
00:06:56.541 --> 00:07:00.796
So we'll just see my terminal and
we'll use PSQL commands to connect to it.

125
00:07:00.796 --> 00:07:03.863
CURL is where we're
obviously going to be using,

126
00:07:03.863 --> 00:07:08.024
cuz we're gonna query our server,
our back end server ring and Go,

127
00:07:08.024 --> 00:07:11.770
that's gonna communicate to
our database most of the time.

128
00:07:11.770 --> 00:07:15.766
I use cURL cuz, again,
I'm a fan of just having the terminal and

129
00:07:15.766 --> 00:07:18.874
having just the terminal
UI dictate everything.

130
00:07:18.874 --> 00:07:22.350
So I read my cURL commands,
you'll see them there.

131
00:07:22.350 --> 00:07:23.872
Sometimes not the prettiest, but

132
00:07:23.872 --> 00:07:26.188
I have a JSON editor that
will help it make prettier.

133
00:07:26.188 --> 00:07:30.371
But again, if that's not your flavor,
that's not your style, definitely use

134
00:07:30.371 --> 00:07:34.629
any kind of app UI tool, like Postman,
Bruno, Postwoman, anything like that.

135
00:07:34.629 --> 00:07:36.814
So, these are just communication tools.

136
00:07:36.814 --> 00:07:38.933
The core is kind of Docker Postgres.

137
00:07:38.933 --> 00:07:42.188
And if you have whatever preference you
If you want, feel free to use them.

