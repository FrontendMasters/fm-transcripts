WEBVTT

1
00:00:00.165 --> 00:00:01.956
So, my name is Melkey.

2
00:00:01.956 --> 00:00:06.332
I am a machine learning
infrastructure engineer at Twitch.

3
00:00:06.332 --> 00:00:09.195
I've been there for over three and
a half years now, which is crazy.

4
00:00:09.195 --> 00:00:11.165
Time really flies.

5
00:00:11.165 --> 00:00:16.409
I joined as a junior engineer with very
little work experience, and then three and

6
00:00:16.409 --> 00:00:20.826
a half years later, I'm still there,
and I really much so enjoy it.

7
00:00:20.826 --> 00:00:24.833
And the interesting part about,
I guess the title is,

8
00:00:24.833 --> 00:00:29.459
people always ask me,
how do you write Go in machine learning?

9
00:00:29.459 --> 00:00:32.455
I thought it's more like a Python thing or
something like that.

10
00:00:32.455 --> 00:00:36.108
And people who make those
comments are absolutely right.

11
00:00:36.108 --> 00:00:38.716
If I was creating the machine
learning modules and

12
00:00:38.716 --> 00:00:41.148
models, I would probably
be writing Python.

13
00:00:41.148 --> 00:00:45.234
The part that benefits me is
the infrastructure part of the title.

14
00:00:45.234 --> 00:00:49.979
And because of that infrastructure aspect,
that's where I use Go a lot.

15
00:00:49.979 --> 00:00:52.383
I write everything
around the actual model.

16
00:00:52.383 --> 00:00:56.991
So I work really closely with scientists,
data scientists, who develop the model,

17
00:00:56.991 --> 00:00:59.750
train the model, and
then I work to make it usable.

18
00:00:59.750 --> 00:01:00.820
How to put in production.

19
00:01:00.820 --> 00:01:02.683
How do we make it reliable?

20
00:01:02.683 --> 00:01:08.587
How do we make sure it's quick, it's fast,
it's safe, train new data, the pipeline.

21
00:01:08.587 --> 00:01:13.564
So all those aspects is kind of my bread
and butter, and we use Go at Twitch,

22
00:01:13.564 --> 00:01:18.318
and that's how I've developed my own
set of skills with the language.

23
00:01:18.318 --> 00:01:21.956
I stream live code at twitch.tv/melkey, so

24
00:01:21.956 --> 00:01:27.006
I am actually a user of the product
at the company that I work for.

25
00:01:27.006 --> 00:01:28.919
And I think that's also really cool.

26
00:01:28.919 --> 00:01:31.457
I think if any aspect
where you are a user, or

27
00:01:31.457 --> 00:01:34.765
you experience something that
you are part of building.

28
00:01:34.765 --> 00:01:38.797
I think it just adds more of that kind
of passion to do it You know that they

29
00:01:38.797 --> 00:01:39.617
want to do it.

30
00:01:39.617 --> 00:01:43.205
And then I also make coding
videos at youtube.com/melkey.

31
00:01:43.205 --> 00:01:48.023
The YouTube videos are not just
reruns of the live stream.

32
00:01:48.023 --> 00:01:50.951
I don't just take snippets of my live and
box them out.

33
00:01:50.951 --> 00:01:54.961
I actually record everything new because
I want my YouTube to be more like core

34
00:01:54.961 --> 00:01:56.391
tutorials, core topics.

35
00:01:56.391 --> 00:01:57.899
So yeah, check it out.

36
00:01:57.899 --> 00:02:00.794
I have lots of videos on
Go where I don't know,

37
00:02:00.794 --> 00:02:05.028
explore cool packages that found
on GitHub that solve a problem, or

38
00:02:05.028 --> 00:02:09.656
how to do something with Go that maybe
some people haven't really faced.

39
00:02:09.656 --> 00:02:13.263
And then there's also just topics that
I think are interesting to talk about.

40
00:02:13.263 --> 00:02:16.192
I constantly try to build
many different things.

41
00:02:16.192 --> 00:02:20.537
I'm one of those people that gets an idea,
try to spin it up, buy a domain.

42
00:02:20.537 --> 00:02:23.943
And then hopefully I finish it,
but sometimes I don't.

43
00:02:23.943 --> 00:02:27.029
But some of the things I have
finished include Go blueprint.

44
00:02:27.029 --> 00:02:29.671
So it is a project on GitHub.

45
00:02:29.671 --> 00:02:31.670
It has about 7000 stars.

46
00:02:31.670 --> 00:02:36.461
It's a CLI tool that spins
up Go projects for you.

47
00:02:36.461 --> 00:02:40.611
So when I first started,
it only spun up like the routing.

48
00:02:40.611 --> 00:02:43.522
For Go projects,
like just the file structure and

49
00:02:43.522 --> 00:02:47.348
then some end points that people
can query and like some options.

50
00:02:47.348 --> 00:02:51.490
But it's really evolved due
to people kind of being

51
00:02:51.490 --> 00:02:54.582
interested in what this could offer.

52
00:02:54.582 --> 00:02:59.420
And so now it can spin up a front
end portion using HTMX, React,

53
00:02:59.420 --> 00:03:01.988
we have a component in the works.

54
00:03:01.988 --> 00:03:03.258
So, yeah, it's a really cool project.

55
00:03:03.258 --> 00:03:04.796
I'm very proud of it.

56
00:03:04.796 --> 00:03:08.361
And I'm more proud of the contributions,
honestly, and

57
00:03:08.361 --> 00:03:11.066
being part of a bigger
scene in open source.

58
00:03:11.066 --> 00:03:15.566
Another thing I've built is that PFG Labs,
it's a platform for

59
00:03:15.566 --> 00:03:20.911
people to learn about Go, and it's not
a platform for courses to be hosted.

60
00:03:20.911 --> 00:03:25.642
It's more of a platform for
doing projects interactively.

61
00:03:25.642 --> 00:03:29.593
So at PFG Labs,
you will write code on your own IDE.

62
00:03:29.593 --> 00:03:32.475
Could be VS Code and
even whatever you use.

63
00:03:32.475 --> 00:03:35.912
And then you actually submit using Git,
your project.

64
00:03:35.912 --> 00:03:40.527
And then we run it through our system to
tell you if you've passed the tests for

65
00:03:40.527 --> 00:03:42.809
whatever project you're building.

66
00:03:42.809 --> 00:03:45.122
So it's a little more interactive.

67
00:03:45.122 --> 00:03:47.190
It's also focused on Go.

68
00:03:47.190 --> 00:03:48.568
And then some other things.

69
00:03:48.568 --> 00:03:51.223
I actually taught a previous
course on front end masters.

70
00:03:51.223 --> 00:03:56.092
The first course was how to build
production apps that scale using

71
00:03:56.092 --> 00:03:56.985
Go and AWS.

72
00:03:56.985 --> 00:03:59.619
So again, we touch on Go in that course.

73
00:03:59.619 --> 00:04:04.568
I go through, maybe more of a preliminary
beginner aspect of Go really showcasing

74
00:04:04.568 --> 00:04:09.104
some of that syntax, and then we
encompass AWS to deploy the application.

75
00:04:09.104 --> 00:04:11.641
So that's something that
you'd like to check out,

76
00:04:11.641 --> 00:04:14.706
definitely encourage everyone
to look at that course as well.

77
00:04:14.706 --> 00:04:20.745
For this course in particular, I've jotted
down four things that we will be needing.

78
00:04:20.745 --> 00:04:24.200
And I'm not going to say the obvious one,
like a Wi-Fi connection obviously we need

79
00:04:24.200 --> 00:04:26.792
Internet, which would be
bringing in different components.

80
00:04:26.792 --> 00:04:32.026
But the things that we absolutely
need in our machine is Go.

81
00:04:32.026 --> 00:04:34.379
So have Go installed in your machine.

82
00:04:34.379 --> 00:04:39.933
I'll actually show people how we can
install Go when we get to the component.

83
00:04:39.933 --> 00:04:43.498
So I'll show how you can set it
up on VS Code or any of them.

84
00:04:43.498 --> 00:04:46.782
Docker and
Docker Compose installed on your computer.

85
00:04:46.782 --> 00:04:49.908
This one, I was very hesitant about,

86
00:04:49.908 --> 00:04:54.807
because we can do a full Go
course without using any Docker.

87
00:04:54.807 --> 00:04:58.556
But I thought I want to just
kind of rip the bandit off, and

88
00:04:58.556 --> 00:05:00.441
I want to encompass Docker.

89
00:05:00.441 --> 00:05:04.335
And if you're not familiar with Docker,
it's simply just.

90
00:05:04.335 --> 00:05:07.679
The way I describe it is like simply just
these containers that have software, and

91
00:05:07.679 --> 00:05:10.643
that software just lives in the container,
not on your actual machine.

92
00:05:10.643 --> 00:05:13.235
So on your actual machine,
you'll have this, like Docker container.

93
00:05:13.235 --> 00:05:15.920
We can think of just this black box,
and within it,

94
00:05:15.920 --> 00:05:18.613
it will have any software
that you specify to have.

95
00:05:18.613 --> 00:05:23.077
And the reason we're going to have
Docker is because I don't want to be too

96
00:05:23.077 --> 00:05:25.389
invasive into people's computers.

97
00:05:25.389 --> 00:05:29.066
So Docker, I think,
is just a good way to spin things up.

98
00:05:29.066 --> 00:05:32.036
And we're going to be using Docker for
our database.

99
00:05:32.036 --> 00:05:34.991
And our database is going
to be with Postgres.

100
00:05:34.991 --> 00:05:38.575
I chose Postgres because, simply,
it's like an industry standard.

101
00:05:38.575 --> 00:05:41.599
I think it's the best
solution to relational data.

102
00:05:41.599 --> 00:05:45.769
Of course, if you're interested
in non-relational data,

103
00:05:45.769 --> 00:05:51.073
like document style data, there's Mongo,
no SQL solutions like DynamoDB.

104
00:05:51.073 --> 00:05:54.568
But I thought for our case,
let's keep the data relational.

105
00:05:54.568 --> 00:05:56.052
I think it's a bit more straightforward.

106
00:05:56.052 --> 00:05:57.829
And Postgres is all reliable.

107
00:05:57.829 --> 00:05:59.773
I think that's the best
way I could put it.

108
00:05:59.773 --> 00:06:04.479
It's going to work the features it
rolls out is they're always great.

109
00:06:04.479 --> 00:06:08.079
You can really throw anything at Postgres,
and it typically works.

110
00:06:08.079 --> 00:06:11.583
There's very few situations
where people break Postgres.

111
00:06:11.583 --> 00:06:14.273
So I'm a big fan of it,
if you couldn't tell.

112
00:06:14.273 --> 00:06:19.351
And then there's this little plus PSQL.

113
00:06:19.351 --> 00:06:24.336
PSQL is simply a way for
us to interact with Postgres.

114
00:06:24.336 --> 00:06:27.919
So if you're kind of following the trend
here, we'll have Docker, Docker will have

115
00:06:27.919 --> 00:06:30.823
Postgres and that will have our database,
and we'll connect to it.

116
00:06:30.823 --> 00:06:34.348
And then we kind of want to see
what's happening in the database.

117
00:06:34.348 --> 00:06:35.939
So we're going to be using PSQL.

118
00:06:35.939 --> 00:06:41.219
However, if you want to use another
app that has a UI component there's

119
00:06:41.219 --> 00:06:46.687
stuff like Bruno, Postman, Postwoman,
apps like that that works too.

120
00:06:46.687 --> 00:06:48.360
Sorry, for PSQL it would be DBeaver and

121
00:06:48.360 --> 00:06:51.620
other tools where you can actually look
at the database, interact with it.

122
00:06:51.620 --> 00:06:53.825
PG admin, I think, is also a solution.

123
00:06:53.825 --> 00:06:56.546
For me, PSQL is simply a tool
that runs in the terminal.

124
00:06:56.546 --> 00:07:00.853
So we'll just see my terminal, and
we'll use PSQL commands to connect to it.

125
00:07:00.853 --> 00:07:05.629
cURL is where we're obviously going to be
using because we're going to query our

126
00:07:05.629 --> 00:07:10.425
server, our back end server in Go that's
going to communicate to our database.

127
00:07:10.425 --> 00:07:14.532
Most of the time I use cURL because,
again, I'm a fan of just having

128
00:07:14.532 --> 00:07:18.873
the terminal and having just like
the terminal UI dictate everything.

129
00:07:18.873 --> 00:07:20.628
So I write my cURL commands.

130
00:07:20.628 --> 00:07:21.302
You'll see them.

131
00:07:21.302 --> 00:07:24.492
They're sometimes not the prettiest,
but have a JSON editor,

132
00:07:24.492 --> 00:07:26.274
they'll help it make it prettier.

133
00:07:26.274 --> 00:07:28.233
But again, if that's not your flavor,

134
00:07:28.233 --> 00:07:31.345
that's not your style,
definitely you can use any kind of app,

135
00:07:31.345 --> 00:07:34.646
UI tool, like Postman, Bruno,
Postwoman, anything like that.

136
00:07:34.646 --> 00:07:36.890
So these are just communication tools.

137
00:07:36.890 --> 00:07:41.397
The core is kind of Docker, Postgres, and
if you have whatever preference you want,

138
00:07:41.397 --> 00:07:42.597
feel free to use them.

