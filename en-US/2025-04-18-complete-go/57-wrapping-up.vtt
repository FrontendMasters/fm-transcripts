WEBVTT

1
00:00:00.000 --> 00:00:03.327
&gt;&gt; Melkey: That's the entirety
of the course as it stands.

2
00:00:03.327 --> 00:00:05.383
And I think we've done quite a bit know.

3
00:00:05.383 --> 00:00:09.923
The first kind of section of the course,
we really looked into preliminary Go,

4
00:00:09.923 --> 00:00:14.212
introduced syntax to Go for some people
who maybe never written go before.

5
00:00:14.212 --> 00:00:19.227
And then we actually just from scratch,
created this entire project

6
00:00:19.227 --> 00:00:23.992
with an API layer, an app layer,
a middleware, entire routes.

7
00:00:23.992 --> 00:00:29.561
A way to roll your own off and
handle the tokens with migrations,

8
00:00:29.561 --> 00:00:34.527
composing it with tests, and
there's quite a bit more.

9
00:00:34.527 --> 00:00:40.798
So something I wanted to do is
kinda eat my own dog food here.

10
00:00:40.798 --> 00:00:44.560
As much as I love paws, I think they are
great, what I really like is people to do

11
00:00:44.560 --> 00:00:47.125
things on their own and
discover things on their own.

12
00:00:47.125 --> 00:00:51.974
And so what I'm going to do is I'm
gonna push the current live repo

13
00:00:51.974 --> 00:00:53.481
into the live repo.

14
00:00:53.481 --> 00:00:55.416
You guys can see as it stands.

15
00:00:55.416 --> 00:01:00.294
But what I'm also going to do is add
additional material that I really want

16
00:01:00.294 --> 00:01:04.394
everyone, as an added bonus,
to check out on their own time.

17
00:01:04.394 --> 00:01:09.332
And this added advanced material
is to include more testing on both

18
00:01:09.332 --> 00:01:14.988
the database side and even API side,
and testing more of the mock function.

19
00:01:14.988 --> 00:01:17.960
It's also gonna include
optimistic concurrency locking.

20
00:01:17.960 --> 00:01:20.977
So what if we get two
requests at the same time?

21
00:01:20.977 --> 00:01:22.046
What do we do?

22
00:01:22.046 --> 00:01:26.253
And it's also going to include
SQL query timeouts, right?

23
00:01:26.253 --> 00:01:30.118
So every query that we have
right now in our database store,

24
00:01:30.118 --> 00:01:34.304
it adheres to the HTTP server idle,
read, and write timeouts.

25
00:01:34.304 --> 00:01:39.152
And so, I want to showcase how we can
quickly add context with a time up

26
00:01:39.152 --> 00:01:42.843
to control the granularity
of our SQL definitions.

27
00:01:42.843 --> 00:01:45.462
But yeah, thank you for
sticking with me for two days, and

28
00:01:45.462 --> 00:01:47.614
I appreciate Frontend Masters for
doing this.

29
00:01:47.614 --> 00:01:51.965
&gt;&gt; [APPLAUSE]

