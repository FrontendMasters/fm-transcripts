WEBVTT

1
00:00:00.000 --> 00:00:03.602
&gt;&gt; melkey: Maps, they are a hash.

2
00:00:03.602 --> 00:00:06.102
If you come from any kind of programming
language, it's a hash map, right?

3
00:00:06.102 --> 00:00:09.780
Key value store,
they're called maps in Go.

4
00:00:09.780 --> 00:00:13.735
The syntax is actually, I would
kind of describe it as maybe wonky.

5
00:00:13.735 --> 00:00:18.157
The first time you see it, but let's say
we have something called Capital City, and

6
00:00:18.157 --> 00:00:19.664
we wanna make a map out of it.

7
00:00:19.664 --> 00:00:23.037
So we would use the keyword map,
all right?

8
00:00:23.037 --> 00:00:27.647
And the first argument in this kind of
square notation is the type of the key,

9
00:00:27.647 --> 00:00:28.159
right?

10
00:00:28.159 --> 00:00:30.497
Cuz again, a map is a key value store.

11
00:00:30.497 --> 00:00:33.950
So map, our key is gonna be string types,
and the values,

12
00:00:33.950 --> 00:00:37.064
let's say,
are also gonna be string types, okay?

13
00:00:37.064 --> 00:00:40.195
And if you're wondering,
you can mix these types.

14
00:00:40.195 --> 00:00:42.993
Your key could be string int,
bool, whatever, and

15
00:00:42.993 --> 00:00:44.911
your value could be any other type.

16
00:00:44.911 --> 00:00:48.064
They do not have to be the same, okay?

17
00:00:48.064 --> 00:00:52.749
So if we have something like this,
we can do USA, oops.

18
00:00:52.749 --> 00:00:57.463
All right, so the key is gonna be
USA separated with a colon, and

19
00:00:57.463 --> 00:01:03.157
then we have the actual value,
you can say, "Washington.D.C", okay?

20
00:01:03.157 --> 00:01:06.497
We have to append with a comma at the end,

21
00:01:06.497 --> 00:01:10.538
we can say "India",
we can say "New Delhi".

22
00:01:12.274 --> 00:01:15.598
&gt;&gt; melkey: Okay, and then we can
say one more as, like "London".

23
00:01:18.008 --> 00:01:20.841
&gt;&gt; melkey: Or sorry, the UK.

24
00:01:20.841 --> 00:01:21.960
London is the capital.

25
00:01:23.610 --> 00:01:27.672
Okay, so this is just quick lookups,
and then we can do capitalCities and

26
00:01:27.672 --> 00:01:28.925
we can use on the keys.

27
00:01:28.925 --> 00:01:31.345
You can say "USA", we can print this.

28
00:01:31.345 --> 00:01:35.937
Map expression string is not used.

29
00:01:46.265 --> 00:01:46.924
&gt;&gt; melkey: There you go.

30
00:01:46.924 --> 00:01:48.012
It was yelling at me.

31
00:01:48.012 --> 00:01:49.532
That was really weird error message, but

32
00:01:49.532 --> 00:01:51.756
it yelling that we weren't
using the return variable here.

33
00:01:51.756 --> 00:01:53.601
So capitalCities("USA").

34
00:01:53.601 --> 00:01:56.996
If you run this, we'll get Washington DC.

35
00:01:56.996 --> 00:01:58.095
That scared me for a second.

36
00:01:58.095 --> 00:01:59.394
I was like, what is that?

37
00:01:59.394 --> 00:02:01.812
So yeah, quick, fast lookup.

38
00:02:01.812 --> 00:02:06.241
If you wanna check if a key
exists before accessing it,

39
00:02:06.241 --> 00:02:10.767
cuz let's say we do something
like capitalCities, and

40
00:02:10.767 --> 00:02:14.345
let's say we don't have Germany, right?

41
00:02:14.345 --> 00:02:16.945
We get the, oops, I didn't save it.

42
00:02:21.438 --> 00:02:24.649
&gt;&gt; melkey: We get the zero
value of a string, right?

43
00:02:24.649 --> 00:02:28.258
Because the string is the type for
our values here.

44
00:02:28.258 --> 00:02:33.746
But if you wanna check if something
exists, you can do, I forget the actual

45
00:02:33.746 --> 00:02:38.906
term, but we can do is capital, and
then the second variable exists.

46
00:02:38.906 --> 00:02:42.665
And this is always going to be Boolean,
when we deal with maps, right?

47
00:02:42.665 --> 00:02:45.829
So it could be true, it could be
whatever you wanna call it, but

48
00:02:45.829 --> 00:02:47.999
the value type is always gonna be Boolean.

49
00:02:47.999 --> 00:02:51.116
And here we could just say,
capitalCities, and

50
00:02:51.116 --> 00:02:54.243
I can again use our Germany example,
all right?

51
00:02:54.243 --> 00:02:58.567
And here we can say, if exists,
so this is the check,

52
00:02:58.567 --> 00:03:04.068
we can add fmt.Println(), and
we can say, this is the capital.

53
00:03:04.068 --> 00:03:08.208
You put capital, like so,

54
00:03:08.208 --> 00:03:14.151
else format printline does not exist.

55
00:03:14.151 --> 00:03:16.302
Okay, you can save this,
we can run and see.

56
00:03:16.302 --> 00:03:18.252
Now we now have, does not exist.

57
00:03:18.252 --> 00:03:20.939
Cool, okay, kinda gloss over that.

58
00:03:20.939 --> 00:03:24.317
There is kind of one more thing
you can do, a pre-built function.

59
00:03:24.317 --> 00:03:27.862
You can use the delete to
specifically delete a key from a map.

60
00:03:27.862 --> 00:03:31.500
So we can do delete, and
then the map itself, so capitalCities, and

61
00:03:31.500 --> 00:03:32.270
then the key.

62
00:03:32.270 --> 00:03:34.199
So we can delete UK.

63
00:03:36.535 --> 00:03:40.071
&gt;&gt; melkey: And can do format Printf.

64
00:03:42.304 --> 00:03:43.849
&gt;&gt; melkey: This is new deleted map.

65
00:03:46.062 --> 00:03:49.740
&gt;&gt; melkey: Okay, modular v input C.

66
00:03:53.153 --> 00:03:55.611
&gt;&gt; melkey: So
now we have just India and Washington.

