WEBVTT

1
00:00:00.000 --> 00:00:03.120
&gt;&gt; Melkey: So we went SQL layer,
database layer,

2
00:00:03.120 --> 00:00:06.153
we know where we're going API layer.

3
00:00:06.153 --> 00:00:11.131
Let's go into the API,
we're gonna make a new file called

4
00:00:11.131 --> 00:00:15.002
token_handler.go, package API like so.

5
00:00:15.002 --> 00:00:18.150
Quickly create our handlers and
these shrugs,

6
00:00:18.150 --> 00:00:20.598
we can do type TokenHandler struct.

7
00:00:20.598 --> 00:00:25.226
This one can be a little different,
cuz not only we're gonna have

8
00:00:25.226 --> 00:00:30.715
the tokenStore of store.TokenStore,
we're also gonna have a userStore.

9
00:00:30.715 --> 00:00:36.155
UserStore, that's also
gonna have our logger,

10
00:00:36.155 --> 00:00:40.308
which *logger., oops, not that.

11
00:00:40.308 --> 00:00:42.021
Like that, okay?

12
00:00:42.021 --> 00:00:47.305
Func NewTokenHandler, let's go ahead and

13
00:00:47.305 --> 00:00:54.873
create this, can take a tokenStore
type store.TokenStore,

14
00:00:54.873 --> 00:01:01.317
userStore type store.UserStore,
logger like so.

15
00:01:01.317 --> 00:01:04.818
This is going to return
a pointer to TokenHandler.

16
00:01:04.818 --> 00:01:10.643
Go ahead and return TokenHandler and
fill out those fields to tokenStore,

17
00:01:10.643 --> 00:01:15.925
tokenStore, userStore, userStore,
and then logger is logger.

18
00:01:15.925 --> 00:01:16.876
Oops.

19
00:01:19.732 --> 00:01:20.363
&gt;&gt; Melkey: Cool.

20
00:01:23.586 --> 00:01:26.305
&gt;&gt; Melkey: Okay,
we'll basically create one function here,

21
00:01:26.305 --> 00:01:29.226
which going to be creating a token for
authentication.

22
00:01:32.184 --> 00:01:36.362
&gt;&gt; Melkey: But since this is gonna be
create method, and we've now handled,

23
00:01:36.362 --> 00:01:39.868
I think, two different create methods,
one for user,

24
00:01:39.868 --> 00:01:42.190
one for workouts and even updating.

25
00:01:42.190 --> 00:01:47.185
We have to always remember that
we have the ability to dump

26
00:01:47.185 --> 00:01:52.091
the data from our client into
a placeholder structure.

27
00:01:52.091 --> 00:01:55.444
And that should be ringing the bells of a
struck, we can use another struck, right?

28
00:01:55.444 --> 00:02:00.872
So we can do type, we can call this
createTokenRequest, this gonna

29
00:02:00.872 --> 00:02:07.554
be a struct that we're gonna decode the
information we get from our client, okay?

30
00:02:07.554 --> 00:02:10.526
So here we can put Username
is gonna be a string,

31
00:02:13.538 --> 00:02:14.931
&gt;&gt; Melkey: Like this, and

32
00:02:14.931 --> 00:02:22.661
then the password is gonna be a string
'json:"password"', like that, right?

33
00:02:22.661 --> 00:02:28.491
Now that we have that, let's go ahead and
create our method on the TokenHandler,

34
00:02:28.491 --> 00:02:31.973
which is gonna be HandleCreateToken,
like so.

35
00:02:31.973 --> 00:02:35.498
It's gonna be http.ResponseWriter, and

36
00:02:35.498 --> 00:02:41.127
our pointer to http.Request,
let's get ourselves more room here.

37
00:02:41.127 --> 00:02:43.134
So first, let's go ahead and
parse the request.

38
00:02:43.134 --> 00:02:46.033
So we're gonna declare
this variable request,

39
00:02:46.033 --> 00:02:50.639
which can be of type createTokenRequest,
the struct we just created above.

40
00:02:50.639 --> 00:02:57.481
Let's go ahead and decode everything
in there, so json.NewDecoder(r.Body),

41
00:02:57.481 --> 00:03:02.239
I'm gonna decode this into
the address of request like so.

42
00:03:02.239 --> 00:03:06.835
If error does not equal to nil,
let's check those

43
00:03:06.835 --> 00:03:11.988
errors with h.logger.Printf,
I can just say ERROR.

44
00:03:11.988 --> 00:03:15.701
Okay, and we can say,

45
00:03:15.701 --> 00:03:20.980
createTokenRequest, right,

46
00:03:20.980 --> 00:03:25.678
module o v, let's put err.

47
00:03:25.678 --> 00:03:32.160
Then we can use our utils.WriteJSON
package (w, http.StatusBadRequest,

48
00:03:32.160 --> 00:03:36.525
utils.envelope), let's
put "error" in here.

49
00:03:36.525 --> 00:03:40.645
And over here,
we can say invalid request payload,

50
00:03:40.645 --> 00:03:44.772
okay, and
then let's make sure we return out of it.

51
00:03:47.863 --> 00:03:52.071
&gt;&gt; Melkey: So this is pretty standard
stuff we've done a bunch of times already.

52
00:03:52.071 --> 00:03:55.449
So first we're gonna retrieve
if the user exists by username.

53
00:03:55.449 --> 00:03:57.404
Then they usually we know exist.

54
00:03:57.404 --> 00:04:00.761
If they do, we're gonna check
invalidate the passwords,

55
00:04:00.761 --> 00:04:03.456
if they match we will then issue a token,
okay?

56
00:04:03.456 --> 00:04:09.465
So first, let's get the user, we can do
this cuz we've already at the user store.

57
00:04:09.465 --> 00:04:12.446
We can already do this since we've
created the function to do that,

58
00:04:12.446 --> 00:04:13.870
which was get user by username.

59
00:04:13.870 --> 00:04:18.587
So we can do user, err,
is gonna be h.userStore,

60
00:04:18.587 --> 00:04:23.763
that's our TokenHandler has
the userstore within it.

61
00:04:23.763 --> 00:04:31.757
We can do GetUserByUsername(re.Username),
okay?

62
00:04:31.757 --> 00:04:37.025
If err != nil || user is nil,

63
00:04:37.025 --> 00:04:41.710
okay, h.ogger.Printf,

64
00:04:41.710 --> 00:04:49.128
we can say ("ERROR: GetuserByUsername:

65
00:04:49.128 --> 00:04:54.984
"%v") utils.writeJSON(w,

66
00:04:54.984 --> 00:05:03.979
http, and
we can say StatusInternalServerError).

67
00:05:11.920 --> 00:05:12.936
&gt;&gt; Melkey: Okay,
let's go ahead and return.

68
00:05:16.501 --> 00:05:20.801
&gt;&gt; Melkey: So at this point on that line,
we should have two pieces of information.

69
00:05:20.801 --> 00:05:25.436
We have the request information
from our decoding, and

70
00:05:25.436 --> 00:05:30.180
then we also have a user struck
from getuser by username.

71
00:05:30.180 --> 00:05:35.377
Next thing we wanna do is validate those
passwords so we can do passwordsDoMatch,

72
00:05:35.377 --> 00:05:39.767
or something like that, and
that's obvious, error is going to be,

73
00:05:41.984 --> 00:05:45.046
&gt;&gt; Melkey: User.PasswordHush, all right,

74
00:05:45.046 --> 00:05:51.169
.matches, so this is the second
function we created a little bit ago,

75
00:05:51.169 --> 00:05:54.753
and we can do (req.Password), okay?

76
00:05:54.753 --> 00:06:00.651
If err != nil,
we definitely wanna handle this,

77
00:06:00.651 --> 00:06:07.239
we can h.logger.Printf("ERROR:
PasswordMatch,

78
00:06:07.239 --> 00:06:11.918
you can just do PasswordHush_Mathes.

79
00:06:14.679 --> 00:06:19.749
&gt;&gt; Melkey: Nope, utils.WriteJSON, okay,

80
00:06:19.749 --> 00:06:24.822
so w, http StatusInternalError,

81
00:06:29.779 --> 00:06:31.913
&gt;&gt; Melkey: InternalServerError,

82
00:06:31.913 --> 00:06:35.166
utils.Envelope("error":).

83
00:06:35.166 --> 00:06:40.666
And then we can just put
"internal server error" like so,

84
00:06:40.666 --> 00:06:43.306
let's make sure we return.

85
00:06:47.233 --> 00:06:50.164
&gt;&gt; Melkey: Okay, and then here,
if the passwords don't match,

86
00:06:50.164 --> 00:06:52.266
if the passwords do not match, right,

87
00:06:52.266 --> 00:06:56.365
we can use the exclamation point
operator to evaluate boolean expression.

88
00:06:56.365 --> 00:07:00.432
So this would be, if it's not true,
or if it's false,

89
00:07:00.432 --> 00:07:04.164
we can do utils.WriteJSON(w),
we can do http.

90
00:07:04.164 --> 00:07:09.868
It's not gonna be internal server errors,
can be StatusUnauthorized,

91
00:07:09.868 --> 00:07:16.216
we can do utils.Envelope("error":) and
then the error message this time,

92
00:07:16.216 --> 00:07:19.897
we could just say, "invalid credentials".

93
00:07:20.963 --> 00:07:25.868
&gt;&gt; Melkey: Keep it broad, can make sure
we add the return statement there.

94
00:07:25.868 --> 00:07:27.502
And now at this point,

95
00:07:27.502 --> 00:07:33.266
we can say that we've validated a user
with the right username that they exist.

96
00:07:33.266 --> 00:07:37.990
Now we've matched the password we sent
with the password that we've hashed using

97
00:07:37.990 --> 00:07:38.545
bcrypt.

98
00:07:38.545 --> 00:07:42.895
Okay, so let's actually go ahead and
issue this token file,

99
00:07:42.895 --> 00:07:46.587
let's do token,
err is going to be h.tokenStore.

100
00:07:46.587 --> 00:07:50.606
Let's create this new token,
I'm gonna pass in user.ID.

101
00:07:50.606 --> 00:07:58.112
We're gonna give it a 24 hour lifespan,
so 24*time.Hour, okay?

102
00:07:58.112 --> 00:08:02.314
And for the scope,
we'll do tokens.scopeAuth like so,

103
00:08:02.314 --> 00:08:06.534
I'm gonna go ahead and handle,
so here, if err != nil,

104
00:08:12.419 --> 00:08:14.015
&gt;&gt; Melkey: Supposed to be error,

105
00:08:14.015 --> 00:08:18.807
I said password matches,
we can just say couldn't create a token.

106
00:08:18.807 --> 00:08:20.496
So Creating Token.

107
00:08:20.496 --> 00:08:25.066
So this is still gonna be
an internal server error,

108
00:08:25.066 --> 00:08:29.760
we can keep it like so,
we can return out and in here.

109
00:08:29.760 --> 00:08:34.422
We can do utils.WriteJSON(w, ) we can do

110
00:08:34.422 --> 00:08:39.970
http.StatusCreated, okay, utils.Envelope.

111
00:08:39.970 --> 00:08:44.709
We can say something like,
you see something like "auth_token", and

112
00:08:44.709 --> 00:08:47.086
then the associate token like this.

113
00:08:47.086 --> 00:08:50.039
Whatever you wanna call it,
token, auth_token,

114
00:08:50.039 --> 00:08:52.869
secret_token, whatever,
it's all up to you.

115
00:08:52.869 --> 00:08:57.639
But just to be mindful that your client
will have to decode that JSON as

116
00:08:57.639 --> 00:08:58.718
auth_token.

117
00:08:58.718 --> 00:08:59.665
Hopefully this is making sense.

118
00:08:59.665 --> 00:09:04.239
Hopefully, at this point the pattern
is very obvious, like handler,

119
00:09:04.239 --> 00:09:07.991
database, SQL, app,
route.go, it's very defined.

120
00:09:07.991 --> 00:09:12.059
And I think it scales really nicely,
right, it's very containerized.

121
00:09:12.059 --> 00:09:14.759
TokenHandler, you know exactly
what's gonna happen here, and

122
00:09:14.759 --> 00:09:18.307
then you can match it with tokenStore and
be like, okay, I see what's going on here.

123
00:09:18.307 --> 00:09:23.252
And then if tokenHandler has a userStore,
you know exactly where that is, see,

124
00:09:23.252 --> 00:09:26.250
look, okay,
I can see what's happening here.

125
00:09:26.250 --> 00:09:30.256
But with that being said,
let's go back to our app.go,

126
00:09:30.256 --> 00:09:33.767
since we do need to hook
up the tokenhandler here.

127
00:09:33.767 --> 00:09:40.519
So, TokenHandler and
api.TokenHandler, like so.

128
00:09:40.519 --> 00:09:44.638
And actually this is a TokenStore,

129
00:09:44.638 --> 00:09:50.408
we'll just do store.NewPostgresTokenStore,

130
00:09:50.408 --> 00:09:54.541
this is gonna take our DB, so pgDB.

131
00:09:54.541 --> 00:10:00.320
Can get mad at us, and
here we do TokenHandler,

132
00:10:00.320 --> 00:10:06.398
it's gonna be api.NewTokenHandler,
like so.

133
00:10:06.398 --> 00:10:13.116
It's gonna take the TokenStore,
the userStore and logger.

134
00:10:13.116 --> 00:10:21.265
And then put TokenHandler as TokenHandler
in the actual return application struct.

135
00:10:21.265 --> 00:10:26.249
All right, let's head on over
to the last place we can modify,

136
00:10:26.249 --> 00:10:30.400
which is this location here,
the routes location.

137
00:10:30.400 --> 00:10:34.473
So here, this is for
users when they want to authenticate.

138
00:10:34.473 --> 00:10:39.053
So you can use them like
("/token/authentication"),

139
00:10:39.053 --> 00:10:44.162
like that, and we can do
app.TokenHandler.HandleCreateToken,

140
00:10:44.162 --> 00:10:48.752
again remember,
we're passing it as first class citizens.

