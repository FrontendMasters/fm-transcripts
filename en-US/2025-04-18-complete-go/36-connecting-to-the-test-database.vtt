WEBVTT

1
00:00:00.000 --> 00:00:04.935
&gt;&gt; Melkey: In the store folder,
we're gonna make a new file called

2
00:00:04.935 --> 00:00:11.250
workout_store_test.go and
the test append at the end is specific.

3
00:00:11.250 --> 00:00:15.710
We need to actually have that to
let the built-in tester and go, and

4
00:00:15.710 --> 00:00:19.712
identify this file is going to be used for
testing purposes.

5
00:00:19.712 --> 00:00:20.710
So let's go ahead and build this.

6
00:00:20.710 --> 00:00:22.965
It's gonna be in package store, and

7
00:00:22.965 --> 00:00:27.051
it's gonna be a few things we need
to actually initially bring in.

8
00:00:27.051 --> 00:00:31.940
So there's this really good package
that I need to share with you guys,

9
00:00:31.940 --> 00:00:36.340
it is called stretcher testify,
if I will go out in a limb here and

10
00:00:36.340 --> 00:00:41.492
say if you've done any form of testing and
go, you have used this package.

11
00:00:41.492 --> 00:00:45.386
It is like the industry standard for
testing in go.

12
00:00:45.386 --> 00:00:48.590
As you can see,
it's 24.1 1000 get up stars,

13
00:00:48.590 --> 00:00:52.014
it's a great tool kit,
it's used by just a lot of people.

14
00:00:52.014 --> 00:00:58.500
And like I said, it's the golden
standard to use within go, right?

15
00:00:58.500 --> 00:01:02.728
And it allows us to have a bunch of these
really nice function utilities to assert

16
00:01:02.728 --> 00:01:04.884
different values in our testing cases.

17
00:01:04.884 --> 00:01:07.140
So you can see here,
do these values equal?

18
00:01:07.140 --> 00:01:07.998
Do they not equal?

19
00:01:07.998 --> 00:01:08.616
Is it nil?

20
00:01:08.616 --> 00:01:12.591
Do I expect an error, etc, etc,
and also give us this little,

21
00:01:12.591 --> 00:01:15.903
nice mock thing that hopefully
we can also explore.

22
00:01:15.903 --> 00:01:18.883
So with that, let's go ahead and
install testify.

23
00:01:18.883 --> 00:01:21.310
So if you want go back to terminal,

24
00:01:21.310 --> 00:01:25.852
go to any empty terminal that you
have in the root of our project.

25
00:01:28.043 --> 00:01:32.983
&gt;&gt; Melkey: Okay, and
then what we can do is just install,

26
00:01:32.983 --> 00:01:36.159
let me just see, right here.

27
00:01:36.159 --> 00:01:40.547
Go get github.com/stretcher/testify.

28
00:01:40.547 --> 00:01:43.487
And it's a go get,
we don't have to do go install.

29
00:01:43.487 --> 00:01:48.504
We don't need it to be binded to our
bin or our path cuz it's not any native

30
00:01:48.504 --> 00:01:53.045
commands we're gonna be using
that testify offers, all right?

31
00:01:53.045 --> 00:01:57.647
So with all that said, we are going
to first build a helper function for

32
00:01:57.647 --> 00:02:00.461
us to connect to our test database, okay?

33
00:02:00.461 --> 00:02:03.482
Now, just as a reminder,
the test database,

34
00:02:03.482 --> 00:02:08.376
we should never touch this test database
outside of this file, like ever.

35
00:02:08.376 --> 00:02:10.781
This is a database that we are gonna use,
and

36
00:02:10.781 --> 00:02:15.332
there's action argument to be made in
the Docker Compose, you can separate them.

37
00:02:15.332 --> 00:02:17.762
You can have one Docker Compose
to run your local DB and

38
00:02:17.762 --> 00:02:19.761
another Docker Compose
to run your test DB.

39
00:02:19.761 --> 00:02:22.449
So that you're not
running two DBs at once.

40
00:02:22.449 --> 00:02:25.642
I did it here just to kind of
save a file and have it one, but

41
00:02:25.642 --> 00:02:28.723
if you want,
you could have two separate DBs running.

42
00:02:28.723 --> 00:02:32.309
Let it have your local DB and
just have the test DB running for

43
00:02:32.309 --> 00:02:34.113
when you run this test suite.

44
00:02:34.113 --> 00:02:38.840
And the purpose of this test suite, it's
a bit of this blur line between a mock

45
00:02:38.840 --> 00:02:41.677
like a unit test and
like an integration test,

46
00:02:41.677 --> 00:02:45.935
because we're truly going to be
calling and querying our database.

47
00:02:45.935 --> 00:02:49.148
And because of that,
what I call these unit tests,

48
00:02:49.148 --> 00:02:52.755
I'll call them more unit
tests than integration tests.

49
00:02:52.755 --> 00:02:56.551
Even though we are integrating
with a database, my definition for

50
00:02:56.551 --> 00:03:00.824
integration test is a full end-to-end
test suite that involves multiple

51
00:03:00.824 --> 00:03:04.241
different services across
the scope of your application.

52
00:03:04.241 --> 00:03:09.086
But again, these are just my definitions
and my approach to this one topic.

53
00:03:09.086 --> 00:03:11.724
That's enough talking,
let's go ahead and write some code.

54
00:03:11.724 --> 00:03:16.577
So here, the first thing I wanna write
is func, I'm gonna set up testDB,

55
00:03:16.577 --> 00:03:21.429
like so, and this is gonna take
an argument that we haven't seen before to

56
00:03:21.429 --> 00:03:24.122
be a pointer to testing.T, all right?

57
00:03:24.122 --> 00:03:29.981
And testing, we're gonna import it is
a standard package in the Go library, and

58
00:03:29.981 --> 00:03:36.208
it provides us testing fixtures that make
testing very, very easy in go, all right?

59
00:03:36.208 --> 00:03:39.014
And what this is going to return
is a SQL database like so.

60
00:03:39.014 --> 00:03:43.022
[COUGH] And we're gonna do is dB error.

61
00:03:43.022 --> 00:03:47.469
We're gonna make the same connection
string, connection string,

62
00:03:47.469 --> 00:03:49.086
so we can do open, okay?

63
00:03:49.086 --> 00:03:51.662
Here we can bring in pgx.

64
00:03:51.662 --> 00:03:58.268
And to do this, we can also bring
back the same import from Jack cpgx.

65
00:03:58.268 --> 00:04:04.877
So in the import, go ahead and just import
github.com/jackcpgx before standard lib.

66
00:04:04.877 --> 00:04:08.828
This is already an import that we
saw in database.go, all right?

67
00:04:08.828 --> 00:04:12.742
And the second argument in the SQL
open is the actual connection string.

68
00:04:12.742 --> 00:04:19.827
So here, we can do host=local host,
users gonna be postgres, okay?

69
00:04:19.827 --> 00:04:23.005
The password is also going to be postgres,

70
00:04:23.005 --> 00:04:29.030
we'll have the DB name equal to postgres
and then the important part is the port.

71
00:04:29.030 --> 00:04:32.232
So my port is 5433, okay?

72
00:04:32.232 --> 00:04:37.036
And this is from my test database,
my real database is running on 5432,

73
00:04:37.036 --> 00:04:38.924
just try and make that clear.

74
00:04:38.924 --> 00:04:44.787
And we'll do SSL mode equals disable,
like so.

75
00:04:44.787 --> 00:04:45.782
Let's always check the errors.

76
00:04:45.782 --> 00:04:50.932
If our error does not equal to nil, we're
actually not going to return an error,

77
00:04:50.932 --> 00:04:54.897
we're actually going use our
texting fixture and do a fatal.

78
00:04:54.897 --> 00:04:58.622
And we'll say, opening test DB,

79
00:04:58.622 --> 00:05:03.254
we can just put db here
as the error like so.

80
00:05:03.254 --> 00:05:07.253
NT fail covers any return, so
we don't need to explicit rate return

81
00:05:07.253 --> 00:05:10.777
at the end of this it's going
to complete fail or test case.

82
00:05:10.777 --> 00:05:18.257
So here, we want to run the migrations for
our test dB, okay?

83
00:05:18.257 --> 00:05:20.975
And the way we can do this is
pretty simple, we can do error.

84
00:05:20.975 --> 00:05:24.591
We can just say, migrate,
not Fs, just migrate.

85
00:05:24.591 --> 00:05:26.295
We're passing that dB, and

86
00:05:26.295 --> 00:05:31.128
then here we're gonna pass in the path to
migrations from where we are relative.

87
00:05:31.128 --> 00:05:33.263
So it's just gonna be two folders up.

88
00:05:33.263 --> 00:05:38.561
And you can see we have
migrations over here, like so.

89
00:05:40.921 --> 00:05:46.429
&gt;&gt; Melkey: If our error does not equal
to nil, what I wanna do is just again,

90
00:05:46.429 --> 00:05:50.113
do a t.Fatalf, t.Fatal format, okay?

91
00:05:50.113 --> 00:05:54.294
I'm gonna say, migrating test dB error and

92
00:05:54.294 --> 00:05:58.254
slide the error inside like that, okay?

93
00:05:58.254 --> 00:06:01.060
And then, one other instance is,
like I said, test dB,

94
00:06:01.060 --> 00:06:04.107
it should be a blank slate every
single time you run our tests.

95
00:06:04.107 --> 00:06:06.882
So I wanna add a function here, and

96
00:06:06.882 --> 00:06:12.358
this function is basically going
to truncate everything in our dB.

97
00:06:12.358 --> 00:06:18.531
Now let's do backticks, so truncate,
okay, workouts and workout_entry.

98
00:06:18.531 --> 00:06:20.150
And we'll make sure it cascades.

99
00:06:20.150 --> 00:06:24.965
And what this does is basically to
allow us to wipe the dB every time we

100
00:06:24.965 --> 00:06:27.002
want to run our setup tests.

101
00:06:27.002 --> 00:06:29.783
And I definitely recommend doing this,

102
00:06:29.783 --> 00:06:33.149
it is not the most performant way,
I will admit.

103
00:06:33.149 --> 00:06:37.412
But the reason why I like this is,
in between test suites,

104
00:06:37.412 --> 00:06:41.414
test functions,
I don't want the test that I wrote and

105
00:06:41.414 --> 00:06:45.864
create workout test to potentially
contaminate the tests.

106
00:06:45.864 --> 00:06:49.093
I want to run on update workout or
get workout, delete workout.

107
00:06:49.093 --> 00:06:51.601
I want the dB to be absolutely empty.

108
00:06:51.601 --> 00:06:54.295
I wanna insert the values,
I wanna test for deletion and

109
00:06:54.295 --> 00:06:57.216
then delete them and
make sure they fully got deleted, or for

110
00:06:57.216 --> 00:07:00.215
any kind of combination between
the CRUD operations, okay?

111
00:07:00.215 --> 00:07:03.126
And then here, all we have to
do is return dB, like so, or

112
00:07:03.126 --> 00:07:05.997
we can catch this error too,
I think I forgot to do this.

113
00:07:05.997 --> 00:07:13.395
So if error does not equal to nil,
we can again just do T.fatal,

114
00:07:13.395 --> 00:07:18.738
we can say truncating tables error,
like so.

