WEBVTT

1
00:00:00.000 --> 00:00:05.889
&gt;&gt; Melkey: This is going to be us
creating the func test create workout and

2
00:00:05.889 --> 00:00:12.019
in this case, we'd actually go ahead and
run it and test it out.

3
00:00:12.019 --> 00:00:15.128
So if you go back and
make sure your database is running,

4
00:00:15.128 --> 00:00:18.845
especially workoutDB_test,
if you chose to separate it or not.

5
00:00:18.845 --> 00:00:21.088
And there's a few different
ways you can do this.

6
00:00:21.088 --> 00:00:25.452
I recommend go cd into internal,
cd into store.

7
00:00:25.452 --> 00:00:32.523
All right, if you do an ls, you should
see workout_store_test.go, all right?

8
00:00:32.523 --> 00:00:38.690
And if you run go test,
&gt;&gt; Melkey: Relation,

9
00:00:38.690 --> 00:00:42.283
let's see, truncating was workout and
tires, classic.

10
00:00:42.283 --> 00:00:44.584
I knew I was gonna do this one time.

11
00:00:44.584 --> 00:00:48.526
I have a mistake here, workout entries.

12
00:00:48.526 --> 00:00:51.754
I even said it think yesterday
that I always type it as entires.

13
00:00:51.754 --> 00:00:55.003
Workout entries, okay.

14
00:00:55.003 --> 00:00:59.798
If you run it now, go test, it passes.

15
00:00:59.798 --> 00:01:02.768
So there's a few things we're gonna go
back and to see what is really happening.

16
00:01:02.768 --> 00:01:07.079
So first, to run a test, there's actually
built in test command in Go, so go test.

17
00:01:07.079 --> 00:01:11.733
And then we use this indicator to test
everything in this directory that we

18
00:01:11.733 --> 00:01:13.547
are in that you can, right?

19
00:01:13.547 --> 00:01:16.481
And so it goes to the test
you can see in the failure,

20
00:01:16.481 --> 00:01:19.142
it's a bit more explicit
that on the failure,

21
00:01:19.142 --> 00:01:23.324
you can see very similar to when we
ran our Docker compose the first time.

22
00:01:23.324 --> 00:01:27.347
It's migrating the user's workout and
workout entries as I wanted it to.

23
00:01:27.347 --> 00:01:28.936
For every test suite,

24
00:01:28.936 --> 00:01:33.548
I want this to be like a new fresh
db that we can check and validate.

25
00:01:33.548 --> 00:01:38.347
And then you can see in what function
test create workout, we got this error.

26
00:01:38.347 --> 00:01:41.637
It tells me where the error is
with the line right here and

27
00:01:41.637 --> 00:01:43.251
what the error was itself.

28
00:01:43.251 --> 00:01:47.531
So here I had a typo in workout entries,
all right?

29
00:01:47.531 --> 00:01:51.830
And then we ran go test and we see,
okay, this means all the tests pass,

30
00:01:51.830 --> 00:01:55.428
but what does it look like if
the tests don't pass, right?

31
00:01:55.428 --> 00:02:00.063
So if you go here back to
something like this, right?

32
00:02:00.063 --> 00:02:05.013
So let's say instead of false for
the valid workout, for some reason,

33
00:02:05.013 --> 00:02:06.424
do we want an error?

34
00:02:06.424 --> 00:02:11.677
Okay, so if I go back and
run the exact same command, go test,

35
00:02:11.677 --> 00:02:16.239
you should see here, right,
the name of where it is.

36
00:02:16.239 --> 00:02:19.917
So test, create workout, valid workout,
which is the name of our tests, and

37
00:02:19.917 --> 00:02:21.445
it's the error trace, right?

38
00:02:21.445 --> 00:02:27.209
So it gives me exactly where it is,
line 97 in what file,

39
00:02:27.209 --> 00:02:31.807
and an error is expected,
but got nil, okay?

40
00:02:31.807 --> 00:02:36.392
And so we error out on our test suite.

41
00:02:36.392 --> 00:02:43.834
So that's kind of how it looks if you have
passing tests and then test that fail.

42
00:02:43.834 --> 00:02:48.141
So the stack trace does a pretty
good job of explaining or

43
00:02:48.141 --> 00:02:54.390
giving you all the information you need
to kind of debug and see what's going on.

44
00:02:54.390 --> 00:03:00.589
Does anyone have any questions in terms of
the testing tables, the testing fixture.

45
00:03:00.589 --> 00:03:04.563
Why I wrote this test the way I did?

46
00:03:04.563 --> 00:03:06.127
Is kind of making sense?

47
00:03:09.109 --> 00:03:10.616
&gt;&gt; Speaker 2: I have a more
like general question.

48
00:03:10.616 --> 00:03:12.382
&gt;&gt; Melkey: Yeah.
&gt;&gt; Speaker 2: Is it pretty standard

49
00:03:12.382 --> 00:03:16.582
practice to co-locate tests with
the files that they're testing?

50
00:03:16.582 --> 00:03:21.927
&gt;&gt; Melkey: Yeah, so
I kind of put that into a project

51
00:03:21.927 --> 00:03:26.180
structure umbrella question.

52
00:03:26.180 --> 00:03:29.492
For me, I like to co-locate
if I have the workout store,

53
00:03:29.492 --> 00:03:31.569
I like to have the test right there.

54
00:03:31.569 --> 00:03:37.581
I know some people like to do
a test folder within a package,

55
00:03:37.581 --> 00:03:40.840
that's fine, it's up to you.

56
00:03:40.840 --> 00:03:43.642
But remember,
if you have your test outside the package,

57
00:03:43.642 --> 00:03:46.283
pulling stuff like the store
can be pretty difficult.

58
00:03:46.283 --> 00:03:49.667
Right here, we have our ability
to get call of these because we

59
00:03:49.667 --> 00:03:51.959
don't have to import anything, right?

60
00:03:51.959 --> 00:03:55.797
New Postgres Workout store exists
in the same package, which makes it

61
00:03:55.797 --> 00:03:59.712
super easy for me to not even have
to worry about these imports, right?

62
00:03:59.712 --> 00:04:04.066
But as most of the answers always go,

63
00:04:04.066 --> 00:04:07.441
it depends on what you want.

64
00:04:07.441 --> 00:04:13.900
This is kind of my style, this is
what I'm used to for testing stuff.

65
00:04:13.900 --> 00:04:18.354
&gt;&gt; Speaker 3: Is there a command
that parses the whole project and

66
00:04:18.354 --> 00:04:20.121
runs all the tests.

67
00:04:20.121 --> 00:04:22.716
&gt;&gt; Melkey: Yeah, like all in one, yep.

68
00:04:22.716 --> 00:04:26.029
So instead of going, into a folder,
folder, folder, folder, folder,

69
00:04:26.029 --> 00:04:28.037
you can go all the way
back up to the root here.

70
00:04:28.037 --> 00:04:31.097
So I'm at the root,
you can run go test and

71
00:04:31.097 --> 00:04:35.042
the amount of folders you
want this to dive deep into.

72
00:04:35.042 --> 00:04:39.345
So remember, in the other one the command,
this is gonna be kind of hard

73
00:04:39.345 --> 00:04:44.008
to demonstrate, but the command was
just go tests, and then the single dot,

74
00:04:44.008 --> 00:04:48.207
because we were already in the section
of where we want our test to be.

75
00:04:48.207 --> 00:04:52.657
Here because we went out a few
directories above and we're at the root,

76
00:04:52.657 --> 00:04:57.419
we have to tell go, how many layers deep
do we want to fully run all the tests?

77
00:04:57.419 --> 00:05:01.609
And you can see here we have node
test files, API, app, routes, utils,

78
00:05:01.609 --> 00:05:02.428
no test file.

79
00:05:02.428 --> 00:05:05.148
It finds one in internal store,
it's like, this is cached,

80
00:05:05.148 --> 00:05:06.373
I don't need to do anything.

81
00:05:06.373 --> 00:05:09.008
You didn't change it in your test file,
it's the same result.

82
00:05:09.008 --> 00:05:10.890
But that's the command.

83
00:05:10.890 --> 00:05:17.281
So I am not gonna continue running tests
in this file, just for a few reasons.

84
00:05:17.281 --> 00:05:20.419
One is time and one is like,
it gets pretty repetitive.

85
00:05:20.419 --> 00:05:25.283
I do want to kind of emphasize, I'll
take this opportunity to discuss again

86
00:05:25.283 --> 00:05:28.253
the approach of the style of the test,
right?

87
00:05:28.253 --> 00:05:30.840
So I think table test is something,
it's fairly obvious.

88
00:05:30.840 --> 00:05:34.279
It's just a slice that we iterate over,
like there's no magic there.

89
00:05:34.279 --> 00:05:40.465
But when you do want to create your
own test, especially data store tests.

90
00:05:40.465 --> 00:05:47.366
My recommendation is to really
test the shit out of it.

91
00:05:47.366 --> 00:05:52.895
And excuse my language, but here we're
creating the workout, that's good.

92
00:05:52.895 --> 00:05:57.002
We're validating this, but I also took
it one step further, and retrieving it.

93
00:05:57.002 --> 00:06:00.122
So not only am I doing a write
request to this test db.

94
00:06:00.122 --> 00:06:03.597
I'm also getting it back and
validating, right?

95
00:06:03.597 --> 00:06:08.633
So I'm kind of really exercising the fact
that it's like a db that we can use.

96
00:06:08.633 --> 00:06:10.503
So go ahead and fully test it.

97
00:06:10.503 --> 00:06:12.014
What do you expect this to work, right?

98
00:06:12.014 --> 00:06:15.028
If you're manually testing and
this actually helps, right?

99
00:06:15.028 --> 00:06:19.879
Now, if I were to add a new end path,
or another file, excuse me in,

100
00:06:19.879 --> 00:06:21.084
that was weird.

101
00:06:21.084 --> 00:06:25.300
Here, instead of manually testing it,
going back, okay,

102
00:06:25.300 --> 00:06:27.788
it's here, okay, let me go back.

103
00:06:27.788 --> 00:06:32.298
Let me create the curl, okay,
I can just create a test for it now,

104
00:06:32.298 --> 00:06:35.005
super easy and check if it works or not.

105
00:06:35.005 --> 00:06:37.424
So there's some advantages to testing for
sure.

106
00:06:37.424 --> 00:06:41.327
And again,
this is just kind of my style of testing,

107
00:06:41.327 --> 00:06:43.919
especially for database layers.

108
00:06:46.394 --> 00:06:49.134
&gt;&gt; Speaker 2: Someone just mentioned that
the repetition of testing is nothing

109
00:06:49.134 --> 00:06:50.987
compared to writing
error not equal to nil.

110
00:06:50.987 --> 00:06:54.495
&gt;&gt; Melkey: [LAUGH] Tell
them they are right.

