WEBVTT

1
00:00:00.000 --> 00:00:04.512
&gt;&gt; Melkey: So now that we have
the interface, we have all the structs,

2
00:00:04.512 --> 00:00:09.313
we can start writing the functions for
the things we have here.

3
00:00:09.313 --> 00:00:12.850
So first, let's go ahead and
do the CreateUser,

4
00:00:12.850 --> 00:00:17.916
it's gonna do func you could do,
I don't know, PostgresUserStore.

5
00:00:17.916 --> 00:00:21.273
It's gonna be called CreateUser, right?

6
00:00:21.273 --> 00:00:28.043
So it has to, again, match the method of
the interface there, the signature, so

7
00:00:28.043 --> 00:00:33.355
user be a pointer to user, and
it's gonna turn an error like so.

8
00:00:33.355 --> 00:00:36.277
And then here we're gonna
create our query, so

9
00:00:36.277 --> 00:00:41.624
exact same foundational things that we did
earlier, nothing new is really changing.

10
00:00:41.624 --> 00:00:46.498
So here we're gonna INSERT INTO users.

11
00:00:46.498 --> 00:00:51.664
We're gonna do all the fields
that we care about,

12
00:00:51.664 --> 00:00:57.940
so username, email,
password_hash and then bio values.

13
00:00:57.940 --> 00:01:00.352
We're gonna insert four VALUES.

14
00:01:00.352 --> 00:01:07.289
So one, two, three, and four, username,
email, password, hash and bio, okay?

15
00:01:07.289 --> 00:01:12.153
And here we can just do something like
RETURNING id, and if you want for users,

16
00:01:12.153 --> 00:01:15.398
for anniversaries of when
they create the account,

17
00:01:15.398 --> 00:01:20.139
or if you want to store that sometimes
you see like this account was created.

18
00:01:20.139 --> 00:01:24.497
So like on Twitter,
you can also return the created ad,

19
00:01:24.497 --> 00:01:28.133
and if you want,
also the updated app, okay?

20
00:01:28.133 --> 00:01:32.396
And then here we can just do
errors with s.db.QueryRow,

21
00:01:32.396 --> 00:01:38.051
I'm gonna pass in that query like so,
and then all the fields as they appear.

22
00:01:38.051 --> 00:01:44.623
So, user.Username, user.Email,

23
00:01:44.623 --> 00:01:51.399
user.Password, Hash.hash, okay?

24
00:01:51.399 --> 00:01:56.299
And user.Bios, [INAUDIBLE] because we
need to use the scan method now and

25
00:01:56.299 --> 00:02:00.494
scan the returning fields into
the appropriate fields here.

26
00:02:00.494 --> 00:02:02.886
So it's Id created at and updated at.

27
00:02:02.886 --> 00:02:09.185
Again, these have to be addresses,

28
00:02:09.185 --> 00:02:13.045
so we can do user.ID,

29
00:02:13.045 --> 00:02:17.111
user.CreatedAt, and

30
00:02:17.111 --> 00:02:23.019
then user.UpdatedAt, like so.

31
00:02:23.019 --> 00:02:24.936
Per standard, let's go ahead and
check this error.

32
00:02:24.936 --> 00:02:31.179
So if our error does not equal to nil,
we can do a few things.

33
00:02:31.179 --> 00:02:36.626
Return error actually,
&gt;&gt; Melkey: Okay,

34
00:02:36.626 --> 00:02:40.108
otherwise, let's just return nil.

35
00:02:40.108 --> 00:02:42.911
And that's it, and that's the function for

36
00:02:42.911 --> 00:02:46.244
creating a user with our
definition of what a user is.

37
00:02:46.244 --> 00:02:51.354
Let's move on to the next function,
which is get user by user name.

38
00:02:51.354 --> 00:02:58.510
Okay, so we just do us PostgresUserStore,
GetUserByUsername.

39
00:02:58.510 --> 00:03:03.263
It's gonna take the username string and

40
00:03:03.263 --> 00:03:08.307
it's gonna return user and error like so.

41
00:03:08.307 --> 00:03:10.290
Okay, we're gonna first define our user.

42
00:03:10.290 --> 00:03:14.778
So here we can make it
define a new user like so.

43
00:03:14.778 --> 00:03:19.037
Okay, and we have to instantiate
the password, also PasswordHash, and

44
00:03:19.037 --> 00:03:21.866
we can just do,
it's gonna be password like so.

45
00:03:30.410 --> 00:03:33.287
&gt;&gt; Melkey: Okay,
let's go ahead and run the query.

46
00:03:33.287 --> 00:03:38.709
So we can do SELECT, id, username, email,

47
00:03:38.709 --> 00:03:43.708
password_hash, bio, created_at and

48
00:03:43.708 --> 00:03:50.683
the last field is updated_at
&gt;&gt; Melkey: From

49
00:03:50.683 --> 00:03:56.151
our users table,
where the username equals the value,

50
00:03:56.151 --> 00:04:00.468
the one and
only value we're gonna pass in.

51
00:04:00.468 --> 00:04:03.369
And here We can declare our error as s.db.

52
00:04:03.369 --> 00:04:07.484
We can do QueryRow,
pass in that query like so, and

53
00:04:07.484 --> 00:04:10.183
all the fields that we wanna see,

54
00:04:12.954 --> 00:04:16.733
&gt;&gt; Melkey: Which is just username.

55
00:04:16.733 --> 00:04:21.874
Okay, but then we can scan and I'll
open this up just a bit easier to read.

56
00:04:21.874 --> 00:04:26.378
And because we declared our
user a few lines above,

57
00:04:26.378 --> 00:04:30.986
it's gonna be pretty easy
that we can just do user and

58
00:04:30.986 --> 00:04:35.490
start pulling in those
fields with new user, dot,

59
00:04:35.490 --> 00:04:40.139
username, or sorry,
the first field is ID, okay?

60
00:04:40.139 --> 00:04:41.880
User.Username,

61
00:04:47.094 --> 00:04:50.939
&gt;&gt; Melkey: User.Email, okay?

62
00:04:50.939 --> 00:04:54.483
Then we can do user dot oops,

63
00:04:54.483 --> 00:04:59.221
user.PasswordHash.hash like so.

64
00:04:59.221 --> 00:05:02.041
Okay, user.Bio, and

65
00:05:02.041 --> 00:05:07.543
then user.reatedAt that user.UpdatedAt.

66
00:05:12.436 --> 00:05:14.332
&gt;&gt; Melkey: And
as we know with the SELECT clause,

67
00:05:14.332 --> 00:05:17.719
it's not guaranteed to return anything,
but nor is that an error.

68
00:05:17.719 --> 00:05:24.598
So we can handle this with if err
equal sql Error, no errors or NoRows.

69
00:05:24.598 --> 00:05:29.453
Excuse me, we can simply do return nil and

70
00:05:29.453 --> 00:05:33.901
nil if our error does not equal to nil.

71
00:05:33.901 --> 00:05:40.257
So if something wrong happened,
you could turn nil and the error, okay?

72
00:05:40.257 --> 00:05:43.994
Otherwise, we can go ahead and
return the user and nil like so

73
00:05:43.994 --> 00:05:48.612
let's rip that bandit off and create
the update user function as well, and

74
00:05:48.612 --> 00:05:52.519
then we will not have to be in this
file anymore for a little bit.

75
00:05:52.519 --> 00:05:56.853
We do func, and feel free if you already
kinda know where we're going with this,

76
00:05:56.853 --> 00:05:59.720
write it out as I'm writing
it to maybe have if you have

77
00:05:59.720 --> 00:06:02.822
to look up to see if you kind of stumble,
it's a good way.

78
00:06:02.822 --> 00:06:05.720
But I encourage everyone
just to try it out as well.

79
00:06:05.720 --> 00:06:12.707
So this update user, I'm gonna say user,
pointer to our user like so.

80
00:06:12.707 --> 00:06:16.449
And since this is update user, all we
care about is if there's an error or not.

81
00:06:16.449 --> 00:06:20.257
We don't necessarily need to return
the full user up to you if you want to

82
00:06:20.257 --> 00:06:21.594
implement that, okay?

83
00:06:21.594 --> 00:06:26.594
We're gonna define the query here, and
here I'm gonna update the users table.

84
00:06:26.594 --> 00:06:29.396
We're gonna set username
as the first value.

85
00:06:29.396 --> 00:06:36.579
We potentially could be getting email
as the second, bio as the third, and

86
00:06:36.579 --> 00:06:41.938
then updated at we can set
this to CURRENT_TIMESTAMP,

87
00:06:41.938 --> 00:06:45.827
which is a native function in Postgres.

88
00:06:45.827 --> 00:06:51.771
WHERE id lower case equals
the fourth value, okay?

89
00:06:51.771 --> 00:06:57.063
RETURNING updated at
then we can do result and

90
00:06:57.063 --> 00:07:03.607
err as db, we gonna execute this,
pass in that query and

91
00:07:03.607 --> 00:07:07.942
then the four variables it expects.

92
00:07:07.942 --> 00:07:15.335
So user.Username,
user.Email, user.Bio, okay?

93
00:07:15.335 --> 00:07:18.816
And then user.ID, let's check that err,

94
00:07:18.816 --> 00:07:23.426
if err does not equal to nil,
let's just return that error

95
00:07:23.426 --> 00:07:28.208
back to our caller
&gt;&gt; Melkey: With an update,

96
00:07:28.208 --> 00:07:31.098
we're gonna see how many
rows were affected.

97
00:07:31.098 --> 00:07:37.991
So we can do rowsAffected, error is
gonna be result.RowsAffected like so,

98
00:07:37.991 --> 00:07:42.795
whoops,
&gt;&gt; Melkey: Okay,

99
00:07:42.795 --> 00:07:47.701
we can check this err,
if err does not equal to nil,

100
00:07:47.701 --> 00:07:51.594
let's go ahead and also return the err.

101
00:07:51.594 --> 00:07:55.716
And if rowsAffected is 0,

102
00:07:55.716 --> 00:08:01.637
we can just return sql.Error NoRows.

103
00:08:01.637 --> 00:08:04.307
Otherwise we can return now.

