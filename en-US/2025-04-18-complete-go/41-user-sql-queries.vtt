WEBVTT

1
00:00:00.000 --> 00:00:04.556
&gt;&gt; Melkey: So now that we have
the interface, we have all the structs,

2
00:00:04.556 --> 00:00:09.399
we can start writing the functions for
the things we have here.

3
00:00:09.399 --> 00:00:12.816
So first, let's go ahead and create user.

4
00:00:12.816 --> 00:00:14.039
So we're gonna do func.

5
00:00:14.039 --> 00:00:17.896
You could do, I don't know,
s *PostgresUserStore.

6
00:00:17.896 --> 00:00:21.252
It's going to be called createuser, right.

7
00:00:21.252 --> 00:00:25.842
It has to, again,
match the method of the interface there,

8
00:00:25.842 --> 00:00:29.086
the signature so
user be a pointer to user.

9
00:00:29.086 --> 00:00:32.862
I'm just going to turn an error like so,
and

10
00:00:32.862 --> 00:00:36.447
then here we're gonna create our query.

11
00:00:36.447 --> 00:00:39.680
So exact same foundational
things that we did earlier,

12
00:00:39.680 --> 00:00:41.618
nothing new is really changing.

13
00:00:41.618 --> 00:00:46.380
So here we're going to insert into users.

14
00:00:46.380 --> 00:00:52.030
We're gonna do all the fields
we care about, so username,

15
00:00:52.030 --> 00:00:57.804
email, password, underscore hash,
and then bio values.

16
00:00:57.804 --> 00:01:02.327
I'm gonna insert four values,
so one, two, three and

17
00:01:02.327 --> 00:01:07.247
four, username, email,
password, hash and bio, okay.

18
00:01:07.247 --> 00:01:11.115
And here we can just do
something like RETURNING id.

19
00:01:11.115 --> 00:01:12.890
And if you want for users, for

20
00:01:12.890 --> 00:01:16.015
anniversaries of when they
created the account, or

21
00:01:16.015 --> 00:01:20.144
if you want to store that sometimes
you see this account was created.

22
00:01:20.144 --> 00:01:25.044
So, like on Twitter,
you can also return the created at and

23
00:01:25.044 --> 00:01:27.691
if you want also the updated at.

24
00:01:27.691 --> 00:01:34.414
Okay, and then here we can just do errors,
it's going to be s.db.queryrow.

25
00:01:34.414 --> 00:01:38.005
I'm going to pass in that query like so
and then all the fields as they appear.

26
00:01:38.005 --> 00:01:41.699
So user.username, user.email,

27
00:01:41.699 --> 00:01:47.179
user.password hash.hash,
okay, and user.bio,

28
00:01:47.179 --> 00:01:54.205
it's going to yellow this because we
need to use the scan method now and

29
00:01:54.205 --> 00:02:00.418
scan the returning fields into
the appropriate fields here.

30
00:02:00.418 --> 00:02:05.800
So it's ID created at and updated at,
again, these have to be addresses.

31
00:02:05.800 --> 00:02:10.788
So we can do user.ID,

32
00:02:10.788 --> 00:02:15.514
user.CreatedAt and

33
00:02:15.514 --> 00:02:23.135
then user.UpdatedAt, like so.

34
00:02:23.135 --> 00:02:24.885
For standards, go ahead and
check this error.

35
00:02:24.885 --> 00:02:31.259
So if our error does not equal to nil,
we can do a few things.

36
00:02:31.259 --> 00:02:32.776
We can just return error actually.

37
00:02:35.986 --> 00:02:39.971
&gt;&gt; Melkey: Okay, otherwise,
let's just return nil.

38
00:02:39.971 --> 00:02:45.124
Let's move on to the next function,
which is get user by user name.

39
00:02:45.124 --> 00:02:52.326
Okay, so we just do us PostgresUserStore,
GetUserByUsername.

40
00:02:52.326 --> 00:02:57.137
It's gonna take the username string and
it's

41
00:02:57.137 --> 00:03:02.457
gonna return user and an error, like so
&gt;&gt; Melkey: Okay,

42
00:03:02.457 --> 00:03:04.037
we're gonna first define our user.

43
00:03:04.037 --> 00:03:08.661
So here we can make it
define a new user like so.

44
00:03:08.661 --> 00:03:12.956
Okay, and we have to instantiate
the password, so password hash, and

45
00:03:12.956 --> 00:03:15.761
we can just do it's gonna
be password like so.

46
00:03:24.232 --> 00:03:29.507
&gt;&gt; Melkey: Okay, let's go ahead and
run the query so

47
00:03:29.507 --> 00:03:34.631
we can do SELECT id, username, email,

48
00:03:34.631 --> 00:03:39.908
password_hash, bio, created_at and

49
00:03:39.908 --> 00:03:43.998
the last field is updated_at.

50
00:03:43.998 --> 00:03:49.245
From our users table
where the username equals

51
00:03:49.245 --> 00:03:54.231
the one and
only value we're gonna pass in.

52
00:03:54.231 --> 00:03:57.268
And here we can declare our error as sdb.

53
00:03:57.268 --> 00:04:01.834
We can do QueryRow pass in that query,

54
00:04:01.834 --> 00:04:07.540
like so, and
all the fields that we want to see,

55
00:04:07.540 --> 00:04:11.406
which is just username,okay.

56
00:04:11.406 --> 00:04:15.654
But then we can scan, and I'll open
this up just a bit easier to read.

57
00:04:15.654 --> 00:04:20.565
And because we've declared our user a few
lines above, it's going to be pretty easy

58
00:04:20.565 --> 00:04:23.970
that we can just do user and
start pulling in those fields.

59
00:04:23.970 --> 00:04:29.123
We can do user.Username or sorry,

60
00:04:29.123 --> 00:04:33.427
the first field is ID, okay?

61
00:04:33.427 --> 00:04:42.828
User.Username
&gt;&gt; Melkey: User.email,

62
00:04:42.828 --> 00:04:47.745
okay, then we can do user dot, oops,

63
00:04:47.745 --> 00:04:52.989
user dot password hash dot hash like so.

64
00:04:52.989 --> 00:04:56.111
Okay, in the user.Bio and

65
00:04:56.111 --> 00:05:01.279
then user.CreatedAt, user.UpdatedAt.

66
00:05:06.231 --> 00:05:08.151
&gt;&gt; Melkey: And
as we know with the select clause,

67
00:05:08.151 --> 00:05:11.585
it's not guaranteed to return anything,
but nor is that an error.

68
00:05:11.585 --> 00:05:19.586
So we can handle this with if error equals
sql error no errors or no rows excuse me.

69
00:05:19.586 --> 00:05:26.763
You can simply do return nil and nil,
if our error does not equal to nil,

70
00:05:26.763 --> 00:05:33.353
so if something wrong happened,
if you turned nil and the error.

71
00:05:33.353 --> 00:05:36.719
Okay, otherwise, we can go ahead and
return the user and

72
00:05:36.719 --> 00:05:41.573
nil like so let's rip that bandit off and
create the update user function as well.

73
00:05:41.573 --> 00:05:46.188
And then we will not have to be in
this file anymore for a little bit.

74
00:05:46.188 --> 00:05:50.491
We do func and feel free if you already
kind of know where we're going with this,

75
00:05:50.491 --> 00:05:52.930
write it out as I'm
writing it to maybe have,

76
00:05:52.930 --> 00:05:56.612
if you have to look up to see if you
kind of stumble, it's a good way.

77
00:05:56.612 --> 00:05:59.635
But I encourage everyone
just to try it out as well.

78
00:05:59.635 --> 00:06:03.225
So this UpdateUser, I'm going to say user,

79
00:06:03.225 --> 00:06:07.674
pointer to our user, like so
and so this is update user.

80
00:06:07.674 --> 00:06:11.462
All we care about is if, if there's
an error or not, we don't necessarily

81
00:06:11.462 --> 00:06:14.663
need to return the full user up
to if you want to implement that.

82
00:06:14.663 --> 00:06:21.484
Okay, I'm gonna define the query here and
here I'm gonna update the users table,

83
00:06:21.484 --> 00:06:26.357
we're gonna SET username as
the first value we potentially

84
00:06:26.357 --> 00:06:31.149
could be getting,email as the second,
bio as the third.

85
00:06:31.149 --> 00:06:36.211
And an updated app,
we can set this to CURRENT_TIMESTAMP,

86
00:06:36.211 --> 00:06:39.594
which is a native function in Postgres.

87
00:06:39.594 --> 00:06:44.765
Where id lowercase
equals the fourth value,

88
00:06:44.765 --> 00:06:51.296
okay, returning updated_at,
then we can do result and

89
00:06:51.296 --> 00:06:57.553
error sdb I'm gonna execute
this pass in that query and

90
00:06:57.553 --> 00:07:01.791
then the four variables it expects.

91
00:07:01.791 --> 00:07:09.162
So user.Username,
user.Email, user.Bio, okay?

92
00:07:09.162 --> 00:07:12.754
And then user.ID.

93
00:07:12.754 --> 00:07:16.632
Let's check that error,
if error does not equal

94
00:07:16.632 --> 00:07:21.086
to nil let's just return that
error back to our caller.

95
00:07:21.086 --> 00:07:24.900
With an update, we're gonna see
how many rows were affected.

96
00:07:24.900 --> 00:07:27.296
So we can do rows affected.

97
00:07:27.296 --> 00:07:32.731
Error is going to be result.rows
affected like so whoops.

98
00:07:35.862 --> 00:07:41.323
Okay, we can check this error
if error does not equal to nil,

99
00:07:41.323 --> 00:07:45.298
let's go ahead and also return that error.

100
00:07:45.298 --> 00:07:50.507
&gt;&gt; Melkey: And
if rows affected is zero we can

101
00:07:50.507 --> 00:07:55.352
just return sql.ErrNoRows.

102
00:07:55.352 --> 00:07:58.174
Otherwise we can return nil.

