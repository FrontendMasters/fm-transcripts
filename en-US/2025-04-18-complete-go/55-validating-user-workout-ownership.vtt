WEBVTT

1
00:00:00.000 --> 00:00:00.544
&gt;&gt; Melkey: Okay, so

2
00:00:00.544 --> 00:00:04.976
with all of that, we do have to make
some modifications on our existing code.

3
00:00:04.976 --> 00:00:09.872
Specifically, if we go back
into our workout_store here,

4
00:00:09.872 --> 00:00:15.731
we now know that our workout right here
has a new field so we can do User ID.

5
00:00:15.731 --> 00:00:19.253
This can be an int json:user_ id and

6
00:00:19.253 --> 00:00:24.476
what I want to do is add another
function here similar to

7
00:00:24.476 --> 00:00:29.828
the get token user function
we saw in our token handler.

8
00:00:29.828 --> 00:00:34.152
I wanna create a function
called GetWorkoutOwner, so

9
00:00:34.152 --> 00:00:39.417
we can do GetWorkoutOwner inside
of our workout store interface.

10
00:00:39.417 --> 00:00:44.170
ID is gonna be an int 64 and what this
is gonna respond with is an int and

11
00:00:44.170 --> 00:00:46.990
an error because it's going to respond,

12
00:00:46.990 --> 00:00:50.957
you can make this respond with
the full user, if you want.

13
00:00:50.957 --> 00:00:54.989
I'm just gonna make it pretty easy to
respond with the ID of the user who owns

14
00:00:54.989 --> 00:00:56.215
that workout, okay?

15
00:00:56.215 --> 00:00:59.765
Cuz these are primary keys,
so they're unique by nature.

16
00:00:59.765 --> 00:01:04.796
And so we know that in our case,
our primary key is just 1, 2, 3, 4,

17
00:01:04.796 --> 00:01:09.761
not the best, but you can do UUIDs and
have the same effect here, okay?

18
00:01:09.761 --> 00:01:11.711
So if we go into create workout,

19
00:01:11.711 --> 00:01:15.613
we do have one thing we definitely
need to address, and that is,

20
00:01:15.613 --> 00:01:20.127
every time we create a workout,
we need to insert that user ID now, okay?

21
00:01:20.127 --> 00:01:24.134
So here,
let's put the first argument as user_id,

22
00:01:24.134 --> 00:01:26.812
that's gonna be in front of title.

23
00:01:26.812 --> 00:01:30.087
So you should have user_id,
title, description,

24
00:01:30.087 --> 00:01:32.866
duration_minutes and calories_burned.

25
00:01:32.866 --> 00:01:38.121
Let's make sure we add a fifth value here,
okay?

26
00:01:38.121 --> 00:01:43.625
And then a few lines below
we have the the QueryRow,

27
00:01:43.625 --> 00:01:47.465
excuse me, right after the query,

28
00:01:47.465 --> 00:01:51.437
we can add workout.UserID, okay?

29
00:01:51.437 --> 00:01:54.917
And this is gonna guarantee that we have
the ability now when we insert our workout

30
00:01:54.917 --> 00:01:56.568
that's associated with the user ID.

31
00:01:56.568 --> 00:02:00.003
And we don't have to worry about
the one to many relationship for

32
00:02:00.003 --> 00:02:04.012
the workout entries, since that could
be related back to the workout, and

33
00:02:04.012 --> 00:02:06.955
that will have the associated owner or
user ID with it.

34
00:02:06.955 --> 00:02:11.930
So if we scroll all the way down,
we're gonna start implementing

35
00:02:11.930 --> 00:02:16.100
that new function method we have,
so we can do func pg.

36
00:02:16.100 --> 00:02:20.993
You can see PostgresWorkoutStore, okay?

37
00:02:20.993 --> 00:02:24.977
GetWorkoutOwner, excuse me.

38
00:02:24.977 --> 00:02:30.512
It's gonna take the workoutID,
which is of type int64.

39
00:02:30.512 --> 00:02:36.232
All right, it's gonna return an int,
error like so.

40
00:02:36.232 --> 00:02:42.818
And here we can do var
userID is gonna be an int.

41
00:02:42.818 --> 00:02:47.051
We're gonna go ahead and
create our new query like so.

42
00:02:47.051 --> 00:02:53.363
I'm gonna do SELECT user_id

43
00:02:53.363 --> 00:03:00.186
from workouts, WHERE id = 1.

44
00:03:00.186 --> 00:03:04.776
Okay, you want an only value we will pass,
and

45
00:03:04.776 --> 00:03:10.664
here we can do pg.db.QueryRow,
pass in that query here,

46
00:03:10.664 --> 00:03:16.111
and then we're gonna pass
in the workoutID like, so.

47
00:03:17.888 --> 00:03:21.477
&gt;&gt; Melkey: Okay,
here we can call our Scan method,

48
00:03:21.477 --> 00:03:25.710
we're gonna Scan the result
into that user ID.

49
00:03:25.710 --> 00:03:29.435
If the error does not = nil,
what we're going to do?

50
00:03:29.435 --> 00:03:32.935
Is just return 0 and
specifically the error,

51
00:03:32.935 --> 00:03:37.521
otherwise, let's go ahead and
return that userID and nil.

52
00:03:37.521 --> 00:03:38.450
All right, so

53
00:03:38.450 --> 00:03:43.492
now we just have to make some last
finishing touches into the actual handler.

54
00:03:43.492 --> 00:03:48.632
So now if we go to
workout_handler over here.

55
00:03:48.632 --> 00:03:54.435
We don't really care what the handle get
worked by ID let anyone read any workout.

56
00:03:54.435 --> 00:03:56.983
I think where we start to care is,

57
00:03:56.983 --> 00:04:02.535
handling if we want to update a workout
and especially creating a workout

58
00:04:02.535 --> 00:04:08.009
because like you saw in the data store,
we've now inserting a user ID.

59
00:04:08.009 --> 00:04:12.177
So we need to make sure we
get that user ID field in

60
00:04:12.177 --> 00:04:15.321
our handle create workout, okay?

61
00:04:15.321 --> 00:04:21.063
So, where we can do this,
is let's say right here,

62
00:04:21.063 --> 00:04:26.819
we're gonna extract the value
of the current user.

63
00:04:26.819 --> 00:04:31.187
So we can do currentUser like so, we can
just put middleware.GetUser like this.

64
00:04:31.187 --> 00:04:34.261
We can pass an r, okay?

65
00:04:34.261 --> 00:04:38.518
And here we can say just
extra validity check,

66
00:04:38.518 --> 00:04:44.740
we don't really need to do this,
but here if currentUser == nil,

67
00:04:44.740 --> 00:04:49.020
or current user == store.AnonymousUser.

68
00:04:49.020 --> 00:04:52.182
We can just simply write this out.

69
00:04:55.720 --> 00:05:02.813
&gt;&gt; Melkey: Error, we can just
say you must be logged in, okay?

70
00:05:02.813 --> 00:05:09.965
So now that we have this current user and
we know that they are not anonymous and

71
00:05:09.965 --> 00:05:13.927
they do have this current user.id field,

72
00:05:13.927 --> 00:05:20.438
what we can do is workout.userID
equals currentUser.ID like that.

73
00:05:20.438 --> 00:05:23.541
All right, so
now we know in the workout struck,

74
00:05:23.541 --> 00:05:26.203
we'll have the user ID associated to it.

75
00:05:26.203 --> 00:05:30.674
So when every new user gets created or
every new worker gets created,

76
00:05:30.674 --> 00:05:33.541
they'll have a user ID associated with it.

77
00:05:33.541 --> 00:05:38.415
All right, now there's a few functions
typically or just namely update and

78
00:05:38.415 --> 00:05:41.630
delete that we need to just finalize here,
okay?

79
00:05:41.630 --> 00:05:44.927
So again, the core issue that we're
solving is the fact that someone can

80
00:05:44.927 --> 00:05:48.551
create a workout and someone else can
delete it, or someone else can update it,

81
00:05:48.551 --> 00:05:49.759
which we don't wanna do.

82
00:05:49.759 --> 00:05:57.099
We want owners to delete and
update their existing,workouts, okay?

83
00:05:57.099 --> 00:06:04.332
So we can do this very easily,
so here, right after the,

84
00:06:04.332 --> 00:06:10.228
let's see where can we put this and
decode it.

85
00:06:10.228 --> 00:06:13.717
I guess we can even put it
all the way down here, so

86
00:06:13.717 --> 00:06:18.500
underneath the check, so
we're in the update workout function.

87
00:06:18.500 --> 00:06:21.852
And then right underneath
all those up the request,

88
00:06:21.852 --> 00:06:25.215
we can do the same thing
of getting the currentUser.

89
00:06:25.215 --> 00:06:30.535
So we can do middleware.GetUser (r),
all right,

90
00:06:30.535 --> 00:06:35.383
we can do the same check
if currentUser == nil or

91
00:06:35.383 --> 00:06:39.774
currentUser == store.AnonymousUser.

92
00:06:39.774 --> 00:06:44.626
We can simply just send them
that they are unauthorized and

93
00:06:44.626 --> 00:06:46.812
we can return out of this.

94
00:06:49.356 --> 00:06:51.351
&gt;&gt; Melkey: Okay,
error must be logged in to see this.

95
00:06:58.146 --> 00:07:03.070
&gt;&gt; Melkey: Okay, next we can actually
get if we know the current user,

96
00:07:03.070 --> 00:07:07.808
we still need to identify who
the owner of the workout is.

97
00:07:07.808 --> 00:07:14.427
So what we can do is workoutOwner err,
okay?

98
00:07:14.427 --> 00:07:19.427
We can use wh.workoutStore and
GetworkoutOwner,

99
00:07:19.427 --> 00:07:24.998
this function here,
you can pass in that (workout ID).

100
00:07:29.029 --> 00:07:33.399
&gt;&gt; Melkey: Okay, and here we can
do some pretty cool checks here,

101
00:07:33.399 --> 00:07:37.487
so if our err does not = nil,
we can do a few things.

102
00:07:37.487 --> 00:07:42.090
So here, we can do if errors,
we can do.Is, so

103
00:07:42.090 --> 00:07:46.927
we've seen this before when
we did our testing for

104
00:07:46.927 --> 00:07:52.129
our database error,
can do sql.ErrNoRows, okay?

105
00:07:52.129 --> 00:07:55.323
Here we can write quickly, copy and

106
00:07:55.323 --> 00:08:00.173
paste this down here,
&gt;&gt; Melkey: Okay, so

107
00:08:00.173 --> 00:08:04.487
it's not that it's a bad request, but

108
00:08:04.487 --> 00:08:09.869
here it's going to be a StatusNotFound,
okay?

109
00:08:09.869 --> 00:08:14.422
And in here we'll say error:

110
00:08:14.422 --> 00:08:19.347
workout does not exist, okay?

111
00:08:19.347 --> 00:08:25.326
Or some sort of error order doesn't exist,
okay?

112
00:08:25.326 --> 00:08:30.605
Otherwise, outside of the scope of
the if errors is error no rows, what we

113
00:08:30.605 --> 00:08:36.418
can write is internal server error, so
something seriously messed up happens.

114
00:08:36.418 --> 00:08:41.582
So StatusInternalServerError,
you can do error and

115
00:08:41.582 --> 00:08:45.599
just type internal server error like so,

116
00:08:45.599 --> 00:08:49.399
it makes a return from both cases here.

117
00:08:49.399 --> 00:08:53.605
All right, so now we know the current
user, we have the workout owner as well.

118
00:08:53.605 --> 00:08:59.453
What we can do is, if a workoutOwner
does not = currentUser.ID.

119
00:08:59.453 --> 00:09:03.298
We can basically know
that this is an incorrect

120
00:09:03.298 --> 00:09:07.943
attempt at modifying someone
else's workout, okay?

121
00:09:07.943 --> 00:09:09.699
So here we can just grab this.

122
00:09:13.462 --> 00:09:18.564
&gt;&gt; Melkey: So you chose JSON,
not status, internal server error,

123
00:09:18.564 --> 00:09:21.446
but we can do StatusForbidden.

124
00:09:21.446 --> 00:09:27.556
All right, you can do error: you are not
authorized to update this workout like so.

125
00:09:27.556 --> 00:09:29.563
Right at that finish line,

126
00:09:29.563 --> 00:09:34.549
the only thing we have to do is now
modify the delete workout, okay?

127
00:09:34.549 --> 00:09:38.397
So this should handle updating
the workout, here we're going

128
00:09:38.397 --> 00:09:42.619
to also modify our handle,
delete workup ID with the exact same way.

129
00:09:42.619 --> 00:09:46.857
And a lot of this could be abstracted into
its own separate function, especially

130
00:09:46.857 --> 00:09:50.801
the retrieving the current user,
a lot of that is pretty rinse and repeat.

131
00:09:50.801 --> 00:09:55.972
We can actually just go ahead and
just copy the current user and

132
00:09:55.972 --> 00:10:00.556
even the workout owner bit
all the way up here, right?

133
00:10:00.556 --> 00:10:05.341
So current user, all the way down to our
last error check of get workout owner.

134
00:10:05.341 --> 00:10:09.620
And if you go back into the handle,
delete, workout,

135
00:10:09.620 --> 00:10:14.645
right above the delete workout
function call on workout store,

136
00:10:14.645 --> 00:10:17.543
you can just go ahead and paste this.

137
00:10:17.543 --> 00:10:19.453
All right, so I'll go a little slow,

138
00:10:19.453 --> 00:10:21.978
but we have the currentUser
from our middleware.

139
00:10:21.978 --> 00:10:27.140
We have the workout owner that we have
as well and then we just simply need

140
00:10:27.140 --> 00:10:32.579
to make that last check, so
if workoutOwner does not = currentUser.ID.

141
00:10:32.579 --> 00:10:36.294
We can then bring back
that StatusForbidden,

142
00:10:36.294 --> 00:10:39.923
return that we saw right over here,
or nope.

143
00:10:39.923 --> 00:10:46.808
Where is it?
Right over here, return, and

144
00:10:46.808 --> 00:10:52.008
just paste it over here.

