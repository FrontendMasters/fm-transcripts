WEBVTT

1
00:00:00.000 --> 00:00:03.195
&gt;&gt; Scott Moss: Okay, so
the other thing is caching.

2
00:00:03.195 --> 00:00:06.153
Okay, so if I go publish a change and

3
00:00:06.153 --> 00:00:11.777
then I wanna see that change
reflected in production immediately,

4
00:00:11.777 --> 00:00:16.628
I won't because Next.js is
going to cache it by default.

5
00:00:16.628 --> 00:00:20.880
So, you need a way to break that cache,
there are basically two ways to do do it..

6
00:00:20.880 --> 00:00:23.953
One way we can't really demonstrate
here without setting up a tunnel.

7
00:00:23.953 --> 00:00:27.868
I looked there was no easy way to set up a
free tunnel that wasn't gonna have people

8
00:00:27.868 --> 00:00:30.632
doing things that they probably
don't know how to do, so

9
00:00:30.632 --> 00:00:32.203
we're not gonna do the tunnel.

10
00:00:32.203 --> 00:00:37.477
But the other way we can do and
that's just gonna be setting

11
00:00:37.477 --> 00:00:44.591
a revalidation interval on which we want
at most the content to revalidate it.

12
00:00:44.591 --> 00:00:49.744
And we could do that because Next.js
hijacked, so if you go to our fetch file,

13
00:00:49.744 --> 00:00:55.305
Next.js hijacked the fetch function and
they have a new property here called next.

14
00:00:55.305 --> 00:00:59.583
And I can say revalidate like this, or

15
00:00:59.583 --> 00:01:02.936
I'm sorry, tags like this.

16
00:01:05.156 --> 00:01:08.497
&gt;&gt; Scott Moss: And you can pass in
an array of tags which are basically,

17
00:01:08.497 --> 00:01:13.260
you can think of them as like cache keys
in which this query is going to be cached,

18
00:01:13.260 --> 00:01:15.843
so you can then revalidate later, right?

19
00:01:15.843 --> 00:01:20.574
So for here that just means I need
to add in another property appear

20
00:01:20.574 --> 00:01:21.958
in this argument.

21
00:01:21.958 --> 00:01:28.117
So I'll say, I'll say tags and

22
00:01:28.117 --> 00:01:32.681
I'll make that an array

23
00:01:32.681 --> 00:01:37.024
of strings like that.

24
00:01:37.024 --> 00:01:41.313
Tags, there we go, so
you can pass in some tags.

25
00:01:41.313 --> 00:01:46.316
That'll go here, and then for
revalidate you can put in

26
00:01:46.316 --> 00:01:51.538
any number of seconds,
not milliseconds, but seconds.

27
00:01:51.538 --> 00:01:59.670
How long you want before this fetch
call to be re reran, basically.

28
00:01:59.670 --> 00:02:02.459
So this will allow us, so
basically if you're like, I want,

29
00:02:02.459 --> 00:02:05.746
you can think of it as polling,
that's the best way I can describe of it.

30
00:02:05.746 --> 00:02:10.163
It's like, okay,
every 25 seconds run this function again.

31
00:02:10.163 --> 00:02:14.632
And if there's been new data, new content
that was published in those 25 seconds,

32
00:02:14.632 --> 00:02:17.005
that's what's gonna show up on the screen.

33
00:02:17.005 --> 00:02:20.195
When you go back to it,
it's not just gonna pop up.

34
00:02:20.195 --> 00:02:23.817
You have to, it's when you render
the page again, it'll show.

35
00:02:27.455 --> 00:02:32.171
&gt;&gt; Scott Moss: Right, so let's check
it out, I'll put one for 10 seconds.

36
00:02:32.171 --> 00:02:36.576
So I'll say revalidate for 10 seconds for
every single one of these, right?

37
00:02:36.576 --> 00:02:41.208
And then just to show you how this works,

38
00:02:41.208 --> 00:02:47.893
I'll go into the CMS,
beta is live, I'll publish that.

39
00:02:47.893 --> 00:02:49.948
I think that's what was already there,
I'm published.

40
00:02:49.948 --> 00:02:53.790
I'm just gonna say, new change,

41
00:02:53.790 --> 00:02:59.499
before I hit that,
let's just go back to the site.

42
00:02:59.499 --> 00:03:04.427
Let's just clear the cache, refresh, make
sure it still says data's live, no cache,

43
00:03:04.427 --> 00:03:05.621
okay, we're good.

44
00:03:05.621 --> 00:03:11.410
All right, now if I go back here,
I publish these changes.

45
00:03:13.869 --> 00:03:16.852
&gt;&gt; Scott Moss: Cool, and then if I go in.

46
00:03:18.763 --> 00:03:20.805
&gt;&gt; Scott Moss: Go back here.

47
00:03:20.805 --> 00:03:24.070
How long did I put the thing on for
one second, 10 seconds, okay.

48
00:03:24.070 --> 00:03:25.944
So 10 seconds,
let's wait for a little bit.

49
00:03:25.944 --> 00:03:29.620
So now I don't have to do a before
what I would have to have done to see

50
00:03:29.620 --> 00:03:32.461
the latest on this publish
was to do a hard refresh.

51
00:03:32.461 --> 00:03:36.881
I have to do a command shift R just to see
the changes, but now after 10 seconds,

52
00:03:36.881 --> 00:03:41.110
if I just do a command R, it's 10
seconds hasn't passed yet, there it is.

53
00:03:41.110 --> 00:03:42.995
There's a new change, right?

54
00:03:42.995 --> 00:03:47.965
So, it revalidated that after 10 seconds,
so when the next person goes to that site,

55
00:03:47.965 --> 00:03:49.991
after 10 seconds you'll see it.

56
00:03:49.991 --> 00:03:54.134
Whereas before,
it's basically cached indefinitely,

57
00:03:54.134 --> 00:03:58.950
and the only way to see it is like,
if, in this case on development,

58
00:03:58.950 --> 00:04:04.250
do a hard refresh
&gt;&gt; Scott Moss: On production,

59
00:04:04.250 --> 00:04:10.659
you just won't see it [LAUGH] because it'd
be a static site, it'd be a static page.

60
00:04:10.659 --> 00:04:13.945
It's hitting the server in development,
but in production,

61
00:04:13.945 --> 00:04:15.377
you just wouldn't see it.

62
00:04:15.377 --> 00:04:17.797
So how do you get around it in production?

63
00:04:17.797 --> 00:04:20.268
Great question, so in production,

64
00:04:20.268 --> 00:04:24.185
the way you get around it is
you would set up another route.

65
00:04:24.185 --> 00:04:25.861
So you notice we have this tax here right?

66
00:04:25.861 --> 00:04:30.364
So what I can do, let's say I go to our.

67
00:04:32.189 --> 00:04:38.004
&gt;&gt; Scott Moss: I go to our hero fetch
here, and I wanna pass in some tags.

68
00:04:38.004 --> 00:04:41.780
So I wanna say, tags, this is called hero.

69
00:04:41.780 --> 00:04:44.528
Okay?
So I'm gonna say this is called hero here,

70
00:04:44.528 --> 00:04:46.162
those are my tags, right?

71
00:04:46.162 --> 00:04:50.883
Then what I would do is I
would make a route in our API

72
00:04:50.883 --> 00:04:55.618
folder here and
I would call it whatever you want.

73
00:04:55.618 --> 00:04:57.820
Call it revalidate, whatever you want.

74
00:04:57.820 --> 00:05:02.409
All it's gonna do, it's just gonna say,
revalidate tag and it's gonna pass this,

75
00:05:02.409 --> 00:05:05.864
you're gonna pass in the name of
the tag you want to revalidate.

76
00:05:05.864 --> 00:05:08.587
In this case, I would say hero.

77
00:05:08.587 --> 00:05:11.347
You are then going to go assign
that route to a webhook or

78
00:05:11.347 --> 00:05:13.635
Contentful when something gets published.

79
00:05:13.635 --> 00:05:18.084
So you can say, hey, when this new thing
gets published on a new published event,

80
00:05:18.084 --> 00:05:20.165
here's the webhook I want you to hit.

81
00:05:20.165 --> 00:05:24.565
That's gonna be a route that you just made
that revalidated the tags called hero,

82
00:05:24.565 --> 00:05:28.857
which will then in production do exactly
what we just saw with the 10 seconds.

83
00:05:28.857 --> 00:05:31.636
So the next time you go to the page,
it'll show the new hero.

84
00:05:31.636 --> 00:05:35.150
And that way you can show new content
without having to rebuild the site.

