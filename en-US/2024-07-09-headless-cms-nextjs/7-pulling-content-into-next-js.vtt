WEBVTT

1
00:00:00.309 --> 00:00:05.539
&gt;&gt; Scott Moss: Once that query is copied,
I am then going to go back to our repo.

2
00:00:05.539 --> 00:00:08.283
Inside of our content folder,
I'm gonna make a new file,

3
00:00:08.283 --> 00:00:09.634
I'm gonna call it queries.

4
00:00:12.274 --> 00:00:16.682
&gt;&gt; Scott Moss: So in here,
we're gonna import our fetcher, so,

5
00:00:16.682 --> 00:00:21.819
content, GraphQL fetcher,
everywhere, bring that in.

6
00:00:21.819 --> 00:00:26.221
And then we're just gonna export queries
for our components, our pages in here.

7
00:00:26.221 --> 00:00:31.612
So I'm gonna make one for the hero,

8
00:00:31.612 --> 00:00:38.632
so I'll say getContentForHero, like this.

9
00:00:38.632 --> 00:00:39.632
It's gonna be async.

10
00:00:44.350 --> 00:00:47.476
&gt;&gt; Scott Moss: And I'm gonna make a query,
so what is a query?

11
00:00:47.476 --> 00:00:50.658
Again, you don't really need
to know GraphQL for this,

12
00:00:50.658 --> 00:00:53.908
it's literally just a string,
I'm gonna do backticks,

13
00:00:53.908 --> 00:00:56.652
I'm gonna add this comment
here with a hashtag.

14
00:00:56.652 --> 00:01:00.809
And the only reason I'm adding this is so
I get syntax highlighting.

15
00:01:00.809 --> 00:01:04.606
So if you do the #graphql at
the beginning of the string,

16
00:01:04.606 --> 00:01:09.294
your editor will start highlighting
the string like a GraphQL query.

17
00:01:09.294 --> 00:01:13.000
It won't change the behavior,
it'll just make it highlight.

18
00:01:13.000 --> 00:01:15.668
Then I go to the next line and
I'm just gonna paste in that query.

19
00:01:23.159 --> 00:01:25.749
&gt;&gt; Scott Moss: And that's it,
now we have the query that we want.

20
00:01:25.749 --> 00:01:30.675
Then I need to pass this query
to our content GraphQL fetcher.

21
00:01:30.675 --> 00:01:38.212
So I'll say data = await
contentGqlFetcher.

22
00:01:38.212 --> 00:01:40.526
So, I just broke one of my rules,

23
00:01:40.526 --> 00:01:46.093
which is if a function has more than three
arguments, it should take an object.

24
00:01:46.093 --> 00:01:49.114
This has three arguments, it does bother
me, so we're gonna, I'm gonna change that.

25
00:01:49.114 --> 00:01:53.784
I don't like that, so I'm gonna go here,
I'm gonna make this taken

26
00:01:53.784 --> 00:01:58.144
an object with all these properties
instead cuz that's gross.

27
00:01:58.144 --> 00:02:04.206
So it's gonna take in query,
variables, preview like that.

28
00:02:04.206 --> 00:02:06.536
I'm just gonna go ahead and
add the types for it as well,

29
00:02:06.536 --> 00:02:09.521
you don't need the types if you don't
wanna do all that work, I get it.

30
00:02:09.521 --> 00:02:13.546
It's exhausting for sure.

31
00:02:15.288 --> 00:02:22.450
&gt;&gt; Scott Moss: And
then preview, come here.

32
00:02:22.450 --> 00:02:28.418
Variables, any and then preview fully,

33
00:02:28.418 --> 00:02:31.665
okay, so we got that.

34
00:02:31.665 --> 00:02:37.220
Need a space there, there we go,
okay, so now I made that an object.

35
00:02:37.220 --> 00:02:39.298
The other thing I wanna do is,

36
00:02:39.298 --> 00:02:44.123
I wanna type check our content that
comes back, I mean, otherwise,

37
00:02:44.123 --> 00:02:50.048
like you're just gonna be looking at
console logs all day like, what's that?

38
00:02:50.048 --> 00:02:51.989
That's the field on that thing again.

39
00:02:51.989 --> 00:02:59.350
So, what we can do is we can add
a generic to this contentGraphQlFetcher

40
00:02:59.350 --> 00:03:04.148
to tell it what type of
data is gonna come back.

41
00:03:04.148 --> 00:03:07.836
Given the query that we passed in and
then we can pass that,

42
00:03:07.836 --> 00:03:10.180
we can make that a return value here.

43
00:03:10.180 --> 00:03:12.798
So, if you don't know what
a generic is in typescript,

44
00:03:12.798 --> 00:03:14.426
it's like an argument for a type.

45
00:03:14.426 --> 00:03:19.338
It's like, I need this part of
this type is gonna be dynamic, so

46
00:03:19.338 --> 00:03:24.421
I wanna make an argument for it and
the way that that looks is, I actually

47
00:03:24.421 --> 00:03:30.291
have it right here, not right here, but,
&gt;&gt; Scott Moss: Right here,

48
00:03:30.291 --> 00:03:35.036
we know that this function is gonna return
to promise because that's what JSON does

49
00:03:35.036 --> 00:03:35.934
or fetch does.

50
00:03:35.934 --> 00:03:38.699
And all we can just pass
in a generic like this, so

51
00:03:38.699 --> 00:03:41.066
that's basically what we're gonna do.

52
00:03:41.066 --> 00:03:48.257
So I can go here, I can say,
it's gonna return a promise.

53
00:03:48.257 --> 00:03:51.375
This promise itself takes a generic, so

54
00:03:51.375 --> 00:03:55.605
it's gonna be of type T,
which is like a placeholder.

55
00:03:55.605 --> 00:04:02.449
So, let's say type T or
it'll be undefined like that.

56
00:04:02.449 --> 00:04:08.150
And then all you have to do is just put
the generic up here at the beginning

57
00:04:08.150 --> 00:04:14.053
of the function with the same name,
so like that, we have a generic.

58
00:04:14.053 --> 00:04:16.259
So, now this is saying,

59
00:04:16.259 --> 00:04:22.038
this function returns a promise
that when resolve will be type T,

60
00:04:22.038 --> 00:04:27.418
and type T is whatever you pass
in when you call the function.

61
00:04:27.418 --> 00:04:30.147
Most generics,
they use T as a placeholder, and

62
00:04:30.147 --> 00:04:33.556
then down here at the bottom,
I can just say return data as T.

63
00:04:41.784 --> 00:04:46.852
&gt;&gt; Scott Moss: Okay, so now I have my
generic, ready for some types here in my

64
00:04:46.852 --> 00:04:52.422
GraphQL fetcher function called
pass on my object pass on my query.

65
00:04:52.422 --> 00:04:54.236
There we go, so we got that, and

66
00:04:54.236 --> 00:04:57.814
I probably just wants to be to
like pass an actual generic here.

67
00:04:57.814 --> 00:05:00.836
So we can pass in a generic here,
we don't really have a type right now.

68
00:05:00.836 --> 00:05:03.869
So, let's go make one and
this is where it gets really easy.

69
00:05:03.869 --> 00:05:05.332
So all we have to do really,

70
00:05:05.332 --> 00:05:08.462
if you just copy everything
in here underneath the query.

71
00:05:12.636 --> 00:05:15.322
&gt;&gt; Scott Moss: And
what I like to do is on the root,

72
00:05:15.322 --> 00:05:18.025
I like to make a file called types.

73
00:05:18.025 --> 00:05:24.099
And I'll export a type, so
I'll say type HeroQuery,

74
00:05:24.099 --> 00:05:28.864
and I'll set equal to an object like this.

75
00:05:28.864 --> 00:05:31.205
I'll just paste that query in there.

76
00:05:31.205 --> 00:05:35.578
Then I'll just fix it, so
that's an object type,

77
00:05:35.578 --> 00:05:41.594
this is an array of objects, so
I'll go out here and put an array here.

78
00:05:41.594 --> 00:05:48.671
This is a string, this is a string,
this is a string.

79
00:05:48.671 --> 00:05:53.771
This is an object type,

80
00:05:53.771 --> 00:05:59.895
this is an array of objects.

81
00:05:59.895 --> 00:06:03.630
And this is a string, and this is
a string, there we go, that's my type.

82
00:06:03.630 --> 00:06:07.279
All right, so now we have our types,
I can go back to our queries.

83
00:06:07.279 --> 00:06:11.609
Instead of passing any,
I can do HeroQuery like that.

84
00:06:11.609 --> 00:06:15.545
And now, this data is type checked,
all right?

85
00:06:15.545 --> 00:06:20.108
So if I were to say
data.HeroCollection.items,

86
00:06:20.108 --> 00:06:26.166
which is an array, so I can say
give me Thing in there, .preTitle.

87
00:06:26.166 --> 00:06:28.468
It's type checked, it's great.

88
00:06:28.468 --> 00:06:29.921
It's beautiful, okay?

89
00:06:29.921 --> 00:06:33.153
So now we'll just say if not data,

90
00:06:33.153 --> 00:06:37.954
we wanna throw some issue,
throw some error here.

91
00:06:37.954 --> 00:06:42.856
We're not handling errors right now,
but oopes, and then I'll just return.

92
00:06:45.097 --> 00:06:46.130
&gt;&gt; Scott Moss: The data.

93
00:06:46.130 --> 00:06:48.259
No, all right,
well let's add this to our hero then.

94
00:06:48.259 --> 00:06:52.709
So let's go to our hero and
we might run into some Next,js problems.

95
00:06:52.709 --> 00:06:54.373
I hope we do so we can solve them,

96
00:06:54.373 --> 00:06:58.535
cuz I think there's one issue that we're
run into that's quite interesting.

97
00:06:58.535 --> 00:07:03.361
So we are in a server component because
there is no use client at the top.

98
00:07:03.361 --> 00:07:08.380
So that means,
we can make this async like this.

99
00:07:08.380 --> 00:07:11.982
And we can just call our
function our query in here.

100
00:07:11.982 --> 00:07:19.952
So I can say data = await getHero,
or whatever I call it?

101
00:07:19.952 --> 00:07:22.057
GetContentForHero.

102
00:07:22.057 --> 00:07:27.555
getContentForHero() like this.

103
00:07:27.555 --> 00:07:31.364
Now we have our data, but because
that's gonna return a list of heroes,

104
00:07:31.364 --> 00:07:34.684
even though we have one hero,
I'm just gonna kind of scope it.

105
00:07:34.684 --> 00:07:40.478
So I'm gonna say content =
data.heroCollection.items 0, so

106
00:07:40.478 --> 00:07:46.071
that'll actually be the hero right there,
so now we have that.

107
00:07:47.636 --> 00:07:50.604
&gt;&gt; Scott Moss: Yes, you probably don't
wanna go around assuming you're always

108
00:07:50.604 --> 00:07:51.776
gonna have stuff in here.

109
00:07:51.776 --> 00:07:56.200
So you wanna make sure that there's checks
and things involved like that, especially

110
00:07:56.200 --> 00:08:00.157
when there's other people modifying
data on a system not connected to this.

111
00:08:00.157 --> 00:08:02.148
But for now,
we're just gonna assume that it works.

112
00:08:02.148 --> 00:08:04.604
And then as you can see,
we still got the type check.

113
00:08:04.604 --> 00:08:08.191
So got a call to actions,
we got our pretitle, subtitle, title.

114
00:08:11.030 --> 00:08:13.071
&gt;&gt; Scott Moss: So now we're gonna go
ahead and just replace these strings.

115
00:08:13.071 --> 00:08:19.214
So for this one, this is our pretitle,
API Studios Now and Beta.

116
00:08:19.214 --> 00:08:24.542
Nah, this is now content.preTitle and

117
00:08:24.542 --> 00:08:28.935
API security framework, nope.

118
00:08:28.935 --> 00:08:30.787
This is content.Title.

119
00:08:34.204 --> 00:08:39.073
&gt;&gt; Scott Moss: All this stuff right here,
this is now content.subtitle.

120
00:08:41.860 --> 00:08:42.796
&gt;&gt; Scott Moss: Let's start with that.

121
00:08:42.796 --> 00:08:46.342
We'll come back to the buttons
in a second, cuz I'm pretty sure

122
00:08:46.342 --> 00:08:51.073
there's going to be some broken stuff, and
I wanna talk through that cuz it's unique

123
00:08:51.073 --> 00:08:54.905
to Next.js and you're gonna run
into it if you're doing CMS stuff.

124
00:08:54.905 --> 00:09:01.559
So let's go see what what is broken.

125
00:09:01.559 --> 00:09:06.880
I guess I need to start the site first,
so we'll do that.

126
00:09:06.880 --> 00:09:07.501
There we go.

127
00:09:11.086 --> 00:09:14.409
&gt;&gt; Scott Moss: Try this again,
so we'll start this.

128
00:09:14.409 --> 00:09:15.872
Go to our page.

129
00:09:15.872 --> 00:09:17.180
I guess it just works, nothing broke.

130
00:09:17.180 --> 00:09:22.575
I thought we were gonna run into an issue
with something, but as you can see,

131
00:09:22.575 --> 00:09:27.907
now my content is here dynamically
from the page, it's magic, right?

132
00:09:27.907 --> 00:09:29.071
So let's go through whole flow.

133
00:09:29.071 --> 00:09:33.755
Let's go back to our CMS, okay?

134
00:09:33.755 --> 00:09:41.742
I'm going to,
&gt;&gt; Scott Moss: Which one is it?

135
00:09:41.742 --> 00:09:46.057
I have so many contentful things open.

136
00:09:46.057 --> 00:09:48.368
Okay, I'm just gonna go here.

137
00:09:48.368 --> 00:09:50.284
So I'm gonna go ahead,
I'm gonna edit it again.

138
00:09:50.284 --> 00:09:56.388
I'm gonna say, okay,
we're the best, really.

139
00:09:56.388 --> 00:10:00.311
All right, I'm gonna hit publish.

140
00:10:00.311 --> 00:10:01.577
We have to keep hitting publish for now.

141
00:10:01.577 --> 00:10:04.877
We'll fix that in the data later with
previews, so I'm gonna hit publish.

142
00:10:04.877 --> 00:10:06.785
And then I'm gonna go back to our site.

143
00:10:08.898 --> 00:10:14.372
&gt;&gt; Scott Moss: And what do you
expect to happen when I hit refresh?

144
00:10:16.654 --> 00:10:18.131
&gt;&gt; Student 1: Give you content.

145
00:10:18.131 --> 00:10:20.707
&gt;&gt; Scott Moss: The new content that
I just published not trick question.

146
00:10:20.707 --> 00:10:23.500
[LAUGH] That's what I would.

147
00:10:23.500 --> 00:10:26.164
Yeah, that's what I would expect.

148
00:10:26.164 --> 00:10:29.157
I didn't, why?

149
00:10:29.157 --> 00:10:30.673
Why did I not get it?

150
00:10:30.673 --> 00:10:31.347
Is there something wrong with contentful.

151
00:10:31.347 --> 00:10:32.422
&gt;&gt; Student 1: Cached.

152
00:10:32.422 --> 00:10:33.655
&gt;&gt; Scott Moss: Yes, it's cached.

153
00:10:33.655 --> 00:10:35.111
Next.js is caching this.

154
00:10:35.111 --> 00:10:39.461
Don't worry, I can do a hard refresh and
we'll get it now.

155
00:10:39.461 --> 00:10:43.916
So that's something to keep in mind of and
that's important because, in production,

156
00:10:43.916 --> 00:10:48.069
you want your content to change when you
publish it without having to rebuild, but

157
00:10:48.069 --> 00:10:51.462
if Next.js is aggressively caching things,
how you break that.

158
00:10:51.462 --> 00:10:56.448
So we'll talk about how you can do
that with some of the webhooks and

159
00:10:56.448 --> 00:10:59.488
revalidation strategies in Next.js.

160
00:10:59.488 --> 00:11:02.397
Exactly something I covered
in immediate Next.js course,

161
00:11:02.397 --> 00:11:05.142
where we have to like revalidate
all the caching things.

162
00:11:05.142 --> 00:11:08.012
We won't have to talk about
how to implement it, but

163
00:11:08.012 --> 00:11:10.962
we will talk about how to,
how to break it basically.

164
00:11:10.962 --> 00:11:12.880
So yeah, that's a cache.

165
00:11:12.880 --> 00:11:14.123
Okay, let's add the buttons.

166
00:11:14.123 --> 00:11:18.474
So for the buttons, we can go down here.

167
00:11:18.474 --> 00:11:22.112
And where are they?

168
00:11:22.112 --> 00:11:25.198
They are, okay, so here's one, right here.

169
00:11:25.198 --> 00:11:30.606
It's all scoped into the div, and
then we have another one that's scoped.

170
00:11:30.606 --> 00:11:32.425
So here's the thing.

171
00:11:32.425 --> 00:11:33.567
We have two buttons.

172
00:11:33.567 --> 00:11:39.289
So there's a couple ways we can do this.

173
00:11:39.289 --> 00:11:41.916
And they're different, like they're also
they're styled very different as well.

174
00:11:41.916 --> 00:11:46.512
So do we want to say that the second
button is always gonna be styled this way

175
00:11:46.512 --> 00:11:50.160
and you can change out the,
the actual content in the URL.

176
00:11:50.160 --> 00:11:53.886
Or do we wanna say that it
doesn't matter if this,

177
00:11:53.886 --> 00:11:56.741
the second button is styled that way.

178
00:11:56.741 --> 00:12:00.304
So that's like some of the stuff you
have to think about because those

179
00:12:00.304 --> 00:12:03.080
are fields you'll have to
add in your content model.

180
00:12:03.080 --> 00:12:06.899
If you want the non technical person to be
able to have the responsibility to make

181
00:12:06.899 --> 00:12:10.433
that change, if you want them to be
able to change the order, basically,

182
00:12:10.433 --> 00:12:12.038
are we gonna ignore order or not?

183
00:12:12.038 --> 00:12:13.181
That's what it comes down to.

184
00:12:13.181 --> 00:12:17.895
So I think what we're gonna do here
is we're just going to- Button type.

185
00:12:17.895 --> 00:12:20.467
Yeah, you can have a button type,
yeah, but

186
00:12:20.467 --> 00:12:24.149
you see, every field that you
add it increases the complexity.

187
00:12:24.149 --> 00:12:26.158
So it's like in our head,
that's the thing.

188
00:12:26.158 --> 00:12:32.214
It's like a database schema was
not meant for a human to consume.

189
00:12:32.214 --> 00:12:38.203
It's meant for an API, it's meant for
code, it's meant for an ORM.

190
00:12:38.203 --> 00:12:41.162
It's abstracted in a way,
it's named in such a way.

191
00:12:41.162 --> 00:12:46.148
So when you're like designing a content
schema, it becomes very database like, but

192
00:12:46.148 --> 00:12:49.000
now a human has to directly
interface with that.

193
00:12:49.000 --> 00:12:51.991
And that's where it can get tricky.

194
00:12:51.991 --> 00:12:55.036
I've seen so many times where developers
making stuff for their constant team,

195
00:12:55.036 --> 00:12:58.301
and they'll do it away and then it cost us
like struggling and developers like, well,

196
00:12:58.301 --> 00:12:59.306
you mean it's like this.

197
00:12:59.306 --> 00:13:01.340
How do you not understand that?

198
00:13:01.340 --> 00:13:03.410
It's an icon logo type.

199
00:13:03.410 --> 00:13:05.658
[LAUGH] They're like,
what are you talking about?

200
00:13:05.658 --> 00:13:06.999
I don't even know what that means.

201
00:13:06.999 --> 00:13:11.362
So it can get crazy.

202
00:13:11.362 --> 00:13:14.943
Let's just assume we will keep both of
these here, we won't iterate over them.

203
00:13:14.943 --> 00:13:15.808
We won't loop over them.

204
00:13:15.808 --> 00:13:19.470
And we'll just say, whatever the first
button is in the collection goes here.

205
00:13:19.470 --> 00:13:22.351
And whatever the second button
in the collection goes here.

206
00:13:22.351 --> 00:13:23.617
We'll just keep it that way.

207
00:13:23.617 --> 00:13:24.837
So what does that look like?

208
00:13:24.837 --> 00:13:30.053
So let's declare them up top.

209
00:13:30.053 --> 00:13:35.077
Let's just say button one or a cta1,

210
00:13:35.077 --> 00:13:43.242
that's gonna be
content.callToActions.items[0] and

211
00:13:43.242 --> 00:13:44.972
then cta2.

212
00:13:44.972 --> 00:13:46.185
That's gonna be that one.

213
00:13:46.185 --> 00:13:46.851
There we go.

214
00:13:46.851 --> 00:13:49.761
So now I can go down here.

215
00:13:49.761 --> 00:13:55.276
I can say cta1.label,

216
00:13:55.276 --> 00:14:00.006
and then cta1.link

217
00:14:02.782 --> 00:14:04.309
&gt;&gt; Scott Moss: Same thing down here.

218
00:14:07.013 --> 00:14:10.367
&gt;&gt; Scott Moss: cta2.label.

219
00:14:14.503 --> 00:14:18.931
&gt;&gt; Scott Moss: cta2.link.

220
00:14:18.931 --> 00:14:23.282
Cool, I got that callback here.

221
00:14:23.282 --> 00:14:27.120
I think mine actually say says
getting started and read the doc.

222
00:14:27.120 --> 00:14:31.059
So let me go change it so
we can see a difference.

223
00:14:31.059 --> 00:14:33.433
It literally does say that.

224
00:14:33.433 --> 00:14:33.946
Hi.

225
00:14:36.517 --> 00:14:37.269
&gt;&gt; Scott Moss: There we go.

226
00:14:37.269 --> 00:14:39.450
So now I have to publish both of these.

227
00:14:39.450 --> 00:14:41.048
So I have to click Publish.

228
00:14:41.048 --> 00:14:42.140
I have to click Publish.

229
00:14:44.774 --> 00:14:48.705
&gt;&gt; Scott Moss: I don't have to publish
the main one, just the relations.

230
00:14:48.705 --> 00:14:53.325
I go back to the site,
do a hard refresh, which for

231
00:14:53.325 --> 00:14:56.854
me on arc is command SHIFT + R on a Mac.

232
00:14:56.854 --> 00:14:57.521
Ooh, there we go.

