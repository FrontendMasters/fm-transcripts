WEBVTT

1
00:00:00.056 --> 00:00:04.679
&gt;&gt; Scott Moss: The next thing we need to
do is, like I said, because this is one

2
00:00:04.679 --> 00:00:10.027
page for many possible slugs,
how do we pre-render them ahead of time?

3
00:00:10.027 --> 00:00:12.255
How do we tell next year that
there's more than one of these, so

4
00:00:12.255 --> 00:00:13.787
it's rendered statically ahead of time?

5
00:00:13.787 --> 00:00:18.463
So that's what we need to do, and
it's really not that difficult to do it,

6
00:00:18.463 --> 00:00:22.492
it's very similar to what you
have done in the pages directory.

7
00:00:22.492 --> 00:00:27.864
And next to yes,
you can export a function here called get,

8
00:00:27.864 --> 00:00:30.452
let me see if I can remember.

9
00:00:30.452 --> 00:00:35.649
GetStaticParams = (),
pretty sure that's it.

10
00:00:35.649 --> 00:00:37.243
We'll go verify it.

11
00:00:37.243 --> 00:00:43.023
GenerateStaticParams, okay, close,
close, generateStaticParams.

12
00:00:43.023 --> 00:00:48.022
So all you have to do with this one,
it's really simple.

13
00:00:48.022 --> 00:00:51.987
It runs on the server, all you have to do
is just return an array of objects that

14
00:00:51.987 --> 00:00:54.553
have the parameters that
this route resolves to.

15
00:00:54.553 --> 00:00:58.662
So in this case, I need to return
an array of objects to have a slug.

16
00:00:58.662 --> 00:01:05.142
That's it, and then it will generate
those for me, so, how do I get those?

17
00:01:05.142 --> 00:01:06.328
Well, we need a query.

18
00:01:06.328 --> 00:01:08.116
We need a query just to get the slugs.

19
00:01:08.116 --> 00:01:10.529
So right now, our query,
like, gets all this stuff.

20
00:01:10.529 --> 00:01:14.063
So I guess I could just call this
again and just only get the slugs, or

21
00:01:14.063 --> 00:01:15.304
I can make another one.

22
00:01:15.304 --> 00:01:18.472
You get the point,
I'm just gonna call this one again and

23
00:01:18.472 --> 00:01:20.797
we'll just get the slugs and that's it.

24
00:01:20.797 --> 00:01:24.944
Well, hold on, this one takes in a slug
variable, so this actually only gets one,

25
00:01:24.944 --> 00:01:26.865
so no, we do have to make another one.

26
00:01:28.035 --> 00:01:28.542
Let's do it.

27
00:01:28.542 --> 00:01:32.031
So we'll say, and
maybe we can just write this one here,

28
00:01:32.031 --> 00:01:36.551
because it's mostly just the same,
honestly, just without the where.

29
00:01:36.551 --> 00:01:44.844
So we could just say, get
&gt;&gt; Scott Moss: GetSlugsForPosts.

30
00:01:50.963 --> 00:01:53.726
&gt;&gt; Scott Moss: Like that.

31
00:01:53.726 --> 00:02:02.000
And we'll say, query
&gt;&gt; Scott Moss: For

32
00:02:02.000 --> 00:02:04.543
the most part,
it's very similar to this one, so

33
00:02:04.543 --> 00:02:08.553
I'm just gonna just copy the query,
then take away the things we don't need.

34
00:02:10.220 --> 00:02:13.038
&gt;&gt; Scott Moss: So I'll do this, I'll
just give it a different operation name.

35
00:02:13.038 --> 00:02:15.185
I'll call it SlugsForPost.

36
00:02:15.185 --> 00:02:20.036
This doesn't matter in GraphQL,
it's not gonna take any arguments, so

37
00:02:20.036 --> 00:02:22.630
I'm just gonna curate the arguments.

38
00:02:22.630 --> 00:02:24.644
And for the items,
I just want the slugs, and

39
00:02:24.644 --> 00:02:26.513
that is gonna get rid of everything else.

40
00:02:30.616 --> 00:02:31.509
&gt;&gt; Scott Moss: That's it.

41
00:02:31.509 --> 00:02:34.289
I don't even need these parentheses.

42
00:02:34.289 --> 00:02:39.551
I don't even really need that,
I can just do this.

43
00:02:39.551 --> 00:02:43.857
And I don't need that,
[LAUGH] it's getting rid of everything.

44
00:02:47.542 --> 00:02:51.055
&gt;&gt; Scott Moss: Cool, so
that should do that, and

45
00:02:51.055 --> 00:02:55.182
then come here and get our data, await.

46
00:02:57.890 --> 00:02:58.528
&gt;&gt; Scott Moss: I don't know why

47
00:02:58.528 --> 00:03:00.862
I keep forgetting the name of
that function Content, okay.

48
00:03:00.862 --> 00:03:05.738
Constant fetcher, we can just make
it inline generic right here.

49
00:03:05.738 --> 00:03:08.084
We'll do that in a second.

50
00:03:08.084 --> 00:03:11.179
Query, if not, data.

51
00:03:15.314 --> 00:03:16.505
&gt;&gt; Scott Moss: And throw error.

52
00:03:21.136 --> 00:03:24.804
&gt;&gt; Scott Moss: And then return the data.

53
00:03:24.804 --> 00:03:26.208
And then, as far as for the types,

54
00:03:26.208 --> 00:03:28.734
I'll just put them right here
because it's such a small one.

55
00:03:28.734 --> 00:03:32.121
This will just be this thing,

56
00:03:32.121 --> 00:03:36.455
which is an object, which has items,

57
00:03:36.455 --> 00:03:42.155
which is an array of objects,
and that has a slug.

58
00:03:42.155 --> 00:03:43.820
That's a straight.

59
00:03:43.820 --> 00:03:46.247
Okay, so now we got that.

60
00:03:46.247 --> 00:03:51.585
We can use this inside of our page.

61
00:03:51.585 --> 00:03:56.182
And we can just say, data = await,

62
00:03:56.182 --> 00:04:02.928
we're gonna call this,
await getSlugsForPosts,

63
00:04:02.928 --> 00:04:07.541
it doesn't take in any arguments.

64
00:04:07.541 --> 00:04:11.494
And we're just gonna return
&gt;&gt; Scott Moss: An array.

65
00:04:11.494 --> 00:04:17.516
So data.customerPostCollection.items.map,

66
00:04:17.516 --> 00:04:22.165
I don't think we need a map because it's

67
00:04:22.165 --> 00:04:27.240
already an array with
a slug property on it.

68
00:04:27.240 --> 00:04:30.136
So that's all we need.

69
00:04:30.136 --> 00:04:35.222
Because we need to return back an array
of objects that have a slug property,

70
00:04:35.222 --> 00:04:37.690
and that's exactly what these are.

71
00:04:37.690 --> 00:04:39.458
They're an array of objects
with a slug property.

72
00:04:39.458 --> 00:04:42.060
So let's see if this actually works.

73
00:04:42.060 --> 00:04:48.841
What we wanna do is a npm run build,
and we'll see if this broke or not.

74
00:04:52.422 --> 00:04:55.201
&gt;&gt; Scott Moss: We'll know it worked cuz
it'll tell us it generated a route with

75
00:04:55.201 --> 00:04:56.312
that name, okay.

76
00:04:56.312 --> 00:04:58.853
You got to turn off
the title of your bears,

77
00:04:58.853 --> 00:05:01.193
I'm not fixing all that type of stuff.

78
00:05:01.193 --> 00:05:03.940
[LAUGH] If you go to the next config.

79
00:05:03.940 --> 00:05:05.324
[INAUDIBLE].

80
00:05:05.324 --> 00:05:11.089
&gt;&gt; Scott Moss: Yeah, you type in
typescripts and you say, Ignore.

81
00:05:11.089 --> 00:05:12.654
Just go away.

82
00:05:12.654 --> 00:05:16.587
Or, ignore builder errors.

83
00:05:16.587 --> 00:05:18.869
True, there you go.

84
00:05:23.485 --> 00:05:24.450
&gt;&gt; Scott Moss: So let's see.

85
00:05:29.044 --> 00:05:32.456
&gt;&gt; Scott Moss: All right,
so you can see right there,

86
00:05:32.456 --> 00:05:35.462
it did indeed build that page out.

87
00:05:35.462 --> 00:05:37.587
It got the route for
it and it built it out.

88
00:05:37.587 --> 00:05:40.873
So if we had more there, you would see
that those were built out as well.

