WEBVTT

1
00:00:00.000 --> 00:00:04.048
Next, we're gonna talk about some design
patterns when it comes to components that

2
00:00:04.048 --> 00:00:05.426
are really useful at scale.

3
00:00:05.426 --> 00:00:09.614
And the first of which is
the vendor components wrapper.

4
00:00:09.614 --> 00:00:14.266
So here we have a simple component that's
using these Font Awesome icons from

5
00:00:14.266 --> 00:00:16.423
the Font Awesome library, right?

6
00:00:16.423 --> 00:00:20.635
We have water, earth, fire, and air.

7
00:00:20.635 --> 00:00:23.071
And usually I do this in person,
because someone's chuckling, and

8
00:00:23.071 --> 00:00:24.459
they recognize the Avatar reference.

9
00:00:24.459 --> 00:00:28.938
And if you do,
I'm glad to meet fellow Avatar fans.

10
00:00:28.938 --> 00:00:32.643
But, so anyways, we have these icons here.

11
00:00:32.643 --> 00:00:36.077
And the problem is, though,
you can imagine though,

12
00:00:36.077 --> 00:00:40.350
as you go through the various,
as you go through your application?

13
00:00:40.350 --> 00:00:44.364
The problem is, when you're using these
Font Awesome icons throughout your app,

14
00:00:44.364 --> 00:00:47.129
you're thinking,
I'm reusing it, it's great.

15
00:00:47.129 --> 00:00:50.632
The problem is, what happens when
you actually need to refactor these.

16
00:00:50.632 --> 00:00:52.598
And it's this scary moment because,
it's not even just refactor, right?

17
00:00:52.598 --> 00:00:56.857
Because if it was as simple as swap
out Font Awesome for something,

18
00:00:56.857 --> 00:00:58.157
it'd be one thing.

19
00:00:58.157 --> 00:01:01.686
But I think we all know that when it comes
to design, the requirements are rarely so

20
00:01:01.686 --> 00:01:02.468
black and white.

21
00:01:02.468 --> 00:01:06.730
Sometimes you might need to import,
for example, your own custom icon.

22
00:01:06.730 --> 00:01:10.062
And you might actually need,
maybe you wanna swap it out for material.

23
00:01:10.062 --> 00:01:14.144
And so if you have a large app,
somebody swapping Font Awesome icons for

24
00:01:14.144 --> 00:01:17.624
material icons would be a huge,
that PR would be monstrous.

25
00:01:17.624 --> 00:01:21.571
And you'd have to be really
careful about how you handle that.

26
00:01:21.571 --> 00:01:24.901
Well, that's why going forward,
we represent basically,

27
00:01:24.901 --> 00:01:29.575
when you're using vendor, of course
components, right, something that's coming

28
00:01:29.575 --> 00:01:33.116
from a third party, always wrap
it inside of your own component.

29
00:01:33.116 --> 00:01:36.622
So even though Font Awesome in that
example, right, had its own API for

30
00:01:36.622 --> 00:01:38.617
how Font Awesome works, that's fine.

31
00:01:38.617 --> 00:01:43.742
But inside of your application, in this
case, you should be using a BaseIcon.vue.

32
00:01:43.742 --> 00:01:46.555
And then that will go ahead, and
then you can then toggle, right?

33
00:01:46.555 --> 00:01:50.356
You can do that, okay, either in this
case, we wanna manually define that if

34
00:01:50.356 --> 00:01:54.389
the source is Font Awesome, then we'll
use the Font Awesome icon component, and

35
00:01:54.389 --> 00:01:57.501
we'll pass in the name,
just like you normally would expect.

36
00:01:57.501 --> 00:02:02.229
On the other hand, by default,
by default, what we'd really want is

37
00:02:02.229 --> 00:02:06.651
just to use our custom icon that
the designer's provided for us.

38
00:02:06.651 --> 00:02:11.739
And so this is really critical, because
then, now going forward, if someone wants

39
00:02:11.739 --> 00:02:16.774
to add another library, it is as simple
as adding a v-if-else, or v-else-if.

40
00:02:16.774 --> 00:02:21.130
So v-else if source equals material
design, no problem, you're good to go.

41
00:02:21.130 --> 00:02:24.611
You don't need to reconfigure
everything in order to make this work.

42
00:02:24.611 --> 00:02:28.418
And vice versa if, in the future,
you need to upgrade or change anything.

43
00:02:28.418 --> 00:02:31.329
The changes become smaller in scope,
and so again,

44
00:02:31.329 --> 00:02:34.575
when we think about enterprise
production-grade apps,

45
00:02:34.575 --> 00:02:38.496
it's really about easing that
process of getting features through.

46
00:02:38.496 --> 00:02:39.633
And so as we all know,

47
00:02:39.633 --> 00:02:43.067
right, pull requests are a big
part of our code review process.

48
00:02:43.067 --> 00:02:46.730
So the easier you can make code reviews,
the faster things go through.

49
00:02:46.730 --> 00:02:50.207
And vendor wrapper icons are one of those
ways to just shorten the code review

50
00:02:50.207 --> 00:02:52.937
process, and to focus on
the things that actually matter.

51
00:02:52.937 --> 00:02:57.978
Not whether 200 lines of replacing Font
Awesome icons actually broke anything,

52
00:02:57.978 --> 00:02:59.621
that would be terrifying.

53
00:02:59.621 --> 00:03:04.648
So the next design pattern that
is really worth mentioning

54
00:03:04.648 --> 00:03:09.478
is the transparent component
wrapper design pattern.

55
00:03:09.478 --> 00:03:13.815
And so you can imagine that, right,
over time, forms is one of the things that

56
00:03:13.815 --> 00:03:18.250
a lot of us have to build out, and a lot
of times, we need to customize the input.

57
00:03:18.250 --> 00:03:20.948
Native HTML just doesn't do the trick.

58
00:03:20.948 --> 00:03:24.816
And so in the BaseInput example,
we can see that we have this input, right,

59
00:03:24.816 --> 00:03:25.792
type="text".

60
00:03:25.792 --> 00:03:30.640
And what we've done is we did the v-bind
technique, where we're spreading out all

61
00:03:30.640 --> 00:03:34.749
of the attributes, right,
including all of the props onto our input.

62
00:03:34.749 --> 00:03:37.713
And we wanna listen to
all of the listeners, so

63
00:03:37.713 --> 00:03:40.832
that's why we do the v-on="$listeners".

64
00:03:40.832 --> 00:03:45.595
And so when you do this originally,
you would probably think that, okay, so

65
00:03:45.595 --> 00:03:49.112
if I call Base Input, and
I'm gonna pass it filterData,

66
00:03:49.112 --> 00:03:54.135
the label will be Filter results, and
the placeholder's gonna be Type in here.

67
00:03:54.135 --> 00:03:59.037
Your expectation is probably that, well,
obviously, I want this on the input,

68
00:03:59.037 --> 00:04:00.469
so they should go here.

69
00:04:00.469 --> 00:04:05.683
But by default,
it'll actually go onto the root element.

70
00:04:05.683 --> 00:04:07.888
So this is one of the restrictions
that came with Vue 2, right?

71
00:04:07.888 --> 00:04:09.998
Because at the time, it was basically,

72
00:04:09.998 --> 00:04:13.918
Vue couldn't tell where things were
going with multi-root components.

73
00:04:13.918 --> 00:04:19.162
And so basically, this is why, out of the
box, it always runs to the single root,

74
00:04:19.162 --> 00:04:22.355
the root node,
as far as BaseInput is concerned.

75
00:04:22.355 --> 00:04:23.993
Now, this is not what we want,

76
00:04:23.993 --> 00:04:27.029
right, because this'll
basically break what we need.

77
00:04:27.029 --> 00:04:30.769
And so what we actually need to do is,
inside of our script block,

78
00:04:30.769 --> 00:04:35.676
we actually need to define that we want to
disable basically attribute inheritance.

79
00:04:35.676 --> 00:04:39.161
And so you can see that inheritAttrs
on the bottom is equal to false.

80
00:04:39.161 --> 00:04:43.885
And when you do that, that will then
appropriately allow those v-binds to work

81
00:04:43.885 --> 00:04:48.904
in v-on correctly, and sort of reroute
everything to where you've defined it to.

82
00:04:48.904 --> 00:04:51.941
Otherwise, it's automatically
gonna go to that root div.

83
00:04:54.460 --> 00:04:58.132
So yep, so then they'll be passed
to the element instead, and

84
00:04:58.132 --> 00:05:02.847
as long as you prevent Vue from assigning
attributes to the top-level element,

85
00:05:02.847 --> 00:05:04.185
you will be good to go.

86
00:05:06.553 --> 00:05:10.183
Okay, now, the thing is, though,

87
00:05:10.183 --> 00:05:14.761
is that this syntax here
is specific to Vue 2.

88
00:05:14.761 --> 00:05:17.368
As we know, a lot of times,
when frameworks upgrade,

89
00:05:17.368 --> 00:05:20.331
sometimes things can get complicated,
things change a lot.

90
00:05:20.331 --> 00:05:24.411
But one of the core principles that Vue 3
tries to uphold is that we wanna take what

91
00:05:24.411 --> 00:05:27.720
we know people are doing a lot,
and we wanna make it even simpler.

92
00:05:27.720 --> 00:05:32.598
And so in this case, for Vue 3, going
forward, instead of having to do all that,

93
00:05:32.598 --> 00:05:36.351
props and attributes have
basically been fused together, and

94
00:05:36.351 --> 00:05:37.930
as well as the listeners.

95
00:05:37.930 --> 00:05:41.836
So all three of those things
are now under one attribute, so

96
00:05:41.836 --> 00:05:44.269
the attribute object, basically.

97
00:05:44.269 --> 00:05:48.098
And so in Vue 3, all you gotta do, as long
as you v-bind your attrs to this input,

98
00:05:48.098 --> 00:05:51.003
in this particular case,
everything will work as expected.

99
00:05:51.003 --> 00:05:55.253
So it simplifies the syntax, and there's
sort of less things for you to configure.

100
00:05:55.253 --> 00:05:57.684
Granted, if you need to break it up,
you can still break it up, right?

101
00:05:57.684 --> 00:06:00.763
Inside of attrs, there's still listeners,
there's still props, and

102
00:06:00.763 --> 00:06:02.164
you can break them up as you need.

103
00:06:02.164 --> 00:06:04.990
But the syntax is much simpler now.

