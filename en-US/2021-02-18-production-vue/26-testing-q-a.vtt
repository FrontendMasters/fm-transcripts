WEBVTT

1
00:00:00.160 --> 00:00:04.981
So the first question we have here
is that should we write a test for

2
00:00:04.981 --> 00:00:07.190
every bug that shows up?

3
00:00:07.190 --> 00:00:09.761
Generally speaking, right,
I think the easy answer would you say yes,

4
00:00:09.761 --> 00:00:10.490
of course, right.

5
00:00:10.490 --> 00:00:13.710
If it's a bug, then go ahead and
just write a test for it.

6
00:00:13.710 --> 00:00:17.724
But I think the thing that's important
right when we're talking about solutions

7
00:00:17.724 --> 00:00:21.564
that scale and not simply just patching
things with a band aid Is understanding

8
00:00:21.564 --> 00:00:24.644
really at the core, like,
what exactly is the bug entail, and

9
00:00:24.644 --> 00:00:27.600
figuring out what you're
actually trying to test.

10
00:00:27.600 --> 00:00:31.461
Because if you're simply trying to
patch like a UI bug, for example,

11
00:00:31.461 --> 00:00:35.782
that sort of leaves us at the risk of
basically exposed to like, if it's caused

12
00:00:35.782 --> 00:00:40.380
by a deeper rooted issue, then you're
basically testing the wrong thing.

13
00:00:40.380 --> 00:00:44.737
And so that's why I would basically
caution against immediately saying,

14
00:00:44.737 --> 00:00:49.164
just write the test for the thing that
broke and at least spending some time to

15
00:00:49.164 --> 00:00:53.732
do that investigation of like also
like especially with end-to-end tests,

16
00:00:53.732 --> 00:00:58.310
is this worth doing like,
is this worth adding to our build time?

17
00:00:58.310 --> 00:01:02.360
Because what you can do is like when you
have error monitoring tools like century

18
00:01:02.360 --> 00:01:05.805
for example, you can allow it to then
sort of at least track things so

19
00:01:05.805 --> 00:01:09.855
that if certain things really recur that
often that you then can not like collect

20
00:01:09.855 --> 00:01:12.573
those error reports and
basically write the tests for

21
00:01:12.573 --> 00:01:16.563
something that happened that often,
but at the same time, it's that buggy,

22
00:01:16.563 --> 00:01:20.140
then probably we need to figure
out like what caused it.

23
00:01:20.140 --> 00:01:24.908
And so what I'm trying to say here is
that when it comes to writing tests,

24
00:01:24.908 --> 00:01:30.222
you really have to weigh the pros and cons
of what it'll do to the build pipeline,

25
00:01:30.222 --> 00:01:35.146
because I don't know about you all, but
I've been in plenty of apps where I

26
00:01:35.146 --> 00:01:39.056
submitted my pull requests and
it took like 30 minutes for

27
00:01:39.056 --> 00:01:43.800
the test to run, for me to know if
like my PR is even valid or not.

28
00:01:43.800 --> 00:01:46.410
And so when you have tasks that takes so
long to run,

29
00:01:46.410 --> 00:01:50.544
you basically start to build distrust
between the developers and test because we

30
00:01:50.544 --> 00:01:54.491
all know that especially at the end of
the day when it comes to integrating test

31
00:01:54.491 --> 00:01:58.621
into our continuous integration pipeline,
that if it takes a long time to load,

32
00:01:58.621 --> 00:02:01.957
and then you find out that,
by the way, we need this hot fix,

33
00:02:01.957 --> 00:02:06.060
developers will skip that test
immediately and then just like ship.

34
00:02:06.060 --> 00:02:07.569
Because the idea is that
you're hoping that,

35
00:02:07.569 --> 00:02:08.850
that will be the thing that will fix it.

36
00:02:08.850 --> 00:02:14.200
And then at that point, you have
bypassed the value of those tests.

37
00:02:14.200 --> 00:02:18.524
And so this is why when it comes to
choosing what tests are right, speed is of

38
00:02:18.524 --> 00:02:22.851
utmost importance as far as like making
sure that they still run quickly and

39
00:02:22.851 --> 00:02:28.360
that the time spent, like making those
tests work is still valuable to the team.

40
00:02:28.360 --> 00:02:31.795
Because we have to remember too that like,
while there is a single

41
00:02:31.795 --> 00:02:36.043
bug that we're trying to fix, the impact
we have scales across the entire team,

42
00:02:36.043 --> 00:02:40.541
especially when we're talking production
grade, enterprise level application,

43
00:02:40.541 --> 00:02:42.414
this means you are clogging it up for

44
00:02:42.414 --> 00:02:45.870
however many ex developers that
are going to be using this.

45
00:02:45.870 --> 00:02:50.893
So if we realize our impacts right of what
we're doing, then we can be more basically

46
00:02:50.893 --> 00:02:56.620
like intentional about where we're trying
like how our efforts are best put forth.

47
00:02:56.620 --> 00:03:00.278
So the question here is around the sort
of a lot of departments have, we have

48
00:03:00.278 --> 00:03:04.640
automated tests, right that developers
write and then we have manual testers.

49
00:03:04.640 --> 00:03:10.047
And so if we assume that we've written
that 20% credo effect where we're covering

50
00:03:10.047 --> 00:03:15.619
the key 80% that we want to focus on, like
where might manual testers fall into that?

51
00:03:15.619 --> 00:03:20.575
And so in my experience manual testers
are really good at thinking of things

52
00:03:20.575 --> 00:03:23.660
that pushing the edge cases on things.

53
00:03:23.660 --> 00:03:28.025
And so those are sometimes things like
if you have like an entry field for

54
00:03:28.025 --> 00:03:31.883
the dollar amount that you're
depositing into a payment app,

55
00:03:31.883 --> 00:03:36.150
that they actually try to do things
like add special characters.

56
00:03:36.150 --> 00:03:40.230
They're trying to break it by
going to negative numbers and

57
00:03:40.230 --> 00:03:42.190
seeing what they can do.

58
00:03:42.190 --> 00:03:46.331
And so in some ways, I would say that
the value for the manual testers is almost

59
00:03:46.331 --> 00:03:50.282
like if you haven't heard like chaos
engineering, their goal is to try to

60
00:03:50.282 --> 00:03:54.934
figure out ways to break it, right, like
outsmart the developers in scenarios that,

61
00:03:54.934 --> 00:03:58.853
to be honest, most people will probably
try to do and does it still work?

62
00:03:58.853 --> 00:04:02.015
So for example, if all you're
relying on on the front end is

63
00:04:02.015 --> 00:04:05.559
to disable a button is let's say
a simple disabled attribute, but

64
00:04:05.559 --> 00:04:09.470
you don't do any back end
validation to submit that form.

65
00:04:09.470 --> 00:04:11.451
Like the manual testers
are the ones who are gonna,

66
00:04:11.451 --> 00:04:14.170
this is where like the technical
competency comes into play.

67
00:04:14.170 --> 00:04:17.305
They'll go in and I'm sure some of you
have done this as a web developers,

68
00:04:17.305 --> 00:04:20.900
go into the source code, disable that and
still try to submit it through.

69
00:04:20.900 --> 00:04:23.840
And sometimes that is that is helpful
because we know that the form

70
00:04:23.840 --> 00:04:27.720
is working and it's just someone didn't
like enable the button correctly.

71
00:04:27.720 --> 00:04:32.049
But these are like sort of the flaws that
like manual testers and sort of think of

72
00:04:32.049 --> 00:04:36.135
when it comes to pushing the boundaries
on what our tests might not cover.

73
00:04:36.135 --> 00:04:39.030
And in these cases we might
not think of as developers.

