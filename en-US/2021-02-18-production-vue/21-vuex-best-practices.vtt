WEBVTT

1
00:00:00.210 --> 00:00:04.489
Let's talk a bit about state management,
so again, for those who are newer to view,

2
00:00:04.489 --> 00:00:06.940
the official state
management library is Vuex.

3
00:00:06.940 --> 00:00:09.880
Think of it like the Redux pattern,
where you're

4
00:00:09.880 --> 00:00:14.710
able to define the you have your state and
then we have getters mutation actions and

5
00:00:14.710 --> 00:00:18.190
basically a standard for
how to update global state.

6
00:00:18.190 --> 00:00:21.980
And this was basically the convention for
most of you to apps in the past.

7
00:00:24.680 --> 00:00:28.215
So the first question most people will
ask when it comes to Vuex is what data

8
00:00:28.215 --> 00:00:29.710
should actually go into Vuex?

9
00:00:29.710 --> 00:00:32.978
Because now that you have this shared
global state, it's easy to just put

10
00:00:32.978 --> 00:00:36.830
everything in there because then you
can kind of access it from anywhere.

11
00:00:36.830 --> 00:00:41.039
But in reality, we want to try to
encapsulate things as closely scaled as

12
00:00:41.039 --> 00:00:45.524
possible and keep the global store as
basically as simple as humanly possible

13
00:00:45.524 --> 00:00:49.390
since we don't want everything
just polluting the global space.

14
00:00:50.940 --> 00:00:54.468
And so examples of this include
things that you want to keep between

15
00:00:54.468 --> 00:00:55.290
router views.

16
00:00:55.290 --> 00:00:58.746
And so as you move from path to path,
there may be certain data you

17
00:00:58.746 --> 00:01:02.820
want to track regarding user
preferences and those sort of things.

18
00:01:02.820 --> 00:01:05.975
Those are great examples,
something that should be global and for

19
00:01:05.975 --> 00:01:09.580
example to the first point when you
have components that don't share data,

20
00:01:09.580 --> 00:01:13.120
that don't have that direct
parent child relation.

21
00:01:13.120 --> 00:01:16.879
This can also be a great example of
when the US could be a good example but

22
00:01:16.879 --> 00:01:19.429
certainly as we saw the composition API,
now,

23
00:01:19.429 --> 00:01:24.240
it might be better to actually refactor
that and just make that a shared module.

24
00:01:24.240 --> 00:01:26.368
But, we will go into the pros and
cons later,

25
00:01:26.368 --> 00:01:29.350
about why that's not necessarily
like the way to do it.

26
00:01:29.350 --> 00:01:32.367
But these are the basic principles,
that go into, whether or

27
00:01:32.367 --> 00:01:34.000
not something should be in Vuex.

28
00:01:35.430 --> 00:01:39.272
Now, the other thing to note about
keeping data between your router views,

29
00:01:39.272 --> 00:01:43.294
is in the example here we have is that you
have a list of records fetch from an API,

30
00:01:43.294 --> 00:01:47.280
is that while you might track what
the users search for, for example, right?

31
00:01:47.280 --> 00:01:50.957
Like user search equals this,
it's still really important to still keep

32
00:01:50.957 --> 00:01:54.932
the route params updated inside of your
app, architecturally speaking as like

33
00:01:54.932 --> 00:01:57.919
the global source of truth,
rather than the global store.

34
00:01:57.919 --> 00:02:00.457
Because this gives you two
benefits as far as one,

35
00:02:00.457 --> 00:02:03.965
ensuring a consistency as far as
user experience when they search for

36
00:02:03.965 --> 00:02:07.050
something they actually
have the parameters update.

37
00:02:07.050 --> 00:02:10.294
And that parameter is what serves as
the source of truth for what happens but

38
00:02:10.294 --> 00:02:13.746
if you need additional information that
goes beyond simply route params view,

39
00:02:13.746 --> 00:02:15.565
it can certainly be a good place to start.

40
00:02:17.340 --> 00:02:21.657
And so any sort of global state as we
mentioned regarding like login status,

41
00:02:21.657 --> 00:02:25.637
you know, the user information or
any sort of global notifications,

42
00:02:25.637 --> 00:02:28.760
absolutely Vuex is a great case for it.

43
00:02:28.760 --> 00:02:31.466
And what boils down to it
right is that if you think

44
00:02:31.466 --> 00:02:35.162
that it will make managing the state
simpler global state is a great

45
00:02:35.162 --> 00:02:38.080
way to sorta have that escape
hatch to share things.

46
00:02:40.690 --> 00:02:42.675
Now, what to avoid putting in Vuex, right?

47
00:02:42.675 --> 00:02:45.935
Because that that was some unlike
the generic principles and so

48
00:02:45.935 --> 00:02:49.270
user interface variables are things
that we wanna try to avoid.

49
00:02:49.270 --> 00:02:52.156
So when you're tracking whether or
not the drop down is open,

50
00:02:52.156 --> 00:02:55.154
unless this drop down impacts
the entire application somehow,

51
00:02:55.154 --> 00:02:58.927
it's best to keep it scoped directly to
that component that will then have its own

52
00:02:58.927 --> 00:03:02.560
internal state regarding whether
the drop down is open or not.

53
00:03:02.560 --> 00:03:07.079
And so again, things like his input focus
is most visible, these are all things that

54
00:03:07.079 --> 00:03:10.467
really should be contained to
the component for the most part.

55
00:03:10.467 --> 00:03:15.048
There are as always, there are exception
form data validation results all of these

56
00:03:15.048 --> 00:03:18.610
are also good examples of keeping
it encapsulated to the form.

57
00:03:18.610 --> 00:03:22.605
If you have a credit card payment form,
keep all the stuff in there don't pollute

58
00:03:22.605 --> 00:03:26.662
the global namespace especially if it
doesn't need to be shared, especially for

59
00:03:26.662 --> 00:03:31.420
things like forums, which honestly
are usually localized to that one piece.

60
00:03:31.420 --> 00:03:34.748
And so if you're like,
well I have multiple pages on my form,

61
00:03:34.748 --> 00:03:37.441
I need to know like the result
between all of them.

62
00:03:37.441 --> 00:03:41.053
Then now it'd be a great example of
creating a parent form that then like

63
00:03:41.053 --> 00:03:43.472
controls how all like
the individual pages go.

64
00:03:43.472 --> 00:03:47.714
Instead of like creating multiple forms
that talk to the global store and

65
00:03:47.714 --> 00:03:52.248
then shoot everything down, so
another architecture pattern to consider.

66
00:03:52.248 --> 00:03:55.906
And so a lot of times see when
we're pulling stuff from APIs,

67
00:03:55.906 --> 00:04:00.284
it might be tempting to store single
records from the API in there because

68
00:04:00.284 --> 00:04:02.536
the user favorited it or something.

69
00:04:02.536 --> 00:04:07.395
But often times when you have this sort of
things you generally again still trying

70
00:04:07.395 --> 00:04:09.397
to keep it within the component,

71
00:04:09.397 --> 00:04:13.973
only when there's some sort of global
impact regarding a user preference to

72
00:04:13.973 --> 00:04:17.070
those things then we then
go into the global state.

73
00:04:19.740 --> 00:04:23.979
And so this is a question that actually
I've seen this in a number of code bases

74
00:04:23.979 --> 00:04:26.131
where there's this question of like,

75
00:04:26.131 --> 00:04:29.610
do I always need a getter in order
to return a fragment of state?

76
00:04:30.850 --> 00:04:35.042
And the short answer is no, really,
when you're thinking of Vuex getters,

77
00:04:35.042 --> 00:04:38.860
you should really think of
them as computed properties.

78
00:04:38.860 --> 00:04:42.760
And so when you actually need to
access the state of your Vuex,

79
00:04:42.760 --> 00:04:45.460
basically store you can do that directly.

80
00:04:45.460 --> 00:04:49.064
There's like people I've seen people
write getters to get states but

81
00:04:49.064 --> 00:04:52.180
if you're not doing any sort
of compensation computation,

82
00:04:52.180 --> 00:04:53.842
you sort of it's a redundancy.

83
00:04:53.842 --> 00:04:57.702
And actually again, if you can access
it directly just like you wouldn't

84
00:04:57.702 --> 00:05:00.690
create a computed property
to access something in data,

85
00:05:00.690 --> 00:05:04.320
you create a computed property
to run calculations on data.

86
00:05:04.320 --> 00:05:07.416
Similarly, this is how you need to think
of getters as well, if you're not running

87
00:05:07.416 --> 00:05:10.808
a calculation on something, you don't need
to getter, just access the state directly.

88
00:05:10.808 --> 00:05:15.713
And yes, okay, so we just covered
this regarding derived Vuex state so

89
00:05:15.713 --> 00:05:20.235
as far as derived Vuex state to
give you a little bit more context.

90
00:05:20.235 --> 00:05:25.076
If you're storing, like the response
from an API and you have a list,

91
00:05:25.076 --> 00:05:27.948
and for example, like within this list,

92
00:05:27.948 --> 00:05:32.214
we only want to filter down
the items that the user favorited,

93
00:05:32.214 --> 00:05:37.249
because every object for example,
has an attribute of favorited true.

94
00:05:37.249 --> 00:05:41.948
Then this would be a good example
of where you would go like getters

95
00:05:41.948 --> 00:05:47.000
where it's like API, favorite API lists or
favorite items list.

96
00:05:47.000 --> 00:05:50.500
And that would be computed based off
the state of your entire like record list.

97
00:05:50.500 --> 00:05:54.901
And that would be a great example of how
you should use getters to make maintenance

98
00:05:54.901 --> 00:05:56.790
easier across your application.

99
00:05:59.140 --> 00:06:04.594
As far as the tip goes, when it comes
to using Vuex I strongly recommend

100
00:06:04.594 --> 00:06:10.120
avoiding the calling of mutations
directly in your components.

101
00:06:10.120 --> 00:06:14.180
And so this is a little bit of a debate as
well and a controversy between or night,

102
00:06:14.180 --> 00:06:15.950
I wouldn't call it controversy.

103
00:06:15.950 --> 00:06:19.049
It's just there's certainly a debate,
because a lot of times one of

104
00:06:19.049 --> 00:06:21.774
the big criticisms of Vuex and
the standard Redux pattern for

105
00:06:21.774 --> 00:06:25.480
that matter is when you have mutations
which actually update the store directly.

106
00:06:25.480 --> 00:06:29.842
And then you have these actions,
the writing an action in order to commit

107
00:06:29.842 --> 00:06:34.060
a mutation, especially when it's so
one to one like this can feel very

108
00:06:34.060 --> 00:06:38.010
boilerplate and so a lot of times
we don't wanna do that, right?

109
00:06:38.010 --> 00:06:41.450
We just wanna increment count, we don't
wanna have to write an action that's

110
00:06:41.450 --> 00:06:45.030
called add change amount to count in
order to commit an increment count.

111
00:06:45.030 --> 00:06:50.140
It seems like a lot of boilerplate but the
reason why I would recommend avoiding it,

112
00:06:50.140 --> 00:06:55.177
as much as humanly possible is because
going especially as Vuex begins to update,

113
00:06:55.177 --> 00:06:58.250
there is already talks in Vuex 5,
for instance.

114
00:06:58.250 --> 00:07:01.059
And so
actually let me back up a little bit,

115
00:07:01.059 --> 00:07:04.960
currently we are on Vuex 5,
4, view 2 and so for view 3,

116
00:07:04.960 --> 00:07:10.290
they are porting over the existing
Vuex functionality into the Vuex 4.

117
00:07:10.290 --> 00:07:14.720
And then, Vuex 5 is going to be
basically and evolution on the standard,

118
00:07:14.720 --> 00:07:18.980
once Vuex as it stands,
is stable in the view 3 ecosystem.

119
00:07:18.980 --> 00:07:22.056
And so, in view 5 and
some of the ideas being explored,

120
00:07:22.056 --> 00:07:26.116
really is that We might actually be
able to detect when you actually want to

121
00:07:26.116 --> 00:07:29.580
do mutations without having
to write everything.

122
00:07:29.580 --> 00:07:32.303
And so what this means is you
can just call your actions and

123
00:07:32.303 --> 00:07:33.838
then basically programmatic,

124
00:07:33.838 --> 00:07:38.080
like the algorithm will know which things
you're trying to mutate in the state.

125
00:07:38.080 --> 00:07:41.542
You don't and so basically like, you can
imagine that mutations are just gonna but

126
00:07:41.542 --> 00:07:44.970
they're going to disappear and so that's
the idea that we're working towards.

127
00:07:44.970 --> 00:07:48.227
And so if it turns to like patterns
going forward in the long term,

128
00:07:48.227 --> 00:07:52.081
even though it's a little bit more
boilerplate, the fact that mutations has

129
00:07:52.081 --> 00:07:56.000
like there's again the ideas are being
discussed of like going away.

130
00:07:56.000 --> 00:08:00.226
This means that you will have one less
refactoring to do as you start to upgrade

131
00:08:00.226 --> 00:08:04.010
your application like
the migration path is much simpler.

132
00:08:04.010 --> 00:08:07.045
And more importantly when
it comes to using actions,

133
00:08:07.045 --> 00:08:11.040
it does allow people to easily
enhance like that functionality.

134
00:08:11.040 --> 00:08:13.927
So while it might seem like a one
to one like mutation at one point,

135
00:08:13.927 --> 00:08:17.395
allow keeping it in an action allows
other developers when they're working on

136
00:08:17.395 --> 00:08:19.563
the same feature to then go ahead and
enhance it.

137
00:08:19.563 --> 00:08:23.344
Because, as we all know, when we're
working on enterprise level applications,

138
00:08:23.344 --> 00:08:26.638
you never know which piece of
the application you're gonna be working on

139
00:08:26.638 --> 00:08:30.270
before you move on to something else and
someone else has to take over.

140
00:08:30.270 --> 00:08:33.485
So in another way, this is just like,
in some ways, like a courtesy to

141
00:08:33.485 --> 00:08:37.202
future developers that hey, I know that
right now this is only doing a mutation.

142
00:08:37.202 --> 00:08:40.682
But if in the future like you need to
do anything piece of cake, I'm already

143
00:08:40.682 --> 00:08:44.840
calling the action in these places,
you can just enhance it as you see fit.

144
00:08:44.840 --> 00:08:48.338
In this regard, this is similar to the dot
view files where I was saying keep all

145
00:08:48.338 --> 00:08:50.460
your HTML in the single file components.

146
00:08:50.460 --> 00:08:54.925
Because when you actually need the CSS
when you need j s, it's as simple as

147
00:08:54.925 --> 00:08:58.957
adding it to the view file rather
than having to create new files and

148
00:08:58.957 --> 00:09:01.370
reconfigure everything.

149
00:09:01.370 --> 00:09:07.490
That said, in case you don't know, Vuex
also has a bunch of built in map helpers.

150
00:09:07.490 --> 00:09:11.218
And so the pro tip here is to use it but
being consistent with what I just

151
00:09:11.218 --> 00:09:15.526
told you, I'd like to particularly avoid
mutations if you need to call them and

152
00:09:15.526 --> 00:09:18.370
so the reason for this is you'll see that.

153
00:09:18.370 --> 00:09:20.207
What map helpers allow you to do,

154
00:09:20.207 --> 00:09:24.469
basically at a high level is it allows you
to take stuff from your Vuex store and

155
00:09:24.469 --> 00:09:27.310
then sort of rename it so
that it's easier to call.

156
00:09:27.310 --> 00:09:31.265
So rather than having to call like
this.state.user.name, it would just

157
00:09:31.265 --> 00:09:35.115
be this.username, that's like
an example called map state helps you.

158
00:09:35.115 --> 00:09:39.130
And then similarly, the map getters
instead of now having to access

159
00:09:39.130 --> 00:09:44.480
this.store.state.activeusers list
is just this.active users list.

160
00:09:44.480 --> 00:09:48.642
Now, the reason why, so you can see
there's the methods down there that allows

161
00:09:48.642 --> 00:09:52.410
you to then call the action
as you would a normal method.

162
00:09:52.410 --> 00:09:56.247
But the problem is the reason why I'm
saying to avoid using mutations inside of

163
00:09:56.247 --> 00:10:00.375
the map mutations, like let's say you have
a really strong use case for mutations,

164
00:10:00.375 --> 00:10:03.490
I believe there is an argument for
that out there.

165
00:10:03.490 --> 00:10:07.962
The reason why I'm saying not to actually
use map mutations is because you want to

166
00:10:07.962 --> 00:10:12.780
be as explicit as humanly possible that
you are mutating the global store.

167
00:10:12.780 --> 00:10:16.979
And so being verbose with the
this.stored.state.commit like that whole

168
00:10:16.979 --> 00:10:21.242
thing is like it's basically what I'm
trying to say is it's valuable to make

169
00:10:21.242 --> 00:10:22.763
that clear to developers.

170
00:10:22.763 --> 00:10:27.421
That this thing that you're either you're
changing or updating this thing is

171
00:10:27.421 --> 00:10:32.081
changing the global state, which means
the side effects are basically like,

172
00:10:32.081 --> 00:10:35.490
you have no like there
are loads that can happen.

173
00:10:35.490 --> 00:10:39.119
And so in that regard, that's why I
think not mutations has in that regard,

174
00:10:39.119 --> 00:10:41.331
I would recommend avoiding it and
then again,

175
00:10:41.331 --> 00:10:44.129
if you really need to mutate
please just call it directly.

176
00:10:46.770 --> 00:10:50.722
Okay and
then as far as the global state goes,

177
00:10:50.722 --> 00:10:57.150
in case you didn't know Vuex also
allows you to do namespace modules.

178
00:10:57.150 --> 00:11:00.287
So rather than keeping everything
enclosed in a single like global state,

179
00:11:00.287 --> 00:11:02.075
you can be like, okay,
there is a state and

180
00:11:02.075 --> 00:11:05.370
there's a module in here that's
like tracking the shopping cart.

181
00:11:05.370 --> 00:11:09.442
And that way shopping cart has its own
state getters, actions and mutations and

182
00:11:09.442 --> 00:11:13.770
then we have another one for to do list,
which has its own global state.

183
00:11:13.770 --> 00:11:17.086
And so generally speaking, when it
comes to enterprise level applications,

184
00:11:17.086 --> 00:11:19.549
even when you're just starting out,
don't even wait for

185
00:11:19.549 --> 00:11:22.970
the data on this particular one,
just enable namespace modules.

186
00:11:22.970 --> 00:11:27.121
And so we've covered a lot of different
techniques here and so the reason I'm not

187
00:11:27.121 --> 00:11:30.737
going to that is because If you
haven't checked it out already Divya.

188
00:11:30.737 --> 00:11:34.714
She has a great Vuex workshop here on
front end masters that I highly recommend

189
00:11:34.714 --> 00:11:35.860
checking out.

190
00:11:35.860 --> 00:11:39.859
So in there she'll go into much more depth
regarding some of those best practices and

191
00:11:39.859 --> 00:11:41.960
how a lot of those things work.

192
00:11:41.960 --> 00:11:46.989
So definitely refer to a workshop for
more information Okay,

193
00:11:46.989 --> 00:11:50.948
so this is something that comes
up with every Vuex discussion now

194
00:11:50.948 --> 00:11:53.601
that we have you three is composition API.

195
00:11:53.601 --> 00:11:57.309
And a lot of people are basically
asking like do we even need Vuex?

196
00:11:57.309 --> 00:12:01.176
[COUGH] After all if you can compose your
functions in a way that allow you to share

197
00:12:01.176 --> 00:12:05.336
reactive state, I mean there's nothing
stopping you from creating basically your

198
00:12:05.336 --> 00:12:06.568
own globalstate.js and

199
00:12:06.568 --> 00:12:10.090
then just inject like basically
like importing it everywhere.

200
00:12:10.090 --> 00:12:14.892
And this is this is true, which is one of
the reasons why as far as like sharing

201
00:12:14.892 --> 00:12:19.698
function like sharing reactive state,
there's nothing stopping you from

202
00:12:19.698 --> 00:12:23.670
using composition API and
replacing Vuex as a whole.

203
00:12:23.670 --> 00:12:28.165
But whenever someone is sort of we're
thinking of tooling, we have to remember

204
00:12:28.165 --> 00:12:32.880
that it's more than just like the the
sheer mechanics of what is happening.

205
00:12:32.880 --> 00:12:37.034
So I think the best analogy here is with
view router now that you understand about

206
00:12:37.034 --> 00:12:41.002
like dynamically switching out
components with composite the component,

207
00:12:41.002 --> 00:12:43.744
the component component Man,
that's an awful.

208
00:12:43.744 --> 00:12:47.398
That doesn't mean that immediately
you would go out like view router

209
00:12:47.398 --> 00:12:51.619
is still useful because while the core
mechanics of switching components out is

210
00:12:51.619 --> 00:12:54.710
still ultimate just a component,
component component.

211
00:12:56.160 --> 00:13:00.354
Vuex provides a lot of things that
help us debug things and that's well,

212
00:13:00.354 --> 00:13:04.753
I think we have to remember when it comes
to the importance of the tools that we

213
00:13:04.753 --> 00:13:09.190
select and how it impacts our scale
at impacts our apps at scale.

214
00:13:09.190 --> 00:13:13.414
And so while composition API is great for
sharing things, as we probably saw it

215
00:13:13.414 --> 00:13:18.410
doesn't have the built in experience that
Vuex provides in terms of debug ability.

216
00:13:18.410 --> 00:13:21.955
So as for those who have used like
the view dev tools, this means that like,

217
00:13:21.955 --> 00:13:25.839
time traveling, watching state, seeing
what payload it is, all of that, which

218
00:13:25.839 --> 00:13:29.761
especially if we think about global state,
is actually a really critical thing.

219
00:13:29.761 --> 00:13:34.189
Because you can imagine that if something
does break in your global state,

220
00:13:34.189 --> 00:13:38.827
having that level of tooling to be able
to see and like inspect all the different

221
00:13:38.827 --> 00:13:43.110
events that lead up to something
breaking is to me like that is worth it.

222
00:13:43.110 --> 00:13:46.631
That's basically like that is I mean
that is our value as developers,

223
00:13:46.631 --> 00:13:50.270
right is that when things we build new
things and then when things break,

224
00:13:50.270 --> 00:13:51.540
we can fix them and so on.

225
00:13:52.570 --> 00:13:57.679
In that regard, I would say that yes,
composition API does help, like alleviate

226
00:13:57.679 --> 00:14:02.610
a lot of these sort of needs for like
what originally Vuex was designed for.

227
00:14:02.610 --> 00:14:06.404
But going forward especially with Vuex
five and things are rewritten like Vuex is

228
00:14:06.404 --> 00:14:09.467
going to be a lot of us will be
using composition API, as its core,

229
00:14:09.467 --> 00:14:12.690
just as view router did for
the component component.

230
00:14:12.690 --> 00:14:17.271
And so all the DX and time that the team
spends on that like that is just that's

231
00:14:17.271 --> 00:14:21.480
like free developer experience
enhancements for your team.

232
00:14:21.480 --> 00:14:25.262
And so I would say even though even when
you start using the composition API,

233
00:14:25.262 --> 00:14:29.046
still be careful to like, I think
the viewers conventions are still going to

234
00:14:29.046 --> 00:14:32.440
be very valuable to enterprise
grade applications as time goes on.

