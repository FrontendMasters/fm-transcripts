WEBVTT

1
00:00:00.280 --> 00:00:03.630
All right, this is it,
this is the final stretch.

2
00:00:03.630 --> 00:00:08.880
We're here and
I really want you to leave off with this

3
00:00:08.880 --> 00:00:14.132
workshop with three core
principles that really make

4
00:00:14.132 --> 00:00:19.042
up what production grade
apps basically entail.

5
00:00:21.122 --> 00:00:25.735
And so the first principle is
that we impact over intent, so

6
00:00:25.735 --> 00:00:30.351
this is related to our Pareto
principle from understanding

7
00:00:30.351 --> 00:00:34.780
what problem are we
actually trying to solve?

8
00:00:34.780 --> 00:00:38.469
And we've covered a lot of different
techniques, we've talked a lot about

9
00:00:38.469 --> 00:00:42.900
different areas of view application that
can impact and solve certain problems.

10
00:00:42.900 --> 00:00:46.657
But as you're looking at
production level applications,

11
00:00:46.657 --> 00:00:52.150
the key thing here is figuring out what
kind of problem you want or need to solve.

12
00:00:52.150 --> 00:00:54.944
And that should be what guides basically,

13
00:00:54.944 --> 00:01:00.360
the implementation or the things
you're researching and trying to do.

14
00:01:00.360 --> 00:01:05.241
So a lot of times, for example,
a great example of this is performance,

15
00:01:05.241 --> 00:01:09.130
performance is a buzzword
that a lot of people use.

16
00:01:09.130 --> 00:01:14.522
And so they will a lot of times go out of
their way to delete some lines of code or

17
00:01:14.522 --> 00:01:19.180
optimize the whitespace in a way
that feels productive, right?

18
00:01:19.180 --> 00:01:23.060
And the intent is good,
you want to ship smaller bundles.

19
00:01:23.060 --> 00:01:27.390
But at the end of the day, this is why
the impact is more important than intent,

20
00:01:27.390 --> 00:01:31.589
because what you really should be doing
is for something like performance,

21
00:01:31.589 --> 00:01:35.918
you should have a baseline metric as far
as ping times, actual delivery size,

22
00:01:35.918 --> 00:01:37.442
like ping to render times.

23
00:01:37.442 --> 00:01:40.328
You should have a baseline of metrics, and

24
00:01:40.328 --> 00:01:45.400
then figure out what can actually
shave off performance from that.

25
00:01:45.400 --> 00:01:49.426
Because otherwise, if you're simply just
doing things for the sake of it, right?

26
00:01:49.426 --> 00:01:53.640
For the sake of like, this feels like
we're improving performance because we've

27
00:01:53.640 --> 00:01:55.880
now prevented an import
on this one module.

28
00:01:55.880 --> 00:01:56.380
But guess what?

29
00:01:56.380 --> 00:02:00.597
As far as the ultimate impact, it doesn't
really do anything for performance,

30
00:02:00.597 --> 00:02:03.750
then we've spent time on the wrong piece.

31
00:02:03.750 --> 00:02:08.095
And so when it comes to this, the other
thing that to keep in mind is a lot of

32
00:02:08.095 --> 00:02:11.970
times in tech, we talk a lot
about the 10x developer, right?

33
00:02:11.970 --> 00:02:14.620
And everyone likes to say, this is a myth.

34
00:02:14.620 --> 00:02:18.338
And I think the key thing to remember
at the tech developer is not so

35
00:02:18.338 --> 00:02:21.109
much about you writing 10 times more code,
but

36
00:02:21.109 --> 00:02:24.240
really is about helping to
lift other developers up.

37
00:02:24.240 --> 00:02:29.190
So let like enabling 10 other developers
to work faster, this is I think where we

38
00:02:29.190 --> 00:02:33.280
need to shift this mentality and
why when it comes to conventions and

39
00:02:33.280 --> 00:02:37.720
enterprise great apps,
the key question here is scalability.

40
00:02:37.720 --> 00:02:42.757
Because if you can spend time to solve
a problem, that makes it easier for

41
00:02:42.757 --> 00:02:48.886
x number of developers to ship faster, you
have basically achieved that 10x effect.

42
00:02:48.886 --> 00:02:52.163
And this is why,
as we mature as engineers and

43
00:02:52.163 --> 00:02:56.479
understand how we can best
provide value to our clients, or

44
00:02:56.479 --> 00:03:00.920
whether to the company we're working for,
this is the key.

45
00:03:00.920 --> 00:03:05.378
It's understand what matters to them and
how we can best address those problems and

46
00:03:05.378 --> 00:03:08.200
make those things a reality faster.

47
00:03:08.200 --> 00:03:12.243
And, I've talked about this multiple
times and repeated it, but,

48
00:03:12.243 --> 00:03:17.010
I think this is worth emphasizing and
it's that context is everything.

49
00:03:17.010 --> 00:03:20.335
A lot of these proven patterns
we've talked about have caveats,

50
00:03:20.335 --> 00:03:25.210
there's a reason why basically everything
that we've talked about has pros and cons.

51
00:03:25.210 --> 00:03:28.934
Because, if there's anything I'd
want you all to take away from this,

52
00:03:28.934 --> 00:03:33.089
it's that ,when you're choosing the
technique and what you're trying to do,

53
00:03:33.089 --> 00:03:38.090
you need to understand why, and you don't
understand what you're dealing with.

54
00:03:38.090 --> 00:03:42.294
And so that is ultimately the the time
that we want to spend, so reading

55
00:03:42.294 --> 00:03:47.212
documentation as far as like, why certain
things were designed or how they work,

56
00:03:47.212 --> 00:03:52.202
and trying to figure out the caveats, can
be extremely useful in making the correct

57
00:03:52.202 --> 00:03:57.990
decision, that will then correlate to what
we talked about earlier as far as impact.

58
00:03:57.990 --> 00:04:02.530
Because if you can figure out for
example, a component design pattern that

59
00:04:02.530 --> 00:04:07.080
solves your company's problem in
a reusable way, that's gonna be huge.

60
00:04:07.080 --> 00:04:10.677
That's completely worth the time that
you would invest, but it's important for

61
00:04:10.677 --> 00:04:14.200
you to understand the context in
which you're making those decisions.

62
00:04:14.200 --> 00:04:18.914
So similarly for example, let's say
the props experiment that we did, right?

63
00:04:18.914 --> 00:04:22.944
Kind of tongue in cheek and
it's funny to see basically say that okay,

64
00:04:22.944 --> 00:04:28.150
if you have too many props just use slots,
and that's like a good rule of thumb.

65
00:04:28.150 --> 00:04:33.175
But, for example, if your company is
creating its own component library, for

66
00:04:33.175 --> 00:04:38.425
example, this rule sort of falls off the
wayside a little bit because, it doesn't

67
00:04:38.425 --> 00:04:43.300
necessarily mean that having a long
props dictionary is a bad thing, right?

68
00:04:43.300 --> 00:04:48.025
I talked about it for the most part,
it is, but there are context in which if

69
00:04:48.025 --> 00:04:52.825
they help to enforce standards in a way
that help your company move forward,

70
00:04:52.825 --> 00:04:57.925
then 100% break that rule and make
components complex with lots of different

71
00:04:57.925 --> 00:05:03.330
props, because you want to constrain them
to certain types and certain values.

72
00:05:03.330 --> 00:05:06.866
If you look at component libraries
like Vuetify for example,

73
00:05:06.866 --> 00:05:11.490
this is the reason why on their docks they
have a giant table of different props and

74
00:05:11.490 --> 00:05:15.366
different slots that you can access
because they need to allow you to

75
00:05:15.366 --> 00:05:20.194
customize things in a way that like still
follows Google design specs accordingly,

76
00:05:20.194 --> 00:05:24.370
but then allows you to escape
things in slots in a different way.

77
00:05:24.370 --> 00:05:27.552
And so knowing when to break
the rule is really critical to

78
00:05:27.552 --> 00:05:30.570
creating these production level apps.

79
00:05:30.570 --> 00:05:35.267
And I set it at the beginning, but
I wanna end on this principle is that,

80
00:05:35.267 --> 00:05:37.004
all code is compromised.

81
00:05:37.004 --> 00:05:40.832
And so keep that in mind as you
make decisions for your apps,

82
00:05:40.832 --> 00:05:45.110
use different techniques or
try different methodologies.

83
00:05:45.110 --> 00:05:48.285
And know that, even things that
seem like they're perfect,

84
00:05:48.285 --> 00:05:50.516
definitely have their drawbacks.

85
00:05:50.516 --> 00:05:53.746
And it's important to always
question it at this level, so

86
00:05:53.746 --> 00:05:58.216
that you can then make the best decision
for your team and company moving forward.

