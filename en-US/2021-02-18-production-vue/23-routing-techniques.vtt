WEBVTT

1
00:00:00.410 --> 00:00:04.348
So we're gonna talk about some best
practices and tools and tricks when it

2
00:00:04.348 --> 00:00:08.605
comes to routing, which is, as we know,
with any enterprise grade level app,

3
00:00:08.605 --> 00:00:12.558
we're gonna have different paths and
routing is a very big piece of this.

4
00:00:15.214 --> 00:00:19.484
So when it comes to the pieces that
make up routing, there are three sort

5
00:00:19.484 --> 00:00:23.771
of categories I'd like you to consider,
architecturally speaking.

6
00:00:23.771 --> 00:00:27.006
Earlier, we referred to
the View Components, right, and so

7
00:00:27.006 --> 00:00:30.242
this is where you have your Views
folder at the root level, and

8
00:00:30.242 --> 00:00:32.125
you define page level components.

9
00:00:32.125 --> 00:00:36.928
Examples of this include like Home,
About, Dashboard, these are the same

10
00:00:36.928 --> 00:00:41.370
components that we're going to use
to actually like map our route to.

11
00:00:41.370 --> 00:00:44.444
And this should never get any,
like this is basically the key thing,

12
00:00:44.444 --> 00:00:47.690
the key thing that makes them view
components, whoa, gosh, the view.

13
00:00:49.490 --> 00:00:53.954
The key thing that makes
them like V-I-E-W components

14
00:00:53.954 --> 00:00:56.656
is this coupling with the routes.

15
00:00:56.656 --> 00:00:59.415
If there are no routes associated
with a view component,

16
00:00:59.415 --> 00:01:03.220
then you probably should be including
them in the regular components folder.

17
00:01:03.220 --> 00:01:05.030
That's kind of where you
should be thinking about this.

18
00:01:06.650 --> 00:01:07.616
And then, in addition,

19
00:01:07.616 --> 00:01:10.654
this was actually brought up earlier
regarding presentational components.

20
00:01:10.654 --> 00:01:14.482
I actually also recommend creating
a layout components directory,

21
00:01:14.482 --> 00:01:18.640
cuz this is where you have some clear
examples of components that are shared

22
00:01:18.640 --> 00:01:21.560
between pages and
have sort of more global impacts.

23
00:01:21.560 --> 00:01:24.980
So whether that's like a header,
sidebar, these sort of things,

24
00:01:24.980 --> 00:01:28.820
these actually would probably make sense
as the layout components that will

25
00:01:28.820 --> 00:01:31.120
import into the view components.

26
00:01:31.120 --> 00:01:33.951
And, basically combine those
together to form our pages,

27
00:01:33.951 --> 00:01:37.200
that we then obviously fill in
with individual components.

28
00:01:37.200 --> 00:01:39.090
So that's a mental model
worth considering.

29
00:01:40.490 --> 00:01:44.640
And finally, there are the actual routes
that we define inside of our router.

30
00:01:44.640 --> 00:01:48.493
So this will be where we actually
say like, if we go to slash home,

31
00:01:48.493 --> 00:01:52.240
you wanna actually load
up the home component.

32
00:01:52.240 --> 00:01:57.315
And so, for those who haven't used Nuxt,
for example, Nuxt is, so

33
00:01:57.315 --> 00:02:02.319
the framework does a fantastic job
of accessing page level routes.

34
00:02:02.319 --> 00:02:06.776
So that based on how you organize your
dot view files inside of a directory,

35
00:02:06.776 --> 00:02:11.589
it will automatically configure your
routes for you, which is a phenomenal DX,

36
00:02:11.589 --> 00:02:15.030
and one of the many reasons
I think why I love Nuxt.

37
00:02:15.030 --> 00:02:19.650
And so, as you're looking at routing,
especially as your app gets more complex,

38
00:02:19.650 --> 00:02:22.752
definitely look into Nuxt to
see if it can sort of help you

39
00:02:22.752 --> 00:02:26.778
enhance that experience for your team
because Nuxt definitely does a lot

40
00:02:26.778 --> 00:02:29.870
of great things to make
our lives a lot easier.

41
00:02:29.870 --> 00:02:33.966
As far as those main categories now for
organizing your routes, views, and

42
00:02:33.966 --> 00:02:37.614
layers, allowance, one of the technique
that I want you all to know

43
00:02:37.614 --> 00:02:41.710
about is this idea that when you have
router view components being defined,

44
00:02:41.710 --> 00:02:44.260
to actually add a dynamic key to it.

45
00:02:44.260 --> 00:02:48.288
And so what do I mean by that, so
as you go through the router view, so

46
00:02:48.288 --> 00:02:52.800
basically this is the thing that's
switching out your components.

47
00:02:52.800 --> 00:02:56.734
So this is what's being like, if it's on
this page, then you're gonna go ahead and

48
00:02:56.734 --> 00:02:58.710
load up this component.

49
00:02:58.710 --> 00:03:02.155
And so, you'll see what I've done here
in this code snippet is that I've put

50
00:03:02.155 --> 00:03:05.458
a v-bind on the key which we typically
see on a v-for loop, for example.

51
00:03:05.458 --> 00:03:10.329
And I've bound it to the route's full
path, now why are we doing this?

52
00:03:10.329 --> 00:03:15.101
One of the sort of weird quirks of routing
that I've seen on different applications

53
00:03:15.101 --> 00:03:18.783
is that when people are changing routes or
updating sometimes,

54
00:03:18.783 --> 00:03:21.920
they'll notice that nothing has changed.

55
00:03:21.920 --> 00:03:24.908
And basically, the reason for
this is because by default,

56
00:03:24.908 --> 00:03:27.870
view wants to try to be as
performant as possible.

57
00:03:27.870 --> 00:03:32.044
And as a result, what you end up with is
that it'll try to keep certain pieces of

58
00:03:32.044 --> 00:03:36.180
state and not have to re-render
them if it doesn't have to.

59
00:03:36.180 --> 00:03:40.046
And so with routing this, you end up in
sometimes in a weird place where you're

60
00:03:40.046 --> 00:03:44.790
like, I definitely change the parameters,
I'm updating, nothing's happening.

61
00:03:44.790 --> 00:03:48.831
And so, without getting into the internals
and the complexity of it, because this is

62
00:03:48.831 --> 00:03:52.259
something that most people want,
like when most people refresh a page,

63
00:03:52.259 --> 00:03:55.257
they don't just want you to refresh
like a small portion of it.

64
00:03:55.257 --> 00:03:58.412
They want you to refresh the page,
they want a full state reload.

65
00:03:58.412 --> 00:04:00.837
Similarly, if we change route paths,
same deal, normally,

66
00:04:00.837 --> 00:04:02.660
we're reloading everything.

67
00:04:02.660 --> 00:04:04.909
And so, because this is the default,

68
00:04:04.909 --> 00:04:09.496
I recommend using this key property which
binds to the full path of the route.

69
00:04:09.496 --> 00:04:14.279
And basically, this ensures that every
single time that the router view changes

70
00:04:14.279 --> 00:04:16.754
the view, view will trigger a rerender.

71
00:04:16.754 --> 00:04:17.266
And that way,

72
00:04:17.266 --> 00:04:19.800
you can ensure you're getting
the behavior that you're expecting.

73
00:04:20.890 --> 00:04:22.139
So, this is one technique,

74
00:04:22.139 --> 00:04:25.585
definitely to keep in the back of your
pocket when it comes to defining things.

75
00:04:28.344 --> 00:04:33.089
The other one is a tool that I highly
recommend which comes out of yet again,

76
00:04:33.089 --> 00:04:36.570
the phenomenal Nuxt ecosystem,
which is vue-meta.

77
00:04:37.850 --> 00:04:41.855
And so, as we all know, when it comes
to defining SEO, SEO is a big deal,

78
00:04:41.855 --> 00:04:46.463
especially with enterprise grade level
applications where we want to allow people

79
00:04:46.463 --> 00:04:49.950
to search for things and
discoverability is huge.

80
00:04:49.950 --> 00:04:54.086
And so vue-meta is a plugin that you can
add into your app that allows you to

81
00:04:54.086 --> 00:04:59.030
actually define these header properties
basically, programmatically, rather than

82
00:04:59.030 --> 00:05:03.630
having to do it like basically do it in
a way that would be much more painful.

83
00:05:03.630 --> 00:05:06.317
So you can see here that
in this particular example,

84
00:05:06.317 --> 00:05:09.373
by declaring that metaInfo option,
right that function,

85
00:05:09.373 --> 00:05:12.204
you can then define like what
the page title should be.

86
00:05:12.204 --> 00:05:13.908
Inside of your meta, you'll have like,

87
00:05:13.908 --> 00:05:17.190
this is like the meta tags that
you would expect for SEO results.

88
00:05:17.190 --> 00:05:20.160
And so, this you can see, we're defining
the description, but on top of that,

89
00:05:20.160 --> 00:05:22.190
we're actually defining the content.

90
00:05:22.190 --> 00:05:26.757
And so, here, you see that we're actually
dynamically pulling in the username in

91
00:05:26.757 --> 00:05:30.280
this example, to actually then
render that out to the page and so

92
00:05:30.280 --> 00:05:32.713
that SEO-wise, everything looks great.

93
00:05:32.713 --> 00:05:36.924
And so, vue-meta is definitely the tool
to keep in mind when your team or

94
00:05:36.924 --> 00:05:41.548
company's talking about SEO and how to
make sure that all those pieces are being

95
00:05:41.548 --> 00:05:45.610
updated correctly in your app,
vue-meta is the way to go.

96
00:05:45.610 --> 00:05:49.100
The other thing I wanna talk to
you about is lazy loading routes.

97
00:05:49.100 --> 00:05:52.663
And so, we know that when it comes to
building applications, performance is,

98
00:05:52.663 --> 00:05:54.150
it's a big deal.

99
00:05:54.150 --> 00:05:58.050
After all, when we're looking
at delivering bundle sizes,

100
00:05:58.050 --> 00:06:01.953
we want users to load the page
as quickly as humanly possible.

101
00:06:01.953 --> 00:06:05.388
And so one of the things with routing
though is that when you import

102
00:06:05.388 --> 00:06:08.953
a route like directly, so
we can see here with our constant routes.

103
00:06:08.953 --> 00:06:14.101
We have this component Home which you can,
it's usually like you would define

104
00:06:14.101 --> 00:06:19.520
the top as import Home, as you know,
quotation mark at components Home.

105
00:06:19.520 --> 00:06:22.259
When you do that,
just means that it's bundled with,

106
00:06:22.259 --> 00:06:26.073
basically the piece that shipped to
the user immediately, because again,

107
00:06:26.073 --> 00:06:29.847
view is assuming, the bundle is assuming
that you need all of this at once.

108
00:06:29.847 --> 00:06:34.030
But what you can do, what you actually
see, by default, if you add view-routers

109
00:06:34.030 --> 00:06:38.090
plugin to your view app is that any of the
pages beyond that first initial one that

110
00:06:38.090 --> 00:06:41.425
you're basically pretty sure most
people are landing at first,

111
00:06:41.425 --> 00:06:44.105
can then be imported with this function,
right?

112
00:06:44.105 --> 00:06:47.004
And this function this is
a bit of a Webpack thing, but

113
00:06:47.004 --> 00:06:51.180
it's saying to hey, call this thing and
import it dynamically.

114
00:06:51.180 --> 00:06:53.618
And so, you'll see a couple
things that's default about it,

115
00:06:53.618 --> 00:06:56.749
like one that there's this comment block
that tells you the webpackChunkName,

116
00:06:56.749 --> 00:06:59.400
which is part of like just
a configuration for Webpack.

117
00:06:59.400 --> 00:07:02.189
But then, you actually pass
the path that you would expect to

118
00:07:02.189 --> 00:07:03.400
import the component in.

119
00:07:04.590 --> 00:07:07.944
And the beauty of this is because
you've defined it this way,

120
00:07:07.944 --> 00:07:12.333
this means that going forward, when your
code is being built for production, it

121
00:07:12.333 --> 00:07:16.785
will automatically code split these routes
to ensure that only when the user wants

122
00:07:16.785 --> 00:07:20.914
to fetch that thing, then the browser
will make that call to that specific,

123
00:07:20.914 --> 00:07:23.950
basically like code chunk and bring it in.

124
00:07:23.950 --> 00:07:28.901
And so this is for the amount of effort
that it requires, it's a fantastic default

125
00:07:28.901 --> 00:07:34.163
to basically do inside of your routes.JS
when you're defining your various routes.

126
00:07:34.163 --> 00:07:38.254
Again, unless you think that's something
that should be shipped every time cuz

127
00:07:38.254 --> 00:07:41.442
you like saying that you will be
loaded like 80% of the time or

128
00:07:41.442 --> 00:07:45.360
whatever, then that might be an example
not to do lazy loaded routes.

129
00:07:45.360 --> 00:07:47.993
But otherwise, I would recommend
by default, just go ahead and

130
00:07:47.993 --> 00:07:51.180
lazy load your routes and get that
performance boost for very little effort.

