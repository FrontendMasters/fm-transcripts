WEBVTT

1
00:00:00.078 --> 00:00:05.034
So as the best practice, all HTML
should exist in .vue files in either

2
00:00:05.034 --> 00:00:07.809
a template block or a render function.

3
00:00:07.809 --> 00:00:11.805
And so the alternative to this if you're
wondering where else would it live is you

4
00:00:11.805 --> 00:00:15.468
could theoretically split out your
HTML into individual dot HTML files.

5
00:00:15.468 --> 00:00:19.817
Or if you have other preprocessors you'd
like to use like pug, for example.

6
00:00:19.817 --> 00:00:22.056
Some people might actually break
them out into different files.

7
00:00:22.056 --> 00:00:25.165
But this is not
the recommended practice for

8
00:00:25.165 --> 00:00:28.533
a few things that I'll
mention in a little bit.

9
00:00:28.533 --> 00:00:31.575
And so when we use w files,
one of the benefits w provides us is

10
00:00:31.575 --> 00:00:35.159
that it actually has the opportunity
to parse it and basically allow for

11
00:00:35.159 --> 00:00:38.525
some developer ergonomics that
might not be possible otherwise.

12
00:00:38.525 --> 00:00:42.574
If you're simply containing your
HTML in an entirely separate file.

13
00:00:42.574 --> 00:00:46.495
And so one of the examples of
this is self-closing tags.

14
00:00:46.495 --> 00:00:49.277
And so for those that don't have
as much familiar with this.

15
00:00:49.277 --> 00:00:55.351
So here we have a standard span element
that has a class of fa awesome,

16
00:00:55.351 --> 00:00:56.937
fa awesome info.

17
00:00:56.937 --> 00:01:01.873
And so inside view, we can go ahead and
it would be illegal to go ahead and

18
00:01:01.873 --> 00:01:03.700
close this off by itself.

19
00:01:03.700 --> 00:01:07.009
But this wouldn't actually work,
as well as some other custom elements.

20
00:01:07.009 --> 00:01:08.880
This wouldn't work in standard HTML.

21
00:01:08.880 --> 00:01:12.364
So if you're ever working in like kofun,
for example, and you're just trying to do

22
00:01:12.364 --> 00:01:15.569
some self closing elements, only certain
ones are permitted to self close.

23
00:01:15.569 --> 00:01:19.794
And so this is super convenient because
as you're using your dot view files,

24
00:01:19.794 --> 00:01:24.019
when you have different components,
for example, that have longer names or

25
00:01:24.019 --> 00:01:28.179
you're listing multiple attributes,
it allows for a really clean reading

26
00:01:28.179 --> 00:01:33.119
experience from basically what's included
in that component, especially if you don't

27
00:01:33.119 --> 00:01:36.583
have anything being passed in as
far as slots and those things.

28
00:01:36.583 --> 00:01:40.357
So a little bit of a reading ergonomic,
but a nice thing to have

29
00:01:43.121 --> 00:01:46.796
In addition, one of the nice things about
this is that when you include everything

30
00:01:46.796 --> 00:01:50.061
in the .vue file, you don't have to
include the script and style blog.

31
00:01:50.061 --> 00:01:53.191
This is something that I think there
are some misconceptions around.

32
00:01:53.191 --> 00:01:55.866
So if you're just, I just want
the HTML here, that's totally fine.

33
00:01:55.866 --> 00:01:58.465
You can still include it
as just .vue view file.

34
00:01:58.465 --> 00:02:02.034
But then what's nice about this is going
forward as you need to enhance components

35
00:02:02.034 --> 00:02:03.439
because that happens, right?

36
00:02:03.439 --> 00:02:05.328
You start out thinking you only need this.

37
00:02:05.328 --> 00:02:08.722
But as you want t, for example,
either scoped styles to that component, or

38
00:02:08.722 --> 00:02:10.803
maybe even add a little
bit of functionality.

39
00:02:10.803 --> 00:02:14.019
It's as simple as a developer
going into the .vue file and

40
00:02:14.019 --> 00:02:16.513
then adding the script block or
style block,

41
00:02:16.513 --> 00:02:20.534
as opposed to then going into a separate
file or creating a brand new one.

42
00:02:20.534 --> 00:02:24.787
And so this is, again for enforcing
consistency, which is probably one of

43
00:02:24.787 --> 00:02:28.512
the most important things when
it comes to creating production.

44
00:02:28.512 --> 00:02:32.530
A great view apps is having that
consistency then allows people to know

45
00:02:32.530 --> 00:02:35.130
reliably where everything's coming from.

46
00:02:35.130 --> 00:02:37.443
So something to keep in mind for
those things.

47
00:02:37.443 --> 00:02:40.717
And so when we talk about the template
versus the render function,

48
00:02:40.717 --> 00:02:43.879
most of us are familiar up here
with the template block, right.

49
00:02:43.879 --> 00:02:50.194
This contains our HTML and what most of us
have experience with when it comes to vue.

50
00:02:50.194 --> 00:02:52.357
And so
when it comes to the render function,

51
00:02:52.357 --> 00:02:55.868
this is something that most people
probably very rarely encountered,

52
00:02:55.868 --> 00:02:58.277
because a lot of times
there isn't a need for it.

53
00:02:58.277 --> 00:03:02.148
But one of the misconceptions I've seen
a lot with vue is that like templates

54
00:03:02.148 --> 00:03:05.915
are the only way to write HTML and
this couldn't be farther from the case.

55
00:03:05.915 --> 00:03:08.523
So instead of having a template block her,

56
00:03:08.523 --> 00:03:12.509
what we can have instead is we'll
have a render function that were

57
00:03:12.509 --> 00:03:16.146
declared inside of our default,
export default objects.

58
00:03:16.146 --> 00:03:20.935
And so by declaring the render function
in vue two it's automatically passed

59
00:03:20.935 --> 00:03:24.986
the Create element function,
which we can then use to go ahead and

60
00:03:24.986 --> 00:03:29.056
create the individual node objects,
sorry, the DOM elements.

61
00:03:29.056 --> 00:03:32.899
And so in this case, we took our H1
that says hello fronted masters and

62
00:03:32.899 --> 00:03:37.068
as you can see here, we've used a Create
Element function and gone ahead and

63
00:03:37.068 --> 00:03:41.195
created the h1 element with the Hello
frontend Masters text inside of it.

64
00:03:41.195 --> 00:03:46.344
And so this is basically an escape
hatch for when templates become a bit

65
00:03:46.344 --> 00:03:52.031
unwieldly to manage and so we'll practice
an example of this in a little bit.

66
00:03:54.236 --> 00:03:56.098
And so when it comes to vue three,

67
00:03:56.098 --> 00:03:59.755
one of the new things that's gonna
take a little getting used to,

68
00:03:59.755 --> 00:04:04.094
is that vue because it's been basically
code split and it's tree shakable.

69
00:04:04.094 --> 00:04:07.806
Meaning that a lot of different pieces can
be left off of production build if you're

70
00:04:07.806 --> 00:04:08.451
not using it.

71
00:04:08.451 --> 00:04:12.646
This means we're gonna start importing
more helpers from vue three going forward.

72
00:04:12.646 --> 00:04:17.388
So as we can see here I've imported
the this H function, which stands for

73
00:04:17.388 --> 00:04:19.269
hyper script, basically.

74
00:04:19.269 --> 00:04:22.173
And so it's the equivalent of
the Create element function.

75
00:04:22.173 --> 00:04:27.564
And so what this does is this allows us to
then do the same thing as create element.

76
00:04:27.564 --> 00:04:31.020
And so rather than the render
function always being bundled with

77
00:04:31.020 --> 00:04:33.452
the Create element function, in vue three,

78
00:04:33.452 --> 00:04:37.558
what's going to happen is we can simply
pass it the H hyper script function.

79
00:04:37.558 --> 00:04:40.016
And then that will allow us to
then achieve the same thing.

80
00:04:40.016 --> 00:04:46.240
So the main thing here is that the hyper
script function is imported from vue and

81
00:04:46.240 --> 00:04:49.841
then we use it inside
of our render function.

82
00:04:49.841 --> 00:04:51.834
And so
there probably some of you wondering too,

83
00:04:51.834 --> 00:04:55.341
especially those with react backgrounds,
well, does this mean that we can use JSX?

84
00:04:55.341 --> 00:04:59.236
And the answer is absolutely there
are babel plugins that we can add to

85
00:04:59.236 --> 00:05:01.987
vue apps to that In the event,
you wanna use JSX,

86
00:05:01.987 --> 00:05:05.975
you can use that with the render
function just like you would in react.

87
00:05:05.975 --> 00:05:10.153
Templates are the honestly the best way
to write HTML because it's extremely

88
00:05:10.153 --> 00:05:10.995
declarative.

89
00:05:10.995 --> 00:05:14.506
And anyone can get in there and
understand basically what's going on.

90
00:05:14.506 --> 00:05:16.531
So it's recommended as the default.

91
00:05:16.531 --> 00:05:20.470
However, in the event, you need to
programmatically create your markup

92
00:05:20.470 --> 00:05:24.358
basically, this is where render
functions can be extremely powerful.

93
00:05:24.358 --> 00:05:27.857
And so in the exercise we're gonna
do together we're gonna go ahead and

94
00:05:27.857 --> 00:05:31.647
build an example of this to show where
the render function might be better than

95
00:05:31.647 --> 00:05:32.898
the template function.

96
00:05:32.898 --> 00:05:38.781
Another technique that I've seen a lot
on big vue applications is the V-bind

97
00:05:38.781 --> 00:05:44.122
v- on object shorthand, and so
unfortunately I think the experience

98
00:05:44.122 --> 00:05:49.216
with this is mixed so this is why
we're gonna cover this right now.

99
00:05:49.216 --> 00:05:51.904
So most of us are familiar
with the V-bind and

100
00:05:51.904 --> 00:05:56.504
v-n direct is where it allows us to
dynamically bind either props or events,

101
00:05:56.504 --> 00:05:59.226
to our elements and
do whatever we need to it.

102
00:05:59.226 --> 00:06:01.648
So here we have the vue
multi-select component and

103
00:06:01.648 --> 00:06:03.855
we've bound a couple of things to it,
right.

104
00:06:03.855 --> 00:06:06.066
We've bound the options,
the value of the label,

105
00:06:06.066 --> 00:06:09.112
and we've bound three different events,
three different methods.

106
00:06:09.112 --> 00:06:13.638
And so, as you can imagine though,
even with just these six, so these three,

107
00:06:13.638 --> 00:06:17.971
three attributes and three events,
there's a lot of noise going on here.

108
00:06:17.971 --> 00:06:18.920
And this gets even worse.

109
00:06:18.920 --> 00:06:22.172
The longer you have
components with more props or

110
00:06:22.172 --> 00:06:27.165
more events it can be a lot what a lot
of people don't realize is that this can

111
00:06:27.165 --> 00:06:30.913
actually be shorthand into
the v-bind object syntax.

112
00:06:30.913 --> 00:06:34.129
And so v-bind can basically then think
of it almost like a spread operator.

113
00:06:34.129 --> 00:06:38.485
It takes an object where it takes the
individual key pairs, as far as what the,

114
00:06:38.485 --> 00:06:40.599
in this case, the attribute name is.

115
00:06:40.599 --> 00:06:43.360
So in this case,
whether it's options, value label,

116
00:06:43.360 --> 00:06:46.731
and then we bind it to whatever
JavaScript equivalent that we want.

117
00:06:46.731 --> 00:06:49.388
And the same can be done for
the v-on as well.

118
00:06:49.388 --> 00:06:53.922
And so you can see here that our events
now have been reorganized into the object

119
00:06:53.922 --> 00:06:58.402
format, which then allows us to basically
contain everything in an object.

120
00:06:58.402 --> 00:07:00.336
And so some of you are probably
thinking already too.

121
00:07:00.336 --> 00:07:04.402
So with ESX, we can go ahead and
shortcut this,

122
00:07:04.402 --> 00:07:10.108
into just the key itself since the key and
the value are identical.

123
00:07:10.108 --> 00:07:14.351
And then on top of this what we
have as well, which is really nice,

124
00:07:14.351 --> 00:07:18.286
is that you can then because
it's just a JavaScript object,

125
00:07:18.286 --> 00:07:21.157
we if we had a VMs props for
vue multiselect.

126
00:07:21.157 --> 00:07:23.814
Instead of a data object,
we can then bind that and

127
00:07:23.814 --> 00:07:25.979
then track it somewhere else entirely.

128
00:07:25.979 --> 00:07:30.881
And this allows us to shortcut
what exactly is being

129
00:07:30.881 --> 00:07:33.618
bound into this component.

130
00:07:33.618 --> 00:07:37.086
And so just as we can do that for v- bind,

131
00:07:37.086 --> 00:07:41.676
we can do the same thing as
well with the v-on as well.

132
00:07:41.676 --> 00:07:46.099
And so you might be wondering, okay, so
which one is, why would I choose one or

133
00:07:46.099 --> 00:07:46.777
the other?

134
00:07:46.777 --> 00:07:50.258
So when you just have simple prompt
declarations or a few events,

135
00:07:50.258 --> 00:07:54.310
it's only doesn't make sense to do
the shorthand because as you can see, it

136
00:07:54.310 --> 00:07:59.026
basically obfuscates what exactly is being
bound and what events are being triggered.

137
00:07:59.026 --> 00:08:01.809
However, when you're doing things
like binding on things that needs to

138
00:08:01.809 --> 00:08:02.319
be dynamic.

139
00:08:02.319 --> 00:08:06.833
So whether you're swapping out components
with the component the built in component,

140
00:08:06.833 --> 00:08:11.042
for example, or other things were properly
to change, then this is a great way for

141
00:08:11.042 --> 00:08:14.049
us to then swap out only what's needed for
the component.

142
00:08:14.049 --> 00:08:16.823
And something to basically
keep in mind and

143
00:08:16.823 --> 00:08:21.539
a lot of people use when it comes to
dynamically generating components.

144
00:08:21.539 --> 00:08:25.321
So, I just want you to keep that technique
in mind cuz you'll see it a lot in

145
00:08:25.321 --> 00:08:26.542
different code bases.

146
00:08:26.542 --> 00:08:28.820
So, there's a question
regarding the render function.

147
00:08:28.820 --> 00:08:36.434
So, I'm gonna go ahead, and
let me back up to here, okay.

148
00:08:36.434 --> 00:08:39.463
So, regarding the H functionality here.

149
00:08:39.463 --> 00:08:45.204
So, H is basically the equivalent here of
create element that we saw in vue two,

150
00:08:45.204 --> 00:08:49.573
but in vue, they use the h to name for
the utility function for

151
00:08:49.573 --> 00:08:52.941
hyper script for
basically creating markup.

152
00:08:52.941 --> 00:08:56.125
And so inside of the render function,
basically we

153
00:08:56.125 --> 00:09:00.876
use that as basically think of it just
like another name for a treat element.

154
00:09:00.876 --> 00:09:04.623
And what it does here in the simplest
form, it takes two arguments,

155
00:09:04.623 --> 00:09:07.733
which is the element that you
want to create on the left.

156
00:09:07.733 --> 00:09:09.070
So that's why it's the H1.

157
00:09:09.070 --> 00:09:12.043
And then what will go inside of
the element and in this case,

158
00:09:12.043 --> 00:09:14.901
and just plain text,
it'll be Hello Frontend Masters.

159
00:09:14.901 --> 00:09:17.212
And so for
those who wanna use the render function,

160
00:09:17.212 --> 00:09:20.546
one of the things that also makes it
tricky in comparison with the template

161
00:09:20.546 --> 00:09:22.672
is that there's a whole
API that goes with it.

162
00:09:22.672 --> 00:09:25.736
You have to learn how to
dynamically bind classes,

163
00:09:25.736 --> 00:09:27.953
figure out which arguments do what.

164
00:09:27.953 --> 00:09:30.872
And I totally recommend checking out
the dots if this is something that's

165
00:09:30.872 --> 00:09:31.443
worth doing.

166
00:09:31.443 --> 00:09:33.039
But this is why for the most part,

167
00:09:33.039 --> 00:09:36.915
it's usually more valuable to just use
the template and only the render function

168
00:09:36.915 --> 00:09:41.080
when there's an actual improvement as far
as developer experience and maintenance.

