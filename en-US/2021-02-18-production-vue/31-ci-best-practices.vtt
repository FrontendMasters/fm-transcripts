WEBVTT

1
00:00:00.620 --> 00:00:05.592
Before I go into this as well,
maintenance, the other piece of this I

2
00:00:05.592 --> 00:00:10.994
want to consider, which we have a little
bit of time to discuss is regarding

3
00:00:10.994 --> 00:00:16.520
the implementation of conventions on
continuous integration pipelines.

4
00:00:18.320 --> 00:00:21.546
And so I'll make sure that later on
when the slides are pushed to the repo,

5
00:00:21.546 --> 00:00:22.780
this will be included.

6
00:00:22.780 --> 00:00:25.755
So the idea here with
continuous integration, right,

7
00:00:25.755 --> 00:00:28.680
cuz we talked about automation
with implementation.

8
00:00:30.970 --> 00:00:33.908
So, when it comes to continuous
integration, what we talked a lot about

9
00:00:33.908 --> 00:00:37.080
here, there are three main points
with continuous integration.

10
00:00:37.080 --> 00:00:39.569
There is basically the pre-commit hook,

11
00:00:39.569 --> 00:00:44.062
where the developer is committing code,
there is the pull request step where

12
00:00:44.062 --> 00:00:48.800
tests are being run just to make
sure that things aren't breaking.

13
00:00:48.800 --> 00:00:52.210
And then there is the final continuous
integration step where things are being

14
00:00:52.210 --> 00:00:55.516
released to production, those are the
three main categories to think about

15
00:00:55.516 --> 00:00:57.810
when you're thinking of
continuous integration.

16
00:00:59.240 --> 00:01:02.531
The reason why it's important to
distinguish between these three,

17
00:01:02.531 --> 00:01:06.216
is because it will determine how much time
you should be spending on each one or

18
00:01:06.216 --> 00:01:08.240
allowing it to increase.

19
00:01:08.240 --> 00:01:10.615
And so,
as we sort of mentioned earlier, right?

20
00:01:10.615 --> 00:01:14.200
With the Pareto effect and
keeping to that 20% to 80% impact rule,

21
00:01:14.200 --> 00:01:18.078
most of the time when you're committing
code, you need to be able to basically

22
00:01:18.078 --> 00:01:21.898
make sure all the basic linting and
all the things we're talking about here,

23
00:01:21.898 --> 00:01:25.520
that all of these things are consistent,
we wanna get rid of that crust.

24
00:01:27.070 --> 00:01:28.921
And then once that's done, right?

25
00:01:28.921 --> 00:01:33.826
You can theoretically then consider
adding some tests to the commit pre-hook,

26
00:01:33.826 --> 00:01:38.007
but in my experience, unless you're
able to keep your unit tests for

27
00:01:38.007 --> 00:01:42.000
whatever changes are being
made to basically a minimum.

28
00:01:42.000 --> 00:01:44.254
Like basically it should
run really quickly so

29
00:01:44.254 --> 00:01:48.007
that developers don't feel like they can
walk out and go get a cup of coffee and

30
00:01:48.007 --> 00:01:50.834
then come back for the test to run,
that is the key thing for

31
00:01:50.834 --> 00:01:54.690
the success of integrating any convention
inside of that pre-commit stage.

32
00:01:55.800 --> 00:02:00.569
And so as long as user can commit and call
it within 30 seconds, I'd say, like it's

33
00:02:00.569 --> 00:02:05.208
a good baseline that everything's done or
to be honest, probably even less, then

34
00:02:05.208 --> 00:02:09.809
this is good, this is stage one of your
implementation process for conventions.

35
00:02:11.220 --> 00:02:15.344
When you get to the pull request section,
one of the traditional mistakes that's

36
00:02:15.344 --> 00:02:19.186
made with continuous integration,
is you try to test everything, right?

37
00:02:19.186 --> 00:02:22.898
And so what you ultimately get is,
a really long review process, and

38
00:02:22.898 --> 00:02:27.378
this is extremely costly because what this
means is, especially with time zones,

39
00:02:27.378 --> 00:02:29.054
you lose development cycles.

40
00:02:29.054 --> 00:02:33.669
Imagine if the developer pushes something
to their pull request, and then it takes,

41
00:02:33.669 --> 00:02:36.359
let's call it,
30 minutes to run the test, but

42
00:02:36.359 --> 00:02:39.200
they've already switched
contexts at this point.

43
00:02:39.200 --> 00:02:42.550
Cuz people aren't just sitting there
waiting for their PRs to pass, right?

44
00:02:42.550 --> 00:02:43.427
They've moved on.

45
00:02:43.427 --> 00:02:47.620
And so they might not discover that the
tests have failed until, an hour, an hour

46
00:02:47.620 --> 00:02:51.690
and a half later, and then this means that
then when they need to fix the thing,

47
00:02:51.690 --> 00:02:55.144
they now need to then push and
then wait that whole cycle again or and

48
00:02:55.144 --> 00:02:59.690
if you have any locally You still
have to wait for that to work.

49
00:02:59.690 --> 00:03:03.722
Again, at each stage, we are trying to
still keep things fast enough that we

50
00:03:03.722 --> 00:03:07.440
focus on the important thing which is,
one, the review and then two,

51
00:03:07.440 --> 00:03:08.530
moving it forward.

52
00:03:08.530 --> 00:03:12.493
So the kind of tests that are generally
recommended at this sort of pull request

53
00:03:12.493 --> 00:03:16.940
stage is to focus on tests that only
impact the feature that has been changed.

54
00:03:16.940 --> 00:03:19.666
So, if you have changed
the shopping cart component,

55
00:03:19.666 --> 00:03:23.340
that then the appropriate unit tests,
or enchanters for that matter, or

56
00:03:23.340 --> 00:03:26.481
in this case, probably unit tests
are probably the best ones,

57
00:03:26.481 --> 00:03:29.790
are in any dependencies that
are on this shopping cart.

58
00:03:29.790 --> 00:03:31.211
You wanna make sure those are run,

59
00:03:31.211 --> 00:03:34.360
because obviously that's what you need
to actually automate and test out.

60
00:03:35.620 --> 00:03:38.098
But then if you're trying to
test everything else at once,

61
00:03:38.098 --> 00:03:40.360
I think that is where
the mistake is often made.

62
00:03:40.360 --> 00:03:44.655
So scoping your test down to what's
relevant to the PR is really important for

63
00:03:44.655 --> 00:03:49.229
ensuring that people can trust the PR
process and basically move things forward.

64
00:03:50.480 --> 00:03:54.936
Now, as you probably might have guessed,
when it comes to pushing to production,

65
00:03:54.936 --> 00:03:59.580
this is the time where now you're
gonna want to go ahead and run it all.

66
00:03:59.580 --> 00:04:04.566
And so one way you can try to mitigate
this is because a lot of people would say,

67
00:04:04.566 --> 00:04:09.405
well, this doesn't necessarily work
well for my organization because,

68
00:04:09.405 --> 00:04:13.933
sometimes, we need to push something,
it needs to go to production,

69
00:04:13.933 --> 00:04:18.140
and if we have to wait all this time,
this is not good.

70
00:04:18.140 --> 00:04:21.904
And so what often a lot of best practice
for a lot of organizations they do,

71
00:04:21.904 --> 00:04:24.880
is they'll basically have a,
call it a either a staging or

72
00:04:24.880 --> 00:04:28.588
a dev branch that contains what should
eventually go to production, and

73
00:04:28.588 --> 00:04:32.640
that's what's basically running
the entire suite of end to end tests.

74
00:04:32.640 --> 00:04:36.300
But that's being run separately from
everyone else's development workflow.

75
00:04:36.300 --> 00:04:39.858
So that that way at least by the time
they context switch, if someone did break

76
00:04:39.858 --> 00:04:42.868
something on the dev branch, for
example, then they can go in and

77
00:04:42.868 --> 00:04:45.604
fix it accordingly and
we can figure it out the trace path for

78
00:04:45.604 --> 00:04:47.720
figuring out what went
wrong is a lot easier.

79
00:04:49.630 --> 00:04:54.025
And so that is one way to sort of mitigate
having that entire test suite take up

80
00:04:54.025 --> 00:04:58.075
a lot of time for deployment,
is to have that run on a separate branch,

81
00:04:58.075 --> 00:05:02.350
sort of as a, call it a test run, and
make sure everything runs smoothly.

82
00:05:02.350 --> 00:05:05.607
Cuz the last thing you want when you're
supposed to push a new feature out is

83
00:05:05.607 --> 00:05:09.850
to find out there was this one random test
that failed because of xyz dependency.

84
00:05:09.850 --> 00:05:14.982
And so those are the three main
stages to consider when it comes to

85
00:05:14.982 --> 00:05:21.270
how implementing conventions go across
a continuous integration pipeline.

86
00:05:21.270 --> 00:05:26.745
So does anyone have any questions
regarding best practices or

87
00:05:26.745 --> 00:05:31.801
wanna talk about challenges
they've had as far as either

88
00:05:31.801 --> 00:05:37.084
trying to bring things up or
strategies they could use etc?

89
00:05:37.084 --> 00:05:39.450
So I'll open the floor up for questions.

90
00:05:39.450 --> 00:05:44.365
The question around best practices, what
are my thoughts as far as call it the CTL

91
00:05:44.365 --> 00:05:48.557
just going, by the way,
we're gonna follow the Airbnb standard for

92
00:05:48.557 --> 00:05:53.059
how they read JavaScript or the Google
one and that's what we're doing?

93
00:05:53.059 --> 00:05:54.760
There's certainly nothing wrong with this,
right?

94
00:05:54.760 --> 00:05:57.949
The obvious benefits of this is
you avoid the bike shedding and

95
00:05:57.949 --> 00:06:00.709
you start with a convention
that is fairly popular and

96
00:06:00.709 --> 00:06:03.770
most people probably
won't debate a lot about.

97
00:06:03.770 --> 00:06:07.686
But when you're starting a new project,
I think with conventions, for

98
00:06:07.686 --> 00:06:11.665
longevity of these sort of things,
I think it's important to give people

99
00:06:11.665 --> 00:06:16.410
the emotional buy in, to understanding
why conventions are being chosen.

100
00:06:16.410 --> 00:06:20.992
One of I think the biggest problem is we
see as the tech culture continues to grow

101
00:06:20.992 --> 00:06:25.924
and develop, is a lot of developers often
follow principles without understanding

102
00:06:25.924 --> 00:06:27.815
why they're doing it, right?

103
00:06:27.815 --> 00:06:31.540
A great example of this is,
do not repeat yourself, right?

104
00:06:31.540 --> 00:06:36.669
All my code needs to be dry, and so if I
have things I repeat across components,

105
00:06:36.669 --> 00:06:39.670
that's wet code, we enjoy typing.

106
00:06:39.670 --> 00:06:42.085
And so
then they'll contort themselves to try and

107
00:06:42.085 --> 00:06:45.360
figure out how to make their
code as dry as humanly possible.

108
00:06:45.360 --> 00:06:49.151
When again, this would most likely
probably fall into that 80% for

109
00:06:49.151 --> 00:06:53.842
probably not even 20% of impact, it's a
principle that then the develop waste time

110
00:06:53.842 --> 00:06:58.170
trying to figure out this also means that
ultimately it's okay that we repeat.

111
00:06:58.170 --> 00:07:02.234
But if you don't understand why we're
doing these things, and when it's

112
00:07:02.234 --> 00:07:06.960
appropriate to do these things, this is
where I think we lose context over time.

113
00:07:06.960 --> 00:07:10.785
And so don't get me wrong, it's always
good to start with a standard, and

114
00:07:10.785 --> 00:07:14.976
when you're onboarding developers to
the standard, I think it's important for

115
00:07:14.976 --> 00:07:18.924
them to at least start to understand
the key things about certain standards so

116
00:07:18.924 --> 00:07:22.790
that they basically have that
connection to what's happening.

117
00:07:22.790 --> 00:07:23.998
Because overtime, right?

118
00:07:23.998 --> 00:07:26.505
We talked about this
conventions will change, and

119
00:07:26.505 --> 00:07:29.500
the requirements of each
teams will change as well.

120
00:07:29.500 --> 00:07:33.685
So, if as an organization our
goal is to grow our engineers and

121
00:07:33.685 --> 00:07:38.031
to grow as a department,
this means we need them to be able to make

122
00:07:38.031 --> 00:07:41.825
basically good decisions on
behalf of the department.

123
00:07:41.825 --> 00:07:47.554
And not simply just take marching orders
from the top down which is understandably,

124
00:07:47.554 --> 00:07:52.473
it's quick and gets the job done,
but I think ultimately, having those

125
00:07:52.473 --> 00:07:58.362
discussions, again it's not necessarily
that in your example where we're saying,

126
00:07:58.362 --> 00:08:02.659
let's tear apart Airbnb standards and
pick which one we want.

127
00:08:02.659 --> 00:08:05.435
That can be a huge waste
of engineering time and

128
00:08:05.435 --> 00:08:09.470
even arguably impossible
across a large department.

129
00:08:09.470 --> 00:08:13.634
But what we can do is that, when you
start with a standard, for example,

130
00:08:13.634 --> 00:08:17.939
when you use Vue CLI you might've noticed,
or you might not have noticed,

131
00:08:17.939 --> 00:08:20.410
that inside of our packets are Jason.

132
00:08:20.410 --> 00:08:24.375
They're actually our IES lint plugins,
like for the essential rules,

133
00:08:24.375 --> 00:08:27.730
that we basically like
recommend that you follow.

134
00:08:27.730 --> 00:08:31.570
And so to this point, it is good to have
a starting point because for example,

135
00:08:31.570 --> 00:08:33.579
there are certain things that are more or

136
00:08:33.579 --> 00:08:36.780
less agreed upon conventions
across the industry.

137
00:08:36.780 --> 00:08:40.609
And so starting with there's nothing wrong
but then going forward as you bring on

138
00:08:40.609 --> 00:08:43.649
new people and have those discussions,
it's important to us,

139
00:08:43.649 --> 00:08:47.330
as long as they're given the opportunity
to question those things, right?

140
00:08:47.330 --> 00:08:51.599
And then have those discussions in a safe
environment, not necessarily with the CTO,

141
00:08:51.599 --> 00:08:53.938
for example, but
with their team lead, like,

142
00:08:53.938 --> 00:08:56.644
I noticed that we don't have this rule for
this thing.

143
00:08:56.644 --> 00:09:00.796
I know that Airbnb doesn't do this,
but why can't this be improved upon?

144
00:09:00.796 --> 00:09:04.107
As long as those discussions
are allowed to happen,

145
00:09:04.107 --> 00:09:08.621
I think that is the key to ensuring
that over time, you have the long term

146
00:09:08.621 --> 00:09:12.930
benefit of having conventions
while also growing your engineers.

147
00:09:14.030 --> 00:09:18.976
Okay, so the question here is around if
you use JSX there are linting tools to

148
00:09:18.976 --> 00:09:20.766
help with accessibility?

149
00:09:20.766 --> 00:09:25.509
I don't have any on top of my head
immediately for non-JSX within the Vue

150
00:09:25.509 --> 00:09:30.950
ecosystem but I would not be surprised
if someone has already created that.

151
00:09:30.950 --> 00:09:34.571
And if they haven't,
definitely would be a very popular one for

152
00:09:34.571 --> 00:09:39.510
sure so, yeah, so, unfortunately,
I don't know any off the top of my head.

153
00:09:39.510 --> 00:09:43.970
But checkout again, I don't have
an encyclopedia of knowledge of the entire

154
00:09:43.970 --> 00:09:48.360
ecosystem, but I do think that there
are a lot of people in the ecosystem that

155
00:09:48.360 --> 00:09:53.050
are very passionate about accessibility
and who are leading the charge on this.

156
00:09:54.290 --> 00:09:57.715
Real Amado is one of like our key
accessibility leads in the community

157
00:09:57.715 --> 00:10:00.253
,and so
if you check out the Vue three guidelines,

158
00:10:00.253 --> 00:10:04.630
there is like an accessibility section in
our docs now dedicated to these things.

159
00:10:04.630 --> 00:10:07.228
So if you all are having
questions around these things or

160
00:10:07.228 --> 00:10:10.820
think that this tool would better enhance
our experience as Vue developers,

161
00:10:10.820 --> 00:10:14.301
I absolutely recommend either opening
an issue on the docks or something so

162
00:10:14.301 --> 00:10:16.236
we can start having those discussions and

163
00:10:16.236 --> 00:10:19.310
figuring out a way to better
help everyone across the world.

164
00:10:19.310 --> 00:10:23.099
So earlier we had a question
regarding an eslint plugin to Vue,

165
00:10:23.099 --> 00:10:26.920
that helps to basically lint for
accessibility things.

166
00:10:26.920 --> 00:10:30.758
So shout out to Patrick for
finding this during the break, and so yes,

167
00:10:30.758 --> 00:10:33.685
there is a eslint view ally
plugin as you can see here,

168
00:10:33.685 --> 00:10:36.304
that you'll be able to install and
configure.

169
00:10:36.304 --> 00:10:40.138
And as you can see here,
there's a lot of base supported rules for

170
00:10:40.138 --> 00:10:44.550
different accessibility things, and
definitely be sure to check it out.

171
00:10:44.550 --> 00:10:47.883
Also, this is a GitHub repo as well,
I'll go ahead to make

172
00:10:47.883 --> 00:10:51.626
sure those are included inside of
the repo as far as resources go,

173
00:10:51.626 --> 00:10:54.640
as we've been going through,
throughout the day.

174
00:10:56.210 --> 00:10:58.713
And so yes, big shout out to Patrick for
finding that,

175
00:10:58.713 --> 00:11:01.990
I know a lot of people will benefit
from having this as part of their app.

