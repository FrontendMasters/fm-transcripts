WEBVTT

1
00:00:00.670 --> 00:00:04.510
So another question that comes up a lot
when it comes to production-grade apps,

2
00:00:04.510 --> 00:00:07.954
because we're talking about enterprise
scale here is when it's best to

3
00:00:07.954 --> 00:00:09.435
actually refactor your apps.

4
00:00:11.389 --> 00:00:14.805
And so this is sort of like the cliche
statement that's made a lot in

5
00:00:14.805 --> 00:00:18.892
programming, which is that premature
optimization is the root of all evil, or

6
00:00:18.892 --> 00:00:22.230
at least most of it,
when it comes to programming.

7
00:00:22.230 --> 00:00:25.030
And the same can actually be applied
when it comes to refactoring components.

8
00:00:26.670 --> 00:00:30.590
And so the principle I wanna introduce
here is to follow what I like

9
00:00:30.590 --> 00:00:33.370
to call data driven refactoring.

10
00:00:33.370 --> 00:00:37.232
A lot of times, as developers,
when we start building something,

11
00:00:37.232 --> 00:00:41.298
it's easy to try to think immediately
of how it can apply everywhere and

12
00:00:41.298 --> 00:00:43.833
all of the various use
cases it can apply to.

13
00:00:43.833 --> 00:00:47.904
But most of the time, what I found it
is more effective is to go ahead and

14
00:00:47.904 --> 00:00:51.216
start by building the component
as you would normally and

15
00:00:51.216 --> 00:00:54.740
just build out the feature,
make it very specific, right?

16
00:00:54.740 --> 00:00:57.895
So in the instance of our to-do list
item that we talked about earlier,

17
00:00:57.895 --> 00:00:59.323
to do this item, just build it.

18
00:00:59.323 --> 00:01:03.375
Don't sit there and think like, well, it's
kind of a list item, which kind of could

19
00:01:03.375 --> 00:01:06.494
be used in shopping cart and
kinda could be used on the dashboard.

20
00:01:06.494 --> 00:01:08.640
This is I think where we get stuck a lot.

21
00:01:08.640 --> 00:01:12.670
And so instead, these are some signs we
can use to kind of indicate when we need

22
00:01:12.670 --> 00:01:16.910
refactoring, right, once we build
the specific instances, right?

23
00:01:16.910 --> 00:01:19.837
And the first one is that when your
components are hard to understand.

24
00:01:19.837 --> 00:01:21.690
And so what does that mean exactly?

25
00:01:21.690 --> 00:01:25.795
For those who have working on really big
apps, most of us have that experience

26
00:01:25.795 --> 00:01:30.980
where you get that ticket and someone's
like, well, this component needs fixing.

27
00:01:30.980 --> 00:01:34.130
And everyone's just like,
give that to Dana.

28
00:01:34.130 --> 00:01:35.920
Dana knows what she's doing with that.

29
00:01:35.920 --> 00:01:40.023
And so in that scenario,
this component has become so complex and

30
00:01:40.023 --> 00:01:45.330
only one person understands it, that at
that point, no one wants to touch it.

31
00:01:45.330 --> 00:01:48.972
And then most people probably have
experienced that level of complexity in

32
00:01:48.972 --> 00:01:50.350
the component.

33
00:01:50.350 --> 00:01:53.809
And so one of the reasons that
components are supposed to be helpful

34
00:01:53.809 --> 00:01:56.980
is because anyone can get in there and
help enhance it.

35
00:01:56.980 --> 00:02:00.373
But when it becomes so difficult that
people can't even get in there or

36
00:02:00.373 --> 00:02:04.457
don't want to basically work with it, this
is probably one of the biggest signs that

37
00:02:04.457 --> 00:02:06.378
we need to take the time to refactor it.

38
00:02:06.378 --> 00:02:10.040
So that Dana isn't the only one who
understands how that component works.

39
00:02:10.040 --> 00:02:14.943
And so we can have better shared
knowledge on those sort of things.

40
00:02:14.943 --> 00:02:17.480
The other thing is that when
you're getting the sense that

41
00:02:17.480 --> 00:02:19.990
a component really should
have its own state.

42
00:02:19.990 --> 00:02:24.230
So this is an example of this might be
when you're working on a component, and

43
00:02:24.230 --> 00:02:28.541
you find that you're just configuring
a lot of things really specifically for

44
00:02:28.541 --> 00:02:30.000
this one section of HTML.

45
00:02:30.000 --> 00:02:32.819
And that you're just finding that
it's kind of odd that the parent's

46
00:02:32.819 --> 00:02:33.650
controlling it.

47
00:02:33.650 --> 00:02:37.554
And so once you start to get the sense
that a component should encapsulate its

48
00:02:37.554 --> 00:02:40.910
own state, this is another example
of data driven refactoring.

49
00:02:40.910 --> 00:02:44.900
Because at this point, again, you've
seen that, you have the evidence to show

50
00:02:44.900 --> 00:02:48.256
that the code would support having
its own file and being on its own.

51
00:02:48.256 --> 00:02:50.969
And so the third point,
it's similar to the first one,

52
00:02:50.969 --> 00:02:55.071
where if you have a hard time figuring out
what exactly that component is responsible

53
00:02:55.071 --> 00:02:57.850
for, then absolutely,
it's time to break it apart.

54
00:02:57.850 --> 00:03:01.413
Because one of the things that also makes
single file components really great in

55
00:03:01.413 --> 00:03:03.593
view is the idea that when
you delete something,

56
00:03:03.593 --> 00:03:06.130
you know exactly what's getting impacted.

57
00:03:06.130 --> 00:03:10.735
But if you have a component that's so
complicated that you can't safely refactor

58
00:03:10.735 --> 00:03:13.951
or delete code,
this is time that we're spending into.

59
00:03:13.951 --> 00:03:17.839
Because we wanna make it easy for
people to not only debug and refactor, but

60
00:03:17.839 --> 00:03:20.850
even enhance it with new
things going forward.

61
00:03:20.850 --> 00:03:25.210
And so what are some other ways of
finding these new reusable components?

62
00:03:25.210 --> 00:03:29.340
The most obvious one is when you're using
a v-for loop with any sort of HTML that's

63
00:03:29.340 --> 00:03:31.620
starting to get pretty complicated.

64
00:03:31.620 --> 00:03:35.197
So if you're just looping through
an LI that has just some text in it,

65
00:03:35.197 --> 00:03:38.850
certainly there would be overkill
to a refactor to its own component.

66
00:03:38.850 --> 00:03:42.818
On the other hand, if you have a v-for
loop where the LI contains a lot of

67
00:03:42.818 --> 00:03:47.317
different markup and not only that the
markup has different state that changes or

68
00:03:47.317 --> 00:03:51.354
has different things that reacts to
different data points, then this is

69
00:03:51.354 --> 00:03:55.479
absolutely a great time to just abstract
that out into its own component.

70
00:03:57.000 --> 00:03:59.490
And so
large components is another one too.

71
00:03:59.490 --> 00:04:03.466
If your components are 100s and
even 1,000s of line long,

72
00:04:03.466 --> 00:04:07.939
probably something should be refactored
at that point and reconsidered,

73
00:04:07.939 --> 00:04:11.146
and so whether it's similar
visual designs as well.

74
00:04:11.146 --> 00:04:15.025
So if you're lucky enough to have
designers who are providing a design

75
00:04:15.025 --> 00:04:19.366
system up front, these are great ways to
maybe abstract out certain base layer

76
00:04:19.366 --> 00:04:23.936
components that have certain styles that
are very consistent over time, right?

77
00:04:23.936 --> 00:04:29.033
So a base button is the most
traditional example of this.

78
00:04:29.033 --> 00:04:34.054
So that the styles are consistent, and
then people can extend it from there.

79
00:04:34.054 --> 00:04:36.462
Otherwise, we talked about
some of these other ones.

80
00:04:36.462 --> 00:04:39.695
But generally speaking, if they're
repeating, if there are multiple

81
00:04:39.695 --> 00:04:42.663
mixed responsibilities, and
if anything starts to get so complex

82
00:04:42.663 --> 00:04:47.230
that no one understands what's happening,
that is the time to invest in refactoring.

83
00:04:47.230 --> 00:04:50.338
So we have a question regarding whether or
not, so

84
00:04:50.338 --> 00:04:54.631
I recommend using the container
presentation model, where you have

85
00:04:54.631 --> 00:04:59.458
sort of what they call dumb components
versus components that are stateful.

86
00:04:59.458 --> 00:05:02.763
And so in general, we'll get over
into that a little bit in routing.

87
00:05:02.763 --> 00:05:03.609
But as a whole,

88
00:05:03.609 --> 00:05:08.037
the key thing when it comes to determining
the architecture of your components,

89
00:05:08.037 --> 00:05:12.419
I think, really boils down to that data
driven, just call that architecture.

90
00:05:12.419 --> 00:05:16.881
Because what I've seen is when people try
to follow too close to the presentational

91
00:05:16.881 --> 00:05:21.293
versus stateful components, oftentimes
they find themselves sort of wound in.

92
00:05:21.293 --> 00:05:25.523
They end up getting stuff tied up in
a knot regarding, but kinda this, and so

93
00:05:25.523 --> 00:05:28.323
using data driven refactoring,
I say, in general,

94
00:05:28.323 --> 00:05:32.081
if you know instantly, for example,
you're building a page layout.

95
00:05:32.081 --> 00:05:36.031
And let's say your designer has provided
you a three column layout, or a two-third,

96
00:05:36.031 --> 00:05:39.169
one-third, those are things that
I would say instantly, yeah, so

97
00:05:39.169 --> 00:05:42.380
I'll cover this a little bit in routing,
but you can create a layout.

98
00:05:42.380 --> 00:05:45.450
Basically, I would recommend creating
a layout folder where those components

99
00:05:45.450 --> 00:05:47.460
are specifically for layouts.

100
00:05:47.460 --> 00:05:49.687
And so those are instant wins.

101
00:05:49.687 --> 00:05:50.840
You don't even have to think about it.

102
00:05:50.840 --> 00:05:54.762
But otherwise, when it comes to
presentational layers, I would say let

103
00:05:54.762 --> 00:05:59.750
your app dictate that rather than trying
to predict what will happen in the future.

104
00:05:59.750 --> 00:06:04.120
That's the easiest way to, so know that
the presentation model is there for you.

105
00:06:04.120 --> 00:06:06.470
But as a whole, I would say just
focus on building things and

106
00:06:06.470 --> 00:06:07.840
it'll become obvious over time.

