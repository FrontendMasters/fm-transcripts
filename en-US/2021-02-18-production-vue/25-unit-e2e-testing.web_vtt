WEBVTT

1
00:00:00.130 --> 00:00:03.842
So I'm gonna make a statement here,
and that's the fact that,

2
00:00:03.842 --> 00:00:08.724
while unit tests are great, I would argue
that they're often not the 20% of tests

3
00:00:08.724 --> 00:00:11.140
that we really should be focusing on.

4
00:00:11.140 --> 00:00:14.301
Back to the Pareto principle,
like a lot of us are introduced to unit

5
00:00:14.301 --> 00:00:17.184
tests as our entry point into
testing because, oftentimes,

6
00:00:17.184 --> 00:00:20.580
it's sort of the simplest one
to wrap your mind around.

7
00:00:20.580 --> 00:00:24.838
So, the proverbial example is like
function at AB, test that A plus B equals,

8
00:00:24.838 --> 00:00:27.222
if A is one and B is one,
make sure it's two,

9
00:00:27.222 --> 00:00:29.840
this is like the proverbial unit test.

10
00:00:29.840 --> 00:00:33.853
But as we know, while this gives
the developer the sense of comfort and

11
00:00:33.853 --> 00:00:37.119
safety that their utility
function works correctly, or

12
00:00:37.119 --> 00:00:40.521
their component may work correctly,
at the end of the day,

13
00:00:40.521 --> 00:00:45.171
the person that really decides whether or
not our app actually works is the user.

14
00:00:45.171 --> 00:00:48.543
There's a saying where if you
can only have two tests for

15
00:00:48.543 --> 00:00:53.283
your entire application, especially
when it comes to these enterprise level

16
00:00:53.283 --> 00:00:58.130
applications, there are two that I always
basically demand that they create.

17
00:00:59.290 --> 00:01:01.750
And one is that, can the user login?

18
00:01:03.690 --> 00:01:05.950
and two, can the user pay us?

19
00:01:07.430 --> 00:01:11.210
Now, this might seem a little tongue and
cheek, but if you think about it,

20
00:01:11.210 --> 00:01:16.280
these two functionalities often represent
the core piece of the entire business.

21
00:01:16.280 --> 00:01:20.390
If either of these features break,
there is no business, right?

22
00:01:20.390 --> 00:01:25.561
There there's a real measurable dollar
impact on your applications at the end of

23
00:01:25.561 --> 00:01:31.290
the day, if the user can't log out great,
that's a bug, we can figure that out.

24
00:01:31.290 --> 00:01:34.473
And, if certain functionality doesn't
work, we can figure that out, but

25
00:01:34.473 --> 00:01:36.263
if users can't log in and they can't pay,

26
00:01:36.263 --> 00:01:39.790
you don't have a business and
you won't have an app to write for.

27
00:01:39.790 --> 00:01:42.622
And so it's a little tongue and
cheek, but the truth is,

28
00:01:42.622 --> 00:01:46.870
is that it's funny how very often, when it
comes to these applications, they don't

29
00:01:46.870 --> 00:01:51.410
test for this, there is no test that
reliably checks these things every time.

30
00:01:51.410 --> 00:01:55.978
But there might be a lot of unit tests,
but there's nothing checking this thing

31
00:01:55.978 --> 00:01:59.650
that is so
critical to the actual application itself.

32
00:01:59.650 --> 00:02:02.446
And so this is why it's important to what
we were talking about earlier regarding

33
00:02:02.446 --> 00:02:03.710
that Pareto principle.

34
00:02:03.710 --> 00:02:08.529
Is that we spend all this time on these
unit tests, which again are useful for

35
00:02:08.529 --> 00:02:13.550
shoring up our code and making it safe
over time for longevity purposes.

36
00:02:13.550 --> 00:02:16.976
But the real bugs that we need to at least
make sure we cover are the ones that

37
00:02:16.976 --> 00:02:18.691
could really tank the business, and

38
00:02:18.691 --> 00:02:21.930
oftentimes those are the ones
we're not paying attention to.

39
00:02:21.930 --> 00:02:26.211
And so these two tests or that 20%, they
represent 80% of the value that testing

40
00:02:26.211 --> 00:02:29.280
would provide in enterprise
level application.

41
00:02:29.280 --> 00:02:34.464
And so if you're thinking like, well,
my application doesn't receive payment,

42
00:02:34.464 --> 00:02:39.428
what I'm basically trying to emphasize
here is what is that critical path that if

43
00:02:39.428 --> 00:02:43.589
I took down that one feature and
it broke, chaos would break loose,

44
00:02:43.589 --> 00:02:47.410
everyone will need to hop on,
there would need to be a hotfix.

45
00:02:47.410 --> 00:02:49.716
If you can figure out
those critical paths,

46
00:02:49.716 --> 00:02:51.904
make sure those things are being tested.

47
00:02:54.072 --> 00:02:57.838
And so as a result rather than
entering at the unit level,

48
00:02:57.838 --> 00:03:02.781
I actually represent [LAUGH] I'm
recommending flipping that on its head and

49
00:03:02.781 --> 00:03:05.850
actually starting with end-to-end tests.

50
00:03:07.310 --> 00:03:10.951
Now, this is a little bit controversial
because most teams are most applications

51
00:03:10.951 --> 00:03:13.760
avoid E2Es entirely,
there are a couple of reasons for this.

52
00:03:13.760 --> 00:03:18.665
And that's one, well, traditionally,
when most people have experienced with

53
00:03:18.665 --> 00:03:21.520
end to end tests,
they take a long time to run.

54
00:03:21.520 --> 00:03:24.396
And in the testing where they call,
they're often flaky,

55
00:03:24.396 --> 00:03:27.420
which is another term for
being unreliable.

56
00:03:27.420 --> 00:03:32.305
And that complexity often leads to the
fact that here are no E2E tests at all,

57
00:03:32.305 --> 00:03:34.690
or if there are, people ignore it.

58
00:03:34.690 --> 00:03:37.455
They'll be like,
the E2E test pipeline's broken, yeah,

59
00:03:37.455 --> 00:03:39.590
but we need to push it out,
let's just ship it.

60
00:03:39.590 --> 00:03:43.009
I think the moment you're ignoring
broken tests and that they're failing,

61
00:03:43.009 --> 00:03:45.849
that's definitely an indication
that something is wrong, and

62
00:03:45.849 --> 00:03:49.549
either those tests need to get straight up
deleted or we need to reconsider things.

63
00:03:51.860 --> 00:03:54.378
Now, in my opinion,
one of the reasons end to end

64
00:03:54.378 --> 00:03:57.759
tests are typically considered
a behemoth for people to approach

65
00:03:57.759 --> 00:04:02.210
on an enterprise level is that we want to
be called perfectionist about everything.

66
00:04:02.210 --> 00:04:04.865
We want to cover every scenario
with end to end tests,

67
00:04:04.865 --> 00:04:07.990
meaning we got to cover every
single breakpoint, right?

68
00:04:07.990 --> 00:04:11.462
Whether it's mobile, tablet, laptop,
widescreen, let's cover it all,

69
00:04:11.462 --> 00:04:13.720
we gotta make sure it works everywhere.

70
00:04:13.720 --> 00:04:16.750
And let's not forget about
cross browser testing, right?

71
00:04:16.750 --> 00:04:19.792
Chrome, Firefox, Safari,
IE, IE11, Opera and

72
00:04:19.792 --> 00:04:22.969
any older browsers that we think,
our users are using,

73
00:04:22.969 --> 00:04:27.310
we need coverage on everything and
our one tool must do it all.

74
00:04:27.310 --> 00:04:28.990
And then on top of that, then it's like,

75
00:04:28.990 --> 00:04:31.353
we have to make sure we're
covering everything, right?

76
00:04:31.353 --> 00:04:36.107
Code coverage, we wanna make sure we see
those green bars lit up all the way,

77
00:04:36.107 --> 00:04:37.630
we want that 100%.

78
00:04:37.630 --> 00:04:40.851
And it's no wonder that at the end,
everyone's just like,

79
00:04:40.851 --> 00:04:42.910
this is way too much work.

80
00:04:42.910 --> 00:04:43.845
Right?
This is terrifying,

81
00:04:43.845 --> 00:04:46.373
because ,you put all this work,
you tried to do all of these things,

82
00:04:46.373 --> 00:04:48.960
and then it just breaks and
then you're just like, what was that for?

83
00:04:50.580 --> 00:04:53.653
And so what I wanna propose to you here is
when you're thinking about your test for

84
00:04:53.653 --> 00:04:56.365
your enterprise applications,
again, this is the 100% method,

85
00:04:56.365 --> 00:04:58.270
you want everything to be perfect.

86
00:04:58.270 --> 00:05:02.998
So I say, move back from that,
we don't need 100%, and arguably,

87
00:05:02.998 --> 00:05:06.340
you don't need all the browsers, either.

88
00:05:06.340 --> 00:05:09.658
Yes, you might have some users
that are on older versions of IE,

89
00:05:09.658 --> 00:05:13.899
but at this point we need to focus on that
Pareto principle, what is our 20% gain

90
00:05:13.899 --> 00:05:18.410
that 80%, and oftentimes it boils
down to one, maybe two browsers.

91
00:05:18.410 --> 00:05:22.342
And so your end-to-end test suite might
be as simple as we have a ton of desktop

92
00:05:22.342 --> 00:05:26.490
users on Chrome, and we know that a lot
of our mobile users are on Safari.

93
00:05:26.490 --> 00:05:30.520
So these are our two critical paths to
test, this is what we optimize for.

94
00:05:30.520 --> 00:05:34.791
Yes, we might have some things fall
through on the other browsers and devices,

95
00:05:34.791 --> 00:05:38.293
but at the same time, if you don't
have end to end tests at all, or

96
00:05:38.293 --> 00:05:42.710
ones that you can trust and rely upon,
you basically have no tests at all.

97
00:05:42.710 --> 00:05:47.178
And so it's funny seeing how some
people will argue they want it all, but

98
00:05:47.178 --> 00:05:51.120
if you have nothing,
this is monumentally better.

99
00:05:51.120 --> 00:05:54.561
And so, when it comes to
running end to end tests, also,

100
00:05:54.561 --> 00:05:58.796
tooling in particular in the past
like with things like selenium, for

101
00:05:58.796 --> 00:06:02.950
example have also been notoriously
difficult to work with.

102
00:06:02.950 --> 00:06:07.508
But there's been a lot of advancements
in the field, so the two frameworks that

103
00:06:07.508 --> 00:06:11.970
are very popular in the view
ecosystem are Cypress and TestCafe.

104
00:06:11.970 --> 00:06:14.299
And so, for those who haven't used either,

105
00:06:14.299 --> 00:06:17.020
definitely check them
out as end to end tools.

106
00:06:17.020 --> 00:06:19.608
Cypress in particular,
I have personal experience with that and

107
00:06:19.608 --> 00:06:21.690
I know a lot of people
really love Cypress.

108
00:06:21.690 --> 00:06:23.641
Is that, when you're running the test,

109
00:06:23.641 --> 00:06:27.544
it actually shows you what's happening in
the browser, so, you can debug your end

110
00:06:27.544 --> 00:06:31.260
to end tests, seeing your app running,
which is in my opinion, pretty huge.

111
00:06:31.260 --> 00:06:34.214
So you can basically time travel and
skip, but

112
00:06:34.214 --> 00:06:37.260
again, I could do a whole
workshop on testing.

113
00:06:39.180 --> 00:06:42.924
So, as you think about in E2E,
try give Cypress a try,

114
00:06:42.924 --> 00:06:47.240
give TestCafe a try, that is I
would say the best place to start.

115
00:06:49.620 --> 00:06:53.124
And actually the one thing I will plug
about Cypress which I've heard a lot of

116
00:06:53.124 --> 00:06:56.190
people say is that Cypress
makes testing fun.

117
00:06:56.190 --> 00:06:58.892
The way that especially
as front end developers,

118
00:06:58.892 --> 00:07:02.041
we love building things that
we love front end is because,

119
00:07:02.041 --> 00:07:06.347
that visual feedback is very immediate
from if you run or something on the page,

120
00:07:06.347 --> 00:07:10.540
you see it immediately and
you get to that feedback loop is so quick.

121
00:07:10.540 --> 00:07:13.923
Well Cypress basically does the same
thing with end-to-end test as far as

122
00:07:13.923 --> 00:07:14.735
creating a fast.

123
00:07:14.735 --> 00:07:18.079
Feedback loop that allows you to see
tests and then actually interact with it

124
00:07:18.079 --> 00:07:20.797
in the way that doesn't make you
dig through terminal logs and

125
00:07:20.797 --> 00:07:23.185
try to figure out which line is broken.

126
00:07:23.185 --> 00:07:27.715
So, yes, can't plug Cypress enough,
they do a fantastic job.

127
00:07:29.315 --> 00:07:33.603
So, in terms of writing our end to end
tests, first thing first that most people

128
00:07:33.603 --> 00:07:38.500
make the traditional mistake of is that
they try to maintain state between tests.

129
00:07:38.500 --> 00:07:42.284
Meaning you create dependency of like,
first I want you to on this test,

130
00:07:42.284 --> 00:07:46.253
I want you to click a button, and that
button will generate a token, and then

131
00:07:46.253 --> 00:07:50.950
in this test, I'm gonna take that token,
and then I'm gonna do something with it.

132
00:07:50.950 --> 00:07:54.666
This is probably the biggest mistake that
people make when it comes to end to end

133
00:07:54.666 --> 00:07:56.525
tests because in the event one breaks,

134
00:07:56.525 --> 00:07:59.927
basically you have this whole chain
effect where something's flaky.

135
00:07:59.927 --> 00:08:03.799
Because integration tests can be tricky
when it comes to databases going down or

136
00:08:03.799 --> 00:08:06.160
connections going out for example.

137
00:08:06.160 --> 00:08:11.069
And so if you need a token for a test,
just have that test independently,

138
00:08:11.069 --> 00:08:15.334
generate its own token or
figure out some sort of stub or mock for

139
00:08:15.334 --> 00:08:16.719
dealing with that.

140
00:08:16.719 --> 00:08:20.222
But that way the more you can decouple
your end to end test, the more reliable

141
00:08:20.222 --> 00:08:24.053
they will be, and you won't be like well,
the reason this test failed is because,

142
00:08:24.053 --> 00:08:27.670
three chains down the line,
this test really needed to do this thing.

143
00:08:27.670 --> 00:08:31.504
Make sure everything tests accordingly and
then that way it'll be easy instead

144
00:08:31.504 --> 00:08:34.078
of a line of red across
everything that's breaking,

145
00:08:34.078 --> 00:08:36.345
you know exactly what's breaking.

146
00:08:36.345 --> 00:08:39.437
So, in this regard thinking of our
end-to-end test a little bit like unit

147
00:08:39.437 --> 00:08:42.337
tests where we're trying to achieve
one thing without the dependency

148
00:08:42.337 --> 00:08:43.221
of everything else,

149
00:08:43.221 --> 00:08:46.584
is a really important way to be successful
at writing those end-to-end tests.

150
00:08:49.130 --> 00:08:53.869
And the other thing, I will call is more
of a pro tip less of a best practice,

151
00:08:53.869 --> 00:08:58.610
but in general, I would recommend when
you're doing element selectors is

152
00:08:58.610 --> 00:09:01.910
to avoid using them with CSS classes.

153
00:09:01.910 --> 00:09:06.464
And the reason for this is because, it's
an extremely brittle way to keep track of

154
00:09:06.464 --> 00:09:11.570
what element is doing what, as we know,
eventually code changes, CSS changes.

155
00:09:11.570 --> 00:09:15.581
And if you attach it to a CSS class,
you're basically attaching your

156
00:09:15.581 --> 00:09:19.959
testing hook to the styling, which
context wise has nothing to do with it.

157
00:09:19.959 --> 00:09:23.577
Whether the button uses a red
property to color it red or is blue,

158
00:09:23.577 --> 00:09:27.128
doesn't matter the test,
the test cares that it's a button,

159
00:09:27.128 --> 00:09:31.630
the test cares that the user clicks
the button and this thing happens.

160
00:09:31.630 --> 00:09:35.821
And so similarly, this is why the advice
here, is to really think from the user's

161
00:09:35.821 --> 00:09:38.900
perspective, and
really think about the intent.

162
00:09:38.900 --> 00:09:44.775
And so, a popular alternative to CSS
classes is the data test attribute,

163
00:09:44.775 --> 00:09:50.480
so you might be like data test
ID equals submit payment button.

164
00:09:50.480 --> 00:09:55.258
And so that's pretty good, because, what
you've done now is you've extracted this

165
00:09:55.258 --> 00:09:59.840
attribute that can theoretically then be
attached to any element that even if it's

166
00:09:59.840 --> 00:10:05.130
not actually a button, for example,
it would still click on the right thing.

167
00:10:05.130 --> 00:10:07.957
And so this is a perfectly
valid way to do it, but

168
00:10:07.957 --> 00:10:10.540
I would recommend think one step further.

169
00:10:10.540 --> 00:10:11.728
Because, at this point,

170
00:10:11.728 --> 00:10:14.870
we're still thinking from
the perspective of developers, right?

171
00:10:14.870 --> 00:10:18.930
We're thinking of how we can swap
things out and make it abstract.

172
00:10:18.930 --> 00:10:23.253
But it's the end to end test,
if the real impact that we're looking for

173
00:10:23.253 --> 00:10:27.504
is to make sure that things work for
users, then, actually selecting

174
00:10:27.504 --> 00:10:31.972
a button element that has a text submit
payment, is if you think about it,

175
00:10:31.972 --> 00:10:36.399
this is actually the correct the optimum
selector you're looking for.

176
00:10:36.399 --> 00:10:40.431
In this case, then you're actually
replicating the user's intent, and

177
00:10:40.431 --> 00:10:44.015
if you think about it from another way,
this has an added benefit of

178
00:10:44.015 --> 00:10:47.870
basically creating test accessibility
to some extent as well.

179
00:10:47.870 --> 00:10:52.928
Because now, if you have DIV
that's attached to submit payment,

180
00:10:52.928 --> 00:10:57.627
that's not gonna work from
a screen reader's perspective,

181
00:10:57.627 --> 00:10:59.990
you could do roll button.

182
00:10:59.990 --> 00:11:03.839
But we wanna try and think from the user's
perspective, and so as a result,

183
00:11:03.839 --> 00:11:07.573
selecting elements from an accessible
perspective in a way that they're

184
00:11:07.573 --> 00:11:11.870
looking for a link that does,
that has this text, that does this thing.

185
00:11:11.870 --> 00:11:15.617
This is probably the better route to
approach when it comes to ensuring that

186
00:11:15.617 --> 00:11:19.370
things work from the users perspective and
not just from our perspective.

