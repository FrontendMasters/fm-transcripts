WEBVTT

1
00:00:00.220 --> 00:00:03.660
So, pro tip,
single file component code block order.

2
00:00:05.330 --> 00:00:08.533
Here we have our my first component
that we have from earlier, right,

3
00:00:08.533 --> 00:00:12.120
we have our template block,
our script block, and our style block.

4
00:00:12.120 --> 00:00:15.264
And this is typically what we see when
we scaffold a vue application and

5
00:00:15.264 --> 00:00:17.830
what most people have as their snippets.

6
00:00:17.830 --> 00:00:21.176
But I'd like to propose that this
is actually not the optimum way for

7
00:00:21.176 --> 00:00:23.060
viewing our single file components.

8
00:00:24.320 --> 00:00:28.818
Because if we think about it another way,
when we're modifying our HTML and CSS, for

9
00:00:28.818 --> 00:00:33.191
example, right, we go from our template
down into our styles and from our styles,

10
00:00:33.191 --> 00:00:34.585
back up to our templates.

11
00:00:34.585 --> 00:00:38.865
On the other hand, when we want to modify
our JavaScript or our HTML on that regard,

12
00:00:38.865 --> 00:00:42.229
then guess what, we're going from
our template to our script and

13
00:00:42.229 --> 00:00:43.288
then right back up.

14
00:00:43.288 --> 00:00:48.188
And while on this particular file, because
frankly it's not very long, this doesn't

15
00:00:48.188 --> 00:00:52.910
seem too bad, but as most of us know,
like component files get pretty long.

16
00:00:52.910 --> 00:00:53.600
So what does this mean?

17
00:00:53.600 --> 00:00:56.647
This means that when you're in
the midst of styling your application,

18
00:00:56.647 --> 00:00:59.997
you're jumping from the template block,
all the way down to the style block,

19
00:00:59.997 --> 00:01:02.459
then kind of all the way back up,
but then into your like.

20
00:01:02.459 --> 00:01:05.589
And so the idea here is that the scope
of concern's really, as we can see,

21
00:01:05.589 --> 00:01:07.700
the shared concern is the template.

22
00:01:07.700 --> 00:01:10.022
Very rarely are you updating
the script blocks, so

23
00:01:10.022 --> 00:01:12.520
that you can update the style block.

24
00:01:12.520 --> 00:01:16.474
And so instead, what I'd like to
propose is going forward, try it out.

25
00:01:16.474 --> 00:01:19.777
I would recommend putting
the script block on the top first,

26
00:01:19.777 --> 00:01:23.793
rather than putting the template because
what you end up with instead is,

27
00:01:23.793 --> 00:01:28.097
the script can impact the template just
as you would normally want to, right?

28
00:01:28.097 --> 00:01:29.930
V bind V on whatever.

29
00:01:29.930 --> 00:01:33.230
But at the same time, when you're,
then basically updating styles,

30
00:01:33.230 --> 00:01:36.805
you already had that, you've optimized
basically scroll space and context

31
00:01:36.805 --> 00:01:40.980
switching when use it on, developers are
going through hundreds of lines of code.

32
00:01:40.980 --> 00:01:42.792
Because I think as we all know,
most of the time,

33
00:01:42.792 --> 00:01:45.900
the script block is one of the biggest
things inside of our components.

34
00:01:45.900 --> 00:01:48.249
So, rather than forcing us
to sort of live with that,

35
00:01:48.249 --> 00:01:50.960
there's nothing stopping
us from switching it.

36
00:01:50.960 --> 00:01:53.690
And so, this is personally how,
I like to do single file components.

37
00:01:53.690 --> 00:01:55.930
So that's why it's not
necessarily a best practice.

38
00:01:55.930 --> 00:01:59.468
I'd say, you and your team should give
it a try, see how you like it, but

39
00:01:59.468 --> 00:02:02.716
I found that as far as the ergonomics
from less context switching,

40
00:02:02.716 --> 00:02:05.010
this has worked out really well for me.

41
00:02:05.010 --> 00:02:08.390
All right, so,
component file organization.

42
00:02:08.390 --> 00:02:13.297
This one is a little bit controversial,
experience when I've talked about it.

43
00:02:13.297 --> 00:02:16.668
So, typically,
when we talk about component organization,

44
00:02:16.668 --> 00:02:19.986
most of us are used to nesting
everything in folders, right?

45
00:02:19.986 --> 00:02:21.960
So this is the traditional
nested structure.

46
00:02:21.960 --> 00:02:23.930
Here we have our components directory.

47
00:02:23.930 --> 00:02:26.800
And then we have this is these
are our dashboard components.

48
00:02:26.800 --> 00:02:28.490
These are our login components.

49
00:02:28.490 --> 00:02:30.700
And then we have our
test in a different one.

50
00:02:31.730 --> 00:02:34.828
And so, while a lot of times
when we're trading components,

51
00:02:34.828 --> 00:02:38.080
it feels really nice to
organize it this way.

52
00:02:38.080 --> 00:02:41.397
Instead, what I want to
propose to you is to instead,

53
00:02:41.397 --> 00:02:44.210
to use a flat structure instead.

54
00:02:44.210 --> 00:02:46.062
And so there's a couple reasons for this.

55
00:02:46.062 --> 00:02:49.874
When we take a look at the two different
file structures compared side by side,

56
00:02:49.874 --> 00:02:51.622
you'll notice a couple of things.

57
00:02:51.622 --> 00:02:54.694
One is that we no longer have
any folders and the reason for

58
00:02:54.694 --> 00:02:57.895
this is because you'll notice
that inside of dashboard and

59
00:02:57.895 --> 00:03:02.021
login, one of the things is that
there's a shared header.vue component.

60
00:03:02.021 --> 00:03:05.632
And we talked a little bit earlier
about naming components and

61
00:03:05.632 --> 00:03:07.933
while like ignoring the one word rule.

62
00:03:07.933 --> 00:03:12.421
And one of the problems with this is now
you have basically multiple components

63
00:03:12.421 --> 00:03:16.909
with the same names, and over time,
as we can imagine, as an app architecture

64
00:03:16.909 --> 00:03:21.601
scales, you're gonna get more and more
folders that basically contains similar

65
00:03:21.601 --> 00:03:26.780
components because people will go yeah,
I'm working on the shopping cart feature.

66
00:03:26.780 --> 00:03:29.594
So, I'm just going to build all
my components in shopping cart,

67
00:03:29.594 --> 00:03:31.340
in my shopping cart folder.

68
00:03:31.340 --> 00:03:35.520
And so, as you can sort of hear from
that scenario, you lose discoverability.

69
00:03:35.520 --> 00:03:37.640
First of all,
that's one of the biggest things you lose.

70
00:03:37.640 --> 00:03:41.225
Whereas like here on the right hand side,
we can see immediately that by the way,

71
00:03:41.225 --> 00:03:45.078
there's a generic header component, but
there's a dashboard header and there is a,

72
00:03:45.078 --> 00:03:47.270
in this case, login header.

73
00:03:47.270 --> 00:03:51.068
Another thing that flat, we sort of
recommend when it comes to like enterprise

74
00:03:51.068 --> 00:03:54.923
level applications is rather than keeping
your tests in a separate directory,

75
00:03:54.923 --> 00:03:59.030
actually having your unit test
live right next to the component.

76
00:03:59.030 --> 00:04:02.917
And what this allows you to do, as you can
see visually is you instantly know when

77
00:04:02.917 --> 00:04:05.560
a component does or does not have a test.

78
00:04:05.560 --> 00:04:06.765
And so especially as we, later on,

79
00:04:06.765 --> 00:04:09.530
we talked a little bit about code
coverage and those sort of things.

80
00:04:09.530 --> 00:04:13.846
This is the kind of thing that we want to
make it as easy as possible as it is for

81
00:04:13.846 --> 00:04:17.411
developers to instantly recognize
when something missing or

82
00:04:17.411 --> 00:04:19.210
something can be optimize on.

83
00:04:21.370 --> 00:04:25.752
And so, in this way, you can see now
that we can easily see what has tests,

84
00:04:25.752 --> 00:04:30.430
we can see what sort of relationship
components have with one another.

85
00:04:30.430 --> 00:04:32.220
And when it comes to things
like jumping around file.

86
00:04:32.220 --> 00:04:35.129
This makes it a lot easier because
now you can just do dashboard header,

87
00:04:35.129 --> 00:04:37.260
it'll just jump you to the right place.

88
00:04:37.260 --> 00:04:40.443
And more importantly, when it comes
to like refactoring components,

89
00:04:40.443 --> 00:04:43.350
you don't have to worry about
changing the file path now.

90
00:04:43.350 --> 00:04:46.731
So that's another optimization you end up
getting by keeping that flat directory

91
00:04:46.731 --> 00:04:47.273
structure.

92
00:04:49.494 --> 00:04:54.703
Now, while it does all these things
as far as making like file structure,

93
00:04:54.703 --> 00:04:58.484
like easier, and
then finding files is also easier,

94
00:04:58.484 --> 00:05:03.380
I know that a lot of people still
really enjoy using folders, right?

95
00:05:03.380 --> 00:05:07.356
And so, what I recommend as a base
rule when it comes to sort of working

96
00:05:07.356 --> 00:05:11.268
through whether or not nested or
flat works for your organization,

97
00:05:11.268 --> 00:05:15.810
is to at least avoid going beyond
one level deep a folder structures.

98
00:05:15.810 --> 00:05:17.926
Because as we can imagine,
we go back here,

99
00:05:17.926 --> 00:05:20.733
if dashboard inside dashboard
you have an admin folder and

100
00:05:20.733 --> 00:05:24.341
then the admin folder has more,
like you're basically end up scoping your

101
00:05:24.341 --> 00:05:28.790
application in a way that you basically
kind of lose sense of where everything is.

102
00:05:28.790 --> 00:05:31.866
And so, I don't know about you all,
but when I walk into a code base,

103
00:05:31.866 --> 00:05:35.160
it can be overwhelming sometimes to
like figure out where everything is,

104
00:05:35.160 --> 00:05:37.720
especially when it's heavily nested.

105
00:05:37.720 --> 00:05:42.815
And so a hybrid approach to this that some
people like like it's okay that like if

106
00:05:42.815 --> 00:05:47.774
your team likes having like page level
components that like really do scope.

107
00:05:47.774 --> 00:05:52.343
Then I would still recommend maintaining
that sort of like specific component

108
00:05:52.343 --> 00:05:56.562
naming, so that it's very clear that a,
this is the dashboard header,

109
00:05:56.562 --> 00:05:58.101
this is the login header.

110
00:05:58.101 --> 00:05:59.886
Because again, when we're importing,

111
00:05:59.886 --> 00:06:02.232
like while it's obvious in
the directory structure,

112
00:06:02.232 --> 00:06:05.560
when it comes to our actual markup,
you can't tell the difference, right?

113
00:06:05.560 --> 00:06:08.545
They both gonna say header if you keep
it the way that it's currently in

114
00:06:08.545 --> 00:06:09.260
the directory.

115
00:06:09.260 --> 00:06:13.060
So, that's like a hybrid way of doing it.

116
00:06:13.060 --> 00:06:18.680
And so, something to keep in mind as far
as like potential ways to manage that.

117
00:06:18.680 --> 00:06:19.561
One exam, so

118
00:06:19.561 --> 00:06:24.940
another pro tip regarding this is
registering your base components globally.

119
00:06:26.750 --> 00:06:28.180
And so, as we know, right,

120
00:06:28.180 --> 00:06:32.117
when we're doing things as common as
import base button, import space icon,

121
00:06:32.117 --> 00:06:35.100
this can be a little bit tedious
because over time, right,

122
00:06:35.100 --> 00:06:38.919
one of the reasons we import components
manually is because we're trying to

123
00:06:38.919 --> 00:06:43.450
tell the, our build tool that like hey,
only bring this in whenever you need to.

124
00:06:43.450 --> 00:06:47.070
And so in a way, we're basically
trying to optimize for performance.

125
00:06:47.070 --> 00:06:51.536
But when it comes to base components
that are basically like guaranteed to be

126
00:06:51.536 --> 00:06:55.165
used everywhere, it helps with
the ergonomics is simply just

127
00:06:55.165 --> 00:06:59.800
assume that those are available to you,
exactly as you would in HTML, right?

128
00:06:59.800 --> 00:07:03.073
Like imagine if every time you use HTML,
you have to import a div element than

129
00:07:03.073 --> 00:07:05.390
an H1 element, then a P element,
than a button out.

130
00:07:05.390 --> 00:07:07.110
Like that would be rather tedious.

131
00:07:07.110 --> 00:07:12.099
And so while you might lose out on some,
I don't know, you might have, honestly,

132
00:07:12.099 --> 00:07:16.880
might not even be noticeable, global
registration which was popularized with

133
00:07:16.880 --> 00:07:21.400
Chris Fritz is a script that you can
add inside of your main.js file.

134
00:07:21.400 --> 00:07:26.096
That will, so this is specific, but
it will basically automatically go through

135
00:07:26.096 --> 00:07:30.170
such all of the components that let's
say either you prefix with base.

136
00:07:30.170 --> 00:07:34.310
And so, as far as what you're wondering
like here is the line where it actually

137
00:07:34.310 --> 00:07:35.470
does the regex.

138
00:07:35.470 --> 00:07:37.800
So you can customize it to
whatever your team wants.

139
00:07:37.800 --> 00:07:42.490
But the idea is it says hey, for these
components that we know we're using a lot.

140
00:07:42.490 --> 00:07:45.169
We're going to go ahead and
register those as global elements so

141
00:07:45.169 --> 00:07:48.010
that every file doesn't have to
import base button, for example.

142
00:07:49.080 --> 00:07:52.530
And so this is a nice optimization for
applications.

143
00:07:52.530 --> 00:07:57.160
I'm using these base components and
something to basically keep in mind.

144
00:07:57.160 --> 00:08:01.144
And so, as far as the flat nested
directory, this is actually one example

145
00:08:01.144 --> 00:08:06.080
where I've also seen people will just
have a folder for their base components.

146
00:08:06.080 --> 00:08:08.630
And so they usually have it like at
an underscore base so that it's like

147
00:08:08.630 --> 00:08:11.760
alphabetically, like the top thing, and
then they'll group everything in there.

148
00:08:11.760 --> 00:08:15.394
And then again, one thing I can't
emphasize enough with the things

149
00:08:15.394 --> 00:08:19.282
we talked about today is a lot of these
things are like different ideas and

150
00:08:19.282 --> 00:08:22.370
perspectives for
you to consider for your team.

151
00:08:22.370 --> 00:08:25.165
It's not like if you don't import
all your global components,

152
00:08:25.165 --> 00:08:27.390
your thing is not enterprise grade level.

153
00:08:27.390 --> 00:08:30.707
No, these are techniques that are supposed
to be used to make app development faster

154
00:08:30.707 --> 00:08:32.260
because that's what we want, right?

155
00:08:32.260 --> 00:08:35.923
We want techniques for our teams that
allow us to not only, like basically to

156
00:08:35.923 --> 00:08:39.660
move quicker and build quicker,
in a way that's sustainable for everyone.

157
00:08:39.660 --> 00:08:41.325
So, I can't emphasize that enough and

158
00:08:41.325 --> 00:08:43.550
I'll probably be repeating
it throughout the day.

159
00:08:43.550 --> 00:08:46.396
But none of this is hardcore
like you have to do this,

160
00:08:46.396 --> 00:08:48.732
otherwise you're not enterprise grade.

161
00:08:48.732 --> 00:08:50.362
None of that is true.

162
00:08:50.362 --> 00:08:54.243
So we have question regarding how,
if you're organizing these components,

163
00:08:54.243 --> 00:08:58.179
like flat for example and they're all in
the same folder, how do you then manage

164
00:08:58.179 --> 00:09:02.790
between components using design patterns
like factories to generate components.

165
00:09:02.790 --> 00:09:06.457
So in those regards, that might for
example be a great exception where you

166
00:09:06.457 --> 00:09:10.362
might wanna go ahead and group your
factory components in a single directory,

167
00:09:10.362 --> 00:09:14.444
because you're indicating to your team
that like hey, we have this set of factory

168
00:09:14.444 --> 00:09:17.699
components that are being generated
with this design pattern and

169
00:09:17.699 --> 00:09:20.040
this is where you can
consistently find them.

170
00:09:20.040 --> 00:09:23.215
So that's how I would probably
approach that particular scenario and

171
00:09:23.215 --> 00:09:26.492
not mix it up with the rest of the
components that might have less, sort of

172
00:09:26.492 --> 00:09:30.130
more of that like standard component
functionality as opposed to generators.

173
00:09:30.130 --> 00:09:32.740
So, that would be my
approach to that scenario.

174
00:09:32.740 --> 00:09:35.988
So, we also have a question regarding,
so someone tried to,

175
00:09:35.988 --> 00:09:40.420
similarly move all the unit tests into
like the flat directory structure.

176
00:09:40.420 --> 00:09:43.075
And so when you do that,
it is important to go ahead and

177
00:09:43.075 --> 00:09:47.040
update like where the tests are being
watched inside of the config file.

178
00:09:47.040 --> 00:09:48.570
So, this is a great time.

179
00:09:48.570 --> 00:09:52.460
So I'd mentioned Chris Fritz who sort
of popularize the global import.

180
00:09:52.460 --> 00:09:56.595
If you, one of the resources that I
mentioned at the end is the vue enterprise

181
00:09:56.595 --> 00:09:57.890
boilerplate.

182
00:09:57.890 --> 00:10:01.073
The vue enterprise boilerplate
contains a lot of really like,

183
00:10:01.073 --> 00:10:04.495
this is where you're probably going
to get a lot of your snippets and

184
00:10:04.495 --> 00:10:06.490
basically analysis of code patterns.

185
00:10:06.490 --> 00:10:10.922
So, so going forward, so if you want to
like, what a lot of people have done is

186
00:10:10.922 --> 00:10:15.432
actually take Chris's vue enterprise
boilerplate and like basically forked

187
00:10:15.432 --> 00:10:19.710
it and then like customize it into
their team's needs basically.

188
00:10:19.710 --> 00:10:23.708
So to the point of like the tests for
example,

189
00:10:23.708 --> 00:10:29.190
I think this is in his,
I think it might be in this just config.

190
00:10:31.310 --> 00:10:34.552
So you can see that like in this
particular case, he's gone through and

191
00:10:34.552 --> 00:10:37.743
actually, I believe he's actually
customized some of the pieces for

192
00:10:37.743 --> 00:10:41.280
where to watch things, but that is one
of the things you would have to change.

193
00:10:41.280 --> 00:10:45.730
If you wanted your unit tests to also
exist on a flat directory structure.

194
00:10:45.730 --> 00:10:50.157
So that one is more of a, that one does
require a little bit more work but

195
00:10:50.157 --> 00:10:54.062
something to, it might be worth
doing from like and sort of a,

196
00:10:54.062 --> 00:10:57.692
call it an instinct code
coverage recognition process.

197
00:10:57.692 --> 00:11:00.338
And so for those wondering though,
I guess I'll just,

198
00:11:00.338 --> 00:11:04.166
this question immediately regarding
vue enterprise, boilerplate, it is, so

199
00:11:04.166 --> 00:11:06.215
it's built and based primarily in vue 2.

200
00:11:06.215 --> 00:11:09.852
And basically, I'm going forward
we'll eventually be creating a vue 3

201
00:11:09.852 --> 00:11:12.380
version of the vue enterprise boilerplate.

202
00:11:12.380 --> 00:11:14.542
But nonetheless,
a lot of the ideas in here and

203
00:11:14.542 --> 00:11:17.926
the scripts probably work for
the most part actually migrated over, but

204
00:11:17.926 --> 00:11:22.230
we will have an official vue enterprise
boilerplate for vue three in the future.

205
00:11:22.230 --> 00:11:25.860
So just something to keep in mind
as far as the versioning goes.

206
00:11:25.860 --> 00:11:28.260
So, there's also
a question regarding vues.

207
00:11:28.260 --> 00:11:31.430
And so of course, because vue is also
called vue, this is a little confusing.

208
00:11:31.430 --> 00:11:37.860
And so what first of this question,
this is referring to basically page vues.

209
00:11:37.860 --> 00:11:42.630
So in, basically we can imagine
if we had a vues folder here that

210
00:11:42.630 --> 00:11:44.790
contain the various pages.

211
00:11:44.790 --> 00:11:46.850
So this is when we talk about routing.

212
00:11:46.850 --> 00:11:50.230
So you have like a home vue
might have like an about vue.

213
00:11:50.230 --> 00:11:54.025
So, these components,
these vue components would not,

214
00:11:54.025 --> 00:11:58.330
they would not apply to that
flat directory structure.

215
00:11:58.330 --> 00:12:02.736
Because in this case, I would recommend
vue is actually really should be its own

216
00:12:02.736 --> 00:12:06.552
root level because every thinking
from like sort of the atomic design

217
00:12:06.552 --> 00:12:11.091
principle like vues encapsulate that page
level of like, it deals with routing,

218
00:12:11.091 --> 00:12:14.550
right, you might have route guards and
those sort of things.

219
00:12:15.630 --> 00:12:19.539
And then whereas everything components
really should be composed into those

220
00:12:19.539 --> 00:12:20.770
individual vues.

221
00:12:20.770 --> 00:12:25.320
So in that regard, I would recommend vues
staying on root level and then components

222
00:12:25.320 --> 00:12:29.034
being a separate root level folder
by root level, I mean on source.

223
00:12:29.034 --> 00:12:32.270
And that way you'll have
that separation of concerns.

224
00:12:32.270 --> 00:12:33.440
So, good question though.

225
00:12:33.440 --> 00:12:33.940
Thank you.

