WEBVTT

1
00:00:00.590 --> 00:00:01.543
All right.
To start off,

2
00:00:01.543 --> 00:00:05.710
we're gonna talk about the core languages
that make up our Vue.js application.

3
00:00:05.710 --> 00:00:09.560
And so we're gonna start with single file
components, which is probably one of

4
00:00:09.560 --> 00:00:13.320
the the backbone of a lot of what
makes Vue.js's developer experience.

5
00:00:13.320 --> 00:00:15.330
So ergonomic and fun to build on.

6
00:00:17.010 --> 00:00:20.720
As a quick overview for those who might
be new to Vue for the first time.

7
00:00:20.720 --> 00:00:24.744
The idea here is that you have these
files that have the extension .vue.

8
00:00:24.744 --> 00:00:28.772
And these .vue files are what we refer
to as, single file components or SFCs,

9
00:00:28.772 --> 00:00:31.290
that you'll see often
referred to in articles.

10
00:00:32.720 --> 00:00:35.980
And so, single file components
compose primarily of three parts.

11
00:00:35.980 --> 00:00:38.320
There is the template
which includes your HTML.

12
00:00:39.350 --> 00:00:40.333
There is the script block,

13
00:00:40.333 --> 00:00:42.700
which includes the JavaScript that
will be run within this file.

14
00:00:44.470 --> 00:00:48.736
And then as well as the style,
as far as containing it's CSS and

15
00:00:48.736 --> 00:00:51.890
anything that pertains
into this component.

16
00:00:51.890 --> 00:00:55.682
And for those wondering though, this will
automatically get like split out a build

17
00:00:55.682 --> 00:00:58.580
time into its various pieces,
so that it's performant.

18
00:00:58.580 --> 00:01:01.081
But as far as the ergonomics
of developing with it,

19
00:01:01.081 --> 00:01:04.979
single file components have proven to be
quite useful as far as keeping the scope

20
00:01:04.979 --> 00:01:06.860
of concerns all into one file.

21
00:01:06.860 --> 00:01:09.840
So, let's talk about the JavaScript
portion of the Vue app,

22
00:01:09.840 --> 00:01:13.900
which is basically the core right
of how we're building everything.

23
00:01:13.900 --> 00:01:16.513
The major discussion point right now,
when it comes to,

24
00:01:16.513 --> 00:01:20.960
in the JavaScript world is should I use
JavaScript or should I use TypeScript?

25
00:01:20.960 --> 00:01:23.659
Now, in my experience,
a lot of times the arguments for

26
00:01:23.659 --> 00:01:26.890
TypeScript tend to revolve
around trying to prevent bugs.

27
00:01:26.890 --> 00:01:30.931
But as far as production grade level apps,
a majority of the bugs often encountered

28
00:01:30.931 --> 00:01:34.560
in my experience are often not
actually due to type violations.

29
00:01:34.560 --> 00:01:36.516
And so the thing about TypeScript, right?

30
00:01:36.516 --> 00:01:39.460
Is that while it does a lot to
enhance the developer ergonomics of

31
00:01:39.460 --> 00:01:42.568
ensuring you're documenting what
code is expecting, as we know,

32
00:01:42.568 --> 00:01:45.900
TypeScript does not inherently
guarantee type safety, right?

33
00:01:45.900 --> 00:01:48.962
It requires discipline on the team's
part in order to do that correctly.

34
00:01:48.962 --> 00:01:51.466
When teams are considering whether or
not to do JavaScript or TypeScript,

35
00:01:51.466 --> 00:01:53.670
a lot of times they're also
talking about migrating to, right?

36
00:01:53.670 --> 00:01:56.230
They already have an app in JavaScript and
saying, well,

37
00:01:56.230 --> 00:01:58.260
is it worth switching to TypeScript?

38
00:01:58.260 --> 00:01:59.612
And because of the fact that again,

39
00:01:59.612 --> 00:02:02.780
most of the bugs we encountered these days
aren't necessarily due to type issues.

40
00:02:02.780 --> 00:02:07.008
I'm spending the time to ensure that your
entire code base has full type safety can

41
00:02:07.008 --> 00:02:10.550
be a significant cost to a team
in terms of productivity.

42
00:02:10.550 --> 00:02:13.566
And so when it turns to slowing down,
building new feature and

43
00:02:13.566 --> 00:02:17.510
then the things it has to be, we have to
be really careful when weighing whether or

44
00:02:17.510 --> 00:02:20.540
not it makes sense to migrate
from JavaScript to TypeScript.

45
00:02:22.820 --> 00:02:23.699
And so as a whole,

46
00:02:23.699 --> 00:02:27.868
instead of spending time trying to convert
our apps from JavaScript to TypeScript,

47
00:02:27.868 --> 00:02:31.720
most application would actually benefit
from better testing strategies.

48
00:02:31.720 --> 00:02:34.780
As well as improved code reviews,
in order to provide that,

49
00:02:34.780 --> 00:02:38.300
basically a more rigorous
structure that they can rely on.

50
00:02:38.300 --> 00:02:39.036
On top of that,

51
00:02:39.036 --> 00:02:42.950
what a lot of people don't know is because
a lot of us are using Visual Studio Code,

52
00:02:42.950 --> 00:02:46.846
type can actually be progressively added
into a codebase using JSDOc comments.

53
00:02:46.846 --> 00:02:48.574
Meaning that when you hover over it,

54
00:02:48.574 --> 00:02:52.470
you'll actually be able to see snippets
of basically what the types are.

55
00:02:52.470 --> 00:02:56.720
And so I'll make sure to include
a resource that y'all can see later.

56
00:02:56.720 --> 00:03:01.757
But this is something that again is very
much to the Vue sort of ethos as far

57
00:03:01.757 --> 00:03:06.548
as like, allowing you to achieve
the effect of documenting types but

58
00:03:06.548 --> 00:03:11.430
not in a way that requires you to
like overhaul your entire code base.

59
00:03:11.430 --> 00:03:15.427
And so for those who have done some
research as far as Vue and TypeScript when

60
00:03:15.427 --> 00:03:19.370
it came to Vue2, TypeScript was not
considered in the original design.

61
00:03:19.370 --> 00:03:23.030
So a lot of the ergonomics regarding
especially things like Vuex are kind of

62
00:03:23.030 --> 00:03:25.370
painful to hack around at the moment.

63
00:03:25.370 --> 00:03:30.039
So if your application is already in Vue2,
it's probably not worth it to upgrade it

64
00:03:30.039 --> 00:03:34.908
to TypeScript at this point because you're
probably more in the maintenance mode, and

65
00:03:34.908 --> 00:03:38.986
there are less benefits than people
think as far as like spending that time

66
00:03:38.986 --> 00:03:39.750
to upgrade.

67
00:03:42.140 --> 00:03:45.674
On the other hand, if you're starting
a brand new project from with Vue3,

68
00:03:45.674 --> 00:03:49.690
Vue3 has been completely rewritten
from the ground up using TypeScript.

69
00:03:49.690 --> 00:03:54.179
And so this means that tooling, especially
as the ecosystem continues to mature,

70
00:03:54.179 --> 00:03:58.030
we'll get a significantly better
as far as TypeScript support.

71
00:03:58.030 --> 00:04:01.297
And so if you and the team are interested
in trying out TypeScript and

72
00:04:01.297 --> 00:04:03.359
seeing how it works on
a brand new project,

73
00:04:03.359 --> 00:04:06.870
I definitely would recommend trying
it out on a brand new Vue3 project.

74
00:04:07.980 --> 00:04:09.848
And so the final piece of caution,

75
00:04:09.848 --> 00:04:13.910
I want to add when it comes to JavaScript
versus TypeScript is to understand

76
00:04:13.910 --> 00:04:16.887
the team makeup of whoever
is working on the code base.

77
00:04:16.887 --> 00:04:20.343
Because especially in today's world where
we have a lot of developers entering

78
00:04:20.343 --> 00:04:23.710
programming for the first time using
JavaScript as their primary language.

79
00:04:23.710 --> 00:04:28.051
This means that their familiarity with
things as strongly typed languages,

80
00:04:28.051 --> 00:04:30.130
these are not as familiar with them.

81
00:04:30.130 --> 00:04:33.222
So there is an on boarding cost in
addition to just the sheer fact of

82
00:04:33.222 --> 00:04:35.020
migrating everything over.

83
00:04:35.020 --> 00:04:40.661
So being cognizant of that mental overhead
as far as pushing a team forward, pushing

84
00:04:40.661 --> 00:04:46.490
a team forward on time is important to
consider when making those decisions.

85
00:04:46.490 --> 00:04:48.948
So we have a question regarding whether or

86
00:04:48.948 --> 00:04:53.655
not these like typing applies to proptypes
and so in this regard on Vue2 because

87
00:04:53.655 --> 00:04:57.463
props already inherently have
the ability to give basic types.

88
00:04:57.463 --> 00:05:01.489
I think that and custom validators that
usually will do the tricks far as typing

89
00:05:01.489 --> 00:05:05.410
your props without converting your
whole code base into TypeScript.

90
00:05:05.410 --> 00:05:09.971
But again, if your team does find
the value in enhancing the entire

91
00:05:09.971 --> 00:05:15.300
application to TypeScript,
it certainly can be used with prop types.

92
00:05:15.300 --> 00:05:18.786
&gt;&gt; Discussion with a colleague yesterday,
actually,

93
00:05:18.786 --> 00:05:24.610
we were wondering why Vue is recommending
export default for single file components.

94
00:05:24.610 --> 00:05:27.630
And if you're not sure, it's okay,
since it just came up yesterday and

95
00:05:27.630 --> 00:05:30.620
I saw it in your slide example,
I thought I'd ask.

96
00:05:30.620 --> 00:05:31.290
&gt;&gt; Okay, got it.

97
00:05:31.290 --> 00:05:34.690
So, there is a question regarding,
why Vue, by default,

98
00:05:34.690 --> 00:05:39.970
in single file components uses the export
default rather than sort of named exports.

99
00:05:39.970 --> 00:05:44.189
And so from what I understand, Vue will
actually do its part to actually like pull

100
00:05:44.189 --> 00:05:47.010
out the name of the component and
those things.

101
00:05:47.010 --> 00:05:50.945
So it does a little bit of optimization as
far as helping like sort of name bundles

102
00:05:50.945 --> 00:05:52.790
and point them to the right places.

103
00:05:52.790 --> 00:05:57.123
So, as far as I'm aware,
that's why export default is what we use,

104
00:05:57.123 --> 00:06:00.800
by default, lots of defaults
on single file components.

