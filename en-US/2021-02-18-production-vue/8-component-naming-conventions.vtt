WEBVTT

1
00:00:00.270 --> 00:00:03.769
Let's kick it off to talk about
components which really are the life and

2
00:00:03.769 --> 00:00:06.230
blood of most front end
applications these days.

3
00:00:06.230 --> 00:00:08.620
This is why frameworks have become so
popular.

4
00:00:08.620 --> 00:00:11.197
It's because when we have
applications that are large,

5
00:00:11.197 --> 00:00:15.560
we need ways to break it down into smaller
pieces so that they're easier to maintain.

6
00:00:15.560 --> 00:00:20.265
But of course the question is at scale,
what are some call it best practices and

7
00:00:20.265 --> 00:00:24.250
ideas that might help you
better manage your components.

8
00:00:24.250 --> 00:00:28.842
Let's start with the very basics which is
when it comes to naming your components,

9
00:00:28.842 --> 00:00:31.350
here are some conventions
that I recommend.

10
00:00:32.670 --> 00:00:35.654
So there's a great Drake meme
where you can see at the very top,

11
00:00:35.654 --> 00:00:39.870
he's like, What I don't wanna do which
is in this case it's actual programming.

12
00:00:39.870 --> 00:00:43.788
Whereas debating how to name a variable
for 30 minutes is something that we often

13
00:00:43.788 --> 00:00:47.450
have probably encountered as far as
bike shedding and those sort of things.

14
00:00:49.720 --> 00:00:53.294
So as far as best practice goes,
generally speaking,

15
00:00:53.294 --> 00:00:58.360
avoid using single word components when
it comes to naming your components.

16
00:00:58.360 --> 00:01:02.600
So whether it's header, button is
the most egregious version of this.

17
00:01:04.010 --> 00:01:05.910
And the reason why for
this is quite simple.

18
00:01:05.910 --> 00:01:08.756
It's because we want to try and

19
00:01:08.756 --> 00:01:13.909
avoid conflicts with basically
standard HTML5 spec.

20
00:01:13.909 --> 00:01:17.844
While you might say that although
sometimes we're using Pascal case very

21
00:01:17.844 --> 00:01:21.907
consistently, like it's just better to
avoid these sort of things in order

22
00:01:21.907 --> 00:01:24.909
to provide that sort of
alignment with the HTML5 spec.

23
00:01:24.909 --> 00:01:28.871
Which vue actually tries to do a lot
as well because we want to allow you to

24
00:01:28.871 --> 00:01:31.290
leverage what you already know.

25
00:01:31.290 --> 00:01:33.801
And then build on top of that rather
than having you to learn something

26
00:01:33.801 --> 00:01:35.000
totally different.

27
00:01:35.000 --> 00:01:40.179
So an example of this would be like filter
which is the functionality in vue two,

28
00:01:40.179 --> 00:01:42.200
uses that pipe symbol.

29
00:01:42.200 --> 00:01:46.070
And so one of the reasons it is been
deprecated from vue 3 while it's some

30
00:01:46.070 --> 00:01:49.814
people did support sort of they like
using it is because the JavaScript

31
00:01:49.814 --> 00:01:54.257
is actually thinking about implementing
their own single pipe operator in order to

32
00:01:54.257 --> 00:01:55.360
do something.

33
00:01:55.360 --> 00:01:57.570
There's a whole spec on that.

34
00:01:57.570 --> 00:02:02.771
But basically, this means now that if you
were to keep the single pipe operator as

35
00:02:02.771 --> 00:02:08.125
like standard view syntax, now there will
always be that question of is this the vue

36
00:02:08.125 --> 00:02:14.010
single pipe operator or is this the
JavaScript single pipe basically operator.

37
00:02:14.010 --> 00:02:17.979
And so in this regard, this is one of the
reasons why like whenever we pretending

38
00:02:17.979 --> 00:02:22.009
everything like v dash for the directives
and like the sort of the events as well,

39
00:02:22.009 --> 00:02:25.730
so that it's very clear what's
coming from vue and what's not.

40
00:02:25.730 --> 00:02:29.938
And so just like this, even if you're
using Pascal case for your components,

41
00:02:29.938 --> 00:02:33.790
please just avoid single word
components as much as humanly possible.

42
00:02:35.310 --> 00:02:39.098
And so instead we recommend basically
prefixing it with some sort of

43
00:02:39.098 --> 00:02:41.770
like indicator whether it's an app.

44
00:02:41.770 --> 00:02:45.552
And especially the most common one that's
used especially when you're doing things

45
00:02:45.552 --> 00:02:46.234
like inputs and

46
00:02:46.234 --> 00:02:49.979
like you're trying to read like you're
simply wrapping an existing HTML element.

47
00:02:49.979 --> 00:02:54.779
Then calling it base is a really common
way of basically naming your components in

48
00:02:54.779 --> 00:02:59.245
a way that makes it very clear that,
hey, this is a base button, right?

49
00:02:59.245 --> 00:03:02.063
It's like it's basically
the button element, but

50
00:03:02.063 --> 00:03:04.505
this is like this is
coming from the vue side.

51
00:03:04.505 --> 00:03:07.937
This is coming from developers who have
defined it differently than what is being

52
00:03:07.937 --> 00:03:09.455
provided by the browser natively.

53
00:03:09.455 --> 00:03:14.437
And so you can see examples of this
include AppButton, AppModal, BaseDropdown,

54
00:03:14.437 --> 00:03:15.610
BaseInput.

55
00:03:15.610 --> 00:03:19.360
These are ways to sort of take care of
those scenarios where you might want to

56
00:03:19.360 --> 00:03:21.960
typically just use one word,
add that base to it.

57
00:03:21.960 --> 00:03:25.600
It'll make your life a lot easier when
you're scaling your application long term.

58
00:03:27.740 --> 00:03:31.664
In any instance where you have single
instance components where basically you

59
00:03:31.664 --> 00:03:34.350
can only have one on
the page at any given time.

60
00:03:34.350 --> 00:03:38.935
It's actually one of the sort of advice
I can provide you is to prefix it

61
00:03:38.935 --> 00:03:40.830
with The instead.

62
00:03:40.830 --> 00:03:44.827
So in this case, you can see like
example of this include TheShoppingCart,

63
00:03:44.827 --> 00:03:46.960
TheSidebar, TheNavbar.

64
00:03:46.960 --> 00:03:50.629
The reason for this is just because while
it's not gonna do anything at compile

65
00:03:50.629 --> 00:03:54.298
time, there is something about that
developer ergonomic when like if you're

66
00:03:54.298 --> 00:03:57.704
rendering something that sort of has
that small little bit of a red flag.

67
00:03:57.704 --> 00:04:01.210
That's like, I'm running a V4
loop on the shopping cart.

68
00:04:01.210 --> 00:04:03.760
Like that's a little weird.

69
00:04:03.760 --> 00:04:06.479
And so when people see multiple instances,

70
00:04:06.479 --> 00:04:09.429
that can be basically a red flag for
either one.

71
00:04:09.429 --> 00:04:11.876
They shouldn't be existing
on the same page.

72
00:04:11.876 --> 00:04:16.690
Or two, if you're like, no, no, no, we
actually can have multiple shopping carts.

73
00:04:16.690 --> 00:04:20.341
This also is a great way of indicating
maybe it's time to refactor to something

74
00:04:20.341 --> 00:04:23.480
more generic rather than or
even renaming it entirely.

75
00:04:23.480 --> 00:04:27.960
So a nice way of communicating there
should only be one without sort of

76
00:04:27.960 --> 00:04:29.900
clogging up your bill tools.

77
00:04:33.635 --> 00:04:37.054
And so in addition to this when
it comes to naming components,

78
00:04:37.054 --> 00:04:40.410
we strongly recommend trying to
name the tightly coupled and

79
00:04:40.410 --> 00:04:44.770
related components together in
a way that strings it over time.

80
00:04:44.770 --> 00:04:48.044
So there are a lot of benefits to this
as far as not only being able to easily

81
00:04:48.044 --> 00:04:51.750
spot that relationship, but when it comes
to the file tree and sort of like reading

82
00:04:51.750 --> 00:04:55.430
it out, you can see that they're
nested right next to each other.

83
00:04:55.430 --> 00:04:59.480
And then you always get that like
consistency as far as what to expect.

84
00:04:59.480 --> 00:05:02.884
So in our example here, you can see
that we have a ToDoList component and

85
00:05:02.884 --> 00:05:06.517
then we have a ToDoListItem component and
then if you wanna go even further,

86
00:05:06.517 --> 00:05:08.800
we could have TodoListItemName.

87
00:05:08.800 --> 00:05:12.000
Now some of you may be thinking,
well, that names kind of long.

88
00:05:12.000 --> 00:05:15.975
But again, one with autocomplete these
days long names shouldn't be like we're

89
00:05:15.975 --> 00:05:19.990
not actually typing more as far as
like autocompletion and those things.

90
00:05:19.990 --> 00:05:21.360
But more importantly,

91
00:05:21.360 --> 00:05:25.743
the reason this is important is because
this allows you to designate to other

92
00:05:25.743 --> 00:05:30.410
developers that this item should
really be used in this context, right?

93
00:05:30.410 --> 00:05:33.544
And so if you see a ToDoList
show up in a shopping cart,

94
00:05:33.544 --> 00:05:37.740
that's gonna be weird just based
on that naming structure alone.

95
00:05:37.740 --> 00:05:41.359
Whereas if you did something generic like
list item, you're more prone to see people

96
00:05:41.359 --> 00:05:45.200
just sort of reusing components in places
where it probably wasn't meant to be.

97
00:05:45.200 --> 00:05:48.634
And then what you might end up getting to
is that with an architecture that scales

98
00:05:48.634 --> 00:05:52.223
and developers working on different pieces
at different times, people will start

99
00:05:52.223 --> 00:05:55.427
cramming functionality that might not
be related to even to do this item.

100
00:05:55.427 --> 00:05:58.026
But because we call that list item and
someone's like, yeah,

101
00:05:58.026 --> 00:05:59.660
that's kind of what I needed.

102
00:05:59.660 --> 00:06:00.574
And then they use that,

103
00:06:00.574 --> 00:06:03.510
you're gonna end up with just
basically conflicts over time.

104
00:06:03.510 --> 00:06:07.080
And so the better thing to do is
just to like what I had to do too,

105
00:06:07.080 --> 00:06:08.816
you get used to the long name.

106
00:06:08.816 --> 00:06:12.986
And then as a benefit too, you'll see
that if you find that to do this item for

107
00:06:12.986 --> 00:06:15.985
example is starting to be
like some functionality is so

108
00:06:15.985 --> 00:06:18.808
generic that to do list item,
shopping cart item.

109
00:06:18.808 --> 00:06:22.952
And those things are starting to be so
related that you're like they really

110
00:06:22.952 --> 00:06:27.291
should be refactored, then that is a great
time to maybe create a base list item

111
00:06:27.291 --> 00:06:31.335
component that then extends into to
do list item and shopping cart item.

112
00:06:31.335 --> 00:06:35.005
And that way you can still scope your
functionality in a way that again doesn't

113
00:06:35.005 --> 00:06:38.966
clog up build tools, but it makes it very
declarative to developers going forward.

114
00:06:38.966 --> 00:06:42.970
They are like yeah, all this stuff
we take the base list component and

115
00:06:42.970 --> 00:06:47.667
then we extend on to do functionality and
again, it should only be used in the to do

116
00:06:47.667 --> 00:06:51.980
list context and versus the same
thing with shopping cart, right?

117
00:06:51.980 --> 00:06:54.900
Base list item extended with
shopping cart functionality.

118
00:06:54.900 --> 00:06:57.100
And then you get that shareability but

119
00:06:57.100 --> 00:07:02.110
without like the complication of being
like which list item are you referring to?

120
00:07:02.110 --> 00:07:04.637
So this one I highly
recommend trying out for

121
00:07:04.637 --> 00:07:07.170
especially as applications grow in scale.

122
00:07:10.080 --> 00:07:12.390
Okay, Naming Component Methods.

123
00:07:12.390 --> 00:07:15.735
This is something that
there's some debate about but

124
00:07:15.735 --> 00:07:20.960
in general, when it comes to defining
like the callback function, right?

125
00:07:20.960 --> 00:07:23.360
When the user clicks on something,
what am I gonna call that function?

126
00:07:24.580 --> 00:07:27.810
It's tempting to say things
like the event on click, okay?

127
00:07:27.810 --> 00:07:29.610
Well at click equals on click, right?

128
00:07:29.610 --> 00:07:31.530
And then I'll call my method on click.

129
00:07:31.530 --> 00:07:35.310
But generally speaking, this is we're
basically prescribing how like in

130
00:07:35.310 --> 00:07:37.590
the name, we're prescribing how it works,

131
00:07:37.590 --> 00:07:42.100
when in reality what we want to do is use
a descriptive name that provides context.

132
00:07:42.100 --> 00:07:46.852
So on input doesn't tell us anything
besides the fact that it's gonna trigger

133
00:07:46.852 --> 00:07:47.500
on input,

134
00:07:47.500 --> 00:07:52.940
except that's already told to us because
we already have that V on input happening.

135
00:07:52.940 --> 00:07:55.660
So it's a redundancy and
doesn't provide additional context.

136
00:07:55.660 --> 00:07:58.456
Whereas if we use something like
update username for example,

137
00:07:58.456 --> 00:08:01.370
that tells us instantly
what we're attaching it to.

138
00:08:01.370 --> 00:08:04.684
More importantly, overall you can't
assume that the event will be like

139
00:08:04.684 --> 00:08:06.810
that method will be called in that place.

140
00:08:06.810 --> 00:08:10.254
Because now if you called on input
equals on input, in the event or

141
00:08:10.254 --> 00:08:13.460
some other event that's going
to trigger the same thing.

142
00:08:13.460 --> 00:08:16.735
Now you're gonna be stuck in that
position where well technically it's not

143
00:08:16.735 --> 00:08:17.560
on input anymore.

144
00:08:17.560 --> 00:08:18.430
Now it's on click.

145
00:08:18.430 --> 00:08:19.830
So what are we gonna do?

146
00:08:19.830 --> 00:08:21.567
And so to skip the headache entirely,

147
00:08:21.567 --> 00:08:25.260
it's better to just use those descriptive
name that not only provide context but

148
00:08:25.260 --> 00:08:28.682
it basically just a little bit of
documentation to developers who are gonna

149
00:08:28.682 --> 00:08:32.180
come to the code base and have a better
understanding of what's happening.

150
00:08:33.790 --> 00:08:39.130
And so yep, those are the key things I
want you to take away from the slide.

151
00:08:43.510 --> 00:08:46.127
And then this is more of
a generic JavaScript thing but

152
00:08:46.127 --> 00:08:50.257
again worth mentioning because over time
when it comes to scaling your methods, for

153
00:08:50.257 --> 00:08:53.746
example, when as we have multiple
arguments inside of our methods, so

154
00:08:53.746 --> 00:08:55.452
in this case update user, right?

155
00:08:55.452 --> 00:08:58.700
We have userList index value is online.

156
00:08:58.700 --> 00:09:01.210
All of these are different things
that matter to our method.

157
00:09:01.210 --> 00:09:04.521
But this is a lot for developers
especially who if you weren't the one who

158
00:09:04.521 --> 00:09:07.557
wrote it or frankly even if you
wrote it cuz I don't know about you,

159
00:09:07.557 --> 00:09:10.770
I've forgotten multiple times
what order things come in.

160
00:09:10.770 --> 00:09:15.013
It's hard to use that because if you're
trying to use this method in other places,

161
00:09:15.013 --> 00:09:17.934
now you have to be like was it userList,
item, value?

162
00:09:17.934 --> 00:09:21.300
I actually got it right this time,
usually I get it wrong.

163
00:09:21.300 --> 00:09:23.222
But rather than doing it this way,

164
00:09:23.222 --> 00:09:27.320
it's recommended instead to do
it with the destruction method.

165
00:09:27.320 --> 00:09:32.580
So as you can see on the top, we just have
it listed out where it's a fixed order.

166
00:09:32.580 --> 00:09:36.176
And then by simply creating an object
around it, this allows users to

167
00:09:36.176 --> 00:09:39.648
actually define what they're looking for
and not have to remember

168
00:09:39.648 --> 00:09:44.010
that like if I don't need user list I have
to define all here and then going forward.

169
00:09:44.010 --> 00:09:48.739
So just a quick JavaScript tip for
just creating methods that

170
00:09:48.739 --> 00:09:53.468
are easier to use and
basically have a more accessible API for

171
00:09:53.468 --> 00:09:58.401
new developers who aren't used
to using certain signatures.

172
00:09:58.401 --> 00:10:02.057
So yeah, so
we can see here that it's broken down into

173
00:10:02.057 --> 00:10:06.531
our four elements which then
basically allows us to say recommend

174
00:10:06.531 --> 00:10:10.700
using the destructuring arguments
over multiple arguments

