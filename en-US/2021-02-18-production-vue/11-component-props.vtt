WEBVTT

1
00:00:00.130 --> 00:00:04.482
So first thing when it comes to component
is one of the most basic techniques we all

2
00:00:04.482 --> 00:00:07.690
learn when we first start
using vue is our props, right?

3
00:00:07.690 --> 00:00:11.740
Because we want to be able to passing down
and define them at the component level.

4
00:00:13.600 --> 00:00:16.966
And so here we have a basic nav
item.vue as a quick overview for

5
00:00:16.966 --> 00:00:20.461
those who might be a little newer
to vue we have our script block on

6
00:00:20.461 --> 00:00:22.750
the top that has the props of label.

7
00:00:22.750 --> 00:00:26.650
And inside of our template,
we go ahead and use it inside of the href.

8
00:00:26.650 --> 00:00:31.020
And we also use it as the actual text
that's rendered on the anchor element.

9
00:00:32.800 --> 00:00:37.840
And so here, yep, and
then we have these two down here, okay.

10
00:00:39.040 --> 00:00:42.306
So how that might work is if
we have like a Navbar.vue,

11
00:00:42.306 --> 00:00:46.992
for example, that component that will
then pass down its label into the prop,

12
00:00:46.992 --> 00:00:50.960
which goes ahead and
propagates our HTML accordingly.

13
00:00:50.960 --> 00:00:55.500
So this should all be fairly familiar
to you if you already use props.

14
00:00:55.500 --> 00:01:00.331
Now knowing those things you'll
see that we're using the props as

15
00:01:00.331 --> 00:01:02.280
defined as an array.

16
00:01:02.280 --> 00:01:04.890
And it's simply defined as like
the the label in this case.

17
00:01:04.890 --> 00:01:06.874
And so for production level vue apps,

18
00:01:06.874 --> 00:01:11.200
I would recommend just staying away
from defining props as an array.

19
00:01:11.200 --> 00:01:13.570
And so is it like you should never use it?

20
00:01:13.570 --> 00:01:14.850
No, it's not that you should never use it.

21
00:01:14.850 --> 00:01:17.189
It's pretty good for
if you're just prototyping something and

22
00:01:17.189 --> 00:01:18.830
just want something to get passed through.

23
00:01:18.830 --> 00:01:22.313
But when it comes to scaling
your application and components,

24
00:01:22.313 --> 00:01:26.453
a little bit more documentation is
important because actually right now if

25
00:01:26.453 --> 00:01:29.674
you think about it label can
take basically anything, and

26
00:01:29.674 --> 00:01:32.650
developers would have no
idea how to properly use it.

27
00:01:34.530 --> 00:01:39.740
So here we have our problem actually
then define as the object syntax here.

28
00:01:39.740 --> 00:01:43.493
So the props is an object that takes
basically different keys that provide

29
00:01:43.493 --> 00:01:45.100
the actual props.

30
00:01:45.100 --> 00:01:46.072
And so in this case,

31
00:01:46.072 --> 00:01:49.341
you'll see there are three different
labels that are being sorry,

32
00:01:49.341 --> 00:01:53.940
three different attributes that are being
appended to the label that we're defining.

33
00:01:53.940 --> 00:01:56.332
The first of which is the actual type,
so in this case,

34
00:01:56.332 --> 00:01:58.950
we want the label to actually be a string.

35
00:01:58.950 --> 00:02:01.638
And then on top of that, on the prop,
you can also define whether or

36
00:02:01.638 --> 00:02:02.750
not it's required or not.

37
00:02:03.750 --> 00:02:04.605
And so with that,

38
00:02:04.605 --> 00:02:08.270
what we're going to see here is that
by default is going to be false, right?

39
00:02:08.270 --> 00:02:10.630
We're going to assume
most props are optional.

40
00:02:10.630 --> 00:02:13.811
But otherwise when it comes
to the default state of it,

41
00:02:13.811 --> 00:02:15.890
we actually can provide a value.

42
00:02:15.890 --> 00:02:16.708
In this case,

43
00:02:16.708 --> 00:02:22.080
we can provide a default value that then
basically whenever you don't pass a prop.

44
00:02:22.080 --> 00:02:25.310
It will go ahead and
default to that current value.

45
00:02:25.310 --> 00:02:28.707
So this is actually fairly standard I've
seen on a lot of different enterprise

46
00:02:28.707 --> 00:02:31.130
level apps where we go ahead and
it makes sense, right?

47
00:02:31.130 --> 00:02:33.417
You've defined the type you've
defined that is required, and

48
00:02:33.417 --> 00:02:35.490
you've defined that there's a default.

49
00:02:35.490 --> 00:02:38.987
But if we think about what the purpose
of each one is, since you already have

50
00:02:38.987 --> 00:02:42.220
a default It's not really necessary
to actually have the required.

51
00:02:42.220 --> 00:02:44.450
And in fact, I would call it a redundancy.

52
00:02:44.450 --> 00:02:47.699
So going forward, I would say,
as you're writing out your prompts,

53
00:02:47.699 --> 00:02:49.020
if you have a default value,

54
00:02:49.020 --> 00:02:52.450
no need to define that it's required
because it will always have a value.

55
00:02:52.450 --> 00:02:56.420
Otherwise, vice versa, If you don't have a
default, then it should be required true.

56
00:02:56.420 --> 00:02:59.148
So this should shorten your prop
definitions a little bit because instead

57
00:02:59.148 --> 00:03:00.648
of two, three lines, now you have two.

58
00:03:02.997 --> 00:03:06.637
The other thing that most people don't
know is that props can actually take

59
00:03:06.637 --> 00:03:08.610
a custom validator function.

60
00:03:08.610 --> 00:03:12.418
So we can teach you that with props,
as long as you define the validator, it is

61
00:03:12.418 --> 00:03:16.695
basically a function that will provide you
the value that's being passed down, and it

62
00:03:16.695 --> 00:03:21.520
will basically check whether or not this
is, will try like a true and false value.

63
00:03:21.520 --> 00:03:24.190
That will then actually air
out inside the console.

64
00:03:24.190 --> 00:03:28.261
And so this is pretty cool because now
even if you're not using TypeScript, for

65
00:03:28.261 --> 00:03:32.870
example, you can basically add like
more specific typing to your props.

66
00:03:32.870 --> 00:03:36.930
So in this particular case for our label
in this, the product only wants us to be

67
00:03:36.930 --> 00:03:41.100
able to do like home and about like,
you should not take anything else.

68
00:03:41.100 --> 00:03:42.889
So using our validator function,

69
00:03:42.889 --> 00:03:46.526
we can actually say that hey in this
array of valid values, go ahead and

70
00:03:46.526 --> 00:03:51.170
check against that, and if it exists
inside the valid value, we're good to go.

71
00:03:51.170 --> 00:03:54.590
Otherwise, go ahead and
flag an error for that.

72
00:03:56.660 --> 00:04:00.491
And so yeah, this is one of those things
that a lot of people don't realize exists,

73
00:04:00.491 --> 00:04:03.997
but is super valuable as far as providing
additional documentation for your

74
00:04:03.997 --> 00:04:07.530
developers as they use things and just
making sure that they work as expected

