WEBVTT

1
00:00:00.450 --> 00:00:01.962
When it comes to testing,

2
00:00:01.962 --> 00:00:06.740
I want to start off with the something
called the Pareto Principle.

3
00:00:06.740 --> 00:00:09.848
And so, the reason this is an important
concept that we're going to leverage sort

4
00:00:09.848 --> 00:00:12.430
of going through as we talk about testing.

5
00:00:12.430 --> 00:00:14.686
For those who don't know what
the Pareto principle is,

6
00:00:14.686 --> 00:00:16.560
you might also know it as the 80-20 rule.

7
00:00:18.180 --> 00:00:22.490
And the way it works,
the principle behind it is that,

8
00:00:22.490 --> 00:00:27.190
20% of the effort often
yields to 80% of the results.

9
00:00:27.190 --> 00:00:31.919
And so this is traditionally spoken about
in sales from like 20% of your clients

10
00:00:31.919 --> 00:00:34.520
represents 80% of your sales.

11
00:00:34.520 --> 00:00:38.955
And so, the reason why this is
a principle I'd like to drill in,

12
00:00:38.955 --> 00:00:43.557
when it comes to making decisions for
your application, is that,

13
00:00:43.557 --> 00:00:46.560
a lot of times we focus on the other 80%.

14
00:00:46.560 --> 00:00:51.049
That doesn't yield like the 80%
that use the 20% of results.

15
00:00:51.049 --> 00:00:55.028
When in reality we really wanna
focus on the 20% of effort and

16
00:00:55.028 --> 00:00:57.240
focus the results in that 80%.

17
00:00:57.240 --> 00:01:00.410
And so, when it comes to testing,
we're gonna refer to this later but

18
00:01:00.410 --> 00:01:03.770
I want to at least preference that In
case anyone's not familiar with it.

19
00:01:05.880 --> 00:01:09.716
Okay, so, when it comes to testing,
traditionally, we know them,

20
00:01:09.716 --> 00:01:14.203
like the model testing is explained as
like unit testing, integration testing,

21
00:01:14.203 --> 00:01:15.780
and then end to end testing.

22
00:01:15.780 --> 00:01:21.110
And so, as a quick recap, when it comes to
unit testing, what are we talking about?

23
00:01:21.110 --> 00:01:23.221
Well, from a tooling perspective,

24
00:01:23.221 --> 00:01:26.640
typically this is done with either Jest or
Mocha.

25
00:01:26.640 --> 00:01:29.909
As far as the thing that's most popular,
amongest view applications,

26
00:01:29.909 --> 00:01:33.560
Jess is typically the way that people
use to test their applications.

27
00:01:33.560 --> 00:01:36.990
And so if you're choosing basically your
next tool definitely recommend starting

28
00:01:36.990 --> 00:01:39.783
with just there's a lot from
a developer experience perspective,

29
00:01:39.783 --> 00:01:40.720
that's really nice.

30
00:01:40.720 --> 00:01:45.549
From like, a fairly fast runtime, as well
as like good error message handling.

31
00:01:45.549 --> 00:01:50.234
So, Jest is basically the proverbial tool,
for a view application so far.

32
00:01:52.589 --> 00:01:56.820
But, you probably thinking like
what about Vue Test Utils?

33
00:01:56.820 --> 00:01:58.922
Isn't that also for unit testing?

34
00:01:58.922 --> 00:02:02.725
And so, if you check out the V3 Doc's,
there is an updated testing guide,

35
00:02:02.725 --> 00:02:06.887
currently view test utils is designed as a
library to really sort of abstract the way

36
00:02:06.887 --> 00:02:10.900
some of the common functionality that
we would need to test view apps.

37
00:02:10.900 --> 00:02:12.391
But at this point it's more or

38
00:02:12.391 --> 00:02:15.972
less recommended as like, an advanced
way to test like, sort of like,

39
00:02:15.972 --> 00:02:19.810
libraries, plugins like, libraries and,
sorry, let me try that again.

40
00:02:21.060 --> 00:02:25.118
And so, if you test utils, is useful at
the sort of the lower level testing and

41
00:02:25.118 --> 00:02:28.928
what most of us really want actually at
the end of the day is when it comes to

42
00:02:28.928 --> 00:02:32.140
unit testing is actually
component level testing.

43
00:02:32.140 --> 00:02:34.900
We wanna go through and
we want to like render things out.

44
00:02:34.900 --> 00:02:38.220
We wanna check things out, we wanna click
things, we wanna see what's returning.

45
00:02:38.220 --> 00:02:42.442
And so, right now there is a sort of
a shift in the testing sort of ecosystem

46
00:02:42.442 --> 00:02:45.522
where component testing is
becoming more of a thing.

47
00:02:45.522 --> 00:02:50.187
And so, one of the recommendations by the
testing team is actually check out this

48
00:02:50.187 --> 00:02:51.290
testing library.

49
00:02:51.290 --> 00:02:53.090
I believe it's by Kent C Dodds.

50
00:02:53.090 --> 00:02:56.930
And so, in there,
there's actually a view library, right?

51
00:02:56.930 --> 00:02:58.317
For working with view apps.

52
00:02:58.317 --> 00:03:02.584
And so, they've done a lot of good work as
far as abstracting a lot of common test

53
00:03:02.584 --> 00:03:05.440
scenarios and
like making it easy to work with.

54
00:03:05.440 --> 00:03:08.190
And so the documentation
there seems pretty solid.

55
00:03:08.190 --> 00:03:12.017
So, if you're looking for this level of
testing and you're starting to wanna beef

56
00:03:12.017 --> 00:03:14.820
out that piece,
definitely look into the testing library.

57
00:03:16.390 --> 00:03:20.082
But I also want to go ahead and make
a special shout out to Cypress who is also

58
00:03:20.082 --> 00:03:23.070
working on their own
component testing as well.

59
00:03:23.070 --> 00:03:25.773
And so, one of the team
members on the testing team,

60
00:03:25.773 --> 00:03:30.086
Jessica Sachs, is working on it, along
with some other view team members as well.

61
00:03:30.086 --> 00:03:34.030
And so, in there, they actually like
there's a whole channel regarding like

62
00:03:34.030 --> 00:03:37.018
trying to figure out how to
create good component testing,

63
00:03:37.018 --> 00:03:38.590
using the Cypress ecosystem.

64
00:03:38.590 --> 00:03:42.408
And so, keep an eye on both of those
projects, as you're playing around and

65
00:03:42.408 --> 00:03:44.868
seeing, what works best for
your application.

66
00:03:48.640 --> 00:03:51.704
As far as some best practices for
writing unit tests,

67
00:03:51.704 --> 00:03:56.390
couple of things to keep in mind is that,
1, don't test that Vue works.

68
00:03:56.390 --> 00:03:58.170
So believe it or not,
this is actually fairly common.

69
00:03:58.170 --> 00:04:01.760
Where people will, for example,
the writing unit tests in a way that.

70
00:04:01.760 --> 00:04:05.770
When the component loads,
they'll be like check that data exists.

71
00:04:05.770 --> 00:04:07.701
Or check that computed exists, like,

72
00:04:07.701 --> 00:04:12.150
view already comes with its own set of
tests to make sure that everything works.

73
00:04:12.150 --> 00:04:16.506
So, your goal then is to focus on the
things that impact the end result rather

74
00:04:16.506 --> 00:04:21.510
than testing the internals of like did
this load at this particular time.

75
00:04:21.510 --> 00:04:24.806
Simply like if you're trying to
make sure that like a property,

76
00:04:24.806 --> 00:04:28.102
like when you click on something,
it changes test for that, but

77
00:04:28.102 --> 00:04:31.660
don't test that like that the state
loads a certain way and changes.

78
00:04:31.660 --> 00:04:35.997
So, [LAUGH] you can trust view that view
is testing its internals correctly is

79
00:04:35.997 --> 00:04:37.570
basically the point here.

80
00:04:39.160 --> 00:04:42.784
And when you're using these testing
libraries, a lot of them have like there's

81
00:04:42.784 --> 00:04:45.730
deep rendering and
then there's shallow rendering.

82
00:04:45.730 --> 00:04:49.920
And so, the general recommendation is to
primarily stick with shallow rendering.

83
00:04:49.920 --> 00:04:52.711
So when it comes to shallow rendering,
you can imagine

84
00:04:52.711 --> 00:04:56.486
that if you have a parent component
that has a lot of children underneath.

85
00:04:56.486 --> 00:05:00.332
Like when you have deep rendering what
it does is the testing framework will

86
00:05:00.332 --> 00:05:04.375
actually like try to render every
single thing that goes under it.

87
00:05:04.375 --> 00:05:07.085
And so, instead like most of
the time we're trying to test is

88
00:05:07.085 --> 00:05:09.955
like whether the component like
certain things are called, and

89
00:05:09.955 --> 00:05:13.431
if you need to test something at the child
level, then you should have units.

90
00:05:13.431 --> 00:05:16.215
And so, this is why the primary
recommendation is to stick with

91
00:05:16.215 --> 00:05:17.161
shallow rendering,

92
00:05:17.161 --> 00:05:21.060
that basically ensures that you focus
on just the component you care about.

93
00:05:21.060 --> 00:05:25.799
And then, because otherwise, if you have
a common component that is shared between

94
00:05:25.799 --> 00:05:30.006
multiple tests, and it's not necessarily
related to the implementation

95
00:05:30.006 --> 00:05:32.720
of how that particular component works.

96
00:05:32.720 --> 00:05:35.811
You end up breaking a lot of tests
inadvertently with if you use

97
00:05:35.811 --> 00:05:38.605
something that if you don't
use shallow rendering, so

98
00:05:38.605 --> 00:05:42.782
these are the the main things to keep in
mind when you're writing these unit tests.

99
00:05:45.301 --> 00:05:48.515
And then, the other thing to keep in
mind and this is less of a unit test and

100
00:05:48.515 --> 00:05:49.955
more of a best practices thing.

101
00:05:49.955 --> 00:05:53.987
Is that, to actually build those unit
tests directly into like when you're

102
00:05:53.987 --> 00:05:57.391
generating components, so
other people timeout factories and

103
00:05:57.391 --> 00:05:59.360
those sort of things.

104
00:05:59.360 --> 00:06:02.683
In Chris Fritz's view enterprise
boilerplate, you'll notice that he

105
00:06:02.683 --> 00:06:05.683
uses hydrogen in order to like
basically create new components.

106
00:06:05.683 --> 00:06:08.767
That then automatically scaffold
out not only the component, but

107
00:06:08.767 --> 00:06:11.440
it'll scaffold out basically
a basic unit test.

108
00:06:11.440 --> 00:06:14.812
That basically checks like,
does this component render correctly.

109
00:06:14.812 --> 00:06:17.909
And the reason why this is
important is because, as we know,

110
00:06:17.909 --> 00:06:21.798
testing is a notoriously difficult
topic that most people want to do, but,

111
00:06:21.798 --> 00:06:24.400
ultimately don't often have time for.

112
00:06:24.400 --> 00:06:27.909
And so, the more you can lower those
barriers of like how to get your test

113
00:06:27.909 --> 00:06:30.060
setup and like what the syntax is.

114
00:06:30.060 --> 00:06:31.831
The better it is like you'll get,

115
00:06:31.831 --> 00:06:35.960
get basically higher participation
as far as fighting those unit tests.

116
00:06:35.960 --> 00:06:40.141
And so by building your unit tests
into generators, you are trying to

117
00:06:40.141 --> 00:06:45.117
basically like encourage your developers
to keep on that path of writing tests for

118
00:06:45.117 --> 00:06:46.290
your components.

