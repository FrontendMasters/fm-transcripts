WEBVTT

1
00:00:00.680 --> 00:00:04.585
So we're here to talk about
the brand new feature that I'm sure

2
00:00:04.585 --> 00:00:09.230
you all have heard about with view,
which is the composition API.

3
00:00:09.230 --> 00:00:12.700
After all, v3 is now here ready for
use in production.

4
00:00:12.700 --> 00:00:15.569
But before anyone panics,
in case you didn't know,

5
00:00:15.569 --> 00:00:18.910
the composition API is not
a view three only feature.

6
00:00:18.910 --> 00:00:21.452
If you have a view to app,
you can leverage this still,

7
00:00:21.452 --> 00:00:23.776
because there's actually
an official plugin for

8
00:00:23.776 --> 00:00:26.500
view two that allows you to
leverage the composition API.

9
00:00:26.500 --> 00:00:29.256
So if you're like, gosh, I'm not
using view three anytime soon because

10
00:00:29.256 --> 00:00:31.660
you're not ready to migrate,
that's totally fine.

11
00:00:31.660 --> 00:00:35.860
We're gonna talk about here today will
actually apply to your application Still,

12
00:00:35.860 --> 00:00:39.829
if you should you choose to use the plugin
When it comes to the composition API.

13
00:00:39.829 --> 00:00:44.788
The key problem we wanted to solve with
a sort of shared functionality is there

14
00:00:44.788 --> 00:00:49.764
needed to be a way to easily bring in
basically different pieces of features.

15
00:00:49.764 --> 00:00:53.200
That we wanted to share without
the cons of, say mix ins and

16
00:00:53.200 --> 00:00:55.740
provide inject that we just talked about.

17
00:00:57.110 --> 00:00:59.920
And so the best way for us to share
sort of how the composition API

18
00:00:59.920 --> 00:01:03.110
works is to go ahead and just do like
basically like a bit of live coding.

19
00:01:05.580 --> 00:01:10.544
So here I'm gonna go ahead and
let's, let's wipe this stuff out, and

20
00:01:10.544 --> 00:01:15.700
then see I'm gonna go ahead and
make these two thirds make this one third.

21
00:01:16.800 --> 00:01:22.565
And then let's make sure
we have our app up and

22
00:01:22.565 --> 00:01:29.237
running, so here we go,
it was already running on,

23
00:01:29.237 --> 00:01:33.350
port 80, great, all right.

24
00:01:39.118 --> 00:01:44.441
All right, so, let's wipe that out,
and then let's jump into

25
00:01:44.441 --> 00:01:49.669
the Hello World component, and
let's talk composition API,

26
00:01:49.669 --> 00:01:53.830
I'm gonna wipe out a lot
of The boilerplate here.

27
00:01:54.970 --> 00:01:58.804
So we can talk through
the competition API.

28
00:02:04.586 --> 00:02:09.420
Okay, so here we go, all right, so
this terminology is basically going to

29
00:02:09.420 --> 00:02:12.670
become pretty ubiquitous
within the ecosystem.

30
00:02:12.670 --> 00:02:15.740
So I think it's important to
sort of define this early on.

31
00:02:15.740 --> 00:02:19.570
So When it comes to now the composition
API, there are 2, basically

32
00:02:19.570 --> 00:02:24.100
2 paradigms when it comes to looking
at how view components are written.

33
00:02:24.100 --> 00:02:26.830
There is the object API,
which is what we all have known and

34
00:02:26.830 --> 00:02:30.650
used basically going forward, and
then there's gonna be the competition API.

35
00:02:31.750 --> 00:02:36.693
And so let's go ahead and so for example,
If we were to define like a reactive

36
00:02:36.693 --> 00:02:41.096
data component here,
let's call it current count, for example,

37
00:02:41.096 --> 00:02:44.630
this is how we would do it
inside of the options API.

38
00:02:44.630 --> 00:02:49.792
Right, we're familiar with this
usage as far as updating this and

39
00:02:49.792 --> 00:02:53.430
saying, Hey, current count should be this.

40
00:02:53.430 --> 00:02:55.642
So I should let me go in and
make it at each one, so it's easy to see.

41
00:03:02.511 --> 00:03:04.919
Great, okay, now, this is great,

42
00:03:04.919 --> 00:03:09.670
but what if we wanted to be able to
share for example, this data, right?

43
00:03:09.670 --> 00:03:12.713
We talked about mixings, and
those sort of things, and so

44
00:03:12.713 --> 00:03:17.246
We'll take the first step in migrating our
current count into the composition API, so

45
00:03:17.246 --> 00:03:21.040
that we can see that and
then abstract it one level further.

46
00:03:21.040 --> 00:03:24.478
So here actually what I wanna do just
to make this abundantly clear, or

47
00:03:24.478 --> 00:03:26.243
actually I'll do that in a second.

48
00:03:26.243 --> 00:03:30.858
Okay, so the key, word to knowing
whenever a component is using

49
00:03:30.858 --> 00:03:34.029
the composition API is the setup function.

50
00:03:35.440 --> 00:03:38.746
So think of it a little bit like
a lifecycle hook were similar to like

51
00:03:38.746 --> 00:03:41.320
mounted and mounted, those sort of things.

52
00:03:41.320 --> 00:03:45.956
This occurs early on when the component
is being basically generated,

53
00:03:45.956 --> 00:03:50.746
at this point you have access to things
like props and the attributes, but

54
00:03:50.746 --> 00:03:53.980
you still lacking context into the data.

55
00:03:53.980 --> 00:03:58.272
So right now for example, inside of
setup at this point in the lifecycle,

56
00:03:58.272 --> 00:04:02.708
I cannot access what's inside of this
database like the auctions API has not

57
00:04:02.708 --> 00:04:04.250
like fully gotten set up.

58
00:04:05.710 --> 00:04:08.585
And so if we were to create
the equivalent, right, and

59
00:04:08.585 --> 00:04:12.399
let's call it current count two, and
just to make it infinitely clear,

60
00:04:12.399 --> 00:04:14.545
it's different, let's call it 12.

61
00:04:18.082 --> 00:04:21.480
What we have here, if you can see that
this looks a little bit different,

62
00:04:21.480 --> 00:04:23.660
this looks like normal JavaScript.

63
00:04:23.660 --> 00:04:26.631
And that it is because at the point
you enter the composition API,

64
00:04:26.631 --> 00:04:30.590
you have now entered the land where you
need to hook up everything yourself.

65
00:04:30.590 --> 00:04:34.254
A lot of the conveniences that view
affords you with a debt of options API

66
00:04:34.254 --> 00:04:36.420
are basically gone now.

67
00:04:36.420 --> 00:04:40.053
And, so in this case, for example, not
only do we need to declare the variable

68
00:04:40.053 --> 00:04:43.840
here, we actually need to expose
it just like you would in data.

69
00:04:43.840 --> 00:04:48.908
So if I expose current count here,
current count two, and

70
00:04:48.908 --> 00:04:54.194
then we go ahead and
render it here as an h2, so, like this.

71
00:04:58.594 --> 00:05:03.820
We'll see now that actually I can do that,
we see now that it is actually 12.

72
00:05:03.820 --> 00:05:07.736
And so this might not seem too bad
actually at first because this is starting

73
00:05:07.736 --> 00:05:10.300
this mental models fairly close.

74
00:05:10.300 --> 00:05:13.701
But one of the things that comes to
mind is that if we were to try to update

75
00:05:13.701 --> 00:05:15.201
currentCount in this case, so

76
00:05:15.201 --> 00:05:17.870
you might have say a method
that says incrementCount.

77
00:05:20.020 --> 00:05:22.586
So this case right,
we would say this.currentCount ++,

78
00:05:22.586 --> 00:05:24.310
this is how you would normally write it.

79
00:05:25.440 --> 00:05:30.660
And so if we had on our button,
basically incrementCount

80
00:05:30.660 --> 00:05:35.570
We'll see that when we click,
it works as expected.

81
00:05:35.570 --> 00:05:38.927
But then you're like, okay,
well what if I want to like,

82
00:05:38.927 --> 00:05:42.850
increment like current count too,
and so you might be increment.

83
00:05:42.850 --> 00:05:46.610
You might be tempted to do this, but
you see that nothing's happening.

84
00:05:46.610 --> 00:05:49.915
And the reason for that is because
one of the things I think we get,

85
00:05:49.915 --> 00:05:54.007
sort of comfortable with view is that it
automatically makes most of the things we

86
00:05:54.007 --> 00:05:55.890
want to be automatically reactive.

87
00:05:55.890 --> 00:05:58.110
And in this case it's not.

88
00:05:58.110 --> 00:06:00.519
And so
what we need to do is actually import our,

89
00:06:00.519 --> 00:06:04.255
similar to like outside my helper
methods earlier with the hyper script,

90
00:06:04.255 --> 00:06:07.469
we're gonna need help or
methods to make this thing reactive.

91
00:06:08.680 --> 00:06:13.350
Luckily, the helper method is called
reactive, and so when we have a reactive

92
00:06:13.350 --> 00:06:18.320
property here, this allows us to create
a reactive object that we can then unwrap.

93
00:06:19.320 --> 00:06:24.469
And so in this case,
I'm going to go ahead and

94
00:06:24.469 --> 00:06:29.891
do a console state where
current count is 12,

95
00:06:29.891 --> 00:06:36.090
and then we're going to return state,
okay?

96
00:06:36.090 --> 00:06:41.270
And then ;all right,
I've got this needs to be reactive, okay?

97
00:06:41.270 --> 00:06:46.870
And so now you're thinking, okay, this is
great, now if I try to increment like,

98
00:06:46.870 --> 00:06:51.620
does it do anything,
nothing's happening, why is that?

99
00:06:51.620 --> 00:06:56.090
And at this point like this is where it's
a little bit complicated when it comes to

100
00:06:56.090 --> 00:07:00.167
mixing the options API with the
composition API, because at this point,

101
00:07:00.167 --> 00:07:01.440
we've exposed data.

102
00:07:01.440 --> 00:07:05.192
But what we really want is to actually
move the method into the composition API,

103
00:07:05.192 --> 00:07:06.880
which will then allow it to update.

104
00:07:06.880 --> 00:07:11.570
So in this case, right, let's just call
it cons increment, count two, and so

105
00:07:11.570 --> 00:07:16.040
in the options API, we had to define
everything within methods, right?

106
00:07:16.040 --> 00:07:21.666
But we know that methods at the end day
are just functions, and so in this case,

107
00:07:21.666 --> 00:07:27.230
we would say, in this case,
we say state.currentcount2 is incremented.

108
00:07:27.230 --> 00:07:30.844
And then we can expose this as the object

109
00:07:36.121 --> 00:07:39.748
Here, and then if we wire this up,
let's see, so one okay,

110
00:07:39.748 --> 00:07:44.760
actually here this is this good,
so a couple of things now, right?

111
00:07:44.760 --> 00:07:47.755
One, our current count doesn't show
up anymore, and the reason for

112
00:07:47.755 --> 00:07:50.590
that is because we're
referring to current count to.

113
00:07:50.590 --> 00:07:54.820
But really we haven't exposed that
well we have exposed his state.

114
00:07:54.820 --> 00:07:58.496
And so theoretically we not even
theoretically, what we need to do is then

115
00:07:58.496 --> 00:08:01.600
expose that using the state
actually referring to State DOT.

116
00:08:01.600 --> 00:08:04.541
And so now that we have here,
if I go ahead and switch this to

117
00:08:04.541 --> 00:08:08.580
increment count two, you'll see now
that everything is working as expected.

118
00:08:10.160 --> 00:08:15.372
And so this is a little tricky, right,
because you're probably thinking like,

119
00:08:15.372 --> 00:08:20.600
wow, this is like, okay, like, but
what if like, I don't like state, right?

120
00:08:20.600 --> 00:08:24.571
Because one of the nice things that the
datastore afforded us was the ability to

121
00:08:24.571 --> 00:08:29.040
then say that, hey, I just like whatever I
define, just expose that to the template.

122
00:08:29.040 --> 00:08:33.411
Otherwise, I'm gonna have State DOT
stuff written all over the place, well,

123
00:08:33.411 --> 00:08:37.470
in this case, we have to introduce you
to the conference concept of refs.

124
00:08:39.300 --> 00:08:44.482
And so refs in this case, in the
composition API, then allow you to define

125
00:08:44.482 --> 00:08:49.340
reactive properties that are basically
reactive at the core level.

126
00:08:49.340 --> 00:08:54.716
So again, if we do const's current count
three Is equal to ref in this case,

127
00:08:54.716 --> 00:08:56.570
let's start it at eight.

128
00:08:56.570 --> 00:09:02.529
And then I expose that here
at current count three,

129
00:09:02.529 --> 00:09:09.750
and then I need to return comma and
then yes ref is not defined.

130
00:09:09.750 --> 00:09:13.271
Whoop a And
then once more we will copy this, and

131
00:09:13.271 --> 00:09:16.630
current count three is
current count three.

132
00:09:18.550 --> 00:09:23.228
Not state just here, do there we go,
you see that we see our eight here and

133
00:09:23.228 --> 00:09:24.455
our 12 here, and

134
00:09:24.455 --> 00:09:30.330
then the difference here being that if you
wanted to increment it right with ref.

135
00:09:30.330 --> 00:09:32.637
There's a whole concept
regarding reactivity engine and

136
00:09:32.637 --> 00:09:35.458
then the proxy which you can learn
about on the docks, unfortunately,

137
00:09:35.458 --> 00:09:37.690
there's not enough time to go over that.

138
00:09:37.690 --> 00:09:41.987
But the key thing here with the
competition with sort of the raft property

139
00:09:41.987 --> 00:09:46.286
is that you need to basically un-package
it, so if we were to keep this,

140
00:09:46.286 --> 00:09:49.680
let's switch this out to,
increment count three.

141
00:09:51.320 --> 00:09:53.007
You might think that this is a simple,

142
00:09:53.007 --> 00:09:56.360
for example,
saying current count three plus plus.

143
00:09:56.360 --> 00:10:01.179
And so if I swap this out here, we'll see
now that one there is an error because

144
00:10:01.179 --> 00:10:05.910
one you're trying to mutate again
following normal JavaScript rules.

145
00:10:05.910 --> 00:10:09.715
This is the content, you can't mutate
a constant like this, and so again,

146
00:10:09.715 --> 00:10:12.152
this feels a little odd because again,
in view,

147
00:10:12.152 --> 00:10:16.180
this would have normally been this
current count three plus, plus.

148
00:10:16.180 --> 00:10:20.262
Because again if you handle those things
view in the object API handles those

149
00:10:20.262 --> 00:10:24.278
things for you, and so luckily we can
see here that it's actually giving us

150
00:10:24.278 --> 00:10:27.580
some basically a pointer as
far as what to do the CLI.

151
00:10:27.580 --> 00:10:31.626
Which is the fact that we actually have
to unpack it, and so you can see here

152
00:10:31.626 --> 00:10:36.760
that if we do dot value now all the errors
go away, and now when we increment.

153
00:10:36.760 --> 00:10:41.644
It updates accordingly, and so the reason
this is important is because when you're

154
00:10:41.644 --> 00:10:46.750
looking at states and you're like I wanna
be able to like spread it out, right.

155
00:10:46.750 --> 00:10:50.989
You might be tempted to go like, well,it's
java script so I'll just spread it out and

156
00:10:50.989 --> 00:10:53.780
then as you see though, everything breaks.

157
00:10:53.780 --> 00:10:56.843
And the reason for that is because
when you spread out an object in

158
00:10:56.843 --> 00:10:59.650
JavaScript it actually
breaks all of the proxying.

159
00:10:59.650 --> 00:11:03.810
Cuz right now like when you're in here
on line 27 reactive is like watching

160
00:11:03.810 --> 00:11:08.420
an object and when you spread it out you
basically breaking apart the object.

161
00:11:08.420 --> 00:11:13.126
And so you have to do one step further
which is to then say hey on top of like

162
00:11:13.126 --> 00:11:17.580
spreading it out,
we need to convert everything to refs.

163
00:11:17.580 --> 00:11:22.385
So that's why this method, this helper
method is important for this, so

164
00:11:22.385 --> 00:11:27.112
that you can then say, okay,
I'm gonna take, my reactive object, and

165
00:11:27.112 --> 00:11:30.700
I'm going to destructure it and
put it into our state.

166
00:11:32.040 --> 00:11:36.582
And what this does then is allows me to,
let's see,

167
00:11:36.582 --> 00:11:41.125
save, refresh, and
then to check that this works,

168
00:11:41.125 --> 00:11:45.690
we're gonna go ahead and
then increment count two.

169
00:11:47.010 --> 00:11:50.828
Count two is not defined,
that it wait I, there we go,

170
00:11:50.828 --> 00:11:54.100
current count of state still need this.

171
00:11:54.100 --> 00:11:57.269
So now I no longer need this and
to make sure it works,

172
00:11:57.269 --> 00:12:00.380
you can see everything
works exactly as expected.

173
00:12:01.620 --> 00:12:04.819
And so one of the first discussion
points that often comes up when people

174
00:12:04.819 --> 00:12:08.680
are learning the composition API, is that
first of all, like Which one should I use?

175
00:12:08.680 --> 00:12:13.488
Should I use reactive or should I use rest
As we saw reactive is actually probably

176
00:12:13.488 --> 00:12:17.506
the closest thing we have mental
model wise to the options API and so

177
00:12:17.506 --> 00:12:19.256
in that regard as we can see.

178
00:12:19.256 --> 00:12:24.080
Because even though it's not as simple as
calling necessarily this dot current count

179
00:12:24.080 --> 00:12:28.234
to for example, it does like avoid
the caveat that often come with refs and

180
00:12:28.234 --> 00:12:29.680
having to unpack.

181
00:12:29.680 --> 00:12:30.432
The values, and

182
00:12:30.432 --> 00:12:34.530
basically having a lot of different
things that you're tracking over time.

183
00:12:34.530 --> 00:12:36.586
And so again,
from a mental model perspective,

184
00:12:36.586 --> 00:12:38.900
I recommend starting with reactive first.

185
00:12:38.900 --> 00:12:42.000
And then if you really need to,
then you can certainly use refs.

186
00:12:42.000 --> 00:12:44.665
But I think reactive is probably
the best thing to start with,

187
00:12:44.665 --> 00:12:47.760
when you're building
with the composition API.

188
00:12:47.760 --> 00:12:51.064
And just remember that if you want to
spread out what's inside of your data

189
00:12:51.064 --> 00:12:52.304
objects so that it reacts.

190
00:12:52.304 --> 00:12:56.582
Sorry, inside of your reactive object, and
you want to behave a little bit more like

191
00:12:56.582 --> 00:13:00.630
the data options API, than just make sure
to remember this 2 refs method here.

