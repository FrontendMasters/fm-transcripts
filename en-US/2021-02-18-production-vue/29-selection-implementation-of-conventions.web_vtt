WEBVTT

1
00:00:00.360 --> 00:00:03.805
Okay, so
when it comes to choosing conventions,

2
00:00:03.805 --> 00:00:06.355
how do we choose these conventions?

3
00:00:08.276 --> 00:00:12.244
And so there are three main stages when
it comes to implementing like these

4
00:00:12.244 --> 00:00:14.100
conventions that we wanna pitch.

5
00:00:16.280 --> 00:00:17.970
And so the first one is selecting,

6
00:00:17.970 --> 00:00:21.390
selecting the convention that
your team is going to use.

7
00:00:21.390 --> 00:00:27.690
And the very first thing you have to be
able to do is define the problem properly.

8
00:00:27.690 --> 00:00:29.000
And so what do I mean by this?

9
00:00:29.000 --> 00:00:33.773
A lot of times when we talk about things
like tabs, spaces and these conventions

10
00:00:33.773 --> 00:00:38.548
that make up our ultimate like developer
experience across an entire company,

11
00:00:38.548 --> 00:00:41.701
things are rarely objective and
absolute, right?

12
00:00:41.701 --> 00:00:47.065
It's rarely like, well, research has
shown that 100% of the time people

13
00:00:47.065 --> 00:00:52.023
who use tabs and twos or people use
spaces as invitation with two spaces,

14
00:00:52.023 --> 00:00:55.536
are 30% more productive
than developers user.

15
00:00:55.536 --> 00:00:59.010
It's basically almost never that cut and
dry.

16
00:01:00.230 --> 00:01:03.735
Because the makeup of each
team is individualistic, and

17
00:01:03.735 --> 00:01:06.700
as a result they need to
be considered as such.

18
00:01:06.700 --> 00:01:08.510
And so when you're defining a problem,

19
00:01:08.510 --> 00:01:10.852
you need to find a problem
that matters to your team,

20
00:01:10.852 --> 00:01:14.170
that actually will have a measurable
impact on what they're going to do.

21
00:01:15.670 --> 00:01:19.659
And so as you're selecting these and
having those discussions,

22
00:01:19.659 --> 00:01:23.803
the key thing I'd like to recommend
here is to avoid bike shedding.

23
00:01:23.803 --> 00:01:28.700
And so if you're not familiar with bike
shedding, it's this general concept that's

24
00:01:28.700 --> 00:01:32.725
referred to like basically arguing
over something that's small, and

25
00:01:32.725 --> 00:01:36.637
spending a lot of time over it even
though it doesn't really matter.

26
00:01:36.637 --> 00:01:41.798
Okay, and so with the bike shedding right,
and like discussed and

27
00:01:41.798 --> 00:01:46.239
basically fighting over
tabular space in these things.

28
00:01:46.239 --> 00:01:49.686
The way to avoid these things there
are three primary ways to consider, and

29
00:01:49.686 --> 00:01:52.480
the first of which is
time constraint voting.

30
00:01:52.480 --> 00:01:55.430
And so have those discussions
right dedicate an entire hour

31
00:01:55.430 --> 00:02:00.380
long meeting to make sure that people can
present their points and what they think.

32
00:02:00.380 --> 00:02:02.229
But then at the end of it, go ahead and

33
00:02:02.229 --> 00:02:04.600
have everyone vote to
see what they wanna try.

34
00:02:04.600 --> 00:02:08.080
So let's just keep with the tabular
spaces indentation example.

35
00:02:08.080 --> 00:02:10.016
So if most of the team says you now what,

36
00:02:10.016 --> 00:02:12.750
I think two spaces is
the way we should go.

37
00:02:12.750 --> 00:02:16.660
Then the key here the concept you wanna
keep consistent with your team is to

38
00:02:16.660 --> 00:02:17.873
disagree and commit.

39
00:02:17.873 --> 00:02:22.330
And so it's true some people will still
be feel very passionately about tabs.

40
00:02:22.330 --> 00:02:26.090
But then what you do now is you
do a 3 month trial on this piece.

41
00:02:26.090 --> 00:02:28.572
And so this is like the 3
month discussion freeze.

42
00:02:28.572 --> 00:02:32.193
And the reason this is important
when you're discussing these votes,

43
00:02:32.193 --> 00:02:36.373
is because you want to ensure that your
team doesn't feel locked in by it, right?

44
00:02:36.373 --> 00:02:39.630
That's, I think, one of the hardest things
that when it comes to selecting technology

45
00:02:39.630 --> 00:02:41.171
is there is this feeling of permanency and

46
00:02:41.171 --> 00:02:43.121
conventions definitely
have that feeling as well.

47
00:02:43.121 --> 00:02:46.408
They're like, once you choose this
convention it's over, it's done.

48
00:02:46.408 --> 00:02:49.990
And so this is why you see a lot
of discussions around conventions.

49
00:02:49.990 --> 00:02:54.986
Basically people were like, tried very
hard to overturn something cuz they're

50
00:02:54.986 --> 00:02:57.636
afraid they'll be stuck with it forever.

51
00:02:57.636 --> 00:03:02.276
And so with three months discussion
freezes you lower that sort of you

52
00:03:02.276 --> 00:03:04.598
create an emotionally safe zone.

53
00:03:04.598 --> 00:03:07.812
Where you can say, okay, we're going
to try for a timebox period and

54
00:03:07.812 --> 00:03:12.050
see how everything feels, and then we
can re-examine those discussions later.

55
00:03:12.050 --> 00:03:15.368
This is a great way to again make
progress towards conventions,

56
00:03:15.368 --> 00:03:18.016
especially on these sort
of larger applications.

57
00:03:18.016 --> 00:03:22.059
We have so many people that it would
basically be near impossible to get like

58
00:03:22.059 --> 00:03:23.950
a unanimous vote on things.

59
00:03:23.950 --> 00:03:27.475
So these are ways you can use to select
those conventions for your team.

60
00:03:31.744 --> 00:03:33.369
As far as implementation goes,

61
00:03:33.369 --> 00:03:37.278
I refer to this a little bit a second ago
with the unit testing, but the key here

62
00:03:37.278 --> 00:03:41.660
with implementing any convention is
to automate it, automate everything.

63
00:03:41.660 --> 00:03:46.474
So when you're deciding on conventions for
how JavaScript should look, semi colons,

64
00:03:46.474 --> 00:03:51.092
indentation, whether or not it should have
a trailing comma, all of these things,

65
00:03:51.092 --> 00:03:53.870
they should be handled by linters.

66
00:03:53.870 --> 00:03:57.371
Because the moment you expect
someone to be responsible for

67
00:03:57.371 --> 00:04:01.373
this piece, you're basically
introducing room for human error.

68
00:04:01.373 --> 00:04:05.376
And more importantly,
people wanna focus on writing code.

69
00:04:05.376 --> 00:04:09.240
And as someone who's gone through
this type of pull request before,

70
00:04:09.240 --> 00:04:12.037
one of the worst reviews you
can get on a PR is just,

71
00:04:12.037 --> 00:04:14.250
can you add a dangling comment to that?

72
00:04:14.250 --> 00:04:18.147
We use dangling commas in our codebase,
right?

73
00:04:18.147 --> 00:04:21.072
And so when you automate things,
you make it easy for

74
00:04:21.072 --> 00:04:26.100
everyone to follow the conventions,
while like focusing on the key pieces.

75
00:04:26.100 --> 00:04:29.640
And so with eslint, stylelint,
markdownlint like whatever it is.

76
00:04:29.640 --> 00:04:32.357
These I generally recommend
running at the pre commit hook, so

77
00:04:32.357 --> 00:04:36.112
that once it's committed, it's already
been formatted everything's been added.

78
00:04:36.112 --> 00:04:37.489
And this way like developers and

79
00:04:37.489 --> 00:04:39.740
so kind of write code the way
they would normally do.

80
00:04:39.740 --> 00:04:41.743
And then when they commit
it to the code base,

81
00:04:41.743 --> 00:04:44.274
which is where the standard
really needs to be enforced,

82
00:04:44.274 --> 00:04:47.910
then at the pre commit hook,
it will automatically link to everything.

83
00:04:47.910 --> 00:04:50.320
And then we are good to go.

84
00:04:52.320 --> 00:04:55.086
Basically, like your pull
requests can focus on the things

85
00:04:55.086 --> 00:04:57.260
that actually matter going forward.

86
00:04:57.260 --> 00:05:00.658
Formatters are another good way
of addressing the implementation

87
00:05:00.658 --> 00:05:01.790
piece as well.

88
00:05:01.790 --> 00:05:04.680
So in this particular case most of you
are probably familiar with prettier.

89
00:05:04.680 --> 00:05:09.233
So it ensures that everything looks
similar in terms of not only indentation.

90
00:05:09.233 --> 00:05:13.423
But like how many characters
should it go over the line,

91
00:05:13.423 --> 00:05:17.359
whether it should add
certain stylistic elements.

92
00:05:17.359 --> 00:05:20.992
Standardizing these things and
including them, for example,

93
00:05:20.992 --> 00:05:24.891
as a prettier RC where the configuration
is the same for everyone, is

94
00:05:24.891 --> 00:05:29.615
also like a great way of at least pushing
those standards forward and conventions.

95
00:05:29.615 --> 00:05:33.433
So that people can get used to basically
working in that environment and

96
00:05:33.433 --> 00:05:35.670
basically getting familiarity with it.

97
00:05:37.240 --> 00:05:40.160
Image optimization is another popular one.

98
00:05:40.160 --> 00:05:44.360
I've worked on code bases where there's
no image optimization pipeline.

99
00:05:44.360 --> 00:05:47.727
So anytime a developer wants to
add an image into their codebase

100
00:05:47.727 --> 00:05:51.600
because the designer handed them
something, they had to manually go and

101
00:05:51.600 --> 00:05:56.750
basically either requested the designer
for like the individual sizes they needed.

102
00:05:56.750 --> 00:05:59.270
Or they need to go ahead and
run it through an optimizer.

103
00:05:59.270 --> 00:06:02.470
And that is a waste of time from
a pipeline perspective, right?

104
00:06:02.470 --> 00:06:10.510
And so if your best practice is hey,
we wanna deliver best practice convention.

105
00:06:10.510 --> 00:06:14.650
It the convention is that we ensure
that the images we deliver to customers

106
00:06:14.650 --> 00:06:18.320
are always as small as possible and
optimized correctly.

107
00:06:18.320 --> 00:06:21.095
Then you wanna automate that
image optimization process,

108
00:06:21.095 --> 00:06:24.690
because that way someone who's not
familiar with the process, right?

109
00:06:24.690 --> 00:06:27.494
Who hasn't been working at the company for
six months and

110
00:06:27.494 --> 00:06:30.365
maybe this is our first time
interacting with designers.

111
00:06:30.365 --> 00:06:34.420
Like they're not gonna submit a PR with
an image that's not optimized without

112
00:06:34.420 --> 00:06:38.291
the right break points, which then you
have to spend time to then go back and

113
00:06:38.291 --> 00:06:40.641
go hey, by the way,
this is how we do things.

114
00:06:40.641 --> 00:06:44.624
Things like optimization can 100% be
automated because you have to run it

115
00:06:44.624 --> 00:06:46.400
through a build pipeline.

116
00:06:46.400 --> 00:06:50.024
And then as long as you meet
the minimum requirements of say,

117
00:06:50.024 --> 00:06:52.665
having the image be at like 2X for
example.

118
00:06:52.665 --> 00:06:56.945
There are tools that allow you to then
either resize images correctly and

119
00:06:56.945 --> 00:06:59.420
then optimize them accordingly.

120
00:06:59.420 --> 00:07:02.960
And so these sorts of things
also should be automated.

121
00:07:04.510 --> 00:07:09.164
And generators, we talked a little about
this earlier, but generators if you can

122
00:07:09.164 --> 00:07:13.890
think of it this way is so let me
the easiest way here is to show you here.

123
00:07:13.890 --> 00:07:17.634
So in the view enterprise boilerplate
this is probably the best place

124
00:07:17.634 --> 00:07:21.340
to start if you're thinking
about doing your own generator.

125
00:07:21.340 --> 00:07:25.052
So here you'll see that inside of
the view enterprise boilerplate,

126
00:07:25.052 --> 00:07:28.640
there are actually basically
boilerplate scaffolds for things.

127
00:07:28.640 --> 00:07:34.731
So in this case, you'll see that this
component is scaffolded in this case,

128
00:07:34.731 --> 00:07:39.970
like Chris also uses the script
template style sort of order.

129
00:07:39.970 --> 00:07:43.107
But on top of that,
it actually also goes ahead and

130
00:07:43.107 --> 00:07:48.264
make sure is that like the language SASS
or the preprocessor SASS is configured and

131
00:07:48.264 --> 00:07:51.940
that by default,
it's using the CSS modules.

132
00:07:51.940 --> 00:07:55.855
And then on top of that, you'll see he's
even optimized it to the point where

133
00:07:55.855 --> 00:07:58.340
it automatically imports
the design variable.

134
00:07:58.340 --> 00:08:00.413
So that's not something you have to do.

135
00:08:00.413 --> 00:08:05.612
And so this kind of automation is super
useful because again, as I mentioned to be

136
00:08:05.612 --> 00:08:10.747
here before, you'll see that we actually
have here a dynamic test generator.

137
00:08:10.747 --> 00:08:15.410
That will go ahead and import the correct
component that you're trying to create.

138
00:08:15.410 --> 00:08:18.299
And then it will say that it
exports a valid component and

139
00:08:18.299 --> 00:08:22.357
then it basically has a sample scaffold,
that will run this will this will pass

140
00:08:22.357 --> 00:08:25.940
basically 100% of time unless
you do something horribly wrong.

141
00:08:27.820 --> 00:08:29.190
And this just works.

142
00:08:31.420 --> 00:08:34.890
And so generators here, basically you
can think of generators for anything.

143
00:08:34.890 --> 00:08:38.780
As you can see he has end to end tests,
whether they're for layouts, modules,

144
00:08:38.780 --> 00:08:40.050
utilities.

145
00:08:40.050 --> 00:08:44.425
Generators are probably one of the best
ways to enforce consistency across your

146
00:08:44.425 --> 00:08:45.070
project.

147
00:08:45.070 --> 00:08:48.666
Because the moment you need to rely
on a developer to copy and paste or

148
00:08:48.666 --> 00:08:50.318
create files in a certain way.

149
00:08:50.318 --> 00:08:54.241
Basically, when you're at scale that's
basically never going to work and

150
00:08:54.241 --> 00:08:56.337
you will introduce a lot of human error.

151
00:08:56.337 --> 00:08:59.337
The final piece of the automation piece,
so for

152
00:08:59.337 --> 00:09:04.287
those who don't know VS Code allows you
to create, basically code snippets.

153
00:09:04.287 --> 00:09:08.582
And so an example of this is
Sarah Drasner she has her VS Code,

154
00:09:08.582 --> 00:09:13.554
like snippet pack extension,
which allows you to basically do things

155
00:09:13.554 --> 00:09:18.465
like when you're scaffolding
components to basically do like SFC.

156
00:09:18.465 --> 00:09:21.993
And then when you hit enter,
it'll actually go ahead and

157
00:09:21.993 --> 00:09:25.314
like scaffold out,
the pieces for you accordingly.

158
00:09:25.314 --> 00:09:30.066
And so in VS Code, you can actually
create, you can commit like

159
00:09:30.066 --> 00:09:35.940
a VS Code folder to your repo that
contains like the various snippets.

160
00:09:35.940 --> 00:09:39.072
That your teammates can then use to then
scaffold out different pieces that you

161
00:09:39.072 --> 00:09:40.550
might want different standards on.

162
00:09:40.550 --> 00:09:45.660
And so this is another great way of
introducing conventions to your team.

