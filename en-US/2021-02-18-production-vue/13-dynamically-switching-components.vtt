WEBVTT

1
00:00:00.070 --> 00:00:03.970
So in terms of the next problem we wanna
solve is that a lot of times when it comes

2
00:00:03.970 --> 00:00:08.170
to enterprise grade applications, we have
this issue where we need to dynamically

3
00:00:08.170 --> 00:00:11.130
switch the component that
is based on the data.

4
00:00:11.130 --> 00:00:16.348
So an example of this might be if you're
looping through a feed of items, if it's

5
00:00:16.348 --> 00:00:21.980
like a news company, for example, some of
them are gonna be actual articles, right?

6
00:00:21.980 --> 00:00:24.250
There are a news article previews.

7
00:00:24.250 --> 00:00:27.494
But on the other hand, sometimes it
needs to actually be, let's say, like

8
00:00:27.494 --> 00:00:30.959
an advertisement, or instead of a blog,
it might just be like an image gallery.

9
00:00:30.959 --> 00:00:34.625
And so you can imagine that if
the back-end is providing you a list of

10
00:00:34.625 --> 00:00:36.426
this basically type of content,

11
00:00:36.426 --> 00:00:39.532
you need to be able to swap
out which component does what.

12
00:00:39.532 --> 00:00:44.094
It's not as simple as looping through
a single like news feed item, but

13
00:00:44.094 --> 00:00:45.549
then takes care of it.

14
00:00:45.549 --> 00:00:50.829
And so in those cases, there's actually
a native component to view, like you

15
00:00:50.829 --> 00:00:56.753
don't need to import it or anything, which
is the component, appropriately called.

16
00:00:56.753 --> 00:01:01.191
Because what it does is it has a special
attribute, which is the is property and

17
00:01:01.191 --> 00:01:02.803
so when you v-bind it to is,

18
00:01:02.803 --> 00:01:07.400
it then takes basically a dynamic import
of a component and will then swap it out.

19
00:01:08.880 --> 00:01:13.210
So we take a look at this clock example,
right?

20
00:01:13.210 --> 00:01:16.300
We have a digital clock, and
we have an analog clock.

21
00:01:17.400 --> 00:01:23.380
But we wanna actually like basically swap
it out based on the user preference.

22
00:01:23.380 --> 00:01:25.151
And so this is a simplified example, but

23
00:01:25.151 --> 00:01:28.290
important just to understand
the concept here of component swapping.

24
00:01:29.550 --> 00:01:34.138
So you can see here that clock type
actually is a computed property that based

25
00:01:34.138 --> 00:01:38.294
on whether the selected clock is analog or
not, will then go ahead and

26
00:01:38.294 --> 00:01:40.820
import the appropriate component name.

27
00:01:40.820 --> 00:01:42.800
So in this case, it would be analog.

28
00:01:42.800 --> 00:01:44.680
And then it goes ahead and swap that out.

29
00:01:45.760 --> 00:01:49.948
And so the reason this is really powerful
is because basically going forward,

30
00:01:49.948 --> 00:01:53.440
you can programmatically like
switch out what you need.

31
00:01:53.440 --> 00:01:57.597
And it only imports whatever component
is being actually like used inside

32
00:01:57.597 --> 00:01:59.079
of this component block.

33
00:02:01.130 --> 00:02:03.920
And so it's super powerful.

34
00:02:03.920 --> 00:02:06.440
It can accept props,
asynchronous components,

35
00:02:06.440 --> 00:02:08.950
it can change into different components.

36
00:02:08.950 --> 00:02:10.630
And actually, if you think about it,

37
00:02:10.630 --> 00:02:13.880
this is actually the very basis
of how router-view is built.

38
00:02:13.880 --> 00:02:16.042
Because what it's doing if
you think about it, right,

39
00:02:16.042 --> 00:02:17.744
we talked a little bit
earlier about views,

40
00:02:17.744 --> 00:02:20.964
and the fact that there's still at the end
of the day still single file components,

41
00:02:20.964 --> 00:02:24.140
router-view is just switching those views,
right, based on the URL.

42
00:02:24.140 --> 00:02:26.830
So the slash about,
give me the about dot view page.

43
00:02:26.830 --> 00:02:29.937
And that's really the core
fundamentals behind router-view.

44
00:02:29.937 --> 00:02:33.238
Granted it comes with a lot of other
ergonomics, which makes it useful to have.

45
00:02:33.238 --> 00:02:37.726
So before you go running off building
your own view router, just consider that

46
00:02:37.726 --> 00:02:41.540
a lot of work has gone into making
like route handling a lot easier.

47
00:02:43.980 --> 00:02:46.401
But in terms of the cons
though of the component,

48
00:02:46.401 --> 00:02:49.708
which is important to understand
with any strategy that you have,

49
00:02:49.708 --> 00:02:53.687
is that this now means that you have to be
very careful with how you handle props.

50
00:02:53.687 --> 00:02:57.207
Because you can imagine, especially
on something like a news feed item,

51
00:02:57.207 --> 00:03:00.726
the props that a news article would
need might be very, very different and

52
00:03:00.726 --> 00:03:03.850
probably different than an ad requirement,
for example.

53
00:03:03.850 --> 00:03:05.880
And these components would
have different sets of props.

54
00:03:06.900 --> 00:03:10.966
And so if you remember earlier when
we covered inside our HTML section,

55
00:03:10.966 --> 00:03:14.500
this is where the v-bind
shorthand is super, super like.

56
00:03:14.500 --> 00:03:16.543
This is like where it absolutely shines.

57
00:03:16.543 --> 00:03:20.088
Because now,
if you were to try to be declarative on

58
00:03:20.088 --> 00:03:23.633
a component like on this
dynamic component piece,

59
00:03:23.633 --> 00:03:28.097
you'd have a crazy list of props
that you're trying to manage.

60
00:03:28.097 --> 00:03:31.160
Like if it's digital, do this,
if it's analog, do this.

61
00:03:31.160 --> 00:03:32.150
If it's digital, do this.

62
00:03:32.150 --> 00:03:34.710
And that would just be unwieldly.

63
00:03:34.710 --> 00:03:37.175
On the other hand, as we can see here,

64
00:03:37.175 --> 00:03:41.570
by v-binding the clock top inside
of clock type, you can basically

65
00:03:41.570 --> 00:03:46.790
pro automatically change what props
get actually bound to the element.

66
00:03:46.790 --> 00:03:51.600
So this is definitely like one of the most
perfect examples for that technique.

