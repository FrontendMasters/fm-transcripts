WEBVTT

1
00:00:00.170 --> 00:00:05.400
So one of the questions that was asked
is regarding using RX JS with review.

2
00:00:05.400 --> 00:00:09.924
And so I know that Natalia Tahina,
who's on the core team, I think,

3
00:00:09.924 --> 00:00:14.761
has done a decent amount of work with
RX JS and so there's nothing As like,

4
00:00:14.761 --> 00:00:19.209
to my knowledge, there's nothing
wrong with using RFCs in view and

5
00:00:19.209 --> 00:00:21.650
it can be super useful for tracking.

6
00:00:21.650 --> 00:00:25.821
Like, especially when we're having the,
sort of the queue that RSGS allows you to

7
00:00:25.821 --> 00:00:29.800
easily track it, break like event
loops and those sorts of things.

8
00:00:29.800 --> 00:00:32.322
And I've seen people use
it with a success, but

9
00:00:32.322 --> 00:00:37.190
I know personally in my own projects, I
haven't had a need for it, just yet, but.

10
00:00:37.190 --> 00:00:40.673
I would say, if there's anyone to
reach out to if you have specific RxJS

11
00:00:40.673 --> 00:00:43.924
questions, I think Natalya would
be a great person to start with,

12
00:00:43.924 --> 00:00:47.400
cuz I think she's done a decent
amount of work with that.

13
00:00:47.400 --> 00:00:51.278
So the question is, when it comes
to dealing with How do we deal with

14
00:00:51.278 --> 00:00:55.080
the authentication piece
when it comes to routes?

15
00:00:55.080 --> 00:00:59.412
And so for this, I'm going to go ahead and
again this this resource I

16
00:00:59.412 --> 00:01:03.620
can't tell you is incredibly valuable for
you to bookmark.

17
00:01:03.620 --> 00:01:07.257
So I'm gonna refer back to Chris's
view enterprise boilerplate,

18
00:01:07.257 --> 00:01:10.520
because he has an example in here for
just that.

19
00:01:10.520 --> 00:01:12.620
We're inside of our router.

20
00:01:13.620 --> 00:01:20.230
If you look at believe this
router dot j s, here we go.

21
00:01:21.350 --> 00:01:26.270
In here you'll see that he's actually
before the route is actually resolved.

22
00:01:26.270 --> 00:01:29.910
He's actually going to check
the Buick store to verify whether or

23
00:01:29.910 --> 00:01:32.670
not the user has been logged in or not.

24
00:01:32.670 --> 00:01:37.750
And then based on that, it will go
ahead and then route them accordingly.

25
00:01:37.750 --> 00:01:40.375
And so to, to answer your question,
basically, yeah,

26
00:01:40.375 --> 00:01:44.263
it's basically a bit like the, before each
concept where you're gonna go ahead and

27
00:01:44.263 --> 00:01:45.970
prior to loading the view.

28
00:01:45.970 --> 00:01:49.605
You're gonna go ahead and check and
make sure that these things exists,

29
00:01:49.605 --> 00:01:51.880
whether it's a token or whatnot.

30
00:01:51.880 --> 00:01:56.030
And so you'll see here that he has
this meta property on his routes.

31
00:01:56.030 --> 00:01:59.010
And so different routes, for
example, require off true.

32
00:02:00.380 --> 00:02:03.526
And so if it has this off true,
then it actually goes ahead and

33
00:02:03.526 --> 00:02:05.230
like runs its checks.

34
00:02:05.230 --> 00:02:07.330
And so as far as a design pattern goes,

35
00:02:07.330 --> 00:02:12.258
I'd recommend if you're architecting your
Routes from scratch and you're looking for

36
00:02:12.258 --> 00:02:16.660
a good pattern to model after for
how to model authentication with routes.

37
00:02:16.660 --> 00:02:21.416
Be sure to check out the enterprise
boilerplate for Chris's model for

38
00:02:21.416 --> 00:02:22.630
how he does this.

39
00:02:24.180 --> 00:02:26.346
And so also as a little bit of context,

40
00:02:26.346 --> 00:02:31.250
the view enterprise boilerplate is
basically a compendium of best practices.

41
00:02:31.250 --> 00:02:36.180
That Chris has basically come up with
over the years as he consulted on apps

42
00:02:36.180 --> 00:02:37.780
of various sizes.

43
00:02:37.780 --> 00:02:40.806
And what he's basically done
is open source this and

44
00:02:40.806 --> 00:02:44.210
a lot of his ideas to basically
share with the community.

45
00:02:44.210 --> 00:02:46.733
And so you basically are like,
if you had a consultant,

46
00:02:46.733 --> 00:02:49.550
you have to hire to learn
these best practices, like.

47
00:02:49.550 --> 00:02:52.950
Chris basically just put this all
in a repo and made it open source.

48
00:02:52.950 --> 00:02:57.580
So it's an incredibly valuable resource
that you should definitely bookmark.

49
00:02:57.580 --> 00:03:02.942
And as time goes on, as I mentioned, we
will be creating a v3 version of this But

50
00:03:02.942 --> 00:03:07.345
again, the the core concepts in
here are incredibly valuable and

51
00:03:07.345 --> 00:03:09.410
definitely keep an eye on it.

52
00:03:09.410 --> 00:03:12.975
So the question here is regarding how
do we like what is a way to go about

53
00:03:12.975 --> 00:03:17.180
documenting components right in terms
of props and those sorta things.

54
00:03:17.180 --> 00:03:21.086
And so there are two main contenders
in this space that are worth keeping

55
00:03:21.086 --> 00:03:21.680
an eye on.

56
00:03:21.680 --> 00:03:23.640
So first of which is the view style guide.

57
00:03:23.640 --> 00:03:26.830
This This is modeled after the react one.

58
00:03:26.830 --> 00:03:31.170
And basically it allows you to create
a living style guide to document your

59
00:03:31.170 --> 00:03:32.010
components.

60
00:03:33.360 --> 00:03:41.150
And so, check out this tool for
sure for seeing how the.

61
00:03:41.150 --> 00:03:44.415
How you might document components using
style guide this, but the other one that

62
00:03:44.415 --> 00:03:48.590
is of course worth mentioning, which some
of you may be thinking of is storybook.

63
00:03:48.590 --> 00:03:52.610
And so
storybook does have a view extension.

64
00:03:52.610 --> 00:03:56.890
And so I think this one is
a little bit easier to demo but

65
00:03:56.890 --> 00:04:00.613
you can see here that let
me do story book demo.

66
00:04:08.008 --> 00:04:10.245
[SOUND] Let's see.

67
00:04:10.245 --> 00:04:12.990
Examples storybooks, okay.

68
00:04:12.990 --> 00:04:13.900
Official storybook UI.

69
00:04:14.910 --> 00:04:15.490
Great.

70
00:04:15.490 --> 00:04:19.733
So for those who haven't used storybook
before, what it does it allows you and

71
00:04:19.733 --> 00:04:24.171
to be honest, your documentation towards
you kinda want a similar impact is allow

72
00:04:24.171 --> 00:04:26.616
you to explore your
different components and

73
00:04:26.616 --> 00:04:31.700
then basically look through and see what
exactly like how everything's built.

74
00:04:31.700 --> 00:04:35.307
Knobs, controls, so you can see here
in this case if this word like the view

75
00:04:35.307 --> 00:04:39.091
equivalent for example may be what props
that are being passed in and these sort

76
00:04:39.091 --> 00:04:43.090
of things and then you can actually
see it being rendered on the screen.

77
00:04:43.090 --> 00:04:48.023
So this is actually a little bit similar
to the Cypress demo that I did earlier

78
00:04:48.023 --> 00:04:52.647
where I think having that visual
feedback to see how something works and

79
00:04:52.647 --> 00:04:57.269
play with it on top of simply reading
it can be a huge boost when it comes to

80
00:04:57.269 --> 00:04:59.650
that developer experience.

81
00:04:59.650 --> 00:05:03.167
And as you can see here that
the documentation here page even has like

82
00:05:03.167 --> 00:05:04.035
a preview of it.

83
00:05:04.035 --> 00:05:05.827
It has what is expected to be passed and

84
00:05:05.827 --> 00:05:08.300
then different in this case
they call them stories.

85
00:05:08.300 --> 00:05:13.050
So different call it scenarios that
the component might be put under.

86
00:05:13.050 --> 00:05:14.810
So it's a storybook view style guide.

87
00:05:14.810 --> 00:05:17.360
This are the best place to get started for
that.

88
00:05:17.360 --> 00:05:22.179
But I would say on the topic of
documentation, if you're looking for a way

89
00:05:22.179 --> 00:05:27.720
to create internal documentation, or even
documentation for your site over time.

90
00:05:28.840 --> 00:05:33.240
The tool I would recommend, if you
haven't heard of it yet, is view press.

91
00:05:33.240 --> 00:05:38.161
And so what this basically is, is it's
a static site generator built with a view

92
00:05:38.161 --> 00:05:41.410
that can then exist
inside of your code repo.

93
00:05:41.410 --> 00:05:45.966
And so the reason why I think this is
incredibly powerful is because what you

94
00:05:45.966 --> 00:05:50.950
end up getting is the ability to pair
documentation with code updates.

95
00:05:50.950 --> 00:05:53.275
And that's a really big thing
when you think of like, again,

96
00:05:53.275 --> 00:05:56.910
we were talking about like implementing
like conventions that are easy to follow.

97
00:05:56.910 --> 00:06:01.825
It's a lot easier for a developer to pare
like, they updated the parameter name for

98
00:06:01.825 --> 00:06:02.450
this API.

99
00:06:02.450 --> 00:06:05.129
So just go ahead and
submit that as part of the pull request,

100
00:06:05.129 --> 00:06:09.200
rather than issuing a pull request for the
update, and then go into a separate repo.

101
00:06:09.200 --> 00:06:14.190
And that's assuming it's even in our repo
To then go ahead and update that as well.

102
00:06:14.190 --> 00:06:18.772
So if your press was basically designed
as like a static site generator that

103
00:06:18.772 --> 00:06:21.390
can exist side by side with code bases and
so

104
00:06:21.390 --> 00:06:25.890
this is definitely a tool worth
checking out if you haven't before.

105
00:06:25.890 --> 00:06:28.115
Basically write everything in markdown and

106
00:06:28.115 --> 00:06:31.910
on top of that you can even import view
components inside of your Markdown.

107
00:06:31.910 --> 00:06:35.800
So you can have like three dynamic
aspects of it, which is really cool.

108
00:06:35.800 --> 00:06:39.702
And so the other tool I definitely
must mention though, for

109
00:06:39.702 --> 00:06:43.430
those who are using
knucks is next content.

110
00:06:43.430 --> 00:06:47.200
And so they have their own dachstein for
example, so in this case, it's like

111
00:06:47.200 --> 00:06:51.260
similar to view press but they have like
sort of like their own development branch.

112
00:06:51.260 --> 00:06:54.810
And so I know that the two teams
are actively learning from each other and

113
00:06:54.810 --> 00:06:56.360
it's great to have them here.

114
00:06:56.360 --> 00:06:59.900
So yeah, they can see they have
this beautiful dark theme.

115
00:06:59.900 --> 00:07:04.142
And like pioneer this sort of code block
thing that you press shamelessly copied

116
00:07:04.142 --> 00:07:06.230
because it was an awesome idea.

117
00:07:06.230 --> 00:07:08.850
So credit to the next team for
making this a standard.

118
00:07:11.020 --> 00:07:14.543
And so yeah, as you can see,
like the other right bar,

119
00:07:14.543 --> 00:07:18.000
automatic generation of headings like,
so, yeah.

120
00:07:18.000 --> 00:07:22.100
So going forward, as you're
looking at docs, so to clarify, so

121
00:07:22.100 --> 00:07:26.090
these are good for
like writing out your documentation.

122
00:07:26.090 --> 00:07:27.699
But to clarify the first question,

123
00:07:27.699 --> 00:07:31.184
the reason why StoryBookand like view
style guide, this are better tools for

124
00:07:31.184 --> 00:07:34.727
component documentation is because
that's when you're documenting within

125
00:07:34.727 --> 00:07:39.000
the components themselves and they're
basically automatically being generated.

126
00:07:39.000 --> 00:07:42.162
Whereas at this level, this is more
about sort of like the writing and

127
00:07:42.162 --> 00:07:44.835
there's more yeah,
basically there's more writing and

128
00:07:44.835 --> 00:07:48.600
content that's dealt with this and
a little bit less automation.

129
00:07:48.600 --> 00:07:52.039
So another thing you couldn't automate
some of those pieces into this, but

130
00:07:52.039 --> 00:07:55.046
as far as like out of the box goes,
like storybook and style guide,

131
00:07:55.046 --> 00:07:57.330
just do a better job of out of the box.

132
00:07:57.330 --> 00:08:00.284
And then if you press next content
our next docs team are good for

133
00:08:00.284 --> 00:08:02.710
like out of the box like doc sites.

134
00:08:02.710 --> 00:08:06.510
So another question that's being asked is
regarding the view x state modules, right?

135
00:08:06.510 --> 00:08:10.818
So we talked about to sort of remind
everyone, we had the shopping cart module

136
00:08:10.818 --> 00:08:13.953
in our view a storm we had
like a to-do list for example.

137
00:08:13.953 --> 00:08:17.817
And the question is regarding
communication between the store modules

138
00:08:17.817 --> 00:08:21.419
and whether or not this is a good
practice long-term and whether or

139
00:08:21.419 --> 00:08:25.730
not there are any patterns that really
help to avoid tight coupling when working

140
00:08:25.730 --> 00:08:27.691
with complex store architecture.

141
00:08:27.691 --> 00:08:31.836
And so when it comes to something like
communicating data between stores,

142
00:08:31.836 --> 00:08:36.175
I would say that over time, if you're
noticing that you're doing this a lot,

143
00:08:36.175 --> 00:08:40.847
this is probably either an indication like
this is where the data driven refactoring

144
00:08:40.847 --> 00:08:42.550
kind of comes in a bit.

145
00:08:42.550 --> 00:08:44.860
Because it's like at this point,
you're doing so

146
00:08:44.860 --> 00:08:48.622
much communication between the two modules
that it's almost worth considering,

147
00:08:48.622 --> 00:08:52.273
is there actually a module that should be
centralizing all of this together in one

148
00:08:52.273 --> 00:08:54.500
place, instead of them talking back and
forth?

149
00:08:56.550 --> 00:08:59.868
And so, as far as like patents,
so there's nothing inherently, so

150
00:08:59.868 --> 00:09:03.072
what I'm saying here is,
as far as the first part of the question,

151
00:09:03.072 --> 00:09:06.700
there's nothing inherently wrong with
communicating it back and forth.

152
00:09:06.700 --> 00:09:10.371
It just over time, you might just
start to notice different patterns and

153
00:09:10.371 --> 00:09:14.343
trends that allow you to create like call
it a third store third module that then

154
00:09:14.343 --> 00:09:18.930
sort of houses those things in one
place so that it's easier to maintain.

155
00:09:18.930 --> 00:09:23.051
Granted like this actually kind of relates
to the second part of the question where

156
00:09:23.051 --> 00:09:26.814
you're saying that this end up like
any patterns avoid tight coupling, so

157
00:09:26.814 --> 00:09:30.160
certainly if we refactor this
communication piece into one you get

158
00:09:30.160 --> 00:09:31.460
a tight coupling.

159
00:09:31.460 --> 00:09:35.330
But I would say that tight coupling is not
inherently a bad thing when it comes to

160
00:09:35.330 --> 00:09:37.520
designing architecture patterns.

161
00:09:37.520 --> 00:09:41.462
Because as long as you're being explicit
and in again, using data driven

162
00:09:41.462 --> 00:09:45.849
refactoring, you have the data to prove
that it's worth keeping that coupling,

163
00:09:45.849 --> 00:09:50.260
there's nothing wrong, like I wouldn't
say you need to avoid this by any means.

164
00:09:50.260 --> 00:09:54.094
The only time the tightly coupling
I would say that, that sort to

165
00:09:54.094 --> 00:09:58.931
become a negative thing is when it becomes
very difficult to split something up.

166
00:09:58.931 --> 00:10:03.831
And so that's why I say that like early on
when you don't know how exactly the flow

167
00:10:03.831 --> 00:10:07.941
of data is going to happen or
you're still getting that that sense of

168
00:10:07.941 --> 00:10:11.220
how the architecture
is working as a whole.

169
00:10:11.220 --> 00:10:14.522
Keep things as atomic and
isolated as humanly possible,

170
00:10:14.522 --> 00:10:19.267
because that will then enable you to make
the right choices to put them together and

171
00:10:19.267 --> 00:10:21.960
then start bundling them as you're like.

172
00:10:21.960 --> 00:10:24.619
Yes, this makes a lot of
sense to put together.

173
00:10:24.619 --> 00:10:29.599
And so when it comes to state management,
I would say it's the bottom up approach is

174
00:10:29.599 --> 00:10:34.250
to start with small pieces and
then assemble them into a bigger one.

175
00:10:34.250 --> 00:10:37.906
On the other hand, and just this is
related so just you have the mental model

176
00:10:37.906 --> 00:10:41.620
when it comes to components,
I tend to recommend the opposite way.

177
00:10:41.620 --> 00:10:45.210
Which is like just build the thing,
make it work, right?

178
00:10:45.210 --> 00:10:49.206
And then once you have it working,
then split it off and don't get me wrong

179
00:10:49.206 --> 00:10:53.543
like with experience you'll probably
built like break things off in advance.

180
00:10:53.543 --> 00:10:57.307
What I'm saying with component
architecture is you don't need to sit

181
00:10:57.307 --> 00:11:01.450
there and think like how small should I
go for this component like I would say,

182
00:11:01.450 --> 00:11:03.070
just build it, make it work.

183
00:11:03.070 --> 00:11:06.021
And then you can kind of have those
discussions the other way because

184
00:11:06.021 --> 00:11:09.492
components have that reverse effect where
when you see everything in tandem and

185
00:11:09.492 --> 00:11:13.090
you see how they connect, it's easier
to refactor out the shared pieces.

186
00:11:13.090 --> 00:11:17.220
Whereas with shared state where you
have a lot of things, relying on it.

187
00:11:17.220 --> 00:11:20.326
That's the opposite thing where if you
have too many things tightly coupled to

188
00:11:20.326 --> 00:11:22.771
it, then you're going to end
up with the effect of like,

189
00:11:22.771 --> 00:11:24.810
we shouldn't have coupled
that at the beginning.

190
00:11:25.920 --> 00:11:28.480
So, hopefully that helps
answer your question.

191
00:11:28.480 --> 00:11:32.091
If not,
please feel free to add more context and

192
00:11:32.091 --> 00:11:36.169
I'm happy to give more sort
of embellish the answer.

193
00:11:38.788 --> 00:11:43.000
So another question here we have is
are there any examples of app or

194
00:11:43.000 --> 00:11:48.720
sites that have implemented the view
enterprise boilerplate for a complete app?

195
00:11:48.720 --> 00:11:51.710
And I can say with absolute certainty,

196
00:11:51.710 --> 00:11:55.370
there are a ton that
have actually done this.

197
00:11:55.370 --> 00:11:59.198
So what probably should ask Chris is to
see which companies are willing to go

198
00:11:59.198 --> 00:12:01.170
public with that information.

199
00:12:01.170 --> 00:12:05.121
But generally speaking,
I'm I know a ton of developers

200
00:12:05.121 --> 00:12:09.830
who have basically taken Chris's
his enterprise boilerplate and

201
00:12:09.830 --> 00:12:15.290
have forked it and then gone ahead
then create their own version of it.

202
00:12:15.290 --> 00:12:19.995
And so that's, I think the key thing
to this question is that it's not so

203
00:12:19.995 --> 00:12:25.089
much that like there are apps that call
it, like there's no signature in an app

204
00:12:25.089 --> 00:12:31.060
that would immediately say, that's
Chris's view enterprise boiler plate.

205
00:12:31.060 --> 00:12:32.677
Over time, as he's shared his knowledge,

206
00:12:32.677 --> 00:12:35.390
people have taken the pieces that
made the most sense to them.

207
00:12:35.390 --> 00:12:37.580
And basically like bundled it themselves.

208
00:12:37.580 --> 00:12:41.955
And so, I mean, I know that basically
any client he's had has basically used,

209
00:12:41.955 --> 00:12:45.416
his boiler plate as the base thing
that they started off of and so

210
00:12:45.416 --> 00:12:48.355
given that his full-time
role as a view consultant,

211
00:12:48.355 --> 00:12:52.950
we can imagine there are many many
successful companies who have done so.

212
00:12:52.950 --> 00:12:57.535
And so yeah, in the future, what I'll try
to do for this question is, I'll see if

213
00:12:57.535 --> 00:13:01.258
any of these companies are like
willing to go call it on the record so

214
00:13:01.258 --> 00:13:05.913
that on the GitHub repo going forward, if
you're looking for call it reasons to use

215
00:13:05.913 --> 00:13:10.232
it, then you can go ahead and sort of
use that as like, ways to say that, hey,

216
00:13:10.232 --> 00:13:13.920
all these other companies also
use the enterprise boilerplate.

217
00:13:16.030 --> 00:13:20.053
But otherwise, as a whole, I really would
recommend thinking of the enterprise

218
00:13:20.053 --> 00:13:24.135
boilerplate just more of a collection of
opinionated practices that you can use to

219
00:13:24.135 --> 00:13:27.093
just beef up your own knowledge because,
as we mentioned,

220
00:13:27.093 --> 00:13:31.890
like the enterprise boilerplate on its own
doesn't represent like the perfect app.

221
00:13:31.890 --> 00:13:35.282
What it does is represent a lot of
different ideas that is worse than

222
00:13:35.282 --> 00:13:39.221
the time to tease apart and understand,
like why the decisions were made, or

223
00:13:39.221 --> 00:13:42.760
that certain techniques do exist for
handling things a certain way.

224
00:13:42.760 --> 00:13:47.277
If you approach the enterprise boilerplate
that way, I think you'll find it to be

225
00:13:47.277 --> 00:13:50.960
super valuable for, you know,
building your own apps.

226
00:13:50.960 --> 00:13:54.990
Okay, so the question here is
regarding when we're building

227
00:13:54.990 --> 00:13:59.875
applications with TypeScript, whether or
not to use class components and

228
00:13:59.875 --> 00:14:03.250
to use them with
decorators on top of that.

229
00:14:03.250 --> 00:14:07.975
And so I'll be the first to say that
like my exposure to the TypeScript realm

230
00:14:07.975 --> 00:14:11.875
with view is still limited as far
as like exploring sort of like

231
00:14:11.875 --> 00:14:15.110
the depths of what types of is capable of.

232
00:14:15.110 --> 00:14:20.200
And so what I would say though, about
generally speaking, when using things like

233
00:14:20.200 --> 00:14:24.774
decorators in like the class components
is that we saw this happen in other

234
00:14:24.774 --> 00:14:29.573
ecosystems where, because decorators
doesn't have full native support,

235
00:14:29.573 --> 00:14:34.736
from what I understand so far, and that
it's still like in an experimental phase,

236
00:14:34.736 --> 00:14:37.520
this in some ways you can,
how do I say this?

237
00:14:39.920 --> 00:14:44.272
So when it comes to decorators and API's
that are still in the experimental phase,

238
00:14:44.272 --> 00:14:48.320
this can be a little bit tricky
to use on an enterprise scale.

239
00:14:48.320 --> 00:14:53.187
Because this means that is in the future
The class component API needs to

240
00:14:53.187 --> 00:14:54.860
deprecate it.

241
00:14:54.860 --> 00:14:56.235
You've kind of invested in,

242
00:14:56.235 --> 00:14:59.500
in an ecosystem that now you
need to change everything.

243
00:14:59.500 --> 00:15:03.639
And so for me, when I'm thinking of
enterprise grade level apps, I tend to

244
00:15:03.639 --> 00:15:07.779
veer away from the sort of non spec
features for this very reason, because I

245
00:15:07.779 --> 00:15:12.184
wanna make sure that if someone's gonna
spend the time to learn the thing, that

246
00:15:12.184 --> 00:15:16.587
one is gonna stick around and two that
later on if we enforce this convention, it

247
00:15:16.587 --> 00:15:21.610
won't be really difficult because I think
part of it is with things like decorators.

248
00:15:21.610 --> 00:15:25.470
There's not necessarily a clear path
to what the alternative might be.

249
00:15:25.470 --> 00:15:27.967
Whereas for example,
the reason why I recommend for

250
00:15:27.967 --> 00:15:31.032
people going from like JavaScript
to TypeScript to start with,

251
00:15:31.032 --> 00:15:34.910
like Just start with JS Doc's comment is
because those are very easy to wipe out.

252
00:15:34.910 --> 00:15:35.930
They won't impact your code.

253
00:15:35.930 --> 00:15:39.268
But something like decorators, especially
if you're counting on them working

254
00:15:39.268 --> 00:15:42.050
a certain way to enhance your
individual class components.

255
00:15:42.050 --> 00:15:45.876
That can be a little bit tricky if
something changes architecturally with

256
00:15:45.876 --> 00:15:47.310
that technique.

257
00:15:47.310 --> 00:15:51.360
There's a question regarding where
defining data inside view components.

258
00:15:51.360 --> 00:15:53.846
Especially when you're designing
it inside of the data,

259
00:15:53.846 --> 00:15:56.280
function that has a data store object.

260
00:15:56.280 --> 00:15:58.400
Traditionally all of these
things are made reactive.

261
00:15:59.490 --> 00:16:04.403
And so, one of the questions here is like,
what happens when we wanna actually,

262
00:16:04.403 --> 00:16:07.480
define things that are actually static?

263
00:16:07.480 --> 00:16:11.180
Because currently everything is made
reactive basically immediately.

264
00:16:11.180 --> 00:16:14.463
In those cases,
what I actually recommend is using in this

265
00:16:14.463 --> 00:16:19.096
case cause I'm assuming you're, well,
let's look with the view three piece.

266
00:16:19.096 --> 00:16:22.326
In view three composition
API is actually perfect for

267
00:16:22.326 --> 00:16:26.275
this because you can basically
share this piece with everyone and

268
00:16:26.275 --> 00:16:31.080
then import it and then have it create,
and then it will never change, right?

269
00:16:31.080 --> 00:16:35.259
No one will accidentally update This
static piece from the composition API

270
00:16:35.259 --> 00:16:39.090
because you've already said I
don't want it to be reactive.

271
00:16:39.090 --> 00:16:43.090
It's just a variable that contains
the string or a string that's generated at

272
00:16:43.090 --> 00:16:46.680
runtime, what not and then after that,
it doesn't change anymore.

273
00:16:47.930 --> 00:16:51.020
So I think that's the approach
I would take with view three.

274
00:16:51.020 --> 00:16:56.011
And with view to certainly if you're not
adding the composition API plugin into

275
00:16:56.011 --> 00:17:00.560
your app, then certainly you can go Yeah,

276
00:17:00.560 --> 00:17:03.280
it's a little bit trickier without that,
and this is one of those things.

277
00:17:03.280 --> 00:17:09.284
So, theoretically then.yeah
thinking hard about this,

278
00:17:09.284 --> 00:17:15.779
removing reactivity from a property,
would be fairly tricky.

279
00:17:15.779 --> 00:17:21.266
The only thing I can maybe think of,
I got an answer.If you have something

280
00:17:21.266 --> 00:17:26.133
that's static, let's say you
needed to stick around the page,

281
00:17:26.133 --> 00:17:29.960
but you don't wanna be part
of the reactive store.

282
00:17:29.960 --> 00:17:32.466
One of the things I've seen people do,
especially when,

283
00:17:32.466 --> 00:17:36.040
especially these static things are usually
generated at runtime or bill time.

284
00:17:36.040 --> 00:17:37.100
Sorry, at bill time.

285
00:17:38.510 --> 00:17:40.062
So on the server side,

286
00:17:40.062 --> 00:17:44.740
you can basically think of it like
you can expose global concepts.

287
00:17:44.740 --> 00:17:45.454
For example,

288
00:17:45.454 --> 00:17:49.330
this is one way that I've seen,
I've actually done this on production.

289
00:17:49.330 --> 00:17:51.240
Where we have the backend
expose something.

290
00:17:51.240 --> 00:17:54.244
Again, we're assuming here that this
is something that can be public,

291
00:17:54.244 --> 00:17:55.730
it's okay that someone can see it.

292
00:17:57.520 --> 00:18:01.328
Then once they put that as part of the
HTML, inside of your mounted hook, right,

293
00:18:01.328 --> 00:18:03.792
you can imagine on your
component Go ahead and like,

294
00:18:03.792 --> 00:18:06.648
just like traditional Java script,
go ahead and fetch out,

295
00:18:06.648 --> 00:18:10.400
fetch that element and pull that and
basically pull that variable in.

296
00:18:10.400 --> 00:18:15.397
Or in the event you have more control over
what's rendered on the server, have index,

297
00:18:15.397 --> 00:18:19.985
whatever that index, that HTML file is,
make sure that exposes like the static

298
00:18:19.985 --> 00:18:24.855
variable in the global state and that's a
way of escaping sort of views of activity.

299
00:18:24.855 --> 00:18:28.902
But from what I've heard so
far regarding the composition API plugin,

300
00:18:28.902 --> 00:18:32.230
it has been fairly stable for
people in production.

301
00:18:32.230 --> 00:18:36.051
So if you're using it for something as
simple as sharing static properties

302
00:18:36.051 --> 00:18:40.175
between components, I don't see any reason
why you shouldn't just go ahead and

303
00:18:40.175 --> 00:18:42.150
use the plugin and do that directly.

304
00:18:42.150 --> 00:18:43.786
But in the event that for whatever reason,

305
00:18:43.786 --> 00:18:46.450
your team wants to avoid having
that additional payload.

306
00:18:46.450 --> 00:18:51.410
That is one way you can sort of skirt the
system as far as having reactivity tract.

307
00:18:52.990 --> 00:18:57.061
So lemme know if that doesn't answer
your question, but that's how I

308
00:18:57.061 --> 00:19:01.560
would approach having static data shared
across components instead of you.

