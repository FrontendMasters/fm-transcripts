WEBVTT

1
00:00:00.390 --> 00:00:01.120
All right.

2
00:00:01.120 --> 00:00:02.280
Welcome back, everyone.

3
00:00:02.280 --> 00:00:05.160
So hopefully you found the challenge.

4
00:00:05.160 --> 00:00:08.400
Again, it probably took a little
bit of time to get used to.

5
00:00:08.400 --> 00:00:11.480
And so as far as just building out
the features that we talked about,

6
00:00:11.480 --> 00:00:13.920
want to go ahead and do that together.

7
00:00:13.920 --> 00:00:17.448
And so the first thing we talked about is,
once you've wired up the account, right,

8
00:00:17.448 --> 00:00:19.020
you see something changing.

9
00:00:19.020 --> 00:00:22.305
We want to be able to actually
modify what that property is or

10
00:00:22.305 --> 00:00:25.789
sort of how much we're incrementing by And
so, typical view,

11
00:00:25.789 --> 00:00:31.130
we'd go ahead and say like an input type,
and this case, I'll just call it number.

12
00:00:31.130 --> 00:00:34.550
And we would want to attach it to a V
model called like, change amount for

13
00:00:34.550 --> 00:00:35.070
example.

14
00:00:38.510 --> 00:00:41.785
And so
here what we can do then inside of our

15
00:00:41.785 --> 00:00:45.070
setup function is to then define a setup.

16
00:00:46.600 --> 00:00:48.960
Sorry change amount variable.

17
00:00:48.960 --> 00:00:56.570
In this case, let's just call this two and
then we will expose it to our template.

18
00:00:56.570 --> 00:00:58.940
Some of you probably already
seeing something funny.

19
00:00:58.940 --> 00:01:04.680
So it works right in terms of like we
see it here and it's updating there.

20
00:01:04.680 --> 00:01:06.460
So it's taking the value.

21
00:01:06.460 --> 00:01:10.080
But some of you as you might have guessed,
it is not reactive right now.

22
00:01:10.080 --> 00:01:14.020
So just for practicing,
we're gonna go ahead and make this a ref.

23
00:01:14.020 --> 00:01:17.903
So you can see now that, for example,
actually, just to make sure that, to

24
00:01:17.903 --> 00:01:22.040
show you that this is not reactive, I can
go ahead and expose change amount here.

25
00:01:24.130 --> 00:01:27.002
And so here we go, we have the two here,
But then when I go ahead and

26
00:01:27.002 --> 00:01:30.630
increment this, you'll see that
nothing is changing on this side.

27
00:01:30.630 --> 00:01:32.430
Because right now it's just a stat.

28
00:01:32.430 --> 00:01:33.060
It's just a number.

29
00:01:34.690 --> 00:01:37.451
And so what we're going to do then
is we're going to go ahead and

30
00:01:37.451 --> 00:01:39.010
import our ref.

31
00:01:39.010 --> 00:01:41.010
From wrong place.

32
00:01:41.010 --> 00:01:44.882
Import ref, because we want to be
a reactive reference the site the way you

33
00:01:44.882 --> 00:01:46.520
can try to remember it.

34
00:01:46.520 --> 00:01:48.470
Reactive reference from view.

35
00:01:49.690 --> 00:01:52.880
And then, I'm just gonna wrap
it like this in this case.

36
00:01:52.880 --> 00:01:54.533
And so now when I save,

37
00:01:54.533 --> 00:01:59.860
you can see now that when I increment
this now it actually changes.

38
00:01:59.860 --> 00:02:03.514
And so here you can actually see this is
a probably a good example where ref is

39
00:02:03.514 --> 00:02:04.790
actually nice.

40
00:02:04.790 --> 00:02:09.197
In terms of like, we just need a reactive
primitive in this case, there's a number,

41
00:02:09.197 --> 00:02:13.485
we're not really doing much with it from
like a, like computation standards where

42
00:02:13.485 --> 00:02:17.810
we have to use a lot of values and
unpack work and get a little bit hairy.

43
00:02:17.810 --> 00:02:22.860
And so, by doing it like this, you can
see that now everything's reactive.

44
00:02:22.860 --> 00:02:25.720
We ca Change this increments.

45
00:02:25.720 --> 00:02:28.610
And then we can do then
is increment count.

46
00:02:28.610 --> 00:02:33.633
For example, if we wanted to integrate
this into our like composition API,

47
00:02:33.633 --> 00:02:38.980
it would basically take an amount as a
parameter, which we could default to one.

48
00:02:40.280 --> 00:02:41.780
I believe that should work.

49
00:02:41.780 --> 00:02:45.020
And so
then it should be plus equals amount.

50
00:02:45.020 --> 00:02:46.560
So save.

51
00:02:46.560 --> 00:02:47.670
Okay, increment count.

52
00:02:48.830 --> 00:02:50.170
Yep.

53
00:02:50.170 --> 00:02:53.890
So hang on a sec might
have to separate this.

54
00:02:53.890 --> 00:02:56.100
So let me just do new increment.

55
00:02:58.010 --> 00:03:03.100
Count is equal to increment
count with a value of 2.

56
00:03:03.100 --> 00:03:04.100
Right?

57
00:03:04.100 --> 00:03:05.255
You increment count.

58
00:03:05.255 --> 00:03:12.920
This passed great and then we should when
it's clicked let's just logout the amount,

59
00:03:12.920 --> 00:03:16.805
live debugging it does not like something,

60
00:03:16.805 --> 00:03:21.950
really doesn't like something,
okay refresh now Okay,

61
00:03:21.950 --> 00:03:28.000
I think that's because the mouse
event is being passed in.

62
00:03:28.000 --> 00:03:32.530
So the idea here is then we have
the change amount here, then we can,

63
00:03:32.530 --> 00:03:38.252
interesting that it's not letting me pass
it through, but we would theoretically,

64
00:03:38.252 --> 00:03:42.640
again, if this were,
we had again this our new increment count.

65
00:03:43.900 --> 00:03:46.650
We could go ahead and then just pass it.

66
00:03:46.650 --> 00:03:48.232
Change amount.

67
00:03:48.232 --> 00:03:49.190
I wonder if that's why.

68
00:03:51.130 --> 00:03:58.470
Change amount value for example, and
then wait this is a function sorry.

69
00:04:00.250 --> 00:04:05.533
That then takes current
count Dot value and

70
00:04:05.533 --> 00:04:09.940
adds it to change amount dot value.

71
00:04:11.900 --> 00:04:15.927
So with new increment count
attached to our button,

72
00:04:15.927 --> 00:04:19.140
increment is assigned, but never used.

73
00:04:19.140 --> 00:04:20.050
Yep.
I can delete that.

74
00:04:21.060 --> 00:04:22.950
So I'm pretty sure I needed
the factory generator for that.

75
00:04:22.950 --> 00:04:25.860
But we don't worry too much about this,
but you can see here.

76
00:04:25.860 --> 00:04:31.950
But if I change it now it is no
most their ,fee model number.

77
00:04:31.950 --> 00:04:34.080
I'm sure some of you caught that already.

78
00:04:34.080 --> 00:04:37.740
So update to works back up to five.

79
00:04:37.740 --> 00:04:38.560
And we're good.

80
00:04:38.560 --> 00:04:43.252
As you can see here, there's still a lot
of lessons learned as far as composition

81
00:04:43.252 --> 00:04:45.220
API and how it will be used.

82
00:04:45.220 --> 00:04:49.850
And so this is why at the moment in terms
of, Design patterns and best practices.

83
00:04:49.850 --> 00:04:54.053
Those are sort of still up to the
community to try out the composition API

84
00:04:54.053 --> 00:04:57.204
and see just how far that they
can basically push it and

85
00:04:57.204 --> 00:05:00.940
see like what makes sense and
what doesn't over the long term.

