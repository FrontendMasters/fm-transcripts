WEBVTT

1
00:00:00.200 --> 00:00:04.329
So because this is also, I know there's
a lot in this topic, does anyone have any

2
00:00:04.329 --> 00:00:08.465
specific questions you'd like to address
regarding sort of composition API and

3
00:00:08.465 --> 00:00:09.770
state management?

4
00:00:09.770 --> 00:00:14.446
So the question is whether or not I
recommend using the map state instead of

5
00:00:14.446 --> 00:00:17.930
doing this dot store,
dot state, for example.

6
00:00:17.930 --> 00:00:22.260
In that regard,
I would say that this mapping state is

7
00:00:22.260 --> 00:00:27.090
totally fine as far as keeping
sort of user usability.

8
00:00:27.090 --> 00:00:31.552
Because I guess the only fear that you
might have I think with map state would be

9
00:00:31.552 --> 00:00:33.160
named collisions.

10
00:00:33.160 --> 00:00:36.649
And so in that regard, you can
actually V map some of those names so

11
00:00:36.649 --> 00:00:40.336
that let's say for example,
you have a username in your vuex store.

12
00:00:40.336 --> 00:00:43.156
But you also have a username
inside of your component.

13
00:00:43.156 --> 00:00:47.330
In that case the map helpers is actually
really cool because you can actually use

14
00:00:47.330 --> 00:00:50.519
an object syntax and
renamed the property that it's not to.

15
00:00:50.519 --> 00:00:53.170
Basically you can define an alias for it.

16
00:00:53.170 --> 00:00:55.210
And so that way you still get
the ergonomics of this dot.

17
00:00:55.210 --> 00:01:00.240
I don't know call it store user name or
whatever module it's associated to.

18
00:01:00.240 --> 00:01:03.915
That way you still get the ergonomics
of having that shorthand.

19
00:01:03.915 --> 00:01:08.873
But at the same time you it's so explicit,
you're avoiding the name collision

20
00:01:08.873 --> 00:01:13.560
while still leveraging the developer
experience and benefit piece.

21
00:01:13.560 --> 00:01:16.690
So the question from what I
heard is that in the event,

22
00:01:16.690 --> 00:01:21.572
we wanna dispatch some sort of or sorry if
you wanna make a change in another module.

23
00:01:21.572 --> 00:01:26.170
So okay, well let's go back to our
example we have our shopping cart module.

24
00:01:26.170 --> 00:01:27.580
And we have our to do list module.

25
00:01:27.580 --> 00:01:29.750
That's the easiest way for us to remember.

26
00:01:29.750 --> 00:01:34.160
If shopping cart needs to make an update
over to do lists like dispatch.

27
00:01:34.160 --> 00:01:37.563
So the question is whether or not to
mutate it directly or dispatch actions,

28
00:01:37.563 --> 00:01:38.850
especially with this case.

29
00:01:38.850 --> 00:01:42.210
We're talking about basically
communicating between modules.

30
00:01:42.210 --> 00:01:45.700
I would recommend sticking with
actions in this particular case.

31
00:01:45.700 --> 00:01:49.512
Because the moment you have
an actual mutation linked together,

32
00:01:49.512 --> 00:01:51.875
it's like the provide inject example.

33
00:01:51.875 --> 00:01:56.592
You've created a fixed relationship
where if in the future like over here in

34
00:01:56.592 --> 00:02:00.939
shopping list, we change either I
don't know call it the mutation and

35
00:02:00.939 --> 00:02:02.170
how it works.

36
00:02:02.170 --> 00:02:05.140
This can actually break
what's going on over here.

37
00:02:05.140 --> 00:02:09.065
Whereas if you have an action you still
need to update if things renamed and

38
00:02:09.065 --> 00:02:09.584
things.

39
00:02:09.584 --> 00:02:13.826
But you allow sort of a better, sort of
a more declarative way of saying what you

40
00:02:13.826 --> 00:02:17.769
wanna do and then the implementation
details can be taken care of later.

41
00:02:17.769 --> 00:02:21.670
As opposed to doing the mutation
directly from module to module.

42
00:02:21.670 --> 00:02:24.615
So, hopefully that helps
answer your question.

43
00:02:24.615 --> 00:02:29.605
[LAUGH] So the statement made in the chat
is that they enjoy the declarative nature

44
00:02:29.605 --> 00:02:33.774
or the more explicit nature of
using this dot store, dot state, or

45
00:02:33.774 --> 00:02:38.467
dot dispatch, in order to be very
explicit as far as what you're accessing

46
00:02:38.467 --> 00:02:43.020
rather than conflicting it with
the component namespace, right?

47
00:02:43.020 --> 00:02:46.940
So in this regard, it's related to the
first question regarding weather map state

48
00:02:46.940 --> 00:02:49.850
or accessing the disk dollar
store makes more sense.

49
00:02:49.850 --> 00:02:53.955
And so this is a perfect example of I
think it's important to define what makes

50
00:02:53.955 --> 00:02:56.600
the most sense for your team long term.

51
00:02:56.600 --> 00:03:01.099
And so you're right if you feel that
over time either the the local data

52
00:03:01.099 --> 00:03:05.500
instance is started getting
muddled up with the map functions.

53
00:03:05.500 --> 00:03:06.030
Absolutely.

54
00:03:06.030 --> 00:03:08.609
I agree that if you just
keep it consistent,

55
00:03:08.609 --> 00:03:11.816
then you can go ahead and
just always do the dispatch and

56
00:03:11.816 --> 00:03:16.130
do the state and getters directly
with very little confusion.

57
00:03:16.130 --> 00:03:19.594
So, I just want you all to know
basically with the tip to use

58
00:03:19.594 --> 00:03:23.590
it is that in the event that
the ergonomics make more sense.

59
00:03:23.590 --> 00:03:27.204
And so whether you can come up with
a naming convention that maybe your team

60
00:03:27.204 --> 00:03:30.830
uses for when it's actually affecting
the Vuex store for example.

61
00:03:30.830 --> 00:03:34.986
Then that way you can still leverage
this dot whatever like the method or

62
00:03:34.986 --> 00:03:36.870
the getter state.

63
00:03:36.870 --> 00:03:39.478
But again, pick and
choose what works best for your team and

64
00:03:39.478 --> 00:03:41.370
definitely don't take what I'm saying.

65
00:03:41.370 --> 00:03:44.000
It's like a carpet Blanche,
always do this kind of thing.

66
00:03:44.000 --> 00:03:47.450
So we have another great question here,
which is regarding, well,

67
00:03:47.450 --> 00:03:48.705
if we have Vuex, right?

68
00:03:48.705 --> 00:03:52.709
And let's say, its underlying,
it's already using composition, the API.

69
00:03:52.709 --> 00:03:57.487
Is there even any value in the composition
using the composition API since we

70
00:03:57.487 --> 00:03:58.241
have Vuex.

71
00:03:58.241 --> 00:04:00.859
And so for that, I would say absolutely.

72
00:04:00.859 --> 00:04:05.060
Similar to the object API and
composition API discussion.

73
00:04:05.060 --> 00:04:09.690
The value of using Vuex with composition
API is that Vuex is really that sort of

74
00:04:09.690 --> 00:04:13.290
single source of truth for
that global store.

75
00:04:13.290 --> 00:04:16.535
And so the problem that people have
run into is because over time,

76
00:04:16.535 --> 00:04:20.360
especially in view 2 people,
relied on Vuex to house everything.

77
00:04:20.360 --> 00:04:24.930
So if you had only two components,
they needed to share something.

78
00:04:24.930 --> 00:04:27.146
That went into Vuex immediately.

79
00:04:27.146 --> 00:04:31.964
And especially you can imagine on an app
that scales really quickly with a lot of

80
00:04:31.964 --> 00:04:37.008
state a lot of functionality API calls you
can end up overloading your Vuex store.

81
00:04:37.008 --> 00:04:41.782
And so composition API is still beautiful
in its ability to keep the simple thing

82
00:04:41.782 --> 00:04:42.420
shared.

83
00:04:42.420 --> 00:04:45.827
So if it is a simple as a couple
components needing one shared property

84
00:04:45.827 --> 00:04:49.330
that doesn't have a lot of
dependency on everything else.

85
00:04:49.330 --> 00:04:53.345
Then I think in that case, composition API
is still perfect for those scenarios, and

86
00:04:53.345 --> 00:04:56.380
that throwing it into Vuex
is probably be overkill.

87
00:04:56.380 --> 00:05:00.748
On the other hand, if you have your
functionality is fetching the API and

88
00:05:00.748 --> 00:05:04.328
doing all these things that
have large impact across apps,

89
00:05:04.328 --> 00:05:07.907
then this is where the debug
ability of the Vuex dev tools and

90
00:05:07.907 --> 00:05:11.222
those sort of things can be critical for
those pieces.

91
00:05:11.222 --> 00:05:15.967
So basically, I think the key principle
here to keep in mind when determining

92
00:05:15.967 --> 00:05:20.420
when to use Vuex and when to use
composition API is really determining how

93
00:05:20.420 --> 00:05:25.340
critical those functionality are as
far as a global impact on your app.

94
00:05:25.340 --> 00:05:30.288
And then with that comes certainly
basically the ability to debug and

95
00:05:30.288 --> 00:05:32.770
make things, and fixing faster.

96
00:05:32.770 --> 00:05:36.110
So the other question we have
here is regarding whether.

97
00:05:36.110 --> 00:05:39.140
A single action should
only commit one mutation.

98
00:05:39.140 --> 00:05:43.211
Or I think the other one was whether
a mutation should update multiple pieces

99
00:05:43.211 --> 00:05:44.590
of state.

100
00:05:44.590 --> 00:05:48.748
So I'm gonna answer this formula question,
if I'm wrong, please,

101
00:05:48.748 --> 00:05:50.830
please clarify for me.

102
00:05:50.830 --> 00:05:54.657
So when it comes to actions, there
really is no call it best practice, for

103
00:05:54.657 --> 00:05:57.460
how many mutations you
should be committing.

104
00:05:57.460 --> 00:06:01.215
After all, especially when you have
things as complex as fetching an API and

105
00:06:01.215 --> 00:06:02.560
then breaking it out.

106
00:06:02.560 --> 00:06:04.809
A lot of times there are multiple
things you're committing,

107
00:06:04.809 --> 00:06:07.010
because the API might give
you one large response.

108
00:06:07.010 --> 00:06:10.502
Then you want to chunk out into
different modules or different methods.

109
00:06:10.502 --> 00:06:13.709
There are definite reasons to commit
more than once in an action and

110
00:06:13.709 --> 00:06:16.130
there's absolutely
nothing wrong with that.

111
00:06:16.130 --> 00:06:19.413
As far as mutating state,
this is a more nuanced question,

112
00:06:19.413 --> 00:06:21.121
because the idea here is that,

113
00:06:21.121 --> 00:06:25.930
do you want a single mutation to update
multiple pieces of state versus one?

114
00:06:25.930 --> 00:06:31.070
And so I think this is,
call it a gut feeling.

115
00:06:31.070 --> 00:06:32.910
Unfortunately with this one,

116
00:06:32.910 --> 00:06:36.597
in the sense that think of it
data-driven refactoring from.

117
00:06:36.597 --> 00:06:39.457
I would probably start
with atomic pieces only

118
00:06:39.457 --> 00:06:43.680
because atomic pieces can
be composed into action.

119
00:06:43.680 --> 00:06:48.558
And so unless you're really sure about
the architecture of this one mutation

120
00:06:48.558 --> 00:06:51.400
should update three pieces of state.

121
00:06:51.400 --> 00:06:53.970
And this is always the case and
it should never change.

122
00:06:53.970 --> 00:06:58.503
Then there's an argument to impacting
multiple pieces of state with a single

123
00:06:58.503 --> 00:06:59.550
mutation.

124
00:06:59.550 --> 00:07:04.566
But I would say using composability and
preventing your mutation from getting too

125
00:07:04.566 --> 00:07:09.799
tightly coupled, because you can imagine
that if one mutation makes three changes,

126
00:07:09.799 --> 00:07:13.600
and then you use that mutation
everywhere in your app.

127
00:07:13.600 --> 00:07:17.435
You basically can never refactor this
without causing a lot of potential side

128
00:07:17.435 --> 00:07:17.970
effects.

129
00:07:17.970 --> 00:07:20.644
Because basically,
at various points in your app,

130
00:07:20.644 --> 00:07:23.370
you will be relying on
three state changes.

131
00:07:23.370 --> 00:07:27.826
Whereas if we take again sort of
composing, right, pieces together.

132
00:07:27.826 --> 00:07:33.250
If you do three individual mutations that
change three different pieces of state,

133
00:07:33.250 --> 00:07:36.530
and then compose that into an action.

134
00:07:36.530 --> 00:07:38.440
Now in the future, you can break it up.

135
00:07:38.440 --> 00:07:42.545
You can be, okay, yeah, we're using this
action to commit three state changes, but

136
00:07:42.545 --> 00:07:44.450
then it's very easy to go.

137
00:07:44.450 --> 00:07:45.430
Do you know what?

138
00:07:45.430 --> 00:07:47.797
That three only I don't need
that one I just need two and

139
00:07:47.797 --> 00:07:49.920
then I'll create one that does two for
example.

