WEBVTT

1
00:00:00.590 --> 00:00:03.170
So we're gonna do a little
bit of practice now.

2
00:00:03.170 --> 00:00:06.113
So inside, there's two different
ways we're gonna approach practices

3
00:00:06.113 --> 00:00:07.190
going forward.

4
00:00:07.190 --> 00:00:11.652
And so inside of the repo that we have for
the production grade view,

5
00:00:11.652 --> 00:00:15.570
we have a dynamic cutting
component inside of there.

6
00:00:15.570 --> 00:00:18.407
And we're gonna want to rewrite
that using the render function, so

7
00:00:18.407 --> 00:00:19.968
I'll preface with that in a second.

8
00:00:19.968 --> 00:00:22.920
And then the other thing we
can do is gonna go ahead and

9
00:00:22.920 --> 00:00:26.760
refactor our app styles, to use
a CSS class and CSS modules as well.

10
00:00:27.880 --> 00:00:30.838
However, I know a lot of us here
are probably experienced with view at

11
00:00:30.838 --> 00:00:31.400
this point.

12
00:00:31.400 --> 00:00:34.822
So, I want to go ahead and take a look
around your components inside of

13
00:00:34.822 --> 00:00:38.952
your application and see if there are any
components that might benefit from either

14
00:00:38.952 --> 00:00:41.190
using the render method for example.

15
00:00:41.190 --> 00:00:43.897
Or take this opportunity to then
refactor your component and

16
00:00:43.897 --> 00:00:47.200
give CSS modules a chance and see how
that works out for your application.

17
00:00:48.230 --> 00:00:52.157
As I mentioned earlier, there are times
when it comes to template and

18
00:00:52.157 --> 00:00:56.086
render functions that managing
everything in template can be well,

19
00:00:56.086 --> 00:00:59.920
while declarative can be
rather tedious to maintain.

20
00:00:59.920 --> 00:01:03.490
So here, a common example that you use
is the dynamic heading example where

21
00:01:03.490 --> 00:01:06.787
depending on where the content is
used inside of the markup, right?

22
00:01:06.787 --> 00:01:10.583
We want it to be accessible use the right
structure, but this means you need to be

23
00:01:10.583 --> 00:01:13.318
able to programmatically say
is this an h1, h2 or h3.

24
00:01:13.318 --> 00:01:16.810
If you were to do this with a template
you'd have to as you can see, do the if,

25
00:01:16.810 --> 00:01:18.448
else if, and it's very verbose and

26
00:01:18.448 --> 00:01:21.310
not to mention we have a lot
of duplication here, right?

27
00:01:21.310 --> 00:01:24.460
We have Hello Friend Masters
done six times.

28
00:01:24.460 --> 00:01:26.527
And so
what I want you to do is go ahead and

29
00:01:26.527 --> 00:01:30.880
use a render function to achieve the same
effect, but with a lot less code.

30
00:01:30.880 --> 00:01:35.520
And so just as a reminder, the codebase
that you're providing is in view three, so

31
00:01:35.520 --> 00:01:39.832
that way you all can practice basically
using view3 techniques in order to do

32
00:01:39.832 --> 00:01:40.740
these things.

33
00:01:40.740 --> 00:01:44.635
So, as far as the code base goes,
what we have in here is a standard view

34
00:01:44.635 --> 00:01:49.010
cli application that's been scaffolded
with the view three preview.

35
00:01:49.010 --> 00:01:52.500
And so in the next section, we talked
about view three, I'll go ahead and

36
00:01:52.500 --> 00:01:54.190
walk through how that was created,

37
00:01:54.190 --> 00:01:56.747
in case there are people
who haven't used it before.

38
00:01:56.747 --> 00:02:00.459
But as we can see here, what you mainly
need to focus on here is that we have our

39
00:02:00.459 --> 00:02:04.580
app dot view component, which contains our
main entry point into the application.

40
00:02:04.580 --> 00:02:07.683
And so here is where we can
see our dynamic heading

41
00:02:07.683 --> 00:02:12.440
component being imported and
being registered on to our default object.

42
00:02:12.440 --> 00:02:17.015
And then this is where our styles
are that we'll be refactoring to use CSS

43
00:02:17.015 --> 00:02:19.120
modules just for practice sake.

