WEBVTT

1
00:00:00.400 --> 00:00:03.116
So we talked a lot about components and
different ways for,

2
00:00:03.116 --> 00:00:07.240
either rendering things, refactoring
things and keeping things organized.

3
00:00:07.240 --> 00:00:11.317
But the biggest problem we all have run
into when it comes to applications at

4
00:00:11.317 --> 00:00:15.397
scale is when we want to actually share
functionality across the different

5
00:00:15.397 --> 00:00:16.190
components.

6
00:00:18.320 --> 00:00:21.953
And so the first technique that most
people encounter in view two and

7
00:00:21.953 --> 00:00:23.826
this still exists in view three.

8
00:00:23.826 --> 00:00:29.617
Is mixins, and so
as a quick cover of what mixins are,

9
00:00:29.617 --> 00:00:33.720
basically we define our object API.

10
00:00:33.720 --> 00:00:38.620
In this case, you see that the constant
my mixin has a data store that it

11
00:00:38.620 --> 00:00:43.210
has a reactive property of
foo with the value of bar.

12
00:00:43.210 --> 00:00:47.660
And then what happens is you declare it
inside of the component you want to use.

13
00:00:47.660 --> 00:00:50.458
And so in this case we have mixins and
basically,

14
00:00:50.458 --> 00:00:54.160
we have that erasing tasks where
we're pointing it to myMixin.

15
00:00:55.600 --> 00:00:58.966
What this does is it'll basically,
like think of it as unpackaged,

16
00:00:58.966 --> 00:01:03.040
the mixin inside of your script block,
so that you can then get access to it.

17
00:01:03.040 --> 00:01:06.684
So that component on the bottom with the
export default that will suddenly have,

18
00:01:06.684 --> 00:01:09.700
like a reactive data property called foo,
that has the value bar.

19
00:01:12.490 --> 00:01:14.817
And so,
some people even gone even further,

20
00:01:14.817 --> 00:01:19.046
where you can even make mixins basically
like a factory generator while you can see

21
00:01:19.046 --> 00:01:23.970
here that it's a function that takes
in an actual variable like a parameter.

22
00:01:23.970 --> 00:01:27.043
And then using that it can then
generate like a data source,

23
00:01:27.043 --> 00:01:29.080
according to where it starts.

24
00:01:29.080 --> 00:01:31.551
So in this case we want to actually
generate like where the current count

25
00:01:31.551 --> 00:01:34.269
starts from, because when we're mixing
this in into different components we

26
00:01:34.269 --> 00:01:36.070
want to start at a different places.

27
00:01:36.070 --> 00:01:38.880
So this is one way that it
has been done in the past.

28
00:01:38.880 --> 00:01:42.833
However, when it comes to mixins, there
have been basically mixed reviews and

29
00:01:42.833 --> 00:01:47.220
overall negative when it comes to sharing
functionality between components.

30
00:01:47.220 --> 00:01:52.069
And the reason for
this is you look back at how this works,

31
00:01:52.069 --> 00:01:56.417
there's nothing really
stopping us from mixing in

32
00:01:56.417 --> 00:02:01.530
multiple mixins to actually
share multiple values.

33
00:02:01.530 --> 00:02:03.960
In this case we know that
myMixin has current count.

34
00:02:03.960 --> 00:02:05.960
But if we're looking at
the component on the bottom,

35
00:02:05.960 --> 00:02:08.583
there's nothing stopping us from
importing another mixin that might

36
00:02:08.583 --> 00:02:10.415
accidentally have the same
reactive property.

37
00:02:12.239 --> 00:02:15.476
And so, what you ultimately get is,
you get get basically,

38
00:02:15.476 --> 00:02:17.850
possible property name clashes.

39
00:02:17.850 --> 00:02:20.490
And then when you actually see
this inside of your terminal and

40
00:02:20.490 --> 00:02:23.943
you're getting some bug, it's gonna be
extremely hard to debug because now you

41
00:02:23.943 --> 00:02:26.620
basically don't know where
things are coming from.

42
00:02:26.620 --> 00:02:30.437
And so this is the opposite of the
direction we want to move when it comes to

43
00:02:30.437 --> 00:02:33.440
building apps at scale,
because Just like CSS modules,

44
00:02:33.440 --> 00:02:37.950
the closer we can get to pinpointing
exactly where something's coming from.

45
00:02:37.950 --> 00:02:41.850
And then figuring out the root cause
of the problem is super critical for

46
00:02:41.850 --> 00:02:45.040
basically allowing us to flow forward and
make progress.

47
00:02:46.690 --> 00:02:51.258
And so, another con as well is that we're
currently only starting functionality, but

48
00:02:51.258 --> 00:02:54.407
In the event that people
are doing like template fragments,

49
00:02:54.407 --> 00:02:57.700
this is another con of it,
although again, less of a use case.

50
00:02:59.100 --> 00:03:02.380
And so as I mentioned before,
we can track where things are coming from.

51
00:03:02.380 --> 00:03:05.885
And so as a result,
this makes it basically like, more or

52
00:03:05.885 --> 00:03:07.940
less inadvisable to use mixins.

53
00:03:10.340 --> 00:03:12.950
But of course, then you're thinking
like so I should never use mixins right.

54
00:03:12.950 --> 00:03:14.820
That's like the easy rule of thumb.

55
00:03:14.820 --> 00:03:18.690
And so like everything else in
this workshop, the answer is no.

56
00:03:18.690 --> 00:03:22.062
Anytime anything's like you
hear something that's absolute,

57
00:03:22.062 --> 00:03:25.260
I would say 99% of the time,
there is always an exception.

58
00:03:27.060 --> 00:03:29.523
And so while mixins, so one of the pros,

59
00:03:29.523 --> 00:03:33.490
as we saw earlier is this
pretty easy to use and define.

60
00:03:33.490 --> 00:03:37.043
But what a lot of people miss out on the
mixins is it's actually really good for

61
00:03:37.043 --> 00:03:38.400
refactoring a component.

62
00:03:38.400 --> 00:03:39.820
It's a very useful technique.

63
00:03:39.820 --> 00:03:43.532
So you can imagine if you have a really
complex component with a large options

64
00:03:43.532 --> 00:03:47.890
API, like footprint and you're trying
to figure out how to break it up.

65
00:03:47.890 --> 00:03:51.091
It's tempting sometimes to just
try to rewrite everything, but

66
00:03:51.091 --> 00:03:52.778
we know that that that is tricky and

67
00:03:52.778 --> 00:03:55.917
all the times it takes just one
small misstep and all of a sudden,

68
00:03:55.917 --> 00:03:59.730
like the whole thing's broken, but
by using mixins for a single component.

69
00:03:59.730 --> 00:04:01.851
Right, which sounds weird because
you're like, is it mixed,

70
00:04:01.851 --> 00:04:03.540
supposed to be shared across components?

71
00:04:03.540 --> 00:04:06.590
But if you're mixins for single
components, it's a great way of kind of.

72
00:04:06.590 --> 00:04:10.444
Think of it like reorganizing how
the options API should look inside of

73
00:04:10.444 --> 00:04:11.730
the component.

74
00:04:11.730 --> 00:04:15.978
And that might give you a better
indication of what might actually be

75
00:04:15.978 --> 00:04:20.300
reusable functionality that can be
broken out either into say like,

76
00:04:20.300 --> 00:04:23.150
like a utility function or a or whatnot.

77
00:04:23.150 --> 00:04:24.960
And we'll talk about
the composition API shortly.

78
00:04:24.960 --> 00:04:29.450
But this is a great way for refactoring
options API components that have really,

79
00:04:29.450 --> 00:04:33.490
really large footprint so keep that
in mind as the technique for mixins.

