WEBVTT

1
00:00:00.260 --> 00:00:05.168
All right, so the third and final piece of
our languages block is talking about CSS

2
00:00:05.168 --> 00:00:08.030
and how do we manage CSS
inside of our view apps.

3
00:00:09.590 --> 00:00:13.661
And so as a whole, the general recommended
best practice is to limit all global

4
00:00:13.661 --> 00:00:16.500
styles to App.vue whenever possible.

5
00:00:16.500 --> 00:00:19.738
And then going forward whenever
you have individual components or

6
00:00:19.738 --> 00:00:21.830
anything that's a .view file, beyond.

7
00:00:23.080 --> 00:00:27.752
After view, we'd recommend scoping it
with either scope styles or CSS modules,

8
00:00:27.752 --> 00:00:29.250
which I'll go over next.

9
00:00:32.740 --> 00:00:37.689
And so here we have a simple component
that's called Myredtext.vue.

10
00:00:37.689 --> 00:00:41.910
And so we have a template here that has
a class red and a normal style block.

11
00:00:41.910 --> 00:00:45.710
And so as you might expect,
everything in here would apply globally.

12
00:00:45.710 --> 00:00:48.741
So if any of the components uses
the .red style or the .bold,

13
00:00:48.741 --> 00:00:51.890
they would automatically
inherit those things.

14
00:00:51.890 --> 00:00:54.573
And so while that's okay at
the app.vue where you sort of,

15
00:00:54.573 --> 00:00:59.170
we all know that that's sort of the global
entry point for our entire application.

16
00:00:59.170 --> 00:01:02.462
As a whole, it's not recommended to do
this because you'll inadvertently end up

17
00:01:02.462 --> 00:01:05.041
with side effects,
especially as people start refactoring and

18
00:01:05.041 --> 00:01:07.320
breaking components up
into smaller pieces.

19
00:01:07.320 --> 00:01:09.600
This is one of the reasons why
we don't recommend doing that.

20
00:01:09.600 --> 00:01:12.565
And instead we'll be going
over the two methodologies,

21
00:01:12.565 --> 00:01:15.539
either stope styles or
CSS modules for your components.

22
00:01:17.930 --> 00:01:23.674
So when it comes to scoped styles, what it
basically allows you to do here is that,

23
00:01:23.674 --> 00:01:28.330
on the style block all we add is
the scoped attribute to style.

24
00:01:28.330 --> 00:01:29.380
What that does for

25
00:01:29.380 --> 00:01:34.570
us inherently is it will automatically
add a data attribute to our HTML element.

26
00:01:34.570 --> 00:01:38.830
And then what we'll see here is that
inside of our style, it will automatically

27
00:01:38.830 --> 00:01:42.466
append that data attribute as a way
to then sort of scope the styles.

28
00:01:42.466 --> 00:01:47.060
And make it more specific to the HTML
elements that are it's being applied to.

29
00:01:48.120 --> 00:01:51.059
Now for those of us who have more
experience with CSS, though,

30
00:01:51.059 --> 00:01:53.110
while this is certainly
a nice technique for

31
00:01:53.110 --> 00:01:56.004
helping to reduce the amount of
overrides that might happen.

32
00:01:56.004 --> 00:01:59.817
When it comes to specificity, it's still
possible for something at a global level

33
00:01:59.817 --> 00:02:04.470
to still override this in the event that
they have something that's more specific.

34
00:02:04.470 --> 00:02:08.103
So whether it's dollars, sort of bank
important are those sort of things it

35
00:02:08.103 --> 00:02:10.850
still doesn't completely
protect us from scope creep.

36
00:02:13.320 --> 00:02:17.740
So instead, what I recommend
is using CSS modules instead.

37
00:02:17.740 --> 00:02:20.020
And so this is something that
a lot of people don't know about.

38
00:02:21.810 --> 00:02:26.129
And so the way CSS modules work
is it's just like scope styles,

39
00:02:26.129 --> 00:02:31.018
in the sense that all we do in order to
make it easy to use CSS modules is you

40
00:02:31.018 --> 00:02:34.377
add that module attribute
onto our style block.

41
00:02:34.377 --> 00:02:41.480
And what that does for us it goes ahead
and what we do is we v bind our class.

42
00:02:41.480 --> 00:02:43.910
This is the weirdest
part about CSS modules.

43
00:02:43.910 --> 00:02:49.934
We v bind it and then we're given this
attribute called dollar symbol style and

44
00:02:49.934 --> 00:02:53.360
then we access our class directly.

45
00:02:53.360 --> 00:02:57.464
And so this might feel a little javascipty
because it is right we're accessing

46
00:02:57.464 --> 00:03:00.586
a style property and
then accessing a property called red.

47
00:03:00.586 --> 00:03:03.683
And so while it took a little getting used
to I think once I show you the benefits

48
00:03:03.683 --> 00:03:05.557
here we're gonna see why
this is really cool.

49
00:03:08.515 --> 00:03:12.191
And so what happens when you use CSS
modules is that you will actually

50
00:03:12.191 --> 00:03:17.270
go in and recompile the CSS class name
into something completely different.

51
00:03:17.270 --> 00:03:20.285
As we can see here on the left hand
side it first starts by prepending it by

52
00:03:20.285 --> 00:03:21.810
default with the component name.

53
00:03:21.810 --> 00:03:25.552
So this is why you see the my red text
you'll do underscore and then whatever CSS

54
00:03:25.552 --> 00:03:28.880
class name you originally have,
which in this case is red.

55
00:03:28.880 --> 00:03:33.838
Then it'll upend some sort of unique hash
on the end of it and so this is really

56
00:03:33.838 --> 00:03:38.795
cool because what you end up getting
is really specific CSS classes that'll

57
00:03:38.795 --> 00:03:43.769
basically never ever have any collision
with any part of your application.

58
00:03:45.050 --> 00:03:48.240
And so, in case you're wondering,
you can customize what's prepended and

59
00:03:48.240 --> 00:03:49.762
attended and those sort of things but

60
00:03:49.762 --> 00:03:52.825
out of the box with no additional work
beyond using the module attribute.

61
00:03:52.825 --> 00:03:55.303
And then, binding the style class,
basically,

62
00:03:55.303 --> 00:03:58.490
get truly scoped CSS that you
don't really have to worry about.

63
00:03:58.490 --> 00:04:03.117
If app.view has a .read class that
dollar sign important doesn't matter,

64
00:04:03.117 --> 00:04:05.189
they will never, ever conflict.

65
00:04:05.189 --> 00:04:09.645
And so personally I recommend when it
comes to styling our components to use CSS

66
00:04:09.645 --> 00:04:12.830
modules, because it's a really
clean way of doing it.

67
00:04:14.600 --> 00:04:17.900
And on top of that, there is even
a bonus to using CSS modules.

68
00:04:19.320 --> 00:04:21.829
There's a technique called CSS modules,
exports,

69
00:04:21.829 --> 00:04:25.564
which anyone who's worked with, the
spectrum is probably familiar with, but

70
00:04:25.564 --> 00:04:28.090
I wasn't even aware of this
until adjusts last week.

71
00:04:29.600 --> 00:04:33.528
And the idea behind this is that
when you use the module attribute,

72
00:04:33.528 --> 00:04:36.485
you can actually export
variables from your CSS.

73
00:04:36.485 --> 00:04:40.815
And use it inside of whether it's your
template or actually, to be honest,

74
00:04:40.815 --> 00:04:43.970
it would work inside of
your script block as well.

75
00:04:43.970 --> 00:04:47.079
Because after all, dollar symbol
style is something that's accessible

76
00:04:47.079 --> 00:04:48.950
now within the JavaScript scope.

77
00:04:48.950 --> 00:04:52.940
So as you can see here, I can actually
render out the actual grid padding.

78
00:04:52.940 --> 00:04:56.953
And so this is really exciting because
what this means is if you have, let's say,

79
00:04:56.953 --> 00:05:00.910
like a SAS design system where you have
different things like sort of like whether

80
00:05:00.910 --> 00:05:01.977
it's column units.

81
00:05:01.977 --> 00:05:05.531
Or things that are standardized, you can
actually export that so that when you need

82
00:05:05.531 --> 00:05:08.750
to dynamically generate something
because sometimes with our view apps.

83
00:05:08.750 --> 00:05:13.170
It doesn't make sense to do inline Styles
over like keeping it in the soil block,

84
00:05:13.170 --> 00:05:17.135
but you can still keep up and have it
stick with your design system without

85
00:05:17.135 --> 00:05:19.300
doing a lot of manual interpolation.

86
00:05:19.300 --> 00:05:23.232
So this is something that's really cool
that I hopefully we'll see a lot more

87
00:05:23.232 --> 00:05:26.210
people using as they use CSS
modules inside of their apps.

88
00:05:28.350 --> 00:05:31.700
&gt;&gt; Question about browser support for
CSS modules.

89
00:05:33.310 --> 00:05:38.460
Do you know if there's polyfills or
support for IE 11?

90
00:05:38.460 --> 00:05:42.066
&gt;&gt; So the question is around
browser support for CSS modules,

91
00:05:42.066 --> 00:05:46.686
from what I understand at least, that
everything that view is doing with CSS

92
00:05:46.686 --> 00:05:50.050
modules is done basically at compile time.

93
00:05:50.050 --> 00:05:53.001
And so there's nothing that I'm
aware of that should be limiting,

94
00:05:53.001 --> 00:05:56.310
because we saw the output is
is still standard CSS classes.

95
00:05:56.310 --> 00:06:00.335
And so in that regard, there shouldn't
be anything that's browser specific for

96
00:06:00.335 --> 00:06:04.090
these things because it's already
been recompiled and renamed.

97
00:06:04.090 --> 00:06:07.988
So as long as you're following standards,
the only browser things that would be

98
00:06:07.988 --> 00:06:11.903
applied to be depending on what properties
you may be using inside of your style.

99
00:06:11.903 --> 00:06:15.810
But it shouldn't have any direct
correlation with the use of CSS modules as

100
00:06:15.810 --> 00:06:19.779
a whole is more of a build methodology
from what I understand rather than like

101
00:06:19.779 --> 00:06:21.370
a browser thing.

102
00:06:21.370 --> 00:06:24.881
So the question here is around
when we're v binding the class and

103
00:06:24.881 --> 00:06:29.381
using things like ternary statements to
determine whether a class should exist.

104
00:06:29.381 --> 00:06:32.000
Sort of there a better
way to do this especially

105
00:06:32.000 --> 00:06:35.010
because the HTML can get
clogged up over time.

106
00:06:35.010 --> 00:06:36.430
So I think the easiest way to do this is.

107
00:06:36.430 --> 00:06:39.960
I'm gonna jump over to VS code and
let's just open,

108
00:06:39.960 --> 00:06:45.440
I'm just gonna open a view file and
let's go ahead and check this out.

109
00:06:45.440 --> 00:06:49.040
So the scenario being presented
here is if we have again our h1 for

110
00:06:49.040 --> 00:06:51.539
example that says hello friend and
masters.

111
00:06:53.600 --> 00:07:00.913
And here we have a v bind class that says,
whether let's say, show element is true,

112
00:07:00.913 --> 00:07:07.530
then we'll have a class that's visible
otherwise for example is hidden.

113
00:07:07.530 --> 00:07:12.901
This is probably the simplest
form of the ternary

114
00:07:12.901 --> 00:07:17.230
statement in a basically our element.

115
00:07:19.030 --> 00:07:22.940
So over time right this can get
complicated as we need to chain different

116
00:07:22.940 --> 00:07:26.067
ones right it might be is visible is bold,
position top,

117
00:07:26.067 --> 00:07:29.537
especially if we're using things
like tailwind for example.

118
00:07:29.537 --> 00:07:32.780
There could be a lot of things
were changing onto here.

119
00:07:32.780 --> 00:07:36.971
And so generally speaking in my
experience, the best way to approach this,

120
00:07:36.971 --> 00:07:40.181
once it's gotten the attorney's
statement is basically

121
00:07:40.181 --> 00:07:44.400
getting fairly complex is to use
a computer property in this case.

122
00:07:44.400 --> 00:07:46.542
And in this case, I might call this one,

123
00:07:46.542 --> 00:07:49.900
like title class names to
be extremely explicit.

124
00:07:49.900 --> 00:07:54.631
And then I would actually go ahead and
do my calculations inside of here and

125
00:07:54.631 --> 00:07:57.620
so, whoops, that wasn't right see, copy.

126
00:07:58.720 --> 00:08:05.290
So then return this and then here,
then we will just have titleClassNames.

127
00:08:05.290 --> 00:08:08.032
So you might be thinking that
like with computed properties,

128
00:08:08.032 --> 00:08:11.120
you lose out on the ability to
see what CSS classes are there.

129
00:08:11.120 --> 00:08:15.228
But when it comes to, sort of deciding
between computer properties versus leaving

130
00:08:15.228 --> 00:08:19.511
it in line, the reason why templates are
useful is because they're declarative, and

131
00:08:19.511 --> 00:08:21.510
basically anyone can read it.

132
00:08:21.510 --> 00:08:25.071
And so, when we have a lot of complex
logic regarding calculating what CSS

133
00:08:25.071 --> 00:08:28.530
classes we want, that's where it's
going to get a little bit tricky.

134
00:08:28.530 --> 00:08:32.460
And so, that's why readability is
ultimately what it boils down to.

135
00:08:32.460 --> 00:08:36.093
So, if it's so complicated that it's
already hard to figure out which goes

136
00:08:36.093 --> 00:08:40.040
where, It's better off just abstracting
that directly to a computer properly.

