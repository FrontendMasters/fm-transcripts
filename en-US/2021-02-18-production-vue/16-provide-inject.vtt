WEBVTT

1
00:00:00.130 --> 00:00:03.042
The other one that some of
you may have heard about, but

2
00:00:03.042 --> 00:00:05.840
it's a little bit rare is
the Provide/Inject API.

3
00:00:08.130 --> 00:00:12.957
And so the way this works is inside of
our component, you can actually call this

4
00:00:12.957 --> 00:00:17.870
provide function that basically think
of it really like a data store.

5
00:00:17.870 --> 00:00:22.202
In that you are providing this
object that provides properties to

6
00:00:22.202 --> 00:00:27.030
this child component that will
eventually receive the data.

7
00:00:27.030 --> 00:00:30.895
And so you might be thinking well,
how is this different from props?

8
00:00:30.895 --> 00:00:33.475
The thing about provide
inject is that with props,

9
00:00:33.475 --> 00:00:36.665
we have to focus on parent
child relationship, right.

10
00:00:36.665 --> 00:00:40.688
So, the moment you have a great grandchild
what you'll find is you'll have to if you

11
00:00:40.688 --> 00:00:43.992
did the prop solution, you'd have
to do the prop strain basically.

12
00:00:43.992 --> 00:00:46.074
Parent will have to pass it to the child,

13
00:00:46.074 --> 00:00:50.930
which will pass it to the great grandchild
will then pass it to the great grandchild.

14
00:00:50.930 --> 00:00:54.911
And that's not a great way to mitigate
code, right, because now you basically

15
00:00:54.911 --> 00:00:58.070
created this dependency and
it's just not the best solution.

16
00:00:59.400 --> 00:01:02.958
So provide inject on the other hand,
well basically says,

17
00:01:02.958 --> 00:01:08.023
regardless of where you are inside of the
child component tree inject these things.

18
00:01:08.023 --> 00:01:11.923
So you'll see here that inside of this
child component that's receiving all

19
00:01:11.923 --> 00:01:16.120
these properties it takes and
you basically define an inject property.

20
00:01:16.120 --> 00:01:17.740
And then you define what
you're going to receive.

21
00:01:19.320 --> 00:01:22.688
And so this is pretty cool because what
this allows you to do is theoretically,

22
00:01:22.688 --> 00:01:26.209
you can have this great, great, great,
great grandparent component that might

23
00:01:26.209 --> 00:01:28.720
define like certain prop options or
whatnot.

24
00:01:28.720 --> 00:01:30.681
And so as you can see in this example,
right,

25
00:01:30.681 --> 00:01:33.560
typically this component
has a prop of option key.

26
00:01:33.560 --> 00:01:38.312
But the default value we can actually
have that be injected from whatever great

27
00:01:38.312 --> 00:01:40.550
grandparent that we care about.

28
00:01:40.550 --> 00:01:43.363
And so when you think of that,
you're probably thinking like, wow,

29
00:01:43.363 --> 00:01:44.230
this is pretty cool.

30
00:01:45.300 --> 00:01:49.740
Like this allow me to just shoot
data all over my application.

31
00:01:49.740 --> 00:01:53.315
So it's true that as far as it's
pretty easy to share, data and

32
00:01:53.315 --> 00:01:56.963
methods with descendants, and
it skips over that prop strain.

33
00:01:56.963 --> 00:02:00.874
And more importantly, we can see that like
components, unlike the mixins example,

34
00:02:00.874 --> 00:02:04.100
components can actually choose
what they want to receive.

35
00:02:04.100 --> 00:02:07.840
So as we saw that mixins earlier will
just accept whatever is provided to them.

36
00:02:09.440 --> 00:02:11.668
And so while this is really cool,

37
00:02:11.668 --> 00:02:15.340
the problem is that there
are definitely cons to this.

38
00:02:15.340 --> 00:02:18.430
And why it's not seen as pervasively
through production apps.

39
00:02:18.430 --> 00:02:22.049
And that's because like in Vue 2, for
example, there are certain reactivity

40
00:02:22.049 --> 00:02:25.300
caveats when it comes to what
is reactive and what isn't.

41
00:02:25.300 --> 00:02:28.960
And so this makes it fairly complex to
utilize in a Vue 2 app successfully.

42
00:02:28.960 --> 00:02:32.520
There are helper libraries to help
make sure that everything's reactive.

43
00:02:32.520 --> 00:02:34.399
I recommend doing your
own research on that,

44
00:02:34.399 --> 00:02:37.260
cuz again that can be a whole topic in and
of itself.

45
00:02:37.260 --> 00:02:40.800
In Vue 3 some of the reactivity
caveats have been solved.

46
00:02:40.800 --> 00:02:43.774
But again this just makes for
just an additional learning curve for

47
00:02:43.774 --> 00:02:45.090
how it works.

48
00:02:45.090 --> 00:02:49.150
But within architecturally speaking,
what this does is this creates a tight

49
00:02:49.150 --> 00:02:51.778
relationship now between
these two components.

50
00:02:51.778 --> 00:02:54.008
That is honestly not immediately a parent.

51
00:02:54.008 --> 00:02:55.760
In the slides I showed you right.

52
00:02:55.760 --> 00:02:58.691
If we go back,
if you're looking at this component,

53
00:02:58.691 --> 00:03:02.600
you actually really have no
idea where this is coming from.

54
00:03:02.600 --> 00:03:06.543
And so if you start utilizing this
technique too much or you've rely on it,

55
00:03:06.543 --> 00:03:10.750
you'll find yourself just randomly,
you'll have a series of injected keys.

56
00:03:10.750 --> 00:03:14.890
Like values without really any
sense of where it's coming from.

57
00:03:14.890 --> 00:03:18.445
And so then you're relying
on the developer to sort of

58
00:03:18.445 --> 00:03:21.530
be consistent with how
you named properties.

59
00:03:21.530 --> 00:03:23.530
Which isn't really resilient, right.

60
00:03:25.060 --> 00:03:26.950
Especially on an application that scales.

61
00:03:28.020 --> 00:03:32.809
And so you end up suffering from a lot of
what mixin suffer from as far as it's hard

62
00:03:32.809 --> 00:03:35.960
to figure out where
things are coming from.

63
00:03:35.960 --> 00:03:39.015
And there's not but you've also
inadvertently created this tight

64
00:03:39.015 --> 00:03:42.026
relationship because if you're
relying on this injected value.

65
00:03:42.026 --> 00:03:46.194
The moment this component is taken
out of context, it's gonna break,

66
00:03:46.194 --> 00:03:48.840
because it has some dependency.

67
00:03:48.840 --> 00:03:51.448
And so, as far as using provide inject

68
00:03:51.448 --> 00:03:54.960
if you do feel like there is
a good basically [COUGH].

69
00:03:56.150 --> 00:03:59.336
If there's a good use case for provide
inject, following the naming convention we

70
00:03:59.336 --> 00:04:01.950
talked about earlier where you're
tightly coupling the naming.

71
00:04:01.950 --> 00:04:05.100
So again todo lists todo this item.

72
00:04:05.100 --> 00:04:09.569
Imagine if todo list is providing
something that we want to inject

73
00:04:09.569 --> 00:04:13.318
into a component inside of
the todo component folder.

74
00:04:13.318 --> 00:04:17.129
Then you should make sure that it's
prepended with that accordingly so

75
00:04:17.129 --> 00:04:20.444
that if in todo list item name,
there's an injection there.

76
00:04:20.444 --> 00:04:23.182
That at the bare minimum
there is that hierarchy and

77
00:04:23.182 --> 00:04:27.870
relationship between the two so
that at least it's somewhat communicated.

78
00:04:27.870 --> 00:04:33.495
So that's something to consider when
it comes to using provide inject.

79
00:04:33.495 --> 00:04:38.471
And so as just another reminder
is that provide an inject it's

80
00:04:38.471 --> 00:04:44.430
really primarily for
advanced plug-in component library usage.

81
00:04:44.430 --> 00:04:48.137
And so generally, like I said there
are probably better techniques

82
00:04:48.137 --> 00:04:52.570
than provide inject to actually share
functionality across your application.

83
00:04:52.570 --> 00:04:55.795
But I know that when people get to
enterprise level apps that oftentimes

84
00:04:55.795 --> 00:04:58.270
they'll look for, these little techniques.

85
00:04:58.270 --> 00:05:00.995
And so this is why I thought it was
important to share with you the pros and

86
00:05:00.995 --> 00:05:03.440
cons with it so
that you can do with it, what you will.

87
00:05:03.440 --> 00:05:07.369
But I would say that generally speaking,
if you're reaching for provide inject.

88
00:05:07.369 --> 00:05:11.276
Then there's a really good chance that
there probably is a better way of doing

89
00:05:11.276 --> 00:05:12.249
what you wanna do.

90
00:05:12.249 --> 00:05:16.410
Whether it's through view acts like state
management, or there's probably a better

91
00:05:16.410 --> 00:05:20.288
standard that sort of removes a lot of
the caveats that come with provide inject.

