WEBVTT

1
00:00:00.020 --> 00:00:03.540
I'm gonna go ahead and clean this up a
little bit, just so that we have a lot of

2
00:00:03.540 --> 00:00:08.330
random increment counts with the numbers
so I'm gonna go ahead and clean this up.

3
00:00:08.330 --> 00:00:13.457
So again, if we were to convert
this fully over from options

4
00:00:13.457 --> 00:00:18.896
API to our basically Into
competition API will reface define,

5
00:00:18.896 --> 00:00:25.590
never used benefit of UCLI letting
me know what's not used, great.

6
00:00:25.590 --> 00:00:29.050
So here we can clean this up, okay, so

7
00:00:29.050 --> 00:00:35.116
this should be this one work and
increment and we're good, okay?

8
00:00:35.116 --> 00:00:40.009
So the question here is now
if we actually want to share

9
00:00:40.009 --> 00:00:45.500
let's say current count
with multiple components.

10
00:00:45.500 --> 00:00:49.302
So in this case, I think the easiest thing
for us to do let me full screen this,

11
00:00:49.302 --> 00:00:53.106
is to go ahead and show this by creating,
let's call it a second hello world,

12
00:00:53.106 --> 00:00:54.660
hello world view.

13
00:00:54.660 --> 00:00:57.402
So let's go ahead and
duplicate this file and

14
00:00:57.402 --> 00:01:02.610
in case you're wondering where that is in
Vuex code, this is actually an extension.

15
00:01:02.610 --> 00:01:06.687
It does not work by default
I learned recently, so

16
00:01:06.687 --> 00:01:11.344
here let me just go ahead and
show it marked very clearly,

17
00:01:11.344 --> 00:01:16.210
that this is current count number two,
basically, okay.

18
00:01:17.660 --> 00:01:24.535
So, when we render this on to the page,
I just need to copy this and

19
00:01:24.535 --> 00:01:30.920
import these two together,
well 2, yay, autocomplete.

20
00:01:30.920 --> 00:01:35.000
So we can see here now that we have two
components using the same functionality

21
00:01:35.000 --> 00:01:37.160
and the same shared state.

22
00:01:37.160 --> 00:01:41.197
And again, typically you might consider
using something like mixing or

23
00:01:41.197 --> 00:01:45.167
providing jack that app like shoots
into it but we're gonna go ahead and

24
00:01:45.167 --> 00:01:47.570
see how the composition EPI manages this.

25
00:01:49.370 --> 00:01:52.058
And so I'm gonna go ahead and fullscreen
in this case just because we need to

26
00:01:52.058 --> 00:01:53.520
actually kinda see what's happening.

27
00:01:54.930 --> 00:01:59.516
So the way we're going to start with
this is we're going to go ahead and

28
00:01:59.516 --> 00:02:04.723
create a folder that will contain sort of
all of the functionality that we want in

29
00:02:04.723 --> 00:02:10.910
order to track basically the things we're
going to use inside of our component.

30
00:02:10.910 --> 00:02:16.272
And a lot of you who, for any of you
who've done some reading, composables

31
00:02:16.272 --> 00:02:21.554
is a fairly popular folder name that
is basically becoming quite commonly

32
00:02:21.554 --> 00:02:27.540
used inside to refer to basically the idea
is these are composition API functions.

33
00:02:29.210 --> 00:02:33.675
While this is still being tested out, like
so far in my own experiments and in my own

34
00:02:33.675 --> 00:02:37.900
projects, I found that composables
has a couple of downsides to it.

35
00:02:37.900 --> 00:02:40.976
One, it's a word that's very
specific to the view stack and

36
00:02:40.976 --> 00:02:44.715
so if someone who doesn't really know
about composition API looks at it,

37
00:02:44.715 --> 00:02:48.080
they're gonna be like,
what the heck are composables?

38
00:02:48.080 --> 00:02:50.804
Now again, we're all like
we're all immersed in this, so

39
00:02:50.804 --> 00:02:53.760
it kind of sort of makes sense for
us to call it this.

40
00:02:53.760 --> 00:02:57.390
But when we're talking about enterprise
level apps, it's actually really important

41
00:02:57.390 --> 00:03:00.700
for us to think about how easy it is for
people to understand things.

42
00:03:00.700 --> 00:03:04.762
And so to me, this is actually one of the
things that makes view like particularly

43
00:03:04.762 --> 00:03:07.508
why I'm such a big fan of it
is because the fact that even

44
00:03:07.508 --> 00:03:11.273
like a designer with just some basic
level HTML can walk into a component and

45
00:03:11.273 --> 00:03:14.030
get a general sense that like,
this is current text.

46
00:03:14.030 --> 00:03:18.366
This is rendering the data, this is
increment count, they don't need to know

47
00:03:18.366 --> 00:03:21.782
that this is the view method
that takes like like JavaScript,

48
00:03:21.782 --> 00:03:23.110
like it has a discount.

49
00:03:23.110 --> 00:03:26.374
It doesn't need to know they don't need
to know that but composable is comes with

50
00:03:26.374 --> 00:03:30.200
unfortunately, that level of like,
what do I need to know to understand this?

51
00:03:30.200 --> 00:03:33.927
And the truth is, is that most of the
times when we're putting inside of this

52
00:03:33.927 --> 00:03:36.900
composable functions It's
just JavaScript like.

53
00:03:36.900 --> 00:03:41.155
And so similarly, when you have a utility
function, or sorry, utility folder,

54
00:03:41.155 --> 00:03:43.931
you wouldn't call it like
these are lodash doubles,

55
00:03:43.931 --> 00:03:47.710
because we're importing lodash like,
these are utility functions.

56
00:03:47.710 --> 00:03:51.450
And so again, take this with a grain
of salt, this is just my opinion.

57
00:03:51.450 --> 00:03:55.193
I prefer the term like the folder name
features, because these are going to be

58
00:03:55.193 --> 00:03:59.660
containing the things that were features
that will enhance our components.

59
00:03:59.660 --> 00:04:03.632
And so in this particular case, right,
we want to share the count and so

60
00:04:03.632 --> 00:04:08.336
another convention that you'll see use is
the use functionality, so in this case,

61
00:04:08.336 --> 00:04:10.152
I'll call it useCounter.js.

62
00:04:10.152 --> 00:04:14.972
And so useCounter.js is again,
just the JavaScript function, sorry,

63
00:04:14.972 --> 00:04:19.869
just the JavaScript file and so what
I'm gonna do is I'm just gonna copy all

64
00:04:19.869 --> 00:04:24.750
of this here and just cut it out and
drop it into useCounter.

65
00:04:24.750 --> 00:04:29.740
So let me go ahead and hide the sidebar,
let me go ahead and jump over here.

66
00:04:29.740 --> 00:04:32.421
All right, so now when I save hello world,
this should just,

67
00:04:32.421 --> 00:04:35.639
everything should just break immediately,
which makes sense, right?

68
00:04:35.639 --> 00:04:38.787
Because, now,
it doesn't have anything at all.

69
00:04:38.787 --> 00:04:42.598
But here we see that use counter
now is a JavaScript file, but

70
00:04:42.598 --> 00:04:45.980
we wanna actually be able
to create a module, right?

71
00:04:45.980 --> 00:04:48.480
It's a model that we wanna be able
to import, what does that mean?

72
00:04:48.480 --> 00:04:54.780
We actually then need to actually export
it, so this is where we might go export,

73
00:04:54.780 --> 00:04:59.877
in this case, I'm going to call
a constant called use counter and

74
00:04:59.877 --> 00:05:05.460
it's going to be a basically a function
continuous counter like this.

75
00:05:06.690 --> 00:05:11.020
Just gonna call it like that,
I think that's gonna or do I have to?

76
00:05:11.020 --> 00:05:12.980
Wait no, I yeah has to be like this,
There we go.

77
00:05:14.030 --> 00:05:16.090
So here we go we have the arrow function,
so

78
00:05:16.090 --> 00:05:19.151
this is a function that's gonna
return us something, right?

79
00:05:19.151 --> 00:05:23.291
[COUGH] And so
in this case when use counter is executed,

80
00:05:23.291 --> 00:05:26.790
we wanted to return this object to us.

81
00:05:26.790 --> 00:05:31.768
Now, similarly to our hello world view,
right because it is an actual JavaScript

82
00:05:31.768 --> 00:05:36.675
file, it doesn't inherently know these
helper methods, we need to go ahead and

83
00:05:36.675 --> 00:05:39.580
re import those onto our
individual file here.

84
00:05:40.620 --> 00:05:44.240
And so now that we have this,
everything should be hooked up correctly.

85
00:05:44.240 --> 00:05:47.252
And so the question is now
how do we call used counter

86
00:05:47.252 --> 00:05:49.150
inside of helloworld view app?

87
00:05:50.620 --> 00:05:55.527
And the way we do that is that we have o
call it inside a setup, this is the point

88
00:05:55.527 --> 00:06:00.056
where, as the name indicates,
we're setting up our component and so

89
00:06:00.056 --> 00:06:04.650
what we do is we start by importing
our basically our feature.

90
00:06:04.650 --> 00:06:08.356
Let me go back, so
features use counter and then so

91
00:06:08.356 --> 00:06:12.695
I so we exported use counter here,
so this maps directly.

92
00:06:12.695 --> 00:06:16.952
Okay, so
this is where split screen would help, so

93
00:06:16.952 --> 00:06:20.028
let me do that, oops, not this one.

94
00:06:20.028 --> 00:06:25.158
There we go, okay, so here,
this use, I'll call it use counter,

95
00:06:25.158 --> 00:06:30.828
I'll just call us kind of method just
because I want it to be very explicit so

96
00:06:30.828 --> 00:06:33.440
here the method is mapped to here.

97
00:06:34.550 --> 00:06:37.342
And the file name is called use counter so

98
00:06:37.342 --> 00:06:40.392
just to sort of allow
you to map that better.

99
00:06:40.392 --> 00:06:42.580
Okay, so now how do we call it?

100
00:06:42.580 --> 00:06:47.029
Well, we say, so basically say,
so we have the object so

101
00:06:47.029 --> 00:06:52.700
countState, I'll call it
countState is going to or account.

102
00:06:52.700 --> 00:06:55.916
Yeah, call countState now, and then we're
going to say use counter method and

103
00:06:55.916 --> 00:06:57.310
we're going to call it directly.

104
00:06:59.670 --> 00:07:05.652
And so let me save that real quick and
then switch it back over to two thirds and

105
00:07:05.652 --> 00:07:10.810
then once we've used that I can
return it out into our object.

106
00:07:10.810 --> 00:07:15.079
And let me just show this on the page so
y'all can see what count state looks like.

107
00:07:18.359 --> 00:07:23.382
It's already been distracted, I totally
forgot okay, so here if everything's

108
00:07:23.382 --> 00:07:27.770
working correctly, you can see that
something is actually updating.

109
00:07:30.040 --> 00:07:35.184
And so wait, no, it's not updating,
I have the wrong HelloWorld,

110
00:07:35.184 --> 00:07:41.345
hang on, let me check with it, doo doo
doo instance update is not function.

111
00:07:41.345 --> 00:07:45.886
Reload, there we go I was gonna say,
okay, so

112
00:07:45.886 --> 00:07:51.020
something is missing so
let me drop this real quick.

113
00:07:52.160 --> 00:07:56.267
And so let's expose what
current count is and so here,

114
00:07:56.267 --> 00:07:59.751
it's not exposing anything that's fine,

115
00:07:59.751 --> 00:08:04.460
a countState sort of wants to say,
here we go, okay.

116
00:08:04.460 --> 00:08:09.420
So we'll see that current count is
an object that has basically like

117
00:08:09.420 --> 00:08:13.890
we see the current count here and
then that's about it.

118
00:08:13.890 --> 00:08:17.609
We don't see anything else, so let's log
that just to make it a little bit clear.

119
00:08:20.639 --> 00:08:24.102
And so we have the object here,
yeah yeah, I was gonna say, I was like,

120
00:08:24.102 --> 00:08:24.980
where did that go?

121
00:08:24.980 --> 00:08:27.125
And then we have our increment count and

122
00:08:27.125 --> 00:08:31.740
this makes sense because we've gone ahead
and exposed it as the different pieces and

123
00:08:31.740 --> 00:08:34.610
so you might be wondering like,
why is it breaking?

124
00:08:34.610 --> 00:08:39.176
Well, because we're turning the object
directly, so it's an object of an object.

125
00:08:39.176 --> 00:08:42.634
And so what a lot of people do
actually in this case is they'll,

126
00:08:42.634 --> 00:08:45.575
destructure this immediately
into current count and

127
00:08:45.575 --> 00:08:50.040
increment count because they know that's,
what's being exposed.

128
00:08:50.040 --> 00:08:55.486
And so then they would return this here,
like this and

129
00:08:55.486 --> 00:09:00.340
then current count, that's gone, refresh.

130
00:09:00.340 --> 00:09:07.331
Okay, there we go,
count status access to ref count,

131
00:09:07.331 --> 00:09:11.862
I forgot I'm referring to it here again so

132
00:09:11.862 --> 00:09:17.049
here uncomment save, okay, it works, okay.

133
00:09:17.049 --> 00:09:21.527
Dangerous of like kidding,
but that's okay, so

134
00:09:21.527 --> 00:09:26.430
what you see now here is that
current count rate is being

135
00:09:26.430 --> 00:09:30.710
let me split screen one more time for
everyone.

136
00:09:31.980 --> 00:09:36.332
Current count is being pulled from here
because state has been destructuring and

137
00:09:36.332 --> 00:09:39.852
so we're getting this piece inside
of here that we can pull out and

138
00:09:39.852 --> 00:09:44.120
then we can pull out increment
count from this method over here.

139
00:09:44.120 --> 00:09:49.269
And so if we think about this back to
our discussion regarding mix-ins and

140
00:09:49.269 --> 00:09:51.677
provide inject, this is really,

141
00:09:51.677 --> 00:09:57.380
really cool because now you have
a really explicit path of inheritance.

142
00:09:57.380 --> 00:10:00.191
Not only are you could
suddenly be naming wise,

143
00:10:00.191 --> 00:10:03.503
you can try to make sure
everything is named correctly.

144
00:10:03.503 --> 00:10:07.543
But you can see here that use Turner
method comes from this method,

145
00:10:07.543 --> 00:10:12.740
which comes from this file and that is
huge when it comes to things that scale.

146
00:10:12.740 --> 00:10:16.295
Because I don't know about you but
I've certainly worked on a lot of projects

147
00:10:16.295 --> 00:10:19.265
where you have contractors working
on other sides of the world.

148
00:10:19.265 --> 00:10:22.415
And the more we can be explicit about
how things work the he's the less

149
00:10:22.415 --> 00:10:24.495
documentation and communication it needs.

150
00:10:24.495 --> 00:10:28.300
Because you have basically made it like
painfully obvious like where everything is

151
00:10:28.300 --> 00:10:31.179
coming from and it go to way sorry
painfully sounds negative but

152
00:10:31.179 --> 00:10:34.170
is this crystal clear in terms
of where he's coming from?

153
00:10:34.170 --> 00:10:38.973
And this is why composition API is
like in like mounds superior over

154
00:10:38.973 --> 00:10:42.080
these provide inject and mixins methods.

155
00:10:42.080 --> 00:10:47.239
Because now you might be thinking,
okay, can we just do the same thing

156
00:10:47.239 --> 00:10:52.920
inside of hello world too for example so
you we absolutely can do that.

157
00:10:52.920 --> 00:10:57.682
So in HelloWorld2 for example, this is
really cool because we can say, okay,

158
00:10:57.682 --> 00:10:59.752
in this case, we want to go ahead.

159
00:10:59.752 --> 00:11:03.628
We don't actually care about the increment
count we actually want it to

160
00:11:03.628 --> 00:11:06.030
be positive equals 2 in this case, right?

161
00:11:06.030 --> 00:11:07.984
HelloWorld2 want to increment by 2 but

162
00:11:07.984 --> 00:11:12.090
we still want that current count like
that's being managed inside of it.

163
00:11:12.090 --> 00:11:13.255
That's fine, so

164
00:11:13.255 --> 00:11:18.550
what we would do then in this case is we
would go import similar to before, right?

165
00:11:18.550 --> 00:11:22.902
We pull out our feature,
our features are used on our feature and

166
00:11:22.902 --> 00:11:28.800
we're gonna say that the current count use
counter method, that's what I called it.

167
00:11:30.330 --> 00:11:32.492
And then we're gonna only
pull out the current count,

168
00:11:32.492 --> 00:11:34.270
because that's all we care about.

169
00:11:34.270 --> 00:11:38.262
Again, so this, in this regard, this is
similar to provide inject because you're

170
00:11:38.262 --> 00:11:41.950
choosing the component gets to
choose what exactly they care about.

171
00:11:41.950 --> 00:11:47.224
And so in this case, I can,
do this and then I can ignore

172
00:11:47.224 --> 00:11:52.299
this exposed current count but
this is gonna break.

173
00:11:53.800 --> 00:11:58.899
There is a reason for this, and that's
why I did it this way, two rest is gone,

174
00:11:58.899 --> 00:12:04.410
reactive is going to actually,
all of the helper methods are gone, okay.

175
00:12:04.410 --> 00:12:07.410
So you might be thinking like,
wait why doesn't this work?

176
00:12:07.410 --> 00:12:13.729
We had current town before and so for
example, let me just comment this out,

177
00:12:13.729 --> 00:12:19.840
let me just comment this out real
quick and so there we go, okay.

178
00:12:19.840 --> 00:12:24.735
And so the reason this is is that,
remember what we did inside of us

179
00:12:24.735 --> 00:12:29.986
count look, I don't want to print
that command p in the wrong window,

180
00:12:29.986 --> 00:12:33.880
we just structured everything into refs.

181
00:12:33.880 --> 00:12:37.592
And so again, this is where unfortunately
there is a little bit that learning curve

182
00:12:37.592 --> 00:12:39.778
does exist when it comes
to the composition API.

183
00:12:39.778 --> 00:12:42.813
And it's that everything is a ref now,
it's actually not reactive so

184
00:12:42.813 --> 00:12:45.090
you can't just refer to it directly.

185
00:12:45.090 --> 00:12:48.979
And so what we need to do then if we
want to mutate it It's just a current

186
00:12:48.979 --> 00:12:49.930
count.value.

187
00:12:49.930 --> 00:12:55.103
And so now when we go ahead and refresh,
you'll see now that in the first one,

188
00:12:55.103 --> 00:12:59.570
this increments by one, but
in this one, this increments by two.

189
00:13:00.900 --> 00:13:05.253
And so now you have these, think of them a
little bit they they're basically a little

190
00:13:05.253 --> 00:13:07.233
bit factories at this point, right?

191
00:13:07.233 --> 00:13:12.370
Because in this case use counter method
is a function that generates this thing.

192
00:13:12.370 --> 00:13:16.432
Now, what if instead we
just made it anyway so,

193
00:13:16.432 --> 00:13:21.815
this is the general idea behind
sharing like sort of extracting

194
00:13:21.815 --> 00:13:27.710
out your functionality into
the composition API pieces.

195
00:13:27.710 --> 00:13:31.786
So as we can see, the composition API is
pretty great as far as letting us pull

196
00:13:31.786 --> 00:13:36.250
out what we want and then just
expose it to the component directly.

197
00:13:36.250 --> 00:13:40.875
The key thing here though, as you notice,
though, is that when it comes to now

198
00:13:40.875 --> 00:13:45.930
architecting how your code is organized,
it is now completely reliant on you.

199
00:13:45.930 --> 00:13:48.887
This is probably the composition
API's in a sense because downside,

200
00:13:48.887 --> 00:13:50.660
because it's a double edged sword.

201
00:13:50.660 --> 00:13:53.955
Without the sort of the guard
rails that View typically provides

202
00:13:53.955 --> 00:13:55.122
with the options API.

203
00:13:55.122 --> 00:13:57.675
This means that if you end
up in an empty pattern,

204
00:13:57.675 --> 00:14:01.600
if you end up doing something that ends
up making it difficult to refactor,

205
00:14:01.600 --> 00:14:03.718
those are things that
are now up to you and

206
00:14:03.718 --> 00:14:07.679
it's up to you to practice those good
software architecture principles.

207
00:14:08.690 --> 00:14:12.856
In addition, as far as the other concept
is, as we saw, unless you understand what

208
00:14:12.856 --> 00:14:16.841
refs are and you kind of have a sense of
the V activity engine, what proxies are,

209
00:14:16.841 --> 00:14:21.430
why things are happening, competition
API does have that learning barrier.

210
00:14:21.430 --> 00:14:23.406
And so
if you're onboarding new developers,

211
00:14:23.406 --> 00:14:24.825
you might be thinking like this,

212
00:14:24.825 --> 00:14:28.639
this can be a bit, there's a little bit of
a learning curve, let's put it that way.

213
00:14:30.040 --> 00:14:34.278
And so going forward, one of the questions
commonly asked is like, does this mean I

214
00:14:34.278 --> 00:14:37.810
should like go and rewrite
everything with the composition API?

215
00:14:37.810 --> 00:14:40.922
Absolutely not,
all the techniques including this one,

216
00:14:40.922 --> 00:14:44.922
as great as the composition API is We
use them to solve specific problems and

217
00:14:44.922 --> 00:14:47.040
achieve specific impacts.

218
00:14:47.040 --> 00:14:50.848
I know that as developers we really enjoy
like playing with the new shiny thing and

219
00:14:50.848 --> 00:14:53.592
if you wanna do that,
I totally recommend you doing that,

220
00:14:53.592 --> 00:14:57.100
just do that on like a side
project rather than on production.

221
00:14:57.100 --> 00:15:01.358
It's not worth like, going in and
just reconfiguring everything just because

222
00:15:01.358 --> 00:15:04.226
the composition API is fun to use or
like clean to use.

223
00:15:04.226 --> 00:15:06.872
Like anything else,
progressive enhancement and

224
00:15:06.872 --> 00:15:11.640
migration is key to long term success and
terms of production grade applications.

225
00:15:11.640 --> 00:15:16.334
And so similarly, like, if you think the
composition API can solve a problem for

226
00:15:16.334 --> 00:15:19.647
you, then yes spend the time
to refactor it and do that but

227
00:15:19.647 --> 00:15:23.240
otherwise your options API
code is completely valid.

228
00:15:23.240 --> 00:15:26.841
And not only that, like going forward,
like what'd, you can do is like,

229
00:15:26.841 --> 00:15:30.518
if in the future is certain that certain
things could use a composition API.

230
00:15:30.518 --> 00:15:34.172
Then you can build those new features,
but whatever you might see or read on

231
00:15:34.172 --> 00:15:38.590
the internet, both the options API and
the composition API are valid approaches.

232
00:15:38.590 --> 00:15:41.519
And you just need to know the pros and
cons of using each and

233
00:15:41.519 --> 00:15:45.491
then use them accordingly because as
we mentioned with the competition API,

234
00:15:45.491 --> 00:15:49.310
you get the con of that learning
curve of like how everything works.

235
00:15:49.310 --> 00:15:52.840
And more importantly, people need to be a
lot more familiar with JavaScript, right?

236
00:15:52.840 --> 00:15:55.876
Like all this de-structuring and
like factory functions,

237
00:15:55.876 --> 00:15:58.600
like this is very JavaScript oriented.

238
00:15:58.600 --> 00:16:02.210
Whereas like the options API has
the beauty of like having structure and

239
00:16:02.210 --> 00:16:06.380
like people grasp those things, once they
do these conventions, it just works.

240
00:16:06.380 --> 00:16:09.969
I think the best example I've personally
encountered with this was teaching

241
00:16:09.969 --> 00:16:13.557
a designer who hadn't coded for like five
years and thought that when she took

242
00:16:13.557 --> 00:16:16.482
the introductory workshop that
she wouldn't be able to like,

243
00:16:16.482 --> 00:16:18.010
catch up with everyone.

244
00:16:18.010 --> 00:16:20.616
But within the hour,
she had the options API up and running and

245
00:16:20.616 --> 00:16:23.090
was building things and
making things work.

246
00:16:23.090 --> 00:16:27.097
I think we have to remember that is the
beauty and power of the object API is that

247
00:16:27.097 --> 00:16:31.780
that allows people from all walks of life
to really come in and start contributing.

248
00:16:31.780 --> 00:16:36.360
Whereas this composition API does have
a bit more of that learning barrier.

249
00:16:36.360 --> 00:16:39.669
So keep that in mind as you're
choosing what's best for your team,

250
00:16:39.669 --> 00:16:43.558
and how to best basically like represent
your codebase in a way that like is still

251
00:16:43.558 --> 00:16:46.130
accessible for everyone,
and yet still scalable.

