WEBVTT

1
00:00:00.040 --> 00:00:03.680
So what we're gonna do now is we're gonna
go ahead and walk through the solution for

2
00:00:03.680 --> 00:00:05.146
rewriting our dynamic heading.

3
00:00:05.146 --> 00:00:06.894
And then we're gonna go ahead and

4
00:00:06.894 --> 00:00:09.840
refactor our app styles to
practice using CSS modules.

5
00:00:12.190 --> 00:00:17.177
So over here in v-eese code, we're gonna
take a look and we'll see that one of

6
00:00:17.177 --> 00:00:21.810
the things we have here inside of
our dynamic heading component.

7
00:00:21.810 --> 00:00:25.730
Is that we have a prompt basically
taking in what level it should be.

8
00:00:25.730 --> 00:00:29.803
Some of you may have run into some issues
as far as the prop type because I had

9
00:00:29.803 --> 00:00:31.550
defined it as a number.

10
00:00:31.550 --> 00:00:34.950
And so in this regard, to be honest,
it can be a number or a string.

11
00:00:34.950 --> 00:00:38.225
So in this case, we just go ahead and
make it a string just to prevent,

12
00:00:38.225 --> 00:00:42.260
in case you're seeing any conflict
errors or those sort of things.

13
00:00:42.260 --> 00:00:47.001
And so what we wanna do now is convert
our markup from templates to the render

14
00:00:47.001 --> 00:00:48.500
function.

15
00:00:48.500 --> 00:00:50.684
So what we have here is
we see our template,

16
00:00:50.684 --> 00:00:52.820
it's rendering right on the left.

17
00:00:52.820 --> 00:00:55.823
And so if we go inside of app dot view and
switch it out to two,

18
00:00:55.823 --> 00:01:00.420
we'll see that it goes ahead and
updates the heading level correctly.

19
00:01:00.420 --> 00:01:03.120
So let me toggle actually get lens,
there you go.

20
00:01:05.400 --> 00:01:09.320
And so what we wanna do then, is take
this and create our render function.

21
00:01:09.320 --> 00:01:12.152
And so the way we do that,
because we're in d3,

22
00:01:12.152 --> 00:01:16.040
is that we start by importing our
hyper script function from view.

23
00:01:18.460 --> 00:01:22.056
And so the UCLI is telling me that it's
never been used as a way of helping me

24
00:01:22.056 --> 00:01:26.360
out, but we're gonna go ahead now and
define our render function.

25
00:01:26.360 --> 00:01:31.290
And then we're gonna return, basically
the mark up that we want to create.

26
00:01:31.290 --> 00:01:35.066
The snip is getting away, so yeah so what
we gonna do is we return the mark up we

27
00:01:35.066 --> 00:01:38.150
were gonna create with
our hyperscript function.

28
00:01:38.150 --> 00:01:39.747
So to keep it simple, right?

29
00:01:39.747 --> 00:01:44.180
We can start with an h1, and then I'm
gonna ahead and say like, Hello, it works.

30
00:01:46.340 --> 00:01:51.180
And so when I save, we'll see that
now everything's rendering correctly.

31
00:01:51.180 --> 00:01:55.760
But what we need to do instead is,
we need to make this dynamic.

32
00:01:55.760 --> 00:01:59.821
And so since we're inside of a script
block though, this means that we can

33
00:01:59.821 --> 00:02:04.640
access our props as we would on any
other computed property or methods.

34
00:02:04.640 --> 00:02:10.559
And so what I'm gonna do is, I'm going to
turn this into the ESX template literal,

35
00:02:10.559 --> 00:02:13.450
and swap that out for the this dot level.

36
00:02:14.630 --> 00:02:18.714
And so this way this is defined
directly on by the props, and

37
00:02:18.714 --> 00:02:22.810
then we can basically see this
dynamically swap in and out.

38
00:02:22.810 --> 00:02:26.960
So you can already see now that
it's already swapped over to an h2.

39
00:02:26.960 --> 00:02:30.020
And if we jump over to here and
switch it down to an h3,

40
00:02:30.020 --> 00:02:34.800
we'll see the drops even further back one,
and then we're back up.

41
00:02:34.800 --> 00:02:36.232
And so in these cases, right?

42
00:02:36.232 --> 00:02:39.665
Where we're programmatically
generating like the HTML markup, for

43
00:02:39.665 --> 00:02:43.212
whatever reason, these are times
where as you can see render function,

44
00:02:43.212 --> 00:02:47.166
this is much cleaner to maintain because
going forward, if the requirement is,

45
00:02:47.166 --> 00:02:50.099
hey, we need to change this to,
Hello friend and masters.

46
00:02:50.099 --> 00:02:55.063
Piece of cake, it's one line of code and
which means is less brittle overall for

47
00:02:55.063 --> 00:02:56.110
fixing things.

48
00:02:57.520 --> 00:02:59.286
So that's the solution for

49
00:02:59.286 --> 00:03:03.520
render functions when you're
using it with view three.

50
00:03:03.520 --> 00:03:09.700
And if you wanna dive into the specs,
I recommend going to the view three docs.

51
00:03:09.700 --> 00:03:12.722
And you can look up basically
the render function here.

52
00:03:12.722 --> 00:03:16.767
And we have a whole guide in here
explaining how to use it and basically

53
00:03:16.767 --> 00:03:21.460
different ways that you can customize
the various aspects that you care about.

54
00:03:21.460 --> 00:03:24.520
So be sure to check out the docs if
you have more questions on this piece.

55
00:03:26.450 --> 00:03:29.990
Now the other piece that we have to
go over is regarding the styling.

56
00:03:29.990 --> 00:03:32.927
So let me bump this over
to the one third again.

57
00:03:32.927 --> 00:03:39.554
All right, and so here, inside of our app
dot view, we have this baked in styles.

58
00:03:39.554 --> 00:03:42.076
And so, for
the sake of practicing with CSS modules,

59
00:03:42.076 --> 00:03:44.499
we're gonna switch this
over to a CSS class first.

60
00:03:44.499 --> 00:03:48.205
So you see that when we switch it over,
you'll notice that,

61
00:03:48.205 --> 00:03:50.965
all the styling breaks, which makes sense,

62
00:03:50.965 --> 00:03:55.140
because this is being basically
bound into an ID app right now.

63
00:03:55.140 --> 00:03:57.273
So I'm gonna go ahead and

64
00:03:57.273 --> 00:04:02.455
wrap our component here with
the class app here instead, and

65
00:04:02.455 --> 00:04:08.630
we can already see that things
are going back to the way they are.

66
00:04:08.630 --> 00:04:13.980
As I mentioned before, when we go
into our, we inspect the element.

67
00:04:13.980 --> 00:04:19.507
What we'll see here is that, this is
still using the generic of app class,

68
00:04:19.507 --> 00:04:23.306
and what we wanna do is
practice using CSS modules.

69
00:04:23.306 --> 00:04:27.335
And so what we're gonna do now,
is we gonna go ahead and

70
00:04:27.335 --> 00:04:32.328
then add the module attribute to
a style block, and inside of here,

71
00:04:32.328 --> 00:04:35.569
instead of just declaring the classes app,

72
00:04:35.569 --> 00:04:40.490
we V bind our class attribute and
assign it to dollar symbol style.

73
00:04:40.490 --> 00:04:45.105
And then when we save, you'll notice
now everything still looks good.

74
00:04:45.105 --> 00:04:48.495
Everything's the same, but
it swaps out right here.

75
00:04:48.495 --> 00:04:52.188
And now we see the component which is App,
and then underscore the component name,

76
00:04:52.188 --> 00:04:55.350
which happens to be App or sorry,
the class name, which is App as well,

77
00:04:55.350 --> 00:04:58.455
just in this particular case, and
then our unique hash right there.

78
00:04:59.540 --> 00:05:03.166
And so, there are a lot of
approaches to this like in the CSS,

79
00:05:03.166 --> 00:05:05.300
in reactor style components.

80
00:05:05.300 --> 00:05:09.339
One of the reasons I think this particular
approach works really well is because in

81
00:05:09.339 --> 00:05:13.258
debugging, what CSS modules allows you to
do is easily figure out where to go and

82
00:05:13.258 --> 00:05:14.650
where to look.

83
00:05:14.650 --> 00:05:16.633
And we all know that when it
comes to building things,

84
00:05:16.633 --> 00:05:19.340
one of the things we wanna spend
the least amount of time on is debugging.

85
00:05:19.340 --> 00:05:22.762
So, in my opinion, anything that
can help us find the error and

86
00:05:22.762 --> 00:05:26.895
basically make changes quicker so
that we can move on to build new features,

87
00:05:26.895 --> 00:05:30.859
is a big plus in my book, so
can't recommend CSS modules highly enough.

88
00:05:32.310 --> 00:05:35.247
&gt;&gt; Yeah,
you mentioned it helps you debug, and

89
00:05:35.247 --> 00:05:38.263
I was wondering if
the reason it's helpful for

90
00:05:38.263 --> 00:05:43.229
debugging is because of the unique sha
that's a appended to the class name.

91
00:05:43.229 --> 00:05:47.815
&gt;&gt; So the question is regarding why this
approach is helpful for debug abilities,

92
00:05:47.815 --> 00:05:52.136
dive into that little bit more,
importantly is it around the unique hash?

93
00:05:52.136 --> 00:05:57.019
And so in this case, the reason it's
useful is actually because what view

94
00:05:57.019 --> 00:06:01.420
does is it maintains the CSS
class that you're looking for.

95
00:06:01.420 --> 00:06:05.291
So typically when you're debugging CSS you
would probably search your code base for

96
00:06:05.291 --> 00:06:09.060
the class name, but the hash unfortunately
is not going to show up in here.

97
00:06:09.060 --> 00:06:13.224
So in that regard the hash is only useful
from the sense of protecting us from scope

98
00:06:13.224 --> 00:06:14.840
creep on our styles.

99
00:06:14.840 --> 00:06:19.236
But by giving us basically the component
name before it along with the class name,

100
00:06:19.236 --> 00:06:23.378
it helps us to basically prevent from
searching all over our codebase because

101
00:06:23.378 --> 00:06:26.690
everyone called their class dot button,
for example.

102
00:06:26.690 --> 00:06:28.830
And now instead of being like,
okay, now I have to look for

103
00:06:28.830 --> 00:06:30.300
every instance of that button.

104
00:06:30.300 --> 00:06:33.761
But this top button, I needed to have that
specific padding of 15 pixels cause this

105
00:06:33.761 --> 00:06:35.360
is where the bug is showing up.

106
00:06:35.360 --> 00:06:40.184
Now it's gonna be like, hey, your button
class is showing up in this component, and

107
00:06:40.184 --> 00:06:43.340
then that's the reason why
it's helpful for debugging

