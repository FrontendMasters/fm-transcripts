WEBVTT

1
00:00:00.676 --> 00:00:04.838
So, to use the API,
Credential Management API,

2
00:00:04.838 --> 00:00:10.188
the first step will be that after,
for example, on post login,

3
00:00:10.188 --> 00:00:15.658
so after we are logged in,
we can try to save the current details.

4
00:00:15.658 --> 00:00:20.192
At least if we have a password,
but we can use it in postLogin,

5
00:00:20.192 --> 00:00:23.957
because maybe we want to
do after register as well.

6
00:00:23.957 --> 00:00:28.511
But also after logging because maybe the
user is logging in with new credentials in

7
00:00:28.511 --> 00:00:30.430
this computer for the first time.

8
00:00:30.430 --> 00:00:33.045
So it's not registering
an account on that device.

9
00:00:33.045 --> 00:00:37.427
Maybe that account comes from
another device or from the past.

10
00:00:37.427 --> 00:00:42.484
So on postLogin,
I can try to before or after let's

11
00:00:42.484 --> 00:00:49.788
do it after because it feels like say
Credential Management API Storage.

12
00:00:49.788 --> 00:00:53.186
So, again, what's our goal?

13
00:00:53.186 --> 00:00:58.139
Auto-login without the token,
without saving a token.

14
00:00:58.139 --> 00:01:03.350
I want an auto-login that is not
involving authorization techniques.

15
00:01:03.350 --> 00:01:08.097
So, first,
how to check if the API is there?

16
00:01:08.097 --> 00:01:11.524
So, one would say, okay,
let's try navigator credentials.

17
00:01:11.524 --> 00:01:17.098
But if I'm doing this,
Safari will give me a false positive.

18
00:01:17.098 --> 00:01:23.665
Because in Safari we do have navigator
credentials, but not for what we want.

19
00:01:23.665 --> 00:01:25.653
Just for WebAuthn.

20
00:01:25.653 --> 00:01:30.933
So we're going to check if
the password credential

21
00:01:30.933 --> 00:01:35.244
constructor or class if you want exists.

22
00:01:35.244 --> 00:01:41.621
With capital P because it's like a class,
it's a JavaScript constructor.

23
00:01:41.621 --> 00:01:45.768
So if it exists and
if our user has a password.

24
00:01:45.768 --> 00:01:50.531
Because maybe we don't have a password
because we are logging in the user

25
00:01:50.531 --> 00:01:53.822
from other place where
the password is not there.

26
00:01:53.822 --> 00:01:58.034
So if we have this situation and
by the way,

27
00:01:58.034 --> 00:02:02.597
now we should change this
as well because now we

28
00:02:02.597 --> 00:02:06.936
are not passing the password to postLogin.

29
00:02:06.936 --> 00:02:10.402
Remember I mentioned that,
maybe you don't want to do that well

30
00:02:10.402 --> 00:02:14.198
now we have a use case we need
the password for a couple of more seconds.

31
00:02:14.198 --> 00:02:19.995
So instead of doing this I'm going to
just pass the whole user, make sense?

32
00:02:19.995 --> 00:02:22.274
Because now I have something
else to do with the password.

33
00:02:25.190 --> 00:02:27.477
So I'm passing the password.

34
00:02:27.477 --> 00:02:34.409
So if I have in the password now I can try
I can call navigator credential.store and

35
00:02:34.409 --> 00:02:39.349
we need to pass a credentials
object that I need to create.

36
00:02:42.157 --> 00:02:45.223
Okay, the credentials object,

37
00:02:45.223 --> 00:02:50.154
we need to use the constructor
password credential.

38
00:02:50.154 --> 00:02:52.526
And by the way, I have a problem here.

39
00:02:52.526 --> 00:02:53.793
This is not going to work.

40
00:02:53.793 --> 00:02:55.996
This is my fault.

41
00:02:55.996 --> 00:02:57.892
So I'm taking full responsibility,

42
00:02:57.892 --> 00:03:02.169
is not navigator password credential is
window because it's a global constructor.

43
00:03:04.001 --> 00:03:08.429
Okay, so that's why here I just
say new password credential.

44
00:03:08.429 --> 00:03:14.281
And I'm going to pass an object with,
it can contain ID.

45
00:03:14.281 --> 00:03:18.647
So I will take the ID user email,
the password,

46
00:03:18.647 --> 00:03:25.208
that I can take the password from
the user and also has an optional name.

47
00:03:25.208 --> 00:03:27.941
So this is the name of that account.

48
00:03:27.941 --> 00:03:30.860
It can be the user's name or
it can be any string.

49
00:03:30.860 --> 00:03:34.273
This name will appear in
the password manager.

50
00:03:34.273 --> 00:03:38.773
So the idea is that when if the user
has a lot of accounts well,

51
00:03:38.773 --> 00:03:40.813
I have John, Jane, okay?

52
00:03:40.813 --> 00:03:42.845
I have all the names.

53
00:03:42.845 --> 00:03:47.014
That's, why, in this case, I can pass
the name or I can pass the email.

54
00:03:47.014 --> 00:03:48.749
So I can, I can reuse the email.

55
00:03:48.749 --> 00:03:50.182
It's up to you.

56
00:03:50.182 --> 00:03:52.103
And by the way,
because you can see this is pretty simple.

57
00:03:52.103 --> 00:03:56.285
You can actually copy these and
try these in the console.

58
00:03:56.285 --> 00:04:00.111
I mean,
you can fake pretty quickly in Chrome or

59
00:04:00.111 --> 00:04:04.233
let me open like as to show
you a different browser.

60
00:04:04.233 --> 00:04:09.489
I can open the console and
we can try to see

61
00:04:09.489 --> 00:04:14.289
if navigator.credentials exist.

62
00:04:14.289 --> 00:04:19.052
And if I can post or not.

63
00:04:19.052 --> 00:04:26.520
Okay, from here, so
you can try this directly in your browser.

64
00:04:26.520 --> 00:04:31.439
We are there so
now every time we log in this will try

65
00:04:31.439 --> 00:04:35.085
to save my account into credential.

66
00:04:35.085 --> 00:04:37.145
How do I know if this is working?

67
00:04:37.145 --> 00:04:43.288
Typically you don't know
quickly if it's working or not.

68
00:04:43.288 --> 00:04:47.318
But in this case,
let me login again frontend masters,

69
00:04:47.318 --> 00:04:51.541
I should start saving my passwords so
it's easy to get in.

70
00:04:51.541 --> 00:04:53.286
So you're going to see so

71
00:04:53.286 --> 00:04:57.116
one way in Chrome to see if
the API is actually working.

72
00:04:57.116 --> 00:05:02.875
Is a key that icon that you
will see in the omnibox, okay?

73
00:05:02.875 --> 00:05:08.093
So there you will see that
your passwords may be saved.

74
00:05:08.093 --> 00:05:14.332
So that's the UI that Chrome
shows us right now, okay?

75
00:05:14.332 --> 00:05:15.330
Make sense?

76
00:05:19.257 --> 00:05:24.339
Also, if I go to the console,
I can try navigator credentials.

77
00:05:31.285 --> 00:05:32.808
Let me move this out a little bit.

78
00:05:36.109 --> 00:05:37.520
I will do something else.

79
00:05:39.090 --> 00:05:43.710
Like they're logging frontend masters.

80
00:05:45.320 --> 00:05:47.750
So I can save the password.

81
00:05:47.750 --> 00:05:52.630
And now I can see all the passwords
that were saved in my website.

82
00:05:52.630 --> 00:05:57.140
So if I log out and
I create a new account, another one.

83
00:05:57.140 --> 00:05:59.210
So this is going to be Jane.

84
00:06:00.680 --> 00:06:04.564
My email that you
jane@gmail.com fortunately,

85
00:06:04.564 --> 00:06:09.270
we are not sending emails so
I can use a strong password or not.

86
00:06:10.680 --> 00:06:14.460
Jane 1234, not a good password.

87
00:06:14.460 --> 00:06:16.760
I'm registering the account and
look at this.

88
00:06:16.760 --> 00:06:22.460
It's said, hey, Jane 1234,
was already leaked as a password.

89
00:06:22.460 --> 00:06:24.191
So here you can see that Chrome,

90
00:06:24.191 --> 00:06:28.050
the same happens in Safari because
they're using password managers.

91
00:06:28.050 --> 00:06:33.080
They're seeing your password and say, hey,
that password has been found in a breach.

92
00:06:33.080 --> 00:06:38.580
That means that maybe the hashed
version of it is already in the breach.

93
00:06:38.580 --> 00:06:43.290
So, even if someone is hacking now
my server, even if it's a hash,

94
00:06:43.290 --> 00:06:47.090
it will take your password anyway, okay?

95
00:06:47.090 --> 00:06:54.400
But now I have both credentials
saved here for my site, okay?

96
00:06:54.400 --> 00:06:55.240
Make sense?

97
00:06:55.240 --> 00:07:00.214
So, now we are saving now we
need to do the reverse operation

98
00:07:00.214 --> 00:07:03.515
that is trying to get this back, okay?

99
00:07:03.515 --> 00:07:09.167
Also, it's a good idea because
we are going to implement

100
00:07:09.167 --> 00:07:15.550
these order login is a good idea
to express something on logout.

101
00:07:16.800 --> 00:07:19.520
Okay, because if the user is logging out.

102
00:07:19.520 --> 00:07:22.690
It's expressing that you want to log out.

103
00:07:23.700 --> 00:07:26.560
We don't want to auto-log in next
time because it's kind of weird.

104
00:07:28.200 --> 00:07:33.189
So when you click log out, the API,
Credential Management API,

105
00:07:33.189 --> 00:07:38.470
is offering us a way to express that
we don't want auto-log in next.

106
00:07:38.470 --> 00:07:41.235
So if I go, to log out,

107
00:07:41.235 --> 00:07:47.356
first I can check if password
credential exists so

108
00:07:47.356 --> 00:07:53.331
if the API is there we're
going to call navigator

109
00:07:53.331 --> 00:07:58.014
credentials prevent silent access.

110
00:07:58.014 --> 00:08:01.346
So until the next time you log in,

111
00:08:01.346 --> 00:08:07.840
it will prevent an auto-log
in known as a silent access.

112
00:08:07.840 --> 00:08:11.181
By the way, we are covering
Credential Management API, but

113
00:08:11.181 --> 00:08:13.684
while we mentioned that
it's not in Safari.

114
00:08:13.684 --> 00:08:20.230
If you ask me, I don't bet that Safari
will implement it, in the future.

115
00:08:20.230 --> 00:08:25.201
And there is a good chance that also
maybe in a couple of years that API will

116
00:08:25.201 --> 00:08:27.087
be deprecated, this API.

117
00:08:27.087 --> 00:08:33.060
Because everything is moving to pass keys
and what we are going to cover next.

118
00:08:33.060 --> 00:08:38.330
So I think that that will
change in the future also.

119
00:08:38.330 --> 00:08:41.575
Google and Chrome,
they are deprecating on a very,

120
00:08:41.575 --> 00:08:45.802
let's say scary thing they have I'm
not sure if you have seen this.

121
00:08:45.802 --> 00:08:50.209
You go to a website, any website wherever
for the first time in your life.

122
00:08:50.209 --> 00:08:54.705
I've seen this in many
airline hotel websites, or

123
00:08:54.705 --> 00:08:58.165
tourism based websites like Expedia.

124
00:08:58.165 --> 00:09:03.063
It's the first time in your life that
you get to do a website and then you see

125
00:09:03.063 --> 00:09:08.053
at the top right of your screen so they
see your top right you see your photo.

126
00:09:08.053 --> 00:09:15.781
And says something like hey do you want
to sign in as Max with a Google logo.

127
00:09:15.781 --> 00:09:19.223
Which is weird because this is the first
time you're accessing that website, so

128
00:09:19.223 --> 00:09:20.297
what's going on there?

129
00:09:20.297 --> 00:09:25.742
So this is kind of an aggressive
API available from Chrome and

130
00:09:25.742 --> 00:09:32.384
Google to auto-log in on websites
where you have never logged in before.

131
00:09:32.384 --> 00:09:37.140
Okay, it was some kind of an idea of a
one-click sign-in or something like that.

132
00:09:37.140 --> 00:09:40.666
Of course, there is an iframe
there pointing to Google.

133
00:09:40.666 --> 00:09:43.690
That's how Google is getting
your credential, and

134
00:09:43.690 --> 00:09:48.445
then Google is injecting your picture in
the web, but it's kind of weird, okay?

135
00:09:48.445 --> 00:09:51.409
And that's been deprecated for
the future so

136
00:09:51.409 --> 00:09:55.465
that at least that particular way
of of seeing your picture and

137
00:09:55.465 --> 00:10:00.309
websites that you have never been before,
is going to disappear, okay?

138
00:10:00.309 --> 00:10:03.280
So we are not going to even
cover that how to do that.

