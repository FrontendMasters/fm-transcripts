WEBVTT

1
00:00:00.000 --> 00:00:03.034
So now that you know this,
we were doing this step-by-step.

2
00:00:03.034 --> 00:00:07.702
But now that you know this, every time
you are starting a new project from now,

3
00:00:07.702 --> 00:00:10.338
you should start thinking about this flow.

4
00:00:10.338 --> 00:00:14.998
Identifier first, and
then we continue with the process.

5
00:00:18.378 --> 00:00:23.687
So the next step is
probably the hardest one in

6
00:00:23.687 --> 00:00:29.556
terms of coding,
that is adding the endpoints for

7
00:00:29.556 --> 00:00:33.764
working with, let me go back here.

8
00:00:33.764 --> 00:00:38.166
We're going to add the endpoints for

9
00:00:38.166 --> 00:00:41.716
web authentication, okay?

10
00:00:41.716 --> 00:00:45.429
So, but it's a lot of code.

11
00:00:45.429 --> 00:00:50.085
So in this case,
I think it's a good idea to maybe copy and

12
00:00:50.085 --> 00:00:55.537
paste this code, and
then we will analyze what's inside, okay?

13
00:00:55.537 --> 00:00:59.056
I wrote this code, so
I know what the code is doing.

14
00:00:59.056 --> 00:01:03.848
But it's a lot of steps, and
some of the steps are kind of obscure,

15
00:01:03.848 --> 00:01:07.881
and at first,
you don't understand what's going on.

16
00:01:07.881 --> 00:01:11.538
So it's simpler if we just
put them in our server and

17
00:01:11.538 --> 00:01:14.524
then we analyze what's going on, okay?

18
00:01:14.524 --> 00:01:17.236
So how many endpoints are we going to add?

19
00:01:17.236 --> 00:01:19.272
Four, why four?

20
00:01:19.272 --> 00:01:24.082
Because we have two per flow,
so we have some kind of spoke,

21
00:01:24.082 --> 00:01:27.366
salute two flow, okay, spoke solute.

22
00:01:27.366 --> 00:01:29.478
So why two?

23
00:01:29.478 --> 00:01:35.246
Because we have, first, registration and
then we have authentication, the login.

24
00:01:35.246 --> 00:01:41.352
And for each flow,
we always have two endpoints.

25
00:01:41.352 --> 00:01:45.387
We have one that is called get options or
options, and

26
00:01:45.387 --> 00:01:50.508
the other one verification,
both are doing the same thing, okay?

27
00:01:50.508 --> 00:01:55.935
So I'm going to take all my registration,
these are the registration endpoints.

28
00:01:55.935 --> 00:01:58.353
So let me take these two first.

29
00:01:58.353 --> 00:02:02.099
We can try registration first and
then we paste the other two.

30
00:02:02.099 --> 00:02:06.588
So I will put them here at the bottom, so

31
00:02:06.588 --> 00:02:12.314
let's say this is going
to be WEBAUTHN ENDPOINT.

32
00:02:12.314 --> 00:02:16.160
Okay, I'm gonna paste first registration,
okay?

33
00:02:16.160 --> 00:02:22.711
And let's try to analyze what's going on,
the first one, registration-options.

34
00:02:22.711 --> 00:02:28.753
We're going to use these endpoint
when we wanna register a new way,

35
00:02:28.753 --> 00:02:32.684
a new login mechanism for that user, okay?

36
00:02:32.684 --> 00:02:35.757
So first,
we do that after we know who the user is.

37
00:02:37.853 --> 00:02:42.733
Somehow, because the user has typed that,
or because it's already logged in,

38
00:02:42.733 --> 00:02:44.109
I don't know, okay?

39
00:02:44.109 --> 00:02:47.042
But we should know first who the user is,
or

40
00:02:47.042 --> 00:02:49.904
how the user is identified in our system.

41
00:02:49.904 --> 00:02:56.323
So that's why I'm receiving the email and
I'm finding that user, okay?

42
00:02:56.323 --> 00:03:02.251
So then we need to create an options
object with some properties that

43
00:03:02.251 --> 00:03:07.357
are defined with these names
in the WEBAUTHN spec, okay?

44
00:03:07.357 --> 00:03:10.821
So rpName, what's RP?

45
00:03:10.821 --> 00:03:13.270
Reliant Party.

46
00:03:13.270 --> 00:03:15.280
We are the Reliant Party, okay?

47
00:03:15.280 --> 00:03:19.282
So this is the name of our website,
of our project.

48
00:03:19.282 --> 00:03:24.371
Then we need a Reliant Party ID
that I think I have it

49
00:03:24.371 --> 00:03:31.288
defined at the top as a constant here,
that tends to be your domain.

50
00:03:31.288 --> 00:03:32.452
So right now, it's localhost.

51
00:03:32.452 --> 00:03:36.073
Of course,
if you deployed it somewhere else,

52
00:03:36.073 --> 00:03:39.704
you should change the Reliant Party ID,
okay?

53
00:03:39.704 --> 00:03:40.871
Make sense?

54
00:03:40.871 --> 00:03:42.614
Let me go back here.

55
00:03:42.614 --> 00:03:44.886
So userID and userName.

56
00:03:44.886 --> 00:03:48.227
userName is the visible identifier, and

57
00:03:48.227 --> 00:03:53.481
the ID is the internal identifier for
that user within my system.

58
00:03:53.481 --> 00:03:57.335
So in our system, it's email and
name in our database.

59
00:03:57.335 --> 00:04:01.319
timeout is how much time we will wait for

60
00:04:01.319 --> 00:04:05.558
the user to finish the operation, okay?

61
00:04:05.558 --> 00:04:08.493
There are a couple of steps,
the attestation, the authentication,

62
00:04:08.493 --> 00:04:09.399
it doesn't matter.

63
00:04:09.399 --> 00:04:16.183
So how much time I'm willing to wait for
getting that authentication.

64
00:04:16.183 --> 00:04:19.327
attestationType, in case you
wanna change this advanced part.

65
00:04:19.327 --> 00:04:24.565
So we will leave that for the advanced
web application workshop later.

66
00:04:24.565 --> 00:04:29.428
So excludeCredentials,
the idea is that we can pass an array of

67
00:04:29.428 --> 00:04:34.960
credentials that we already have
because we are registering a new one.

68
00:04:34.960 --> 00:04:39.686
I don't want the user to have two face
IDs over the same website because it

69
00:04:39.686 --> 00:04:41.402
doesn't make any sense.

70
00:04:41.402 --> 00:04:45.446
So I don't want the user
to register two public and

71
00:04:45.446 --> 00:04:49.598
private keys over the same
kind of authorization.

72
00:04:49.598 --> 00:04:50.490
Make sense?

73
00:04:50.490 --> 00:04:55.458
So that's why we are doing this, but
we still don't understand what we're going

74
00:04:55.458 --> 00:04:58.698
to say, so
you will understand this code in a second.

75
00:04:58.698 --> 00:05:04.246
But basically, for each user,
we will have an array of devices.

76
00:05:04.246 --> 00:05:07.644
So this can be a device, okay, a USB key,

77
00:05:07.644 --> 00:05:11.153
this is a kind of UBECO
compatible USB key.

78
00:05:11.153 --> 00:05:14.673
But it has a button, so that's why,
because I need to interact with it,

79
00:05:14.673 --> 00:05:17.008
when I pull it,
I will show you this in a minute.

80
00:05:17.008 --> 00:05:19.779
This can be another authenticator.

81
00:05:19.779 --> 00:05:23.834
Another device can be my face,
my touch ID.

82
00:05:23.834 --> 00:05:27.382
So I can have more than one per user.

83
00:05:27.382 --> 00:05:32.450
So in terms of data storage,
in terms of data structure,

84
00:05:32.450 --> 00:05:36.041
meaning if you are creating a database,

85
00:05:36.041 --> 00:05:41.745
like a SQL-based database,
the relationship between user and

86
00:05:41.745 --> 00:05:46.729
devices or users authentication
systems is one to one.

87
00:05:46.729 --> 00:05:50.977
So far, we have one user, one password,
so it was just one table.

88
00:05:50.977 --> 00:05:56.531
But here, the user can be authenticated,
the same user, with different mechanisms.

89
00:05:56.531 --> 00:06:00.108
So it's one to one, so
that's why we have an array, okay?

90
00:06:00.108 --> 00:06:02.733
Then authenticatorSelection here,

91
00:06:02.733 --> 00:06:07.166
you can filter which type of
authentication we're accepting.

92
00:06:07.166 --> 00:06:12.826
For example, if userVerification
is required or not, okay?

93
00:06:12.826 --> 00:06:14.502
You can change that.

94
00:06:14.502 --> 00:06:19.857
To be honest, in the real world today,
the real world is actually not the spec.

95
00:06:19.857 --> 00:06:22.079
But what browsers are supporting,

96
00:06:22.079 --> 00:06:26.382
it's not going to change too much
if you say not require, actually.

97
00:06:26.382 --> 00:06:30.237
This is optional, so if you just
remove this, it's gonna work, and

98
00:06:30.237 --> 00:06:32.500
it will take default values by default.

99
00:06:32.500 --> 00:06:34.790
And then I'm accepting
two common algorithm.

100
00:06:34.790 --> 00:06:39.346
This has to do with the keys inside and
the challenge, it doesn't matter.

101
00:06:39.346 --> 00:06:43.838
We typically send those two values, okay?

102
00:06:43.838 --> 00:06:48.395
If you wanna learn more about that,
just take ES 256 and

103
00:06:48.395 --> 00:06:53.330
RS 256, and you will get more
detail about what that means.

104
00:06:53.330 --> 00:06:56.747
But with that,
just take these for granted.

105
00:06:56.747 --> 00:07:01.451
And then we don't take, this is a JSON
object, so it's an object, okay?

106
00:07:01.451 --> 00:07:05.334
We don't send that object
to the client yet.

107
00:07:05.334 --> 00:07:10.626
We need to some kind of wrap it,
some kind of

108
00:07:10.626 --> 00:07:16.079
decorate that object through our library.

109
00:07:16.079 --> 00:07:20.663
So here I'm using
the SimpleWebAuthnServer library, so

110
00:07:20.663 --> 00:07:24.974
we generate registration
options based on my object.

111
00:07:24.974 --> 00:07:30.198
And it's going to return
another object that

112
00:07:30.198 --> 00:07:35.834
it has more properties,
and it has public keys,

113
00:07:35.834 --> 00:07:40.520
signatures, and it has the challenge.

114
00:07:40.520 --> 00:07:46.558
So the server will send
a challenge to the client, okay?

115
00:07:46.558 --> 00:07:52.135
What I'm doing is I'm saving
that challenge in my user.

116
00:07:52.135 --> 00:07:53.205
Why is that?

117
00:07:53.205 --> 00:08:00.366
Because this is two step process, later,
we will verify that the challenge sent by

118
00:08:00.366 --> 00:08:05.503
the browser is actually
the challenge we sent originally.

119
00:08:05.503 --> 00:08:10.299
So this is for verification and
to avoid security issues.

120
00:08:10.299 --> 00:08:12.390
So I'm saving this in my database.

121
00:08:14.990 --> 00:08:16.348
Okay, makes sense?

122
00:08:16.348 --> 00:08:18.467
So this is the first endpoint.

123
00:08:18.467 --> 00:08:21.157
Again this endpoint is
going to be executed.

124
00:08:21.157 --> 00:08:25.911
When the user express with a button,
I wanna have face ID, or

125
00:08:25.911 --> 00:08:30.866
I wanna have web authentication,
or I wanna have the passkey.

126
00:08:30.866 --> 00:08:36.051
In that case, we will trigger
first this call with an email.

127
00:08:36.051 --> 00:08:37.699
Make sense?

128
00:08:37.699 --> 00:08:40.138
Do you have any questions
on this endpoint?

129
00:08:40.138 --> 00:08:41.252
This point?

130
00:08:43.121 --> 00:08:48.463
No, so then I mean,
with this object that we are passing

131
00:08:48.463 --> 00:08:53.464
to the client,
we will request client side to the web

132
00:08:53.464 --> 00:08:58.143
authentication API an authentication,
okay?

133
00:08:58.143 --> 00:09:00.503
Which is register an authentication.

134
00:09:00.503 --> 00:09:05.539
And the browser will give us an answer,
and that answer will come

135
00:09:05.539 --> 00:09:11.242
here to the next endpoint that is
called registration-verification.

136
00:09:11.242 --> 00:09:15.907
We're going here to verify
that everything looks good and

137
00:09:15.907 --> 00:09:19.236
no one has changed the data in the middle,

138
00:09:19.236 --> 00:09:23.823
no man in the middle has added or
changed my information.

139
00:09:23.823 --> 00:09:26.568
So in this case, we will find the user,

140
00:09:26.568 --> 00:09:29.914
and we will take the data
that is sent by the API.

141
00:09:29.914 --> 00:09:33.540
And here, we are going to,
among other things,

142
00:09:33.540 --> 00:09:37.261
verify the challenge,
the expected challenge.

143
00:09:37.261 --> 00:09:45.049
So this is going to check if the data
is exactly what we are expecting, okay?

144
00:09:45.049 --> 00:09:48.383
And if everything is correct, okay?

145
00:09:48.383 --> 00:09:52.753
If verified and
we have all the information,

146
00:09:52.753 --> 00:09:57.703
well, we are creating a new object,
a new device.

147
00:09:57.703 --> 00:10:01.405
Well, first,
we check if the device already exists.

148
00:10:01.405 --> 00:10:06.740
If that's the case, it means that
I already saved that touch ID for

149
00:10:06.740 --> 00:10:11.614
that user on this device, so
I'm not going to save it twice.

150
00:10:11.614 --> 00:10:12.904
So I'm doing nothing, okay?

151
00:10:12.904 --> 00:10:18.715
And if it doesn't exist,
I'm creating the newDevice object,

152
00:10:18.715 --> 00:10:23.457
and saving that to the user.devices array,
okay?

153
00:10:23.457 --> 00:10:27.225
I mean, it looks like a lot of code,
but at the end,

154
00:10:27.225 --> 00:10:30.317
it's not so difficult to follow, okay?

155
00:10:30.317 --> 00:10:33.020
The flow is we are at the beginning.

156
00:10:33.020 --> 00:10:37.503
We start analyzing the flow,
it's kind of, what's going on here, okay?

157
00:10:37.503 --> 00:10:41.033
And then we say, okay, we saved it.

158
00:10:41.033 --> 00:10:44.872
And that finishes
the registration operation.

159
00:10:44.872 --> 00:10:48.225
At least server-side.

160
00:10:48.225 --> 00:10:49.497
Okay, make sense?

161
00:10:49.497 --> 00:10:52.374
Do you have any question so far?

162
00:10:52.374 --> 00:10:59.792
Until we don't add the client cycle,
it will still be kind of weird.

163
00:10:59.792 --> 00:11:01.999
Okay, so that's the registration.

164
00:11:01.999 --> 00:11:08.062
Then we have another pair of
endpoints that actually they

165
00:11:08.062 --> 00:11:13.367
look pretty similar in terms
of the code inside for

166
00:11:13.367 --> 00:11:18.943
authentication, which is actually login,
okay?

167
00:11:18.943 --> 00:11:25.759
So let's say that now the user wants to
log in with face ID or with a USB key.

168
00:11:25.759 --> 00:11:28.686
Okay, so in this case,
we start with something similar.

169
00:11:28.686 --> 00:11:33.994
We create an options object
that will have a challenge.

170
00:11:33.994 --> 00:11:42.065
And then we decorate, we wrap that
object with the WebAuthnServer library.

171
00:11:42.065 --> 00:11:45.244
In this case,
we generateAuthenticationOption and

172
00:11:45.244 --> 00:11:47.441
not generate registration option.

173
00:11:47.441 --> 00:11:50.066
It's a different function, okay?

174
00:11:50.066 --> 00:11:55.250
So internally, there are some differences,
but the whole code looks pretty similar.

175
00:11:55.250 --> 00:11:57.483
So the flows are very similar.

176
00:11:57.483 --> 00:12:00.664
So in that case,
we pass that to the client.

177
00:12:00.664 --> 00:12:03.618
The client will render a dialog, so

178
00:12:03.618 --> 00:12:08.254
the user can show her face or
the user can put his finger.

179
00:12:08.254 --> 00:12:13.409
And then we will verify that
information that we receive is

180
00:12:13.409 --> 00:12:18.888
exactly the same as the one that
we have saved in our database.

181
00:12:18.888 --> 00:12:21.283
So here there are some buffer operations,

182
00:12:21.283 --> 00:12:24.085
because what are we going
to save in our database?

183
00:12:24.085 --> 00:12:25.901
We will see this in action in a second.

184
00:12:25.901 --> 00:12:31.864
But are we going to save the information
about the fingerprint from the user or

185
00:12:31.864 --> 00:12:33.339
the face details?

186
00:12:33.339 --> 00:12:39.298
No, we just save an identifier,
like binary data that

187
00:12:39.298 --> 00:12:45.659
was signed that identifies that face for
my website only.

188
00:12:45.659 --> 00:12:49.910
So the same face from the same user and
the same device but

189
00:12:49.910 --> 00:12:54.720
on a different website,
we have a completely different data.

190
00:12:54.720 --> 00:12:56.717
This is to avoid fingerprinting.

191
00:12:56.717 --> 00:13:00.683
By the way, there are libraries for
web authentication for

192
00:13:00.683 --> 00:13:05.531
all the backend languages, for Go,
for Java, for .NET, for Python.

193
00:13:05.531 --> 00:13:07.608
So no matter the language you have,

194
00:13:07.608 --> 00:13:12.466
there are libraries that will help you
with authentication in the backend, okay?

195
00:13:12.466 --> 00:13:15.240
This is the simplest
libraries I could get and

196
00:13:15.240 --> 00:13:17.876
the one that is more updated for Node.js.

