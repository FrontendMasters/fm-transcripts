WEBVTT

1
00:00:00.350 --> 00:00:05.497
So, what we need to do is,
we need to send that payload,

2
00:00:05.497 --> 00:00:10.643
that JWT, to the server and
somehow we need to decrypt or

3
00:00:10.643 --> 00:00:16.136
decode this JWT and
store some of that data in our database.

4
00:00:16.136 --> 00:00:22.360
Because maybe the user tomorrow Will
actually come back using Google.

5
00:00:23.540 --> 00:00:25.874
And here it's your decision,

6
00:00:25.874 --> 00:00:30.910
if you wanna force the user to also
have a password as a backup or no.

7
00:00:32.430 --> 00:00:36.060
Most websites are forcing you to
create a local password as well.

8
00:00:37.830 --> 00:00:41.110
But you are not forced to that,
it's your decision, okay?

9
00:00:41.110 --> 00:00:46.870
So If the user is getting your
website through Google you can decide,

10
00:00:46.870 --> 00:00:50.855
okay well that's how you
will get here always.

11
00:00:50.855 --> 00:00:55.025
Or you can offer the user
to also store a password or

12
00:00:55.025 --> 00:00:59.609
to also store another factor for
this website, okay?

13
00:00:59.609 --> 00:01:00.600
Makes sense?

14
00:01:02.930 --> 00:01:05.770
Well, the next step is to
just do something else

15
00:01:05.770 --> 00:01:07.900
here in login from Google, right?

16
00:01:07.900 --> 00:01:11.550
We don't need just that,
because that doesn't make any sense.

17
00:01:11.550 --> 00:01:18.410
So what we're going to do is here we're
going to also create another API.

18
00:01:18.410 --> 00:01:19.140
Another endpoint, okay?

19
00:01:20.600 --> 00:01:23.080
So we need to create,
we have login, register.

20
00:01:23.080 --> 00:01:24.430
This is something different.

21
00:01:24.430 --> 00:01:25.730
This is login from Google.

22
00:01:28.070 --> 00:01:31.046
It's a different thing because
the data we are sending,

23
00:01:31.046 --> 00:01:33.330
we don't have a password here.

24
00:01:33.330 --> 00:01:36.610
So my Gmail password will not appear here.

25
00:01:36.610 --> 00:01:40.044
Okay, so I'm going to create another,

26
00:01:40.044 --> 00:01:46.290
we received data with the payload
that comes from the auth server.

27
00:01:46.290 --> 00:01:50.720
So I'm going to say something
like from here login from Google.

28
00:01:52.930 --> 00:01:57.746
Let's say we're going to call,
what I'm going to

29
00:01:57.746 --> 00:02:03.390
do is here say that I will
have login Google, okay?

30
00:02:03.390 --> 00:02:05.650
And I will call this from where?

31
00:02:05.650 --> 00:02:10.450
From auth.js so
now I'm coming back to that part.

32
00:02:10.450 --> 00:02:14.310
I'm coming back to this one I'm
going to write something like this.

33
00:02:14.310 --> 00:02:19.292
So here what I'm going to do is
then I'm going to call the API and

34
00:02:19.292 --> 00:02:24.050
see while the server is responding so
login from Google.

35
00:02:24.050 --> 00:02:27.105
By the way, I didn't create
the endpoint in the server yet, so

36
00:02:27.105 --> 00:02:29.220
this is not gonna work yet.

37
00:02:29.220 --> 00:02:35.720
And because I'm using a weight, I need
to add an async modifier, join function.

38
00:02:35.720 --> 00:02:38.455
And when I'm here,
I will just call post login,

39
00:02:38.455 --> 00:02:41.070
because the user can
just login differently.

40
00:02:42.500 --> 00:02:45.250
But it's still logging in, okay?

41
00:02:45.250 --> 00:02:50.890
And remember, I had the response and
then I need to have the user, okay?

42
00:02:50.890 --> 00:02:53.580
And I don't have the user right now,
so I need to create a new option.

43
00:02:55.490 --> 00:03:01.891
And I would expect my server to
give me a name and an email.

44
00:03:03.330 --> 00:03:08.379
That, I'm expecting that
to be decoded from,

45
00:03:08.379 --> 00:03:12.304
in this case, the payload that Jwt.

46
00:03:12.304 --> 00:03:14.291
So when we are using a federated login,

47
00:03:14.291 --> 00:03:16.650
we need to create a separate process for
that.

48
00:03:18.360 --> 00:03:22.760
Should we create one per provider
actually depends on the case.

49
00:03:22.760 --> 00:03:29.959
If you're using this systems that are
already using an SDK from each provider,

50
00:03:29.959 --> 00:03:35.340
typically, you will need
to create one per provider.

51
00:03:35.340 --> 00:03:40.624
If you're usingAuth, like from scratch and
you are building your own Auth flow,

52
00:03:40.624 --> 00:03:44.080
maybe you can just have one flow for
all the provider.

53
00:03:46.136 --> 00:03:52.456
But anyway remember that you will need
to register on each provider manually.

54
00:03:56.243 --> 00:04:00.124
So now we can log in with username and
password and that username and

55
00:04:00.124 --> 00:04:05.030
password can be pre populated
automatically from credentials manager.

56
00:04:05.030 --> 00:04:07.839
And now we can login with Google, okay?

57
00:04:07.839 --> 00:04:10.542
We still need to make the server part,

58
00:04:10.542 --> 00:04:14.894
but so far, first of all,
&gt;&gt; Do you need to pass the data into line

59
00:04:14.894 --> 00:04:15.400
31?

60
00:04:15.400 --> 00:04:20.415
&gt;&gt; I need to tell it, right now yeah,
I'm not passing the data so

61
00:04:20.415 --> 00:04:25.527
you're right, I need to take
the data that I'm getting from,

62
00:04:25.527 --> 00:04:31.240
so this data is coming from here,
from the global callback.

63
00:04:31.240 --> 00:04:37.739
Okay, so now let's go to the server and
let's add the new endpoint.

64
00:04:37.739 --> 00:04:44.202
So, Here, to be honest,
you need to make some decisions.

65
00:04:44.202 --> 00:04:49.539
Okay, so because there are many decisions
to make, so we'll say log in Google,

66
00:04:49.539 --> 00:04:53.790
request, response, and
we're going to do something inside.

67
00:04:55.320 --> 00:04:59.613
I mean, decisions are like what
happens if the user has already

68
00:04:59.613 --> 00:05:01.560
an account with passwords?

69
00:05:01.560 --> 00:05:07.107
Are you going to attach the Google login
to it or creating like a separate user?

70
00:05:07.107 --> 00:05:11.997
Typically you want to attach,
what happens if the user has no password?

71
00:05:11.997 --> 00:05:17.300
So that email address is unique, it's
the first time it's as in your website.

72
00:05:17.300 --> 00:05:19.710
Do you want to create the password or not?

73
00:05:20.850 --> 00:05:26.580
So, decisions that you make as
the product owner in this case.

74
00:05:26.580 --> 00:05:31.765
So, but the first thing that we
need is to decode that string so

75
00:05:31.765 --> 00:05:34.767
remember that what we received is.

76
00:05:37.414 --> 00:05:41.365
Now we have it here,
we received something like this, okay?

77
00:05:41.365 --> 00:05:44.110
And we will get that server file.

78
00:05:44.110 --> 00:05:46.010
So we need to decode that.

79
00:05:46.010 --> 00:05:49.972
So for that I already have

80
00:05:49.972 --> 00:05:55.270
a dependency that decodes JWTs.

81
00:05:55.270 --> 00:05:58.340
It's J W T J E S D code.

82
00:05:58.340 --> 00:06:00.250
That's the open source library.

83
00:06:00.250 --> 00:06:06.180
So the first thing that maybe I wanna do,
is decode.gwt.

84
00:06:06.180 --> 00:06:10.077
So, I'm going to say,
jwt.jsdecode.jwtdecode,

85
00:06:10.077 --> 00:06:13.100
that's the name of the function.

86
00:06:13.100 --> 00:06:17.872
I'm going to pass from the body,
a credential data, or

87
00:06:17.872 --> 00:06:21.020
I can call this however you want, but

88
00:06:21.020 --> 00:06:26.317
remember we are passing the data
as it's coming from Google.

89
00:06:26.317 --> 00:06:29.108
And the name of the property
was credential,

90
00:06:29.108 --> 00:06:32.203
that how Google is setting that property,
okay?

91
00:06:32.203 --> 00:06:35.991
Make sense, so what.

92
00:06:35.991 --> 00:06:40.378
Now, okay,
we need to do something with this,

93
00:06:40.378 --> 00:06:45.105
first where is the user
data within that property?

94
00:06:45.105 --> 00:06:46.105
Let's see that again.

95
00:06:47.635 --> 00:06:49.305
Is this data, okay?

96
00:06:49.305 --> 00:06:52.845
So this is the data that
we are actually receiving.

97
00:06:52.845 --> 00:06:57.680
So we want from here the name,
the email, if we want the picture.

98
00:06:57.680 --> 00:06:58.970
So all the data you want.

99
00:06:58.970 --> 00:07:06.520
Okay, so from here, so
this is called credential.

100
00:07:06.520 --> 00:07:12.262
So if you wanna receive it at credential,
maybe what we should be doing in our,

101
00:07:12.262 --> 00:07:18.650
auth.js, cuz I think I'm not sending
it as credential I'm sending the data.

102
00:07:18.650 --> 00:07:21.700
If you want,
you can say credential data here.

103
00:07:21.700 --> 00:07:25.690
It's I mean, if not,
we can just remove that key and

104
00:07:25.690 --> 00:07:28.520
take the whole object as as granted.

105
00:07:29.860 --> 00:07:32.987
But in case you want to send
something else because typically,

106
00:07:32.987 --> 00:07:37.160
you send more information, timestamps,
the current user rationed.

107
00:07:37.160 --> 00:07:41.481
So when you say new users
typically you say more data,

108
00:07:41.481 --> 00:07:43.990
that we are not doing it today.

109
00:07:45.830 --> 00:07:49.730
So that's why I'm using like
an object proper for this.

110
00:07:50.880 --> 00:07:57.378
So going back to the server, so
I'm taking the credential and now,

111
00:07:57.378 --> 00:08:03.876
from that credential, I'm going
to create a property with a user,

112
00:08:03.876 --> 00:08:11.775
and actually what I need is to take from
that object a property known as payload.

113
00:08:11.775 --> 00:08:16.345
So, for example, the email,
it's available on myJWT.payload.

114
00:08:16.345 --> 00:08:21.129
That's how the code works,
it gives you the payload,

115
00:08:21.129 --> 00:08:24.148
of that JWT, and I want the email.

116
00:08:24.148 --> 00:08:26.216
Whats the name?

117
00:08:26.216 --> 00:08:33.245
Well, Google will give you both,
they give a name with a snake case,

118
00:08:33.245 --> 00:08:39.640
so we underscore, and
the family name, the last name.

119
00:08:39.640 --> 00:08:46.359
So you decide which one
do you want to store or

120
00:08:46.359 --> 00:08:51.288
both, payload.familyname.

121
00:08:51.288 --> 00:08:55.945
Okay and then do we have a password?

122
00:08:55.945 --> 00:09:01.849
No, so we can say password,
no password false or

123
00:09:01.849 --> 00:09:07.330
nothing it's up to you or undefined, okay?

124
00:09:08.530 --> 00:09:12.851
Why I'm saying this is because remember
we are writing a database here and

125
00:09:12.851 --> 00:09:15.580
all the other entries,
they have a password.

126
00:09:16.780 --> 00:09:19.923
We don't need all the objects
to have the same schema, okay?

127
00:09:19.923 --> 00:09:21.800
So that's not mandatory.

128
00:09:21.800 --> 00:09:27.970
But at least we should express that
this user has no password right now.

129
00:09:29.300 --> 00:09:33.538
And it will have more other kind
of information, no password, but

130
00:09:33.538 --> 00:09:35.220
something else.

131
00:09:35.220 --> 00:09:36.600
Okay, makes sense?

132
00:09:36.600 --> 00:09:41.280
Well with that user, we should try
to find if it's a new user or not.

133
00:09:41.280 --> 00:09:47.650
So user found,
find user by its email, okay?

134
00:09:47.650 --> 00:09:49.490
Like so why?

135
00:09:49.490 --> 00:09:52.700
Because if it's new,
we are going to save a new entry.

136
00:09:53.940 --> 00:09:55.845
If you already have it,

137
00:09:55.845 --> 00:10:01.960
we're going to attach the Google payload
data to the current user, right?

138
00:10:01.960 --> 00:10:03.410
Make sense?

139
00:10:03.410 --> 00:10:08.173
So if the user is found,
we can do something like, okay,

140
00:10:08.173 --> 00:10:11.668
we are going to create a Google property.

141
00:10:11.668 --> 00:10:15.808
And we're going to save
here as a Google property,

142
00:10:15.808 --> 00:10:19.410
the AUAD, that's the ID from Google.

143
00:10:19.410 --> 00:10:23.230
Remember, that's a property
going back here.

144
00:10:23.230 --> 00:10:29.670
AUAD is this, okay,
that's an ID that represents that user.

145
00:10:29.670 --> 00:10:36.110
You can store more properties if you want,
the whole JWT metadata.

146
00:10:36.110 --> 00:10:39.970
But yeah,
maybe we don't need to store everything.

147
00:10:39.970 --> 00:10:42.730
After that,
I'm going to write to the database.

148
00:10:42.730 --> 00:10:49.813
I'm going to respond to the client,
okay, true, so the login was successful.

149
00:10:49.813 --> 00:10:55.854
And also I should deliver
the name because, remember that,

150
00:10:55.854 --> 00:11:01.190
the client doesn't know
about the name yet, right?

151
00:11:01.190 --> 00:11:06.200
Because the user has just logged in with
his or her Google account and the email.

152
00:11:07.540 --> 00:11:10.650
So we are sending that
data back to the client.

153
00:11:10.650 --> 00:11:13.270
And if it's a new user, okay?

154
00:11:13.270 --> 00:11:18.950
Well, I'm going to talk to my
database dot data dot users.

155
00:11:18.950 --> 00:11:23.948
I'm going to push a new user,
a new object in an object and

156
00:11:23.948 --> 00:11:29.550
we'll take the current user
that I have just created.

157
00:11:29.550 --> 00:11:31.092
So I'm going to populate,

158
00:11:31.092 --> 00:11:35.520
I'm going to spread the current audit
the data that I have just defined.

159
00:11:35.520 --> 00:11:40.560
And also I'm going to
say I'm going to save

160
00:11:40.560 --> 00:11:47.705
the Google payload the same
Google property that I did before

161
00:11:50.090 --> 00:11:52.663
Payload dot AUAD.

162
00:11:52.663 --> 00:11:58.633
If you think that you will have more
federated logins in the future,

163
00:11:58.633 --> 00:12:04.604
maybe instead of doing this,
you could say instead of user Google,

164
00:12:04.604 --> 00:12:11.540
you can change and create a federated
object that will have a Google property.

165
00:12:11.540 --> 00:12:15.750
I mean,
we are creating our own organization here.

166
00:12:15.750 --> 00:12:23.570
Okay, so then if I follow that, I need
to do something like this, make sense?

167
00:12:23.570 --> 00:12:28.393
So I'm creating my own structure
because now the user may

168
00:12:28.393 --> 00:12:32.330
have different ways to login into my app.

169
00:12:32.330 --> 00:12:33.310
And is the same user.

170
00:12:34.810 --> 00:12:40.731
So after that, I'm going to also bright
I need two or more the same thing,

171
00:12:40.731 --> 00:12:45.331
while I could do this after
the if actually, but anyway.

172
00:12:48.080 --> 00:12:49.947
Okay, so that's the flow, and

173
00:12:49.947 --> 00:12:54.249
here you can make many decisions about
what do you wanna do with your user.

