WEBVTT

1
00:00:00.000 --> 00:00:02.989
Something that to apply
this to our website, so

2
00:00:02.989 --> 00:00:05.092
how to apply this to our project.

3
00:00:05.092 --> 00:00:09.865
So we have our project here,
so where we should add

4
00:00:09.865 --> 00:00:14.536
web authentication login,
like face ID login?

5
00:00:14.536 --> 00:00:20.619
Well, we need to change
the flow on this login form.

6
00:00:20.619 --> 00:00:24.790
We need to make a change,
like an architectural UX change.

7
00:00:24.790 --> 00:00:31.825
That is actually a pattern that we should
be doing these days on every project.

8
00:00:31.825 --> 00:00:37.343
That change means it has a name.

9
00:00:37.343 --> 00:00:41.502
It's called Identifier-First Flow.

10
00:00:41.502 --> 00:00:47.174
So, so far, we have a login form,
username and password, okay?

11
00:00:47.174 --> 00:00:48.823
We need to change that.

12
00:00:48.823 --> 00:00:53.990
So we are going from
the login standard form, and

13
00:00:53.990 --> 00:01:00.934
we are going first to a first step
that will just ask for identity.

14
00:01:00.934 --> 00:01:04.744
The username, frame identifier,

15
00:01:04.744 --> 00:01:08.809
a username, your email, whatever.

16
00:01:08.809 --> 00:01:12.459
So not the password yet, okay?

17
00:01:12.459 --> 00:01:17.876
So, remember the website, webauthn.io,
that we have just been playing with?

18
00:01:17.876 --> 00:01:21.089
It was asking me for
a username, not the password.

19
00:01:21.089 --> 00:01:25.674
So, we ask for a username or
an email address, whatever is the ID for

20
00:01:25.674 --> 00:01:26.646
your system.

21
00:01:26.646 --> 00:01:31.697
Then we ask the browser and
the browser may be asking, or

22
00:01:31.697 --> 00:01:38.913
our project may be asking also the backend
about the login option for that user.

23
00:01:38.913 --> 00:01:43.541
Okay, so we can check,
okay, for that user, for

24
00:01:43.541 --> 00:01:47.300
m@m.com, what do we have available?

25
00:01:47.300 --> 00:01:52.698
And maybe it's a password, maybe it's, no,
touch ID, that user saved touch ID before.

26
00:01:52.698 --> 00:01:58.463
So then we offer the user to
login directly with touch ID.

27
00:01:58.463 --> 00:01:59.459
Does it make sense?

28
00:01:59.459 --> 00:02:01.204
So we need to change the flow.

29
00:02:01.204 --> 00:02:05.302
So then as a third option,
we offer the user to enter a password, or

30
00:02:05.302 --> 00:02:06.998
login with other options.

31
00:02:06.998 --> 00:02:11.486
So we do change how we design our screens,
okay?

32
00:02:11.486 --> 00:02:14.647
So that's how typically
this flow looks like,

33
00:02:14.647 --> 00:02:17.658
Identifier-First Login Forms looks like.

34
00:02:17.658 --> 00:02:23.621
First, we ask for your email address or
your username, then you hit Continue.

35
00:02:23.621 --> 00:02:27.966
And then the password appears or
another option appears.

36
00:02:29.562 --> 00:02:34.560
And in the future,
if we get into the top of our diagram

37
00:02:34.560 --> 00:02:39.910
passwordless, no one will
get the password text field.

38
00:02:39.910 --> 00:02:43.948
People will just get different
options to log in that

39
00:02:43.948 --> 00:02:46.808
are actually not password-based.

40
00:02:46.808 --> 00:02:51.410
So far, we have the standard
login with username and password,

41
00:02:51.410 --> 00:02:55.076
we can also login with
a federated Google account,

42
00:02:55.076 --> 00:02:58.331
so I'm logging,
I can log in, I can log out.

43
00:02:58.331 --> 00:03:02.896
But I need to first to adjust
the flow to this idea of

44
00:03:02.896 --> 00:03:08.140
Identifier-First, I need
to first hide the password.

45
00:03:08.140 --> 00:03:10.952
So I don't wanna see the password first,
okay?

46
00:03:10.952 --> 00:03:13.205
I wanna see that as a second step.

47
00:03:13.205 --> 00:03:17.652
So for that,
let's make some changes in our code, and

48
00:03:17.652 --> 00:03:20.659
then we can add web authentication.

49
00:03:22.732 --> 00:03:27.325
So going back to our code,
I will start with the HTML.

50
00:03:27.325 --> 00:03:32.437
So if you look at the formLogin,
what I'm going to do is I'm

51
00:03:32.437 --> 00:03:37.450
going to wrap the password,
both the label and the input,

52
00:03:37.450 --> 00:03:41.776
with a section that will
start hidden by default.

53
00:03:41.776 --> 00:03:48.255
And let's call this section
login_section_password.

54
00:03:48.255 --> 00:03:52.005
So this is the section for the password.

55
00:03:52.005 --> 00:03:54.710
And just because I'm here,

56
00:03:54.710 --> 00:04:00.807
let's add another section that
will be hidden also by default.

57
00:04:00.807 --> 00:04:04.330
That will be for webauthn, later,
we will add something there.

58
00:04:04.330 --> 00:04:09.694
So login_section_webauthn, okay?

59
00:04:09.694 --> 00:04:10.645
We will add something there.

60
00:04:10.645 --> 00:04:12.275
So what's the idea?

61
00:04:12.275 --> 00:04:18.386
The idea is that our login form,
we have different steps now.

62
00:04:18.386 --> 00:04:19.062
By the way,

63
00:04:19.062 --> 00:04:23.275
this is the hidden Boolean HTML attribute
that will also hidden it by CSS.

64
00:04:23.275 --> 00:04:25.905
So they won't appear.

65
00:04:25.905 --> 00:04:29.743
And now, we need to add some
logic to make that work.

66
00:04:29.743 --> 00:04:35.351
So yeah, now if I refresh,
I'm not seeing the password, okay?

67
00:04:35.351 --> 00:04:39.698
But yeah, I need that Continue button
to do something different, okay?

68
00:04:39.698 --> 00:04:42.569
So I need to add the idea of final step.

69
00:04:42.569 --> 00:04:45.378
So I will go to my auth.js file, and

70
00:04:45.378 --> 00:04:50.169
it will look for the init function that,
it was there empty.

71
00:04:50.169 --> 00:04:54.584
So I'm going to create
a property of my auth object.

72
00:04:54.584 --> 00:04:57.760
Let's call the loginStep.

73
00:04:57.760 --> 00:05:00.564
So we are in step 1, we start in step 1.

74
00:05:00.564 --> 00:05:04.413
And the idea here is that
we are going to hide and

75
00:05:04.413 --> 00:05:07.288
do this step based on where we are.

76
00:05:07.288 --> 00:05:10.350
So what we can do is at init,

77
00:05:10.350 --> 00:05:15.284
we could take document.getElementById,

78
00:05:15.284 --> 00:05:20.482
the two elements that we
have just created, so

79
00:05:20.482 --> 00:05:25.969
login_section_password and also hide them.

80
00:05:25.969 --> 00:05:29.481
Just in case you are coming back
to the login section later,

81
00:05:29.481 --> 00:05:34.556
remember this is not React programming,
I don't have any library, any framework.

82
00:05:34.556 --> 00:05:38.925
But I have a routing system,
a single page application routing system.

83
00:05:38.925 --> 00:05:45.805
So I should do this
the classic old fashioned way.

84
00:05:45.805 --> 00:05:49.885
Okay, so the next step now is to actually

85
00:05:49.885 --> 00:05:54.813
change what we're doing when you log in,
okay?

86
00:05:54.813 --> 00:06:00.275
So when we log in, we need to check,
first, in which step are we, okay?

87
00:06:00.275 --> 00:06:05.049
Because yeah,
now when we are logging in, okay,

88
00:06:05.049 --> 00:06:09.153
this one, I need to check the step, okay?

89
00:06:09.153 --> 00:06:12.770
If we are in step 1,
I don't need to do this.

90
00:06:12.770 --> 00:06:16.548
I don't need to go and try to log in
because I don't have a password yet.

91
00:06:16.548 --> 00:06:17.580
Make sense?

92
00:06:17.580 --> 00:06:21.840
So I will still keep the same button,
the same Continue button that we have.

93
00:06:21.840 --> 00:06:23.116
So I don't need to create two buttons.

94
00:06:23.116 --> 00:06:26.804
Of course,
you can redesign this as much as you want.

95
00:06:26.804 --> 00:06:30.738
I try to keep it as simple as possible.

96
00:06:30.738 --> 00:06:36.950
So what we can check if verifying here,
what's the current step?

97
00:06:36.950 --> 00:06:38.089
The loginStep.

98
00:06:38.089 --> 00:06:44.321
So if the loginStep is 1,
then I don't need to do this.

99
00:06:44.321 --> 00:06:46.761
I will do this only if it's a step 2.

100
00:06:46.761 --> 00:06:48.738
So far we have only two steps.

101
00:06:51.478 --> 00:06:53.502
So this is step 2.

102
00:06:55.387 --> 00:07:02.192
And if this is a step 1, okay,
then what I need is a new process.

103
00:07:02.192 --> 00:07:03.148
So what do I need to do?

104
00:07:03.148 --> 00:07:06.129
I need to ask the server, hey, server,

105
00:07:06.129 --> 00:07:09.301
which options do I have
to log in this user?

106
00:07:09.301 --> 00:07:14.179
And the server will tell me, well,
Google password and also face ID,

107
00:07:14.179 --> 00:07:15.513
that's the idea.

108
00:07:15.513 --> 00:07:20.313
So then I can render different
parts of the second step based on

109
00:07:20.313 --> 00:07:23.001
what the server is saying, okay?

110
00:07:23.001 --> 00:07:24.509
Make sense?

111
00:07:24.509 --> 00:07:29.153
That's kind of how this
two-step process work.

112
00:07:29.153 --> 00:07:32.571
So identifier first, and after that,

113
00:07:32.571 --> 00:07:37.136
we see what we can do,
what we can offer to that user.

114
00:07:37.136 --> 00:07:43.540
So here I'm going to create a new
process that we don't have right now,

115
00:07:43.540 --> 00:07:48.154
that we are going to call
this checkAuthnOptions.

116
00:07:48.154 --> 00:07:52.172
You can add the n or not, it's up to you.

117
00:07:52.172 --> 00:07:54.310
So then I need to create that.

118
00:07:55.690 --> 00:08:00.615
Right now, We're gonna start empty,

119
00:08:00.615 --> 00:08:05.739
because to understand the idea,
maybe we should go to the server first and

120
00:08:05.739 --> 00:08:09.973
try to bribe that server part
to understand the flow, okay?

121
00:08:09.973 --> 00:08:14.728
So then in the server,
we're going to create

122
00:08:14.728 --> 00:08:19.243
a new endpoint post, all of them are post.

123
00:08:19.243 --> 00:08:23.176
And we can call this auth/auth-options or

124
00:08:23.176 --> 00:08:27.968
options because we are already
at the auth, anyway.

125
00:08:29.779 --> 00:08:30.903
And what do we need to do?

126
00:08:30.903 --> 00:08:33.050
Well, first, we need to find the user.

127
00:08:33.050 --> 00:08:35.992
So we're going to foundUser,

128
00:08:35.992 --> 00:08:41.433
we're going to find the user
based on the body's email.

129
00:08:41.433 --> 00:08:46.251
So that means that we need to receive
the email of the current user

130
00:08:46.251 --> 00:08:48.850
that we have the email input type.

131
00:08:48.850 --> 00:08:52.106
Okay, so we have that moment.

132
00:08:52.106 --> 00:08:57.424
And if it's found,
we're going to do something, and

133
00:08:57.424 --> 00:09:02.639
if not, there is no user,
so maybe we have a problem.

134
00:09:02.639 --> 00:09:09.088
So we don't wanna say to the client
that user does not exist.

135
00:09:09.088 --> 00:09:10.305
Why?

136
00:09:10.305 --> 00:09:12.634
We have already covered that problem.

137
00:09:12.634 --> 00:09:17.925
We don't wanna give a possible attacker
more information that they need.

138
00:09:17.925 --> 00:09:21.779
So that's why I'm going to say,
you know what, yeah,

139
00:09:21.779 --> 00:09:24.077
you can put me a password, okay?

140
00:09:24.077 --> 00:09:25.846
Yeah, I accept passwords.

141
00:09:27.552 --> 00:09:28.639
Make sense?

142
00:09:28.639 --> 00:09:33.452
And then if I found the user,
I'm going to send an object, for

143
00:09:33.452 --> 00:09:37.819
example, saying, okay,
do we have a password or not?

144
00:09:37.819 --> 00:09:39.106
Well, let's see.

145
00:09:41.185 --> 00:09:44.929
So we can pass if password.

146
00:09:44.929 --> 00:09:48.984
Remember for logging Google,
we were saying password false.

147
00:09:48.984 --> 00:09:52.998
So don't send the password to the client,
that will be very wrong.

148
00:09:52.998 --> 00:09:55.248
So don't do that, even if it's hash.

149
00:09:55.248 --> 00:10:02.363
But we can say if it's not false, Okay?

150
00:10:02.363 --> 00:10:07.166
At least that means we do have a password,
and well, we're sending, hey, it's okay.

151
00:10:07.166 --> 00:10:13.652
And then we can also say, hey,
if the user has a Google account,

152
00:10:13.652 --> 00:10:18.460
a Google federated login account,
register so

153
00:10:18.460 --> 00:10:24.733
we can check on the found user
if the federated object exists.

154
00:10:24.733 --> 00:10:33.136
And if that's okay, I will check if
the federated.google value exists.

155
00:10:33.136 --> 00:10:37.726
And then for webauthn,
we can add something here, okay?

156
00:10:37.726 --> 00:10:43.674
So far, we're going to check
if the property exists.

157
00:10:43.674 --> 00:10:49.031
Let's add the n here because
that's the name of the API.

158
00:10:49.031 --> 00:10:55.199
Okay, we haven't seen yet
how to make webauthn into our app yet,

159
00:10:55.199 --> 00:11:02.953
but at least we can already check if there
is a property with that name in that user.

160
00:11:02.953 --> 00:11:06.332
That for now, it will be false for
all our users.

161
00:11:06.332 --> 00:11:07.945
Makes sense?

162
00:11:07.945 --> 00:11:12.718
So again, this is for the client to
ask the server about the possible

163
00:11:12.718 --> 00:11:15.918
login options to increase user experience.

164
00:11:15.918 --> 00:11:20.815
So then when the user is trying to log in,
we're going to offer, hey,

165
00:11:20.815 --> 00:11:24.557
you can log in with your USB key,
yeah, I have my key.

166
00:11:24.557 --> 00:11:28.800
So then I can put my key on the phone, or

167
00:11:28.800 --> 00:11:34.779
I can put my key here through NFC and
log in with my key.

168
00:11:34.779 --> 00:11:39.900
Okay, so now that that's ready,
we also need to add these to the API.

169
00:11:42.608 --> 00:11:48.870
So we go to API.js, and
I'm going to add checkAuthOptions.

170
00:11:51.392 --> 00:11:55.883
That it's an async function
that receives a user.

171
00:11:58.020 --> 00:12:03.247
And we are going to return the await of

172
00:12:03.247 --> 00:12:11.345
making a PostRequest to
the endpoint + auth-options.

173
00:12:11.345 --> 00:12:15.194
And we are gonna pass the user
that we receive as an argument.

174
00:12:15.194 --> 00:12:20.614
So most of the API codes
are pretty similar, okay?

175
00:12:20.614 --> 00:12:21.773
Make sense?

176
00:12:24.770 --> 00:12:27.864
So we have now the server endpoint.

177
00:12:27.864 --> 00:12:33.590
We have that endpoint register
in our API client side object.

178
00:12:33.590 --> 00:12:39.750
What we need to do is something here,
when we are calling checkAuthOptions.

179
00:12:39.750 --> 00:12:45.764
And here I'm in the first step, the first
step is to make that call to the server.

180
00:12:45.764 --> 00:12:50.346
So I'm going to get
a response awaiting for

181
00:12:50.346 --> 00:12:53.407
the API checkAuthOptions.

182
00:12:53.407 --> 00:12:57.600
And I need to pass an object
with an email inside.

183
00:12:57.600 --> 00:12:59.638
Where do I'm going to get the email from?

184
00:12:59.638 --> 00:13:01.274
From the login form.

185
00:13:01.274 --> 00:13:03.840
Remember the user is typing an email.

186
00:13:03.840 --> 00:13:06.948
And remember,
please remember this, if not,

187
00:13:06.948 --> 00:13:10.378
you will call me later,
we are not validating here.

188
00:13:10.378 --> 00:13:17.260
So you need to validate everything, every
entry before sending this into production.

189
00:13:17.260 --> 00:13:21.725
But yeah, we are just writing
code in one day workshop.

190
00:13:21.725 --> 00:13:28.337
getElementById, this is login_email,
and we are going to get the value.

191
00:13:28.337 --> 00:13:35.387
And because now we have await,
we should change this function to async.

192
00:13:35.387 --> 00:13:37.089
So what do we need to do here?

193
00:13:37.089 --> 00:13:41.939
Well, first,
I should pass these to loginStep 2.

194
00:13:41.939 --> 00:13:46.821
So now we will say, hey,
we are in step 2 now, okay?

195
00:13:46.821 --> 00:13:48.227
So everyone knows.

196
00:13:48.227 --> 00:13:52.536
And also, you should start checking, okay,

197
00:13:52.536 --> 00:13:57.407
if the server says that
password login is accepted.

198
00:13:57.407 --> 00:13:59.802
So if password login is accepted,

199
00:13:59.802 --> 00:14:03.775
I'm going to change the hidden
property of the section.

200
00:14:03.775 --> 00:14:08.220
So okay, the password will appear,
that's kind of the idea.

201
00:14:08.220 --> 00:14:15.683
So I'm going to get an ElementByID,
the ID is login_section_password.

202
00:14:15.683 --> 00:14:18.839
That's the one that we have
just created a few minutes ago.

203
00:14:18.839 --> 00:14:22.964
And I'm going to change,
we're going to say, hidden = false,

204
00:14:22.964 --> 00:14:26.419
that is double negative is
going to be visible, okay?

205
00:14:26.419 --> 00:14:33.095
And something similar happens in the case
the response is sending us webauthn.

206
00:14:33.095 --> 00:14:37.631
I could do that something similar
with Google, actually, but

207
00:14:37.631 --> 00:14:42.005
I think I had the div before
making the request to the server.

208
00:14:42.005 --> 00:14:47.165
So that's fine, okay?

209
00:14:47.165 --> 00:14:48.285
Something like that.

210
00:14:48.285 --> 00:14:51.033
So again, what is the flow now?

211
00:14:51.033 --> 00:14:56.920
I'm asking the user only for
her email or his email.

212
00:14:56.920 --> 00:15:01.733
And then after that, after the email,
we'll go to the server, and

213
00:15:01.733 --> 00:15:06.559
the server will check which login
options do we have for that email.

214
00:15:06.559 --> 00:15:11.004
And it's returning an object
with that information,

215
00:15:11.004 --> 00:15:17.199
then the client will actually show part
of the login form according to that.

216
00:15:17.199 --> 00:15:19.427
That's the idea.

217
00:15:19.427 --> 00:15:21.149
Okay, makes sense?

218
00:15:22.645 --> 00:15:28.578
So for now,
because we don't have webauthn, actually,

219
00:15:28.578 --> 00:15:35.859
if I use any of the email addresses
to register, password will appear.

220
00:15:35.859 --> 00:15:42.217
So now I can log in with password
as before, as a second step, okay?

221
00:15:42.217 --> 00:15:44.300
That's kind of the idea for now.

