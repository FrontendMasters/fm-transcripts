WEBVTT

1
00:00:00.270 --> 00:00:02.810
Let's start talking then
about authentication.

2
00:00:02.810 --> 00:00:05.114
So, the first thing that we need,

3
00:00:05.114 --> 00:00:09.540
is to separate authentication
from authorization.

4
00:00:09.540 --> 00:00:12.770
So, today we are going to be
focusing on authentication.

5
00:00:12.770 --> 00:00:14.410
And, okay, what's the difference?

6
00:00:14.410 --> 00:00:18.750
So, authentication has to do with,
validating the user's identity.

7
00:00:18.750 --> 00:00:20.553
Users, or systems identity.

8
00:00:20.553 --> 00:00:22.416
Sometimes it's not a person,

9
00:00:22.416 --> 00:00:26.440
it can be a system that is identifying
itself over another system.

10
00:00:26.440 --> 00:00:32.061
But most of the time on the web we
are talking about persons, users, okay?

11
00:00:32.061 --> 00:00:38.039
Authenticating in our websites or
web apps or progressive web apps.

12
00:00:38.039 --> 00:00:41.547
Authorization has to do
with what permissions and

13
00:00:41.547 --> 00:00:45.230
privileges you have after
you were authenticated.

14
00:00:46.370 --> 00:00:51.543
Sometimes authorization also has
to do with your user level and

15
00:00:51.543 --> 00:00:57.009
also it has to do with how
the authorization token is being stored,

16
00:00:57.009 --> 00:00:59.370
client side or server side.

17
00:00:59.370 --> 00:01:03.073
If you have ever heard about
the authentication token, for example,

18
00:01:03.073 --> 00:01:06.120
it has to do with that,
with authorization.

19
00:01:06.120 --> 00:01:11.980
So, we will cover some basic ideas of
that, but 95% of today's workshops,

20
00:01:11.980 --> 00:01:15.925
it's about authentication and
not authorization.

21
00:01:15.925 --> 00:01:19.461
So we won't be discussing
Access Control List or

22
00:01:19.461 --> 00:01:24.812
how you can connect to Microsoft
security systems to actually get current

23
00:01:24.812 --> 00:01:29.833
user's credentials from the OS itself or
things like that, right?

24
00:01:29.833 --> 00:01:34.845
So, we will be just talking about how
to register users in our websites,

25
00:01:34.845 --> 00:01:38.146
how to login users in our websites and
web apps.

26
00:01:38.146 --> 00:01:43.390
And how to get them back in our website
with the best possible user experience,

27
00:01:43.390 --> 00:01:43.950
right?

28
00:01:45.020 --> 00:01:48.510
So, quickly authentication or often,

29
00:01:48.510 --> 00:01:53.240
verifies the identity of a user of or
a service, okay?

30
00:01:53.240 --> 00:01:57.166
Within that umbrella,
we will be talking about the web, okay,

31
00:01:57.166 --> 00:02:02.417
of course you also have authentication on
native apps on each platform is different.

32
00:02:02.417 --> 00:02:08.185
But we will see, by the end of today's
course that even on native apps,

33
00:02:08.185 --> 00:02:13.294
we can actually leverage everything
that we will learn today.

34
00:02:13.294 --> 00:02:19.701
Because, for example, Web Authentication,
the API that we will cover later today,

35
00:02:19.701 --> 00:02:25.260
is available also on Native Android,
Native iOS, Native MacOS.

36
00:02:25.260 --> 00:02:28.262
The same thing,
of course they have a Native API, but

37
00:02:28.262 --> 00:02:32.920
it's also the same Web Authentication
mechanism, so the same server.

38
00:02:32.920 --> 00:02:37.276
And the server is the same, we are just
going to change the client and instead of

39
00:02:37.276 --> 00:02:41.900
JavaScript we'll probably write Swift code
or Kotlin code in the case of Android.

40
00:02:43.130 --> 00:02:48.110
So, some concepts, just to clarify
some concepts that we won't cover

41
00:02:48.110 --> 00:02:53.075
deeply during the day, but
maybe we mentioned the concept.

42
00:02:53.075 --> 00:02:57.585
So credentials, that's simple,
but actually credential is,

43
00:02:57.585 --> 00:03:01.360
whatever is needed to identify
that user server side.

44
00:03:01.360 --> 00:03:05.367
Like on a standard normal credential
is a username and password.

45
00:03:05.367 --> 00:03:08.837
So it's a pair of username and
password, that's the credential.

46
00:03:08.837 --> 00:03:10.957
But it can be something else, okay?

47
00:03:10.957 --> 00:03:15.866
So we don't know yet
how biometric authentication works, but

48
00:03:15.866 --> 00:03:19.577
we may say that our face
can be also credential.

49
00:03:19.577 --> 00:03:25.216
It's actually wrong, that the future
is wrong, but for now let's say that,

50
00:03:25.216 --> 00:03:29.760
to give an idea of other kind of
credentials that we might have.

51
00:03:29.760 --> 00:03:34.299
So single sign on, so
probably concept that you have heard SSO.

52
00:03:34.299 --> 00:03:37.883
This is a way that we have,
it's a sign on, okay, but

53
00:03:37.883 --> 00:03:42.840
it has to do more with authorization
than with authentication.

54
00:03:42.840 --> 00:03:47.824
The idea is that, to authenticate
the user with the same credentials on

55
00:03:47.824 --> 00:03:50.912
different websites or different web apps.

56
00:03:50.912 --> 00:03:54.010
I mean, in your company you
might have different web apps.

57
00:03:54.010 --> 00:03:58.164
Well, the idea is that If
the user is logged in, in web A,

58
00:03:58.164 --> 00:04:02.170
it may also be logged in automatically B,
C and D.

59
00:04:02.170 --> 00:04:04.520
Okay, that's kind of the idea
of single sign on, okay?

60
00:04:05.830 --> 00:04:11.320
So, two-factor authentication,
2FA, in case you heard that term.

61
00:04:11.320 --> 00:04:17.625
The idea is that by default and we will
start with that after these slides.

62
00:04:17.625 --> 00:04:19.920
By default,
we have one factor authentication.

63
00:04:19.920 --> 00:04:23.940
I mean, if you have username and password
in a login form, that's one factor,

64
00:04:23.940 --> 00:04:26.180
your username and password.

65
00:04:26.180 --> 00:04:28.200
The idea is that we can add more.

66
00:04:28.200 --> 00:04:29.723
Like, apart from that,

67
00:04:29.723 --> 00:04:34.220
also I can send you an SMS code
that probably you're used to that.

68
00:04:34.220 --> 00:04:39.490
I mean, broad you have a banking
application or website sometimes they will

69
00:04:39.490 --> 00:04:45.170
send you a code through a text message,
or SMS, or WhatsApp, or email okay?

70
00:04:45.170 --> 00:04:48.523
So those are two-factor authentication,
and later,

71
00:04:48.523 --> 00:04:52.340
we will see how you can attach
those solutions to your project.

72
00:04:52.340 --> 00:04:56.235
Multi-factor authentication,
MFA, is kind of another term for

73
00:04:56.235 --> 00:05:01.595
two-factor instead of two is more than
two or two or more, okay, it's just that.

74
00:05:01.595 --> 00:05:04.721
So, because of security sometimes,

75
00:05:04.721 --> 00:05:09.995
we won't add as many factors us
we can because the thing is that,

76
00:05:09.995 --> 00:05:15.777
if I need to login into my bank account
and the bank has my phone number.

77
00:05:15.777 --> 00:05:19.309
What happens if my phone number
is stolen by let's say hacker,

78
00:05:19.309 --> 00:05:23.270
hacker is not the right term,
but let's say hacker for now.

79
00:05:23.270 --> 00:05:26.755
So, yeah, well,
maybe I want another factor.

80
00:05:26.755 --> 00:05:30.568
So it can be my fingertip on a phone,

81
00:05:30.568 --> 00:05:34.518
it can be my face, it can be a USB key.

82
00:05:34.518 --> 00:05:37.715
So there are many other
factors that I can add.

83
00:05:37.715 --> 00:05:40.792
So initially,
websites were adding support for

84
00:05:40.792 --> 00:05:45.379
two factor authentication and now,
most of them, it's multifactor.

85
00:05:45.379 --> 00:05:50.092
So you have a manager where
you can actually add more, or

86
00:05:50.092 --> 00:05:54.417
add as many as you want or
as many as you have, okay?

87
00:05:54.417 --> 00:05:59.412
So OAuth 2.0, it's actually,
it's not actually part of

88
00:05:59.412 --> 00:06:04.710
authentication, it's more
part of authorization, okay?

89
00:06:04.710 --> 00:06:09.704
And it's the way after the user
has been authenticated,

90
00:06:09.704 --> 00:06:15.441
how can you keep that user logged
in websites, also native apps?

91
00:06:15.441 --> 00:06:18.589
And OAuth 2.0 is a login flow,

92
00:06:18.589 --> 00:06:23.655
where you can actually login
in a third party server.

93
00:06:23.655 --> 00:06:27.783
For example, when you go to a website and
there is a button saying,

94
00:06:27.783 --> 00:06:30.451
log in with Facebook, log in with GitHub.

95
00:06:30.451 --> 00:06:35.327
And then you click there, you go to the
GitHub page, you log in at GitHub.com and

96
00:06:35.327 --> 00:06:37.423
then you come back to the website.

97
00:06:37.423 --> 00:06:40.945
And you are logged in in that
non-GitHub website, okay?

98
00:06:40.945 --> 00:06:44.580
That's typically using OAuth 2.0.

99
00:06:44.580 --> 00:06:48.721
JWT, JSON Web Token,
we will see one later, but

100
00:06:48.721 --> 00:06:53.300
this also has to do more
with authorization.

101
00:06:53.300 --> 00:06:59.352
The idea is that, how a website will
give me credential information or

102
00:06:59.352 --> 00:07:02.560
metadata about current user.

103
00:07:02.560 --> 00:07:05.303
Well, is it a JSON?

104
00:07:05.303 --> 00:07:08.415
Is it like a comma separated value?

105
00:07:08.415 --> 00:07:13.041
Well, there is a standard known as
JSON Web Token that we will mention later,

106
00:07:13.041 --> 00:07:15.044
that is just typically a string.

107
00:07:15.044 --> 00:07:20.770
So it's a string that is kind
of encoded in this format.

108
00:07:20.770 --> 00:07:26.418
So it's a format where we can encode
metadata for credentials, okay?

109
00:07:26.418 --> 00:07:28.450
So that's JSON Web Token.

110
00:07:28.450 --> 00:07:34.562
One Time Password, OTP, okay, is another
term that we may be using later.

111
00:07:34.562 --> 00:07:38.830
This is when you receive a code by SMS or
a code by email that then you need to copy

112
00:07:38.830 --> 00:07:42.179
and paste in the website to
confirm that that's your phone or

113
00:07:42.179 --> 00:07:43.637
that your email address.

114
00:07:43.637 --> 00:07:47.743
Well, that's that's known as OTP,
One Time Password, okay?

115
00:07:47.743 --> 00:07:50.849
And the OTP concept is
also used these days for

116
00:07:50.849 --> 00:07:54.956
something that we will mention
later known as magic links.

117
00:07:54.956 --> 00:07:56.657
Have you heard about magic links?

118
00:07:56.657 --> 00:08:00.748
Like when you get to your website and some
websites are offering you a magic link.

119
00:08:00.748 --> 00:08:02.419
And there you wonder, what's a magic link?

120
00:08:02.419 --> 00:08:05.385
Well, a way to login into
the website without the password.

121
00:08:05.385 --> 00:08:08.705
So it's one of the password
less mechanisms these days.

122
00:08:08.705 --> 00:08:12.215
And it's using this idea
known as One Time Password.

123
00:08:12.215 --> 00:08:14.645
And by the way, I'm not sure if
you know there is an API today.

124
00:08:14.645 --> 00:08:19.160
It's called Web OTP that
we may mention later.

125
00:08:19.160 --> 00:08:23.819
So it's an API where you
can actually in JavaScript,

126
00:08:23.819 --> 00:08:28.800
you can read SMSS that are coming
using OTP with the code.

127
00:08:28.800 --> 00:08:31.030
So you can read the code in JavaScript.

128
00:08:31.030 --> 00:08:35.763
So you don't need to wait for the user
to open the messages' app and copy and

129
00:08:35.763 --> 00:08:37.600
paste the code.

130
00:08:37.600 --> 00:08:42.822
JavaScript can actually read the code
if you follow some guidelines,

131
00:08:42.822 --> 00:08:44.157
that's web OTP.

132
00:08:44.157 --> 00:08:50.189
And finally, the last concept
we will mention this many times,

133
00:08:50.189 --> 00:08:52.774
Public Key Cryptography.

134
00:08:52.774 --> 00:08:56.163
So, the idea here is that maybe
you have heard about this,

135
00:08:56.163 --> 00:08:59.310
I'm not sure if you
understand how that works.

136
00:08:59.310 --> 00:09:05.246
We are not going to get here
today too deep into the internals

137
00:09:05.246 --> 00:09:11.547
on how this these things works
internally or mathematically.

138
00:09:11.547 --> 00:09:16.518
But actually what happens is that,
we will create two keys, a public key and

139
00:09:16.518 --> 00:09:20.646
a private key that they are tied
together with some algorithm.

140
00:09:20.646 --> 00:09:24.594
And the public key can be public,
so it can be anywhere,

141
00:09:24.594 --> 00:09:28.129
it can be in local storage in a server,
anywhere.

142
00:09:28.129 --> 00:09:31.716
And the private key is actually
the one that is secret and

143
00:09:31.716 --> 00:09:33.890
no one will actually get, okay?

144
00:09:33.890 --> 00:09:41.580
So, we will see this in action later and
how it works with authentication.

145
00:09:41.580 --> 00:09:44.070
Do you have any questions at this
point on any of these concepts?

146
00:09:44.070 --> 00:09:44.570
Yeah.

147
00:09:44.570 --> 00:09:48.690
&gt;&gt; Is a touch ID or fingerprint scanner
needed to test biometric authentication?

148
00:09:50.300 --> 00:09:55.840
&gt;&gt; Well, by definition biometric
means it's something about your body.

149
00:09:55.840 --> 00:09:58.816
So if the question is,
do we need to have a device for

150
00:09:58.816 --> 00:10:03.613
today's workshop to actually test that,
the answer is no, we don't need that.

151
00:10:03.613 --> 00:10:08.396
In fact, we will see that the API
that let us use biometrics also

152
00:10:08.396 --> 00:10:12.376
works with other ideas,
not just with biometrics.

153
00:10:12.376 --> 00:10:16.758
So, you don't need to have like
a phone with fouch ID or face ID or

154
00:10:16.758 --> 00:10:19.446
Androids biometric authentication.

155
00:10:19.446 --> 00:10:22.260
You don't need that to test the code,
okay?

156
00:10:22.260 --> 00:10:25.420
You will be able to test the code
with other techniques anyway.

157
00:10:25.420 --> 00:10:29.685
And also we will talk about simulation and
debugging tools later.

