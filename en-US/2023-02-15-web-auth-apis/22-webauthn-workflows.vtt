WEBVTT

1
00:00:00.130 --> 00:00:05.553
Well, this is the original diagram
of how web authentication works.

2
00:00:05.553 --> 00:00:10.048
So it can be you have a relying party,
and who is the relying party?

3
00:00:10.048 --> 00:00:16.713
We are, our server, our backend is the
relying party, okay, the relying party.

4
00:00:16.713 --> 00:00:20.403
So then the relying party
talks with the client,

5
00:00:20.403 --> 00:00:24.367
the client is the browser,
using the WebAuthn API.

6
00:00:24.367 --> 00:00:28.448
So this is one of the diagram from Yubico,
the one of the keys.

7
00:00:28.448 --> 00:00:32.312
By the way, Yubico, the keys manufacturer,

8
00:00:32.312 --> 00:00:38.670
is one of the original editors of
the FIDO2 alliance that created this API.

9
00:00:40.090 --> 00:00:46.960
The relying party, okay, is one of these
non-common words here in the web world.

10
00:00:46.960 --> 00:00:48.090
Who is the relying party?

11
00:00:48.090 --> 00:00:52.175
Well, we are,
our backend is the relying party.

12
00:00:52.175 --> 00:00:57.219
So every time you read about relying
party, that's the backend, okay?

13
00:00:57.219 --> 00:01:01.528
And the relying party is
requesting somehow or

14
00:01:01.528 --> 00:01:07.172
with the help of the client,
okay, that it's the browser.

15
00:01:07.172 --> 00:01:10.024
But you can see this application as well,

16
00:01:10.024 --> 00:01:13.705
because WebAuthn is also available for
native apps.

17
00:01:13.705 --> 00:01:16.996
Even if it's web,
it's available for native apps.

18
00:01:16.996 --> 00:01:19.702
Because it's not just client base,

19
00:01:19.702 --> 00:01:24.165
it's actually a solution that
relies on the relying party.

20
00:01:24.165 --> 00:01:25.902
It needs the backend, so

21
00:01:25.902 --> 00:01:31.100
we need to do something special
in the backend so it will work.

22
00:01:31.100 --> 00:01:35.038
And then the client or the platform
can use an internal authenticator or

23
00:01:35.038 --> 00:01:37.320
it can use an external authenticator.

24
00:01:37.320 --> 00:01:40.110
So it can be a USB key or

25
00:01:40.110 --> 00:01:45.237
it can be like your finger or your face.

26
00:01:45.237 --> 00:01:47.454
And by the way, by external,

27
00:01:47.454 --> 00:01:53.060
typically you will see a USB key as
an example, but it can be a phone as well.

28
00:01:54.380 --> 00:01:58.857
Some of you ask this morning
what happens with passkeys,

29
00:01:58.857 --> 00:02:01.477
we were talking about passkeys.

30
00:02:01.477 --> 00:02:05.940
And by the way, spoiler,
passkeys are based on web authentication.

31
00:02:05.940 --> 00:02:10.687
So how can I log in on Windows if I

32
00:02:10.687 --> 00:02:15.260
have my passkey saved in iOS?

33
00:02:16.370 --> 00:02:22.748
Well, through a QR code on Bluetooth,
both platforms will connect.

34
00:02:22.748 --> 00:02:27.886
In that case, your phone will act
as an external authenticator, okay?

35
00:02:27.886 --> 00:02:32.512
So it's not always a USB key,
it can be a phone that will

36
00:02:32.512 --> 00:02:37.150
provide the authentication for
web authentication.

37
00:02:38.550 --> 00:02:43.024
And typically, let me show you this first,
and then I go back to the dialog.

38
00:02:43.024 --> 00:02:45.431
Web authentication has two flows.

39
00:02:47.292 --> 00:02:51.438
Registration, so
you register a web authentication, or

40
00:02:51.438 --> 00:02:55.000
you authenticate,
that is going to be the login.

41
00:02:56.010 --> 00:03:00.091
And both are kind of very
similar in terms of the flow.

42
00:03:00.091 --> 00:03:04.946
The flow, so what happens in terms
of data coming from where to where?

43
00:03:04.946 --> 00:03:06.570
It's the same.

44
00:03:06.570 --> 00:03:10.701
We change a little bit the code
that we write on each flow, but

45
00:03:10.701 --> 00:03:15.830
then the process is similar,
and this is the process, okay?

46
00:03:15.830 --> 00:03:19.290
First, we are the user.

47
00:03:19.290 --> 00:03:26.511
The user goes to a relying in party, so
that is the user loads a website, okay?

48
00:03:26.511 --> 00:03:31.049
So the website has login with
web authentication, okay?

49
00:03:31.049 --> 00:03:37.582
So there is a button or something that
triggers login with web authentication.

50
00:03:37.582 --> 00:03:41.732
So the user chooses to
log in without password,

51
00:03:41.732 --> 00:03:46.829
that's kind of the idea,
okay, or register an account.

52
00:03:46.829 --> 00:03:54.384
In that moment, okay,
we go to step number 3, that is this one.

53
00:03:54.384 --> 00:03:59.071
The website asks the authenticator
to use a key pair,

54
00:03:59.071 --> 00:04:02.623
which it starts to sounds really weird.

55
00:04:02.623 --> 00:04:05.543
Okay, so
the website asks the authenticator.

56
00:04:05.543 --> 00:04:07.225
Who is the authenticator?

57
00:04:07.225 --> 00:04:10.779
It can be the platform authenticator or
it can be the USB key,

58
00:04:10.779 --> 00:04:13.135
an external authenticator.

59
00:04:13.135 --> 00:04:16.745
So you ask the API, okay?

60
00:04:16.745 --> 00:04:21.305
The thing is that there
is a process here going

61
00:04:21.305 --> 00:04:25.145
on that is like a double step process.

62
00:04:27.255 --> 00:04:32.984
So the client, the frontend will

63
00:04:32.984 --> 00:04:38.515
ask the server for a challenge.

64
00:04:38.515 --> 00:04:42.674
The challenge is,
let's say I'm simplifying the concept, but

65
00:04:42.674 --> 00:04:45.555
the challenge, it's a network challenge.

66
00:04:45.555 --> 00:04:48.240
Let's say it's like a math operation,
okay?

67
00:04:48.240 --> 00:04:51.054
So our backend is going to
create the challenge and

68
00:04:51.054 --> 00:04:53.920
it's going to sign the challenge.

69
00:04:53.920 --> 00:04:56.146
Because we are talking
about private keys and

70
00:04:56.146 --> 00:04:59.900
public keys here when we are talking
about web authentication.

71
00:04:59.900 --> 00:05:04.562
With that challenge,
the authenticator will ask

72
00:05:04.562 --> 00:05:09.640
the user to use a gesture
to authorize a key.

73
00:05:09.640 --> 00:05:13.017
It can create a key or it can use a key.

74
00:05:13.017 --> 00:05:17.150
It depends if we are registering or
we are authenticating the user.

75
00:05:18.310 --> 00:05:22.174
So that means the user will receive
a dialog, a pop-up saying, hey,

76
00:05:22.174 --> 00:05:25.270
put your face here,
put your finger, put your USB key.

77
00:05:26.510 --> 00:05:31.022
And if you authorize the operation,
okay, actually,

78
00:05:31.022 --> 00:05:35.918
the browser will sign that
challenge that the server sent and

79
00:05:35.918 --> 00:05:39.770
it's going to send
everything to the backend.

80
00:05:39.770 --> 00:05:44.000
We will send everything to the backend,
and the backend will verify,

81
00:05:44.000 --> 00:05:48.430
will decrypt that packet and
see if the challenge is correct.

82
00:05:48.430 --> 00:05:55.360
So I know that maybe you're not following
me because it's okay, but it's simpler.

83
00:05:55.360 --> 00:05:58.029
The idea is simple.

84
00:05:58.029 --> 00:06:02.953
The server will generate data and
it will sign the data.

85
00:06:02.953 --> 00:06:05.230
It goes to the authenticator.

86
00:06:05.230 --> 00:06:12.308
The authenticator will ask the user to
authenticate somehow, with the face, okay?

87
00:06:12.308 --> 00:06:16.701
If the user is granted, I mean,
the face is the user's face or

88
00:06:16.701 --> 00:06:20.926
the finger is user's finger,
then what will happen is that

89
00:06:20.926 --> 00:06:26.447
the authenticator will take that
challenge and will resolve the challenge.

90
00:06:26.447 --> 00:06:30.212
And it will send the public key,
the user's public key,

91
00:06:30.212 --> 00:06:32.180
that goes back to the server.

92
00:06:32.180 --> 00:06:37.011
And the server will actually open that
package, will decrypt the package.

93
00:06:37.011 --> 00:06:42.917
And it will verify that the authenticator
is who he's saying it is,

94
00:06:42.917 --> 00:06:48.626
or it's saying it is and
that the challenge was resolved, just,

95
00:06:50.621 --> 00:06:56.187
Trust that this was created
by security companies and

96
00:06:56.187 --> 00:07:02.626
they tried to solve all
the possible security issues, okay?

97
00:07:02.626 --> 00:07:07.867
So I know at this point, you still
don't understand exactly the process,

98
00:07:07.867 --> 00:07:10.542
but now we will write the code, okay?

99
00:07:10.542 --> 00:07:12.797
And we will see it in action.

100
00:07:12.797 --> 00:07:17.626
And then you will understand this double
process thing that happens with web

101
00:07:17.626 --> 00:07:19.293
authentication, okay?

102
00:07:19.293 --> 00:07:22.924
Both for registration and login, okay?

103
00:07:22.924 --> 00:07:28.531
I don't even wanna show you
the original web authentication flows,

104
00:07:28.531 --> 00:07:32.504
because they are so
complex to actually follow.

105
00:07:32.504 --> 00:07:37.030
I mean, as web developers,
we're not interested in so much detail.

106
00:07:37.030 --> 00:07:41.835
We wanna use the API, and we wanna
understand what goes on the server,

107
00:07:41.835 --> 00:07:46.247
what goes on the client,
in which order, what do we need to say?

108
00:07:46.247 --> 00:07:48.416
And actually, that's all we care.

109
00:07:48.416 --> 00:07:50.904
So we understand the process,
and that's all.

110
00:07:50.904 --> 00:07:56.225
But even if the term is web,
WebAuthn, the spec,

111
00:07:56.225 --> 00:08:03.380
the part that we care about is
only the relying party section.

112
00:08:03.380 --> 00:08:06.383
That is actually the smallest one,
fortunately.

113
00:08:06.383 --> 00:08:10.411
All the rest of the spec defines flows and

114
00:08:10.411 --> 00:08:14.925
information for platform authenticators.

115
00:08:14.925 --> 00:08:22.187
So for whoever is doing the browser or
for OS developers, not for us, okay?

116
00:08:22.187 --> 00:08:25.413
So that's why when you go to web
authentication, for example,

117
00:08:25.413 --> 00:08:29.358
there are a couple of websites where you
can read more about web authentication

118
00:08:29.358 --> 00:08:30.151
that are open.

119
00:08:30.151 --> 00:08:35.620
One is webauthn.guide, for example.

120
00:08:35.620 --> 00:08:39.255
When you look at here,
you have registration, here,

121
00:08:39.255 --> 00:08:41.450
you have some code, okay?

122
00:08:41.450 --> 00:08:45.770
But when you look at that,
sometimes when you read this,

123
00:08:45.770 --> 00:08:52.000
they have a lot of information that is not
so important for us at one point, okay?

124
00:08:52.000 --> 00:08:53.861
We will follow the information flow.

