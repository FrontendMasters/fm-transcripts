WEBVTT

1
00:00:00.000 --> 00:00:03.762
Again, this might be simple for
a lot of users, but

2
00:00:03.762 --> 00:00:07.974
yeah, maybe for some user,
may be new, the whole idea.

3
00:00:07.974 --> 00:00:09.049
So what's wrong right now?

4
00:00:09.049 --> 00:00:13.848
Well, I'm writing
the password in plain text,

5
00:00:13.848 --> 00:00:17.017
okay, which is not a good idea.

6
00:00:17.017 --> 00:00:21.700
Makes sense?
So if I write a user, then the password

7
00:00:21.700 --> 00:00:26.733
will be actually available
in my JSON file.

8
00:00:26.733 --> 00:00:31.269
I can see that, I'm the backend owner,
I can see all the passwords.

9
00:00:31.269 --> 00:00:33.973
So it doesn't look nice.

10
00:00:33.973 --> 00:00:36.921
Okay, can we hash it?

11
00:00:36.921 --> 00:00:43.042
Remember the hash operation means it's
typically one-way method to encrypt

12
00:00:43.042 --> 00:00:48.710
the data, that if you have the hash,
you cannot go back to the password.

13
00:00:48.710 --> 00:00:54.200
But as we mentioned before,
that's not 100% true.

14
00:00:54.200 --> 00:00:59.453
Mostly, when we are hashing
passwords created by the user,

15
00:00:59.453 --> 00:01:03.686
that may be similar to
other users' passwords.

16
00:01:03.686 --> 00:01:09.067
And then there are databases of hashes
out there that can actually get,

17
00:01:09.067 --> 00:01:13.203
not 100% of the passwords but
a lot of them, okay?

18
00:01:13.203 --> 00:01:16.402
So to hash the password,
so let's change that.

19
00:01:16.402 --> 00:01:21.464
So instead of password,
we're going to write the hash password,

20
00:01:22.592 --> 00:01:26.272
Okay, that we need to
create somehow first.

21
00:01:26.272 --> 00:01:30.940
So for that, we are going to use another
library that is already in the dependency,

22
00:01:30.940 --> 00:01:34.424
and it's already imported here,
it's ready to use, okay?

23
00:01:34.424 --> 00:01:36.089
It's called bcrypt.

24
00:01:36.089 --> 00:01:40.189
It's an npm, it's open source, it's all
the dependencies we are going to use.

25
00:01:40.189 --> 00:01:44.301
So to import this, we actually need,

26
00:01:44.301 --> 00:01:48.163
first, something known as a salt.

27
00:01:48.163 --> 00:01:55.102
I am not going to be so
deep into the security part on this.

28
00:01:55.102 --> 00:02:01.389
So we're going to generate the salt
synchronously with 10 rounds.

29
00:02:01.389 --> 00:02:03.751
And you say, okay, what's that?

30
00:02:03.751 --> 00:02:07.251
This has to do with random numbers and
seeds.

31
00:02:07.251 --> 00:02:10.863
I'm not sure if you have ever
been in that area, okay,

32
00:02:10.863 --> 00:02:14.101
of computer programming,
or how random works.

33
00:02:14.101 --> 00:02:16.844
It's kind of how the random
is been generated.

34
00:02:16.844 --> 00:02:19.360
Don't worry, we just create the salt.

35
00:02:19.360 --> 00:02:22.802
And with the salt,
we can actually create that hash password.

36
00:02:22.802 --> 00:02:25.144
And it's basically talking to bcrypt.

37
00:02:25.144 --> 00:02:29.519
We're going to say hashSync
because this one is asynchronous.

38
00:02:29.519 --> 00:02:33.646
Why I'm not using the asynchronous API,
I could, but

39
00:02:33.646 --> 00:02:38.237
you simplify a little bit the code,
I'm using the sync API.

40
00:02:38.237 --> 00:02:43.099
So we don't need to deal with
responses in the async world.

41
00:02:43.099 --> 00:02:46.717
HTTP response with the async
world are not so simple, okay?

42
00:02:46.717 --> 00:02:51.295
So many way, just to make
the code cleaner to understand.

43
00:02:51.295 --> 00:02:56.056
So we're going to take the password
that is coming from the body and

44
00:02:56.056 --> 00:03:01.340
the salt that we have just created,
and that's going to give us a string.

45
00:03:01.340 --> 00:03:06.298
It's a text, so the result is a text, not
an array buffer or something like that.

46
00:03:06.298 --> 00:03:11.710
It's a text, and that's what we're
going to save in the database.

47
00:03:11.710 --> 00:03:18.097
So if someone is hacking my server and
getting the database, so

48
00:03:18.097 --> 00:03:24.491
he or she will get not the password
as plain text, but as a hash.

49
00:03:24.491 --> 00:03:25.591
It's better.

50
00:03:25.591 --> 00:03:29.822
It's not 100% secure, but
better than not having a hash.

51
00:03:32.099 --> 00:03:35.681
That means that now,
you cannot see the password,

52
00:03:35.681 --> 00:03:38.439
you cannot send the password by email.

53
00:03:38.439 --> 00:03:46.994
If you have a recover password,
now it's more a reset password, Okay?

54
00:03:46.994 --> 00:03:47.608
Make sense?

55
00:03:50.945 --> 00:03:53.850
And that's for now, despite the TODO for

56
00:03:53.850 --> 00:03:58.997
Data Validation that we're not doing,
the rest, I think, it's fine.

57
00:04:01.744 --> 00:04:07.917
And just because we are here,
we can also create the endpoint for login.

58
00:04:07.917 --> 00:04:15.375
So it's also a post, and
the route will be auth/login.

59
00:04:15.375 --> 00:04:19.093
Request response is always the same thing.

60
00:04:19.093 --> 00:04:20.436
I'm old school, so

61
00:04:20.436 --> 00:04:25.339
you will see I'm using the semicolons
[LAUGH] all the time, is in my brain.

62
00:04:25.339 --> 00:04:30.139
So unless I'm writing Swift or
Kotlin, where it's not mandatory,

63
00:04:30.139 --> 00:04:33.627
yeah, in shell script,
I tend to use semicolon.

64
00:04:33.627 --> 00:04:37.211
So if you don't like them,
that's okay, you can remove them.

65
00:04:37.211 --> 00:04:43.690
At least on Node.js, on client side,
it might be a problem when you're using,

66
00:04:43.690 --> 00:04:49.147
it depends on the library that
you're using to compress your code.

67
00:04:49.147 --> 00:04:52.838
Okay, anyway, just a quick tip.

68
00:04:52.838 --> 00:05:00.572
Well, for the login, so what we need to
first check is if the user exists, okay?

69
00:05:00.572 --> 00:05:05.311
So let's see if we have a userFound.

70
00:05:05.311 --> 00:05:10.215
And we can call the same findUser
library that we did before,

71
00:05:10.215 --> 00:05:13.401
taking from the body the email, okay?

72
00:05:13.401 --> 00:05:18.584
And if the user is found,
we should check credentials,

73
00:05:18.584 --> 00:05:21.464
so check the password, okay?

74
00:05:21.464 --> 00:05:24.781
So User Found, we check the password.

75
00:05:24.781 --> 00:05:27.183
But before, I wanna see, or

76
00:05:27.183 --> 00:05:32.100
I wanna discuss with you what
to do if the user is not found.

77
00:05:32.100 --> 00:05:32.769
What do you think?

78
00:05:32.769 --> 00:05:35.741
What should we do?

79
00:05:35.741 --> 00:05:38.793
Yeah, the user does not exist
with that email address, okay?

80
00:05:38.793 --> 00:05:42.851
So of course, we are going to send
a message saying, we're going to respond.

81
00:05:42.851 --> 00:05:49.753
It can be with a sendStatus with an error,
okay, with a code number,

82
00:05:49.753 --> 00:05:55.113
or it can be just as we did with register,
ok, false.

83
00:05:55.113 --> 00:05:57.066
But what about the error message?

84
00:05:57.066 --> 00:05:59.809
Should we say the account doesn't exist?

85
00:06:02.821 --> 00:06:06.316
Check your email or something,
Check your email address.

86
00:06:08.164 --> 00:06:11.454
That was actually pretty common for
a while, okay?

87
00:06:11.454 --> 00:06:14.273
But today, it's a bad idea.

88
00:06:14.273 --> 00:06:14.971
Why?

89
00:06:14.971 --> 00:06:18.379
I mean, if you have that, it's okay.

90
00:06:18.379 --> 00:06:21.899
I mean, it's okay,
it's not the worst of the problems.

91
00:06:21.899 --> 00:06:28.619
But the problem is that a hacker that is
trying to attack your database can now

92
00:06:28.619 --> 00:06:35.239
try a list of email addresses to see
which one has an account with you first.

93
00:06:35.239 --> 00:06:39.880
Okay, so
it can filter his list of email addresses,

94
00:06:39.880 --> 00:06:45.904
because now you're telling him who
has an account with you, okay?

95
00:06:45.904 --> 00:06:49.676
So it's better to just say
that credentials are wrong or

96
00:06:49.676 --> 00:06:54.747
some generic message that you will return,
also is the password is wrong.

97
00:06:54.747 --> 00:07:01.054
So then whoever is calling your API will
not know if, credentials are wrong, but

98
00:07:01.054 --> 00:07:07.760
they don't know if it's because the email
is wrong or because the password is wrong.

99
00:07:07.760 --> 00:07:11.616
So the email is okay, he has an account,
that email has an account, but

100
00:07:11.616 --> 00:07:12.919
the password is wrong.

101
00:07:12.919 --> 00:07:17.173
So credentials are wrong or whatever.

102
00:07:17.173 --> 00:07:22.989
And that's the generic message,
and that's a better idea, okay?

103
00:07:22.989 --> 00:07:25.425
Again, if you have it, it's okay.

104
00:07:25.425 --> 00:07:30.166
But if you don't provide that information,

105
00:07:30.166 --> 00:07:34.532
okay, you are removing a percentage of,

106
00:07:34.532 --> 00:07:38.540
we are reducing the risk a little bit.

107
00:07:38.540 --> 00:07:44.116
And reducing risk is always
mother of making a lot of things.

108
00:07:44.116 --> 00:07:48.036
And you'll reduce here a little bit
another here, another here, another here.

109
00:07:48.036 --> 00:07:53.586
Okay, we are trying to reduce
the risk of our data to be breached.

110
00:07:53.586 --> 00:07:57.028
Okay, and if the user is found,
well, what do you need to do?

111
00:07:57.028 --> 00:07:58.349
We just check the password.

112
00:07:58.349 --> 00:07:59.757
Should we compare?

113
00:07:59.757 --> 00:08:03.293
So we have the userFound.password.

114
00:08:03.293 --> 00:08:07.746
Should we compare like this the password
that is coming from the form,

115
00:08:07.746 --> 00:08:09.109
from the login form?

116
00:08:09.109 --> 00:08:10.378
What do you think about this?

117
00:08:14.733 --> 00:08:20.401
We have a problem,
is that our store password is hashed.

118
00:08:20.401 --> 00:08:25.926
&gt;&gt; So I don't have the original
password to just compare as a strings.

119
00:08:25.926 --> 00:08:26.447
Makes sense?

120
00:08:26.447 --> 00:08:29.753
So this is the password
that the user has typed.

121
00:08:29.753 --> 00:08:32.077
So it's the password, but

122
00:08:32.077 --> 00:08:38.048
this one is hash because we saved
here at the bottom a hashed password.

123
00:08:38.048 --> 00:08:41.687
So comparison will always
be false at this point.

124
00:08:41.687 --> 00:08:46.415
So to solve the problem, what we're going
to do is we're going to call another

125
00:08:46.415 --> 00:08:50.446
function for bcrypt, for
our library, that's called compare.

126
00:08:50.446 --> 00:08:54.451
So we are going to compare synchronously.

127
00:08:54.451 --> 00:08:55.605
We pass first.

128
00:08:55.605 --> 00:08:59.273
First, we need to pass
the password without the hash,

129
00:08:59.273 --> 00:09:01.364
and then the hashed password.

130
00:09:01.364 --> 00:09:04.030
So we need to reverse
the order of what I wrote.

131
00:09:04.030 --> 00:09:07.524
So it's userFound.password.

132
00:09:07.524 --> 00:09:12.642
First, the one that is not hashed, and as
a second argument, the one that is hashed.

133
00:09:12.642 --> 00:09:15.324
And if they are okay,
it will give me a true.

134
00:09:15.324 --> 00:09:18.393
So now I will respond with ok: true.

135
00:09:18.393 --> 00:09:21.230
So the login was successful.

136
00:09:21.230 --> 00:09:23.009
And if not, again,

137
00:09:23.009 --> 00:09:28.576
I will use the same error message
as when the user was not found.

138
00:09:28.576 --> 00:09:34.395
So then an attacker will never
know what happened, okay?

139
00:09:34.395 --> 00:09:39.449
And a login API typically also need to

140
00:09:39.449 --> 00:09:44.838
respond with the current user, okay?

141
00:09:44.838 --> 00:09:49.358
With the data, like the name,
the email, because typically,

142
00:09:49.358 --> 00:09:54.313
the user interface, the client
typically needs to render your name.

143
00:09:54.313 --> 00:09:55.927
Hello, Max.

144
00:09:55.927 --> 00:09:59.765
Okay, so typically,
we pass here some data.

145
00:09:59.765 --> 00:10:03.949
I can pass the name from the userFound and
the email.

146
00:10:03.949 --> 00:10:09.698
Public data only, don't send the hash
password, or don't send the whole object.

147
00:10:09.698 --> 00:10:14.845
I've seen that a lot, big,
big security problem that a developer is

148
00:10:14.845 --> 00:10:20.376
taking the object from the database and
sending the object to the client.

149
00:10:20.376 --> 00:10:24.620
And now, sometimes it will contain
private data, your private ID.

150
00:10:24.620 --> 00:10:27.658
And maybe in the future,
you add more APIs or more things to that,

151
00:10:27.658 --> 00:10:29.492
you attach more things to that object.

152
00:10:29.492 --> 00:10:32.981
And now,
the client will get that information.

153
00:10:32.981 --> 00:10:37.014
So no, don't do that, okay?

154
00:10:37.014 --> 00:10:44.429
So that's our code for
login and registering.

155
00:10:44.429 --> 00:10:48.265
The last part that we need
is to connect the client.

156
00:10:48.265 --> 00:10:52.713
So we go to the public &gt; scripts &gt; API.js,
yes.

157
00:10:52.713 --> 00:11:00.147
&gt;&gt; Why are you sending the password value
for the email property in the response?

158
00:11:00.147 --> 00:11:01.180
&gt;&gt; Let me see.

159
00:11:01.180 --> 00:11:03.728
&gt;&gt; Line 43.

160
00:11:03.728 --> 00:11:05.831
&gt;&gt; The email, this one?

161
00:11:05.831 --> 00:11:07.206
Yeah, why?

162
00:11:07.206 --> 00:11:08.235
Because it's wrong.

163
00:11:08.235 --> 00:11:11.718
So thank you for that,
is not the password.

164
00:11:11.718 --> 00:11:14.067
That happens typically
when you're teaching,

165
00:11:14.067 --> 00:11:16.817
because you're saying
something about something, and

166
00:11:16.817 --> 00:11:20.440
your brain is typing at the same time,
and sometimes, yeah, you mess up.

167
00:11:20.440 --> 00:11:22.547
So thank you for that.

168
00:11:22.547 --> 00:11:24.207
Is the email, not the password.

169
00:11:24.207 --> 00:11:31.459
So now, in the API, what I need to do
is here add the API client side part.

170
00:11:31.459 --> 00:11:33.834
So for example,
I will have a login function.

171
00:11:33.834 --> 00:11:37.360
If you don't like to use this syntax,
use wherever syntax you want.

172
00:11:37.360 --> 00:11:42.053
I'm using a syntax, I'm using a code that
I know will work on every browser without

173
00:11:42.053 --> 00:11:46.027
transpiling this code,
without passing this through Babel, okay?

174
00:11:46.027 --> 00:11:49.728
So I don't have any build
process in my client-side code,

175
00:11:49.728 --> 00:11:54.402
so I'm just writing code that I know
will work on every browser these days.

176
00:11:54.402 --> 00:11:57.491
So I'm creating an async function.

177
00:11:57.491 --> 00:12:02.951
And the idea will be to call
the makePostRequest, okay?

178
00:12:02.951 --> 00:12:06.776
And because this is async as well,
I'm going to await.

179
00:12:06.776 --> 00:12:14.111
So I'm going to return awaiting for
API makePostRequest.

180
00:12:14.111 --> 00:12:18.959
The endpoint is just a prefix that you
might change later in case you move this

181
00:12:18.959 --> 00:12:22.083
to a different server,
or something like that.

182
00:12:22.083 --> 00:12:28.268
So I will take the endpoint, and
I will concatenate the login name.

183
00:12:28.268 --> 00:12:30.736
And that's the data, okay?

184
00:12:30.736 --> 00:12:35.017
I'm going to send the user
that I receive as an argument.

185
00:12:35.017 --> 00:12:37.458
So I receive a user as an argument,

186
00:12:37.458 --> 00:12:41.257
that's an object that I will
populate with the form.

187
00:12:41.257 --> 00:12:46.148
And I'm sending that through post, okay?

188
00:12:46.148 --> 00:12:49.824
And something similar
is actually register.

189
00:12:49.824 --> 00:12:51.817
So I receive also a user object.

190
00:12:54.650 --> 00:12:59.732
And it's going to be pretty much the same
thing, but changing the endpoint.

191
00:12:59.732 --> 00:13:05.625
Making a post request to
endpoint plus register,

192
00:13:05.625 --> 00:13:10.407
and then I pass this user as an argument.

193
00:13:10.407 --> 00:13:13.683
For now, we have only these two endpoints.

194
00:13:13.683 --> 00:13:15.440
I know that for some, well,

195
00:13:15.440 --> 00:13:20.580
this way of coding seems a little scary
because it seems like blind coding, right?

196
00:13:20.580 --> 00:13:23.345
Because we haven't tested anything,
and it's like, ooh,

197
00:13:23.345 --> 00:13:26.444
we are writing out of code and
we haven't seen it, and it is working.

198
00:13:26.444 --> 00:13:27.658
Well, we'll see later.

