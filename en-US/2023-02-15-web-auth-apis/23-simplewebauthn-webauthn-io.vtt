WEBVTT

1
00:00:00.100 --> 00:00:04.000
We are going to use a library for
using this.

2
00:00:04.000 --> 00:00:09.960
In fact, to use WebAuthn,
you have three options.

3
00:00:09.960 --> 00:00:12.420
Yeah, let's say three options.

4
00:00:12.420 --> 00:00:16.270
You can write everything your own low
level, and you don't want to do that.

5
00:00:16.270 --> 00:00:21.477
No one is going to do that because it
involves cryptography, APIs, okay?

6
00:00:21.477 --> 00:00:25.090
A lot of things that,
yeah, we as web developers,

7
00:00:25.090 --> 00:00:29.630
it's not something that we
manage on a daily base.

8
00:00:29.630 --> 00:00:34.153
The other one is to use an identity
as a service provider and

9
00:00:34.153 --> 00:00:37.900
then we actually don't care too much.

10
00:00:37.900 --> 00:00:39.486
We just enable the setting.

11
00:00:39.486 --> 00:00:45.590
In Auth0, and yeah, we have WebAuthn.

12
00:00:45.590 --> 00:00:51.326
And the third one is to use a library
that is probably going to be the most

13
00:00:51.326 --> 00:00:57.670
common solution when you're creating
your own authentication mechanism.

14
00:00:57.670 --> 00:01:01.931
When you're doing that, well,
there are many libraries.

15
00:01:01.931 --> 00:01:06.608
I try all of them, all the open
source libraries out there for

16
00:01:06.608 --> 00:01:11.160
Node.js, and
I think this one is the best one, okay?

17
00:01:11.160 --> 00:01:13.592
And also the one that is updated, and

18
00:01:13.592 --> 00:01:18.160
is following the browser's updates
It's simple WebAuthn, okay?

19
00:01:18.160 --> 00:01:20.000
And it's pretty good.

20
00:01:20.000 --> 00:01:21.420
And it has actually two libraries.

21
00:01:21.420 --> 00:01:23.930
A client side library and
a server library.

22
00:01:23.930 --> 00:01:26.907
So it has the wrapper on top of the and

23
00:01:26.907 --> 00:01:31.186
also it's doing all the heavy work,
on the back-end, okay?

24
00:01:31.186 --> 00:01:32.930
All the crypto thing.

25
00:01:32.930 --> 00:01:33.990
Creating the challenge.

26
00:01:33.990 --> 00:01:35.650
Verifying the challenge.

27
00:01:35.650 --> 00:01:41.090
Decrypting, encrypting, it's complete
transparent to us okay, make sense?

28
00:01:41.090 --> 00:01:45.568
So we are going to use that library
to create that into our project.

29
00:01:45.568 --> 00:01:48.289
Make sense?

30
00:01:48.289 --> 00:01:51.894
So before actually writing code,

31
00:01:51.894 --> 00:01:56.516
let's open this website, WebAuthn .io.

32
00:01:56.516 --> 00:02:01.269
WebAuthn.io let you show this in action so
we can see it's in action as a user.

33
00:02:03.640 --> 00:02:04.288
Okay?
So

34
00:02:04.288 --> 00:02:09.040
they have a solution that they're
not saving anything in the backend.

35
00:02:09.040 --> 00:02:10.960
So everything happens line side.

36
00:02:10.960 --> 00:02:15.940
So here you put username, okay?

37
00:02:15.940 --> 00:02:19.790
And then you say, okay,
you wanna register.

38
00:02:19.790 --> 00:02:22.660
First you register and then you log in.

39
00:02:22.660 --> 00:02:24.620
The flow is the same as usual.

40
00:02:24.620 --> 00:02:29.604
When I register this,
you can see it appears this

41
00:02:29.604 --> 00:02:33.981
dialogue that I'm using macOS Ventura and

42
00:02:33.981 --> 00:02:41.260
because of that WebAuthn now
says directly the term passkey.

43
00:02:41.260 --> 00:02:42.540
In fact, let me tell you something.

44
00:02:42.540 --> 00:02:46.524
We haven't mentioned passkeys
officially in the slides yet,

45
00:02:46.524 --> 00:02:49.096
more than mentioning a couple of times.

46
00:02:49.096 --> 00:02:54.670
But passkey is becoming the name for
WebAuthn.

47
00:02:55.910 --> 00:03:00.694
So no matter if we are following the
passkey design pattern that we will see in

48
00:03:00.694 --> 00:03:01.384
a minute.

49
00:03:01.384 --> 00:03:05.328
So even if you're using WebAuthn for
two-factor authentication,

50
00:03:05.328 --> 00:03:07.780
it's going to be called a passkey, okay?

51
00:03:08.880 --> 00:03:11.790
So, because the OS is passkey now for
everything.

52
00:03:11.790 --> 00:03:15.600
If you have the previous version of
Safari, you will see it's different.

53
00:03:15.600 --> 00:03:18.110
The wording is different.

54
00:03:18.110 --> 00:03:20.850
So, do you want to save a passkey for
frontend masters?

55
00:03:20.850 --> 00:03:25.910
So, if I use my touch here,
my touch ID, okay, done.

56
00:03:25.910 --> 00:03:31.171
So now it says, well, I think it
was aborted because I aborted or

57
00:03:31.171 --> 00:03:35.250
initially, so let me try again done.

58
00:03:35.250 --> 00:03:36.790
Okay, there.

59
00:03:36.790 --> 00:03:39.010
So now I can authenticate.

60
00:03:39.010 --> 00:03:40.010
And what's the deal?

61
00:03:40.010 --> 00:03:44.060
Now I can sign in,
you'll see my saved passkey.

62
00:03:45.460 --> 00:03:46.778
So I use my finger again.

63
00:03:48.997 --> 00:03:51.717
And now it's done and yeah, I'm logged in.

64
00:03:54.040 --> 00:03:57.010
Okay, that's the user flow.

65
00:03:57.010 --> 00:04:00.210
And by the way, what happens
on other browsers like Chrome?

66
00:04:00.210 --> 00:04:01.100
Well, let's try.

67
00:04:02.870 --> 00:04:07.650
So I'm going to Chrome,

68
00:04:07.650 --> 00:04:10.850
WebAuthn.io.

69
00:04:10.850 --> 00:04:15.940
Again, the same, I need a username.

70
00:04:15.940 --> 00:04:17.634
I will register this.

71
00:04:21.439 --> 00:04:22.970
And this is what you see.

72
00:04:22.970 --> 00:04:25.120
Look at the UI, completely different.

73
00:04:25.120 --> 00:04:31.600
So, in this case, it says hey,
how do you want to save a FIDO2 or

74
00:04:31.600 --> 00:04:36.790
platform authenticator authentication?

75
00:04:36.790 --> 00:04:39.441
I can use a phone with a QR code.

76
00:04:39.441 --> 00:04:43.811
I can use a USB security key,
this device or a Pixel 3,

77
00:04:43.811 --> 00:04:48.760
that's a phone that I have in my backpack,
an Android phone.

78
00:04:49.990 --> 00:04:53.520
If I use this device,
it's asking me for touch ID.

79
00:04:55.100 --> 00:05:02.834
Okay, I think I took too much time
to actually make it work, yeah.

80
00:05:02.834 --> 00:05:09.220
But if I try and say use a phone,
I have a QR code.

81
00:05:09.220 --> 00:05:10.970
That QR code has started with Fido.

82
00:05:10.970 --> 00:05:11.850
Fido column.

83
00:05:12.950 --> 00:05:16.734
And I can try to use my iPhone so
I'm in Chrome there but

84
00:05:16.734 --> 00:05:19.694
I can open the camera on my iPhone, okay?

85
00:05:19.694 --> 00:05:21.874
And then I will receive a sheet.

86
00:05:21.874 --> 00:05:24.599
You're not going to see that no worries.

87
00:05:24.599 --> 00:05:29.061
But they will receive a sheet,
you can try the QR code by the way.

88
00:05:29.061 --> 00:05:34.460
And you will receive a sheet where
you can actually use your phone.

89
00:05:34.460 --> 00:05:40.537
And some people will say well, but if it's
a QR code, you can try over the wire.

90
00:05:40.537 --> 00:05:44.386
In fact,
if you are watching this course recorded,

91
00:05:44.386 --> 00:05:47.920
you're seeing the QR code on the screen.

92
00:05:47.920 --> 00:05:50.800
You may wanna try it, but you know what?

93
00:05:50.800 --> 00:05:53.010
It's not gonna work, why?

94
00:05:53.010 --> 00:05:57.500
Because this QR code
needs physical presence.

95
00:05:58.710 --> 00:06:01.060
You have to be here in my room.

96
00:06:01.060 --> 00:06:01.920
Why?

97
00:06:01.920 --> 00:06:06.420
Because the phone to actually make
that connection will use Bluetooth.

98
00:06:06.420 --> 00:06:07.270
To my device.

99
00:06:08.830 --> 00:06:15.840
Okay, so with this,
it's avoiding remote interaction.

100
00:06:15.840 --> 00:06:20.440
So someone from the outside that
can actually check me something.

101
00:06:20.440 --> 00:06:22.880
No, it has to be within Bluetooth range.

102
00:06:24.870 --> 00:06:26.550
Okay, make sense?

103
00:06:26.550 --> 00:06:31.020
So the idea is we register and
we then authenticate.

104
00:06:31.020 --> 00:06:36.070
And here you can see all
the options that you can decide.

105
00:06:36.070 --> 00:06:40.830
For example, discover a credential,
authentication attachment.

106
00:06:40.830 --> 00:06:45.300
For example, if you prefer cross-platform
or if you prefer platform.

107
00:06:45.300 --> 00:06:46.870
We'll talk about that later.

108
00:06:46.870 --> 00:06:50.830
But these aren't like require user
verification so you can disable that.

109
00:06:50.830 --> 00:06:53.020
So then you are okay.

110
00:06:53.020 --> 00:06:56.791
If it's a system that will
generate a pair of private and

111
00:06:56.791 --> 00:06:59.760
public key without user intervention.

112
00:06:59.760 --> 00:07:00.692
I'm okay with that.

113
00:07:00.692 --> 00:07:01.280
That's fine.

114
00:07:03.530 --> 00:07:04.460
Okay, make sense?

115
00:07:06.100 --> 00:07:08.830
So, this is just to test the API
from a user's perspective.

116
00:07:08.830 --> 00:07:14.500
If you try this on your phone,
you will see this directly on your phone.

117
00:07:14.500 --> 00:07:18.600
And by the way,
can I try this on a simulator?

118
00:07:20.060 --> 00:07:21.550
Like, for example, the iPhone simulator?

119
00:07:22.650 --> 00:07:25.060
Well, let me tell you this.

120
00:07:25.060 --> 00:07:29.060
It's working on iPhone simulator and
I will show you how to do that.

121
00:07:29.060 --> 00:07:33.391
On Android, because Android is still
some kind of a beta support for this,

122
00:07:33.391 --> 00:07:35.537
I will explain how that works later.

123
00:07:35.537 --> 00:07:38.761
It doesn't work so well,
it works only with USB keys, so

124
00:07:38.761 --> 00:07:40.950
with the Android emulator.

125
00:07:40.950 --> 00:07:45.994
But on iPhone I can go to this website,
WebAuthn.io.

126
00:07:45.994 --> 00:07:50.882
And now, by the way,
this is the iOS simulator that

127
00:07:50.882 --> 00:07:55.960
comes with Xcode only available for
the Mac.

128
00:07:55.960 --> 00:08:00.383
So you need a Mac and you need to
install Xcode that is available for

129
00:08:00.383 --> 00:08:02.970
free in the Mac App Store.

130
00:08:02.970 --> 00:08:07.245
So from here in the menu,
you can go in features, okay?

131
00:08:07.245 --> 00:08:13.230
There at the top, you can go to face ID
and you need to click first Enrolled.

132
00:08:14.260 --> 00:08:20.010
If you select Enrolled,
it will now simulate face ID or touch ID.

133
00:08:21.080 --> 00:08:27.780
Because it can be it can still be
an iPhone SE that has t ouch ID.

134
00:08:27.780 --> 00:08:33.990
Or an iPad that has touch ID here
at the side and not face ID, right?

135
00:08:35.070 --> 00:08:39.140
After you do that, now, for
example, I can try to register.

136
00:08:39.140 --> 00:08:42.420
So, we are frontend masters,
I will register.

137
00:08:44.590 --> 00:08:50.547
A key and now it's asking me for
a passkey, okay?

138
00:08:50.547 --> 00:08:53.766
If I say continue it says okay,
let's try a face ID.

139
00:08:53.766 --> 00:08:55.930
But yeah, I'm putting my face here and

140
00:08:55.930 --> 00:08:59.910
it doesn't work because it's
not a real iPhone, okay?

141
00:08:59.910 --> 00:09:05.249
So to simulate face ID or touch ID in
the simulator, you go again to features,

142
00:09:05.249 --> 00:09:09.870
Face ID, and you can select matching face,
or non matching face.

143
00:09:10.960 --> 00:09:13.970
So matching face will
actually simulate that.

144
00:09:13.970 --> 00:09:15.610
Yeah, it's my face.

145
00:09:15.610 --> 00:09:18.760
So now I can try to authenticate
using the same face.

146
00:09:21.190 --> 00:09:22.420
Okay, matching face.

147
00:09:23.980 --> 00:09:27.908
So for debugging this is pretty cool
because you can use just a simulator.

148
00:09:27.908 --> 00:09:31.730
You don't need a real device and
that works perfectly we look [INAUDIBLE].

149
00:09:33.500 --> 00:09:36.990
Okay, now after we set up our
project we worth indication.

150
00:09:36.990 --> 00:09:43.479
We will see what Chrome has as
a solution for us for debugging as well.

