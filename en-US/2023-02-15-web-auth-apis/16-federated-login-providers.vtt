WEBVTT

1
00:00:00.180 --> 00:00:02.400
So before talking about WebAuthn,

2
00:00:02.400 --> 00:00:05.952
that's the most important API
that we will cover today,

3
00:00:05.952 --> 00:00:11.860
let's talk a little bit and test federated
login, at least once, what is that?

4
00:00:11.860 --> 00:00:17.840
That using OAuth you can use
many providers, that is,

5
00:00:17.840 --> 00:00:23.300
login with GitHub,
login with LinkedIn, okay?

6
00:00:23.300 --> 00:00:28.163
But yeah, that's kind of I mean,
if you're using OAuth 2.0

7
00:00:28.163 --> 00:00:33.130
with single pages applications,
it's a little tricky, okay?

8
00:00:33.130 --> 00:00:38.657
Because you need to open a URL that is not
under your page, so it can be a pop up or

9
00:00:38.657 --> 00:00:44.160
you need to get out of your single
page application, then go back.

10
00:00:44.160 --> 00:00:48.821
But fortunately, there are a couple of
providers, actually two, Google and

11
00:00:48.821 --> 00:00:53.409
Apple, that they're providing already
a very simplified version of that,

12
00:00:53.409 --> 00:00:58.030
where you actually don't need
to implement OAuth yourself.

13
00:00:58.030 --> 00:00:59.790
One is sign in with Google.

14
00:00:59.790 --> 00:01:03.366
In this case, okay,
it's a whole system mechanisms

15
00:01:03.366 --> 00:01:08.340
just signing your website with
different techniques with Google.

16
00:01:08.340 --> 00:01:13.653
It depends on the browser that the user is
using and the platform if it's Android or

17
00:01:13.653 --> 00:01:17.118
if it Googly,
it's a Google based platform, note,

18
00:01:17.118 --> 00:01:22.290
the experience that you will get with
sign in with Google will be different.

19
00:01:22.290 --> 00:01:27.364
Okay, sign in with Apple
is also interesting, but

20
00:01:27.364 --> 00:01:35.310
we're not going to work with sign in
with Apple today for two reasons.

21
00:01:35.310 --> 00:01:38.160
The first one,
is that it doesn't work on local host.

22
00:01:39.160 --> 00:01:43.210
So testing it needs a server,
a real domain.

23
00:01:43.210 --> 00:01:45.300
So, a step that we are not taking today.

24
00:01:46.410 --> 00:01:49.980
And the second one, is that you
need an Apple developer account.

25
00:01:49.980 --> 00:01:54.420
That means you need to pay $99 per year.

26
00:01:54.420 --> 00:01:59.853
So, as the website owner, okay,
not as a user, as a website owner,

27
00:01:59.853 --> 00:02:05.475
you need to get some keys, to have
security things, that you need to get

28
00:02:05.475 --> 00:02:10.850
the same account as when you
are publishing apps to the App Store.

29
00:02:10.850 --> 00:02:13.848
Even if you are not publishing
any app to the App Store, okay,

30
00:02:13.848 --> 00:02:15.270
you need that account.

31
00:02:15.270 --> 00:02:19.930
I am not going to force you
into paying that account today.

32
00:02:19.930 --> 00:02:21.712
So that's why also there are not so

33
00:02:21.712 --> 00:02:24.910
many websites out there
with sign in with Apple.

34
00:02:24.910 --> 00:02:28.678
So when you compare how many websites
are using sign in with Apple,

35
00:02:28.678 --> 00:02:32.177
you will see that if you have
the largest one probably yes, but

36
00:02:32.177 --> 00:02:35.360
if you have a small website,
yeah, you don't do that.

37
00:02:36.810 --> 00:02:41.723
So, when you have sign in with
Google you see something like this,

38
00:02:41.723 --> 00:02:47.163
probably you have seen these kind of
pop ups and we're going to see those in

39
00:02:47.163 --> 00:02:52.455
our brochure in a minute and sign in
with Apple has an interesting idea.

40
00:02:52.455 --> 00:02:57.700
Implement that also, that's why you
also need to have an account with them.

41
00:02:57.700 --> 00:03:02.442
So it's a more complex process internally,

42
00:03:02.442 --> 00:03:06.933
because when you apply sign in with Apple,

43
00:03:06.933 --> 00:03:11.550
you're also applying for
this hide my email

44
00:03:11.550 --> 00:03:16.312
thing available in iOS and
Safari on the Mac.

45
00:03:16.312 --> 00:03:20.370
The idea is that when you're
implementing sign in with email,

46
00:03:20.370 --> 00:03:24.353
Safari will show you a native
dialog to the user, saying hey,

47
00:03:24.353 --> 00:03:28.810
do you wanna sign in with your Apple
account, your current account.

48
00:03:28.810 --> 00:03:34.414
And I will share your email with this guy,
with this provider,

49
00:03:34.414 --> 00:03:39.487
with this website or if you want,
I can create a fake ID for

50
00:03:39.487 --> 00:03:45.640
you for this website and it creates
a fake email, it hides my email.

51
00:03:45.640 --> 00:03:50.708
So it will give us as
a website an email that works,

52
00:03:50.708 --> 00:03:55.160
but that email goes through Apple.

53
00:03:55.160 --> 00:03:57.316
So it's an anonymous email.

54
00:03:57.316 --> 00:04:00.422
That then will be
forwarded to the user and

55
00:04:00.422 --> 00:04:05.922
the user at any time can say you know
what, I wanna delete that fake email,

56
00:04:05.922 --> 00:04:10.032
I don't wanna receive more
email from these website.

57
00:04:10.032 --> 00:04:12.881
So then as a user you delete that and

58
00:04:12.881 --> 00:04:17.310
of course the website we'll
never know who you was.

59
00:04:17.310 --> 00:04:19.489
Okay, so that's hides my email and

60
00:04:19.489 --> 00:04:23.820
it's available only if you
implement sign in with Apple.

61
00:04:23.820 --> 00:04:25.490
Okay, make sense?

62
00:04:25.490 --> 00:04:26.575
Yeah.

63
00:04:26.575 --> 00:04:32.670
&gt;&gt; Is OAuth also an identity
provider like OpenID or SAML?

64
00:04:32.670 --> 00:04:36.710
&gt;&gt; No, OAuth is some kind
of a slow protocol, okay?

65
00:04:36.710 --> 00:04:42.161
So the idea of OAuth version 2, that's
the one that everyone is using right now,

66
00:04:42.161 --> 00:04:46.610
it's not actually a way to identify or
authenticate users.

67
00:04:46.610 --> 00:04:50.946
It's more a way to move
identity information between

68
00:04:50.946 --> 00:04:53.910
different providers, okay?

69
00:04:53.910 --> 00:04:56.189
And it's one protocol available.

70
00:04:56.189 --> 00:05:02.191
So the quick idea, it has to do more with
authorization than with authentication,

71
00:05:02.191 --> 00:05:07.866
but the whole idea is that I'm in my
website, let's say coffeemaster.com.

72
00:05:07.866 --> 00:05:12.883
And I wanna open a login form but
in google.com, so

73
00:05:12.883 --> 00:05:19.546
I don't manage google.com,
I only manage coffeemasters.com.

74
00:05:19.546 --> 00:05:21.115
So how can we do that?

75
00:05:21.115 --> 00:05:25.760
How can we handshake,
how can I coffeemaster.com

76
00:05:25.760 --> 00:05:29.570
can have an agreement with google.com?

77
00:05:29.570 --> 00:05:34.671
So they will login you and
they will pass credentials to me,

78
00:05:34.671 --> 00:05:40.910
but that flow of data is of 2.0,
okay, so here's how you do that.

79
00:05:40.910 --> 00:05:45.960
It's one spec, actually the one that
is being used a lot these days.

80
00:05:45.960 --> 00:05:51.543
In fact lemme tell you something,
10 years ago, it was pretty common,

81
00:05:51.543 --> 00:05:56.510
you were actually logging in with Twitter,
with Google.

82
00:05:56.510 --> 00:06:02.197
In other websites and other apps and you
were actually typing your Google password,

83
00:06:02.197 --> 00:06:04.840
your Twitter password on other apps and

84
00:06:04.840 --> 00:06:11.280
they were storing in their servers your
Twitter password or your Google password.

85
00:06:11.280 --> 00:06:14.470
Of course that was a security issue, okay?

86
00:06:14.470 --> 00:06:19.065
Because when they have a data breach,
now they don't have only access to your

87
00:06:19.065 --> 00:06:23.942
Twitter account or to your account on that
website, but also Twitter or Google and

88
00:06:23.942 --> 00:06:26.580
your passwords were actually everywhere.

89
00:06:28.230 --> 00:06:33.910
Then the different providers
invented this idea of app passwords.

90
00:06:33.910 --> 00:06:38.090
I think that Google still has
that somewhere it's still hidden,

91
00:06:38.090 --> 00:06:42.124
with app passwords you can create
a password just from one app.

92
00:06:42.124 --> 00:06:48.327
So they can get into your account, but
it's a password just for that app and

93
00:06:48.327 --> 00:06:53.956
you can even narrow permissions if
someone is using that password.

94
00:06:53.956 --> 00:06:59.949
But anyway, to avoid that problem,
we came up with the solution of OAuth.

95
00:06:59.949 --> 00:07:05.076
We are not going to use OAuth, but we
are going to use sign in with Google right

96
00:07:05.076 --> 00:07:10.706
now, that will give us a simple way to do
that, so we can understand how that works.

97
00:07:10.706 --> 00:07:13.925
And how can we adjust our web services and

98
00:07:13.925 --> 00:07:17.528
our database to work
with federated logins.

99
00:07:17.528 --> 00:07:21.157
Okay then you can add
on top of that OAuth or

100
00:07:21.157 --> 00:07:24.801
sign in with Apple or any other provider.

