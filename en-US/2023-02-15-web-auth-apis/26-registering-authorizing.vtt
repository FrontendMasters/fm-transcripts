WEBVTT

1
00:00:00.300 --> 00:00:04.676
So now that we have the endpoints,
maybe the next step is to add this

2
00:00:04.676 --> 00:00:07.959
endpoint to APIJS,
we can continue with a copy and

3
00:00:07.959 --> 00:00:12.751
paste because it's actually most of
them are actually pretty similar.

4
00:00:12.751 --> 00:00:17.024
So I'm going to copy and
paste that within APIJS,

5
00:00:17.024 --> 00:00:21.702
like maybe here, in this case,
I did a whole object for

6
00:00:21.702 --> 00:00:25.994
all the endpoints just to
group them on webAuthn.

7
00:00:25.994 --> 00:00:29.918
So we have loginOptions,
loginVerification, registrationOptions,

8
00:00:29.918 --> 00:00:31.573
registrationVerification.

9
00:00:31.573 --> 00:00:37.000
And on verification, we are going to send
the email and the data that we received

10
00:00:37.000 --> 00:00:42.591
from the API from the webAuthn API, that's
the one that's going to be verified.

11
00:00:42.591 --> 00:00:46.244
And if everything is correct
is the one that we save in

12
00:00:46.244 --> 00:00:51.410
the backend, Okay, makes sense?

13
00:00:51.410 --> 00:00:55.940
So from an API endpoint point of view,
we are done.

14
00:00:55.940 --> 00:00:59.370
But we still need to understand how or

15
00:00:59.370 --> 00:01:03.907
when are we going to
integrate this into our PWA,

16
00:01:03.907 --> 00:01:08.630
our Web App, our authentication flow.

17
00:01:08.630 --> 00:01:13.655
So, one idea, it's not the only idea,
it's one idea,

18
00:01:13.655 --> 00:01:17.528
is that when we are logging
in a user that, or

19
00:01:17.528 --> 00:01:21.329
after we log in,
let me log in with Google.

20
00:01:21.329 --> 00:01:26.258
Here, we can add a button
that after we login for

21
00:01:26.258 --> 00:01:31.063
the first time or any time,
we can go on add a new

22
00:01:31.063 --> 00:01:36.260
authentication or passkey or
face ID or touch ID.

23
00:01:36.260 --> 00:01:37.310
So that's one way.

24
00:01:37.310 --> 00:01:41.633
So we register a webAuthn
process in this page,

25
00:01:41.633 --> 00:01:46.450
in the account page, does it makes sense?

26
00:01:46.450 --> 00:01:51.026
And then after we login,
so if I log out here,

27
00:01:51.026 --> 00:01:55.964
when I log in when I continue
while this is wrong,

28
00:01:55.964 --> 00:02:01.024
some reason m@m.com on
the next step if this user

29
00:02:01.024 --> 00:02:05.842
has face ID,
I can show here a button or an icon or

30
00:02:05.842 --> 00:02:10.540
something that says
instead of the password or

31
00:02:10.540 --> 00:02:15.770
along with the password
login with face ID.

32
00:02:15.770 --> 00:02:20.290
So, before actually doing that,
let me give you the bad news.

33
00:02:20.290 --> 00:02:28.098
The bad news is that the API
is authenticator agnostic.

34
00:02:28.098 --> 00:02:32.787
So it accepts many authenticators,
it can be a platform authenticator,

35
00:02:32.787 --> 00:02:37.715
Face ID, Touch ID, Windows Hello, or
it can be an external authenticator.

36
00:02:37.715 --> 00:02:41.444
But you don't know which
one the user has used, and

37
00:02:41.444 --> 00:02:44.411
you don't know which one is available.

38
00:02:44.411 --> 00:02:48.322
I mean,
you can check something in the API,

39
00:02:48.322 --> 00:02:52.465
but you will know if face is available,
okay?

40
00:02:52.465 --> 00:02:58.780
Or fingerprint is available to render
like a nice button saying touch or face.

41
00:02:58.780 --> 00:03:04.030
So to do that, unfortunately,
you need to do today at least

42
00:03:04.030 --> 00:03:09.073
some kind of user agent by
the device validation, okay?

43
00:03:09.073 --> 00:03:13.795
If it's an iPhone which iPhone
well in this has face ID so

44
00:03:13.795 --> 00:03:19.016
then you use a face ID button,
if it's a Mac you use Touch ID and

45
00:03:19.016 --> 00:03:25.260
if it's Chrome you can decide what to
do because it's multi system okay?

46
00:03:25.260 --> 00:03:30.470
So I mean if you want to be like
integrate it with OS you need

47
00:03:30.470 --> 00:03:36.895
to get into conditionals based on
the OS based on the browser and so on.

48
00:03:36.895 --> 00:03:43.670
So if you want to be multi platform
which has asked for web authentication,

49
00:03:43.670 --> 00:03:48.736
or the whole community is
going towards a name passkey.

50
00:03:48.736 --> 00:03:54.792
So, you will add a passkey,
that's the noun, that we are using for

51
00:03:54.792 --> 00:04:02.143
a way to log in in a website no matter how
you are going to create the passkey, okay?

52
00:04:02.143 --> 00:04:04.391
Make sense?

53
00:04:04.391 --> 00:04:10.070
Okay, so going back to the code,
let me make it work.

54
00:04:10.070 --> 00:04:13.520
So I'm going to index.html first, so

55
00:04:13.520 --> 00:04:18.540
let's add the buttons or
the button first to register.

56
00:04:18.540 --> 00:04:20.620
So I'm going to the account section.

57
00:04:20.620 --> 00:04:25.484
So I have a page here for
the account and before the logout or

58
00:04:25.484 --> 00:04:30.445
after, whatever you want,
we are going to add a button here

59
00:04:30.445 --> 00:04:35.306
that onclick I'm going to call Auth,
it can be register,

60
00:04:35.306 --> 00:04:40.860
passkey or addWebAuthentication,
whatever name you want.

61
00:04:40.860 --> 00:04:46.299
And again, here we can say they
want to add a new authenticator,

62
00:04:46.299 --> 00:04:52.241
a new passkey, the UX for this,
I think, it's still in discussion,

63
00:04:52.241 --> 00:04:56.607
which is the final UX that
everyone is going to use.

64
00:04:56.607 --> 00:05:01.777
I think at the end it will depend on
what the big players are going to do

65
00:05:01.777 --> 00:05:07.876
in the future, because users will
recognize for that user experience, okay?

66
00:05:07.876 --> 00:05:09.486
Make sense?

67
00:05:09.486 --> 00:05:12.607
Can you assume so far?

68
00:05:12.607 --> 00:05:14.325
Nope.

69
00:05:14.325 --> 00:05:21.680
So now we need to make
that addWebAuthn method.

70
00:05:21.680 --> 00:05:25.613
So another one you wait as
long as this point, so,

71
00:05:25.613 --> 00:05:31.232
addWebAuthn is going to do something and
it's going to be async because

72
00:05:31.232 --> 00:05:37.450
the whole WebAuthn API is asynchronous,
so let's start with async.

73
00:05:37.450 --> 00:05:42.851
So the first step, remember,
the first step is to go to the server and

74
00:05:42.851 --> 00:05:46.350
request the challenge and the options.

75
00:05:46.350 --> 00:05:51.170
So, we need to first get
the options from the API.

76
00:05:51.170 --> 00:05:56.610
So webAuthn.registrationOptions.

77
00:05:56.610 --> 00:06:02.574
So we wait for the server to
send me all that information and

78
00:06:02.574 --> 00:06:06.103
here is where we are going to call so

79
00:06:06.103 --> 00:06:11.230
we are going to take
a response from the webAuthn.

80
00:06:12.480 --> 00:06:16.140
I'm leaving a space,
because I will add some options there.

81
00:06:16.140 --> 00:06:23.719
So we're going to wait and we're going to
call the SimpleWebAuthnBrowser library,

82
00:06:23.719 --> 00:06:30.260
the problem is that this is a library
that I need to import first, okay?

83
00:06:30.260 --> 00:06:32.820
So, well, let me write the code and
then we import that.

84
00:06:32.820 --> 00:06:37.341
So we're going to startRegistration and

85
00:06:37.341 --> 00:06:41.353
registration need options,okay?

86
00:06:41.353 --> 00:06:46.281
Those are the options that we have here,
but client side,

87
00:06:46.281 --> 00:06:50.716
we can also add more metadata
to that option, okay?

88
00:06:50.716 --> 00:06:54.043
So for example, we can define

89
00:06:54.043 --> 00:07:00.706
the authenticatorSelection.residentKey
as required.

90
00:07:00.706 --> 00:07:05.075
So this is actually gonna be useful for
passkeys.

91
00:07:06.238 --> 00:07:08.221
Okay, I will explain that later.

92
00:07:09.763 --> 00:07:17.624
And the same as
authenticatorSelection.requireResideKey

93
00:07:17.624 --> 00:07:24.434
you have the code to copy and
paste in case you want to.

94
00:07:24.434 --> 00:07:30.609
And extensions, credProps,
you know what is that?

95
00:07:30.609 --> 00:07:32.271
Okay, we'll see in a minute.

96
00:07:32.271 --> 00:07:35.380
Okay, here's a JSON so nothing like that.

97
00:07:35.380 --> 00:07:39.834
Okay, so once we have the registration
remember this isn't going to work if we

98
00:07:39.834 --> 00:07:42.900
don't add the client
side library to our HTML.

99
00:07:42.900 --> 00:07:46.295
But when we have the registration,

100
00:07:46.295 --> 00:07:52.417
the next step is to send this object
back to the server to verify.

101
00:07:52.417 --> 00:07:55.296
Remember the two steps process for
WebAuthn?

102
00:07:55.296 --> 00:07:57.655
So first we ask the server for options,

103
00:07:57.655 --> 00:08:02.173
then we call the authenticator to do
the stuff with the Face ID or wherever.

104
00:08:02.173 --> 00:08:04.921
The authenticator will give me a response,
and

105
00:08:04.921 --> 00:08:08.916
then we need to send back that response
to our back end to be verified.

106
00:08:08.916 --> 00:08:14.827
So now we are going to wait for
another response for

107
00:08:14.827 --> 00:08:20.881
another API that is
registration verification and

108
00:08:20.881 --> 00:08:26.090
verification will need
the response that we

109
00:08:26.090 --> 00:08:33.290
have just got from the web API
from the previous line, okay?

110
00:08:33.290 --> 00:08:37.440
And here we check if verification is okay.

111
00:08:37.440 --> 00:08:42.432
So if the server is give me,
okay, I can make a message or

112
00:08:42.432 --> 00:08:46.913
something say,
You can now login with WebAuthn.

113
00:08:46.913 --> 00:08:52.389
If not, it didn't work, so
we could maybe show the message

114
00:08:52.389 --> 00:08:58.750
that the server is sending in case
we have one, something like this.

115
00:09:00.250 --> 00:09:04.879
So, this is the one that is, in fact,
this code that you see here,

116
00:09:04.879 --> 00:09:09.710
is the one that is explaining this
flow that we saw before, this one.

117
00:09:10.740 --> 00:09:15.077
It doesn't matter if you see
the flow again, but it's that flow,

118
00:09:15.077 --> 00:09:18.267
that two-step flow,
we go twice to the server.

119
00:09:18.267 --> 00:09:22.253
So I'm going to the server here and
then I'm going to do a server here,

120
00:09:22.253 --> 00:09:24.680
that's why we have two endpoints.

121
00:09:24.680 --> 00:09:27.900
But this is not going to work
because I need to add this library.

122
00:09:27.900 --> 00:09:32.374
So it's time to go for
the first time to the website for

123
00:09:32.374 --> 00:09:37.353
this library that is .dev,
the name of the library .dev.

124
00:09:37.353 --> 00:09:41.789
Actually, the documentation,
it's good, good,

125
00:09:41.789 --> 00:09:48.280
I'm not sure it's good enough,
it's good enough minus one, it's okay.

126
00:09:48.280 --> 00:09:53.096
They have an example that is tricky to
follow but it's compared with the other

127
00:09:53.096 --> 00:09:58.077
libraries available for authentication
this one is the best one for sure okay?

128
00:09:58.077 --> 00:10:00.947
The other one's even
worse than than this one.

129
00:10:00.947 --> 00:10:05.602
So it's that simple to use first class
type of support in fact the sample

130
00:10:05.602 --> 00:10:08.560
available in the repo is TypeScript, okay?

131
00:10:10.230 --> 00:10:13.559
So, I mean, if you are happy
with TypeScript, that's fine.

132
00:10:13.559 --> 00:10:17.531
And when you go to the docs,
here you can see the packages and

133
00:10:17.531 --> 00:10:22.240
everything, and there is a whole
section on passkeys, for example.

134
00:10:22.240 --> 00:10:26.379
So it's actually pretty updated,
talking about iOS 16,

135
00:10:26.379 --> 00:10:30.856
the Ventura, Microsoft Ventura so
they are behind the library.

136
00:10:30.856 --> 00:10:34.959
The other libraries I kind of
have a little behind okay,

137
00:10:34.959 --> 00:10:38.975
compared with this one here
you have all the habits with

138
00:10:38.975 --> 00:10:44.200
Android that I will explain what
happens with Android in a minute.

139
00:10:44.200 --> 00:10:47.974
So you have here what happens with Safari
browser, what happens with Edge browser.

140
00:10:47.974 --> 00:10:52.307
So they are following compatibility on
each browser that's why I think it's

141
00:10:52.307 --> 00:10:53.114
pretty good.

142
00:10:53.114 --> 00:10:57.545
And when we go to the packages for
the browser,

143
00:10:57.545 --> 00:11:01.520
here we have how to
install this from NPM or

144
00:11:01.520 --> 00:11:05.285
to copy and paste the script from a CDN.

145
00:11:05.285 --> 00:11:10.201
So we can just copy and
paste it from a CDN because we

146
00:11:10.201 --> 00:11:15.588
don't have packager we're
not using any packager for

147
00:11:15.588 --> 00:11:20.877
the front end, so
I just need to add this here like so.

148
00:11:20.877 --> 00:11:24.310
So now we are ready to use
the client side library.

149
00:11:24.310 --> 00:11:28.738
These client side libraries,
shares calling webAuthn client side.

150
00:11:28.738 --> 00:11:31.176
Remember that webAuthn,

151
00:11:31.176 --> 00:11:36.832
it's exactly sitting on top
of credential management API.

152
00:11:36.832 --> 00:11:40.965
So it's saving the private and
public keys in

153
00:11:40.965 --> 00:11:47.076
Credential Management using
Credential Management API, okay?

154
00:11:47.076 --> 00:11:53.751
Well, I think that we are ready to
try this let's see what happens.

155
00:11:53.751 --> 00:11:59.773
So I can log in with Google or
with password, it should work with both.

156
00:11:59.773 --> 00:12:03.918
So now I have this
Add Authenticator/Passkey, okay?

157
00:12:03.918 --> 00:12:07.123
So let's see if that works,
if I click there,

158
00:12:07.123 --> 00:12:12.057
voila, we have first that dialogue
that's a Chrome dialogue saying,

159
00:12:12.057 --> 00:12:15.449
okay, how do you wanna
save an authentication?

160
00:12:15.449 --> 00:12:22.039
Using a USB security key,
let's write the USB key first.

161
00:12:22.039 --> 00:12:26.070
So I'm going to connect this USB-C, so
I'm going to connect this to my computer.

162
00:12:26.070 --> 00:12:29.524
Okay, it's connected, so USB key and

163
00:12:29.524 --> 00:12:34.442
then I need to touch it because
it needs interaction, so

164
00:12:34.442 --> 00:12:39.360
I need to touch it and
then in this case a pin is required,

165
00:12:39.360 --> 00:12:43.987
so there will be a pin on top of that 1,
1, 1, 1.

166
00:12:43.987 --> 00:12:48.960
Next, incorrect pin this is the pin for
my security key interesting because I

167
00:12:48.960 --> 00:12:52.420
didn't remember they had a creaky,
okay it worked.

168
00:12:53.520 --> 00:12:55.871
And now I need you touch again.

169
00:12:55.871 --> 00:12:59.425
And now I can login with WebAuthn,
did it work?

170
00:12:59.425 --> 00:13:04.750
Well, the process seemed to work,
let's see the database.

171
00:13:04.750 --> 00:13:09.370
So we'll look at the database so
I will open, here I have my JSON.

172
00:13:09.370 --> 00:13:15.510
So now Look at this, this is Maximiliano
Firtman Google federated Google account.

173
00:13:15.510 --> 00:13:19.955
And I have here while this was
the challenge, I have devices,

174
00:13:19.955 --> 00:13:22.620
it's an array of 1, with a buffer.

175
00:13:24.260 --> 00:13:29.601
So that's the public key
with some other information

176
00:13:29.601 --> 00:13:35.186
that here it says that this
was used through USB and NFC.

177
00:13:35.186 --> 00:13:41.081
So, based on these values,
you could read that metadata and

178
00:13:41.081 --> 00:13:45.820
show the user a message saying that,
or you can,

179
00:13:45.820 --> 00:13:50.001
no this is a USB key and
not Touch ID, okay?

180
00:13:50.001 --> 00:13:53.446
Let's write Touch ID so
I'm going to add another one.

181
00:13:53.446 --> 00:13:55.399
Can I add more than one?

182
00:13:55.399 --> 00:14:01.083
Yes, in my endpoint it will work so
I will add another one,

183
00:14:01.083 --> 00:14:07.469
I will say this device, and
I will use my finger you can now log in.

184
00:14:07.469 --> 00:14:09.934
Okay, let's see now here,

185
00:14:09.934 --> 00:14:15.073
I have another object with
another buffer array that says,

186
00:14:15.073 --> 00:14:20.842
internal, so, in this case,
it was an internal authenticator.

187
00:14:20.842 --> 00:14:22.720
Again, do I know if it's touch or face?

188
00:14:22.720 --> 00:14:28.207
No, but because it was a Mac,
I can say, yeah, it was touch ID,

189
00:14:28.207 --> 00:14:34.532
so next time, I could say to the user hey,
you wanna use touch ID to log in?

190
00:14:34.532 --> 00:14:35.837
Any question at this point?

191
00:14:39.525 --> 00:14:43.034
Well on Safari,
it should work in Safari as well.

192
00:14:43.034 --> 00:14:44.550
Do I have it loaded?

193
00:14:44.550 --> 00:14:49.795
No.
So local health 50/50 again.

194
00:14:49.795 --> 00:14:55.151
50/50, let's use the other user,

195
00:14:55.151 --> 00:15:02.504
m@m.com and
the password was Frontendmaster I think.

196
00:15:02.504 --> 00:15:03.609
You want to save it?

197
00:15:03.609 --> 00:15:05.550
Well, okay, save it.

198
00:15:05.550 --> 00:15:09.766
Let's add authenticator, this is how
Safari render things by default,

199
00:15:09.766 --> 00:15:12.970
it goes automatically to Touch ID or
Face ID.

200
00:15:12.970 --> 00:15:17.055
But also I have other options,
in other options,

201
00:15:17.055 --> 00:15:21.042
I can say that I can use iPhone,
iPad or Android,

202
00:15:21.042 --> 00:15:25.730
as my authenticator or a USB key or
I can create a passkey.

203
00:15:25.730 --> 00:15:31.100
You can see that the passkey in Ventura is
kind of the wording for Webauthn, I can

204
00:15:31.100 --> 00:15:36.490
save a passkey in the iCloud keychain
that will be synced across Apple devices.

205
00:15:37.980 --> 00:15:39.931
So it's not just this device.

206
00:15:39.931 --> 00:15:43.865
So I will continue with Touch ID, done.

207
00:15:43.865 --> 00:15:47.609
Okay, you can now log in.

208
00:15:47.609 --> 00:15:52.153
So going back to our app, if I look here,

209
00:15:52.153 --> 00:15:56.833
my m@m here is it has an internal hybrid,

210
00:15:56.833 --> 00:16:05.022
that's how Safari identifies its
authenticator with an array buffer.

211
00:16:05.022 --> 00:16:08.801
So, the registration flow is working,

212
00:16:08.801 --> 00:16:13.359
I'm still missing the part
where we are actually

213
00:16:13.359 --> 00:16:17.931
making the authentication,
the login, okay?

214
00:16:17.931 --> 00:16:23.429
But do you have any question
at this point on this?

215
00:16:23.429 --> 00:16:26.771
No?
And by the way, we were saving a true,

216
00:16:26.771 --> 00:16:28.439
WebAuthn true here.

217
00:16:28.439 --> 00:16:34.585
So that means that even if
the login process is not ready yet,

218
00:16:34.585 --> 00:16:39.645
if I open the Network tab and
I'm currently logged

219
00:16:39.645 --> 00:16:45.808
in as Maximiliano let me logout first,
login again as m@m.

220
00:16:45.808 --> 00:16:52.835
Continue, the options will tell me
that I can log in with password or

221
00:16:52.835 --> 00:16:56.917
with WebAuthn, makes sense, right?

222
00:16:56.917 --> 00:17:03.566
Because now we have a device registered,
at least one, registered in our database.

