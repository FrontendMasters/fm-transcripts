WEBVTT

1
00:00:00.170 --> 00:00:01.650
It's time for workshop.

2
00:00:01.650 --> 00:00:08.340
So now we will start creating our forms,
or in this case enhancing the forms.

3
00:00:08.340 --> 00:00:17.205
So if you want to follow along in this
website firtman.github.io/authentication,

4
00:00:17.205 --> 00:00:22.010
you have the instructions, step-by-step.

5
00:00:23.440 --> 00:00:30.850
So in what we will be building,
you have here the link to another repo.

6
00:00:30.850 --> 00:00:34.093
This is the repo where you have,
right now,

7
00:00:34.093 --> 00:00:39.910
a basic web app with a basic Node.js
server that we're going to use.

8
00:00:39.910 --> 00:00:44.835
So you just need to clone this repo, okay?

9
00:00:44.835 --> 00:00:48.322
Github.com/firtman/coffeemasters-authn.

10
00:00:48.322 --> 00:00:52.006
CoffeeMasters is the name of our web app,

11
00:00:52.006 --> 00:00:56.751
is like the coffee shop for
Frontend Masters, okay?

12
00:00:56.751 --> 00:00:59.740
So we are going to be
logging in on that web app.

13
00:01:00.800 --> 00:01:06.080
It's a PWA, but in this case,
that PWA is just the authentication flow.

14
00:01:06.080 --> 00:01:07.572
We don't have content, okay?

15
00:01:07.572 --> 00:01:10.890
In the app,
just to focus on what we need to do.

16
00:01:10.890 --> 00:01:13.009
So after you clone the repo,

17
00:01:13.009 --> 00:01:18.800
you just need to execute npm install
to install all the dependencies.

18
00:01:18.800 --> 00:01:24.248
The dependencies that we already
have are basically Express JS for

19
00:01:24.248 --> 00:01:28.560
the web server,
a couple of plugins for Express JS.

20
00:01:28.560 --> 00:01:32.685
Also, we have dependencies on
libraries that we will use later,

21
00:01:32.685 --> 00:01:35.610
such as
a Web Authentication Server Library.

22
00:01:37.010 --> 00:01:40.990
We have a library for
hashing passwords, okay?

23
00:01:40.990 --> 00:01:45.110
So we have all the dependencies that
we will use during the day, okay?

24
00:01:45.110 --> 00:01:49.914
And npm start will start
a server with node-monitor.

25
00:01:49.914 --> 00:01:55.392
I'm not sure if you know what node-monitor
is actually doing, but it's a monitor,

26
00:01:55.392 --> 00:02:00.049
node-monitor, and the idea is that
it's monitoring the file system.

27
00:02:00.049 --> 00:02:02.977
So if you change the file system,
such as we change the server,

28
00:02:02.977 --> 00:02:05.040
it will restart the server automatically.

29
00:02:05.040 --> 00:02:08.980
So we don't need to kill the server and
run the server again.

30
00:02:08.980 --> 00:02:09.510
It's just that.

31
00:02:09.510 --> 00:02:15.826
So just to make things easier for
our development time, okay?

32
00:02:15.826 --> 00:02:17.370
Make sense?

33
00:02:17.370 --> 00:02:19.140
So I already have it here.

34
00:02:20.380 --> 00:02:24.000
It's this one,
let me just close everything.

35
00:02:24.000 --> 00:02:26.410
I have it on Visual Studio Code.

36
00:02:26.410 --> 00:02:27.500
It's this one?
Yeah, it's this one.

37
00:02:28.630 --> 00:02:34.311
npm install I think I already did that,
but I can just do it just for.

38
00:02:34.311 --> 00:02:39.225
Yep, it's there, so it's updating so
I can now run npm start,

39
00:02:39.225 --> 00:02:42.322
and now it's running in port 5050.

40
00:02:42.322 --> 00:02:46.000
If you don't like the port,
you can change that.

41
00:02:46.000 --> 00:02:50.871
So if you open up the root
folder we have server.js.

42
00:02:50.871 --> 00:02:52.360
And here we have the port number.

43
00:02:52.360 --> 00:02:56.220
So if you wanna change that, go ahead,
any the port number will work.

44
00:02:56.220 --> 00:02:59.310
And we will analyze the code in a second.

45
00:02:59.310 --> 00:03:02.515
But let me open, first, the code.

46
00:03:02.515 --> 00:03:06.780
I will use Chrome here to do that.

47
00:03:06.780 --> 00:03:10.868
Localhost, by the way this isn't
my Gmail account, but actually for

48
00:03:10.868 --> 00:03:14.416
an email address that I have
just created for this workshop.

49
00:03:14.416 --> 00:03:17.820
Because we will work with identity and
login.

50
00:03:17.820 --> 00:03:21.175
It's actually a good idea to
create a couple of accounts,

51
00:03:21.175 --> 00:03:23.920
fake accounts to work with this.

52
00:03:23.920 --> 00:03:28.410
So you don't work with your real
Google account or Apple account.

53
00:03:28.410 --> 00:03:30.120
It's not a bad idea.

54
00:03:30.120 --> 00:03:36.250
Well, I'm going to open localhost 5050,
and this is what we see, okay?

55
00:03:36.250 --> 00:03:39.237
You can see that it says welcome,
you're currently logged out.

56
00:03:39.237 --> 00:03:43.475
I can click Log In, and
I have a form that is not optimized yet.

57
00:03:43.475 --> 00:03:47.334
So now I'm going to optimize it
a little bit, or we will do that.

58
00:03:47.334 --> 00:03:51.079
So I can log in or
I can register a new account instead.

59
00:03:51.079 --> 00:03:55.309
And if I go to register a new account
it goes to the registration form, okay?

60
00:03:55.309 --> 00:04:00.780
It also has an account section,
here at the top.

61
00:04:00.780 --> 00:04:06.410
But anyway, because we are logged out,
it forwards me to Log In when I get there.

62
00:04:06.410 --> 00:04:07.837
So it's redirecting me.

63
00:04:07.837 --> 00:04:12.300
Everything, this is Bonita js,
I'm not using any client-side framework.

64
00:04:12.300 --> 00:04:14.089
This is pure Bonita js.

65
00:04:14.089 --> 00:04:18.888
If you wanna see the client-side
code that is running right now,

66
00:04:18.888 --> 00:04:22.270
of course, we will be playing with it.

67
00:04:22.270 --> 00:04:24.100
It's in the public folder.

68
00:04:24.100 --> 00:04:26.970
So you have in the public
folder an index.html.

69
00:04:26.970 --> 00:04:30.840
So here I have the html that we
will be enhancing in a second.

70
00:04:30.840 --> 00:04:35.113
And within the scripts,
we have an API.js file,

71
00:04:35.113 --> 00:04:42.260
that is going to be our placeholder for
making all the calls to our server.

72
00:04:42.260 --> 00:04:45.937
The only part that's
already there just to avoid

73
00:04:45.937 --> 00:04:50.960
writing code that is boring
is the making a PostRequest.

74
00:04:50.960 --> 00:04:55.533
So I already have a function that
makes a PostRequest to our server,

75
00:04:55.533 --> 00:05:00.710
just using the fetch API and
parsing the response of JSON, okay?

76
00:05:00.710 --> 00:05:06.250
So on the app.js,
this is kind of the entry point of my app.

77
00:05:06.250 --> 00:05:09.106
So from a DOM perspective,
when the page loads or

78
00:05:09.106 --> 00:05:12.808
when the page is actually loading,
it's executing app.js.

79
00:05:12.808 --> 00:05:18.911
And app.js using ES modules is importing
the other objects that they have here.

80
00:05:18.911 --> 00:05:20.710
I have a router.

81
00:05:20.710 --> 00:05:24.217
This is the one that is
doing client-side routing,

82
00:05:24.217 --> 00:05:27.175
pretty like manual, no framework, okay?

83
00:05:27.175 --> 00:05:30.718
Just by changing history.pushState and
listening for

84
00:05:30.718 --> 00:05:33.690
the popstate event, this is how it works.

85
00:05:33.690 --> 00:05:36.152
This is how a react router,
or view router, or

86
00:05:36.152 --> 00:05:39.004
angular router is working
behind the scenes, okay?

87
00:05:39.004 --> 00:05:40.790
But this is Bonita js.

88
00:05:40.790 --> 00:05:45.245
So that's why actually when we
change URLs, I am going to log in,

89
00:05:45.245 --> 00:05:48.000
I'm actually changing the URL, okay?

90
00:05:48.000 --> 00:05:52.460
But this is client-side routing,
but Bonita js, okay?

91
00:05:52.460 --> 00:05:58.300
And in auth.js, what we will be
doing here is writing all the flows,

92
00:05:58.300 --> 00:06:03.150
all the logic the authentication
flow will happen here.

93
00:06:03.150 --> 00:06:08.412
The only thing that I have right now
is a code that says updateStatus,

94
00:06:08.412 --> 00:06:12.764
that based on if we are logged in or
not is like turning on or

95
00:06:12.764 --> 00:06:16.141
off different sections of the page, okay?

96
00:06:16.141 --> 00:06:22.670
And I have a little trick here,
this one, logged_out, logged_in.

97
00:06:22.670 --> 00:06:27.250
But it's doing this because we don't
have reactive programming here.

98
00:06:27.250 --> 00:06:31.511
So the idea is that every time you
call updateStatus, it's looking for

99
00:06:31.511 --> 00:06:33.380
elements with this class.

100
00:06:33.380 --> 00:06:38.020
Class logged_out, class logged_in, class
account_name, and class account_username.

101
00:06:38.020 --> 00:06:43.535
No matter where in your HTML you
have that class, it will hide or

102
00:06:43.535 --> 00:06:49.010
show the elements based on that state,
that login state.

103
00:06:49.010 --> 00:06:52.784
And account name will show your name,
the user's name, and

104
00:06:52.784 --> 00:06:57.380
this is the user name that in our case
we're going to use the email, okay?

105
00:06:57.380 --> 00:07:01.569
So every time you need to show user's
name, you put a div, and a span, or

106
00:07:01.569 --> 00:07:07.310
anything, with a class account_name,
and then your name will be there, okay?

107
00:07:07.310 --> 00:07:10.840
It's not a big deal, but just for
you to understand what's going on here.

108
00:07:10.840 --> 00:07:13.441
And well, CSS,
we won't even touch the CSS.

109
00:07:13.441 --> 00:07:15.020
So you can play with that later.

110
00:07:15.020 --> 00:07:17.527
This is open source, so
do whatever you want.

