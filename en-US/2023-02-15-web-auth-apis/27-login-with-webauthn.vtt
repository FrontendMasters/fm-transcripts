WEBVTT

1
00:00:00.070 --> 00:00:01.090
So what do we need to do?

2
00:00:01.090 --> 00:00:06.023
Well, now that we have that,
we need to show something here, somewhere.

3
00:00:06.023 --> 00:00:09.478
Saying, hey, use Touch ID or
use your passkey or

4
00:00:09.478 --> 00:00:12.357
however you wanna say something there.

5
00:00:12.357 --> 00:00:16.350
Unfortunately, that UX part
is still in discussion.

6
00:00:16.350 --> 00:00:20.721
We don't have,
this is the UX you have to use.

7
00:00:20.721 --> 00:00:26.632
I think that we are still finding the best
user experience for web authentication.

8
00:00:26.632 --> 00:00:31.523
I think that we will go to the index.html
then we'll read out the last change for

9
00:00:31.523 --> 00:00:32.698
today in the html.

10
00:00:32.698 --> 00:00:38.287
So in the login form here, we already have

11
00:00:38.287 --> 00:00:43.246
an empty section here for webauthn.

12
00:00:43.246 --> 00:00:48.085
So here we can add a link,
href with nothing, something like that.

13
00:00:48.085 --> 00:00:50.940
So it will pass validation.

14
00:00:50.940 --> 00:00:56.279
We will say that this is a navlink,
you will see why later we use that.

15
00:00:56.279 --> 00:01:03.870
And well, maybe navlink here is used
by the router to do things but anyway.

16
00:01:03.870 --> 00:01:11.300
I will say that onclick,
I wanna call Auth.webAuthnLogin.

17
00:01:11.300 --> 00:01:14.260
So we wanna log in with
Web Authentication.

18
00:01:14.260 --> 00:01:18.460
And just because I'm here,
I'm going to prevent default over event.

19
00:01:18.460 --> 00:01:23.590
I know it feels a little dirty but
why I'm doing this?

20
00:01:23.590 --> 00:01:27.225
Because, It's a link and the link,

21
00:01:27.225 --> 00:01:32.748
if I have this hash,
it will change a little bit the URL.

22
00:01:32.748 --> 00:01:34.680
So it will call the router.

23
00:01:34.680 --> 00:01:35.810
We wanna do that, okay?

24
00:01:36.940 --> 00:01:38.350
So just for that.

25
00:01:38.350 --> 00:01:45.119
And we can say login with WebAuthn or
with passkey or whatever, okay?

26
00:01:45.119 --> 00:01:49.626
This is the part that is still
tricky to get right, okay?

27
00:01:49.626 --> 00:01:53.610
So we're going to log in
the user with those options.

28
00:01:53.610 --> 00:01:56.941
So we need to write the code for

29
00:01:56.941 --> 00:02:03.082
Auth.webAuthnLogin within our Auth option,
okay?

30
00:02:03.082 --> 00:02:08.178
So it's going to be an async function and
actually I mean,

31
00:02:08.178 --> 00:02:13.070
the process will be kind of
similar to the previous one.

32
00:02:14.200 --> 00:02:18.736
But instead of calling the APIs for
registration, we will call the APIs for

33
00:02:18.736 --> 00:02:20.325
authentication, okay?

34
00:02:20.325 --> 00:02:24.110
Remember that we have these two flows and
both are pretty similar.

35
00:02:24.110 --> 00:02:25.092
So what we need,

36
00:02:25.092 --> 00:02:29.531
I need to get the email from the form
because these APIs will need the email.

37
00:02:29.531 --> 00:02:34.580
To log in the user we need the email
because we are going to create options

38
00:02:34.580 --> 00:02:39.228
at the station on everything with
the email address of that user.

39
00:02:39.228 --> 00:02:44.726
It can be an ID,
any way to identify the user will work.

40
00:02:44.726 --> 00:02:50.945
So I'm going to get an element
by ID from the login, okay?

41
00:02:50.945 --> 00:02:54.610
And first I need to get
the option from the server.

42
00:02:54.610 --> 00:02:57.520
So the first step in the flow.

43
00:02:57.520 --> 00:03:03.126
So I'm going to await for
API.webAuthn.logInOptions

44
00:03:03.126 --> 00:03:07.570
that one receives the email,
which is okay.

45
00:03:07.570 --> 00:03:11.034
The next step is to call the API.

46
00:03:11.034 --> 00:03:16.559
So I'm going to now login or
authenticate the API doesn't

47
00:03:16.559 --> 00:03:22.209
talk about login,
it talks about authentication, okay?

48
00:03:22.209 --> 00:03:27.110
But because we were talking about
login I'm continuing that wording.

49
00:03:27.110 --> 00:03:31.620
So I'm going to talk with my
SimpleWebAuthnBrowser library and

50
00:03:31.620 --> 00:03:37.590
I'm going to startAuthentication,
not registration but authentication.

51
00:03:37.590 --> 00:03:41.780
Pass in the options received
by the server, by our backend.

52
00:03:42.930 --> 00:03:46.010
By the way,
it's known as the WebAuthn server.

53
00:03:46.010 --> 00:03:49.290
So our backend is now a WebAuthn server.

54
00:03:50.480 --> 00:03:55.610
It's possible to separate your
WebAuthn server from your backend.

55
00:03:55.610 --> 00:03:59.590
It's possible to have a completely
separate WebAuthn server, okay?

56
00:03:59.590 --> 00:04:03.865
That happens if you have
really large amount of users

57
00:04:03.865 --> 00:04:09.026
validating at the same time,
you can actually separate that.

58
00:04:09.026 --> 00:04:11.287
But normally, it will be the same.

59
00:04:11.287 --> 00:04:13.388
And then we need to verify.

60
00:04:13.388 --> 00:04:20.600
So I'm going to wait for
the verification response from my API.

61
00:04:20.600 --> 00:04:22.400
We don't need to pass any other arguments.

62
00:04:22.400 --> 00:04:24.320
Those arguments are okay.

63
00:04:24.320 --> 00:04:32.227
So we're going to verify the login result
from the API, something like that.

64
00:04:32.227 --> 00:04:34.498
The only that you need is the email,

65
00:04:34.498 --> 00:04:37.695
of course because it needs the email and
the data.

66
00:04:37.695 --> 00:04:39.100
I think that's okay.

67
00:04:39.100 --> 00:04:43.050
So I tell you that will tell us if
the login was successful or not.

68
00:04:44.580 --> 00:04:47.270
So this is our third way of login.

69
00:04:47.270 --> 00:04:50.104
We have login with username and password,

70
00:04:50.104 --> 00:04:53.180
login with Google and
this is log in webAuthn.

71
00:04:54.250 --> 00:04:58.460
So I will check if I'm sending
an ok from the server.

72
00:04:58.460 --> 00:05:02.960
And if I'm sending an ok,
I can call post login as with

73
00:05:02.960 --> 00:05:06.966
the other login methods,
it needs a response.

74
00:05:06.966 --> 00:05:10.800
We can pass that response
that we receive and a user.

75
00:05:12.730 --> 00:05:18.498
And we on the response, we will check
that, let me check if that's the name.

76
00:05:18.498 --> 00:05:20.420
But we pass a user.

77
00:05:20.420 --> 00:05:25.520
So let me go to the server for a second
and this is the login verification.

78
00:05:25.520 --> 00:05:30.743
At the end, we are passing a user, okay?

79
00:05:30.743 --> 00:05:36.083
With name and email that is
coming from the database after

80
00:05:36.083 --> 00:05:41.320
we logged in the user with a face or
a USB key or whatever.

81
00:05:41.320 --> 00:05:46.700
So that should be fine and
if not, something has happened.

82
00:05:46.700 --> 00:05:54.624
So we are going to alert
with verification Message.

83
00:05:54.624 --> 00:05:57.230
What could be wrong?

84
00:05:57.230 --> 00:06:01.063
Well, someone can be
hijacking the webAuthn API or

85
00:06:01.063 --> 00:06:04.130
the data coming from the API.

86
00:06:04.130 --> 00:06:09.209
Or maybe you're in a different device,
so your face is not the one register or

87
00:06:09.209 --> 00:06:13.039
for example I have here I register
something with my MAC and

88
00:06:13.039 --> 00:06:18.420
it's not actually available in the iPad
even if it's the same account.

89
00:06:18.420 --> 00:06:21.920
But pass keys, they have a difference.

90
00:06:21.920 --> 00:06:23.059
And we will mention that in a minute.

91
00:06:23.059 --> 00:06:26.278
But pass keys is like one step over this.

92
00:06:26.278 --> 00:06:31.014
So pass keys are actually
shared between devices.

93
00:06:31.014 --> 00:06:33.094
They are stored in the iCloud.

94
00:06:33.094 --> 00:06:40.020
Okay, so I think that's okay,
let's see now.

95
00:06:40.020 --> 00:06:45.779
So if I try to log in again,
now I can log in with other competition.

96
00:06:45.779 --> 00:06:49.002
Look at that, I didn't press continue,

97
00:06:49.002 --> 00:06:54.357
it worked automatically and
now I have the login with WebAuthn link.

98
00:06:54.357 --> 00:06:56.536
If I click here I'm receiving okay,

99
00:06:56.536 --> 00:06:59.993
it seems like there are some
passkeys available for this.

100
00:06:59.993 --> 00:07:04.380
I'm not sure which one is the one
that I use actually for localhost.

101
00:07:04.380 --> 00:07:05.730
So let's try that one.

102
00:07:05.730 --> 00:07:09.468
Maybe it's not and
if it's not I will get an error.

103
00:07:09.468 --> 00:07:11.900
Authenticator is not
registered with that site.

104
00:07:12.930 --> 00:07:14.280
That wasn't the one.

105
00:07:14.280 --> 00:07:17.670
And by the way, it seems like it's,
can you see that?

106
00:07:19.000 --> 00:07:21.810
So the event.preventDefault didn't work.

107
00:07:21.810 --> 00:07:25.460
So let's see why from my html.

108
00:07:25.460 --> 00:07:28.762
event, I didn't curl preventDefault.

109
00:07:28.762 --> 00:07:31.120
That's why it didn't execute the function.

110
00:07:32.190 --> 00:07:35.170
That's why the router changes the page.

111
00:07:35.170 --> 00:07:40.051
So try again, let's see if I
can find the one that I need.

112
00:07:42.114 --> 00:07:47.639
We refresh, m@m, login.

113
00:07:47.639 --> 00:07:49.042
Maybe Max.

114
00:07:49.042 --> 00:07:53.390
I don't know, if not I would create a new
one but I can create more than one.

115
00:07:54.410 --> 00:08:00.820
Yep, I'm logged in with Touch ID,
so it worked.

116
00:08:00.820 --> 00:08:02.570
Now, go into Chrome.

117
00:08:02.570 --> 00:08:04.180
On Chrome, I can use the USB key.

118
00:08:05.820 --> 00:08:09.790
But it was for my Gmail, I think.

119
00:08:09.790 --> 00:08:11.570
I registered that for my Gmail.

120
00:08:11.570 --> 00:08:12.700
So continue.

121
00:08:12.700 --> 00:08:14.440
I don't have a password, look at that.

122
00:08:14.440 --> 00:08:15.740
No password, why?

123
00:08:15.740 --> 00:08:20.270
Because this account was federated,
so I don't have a password.

124
00:08:20.270 --> 00:08:25.610
So I can log in only with Google Or
with webAuthn.

125
00:08:25.610 --> 00:08:29.610
So if I click here,
I can use my finger, okay?

126
00:08:29.610 --> 00:08:33.466
Or I can go to other options and
select USB key.

127
00:08:33.466 --> 00:08:34.970
And here it says, there are two.

128
00:08:34.970 --> 00:08:38.416
That's because it's localhost and
it seems like you have more than one.

129
00:08:38.416 --> 00:08:42.375
And it was that one and I'm logged in now.

130
00:08:42.375 --> 00:08:43.240
So it's working.

131
00:08:44.330 --> 00:08:48.205
I can try now this on my iOS simulator.

132
00:08:48.205 --> 00:08:52.154
Localhost.5050, so I can log in.

133
00:08:52.154 --> 00:08:56.041
m@m, I think I have another,
I can register a new account.

134
00:08:56.041 --> 00:08:57.228
Let's get a new one.

135
00:08:57.228 --> 00:08:58.396
My name is iPhone.

136
00:08:58.396 --> 00:09:05.179
And it's iphone@mac.com and
password, whatever.

137
00:09:05.179 --> 00:09:06.403
Let's say, TimCook.

138
00:09:06.403 --> 00:09:11.747
Register account, I mean,
I'm going to authenticator.

139
00:09:11.747 --> 00:09:13.981
So the only passkey, yes.

140
00:09:13.981 --> 00:09:17.498
Face ID, matching face.

141
00:09:19.860 --> 00:09:20.856
You can now log in.

142
00:09:20.856 --> 00:09:23.418
Okay, cool, iphone@mac.

143
00:09:23.418 --> 00:09:26.011
So let me log out.

144
00:09:26.011 --> 00:09:28.274
So now iphone@mac.com.

145
00:09:32.268 --> 00:09:36.229
I think I have, look at that,
I have capital I.

146
00:09:36.229 --> 00:09:40.520
And in fact, that's something that we
should improve for user experience.

147
00:09:40.520 --> 00:09:41.649
Lowercase and

148
00:09:41.649 --> 00:09:47.580
trim my email addresses because an auto
competition can actually change.

149
00:09:47.580 --> 00:09:50.260
You don't see that but let me, zoom in.

150
00:09:52.150 --> 00:09:56.100
It tried with Iphone with capital I and

151
00:09:56.100 --> 00:10:00.799
of course,
it's not the same in the string.

152
00:10:00.799 --> 00:10:01.867
So there we are.

153
00:10:01.867 --> 00:10:06.866
Because let me see what's going on.

154
00:10:06.866 --> 00:10:07.653
Let's try again.

155
00:10:07.653 --> 00:10:12.911
iPhone, by the way I can disable that

156
00:10:12.911 --> 00:10:18.814
also with a HTML Property.

157
00:10:18.814 --> 00:10:23.128
All right, let me write it correctly now.

158
00:10:23.128 --> 00:10:24.391
Well I would change it there.

159
00:10:24.391 --> 00:10:27.327
iphone@mac.com.

160
00:10:27.327 --> 00:10:31.212
I don't know why it's forcing me.

161
00:10:31.212 --> 00:10:36.900
You can also turn on the keyboard,
that one instead of using your Mac.

162
00:10:36.900 --> 00:10:39.654
I think it's my Mac keyboard that's for

163
00:10:39.654 --> 00:10:44.330
some reason is doing that
uppercase I don't know why.

164
00:10:44.330 --> 00:10:47.930
Okay, so now it's giving me webAuthn.

165
00:10:47.930 --> 00:10:52.663
So if I try to login, also I have two,
I think it's iPhone or

166
00:10:52.663 --> 00:10:55.046
I don't know which one it is.

167
00:10:55.046 --> 00:10:55.871
Well I can try.

168
00:10:58.763 --> 00:11:03.540
That's because on this simulator,
I try another example, continue, sorry.

169
00:11:03.540 --> 00:11:08.120
Now matching face and maybe that one, yep.

170
00:11:08.120 --> 00:11:12.546
Ang log in with Face ID.

171
00:11:12.546 --> 00:11:13.850
Do you have any question?

172
00:11:13.850 --> 00:11:15.286
You have a happy face.

173
00:11:15.286 --> 00:11:15.986
That's a happy face.

174
00:11:15.986 --> 00:11:17.476
&gt;&gt; This is freaking rad.

175
00:11:17.476 --> 00:11:19.589
&gt;&gt; [LAUGH]
&gt;&gt; Yeah, that's really cool.

176
00:11:19.589 --> 00:11:24.181
&gt;&gt; So I know that this last part was
more complicated to follow because

177
00:11:24.181 --> 00:11:26.730
webAuthn is complicated to follow.

178
00:11:26.730 --> 00:11:33.470
But after you implemented that,
it starts to make sense, the process.

179
00:11:33.470 --> 00:11:38.703
Now, let me show you something else
that is interesting is that if

180
00:11:38.703 --> 00:11:44.331
you're using Chrome, Chrome is
offers us also a webAuthn emulator.

181
00:11:44.331 --> 00:11:49.051
So instead of actually using a real
USB key or using my real finger,

182
00:11:49.051 --> 00:11:51.006
I can simulate this, how?

183
00:11:51.006 --> 00:11:55.731
Well, Chrome dev tools,
let me put this in fullscreen.

184
00:11:55.731 --> 00:11:58.864
Chrome DevTools have something
known as the console drawer.

185
00:11:58.864 --> 00:12:01.476
Not sure if you have seen these before,
the console drawer.

186
00:12:01.476 --> 00:12:05.137
Is when you press escape
it appears a new menu.

187
00:12:05.137 --> 00:12:07.954
And let me close everything here.

188
00:12:07.954 --> 00:12:12.585
And this,
the console drawer also has tabs but

189
00:12:12.585 --> 00:12:15.799
the tabs are closed by default.

190
00:12:15.799 --> 00:12:22.082
So if you go to them that menu,
not that one, not that one, okay?

191
00:12:22.082 --> 00:12:27.015
This one, the one from the console drawer,
you have a lot of options.

192
00:12:27.015 --> 00:12:29.506
And one is webAuthn.

193
00:12:29.506 --> 00:12:35.738
If you open that, you can enable
a virtual authenticator environment.

194
00:12:35.738 --> 00:12:38.442
So if you do that,
let me remove the ones that I have.

195
00:12:38.442 --> 00:12:40.540
I can create a new virtual authenticator.

196
00:12:40.540 --> 00:12:47.273
So it's like an emulator that generates
the keys and everything but virtually.

197
00:12:47.273 --> 00:12:50.093
Then I can delete that and
everything is gone.

198
00:12:50.093 --> 00:12:54.799
You also need to delete that server side
because if not you will keep private

199
00:12:54.799 --> 00:12:57.050
keys that you will never use again.

200
00:12:57.050 --> 00:13:01.372
So here I can select the internally
which technologies do

201
00:13:01.372 --> 00:13:03.628
you wanna provide internal.

202
00:13:03.628 --> 00:13:07.262
So in this case,
again it's not going to be internal or

203
00:13:07.262 --> 00:13:10.982
nfc, is how this is going to
be announced to our server.

204
00:13:10.982 --> 00:13:14.683
If it support user verification blah,
blah, blah I say add.

205
00:13:14.683 --> 00:13:16.321
And now it's active.

206
00:13:16.321 --> 00:13:19.235
So if you try to create the credential, so

207
00:13:19.235 --> 00:13:23.749
if you try to add a new authenticator
actually like this, okay?

208
00:13:23.749 --> 00:13:29.341
It will use that one instead of
whatever you pick here, okay?

209
00:13:29.341 --> 00:13:30.858
That's kind of the idea.

210
00:13:30.858 --> 00:13:37.282
You can see here, it creates the ID, the
handle but everything is virtual, okay?

211
00:13:37.282 --> 00:13:42.478
So it's actually not being
saved in your real Chrome.

212
00:13:42.478 --> 00:13:44.720
That's kind of the deal.

213
00:13:44.720 --> 00:13:47.940
So it's an emulator for
web authentication credentials.

