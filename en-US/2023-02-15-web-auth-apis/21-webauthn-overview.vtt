WEBVTT

1
00:00:00.090 --> 00:00:02.966
So far, we've covered how to make,
let's say,

2
00:00:02.966 --> 00:00:08.050
let's call it a standard authentication
classic form, username and password.

3
00:00:08.050 --> 00:00:10.990
We have discussed the security
issues that that has.

4
00:00:10.990 --> 00:00:15.369
We have added credential management
API for auto-logging and storing those

5
00:00:15.369 --> 00:00:20.450
credentials safely, client-side,
at least with a compatible browser.

6
00:00:20.450 --> 00:00:24.290
Then, how to use at least one
Federated login, in this case, Google.

7
00:00:25.530 --> 00:00:28.970
And now it's time to talk
about Web Authentication.

8
00:00:28.970 --> 00:00:32.725
That is kind of one of the APIs that
some of you were actually waiting for,

9
00:00:32.725 --> 00:00:33.350
probably.

10
00:00:34.960 --> 00:00:38.260
So, Web authentication,
it's a multi-vendor effort, so

11
00:00:38.260 --> 00:00:42.070
it's not something from Google or
something from Safari.

12
00:00:42.070 --> 00:00:46.040
In fact, I can tell you that
after request payment API,

13
00:00:46.040 --> 00:00:49.839
that is the one that will let
you like use Apple Pay, or

14
00:00:49.839 --> 00:00:53.726
something like that and
also WebRTC and WebAssembly,

15
00:00:53.726 --> 00:00:58.708
this is actually the one that every
vendor wanted from the first day and

16
00:00:58.708 --> 00:01:04.740
that's why it's actually, it has a pretty
good implementation on every browser.

17
00:01:05.840 --> 00:01:09.918
It was greatly appreciated
by the FIDO Alliance,

18
00:01:09.918 --> 00:01:16.051
that's the one that is creating USB
keys and all the stuf and also the W3C.

19
00:01:16.051 --> 00:01:20.835
So today it's a double effort
between two organizations

20
00:01:20.835 --> 00:01:24.724
the W3C from the standards perspective,
and

21
00:01:24.724 --> 00:01:30.821
the FIDO Alliance from a more
authentication process that goes behind.

22
00:01:30.821 --> 00:01:35.122
The idea is that with Web authentication,
so

23
00:01:35.122 --> 00:01:42.947
someone will store safely private keys
while sending public keys for our server.

24
00:01:42.947 --> 00:01:48.440
And by the way, I'm simplifying all
the wordings here from the spec.

25
00:01:48.440 --> 00:01:53.406
So when I learned about Web
authentication, it wasn't actually so

26
00:01:53.406 --> 00:01:58.198
simple to understand what was going on,
because it's written by

27
00:01:58.198 --> 00:02:03.272
the FIDO Alliance, mostly from
a hardware perspective sometimes.

28
00:02:03.272 --> 00:02:07.451
Yeah, we have some diagrams where for
example, the server is not called

29
00:02:07.451 --> 00:02:12.452
the server, so everything has a different
name, so when you try to understand what's

30
00:02:12.452 --> 00:02:17.277
going on, even with the diagrams,
is difficult, who is the authenticator.

31
00:02:17.277 --> 00:02:20.860
Is at the website now who
is the reliant party?

32
00:02:20.860 --> 00:02:25.880
So, we are the relying party, by the way,
but it's like when you read it,

33
00:02:25.880 --> 00:02:30.105
it's difficult to follow what's going on,
so I simplify it,

34
00:02:30.105 --> 00:02:35.047
I'm not going to use the wording from
the spec, I'm going to use a more Web

35
00:02:35.047 --> 00:02:39.832
developer wording, so we can actually
understand what's going on and

36
00:02:39.832 --> 00:02:43.380
it's not so
difficult when you change the wording.

37
00:02:44.470 --> 00:02:49.058
So, the idea is that this
API can work with FIDO2,

38
00:02:49.058 --> 00:02:53.540
that actually works with USB keys,
I have one, so

39
00:02:53.540 --> 00:02:58.270
we can try one later, and
platform authenticator.

40
00:02:58.270 --> 00:02:59.230
So, what's that?

41
00:02:59.230 --> 00:03:05.450
So you can use any solution that is
using a FIDO2 security standard.

42
00:03:05.450 --> 00:03:08.992
Now we're not getting too deep on that,
but

43
00:03:08.992 --> 00:03:13.394
it can be a USB key that you
connect in your computer, or

44
00:03:13.394 --> 00:03:19.080
that you use NFC with your phone,
the key, they work with NFC as well.

45
00:03:19.080 --> 00:03:22.545
And it can work with software
based FIDO2 compatible,

46
00:03:22.545 --> 00:03:27.336
let's say, password managers but
we're not going to have passwords here,

47
00:03:27.336 --> 00:03:30.310
and it works with platform authenticator.

48
00:03:30.310 --> 00:03:31.676
What's a platform authenticator?

49
00:03:31.676 --> 00:03:36.196
Face ID, Touch ID,
Windows Hello on Windows,

50
00:03:36.196 --> 00:03:39.813
Android biometric authentication,

51
00:03:39.813 --> 00:03:45.360
all these methods are known
as platform authenticators.

52
00:03:45.360 --> 00:03:49.773
So it can be an external authenticator,
like an external USB key, or

53
00:03:49.773 --> 00:03:53.470
it can be a solution that
the platform is offering.

54
00:03:53.470 --> 00:03:57.806
The API is the same API, okay?

55
00:03:57.806 --> 00:04:01.783
And originally, still today typically,

56
00:04:01.783 --> 00:04:06.530
we use it as a second
factor authentication.

57
00:04:06.530 --> 00:04:10.451
So, we start with username and
password, and

58
00:04:10.451 --> 00:04:16.180
then we add a second factor
authentication with Web authentication

59
00:04:16.180 --> 00:04:21.330
that can also help or login,
or simplify or the login.

60
00:04:21.330 --> 00:04:24.862
For example,
you have an account with username and

61
00:04:24.862 --> 00:04:30.600
password where a federated account is the
same, and I add Touch ID on top of that.

62
00:04:30.600 --> 00:04:32.915
So next time I get into the website,

63
00:04:32.915 --> 00:04:36.090
I can just use just my touch
to get into a website.

64
00:04:37.300 --> 00:04:38.819
But you still have a username and
password.

65
00:04:40.490 --> 00:04:44.300
In case you change your phone,
in case anything, why?

66
00:04:44.300 --> 00:04:48.968
Because on both situations, so
FIDO2 and platform authenticators,

67
00:04:48.968 --> 00:04:53.398
I mean, you can change your device,
and if you change your device,

68
00:04:53.398 --> 00:04:56.590
your thing is not gonna work anymore.

69
00:04:56.590 --> 00:04:58.870
Even if it's your same finger, why?

70
00:04:58.870 --> 00:05:02.397
Because actually, and this is important,

71
00:05:02.397 --> 00:05:06.997
the operating system,
Nor the browser, nor OS,

72
00:05:06.997 --> 00:05:11.750
no one is getting the data
of our fingerprint, no one.

73
00:05:12.870 --> 00:05:16.792
The same happens with the face,
if you use face ID in your website,

74
00:05:16.792 --> 00:05:21.205
it's not like your website will get
the details of your face in any format,

75
00:05:21.205 --> 00:05:24.310
a 3D model of the face,
that's not how this works.

76
00:05:25.620 --> 00:05:30.592
No one is getting your face,
not even the browser, not even the OS,

77
00:05:30.592 --> 00:05:33.384
depends on the hardware, but on iOS,

78
00:05:33.384 --> 00:05:37.770
it happens at the chipset level,
or that authentication.

79
00:05:37.770 --> 00:05:43.075
So the face recognition data is not
even in memory, in RAM anytime,

80
00:05:43.075 --> 00:05:47.449
it goes to a chipset that has
security inside, so yeah,

81
00:05:47.449 --> 00:05:52.217
if you wanna hack that data,
it's not going to be so simple.

82
00:05:52.217 --> 00:05:55.980
Okay, we are talking about probably
nanometers, or even less than that.

83
00:05:57.000 --> 00:06:01.913
So, that means that when
you change your phone, or

84
00:06:01.913 --> 00:06:06.598
when you buy a new MacBook,
you have to, again,

85
00:06:06.598 --> 00:06:11.858
save your fingers and
all the private keys that belongs

86
00:06:11.858 --> 00:06:18.294
to your previous Mac will not work
on the new one by default, okay?

87
00:06:18.294 --> 00:06:19.850
Make sense?

88
00:06:19.850 --> 00:06:23.107
So that's why it's a second
factor authentication,

89
00:06:23.107 --> 00:06:27.071
because if it's the first factor
authentication or the only one,

90
00:06:27.071 --> 00:06:29.922
we will lose the account
when we buy a new phone.

91
00:06:31.527 --> 00:06:32.240
Make sense?

92
00:06:32.240 --> 00:06:35.833
Or when we buy a new computer,
or if my USB key is broken,

93
00:06:35.833 --> 00:06:37.290
I need to buy a new one.

94
00:06:38.450 --> 00:06:44.250
So that's why typically, originally, its
work as a second factor authentication.

95
00:06:44.250 --> 00:06:50.430
We still need another first
way to authenticate the user.

96
00:06:50.430 --> 00:06:56.694
But if you remember when
we saw these Diagram, okay?

97
00:06:59.505 --> 00:07:01.600
We are talking about this.

98
00:07:01.600 --> 00:07:03.312
So we are here, okay?

99
00:07:03.312 --> 00:07:08.139
We are here, but there are still
one more layer up that we will

100
00:07:08.139 --> 00:07:11.653
cover by the end of today's course, okay?

101
00:07:11.653 --> 00:07:16.818
But we are here, that means that when we
are here typically we also have a form

102
00:07:16.818 --> 00:07:21.744
based authentication or another
kind of multi-factor authentication

103
00:07:21.744 --> 00:07:26.264
because if not, we'll lose our
account if we lose the device being

104
00:07:26.264 --> 00:07:30.327
the platform authenticator or
the FIDO2 authenticator.

105
00:07:30.327 --> 00:07:31.030
Make sense?

106
00:07:31.030 --> 00:07:34.613
Today it works on every browser,
with different techniques and

107
00:07:34.613 --> 00:07:37.040
abilities based on the browser.

108
00:07:37.040 --> 00:07:42.265
It can be a PIN-based software key,
the browser can ask me for

109
00:07:42.265 --> 00:07:48.612
a pin, like I wanna save these credentials
but under a pin that you define.

110
00:07:50.169 --> 00:07:54.486
It can be a FIDO2 USB key,
such as Yubico, or

111
00:07:54.486 --> 00:07:59.161
any other company that is
making these USB keys.

112
00:07:59.161 --> 00:08:06.110
By the way, there are FIDO2 compatible
Apps for mobile devices as well.

113
00:08:06.110 --> 00:08:10.183
So you can use your mobile
device as some kind of key.

114
00:08:10.183 --> 00:08:14.395
And also we have biometric authenticators,
Touch ID, Face ID,

115
00:08:14.395 --> 00:08:16.326
Windows Hello, or Android.

116
00:08:16.326 --> 00:08:23.152
It's the same API, it's the same
way to store credentials, okay?

117
00:08:23.152 --> 00:08:28.641
As Web developers,
we cannot request Face ID,

118
00:08:28.641 --> 00:08:32.080
we request authentication.

119
00:08:32.080 --> 00:08:39.413
Each device, each browser will pick
whatever solution it has to offer you,

120
00:08:39.413 --> 00:08:43.434
but you can express, what do you prefer?

121
00:08:43.434 --> 00:08:48.429
Like I prefer platform
authenticators over USB keys,

122
00:08:48.429 --> 00:08:52.550
I prefer uses presence, what is that?

123
00:08:52.550 --> 00:08:59.623
If it's a pin, it can be a bot that
is typing the pin, makes sense?

124
00:08:59.623 --> 00:09:04.857
If it's a USB, I'm not sure,
does anyone has a USB key?

125
00:09:04.857 --> 00:09:06.092
Have you ever seen one.

126
00:09:08.050 --> 00:09:10.150
No, I will show you one in a minute.

127
00:09:10.150 --> 00:09:14.165
Not the flash drive,
I'm talking about the security USB key.

128
00:09:14.165 --> 00:09:19.230
&gt;&gt; Do crypto hardware
wallets use that mechanism?

129
00:09:19.230 --> 00:09:24.109
&gt;&gt; So crypto wallets, hardware like
Ledger, they are similar, typically

130
00:09:24.109 --> 00:09:29.790
they're not FIDO2 compatible, you might
have one that is also FIDO2 compatible.

131
00:09:29.790 --> 00:09:32.594
So the technology behind is similar, but

132
00:09:32.594 --> 00:09:37.013
typically you cannot use that one for
storing these keys, okay?

133
00:09:37.013 --> 00:09:41.960
But they could technically depends on
the software actually that they have.

134
00:09:41.960 --> 00:09:46.462
But typically it's not just you plug
something on your USB and that's all.

135
00:09:47.669 --> 00:09:51.840
You also need to interact with the key,
that's mandatory.

136
00:09:51.840 --> 00:09:54.920
So you need to put your finger
over the key, for example.

137
00:09:54.920 --> 00:09:59.361
And that doesn't mean that the key
will read your fingerprint, no,

138
00:09:59.361 --> 00:10:01.517
but it needs human interaction.

139
00:10:01.517 --> 00:10:06.590
So when you are using the API,
you can say, hey, you know what?

140
00:10:06.590 --> 00:10:11.072
I need an authenticator that
will require user interaction.

141
00:10:11.072 --> 00:10:14.792
Of course, Touch ID, Face ID,
they all require user interaction

