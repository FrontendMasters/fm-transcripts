WEBVTT

1
00:00:00.000 --> 00:00:02.353
Credential management API.

2
00:00:02.353 --> 00:00:06.470
The question here is that
can we create an auto login?

3
00:00:06.470 --> 00:00:09.330
First, how do we do auto login?

4
00:00:09.330 --> 00:00:12.430
We need the credentials client side,
right?

5
00:00:12.430 --> 00:00:16.050
So we need to save client inside,
the username and the password.

6
00:00:16.050 --> 00:00:20.743
So then we can autofill the form,
and send the form.

7
00:00:20.743 --> 00:00:25.800
The problem is that where
are we going to save the data?

8
00:00:25.800 --> 00:00:33.086
We have IndexedDB, we have local storage,
but all of them are currently public,

9
00:00:33.086 --> 00:00:39.010
and really insecure in terms of
saving passwords and secret data.

10
00:00:39.010 --> 00:00:41.060
So it's a very bad idea.

11
00:00:41.060 --> 00:00:47.331
Well, fortunately, what we have
available is credential management API.

12
00:00:47.331 --> 00:00:50.831
The credential management API,
let us save and

13
00:00:50.831 --> 00:00:54.690
retrieve data in the browser's
password manager.

14
00:00:54.690 --> 00:01:00.280
So the same password manager that
you saw before that were appearing

15
00:01:00.280 --> 00:01:05.100
automatically can now be
accessed through an API, okay?

16
00:01:05.100 --> 00:01:10.920
So we start now talking about APIs
that maybe you haven't heard before.

17
00:01:10.920 --> 00:01:14.748
The password manager accepts
to store credentials, so

18
00:01:14.748 --> 00:01:19.480
that's username and password,
the pair of username and password.

19
00:01:19.480 --> 00:01:24.468
Also federated credentials, that's how
you can actually save metadata that is

20
00:01:24.468 --> 00:01:28.809
coming from signing in with Google,
or signing in with Apple, okay?

21
00:01:28.809 --> 00:01:31.316
So that's not just user name and password,

22
00:01:31.316 --> 00:01:35.940
because you don't get Google's user name
and password when you are doing this.

23
00:01:35.940 --> 00:01:39.191
You'll get the token,
and metadata, IDs, and

24
00:01:39.191 --> 00:01:41.895
some things that we will see in a minute.

25
00:01:41.895 --> 00:01:45.290
Well, you can save that also
in the Password Manager.

26
00:01:45.290 --> 00:01:52.150
And the credential management, API can
also store public and private keys.

27
00:01:52.150 --> 00:01:58.470
In fact, that's the API that
WebAuthn is using behind the scenes.

28
00:01:58.470 --> 00:02:03.404
So WebAuthn, Web Authentication,
that we haven't seen that yet,

29
00:02:03.404 --> 00:02:08.520
but is the API that let us use biometric
authentication on the browser.

30
00:02:08.520 --> 00:02:13.150
It's using credential management
API behind the scenes, okay?

31
00:02:13.150 --> 00:02:18.267
And we can with this
implement autoloading safely,

32
00:02:18.267 --> 00:02:24.546
because we can save our credentials
in the browser secure bolt,

33
00:02:24.546 --> 00:02:32.350
and retrieve that later without actually
being insecure, okay, make sense?

34
00:02:32.350 --> 00:02:37.578
For credentials, both username and
password, so plain credentials and

35
00:02:37.578 --> 00:02:41.383
federated credentials,
this API is chromium only.

36
00:02:41.383 --> 00:02:46.048
So it will work in Google Chrome,
in Microsoft Edge, Opera,

37
00:02:46.048 --> 00:02:48.840
Brave, Samsung Internet browser.

38
00:02:48.840 --> 00:02:53.834
So not on Safari or Firefox, but
Safari and Firefox are supporting,

39
00:02:53.834 --> 00:02:59.280
credential Management is coming on
Firefox, but for now, not on Safari.

40
00:02:59.280 --> 00:03:06.606
On Safari, it's used only for public and
private keys, so the API is there.

41
00:03:06.606 --> 00:03:10.795
So we are going to see in a couple
of minutes how to detect API.

42
00:03:10.795 --> 00:03:14.505
So the API is there, so in Safari,
if you check the object,

43
00:03:14.505 --> 00:03:19.420
the object is there, but it's not there
for saving our own passwords, okay?

44
00:03:19.420 --> 00:03:22.000
It's there for web authentication.

45
00:03:22.000 --> 00:03:26.387
So we need to be very careful how we
use feature detection here, okay?

46
00:03:26.387 --> 00:03:31.103
Because maybe the API is there,
but not for

47
00:03:31.103 --> 00:03:34.122
what we want, make sense?

48
00:03:34.122 --> 00:03:36.749
So Safari only supports the public and

49
00:03:36.749 --> 00:03:40.700
private key parts that is being
used by the WebAuthn API.

50
00:03:40.700 --> 00:03:43.905
So the API is actually pretty simple.

51
00:03:43.905 --> 00:03:49.168
So, it's navigator.credentials.store
that will store credentials,

52
00:03:49.168 --> 00:03:54.110
and you can create federated credentials,
or password credentials.

53
00:03:54.110 --> 00:03:58.718
Password credentials receive ID and
password, the ID is your username or

54
00:03:58.718 --> 00:04:02.301
your email or your number,
you decide what it is, okay?

55
00:04:02.301 --> 00:04:06.640
But it's a key value, so it's username and
the password, that's all.

56
00:04:06.640 --> 00:04:09.747
So, you call this, and Chrome, or

57
00:04:09.747 --> 00:04:14.415
the browser will actually
save that locally, okay?

58
00:04:14.415 --> 00:04:17.874
It can be Edge as well,
it works with Edge.

59
00:04:17.874 --> 00:04:20.596
And to retrieve the password is.get.

60
00:04:20.596 --> 00:04:23.782
Navigator.credentials.get, and

61
00:04:23.782 --> 00:04:29.560
we can request to get only usernames,
or username, and passwords.

62
00:04:29.560 --> 00:04:34.207
And if you look at the API, the API
is actually too simple, I would say,

63
00:04:34.207 --> 00:04:36.624
not just simple, it's too simple.

64
00:04:36.624 --> 00:04:41.240
For example, what happens if the user
has more than one credential stored for

65
00:04:41.240 --> 00:04:42.030
my website?

66
00:04:42.030 --> 00:04:44.140
I cannot pick which one do I want.

67
00:04:44.140 --> 00:04:48.812
In fact, this will trigger
a dialogue in for the user,

68
00:04:48.812 --> 00:04:52.583
the user will pick the credential, not us.

69
00:04:52.583 --> 00:04:59.347
So I cannot request the password for
the user m@m.com, I can just request hey,

70
00:04:59.347 --> 00:05:04.535
browser, bring me username and
password from this website.

71
00:05:04.535 --> 00:05:08.912
And the user will pick one,
and you will get that one,

72
00:05:08.912 --> 00:05:12.232
the one that the user has chosen, okay?

73
00:05:12.232 --> 00:05:15.483
Also, another limitation of this API,

74
00:05:15.483 --> 00:05:21.325
you cannot remove credentials as
a developer, so the API has no remove.

75
00:05:21.325 --> 00:05:25.585
There have been some discussions
to add that, but right now, no.

76
00:05:25.585 --> 00:05:29.878
So the user has to go and
remove the credentials manually,

77
00:05:29.878 --> 00:05:33.827
I will show you how it looks
like on Chrome in a minute.

