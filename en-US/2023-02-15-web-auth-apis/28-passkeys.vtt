WEBVTT

1
00:00:00.120 --> 00:00:03.223
The last section before
a list of best practices and

2
00:00:03.223 --> 00:00:06.310
what else you can do
is going passwordless.

3
00:00:06.310 --> 00:00:11.880
Remember, the top of our originally
triangle was going passwordless.

4
00:00:11.880 --> 00:00:14.979
So let's remove the password forever.

5
00:00:14.979 --> 00:00:22.601
So today, if you want to be passwordless,
you have Magic Links.

6
00:00:22.601 --> 00:00:24.558
Magic Link says you know what?

7
00:00:24.558 --> 00:00:26.199
I'm checking your email.

8
00:00:26.199 --> 00:00:31.069
I don't even want your password because
someone will break into my systems and

9
00:00:31.069 --> 00:00:35.052
will steal your password, so
don't give me a password please,

10
00:00:35.052 --> 00:00:37.140
she has your email, okay?

11
00:00:37.140 --> 00:00:41.745
And every time you wanna log in,
I will send you a link within like

12
00:00:41.745 --> 00:00:46.194
an one-time password, and
you will log in with that, okay?

13
00:00:46.194 --> 00:00:48.858
This is all the passwordless options,

14
00:00:48.858 --> 00:00:53.782
let's say less secure because of course,
we have one point of failure,

15
00:00:53.782 --> 00:00:59.290
that's the email accounts, if the email
account is hacked, anyone can get in.

16
00:00:59.290 --> 00:01:03.080
So no bank account or
no bank system will use this.

17
00:01:03.080 --> 00:01:07.579
This is for
some websites where security is like

18
00:01:07.579 --> 00:01:11.630
it's not like very strict, it will work.

19
00:01:12.770 --> 00:01:16.666
Then we have OTP,
that's kind of the same thing, but

20
00:01:16.666 --> 00:01:22.483
with SMS one-time password over SMS, I
sent you a code or a Magic Link over SMS.

21
00:01:22.483 --> 00:01:23.281
Okay, but

22
00:01:23.281 --> 00:01:28.800
we know that it also has this problem
that my SIM card can be stolen as well.

23
00:01:30.340 --> 00:01:35.227
And finally, we have passkeys,
that is like the final goal

24
00:01:35.227 --> 00:01:40.041
today in this authentication tunnel,
okay, passkeys.

25
00:01:40.041 --> 00:01:44.050
So let's get deeper with
the idea of passkeys.

26
00:01:44.050 --> 00:01:48.560
Well, first pass keys are just
the new DNA of web of fun.

27
00:01:49.780 --> 00:01:55.363
And if you ask me, I feel like we
will stop using the term WebAuthn,

28
00:01:55.363 --> 00:01:59.568
and we will start talking about passkeys,
okay?

29
00:01:59.568 --> 00:02:04.430
So the idea is to use
WebAuthn as first factor,

30
00:02:04.430 --> 00:02:08.050
that's the idea of a passkey.

31
00:02:08.050 --> 00:02:12.880
That at the end, we can use directly
WebAuthn as the first factor without any

32
00:02:12.880 --> 00:02:17.262
other factor, without passwords,
even without an email address to

33
00:02:17.262 --> 00:02:20.829
contact the user,
it can be a complete anonymous user.

34
00:02:20.829 --> 00:02:23.888
Okay, but that user has the passkey,

35
00:02:23.888 --> 00:02:28.582
the problem with the original
WebAuthn not the original.

36
00:02:28.582 --> 00:02:33.394
The problem with the original
implementations of WebAuthn were

37
00:02:33.394 --> 00:02:35.987
that they were device dependent.

38
00:02:35.987 --> 00:02:38.980
Okay, so the key was restoring the device.

39
00:02:38.980 --> 00:02:41.650
So if you change the device,
you don't have the keys.

40
00:02:41.650 --> 00:02:46.232
With passkeys,
a passkey is a WebAuthn subgroup of

41
00:02:46.232 --> 00:02:51.180
authenticators that are multi-device, how?

42
00:02:51.180 --> 00:02:56.591
They're storing your private keys in
the iCloud, or in Google's account,

43
00:02:56.591 --> 00:03:01.183
or within Microsoft's account,
so then it's multi-device.

44
00:03:01.183 --> 00:03:07.585
So the idea is that if we get to the point
where if you change your device,

45
00:03:07.585 --> 00:03:11.748
you still have access to
the same passkeys, or

46
00:03:11.748 --> 00:03:18.810
if you have multi-devices at home,
you can also reuse your passkeys.

47
00:03:18.810 --> 00:03:22.600
Then we're kind of there,
and that's the idea.

48
00:03:22.600 --> 00:03:27.337
In this case,
authenticators are saving the keys

49
00:03:27.337 --> 00:03:31.410
that we use the term
passkeys in the cloud.

50
00:03:31.410 --> 00:03:36.390
So you can use them on different devices
and even share with other users.

51
00:03:36.390 --> 00:03:41.410
Today, Apple was the first company
implementing passkeys, okay?

52
00:03:41.410 --> 00:03:46.162
So this was implemented since iOS 16 and
since macOS Ventura,

53
00:03:46.162 --> 00:03:48.805
and both are supporting passkeys.

54
00:03:48.805 --> 00:03:53.450
And for example, you can go on your
iPhone to credentials, to passwords.

55
00:03:53.450 --> 00:03:57.108
You will see your passkeys there,
and you can share, with AirDrop,

56
00:03:57.108 --> 00:04:00.360
your passkeys with a friend or
with your partner.

57
00:04:00.360 --> 00:04:04.416
And then your partner will receive
the Passkey, and then he or

58
00:04:04.416 --> 00:04:08.450
she can log in in the same
website with that pass key.

59
00:04:08.450 --> 00:04:09.850
It's like sharing the password.

60
00:04:11.030 --> 00:04:15.950
But now it's not the password
that is insecure, it's a passkey.

61
00:04:15.950 --> 00:04:20.960
And no one can actually, even if someone
can see your public part of the passkey,

62
00:04:20.960 --> 00:04:26.180
nothing happens because you don't have
the private part of your passkey.

63
00:04:26.180 --> 00:04:29.500
That is actually stored
encryptedly in your cloud.

64
00:04:30.540 --> 00:04:32.506
Does it make sense?

65
00:04:32.506 --> 00:04:36.030
And also it includes a conditional UI.

66
00:04:36.030 --> 00:04:40.827
This is part, I think that this is still
the, let's say in mature this part.

67
00:04:40.827 --> 00:04:45.504
The conditional UI, lets the browser owner
complete a login form without the user

68
00:04:45.504 --> 00:04:47.960
typing anything, not even the username.

69
00:04:49.790 --> 00:04:52.560
So it's a complex mechanism.

70
00:04:52.560 --> 00:04:57.725
So in fact, to try this quickly,
if you wanna test past keys and

71
00:04:57.725 --> 00:05:01.628
how they look like,
you can try passkeys.io.

72
00:05:01.628 --> 00:05:06.162
But for that you need
a browser compatible with path

73
00:05:06.162 --> 00:05:10.494
keys is a head Max but
path keys are WebAuthn yes.

74
00:05:10.494 --> 00:05:15.490
But WebAuthn within special
authenticator that is multi device and

75
00:05:15.490 --> 00:05:19.003
that's not available
everywhere these days.

76
00:05:19.003 --> 00:05:26.408
So you can try this on iOS 16 on
Safari 16 on macOS Ventura or greater.

77
00:05:26.408 --> 00:05:30.856
And if you are on desktop Windows,
or Mac, or

78
00:05:30.856 --> 00:05:36.004
Linux, you can use
Chrome Canary these days today,

79
00:05:36.004 --> 00:05:40.350
okay, while shooting this video at least.

80
00:05:40.350 --> 00:05:44.602
So in a few months it will be available
when it's table Chrome Canary

81
00:05:44.602 --> 00:05:47.520
supports passkeys
Chrome Canary on desktop.

82
00:05:47.520 --> 00:05:51.891
I will explain what happens
with Android in a minute, so

83
00:05:51.891 --> 00:05:55.614
passkeys IO will show you
how the UI looks like.

84
00:05:55.614 --> 00:06:00.389
So you put an email here
even if it doesn't exist,

85
00:06:00.389 --> 00:06:05.516
like frontendmasters or
frontend@backend.com.

86
00:06:05.516 --> 00:06:06.784
By the way, look at this,

87
00:06:06.784 --> 00:06:09.790
here you also have a sign in with
passkey directly in the home.

88
00:06:10.850 --> 00:06:12.850
The idea is to make this really quick.

89
00:06:12.850 --> 00:06:19.510
So I say continue, so I will create a new
account and I just set up a passkey.

90
00:06:19.510 --> 00:06:23.766
And you can see that Chrome is
using the passkey word, but

91
00:06:23.766 --> 00:06:28.123
this is Chrome Canary, okay,
it's still not in stable.

92
00:06:28.123 --> 00:06:30.600
So do you wanna create the passkey?

93
00:06:30.600 --> 00:06:34.434
And here it says, this passkey
will only be saved in this device,

94
00:06:34.434 --> 00:06:39.260
this is because I'm not logged in right
now in this particular browser in Canary.

95
00:06:41.590 --> 00:06:44.190
I will put my finger, and I'm logged in.

96
00:06:44.190 --> 00:06:49.160
So now, what's the idea if
I go back to the website?

97
00:06:49.160 --> 00:06:53.290
Okay, let me log out.

98
00:06:53.290 --> 00:06:58.670
When I signed in with pass key I
can just log in with my finger.

99
00:07:00.450 --> 00:07:05.900
On Safari, the UI is already mature,
so it's kind of better.

100
00:07:05.900 --> 00:07:08.763
So passkey.io, I can log in,

101
00:07:08.763 --> 00:07:13.950
let's write another one,
backend@frontend.com.

102
00:07:16.534 --> 00:07:21.788
I'm going to sign up, set up a passkey,
I will use Touch ID or

103
00:07:21.788 --> 00:07:25.718
Face ID, and
this is in the iCloud Keychain.

104
00:07:25.718 --> 00:07:29.888
So I can technically go now to
my iPhone or to my iPad and

105
00:07:29.888 --> 00:07:34.152
using my face, not the real,
not the same finger, but

106
00:07:34.152 --> 00:07:39.480
because with the face or
with the finger, I unlock iCloud.

107
00:07:39.480 --> 00:07:45.939
I can reuse the same passkey and
passkey is appears under system settings,

108
00:07:45.939 --> 00:07:51.695
at least on the Mac and their passwords,
and here they are locked.

109
00:07:51.695 --> 00:07:57.019
So I can see here like,
for example, WebAuth.io,

110
00:07:57.019 --> 00:08:03.916
that's the other one or
passkey.io I can see my passkey from here.

111
00:08:03.916 --> 00:08:06.782
I can see the details,
I can add a password for

112
00:08:06.782 --> 00:08:10.480
the passkey if I want to add from here,
look at this.

113
00:08:10.480 --> 00:08:14.176
I can share the passkey using AirDrop so

114
00:08:14.176 --> 00:08:18.780
I can AirDrop any of you my passkey and
then.

115
00:08:18.780 --> 00:08:23.745
You can log in as myself with my account
because I can share my passkeys.

116
00:08:23.745 --> 00:08:29.265
So now they're gonna not go into shafting
my device not just in my iCloud account,

117
00:08:29.265 --> 00:08:32.790
they're going to be in your
iCloud account as well.

118
00:08:34.790 --> 00:08:35.880
Okay, make sense?

119
00:08:37.020 --> 00:08:41.356
And the next question is what happens if
you are in Google Chrome not supporting

120
00:08:41.356 --> 00:08:43.140
passkeys and you need to log in?

121
00:08:44.220 --> 00:08:45.890
And you're on Windows or Linux.

122
00:08:47.010 --> 00:08:51.140
So when you sign in there,
you will use a phone with QR code.

123
00:08:53.190 --> 00:08:58.350
That option is multi-platform,
multi-browser, multi-operating system.

124
00:08:58.350 --> 00:09:00.950
So if I click there, I get the QR code.

125
00:09:00.950 --> 00:09:04.388
I can use my phone connected
to the same iCloud account and

126
00:09:04.388 --> 00:09:07.470
this is going to connect
through Bluetooth.

127
00:09:07.470 --> 00:09:10.510
Remember, it requires real presence.

128
00:09:10.510 --> 00:09:13.414
Both devices are going to be
connected with Bluetooth,

129
00:09:13.414 --> 00:09:16.019
that means Bluetooth needs
to be on both devices.

130
00:09:16.019 --> 00:09:18.649
And then I can log in on Windows on

131
00:09:18.649 --> 00:09:23.040
Linux with an iPhone with
a passkey that is on iCloud.

132
00:09:25.740 --> 00:09:26.620
Make sense?

133
00:09:26.620 --> 00:09:30.761
So that's how it works,
that's how passkeys work.

134
00:09:30.761 --> 00:09:31.940
What about Android?

135
00:09:33.110 --> 00:09:36.477
So if you search passkeys
Android right now,

136
00:09:36.477 --> 00:09:41.702
you will get into an article from
just a month ago from this recording,

137
00:09:41.702 --> 00:09:48.130
saying that they're bringing passkeys
to Android Chrome, so it's coming.

138
00:09:48.130 --> 00:09:53.993
And today, if you want to play with that,
you can on Chrome Canary, on desktop,

139
00:09:53.993 --> 00:10:00.550
and on Android, Chrome Canary, and
also you need Google Play Services Beta.

140
00:10:00.550 --> 00:10:04.400
So you need to enroll your account,
your Android account,

141
00:10:04.400 --> 00:10:06.641
under Google Play Services Beta.

142
00:10:06.641 --> 00:10:12.721
Wait a couple of hours until the Play
Store replaces your Google Play Services

143
00:10:12.721 --> 00:10:19.000
app in your phone, and then with Chrome
Canary you can try passkeys on Android.

144
00:10:20.410 --> 00:10:24.330
Probably in 2023 this is going
to be available in stable.

145
00:10:24.330 --> 00:10:31.600
Directly, and here you see how
the experience looks like on Android.

146
00:10:31.600 --> 00:10:35.650
So passkeys are multi-vendor,
multi-platform.

147
00:10:35.650 --> 00:10:40.440
The only thing that you need to
implement in your website is WebAuthn.

148
00:10:40.440 --> 00:10:45.109
So our server is passkey compatible
because it's just another

149
00:10:45.109 --> 00:10:47.760
authenticator on top of WebAuthn.

150
00:10:50.550 --> 00:10:51.370
Make sense?

151
00:10:51.370 --> 00:10:55.311
And the final idea is
that if passkeys work.

152
00:10:55.311 --> 00:11:00.811
And users understand what they are,
they will replace passwords

153
00:11:00.811 --> 00:11:07.318
because it's not really secure if you
have passkeys that are really secure.

154
00:11:07.318 --> 00:11:12.916
But as a backup, as a fallback, you have
a password that is one, two, three, four.

155
00:11:12.916 --> 00:11:17.136
If you have that,
then you still have a problem.

156
00:11:17.136 --> 00:11:19.717
So the idea is get rid of the password,

157
00:11:19.717 --> 00:11:25.050
you will only have passkeys that's like
the end goal for web authentication.

