WEBVTT

1
00:00:00.200 --> 00:00:05.627
We don't have the endpoints server
side and we have in api.js,

2
00:00:05.627 --> 00:00:09.648
we have defined the calls
to those endpoints but

3
00:00:09.648 --> 00:00:12.279
we are not calling the API yet.

4
00:00:12.279 --> 00:00:13.967
So let's try to understand the flow.

5
00:00:13.967 --> 00:00:18.980
So I'm going to use a very old method,
okay?

6
00:00:18.980 --> 00:00:25.190
Of doing event binding with Java Script
that is using directly the HTML event.

7
00:00:25.190 --> 00:00:28.204
Of course, we can use add event
listener API if you want, but

8
00:00:28.204 --> 00:00:30.230
I wanna focus here in the form directly.

9
00:00:31.560 --> 00:00:34.690
As I mentioned before,
there are a lot of developers out there.

10
00:00:34.690 --> 00:00:38.453
They're just doing something like this,
like on onclick,

11
00:00:38.453 --> 00:00:43.040
they are calling auth.login,
a function that we need to create, okay?

12
00:00:44.170 --> 00:00:46.170
But that's not a good idea.

13
00:00:46.170 --> 00:00:52.142
I mean it's gonna work, and
in most password managers it will work but

14
00:00:52.142 --> 00:00:55.685
it's much better instead of doing this,

15
00:00:55.685 --> 00:01:00.850
it's much better to go and
add onsubmit over the form.

16
00:01:00.850 --> 00:01:04.165
Does anyone know
the differences between or

17
00:01:04.165 --> 00:01:09.825
the advantages of using submit on
the form instead of click on the button?

18
00:01:09.825 --> 00:01:11.850
Does anyone know?

19
00:01:11.850 --> 00:01:14.660
&gt;&gt; All the form data gets sent.

20
00:01:14.660 --> 00:01:16.342
&gt;&gt; All the form data gets sent but

21
00:01:16.342 --> 00:01:20.652
that's only if you're are getting out
of the single page application, but

22
00:01:20.652 --> 00:01:24.580
you will see that I will keep myself
under a single page application.

23
00:01:24.580 --> 00:01:28.130
So actually we are going to
prevent the form to be submitted.

24
00:01:29.390 --> 00:01:30.404
But by the way,

25
00:01:30.404 --> 00:01:35.650
that also happens with the button because
the button by default is type submit.

26
00:01:35.650 --> 00:01:39.352
So it will happen also on the click.

27
00:01:39.352 --> 00:01:42.280
So it will happen anyway.

28
00:01:42.280 --> 00:01:45.965
Yeah.
&gt;&gt; Is there a specific event type for

29
00:01:45.965 --> 00:01:52.308
form submits that is different and
distinct from button click?

30
00:01:52.308 --> 00:01:53.950
&gt;&gt; Yep.

31
00:01:53.950 --> 00:01:57.285
So these events is not
something I'm creating.

32
00:01:57.285 --> 00:02:00.962
It does exist and
it has existed since probably 98,

33
00:02:00.962 --> 00:02:04.751
something like that
&gt;&gt; Which means that you should utilize

34
00:02:04.751 --> 00:02:08.223
that onsubmit event from
the form because most tooling,

35
00:02:08.223 --> 00:02:13.141
including password managers would be
designed to be triggered from form submits

36
00:02:13.141 --> 00:02:15.820
as opposed to normal button clicks?

37
00:02:15.820 --> 00:02:17.880
&gt;&gt; That's one possible advantage.

38
00:02:17.880 --> 00:02:22.445
So that means that actually if you
are using a password manager and you

39
00:02:22.445 --> 00:02:29.170
are selecting a username from there, you
want that selection to trigger submission.

40
00:02:29.170 --> 00:02:29.670
Yeah?

41
00:02:31.470 --> 00:02:35.661
&gt;&gt; Largely driven for accessibility
because there are multiple ways

42
00:02:35.661 --> 00:02:38.289
that you can ask the form to be submitted.

43
00:02:38.289 --> 00:02:43.642
You could hit the Enter key or
through some other command,

44
00:02:43.642 --> 00:02:50.480
not just clicking the button but-
&gt;&gt; Yeah, that's one of the reasons.

45
00:02:50.480 --> 00:02:56.140
What happens if I'm using
the Enter key in the form, right?

46
00:02:56.140 --> 00:02:59.790
Or if I have a virtual
keyboard on an iPhone.

47
00:02:59.790 --> 00:03:02.470
So I'm typing and
I'm using the Return key.

48
00:03:03.970 --> 00:03:09.237
So if you're just listening for
the click event of a button,

49
00:03:09.237 --> 00:03:14.290
you might not have that
situation when you use the key.

50
00:03:14.290 --> 00:03:19.801
Or for example if you're just telling
a voice assistant hey, submit the form.

51
00:03:19.801 --> 00:03:22.520
It's not actually click on the button.

52
00:03:22.520 --> 00:03:25.420
So it's always a good idea to do this.

53
00:03:25.420 --> 00:03:30.031
I'm going to pass an event, the event
that we'll receive as an argument

54
00:03:30.031 --> 00:03:34.567
because one of the things that we
are going to do is prevent this form to be

55
00:03:34.567 --> 00:03:38.780
submitted with standard,
classic, multi-page solutions.

56
00:03:38.780 --> 00:03:41.918
We're going to keep this within
the same page navigation so

57
00:03:41.918 --> 00:03:44.760
that's why I'm passing the event, okay?

58
00:03:44.760 --> 00:03:49.691
So I'm going to do something
similar on the registration form.

59
00:03:49.691 --> 00:03:55.067
So onsubmit,
I'm going to call Auth.register and

60
00:03:55.067 --> 00:03:58.128
I'm going to pass the event.

61
00:03:58.128 --> 00:04:03.472
And now we need to go and create
the register and the login functions

62
00:04:03.472 --> 00:04:08.538
within the Auth event that we
have in the auth.js file, okay?

63
00:04:08.538 --> 00:04:10.150
Make sense?

64
00:04:10.150 --> 00:04:14.530
Again, if you want to use other event
binding mechanisms, that's fine.

65
00:04:14.530 --> 00:04:16.826
And if you of course if
you're using any library,

66
00:04:16.826 --> 00:04:20.010
it's going to be different how
you're going to do this connection.

67
00:04:20.010 --> 00:04:24.298
If you're using React.jsx or
if you're using Vue.js,

68
00:04:24.298 --> 00:04:27.630
it will change that but
the whole idea works.

69
00:04:27.630 --> 00:04:32.328
Remember that everything that we
are doing here in vanilla.js can be

70
00:04:32.328 --> 00:04:37.269
adaptive to any library because we
are using or we will use during the rest

71
00:04:37.269 --> 00:04:42.305
of the day just client side browser
APIs that can be used from any library.

72
00:04:42.305 --> 00:04:47.676
So now back in Auth JS,
so then I can add here

73
00:04:47.676 --> 00:04:54.844
the register functions that
again I can use this syntax or

74
00:04:54.844 --> 00:05:00.692
I can use colon, event and
then our function.

75
00:05:00.692 --> 00:05:01.481
It's up to you.

76
00:05:01.481 --> 00:05:03.241
It's exactly the same, okay?

77
00:05:03.241 --> 00:05:06.707
If you want to be more compatible
with all the browsers,

78
00:05:06.707 --> 00:05:09.590
maybe their syntax will work better.

79
00:05:09.590 --> 00:05:13.629
They have a function syntax, so
we use colon and arrow function.

80
00:05:13.629 --> 00:05:16.327
I know that when you're
using a transpiler,

81
00:05:16.327 --> 00:05:19.103
you typically don't care about that, okay?

82
00:05:19.103 --> 00:05:21.771
But here we are not using a transpiler,
why?

83
00:05:21.771 --> 00:05:24.921
We are directly brave
JavaScript developers, so

84
00:05:24.921 --> 00:05:29.500
we are directly executing our ECMA
script code directly in the browser.

85
00:05:30.770 --> 00:05:33.490
But if you want the other APIs, it's okay.

86
00:05:33.490 --> 00:05:35.660
If you want the other syntax, it's okay.

87
00:05:36.850 --> 00:05:39.300
So the first thing,
let's start with register.

88
00:05:39.300 --> 00:05:41.492
The first thing is to prevent default.

89
00:05:41.492 --> 00:05:46.182
So event.preventDefault will
actually prevent the browser from

90
00:05:46.182 --> 00:05:50.712
being submitted to the server
I've seen that PHP error, okay?

91
00:05:50.712 --> 00:05:55.745
Where you're sending directly an HTTP
navigation to the server, okay?

92
00:05:55.745 --> 00:05:58.775
Because this is a single page application.

93
00:05:58.775 --> 00:06:03.954
And then I'm going to create that user
object taking the value from the form.

94
00:06:03.954 --> 00:06:10.275
I can use the form data API or just plain
get element by ID or query selector, okay?

95
00:06:10.275 --> 00:06:12.530
Whatever you prefer.

96
00:06:12.530 --> 00:06:19.020
GetElementById and I'm taking from
the register form the name and the value.

97
00:06:21.480 --> 00:06:24.000
Then we have the email and the password.

98
00:06:27.520 --> 00:06:30.946
Register email and the same for password.

99
00:06:33.030 --> 00:06:37.570
Those are the three input
types that I have here.

100
00:06:37.570 --> 00:06:39.270
The trailing comma is fine.

101
00:06:39.270 --> 00:06:42.540
And then with that, I can call my API.

102
00:06:42.540 --> 00:06:48.250
So I can await API.resister
passing that user as an argument.

103
00:06:48.250 --> 00:06:52.261
And because this is promise based,
when I use await,

104
00:06:52.261 --> 00:06:55.390
I need to I async to my register function.

105
00:06:56.680 --> 00:06:59.002
So I can use async await.

106
00:06:59.002 --> 00:07:03.274
So I'm taking the response and
if we want for now,

107
00:07:03.274 --> 00:07:08.790
we can do a console log for
the response chart for the first step.

108
00:07:08.790 --> 00:07:13.000
So then we can see if
something's happening, okay?

109
00:07:14.520 --> 00:07:19.770
And something actually pretty similar
has to be done on the login event.

110
00:07:19.770 --> 00:07:24.646
So it's prevent default as well, because
it's another form, a different form.

111
00:07:24.646 --> 00:07:29.351
By the way as we mentioned before,
it's a very good idea to have two

112
00:07:29.351 --> 00:07:33.649
different HTML forms when it's
a single page application.

113
00:07:33.649 --> 00:07:35.712
If you use the same form,

114
00:07:35.712 --> 00:07:41.522
password managers will get a difficult
time to work properly, okay?

115
00:07:41.522 --> 00:07:44.614
So it's much better to
have complete separate

116
00:07:44.614 --> 00:07:48.826
forms when you are sharing those
forms in the same HTML, okay?

117
00:07:48.826 --> 00:07:50.096
When in the same DOM.

118
00:07:50.096 --> 00:07:53.311
Even if they're not both at
the same time in the DOM, okay?

119
00:07:53.311 --> 00:07:56.317
So it's a good idea to
use different forms.

120
00:07:56.317 --> 00:07:59.385
And if they have different IDs,
even better.

121
00:07:59.385 --> 00:08:04.730
So after, this I'm going to
create also my credential.

122
00:08:04.730 --> 00:08:05.358
I can call your user your credentials.

123
00:08:05.358 --> 00:08:07.244
That is just the email and the password.

124
00:08:07.244 --> 00:08:10.941
So I'm going to be similar to the previous
one so just I'm not taking it from

125
00:08:10.941 --> 00:08:14.479
the register form but from the login
form and it was email and password.

126
00:08:14.479 --> 00:08:21.096
So I'm creating this object
that we are passing through

127
00:08:21.096 --> 00:08:30.310
post through HTTP To
the server login_password.

128
00:08:30.310 --> 00:08:36.434
And in this case, I'm also going to
get the response and waiting for

129
00:08:36.434 --> 00:08:41.680
API login with those credentials
that they have a typo.

130
00:08:41.680 --> 00:08:44.890
So I'm solving the typo like that.

131
00:08:44.890 --> 00:08:48.260
And again for now,
I'm going to do console log response.

132
00:08:48.260 --> 00:08:52.385
And because I've used await,

133
00:08:52.385 --> 00:08:57.160
I also need to async join function.

134
00:08:57.160 --> 00:08:57.910
Okay, make sense?

135
00:08:59.450 --> 00:09:01.430
So that's the first step.

136
00:09:01.430 --> 00:09:04.670
Now we will see what to do with
when we have the response.

137
00:09:04.670 --> 00:09:09.621
Okay, but maybe it's time to try these
because so far, we haven't tested this, so

138
00:09:09.621 --> 00:09:11.440
anything can happen.

139
00:09:11.440 --> 00:09:13.018
So girls your fingers.

140
00:09:13.018 --> 00:09:16.260
By the way,
of course you can use postman or

141
00:09:16.260 --> 00:09:21.590
any other tool first to actually
check your web services.

142
00:09:21.590 --> 00:09:27.133
And the idea here is to try this and
because I have already my server running,

143
00:09:27.133 --> 00:09:32.678
and this server is using Nodemon,
it's taking automatically my changes so

144
00:09:32.678 --> 00:09:36.920
I don't need to stop the server or
run the server again.

145
00:09:36.920 --> 00:09:40.462
So we can go and directly use this.

146
00:09:40.462 --> 00:09:45.271
So I'm going to go back here.

147
00:09:45.271 --> 00:09:48.028
So I'm going to just refresh
the browser just in case.

148
00:09:48.028 --> 00:09:53.478
So if I try any email address like
email@email.com with any password,

149
00:09:53.478 --> 00:09:59.573
remember I'm not validating anything here
and if I try and hit continue, okay?

150
00:09:59.573 --> 00:10:01.173
We can just try to open the console.

151
00:10:01.173 --> 00:10:05.562
So here I can try to log in
with any password, continue and

152
00:10:05.562 --> 00:10:10.975
I am getting a response from the server
saying credentials are wrong.

153
00:10:10.975 --> 00:10:14.077
So well at least we have something, okay?

154
00:10:14.077 --> 00:10:18.095
So we can try to register
a new account first, and

155
00:10:18.095 --> 00:10:23.289
here you can see that first when
I'm trying to change the page,

156
00:10:23.289 --> 00:10:28.760
the password manager says hey,
you're changing the page.

157
00:10:28.760 --> 00:10:30.490
So is that a confirmation of a login?

158
00:10:30.490 --> 00:10:33.530
Maybe, so
do you want to save these credentials?

159
00:10:33.530 --> 00:10:37.260
Maybe it's not the case so
I will say no, not now.

160
00:10:37.260 --> 00:10:41.882
But you can see that when the page
changes, even if it's the single page

161
00:10:41.882 --> 00:10:47.122
application when there was a push a state,
that was the moment where the password

162
00:10:47.122 --> 00:10:51.540
manager said hey, maybe we don't
have those credentials stored.

163
00:10:51.540 --> 00:10:53.367
Do you wanna save them?

164
00:10:53.367 --> 00:10:57.480
Well anyway,
I'm going to register an account.

165
00:10:57.480 --> 00:11:02.375
So I'm going to use my name Max,
just because we're going to take

166
00:11:02.375 --> 00:11:06.900
advantage of not having
strong validation so far.

167
00:11:06.900 --> 00:11:09.700
I'm going to create an email m@m.com,
okay?

168
00:11:09.700 --> 00:11:11.495
Just for faster typing,

169
00:11:11.495 --> 00:11:15.990
I can use my strong password
suggestion which is fine or not.

170
00:11:15.990 --> 00:11:17.240
It's up to you.

171
00:11:17.240 --> 00:11:22.033
Remember the first time you do that in
your browser because it's a clean browser

172
00:11:22.033 --> 00:11:27.197
that I'm using, it's saying hey, we should
save this, so maybe you need to log in.

173
00:11:27.197 --> 00:11:30.705
So we are going to save
this under your account or

174
00:11:30.705 --> 00:11:33.434
we can just use any password, okay?

175
00:11:33.434 --> 00:11:35.140
I'm going to use any passwords such as

176
00:11:37.210 --> 00:11:42.600
Frontendmasters, okay?

177
00:11:42.600 --> 00:11:43.173
So you don't see that of course.

178
00:11:43.173 --> 00:11:47.600
If I register my account,
it says okay true.

179
00:11:48.770 --> 00:11:52.030
So it seems like my flow worked.

180
00:11:52.030 --> 00:11:54.240
How can I check if this works?

181
00:11:54.240 --> 00:12:00.320
Well, I can go back to my code, to my
project, and try to find the database.

182
00:12:02.200 --> 00:12:05.720
And the file is there, auth.json.

183
00:12:05.720 --> 00:12:07.779
If I open that, I have my object.

184
00:12:08.880 --> 00:12:12.450
I have an array of users and
Max is there and

185
00:12:12.450 --> 00:12:16.333
you can see the password
is not in plain text.

186
00:12:16.333 --> 00:12:20.180
I cannot see the password, it's hashed.

187
00:12:20.180 --> 00:12:24.179
So this is the hash that
I can take from here and

188
00:12:24.179 --> 00:12:27.757
try to see if I have
a database of hashes or

189
00:12:27.757 --> 00:12:33.360
if I can try to find which password
belongs to that hash, okay?

190
00:12:33.360 --> 00:12:39.218
So it's not 100% secure, but at least
someone that is opening this file,

191
00:12:39.218 --> 00:12:43.479
someone that has access for
five minutes in the server and

192
00:12:43.479 --> 00:12:48.040
is opening the file will not
see the password easily, okay?

193
00:12:48.040 --> 00:12:51.790
So it's one step, okay?

194
00:12:51.790 --> 00:12:54.090
So the register is working.

195
00:12:54.090 --> 00:12:55.620
So let's see the login.

196
00:12:55.620 --> 00:12:58.570
Now I can save my password, okay?

197
00:12:58.570 --> 00:13:03.510
So this is the time where you
decide to save the password, okay?

198
00:13:03.510 --> 00:13:04.470
Do you have a password?

199
00:13:04.470 --> 00:13:06.960
I can say yes, I can say no,
it's up to you.

200
00:13:06.960 --> 00:13:11.240
And now if I try to log in,
it was m.m.com.

201
00:13:11.240 --> 00:13:14.260
Let's try first, any password.

202
00:13:14.260 --> 00:13:16.960
I'm getting credentials
wrong at the bottom.

203
00:13:16.960 --> 00:13:20.147
Remember that also if
I have a wrong email,

204
00:13:20.147 --> 00:13:25.028
I'm getting the same message,
the same credentials are wrong.

205
00:13:25.028 --> 00:13:29.859
And if everything works
fine like frontendmasters,

206
00:13:29.859 --> 00:13:35.630
continue, I'm getting okay true,
my name and my email.

207
00:13:35.630 --> 00:13:40.870
So, registration and
login processes are working.

208
00:13:40.870 --> 00:13:43.450
I just need to adjust the UI.

209
00:13:43.450 --> 00:13:45.957
So if I can see that on the screen.

