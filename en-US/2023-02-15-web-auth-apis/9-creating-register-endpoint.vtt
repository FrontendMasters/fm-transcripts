WEBVTT

1
00:00:00.260 --> 00:00:03.165
The only thing that I'm
going to change now,

2
00:00:03.165 --> 00:00:08.100
the idea is that we will have now
code that we need to call the server.

3
00:00:08.100 --> 00:00:14.056
So we need to play a little bit on
the server now to create the endpoints,

4
00:00:14.056 --> 00:00:15.959
the database, okay?

5
00:00:15.959 --> 00:00:19.719
And then we're going to
code that from client.

6
00:00:19.719 --> 00:00:22.906
Don't worry, it's not too boring.

7
00:00:22.906 --> 00:00:26.169
You also have the code in
the companion website, but

8
00:00:26.169 --> 00:00:30.561
I'm going to write this first code
at least just to start the engines.

9
00:00:30.561 --> 00:00:33.577
So I'm going to open now server.js.

10
00:00:33.577 --> 00:00:36.022
So I'm going to the backend now, okay?

11
00:00:36.022 --> 00:00:38.127
So let's analyze some parts here.

12
00:00:38.127 --> 00:00:40.987
So you can see that in terms of ExpressJS,

13
00:00:40.987 --> 00:00:46.547
I have only two definitions that it says
that first, it's statically serving,

14
00:00:46.547 --> 00:00:51.232
where is the, here,
it's statically serving the public folder.

15
00:00:51.232 --> 00:00:55.342
So that's why when you try an emesh or
when you try a URL,

16
00:00:55.342 --> 00:00:58.593
it first check in the public folder, okay?

17
00:00:58.593 --> 00:01:02.630
If it's not there,
it continues, and in this case,

18
00:01:02.630 --> 00:01:05.338
it's getting here with this star.

19
00:01:05.338 --> 00:01:11.086
This star, what it's doing is this is
because we are a single page application,

20
00:01:11.086 --> 00:01:14.818
so every other route is also
going to the index HTML.

21
00:01:14.818 --> 00:01:16.921
This is what this is doing, okay?

22
00:01:16.921 --> 00:01:20.529
So here we are going to add
the rest of the endpoints.

23
00:01:20.529 --> 00:01:27.117
And then for the database, For

24
00:01:27.117 --> 00:01:35.536
the database, we are going to use a simple
database library, it's called lowdb.

25
00:01:35.536 --> 00:01:42.753
Just for, let's say, learning purposes and
just to make this faster, I'm doing this.

26
00:01:42.753 --> 00:01:45.766
But if not, it can be MongoDB,
MySQL, wherever you want, okay?

27
00:01:45.766 --> 00:01:47.823
Of course, that will take more time.

28
00:01:47.823 --> 00:01:50.364
We will add a server, and so on.

29
00:01:50.364 --> 00:01:54.025
We are trying to make it
simple with lowdb, and why?

30
00:01:54.025 --> 00:01:59.744
Lowdb, it's an open source library for
Node, also for the browser, but they're

31
00:01:59.744 --> 00:02:04.907
going to use the Node version only,
that writes the content in JSON files.

32
00:02:04.907 --> 00:02:10.500
And that's easy for debugging because
we can actually see the JSON file and

33
00:02:10.500 --> 00:02:14.660
see if the data has been stored or
not or how, okay?

34
00:02:14.660 --> 00:02:18.554
That if it's a MongoDB or something
like that, where I need a viewer,

35
00:02:18.554 --> 00:02:22.320
I need another tool, a dashboard
to actually see what's going on.

36
00:02:22.320 --> 00:02:25.100
So here with these libraries,
it's much simpler.

37
00:02:25.100 --> 00:02:29.660
And the library is just creating a JSON
file here with the name auth.json

38
00:02:29.660 --> 00:02:32.440
in the root folder of the project.

39
00:02:32.440 --> 00:02:36.103
But because we didn't write anything yet,
the file doesn't exist.

40
00:02:36.103 --> 00:02:42.490
But on the first time we write something,
something will appear, okay, makes sense?

41
00:02:42.490 --> 00:02:45.058
So what we need is on the app,

42
00:02:45.058 --> 00:02:49.460
we are going to make a couple
of requests on post.

43
00:02:50.510 --> 00:02:55.516
So for example,
we can say that we will put all the APIs

44
00:02:55.516 --> 00:03:00.090
under the auth folder,
and we can say register.

45
00:03:00.090 --> 00:03:03.951
And if you have experience with Node.js or

46
00:03:03.951 --> 00:03:08.563
ExpressJS, this is how you
define a new endpoint,

47
00:03:08.563 --> 00:03:13.078
in this case, for
the post HTTP action or method.

48
00:03:13.078 --> 00:03:18.634
And just in case, the arguments that we
receive is the request and the response.

49
00:03:18.634 --> 00:03:23.053
So in the request, we will get all
the information coming from the browser.

50
00:03:23.053 --> 00:03:27.869
On the response object,
we will send information to the browser,

51
00:03:27.869 --> 00:03:30.192
that ExpressJS 101, okay?

52
00:03:30.192 --> 00:03:32.570
So what's the idea here?

53
00:03:32.570 --> 00:03:36.965
Well, the idea is that
we are going to create,

54
00:03:36.965 --> 00:03:41.813
first, through these two
lines that we have here,

55
00:03:41.813 --> 00:03:47.140
what we are doing is that we
are reading the body as JSON.

56
00:03:47.140 --> 00:03:49.991
We are parsing the body as JSON.

57
00:03:49.991 --> 00:03:54.869
So that happens automatically,
which means that when the client is

58
00:03:54.869 --> 00:03:59.245
sending us a JSON,
we will get that through request.body.

59
00:03:59.245 --> 00:04:02.072
That's the JSON already parsed, okay?

60
00:04:02.072 --> 00:04:03.173
So for example,

61
00:04:03.173 --> 00:04:08.930
that means that I can create a user object
that we're going to save, okay, like this.

62
00:04:08.930 --> 00:04:11.850
And the name of the user
will come from the body,

63
00:04:11.850 --> 00:04:16.743
from a name property that then we need
to send from the client, okay, or later.

64
00:04:16.743 --> 00:04:18.832
The email, something similar.

65
00:04:20.263 --> 00:04:21.953
And then the password, something similar.

66
00:04:24.741 --> 00:04:28.900
Initially, we will save
the password in plaintext.

67
00:04:28.900 --> 00:04:33.302
So we are going to do it wrong first,
okay, just to see that.

68
00:04:33.302 --> 00:04:35.585
Then we can change it.

69
00:04:35.585 --> 00:04:40.168
So that's the user, and
then I need to save the user.

70
00:04:40.168 --> 00:04:46.636
The thing is that maybe it's a user
that is already registered, right?

71
00:04:46.636 --> 00:04:48.726
So I mean, I could go and

72
00:04:48.726 --> 00:04:54.697
talk to my DB now that this API
works pretty simple, this db.data.

73
00:04:54.697 --> 00:04:58.827
And then over the data object is the root
folder of that JSON file that we

74
00:04:58.827 --> 00:04:59.947
are going to save.

75
00:04:59.947 --> 00:05:04.839
So for example, I can create a users
collection, I can call them users, okay?

76
00:05:04.839 --> 00:05:10.746
And then I can push the user, and
then I can ask to the database to write.

77
00:05:12.786 --> 00:05:15.661
In this case,
it's going to write in the file system.

78
00:05:15.661 --> 00:05:18.269
If not, it's going to be in memory and

79
00:05:18.269 --> 00:05:22.112
it will write at the end of
the server lifecycle, okay?

80
00:05:22.112 --> 00:05:24.571
But if the server is aborted for
some reason,

81
00:05:24.571 --> 00:05:27.169
might change one being the file system,
okay?

82
00:05:27.169 --> 00:05:28.943
So that's why I'm writing immediately.

83
00:05:28.943 --> 00:05:33.892
I'm not taking in consideration here
performance, okay, scalability, okay?

84
00:05:33.892 --> 00:05:37.120
We are trying to understand
authentication here.

85
00:05:37.120 --> 00:05:40.460
One thing at a time, okay?

86
00:05:40.460 --> 00:05:44.066
But the problem is that, yeah,
if I'm registering the same user twice,

87
00:05:44.066 --> 00:05:47.590
I will have two entries,
which doesn't make any sense.

88
00:05:47.590 --> 00:05:53.650
So I should check first if the user
does exist, okay, makes sense?

89
00:05:53.650 --> 00:05:57.733
So to do that, because we will use
that thing a couple of times, so

90
00:05:57.733 --> 00:06:01.965
we will need to check or find a user
in the database a couple of times,

91
00:06:01.965 --> 00:06:04.070
I'm going to create a function.

92
00:06:04.070 --> 00:06:06.828
I could create a class also,
I can do this OOP, but

93
00:06:06.828 --> 00:06:09.830
I will try to make it
as simple as possible.

94
00:06:09.830 --> 00:06:11.832
Then you can rewrite this or

95
00:06:11.832 --> 00:06:18.240
you can refactor this project with your
own way of working without any problem.

96
00:06:18.240 --> 00:06:21.525
So let me go full screen for a second.

97
00:06:21.525 --> 00:06:24.612
So I'm going to create a function,
findUser.

98
00:06:24.612 --> 00:06:28.176
The user will receive an email
that is our key, our username.

99
00:06:28.176 --> 00:06:30.040
That's how we are going to do this.

100
00:06:30.040 --> 00:06:32.551
But if you wanna have a different
username, that's fine.

101
00:06:32.551 --> 00:06:35.178
If you wanna have the email and
the username differently, it's fine.

102
00:06:35.178 --> 00:06:39.767
It's a larger form, more data inside.

103
00:06:39.767 --> 00:06:44.934
And a simpler way to do that
is to get an array of results.

104
00:06:44.934 --> 00:06:47.294
It's always an array
even if it's only one.

105
00:06:47.294 --> 00:06:49.995
So we're going to talk
to the data to users and

106
00:06:49.995 --> 00:06:52.566
we're going to filter that array, okay?

107
00:06:52.566 --> 00:06:56.592
So we will use a lambda expression
using some functional programming.

108
00:06:56.592 --> 00:07:00.303
So for each user,
I will check if the email of the user,

109
00:07:00.303 --> 00:07:05.480
it's equal to the email that we
are receiving as an argument.

110
00:07:05.480 --> 00:07:08.220
This returns an array always.

111
00:07:08.220 --> 00:07:16.285
So I will check if the length of
the array is 0, then I will return.

112
00:07:16.285 --> 00:07:21.831
I can do null or undefined saying, hey,
I don't have that user, it doesn't exist.

113
00:07:21.831 --> 00:07:25.273
Both will work, null,
it's up to you which one do you prefer.

114
00:07:25.273 --> 00:07:30.684
If not,
I'm going to return the first user.

115
00:07:30.684 --> 00:07:32.813
That should be the only one, actually.

116
00:07:35.566 --> 00:07:38.771
So that is simple way to find a user,
makes sense?

117
00:07:38.771 --> 00:07:46.046
So now, before writing the user, I should
check first if that user is found.

118
00:07:46.046 --> 00:07:53.429
So I can say,
userFound = findUser with the email.

119
00:07:56.206 --> 00:08:00.953
And then if the user was found,
I need to do something.

120
00:08:00.953 --> 00:08:02.699
If not, I need to do something else.

121
00:08:02.699 --> 00:08:06.608
So let's organize this.

122
00:08:06.608 --> 00:08:10.229
If the user was found
is user already exists.

123
00:08:10.229 --> 00:08:15.170
So what we need to do,
we need to send an error to the client.

124
00:08:15.170 --> 00:08:20.180
Remember, we are writing the backend
here and we are doing an API.

125
00:08:20.180 --> 00:08:25.305
So what I need to do is to the respond,
I'm going to send, for

126
00:08:25.305 --> 00:08:30.832
example, I can send different code
status like a Forehand rail or

127
00:08:30.832 --> 00:08:34.869
Shasta 200, it's up to you with an object.

128
00:08:34.869 --> 00:08:38.468
And we can say that, okay,
it's false, so it's not okay.

129
00:08:38.468 --> 00:08:44.317
And the message can be something
like the user already exists.

130
00:08:44.317 --> 00:08:48.565
And then we can use that message client
side to render that to the user,

131
00:08:48.565 --> 00:08:49.430
makes sense?

132
00:08:50.960 --> 00:08:55.867
And if it's okay, it seems like
the user is new, so we are good.

133
00:08:58.605 --> 00:09:04.260
After writing the user, I need to
send back an answer that it can be,

134
00:09:04.260 --> 00:09:08.344
okay, true, meaning that, yeah, it worked.

135
00:09:08.344 --> 00:09:12.908
To be in RESTful, 100% compatible,
I should send also

136
00:09:12.908 --> 00:09:17.671
a different status code on the error,
okay, you can do that.

137
00:09:17.671 --> 00:09:21.958
And as I mentioned at
the beginning of this course,

138
00:09:21.958 --> 00:09:27.959
this code will not be right now at
least 100% ready for production.

139
00:09:27.959 --> 00:09:31.664
In fact,
I'm not doing any validation here,

140
00:09:31.664 --> 00:09:35.566
such as if the name is empty,
the email is empty.

141
00:09:35.566 --> 00:09:37.029
So there are many things to do.

142
00:09:37.029 --> 00:09:40.514
So I'm going to leave you
here a couple of marks,

143
00:09:40.514 --> 00:09:46.550
boring things that we need to do that are
not important for the authentication flow.

144
00:09:46.550 --> 00:09:48.484
They are important for production, okay?

145
00:09:48.484 --> 00:09:51.591
So don't leave this code as it is.

146
00:09:51.591 --> 00:09:56.767
But for the flow and to understand
what we need to do as web developers,

147
00:09:56.767 --> 00:10:02.056
we can bypass that part for now, and
then you can add validation, yes.

148
00:10:02.056 --> 00:10:07.157
&gt;&gt; Just wanted to make a comment that for
anybody wanting to dig deeper

149
00:10:07.157 --> 00:10:12.258
into Express and API design,
Scott Moss's version four of the API

150
00:10:12.258 --> 00:10:17.383
design with Node.js course is on
the website and covers Express.

151
00:10:17.383 --> 00:10:23.386
It uses Prisma and Postgres on the
backend, so deeper dive into API design.

152
00:10:23.386 --> 00:10:27.530
&gt;&gt; Yeah, also many of the things
that we will be covering,

153
00:10:27.530 --> 00:10:32.747
you can get deeper in Frontend Masters
library in different courses.

154
00:10:32.747 --> 00:10:33.746
This is infinite.

155
00:10:33.746 --> 00:10:39.919
So that's why we are taking one workshop
at a time, right, one topic at a time.

