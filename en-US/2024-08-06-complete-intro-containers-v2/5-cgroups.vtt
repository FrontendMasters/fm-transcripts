WEBVTT

1
00:00:00.440 --> 00:00:04.060
&gt;&gt; Brian Holt: Now we have
unshared the file system.

2
00:00:04.060 --> 00:00:06.796
We've unshared the namespaces, but

3
00:00:06.796 --> 00:00:12.260
we still have a really big problem
left with kind of our solution here.

4
00:00:12.260 --> 00:00:16.197
So imagine that you're
an ecommerce company and

5
00:00:16.197 --> 00:00:22.000
that tomorrow is Black Friday,
Boxing Day, Singles' Day.

6
00:00:22.000 --> 00:00:24.840
As far as I know, those are the three
biggest shopping days in the year.

7
00:00:24.840 --> 00:00:26.480
So pick the one that makes
the most sense to you.

8
00:00:28.570 --> 00:00:34.676
And Bob and Alice are gearing up
to sell all of their widgets or

9
00:00:34.676 --> 00:00:37.082
stickers or whatever.

10
00:00:37.082 --> 00:00:38.500
Everything's all ready to go.

11
00:00:38.500 --> 00:00:40.051
They're all on their shared server.

12
00:00:40.051 --> 00:00:44.721
They all rented out from Bob's
discount basement servers.

13
00:00:46.001 --> 00:00:49.911
And all of a sudden,
everything goes down, everything crashes.

14
00:00:49.911 --> 00:00:54.747
And so Bob and Alice can sell nothing
because their server has crashed and

15
00:00:54.747 --> 00:00:59.931
Eve is on the other side selling her
wares with no problems whatsoever.

16
00:00:59.931 --> 00:01:04.413
They were cherooted, they were unshared,
they were, all that kind of stuff.

17
00:01:04.413 --> 00:01:05.433
So what happened?

18
00:01:06.843 --> 00:01:09.560
Well, if Eve has her own change rooted,
and

19
00:01:09.560 --> 00:01:12.938
she has her own unshared environment,
what happens,

20
00:01:12.938 --> 00:01:17.285
if she just runs a process that just
eats all of the RAM and pins the CPU?

21
00:01:20.113 --> 00:01:24.493
&gt;&gt; Brian Holt: It's a problem, right,
because there's no limit here there's

22
00:01:24.493 --> 00:01:28.636
nothing limiting Alice from saying
l just give me all the CPU and

23
00:01:28.636 --> 00:01:30.136
give me all of the RAM.

24
00:01:31.656 --> 00:01:35.223
And that that's kind of the last problem
that we need to solve before we've truly

25
00:01:35.223 --> 00:01:38.646
containerized this process so that they
really can't mess with each other.

26
00:01:41.656 --> 00:01:45.782
So enter something called cgroups,
or control groups.

27
00:01:45.782 --> 00:01:49.528
Invented at Google, and
they basically say, all right,

28
00:01:49.528 --> 00:01:53.734
here's this isolated environment,
it only gets this much CPU,

29
00:01:53.734 --> 00:01:58.332
it gets this much RAM, and
once it takes all those things, it's done.

30
00:01:58.332 --> 00:02:02.644
It's a methodology of isolating resources,
right?

31
00:02:02.644 --> 00:02:07.311
Resources in the sense of like
computing resources available

32
00:02:07.311 --> 00:02:09.649
to individual process trees.

33
00:02:12.249 --> 00:02:15.786
&gt;&gt; Brian Holt: So one thing I'm
gonna throw out here is this, is,

34
00:02:15.786 --> 00:02:19.337
this course is specifically
using C groups, v2.

35
00:02:19.337 --> 00:02:22.815
The previous version of this
course taught C groups v1.

36
00:02:22.815 --> 00:02:29.448
So if you run this command right here,
grep -c cgroup /proc/mounts.

37
00:02:30.468 --> 00:02:35.198
So if I run this from within here,
you should get 0 or 1.

38
00:02:35.198 --> 00:02:39.580
If you get more than that,
you are on cgroup's, v1, and

39
00:02:39.580 --> 00:02:44.500
you either need to upgrade your
operating system which I left some

40
00:02:44.500 --> 00:02:49.522
instructions for there. Use,
like a more recent version of Linux.

41
00:02:50.572 --> 00:02:54.273
Or if you really, really want to learn
about cgroups v1, which don't because

42
00:02:54.273 --> 00:02:58.522
they're deprecated the first version of
this course did actually talk about them.

43
00:02:58.522 --> 00:03:02.397
So, this entire exercise is done
here in cgroups V1, okay?

44
00:03:04.852 --> 00:03:07.453
&gt;&gt; Brian Holt: Most of you this should not
be a problem because we're kind of past

45
00:03:07.453 --> 00:03:07.983
that point.

46
00:03:11.297 --> 00:03:12.131
&gt;&gt; Brian Holt: Okay?

47
00:03:14.365 --> 00:03:18.168
&gt;&gt; Brian Holt: So yeah, this was invented
at Google because if Maps has some

48
00:03:18.168 --> 00:03:23.027
infinite loop bug, they didn't want it
to bring down Gmail at the same time.

49
00:03:26.054 --> 00:03:30.385
&gt;&gt; Brian Holt: So it's kind of
a strange API to interact with.

50
00:03:30.385 --> 00:03:33.615
Cgroups at least I found
it's a pseudo file system.

51
00:03:33.615 --> 00:03:35.670
So like you like read and
write to files and

52
00:03:35.670 --> 00:03:38.675
then like those are configurations
to govern your cgroups.

53
00:03:38.675 --> 00:03:43.014
It's kind of strange, but, it actually
ended up being kind of convenient.

54
00:03:43.014 --> 00:03:45.894
And it's pretty easy to script
if you want to do that as well.

55
00:03:49.364 --> 00:03:50.654
So yeah, let's just take a look.

56
00:03:52.104 --> 00:03:58.433
So I am going to open my terminal here,
this is still in,

57
00:03:58.433 --> 00:04:03.162
this is the non-unshared environment.

58
00:04:03.162 --> 00:04:08.048
I still have that one up and running
over here, but I'm gonna be running

59
00:04:08.048 --> 00:04:12.792
all this stuff from my
non-change-rooted unshared environment.

60
00:04:12.792 --> 00:04:15.986
So if I go to cd /sys/fs/cgroup and

61
00:04:15.986 --> 00:04:20.316
I look here there is a bunch
of just stuff, right?

62
00:04:20.316 --> 00:04:24.024
These are all the various
different ways of

63
00:04:24.024 --> 00:04:28.979
interacting with cgroups,
which is kind of cool.

64
00:04:28.979 --> 00:04:34.892
So you can actually just say
like cat cpu.max or something.

65
00:04:34.892 --> 00:04:39.539
And it'll tell you what its current
configuration is at the moment.

66
00:04:39.539 --> 00:04:41.334
And you can modify this as
well which is kind of cool.

67
00:04:43.125 --> 00:04:45.275
You actually can't modify this
right now because it's running, but

68
00:04:45.275 --> 00:04:47.715
if it wasn't running,
you'd be able to modify it.

69
00:04:47.715 --> 00:04:52.445
You can see here CPU, a bunch of
these I don't know what they do.

70
00:04:52.445 --> 00:04:56.279
IO is basically how fast you can read and
write to the disc memory,

71
00:04:56.279 --> 00:04:58.665
as you might imagine, governs the RAM.

72
00:04:58.665 --> 00:05:02.538
How many threads it can spawn
that's kind of an interesting one.

73
00:05:03.668 --> 00:05:08.985
We'll actually modify that one later
to prevent a fork bomb attack,

74
00:05:08.985 --> 00:05:10.734
which is pretty cool.

75
00:05:10.734 --> 00:05:14.148
So this is just, right now,
the root cgroup.

76
00:05:14.148 --> 00:05:15.678
So this governs basically everything.

77
00:05:15.678 --> 00:05:18.608
So you can imagine,
in the root cgroup, it has everything,

78
00:05:18.608 --> 00:05:21.506
because you don't want to
artificially limit your root.

79
00:05:21.506 --> 00:05:22.796
That wouldn't make much sense.

80
00:05:23.976 --> 00:05:27.186
But let's go ahead and
make our own cgroup.

81
00:05:27.186 --> 00:05:29.126
So I'm gonna just make a directory.

82
00:05:29.126 --> 00:05:32.296
I'm gonna call what I call it sandbox,
sandbox.

83
00:05:34.716 --> 00:05:36.708
So I now have a directory
down here called sandbox.

84
00:05:36.708 --> 00:05:41.929
I'm gonna cd into sandbox and look,
it has a bunch of stuff in it.

85
00:05:41.929 --> 00:05:44.899
I just made a directory,
I didn't do anything right.

86
00:05:44.899 --> 00:05:46.893
But it knows that if you're
creating a directory in here,

87
00:05:46.893 --> 00:05:48.319
you're making a new cgroup.

88
00:05:48.319 --> 00:05:53.092
But notice that's not all of them and
that's actually kind of a problem for us.

89
00:05:53.092 --> 00:05:55.535
If I cat cgroup.controllers,

90
00:05:55.535 --> 00:06:01.623
you can see it actually doesn't have any
of the controllers, available to it.

91
00:06:01.623 --> 00:06:07.278
But if I go up a directory into the normal
cgroups and I say cgroup.controllers,

92
00:06:07.278 --> 00:06:11.783
you'll see that it has all of
the controllers available to it.

93
00:06:11.783 --> 00:06:16.244
We want to make these controllers
available to the sandbox cgroup,

94
00:06:16.244 --> 00:06:20.483
which, by the way, you can call
your cgroup whatever you want.

95
00:06:20.483 --> 00:06:22.584
I just called it sandbox
because I am not creative and

96
00:06:22.584 --> 00:06:24.510
I think that's what the doc said.

97
00:06:24.510 --> 00:06:27.918
So, being called my cool cgroup or
something like that, whatever you want.

98
00:06:31.710 --> 00:06:37.069
&gt;&gt; Brian Holt: So,
&gt;&gt; Brian Holt: What

99
00:06:37.069 --> 00:06:40.872
we wanna do is, we wanna add our sandbox.

100
00:06:42.313 --> 00:06:45.303
Our unshared environments to
our sandbox.

101
00:06:46.783 --> 00:06:49.451
So what I'm gonna do is,
I'm gonna pull up this,

102
00:06:49.451 --> 00:06:52.893
I'm gonna find our unshared environment,
right?

103
00:06:52.893 --> 00:06:59.983
This bash right here,
this is the one that we want to add.

104
00:06:59.983 --> 00:07:05.586
So it's whatever one that
comes after unshare so

105
00:07:05.586 --> 00:07:11.054
this bash so
we're gonna find 8262 here and

106
00:07:11.054 --> 00:07:15.155
then we're gonna echo that pid into

107
00:07:15.155 --> 00:07:20.912
/sys/fs/cgroup/sandbox/cgroup.procs.

108
00:07:23.723 --> 00:07:28.123
Okay, so now if I go into sandbox and

109
00:07:28.123 --> 00:07:32.965
I cat cgroup.procs, you can see I have

110
00:07:32.965 --> 00:07:38.125
one process that belongs to that cgroup.

111
00:07:38.125 --> 00:07:40.780
We didn't look at this before.

112
00:07:42.101 --> 00:07:45.508
But if you look at cgroup.procs here,

113
00:07:45.508 --> 00:07:51.261
you'll see that there's a bunch
of other processes in here.

114
00:07:51.261 --> 00:07:53.361
But notice 8262 is not in here.

115
00:07:56.151 --> 00:08:00.321
So a process can only belong to
one cgroup, exactly one cgroup.

116
00:08:00.321 --> 00:08:05.979
So if you move it,
If I said the same thing here but

117
00:08:05.979 --> 00:08:10.533
I put it just in the normal cgroup one and

118
00:08:10.533 --> 00:08:17.157
out of the cgroups proc there,
and I said cat this again,

119
00:08:17.157 --> 00:08:23.923
notice that it's there again,
and if I said cat sandbox.

120
00:08:23.923 --> 00:08:27.515
Notice that just by moving it to the other
cgroup, it was smart enough to go and

121
00:08:27.515 --> 00:08:28.688
say, you moved it.

122
00:08:28.688 --> 00:08:30.648
I'm gonna remove it from the other cgroup.

123
00:08:30.648 --> 00:08:34.846
It does that for you automatically,
which is kind of fun.

124
00:08:34.846 --> 00:08:39.655
So I wanna put that back.

125
00:08:39.655 --> 00:08:48.276
Okay, so and
I have this with the cgroup.procs.

126
00:08:48.276 --> 00:08:50.766
Okay, so now this is now in the cgroup.

127
00:08:50.766 --> 00:08:52.846
The cgroup is doing nothing right now,
right?

128
00:08:52.846 --> 00:08:55.876
But it is part of that cgroup.

129
00:08:55.876 --> 00:09:01.400
Okay, now we wanna get those
controllers available to that cgroup,

130
00:09:01.400 --> 00:09:06.258
we can see that this cgroup,
this root cgroup has all of these

131
00:09:06.258 --> 00:09:11.320
controllers available to it and
that our sandbox one does not.

132
00:09:13.040 --> 00:09:19.830
The reason for that is we have one
called cgroup.subtree_control.

133
00:09:19.830 --> 00:09:21.325
This has nothing in it.

134
00:09:21.325 --> 00:09:25.900
And you're basically saying that
I'm not gonna make any of these

135
00:09:25.900 --> 00:09:29.904
controllers available to any
of my children cgroups.

136
00:09:31.984 --> 00:09:34.284
Now, you might say like, okay,
cool, well, let's just add it.

137
00:09:34.284 --> 00:09:39.360
The problem is that as long as the cgroup
has any process that belongs to it,

138
00:09:39.360 --> 00:09:41.061
we can't actually modify.

139
00:09:41.061 --> 00:09:44.737
What subtree controllers are available,
so we're gonna have

140
00:09:44.737 --> 00:09:48.620
to temporarily move all of the processes
into a different cgroup so

141
00:09:48.620 --> 00:09:51.341
that we can activate
the subtree controller.

142
00:09:51.341 --> 00:09:55.778
So we're gonna say make directory and,

143
00:09:55.778 --> 00:10:02.576
we'll just give the full path,
that always helps people.

144
00:10:02.576 --> 00:10:07.121
cgroup/, I called it other-procs,
you can call it whatever you want.

145
00:10:09.321 --> 00:10:13.714
And I'm gonna say cat

146
00:10:13.714 --> 00:10:19.822
/sys/fs/cgroup.proc.

147
00:10:23.828 --> 00:10:26.316
&gt;&gt; Brian Holt: Is it cgroup.procs?

148
00:10:26.316 --> 00:10:27.071
There we go.

149
00:10:27.071 --> 00:10:31.912
Okay, then we're gonna do

150
00:10:31.912 --> 00:10:37.384
echo 1 into other-proc/cgroup.procs and

151
00:10:37.384 --> 00:10:43.276
we're gonna do that one by one for

152
00:10:43.276 --> 00:10:51.283
each one because you can
only do one at a time.

153
00:10:53.053 --> 00:10:56.783
Again, this wasn't made for
handcrafting containers.

154
00:10:57.963 --> 00:10:59.566
What we're doing it's quite unusual so

155
00:10:59.566 --> 00:11:02.734
no one bothered to make this a better
developer experience, but that's fine.

156
00:11:17.273 --> 00:11:19.970
&gt;&gt; Brian Holt: That might have
been the ps aux are the cat there.

157
00:11:19.970 --> 00:11:25.159
Okay, so now that I've done that 1 by 1,

158
00:11:25.159 --> 00:11:31.216
if I say cat /sys/fs/cgroup/cgroup.procs,

159
00:11:31.216 --> 00:11:35.973
I should have nothing in there.

160
00:11:35.973 --> 00:11:37.547
Good.
If you have anything in there,

161
00:11:37.547 --> 00:11:39.180
just make sure you move
those ones as well.

162
00:11:41.601 --> 00:11:44.471
&gt;&gt; Brian Holt: And then I'm just gonna
grab this one because I don't want to type

163
00:11:44.471 --> 00:11:44.999
it all out.

164
00:11:44.999 --> 00:11:45.705
This one right here.

165
00:11:50.577 --> 00:11:54.173
&gt;&gt; Brian Holt: So echo and
then you're just saying add all of these.

166
00:11:54.173 --> 00:11:59.486
So the plus just means add these
to the subtree controller.

167
00:12:02.330 --> 00:12:07.138
&gt;&gt; Brian Holt: And so now if you say Ls
into sandbox, check this out look at all

168
00:12:07.138 --> 00:12:12.412
the stuff that we have in here now
because we added those controllers

169
00:12:12.412 --> 00:12:16.683
to be able to be available
to this child control group.

170
00:12:19.363 --> 00:12:22.862
Now we can really wreak havoc on whatever
processes are contained in the sandbox,

171
00:12:22.862 --> 00:12:24.343
which is exactly what we wanna do.

