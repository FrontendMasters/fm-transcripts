WEBVTT

1
00:00:00.168 --> 00:00:02.561
&gt;&gt; Brian Holt: What are containers?

2
00:00:02.561 --> 00:00:07.640
I said this before, but I think they
are more simple than you think they are.

3
00:00:07.640 --> 00:00:12.793
If you thought that there was one
super feature called container,

4
00:00:12.793 --> 00:00:14.458
you're incorrect.

5
00:00:14.458 --> 00:00:18.558
It's actually just kind of three features
kind of duct taped together that someone

6
00:00:18.558 --> 00:00:22.023
eventually looked at and said,
that's kind of a container, right?

7
00:00:22.023 --> 00:00:26.099
And then the name stuck and
that's what they are now, right?

8
00:00:26.099 --> 00:00:31.597
It is a Linux jail is what they used
to call them, but now they're called,

9
00:00:31.597 --> 00:00:37.025
a change route or, a jailed process,
right, that's the first thing.

10
00:00:37.025 --> 00:00:41.199
There's namespaces and then there's C
groups, which stands for control groups.

11
00:00:41.199 --> 00:00:45.698
Those three things used together and
nothing else is a container,

12
00:00:45.698 --> 00:00:48.361
which kind of just like melted my mind.

13
00:00:48.361 --> 00:00:52.144
Someone just like, hey,
if I put these three things together,

14
00:00:52.144 --> 00:00:56.994
all of a sudden I have this process that's
contained and can't bust out, right?

15
00:00:56.994 --> 00:00:59.912
That's really all that this is.

16
00:00:59.912 --> 00:01:01.574
So we're gonna do that piece by piece.

17
00:01:01.574 --> 00:01:06.082
We are going to assemble
a container by jailing a process,

18
00:01:06.082 --> 00:01:10.875
like and sharing its resources and
then adding it to a C group.

19
00:01:10.875 --> 00:01:17.049
And then at the end of that we
will have a handcrafted artisan,

20
00:01:17.049 --> 00:01:21.226
made with organic processes container.

21
00:01:21.226 --> 00:01:23.294
You would never do this by yourself,
right?

22
00:01:23.294 --> 00:01:26.097
Why would you ever use anything
besides like docker or container or

23
00:01:26.097 --> 00:01:27.056
something like that?

24
00:01:27.056 --> 00:01:29.386
But I think it's fun, I think it's cool.

25
00:01:29.386 --> 00:01:33.073
And I thought it was cool so
I'm gonna make you do it, if you

26
00:01:33.073 --> 00:01:37.764
just heard a bunch of Linuxy terminology
and that you didn't really get.

27
00:01:37.764 --> 00:01:42.382
There is a course that I think I'm pretty
proud of, we can take this six and

28
00:01:42.382 --> 00:01:47.018
a half light flighty hours of talking
about Linux and the Command-Line.

29
00:01:47.018 --> 00:01:51.986
But I guarantee you I think everyone would
pull something out of it there's a bunch

30
00:01:51.986 --> 00:01:55.445
of cool stuff in here, it's a cool course.

31
00:01:55.445 --> 00:02:00.281
&gt;&gt; Brian Holt: Okay, so
why do we need containers?

32
00:02:00.281 --> 00:02:05.363
Well, back in the ancient olden days,
which I am old enough

33
00:02:05.363 --> 00:02:09.847
to vaguely remember, but
not much older than that.

34
00:02:09.847 --> 00:02:14.055
We had servers in our offices
that the crypt keepers of

35
00:02:14.055 --> 00:02:19.022
the sysadmins would go in there and
they would manage, right?

36
00:02:19.022 --> 00:02:22.469
And they were physical servers on a rack,

37
00:02:22.469 --> 00:02:27.591
on premises inside of your computer or
inside of your office,

38
00:02:27.591 --> 00:02:33.420
or some sort of like Network Operation
Center or something like that.

39
00:02:33.420 --> 00:02:35.638
Called this bare metal, right?

40
00:02:35.638 --> 00:02:39.560
Cuz your code is literally executing on
a server that you could probably walk over

41
00:02:39.560 --> 00:02:42.570
in touch, I have worked in
companies where that was the case.

42
00:02:42.570 --> 00:02:45.278
But let's talk about like some things you
have to worry about not only have to worry

43
00:02:45.278 --> 00:02:46.298
about the code that you wrote,

44
00:02:46.298 --> 00:02:48.597
you have to worry about the operating
system that's running there.

45
00:02:48.597 --> 00:02:52.501
You have to worry about
the hardware that's running on,

46
00:02:52.501 --> 00:02:57.473
you have to worry about those parts
wearing out, or becoming outdated.

47
00:02:57.473 --> 00:03:01.196
Or a bunch of stuff like that, you have to
worry about who can access like you have

48
00:03:01.196 --> 00:03:04.490
to worry about like physical security
of who can access your servers.

49
00:03:04.490 --> 00:03:06.202
You have to worry about
the temperature in there.

50
00:03:06.202 --> 00:03:10.093
You have to worry about the power
that's being served out of there.

51
00:03:10.093 --> 00:03:15.482
As you can see, there's a lot of
stuff here that me as a developer,

52
00:03:15.482 --> 00:03:18.093
I don't wanna do that, right?

53
00:03:18.093 --> 00:03:20.948
And I don't really wanna
hire someone to do that, and

54
00:03:20.948 --> 00:03:24.512
I don't wanna have to own real
estate to house my servers, right?

55
00:03:24.512 --> 00:03:28.376
If I'm just working at a coffee
shop in San Francisco somewhere,

56
00:03:28.376 --> 00:03:31.479
I just wanna write my code and
then put it somewhere.

57
00:03:31.479 --> 00:03:35.525
So bare metal makes the sense if
you are a massive corporation,

58
00:03:35.525 --> 00:03:40.258
you're Microsoft sized, it makes
sense that that economy's at scale to

59
00:03:40.258 --> 00:03:45.245
have a fleet of people managing a fleet
of servers and all those kinda things.

60
00:03:45.245 --> 00:03:48.914
For much of us, it's not practical or
even plausible for

61
00:03:48.914 --> 00:03:51.675
us to be able to handle
these kinda things.

62
00:03:51.675 --> 00:03:54.642
What's the next step up here?

63
00:03:54.642 --> 00:03:56.826
We have what are called virtual machines.

64
00:03:56.826 --> 00:04:01.141
So all sudden we have these servers,
and rather than having to get a new

65
00:04:01.141 --> 00:04:05.258
server every single time that we
need to launch a new application.

66
00:04:05.258 --> 00:04:09.625
We can basically take our server and
subdivide it into smaller machines.

67
00:04:09.625 --> 00:04:10.941
We'll call this a virtual machine, right?

68
00:04:10.941 --> 00:04:15.848
Cuz it's not a physical machine, it's a
logical virtual machine where you're just

69
00:04:15.848 --> 00:04:20.361
kinda saying, this server now has two
virtual servers running on it, right?

70
00:04:20.361 --> 00:04:25.281
Or virtual machines, or VMs,
as everyone tends to call them.

71
00:04:25.281 --> 00:04:28.944
This was amazing when these technology
kinda started coming around,

72
00:04:28.944 --> 00:04:32.607
because all sudden you didn't have
to have a physical, new server for

73
00:04:32.607 --> 00:04:36.037
everything that you wanted to
separate from each other, right?

74
00:04:36.037 --> 00:04:38.183
You either had to have trust that,

75
00:04:38.183 --> 00:04:43.156
if I'm running two servers on this so
that one's not gonna mess with the other.

76
00:04:43.156 --> 00:04:47.587
Now we have VMs where they're actually
physically separated from each other.

77
00:04:47.587 --> 00:04:52.012
What's hard about this is you still have
to manage, the operating system, keeping

78
00:04:52.012 --> 00:04:56.145
all the drivers up to date, all the
security patching, all that kinda stuff.

79
00:04:56.145 --> 00:04:59.116
It's still kind of a pain in the butt,
right?

80
00:04:59.116 --> 00:05:02.420
But it's at least one that a software
developer can manage themselves as

81
00:05:02.420 --> 00:05:06.267
long as, the servers are still somewhere
that they exist you don't have to actually

82
00:05:06.267 --> 00:05:08.128
physically order a new server anymore.

83
00:05:08.128 --> 00:05:10.594
Now this we could actually
put code on there that,

84
00:05:10.594 --> 00:05:12.424
it was untrusted next to each other.

85
00:05:12.424 --> 00:05:17.473
So, a good example of this is like
let's say, Coke and Pepsi have an app

86
00:05:17.473 --> 00:05:22.542
running on the same server that
governs all their soda making, right?

87
00:05:22.542 --> 00:05:26.652
If you're just on the same physical
server, Coke could just connect to it and

88
00:05:26.652 --> 00:05:29.321
then pull Pepsi's recipe or
vice versa, right?

89
00:05:29.321 --> 00:05:33.238
There' no trust there, or rather there's
infinite trust there, and you're just

90
00:05:33.238 --> 00:05:37.167
hoping that the other person doesn't just
start poking around your files, right?

91
00:05:37.167 --> 00:05:40.898
As you can see, kind of a non-starter,
that's where VMs are really nice.

92
00:05:40.898 --> 00:05:44.646
Is that VMs allow you to say,
these are now separated,

93
00:05:44.646 --> 00:05:48.990
this file system cannot
access this file system.

94
00:05:48.990 --> 00:05:52.450
&gt;&gt; Brian Holt: More nefariously, they
could say well, I know I'm on the same

95
00:05:52.450 --> 00:05:56.761
server as my competitor, I'm going to
intentionally bring down the server so

96
00:05:56.761 --> 00:05:59.399
that they can't serve their traffic,
right?

97
00:05:59.399 --> 00:06:03.472
So that's another thing that could
happen here, and much more likely,

98
00:06:03.472 --> 00:06:07.679
is a software developer at one of these
places could accidentally ship a bug

99
00:06:07.679 --> 00:06:09.372
that brings down the server.

100
00:06:09.372 --> 00:06:12.926
And you don't wanna bring down everybody's
server that's on the same server.

101
00:06:12.926 --> 00:06:16.384
So that's where VMs are super helpful,
this, this is your machine,

102
00:06:16.384 --> 00:06:18.916
you can crash it,
you can burn it, we don't care.

103
00:06:18.916 --> 00:06:20.591
You're paying for it, whatever.

104
00:06:20.591 --> 00:06:24.824
So, this is where VMs
have become more useful.

105
00:06:24.824 --> 00:06:29.580
They're individual instances
of an operating system that

106
00:06:29.580 --> 00:06:33.203
allows you to create
separation on a server.

107
00:06:34.281 --> 00:06:37.437
&gt;&gt; Brian Holt: So this comes at
the cost of some performance, right?

108
00:06:37.437 --> 00:06:43.874
As you may imagine, if I have 17 copies
of Debian running on one computer,

109
00:06:43.874 --> 00:06:48.212
I have to pay the cost of
running Debian 17 times.

110
00:06:48.212 --> 00:06:52.221
It's not so high, I mean, Debian's
a pretty efficient operating system,

111
00:06:52.221 --> 00:06:53.897
but it's not nothing, right?

112
00:06:53.897 --> 00:06:58.550
You are just kind of burning resources for
the sake of separation,

113
00:06:58.550 --> 00:07:00.306
it's not free, right?

114
00:07:02.598 --> 00:07:03.316
&gt;&gt; Brian Holt: But generally,

115
00:07:03.316 --> 00:07:07.022
these days we have enough computing power
where that much overhead is probably okay.

116
00:07:07.022 --> 00:07:11.096
Cuz most of it if you're
running training LLMs, yeah,

117
00:07:11.096 --> 00:07:16.219
you're burning an entire country's
worth of energy to create LLMs.

118
00:07:16.219 --> 00:07:18.960
It's okay that you have a couple of
copies of Debian running, right?

119
00:07:18.960 --> 00:07:22.897
So you have to kinda keep in mind
the order of magnitude there.

120
00:07:22.897 --> 00:07:26.376
So let's come to now public cloud.

121
00:07:26.376 --> 00:07:30.599
We have VMs,
I don't wanna run my own server farm.

122
00:07:30.599 --> 00:07:36.138
Now comes AWS, Microsoft Azure,
Google Cloud, Oracle Cloud,

123
00:07:36.138 --> 00:07:40.780
Alibaba, things of the top
five off the top of my head.

124
00:07:40.780 --> 00:07:43.223
Now I can create a VM in the cloud.

125
00:07:43.223 --> 00:07:48.240
I can just like reach out to Amazon say
hey, give me another easy to instance.

126
00:07:48.240 --> 00:07:52.513
And now I can deploy to this
virtual machine somewhere.

127
00:07:52.513 --> 00:07:54.802
And they're gonna handle
all the infrastructure,

128
00:07:54.802 --> 00:07:57.096
all of the management plane,
all that kinda stuff.

129
00:07:57.096 --> 00:08:01.038
So I'm just kinda left to manage,
mostly operating and driver stuff.

130
00:08:01.038 --> 00:08:02.214
If I spin up a new instance,

131
00:08:02.214 --> 00:08:04.576
they'll probably give me
the latest secure version.

132
00:08:04.576 --> 00:08:08.086
So some of that's not necessarily true.

133
00:08:08.086 --> 00:08:09.917
But it's now removed the need for

134
00:08:09.917 --> 00:08:13.064
me to actually have physical
assets somewhere, right?

135
00:08:13.064 --> 00:08:18.222
I can just rent them from somewhere
at a pretty strong premium, right?

136
00:08:18.222 --> 00:08:21.965
If you're willing to run your own cloud,
it's probably, I mean, I don't know,

137
00:08:21.965 --> 00:08:23.635
I'm guessing like 50% cheaper.

138
00:08:23.635 --> 00:08:25.676
You no longer have to have
your own data center, right?

139
00:08:25.676 --> 00:08:28.815
You can actually just rely on Amazon
to have your data center for you.

140
00:08:28.815 --> 00:08:33.592
And even at, a 50% markup, it's probably
a pretty acceptable trade-off, right?

141
00:08:33.592 --> 00:08:36.660
Because that means you don't have to
buy and you don't have to hire and

142
00:08:36.660 --> 00:08:38.742
there's a bunch of stuff
you don't have to do.

143
00:08:38.742 --> 00:08:42.098
It's a good thing to pay them to do
that until you have a certain size.

144
00:08:42.098 --> 00:08:48.916
And even companies today like Stripe,
where I used to work, still 100% on AWS.

145
00:08:48.916 --> 00:08:53.613
They have nothing of their own,
which I think even though they're a $100

146
00:08:53.613 --> 00:08:56.952
billion company,
still makes a lot of sense for them.

147
00:08:56.952 --> 00:08:58.294
There's a lot of tools that help you here.

148
00:08:58.294 --> 00:09:03.139
You have things like Terraform, Chef,
Puppet, Salt, cloud formation, right,

149
00:09:03.139 --> 00:09:07.660
all those kinda things that kind of help
you just spin up and spin down servers.

150
00:09:07.660 --> 00:09:10.985
At the end of the day, everything
we're still talking about, though,

151
00:09:10.985 --> 00:09:12.687
is still virtual machines, right?

152
00:09:12.687 --> 00:09:16.329
It's still an entire copy of
the operating system running.

153
00:09:16.329 --> 00:09:18.778
So we're still paying the cost of
running the entire operating system,

154
00:09:18.778 --> 00:09:20.114
because it is still a virtual machine.

155
00:09:20.114 --> 00:09:22.226
It's still an entire copy
of the operating system.

156
00:09:24.718 --> 00:09:28.697
&gt;&gt; Brian Holt: And there's nothing here
that helps you with orchestration,

157
00:09:28.697 --> 00:09:33.139
which is how do all my apps,
connect to each other or scaling, right?

158
00:09:33.139 --> 00:09:35.275
I guess there are things
like scaling sets.

159
00:09:35.275 --> 00:09:39.851
They can say, if this server gets
too busy, add another server.

160
00:09:39.851 --> 00:09:42.995
There's some of that's kind of
managed plan that you can use.

161
00:09:42.995 --> 00:09:45.694
But we're gonna get into containers,

162
00:09:45.694 --> 00:09:49.877
that's the point of containers
is they're able to do that.

163
00:09:49.877 --> 00:09:54.589
So it's actually just talking about
containers, you're running a copy of

164
00:09:54.589 --> 00:09:58.578
something but you're not actually
running the full copy of it.

165
00:09:58.578 --> 00:10:02.346
And you're just running that
directly on a container daemon, but

166
00:10:02.346 --> 00:10:06.330
you don't have the whole cost of
writing the entire virtual machine.

167
00:10:06.330 --> 00:10:10.391
You don't have that whole cost of,
virtualizing all of your things and

168
00:10:10.391 --> 00:10:12.159
allocating them all that way.

169
00:10:12.159 --> 00:10:17.248
Containers are a much more lighter weight
of being able to do this with strong

170
00:10:17.248 --> 00:10:22.189
security boundaries but not necessarily
as strong as a virtual machine.

171
00:10:22.189 --> 00:10:26.089
So there's actually a way to run
containers as a full virtual machine if

172
00:10:26.089 --> 00:10:27.201
you want to do that.

173
00:10:27.201 --> 00:10:31.930
We're not gonna talk about that, but
having a full separation of a virtual

174
00:10:31.930 --> 00:10:35.309
machine will be a stronger
security separation, but

175
00:10:35.309 --> 00:10:39.232
99.99% of us don't care and
don't need that, right?

176
00:10:39.232 --> 00:10:44.604
If you're just running an app on AWS,
a normal container will do just fine.

177
00:10:44.604 --> 00:10:48.880
And most companies just do it that way.

178
00:10:51.340 --> 00:10:54.335
&gt;&gt; Brian Holt: And they're great,
I use them all the time in my day job.

179
00:10:54.335 --> 00:10:57.136
My last company used them,
my previous company used them before then.

180
00:10:57.136 --> 00:11:00.142
My current company, we're adopting
containers and Kubernetes and

181
00:11:00.142 --> 00:11:01.139
all this kinda thing.

182
00:11:01.139 --> 00:11:09.015
I think it's fair to say it's one of
the most revolutionary infrastructure,

183
00:11:09.015 --> 00:11:13.441
innovations in the past 10, 15 years.

184
00:11:13.441 --> 00:11:15.508
And they're just getting more important,
so

185
00:11:15.508 --> 00:11:18.742
it's awesome that you're here talking
with me about this kinda stuff.

