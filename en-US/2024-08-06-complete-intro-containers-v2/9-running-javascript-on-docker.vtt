WEBVTT

1
00:00:00.130 --> 00:00:03.540
Most of us are developers, or
many of us are developers, so

2
00:00:03.540 --> 00:00:08.265
I'm trying to keep this kind of focused
around development and developer needs.

3
00:00:08.265 --> 00:00:10.732
So let's do some Node stuff, right?

4
00:00:10.732 --> 00:00:11.990
Could be fun.

5
00:00:14.987 --> 00:00:21.056
&gt;&gt; Brian Holt: So do docker run -it

6
00:00:21.056 --> 00:00:27.486
--rm node:20.

7
00:00:30.320 --> 00:00:34.903
&gt;&gt; Brian Holt: What`s kinda cool
about this is, where am I right now?

8
00:00:34.903 --> 00:00:38.406
I am inside of Node, right?

9
00:00:38.406 --> 00:00:40.795
So if I say console.log.

10
00:00:44.647 --> 00:00:49.893
&gt;&gt; Brian Holt: Right, this is directly
inside of the Node.js repl at the moment.

11
00:00:49.893 --> 00:00:53.968
This is what Node does if you don't
give it a file to run, right,

12
00:00:53.968 --> 00:00:55.481
it drops into the repl.

13
00:00:55.481 --> 00:00:56.369
How useful is this?

14
00:00:56.369 --> 00:00:59.001
I'm gonna say, not at all, right?

15
00:00:59.001 --> 00:01:01.569
I had never used the Node.js repl,
why would I [LAUGH]?

16
00:01:01.569 --> 00:01:02.548
Maybe some people do.

17
00:01:02.548 --> 00:01:05.991
It's not a way of interacting with
JavaScript that I'm super interested

18
00:01:05.991 --> 00:01:06.498
in doing.

19
00:01:10.061 --> 00:01:10.759
&gt;&gt; Brian Holt: There we go.

20
00:01:13.729 --> 00:01:14.979
&gt;&gt; Brian Holt: So
that's kind of interesting,

21
00:01:14.979 --> 00:01:16.190
there is a container out there.

22
00:01:16.190 --> 00:01:19.625
It's the Node container,
it's maintained by Docker itself.

23
00:01:19.625 --> 00:01:21.495
Not all of them are, but
this one happens to be.

24
00:01:24.176 --> 00:01:28.796
&gt;&gt; Brian Holt: What operating system
do you think that's running on?

25
00:01:28.796 --> 00:01:32.919
The correct answer to that is,
you probably don't care, [LAUGH] right?

26
00:01:32.919 --> 00:01:35.574
But if you are interested,
you can just say cat.

27
00:01:35.574 --> 00:01:37.352
That's the issue.

28
00:01:37.352 --> 00:01:42.474
I didn't mean to do that,
I meant to say node:20.

29
00:01:46.120 --> 00:01:49.133
&gt;&gt; Brian Holt: And
you can see it is running on Debian 12.

30
00:01:49.133 --> 00:01:51.701
It's kinda interesting, right?

31
00:01:51.701 --> 00:01:55.209
You'll find that a lot of these
end up running on Debian.

32
00:01:55.209 --> 00:02:01.288
It's a very popular way of running
containers, but for good reason.

33
00:02:01.288 --> 00:02:06.790
And again, if you wanna just hop in
there and actually start messing around.

34
00:02:06.790 --> 00:02:09.951
If I just put bash there, now that's
gonna connect me into the container,

35
00:02:09.951 --> 00:02:10.613
running bash.

36
00:02:10.613 --> 00:02:12.821
So now I can do whatever I want.

37
00:02:12.821 --> 00:02:15.991
But now I have node available in here
because it's the node container.

38
00:02:15.991 --> 00:02:20.044
They've installed it there for
me so I can do.

39
00:02:20.044 --> 00:02:24.295
Node has npm, it has all the stuff
that you would need to run node.

40
00:02:24.295 --> 00:02:25.234
It's kinda cool, right?

41
00:02:28.856 --> 00:02:32.909
&gt;&gt; Brian Holt: Now, what happens if I
wanna run node with Alpine instead of

42
00:02:32.909 --> 00:02:33.890
with Debian?

43
00:02:33.890 --> 00:02:36.085
Well, as you might imagine.

44
00:02:38.812 --> 00:02:40.029
&gt;&gt; Brian Holt: 20-alpine.

45
00:02:43.987 --> 00:02:48.906
&gt;&gt; Brian Holt: Runs Node.js,
but runs it on Alpine

46
00:02:48.906 --> 00:02:53.358
instead of running it on Debian.

47
00:02:53.358 --> 00:02:57.924
So they'll have a variety of ways for
you to be able to run Node.

48
00:02:57.924 --> 00:03:02.169
Do I have a link on there, I might.

49
00:03:02.169 --> 00:03:08.116
Let's go look, Docker images, next one.

50
00:03:08.116 --> 00:03:09.311
JavaScript on Docker.

51
00:03:09.311 --> 00:03:11.313
I think this link, yeah.

52
00:03:11.313 --> 00:03:14.360
So if you look at this, this is
the official Docker Hub page for it.

53
00:03:14.360 --> 00:03:20.377
You can see, there are so
many different images for Node.js.

54
00:03:20.377 --> 00:03:22.623
This is for Alpine.

55
00:03:22.623 --> 00:03:28.625
Bookworm, I think,
is a release of Debian, right?

56
00:03:28.625 --> 00:03:31.968
Certainly, bullseye is slim.

57
00:03:31.968 --> 00:03:37.462
So there's Debian,
which is like full fat Debian, right?

58
00:03:37.462 --> 00:03:38.836
And then there's slim.

59
00:03:38.836 --> 00:03:42.569
So they take the Debian container and they
slim it down to just the bare necessities.

60
00:03:42.569 --> 00:03:47.568
It goes from being 900 megabytes for
the full Debian installation to being,

61
00:03:47.568 --> 00:03:51.830
I'm guessing here, 200 megabytes for
the slim installation.

62
00:03:51.830 --> 00:03:52.857
It's much smaller.

63
00:03:55.888 --> 00:03:57.433
&gt;&gt; Brian Holt: What else is on here?

64
00:03:57.433 --> 00:04:00.769
Iron is like the name of what 20 is.

65
00:04:00.769 --> 00:04:08.152
So the name of stable node releases get
assigned a metal or a periodic element.

66
00:04:08.152 --> 00:04:11.217
Iron, I think, is version 20.

67
00:04:11.217 --> 00:04:12.914
Anyway, we can go on and on.

68
00:04:12.914 --> 00:04:13.607
You can see,

69
00:04:13.607 --> 00:04:17.705
there's a lot of different images that
you can use to install Node.js here.

70
00:04:20.583 --> 00:04:24.740
&gt;&gt; Brian Holt: Cool, so
that's goodness, that's pretty fun.

71
00:04:27.265 --> 00:04:31.418
&gt;&gt; Brian Holt: What other ways could
we run JavaScript on the server?

72
00:04:31.418 --> 00:04:35.505
And if your answer is Deno,
you are correct.

73
00:04:35.505 --> 00:04:43.097
Docker run -it denoland/deno.

74
00:04:43.097 --> 00:04:45.160
We're gonna run it with CentOS,

75
00:04:45.160 --> 00:04:49.667
which is just another distribution
here that we could be talking about.

76
00:04:49.667 --> 00:04:54.615
1.42.4.

77
00:04:57.355 --> 00:05:00.072
&gt;&gt; Brian Holt: Welcome to Deno.

78
00:05:00.072 --> 00:05:02.095
Pretty cool.

79
00:05:02.095 --> 00:05:04.398
How many of you have written Deno before?

80
00:05:04.398 --> 00:05:05.328
I have not.

81
00:05:05.328 --> 00:05:09.508
I love JavaScript,
I've written extremely little Deno.

82
00:05:09.508 --> 00:05:13.808
It's just another way of running
JavaScript on the server.

83
00:05:13.808 --> 00:05:17.419
But it's really cool that I didn't
have to go learn how Deno is made.

84
00:05:17.419 --> 00:05:18.641
I don't have to go set it up.

85
00:05:18.641 --> 00:05:20.064
I don't have to understand
anything about it.

86
00:05:20.064 --> 00:05:25.292
I can just run their container,
and it works.

87
00:05:25.292 --> 00:05:30.413
You might wonder, why is it just
Node whereas this has denoland/deno?

88
00:05:30.413 --> 00:05:33.871
Anything that Docker maintains
itself won't have a slash, right?

89
00:05:33.871 --> 00:05:36.699
So Node is maintained by Docker.

90
00:05:36.699 --> 00:05:39.796
Ubuntu is maintained by Docker.

91
00:05:39.796 --> 00:05:44.385
Deno is not maintained by Docker, it's
maintained by the Deno people themselves.

92
00:05:44.385 --> 00:05:48.797
So Denoland is their username,
/deno is the name of the project.

93
00:05:48.797 --> 00:05:51.621
It's like GitHub repositories, right?

94
00:05:51.621 --> 00:05:54.649
That's why there's a slash there.

95
00:05:54.649 --> 00:05:59.373
If I do this again and say deno, this
will actually put me into the repl for

96
00:05:59.373 --> 00:06:03.027
Deno 1.42.4,
which is kinda cool as well, right?

97
00:06:07.571 --> 00:06:11.360
&gt;&gt; Brian Holt: And this is still
valid JavaScript, all still works.

98
00:06:14.346 --> 00:06:15.194
&gt;&gt; Brian Holt: So that's cool.

99
00:06:15.194 --> 00:06:17.299
That's Deno.

100
00:06:17.299 --> 00:06:20.412
I imagine someone else probably thinks,
well, you can do bun.

101
00:06:20.412 --> 00:06:23.098
You absolutely can do bun,
let's do some bun.

102
00:06:23.098 --> 00:06:30.718
So oven/bun:1.1.3 bun repl.

103
00:06:35.654 --> 00:06:36.262
&gt;&gt; Brian Holt: There we go.

104
00:06:36.262 --> 00:06:37.805
We are now in bun.

105
00:06:44.083 --> 00:06:46.337
&gt;&gt; Brian Holt: It's all still JavaScript.

106
00:06:49.335 --> 00:06:53.800
&gt;&gt; Brian Holt: So I'm curious,
what distribution you think they're using?

107
00:06:53.800 --> 00:06:55.803
And I don't remember, so
we're all gonna be surprised.

108
00:06:58.010 --> 00:07:01.558
&gt;&gt; Brian Holt: Debian 11.

109
00:07:01.558 --> 00:07:03.963
Okay, yeah, bun is a very cool project.

110
00:07:03.963 --> 00:07:09.096
It's running using JavaScriptCore,
which is the engine that powers Safari,

111
00:07:09.096 --> 00:07:14.547
as opposed to Node and Deno, which both
run using V8, which is what powers Chrome.

112
00:07:14.547 --> 00:07:16.760
So I'm not gonna go through
all of these for you, but

113
00:07:16.760 --> 00:07:19.797
I took note of a bunch of them that
I thought you might find interesting.

114
00:07:19.797 --> 00:07:25.409
You can see here there's a ruby one,
golang, rust, php, python.

115
00:07:25.409 --> 00:07:29.781
These ones are all maintained
by Docker themselves.

116
00:07:29.781 --> 00:07:35.449
Again, kinda my point here is that any
runtime or language that you wanna do,

117
00:07:35.449 --> 00:07:39.739
there almost certainly exists
a Docker container for it.

118
00:07:39.739 --> 00:07:41.466
Pretty cool, right?

119
00:07:41.466 --> 00:07:44.165
I'm enthused by this because I don't
have to set up languages anymore,

120
00:07:44.165 --> 00:07:44.971
which is such a pain.

121
00:07:44.971 --> 00:07:48.429
I had to do a tiny bit of Rust
work at my new company and

122
00:07:48.429 --> 00:07:50.446
I didn't have to set up Rust.

123
00:07:50.446 --> 00:07:53.156
I was able to just run
this command right here.

124
00:07:55.492 --> 00:07:56.380
&gt;&gt; Brian Holt: It's cool.

