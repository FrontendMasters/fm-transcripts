WEBVTT

1
00:00:00.180 --> 00:00:02.450
&gt;&gt; Brian Holt: So
we talked a little bit about layers.

2
00:00:02.450 --> 00:00:06.110
I'm gonna show you where layers
actually becomes really important.

3
00:00:06.110 --> 00:00:08.962
Every time that you and
I have been going back and forth and

4
00:00:08.962 --> 00:00:12.124
I make one change in the code,
I have to go rebuild the project.

5
00:00:12.124 --> 00:00:14.680
That's normal, that's just how
Docker works, and that's okay.

6
00:00:15.910 --> 00:00:21.323
That's the issue with the way that
we're doing this right now is,

7
00:00:21.323 --> 00:00:24.619
Docker is very smart about rebuilding.

8
00:00:24.619 --> 00:00:27.260
So for example here,
let's get rid of the expose.

9
00:00:29.900 --> 00:00:33.835
&gt;&gt; Brian Holt: It knows every time
that I save a new file in there,

10
00:00:33.835 --> 00:00:36.001
I don't have to redo this.

11
00:00:36.001 --> 00:00:40.346
Nothing changed here, I don't have
to redo this, nothing changed here.

12
00:00:40.346 --> 00:00:46.219
I don't have to redo this, nothing changed
here, and it's smart enough to see,

13
00:00:46.219 --> 00:00:50.539
some files here have changed,
I gotta do stuff now.

14
00:00:50.539 --> 00:00:52.529
And then it'll run everything after this.

15
00:00:53.559 --> 00:00:58.281
So it can't assume that this one's not
gonna change because something that was

16
00:00:58.281 --> 00:01:02.097
done here almost certainly will
affect what's been done here.

17
00:01:02.097 --> 00:01:03.563
Why is that bad?

18
00:01:05.221 --> 00:01:07.103
&gt;&gt; Brian Holt: Every
time you change a file,

19
00:01:07.103 --> 00:01:09.826
you now have to run npm
install every time.

20
00:01:09.826 --> 00:01:15.674
If any one of you are Node developers, you
know that can be extremely painful, right?

21
00:01:15.674 --> 00:01:16.709
You don't wanna do that.

22
00:01:16.709 --> 00:01:21.564
You don't wanna have to install literally
30,000 dependencies every single

23
00:01:21.564 --> 00:01:24.650
time that you change,
the punctuation in your code.

24
00:01:26.210 --> 00:01:27.015
So what do we do about that?

25
00:01:27.015 --> 00:01:28.880
So we don't have endless rebuild time.

26
00:01:30.540 --> 00:01:32.326
Well, you gotta get
a little bit more explicit.

27
00:01:32.326 --> 00:01:36.641
Your Docker files gonna be
a little less pretty, but

28
00:01:36.641 --> 00:01:40.181
your rebuild times will be so much better.

29
00:01:40.181 --> 00:01:45.794
So what I'm gonna do is I'm gonna
say copy --chown and I'm gonna say,

30
00:01:45.794 --> 00:01:52.090
node:node or you can just say node,
node is the name of the group as well.

31
00:01:52.090 --> 00:01:56.210
So if you're familiar with Linux terms,
there's the user in the group.

32
00:01:56.210 --> 00:02:00.108
There is a user called node,
there is a group called node,

33
00:02:00.108 --> 00:02:02.824
this is just being explicit about that.

34
00:02:02.824 --> 00:02:05.186
And I'm going to copy package-lock.

35
00:02:06.976 --> 00:02:09.518
That's actually a clever way of doing it.

36
00:02:09.518 --> 00:02:13.204
I was gonna do package.json and

37
00:02:13.204 --> 00:02:17.581
then package-lock.json and ./.

38
00:02:23.191 --> 00:02:26.905
&gt;&gt; Brian Holt: So this will copy,
just the package.json, and

39
00:02:26.905 --> 00:02:29.815
the package-lock and nothing else.

40
00:02:32.657 --> 00:02:36.050
&gt;&gt; Brian Holt: And it's gonna copy
into whatever home directory we're in.

41
00:02:36.050 --> 00:02:38.660
Actually, that that was pretty clever
that you could actually just put star

42
00:02:38.660 --> 00:02:39.205
here, right?

43
00:02:39.205 --> 00:02:45.564
And that'll actually pick up both of them,
which kinda fun, right, same shit.

44
00:02:49.166 --> 00:02:53.714
&gt;&gt; Brian Holt: Okay, and
now I can say RUN npm ci, right?

45
00:02:53.714 --> 00:02:54.527
I can get rid of that.

46
00:02:55.537 --> 00:03:00.443
And now what's awesome about this is,
it's gonna copy the package.json,

47
00:03:00.443 --> 00:03:02.732
it's gonna RUN npm ci.

48
00:03:02.732 --> 00:03:07.393
And then now, anytime I just change,
my index.js or my routes.js,

49
00:03:07.393 --> 00:03:12.845
it sees that my package.json and
my package-lock.json didn't change at all,

50
00:03:12.845 --> 00:03:15.462
and it's not going to copy them again.

51
00:03:15.462 --> 00:03:21.012
It's just gonna pull these cache layers
in and it'll only run this step again.

52
00:03:21.012 --> 00:03:26.934
Someone might criticize me here and say,
you're copying your package files twice,

53
00:03:26.934 --> 00:03:30.563
and my response to you is,
I do not care, who cares?

54
00:03:31.623 --> 00:03:37.233
You would have some big gross command to
exclude them, why not just copy twice?

55
00:03:37.233 --> 00:03:39.268
No one's gonna get it hurt
by doing it that way.

56
00:03:41.972 --> 00:03:44.826
&gt;&gt; Brian Holt: So again,
we had to split this into two commands.

57
00:03:44.826 --> 00:03:48.047
But this is gonna go so
much faster, right?

58
00:03:48.047 --> 00:03:52.272
I don't have to RUN npm ci anymore,
every single time.

59
00:03:52.272 --> 00:03:57.111
&gt;&gt; Speaker 2: And that would be the same
story for running NPM build after

60
00:03:57.111 --> 00:04:02.420
you copy the node stuff in or
the other code, right?

61
00:04:02.420 --> 00:04:06.154
&gt;&gt; Brian Holt: What's hard about that is
that is going to depend on all the files

62
00:04:06.154 --> 00:04:08.520
that you're copying in, right?

63
00:04:08.520 --> 00:04:11.844
So if you have, let's say,
half of your project is docs and

64
00:04:11.844 --> 00:04:15.901
half of it is app code, you probably
don't have to rebuild the docs every

65
00:04:15.901 --> 00:04:18.050
single time that you change app code.

66
00:04:18.050 --> 00:04:21.185
So that would be okay to
RUN npm build before then.

67
00:04:21.185 --> 00:04:23.929
So you don't have to do it
every time you change app code.

68
00:04:23.929 --> 00:04:25.799
But if you are running an Astro project,

69
00:04:25.799 --> 00:04:30.387
you actually probably do have to rebuild
your project every single time, right?

70
00:04:30.387 --> 00:04:32.237
So in that case,
this isn't gonna help you.

71
00:04:32.237 --> 00:04:33.987
Does that make sense?

72
00:04:33.987 --> 00:04:35.307
That's a good question.

73
00:04:35.307 --> 00:04:38.169
All right, so I need to build.

74
00:04:38.169 --> 00:04:41.821
&gt;&gt; Brian Holt: So again,
this is coming before, and

75
00:04:41.821 --> 00:04:47.412
you can see it took 0.8 seconds,
and if I do run, cool,

76
00:04:47.412 --> 00:04:52.913
and then now let's just go
change something in our file.

77
00:04:56.176 --> 00:04:57.720
&gt;&gt; Brian Holt: Now I'm
gonna run this again.

78
00:05:00.248 --> 00:05:04.036
&gt;&gt; Brian Holt: And notice that this was
basically almost entirely pulled from

79
00:05:04.036 --> 00:05:05.119
cache, right?

80
00:05:05.119 --> 00:05:09.705
Cached here, cached here, and
only this actually ended up running,

81
00:05:09.705 --> 00:05:11.813
which is what you want, right?

82
00:05:11.813 --> 00:05:14.032
Cuz then you skip that entire step.

83
00:05:14.032 --> 00:05:18.439
So this becomes really important with
things like apt get dependencies.

84
00:05:18.439 --> 00:05:19.686
We'll talk more about those.

85
00:05:20.887 --> 00:05:24.958
Node dependencies, anything that you're
pulling in that is very easily cacheable

86
00:05:24.958 --> 00:05:26.061
and is a slow process.

87
00:05:26.061 --> 00:05:30.246
Anything you can do to get that higher up
in your Docker files is really gonna make

88
00:05:30.246 --> 00:05:31.500
your life a lot easier.

89
00:05:34.278 --> 00:05:35.437
&gt;&gt; Brian Holt: Make sense?

90
00:05:35.437 --> 00:05:35.937
Questions?

91
00:05:38.247 --> 00:05:41.843
&gt;&gt; Speaker 3: The obvious next step is
I don't wanna rebuild my Docker image

92
00:05:41.843 --> 00:05:43.718
every time I change my app code.

93
00:05:44.748 --> 00:05:45.768
&gt;&gt; Brian Holt: I will
show you how to do that.

94
00:05:47.298 --> 00:05:49.404
That is coming, so
a development style container.

95
00:05:49.404 --> 00:05:51.451
I have actually two ways of
showing you how to do that.

96
00:05:56.194 --> 00:05:58.810
&gt;&gt; Brian Holt: And eventually this is the
stuff that you would do with this would

97
00:05:58.810 --> 00:06:00.519
end up just being production container.

98
00:06:00.519 --> 00:06:04.681
Which is to say, you should probably still
pull some of these tricks because saving

99
00:06:04.681 --> 00:06:07.426
times in your build step
does mean something, right?

100
00:06:07.426 --> 00:06:11.356
It depends on how much time you're saving,
but it can be meaningful.

101
00:06:12.876 --> 00:06:14.261
But yeah, I'll show you here in a second.

