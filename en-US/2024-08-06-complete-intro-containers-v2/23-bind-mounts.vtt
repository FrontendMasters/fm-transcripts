WEBVTT

1
00:00:00.130 --> 00:00:03.125
&gt;&gt; Brian Holt: Let's get into
the next part of our course here,

2
00:00:03.125 --> 00:00:05.180
which is the features of Docker.

3
00:00:05.180 --> 00:00:09.921
We're gonna go through kind of what
I would deem to be the more essential

4
00:00:09.921 --> 00:00:14.570
parts of like what Docker is doing
on top of containers for you.

5
00:00:14.570 --> 00:00:18.770
So none of these in and of themselves
are directly containers, but they're like,

6
00:00:18.770 --> 00:00:20.843
how do we give files to To a container.

7
00:00:20.843 --> 00:00:22.713
How do we network with these containers?

8
00:00:22.713 --> 00:00:24.072
How do we use these containers for
development?

9
00:00:24.072 --> 00:00:25.003
Those kind of features.

10
00:00:26.183 --> 00:00:30.920
Yeah, I'll just go ahead and say that at
this point, you basically know as much as

11
00:00:30.920 --> 00:00:35.793
you pretty much ever have to know
about containers as of today, right?

12
00:00:35.793 --> 00:00:38.779
We'll talk about features that go on
top of containers at this point, but

13
00:00:38.779 --> 00:00:41.927
containers don't really get much more
complicated than what we talk about.

14
00:00:41.927 --> 00:00:45.064
You'll look at some Docker files and
see that there are a 100 lines and

15
00:00:45.064 --> 00:00:45.843
stuff like that.

16
00:00:45.843 --> 00:00:48.101
And they have branching logic and
a bunch of stuff like that.

17
00:00:48.101 --> 00:00:52.326
And you can have Docker file templates
if you have to generate ten different

18
00:00:52.326 --> 00:00:54.751
containers based on one kind of manifest.

19
00:00:54.751 --> 00:00:59.199
That's all stuff that I know exists,
but I've never personally had to do and

20
00:00:59.199 --> 00:01:03.648
I can imagine unless you are maintaining
like open source containers that you

21
00:01:03.648 --> 00:01:05.978
will have to do either.

22
00:01:05.978 --> 00:01:09.573
But at this point you're armed with all
the knowledge that you could definitely go

23
00:01:09.573 --> 00:01:11.031
figure it out that they're not so

24
00:01:11.031 --> 00:01:13.654
much more complicated than
what we've shown you already.

25
00:01:13.654 --> 00:01:18.617
Okay, so,
bind mounts right now been kind of just

26
00:01:18.617 --> 00:01:22.882
self containing our containers, right?

27
00:01:22.882 --> 00:01:26.598
We've basically just saying all everything
that we care about in this container gets

28
00:01:26.598 --> 00:01:28.052
kind of put inside of it.

29
00:01:28.052 --> 00:01:30.612
And then when the container goes away,
everything goes with it.

30
00:01:30.612 --> 00:01:33.622
The baby also goes with the bathwater,
proverbially speaking.

31
00:01:36.792 --> 00:01:38.182
That's not always what you want, right?

32
00:01:38.182 --> 00:01:40.028
Sometimes you want data to stick around.

33
00:01:40.028 --> 00:01:42.287
A good example of that
would be a database, right?

34
00:01:42.287 --> 00:01:46.897
If I tear down my database container,
I don't wanna lose all of the data, right?

35
00:01:46.897 --> 00:01:49.087
That's kind of makes sense.

36
00:01:49.087 --> 00:01:53.247
We're gonna talk about volumes
here in a second that handle that.

37
00:01:53.247 --> 00:01:56.128
But for now,
we're gonna talk about bind mounts,

38
00:01:56.128 --> 00:01:58.139
which are a little bit different and

39
00:01:58.139 --> 00:02:02.448
people get confused about the difference
between bind mounts and volumes.

40
00:02:02.448 --> 00:02:04.102
I'm gonna try and
explain it several times to you.

41
00:02:04.102 --> 00:02:07.347
And if you still don't get it,
please stop me because it's important that

42
00:02:07.347 --> 00:02:10.198
you understand the difference
between a bind mount and a volume.

43
00:02:10.198 --> 00:02:13.518
We talked about here that we don't
wanna have snowflake servers, right?

44
00:02:13.518 --> 00:02:16.848
Where we don't wanna basically go and
very handcart our servers.

45
00:02:16.848 --> 00:02:20.189
We wanna have cattle servers so
we can tear down and pull up.

46
00:02:20.189 --> 00:02:24.580
So how do we have a container that is
a cattle server that we can basically use

47
00:02:24.580 --> 00:02:26.950
and reuse and destroy and recreate, but

48
00:02:26.950 --> 00:02:29.827
we wanna use something
locally on our computer?

49
00:02:29.827 --> 00:02:32.666
Like a good example, this is like I'm
doing my development process on my

50
00:02:32.666 --> 00:02:35.899
computer, and I don't have to rebuild
the container every single time, right?

51
00:02:35.899 --> 00:02:39.799
I don't wanna have that high touch kind
of relationship with this container.

52
00:02:39.799 --> 00:02:42.015
That's what a bind mount
is gonna allow you to do.

53
00:02:42.015 --> 00:02:46.748
It's gonna allow you to say like, hey,
these files exist on my local computer and

54
00:02:46.748 --> 00:02:51.235
I wanna use those there, but
I wanna run that through a container.

55
00:02:51.235 --> 00:02:55.155
So if I'm running like my, let's say
my NodeJS server, and I wanna run it in

56
00:02:55.155 --> 00:03:00.215
a Linux environment, and I wanna do active
development on it while it's running.

57
00:03:00.215 --> 00:03:01.289
This is where a bind mount is really cool.

58
00:03:01.289 --> 00:03:05.033
It's basically like a portal to your
local computer that you can do all

59
00:03:05.033 --> 00:03:08.793
your stuff there and it's translated
directly into your container.

60
00:03:08.793 --> 00:03:10.747
You don't have to rebuild your
container every single time.

61
00:03:13.017 --> 00:03:17.361
So this allows them to be essentially
stateful without being annoying,

62
00:03:17.361 --> 00:03:18.792
essentially, right.

63
00:03:18.792 --> 00:03:23.350
So let's talk about more
about these bind mounts and

64
00:03:23.350 --> 00:03:28.326
everything that I've explained so
far is a bind mount.

65
00:03:28.326 --> 00:03:32.264
Another really good example of this is
like let's say you are running your Astro

66
00:03:32.264 --> 00:03:36.084
project locally, and you just want to
like serve it through nginx really quick

67
00:03:36.084 --> 00:03:38.516
to just to make sure that
everything is working.

68
00:03:39.646 --> 00:03:41.835
So you can actually do
that today with this.

69
00:03:41.835 --> 00:03:46.836
Let's go actually go and
make that work, so

70
00:03:46.836 --> 00:03:52.655
let's go into I think I'm in,
I'm on my desktop.

71
00:03:52.655 --> 00:03:54.575
That's where I put it.

72
00:03:56.015 --> 00:03:57.325
Static asset project.

73
00:04:00.260 --> 00:04:01.920
So we have this, we've built it before.

74
00:04:01.920 --> 00:04:03.250
That's what that dis folder is.

75
00:04:03.250 --> 00:04:04.388
You can just do npm run build.

76
00:04:04.388 --> 00:04:08.458
I'm not gonna do that again,
but go into dist and

77
00:04:08.458 --> 00:04:11.550
then I'm just gonna copy and paste.

78
00:04:14.130 --> 00:04:15.960
Actually not from the dist directory.

79
00:04:15.960 --> 00:04:19.116
So just directly from
the project directory here.

80
00:04:19.116 --> 00:04:22.301
And I'm gonna copy and paste all of that.

81
00:04:25.680 --> 00:04:27.198
&gt;&gt; Brian Holt: Yeah,
that's fine I don't care.

82
00:04:29.465 --> 00:04:32.851
&gt;&gt; Brian Holt: So
now in theory if I go to local 8080,

83
00:04:35.006 --> 00:04:35.987
&gt;&gt; Brian Holt: You can see

84
00:04:35.987 --> 00:04:39.486
this is actually serving from NGINX.

85
00:04:42.430 --> 00:04:47.529
&gt;&gt; Brian Holt: I think it should
even say it on my, if I inspect it,

86
00:04:47.529 --> 00:04:53.784
network,
&gt;&gt; Brian Holt: Maybe, it might say it.

87
00:04:56.324 --> 00:04:59.382
No, that's request headers, yeah,
right there, server, nginx.

88
00:05:01.733 --> 00:05:02.403
Kind of cool, right?

89
00:05:04.533 --> 00:05:06.313
So let's talk about we actually ran here.

90
00:05:07.613 --> 00:05:09.522
So docker run, you got that.

91
00:05:09.522 --> 00:05:16.123
And then you understand this part here.

92
00:05:16.123 --> 00:05:17.323
No, not that part yet.

93
00:05:17.323 --> 00:05:21.040
But this part, the port, and we understand
that we ran it for from Nginx latest.

94
00:05:21.040 --> 00:05:25.990
Let's talk about this part right there.

95
00:05:25.990 --> 00:05:28.200
So we're gonna do a bind mount.

96
00:05:28.200 --> 00:05:29.650
That's what the --mount.

97
00:05:29.650 --> 00:05:33.800
We told that the type of mount is bind
as you might imagine there are others.

98
00:05:33.800 --> 00:05:38.180
And then the source, you have to
give it a fully qualified directory.

99
00:05:38.180 --> 00:05:39.627
That's what that PWD is here.

100
00:05:39.627 --> 00:05:41.710
So we're seeing from
the present working directory,

101
00:05:41.710 --> 00:05:44.057
you can also just give it
the full absolute path.

102
00:05:44.057 --> 00:05:45.747
I just didn't wanna figure that out.

103
00:05:45.747 --> 00:05:50.331
And I said from dist, which is a folder
that we were just talking about.

104
00:05:50.331 --> 00:05:53.927
And then the target going to be inside
of that directory that we put all

105
00:05:53.927 --> 00:05:58.037
the files in previously in
the static asset project, right?

106
00:05:58.037 --> 00:06:03.167
So therefore, we just ran Nginx directly
from our command line using docker,

107
00:06:03.167 --> 00:06:08.235
using a bind mount to just serve
everything from dist, kind of cool, right?

108
00:06:08.235 --> 00:06:11.841
I think it's really cool to have
the ability to just spin up nginx really

109
00:06:11.841 --> 00:06:15.497
quickly, do a bunch of stuff with it and
then spin it down.

110
00:06:15.497 --> 00:06:20.101
Now you might say Brian there's a trillion
ways to serve Static assets on my local

111
00:06:20.101 --> 00:06:22.007
computer I can do it with Python.

112
00:06:22.007 --> 00:06:26.634
I can do with PHP was a -s or
stuff like that I can do it

113
00:06:26.634 --> 00:06:30.977
with Serve which is something from
Vercel. Totally.

114
00:06:30.977 --> 00:06:32.839
100% I probably would do like serve or

115
00:06:32.839 --> 00:06:36.472
something like that because it's I can
just do NPX serve and that works as well.

116
00:06:38.272 --> 00:06:43.102
Why I would actually want to do this If I
was testing out configurations with nginx,

117
00:06:43.102 --> 00:06:47.382
because you can also bind mount
the configuration file in there, right?

118
00:06:47.382 --> 00:06:49.407
And you can try a bunch of
different things to try and

119
00:06:49.407 --> 00:06:52.041
see if you can get your
configuration correctly.

120
00:06:52.041 --> 00:06:56.871
Because messing with nginx configuration
is scary in my opinion, right?

121
00:06:58.481 --> 00:07:03.386
So at the end of the day,
yeah, you can do npx, serve,

122
00:07:03.386 --> 00:07:07.058
but this is almost as easy, right?

123
00:07:07.058 --> 00:07:08.299
Which I think is pretty cool, okay?

124
00:07:08.299 --> 00:07:09.761
Little note there if you're not seeing it,

125
00:07:09.761 --> 00:07:11.548
you just have to make sure
that you build the project.

126
00:07:11.548 --> 00:07:15.448
So you have to do the npm install and run
build if you haven't done that already.

127
00:07:15.448 --> 00:07:16.557
Little note there if
you're having some issues.

128
00:07:20.144 --> 00:07:22.426
&gt;&gt; Brian Holt: So, yeah, we'll
talk about volume here in a second, but

129
00:07:22.426 --> 00:07:23.798
right now we're talking about bind.

130
00:07:25.248 --> 00:07:26.898
Talk about that.

131
00:07:26.898 --> 00:07:29.698
That's kind of the whole gist
of what a bind mount is.

132
00:07:29.698 --> 00:07:33.457
I'm not gonna really show you too much
more because there's not really a lot

133
00:07:33.457 --> 00:07:34.053
more to it.

134
00:07:34.053 --> 00:07:37.348
One thing that you do want to be careful
of, like here's a really good example.

135
00:07:37.348 --> 00:07:41.017
Let's say we're bind mounting our
entire dev project into a container so

136
00:07:41.017 --> 00:07:42.984
that we can do container development.

137
00:07:42.984 --> 00:07:45.964
There's things that I'm gonna show you
here in a little bit that just kind of

138
00:07:45.964 --> 00:07:47.642
handle that tool chain for you.

139
00:07:47.642 --> 00:07:49.712
But let's say you were
doing it by yourself.

140
00:07:49.712 --> 00:07:52.764
Let's say you ran npm
install locally on Mac OS and

141
00:07:52.764 --> 00:07:55.892
then you bind mounted that into Linux.

142
00:07:55.892 --> 00:08:01.704
You potentially have a mismatch of
native dependencies because if you

143
00:08:01.704 --> 00:08:07.430
npm install on Mac, it's gonna
install your dependencies for Mac.

144
00:08:07.430 --> 00:08:10.297
And then if you bind mount that into
Linux, Linux and be like, this is for Mac,

145
00:08:10.297 --> 00:08:12.420
I don't know what to do with this, right?

146
00:08:12.420 --> 00:08:13.428
So if you're gonna do that,

147
00:08:13.428 --> 00:08:16.044
make sure that you're running your
npm install inside of the container.

148
00:08:16.044 --> 00:08:19.318
Which is annoying because now every
time that you start your container,

149
00:08:19.318 --> 00:08:21.098
you do have to run npm install again.

150
00:08:21.098 --> 00:08:25.404
Or have some black magic where you install
your local dependencies for Linux.

151
00:08:26.654 --> 00:08:28.064
Just sounds like a terrible idea to me.

152
00:08:28.064 --> 00:08:31.651
So anyway, that's something to keep in
mind is that you're now kind of like

153
00:08:31.651 --> 00:08:35.069
traversing between worlds and you have
to make sure that you are ready for

154
00:08:35.069 --> 00:08:37.644
whatever operating system
you're gonna be in.

155
00:08:37.644 --> 00:08:39.284
So, bind mounts, I think are pretty clear.

156
00:08:39.284 --> 00:08:43.748
It's for when you wanna share local
state from your host operating system

157
00:08:43.748 --> 00:08:45.260
to containers, right?

158
00:08:45.260 --> 00:08:47.220
I think that tracks.

159
00:08:47.220 --> 00:08:50.262
As you might imagine, anything that you
save in your bind mount will be saved

160
00:08:50.262 --> 00:08:51.888
to your local computer as well, right?

161
00:08:51.888 --> 00:08:54.068
So that it can work both ways.

