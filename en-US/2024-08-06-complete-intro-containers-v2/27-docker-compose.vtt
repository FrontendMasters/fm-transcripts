WEBVTT

1
00:00:00.000 --> 00:00:03.167
&gt;&gt; Brian Holt: So we talked about how to
like kind of connect all these things

2
00:00:03.167 --> 00:00:06.098
together manually,
which again, I don't really do.

3
00:00:06.098 --> 00:00:09.832
I learned how to do a bunch of this
like networking stuff, mostly for

4
00:00:09.832 --> 00:00:11.018
this class, right?

5
00:00:11.018 --> 00:00:15.050
You basically never have to do it,
just like you don't really need to create

6
00:00:15.050 --> 00:00:19.597
containers by hand, because there's tools
that just do it for you much more simply.

7
00:00:19.597 --> 00:00:23.300
So I'm gonna show you two of them.

8
00:00:23.300 --> 00:00:27.810
We're gonna talk about Docker Compose, and
we're gonna talk about Kubernetes, and

9
00:00:27.810 --> 00:00:30.652
then I'm gonna add this
project here called kompose,

10
00:00:30.652 --> 00:00:34.751
with a K that takes Docker Kompose files
and makes them into Kubernetes files.

11
00:00:34.751 --> 00:00:39.205
Let's talk about just briefly
the difference of use cases here

12
00:00:39.205 --> 00:00:43.407
Docker Compose is for,
I'm gonna say one it's perfect for

13
00:00:43.407 --> 00:00:48.301
just local use cases where you're
I need to spin up five containers.

14
00:00:48.301 --> 00:00:50.424
I need them to network over this way.

15
00:00:50.424 --> 00:00:52.700
And this is how I'm going
to do all my development.

16
00:00:52.700 --> 00:00:57.178
Docker compose is like a plus
definitely use Docker Compose,

17
00:00:57.178 --> 00:00:59.425
that's what it's built for.

18
00:00:59.425 --> 00:01:02.532
They used to say don't use
Docker Compose in production and

19
00:01:02.532 --> 00:01:04.531
they've kind of ruled that back now.

20
00:01:04.531 --> 00:01:08.145
He's like, if you have a simple use
case with like five containers and

21
00:01:08.145 --> 00:01:10.853
like that's it, or
five container types, right?

22
00:01:10.853 --> 00:01:14.772
Docker Compose can handle that
kind of traffic in production.

23
00:01:14.772 --> 00:01:17.557
Anything that's any more
complicated than that,

24
00:01:17.557 --> 00:01:21.830
or you have things like scale to zero, or
you wanna use things like Native where

25
00:01:21.830 --> 00:01:26.363
there's you have like functions and stuff
like that, running into your cluster,

26
00:01:26.363 --> 00:01:29.171
you're into Kubernetes
territory at that point.

27
00:01:29.171 --> 00:01:34.307
I don't use Kubernetes locally,
I don't build Kubernetes projects myself,

28
00:01:34.307 --> 00:01:37.460
for the most part,
just as a developer, right?

29
00:01:37.460 --> 00:01:42.674
At that point, I probably need Kubernetes
experts help because Kubernetes

30
00:01:42.674 --> 00:01:47.159
is both amazing and it's a pretty
complicated beast to run well.

31
00:01:47.159 --> 00:01:49.682
I'm not gonna say it's overly complicated.

32
00:01:49.682 --> 00:01:54.842
It's as complicated as it needs to be
to handle the use cases that it has.

33
00:01:54.842 --> 00:01:59.896
So, it's a fantastic project.

34
00:01:59.896 --> 00:02:04.311
Okay, so
let's pop into Docker Compose here.

35
00:02:04.311 --> 00:02:07.351
I love it,
I'm a massive Docker Compose fan.

36
00:02:07.351 --> 00:02:09.946
I have been since they first released it.

37
00:02:09.946 --> 00:02:13.489
So, basically everything that we were
doing that we were kind of composing

38
00:02:13.489 --> 00:02:17.220
things by hand using the CLI, it's just
gonna end up in a configuration file.

39
00:02:17.220 --> 00:02:20.905
And what's nice about that is that's
more of our cattle mentality, right?

40
00:02:20.905 --> 00:02:25.466
Where we're able to just like add this
to a Git repo and source control it,

41
00:02:25.466 --> 00:02:29.882
and we can just say docker-compose up and
do everything we need to do and

42
00:02:29.882 --> 00:02:34.315
then tear it all down once we're done
at the end, which I think is cool.

43
00:02:36.975 --> 00:02:41.917
&gt;&gt; Brian Holt: So, one thing,
watch out for this dash here.

44
00:02:41.917 --> 00:02:47.559
If you see docker-compose,
that is V1 of Docker Compose.

45
00:02:47.559 --> 00:02:52.031
If you see a docker space compose,
that's V2.

46
00:02:52.031 --> 00:02:54.068
I know that confused me for
a long time is like,

47
00:02:54.068 --> 00:02:56.913
why does it sometimes have a dash and
what it is it sometimes not?

48
00:02:56.913 --> 00:02:58.323
That's why.

49
00:02:58.323 --> 00:03:02.438
Docker Compose used to
be its own binary and

50
00:03:02.438 --> 00:03:07.940
now composed is a top level
item inside of the docker CLI.

51
00:03:07.940 --> 00:03:11.823
Functionally for most things that you and
I are gonna be doing,

52
00:03:11.823 --> 00:03:13.517
they're almost the same.

53
00:03:13.517 --> 00:03:17.087
But if you do see like stack overflow
answers that have the dash in them,

54
00:03:17.087 --> 00:03:21.211
just know that you're looking at a V1
answer and it might be slightly different.

55
00:03:21.211 --> 00:03:23.908
So do note that Docker compose
is suitable for production.

56
00:03:23.908 --> 00:03:27.860
If you have a single instance
running multiple containers,

57
00:03:27.860 --> 00:03:33.128
if you have anything more than that,
Kubernetes is probably where you wanna go,

58
00:03:33.128 --> 00:03:36.168
or swarm, or Mesos, or
any of the other ones.

59
00:03:36.168 --> 00:03:38.195
Kubernetes is just the most popular one.

60
00:03:38.195 --> 00:03:41.130
Docker compose is also super
useful on CI/CD scenarios, right?

61
00:03:41.130 --> 00:03:45.191
So if you need to stand up a mini cluster
to run a bunch of integration tests or

62
00:03:45.191 --> 00:03:48.688
something like that,
Docker Compose is great for that as well.

