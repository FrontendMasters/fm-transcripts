WEBVTT

1
00:00:00.270 --> 00:00:02.269
&gt;&gt; Brian Holt: We're gonna talk
more about containers, and

2
00:00:02.269 --> 00:00:06.020
we're actually gonna start running stuff
on the command line and getting dangerous.

3
00:00:07.500 --> 00:00:11.896
So the first thing we're gonna do is
this command called change root, or

4
00:00:11.896 --> 00:00:14.418
cha-root, as some people will call it,

5
00:00:14.418 --> 00:00:18.550
which I will not because I feel
absurd when I say it out loud.

6
00:00:18.550 --> 00:00:20.447
So we're gonna stick with change root.

7
00:00:20.447 --> 00:00:24.532
It basically allows you to say,
all right, to this Linux process and

8
00:00:24.532 --> 00:00:28.347
all of its children,
you can only see this directory and below.

9
00:00:28.347 --> 00:00:30.572
So according to that process,

10
00:00:30.572 --> 00:00:35.417
that's the entire world in terms
of all the files that it can see.

11
00:00:35.417 --> 00:00:37.487
It can't see anything outside of it.

12
00:00:37.487 --> 00:00:42.110
So again, this used to be called
Linux jail or a jailed process.

13
00:00:42.110 --> 00:00:44.490
You'll still see the word
jail kinda throw around.

14
00:00:44.490 --> 00:00:45.809
That's what they used to call it.

15
00:00:45.809 --> 00:00:51.416
But the actual command is change root.

16
00:00:53.891 --> 00:00:58.285
&gt;&gt; Brian Holt: So at this point,
you should have Docker up and running.

17
00:00:58.285 --> 00:01:01.845
So make sure that mine is running.

18
00:01:01.845 --> 00:01:04.145
You can see up here I have mine running.

19
00:01:04.145 --> 00:01:06.535
It says Docker is running.

20
00:01:06.535 --> 00:01:08.536
It doesn't matter,
you don't have to have Kubernetes, but

21
00:01:08.536 --> 00:01:09.885
it should say Docker desktop is running.

22
00:01:10.945 --> 00:01:13.450
So if I say docker ps,
you can see that it comes back and

23
00:01:13.450 --> 00:01:15.701
tells me I don't have
any containers running.

24
00:01:17.545 --> 00:01:21.808
&gt;&gt; Brian Holt: And it doesn't matter
where you run any of these commands.

25
00:01:21.808 --> 00:01:26.530
So I'm going to start up a Ubuntu VM.

26
00:01:26.530 --> 00:01:29.077
But you could start anything from here.

27
00:01:29.077 --> 00:01:33.226
But let's just go ahead,
I'm gonna copy and paste this.

28
00:01:33.226 --> 00:01:36.499
The reason being is that I wanna show
you how to run all these commands

29
00:01:36.499 --> 00:01:37.785
from within Linux.

30
00:01:37.785 --> 00:01:42.216
So we're going to be creating all of
our containers from within Linux.

31
00:01:43.296 --> 00:01:45.866
So we're gonna be running
containers within containers.

32
00:01:45.866 --> 00:01:48.294
I know that's a little confusing,
but suffice to say,

33
00:01:48.294 --> 00:01:51.666
I'm gonna start a Linux process and
then we're gonna start playing around.

34
00:01:52.846 --> 00:01:58.526
So I'm gonna copy that and
I'm gonna go over to my command line and

35
00:01:58.526 --> 00:02:02.038
I'm gonna put this there, docker run,

36
00:02:02.038 --> 00:02:06.193
which is how you run
an instance of a container.

37
00:02:07.603 --> 00:02:09.972
-it basically says, make this interactive.

38
00:02:09.972 --> 00:02:12.714
Don't just throw it into
the background process,

39
00:02:12.714 --> 00:02:14.634
I wanna interact with it directly.

40
00:02:14.634 --> 00:02:18.133
I'm giving it a name, otherwise it'll
give you some random generated name.

41
00:02:18.133 --> 00:02:19.267
So I'm just gonna call it docker-host.

42
00:02:19.267 --> 00:02:20.387
You could call it anything, though.

43
00:02:20.387 --> 00:02:26.397
--rm just says, whenever I stop this
container, throw everything away.

44
00:02:26.397 --> 00:02:28.497
Don't keep all the logs and
all that kinda stuff around.

45
00:02:29.737 --> 00:02:32.887
Privileged, I'm doing this because,
normally, you don't wanna do privilege.

46
00:02:32.887 --> 00:02:37.175
But because we're doing a bunch of
stuff with creating containers by hand,

47
00:02:37.175 --> 00:02:39.856
we want it to be elevated
to the root privilege.

48
00:02:39.856 --> 00:02:41.854
And then we're gonna be running Ubuntu,

49
00:02:41.854 --> 00:02:44.136
which is just the name
of the distribution, and

50
00:02:44.136 --> 00:02:47.876
then Jammy is the actual version
that we're gonna be running.

51
00:02:47.876 --> 00:02:51.056
So you could put any
version of Ubuntu here.

52
00:02:51.056 --> 00:02:55.250
We're just gonna be running
Jammy because as of recording,

53
00:02:55.250 --> 00:02:58.716
this is the most latest
stable version of Ubuntu.

54
00:03:00.844 --> 00:03:04.253
So for some of you,
you'll probably see it pull and

55
00:03:04.253 --> 00:03:08.304
download a bunch of stuff
before it ends up happening.

56
00:03:08.304 --> 00:03:10.649
Because I've run this
a bunch of times before,

57
00:03:10.649 --> 00:03:14.194
it just throws me right in it because
it caches all of those images.

58
00:03:14.194 --> 00:03:17.877
So that might take you, if you're on
slow Internet, a couple of minutes,

59
00:03:17.877 --> 00:03:22.215
if you're on fast Internet, I don't know
what, 15 seconds, something like that.

60
00:03:22.215 --> 00:03:23.735
It's usually pretty fast.

61
00:03:23.735 --> 00:03:27.523
Now if I say cat /etc /issue,

62
00:03:27.523 --> 00:03:32.785
you can see that I am on Ubuntu 22.04.

63
00:03:32.785 --> 00:03:37.140
That's a nice little trick right there
if you're in a Linux environment and

64
00:03:37.140 --> 00:03:40.215
you wanna see what version
of Linux you're running.

65
00:03:40.215 --> 00:03:45.778
As far as I know, almost every
distribution of Linux, this will work,

66
00:03:45.778 --> 00:03:51.547
and it'll tell you what distribution
you're running and what version.

67
00:03:54.060 --> 00:03:56.304
&gt;&gt; Brian Holt: So, I just gave you
a bunch of instructions for macOS.

68
00:03:56.304 --> 00:04:00.846
If you're using Windows and
WSL, just open WSL, that's it.

69
00:04:00.846 --> 00:04:02.369
That's the whole thing.

70
00:04:02.369 --> 00:04:04.949
You open WSL and
you'll be inside of Linux.

71
00:04:06.259 --> 00:04:11.049
And if you're running Linux, just open a
terminal because you're already in Linux.

72
00:04:11.049 --> 00:04:13.789
We ran cat, again,
just to review what cat means.

73
00:04:13.789 --> 00:04:17.979
It just means open a file and
read it for me.

74
00:04:17.979 --> 00:04:22.600
So this is a file, and it just dumps
out everything that's in there.

75
00:04:22.600 --> 00:04:27.388
And yeah, so now we are now
running inside of a container,

76
00:04:27.388 --> 00:04:31.806
and we are the root process,
rather, the root user.

77
00:04:31.806 --> 00:04:36.240
Let's make a new jail for
our particular component.

78
00:04:36.240 --> 00:04:38.990
So I'm just gonna change
directory to the root directory.

79
00:04:38.990 --> 00:04:41.154
You can see I'm in the root directory.

80
00:04:41.154 --> 00:04:43.489
pwd just means present working directory.

81
00:04:43.489 --> 00:04:46.882
And I'm gonna make a new directory and

82
00:04:46.882 --> 00:04:51.769
we'll call it my-new-root or
something like that.

83
00:04:51.769 --> 00:04:57.929
And you can see here I have
my-new-root right there.

84
00:04:57.929 --> 00:05:02.566
So I'm gonna say echo, which it's

85
00:05:02.566 --> 00:05:07.203
gonna allow me to create a new file,

86
00:05:07.203 --> 00:05:11.840
echo "my super secret thing" into

87
00:05:11.840 --> 00:05:17.113
my-new-root/secret.txt, okay?

88
00:05:17.113 --> 00:05:20.526
And now if I say cat
my-new-root/secret.txt,

89
00:05:20.526 --> 00:05:23.672
you can see it says my super secret thing.

90
00:05:23.672 --> 00:05:27.939
Okay, so we created a directory,
we put a secret file in there.

91
00:05:30.542 --> 00:05:36.058
&gt;&gt; Brian Holt: And now we're gonna try and
do chroot into my-new-root,

92
00:05:36.058 --> 00:05:39.489
and then you tell it what to do after.

93
00:05:39.489 --> 00:05:43.617
So I'm gonna tell it, run me a new
instance of bash or a new shell, right?

94
00:05:44.677 --> 00:05:49.976
You're probably gonna say, I can't
do that, because what's gonna happen

95
00:05:49.976 --> 00:05:55.369
is it is going to actually successfully
change root into my-new-root here.

96
00:05:55.369 --> 00:05:59.604
But then it goes to run bash, and because
it can't see anything outside of itself,

97
00:05:59.604 --> 00:06:01.314
it can't even see bash, right?

98
00:06:01.314 --> 00:06:03.529
Bash is not there for it to run.

99
00:06:03.529 --> 00:06:08.420
So we actually have to physically put
a new copy of bash inside of that root

100
00:06:08.420 --> 00:06:11.239
directory before it can actually run it.

101
00:06:11.239 --> 00:06:15.629
Now, it'd be nice if you could just say,
okay, copy bash, right?

102
00:06:15.629 --> 00:06:17.259
But of course, it's not that easy.

103
00:06:17.259 --> 00:06:19.537
You have to bring all of its
libraries with it as well.

104
00:06:19.537 --> 00:06:21.245
So I'm gonna show you how to do that.

105
00:06:23.395 --> 00:06:29.425
Okay, so I'm gonna run ldd /bin/bash.

106
00:06:29.425 --> 00:06:35.173
This is gonna tell me all of the libraries
that you need to bring with bash so

107
00:06:35.173 --> 00:06:38.062
that bash can actually run, right?

108
00:06:39.143 --> 00:06:43.483
If you're a Windows library or a Windows
developer, you're nodding right now.

109
00:06:43.483 --> 00:06:45.153
It's like, yeah, it's like DLLs, right?

110
00:06:45.153 --> 00:06:46.783
That's kinda the same idea, right?

111
00:06:49.173 --> 00:06:52.653
I'd never had to worry about this until
I was messing around with containers.

112
00:06:52.653 --> 00:06:57.183
So we're gonna have to copy all these kind
of, and copy them into the right place.

113
00:06:57.183 --> 00:07:00.013
So we're gonna make a new directory.

114
00:07:02.900 --> 00:07:08.165
&gt;&gt; Brian Holt: mkdir my-new-root,
and then lib,

115
00:07:08.165 --> 00:07:13.429
and we're also gonna make another one

116
00:07:13.429 --> 00:07:18.378
called my-new-root/lib64.

117
00:07:18.378 --> 00:07:21.673
If you wanna see a fun,
little, stupid Linux trick,

118
00:07:21.673 --> 00:07:23.588
you wanna create two of these.

119
00:07:23.588 --> 00:07:26.024
One of them is called lib and
one is called lib64.

120
00:07:29.362 --> 00:07:32.936
&gt;&gt; Brian Holt: If you do that,
it'll actually do both of them.

121
00:07:32.936 --> 00:07:36.392
Cuz the curly braces means do
everything inside of here, so

122
00:07:36.392 --> 00:07:40.298
it's actually going to expand
that out based on commas.

123
00:07:40.298 --> 00:07:43.001
The first one is just an empty string,
so it's gonna be lib,

124
00:07:43.001 --> 00:07:45.398
and then the second one's gonna be lib64,
right?

125
00:07:48.108 --> 00:07:53.906
Not important, but it's fun to show
you stupid Linux tricks when I can.

126
00:07:53.906 --> 00:07:58.608
All right, so if I go into my-new-root,
you can see I have two very lovely

127
00:07:58.608 --> 00:08:03.177
directories here that are now empty,
and I have to do a bunch of copying.

128
00:08:03.177 --> 00:08:08.522
We're going to copy everything that we see

129
00:08:08.522 --> 00:08:13.572
here into our directory that we need to.

130
00:08:15.586 --> 00:08:18.917
&gt;&gt; Brian Holt: So I think you can ignore
all of the lines that don't have paths.

131
00:08:18.917 --> 00:08:21.212
So I don't think I need this one.

132
00:08:21.212 --> 00:08:22.300
But I do need this one.

133
00:08:23.830 --> 00:08:28.723
Okay, so I have to copy that one into.

134
00:08:33.107 --> 00:08:35.261
&gt;&gt; Brian Holt: And I gotta make sure
I'm getting the right one here, yep.

135
00:08:38.226 --> 00:08:43.680
&gt;&gt; Brian Holt: my-new-root,
this one is gonna go into lib.

136
00:08:47.134 --> 00:08:53.687
&gt;&gt; Brian Holt: Okay, and
this one is also gonna go into lib.

137
00:08:53.687 --> 00:08:55.907
You can tell just cuz it
says lib right there, right?

138
00:08:55.907 --> 00:08:58.244
I'm just trying to copy all of that.

139
00:09:03.802 --> 00:09:06.325
&gt;&gt; Brian Holt: Okay, so that worked.

140
00:09:10.719 --> 00:09:11.493
&gt;&gt; Brian Holt: And I got,

141
00:09:11.493 --> 00:09:16.380
let's see, I did this one,
&gt;&gt; Brian Holt: I did that one.

142
00:09:16.380 --> 00:09:25.098
And then this one I think has to go into,
&gt;&gt; Brian Holt: lib64.

143
00:09:25.098 --> 00:09:27.363
No, this one just goes into lib as well,
right?

144
00:09:35.836 --> 00:09:40.043
&gt;&gt; Brian Holt: Okay, so
maybe nothing had to go into lib64 for

145
00:09:40.043 --> 00:09:42.308
that one, which is fine.

146
00:09:45.535 --> 00:09:49.697
&gt;&gt; Brian Holt: We can check to
see if that actually worked.

147
00:09:54.143 --> 00:09:55.537
&gt;&gt; Brian Holt: I didn't copy bin bash yet.

148
00:09:55.537 --> 00:09:57.985
Yeah, you gotta do that as well.

149
00:09:57.985 --> 00:10:05.087
Yeah, so you're gonna have to say,
cp /bin/bash into,

150
00:10:05.087 --> 00:10:10.780
I actually have to make
a bin directory as well.

151
00:10:10.780 --> 00:10:15.449
So I see I've gone to
my-new-root# mkdir bin,

152
00:10:15.449 --> 00:10:21.119
which is the binary that we're
actually gonna copy in here,

153
00:10:21.119 --> 00:10:26.810
and we're gonna cp /bin/bash
into my-new-root/bin.

154
00:10:29.194 --> 00:10:30.855
&gt;&gt; Brian Holt: Okay, and
then now we're gonna try that again.

155
00:10:30.855 --> 00:10:35.558
We're gonna say chroot
into my-new-root bash.

156
00:10:35.558 --> 00:10:38.862
Lo and behold, you can see this looks
a little bit different than before.

157
00:10:38.862 --> 00:10:44.219
We are actually now change
rooted into that directory.

158
00:10:44.219 --> 00:10:47.016
Now you might say the first thing you
might be tempted to run is I'm gonna run

159
00:10:47.016 --> 00:10:48.314
ls to see what's in here, right?

160
00:10:48.314 --> 00:10:51.224
And it's gonna be,
I don't know what ls is, right,

161
00:10:51.224 --> 00:10:54.114
because you didn't copy ls in there.

162
00:10:54.114 --> 00:10:56.524
Like I said, this is highly impractical,
what we're doing.

163
00:10:56.524 --> 00:10:58.826
You have to manually
copy everything by hand.

164
00:10:58.826 --> 00:11:02.246
So let's go ahead and do, you can
type exit to get out of that bash and

165
00:11:02.246 --> 00:11:03.986
it'll take you back out of there.

166
00:11:05.616 --> 00:11:07.846
Let's go ahead and
copy ls into there as well.

167
00:11:09.756 --> 00:11:17.146
So same process,
cp /bin/ls into my-new-root/bin.

168
00:11:17.146 --> 00:11:18.040
Okay, that'll get that.

169
00:11:18.040 --> 00:11:23.450
ldd /bin/ls, this will tell you
everything you need to copy,

170
00:11:23.450 --> 00:11:27.370
ignore everything that
doesn't have a path.

171
00:11:27.370 --> 00:11:32.509
So copy that into,
you can also do this as well,

172
00:11:32.509 --> 00:11:36.494
you can do multiple at the same time.

173
00:11:40.922 --> 00:11:42.492
&gt;&gt; Brian Holt: Anything that has a path.

174
00:11:51.579 --> 00:11:52.545
&gt;&gt; Brian Holt: Oops.

175
00:11:59.282 --> 00:12:03.738
&gt;&gt; Brian Holt: So all that's gonna go into

176
00:12:03.738 --> 00:12:08.786
my-new-root/lib, okay?

177
00:12:08.786 --> 00:12:12.136
Now let's run our change root again.

178
00:12:12.136 --> 00:12:16.306
And now you can see I can at least run ls,
right?

179
00:12:16.306 --> 00:12:21.217
So you can see I have a bin,
I have a lib, lib64, and secret.

180
00:12:21.217 --> 00:12:23.281
Pretty cool, right?

181
00:12:23.281 --> 00:12:27.635
Now let's read the file, cat secret.txt.

182
00:12:27.635 --> 00:12:30.299
No, we don't have cat, right?

183
00:12:30.299 --> 00:12:34.462
As you can see, you have to do this for
every single one of them.

184
00:12:34.462 --> 00:12:39.204
I think it's literally, so
some of them do come with bash, right?

185
00:12:39.204 --> 00:12:43.504
So change directory does,
so a few of them do.

186
00:12:43.504 --> 00:12:46.292
But yeah, most of them, you're gonna
have to actually go do by hand.

