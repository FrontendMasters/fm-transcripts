WEBVTT

1
00:00:00.223 --> 00:00:04.845
&gt;&gt; Brian Holt: We are going to open
a third terminal, because we wanna have

2
00:00:04.845 --> 00:00:09.570
an observer to watch all of
the chaos that's about to ensue.

3
00:00:09.570 --> 00:00:14.731
So we're gonna run that Docker
exec- it docker-host bash again, so

4
00:00:14.731 --> 00:00:20.775
we have a third process in here, and
then I'm gonna say, apt-get install htop.

5
00:00:20.775 --> 00:00:26.022
If you're not familiar with htop I love
it, it just allows you to visualize

6
00:00:26.022 --> 00:00:30.936
all the processes, how the RAM is
being used, all that kind of stuff,

7
00:00:30.936 --> 00:00:36.713
it's a nice visual representation of
what's happening, kind of cool, right?

8
00:00:36.713 --> 00:00:41.206
So you can see inside of Docker I
have eight cores that are available.

9
00:00:45.352 --> 00:00:48.875
&gt;&gt; Brian Holt: You can see all
the processes that are running,

10
00:00:48.875 --> 00:00:53.469
who's running them,
all that kind of stuff, cool, right?

11
00:00:53.469 --> 00:00:59.256
Let's say that we're Eve right now,
this is number one, this is the unshared

12
00:00:59.256 --> 00:01:04.269
environment, and we want to pin
one of the CPUs, so let's do that.

13
00:01:06.834 --> 00:01:10.922
&gt;&gt; Brian Holt: I'm actually gonna copy and
paste this because it doesn't really

14
00:01:10.922 --> 00:01:16.485
matter what it does, this is gonna be the
RAM one, okay, yeah, so this one does RAM.

15
00:01:18.931 --> 00:01:21.871
&gt;&gt; Brian Holt: So I'm gonna run this and

16
00:01:21.871 --> 00:01:26.914
watch that consume a ton
of RAM right here.

17
00:01:33.944 --> 00:01:36.726
&gt;&gt; Brian Holt: Yeah, you can see this
one's just starting to grow right there.

18
00:01:39.930 --> 00:01:44.742
&gt;&gt; Brian Holt: You can see the memory
trending up, all that kind of stuff,

19
00:01:44.742 --> 00:01:45.422
right?

20
00:01:45.422 --> 00:01:46.784
Where is the memory here?

21
00:01:49.667 --> 00:01:52.505
&gt;&gt; Brian Holt: There you go,
you can see that this is also pegged,

22
00:01:52.505 --> 00:01:54.221
the 7th core as well, right?

23
00:01:58.638 --> 00:02:02.014
&gt;&gt; Brian Holt: So, how do we kind
of prevent this from happening?

24
00:02:02.014 --> 00:02:07.924
How do we prevent Eve from just running
commands and just destroying stuff?

25
00:02:07.924 --> 00:02:12.382
Well, let's go ahead and stop this so
that we can start pegging their CPU, so

26
00:02:12.382 --> 00:02:13.284
where's yes?

27
00:02:13.284 --> 00:02:14.418
It's this one.

28
00:02:17.592 --> 00:02:22.455
&gt;&gt; Brian Holt: 8359, 8359, okay, so

29
00:02:22.455 --> 00:02:27.665
here I'm gonna say kill -9,

30
00:02:27.665 --> 00:02:30.972
not that, 8359.

31
00:02:33.424 --> 00:02:36.344
&gt;&gt; Brian Holt: Okay, then you can see
our number 7 return to normal there.

32
00:02:38.929 --> 00:02:41.121
&gt;&gt; Brian Holt: So let's go ahead and
stick some limits on this so

33
00:02:41.121 --> 00:02:42.573
that we can't do this anymore.

34
00:02:42.573 --> 00:02:48.330
So at the moment,
let's go into sandbox/ and

35
00:02:48.330 --> 00:02:56.165
we're gonna cat
/sysfs/cgroup/sandbox/memory.max.

36
00:02:56.165 --> 00:02:59.166
And right now you can see,
it's like, I don't have a max,

37
00:02:59.166 --> 00:03:02.784
they can do whatever they want,
they can take as much as I have, right?

38
00:03:02.784 --> 00:03:07.044
So we're gonna echo, we're just
gonna give it 80 megs right now, so

39
00:03:07.044 --> 00:03:09.970
I'm just gonna copy that
cuz I don't remember.

40
00:03:09.970 --> 00:03:13.256
I think that's what it is in bytes,

41
00:03:13.256 --> 00:03:17.964
I'm gonna echo that
into sandbox memory max and

42
00:03:17.964 --> 00:03:23.673
if I look now, you can see It now
has a very strong upper limit.

43
00:03:23.673 --> 00:03:28.467
Run that again, and
you can see it is gonna peg the CPU again,

44
00:03:28.467 --> 00:03:31.663
because we have not limited the CPU, but

45
00:03:31.663 --> 00:03:37.323
it's gonna be much less affected on
the memory side of things, right?

46
00:03:37.323 --> 00:03:42.187
Because we've now capped that entire
sub-process is limited to 80 megabytes

47
00:03:42.187 --> 00:03:44.054
of RAM, which is pretty cool.

48
00:03:44.054 --> 00:03:49.314
Cool, yeah, you can see there that's
starting to trend up as well,

49
00:03:49.314 --> 00:03:50.595
so what is that?

50
00:03:50.595 --> 00:03:56.036
Yes, 8366 kill -9 8366, okay,

51
00:03:56.036 --> 00:04:02.065
so that's the first one,
that is limiting RAM,

52
00:04:02.065 --> 00:04:07.665
let's limit how much CPU it can use,
right?

53
00:04:07.665 --> 00:04:13.492
Because it's still able to peg a core,
so if I come in here and

54
00:04:13.492 --> 00:04:20.122
I say yes into dev/null, this is
just going to spam yes at dev/null.

55
00:04:20.122 --> 00:04:24.897
Which is dev/null as you may know,
is just a place where you can echo out

56
00:04:24.897 --> 00:04:28.096
anything and
it just kind of goes into the void.

57
00:04:28.096 --> 00:04:33.232
So you can see here I've now
managed to peg this one, so

58
00:04:33.232 --> 00:04:38.703
let's go ahead and kill that and
then we'll try it again,

59
00:04:38.703 --> 00:04:42.850
but in an environment
that I can't do that.

60
00:04:42.850 --> 00:04:48.436
8371, kill-9 8371,

61
00:04:48.436 --> 00:04:54.818
and we're gonna say echo 5000 and

62
00:04:54.818 --> 00:04:59.213
that is 100,000.

63
00:05:01.892 --> 00:05:06.744
&gt;&gt; Brian Holt: Again, I have my notes
here, so you can just get it from there,

64
00:05:06.744 --> 00:05:09.502
and this is gonna go into cpu.max.

65
00:05:12.914 --> 00:05:18.178
&gt;&gt; Brian Holt: I think this is 5,000 of
100,000, so that ends up being 5%, right?

66
00:05:18.178 --> 00:05:23.050
So we're giving it 5% of a CPU.

67
00:05:24.827 --> 00:05:28.460
So you can see here,
right there, it's fine, and

68
00:05:28.460 --> 00:05:33.868
we're gonna say from here now we're
gonna run that again, yes dev/null,

69
00:05:33.868 --> 00:05:38.371
and you can see here that it's
gonna be able to pull about 5%.

70
00:05:40.647 --> 00:05:43.654
&gt;&gt; Brian Holt: Pretty cool, right?

71
00:05:43.654 --> 00:05:48.285
So now Eve is now restricted to
only 5% of the CPU she's not

72
00:05:48.285 --> 00:05:52.649
able to just run stupid commands and
bring people down.

73
00:05:52.649 --> 00:05:55.037
I think I should just be
able to stop that here, no?

74
00:05:55.037 --> 00:05:58.984
Okay, what?

75
00:05:58.984 --> 00:06:02.851
8372 kill-9 8372.

76
00:06:07.142 --> 00:06:09.408
&gt;&gt; Brian Holt: Cool, and
then that killed it.

77
00:06:11.682 --> 00:06:16.501
&gt;&gt; Brian Holt: One more thing,
we are going to run a fork bomb,

78
00:06:16.501 --> 00:06:22.898
which is never a good idea, and
continue at your own risk here.

79
00:06:22.898 --> 00:06:27.520
If you're not familiar with a fork bomb,
it's kind of a fun Linux trick,

80
00:06:27.520 --> 00:06:29.547
let's see if I can find it here.

81
00:06:29.547 --> 00:06:33.662
And it looks like this,
you may have seen this before,

82
00:06:33.662 --> 00:06:36.445
that's what's called a fork bomb.

83
00:06:36.445 --> 00:06:38.689
If you drop this, if you just copied and

84
00:06:38.689 --> 00:06:43.734
pasted this directly into your terminal
right now, don't by the way, please don't.

85
00:06:43.734 --> 00:06:47.839
Or I'm not responsible for what happens,
it's gonna crash your computer likely.

86
00:06:47.839 --> 00:06:51.532
It's just a process that keeps
forking itself and forking itself and

87
00:06:51.532 --> 00:06:52.493
forking itself.

88
00:06:52.493 --> 00:06:56.796
And you end up with this like fractal of
processes that's eventually overwhelms

89
00:06:56.796 --> 00:06:58.004
your system, right?

90
00:06:58.004 --> 00:07:02.132
You can rewrite it as this, because
this colon here is just the name of

91
00:07:02.132 --> 00:07:07.491
the function, it doesn't actually have
anything special, it's just a name, right?

92
00:07:07.491 --> 00:07:11.914
So you're saying fork,
fork to the background, and

93
00:07:11.914 --> 00:07:14.973
then you run fork, a lot of forking.

94
00:07:17.243 --> 00:07:18.946
&gt;&gt; Brian Holt: Right?

95
00:07:18.946 --> 00:07:25.166
So how can we prevent Alice
from just dropping a fork bomb?

96
00:07:25.166 --> 00:07:29.736
Well, we can limit how many
processes she can spawn, so

97
00:07:29.736 --> 00:07:34.806
let's go ahead and run that,
or pids.current, right?

98
00:07:34.806 --> 00:07:39.977
So back here,
we're gonna say cat pids.current,

99
00:07:39.977 --> 00:07:44.675
and you can see one,
I think that's just lets it

100
00:07:44.675 --> 00:07:49.631
run as many as it's wants,
if I'm not mistaken.

101
00:07:51.726 --> 00:07:54.890
&gt;&gt; Brian Holt: No, that's how many it has
at the moment, and then if I put max,

102
00:07:54.890 --> 00:07:56.071
it should just say max.

103
00:07:56.071 --> 00:08:00.762
Yeah, it basically says I'm not
limiting how many pids they can have,

104
00:08:00.762 --> 00:08:05.687
pids being like how many unique processes
that can be running at a time,

105
00:08:05.687 --> 00:08:07.261
it's what that means.

106
00:08:07.261 --> 00:08:10.917
So let's be overly restrictive,
you would never do this,

107
00:08:10.917 --> 00:08:15.683
but let's just give it three that I
currently have three processes at a time.

108
00:08:15.683 --> 00:08:22.559
And I'm gonna run sys, or we can just
do that from here into pids.max.

109
00:08:25.901 --> 00:08:31.567
&gt;&gt; Brian Holt: And so now, it cannot run
any more than three processes at a time,

110
00:08:31.567 --> 00:08:36.110
so let's just do like a really
dumb example of that.

111
00:08:36.110 --> 00:08:42.714
I'm gonna grab this one right here,
it's gonna try and run five processes.

112
00:08:45.691 --> 00:08:46.806
&gt;&gt; Brian Holt: And you can see there,

113
00:08:46.806 --> 00:08:50.980
it's gonna say a resource temporarily
unavailable, that's because it's like,

114
00:08:50.980 --> 00:08:53.408
hey, I have three processes,
I can't do that.

115
00:08:53.408 --> 00:08:57.940
And it's gonna keep trying until
eventually these 15 seconds are done, and

116
00:08:57.940 --> 00:09:01.023
then it'll do it again,
eventually it completes.

117
00:09:01.023 --> 00:09:09.253
&gt;&gt; Brian Holt: So you can see there
that the sleep fifteens are now done, so

118
00:09:09.253 --> 00:09:16.783
it can only run three processes at a time
&gt;&gt; Brian Holt: So

119
00:09:16.783 --> 00:09:21.772
I'm gonna do this because I'm an idiot,
so I'm actually gonna drop the fork

120
00:09:21.772 --> 00:09:26.716
bomb in there, you can try if you want to,
but don't say I didn't warn you.

121
00:09:26.716 --> 00:09:32.318
So, I'm gonna grab this inside of
my change rooted environment and

122
00:09:32.318 --> 00:09:37.937
I'm gonna paste that, and
it's gonna just really try and hammer.

123
00:09:37.937 --> 00:09:41.571
It, but eventually it's going to run
out of pathways, and it'll stop,

124
00:09:41.571 --> 00:09:42.694
pretty cool, right?

125
00:09:42.694 --> 00:09:47.198
This is like a real thing that someone
could do to your server, but, but

126
00:09:47.198 --> 00:09:52.003
using cgroups and that kind of stuff,
you're able to kind of prevent that,

127
00:09:52.003 --> 00:09:55.556
you would never be able to
prevent it like this, right?

128
00:09:55.556 --> 00:09:58.520
Where it actually would just crash out,
but you would basically say, look,

129
00:09:58.520 --> 00:10:01.222
you're paying for the server,
you can do whatever you want, right?

130
00:10:01.222 --> 00:10:04.568
You wanna drop a fork bomb on your
paid for server, by all means, but

131
00:10:04.568 --> 00:10:07.235
you're not going to bring
down other people with it.

132
00:10:07.235 --> 00:10:13.864
That's kind of it for our like crafting
containers by hand, so this is it, right?

133
00:10:13.864 --> 00:10:18.667
Change root, namespaces, cgroups,
that's a container, there's nothing

134
00:10:18.667 --> 00:10:23.470
else everything else that Docker does for
you is like stuff around containers,

135
00:10:23.470 --> 00:10:27.790
like networking and volumes and
bind mounts and all that kind of stuff.

136
00:10:27.790 --> 00:10:32.037
Those relate to containers,
but a container in and

137
00:10:32.037 --> 00:10:36.697
of itself is just change root,
namespaces, cgroups.

138
00:10:36.697 --> 00:10:40.794
You now totally understand
what goes into a container,

139
00:10:40.794 --> 00:10:43.591
which I think is pretty cool, right?

140
00:10:43.591 --> 00:10:46.914
It's really is just three Linux
features that they duct tape together.

