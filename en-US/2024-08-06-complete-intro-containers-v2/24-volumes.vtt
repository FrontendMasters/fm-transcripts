WEBVTT

1
00:00:00.197 --> 00:00:04.368
&gt;&gt; Brian Holt: Now let's talk about the LM
the database use case that I was talking

2
00:00:04.368 --> 00:00:07.736
about where let's say I
have a SQL database, right?

3
00:00:07.736 --> 00:00:11.450
And I want to save the data between runs.

4
00:00:11.450 --> 00:00:15.052
You could use a bind mount and you could
like save that locally to your desktop.

5
00:00:15.052 --> 00:00:16.136
That would be fine.

6
00:00:16.136 --> 00:00:20.127
It's not the way probably I would
choose to do it, but it would work.

7
00:00:20.127 --> 00:00:24.655
But let's say you want to save it and you
want to have the ability to do backups on

8
00:00:24.655 --> 00:00:28.787
it and then you want to be able to ship
it off to production working as is.

9
00:00:28.787 --> 00:00:30.897
That is what a volume is for.

10
00:00:30.897 --> 00:00:34.382
It's basically for state that's
meant to survive between runs, and

11
00:00:34.382 --> 00:00:38.057
that can be shared across all of your
Docker containers that are running.

12
00:00:40.135 --> 00:00:45.671
&gt;&gt; Brian Holt: So,
let's just go ahead and create one here.

13
00:00:45.671 --> 00:00:49.810
So I'm just gonna do this
directly from my command line.

14
00:00:49.810 --> 00:00:53.726
I'm gonna pull up my notes here.

15
00:00:53.726 --> 00:00:54.740
Let's shut that down.

16
00:00:54.740 --> 00:01:00.492
I'm gonna make mkdir here,
we're gonna call this docker-volume.

17
00:01:00.492 --> 00:01:05.478
We're gonna write a little note
application to kinda demonstrate what you

18
00:01:05.478 --> 00:01:07.146
can do with this, okay?

19
00:01:07.146 --> 00:01:11.811
I'm gonna make two files here,
index.js and Dockerfile.

20
00:01:11.811 --> 00:01:15.270
Surprise surprise, okay?

21
00:01:15.270 --> 00:01:20.195
I'm gonna open this in code,
&gt;&gt; Brian Holt: And

22
00:01:20.195 --> 00:01:22.320
testing to make this a bit bigger.

23
00:01:22.320 --> 00:01:23.579
There we go.

24
00:01:23.579 --> 00:01:27.704
I'm just gonna go copy and
paste all of this.

25
00:01:27.704 --> 00:01:32.470
I don't really care if you
know the node code or not.

26
00:01:32.470 --> 00:01:37.478
The long story short on
what this node code does.

27
00:01:37.478 --> 00:01:41.467
It's going to take in
a path called data txt and

28
00:01:41.467 --> 00:01:45.661
then from there it's going
to read the file, and

29
00:01:45.661 --> 00:01:52.941
then it's going to write back to the file
of whatever the number is plus one, right?

30
00:01:52.941 --> 00:01:56.197
So if the number inside
of data.txt is three,

31
00:01:56.197 --> 00:02:00.799
it'll write back to data.txt four,
so on and so forth forever.

32
00:02:00.799 --> 00:02:05.136
So If it doesn't find the file,
then it's going to create it with zero.

33
00:02:05.136 --> 00:02:05.754
That's it.

34
00:02:05.754 --> 00:02:08.184
&gt;&gt; Speaker 2: Your number
casting with the plus data.

35
00:02:08.184 --> 00:02:10.385
&gt;&gt; Brian Holt: Yeah, right there.

36
00:02:10.385 --> 00:02:13.266
Yeah, cuz I'm lazy and
I didn't wanna do anything more special,

37
00:02:13.266 --> 00:02:15.125
that's what that unary plus operator is.

38
00:02:15.125 --> 00:02:16.855
That's what you would call that.

39
00:02:16.855 --> 00:02:18.564
So, I mean,
we can run this locally, right?

40
00:02:18.564 --> 00:02:22.417
If I say node index.js.

41
00:02:22.417 --> 00:02:25.902
And then now I say, you can see
that there's a data.txt file there.

42
00:02:25.902 --> 00:02:30.726
And I say, cat data.txt, it's one.

43
00:02:30.726 --> 00:02:35.099
Do it again, again, again, again.

44
00:02:35.099 --> 00:02:37.682
And if I do that, you can see it is 4.

45
00:02:37.682 --> 00:02:41.895
And if you wonder what that percent
sign is, it means that I'm not adding

46
00:02:41.895 --> 00:02:45.229
a Linux file ending to my file and
it's upset about that.

47
00:02:45.229 --> 00:02:50.266
But as you can see, I'm not
particularly upset about it myself.

48
00:02:50.266 --> 00:02:54.081
If I run this as if I've packaged
this up as a container and

49
00:02:54.081 --> 00:02:56.634
I run it once, what's gonna happen?

50
00:02:56.634 --> 00:03:00.644
It's going to detect that there was
no file there, it's gonna write it.

51
00:03:00.644 --> 00:03:03.538
And then when I stopped
the container is gone, right?

52
00:03:03.538 --> 00:03:07.016
Because that would be a femoral state
that exists inside of the container and

53
00:03:07.016 --> 00:03:09.149
then once it was done,
it'd be gone forever.

54
00:03:09.149 --> 00:03:13.587
Let's say it's mission critical that
I keep this data.txt file alive and

55
00:03:13.587 --> 00:03:16.131
then I wanna have it survive between runs.

56
00:03:16.131 --> 00:03:19.173
This is what a volume can do for you.

57
00:03:19.173 --> 00:03:23.371
So let's just go ahead and delete data
file, cuz we don't wanna keep that.

58
00:03:23.371 --> 00:03:27.135
Move to trash, okay?

59
00:03:27.135 --> 00:03:33.121
And for our Dockerfile,
we're gonna say from,

60
00:03:33.121 --> 00:03:37.647
and let's do node:20-alpine,

61
00:03:37.647 --> 00:03:40.859
or whatever you wanna do.

62
00:03:40.859 --> 00:03:45.630
And then we're gonna say copy, chown and

63
00:03:45.630 --> 00:03:52.323
we're gonna do node:node.into
the source directory.

64
00:03:54.870 --> 00:04:01.909
&gt;&gt; Brian Holt: We're gonna say work,
WORKDIR / src, and we're gonna say CMD.

65
00:04:05.025 --> 00:04:08.351
&gt;&gt; Brian Holt: I mean, at this point I'm
just letting Copilot write my Docker

66
00:04:08.351 --> 00:04:09.119
files for me.

67
00:04:09.119 --> 00:04:13.867
Okay, so you can see here from node,
we're gonna copy into our node directory.

68
00:04:13.867 --> 00:04:16.560
We have a work directory
source node index.js.

69
00:04:16.560 --> 00:04:17.935
I'm not trying to make
this the best Dockerfile.

70
00:04:17.935 --> 00:04:20.716
I'm actually just trying to make
this the minimal Dockerfile.

71
00:04:20.716 --> 00:04:26.372
All right, so let's go and observe the
problem that I was just describing to you.

72
00:04:26.372 --> 00:04:27.774
We're gonna build this.

73
00:04:27.774 --> 00:04:29.058
I'm in docker-volume here.

74
00:04:29.058 --> 00:04:32.821
I'm gonna say docker build- t.

75
00:04:32.821 --> 00:04:36.177
We're gonna call it incrementor
because I am not creative.

76
00:04:36.177 --> 00:04:39.064
And yeah.

77
00:04:39.064 --> 00:04:44.212
Yeah, it's getting mad
that we have ckview,

78
00:04:44.212 --> 00:04:48.569
cuz I think it's from the alpine file.

79
00:04:48.569 --> 00:04:51.048
It doesn't matter.

80
00:04:51.048 --> 00:04:57.509
So I'm gonna say docker
run --rm incrementor.

81
00:05:01.022 --> 00:05:04.921
&gt;&gt; Brian Holt: So and if we just keep
running this over and over and over and

82
00:05:04.921 --> 00:05:06.363
over again, right?

83
00:05:06.363 --> 00:05:11.097
It runs to the file,
it creates the file and then it exits and

84
00:05:11.097 --> 00:05:13.572
then the container goes away.

85
00:05:13.572 --> 00:05:14.608
Great.

86
00:05:14.608 --> 00:05:16.936
Probably what you expect so far.

87
00:05:16.936 --> 00:05:18.623
So how do we do this?

88
00:05:18.623 --> 00:05:20.930
How do we?

89
00:05:20.930 --> 00:05:24.184
Well, you probably say Brian you've
been talking about volumes for

90
00:05:24.184 --> 00:05:25.767
10 minutes now it's volumes.

91
00:05:25.767 --> 00:05:29.305
Don't ask me stupid rhetorical questions.

92
00:05:29.305 --> 00:05:34.441
[LAUGH] I get cranky when I've been
teaching too long towards myself.

93
00:05:34.441 --> 00:05:38.558
Anyway, docker run --rm ---env.

94
00:05:38.558 --> 00:05:42.463
We have to give it that data
path if you remember here.

95
00:05:42.463 --> 00:05:44.263
It's looking for this data path.

96
00:05:44.263 --> 00:05:51.104
That's gonna be passed
into the code DATA-PATH =,

97
00:05:51.104 --> 00:05:55.215
I wanna put /data/num.txt.

98
00:05:55.215 --> 00:05:58.078
You can call whatever you want, obviously.

99
00:05:58.078 --> 00:06:00.468
--mount, right?

100
00:06:00.468 --> 00:06:05.288
Then we're gonna say, type equals volume.

101
00:06:05.288 --> 00:06:07.504
And then we're gonna say source equals,

102
00:06:07.504 --> 00:06:11.249
and then just have to give it a name
doesn't really matter where it is.

103
00:06:11.249 --> 00:06:14.207
We're gonna call it as you
might imagine incrementor-data.

104
00:06:14.207 --> 00:06:18.904
And we're gonna say where do we want
you to mount this volume inside of our

105
00:06:18.904 --> 00:06:19.752
container?

106
00:06:19.752 --> 00:06:24.191
So we're gonna say target equals this,
right?

107
00:06:24.191 --> 00:06:27.034
As long as the data path here
matches whatever the target is,

108
00:06:27.034 --> 00:06:27.941
you are good to go.

109
00:06:27.941 --> 00:06:32.327
So we're gonna say /data, and
then we're gonna run incrementor.

110
00:06:34.658 --> 00:06:39.581
&gt;&gt; Brian Holt: So the first time, it's
doing this cuz I've been running this,

111
00:06:39.581 --> 00:06:40.171
right?

112
00:06:40.171 --> 00:06:46.108
Cuz I've been teaching this class but
let's just remove it.

113
00:06:46.108 --> 00:06:47.397
Wow there's a lot in here.

114
00:06:47.397 --> 00:06:52.303
Increment data, docker volume,

115
00:06:52.303 --> 00:06:55.860
rm incrementor-data.

116
00:06:55.860 --> 00:07:00.856
Okay, now if I do that, file found,

117
00:07:00.856 --> 00:07:04.574
writing zero to a new file.

118
00:07:04.574 --> 00:07:09.270
And now the big reveal moment that I
definitely didn't spoil 30 seconds ago.

119
00:07:09.270 --> 00:07:12.184
It's there now, and
it'll keep working and running.

120
00:07:14.720 --> 00:07:20.781
&gt;&gt; Brian Holt: Because that volume is
going to survive between runs, right?

121
00:07:20.781 --> 00:07:23.817
So like I said, you could write,
like, a SQlite file here,

122
00:07:23.817 --> 00:07:26.141
right if you're just
doing something that and

123
00:07:26.141 --> 00:07:29.738
you want your database to survive
between runs, which is pretty cool.

124
00:07:29.738 --> 00:07:34.501
The nice thing about Docker volume
is there's a bunch of stuff you

125
00:07:34.501 --> 00:07:35.548
can do for it.

126
00:07:35.548 --> 00:07:41.360
It's really, really easy to just dump
out your volumes and back them up.

127
00:07:41.360 --> 00:07:45.315
You can seed them with data and then we're
only doing this with one app right now,

128
00:07:45.315 --> 00:07:48.977
but you can imagine if we had let's say
four different apps all reading from

129
00:07:48.977 --> 00:07:53.131
the same SQLite database, they could all
read and write to the same volume, right?

130
00:07:53.131 --> 00:07:57.890
So that sharing of data amongst
your Docker cluster becomes quite

131
00:07:57.890 --> 00:07:59.538
simple at that point.

