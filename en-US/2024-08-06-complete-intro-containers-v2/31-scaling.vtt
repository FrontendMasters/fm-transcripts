WEBVTT

1
00:00:00.496 --> 00:00:04.015
&gt;&gt; Brian Holt: But now this is all set up
correctly for us to be able to scale all

2
00:00:04.015 --> 00:00:08.371
the surfaces cuz we have a proper load
balancer in front of it all now as well.

3
00:00:08.371 --> 00:00:14.293
So let's actually go do that cuz that's
why else are we here, if we can't do that.

4
00:00:14.293 --> 00:00:18.173
So kubectl scale --

5
00:00:18.173 --> 00:00:24.431
replicas=5 deployment/api.

6
00:00:24.431 --> 00:00:27.767
So let's say,
that our API is getting hammered, and

7
00:00:27.767 --> 00:00:30.897
we want it to scale up there,
so that will do that.

8
00:00:30.897 --> 00:00:35.048
And now we can go back and
look at our get all.

9
00:00:35.048 --> 00:00:39.854
Now you can see that our API only
1/5 is ready at the moment but

10
00:00:39.854 --> 00:00:46.293
up to date eventually, if we keep checking
yeah, you can see these are all pending,

11
00:00:46.293 --> 00:00:52.813
let's check again
&gt;&gt; Brian Holt: They're all still pending.

12
00:00:56.639 --> 00:00:58.935
&gt;&gt; Brian Holt: Eventually,
they'll start running, anyway,

13
00:00:58.935 --> 00:01:02.500
that's how you scale up and down off
the various different components here.

14
00:01:02.500 --> 00:01:03.523
We could do it with web.

15
00:01:03.523 --> 00:01:11.868
Well, that should work
maybe with a load balancer.

16
00:01:16.581 --> 00:01:21.326
&gt;&gt; Brian Holt: And for fun,
let's just to dB as well.

17
00:01:21.326 --> 00:01:24.717
You can see this ends up being super easy
to just scale up and scale down things.

18
00:01:28.464 --> 00:01:33.229
&gt;&gt; Brian Holt: Okay, and then if we
wanna just get scaled back down.

19
00:01:38.721 --> 00:01:43.302
&gt;&gt; Brian Holt: Web,
then we are back to just one for each.

20
00:01:49.834 --> 00:01:55.474
&gt;&gt; Brian Holt: Okay, and
then once you're done with everything,

21
00:01:55.474 --> 00:02:00.608
you can just say,
kubectl delete all --all.

22
00:02:00.608 --> 00:02:05.442
And then, know behold,
you have nothing running anymore.

23
00:02:05.442 --> 00:02:09.130
On one hand, I hope you see that,
you're armed with enough information to be

24
00:02:09.130 --> 00:02:11.711
dangerous to have conversations
about Kubernetes.

25
00:02:11.711 --> 00:02:14.639
On the other hand,
I hope you have some respect for

26
00:02:14.639 --> 00:02:17.160
people that are very good at this, right?

27
00:02:17.160 --> 00:02:21.297
Again, we very much just scratched
the surface, there's so much depth here.

28
00:02:21.297 --> 00:02:23.464
There's so
much cool stuff that Kubernetes does.

29
00:02:23.464 --> 00:02:25.781
We didn't even talk about
secret management, right?

30
00:02:25.781 --> 00:02:29.722
That's a big part of what
Kubernetes can do for you,

31
00:02:29.722 --> 00:02:33.583
and internal networking and
all that kinda stuff.

32
00:02:33.583 --> 00:02:38.127
So let's go back to our project here.

33
00:02:38.127 --> 00:02:42.712
Kubernetes really, at of the day
you're gonna end up going to something

34
00:02:42.712 --> 00:02:45.283
probably like Azure AKS, EKS, or GKE.

35
00:02:45.283 --> 00:02:49.079
Azure Kubernetes Service,
Elastic Kubernetes Service, or

36
00:02:49.079 --> 00:02:53.686
Google Kubernetes Engine, if I remember
correctly what those stand for.

37
00:02:53.686 --> 00:02:55.258
There's a ton of places to do that.

38
00:02:55.258 --> 00:02:58.874
You can also just run your own,
it's not very hard as long as you have

39
00:02:58.874 --> 00:03:02.630
the ability to spin up and
spin down services, that's not very hard.

40
00:03:02.630 --> 00:03:08.165
So I've seen people do it
on either EC2 and AWS or

41
00:03:08.165 --> 00:03:15.192
Hetzner, which is a big VM provider,
all that kind of stuff.

42
00:03:15.192 --> 00:03:20.215
Yeah, you do pay a premium,
especially, EKS is very expensive,

43
00:03:20.215 --> 00:03:23.551
but it does what it promises,
so it is cool.

