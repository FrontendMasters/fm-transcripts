WEBVTT

1
00:00:00.000 --> 00:00:03.882
&gt;&gt; Brian Holt: All right, so
I have this static asset project.

2
00:00:03.882 --> 00:00:08.181
Yeah, looking good, open this in code.

3
00:00:08.181 --> 00:00:13.527
All right, so this shouldn't have
been the longest Docker file,

4
00:00:13.527 --> 00:00:20.026
but it is definitely a reapplication of
some of the things that you've learned.

5
00:00:20.026 --> 00:00:27.430
So, I got a fresh copy of the,
what I have in the GitHub repo here.

6
00:00:27.430 --> 00:00:32.658
And you can see here I got the Astro File,
let's just look at our dependencies here.

7
00:00:32.658 --> 00:00:38.115
Tailwind, react, Astro, TypeScript.

8
00:00:38.115 --> 00:00:42.582
Not that end really much of this matters.

9
00:00:42.582 --> 00:00:45.442
You can imagine this being
arbitrarily long, right?

10
00:00:45.442 --> 00:00:48.534
You could have as big an Astro
project as you wanna have.

11
00:00:50.117 --> 00:00:54.572
&gt;&gt; Brian Holt: Cool, so,
I'm gonna create a new file here.

12
00:00:54.572 --> 00:01:01.185
Surprise, surprise,
we are going to call it Docker file, okay?

13
00:01:01.185 --> 00:01:07.291
Let's grab a builder, so from node:20 as,

14
00:01:07.291 --> 00:01:13.561
by the way,
you do not have to make this all caps.

15
00:01:13.561 --> 00:01:16.291
I just do out of pure habit.

16
00:01:16.291 --> 00:01:22.732
In fact, I see people all the time that
don't, I just wanted to disclaim that.

17
00:01:22.732 --> 00:01:25.938
As node builder,

18
00:01:25.938 --> 00:01:30.641
workdir/app copy..,

19
00:01:30.641 --> 00:01:38.121
we want everything, we wanna run npm ci,

20
00:01:38.121 --> 00:01:43.061
and then run npm run built.

21
00:01:43.061 --> 00:01:46.658
No, build, thank you.

22
00:01:46.658 --> 00:01:50.378
Say, so far, so good, right?

23
00:01:50.378 --> 00:01:52.763
Copying everything across.

24
00:01:52.763 --> 00:01:57.357
You might say, well, why don't you split

25
00:01:57.357 --> 00:02:01.959
out your npm, your package part and your.

26
00:02:01.959 --> 00:02:05.719
And the reason why I say that is you're
gonna run build at the end of this anyway,

27
00:02:05.719 --> 00:02:07.761
which is probably the longer step anyway.

28
00:02:07.761 --> 00:02:11.218
And also, I'm not really optimizing
here for the development experience.

29
00:02:11.218 --> 00:02:16.066
So, you could totally separate these
steps out again, if you wanted to.

30
00:02:17.702 --> 00:02:22.254
&gt;&gt; Brian Holt: Okay, from, I'm gonna say
nginx, let's just say Alpine for fun,

31
00:02:22.254 --> 00:02:25.960
I think I have latest in my notes,
but either way works.

32
00:02:25.960 --> 00:02:30.482
And then we're gonna say copy --from, and

33
00:02:30.482 --> 00:02:35.599
we're gonna say -node builder,
and app/dist,

34
00:02:35.599 --> 00:02:40.835
and that is the dangers of
relying on Copilot because

35
00:02:40.835 --> 00:02:45.838
it would have been wrong
in that particular case.

36
00:02:45.838 --> 00:02:52.008
You need to go from dist because that's
by default where Astro builds it.

37
00:02:52.008 --> 00:02:56.686
Then we're gonna copy that
to usershare@nginxhtml.

38
00:02:56.686 --> 00:03:02.968
That should be about it,
let's give her a build, see what happens.

39
00:03:02.968 --> 00:03:08.127
So docker build -t, we'll call this,

40
00:03:08.127 --> 00:03:12.383
I don't know, my-static app.

41
00:03:15.681 --> 00:03:17.913
&gt;&gt; Brian Holt: See what happens
when we try and do that.

42
00:03:23.912 --> 00:03:26.578
&gt;&gt; Brian Holt: Did I exclude the Docker?

43
00:03:26.578 --> 00:03:31.547
No, so you probably would
wanna do a Docker ignore here.

44
00:03:31.547 --> 00:03:35.313
I did not do that, which means I
copied my entire node modules across.

45
00:03:40.361 --> 00:03:42.287
&gt;&gt; Brian Holt: But
let's see if that works.

46
00:03:42.287 --> 00:03:49.726
Docker run-it-p,
this is by default runs on port 80.

47
00:03:49.726 --> 00:03:56.437
So we're gonna map port
80 to port 8080 and

48
00:03:56.437 --> 00:04:01.676
name call my-app cuz I'm uncreative

49
00:04:01.676 --> 00:04:07.252
--rm --init and my-static-app.

50
00:04:12.221 --> 00:04:15.870
&gt;&gt; Brian Holt: Okay,
looks like we are up and running here.

51
00:04:15.870 --> 00:04:21.082
Let's see if we go to localhost 8080,
I guess I can just refresh the page here.

52
00:04:21.082 --> 00:04:22.417
Welcome to Astro.

53
00:04:24.209 --> 00:04:25.692
&gt;&gt; Brian Holt: Pretty cool, right?

54
00:04:28.678 --> 00:04:34.701
&gt;&gt; Brian Holt: Let's see, my-static-app
here, 49 Megs, so straight to jail, right?

55
00:04:34.701 --> 00:04:39.818
That's what we said it had to be
under 40 Megs or you going to jail.

56
00:04:39.818 --> 00:04:40.752
Whatever, who cares?

57
00:04:40.752 --> 00:04:48.267
[LAUGH] Cool, how'd we do?

58
00:04:48.267 --> 00:04:50.756
Were able to get it done?

59
00:04:50.756 --> 00:04:55.407
I used to find nginx kind of
unapproachable especially

60
00:04:55.407 --> 00:04:59.359
with how configuring it
can be a bit of a beast.

61
00:04:59.359 --> 00:05:03.399
But it's cool that you're just able
to do this out of the box right away.

62
00:05:03.399 --> 00:05:06.392
&gt;&gt; Speaker 1: Yeah, if we had to do
a command, that might have been harder.

63
00:05:06.392 --> 00:05:07.993
&gt;&gt; Brian Holt: Okay, yeah,
if you had to do a command,

64
00:05:07.993 --> 00:05:11.056
it would be a lot harder because you'd
have to figure out where to run it from,

65
00:05:11.056 --> 00:05:13.293
which configuration to use,
all those kind of things.

66
00:05:13.293 --> 00:05:19.832
But the nice thing is they just
include all those defaults for you.

67
00:05:19.832 --> 00:05:23.080
And what's also kind of interesting and
cool about this,

68
00:05:23.080 --> 00:05:27.189
depending on how you're gonna end up
using nginx, I imagine most of you,

69
00:05:27.189 --> 00:05:30.923
if you're in container land and
building your projects this way.

70
00:05:30.923 --> 00:05:33.973
You're probably gonna end up in
Kubernetes at some point, right?

71
00:05:33.973 --> 00:05:37.514
That's just kind of the logical
conclusion of that pipeline.

72
00:05:37.514 --> 00:05:40.316
Not always true, but frequently true.

73
00:05:40.316 --> 00:05:42.984
If you identify nginx as
the load balancer, and

74
00:05:42.984 --> 00:05:45.797
we'll talk about that when
we get to Kubernetes.

75
00:05:45.797 --> 00:05:48.660
What will actually end up happening is,
Azure or something like that,

76
00:05:48.660 --> 00:05:51.059
will actually just say, cool,
this is a load balancer.

77
00:05:51.059 --> 00:05:54.683
You can use nginx and it'll let you
do that, but you can also just say,

78
00:05:54.683 --> 00:05:59.236
just let Azure's front door, I think it's
called Azure front door, handle it for me,

79
00:05:59.236 --> 00:06:02.156
and then it'll handle all
of your ingressive traffic.

80
00:06:02.156 --> 00:06:05.588
So you use nginx locally,
get all that stuff kind of done, and

81
00:06:05.588 --> 00:06:08.228
then when you go out to
these mega deployments,

82
00:06:08.228 --> 00:06:11.473
the cloud services will handle
a lot of that stuff for you.

83
00:06:11.473 --> 00:06:14.318
Or Cloudflare could be
plugged in there as well.

84
00:06:14.318 --> 00:06:16.128
So, also very cool.

