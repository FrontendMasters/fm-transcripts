WEBVTT

1
00:00:00.320 --> 00:00:02.960
At this point we now we're fully
leaving behind all of the unsharing.

2
00:00:02.960 --> 00:00:04.990
We won't run unshare again in this class.

3
00:00:04.990 --> 00:00:08.632
At this point, I'm gonna assume that
you're convinced that Docker is wholly

4
00:00:08.632 --> 00:00:12.850
unnecessary, and therefore Docker
is totally necessary to you, right?

5
00:00:12.850 --> 00:00:16.410
Let's go ahead and just start running
containers and just kind of getting you

6
00:00:16.410 --> 00:00:19.723
really comfortable with what Docker is and
start using it.

7
00:00:19.723 --> 00:00:24.673
So I'm gonna say docker run, and
I'm gonna say --interactive.

8
00:00:25.803 --> 00:00:29.328
We've been doing this, this entire time,

9
00:00:29.328 --> 00:00:34.109
but I just tended to shorten
that to --it or sorry, -it.

10
00:00:36.201 --> 00:00:41.702
&gt;&gt; Brian Holt: But
--it is really is just --interactive,

11
00:00:41.702 --> 00:00:46.249
inter, I can spell, active --tty.

12
00:00:46.249 --> 00:00:50.031
That's what that -it is.

13
00:00:50.031 --> 00:00:54.336
And then you could say alpine,
which is just the name of

14
00:00:54.336 --> 00:00:58.837
the individual container,
that implicitly is latest.

15
00:01:00.331 --> 00:01:04.841
That's when, if you don't put something
there, it'll just attach that for you.

16
00:01:04.841 --> 00:01:08.887
I'm being super prescriptive in this
class, because if you take this course

17
00:01:08.887 --> 00:01:13.411
in three years, which all this stuff
will be still entirely valid as is.

18
00:01:13.411 --> 00:01:16.068
But sometimes the Linux distributions
can change a little bit and

19
00:01:16.068 --> 00:01:17.281
then it messes people's up.

20
00:01:18.371 --> 00:01:22.354
So I'm just gonna have you be explicit on
which versions you're using so that I can

21
00:01:22.354 --> 00:01:26.472
guarantee you that all these commands are
gonna work now and in three years, right?

22
00:01:27.919 --> 00:01:31.219
&gt;&gt; Brian Holt: So
that's why I'm gonna say alpine 3.19.1.

23
00:01:31.219 --> 00:01:35.409
As of today, that would be latest,
I think, or at least as of last week.

24
00:01:36.709 --> 00:01:38.965
But by the time you watch this,
it probably isn't.

25
00:01:42.536 --> 00:01:46.656
&gt;&gt; Brian Holt: So that
--interactive --tty puts you into this, right?

26
00:01:46.656 --> 00:01:51.646
It makes it interactive so
I can actually, interact with it.

27
00:01:53.066 --> 00:01:56.656
If I don't put that in there,
and I just say run,

28
00:01:56.656 --> 00:02:01.046
it notice it just goes straight
to the background, right?

29
00:02:03.168 --> 00:02:05.356
&gt;&gt; Brian Holt: Because alpine actually
doesn't have any commands to find

30
00:02:05.356 --> 00:02:05.888
in of itself.

31
00:02:05.888 --> 00:02:07.718
It's just a distribution,
it has nothing in it.

32
00:02:07.718 --> 00:02:11.483
It actually just starts and then stops
cuz it has nothing to do, right?

33
00:02:11.483 --> 00:02:19.263
So that's why that -it is
super important there.

34
00:02:22.435 --> 00:02:24.732
&gt;&gt; Brian Holt: And you also have to
give it something to do as well, right?

35
00:02:32.015 --> 00:02:33.282
&gt;&gt; Brian Holt: Run,
what did I run do there?

36
00:02:33.282 --> 00:02:34.512
Did I say I forgot run.

37
00:02:39.231 --> 00:02:40.071
&gt;&gt; Brian Holt: Yeah, you need run.

38
00:02:41.491 --> 00:02:42.911
And that will drop you in your shell.

39
00:02:42.911 --> 00:02:47.091
So just remember, every time you do run,
you are starting a new container.

40
00:02:47.091 --> 00:02:49.121
That's important to know
because people get frustrated.

41
00:02:49.121 --> 00:02:52.841
It's like, how do I interact with
the same container that is exec?

42
00:02:52.841 --> 00:02:56.961
Exec will allow you to interact with
other containers or existing containers.

43
00:02:56.961 --> 00:02:59.030
Run is always going to start
a new container for you.

44
00:02:59.030 --> 00:03:02.630
I think even if I do that, yeah,
it'll just drop me in there, because,

45
00:03:02.630 --> 00:03:06.957
by default, it'll run the shell, cuz that's
what is defined as its default action.

46
00:03:06.957 --> 00:03:10.840
What happens if I wanted to do
something other than just run a shell?

47
00:03:10.840 --> 00:03:15.694
This is really dumb, but what if I
just want it to run ls then finish?

48
00:03:15.694 --> 00:03:16.730
You can do that, right?

49
00:03:16.730 --> 00:03:19.342
You can just pass it whatever
command you want it to do.

50
00:03:19.342 --> 00:03:23.567
I don't know why you would wanna do this,
but it's possible, right?

51
00:03:23.567 --> 00:03:26.913
Sometimes you wanna use this for
something like,

52
00:03:26.913 --> 00:03:31.851
let's say I wanna connect to a MongoDB
instance that's out in the cloud,

53
00:03:31.851 --> 00:03:35.612
and I don't really wanna
install Mongo on my computer.

54
00:03:35.612 --> 00:03:40.000
I'm sure many of you kind of felt that
before, you can actually just run a Mongo

55
00:03:40.000 --> 00:03:42.610
container and
have that connect to the thing.

56
00:03:42.610 --> 00:03:45.490
So you actually running a container
that's connecting to the network.

57
00:03:45.490 --> 00:03:46.850
You can do all the stuff you need to do.

58
00:03:46.850 --> 00:03:49.350
And then you can exit and
it'll remove everything.

59
00:03:49.350 --> 00:03:52.520
So you actually never have to
install Mongo which is cool.

60
00:03:52.520 --> 00:03:54.506
Stuff like that.

61
00:03:56.120 --> 00:03:58.282
&gt;&gt; Brian Holt: So this was done on Alpine.

62
00:03:58.282 --> 00:04:04.325
What happens if we do
this on ubuntu:jammy?

63
00:04:04.325 --> 00:04:07.631
You can see it's different.

64
00:04:09.351 --> 00:04:11.171
Not a lot different,
but slightly different.

65
00:04:14.601 --> 00:04:17.539
&gt;&gt; Brian Holt: Which is kinda cool,
cuz this is running on Ubuntu instead of

66
00:04:17.539 --> 00:04:22.333
running on Alpine
&gt;&gt; Brian Holt: What happens if you do

67
00:04:22.333 --> 00:04:24.702
wanna run something in the background?

68
00:04:24.702 --> 00:04:31.542
Well, you can say docker run, --detach.

69
00:04:31.542 --> 00:04:39.386
Or for short, you can just say dit,
ubuntu:jammy.

70
00:04:42.996 --> 00:04:44.286
&gt;&gt; Brian Holt: This will
throw it into the background.

71
00:04:44.286 --> 00:04:46.256
This is actually what it called it.

72
00:04:46.256 --> 00:04:47.696
So if I say Docker PS now,

73
00:04:47.696 --> 00:04:50.926
you can see that I have jammy
running in the background.

74
00:04:50.926 --> 00:04:52.746
So this container is still living on.

75
00:04:52.746 --> 00:04:53.926
It's living on in the background.

76
00:04:55.616 --> 00:04:59.076
And so now,
because I didn't give it a name.

77
00:04:59.076 --> 00:05:03.344
You can either call it vigilant_brattain,
which is the random name that assigned it

78
00:05:03.344 --> 00:05:06.846
or you can use the hash as well,
which is totally fine.

79
00:05:06.846 --> 00:05:08.760
Or you can use this mini hash,

80
00:05:08.760 --> 00:05:12.446
which I think is the first 10
numbers of it or whatever.

81
00:05:14.746 --> 00:05:16.823
&gt;&gt; Brian Holt: You can see it's
just hanging out doing bash so

82
00:05:16.823 --> 00:05:18.056
it's not doing anything.

83
00:05:18.056 --> 00:05:22.650
It's just hanging out in the background,
yeah.

84
00:05:22.650 --> 00:05:26.100
&gt;&gt; Speaker 2: Is there any reason besides
debugging to go into a running container?

85
00:05:26.100 --> 00:05:28.674
&gt;&gt; Brian Holt: Is there any reason to
go into a running container besides

86
00:05:28.674 --> 00:05:29.920
debugging?

87
00:05:29.920 --> 00:05:33.249
If I'm running a thousand Kubernetes, or

88
00:05:33.249 --> 00:05:37.690
a thousand container cluster out there,
probably not.

89
00:05:39.343 --> 00:05:42.493
Probably even a bad idea to connect
directly to your containers, right?

90
00:05:42.493 --> 00:05:43.774
You wanna get that from Datadog or

91
00:05:43.774 --> 00:05:46.163
wherever you're aggregating
all of your information from.

92
00:05:47.603 --> 00:05:51.828
But if I'm just messing around and
doing development and hopping around all

93
00:05:51.828 --> 00:05:56.185
my containers and popping on my database
container to connect to the client and

94
00:05:56.185 --> 00:06:00.031
then popping over to my app container
to see, all that kind of stuff.

95
00:06:01.921 --> 00:06:03.281
For all that stuff running locally.

96
00:06:03.281 --> 00:06:08.209
Yeah, I'm all messing around with all of
my containers out in production almost

97
00:06:08.209 --> 00:06:08.721
never.

98
00:06:09.831 --> 00:06:13.711
So there's another thing you can do
as well, which is docker attach.

99
00:06:15.641 --> 00:06:17.828
So if I do this, docker attach to that.

100
00:06:19.129 --> 00:06:21.464
Because this container
is just hanging out,

101
00:06:21.464 --> 00:06:25.099
this actually allowed me to connect
to the same instance of it as well.

102
00:06:25.099 --> 00:06:29.709
So it's not actually starting a new
Docker process or a new Bash process.

103
00:06:29.709 --> 00:06:32.269
It's not starting a new Bash or
anything like that.

104
00:06:32.269 --> 00:06:33.669
You can see I'm actually
connected to the same one.

105
00:06:33.669 --> 00:06:37.615
So Docker attach is different than Exec
because Exec is actually going to execute

106
00:06:37.615 --> 00:06:39.898
something new on your container.

107
00:06:39.898 --> 00:06:43.818
Docker attaches is basically like, hey,
just attach me to what's already running.

108
00:06:43.818 --> 00:06:47.688
In this particular case,
doesn't really matter, right?

109
00:06:47.688 --> 00:06:49.316
We're both connecting to Bash, but

110
00:06:49.316 --> 00:06:52.058
imagine if you're running like
Postgres on your container.

111
00:06:53.188 --> 00:06:57.583
If I say docker attach, it's going to
attach me to the process that's actually

112
00:06:57.583 --> 00:07:00.938
running the server,
which may not be what you want, right?

113
00:07:00.938 --> 00:07:04.028
It's just gonna show you logs
that will not be interactive.

114
00:07:04.028 --> 00:07:07.122
If I wanna actually connect to the
container and not be directly connected to

115
00:07:07.122 --> 00:07:10.138
that process, I'll have to docker
exec to get into that particular one.

116
00:07:11.308 --> 00:07:15.837
So the other reason I bring that up is
that does confuse people sometimes with

117
00:07:15.837 --> 00:07:20.151
like, hey, I just wanna get on
the container and mess around with Bash,

118
00:07:20.151 --> 00:07:23.872
I don't wanna be connected to
the database process, right?

119
00:07:25.412 --> 00:07:28.819
That's why attaches to get on
to what's existing and running,

120
00:07:28.819 --> 00:07:30.722
Exec will run a new process for you.

121
00:07:34.152 --> 00:07:36.042
Okay, I'm gonna exit.

122
00:07:36.042 --> 00:07:40.039
I'm gonna say, Docker kill, and again,

123
00:07:40.039 --> 00:07:44.405
I can say either blah, vigilant_brattain.

124
00:07:44.405 --> 00:07:47.299
I can say this which is the
shorthand or I can go up here and

125
00:07:47.299 --> 00:07:48.725
I can grab the whole thing.

126
00:07:50.275 --> 00:07:52.005
Any one of these will work.

127
00:07:59.736 --> 00:08:03.582
&gt;&gt; Brian Holt: It was not running because
I exited here, cuz I attached to it,

128
00:08:03.582 --> 00:08:04.104
right?

129
00:08:04.104 --> 00:08:10.073
So docker image, if I say ls,
you can see here I have,

130
00:08:10.073 --> 00:08:15.316
these are all of the images I've pulled.

131
00:08:15.316 --> 00:08:17.867
You can see I have stuff
in here from weeks ago.

132
00:08:20.867 --> 00:08:24.117
&gt;&gt; Brian Holt: Communities web,
I got all sorts of stuff on here.

133
00:08:24.117 --> 00:08:26.617
So that'll show you
the images that you have.

134
00:08:26.617 --> 00:08:31.614
If I say docker container ls,
this should be all the containers

135
00:08:31.614 --> 00:08:36.330
that I have not actually got
removed all of their remnants,

136
00:08:36.330 --> 00:08:41.975
all of their logs and all that kind
of stuff, I think that's the case.

137
00:08:41.975 --> 00:08:46.375
Yeah, just manage the individual
containers that are running at

138
00:08:46.375 --> 00:08:51.656
the moment
&gt;&gt; Brian Holt: But

139
00:08:51.656 --> 00:08:55.665
that's why we always there
it is docker ps --all.

140
00:08:55.665 --> 00:08:59.625
Yeah, you can see here I have a bunch
of stuff like, you can see even from

141
00:08:59.625 --> 00:09:03.388
this class, every time that I'm
not putting --rm in there,

142
00:09:03.388 --> 00:09:07.775
it's keeping all these remnants laying
around, which can add up after time.

143
00:09:10.145 --> 00:09:17.006
I think if I say docker prune,
I've got to remember now, docker.

144
00:09:17.006 --> 00:09:19.671
System prune, container, prune.

145
00:09:19.671 --> 00:09:21.627
Container, prune, I think you're right.

146
00:09:21.627 --> 00:09:24.063
Yeah, so
this will remove all the information for

147
00:09:24.063 --> 00:09:25.689
stopped containers that I have.

148
00:09:26.799 --> 00:09:29.669
And you can see here bunch
of stuff just freed up.

149
00:09:31.209 --> 00:09:35.119
I removed 140 megabytes of just
stuff laying around, right?

150
00:09:35.119 --> 00:09:38.889
And so now if I say dash, dash, all.

151
00:09:38.889 --> 00:09:40.579
Now it's nothing in there, right?

152
00:09:40.579 --> 00:09:42.359
So that's why prune is nice for
that as well.

153
00:09:43.419 --> 00:09:48.499
That's why I almost always
do docker run --rm.

154
00:09:55.313 --> 00:09:57.560
&gt;&gt; Brian Holt: Ubuntu jammy.

155
00:10:01.011 --> 00:10:01.931
&gt;&gt; Brian Holt: So I ran that.

156
00:10:01.931 --> 00:10:03.671
I just put it in the background.

157
00:10:03.671 --> 00:10:06.423
I'm gonna kill it really quick.

158
00:10:11.641 --> 00:10:17.211
&gt;&gt; Brian Holt: And now if I say docker ps
--all, notice it doesn't show up in here.

159
00:10:17.211 --> 00:10:19.736
That --rm is what keeps
it from showing up there.

160
00:10:19.736 --> 00:10:22.430
So if I'm just churning
through a bunch of stuff and

161
00:10:22.430 --> 00:10:26.563
not really caring about why stuff exits,
I always put that --rm on there, so

162
00:10:26.563 --> 00:10:29.406
I don't have to remember to
run prune every so often.

163
00:10:30.616 --> 00:10:34.212
Some people that know will have a cron
job that just runs prune once a week or

164
00:10:34.212 --> 00:10:35.806
something like that.

165
00:10:35.806 --> 00:10:40.499
I don't use Docker that much, so I don't
typically do it, but if I did this whole

166
00:10:40.499 --> 00:10:44.517
process without the --rm,
it would keep all that stuff around.

167
00:10:47.130 --> 00:10:51.047
&gt;&gt; Brian Holt: And then, yeah notice
I put a name on here of my-ubuntu.

168
00:10:51.047 --> 00:10:53.827
Notice that this is not a randomly
generated name anymore.

169
00:10:53.827 --> 00:10:55.667
It's called my-ubuntu.

170
00:10:55.667 --> 00:10:58.483
That's just helpful for
me to remember what I called stuff.

171
00:10:58.483 --> 00:11:00.301
As opposed to being randomly generated.

172
00:11:00.301 --> 00:11:02.224
Which by the way,
all this stuff I'm showing you,

173
00:11:02.224 --> 00:11:03.671
it all shows up in here as well.

174
00:11:03.671 --> 00:11:06.428
This is just a visual
representation of Docker PS and

175
00:11:06.428 --> 00:11:08.441
Docker images that I'm showing you.

176
00:11:08.441 --> 00:11:09.921
It all just shows up here.

177
00:11:12.681 --> 00:11:17.182
But there is a lot of stuff you can do
here, you can figure how much resources it

178
00:11:17.182 --> 00:11:21.771
gets, how many processes you can run,
blah blah blah, that all exists here.

179
00:11:21.771 --> 00:11:23.151
Resources maybe?

180
00:11:23.151 --> 00:11:26.777
Yeah, see this is what you configure here,

181
00:11:26.777 --> 00:11:31.876
is all gonna translate into c groups,
which is cool, right?

182
00:11:35.266 --> 00:11:40.198
They definitely hide about, they're not
allowing you to control how many PIDs that

183
00:11:40.198 --> 00:11:42.566
show up in here, right, but you could.

