WEBVTT

1
00:00:00.021 --> 00:00:01.087
&gt;&gt; Brian Holt: We talked
a little bit about tags.

2
00:00:01.087 --> 00:00:04.028
Let's talk a little bit more about tags.

3
00:00:04.028 --> 00:00:08.548
So far, I've just kind of been
telling you to put the colon there and

4
00:00:08.548 --> 00:00:10.626
just making you go through it.

5
00:00:10.626 --> 00:00:12.202
A tag can be anything.

6
00:00:12.202 --> 00:00:13.529
You can put anything you want in the tag.

7
00:00:13.529 --> 00:00:16.914
Notice that we were doing Jammy for
Ubuntu, right?

8
00:00:16.914 --> 00:00:19.673
But if you go look in here,
let's go look at Ubuntu in here.

9
00:00:25.225 --> 00:00:30.688
&gt;&gt; Brian Holt: So Jammy is really just an
alias for 22.04, but it's much simpler for

10
00:00:30.688 --> 00:00:34.514
my mind to remember Jammy
as opposed to 22.04.

11
00:00:34.514 --> 00:00:39.197
So they do that so that you're
able to kind of recall those as

12
00:00:39.197 --> 00:00:43.799
opposed to just having to
remember the name of the number.

13
00:00:43.799 --> 00:00:47.522
Mantic is their unstable
one that they're doing, or

14
00:00:47.522 --> 00:00:53.244
development version that they're doing,
and then Noble is the next stable one.

15
00:00:53.244 --> 00:00:55.981
I don't know if it's actually stable yet.

16
00:00:55.981 --> 00:01:00.965
I don't really keep so close up to
date with what Ubuntu's releasing,

17
00:01:00.965 --> 00:01:05.130
but eventually,
Noble will be the next release of Ubuntu.

18
00:01:05.130 --> 00:01:10.772
It's always like Jammy jellyfish or
focal fox,

19
00:01:10.772 --> 00:01:15.456
it's always alliteration for Ubuntu.

20
00:01:15.456 --> 00:01:20.200
You can see that they have various
different architectures that they support,

21
00:01:20.200 --> 00:01:24.589
which actually ends up being really
important because I'm on a MacBook,

22
00:01:24.589 --> 00:01:26.881
I have to pull arm compatible images.

23
00:01:26.881 --> 00:01:28.735
But Docker handles all of that for you.

24
00:01:28.735 --> 00:01:33.948
But if someone releases a new
container and they don't compile

25
00:01:33.948 --> 00:01:40.355
it in your particular flavor of
instruction set, you'll have some issues.

26
00:01:40.355 --> 00:01:42.843
Because this is a MacBook
it has Rosetta so

27
00:01:42.843 --> 00:01:46.903
it'll still run I'll just be a lot
slower and a lot less efficient.

28
00:01:46.903 --> 00:01:48.726
But just something to keep in mind.

29
00:01:48.726 --> 00:01:52.462
I'm sure with the new surfaces that
Microsoft is releasing that are all ARM

30
00:01:52.462 --> 00:01:54.490
based will have the same issues as well.

31
00:01:54.490 --> 00:01:59.328
We talked a little bit that if you
don't put anything there it's gonna

32
00:01:59.328 --> 00:02:03.838
assume that you meant latest,
which is not always what you want.

33
00:02:07.314 --> 00:02:09.258
&gt;&gt; Brian Holt: And, yeah,
we talked about what Alpine Linux is, but

34
00:02:09.258 --> 00:02:10.835
we're gonna get really into depth with it.

35
00:02:10.835 --> 00:02:15.665
Alpine Linux is basically the last time I
taught this course was by far the smallest

36
00:02:15.665 --> 00:02:17.628
distribution of Linux, right?

37
00:02:17.628 --> 00:02:19.842
Not even close.

38
00:02:19.842 --> 00:02:21.390
Now it has some pretty stiff competition.

39
00:02:21.390 --> 00:02:25.623
There's like four or
five distributions of Linux that

40
00:02:25.623 --> 00:02:30.786
are competing to be like the default
container operating system.

41
00:02:30.786 --> 00:02:32.026
Still lots of people use Alpine.

42
00:02:32.026 --> 00:02:36.560
It's a very well understood container,
so people understand what to do with it.

43
00:02:36.560 --> 00:02:38.472
But anyway,
we'll get to that here in a little bit.

44
00:02:41.236 --> 00:02:44.025
&gt;&gt; Brian Holt: Yeah, this is a good
pro-tip to just kinda keep in the back of

45
00:02:44.025 --> 00:02:44.583
your head.

46
00:02:44.583 --> 00:02:46.975
With your development container, so

47
00:02:46.975 --> 00:02:51.470
whatever you're using to develop stuff,
use the full Debian and all of it.

48
00:02:51.470 --> 00:02:53.012
Don't use the slim one.

49
00:02:53.012 --> 00:02:55.592
Have it be 5 gigs and
include all of your development tools.

50
00:02:55.592 --> 00:02:57.184
Do all the stuff that you need to do.

51
00:02:57.184 --> 00:03:02.659
And then when you ship stuff to production
ship that in Alpine or distroless or

52
00:03:02.659 --> 00:03:08.393
something like that so that you have less
security surface area in your containers.

53
00:03:10.650 --> 00:03:12.681
&gt;&gt; Brian Holt: Yeah,
you'll get the best of both worlds.

54
00:03:17.259 --> 00:03:22.493
&gt;&gt; Brian Holt: Okay, so that's tags, we
did talk a little bit about the CLI, but

55
00:03:22.493 --> 00:03:27.744
we'll just talk a couple more about
some more features of the CLI.

56
00:03:27.744 --> 00:03:34.840
This is my favorite demo, so
we're definitely gonna do this.

57
00:03:34.840 --> 00:03:39.352
Make this small for just a second.

58
00:03:39.352 --> 00:03:44.214
Well, so I'm gonna run this command,
docker pull jterpin/hollywood.

59
00:03:47.777 --> 00:03:52.190
&gt;&gt; Brian Holt: So I pulled it, what pull
does, you can ignore the deprecation,

60
00:03:52.190 --> 00:03:57.179
just no one cares, is it all does is
just pulls it into your cache, right?

61
00:03:57.179 --> 00:04:00.674
So it goes out to Docker Hub,
it downloads it, and

62
00:04:00.674 --> 00:04:03.348
then it doesn't do anything with it.

63
00:04:03.348 --> 00:04:06.874
Okay, and then now that I've
pulled it into my cache,

64
00:04:06.874 --> 00:04:09.490
I don't have to wait for it to download.

65
00:04:09.490 --> 00:04:16.327
So I can say, Docker run Hollywood,
and let's just make this full screen.

66
00:04:21.407 --> 00:04:23.979
&gt;&gt; Brian Holt: So
what this container is for

67
00:04:23.979 --> 00:04:29.238
is you run this on an airplane and
you see who gets nervous.

68
00:04:29.238 --> 00:04:33.221
It's not doing anything other than just
running a bunch of random Linux commands.

69
00:04:33.221 --> 00:04:35.166
And it makes you look like a hacker,
right?

70
00:04:35.166 --> 00:04:38.859
[LAUGH] It's amazing, right?

71
00:04:43.519 --> 00:04:44.552
&gt;&gt; Brian Holt: Super funny to me.

72
00:04:46.985 --> 00:04:50.657
&gt;&gt; Brian Holt: Yeah, it's called Hollywood
because it does absolutely nothing.

73
00:04:54.354 --> 00:04:57.066
&gt;&gt; Brian Holt: And then I think this is
using screen to just divvy up your screen

74
00:04:57.066 --> 00:04:58.919
in a bunch of different ways, kind of fun.

75
00:04:58.919 --> 00:05:03.583
So let's run that in the background,
docker run, and as you remember,

76
00:05:03.583 --> 00:05:05.423
-dit is in the background.

77
00:05:05.423 --> 00:05:11.284
Name, I'm gonna call it hw for
Hollywood, --rm,

78
00:05:11.284 --> 00:05:16.377
and then I'm gonna run jturpin/hollywood.

79
00:05:19.881 --> 00:05:21.510
&gt;&gt; Brian Holt: Hollywood, okay, and

80
00:05:21.510 --> 00:05:25.100
now you can see I had this
running in the background.

81
00:05:25.100 --> 00:05:28.635
You can docker pause hw, and

82
00:05:28.635 --> 00:05:32.767
you can see now that it is paused.

83
00:05:35.078 --> 00:05:39.110
&gt;&gt; Brian Holt: And
I can say docker unpause hw and

84
00:05:39.110 --> 00:05:43.435
lo and behold, it'll unpause it.

85
00:05:43.435 --> 00:05:47.187
And then docker kill hw.

86
00:05:47.187 --> 00:05:48.467
Why would you wanna do that?

87
00:05:48.467 --> 00:05:52.978
I don't know, I haven't actually really
ever had a use case to pause a container,

88
00:05:52.978 --> 00:05:53.693
but you can.

89
00:05:53.693 --> 00:05:55.957
Figure it might be useful for someone.

90
00:05:55.957 --> 00:05:58.806
We talked a little bit about docker exec,
so

91
00:05:58.806 --> 00:06:01.735
I'm gonna run that in
the background again.

92
00:06:01.735 --> 00:06:06.675
And I can say docker exec hw ps aux.

93
00:06:06.675 --> 00:06:13.634
So if I run this,
&gt;&gt; Brian Holt: Exec says, okay,

94
00:06:13.634 --> 00:06:18.655
connect to this container, hw,
and then run this command.

95
00:06:18.655 --> 00:06:22.170
So now I'm seeing the output of everything

96
00:06:22.170 --> 00:06:26.765
that's running in that
Hollywood container, right?

97
00:06:26.765 --> 00:06:30.749
So this is what I was talking
about if I run docker attach,

98
00:06:30.749 --> 00:06:35.895
docker attach hw, notice it actually
drops me directly into the whatever

99
00:06:35.895 --> 00:06:40.133
is running in the foreground
into that particular process.

100
00:06:40.133 --> 00:06:45.457
So now that I've hit CTRL+C,
I've actually stopped it from running,

101
00:06:45.457 --> 00:06:48.175
which is not probably what I wanted.

102
00:06:54.243 --> 00:06:56.672
&gt;&gt; Brian Holt: And then If I say
docker ps, it should be gone.

103
00:06:56.672 --> 00:06:58.461
Yeah, see it's gone,

104
00:06:58.461 --> 00:07:04.375
which is you have to be careful with
attach from that particular perspective.

105
00:07:04.375 --> 00:07:07.479
Usually, it's exec what you want.

106
00:07:07.479 --> 00:07:12.059
Import/export, we talked about export that
we exported it out into a tar file, right?

107
00:07:12.059 --> 00:07:14.240
And then we used that later.

108
00:07:14.240 --> 00:07:18.364
Import, as you might imagine, is you have
a container that exists outside of docker

109
00:07:18.364 --> 00:07:20.871
and you wanna import it to
be used inside of docker.

110
00:07:20.871 --> 00:07:24.112
That's what Docker import would do.

111
00:07:24.112 --> 00:07:29.097
Docker history will show you
the history of like what's happened

112
00:07:29.097 --> 00:07:32.732
with all the various
different layers inside.

113
00:07:32.732 --> 00:07:34.796
We'll talk about layers in a bit.

114
00:07:34.796 --> 00:07:39.178
But that'll show you when it was created,
when it's been modified,

115
00:07:39.178 --> 00:07:40.821
all those kind of things.

116
00:07:44.138 --> 00:07:46.013
&gt;&gt; Brian Holt: Docker info.

117
00:07:50.651 --> 00:07:53.098
&gt;&gt; Brian Holt: It was just docker info.

118
00:07:53.098 --> 00:07:54.363
Got it, okay.

119
00:07:54.363 --> 00:07:56.709
Yeah, this is one that will show you
that's actually what's It's available and

120
00:07:56.709 --> 00:07:57.767
how it's configured at the moment.

121
00:07:57.767 --> 00:08:01.592
So we're not in debug mode,
there's the proxy, blah, blah, blah.

122
00:08:01.592 --> 00:08:06.844
That can be useful for debugging purposes.

123
00:08:06.844 --> 00:08:13.123
This is a cool one that
docker run -dit name,

124
00:08:13.123 --> 00:08:21.559
we're gonna run a Mongo container
really quick, --rm mongo.

125
00:08:21.559 --> 00:08:25.944
Okay, so I have Mongo running
in the background now,

126
00:08:25.944 --> 00:08:29.848
which is MongoDB,
in case you're wondering.

127
00:08:29.848 --> 00:08:35.326
And I'm gonna say docker top my-mongo.

128
00:08:35.326 --> 00:08:39.138
This is gonna give me the output
of like ps aux, right?

129
00:08:39.138 --> 00:08:42.616
That's what I've been doing over and
over again.

130
00:08:42.616 --> 00:08:47.319
But you can see all that it's doing right
now is running an instance of the Mongo

131
00:08:47.319 --> 00:08:49.326
daemon and with bind_ip_all.

132
00:08:51.953 --> 00:08:52.862
&gt;&gt; Brian Holt: Kinda cool, right?

133
00:08:55.254 --> 00:08:57.924
&gt;&gt; Brian Holt: Kill my-mongo.

134
00:09:04.591 --> 00:09:07.495
&gt;&gt; Brian Holt: I don't think I have any,
I do, okay cool.

135
00:09:07.495 --> 00:09:13.186
So let's say I wanted to get,
this is all of my dead container, right?

136
00:09:13.186 --> 00:09:15.839
They're all status exited
down here on the right.

137
00:09:15.839 --> 00:09:18.208
So, let's say I wanted to get rid of
one of these, but not all of them.

138
00:09:18.208 --> 00:09:22.443
I can say docker rm, blah,
and that'll go through and

139
00:09:22.443 --> 00:09:28.906
actually remove just that one, as opposed
to removing all of them at the same time.

140
00:09:28.906 --> 00:09:32.112
By the same token,
I have docker images, right?

141
00:09:37.222 --> 00:09:40.743
&gt;&gt; Brian Holt: Come on.

142
00:09:40.743 --> 00:09:43.225
Let's say, I don't know,
I wanna get rid of this one.

143
00:09:43.225 --> 00:09:46.020
You can say docker rmi,
the I for images and

144
00:09:46.020 --> 00:09:49.899
I can just say I don't wanna have
this in my cache anymore and

145
00:09:49.899 --> 00:09:54.028
it'll actually go through and
delete those out of your cache.

146
00:09:54.028 --> 00:09:57.248
If you're done with it, you need to
free up some storage but not all of it.

147
00:09:57.248 --> 00:10:01.676
That's one way you could do it.

148
00:10:04.500 --> 00:10:06.350
&gt;&gt; Brian Holt: Okay, Docker restart.

149
00:10:06.350 --> 00:10:09.683
probably no surprise to you that
that will restart a container.

150
00:10:09.683 --> 00:10:12.264
Good to know.

151
00:10:12.264 --> 00:10:16.199
You can search for stuff on Docker Hub by
saying Docker search this will show you

152
00:10:16.199 --> 00:10:18.059
everything that It has Python in it.

153
00:10:21.297 --> 00:10:26.777
&gt;&gt; Brian Holt: And yeah,
that's about all of the surface area

154
00:10:26.777 --> 00:10:33.491
of Docker that I tend to use
on a monthly basis, probably.

155
00:10:33.491 --> 00:10:35.982
It does more.

156
00:10:38.226 --> 00:10:40.303
&gt;&gt; Brian Holt: And
we'll talk about a few of them, right?

157
00:10:40.303 --> 00:10:42.884
But you can see here,
there's a bunch of them.

