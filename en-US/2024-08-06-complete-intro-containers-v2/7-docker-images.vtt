WEBVTT

1
00:00:00.490 --> 00:00:03.101
&gt;&gt; Brian Holt: Let's talk about
containers, we went through and

2
00:00:03.101 --> 00:00:05.120
we did crafting containers by hand.

3
00:00:05.120 --> 00:00:10.004
Now you are armed with the knowledge of
what a container is, what it's doing,

4
00:00:10.004 --> 00:00:11.786
what it's solving for you.

5
00:00:11.786 --> 00:00:15.562
And now you're never gonna have
to do anything I just showed you.

6
00:00:15.562 --> 00:00:18.789
Which is both cool, cuz you can
see here I had to have notes for

7
00:00:18.789 --> 00:00:22.095
all that cuz I can't remember
the stuff off the top of my head.

8
00:00:22.095 --> 00:00:28.036
But I find this useful just because,
whenever I don't know how my tools work,

9
00:00:28.036 --> 00:00:34.083
I tend to kind of resent them a little bit
because they add complexity to my life.

10
00:00:34.083 --> 00:00:37.647
But when I understand what they're doing
for me and what I no longer have to do

11
00:00:37.647 --> 00:00:41.394
because the tool is doing it for me, then
I tend to really like my tools, right?

12
00:00:41.394 --> 00:00:45.455
Because I know what I'm
getting myself out of.

13
00:00:47.163 --> 00:00:51.675
&gt;&gt; Brian Holt: So, we're gonna actually
start diving more into depth into Docker,

14
00:00:51.675 --> 00:00:53.672
Docker-specific features.

15
00:00:53.672 --> 00:00:58.102
A bunch of this stuff will apply
to other container runtimes and

16
00:00:58.102 --> 00:01:00.957
container orchestration frameworks.

17
00:01:00.957 --> 00:01:03.948
But we're gonna do it all through
the lens of Docker because it's by

18
00:01:03.948 --> 00:01:04.954
far the most popular.

19
00:01:06.886 --> 00:01:10.952
&gt;&gt; Brian Holt: So,
we're gonna hop into Docker images here.

20
00:01:10.952 --> 00:01:15.589
So the first thing that you wanna
to know about containers is

21
00:01:15.589 --> 00:01:19.397
a premade container that
you can use is an image.

22
00:01:19.397 --> 00:01:21.515
You can think of this
container like class,

23
00:01:21.515 --> 00:01:23.698
if we're using programming terms, right?

24
00:01:23.698 --> 00:01:27.855
It's like a reusable structure that
you can instantiate many of, and

25
00:01:27.855 --> 00:01:30.118
you would call this an image, right?

26
00:01:32.227 --> 00:01:35.124
&gt;&gt; Brian Holt: So basically, what it is,
is you create a container, and

27
00:01:35.124 --> 00:01:36.792
then you just dump out the state.

28
00:01:36.792 --> 00:01:42.358
And that state that you have dumped
out is what the image is, right?

29
00:01:42.358 --> 00:01:45.603
So, we've been using one already, right?

30
00:01:45.603 --> 00:01:50.450
That ubuntu:jammy is an image
that we got off of Docker Hub.

31
00:01:51.670 --> 00:01:55.230
So it's probably useful for
you to just go to hub.docker.com.

32
00:01:55.230 --> 00:02:01.145
If you're familiar with NPM or any one
of those package manager frameworks,

33
00:02:01.145 --> 00:02:04.429
Docker Hub is what that is for containers.

34
00:02:04.429 --> 00:02:08.799
So you can see here,
there is a container for everything.

35
00:02:10.029 --> 00:02:13.569
There's one for Nginx, there's one for
Postgres, there's one for

36
00:02:13.569 --> 00:02:17.889
Python, there's one for LangChain,
there's one for TensorFlow.

37
00:02:17.889 --> 00:02:20.651
If you can guess a language or
a framework,

38
00:02:20.651 --> 00:02:25.250
I guarantee you someone has
written a Docker container for it.

39
00:02:25.250 --> 00:02:29.217
Kind of like NPM, right,
but just for containers.

40
00:02:29.217 --> 00:02:31.585
Which is great, because,
for the most part,

41
00:02:31.585 --> 00:02:33.832
this means if you have
a some specific need,

42
00:02:33.832 --> 00:02:37.923
this is actually extremely applicable
to what I'm doing now with Docusaurus.

43
00:02:37.923 --> 00:02:41.230
I'm rebuilding the docs for
the company that I work at.

44
00:02:41.230 --> 00:02:43.251
Turns out there's already
a container image for that,

45
00:02:43.251 --> 00:02:46.593
I don't have to go build that,
I can just go ahead and use theirs.

46
00:02:46.593 --> 00:02:49.882
So a lot of what we're gonna be doing
is going to be based of these base

47
00:02:49.882 --> 00:02:50.589
containers.

48
00:02:50.589 --> 00:02:54.429
And then we're gonna add little
modifications to suit our needs to it.

49
00:02:54.429 --> 00:02:58.800
Let's go ahead and
do a Docker image without Docker,

50
00:02:58.800 --> 00:03:02.683
just to show you that
nothing Docker is doing for

51
00:03:02.683 --> 00:03:07.529
you is really super interesting
from that perspective.

52
00:03:07.529 --> 00:03:12.004
So I want you to copy and run this.

53
00:03:12.004 --> 00:03:14.974
You can go ahead and get rid of
everything that we have done previously,

54
00:03:14.974 --> 00:03:17.014
which I'm gonna to just
exit out of all of these.

55
00:03:17.014 --> 00:03:22.475
Just so you know, this will destroy all
the work that we did, that's okay, right?

56
00:03:26.786 --> 00:03:29.307
&gt;&gt; Brian Holt: And if I say docker ps, and

57
00:03:29.307 --> 00:03:34.361
now I have no containers running,
so that's cool.

58
00:03:34.361 --> 00:03:39.979
Okay, so I'm gonna run this docker run,
that's gonna run an image,

59
00:03:39.979 --> 00:03:44.183
the -ti, as you might remember,
is interactive.

60
00:03:44.183 --> 00:03:47.579
This -v is mounting a volume, that
we're gonna talk about that at the end.

61
00:03:47.579 --> 00:03:52.706
But suffice to say, this is going
to connect to our core, our host

62
00:03:52.706 --> 00:03:58.599
Docker instance so that we can use its
containers inside of our container.

63
00:04:00.609 --> 00:04:05.984
And then we're gonna, Docker makes
a container which has Docker in it.

64
00:04:08.054 --> 00:04:12.916
I know that's a little wild, but what
we're gonna do with that is we're going to

65
00:04:12.916 --> 00:04:15.275
pull in containers off of Docker Hub and

66
00:04:15.275 --> 00:04:18.659
then we're going to start
using them inside of Docker.

67
00:04:21.420 --> 00:04:27.069
&gt;&gt; Brian Holt: So, pwd, I'm inside of
a container, and if I say cat etc/issue,

68
00:04:27.069 --> 00:04:32.539
cuz I'm always curious of what
version of Linux they're using.

69
00:04:32.539 --> 00:04:36.900
You can see I'm in Alpine Linux, which
I actually was not super expecting, but

70
00:04:36.900 --> 00:04:38.930
cool, it doesn't matter, right?

71
00:04:38.930 --> 00:04:43.466
We'll talk about Alpine
here very shortly as well.

72
00:04:43.466 --> 00:04:47.784
&gt;&gt; Brian Holt: And what we're gonna do
is we're gonna run just a normal stock.

73
00:04:47.784 --> 00:04:51.353
We're gonna run another Alpine container
inside of our Alpine container,

74
00:04:51.353 --> 00:04:52.922
which is gonna just be super fun.

75
00:04:52.922 --> 00:04:58.720
run --rm -dit --name my-alpine,

76
00:04:58.720 --> 00:05:03.671
you can call it whatever you want.

77
00:05:03.671 --> 00:05:07.157
I just prefix a lot of stuff with
my- just to kind of show you

78
00:05:07.157 --> 00:05:11.938
that it's a name that I'm adding,
it doesn't mean anything in and of itself.

79
00:05:11.938 --> 00:05:17.282
And we're gonna do alpine, which is
the name of distribution of Linux,

80
00:05:17.282 --> 00:05:21.408
just like Ubuntu or Arch or
RHEL or something like that.

81
00:05:21.408 --> 00:05:26.337
So 3.19.1, and then we're gonna run shell,

82
00:05:26.337 --> 00:05:31.278
which is like Bash, but
it's just a shell, right?

83
00:05:32.508 --> 00:05:36.192
So now, this was an Alpine container,
so I was in macOS, and

84
00:05:36.192 --> 00:05:39.738
then I ran an Alpine container
that had Docker in it.

85
00:05:39.738 --> 00:05:43.475
And now inside of that,
I am running an Alpine container, so

86
00:05:43.475 --> 00:05:48.098
I am running a container within
a container on my macOS system.

87
00:05:48.098 --> 00:05:52.833
So here,
&gt;&gt; Brian Holt: I think I need

88
00:05:52.833 --> 00:05:58.814
to,
&gt;&gt; Brian Holt: dockercontainer.tar

89
00:05:58.814 --> 00:06:02.426
my-alpine, I think I have to
do this from outside of it,

90
00:06:02.426 --> 00:06:06.287
I don't know, has that worked right there,
it did, okay.

91
00:06:06.287 --> 00:06:08.098
So what I did here is,

92
00:06:08.098 --> 00:06:14.143
docker export allows you to just
dump out whatever's in an image.

93
00:06:14.143 --> 00:06:17.535
I did that and I outputted it into
a dockercontainer.tar, which,

94
00:06:17.535 --> 00:06:19.150
a tar is just like a zip, right?

95
00:06:19.150 --> 00:06:24.987
But tar, it's not compressed,
it's just tarred together, okay.

96
00:06:24.987 --> 00:06:28.966
And then I'm gonna make
a directory called container-root.

97
00:06:30.296 --> 00:06:32.570
&gt;&gt; Brian Holt: And then I'm gonna do,

98
00:06:32.570 --> 00:06:38.255
I have to look up the the detarring
thing every single time,

99
00:06:38.255 --> 00:06:43.613
tar xf dockercontainer.tar
-C container-root/.

100
00:06:43.613 --> 00:06:45.653
And now if I look in that container root,

101
00:06:45.653 --> 00:06:49.668
you'll see that I have an entire file
system that I grabbed off of Docker Hub.

102
00:06:49.668 --> 00:06:53.350
This is just a normal Alpine container,
and lo and

103
00:06:53.350 --> 00:06:57.658
behold, this stuff should all
look very familiar to you.

104
00:06:59.918 --> 00:07:04.690
So we're gonna unshare all
of that stuff and say blah.

105
00:07:04.690 --> 00:07:09.119
I probably could have said shell is there
again as well, but ash is the name of

106
00:07:09.119 --> 00:07:13.774
the shell that Alpine uses, which is
like bash, but just slightly different.

107
00:07:13.774 --> 00:07:19.228
And mount this, blah,

108
00:07:19.228 --> 00:07:24.682
mount that, blah, and

109
00:07:24.682 --> 00:07:29.333
mount this, blah.

110
00:07:29.333 --> 00:07:32.811
Now I could go in and I could do all the
cgroups again, I'm gonna spare you all of

111
00:07:32.811 --> 00:07:35.623
those details, don't really need
to think too much about it.

112
00:07:36.623 --> 00:07:38.723
But now, what have I done here?

113
00:07:38.723 --> 00:07:42.526
I pulled a container off of Docker Hub,
an Alpine container,

114
00:07:42.526 --> 00:07:46.455
I then did an unshared environment,
I change rooted into it.

115
00:07:46.455 --> 00:07:50.218
I mounted all of its namespaces, and
I could go do all the cgroup stuff,

116
00:07:50.218 --> 00:07:52.185
just fathom for a moment that we did.

117
00:07:53.225 --> 00:07:57.455
I ran a Docker image without Docker,
right?

118
00:07:57.455 --> 00:08:01.762
I used all that kind of stuff, and if I
was running this all on a Linux computer,

119
00:08:01.762 --> 00:08:04.885
which, obviously,
this is not a Linux computer.

120
00:08:04.885 --> 00:08:08.505
I wouldn't have had to do all the Docker
magic to make all that happen.

121
00:08:08.505 --> 00:08:10.435
We wouldn't need Docker at all, right?

122
00:08:10.435 --> 00:08:15.915
We could just run these images without
using any sort of the Docker tools, right?

123
00:08:15.915 --> 00:08:19.665
Just using unshare,
using change root, and using cgroups.

124
00:08:20.905 --> 00:08:25.482
So this is just kind of to prove
the point to you that you don't need

125
00:08:25.482 --> 00:08:27.073
Docker in that sense.

126
00:08:27.073 --> 00:08:31.929
Docker is just a very convenient tool to
get all these containers running for you.

127
00:08:31.929 --> 00:08:37.705
So again, just to kind of make sure
we're all on the same page here,

128
00:08:37.705 --> 00:08:43.888
that's why, this -dit was detached,
that's why we weren't necessary.

129
00:08:43.888 --> 00:08:48.833
So now we're inside of a handcrafted
container inside of the Docker

130
00:08:48.833 --> 00:08:50.924
container inside of macOS.

131
00:08:50.924 --> 00:08:55.002
We're not actually inside that
other container, it is running, so

132
00:08:55.002 --> 00:08:59.800
if I say docker ps over here, you can see
that I have my-alpine which is running.

133
00:08:59.800 --> 00:09:04.586
The only reason that we had that
running was so that we could dump out

134
00:09:04.586 --> 00:09:09.300
the state of it, so then we could
go ahead and use it, make sense?

135
00:09:11.425 --> 00:09:12.368
&gt;&gt; Brian Holt: Pretty cool, right?

136
00:09:12.368 --> 00:09:14.955
Again, you can do all this stuff yourself,
you don't need Docker,

137
00:09:14.955 --> 00:09:16.211
you don't need domain, right?

138
00:09:16.211 --> 00:09:18.331
But in this particular case,
Docker is extremely helpful, and

139
00:09:18.331 --> 00:09:19.752
you should definitely use it, all right?

140
00:09:19.752 --> 00:09:25.347
We're gonna exit out of that,
exit out of that,

141
00:09:25.347 --> 00:09:30.405
and then we can say docker kill my-alpine.

142
00:09:34.833 --> 00:09:36.708
&gt;&gt; Brian Holt: And
now we have nothing running in Docker.

143
00:09:36.708 --> 00:09:39.553
So, again, Docker does so much more for

144
00:09:39.553 --> 00:09:43.413
you than just pulling images and
running them for you.

145
00:09:43.413 --> 00:09:48.347
Though I'm gonna argue that that core
functionality, no matter how simple it is,

146
00:09:48.347 --> 00:09:50.468
is really what you care most about.

147
00:09:50.468 --> 00:09:55.102
It does networking and
all that other stuff, but

148
00:09:55.102 --> 00:09:59.404
yeah, you really could
get around using it.

