WEBVTT

1
00:00:00.120 --> 00:00:04.727
&gt;&gt; Brian Holt: Let's go ahead and do
a project, it's gonna be heavily based on

2
00:00:04.727 --> 00:00:09.504
what we did before with like the adding
files to a Mongo database and

3
00:00:09.504 --> 00:00:15.370
the volumes project that we did and
very similar to something like that.

4
00:00:15.370 --> 00:00:19.813
It's now we're going to be using Docker
compose to manage the Mongo database and

5
00:00:19.813 --> 00:00:24.059
the networking, and we're also gonna
add a front end using React, Parcel,

6
00:00:24.059 --> 00:00:26.237
and then Nginx ultimately to serve it.

7
00:00:26.237 --> 00:00:30.956
So we'll have three services, an API,
the web front end service, and

8
00:00:30.956 --> 00:00:32.537
the database service.

9
00:00:33.577 --> 00:00:35.307
Now you and I could code this together.

10
00:00:35.307 --> 00:00:38.578
It's not a particularly interesting
project in the sense that I don't think

11
00:00:38.578 --> 00:00:39.693
it's very interesting.

12
00:00:39.693 --> 00:00:43.843
So here in the project files for
Complete Intro to Containers v2,

13
00:00:43.843 --> 00:00:46.746
there's a directory called docker-compose.

14
00:00:46.746 --> 00:00:48.758
We're just gonna copy that
entire project over and

15
00:00:48.758 --> 00:00:51.209
then we'll give a little overview
of what's in the project.

16
00:00:52.239 --> 00:00:57.331
So I'm gonna go to my desktop again and

17
00:00:57.331 --> 00:01:00.355
I'm gonna copy -R and

18
00:01:00.355 --> 00:01:05.062
personal,
&gt;&gt; Brian Holt: And

19
00:01:05.062 --> 00:01:08.065
that is containers-projects.

20
00:01:08.065 --> 00:01:11.615
And we want the docker-compose.

21
00:01:11.615 --> 00:01:15.917
And we'll just call it docker-compose
again because that's easy.

22
00:01:20.399 --> 00:01:26.472
&gt;&gt; Brian Holt: So
I'm gonna go into docker-compose.

23
00:01:26.472 --> 00:01:28.852
So, again,
I just copied this directory right here,

24
00:01:28.852 --> 00:01:31.938
you can actually just do it
directly in the directory there.

25
00:01:31.938 --> 00:01:32.868
That's totally fine.

26
00:01:33.928 --> 00:01:39.506
Okay, and let's go through
a little tour of the code here.

27
00:01:39.506 --> 00:01:40.605
Close that.

28
00:01:43.964 --> 00:01:47.077
&gt;&gt; Brian Holt: We'll talk about the
docker-compose file here in just a second,

29
00:01:47.077 --> 00:01:50.596
but in the interim, I just wanna show
you what's actually in the project.

30
00:01:50.596 --> 00:01:51.632
This index file,

31
00:01:51.632 --> 00:01:56.479
it's a slightly modified version of that
Mongo app that we were looking at before.

32
00:01:56.479 --> 00:02:00.243
One of the things is we did add CORS
because we're gonna be listening on two

33
00:02:00.243 --> 00:02:03.187
different ports and Firefox and
Chrome don't like that.

34
00:02:03.187 --> 00:02:05.207
You get CORS errors when you do that.

35
00:02:06.237 --> 00:02:09.285
But beyond that,
I think this is almost exactly the same.

36
00:02:09.285 --> 00:02:15.957
Okay, same package.json except we
added a CORS handler for Fastify.

37
00:02:17.487 --> 00:02:18.861
So that's the API service.

38
00:02:18.861 --> 00:02:22.401
Nothing interesting there and
then the web service.

39
00:02:22.401 --> 00:02:28.281
You can see this is just a parcel
project built with React and react-dom.

40
00:02:28.281 --> 00:02:34.467
Okay, there's a little Docker file
here that just it's a two stage build.

41
00:02:34.467 --> 00:02:40.005
It builds a node and
then it serves it from nginx.

42
00:02:40.005 --> 00:02:42.149
So, nothing too interesting there.

43
00:02:42.149 --> 00:02:47.766
There's an index file, there's a style
file, and there's a web.jsx file.

44
00:02:47.766 --> 00:02:52.942
And this is just a little React app that
has a button that every time you click

45
00:02:52.942 --> 00:02:58.116
the button, it calls the API, and
then it gets back from the API whatever,

46
00:02:58.116 --> 00:03:00.931
however many items are in the database.

47
00:03:00.931 --> 00:03:05.367
Okay, so
that is all of the code that we're doing.

48
00:03:05.367 --> 00:03:07.421
I even committed the dist directory for
you so

49
00:03:07.421 --> 00:03:10.511
that you don't actually have to go and
build the project yourself.

50
00:03:10.511 --> 00:03:15.443
But if you wanted to,
all you do is npm run build.

51
00:03:15.443 --> 00:03:18.432
That's it, okay.

52
00:03:18.432 --> 00:03:21.363
So let's talk about docker-compose now.

53
00:03:23.043 --> 00:03:26.903
We now have three services in here.

54
00:03:26.903 --> 00:03:30.819
As you might imagine,
a service is like micro-services,

55
00:03:30.819 --> 00:03:33.963
like the thing that Netflix
cursed us all with.

56
00:03:35.053 --> 00:03:37.045
That's what all of this is,

57
00:03:37.045 --> 00:03:41.859
we have API Which is going to be that
API service that we talked to about

58
00:03:41.859 --> 00:03:47.266
the build API that's referring to the this
is coming from the API directory.

59
00:03:47.266 --> 00:03:50.700
So when if I ask docker-compose
to build my project for me,

60
00:03:50.700 --> 00:03:55.386
it knows where to find the Docker file,
which is going to be in the API directory.

61
00:03:56.576 --> 00:04:00.871
I'm telling it to expose port 8080 and
make them available locally for me.

62
00:04:02.391 --> 00:04:08.219
So if I want to call the API directly,
I can and it's saying links db.

63
00:04:08.219 --> 00:04:15.536
This is basically just saying that it
talks to the db service on the network.

64
00:04:15.536 --> 00:04:19.204
So make that available to the API service,
and

65
00:04:19.204 --> 00:04:25.332
then we're giving it the environmental
variable of how to connect to Mongo.

66
00:04:25.332 --> 00:04:28.120
The database service is really just like,
hey,

67
00:04:28.120 --> 00:04:32.159
just run mongo:7 directly off Docker Hub,
no modifications.

68
00:04:32.159 --> 00:04:33.119
That's all that does.

69
00:04:34.309 --> 00:04:41.719
And then the web service,
build from web this is the API_URL.

70
00:04:41.719 --> 00:04:45.920
And the port's nginx by
default exposes port 80 but

71
00:04:45.920 --> 00:04:49.475
we wanna make it available on port 8081.

72
00:04:49.475 --> 00:04:50.564
Yeah, question.

73
00:04:50.564 --> 00:04:52.789
&gt;&gt; Speaker 1: I assume there
is an implied network created for

74
00:04:52.789 --> 00:04:55.479
these containers by
using docker-compose.

75
00:04:55.479 --> 00:04:57.805
&gt;&gt; Brian Holt: Which docker-compose
totally manages for you.

76
00:04:57.805 --> 00:05:00.489
&gt;&gt; Speaker 1: Why is there no
links from the web Web to the API?

77
00:05:02.970 --> 00:05:06.024
&gt;&gt; Brian Holt: Because it's all
done through your browser, right?

78
00:05:06.024 --> 00:05:14.251
So the nginx container is not
speaking to the API, right?

79
00:05:14.251 --> 00:05:18.357
Nginx doesn't call the API,
your browser calls the API.

80
00:05:18.357 --> 00:05:23.014
So we have to expose this
because Because your front end

81
00:05:23.014 --> 00:05:26.773
client is gonna call api 8080, right?

82
00:05:26.773 --> 00:05:30.528
But if they did, right, let's say if
you had some sort of heartbeat or

83
00:05:30.528 --> 00:05:33.595
something like that,
you would have to do that, right?

84
00:05:33.595 --> 00:05:35.851
But there's no network traffic
between the two of them,

85
00:05:35.851 --> 00:05:37.309
I guess that's the sum of the story.

86
00:05:38.779 --> 00:05:42.706
Whereas these two do have network
traffic between each other.

87
00:05:42.706 --> 00:05:46.257
So, let's run it, right?

88
00:05:46.257 --> 00:05:51.671
We're gonna come into our CLI, and

89
00:05:51.671 --> 00:05:58.541
I'm gonna say docker compose up --build.

90
00:05:58.541 --> 00:06:00.143
You do need the --build or

91
00:06:00.143 --> 00:06:04.630
it's just going to assume it's like,
you already built these for me.

92
00:06:06.260 --> 00:06:08.249
So I almost always end up putting
it on there because I usually

93
00:06:08.249 --> 00:06:09.113
want it to build it for me.

94
00:06:13.166 --> 00:06:18.608
&gt;&gt; Brian Holt: So you can see now it
is running multiple containers here,

95
00:06:18.608 --> 00:06:19.949
where is the.

96
00:06:19.949 --> 00:06:21.031
So, there it is.

97
00:06:21.031 --> 00:06:24.117
Okay, so you can see web-1,

98
00:06:24.117 --> 00:06:28.881
this is all the logs coming from Nginx,
right?

99
00:06:30.051 --> 00:06:32.211
Web being the name of the container
that we called it, right?

100
00:06:32.211 --> 00:06:36.193
And -1 being the first replica of there,
because you can actually tell us like,

101
00:06:36.193 --> 00:06:40.509
hey, please run ten of these for
me or run 100 of these for me, right?

102
00:06:40.509 --> 00:06:43.449
We're just going to say run
one of each at the moment.

103
00:06:43.449 --> 00:06:48.669
We have db-1, as you might imagine,
that's the Mongo-1 that's taken care of.

104
00:06:48.669 --> 00:06:53.529
And then somewhere down here we have API,
which I'm sure it'll be somewhere.

105
00:06:53.529 --> 00:06:57.366
Maybe one I'm sure if we
make a request to it.

106
00:06:57.366 --> 00:07:01.179
localhost 8081.

107
00:07:08.061 --> 00:07:11.259
&gt;&gt; Brian Holt: Yeah, right there, API.

108
00:07:11.259 --> 00:07:12.653
I have this attached to Yvonne, so

109
00:07:12.653 --> 00:07:14.682
I've been running this for
a little bit already.

110
00:07:14.682 --> 00:07:16.362
That's why I have 14 counts in here.

111
00:07:16.362 --> 00:07:21.297
But if I click Add,
it should add new things to my database.

112
00:07:21.297 --> 00:07:24.763
So now I have 28 records in my database.

113
00:07:26.725 --> 00:07:28.673
&gt;&gt; Brian Holt: And that's connecting
the API to the back end right.

114
00:07:28.673 --> 00:07:32.534
So if I look at my network traffic here,

115
00:07:32.534 --> 00:07:38.270
it is connecting to localhost:8080 and
you can see,

116
00:07:38.270 --> 00:07:43.312
does this tell you that
it's coming from Fastify.

117
00:07:43.312 --> 00:07:44.352
Nope, it doesn't but

118
00:07:44.352 --> 00:07:47.483
you can see that that access control
header is coming in that we did.

119
00:07:47.483 --> 00:07:48.510
And then if we look at this,

120
00:07:48.510 --> 00:07:51.518
we can definitely tell that this is coming
from Nginx, It should tell you that.

121
00:07:54.792 --> 00:07:57.613
&gt;&gt; Brian Holt: Right there, document.

122
00:07:57.613 --> 00:07:59.719
Yeah, Server from Nginx.

123
00:08:04.447 --> 00:08:07.177
&gt;&gt; Brian Holt: Another kind of
cool thing about this is like,

124
00:08:07.177 --> 00:08:12.571
because I didn't expose Mongo, Mongo's not
technically on the public network, right?

125
00:08:12.571 --> 00:08:15.544
It's enclosed into my Docker network.

126
00:08:15.544 --> 00:08:19.258
So in theory, you could get into the API
service and then use that to call Mongo,

127
00:08:19.258 --> 00:08:22.473
but It's not available on
the public Internet, which is cool.

128
00:08:22.473 --> 00:08:26.954
It's only available on my local Mongo or
sorry,

129
00:08:26.954 --> 00:08:31.663
on my local Docker network,
just for funsies.

130
00:08:31.663 --> 00:08:37.752
I'm going to stop this and
it'll take just a second.

131
00:08:37.752 --> 00:08:42.249
What if we wanted to have more
than one container running, right?

132
00:08:42.249 --> 00:08:46.031
That's one of the advantages of containers
that it's really easy to scale them up and

133
00:08:46.031 --> 00:08:49.019
scale them down because they're cattle,
right?

134
00:08:49.019 --> 00:08:50.909
They're easy to replicate.

135
00:08:50.909 --> 00:08:54.073
I did not write the API service in
such a way that it's easy to scale, so

136
00:08:54.073 --> 00:08:55.789
we're not gonna scale that one.

137
00:08:55.789 --> 00:08:59.790
You could say docker-compose up and

138
00:08:59.790 --> 00:09:04.178
then I can say --scale web=10, and

139
00:09:04.178 --> 00:09:08.447
this will create ten of my web service.

140
00:09:12.771 --> 00:09:16.840
&gt;&gt; Brian Holt: And I probably the same
thing here I'm probably listening on

141
00:09:16.840 --> 00:09:17.891
the same port.

142
00:09:17.891 --> 00:09:21.244
I am listening to the same port.

143
00:09:21.244 --> 00:09:25.974
Yeah, this won't work at the moment
because I've specifically

144
00:09:25.974 --> 00:09:30.367
tied it to one port and
I don't have something in front of it.

145
00:09:30.367 --> 00:09:34.579
So that's actually not gonna work but

146
00:09:34.579 --> 00:09:38.140
you probably could do DB maybe.

147
00:09:38.140 --> 00:09:40.363
Yeah, so look at this.

148
00:09:40.363 --> 00:09:44.849
I now have db-3, I have db-9, right?

149
00:09:44.849 --> 00:09:51.569
And so I actually have of ten my
Mongo running in the background.

150
00:09:51.569 --> 00:09:58.900
So if I say docker ps at the moment, you
can see I have, does it tell me the names?

151
00:09:58.900 --> 00:09:59.867
Where is the names?

152
00:10:04.419 --> 00:10:07.244
&gt;&gt; Brian Holt: It doesn't,
but that's fine.

153
00:10:07.244 --> 00:10:13.035
You can see I have the DB there, but all
these different ones, yeah, right there,

154
00:10:13.035 --> 00:10:19.205
docker compose web, docker compose db-3,
docker compose db-9, db-7.

155
00:10:19.205 --> 00:10:23.416
So Docker compose does have
the ability to scale up and

156
00:10:23.416 --> 00:10:26.327
scale down as well with those flags.

157
00:10:26.327 --> 00:10:34.583
&gt;&gt; Speaker 2: With the scale are those
fully individual Mongo instances?

158
00:10:34.583 --> 00:10:38.428
So it's everything in that
Mongo instance every time.

159
00:10:38.428 --> 00:10:41.914
&gt;&gt; Brian Holt: That's something based on
your configuration you can do things

160
00:10:41.914 --> 00:10:45.560
that are like striping and
sharding and things like that.

161
00:10:45.560 --> 00:10:48.101
I think by default,
I haven't set up anything right.

162
00:10:48.101 --> 00:10:49.357
I didn't give it any configuration.

163
00:10:49.357 --> 00:10:53.821
So my guess is that there are 100%,
one to one redundant.

164
00:10:53.821 --> 00:10:58.500
So you'd have one primary which I
think if I remember how Mongo works at

165
00:10:58.500 --> 00:11:03.497
It's done by election, so they're
gonna elect their own primary node and

166
00:11:03.497 --> 00:11:06.765
then everything else would
be a secondary node.

167
00:11:06.765 --> 00:11:09.449
I don't know,
Mongo has eventual consistency, so

168
00:11:09.449 --> 00:11:12.621
eventually you might be able to
send writes to secondaries and

169
00:11:12.621 --> 00:11:17.198
they'll propagate it to the primary and
then it'll propagate back.

170
00:11:17.198 --> 00:11:19.201
But it's been a while
since I've used Mongo.

171
00:11:19.201 --> 00:11:21.555
I work at a database company,
so I tend to use mine.

172
00:11:21.555 --> 00:11:24.740
[LAUGH] And before that,
I worked at a database company, so

173
00:11:24.740 --> 00:11:25.977
I used to use that one.

174
00:11:25.977 --> 00:11:29.563
But when I was at my first company,

175
00:11:29.563 --> 00:11:35.386
we used a lot of Mongo, and
then Reddit, we used MySQL.

176
00:11:35.386 --> 00:11:38.136
So yeah, it's been a while since
I've used Mongo professionally.

177
00:11:38.136 --> 00:11:44.593
So hopefully you're seeing some
of the value of docker-compose.

178
00:11:44.593 --> 00:11:48.614
In particular, I showed you how to do like
dev containers and all that kind of stuff.

179
00:11:48.614 --> 00:11:51.236
You can put a Docker
compose in there as well.

180
00:11:51.236 --> 00:11:55.236
So let's say your particular development
environment requires a database and

181
00:11:55.236 --> 00:11:56.796
a couple of services running.

182
00:11:56.796 --> 00:11:59.862
Docker compose can handle all of that for
you for

183
00:11:59.862 --> 00:12:02.934
your local development
environments as well.

184
00:12:02.934 --> 00:12:06.385
But when I'm writing stuff that
requires multiple things running,

185
00:12:06.385 --> 00:12:07.879
I always use Docker compose.

186
00:12:07.879 --> 00:12:10.458
It's a very,
very useful feature for Docker.

