WEBVTT

1
00:00:00.500 --> 00:00:04.396
Everything that I've taught
you in this course so

2
00:00:04.396 --> 00:00:09.510
far could be construed as useful as
on a day to day for a developer.

3
00:00:10.920 --> 00:00:17.241
And I'm gonna throw out there that it's
a relatively simple, simple is a hard word to

4
00:00:17.241 --> 00:00:23.386
throw out there, cuz it's still kind
of like networking and hard stuff.

5
00:00:23.386 --> 00:00:26.046
And particularly if this is your first
exposure to it, it should feel hard.

6
00:00:27.286 --> 00:00:32.114
But I'm gonna say that Kubernetes is
the next level up in terms of difficulty,

7
00:00:32.114 --> 00:00:37.089
there's so many moving parts here and it
is built for Google scale kind of stuff,

8
00:00:37.089 --> 00:00:38.426
right?

9
00:00:38.426 --> 00:00:41.932
Whereas everything that we've been
using so far is mostly oriented towards

10
00:00:41.932 --> 00:00:45.504
individual developers, individual
containers and all that kind of stuff.

11
00:00:45.504 --> 00:00:50.318
So, what I'm really trying to say
here is I'm giving permission for

12
00:00:50.318 --> 00:00:54.312
you to feel like this is hard and
kind of unapproachable.

13
00:00:54.312 --> 00:00:58.036
But I wanted to kind of give
you the first step into it, so

14
00:00:58.036 --> 00:01:03.587
you understand this is a container,
this is Docker-composed of small clusters,

15
00:01:03.587 --> 00:01:07.493
and then this is Kubernetes,
and this is large clusters.

16
00:01:07.493 --> 00:01:11.236
Cuz I imagine many of you're probably
using Kubernetes at work, or

17
00:01:11.236 --> 00:01:13.478
your work uses Kubernetes, mine does.

18
00:01:13.478 --> 00:01:18.591
So, let's talk about use cases of
what you would use Kubernetes,

19
00:01:18.591 --> 00:01:23.590
and when you would kinda
wanna start heading that way.

20
00:01:23.590 --> 00:01:27.073
One thing I'll throw out here
really quickly, just in general,

21
00:01:27.073 --> 00:01:29.859
I'm trying to demystify Kubernetes for
all of you so

22
00:01:29.859 --> 00:01:33.620
that it just feels a little bit more
like something you can talk about.

23
00:01:34.790 --> 00:01:37.948
You'll see it all the time
abbreviated as k8s or

24
00:01:37.948 --> 00:01:40.980
k8s as people sometimes say it loud.

25
00:01:40.980 --> 00:01:45.780
That is because some people have a hard
time spelling the Greek word Kubernetes.

26
00:01:45.780 --> 00:01:52.065
It is k, then it is eight letters, and
then s, which is where k8s comes from,

27
00:01:52.065 --> 00:01:57.896
just like accessibility is a11y,
right, it's 11 letters there.

28
00:01:57.896 --> 00:02:03.136
I18n, right, internationalization,
I'm sure there's more.

29
00:02:03.136 --> 00:02:06.686
So, that's why you'll see that
abbreviated as k8s there.

30
00:02:08.256 --> 00:02:13.062
Let's go over a few of the just
the fundamental concepts here,

31
00:02:13.062 --> 00:02:16.156
there is a control plane in Kubernetes.

32
00:02:16.156 --> 00:02:20.348
This is what coordinates this scale up,
this scale down,

33
00:02:20.348 --> 00:02:25.730
this crashed, restart this,
it's the brain of your cluster.

34
00:02:25.730 --> 00:02:29.690
A lot of the cloud providers don't give
away the control plane that they don't

35
00:02:29.690 --> 00:02:31.390
charge you for it.

36
00:02:31.390 --> 00:02:37.020
If I remember correctly, Azure and
Google give it away for free.

37
00:02:38.040 --> 00:02:42.346
And they don't charge you for the compute
that it incurs to run the control plane.

38
00:02:42.346 --> 00:02:47.066
If I remember correctly, elastic
Kubernetes service, which is the AWS-1,

39
00:02:47.066 --> 00:02:48.621
still charges you for it.

40
00:02:50.111 --> 00:02:54.671
You'll sometimes in old, old notes,
it's referred to as the master node.

41
00:02:54.671 --> 00:02:58.200
But they have since
changed the terminology,

42
00:02:58.200 --> 00:03:03.538
we've eliminated master from
the vernacular of the internet there,

43
00:03:03.538 --> 00:03:06.628
so they now call that the control plane.

44
00:03:08.486 --> 00:03:13.212
&gt;&gt; Brian Holt: Nodes, not to be confused
with Node.JS, which I recognize that could

45
00:03:13.212 --> 00:03:18.509
be confusing in particular in a course
like this, are the individual workers.

46
00:03:18.509 --> 00:03:21.072
Whatever that worker ends up being,
whether that's a server,

47
00:03:21.072 --> 00:03:23.073
whether that's a container or
whatever that is.

48
00:03:24.553 --> 00:03:29.430
One node can be one node and technically
can be multiple containers as well.

49
00:03:32.388 --> 00:03:35.161
&gt;&gt; Brian Holt: Frequently you'll
see a one-to-one node to a machine,

50
00:03:35.161 --> 00:03:38.104
especially if you're training LLMs or
something like that,

51
00:03:38.104 --> 00:03:40.383
you'll see that that's
frequently the case.

52
00:03:42.673 --> 00:03:46.411
Yeah, a node is just a deploy target,
that's probably the simplest and

53
00:03:46.411 --> 00:03:48.443
most accurate way to think of a node is.

54
00:03:48.443 --> 00:03:54.811
It's whatever you're deploying to,
which is usually a VM of some variety.

55
00:03:56.386 --> 00:04:00.985
&gt;&gt; Brian Holt: Then you have this concept
of a pod, a pod is a group of nodes.

56
00:04:00.985 --> 00:04:05.649
You kinda wanna think of that
as like a inseparable atom or

57
00:04:05.649 --> 00:04:09.341
molecule like our app
that I just showed you,

58
00:04:09.341 --> 00:04:13.045
you cannot run the API
without the database.

59
00:04:13.045 --> 00:04:17.265
Those two have to be together or
they won't run, right?

60
00:04:17.265 --> 00:04:18.648
So, you'll deploy them as a pod,

61
00:04:18.648 --> 00:04:21.494
it's basically something
that you cannot separate.

62
00:04:21.494 --> 00:04:22.928
I guess in this particular case,

63
00:04:22.928 --> 00:04:25.554
you really could separate them
into separate pods, right?

64
00:04:25.554 --> 00:04:27.777
And then just have them communicate over,
so

65
00:04:27.777 --> 00:04:30.361
maybe a better way of thinking
about it in that case.

66
00:04:30.361 --> 00:04:36.805
I have people seen to do it that way,
but it'd be more like I have an app and

67
00:04:36.805 --> 00:04:43.264
a sidecar that the sidecar cannot
operate without the main app running.

68
00:04:43.264 --> 00:04:45.518
And so, you have to deploy
those two things together or

69
00:04:45.518 --> 00:04:47.434
things just do not work, right?

70
00:04:47.434 --> 00:04:51.461
That would be a pod that you
would deploy together, yeah, and

71
00:04:51.461 --> 00:04:56.341
so scratch what I said about databases,
you actually do wanna deploy those

72
00:04:56.341 --> 00:05:01.155
as separate pods,
because pods will scale together, right?

73
00:05:01.155 --> 00:05:03.375
Whereas like you want
your Mongo service and

74
00:05:03.375 --> 00:05:06.395
your other service to scale independently.

75
00:05:06.395 --> 00:05:11.687
So, service speaking of that is a group
of pods that make up one back-end,

76
00:05:11.687 --> 00:05:14.127
right, or one frontend, right?

77
00:05:14.127 --> 00:05:16.942
If you're thinking about micro services or

78
00:05:16.942 --> 00:05:19.915
micro service maps to
what a service is right?

79
00:05:19.915 --> 00:05:23.995
So, a backend, a frontend,
a data science service,

80
00:05:23.995 --> 00:05:28.495
all those kinds of things
will scale as services.

81
00:05:28.495 --> 00:05:33.207
And then this all ladders up into
a deployment, which is a holistically,

82
00:05:33.207 --> 00:05:37.435
I'm pushing an entire new
set of services out, right?

83
00:05:37.435 --> 00:05:39.853
And then when I'm ready
to deployment again,

84
00:05:39.853 --> 00:05:42.977
I will roll out another whole deployment.

85
00:05:42.977 --> 00:05:45.198
Probably not the best
explanation of this or

86
00:05:45.198 --> 00:05:48.557
maybe I'm trying to keep this
like simple and approachable.

87
00:05:48.557 --> 00:05:52.401
And otherwise, like these
are tools that you can choose to

88
00:05:52.401 --> 00:05:56.967
use to build your service or
your system however you want to, right?

89
00:05:58.437 --> 00:06:03.333
But it's always made up of these things,
nodes into pods, pods into services,

90
00:06:03.333 --> 00:06:05.990
services into deployments.

91
00:06:05.990 --> 00:06:09.537
There's certainly more to these things
than what I've explained to you here, but

92
00:06:09.537 --> 00:06:11.827
that's kind of the basic
gist of what they should be.

93
00:06:13.693 --> 00:06:16.512
&gt;&gt; Brian Holt: All right,
if you are on Windows at the moment,

94
00:06:16.512 --> 00:06:19.919
this is harder to get running on Windows,
so good luck.

95
00:06:19.919 --> 00:06:24.932
I'm gonna show you how to do all this
stuff in on Mac, it works on Linux

96
00:06:24.932 --> 00:06:30.739
obviously, as you might tell, Kubernetes
is strongly geared towards Linux.

97
00:06:30.739 --> 00:06:34.253
We're gonna need one new CLI here,
which is cube control,

98
00:06:34.253 --> 00:06:39.969
I also hear people refer to this as cube
cuddle, which I just think is adorable.

99
00:06:39.969 --> 00:06:46.577
But this is just a client to control
some sort of Kubernetes instance.

100
00:06:49.908 --> 00:06:54.289
&gt;&gt; Brian Holt: So, you can use
kubectl to control your AWS instances.

101
00:06:54.289 --> 00:06:59.406
You can use it to control your Azure ones,
you can use it to control minikube,

102
00:06:59.406 --> 00:07:03.134
which is something that runs
locally on your computer.

103
00:07:03.134 --> 00:07:07.755
We're gonna do it through Kubernetes,
through Docker Desktop,

104
00:07:07.755 --> 00:07:13.704
which has Kubernetes built into it, but
you can see it's just a control client.

105
00:07:13.704 --> 00:07:18.621
In and of itself cube
control doesn't actually have Kubernetes

106
00:07:18.621 --> 00:07:23.850
built into it, it's just is an API to
control some other instance of Kubernetes.

107
00:07:25.675 --> 00:07:29.306
&gt;&gt; Brian Holt: So yeah, I mentioned this,
we're gonna do it through Docker Desktop,

108
00:07:29.306 --> 00:07:32.904
but you can also use minikube
if that's what you desire to do.

109
00:07:32.904 --> 00:07:36.709
And you can have both installed
by the way, you can switch,

110
00:07:36.709 --> 00:07:42.542
using what's called context, so you say
kubectl config use-context minikube.

111
00:07:42.542 --> 00:07:46.603
Docker desktop, and you can switch back
and forth, use Azure, use AWS, blah,

112
00:07:46.603 --> 00:07:47.339
blah, blah.

113
00:07:47.339 --> 00:07:49.873
If you're gonna do minikube,
say minikube start, otherwise,

114
00:07:49.873 --> 00:07:52.972
I'm gonna show you how to set
this up with Docker desktop.

115
00:07:52.972 --> 00:07:56.049
So, open docker-desktop,
which I have opened here,

116
00:07:56.049 --> 00:07:58.212
click on the gear here in the top right.

117
00:07:59.788 --> 00:08:06.218
Click on Kubernetes here, I have all this
taken down inside of my notes as well.

118
00:08:06.218 --> 00:08:08.558
And then just make sure you
have enabled Kubernetes.

119
00:08:09.838 --> 00:08:14.699
Once you've done that, you will have
Kubernetes running on your computer,

120
00:08:14.699 --> 00:08:19.360
you'll probably have to say apply and
restart which might take a second.

121
00:08:19.360 --> 00:08:21.733
Okay, and
then you should see up here,

122
00:08:21.733 --> 00:08:25.722
you can see I have Docker-desktop is
running and Kubernetes is running.

123
00:08:25.722 --> 00:08:29.472
Okay, I have kubectl installed,

124
00:08:29.472 --> 00:08:34.008
so you should be able to say cluster info.

125
00:08:37.347 --> 00:08:41.497
&gt;&gt; Brian Holt: If you don't, do I have
notes here on how to install kubectl?

126
00:08:41.497 --> 00:08:43.763
I think I just got it from Homebrew.

127
00:08:45.989 --> 00:08:47.988
&gt;&gt; Brian Holt: Install MacOS.

128
00:08:49.333 --> 00:08:51.157
&gt;&gt; Brian Holt: Yeah,
I just installed it through Homebrew.

129
00:08:53.447 --> 00:08:56.891
So, I do have that in my notes here
as well, so that will be up here,

130
00:08:56.891 --> 00:08:58.257
I'll see how to install.

131
00:08:58.257 --> 00:09:05.396
It takes you to the docs,
MacOS, and I have Apple silicon.

132
00:09:05.396 --> 00:09:09.770
You can do it either through Curl,
I might have done it that way,

133
00:09:09.770 --> 00:09:14.144
right there, that's how I did it,
Brew, install, kubectl.

