WEBVTT

1
00:00:00.000 --> 00:00:05.007
&gt;&gt; Brian Holt: Let's build a slightly
more complicated Node.js application.

2
00:00:05.007 --> 00:00:09.948
So I'm gonna go back over here to VS Code,
I'm gonna create a new file and

3
00:00:09.948 --> 00:00:11.902
I'm gonna call index.js.

4
00:00:11.902 --> 00:00:16.390
And I don't wanna write all of it,
so I'm just gonna copy and

5
00:00:16.390 --> 00:00:18.334
paste all of my code here.

6
00:00:21.325 --> 00:00:23.977
&gt;&gt; Brian Holt: Again, not a Node course.

7
00:00:25.908 --> 00:00:30.695
&gt;&gt; Brian Holt: This is essentially the
most basic Node app you can ever build,

8
00:00:30.695 --> 00:00:32.874
there's no dependencies.

9
00:00:32.874 --> 00:00:35.194
There's not even anything
to npm install here, right?

10
00:00:38.977 --> 00:00:41.342
&gt;&gt; Brian Holt: So, now I have a index.js.

11
00:00:41.342 --> 00:00:46.515
How do I get this into my container,
right?

12
00:00:46.515 --> 00:00:48.123
Cuz right now if I just build this again,

13
00:00:48.123 --> 00:00:50.545
there's nothing in there
that's referencing it, right?

14
00:00:52.719 --> 00:00:56.299
&gt;&gt; Brian Holt: So,
I have to put a copy statement in here,

15
00:00:56.299 --> 00:01:02.271
I have to say copy index.js,
I have to tell it where it's coming from.

16
00:01:02.271 --> 00:01:06.832
So, in this particular case, it's coming
from this particular directory I'm in and

17
00:01:06.832 --> 00:01:08.587
I'm telling you where to put it.

18
00:01:08.587 --> 00:01:10.885
Now I could say dot, right?

19
00:01:10.885 --> 00:01:14.010
Which would just say put it here,
or I can just say index js.

20
00:01:14.010 --> 00:01:20.325
And then here I'm just gonna put index.js,
okay?

21
00:01:20.325 --> 00:01:21.143
That's builder.

22
00:01:24.374 --> 00:01:30.913
&gt;&gt; Brian Holt: So, docker build, we'll just
call this version 3, cuz why not?

23
00:01:30.913 --> 00:01:35.586
And you can see it's doing
a bit more up here now, right?

24
00:01:35.586 --> 00:01:37.186
It copied some files, look at that.

25
00:01:40.727 --> 00:01:44.556
&gt;&gt; Brian Holt: So,
now I'm gonna say docker run my

26
00:01:44.556 --> 00:01:48.208
node app three
&gt;&gt; Brian Holt: And

27
00:01:48.208 --> 00:01:50.872
now it's running a server.

28
00:01:53.085 --> 00:01:57.975
&gt;&gt; Brian Holt: Now, notice if I go
back to my index.js here, I say,

29
00:01:57.975 --> 00:02:03.414
listen on port 3000,
one would reasonably expect that I could

30
00:02:03.414 --> 00:02:09.529
go to local host 3000 and
that it would work, but it doesn't.

31
00:02:09.529 --> 00:02:11.452
Why?

32
00:02:11.452 --> 00:02:17.020
Well, I have a container that's running,
that's listening on port 3000,

33
00:02:17.020 --> 00:02:21.315
but by default, containers don't
expose any of their ports.

34
00:02:21.315 --> 00:02:22.448
It's generally a good thing, right?

35
00:02:22.448 --> 00:02:25.673
It's a security vulnerability otherwise.

36
00:02:25.673 --> 00:02:33.104
So, how do we get it to expose that
port 3000 to the outside consumer?

37
00:02:33.104 --> 00:02:35.676
We have to publish it.

38
00:02:35.676 --> 00:02:41.433
So I'm gonna stop my server here, I guess
this is another annoyance of Docker.

39
00:02:41.433 --> 00:02:46.278
So, he knows why he's did a control C and
it's not doing anything,

40
00:02:46.278 --> 00:02:49.771
it's because I didn't
tell it how to shut down.

41
00:02:49.771 --> 00:02:54.852
So I actually have to go say docker kill,
I don't even remember what I called it,

42
00:02:54.852 --> 00:03:00.406
docker ps, docker kill zen_borg, yours is
probably gonna be something else, right?

43
00:03:05.309 --> 00:03:11.031
&gt;&gt; Brian Holt: Yeah, so,
&gt;&gt; Brian Holt: That killed it,

44
00:03:11.031 --> 00:03:15.058
and I'm now gonna say docker run.

45
00:03:15.058 --> 00:03:20.385
In order to get around that issue of not
being able to Ctrl + C to get out of it,

46
00:03:20.385 --> 00:03:25.046
you can do --init, and that will
allow you to control C out of it,

47
00:03:25.046 --> 00:03:27.322
that's very helpful for this.

48
00:03:27.322 --> 00:03:30.152
Normally what you should do if you're
like doing this with like, Node.js or

49
00:03:30.152 --> 00:03:30.988
something like that.

50
00:03:30.988 --> 00:03:35.911
You should just handle that SIGTERM
interrupt directly in your code, or

51
00:03:35.911 --> 00:03:40.526
use some package that does it for
you. --init is Docker

52
00:03:40.526 --> 00:03:44.928
basically saying I give up, I don't
wanna handle this stuff handle it for

53
00:03:44.928 --> 00:03:46.987
me, but it is a blunt instrument,

54
00:03:46.987 --> 00:03:51.829
so, it's literally just gonna just cut
the entire process off and chuck it out.

55
00:03:51.829 --> 00:03:56.704
Normally, processes like to be like,
wound down, let them finish whatever

56
00:03:56.704 --> 00:04:01.587
they're doing, let them sink out their
logs and then shut down gracefully.

57
00:04:01.587 --> 00:04:07.515
Just good to know, but I use --init at
all time cuz normally I don't care.

58
00:04:07.515 --> 00:04:12.062
All right --publish,
&gt;&gt; Brian Holt: Or

59
00:04:12.062 --> 00:04:17.584
if you are lazy like I am,
you can just do -p.

60
00:04:17.584 --> 00:04:21.587
And then you have 3000:3000.

61
00:04:21.587 --> 00:04:26.526
One those is the source port, and
one of them is the destination port.

62
00:04:26.526 --> 00:04:30.916
So, you can't just do publish
3000 you have to do 3000:3000 but

63
00:04:30.916 --> 00:04:35.835
let's say you had it running on port 80,
and you wanted to export it on port 8080,

64
00:04:35.835 --> 00:04:37.252
or something like that.

65
00:04:37.252 --> 00:04:39.774
You could do some fun mapping that way.

66
00:04:39.774 --> 00:04:44.313
The first one represents the host machine,
the second one represents what port is

67
00:04:44.313 --> 00:04:48.672
being used as the container, which is
always the opposite of what I expected.

68
00:04:48.672 --> 00:04:52.415
So I have to remember that
whatever I think is wrong.

69
00:04:52.415 --> 00:04:56.844
In any case,
they're the same doesn't matter.

70
00:04:56.844 --> 00:05:01.518
And I would do it for my node app.

71
00:05:01.518 --> 00:05:08.985
Let's give it a name as well so
I don't have to remember it.

72
00:05:12.774 --> 00:05:17.954
&gt;&gt; Brian Holt: And
I need a :3 cuz I give it a name tag.

73
00:05:17.954 --> 00:05:21.632
Okay, server started it's running.

74
00:05:21.632 --> 00:05:23.274
And now if I go into here and

75
00:05:23.274 --> 00:05:28.146
I refresh the page, you can see it is
actually exposing our node app outside.

76
00:05:32.415 --> 00:05:33.318
&gt;&gt; Brian Holt: Pretty cool, so

77
00:05:33.318 --> 00:05:36.417
we just containerized our
first node.js application.

78
00:05:38.070 --> 00:05:43.397
&gt;&gt; Brian Holt: And as you can see here,
not that hard, right?

79
00:05:43.397 --> 00:05:46.619
Just a couple of commands,
and we were done.

80
00:05:46.619 --> 00:05:48.800
Think these are called instructions.

81
00:05:48.800 --> 00:05:51.036
Every line is called an instruction,
I think.

82
00:05:51.036 --> 00:05:53.347
&gt;&gt; Speaker 1: Is there any
then in your Docker file,

83
00:05:53.347 --> 00:05:57.116
to just actually expose those ports,
or is that deprecated?

84
00:05:57.116 --> 00:05:58.067
&gt;&gt; Brian Holt: So it's a good question,

85
00:05:58.067 --> 00:05:59.849
I think I actually have
a little section on them.

86
00:05:59.849 --> 00:06:07.913
But the answer to your question is
there is an instruction called EXPOSE,

87
00:06:11.527 --> 00:06:14.060
&gt;&gt; Brian Holt: And why don't we use it?

88
00:06:14.060 --> 00:06:19.432
Well, one, it's just a suggestion and
it's not enforced.

89
00:06:19.432 --> 00:06:25.207
So, if I just run this as is exactly
the same way it still won't work.

90
00:06:25.207 --> 00:06:27.762
There is something that you can run this,

91
00:06:27.762 --> 00:06:32.441
I forgot the name of the flag that
basically says, respect all the exposes.

92
00:06:32.441 --> 00:06:37.177
Then what it's gonna do is, it's going
to expose port 3000 on port 32,500 or

93
00:06:37.177 --> 00:06:38.396
something like that.

94
00:06:38.396 --> 00:06:44.335
And it randomly assigns the port,
so it's not very convenient.

95
00:06:44.335 --> 00:06:46.306
In other words, no one uses it,

96
00:06:46.306 --> 00:06:50.253
everyone just has published using
the command line arguments.

97
00:06:50.253 --> 00:06:55.925
So now that I've done --init, you can see
here I got some requests received in here.

98
00:06:55.925 --> 00:07:02.045
If I hit Ctrl+C, it actually will shut
down the server which is nice as well.

