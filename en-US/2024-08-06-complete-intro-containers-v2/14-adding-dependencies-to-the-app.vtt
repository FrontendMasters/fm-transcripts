WEBVTT

1
00:00:00.032 --> 00:00:05.348
&gt;&gt; Brian Holt: So far, we have just
been one file, no npm dependencies,

2
00:00:05.348 --> 00:00:09.700
which is a pipe dream
when it comes to Node.js.

3
00:00:09.700 --> 00:00:14.357
You have to bring all of npm with you all
the time or it's not a real Node app, or

4
00:00:14.357 --> 00:00:15.012
so I hear.

5
00:00:15.012 --> 00:00:20.180
So let's go ahead and
add some dependencies.

6
00:00:20.180 --> 00:00:23.334
Let's add a Fastify server, and

7
00:00:23.334 --> 00:00:28.642
I'm just gonna grab it directly
out of my project here.

8
00:00:28.642 --> 00:00:32.944
So we are in more complicated Node app.

9
00:00:32.944 --> 00:00:38.882
And go ahead and
grab the code here and replace this.

10
00:00:42.101 --> 00:00:47.580
&gt;&gt; Brian Holt: So fastify.js,
it's another Node.js Rest server.

11
00:00:47.580 --> 00:00:49.148
You could put express here,

12
00:00:49.148 --> 00:00:52.228
I think the previous version
of this course used happy.

13
00:00:52.228 --> 00:00:53.553
Any one of them work just fine.

14
00:00:55.777 --> 00:01:01.038
&gt;&gt; Brian Holt: Okay,
just on my host machine here,

15
00:01:01.038 --> 00:01:05.120
I'm gonna say npm init -y.

16
00:01:05.120 --> 00:01:08.874
That, if you're not familiar,
just creates a package.json.

17
00:01:08.874 --> 00:01:10.874
Right, that's all that did.

18
00:01:10.874 --> 00:01:16.911
Then I'm gonna say npm install fastify.

19
00:01:16.911 --> 00:01:19.672
Okay, so now I have a package-lock.

20
00:01:19.672 --> 00:01:21.602
I have node_modules,

21
00:01:21.602 --> 00:01:27.108
I have a package.json that has
fastify as one of its dependencies.

22
00:01:31.499 --> 00:01:35.732
&gt;&gt; Brian Holt: Okay, I mean,
I could run this locally, node index.js.

23
00:01:35.732 --> 00:01:37.892
You can see there,
all that stuff would work locally.

24
00:01:41.710 --> 00:01:44.614
&gt;&gt; Brian Holt: Okay,
&gt;&gt; Brian Holt: So

25
00:01:44.614 --> 00:01:49.135
now I have a bit of a problem
that my Dockerfile, one,

26
00:01:49.135 --> 00:01:54.781
it's only copying index.js,
it's not copying anything else.

27
00:01:54.781 --> 00:01:59.466
And it's also not running npm install for
me, which is also a problem.

28
00:01:59.466 --> 00:02:03.269
So let's do all of that.

29
00:02:03.269 --> 00:02:06.707
This is fine, this is fine.

30
00:02:06.707 --> 00:02:11.915
Okay, but now, we wanna get more than just
index.js, we wanna get all of it, right?

31
00:02:11.915 --> 00:02:13.905
We wanna get package file.

32
00:02:13.905 --> 00:02:17.160
If we have more than one file in there,
we don't wanna just grab index,

33
00:02:17.160 --> 00:02:18.747
we wanna grab the entire project.

34
00:02:18.747 --> 00:02:20.803
So I'm just gonna say dot dot, right?

35
00:02:20.803 --> 00:02:24.424
That's gonna grab everything.

36
00:02:24.424 --> 00:02:27.640
And then I'm gonna say run.

37
00:02:27.640 --> 00:02:32.919
You can do npm install, that's
apparently what Copilot wants me to do.

38
00:02:32.919 --> 00:02:35.331
I'm gonna say do ci.

39
00:02:35.331 --> 00:02:37.784
That's a specific tool from npm for

40
00:02:37.784 --> 00:02:41.226
running npm installs in
environments like this.

41
00:02:41.226 --> 00:02:45.263
In CI/CD, or in Docker Build,
and stuff that,

42
00:02:45.263 --> 00:02:51.045
it's basically say, just run a pure,
clean package-lock install.

43
00:02:51.045 --> 00:02:55.559
Okay, so let's go and run that.

44
00:02:55.559 --> 00:03:03.446
We're gonna say docker build
-t more-complicated-app ..

45
00:03:06.900 --> 00:03:07.938
&gt;&gt; Brian Holt: And you can see there,

46
00:03:07.938 --> 00:03:10.788
it took a little bit longer,
this took 0.8 seconds to run.

47
00:03:10.788 --> 00:03:12.981
That's the longest yet, right?

48
00:03:12.981 --> 00:03:17.435
Because it actually did go out to npm and
fully install everything.

49
00:03:17.435 --> 00:03:20.013
So we ran docker build,
took a little bit longer.

50
00:03:20.013 --> 00:03:26.709
We're gonna say docker run -it -p.

51
00:03:26.709 --> 00:03:28.019
Do I have this running on 8080?

52
00:03:28.019 --> 00:03:29.854
What do I have this running on?

53
00:03:29.854 --> 00:03:32.235
I have this running on 8080,
so I changed the port on you.

54
00:03:32.235 --> 00:03:36.875
So good to know, 8080:8080.

55
00:03:38.654 --> 00:03:44.365
&gt;&gt; Brian Holt: name my-app,
whatever you wanna call it, --rm --init.

56
00:03:44.365 --> 00:03:48.588
You can see we're getting more and
more flags as we're going along here.

57
00:03:48.588 --> 00:03:52.628
And we're gonna run more-complicated-app.

58
00:03:52.628 --> 00:03:55.862
So you can see here,
it's dumping a bunch of logging out here.

59
00:03:55.862 --> 00:03:59.943
You can see in our app here,
we turned on logging.

60
00:03:59.943 --> 00:04:03.641
Yeah, logger: true, so that's where
all that logging is coming from.

61
00:04:03.641 --> 00:04:06.500
And if I open localhost
8080 on my computer.

62
00:04:06.500 --> 00:04:12.123
So if you are running into this issue,
where you're saying the connection

63
00:04:12.123 --> 00:04:17.310
was reset, here is the issue,
you have to go back into your project.

64
00:04:17.310 --> 00:04:22.627
It's trying to bind to localhost,
which localhost is, it's a loop back

65
00:04:22.627 --> 00:04:27.962
just directly for your computer and
will not expose itself outside of it.

66
00:04:27.962 --> 00:04:33.936
So you have to say host and
then just say 0.0.0.0,

67
00:04:33.936 --> 00:04:39.045
which allows it to be
exposed outside of itself.

68
00:04:39.045 --> 00:04:42.319
And then we have to stop the server,

69
00:04:42.319 --> 00:04:47.352
we have to rebuild it, and
then we have to run it again.

70
00:04:47.352 --> 00:04:51.860
One of the annoying parts about Docker
is that anytime that you save anything,

71
00:04:51.860 --> 00:04:53.236
you have to rebuild it.

72
00:04:53.236 --> 00:04:56.272
And now, it works.

73
00:04:56.272 --> 00:05:01.620
Okay, so we built a bigger project,

74
00:05:01.620 --> 00:05:05.420
it has npm dependencies.

75
00:05:05.420 --> 00:05:09.510
We ran ci, everything's all good here.

76
00:05:09.510 --> 00:05:14.787
Let's talk about some issues
of why this isn't great yet.

77
00:05:14.787 --> 00:05:20.331
One, a really big issue with our
Dockerfile at the moment is,

78
00:05:20.331 --> 00:05:21.724
this is macOS.

79
00:05:21.724 --> 00:05:27.251
If I run npm install on my macOS, and then
I copy those files into Linux, if I have

80
00:05:27.251 --> 00:05:32.959
any native dependencies, SASS is a good
example, right, of a native dependenc.

81
00:05:32.959 --> 00:05:37.031
Or anything that comes with C or Ruby or
Rust code with it, Turbo Repo or

82
00:05:37.031 --> 00:05:40.709
something like that,
those are gonna be mismatched, right?

83
00:05:40.709 --> 00:05:45.089
Cuz right now,
I'm installing Mac-based binaries, and

84
00:05:45.089 --> 00:05:47.810
those need Linux-based binaries.

85
00:05:47.810 --> 00:05:53.462
So I do not wanna copy my node modules,
right, even if I'm running ci.

86
00:05:53.462 --> 00:05:57.774
So the nice thing about ci is it throws
everything out and reinstalls it.

87
00:05:57.774 --> 00:06:00.882
So we kinda stepped around that, but
even still, we still don't wanna do that.

88
00:06:00.882 --> 00:06:03.143
So let's fix that first.

89
00:06:03.143 --> 00:06:04.811
Let's make a new file here.

90
00:06:08.121 --> 00:06:12.527
&gt;&gt; Brian Holt: And
we're gonna call it .dockerignore.

91
00:06:15.856 --> 00:06:18.420
&gt;&gt; Brian Holt: This has the exact
same format as gitignore, so

92
00:06:18.420 --> 00:06:20.417
it's probably all familiar to you.

93
00:06:20.417 --> 00:06:22.295
We just wanna put node modules in here.

94
00:06:24.407 --> 00:06:27.742
&gt;&gt; Brian Holt: Okay, cool, that's great.

95
00:06:27.742 --> 00:06:30.185
Now, that's been ignored.

96
00:06:30.185 --> 00:06:33.381
Another one that's gonna always almost
immediately go in here is you don't ever

97
00:06:33.381 --> 00:06:34.650
wanna copy your git directory.

98
00:06:34.650 --> 00:06:37.428
Again, if someone can
get into your project,

99
00:06:37.428 --> 00:06:40.502
they can get into your git files,
and that's bad.

100
00:06:40.502 --> 00:06:44.103
So never copy your git files as well.

101
00:06:44.103 --> 00:06:46.747
Most of the things that
you're going to gitignore,

102
00:06:46.747 --> 00:06:49.583
you probably also want
to dockerignore as well.

103
00:06:49.583 --> 00:06:51.153
That's kind of a rule of thumb.

104
00:06:51.153 --> 00:06:53.619
Not always true, but sometimes.

105
00:06:53.619 --> 00:06:58.274
Yeah, and npm ci,
the most important part about it is that

106
00:06:58.274 --> 00:07:02.270
it will always follow
the package-lock.json.

107
00:07:02.270 --> 00:07:06.176
And if it has any issues like verifying
checksums or anything like that,

108
00:07:06.176 --> 00:07:07.143
it just gives up.

109
00:07:07.143 --> 00:07:09.797
It's like, nope, this is broken,
I don't know how to fix it.

110
00:07:09.797 --> 00:07:10.926
And it causes an error,

111
00:07:10.926 --> 00:07:14.437
which is good because that means
something in your supply chain changed.

112
00:07:14.437 --> 00:07:15.912
And you wanna go fix it, or

113
00:07:15.912 --> 00:07:19.416
at least investigate it before
you ship it out to production.

114
00:07:19.416 --> 00:07:23.697
If you do npm install and
the package-lock is wrong,

115
00:07:23.697 --> 00:07:29.898
npm install just ignores it, which is
what you want locally, cuz who cares?

116
00:07:29.898 --> 00:07:33.421
But we're going out to production,
you very much care, right?

117
00:07:33.421 --> 00:07:37.562
So this is better, now we're doing npm ci.

118
00:07:37.562 --> 00:07:39.686
That's all working.

119
00:07:39.686 --> 00:07:44.877
That's great, and we'll go ahead and
just kind of prove our point there.

120
00:07:44.877 --> 00:07:50.399
Stop this, we're gonna build it again.

121
00:07:50.399 --> 00:07:55.202
And we're gonna show you
that this still works.

122
00:07:55.202 --> 00:07:58.903
Okay, so we touched on this briefly for
a second,

123
00:07:58.903 --> 00:08:03.058
which is the notes on expose,
which is a good question.

124
00:08:03.058 --> 00:08:04.754
You know what?
Let's just run it.

125
00:08:04.754 --> 00:08:05.387
Why not?

126
00:08:05.387 --> 00:08:08.429
We're gonna go in here, we're gonna put,

127
00:08:08.429 --> 00:08:12.469
we know this runs on 8080,
EXPOSE 8080, right?

128
00:08:12.469 --> 00:08:14.922
This could go anywhere.

129
00:08:14.922 --> 00:08:16.553
Let's run it there.

130
00:08:16.553 --> 00:08:20.615
I'm gonna rebuild this, and

131
00:08:20.615 --> 00:08:26.796
I'm not gonna put this -p 8080 in here.

132
00:08:26.796 --> 00:08:30.149
And I think you do it with just -P.

133
00:08:32.636 --> 00:08:37.630
&gt;&gt; Brian Holt: And then so
that now will respect that expose in terms

134
00:08:37.630 --> 00:08:40.932
of the port that's exposed here.

135
00:08:40.932 --> 00:08:42.779
Which port do you think it's on?

136
00:08:44.716 --> 00:08:46.053
&gt;&gt; Brian Holt: It doesn't tell you, right?

137
00:08:46.053 --> 00:08:50.213
So let's go look, docker ps,

138
00:08:50.213 --> 00:08:54.539
this is now on port 55000.

139
00:08:54.539 --> 00:08:58.121
So now if I come in here and
say 55000, hello, world.

140
00:09:01.679 --> 00:09:04.482
&gt;&gt; Brian Holt: So
it's up to you if you like that.

141
00:09:04.482 --> 00:09:09.177
Most people that I know don't do it this
way, which is why I'm teaching you the way

142
00:09:09.177 --> 00:09:11.846
of just doing the publish
directly in the CLI.

143
00:09:11.846 --> 00:09:15.334
But this does exist if you wanna try it.

144
00:09:15.334 --> 00:09:16.626
&gt;&gt; Speaker 2: Also, in most cases,

145
00:09:16.626 --> 00:09:20.853
won't something else be in charge of
what port is getting sent down to it?

146
00:09:20.853 --> 00:09:24.151
&gt;&gt; Brian Holt: Yeah, for example,
if you're on AWS or something like that,

147
00:09:24.151 --> 00:09:27.637
they'll usually pass you the port
that you have to list, or else,

148
00:09:27.637 --> 00:09:28.964
it won't work, right?

149
00:09:28.964 --> 00:09:33.139
So in that case, you definitely
don't want Docker to handle it.

150
00:09:33.139 --> 00:09:34.574
That's actually a great point.

