WEBVTT

1
00:00:02.785 --> 00:00:04.450
&gt;&gt; Scott Moss: So
controllers and responding.

2
00:00:05.500 --> 00:00:08.190
And so far we really haven't
talked about controllers.

3
00:00:08.190 --> 00:00:10.430
The only responding we
looked at was rest.json.

4
00:00:10.430 --> 00:00:13.270
I didn't tell you anything more,
intentionally.

5
00:00:13.270 --> 00:00:17.269
So basically, controllers,
they have access to the incoming requests.

6
00:00:18.400 --> 00:00:20.210
Without that they would
be kind of pointless.

7
00:00:20.210 --> 00:00:22.810
[LAUGH] So
every time there's a request made,

8
00:00:22.810 --> 00:00:26.440
that function that we passed into
that path, that eventually, you know.

9
00:00:26.440 --> 00:00:28.500
We have like those sub routers and
those sub routers, and

10
00:00:28.500 --> 00:00:29.820
eventually have the function.

11
00:00:29.820 --> 00:00:32.250
That function right
there is the controller,

12
00:00:32.250 --> 00:00:35.950
it has like I said access to
the request we can see right here.

13
00:00:35.950 --> 00:00:40.700
It's got the request It's got the response
object that express gives us and

14
00:00:40.700 --> 00:00:42.890
then it has this next thing.

15
00:00:42.890 --> 00:00:45.635
And that's optional,
we'll talk about the next thing.

16
00:00:45.635 --> 00:00:49.925
We are gonna be reusing controllers
because we're doing reqs right now and,

17
00:00:49.925 --> 00:00:54.880
like I said, it's the exact same thing for
every single resource that we have.

18
00:00:54.880 --> 00:00:58.010
You can tell by looking at
the last exercise you just did.

19
00:00:58.010 --> 00:00:59.265
All this is the same
on every single route.

20
00:00:59.265 --> 00:01:02.310
So therefore, the controls
are probably gonna be the same too.

21
00:01:02.310 --> 00:01:04.110
So why recreate them?

22
00:01:04.110 --> 00:01:06.940
We're just gonna have one file that
takes in the resource and does it.

23
00:01:08.990 --> 00:01:11.267
The controllers should be async.

24
00:01:14.576 --> 00:01:16.050
&gt;&gt; Scott Moss: I guess it
could be synchronous, but

25
00:01:16.050 --> 00:01:17.790
you should keep them asynchronous.

26
00:01:17.790 --> 00:01:21.250
So the difference, okay,
let me explain it like this.

27
00:01:21.250 --> 00:01:24.650
The whole thing about note is,
it's an asynchronous architecture.

28
00:01:24.650 --> 00:01:28.690
It's event driven, it's a really good for
concurrency and stuff like that.

29
00:01:28.690 --> 00:01:34.890
But if you use a lot of like, taxing
synchronous code, you're going to block.

30
00:01:34.890 --> 00:01:36.000
You're gonna block note, right.

31
00:01:36.000 --> 00:01:39.230
So for instance, if somebody comes
in with a request, and all a sudden,

32
00:01:39.230 --> 00:01:43.590
you do a I don't know,
a wild loop or something like that.

33
00:01:43.590 --> 00:01:45.460
You're gonna block the whole process,
right?

34
00:01:45.460 --> 00:01:48.330
Nothing's gonna work, so
you kinda wanna keep things a-synch and

35
00:01:48.330 --> 00:01:50.140
that's down to like logging.

36
00:01:50.140 --> 00:01:52.310
You don't even want to log
synchronous because you might think,

37
00:01:52.310 --> 00:01:53.800
it's just a console.log.

38
00:01:53.800 --> 00:01:56.675
Okay, well let's say you've got
a console.log inside of a request with

39
00:01:56.675 --> 00:02:00.450
10,000 I don't know 5000 requests
per second or something like that.

40
00:02:00.450 --> 00:02:02.299
That cause a log is gonna be blocking,
every time.

41
00:02:02.299 --> 00:02:06.170
And eventually is gonna build up and
you probably will have like a crash.

42
00:02:06.170 --> 00:02:07.690
So, I've actually,
that's actually happened before.

43
00:02:07.690 --> 00:02:10.690
I worked with some clients and they cannot
figure out why they couldn't get pass

44
00:02:10.690 --> 00:02:15.530
a certain threshold on their load testing
and it turns out that they had logs, logs.

45
00:02:15.530 --> 00:02:19.840
So instead of writing to the console we,
wrote to a file instead.

46
00:02:19.840 --> 00:02:21.610
All right, and
that sped it up dramatically.

47
00:02:21.610 --> 00:02:26.090
So you kinda wanna keep things async,
try to stay away from synchronous code.

48
00:02:26.090 --> 00:02:27.850
But you can totally put
synchronous code in there.

49
00:02:27.850 --> 00:02:30.320
It's not a big deal, especially if
you're not doing anything async.

50
00:02:30.320 --> 00:02:33.584
Don't make it async if you're not doing
anything async, you know what I mean?

51
00:02:33.584 --> 00:02:36.528
But don't do anything
long-pulling like while loops and

52
00:02:36.528 --> 00:02:38.331
writing to files synchronously and

53
00:02:38.331 --> 00:02:41.650
reading files synchronously If
you can do it async, do it async.

54
00:02:42.900 --> 00:02:44.900
Controls are composable,
because at the end of the day,

55
00:02:44.900 --> 00:02:46.460
they're really just middleware.

56
00:02:46.460 --> 00:02:50.304
And again, we'll get to middleware, but
you can reuse these things because they

57
00:02:50.304 --> 00:02:53.479
take in the same requirements,
they take in the same response, and

58
00:02:53.479 --> 00:02:56.619
they also have the ability to pass
control over to something else.

59
00:02:56.619 --> 00:02:59.010
And they can pretty much
respond with anything, right?

60
00:02:59.010 --> 00:03:03.210
We've been responding with JSON But
we can respond with a file,

61
00:03:03.210 --> 00:03:09.750
we can respond with an asset,
we can respond with stream, buffer,

62
00:03:09.750 --> 00:03:14.590
we can pretty much respond with Express.

63
00:03:15.890 --> 00:03:20.160
&gt;&gt; Speaker 2: And
that's through the controller yeah.

64
00:03:20.160 --> 00:03:22.446
&gt;&gt; Scott Moss: Actually
responds is a controller, but

65
00:03:22.446 --> 00:03:24.674
technically nowhere can respond too.

66
00:03:24.674 --> 00:03:28.200
Like for instance, you're gonna see,
it's already in there actually.

67
00:03:28.200 --> 00:03:31.400
But we have middleware that
does authentication, and

68
00:03:31.400 --> 00:03:33.220
if it determines you're not authenticated,

69
00:03:33.220 --> 00:03:36.670
it will respond, versus sending it to
the controller and letting it respond.

70
00:03:36.670 --> 00:03:37.770
It will stop it right there.

71
00:03:37.770 --> 00:03:38.710
Like no, you're not authenticated.

72
00:03:38.710 --> 00:03:40.750
I'm not letting you go any further.

73
00:03:40.750 --> 00:03:45.740
So let's just hop into some
exercises right quick then.

74
00:03:45.740 --> 00:03:51.080
So if we go look inside that query JS,
the first thing is this

75
00:03:51.080 --> 00:03:55.830
you'll notice this controllers method,
and it's literally just doing nothing.

76
00:03:55.830 --> 00:03:57.220
It's just returning this test data.

77
00:03:57.220 --> 00:04:01.060
That's fine, this is for another
example when we talk about databases.

78
00:04:01.060 --> 00:04:01.560
Forget about that,

79
00:04:01.560 --> 00:04:04.040
what you're gonna be working on is
down here in these methods down here,

80
00:04:04.040 --> 00:04:08.230
where it says, createOne, updateOne,
deleteOne, getOne, getAll, findByParam.

81
00:04:10.030 --> 00:04:13.450
We're not so concerned with
the database query right now.

82
00:04:13.450 --> 00:04:15.520
We're really just
concerned with responding.

83
00:04:16.810 --> 00:04:18.830
We're really concerned with use.

84
00:04:18.830 --> 00:04:20.900
So what we're gonna do
is we're gonna assume

85
00:04:22.280 --> 00:04:26.170
That these controllers
up here are functional.

86
00:04:26.170 --> 00:04:28.600
Right now they are not,
they're just returning a promise, right?

87
00:04:28.600 --> 00:04:31.350
But let's assume that they're going to the
database, they are doing something, right?

88
00:04:31.350 --> 00:04:35.420
So with that assumption, you want to
consume these controller methods above

89
00:04:35.420 --> 00:04:40.280
inside these actual controllers
given the model and the request.

90
00:04:40.280 --> 00:04:43.290
So if you scroll down I'm doing
a little bit of meta programming here.

91
00:04:43.290 --> 00:04:44.350
Little bit of meta programming.

92
00:04:44.350 --> 00:04:46.440
Little bit of generation going on here.

93
00:04:46.440 --> 00:04:49.898
You can see that,
I'm passing in the model.

94
00:04:49.898 --> 00:04:52.740
And so in this case this model
might be the song model.

95
00:04:52.740 --> 00:04:54.350
It might be the playlist model.

96
00:04:54.350 --> 00:04:56.030
It might be user model for

97
00:04:56.030 --> 00:04:59.029
each one of those models I'm
creating these controllers.

98
00:05:00.170 --> 00:05:02.370
Which are the results of these functions.

99
00:05:02.370 --> 00:05:04.999
These functions taken any model,

100
00:05:04.999 --> 00:05:09.089
they return the functions
as it's crazy sometimes.

101
00:05:09.089 --> 00:05:13.423
This is a function returning
another function as it is,

102
00:05:13.423 --> 00:05:19.062
looking like what is that two errors
there it is just this the same thing.

103
00:05:21.148 --> 00:05:22.250
&gt;&gt; Scott Moss: That's data, right?

104
00:05:22.250 --> 00:05:26.850
So, this thing takes in the model,
creates a closer and returns the actual

105
00:05:26.850 --> 00:05:31.020
controller that allows me to do this, it
allows me to take the model in like that.

106
00:05:31.020 --> 00:05:34.709
So, this returns a function that is
eventually going to be the controller.

107
00:05:34.709 --> 00:05:36.430
So, [INAUDIBLE] using
[INAUDIBLE] my coding.

108
00:05:36.430 --> 00:05:39.920
So basically what we're gonna have
to do is, let's work on one of them.

109
00:05:39.920 --> 00:05:41.910
Let's work on createOne.

110
00:05:41.910 --> 00:05:48.900
So on createOne, like I said we're gonna
take advantage of these controls up here.

111
00:05:48.900 --> 00:05:49.930
Assuming that they're done.

112
00:05:49.930 --> 00:05:52.130
There's a createOne method here, right.

113
00:05:52.130 --> 00:05:56.140
So what we're gonna do is we're gonna
use the controllers at createOne,

114
00:05:56.140 --> 00:05:59.240
satisfy the arguments,
which are the model and the body.

115
00:05:59.240 --> 00:06:02.010
And then just let it do its job and
then respond appropriately.

116
00:06:02.010 --> 00:06:02.620
So we're gonna be using,

117
00:06:02.620 --> 00:06:05.730
right coming down here to createOne
we're gonna say, okay, cool.

118
00:06:05.730 --> 00:06:07.980
So I know the model,
I don't really care what the model is.

119
00:06:07.980 --> 00:06:10.170
I'm just gonna pass it in, so
I'm gonna say, okay, cool.

120
00:06:10.170 --> 00:06:13.943
I want to controllers.createOne.

121
00:06:13.943 --> 00:06:18.583
And if we go look at the arguments for it,

122
00:06:18.583 --> 00:06:22.920
Takes in a model, and then the body.

123
00:06:22.920 --> 00:06:26.550
The body is the incoming body from the
request, we're creating a resource, right?

124
00:06:26.550 --> 00:06:30.210
So we expect the client to send
us the resource to create, right?

125
00:06:30.210 --> 00:06:31.690
How else would we create it?

126
00:06:31.690 --> 00:06:34.640
So we need that, so
we're gonna pass in those two things and

127
00:06:34.640 --> 00:06:35.450
therefore it's gonna create it.

128
00:06:35.450 --> 00:06:38.980
So we have the model,
it's right there And then, for

129
00:06:38.980 --> 00:06:43.720
the actual resource,
that's going to be- I'm sorry.

130
00:06:43.720 --> 00:06:46.450
For the actual body,
that's going to be on the request.

131
00:06:46.450 --> 00:06:50.100
Everything from the request is
going to be on the request object.

132
00:06:50.100 --> 00:06:54.494
And that's actually going to
be in a req.body by default

133
00:06:54.494 --> 00:06:56.881
that's not going to be there.

134
00:06:56.881 --> 00:06:58.425
We got ourselves some middleware.

135
00:06:58.425 --> 00:07:00.840
When we get some middleware,
you see what that looks like.

136
00:07:00.840 --> 00:07:04.002
But basically, some middleware is
gonna take the JSON that you post, and

137
00:07:04.002 --> 00:07:05.385
it's gonna put it there for us.

138
00:07:09.105 --> 00:07:12.832
&gt;&gt; Scott Moss: Okay, and then what you
wanna do, because this is a promise,

139
00:07:12.832 --> 00:07:15.282
you wanna go ahead and just return this.

140
00:07:15.282 --> 00:07:19.043
Actually, you don't really have to
return if you don't want to, but

141
00:07:19.043 --> 00:07:23.570
the important thing is you need to resolve
the promise like this, using the .then,

142
00:07:23.570 --> 00:07:24.739
you get the results.

143
00:07:24.739 --> 00:07:26.570
And then what do we want
to do with the result?

144
00:07:26.570 --> 00:07:31.231
We want to go ahead and send it back and
we're just going to assume it's JSON, so

145
00:07:31.231 --> 00:07:32.701
we say result like that.

146
00:07:37.230 --> 00:07:40.244
&gt;&gt; Scott Moss: But let's say this errored
out, and we want to catch the error.

147
00:07:40.244 --> 00:07:43.819
Something you can do right here in line,
we'll get to error header later,

148
00:07:43.819 --> 00:07:47.360
but you could just go ahead and
catch this error, and go you know what?

149
00:07:47.360 --> 00:07:48.800
I want to catch this error right here.

150
00:07:48.800 --> 00:07:50.990
Let's say you want to
send back a server error.

151
00:07:50.990 --> 00:07:53.640
So you can do something like res.status.

152
00:07:53.640 --> 00:07:59.129
Change the error code or
the scp to whatever you want.

153
00:07:59.129 --> 00:08:03.082
Then you can call it .send,
which will send back a message.

154
00:08:04.160 --> 00:08:08.936
&gt;&gt; Scott Moss: And
then now you send back a message back

155
00:08:08.936 --> 00:08:13.712
to your client with a status of 500,

156
00:08:13.712 --> 00:08:18.356
that says things re not looking good.

157
00:08:24.568 --> 00:08:28.868
&gt;&gt; Scott Moss: And because we're using
meta-programming region generation,

158
00:08:28.868 --> 00:08:33.930
this one method will work for the create
one of every single create one here.

159
00:08:33.930 --> 00:08:35.180
It's the exact same thing.

160
00:08:36.450 --> 00:08:37.240
They're all the same thing.

161
00:08:39.820 --> 00:08:44.240
If you want to verify you can go into the
dot controller file of every appropriate

162
00:08:44.240 --> 00:08:46.780
resource and you can see that's
what I'm generating right there.

163
00:08:46.780 --> 00:08:51.999
Generate controllers for user.

164
00:08:51.999 --> 00:08:53.431
Generate controllers for play list.

165
00:08:53.431 --> 00:08:56.081
Generate controllers for
a song that's how I'm generating it.

166
00:08:56.081 --> 00:08:58.222
You could just come in here,
and write them all one by one,

167
00:08:58.222 --> 00:08:59.710
if you want, it's totally fine.

168
00:08:59.710 --> 00:09:02.020
But they're all the same thing,
so why not just generate it?

169
00:09:03.090 --> 00:09:04.650
This allows us to test easily, too.

170
00:09:04.650 --> 00:09:07.380
Now, all we have to do is test our,
this code.

171
00:09:07.380 --> 00:09:13.680
Versus testing every single thing,
which is the same thing, cool?

172
00:09:13.680 --> 00:09:15.140
So before I let y'all loose,

173
00:09:15.140 --> 00:09:20.090
I'm gonna talk more about some of
the ways you can Respond to things.

174
00:09:20.090 --> 00:09:24.025
I would come in here and, if I were you,
[INAUDIBLE] this request object and

175
00:09:24.025 --> 00:09:25.304
see what it looks like.

176
00:09:25.304 --> 00:09:28.858
There's a lot of crazy stuff on there,
IP addresses, headers, all types of stuff.

177
00:09:28.858 --> 00:09:33.099
Let's talk about some of
the responses you can do here.

178
00:09:33.099 --> 00:09:37.336
Lets just open up a playground
of Let's go to this get one,

179
00:09:37.336 --> 00:09:40.390
we'll do some stuff in here.

180
00:09:40.390 --> 00:09:42.370
So, I'm not going to mess with
the modeling thing right now,

181
00:09:42.370 --> 00:09:43.690
I'm just going to mess
with some responses.

182
00:09:43.690 --> 00:09:48.650
So let's say I want to
respond with just anything.

183
00:09:48.650 --> 00:09:51.545
I'm gonna do res.send hello.

184
00:09:51.545 --> 00:09:54.972
So res.send is something you
probably haven't seen Basically, you

185
00:09:54.972 --> 00:09:59.050
can just send whatever you want, and then
Express will try to figure out what it is.

186
00:09:59.050 --> 00:09:59.710
Like, all right.

187
00:09:59.710 --> 00:10:02.240
I'm just going to try to figure out
what it is you're trying to send.

188
00:10:02.240 --> 00:10:03.980
Right now it's a string, so
it's easy for it to figure it out.

189
00:10:03.980 --> 00:10:07.450
When you start putting complex stuff
in there, you just don't use it.

190
00:10:07.450 --> 00:10:10.390
It's just like the catch all, here.

191
00:10:10.390 --> 00:10:13.035
Express, figure out what this thing is and
send it, and

192
00:10:13.035 --> 00:10:16.148
do it appropriately res.send
allows me to send stuff like that.

193
00:10:16.148 --> 00:10:21.809
You saw res.json allows you to
send back anything, any object.

194
00:10:21.809 --> 00:10:26.515
That will encode it in json and
it also sets it to

195
00:10:26.515 --> 00:10:31.956
application json, the headers,
so it will do that.

196
00:10:34.116 --> 00:10:37.597
&gt;&gt; Scott Moss: And then if you want to be
able to control the status of a response

197
00:10:37.597 --> 00:10:40.330
before you send it,
you could just do .status.

198
00:10:40.330 --> 00:10:41.610
For instance, on POST request,

199
00:10:41.610 --> 00:10:44.460
technically a POST request
should be status 201, right?

200
00:10:44.460 --> 00:10:47.251
So before you respond to a POST request,
you might change the status to 201.

201
00:10:47.251 --> 00:10:51.030
And then you can chain your
appropriate method after it.

202
00:10:51.030 --> 00:10:54.146
Seem like, a res.status(201),
and then json, and

203
00:10:54.146 --> 00:10:55.773
then pass in your json data here.

204
00:10:57.819 --> 00:10:59.780
&gt;&gt; Scott Moss: All right, so
that's some of the stuff you could do.

205
00:10:59.780 --> 00:11:05.080
You can also do sendFile, which you can
give it a path to a file in your app and

206
00:11:05.080 --> 00:11:06.770
it will send that file back.

207
00:11:06.770 --> 00:11:11.330
So that's great for
sending back HTML pages.

208
00:11:11.330 --> 00:11:12.730
It also ties into templating.

209
00:11:12.730 --> 00:11:17.260
So let's say you are using express
to build a service site ap that uses

210
00:11:18.430 --> 00:11:21.598
handlebars or EJS and
stuff like that, you would use this.

211
00:11:21.598 --> 00:11:26.540
Res.sin file or res.render or
something like that, so

212
00:11:26.540 --> 00:11:27.590
you would do a lot of that stuff.

213
00:11:27.590 --> 00:11:30.680
So there is a lot of ways you
would use express to respond well.

214
00:11:30.680 --> 00:11:33.530
Because we are building an AVI
that's response adjacent.

215
00:11:33.530 --> 00:11:37.170
We are going to be doing this,
almost every time Until it's an error.

216
00:11:37.170 --> 00:11:38.700
Like we're not sending back access.

217
00:11:38.700 --> 00:11:39.584
This isn't sending back images.

218
00:11:39.584 --> 00:11:41.420
This isn't sending back anything.

219
00:11:41.420 --> 00:11:42.780
We're literally just building an API,

220
00:11:42.780 --> 00:11:46.060
a JSON API, so
most of our requests will be this.

221
00:11:48.100 --> 00:11:49.490
And the fact because it is, and

222
00:11:49.490 --> 00:11:52.320
we probably need different error
messages to satisfy our client,

223
00:11:52.320 --> 00:11:55.780
most likely we'll build an abstraction
around that response.json.

224
00:11:55.780 --> 00:11:59.600
That takes in a message and
something like that,

225
00:11:59.600 --> 00:12:01.220
that way you can respond appropriately.

226
00:12:01.220 --> 00:12:05.815
You can have different types of responses
for the JSON, but that's for production.

