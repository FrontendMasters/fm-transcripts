WEBVTT

1
00:00:00.110 --> 00:00:02.020
&gt;&gt; Scott Moss: Resolvers,
once you learn this part,

2
00:00:02.020 --> 00:00:05.820
you can pretty much do everything
with GraphQL, other than mutations.

3
00:00:05.820 --> 00:00:07.046
So we'll go over resolvers.

4
00:00:07.046 --> 00:00:09.087
We'll cut to the challenge,
and then we'll eat lunch.

5
00:00:09.087 --> 00:00:11.630
Then we'll come back and talk about it.

6
00:00:11.630 --> 00:00:16.607
So resolvers, okay, it looks like
I was about to put something here.

7
00:00:16.607 --> 00:00:18.669
[LAUGH] But I don't know what happened.

8
00:00:18.669 --> 00:00:21.315
Did it not save, or
I lost the Internet, I don't know.

9
00:00:21.315 --> 00:00:26.620
But I'll just talk about resolvers,
functions to resolve data for your schema.

10
00:00:26.620 --> 00:00:29.480
So again,
let's look at this example right here.

11
00:00:29.480 --> 00:00:31.003
I'm just gonna walk through it.

12
00:00:31.003 --> 00:00:33.510
I think it's better if I just
walk through it as I talk.

13
00:00:33.510 --> 00:00:37.780
So again, this is a resolver.

14
00:00:39.500 --> 00:00:42.240
I wanna talk about this
argument syntax here.

15
00:00:42.240 --> 00:00:45.360
So resolver takes in four arguments.

16
00:00:46.750 --> 00:00:49.680
The first argument is
gonna be the rootValue.

17
00:00:50.870 --> 00:00:55.090
rootValue is optional, because it's
up to you to pass in the rootValue.

18
00:00:55.090 --> 00:00:58.900
Most of the time, you won't have
anything here, on a top level resolver.

19
00:00:58.900 --> 00:01:02.460
On a nested resolver, when we get there,
this will always be something.

20
00:01:02.460 --> 00:01:05.830
It'll be the thing that is
being resolved before it.

21
00:01:05.830 --> 00:01:10.250
[LAUGH] Okay, so
a nested resolver is another branch.

22
00:01:10.250 --> 00:01:14.610
It's rootValue will be the branch
that it branched from, right?

23
00:01:14.610 --> 00:01:16.370
But because this is a top level resolver,

24
00:01:16.370 --> 00:01:21.220
as in it is a branch from the root,
there's nothing above it.

25
00:01:21.220 --> 00:01:23.480
There is no rootValue,
unless we supply it.

26
00:01:23.480 --> 00:01:28.280
You can supply a rootValue here,
if you want.

27
00:01:29.310 --> 00:01:30.990
Or I'm sorry, here.

28
00:01:30.990 --> 00:01:35.117
You could put a rootValue here,
like rootValue, and

29
00:01:35.117 --> 00:01:37.510
you can put whatever you want.

30
00:01:37.510 --> 00:01:43.450
And that rootValue will be passed
down to your top level resolvers.

31
00:01:43.450 --> 00:01:47.885
What that's mostly gonna be used for, that
I've seen, is for per request caching.

32
00:01:47.885 --> 00:01:49.345
So there's something called a data loader.

33
00:01:49.345 --> 00:01:51.463
We're not gonna get to data loader today,
but

34
00:01:51.463 --> 00:01:53.428
it allows you to cache things per request.

35
00:01:53.428 --> 00:01:57.326
Cuz if you do the math and
you kinda thought about this for a minute,

36
00:01:57.326 --> 00:01:59.624
somebody could query GraphQL API, and

37
00:01:59.624 --> 00:02:03.520
recursively make it query the database,
and kill your API.

38
00:02:03.520 --> 00:02:04.034
It could kill it.

39
00:02:04.034 --> 00:02:09.300
They can, for instance, if your user type
had a song, and your song type had a user,

40
00:02:09.300 --> 00:02:12.910
you can ask the user for the song, ask the
song for the user, the user for the song.

41
00:02:12.910 --> 00:02:14.253
You can do that over, and
over, and over again.

42
00:02:14.253 --> 00:02:17.223
And every time you have a resolver,
it will create a database for that, right?

43
00:02:17.223 --> 00:02:19.130
It'll just go on, and on, and on, and on.

44
00:02:19.130 --> 00:02:22.360
So you can stop that,
you can have a rootValue that caches it.

45
00:02:22.360 --> 00:02:25.200
So it's like I've already got
this user once, cache it here.

46
00:02:25.200 --> 00:02:28.510
So if it asks for a get, then just
get it from the cache, per request.

47
00:02:28.510 --> 00:02:30.040
So it's a lot of advanced
stuff you can do there.

48
00:02:30.040 --> 00:02:34.930
But yeah, you could have a recursive
GraphQL server that gets pooped on,

49
00:02:34.930 --> 00:02:36.880
so you've gotta be careful.

50
00:02:36.880 --> 00:02:41.250
So the first one's the rootValue,
which is normally empty unless you pass in

51
00:02:41.250 --> 00:02:43.510
something, or
if you're on a nested resolver.

52
00:02:43.510 --> 00:02:48.370
The second one is gonna be any
arguments that are passed in.

53
00:02:48.370 --> 00:02:49.600
So when we pass in arguments and

54
00:02:49.600 --> 00:02:51.770
mutations, that's what this
second one's gonna be.

55
00:02:51.770 --> 00:02:53.105
It's gonna be an object
of those arguments,

56
00:02:53.105 --> 00:02:56.610
with the same name as
they are in your GraphQL.

57
00:02:56.610 --> 00:03:00.180
So if we went to here, and
let's say, I don't know.

58
00:03:00.180 --> 00:03:05.572
Let's say getMe took in an argument of
hello, whose type is string, right?

59
00:03:05.572 --> 00:03:08.301
Inside of that resolver,
we would have an object.

60
00:03:08.301 --> 00:03:13.030
We would call this args,
there would be an args.hello on there.

61
00:03:14.330 --> 00:03:14.930
Thatâ€™s how this works.

62
00:03:14.930 --> 00:03:17.310
This is an object of all the arguments for
this given resolver.

63
00:03:19.040 --> 00:03:21.512
Normally, what you would see,
especially in my code,

64
00:03:21.512 --> 00:03:23.180
I'll just destructure it like this.

65
00:03:23.180 --> 00:03:24.392
So I would just be like, hello.

66
00:03:24.392 --> 00:03:28.390
I'll just get it right there,
destructuring using ES6.

67
00:03:28.390 --> 00:03:33.160
Which is the same thing as args.hello.

68
00:03:33.160 --> 00:03:38.780
It's the same thing as saying,
&gt;&gt; Scott Moss: The same thing,

69
00:03:38.780 --> 00:03:40.890
I'll just destructure it in there.

70
00:03:40.890 --> 00:03:45.080
Another pattern that I follow is, I always
put arguments on a property called input.

71
00:03:46.130 --> 00:03:47.680
So when you see me do input,

72
00:03:47.680 --> 00:03:52.120
when we start writing inputs,
I always use the variable name input.

73
00:03:52.120 --> 00:03:55.668
Which has nothing to do with the input
type in GraphQL, I just name it input.

74
00:03:55.668 --> 00:03:59.150
That way I know inside my resolver,
it's just always an input argument.

75
00:03:59.150 --> 00:04:02.266
The only time I wouldn't use input,
if it was just one argument like an ID,

76
00:04:02.266 --> 00:04:03.067
I'll just put ID.

77
00:04:03.067 --> 00:04:06.340
But if it's like you're doing an update,
cool, here's an input.

78
00:04:06.340 --> 00:04:07.610
So I know it's always called input.

79
00:04:08.790 --> 00:04:10.670
It helps you a lot when you
start writing nested resolvers.

80
00:04:10.670 --> 00:04:14.790
Otherwise, you will have to remember
every signature of every single

81
00:04:14.790 --> 00:04:17.320
mutation that you wrote,
and that can be tedious.

82
00:04:17.320 --> 00:04:18.920
It's better just to give
them all the same name.

83
00:04:18.920 --> 00:04:19.830
It's like, there's an input.

84
00:04:21.170 --> 00:04:22.160
So that's the second argument.

85
00:04:23.210 --> 00:04:25.240
The third argument is gonna
be called the context.

86
00:04:26.870 --> 00:04:31.330
Context is, remember when we did
this down here, this context object?

87
00:04:31.330 --> 00:04:32.920
That's what context is.

88
00:04:32.920 --> 00:04:37.635
It's kinda like a rootValue, except for
it's more like, it's not just values.

89
00:04:37.635 --> 00:04:42.037
You can pass functions down here, pretty
much anything that needs to be shared, for

90
00:04:42.037 --> 00:04:43.160
all your resolvers.

91
00:04:43.160 --> 00:04:46.220
So in this case, the context is
the request that was coming in.

92
00:04:46.220 --> 00:04:47.900
So we pass the request down,
we pass the user down.

93
00:04:47.900 --> 00:04:49.420
So that's the context.

94
00:04:49.420 --> 00:04:50.360
You'll use this one a lot.

95
00:04:52.330 --> 00:04:54.800
And then the last one,
which you will probably almost never use,

96
00:04:54.800 --> 00:04:58.610
unless you're getting really advanced,
is gonna be info.

97
00:04:58.610 --> 00:05:03.510
And this is gonna be the native AST for
the GraphQL query that came in.

98
00:05:03.510 --> 00:05:06.470
If you were to log this,
you would just see some crazy stuff.

99
00:05:06.470 --> 00:05:09.540
But it's very helpful to do
optimizations on a database query.

100
00:05:09.540 --> 00:05:13.460
For instance, you can take this AST,
you can feed it to Mongo.

101
00:05:13.460 --> 00:05:16.488
And for instance,
if I did a query where I only

102
00:05:16.488 --> 00:05:20.880
asked,
&gt;&gt; Scott Moss: Let's go back here.

103
00:05:22.750 --> 00:05:25.740
So let's say I did a query run
where we asked for the ID.

104
00:05:25.740 --> 00:05:29.100
That AST that comes in, that object
that's gonna represent this query,

105
00:05:29.100 --> 00:05:30.452
is only gonna have id property on it.

106
00:05:30.452 --> 00:05:33.750
So then I can tell Mongo to only query for
the id field, and not query for

107
00:05:33.750 --> 00:05:35.440
all the fields.

108
00:05:35.440 --> 00:05:36.640
And then give it to GraphQL,

109
00:05:36.640 --> 00:05:39.240
have GraphQL only pop off the id,
cuz that's what would happen.

110
00:05:39.240 --> 00:05:44.460
So by saving database queries,
I can use that AST to tell my database

111
00:05:44.460 --> 00:05:46.652
to only query for
the fields that were asked for.

112
00:05:46.652 --> 00:05:49.454
So that's an optimization you can do.

113
00:05:49.454 --> 00:05:52.790
That leads to problems with caching,
especially if you're doing Redis.

114
00:05:52.790 --> 00:05:55.310
So you've gotta figure that out.

115
00:05:55.310 --> 00:05:56.300
But yeah, you can do that.

116
00:05:57.610 --> 00:06:00.480
But you almost never use info.

117
00:06:01.941 --> 00:06:03.417
&gt;&gt; Scott Moss: I mean, I'll log it for
you, you can see what it look like.

118
00:06:03.417 --> 00:06:07.066
But if you wanna see what
raw GraphQL looks like,

119
00:06:07.066 --> 00:06:09.564
I'll just log this for you here.

120
00:06:09.564 --> 00:06:16.782
We can run this,
&gt;&gt; Scott Moss: We will run our query.

121
00:06:16.782 --> 00:06:18.630
We'll go back, and here you go.

122
00:06:18.630 --> 00:06:20.650
Here's the AST for that query.

123
00:06:20.650 --> 00:06:22.500
Here's the field name,
let's call it getMe.

124
00:06:22.500 --> 00:06:27.620
All the nodes, this is the raw
GraphQL query associated with that.

125
00:06:27.620 --> 00:06:31.100
The schema, any directives,
we're not gonna talk about directives,

126
00:06:32.820 --> 00:06:34.230
pretty much everything
associated with that.

127
00:06:34.230 --> 00:06:40.580
So you can take this, and you can see that
you can use this information to associate

128
00:06:40.580 --> 00:06:44.990
to your database what you actually need to
query and what you don't need to query.

129
00:06:44.990 --> 00:06:46.990
So like I said,
you'll probably almost never use this.

130
00:06:46.990 --> 00:06:49.990
This is for very, very advanced cases.

131
00:06:49.990 --> 00:06:53.970
And you probably just will never use it,
but it's there.

132
00:06:53.970 --> 00:06:54.480
Most of the time,

133
00:06:54.480 --> 00:06:58.730
what you're gonna be using,
&gt;&gt; Scott Moss: Is gonna be args and

134
00:06:58.730 --> 00:06:59.931
context.

135
00:06:59.931 --> 00:07:01.430
You'll probably never even fill this in.

136
00:07:01.430 --> 00:07:04.850
And this will be just a placeholder
until you get to nested resolvers,

137
00:07:04.850 --> 00:07:06.810
then you'll have to use this one.

138
00:07:06.810 --> 00:07:09.660
But most likely, it's just these two,
args and context.

139
00:07:11.440 --> 00:07:13.190
So that's the signature for our resolver.

140
00:07:13.190 --> 00:07:16.970
Now, for an actual resolver,
this is how you hook it up.

141
00:07:16.970 --> 00:07:21.320
So we're using GraphQL Tools, which allows
us to hook it up in a specific way.

142
00:07:21.320 --> 00:07:24.017
Depending on what mutation you use, you
would hook up your resolvers differently.

143
00:07:24.017 --> 00:07:25.722
We're using GraphQL Tools.

144
00:07:25.722 --> 00:07:28.723
I prefer this method, it makes so
much more sense to me.

145
00:07:28.723 --> 00:07:32.175
So the way it works is,
if we go look at the GraphQL file,

146
00:07:32.175 --> 00:07:35.638
we have a type called Query here,
right, on this user.

147
00:07:37.444 --> 00:07:38.430
&gt;&gt; Scott Moss: Guess what that's doing.

148
00:07:41.414 --> 00:07:43.051
&gt;&gt; Speaker 2: Queries the user?

149
00:07:43.051 --> 00:07:46.780
&gt;&gt; Scott Moss: Well, getMe queries the
user, but what do you think this is doing?

150
00:07:46.780 --> 00:07:48.310
We know what this is doing, right?

151
00:07:48.310 --> 00:07:50.890
type User, that creates a user type.

152
00:07:50.890 --> 00:07:51.430
What is this doing?

153
00:07:52.860 --> 00:07:53.540
&gt;&gt; Group: Creating a query type.

154
00:07:53.540 --> 00:07:54.881
&gt;&gt; Scott Moss: Yeah,
it's creating a query type.

155
00:07:54.881 --> 00:07:57.132
Yeah, it creates a query type, and

156
00:07:57.132 --> 00:08:01.503
that query type gets associated and,
&gt;&gt; Scott Moss: Here,

157
00:08:01.503 --> 00:08:03.210
there's our query target.

158
00:08:03.210 --> 00:08:04.920
It gives a certain shape
to this query here.

159
00:08:04.920 --> 00:08:06.480
I just put it in the user file.

160
00:08:06.480 --> 00:08:09.800
You only make the query type one time,
and the mutation type one time.

161
00:08:09.800 --> 00:08:11.660
So we made a query type.

162
00:08:11.660 --> 00:08:14.790
And then inside that query type,
we made a query called getMe.

163
00:08:14.790 --> 00:08:17.970
I'm gonna get rid of these args,
cuz we don't need this args, right?

164
00:08:17.970 --> 00:08:19.440
So we made another one called getMe.

165
00:08:19.440 --> 00:08:22.840
Notice the name, getMe, camel case, right?

166
00:08:22.840 --> 00:08:24.251
I'm gonna pull up the resolvers.

167
00:08:28.082 --> 00:08:30.519
&gt;&gt; Scott Moss: Look at that,
it is also called getMe, inside here,

168
00:08:30.519 --> 00:08:31.800
the function name.

169
00:08:31.800 --> 00:08:33.196
These have to match.

170
00:08:33.196 --> 00:08:35.500
If they don't match, it will break.

171
00:08:35.500 --> 00:08:36.920
And in fact, everything has to match.

172
00:08:36.920 --> 00:08:42.740
So I have userResolvers, I defined for
the Query, with a capital Q.

173
00:08:42.740 --> 00:08:46.340
Which is exactly the same over here,
Query,

174
00:08:46.340 --> 00:08:49.571
that I want to make a query called getMe.

175
00:08:49.571 --> 00:08:51.740
And I don't have to put it twice,
cuz it's ES6, right?

176
00:08:51.740 --> 00:08:52.507
It just looks it up.

177
00:08:54.712 --> 00:08:56.160
&gt;&gt; Scott Moss: And it's called getMe.

178
00:08:56.160 --> 00:08:58.600
If I change the name of this,
this will break.

179
00:08:58.600 --> 00:09:02.770
If I say, getMeee: getMe.

180
00:09:02.770 --> 00:09:06.760
Now I'm gonna get a error,
most likely right here.

181
00:09:06.760 --> 00:09:08.360
It says it right here.

182
00:09:08.360 --> 00:09:13.574
Cannot apply update, query.getMeee defined
in resolvers, but is not in your schema.

183
00:09:13.574 --> 00:09:15.400
You need to restart your application,
right?

184
00:09:15.400 --> 00:09:16.880
That's because they're saying hey,

185
00:09:16.880 --> 00:09:20.550
you defined a resolver called
getMeee with three e's.

186
00:09:20.550 --> 00:09:22.880
But inside your schema,
you don't have that.

187
00:09:22.880 --> 00:09:25.880
So that's why it's freaking out,
so they have to match.

188
00:09:27.660 --> 00:09:29.820
You can turn that error off if you want,
but I do not recommend it.

189
00:09:31.238 --> 00:09:36.800
So if we go back to our resolver and we
replace it, we go back, then it matches.

190
00:09:36.800 --> 00:09:38.010
So those have to match.

191
00:09:39.850 --> 00:09:40.550
Any questions on that?

192
00:09:41.830 --> 00:09:42.970
So we have our query here.

193
00:09:42.970 --> 00:09:46.259
If we had more queries, for
instance, if we had getAll users,

194
00:09:46.259 --> 00:09:48.131
then we'd have to make a function.

195
00:09:48.131 --> 00:09:50.743
I mean, then we'd have to go
inside of here and do getAll.

196
00:09:50.743 --> 00:09:53.517
Now we're gonna make another
one called getAll, and

197
00:09:53.517 --> 00:09:55.187
that returns an array of users.

198
00:09:56.798 --> 00:09:58.860
&gt;&gt; Scott Moss: And
then now we have to make getAll over here.

199
00:09:58.860 --> 00:10:01.331
The same would happen if I don't,
if I put it in a schema and

200
00:10:01.331 --> 00:10:03.508
don't put in a resolver,
I'll also get an error.

201
00:10:08.245 --> 00:10:09.840
&gt;&gt; Scott Moss: Or maybe not.

202
00:10:09.840 --> 00:10:12.430
Maybe it doesn't give me
an error unless I run it.

203
00:10:14.232 --> 00:10:16.003
I've gotta refresh GraphiQL.

204
00:10:16.003 --> 00:10:17.991
Yeah, so
sometimes you've gotta refresh GraphiQL,

205
00:10:17.991 --> 00:10:19.337
cuz the introspection query is old.

206
00:10:19.337 --> 00:10:20.450
So make sure you do that.

207
00:10:23.210 --> 00:10:24.333
Thereâ€™s getAll.

208
00:10:24.333 --> 00:10:25.919
And then Iâ€™m, like, cool, give me the id.

209
00:10:25.919 --> 00:10:29.056
Then itâ€™s like, null.

210
00:10:29.056 --> 00:10:33.030
You try to do,
&gt;&gt; Scott Moss: A user thatâ€™s non-null, but

211
00:10:33.030 --> 00:10:34.620
we donâ€™t even know how to resolve this.

212
00:10:34.620 --> 00:10:37.310
You didnâ€™t tell us how to resolve it,
so itâ€™s just null.

213
00:10:37.310 --> 00:10:40.750
So yeah, you're gonna get an error either
way, if you donâ€™t match this stuff up.

214
00:10:40.750 --> 00:10:43.297
So make sure theyâ€™re matched up,
that's the first rule.

215
00:10:46.978 --> 00:10:48.457
&gt;&gt; Scott Moss: And
we do have them matched up here.

