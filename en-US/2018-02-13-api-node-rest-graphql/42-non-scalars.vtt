WEBVTT

1
00:00:02.890 --> 00:00:05.040
&gt;&gt; Scott Moss: So non scalars and
nested resolvers.

2
00:00:06.230 --> 00:00:09.860
A non scalar again, a refresh on that,
is a custom type in GraphQL.

3
00:00:09.860 --> 00:00:11.340
Literally anything that's an object.

4
00:00:11.340 --> 00:00:14.550
If you make an object,
it's a non scalar, that's basically it.

5
00:00:16.640 --> 00:00:18.590
It can be used whatever
scalar types are used.

6
00:00:18.590 --> 00:00:23.265
So scalar types, again, include strings,
integers, floats, ID's,

7
00:00:23.265 --> 00:00:28.500
enum's, and Boolean's,
those are all scholar types.

8
00:00:28.500 --> 00:00:30.290
So wherever you can use those,

9
00:00:30.290 --> 00:00:32.900
you can use also use non scalars,
you just have to resolve it.

10
00:00:35.690 --> 00:00:38.090
And like I said before,
they have to be resolved eventually.

11
00:00:38.090 --> 00:00:41.750
It doesn't matter how nested you go,
eventually you're gonna get to the end of

12
00:00:41.750 --> 00:00:45.910
the tree and it better resolve that non
scalar, otherwise it's gonna freak out

13
00:00:45.910 --> 00:00:47.940
as you saw what we just,
as you can tell from what we just saw.

14
00:00:50.190 --> 00:00:52.490
Any questions on non scalars?

15
00:00:52.490 --> 00:00:54.650
So in our app, what are the three
non scalars that we have?o

16
00:00:56.580 --> 00:00:58.910
&gt;&gt; Speaker 2: Songs, playlists, users?

17
00:00:58.910 --> 00:01:02.060
&gt;&gt; Scott Moss: Yep, song, playlist, user,
exactly, everything else is a scalar.

18
00:01:04.400 --> 00:01:07.616
Nested resolvers or it's a nest resolvers,

19
00:01:07.616 --> 00:01:12.150
basically it's used to create
a graph in your graphql API.

20
00:01:12.150 --> 00:01:16.448
So, as you start resolving,
basically you create your schema,

21
00:01:16.448 --> 00:01:21.229
you look at the non scalars, and for
each thing in your schema like this.

22
00:01:21.229 --> 00:01:24.988
I'll just show you,
you gotta kinda plan it out and

23
00:01:24.988 --> 00:01:29.462
you can plan out how people
are gonna interact with your API.

24
00:01:29.462 --> 00:01:34.460
So for instance,
let's say playlist also resolves curators,

25
00:01:34.460 --> 00:01:41.321
the people who curated this playlist, all
right, and it's an array of users, right?

26
00:01:41.321 --> 00:01:46.801
Let's say it's that, but
then like let's say on the user GraphQL,

27
00:01:46.801 --> 00:01:50.013
you have like, the user has something,

28
00:01:50.013 --> 00:01:55.340
an array of all of the playlist
that it created or curated, right?

29
00:01:55.340 --> 00:01:58.090
So now it's like, you can get
the same information on both, right?

30
00:01:58.090 --> 00:02:01.630
So you got to kind of plan out
how you want to implement this.

31
00:02:01.630 --> 00:02:06.530
So, if this was the case, what you would
do is you would have to write a resolver

32
00:02:06.530 --> 00:02:11.340
for this property that would know
how to go to the database given

33
00:02:11.340 --> 00:02:14.730
this current playlist and
find the users that curated it.

34
00:02:14.730 --> 00:02:17.720
And then on this side,
you would have to go to the database and

35
00:02:17.720 --> 00:02:20.420
find the playlist that this user curated.

36
00:02:20.420 --> 00:02:23.947
And depending on how you save your data
and where it is, it could challenging or

37
00:02:23.947 --> 00:02:24.755
it could be easy.

38
00:02:24.755 --> 00:02:28.085
So you gotta kinda figure out how you
wanna do it, but either way you have to

39
00:02:28.085 --> 00:02:31.635
create some type of nested resolver
that's relying on some other branch, and

40
00:02:31.635 --> 00:02:33.653
then that thing may
have a nested resolver.

41
00:02:33.653 --> 00:02:37.581
So for instance, this is where I said
it can like get kind of recursive,

42
00:02:37.581 --> 00:02:40.720
cuz think about it,
let's say I query the user and I say,

43
00:02:40.720 --> 00:02:43.830
give me the playlist that you curated,
right?

44
00:02:43.830 --> 00:02:47.710
And then, inside that playlist,
I'm like, give me all your curators.

45
00:02:47.710 --> 00:02:50.680
And then, for those users, I say,
give me the playlist that you curated.

46
00:02:50.680 --> 00:02:52.890
And now it's going back and
forth over and over and over again.

47
00:02:52.890 --> 00:02:54.710
Does that make sense?

48
00:02:54.710 --> 00:02:57.570
You can do that forever, somebody could
literally just do that to your app and

49
00:02:57.570 --> 00:02:59.290
just kill it.

50
00:02:59.290 --> 00:03:02.650
So you would have to figure out some
strategies on how to avoid that.

51
00:03:02.650 --> 00:03:06.370
And there really aren't any
good strategies other than,

52
00:03:06.370 --> 00:03:09.190
just don't put them on both sides,
you know?

53
00:03:09.190 --> 00:03:10.290
Just don't do stuff like that.

54
00:03:10.290 --> 00:03:11.710
There's ways you can like, like for

55
00:03:11.710 --> 00:03:14.770
instance, you have that root value that
you pass out or that context object.

56
00:03:14.770 --> 00:03:18.200
You can pass stuff down there,
to give the next resolvers some

57
00:03:18.200 --> 00:03:21.650
information on how deep you've been so far
and then like maybe cancel if you go like,

58
00:03:21.650 --> 00:03:23.800
you know, ten levels deep just stop or
something like that.

59
00:03:23.800 --> 00:03:27.170
There's some things you can do but
the best thing to do is better planning,

60
00:03:27.170 --> 00:03:30.810
better data modeling,
don't allow people to go access stuff

61
00:03:31.950 --> 00:03:34.400
on multiple places and
reference each other.

62
00:03:34.400 --> 00:03:37.550
Like that would be a bad design,
these two things reference each other, so

63
00:03:37.550 --> 00:03:40.700
therefore you can keep asking for them
infinitely until your app just freaks out.

64
00:03:42.680 --> 00:03:44.720
Do you guys see the fallacy in that?

65
00:03:44.720 --> 00:03:49.075
Yeah,
&gt;&gt; Scott Moss: But,

66
00:03:49.075 --> 00:03:53.705
in our case we don't have that, we only
have, the only one we have right now is

67
00:03:53.705 --> 00:03:57.286
playlist and songs,
as an example I just showed you.

68
00:03:57.286 --> 00:04:01.470
And for the example, I've added
the ability to get playlist for a user,

69
00:04:01.470 --> 00:04:07.230
which if playlists have songs, and a user
has a playlist, now you can go to a user,

70
00:04:07.230 --> 00:04:10.690
ask for the playlist, and for
each playlist you can get all the songs.

71
00:04:10.690 --> 00:04:12.400
So you should be able to do that, but

72
00:04:12.400 --> 00:04:15.940
that's pretty cool because we didn't build
that, all we said was that this user could

73
00:04:15.940 --> 00:04:19.510
get playlist and because playlist can get
songs now, you can get songs from a user.

74
00:04:19.510 --> 00:04:22.730
So that's the whole point of the graph
effect, like you didn't put it together

75
00:04:22.730 --> 00:04:24.530
like that, whereas the rest you
would have to put that together.

76
00:04:24.530 --> 00:04:28.380
You had to say, I'm gonna make
a route where you can go and

77
00:04:28.380 --> 00:04:30.860
get the playlist and
I'm also gonna give you the songs.

78
00:04:30.860 --> 00:04:33.380
It's a predefined thing,
whereas this is not predefined.

79
00:04:33.380 --> 00:04:36.130
I can create this whenever I want and
the way it resolves,

80
00:04:36.130 --> 00:04:39.680
because the type resolve each other,
it eventually creates that shape for me.

81
00:04:39.680 --> 00:04:42.675
But it wasn't created that way, they
don't know about each other, you know?

