WEBVTT

1
00:00:02.937 --> 00:00:04.288
&gt;&gt; Scott Moss: So if you go into
song.mongo you'll see something like this.

2
00:00:04.288 --> 00:00:06.784
You'll see a schema that's
completely empty and

3
00:00:06.784 --> 00:00:09.229
then you see all this
other stuff underneath it.

4
00:00:09.229 --> 00:00:11.584
Let's take a note what's going on here.

5
00:00:11.584 --> 00:00:14.257
First, we're importing Mongoose,
which is ODM.

6
00:00:14.257 --> 00:00:16.384
We make an object called
schema that is empty.

7
00:00:16.384 --> 00:00:19.556
We'll do some work in here in a minute.

8
00:00:19.556 --> 00:00:23.065
And then what we do is we make something
called a song schema which is an instance

9
00:00:23.065 --> 00:00:24.352
of a new mongoose.schema.

10
00:00:24.352 --> 00:00:28.224
And basically that's just,
I'm taking this object.

11
00:00:28.224 --> 00:00:32.012
I'm gonna create a mongoose schema from
this object using the new schema method.

12
00:00:32.012 --> 00:00:36.369
And then what you do is you take that
schema and you create a model from it.

13
00:00:36.369 --> 00:00:38.795
It's very similar to what
you do in most databases.

14
00:00:38.795 --> 00:00:40.281
You create a schema.

15
00:00:40.281 --> 00:00:40.865
That gives you a table.

16
00:00:40.865 --> 00:00:42.755
You can think of it like this.

17
00:00:42.755 --> 00:00:44.802
Except for a model, it's the table now.

18
00:00:44.802 --> 00:00:49.186
So I'm creating a schema based off of
these rules that we have yet to define.

19
00:00:49.186 --> 00:00:50.715
And then with that schema,

20
00:00:50.715 --> 00:00:54.639
I'm going to create a model in
the database by this name called song and

21
00:00:54.639 --> 00:00:58.781
I'm gonna reference it here so I can
use it to do things in my application.

22
00:01:03.394 --> 00:01:05.662
&gt;&gt; Scott Moss: So this pattern you'll
see in almost every single model file.

23
00:01:05.662 --> 00:01:06.696
This is the same pattern.

24
00:01:06.696 --> 00:01:10.325
Create a schema, create a model,
export the model.

25
00:01:10.325 --> 00:01:13.577
This model right here on line nine is the
thing that you will be using in your code

26
00:01:13.577 --> 00:01:15.465
to create, find, delete, move, update.

27
00:01:15.465 --> 00:01:19.387
That's what you'll be using for
that resource, populate.

28
00:01:19.387 --> 00:01:22.198
All that's here.
Now the important part is this part right

29
00:01:22.198 --> 00:01:24.350
here data modeling which is schema.

30
00:01:24.350 --> 00:01:26.385
And actually how to create a schema.

31
00:01:26.385 --> 00:01:28.774
So we have a lot of people here use Mongo.

32
00:01:28.774 --> 00:01:31.012
Who here has used Mongoose schemas?

33
00:01:31.012 --> 00:01:34.219
A few people, okay, so you pretty
much know how powerful they are.

34
00:01:34.219 --> 00:01:35.512
You can do a lot of things.

35
00:01:35.512 --> 00:01:39.612
We're not gonna get into really advanced
stuff like custom validators and

36
00:01:39.612 --> 00:01:42.941
all that crazy stuff, but
we are gonna model some data here.

37
00:01:42.941 --> 00:01:46.256
So there is some test
associated with this, so

38
00:01:46.256 --> 00:01:48.726
you can just go whatever you want.

39
00:01:48.726 --> 00:01:51.587
I'm writing to check every single field on
here, like required and all that stuff.

40
00:01:51.587 --> 00:01:55.794
But let's just walk through how we can do
some of this stuff with the schema and

41
00:01:55.794 --> 00:01:57.228
how it works with models.

42
00:01:57.228 --> 00:01:59.420
So the way it works is you have
an object for your schema.

43
00:01:59.420 --> 00:02:04.287
And then what you do is, the properties
on those objects are the names of

44
00:02:04.287 --> 00:02:07.220
the fields that the object's gonna have.

45
00:02:07.220 --> 00:02:11.217
So for instance,
let's just not worry about Song right now.

46
00:02:11.217 --> 00:02:12.227
We're just gonna make
a completely different one.

47
00:02:12.227 --> 00:02:17.735
So let's just call this one a dogSchema,
okay?

48
00:02:17.735 --> 00:02:19.499
So this is a dogSchema.

49
00:02:19.499 --> 00:02:22.109
And basically the way Mongoose needs it,
like I said,

50
00:02:22.109 --> 00:02:24.286
the keys are the names
of the fields you want.

51
00:02:24.286 --> 00:02:26.345
So what's something a dog would have?

52
00:02:26.345 --> 00:02:27.878
&gt;&gt; Speaker 2: Name.

53
00:02:27.878 --> 00:02:28.875
&gt;&gt; Scott Moss: Name, okay.

54
00:02:28.875 --> 00:02:32.754
And now we have to tell
Mongoose what type this is.

55
00:02:32.754 --> 00:02:34.658
So you could say String.

56
00:02:34.658 --> 00:02:38.731
Mongoose uses the built-in natives
inside of JavaScript for the types.

57
00:02:38.731 --> 00:02:42.262
So String, capital S,
is a native in JavaScript.

58
00:02:42.262 --> 00:02:43.818
It's a native primitive type, right?

59
00:02:43.818 --> 00:02:45.033
So we can say String.

60
00:02:45.033 --> 00:02:47.100
We can also do a little bit more here.

61
00:02:47.100 --> 00:02:51.514
We can say hey, type is String, which
is the same thing that I had before but

62
00:02:51.514 --> 00:02:55.529
the reason I expanded on an object
is because I want to do something.

63
00:02:55.529 --> 00:02:56.377
I want to make this required.

64
00:02:56.377 --> 00:02:57.410
So I can say required true.

65
00:02:57.410 --> 00:03:01.803
So this allows me to say hey,
a dog has a name whose type is string and

66
00:03:01.803 --> 00:03:03.230
it is also required.

67
00:03:03.230 --> 00:03:06.848
That's what that's saying.

68
00:03:06.848 --> 00:03:08.900
I can also take it a step further and
say, you know what,

69
00:03:08.900 --> 00:03:11.662
this name also has to be unique for
the entire database, so unique: true.

70
00:03:11.662 --> 00:03:16.701
So now no two dogs can have the same name.

71
00:03:19.273 --> 00:03:20.401
&gt;&gt; Scott Moss: So
let's move on to another one.

72
00:03:20.401 --> 00:03:24.919
Let's say we wanted to
know if this dog was,

73
00:03:24.919 --> 00:03:29.326
I don't know, old or not, I don't know.

74
00:03:29.326 --> 00:03:33.062
IsOld, is it an old dog, right?

75
00:03:33.062 --> 00:03:37.650
So, we say this is a type Boolean,
cuz it's true or false, so we'll put that.

76
00:03:37.650 --> 00:03:43.360
We can also say this type is Boolean.

77
00:03:43.360 --> 00:03:46.727
It is also required, but we're not gonna
make this unique cuz it's a Boolean,

78
00:03:46.727 --> 00:03:48.097
that wasn't making any sense.

79
00:03:48.097 --> 00:03:50.461
But we will give it a default of false.

80
00:03:50.461 --> 00:03:54.836
By default, all dogs are not old,
unless you specifically say that it's old.

81
00:03:54.836 --> 00:03:55.797
Yes?

82
00:03:55.797 --> 00:03:57.798
&gt;&gt; Speaker 3: Do the types
have to be primitives, or

83
00:03:57.798 --> 00:04:00.181
can you define complex
objects in the types?

84
00:04:00.181 --> 00:04:02.196
&gt;&gt; Scott Moss: The types
have to be primitives.

85
00:04:04.588 --> 00:04:05.164
&gt;&gt; Scott Moss: Actually, you know what?

86
00:04:05.164 --> 00:04:06.908
Maybe you might be able to pass in,

87
00:04:06.908 --> 00:04:10.953
depending on what version of Mongoose
you're on, I'll look it up after this.

88
00:04:10.953 --> 00:04:13.616
But I would say it's safe
to use primitives for now.

89
00:04:13.616 --> 00:04:16.784
But if you're asking me if you
can do things like this, or

90
00:04:16.784 --> 00:04:18.833
I'm sorry, that's a bad example.

91
00:04:18.833 --> 00:04:23.021
[LAUGH] More like Car, I would imagine no,
and if you could I would say probably stay

92
00:04:23.021 --> 00:04:27.088
away from it, because now you're
referencing some class that's in the code,

93
00:04:27.088 --> 00:04:30.446
when really you should be
referencing some other model, right?

94
00:04:30.446 --> 00:04:33.695
So that's what you wanna do,
that's what we're gonna get to next.

95
00:04:33.695 --> 00:04:37.093
So if you wanna reference another type,
that type should be a model,

96
00:04:37.093 --> 00:04:40.683
not something that's code level,
something database level, right?

97
00:04:40.683 --> 00:04:42.269
So if you wanna do that, so

98
00:04:42.269 --> 00:04:47.190
if you can, I wanna reference the dog's
owner that would be some other shape.

99
00:04:47.190 --> 00:04:52.550
So the way we would do that is let's
say this type is actually gonna

100
00:04:52.550 --> 00:04:58.696
be mongoose.Schema with a capital S
.Types with a capital T .ObjectId.

101
00:04:58.696 --> 00:04:59.327
It's really long.

102
00:04:59.327 --> 00:05:06.480
Basically every id in Mongoose or
in Mongo really is called an object id.

103
00:05:06.480 --> 00:05:10.419
It's technically an object, but
at read time it's really a string,

104
00:05:10.419 --> 00:05:15.055
that's how they treat their IDs, so we're
saying this owner, its type is an ID.

105
00:05:15.055 --> 00:05:18.267
But that alone is not good enough so
what we do is we say

106
00:05:18.267 --> 00:05:23.019
ref imagine we have some owner model
somewhere, reference the owner model.

107
00:05:23.019 --> 00:05:27.829
So this tells the mongoose is when we call
populate, I'm like hey, I wanna get a pet

108
00:05:27.829 --> 00:05:32.465
whose name is Gary, and I want to also
get their owner, and populate the owner.

109
00:05:32.465 --> 00:05:35.769
So it'll go get Gary,
it'll get us the name, the isOld.

110
00:05:35.769 --> 00:05:39.969
And then for owner instead of giving
us back an ID, it'll take this ID,

111
00:05:39.969 --> 00:05:44.317
go to the owner's model, and get
the owner with that ID, and put it here.

112
00:05:44.317 --> 00:05:48.510
So this owner would no longer be an ID,
it'll be an object of the owner.

113
00:05:48.510 --> 00:05:50.811
Gonna populate it at runtime.

114
00:05:50.811 --> 00:05:53.126
So that's how you would reference
other shapes in the database.

115
00:05:53.126 --> 00:05:55.277
It's a reference so you got that.

116
00:05:55.277 --> 00:06:01.983
You can also do things like, let me see.

117
00:06:01.983 --> 00:06:06.837
You can say faveFoods and
this is an array of strings.

118
00:06:06.837 --> 00:06:09.200
So now you got favorite foods.

119
00:06:09.200 --> 00:06:12.281
I mean there's a lot of
things you can do here,

120
00:06:12.281 --> 00:06:16.473
you can do geospacial indexes,
you can do custom validators.

121
00:06:16.473 --> 00:06:20.387
There's a lot of stuff, we really
won't get into all of that, but yeah,

122
00:06:20.387 --> 00:06:23.306
this is the basics of creating
a schema with Mongoose.

123
00:06:23.306 --> 00:06:27.757
So you would take that schema then you
would pass it into mongoose.Schema and

124
00:06:27.757 --> 00:06:29.890
you'll get back a mongoose schema.

125
00:06:29.890 --> 00:06:33.982
Mongoose has to validate that this
is real, and yeah, cool, yeah, yeah,

126
00:06:33.982 --> 00:06:36.162
we like that, we like that, here you go.

127
00:06:36.162 --> 00:06:38.891
Then you take that schema and
you exchange it for a model.

128
00:06:38.891 --> 00:06:43.189
This method right here mongoose.model,
if you just pass it in without a schema,

129
00:06:43.189 --> 00:06:45.510
it'll try to retrieve a model called song.

130
00:06:45.510 --> 00:06:48.555
If you pass it in with a schema
it'll set a model called song,

131
00:06:48.555 --> 00:06:50.121
so it's a getter and a setter.

132
00:06:50.121 --> 00:06:53.012
So without the schema
it'll try to retrieve it,

133
00:06:53.012 --> 00:06:56.196
with the schema it'll try to set it,
remember that.

134
00:06:56.196 --> 00:06:59.628
There's also stuff we can do here,
we can do hooks,

135
00:06:59.628 --> 00:07:02.595
we can do custom methods and
stuff like that.

136
00:07:02.595 --> 00:07:05.690
For instance if I wanted
to say you know what,

137
00:07:05.690 --> 00:07:10.512
I wanna do something every time
before this song schema is validated.

138
00:07:10.512 --> 00:07:12.690
So I can say song schema, not you.

139
00:07:12.690 --> 00:07:14.443
.pre('validate').

140
00:07:14.443 --> 00:07:18.846
And this function will run before
every time the schema is validated.

141
00:07:18.846 --> 00:07:23.750
So before any error's thrown because
you didn't pass in the right type or

142
00:07:23.750 --> 00:07:27.640
you didn't meet the validations
I can run this function.

143
00:07:27.640 --> 00:07:30.231
You can also do pre save,
post save, pre find one and update.

144
00:07:30.231 --> 00:07:33.400
There's a lot of different trade
offs between what you're doing.

145
00:07:33.400 --> 00:07:34.311
But yeah, these are hooks.

146
00:07:34.311 --> 00:07:38.390
So this is really great to do things
like subscribing to data via web hooks.

147
00:07:38.390 --> 00:07:42.501
The data changed, send a update to
everybody subscribed on this web hook or

148
00:07:42.501 --> 00:07:43.751
something like that.

149
00:07:43.751 --> 00:07:47.774
So it's really cool, send off an email
notification or whatever you want to do.

150
00:07:47.774 --> 00:07:49.016
A lot of different stuff
you can do inside of it.

151
00:07:49.016 --> 00:07:49.635
It's really cool.

