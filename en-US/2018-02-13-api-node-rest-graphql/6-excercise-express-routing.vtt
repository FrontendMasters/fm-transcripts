WEBVTT

1
00:00:00.050 --> 00:00:01.819
&gt;&gt; Scott Moss: The challenge we're
gonna be doing is we're gonna be

2
00:00:01.819 --> 00:00:02.534
setting up routing.

3
00:00:02.534 --> 00:00:05.182
And basically,
what you need to do for this one is,

4
00:00:05.182 --> 00:00:07.098
I'm just gonna walk you through it.

5
00:00:07.098 --> 00:00:08.892
I'm just gonna get, stash this, actually,

6
00:00:08.892 --> 00:00:11.035
I'll leave this up cuz I
think it'll be very helpful.

7
00:00:11.035 --> 00:00:13.036
Will this be helpful, to see this?

8
00:00:13.036 --> 00:00:15.640
Okay, I'll leave this stuff up actually.

9
00:00:15.640 --> 00:00:19.808
So what we're gonna do,
is if you navigate over to API.

10
00:00:19.808 --> 00:00:23.400
You'll see tons of stuff in here,
don't worry about it.

11
00:00:23.400 --> 00:00:27.711
But you should see a file
called restRouter.

12
00:00:27.711 --> 00:00:32.742
Right now restRouter is, there's one
example here that you can follow,

13
00:00:32.742 --> 00:00:37.383
and you're gonna use the example
to build out the other end points.

14
00:00:37.383 --> 00:00:41.540
But basically, the API that we're
gonna be making is a music API.

15
00:00:41.540 --> 00:00:45.350
There's songs, there's playlists,
and there's users.

16
00:00:45.350 --> 00:00:47.934
&gt;&gt; Scott Moss: Right now,
you can follow the example that I have for

17
00:00:47.934 --> 00:00:48.823
the userRouter.

18
00:00:48.823 --> 00:00:53.348
So basically what I'm doing here
is I'm creating a sub-router

19
00:00:53.348 --> 00:00:55.290
inside of the restRouter.

20
00:00:55.290 --> 00:00:58.957
And the reason I called it restRouter is
because we're gonna make a GraphQL router

21
00:00:58.957 --> 00:00:59.499
tomorrow.

22
00:00:59.499 --> 00:01:02.217
Any other way I would not
call it a restRouter, so

23
00:01:02.217 --> 00:01:04.946
if you think the name is
ridiculous that's why.

24
00:01:04.946 --> 00:01:06.768
[LAUGH] I'm separating the two for
tomorrow.

25
00:01:06.768 --> 00:01:09.684
So this is our restRouter and
I made a new one.

26
00:01:09.684 --> 00:01:12.572
And I'm mounting another sub-router on

27
00:01:12.572 --> 00:01:15.962
that sub-router underneath
the user's path.

28
00:01:15.962 --> 00:01:20.629
So basically,
what you would need to do is, one,

29
00:01:20.629 --> 00:01:24.520
first thing first is
you need to mount that

30
00:01:24.520 --> 00:01:28.870
restRouter on the api path on the app,
right?

31
00:01:28.870 --> 00:01:35.639
So inside of this server.js,
you need to mount the api router on the,

32
00:01:35.639 --> 00:01:40.018
I'm sorry, the restRouter, get it right.

33
00:01:40.018 --> 00:01:41.998
On the /api path.

34
00:01:45.317 --> 00:01:48.240
&gt;&gt; Scott Moss: So mount the restRouter on
the /api path, that's the first thing.

35
00:01:48.240 --> 00:01:51.979
And then if you go look at
that restRouter, like I said,

36
00:01:51.979 --> 00:01:54.696
this user example is fully fleshed out.

37
00:01:54.696 --> 00:01:59.346
You're gonna do the same thing for
songRouter and playlistRouter.

38
00:01:59.346 --> 00:02:03.189
We need two different mounts for
those, so we should be able to access

39
00:02:03.189 --> 00:02:06.322
the playlistRouter underneath
the /playlist mount.

40
00:02:06.322 --> 00:02:10.815
We should be able to access
the songRouter underneath the /song mount.

41
00:02:10.815 --> 00:02:14.226
And then if you actually go look
at those individual routers, for

42
00:02:14.226 --> 00:02:17.585
instance let's go look at the user
router in resources/user.

43
00:02:18.910 --> 00:02:22.171
So resources/user inside the index file,

44
00:02:22.171 --> 00:02:26.408
you'll see that it's just
pointing to the restRouter.

45
00:02:26.408 --> 00:02:29.327
So if you go to the restRouter there,
you'll see here,

46
00:02:29.327 --> 00:02:31.452
you see some pretty crazy stuff in here.

47
00:02:31.452 --> 00:02:34.414
Now I'm just gonna walk
through this stuff briefly.

48
00:02:34.414 --> 00:02:37.881
And I didn't really wanna talk about it
because I want I wanted to give you enough

49
00:02:37.881 --> 00:02:41.114
for you to figure out what's going on
here, and I think I gave you enough.

50
00:02:41.114 --> 00:02:45.262
But basically, this is a fully fleshed
out sub-router for the user resource.

51
00:02:45.262 --> 00:02:49.820
You're gonna use this again as example
to flesh out the routers for the song.

52
00:02:49.820 --> 00:02:52.144
If you go look at the song REST router,
it's empty.

53
00:02:52.144 --> 00:02:56.054
If you go look at the playlist
REST router, it's also empty.

54
00:02:56.054 --> 00:02:59.381
But it's gonna look pretty much
identical to the userRouter,

55
00:02:59.381 --> 00:03:01.410
just using it's own router.

56
00:03:01.410 --> 00:03:02.149
So let's walk through here.

57
00:03:02.149 --> 00:03:04.380
I didn't talk about param.

58
00:03:04.380 --> 00:03:09.234
Param is basically a way that we
can tell our router or express,

59
00:03:09.234 --> 00:03:13.173
and say, hey somebody comes
in here with the URL and

60
00:03:13.173 --> 00:03:17.034
it has a param on it,
like id, run this function.

61
00:03:17.034 --> 00:03:18.560
That's what it's saying.

62
00:03:18.560 --> 00:03:21.811
This function allows us to pick
off the parameter in the URL,

63
00:03:21.811 --> 00:03:24.824
do something with it, and
send it back down the router.

64
00:03:24.824 --> 00:03:29.280
So this doesn't respond to the request,
it does something with that parameter.

65
00:03:29.280 --> 00:03:34.018
Usually like for instance,
let's say you wanna get user/1, right?

66
00:03:34.018 --> 00:03:37.949
This is gonna take that 1 parameter,
go to the user database,

67
00:03:37.949 --> 00:03:39.664
grab the user with id of 1.

68
00:03:39.664 --> 00:03:41.974
Attach it to the request, call next, and

69
00:03:41.974 --> 00:03:44.485
send it down to the next
thing that's there.

70
00:03:44.485 --> 00:03:47.183
So that's what it's doing.

71
00:03:47.183 --> 00:03:50.870
This is like a middleware almost, but
we haven't really talked about middleware.

72
00:03:50.870 --> 00:03:53.724
So you don't really need to know what
any of these functions are doing.

73
00:03:53.724 --> 00:03:55.250
You can just put them there.

74
00:03:55.250 --> 00:03:56.528
Don't worry about it, they'll work.

75
00:03:56.528 --> 00:03:57.950
We gonna get to these functions later.

76
00:03:57.950 --> 00:04:01.060
But basically, you just need to set
up the routes and the handlers.

77
00:04:02.200 --> 00:04:04.646
The other thing is, is this shortcut
here that I did not talk about.

78
00:04:04.646 --> 00:04:07.609
I also did not talk about this cuz I
didn't want you to use a shortcut, but

79
00:04:07.609 --> 00:04:09.518
if you understand it,
you can totally use it.

80
00:04:09.518 --> 00:04:14.050
This shortcut on any router allows
you to use the .route method.

81
00:04:14.050 --> 00:04:15.844
And it's just a shortcut so
you don't have to do this.

82
00:04:15.844 --> 00:04:18.673
If we didn't use a .route,
we'd have to say userRouter.

83
00:04:18.673 --> 00:04:23.875
Let's say userRouter('/') or
userRouter.get('/'), and then

84
00:04:23.875 --> 00:04:29.402
you'll have to do userRouter.post('/'),
it's the same route, right?

85
00:04:29.402 --> 00:04:33.176
We're gonna eventually do
two different controllers,

86
00:04:33.176 --> 00:04:38.210
these are gonna be two different
actions here, but on the same route.

87
00:04:38.210 --> 00:04:42.726
So .post allows you to, I'm sorry, .route
allows you to say hey, for this route,

88
00:04:42.726 --> 00:04:45.251
I wanna do this get,
do this get, do this post.

89
00:04:45.251 --> 00:04:49.180
You don't have to define the route twice,
that's all it's doing, so it's chainable.

90
00:04:49.180 --> 00:04:52.617
So you can say, hey, for index and
for get, I wanna do that.

91
00:04:52.617 --> 00:04:54.695
For index and post, I wanna do that.

92
00:04:54.695 --> 00:04:57.124
The same thing for this route right here,
which is a parameter.

93
00:04:57.124 --> 00:05:01.052
So for a /:id, get, post, delete, right?

94
00:05:01.052 --> 00:05:06.400
So again,
this is a fully fleshed out userRouter.

95
00:05:06.400 --> 00:05:13.368
And you need to flesh out
the songRouter and the playlistRouter.

96
00:05:13.368 --> 00:05:17.904
And then you also need to hook
them up in the restRouter.js file,

97
00:05:17.904 --> 00:05:22.047
very similar to what's going
on here with the userRouter.

98
00:05:22.047 --> 00:05:27.953
And then finally, you need to hook
up the REST router to the app.

99
00:05:27.953 --> 00:05:30.360
Right, so you've got five things to do.

100
00:05:30.360 --> 00:05:33.100
Build out the songRouter,
build out the playlistRouter.

101
00:05:34.650 --> 00:05:40.086
Attach the songRouter to the restRouter,
attach the playlistRouter

102
00:05:40.086 --> 00:05:44.609
to the restRouter and
then attach the restRouter to that.

103
00:05:44.609 --> 00:05:47.800
And the userRouter is a full
example of how to do all of it.

104
00:05:47.800 --> 00:05:50.091
So you can look at that,
experiment with it.

105
00:05:50.091 --> 00:05:53.360
There's definitely some stuff in
there that I not teach you about.

106
00:05:53.360 --> 00:05:56.152
But I want you to play with it,
and see what you can think of.

107
00:05:56.152 --> 00:05:58.146
Cuz then we'll walk through it and

108
00:05:58.146 --> 00:06:01.802
I wanna see how you all think it works,
or how you know it works.

109
00:06:01.802 --> 00:06:04.400
&gt;&gt; Speaker 2: Is this lesson
two in the Git check out?

110
00:06:04.400 --> 00:06:06.377
&gt;&gt; Scott Moss: Yes,
this is lesson two, sorry.

111
00:06:06.377 --> 00:06:07.748
Yeah, check out on lesson two.

112
00:06:07.748 --> 00:06:10.043
&gt;&gt; Speaker 2: It looks like it
cares about Mongo on this lesson.

113
00:06:10.043 --> 00:06:11.590
&gt;&gt; Scott Moss: It cares
about Mongo on this lesson?

114
00:06:11.590 --> 00:06:14.474
Okay, so make sure you have
Mongo running on this one.

115
00:06:16.250 --> 00:06:17.932
&gt;&gt; Scott Moss: Yeah, just make sure you
have Mongo running, you should be fine.

116
00:06:17.932 --> 00:06:21.725
If you don't have Mongo, then what you
need to do is you need to go into,

117
00:06:21.725 --> 00:06:23.074
first need to go to mLab.

118
00:06:23.074 --> 00:06:26.183
So if you don't have Mongo,
set up one on mLab, it's free.

119
00:06:26.183 --> 00:06:28.741
And let me check out here and
show you where you gotta add your code.

120
00:06:34.790 --> 00:06:39.469
&gt;&gt; Scott Moss: So yeah, make a Mongo
thing, and then go into db.js, and

121
00:06:39.469 --> 00:06:42.156
just add in your Mongo URL there.

122
00:06:42.156 --> 00:06:45.884
If you have Mongo just start it up,
you're fine.

123
00:06:45.884 --> 00:06:49.526
If you don't have Mongo,
go to mLab, create a free database,

124
00:06:49.526 --> 00:06:54.364
get the URL, the connection stream,
go to db.js and add it there.

125
00:06:54.364 --> 00:06:59.630
&gt;&gt; Scott Moss: If you don't feel like
doing all that, that's totally fine.

126
00:06:59.630 --> 00:07:03.102
You can also just go to server.js and
see online, where it says connect,

127
00:07:03.102 --> 00:07:07.078
where it's invoking that function it says
connect, you can just comment that out.

128
00:07:07.078 --> 00:07:10.765
That connects to the database,
you don't need it in this example.

129
00:07:10.765 --> 00:07:12.780
So you can also just comment that out.

130
00:07:12.780 --> 00:07:14.023
We're not at databases right now.

