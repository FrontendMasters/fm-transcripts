WEBVTT

1
00:00:03.417 --> 00:00:06.443
&gt;&gt; Scott Moss: So here's just some
points on GraphQL versus REST,

2
00:00:06.443 --> 00:00:08.100
this is not a complete list.

3
00:00:08.100 --> 00:00:11.810
And these are mostly just my opinions,
some of them are facts.

4
00:00:11.810 --> 00:00:16.900
GraphQL, on the left, we have one route,
it's not based on HTTP verbs.

5
00:00:16.900 --> 00:00:20.382
So you won't be posting,
deleting, getting, putting,

6
00:00:20.382 --> 00:00:22.270
you won't be doing any of that.

7
00:00:22.270 --> 00:00:25.336
It's mostly just post, sometimes get,
depending on what client you're using, but

8
00:00:25.336 --> 00:00:26.476
it's usually just post or get.

9
00:00:26.476 --> 00:00:30.996
And obviously there's an options
request if you're doing course, but

10
00:00:30.996 --> 00:00:33.300
that has nothing to do with GraphQL.

11
00:00:33.300 --> 00:00:37.181
Strict data typing, so like I said,
you can think of it as like TypeScript for

12
00:00:37.181 --> 00:00:37.729
your API.

13
00:00:37.729 --> 00:00:40.361
So everything has to go
through that schema and

14
00:00:40.361 --> 00:00:42.730
it's going to be checked by that schema.

15
00:00:42.730 --> 00:00:46.966
And, if it doesn't match, that's not
even going to invoke your resolvers.

16
00:00:46.966 --> 00:00:50.419
Interactive docs, as you'll see soon,
right out of the box,

17
00:00:50.419 --> 00:00:51.930
you get interactive docs.

18
00:00:51.930 --> 00:00:56.636
Because everything is strictly typed,
we can do introspection on the schema,

19
00:00:56.636 --> 00:00:59.950
which allows us to see every
single type inside our API.

20
00:00:59.950 --> 00:01:05.602
Which allows us to visualize it and have
documentation that we can explore freely.

21
00:01:05.602 --> 00:01:07.454
Works well with the component
architecture, and in fact,

22
00:01:07.454 --> 00:01:08.535
that's where GraphQL came from.

23
00:01:08.535 --> 00:01:10.117
When Facebook created it,

24
00:01:10.117 --> 00:01:15.020
they had component architecture with their
React Apps and their React Native Apps.

25
00:01:15.020 --> 00:01:17.904
And whatever they had, and
REST was just falling apart.

26
00:01:17.904 --> 00:01:21.031
So they decided to build something
with the perspective of a component

27
00:01:21.031 --> 00:01:23.470
architecture, and
that's where GraphQL came from.

28
00:01:24.800 --> 00:01:28.778
Advanced data resolving, so like I said,
controllers yesterday are like,

29
00:01:28.778 --> 00:01:31.420
I'm going to resolve something for
this request.

30
00:01:31.420 --> 00:01:35.700
Resolvers are like, I'm going to resolve
something for the shape of this field.

31
00:01:35.700 --> 00:01:36.921
For this one thing, and

32
00:01:36.921 --> 00:01:41.210
then a combination of those resolvers ends
up being the response from your server.

33
00:01:41.210 --> 00:01:44.558
Now, the word graph in
GraphQL signifies something,

34
00:01:44.558 --> 00:01:48.212
it's because you're kind of
building a pseudo Graph API.

35
00:01:48.212 --> 00:01:53.350
It's not a real Graph API unless you're
using something like Relay or something.

36
00:01:53.350 --> 00:01:57.460
But basically, it allows you to make
associations on the fly, right?

37
00:01:57.460 --> 00:01:59.881
So if you think about
a relational database,

38
00:01:59.881 --> 00:02:02.120
you set up those relations ahead of time.

39
00:02:02.120 --> 00:02:04.891
Right, you're like, this thing relates
to this, I'm going to have a table,

40
00:02:04.891 --> 00:02:05.800
I'm going to do populate.

41
00:02:05.800 --> 00:02:08.990
You set that up ahead of time,
where GraphQL, you can do that at runtime.

42
00:02:08.990 --> 00:02:13.290
It depends on, as long as everything
eventually resolves to something.

43
00:02:13.290 --> 00:02:15.815
You can query it however
you want to query it, and

44
00:02:15.815 --> 00:02:18.470
those queries might not be
the way you define them.

45
00:02:18.470 --> 00:02:22.284
Like in REST, you predefine how something
is going to respond to something.

46
00:02:22.284 --> 00:02:26.527
In GraphQL, it can respond dynamically
as long as you set the resolvers up to

47
00:02:26.527 --> 00:02:28.970
resolve to something eventually.

48
00:02:28.970 --> 00:02:33.370
That sounds confusing but
basically all it means is you have a tree.

49
00:02:33.370 --> 00:02:37.489
And if you resolve every single leaf,
then anybody can query your tree and

50
00:02:37.489 --> 00:02:39.630
eventually get some type of shape.

51
00:02:39.630 --> 00:02:42.403
And that shape that you query might be
different than the shape that I query.

52
00:02:42.403 --> 00:02:46.192
But at the end of the day, everything
resolved down to the lowest point of

53
00:02:46.192 --> 00:02:49.190
a leaf of a tree, and
that's basically what GraphQL is.

54
00:02:49.190 --> 00:02:52.914
Whereas REST is like, you have to
predefine those branches and that's it,

55
00:02:52.914 --> 00:02:55.080
you can't explore and get dynamic with it.

56
00:02:55.080 --> 00:02:58.770
So REST has many routes,
it's based on HTTP verbs.

57
00:02:58.770 --> 00:03:02.250
I did put one benefit of REST here,
this is a little advanced, but

58
00:03:02.250 --> 00:03:04.227
it's cacheable on a network level.

59
00:03:04.227 --> 00:03:08.710
GraphQL, one of the downsides,
it's not cacheable on a network level.

60
00:03:08.710 --> 00:03:10.694
And what I mean by that is,
so normally for

61
00:03:10.694 --> 00:03:14.569
us, you would probably cache something
on a CDN level, or something like that.

62
00:03:14.569 --> 00:03:19.350
You could do that with GraphQL, but you'd
probably just have a lot of cache misses.

63
00:03:19.350 --> 00:03:24.045
Because, if you think about REST, REST,
when it uses caches on a network level,

64
00:03:24.045 --> 00:03:26.920
it's probably using the URL as a digest,
right?

65
00:03:26.920 --> 00:03:30.620
To do the caching, well, in GraphQL,
because you only have one URL,

66
00:03:30.620 --> 00:03:33.800
the digest is probably the query
that you're setting up.

67
00:03:33.800 --> 00:03:36.711
Depending on if it's a post or not, so
now you've got to digest on that, and

68
00:03:36.711 --> 00:03:37.950
most CDMs don't support that.

69
00:03:37.950 --> 00:03:41.870
Some CDMs do support digesting
on the body and stuff like that.

70
00:03:41.870 --> 00:03:46.158
But even then, somebody can ask for the
exact same thing with one thing slightly

71
00:03:46.158 --> 00:03:48.470
different and
then it will be a cache miss.

72
00:03:48.470 --> 00:03:50.607
So, to take advantage of GraphQL caching,

73
00:03:50.607 --> 00:03:53.160
you'll probably do
application-level caching.

74
00:03:53.160 --> 00:03:56.376
A lot of Reddits, a lot of Memcached,
a lot of request time caching, so

75
00:03:56.376 --> 00:03:57.780
there's other limitations.

76
00:03:57.780 --> 00:04:01.368
But taking advantage of the network-level
caching is something that GraphQL doesn't

77
00:04:01.368 --> 00:04:02.733
really have a good story for yet.

