WEBVTT

1
00:00:01.477 --> 00:00:03.361
&gt;&gt; Scott Moss: Cool,
let's hop right into the next thing.

2
00:00:06.069 --> 00:00:10.066
&gt;&gt; Scott Moss: MongoDB and data
persistence, who here has used MongoDB?

3
00:00:10.066 --> 00:00:15.574
Dang, okay, well, let's just skip this
one and go to the next, okay, I'm sorry.

4
00:00:15.574 --> 00:00:17.790
If everybody used Mongo then
this one shouldn't be so bad.

5
00:00:17.790 --> 00:00:20.254
I guess the learnings you
might receive here is like,

6
00:00:20.254 --> 00:00:23.310
how to best use it with Express and
where to use it.

7
00:00:23.310 --> 00:00:24.791
And maybe any opinions
that I might have on it.

8
00:00:24.791 --> 00:00:27.988
But if anybody here has used it,
people don't mind if you use it,

9
00:00:27.988 --> 00:00:30.095
then you should get
a little bit from this.

10
00:00:30.095 --> 00:00:34.840
So MongoDB is a No-SQL document store
to store our application's data,

11
00:00:34.840 --> 00:00:36.223
what does that mean?

12
00:00:36.223 --> 00:00:38.655
It's just a database that doesn't have,

13
00:00:38.655 --> 00:00:42.183
it's a non relational database
that is not SQL, basically.

14
00:00:42.183 --> 00:00:46.525
It's meant to just store JSON,
just store JSON in it.

15
00:00:46.525 --> 00:00:49.114
It'll create collections for
those JSON stores, and

16
00:00:49.114 --> 00:00:52.274
then you can query them with
actually pretty good query language.

17
00:00:52.274 --> 00:00:55.409
I think that's the really good thing
about Mongo is that the query language is

18
00:00:55.409 --> 00:00:55.998
really good.

19
00:00:55.998 --> 00:01:00.071
It's based off JavaScript, it's pretty
simple, very flexible, easy to store data,

20
00:01:00.071 --> 00:01:00.790
easy to query.

21
00:01:00.790 --> 00:01:04.290
And it is schemaless,
MongoDB is schemaless.

22
00:01:04.290 --> 00:01:08.897
Now, Mongoose, the ODM or the ORM
document, the object document model or

23
00:01:08.897 --> 00:01:10.664
the object relational map.

24
00:01:10.664 --> 00:01:14.951
Or whatever you want to call it,
is the go-to ODM for MongoDB.

25
00:01:14.951 --> 00:01:17.909
There's some other ones out there,
but Mongoose is the champion.

26
00:01:17.909 --> 00:01:21.285
If you go to the MongoDB websites,
they'll tell you to use Mongoose,

27
00:01:21.285 --> 00:01:23.585
everywhere is basically
saying use Mongoose.

28
00:01:23.585 --> 00:01:27.705
And Mongoose is actually pretty good,
it's inspired other ODMs,

29
00:01:27.705 --> 00:01:29.956
ORMs to adopt their query language.

30
00:01:29.956 --> 00:01:33.727
It's one of the most
flexible query ODMs or

31
00:01:33.727 --> 00:01:37.717
ORMs that I've seen pretty much for
a while.

32
00:01:37.717 --> 00:01:41.019
It does provide schemas for saving data.

33
00:01:41.019 --> 00:01:44.173
Even though Mongo doesn't have schemas,
when you use Mongoose,

34
00:01:44.173 --> 00:01:46.380
you do have schemas,
so that's really cool.

35
00:01:46.380 --> 00:01:49.410
It has things like validations,
things you would expect from schemas.

36
00:01:49.410 --> 00:01:53.021
This needs to be required, this has
a min length, this must be this type,

37
00:01:53.021 --> 00:01:55.895
it has those validations built in,
which is really cool.

38
00:01:55.895 --> 00:02:00.000
The Querying API is an abstraction
over the MongoDB Querying API, so

39
00:02:00.000 --> 00:02:01.219
it's even better.

40
00:02:01.219 --> 00:02:05.179
It's promise based,
you can do some pretty advanced stuff.

41
00:02:05.179 --> 00:02:10.360
And then you can also drill down and
do native Mongo driver things as well.

42
00:02:10.360 --> 00:02:14.399
Lifecycle hooks, so like on save,
on update, after update, pre save,

43
00:02:14.399 --> 00:02:18.069
all that stuff, you can do
different things, it's really cool.

44
00:02:18.069 --> 00:02:21.989
And then, one of the best features I
think is the run time join tables,

45
00:02:21.989 --> 00:02:25.452
which are populations,
anybody know what populations are?

46
00:02:25.452 --> 00:02:28.999
Okay, so
who here has used a relational database?

47
00:02:28.999 --> 00:02:30.821
All right, so
you know what join tables are, right?

48
00:02:30.821 --> 00:02:35.800
You have a join table, right, using
relations, Mongo doesn't have join tables.

49
00:02:35.800 --> 00:02:37.915
Mongoose doesn't have join tables,
but they emulate it,

50
00:02:37.915 --> 00:02:39.369
they do something called populations.

51
00:02:39.369 --> 00:02:44.070
So basically, let's say I have
a person and I want to associate

52
00:02:44.070 --> 00:02:48.968
this person with some friends,
which are other people, right?

53
00:02:48.968 --> 00:02:52.400
You wouldn't make a join table for that
like you would in a relational database.

54
00:02:52.400 --> 00:02:55.875
Instead, what you would do is you would
just store a reference to it with an ID.

55
00:02:55.875 --> 00:02:59.329
Very similar to a relational database,
you'd have your key ID or whatever.

56
00:02:59.329 --> 00:03:03.406
You would store a reference and say,
hey, this user has a list of friends and

57
00:03:03.406 --> 00:03:04.759
here are their user IDs.

58
00:03:04.759 --> 00:03:07.119
It's just an array of user IDs, right?

59
00:03:07.119 --> 00:03:10.163
And then when you query that user, and
you want to get that user's friends,

60
00:03:10.163 --> 00:03:12.172
by default,
you usually get back an array of IDs.

61
00:03:12.172 --> 00:03:14.015
You're like, cool, cool story,
what do I do with this?

62
00:03:14.015 --> 00:03:16.615
And I've got to loop through this
array and get all the friends, right?

63
00:03:16.615 --> 00:03:19.559
Well, populate, what it does is
it does that for you at runtime.

64
00:03:19.559 --> 00:03:23.618
Sort of like, cool, I'm going to take
this array of user IDs, and for each one,

65
00:03:23.618 --> 00:03:26.098
I'm going to go populate
it with an actual user.

66
00:03:26.098 --> 00:03:29.533
So it's going to join it at runtime for
you, so

67
00:03:29.533 --> 00:03:32.714
it's like a runtime emulated join table.

68
00:03:32.714 --> 00:03:35.968
It's not saved that way,
it's given to you that way.

69
00:03:35.968 --> 00:03:40.160
It's like a virtual join table, if you
will, so it's really cool, very powerful.

70
00:03:40.160 --> 00:03:45.704
You can join per property, sub properties,
I think it's really flexible and

71
00:03:45.704 --> 00:03:50.333
yeah, without it, Mongo and
Mongoose would be pretty garbage.

