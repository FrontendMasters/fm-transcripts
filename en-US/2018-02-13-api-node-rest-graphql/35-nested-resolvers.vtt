WEBVTT

1
00:00:03.570 --> 00:00:06.090
&gt;&gt; Scott: The second thing is, and
we're gonna get to in a minute,

2
00:00:06.090 --> 00:00:07.690
is nested resolvers.

3
00:00:07.690 --> 00:00:12.710
And nested resolvers
are basically like this.

4
00:00:12.710 --> 00:00:16.910
So let's say I want to,
let's go back to our user here,

5
00:00:16.910 --> 00:00:21.040
let's say I want to resolve friends.

6
00:00:21.040 --> 00:00:25.290
I wanna get a list of friends for my user,
and they're all just gonna be strange,

7
00:00:25.290 --> 00:00:26.770
let's keep it simple for now.

8
00:00:26.770 --> 00:00:28.120
And it's a nominal array.

9
00:00:29.590 --> 00:00:31.850
Do I have friends anywhere on here?

10
00:00:31.850 --> 00:00:33.000
Sure, I could just add friends.

11
00:00:33.000 --> 00:00:34.330
I can just add it right here, right?

12
00:00:34.330 --> 00:00:36.870
I can just put in friends and
it would totally work.

13
00:00:36.870 --> 00:00:39.950
But we're gonna use a nested
resolver here to resolve this,

14
00:00:39.950 --> 00:00:42.730
assuming friends come from
the database somewhere.

15
00:00:42.730 --> 00:00:47.310
If we were to resolve friends here,
we would be very wasteful.

16
00:00:47.310 --> 00:00:53.090
That's because we only want to send
back the friends when someone asks for

17
00:00:53.090 --> 00:00:54.550
the friends, right?

18
00:00:54.550 --> 00:00:59.360
And if we were to resolve
the friends inside of this resolver,

19
00:00:59.360 --> 00:01:02.180
we would never know if you asked for
the friends,

20
00:01:02.180 --> 00:01:05.930
unless we looked at this AST which I
said that you should never look at.

21
00:01:05.930 --> 00:01:09.400
So we could rely on GraphQL to determine
if someone asked for a friend.

22
00:01:09.400 --> 00:01:11.710
And we can do that by
setting up a nested resolver.

23
00:01:11.710 --> 00:01:15.690
So a nested resolver's only gonna run
when someone asks for that field, right?

24
00:01:15.690 --> 00:01:17.640
So if you didn't ask for
the friends field,

25
00:01:17.640 --> 00:01:21.380
this function that we're about to write
won't even execute, so it's not wasteful.

26
00:01:21.380 --> 00:01:23.430
But if we'd executed it up here,
it's gonna run every single time,

27
00:01:23.430 --> 00:01:24.320
even though you didn't ask for it.

28
00:01:25.550 --> 00:01:29.688
So if we come down here if we want to
write a nested resolver, we want to write,

29
00:01:29.688 --> 00:01:34.170
we want to tell GraphQL how to resolve
the friends field on the user type.

30
00:01:34.170 --> 00:01:38.180
So just like we tell GraphQL how to
resolve the getMe field on the Query type,

31
00:01:38.180 --> 00:01:39.560
we would do the same thing.

32
00:01:39.560 --> 00:01:44.380
So for the User type we're gonna tell
GraphQL how to resolve the friends field.

33
00:01:46.248 --> 00:01:47.080
&gt;&gt; Scott: Does that make sense?

34
00:01:49.040 --> 00:01:50.890
So knowing that,
all you gotta do is write a function and

35
00:01:50.890 --> 00:01:54.920
the syntax is exactly the same as this,
rootValue, arg, context, info.

36
00:01:54.920 --> 00:01:57.580
Now remember when I said nested
resolver that rootValue's actually

37
00:01:57.580 --> 00:01:58.630
gonna be something?

38
00:01:58.630 --> 00:01:59.600
In this case it is.

39
00:01:59.600 --> 00:02:02.540
It's gonna be the branch
from which it branched from.

40
00:02:02.540 --> 00:02:04.440
So where did this friends branch from?

41
00:02:04.440 --> 00:02:06.590
What is the type above it?

42
00:02:06.590 --> 00:02:07.460
&gt;&gt; Speaker 2: User.
&gt;&gt; Scott: Exactly.

43
00:02:07.460 --> 00:02:09.020
So this first argument is user.

44
00:02:09.020 --> 00:02:10.850
It's the user that these
friends belong to.

45
00:02:10.850 --> 00:02:12.520
That's the root value.

46
00:02:12.520 --> 00:02:16.540
The second argument is the same args that
may have or may have not been passing.

47
00:02:16.540 --> 00:02:21.380
In this case, there are no args, but guess
what, you can pass in args to fields.

48
00:02:21.380 --> 00:02:23.110
It's pretty crazy,
you can totally do that.

49
00:02:23.110 --> 00:02:26.950
There's nothing stopping you from saying,
this friends also takes in sorting.

50
00:02:26.950 --> 00:02:28.310
I want to sort these friends.

51
00:02:28.310 --> 00:02:29.420
You can totally do that, and

52
00:02:29.420 --> 00:02:33.750
those args will be right here.
&gt;&gt; Scott: But we're not gonna do that.

53
00:02:33.750 --> 00:02:35.160
So you'll have args here.

54
00:02:35.160 --> 00:02:36.218
We don't need args.

55
00:02:36.218 --> 00:02:39.550
And then now that we have that user,
you would say, okay, cool.

56
00:02:39.550 --> 00:02:44.676
Query the DB for friends of

57
00:02:44.676 --> 00:02:49.730
this user.
&gt;&gt; Scott: Right?

58
00:02:49.730 --> 00:02:51.329
But we're just gonna return
back an array of strings.

59
00:03:00.760 --> 00:03:01.740
&gt;&gt; Scott: Cool, so

60
00:03:01.740 --> 00:03:06.340
that should satisfy our schema
which is just an array of strings.

61
00:03:06.340 --> 00:03:08.270
We're just returning an array of strings,
right?

62
00:03:08.270 --> 00:03:11.120
So now let's actually execute this.

63
00:03:11.120 --> 00:03:14.160
And you refresh the graphical, so
we can make sure that that worked.

64
00:03:14.160 --> 00:03:16.175
So if we look at Query, we click at User,

65
00:03:16.175 --> 00:03:19.860
we see friends there now,
which is an array of strings.

66
00:03:21.260 --> 00:03:27.719
And now if I say, I wanna getMe.
&gt;&gt; Scott: So

67
00:03:27.719 --> 00:03:33.180
getMe, I wanna get the ID,
I wanna also get friends.

68
00:03:33.180 --> 00:03:36.440
And if I hit that, you can see,
I get back my array of friends.

69
00:03:36.440 --> 00:03:38.670
Now, I'm just gonna show
you how this works.

70
00:03:38.670 --> 00:03:40.160
I'm gonna put a log in here.

71
00:03:40.160 --> 00:03:44.790
This is a very important part.
&gt;&gt; Scott: We'll put a log in here for

72
00:03:44.790 --> 00:03:49.470
in friends, and then when I run
this query with the asking for

73
00:03:49.470 --> 00:03:54.800
friends, you can see that the log
definitely runs, it's in friends, okay?

74
00:03:54.800 --> 00:03:57.065
Now I'm gonna clear the log.

75
00:03:57.065 --> 00:03:58.220
I'm gonna get rid of friends.

76
00:03:58.220 --> 00:03:59.320
I'm gonna run this query again.

77
00:04:01.120 --> 00:04:02.560
You see it doesn't log in friends.

78
00:04:02.560 --> 00:04:04.160
It doesn't even go to that function.

79
00:04:04.160 --> 00:04:05.820
That's the important part.

80
00:04:05.820 --> 00:04:09.180
That's what's so
beautiful about this, I think.

81
00:04:09.180 --> 00:04:11.000
That way you're not wasteful.

82
00:04:11.000 --> 00:04:13.160
It only goes to the thing when you ask for
it.

83
00:04:13.160 --> 00:04:15.020
That's why you wanna put things
in nested resolvers, and

84
00:04:15.020 --> 00:04:17.970
you don't want to treat your
resolvers like controllers.

85
00:04:17.970 --> 00:04:19.430
I'm gonna put everything
in this one controller.

86
00:04:19.430 --> 00:04:21.200
I wanna grab the whole
thing at the database.

87
00:04:21.200 --> 00:04:24.020
I'm gonna give it to GraphQL, and let them
figure out what properties they need.

88
00:04:24.020 --> 00:04:25.350
That's extremely wasteful.

89
00:04:25.350 --> 00:04:30.120
You definitely wanna use the nested
resolvers to let the user decide

90
00:04:30.120 --> 00:04:31.850
when you should be creating and
when you shouldn't.

91
00:04:31.850 --> 00:04:32.670
It's way more flexible.

92
00:04:32.670 --> 00:04:35.120
You can create a more flexible
graph using that approach.

93
00:04:37.930 --> 00:04:42.490
So once you have those resolvers you just
export them however you want and then,

94
00:04:42.490 --> 00:04:44.485
I'm sorry you actually have
to export them like this.

95
00:04:44.485 --> 00:04:48.612
&gt;&gt; [INAUDIBLE]

96
00:04:48.612 --> 00:04:50.843
&gt;&gt; Speaker 2: Okay, I'm almost done.

97
00:04:50.843 --> 00:04:53.802
I was like dang, that's a bad
way to queue him off the stage.

98
00:04:53.802 --> 00:04:57.948
&gt;&gt; [INAUDIBLE]

99
00:04:57.948 --> 00:04:59.710
&gt;&gt; Scott: All right, I'm wrapping up.

100
00:04:59.710 --> 00:05:04.640
So you export those resolvers, and then
you can see right here in the index here,

101
00:05:04.640 --> 00:05:09.451
I'm sorry, where was that, resolvers.
&gt;&gt; Scott: We

102
00:05:09.451 --> 00:05:12.060
export those resolvers into here, right?

103
00:05:12.060 --> 00:05:14.514
We have user resolvers, and then now
here we're just merging them together.

104
00:05:14.514 --> 00:05:16.278
So merge is gonna merge them all together.

105
00:05:16.278 --> 00:05:20.520
So eventually we're gonna have objects
that looks like this with a Query

106
00:05:20.520 --> 00:05:21.710
property.

107
00:05:21.710 --> 00:05:25.700
It's gonna have every single query that
we ever made for every single query.

108
00:05:25.700 --> 00:05:26.320
And then we'll have

109
00:05:26.320 --> 00:05:29.872
a mutation when we get to mutations.
&gt;&gt; Scott: And

110
00:05:29.872 --> 00:05:32.680
it's gonna have all of our
mutations that we make.

111
00:05:32.680 --> 00:05:35.080
And then all the other ones after
that are gonna be nested ones.

112
00:05:35.080 --> 00:05:36.760
So here's the ones for user.

113
00:05:36.760 --> 00:05:38.026
Here's the one for song.

114
00:05:38.026 --> 00:05:39.100
Those are all gonna be the nested ones.

115
00:05:39.100 --> 00:05:41.530
So that's what this merge is going,
it's putting them all together.

116
00:05:41.530 --> 00:05:43.020
But eventually it's gonna create that for
us.

