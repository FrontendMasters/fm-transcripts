WEBVTT

1
00:00:04.480 --> 00:00:05.550
&gt;&gt; Scott Moss: All right, so we're back.

2
00:00:05.550 --> 00:00:09.630
I hope everybody was able to create their
type definitions for their song and

3
00:00:09.630 --> 00:00:11.580
playlist, based on what we did for
the user.

4
00:00:11.580 --> 00:00:13.180
Again, there was no executing.

5
00:00:13.180 --> 00:00:13.990
There was no test.

6
00:00:13.990 --> 00:00:16.390
There was no pass or
fail associated with this task.

7
00:00:16.390 --> 00:00:20.320
It was just to get you familiar
with writing in a GraphQL file.

8
00:00:20.320 --> 00:00:26.250
Using the GraphQL syntax and starting off
from our Mongo, or our Mongoose Schemas.

9
00:00:27.260 --> 00:00:30.640
So let's just look at what I have here,
so you can go ahead and

10
00:00:30.640 --> 00:00:33.760
check out to the solution branch
to follow along if you want.

11
00:00:33.760 --> 00:00:35.020
But let's see what I have for User.

12
00:00:35.020 --> 00:00:38.270
So you'll see some extra stuff here,
this is not what we walked through,

13
00:00:38.270 --> 00:00:39.710
here's some extra stuff.

14
00:00:39.710 --> 00:00:41.900
I want to put this here so
we can talk about it.

15
00:00:41.900 --> 00:00:45.652
It's easier for me to talk about it
than have you do it without any context.

16
00:00:45.652 --> 00:00:49.100
So we have the type user
we pretty much did this.

17
00:00:49.100 --> 00:00:52.170
I added two more fields to create it at or
update it at.

18
00:00:52.170 --> 00:00:56.640
You might be thinking where
did those come from because

19
00:00:56.640 --> 00:00:58.470
we haven't written any resolvers yet.

20
00:00:58.470 --> 00:00:59.250
But actually,

21
00:00:59.250 --> 00:01:04.058
those are gonna come from the database.
&gt;&gt; Scott Moss: I was gonna

22
00:01:04.058 --> 00:01:04.890
sneeze, nevermind.

23
00:01:04.890 --> 00:01:07.390
Wait, there it is.
&gt;&gt; Scott Moss: Okay, sorry.

24
00:01:08.510 --> 00:01:12.190
So the database has a timestamps true
that we can pass in on the schema and

25
00:01:12.190 --> 00:01:16.440
that just puts timestamps on
the database for us, the actual docs.

26
00:01:16.440 --> 00:01:17.940
So that's where I get those from.

27
00:01:17.940 --> 00:01:20.632
But if that was not there that's
totally fine this is GraphQL.

28
00:01:20.632 --> 00:01:23.424
We just write a resolver and when we
get to resolver it's gonna make sense.

29
00:01:23.424 --> 00:01:29.599
We will write a resolver that will tell
graphic url when somebody is asking for

30
00:01:29.599 --> 00:01:35.692
the user type run this function that
will resolve the data that was created.

31
00:01:35.692 --> 00:01:37.565
Like I said,
resolvers are like mini controllers.

32
00:01:37.565 --> 00:01:41.870
We can write a function to resolve a data
on any level, not just for the entire

33
00:01:41.870 --> 00:01:47.980
request, but for a type, for a field, for
anything we can write a resolver for.

34
00:01:47.980 --> 00:01:50.070
And yeah, it's pretty cool.

35
00:01:50.070 --> 00:01:51.450
So that's another way we
could have done it, but

36
00:01:51.450 --> 00:01:52.770
it's going to be
automatically given to us.

37
00:01:52.770 --> 00:01:59.857
Then I have this thing right here
called input I didn't talk about input,

38
00:01:59.857 --> 00:02:04.721
but anybody wanna take a guess what it is?
&gt;&gt; Speaker 2: A variable?

39
00:02:04.721 --> 00:02:05.538
&gt;&gt; Scott Moss: I guess in some way it is

40
00:02:05.538 --> 00:02:06.054
a variable but

41
00:02:06.054 --> 00:02:08.880
I don't wanna confuse it with the
variables you would pass in on a query.

42
00:02:08.880 --> 00:02:10.130
This is on a schema level so

43
00:02:10.130 --> 00:02:14.590
we're not actually using any data so
I wouldn't say it's a variable in

44
00:02:14.590 --> 00:02:17.480
an effort not to confuse it with
what's happening on the query side.

45
00:02:17.480 --> 00:02:18.600
But it does work like a variable.

46
00:02:19.910 --> 00:02:21.780
It's actually.
&gt;&gt; Speaker 2: The structure for

47
00:02:21.780 --> 00:02:23.500
the mutations?
&gt;&gt; Scott Moss: Yeah,

48
00:02:23.500 --> 00:02:25.150
so it's the structure.

49
00:02:25.150 --> 00:02:28.390
So when we did a mutation,
remember we had a pass in of variable,

50
00:02:28.390 --> 00:02:31.730
and that variable had to
match some type of input?

51
00:02:32.800 --> 00:02:33.700
That's what that is.

52
00:02:33.700 --> 00:02:39.000
This input is describing what
the shape of the variable is.

53
00:02:39.000 --> 00:02:42.720
On any type of courier mutation,
that's what it's saying.

54
00:02:42.720 --> 00:02:45.670
So we haven't used this input yet,
but we will use it.

55
00:02:45.670 --> 00:02:50.790
So, basically, the short answer is
an input is the same thing as a type, but

56
00:02:50.790 --> 00:02:52.050
can be used in arguments.

57
00:02:52.050 --> 00:02:53.790
It's the only thing that
can be used in arguments.

58
00:02:53.790 --> 00:02:58.370
Whenever you use arguments, with couriers
mutations, you can only use scholars or

59
00:02:58.370 --> 00:02:59.110
inputs.

60
00:02:59.110 --> 00:03:00.720
You cannot use types.

61
00:03:00.720 --> 00:03:05.665
Even if I made a input that is
exactly the same as this type

62
00:03:05.665 --> 00:03:10.521
I still can't use this type
in argument it'll break.

63
00:03:10.521 --> 00:03:14.720
You can't you can't use a type in
argument it has to be an input.

64
00:03:14.720 --> 00:03:18.860
So and
everything has to resolve to an input

65
00:03:18.860 --> 00:03:21.850
inside a graphical arguments doesn't
matter how nested your structure is.

66
00:03:21.850 --> 00:03:24.160
Doesn't matter if you
want an array of things,

67
00:03:24.160 --> 00:03:26.010
if it's not an input, it will break.

68
00:03:26.010 --> 00:03:28.180
And that sounds like, yeah, of course.

69
00:03:28.180 --> 00:03:30.940
But there's some times where
you'll start writing queries.

70
00:03:30.940 --> 00:03:32.960
And you might have an input where
it's like an array of users.

71
00:03:32.960 --> 00:03:33.960
And you'll put a user in that array.

72
00:03:33.960 --> 00:03:35.250
And it will be like, you can't do that.

73
00:03:35.250 --> 00:03:37.630
And they'll give you some obscure
error and you won't know why.

74
00:03:37.630 --> 00:03:41.010
It's because something in
there is not an input.

75
00:03:41.010 --> 00:03:43.795
But it is instead a type
you need to make an input.

76
00:03:43.795 --> 00:03:47.730
Even if it's the exact same field
you just gotta make it an input.

77
00:03:47.730 --> 00:03:51.760
So it's very strict in a good way.

78
00:03:51.760 --> 00:03:55.750
Any questions on this stuff?
&gt;&gt; Speaker 2: Can input contain a type?

79
00:03:55.750 --> 00:03:57.159
&gt;&gt; Scott Moss: No it has to like for

80
00:03:57.159 --> 00:04:00.783
instance let's say I want
this to have a user,.

81
00:04:00.783 --> 00:04:05.240
I couldn't use that because user
is not an input, it's a type.

82
00:04:05.240 --> 00:04:06.850
So everything has to resolve to an input.

83
00:04:06.850 --> 00:04:10.430
So then I would have to go make
another input to describe this,

84
00:04:10.430 --> 00:04:12.110
even though it could be
the same thing as this.

85
00:04:14.250 --> 00:04:15.682
Yeah, it has to be.

86
00:04:15.682 --> 00:04:17.070
[LAUGH] Yeah.

87
00:04:17.070 --> 00:04:18.610
It's very strict.

88
00:04:18.610 --> 00:04:19.470
I read it.
Like, when I was

89
00:04:19.470 --> 00:04:22.220
first learning this stuff, I think I
was stuck on that for like three days.

90
00:04:22.220 --> 00:04:23.610
I was just like, I don't get it.

91
00:04:23.610 --> 00:04:25.330
I just don't get it, and it was that.

92
00:04:26.580 --> 00:04:28.100
So I wanna help you avoid that problem.

93
00:04:29.370 --> 00:04:34.730
Any other questions on this?
&gt;&gt; Speaker 2: We're using their tool

94
00:04:34.730 --> 00:04:37.080
to write the schema, right?

95
00:04:37.080 --> 00:04:39.530
To make it the syntax shorter?

96
00:04:39.530 --> 00:04:43.660
We're not doing it in the string long way,
right?

97
00:04:43.660 --> 00:04:44.380
&gt;&gt; Scott Moss: So, I guess,

98
00:04:44.380 --> 00:04:46.680
there's sort of three
ways you could do it.

99
00:04:46.680 --> 00:04:51.390
So there's the JavaScript way,
using GraphQL JS [COUGH] and

100
00:04:51.390 --> 00:04:53.890
you would use objects
to create your scheme.

101
00:04:53.890 --> 00:04:55.640
You would do something like this,
you'd come here and

102
00:04:55.640 --> 00:05:00.860
you're like I'm making a new GraphQL
schemer We're not going to do that.

103
00:05:00.860 --> 00:05:04.280
The second way is that you just use
a string inside of a JavaScript file.

104
00:05:05.370 --> 00:05:09.170
And that is cool but
then you don't get syntax highlighting and

105
00:05:09.170 --> 00:05:11.080
you dont' get all this crap
int he JavaScript file.

106
00:05:11.080 --> 00:05:13.100
This is like an abstraction
on top of that method.

107
00:05:13.100 --> 00:05:17.708
So basically we're using a graphql file,
which if you go look at the web pack

108
00:05:17.708 --> 00:05:23.080
configuration, I have a loader set up for

109
00:05:23.080 --> 00:05:28.070
GraphQL files that uses the raw loader,
which basically turns it into a string.

110
00:05:28.070 --> 00:05:31.800
Raw loader is like a string,
it's just a give me this file as string.

111
00:05:31.800 --> 00:05:34.320
So if I require this GraphQL
file anywhere in my app,

112
00:05:34.320 --> 00:05:38.090
it's just going to read it as a string,
which allows us to use that string method.

113
00:05:38.090 --> 00:05:40.710
So, yeah,
that's pretty much what's happening there.

114
00:05:40.710 --> 00:05:42.710
So, Webpack's doing that for us.

115
00:05:42.710 --> 00:05:45.440
This allows us to import graphql files.

116
00:05:45.440 --> 00:05:48.930
But, again, we're on note so
if we were not using Webpack and

117
00:05:48.930 --> 00:05:51.360
you still wanted to use
graphql files on note,

118
00:05:51.360 --> 00:05:54.390
you could still do this,
just use the file system to load it up.

119
00:05:54.390 --> 00:05:59.313
You could just use fs.
&gt;&gt; Scott Moss: Import fs from fs

120
00:05:59.313 --> 00:06:04.059
which is file system and then you
can do file system.read file which

121
00:06:04.059 --> 00:06:07.610
allows you to read any file and
read it as a stream.

122
00:06:07.610 --> 00:06:10.080
So you can totally do that as
well if you're not using Webpack.

123
00:06:10.080 --> 00:06:14.350
On the client you couldn't do that,
you would have to use a Webpack loader to

124
00:06:14.350 --> 00:06:17.550
use in a separate file cuz you can't
read files in the client, right?

125
00:06:17.550 --> 00:06:19.030
That's a security thing.

126
00:06:20.450 --> 00:06:21.341
But yeah, good question,

127
00:06:21.341 --> 00:06:25.256
Webpack's doing that.
&gt;&gt; Scott Moss: Any other questions

128
00:06:25.256 --> 00:06:25.870
on this?
&gt;&gt; Speaker 2: How

129
00:06:25.870 --> 00:06:28.490
do you write a comment in GraphQL?
&gt;&gt; Scott Moss: That's such

130
00:06:28.490 --> 00:06:29.170
a good question.

131
00:06:29.170 --> 00:06:31.710
That's such a good question, so comments.

132
00:06:31.710 --> 00:06:37.480
So comments, they use the little hashtag
thing, and you can put anything you want.

133
00:06:40.160 --> 00:06:41.680
But they have some significance.

134
00:06:41.680 --> 00:06:46.110
When you put a comment in GraphQL,
that comment is going to be

135
00:06:46.110 --> 00:06:51.400
the documentation for the thing that you
are commenting on inside a graphical.

136
00:06:51.400 --> 00:06:55.829
So if I were to put a comment
on this ID right here and

137
00:06:55.829 --> 00:06:58.897
I'm like, this is the user ID.

138
00:06:58.897 --> 00:07:01.549
When I go to graphical and
click on the user type, for

139
00:07:01.549 --> 00:07:05.490
its explanation it's gonna
say that comment right there.

140
00:07:05.490 --> 00:07:10.229
So that's how you document your documents,
it's really cool, very very useful

141
00:07:10.229 --> 00:07:15.106
we're actually using this extensively on
my company to generate documentation for

142
00:07:15.106 --> 00:07:16.423
your documentation.

143
00:07:16.423 --> 00:07:17.370
It's actually really cool.

144
00:07:17.370 --> 00:07:21.413
So yeah, you can put that, pretty much
anything you can put it above this

145
00:07:21.413 --> 00:07:24.212
whole type right here, and
be like this is a user.

146
00:07:24.212 --> 00:07:27.720
And then when I go to graphical,
it'll be like, what is a user?

147
00:07:27.720 --> 00:07:30.130
And then its definition like
this is a user, you'll see that.

148
00:07:30.130 --> 00:07:32.440
And when we load graphical back up
you'll see what I'm talking about.

149
00:07:32.440 --> 00:07:34.720
So, yeah, that's how you do comments.

150
00:07:34.720 --> 00:07:35.700
Use them extensively.

151
00:07:36.790 --> 00:07:37.840
All the stuff is generated for you.

152
00:07:37.840 --> 00:07:38.460
It's pretty awesome.

153
00:07:40.490 --> 00:07:45.710
Any other questions on this?

154
00:07:45.710 --> 00:07:46.250
Cool.

155
00:07:46.250 --> 00:07:50.550
Before I move on to the other files I just
want to take note of this syntax just one

156
00:07:50.550 --> 00:07:55.780
more time and see how close it is to
JSON but obviously not the same as JSON.

157
00:07:55.780 --> 00:07:57.590
It's not a validation but
it also is the same.

158
00:07:57.590 --> 00:08:00.140
So notice there's really
like no comments here.

159
00:08:00.140 --> 00:08:04.550
We don't need any comments here,
there's no equal signs anywhere.

160
00:08:04.550 --> 00:08:08.630
But it's very similar to what you have
adjacent so I just want you to take note

161
00:08:08.630 --> 00:08:11.930
of that and realize it's actually
not as difficult as it may seem.

162
00:08:11.930 --> 00:08:13.120
It's just brand new.

163
00:08:13.120 --> 00:08:15.240
It's very similar to JSON, it's just,

164
00:08:15.240 --> 00:08:18.140
when I started learning this I
remember thinking this is just, what?

165
00:08:18.140 --> 00:08:19.310
What is this?
And then I was like wait,

166
00:08:19.310 --> 00:08:21.870
it's actually just kind of
like JSON minus some stuff.

167
00:08:21.870 --> 00:08:23.050
So, it's not too bad.

168
00:08:24.200 --> 00:08:30.720
So if we go look at the song GraphQL, for
my song type basically I have the ID.

169
00:08:30.720 --> 00:08:33.930
I think every type
should have an ID on it,

170
00:08:33.930 --> 00:08:38.020
unless you're resolving a type from
some source that doesn't have an ID.

171
00:08:38.020 --> 00:08:42.180
But, I can tell you when you start
building out client apps with GraphQL,

172
00:08:42.180 --> 00:08:44.730
if you're using stuff like Apollo,

173
00:08:44.730 --> 00:08:50.000
they use the IDs by default to
cache your graphical data type.

174
00:08:50.000 --> 00:08:52.275
If you don't have something
unique about that,

175
00:08:52.275 --> 00:08:55.782
it can pretty much skip your cache every
time, and you kind of miss on that.

176
00:08:55.782 --> 00:08:59.050
So, I would say probably
always use IDs if you can.

177
00:08:59.050 --> 00:09:02.171
But sometimes you might be resolving data
for something that doesn't have an ID.

178
00:09:02.171 --> 00:09:05.750
Right now we're resolving data from
my database which always has an ID.

179
00:09:05.750 --> 00:09:09.392
But maybe you're resolving from some
thing somewhere else, I don't know.

180
00:09:09.392 --> 00:09:12.414
Because you could resolve from anywhere
and maybe those things don't have IDs.

181
00:09:12.414 --> 00:09:16.100
You should still probably find
some to unique identifier for

182
00:09:16.100 --> 00:09:20.084
the thing you're resolving,
to have caching on your front end.

183
00:09:20.084 --> 00:09:24.393
So I have a ID here,
title, URL, album, artist,

184
00:09:24.393 --> 00:09:29.910
rating favorite, exactly the same
as the model that we created,

185
00:09:29.910 --> 00:09:34.794
with the same restrictions.
&gt;&gt; Scott Moss: Does

186
00:09:34.794 --> 00:09:36.950
everybody have something similar to this?

187
00:09:36.950 --> 00:09:39.990
All right,
then I also have two inputs here.

188
00:09:39.990 --> 00:09:41.900
So we're gonna get into inputs.

189
00:09:41.900 --> 00:09:44.890
Again, but remember, inputs are literally
just types that we can use in arguments.

190
00:09:44.890 --> 00:09:47.010
That is the only thing
that's special about them.

191
00:09:47.010 --> 00:09:50.620
They're the same thing as types
that you can use in arguments.

192
00:09:50.620 --> 00:09:55.290
But I wanna walk through why this input
looks very similar to the type song, but

193
00:09:55.290 --> 00:09:57.940
slightly different in the naming of it.

194
00:09:59.180 --> 00:10:01.340
So I have an input called updated song.

195
00:10:01.340 --> 00:10:05.147
And the reason I call it updated song
because this is the variable name,

196
00:10:05.147 --> 00:10:09.662
this is the input type that you'll have to
use when you want to update a song, right?

197
00:10:09.662 --> 00:10:12.102
So if you just glance over the fields,

198
00:10:12.102 --> 00:10:15.999
there are literally the exactly
the same as the type of song.

199
00:10:15.999 --> 00:10:20.023
But remember inputs can only be used for
variables, I'm sorry inputs.

200
00:10:20.023 --> 00:10:22.530
So we had to make another one.

201
00:10:22.530 --> 00:10:26.260
And the other difference is there's
not requirements on any of this stuff.

202
00:10:26.260 --> 00:10:27.240
Why is that?

203
00:10:27.240 --> 00:10:29.780
Because I put requirements on these.

204
00:10:29.780 --> 00:10:32.270
That means when you do an update
you have to update all this stuff.

205
00:10:32.270 --> 00:10:34.190
I don't want you to do that.

206
00:10:34.190 --> 00:10:38.150
The only requirement I need is the ID to
know what you're trying to update and

207
00:10:38.150 --> 00:10:41.190
then, you pass in the field
that you want to update on.

208
00:10:41.190 --> 00:10:42.790
I don't know what you're gonna update.

209
00:10:42.790 --> 00:10:44.160
Maybe you're only gonna update the title.

210
00:10:44.160 --> 00:10:46.120
Maybe you're only updating the artist,
I don't know.

211
00:10:46.120 --> 00:10:47.670
So I'm not going to require any of them.

212
00:10:47.670 --> 00:10:49.770
I'm only gonna require the one
thing that I do need, and

213
00:10:49.770 --> 00:10:52.460
that's the ID to find the thing
that you're trying to update.

214
00:10:52.460 --> 00:10:53.880
Everything else is not required.

215
00:10:55.820 --> 00:10:57.270
Does that make sense?

216
00:10:57.270 --> 00:10:58.120
All right.

217
00:10:58.120 --> 00:10:59.680
And then on a new song,

218
00:11:01.690 --> 00:11:06.440
some of these should have requirement
on them because some need a title.

219
00:11:06.440 --> 00:11:11.050
So that should be required.

220
00:11:11.050 --> 00:11:15.210
And a favorite, it also needs a favorite.

221
00:11:15.210 --> 00:11:17.200
Has a default on it and
so it's totally fine.

222
00:11:17.200 --> 00:11:19.111
We don't have to do anything

223
00:11:26.692 --> 00:11:27.695
&gt;&gt; Scott Moss: The other special thing

224
00:11:27.695 --> 00:11:30.860
about inputs that you can't do on type
is that you can set defaults on them.

225
00:11:31.860 --> 00:11:35.990
So notice we have a default on favorite
here on the mongoose model on an input.

226
00:11:35.990 --> 00:11:36.700
And only on an input.

227
00:11:36.700 --> 00:11:37.860
You can also set defaults.

228
00:11:37.860 --> 00:11:43.140
So I can say for this favorite one I
also want to set the default to false.

229
00:11:43.140 --> 00:11:45.763
Like I said, equals false, like that.

230
00:11:45.763 --> 00:11:48.860
This only works on inputs,
doesn't work on types.

231
00:11:50.200 --> 00:11:53.610
So if you try to do this on a type,
it'll be like nah, not gonna happen.

232
00:11:54.930 --> 00:11:56.700
I hardly ever use these.

233
00:11:56.700 --> 00:11:59.130
I don't, for some reason I just
don't like doing this on this level.

234
00:11:59.130 --> 00:12:01.070
I prefer doing database level.

235
00:12:01.070 --> 00:12:05.070
So use them if you want to but

236
00:12:05.070 --> 00:12:09.380
I prefer not to use default GraphQL.

237
00:12:09.380 --> 00:12:13.660
Because it's like what
if your data is accessed

238
00:12:13.660 --> 00:12:15.210
some other mechanism other than GraphQL.

239
00:12:15.210 --> 00:12:19.370
What if you have to do some quick
data base insertion on the terminal.

240
00:12:19.370 --> 00:12:21.460
And then you don't benefit from
those defaults because you just

241
00:12:21.460 --> 00:12:22.580
bypassed GraphQL.

242
00:12:22.580 --> 00:12:25.220
So I like to do it closer
to the source of the data,

243
00:12:25.220 --> 00:12:27.770
which is the closest you
can get at the database.

244
00:12:27.770 --> 00:12:33.531
So I'd rather do it there.
&gt;&gt; Scott Moss: Then again, you might

245
00:12:33.531 --> 00:12:37.360
be doing mutations on something that has
nothing to do with storing data somewhere.

246
00:12:37.360 --> 00:12:39.630
Maybe that's the case, I'm not sure.

247
00:12:41.590 --> 00:12:46.270
So that's song, and
if we go to playlist, playlist,

248
00:12:46.270 --> 00:12:50.810
let's pull up the model here,
playlist.model.

249
00:12:50.810 --> 00:12:54.220
This one's pretty simple, so we have
a type, we have an ID, we have a title,

250
00:12:54.220 --> 00:12:55.950
and then we have songs.

251
00:12:55.950 --> 00:12:57.840
So this is one I said I didn't
really tell you about, but

252
00:12:57.840 --> 00:13:02.460
if you did some looking probably figured
it out, I saw some people figure it out.

253
00:13:02.460 --> 00:13:03.280
Let's talk about this.

254
00:13:03.280 --> 00:13:04.690
So, we have a song here,

255
00:13:04.690 --> 00:13:08.700
we know in Mongo that those songs are
going to reference an object ID, right?

256
00:13:08.700 --> 00:13:12.110
An object ID is really a string.

257
00:13:12.110 --> 00:13:15.300
This is a string that references a song.

258
00:13:15.300 --> 00:13:17.360
So viewed, literally just did a one for
one match.

259
00:13:17.360 --> 00:13:21.600
You might have came in here and
you might of said, there ID's,.right?

260
00:13:21.600 --> 00:13:22.970
Because these are IDs in here.

261
00:13:24.410 --> 00:13:27.180
And you would not be
wrong if you did that.

262
00:13:27.180 --> 00:13:30.750
The only problem is you're probably not
gonna to get the desired result that

263
00:13:30.750 --> 00:13:31.950
you're looking for.

264
00:13:31.950 --> 00:13:34.870
You're not gonna be able to query
this playlist and then gimme all of

265
00:13:34.870 --> 00:13:38.650
the songs on this playlist, and
then I want the titles for these songs.

266
00:13:38.650 --> 00:13:39.690
That wouldn't work.

267
00:13:39.690 --> 00:13:43.053
When you ask for songs on playlist
it give you in an array of strings,

268
00:13:43.053 --> 00:13:43.883
an array of IDs.

269
00:13:43.883 --> 00:13:48.528
Which is probably not what you want you
probably want back an array of songs so

270
00:13:48.528 --> 00:13:52.897
what you would do you would use the song
type that you created over here.

271
00:13:52.897 --> 00:13:55.043
There are in two separate files so
how do they know about each other.

272
00:13:55.043 --> 00:13:59.363
Well when we join them together, grab the
thing that we're gonna be using, the tool,

273
00:13:59.363 --> 00:14:03.400
is gonna build the whole scheme up
first and then it's gonna execute it.

274
00:14:03.400 --> 00:14:05.970
So it's all in the same
context before it's executed.

275
00:14:05.970 --> 00:14:06.840
So it's still gonna be fine.

276
00:14:06.840 --> 00:14:09.960
It doesn't matter what order it was in,
which was first, which was last.

277
00:14:09.960 --> 00:14:12.820
The whole thing gets loaded up and
then it executes.

278
00:14:12.820 --> 00:14:17.270
So, this will know about
the sing when we run the query.

279
00:14:18.370 --> 00:14:24.550
So by doing this now, it's going to
be our resolvers job to guarantee

280
00:14:24.550 --> 00:14:29.370
when someone asks for a song that they
don't get back in the array of ID's.

281
00:14:29.370 --> 00:14:31.610
Instead they get back an array of objects.

282
00:14:31.610 --> 00:14:34.250
So remember yesterday I
talked about population,

283
00:14:34.250 --> 00:14:36.060
how mongoose can populate things.

284
00:14:36.060 --> 00:14:38.560
Like join tables on the fly,
that's what we're gonna have to do for

285
00:14:38.560 --> 00:14:39.690
the songs array.

286
00:14:39.690 --> 00:14:43.670
We're gonna say man, somebody asked for
a song on the playlist.

287
00:14:43.670 --> 00:14:45.040
Now there's IDs.

288
00:14:45.040 --> 00:14:47.980
Can we populate those IDs
to be actual song objects?

289
00:14:47.980 --> 00:14:52.410
And make sure those song objects
match this data structure

290
00:14:52.410 --> 00:14:53.930
because that's what it resolves to?

291
00:14:55.050 --> 00:14:57.610
It sounds crazy right now but
I promise you gonna be so powerful,

292
00:14:57.610 --> 00:14:59.140
you're gonna like what?

293
00:14:59.140 --> 00:15:00.290
How do we do that?

294
00:15:00.290 --> 00:15:01.100
It's gonna be really cool.

295
00:15:01.100 --> 00:15:04.920
So that's how that works and you'll see.

296
00:15:04.920 --> 00:15:09.320
It's very, very powerful and the way you
do it is very awesome in my opinion.

297
00:15:10.670 --> 00:15:11.948
Any questions on that?

298
00:15:11.948 --> 00:15:12.921
Yes.
&gt;&gt; Speaker 2: So

299
00:15:12.921 --> 00:15:15.750
[COUGH]
&gt;&gt; Scott Moss: There's a lot of,

300
00:15:15.750 --> 00:15:18.000
kinda boilerplate, very similar code.

301
00:15:18.000 --> 00:15:22.010
And I know you mentioned at the outset
that you can do dynamic schema generation.

302
00:15:22.010 --> 00:15:23.770
And that's more complex.
&gt;&gt; Speaker 2: Yes.

303
00:15:23.770 --> 00:15:26.360
&gt;&gt; Scott Moss: Would that fall under

304
00:15:26.360 --> 00:15:27.260
what I've described here?

305
00:15:27.260 --> 00:15:31.960
Or is that a little bit,
I don't how to describe it.

306
00:15:31.960 --> 00:15:35.900
Ultimately, what I'm trying to drive
at is that instead of having to write

307
00:15:35.900 --> 00:15:36.630
&gt;&gt; Speaker 2: Updated song and

308
00:15:36.630 --> 00:15:39.040
new song inputs for every type.
&gt;&gt; Scott Moss: Right.

309
00:15:39.040 --> 00:15:41.930
&gt;&gt; Speaker 2: Is there a way to do that so

310
00:15:41.930 --> 00:15:47.270
you don't have to.
&gt;&gt; Scott Moss: Yeah, there is.

311
00:15:47.270 --> 00:15:48.370
Yes.
In a short answer, yes.

312
00:15:48.370 --> 00:15:49.960
It depends on.

313
00:15:49.960 --> 00:15:53.770
So there are some plugins that will
literally read your Mongoose schemas and

314
00:15:53.770 --> 00:15:56.300
generate everything for you,
because it's like a one for one.

315
00:15:56.300 --> 00:15:57.640
So we can use those.

316
00:15:57.640 --> 00:15:58.481
I don't wanna do them.

317
00:15:58.481 --> 00:16:03.463
You can also do it yourself, because our
API is so simple, you can totally do it.

318
00:16:03.463 --> 00:16:08.246
The way I would do it is,
I would just have a file like this,

319
00:16:08.246 --> 00:16:13.228
that just has like a function,
that like takes in like type,

320
00:16:13.228 --> 00:16:16.563
and then it just generates everything.

321
00:16:16.563 --> 00:16:19.655
Because it's all the same, they all have
the same queries, the same mutations and

322
00:16:19.655 --> 00:16:20.640
it just generates a type.

323
00:16:20.640 --> 00:16:25.950
So you can totally do that but
yeah we're not gonna get to that.

324
00:16:25.950 --> 00:16:29.340
Because there's so much you can do
with that, and so many edge cases.

325
00:16:29.340 --> 00:16:33.148
But yeah, that's the beauty of GraphQL
is that you can do that per request.

326
00:16:33.148 --> 00:16:36.640
So whenever a request comes in you
can say, this user is an admin,

327
00:16:36.640 --> 00:16:38.250
this admin needs this schema.

328
00:16:38.250 --> 00:16:40.520
Let me generate this schema.

329
00:16:40.520 --> 00:16:44.327
And then because you generated new schema
you also generate those resolvers too.

330
00:16:44.327 --> 00:16:46.450
And resolvers are functions
they are not strings.

331
00:16:46.450 --> 00:16:48.894
So that's like a whole
nother thing right there.

332
00:16:48.894 --> 00:16:51.768
So then you you gotta generate those
resolvers, very similar to how we

333
00:16:51.768 --> 00:16:55.510
generated controllers yesterday, but
on the fly, then build your schema.

334
00:16:55.510 --> 00:16:57.950
And then run the query
against that schema.

335
00:16:57.950 --> 00:17:01.960
So you could totally do it, and then later
on today I could show you how I'm doing it

336
00:17:01.960 --> 00:17:05.310
with the product that I'm working on cuz
we're doing the exact same thing but

337
00:17:05.310 --> 00:17:06.500
on a whole other level.

338
00:17:07.720 --> 00:17:10.460
But yeah, you could totally do that and
you can't really do that with rest.

339
00:17:12.210 --> 00:17:17.926
You need a v2 for that,
[LAUGH] or v3, or whatever.

340
00:17:17.926 --> 00:17:22.608
And then for
the input very similar to the type I think

341
00:17:22.608 --> 00:17:26.342
the title yeah title should be required.

342
00:17:26.342 --> 00:17:29.260
You can pass in new
songs here if you want.

343
00:17:29.260 --> 00:17:31.360
And then favorite so it's a boolean.

344
00:17:32.640 --> 00:17:36.590
Any questions on these stuff?
&gt;&gt; Speaker 2: So

345
00:17:36.590 --> 00:17:39.380
there because it's an input you would be
&gt;&gt; Scott Moss: Required to update

346
00:17:39.380 --> 00:17:40.630
the title anytime you update.
&gt;&gt; Speaker 2: Yeah.

347
00:17:40.630 --> 00:17:41.880
Actually, that's right.

348
00:17:41.880 --> 00:17:43.970
That's an update.
I thought it was a new input.

349
00:17:43.970 --> 00:17:44.940
That's an updated playlist.

350
00:17:44.940 --> 00:17:46.620
You're right.
It does need to be required on an update.

351
00:17:46.620 --> 00:17:50.700
I thought that was new, it's updated.

352
00:17:50.700 --> 00:17:53.850
On a new playlist input,
you totally would need it.

353
00:17:53.850 --> 00:17:55.090
On an updated one, no,

354
00:17:55.090 --> 00:17:59.480
you just give me id and whatever
else you pass I'll just figure out.

355
00:17:59.480 --> 00:18:02.210
We'll write the resolver for this,
so you'll see it's pretty awesome.

356
00:18:03.920 --> 00:18:05.110
Any questions on this before we move one.

357
00:18:05.110 --> 00:18:09.640
All right, As you can tell I'm
really excited about GraphQL.

358
00:18:09.640 --> 00:18:13.340
I've literally been working on GraphQL
like the advanced part of it for

359
00:18:13.340 --> 00:18:17.620
the last eight weeks and it's all I
know so I'm really excited to talk

360
00:18:17.620 --> 00:18:21.362
about this stuff and I'm like holding
back from going to crazy mode.

361
00:18:21.362 --> 00:18:23.227
[LAUGH]

