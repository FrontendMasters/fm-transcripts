WEBVTT

1
00:00:00.020 --> 00:00:03.380
&gt;&gt; Scott Moss: I promised that I was
gonna walk through how GraphQL resolves

2
00:00:03.380 --> 00:00:03.990
different levels.

3
00:00:03.990 --> 00:00:05.940
I forgot I was supposed to do that,
so let's do that first.

4
00:00:05.940 --> 00:00:07.650
I think that would be very helpful.

5
00:00:07.650 --> 00:00:12.640
Because I know when I first saw that I
was just like whooh man, that is awesome.

6
00:00:12.640 --> 00:00:13.211
So let's start with that.

7
00:00:21.436 --> 00:00:22.580
&gt;&gt; Scott Moss: So many branches.

8
00:00:22.580 --> 00:00:23.742
Okay, I got to write all that over again.

9
00:00:25.748 --> 00:00:26.608
&gt;&gt; Scott Moss: Let's start as a user.

10
00:00:31.953 --> 00:00:33.800
&gt;&gt; Scott Moss: Wait, there we go, okay.

11
00:00:33.800 --> 00:00:35.026
So user, one more time.

12
00:00:35.026 --> 00:00:41.456
Getting user,
&gt;&gt; Scott Moss: Getting playlists,

13
00:00:44.775 --> 00:00:47.571
&gt;&gt; Scott Moss: And then getting songs.

14
00:00:50.732 --> 00:00:54.967
&gt;&gt; Scott Moss: And
then on the song, test: String.

15
00:00:58.502 --> 00:01:05.386
&gt;&gt; Scott Moss: And down here, Song,
&gt;&gt; Scott Moss: Test,

16
00:01:05.386 --> 00:01:12.090
return test,
&gt;&gt; Scott Moss: And getting test, okay.

17
00:01:12.090 --> 00:01:13.250
Now we can try.

18
00:01:18.394 --> 00:01:23.100
&gt;&gt; Scott Moss: All right, so come back in
GraphQL, and if we run this query again.

19
00:01:23.100 --> 00:01:25.810
Actually let's refresh to make
sure GraphQL is up to date.

20
00:01:25.810 --> 00:01:29.270
We can check the query of song and
we should see test also.

21
00:01:30.600 --> 00:01:31.530
So I'll just come down here and

22
00:01:31.530 --> 00:01:34.720
I'll say I also want to get
the test before I run this.

23
00:01:34.720 --> 00:01:35.910
Everything looks good.

24
00:01:35.910 --> 00:01:38.940
I'll look at the logs and
we can see right here.

25
00:01:38.940 --> 00:01:39.700
It's getting the user.

26
00:01:41.360 --> 00:01:45.045
Then it was getting the playlist,
then it was getting the songs,

27
00:01:45.045 --> 00:01:47.580
then it was getting the test, right?

28
00:01:47.580 --> 00:01:52.290
So let's undo all these queries and
see what keeps logging.

29
00:01:52.290 --> 00:01:54.260
So I'm gonna get rid of test,
and I'm gonna run this again.

30
00:01:55.580 --> 00:01:59.470
Notice it does not getting test, we didn't
asked for it so it didn't try to get it.

31
00:02:00.720 --> 00:02:01.339
Now, I'm gonna get rid of songs.

32
00:02:04.536 --> 00:02:05.530
&gt;&gt; Scott Moss: I don't
need to refresh that.

33
00:02:05.530 --> 00:02:06.670
I'm gonna get rid of songs.

34
00:02:06.670 --> 00:02:08.780
Notice it's not saying getting songs.

35
00:02:08.780 --> 00:02:10.660
I didn't ask for it, all right?

36
00:02:11.720 --> 00:02:16.460
Kill that, and then if I get rid
of playlists, it's not asking for

37
00:02:16.460 --> 00:02:18.129
playlists because I didn't ask for it.

38
00:02:19.150 --> 00:02:20.487
It only resolves what you ask for.

39
00:02:20.487 --> 00:02:25.550
And that's the power, that's
the thing that I wanted to show you.

40
00:02:25.550 --> 00:02:29.020
So you have to create the resolvers
if someone asked for it but

41
00:02:29.020 --> 00:02:30.430
you don't know if they will or not.

42
00:02:30.430 --> 00:02:34.550
Which is why you want to have nested
resolvers versus putting everything in one

43
00:02:34.550 --> 00:02:37.880
flat resolver that gets every
possible combination of everything.

44
00:02:37.880 --> 00:02:40.350
You would never know what
someone was asking for.

45
00:02:40.350 --> 00:02:40.995
And if you did,

46
00:02:40.995 --> 00:02:44.399
you probably have a very restrictive API
that you probably don't need GraphQL.

47
00:02:44.399 --> 00:02:47.241
You should just use REST or
something, most likely, or

48
00:02:47.241 --> 00:02:49.483
just your own implementation or whatever.

49
00:02:56.989 --> 00:03:00.129
&gt;&gt; Scott Moss: Any questions on that, how
that's working, or I know some people if

50
00:03:00.129 --> 00:03:03.340
you think like me, you might be thinking,
well, how do I break that?

51
00:03:03.340 --> 00:03:06.350
Cuz that's how I learn,
I'm like how do I break that?

52
00:03:06.350 --> 00:03:10.754
Anybody thinking like that,
what are some questions around what

53
00:03:10.754 --> 00:03:14.209
are the fallacies of that,
or anything like that?

54
00:03:20.101 --> 00:03:22.460
&gt;&gt; Scott Moss: Nope,
all right, cool, okay.

55
00:03:22.460 --> 00:03:23.800
So now back to the test.

56
00:03:23.800 --> 00:03:28.830
If you're on lesson 14,
go ahead and write some tests.

57
00:03:28.830 --> 00:03:31.691
It is now 4:04,
we'll come back here at 4:30.

