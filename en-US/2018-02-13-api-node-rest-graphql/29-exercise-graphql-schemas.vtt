WEBVTT

1
00:00:00.000 --> 00:00:01.176
&gt;&gt; Scott Moss: Let's go ahead and
build something.

2
00:00:01.176 --> 00:00:05.950
So our challenge, we're gonna create
some type definitions for a song.

3
00:00:05.950 --> 00:00:08.493
And we're gonna create some type
definitions for a playlist.

4
00:00:08.493 --> 00:00:10.668
So when I say type definitions,

5
00:00:10.668 --> 00:00:14.870
I'm referring to,
&gt;&gt; Scott Moss: These, so

6
00:00:14.870 --> 00:00:17.188
this is a type definition for the song.

7
00:00:17.188 --> 00:00:20.522
It's describing the shape and
stuff, the shape and

8
00:00:20.522 --> 00:00:25.315
the fields and what those field types are,
the same thing with playlists.

9
00:00:25.315 --> 00:00:28.852
Now I'm not gonna leave you hanging out
to dry because I only want you to do this

10
00:00:28.852 --> 00:00:31.533
song and a playlist because
user's already done for you.

11
00:00:31.533 --> 00:00:35.218
So user's there for an example,
so look at the user.

12
00:00:35.218 --> 00:00:36.952
And actually,
we'll do that right now together.

13
00:00:36.952 --> 00:00:38.724
Let me check out to
the appropriate branch.

14
00:00:38.724 --> 00:00:43.658
I believe we're gonna
be on less than nine.

15
00:00:49.361 --> 00:00:54.496
&gt;&gt; Scott Moss: And what we're
gonna do here is we're just gonna

16
00:00:54.496 --> 00:01:01.146
create some types for the,
&gt;&gt; Scott Moss: Song and then the playlist.

17
00:01:01.146 --> 00:01:03.085
And actually what I wanted to do,
I remember now.

18
00:01:03.085 --> 00:01:05.735
I wanted to walk through
creating the user one together.

19
00:01:05.735 --> 00:01:08.608
That way you can all see how it works and
then we'll create the song one.

20
00:01:08.608 --> 00:01:11.760
So the way we're gonna create
it with the user is, and

21
00:01:11.760 --> 00:01:16.467
you can follow along with me here, is
we're just gonna go to the user resource.

22
00:01:16.467 --> 00:01:22.452
We're gonna make a new file and
we're gonna call it user.graphql.

23
00:01:22.452 --> 00:01:23.566
One word, all lowercase.

24
00:01:25.835 --> 00:01:29.689
&gt;&gt; Scott Moss: If you don't have a GraphQL
syntax highlighter this is a perfect time

25
00:01:29.689 --> 00:01:30.691
to download one.

26
00:01:30.691 --> 00:01:33.989
Otherwise it's just gonna look like text.

27
00:01:38.878 --> 00:01:40.935
&gt;&gt; Scott Moss: Basically this file,

28
00:01:40.935 --> 00:01:45.805
this is where we're gonna
describe our user type, so

29
00:01:45.805 --> 00:01:50.904
the first thing you wanna do
is you want to say type user.

30
00:01:50.904 --> 00:01:52.558
And by using a type keyword and

31
00:01:52.558 --> 00:01:56.741
graft you will schema that's telling
GraphQL that you want to make a type.

32
00:01:56.741 --> 00:01:58.170
That's basically what it's saying,

33
00:01:58.170 --> 00:02:00.171
and remember a type is anything
that we can resolve to.

34
00:02:00.171 --> 00:02:04.776
We have those scholar types and then
now we're creating a non-scholar type,

35
00:02:04.776 --> 00:02:06.601
which is basically an object.

36
00:02:06.601 --> 00:02:08.386
So we're gonna make a user type and

37
00:02:08.386 --> 00:02:11.846
what I'm gonna do is I'm gonna pull
up the user model side by side.

38
00:02:11.846 --> 00:02:15.223
And when I say the user model I'm talking
about the thing we created in Mongo

39
00:02:15.223 --> 00:02:15.823
yesterday.

40
00:02:15.823 --> 00:02:20.393
Because most of the time, initially,
your user types, I'm sorry,

41
00:02:20.393 --> 00:02:25.670
your types in GraphQL are gonna be very
similar to your schemas in your database.

42
00:02:25.670 --> 00:02:28.932
Most of the time, at first, and
then you'll start adding stuff, and

43
00:02:28.932 --> 00:02:31.941
taking away stuff, and
expanding how you can query your graph.

44
00:02:31.941 --> 00:02:36.378
But it's a good baseline to start off
with what you have in the database,

45
00:02:36.378 --> 00:02:37.848
then start from there.

46
00:02:37.848 --> 00:02:40.858
So user, for right now based on
what we have on the database,

47
00:02:40.858 --> 00:02:43.529
there's really only two
things that I wanna expose.

48
00:02:43.529 --> 00:02:45.753
The first is the ID.

49
00:02:45.753 --> 00:02:50.519
You obviously don't see ID on the right
because ID is generated from Mongo, right?

50
00:02:50.519 --> 00:02:52.747
So we don't have to declare it but
it is gonna be an ID.

51
00:02:52.747 --> 00:02:57.761
So I wanna say a user has an ID and
its type is ID.

52
00:02:57.761 --> 00:03:02.304
And I'm gonna put an exclamation there
because the ID's always gonna be there.

53
00:03:02.304 --> 00:03:06.951
If I ask for an ID from GraphQL for
a user ID, I should always get back an ID.

54
00:03:06.951 --> 00:03:09.814
If I don't, that should be a problem,
I would expect that's to break.

55
00:03:11.722 --> 00:03:14.653
&gt;&gt; Scott Moss: The other thing is,
a username,

56
00:03:14.653 --> 00:03:19.585
this is gonna be a string type,
just like it is on Mongo.

57
00:03:19.585 --> 00:03:22.095
And I'm gonna say this is also non-null,

58
00:03:22.095 --> 00:03:26.082
because I can feel safe to do that
because in Mongo, it is required.

59
00:03:26.082 --> 00:03:29.635
So I can feel pretty safe that there's
always gonna be a username on this user

60
00:03:29.635 --> 00:03:33.188
type, because you can't create a user
in the database without a username,

61
00:03:33.188 --> 00:03:34.820
according to our schema in Mongo.

62
00:03:34.820 --> 00:03:39.568
So I feel pretty safe that if I ask for
username, it should be non-null as well.

63
00:03:39.568 --> 00:03:43.781
I'm not gonna put the password hash there,
because you don't want to be sending back

64
00:03:43.781 --> 00:03:46.722
the password on GraphQL, so
we're gonna just not do that.

65
00:03:46.722 --> 00:03:49.817
And that's a problem thing right there,
so that's pretty cool.

66
00:03:52.886 --> 00:03:55.419
&gt;&gt; Scott Moss: So that's basically
how easy it is to create a type.

67
00:03:55.419 --> 00:03:58.273
So we're gonna do the same thing for

68
00:03:58.273 --> 00:04:03.289
the song model,
&gt;&gt; Scott Moss: And the playlist model.

69
00:04:03.289 --> 00:04:07.409
So you would go into the song
resource folder, make a song GraphQL,

70
00:04:07.409 --> 00:04:11.480
go into the playlist resource folder and
make a playlist GraphQL.

71
00:04:11.480 --> 00:04:15.166
Pull up the schema next to it and
there's no right or

72
00:04:15.166 --> 00:04:18.266
wrong, you decide on
how you want to do it.

73
00:04:18.266 --> 00:04:23.258
I did not show you how to do one thing,
well I didn't directly show you, but

74
00:04:23.258 --> 00:04:25.636
you can put the clues together, and

75
00:04:25.636 --> 00:04:30.647
that's adding another non-scholar
type to another non-scholar type.

76
00:04:30.647 --> 00:04:35.666
But if you think about it, it actually
would probably be your first thought.

77
00:04:35.666 --> 00:04:38.641
It's actually pretty intuitive,
so you can attempt that.

78
00:04:38.641 --> 00:04:41.875
And basically that's gonna come
down to the playlist model,

79
00:04:41.875 --> 00:04:43.687
cuz the playlist model has songs.

80
00:04:43.687 --> 00:04:46.343
So it's like,
how do you describe that in GraphQL?

81
00:04:46.343 --> 00:04:50.519
How do I tell GraphQL that a playlist
type has an array of songs?

82
00:04:50.519 --> 00:04:53.910
So I'll let you attempt that,
that's pretty fine.

83
00:04:53.910 --> 00:04:56.347
None of this code you're writing now's
gonna be executed, so you can't check it.

84
00:04:56.347 --> 00:04:59.458
So there's no right or wrong,
I just want you to write some types.

