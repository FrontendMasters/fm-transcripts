WEBVTT

1
00:00:00.270 --> 00:00:01.900
&gt;&gt; Scott Moss: So we've got Lesson 4 here.

2
00:00:01.900 --> 00:00:04.550
So one thing is we've got some global
middleware that we need to set up.

3
00:00:04.550 --> 00:00:07.830
Remember we're reusing that request.body,
right?

4
00:00:07.830 --> 00:00:10.270
I was like that's gonna be a test
on some middleware later on.

5
00:00:10.270 --> 00:00:12.490
Yeah, by default,
Express knows nothing about JSON.

6
00:00:12.490 --> 00:00:15.230
It has no clue, it doesn't have
any way of how to handling it.

7
00:00:15.230 --> 00:00:19.180
But there's some special middleware we
can use that does allow us to parse JSON,

8
00:00:19.180 --> 00:00:20.680
parse URLs.

9
00:00:20.680 --> 00:00:21.780
Do all that stuff for us so

10
00:00:21.780 --> 00:00:23.790
we're gonna use that middleware cuz
we don't want to do it ourselves.

11
00:00:23.790 --> 00:00:27.697
And we want that to happen on every single
request in our app because our whole app

12
00:00:27.697 --> 00:00:31.622
is gonna be responding to in JSON so
we're gonna set that up globally.

13
00:00:31.622 --> 00:00:33.730
We can also set up login
globally like hey,

14
00:00:33.730 --> 00:00:37.220
I want to cuz right now
when I start this server.

15
00:00:39.710 --> 00:00:40.850
And I make a request to it.

16
00:00:42.260 --> 00:00:46.400
I don't know if somebody made a request
but I'm not logging that request anywhere.

17
00:00:46.400 --> 00:00:49.400
It would be pretty great to be able to
log every single request that came in.

18
00:00:49.400 --> 00:00:50.567
That'd be really nice to have that.

19
00:00:50.567 --> 00:00:52.149
That's a API 101.

20
00:00:52.149 --> 00:00:54.640
Some logging for your request.

21
00:00:54.640 --> 00:00:58.134
So we want to see that and
that also needs to be global.

22
00:00:58.134 --> 00:01:00.700
So if we look inside of
this middleware file.

23
00:01:02.187 --> 00:01:06.530
&gt;&gt; Scott Moss: Here you can see there's a
function called set up global middleware.

24
00:01:06.530 --> 00:01:08.130
And it takes in the app.

25
00:01:09.330 --> 00:01:13.910
What we want to do here is we want to set
up some middleware to do some logging.

26
00:01:15.160 --> 00:01:19.150
That's optional but the one we absolutely
have to do is set up JSON parsing.

27
00:01:19.150 --> 00:01:21.350
And we're gonna use this body parser.

28
00:01:21.350 --> 00:01:23.099
So we're gonna go get body parser.

29
00:01:23.099 --> 00:01:28.245
&gt;&gt; Scott Moss: There's this
thing in here called JSON,

30
00:01:28.245 --> 00:01:31.780
we need bodyParser.json.

31
00:01:31.780 --> 00:01:37.380
And then we also need URL encoded.

32
00:01:37.380 --> 00:01:41.410
So we need both of those, and if we
just take an example of how to use it.

33
00:01:41.410 --> 00:01:45.540
This is why we chose express,
because this thing works for express,

34
00:01:45.540 --> 00:01:48.415
almost everything works for
express/connect as you see right here.

35
00:01:48.415 --> 00:01:51.981
Express/connect because express
is based off of connect, but

36
00:01:51.981 --> 00:01:55.029
basically we need to set up
both of these middlewares.

37
00:01:55.029 --> 00:01:59.539
We need to set up bodyParser URL encoded,
extended ,this but true.

38
00:01:59.539 --> 00:02:02.218
Then we also need to
set up bodyParser.json.

39
00:02:02.218 --> 00:02:04.920
We need both of those
middleware on our app.

40
00:02:04.920 --> 00:02:06.193
So knowing this right here.

41
00:02:06.193 --> 00:02:08.050
Looking at this.

42
00:02:08.050 --> 00:02:12.541
We need to do that in here,
&gt;&gt; Scott Moss: On our app.

43
00:02:12.541 --> 00:02:18.210
So and how do we set up something?

44
00:02:18.210 --> 00:02:20.670
What's the method that we use
on the app or the router?

45
00:02:20.670 --> 00:02:22.940
That we can mount anything on.

46
00:02:22.940 --> 00:02:23.470
&gt;&gt; Speaker 2: Use?

47
00:02:23.470 --> 00:02:24.340
&gt;&gt; Scott Moss: Use, exactly.

48
00:02:24.340 --> 00:02:29.490
So use, use, and set up that
bodyParser for JSON, and URL encoded.

49
00:02:30.840 --> 00:02:36.200
And then what we also have
here is some authentication.

50
00:02:36.200 --> 00:02:39.600
So we're not gonna walk through
building custom authentication,

51
00:02:39.600 --> 00:02:40.700
but it's already done.

52
00:02:40.700 --> 00:02:42.670
We're gonna attach it to our routes,
though.

53
00:02:42.670 --> 00:02:46.100
So I already have that done, you can go
look in modules/off and there's a whole

54
00:02:47.840 --> 00:02:51.680
bunch of stuff in here with JSON
web tokens, some crazy stuff.

55
00:02:51.680 --> 00:02:54.370
And we're gonna go walk through it
when we get done on what's going on.

56
00:02:54.370 --> 00:02:57.460
But it's heavily commented and it tells
you exactly what's happening here.

57
00:02:57.460 --> 00:02:59.190
But this is also middleware and

58
00:02:59.190 --> 00:03:02.250
we're gonna set this middleware
up to protect our API.

59
00:03:02.250 --> 00:03:05.992
So you can't access /api
without being authenticated.

60
00:03:05.992 --> 00:03:09.650
So that's what this is gonna do.

61
00:03:09.650 --> 00:03:13.772
So we need to set this up as well,
and the middleware for this,

62
00:03:13.772 --> 00:03:19.210
we need to use the decodeToken
function from this file.

63
00:03:19.210 --> 00:03:22.500
So decodeToken is exactly, it sounds like
it's gonna decode the JSON web token.

64
00:03:22.500 --> 00:03:26.270
And we wanna do that on
every single route to /api.

65
00:03:26.270 --> 00:03:30.630
So think in your app where there's a place
where we can set up some function that

66
00:03:30.630 --> 00:03:33.705
runs for every other function for /api.

67
00:03:33.705 --> 00:03:39.580
Then you wanna place decodeToken in there,
just like that.

68
00:03:39.580 --> 00:03:42.650
You have to invoke it, cuz it's
a function that returns a function.

69
00:03:42.650 --> 00:03:43.970
Every other middleware
doesn't return a function.

70
00:03:43.970 --> 00:03:45.860
This one returns a function so
we got to invoke it just like that.

71
00:03:48.180 --> 00:03:50.020
That's a side of auth.

72
00:03:50.020 --> 00:03:54.790
And then you have this custom error
handler that does absolutely nothing.

73
00:03:56.140 --> 00:03:59.470
And like you said we need to
set this up to handle any error

74
00:03:59.470 --> 00:04:00.680
that's passed into next.

75
00:04:00.680 --> 00:04:03.310
Eventually, when you pass an error
to next it just bubbles up.

76
00:04:03.310 --> 00:04:04.700
No matter where you pass it in,

77
00:04:04.700 --> 00:04:06.880
it's gona go to it's router,
do you have an error handler?

78
00:04:06.880 --> 00:04:07.570
Nope.

79
00:04:07.570 --> 00:04:08.300
Do you have an error handler?

80
00:04:08.300 --> 00:04:09.660
Nope.
Do you have an error handler?

81
00:04:09.660 --> 00:04:11.180
Nope.
Okay, I'm just gonna blow up right here.

82
00:04:11.180 --> 00:04:11.940
Stop.

83
00:04:11.940 --> 00:04:14.910
This is gonna check every single
level until it gets to the route app.

84
00:04:14.910 --> 00:04:19.130
So we should set up a error handler for
api, and the syntax for

85
00:04:19.130 --> 00:04:22.530
that is express passes in
the errors in the first argument.

86
00:04:22.530 --> 00:04:25.420
That's how it knows, if this is the error
handler, it checks the arity or

87
00:04:25.420 --> 00:04:26.670
the signature of your functions.

88
00:04:26.670 --> 00:04:29.000
if it detects that there's an error here,
it's like okay,

89
00:04:29.000 --> 00:04:30.780
this is the error handler,
that's how it does it.

90
00:04:30.780 --> 00:04:33.710
So all you do is register this,
using the same .use method.

91
00:04:33.710 --> 00:04:35.820
And then inside of it,
you can do whatever you want.

92
00:04:35.820 --> 00:04:38.760
I would say, probably log the error so
you can see what it is on the server.

93
00:04:38.760 --> 00:04:43.000
And then send back a status of 500 or
whatever you wanna send back.

94
00:04:43.000 --> 00:04:45.120
But normally, what you would do is,

95
00:04:45.120 --> 00:04:49.500
you would throw custom error messages,
and then inside this function,

96
00:04:49.500 --> 00:04:53.120
you'd be, if it's this error,
send back this status code.

97
00:04:53.120 --> 00:04:55.470
If it's this error,
send back this message.

98
00:04:55.470 --> 00:04:57.860
If it's this error, call this service.

99
00:04:57.860 --> 00:04:59.240
That's what you would do in here.

100
00:04:59.240 --> 00:05:00.880
You could do anything, async,
you could do whatever you want.

101
00:05:00.880 --> 00:05:02.690
But we're just throwing generic errors.

102
00:05:02.690 --> 00:05:03.740
We don't really care.

103
00:05:03.740 --> 00:05:05.160
But that's what you do in production.

104
00:05:05.160 --> 00:05:08.840
You would check the metadata
on this error right here

105
00:05:08.840 --> 00:05:10.600
to determine what you need to do next.

106
00:05:10.600 --> 00:05:11.265
But ultimately,

107
00:05:11.265 --> 00:05:14.690
no matter what you do you have to send
a response otherwise it's gonna hang.

108
00:05:14.690 --> 00:05:16.650
So this has to send a response some way or
another.

109
00:05:18.680 --> 00:05:22.502
So I bring up the test or the challenge.

110
00:05:23.554 --> 00:05:26.400
&gt;&gt; Scott Moss: And
you're gonna set up global app middleware.

111
00:05:27.420 --> 00:05:34.097
You're gonna add the router based
middleware, which is the error handling.

112
00:05:34.097 --> 00:05:38.827
And then you're gonna set up
auth middleware where needed.

113
00:05:38.827 --> 00:05:42.590
So global middleware, the error handling.

114
00:05:44.955 --> 00:05:46.680
&gt;&gt; Scott Moss: And
then set up the auth middleware.

115
00:05:46.680 --> 00:05:48.340
If you don't get to auth
middleware that's totally fine,

116
00:05:48.340 --> 00:05:52.100
you don't have to set it up but
I think it's a good exercise.

117
00:05:54.090 --> 00:05:55.560
So it is-
&gt;&gt; Speaker 3: What

118
00:05:55.560 --> 00:05:56.430
can you define where needed?

119
00:05:57.500 --> 00:05:59.420
&gt;&gt; Scott Moss: Where do
you think it's needed?

120
00:05:59.420 --> 00:06:01.120
It'll work the same no
matter where you put it.

121
00:06:01.120 --> 00:06:01.894
&gt;&gt; Speaker 3: User create.

122
00:06:01.894 --> 00:06:06.880
[INAUDIBLE] it depends
on [INAUDIBLE] right?

123
00:06:06.880 --> 00:06:09.780
&gt;&gt; Scott Moss: Yeah, so I would say for
now just protect the whole /api.

124
00:06:09.780 --> 00:06:10.820
&gt;&gt; Speaker 3: Okay.

125
00:06:10.820 --> 00:06:14.851
&gt;&gt; Scott Moss: Obviously, if you actually
had your sign up ability protected by

126
00:06:14.851 --> 00:06:18.380
authentication nobody could ever sing up,
right?

127
00:06:18.380 --> 00:06:22.010
So I would say, just assume that that
create method is not for signing up.

128
00:06:22.010 --> 00:06:23.820
And it's like your an admin
creating users, or

129
00:06:23.820 --> 00:06:25.770
something like that, not for sign up.

130
00:06:25.770 --> 00:06:28.620
That's a whole another route that
I think is already in the app.

131
00:06:28.620 --> 00:06:31.390
Let me check.
Yeah, there's a sign in,

132
00:06:31.390 --> 00:06:33.900
sign out flow already in there
that's completely separated out.

133
00:06:33.900 --> 00:06:35.660
But yeah,
that's something you don't wanna do.

134
00:06:35.660 --> 00:06:38.190
So you gotta be careful where
you put these middleware

135
00:06:38.190 --> 00:06:42.320
because anything that belongs to that
mount will be affected by that middleware.

136
00:06:42.320 --> 00:06:47.980
So, if you accidentally put authentication
on your sign up flow, nobody

137
00:06:47.980 --> 00:06:50.350
would ever be able to sign up because
they need to be authenticated to sign up.

138
00:06:50.350 --> 00:06:52.780
So that would suck.

139
00:06:52.780 --> 00:06:56.815
So I would say just lock down the whole
API route, set up that error handling,

140
00:06:56.815 --> 00:07:00.931
the function is already there inside
of modules errorHandling, there it is.

141
00:07:00.931 --> 00:07:05.647
And then you also need to,
inside the middleware file here,

142
00:07:05.647 --> 00:07:09.909
you need to just attach the body parsers,
that's it.

143
00:07:12.613 --> 00:07:17.480
&gt;&gt; Scott Moss: So you'll know
this works when it doesn't break.

144
00:07:17.480 --> 00:07:21.540
[LAUGH] And you can actually send JSON.

145
00:07:21.540 --> 00:07:23.790
So if you do a post, you can do some
logging in the controllers, and

146
00:07:23.790 --> 00:07:25.440
you can find out,
let me see where erectile body.

147
00:07:25.440 --> 00:07:27.530
If you logged erectile body, and
it's exactly where you said,

148
00:07:27.530 --> 00:07:28.220
then it totally works.

149
00:07:28.220 --> 00:07:31.000
And you can test that
the authentication works is because,

150
00:07:31.000 --> 00:07:34.570
I don't want to show it, but
if you put the authentication in there,

151
00:07:34.570 --> 00:07:36.950
you'll just get an error back immediately,
you're not authenticated.

152
00:07:36.950 --> 00:07:39.010
It'll immediately say
you're not autenticated.

153
00:07:39.010 --> 00:07:41.298
It won't even execute your controller,
it'll just break.

