WEBVTT

1
00:00:00.000 --> 00:00:01.438
&gt;&gt; Scott Moss: So
we talked a little bit about routing.

2
00:00:01.438 --> 00:00:04.171
We just did some catch alls,
some verbs, some paths.

3
00:00:04.171 --> 00:00:08.699
We're gonna do like some sub routing and
all that fancy stuff next.

4
00:00:08.699 --> 00:00:13.756
So routing, like I said with Express
you have flexible pattern matching,

5
00:00:13.756 --> 00:00:15.290
handles parameters.

6
00:00:15.290 --> 00:00:19.763
And it just handles, in your route
definitions, you can handle parameters,

7
00:00:19.763 --> 00:00:24.398
but in the controllers you can also, you
have access to the query string as well.

8
00:00:24.398 --> 00:00:29.463
You just don't define query strings in
the actual route definitions themselves.

9
00:00:29.463 --> 00:00:34.656
Query strings aren't explicit,
so back to routing.

10
00:00:34.656 --> 00:00:36.280
Express has multirouter support.

11
00:00:36.280 --> 00:00:39.275
So I talked about, yeah,
we had that app, right?

12
00:00:39.275 --> 00:00:42.572
And we declared routes on it with verbs,
but remember I said you can also do sub

13
00:00:42.572 --> 00:00:45.643
routes and different paths that you
mount on, which is very flexible.

14
00:00:45.643 --> 00:00:49.998
It allows you to like, here's the API
behind this and then here's like

15
00:00:49.998 --> 00:00:54.294
authentication over here and
then here is like admin stuff over here.

16
00:00:54.294 --> 00:00:55.645
So you can do that is really cool.

17
00:00:55.645 --> 00:00:58.808
And then they don't really need
to know about each other at all,

18
00:00:58.808 --> 00:01:00.403
they are completely isolated.

19
00:01:00.403 --> 00:01:03.481
But they can also share
global littleware and

20
00:01:03.481 --> 00:01:06.485
global configuration from the app router.

21
00:01:06.485 --> 00:01:08.585
We also have static and
dynamic configuration.

22
00:01:08.585 --> 00:01:12.198
So static configuration is
what we just did, right?

23
00:01:12.198 --> 00:01:17.310
So we declare some routes here.

24
00:01:17.310 --> 00:01:20.746
This is statically, you can also
declare stuff dynamically at run time.

25
00:01:20.746 --> 00:01:24.883
It's really advanced, we will not
get to that, but you can do it.

26
00:01:24.883 --> 00:01:26.982
Support for all HTTP verbs.

27
00:01:26.982 --> 00:01:28.565
This only really applies to rest.

28
00:01:28.565 --> 00:01:32.162
When we get to GraphQL nobody
cares about verbs anymore right?

29
00:01:32.162 --> 00:01:37.818
So yeah, you got get, put,
options, delete, post.

30
00:01:37.818 --> 00:01:39.806
Whatever the verb you got it.

31
00:01:39.806 --> 00:01:41.443
Express has got it.

32
00:01:41.443 --> 00:01:43.155
And it's order based so

33
00:01:43.155 --> 00:01:48.389
what that means is if I were to set up
another route here, check this out.

34
00:01:48.389 --> 00:01:52.709
If I were to say app.get this one, and

35
00:01:52.709 --> 00:02:01.275
I were to say,
&gt;&gt; Scott Moss: If I were to do this and

36
00:02:01.275 --> 00:02:01.968
I were to save it.

37
00:02:01.968 --> 00:02:03.450
And then let's just start this up again.

38
00:02:03.450 --> 00:02:09.406
&gt;&gt; [SOUND]
&gt;&gt; Scott Moss: Because I

39
00:02:09.406 --> 00:02:16.818
did that one first [SOUND]
&gt;&gt; Scott Moss: It should respond first.

40
00:02:20.010 --> 00:02:21.475
&gt;&gt; Scott Moss: Right first true,

41
00:02:21.475 --> 00:02:27.072
that's because I declared that route
before I declared this catch all.

42
00:02:27.072 --> 00:02:30.162
Order does matter in Express,
so keep that in mind.

43
00:02:30.162 --> 00:02:36.495
This get for the index was declared
before this all on every route,

44
00:02:36.495 --> 00:02:43.294
therefore when I did activate this path,
it's response was handled.

45
00:02:43.294 --> 00:02:44.834
But I can show you, and

46
00:02:44.834 --> 00:02:49.635
we will get to this like you can pass
the control of this to the next one.

47
00:02:49.635 --> 00:02:52.176
So you can say, cool,
I want this to run first, but

48
00:02:52.176 --> 00:02:55.033
I don't want it to be the one
that decides what goes back.

49
00:02:55.033 --> 00:02:57.191
I'm gonna pass it on to
the next thing that matches.

50
00:02:57.191 --> 00:03:01.482
And that's when we get into middleware,
so that's where it gets really crazy.

51
00:03:01.482 --> 00:03:02.562
But we'll get there.

52
00:03:02.562 --> 00:03:08.780
So yeah, order based,
&gt;&gt; Scott Moss: Cool.

53
00:03:08.780 --> 00:03:13.777
So the thing about routing in
Express is that you can pretty much

54
00:03:13.777 --> 00:03:15.578
do whatever you want.

55
00:03:15.578 --> 00:03:17.816
At the end of the day,
there's literally nothing you can't do.

56
00:03:17.816 --> 00:03:22.607
And that could be good or bad, because you
can develop all types of patterns that

57
00:03:22.607 --> 00:03:26.913
could benefit you, but it also
doesn't really give you a constraint.

58
00:03:26.913 --> 00:03:30.633
You might have patterns
that are just very wild.

59
00:03:30.633 --> 00:03:33.614
You might have issues with
routes being resolved,

60
00:03:33.614 --> 00:03:38.063
you might have issues about which middle
where is attaching to which route.

61
00:03:38.063 --> 00:03:41.780
Because you can do everything its very
good practice to try to develop some type

62
00:03:41.780 --> 00:03:45.520
of standards for your application,
before you start declaring your routes.

63
00:03:45.520 --> 00:03:49.005
Something that I like to do, and that's
what we're gonna be doing here, is I like

64
00:03:49.005 --> 00:03:52.359
to mount different routers on different
paths that have different purposes.

65
00:03:52.359 --> 00:03:56.186
So let's say I'm building
an app that has an admin side,

66
00:03:56.186 --> 00:04:01.288
it has a customer side where they have
an API, then it has an analytics side,

67
00:04:01.288 --> 00:04:05.833
what I would do is for every single
one of those high level features,

68
00:04:05.833 --> 00:04:08.500
it would be behind a different router.

69
00:04:08.500 --> 00:04:10.826
And then they have their own
configuration associated with them.

70
00:04:10.826 --> 00:04:14.298
Because if I'm exposing API for
my customers to use,

71
00:04:14.298 --> 00:04:18.623
it's probably a different set of
authentication mechanisms that

72
00:04:18.623 --> 00:04:23.352
I'm gonna use there then I would for
my admin APR or for my analytics APR.

73
00:04:23.352 --> 00:04:26.009
So I'm going to mount them
behind different paths.

74
00:04:26.009 --> 00:04:30.236
So for instance, for /API,
use this router, for /Analytics,

75
00:04:30.236 --> 00:04:33.647
use this router, for
/whatever, use this router.

76
00:04:33.647 --> 00:04:38.543
And that router has its own routes inside
of it, and that's what we're gonna see.

77
00:04:38.543 --> 00:04:42.352
So I'm just gonna do a little
bit of demonstration on that and

78
00:04:42.352 --> 00:04:45.650
then we're gonna jump right
into the next example.

79
00:04:45.650 --> 00:04:49.095
So basically [COUGH] what you can do.

80
00:04:49.095 --> 00:04:52.685
I'm just gonna do it right here.

81
00:04:52.685 --> 00:04:54.348
So we have this app right?

82
00:04:54.348 --> 00:04:56.074
And let's say I want to
make another router.

83
00:04:56.074 --> 00:05:00.110
I can come in here and
I can say I want to make a apiRouter.

84
00:05:00.110 --> 00:05:02.004
All right.

85
00:05:02.004 --> 00:05:06.611
And with that I can just come in here and
I can say, express.Router.

86
00:05:06.611 --> 00:05:09.050
Like this, with a capital R and evoke it.

87
00:05:09.050 --> 00:05:12.787
And notice that I use
express.Router not app.

88
00:05:12.787 --> 00:05:15.645
So just that right there
kind of tells you that,

89
00:05:15.645 --> 00:05:19.009
this app router does not care
about this app right here.

90
00:05:19.009 --> 00:05:21.121
We're not even using the same thing.

91
00:05:21.121 --> 00:05:23.900
So they're completely
two different things.

92
00:05:23.900 --> 00:05:26.763
What this apiRouter, is now,
I have a separate router,

93
00:05:26.763 --> 00:05:29.459
I can attach routes to it just
like I did with this app.

94
00:05:29.459 --> 00:05:33.600
So now that I have this
apiRouter I can say apiRouter.

95
00:05:33.600 --> 00:05:38.165
I want you to respond to
a get request on index.

96
00:05:38.165 --> 00:05:39.407
We'll get here in a minute.

97
00:05:39.407 --> 00:05:45.789
And then what I wanna do is same thing,
I'm just gonna say res.json,

98
00:05:45.789 --> 00:05:49.803
and I just gonna go like api: true, right?

99
00:05:49.803 --> 00:05:52.132
So we got that.

100
00:05:52.132 --> 00:05:55.118
Now, remember I said routes
are order based, right?

101
00:05:55.118 --> 00:05:59.914
Can put order base, I just made new
router, I register a Handler for

102
00:05:59.914 --> 00:06:03.209
the index path on the get verb for
that router.

103
00:06:03.209 --> 00:06:06.699
And I did it before this one.

104
00:06:06.699 --> 00:06:10.158
So if were to make a get
request to this path,

105
00:06:10.158 --> 00:06:14.467
am I gonna see api: true or
am I gonna see first: true?

106
00:06:14.467 --> 00:06:16.494
&gt;&gt; Group: first: true.

107
00:06:16.494 --> 00:06:18.067
&gt;&gt; Scott Moss: Okay, wow.

108
00:06:18.067 --> 00:06:19.460
And why is that?

109
00:06:19.460 --> 00:06:21.585
&gt;&gt; Speaker 3: Their
router isn't listening.

110
00:06:21.585 --> 00:06:22.691
It's not connected is it?

111
00:06:22.691 --> 00:06:24.594
&gt;&gt; Scott Moss: It's not
connected exactly yeah.

112
00:06:24.594 --> 00:06:27.928
I never, it just I didn't
even connect it to the app.

113
00:06:27.928 --> 00:06:28.524
It's just here.

114
00:06:28.524 --> 00:06:31.631
I just declared it but I need to like
associate it with this app because

115
00:06:31.631 --> 00:06:33.789
remember by default they
have no association.

116
00:06:33.789 --> 00:06:36.523
I just declared a router that
isn't connected with app.

117
00:06:36.523 --> 00:06:38.869
Everything has to be connected
to the main app here.

118
00:06:38.869 --> 00:06:41.021
The thing that's listening
which is this app.

119
00:06:41.021 --> 00:06:46.610
So yeah, cool story, you declared a route,
but you didn't tell your app about it.

120
00:06:46.610 --> 00:06:49.759
So that's the next thing we would
have to do, so to do that is,

121
00:06:49.759 --> 00:06:52.803
it's an apiRouter, so
hey let's mount it on the API path.

122
00:06:52.803 --> 00:06:59.467
So what I'll do down here, I'll say
app.use, and you can think of use as like,

123
00:06:59.467 --> 00:07:04.276
it's almost the exact same thing as .all,
to be honest.

124
00:07:04.276 --> 00:07:09.220
Use is more like when you do use your
pretty much are saying I'm going

125
00:07:09.220 --> 00:07:13.322
to use middleware here and
not so much a final response.

126
00:07:13.322 --> 00:07:16.655
app.all is like I'm gonna respond here but
they can pretty much be used synonymous.

127
00:07:16.655 --> 00:07:19.861
There's a small difference, but
the difference is not that big.

128
00:07:19.861 --> 00:07:22.252
So we're gonna say app.use.

129
00:07:22.252 --> 00:07:25.218
And we're gonna say for

130
00:07:25.218 --> 00:07:30.856
this path /api we want
to use the apiRouter.

131
00:07:30.856 --> 00:07:35.095
So now when I go to,
when I make a request besides api,

132
00:07:35.095 --> 00:07:40.384
it's gonna activate the apiRouter and
its routes which is index.

133
00:07:40.384 --> 00:07:43.998
So this index is referencing
the index that is mounted on.

134
00:07:43.998 --> 00:07:48.395
This is not the index of our app,
this is the index of the router.

135
00:07:48.395 --> 00:07:50.113
And the router is mounted on the API.

136
00:07:50.113 --> 00:07:52.560
So therefore, this route is /api.

137
00:07:52.560 --> 00:07:58.929
So for instance, if I put a /thing here,
this full route is /api/thing.

138
00:07:58.929 --> 00:08:02.215
Cuz it's mounted at API, so
we can actually test this out.

139
00:08:02.215 --> 00:08:03.456
So let's do that.

140
00:08:05.570 --> 00:08:07.314
&gt;&gt; Scott Moss: And then I'll come here.

141
00:08:07.314 --> 00:08:08.877
I'm already listening.

142
00:08:08.877 --> 00:08:10.073
I'm just gonna restart that, just in case.

143
00:08:13.311 --> 00:08:16.321
&gt;&gt; Scott Moss: And then now if I go and
I run this command again with no API,

144
00:08:16.321 --> 00:08:17.929
you see I still get first true.

145
00:08:17.929 --> 00:08:25.242
I didn't hit the API, but
now when I say /api I get API true.

146
00:08:25.242 --> 00:08:26.790
Right, cuz I hit the API.

147
00:08:26.790 --> 00:08:32.169
And then if I go /api/whatever,
I'm not gonna get anything because,

148
00:08:32.169 --> 00:08:37.650
I'm sorry, I'm gonna get okay false
because it hit right here, right.

149
00:08:37.650 --> 00:08:40.501
This catch all is gonna prevent any 404.

150
00:08:40.501 --> 00:08:44.127
No matter what I do, this catch
all's gonna respond, so right now my

151
00:08:44.127 --> 00:08:48.395
API We'll never have a 404 because
there's always a catch all at the bottom.

152
00:08:48.395 --> 00:08:49.196
Yes?

153
00:08:49.196 --> 00:08:51.550
&gt;&gt; Speaker 4: Constap equals express,

154
00:08:51.550 --> 00:08:56.045
would that also work if
you did express.router?

155
00:08:56.045 --> 00:08:59.199
&gt;&gt; Scott Moss: Would what also work?

156
00:08:59.199 --> 00:09:04.249
&gt;&gt; Speaker 4: Would the app run
if it was constap=express.router?

157
00:09:04.249 --> 00:09:06.792
&gt;&gt; Scott Moss: No,
because you need to mount it.

158
00:09:06.792 --> 00:09:11.695
Well you need to mount a router to
something that's eventually listening.

159
00:09:11.695 --> 00:09:16.084
So if you made app a router, well,
you can't listen on a router, so

160
00:09:16.084 --> 00:09:17.934
you wouldn't do anything.

161
00:09:17.934 --> 00:09:20.747
It would execute and
it would exit immediately, right?

162
00:09:20.747 --> 00:09:23.935
Cuz the reason our server's running
right now, the thing about node,

163
00:09:23.935 --> 00:09:26.181
node what it does is it's asynchronous,
right?

164
00:09:26.181 --> 00:09:30.512
So it will run your code, and then
anything that's async gets put in a task,

165
00:09:30.512 --> 00:09:31.059
a queue.

166
00:09:31.059 --> 00:09:32.689
And it's gonna come back as an executed.

167
00:09:32.689 --> 00:09:34.935
When that queue is
emptied Node just exits.

168
00:09:34.935 --> 00:09:37.349
There's nothing, there's no more
work to be done so it stops.

169
00:09:37.349 --> 00:09:42.192
The reason why our code is still
running right now on our server

170
00:09:42.192 --> 00:09:45.187
is because we are listening on a port.

171
00:09:45.187 --> 00:09:46.304
There's always something to be done.

172
00:09:46.304 --> 00:09:47.218
There's always something listening.

173
00:09:47.218 --> 00:09:48.720
That event queue is always there.

174
00:09:48.720 --> 00:09:50.016
So that's why it's there.

175
00:09:50.016 --> 00:09:53.318
If we did what he's suggesting
there would be nothing listening.

176
00:09:53.318 --> 00:09:54.993
Therefore, the code
would execute just fine.

177
00:09:54.993 --> 00:09:56.235
And then it would just exit immediately.

178
00:09:56.235 --> 00:09:58.585
Your script would be
done before you blink.

179
00:09:58.585 --> 00:09:59.592
Nothing would happen.

180
00:09:59.592 --> 00:10:02.308
But it'll execute the code,
just nothing will happen.

181
00:10:02.308 --> 00:10:06.242
So yeah, eventually a router has to
be attached to some root app that is

182
00:10:06.242 --> 00:10:08.256
listening to some port somewhere.

183
00:10:08.256 --> 00:10:11.595
And that's how you get this to happen.

184
00:10:11.595 --> 00:10:16.018
&gt;&gt; Speaker 5: Is it best practice to
break out your apiRouter into a separate

185
00:10:16.018 --> 00:10:17.811
file and then import it?

186
00:10:17.811 --> 00:10:18.717
&gt;&gt; Scott Moss: Yes.

187
00:10:18.717 --> 00:10:21.227
&gt;&gt; Speaker 5: Because you said it's
still going to be order-based.

188
00:10:21.227 --> 00:10:25.706
So you can set up the order of
this particular router or route,

189
00:10:25.706 --> 00:10:29.342
the API Manage that separately,
import it here.

190
00:10:29.342 --> 00:10:30.240
&gt;&gt; Scott Moss: Yep.
&gt;&gt; Speaker 5: Okay.

191
00:10:30.240 --> 00:10:31.286
&gt;&gt; Scott Moss: That's
exactly what we're gonna do.

192
00:10:31.286 --> 00:10:34.471
So I'm glad you're seeing that pattern,
cuz yep, you can pretty much see it, yeah.

193
00:10:34.471 --> 00:10:37.777
Cuz you could imagine this apiRouter's
gonna have tons of routes,

194
00:10:37.777 --> 00:10:39.058
tons of configurations.

195
00:10:39.058 --> 00:10:41.590
And inside of it,
it might have its own subrouters.

196
00:10:41.590 --> 00:10:45.137
For api/todos,
here's the to-do router, right?

197
00:10:45.137 --> 00:10:47.227
And then there's so much configuration.

198
00:10:47.227 --> 00:10:51.027
You you totally wanna Make sure you
don't put all that in one file.

199
00:10:51.027 --> 00:10:53.775
One, cuz you're not gonna
be able to test it, two,

200
00:10:53.775 --> 00:10:56.848
you're gonna have merge
conflicts everywhere, [LAUGH].

201
00:10:56.848 --> 00:10:58.925
So yeah, totally don't do that.

202
00:10:58.925 --> 00:10:59.844
And remember that order,

203
00:10:59.844 --> 00:11:02.192
the whole thing about order
matters applies everywhere, right?

204
00:11:02.192 --> 00:11:06.185
So if I had this apiRouter, and

205
00:11:06.185 --> 00:11:11.253
I make another route on the apiRouter,

206
00:11:11.253 --> 00:11:18.178
for a post on the same row,
then, I'm sorry hold on.

207
00:11:18.178 --> 00:11:24.485
Lets do just another get for.

208
00:11:24.485 --> 00:11:27.132
We'll see that one and
then what we'll do we'll say star here.

209
00:11:27.132 --> 00:11:27.652
There we go.

210
00:11:34.011 --> 00:11:34.946
&gt;&gt; Scott Moss: There we go.

211
00:11:34.946 --> 00:11:41.117
So because I register the index of
the api route first before I register

212
00:11:41.117 --> 00:11:46.869
the catch all, if I were to go
to /api/anything else, we should

213
00:11:46.869 --> 00:11:53.266
see it respond with apiAll versus what
we did before which was okay true.

214
00:11:53.266 --> 00:11:56.472
All right so let's try that one.

215
00:11:56.472 --> 00:11:59.771
So if I go to api, api true.

216
00:11:59.771 --> 00:12:05.118
If I go to api/ anything
else I should see apiAll.

217
00:12:05.118 --> 00:12:07.222
All right, everybody follow me there?

218
00:12:07.222 --> 00:12:09.222
Let's go back.

219
00:12:09.222 --> 00:12:10.661
I set up a catchall.

220
00:12:10.661 --> 00:12:14.132
So, let's diagram what's happening here,
on this route.

221
00:12:14.132 --> 00:12:16.143
So, we come through.

222
00:12:16.143 --> 00:12:22.142
We make a GET request to /.

223
00:12:22.142 --> 00:12:23.934
Right, so we make a GET request to /.

224
00:12:23.934 --> 00:12:27.948
What's gonna happen is express is
going to look It's gonna come in here.

225
00:12:27.948 --> 00:12:32.660
It's gonna be like, okay, you're at /,
but then we're actually at /api.

226
00:12:32.660 --> 00:12:35.986
So it's like okay, cool, you're at /api,
let me execute this router.

227
00:12:35.986 --> 00:12:37.277
So now we're inside of this router.

228
00:12:37.277 --> 00:12:39.266
So now express is up here.

229
00:12:39.266 --> 00:12:43.208
And because the route that we hit was
just /api, and it was a GET request,

230
00:12:43.208 --> 00:12:44.999
it actually stopped right here.

231
00:12:44.999 --> 00:12:49.490
It was like,
cool this satisfies that, /api, root,

232
00:12:49.490 --> 00:12:54.662
which is the route, get verb,
yeah cool, I'll execute that.

233
00:12:54.662 --> 00:13:01.832
But then the next time we did GET, we set
/api/whatever, it did the same thing.

234
00:13:01.832 --> 00:13:04.289
It came down as like,
okay, cool, api's here.

235
00:13:04.289 --> 00:13:09.790
Activate that router Nope,
that's not satisfy that.

236
00:13:09.790 --> 00:13:14.654
Okay, here we go we got the .all so
any verb, okay cool, any paths or anything

237
00:13:14.654 --> 00:13:19.914
that is not this is any verb I'm going to
go ahead and run that, that's what happen.

238
00:13:19.914 --> 00:13:21.306
Before when I get rid of this,

239
00:13:21.306 --> 00:13:24.442
if I want to get rid of this the reason
to execute this one down here.

240
00:13:24.442 --> 00:13:29.304
Is because it still comes in here,
that api, goes apiRouter.

241
00:13:29.304 --> 00:13:35.144
It's like, I don't have anything for
apiRouter that happens here,

242
00:13:35.144 --> 00:13:40.151
so I'm gonna go to the next route
that satisfies this request and

243
00:13:40.151 --> 00:13:44.153
that's this one,
even though it's upper level.

244
00:13:44.153 --> 00:13:47.503
It's still serial, it's still in order,
but it's nested, right?

245
00:13:47.503 --> 00:13:48.752
This is all still in order.

246
00:13:48.752 --> 00:13:54.250
This apiRouter is in front of this app.

247
00:13:54.250 --> 00:13:57.191
And it has its own nested routes, but
it eventually comes out, it's a tree.

248
00:13:57.191 --> 00:13:59.472
It comes out of that tree to the parent
and it goes back down, right?

249
00:13:59.472 --> 00:14:02.141
It's a depth-first,
it does depth-first routing, right?

250
00:14:02.141 --> 00:14:03.790
Not breadth-first.

251
00:14:03.790 --> 00:14:05.987
So it's gonna go all the way
down to the root, and

252
00:14:05.987 --> 00:14:08.251
be like, I don't know what I'm doing here.

253
00:14:08.251 --> 00:14:11.310
Let me go back up, check some more,
go back up, check some more.

254
00:14:11.310 --> 00:14:12.014
So it's depth first.

255
00:14:12.014 --> 00:14:16.308
Anybody's who's ever done binary
searches or stuff like that,

256
00:14:16.308 --> 00:14:19.129
it's a depth first versus a breath first.

257
00:14:19.129 --> 00:14:21.344
The difference is breath first is like,

258
00:14:21.344 --> 00:14:23.828
let me check everything
on this level first.

259
00:14:23.828 --> 00:14:25.700
Before I go down one level, is like,

260
00:14:25.700 --> 00:14:28.079
I'm gonna go all the way down
until I can go down anymore.

261
00:14:28.079 --> 00:14:29.316
To the leaf.

262
00:14:29.316 --> 00:14:32.140
Then I'm gonna come back up and
do it again, come back up and do it again.

263
00:14:32.140 --> 00:14:34.708
And it's going to do that until it
figures out which one it finds.

264
00:14:34.708 --> 00:14:35.963
So, that's what's happening here.

