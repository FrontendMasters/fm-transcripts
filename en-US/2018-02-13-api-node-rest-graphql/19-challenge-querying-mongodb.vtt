WEBVTT

1
00:00:00.070 --> 00:00:03.436
&gt;&gt; Scott Moss: I'm gonna
check out to lesson six.

2
00:00:03.436 --> 00:00:08.448
And then inside of here, if you go to
modules, query.js, back into this file.

3
00:00:08.448 --> 00:00:11.054
Basically, what you are gonna be doing,

4
00:00:11.054 --> 00:00:14.786
is your gonna be trying to get
the test to pass for the query.

5
00:00:14.786 --> 00:00:19.687
So if you run the test right now,
&gt;&gt; Scott Moss: You should get some failing

6
00:00:19.687 --> 00:00:24.227
test for the query, they're uncommented
now, should be four of them.

7
00:00:24.227 --> 00:00:27.315
Two of them are already passing,
cuz they're very naive tests.

8
00:00:27.315 --> 00:00:31.169
But four of them are failing,
and we need to get them to pass.

9
00:00:31.169 --> 00:00:34.515
And we also need to make sure the ones
that are passing are not falsely passing,

10
00:00:34.515 --> 00:00:36.046
which I'm sure they are right now.

11
00:00:36.046 --> 00:00:36.586
So basically,

12
00:00:36.586 --> 00:00:39.332
what you're gonna do is you're gonna
come in here inside of this controller.

13
00:00:41.574 --> 00:00:42.608
&gt;&gt; Scott Moss: The controller object.

14
00:00:42.608 --> 00:00:48.761
And you're gonna create the appropriate
database calls for each action.

15
00:00:48.761 --> 00:00:52.620
I didn't show you how to do this yet, so
we're gonna walk through some examples

16
00:00:52.620 --> 00:00:55.570
of each single one to show you
how to use it with Mongoose.

17
00:00:55.570 --> 00:00:57.136
So let's talk about that for a minute.

18
00:00:57.136 --> 00:01:02.004
Let's just go, let me see,
that's a document, that's a document,

19
00:01:02.004 --> 00:01:04.694
that's a document, that's a model.

20
00:01:04.694 --> 00:01:06.343
Okay, cool, let's do this.

21
00:01:06.343 --> 00:01:08.062
I'm just gonna come down here,
blank canvas.

22
00:01:10.744 --> 00:01:13.701
&gt;&gt; Scott Moss: And
let's talk about using a model and

23
00:01:13.701 --> 00:01:16.760
getting a document from the database.

24
00:01:16.760 --> 00:01:18.685
And all the different ways we
can do that using Mongoose.

25
00:01:18.685 --> 00:01:21.277
So let's say, I have a model in Mongoose,

26
00:01:21.277 --> 00:01:24.664
and in our case a model is a song,
a user, or a playlist.

27
00:01:24.664 --> 00:01:27.040
Those are the only models we have, right?

28
00:01:27.040 --> 00:01:30.070
So let's just say we have a song, okay?

29
00:01:30.070 --> 00:01:35.860
I can use that song model,
and let's say I have an id.

30
00:01:35.860 --> 00:01:40.307
I have an id from the parameter, and I
want to find the song with that given id.

31
00:01:40.307 --> 00:01:44.463
Using Mongoose, I can say, song.findById.

32
00:01:44.463 --> 00:01:47.145
I could pass in that id like that.

33
00:01:47.145 --> 00:01:48.608
This is gonna return a promise.

34
00:01:48.608 --> 00:01:53.690
By default Mongoose uses their
own implementation of promises.

35
00:01:53.690 --> 00:01:55.669
I converted it to use the native promises,
so

36
00:01:55.669 --> 00:01:58.126
whatever the native promise
has you have here, right?

37
00:01:58.126 --> 00:01:59.718
But actually what happens,

38
00:01:59.718 --> 00:02:03.512
is this thing actually returns
a query what's called a monologue.

39
00:02:03.512 --> 00:02:04.627
Come back.

40
00:02:04.627 --> 00:02:10.827
It actually returns a mongo query
object which has a promise on it.

41
00:02:10.827 --> 00:02:15.332
A query object, we'll talk briefly about
it, but we won't really use it here.

42
00:02:15.332 --> 00:02:19.699
This allows you to drill down your query,
kinda like SQL where you're like,

43
00:02:19.699 --> 00:02:22.761
I wanna findById, really,
you wouldn't need a query.

44
00:02:22.761 --> 00:02:24.236
But let's say you did a generic find.

45
00:02:24.236 --> 00:02:26.757
I wanna find all songs
where created at was this.

46
00:02:26.757 --> 00:02:33.038
If this is regex is true, the exact text
match, this, that's the query objects.

47
00:02:33.038 --> 00:02:34.210
You wanna drill down on it.

48
00:02:34.210 --> 00:02:35.778
We're not gonna do that right now.

49
00:02:35.778 --> 00:02:37.519
So findById's pretty simple.

50
00:02:37.519 --> 00:02:40.687
But if you just want the pure promise,
you can just go ahead and call it .exec,

51
00:02:40.687 --> 00:02:41.707
I recommend doing that.

52
00:02:41.707 --> 00:02:44.958
This means execute the query,
that's what that means.

53
00:02:44.958 --> 00:02:49.000
So if you put .exec on anything
that starts with find, so for

54
00:02:49.000 --> 00:02:51.142
instance song.findById, and

55
00:02:51.142 --> 00:02:56.072
then put .exec after that means there's
no more query coming out there.

56
00:02:56.072 --> 00:02:58.539
For instance,
I can come here and say .where,

57
00:02:58.539 --> 00:03:02.946
.limit,
&gt;&gt; Scott Moss: .whatever.

58
00:03:02.946 --> 00:03:06.193
When I do .exec, that means there's
nothing else coming out there,

59
00:03:06.193 --> 00:03:07.414
that's what that means.

60
00:03:07.414 --> 00:03:09.309
It means execute this query,
give me the promise.

61
00:03:09.309 --> 00:03:14.171
Because I'm not doing any query here, I'm
just gonna jump straight to execute.exec.

62
00:03:14.171 --> 00:03:18.034
This returns a promise, and
you can probably just go ahead,

63
00:03:18.034 --> 00:03:21.463
asynch await it, so
I have a song here, there you go.

64
00:03:21.463 --> 00:03:22.881
So that would be a song.

65
00:03:25.119 --> 00:03:26.807
&gt;&gt; Scott Moss: If you've never used
async await, don't worry about it,

66
00:03:26.807 --> 00:03:27.396
just use a promise.

67
00:03:27.396 --> 00:03:29.335
If you're just like, what is that?

68
00:03:29.335 --> 00:03:33.655
It's cool, you can use promises,
it's totally the same thing.

69
00:03:33.655 --> 00:03:36.918
I just like to use async await,
cuz it's legit.

70
00:03:38.600 --> 00:03:40.053
&gt;&gt; Scott Moss: So
that's how you find one by id.

71
00:03:40.053 --> 00:03:44.433
Let's say, we want to find one,
not by an id, but by name.

72
00:03:44.433 --> 00:03:50.031
So we'd say, Song.findOne.

73
00:03:50.031 --> 00:03:52.342
And then we'd pass in
the query that we want.

74
00:03:52.342 --> 00:03:56.243
So we wanna findOne whose
name equals thisname.

75
00:03:57.949 --> 00:03:59.619
&gt;&gt; Scott Moss: That would give us that,
and then we could also call .exec.

76
00:03:59.619 --> 00:04:02.765
And that's you would findOne by name.

77
00:04:02.765 --> 00:04:06.504
Or whatever property you wanna pass in
here, whatever thing you wanna search by.

78
00:04:06.504 --> 00:04:14.888
But note, when you created your schema
you didn't create any indexes by default.

79
00:04:14.888 --> 00:04:18.023
So when you start thinking about
how you wanna search for data,

80
00:04:18.023 --> 00:04:20.190
this is just a data modeling thing.

81
00:04:20.190 --> 00:04:23.136
Make sure you're creating indexes on
things you wanna search to keep your

82
00:04:23.136 --> 00:04:23.761
queries fast.

83
00:04:23.761 --> 00:04:27.052
If you know anything about indexes and
databases,

84
00:04:27.052 --> 00:04:31.875
it's basically just a place where
the database references properties and

85
00:04:31.875 --> 00:04:34.953
values so
they can look them up faster, right?

86
00:04:34.953 --> 00:04:36.915
It's like a constant
time to look up almost.

87
00:04:36.915 --> 00:04:39.016
It's a difference between
having an array or an object.

88
00:04:39.016 --> 00:04:40.561
An object is constant time, right?

89
00:04:40.561 --> 00:04:43.881
It goes straight there
whereas an array is linear.

90
00:04:43.881 --> 00:04:47.120
So the bigger the array,
the longer it's gonna take to search.

91
00:04:47.120 --> 00:04:51.695
Constant time is O1 so
it'll get it instantly

92
00:04:56.502 --> 00:04:57.291
&gt;&gt; Scott Moss: So you got that.

93
00:04:57.291 --> 00:05:01.420
Let's say you wanted to create a song,
all right, so many ways you can do that.

94
00:05:01.420 --> 00:05:03.777
But my favorite way is
to use Song.create and

95
00:05:03.777 --> 00:05:07.132
then pass in the object that
satisfies the song schema, right?

96
00:05:07.132 --> 00:05:08.164
So you can just do that.

97
00:05:08.164 --> 00:05:10.150
You can also do something like this.

98
00:05:12.565 --> 00:05:15.752
&gt;&gt; Scott Moss: You can say,
new Song and then you pass that in.

99
00:05:15.752 --> 00:05:19.573
And then afterwards you would
have to call save to save it.

100
00:05:22.522 --> 00:05:23.498
&gt;&gt; Scott Moss: That's how you create.

101
00:05:23.498 --> 00:05:26.033
And then, let's say you wanted to update.

102
00:05:26.033 --> 00:05:31.791
You could say Song.findOneAndUpdate.

103
00:05:34.739 --> 00:05:37.404
&gt;&gt; Scott Moss: You pass in
the thing you wanna find by.

104
00:05:37.404 --> 00:05:39.911
I wanna find the one with thisname,

105
00:05:39.911 --> 00:05:43.767
and I wanna update it with
a new name called othername.

106
00:05:43.767 --> 00:05:48.828
Then I'm gonna pass in these
options called new: true.

107
00:05:48.828 --> 00:05:53.148
New: true is important, it just means
return the new updated document

108
00:05:53.148 --> 00:05:56.393
from this query, and
not the one before I updated it.

109
00:05:56.393 --> 00:05:58.612
If you don't put new: true it will give
you the old one before you updated it.

110
00:05:58.612 --> 00:06:01.233
If you put new: true it will give
it to you after it updated it.

111
00:06:01.233 --> 00:06:02.327
That's probably what you want.

112
00:06:02.327 --> 00:06:04.196
You probably wanna get
it after you updated it.

113
00:06:04.196 --> 00:06:05.009
So you gotta do new: true.

114
00:06:05.009 --> 00:06:06.146
I don't know why that's not a default.

115
00:06:06.146 --> 00:06:07.714
I don't know why you would
never not want that.

116
00:06:07.714 --> 00:06:10.825
But, yeah, so
that's how you find one and update.

117
00:06:10.825 --> 00:06:16.759
You can also do, as you probably guessed,
findByIdAndUpdate.

118
00:06:16.759 --> 00:06:19.499
And you just pass on the id in here,
instead of an object.

119
00:06:25.746 --> 00:06:29.312
&gt;&gt; Speaker 2: The freeze and the findBy
param we always just be finding and

120
00:06:29.312 --> 00:06:30.390
updating later?

121
00:06:30.390 --> 00:06:33.229
&gt;&gt; Scott Moss: Right, so
the next one is because, like you said,

122
00:06:33.229 --> 00:06:35.221
you're gonna be finding by param.

123
00:06:35.221 --> 00:06:37.168
So the param's gonna find it, and

124
00:06:37.168 --> 00:06:40.538
it's gonna pass the document
along to the request object.

125
00:06:40.538 --> 00:06:42.136
So you need a way to update it, right?

126
00:06:42.136 --> 00:06:46.280
So the way you would do that is,
all this was model level stuff.

127
00:06:46.280 --> 00:06:47.407
Let me just label that.

128
00:06:47.407 --> 00:06:49.288
This is all model level stuff.

129
00:06:49.288 --> 00:06:52.377
But I also can do the model.

130
00:06:52.377 --> 00:06:55.448
The updating stuff, like you're talking
about, that's document level, and

131
00:06:55.448 --> 00:06:57.130
that's what we're gonna talk about next.

132
00:06:57.130 --> 00:07:02.935
So once you already have a document, as
in from the params, then you can do this.

133
00:07:02.935 --> 00:07:05.648
So once you already have a document,
like for instance, we have song,

134
00:07:05.648 --> 00:07:07.289
song is a document, here it is right here.

135
00:07:07.289 --> 00:07:12.462
What we can do is you can call .save on
that if you want, and that will save it.

136
00:07:12.462 --> 00:07:15.423
So for instance if you had a song,
you already have this song right here.

137
00:07:15.423 --> 00:07:17.211
And you're like you know
what your name is now this.

138
00:07:17.211 --> 00:07:19.057
Your name = whatever this is now.

139
00:07:19.057 --> 00:07:23.179
And I wanna call song.save, and
it's gonna save in database.

140
00:07:23.179 --> 00:07:24.828
This is async so you can await this.

141
00:07:24.828 --> 00:07:27.533
This also returns a promise.

142
00:07:27.533 --> 00:07:31.050
So that would give you the new song.

143
00:07:31.050 --> 00:07:33.443
So you basically just attach
the properties you want to it.

144
00:07:33.443 --> 00:07:37.061
You can do merge, you can do whatever you
want, and then whenever you call .save,

145
00:07:37.061 --> 00:07:39.144
that's gonna issue
the right to the database.

146
00:07:39.144 --> 00:07:42.582
Because this actual object you get
back is not just a regular object,

147
00:07:42.582 --> 00:07:44.844
it's a reference to
a document that is live.

148
00:07:44.844 --> 00:07:45.692
It's a live reference.

149
00:07:45.692 --> 00:07:47.317
It's not a JSON thing.

150
00:07:47.317 --> 00:07:52.739
If you want this to JSON you would have
to call .lean, which turns it to JSON.

151
00:07:52.739 --> 00:07:58.614
Or when you get it back you don't have to
say song.to JSON or to object to cover it.

152
00:07:58.614 --> 00:08:03.372
But by default it's gonna be an actual
live document that has a save method

153
00:08:03.372 --> 00:08:06.915
on it, a remove method on it,
a populate method on it.

154
00:08:06.915 --> 00:08:10.967
It will have all those methods on it
that it can use to act on itself.

155
00:08:13.742 --> 00:08:17.669
&gt;&gt; Scott Moss: So that's how you would
save an already gathered document,

156
00:08:17.669 --> 00:08:19.830
you would just call .save on it.

157
00:08:19.830 --> 00:08:22.396
So that's a document level thing,
so you'll hit song.save,

158
00:08:31.288 --> 00:08:33.179
&gt;&gt; Scott Moss: Right, so you're gonna use,

159
00:08:33.179 --> 00:08:36.535
let me see is there anything
else you might use in here.

160
00:08:36.535 --> 00:08:40.994
You also have findOne and
remove, findById and remove.

161
00:08:44.581 --> 00:08:46.678
&gt;&gt; Scott Moss: And yeah,
that's pretty much it, and this works for

162
00:08:46.678 --> 00:08:48.459
every single model in our database, right?

163
00:08:48.459 --> 00:08:49.957
It's all the same, so
it doesn't really matter.

164
00:08:49.957 --> 00:08:51.303
So you're gonna take this.

165
00:08:51.303 --> 00:08:55.992
What we learn here about finding one,
creating, finding one and

166
00:08:55.992 --> 00:08:58.560
update, removing, populating.

167
00:08:58.560 --> 00:09:02.360
And we're gonna fill out this stuff.

168
00:09:03.930 --> 00:09:06.490
So for instance, let's just walk
through create one together.

169
00:09:06.490 --> 00:09:08.800
So createOne, takes a model, takes a body.

170
00:09:09.850 --> 00:09:11.642
Judging by those two things,
what do you think we need to do?

171
00:09:11.642 --> 00:09:15.387
&gt;&gt; Speaker 3: Model.create,
model.create, hit return.

172
00:09:15.387 --> 00:09:16.928
&gt;&gt; Scott Moss: Right, exactly, so

173
00:09:16.928 --> 00:09:21.390
we're gonna return model.create
which returns a promise.

174
00:09:21.390 --> 00:09:22.000
And what do I wanna create?

175
00:09:22.000 --> 00:09:24.567
The body, exactly, that's it.

176
00:09:24.567 --> 00:09:26.726
You don't have to call .exec on create.

177
00:09:26.726 --> 00:09:28.840
.exec is for
anything that starts off with find.

178
00:09:28.840 --> 00:09:30.302
So that's how you would create one.

179
00:09:30.302 --> 00:09:33.669
You just called model.create and
you pass in a body, done.

180
00:09:33.669 --> 00:09:38.561
So updateOne, notice the name of
the arguments, updateOne has a document,

181
00:09:38.561 --> 00:09:40.148
it does not have a model.

182
00:09:40.148 --> 00:09:41.169
This is a document.

183
00:09:41.169 --> 00:09:44.850
We talked about how to
update documents down here.

184
00:09:46.974 --> 00:09:48.739
&gt;&gt; Scott Moss: You put the properties on,
you hit save.

185
00:09:48.739 --> 00:09:50.320
You can do a mix in, whatever you want.

186
00:09:50.320 --> 00:09:52.096
Put those properties on there,
you save it.

187
00:09:52.096 --> 00:09:55.278
So notice that deleteOne
is also a document.

188
00:09:55.278 --> 00:09:57.786
Documents know how to remove themselves,
remember that.

189
00:09:57.786 --> 00:10:03.978
But I don't think
the .remove returns itself.

190
00:10:03.978 --> 00:10:06.254
I don't know,
can't remember how to figure that out.

191
00:10:06.254 --> 00:10:11.176
Document ToGet,
the reason we're gonna do this right

192
00:10:11.176 --> 00:10:14.498
now because it's a trick question.

193
00:10:14.498 --> 00:10:17.980
You just literally just return
the same thing and a promise so

194
00:10:17.980 --> 00:10:19.828
we can satisfy the promise API.

195
00:10:19.828 --> 00:10:21.440
It's cuz the document's already there.

196
00:10:21.440 --> 00:10:23.070
It's literally already there.

197
00:10:23.070 --> 00:10:24.832
This is just here,
just in case, like I said,

198
00:10:24.832 --> 00:10:27.921
you wanted to do something extra like,
I need to populate this thing first.

199
00:10:27.921 --> 00:10:29.323
Or I want to get rid of the id,

200
00:10:29.323 --> 00:10:32.077
if you wanted to do something
with the properties on it.

201
00:10:32.077 --> 00:10:35.455
But at the end of the day,
the params middleware already found it.

202
00:10:35.455 --> 00:10:39.554
So we're just returning what I found,
so this just passes straight through.

203
00:10:39.554 --> 00:10:44.209
The getAll, that takes some model,
so imagine what we have to do here.

204
00:10:44.209 --> 00:10:48.133
We have to find every single thing
on this model, no parameters passed.

205
00:10:48.133 --> 00:10:51.487
And then the findByParam,
takes a model and then a id.

206
00:10:51.487 --> 00:10:53.450
So you can imagine what
it needs to do with that.

207
00:10:55.564 --> 00:10:58.761
&gt;&gt; Scott Moss: So once you get all those,
you should go to hit your test, and

208
00:10:58.761 --> 00:10:59.963
they should all pass.

209
00:11:03.170 --> 00:11:06.255
&gt;&gt; Scott Moss: So
I'm wanna leave this up right here.

210
00:11:06.255 --> 00:11:09.112
Basically, your goal is to
get all the tests to pass.

211
00:11:09.112 --> 00:11:11.691
After this exercise,
all your tests should be passing.

212
00:11:11.691 --> 00:11:16.439
So follow the test, read the test,
you're gonna be working with these five

213
00:11:16.439 --> 00:11:21.220
functions right here, or six,
I'm sorry, six functions.

214
00:11:21.220 --> 00:11:22.531
And all your tests should be passing.

