WEBVTT

1
00:00:00.012 --> 00:00:03.624
&gt;&gt; Scott Moss: All right, so

2
00:00:03.624 --> 00:00:08.150
hope this challenge was fun for
everybody with the test and

3
00:00:08.150 --> 00:00:11.380
all and it wasn't too difficult and
everybody was able to get through it.

4
00:00:11.380 --> 00:00:13.780
If not, we're gonna do that just now.

5
00:00:13.780 --> 00:00:18.748
So if you, let me check out,
to my solution this should be lesson five.

6
00:00:18.748 --> 00:00:25.845
Lesson five, I don't want to put

7
00:00:25.845 --> 00:00:31.170
these changes in there.

8
00:00:31.170 --> 00:00:31.680
There we go.

9
00:00:31.680 --> 00:00:35.130
So if we run the test on lesson five,
solution or

10
00:00:35.130 --> 00:00:37.116
if you've not checked out the solution,
then I am.

11
00:00:38.580 --> 00:00:39.990
What's failing?

12
00:00:39.990 --> 00:00:43.820
I got the queries enabled,
just ignore my query test.

13
00:00:43.820 --> 00:00:48.320
But all the model specs are passing, so

14
00:00:48.320 --> 00:00:51.470
we can go take a look at that and
see how we can satisfy those models.

15
00:00:51.470 --> 00:00:53.310
Let's start with the playlist model.

16
00:00:53.310 --> 00:00:58.980
So if we go there, playlist.spec.

17
00:00:58.980 --> 00:01:06.190
Over there, .model over here.

18
00:01:06.190 --> 00:01:07.860
Close that, okay.

19
00:01:07.860 --> 00:01:12.480
So for the playlist model, if we look at
the test it says it should have a title,

20
00:01:12.480 --> 00:01:14.520
that's misspelled, tilted.

21
00:01:14.520 --> 00:01:20.070
Should have a title to exist,
should have a type

22
00:01:20.070 --> 00:01:25.150
that's equal to string and it should have
a required property that's an array.

23
00:01:25.150 --> 00:01:26.400
So, if we go look.

24
00:01:26.400 --> 00:01:27.000
Here we go.

25
00:01:27.000 --> 00:01:27.830
Type of string.

26
00:01:27.830 --> 00:01:34.720
Requires an array, true and then playlists
must have titles is a custom error, okay.

27
00:01:34.720 --> 00:01:40.600
If we look at this next one, should
have songs, should exist, which it does.

28
00:01:40.600 --> 00:01:42.178
Should be in an array, which it is.

29
00:01:42.178 --> 00:01:43.740
And then song0.type.

30
00:01:43.740 --> 00:01:47.196
So, right there, that's telling you
that the first thing in the array is

31
00:01:47.196 --> 00:01:49.170
probably an object with a type property.

32
00:01:49.170 --> 00:01:51.530
And if you did some more deduction,
you would realize,

33
00:01:51.530 --> 00:01:53.380
like it's just the same thing as this.

34
00:01:53.380 --> 00:01:55.010
It's got a type property.

35
00:01:55.010 --> 00:01:56.820
Type is a key word in Mongoose.

36
00:01:56.820 --> 00:02:01.379
In fact, if you needed a property called
type, and you want it to be string,

37
00:02:01.379 --> 00:02:02.821
you couldn't do that.

38
00:02:02.821 --> 00:02:07.710
You'd have to say type,
type:string in order to get around that.

39
00:02:07.710 --> 00:02:13.230
You can also tell Mongoose what's typekey.

40
00:02:13.230 --> 00:02:15.660
I think it's typekey,
you can get a different key if you want.

41
00:02:15.660 --> 00:02:17.550
So it's not type,
it would be something else.

42
00:02:18.760 --> 00:02:19.549
By default it's type.

43
00:02:21.180 --> 00:02:22.510
Small tip.

44
00:02:22.510 --> 00:02:27.939
So, expects the first thing in there
to be an object, who's type equals

45
00:02:27.939 --> 00:02:34.460
mongoose.Schema.Types.ObjectID, and
who's reference is a song.

46
00:02:34.460 --> 00:02:39.310
This is setting up an association that
we can later populate, all right?

47
00:02:41.490 --> 00:02:46.710
Okay, and then, it says, it expects
favorite to exist, expects it to be

48
00:02:46.710 --> 00:02:51.960
a type boolean, expects it to be required
and expects the default to equal false.

49
00:02:51.960 --> 00:02:53.330
Everybody got that?

50
00:02:53.330 --> 00:02:55.070
Looks very similar to that.

51
00:02:55.070 --> 00:03:00.297
Okay, so now we can look at the song spec

52
00:03:01.547 --> 00:03:05.142
&gt;&gt; Scott Moss: And I'll go over there.

53
00:03:08.920 --> 00:03:10.435
&gt;&gt; Scott Moss: So, the song line,

54
00:03:10.435 --> 00:03:15.338
it should also have a tilte [LAUGH],
a title and expect it to exist,

55
00:03:15.338 --> 00:03:20.953
expect the required to be an array,
which it is, URL, expected to exist,

56
00:03:20.953 --> 00:03:25.440
expected to be unique,
expect the required to be an array.

57
00:03:26.600 --> 00:03:33.170
Album, expected to exist, rating, I'm
sorry, artist and album expect to exist.

58
00:03:33.170 --> 00:03:34.280
I'm not even checking for types there.

59
00:03:35.310 --> 00:03:37.909
Rating expected to exist and
then equal a number and

60
00:03:37.909 --> 00:03:40.400
then favorite's got all
this other stuff on it.

61
00:03:40.400 --> 00:03:42.960
So let's check and see if it exist and
if it's a boolean.

62
00:03:42.960 --> 00:03:45.220
Print out some stuff, and

63
00:03:45.220 --> 00:03:49.490
then if we look at the user line,
which is the easiest of all.

64
00:03:51.120 --> 00:03:52.750
This one's just checking to
see if it has a user name and

65
00:03:52.750 --> 00:03:56.820
this thing called password hash and it's
just doing some validations on that right?

66
00:03:56.820 --> 00:03:59.735
So checking to see if the user
name exists, if it's a string,

67
00:03:59.735 --> 00:04:03.659
if it's required and if it's unique and
then hash if it exists, if it's a string,

68
00:04:03.659 --> 00:04:04.799
and if it's required.

69
00:04:06.290 --> 00:04:09.970
And if you run that you should
get all your tests to pass.

70
00:04:09.970 --> 00:04:11.060
So everybody all their tests passing?

71
00:04:12.340 --> 00:04:16.670
Nice, so much easier when you can just get
tests to pass like that's the best way.

72
00:04:16.670 --> 00:04:19.842
If somebody gets to come in,
write all your tests for you and

73
00:04:19.842 --> 00:04:22.710
you just wrote the code to make that pass.

74
00:04:22.710 --> 00:04:23.649
How easy would your job be?

75
00:04:24.830 --> 00:04:25.400
Think about that.

76
00:04:25.400 --> 00:04:28.200
What if there was teams where
this person writes tests,

77
00:04:28.200 --> 00:04:29.622
this person builds features, that's it.

78
00:04:29.622 --> 00:04:31.910
Right, that'd be ideal.

79
00:04:31.910 --> 00:04:33.190
I think people should
write code like that.

80
00:04:33.190 --> 00:04:38.480
And then you switch it up so
you're not doing one thing all the time.

81
00:04:38.480 --> 00:04:39.770
Maybe I'll try that.

82
00:04:39.770 --> 00:04:40.686
I'll try that and report back.

83
00:04:40.686 --> 00:04:41.186
[LAUGH]

