WEBVTT

1
00:00:03.217 --> 00:00:06.440
&gt;&gt; Scott Moss: Yeah,
wrote some test maybe?

2
00:00:06.440 --> 00:00:08.140
People still writing tests?

3
00:00:08.140 --> 00:00:11.672
Yeah, okay.
&gt;&gt; Student: My Mongo is messed up.

4
00:00:11.672 --> 00:00:13.298
&gt;&gt; Scott Moss: Your Mongo is messed up?

5
00:00:13.298 --> 00:00:16.730
What's the error you're getting?
&gt;&gt; Student: Connection refused.

6
00:00:17.910 --> 00:00:19.302
&gt;&gt; Scott Moss: Conection refused?

7
00:00:19.302 --> 00:00:21.897
It's probably because in your config.
&gt;&gt; Student: It has

8
00:00:21.897 --> 00:00:24.548
something to do with promise.
&gt;&gt; Scott Moss: I think it's in your

9
00:00:24.548 --> 00:00:25.851
config.
&gt;&gt; Student: Yeah.

10
00:00:25.851 --> 00:00:26.962
&gt;&gt; Scott Moss: Cuz you're doing testing,

11
00:00:26.962 --> 00:00:28.850
that you have to change the URL maybe?

12
00:00:28.850 --> 00:00:29.980
Is that what it is?

13
00:00:29.980 --> 00:00:32.620
Cuz we have the config driven approach
where it switches on testing now,

14
00:00:32.620 --> 00:00:35.780
and you got to set a new URL for
the testing database.

15
00:00:35.780 --> 00:00:36.740
So that might be the case.

16
00:00:36.740 --> 00:00:37.680
I would start there.

17
00:00:39.820 --> 00:00:43.080
Does anyone see me write some tests,

18
00:00:44.550 --> 00:00:46.350
other than the tests I already showed you,
that we just wrote.

19
00:00:48.210 --> 00:00:49.300
Would it be beneficial?

20
00:00:49.300 --> 00:00:51.680
Okay, well I'll write some
tests if it's beneficial.

21
00:00:51.680 --> 00:00:56.620
What we're going to do is write some
tests on the song resolver [COUGH] so

22
00:00:56.620 --> 00:01:01.030
we'll go to the song spec,
we'll bring this open over here,

23
00:01:01.030 --> 00:01:03.840
we'll also bring over the user specs,
so they can see what's happening.

24
00:01:05.240 --> 00:01:09.690
And we'll say let's describe song.

25
00:01:12.570 --> 00:01:14.590
And I'll go ahead and
import these two things.

26
00:01:17.590 --> 00:01:19.320
And then for
song I'm just gonna go ahead and

27
00:01:19.320 --> 00:01:21.030
do the same thing with
the data base stuff.

28
00:01:22.080 --> 00:01:26.460
We're gonna drop the DB,
wait the DBA, we got a user here,

29
00:01:26.460 --> 00:01:29.880
probably we'll create a song as well but
we'll see depending on what test we write.

30
00:01:29.880 --> 00:01:33.919
And then I'll write a test for, let's see.

31
00:01:33.919 --> 00:01:35.890
Song.graphqo.

32
00:01:35.890 --> 00:01:40.910
Let's write a test for
creating a song, all right?

33
00:01:40.910 --> 00:01:41.870
Let's do that.

34
00:01:41.870 --> 00:01:49.013
What we'll do is we'll come over to the
&gt;&gt; Scott Moss: Song spread,

35
00:01:49.013 --> 00:01:55.027
we'll say it('should create a song',
this will be async,

36
00:01:55.027 --> 00:01:59.679
and then what I'm gonna
do is I'm just going to,

37
00:01:59.679 --> 00:02:03.990
very much like I did
inside of the user query,

38
00:02:03.990 --> 00:02:09.419
we're gonna make a query here.
&gt;&gt; Scott Moss: And

39
00:02:09.419 --> 00:02:12.050
instead it's gonna be a mutation,
cuz we're creating, right?

40
00:02:12.050 --> 00:02:15.974
So I'm gonna make a mutation,
that mutation and

41
00:02:15.974 --> 00:02:20.865
we're gonna give it a name,
we'll call it CreateNewSong.

42
00:02:20.865 --> 00:02:26.264
It takes in a variable of input.

43
00:02:26.264 --> 00:02:28.740
So I'm just going to
give the same name input.

44
00:02:28.740 --> 00:02:32.835
Its type is going to be new song type,
required.

45
00:02:32.835 --> 00:02:36.480
I'm going to actually use the input here.

46
00:02:36.480 --> 00:02:37.972
I'm sorry.
I'm gonna use the mutation here

47
00:02:37.972 --> 00:02:38.610
called newSong.

48
00:02:39.690 --> 00:02:43.450
It's going to use that
input variable here.

49
00:02:43.450 --> 00:02:47.300
And I'm just going to get back to ID and
the title of the song, so

50
00:02:47.300 --> 00:02:50.270
there is our mutation.

51
00:02:50.270 --> 00:02:53.290
Now I need to supply some variables
to satisfy this input, so

52
00:02:53.290 --> 00:02:54.600
I'll do that right here.

53
00:02:54.600 --> 00:02:56.520
I'll say here's an input.

54
00:02:56.520 --> 00:02:59.690
It is of type object,
because this is a non scala type,

55
00:02:59.690 --> 00:03:00.570
which means it's an object.

56
00:03:02.470 --> 00:03:08.580
And input is newSong, newSong if you
go look right here is this, right?

57
00:03:08.580 --> 00:03:12.200
Let's make that required,
make that required.

58
00:03:12.200 --> 00:03:16.860
So let's just give it a title and
a URL and an artist.

59
00:03:16.860 --> 00:03:17.940
Let's do that.

60
00:03:17.940 --> 00:03:24.979
So come here we'll say
title is 'Drop down'.

61
00:03:26.250 --> 00:03:29.594
URL is, you know, some URL here.

62
00:03:36.355 --> 00:03:41.431
&gt;&gt; Scott Moss: And then, what's the other,

63
00:03:41.431 --> 00:03:45.720
artist is JJ, sure.

64
00:03:45.720 --> 00:03:47.610
And we'll use this user.

65
00:03:47.610 --> 00:03:49.900
And then what we'll do is,
we'll use this result.

66
00:03:49.900 --> 00:03:52.170
Let's just put a dot over here so
we're only running this test.

67
00:03:52.170 --> 00:03:55.150
And what we will do,

68
00:03:55.150 --> 00:03:58.090
the first thing is we're gonna
make sure there's no errors here.

69
00:03:58.090 --> 00:04:07.208
So we'll expect.errors to not.exist.

70
00:04:07.208 --> 00:04:12.192
So let's run that one first,
make sure that doesn't exist.

71
00:04:12.192 --> 00:04:15.262
And we'll say test out.

72
00:04:21.910 --> 00:04:22.830
&gt;&gt; Scott Moss: Users,

73
00:04:22.830 --> 00:04:26.772
forgot to import the user model for
the user creations.

74
00:04:26.772 --> 00:04:34.066
Let's do that, guess that's important.
&gt;&gt; Scott Moss: There we go,

75
00:04:34.066 --> 00:04:36.640
user/user.model.

76
00:04:36.640 --> 00:04:42.600
Now let's run it.
&gt;&gt; Scott Moss: There we go.

77
00:04:42.600 --> 00:04:43.730
So that test passed.

78
00:04:43.730 --> 00:04:45.910
Can obviously create a song
if there's no errors, but

79
00:04:45.910 --> 00:04:48.450
let's keep doing some
more insertions there.

80
00:04:48.450 --> 00:04:54.424
So also expects results.new, or,
I'm sorry it was other .data.newsong.

81
00:04:54.424 --> 00:04:59.531
It's gonna be whatever
the name with the that's gonna

82
00:04:59.531 --> 00:05:04.441
be the property that you did right,
if you don't like that,

83
00:05:04.441 --> 00:05:08.895
just a list it, so
we're a listed a song, there we go.

84
00:05:08.895 --> 00:05:15.370
So that would be
(result.data.song).o.exist.

85
00:05:15.370 --> 00:05:20.095
So we'll do that, and then we'll also say

86
00:05:20.095 --> 00:05:26.142
expect(result.data.song.title)to.equal.

87
00:05:26.142 --> 00:05:33.128
This title right here.
&gt;&gt; Scott Moss: There we go,

88
00:05:33.128 --> 00:05:41.390
so let's run that.
&gt;&gt; Scott Moss: Cool, that passed.

89
00:05:41.390 --> 00:05:48.950
So that's a test for our creating a song.
&gt;&gt; Scott Moss: You run the mutation.

90
00:05:48.950 --> 00:05:50.660
Get the result,
check to see there's no errors,

91
00:05:50.660 --> 00:05:52.940
check to see if you got back the right
shape, look at the properties.

92
00:05:52.940 --> 00:05:55.960
You could take it a step further and
actually go look in the database, and

93
00:05:55.960 --> 00:06:03.925
you can be like,
I would expect await Song.findOne.

94
00:06:03.925 --> 00:06:08.230
You could do that, you could look in the
database to see if it's actually in there.

95
00:06:08.230 --> 00:06:09.269
But I'm pretty sure it's in there,

96
00:06:09.269 --> 00:06:13.240
cuz this passed.
&gt;&gt; Scott Moss: Everybody

97
00:06:13.240 --> 00:06:15.070
following me there?

98
00:06:15.070 --> 00:06:17.780
As you can see I really
like writing tests.

