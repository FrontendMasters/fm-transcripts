WEBVTT

1
00:00:03.252 --> 00:00:04.334
&gt;&gt; Scott Moss: Okay, cool,

2
00:00:04.334 --> 00:00:10.090
let's go into the next thing which
is [COUGH] CRUD in the controllers.

3
00:00:10.090 --> 00:00:14.390
So we have those controllers that
literally aren't doing anything right now.

4
00:00:14.390 --> 00:00:17.699
I mean, we have the part that's responding
back, but inside of those functions,

5
00:00:17.699 --> 00:00:18.894
it's calling controllers.

6
00:00:18.894 --> 00:00:20.570
That's the resolving test data, right?

7
00:00:20.570 --> 00:00:23.720
We need to fill those controllers out so
they're not just doing test data.

8
00:00:23.720 --> 00:00:29.390
And now that we have Mongo hooked up,
we can use those models that we just

9
00:00:29.390 --> 00:00:35.130
created with those schemas and actually
use them inside of our controllers.

10
00:00:35.130 --> 00:00:38.470
So we're gonna create controllers for each
VERB, which is already created for you.

11
00:00:39.610 --> 00:00:41.457
We're gonna use information
from the request and

12
00:00:41.457 --> 00:00:44.470
middleware to provide details to
the database queries and inserts.

13
00:00:44.470 --> 00:00:48.443
All that information's all ready there for
you as well but, for instance,

14
00:00:48.443 --> 00:00:52.520
you can use query parameters,
route parameters, tokens, cookies, IPs.

15
00:00:52.520 --> 00:00:55.187
Whatever is sent on the request,
whatever it is,

16
00:00:55.187 --> 00:00:59.582
you can use that information inside your
controller to do whatever you need to do.

17
00:00:59.582 --> 00:01:01.859
This is where SQL injection came from.

18
00:01:01.859 --> 00:01:04.022
You inject that SQL query
in that query right there,

19
00:01:04.022 --> 00:01:07.086
and they just pop it right off the query
string and throw it right into SQL.

20
00:01:07.086 --> 00:01:09.050
And now you're querying
all types of stuff.

21
00:01:10.230 --> 00:01:14.310
So we wanna keep it async to
keep our concurrency high.

22
00:01:14.310 --> 00:01:17.870
And then we want to try to
minimize touching the database.

23
00:01:17.870 --> 00:01:20.611
So that means just don't do any
unnecessary querying that we

24
00:01:20.611 --> 00:01:21.370
don't have to.

25
00:01:21.370 --> 00:01:25.830
If we already have a document,
from like that params middleware,

26
00:01:25.830 --> 00:01:28.960
then we shouldn't have to query the
database to get into the same document.

27
00:01:28.960 --> 00:01:29.510
It's already there.

28
00:01:30.540 --> 00:01:34.200
Unless there's some additional data on
a document that we don't have, and then we

29
00:01:34.200 --> 00:01:38.420
have to do some querying, like population
or, I don't know, whatever you need.

30
00:01:38.420 --> 00:01:42.780
But just try not to touch
the database more than once.

31
00:01:42.780 --> 00:01:45.090
Sure, you're gonna get examples where
you have to touch the database a lot.

32
00:01:45.090 --> 00:01:49.617
For instance if you do like role-based
authentications, or if you got,

33
00:01:49.617 --> 00:01:54.143
like when we get to GraphQL, you can
literally touch the database on every

34
00:01:54.143 --> 00:01:57.440
single property in GraphQL
if you don't be careful.

35
00:01:57.440 --> 00:02:00.300
So it's a lot of stuff you
can do wrong in there.

36
00:02:00.300 --> 00:02:04.026
So you'll see, but basically you wanna try
to keep that to the minimum as possible,

37
00:02:04.026 --> 00:02:05.610
using caching and stuff like that.

38
00:02:05.610 --> 00:02:08.232
Oops, come back, okay, cool.

