WEBVTT

1
00:00:03.509 --> 00:00:05.580
&gt;&gt; Scott Moss: If you're not ready that's
fine we're gonna go to the solution.

2
00:00:05.580 --> 00:00:09.860
I left a lot of stuff out
intentionally and unintentionally.

3
00:00:09.860 --> 00:00:13.361
So it's fine, it's totally fine.

4
00:00:13.361 --> 00:00:16.060
Okay so let's go server js right here.

5
00:00:17.440 --> 00:00:23.260
First thing is ignore this setupMiddware,
ignore this connect(),

6
00:00:23.260 --> 00:00:27.970
we're going to get there, you do not
need this, we're going to get there.

7
00:00:27.970 --> 00:00:34.500
But what you do want to look at is on line
7, boom, we made an app by using express.

8
00:00:34.500 --> 00:00:36.780
Whenever you invoke express
it just creates an app for

9
00:00:36.780 --> 00:00:40.369
you, you can have many,
typically you have one express app.

10
00:00:40.369 --> 00:00:45.830
And that app by default has a router baked
into it, but you can have many routers.

11
00:00:45.830 --> 00:00:47.340
As we are going to find
out in the next lesson,

12
00:00:47.340 --> 00:00:48.990
we have all different types of routers.

13
00:00:48.990 --> 00:00:53.610
But, the default express app is like
the global app for your server.

14
00:00:53.610 --> 00:00:56.490
It is your server, and then you can have,
you can use the router on it.

15
00:00:56.490 --> 00:01:00.160
Which is a global router and
then you can supply it with other

16
00:01:00.160 --> 00:01:02.610
routers that you can mount on
different paths and stuff like that.

17
00:01:02.610 --> 00:01:07.000
So the first thing is you made an app,
right?

18
00:01:07.000 --> 00:01:14.060
Ignore this, ignore this, ignore this, and
then what I did was I used app.all which

19
00:01:14.060 --> 00:01:19.130
is basically like any verb,
any path, star, do this.

20
00:01:19.130 --> 00:01:21.060
So it doesn't matter what you do,
it's always gonna send this back,

21
00:01:21.060 --> 00:01:23.000
that's what that's doing.

22
00:01:23.000 --> 00:01:24.440
So that was just my hello world.

23
00:01:25.560 --> 00:01:27.370
I'm sure everyone has
something similar to this,

24
00:01:27.370 --> 00:01:30.830
probably app.git with the index slash,
right?

25
00:01:30.830 --> 00:01:35.550
This is just saying every single verb,
every single path, send that back.

26
00:01:35.550 --> 00:01:38.850
This we'll get into later,
[COUGH] and then inside of index,

27
00:01:38.850 --> 00:01:40.620
this is where it probably
kind of gets crazy.

28
00:01:42.090 --> 00:01:44.920
So I'm using that HTTP module
that I said do not use.

29
00:01:46.180 --> 00:01:50.370
I'm using it to wrap
the express app because

30
00:01:50.370 --> 00:01:52.260
express is compatible with this module.

31
00:01:52.260 --> 00:01:55.490
HTTP module allows us to
consume the express app and

32
00:01:55.490 --> 00:02:00.230
we can use the HTTP interface
to listen for the request.

33
00:02:00.230 --> 00:02:05.200
So this thing has an event If
approach the task to it and

34
00:02:05.200 --> 00:02:07.140
we can use it for hot module reloading.

35
00:02:07.140 --> 00:02:09.850
So the quick answer is
the reason why it's here is one

36
00:02:09.850 --> 00:02:12.870
I was gonna do web sockets in here,
I took out the last second.

37
00:02:12.870 --> 00:02:16.480
So I forgot to retract this but then
this same time, I kind of got to leave.

38
00:02:16.480 --> 00:02:17.280
Because I need it for

39
00:02:17.280 --> 00:02:21.210
my hot reloading, because I need to
be able to listen to these events.

40
00:02:21.210 --> 00:02:23.480
So if you are not doing web sockets and

41
00:02:23.480 --> 00:02:28.250
you are not doing hot module reloading,
then you don't need this http.createServe.

42
00:02:28.250 --> 00:02:32.680
You can just do app.listen, which is
what's in the example that I gave you.

43
00:02:32.680 --> 00:02:37.810
So this is specifically for
hot module reloading, so if you want this,

44
00:02:37.810 --> 00:02:40.800
you can just go ahead and
take out to the lesson.

45
00:02:40.800 --> 00:02:44.570
The lesson-1-solution branch
which has all of this.

46
00:02:46.340 --> 00:02:50.090
But yeah, so basically here we create
a server just like express we can listen

47
00:02:50.090 --> 00:02:51.630
to any open port.

48
00:02:51.630 --> 00:02:54.730
If you pass in a port that's not
open it's gonna throw an error.

49
00:02:54.730 --> 00:02:56.710
Then a callback that runs
when that port is opened.

50
00:02:56.710 --> 00:03:00.970
And then this right here is just to
respond to our hot modular loading.

51
00:03:00.970 --> 00:03:04.970
So let's just test this out,
you can run yarn start.

52
00:03:04.970 --> 00:03:10.530
If you did look at the package at Jason.

53
00:03:10.530 --> 00:03:13.140
You will find out that's the commands.

54
00:03:13.140 --> 00:03:19.610
Yarn start or MPM start if you are using
MPM, that just runs webpack, with this.

55
00:03:19.610 --> 00:03:23.730
Once you start it up, you'll see
your console log and your callback.

56
00:03:24.890 --> 00:03:33.400
You can go there and
you see it doesn't matter what I do.

57
00:03:33.400 --> 00:03:34.610
I'm going to get okay true.

58
00:03:34.610 --> 00:03:38.010
Get request to, whatever.

59
00:03:38.010 --> 00:03:40.020
I'm always going to get okay true
cuz that's the thing that I put.

60
00:03:40.020 --> 00:03:44.444
I could also test this
with any other verb so

61
00:03:53.609 --> 00:03:54.654
&gt;&gt; Scott Moss: I just told you like okay

62
00:03:54.654 --> 00:03:56.600
true, you know the pulse request right?

63
00:03:56.600 --> 00:03:59.787
Cuz I did that glob there.

64
00:03:59.787 --> 00:04:02.834
Right here, this is what's happening.

65
00:04:05.564 --> 00:04:07.650
&gt;&gt; Scott Moss: Everybody following here.

66
00:04:07.650 --> 00:04:11.400
I made an app, I register

67
00:04:11.400 --> 00:04:16.300
a route on all the verbs so
notice that means when you use app.

68
00:04:16.300 --> 00:04:19.860
That's followed by a verb name,
so you'd probably add app.get.

69
00:04:19.860 --> 00:04:23.750
That's not saying I want to get something
from express that's saying I want to

70
00:04:23.750 --> 00:04:25.290
respond to a get request.

71
00:04:25.290 --> 00:04:29.480
That's what that dot kit is, it's the HTTP
verb that you want to set this router for.

72
00:04:29.480 --> 00:04:34.432
So you might be thinking there's probably
an app.post, app.put, app.delete,

73
00:04:34.432 --> 00:04:35.412
app.options.

74
00:04:35.412 --> 00:04:37.840
Yeah, there is,
there's also some other ones.

75
00:04:37.840 --> 00:04:41.669
So that's the verb and you can see that
all is just a shortcut for all of them.

76
00:04:43.960 --> 00:04:47.302
For every single verb,
for every single route,

77
00:04:47.302 --> 00:04:51.680
respond with this JSON,
that's what that was, yes?

78
00:04:51.680 --> 00:04:55.258
&gt;&gt; Speaker 2: Do you want to demo the hot
module reloading since we hooked it up?

79
00:04:55.258 --> 00:04:58.390
&gt;&gt; Scott Moss: Yeah,
let's show some hot module reloads.

80
00:04:58.390 --> 00:05:03.290
Okay, so my server's on right here,
it's listing.

81
00:05:03.290 --> 00:05:08.030
If I go and lets just change something,

82
00:05:08.030 --> 00:05:09.960
I guess I only have one
thing to change really.

83
00:05:09.960 --> 00:05:14.900
Which is in server JS,
if I just say, ok: false and

84
00:05:14.900 --> 00:05:17.920
hit save and I go back and
look at the terminal.

85
00:05:17.920 --> 00:05:21.460
You'll notice right here web pack
is telling me, these new chunks, or

86
00:05:21.460 --> 00:05:23.330
these little bits, I've got updated.

87
00:05:23.330 --> 00:05:28.330
And what the update was, it stores it in
this file, and what it does is, it'll grab

88
00:05:28.330 --> 00:05:33.230
that update and patch it, on the fly,
to the modules that are already running.

89
00:05:33.230 --> 00:05:35.720
So it doesn't actually restart the server,
it just patches the code,

90
00:05:35.720 --> 00:05:37.960
because the webpack is the bundler.

91
00:05:37.960 --> 00:05:42.860
And then, because that happened, the code
is still running, the server never stops.

92
00:05:42.860 --> 00:05:47.440
It fixed your car while it was on
the highway, and if I go back here and

93
00:05:47.440 --> 00:05:51.590
I refresh, you'll see it says false now.

94
00:05:51.590 --> 00:05:55.720
The difference between something like
this and something like NodeMon.

95
00:05:55.720 --> 00:05:56.300
If you use NodeMon,

96
00:05:56.300 --> 00:06:00.980
which you totally can, what it'll do,
you'll tilt the files you wanted to watch.

97
00:06:00.980 --> 00:06:04.670
Then the server will restart
when you change those files.

98
00:06:04.670 --> 00:06:08.660
It's a complete refresh which means
any state that you have in that app

99
00:06:08.660 --> 00:06:09.400
will be gone.

100
00:06:09.400 --> 00:06:14.410
Whereas here, the state is kept the same
like for instance if I were to put

101
00:06:14.410 --> 00:06:19.540
some state up here like,
actually no I don't have any cache.

102
00:06:19.540 --> 00:06:23.460
Basically, any state that you have is
not gonna be gone so if you were like

103
00:06:23.460 --> 00:06:26.100
Keeping track of something, some cache or
something, it'll stay there.

104
00:06:26.100 --> 00:06:29.150
It's not going to refresh, it's totally
going to be there the whole time.

105
00:06:32.240 --> 00:06:32.980
Any questions on that?

106
00:06:34.070 --> 00:06:36.170
I think this is a really good workflow,

107
00:06:36.170 --> 00:06:37.960
this is adopted from
client side development.

108
00:06:37.960 --> 00:06:39.690
Something we use a lot on
client side development,

109
00:06:39.690 --> 00:06:42.190
hot mod reloading,
totally use it on the server.

110
00:06:42.190 --> 00:06:45.090
You obviously don't need
this in production, so

111
00:06:45.090 --> 00:06:49.200
when we get into production and stuff,
I'll show you like how to not use this.

112
00:06:49.200 --> 00:06:50.884
Cuz you don't need a hot
module reload in production.

113
00:06:53.520 --> 00:06:55.281
&gt;&gt; Scott Moss: Cool, any other questions?

114
00:06:58.069 --> 00:07:00.120
&gt;&gt; Scott Moss: All right,
yeah, you have one?

115
00:07:00.120 --> 00:07:03.640
&gt;&gt; Speaker 2: Just a question about where
the hot module reloading is coming from,

116
00:07:03.640 --> 00:07:06.780
just a module that you included
in the package.json, right?

117
00:07:06.780 --> 00:07:08.882
&gt;&gt; Scott Moss: Sweet, so good question.

118
00:07:08.882 --> 00:07:14.640
This module.hot, so basically,

119
00:07:14.640 --> 00:07:20.650
so what Node looks like what actually
happens in this auto mode is that this.

120
00:07:20.650 --> 00:07:24.550
Whatever file you write is gonna be
wrapped inside of a closure like this,

121
00:07:24.550 --> 00:07:27.150
like a iffy, or
a immediately invoked function, right.

122
00:07:27.150 --> 00:07:29.500
This is a module, right,
a module is just a closure.

123
00:07:29.500 --> 00:07:32.090
It's just so you can't interact
with global space, right.

124
00:07:32.090 --> 00:07:35.170
So this whole thing is wrapped
inside of a function at run time.

125
00:07:35.170 --> 00:07:38.210
When node actually keeps this file,
it's going to do that.

126
00:07:38.210 --> 00:07:42.900
But, that's reason webpack
which is bundler and

127
00:07:42.900 --> 00:07:47.500
webpack has it kind of like
simulates a module system.

128
00:07:47.500 --> 00:07:50.370
But because we are already in the module
system there is a lot overhead.

129
00:07:50.370 --> 00:07:53.880
But basically,
what's happening here is this module.hot,

130
00:07:53.880 --> 00:07:57.780
module is a global,
that's provided to us by webpack.

131
00:07:57.780 --> 00:08:01.430
And it has a hot property on it, and

132
00:08:01.430 --> 00:08:03.800
we can tell webpack that we're gonna
be using hot module reloading.

133
00:08:03.800 --> 00:08:08.300
So if you go to the config you can see
right here, we're telling webpack that we

134
00:08:08.300 --> 00:08:14.250
wanna use hot module reloading and,
right here, hotModuleReplacementPlugin.

135
00:08:14.250 --> 00:08:17.920
That right there supplies
the hot parameter to the module

136
00:08:17.920 --> 00:08:19.460
global inside a node.

137
00:08:19.460 --> 00:08:21.280
So hot module reloading
is coming from web pack.

138
00:08:21.280 --> 00:08:22.890
So without web pack, we can't do this.

139
00:08:22.890 --> 00:08:26.080
This isn't pure node,
you have to set up web pack to do this.

140
00:08:26.080 --> 00:08:27.470
Without it, we won't be able to do this,

141
00:08:27.470 --> 00:08:29.830
we'll be using something
like node [INAUDIBLE].

142
00:08:29.830 --> 00:08:37.270
So that's a really advanced topic and
we can go into the really source of that.

143
00:08:37.270 --> 00:08:41.340
Later on, but
basically it's coming from webhack and

144
00:08:41.340 --> 00:08:44.300
it's almost magical, so it's pretty cool.

145
00:08:44.300 --> 00:08:47.870
The first time I used it I was like,
what is this, this is crazy.

146
00:08:49.030 --> 00:08:50.550
So that's hot module loading.

