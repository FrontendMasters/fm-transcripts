WEBVTT

1
00:00:00.000 --> 00:00:01.190
&gt;&gt; Scott Moss: If you look at
the list of challenges here,

2
00:00:01.190 --> 00:00:03.180
we have to look at the User
router as a reference.

3
00:00:03.180 --> 00:00:04.450
And you can follow it all the way down.

4
00:00:04.450 --> 00:00:08.620
Now when I say follow it down,
there's two nested routers there, so

5
00:00:08.620 --> 00:00:10.050
follow it all the way down to the source.

6
00:00:10.050 --> 00:00:12.900
And the source is basically
where you're responding to.

7
00:00:12.900 --> 00:00:16.080
Which if you would have found out,
there's literally no response there.

8
00:00:16.080 --> 00:00:17.680
But look at that,

9
00:00:17.680 --> 00:00:21.040
build out the song router with all
the routes very much like the User router.

10
00:00:21.040 --> 00:00:24.411
Build out the playlist router, with all
the routes very much like the User router.

11
00:00:24.411 --> 00:00:26.927
Connect the song and
the playlist router to the rest router.

12
00:00:26.927 --> 00:00:32.121
And then eventually collect the restRouter
to the base express app on the /api path,

13
00:00:32.121 --> 00:00:32.635
right?

14
00:00:32.635 --> 00:00:36.361
So let's check that out,
see what we've got here.

15
00:00:36.361 --> 00:00:41.188
I'm just going to check out, to save
some time, because I love live coding,

16
00:00:41.188 --> 00:00:43.062
but let's get through this.

17
00:00:43.062 --> 00:00:46.535
Some solutions here, and then I can
live code some stuff that's not here.

18
00:00:49.807 --> 00:00:51.664
&gt;&gt; Scott Moss: There we go.

19
00:00:51.664 --> 00:00:55.690
Nice, so first things first.

20
00:00:55.690 --> 00:00:58.699
Let me get rid of this stuff
that we just did last session.

21
00:01:01.334 --> 00:01:05.541
&gt;&gt; Scott Moss: Okay,
first things first is we need to

22
00:01:05.541 --> 00:01:09.488
connect our restRouter to our app.

23
00:01:09.488 --> 00:01:13.214
And that one's pretty simple,
after I use, we mount it, this is what,

24
00:01:13.214 --> 00:01:17.017
when you hear people say mounting,
this is what they're talking about.

25
00:01:17.017 --> 00:01:19.330
We're mounting this
route at this path here.

26
00:01:19.330 --> 00:01:23.010
And we're doing that before our
catch all that I have here.

27
00:01:23.010 --> 00:01:24.630
By the way, I have this catch all here,

28
00:01:24.630 --> 00:01:28.860
this by no means is me saying you
should have this in your app, okay?

29
00:01:28.860 --> 00:01:32.080
If you don't have a route,
you should definitely throw an error,

30
00:01:32.080 --> 00:01:33.320
a 404 or something.

31
00:01:33.320 --> 00:01:36.615
I'm just having this so
it's for development.

32
00:01:36.615 --> 00:01:40.588
But yeah, and if you're building an
express app that's serving a single page

33
00:01:40.588 --> 00:01:43.971
application, you'll most likely
just send back the index page.

34
00:01:43.971 --> 00:01:46.420
So this is like another thing
you would have to do as well.

35
00:01:46.420 --> 00:01:48.308
But you shouldn't be serving on a static,

36
00:01:48.308 --> 00:01:50.730
you shouldn't be doing a front
end app on the Express.

37
00:01:50.730 --> 00:01:54.870
You should just serve it on
the CDN instead, but anyway.

38
00:01:54.870 --> 00:01:57.610
So yeah, we mounted it at /api,
got the restRouter.

39
00:01:57.610 --> 00:01:59.628
Let's go take a look at
the restRouter here.

40
00:01:59.628 --> 00:02:04.041
Any questions here by the way,
about this part so far?

41
00:02:04.041 --> 00:02:06.888
Okay, the restRouter,
if we go take a look at the restRouter,

42
00:02:06.888 --> 00:02:09.110
all the stuff that you
need is already imported.

43
00:02:10.370 --> 00:02:14.142
And what you saw was you had
just the user mounted at /user.

44
00:02:14.142 --> 00:02:17.080
So we're just gonna go ahead and
mount the songRouter and

45
00:02:17.080 --> 00:02:19.740
the playlistRouter on
the appropriate paths as well.

46
00:02:19.740 --> 00:02:22.550
So we got /song /playlist,

47
00:02:22.550 --> 00:02:26.850
and the important thing to
remember here is, one order.

48
00:02:26.850 --> 00:02:28.200
So I guess in this case,

49
00:02:28.200 --> 00:02:30.880
order doesn't really matter, cuz they're
completely different paths, right?

50
00:02:30.880 --> 00:02:31.960
So it doesn't really matter, right?

51
00:02:31.960 --> 00:02:34.262
They would matter if
they were the same path.

52
00:02:34.262 --> 00:02:37.122
The other thing is that the usage of use,

53
00:02:37.122 --> 00:02:41.596
if we didn't use use here,
we have to say something like this.

54
00:02:41.596 --> 00:02:43.430
We'd have to say like,

55
00:02:43.430 --> 00:02:48.394
let's say I want to mount some
stuff on the restRouter for song.

56
00:02:48.394 --> 00:02:52.077
I'd say restRouter.get('/song'.

57
00:02:52.077 --> 00:02:55.597
Or just '/song', then I'd have to be like,

58
00:02:55.597 --> 00:03:00.440
/song/router, it would be
very tedious to do all that.

59
00:03:00.440 --> 00:03:01.910
So use the .u so it's just like,

60
00:03:01.910 --> 00:03:05.900
hey, anything for
/song just delegate to this router.

61
00:03:05.900 --> 00:03:07.670
I don't care, I'm just passing it through.

62
00:03:07.670 --> 00:03:12.160
I don't really care, it's not my job,
I'm just passing it through right, so

63
00:03:12.160 --> 00:03:13.060
that's that.

64
00:03:13.060 --> 00:03:15.442
You can do the same
thing to playlistRouter.

65
00:03:15.442 --> 00:03:20.195
So let's go take a look at the userRouter.

66
00:03:20.195 --> 00:03:24.980
And notice the typo here, we definitely
don't want a createOne on delete,

67
00:03:24.980 --> 00:03:26.868
you should want a deleteOne.

68
00:03:29.589 --> 00:03:32.101
&gt;&gt; Scott Moss: But notice,
I walked through this before the example,

69
00:03:32.101 --> 00:03:35.094
but the param, when we're talking
about middleware, which is,

70
00:03:35.094 --> 00:03:39.005
I think that's the one we're talking about
actually, this is gonna make more sense.

71
00:03:39.005 --> 00:03:42.107
But this is popping off
the parameter of the url, right?

72
00:03:42.107 --> 00:03:48.916
So if we created a URL or
route that's like /api/song/:id,

73
00:03:48.916 --> 00:03:52.329
that's how you do parameters.

74
00:03:52.329 --> 00:03:54.259
Then it's going to grab that id and

75
00:03:54.259 --> 00:03:57.970
it's going to pass it as
an argument to this function.

76
00:03:57.970 --> 00:04:00.310
And then that function
will do whatever it wants.

77
00:04:00.310 --> 00:04:03.990
The function, normally what it will do is
look in the database for that id resource,

78
00:04:03.990 --> 00:04:07.010
attach it to the request, and
send it down the line, right?

79
00:04:07.010 --> 00:04:10.921
Because if you're coming in if
you're looking for a /api/song/:id,

80
00:04:10.921 --> 00:04:14.040
and let's say this is a get,
let's say you did a get to this.

81
00:04:16.430 --> 00:04:21.630
Say you did a get there, this is not
the thing that's going to respond.

82
00:04:21.630 --> 00:04:24.720
The thing that's going to respond is
the route that you set up for this URL,

83
00:04:24.720 --> 00:04:28.780
which is song/:id, which in this case
will be something like down here.

84
00:04:28.780 --> 00:04:32.530
But this one runs first, so this one
would run first, grab the resource from

85
00:04:32.530 --> 00:04:36.440
the database with the appropriate id,
attach it to the request.

86
00:04:36.440 --> 00:04:39.520
Send it down the line to the one
that actually matches this,

87
00:04:39.520 --> 00:04:41.180
which will be down here.

88
00:04:41.180 --> 00:04:45.810
And then that would have access to the
object that was attached to the request,

89
00:04:45.810 --> 00:04:47.540
and then it can respond appropriately.

90
00:04:47.540 --> 00:04:48.910
Right, and that's how that will work.

91
00:04:48.910 --> 00:04:52.700
And you can do that as much as you like,
middleware is as much as you like, but

92
00:04:52.700 --> 00:04:53.840
just don't abuse it.

93
00:04:55.590 --> 00:05:00.590
So we got this in a userRouter, so
if we go look at the songRouter,

94
00:05:00.590 --> 00:05:05.340
we should see it's pretty much
be the same thing, right?

95
00:05:07.030 --> 00:05:08.950
We use the .route thing again for
shortcuts,

96
00:05:08.950 --> 00:05:12.380
otherwise we'd have to use the route
over and over and over again.

97
00:05:12.380 --> 00:05:13.199
This is just shortcuts.

98
00:05:14.300 --> 00:05:18.346
The reason this stuff is mounted like
this is because I'm following REST right?

99
00:05:18.346 --> 00:05:24.505
So basically,
I mean who here knows what REST is?

100
00:05:27.495 --> 00:05:31.134
&gt;&gt; Scott Moss: I don't think anybody knows
what REST is cuz it's not a thing right,

101
00:05:31.134 --> 00:05:34.360
it's like, yeah, it's a thing,
but is it really a thing?

102
00:05:34.360 --> 00:05:36.644
There's like conventions just like,
REST should be like, but

103
00:05:36.644 --> 00:05:37.844
there's really no convention.

104
00:05:37.844 --> 00:05:42.300
They have like standard API and their
swagger and all there's all this stuff but

105
00:05:42.300 --> 00:05:43.909
like, really what is REST?

106
00:05:43.909 --> 00:05:45.205
Everybody, at the end of the day,

107
00:05:45.205 --> 00:05:47.279
has to denormalized their
REST to do something crazy.

108
00:05:47.279 --> 00:05:49.298
You gotta attach these query strings,

109
00:05:49.298 --> 00:05:52.918
you gotta do these crazy stuff because
eventually what you have to do.

110
00:05:52.918 --> 00:05:56.321
What you find out is that you build
an app, whether it's a mobile app or

111
00:05:56.321 --> 00:06:00.072
a web app, and you find out is that that
app needs data completely different in

112
00:06:00.072 --> 00:06:01.360
the way REST is designed.

113
00:06:01.360 --> 00:06:04.990
It doesn't need it like this,
it needs associations,

114
00:06:04.990 --> 00:06:08.170
it needs nested structures and
REST doesn't satisfy that.

115
00:06:08.170 --> 00:06:09.600
So what you end up having to do,

116
00:06:09.600 --> 00:06:12.300
you optimize for
the client especially if it's a web app.

117
00:06:12.300 --> 00:06:13.520
You want the client to be optimized.

118
00:06:13.520 --> 00:06:17.630
So therefore, you don't want the client
making multiple calls to get associations.

119
00:06:17.630 --> 00:06:20.620
So you fix the back end, and
now you don't do REST anymore.

120
00:06:20.620 --> 00:06:23.600
Now it's just like, well, now we made this
one special route just for this page.

121
00:06:23.600 --> 00:06:26.580
And it's like okay [LAUGH] what is this,
right?

122
00:06:26.580 --> 00:06:28.130
So I mean really, what is REST?

123
00:06:28.130 --> 00:06:30.660
But I guess the way you
could think of it is,

124
00:06:30.660 --> 00:06:34.220
it's just a structured way
that we can define our routes

125
00:06:34.220 --> 00:06:38.800
that can interact with our resources
taking advantage of HTTP verbs.

126
00:06:38.800 --> 00:06:42.700
So if you use the verb get,
that means you want to get a resource.

127
00:06:42.700 --> 00:06:46.600
If you use the verb put,
that means you want to update a resource.

128
00:06:46.600 --> 00:06:50.310
If you use the verb post,
you want to create a resource.

129
00:06:50.310 --> 00:06:54.050
If you use the verb delete,
you want to remove a resource.

130
00:06:54.050 --> 00:06:57.509
And then options verb is for cores.

131
00:06:57.509 --> 00:07:01.056
And then as far as the resource
string is concerned,

132
00:07:01.056 --> 00:07:05.178
that's just gonna be slash,
wherever your API is, right?

133
00:07:05.178 --> 00:07:08.188
You got some business logic here, and
you might see something like this.

134
00:07:08.188 --> 00:07:11.655
Typical, you'll see something like api/v1,
nobody has a v2.

135
00:07:11.655 --> 00:07:14.076
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Scott Moss: [LAUGH] Nobody has a v2,

136
00:07:14.076 --> 00:07:15.618
it's always v1.

137
00:07:15.618 --> 00:07:19.030
They're over optimistic about
that new API they never build.

138
00:07:19.030 --> 00:07:22.920
It's always v1, and
then the resource name.

139
00:07:22.920 --> 00:07:24.715
They'll be like, the name of the thing.

140
00:07:24.715 --> 00:07:26.831
So in this case, we might have user.

141
00:07:26.831 --> 00:07:31.750
And then typically what you do here
is you would do get and put to this.

142
00:07:31.750 --> 00:07:35.740
So if I did a get request to this URL,
that means I wanna get all the users,

143
00:07:35.740 --> 00:07:37.540
cuz I didn't specify an id.

144
00:07:37.540 --> 00:07:41.770
If I did a post request to this URL,
that means I wanna create a user, right?

145
00:07:41.770 --> 00:07:46.051
But now, if I put an id here,
and I did a get request to this?

146
00:07:46.051 --> 00:07:49.752
It means, I wanna get the user with
this id, right, so not all users.

147
00:07:49.752 --> 00:07:52.920
You couldn't do a post here, because you
could not create a user with this given

148
00:07:52.920 --> 00:07:54.640
id, so that wouldn't make sense.

149
00:07:54.640 --> 00:07:57.170
But you could put a put here, right?

150
00:07:57.170 --> 00:07:59.974
So a put, what it means,
I wanna update the user with this id.

151
00:07:59.974 --> 00:08:01.530
And you can also put a delete here,

152
00:08:01.530 --> 00:08:04.011
as in I'm gonna delete this
user with this id, right?

153
00:08:04.011 --> 00:08:08.561
So that's basically REST,
or what REST should be.

154
00:08:08.561 --> 00:08:10.614
It's supposed to be stateless,
it's supposed to be all this.

155
00:08:10.614 --> 00:08:13.849
But at the end of the day,
nobody really knows what it is, and

156
00:08:13.849 --> 00:08:15.320
nobody wanted to admit it.

157
00:08:17.330 --> 00:08:20.193
Really that was it, I mean Rails came out,
Rails was like, here, we're doing REST,

158
00:08:20.193 --> 00:08:22.470
everything's RESTful resource and
it's great, you can do CRUD.

159
00:08:22.470 --> 00:08:25.983
That's great for a todo app that
literally only does that, but

160
00:08:25.983 --> 00:08:29.509
what about a component that like
does all types of crazy stuff?

161
00:08:29.509 --> 00:08:31.889
Like this is just not gonna work.

162
00:08:31.889 --> 00:08:33.440
But we'll learn about how
to fix that tomorrow.

163
00:08:35.420 --> 00:08:37.860
Cool, so this is what you have to do for
the songRouter.

164
00:08:37.860 --> 00:08:41.610
And then the playlistRouter
is very much the same thing.

165
00:08:43.770 --> 00:08:47.120
As you can see,
this is like a benefit of REST I believe,

166
00:08:47.120 --> 00:08:50.810
because you're pretty much doing this,
it doesn't matter the resource,

167
00:08:50.810 --> 00:08:52.230
they all need the same endpoints, right?

168
00:08:52.230 --> 00:08:54.840
I mean, for user, you probably don't
wanna be exposed in creating a user,

169
00:08:54.840 --> 00:08:56.570
you wanna go through authentication for
that.

170
00:08:56.570 --> 00:08:59.340
But for other resources,
yeah, it's the same thing.

171
00:08:59.340 --> 00:09:04.870
You get one, you can delete one,
you can create one, stuff like that.

172
00:09:04.870 --> 00:09:07.249
So that way you can see that
a lot of this stuff is redundant.

173
00:09:07.249 --> 00:09:11.210
We could have abstracted this to a whole
other level, and just passed in a router

174
00:09:11.210 --> 00:09:14.476
and registered the routes for
it that way with just one function.

175
00:09:14.476 --> 00:09:16.796
Which is what we're doing with some
of the other files we'll get to soon.

176
00:09:18.713 --> 00:09:19.340
&gt;&gt; Scott Moss: You have a question?

177
00:09:19.340 --> 00:09:20.539
&gt;&gt; Speaker 2: Mario's asking, so

178
00:09:20.539 --> 00:09:23.336
in the case with the callback
in the param function

179
00:09:23.336 --> 00:09:27.616
does the job the song is going to be
available in the routes that match later?

180
00:09:27.616 --> 00:09:31.980
&gt;&gt; Scott Moss: Exactly, yep, so the param
is gonna attach it to the request.

181
00:09:31.980 --> 00:09:35.590
And that same request object is
passed down to the next handler.

182
00:09:35.590 --> 00:09:39.940
So yeah, if you mutate the request object,
it's passed down the whole request.

183
00:09:39.940 --> 00:09:44.211
You can think of it as
a per-request cache, basically.

184
00:09:44.211 --> 00:09:45.416
It's only there per request.

185
00:09:45.416 --> 00:09:49.097
You don't have to be afraid of having
two different request's data on the same

186
00:09:49.097 --> 00:09:52.020
request object,
which would be very dangerous, all right?

187
00:09:52.020 --> 00:09:52.937
It's only per request.

188
00:09:52.937 --> 00:09:55.820
So yeah, mutate the request object,
pass it down.

189
00:09:55.820 --> 00:10:02.809
It's available onto whatever handler
comes after it, until you respond.

190
00:10:02.809 --> 00:10:05.673
&gt;&gt; Speaker 2: You just have the createOne
again for deleting on the other two?

191
00:10:05.673 --> 00:10:06.580
I don't know if that matters.

192
00:10:06.580 --> 00:10:08.867
&gt;&gt; Scott Moss: Yeah, yeah,
they're all type, hold on.

193
00:10:08.867 --> 00:10:11.295
&gt;&gt; Speaker 2: It does, but I don't know
if it matters for the sake of the course.

194
00:10:11.295 --> 00:10:12.607
&gt;&gt; Scott Moss: It definitely matters.

195
00:10:12.607 --> 00:10:13.640
I'm sure my test will fail.

196
00:10:14.670 --> 00:10:18.930
Cool, well let's dive into the next thing,

197
00:10:18.930 --> 00:10:22.808
which is going to be Controllers and
Responding.

198
00:10:22.808 --> 00:10:23.343
I thought middleware was next.

199
00:10:23.343 --> 00:10:25.255
Okay, so we're going to Controllers and
Responding.

200
00:10:25.255 --> 00:10:27.361
So if you've got all the way
through this example, actually,

201
00:10:27.361 --> 00:10:28.444
let me write it just to show you.

202
00:10:28.444 --> 00:10:32.208
Cuz I'm sure people were freaking out and
people online probably didn't hear me when

203
00:10:32.208 --> 00:10:35.350
I finally revealed that this
is what should be happening.

204
00:10:35.350 --> 00:10:40.136
But if you run this, you got
everything working, it doesn't break,

205
00:10:40.136 --> 00:10:41.688
everything's good.

206
00:10:41.688 --> 00:10:43.388
Right, you go try to test out your thing.

207
00:10:43.388 --> 00:10:44.774
Let's go test it out, let's see.

208
00:10:44.774 --> 00:10:47.740
We can do this nice trick right here,
that's awesome.

209
00:10:49.120 --> 00:10:53.838
And then you can do /api, and
then you wanna get all the songs, and

210
00:10:53.838 --> 00:10:55.730
you hit enter.

211
00:10:55.730 --> 00:10:59.320
And nothing happens, it just hangs.

212
00:10:59.320 --> 00:11:02.680
That's not a bug or anything,
nothing's coming back.

213
00:11:02.680 --> 00:11:04.050
I should expect something back.

214
00:11:04.050 --> 00:11:07.050
Eventually, this is gonna error out,
it's gonna time out.

215
00:11:07.050 --> 00:11:10.461
That's intentional, did anybody do
some digging and figure out why?

216
00:11:10.461 --> 00:11:12.773
Yeah, why?

217
00:11:12.773 --> 00:11:15.807
&gt;&gt; Speaker 3: Cuz all the methods
are empty in the query.

218
00:11:15.807 --> 00:11:17.350
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 3: Query.js.

219
00:11:17.350 --> 00:11:20.773
&gt;&gt; Scott Moss: All those methods
in query.js are empty, and

220
00:11:20.773 --> 00:11:25.810
those methods that you're talking
about are called controllers.

221
00:11:25.810 --> 00:11:28.201
All the controllers are empty,
there's nothing in here.

222
00:11:28.201 --> 00:11:32.244
Now I'm doing some pretty
crazy stuff in here, kind of.

223
00:11:32.244 --> 00:11:37.245
But it's not too advanced and
I wanted to do this because I wanted

224
00:11:37.245 --> 00:11:42.650
to show how you can generate things
based off like shared logic.

225
00:11:42.650 --> 00:11:44.990
Because it is REST and
because we do have this path and

226
00:11:44.990 --> 00:11:47.278
everything's gonna follow
the same convention,

227
00:11:47.278 --> 00:11:50.859
every single resource is gonna have
a create, read, and update, and delete.

228
00:11:50.859 --> 00:11:52.240
It's gonna have CRUD on it.

229
00:11:52.240 --> 00:11:55.160
We can just do the exact
same controllers for

230
00:11:55.160 --> 00:11:58.360
now by default on every single
resource until we don't, right?

231
00:11:58.360 --> 00:12:00.510
There's gonna be times where
we have to do associations and

232
00:12:00.510 --> 00:12:02.160
we need a different controller.

233
00:12:02.160 --> 00:12:04.080
But by default, yeah,
they all do the same thing.

234
00:12:04.080 --> 00:12:07.700
Creating a song is the same
thing as creating a playlist,

235
00:12:07.700 --> 00:12:08.900
they just take different parameters.

236
00:12:08.900 --> 00:12:10.840
But the logic is exactly the same.

237
00:12:10.840 --> 00:12:15.000
So that's why this follows here,
this allows us to take any model when

238
00:12:15.000 --> 00:12:18.160
we get to models and
then do that thing on that model.

239
00:12:18.160 --> 00:12:19.668
So that's what we're gonna do next.

