WEBVTT

1
00:00:03.366 --> 00:00:06.191
&gt;&gt; Scott: All right, so let's move on to
the the last little bit that I got here.

2
00:00:06.191 --> 00:00:07.630
That's the last excercise we have.

3
00:00:07.630 --> 00:00:11.540
I just got some more stuff to talk about
here, and then we can just freely chat.

4
00:00:11.540 --> 00:00:15.890
The last bit I wanna talk
about was REST and GraphQL.

5
00:00:15.890 --> 00:00:18.965
So, we've been working with REST,
we've been working with GraphQL, and

6
00:00:18.965 --> 00:00:22.391
they've kinda just been sitting next to
each other, so how can they work together?

7
00:00:25.005 --> 00:00:27.590
&gt;&gt; Scott: So, there's some
different ways you can use them.

8
00:00:27.590 --> 00:00:30.700
REST next to GraphQL is basically
what we've been doing now, and

9
00:00:30.700 --> 00:00:32.640
this is what we're using, like I said.

10
00:00:32.640 --> 00:00:35.650
Great if you still need
to use your REST API.

11
00:00:35.650 --> 00:00:40.510
If you have a API that's serving this app,
and

12
00:00:40.510 --> 00:00:44.080
this app might be like, I don't know,
a web app, let's say it's a web app,

13
00:00:44.080 --> 00:00:48.890
right, that same API,
you want to use for your new mobile app,

14
00:00:48.890 --> 00:00:52.320
your new shiny mobile app that you
built in Swift or React Native, but

15
00:00:52.320 --> 00:00:56.090
you want that to use GraphQL, but
you don't wanna build a whole another API.

16
00:00:56.090 --> 00:00:58.680
You wanna use the same
API that's the same data.

17
00:00:58.680 --> 00:01:02.689
So you're just like, I'm gonna put GraphQL
next to it, and then that way the Web app

18
00:01:02.689 --> 00:01:05.697
can still use the REST, and
the mobile app can use the GraphQL.

19
00:01:05.697 --> 00:01:09.283
So they're sitting next to each other on
the same API, accessing the same data, but

20
00:01:09.283 --> 00:01:10.840
with two different approaches.

21
00:01:10.840 --> 00:01:12.056
One's via REST.
One's via GraphQL.

22
00:01:12.056 --> 00:01:14.020
So that's something.

23
00:01:14.020 --> 00:01:15.777
That's the strategy you
can implement there.

24
00:01:15.777 --> 00:01:20.110
It's also great if you're still evaluating
GraphQL and/or you are still building it.

25
00:01:20.110 --> 00:01:24.230
So let's say you do have a web app, you're
thinking about using GraphQL, so you build

26
00:01:24.230 --> 00:01:28.120
it next to your REST implementation or
whatever implementation you have, and

27
00:01:28.120 --> 00:01:32.240
you switch some components over to user
GraphQL in point progressively while

28
00:01:32.240 --> 00:01:36.850
you're still evaluating it, or maybe you
made your decision, you totally wanna use

29
00:01:36.850 --> 00:01:39.240
it, but it's gonna take time, and
you've still gotta serve your customers.

30
00:01:39.240 --> 00:01:41.224
So you still put it there side by side,
and

31
00:01:41.224 --> 00:01:44.414
eventually you change everything
over with some tests and stuff.

32
00:01:44.414 --> 00:01:45.329
So that's implementation.

33
00:01:45.329 --> 00:01:49.020
I've helped tons of companies convert over
to GraphQL, that's the approach we took.

34
00:01:49.020 --> 00:01:52.835
We put it right next to REST and
we start with some test page based on some

35
00:01:52.835 --> 00:01:57.038
criteria, and we'll start switching
it over until everything is done, and

36
00:01:57.038 --> 00:01:58.995
then we'll just turn off the rest.

37
00:01:58.995 --> 00:02:01.022
So you can totally do that, and
that's literally what we're doing now.

38
00:02:01.022 --> 00:02:05.723
It's sitting next to each other, and you
know you're sitting next to each other,

39
00:02:05.723 --> 00:02:09.563
the GraphQL and the REST,
when inside of the server it's mounted.

40
00:02:09.563 --> 00:02:10.822
Here's our rest API.

41
00:02:10.822 --> 00:02:13.229
Here's our GraphQL API.

42
00:02:13.229 --> 00:02:20.290
They're literally right
next to each other.

43
00:02:20.290 --> 00:02:23.660
Another approach you can do is
you can convert REST to GraphQL.

44
00:02:23.660 --> 00:02:27.959
So what that means is you take
an incoming REST request, so

45
00:02:27.959 --> 00:02:32.433
if you have a URL like /user/ID
you would take that URL, and

46
00:02:32.433 --> 00:02:35.620
you would turn that into
a query on the fly.

47
00:02:35.620 --> 00:02:39.700
So, basically what I'm saying is,
you would take a URL like this.

48
00:02:39.700 --> 00:02:46.196
So you would say I'm gonna
take /api/user/12, and

49
00:02:46.196 --> 00:02:54.311
I'm gonna convert it to this string
that looks like user with the id of,

50
00:02:54.311 --> 00:02:58.908
user with 12, and give me back the id,

51
00:02:58.908 --> 00:03:04.617
give me back the username,
something like that.

52
00:03:04.617 --> 00:03:10.295
So you would take that and convert it to
this, and then you would take this and

53
00:03:10.295 --> 00:03:14.199
you would run your GraphQL schema,
I mean, sorry,

54
00:03:14.199 --> 00:03:19.650
you will run the GraphQL query against
the schema with that given query.

55
00:03:19.650 --> 00:03:22.190
So you will literally do exactly what
we did in the text this whole time.

56
00:03:22.190 --> 00:03:26.208
So we go back to our test see how
we're running a query right here.

57
00:03:26.208 --> 00:03:27.978
You can just do this on your server,

58
00:03:27.978 --> 00:03:31.754
there's nothing stopping you from doing
that, except for this query right

59
00:03:31.754 --> 00:03:35.520
here would be the dynamic query that
was created from your REST string.

60
00:03:35.520 --> 00:03:39.812
So you would convert the REST route
into a query or a mutation, and

61
00:03:39.812 --> 00:03:43.480
then just run it against your
schema with the variable,

62
00:03:43.480 --> 00:03:48.649
with the given sign in user and then you
just convert REST to GraphQL on the fly.

63
00:03:50.170 --> 00:03:54.972
So at the end of the day you still
have GraphQL getting your data, but

64
00:03:54.972 --> 00:03:57.254
you're accessing it via REST.

65
00:03:57.254 --> 00:04:00.485
So, again, it allows you to
run GraphQL schema, great for

66
00:04:00.485 --> 00:04:03.130
using the power of GraphQL
to retrieving data.

67
00:04:03.130 --> 00:04:06.153
We also have the power of GraphQL,
how easy it is to pick data and

68
00:04:06.153 --> 00:04:07.134
do stuff on the fly.

69
00:04:07.134 --> 00:04:12.070
So by masking it with REST,
you get the best of both worlds.

70
00:04:12.070 --> 00:04:16.424
If you love REST, then you can still use
that, but then you have GraphQL actually

71
00:04:16.424 --> 00:04:20.397
retrieving the data, going to multiple
sources across the Internet, or

72
00:04:20.397 --> 00:04:24.496
across your replicants, or where ever
all your data is stored they can go and

73
00:04:24.496 --> 00:04:28.116
get all that data and come back and
feed it to your REST requesters.

74
00:04:28.116 --> 00:04:30.260
It is also great for
keeping your REST API.

75
00:04:30.260 --> 00:04:33.741
So if you really just wanna keep you
rest API, but still use GraphQL for

76
00:04:33.741 --> 00:04:35.933
data retrieving, you can totally do that.

77
00:04:35.933 --> 00:04:37.330
So that's another implementations.

78
00:04:37.330 --> 00:04:41.413
There's some other implementations you can
probably fix like you can have convert to

79
00:04:41.413 --> 00:04:43.850
GraphQL, but
still use some of REST over here, and

80
00:04:43.850 --> 00:04:47.645
maybe these routes are GraphQL and this
one's not, so it can be pretty custom,

81
00:04:47.645 --> 00:04:50.840
but these are just the two overall
things that you can probably do.

