WEBVTT

1
00:00:03.850 --> 00:00:05.160
&gt;&gt; Scott Moss: So, lets get into testing.

2
00:00:06.340 --> 00:00:07.990
So we all did testing yesterday, right?

3
00:00:07.990 --> 00:00:09.635
Did anyone actually go home and
do testing last night?

4
00:00:09.635 --> 00:00:13.590
No, I didn't think so.

5
00:00:13.590 --> 00:00:19.070
Okay, testing, okay so
I'm like a test crazy person.

6
00:00:19.070 --> 00:00:21.910
I actually enjoy writing tests,
I don't know why.

7
00:00:21.910 --> 00:00:24.126
I just do, it just feels good.

8
00:00:24.126 --> 00:00:28.260
Writing tests [LAUGH] I don't know
why I just like seeing that green,

9
00:00:28.260 --> 00:00:30.110
it's my favorite color.

10
00:00:30.110 --> 00:00:35.410
So testing with graphql is way easier
than testing what we did yesterday and

11
00:00:35.410 --> 00:00:36.160
you're gonna see why.

12
00:00:36.160 --> 00:00:40.470
Like it's so easy to write tasks
in graphql it's ridiculous.

13
00:00:40.470 --> 00:00:43.530
And the reason it is, one,
we don't have to run a server.

14
00:00:43.530 --> 00:00:44.887
We just don't have to run a server at all.

15
00:00:44.887 --> 00:00:47.191
You're probably thinking like,
well, it's hooked up to the server,

16
00:00:47.191 --> 00:00:47.770
how do we do this?

17
00:00:47.770 --> 00:00:49.310
We don't, we don't have to run a server.

18
00:00:49.310 --> 00:00:51.770
We don't even have to go
through express at all.

19
00:00:51.770 --> 00:00:54.193
We don't even have to touch
Express to test our GraphQL.

20
00:00:54.193 --> 00:00:56.408
Even though GraphQL's hooked
up to Express right now,

21
00:00:56.408 --> 00:01:00.120
we don't even have to look at Express,
so have nothing to do with Express.

22
00:01:00.120 --> 00:01:03.270
In fact it has nothing
to do with the node.

23
00:01:03.270 --> 00:01:04.230
It has nothing to do with anything.

24
00:01:04.230 --> 00:01:06.900
It's literally, you're going to see
it has nothing to do with a server.

25
00:01:06.900 --> 00:01:09.450
It has nothing to do with express.

26
00:01:09.450 --> 00:01:11.742
We're just going to be
testing pure graph QO and

27
00:01:11.742 --> 00:01:15.255
you can pretty much do that in any
environment that can execute our code.

28
00:01:15.255 --> 00:01:17.420
We can literally execute
graph QO anywhere.

29
00:01:17.420 --> 00:01:20.070
In fact there's a package
called graph QO anywhere and

30
00:01:20.070 --> 00:01:22.820
allows you to use graph QO anywhere.

31
00:01:22.820 --> 00:01:29.960
Like you can use GraphQL to make CSS or
React components, or whatever you want.

32
00:01:29.960 --> 00:01:33.500
They just take that query language and
spit out whatever you want, right,

33
00:01:33.500 --> 00:01:34.910
depending on what template you give it.

34
00:01:34.910 --> 00:01:37.920
So we're gonna use GraphQL to
execute inside of our tests.

35
00:01:37.920 --> 00:01:41.860
We can execute query and inspect
the response and the DB activity so

36
00:01:41.860 --> 00:01:45.850
what we'll do it run a query against
the schemes on some variables.

37
00:01:45.850 --> 00:01:47.300
We'll look at the response
that we get back and

38
00:01:47.300 --> 00:01:51.090
then we'll also look in the database
to try to see what happened.

39
00:01:51.090 --> 00:01:51.960
If we expect it to happen.

40
00:01:51.960 --> 00:01:54.050
So, that would be our
strategy with testing.

41
00:01:54.050 --> 00:02:00.882
So let's look at some of the tests
here and you can check out lesson 14.

42
00:02:00.882 --> 00:02:09.386
[NOISE] And if you go down to
the test folder in the helper's file,

43
00:02:09.386 --> 00:02:15.228
you should see a nice
little function here.

44
00:02:15.228 --> 00:02:20.868
And this is literally the only function
we need to write all the test for

45
00:02:20.868 --> 00:02:27.600
our graph cue out and basically what it is
using is the Graph QL JS implementation.

46
00:02:27.600 --> 00:02:29.710
This is the implementation
straight from Facebook.

47
00:02:29.710 --> 00:02:33.980
When Facebook created Graph QL,
they, Graph QL was just a speck.

48
00:02:33.980 --> 00:02:37.300
It wasn't a code, it wasn't a language,
it was just a speck.

49
00:02:37.300 --> 00:02:40.280
And then they made the JavaScript
version of it, the implementation of it.

50
00:02:40.280 --> 00:02:42.730
Facebook made it, this is that version.

51
00:02:42.730 --> 00:02:45.310
This is pretty much what everything
in JavaScript that use GraphQL is

52
00:02:45.310 --> 00:02:46.310
based off on.

53
00:02:46.310 --> 00:02:50.534
It's basically the compiler for
GraphQL, if you will.

54
00:02:50.534 --> 00:02:53.990
It has the AST, the rules,
everything's pretty much based off this.

55
00:02:53.990 --> 00:02:58.390
We're gonna use it raw, so Apollo uses
this internally to run our queries.

56
00:02:58.390 --> 00:03:02.680
We're just gonna use this to run our tests
for not have the power left flexibility.

57
00:03:02.680 --> 00:03:08.020
So what we can do, using that graph to our
query, so this one function right here,

58
00:03:08.020 --> 00:03:11.030
we can use to actually go ahead and
execute all of our text.

59
00:03:11.030 --> 00:03:14.756
It's gonna be using the graph QO library,
that Facebook implemented.

60
00:03:14.756 --> 00:03:18.079
It's just a raw library that every
implementation of graph QO uses

61
00:03:18.079 --> 00:03:19.410
underneath it.

62
00:03:19.410 --> 00:03:21.380
So we're gonna use it for the flexibility.

63
00:03:21.380 --> 00:03:24.190
And basically all we have to
do is we pass in the schema

64
00:03:24.190 --> 00:03:29.300
which is a combination of resolvers and
the type definitions, right?

65
00:03:29.300 --> 00:03:30.740
Those two combined as a schema.

66
00:03:30.740 --> 00:03:34.310
The query is the thing that we write
in graphical that we're asking for,

67
00:03:34.310 --> 00:03:36.680
so that's either query or
mutation, it's just a query.

68
00:03:37.840 --> 00:03:41.200
This object right here is empty
because what it's gonna be

69
00:03:41.200 --> 00:03:43.630
is gonna be the root value,
which is nothing.

70
00:03:43.630 --> 00:03:46.196
We're not passing a root value for test.

71
00:03:46.196 --> 00:03:47.906
It's just like in every
single resolver we have,

72
00:03:47.906 --> 00:03:51.160
the root value I'm place holding
with an underscore, it's nothing.

73
00:03:51.160 --> 00:03:53.710
This next object is gonna be the context.

74
00:03:53.710 --> 00:03:55.609
I'm passing the user down as the context.

75
00:03:56.640 --> 00:04:00.180
And in the last argument is gonna
be the variables for mutations.

76
00:04:00.180 --> 00:04:04.630
So with this one function that returned
our promise we can execute our entire

77
00:04:04.630 --> 00:04:07.740
graph kill schema without a server or
anything we just run it like coat.

78
00:04:07.740 --> 00:04:10.610
It returns our promise and
it resolves the values.

79
00:04:10.610 --> 00:04:11.260
Pretty simple, right?

80
00:04:11.260 --> 00:04:15.950
So I just imported the schema I have
GraphQL here and for your test,

81
00:04:15.950 --> 00:04:19.010
all you gotta do is patch in a query,
some variables associated with it, and

82
00:04:19.010 --> 00:04:21.000
what user you're signed in as.

83
00:04:21.000 --> 00:04:23.400
And it'll execute your query,
and you can check it out.

84
00:04:23.400 --> 00:04:28.562
So I wrote some tests,
we can go check them out on user spec.

85
00:04:28.562 --> 00:04:33.257
And you can see right here, if you
haven't written tests on the back end,

86
00:04:33.257 --> 00:04:35.984
it's a good habit to have stateless test,

87
00:04:35.984 --> 00:04:40.150
as in they don't rely on previous
states of previous tests.

88
00:04:40.150 --> 00:04:43.320
By saying that, I'm dropping the data
base every time I write a test.

89
00:04:43.320 --> 00:04:45.650
Every time I'm making a search
I drop the data base.

90
00:04:45.650 --> 00:04:48.960
I don't want any data left over
from the old test to be there

91
00:04:48.960 --> 00:04:51.270
because it might affect this next test.

92
00:04:51.270 --> 00:04:55.130
So that's why it's a good way to just drop
the data base every single time you do,

93
00:04:55.130 --> 00:04:56.010
One of these it's.

94
00:04:57.020 --> 00:04:59.930
And mocha, whenever you do before each
of after each it's basically saying

95
00:04:59.930 --> 00:05:03.740
before each it after each it do this.

96
00:05:03.740 --> 00:05:04.480
So that's what I'm doing here.

97
00:05:04.480 --> 00:05:09.100
So before each I'm dropping a database and
I'm creating a user,

98
00:05:09.100 --> 00:05:12.110
I'm assigning it to this closure so
i can have access to it down here.

99
00:05:12.110 --> 00:05:15.080
And then just to be safe after
each I'm also just gonna drop it.

100
00:05:15.080 --> 00:05:18.480
So always have a clean database
when I come inside of this.

101
00:05:18.480 --> 00:05:22.540
So our first one is it should get me.

102
00:05:22.540 --> 00:05:23.834
We have a query called get me.

103
00:05:23.834 --> 00:05:28.705
And you can see I'm just using that
function run query that I just showed you.

104
00:05:28.705 --> 00:05:31.760
And I'm just going to run the query,
I'm going to pass the query that I want,

105
00:05:31.760 --> 00:05:33.250
it's just a string.

106
00:05:33.250 --> 00:05:34.157
It's literally just a string.

107
00:05:34.157 --> 00:05:35.440
The same thing you would
pass in graphical.

108
00:05:35.440 --> 00:05:36.790
It's just a string.

109
00:05:36.790 --> 00:05:38.160
The second argument is variables.

110
00:05:38.160 --> 00:05:41.250
I don't have any variables, this doesn't
take any variables so I don't need any.

111
00:05:41.250 --> 00:05:42.371
And the last one is the user.

112
00:05:42.371 --> 00:05:44.268
And you can see this one is the user.

113
00:05:44.268 --> 00:05:46.017
And as you can see I get back the same
thing I would get in ground and

114
00:05:46.017 --> 00:05:46.970
I just make some assertions on it.

115
00:05:48.500 --> 00:05:49.710
That's our test.

116
00:05:49.710 --> 00:05:50.680
That's how simple it is.

117
00:05:50.680 --> 00:05:55.320
We didn't talk to express, we didn't talk
to a server, we didn't fire up a port.

118
00:05:56.710 --> 00:05:58.420
Don't even need the Internet
we just run this test.

119
00:05:59.560 --> 00:06:00.980
Pretty clean.

120
00:06:00.980 --> 00:06:03.250
And it's just more of the same
heres an example of a mutation.

121
00:06:03.250 --> 00:06:06.870
It's just a string you mutate I'm
testing to see if I can update me.

122
00:06:08.110 --> 00:06:09.670
Here's an example of variables.

123
00:06:09.670 --> 00:06:12.090
There's a variable called
input who's type is this.

124
00:06:13.640 --> 00:06:19.700
I'm updating it You can see I pass in
this input variable as well or the user.

125
00:06:19.700 --> 00:06:20.797
And then I just run some tests.

126
00:06:23.002 --> 00:06:25.697
&gt;&gt; Scott Moss: So if you go ahead and
run this right now,

127
00:06:25.697 --> 00:06:28.085
I'm just gonna put a dot only here.

128
00:06:28.085 --> 00:06:29.496
And run the rn test.

129
00:06:35.722 --> 00:06:37.493
&gt;&gt; Scott Moss: They both pass so,

130
00:06:37.493 --> 00:06:42.474
what I want you all to do is
we're gonna work on this for

131
00:06:42.474 --> 00:06:47.789
30 minutes and I wanna see how
many test you can write for

132
00:06:47.789 --> 00:06:54.130
the crazy mutations that we have,
for the song and playlist model.

133
00:06:54.130 --> 00:06:58.743
And you can write all test for
all crazy mutations that's pretty dope but

134
00:06:58.743 --> 00:07:02.000
just do as much as you can
using this exact formula.

135
00:07:02.000 --> 00:07:04.650
Everything that you need is right
here in this user spec file.

136
00:07:04.650 --> 00:07:05.270
Everything you need.

137
00:07:06.290 --> 00:07:10.070
You expect from chai so
do your assertions.

138
00:07:10.070 --> 00:07:11.880
You have run Query to actually execute it.

139
00:07:11.880 --> 00:07:14.200
Then you have dropDb to drop the database.

140
00:07:14.200 --> 00:07:15.739
You could even just
literally just copy this and

141
00:07:15.739 --> 00:07:17.600
change all the things that you need.

142
00:07:17.600 --> 00:07:23.180
But I want you to write as many tests
as you can inside the song spec JS and

143
00:07:23.180 --> 00:07:24.960
the playlist spec JS.

144
00:07:24.960 --> 00:07:26.110
Test the mutations,

145
00:07:26.110 --> 00:07:29.820
test the queries, making sure
you're getting back what you need.

146
00:07:29.820 --> 00:07:35.110
Making sure you know you can resolve all
those, properties and stuff like that.

