WEBVTT

1
00:00:03.540 --> 00:00:04.903
&gt;&gt; Scott Moss: I'm gonna
walk you through it and

2
00:00:04.903 --> 00:00:07.540
you're totally gonna have a better
understanding after this.

3
00:00:08.810 --> 00:00:15.670
So what you were tasked to do,
you were suppose to create resolvers for

4
00:00:15.670 --> 00:00:20.670
get and get all on both the song and
playlist models.

5
00:00:20.670 --> 00:00:24.550
And then expose them to
the GraphQL router, correct?

6
00:00:24.550 --> 00:00:25.420
All right let's do that.

7
00:00:25.420 --> 00:00:29.060
So let's go to, we'll start with the songs
first, so first you would probably have to

8
00:00:29.060 --> 00:00:33.280
create a song dot resolvers file so
if you didn't start with that, you

9
00:00:33.280 --> 00:00:36.950
could have looked at the users resolvers
file to get a clue of how to do that.

10
00:00:38.010 --> 00:00:43.400
And then the next thing is,
we know we need to get and then get all,

11
00:00:43.400 --> 00:00:48.025
so what I'm gonna do is open
up the song.graphQL here.

12
00:00:51.407 --> 00:00:54.525
&gt;&gt; Scott Moss: So I got the GraphQL file
on the right, the resolvers on the left,

13
00:00:54.525 --> 00:00:56.940
and we can kinda walk
through what's going on.

14
00:00:56.940 --> 00:00:58.260
So let's work on get song.

15
00:00:58.260 --> 00:01:02.580
So if we were to get a song, let's
just delete this and walk through it.

16
00:01:02.580 --> 00:01:05.070
The first thing is this is
a top level resolver so

17
00:01:05.070 --> 00:01:06.650
the root value's probably nothing.

18
00:01:06.650 --> 00:01:07.950
So I'm just gonna put a place holder.

19
00:01:07.950 --> 00:01:10.320
That's just me putting a place holder.

20
00:01:10.320 --> 00:01:14.540
That's all that is is just a place
holder that I'm never gonna use.

21
00:01:14.540 --> 00:01:18.440
This is the argument circuit we passed in.

22
00:01:18.440 --> 00:01:22.310
If I'm gonna get one song, most likely
I'm gonna need to supply an ID.

23
00:01:22.310 --> 00:01:23.760
To get that one song most likely.

24
00:01:23.760 --> 00:01:25.240
How else would I be able to get one song?

25
00:01:25.240 --> 00:01:27.090
We did the same thing on REST.

26
00:01:27.090 --> 00:01:31.720
For REST it was /api/song/idparameter,
remember?

27
00:01:32.870 --> 00:01:34.910
This is the same thing, except for
it's not passing a URL.

28
00:01:34.910 --> 00:01:37.170
It's passing as an input, an argument.

29
00:01:37.170 --> 00:01:39.950
So that means I need to get an ID here.

30
00:01:39.950 --> 00:01:42.455
So if I were to come down here,
when I make this query,

31
00:01:42.455 --> 00:01:44.863
you can see that there's a ID,
it's right there.

32
00:01:46.935 --> 00:01:47.810
&gt;&gt; Scott Moss: That's the ID.

33
00:01:47.810 --> 00:01:49.740
That ID, is this ID.

34
00:01:50.881 --> 00:01:54.570
&gt;&gt; Scott Moss: It's type, this is
caller type of ID, making it required.

35
00:01:55.850 --> 00:02:00.240
It returns a Song type that is also nano,
which is up here.

36
00:02:01.460 --> 00:02:02.820
Everybody following me so far?

37
00:02:02.820 --> 00:02:03.690
Okay.

38
00:02:03.690 --> 00:02:05.260
So, we got the ID.

39
00:02:05.260 --> 00:02:07.970
This user, let's just assume
it's gonna be passed down,

40
00:02:07.970 --> 00:02:09.180
we don't really need it in this query.

41
00:02:09.180 --> 00:02:12.750
In fact, let I'm going to get rid
of it to reduce the complexity.

42
00:02:12.750 --> 00:02:16.330
But that user is always there on the
context object because whenever we pass

43
00:02:16.330 --> 00:02:21.420
that down on the GraphQL router here,
that's where that user's coming from.

44
00:02:21.420 --> 00:02:23.140
We also have their request object.

45
00:02:23.140 --> 00:02:26.170
That's always gonna be in the context,
whether we need it or not.

46
00:02:26.170 --> 00:02:28.970
And the production app, we would probably
use that to make sure that the user has

47
00:02:28.970 --> 00:02:33.370
the authentication rights or
the role to access this resolver.

48
00:02:33.370 --> 00:02:35.810
Maybe search for
songs specifically for this user.

49
00:02:35.810 --> 00:02:38.010
So you would use that a lot.

50
00:02:38.010 --> 00:02:39.030
But for now we're not doing that.

51
00:02:40.360 --> 00:02:45.950
So knowing that, we just need to do a,
we have a ID, we have the song model.

52
00:02:45.950 --> 00:02:47.990
We need to return one song.

53
00:02:47.990 --> 00:02:52.370
If we go look at the controllers that we
had, the queries in the query file that we

54
00:02:52.370 --> 00:02:56.700
made, didn't we have something
here that finds by an ID?

55
00:02:56.700 --> 00:02:58.000
Right there, findById.

56
00:02:59.420 --> 00:03:01.810
So we can use the findById method here

57
00:03:03.880 --> 00:03:06.610
on the song model to find
a song by a given ID.

58
00:03:06.610 --> 00:03:13.490
So we can say Song.findById(id) and
now we have it.

59
00:03:13.490 --> 00:03:14.310
So let's get one song.

60
00:03:15.640 --> 00:03:16.290
Who got this?

61
00:03:17.350 --> 00:03:18.300
Okay.

62
00:03:18.300 --> 00:03:19.340
Cool.

63
00:03:19.340 --> 00:03:22.200
So let's get one song and
then get all songs.

64
00:03:22.200 --> 00:03:23.200
So let's get rid of that.

65
00:03:25.340 --> 00:03:27.160
Let's start down here on the query.

66
00:03:27.160 --> 00:03:30.550
So we'll make one,
we'll call it all songs.

67
00:03:30.550 --> 00:03:32.180
You can call this whatever you want.

68
00:03:32.180 --> 00:03:34.950
This is just the way I write my GraphQL.

69
00:03:34.950 --> 00:03:39.510
I've written so many schema and this is
just like how I started to write them.

70
00:03:39.510 --> 00:03:44.980
I named them all the same, allsongs,
all, followed by the type pluralized.

71
00:03:44.980 --> 00:03:47.190
If I getting one,
I just capitalize the type.

72
00:03:47.190 --> 00:03:49.010
I'm just gonna look at one of these types.

73
00:03:49.010 --> 00:03:50.540
You can name it whatever you want,
doesn't matter,

74
00:03:50.540 --> 00:03:53.110
as long as it matches with your
queries and your resolvers.

75
00:03:53.110 --> 00:03:55.990
They just have to match,
however you wanna do it.

76
00:03:55.990 --> 00:03:58.620
So for allsongs,
it doesn't take any arguments.

77
00:03:58.620 --> 00:03:59.910
And the production app maybe it would,

78
00:03:59.910 --> 00:04:03.650
it would probably take in like,
what you wanna filter by.

79
00:04:03.650 --> 00:04:06.860
And you might have some filter inputs
here like I want songs whose name

80
00:04:06.860 --> 00:04:08.409
start with whatever.

81
00:04:08.409 --> 00:04:09.730
Filtering here.

82
00:04:09.730 --> 00:04:12.110
But for now, we don't have any arguments.

83
00:04:12.110 --> 00:04:13.300
It's just gonna return an array.

84
00:04:14.360 --> 00:04:15.140
Of songs.

85
00:04:15.140 --> 00:04:16.420
That array has to be non-null.

86
00:04:16.420 --> 00:04:19.680
So it should always be an array,
even if the array is empty.

87
00:04:19.680 --> 00:04:21.870
If I wanted to require that it
always has to be a song in there,

88
00:04:21.870 --> 00:04:23.610
I can put an exclamation there and

89
00:04:23.610 --> 00:04:27.350
it says it has to be an array that
also always has a song in it.

90
00:04:27.350 --> 00:04:28.190
But that's not the case.

91
00:04:28.190 --> 00:04:28.970
You might not have songs.

92
00:04:28.970 --> 00:04:30.110
But I should still get back an array.

93
00:04:31.530 --> 00:04:32.660
So let's satisfy that.

94
00:04:32.660 --> 00:04:36.700
If we have all songs, we don't take any
arguments, we don't need the user here,

95
00:04:36.700 --> 00:04:38.480
then I'm not really gonna use
any of these arguments up here.

96
00:04:38.480 --> 00:04:40.300
I don't even really need anything.

97
00:04:40.300 --> 00:04:45.501
I'm just gonna return every song
in the database which is song.find

98
00:04:45.501 --> 00:04:50.714
with an empty query and execute it,
that's gonna get all the songs.

99
00:04:53.331 --> 00:04:54.400
&gt;&gt; Scott Moss: All right,
so we'll save that.

100
00:04:54.400 --> 00:04:56.780
And then down below this is just matching.

101
00:04:56.780 --> 00:05:01.260
So if you pull these up side by side, for
the query type we're gonna make a new

102
00:05:01.260 --> 00:05:06.040
field called allsongs
whose value is allsongs.

103
00:05:06.040 --> 00:05:10.590
That's what happened here, for
the query type we made a new field called

104
00:05:10.590 --> 00:05:15.120
allsongs who's value is gonna
be the result of this function.

105
00:05:15.120 --> 00:05:18.230
Which Song.fine does turn return an array.

106
00:05:18.230 --> 00:05:23.030
Song.fine along as it doesn't error out on
the database will always return an array.

107
00:05:23.030 --> 00:05:25.080
Whether it's empty or not,
that's just how mongoose works.

108
00:05:25.080 --> 00:05:29.380
Always returns an array whether it's empty
or not unless it errors out because It

109
00:05:29.380 --> 00:05:34.980
broke so this function will satisfy
this type we're good there.

110
00:05:34.980 --> 00:05:40.910
Now for the song one we say on the query
object we made a new field called

111
00:05:40.910 --> 00:05:46.090
Song with a capital S whose value is gonna
be the result of the getSong function.

112
00:05:46.090 --> 00:05:49.309
So, Song right here on the query type.

113
00:05:50.320 --> 00:05:53.110
Whose value needs to be the song type.

114
00:05:53.110 --> 00:05:54.340
Don't confuse the two.

115
00:05:54.340 --> 00:05:57.410
This Song function right here has
nothing to do with the song type.

116
00:05:57.410 --> 00:05:59.330
That's just the way I named it.

117
00:05:59.330 --> 00:06:01.516
If that was confusing you,

118
00:06:01.516 --> 00:06:06.750
then I can call this like anything
[LAUGH] I can call this anything.

119
00:06:08.200 --> 00:06:10.545
As long as it's also
called anything over here

120
00:06:17.020 --> 00:06:17.840
&gt;&gt; Scott Moss: Does that make sense?

121
00:06:19.130 --> 00:06:22.120
So, those two have nothing
to do with each other.

122
00:06:22.120 --> 00:06:26.340
That's just my convention for naming
queries that get one type, all right?

123
00:06:26.340 --> 00:06:27.940
I just normally call it
by the same type name.

124
00:06:30.120 --> 00:06:32.700
So, if we look at this, getSong.

125
00:06:32.700 --> 00:06:37.840
Find by ID either returns the song or
it's gonna return null.

126
00:06:37.840 --> 00:06:42.605
So, does this really
satisfy our query here?

127
00:06:46.720 --> 00:06:49.569
&gt;&gt; Scott Moss: It's not a trick question.

128
00:06:49.569 --> 00:06:51.135
Does it, does it?

129
00:06:51.135 --> 00:06:52.878
Cuz think about-
&gt;&gt; Speaker 2: It can't return null.

130
00:06:52.878 --> 00:06:54.210
&gt;&gt; Scott Moss: It can't return null,
exactly.

131
00:06:54.210 --> 00:06:57.970
If this does not find a song
in the database with this ID

132
00:06:57.970 --> 00:06:59.520
its just gonna return null.

133
00:06:59.520 --> 00:07:00.900
Then this will throw an error,

134
00:07:00.900 --> 00:07:04.550
when I say this GraphQL will throw
an error like hey it's null.

135
00:07:04.550 --> 00:07:08.711
You got two choices here, you can
either get rid of the null restriction,

136
00:07:08.711 --> 00:07:10.430
which I don't think I recommend.

137
00:07:10.430 --> 00:07:13.240
Or what you would do here is you
would throw the error yourself.

138
00:07:13.240 --> 00:07:15.660
If it's null,
which is probably a better approach.

139
00:07:15.660 --> 00:07:20.355
So what I would do is come in here and
I would say,

140
00:07:24.243 --> 00:07:25.901
&gt;&gt; Scott Moss: [INAUDIBLE] so

141
00:07:25.901 --> 00:07:29.820
I would say Song.findById and

142
00:07:29.820 --> 00:07:36.006
then if it was not nosong,
then I would just throw

143
00:07:38.956 --> 00:07:45.760
&gt;&gt; Scott Moss: Cannot find song with ID.

144
00:07:45.760 --> 00:07:47.380
If it is there, I'll just return song.

145
00:07:49.350 --> 00:07:50.870
Now I'm just gonna throw an error in.

146
00:07:50.870 --> 00:07:54.140
That might seem like whoa,
where's that error going?

147
00:07:54.140 --> 00:07:55.860
Are you gonna break the app with that.

148
00:07:55.860 --> 00:07:59.830
Well we're using Apollo server,
and what they do is,

149
00:07:59.830 --> 00:08:03.800
any error that's thrown in the resolver
is automatically be caught for you.

150
00:08:03.800 --> 00:08:06.030
And it's going to be
just given to the client.

151
00:08:06.030 --> 00:08:07.740
So that can be good or bad.

152
00:08:07.740 --> 00:08:11.420
If you put some systemic information
in the error, and the client sees that,

153
00:08:11.420 --> 00:08:13.440
you probably don't want that, right?

154
00:08:13.440 --> 00:08:15.470
There's a better approach
to handling errors.

155
00:08:17.150 --> 00:08:19.000
I have a purse that I use on my back end.

156
00:08:19.000 --> 00:08:19.980
It is a little more complicated.

157
00:08:19.980 --> 00:08:24.370
So basically the crux of
it is that you create

158
00:08:24.370 --> 00:08:28.210
sophisticated error messages and error
codes that your front end can respond to.

159
00:08:28.210 --> 00:08:30.680
And then your front end just
responds appropriately.

160
00:08:30.680 --> 00:08:34.265
Just do not send sensitive information,
that's basically it, but end of the day,

161
00:08:34.265 --> 00:08:37.414
you are just throwing errors and
then figuring out what message to throw.

162
00:08:37.414 --> 00:08:41.367
First, let's sort of express where you
pass an error to next, and then at the end

163
00:08:41.367 --> 00:08:45.380
of your express handler you forgot what
message to send back, and a status code.

164
00:08:45.380 --> 00:08:47.180
There is no status codes here.

165
00:08:47.180 --> 00:08:50.770
It's mostly based around whatever
convention you create for your errors.

166
00:08:50.770 --> 00:08:55.010
For me, what we do is, when we throw
errors, we give them like a code.

167
00:08:55.010 --> 00:08:57.510
So it might be error code 1-10.

168
00:08:57.510 --> 00:09:00.450
And then the client knows what to do if
the code is 1, and knows what to do if

169
00:09:00.450 --> 00:09:03.460
the code is 2 and knows what to do if the
code is 3, and it responds appropriately.

170
00:09:04.820 --> 00:09:06.182
Does that makes sense?

171
00:09:06.182 --> 00:09:11.290
So this will satisfy, so
this will always return a song or

172
00:09:11.290 --> 00:09:13.040
it will error before here.

173
00:09:13.040 --> 00:09:16.190
But GraphQL should never
say there's no song.

174
00:09:16.190 --> 00:09:17.210
It should never say that.

175
00:09:17.210 --> 00:09:19.445
It will say there is no
song here though but

176
00:09:19.445 --> 00:09:23.920
GraphQL would never complain
about any questions on that?

177
00:09:27.310 --> 00:09:32.471
Okay, so let's go to Playlist,

178
00:09:38.535 --> 00:09:40.650
&gt;&gt; Scott Moss: And you can go over here.

179
00:09:40.650 --> 00:09:43.030
This was probably harder, right?

180
00:09:43.030 --> 00:09:47.980
Because it has a song type, so

181
00:09:47.980 --> 00:09:50.930
if you go play this resolver,

182
00:09:52.220 --> 00:09:57.440
we need to do a get play list, actually
let's look at this so let's first go here.

183
00:09:58.570 --> 00:10:00.160
So first we need to do a get and
a get all.

184
00:10:01.320 --> 00:10:04.800
So let's define the get, and
that's gonna be the playlist.

185
00:10:04.800 --> 00:10:06.030
Again, this is just my convention.

186
00:10:06.030 --> 00:10:07.860
You can call it whatever you want.

187
00:10:07.860 --> 00:10:09.430
Whenever I'm going a git on a type,

188
00:10:09.430 --> 00:10:14.310
I just normally give the query
the same name as the type itself.

189
00:10:14.310 --> 00:10:15.580
That's just my convention.

190
00:10:15.580 --> 00:10:19.670
So I'm also probably gonna need a ID
to get a playlist by the specific ID.

191
00:10:20.680 --> 00:10:21.730
So I'm doing the same thing.

192
00:10:23.010 --> 00:10:25.210
we can make the same
optimization we just made,

193
00:10:25.210 --> 00:10:28.040
where we're throwing
an error if it's null.

194
00:10:28.040 --> 00:10:29.260
So we can also do that here as well.

195
00:10:31.030 --> 00:10:33.650
And then for all playlists,
it's exactly the same thing.

196
00:10:33.650 --> 00:10:36.300
I'm just going to find and
exec and that's going to do that.

197
00:10:37.610 --> 00:10:40.624
Now, can anybody tell me
why this wouldn't work?

198
00:10:42.547 --> 00:10:44.690
&gt;&gt; Scott Moss: It's exactly
the same as what we just did.

199
00:10:44.690 --> 00:10:48.990
But because the playlist type in
GraphQL is slightly different,

200
00:10:48.990 --> 00:10:50.570
why would this not work?

201
00:10:50.570 --> 00:10:53.320
Or even better,
can you tell me where this would fill?

202
00:10:53.320 --> 00:10:57.463
What query would someone have to ask for
in order for this to break?

203
00:11:02.181 --> 00:11:03.670
&gt;&gt; Speaker 2: Are you
talking about the song?

204
00:11:03.670 --> 00:11:06.260
&gt;&gt; Scott Moss: Talking about the song,
yeah, the songs.

205
00:11:06.260 --> 00:11:09.780
We didn't tell GraphQL
how to resolve songs.

206
00:11:09.780 --> 00:11:13.940
Right now the way this is stored in
the database if you look at the playlist

207
00:11:13.940 --> 00:11:21.540
model, right, it's stored in the database
as an array of strings So, when we query,

208
00:11:21.540 --> 00:11:24.950
let's say I get one play list, and
then I also get the songs, right.

209
00:11:24.950 --> 00:11:30.870
I think the songs pulls to be current
graph qo, the songs are song tight.

210
00:11:30.870 --> 00:11:33.260
We know that song tight was an object,
right.

211
00:11:33.260 --> 00:11:34.880
But in data it is strange.

212
00:11:34.880 --> 00:11:38.830
So what I tried to query it,
GraphQL goes like I got a string, for

213
00:11:38.830 --> 00:11:40.530
which it has to be a song.

214
00:11:40.530 --> 00:11:44.910
We didn't tell GraphQL how to
resolve the songs inside that model.

215
00:11:44.910 --> 00:11:45.490
So this will break.

216
00:11:45.490 --> 00:11:46.410
And I can demonstrate it.

217
00:11:46.410 --> 00:11:48.973
So let's just save all of this.

218
00:11:53.575 --> 00:11:55.853
&gt;&gt; Scott Moss: Start this up and,
something.

219
00:11:59.510 --> 00:12:01.616
&gt;&gt; Scott Moss: Did I do here something?

220
00:12:03.562 --> 00:12:05.250
&gt;&gt; Scott Moss: What happened?

221
00:12:05.250 --> 00:12:06.382
Did y'all see me delete that?

222
00:12:08.035 --> 00:12:09.270
&gt;&gt; Scott Moss: I didn't delete that.

223
00:12:09.270 --> 00:12:12.050
Okay, so let's go back over here.

224
00:12:12.050 --> 00:12:17.980
We'll refresh and then we'll say,
&gt;&gt; Scott Moss: Let's just get all songs,

225
00:12:17.980 --> 00:12:18.760
right?

226
00:12:18.760 --> 00:12:21.989
So get playlist, get all playlist.

227
00:12:23.790 --> 00:12:25.950
All right, this is allPlaylists,
there we go.

228
00:12:25.950 --> 00:12:28.400
We don't have any playlists right now,
so obviously we hit empty array.

229
00:12:28.400 --> 00:12:30.040
So, we would have to create a playlist.

230
00:12:30.040 --> 00:12:34.280
I'm just gonna create a playlist right
quick, so we can see what would happen.

231
00:12:34.280 --> 00:12:35.850
Actually, maybe it'll throw
the error if I just do it now.

232
00:12:37.070 --> 00:12:40.250
No it won't, okay,
I'm just gonna create a playlist so

233
00:12:40.250 --> 00:12:42.160
we can all see what I'm
talking about here.

234
00:12:42.160 --> 00:12:43.790
So let me just come down here.

235
00:12:45.370 --> 00:12:54.535
So let's say Playlist.create, this title.

236
00:13:01.265 --> 00:13:06.800
&gt;&gt; Scott Moss: Hello, we'll actually
have to create some songs too.

237
00:13:06.800 --> 00:13:08.270
That's too much work.

238
00:13:08.270 --> 00:13:09.690
All right.
When we get to mutations I'll show you

239
00:13:09.690 --> 00:13:11.850
that's too much work.

240
00:13:11.850 --> 00:13:15.560
But basically, see look it's
already happening right here.

241
00:13:15.560 --> 00:13:17.660
I'm on the allPlaylist and
I'm saying, cool.

242
00:13:17.660 --> 00:13:21.180
I want the songs and I wanna get
the titles of those songs, right?

243
00:13:21.180 --> 00:13:24.205
But, in the database,
it's just an array of strings.

244
00:13:27.830 --> 00:13:29.560
&gt;&gt; Scott Moss: These songs
are just an array of strings.

245
00:13:31.250 --> 00:13:36.340
We haven't told GraphQL how to
convert those, it's not even GraphQL.

246
00:13:36.340 --> 00:13:40.700
We haven't even told mongo how to convert
those array strings to an object.

247
00:13:40.700 --> 00:13:42.480
Cuz GraphQL is just
gonna take what it gets.

248
00:13:42.480 --> 00:13:45.310
This right here, it's just going to
return a playlist that has a title and

249
00:13:45.310 --> 00:13:47.980
array of strings for
songs, and a favorite.

250
00:13:47.980 --> 00:13:51.759
And they we're saying I want for each item
in that array, I wanna get the ID and

251
00:13:51.759 --> 00:13:53.345
the name, no, we can't do it.

252
00:13:53.345 --> 00:13:54.370
There's no such things.

253
00:13:54.370 --> 00:13:59.938
It's just not there.

254
00:13:59.938 --> 00:14:03.530
So in order to do that, you have to
do a resolver or you can greedy and

255
00:14:03.530 --> 00:14:07.460
be naive and
just populate it all right here.

256
00:14:07.460 --> 00:14:10.710
Like what I said last time,
it's very, very wasteful.

257
00:14:10.710 --> 00:14:15.680
Cuz you might, you will just be doing
it it in case someone asks for songs.

258
00:14:15.680 --> 00:14:20.158
Well they never ask for songs you still
populated anyway which is expensive.

259
00:14:20.158 --> 00:14:23.280
So you probably don't wanna you would
have to make another resolver down here.

260
00:14:23.280 --> 00:14:27.246
And we're really gonna get to that,
you all in the last lesson but there is

261
00:14:27.246 --> 00:14:32.181
a lesson I'll go to more detail about that
&gt;&gt; Scott Moss: So

262
00:14:32.181 --> 00:14:36.190
if you got this far, then, yep,
that's what you had to do.

263
00:14:36.190 --> 00:14:40.530
And then also you just had to make
sure that the resolvers were inside of

264
00:14:40.530 --> 00:14:46.040
the GraphQL router file, which consists
of just importing the resolvers here.

265
00:14:47.050 --> 00:14:50.810
Adding them to this merge, but
not before exporting them and

266
00:14:50.810 --> 00:14:53.450
their appropriate local
GraphQL router file.

267
00:14:53.450 --> 00:14:55.970
So every resource has their
own GraphQL router file,

268
00:14:55.970 --> 00:14:57.560
where the type is being exported.

269
00:14:57.560 --> 00:14:59.976
You will also have to
export the resolvers there.

270
00:14:59.976 --> 00:15:03.460
So the song.GraphQL.Router needed
to export the resolvers, and

271
00:15:03.460 --> 00:15:07.320
then playlist.GraphQL.Router will
also need to export its resolvers.

272
00:15:07.320 --> 00:15:11.430
Therefore it could have been imported
in the main GraphQL router up here.

273
00:15:12.610 --> 00:15:17.110
And then if all these was too confusing,
you could look at the user example,

274
00:15:17.110 --> 00:15:21.351
it's doing the same thing minus
the differences between the queries.

