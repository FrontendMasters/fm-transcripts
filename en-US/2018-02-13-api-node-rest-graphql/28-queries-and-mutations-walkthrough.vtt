WEBVTT

1
00:00:03.026 --> 00:00:06.837
&gt;&gt; Scott Moss: All right, so, before we
hop in the challenge, I'm just gonna walk

2
00:00:06.837 --> 00:00:11.510
through some GraphQL stuff so we can
actually explore and see what's going on.

3
00:00:11.510 --> 00:00:15.830
Okay, so what you're looking at here,
who seen this before?

4
00:00:17.540 --> 00:00:18.370
Okay.

5
00:00:18.370 --> 00:00:22.290
So this is called GraphiQL,
it's like a play on words,

6
00:00:23.600 --> 00:00:27.540
it's GraphiQL, they threw an I in there,
graphical, it's pretty funny.

7
00:00:27.540 --> 00:00:32.830
But basically this is, remember I
said GraphQL has interactive docs?

8
00:00:32.830 --> 00:00:33.640
This is it.

9
00:00:33.640 --> 00:00:34.930
This is GraphQL's interactive docs.

10
00:00:34.930 --> 00:00:37.430
So this is actually the API,
the graph API,

11
00:00:37.430 --> 00:00:39.340
the GraphiQL API that
you'll be building today.

12
00:00:39.340 --> 00:00:42.400
This is on the last solution bands and
I just have it pulled up.

13
00:00:42.400 --> 00:00:45.734
And with this what we can do is we
can actually explore GraphQL and

14
00:00:45.734 --> 00:00:47.169
we can see a couple things.

15
00:00:47.169 --> 00:00:48.944
So I'm gonna give you a tour right quick.

16
00:00:48.944 --> 00:00:53.001
So what we have here on the left is where
we can write our GraphQL quiries and

17
00:00:53.001 --> 00:00:55.900
mutations and
we're gonna do that in just a second.

18
00:00:55.900 --> 00:00:59.730
Over here on the right we have the results
of those queries and mutations.

19
00:00:59.730 --> 00:01:00.687
So when you execute them,

20
00:01:00.687 --> 00:01:03.480
the results that the server responds
with will be printed here on the right.

21
00:01:04.580 --> 00:01:06.750
Down below, if you drag this up,

22
00:01:06.750 --> 00:01:11.960
we have a little place where we can inject
variables into our queries and mutations.

23
00:01:11.960 --> 00:01:14.507
And variables are things
that you will need to do.

24
00:01:14.507 --> 00:01:17.250
For instance, you wanna do filtering,
you would put that in a variable.

25
00:01:17.250 --> 00:01:20.330
If you needed to pass an ID because you
wanted to get this song by this ID,

26
00:01:20.330 --> 00:01:21.554
you would put that in a variable.

27
00:01:21.554 --> 00:01:24.230
Things that are dynamic, they have
to be injected into your queries.

28
00:01:24.230 --> 00:01:25.530
Those are variables.

29
00:01:25.530 --> 00:01:28.800
Up here we have this play button
which executes the query.

30
00:01:28.800 --> 00:01:33.980
This prettify button just prettifies your
query, so it's like nice and formatted.

31
00:01:33.980 --> 00:01:35.480
History allows you to go back.

32
00:01:35.480 --> 00:01:37.940
And then the best part is
this Docs tab over here.

33
00:01:37.940 --> 00:01:38.830
So click on Docs.

34
00:01:40.060 --> 00:01:44.688
Most likely or most depending on what
type of GraphQL API you're looking at.

35
00:01:44.688 --> 00:01:48.330
You're either gonna see query and
mutation or you're gonna see root.

36
00:01:48.330 --> 00:01:50.370
In our example we're gonna see query and

37
00:01:50.370 --> 00:01:54.213
mutation because we are not doing what's
called a relay based GraphQL API.

38
00:01:54.213 --> 00:01:59.270
Relay is a framework that Facebook
made in conjunction with GraphQL.

39
00:01:59.270 --> 00:02:03.730
It's a client side GraphQL
implementation that implements

40
00:02:03.730 --> 00:02:07.710
GraphQL slightly differently using
edges and nodes like a true graph.

41
00:02:07.710 --> 00:02:08.340
We're not gonna do that.

42
00:02:08.340 --> 00:02:11.270
We're just gonna keep it
simple with a GraphQL API.

43
00:02:11.270 --> 00:02:12.560
So you'll see query mutations.

44
00:02:12.560 --> 00:02:13.770
So these are the roots.

45
00:02:13.770 --> 00:02:15.570
So remember what I said queries are?

46
00:02:16.680 --> 00:02:18.162
Anybody remember?
&gt;&gt; Speaker 2: They get data.

47
00:02:18.162 --> 00:02:19.220
&gt;&gt; Scott Moss: They get data.

48
00:02:19.220 --> 00:02:21.390
So in our case, get one, get all, right?

49
00:02:21.390 --> 00:02:22.940
So I click on query,

50
00:02:22.940 --> 00:02:25.990
you'll see these functions here that like
mean absolutely nothing to you right now.

51
00:02:27.160 --> 00:02:30.760
But let's read through the syntax and
try to figure out what's going on.

52
00:02:30.760 --> 00:02:32.940
So let's look at this first one,
it says get me.

53
00:02:32.940 --> 00:02:37.350
And then, it's got this semicolon,
and user with an exclamation.

54
00:02:37.350 --> 00:02:38.770
Basically what this is saying is,

55
00:02:38.770 --> 00:02:43.330
hey, if you click on query, you have
a query, its name is called get me.

56
00:02:44.380 --> 00:02:47.975
And its return value is a user type.

57
00:02:47.975 --> 00:02:52.290
And this exclamation, this bang here,
is saying it's non-null.

58
00:02:52.290 --> 00:02:53.930
It cannot be null.

59
00:02:53.930 --> 00:02:56.160
If there is no user,
it's probably gonna throw an error.

60
00:02:56.160 --> 00:02:58.680
It's never gonna return a null user,
that's never gonna be null.

61
00:02:58.680 --> 00:03:00.440
It's either gonna be a user or
it's gonna throw an error.

62
00:03:00.440 --> 00:03:03.210
It's never gonna be empty,
that's what that's saying.

63
00:03:03.210 --> 00:03:04.560
So that's the syntax for this.

64
00:03:04.560 --> 00:03:07.690
So if you go down to the next one,
this one is called song and

65
00:03:07.690 --> 00:03:09.420
you see these parenthesis there.

66
00:03:09.420 --> 00:03:11.780
You probably guessed,
these are the arguments that it takes.

67
00:03:11.780 --> 00:03:13.919
It takes an argument called ID and

68
00:03:13.919 --> 00:03:19.520
its type is an ID type and
that then means that it's required.

69
00:03:19.520 --> 00:03:20.620
It's a required argument.

70
00:03:20.620 --> 00:03:27.480
You have to pass it in and its return type
is the song which is also non-null, right.

71
00:03:28.660 --> 00:03:32.170
Down here below in the next one,
allSongs is a function.

72
00:03:32.170 --> 00:03:37.400
It returns an array of songs,
and that array is now null.

73
00:03:37.400 --> 00:03:40.500
So there might not be any songs in the
array, but there will always be an array.

74
00:03:40.500 --> 00:03:41.170
That's what that's saying.

75
00:03:41.170 --> 00:03:44.080
There will always be an array,
even if there might not be anything in it.

76
00:03:44.080 --> 00:03:47.670
If I wanted to say that I want
there always to be a song,

77
00:03:47.670 --> 00:03:50.640
I could have put a bang after
the G in song, which means

78
00:03:50.640 --> 00:03:53.980
it's going to be a non null array, and
there will always be something in it.

79
00:03:53.980 --> 00:03:57.830
But, that's not the case.
&gt;&gt; Scott Moss: Any questions on

80
00:03:57.830 --> 00:03:59.170
that stuff?

81
00:03:59.170 --> 00:04:01.590
Yes.
&gt;&gt; Speaker 3: So, the non null,

82
00:04:01.590 --> 00:04:03.410
you said if there's an error.

83
00:04:03.410 --> 00:04:07.270
How is that actually handled?
&gt;&gt; Scott Moss: So, the way the non null

84
00:04:07.270 --> 00:04:12.540
works is, when you resolve these data
types for GraphQL and it goes back through

85
00:04:12.540 --> 00:04:16.560
GraphQL before it goes to the client
GraphQL will see, it'll look at the thing

86
00:04:16.560 --> 00:04:21.540
you gave it, and it'll be like, based on
the schema, this thing can be non null.

87
00:04:21.540 --> 00:04:24.370
You gave me back a null value,
so it'll break.

88
00:04:24.370 --> 00:04:26.350
It'll break right there, and
the client will get an error and

89
00:04:26.350 --> 00:04:30.770
say cannot have non null value for user.

90
00:04:30.770 --> 00:04:32.400
And the server will get
an error with the same thing.

91
00:04:32.400 --> 00:04:33.780
So that's one way it'll break.

92
00:04:33.780 --> 00:04:37.920
The other way is, you actually throw the
error yourself inside of your resolver.

93
00:04:37.920 --> 00:04:42.480
So you can say hey, I went to go get me,
but I could not get me,

94
00:04:42.480 --> 00:04:44.580
so I'm just gonna throw
an error right quick.

95
00:04:44.580 --> 00:04:45.970
So it's totally up to
you how you wanna do it.

96
00:04:45.970 --> 00:04:50.520
You can let GraphQL handle that non null
error for you, or you can catch the error

97
00:04:50.520 --> 00:04:54.270
yourself on the resolver and throw
a more descriptive error to the client.

98
00:04:55.390 --> 00:04:59.090
But yeah, by default,
if you return a null value for

99
00:04:59.090 --> 00:05:01.720
a non null type, GraphQL will break.

100
00:05:05.710 --> 00:05:07.570
Anymore questions on this stuff?

101
00:05:07.570 --> 00:05:09.540
We're gonna keep going.

102
00:05:09.540 --> 00:05:11.320
All right, so let's use one of these.

103
00:05:11.320 --> 00:05:15.199
So let's say I wanna do a query on getMe.

104
00:05:15.199 --> 00:05:19.380
Let's first see what a user is.

105
00:05:19.380 --> 00:05:24.770
So if click on user, you can see that
here all the properties of a user, right?

106
00:05:24.770 --> 00:05:27.580
Now the user type was
not built into GraphQL.

107
00:05:27.580 --> 00:05:32.060
GraphQL out just like any language
out there has primitive types or

108
00:05:32.060 --> 00:05:33.930
what they call in GraphQL scholar types.

109
00:05:33.930 --> 00:05:36.660
Scholar types are ttypes
that are built into GraphQL.

110
00:05:36.660 --> 00:05:39.830
And those types are very basic,

111
00:05:39.830 --> 00:05:42.080
you can pretty much use them
in almost any language.

112
00:05:42.080 --> 00:05:47.267
You have strings, you have integers,

113
00:05:47.267 --> 00:05:51.361
floats, IDs, and booleans.

114
00:05:51.361 --> 00:05:53.940
And then you have enums,
which are just constants, right?

115
00:05:53.940 --> 00:05:56.823
So those are all primitive
types in GraphQL.

116
00:05:56.823 --> 00:05:59.660
Anything else that's not that,
is a type that we made.

117
00:05:59.660 --> 00:06:02.360
So this user type, we made that type.

118
00:06:02.360 --> 00:06:03.890
This song type, we made that type.

119
00:06:03.890 --> 00:06:05.800
This playlist type, we made that.

120
00:06:05.800 --> 00:06:08.310
ID, that's a scholar type,
that's built in.

121
00:06:08.310 --> 00:06:13.420
So the way GraphQL works is whenever you
try to resolve a type that is non-scholar,

122
00:06:13.420 --> 00:06:17.480
you have to manually return that,
you have to manually create that type.

123
00:06:17.480 --> 00:06:21.430
Anything that is scalar,
is resolved automatically for

124
00:06:21.430 --> 00:06:22.850
you because it's just a value.

125
00:06:22.850 --> 00:06:25.088
If it's non-scalar,
this basically means it's an object.

126
00:06:25.088 --> 00:06:27.620
Everything that's non-scalar like users,
song, playlist,

127
00:06:27.620 --> 00:06:31.060
that's an object and you have to
describe the shape of that object.

128
00:06:31.060 --> 00:06:33.570
So in our case,
we said a user looks like this.

129
00:06:33.570 --> 00:06:38.730
It has an ID, a username,
an array of playlists.

130
00:06:38.730 --> 00:06:41.680
Created an updated app, right?

131
00:06:41.680 --> 00:06:43.398
So that's how we describe
the shape of the user.

132
00:06:43.398 --> 00:06:44.560
We're all gonna do this.

133
00:06:44.560 --> 00:06:47.190
So this is like, so if you're like,
I can't follow along right now,

134
00:06:47.190 --> 00:06:49.480
that's totally fine,
I'm just giving you some context so

135
00:06:49.480 --> 00:06:51.270
that we can actually start working on it.

136
00:06:51.270 --> 00:06:54.070
So let's do a query request,
let's jump right into it.

137
00:06:54.070 --> 00:06:57.750
There's two ways to do a query, well
there's a couple of ways to do a query and

138
00:06:57.750 --> 00:06:59.380
depending on what your needs are.

139
00:06:59.380 --> 00:07:02.290
Our needs are just to check it out, so the
way we're gonna do it first is we're just

140
00:07:02.290 --> 00:07:04.280
gonna use this empty object like this.

141
00:07:05.360 --> 00:07:09.860
Most things in GraphQL start off using
this syntax unless you do names,

142
00:07:09.860 --> 00:07:11.370
query, or mutations.

143
00:07:11.370 --> 00:07:15.320
And then, we follow it by the name
of the query we wanna do.

144
00:07:15.320 --> 00:07:16.936
So in this case I wanna do getMe.

145
00:07:16.936 --> 00:07:18.630
And you see,
I get some autocomplete there.

146
00:07:18.630 --> 00:07:19.910
So I'll hit Enter.

147
00:07:19.910 --> 00:07:21.600
That'll do the getMe query.

148
00:07:21.600 --> 00:07:25.570
And because getMe returns
a non-scholar type,

149
00:07:25.570 --> 00:07:29.090
which is user, and we said if
it's not scholar it's an object,

150
00:07:29.090 --> 00:07:34.450
we have to tell GraphQL what properties
on that object do we want back?

151
00:07:34.450 --> 00:07:37.030
So if we just ran this right now,
I think by default,

152
00:07:37.030 --> 00:07:41.680
GraphiQL will automatically stick in
the ID property for us by default.

153
00:07:41.680 --> 00:07:43.460
But most clients won't do that.

154
00:07:43.460 --> 00:07:48.200
So now we have to say cool,
run the getMe query and then from that

155
00:07:48.200 --> 00:07:51.850
I wanna get the ID property of the user
and you can see it auto completed.

156
00:07:51.850 --> 00:07:54.910
Also I wanna get the username
property from the query.and it

157
00:07:54.910 --> 00:07:56.860
also auto completed that.

158
00:07:56.860 --> 00:08:00.660
Then I can hit Play or
hit Cmd+Enter and I can execute.

159
00:08:00.660 --> 00:08:03.450
And I get an error because we haven't
implemented this on our server yet.

160
00:08:03.450 --> 00:08:08.300
So this would go and
fetch the current user that's

161
00:08:08.300 --> 00:08:11.120
signed in with the JSON web token and
actually get that user.

162
00:08:12.510 --> 00:08:14.890
But you can see here
the format that it responds,

163
00:08:14.890 --> 00:08:17.109
if we were to get data
you see data right here.

164
00:08:18.170 --> 00:08:21.830
And this would be your
query with the data but

165
00:08:21.830 --> 00:08:24.320
if you have an error,
this is how it responds.

166
00:08:24.320 --> 00:08:27.378
This is very unlike REST
because the way REST works is,

167
00:08:27.378 --> 00:08:30.179
you kind of look at the status codes for
the error.

168
00:08:30.179 --> 00:08:33.176
So you're like, it's a 401, it's a 403.

169
00:08:33.176 --> 00:08:36.840
You don't get status codes, you probably
just get back a 200 almost every time.

170
00:08:36.840 --> 00:08:38.880
And then you've just got to
look at the errors object.

171
00:08:38.880 --> 00:08:40.718
So it completely changes how
you would handle errors.

172
00:08:40.718 --> 00:08:43.930
So I mean it's totally up to you as well.

173
00:08:43.930 --> 00:08:48.410
You can totally set back the headers,
and stuff like that if you want.

174
00:08:48.410 --> 00:08:52.210
But GraphQL uses this errors
properties here to determine

175
00:08:52.210 --> 00:08:53.720
what errors to send back,
and stuff like that.

176
00:08:54.910 --> 00:08:56.490
All right, so
let's try another query here.

177
00:08:56.490 --> 00:08:58.730
Let's try to do the all songs query here.

178
00:08:58.730 --> 00:09:01.200
So we'll say that.

179
00:09:01.200 --> 00:09:02.170
We'll say all songs.

180
00:09:02.170 --> 00:09:03.890
You can see it auto completes.

181
00:09:03.890 --> 00:09:06.430
All songs doesn't take any arguments, so

182
00:09:06.430 --> 00:09:09.910
I can go ahead and get the properties
that I want on all songs.

183
00:09:09.910 --> 00:09:12.440
All songs returns an array of all songs.

184
00:09:12.440 --> 00:09:14.470
So if I go look at a song,
what does a song have?

185
00:09:14.470 --> 00:09:17.090
It has an ID, a title, a URL, an album.

186
00:09:17.090 --> 00:09:19.200
Cool.
Let me get the ID of that.

187
00:09:19.200 --> 00:09:20.670
Let me get the URL.

188
00:09:20.670 --> 00:09:23.870
And I'll also get the title and
I can run that.

189
00:09:23.870 --> 00:09:25.630
And because I don't have
any songs on the server,

190
00:09:25.630 --> 00:09:29.780
it just sends back an array of nothing,
because we don't have any songs.

191
00:09:29.780 --> 00:09:31.730
We actually have to create some songs.

192
00:09:31.730 --> 00:09:34.380
So you can see here we
get back a data property.

193
00:09:34.380 --> 00:09:37.520
And then this name right here allSongs,

194
00:09:37.520 --> 00:09:41.130
that name is generated because that's
the name of the query that we executed.

195
00:09:41.130 --> 00:09:43.030
So it's data.allSongs.

196
00:09:43.030 --> 00:09:44.600
If we don't want it to say all songs,

197
00:09:44.600 --> 00:09:46.640
we can actually alias this and
we can say you know what?

198
00:09:46.640 --> 00:09:47.540
Just call it songs.

199
00:09:49.190 --> 00:09:52.380
And the way you do that is you
just put the alias that you want

200
00:09:52.380 --> 00:09:54.550
with a semicolon in front of the query.

201
00:09:54.550 --> 00:09:56.830
And now when you run it,
you can see now it just says songs.

202
00:09:58.110 --> 00:10:01.450
I think that's something so
simple but yet very powerful.

203
00:10:01.450 --> 00:10:04.150
This allows you to like get
data from your server and

204
00:10:04.150 --> 00:10:07.420
immediately pass it into your client
without doing a lot of transformations.

205
00:10:07.420 --> 00:10:10.280
Depending on who implemented
your server and how they did it.

206
00:10:10.280 --> 00:10:13.270
So, let's actually create some songs so
we can query this.

207
00:10:13.270 --> 00:10:15.516
So the next thing we'll do
is we'll do a mutation.

208
00:10:15.516 --> 00:10:17.560
And mutations are a little different.

209
00:10:17.560 --> 00:10:19.600
You need to use the mutation keyword here.

210
00:10:20.670 --> 00:10:26.320
And then this name right here, you give it
a name, because what you need to do is,

211
00:10:26.320 --> 00:10:30.290
you can save these mutations,
you can save these queries on your client.

212
00:10:30.290 --> 00:10:33.453
And most clients used
names to reference them.

213
00:10:33.453 --> 00:10:37.320
So this name that I'm about to give it,
you can give it whatever you want.

214
00:10:37.320 --> 00:10:39.180
The convention is to use title case.

215
00:10:39.180 --> 00:10:44.100
So I'm just gonna call this, CreateSong.

216
00:10:44.100 --> 00:10:46.000
I was gonna call it CreateSong, but
you can call it whatever you want.

217
00:10:46.000 --> 00:10:48.230
This is not a strict typing thing.

218
00:10:48.230 --> 00:10:53.040
And then you have to describe if any
arguments what those arguments would be.

219
00:10:53.040 --> 00:10:56.610
And because it's a mutation most likely
you'd probably have some arguments.

220
00:10:56.610 --> 00:10:59.740
So the way that works is you
use this dollar sign like this.

221
00:10:59.740 --> 00:11:01.790
This dollar sign means
I'm making a variable.

222
00:11:01.790 --> 00:11:04.039
It's a placeholder for a variable.

223
00:11:04.039 --> 00:11:05.811
And I will say this create song and

224
00:11:05.811 --> 00:11:08.870
actually, let's go look
at the mutation here.

225
00:11:08.870 --> 00:11:12.290
We can go look at the mutation and
we can say, new song right there.

226
00:11:12.290 --> 00:11:16.024
It takes the argument called input and
its type is newSong.

227
00:11:16.024 --> 00:11:17.940
NewSong is not a scholar type.

228
00:11:17.940 --> 00:11:19.365
We talked about the six scholar types,

229
00:11:19.365 --> 00:11:21.480
newSong is not one of those,
that means it's an object.

230
00:11:21.480 --> 00:11:23.660
If it's not a scholar type,
it's probably an object.

231
00:11:24.864 --> 00:11:27.830
So, newSong,
we can click on that to see what that is.

232
00:11:27.830 --> 00:11:31.899
It takes a title or URL or album or
artist or rating or favorite.

233
00:11:31.899 --> 00:11:33.555
None of them are required.

234
00:11:33.555 --> 00:11:35.958
So let's just do that.

235
00:11:35.958 --> 00:11:39.170
So we'll say, this takes input.

236
00:11:39.170 --> 00:11:43.430
Its type is right here, NewSong!

237
00:11:43.430 --> 00:11:44.210
with an exclamation.

238
00:11:44.210 --> 00:11:45.310
So we must satisfy that.

239
00:11:46.400 --> 00:11:48.850
We'll say NewSong!

240
00:11:48.850 --> 00:11:50.718
with an exclamation.

241
00:11:50.718 --> 00:11:53.630
And then now this is where we
actually run our mutation.

242
00:11:53.630 --> 00:11:57.650
And the mutation is called NewSong!

243
00:11:57.650 --> 00:12:00.420
So we'll say newSong, and

244
00:12:00.420 --> 00:12:04.010
it takes in an input whose value
is that dollar input variable.

245
00:12:05.700 --> 00:12:07.143
That gives us the newSong.

246
00:12:07.143 --> 00:12:10.108
And because newSong, the actual mutation,

247
00:12:10.108 --> 00:12:14.565
returns a song type, we can describe
what properties we want back.

248
00:12:14.565 --> 00:12:19.295
So I'm gonna say I want back the ID,
I want back the title,

249
00:12:19.295 --> 00:12:21.580
and I want back the URL.

250
00:12:21.580 --> 00:12:23.026
So I'm gonna do that.

251
00:12:23.026 --> 00:12:28.280
And then down below it, now I have to pass
in this input object, with the variables.

252
00:12:28.280 --> 00:12:32.780
So down here I'll say, cool,
I need a variable called input, and

253
00:12:32.780 --> 00:12:34.590
auto complete it for me.

254
00:12:34.590 --> 00:12:36.810
And we know that input is type newSong.

255
00:12:36.810 --> 00:12:40.860
So if we go look at that, you'll see
that it needs to have some of this.

256
00:12:41.920 --> 00:12:46.675
So I'm gonna give it a title,
you'll see it auto completed and

257
00:12:46.675 --> 00:12:49.110
like dance, dance is the name.

258
00:12:50.200 --> 00:12:52.213
And then I'll also gonna give it a URL to

259
00:12:52.213 --> 00:12:57.200
the song.
&gt;&gt; Scott Moss: I was gonna just put

260
00:12:57.200 --> 00:13:02.740
something here.
&gt;&gt; Scott Moss: Cool.

261
00:13:02.740 --> 00:13:12.300
And then I'm also gonna give it an artist.
&gt;&gt; Scott Moss: Cool.

262
00:13:12.300 --> 00:13:14.460
So we got that, we got the input.

263
00:13:14.460 --> 00:13:18.820
It satisfies the type of newSong.

264
00:13:19.870 --> 00:13:22.710
We bound it to the input
variable in the mutation.

265
00:13:22.710 --> 00:13:26.701
We expanded on the return type and
asked for an ID and a title URL.

266
00:13:26.701 --> 00:13:29.980
And now we can go ahead and
try this mutation.

267
00:13:29.980 --> 00:13:32.890
I'm actually not sure if this is on
the branch that I'm on if it is actually

268
00:13:32.890 --> 00:13:34.660
created or not, but let's run it.

269
00:13:34.660 --> 00:13:35.820
And yeah it is.

270
00:13:35.820 --> 00:13:40.490
So we got back the results of a new
mutation, we created a new song here.

271
00:13:40.490 --> 00:13:45.250
So now we have the new song, here's
the ID we get back because I asked for

272
00:13:45.250 --> 00:13:48.930
the ID, here's the title we
get back that I created, and

273
00:13:48.930 --> 00:13:50.040
here's the URL that we get back.

274
00:13:52.350 --> 00:13:58.790
So now if I go back up to this query
above and initiate the songs again.

275
00:13:58.790 --> 00:14:01.130
I should get back at least one song.

276
00:14:01.130 --> 00:14:04.563
And there it is.
&gt;&gt; Scott Moss: And

277
00:14:04.563 --> 00:14:08.690
if I don't wanna get the title,
I don't have to get the title, it's gone.

278
00:14:08.690 --> 00:14:12.923
You can ask for it the way you want it.
&gt;&gt; Scott Moss: That was a quick

279
00:14:12.923 --> 00:14:15.491
walk through for
some of the stuff we'll do in GraphQL.

280
00:14:15.491 --> 00:14:17.208
So now that you have some
context we're gonna go in and

281
00:14:17.208 --> 00:14:18.810
we're actually gonna start building this.

282
00:14:18.810 --> 00:14:21.263
So you're not expected to remember any
of the stuff that I just showed you.

283
00:14:21.263 --> 00:14:25.851
I just wanted you to have some context
that way you're not just swimming in

284
00:14:25.851 --> 00:14:26.520
the dark.

285
00:14:26.520 --> 00:14:27.400
Any questions on this stuff?

286
00:14:30.190 --> 00:14:32.390
Who here is excited about GraphQL so far?

287
00:14:32.390 --> 00:14:34.630
Okay, all right.

288
00:14:34.630 --> 00:14:36.180
Yeah.
Once I saw this,

289
00:14:36.180 --> 00:14:40.270
I was just like why would
anybody use REST ever again.

290
00:14:40.270 --> 00:14:43.990
This is so much better,
it's almost magical!

291
00:14:43.990 --> 00:14:47.420
Then I built, I remember the first time I
built a GraphQL server from the back end.

292
00:14:47.420 --> 00:14:49.850
I was like, okay, now I get it.

293
00:14:49.850 --> 00:14:52.117
This is still pretty magical.

