WEBVTT

1
00:00:00.080 --> 00:00:01.876
&gt;&gt; Scott Moss: Yesterday, we covered and

2
00:00:01.876 --> 00:00:05.709
we went through building out
a API using Express and Node.

3
00:00:05.709 --> 00:00:10.174
We took somewhat of a pragmatic
approach using metaprogramming to

4
00:00:10.174 --> 00:00:12.973
generate common things for our REST API.

5
00:00:12.973 --> 00:00:14.767
We finished off with some testing.

6
00:00:14.767 --> 00:00:17.789
So if you did some of that testing
yesterday, that's awesome.

7
00:00:17.789 --> 00:00:23.499
Today, we're gonna jump right into GraphQL
and talk about some different approaches,

8
00:00:23.499 --> 00:00:27.912
walk through one of my favorite
approaches with GraphQL and how we can

9
00:00:27.912 --> 00:00:33.090
use it together with what we already
built yesterday and then go from there.

10
00:00:33.090 --> 00:00:34.655
Who here has used GraphQL?

11
00:00:36.677 --> 00:00:41.010
&gt;&gt; Scott Moss: Well, okay, Scott, give me
a definition of what is GraphQL to you?

12
00:00:41.010 --> 00:00:41.920
What is it?

13
00:00:41.920 --> 00:00:46.481
&gt;&gt; Scott: It's a data query language that
allows us to define exactly what we're

14
00:00:46.481 --> 00:00:53.839
looking for from the backend without,
&gt;&gt; Scott: Yeah.

15
00:00:53.839 --> 00:00:54.528
&gt;&gt; Scott Moss: That sounds right.

16
00:00:54.528 --> 00:00:56.262
&gt;&gt; Scott: Yeah.
&gt;&gt; Scott Moss: A query language that lets

17
00:00:56.262 --> 00:00:59.125
you define exactly what you
want from the backend and

18
00:00:59.125 --> 00:01:00.896
consume it in such a way, okay.

19
00:01:00.896 --> 00:01:02.625
What about you?

20
00:01:02.625 --> 00:01:04.372
&gt;&gt; Speaker 3: [LAUGH] Yeah,
I don't know that I have much to add.

21
00:01:04.372 --> 00:01:06.725
I think that was pretty good.

22
00:01:06.725 --> 00:01:10.147
I think that it's nice because it's, yeah,

23
00:01:10.147 --> 00:01:13.440
it provides the data
that the client needs.

24
00:01:13.440 --> 00:01:16.066
It's not this whole massive amount of.

25
00:01:16.066 --> 00:01:18.280
&gt;&gt; Scott Moss: Nice, okay,
in both the definitions,

26
00:01:18.280 --> 00:01:21.380
I liked that both of you all mentioned
that it's what the client wants.

27
00:01:21.380 --> 00:01:23.850
And that's what's very
important about GraphQL.

28
00:01:23.850 --> 00:01:29.790
It's like an approach from the client's
perspective like hey, this is what I want.

29
00:01:29.790 --> 00:01:31.064
So, what is GraphQL?

30
00:01:31.064 --> 00:01:34.118
This is the definition I
got from the Internet.

31
00:01:34.118 --> 00:01:37.248
GraphQL is a query language for
APIs and a runtime for

32
00:01:37.248 --> 00:01:40.770
fulfilling those queries
with your existing data.

33
00:01:40.770 --> 00:01:42.200
GraphQL provides a complete and

34
00:01:42.200 --> 00:01:45.110
understandable description
of the data in your API,

35
00:01:45.110 --> 00:01:48.860
gives clients the power to ask for
exactly what they need and nothing more.

36
00:01:48.860 --> 00:01:53.450
Makes it easier to evolve APIs over time
and enables powerful developer tools.

37
00:01:54.990 --> 00:01:57.390
Yeah, that's a Internet definition, right?

38
00:01:57.390 --> 00:01:58.800
So, what is it really?

39
00:01:59.980 --> 00:02:01.300
Here's my definition of GraphQL.

40
00:02:02.360 --> 00:02:03.709
It's a query language for your API.

41
00:02:04.840 --> 00:02:07.196
Clients describe how
they want their data and

42
00:02:07.196 --> 00:02:10.305
the shape of it using a query
language very similar to JSON.

43
00:02:10.305 --> 00:02:14.789
So if you know JSON, you'll see
some familiarities with GraphQL.

44
00:02:14.789 --> 00:02:17.950
There's definitely some differences,
but you'll seem very familiar with it.

45
00:02:17.950 --> 00:02:21.800
Those requests are validated against
a Schema that you create on your server.

46
00:02:21.800 --> 00:02:24.070
So you have the queries
that your client sends.

47
00:02:24.070 --> 00:02:27.520
Your server has a matching Schema
that validates those queries.

48
00:02:27.520 --> 00:02:32.925
And your server then satisfies the shape
however it wants using resolvers.

49
00:02:32.925 --> 00:02:36.830
So, basically, you could think of it as,
who here's used TypeScript?

50
00:02:38.320 --> 00:02:40.640
It's like TypeScript for
your APIs, almost.

51
00:02:40.640 --> 00:02:45.638
It's like, you can put an abstraction
in front of your API that

52
00:02:45.638 --> 00:02:50.638
strictly prohibits basically what
shapes of data that can come

53
00:02:50.638 --> 00:02:54.747
through the API and
GraphQL strictly checks that.

54
00:02:54.747 --> 00:02:57.507
And it allows the client
to descriptly say hey,

55
00:02:57.507 --> 00:03:02.278
I want this object with this name, these
properties in this order and this shape.

56
00:03:02.278 --> 00:03:06.490
And then on the backend,
you respond to that using resolvers.

57
00:03:06.490 --> 00:03:10.940
That sounds pretty complicated, cuz
you're like wait, how do I do all that?

58
00:03:10.940 --> 00:03:11.700
You'll see.

59
00:03:11.700 --> 00:03:16.392
And it does all this with one URL.

60
00:03:16.392 --> 00:03:19.368
You know with REST we had to make
different URLs for different resources,

61
00:03:19.368 --> 00:03:20.233
different actions?

62
00:03:20.233 --> 00:03:21.860
GraphQL does this with one URL.

63
00:03:21.860 --> 00:03:23.330
There's only one, ever.

64
00:03:24.630 --> 00:03:28.690
So can be used in tandem
with your current API.

65
00:03:28.690 --> 00:03:30.300
So we built the REST API yesterday.

66
00:03:30.300 --> 00:03:35.310
We could use GraphQL together with
the REST, sitting side-by-side.

67
00:03:35.310 --> 00:03:39.230
We can have GraphQL
underneath the REST API.

68
00:03:39.230 --> 00:03:40.738
We can have GraphQL on
top of the REST API.

69
00:03:40.738 --> 00:03:43.620
It's pretty much however you wanna do it.

70
00:03:43.620 --> 00:03:45.733
Today, we're gonna use them together,
side by side.

71
00:03:45.733 --> 00:03:49.981
And at the end of the day,
I'm gonna talk about how you can have

72
00:03:49.981 --> 00:03:54.500
GraphQL sit underneath REST and
also next to it at the same time.

73
00:03:54.500 --> 00:03:57.340
Only needs one route for all requests,
and you'll see what I'm talking about.

74
00:03:57.340 --> 00:04:00.590
That sounds crazy,
it sounded crazy to me the first time.

75
00:04:00.590 --> 00:04:02.480
I was like, how?

76
00:04:02.480 --> 00:04:03.820
That doesn't make any sense.

77
00:04:03.820 --> 00:04:04.899
You'll see.

78
00:04:04.899 --> 00:04:08.577
Doesn't care about how you resolve
the data, just has to match the shapes.

79
00:04:08.577 --> 00:04:11.610
So remember when we made
controllers yesterday?

80
00:04:11.610 --> 00:04:14.362
Those controllers respond to
all the routes that we created.

81
00:04:14.362 --> 00:04:17.960
You can think of resolvers as
controllers but way more granular.

82
00:04:17.960 --> 00:04:20.550
Whereas a controller
responds to a request,

83
00:04:20.550 --> 00:04:24.820
a resolver responds to a shape or
a field on a shape.

84
00:04:24.820 --> 00:04:27.060
It can literally respond
to just one field,

85
00:04:27.060 --> 00:04:29.240
it depends on how you
write your resolvers.

86
00:04:29.240 --> 00:04:32.532
So you can think of them as just
microcontrollers that can do whatever

87
00:04:32.532 --> 00:04:33.110
they want.

88
00:04:35.324 --> 00:04:37.835
&gt;&gt; Scott Moss: You don't
need versions ever again for

89
00:04:37.835 --> 00:04:41.110
your API because the URL
is always the same.

90
00:04:41.110 --> 00:04:43.570
And you can change your
Schema as much as you want.

91
00:04:43.570 --> 00:04:46.456
You might need versions for your
Schema [LAUGH] or your data types, but

92
00:04:46.456 --> 00:04:48.611
you definitely don't need versions for
your API.

93
00:04:48.611 --> 00:04:52.760
It's the same API, it's the same URL so
you don't have to do that anymore.

94
00:04:52.760 --> 00:04:56.442
And once you learn it, if you do
a lot of client-side development,

95
00:04:56.442 --> 00:04:58.065
you're gonna love GraphQL.

96
00:04:58.065 --> 00:04:58.940
You're gonna love it.

97
00:04:58.940 --> 00:05:01.540
The benefit of GraphQL might not be so

98
00:05:01.540 --> 00:05:05.890
obvious on the server until you start
doing advanced things, then you'll see it.

99
00:05:05.890 --> 00:05:08.823
But the benefit is immediate
if you're writing client code.

100
00:05:08.823 --> 00:05:11.513
If you're writing anything client,
whether that's mobile or

101
00:05:11.513 --> 00:05:13.890
web, you'll immediately see
the benefit of GraphQL.

102
00:05:13.890 --> 00:05:16.520
So although we're doing
a server side today,

103
00:05:16.520 --> 00:05:18.820
we are gonna go over some stuff
where you can see the benefit.

104
00:05:18.820 --> 00:05:21.690
But the benefit is definitely way
better on the front end where you're

105
00:05:21.690 --> 00:05:22.810
consuming the API.

106
00:05:22.810 --> 00:05:26.314
The consuming of the API definitely
benefits from GraphQL more so

107
00:05:26.314 --> 00:05:28.105
than the implementer of the API.

108
00:05:28.105 --> 00:05:30.747
Does that make sense?

109
00:05:30.747 --> 00:05:32.604
Okay, cool, any questions on this?

110
00:05:32.604 --> 00:05:33.158
Yo.

111
00:05:33.158 --> 00:05:35.929
&gt;&gt; Speaker 4: So, would this be
considered kind of a replacement for

112
00:05:35.929 --> 00:05:38.279
the need to have filters and
things like that,

113
00:05:38.279 --> 00:05:41.824
that you would typically use
when you're doing a REST API?

114
00:05:41.824 --> 00:05:45.210
&gt;&gt; Scott Moss: So
GraphQL itself does not do the filtering,

115
00:05:45.210 --> 00:05:47.670
you have to implement the filtering
yourself in the resolvers.

116
00:05:47.670 --> 00:05:51.940
But it provides the mechanism
that facilitates that filter.

117
00:05:51.940 --> 00:05:53.840
So just like you would in REST.

118
00:05:53.840 --> 00:05:58.588
For instance, if you made a REST call and
on the query string you were like

119
00:05:58.588 --> 00:06:02.318
I wanna get /user query string
first name equals whatever,

120
00:06:02.318 --> 00:06:05.702
you would still have to build
that in your controller.

121
00:06:05.702 --> 00:06:07.290
You still gotta do that in your resolver.

122
00:06:07.290 --> 00:06:08.850
It's very much the same.

123
00:06:08.850 --> 00:06:13.463
It's just the way GraphQL
provides it it's way more strict.

124
00:06:13.463 --> 00:06:15.498
So, for instance, if you did that in REST,

125
00:06:15.498 --> 00:06:18.970
you would have to check to see that query
string was there and do some stuff.

126
00:06:18.970 --> 00:06:23.670
Whereas GraphQL is like, it's guaranteed
there if you said it has to be there.

127
00:06:23.670 --> 00:06:25.030
Otherwise, it wouldn't have gotten there.

128
00:06:25.030 --> 00:06:27.830
It wouldn't have even gotten past
GraphQL cuz Graph would be like, no,

129
00:06:27.830 --> 00:06:29.080
I need a filter here.

130
00:06:29.080 --> 00:06:29.980
You're not even going there.

131
00:06:29.980 --> 00:06:32.692
So it's very strict like that.

132
00:06:32.692 --> 00:06:36.174
All this will make sense when we start
building, but yes, you can do all of that.

