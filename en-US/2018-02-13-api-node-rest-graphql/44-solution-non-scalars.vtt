WEBVTT

1
00:00:02.330 --> 00:00:04.360
&gt;&gt; Scott Moss: All right, so we're going
to continue working on this example.

2
00:00:04.360 --> 00:00:10.361
This one was pretty complicated because
it was like so much mental overhead,

3
00:00:10.361 --> 00:00:15.870
so many like things you had to
follow in order to understand it.

4
00:00:15.870 --> 00:00:18.090
Or you could have just
ignored all of that and

5
00:00:18.090 --> 00:00:21.480
just like focused on just populating
that field and try to work it.

6
00:00:21.480 --> 00:00:22.220
Either way,

7
00:00:22.220 --> 00:00:24.580
it's gonna be difficult because we
didn't really talk about population.

8
00:00:24.580 --> 00:00:29.400
So either way, it was a difficult
thing but let's jump right into it.

9
00:00:29.400 --> 00:00:34.290
First thing is, I went ahead and
I enabled users on this one.

10
00:00:34.290 --> 00:00:38.330
So if you wanna use users
just make sure you pull from

11
00:00:38.330 --> 00:00:43.010
upstream of the solution,
the lesson 13 solution.

12
00:00:43.010 --> 00:00:44.790
So you can use users as well.

13
00:00:44.790 --> 00:00:51.450
I'll walk you through how I enabled that
but let's just start with the playlist.

14
00:00:51.450 --> 00:00:57.890
So let's go over to resources playlist and
we'll look at the playlist resolver.

15
00:01:01.540 --> 00:01:07.154
&gt;&gt; Scott Moss: And what I'm gonna do is
pull open the playlists graphQL as well,

16
00:01:07.154 --> 00:01:07.777
okay.

17
00:01:07.777 --> 00:01:11.390
I just don't wanna put them
in both places, all right.

18
00:01:14.111 --> 00:01:14.830
&gt;&gt; Scott Moss: There we go.

19
00:01:16.710 --> 00:01:19.902
So if we go down to,
&gt;&gt; Scott Moss: I'm sorry, if we stay right

20
00:01:19.902 --> 00:01:24.060
here on this playlist type, again,
we have songs, which is an array of songs.

21
00:01:24.060 --> 00:01:27.438
I wanna query that that I wanna be able
to query the songs inside of that.

22
00:01:27.438 --> 00:01:34.030
So in order to resolve that, we make a
nested resolver, and this is how I did it.

23
00:01:35.130 --> 00:01:39.830
So the first thing is on the playlist
type, which matches this playlist type,

24
00:01:41.490 --> 00:01:45.510
I want to resolve the songs
field which matches this field.

25
00:01:46.990 --> 00:01:52.110
And it should return
an array of song types.

26
00:01:52.110 --> 00:01:54.313
So the way I did it is this playlist,

27
00:01:54.313 --> 00:01:58.620
the root value that's passed in
is always going to be a document.

28
00:01:58.620 --> 00:02:02.620
And the reason I know that
is because this field

29
00:02:02.620 --> 00:02:07.170
resolver never gets resolved until
the playlist before it gets resolved.

30
00:02:07.170 --> 00:02:11.020
So then you just go look to see okay,
how do I know exactly what this is.

31
00:02:11.020 --> 00:02:15.740
Well, I'll just go look at every
point where we resolve a playlist and

32
00:02:15.740 --> 00:02:17.100
they're all up here.

33
00:02:17.100 --> 00:02:19.560
Each time we resolve a playlist
it's always a document.

34
00:02:19.560 --> 00:02:20.370
That's a document.

35
00:02:20.370 --> 00:02:22.580
That's a document, that's a document.

36
00:02:22.580 --> 00:02:23.790
That's a document.

37
00:02:23.790 --> 00:02:25.280
It's always a document.

38
00:02:25.280 --> 00:02:29.040
So I'm pretty confident this is
always going to be a document.

39
00:02:29.040 --> 00:02:31.910
Because this songs is a branch of this.

40
00:02:31.910 --> 00:02:34.680
And so far in our app this is
the only way you can get a playlist,

41
00:02:34.680 --> 00:02:36.240
is one of these four methods.

42
00:02:36.240 --> 00:02:40.347
And they all return the same thing,
a playlist document.

43
00:02:40.347 --> 00:02:41.000
Follow me so far?

44
00:02:42.430 --> 00:02:47.086
&gt;&gt; Scott Moss: Okay, so
now that I have that if it's

45
00:02:47.086 --> 00:02:52.253
a document I could look up,
&gt;&gt; Scott Moss: Populations

46
00:02:52.253 --> 00:02:55.109
documents mongoose.

47
00:02:57.070 --> 00:02:57.720
And I can go here.

48
00:02:59.010 --> 00:03:01.170
&gt;&gt; Scott Moss: And
I can scroll a little bit,

49
00:03:01.170 --> 00:03:05.083
until I find
&gt;&gt; Scott Moss: This thing,

50
00:03:05.083 --> 00:03:07.830
Document#populate, okay, cool.

51
00:03:07.830 --> 00:03:08.338
And it'll take me here.

52
00:03:08.338 --> 00:03:12.689
It's like, populates document references
executing the callback when complete.

53
00:03:12.689 --> 00:03:16.610
If you want promises use execute populate,
so cool.

54
00:03:16.610 --> 00:03:19.817
Basically what we would do,
is we would take our document.

55
00:03:19.817 --> 00:03:24.250
We would call doc.populate on it,
with the field that we want to populate.

56
00:03:24.250 --> 00:03:26.374
The field that we want to
populate on a song model

57
00:03:27.850 --> 00:03:29.063
&gt;&gt; Scott Moss: I'm sorry,

58
00:03:29.063 --> 00:03:33.150
on a playlist model, is also called songs.

59
00:03:33.150 --> 00:03:34.890
We want to populate this field.

60
00:03:34.890 --> 00:03:38.060
This is why we have an ID
with a reference of song.

61
00:03:38.060 --> 00:03:43.410
What population does is, for each of these
IDs, it's gonna go to this model and

62
00:03:43.410 --> 00:03:46.440
query it, and
find the object pertaining to that.

63
00:03:46.440 --> 00:03:49.190
It's gonna go to this model,
like find by ID for all these IDs, and

64
00:03:49.190 --> 00:03:50.810
put them in this array.

65
00:03:50.810 --> 00:03:51.820
That's what it's gonna do.

66
00:03:52.830 --> 00:03:57.339
So we'll get back an array of objects,
versus an array of strings,

67
00:03:57.339 --> 00:03:58.930
so we'll populate it.

68
00:03:58.930 --> 00:04:03.344
And then we can call .execPopulate() which
returns a promise and we like promises.

69
00:04:03.344 --> 00:04:07.090
&gt;&gt; Scott Moss: So
that's what I'm doing here.

70
00:04:07.090 --> 00:04:08.990
I'm saying cool, I've got the playlist.

71
00:04:08.990 --> 00:04:10.030
I'm going to call populate on it.

72
00:04:10.030 --> 00:04:11.640
I'm gonna populate this songs array.

73
00:04:11.640 --> 00:04:13.200
This array of strings,
I want to populate it.

74
00:04:13.200 --> 00:04:15.700
I wanna inflate it with the data.

75
00:04:15.700 --> 00:04:16.997
I wanna rehydrate it.

76
00:04:16.997 --> 00:04:21.524
And then I want to call execPopulate, or
execute populate, which returns a promise,

77
00:04:21.524 --> 00:04:25.750
which allows me to do await,
which is why I have async in front of it.

78
00:04:25.750 --> 00:04:28.910
And the one important
part to remember is that

79
00:04:28.910 --> 00:04:31.950
this returns the entire document
with the populated field on it.

80
00:04:31.950 --> 00:04:34.870
I only just want that field,
so I'm going to return that.

81
00:04:34.870 --> 00:04:36.359
This is now an array of objects now.

82
00:04:38.650 --> 00:04:39.424
Everybody following me?

83
00:04:39.424 --> 00:04:46.830
This playlist was a playlist document
with an array of strings for songs.

84
00:04:46.830 --> 00:04:49.695
It is now a playlist document
with an array of objects for

85
00:04:49.695 --> 00:04:52.970
songs and
I'm just returning that array of objects.

86
00:04:52.970 --> 00:04:57.700
And luckily enough,
GraphQL is smart enough to know that,

87
00:04:57.700 --> 00:05:00.690
hey you return an array of songs.

88
00:05:02.050 --> 00:05:03.420
Here is your array of songs.

89
00:05:03.420 --> 00:05:07.910
And then for each one of those songs in
the array, it's gonna go to the song type,

90
00:05:07.910 --> 00:05:09.060
it is now gonna go over here.

91
00:05:09.060 --> 00:05:11.070
And it's gonna be like, okay cool.

92
00:05:11.070 --> 00:05:14.710
Now those better match this and
they have to match that.

93
00:05:14.710 --> 00:05:18.670
And by default they do because we made our
type exactly the same in the database as

94
00:05:18.670 --> 00:05:20.480
it is in GraphQL, right?

95
00:05:20.480 --> 00:05:24.800
But if it didn't, it would look on this
resolver to resolve these properties.

96
00:05:24.800 --> 00:05:29.039
So if this thing had something nested on
it like things and it pointed to thing,

97
00:05:29.039 --> 00:05:30.917
it would then try to resolve that.

98
00:05:30.917 --> 00:05:34.790
And over and over and over and over and
over again, until it got to the end.

99
00:05:36.710 --> 00:05:41.790
So it's pretty crazy, so that's that and
then for getting the users to work,

100
00:05:41.790 --> 00:05:46.630
basically all I did was,
&gt;&gt; Scott Moss: I went to the config.

101
00:05:46.630 --> 00:05:49.550
I disabled authentication for dev mode.

102
00:05:49.550 --> 00:05:51.500
So up with disableAuth true.

103
00:05:51.500 --> 00:05:53.140
I disabled the authentication.

104
00:05:53.140 --> 00:05:56.160
The next thing I did was, I added

105
00:05:57.700 --> 00:06:01.540
the authentication middleware that
we had before for the restRouter.

106
00:06:01.540 --> 00:06:02.905
Also put in front of our graphQLRouter.

107
00:06:02.905 --> 00:06:05.620
We're going to talk more about this but,
it does the same thing.

108
00:06:05.620 --> 00:06:07.107
This is like, check the JWT.

109
00:06:07.107 --> 00:06:09.390
If there is a JWT,
decode it, attach a user.

110
00:06:09.390 --> 00:06:12.710
But I turned authentication off,
so why would I need this?

111
00:06:12.710 --> 00:06:15.480
Well, that's because inside of
that file it's checking to see if

112
00:06:15.480 --> 00:06:16.940
authentication is off.

113
00:06:16.940 --> 00:06:21.825
If it's off, if the authentication is off
using our configuration driven config,

114
00:06:21.825 --> 00:06:25.410
it's just gonna call next so
it won't try to decode a token.

115
00:06:25.410 --> 00:06:28.910
And then where would normally
attach a user from the token

116
00:06:28.910 --> 00:06:31.730
if it's off it'll delete our
user from the database and

117
00:06:31.730 --> 00:06:35.310
then just create a user on the fly,
attach it to req.user and call next.

118
00:06:35.310 --> 00:06:39.120
So now we have req.user inside of our
resolvers, so it's a little cheap way.

119
00:06:39.120 --> 00:06:40.684
Obviously you would never
do this in production.

120
00:06:40.684 --> 00:06:43.180
Just don't do this in production.

121
00:06:43.180 --> 00:06:44.098
This is just so

122
00:06:44.098 --> 00:06:49.011
we can use users because I wanted to
show like a completely nested solution.

123
00:06:49.011 --> 00:06:54.720
So because we have that,
we can go look at the user resolver.

124
00:06:54.720 --> 00:06:58.170
So if you got past the first one
you can go to user resolver and

125
00:06:58.170 --> 00:07:01.490
the other thing was to resolve
the playlist for the user.

126
00:07:01.490 --> 00:07:03.942
We don't have any associations
with users and playlist so

127
00:07:03.942 --> 00:07:05.410
this one was pretty simple.

128
00:07:05.410 --> 00:07:06.660
Just returned all
the places in a database.

129
00:07:06.660 --> 00:07:10.289
There's no association with the users and
playlists with at this point.

130
00:07:10.289 --> 00:07:13.677
But I do need to set up for
the user type when you ask for

131
00:07:13.677 --> 00:07:18.250
the playlist field I want to return
all the playlists in the database.

132
00:07:18.250 --> 00:07:22.060
And then these playlists are playlist
types which have songs which then gets

133
00:07:22.060 --> 00:07:22.662
resolved.

134
00:07:22.662 --> 00:07:25.840
So you'll see in a minute
how all that works.

135
00:07:25.840 --> 00:07:26.650
And then we'll come back and
we'll do some logs.

136
00:07:26.650 --> 00:07:28.063
And then we can follow it so

137
00:07:28.063 --> 00:07:31.550
you all can see how GraphQL is
walking through these resolvers.

138
00:07:31.550 --> 00:07:33.330
And you can see step by
step what's going on.

139
00:07:34.540 --> 00:07:35.360
So let's run this.

140
00:07:43.110 --> 00:07:45.230
&gt;&gt; Scott Moss: Cool, nothing broke,
that's always a good feeling.

141
00:07:48.050 --> 00:07:49.621
We'll refresh this.

142
00:07:49.621 --> 00:07:54.570
And the first thing is let's start
with let's get allPlaylists.

143
00:07:54.570 --> 00:07:55.381
And allPlaylists returns what?

144
00:07:55.381 --> 00:07:57.169
Array of playlists.

145
00:07:57.169 --> 00:08:02.150
An array of playlists, exactly,
so this array of playlists.

146
00:08:02.150 --> 00:08:04.990
For each playlist I wanna get the ID and
I wanna get the title.

147
00:08:04.990 --> 00:08:06.090
Let's just make sure that works.

148
00:08:06.090 --> 00:08:06.740
Cool.

149
00:08:06.740 --> 00:08:07.570
We got one playlist.

150
00:08:07.570 --> 00:08:09.570
It has an ID.
There's the title.

151
00:08:09.570 --> 00:08:12.180
Now, I wanna see if I have some songs.

152
00:08:12.180 --> 00:08:14.490
So I'm also gonna come in here and
I'm gonna just, right underneath here,

153
00:08:14.490 --> 00:08:15.634
I'm gonna say all songs.

154
00:08:15.634 --> 00:08:18.537
And I'm gonna get the ID and
I'm gonna get the title.

155
00:08:18.537 --> 00:08:21.180
Cool, we do have songs.

156
00:08:21.180 --> 00:08:23.100
I also believe this song
belongs to this playlist.

157
00:08:23.100 --> 00:08:24.470
I think that's how I set
it up in the database.

158
00:08:24.470 --> 00:08:26.310
So, let's just, let's verify that.

159
00:08:26.310 --> 00:08:29.300
So, I'm gonna see if I can get
the songs for this playlist.

160
00:08:29.300 --> 00:08:32.770
So, I'm gonna, now I'm gonna come here,
I'm gonna say songs.

161
00:08:32.770 --> 00:08:36.530
songs is an array of
strings in the database.

162
00:08:36.530 --> 00:08:41.040
But because we set up a resolver to
resolve those strings I should be able to

163
00:08:41.040 --> 00:08:44.329
come in here and
say now I want to get the title of that.

164
00:08:44.329 --> 00:08:44.829
And I can.

165
00:08:46.020 --> 00:08:47.320
You see that?

166
00:08:47.320 --> 00:08:48.950
That's where that resolver came in.

167
00:08:48.950 --> 00:08:51.570
It knew that to get songs,
I got to run that function.

168
00:08:51.570 --> 00:08:54.700
That function populates it and
puts it in there.

169
00:08:54.700 --> 00:08:59.330
So you can imagine if songs had
another field on it like things

170
00:08:59.330 --> 00:09:03.070
we can come here like okay, now for
things, I wanna get the ID.

171
00:09:03.070 --> 00:09:08.240
And things has a user, and then for
user, I wanna get the thing.

172
00:09:08.240 --> 00:09:09.420
Like, you understand what I mean?

173
00:09:09.420 --> 00:09:10.620
You can go on forever and ever and ever,

174
00:09:10.620 --> 00:09:13.450
as long as you just eventually
resolve every type.

175
00:09:13.450 --> 00:09:15.860
You don't need to know
how it's being called.

176
00:09:15.860 --> 00:09:17.682
You just need to resolve every type,
and you're done.

177
00:09:17.682 --> 00:09:20.279
GraphQL will figure out how it’s called.

178
00:09:20.279 --> 00:09:21.803
And we’re going to see
that in a little bit.

179
00:09:23.630 --> 00:09:25.110
&gt;&gt; Scott Moss: So, we got that.

180
00:09:27.640 --> 00:09:28.310
Cool.

181
00:09:28.310 --> 00:09:30.637
Now, I want to take it a step further.

182
00:09:30.637 --> 00:09:32.662
And I want to get all the playlists for
the users and,

183
00:09:32.662 --> 00:09:34.840
then get all the songs on
those playlists from the user.

184
00:09:35.870 --> 00:09:37.660
So let's say you have a music app.

185
00:09:37.660 --> 00:09:39.210
You just logged the user in.

186
00:09:39.210 --> 00:09:43.020
All of the sudden, the first thing you
want to display is all their playlists and

187
00:09:43.020 --> 00:09:45.200
underneath every playlist,
the top five songs, right?

188
00:09:45.200 --> 00:09:47.180
So you need one query
that gets all of that.

189
00:09:47.180 --> 00:09:48.250
So I'm like cool.

190
00:09:48.250 --> 00:09:50.330
First I want to getMe,
which is gonna get the user.

191
00:09:50.330 --> 00:09:52.490
Let's verify that works with my auth.

192
00:09:52.490 --> 00:09:53.110
That works.

193
00:09:53.110 --> 00:09:54.740
There's me, here's my username.

194
00:09:56.240 --> 00:09:57.560
Okay, so I got the user.

195
00:09:57.560 --> 00:10:00.740
Now I want to get all the playlists
associated with this user, so

196
00:10:00.740 --> 00:10:01.360
I'm going to do that.

197
00:10:01.360 --> 00:10:02.200
I got that.

198
00:10:02.200 --> 00:10:07.791
And now I'm going to get all the songs
associated with that playlist,

199
00:10:07.791 --> 00:10:10.172
which is the id and the title.

200
00:10:10.172 --> 00:10:11.589
And now I got that.

201
00:10:15.210 --> 00:10:16.460
&gt;&gt; Scott Moss: It's pretty crazy, right?

202
00:10:16.460 --> 00:10:19.010
We didn't set this up
this way in the backend.

203
00:10:19.010 --> 00:10:22.470
I didn't know that somebody would
come in and ask for a user and

204
00:10:22.470 --> 00:10:23.750
then a playlist and then a song.

205
00:10:23.750 --> 00:10:25.230
All I did was a song?

206
00:10:25.230 --> 00:10:26.300
This is how you resolve that.

207
00:10:26.300 --> 00:10:26.810
A playlist?

208
00:10:26.810 --> 00:10:28.190
This is how you resolve that.

209
00:10:28.190 --> 00:10:29.540
A user?
This is how you resolve that.

210
00:10:29.540 --> 00:10:30.470
Figure it out, GraphQL.

211
00:10:30.470 --> 00:10:31.960
And that's all I did.

212
00:10:31.960 --> 00:10:33.130
Right, it's pretty magical, right?

213
00:10:34.140 --> 00:10:35.330
So this is like the beauty of GraphQL.

214
00:10:35.330 --> 00:10:37.800
So you can see where it's like,

215
00:10:37.800 --> 00:10:41.400
if a song refered their playlist,
then this would be recursive.

216
00:10:41.400 --> 00:10:42.410
Cuz then I went, cool, cool.

217
00:10:42.410 --> 00:10:44.650
I want the playlist
that this song belongs.

218
00:10:44.650 --> 00:10:47.520
And then I want all
the songs of this playlist.

219
00:10:47.520 --> 00:10:49.280
And then I want the playlist
that this song belongs to.

220
00:10:49.280 --> 00:10:49.860
You see what I mean?

221
00:10:49.860 --> 00:10:55.784
And then it will just keep going on and
on and on, so You don't wanna do that.

222
00:10:55.784 --> 00:11:01.650
Any questions on this?

223
00:11:01.650 --> 00:11:02.440
It's crazy I know.

224
00:11:02.440 --> 00:11:06.480
It's not gonna know that you have a loop
there and prevent you from doing it?

225
00:11:06.480 --> 00:11:06.980
No.

226
00:11:08.970 --> 00:11:15.045
No.
You think it would but No, it wouldn't.

227
00:11:15.045 --> 00:11:22.640
I think it's good that it doesn't, because
it encourages you to build better stuff.

228
00:11:22.640 --> 00:11:27.390
And then it can't really make any
assumptions like maybe you want that.

229
00:11:27.390 --> 00:11:31.060
Maybe you you want to go 20 levels deep,
I don't know.

230
00:11:31.060 --> 00:11:34.000
I don't think it should make assumptions.

231
00:11:34.000 --> 00:11:35.300
I'm not saying it's a good idea.

232
00:11:35.300 --> 00:11:37.220
I'm saying, maybe you do want that.

233
00:11:37.220 --> 00:11:40.350
Maybe you're literally trying to show an
example of how bad of an idea this is and

234
00:11:40.350 --> 00:11:41.100
you want to show that.

235
00:11:41.100 --> 00:11:42.080
I don't know.

236
00:11:42.080 --> 00:11:45.080
What I'm saying is that
if it starts doing that,

237
00:11:45.080 --> 00:11:48.030
I think it starts to make assumptions
about your app and the whole point

238
00:11:48.030 --> 00:11:51.890
of our GraphiOL is that it just sits here
and it does not care what is under here.

239
00:11:51.890 --> 00:11:54.440
It just does not care, and
I think that's the beauty of it.

240
00:11:54.440 --> 00:11:58.070
If it starts like, well actually,
we're gonna start looking in here, and

241
00:11:58.070 --> 00:12:00.310
seeing to make sure you're only
doing this a couple times.

242
00:12:00.310 --> 00:12:03.030
I think it starts, it gets at a point
where it's like, it's reaching too much,

243
00:12:03.030 --> 00:12:05.710
and it's losing a little
bit of its flexibility.

244
00:12:05.710 --> 00:12:10.400
But it does provide you with the tools so
that you can do it yourself.

245
00:12:11.910 --> 00:12:14.210
I've broken so
many people's graph API's just doing that.

246
00:12:14.210 --> 00:12:15.660
I'm like okay.

247
00:12:15.660 --> 00:12:16.410
Here check it out.

248
00:12:16.410 --> 00:12:17.500
I've broke it and emailed them.

249
00:12:17.500 --> 00:12:21.180
I'm like look and they're like yeah,
I need to fix that.

250
00:12:22.800 --> 00:12:26.170
&gt;&gt; Scott Moss: It's really easy to fix.

251
00:12:26.170 --> 00:12:27.540
Just don't have bad data modeling.

252
00:12:27.540 --> 00:12:30.470
Don't denormalize your data.

253
00:12:30.470 --> 00:12:32.510
So a graph is flat.

254
00:12:32.510 --> 00:12:34.200
You guys know data structures, right?

255
00:12:34.200 --> 00:12:37.860
So you have a graph, it's flat,
but then you have nodes and

256
00:12:37.860 --> 00:12:39.580
edges that point to each other?

257
00:12:39.580 --> 00:12:42.970
So if you just make sure all
your data's flat, you're fine.

258
00:12:42.970 --> 00:12:48.240
Just don't have double-references to
two things that reference each other

259
00:12:48.240 --> 00:12:48.890
trying to get data.

260
00:12:48.890 --> 00:12:51.710
Don't have a playlist referencing a song
and a song referencing a playlist.

261
00:12:51.710 --> 00:12:53.090
Just do either one, and you're fine.

262
00:12:53.090 --> 00:12:55.380
You'll never have this problem,
and then you're good.

263
00:12:55.380 --> 00:12:56.440
Now if you do that,

264
00:12:56.440 --> 00:12:59.440
let's just bat datamon and
you should probably just take a step back.

265
00:13:03.540 --> 00:13:07.991
&gt;&gt; Scott Moss: Any
questions on this stuff?

266
00:13:07.991 --> 00:13:11.173
&gt;&gt; Scott Moss: Well, what if you
wanna find like every playlist in

267
00:13:11.173 --> 00:13:12.720
which a song is Isn't included.

268
00:13:13.790 --> 00:13:16.840
Every playlist that which a song is put,
so

269
00:13:16.840 --> 00:13:20.510
then what you would do is you would
probably make a different query for that.

270
00:13:20.510 --> 00:13:24.050
No I mean that would be
a scenario on which you have.

271
00:13:24.050 --> 00:13:26.825
Like this kind of midi
to midi relationship.

272
00:13:26.825 --> 00:13:28.430
You have it in your database but

273
00:13:28.430 --> 00:13:30.180
that doesn't mean you have to expose for
your GraphiQL.

274
00:13:30.180 --> 00:13:31.840
You might have a midi
to midi in your data.

275
00:13:31.840 --> 00:13:33.710
That's totally fine,
I'm not saying don't do that.

276
00:13:33.710 --> 00:13:35.640
I'm saying when you expose it to GraphiQL,

277
00:13:35.640 --> 00:13:40.990
The way I will get around that is I
would have like, you know, play list for

278
00:13:40.990 --> 00:13:45.080
song and then you pass in a song ID and
then it would go do that.

279
00:13:45.080 --> 00:13:48.790
Versus like, somebody trying to like
explore it, you know what I mean?

280
00:13:48.790 --> 00:13:50.070
I would make a query for that.

281
00:13:50.070 --> 00:13:51.230
Yeah.

282
00:13:51.230 --> 00:13:51.960
That makes sense.

283
00:13:55.910 --> 00:13:57.389
&gt;&gt; Scott Moss: Any other
questions on this.

284
00:13:59.392 --> 00:14:00.274
&gt;&gt; Scott Moss: So when I first saw this,

285
00:14:00.274 --> 00:14:02.880
I thought it was the coolest thing
I've ever seen in my life, right?

286
00:14:02.880 --> 00:14:06.140
Coming from REST and stuff,
I was just like, what, what is that?

287
00:14:06.140 --> 00:14:07.420
That's pretty cool.

288
00:14:07.420 --> 00:14:11.010
So there's a lot more
stuff you can do here.

289
00:14:11.010 --> 00:14:15.640
What you learned today was
60% to 70% of GraphQL, and

290
00:14:15.640 --> 00:14:19.010
you can go your whole life writing GraphQL
with just this and you'll be fine.

291
00:14:19.010 --> 00:14:21.180
There's other stuff that's out there.

292
00:14:21.180 --> 00:14:25.830
But that stuff is mostly associated with
client side, so you've got fragments, you

293
00:14:25.830 --> 00:14:33.050
got interfaces, you have directives,
which you almost never have to

294
00:14:33.050 --> 00:14:37.310
use unless you're doing some pretty crazy
stuff, there's a lot of other stuff but

295
00:14:37.310 --> 00:14:39.729
you don't really have to use any of that
stuff, you can go far with just this.

296
00:14:42.644 --> 00:14:44.918
&gt;&gt; Scott Moss: Cool, so
let's move onto the next thing,

