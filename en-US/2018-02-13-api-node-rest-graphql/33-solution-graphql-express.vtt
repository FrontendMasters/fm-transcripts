WEBVTT

1
00:00:00.000 --> 00:00:03.657
&gt;&gt; Scott Moss: So was everybody able
to see their docs rendered on the page,

2
00:00:03.657 --> 00:00:04.380
all right?

3
00:00:04.380 --> 00:00:09.026
It's actually really confusing
because they decided to call

4
00:00:09.026 --> 00:00:12.518
graphiql with an i,
very similar to GraphQL.

5
00:00:12.518 --> 00:00:14.871
Literally, the only difference
between it is the i after the h.

6
00:00:14.871 --> 00:00:16.532
That's the only difference.

7
00:00:16.532 --> 00:00:18.577
So I'm sorry, it can be confusing.

8
00:00:18.577 --> 00:00:22.252
But they couldn't resist the pun on
the word graphiql like you had to do

9
00:00:22.252 --> 00:00:22.948
it, right?

10
00:00:22.948 --> 00:00:24.577
What else are you gonna call it?

11
00:00:24.577 --> 00:00:26.077
So it's really good.

12
00:00:26.077 --> 00:00:30.108
Let's just walk through what that would
look like just in case anyone didn't get

13
00:00:30.108 --> 00:00:32.019
to it, and did not look at the branch.

14
00:00:32.019 --> 00:00:36.740
So if you were to go to the index file
of the API, you would see that we're

15
00:00:36.740 --> 00:00:41.407
exporting out that graphiql router
that was already created for you.

16
00:00:41.407 --> 00:00:46.803
And then inside the server.js,
you would import that graphQLRouter,

17
00:00:46.803 --> 00:00:49.906
and then you would mount it at /graphql.

18
00:00:49.906 --> 00:00:53.061
Not graphiql, no i here, graphql.

19
00:00:53.061 --> 00:00:57.656
And you would just place that router
exactly the same you would do the rest

20
00:00:57.656 --> 00:00:58.269
router.

21
00:00:58.269 --> 00:01:02.926
And then the other directions
were to mount the graphiql,

22
00:01:02.926 --> 00:01:06.074
with an i, on the path of docs, right?

23
00:01:06.074 --> 00:01:11.644
At the last minute, I showed you
that there was a graphiqlExpress

24
00:01:11.644 --> 00:01:16.210
package from
the apollo-server-express module.

25
00:01:16.210 --> 00:01:21.379
And then if you did some digging,
you would find out that you needed to

26
00:01:21.379 --> 00:01:27.457
supply it with an endpointURL pointing to
the relative path of your GraphQL API.

27
00:01:27.457 --> 00:01:31.714
The way this works is this graphiqlExpress
when invoked returns a router.

28
00:01:31.714 --> 00:01:36.414
It returns an express router so
you have to invoke it first of all.

29
00:01:36.414 --> 00:01:39.429
If you don't invoke this,
if you just pass it in like this.

30
00:01:39.429 --> 00:01:41.257
It'll just hang, you won't get anything.

31
00:01:41.257 --> 00:01:42.851
So we did that, and it didn't do anything.

32
00:01:42.851 --> 00:01:46.195
That's because, by default,
you have to actually invoke it, for

33
00:01:46.195 --> 00:01:48.085
it to return the router that you want.

34
00:01:48.085 --> 00:01:51.073
And then it takes in an option,
this option makes sense.

35
00:01:51.073 --> 00:01:54.411
Because what graphiql does is,
it actually returns a React App.

36
00:01:54.411 --> 00:01:56.984
If you go look at the source code,
is this a React App?

37
00:01:56.984 --> 00:02:02.528
Which your docs is just a React App, it
returns that, and then that app needs to

38
00:02:02.528 --> 00:02:08.254
know what is your GraphQL API that I need
to hit to actually do the documentation?

39
00:02:08.254 --> 00:02:10.316
So that's what the endpoint is, and

40
00:02:10.316 --> 00:02:14.785
it could be relative because it's from
the same server, so it'd be relative.

41
00:02:14.785 --> 00:02:17.268
It does this thing called introspection.

42
00:02:17.268 --> 00:02:22.106
Introspection is a query,
it's basically like query that

43
00:02:22.106 --> 00:02:26.557
you can send to your GraphQL API
that will convince your

44
00:02:26.557 --> 00:02:31.025
GraphQL API to return
everything associated with it.

45
00:02:31.025 --> 00:02:32.408
Every single thing associated
with your GraphQL API.

46
00:02:32.408 --> 00:02:37.017
All the types, the names, queries,
the mutations, every single thing.

47
00:02:37.017 --> 00:02:40.105
One query hits your GraphQL API and
it gives you everything.

48
00:02:40.105 --> 00:02:44.838
And graphiql takes advantage of that and
builds an app around it.

49
00:02:44.838 --> 00:02:45.952
That's how you get all the completed.

50
00:02:45.952 --> 00:02:47.194
That's how you see all your docs.

51
00:02:47.194 --> 00:02:52.568
It does one query and
I can show you what that will look like.

52
00:02:52.568 --> 00:02:54.496
So let's save this, start this up.

53
00:02:57.779 --> 00:03:01.877
&gt;&gt; Scott Moss: And
then if we go to mydocs here.

54
00:03:05.911 --> 00:03:08.096
&gt;&gt; Scott Moss: What you should
get back is, you would see this.

55
00:03:08.096 --> 00:03:12.133
This is GraphiQL, with an i.

56
00:03:12.133 --> 00:03:14.886
And it's just a React App.

57
00:03:14.886 --> 00:03:18.497
And then if you did it successfully,
and this would render and

58
00:03:18.497 --> 00:03:23.650
if you didn't give it, if you just invoke
the graphiqlExpress app, this will render.

59
00:03:23.650 --> 00:03:26.353
If you didn't give endpointURL,
this will still render.

60
00:03:26.353 --> 00:03:29.087
You just won't have any docs over here,
this looks to be blank.

61
00:03:29.087 --> 00:03:31.833
So this is a confirmation that is
pointing to the correct graphql,

62
00:03:31.833 --> 00:03:33.410
we can verify that by clicking Query.

63
00:03:33.410 --> 00:03:37.059
And we see that one query that we do have
which is in the user graphql file which

64
00:03:37.059 --> 00:03:37.583
is getMe.

65
00:03:37.583 --> 00:03:39.844
That's the only query
that we have right now.

66
00:03:39.844 --> 00:03:40.681
So you'll see that.

67
00:03:40.681 --> 00:03:41.581
So that's a verification.

68
00:03:41.581 --> 00:03:46.249
Now, the whole introspection thing,

69
00:03:46.249 --> 00:03:52.189
if you open up the network tab,
click on Network,

70
00:03:52.189 --> 00:03:58.852
you refresh this, and
then if we go look at graphql XHR.

71
00:03:58.852 --> 00:04:00.354
Is it this one?

72
00:04:03.043 --> 00:04:06.326
&gt;&gt; Scott Moss: Here we go, so if we go
look at a graphql call here you can see

73
00:04:06.326 --> 00:04:08.814
this query being called, Introspection.

74
00:04:08.814 --> 00:04:11.011
We can just go look at
this query right quick.

75
00:04:11.011 --> 00:04:12.949
It's a pretty big query.

76
00:04:12.949 --> 00:04:15.954
Actually, this one's not that big
cuz our stuff is pretty small.

77
00:04:15.954 --> 00:04:20.297
But you an think of it as like
a recursive query that hits our graphql.

78
00:04:20.297 --> 00:04:24.805
And it returns back every single thing
associated with our GraphQL API which

79
00:04:24.805 --> 00:04:26.860
right now is like almost nothing.

80
00:04:26.860 --> 00:04:31.099
We only have like three types and
one query so it's like nothing.

81
00:04:31.099 --> 00:04:33.149
This introspection can be used for
a lot of things.

82
00:04:33.149 --> 00:04:35.628
There is tools out there that will
use this introspection query.

83
00:04:35.628 --> 00:04:40.361
And have you ever used like one of those
GUI's where you can build database tables

84
00:04:40.361 --> 00:04:41.693
and set up relations?

85
00:04:41.693 --> 00:04:43.700
One of those table builders,
schema builder,

86
00:04:43.700 --> 00:04:45.316
it'll generate that based off this.

87
00:04:45.316 --> 00:04:47.929
Which was really cool.
So you can see the relations of how your

88
00:04:47.929 --> 00:04:51.135
graph interacts with each other,
it's really cool.

89
00:04:51.135 --> 00:04:55.763
I mean we can actually attempt to find it,

90
00:04:55.763 --> 00:05:00.802
let me see, control inspection, graphql.

91
00:05:03.213 --> 00:05:04.766
&gt;&gt; Scott Moss: Okay,
I don't know the name.

92
00:05:04.766 --> 00:05:05.463
Was it?

93
00:05:07.343 --> 00:05:09.806
&gt;&gt; Scott Moss: Okay,
that's totally not it.

94
00:05:09.806 --> 00:05:13.935
Well, there's a tool that
will do introspection and

95
00:05:13.935 --> 00:05:16.422
like do some really cool stuff.

96
00:05:16.422 --> 00:05:19.242
Maybe I'll find it later, but
it will put it together for you so

97
00:05:19.242 --> 00:05:21.437
you can see how your stuff
relates to each other.

98
00:05:21.437 --> 00:05:24.307
So using the introspection you
can build some pretty good tools.

99
00:05:24.307 --> 00:05:27.521
There's some other great
alternatives to GraphiQL out there.

100
00:05:27.521 --> 00:05:29.653
I know GraphiQL has a really
good one that they have,

101
00:05:29.653 --> 00:05:33.160
they call it the GraphQL Playground, which
is like a better version of GraphiQL's.

102
00:05:33.160 --> 00:05:36.345
You can build a lot of stuff
from this IntrospectionQuery.

103
00:05:36.345 --> 00:05:40.385
I mean, you get to imagine the types
of interactive documentations, or

104
00:05:40.385 --> 00:05:44.758
visualizations you can build to explore
your API using this query that returns

105
00:05:44.758 --> 00:05:48.156
pretty much every single thing
that you need about your API.

106
00:05:48.156 --> 00:05:51.220
So you can see your return
says JSON right here.

107
00:05:51.220 --> 00:05:55.694
That is all the information about every
single thing that you can do in your API.

108
00:05:55.694 --> 00:05:56.236
And then,

109
00:05:56.236 --> 00:06:00.470
you can use this information to build an
application that allows you to explore it.

110
00:06:00.470 --> 00:06:02.171
Pretty cool.

111
00:06:03.739 --> 00:06:05.105
&gt;&gt; Scott Moss: Any questions about this?

112
00:06:06.473 --> 00:06:07.713
&gt;&gt; Scott Moss: Now,
if you took it a step further and

113
00:06:07.713 --> 00:06:08.914
you actually tried to query getMe.

114
00:06:08.914 --> 00:06:10.571
Who tried to do that?

115
00:06:10.571 --> 00:06:11.997
Right, it broke, right?

116
00:06:11.997 --> 00:06:13.380
Do you know why it broke?

117
00:06:14.699 --> 00:06:17.104
&gt;&gt; Scott Moss: Cuz it's there,
we didn't talk about resolvers but

118
00:06:17.104 --> 00:06:20.002
if you wanted to look at the resolver
file that functions there.

119
00:06:20.002 --> 00:06:22.836
And it is actually returning something,
so why did it break?

120
00:06:24.495 --> 00:06:28.330
&gt;&gt; Scott Moss: This is so meta,
like if you get it it's awesome, but

121
00:06:28.330 --> 00:06:34.402
you do have the information to know why it
did break, because we built it yesterday.

122
00:06:34.402 --> 00:06:36.138
But basically,
let's see if anybody can figure it out.

123
00:06:36.138 --> 00:06:40.945
So if I do getMe, and I say give
me the id of me, and the username,

124
00:06:40.945 --> 00:06:44.962
before I run this,
notice I did not pass in an id here.

125
00:06:44.962 --> 00:06:46.491
The getMe doesn't take an id.

126
00:06:46.491 --> 00:06:48.431
So how does it know who me is?

127
00:06:48.431 --> 00:06:50.519
Right, JSON Web Token.

128
00:06:50.519 --> 00:06:51.900
We have JSON Web Token, right?

129
00:06:51.900 --> 00:06:54.026
But I didn't pass in
a JSON Web Token anywhere.

130
00:06:54.026 --> 00:06:54.638
That's the problem.

131
00:06:54.638 --> 00:06:58.860
I also didn't set up JSON Web Token
decoding anywhere inside

132
00:06:58.860 --> 00:07:00.940
the GraphQL that we mounted.

133
00:07:00.940 --> 00:07:05.366
This resolver if you were to look at it is
expecting the user to already be there.

134
00:07:05.366 --> 00:07:10.701
And if you did some more digging,
you would see that in a graphql router

135
00:07:10.701 --> 00:07:15.947
it's expecting the user to be on
the request object which is put there

136
00:07:15.947 --> 00:07:20.763
by the middleware for
JSON Web Token which you did not add here.

137
00:07:20.763 --> 00:07:24.137
So therefore rec.user is
undefined inside this

138
00:07:24.137 --> 00:07:27.105
is are words that I did
not teach you about.

139
00:07:27.105 --> 00:07:29.725
This is undefined, this user is undefined.

140
00:07:29.725 --> 00:07:36.263
And because user from getMe cannot be
null, it breaks because that's null.

141
00:07:36.263 --> 00:07:41.366
So that's why you get that error,
cannot return null for

142
00:07:41.366 --> 00:07:44.991
non-nullable field, Query.getMe.

143
00:07:44.991 --> 00:07:51.494
Just makes you send, whatever getMe
returned was null, and it can't be null.

144
00:07:51.494 --> 00:07:52.615
&gt;&gt; Speaker 2: Larger font.

145
00:07:52.615 --> 00:07:56.035
&gt;&gt; Scott Moss: A larger font, okay,
that's what that needs, all right?

146
00:07:56.035 --> 00:07:59.021
[LAUGH], okay, all right, I know what
that, I thought you wanted me to clap.

147
00:07:59.021 --> 00:08:01.667
I was like, I'll clap, okay?

148
00:08:05.531 --> 00:08:07.235
&gt;&gt; Scott Moss: There we go.

149
00:08:07.235 --> 00:08:10.327
So, yeah, it's a very hard
thing to follow, very meta, but

150
00:08:10.327 --> 00:08:12.240
that's what that means right there.

151
00:08:12.240 --> 00:08:16.279
It's like that's a non null error,
you're supposed to put no there.

152
00:08:16.279 --> 00:08:18.546
Just to show you that,
we can satisfy it right quick.

153
00:08:18.546 --> 00:08:22.298
If I go into resolver, and
return a fake user right quick.

154
00:08:22.298 --> 00:08:25.681
A user has what, an id,
username, it has all this, so

155
00:08:25.681 --> 00:08:27.826
I'm just gonna return a fake one.

156
00:08:27.826 --> 00:08:29.551
And you'll see that it
will totally be fine.

157
00:08:29.551 --> 00:08:35.241
So id is whatever, username is hello.

158
00:08:35.241 --> 00:08:39.670
CreatedAt is sure, yes.

159
00:08:39.670 --> 00:08:41.550
So, I'll save that.

160
00:08:41.550 --> 00:08:45.394
And now if I go back and
I rerun this query.

161
00:08:45.394 --> 00:08:47.201
Let me refresh it actually.

162
00:08:56.940 --> 00:08:58.273
&gt;&gt; Scott Moss: I guess I need commas,

163
00:08:58.273 --> 00:09:04.188
[LAUGH]
&gt;&gt; Scott Moss: There we go.

164
00:09:04.188 --> 00:09:09.495
Now if I refresh this, and
run that I get back the user, right?

165
00:09:09.495 --> 00:09:11.264
So that's how that works.

166
00:09:11.264 --> 00:09:16.017
And just to play with this
a little more if we were to

167
00:09:16.017 --> 00:09:20.324
look at the user,
the id has to be non-null.

168
00:09:20.324 --> 00:09:22.212
There has to be a id there, right?

169
00:09:22.212 --> 00:09:25.416
So let's say, I took away the id.

170
00:09:25.416 --> 00:09:27.574
We expect to see an error, right?

171
00:09:27.574 --> 00:09:34.850
Because I'm running this and it's like,
cannot return non-nullable field User.id.

172
00:09:34.850 --> 00:09:39.867
But if I don't ask for the id, and
I'm not returning an id it's totally fine.

173
00:09:39.867 --> 00:09:43.921
I didn't ask for it, so
it didn't even try to get it.

174
00:09:43.921 --> 00:09:44.450
Does that make sense?

175
00:09:44.450 --> 00:09:45.856
It's only gonna validate,

176
00:09:45.856 --> 00:09:48.854
it's only gonna try to retrieve
something that you ask for.

177
00:09:48.854 --> 00:09:50.498
It doesn't try to retrieve everything.

178
00:09:50.498 --> 00:09:52.569
If I didn't ask for an id,
it doesn't try to get an id.

179
00:09:52.569 --> 00:09:55.215
Therefore, it didn't know it wasn't null.

180
00:09:55.215 --> 00:10:00.285
But as soon as I ask for the id, it tried
to get the id, and then it was like, wait,

181
00:10:00.285 --> 00:10:05.072
that's actually null, it's not there,
because I got rid of it back here.

182
00:10:05.072 --> 00:10:08.809
The other magical thing that's happening
right now that we did not talk about is

183
00:10:08.809 --> 00:10:12.233
that and we're gonna get to this in
reslovers, which is coming up next.

184
00:10:12.233 --> 00:10:14.985
But I'm just gonna talk about it now,

185
00:10:14.985 --> 00:10:20.489
because I have the context is when you
return an object from your resolvers,

186
00:10:20.489 --> 00:10:24.791
and the properties match up
with the types in your graphql.

187
00:10:24.791 --> 00:10:27.007
See for instance,
we have a property called id,

188
00:10:27.007 --> 00:10:30.522
we have a property called username,
createdAt, updatedAt in my resolver,

189
00:10:30.522 --> 00:10:33.723
they have the same property names,
graphql just takes it from there.

190
00:10:33.723 --> 00:10:35.885
If you don't have property
names that line up,

191
00:10:35.885 --> 00:10:38.545
you need to write another
resolver to resolve that field.

192
00:10:38.545 --> 00:10:40.833
By default,
it'll take the object that you gave it and

193
00:10:40.833 --> 00:10:44.280
just match the property names one by one,
like here's an id, here's an id.

194
00:10:44.280 --> 00:10:45.915
Username, username, cool.

195
00:10:45.915 --> 00:10:50.601
But let's say, user also takes in

196
00:10:50.601 --> 00:10:55.131
a othername, which is a string.

197
00:10:55.131 --> 00:11:00.017
But I don't have the other name here,
all right?

198
00:11:00.017 --> 00:11:01.824
And then the client ask for other name.

199
00:11:01.824 --> 00:11:05.177
How do we tell graphql
to resolve other name?

200
00:11:05.177 --> 00:11:07.923
You write a resolver for that, and
that's where about to get into.

201
00:11:07.923 --> 00:11:11.613
So that's a nested resolver,
property level resolver.

202
00:11:11.613 --> 00:11:15.393
So basically, that's what I was saying,
your graphiql types start off the same as

203
00:11:15.393 --> 00:11:19.123
your Mongoose schemas, but then they
branch off to stuff completely different.

204
00:11:19.123 --> 00:11:20.722
They can do whatever they want.

205
00:11:20.722 --> 00:11:21.999
But they usually start off that way.

206
00:11:21.999 --> 00:11:26.576
But I can put GitHub here, and
have a function that goes to GitHub, and

207
00:11:26.576 --> 00:11:28.217
fetches a GitHub thing.

208
00:11:28.217 --> 00:11:30.891
It will do whatever I want, and
only for that one property, and

209
00:11:30.891 --> 00:11:31.961
only when you ask for it.

210
00:11:31.961 --> 00:11:33.078
If you don't ask for it, it doesn't do it.

211
00:11:33.078 --> 00:11:34.172
It doesn't make the call.

212
00:11:34.172 --> 00:11:35.945
When you ask for it, it'll do it.

213
00:11:39.141 --> 00:11:40.662
&gt;&gt; Scott Moss: Okay,

