WEBVTT

1
00:00:01.873 --> 00:00:05.876
&gt;&gt; Scott: Okay, sweet,
let's move on to talk about middleware.

2
00:00:05.876 --> 00:00:08.920
This one's gonna be quick because
you pretty much already know what

3
00:00:08.920 --> 00:00:09.470
middleware is.

4
00:00:09.470 --> 00:00:14.692
I've been placing dimes and clues here and
there, showing you what it is.

5
00:00:14.692 --> 00:00:18.160
Only you don't know is where to put it and
how to call the next thing,

6
00:00:18.160 --> 00:00:20.160
but there's a function called next, so.

7
00:00:20.160 --> 00:00:22.300
Let's just talk about that.

8
00:00:22.300 --> 00:00:25.420
Middleware are functions that can be
configured to run before the response is

9
00:00:25.420 --> 00:00:26.700
sent back, basically.

10
00:00:26.700 --> 00:00:30.960
Hey, before you execute this controller,
run these functions in this order,

11
00:00:30.960 --> 00:00:32.350
that's middleware.

12
00:00:32.350 --> 00:00:35.470
And each function does something
synchronously or asynchronously and

13
00:00:35.470 --> 00:00:37.500
passes control to the next function.

14
00:00:37.500 --> 00:00:41.890
You can think of it as a stack of hooks or
functions that can

15
00:00:41.890 --> 00:00:45.360
call before the thing that you want
to actually happen, actually happens.

16
00:00:45.360 --> 00:00:48.400
So you might have things that
enhance the request object.

17
00:00:48.400 --> 00:00:52.520
You might have things that log,
do authentication, all different types of

18
00:00:52.520 --> 00:00:56.520
things for the incoming request before it
actually gets to where it wants to be.

19
00:00:56.520 --> 00:01:00.080
Great for analytics, great for
authentication, all that stuff.

20
00:01:01.190 --> 00:01:01.950
So yeah, basically uses

21
00:01:01.950 --> 00:01:05.140
the callback function to pass control with
the next function in the middleware stack.

22
00:01:05.140 --> 00:01:06.920
That callback function is called next.

23
00:01:06.920 --> 00:01:11.230
If we go look at these controllers
that you've been writing,

24
00:01:11.230 --> 00:01:14.680
this function right here,
it's just a callback function.

25
00:01:14.680 --> 00:01:19.680
The middleware way of writing code
is not something unique to express.

26
00:01:19.680 --> 00:01:21.620
Middleware has been around for
a long time.

27
00:01:21.620 --> 00:01:25.070
It's basically just,
you have a stack of functions, right?

28
00:01:25.070 --> 00:01:26.180
You start at the first one.

29
00:01:26.180 --> 00:01:30.360
You execute that function,
not before passing in a callback.

30
00:01:30.360 --> 00:01:33.820
That callback, when invoked,
just calls the next function in a stack.

31
00:01:33.820 --> 00:01:34.830
That's all middleware is.

32
00:01:34.830 --> 00:01:38.450
It's like, here's a list of functions,
an array of functions.

33
00:01:38.450 --> 00:01:42.310
Invoke the first one, pass in the call
back to be notified when it's done.

34
00:01:42.310 --> 00:01:45.360
When it's done, go to the next one,
call that one, and so forth and so forth,

35
00:01:45.360 --> 00:01:46.560
until there is nothing left.

36
00:01:46.560 --> 00:01:47.840
That's middleware.

37
00:01:47.840 --> 00:01:49.759
That's how we are able to do it.

38
00:01:49.759 --> 00:01:52.927
It's pretty simple in
the implementation of it but

39
00:01:52.927 --> 00:01:55.550
it is very powerful in what it can do.

40
00:01:55.550 --> 00:02:00.170
So, like I said, it is great at
authenticating, enhancement request,

41
00:02:00.170 --> 00:02:04.550
logging, can be mounted globally in
a request or on a per route basis.

42
00:02:04.550 --> 00:02:06.560
There's nowhere you cannot put, nowhere,

43
00:02:06.560 --> 00:02:08.600
you can literally put
it anywhere you want.

44
00:02:08.600 --> 00:02:12.548
When I say globally I'm talking about,
you remember we have a global app, right?

45
00:02:12.548 --> 00:02:19.716
Inside of serverjs?

46
00:02:19.716 --> 00:02:20.790
Yeah, you see this global app?

47
00:02:21.820 --> 00:02:22.950
We have global middleware.

48
00:02:24.510 --> 00:02:26.960
When I say setting up middleware globally,
that's what that means.

49
00:02:26.960 --> 00:02:28.790
That means it's on this app level.

50
00:02:28.790 --> 00:02:32.240
But you can also put it on a per-route
level, I can put middleware here.

51
00:02:32.240 --> 00:02:36.360
I can also put it on the route definition
for this, and the route definition for

52
00:02:36.360 --> 00:02:38.220
its children and so forth and so forth.

53
00:02:38.220 --> 00:02:41.610
I can even put it right on the controller
if I want to, to be honest.

54
00:02:41.610 --> 00:02:42.970
It depends on what you wanna do.

55
00:02:42.970 --> 00:02:45.350
They're all the same.

56
00:02:45.350 --> 00:02:48.590
They all take the same signature,
a request, a response, and then next.

57
00:02:48.590 --> 00:02:51.390
It's the same thing so
it doesn't matter where you put it.

58
00:02:51.390 --> 00:02:54.290
So for instance, if wanted to,
let's just do it right now.

59
00:02:54.290 --> 00:02:55.510
So I'm gonna run some
middleware right now.

60
00:02:55.510 --> 00:02:57.420
I'm just gonna right something in line.

61
00:02:57.420 --> 00:02:58.258
I'm a make a function.

62
00:02:58.258 --> 00:03:02.866
Just gonna do this right there, and
it's going to take in a request,

63
00:03:02.866 --> 00:03:05.420
response, and the next, all right?

64
00:03:05.420 --> 00:03:07.230
And all I'm going to do
is just log the request,

65
00:03:10.947 --> 00:03:12.510
&gt;&gt; Scott: I think request dot route?

66
00:03:13.990 --> 00:03:14.850
No, I'm not going to do that.

67
00:03:14.850 --> 00:03:18.025
I'm just going to say,
hey from middleware.

68
00:03:18.025 --> 00:03:20.560
And then I'm gonna call next.

69
00:03:20.560 --> 00:03:21.250
This is important.

70
00:03:21.250 --> 00:03:23.400
And we'll see what happens
if you don't call next.

71
00:03:23.400 --> 00:03:26.510
So I'm gonna do that and
I'm gonna run this.

72
00:03:32.310 --> 00:03:37.415
I'm just going to just hit any API URL,

73
00:03:37.415 --> 00:03:42.682
cuz it's mounted at API, API/songs.

74
00:03:44.049 --> 00:03:46.926
&gt;&gt; Scott: And if we go look at the server
output, you'll see right there,

75
00:03:46.926 --> 00:03:48.324
hey from middleware, right?

76
00:03:50.160 --> 00:03:51.448
&gt;&gt; Scott: See that?

77
00:03:53.288 --> 00:03:56.419
&gt;&gt; Scott: Hey from middleware, right?

78
00:03:56.419 --> 00:03:59.450
So that's middleware, right?

79
00:03:59.450 --> 00:04:02.694
Now if I get rid of this next,
what do you think is gonna happen?

80
00:04:04.589 --> 00:04:05.236
&gt;&gt; Speaker 2: You get hung up.

81
00:04:05.236 --> 00:04:06.600
&gt;&gt; Scott: This is gonna hang, yeah.

82
00:04:06.600 --> 00:04:07.652
Cuz it's like, what do I do now?

83
00:04:07.652 --> 00:04:09.230
I don't know what to do.

84
00:04:09.230 --> 00:04:09.963
&gt;&gt; Speaker 2: It'll still log, right?

85
00:04:09.963 --> 00:04:13.610
&gt;&gt; Scott: It'll still log, for sure,
it's not gonna stop the logging.

86
00:04:13.610 --> 00:04:16.580
But it won't know what
to do after it logs.

87
00:04:16.580 --> 00:04:17.820
See, it's just hung.

88
00:04:17.820 --> 00:04:19.481
If we go back it's just like, yeah, hey.

89
00:04:19.481 --> 00:04:20.700
Hey from middleware.

90
00:04:20.700 --> 00:04:21.890
What do you want me to do?

91
00:04:21.890 --> 00:04:23.550
It doesn't know what to do.

92
00:04:23.550 --> 00:04:24.310
It has no clue.

93
00:04:24.310 --> 00:04:27.960
The other thing about middleware
is you can send errors.

94
00:04:27.960 --> 00:04:32.430
So if you pass an error here,

95
00:04:39.005 --> 00:04:40.176
&gt;&gt; Scott: What do you
think is going to happen?

96
00:04:43.891 --> 00:04:46.070
&gt;&gt; Speaker 2: The error
will actually continue on.

97
00:04:46.070 --> 00:04:48.136
&gt;&gt; Scott: Crash server,
the error will continue on?

98
00:04:50.497 --> 00:04:52.000
&gt;&gt; Scott: Anybody want to just guess?

99
00:04:52.000 --> 00:04:53.530
What do you want to happen?

100
00:04:53.530 --> 00:04:54.890
Let me ask you that.

101
00:04:54.890 --> 00:04:57.830
&gt;&gt; Speaker 2: Should be a error
handling middleware that can.

102
00:04:57.830 --> 00:04:58.850
&gt;&gt; Scott: There you go, exactly.

103
00:04:58.850 --> 00:05:03.010
So it's going to send
this error somewhere.

104
00:05:03.010 --> 00:05:04.420
But eventually you gotta catch the error.

105
00:05:04.420 --> 00:05:08.030
It's not the holy grail, we still gotta
catch our errors, even in Express.

106
00:05:08.030 --> 00:05:10.970
So you're right, you need to set
up some error handling middleware

107
00:05:10.970 --> 00:05:15.570
that's eventually going to catch that
error and respond appropriately.

108
00:05:15.570 --> 00:05:19.710
That's what that next for,so if the first
argument you pass to next is an error.

109
00:05:19.710 --> 00:05:21.490
That's the only argument that it takes,
it's an error.

110
00:05:21.490 --> 00:05:22.310
Nothing else goes into it.

111
00:05:22.310 --> 00:05:24.700
If it detects that it's like,
cool, this is an error.

112
00:05:24.700 --> 00:05:27.510
Let me call your error handling
middleware if you have one set up.

113
00:05:27.510 --> 00:05:30.580
If you don't have something set
up it'll just crap the bed.

114
00:05:31.850 --> 00:05:35.130
So I don't think we have
any set up in this example.

115
00:05:36.760 --> 00:05:39.980
No we don't, so let's try to invoke it and
see what happens.

116
00:05:39.980 --> 00:05:42.450
So if we do that, boom, there you go.

117
00:05:42.450 --> 00:05:46.491
It literally just sent
back the whole error.

118
00:05:46.491 --> 00:05:48.560
Here you go, figure it out, right?

119
00:05:48.560 --> 00:05:52.050
It just took a crap right on my console.

120
00:05:52.050 --> 00:05:54.130
So you don't wanna do that.

121
00:05:54.130 --> 00:05:56.044
So you wanna set up some error
handling middleware, and

122
00:05:56.044 --> 00:05:57.313
that's what we're about to do now.

