WEBVTT

1
00:00:00.430 --> 00:00:01.891
&gt;&gt; Scott Moss: We've got
one more thing today.

2
00:00:01.891 --> 00:00:05.050
This one's not so much of a lesson but
just an exercise.

3
00:00:05.050 --> 00:00:08.880
And in fact,
there really is no solution to it.

4
00:00:08.880 --> 00:00:10.490
It's just something that you should do.

5
00:00:10.490 --> 00:00:13.300
And you could probably do it for
homework if you want.

6
00:00:14.990 --> 00:00:17.240
I could go over the solution,
but just like I said,

7
00:00:17.240 --> 00:00:19.180
there's not really a solution,
I guess there is but not really.

8
00:00:19.180 --> 00:00:22.300
But anyway, what we're gonna do now
is we're gonna write more test.

9
00:00:22.300 --> 00:00:26.586
Remember when I said for the API
we're only testing if it get all for

10
00:00:26.586 --> 00:00:29.060
GET impulse and
there's four other methods for

11
00:00:29.060 --> 00:00:31.240
each resource,
we're not writing tests for that.

12
00:00:31.240 --> 00:00:33.100
This is where you write tests for that.

13
00:00:33.100 --> 00:00:37.550
So these tests right here are generated
tests, you can see we're doing some

14
00:00:37.550 --> 00:00:42.280
metaprogram here where these tests
take any model or resource name.

15
00:00:42.280 --> 00:00:45.810
And what a new resource of that will
look like and it generates test.

16
00:00:45.810 --> 00:00:50.400
It generates the get all tests,
it generates the post test,

17
00:00:50.400 --> 00:00:51.940
it generates all that stuff for
every single models.

18
00:00:51.940 --> 00:00:55.180
So these tests are generic enough
to work for all of the models and

19
00:00:55.180 --> 00:00:58.550
resources, that's how well
our code is right now.

20
00:00:58.550 --> 00:01:01.480
We can generalize our test and
it still works.

21
00:01:01.480 --> 00:01:04.300
And you might say, well,
if that's the case and I wrote test for

22
00:01:04.300 --> 00:01:06.310
one of them why do I
need to test all of them?

23
00:01:06.310 --> 00:01:08.170
Well, just to make sure nobody changed or

24
00:01:08.170 --> 00:01:11.250
added anything extra in between your
metaprogramming and the result.

25
00:01:12.920 --> 00:01:15.280
So we would need to write tests for,
as you can see for now,

26
00:01:15.280 --> 00:01:17.460
we're writing tests for GET and POST.

27
00:01:17.460 --> 00:01:19.540
But for GET,
we're only testing if you can get all.

28
00:01:19.540 --> 00:01:21.640
We need to test if you can get one.

29
00:01:21.640 --> 00:01:23.430
What you need to do is
to create one first.

30
00:01:23.430 --> 00:01:24.290
And then for POST,

31
00:01:24.290 --> 00:01:28.610
we're only testing if you can create one,
which is all post can do.

32
00:01:28.610 --> 00:01:30.161
But we also need to test for
put and delete.

33
00:01:32.330 --> 00:01:36.096
&gt;&gt; Scott Moss: So let's just write one
right now, let's just write the one for

34
00:01:36.096 --> 00:01:40.990
get one, cuz this one's kinda hard as you
need to create one before you can get one.

35
00:01:40.990 --> 00:01:46.562
So we just say it('should
get one $(resourceName) is.

36
00:01:49.163 --> 00:01:50.248
&gt;&gt; Scott Moss: And this is gonna be async,

37
00:01:50.248 --> 00:01:52.809
you can also just return a promise
if you don't wanna use async.

38
00:01:55.353 --> 00:01:56.630
&gt;&gt; Scott Moss: Let's do that.

39
00:01:57.960 --> 00:02:01.511
And then basically this is testing that
we can actually use the get one API call,

40
00:02:01.511 --> 00:02:03.533
actually get one from the database, right?

41
00:02:03.533 --> 00:02:06.570
So what we need to do is first we need
to create something in the database, so

42
00:02:06.570 --> 00:02:08.566
we'll just go ahead and
create in the resource.

43
00:02:08.566 --> 00:02:10.772
And we'll say newDoc =,

44
00:02:10.772 --> 00:02:16.200
whatever that model in that was passed in,
right here, model.

45
00:02:17.450 --> 00:02:24.217
So model.create() and
we'll say, bless you.

46
00:02:24.217 --> 00:02:26.754
You could take in this newResource
object which will be what you need to

47
00:02:26.754 --> 00:02:27.750
create that new resource.

48
00:02:27.750 --> 00:02:32.450
So model.create(newResource) and
we'll await that.

49
00:02:32.450 --> 00:02:36.230
And then now we have that,
we can go ahead and issue our API request.

50
00:02:36.230 --> 00:02:37.062
I'm just gonna copy this.

51
00:02:38.957 --> 00:02:40.812
&gt;&gt; Scott Moss: Paste it here,
so we can use,

52
00:02:40.812 --> 00:02:44.650
whoever has used Chai
before inside of Mocha?

53
00:02:44.650 --> 00:02:49.370
Awesome, so they have chai.request, which
is basically a wrapper around SuperTest,

54
00:02:49.370 --> 00:02:51.920
you ever hear of SuperTest or SuperAgent?

55
00:02:51.920 --> 00:02:55.360
Okay, all it is is just a HTTP
mocking suite, that's all it is.

56
00:02:55.360 --> 00:03:01.440
SuperTest is like it basically allows you
to make assertions against an HTTP call.

57
00:03:01.440 --> 00:03:03.890
So you can make an HTTP call,
come back, and

58
00:03:03.890 --> 00:03:08.300
do the searches against its headers,
its status codes, its response.

59
00:03:08.300 --> 00:03:09.700
And what Chai did?

60
00:03:09.700 --> 00:03:13.240
Chai is an assertion library for
JavaScript.

61
00:03:13.240 --> 00:03:17.050
They made a wrapper around it that
you can hook Chai right into.

62
00:03:17.050 --> 00:03:20.410
So we're using Mocha to test, and
we're using Chai for assertions.

63
00:03:20.410 --> 00:03:23.810
So chai.request is just
a wrapper around SuperTest,

64
00:03:23.810 --> 00:03:28.690
which is just a wrapper around making
a searches around HTTP requests.

65
00:03:28.690 --> 00:03:32.650
So it's a lot of abstractions
tied into each other,

66
00:03:32.650 --> 00:03:35.860
by the end of the day,
we're able to make a request.

67
00:03:35.860 --> 00:03:37.890
And we can run assertions on that request.

68
00:03:37.890 --> 00:03:40.880
For instance, I made the request,
stored into the result, and

69
00:03:40.880 --> 00:03:43.540
I can check that that
result as a status of 200.

70
00:03:43.540 --> 00:03:47.972
I can check that the result is JSON,
stuff like that.

71
00:03:47.972 --> 00:03:49.003
So we're gonna do the same thing.

72
00:03:49.003 --> 00:03:55.873
So I'm gonna say okay, await chai.request,
api/$(resourceName), for GET.

73
00:03:55.873 --> 00:03:58.770
Well, this is get one, so
I need to put an ID here.

74
00:03:58.770 --> 00:04:02.040
The ID is gonna be whatever newDoc.id is.

75
00:04:03.790 --> 00:04:08.190
And then, I need to set authorization
because authorization is on by default.

76
00:04:08.190 --> 00:04:11.580
So this jwt right here is generated for
your above,

77
00:04:11.580 --> 00:04:12.660
so you don't have to worry about it.

78
00:04:14.380 --> 00:04:16.450
And then now that that's there,
I'll grab the result, and

79
00:04:16.450 --> 00:04:17.780
then I'm gonna do some assertions on it.

80
00:04:17.780 --> 00:04:22.179
So if I did a update, or
I'm sorry, I'm doing a get one,

81
00:04:22.179 --> 00:04:27.830
I expect that the results to be very
similar to this newDoc right here.

82
00:04:27.830 --> 00:04:31.130
Because this newDoc is the creation,
and now I'm doing a get one to

83
00:04:31.130 --> 00:04:34.360
actually get that newDoc, so
they should be very similar.

84
00:04:34.360 --> 00:04:35.910
So we'll run these.

85
00:04:35.910 --> 00:04:38.404
I'm gonna console.log the results so
I can see what the body looks like.

86
00:04:41.732 --> 00:04:44.860
&gt;&gt; Scott Moss: And we'll put a .only
here to only run this block.

87
00:04:46.720 --> 00:04:48.120
And then we'll test our code.

88
00:04:49.330 --> 00:04:49.929
Go away.

89
00:04:57.400 --> 00:04:59.540
&gt;&gt; Scott Moss: Cool, so
it looks like it worked.

90
00:04:59.540 --> 00:05:01.260
Wow, what?

91
00:05:01.260 --> 00:05:02.740
Yeah, it logged one for every single one.

92
00:05:02.740 --> 00:05:07.370
So we get a response,
which is this huge thing.

93
00:05:07.370 --> 00:05:09.190
Really all I want is the body.

94
00:05:09.190 --> 00:05:10.860
Well, basically, that's gonna be our test.

95
00:05:10.860 --> 00:05:11.750
This one should be passing.

96
00:05:11.750 --> 00:05:15.310
We need to write more granular test, check
to make sure the thing that's coming back

97
00:05:15.310 --> 00:05:17.980
is actually the thing have some
of the property of it right now.

98
00:05:17.980 --> 00:05:20.010
But you can see, that's passing.

99
00:05:20.010 --> 00:05:23.890
That one test that I wrote right here,
generated three tests,

100
00:05:23.890 --> 00:05:25.500
cuz it made it for each model.

101
00:05:25.500 --> 00:05:26.580
Each model is using this.

102
00:05:26.580 --> 00:05:30.251
So you can see, it generated a GET
/playlist, GET /song, GET /user for

103
00:05:30.251 --> 00:05:30.780
each one.

104
00:05:30.780 --> 00:05:36.400
And it's actually gonna be called,
yeah, get resourceName, yeah.

105
00:05:36.400 --> 00:05:38.860
So you can see it's working pretty good.

106
00:05:38.860 --> 00:05:41.397
Should get one song, should get one user,
should get one playlist.

107
00:05:45.283 --> 00:05:48.890
&gt;&gt; Scott Moss: And
then you would do the same thing for

108
00:05:48.890 --> 00:05:51.947
updating one and deleting one.

109
00:05:54.913 --> 00:05:56.796
&gt;&gt; Scott Moss: And
you would do that down here.

