WEBVTT

1
00:00:00.320 --> 00:00:01.463
&gt;&gt; Scott Moss: Anybody remember
what I said mutations were?

2
00:00:01.463 --> 00:00:04.384
&gt;&gt; Speaker 2: They're
updating the database.

3
00:00:04.384 --> 00:00:09.005
&gt;&gt; Scott Moss: Yeah, you want to mutate
your data source, or data sources, or

4
00:00:09.005 --> 00:00:10.470
whatever.

5
00:00:10.470 --> 00:00:13.300
Yeah, you basically wanna make
a change back there somewhere, so

6
00:00:13.300 --> 00:00:16.461
the equivalent to REST would be put,
post, delete, right?

7
00:00:19.900 --> 00:00:24.410
So use whenever you need to make a change
to a data source as in the word mutate,

8
00:00:24.410 --> 00:00:25.450
that's why it's called mutations.

9
00:00:25.450 --> 00:00:26.265
You're mutating a data source.

10
00:00:26.265 --> 00:00:30.527
If you're not gonna mutate a data source,
then you're probably only asking for

11
00:00:30.527 --> 00:00:32.880
data so use a query instead.

12
00:00:32.880 --> 00:00:36.140
Useful for post, put, delete requests.

13
00:00:36.140 --> 00:00:37.610
They usually take arguments,

14
00:00:37.610 --> 00:00:41.636
otherwise I wouldn't know how you
would you know unless you just had

15
00:00:41.636 --> 00:00:47.230
a persisted mutation that always
did the same mutation every time.

16
00:00:47.230 --> 00:00:48.230
But if that was the case,

17
00:00:49.380 --> 00:00:51.340
you wouldn't be mutating something
that was constantly changing.

18
00:00:51.340 --> 00:00:54.620
So I think most of the time,
all of these will always take arguments.

19
00:00:54.620 --> 00:00:56.790
I have never run into an example
where I did a mutation that did

20
00:00:56.790 --> 00:00:58.530
not take an argument.

21
00:00:58.530 --> 00:01:01.830
If you do, then you could probably
get a way to adjust a query.

22
00:01:01.830 --> 00:01:02.880
So think about that,

23
00:01:02.880 --> 00:01:06.290
think about what your client needs as
a response from the result of the input.

24
00:01:06.290 --> 00:01:11.470
This one's important because the community
really hasn't figured out what should

25
00:01:11.470 --> 00:01:13.720
you return from a mutation.

26
00:01:13.720 --> 00:01:15.550
That's because it depends on your app.

27
00:01:15.550 --> 00:01:18.370
Think about this,
we have a REST API, right?

28
00:01:18.370 --> 00:01:22.041
Now let's say from your to do app,
you issued a post request,

29
00:01:22.041 --> 00:01:23.605
you create it as a do item.

30
00:01:23.605 --> 00:01:25.983
What do you expect to get
back from that post request?

31
00:01:29.197 --> 00:01:29.893
&gt;&gt; Speaker 3: Creative resource.

32
00:01:29.893 --> 00:01:31.370
&gt;&gt; Speaker 4: The id?

33
00:01:31.370 --> 00:01:33.590
&gt;&gt; Scott Moss: The id,
you said the creative resource?

34
00:01:33.590 --> 00:01:35.720
You see what I mean, you never know,
it depends on what your app is.

35
00:01:35.720 --> 00:01:38.430
Maybe your to do app needs
the full to do back.

36
00:01:38.430 --> 00:01:39.200
Maybe it only needs the id.

37
00:01:39.200 --> 00:01:42.830
Maybe it needs to say okay, I don't know.

38
00:01:42.830 --> 00:01:44.030
That's what this is saying.

39
00:01:44.030 --> 00:01:48.180
Depending on what your app needs back,
just make sure you respond appropriately.

40
00:01:48.180 --> 00:01:49.540
Because a mutation does the same thing.

41
00:01:49.540 --> 00:01:51.870
You create something but
you also ask for something back.

42
00:01:51.870 --> 00:01:55.020
So it's like a creation and
a query at the same time.

43
00:01:55.020 --> 00:01:57.340
So although you will be creating
something, you need to say well,

44
00:01:57.340 --> 00:01:58.270
this is what I want back.

45
00:01:58.270 --> 00:01:59.920
So depending on your app,

46
00:01:59.920 --> 00:02:01.690
you need to make sure you're
getting back what you need back.

47
00:02:01.690 --> 00:02:03.350
I would say for
most clients using GraphQL,

48
00:02:03.350 --> 00:02:07.506
you'll probably need back at minimum
the id and the changes that you made.

49
00:02:07.506 --> 00:02:11.992
Because most GraphQL mutations probably
use something locally that uses caching,

50
00:02:11.992 --> 00:02:13.820
like Apollo or Relay.

51
00:02:13.820 --> 00:02:17.710
And to update your local cache, you need
to reference to the thing to update and

52
00:02:17.710 --> 00:02:20.750
that's usually consisted of
the id plus something else.

53
00:02:20.750 --> 00:02:23.000
And then you also need
the things that you updated.

54
00:02:23.000 --> 00:02:27.360
Because most likely that cache
is reflecting what's on your UI.

55
00:02:27.360 --> 00:02:29.640
So if you don't update that cache
with what you just updated or

56
00:02:29.640 --> 00:02:32.610
what you just created,
then now your UI is out of date.

57
00:02:32.610 --> 00:02:37.640
So most likely you would need the id
plus the things you updated, minimally.

58
00:02:37.640 --> 00:02:39.300
Ideally you would just ask back for
the whole thing.

59
00:02:39.300 --> 00:02:41.760
Just give me back the whole thing, the
whole thing, even stuff I didn't update.

60
00:02:41.760 --> 00:02:42.261
Just give me back the whole object.

61
00:02:42.261 --> 00:02:44.510
So that's what I would say.

62
00:02:45.790 --> 00:02:49.370
You can only do one mutation at a time,
and you might be asking like okay,

63
00:02:49.370 --> 00:02:50.960
we can only do one create a time.

64
00:02:50.960 --> 00:02:52.410
Actually, you could do more
than one create at a time,

65
00:02:52.410 --> 00:02:53.140
I forgot to mention that.

66
00:02:54.220 --> 00:02:56.871
And what that looks like is,
it's not really that complicated.

67
00:02:56.871 --> 00:02:59.630
It's basically saying you could do this,
so

68
00:02:59.630 --> 00:03:04.200
if I'm doing a query of allPlaylists,
let's just keep it simple.

69
00:03:04.200 --> 00:03:07.490
I could also, right underneath it,
I could say, I wanna do Song too.

70
00:03:12.873 --> 00:03:14.749
&gt;&gt; Scott Moss: And
then I also wanna do allSongs.

71
00:03:21.021 --> 00:03:22.460
&gt;&gt; Scott Moss: You could do that.

72
00:03:22.460 --> 00:03:24.740
And obviously I get an error
because stuff's messed up.

73
00:03:24.740 --> 00:03:25.801
This one's messed up right here.

74
00:03:27.623 --> 00:03:28.790
&gt;&gt; Scott Moss: There we go.

75
00:03:28.790 --> 00:03:29.812
So you can do more than
one query in one query.

76
00:03:29.812 --> 00:03:31.660
Does that make sense?

77
00:03:31.660 --> 00:03:33.938
This is one request that I did and
I did multiple queries.

78
00:03:33.938 --> 00:03:38.100
And they're all based off the name.

79
00:03:38.100 --> 00:03:40.460
So again, you could alias these and
say these are the playlists.

80
00:03:43.927 --> 00:03:44.692
&gt;&gt; Scott Moss: These are the songs.

81
00:03:44.692 --> 00:03:50.637
And then with that when you run this,
&gt;&gt; Scott Moss: You'll

82
00:03:50.637 --> 00:03:53.930
get playlists and songs, pretty cool.

83
00:03:53.930 --> 00:03:55.150
So you can't do this with mutations.

84
00:03:55.150 --> 00:03:56.400
You can only do one mutation.

85
00:03:56.400 --> 00:03:57.079
You can't do many of them.

86
00:03:58.200 --> 00:04:00.910
And they must also have resolvers.

87
00:04:00.910 --> 00:04:03.060
So they're not different than queries,

88
00:04:03.060 --> 00:04:05.120
you also still need to find
some way to resolve these.

89
00:04:05.120 --> 00:04:08.060
Because one, you need to mutate
the thing you're trying to mutate,

90
00:04:08.060 --> 00:04:11.600
and then you also need to send back
what the client is asking for.

91
00:04:12.780 --> 00:04:14.099
So they also have to have resolvers.

92
00:04:14.099 --> 00:04:18.061
I'm gonna walk you through how to make
a mutation from the client's perspective.

93
00:04:18.061 --> 00:04:22.028
Then we'll walk through how to create
a mutation on the schema perspective and

94
00:04:22.028 --> 00:04:24.500
then you'll create some mutations.

95
00:04:24.500 --> 00:04:27.040
And then from there,
you should be able to come in graphical,

96
00:04:27.040 --> 00:04:32.270
create some data, and query some data yes?

97
00:04:32.270 --> 00:04:34.120
&gt;&gt; Speaker 5: So if you do multiple
queries and one of them returns an error,

98
00:04:34.120 --> 00:04:36.350
do you get data for the one that
was successful and an error for

99
00:04:36.350 --> 00:04:38.260
the one that wasn't?

100
00:04:38.260 --> 00:04:41.050
&gt;&gt; Scott Moss: It depends on your
set up by default, you should,

101
00:04:41.050 --> 00:04:44.480
so let's go back to what I had here.

102
00:04:46.090 --> 00:04:50.820
So this one is definitely going to throw
an error because this is not a real id.

103
00:04:51.920 --> 00:04:54.360
And right now it's saying no,
you don't get anything.

104
00:04:54.360 --> 00:04:56.690
So I guess by default,
you're not just gonna get anything,

105
00:04:56.690 --> 00:04:58.160
it's more like a transaction.

106
00:04:58.160 --> 00:05:00.286
Where it's like in a database
if you roll a transaction,

107
00:05:00.286 --> 00:05:01.982
if one thing fails it
completely just stops.

108
00:05:01.982 --> 00:05:06.340
So in this case, we have a error from this
one query, so the whole thing errored.

109
00:05:06.340 --> 00:05:09.644
You could prevent this if you want,
it's totally up to you, but yeah,

110
00:05:09.644 --> 00:05:13.008
I guess depending on our implementation
using a Apollo GraphQL, yeah,

111
00:05:13.008 --> 00:05:14.957
you get one error, everything's done.

