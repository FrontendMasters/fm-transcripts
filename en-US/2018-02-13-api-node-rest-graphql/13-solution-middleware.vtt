WEBVTT

1
00:00:00.000 --> 00:00:02.821
&gt;&gt; Scott Moss: So
let's talk about the global middleware.

2
00:00:02.821 --> 00:00:05.964
So inside this middleware file,
if you use the bodyParser.

3
00:00:05.964 --> 00:00:09.879
You can use them in any order you want,
but basically, using the bodyParser,

4
00:00:09.879 --> 00:00:13.854
you can say app.use, and you can setup
that bodyParser middleware like this,

5
00:00:13.854 --> 00:00:16.017
urlencoded({extended: true})).

6
00:00:16.017 --> 00:00:21.269
Basically, what this is allowing us to do,
this is middleware

7
00:00:21.269 --> 00:00:27.827
where this middleware is going to format
the query string for us, basically.

8
00:00:27.827 --> 00:00:31.001
If you pass in the query stream like,
this is your API.

9
00:00:33.649 --> 00:00:35.741
&gt;&gt; Scott Moss: Like this, right?

10
00:00:35.741 --> 00:00:42.575
thing=1, other=two, stuff like that.

11
00:00:42.575 --> 00:00:46.966
It'll format that so
we can access it on request.params.

12
00:00:49.688 --> 00:00:51.021
&gt;&gt; Scott Moss: That's what it's doing.

13
00:00:51.021 --> 00:00:51.999
So you wanna be able to do that.

14
00:00:51.999 --> 00:00:55.043
Extended just means some extra
rules that they'll add for free.

15
00:00:55.043 --> 00:00:59.679
bodyParser.json is just basically
anything that's posted or

16
00:00:59.679 --> 00:01:05.276
put to the API gets treated like JSON
parsed and then given to us in req.body.

17
00:01:05.276 --> 00:01:06.966
This is where req.body comes from.

18
00:01:06.966 --> 00:01:09.405
Without this, we don't have req.body,
this is very important.

19
00:01:09.405 --> 00:01:10.816
So that's the global middleware.

20
00:01:10.816 --> 00:01:15.683
It is already attached globally here, so
I put setupMiddleware, I passed app in,

21
00:01:15.683 --> 00:01:17.711
and it's like a mix-in, right?

22
00:01:17.711 --> 00:01:18.912
It just mixes the middleware in.

23
00:01:18.912 --> 00:01:19.986
It doesn't need to return anything.

24
00:01:19.986 --> 00:01:22.475
I mean, you can return the app if you
want, but it doesn't really matter.

25
00:01:22.475 --> 00:01:26.245
app.use just mixes it in,
so it's up to you.

26
00:01:26.245 --> 00:01:32.292
And then down here for the API I used.

27
00:01:32.292 --> 00:01:36.434
Yeah, so I didn't go in and
specifically say you could do this, but

28
00:01:36.434 --> 00:01:39.936
if you experimented,
you could've attempted to do it.

29
00:01:39.936 --> 00:01:45.428
But basically,
if we go look at the, where we at?

30
00:01:45.428 --> 00:01:46.309
There we go.

31
00:01:46.309 --> 00:01:49.037
modules/auth, so
we're gonna use the auth stuff here.

32
00:01:49.037 --> 00:01:53.056
I have an array down here that has
two middleware inside of them.

33
00:01:53.056 --> 00:01:56.477
One is called decodeToken,
one is called getFreshUser.

34
00:01:56.477 --> 00:01:59.356
You don't have to use getFreshUser,
all you have to use is decodeToken.

35
00:01:59.356 --> 00:02:02.975
This is for later when we get into
models which I think is next.

36
00:02:02.975 --> 00:02:05.588
Because in order to understand
what getFreshUser is doing,

37
00:02:05.588 --> 00:02:07.342
you need to understand how models work.

38
00:02:07.342 --> 00:02:09.998
So I left it out on this exercise, but if
you just put the protect array in there,

39
00:02:09.998 --> 00:02:10.803
you're totally fine.

40
00:02:10.803 --> 00:02:14.463
But then that's what I'm saying is
middleware can also be an array because we

41
00:02:14.463 --> 00:02:15.660
can come inside of here.

42
00:02:15.660 --> 00:02:19.210
And we can pass an endless
amount of functions.

43
00:02:19.210 --> 00:02:21.652
It doesn't matter,
they're all gonna run serially.

44
00:02:21.652 --> 00:02:28.028
So if I wanted to run this function,
if I can type, there we go.

45
00:02:28.028 --> 00:02:29.864
I've got so
much adrenaline from the bar fight.

46
00:02:29.864 --> 00:02:31.613
[LAUGH]
&gt;&gt; Student: [LAUGH]

47
00:02:31.613 --> 00:02:32.348
&gt;&gt; Scott Moss: And I run this function,

48
00:02:32.348 --> 00:02:33.576
you can run as many functions as you want.

49
00:02:33.576 --> 00:02:38.756
Or you could just pass in an array,
which is exactly what protect was.

50
00:02:38.756 --> 00:02:39.971
It was an array of middleware.

51
00:02:43.045 --> 00:02:44.642
&gt;&gt; Scott Moss: So you can pass in
an array which cleans things up.

52
00:02:44.642 --> 00:02:47.694
So if you need to share middleware stacks
across different route definitions,

53
00:02:47.694 --> 00:02:48.339
you can do that.

54
00:02:48.339 --> 00:02:52.819
So, I want this chain of middleware
shared across those routes.

55
00:02:52.819 --> 00:02:55.918
I'm gonna put them in an array so I can
just put that array in different places.

56
00:02:55.918 --> 00:02:58.592
Versus writing them all over again,
over and over and over again.

57
00:02:58.592 --> 00:03:01.253
You can also compose your middleware.

58
00:03:01.253 --> 00:03:05.152
So you could have your middleware compose
themselves, which is something different,

59
00:03:05.152 --> 00:03:08.367
but what that will look like is basically,
instead of returning an array

60
00:03:08.367 --> 00:03:12.053
of middleware, I would have a middleware
that calls another middleware that calls

61
00:03:12.053 --> 00:03:14.558
another middleware,
that calls another middleware.

62
00:03:14.558 --> 00:03:18.487
And I would just place that one entry
middleware as my main middleware.

63
00:03:18.487 --> 00:03:20.830
It's kinda crazy, but
yeah, you can do that.

64
00:03:20.830 --> 00:03:22.713
It depends on how you wanna do it.

65
00:03:22.713 --> 00:03:24.643
You want an array,
you wanna pass them in line.

66
00:03:24.643 --> 00:03:29.382
You wanna do anonymous functions,
you want a composable middleware.

67
00:03:29.382 --> 00:03:32.010
Express doesn't care,
do whatever you want.

68
00:03:32.010 --> 00:03:34.824
I chose to be slightly explicit and
used the arrays.

69
00:03:34.824 --> 00:03:38.570
Composable middleware is a little advance,
but basically,

70
00:03:38.570 --> 00:03:43.251
you're taking middleware and you're
calling next and you're extending it

71
00:03:43.251 --> 00:03:47.730
to another middleware right inside
the middleware which is kinda crazy.

72
00:03:47.730 --> 00:03:51.056
If we just take a quick look
at what's going on here.

73
00:03:51.056 --> 00:03:52.152
Who here has used JSON Web Tokens?

74
00:03:52.152 --> 00:03:55.818
Okay, JSON Web Tokens,
at the end of the day,

75
00:03:55.818 --> 00:04:00.056
it's a unique string that's
signed on your server.

76
00:04:00.056 --> 00:04:04.963
It's a unique string that basically
when decoded turns back into

77
00:04:04.963 --> 00:04:07.289
the object that was signed on.

78
00:04:07.289 --> 00:04:12.169
So basically, if I have an object like,
I have a user whose id is one.

79
00:04:12.169 --> 00:04:14.867
If I get a JSON Web Token from this,

80
00:04:14.867 --> 00:04:19.347
I might get back some crazy
looking string here, right?

81
00:04:19.347 --> 00:04:23.747
That string the client would
use to send request to the API.

82
00:04:23.747 --> 00:04:27.949
The API would will take that string,
decode the token and verify it,

83
00:04:27.949 --> 00:04:30.567
and it would get back this object, right?

84
00:04:30.567 --> 00:04:31.460
It'll get this object back.

85
00:04:31.460 --> 00:04:34.456
And then with that object I went, let me
go see there's the user ID I wanted here.

86
00:04:34.456 --> 00:04:35.685
And that's how we do authentication.

87
00:04:35.685 --> 00:04:37.370
It's a stateless way to do authentication.

88
00:04:37.370 --> 00:04:39.236
So that's what we're doing here.

89
00:04:39.236 --> 00:04:44.407
And basically, this decodeToken,
what it's doing,

90
00:04:44.407 --> 00:04:50.246
it is checking for the token in
the headers or the query string.

91
00:04:50.246 --> 00:04:52.788
And then it runs this
checkToken middleware,

92
00:04:52.788 --> 00:04:57.166
which is something we have not created
because it's given to us by expressJwt.

93
00:04:57.166 --> 00:05:00.546
You pass in the secret,
the secret is how you sign the token and

94
00:05:00.546 --> 00:05:02.236
also how you decode the token.

95
00:05:04.711 --> 00:05:09.372
&gt;&gt; Scott Moss: And then refresh user all
it does is, after decodeToken runs this

96
00:05:09.372 --> 00:05:15.067
function right here, checkToken,
it attaches that object to the req.user.

97
00:05:15.067 --> 00:05:21.695
Whatever the value of this token is,
it's going to attach it to a req.user.

98
00:05:21.695 --> 00:05:24.136
So inside of getFreshUser
I can get req.user.id,

99
00:05:24.136 --> 00:05:26.919
look in the database to see if
there's a user.id in there.

100
00:05:26.919 --> 00:05:30.519
If it's not, you're unauthorized.

101
00:05:30.519 --> 00:05:34.425
If it is, continue to test if that's
a req.user and then call next.

102
00:05:34.425 --> 00:05:36.853
So it's a little complicated because we
haven't talked about database queries, and

103
00:05:36.853 --> 00:05:38.216
that's why I don't want
to talk about this, but

104
00:05:38.216 --> 00:05:39.697
that's what's happening
inside a getFreshUser.

105
00:05:39.697 --> 00:05:43.110
This will make more sense when we go
back over databases in the next one, and

106
00:05:43.110 --> 00:05:46.263
you can also look at the comments
of exactly what's happening here.

107
00:05:46.263 --> 00:05:49.588
It seems complicated, but
it's not as complicated as it looks.

108
00:05:49.588 --> 00:05:52.823
It's just a lot of comments here that
makes it look really big, but it's not.

109
00:05:52.823 --> 00:05:55.518
So that's what that's doing.

110
00:05:55.518 --> 00:05:59.603
So to verify that, now that I have protect
in front of here, if I try to hit the API,

111
00:05:59.603 --> 00:06:03.590
if anybody's tried this so far,
you'll probably run into a problem, right?

112
00:06:03.590 --> 00:06:06.040
Has anybody got to this point?

113
00:06:06.040 --> 00:06:08.806
And what's the error that you see?

114
00:06:08.806 --> 00:06:09.897
&gt;&gt; Student: Unauthorized.

115
00:06:09.897 --> 00:06:12.454
&gt;&gt; Scott Moss: Right,
you'll see UnauthorizedError and

116
00:06:12.454 --> 00:06:15.777
it will say,
No authorization token was found, right?

117
00:06:15.777 --> 00:06:17.859
Yep, that's exactly what
it was supposed to do.

118
00:06:17.859 --> 00:06:19.351
There was no authorization token found.

119
00:06:19.351 --> 00:06:21.604
It completely-
&gt;&gt; Student: Would that error be handled by

120
00:06:21.604 --> 00:06:23.195
an error handler, though?

121
00:06:23.195 --> 00:06:25.747
&gt;&gt; Scott Moss: Should that error
be handled by error handler.

122
00:06:25.747 --> 00:06:27.779
Well, it depends on where
you put your error handler.

123
00:06:27.779 --> 00:06:29.278
For me, no, my error handler is not here.

124
00:06:29.278 --> 00:06:31.137
I don't have a global error handler.

125
00:06:31.137 --> 00:06:33.828
But if you setup a global error handler,

126
00:06:33.828 --> 00:06:36.767
cuz we'll see where I
put my error handler.

127
00:06:36.767 --> 00:06:42.277
But if you setup one here,
app.use, let's make one here.

128
00:06:42.277 --> 00:06:46.299
err, req, res, and then next,

129
00:06:46.299 --> 00:06:51.202
even though we probably never use next.

130
00:06:51.202 --> 00:06:53.636
Then I can console.error for error.

131
00:06:53.636 --> 00:06:58.805
So say err.stack, and then res.json,

132
00:06:58.805 --> 00:07:02.651
or status(401).send.

133
00:07:06.005 --> 00:07:10.407
&gt;&gt; Scott Moss: So you can do that.

134
00:07:10.407 --> 00:07:12.312
And let's try it again.

135
00:07:16.112 --> 00:07:19.650
&gt;&gt; Scott Moss: So now,
if I run this, yeah, now it will.

136
00:07:19.650 --> 00:07:21.741
This is like nope, not gonna happen.

137
00:07:21.741 --> 00:07:25.367
And you need to see a console.error.stack
just to get the stack of it for

138
00:07:25.367 --> 00:07:28.410
my login purposes, but yeah,
it totally got handled here.

139
00:07:28.410 --> 00:07:31.224
But where I put my error handling,

140
00:07:31.224 --> 00:07:35.796
I made error handling specifically for
the API router.

141
00:07:35.796 --> 00:07:39.256
I think you would probably
handle errors differently for

142
00:07:39.256 --> 00:07:42.436
your API routes than you would for
any other routes.

143
00:07:42.436 --> 00:07:46.913
So the error handle that I made was
specifically for apiErrorHandler.

144
00:07:46.913 --> 00:07:49.049
So I mean, it does the same thing.

145
00:07:49.049 --> 00:07:53.080
Calls the stack, 500, but
the difference is where I placed it.

146
00:07:53.080 --> 00:07:57.645
Because I want it to log for the API,
I place it on the restRouter,

147
00:07:57.645 --> 00:07:59.803
here, at the end, all right?

148
00:07:59.803 --> 00:08:02.750
Another thing to mention about error
handlers, is they have to go at the end.

149
00:08:02.750 --> 00:08:06.006
If I did this, it would never run, right?

150
00:08:06.006 --> 00:08:07.310
Because the errors bubble up.

151
00:08:07.310 --> 00:08:10.599
When an error's thrown in here,
it's gonna be like, cool.

152
00:08:10.599 --> 00:08:12.830
Cuz you called next, right?

153
00:08:12.830 --> 00:08:14.630
When you called next,
you threw an error in.

154
00:08:14.630 --> 00:08:16.353
You sent it to the next thing.

155
00:08:16.353 --> 00:08:19.866
But if this is before it that
means it's not after it.

156
00:08:19.866 --> 00:08:21.637
Therefore, you cannot go next to it.

157
00:08:21.637 --> 00:08:23.291
It's previous, right?

158
00:08:23.291 --> 00:08:26.640
So it needs to be next in order for
you to bubble the error up.

159
00:08:26.640 --> 00:08:29.328
So you need to make sure the error
handler's always at the bottom.

160
00:08:29.328 --> 00:08:30.869
Otherwise, if won't work.

161
00:08:30.869 --> 00:08:33.445
So if you did that and you're like,
why this is not working?

162
00:08:33.445 --> 00:08:34.377
It's probably cuz you put it at the top.

163
00:08:34.377 --> 00:08:38.597
I know people will probably
get often like, what is this?

164
00:08:38.597 --> 00:08:40.443
It seems cool, let's go over this.

165
00:08:40.443 --> 00:08:45.448
When we got time tomorrow,
we can go over this cuz in fact,

166
00:08:45.448 --> 00:08:50.351
depending on how we do it with
GraphQL tomorrow, we may or

167
00:08:50.351 --> 00:08:52.411
may not use it this way.

168
00:08:52.411 --> 00:08:55.131
It's kinda hard to explain with GraphQL,
but yeah,

169
00:08:55.131 --> 00:08:56.950
we can get into this in more detail.

170
00:08:56.950 --> 00:09:00.042
There's some features here like
disableAuth that I'm not talking about,

171
00:09:00.042 --> 00:09:01.888
but we'll get into that
later today as well.

172
00:09:01.888 --> 00:09:05.012
But yeah, auth is not as hard as it seems.

173
00:09:05.012 --> 00:09:07.254
I mean, at the end of the day
nobody's stuff is safe.

174
00:09:07.254 --> 00:09:11.364
[LAUGH] Nobody's safe
at the end of the day.

175
00:09:11.364 --> 00:09:12.511
Let's be real.

