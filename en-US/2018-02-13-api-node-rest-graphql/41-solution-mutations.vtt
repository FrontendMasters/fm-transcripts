WEBVTT

1
00:00:03.490 --> 00:00:07.650
&gt;&gt; Scott Moss: Welcome back,
I hope everybody had enough time to

2
00:00:07.650 --> 00:00:10.150
work on the mutations and
gather some understanding of it.

3
00:00:10.150 --> 00:00:13.350
If you didn't finish that's totally
fine that's why we have the solution.

4
00:00:13.350 --> 00:00:15.480
Ask me questions,
we'll walk through it and

5
00:00:15.480 --> 00:00:17.000
we'll figure out how this
stuff works together.

6
00:00:18.000 --> 00:00:20.040
Was there anybody out there
that was able to complete this,

7
00:00:20.040 --> 00:00:23.430
because there was some
Sme gotchas in there.

8
00:00:23.430 --> 00:00:25.640
There were some wrenches I threw at you.

9
00:00:25.640 --> 00:00:27.785
I wonder if anybody got
through all of them.

10
00:00:27.785 --> 00:00:30.280
No?

11
00:00:30.280 --> 00:00:30.850
All right, okay.

12
00:00:32.160 --> 00:00:34.305
That's good, or maybe it's bad.

13
00:00:34.305 --> 00:00:37.230
[LAUGH] Let's find out.

14
00:00:37.230 --> 00:00:42.220
So if you want to follow along on the
solution just pull down the solution from

15
00:00:42.220 --> 00:00:43.190
Upstream.

16
00:00:43.190 --> 00:00:45.670
I made one change,
it's not a big change but

17
00:00:45.670 --> 00:00:49.156
I want to simplify
somethings a little bit.

18
00:00:49.156 --> 00:00:54.430
So again [INAUDIBLE]
associated

19
00:00:54.430 --> 00:00:58.160
with this right now,
specifically of how you would name these.

20
00:00:58.160 --> 00:01:00.310
So you could have named
them whatever you wanted,

21
00:01:00.310 --> 00:01:05.070
you could have, use whatever
technique you want to pass arguments.

22
00:01:05.070 --> 00:01:06.556
It's totally up to you because,

23
00:01:06.556 --> 00:01:09.490
at the end of the day,
you still have to gravkill's strictness.

24
00:01:09.490 --> 00:01:11.270
The strictness is whatever you create.

25
00:01:11.270 --> 00:01:14.510
You create that level of what's going
to be and what's not going to be.

26
00:01:14.510 --> 00:01:17.370
At the end of the day, you could have
named it and did whatever you want.

27
00:01:17.370 --> 00:01:18.810
As long as you got the desired result.

28
00:01:18.810 --> 00:01:21.390
As long as the resolver
resolved the right value,

29
00:01:21.390 --> 00:01:23.950
how you got there It's totally up to you.

30
00:01:23.950 --> 00:01:24.954
Does that make sense?

31
00:01:26.837 --> 00:01:31.076
&gt;&gt; Scott Moss: Okay, so
let's start with the song resolver, and

32
00:01:31.076 --> 00:01:34.650
we're looking at mutations here.

33
00:01:34.650 --> 00:01:41.798
So the first thing is, let me pull up the,
&gt;&gt; Scott Moss: Song.graphql over here and

34
00:01:41.798 --> 00:01:45.145
we'll look at the song result over here.

35
00:01:47.170 --> 00:01:50.319
&gt;&gt; Scott Moss: So for new song we're
just gonna use the create method on

36
00:01:50.319 --> 00:01:54.170
the Mongoose model song and
we're gonna pass it into input.

37
00:01:54.170 --> 00:01:58.740
We can pass into input there because,
if we go look at the input for

38
00:01:58.740 --> 00:02:01.772
a new song on GraphQL,

39
00:02:01.772 --> 00:02:08.660
it's basically the desired
shape that we need.

40
00:02:08.660 --> 00:02:11.410
There are some things
missing like this new song.

41
00:02:11.410 --> 00:02:15.180
We know if we look at the song model,
for instance song model here,

42
00:02:15.180 --> 00:02:20.110
we know that the title is required where
the URL is required and that's about it.

43
00:02:20.110 --> 00:02:26.620
So if someone was to create a new song and
they always supplied an album,

44
00:02:26.620 --> 00:02:31.310
and not a URL or a title,
it would pass GraphQL, cuz it's fine.

45
00:02:31.310 --> 00:02:35.420
Cuz GraphQL's like yeah, any of these
is fine, and none of them are required.

46
00:02:35.420 --> 00:02:38.570
But it would fail on Mongo because
it's like, we need a title.

47
00:02:39.660 --> 00:02:40.700
Does that make sense?

48
00:02:40.700 --> 00:02:43.690
&gt;&gt; Speaker 2: Don't we require rating and
favorite as well though?

49
00:02:43.690 --> 00:02:45.070
On the song type?

50
00:02:45.070 --> 00:02:46.140
&gt;&gt; Scott Moss: Let's go look.

51
00:02:46.140 --> 00:02:51.300
Song model, or
are you talking about the type up here?

52
00:02:51.300 --> 00:02:53.240
&gt;&gt; Speaker 2: On the right,
in the song.graph scroll up.

53
00:02:53.240 --> 00:02:55.660
&gt;&gt; Scott Moss: This here, the song type.

54
00:02:56.770 --> 00:02:59.760
So this is when you're
requiring it though.

55
00:02:59.760 --> 00:03:01.070
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: Yeah, this would also

56
00:03:01.070 --> 00:03:02.550
break, but
it wouldn't even get here first.

57
00:03:02.550 --> 00:03:04.530
It wouldn't even save it in the database.

58
00:03:04.530 --> 00:03:09.850
When you try to go save it in
the resolver, song.resolver,

59
00:03:09.850 --> 00:03:14.360
this would break, because they're like,
where's the title in URL?

60
00:03:14.360 --> 00:03:14.950
So that would break.

61
00:03:14.950 --> 00:03:19.170
So you need to make sure your schema
is synced up with your, you need to

62
00:03:19.170 --> 00:03:23.080
make sure your graph [INAUDIBLE] schema
is synced up with your database schema.

63
00:03:23.080 --> 00:03:24.260
And using the same validation.

64
00:03:24.260 --> 00:03:27.600
So either you take care of
the validations here while doing this or

65
00:03:27.600 --> 00:03:30.520
you take care of the validation
inside your resolver.

66
00:03:30.520 --> 00:03:33.820
I'm a sanitize this input and
make sure it's got the right stuff.

67
00:03:33.820 --> 00:03:36.390
Maybe set some defaults
before I save in a database.

68
00:03:36.390 --> 00:03:39.260
But if you sync it up with your schemas,

69
00:03:39.260 --> 00:03:40.770
then you get to pass this
straight through like this.

70
00:03:40.770 --> 00:03:41.708
You get a nice clean resolver.

71
00:03:43.934 --> 00:03:44.750
&gt;&gt; Scott Moss: Does that make sense?

72
00:03:47.310 --> 00:03:47.810
Okay, cool.

73
00:03:49.040 --> 00:03:51.390
The other one we had was update song.

74
00:03:51.390 --> 00:03:54.060
I don't think we got to find by ID and
update yesterday,

75
00:03:54.060 --> 00:03:56.580
because we used a different
method yesterday due to updating.

76
00:03:56.580 --> 00:03:58.610
We used like merging, and
then it's called dot save.

77
00:03:58.610 --> 00:04:01.520
So we didn't get to the find by IDs,
or find by ones.

78
00:04:01.520 --> 00:04:04.200
I know I talked about it a little bit,
but I don't think we did it in practice.

79
00:04:04.200 --> 00:04:08.390
So, this one might have been a little
tough, depending on what you were doing.

80
00:04:08.390 --> 00:04:10.910
But if you did some research on mongo,
or Mongoose,

81
00:04:10.910 --> 00:04:15.280
you would have found the find by ID or
at least to find one update.

82
00:04:15.280 --> 00:04:18.970
And basically what I'm doing here,
this looks kind of crazy, right?

83
00:04:18.970 --> 00:04:19.910
Who's seen this before?

84
00:04:23.260 --> 00:04:24.900
I'm basically popping off the ID property,

85
00:04:24.900 --> 00:04:28.250
and putting the rest of the stuff in
an object in another object called update.

86
00:04:28.250 --> 00:04:30.590
The reason I'm doing this is,
I'm just trying to be safe.

87
00:04:30.590 --> 00:04:34.460
Because the way it find my ID and
update works, is it takes an ID,

88
00:04:34.460 --> 00:04:36.960
it uses that to find the document.

89
00:04:36.960 --> 00:04:40.110
Once it finds it,
it'll issue the update with this object.

90
00:04:40.110 --> 00:04:42.050
I don't want the ID to be there.

91
00:04:42.050 --> 00:04:42.610
When I update.

92
00:04:42.610 --> 00:04:45.920
I know Mongo ignores id but
this is just me being safe.

93
00:04:45.920 --> 00:04:47.180
What if the id was something different?

94
00:04:47.180 --> 00:04:49.070
I don't want the ids to change, right?

95
00:04:49.070 --> 00:04:52.700
Obviously I think Mongo is a smart enough
database to not change the ids on you,

96
00:04:52.700 --> 00:04:53.960
it kind of just ignores it.

97
00:04:53.960 --> 00:04:56.810
But this is just me saying,
I don't wanna put the id field,

98
00:04:56.810 --> 00:05:01.480
so you might have just did like
input id here and put in input.

99
00:05:01.480 --> 00:05:02.520
That's totally fine.

100
00:05:02.520 --> 00:05:03.530
That would totally work.

101
00:05:03.530 --> 00:05:06.240
Cuz I think Mongoose sanitizes that but

102
00:05:06.240 --> 00:05:08.900
again, I'm just making sure
that that doesn't happen.

103
00:05:08.900 --> 00:05:13.720
If, because actually,
what's happening underneath,

104
00:05:13.720 --> 00:05:18.170
Mongoose, or I'm sorry,
Mongo uses underscore ID for its ID field.

105
00:05:18.170 --> 00:05:19.480
They don't have a dot ID.

106
00:05:19.480 --> 00:05:24.170
That's a virtual field that you
get when you create a database.

107
00:05:24.170 --> 00:05:28.700
So if you were to update this with ID and
then you had this option here called like

108
00:05:28.700 --> 00:05:33.210
upsert true, which means if
you can't find it, create it.

109
00:05:33.210 --> 00:05:35.680
Then it would create a field called ID,
you would have a bug.

110
00:05:35.680 --> 00:05:38.450
So that's why I'm popping
the ID off of the update and

111
00:05:38.450 --> 00:05:39.910
just passing in the stuff I wanna update.

112
00:05:39.910 --> 00:05:41.370
Does that make sense?

113
00:05:41.370 --> 00:05:42.980
There's a lot of other ways
you could get around this.

114
00:05:42.980 --> 00:05:47.880
You could just come into grab ql for
your song and be like, you know what?

115
00:05:47.880 --> 00:05:51.100
For an update, I'm not going
to put the ID on this object.

116
00:05:51.100 --> 00:05:53.090
What I'm going to do is,
I'm gong to have it take two arguments.

117
00:05:53.090 --> 00:05:58.100
It's going to take the ID, and then this
one is not going to have the ID on it.

118
00:05:58.100 --> 00:06:00.100
That way, I can just patch it straight
through and you can do that too.

119
00:06:00.100 --> 00:06:01.460
It's solely up to you.

120
00:06:01.460 --> 00:06:03.140
It's literally however you want to do it.

121
00:06:03.140 --> 00:06:05.946
You just need to follow it, but
that is the project I decided to do.

122
00:06:08.999 --> 00:06:10.200
&gt;&gt; Scott Moss: Does that make sense?

123
00:06:11.800 --> 00:06:14.200
Yeah, okay.

124
00:06:14.200 --> 00:06:17.870
So we got that and
then of course, we say, for

125
00:06:17.870 --> 00:06:21.110
this mutation we want to
add the new song field.

126
00:06:21.110 --> 00:06:24.410
Which when resolve will
return a song type and

127
00:06:24.410 --> 00:06:31.020
we want to make update song field which
when resolved will return a song type.

128
00:06:31.020 --> 00:06:32.410
This new true is key.

129
00:06:32.410 --> 00:06:35.190
This is basically saying
when I issue the update,

130
00:06:35.190 --> 00:06:37.340
give me the new document that was updated.

131
00:06:37.340 --> 00:06:40.870
By default it will only just give you
the old document with the still value.

132
00:06:40.870 --> 00:06:43.640
So if you don't put new true
here you won't get the updated

133
00:06:43.640 --> 00:06:45.748
document you will get
the previous document.

134
00:06:45.748 --> 00:06:46.730
So,that's very important.

135
00:06:48.720 --> 00:06:49.690
All right, so we got that.

136
00:06:49.690 --> 00:06:52.450
And then if we head over to playlist, and

137
00:06:52.450 --> 00:06:58.220
this is where some of the stuff comes
in where it's like, what is this?

138
00:06:58.220 --> 00:06:58.720
What is this?

139
00:07:00.750 --> 00:07:03.760
Let's go to playlist resolvers.

140
00:07:03.760 --> 00:07:04.810
We'll put that over here.

141
00:07:06.770 --> 00:07:09.568
So many things and
then we'll look at the playlist type.

142
00:07:09.568 --> 00:07:15.120
Okay, so let's just look at
the playlist type really quick.

143
00:07:15.120 --> 00:07:16.870
It has ID, title, song.

144
00:07:16.870 --> 00:07:20.220
So it's a song type, an array and
then favorite, which is a boolean.

145
00:07:21.220 --> 00:07:24.960
So if you were just to look at this,
you might assume that

146
00:07:27.700 --> 00:07:30.710
you would also pass in the song type.

147
00:07:30.710 --> 00:07:35.290
Or some variation of it of update
playlist and new playlist.

148
00:07:35.290 --> 00:07:38.600
And in your version you probably
seen new songwriter, probably right?

149
00:07:39.600 --> 00:07:41.720
Okay where did that come from?

150
00:07:41.720 --> 00:07:45.190
New song comes from song.graph
key artist new song right?

151
00:07:45.190 --> 00:07:49.860
Because if you put anything on the input,
it also has to like resolve to an input.

152
00:07:49.860 --> 00:07:51.100
So you couldn't put song here.

153
00:07:53.040 --> 00:07:54.000
Why couldn't you put song here?

154
00:07:54.000 --> 00:07:57.140
Well, because song is a type,
it's not an input so that would break.

155
00:07:57.140 --> 00:07:58.420
So you have to use an input,

156
00:07:58.420 --> 00:08:03.460
newSong is an input so that's why that was
there, and again, it's totally up to you.

157
00:08:03.460 --> 00:08:06.430
If you put new song there there are some
tradeoffs and that's what I had at first.

158
00:08:06.430 --> 00:08:07.300
That's why I made it change.

159
00:08:07.300 --> 00:08:10.130
I was like there's too much complexity
that I don't really wanna walk through.

160
00:08:10.130 --> 00:08:12.190
I actually prefer just to put the id.

161
00:08:12.190 --> 00:08:15.980
If you put NewSong there what you would
have to do, this is how it would work.

162
00:08:15.980 --> 00:08:20.320
If you put NewSong there, that means on
your client when you update a playlist or

163
00:08:20.320 --> 00:08:21.990
create a playlist and

164
00:08:21.990 --> 00:08:25.030
you also wanna attach songs to
it you'd be creating new songs.

165
00:08:25.030 --> 00:08:27.940
You wouldn't be attaching songs
that are already created,

166
00:08:27.940 --> 00:08:29.230
you'd be creating new songs, right?

167
00:08:29.230 --> 00:08:31.540
Because you would be
passing a new song object.

168
00:08:31.540 --> 00:08:33.710
So then inside the resolver
of this updated playlist,

169
00:08:33.710 --> 00:08:35.960
new playlist,
you have to loop through that songs array.

170
00:08:35.960 --> 00:08:38.040
And for each one of those,
create a new song,

171
00:08:38.040 --> 00:08:40.720
and then associate the IDs
with it in the database.

172
00:08:40.720 --> 00:08:43.830
It's a lot more complexity, and really
what you probably wanted to do was like,

173
00:08:43.830 --> 00:08:48.520
hey, I wanna add these songs that I
already have to this playlist, right?

174
00:08:48.520 --> 00:08:50.330
So in that case,
you would just need a reference to it,

175
00:08:50.330 --> 00:08:52.790
which in this case is just an ID for
the song.

176
00:08:52.790 --> 00:08:58.640
Because let's just double check one
more time on the playlist model,

177
00:08:58.640 --> 00:09:00.550
songs are just IDs.

178
00:09:00.550 --> 00:09:01.840
This allows it to pass
it straight through.

179
00:09:01.840 --> 00:09:03.790
We can just save that array
straight to the database,

180
00:09:03.790 --> 00:09:05.060
because songs is just an array of IDs.

181
00:09:05.060 --> 00:09:07.930
Does that make sense?

182
00:09:07.930 --> 00:09:10.170
Now if you go the other way where
you do pass in that object,

183
00:09:10.170 --> 00:09:11.090
those are the complexities.

184
00:09:11.090 --> 00:09:12.821
And realistically, from a US perspective,

185
00:09:12.821 --> 00:09:15.380
if you're building an app that
probably doesn't make any sense.

186
00:09:15.380 --> 00:09:18.420
You wouldn't be creating a song and
adding it to a playlist at the same time.

187
00:09:18.420 --> 00:09:21.710
You'll be adding a song that's already
created to a new playlist, most likely.

188
00:09:22.990 --> 00:09:25.500
Or updating a playlist with
a song that was already created.

189
00:09:25.500 --> 00:09:29.080
You most likely won't be creating
a song and a playlist at the same time.

190
00:09:29.080 --> 00:09:31.760
Unless you got some app that we
don't have yet, and you got,

191
00:09:31.760 --> 00:09:37.110
like some new music app,
that nobody has done before, I don't know.

192
00:09:37.110 --> 00:09:38.783
But realistically, probably passing IDs.

193
00:09:43.629 --> 00:09:45.233
&gt;&gt; Scott Moss: And then for
the new playlist input,

194
00:09:45.233 --> 00:09:48.510
it's basically the same thing as
the updated playlist input minus the ID.

195
00:09:48.510 --> 00:09:50.749
Because you don't need the ID
to make a new playlist.

196
00:09:52.620 --> 00:09:58.110
You do need a title though, so
that should be required, all right?

197
00:09:58.110 --> 00:10:03.960
And then for the mutations themselves,

198
00:10:03.960 --> 00:10:06.840
I have a new playlist,
and an update playlist.

199
00:10:06.840 --> 00:10:10.770
I should probably just call this
playlist from my convention.

200
00:10:10.770 --> 00:10:16.438
There we go and what this does is,
I'm just going to call that playlist.

201
00:10:16.438 --> 00:10:19.057
Come here.

202
00:10:23.388 --> 00:10:26.132
&gt;&gt; Scott Moss: There we go and basically,
I'm just making, just like we did with

203
00:10:26.132 --> 00:10:29.200
song, we have a mutation called
playlist that takes the input.

204
00:10:29.200 --> 00:10:31.150
Takes that new playlist,
returns that playlist and

205
00:10:31.150 --> 00:10:34.600
we're going to look at it right
here It does playlist.create.

206
00:10:34.600 --> 00:10:35.190
Pretty simple.

207
00:10:35.190 --> 00:10:37.310
Passes straight through,
just like we did and

208
00:10:37.310 --> 00:10:41.410
then for the update play list, takes
input, that takes an updated play list.

209
00:10:41.410 --> 00:10:45.481
Which is this type and because we
made that change for it to be an ID,

210
00:10:45.481 --> 00:10:48.996
we can also just pass it
straight through with a new true.

211
00:10:51.262 --> 00:10:55.110
&gt;&gt; Scott Moss: And we just assign
them here and we're good to go.

212
00:10:55.110 --> 00:10:55.940
We got our mutations.

213
00:10:57.710 --> 00:10:59.390
Now, for
everybody that was working on this,

214
00:10:59.390 --> 00:11:01.170
what was the thing that you were stuck on?

215
00:11:01.170 --> 00:11:03.277
The thing that was just like,
I'm just not getting?

216
00:11:06.346 --> 00:11:07.720
&gt;&gt; Scott Moss: Or
it was just not enough time?

217
00:11:07.720 --> 00:11:10.380
Like you knew what you were doing,
you just didn't have enough time?

218
00:11:10.380 --> 00:11:13.510
&gt;&gt; Speaker 3: I spent a lot of time
figuring out where you destructured

219
00:11:13.510 --> 00:11:15.640
the update into the [LAUGH] ID.

220
00:11:15.640 --> 00:11:16.440
Yeah, me too.

221
00:11:16.440 --> 00:11:17.890
&gt;&gt; Scott Moss: This right here?

222
00:11:17.890 --> 00:11:18.720
&gt;&gt; Speaker 3: Yeah.

223
00:11:18.720 --> 00:11:20.690
&gt;&gt; Scott Moss: Is it the syntax,
that's crazy?

224
00:11:20.690 --> 00:11:22.020
&gt;&gt; Speaker 3: Yeah,
I wasn't familiar with that.

225
00:11:22.020 --> 00:11:22.700
&gt;&gt; Scott Moss: It's really cool.

226
00:11:24.120 --> 00:11:25.540
&gt;&gt; Speaker 3: Okay.

227
00:11:25.540 --> 00:11:26.680
&gt;&gt; Scott Moss: It's pretty crazy.

228
00:11:26.680 --> 00:11:27.700
It's basically just like this.

229
00:11:27.700 --> 00:11:35.590
It's basically saying I'm going to
make a new object called update and

230
00:11:35.590 --> 00:11:43.180
it's going to equal everything on input,
like minus the id.

231
00:11:43.180 --> 00:11:44.130
That's basically what it is, right?

232
00:11:44.130 --> 00:11:46.640
So it's like I want everything
on input minus the id.

233
00:11:46.640 --> 00:11:49.710
That's what it's doing on-the-fly.

234
00:11:49.710 --> 00:11:51.673
&gt;&gt; Speaker 3: But
it's also putting id in [CROSSTALK]?

235
00:11:51.673 --> 00:11:52.433
&gt;&gt; Scott Moss: In another variable,

236
00:11:52.433 --> 00:11:54.560
yeah and it's putting id in
another variable at the same time.

237
00:11:54.560 --> 00:11:56.930
So it's making another
object called update.

238
00:11:56.930 --> 00:11:58.100
That doesn't have ID on it and

239
00:11:58.100 --> 00:12:00.350
is making another variable
called ID at the same time.

240
00:12:01.910 --> 00:12:02.750
&gt;&gt; Speaker 3: That's cool.

241
00:12:02.750 --> 00:12:05.030
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 3: You Google object of spread.

242
00:12:05.030 --> 00:12:07.053
&gt;&gt; Scott Moss: Object rest spread,
there you go.

243
00:12:07.053 --> 00:12:12.136
Well yeah, object rest spread.

244
00:12:14.229 --> 00:12:16.770
&gt;&gt; Scott Moss: Anything else that
was confusing anybody else stuck on?

245
00:12:19.375 --> 00:12:22.415
&gt;&gt; Speaker 3: Let's try to do delete song.

246
00:12:22.415 --> 00:12:23.366
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 3: It's.

247
00:12:23.366 --> 00:12:24.320
&gt;&gt; Scott Moss: Yeah let's do delete.

248
00:12:24.320 --> 00:12:25.660
That was actually credit right?

249
00:12:25.660 --> 00:12:28.870
Let's walk through that right quick.

250
00:12:28.870 --> 00:12:30.760
So we'll do delete.

251
00:12:30.760 --> 00:12:36.240
Let's go to song resolver and
we'll do a delete here.

252
00:12:36.240 --> 00:12:37.680
Let's a song graph.

253
00:12:38.740 --> 00:12:41.185
There we go,
first thing first is make a mutation.

254
00:12:43.454 --> 00:12:47.342
&gt;&gt; Scott Moss: And we'll say,
removeSong, that's gonna take an ID,

255
00:12:47.342 --> 00:12:49.650
that's really all we need.

256
00:12:49.650 --> 00:12:51.241
And I'm gonna say it's
gonna turn back a song.

257
00:12:53.718 --> 00:12:58.682
&gt;&gt; Scott Moss: All right, and then what
I'm gonna do is I'm gonna come inside

258
00:12:58.682 --> 00:13:03.282
the song, I'm gonna make
a function called remove Song.

259
00:13:03.282 --> 00:13:07.570
It's gonna take an ID here,
that's really all I need.

260
00:13:07.570 --> 00:13:12.370
And then what I'm gonna
do is I'm gonna return

261
00:13:12.370 --> 00:13:17.552
Song.findbByIdAndRemove the ID and
then exec.

262
00:13:17.552 --> 00:13:18.598
Execute.

263
00:13:21.491 --> 00:13:24.904
&gt;&gt; Scott Moss: And the I'm going
to add that to my mutation, and

264
00:13:24.904 --> 00:13:26.670
I want to do that.

265
00:13:26.670 --> 00:13:28.160
Is that what you did?

266
00:13:28.160 --> 00:13:30.760
&gt;&gt; Speaker 3: Yeah, I was getting some
weird error, cuz I was passing the ID.

267
00:13:30.760 --> 00:13:33.700
I was using the graphical QL.

268
00:13:33.700 --> 00:13:34.590
&gt;&gt; Scott Moss: You were using graphical?

269
00:13:34.590 --> 00:13:35.480
Graphical /docs.

270
00:13:35.480 --> 00:13:39.649
&gt;&gt; Speaker 3: And I was trying to pass
an ID that I had created previously.

271
00:13:40.830 --> 00:13:42.490
&gt;&gt; Scott Moss: It was messing up?

272
00:13:42.490 --> 00:13:44.780
Okay, so let's test this out,
let's see if it works.

273
00:13:44.780 --> 00:13:46.940
If it doesn't work, we will find out.

274
00:13:46.940 --> 00:13:51.210
So where it really comes down to at
this point, is it find by id and

275
00:13:51.210 --> 00:13:55.210
remover returns the actual thing
that got deleted or not, by default.

276
00:13:55.210 --> 00:13:57.610
&gt;&gt; Speaker 3: It's saying something null,
so I don't know.

277
00:13:57.610 --> 00:13:58.380
&gt;&gt; Scott Moss: Okay, that could be it.

278
00:13:58.380 --> 00:14:01.230
I don't remember if that thing
actually returns the thing or not, but

279
00:14:01.230 --> 00:14:02.785
we'll find out as soon as we run this.

280
00:14:06.854 --> 00:14:08.900
&gt;&gt; Scott Moss: Okay nothing
broke that's always good.

281
00:14:11.010 --> 00:14:15.180
So if actually first we need to create a
song, I think I already have a song right?

282
00:14:15.180 --> 00:14:21.620
We can verify by doing all songs and
getting some IDs.

283
00:14:21.620 --> 00:14:24.870
Cool so we got an ID here,
let's just grab one of these IDs.

284
00:14:24.870 --> 00:14:28.520
Then we will come in here and
say mutation.

285
00:14:28.520 --> 00:14:34.428
We will just say delete song

286
00:14:34.428 --> 00:14:39.390
and that takes an ID and

287
00:14:39.390 --> 00:14:44.790
the ID is the type of ID and
this is going to be called remove song.

288
00:14:44.790 --> 00:14:49.590
That takes an ID who's
referencing that dollar ID and

289
00:14:50.730 --> 00:14:54.060
I'm just gonna asks with an id back,
and let's see if it returns that.

290
00:14:54.060 --> 00:14:58.927
And then down here, instead of putting
an input, I just have id and for

291
00:14:58.927 --> 00:15:00.256
the id it's that.

292
00:15:04.583 --> 00:15:06.079
&gt;&gt; Scott Moss: Does that make sense?

293
00:15:07.270 --> 00:15:09.600
So let's run it, and yeah, it removed it.

294
00:15:10.970 --> 00:15:11.650
So now if I-.

295
00:15:11.650 --> 00:15:13.650
&gt;&gt; Speaker 3: I kept
the input from the outside.

296
00:15:13.650 --> 00:15:14.770
&gt;&gt; Scott Moss: You kept
the input on the outside.

297
00:15:14.770 --> 00:15:15.590
&gt;&gt; Speaker 3: Nested ID inside.

298
00:15:15.590 --> 00:15:18.290
&gt;&gt; Scott Moss: Yeah, so
it's literally the name of the variable.

299
00:15:18.290 --> 00:15:19.850
That's pretty confusing.

300
00:15:19.850 --> 00:15:22.570
We've been using input this whole time.

301
00:15:22.570 --> 00:15:26.750
So if I go back and do all songs I
should not see that one in there.

302
00:15:26.750 --> 00:15:28.220
Yeah, it's gone.

303
00:15:28.220 --> 00:15:34.090
So that totally worked and
the same would be true for playlists.

304
00:15:34.090 --> 00:15:34.590
It's the same thing.

305
00:15:38.626 --> 00:15:39.760
&gt;&gt; Scott Moss: Any
questions on that stuff?

306
00:15:42.160 --> 00:15:43.740
All right, so
remember like two lessons ago and

307
00:15:43.740 --> 00:15:46.710
I was like you're gonna run into an error,
on playlist,

308
00:15:46.710 --> 00:15:48.690
when you try to populate
the song it's going to break.

309
00:15:50.290 --> 00:15:52.300
Let's figure that out.

310
00:15:52.300 --> 00:15:54.470
Now that we can actually make some stuff.

311
00:15:54.470 --> 00:16:02.609
I'm going to take this song ID here and
I'm going to create a playlist.

312
00:16:06.950 --> 00:16:13.860
And it's going to take an input,
of go away, go away.

313
00:16:16.460 --> 00:16:19.640
A newPlaylist takes a new playlist input,
it has a title, songs and favorite.

314
00:16:20.710 --> 00:16:21.485
So I will do that.

315
00:16:23.997 --> 00:16:27.278
&gt;&gt; Scott Moss: NewPlaylist.

316
00:16:28.894 --> 00:16:34.556
&gt;&gt; Scott Moss: And then,
&gt;&gt; Scott Moss: Come back.

317
00:16:35.918 --> 00:16:37.015
&gt;&gt; Scott Moss: Playlist, right here.

318
00:16:37.015 --> 00:16:38.410
input: NewPlaylist, okay.

319
00:16:38.410 --> 00:16:41.150
So we'll say, this takes an input.

320
00:16:41.150 --> 00:16:45.090
Takes an input and
then I was wanting to get back the ID,

321
00:16:45.090 --> 00:16:47.010
and then I want to get back the songs.

322
00:16:47.010 --> 00:16:48.850
And the songs,

323
00:16:48.850 --> 00:16:57.560
according to our graph QL,
it is an object.

324
00:16:58.680 --> 00:17:04.040
And playlist has an array of these,
right but I'm only passing up an ID

325
00:17:04.040 --> 00:17:05.910
to save it because that's how
it's saved in the database.

326
00:17:05.910 --> 00:17:08.130
It's GraphiQL wants an object back for

327
00:17:08.130 --> 00:17:12.760
songs, the database is saving a stream for
songs.

328
00:17:12.760 --> 00:17:15.780
So there's some disconnect,
we need to do something there, right?

329
00:17:15.780 --> 00:17:20.740
So, we're gonna find out, and if you're
referencing a non scholar type in GraphQL,

330
00:17:20.740 --> 00:17:23.140
so anything that's pretty much an object.

331
00:17:23.140 --> 00:17:25.730
GraphQL is gonna force you to expand
on it and say you need to ask for

332
00:17:25.730 --> 00:17:26.680
something else.

333
00:17:26.680 --> 00:17:30.180
You can't just come in here and
say, give me the songs array.

334
00:17:30.180 --> 00:17:32.290
It's gonna be like, no, what?

335
00:17:32.290 --> 00:17:33.970
What properties on those
objects do you want?

336
00:17:33.970 --> 00:17:35.680
It's gonna make you do that.

337
00:17:35.680 --> 00:17:38.000
By default I think this
forces you to put id.

338
00:17:38.000 --> 00:17:41.220
So let's just put id and then we'll
get the titles of the songs as well.

339
00:17:41.220 --> 00:17:42.630
So we'll do that and
now we will go ahead and

340
00:17:42.630 --> 00:17:45.600
create this playlist with the given songs.

341
00:17:45.600 --> 00:17:47.240
So we'll say input.

342
00:17:47.240 --> 00:17:53.860
We'll give it a title of Dope Mix and
Songs.

343
00:17:53.860 --> 00:18:01.040
There is going to be an array of that and
I think we're good with that.

344
00:18:01.040 --> 00:18:05.550
So then we're gonna save this,
and boom, look at that.

345
00:18:05.550 --> 00:18:11.150
So this is one of the chances, one of the
rare places where you have a success and

346
00:18:11.150 --> 00:18:13.440
an error at the same time,
and that's only on mutations.

347
00:18:13.440 --> 00:18:15.350
Cuz there's actually two
operations that's happening.

348
00:18:15.350 --> 00:18:17.150
You created something,
that was successful,

349
00:18:17.150 --> 00:18:20.610
but then when you tried to query it,
it broke, and that's what it's saying.

350
00:18:20.610 --> 00:18:24.930
And what broke is we
can't get song dot title.

351
00:18:24.930 --> 00:18:27.455
There's nothing there and that's the case,

352
00:18:27.455 --> 00:18:32.260
basically what I'm saying is you
can't resolve the song type.

353
00:18:32.260 --> 00:18:33.230
It just won't work.

354
00:18:35.620 --> 00:18:38.780
Look at that.

355
00:18:38.780 --> 00:18:39.850
What is that?

356
00:18:39.850 --> 00:18:41.770
It won't even do it right.

357
00:18:41.770 --> 00:18:43.540
So we need to figure out.

358
00:18:43.540 --> 00:18:44.820
Look, now it's doing it.

359
00:18:46.550 --> 00:18:48.820
There was something going on
with my hot monitor earlier but

360
00:18:48.820 --> 00:18:52.000
anyway, there is an array of IDs.

361
00:18:52.000 --> 00:18:55.330
GraphQL expects this to be an object,
so it's just freaking out.

362
00:18:55.330 --> 00:18:58.300
This word stuff you see right
here is what GraphQL spits out

363
00:18:58.300 --> 00:19:01.430
when it thought it should have got
something else, but it didn't.

364
00:19:01.430 --> 00:19:05.670
It's basically a base 64 encoded
something, I don't know,

365
00:19:05.670 --> 00:19:07.300
but it didn't get back what you thought.

366
00:19:07.300 --> 00:19:08.851
So if you ever see that in GraphQL,

367
00:19:08.851 --> 00:19:12.030
it's because you just messed
up some type somewhere.

368
00:19:12.030 --> 00:19:14.180
So we need to resolve those IDs.

369
00:19:14.180 --> 00:19:18.500
And that's what our next lesson is about
is how to resolve nested non-scholar

370
00:19:18.500 --> 00:19:21.520
types and handle that stuff and
handle that stuff in nested resolvers.

371
00:19:21.520 --> 00:19:24.167
We scratched the surface with nested
resolvers but I didn't show you

372
00:19:24.167 --> 00:19:26.870
how to do it on a database level,
which is what we're gonna have to do.

