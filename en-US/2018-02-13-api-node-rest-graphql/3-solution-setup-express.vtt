WEBVTT

1
00:00:03.144 --> 00:00:05.258
&gt;&gt; Scott Moss: So hopefully everybody had
enough time to work on that solution.

2
00:00:05.258 --> 00:00:06.376
We're just getting started.

3
00:00:06.376 --> 00:00:09.510
So I'm just going to walk through
the minimum we need to solve

4
00:00:09.510 --> 00:00:12.470
that previous exercise and
get our express app running.

5
00:00:12.470 --> 00:00:14.670
And then we can see it on the screen.

6
00:00:14.670 --> 00:00:17.460
So the first thing is if
you head over to server js,

7
00:00:17.460 --> 00:00:20.510
we had this app that was null and
we export this default.

8
00:00:20.510 --> 00:00:24.300
We're going to use the express
that's imported here up top, and

9
00:00:24.300 --> 00:00:25.260
we're gonna create a new app.

10
00:00:25.260 --> 00:00:29.320
And the way we do that is we say,
express, and we invoke it.

11
00:00:29.320 --> 00:00:31.590
And it's that simple, we have a new app.

12
00:00:31.590 --> 00:00:36.420
After we do that, we need to go ahead and
set up some route that we can hit, and

13
00:00:36.420 --> 00:00:38.660
then we actually see it when we hit
it with something like Postman or

14
00:00:38.660 --> 00:00:40.540
in the browser or something like that.

15
00:00:40.540 --> 00:00:45.689
So what we'll do is we'll say app dot,
and in this case we'll just say get,

16
00:00:45.689 --> 00:00:49.234
so this means if you do a get request,
this is a verb.

17
00:00:49.234 --> 00:00:53.862
If you do a get request to this url, which
in this case is just the index url, so

18
00:00:53.862 --> 00:00:58.418
as soon as you hit this path, which will
be local host whatever port we go to,

19
00:00:58.418 --> 00:01:01.150
it's going to run this
function right here.

20
00:01:01.150 --> 00:01:03.800
So we're just going to use
this request and response.

21
00:01:03.800 --> 00:01:06.000
And we haven't talked about this,
but we'll get to it.

22
00:01:06.000 --> 00:01:09.580
And all I'm going to do is
I'm going to say res.json and

23
00:01:09.580 --> 00:01:13.110
I'm just going to send back a json
object here that says ok: true.

24
00:01:13.110 --> 00:01:16.130
You don't really need to
know what this is right now.

25
00:01:16.130 --> 00:01:20.770
But basically, what we're saying is, when
someone issues a get request to this url,

26
00:01:20.770 --> 00:01:24.130
we're going to respond back with
some json that says ok: true.

27
00:01:24.130 --> 00:01:26.180
And this is gonna allow us to test it.

28
00:01:26.180 --> 00:01:29.350
So once we have that,
we need to go ahead and

29
00:01:29.350 --> 00:01:32.350
import this app into the index and
then start it.

30
00:01:32.350 --> 00:01:35.770
And the reason we're doing that is
because we wanna be able to test this

31
00:01:35.770 --> 00:01:38.980
express application in
isolation without starting it.

32
00:01:38.980 --> 00:01:42.880
So we actually do the starting of
the service in a completely separate file.

33
00:01:42.880 --> 00:01:44.210
So we'll head over to the index.js,

34
00:01:44.210 --> 00:01:47.600
which is the root of our server,
we'll import that app.

35
00:01:47.600 --> 00:01:50.090
And notice that on server's
export is default, so

36
00:01:50.090 --> 00:01:51.760
we don't have to bring it over brackets.

37
00:01:51.760 --> 00:01:54.190
So let's say import app from 'server'.

38
00:01:54.190 --> 00:01:58.510
And then all we have to do
is just say app.listen,

39
00:01:58.510 --> 00:02:02.000
which is a method that express
gives us to open up a port.

40
00:02:02.000 --> 00:02:03.550
Type in an available port.

41
00:02:03.550 --> 00:02:07.120
If it's not available, it will totally
tell you and it would error out.

42
00:02:07.120 --> 00:02:09.782
And then we're going to put a call
back here because it's asynchronous.

43
00:02:09.782 --> 00:02:11.454
And then once this is connected,

44
00:02:11.454 --> 00:02:15.195
we'll just do a console.log to remind
ourselves what port our API is on.

45
00:02:15.195 --> 00:02:18.153
And we'll just go ahead and
hard code 3000.

46
00:02:18.153 --> 00:02:19.060
And then we'll save it.

47
00:02:19.060 --> 00:02:21.230
And that's all we've gotta
do to get things started.

48
00:02:21.230 --> 00:02:22.950
So we can go over to our terminal.

49
00:02:22.950 --> 00:02:24.130
We can run yarn start,

50
00:02:24.130 --> 00:02:26.180
which is the command you'll need
to actually start your server.

51
00:02:29.165 --> 00:02:34.620
&gt;&gt; Scott Moss: And it broke because, man.

52
00:02:34.620 --> 00:02:36.780
It broke because I forgot
to put a dot there.

53
00:02:36.780 --> 00:02:38.440
There we go, so forgot to put a dot.

54
00:02:38.440 --> 00:02:39.030
Now it's good.

55
00:02:40.030 --> 00:02:43.340
We can go over and
we can actually query this API.

56
00:02:43.340 --> 00:02:47.331
I'm using something called HTTPy,
which is like a human readable

57
00:02:47.331 --> 00:02:52.770
way to talk to APIs
pragmatically on the CLIs.

58
00:02:52.770 --> 00:02:55.810
You can use postman if you want,
you can use the browser if you want to.

59
00:02:55.810 --> 00:02:59.065
So I'm just gonna do this and
I'm gonna do a get request.

60
00:02:59.065 --> 00:03:01.891
I'm gonna explicitly say get,
I'm gonna say localhost, and

61
00:03:01.891 --> 00:03:03.500
the port that I put in was 3000.

62
00:03:03.500 --> 00:03:08.249
I'm just gonna do a get request for
that, hit Enter and

63
00:03:08.249 --> 00:03:11.047
you can see, we have ok: true.

