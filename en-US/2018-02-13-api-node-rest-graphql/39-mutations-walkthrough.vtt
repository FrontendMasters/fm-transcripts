WEBVTT

1
00:00:02.650 --> 00:00:04.202
&gt;&gt; Scott Moss: So
letâ€™s talk about some mutations here.

2
00:00:04.202 --> 00:00:09.915
Iâ€™m gonna check out to the branch so

3
00:00:09.915 --> 00:00:15.438
I can actually do some mutations,

4
00:00:15.438 --> 00:00:20.547
git checkout.
&gt;&gt; Scott Moss: Okay.

5
00:00:26.042 --> 00:00:26.626
&gt;&gt; Scott Moss: All right, so

6
00:00:26.626 --> 00:00:30.815
I should have some mutations here.
&gt;&gt; Scott Moss: Cool,

7
00:00:30.815 --> 00:00:33.660
so the first thing you'll notice
when you actually have mutations.

8
00:00:33.660 --> 00:00:37.637
This is from a client's perspective, this
docks, you can think of it as our client.

9
00:00:37.637 --> 00:00:41.410
We're active, we're looking at our
server from a client's perspective.

10
00:00:41.410 --> 00:00:47.068
You'll see mutation here, next to query,
I think you'll see all these mutations.

11
00:00:47.068 --> 00:00:48.914
Very similar to what you
would see with queries.

12
00:00:48.914 --> 00:00:52.187
And remember, my convention is,
I use input, so you'll see that a lot.

13
00:00:52.187 --> 00:00:56.590
So let's go ahead and
let's do some creations or some mutations.

14
00:00:56.590 --> 00:00:57.820
The first thing you need to do is,

15
00:00:57.820 --> 00:00:59.383
you actually have to type
in the word mutation here.

16
00:01:01.070 --> 00:01:03.050
Now, I haven't told you
about named queries,

17
00:01:03.050 --> 00:01:04.450
because we didn't really need to do them.

18
00:01:04.450 --> 00:01:07.910
But this is a named mutation, so
you put the word mutation in it.

19
00:01:07.910 --> 00:01:10.311
So you might be thinking,
is there a word for query?

20
00:01:10.311 --> 00:01:13.340
Yeah, there is, the reason we didn't
use it is cuz we don't have to use it.

21
00:01:13.340 --> 00:01:18.060
The only time you have to use named
queries is when you're doing some advanced

22
00:01:18.060 --> 00:01:20.930
analytics on the back end, or you're
doing some caching on the front end.

23
00:01:20.930 --> 00:01:23.940
Inside this, right now, we're not,
we're not doing any of that, but yes,

24
00:01:23.940 --> 00:01:24.920
you can do named queries.

25
00:01:24.920 --> 00:01:27.880
If you do something like Apollo,
you most likely will do named queries.

26
00:01:27.880 --> 00:01:30.789
But for mutations, you have to,
there is no shorthand,

27
00:01:30.789 --> 00:01:34.135
anonymous mutations that you can do,
like you can with queries.

28
00:01:34.135 --> 00:01:38.945
You have to use mutation followed by the
name, the name can be whatever you want.

29
00:01:38.945 --> 00:01:42.179
My convention is, I just like trying to
name is something similar to the actual

30
00:01:42.179 --> 00:01:44.486
mutation that I'm about to do,
and then title case it.

31
00:01:44.486 --> 00:01:48.423
Title casing is starting with
uppercase and then camelcasing there.

32
00:01:48.423 --> 00:01:54.328
So let's do a new song, I think we
did this before, let's do it again.

33
00:01:54.328 --> 00:01:59.149
So we'll say CreateSong, right, so
that's the name of our operation,

34
00:01:59.149 --> 00:02:03.390
that's the name of this operation,
it's called CreateSong.

35
00:02:03.390 --> 00:02:07.180
It's not the name of the mutation,
the mutation is going to be newSong,

36
00:02:07.180 --> 00:02:09.242
down here, so it's already created.

37
00:02:09.242 --> 00:02:13.910
This is the operation for it,
you can call it whatever you want.

38
00:02:13.910 --> 00:02:16.559
It's gonna be used, like I said, for
advanced features on the back end,

39
00:02:16.559 --> 00:02:18.070
if you're tracking those names.

40
00:02:18.070 --> 00:02:20.469
Or caching on the front end,
like I know Paolo uses it.

41
00:02:22.250 --> 00:02:27.661
So then what we would do is, we would look
at the new song mutation in our docks.

42
00:02:27.661 --> 00:02:31.922
And we would see that it takes one
argument called input whose type is

43
00:02:31.922 --> 00:02:37.270
NewSong, title, url, album,
artist, rating, favorite, right?

44
00:02:37.270 --> 00:02:42.520
So what we'll do is, we'll make input with
a $, you have to put the $ in front of it.

45
00:02:42.520 --> 00:02:46.741
That's a special character that's
indicating that this is a variable that's

46
00:02:46.741 --> 00:02:49.327
gonna be passed in, so
that's the first thing.

47
00:02:49.327 --> 00:02:53.248
And then you have to give it the exact
same type as it's displayed in

48
00:02:53.248 --> 00:02:57.890
the mutation that you're about to call,
in this case, that type is NewSong.

49
00:02:58.920 --> 00:03:01.500
It has an input type of NewSong
with an exclamation, so

50
00:03:01.500 --> 00:03:06.060
we have to do that exact thing,
NewSong with the exclamation.

51
00:03:06.060 --> 00:03:09.961
And then now we can actually
issue the mutation,

52
00:03:09.961 --> 00:03:13.871
which is newSong,
you can see it all completed.

53
00:03:13.871 --> 00:03:17.652
It has a type of input who's
value is the variable called

54
00:03:17.652 --> 00:03:22.277
input.
&gt;&gt; Scott Moss: Now,

55
00:03:22.277 --> 00:03:24.682
because this is a variable,
you don't have to call it an input.

56
00:03:24.682 --> 00:03:27.235
You can call it whatever you want, as long
as it has a dollar sign in front of it.

57
00:03:27.235 --> 00:03:31.866
Doesn't matter, you can call it thing,
doesn't matter.

58
00:03:31.866 --> 00:03:34.632
Cuz this is the one that matters,
it has to be bound to this.

59
00:03:34.632 --> 00:03:38.335
This input right here, cuz that's the name
of it here, these names have to match.

60
00:03:38.335 --> 00:03:39.360
The real way would be,
do whatever you want,

61
00:03:39.360 --> 00:03:41.630
you just need to make sure
you pass it in up here.

62
00:03:41.630 --> 00:03:45.267
I keep it the same because
it's easier to reason about.

63
00:03:45.267 --> 00:03:47.461
Cuz when you write code,
when you write this in JavaScript,

64
00:03:47.461 --> 00:03:49.370
you have to pass in an object
with these properties.

65
00:03:49.370 --> 00:03:52.050
And if you have to remap them
in your mind, like, yeah, yeah,

66
00:03:52.050 --> 00:03:53.130
thing goes to input.

67
00:03:53.130 --> 00:03:57.868
It's easier to just be like,
input's input, id's id, number's number.

68
00:03:57.868 --> 00:04:01.217
Versus try to map them together,
at least with my experience.

69
00:04:01.217 --> 00:04:06.771
So we'll do the newSong, and then we'll
just get back the ID and the title.

70
00:04:06.771 --> 00:04:10.294
And then we'll alias this as song, right,

71
00:04:10.294 --> 00:04:14.021
so then we come here,
we make some variables.

72
00:04:14.021 --> 00:04:16.974
What's the name of
the variable that we need?

73
00:04:16.974 --> 00:04:17.534
&gt;&gt; Speaker 2: Input?

74
00:04:17.534 --> 00:04:19.238
&gt;&gt; Scott Moss: Input, yeah,

75
00:04:19.238 --> 00:04:24.875
it's just called input,
boom, so you got input,

76
00:04:24.875 --> 00:04:29.477
it has a title, we'll say title is Jams.

77
00:04:29.477 --> 00:04:34.789
We'll also give it an artist of,

78
00:04:34.789 --> 00:04:38.590
I don't know, Kelly.

79
00:04:38.590 --> 00:04:43.500
And then we'll just give
it a URL of some fake

80
00:04:43.500 --> 00:04:50.804
URL.
&gt;&gt; Scott Moss: Cool,

81
00:04:50.804 --> 00:04:54.484
so we got that,
we see our input object there.

82
00:04:54.484 --> 00:04:58.197
We're ready to go to make this mutation,
and if we satisfy the requirements,

83
00:04:58.197 --> 00:04:59.810
we should be able to create one.

84
00:04:59.810 --> 00:05:02.738
So we hit this,
you can see it created something,

85
00:05:02.738 --> 00:05:07.362
it came back and it gave us the properties
that we wanted, the ID and the title.

86
00:05:07.362 --> 00:05:13.062
And all that worked because this
mutation satisfied the request here.

87
00:05:13.062 --> 00:05:16.260
It satisfied the song type, so
because this is the song type,

88
00:05:16.260 --> 00:05:19.025
we can feel assured that if I ask for
any of this stuff,

89
00:05:19.025 --> 00:05:25.732
I'll get it back.
&gt;&gt; Scott Moss: Everybody following me so

90
00:05:25.732 --> 00:05:29.566
far, in this mutation, okay?
&gt;&gt; Scott Moss: So

91
00:05:29.566 --> 00:05:32.440
that's how you would make a mutation
from a client's perspective.

92
00:05:32.440 --> 00:05:35.170
Now, how do we actually
create this on the backend?

93
00:05:35.170 --> 00:05:38.863
It's like the exact same thing is
occurring, it's not that special, in fact,

94
00:05:38.863 --> 00:05:40.670
it's literally the exact same thing.

95
00:05:40.670 --> 00:05:43.152
The only difference is gonna be
what you do in the resolver.

96
00:05:43.152 --> 00:05:49.450
How you set it up in GraphQL is the same
thing, so let's go look at the GraphQL for

97
00:05:49.450 --> 00:05:55.380
the user, which should already be
there if you're on lesson 12 branch.

98
00:05:55.380 --> 00:05:58.111
You'll see on the user,
it defines a type mutation.

99
00:05:58.111 --> 00:06:01.700
You can think of the user, if you probably
have forgotten, it's like my index query.

100
00:06:01.700 --> 00:06:04.650
I'm defining the query types and
the mutation types, and everywhere else,

101
00:06:04.650 --> 00:06:06.240
I'm extending it.

102
00:06:06.240 --> 00:06:09.783
So you usually do that on one file,
you'll define the mutation type,

103
00:06:09.783 --> 00:06:12.796
the query type, and
then you extend them everywhere else.

104
00:06:12.796 --> 00:06:15.555
So I'm defining the mutation type,

105
00:06:15.555 --> 00:06:21.163
I'm putting a field on it called updateMe,
which resolves to a user type.

106
00:06:21.163 --> 00:06:25.159
So just by looking at this, what does
this tell you our resolver's gonna

107
00:06:25.159 --> 00:06:31.881
have?
&gt;&gt; Scott Moss: What's

108
00:06:31.881 --> 00:06:34.252
the name of a function in our
resolver to resolve this?

109
00:06:34.252 --> 00:06:35.045
&gt;&gt; Group: updateMe.

110
00:06:35.045 --> 00:06:35.982
&gt;&gt; Scott Moss: Yeah, it's the same name,

111
00:06:35.982 --> 00:06:37.510
right, remember, they have to match.

112
00:06:37.510 --> 00:06:42.130
So that means we have an updateMe
function inside the resolver of the user.

113
00:06:42.130 --> 00:06:47.040
So if I go to user.resolver, there it is,
there is an updateMe on the mutation type.

114
00:06:47.040 --> 00:06:51.220
That's important cuz this
is the mutation type,

115
00:06:51.220 --> 00:06:57.391
here's the field on it whose value is
a function that returns a user type,

116
00:06:57.391 --> 00:07:01.499
that make sense?
&gt;&gt; Scott Moss: So

117
00:07:01.499 --> 00:07:03.531
that's how you write a mutation,
it's literally,

118
00:07:03.531 --> 00:07:06.660
the only difference between this and a
query is that it's underneath a mutation.

119
00:07:07.770 --> 00:07:08.270
Other than that,

120
00:07:08.270 --> 00:07:13.510
it's the same thing, it's just whatever
you do in your resolver that's different.

121
00:07:13.510 --> 00:07:17.928
Here I'm actually mutating something,
this would not work because it's assuming

122
00:07:17.928 --> 00:07:21.985
the user is there from the adjacent web
token, which we did not activate yet.

123
00:07:21.985 --> 00:07:24.261
But assuming that it was there,
yeah, you would save this, and

124
00:07:24.261 --> 00:07:28.999
it would update.
&gt;&gt; Scott Moss: Any questions

125
00:07:28.999 --> 00:07:33.320
on mutations?
&gt;&gt; Scott Moss: So remember,

126
00:07:33.320 --> 00:07:35.020
first argument is a root value.

127
00:07:35.020 --> 00:07:39.419
Second argument is the arguments that'll
be passed in from as you see them.

128
00:07:41.421 --> 00:07:42.314
&gt;&gt; Scott Moss: As you see them,

129
00:07:42.314 --> 00:07:45.400
this one doesn't take an input,
actually it should.

130
00:07:45.400 --> 00:07:52.112
It should take a input whose type is,
&gt;&gt; Scott Moss: updatedUser,

131
00:07:52.112 --> 00:07:57.697
exclamation, there you go, so
now that one takes an input.

132
00:07:57.697 --> 00:07:59.427
So as you see them in GraphQL,

133
00:07:59.427 --> 00:08:04.323
you see this input here?
&gt;&gt; Scott Moss: It matches this input here,

134
00:08:04.323 --> 00:08:07.123
if this was called x, this would be called

135
00:08:07.123 --> 00:08:13.063
x.
&gt;&gt; Scott Moss: And

136
00:08:13.063 --> 00:08:15.403
again, this is just a shorthand for
destructuring,

137
00:08:15.403 --> 00:08:18.059
this isn't actually an object
with an input property on it.

138
00:08:18.059 --> 00:08:20.980
I'm just destructuring
it in the arguments.

139
00:08:20.980 --> 00:08:23.375
If you don't like that ugly syntax,
that's totally fine.

140
00:08:23.375 --> 00:08:29.455
You can just do args, or whatever
you wanna call it, and now it's just

141
00:08:29.455 --> 00:08:36.796
args.input.
&gt;&gt; Scott Moss: If

142
00:08:36.796 --> 00:08:41.535
you get lost in the sauce here,
just do some console.logs.

143
00:08:41.535 --> 00:08:46.191
That's the key to debugging,
is console.log.

144
00:08:46.191 --> 00:08:49.469
It's key, it's key in React, not React,

145
00:08:49.469 --> 00:08:54.003
I'm sorry, it's key in GraphQL,
it's also key in React.

146
00:08:54.003 --> 00:08:57.989
Any questions on mutations, yes?
&gt;&gt; Speaker 4: They get me,

147
00:08:57.989 --> 00:09:02.520
what is the second input?
&gt;&gt; Scott Moss: Get me this

148
00:09:02.520 --> 00:09:03.647
one?
&gt;&gt; Speaker 4: Yeah,

149
00:09:03.647 --> 00:09:06.182
before user, what is that?
&gt;&gt; Scott Moss: This is just another

150
00:09:06.182 --> 00:09:09.409
placeholder, I'm not using it, so
I'm just putting something there so

151
00:09:09.409 --> 00:09:11.976
I can get to the thing that I
really wanted, which is this.

152
00:09:11.976 --> 00:09:15.684
This is a placeholder, this is my
convention of putting placeholders,

153
00:09:15.684 --> 00:09:19.350
because if I just did this, then it
would try to get the first argument.

154
00:09:20.660 --> 00:09:24.810
If I just did this, then it would
try to get the second argument.

155
00:09:24.810 --> 00:09:27.058
So this is just me saying,
I just want the third argument, but

156
00:09:27.058 --> 00:09:28.194
I have to put something there.

157
00:09:28.194 --> 00:09:30.094
I mean, there's more elegant ways for
this, yeah,

158
00:09:30.094 --> 00:09:31.877
there's definitely more elegant ways for
this.

159
00:09:31.877 --> 00:09:39.680
You could do that, and you can be like,
return args[2], whatever you wanna do.

160
00:09:39.680 --> 00:09:43.203
There's better ways, well,
that's just how I'm doing it,

161
00:09:43.203 --> 00:09:46.041
I like to be explicit about stuff.
&gt;&gt; Speaker 5: Just as you have to

162
00:09:46.041 --> 00:09:48.960
your query in arms, right?
&gt;&gt; Scott Moss: Right, yeah,

163
00:09:48.960 --> 00:09:54.877
any other questions?
&gt;&gt; Speaker 6: Query and mutation,

164
00:09:54.877 --> 00:09:59.981
are they each a type of resolver?
&gt;&gt; Scott Moss: So resolver is not a type,

165
00:09:59.981 --> 00:10:04.060
all the resolver is is just,
so think about it like this.

166
00:10:04.060 --> 00:10:08.350
By default, GraphQL will attempt
to do its own resolution,

167
00:10:08.350 --> 00:10:10.280
it will attempt to do its own resolving.

168
00:10:10.280 --> 00:10:12.220
And when I say attempt,
basically what it'll do is,

169
00:10:12.220 --> 00:10:14.050
it'll look at the object that you gave it.

170
00:10:14.050 --> 00:10:17.850
If the property names match up with
the object you gave it, it'll resolve it.

171
00:10:17.850 --> 00:10:19.320
If it does not match up,

172
00:10:19.320 --> 00:10:23.840
it'll expect there to be some
functions on that object somewhere.

173
00:10:23.840 --> 00:10:27.260
And those functions better resolve
the type that it's looking for.

174
00:10:27.260 --> 00:10:28.530
So there is no type resolver,

175
00:10:28.530 --> 00:10:32.540
you could think of mutation as
literally the same thing as query.

176
00:10:33.710 --> 00:10:37.615
Except you just put stuff in the database,
other than that, it's the same thing.

177
00:10:37.615 --> 00:10:41.922
They all have the exact same syntax for
resolvers,

178
00:10:41.922 --> 00:10:46.731
they all take the same area
like root value, arguments,

179
00:10:46.731 --> 00:10:52.297
contexts, info.
&gt;&gt; Scott Moss: The exact same thing,

180
00:10:52.297 --> 00:10:56.813
so mutations resolver, the only difference
it would be would be the logic that you

181
00:10:56.813 --> 00:10:59.640
wrote in it, but it does the same thing.

182
00:10:59.640 --> 00:11:04.669
Whatever it returns needs to satisfy what
the return value of that mutation is.

183
00:11:04.669 --> 00:11:06.459
Does that answer your question,
or was it something else?

184
00:11:06.459 --> 00:11:07.183
&gt;&gt; Speaker 6: No, it's good.

185
00:11:07.183 --> 00:11:07.747
&gt;&gt; Scott Moss: Okay.

