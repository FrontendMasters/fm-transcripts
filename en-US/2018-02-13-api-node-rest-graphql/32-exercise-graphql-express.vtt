WEBVTT

1
00:00:03.303 --> 00:00:07.126
&gt;&gt; Scott Moss: We're going to hook
our Express server up, I'm sorry,

2
00:00:07.126 --> 00:00:11.438
we're going to hook our Graph QL
implementation up to Express.

3
00:00:11.438 --> 00:00:14.624
And we should be able to run it and
go to GraphiQL, so

4
00:00:14.624 --> 00:00:18.493
I'm going to walk through some
stuff of what that looks like.

5
00:00:18.493 --> 00:00:23.210
And then you guys are going to be
sent off and try to tackle it, so

6
00:00:23.210 --> 00:00:29.792
I'm going to check out to lesson-10.
&gt;&gt; Scott Moss: Yeah,

7
00:00:29.792 --> 00:00:35.816
lesson-10, what's this?
&gt;&gt; Scott Moss: Okay,

8
00:00:35.816 --> 00:00:37.786
so I'm on lesson-10 here.

9
00:00:37.786 --> 00:00:40.890
And then,
you'll see a new file here on lesson-10,

10
00:00:40.890 --> 00:00:45.593
it's not an exact copy of the lesson-9
solution, so there's an added file here.

11
00:00:45.593 --> 00:00:47.539
And you'll see this file right here,
so let's just walk through it.

12
00:00:47.539 --> 00:00:51.252
There's a lot that's happening in this
file, but I needed this to be here so

13
00:00:51.252 --> 00:00:53.118
we can go through what I need you to do.

14
00:00:53.118 --> 00:00:58.094
So the file I'm talking about
is called graphqlrouter.js.

15
00:00:58.094 --> 00:01:02.702
It's in the root of the API folder,

16
00:01:02.702 --> 00:01:08.023
source API.
&gt;&gt; Scott Moss: GraphQLRouter JS,

17
00:01:08.023 --> 00:01:10.594
so if you get there, follow along with me.

18
00:01:10.594 --> 00:01:14.672
So a couple things that's going on right
here, let me close the double pane,

19
00:01:14.672 --> 00:01:18.149
the first thing to note is look at
the imports we've got going on.

20
00:01:18.149 --> 00:01:21.770
We have this make executable
schema from GraphQL tools.

21
00:01:21.770 --> 00:01:26.548
GraphQL tools is a library
created from some individual and

22
00:01:26.548 --> 00:01:28.945
it's a really good library.

23
00:01:28.945 --> 00:01:31.841
This is what's going to allow
us to combine our queries and

24
00:01:31.841 --> 00:01:33.504
have them know about each other.

25
00:01:33.504 --> 00:01:36.626
And do some really cool things like
extending mutations in the extending

26
00:01:36.626 --> 00:01:38.582
queries, and we'll talk about that later.

27
00:01:38.582 --> 00:01:43.673
But this gives us that flexibility to
build our schemas in the string format.

28
00:01:43.673 --> 00:01:46.598
Which I think is way more powerful
than the JavaScript format, so

29
00:01:46.598 --> 00:01:47.779
that's going to do that.

30
00:01:47.779 --> 00:01:52.516
But we need to convert our string
schemas into an executable schema

31
00:01:52.516 --> 00:01:56.755
that the GraphQL server can use
to check the query against.

32
00:01:56.755 --> 00:01:59.336
By default, it doesn't know
what to do with that string,

33
00:01:59.336 --> 00:02:00.768
it has to convert it to that AST.

34
00:02:00.768 --> 00:02:03.635
It has to convert it to that JavaScript
type that we were trying to avoid,

35
00:02:03.635 --> 00:02:04.998
that's what that's going to do.

36
00:02:04.998 --> 00:02:09.003
It's going to convert it for
us so we don't have to do it.

37
00:02:09.003 --> 00:02:11.570
And then we have this userType and
these userResolvers,

38
00:02:11.570 --> 00:02:15.005
we haven't talked about resolvers,
you don't need to know what they are.

39
00:02:15.005 --> 00:02:18.642
It's just an object with some methods on
it, but we do know what a userType is.

40
00:02:18.642 --> 00:02:21.899
The userType is the GraphQL
file that we wrote.

41
00:02:21.899 --> 00:02:24.009
That's what that is,
it's just that string,

42
00:02:24.009 --> 00:02:26.084
this is just that string
of that GraphQL file.

43
00:02:26.084 --> 00:02:26.751
If you were to log it,

44
00:02:26.751 --> 00:02:28.646
you would see the exact same
thing that we wrote in that file,

45
00:02:28.646 --> 00:02:31.401
nothing more.
&gt;&gt; Scott Moss: We've got merge,

46
00:02:31.401 --> 00:02:32.508
we know what merge is at this point.

47
00:02:32.508 --> 00:02:37.716
And then we have graphqlExpress,
graphqlExpress is a middleware

48
00:02:37.716 --> 00:02:42.187
that we use to mount a GraphQL
server on an Express route.

49
00:02:42.187 --> 00:02:47.040
And that's what we're going to
use to attach our GraphQL type

50
00:02:47.040 --> 00:02:52.004
definitions and resolvers to
our root Express applications.

51
00:02:52.004 --> 00:02:55.852
Remember the root app that we made
yesterday inside the ServerJS file that

52
00:02:55.852 --> 00:02:59.093
uses global middleware,
we're going to attach our server.

53
00:02:59.093 --> 00:03:02.421
Our GraphQL implementation there.

54
00:03:02.421 --> 00:03:07.383
So the first thing is,
we have this baseSchema, this baseSchema

55
00:03:07.383 --> 00:03:12.358
is basically, a GraphQL schema by
default has to have one thing.

56
00:03:12.358 --> 00:03:15.620
The minimum it has to have is a query,
that's the minimum.

57
00:03:15.620 --> 00:03:19.294
If it doesn't have a query, then it just
won't work, unless you're using Relay, but

58
00:03:19.294 --> 00:03:20.947
again, we're not going to use Relay.

59
00:03:20.947 --> 00:03:23.899
I actually don't recommend using Relay,
I think Apollo's better, but

60
00:03:23.899 --> 00:03:24.956
that's just my opinion.

61
00:03:24.956 --> 00:03:28.562
So by minimum, we need a query,
we don't need a mutation, but

62
00:03:28.562 --> 00:03:32.181
you have to have a query,
this syntax is, it's just a string.

63
00:03:32.181 --> 00:03:34.439
I just didn't feel like putting it in
another file because it's so small.

64
00:03:34.439 --> 00:03:38.910
This is like the root,
this is like the index of our query,

65
00:03:38.910 --> 00:03:40.929
of our schema basically.

66
00:03:40.929 --> 00:03:44.810
So like I say, you can think of GraphQL as
a tree, right, so a tree, this is a root,

67
00:03:44.810 --> 00:03:46.600
this is where it starts, right here.

68
00:03:46.600 --> 00:03:49.652
If we make a query, so we make a schema,

69
00:03:49.652 --> 00:03:54.661
we give it a property called query,
and we set its type to Query.

70
00:03:54.661 --> 00:03:56.968
I didn't just make this up,
these aren't just made up words,

71
00:03:56.968 --> 00:03:58.194
this is something that it needs.

72
00:03:58.194 --> 00:04:02.342
[LAUGH] I didn't just like,
I'm just going to use these words, no,

73
00:04:02.342 --> 00:04:06.231
it needs a schema, or a property
called query, edit type is Query.

74
00:04:06.231 --> 00:04:09.970
We didn't make this type called Query,
it's a built in type,

75
00:04:09.970 --> 00:04:12.238
we just have to explicitly define it.

76
00:04:12.238 --> 00:04:14.687
Even though pretty much
every server needs this,

77
00:04:14.687 --> 00:04:18.259
you still have to explicitly define
this right here, this root, okay?

78
00:04:18.259 --> 00:04:20.629
So we have this root,
that's the base schema,

79
00:04:20.629 --> 00:04:26.245
everything is going to be a child of this.
&gt;&gt; Scott Moss: And then we have

80
00:04:26.245 --> 00:04:31.271
the mid executable schema, and it takes an
object with, for us, just two properties.

81
00:04:31.271 --> 00:04:33.242
An array of our type definitions, and

82
00:04:33.242 --> 00:04:36.393
our type definitions are those
GraphQL files that we wrote.

83
00:04:36.393 --> 00:04:39.746
They're just strings, so we have
our baseSchema, that's up here, and

84
00:04:39.746 --> 00:04:41.543
then I went ahead and put our userType.

85
00:04:41.543 --> 00:04:45.437
Which, again,
is just this user grab field box,

86
00:04:45.437 --> 00:04:50.082
it's just this turned into a string,
that's all that is.

87
00:04:50.082 --> 00:04:51.958
And then we have our resolvers,

88
00:04:51.958 --> 00:04:55.090
which is an object of all
the resolvers put together.

89
00:04:55.090 --> 00:04:58.247
Again, we haven't talked about resolvers
yet, but for now, just think of them,

90
00:04:58.247 --> 00:05:00.744
they're just methods,
they're objects with methods on them.

91
00:05:00.744 --> 00:05:04.765
Those methods correlate to mutations and
queries.

92
00:05:04.765 --> 00:05:08.009
And then we go ahead and
merge them in, and

93
00:05:08.009 --> 00:05:11.830
then down below here is
where it's pretty cool.

94
00:05:11.830 --> 00:05:16.313
We use this graphqlExpress, where it's,
in the way that we're using it,

95
00:05:16.313 --> 00:05:17.445
takes a call back.

96
00:05:17.445 --> 00:05:20.438
And a call back exposes that
powerful thing I was talking about,

97
00:05:20.438 --> 00:05:23.667
the request object that we needed,
that has the headers, the path.

98
00:05:23.667 --> 00:05:26.663
Everything associated with
the incoming request,

99
00:05:26.663 --> 00:05:30.759
we want to pass that down to every
single graphQL resolver that we have.

100
00:05:30.759 --> 00:05:31.976
So it has access to it,

101
00:05:31.976 --> 00:05:35.963
we want to give every resolver the best
tools it needs to resolve the data.

102
00:05:35.963 --> 00:05:37.682
So, inside of our controllers yesterday,

103
00:05:37.682 --> 00:05:40.570
we were able to pass down the request
to every single controller, right?

104
00:05:40.570 --> 00:05:43.516
We want to do the same thing for
every single resolver, by default,

105
00:05:43.516 --> 00:05:45.284
it won't do that, so we have to do that.

106
00:05:45.284 --> 00:05:49.680
So we create this graphqlExpress
using Apollo server Express, and

107
00:05:49.680 --> 00:05:53.931
it takes, basically it has to
return an object that has a schema.

108
00:05:53.931 --> 00:05:57.538
Which we already created up here,
an executable schema.

109
00:05:57.538 --> 00:05:59.414
And then this context,
when we get to resolvers,

110
00:05:59.414 --> 00:06:00.760
we are going to see what context is.

111
00:06:00.760 --> 00:06:04.634
But context is basically just an object
that's going to be passed down to every

112
00:06:04.634 --> 00:06:06.643
single resolver, that's all that is.

113
00:06:06.643 --> 00:06:09.889
It's like, this object is going to be,
every time you make a resolver,

114
00:06:09.889 --> 00:06:11.340
it's going to get this object.

115
00:06:11.340 --> 00:06:14.146
And we want to make sure that we
pass down the request that came in,

116
00:06:14.146 --> 00:06:15.895
the request object, so we can share it.

117
00:06:15.895 --> 00:06:18.373
And then there's a shortcut,
we're just going to go ahead and

118
00:06:18.373 --> 00:06:20.680
attach the user here,
which is going to be our req.user.

119
00:06:20.680 --> 00:06:23.035
If we're using that middleware
that we used yesterday,

120
00:06:23.035 --> 00:06:25.991
the authentication middleware that
attaches the user to the request.

121
00:06:25.991 --> 00:06:28.830
That I already had built out for
you, that's going to attach it to

122
00:06:28.830 --> 00:06:31.579
the request for us, if we decide
to use that middleware or not.

123
00:06:31.579 --> 00:06:35.096
If we don't decide to use that
middleware or not, it won't be there,

124
00:06:35.096 --> 00:06:36.416
it's going to be up to us.

125
00:06:36.416 --> 00:06:39.933
So that's a lot of information, but it's
going to make more sense once you start

126
00:06:39.933 --> 00:06:43.456
doing resolvers.
&gt;&gt; Scott Moss: So

127
00:06:43.456 --> 00:06:47.984
your task is to find some way to get
this freely floating GraphQL router

128
00:06:47.984 --> 00:06:50.144
attached to our Express router.

129
00:06:50.144 --> 00:06:55.463
Then set up graphical documentation so
we can look at it, and I'm going to give

130
00:06:55.463 --> 00:07:01.881
you a hint, you're going to do it in here.
&gt;&gt; Scott Moss: You're

131
00:07:01.881 --> 00:07:05.379
going to attach that GraphQL router,
and I have it right here.

132
00:07:05.379 --> 00:07:08.874
You're going to mount that
GraphQL router on the Express app

133
00:07:08.874 --> 00:07:12.510
at /graphql.
&gt;&gt; Scott Moss: And

134
00:07:12.510 --> 00:07:14.627
then you're going to
create another route for,

135
00:07:14.627 --> 00:07:17.423
I'm sorry, you're going to
mount to that graph, /graphql.

136
00:07:17.423 --> 00:07:19.719
Then you're going to create
another graph for GraphiQL.

137
00:07:19.719 --> 00:07:22.253
At the path docs,
I didn't show you how to make GraphiQL so

138
00:07:22.253 --> 00:07:23.874
I'm going to show you how to do that.

139
00:07:23.874 --> 00:07:27.312
And then you're going to start
the server and go to the docs.

140
00:07:27.312 --> 00:07:33.476
So if you just follow the clues and I'm
just going to give you another hint here,

141
00:07:33.476 --> 00:07:38.169
inside of GraphQL router,
this GraphQL is being exported.

142
00:07:38.169 --> 00:07:41.862
Right next to it, there is an index
where the restRouter is being exported.

143
00:07:41.862 --> 00:07:45.604
I would say this is a great place to
export the GraphQL router as well.

144
00:07:45.604 --> 00:07:47.712
And then if you go to the server file,

145
00:07:47.712 --> 00:07:51.050
you can see the restRouter is
being imported from the api.

146
00:07:51.050 --> 00:07:55.178
I would say this is also a great
place to import the GraphQL router.

147
00:07:55.178 --> 00:07:59.674
And then you know how to mount routers,
that GraphQL router, at this point,

148
00:07:59.674 --> 00:08:01.691
is the same thing as a restRouter.

149
00:08:01.691 --> 00:08:04.041
And you saw how we mounted that,

150
00:08:04.041 --> 00:08:09.805
you just need to mount your GraphQL
router on the different path of /GraphQL.

151
00:08:09.805 --> 00:08:14.785
And then as far as GraphiQL, for GraphiQL,

152
00:08:14.785 --> 00:08:20.302
you want to use,
there's a plug in here called,

153
00:08:20.302 --> 00:08:26.582
where is that?
&gt;&gt; Scott Moss: Apollo,

154
00:08:26.582 --> 00:08:31.860
apollo-server-express, there
should be a graphiql,

155
00:08:31.860 --> 00:08:36.072
let me see this,
I forgot the exact name of it.

156
00:08:42.655 --> 00:08:43.356
&gt;&gt; Scott Moss: Sometimes,

157
00:08:43.356 --> 00:08:45.911
I guess I miss TypeScript,
having that there.

158
00:08:52.657 --> 00:08:53.489
&gt;&gt; Scott Moss: Okay, so

159
00:08:53.489 --> 00:08:58.482
I think it is graph-i,
yeah, it's graphiqlExpress,

160
00:08:58.482 --> 00:09:01.810
that's what it's called, okay, so

161
00:09:01.810 --> 00:09:07.121
using graphiqlExpress.
&gt;&gt; Scott Moss: What is the exact

162
00:09:07.121 --> 00:09:11.958
same thing as an Express router, the same
thing as an Express router like this.

163
00:09:11.958 --> 00:09:16.904
The same thing as the GraphQL router
that you are going to be importing,

164
00:09:16.904 --> 00:09:24.596
you need to mount that on /docs.
&gt;&gt; Scott Moss: So

165
00:09:24.596 --> 00:09:30.088
I'll leave the task up.
&gt;&gt; Scott Moss: There's one

166
00:09:30.088 --> 00:09:33.122
option that you have to pass to GraphiQL
that I'm not going to tell you about.

167
00:09:33.122 --> 00:09:35.433
It's either going to break or
you're going to look it up, but

168
00:09:35.433 --> 00:09:38.066
you've got to tell it where,
what's the route for your GraphQL API.

169
00:09:38.066 --> 00:09:41.970
By default, it doesn't know,
it will mount itself, and like, cool, but

170
00:09:41.970 --> 00:09:44.847
I don't know what URL to hit
to talk to GraphQL, right?

171
00:09:44.847 --> 00:09:48.450
Because what the GraphiQL endpoint,
what it does is it's going to load that

172
00:09:48.450 --> 00:09:50.943
interactive docs,
which is basically a react app.

173
00:09:50.943 --> 00:09:54.078
And that react app needs to know
what URL to talk to to get the data,

174
00:09:54.078 --> 00:09:56.475
you have to tell it what
URL in the options object.

175
00:09:56.475 --> 00:10:00.077
But, a quick look at the documentation,
you'll see really fast how to do it or

176
00:10:00.077 --> 00:10:01.341
you'll just get an error.

