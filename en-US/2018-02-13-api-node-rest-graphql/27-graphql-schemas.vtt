WEBVTT

1
00:00:01.959 --> 00:00:03.685
&gt;&gt; Scott Moss: So
we're gonna hop right into schemas,

2
00:00:03.685 --> 00:00:06.740
I'm gonna show some examples and
then we're gonna do some exercises.

3
00:00:08.630 --> 00:00:11.640
So more schemas, I know, we built
some schemas yesterday with Mongoose.

4
00:00:11.640 --> 00:00:14.130
So it's like, why do we need more schemas?

5
00:00:14.130 --> 00:00:16.793
Yeah, we're gonna have more schemas
sitting on top of our Mongoose schemas.

6
00:00:16.793 --> 00:00:19.666
And in our example today,
they're almost gonna seem redundant,

7
00:00:19.666 --> 00:00:21.890
because they're gonna
look almost identical.

8
00:00:21.890 --> 00:00:24.910
At first, they are, eventually we'll
explore and expand on them, but

9
00:00:24.910 --> 00:00:26.450
they're gonna look almost identical.

10
00:00:26.450 --> 00:00:27.960
But yes, we do need more schemas and

11
00:00:27.960 --> 00:00:31.700
that's because GraphQL cannot
work unless there's a schema.

12
00:00:31.700 --> 00:00:33.720
So you have a schema here on your server.

13
00:00:33.720 --> 00:00:35.590
You have a query that's coming in.

14
00:00:35.590 --> 00:00:36.590
It's gonna take that query.

15
00:00:36.590 --> 00:00:41.630
It's gonna match it against the schema,
and if the types and shapes and

16
00:00:41.630 --> 00:00:43.570
field names don't match up,
it's just going to break.

17
00:00:43.570 --> 00:00:45.130
It's not even going to
go to your resolver,

18
00:00:45.130 --> 00:00:48.050
it's just not even going to try to get
data, it's just going to be like, no.

19
00:00:48.050 --> 00:00:51.530
That is not a string, not going to let
you do it, so we need those schemas.

20
00:00:53.110 --> 00:00:57.150
They solve the same problem as mongoose
did yesterday, but on a higher level.

21
00:00:57.150 --> 00:01:00.400
Those Mongoose schemas were for
interacting with our database.

22
00:01:00.400 --> 00:01:02.810
The GraphQL are schemas
are interacted with the API.

23
00:01:02.810 --> 00:01:04.080
It's before the database.

24
00:01:04.080 --> 00:01:08.890
It's like, you send a request that
hits graphql, checks the schemas,

25
00:01:08.890 --> 00:01:13.050
that goes to the resolvers, the resolvers
use the Mongoose schemas to get the data.

26
00:01:13.050 --> 00:01:16.440
Then they respond back to graphql,
graphql validates it again and

27
00:01:16.440 --> 00:01:18.560
then it responds back to the client.

28
00:01:18.560 --> 00:01:20.640
So it's little trippy how that works,

29
00:01:20.640 --> 00:01:22.910
but luckily you don't have
to set a lot of that up.

30
00:01:22.910 --> 00:01:24.190
It's mostly free for us.

31
00:01:25.700 --> 00:01:29.733
So inside those schemas, what we'll be
doing is defining types, queries, and

32
00:01:29.733 --> 00:01:30.396
mutations.

33
00:01:30.396 --> 00:01:34.200
You can think of types
as just like the shapes.

34
00:01:34.200 --> 00:01:39.610
Think of the types as when we made, when
we made models yesterday with Mongoose,

35
00:01:39.610 --> 00:01:41.670
when we made those object models,
and here's a user model.

36
00:01:41.670 --> 00:01:46.640
Here is a song model, here is a Play this
model, those are types inside of graphQL.

37
00:01:46.640 --> 00:01:48.530
Those are just like object shapes.

38
00:01:48.530 --> 00:01:54.395
Queries are functions we can use to query
those types, like to effect those types.

39
00:01:54.395 --> 00:01:56.330
We do a query as like a git request.

40
00:01:56.330 --> 00:01:58.480
If you did a git request and
rest, that's a query.

41
00:01:58.480 --> 00:02:01.830
Any time you wanna retrieve
information from a GraphQL server,

42
00:02:01.830 --> 00:02:02.610
that's called a query.

43
00:02:03.690 --> 00:02:08.070
A mutation is like any time you want
to mutate something on the server.

44
00:02:08.070 --> 00:02:10.870
So that includes creating something,
deleting something,

45
00:02:10.870 --> 00:02:11.900
and updating something.

46
00:02:11.900 --> 00:02:14.510
So you can think of it as delete,
put, and post, that's a mutation.

47
00:02:16.230 --> 00:02:19.110
So if we compare that to
our recipe off yesterday,

48
00:02:19.110 --> 00:02:21.520
we had basically five
different things we could do.

49
00:02:21.520 --> 00:02:24.730
We could get one and get all,
those are queries and

50
00:02:24.730 --> 00:02:26.990
then we could put, post and delete.

51
00:02:26.990 --> 00:02:30.519
Those are mutations.
Does that make sense?

52
00:02:32.520 --> 00:02:37.035
So that's what those what the queries and
mutations and the types and then some like

53
00:02:37.035 --> 00:02:41.358
some helper utilities that we'll find
out like inputs fragments interfaces,

54
00:02:41.358 --> 00:02:45.884
all that types of stuff you'll see likes
pretty simple to build a graph a schema.

55
00:02:45.884 --> 00:02:49.860
Yeah, so the schemas like I said are
needed to check client queries against.

56
00:02:49.860 --> 00:02:52.200
Can be written in quite a few ways,
like there's so

57
00:02:52.200 --> 00:02:54.450
many ways to write a graphql schema.

58
00:02:54.450 --> 00:02:57.240
When graphql first came
out everybody took like

59
00:02:57.240 --> 00:03:01.650
the JavaScript way where they use like
the constructors and did it that way.

60
00:03:01.650 --> 00:03:07.010
Now they say it's more flexible to write
it separately in like a string syntax or

61
00:03:07.010 --> 00:03:09.464
use in a graph QO file,
which is what we're going to do.

62
00:03:09.464 --> 00:03:12.010
We're gonna write all of our
schemas in a graph QO file and

63
00:03:12.010 --> 00:03:15.500
then combine them at the end
versus writing them in JavaScript,

64
00:03:15.500 --> 00:03:19.100
which I think is way more overhead and
a lot more confusing.

65
00:03:19.100 --> 00:03:21.890
So, we'll just write it as like,
a pure string basically.

66
00:03:21.890 --> 00:03:25.800
You'll see can be generated dynamically.

67
00:03:25.800 --> 00:03:27.649
So yes,
you can generate schemas dynamically.

68
00:03:27.649 --> 00:03:30.670
We will not be doing that today
because it's really advanced.

69
00:03:30.670 --> 00:03:33.960
But yeah, you can totally generate
schema dynamically depending on

70
00:03:33.960 --> 00:03:35.550
whatever your AST is.

71
00:03:35.550 --> 00:03:37.390
Depending on what your needs are.

72
00:03:37.390 --> 00:03:40.570
Given this object I want to
generate a schema here and

73
00:03:40.570 --> 00:03:42.290
run it against this
query that's coming in.

74
00:03:42.290 --> 00:03:44.680
So you could literally have a dynamic.

75
00:03:44.680 --> 00:03:48.770
API that changes depending on
the user's roles, and authentication,

76
00:03:48.770 --> 00:03:50.830
and needs, or IP address.

77
00:03:50.830 --> 00:03:55.510
Whatever you want you can create different
schemas that have dynamic qualities,

78
00:03:55.510 --> 00:03:57.040
like dynamic resolvers.

79
00:03:57.040 --> 00:04:00.748
Pretty much anything about GraphiQL can be
dynamic, and it can be changed on-the-fly,

80
00:04:00.748 --> 00:04:02.282
which makes it extremely powerful.

81
00:04:02.282 --> 00:04:08.070
But also easy to mess up, so
you gotta be careful with that.

82
00:04:08.070 --> 00:04:09.810
I ran into that problem before.

83
00:04:09.810 --> 00:04:12.099
Don't wanna be giving somebody else's
data on a multi-tenant system.

84
00:04:14.836 --> 00:04:17.320
&gt;&gt; Scott Moss: It is very strict,
I said, it's like type script.

85
00:04:17.320 --> 00:04:20.860
It's very strict if your queries
don't match up exactly the way

86
00:04:20.860 --> 00:04:24.670
the schema says it needs
to be it just won't work.

87
00:04:24.670 --> 00:04:27.270
And they are composable,
as you'll find out.

88
00:04:27.270 --> 00:04:31.020
Depending on what tools you use on
a server you can compose your schemas

89
00:04:31.020 --> 00:04:33.480
together easily or difficult.

90
00:04:33.480 --> 00:04:36.012
We're gonna use something that
allows it to work it very easily.

