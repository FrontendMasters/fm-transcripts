WEBVTT

1
00:00:04.979 --> 00:00:08.330
&gt;&gt; Scott: Which is protecting
resolvers and testing.

2
00:00:08.330 --> 00:00:09.955
So we're gonna have
an exercise on testing,

3
00:00:09.955 --> 00:00:11.720
we're gonna talk about
protecting resolvers.

4
00:00:11.720 --> 00:00:16.530
There's really not an exercise because
our app is not a production app.

5
00:00:16.530 --> 00:00:19.100
We don't really have any roles and
stuff like that.

6
00:00:19.100 --> 00:00:20.010
But we can talk about it.

7
00:00:20.010 --> 00:00:24.768
So protecting resolvers, so you saw
that I added back the JWT middleware

8
00:00:24.768 --> 00:00:28.292
for,
&gt;&gt; Scott: The path of

9
00:00:28.292 --> 00:00:33.690
/GraphQL right at the beginning of
the app, like we did for the API router.

10
00:00:33.690 --> 00:00:40.730
I added that here.
&gt;&gt; Scott: Where are you?

11
00:00:40.730 --> 00:00:45.718
There we go, so I mounted it here.
&gt;&gt; Scott: Can anybody think

12
00:00:45.718 --> 00:00:47.873
of some downsides of this,

13
00:00:47.873 --> 00:00:52.210
if I block my whole GraphQL router?
&gt;&gt; Speaker 2: Testing is gonna

14
00:00:52.210 --> 00:00:54.254
be a lot harder.
&gt;&gt; Scott: Testing's harder, okay,

15
00:00:54.254 --> 00:00:59.112
what else?
&gt;&gt; Scott: What if my GraphQL router is

16
00:00:59.112 --> 00:01:02.130
responsible for signing up users?

17
00:01:03.700 --> 00:01:07.463
Now you can't sign up users because you've
just blocked off your whole GraphQL API,

18
00:01:07.463 --> 00:01:09.670
because you need to be
signed in to use it, right?

19
00:01:09.670 --> 00:01:10.950
So it's like the same problem as this.

20
00:01:10.950 --> 00:01:13.260
That's why there's
a signin outside of this,

21
00:01:13.260 --> 00:01:14.489
because you need to sign in separately.

22
00:01:15.940 --> 00:01:17.380
So there's a lot of downsides.

23
00:01:18.550 --> 00:01:22.440
With REST, the way we would have solved
this before is we would just make another

24
00:01:22.440 --> 00:01:24.880
router, not using that middleware, right?

25
00:01:24.880 --> 00:01:26.020
We'd make another router.

26
00:01:26.020 --> 00:01:27.790
In GraphQL, we don't really wanna do that.

27
00:01:27.790 --> 00:01:29.480
We don't want many GraphQL routers.

28
00:01:29.480 --> 00:01:30.890
We just want one GraphQL router.

29
00:01:30.890 --> 00:01:34.330
If we make another router, we can
make another schema, more resolvers.

30
00:01:34.330 --> 00:01:35.980
It's just a lot of duplication.

31
00:01:35.980 --> 00:01:40.763
So what we do instead is,
if you don't want your whole GraphQL

32
00:01:40.763 --> 00:01:45.090
router using the exact same global
middleware, then what you would do is,

33
00:01:45.090 --> 00:01:47.170
you would take the logic
out of that middleware.

34
00:01:47.170 --> 00:01:51.060
So whatever this thing is doing,
you would use it on a per resolver basis.

35
00:01:52.120 --> 00:01:54.596
That might sound tedious and
redundant, but if we think about it,

36
00:01:54.596 --> 00:01:57.961
it's actually really flexible.
&gt;&gt; Scott: So

37
00:01:57.961 --> 00:02:01.032
you can use express global middleware,
just like we are with REST, right?

38
00:02:01.032 --> 00:02:03.144
You can lock your whole GraphQL API, but

39
00:02:03.144 --> 00:02:07.470
you can get some really undesired
behavior, like I just described.

40
00:02:07.470 --> 00:02:11.660
Or you can do it on a per resolver basis,
and this is really great for

41
00:02:11.660 --> 00:02:12.880
things like role based systems.

42
00:02:12.880 --> 00:02:14.920
Imagine if you had a role based system.

43
00:02:14.920 --> 00:02:18.330
And you wanted to lock down
literally every single

44
00:02:18.330 --> 00:02:21.060
field that somebody can access,
you can do that.

45
00:02:21.060 --> 00:02:23.835
Because we can write a resolver for
every field, as we just found out.

46
00:02:23.835 --> 00:02:29.594
And because you have that user and
the roles inside the context, you can say,

47
00:02:29.594 --> 00:02:35.362
does this user have the right role to
access the payment field on the org type?

48
00:02:35.362 --> 00:02:36.520
You could do that.

49
00:02:36.520 --> 00:02:39.758
And you can limit that one field
on that entire object per role.

50
00:02:39.758 --> 00:02:42.220
Whereas you can't really
do that easily now.

51
00:02:42.220 --> 00:02:45.670
You have to do a lot of sanitizing
to that mainly yourself.

52
00:02:45.670 --> 00:02:47.573
Or right now, GraphQL is pretty free.

53
00:02:47.573 --> 00:02:51.363
As soon as you get inside your resolver,
does this user have the rights for this,

54
00:02:51.363 --> 00:02:52.820
for this field right here?

55
00:02:52.820 --> 00:02:55.180
Nope, nah, get out of here, done.

56
00:02:55.180 --> 00:02:58.200
Throw an error or just send back null,
depending on what you wanna do.

57
00:02:58.200 --> 00:03:01.010
It can be tedious cuz you're doing
the same thing over and over and

58
00:03:01.010 --> 00:03:03.000
over again to try to help a function.

59
00:03:03.000 --> 00:03:05.970
Put it somewhere, test it,
use it wherever you want.

60
00:03:05.970 --> 00:03:09.460
It's not as bad as it sounds,
if it's just one thing, it's very useful.

61
00:03:09.460 --> 00:03:11.110
I can tell you right now,
I'm doing this for

62
00:03:11.110 --> 00:03:14.394
type, it's pretty much our architecture.

63
00:03:14.394 --> 00:03:18.030
We have a similar role based
system that you will find

64
00:03:18.030 --> 00:03:20.380
AWS where you're like policies and roles.

65
00:03:20.380 --> 00:03:22.397
And this allowed us to
literally lock down,

66
00:03:22.397 --> 00:03:24.748
we can lock down you clicking
a button if we want to.

67
00:03:24.748 --> 00:03:25.668
It's ridiculous.

68
00:03:25.668 --> 00:03:29.517
Because of this, it's really good.

69
00:03:29.517 --> 00:03:31.210
You have way more control obviously.

70
00:03:31.210 --> 00:03:33.380
Like I said, per field level control.

71
00:03:33.380 --> 00:03:37.292
You can lock things down per object,
per whatever, you can lock it down.

72
00:03:37.292 --> 00:03:39.466
But you also have to handle,

73
00:03:39.466 --> 00:03:45.380
you have to decide on how you wanna
handle non authenticated requests.

74
00:03:45.380 --> 00:03:47.037
So you have two options,
you can throw an error,

75
00:03:47.037 --> 00:03:48.381
which will just break the whole query.

76
00:03:48.381 --> 00:03:51.710
For instance, let's say somebody tried to
access, they have access to this object,

77
00:03:51.710 --> 00:03:54.160
but they don't have access to
this field on this object.

78
00:03:54.160 --> 00:03:56.420
So if they tried to access it,
you could throw an error and

79
00:03:56.420 --> 00:03:58.050
therefore they get nothing back.

80
00:03:58.050 --> 00:04:02.520
Or you can just make sure in your
GraphQL schema that you don't put

81
00:04:02.520 --> 00:04:06.000
the exclamation on everything,
and you just return null for it.

82
00:04:06.000 --> 00:04:07.520
So they just don't get that value back.

83
00:04:07.520 --> 00:04:10.350
And their query doesn't break, they
still get back the values they can see,

84
00:04:10.350 --> 00:04:12.300
they just don't get back that one field.

85
00:04:12.300 --> 00:04:14.170
That field will always be null for
them, right?

86
00:04:14.170 --> 00:04:15.850
So it depends on how you wanna do it.

87
00:04:15.850 --> 00:04:17.810
You wanna throw an error,
they shouldn't be accessing it.

88
00:04:17.810 --> 00:04:20.710
Or you just wanna only give them
the stuff that they should have and

89
00:04:20.710 --> 00:04:22.030
take away the non-nulls for the stuff.

90
00:04:22.030 --> 00:04:25.800
So it's totally up to however you wanna
do it, depending on your situation.

91
00:04:25.800 --> 00:04:28.489
But you can do that,
whereas what we did yesterday,

92
00:04:28.489 --> 00:04:31.129
you're really writing your
own system to do that.

93
00:04:31.129 --> 00:04:33.310
And it's gonna be pretty complicated,
I can promise you.

