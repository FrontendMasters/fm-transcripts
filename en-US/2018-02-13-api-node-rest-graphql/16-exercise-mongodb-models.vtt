WEBVTT

1
00:00:00.168 --> 00:00:03.432
&gt;&gt; Scott Moss: So you need to complete
the schemas in the resource models and

2
00:00:03.432 --> 00:00:05.231
then get the model specs to pass.

3
00:00:05.231 --> 00:00:10.388
So every resource, which we only have
three right now, which is playlist,

4
00:00:10.388 --> 00:00:14.999
song and user, theres a .model file,
you need to get them to pass.

5
00:00:14.999 --> 00:00:17.869
Now you might be thinking, well,
I don't know what to put in here.

6
00:00:17.869 --> 00:00:20.694
Well if you run the test
you'll see that it all fills.

7
00:00:20.694 --> 00:00:24.277
The test is descriptive enough to
tell you what fields you need and

8
00:00:24.277 --> 00:00:26.699
what properties need
to be on those fields.

9
00:00:26.699 --> 00:00:28.631
So look at the tests.

10
00:00:28.631 --> 00:00:32.324
If you want to actually look at the tests,
each resource has a .spec file and

11
00:00:32.324 --> 00:00:34.762
you can actually read the test,
it'll tell you.

12
00:00:34.762 --> 00:00:37.637
Like for instance,
if you look at the song model, it says,

13
00:00:37.637 --> 00:00:40.930
a song model should have a title,
even though it's spelled wrong.

14
00:00:40.930 --> 00:00:47.085
Title, it expects it to exist,
it expects the required to be an array.

15
00:00:47.085 --> 00:00:51.915
Now, this is tricky, because I didn't tell
you how to make an array with required.

16
00:00:51.915 --> 00:00:53.675
I only told you how to
do it with a boolean.

17
00:00:53.675 --> 00:00:55.811
So I'm not gonna be a jerk.

18
00:00:55.811 --> 00:00:59.147
I'm actually just gonna show
you how to do this right now.

19
00:00:59.147 --> 00:01:01.842
So right now, before I was like,
you can put required true.

20
00:01:01.842 --> 00:01:04.295
But you can also make
required an array like this.

21
00:01:04.295 --> 00:01:07.407
And the second argument is the custom
error you want to be thrown when this

22
00:01:07.407 --> 00:01:08.232
is not validated.

23
00:01:08.232 --> 00:01:09.857
So like required true.

24
00:01:09.857 --> 00:01:17.460
And you're like, yo,
Dogs must have names homie.

25
00:01:17.460 --> 00:01:21.971
So that is a custom error that's gonna
be thrown when you don't pass it a name.

26
00:01:21.971 --> 00:01:23.649
So the test is looking for
something like this.

27
00:01:23.649 --> 00:01:27.206
So it's saying the required
validation must be an array.

28
00:01:27.206 --> 00:01:30.568
So when that test fails, and you're like,
I don't know how to put in an array for

29
00:01:30.568 --> 00:01:33.405
a required, I thought it was only boolean,
it's talking about this.

30
00:01:33.405 --> 00:01:35.152
This allows you to custom error messages.

31
00:01:35.152 --> 00:01:38.377
This is something so small but
something very helpful.

32
00:01:38.377 --> 00:01:40.058
If you look at the logs
just to see that error, and

33
00:01:40.058 --> 00:01:41.336
be like, I know what's going on.

34
00:01:41.336 --> 00:01:44.527
If you don't do that, Mongoose
will throw the most obscure error.

35
00:01:44.527 --> 00:01:48.995
And it'll be like duplicate key,
1100 dup, you're like, what?

36
00:01:48.995 --> 00:01:50.102
What is that?

37
00:01:50.102 --> 00:01:52.545
I don't know what's going on.
This is way easier to read, so

38
00:01:52.545 --> 00:01:54.798
I highly recommend doing that.

39
00:01:54.798 --> 00:01:56.180
So yeah, get those tests to pass.

40
00:01:56.180 --> 00:01:57.765
All the model tests should pass.

41
00:01:57.765 --> 00:01:59.630
And when I say all the model tests,
let me run the tests so

42
00:01:59.630 --> 00:02:00.877
you can see what I'm talking about.

43
00:02:07.604 --> 00:02:12.392
&gt;&gt; Scott Moss: You see every
single one that has model on it,

44
00:02:12.392 --> 00:02:17.817
which are 11 tests,
they should all be passing.

45
00:02:17.817 --> 00:02:19.597
Pretty much all your tests
should be passing except for

46
00:02:19.597 --> 00:02:21.815
the ones that are in blue right
now because they're being skipped.

47
00:02:21.815 --> 00:02:25.497
So after you get done with this, all your
tests, you should either see all green and

48
00:02:25.497 --> 00:02:26.556
blue, and that's it.

49
00:02:26.556 --> 00:02:27.842
There should be no red.

50
00:02:27.842 --> 00:02:31.594
So again,
use the language that I wrote in the test,

51
00:02:31.594 --> 00:02:36.733
look at the error messages to kind of
figure out what you need to do here.

52
00:02:36.733 --> 00:02:41.763
You know, I'm not really a big fan of
like TDD, I mean who really does TDD?

53
00:02:41.763 --> 00:02:45.301
But on the back end I actually find
myself doing TDD a lot for some reason.

54
00:02:45.301 --> 00:02:46.998
On the front end I can almost never do it.

55
00:02:46.998 --> 00:02:48.450
It's just like I just can't.

56
00:02:48.450 --> 00:02:51.634
I have to build this feature, I gotta test
it out, I gotta check into these browsers.

57
00:02:51.634 --> 00:02:53.656
And then I'll write code to keep it there.

58
00:02:53.656 --> 00:02:56.066
But on the back end I know
exactly what needs to happen.

59
00:02:56.066 --> 00:02:58.878
There's no fragmentation of browsers,

60
00:02:58.878 --> 00:03:02.504
it's gonna run exactly
the same in the same run time.

61
00:03:02.504 --> 00:03:06.168
So it's easy for me to visualize tests,
so I would actually come in and

62
00:03:06.168 --> 00:03:09.909
prefer to have tests on the back end,
and then build my code off of that.

63
00:03:09.909 --> 00:03:11.719
So this is good practice for
that, so think about.

64
00:03:11.719 --> 00:03:15.239
So these tests are done for you, so
if you were given these tests as like,

65
00:03:15.239 --> 00:03:17.860
here, here's some tests,
write the code for this.

66
00:03:17.860 --> 00:03:19.371
This is a good assignment for it.

67
00:03:19.371 --> 00:03:20.793
I think it works very
well on the back end,

68
00:03:20.793 --> 00:03:22.509
I don't think it works that
well on the front end.

69
00:03:22.509 --> 00:03:25.380
&gt;&gt; Speaker 2: It's cuz in the back
end it's data in, data out.

70
00:03:25.380 --> 00:03:26.027
&gt;&gt; Scott Moss: Yeah, exactly.

71
00:03:26.027 --> 00:03:28.541
&gt;&gt; Speaker 2: Like here's your data,
that's posted.

72
00:03:28.541 --> 00:03:29.265
&gt;&gt; Scott Moss: Right.

73
00:03:29.265 --> 00:03:33.167
&gt;&gt; Speaker 2: Or here's a route, and then
you need to serve the appropriate data.

74
00:03:33.167 --> 00:03:37.338
So in the API, it's like okay well,
if it's authenticated,

75
00:03:37.338 --> 00:03:41.209
if it's not authenticated,
give these response codes.

76
00:03:41.209 --> 00:03:42.690
&gt;&gt; Scott Moss: Exactly.
&gt;&gt; Speaker 2: With this data.

77
00:03:42.690 --> 00:03:47.445
It's really just data in,
data out and so you can do entire.

78
00:03:47.445 --> 00:03:50.791
You can write your entire test for
your entire API and

79
00:03:50.791 --> 00:03:55.596
design it just from the data in data out
and then you could do the code later.

80
00:03:55.596 --> 00:03:57.279
&gt;&gt; Scott Moss: That's true,
I never thought about it that way.

81
00:03:57.279 --> 00:03:57.979
Yeah that makes sense.

82
00:03:57.979 --> 00:04:00.373
The front end's like [LAUGH],
there's so much.

83
00:04:00.373 --> 00:04:01.923
There's nothing to do with that at all.

84
00:04:01.923 --> 00:04:03.802
That's like one part of it, so yeah.

85
00:04:03.802 --> 00:04:06.333
&gt;&gt; Speaker 2: Yeah I mean buttons,
interactions.

86
00:04:06.333 --> 00:04:06.843
&gt;&gt; Scott Moss: Right.

87
00:04:06.843 --> 00:04:08.444
&gt;&gt; Speaker 2: Asynchronous data,
all that stuff.

88
00:04:08.444 --> 00:04:10.782
But like especially with
an API like a rest API.

89
00:04:10.782 --> 00:04:12.133
&gt;&gt; Scott Moss: Right.

90
00:04:12.133 --> 00:04:14.896
&gt;&gt; Speaker 2: Even a GraphQL API,
it's data in, data out.

91
00:04:14.896 --> 00:04:18.830
&gt;&gt; Scott Moss: Yep, and
it's crazy because like, it's shifted.

92
00:04:18.830 --> 00:04:21.948
It used to be the fact that we're like,
you would imagine like the back end just

93
00:04:21.948 --> 00:04:24.419
be like way more complicated to
build features around stuff.

94
00:04:24.419 --> 00:04:26.452
And the front end was just like,
this is for kids.

95
00:04:26.452 --> 00:04:29.108
It's a kiddie language,
it's the front end.

96
00:04:29.108 --> 00:04:32.886
But now it's just like, actually the front
end is so difficult to build stuff in now.

97
00:04:32.886 --> 00:04:34.793
And the back end is just like,
this is so easy, this is so easy.

98
00:04:34.793 --> 00:04:36.467
I mean, sure,
DevOps is a whole other thing.

99
00:04:36.467 --> 00:04:39.532
But like building the actual
application on the back end is like,

100
00:04:39.532 --> 00:04:42.668
I find it way more satisfying than
building code for the front end.

101
00:04:42.668 --> 00:04:47.196
Unless I build something that's like super
snazzy on the front with animations or

102
00:04:47.196 --> 00:04:49.242
something, then that's awesome.

103
00:04:49.242 --> 00:04:51.859
But the dev process and
writing the code and

104
00:04:51.859 --> 00:04:56.227
going through it is way more satisfying
on a back end for me personally.

