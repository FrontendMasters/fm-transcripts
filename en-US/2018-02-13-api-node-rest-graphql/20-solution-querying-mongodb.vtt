WEBVTT

1
00:00:02.963 --> 00:00:04.942
&gt;&gt; Scott Moss: So
to everybody, was everybody,

2
00:00:04.942 --> 00:00:07.750
who was not able to go through and
get these done?

3
00:00:07.750 --> 00:00:09.920
I got one.

4
00:00:09.920 --> 00:00:11.390
Anybody else?

5
00:00:11.390 --> 00:00:13.920
No, everybody else is good, okay,
cool, let's work through it then.

6
00:00:13.920 --> 00:00:19.502
Let's see, let me check out.
&gt;&gt; Scott Moss: I'm gonna do this stash.

7
00:00:26.040 --> 00:00:27.040
&gt;&gt; Scott Moss: Okay, so

8
00:00:27.040 --> 00:00:32.921
let's see what we got here,
let me clean this up going.

9
00:00:38.160 --> 00:00:39.523
&gt;&gt; Scott Moss: Boom, okay.

10
00:00:39.523 --> 00:00:42.880
So we did the create one already, that's
just going to return the model.create.

11
00:00:42.880 --> 00:00:46.510
Now remember this model right here is
gonna be the model that's gonna be

12
00:00:46.510 --> 00:00:47.270
passed hit, right?

13
00:00:48.920 --> 00:00:52.910
Like I said this meta programming, so
it can get very difficult to follow what's

14
00:00:52.910 --> 00:00:55.240
going on, and
having code generate other code.

15
00:00:55.240 --> 00:00:58.410
But if you ever get lost then you can come
in here and throw a simple log in here.

16
00:00:59.470 --> 00:01:03.020
Log that model, go over to the spec,
that was on create.

17
00:01:03.020 --> 00:01:05.120
You could put a .only right here.

18
00:01:05.120 --> 00:01:10.735
Only run this test.
&gt;&gt; Scott Moss: And you can run your

19
00:01:10.735 --> 00:01:15.270
own test, and you can see what that model
is, and you should see like four logs.

20
00:01:15.270 --> 00:01:20.030
Each one with a different model, so you
can see here each one of these is a model.

21
00:01:20.030 --> 00:01:22.778
If you were to read it a little carefully
you might even see the name in here

22
00:01:22.778 --> 00:01:23.302
somewhere.

23
00:01:23.302 --> 00:01:25.405
Like for instance, this is the user
one you can see right there.

24
00:01:27.411 --> 00:01:28.157
&gt;&gt; Scott Moss: There's a lot of

25
00:01:28.157 --> 00:01:29.120
stuff going on here.

26
00:01:30.590 --> 00:01:34.950
But yeah, so you can check that out, see
what's going on, see what the model is.

27
00:01:34.950 --> 00:01:36.201
But we already know what's going on, so

28
00:01:36.201 --> 00:01:39.499
we're gonna head back.
&gt;&gt; Scott Moss: And there we go, so

29
00:01:39.499 --> 00:01:41.670
we got the createOne.

30
00:01:41.670 --> 00:01:44.600
This is just gonna call model.create,
this is a Mongoose model.

31
00:01:44.600 --> 00:01:48.830
We're gonna call the create method on it
with the given body, and then updateOne.

32
00:01:48.830 --> 00:01:52.230
So we already have the document to update,
we already have it in memory.

33
00:01:52.230 --> 00:01:55.840
The find one by params when we go make
it below it's going to do that for us.

34
00:01:55.840 --> 00:02:00.540
So we already have a document, and
then we have the update on which we want

35
00:02:02.090 --> 00:02:04.500
to contribute to this document.

36
00:02:04.500 --> 00:02:06.120
We want this document to
have these new properties,

37
00:02:06.120 --> 00:02:08.240
these new values I mean
on these properties.

38
00:02:08.240 --> 00:02:13.210
So we use the merge,
function from the top lodash.merge.

39
00:02:13.210 --> 00:02:15.980
Which is basically just like extend,
except for it's recursive.

40
00:02:15.980 --> 00:02:17.390
It does every single property,

41
00:02:17.390 --> 00:02:19.750
whereas extend just does
only top level properties.

42
00:02:19.750 --> 00:02:22.700
So if you ever use object.extend,
or I mean, we're in ES6.

43
00:02:22.700 --> 00:02:25.470
So you can actually do like this,
right, with objects?

44
00:02:25.470 --> 00:02:29.470
That's not what we want,
we wanna be able to go down fully,

45
00:02:29.470 --> 00:02:31.600
so I'm using merge to do that.

46
00:02:31.600 --> 00:02:36.500
And the way merge works is,
the first objects you pass in,

47
00:02:36.500 --> 00:02:40.930
it's gonna inherit the values from
the ones to the right of it, right?

48
00:02:40.930 --> 00:02:44.210
So that's why I'm not looking
at the return value of this,

49
00:02:44.210 --> 00:02:45.610
cuz it's actually mutating this.

50
00:02:45.610 --> 00:02:48.990
This is a mutation,
it's not a stateless operation.

51
00:02:48.990 --> 00:02:51.600
If I were to do this,
then it is stateless, and

52
00:02:51.600 --> 00:02:56.880
now I need to reference this thing.
&gt;&gt; Scott Moss: All right,

53
00:02:56.880 --> 00:02:59.270
but because I'm doing this,
it's totally fine.

54
00:02:59.270 --> 00:03:00.420
We're good to go.

55
00:03:00.420 --> 00:03:04.220
And now I can just call it .save on
that document, because I enhanced it.

56
00:03:04.220 --> 00:03:06.710
I mixed in these new property values.

57
00:03:06.710 --> 00:03:10.540
So we call it .save.
&gt;&gt; Scott Moss: Delete one,

58
00:03:10.540 --> 00:03:13.540
a document knows how to delete
itself with a .remove method.

59
00:03:13.540 --> 00:03:15.695
So you can call .remove on the document.

60
00:03:18.879 --> 00:03:21.464
A document to get like I said this
one's like, a trick question,

61
00:03:21.464 --> 00:03:23.260
you just return the document
with a promise.

62
00:03:24.430 --> 00:03:28.280
This seems trivial but our example is one,
the reason this is happening is one,

63
00:03:28.280 --> 00:03:30.980
we wanna keep everything
using promises down here,

64
00:03:30.980 --> 00:03:32.460
because that's just what we're doing for
everything.

65
00:03:32.460 --> 00:03:36.400
And at the same time, this is
an opportunity to do other things here,

66
00:03:36.400 --> 00:03:38.000
if you wanna do other things,

67
00:03:38.000 --> 00:03:42.722
you do it right here.
&gt;&gt; Scott Moss: GetAll just does

68
00:03:42.722 --> 00:03:47.360
find on the model with literally
no criteria on the search.

69
00:03:47.360 --> 00:03:48.470
So I put an empty object,

70
00:03:48.470 --> 00:03:51.990
as in, there's no search criteria,
find every single thing for this model.

71
00:03:51.990 --> 00:03:54.210
Find me every song,
find me every whatever.

72
00:03:54.210 --> 00:03:55.095
That's what this is doing.
&gt;&gt; Speaker 2: So

73
00:03:55.095 --> 00:03:59.428
earlier [COUGH] in the lesson you
said anything that starts with find,

74
00:03:59.428 --> 00:04:01.183
you .exec?
&gt;&gt; Scott Moss: That's right,

75
00:04:01.183 --> 00:04:02.700
need a .exec there.

76
00:04:02.700 --> 00:04:03.200
There we go.

77
00:04:05.260 --> 00:04:09.635
And findByParam is findByID
which also needed .exec.

78
00:04:11.068 --> 00:04:14.720
This takes in the model and the ID so
we're just gonna need findByID.

79
00:04:14.720 --> 00:04:17.903
On that model, pass in the ID,
and then we'll either get it or

80
00:04:17.903 --> 00:04:21.400
we won't.
&gt;&gt; Scott Moss: And

81
00:04:21.400 --> 00:04:25.431
if we run the test,
&gt;&gt; Scott Moss: If I get rid of that,

82
00:04:27.489 --> 00:04:32.541
[INAUDIBLE]
&gt;&gt; Scott Moss: Our

83
00:04:32.541 --> 00:04:37.450
test should by passing, so
you should have 12 passing tests.

84
00:04:38.580 --> 00:04:40.650
Does everybody have 12 passing tests?

85
00:04:40.650 --> 00:04:44.240
And if not which test is failing,
so we're gonna fix it.

86
00:04:44.240 --> 00:04:45.640
We're good, okay.

