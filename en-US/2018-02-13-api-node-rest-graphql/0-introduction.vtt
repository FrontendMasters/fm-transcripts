WEBVTT

1
00:00:04.809 --> 00:00:06.828
&gt;&gt; Scott Moss: If you've taken
the V1 course, don't worry about it.

2
00:00:06.828 --> 00:00:09.489
I'm still going to cover things
that might be new to you,

3
00:00:09.489 --> 00:00:12.770
it depends on how far you progressed
since you've taken that course.

4
00:00:12.770 --> 00:00:15.390
There's gonna be some new patterns here
but the skill level is still going to be

5
00:00:15.390 --> 00:00:18.870
around the same so don't worry,
this is not an advanced course.

6
00:00:18.870 --> 00:00:21.660
I'm still gonna be showing how to build
from scratch with a different approach

7
00:00:21.660 --> 00:00:22.890
than what I did last time.

8
00:00:22.890 --> 00:00:25.960
And then of course,
tomorrow we'll be doing GraphQL,

9
00:00:25.960 --> 00:00:29.970
learning how to build it side-by-side and
on top of and all that good stuff.

10
00:00:29.970 --> 00:00:33.090
But let's get right into it,
so my name is Scott Moss.

11
00:00:33.090 --> 00:00:38.820
I'm the CEO and co-founder of Tipe,
it's a hit-list CMS.

12
00:00:38.820 --> 00:00:41.860
I'm also the CEO and co-founder of
OneSpeed, previously AngularClass,

13
00:00:41.860 --> 00:00:42.780
we're in consultancy.

14
00:00:42.780 --> 00:00:44.440
We do tons of JavaScript stuff.

15
00:00:46.050 --> 00:00:48.520
I'm a open source developer
with Angular origins,

16
00:00:48.520 --> 00:00:50.780
it's kind of where I got
my started in open source.

17
00:00:50.780 --> 00:00:54.160
Just working on all things Angular and
then from there just pretty much anything

18
00:00:54.160 --> 00:00:57.590
JavaScript and I think from there,
pretty much anything dope.

19
00:00:57.590 --> 00:01:01.450
So [LAUGH] I worked at a few
tech companies in the Bay

20
00:01:01.450 --> 00:01:05.400
while I was working in open source before
I started some of these companies.

21
00:01:05.400 --> 00:01:09.500
I have taught over,
I don't even know the number, but

22
00:01:09.500 --> 00:01:13.483
I have taught a lot of people how to write
code either on different platforms like

23
00:01:13.483 --> 00:01:16.550
[INAUDIBLE] Masters or
at different schools in the Bay.

24
00:01:16.550 --> 00:01:17.790
I help them to get jobs and stuff,

25
00:01:17.790 --> 00:01:22.000
I'm also a JavaScript student, I look
at further Maths courses all the time.

26
00:01:22.000 --> 00:01:24.510
I actually tune in to the one last week,
was pretty cool.

27
00:01:24.510 --> 00:01:27.900
I still go and learn from people
who have things to teach me.

28
00:01:29.280 --> 00:01:31.640
I tried to write a book,
I don't recommend it.

29
00:01:31.640 --> 00:01:35.390
[LAUGH] That is like the worst thing ever?

30
00:01:35.390 --> 00:01:37.240
Do not try to write a book.

31
00:01:37.240 --> 00:01:40.770
I'm also into fashion, anime,
games, fitness, and music.

32
00:01:40.770 --> 00:01:42.745
So if anybody's into any of that stuff,
come holler at me.

33
00:01:42.745 --> 00:01:43.551
&gt;&gt; Speaker 2: Mario said,

34
00:01:43.551 --> 00:01:47.782
Scott's always looking so fly.
&gt;&gt; Scott Moss: [LAUGH] Appreciate it.

35
00:01:47.782 --> 00:01:51.351
I've been super following Dragon Ball
super lately if anybody's been

36
00:01:51.351 --> 00:01:52.410
watching it.

37
00:01:52.410 --> 00:01:53.580
Did you see last week's episode?

38
00:01:53.580 --> 00:01:55.835
I don't wanna spoil it.

39
00:01:55.835 --> 00:01:57.160
[LAUGH] So good.

40
00:01:57.160 --> 00:01:59.500
But yeah, that's a little bit about me.

41
00:02:00.680 --> 00:02:02.170
So let's just jump right into it.

42
00:02:02.170 --> 00:02:04.020
I'm really excited about this.

43
00:02:04.020 --> 00:02:05.540
What is Node Js?

44
00:02:05.540 --> 00:02:08.580
Anybody wanna tell me,
all right no, don't look at it.

45
00:02:08.580 --> 00:02:11.756
Anybody wanna tell me what
is their definition of

46
00:02:11.756 --> 00:02:16.300
NodeJS?
&gt;&gt; Speaker 3: JavaScript runtime?

47
00:02:16.300 --> 00:02:18.390
&gt;&gt; Scott Moss: It's a JavaScript runtime.

48
00:02:18.390 --> 00:02:20.370
Okay, yeah, I guess it is.

49
00:02:20.370 --> 00:02:23.659
Anybody have another
definition of what Node is?

50
00:02:25.430 --> 00:02:28.182
Just guess, just give it.
&gt;&gt; Speaker 4: Server,

51
00:02:28.182 --> 00:02:30.510
async.
&gt;&gt; Scott Moss: Server,

52
00:02:30.510 --> 00:02:32.350
async, I hear the buzz words, it's coming.
&gt;&gt; Speaker 4: Yeah,

53
00:02:32.350 --> 00:02:35.640
asynchronous JavaScript run time server.
&gt;&gt; Scott Moss: JavaScript

54
00:02:35.640 --> 00:02:37.070
asynchronous server, yeah.

55
00:02:37.070 --> 00:02:39.930
I guess that also describes
what you can do with Node.

56
00:02:39.930 --> 00:02:42.950
I would say what Node is.

57
00:02:42.950 --> 00:02:45.660
Basically it's a platform
built on Chrome's V8 engine.

58
00:02:45.660 --> 00:02:47.900
V8 is the engine that Google,

59
00:02:47.900 --> 00:02:52.120
the Chrome team has inside the Chrome
browser that executes your JavaScript.

60
00:02:52.120 --> 00:02:54.560
Somebody ripped that thing out
of the browser and was like,

61
00:02:54.560 --> 00:02:57.070
I'm gonna allow you to use V8 anywhere.

62
00:02:57.070 --> 00:02:59.120
That's basically what Node is.

63
00:02:59.120 --> 00:03:01.700
But because of that,
because you're no longer in a browser,

64
00:03:01.700 --> 00:03:06.390
which has security issues around,
touching the file system and

65
00:03:06.390 --> 00:03:10.000
stuff like that, we needed a way
to actually do that with Node.

66
00:03:10.000 --> 00:03:11.840
Node has some different
things on top of that, so

67
00:03:11.840 --> 00:03:14.770
you might see something like a module
system, and things like that but

68
00:03:14.770 --> 00:03:17.750
basically its just V8
outside of the browser.

69
00:03:18.760 --> 00:03:22.900
With that though you can build things
like servers and stuff like that.

70
00:03:22.900 --> 00:03:26.490
So, it's created by a person named
Ryan Dahl he's currently at Google.

71
00:03:26.490 --> 00:03:31.790
I think he is working on like tensor flow
right now, some machine learning stuff.

72
00:03:31.790 --> 00:03:36.140
It's maintained by the Node.js Foundation
which has been in the news as of late.

73
00:03:36.140 --> 00:03:39.110
You read it, it's pretty funny.

74
00:03:39.110 --> 00:03:43.600
It is open source, yeah, but
good luck trying to contribute to it.

75
00:03:43.600 --> 00:03:45.730
[LAUGH] Used by pretty much everyone.

76
00:03:45.730 --> 00:03:47.850
Click on that link and
you can see what I mean by everyone.

77
00:03:47.850 --> 00:03:51.320
Pretty much everybody uses Node JS,
somehow, someway.

78
00:03:51.320 --> 00:03:54.500
Maybe not for API's, but for other things.

79
00:03:54.500 --> 00:03:57.220
So everybody pretty much uses it for
something.

80
00:03:57.220 --> 00:04:02.040
It's more than just JavaScript out
the browser, as we'll find out real soon.

81
00:04:02.040 --> 00:04:03.670
Hopefully it's going to
be your best friend,

82
00:04:03.670 --> 00:04:06.100
because it is definitely my best friend.

83
00:04:06.100 --> 00:04:08.070
And programming, that's for sure.

84
00:04:08.070 --> 00:04:11.258
Any questions so far about what Node,
anybody not what Node is yet?

85
00:04:11.258 --> 00:04:12.069
No?

86
00:04:12.069 --> 00:04:15.300
Okay, cool.

87
00:04:15.300 --> 00:04:16.540
So http in Node.

88
00:04:18.090 --> 00:04:21.360
Node comes with like a built-in
module system like I said before,

89
00:04:21.360 --> 00:04:25.000
so the browser hasn't
introduced modules yet.

90
00:04:25.000 --> 00:04:27.280
At least not in like the latest browsers,

91
00:04:27.280 --> 00:04:32.180
I think maybe some edge version of some
browser might has module at this point but

92
00:04:32.180 --> 00:04:35.104
they don't have modules yet so
you got to use some type of build system.

93
00:04:35.104 --> 00:04:38.690
But node has a module system built in,
and with that there is a built in module

94
00:04:38.690 --> 00:04:42.000
that we can use in node to actually create
network based apps, it's called http,

95
00:04:42.000 --> 00:04:43.640
that's the name of the module.

96
00:04:43.640 --> 00:04:44.630
If you are using number four,

97
00:04:44.630 --> 00:04:48.180
you know you can use the require
function to require a module.

98
00:04:48.180 --> 00:04:51.010
Which basically just loads
it into your closure.

99
00:04:51.010 --> 00:04:51.920
There's one called http,

100
00:04:51.920 --> 00:04:56.840
so if you were to require http you would
get an http object that has all these

101
00:04:56.840 --> 00:05:00.350
methods on it that'll allow you to
build network based applications.

102
00:05:00.350 --> 00:05:05.580
But you shouldn't use it, because it's
just a library, it's not a framework.

103
00:05:05.580 --> 00:05:07.920
And relatively speaking, it is low level.

104
00:05:07.920 --> 00:05:10.730
I say low level because like, relatively
speaking for node it's low level.

105
00:05:10.730 --> 00:05:12.780
But for other frameworks, rust or

106
00:05:12.780 --> 00:05:14.600
something, it's probably
not that low level.

107
00:05:14.600 --> 00:05:16.960
But yeah you probably shouldn't use it,
there's a lot of things you have to do.

108
00:05:16.960 --> 00:05:20.900
Managing sockets,
streaming, error handling,

109
00:05:20.900 --> 00:05:22.370
a lot of stuff you have
to set up manually.

110
00:05:22.370 --> 00:05:25.490
And if you're writing multiple apps,
you'll be doing that every single time,

111
00:05:25.490 --> 00:05:27.870
eventually you'll build your own
framework with your own abstractions.

112
00:05:27.870 --> 00:05:32.070
When you should've been, there's already
one out there, should've just used that.

113
00:05:32.070 --> 00:05:38.060
So do not use that module unless you need
some lower level thing that's happening.

114
00:05:38.060 --> 00:05:40.480
I do not recommend using the http module.

115
00:05:40.480 --> 00:05:44.550
Instead, you should use a framework that
is based off that module that has a lot of

116
00:05:44.550 --> 00:05:47.750
people from the community working on it,
and making it better.

117
00:05:47.750 --> 00:05:49.100
So good luck using that.

118
00:05:49.100 --> 00:05:51.859
You still need to develop abstractions
around the http module to build servers.

119
00:05:53.570 --> 00:05:54.440
Any questions on that?

120
00:05:55.630 --> 00:05:59.555
Just don't use it.

121
00:05:59.555 --> 00:06:02.062
So, some node server frameworks here,

122
00:06:02.062 --> 00:06:05.466
can't list all of them cause there's so
many of them.

123
00:06:05.466 --> 00:06:10.236
I'm just gonna list some that
I found from my research.

124
00:06:10.236 --> 00:06:12.516
So connect seems to be like,

125
00:06:12.516 --> 00:06:17.510
connectors like the original
OG server framework for note.

126
00:06:17.510 --> 00:06:21.940
Pretty much all the good frameworks
have drawn inspiration from Connect or

127
00:06:21.940 --> 00:06:24.270
actually use it inside
their code at one point.

128
00:06:24.270 --> 00:06:29.330
So Connect is like, it's a framework but
it's like a lower level framework as well.

129
00:06:29.330 --> 00:06:31.250
People built frameworks on top of Connect.

130
00:06:31.250 --> 00:06:33.240
Then they build frameworks on top of that.

131
00:06:33.240 --> 00:06:34.160
It's kinda crazy.

132
00:06:34.160 --> 00:06:36.380
Connect is like one of those
foundational frameworks.

133
00:06:36.380 --> 00:06:38.390
Express the one we will be
using in this workshop.

134
00:06:38.390 --> 00:06:40.670
It was originally based of Connect.

135
00:06:40.670 --> 00:06:42.901
And then [INAUDIBLE] Express three,

136
00:06:42.901 --> 00:06:46.030
I think they got rid of
the dependency of Connect.

137
00:06:46.030 --> 00:06:47.770
They still kept the same syntax.

138
00:06:47.770 --> 00:06:49.199
They built their own version of Connect.

139
00:06:50.620 --> 00:06:55.580
Koa, created from the express
creators is like Wxpress,

140
00:06:55.580 --> 00:06:57.900
first start off as like
a user generators but

141
00:06:57.900 --> 00:07:01.891
then when nobody cared about
generators anymore now they use.

142
00:07:01.891 --> 00:07:03.020
So, it's basically that.

143
00:07:03.020 --> 00:07:04.030
Check it out if you want.

144
00:07:04.030 --> 00:07:07.600
Hapi is another another
framework different approach.

145
00:07:07.600 --> 00:07:09.050
Sells.

146
00:07:09.050 --> 00:07:13.400
Yeah, Sails was like an attempt
to do a rails for node.

147
00:07:13.400 --> 00:07:14.860
It's based on Express.

148
00:07:14.860 --> 00:07:15.920
Check it out.

149
00:07:15.920 --> 00:07:19.260
And then, there's so many more just like
some new types [INAUDIBLE] popping up.

150
00:07:19.260 --> 00:07:22.320
There's just so
many things out there it's ridiculous, but

151
00:07:22.320 --> 00:07:25.970
Express is pretty much the defactor
of framework for the Node community.

152
00:07:25.970 --> 00:07:27.520
It's pretty much what everybody uses.

153
00:07:27.520 --> 00:07:28.830
If you ever downloaded a plugin for

154
00:07:28.830 --> 00:07:31.300
Node, they probably have
an Express version for it.

155
00:07:31.300 --> 00:07:33.596
It can be a safe bet to
use Express with Node.

