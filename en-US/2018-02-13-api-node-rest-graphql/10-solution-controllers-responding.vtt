WEBVTT

1
00:00:00.081 --> 00:00:02.636
&gt;&gt; Scott Moss: Hopefully you had enough
time to work through this challenge and

2
00:00:02.636 --> 00:00:03.923
get some of those tests to pass.

3
00:00:03.923 --> 00:00:09.620
So remember, ignore the model specs and
also you should ignore the query specs.

4
00:00:09.620 --> 00:00:14.450
The test you're gonna be looking for to
pass are gonna be the route based specs,

5
00:00:14.450 --> 00:00:15.980
and we'll see what those
look like in a minute.

6
00:00:17.440 --> 00:00:18.410
Let's just hop right into it.

7
00:00:19.810 --> 00:00:24.860
So you were tasked with filling
out these functions down here.

8
00:00:26.350 --> 00:00:30.650
So again, these functions right here,
because we're doing meta programming,

9
00:00:30.650 --> 00:00:33.790
meta programming as in like we're
making code that makes code, right?

10
00:00:34.910 --> 00:00:38.230
These functions are going to be
used to generate controllers for

11
00:00:38.230 --> 00:00:40.070
all of our resources, for all our models.

12
00:00:40.070 --> 00:00:41.390
So they're pretty generic,

13
00:00:41.390 --> 00:00:45.080
which is why they are functions that
return functions and take in a model.

14
00:00:45.080 --> 00:00:48.600
So note that these functions are gonna
be using every single resource, and

15
00:00:48.600 --> 00:00:50.220
that's why they're so generic.

16
00:00:50.220 --> 00:00:52.790
The other approach is what I did on v1,
is where I went in,

17
00:00:52.790 --> 00:00:55.480
I wrote these controllers individually for
every single resource.

18
00:00:55.480 --> 00:00:58.490
But ultimately,
they're probably gonna be the same.

19
00:00:58.490 --> 00:01:02.730
To get around the fact that maybe we
don't need this one controller to be so

20
00:01:02.730 --> 00:01:07.130
generic for this one resource,
I allow you to extend it with overrides.

21
00:01:07.130 --> 00:01:10.170
So you can override it per model,
if you want, it's totally fine.

22
00:01:10.170 --> 00:01:11.320
But let's just hop right into it.

23
00:01:12.760 --> 00:01:16.100
So for the createOne, basically,
I told you, go ahead and

24
00:01:16.100 --> 00:01:19.180
assume that the controller methods
are fleshed out, they're already there.

25
00:01:19.180 --> 00:01:21.940
I mocked them all out to return promises,
so they should be fine.

26
00:01:21.940 --> 00:01:23.460
They all just return test data, all right?

27
00:01:23.460 --> 00:01:25.220
That's all they do,
they don't call the database,

28
00:01:25.220 --> 00:01:27.250
we're not getting into databases yet.

29
00:01:27.250 --> 00:01:31.175
So for createOne, what we wanna do is
we wanna say controllers.createOne.

30
00:01:31.175 --> 00:01:32.688
We satisfy the arguments.

31
00:01:32.688 --> 00:01:35.700
If you go look at the createOne method,
it takes in a model, takes in a body.

32
00:01:37.410 --> 00:01:40.740
Right, the model is passed in,
the body is on the request out body.

33
00:01:40.740 --> 00:01:44.330
It's the json body that's passed
in from the request, right?

34
00:01:44.330 --> 00:01:46.610
So we get that,
it's already been json parsed, so

35
00:01:46.610 --> 00:01:47.600
it's just an object at this point.

36
00:01:48.820 --> 00:01:51.340
We let this controller do its thing,
we don't really care what it's doing.

37
00:01:51.340 --> 00:01:53.730
And then because we're creating one,

38
00:01:53.730 --> 00:01:56.410
that means this is probably
happening on a post request.

39
00:01:56.410 --> 00:01:57.330
And on a post request,

40
00:01:57.330 --> 00:02:01.130
I'm assuming you want the resource back
that you are requesting to create, right?

41
00:02:01.130 --> 00:02:04.900
So let's send back that resource,
which in this case is going to be doc.

42
00:02:04.900 --> 00:02:09.630
The reason I put doc,
because in Mongo, adoc is short for

43
00:02:09.630 --> 00:02:13.310
a document, and a document is like
a thing you can save in a database.

44
00:02:13.310 --> 00:02:16.760
So if you go back to like relational
databases, you have like tables, right?

45
00:02:16.760 --> 00:02:20.750
A table in Mongo is a model,
basically, or a collection, and

46
00:02:20.750 --> 00:02:22.980
then a document is just
an instance of that.

47
00:02:22.980 --> 00:02:28.790
So if we have a song model,
then each song is a document.

48
00:02:28.790 --> 00:02:29.810
Does that makes sense?

49
00:02:29.810 --> 00:02:34.510
So this document is an instance
of whatever model was passed in.

50
00:02:34.510 --> 00:02:35.940
So we take that document.

51
00:02:35.940 --> 00:02:41.730
We set the status to 201 because,
technically, res http status(201) for

52
00:02:41.730 --> 00:02:46.080
a successful post and the test is checking
for that, if you don't change it.

53
00:02:46.080 --> 00:02:49.570
Then, I just JSON the doc, right?

54
00:02:49.570 --> 00:02:51.400
And then I'm just handling an error here.

55
00:02:51.400 --> 00:02:53.680
I'm doing this next thing that
we have not talked about.

56
00:02:53.680 --> 00:02:55.961
So if you did it, great,
if you didn't, don't worry about it.

57
00:02:55.961 --> 00:02:59.313
We're gonna talk about that next,
next [LAUGH].

58
00:03:01.426 --> 00:03:06.135
&gt;&gt; Scott Moss: UpdateOne, this one is,
there's two ways you can do this.

59
00:03:06.135 --> 00:03:08.638
And if you follow the clues
you would have did it one way,

60
00:03:08.638 --> 00:03:10.810
if you didn't you just
recreated your own way.

61
00:03:10.810 --> 00:03:14.470
So if you would have followed
the clues you would have realized that

62
00:03:14.470 --> 00:03:18.070
updateOne is probably gonna be bound
to a route that looks like this.

63
00:03:18.070 --> 00:03:21.823
So we'll have some like,
let's not use user, /song/:id.

64
00:03:21.823 --> 00:03:24.580
I wanna do a put request to that.

65
00:03:24.580 --> 00:03:26.290
That's basically an update right there,
right?

66
00:03:26.290 --> 00:03:29.080
It's a put request to some resource, and

67
00:03:29.080 --> 00:03:31.480
then the id of the thing
that you wanna update.

68
00:03:31.480 --> 00:03:34.395
And then in the body is the stuff
that you're trying to update.

69
00:03:34.395 --> 00:03:38.350
I wanna update the name to be new name,
right?

70
00:03:38.350 --> 00:03:40.720
That's what that request looks like,
right?

71
00:03:40.720 --> 00:03:44.830
So because it has a parameter on it,
and we know if we go back to what we

72
00:03:44.830 --> 00:03:50.630
did before on the routers, we know that
we have a handler that handles params.

73
00:03:50.630 --> 00:03:57.730
We can assume, and I told you this thing
is eventually going to find the associated

74
00:03:57.730 --> 00:04:01.600
resource by that given id and attach
it to the request, and send it along.

75
00:04:01.600 --> 00:04:05.070
We can assume that inside this updateOne,

76
00:04:05.070 --> 00:04:08.250
that that resource is going to
be attached to the request.

77
00:04:08.250 --> 00:04:10.320
So if you put the clues together,
you would have landed there.

78
00:04:10.320 --> 00:04:13.160
It's kinda hard to follow, but it's there.

79
00:04:13.160 --> 00:04:17.610
We'll talk about why it's called
docFromId and how you can change that.

80
00:04:17.610 --> 00:04:18.120
But basically,

81
00:04:18.120 --> 00:04:22.800
you get that resource that was attached
to the request from the params function.

82
00:04:22.800 --> 00:04:24.503
You get the update from the body.

83
00:04:24.503 --> 00:04:27.840
And then you pass it in to
controllers.updateOne to satisfy it,

84
00:04:27.840 --> 00:04:32.026
which if you'll look takes the document
to update, and then the actual update and

85
00:04:32.026 --> 00:04:32.950
it does nothing.

86
00:04:34.660 --> 00:04:38.030
So it does that, and then,
again, this is also 201,

87
00:04:38.030 --> 00:04:40.220
send that back, catch the error, nixed it.

88
00:04:41.350 --> 00:04:47.770
deleteOne is very similar,
because deleteOne also is the DELETE,

89
00:04:47.770 --> 00:04:51.730
followed by the resource, followed by
the id of the thing you want to delete.

90
00:04:51.730 --> 00:04:54.110
There's no payload here,
you just need the id.

91
00:04:54.110 --> 00:04:54.980
And you do the same thing.

92
00:04:54.980 --> 00:04:59.890
So that means that param's function is
going to attach the found document for

93
00:04:59.890 --> 00:05:03.270
the given resource and
attach it to the request.

94
00:05:03.270 --> 00:05:06.440
So because I already have that,
I can just patch that in as well.

95
00:05:06.440 --> 00:05:08.636
And then it will do it's thing and
then it will also delete it.

96
00:05:11.727 --> 00:05:16.110
&gt;&gt; Scott Moss: getOne is pretty simple,
because we know get is a request that

97
00:05:16.110 --> 00:05:21.460
looks like this, and because we're
getting one, it also has an id.

98
00:05:21.460 --> 00:05:24.750
Get this one with this id,
right, that's what that is.

99
00:05:24.750 --> 00:05:29.190
So that means it's also going to pass
through our find by parameters function.

100
00:05:29.190 --> 00:05:33.869
And it's going to grab that document and
attach it to the request and

101
00:05:33.869 --> 00:05:35.440
so forth and so forth.

102
00:05:35.440 --> 00:05:38.819
&gt;&gt; Speaker 2: Why does it have to update?

103
00:05:38.819 --> 00:05:41.503
&gt;&gt; Scott Moss: Yeah I guess it should
just be just like everyone else.

104
00:05:41.503 --> 00:05:44.100
Let's just say docFromId, there we go.

105
00:05:45.490 --> 00:05:49.840
So getOne does that, passes it in, and I
mean you already have it at this point so

106
00:05:49.840 --> 00:05:52.400
you really could have just
returned it with JSON here.

107
00:05:52.400 --> 00:05:54.470
But I'm just trying to pass
everything through the controllers,

108
00:05:54.470 --> 00:05:57.290
just in case we do something else there,
which we may or may not.

109
00:05:57.290 --> 00:06:00.146
But I mean, it's literally already here,
you can just respond,

110
00:06:00.146 --> 00:06:03.363
unless you're gonna do something extra,
which, like I said, we might.

111
00:06:03.363 --> 00:06:08.421
Like for instance, if you wanted to do
join tables, which Mongo doesn't support.

112
00:06:08.421 --> 00:06:10.798
But Mongoose uses this
thing called population,

113
00:06:10.798 --> 00:06:14.090
which is like mocks join tables on
the fly, then you'll do it there.

114
00:06:14.090 --> 00:06:16.935
So that's why it's great to just
send it through just in case.

115
00:06:16.935 --> 00:06:19.592
But at the end of the day,
this thing is gonna return this,

116
00:06:19.592 --> 00:06:22.470
it's gonna return the same
thing by default.

117
00:06:22.470 --> 00:06:26.000
An then getAll, just literary,
just gets all the stuff on this model.

118
00:06:26.000 --> 00:06:27.306
Give all the documents on this model,

119
00:06:27.306 --> 00:06:30.060
it's gonna give you back an array of
documents, and you do the same thing.

120
00:06:31.110 --> 00:06:33.770
And then the one that's pretty much been
used everywhere is this findByParams.

121
00:06:35.020 --> 00:06:40.550
So this one takes in a request, response,
next, and it takes in a fourth argument.

122
00:06:40.550 --> 00:06:45.040
And that argument is gonna be whatever was
on the parameter that you subscribed for.

123
00:06:45.040 --> 00:06:47.500
So for instance, if I go back to
restRouter, I say, hey, look for

124
00:06:47.500 --> 00:06:48.670
this parameter.

125
00:06:48.670 --> 00:06:51.020
So if I look for a parameter called id,

126
00:06:51.020 --> 00:06:53.310
it's gonna pass that in as
a fourth argument, right?

127
00:06:53.310 --> 00:06:57.595
And I can register for any parameter and
how does it know there's a parameter id?

128
00:06:57.595 --> 00:06:58.830
Because I called it id down here.

129
00:07:00.200 --> 00:07:05.284
See that, I said hey, I'm making
a route for /:id which is a parameter.

130
00:07:05.284 --> 00:07:06.830
When you get that id, run this function.

131
00:07:06.830 --> 00:07:09.659
And then that function is gonna
do whatever it needs to do and

132
00:07:09.659 --> 00:07:11.764
then pass it down to
wherever it needs to go.

133
00:07:11.764 --> 00:07:15.217
So if I did a request to slash,
this is playlist.

134
00:07:15.217 --> 00:07:21.798
So if I say I wanna do a GET
to /playlist/id, right?

135
00:07:21.798 --> 00:07:25.176
If I did a request to there
what's gonna happen is,

136
00:07:25.176 --> 00:07:30.530
the first thing that's gonna happen it's
going to execute this one right here.

137
00:07:30.530 --> 00:07:35.042
So it's going to get the param, or

138
00:07:35.042 --> 00:07:41.585
get playlist by id, so
it's gonna do that first.

139
00:07:41.585 --> 00:07:44.505
Which is up here,
that function's gonna do it.

140
00:07:44.505 --> 00:07:48.910
And that's because it actually came down
here and was like, there's a /:id, id,

141
00:07:48.910 --> 00:07:51.959
I know what I'm supposed to do with id,
I'm supposed to do this.

142
00:07:51.959 --> 00:07:54.360
It's the same name, if I change this to
something else, it's not gonna do it.

143
00:07:55.380 --> 00:07:56.680
It has to be the same name.

144
00:07:56.680 --> 00:08:02.850
Right, if I had another parameter here,
this is still only gonna run for id.

145
00:08:02.850 --> 00:08:05.800
The id that's passed in as a fourth
argument, it's still only gonna be id,

146
00:08:05.800 --> 00:08:06.560
it's not gonna be thing.

147
00:08:06.560 --> 00:08:08.440
I would have to make another one for
thing.

148
00:08:09.690 --> 00:08:10.849
To say this is what I wanna do with thing.

149
00:08:14.030 --> 00:08:17.211
&gt;&gt; Scott Moss: So then once it does that,
it gets the playlist by id,

150
00:08:17.211 --> 00:08:21.386
then that param function right here
is going to send the control over to

151
00:08:21.386 --> 00:08:24.107
the original function
that was going to run.

152
00:08:24.107 --> 00:08:26.929
In this case, a GET to
/playlist/:id would be this one, so

153
00:08:26.929 --> 00:08:29.540
then it will execute this function.

154
00:08:29.540 --> 00:08:31.520
But by the time it executes this function,

155
00:08:31.520 --> 00:08:33.540
it already attached
the document to the request.

156
00:08:34.720 --> 00:08:37.770
Before it passed the control
over to this function,

157
00:08:39.690 --> 00:08:42.540
this function right here already
attached the document to the request,

158
00:08:43.560 --> 00:08:45.420
which is whatever that
playlist is by the id.

159
00:08:46.520 --> 00:08:50.302
Or if it didn't find it, maybe it
threw an error, whatever you wanna do.

160
00:08:50.302 --> 00:08:51.773
So by the time we get
here we already have it.

161
00:08:51.773 --> 00:08:53.420
And that's true for
all these methods here.

162
00:08:53.420 --> 00:08:58.130
So any get, put, or delete for
this route, whatever they execute, this

163
00:08:58.130 --> 00:09:01.970
function already attached the document
to the request automatically for you.

164
00:09:03.400 --> 00:09:05.830
So that's what this function is
right here, that's what it's doing.

165
00:09:05.830 --> 00:09:07.070
So you can see it takes the model,

166
00:09:07.070 --> 00:09:10.730
it takes the id, It finds that document
on that model with that given id.

167
00:09:10.730 --> 00:09:12.201
Here's the document.

168
00:09:12.201 --> 00:09:14.374
If for whatever reason it
didn't find the document,

169
00:09:14.374 --> 00:09:15.832
that means the id you got was wrong.

170
00:09:15.832 --> 00:09:17.952
So I mean you figure out
what you'd wanna do, but

171
00:09:17.952 --> 00:09:21.693
I'm just gonna throw an error here, like
we just didn't find anything with that id.

172
00:09:21.693 --> 00:09:25.850
If you did find it, you attach it
to request, so request.docFromId,

173
00:09:25.850 --> 00:09:27.738
you can pick whatever you want.

174
00:09:27.738 --> 00:09:28.850
You pick whatever name you want.

175
00:09:28.850 --> 00:09:32.130
It doesn't matter as long as you don't
override something that's already

176
00:09:32.130 --> 00:09:34.620
there like body or something like that.

177
00:09:34.620 --> 00:09:37.710
I picked a generic name,
cuz it's the document from the id.

178
00:09:37.710 --> 00:09:41.965
If you were writing these controllers
in each single resource individually,

179
00:09:41.965 --> 00:09:45.590
then you might put req.user,
or req.song, or req.playlist.

180
00:09:45.590 --> 00:09:48.460
But because this is a generic
controller for every single resource,

181
00:09:48.460 --> 00:09:51.780
I picked a generic name, docFromId.

182
00:09:51.780 --> 00:09:54.540
So that's how I can reference
document from id up here,

183
00:09:55.540 --> 00:09:58.330
cuz it's being passed
down from this function.

184
00:09:58.330 --> 00:10:02.234
This function runs first, and then when it
calls next, which we'll learn about next,

185
00:10:02.234 --> 00:10:04.047
it sends control over to the next thing.

186
00:10:07.264 --> 00:10:08.278
&gt;&gt; Scott Moss: And
then you catch the error and

187
00:10:08.278 --> 00:10:11.289
you throw an error,
&gt;&gt; Scott Moss: That's it.

188
00:10:11.289 --> 00:10:19.155
So if you run this test,
&gt;&gt; Scott Moss: You

189
00:10:19.155 --> 00:10:21.829
should definitely see some fills.

190
00:10:21.829 --> 00:10:23.420
And you can ignore those,
right, the models.

191
00:10:25.250 --> 00:10:28.070
But all the routes should be passing.

192
00:10:28.070 --> 00:10:30.911
So right here, /playlist should GET,
POST the playlist.

193
00:10:33.442 --> 00:10:36.479
&gt;&gt; Scott Moss: /user GET and POST, /song
GET and POST, notice we're only doing

194
00:10:36.479 --> 00:10:40.330
getting posts for these resources, we're
not doing, put and delete, and get all.

195
00:10:40.330 --> 00:10:42.392
And that's because we're gonna
be writing tests later, and

196
00:10:42.392 --> 00:10:43.750
that's what I'm gonna have you all do.

197
00:10:44.810 --> 00:10:48.603
But yeah, those are the tests you
wanted to see that were passing,

198
00:10:48.603 --> 00:10:53.362
ignore the model ones, and definitely
ignore these right here cuz it's x'd out.

199
00:10:53.362 --> 00:10:56.289
When you see something like
this in Mocha or Jasmine,

200
00:10:56.289 --> 00:10:58.400
that means the test was skipped.

201
00:10:58.400 --> 00:11:01.130
They didn't fail, they didn't pass,
they were skipped.

202
00:11:01.130 --> 00:11:02.110
These tests got skipped.

203
00:11:02.110 --> 00:11:04.750
I should have skipped these too,
but it's all good.

204
00:11:04.750 --> 00:11:08.571
So if you wanna learn how to skip a test,
if anybody wants to figure that out,

205
00:11:08.571 --> 00:11:11.347
you can just put an x next to describe,
it'll skip it.

206
00:11:11.347 --> 00:11:14.958
You can put it next to an it,
it'll skip it.

207
00:11:14.958 --> 00:11:22.473
If you wanna just run one test only,
you can do, where's it at?

208
00:11:24.226 --> 00:11:28.454
&gt;&gt; Scott Moss: If you just
wanna run one test, come here,

209
00:11:31.914 --> 00:11:34.130
&gt;&gt; Scott Moss: You can just do .only.

210
00:11:34.130 --> 00:11:37.680
So you can come in and
say I only wanna run this, so

211
00:11:37.680 --> 00:11:41.040
you say .only, and you run it again.

212
00:11:41.040 --> 00:11:44.860
It'll only run that test and
all of its children, see?

213
00:11:44.860 --> 00:11:45.670
And then you're good.

214
00:11:45.670 --> 00:11:46.843
So that's very helpful for development.

215
00:11:46.843 --> 00:11:50.569
So you can be like, I only wanna
run that and then I wanna watch it.

216
00:11:50.569 --> 00:11:53.109
And then now this test
is always evaluating, so

217
00:11:53.109 --> 00:11:56.171
whenever you save your code,
it's always watching it.

218
00:11:56.171 --> 00:12:00.279
I guess it just didn't
want to watch it at all.

219
00:12:00.279 --> 00:12:00.961
Let's try that.

220
00:12:00.961 --> 00:12:03.446
&gt;&gt; Speaker 3: Watch is a Mocha feature?

221
00:12:03.446 --> 00:12:04.770
&gt;&gt; Scott Moss: Yeah, it's a Mocha feature.

222
00:12:04.770 --> 00:12:06.860
I guess it just didn't wanna watch.

223
00:12:06.860 --> 00:12:10.529
Well, I'm using web pack Mocha,
which is a modified version of it, so

224
00:12:10.529 --> 00:12:14.430
it just doesn't wanna do that right now,
for some reason.

225
00:12:14.430 --> 00:12:15.490
But yeah, you would watch it like that.

226
00:12:15.490 --> 00:12:16.830
Really good for development.

227
00:12:16.830 --> 00:12:17.880
Just keep the test running as

228
00:12:19.060 --> 00:12:21.050
you're writing your feature to make
sure you didn't break anything.

229
00:12:21.050 --> 00:12:21.985
That way you don't have to like,

230
00:12:21.985 --> 00:12:26.250
write out this huge feature, now I'm gonna
go back and test it, and everything broke.

231
00:12:26.250 --> 00:12:28.630
And you're just like, dang,
where did it break, where did it break?

232
00:12:28.630 --> 00:12:31.060
Just keep it open,
keep your tests executing.

233
00:12:31.060 --> 00:12:36.914
I know some of you all keep it running
in your dock inside of your IDE.

234
00:12:36.914 --> 00:12:40.057
If you're using WebStorm or
something like that, that's a good idea.

235
00:12:40.057 --> 00:12:42.855
You could do that in Atom and VSCode, too.

