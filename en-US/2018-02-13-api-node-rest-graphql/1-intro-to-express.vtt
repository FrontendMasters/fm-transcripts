WEBVTT

1
00:00:02.910 --> 00:00:04.810
&gt;&gt; Scott Moss: So why express?

2
00:00:04.810 --> 00:00:07.950
Like I said, it's the go to for creating
API's with node currently right now and

3
00:00:07.950 --> 00:00:10.840
you'll see in a minute why that is.

4
00:00:10.840 --> 00:00:14.724
Other frameworks are based off of
Express which was based off Connect, so

5
00:00:14.724 --> 00:00:18.060
it's a pretty good choice,
tons of plug-ins integrations.

6
00:00:18.060 --> 00:00:21.729
It's pretty much like I said,
if you are using some third party service,

7
00:00:21.729 --> 00:00:25.100
I don't know let me, like you see,
we're gonna be using GraphQL,

8
00:00:25.100 --> 00:00:27.120
they have an express plugin for it.

9
00:00:27.120 --> 00:00:31.160
They just went ahead and made one, than if
we're using something like not name brand

10
00:00:31.160 --> 00:00:33.660
server framework, good luck, there's
probably not gonna be a plugin for it.

11
00:00:33.660 --> 00:00:35.360
Or the thing that you made yourself,
good luck,

12
00:00:35.360 --> 00:00:37.140
you gotta build the integration yourself.

13
00:00:37.140 --> 00:00:40.610
So Express pretty much has all
the plugins integrations for

14
00:00:40.610 --> 00:00:45.710
anything interacting with
server side APIs with note.

15
00:00:45.710 --> 00:00:48.530
Plenty of resources out there,
their documentation is really legit.

16
00:00:49.570 --> 00:00:51.430
There's tons of blog posts and
stuff out there, so

17
00:00:51.430 --> 00:00:53.790
you can pretty much rely heavily on that.

18
00:00:53.790 --> 00:00:57.190
Very easy to use, fast to develop and

19
00:00:57.190 --> 00:01:00.140
I find it very extremely easy to test,
if you write tests.

20
00:01:00.140 --> 00:01:01.190
Some people here don't write tests,

21
00:01:01.190 --> 00:01:05.720
that's fine if you don't write tests,
that's cool but when you do write tests,

22
00:01:05.720 --> 00:01:09.085
because you will eventually,
Express makes it really easy to do that.

23
00:01:09.085 --> 00:01:16.212
Any questions on that, no?

24
00:01:16.212 --> 00:01:18.775
Okay, so some of the features,
has declarative routing.

25
00:01:18.775 --> 00:01:23.146
Like, you can do exact routing, pattern
matching, globs, parameter matching and

26
00:01:23.146 --> 00:01:25.940
pretty much anything you
could think of with routing,

27
00:01:25.940 --> 00:01:28.085
you could pretty much do it with Express.

28
00:01:28.085 --> 00:01:31.843
So if you wanna throw a regex in there,
you wanna throw some starts in there,

29
00:01:31.843 --> 00:01:35.837
you wanna throw the exact thing, you wanna
throw some options, you could do it,

30
00:01:35.837 --> 00:01:36.860
it's pretty easy.

31
00:01:36.860 --> 00:01:39.931
Use the middleware functions to
run serially on your request.

32
00:01:39.931 --> 00:01:44.319
We'll get into middleware but
you can think of them as like,

33
00:01:44.319 --> 00:01:48.548
hooks before your actual
endpoint gets invoked, right?

34
00:01:48.548 --> 00:01:51.573
You have the thing that is actually
going to get the resource and

35
00:01:51.573 --> 00:01:54.442
before that you may have some
functions that run serially.

36
00:01:54.442 --> 00:01:58.179
This function, then this function,
then this function, this function, and

37
00:01:58.179 --> 00:02:01.890
then finally run the last function, so
that is kinda like what middleware is.

38
00:02:01.890 --> 00:02:06.720
Powerful response options, you can pretty
much send back whatever you want, and

39
00:02:06.720 --> 00:02:09.930
from JSON to static files,
you can send back streams.

40
00:02:09.930 --> 00:02:13.850
You can stream directly from a database,
you can redirect, set headers,

41
00:02:13.850 --> 00:02:17.300
pretty much everything you need from API,
pretty flexible.

42
00:02:17.300 --> 00:02:21.220
It's database agnostic,
doesn't care what database you are using,

43
00:02:21.220 --> 00:02:23.560
because it doesn't hook
in to the database.

44
00:02:23.560 --> 00:02:26.330
So, you can use whatever you want,
as many databases as you want,

45
00:02:26.330 --> 00:02:28.190
however you want to use them,
doesn't really matter.

46
00:02:28.190 --> 00:02:33.520
And then there's tons, tons,
tons of other stuff that Express gives us.

47
00:02:35.660 --> 00:02:37.534
Any questions on Express?

48
00:02:37.534 --> 00:02:42.290
No, all right, so getting started,

49
00:02:42.290 --> 00:02:47.195
this is like the easiest Express app you

50
00:02:47.195 --> 00:02:51.170
can probably make right here.

51
00:02:51.170 --> 00:02:55.398
That's express right there, you can see,
so if you've never used node before,

52
00:02:55.398 --> 00:02:58.790
some of the stuff might be like,
well is what this require stuff.

53
00:02:58.790 --> 00:03:02.130
That's like the quote of like
a script type on the server side,

54
00:03:02.130 --> 00:03:05.350
using require is like I wanna load in
this other JavaScript file, right?

55
00:03:05.350 --> 00:03:08.750
So once you npm install it, or
you all install it wherever,

56
00:03:08.750 --> 00:03:11.543
you'll have Express and
then you make a new app.

57
00:03:11.543 --> 00:03:14.804
You register a route for
the index which is a slash and

58
00:03:14.804 --> 00:03:18.360
then you respond to that route
by using the JSON method and

59
00:03:18.360 --> 00:03:22.350
then you list it on whatever
port you want, and that's it.

60
00:03:22.350 --> 00:03:26.150
So now you're able to do a get
request to the index, and

61
00:03:26.150 --> 00:03:29.710
receive a JSON object with
okay true on port 3000.

62
00:03:29.710 --> 00:03:33.810
That's the most basic Express
app you can make right there.

63
00:03:34.830 --> 00:03:37.790
Any questions on how simple that is?

64
00:03:37.790 --> 00:03:40.240
Or anybody wanna ask some questions
about what's going on here?

65
00:03:40.240 --> 00:03:43.418
This looks confusing, is there something
here you've never seen before?

66
00:03:43.418 --> 00:03:46.030
No, okay.

