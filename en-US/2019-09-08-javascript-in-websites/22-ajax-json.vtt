WEBVTT

1
00:00:00.000 --> 00:00:03.407
&gt;&gt; Brian Holt: We had a good time
building an application with dogs and

2
00:00:03.407 --> 00:00:05.197
sliding pictures and such.

3
00:00:05.197 --> 00:00:07.150
In the afternoon,
we're gonna look at more dogs.

4
00:00:07.150 --> 00:00:10.256
I don't think anyone's
gonna be upset by that, but

5
00:00:10.256 --> 00:00:14.789
this time we're gonna get other dogs
which might be less good in my opinion.

6
00:00:14.789 --> 00:00:17.130
But still, dogs are a good thing.

7
00:00:17.130 --> 00:00:19.544
So we just did making your
site interactive here.

8
00:00:19.544 --> 00:00:22.639
We're gonna go do this
one here called AJAX.

9
00:00:24.570 --> 00:00:28.590
I alluded to earlier that AJAX stands for
asynchronous JavaScript in XML.

10
00:00:29.790 --> 00:00:34.985
When this technique was invented
15 years ago, 10 years ago,

11
00:00:34.985 --> 00:00:40.383
we were using JavaScript to request
more information from a server.

12
00:00:40.383 --> 00:00:44.580
And that server was always
serving back to XML.

13
00:00:44.580 --> 00:00:46.575
XML basically looks like HTML.

14
00:00:46.575 --> 00:00:50.644
It's data represented in almost as XML.

15
00:00:50.644 --> 00:00:53.744
Or sorry, as HTML.

16
00:00:53.744 --> 00:00:58.265
It's kinda the other way around, actually,
that HTML is a subset of XML, but

17
00:00:58.265 --> 00:00:59.373
who's counting?

18
00:00:59.373 --> 00:01:03.363
Nonetheless, you'd never have to care,
because now we don't use XML anymore.

19
00:01:03.363 --> 00:01:06.741
But we still call it AJAX,
because that's just what it's called.

20
00:01:06.741 --> 00:01:09.810
So when I say AJAX,
what I mean is that I've loaded a page.

21
00:01:09.810 --> 00:01:13.934
And after I've loaded the page, I wanna
request more data from the server, right?

22
00:01:13.934 --> 00:01:17.168
So that could be like requesting
more pictures of dogs which is

23
00:01:17.168 --> 00:01:18.356
what we're gonna do.

24
00:01:18.356 --> 00:01:21.675
It could be requesting the weather or
something like that.

25
00:01:21.675 --> 00:01:26.181
Or maybe you have like if you're on
Netflix.com and you start scrolling down,

26
00:01:26.181 --> 00:01:29.628
Netflix doesn't load all those
videos all at once, right?

27
00:01:29.628 --> 00:01:33.282
It starts requesting them as
you start scrolling down so

28
00:01:33.282 --> 00:01:35.624
that it can be more faster, right?

29
00:01:35.624 --> 00:01:42.961
So I'm going to show you how to
request dog pictures using AJAX.

30
00:01:42.961 --> 00:01:46.446
So we are going to use AJAX
to request data from an API,

31
00:01:46.446 --> 00:01:49.166
because we love acronyms as developers.

32
00:01:49.166 --> 00:01:52.504
So we talked about API's before in terms
of that is how you interact with like

33
00:01:52.504 --> 00:01:53.926
swiper or something like that.

34
00:01:53.926 --> 00:01:57.881
But when I say API in this sense,
I'm meaning there is some

35
00:01:57.881 --> 00:02:02.346
company out there providing to you,
an API to request data from.

36
00:02:02.346 --> 00:02:04.538
So a good example of that would
be like the Twitter API, right?

37
00:02:04.538 --> 00:02:08.060
I can go on and I can say, hey,
give me all the tweets for this person.

38
00:02:08.060 --> 00:02:10.691
And Twitter server will
give that back to you.

39
00:02:10.691 --> 00:02:16.050
The one that we're gonna use is from
dog dot CEO and I'm not joking.

40
00:02:16.050 --> 00:02:22.169
So if I come up here dog-ceo/dog-api.

41
00:02:23.684 --> 00:02:25.166
&gt;&gt; Brian Holt: My favorite
part is the little logo there.

42
00:02:25.166 --> 00:02:27.497
That's amazing, okay?

43
00:02:29.874 --> 00:02:33.333
&gt;&gt; Brian Holt: So this is a free
API that its basic premise is so

44
00:02:33.333 --> 00:02:37.349
that you can test out things and
learn how to use APIs.

45
00:02:39.060 --> 00:02:42.252
So, if I actually go grab
this little URL right here.

46
00:02:42.252 --> 00:02:47.929
And I copy and paste that into a new,
this is quite small so

47
00:02:47.929 --> 00:02:51.724
I'll make it a little bigger for you.

48
00:02:51.724 --> 00:02:58.185
You can see here US is probably gonna
look like something like this, right.

49
00:02:58.185 --> 00:03:03.472
This is a bunch of information
that this API is giving you

50
00:03:03.472 --> 00:03:09.222
back that it has a status of success and
a message of this URL.

51
00:03:09.222 --> 00:03:11.651
And as you might imagine,

52
00:03:11.651 --> 00:03:17.401
if you open that URL in your browser,
it's a picture of a doc.

53
00:03:17.401 --> 00:03:20.867
So this might look familiar to
this actually kind of looks

54
00:03:20.867 --> 00:03:23.623
a little bit like JavaScript, doesn't it?

55
00:03:23.623 --> 00:03:27.884
Well, that's because this is something
called JSON, which stands or

56
00:03:27.884 --> 00:03:29.811
JavaScript Objects Notation.

57
00:03:29.811 --> 00:03:31.476
So this is technically a valid JavaScript.

58
00:03:31.476 --> 00:03:34.128
I can actually literally copy and

59
00:03:34.128 --> 00:03:38.574
paste this into my
&gt;&gt; Brian Holt: code right here.

60
00:03:38.574 --> 00:03:39.272
You don't have to do this.

61
00:03:39.272 --> 00:03:42.623
But if I did this,
const object equals block.

62
00:03:42.623 --> 00:03:46.014
That is valid JavaScript, right there.

63
00:03:47.856 --> 00:03:49.549
&gt;&gt; Brian Holt: And
this is what JSON looks like,

64
00:03:49.549 --> 00:03:53.181
it's basically a JavaScript object
that you get back from the server.

65
00:03:56.105 --> 00:03:58.986
&gt;&gt; Brian Holt: So I have a plug in
here that actually makes this look

66
00:03:58.986 --> 00:04:00.132
a little bit nicer.

67
00:04:00.132 --> 00:04:02.157
So if I change this back to JSON.

68
00:04:02.157 --> 00:04:04.827
It makes it a little bit nicer to look at.

69
00:04:04.827 --> 00:04:06.146
What is mine called?

70
00:04:06.146 --> 00:04:09.733
I forgot.
Let me look at my extensions.

71
00:04:09.733 --> 00:04:12.943
So every browser has this,

72
00:04:12.943 --> 00:04:18.812
the one that I'm using is
I forgot which one it is.

73
00:04:21.829 --> 00:04:23.618
&gt;&gt; Brian Holt: Plugins, nope.

74
00:04:23.618 --> 00:04:29.350
Extensions can't remember which one it is.

75
00:04:29.350 --> 00:04:33.548
In any case, if you say like,
Firefox, Jason, plug in or

76
00:04:33.548 --> 00:04:38.026
something like that,
it will be like the first thing on here.

77
00:04:38.026 --> 00:04:40.119
JSON view, I think that's what I'm using.

78
00:04:40.119 --> 00:04:42.582
Same thing with Chrome.

79
00:04:42.582 --> 00:04:43.661
And you're just installed and

80
00:04:43.661 --> 00:04:45.536
then whenever it detects
you're getting JSON back.

81
00:04:45.536 --> 00:04:51.616
And just display it in a much
nicer fashion than otherwise

82
00:04:51.616 --> 00:04:58.719
I would definitely suggest grabbing
something like that, okay?

83
00:04:58.719 --> 00:05:07.673
So again, if I go back to this,
&gt;&gt; Brian Holt: That in and

84
00:05:07.673 --> 00:05:10.300
of itself,
this is not a very nice web page, right?

85
00:05:11.980 --> 00:05:16.108
But it's giving me back an image so
I could display this nicely, right?

86
00:05:16.108 --> 00:05:18.339
And if you can see here
that it's a nice looking,

87
00:05:18.339 --> 00:05:20.197
I think it's an Australian cattle dog.

88
00:05:23.112 --> 00:05:23.662
&gt;&gt; Brian Holt: Right, so

89
00:05:23.662 --> 00:05:26.785
we can use this information to
display pictures to the user.

