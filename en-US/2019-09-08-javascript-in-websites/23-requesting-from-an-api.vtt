WEBVTT

1
00:00:00.310 --> 00:00:01.650
&gt;&gt; Brian Holt: So
let's go ahead and do that, so

2
00:00:01.650 --> 00:00:05.470
I'm just gonna copy this HTML
here that I have in the page.

3
00:00:05.470 --> 00:00:08.740
I'm gonna make a new folder here.

4
00:00:08.740 --> 00:00:13.138
New folder,
this is gonna be the doggos project, and

5
00:00:13.138 --> 00:00:15.990
I'm gonna open that with VS Code.

6
00:00:18.601 --> 00:00:19.297
&gt;&gt; Brian Holt: Get rid of this other one.

7
00:00:26.730 --> 00:00:30.479
&gt;&gt; Brian Holt: Okay, doggos,
I gonna go ready on Firefox, okay.

8
00:00:30.479 --> 00:00:32.997
So now I have my doggos project,

9
00:00:32.997 --> 00:00:37.757
I'm gonna create a new index.html,
so save index.html,

10
00:00:37.757 --> 00:00:44.303
paste all that business in there
&gt;&gt; Brian Holt: Okay,

11
00:00:44.303 --> 00:00:46.614
and I'm going to go create a doggos.js.

12
00:00:48.035 --> 00:00:49.995
&gt;&gt; Brian Holt: But let's do this as well.

13
00:00:54.475 --> 00:00:56.539
&gt;&gt; Brian Holt: So,
I just added this thing right here.

14
00:00:56.539 --> 00:00:59.578
I think the important part
here is the charset=UTF-8.

15
00:01:05.354 --> 00:01:08.234
&gt;&gt; Brian Holt: Okay, once you have
that going, I want you to go ahead and

16
00:01:08.234 --> 00:01:11.010
create a doggos.js,
which we have linked down here.

17
00:01:13.798 --> 00:01:17.329
&gt;&gt; Brian Holt: Okay, so
save that as doggos.js.

18
00:01:23.217 --> 00:01:25.731
&gt;&gt; Brian Holt: And
we're gonna write some JavaScript.

19
00:01:27.483 --> 00:01:30.444
&gt;&gt; Brian Holt: So I'm gonna go ahead and

20
00:01:30.444 --> 00:01:35.661
I'll close a bunch of this other stuff,
and

21
00:01:35.661 --> 00:01:40.456
I'm going to open, in my browser here,

22
00:01:40.456 --> 00:01:46.262
from the desktop, doggosindex.html, okay?

23
00:01:46.262 --> 00:01:47.908
I have doggos showing up there.

24
00:01:50.487 --> 00:01:53.718
&gt;&gt; Brian Holt: And now, we're gonna write
some code that's actually gonna go out,

25
00:01:53.718 --> 00:01:56.423
grab that information from that API,
this information.

26
00:01:58.485 --> 00:01:59.709
&gt;&gt; Brian Holt: This one?

27
00:01:59.709 --> 00:02:00.337
This one.

28
00:02:00.337 --> 00:02:03.748
It's gonna grab this from the API and
it's gonna use that data, okay?

29
00:02:06.500 --> 00:02:10.015
&gt;&gt; Brian Holt: So the first thing
I'm gonna do here is I'm gonna

30
00:02:10.015 --> 00:02:14.404
put that URL in there, so
I'm gonna say const BREEDS_URL.

31
00:02:14.404 --> 00:02:18.116
So I'm gonna put this in screaming caps
like we talked about earlier because

32
00:02:18.116 --> 00:02:19.918
this is never gonna change, right?

33
00:02:19.918 --> 00:02:22.776
BREEDS_URL =

34
00:02:22.776 --> 00:02:32.776
"https://dog.ceo/api/breeds/image/random".

35
00:02:34.435 --> 00:02:39.888
This is literally just
a URL that your JavaScript

36
00:02:39.888 --> 00:02:45.343
is going to go request and
get the data back from.

37
00:02:47.445 --> 00:02:50.838
&gt;&gt; Brian Holt: Then we're gonna
do something called fetch,

38
00:02:50.838 --> 00:02:55.712
which has nothing to do with dogs [LAUGH]
&gt;&gt; Brian Holt: But

39
00:02:55.712 --> 00:02:57.600
is appropriate in the context, so

40
00:02:57.600 --> 00:03:04.259
I'm gonna say fetch
&gt;&gt; Brian Holt: BREEDS_URL.

41
00:03:04.259 --> 00:03:06.716
So this is gonna go out and

42
00:03:06.716 --> 00:03:12.580
actually request this from
the dogs.ceo server, right?

43
00:03:15.182 --> 00:03:18.744
&gt;&gt; Brian Holt: Now as you might imagine,
this is not instant, right?

44
00:03:18.744 --> 00:03:22.310
It takes a second to go out,
connect to the internet, then go and

45
00:03:22.310 --> 00:03:25.028
find the server,
make a request for the server.

46
00:03:25.028 --> 00:03:28.192
The server then has to do something,
process it and then give it back to right?

47
00:03:28.192 --> 00:03:33.740
That takes time, or
it's the asynchronous part of Ajax, right?

48
00:03:33.740 --> 00:03:36.840
So you have to say, hey, go do this.

49
00:03:36.840 --> 00:03:38.966
Then once you get it back, .then.

50
00:03:43.168 --> 00:03:46.775
&gt;&gt; Brian Holt: You're gonna get back
some sort of response from the server.

51
00:03:50.550 --> 00:03:51.888
&gt;&gt; Brian Holt: And
actually lets just do it this way.

52
00:03:51.888 --> 00:03:56.536
We're gonna say run this function whenever
you get back the data from the server, so

53
00:03:56.536 --> 00:03:59.760
your gonna get some sort of
response back from the server.

54
00:04:01.210 --> 00:04:02.631
Okay, good so far?

55
00:04:07.619 --> 00:04:09.193
&gt;&gt; Brian Holt: We then we have
to process that information.

56
00:04:09.193 --> 00:04:14.772
We have to let the,
&gt;&gt; Brian Holt: Because

57
00:04:14.772 --> 00:04:16.488
if we are gonna fetch
something from breeds.URL.

58
00:04:16.488 --> 00:04:18.325
This doesn't actually know
what is gonna get back.

59
00:04:18.325 --> 00:04:19.765
We know what it's gonna get back.

60
00:04:19.765 --> 00:04:22.105
But we have to let it know what
it's going to get back, right?

61
00:04:22.105 --> 00:04:25.685
It could be an image, it could be
more JavaScript, it could be CSS,

62
00:04:25.685 --> 00:04:27.645
it could be a zip file.

63
00:04:28.915 --> 00:04:32.280
This makes no assumption about
what it's gonna get back, okay?

64
00:04:32.280 --> 00:04:40.073
So what I'm gonna do here is I'm
gonna go into return response.json(),

65
00:04:40.073 --> 00:04:45.327
cuz we know this is gonna
come back as JSON, right?

66
00:04:45.327 --> 00:04:50.296
So this is going to process this
response into something that we can use.

67
00:04:52.509 --> 00:04:53.487
&gt;&gt; Brian Holt: Okay?

68
00:04:53.487 --> 00:04:54.626
With me so far?

69
00:04:57.124 --> 00:05:00.167
&gt;&gt; Brian Holt: After it processes it,
we're gonna say, .then again.

70
00:05:02.645 --> 00:05:09.868
&gt;&gt; Brian Holt: We're gonna have our data,
so we're gonna say function data.

71
00:05:09.868 --> 00:05:13.497
Now this data is whatever
the server gave back to us,

72
00:05:13.497 --> 00:05:17.125
so for
now I'm gonna say console.log(data), so

73
00:05:17.125 --> 00:05:21.590
we can see what that data looks
like coming back from the server.

74
00:05:23.400 --> 00:05:25.220
Just save that.

75
00:05:25.220 --> 00:05:30.015
I'm gonna open my console here,
and dock to the bottom.

76
00:05:31.279 --> 00:05:32.578
&gt;&gt; Brian Holt: Put in console.

77
00:05:32.578 --> 00:05:36.184
There we go, so
I'm going to refresh this, and

78
00:05:36.184 --> 00:05:39.984
notice I'm getting this
down here at the bottom.

79
00:05:42.738 --> 00:05:46.539
&gt;&gt; Brian Holt: So notice this object
that we're getting back from the server

80
00:05:46.539 --> 00:05:49.690
looks remarkably similar to what this is,
right?

81
00:05:51.270 --> 00:05:53.620
Spoiler, that's exactly what it is.

82
00:05:53.620 --> 00:05:54.820
So this is how we go out and

83
00:05:54.820 --> 00:05:57.550
get more information from
a different server, right?

84
00:05:57.550 --> 00:06:00.690
Now, I'm showing you how to
get it from the dogs.CEO API.

85
00:06:00.690 --> 00:06:02.836
This could be your own API, right?

86
00:06:02.836 --> 00:06:09.789
Maybe you have some sort of image service
that you store all your images on.

87
00:06:09.789 --> 00:06:13.026
You can just go keep requesting more
images from, or this might come from

88
00:06:13.026 --> 00:06:16.600
the Twitter API, or the Facebook API,
or there's 10 million other things.

89
00:06:16.600 --> 00:06:18.340
One of my favorite one
is the Dark Sky API,

90
00:06:18.340 --> 00:06:21.530
which will give you current weather
data for wherever you request it from.

91
00:06:21.530 --> 00:06:22.914
That's pretty cool, right?

92
00:06:22.914 --> 00:06:26.028
Or dog pictures.

93
00:06:26.028 --> 00:06:27.356
Is there anything better?

94
00:06:27.356 --> 00:06:28.795
I submit maybe not.

