WEBVTT

1
00:00:00.000 --> 00:00:04.047
&gt;&gt; Brian Holt: So just to kind of
drive home a little point here,

2
00:00:04.047 --> 00:00:07.916
if I put console.log,
which will log first?

3
00:00:11.380 --> 00:00:14.529
&gt;&gt; Brian Holt: What do you think's
gonna log first, line 11 or line 8?

4
00:00:14.529 --> 00:00:18.014
This is a trick question, so you
probably wanna go with the trick answer.

5
00:00:18.014 --> 00:00:19.437
&gt;&gt; Speaker 2: Line 11.

6
00:00:19.437 --> 00:00:20.641
&gt;&gt; Brian Holt: Line 11 is gonna run first.

7
00:00:24.391 --> 00:00:25.159
&gt;&gt; Brian Holt: I gotta save it first.

8
00:00:25.159 --> 00:00:29.126
Reason being is this takes time, right?

9
00:00:29.126 --> 00:00:30.312
It's the same reason if I did a set
timeout 1000 right there, right?

10
00:00:30.312 --> 00:00:37.359
This one would have logged first because
this starts executing first, right?

11
00:00:37.359 --> 00:00:40.951
But ultimately, this will run first,
because this takes some time to do,

12
00:00:40.951 --> 00:00:42.215
whereas this is instant.

13
00:00:42.215 --> 00:00:45.421
Something else that's kinda cool.

14
00:00:45.421 --> 00:00:47.943
If I come in here to
the network inspector,

15
00:00:47.943 --> 00:00:50.612
it's relatively similar in the Chrome one.

16
00:00:50.612 --> 00:00:53.128
Check this out.

17
00:00:53.128 --> 00:00:55.071
So I'm gonna ask for all.

18
00:00:55.071 --> 00:01:02.599
Now if I refresh this page, you can see
here that I see this thing right there.

19
00:01:02.599 --> 00:01:03.578
So I'm gonna click on that.

20
00:01:03.578 --> 00:01:04.957
Notice it's from dog.ceo.

21
00:01:04.957 --> 00:01:06.970
It's a fetch and it's JSON.

22
00:01:06.970 --> 00:01:08.756
So I click on it.

23
00:01:08.756 --> 00:01:14.020
And I can see down here what I'm
actually getting back from the API.

24
00:01:17.009 --> 00:01:19.333
&gt;&gt; Brian Holt: So
I can see what cookies went out with it.

25
00:01:19.333 --> 00:01:21.885
We're not gonna talk about cookies today,
but more importantly,

26
00:01:21.885 --> 00:01:22.788
I can see the response.

27
00:01:22.788 --> 00:01:26.093
So I can actually see what came
back here from it as well.

28
00:01:29.987 --> 00:01:30.871
&gt;&gt; Brian Holt: So
that's pretty cool as well.

29
00:01:30.871 --> 00:01:34.589
So you can see things that are going
in and out of your application as well.

30
00:01:37.835 --> 00:01:39.542
&gt;&gt; Brian Holt: It's a useful
debugging thing if things aren't

31
00:01:39.542 --> 00:01:41.633
coming back like you expect them to or
something like that.

32
00:01:41.633 --> 00:01:46.649
So dogs.ceo runs a server.

33
00:01:46.649 --> 00:01:47.901
And we're saying, hey,
give us a dog picture, and

34
00:01:47.901 --> 00:01:48.766
then it gives us back a dog picture.

35
00:01:48.766 --> 00:01:52.847
So they're running a server
that we're getting data from,

36
00:01:52.847 --> 00:01:54.776
somewhere out in the ether.

37
00:01:54.776 --> 00:01:56.842
I have no idea where it is,
nor does it matter.

38
00:01:56.842 --> 00:01:58.818
All right, sorry, go ahead.

39
00:01:58.818 --> 00:02:01.049
&gt;&gt; Speaker 3: So when we get the data and
process into JSON,

40
00:02:01.049 --> 00:02:02.531
we didn't save it anywhere.

41
00:02:02.531 --> 00:02:08.161
So how does the second function know that
data mean is whatever data we get back?

42
00:02:08.161 --> 00:02:13.072
&gt;&gt; Brian Holt: So we know that here when
we called .then, whatever we return here,

43
00:02:13.072 --> 00:02:17.574
right, once that finishes,
it's going to be injected here.

44
00:02:17.574 --> 00:02:23.567
So we just know that whatever return
here is going to be given to us here.

45
00:02:23.567 --> 00:02:26.167
&gt;&gt; Speaker 3: Because
that's how fetch works?

46
00:02:26.167 --> 00:02:28.897
&gt;&gt; Brian Holt: That's how fetch works,
yeah, that's exactly right.

47
00:02:32.667 --> 00:02:33.167
&gt;&gt; Brian Holt: Good question.

48
00:02:35.770 --> 00:02:38.221
&gt;&gt; Brian Holt: But you're right, this
response definitely does go out of scope,

49
00:02:38.221 --> 00:02:40.640
so I couldn't say console.log(response)
down here, right?

50
00:02:40.640 --> 00:02:44.158
That wouldn't work because
this is out of scope now.

51
00:02:44.158 --> 00:02:47.088
But now when we have this data right here,

52
00:02:47.088 --> 00:02:50.457
this means that we can
access the dog pictures.

53
00:02:50.457 --> 00:02:54.369
So this is actually literally
a JavaScript object now.

54
00:02:54.369 --> 00:02:59.012
So I can actually say,
console.log(data.message).

55
00:03:01.235 --> 00:03:02.618
&gt;&gt; Brian Holt: Instead of
logging up the whole object.

56
00:03:02.618 --> 00:03:06.147
So now if I refresh here,
notice it's actually just the image here.

57
00:03:06.147 --> 00:03:09.790
So I just wanna throw some
terminology out there so

58
00:03:09.790 --> 00:03:12.747
you're just aware what's happening.

59
00:03:12.747 --> 00:03:15.141
But you don't really have to
care too much about that.

60
00:03:15.141 --> 00:03:17.685
What fetch returns is
something called a promise,

61
00:03:17.685 --> 00:03:21.245
which means it's basically an object
that represents a future value.

62
00:03:23.661 --> 00:03:25.162
&gt;&gt; Brian Holt: There's not
a lot more to it than that,

63
00:03:25.162 --> 00:03:28.592
because we're just using the promise right
away, but that's what's happening here.

64
00:03:28.592 --> 00:03:29.666
These are called promises.

