WEBVTT

1
00:00:00.430 --> 00:00:03.850
&gt;&gt; Shirley Wu: Sometimes,
maybe you don't want to do it by hand,

2
00:00:03.850 --> 00:00:08.560
because it's like still a lot of work, and
that's when this thing called D3 shapes,

3
00:00:08.560 --> 00:00:13.400
the shapes library the module
comes in super super useful.

4
00:00:13.400 --> 00:00:17.418
So this one D3 shape is the module and
then,

5
00:00:17.418 --> 00:00:22.089
it essentially has some
convenience functions for

6
00:00:22.089 --> 00:00:26.867
you, for drawing like pie charts,
or line charts or

7
00:00:26.867 --> 00:00:32.623
aerial curves these are some of
the things that it helps you do,

8
00:00:32.623 --> 00:00:37.618
and this module is absolutely
amazing because It takes

9
00:00:37.618 --> 00:00:41.418
care of figuring out that D attribute, so

10
00:00:41.418 --> 00:00:46.492
you don't have to.
&gt;&gt; Shirley Wu: So like all of these

11
00:00:46.492 --> 00:00:51.068
you can like, you just pass in data and
they like figures out what the D attribute

12
00:00:51.068 --> 00:00:55.638
should be and then you take that and then
you apply it and then you just get this.

13
00:00:55.638 --> 00:01:02.990
So basically, d3-shape calculates
the path attribute so we don't have to.

14
00:01:02.990 --> 00:01:05.170
So for example, this little line chart,

15
00:01:05.170 --> 00:01:10.790
this is actually the same temperature data
that we were doing with the bar chart.

16
00:01:12.360 --> 00:01:17.628
So,
&gt;&gt; Shirley Wu: This,

17
00:01:17.628 --> 00:01:24.940
the de-attribute for
this line chart looks like this.

18
00:01:24.940 --> 00:01:28.926
And that's definitely not something
that you want to write by hand,

19
00:01:28.926 --> 00:01:31.679
ever.
&gt;&gt; Shirley Wu: So

20
00:01:31.679 --> 00:01:35.410
d3 shapes makes this easy.

21
00:01:35.410 --> 00:01:41.321
And here are some other
examples of d3 shapes.

22
00:01:41.321 --> 00:01:44.660
So this is basically an area chart.

23
00:01:45.920 --> 00:01:48.450
Actually, let me,
can you guys see that fine?

24
00:01:48.450 --> 00:01:54.670
So these are like area charts and
then just different curves that connect

25
00:01:54.670 --> 00:01:58.906
the different points like this one's
kind of curvy and this one's block e.

26
00:02:00.520 --> 00:02:02.040
And those are, and

27
00:02:02.040 --> 00:02:08.300
that's something that you can also specify
with a curve generator with D3 shape.

28
00:02:08.300 --> 00:02:11.710
So there's this thing called Curves, and

29
00:02:12.860 --> 00:02:17.340
then if each of these
points are a data point.

30
00:02:19.060 --> 00:02:24.990
If each of these points
is a datum in data set,

31
00:02:24.990 --> 00:02:27.300
how do you want them to
be connected together?

32
00:02:27.300 --> 00:02:30.160
So these are all of the different
curves that are provided.

33
00:02:30.160 --> 00:02:36.170
Basically, makes making
pretty looking things

34
00:02:36.170 --> 00:02:41.540
really easy, because all you have to
do is like call this function and

35
00:02:41.540 --> 00:02:46.650
then for just the matter of
switching between different curves,

36
00:02:46.650 --> 00:02:50.610
you can get these different
effects of blocky or curvy.

37
00:02:51.650 --> 00:02:52.890
So yeah.

38
00:02:54.360 --> 00:02:57.210
Let's get into just two of the shapes.

39
00:02:57.210 --> 00:03:01.580
I want to cover D3.line which
helps you make the line chart.

40
00:03:01.580 --> 00:03:05.681
And then I want to quickly cover.

41
00:03:05.681 --> 00:03:09.683
Actually, if we have time now,
I'll quickly cover the pie chart,

42
00:03:09.683 --> 00:03:13.546
cuz I feel like I feel like even
though we bash on Python just a lot,

43
00:03:13.546 --> 00:03:19.170
like with the database community, for some
reason, we end up using them a lot anyway.

44
00:03:19.170 --> 00:03:23.810
And if we don't don't have time to cover
it then, at least it is in the slides for

45
00:03:23.810 --> 00:03:25.030
you to kinda tag on and look at.

46
00:03:26.190 --> 00:03:31.640
So, yeah, this is d3.line and
let's say this is our data set.

47
00:03:31.640 --> 00:03:36.020
It looks a little bit different from.

48
00:03:36.020 --> 00:03:38.740
Actually, it should look
the same as previous.

49
00:03:38.740 --> 00:03:44.480
So we have our date,
that could be our X axis.

50
00:03:44.480 --> 00:03:48.450
And we have some sort of a value
that could act as our Y axis.

51
00:03:49.970 --> 00:03:57.770
Each of these objects in the array will
turn into a point in our line chart.

52
00:03:57.770 --> 00:04:03.290
So this is the input,
the array of objects and all that d3.line,

53
00:04:03.290 --> 00:04:08.540
actually, all that D3 line does for
us is figure

54
00:04:08.540 --> 00:04:13.610
out the path attribute such that it just
draws a line through all of these points.

55
00:04:13.610 --> 00:04:15.948
And that's all it's doing
underneath the hood.

56
00:04:15.948 --> 00:04:21.200
And so, like once we, how we use it is,

57
00:04:21.200 --> 00:04:26.490
right here, this is how we define it.

58
00:04:26.490 --> 00:04:26.990
Sorry.

59
00:04:28.390 --> 00:04:31.510
So we say d3.line, and
it just asks for two things.

60
00:04:32.720 --> 00:04:35.930
How do I get my X and how do I get my Y?

61
00:04:35.930 --> 00:04:42.560
So this should look very similar to,
&gt;&gt; Shirley Wu: The code is wrong.

62
00:04:45.320 --> 00:04:46.590
I will fix that later.

63
00:04:46.590 --> 00:04:51.180
But this should look very similar to
the bar chart we just did, where for

64
00:04:51.180 --> 00:04:56.380
the X, we returned X scale and
pass and do that date.

65
00:04:56.380 --> 00:04:59.650
And then, for the Y,
we use Y scale and pass in the value.

66
00:04:59.650 --> 00:05:05.370
And so this tell us D3 how
it's supposed to get the x and

67
00:05:05.370 --> 00:05:10.350
values of of each point so
that it can draw the line between it.

68
00:05:10.350 --> 00:05:15.600
And then once we have that defined
this also returns a function and

69
00:05:15.600 --> 00:05:22.040
when you see happen here is all
we have to do is say attribute

70
00:05:23.600 --> 00:05:28.690
D, give me back, call line with our data.

71
00:05:30.290 --> 00:05:32.660
And this will give us
back that really ugly.

72
00:05:34.330 --> 00:05:36.120
This will essentially output.

73
00:05:38.140 --> 00:05:43.570
This.
&gt;&gt; Shirley Wu: And then it will draw this.

74
00:05:43.570 --> 00:05:46.445
So that whole code snippet would draw

75
00:05:46.445 --> 00:05:51.130
that.
&gt;&gt; Shirley Wu: Yeah.

76
00:05:52.994 --> 00:05:54.782
&gt;&gt; Shirley Wu: And that's there,

77
00:05:54.782 --> 00:05:59.199
all there is to d3.line actually for
just that,

78
00:05:59.199 --> 00:06:04.580
those six lines or so,
you get the beauty of that line chart.

79
00:06:04.580 --> 00:06:08.670
I guess there wasn't that much to it.

80
00:06:08.670 --> 00:06:12.179
So we'll go into the pie chart now.
&gt;&gt; Shirley Wu: [LAUGH]

81
00:06:12.179 --> 00:06:14.840
I just want to make sure
the d3 line is all good.

82
00:06:14.840 --> 00:06:18.670
It's like a super straightforward but
super powerful function.

83
00:06:18.670 --> 00:06:22.576
Okay, so
pie chart is a little bit more involved,

84
00:06:22.576 --> 00:06:25.930
in that there's actually two parts to it.

85
00:06:25.930 --> 00:06:31.410
For you to, for most people,
for you to make a pie chart,

86
00:06:31.410 --> 00:06:35.930
with d3, the first part being this d3.pie.

87
00:06:35.930 --> 00:06:39.705
And all that does is given your data,
let's say this is your data

88
00:06:44.391 --> 00:06:47.618
&gt;&gt; Shirley Wu: If you say d3.pie() and

89
00:06:47.618 --> 00:06:53.226
then pass in that data,
all it does is it figures

90
00:06:53.226 --> 00:06:59.960
out what the start angle and
end angle should be.

91
00:06:59.960 --> 00:07:08.680
So it's basically saying, okay, so each of
these data points are a pie slice, right?

92
00:07:08.680 --> 00:07:14.450
So the one will become a pie slice, and
then the two will become a pie slice, etc.

93
00:07:14.450 --> 00:07:19.980
So if they are the pie slices, what should
be start and end angle for my one, and

94
00:07:19.980 --> 00:07:26.650
what should be start and end angle for
my two, so that's all that pie does.

95
00:07:26.650 --> 00:07:31.270
Figure out the start and end angle for
each of your data points in your data set.

96
00:07:33.460 --> 00:07:37.982
So that you don't have to.
&gt;&gt; Shirley Wu: And

97
00:07:37.982 --> 00:07:42.859
then you take that output,
&gt;&gt; Shirley Wu: And

98
00:07:42.859 --> 00:07:46.165
you pass it into something called d3.arc.

99
00:07:46.165 --> 00:07:52.760
So what d3.arc does is it
takes in your startAngle,

100
00:07:52.760 --> 00:07:57.660
your endAngle, and you also need to
provide it with an inner and outerRadius.

101
00:07:57.660 --> 00:08:03.240
So in this case, I'm just saying my
inner radius, I want that to start at 0,

102
00:08:03.240 --> 00:08:07.390
and then the outer radius is 100 pixels.

103
00:08:07.390 --> 00:08:11.020
If you want one of those donut shapes, you
could just be like I want my inner radius

104
00:08:11.020 --> 00:08:15.850
to be 50 or 60 or whatever, as long as
it's less than your outer radius, and

105
00:08:15.850 --> 00:08:18.240
that's how people make those donut shapes.

106
00:08:18.240 --> 00:08:24.340
And then you like, you take that start and
angle that you got from your pie.

107
00:08:24.340 --> 00:08:29.510
In this case, it's as simple as saying
like, my start angle is d.startangle.

108
00:08:29.510 --> 00:08:32.200
And the angle is g.endangle.

109
00:08:32.200 --> 00:08:39.283
And this, and in calling arcpie so,

110
00:08:39.283 --> 00:08:43.852
calling arg, d3 arg,

111
00:08:43.852 --> 00:08:49.350
on that data gives you this.

112
00:08:49.350 --> 00:08:51.945
Which looks like that.

113
00:08:51.945 --> 00:08:57.113
So, each of those.
&gt;&gt; Shirley Wu: So, each of these arc

114
00:08:57.113 --> 00:09:04.601
pies will give you one of these arcs.
&gt;&gt; Shirley Wu: Yeah,

115
00:09:04.601 --> 00:09:09.042
so this is exactly that one, one, two,
whatever, so it's like one, one, two,

116
00:09:09.042 --> 00:09:11.360
three, something, something.

117
00:09:11.360 --> 00:09:16.545
Yeah, that's all there is
to a pie chart with D3.

118
00:09:19.130 --> 00:09:21.230
&gt;&gt; Shirley Wu: And then here is the code,

119
00:09:21.230 --> 00:09:26.769
the whole code because it kind of
gloss over a little bit about like and

120
00:09:26.769 --> 00:09:29.226
you can,
&gt;&gt; Shirley Wu: So

121
00:09:29.226 --> 00:09:33.410
here what's happening is, here's my data.

122
00:09:33.410 --> 00:09:38.976
I applied d3.pie to my data
to get like the start and

123
00:09:38.976 --> 00:09:42.770
angle for all of the each of these and

124
00:09:42.770 --> 00:09:48.463
that should give me,
an array of objects with star and

125
00:09:48.463 --> 00:09:55.452
angles.
&gt;&gt; Shirley Wu: Yeah,

126
00:09:55.452 --> 00:09:59.547
so it's an array with the original
data star with an angle and

127
00:09:59.547 --> 00:10:03.961
then if you want to provide padding
there is also the padding, and

128
00:10:03.961 --> 00:10:08.400
then I'm defining my ark, and
I'm saying slairt all the paths.

129
00:10:09.440 --> 00:10:14.036
Pass him this a ray of object with
start an angles inquiry of path for

130
00:10:14.036 --> 00:10:19.305
each of those.
&gt;&gt; Shirley Wu: So this is what's

131
00:10:19.305 --> 00:10:25.513
happening here, so then that creates
the eight paths on the screen.

132
00:10:25.513 --> 00:10:28.108
And then call arc on each of those so

133
00:10:28.108 --> 00:10:34.516
this is essentially,
&gt;&gt; Shirley Wu: What's

134
00:10:34.516 --> 00:10:36.340
happening under the hood is d yeah.

135
00:10:41.800 --> 00:10:47.480
So Is then calling arch each
single one of those like

136
00:10:47.480 --> 00:10:52.440
pie slices thus creating this pie chart.

137
00:10:56.010 --> 00:11:00.615
And that was just,
&gt;&gt; Shirley Wu: 20 lines.

138
00:11:01.879 --> 00:11:04.390
&gt;&gt; Shirley Wu: Gets you this pie chart.

139
00:11:04.390 --> 00:11:08.450
So that's what d3 shape is great for.
&gt;&gt; Speaker 2: So for that one-

140
00:11:08.450 --> 00:11:09.070
&gt;&gt; Speaker 3: Can you tell me

141
00:11:09.070 --> 00:11:13.190
a little about that colors that you picked
there, or what palettes are available?

142
00:11:13.190 --> 00:11:15.710
How do you set it in your own palette?
&gt;&gt; Shirley Wu: Okay, so yeah,

143
00:11:15.710 --> 00:11:18.390
I've been ignoring the whole colors thing.

144
00:11:18.390 --> 00:11:23.655
So D3 has some built in color schemes for
you,

145
00:11:23.655 --> 00:11:28.653
and it's actually under the scale module.

146
00:11:37.390 --> 00:11:39.618
&gt;&gt; Shirley Wu: Because colors

147
00:11:39.618 --> 00:11:47.520
are essentially just category scales,
right?

148
00:11:47.520 --> 00:11:51.470
So there is essentially some,

149
00:11:51.470 --> 00:11:55.460
I think the way to think about it is,

150
00:11:55.460 --> 00:12:00.840
these are basically just,
d3 has this defined for you, all of these.

151
00:12:00.840 --> 00:12:03.800
And you use this as the range, the output.

152
00:12:03.800 --> 00:12:08.240
So you pass in some sort of,
you don't actually need to pass in, okay.

153
00:12:08.240 --> 00:12:10.540
You can use any of these as your colors.

154
00:12:10.540 --> 00:12:16.314
And the way that you use it is essentially
you say create an ordinal scale,

155
00:12:16.314 --> 00:12:19.948
because my inputs and
outputs are discrete and

156
00:12:19.948 --> 00:12:23.880
then this line is actually
equivalent to saying,

157
00:12:32.180 --> 00:12:35.395
&gt;&gt; Shirley Wu: It's actually equivalent to

158
00:12:35.395 --> 00:12:37.456
just saying this.

159
00:12:37.456 --> 00:12:42.635
The beauty of it is is that we don't have
to specify a domain when it's ordinal.

160
00:12:42.635 --> 00:12:48.860
Because as you start,
I won't go into the details of that one.

161
00:12:48.860 --> 00:12:53.220
But it's basically saying,
I want you to output these colors.

162
00:12:53.220 --> 00:12:57.780
And that's how you can use
the colors that are built into D3.

163
00:12:57.780 --> 00:13:03.950
You can also define your own colors, but
this is a super simple quick way, yeah.

164
00:13:03.950 --> 00:13:06.850
And then, so you have a question?
&gt;&gt; Speaker 2: So

165
00:13:06.850 --> 00:13:08.060
I was just trying to think through, so

166
00:13:08.060 --> 00:13:13.770
it's this one instead of passing your
data directly through the SVG, do you

167
00:13:13.770 --> 00:13:16.990
have this intermediary step with the arc?
&gt;&gt; Shirley Wu: Yeah.

168
00:13:16.990 --> 00:13:20.130
&gt;&gt; Speaker 2: But that's not the actual

169
00:13:20.130 --> 00:13:24.144
path this itself the arc is generating.
&gt;&gt; Shirley Wu: Sorry the last part,

170
00:13:24.144 --> 00:13:25.540
can you say that again?
&gt;&gt; Speaker 2: So

171
00:13:25.540 --> 00:13:29.370
your data gets turned into angles and

172
00:13:29.370 --> 00:13:35.460
then you pass it to that arc.
&gt;&gt; Shirley Wu: We create this arc function

173
00:13:35.460 --> 00:13:38.900
and that gets passed into that arc yeah.
&gt;&gt; Speaker 2: Okay you created an arc

174
00:13:38.900 --> 00:13:39.570
function.

175
00:13:40.850 --> 00:13:44.640
And then, but that's not actually,

176
00:13:45.910 --> 00:13:49.710
that's helping you generate the path and
ultimately helping you determine where

177
00:13:49.710 --> 00:13:51.710
the path needs to sit.
&gt;&gt; Shirley Wu: Yes,

178
00:13:51.710 --> 00:13:53.270
what the path should look like.

179
00:13:53.270 --> 00:13:57.210
So actually, maybe it would helpful if I,

180
00:13:57.210 --> 00:14:02.370
because you guys have seen, maybe this
will be helpful if I console.log.

181
00:14:02.370 --> 00:14:09.290
And this is why I was like, console.log
everything because it really helps.

182
00:14:09.290 --> 00:14:13.781
So let's console.log the data, and
let's also console.log what arc and

183
00:14:13.781 --> 00:14:19.535
pass in the data will look like.
&gt;&gt; Shirley Wu: So

184
00:14:19.535 --> 00:14:25.690
this is what D3 is seeing as it's
looping through all of the elements.

185
00:14:25.690 --> 00:14:29.960
It's essentially our data is that
object with the start and endAngle, and

186
00:14:29.960 --> 00:14:37.020
once you call arc on it,
it gives back this path command.

187
00:14:38.430 --> 00:14:42.700
Thing that then get set
on the D attribute.

188
00:14:42.700 --> 00:14:48.320
So I think I go to think about
these things is like SVG.

189
00:14:48.320 --> 00:14:52.620
So pretty much a lot of the things that

190
00:14:52.620 --> 00:14:57.150
D3 helps you do is like SVG or

191
00:14:57.150 --> 00:15:02.527
a canvas likes things in
a certain like there's

192
00:15:02.527 --> 00:15:07.840
the d attribute that is specified.

193
00:15:07.840 --> 00:15:14.240
So svg has a certain spike, and
then D3 is just basically helping you

194
00:15:14.240 --> 00:15:20.430
get your data and translate that data into
what svg takes in and what it specifies.

195
00:15:20.430 --> 00:15:26.400
And that's how you can think of everything
in the D3 library, almost everything.

196
00:15:26.400 --> 00:15:30.970
So what you were saying before,
like if our data is just this array or

197
00:15:30.970 --> 00:15:36.939
like an array of objects,
all D3 is doing is helping us get this

198
00:15:38.070 --> 00:15:44.280
to this down here that SVG
can then use to render.

199
00:15:44.280 --> 00:15:47.170
And it just so happens that getting this

200
00:15:47.170 --> 00:15:51.980
to that actually requires an intermediary
that get you this start and end angles.

201
00:15:51.980 --> 00:15:57.642
And there's actually a lot of really, and
I think it's quite genius why it's pulled

202
00:15:57.642 --> 00:16:02.834
apart, into pie and arc, because they
are times when you might only need pie,

203
00:16:02.834 --> 00:16:06.079
and there are times when
you might only need arc.

204
00:16:06.079 --> 00:16:08.321
So that's why it's separated out.

