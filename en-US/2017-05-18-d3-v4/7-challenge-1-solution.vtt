WEBVTT

1
00:00:00.360 --> 00:00:03.700
&gt;&gt; Shirley Wu: I just wanted to say right
after I gave you guys this exercise and

2
00:00:03.700 --> 00:00:05.320
we broke for lunch.

3
00:00:05.320 --> 00:00:09.390
I realized I shoved you guys into
the deep end and was like swim.

4
00:00:10.760 --> 00:00:12.700
So we had some really great questions.

5
00:00:14.100 --> 00:00:19.430
The first of them being,
it probably be helpful

6
00:00:19.430 --> 00:00:25.060
if we kind of just broke down how
SVG works for just this exercise.

7
00:00:25.060 --> 00:00:28.230
So, I think one of
the confusions that came up was

8
00:00:29.660 --> 00:00:33.170
because we talked about each of
the axis being within in SVG,

9
00:00:33.170 --> 00:00:37.010
and appending a group,
and then calling the axis.

10
00:00:37.010 --> 00:00:43.840
Like do we need an SVG for each of
the axis and then like all of and does all

11
00:00:43.840 --> 00:00:49.040
of the like you know rectangles need to be
in SVG like it does it need to be 3 SVG's.

12
00:00:49.040 --> 00:00:53.440
And the way to think about
as SVG is it's kind of like,

13
00:00:53.440 --> 00:00:56.700
you can think of SVG kind of
like the HTML documents, so

14
00:00:56.700 --> 00:01:01.500
you can just have one and
then you append everything to it inside.

15
00:01:01.500 --> 00:01:04.214
And then you can have the SVG and

16
00:01:04.214 --> 00:01:09.450
then you can have group elements that
you put all of your elements inside if

17
00:01:09.450 --> 00:01:15.420
you need to like batch apply transforms
to it, or anything like that.

18
00:01:15.420 --> 00:01:21.452
But within the SVG, it's kind of, yeah,
you put your rectangles and your circles.

19
00:01:21.452 --> 00:01:26.678
I think one of the comparisons
we were talking about is

20
00:01:26.678 --> 00:01:33.600
if the SVG is an HTML document,
then the group is one of your divs.

21
00:01:33.600 --> 00:01:37.780
And then there's things inside
it that are your subdivs,

22
00:01:37.780 --> 00:01:40.900
and that's kind of the comparison.

23
00:01:40.900 --> 00:01:46.160
So that was one of the first things,
and the second thing is

24
00:01:47.680 --> 00:01:52.290
let's kind of talk about the things
that are happening here.

25
00:01:52.290 --> 00:01:58.292
So there are these rectangles
that are make up the bar charts,

26
00:01:58.292 --> 00:02:00.430
and then that's the first part.

27
00:02:00.430 --> 00:02:05.800
And then there is the y-axis and
there is the x-axis.

28
00:02:05.800 --> 00:02:11.170
So how was the exercise, actually?

29
00:02:11.170 --> 00:02:14.058
And then I can take questions
really quickly here, too.

30
00:02:14.058 --> 00:02:15.212
Yeah.

31
00:02:17.908 --> 00:02:20.570
&gt;&gt; Shirley Wu: [LAUGH]
How was the deep end?

32
00:02:20.570 --> 00:02:21.850
&gt;&gt; Male off screen: It's okay.

33
00:02:21.850 --> 00:02:22.890
&gt;&gt; Female off screen: Sort of it?

34
00:02:22.890 --> 00:02:27.080
&gt;&gt; Shirley Wu: Okay, and
then questions from online also?

35
00:02:27.080 --> 00:02:33.000
&gt;&gt; Male off screen: Yes, we did have
one question online, Jonathan asked

36
00:02:33.000 --> 00:02:38.250
why in the code example do we
increment each temperature by one?

37
00:02:38.250 --> 00:02:42.330
Eg++ d, bracket city end bracket?

38
00:02:43.350 --> 00:02:48.955
&gt;&gt; Shirley Wu: Okay, so
we can dive right into this code,

39
00:02:48.955 --> 00:02:54.250
and then essentially this is all it means

40
00:02:54.250 --> 00:03:00.030
is when the data gets
loaded in as loaded in.

41
00:03:01.700 --> 00:03:07.185
Sometimes the data is all in string and
then, so if you console log the data

42
00:03:07.185 --> 00:03:14.004
right now,
&gt;&gt; Shirley Wu: You

43
00:03:14.004 --> 00:03:19.206
see this is an array of data, and
then you can see it's actually,

44
00:03:19.206 --> 00:03:23.179
well, ignore the San Francisco
cuz well okay, so

45
00:03:23.179 --> 00:03:27.909
all of the values are in string and
then all that the plus plus

46
00:03:27.909 --> 00:03:32.182
does is converts it to integer or
a flow, yes flowed.

47
00:03:32.182 --> 00:03:33.809
And that's all it is,

48
00:03:33.809 --> 00:03:39.470
its just like a super neat like shorthand
that's converting it to an integer.

49
00:03:40.520 --> 00:03:42.910
&gt;&gt; Female off screen: So the top part I
think, we were a little confused took,

50
00:03:42.910 --> 00:03:46.280
cuz normally that means
increment within a function.

51
00:03:46.280 --> 00:03:51.240
But that top part,
from D3 TSV, the data for each,

52
00:03:51.240 --> 00:03:56.530
that's basically just, it's actually not
a function in the same way with increment.

53
00:03:56.530 --> 00:03:58.246
It's like defining the data types.

54
00:03:58.246 --> 00:04:04.120
&gt;&gt; Shirley Wu: Yeah, okay so,
yes all that's doing is

55
00:04:04.120 --> 00:04:07.546
looping through the data and then cleaning
it so that we can use it for later.

56
00:04:07.546 --> 00:04:14.100
Like making the date into
a JavaScript date object and

57
00:04:14.100 --> 00:04:18.420
then cleaning up the temperature values so
that they're integers,

58
00:04:18.420 --> 00:04:21.240
and that's all it's doing, and
that's why I include it in there,

59
00:04:21.240 --> 00:04:27.680
because I didn't want you guys
to have to worry about that.

60
00:04:27.680 --> 00:04:29.540
But I see now that I caused confusion.

61
00:04:30.880 --> 00:04:33.756
Okay, but let's get going and

62
00:04:33.756 --> 00:04:38.851
the first thing we want to
do is create the rectangles.

63
00:04:40.793 --> 00:04:46.443
&gt;&gt; Shirley Wu: So let's,
and then this is our data,

64
00:04:46.443 --> 00:04:51.386
so we want to make a rectangle, so

65
00:04:51.386 --> 00:04:55.370
let's get right into it.

66
00:04:55.370 --> 00:05:01.650
So let's actually first select the svg,
d3.select svg

67
00:05:03.490 --> 00:05:08.640
and feel free to stop me at
any time with questions, and

68
00:05:08.640 --> 00:05:14.360
if I'm looking down and I can't see,
please wave your hands.

69
00:05:14.360 --> 00:05:19.110
So let's select the svg, and

70
00:05:19.110 --> 00:05:27.665
then let's just create the rectangles so,

71
00:05:27.665 --> 00:05:30.430
I take the svg and

72
00:05:30.430 --> 00:05:35.800
I select all the rectangles that don't yet
exist and I bind my data to it.

73
00:05:37.000 --> 00:05:39.720
&gt;&gt; Male off screen: Where
did that data come from?

74
00:05:39.720 --> 00:05:42.840
That data data,
where does that variable come from?

75
00:05:42.840 --> 00:05:43.470
&gt;&gt; Shirley Wu: Just right here?

76
00:05:43.470 --> 00:05:48.640
&gt;&gt; Male off screen: So how does it get
from the d3 tsve, into a variable that

77
00:05:48.640 --> 00:05:53.870
you can edit here without going
outside the scope of the tsv.

78
00:05:55.570 --> 00:06:00.280
I guess, I can see in the d3.tsv.data is

79
00:06:00.280 --> 00:06:02.659
a variable you're passing
into that function.

80
00:06:02.659 --> 00:06:05.132
&gt;&gt; Shirley Wu: [CROSSTALK]
&gt;&gt; Male off screen: How does that variable

81
00:06:05.132 --> 00:06:08.210
become available to your data down here?

82
00:06:09.230 --> 00:06:10.425
&gt;&gt; Male off screen: It's
still within that scope.

83
00:06:10.425 --> 00:06:12.163
[CROSSTALK]
&gt;&gt; Shirley Wu: Yeah, yeah, yeah.

84
00:06:12.163 --> 00:06:14.470
&gt;&gt; Male off screen: And so
this is all in the tsv?

85
00:06:14.470 --> 00:06:18.650
&gt;&gt; Shirley Wu: Yes, if you want to use it
outside, you would have to set like a,

86
00:06:18.650 --> 00:06:24.790
yeah, but yeah it's still in the function,
the same function, yeah, thank you.

87
00:06:24.790 --> 00:06:29.450
And then, so
that's how I'm using the data.

88
00:06:31.740 --> 00:06:36.919
Okay, so enter append and
now if we inspect the svg,

89
00:06:36.919 --> 00:06:42.002
we should see roughly
300 rectangles created.

90
00:06:42.002 --> 00:06:43.682
Is that exciting?

91
00:06:43.682 --> 00:06:50.924
[LAUGH] Okay, okay now,
&gt;&gt; Shirley Wu: I

92
00:06:50.924 --> 00:06:55.762
lied a little bit because I realized
we probably need to use, we need to

93
00:06:55.762 --> 00:07:00.900
actually define our skills first so
that we can set the x and y attributes.

94
00:07:00.900 --> 00:07:07.370
I mean, if we want to right
now just say like width

95
00:07:07.370 --> 00:07:12.950
let's set the width to 5, and
actually, that's all we got right now.

96
00:07:14.850 --> 00:07:19.630
So for everything else,
for our x and y, and

97
00:07:19.630 --> 00:07:23.560
our height, we actually need our scales.

98
00:07:25.340 --> 00:07:28.760
So first, let's do the the x scale.

99
00:07:28.760 --> 00:07:35.370
So we said that x is going to be the time,
the date, so we do scaleTime,

100
00:07:36.690 --> 00:07:42.380
and then we need a domain, and
then our range, did we say?

101
00:07:42.380 --> 00:07:46.128
Okay, so our range,
we want it to be 0 to width, or?

102
00:07:48.688 --> 00:07:51.928
&gt;&gt; Shirley Wu: 0 to width, or?

103
00:07:51.928 --> 00:07:55.485
&gt;&gt; Male off screen: It's gonna have to
start over the amount that we translate

104
00:07:55.485 --> 00:07:56.728
the y axis, right?

105
00:07:56.728 --> 00:08:01.644
&gt;&gt; Shirley Wu: So, let's just say
there is a convention with d3 where

106
00:08:01.644 --> 00:08:04.150
we define the margin.

107
00:08:04.150 --> 00:08:07.470
And we say top is 20, bottom is 20,

108
00:08:07.470 --> 00:08:10.406
something along those lines,
left is 20, and right.

109
00:08:10.406 --> 00:08:17.450
And we're just like super verbose about
it just in case we want to push down,

110
00:08:17.450 --> 00:08:21.540
only the left or, and
so then what we can do.

111
00:08:23.450 --> 00:08:28.540
As we say okay, so we actually
want to start with margin left.

112
00:08:31.100 --> 00:08:33.076
&gt;&gt; Shirley Wu: And then, we only actually,

113
00:08:33.076 --> 00:08:37.300
because we want to be within
the bounds of the SVG element.

114
00:08:37.300 --> 00:08:44.490
We want to actually do only draw
until with minus the margin right.

115
00:08:46.612 --> 00:08:53.860
So this will very nicely give us
the right place to draw the x attribute.

116
00:08:53.860 --> 00:08:58.492
And then now let's figure out our extent,
our min and max.

117
00:09:00.852 --> 00:09:07.517
&gt;&gt; Shirley Wu: And
the data that we want to be getting for

118
00:09:07.517 --> 00:09:11.444
the extent is the date.

119
00:09:14.465 --> 00:09:19.465
&gt;&gt; Shirley Wu: And let's console.log
that to see what it looks like.

120
00:09:42.832 --> 00:09:47.410
&gt;&gt; Shirley Wu: And this is our extent,
our min and max for the x axis, so

121
00:09:47.410 --> 00:09:53.474
it starts in October 2011 and
then it goes until September 2012.

122
00:09:54.990 --> 00:09:55.490
Cool.

123
00:10:01.160 --> 00:10:03.100
&gt;&gt; Shirley Wu: Gonna stop
console logging the data also.

124
00:10:03.100 --> 00:10:11.510
Then,
&gt;&gt; Shirley Wu: Then let's do the y.

125
00:10:12.750 --> 00:10:18.170
So for the y,
I think I set my city as San Francisco.

126
00:10:19.380 --> 00:10:23.210
So let's get the temperatures for
San Francisco.

127
00:10:28.591 --> 00:10:31.641
&gt;&gt; Shirley Wu: And so that's apparently
our min and max for San Francisco, wow.

128
00:10:33.761 --> 00:10:37.709
&gt;&gt; Shirley Wu: Is it just me or
does that look not right to you.

129
00:10:37.709 --> 00:10:42.368
Yeah.
[LAUGH] Really?

130
00:10:42.368 --> 00:10:44.446
Our temperatures.

131
00:10:44.446 --> 00:10:48.370
Okay, well, I trust d3 extent.

132
00:10:49.380 --> 00:10:51.690
&gt;&gt; Female off screen: That's my
stereotype of San Francisco.

133
00:10:51.690 --> 00:10:53.590
&gt;&gt; Shirley Wu: Okay, we have like,

134
00:10:53.590 --> 00:10:56.648
we have like a little bit more
range than that I feel like.

135
00:10:56.648 --> 00:10:59.461
[LAUGH]
&gt;&gt; Male off screen: Well the question is

136
00:10:59.461 --> 00:11:02.914
whether you have that difference
in the timeframe that

137
00:11:02.914 --> 00:11:05.815
you're looking in [CROSSTALK]
&gt;&gt; Shirley Wu: Fair enough,

138
00:11:05.815 --> 00:11:12.000
to 2011 to 2012 because apparently for
New York, okay so New York has a range.

139
00:11:12.000 --> 00:11:18.060
Yeah I guess 2011 to 2012 we just-
&gt;&gt; Male off screen: We're okay.

140
00:11:18.060 --> 00:11:19.820
&gt;&gt; Shirley Wu: We were just, yeah.

141
00:11:19.820 --> 00:11:21.680
I did not notice that.

142
00:11:21.680 --> 00:11:27.203
Okay var yScale, this one

143
00:11:27.203 --> 00:11:32.230
should be a what scale?

144
00:11:34.241 --> 00:11:36.071
&gt;&gt; Female off screen: Linear.

145
00:11:36.071 --> 00:11:36.771
&gt;&gt; Male off screen: Linear?

146
00:11:36.771 --> 00:11:37.911
&gt;&gt; Shirley Wu: Yes, thank you.

147
00:11:37.911 --> 00:11:41.793
It should be scaleLinear,

148
00:11:41.793 --> 00:11:46.855
.domain, so pass in the yExtent,

149
00:11:46.855 --> 00:11:51.915
and then pass in, and in this case,

150
00:11:51.915 --> 00:12:00.553
we want our 0 to actually be
at height minus margin, right?

151
00:12:00.553 --> 00:12:05.579
Height- margin.bottom, so that's where

152
00:12:05.579 --> 00:12:10.480
we want our 0 or
like our min to be mapped to.

153
00:12:11.574 --> 00:12:17.810
And then we want the tallest

154
00:12:17.810 --> 00:12:24.314
of our temperatures to
be mapped to margin.top.

155
00:12:24.314 --> 00:12:24.814
Did that make sense?

156
00:12:29.865 --> 00:12:32.850
&gt;&gt; Shirley Wu: Okay,
I'll take that as a yes.

157
00:12:32.850 --> 00:12:36.320
&gt;&gt; Female off screen: And we're inverting
it again for the same reason so

158
00:12:36.320 --> 00:12:43.330
that it starts with like more canvas
style coordinates and not the cartesian?

159
00:12:43.330 --> 00:12:47.750
&gt;&gt; Shirley Wu: Yeah, we're inverting it
just so we don't have an upside down.

160
00:12:47.750 --> 00:12:50.050
&gt;&gt; Male off screen: Okay, yeah.

161
00:12:50.050 --> 00:12:53.210
&gt;&gt; Shirley Wu: Yeah,
the upside down, yeah, bars.

162
00:12:53.210 --> 00:12:56.780
&gt;&gt; Female off screen: Cuz the browser's
coordinates work differently

163
00:12:56.780 --> 00:13:00.410
from regular graph coordinates.

164
00:13:00.410 --> 00:13:05.520
&gt;&gt; Shirley Wu: Yeah, okay, so
just for fun let's put in like- so

165
00:13:05.520 --> 00:13:10.340
this is the other thing that
came up which is [LAUGH],

166
00:13:10.340 --> 00:13:14.640
I completely forgot to mention this before
we broke which is, how do you use a scale?

167
00:13:15.690 --> 00:13:20.876
And a scale is actually, once you've,
like passing your domain and range and

168
00:13:20.876 --> 00:13:26.470
all of that, it's just a function that you
can then pass your, pass anything into.

169
00:13:27.530 --> 00:13:32.444
So for example, if I just say, okay, what,

170
00:13:32.444 --> 00:13:37.620
like yScale and then what is 50 degrees?

171
00:13:37.620 --> 00:13:44.100
And then, you can see, it is apparently
167.87 blah blah blah pixels.

172
00:13:44.100 --> 00:13:47.479
And that's where my y is for 50 degrees.

173
00:13:49.170 --> 00:13:53.930
If I do like you know, a 100,
it will be actually negative

174
00:13:53.930 --> 00:13:58.490
20 pixels because a hundred is
actually passed our like our max.

175
00:13:58.490 --> 00:14:00.710
Cuz our max for
New York was like 80 degree.

176
00:14:00.710 --> 00:14:02.419
So then a hundred is pass that, so

177
00:14:02.419 --> 00:14:05.717
then you see that it's actually
like taking that into a count and

178
00:14:05.717 --> 00:14:09.039
being like it's negative 20
pixels if we go with the scale.

179
00:14:09.039 --> 00:14:14.033
There are some really nice functionality
with d3 scales where you can say,

180
00:14:14.033 --> 00:14:16.699
I think the function is called .clamp.

181
00:14:16.699 --> 00:14:21.134
And .clamp is like if
you use .clamp is true,

182
00:14:21.134 --> 00:14:27.958
then you pass in like a hundred,
it will actually only return you zero,

183
00:14:27.958 --> 00:14:32.880
it will only return you,
I mean your margin.top.

184
00:14:32.880 --> 00:14:37.690
Like it won't go pass the min and
max that you set for your range.

185
00:14:37.690 --> 00:14:40.880
So that's very helpful but yeah this is.

186
00:14:40.880 --> 00:14:44.770
&gt;&gt; Male off screen: Can you talk one
more time about why are we inverting,

187
00:14:44.770 --> 00:14:47.620
why if you don't do this margin top,

188
00:14:47.620 --> 00:14:51.480
height minus margin top and
margin bottom and then margin top.

189
00:14:51.480 --> 00:14:55.040
It appears underneath the x-axis and

190
00:14:55.040 --> 00:14:59.800
we have to do this for it to appear
in the regular above the x-axis.

191
00:14:59.800 --> 00:15:01.330
You know what I'm saying?

192
00:15:01.330 --> 00:15:07.380
&gt;&gt; Shirley Wu: The x-axis do you
mean just like the right here the 0?

193
00:15:07.380 --> 00:15:13.450
&gt;&gt; Male off screen: No, no, I meant, I
mean the y axis, the values in the y axis.

194
00:15:13.450 --> 00:15:17.910
You know how you're doing height
minus margin.button there and

195
00:15:17.910 --> 00:15:22.140
then margin.top and you have to do that so
things appear above the axis.

196
00:15:22.140 --> 00:15:24.720
They are still on the y axis but
they appear but

197
00:15:24.720 --> 00:15:29.590
if you instead did-
&gt;&gt; Shirley Wu: The other way

198
00:15:29.590 --> 00:15:32.112
around, the margin.top-
&gt;&gt; Male off screen: [CROSSTALK] It will

199
00:15:32.112 --> 00:15:34.349
all appear at the back, why is that?

200
00:15:34.349 --> 00:15:40.793
&gt;&gt; Shirley Wu: Because
the coordinate system for

201
00:15:40.793 --> 00:15:48.380
SVG is, this top left corner is 0,0.

202
00:15:48.380 --> 00:15:49.140
&gt;&gt; Male off screen: Okay.

203
00:15:49.140 --> 00:15:53.650
&gt;&gt; Shirley Wu: Yeah, so the coordinate
system goes, yeah, x-axis is 0,

204
00:15:53.650 --> 00:15:56.176
and then it goes 0 down.

205
00:15:56.176 --> 00:15:57.405
&gt;&gt; Male off screen: Okay, okay, got it.

206
00:15:57.405 --> 00:16:01.940
&gt;&gt; Shirley Wu: Yeah, so which is
counter-intuitive to how we think about

207
00:16:02.940 --> 00:16:08.050
Like cuz we expected to be from
the bottom is zero and then you go up.

208
00:16:08.050 --> 00:16:08.975
For like yeah.

209
00:16:08.975 --> 00:16:10.267
&gt;&gt; Male off screen: Regular math, yeah.

210
00:16:10.267 --> 00:16:16.991
&gt;&gt; Shirley Wu: Yeah [LAUGH] And
yay programming screens [LAUGH] Yay.

211
00:16:16.991 --> 00:16:22.040
Yeah so let me also drive home VM,
how do you use those scale,

212
00:16:22.040 --> 00:16:27.980
you use it like you would use any other
function and you pass in a values.

213
00:16:27.980 --> 00:16:34.493
If you pass in an invalid value like
&gt;&gt; Shirley Wu: It

214
00:16:34.493 --> 00:16:39.943
will simply give you a NaN or if you don't
pass anything in, it will give you a NaN.

215
00:16:39.943 --> 00:16:46.401
So that is how you use a scale,
&gt;&gt; Shirley Wu: And

216
00:16:46.401 --> 00:16:51.199
that is one of the things I failed
to tell you before I pushed you

217
00:16:51.199 --> 00:16:56.202
into the deep end because I like
to keep your lives interesting.

218
00:16:56.202 --> 00:16:59.637
Okay, so now that we got that,

219
00:16:59.637 --> 00:17:04.830
let use the scales that we just defined.

220
00:17:04.830 --> 00:17:10.294
And the way that we use it is essentially,

221
00:17:10.294 --> 00:17:14.510
for example, that X scale is for

222
00:17:14.510 --> 00:17:18.258
sending the X attribute, so

223
00:17:18.258 --> 00:17:22.960
we want to just use that as sorry d.d

224
00:17:28.899 --> 00:17:31.860
&gt;&gt; Shirley Wu: And then now if we inspect

225
00:17:31.860 --> 00:17:36.513
the element, we should see that each of

226
00:17:36.513 --> 00:17:41.730
the rectangle elements
now has a correct x,

227
00:17:41.730 --> 00:17:47.088
attribute value because
we return x scale and

228
00:17:47.088 --> 00:17:49.767
then passed in d.d and

229
00:17:49.767 --> 00:17:54.846
that got translated to right pixel value.

230
00:18:01.597 --> 00:18:02.395
&gt;&gt; Shirley Wu: So far are we good?

231
00:18:02.395 --> 00:18:08.837
Cool, okay, so lets do the y attributes.

232
00:18:11.024 --> 00:18:15.190
&gt;&gt; Shirley Wu: And
I am just using function verbosely.

233
00:18:17.430 --> 00:18:22.156
So now it is the y scale and
then the data we decided

234
00:18:22.156 --> 00:18:26.092
to use was the temperature for our city.

235
00:18:31.107 --> 00:18:36.232
&gt;&gt; Shirley Wu: Now if we take a look,
&gt;&gt; Shirley Wu: At each

236
00:18:36.232 --> 00:18:41.320
of our rectangles,
now we have the right y positions also.

237
00:18:41.320 --> 00:18:46.077
And you can see, I think I might
have set my height to only 300, so

238
00:18:46.077 --> 00:18:50.183
like all of the y functions
are like between 0 and 300.

239
00:18:51.837 --> 00:18:52.469
&gt;&gt; Shirley Wu: Cool, but

240
00:18:52.469 --> 00:18:57.325
notice that nothing is showing up still
because we're still missing our height.

241
00:19:03.153 --> 00:19:08.321
&gt;&gt; Shirley Wu: And we could have
either made another scale for

242
00:19:08.321 --> 00:19:13.234
our height but
our height is actually just,

243
00:19:20.204 --> 00:19:21.667
&gt;&gt; Shirley Wu: Basically,

244
00:19:21.667 --> 00:19:28.792
oops,
&gt;&gt; Shirley Wu: Our

245
00:19:28.792 --> 00:19:36.273
height is actually our height minus,
&gt;&gt; Shirley Wu: It's actually just this.

246
00:19:44.812 --> 00:19:46.390
&gt;&gt; Shirley Wu: And
I think I have a question.

247
00:19:47.550 --> 00:19:50.806
&gt;&gt; Male off screen: Yes, well the first
question that's relevant to this

248
00:19:50.806 --> 00:19:55.493
immediate part, there's some question
about what's in the margin object?

249
00:19:55.493 --> 00:19:58.910
Could you just scroll up and
show the margin object,

250
00:19:58.910 --> 00:20:02.631
and maybe zoom in a little bit so
that people can see it.

251
00:20:02.631 --> 00:20:04.160
&gt;&gt; Shirley Wu: No, we forgot to zoom in.

252
00:20:04.160 --> 00:20:04.874
&gt;&gt; Male off screen: It's pretty simple,
yeah.

253
00:20:04.874 --> 00:20:07.496
&gt;&gt; Shirley Wu: We forgot
to do the zoom in on

254
00:20:07.496 --> 00:20:10.526
my-
&gt;&gt; Male off screen: So does everybody see

255
00:20:10.526 --> 00:20:15.450
that there's a margin object and it just
has a top, a bottom, a left, and a right?

256
00:20:15.450 --> 00:20:18.000
Yeah, okay, that's sufficient.

257
00:20:18.000 --> 00:20:18.680
&gt;&gt; Shirley Wu: Okay.
&gt;&gt; Male off screen: Perfect.

258
00:20:20.120 --> 00:20:24.598
&gt;&gt; Shirley Wu: And this is back to
the width height x, y, attribute.

259
00:20:28.494 --> 00:20:32.540
&gt;&gt; Shirley Wu: And so, does it make
sense what I had to do with the height?

260
00:20:32.540 --> 00:20:34.950
Instead of making another height scale,

261
00:20:34.950 --> 00:20:40.930
I was just let me just subtract
my y scale from the height.

262
00:20:40.930 --> 00:20:41.816
Actually, for the sake of,

263
00:20:46.340 --> 00:20:49.330
&gt;&gt; Shirley Wu: Being,
&gt;&gt; Shirley Wu: Thorough.

264
00:20:49.330 --> 00:20:51.520
Let's just make a height scale.

265
00:20:52.600 --> 00:20:54.770
So the domain is still the yExtent right?

266
00:20:54.770 --> 00:21:00.210
Because essentially my domain should just
be the min and max of my city temperature.

267
00:21:00.210 --> 00:21:05.995
And then but
my range could just be from 0,

268
00:21:05.995 --> 00:21:13.559
too height- 2 times
margin.top- margin.bottom.

269
00:21:18.469 --> 00:21:21.181
&gt;&gt; Shirley Wu: Then I could
just use my heightScale and

270
00:21:21.181 --> 00:21:25.711
pass in my city temperature and
that does exactly the same thing.

271
00:21:25.711 --> 00:21:33.310
And I had to do
&gt;&gt; Shirley Wu: Height.

272
00:21:33.310 --> 00:21:38.307
So my height goes from zero and
I am subtracting- margin.top and-

273
00:21:38.307 --> 00:21:44.030
margin.bottom to count for
the fact that in my y I'm like,

274
00:21:44.030 --> 00:21:48.810
I only do I subtract
out them like in my Y,

275
00:21:48.810 --> 00:21:54.678
I say I only want you to render
to the part of the screen,

276
00:21:54.678 --> 00:21:57.960
-margin.bottom and -margin.top.

277
00:21:57.960 --> 00:22:00.480
So, I have to reflect that in my height.

278
00:22:00.480 --> 00:22:05.891
&gt;&gt; Female off screen: Yeah, Is there
a difference, I just noticed you're using

279
00:22:05.891 --> 00:22:11.534
two different selectors for
D.Date and then D bracket city?

280
00:22:11.534 --> 00:22:16.326
&gt;&gt; Shirley Wu: The bracket city is
just because I have city defined

281
00:22:16.326 --> 00:22:21.400
up top as New York and
so I'm essentially just

282
00:22:21.400 --> 00:22:26.250
Accessing d.NewYork.

283
00:22:26.250 --> 00:22:27.750
&gt;&gt; Male off screen: But it's a string.

284
00:22:27.750 --> 00:22:30.014
So it has to be in the bracket or
something like that.

285
00:22:30.014 --> 00:22:37.028
&gt;&gt; Shirley Wu: Yeah,
yeah that's just, it's a variable.

286
00:22:37.028 --> 00:22:37.910
&gt;&gt; Male off screen: [INAUDIBLE]
The space in there, yeah.

287
00:22:39.260 --> 00:22:42.380
&gt;&gt; Shirley Wu: Well, no,
this one is because city is a variable

288
00:22:42.380 --> 00:22:47.160
It's a variable, so I can't just access it
with the dot because the dot assumes that

289
00:22:47.160 --> 00:22:48.040
that's the string.

290
00:22:49.540 --> 00:22:54.477
So, I'm using a bracket here because
I'm using city as a variable.

291
00:22:54.477 --> 00:22:55.747
Yeah.

292
00:22:57.504 --> 00:23:02.491
&gt;&gt; Shirley Wu: And then the only other
thing I really did was give a fill

293
00:23:02.491 --> 00:23:03.366
of blue.

294
00:23:05.565 --> 00:23:07.747
&gt;&gt; Shirley Wu: And then stroke it white.

295
00:23:07.747 --> 00:23:12.088
And now I see that
the width is like kind of

296
00:23:12.088 --> 00:23:16.375
humongous I just
&gt;&gt; Shirley Wu: Made it back to two.

297
00:23:18.855 --> 00:23:21.060
&gt;&gt; Shirley Wu: Yeah, so this is.

298
00:23:21.060 --> 00:23:23.178
I shouldn't have saved that
cuz this is my starter.

299
00:23:23.178 --> 00:23:24.255
I'm.

300
00:23:26.088 --> 00:23:26.965
&gt;&gt; Shirley Wu: Yeah, any questions so far?

301
00:23:31.637 --> 00:23:35.281
&gt;&gt; Male off screen: We have
a question about changing data.

302
00:23:35.281 --> 00:23:39.242
So far, we've made an awesome graph,
it looks great.

303
00:23:39.242 --> 00:23:42.850
We've got a piece of data that comes in,
we show the temperatured data.

304
00:23:42.850 --> 00:23:46.317
One of the questions that we receive
was saying forget the tangent but

305
00:23:46.317 --> 00:23:50.145
what happens when our data like our
temperature data is constantly changing

306
00:23:50.145 --> 00:23:51.729
like it's a real time source?

307
00:23:51.729 --> 00:23:54.629
Will that be covered?

308
00:23:54.629 --> 00:23:58.229
&gt;&gt; Shirley Wu: Yes, so that,
when the data changes, and

309
00:23:58.229 --> 00:24:03.140
that's basically the enter
update exit pattern?

310
00:24:03.140 --> 00:24:07.910
And we'll be covering that
right after the shape section.

311
00:24:09.780 --> 00:24:14.655
Yeah, I just wanted to get you
guys drawing a bar chart before

312
00:24:14.655 --> 00:24:19.545
all of the rest of the confusing,
interrupting exit thing.

313
00:24:22.084 --> 00:24:24.280
&gt;&gt; Shirley Wu: So we will get there and
we will get there in detail.

314
00:24:26.300 --> 00:24:32.048
Okay, so now that we have the rectangles,
all that's left is actually for

315
00:24:32.048 --> 00:24:36.442
us to define our axis, and
to just append them to our svg.

316
00:24:36.442 --> 00:24:41.273
So, let's do,
&gt;&gt; Shirley Wu: Axis and

317
00:24:41.273 --> 00:24:44.898
we want our x axis to be at the bottom.

318
00:24:47.621 --> 00:24:53.959
&gt;&gt; Shirley Wu: And
the scale that we want to use is xScale,

319
00:24:53.959 --> 00:24:59.240
and for our yAxis, we just want it to

320
00:24:59.240 --> 00:25:05.065
be at axisLeft, .scale(yScale).

321
00:25:07.873 --> 00:25:09.706
&gt;&gt; Shirley Wu: Then, I'm, and

322
00:25:09.706 --> 00:25:15.207
then all we gotta do is that
same svg we defined up top or

323
00:25:15.207 --> 00:25:19.876
selected up top,
we just append that group.

324
00:25:19.876 --> 00:25:24.740
And then, actually let's call it, let's
call the X axis and see what happens.

325
00:25:26.070 --> 00:25:32.200
So notice how it actually is,

326
00:25:32.200 --> 00:25:36.960
it scooted over on the x axis properly for
us because the x scale

327
00:25:36.960 --> 00:25:41.320
starts with the margin
that left of 20 pixels.

328
00:25:41.320 --> 00:25:44.590
So that's actually correct but
we need to push that down so

329
00:25:44.590 --> 00:25:47.760
that it's right below our bars, right?

330
00:25:47.760 --> 00:25:52.076
So let's set our transform and

331
00:25:52.076 --> 00:25:56.226
we just want to translate by,

332
00:26:05.551 --> 00:26:07.876
&gt;&gt; Shirley Wu: I just like using an array

333
00:26:07.876 --> 00:26:13.191
to do this, but
let's translate the x by 0 because it's

334
00:26:13.191 --> 00:26:18.930
already got the 20 pixel
margin thanks to the xScale.

335
00:26:18.930 --> 00:26:22.080
And then let's translate it down, and

336
00:26:22.080 --> 00:26:28.196
it should be height- margin.bottom is
how much we translate that down by.

337
00:26:31.657 --> 00:26:36.710
&gt;&gt; Shirley Wu: Oops, yeah and then, for

338
00:26:36.710 --> 00:26:42.915
our svg.append, call y axis.

339
00:26:45.237 --> 00:26:49.962
&gt;&gt; Shirley Wu: You can see there
is that little bit of a line here

340
00:26:49.962 --> 00:26:55.164
because it's correct because
we just need to push it

341
00:26:55.164 --> 00:27:00.226
over,
&gt;&gt; Shirley Wu: By the margin left.

342
00:27:06.726 --> 00:27:12.368
&gt;&gt; Shirley Wu: So,
&gt;&gt; Shirley Wu: So

343
00:27:12.368 --> 00:27:17.609
push it over by margin left, and we don't
need to do any pushing on the y axis.

344
00:27:19.550 --> 00:27:22.410
Because the y scale has already
taken care of that for us.

345
00:27:22.410 --> 00:27:24.839
And this is why it's super nice
to have that margin object.

346
00:27:24.839 --> 00:27:29.817
Because you see that 20 pixels
over isn't actually enough room.

347
00:27:29.817 --> 00:27:36.529
So I can adjust the margin left
to be like 40 pixels, let's say.

348
00:27:36.529 --> 00:27:38.734
So that all of the axes will show up.

349
00:27:42.134 --> 00:27:46.785
&gt;&gt; Shirley Wu: And that's it, this bar
chart, super straightforward, right?

350
00:27:48.839 --> 00:27:50.930
&gt;&gt; Male off screen: It was.
&gt;&gt; Shirley Wu: Yes, and awesome.

351
00:27:52.980 --> 00:27:53.974
Yeah?
&gt;&gt; Male off screen: So [COUGH] for

352
00:27:53.974 --> 00:27:59.056
putting the rectangles in you have to
go through each of these attributes,

353
00:27:59.056 --> 00:28:03.894
is there a shorthand where you could
define an object that would be all of

354
00:28:03.894 --> 00:28:07.144
those attributes that
you could pass in there?

355
00:28:07.144 --> 00:28:11.886
&gt;&gt; Shirley Wu: I think d3 used to
let us do that, where you say,

356
00:28:11.886 --> 00:28:17.346
you just used one.adder and
you will do an object with.

357
00:28:17.346 --> 00:28:19.243
And keyed by like xy with high and

358
00:28:19.243 --> 00:28:22.600
then values are the functions
that returns that.

359
00:28:22.600 --> 00:28:27.380
I think d3 used to let us do that and
it seems like d4 doesn't.

360
00:28:27.380 --> 00:28:31.461
I haven't, I'm just now used to
this pane of writing it out and

361
00:28:31.461 --> 00:28:33.007
I haven't tried that.

362
00:28:33.007 --> 00:28:37.553
But you could give it a try or
read the documentation, but

363
00:28:37.553 --> 00:28:40.910
I think you have to write it all out.

364
00:28:40.910 --> 00:28:43.152
And then you had-
&gt;&gt; Female off screen: Yeah,

365
00:28:43.152 --> 00:28:47.063
I was just curious .call,
what is that actually doing?

366
00:28:47.063 --> 00:28:50.161
&gt;&gt; Shirley Wu: Okay, so
.call underneath the hood, and

367
00:28:50.161 --> 00:28:53.640
then this .call is in
the selection module.

368
00:28:53.640 --> 00:28:59.141
So you can read the documentation there,
but .call is essentially just

369
00:28:59.141 --> 00:29:04.374
a nice chaining shorthand for
underneath the hood that's what it's

370
00:29:04.374 --> 00:29:09.744
doing is,
&gt;&gt; Shirley Wu: And that is it.

371
00:29:09.744 --> 00:29:14.895
So in this case
the selection is svg.append,

372
00:29:14.895 --> 00:29:21.115
this whole part, right of the svg and
we appended the g.

373
00:29:21.115 --> 00:29:22.503
And we did the transform so

374
00:29:22.503 --> 00:29:26.510
that's our selection that is
getting passed into the y axis.

375
00:29:26.510 --> 00:29:30.330
So all that is happening
underneath the hood.

376
00:29:30.330 --> 00:29:34.609
There is however some
things about what this is.

377
00:29:34.609 --> 00:29:38.400
You can read the documentation for
more details about yeah.

378
00:29:38.400 --> 00:29:41.810
But yeah so y axis,
just taking that selection and

379
00:29:41.810 --> 00:29:46.670
creating a bunch of like groups and
text and stuff to draw that axis.

380
00:29:46.670 --> 00:29:50.190
&gt;&gt; Male off screen: And
then we got a couple more questions,

381
00:29:50.190 --> 00:29:54.810
one question is about the x axis for
dates.

382
00:29:54.810 --> 00:30:01.090
Why is it displaying the month names
instead of the specific dates?

383
00:30:01.090 --> 00:30:04.320
And how were the number
of ticks figured out?

384
00:30:04.320 --> 00:30:07.012
How did it figure out
how many of those to do?

385
00:30:07.012 --> 00:30:09.378
&gt;&gt; Shirley Wu: D3 Mike Bostock
black magic.

386
00:30:09.378 --> 00:30:11.210
&gt;&gt; Male off screen: Yes.

387
00:30:11.210 --> 00:30:13.960
&gt;&gt; Shirley Wu: I don't actually have
the exact answer for the second

388
00:30:13.960 --> 00:30:17.260
question because I've never looked at
the axis code underneath the hood.

389
00:30:17.260 --> 00:30:22.040
I think he guesstimates in his code.

390
00:30:22.040 --> 00:30:27.015
But if you want, for example,
very specifically only 10 ticks.

391
00:30:27.015 --> 00:30:29.494
You can actually specify that.

392
00:30:29.494 --> 00:30:34.575
You can say, it takes, is that 10, 1,
2 let me do something that's like,

393
00:30:40.189 --> 00:30:40.909
&gt;&gt; Shirley Wu: Yeah, so

394
00:30:40.909 --> 00:30:46.850
if you only specifically want a certain
number of ticks, you can pass that in.

395
00:30:46.850 --> 00:30:51.431
Although this one for some reason isn't
giving you like the actual text, but

396
00:30:51.431 --> 00:30:54.267
you can see there
are specifically five ticks.

397
00:30:54.267 --> 00:30:56.956
And then there is also,

398
00:30:56.956 --> 00:31:02.601
I think the other question was,
so for the x axis,

399
00:31:02.601 --> 00:31:09.342
d3 is smart enough to know that hey,
you pass me in a scale.

400
00:31:09.342 --> 00:31:12.465
That's a scale time, so

401
00:31:12.465 --> 00:31:17.840
that's why I should be putting out dates.

402
00:31:17.840 --> 00:31:25.449
But if you want it to,
&gt;&gt; Shirley Wu: For

403
00:31:25.449 --> 00:31:31.950
example, if you want it to,
I don't know what's interesting.

404
00:31:31.950 --> 00:31:36.160
&gt;&gt; Male off screen: For example,
October 2011, November 2011, right,

405
00:31:36.160 --> 00:31:37.550
as the tick, right.

406
00:31:37.550 --> 00:31:42.383
&gt;&gt; Shirley Wu: Yeah let's,
&gt;&gt; Shirley Wu: I don't know these off

407
00:31:42.383 --> 00:31:43.140
the top of my head.

408
00:31:43.140 --> 00:31:48.613
Let me say like d.getMonth, is that, wait,

409
00:31:54.387 --> 00:31:56.734
&gt;&gt; Shirley Wu: Hold on.

410
00:31:56.734 --> 00:32:03.240
getFullyear,
&gt;&gt; Shirley Wu: You can.

411
00:32:06.750 --> 00:32:07.980
How do I get the month?

412
00:32:07.980 --> 00:32:09.440
Hold on, let me do it this way.

413
00:32:10.770 --> 00:32:16.230
d3.timeFormat and
then I think it's percent.

414
00:32:16.230 --> 00:32:19.403
&gt;&gt; Male off screen: One of
the comments here is %B.

415
00:32:19.403 --> 00:32:20.991
&gt;&gt; Shirley Wu: Thank you.

416
00:32:20.991 --> 00:32:28.159
That's, and then you can pass in your
date, yeah, there we go, yes, thank you.

417
00:32:28.159 --> 00:32:29.274
%Y, %Y, yes.

418
00:32:29.274 --> 00:32:29.960
&gt;&gt; Male off screen: Hey, look at that.

419
00:32:29.960 --> 00:32:33.550
&gt;&gt; Shirley Wu: And then I think if
you do %B, it's the short hand,

420
00:32:33.550 --> 00:32:39.190
the three-letter months and
so this is how we can.

421
00:32:39.190 --> 00:32:42.820
And, again, notice that this
basically gives you back a function.

422
00:32:42.820 --> 00:32:48.645
And then you use that function and
pass in your data and

423
00:32:48.645 --> 00:32:53.660
that's how it's doing the tick formats.

424
00:32:53.660 --> 00:32:58.862
Another way,
a similar thing is I'm actually.

425
00:32:58.862 --> 00:33:02.694
If you just say d3.timeFormat and

426
00:33:02.694 --> 00:33:07.590
then %B %Y, the same thing as previous.

427
00:33:07.590 --> 00:33:11.140
These two lines are doing
exactly the same thing because

428
00:33:11.140 --> 00:33:15.490
time format returns you a function
that takes in your data.

429
00:33:15.490 --> 00:33:20.100
And so this line and

430
00:33:20.100 --> 00:33:24.600
this line are exactly the same.

431
00:33:24.600 --> 00:33:29.850
Yeah, so I want to mention this and I want
to highlight this fact because if you look

432
00:33:29.850 --> 00:33:35.050
at d3 code, if you go through blogs and
you find people's blogs.

433
00:33:35.050 --> 00:33:40.452
I think one of the big sources of
confusion is you see people just doing

434
00:33:40.452 --> 00:33:46.994
this and you're like, wait, why is that
giving me the right set of return values?

435
00:33:46.994 --> 00:33:51.312
And that's just because this is
actually just a function that

436
00:33:51.312 --> 00:33:55.482
takes in your data and
spits out the formatted date, yeah.

437
00:33:55.482 --> 00:34:01.280
[BLANK AUDIO] Cool,
is there another question?

438
00:34:01.280 --> 00:34:04.640
&gt;&gt; Male off screen: The last question
is it seems that one of your axes

439
00:34:04.640 --> 00:34:06.900
starts at 20,
how would you start it from 0?

440
00:34:06.900 --> 00:34:13.370
So if you could just show where the
off-set of the drawn axis is in your code.

441
00:34:13.370 --> 00:34:14.750
&gt;&gt; Shirley Wu: In my x-axis?

442
00:34:14.750 --> 00:34:19.250
&gt;&gt; Male off screen: I think
it's the y-axis actually, so

443
00:34:19.250 --> 00:34:24.090
how far left or right it is.

444
00:34:24.090 --> 00:34:30.220
&gt;&gt; Shirley Wu: Okay,
let me repeat that to see if I understood.

445
00:34:30.220 --> 00:34:35.083
So my y-axis, it's currently
moved over 20 pixels to the,

446
00:34:35.083 --> 00:34:39.960
over 20 pixels and
what would it look like if it's just 0?

447
00:34:39.960 --> 00:34:42.920
&gt;&gt; Male off screen: Yeah,
just like not moved over at all.

448
00:34:42.920 --> 00:34:46.270
&gt;&gt; Shirley Wu: Okay, so
I will just comment out this transform and

449
00:34:46.270 --> 00:34:47.650
this is what it looks like.

450
00:34:47.650 --> 00:34:54.270
So it looks like you can't see anything
because it's starting at zero and then

451
00:34:54.270 --> 00:34:59.970
it's getting clipped off because all of
the ticks and stuff are to the left of it.

452
00:34:59.970 --> 00:35:02.510
And you just can't see anything.

453
00:35:02.510 --> 00:35:06.640
And that's why it's pretty important
to include the transform translate.

454
00:35:08.180 --> 00:35:10.930
&gt;&gt; Male off screen: I think the other part
of that question might be that the numbers

455
00:35:10.930 --> 00:35:12.010
on your scale.

456
00:35:12.010 --> 00:35:14.982
The first tick is at 25 and
then it goes to 30 so

457
00:35:14.982 --> 00:35:17.675
it looks like they're incrementing by 5.

458
00:35:17.675 --> 00:35:21.580
And if you start that at 0,
you'd change the extent.

459
00:35:21.580 --> 00:35:25.387
&gt;&gt; Shirley Wu: Yes, perfect,
thank you very much, I see, I see.

460
00:35:25.387 --> 00:35:29.590
Okay, yeah, so that's why I also
showed the whole minimax thing, so.

461
00:35:31.410 --> 00:35:35.024
Yeah, so
that could be like super confusing if

462
00:35:35.024 --> 00:35:39.018
actually I think in some
cases all I want is the max.

463
00:35:43.419 --> 00:35:48.211
&gt;&gt; Shirley Wu: So that I can just
say I want it to always start at 0,

464
00:35:48.211 --> 00:35:51.114
my y should always start at 0.

465
00:35:52.180 --> 00:35:58.840
Despite if values,
even if the min is 20 degrees,

466
00:35:58.840 --> 00:36:06.009
I want it to start at 0 degrees,
and then the top is.

467
00:36:07.680 --> 00:36:08.420
There we go.

468
00:36:08.420 --> 00:36:13.450
So now, it starts at 0 and
then goes all the way until 80 where

469
00:36:13.450 --> 00:36:17.760
as before it went from 20 to 80
because that was my minimax.

