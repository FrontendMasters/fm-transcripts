WEBVTT

1
00:00:00.310 --> 00:00:01.850
&gt;&gt; Shirley Wu: So let's get started.

2
00:00:01.850 --> 00:00:03.520
So, we will start with the selection and
data.

3
00:00:03.520 --> 00:00:05.560
I will start with this piece of code.

4
00:00:05.560 --> 00:00:11.230
And all this piece of code does is
give me this really ugly bar chart.

5
00:00:12.370 --> 00:00:17.357
So, it's like really ugly blue bar chart.
&gt;&gt; Shirley Wu: And

6
00:00:17.357 --> 00:00:21.081
so what's happening here is I am.

7
00:00:21.081 --> 00:00:24.369
I should probably ask, how many people
are familiar with SVG elements?

8
00:00:27.410 --> 00:00:31.460
Okay, for now, we don't really need to
know how it works other than that it

9
00:00:31.460 --> 00:00:35.770
pretty much works syntactically like HTML.

10
00:00:36.970 --> 00:00:42.250
And these are rectangle elements,
so they would draw rectangles once

11
00:00:42.250 --> 00:00:47.250
we give them the right attributes for x
and y positions and within height values.

12
00:00:47.250 --> 00:00:48.900
So, that's all we need to
know about this for now.

13
00:00:48.900 --> 00:00:51.320
So, this is my code.

14
00:00:51.320 --> 00:00:52.360
And then, you know,

15
00:00:52.360 --> 00:00:55.930
I have SVG declared and I have five
rectangle elements that I've created.

16
00:00:58.710 --> 00:01:03.897
And right here, I'm using D3 to select
all the rectangle elements that

17
00:01:03.897 --> 00:01:08.945
already exist in the dom.
&gt;&gt; Shirley Wu: And

18
00:01:08.945 --> 00:01:14.500
with d3.selectall I can use any sort
of like, basically any CSS selector and

19
00:01:14.500 --> 00:01:19.740
it will just go through, and grab
everything that matches on the screen.

20
00:01:19.740 --> 00:01:26.130
We can also use d3.select to just
grab the first thing that matches.

21
00:01:26.130 --> 00:01:30.720
But yeah, for right now,
we're using select all rect, and

22
00:01:30.720 --> 00:01:33.800
then if we console log that one line,

23
00:01:33.800 --> 00:01:38.460
that d3.selectall rect, and
this is what it looks like under the hood.

24
00:01:38.460 --> 00:01:43.570
And I want to start making sure
that we look at how it looks like,

25
00:01:43.570 --> 00:01:46.310
what it looks like under
the hood from the very beginning.

26
00:01:47.460 --> 00:01:51.240
So essentially what a d3.selection is,

27
00:01:51.240 --> 00:01:57.930
is it's an array of all of the dom
elements that you've selected.

28
00:01:57.930 --> 00:02:03.340
And it's just wrapped
around in these things, and

29
00:02:03.340 --> 00:02:09.250
so that you have like all of the APIs
that are available to you for selection.

30
00:02:09.250 --> 00:02:15.160
So, you can use like .data.

31
00:02:15.160 --> 00:02:16.800
You can use .otter, and

32
00:02:16.800 --> 00:02:20.910
all of those functions are available
to you with just this.

33
00:02:22.130 --> 00:02:24.575
So this is what a d3.selection looks like.

34
00:02:24.575 --> 00:02:28.647
And I want to like pound that home because
I think that a lot of people think that

35
00:02:28.647 --> 00:02:32.534
selections are this like mystical thing
that D3 has and you can like chain

36
00:02:32.534 --> 00:02:36.192
functions on it, and they don't
quite know like what it looks like.

37
00:02:36.192 --> 00:02:36.951
It's super straightforward.

38
00:02:36.951 --> 00:02:40.985
It's just an array of dom elements
with some functions wrapped around it.

39
00:02:42.005 --> 00:02:42.695
Nothing mystical.

40
00:02:45.140 --> 00:02:49.110
And then here's what I think
a lot of the magic happens.

41
00:02:49.110 --> 00:02:53.156
So there's a function called .data and

42
00:02:53.156 --> 00:02:58.154
with this function,
you pass in an array of data,

43
00:02:58.154 --> 00:03:02.201
so this is right here is my array of data.

44
00:03:08.960 --> 00:03:13.100
&gt;&gt; Shirley Wu: And I'm passing it in.

45
00:03:13.100 --> 00:03:17.500
And what's happening is under
the hood what d3 is doing,

46
00:03:17.500 --> 00:03:21.990
is it's taking a look at all of
the rectangle elements that we've

47
00:03:21.990 --> 00:03:27.420
grouped with the selection so
that's on the left hand side?

48
00:03:27.420 --> 00:03:28.508
Yeah.

49
00:03:28.508 --> 00:03:33.677
Hold the right angle is that we've
grouped with d3.selection and

50
00:03:33.677 --> 00:03:39.750
what that data is doing is saying, hey,
this is my array of data, on this side,

51
00:03:39.750 --> 00:03:45.883
and then let me just map them one to one.
&gt;&gt; Shirley Wu: And

52
00:03:45.883 --> 00:03:52.966
then underneath the hood what's happening
here is for each of these rect elements,

53
00:03:52.966 --> 00:03:58.890
d3 is literary binding your
data to the rectangle element.

54
00:03:58.890 --> 00:04:02.090
With this kind of like _ _ data attribute.

55
00:04:02.090 --> 00:04:06.450
And that's how,
this is pretty much the core of d3.

56
00:04:06.450 --> 00:04:11.756
You take some data and
then you apply it to the like

57
00:04:11.756 --> 00:04:16.470
DOM element, and

58
00:04:16.470 --> 00:04:23.565
then you access it because it's literally
been bound to the element in this way.

59
00:04:23.565 --> 00:04:29.374
Okay.
&gt;&gt; Shirley Wu: Okay,

60
00:04:29.374 --> 00:04:35.293
so yeah, and then once you've bound
that to each of the elements,

61
00:04:35.293 --> 00:04:42.490
you can actually use that data to kind
of specify what your element should do.

62
00:04:42.490 --> 00:04:48.003
So, right here what's happening is now
that we've bound the data, I'm telling it,

63
00:04:48.003 --> 00:04:53.384
hey, for each of these rectangle elements,
this is what I want my x attribute to be.

64
00:04:53.384 --> 00:04:58.406
So what's happening here is,
d3 than underneath

65
00:04:58.406 --> 00:05:03.679
the hood is looping through
each of the SVG elements.

66
00:05:03.679 --> 00:05:08.956
And on each like, okay.

67
00:05:08.956 --> 00:05:14.130
And as it loops through each
of the SVG elements it passes

68
00:05:14.130 --> 00:05:19.414
in the data that's been bound
to that specific element as

69
00:05:19.414 --> 00:05:25.049
well as the index of that element and
that array I showed you.

70
00:05:25.049 --> 00:05:29.285
And then you basically use
a function to specify, like hey,

71
00:05:29.285 --> 00:05:33.190
this is what I want to return for
this ex attribute.

72
00:05:33.190 --> 00:05:37.920
So for example, I'm,
what I'm doing here is, I specify,

73
00:05:37.920 --> 00:05:43.200
I think I specify like erect
with 50 pixels and I say,

74
00:05:44.500 --> 00:05:49.250
just use the index of that SVG element,
and multiply it by 50.

75
00:05:49.250 --> 00:05:53.160
So then what that means is as

76
00:05:55.230 --> 00:05:57.870
it loops through, the rectangle elements,

77
00:05:57.870 --> 00:06:03.240
the bars,
are laid out nicely across the screen.

78
00:06:04.410 --> 00:06:07.168
Yeah, question?
&gt;&gt; Audience 1: Yes,

79
00:06:07.168 --> 00:06:10.094
I have two questions.
&gt;&gt; Shirley Wu: Okay.

80
00:06:10.094 --> 00:06:11.223
&gt;&gt; Audience 1: Kendall B asks,

81
00:06:11.223 --> 00:06:15.986
those arrow functions, will that
prevent it from running on browsers

82
00:06:15.986 --> 00:06:18.363
without ES6 support?
&gt;&gt; Shirley Wu: Ooh, so

83
00:06:18.363 --> 00:06:20.980
this is just me being lazy.

84
00:06:20.980 --> 00:06:26.640
You can definitely use just
like none ES6 functions and

85
00:06:26.640 --> 00:06:31.140
yeah, it like d3 does
not require L functions.

86
00:06:31.140 --> 00:06:35.270
This is just me being
lazy with my code and

87
00:06:35.270 --> 00:06:39.687
trying to conserve space, yeah [LAUGH].
&gt;&gt; Audience 1: That's excellent and

88
00:06:39.687 --> 00:06:43.059
then the second question is from lock in.

89
00:06:43.059 --> 00:06:48.527
What if there's more rectangle elements or
if there's more

90
00:06:48.527 --> 00:06:53.220
data than the rectangles that you have?
&gt;&gt; Shirley Wu: Absolutely

91
00:06:53.220 --> 00:06:54.410
excellent question.

92
00:06:54.410 --> 00:06:55.670
We're getting there.

93
00:06:55.670 --> 00:07:00.262
So, I'm just giving you the most
simple straight forward and then,

94
00:07:00.262 --> 00:07:01.777
we'll build up to it.

95
00:07:01.777 --> 00:07:06.767
Yes, so right now lets just
only consider when data and

96
00:07:06.767 --> 00:07:10.357
the DOM elements are mapped one to one.

97
00:07:10.357 --> 00:07:15.334
So, yeah.
&gt;&gt; Shirley Wu: So,

98
00:07:15.334 --> 00:07:19.060
we were talking about looping through that
each of these functions are essentially

99
00:07:19.060 --> 00:07:20.200
underneath the hood.

100
00:07:20.200 --> 00:07:24.750
Looping through each of the elements,
and then [COUGH] applying the value that

101
00:07:24.750 --> 00:07:28.192
you basically have returned with
the function that you've passed in.

102
00:07:28.192 --> 00:07:31.830
So to kind of drive that point home,
this is a really,

103
00:07:31.830 --> 00:07:35.670
really tiny screen shot
of the console log,

104
00:07:35.670 --> 00:07:41.240
and this is just basically
me console logging in here.

105
00:07:41.240 --> 00:07:44.024
What the index is?

106
00:07:44.024 --> 00:07:45.230
What the data is?

107
00:07:45.230 --> 00:07:51.412
And basically,
all of the attributes that's been bound

108
00:07:51.412 --> 00:07:56.970
to the SVG elements,
with these outer functions.

109
00:07:56.970 --> 00:08:02.476
So you can see like d3 [COUGH] is looking

110
00:08:02.476 --> 00:08:07.570
at the first rect and then calculating x,
y, width, height, and

111
00:08:07.570 --> 00:08:12.980
then the second, the third, fourth,
and fifth, and that's how it's working

112
00:08:14.370 --> 00:08:18.946
under the hood.
&gt;&gt; Audience 1: We have

113
00:08:18.946 --> 00:08:23.408
[INAUDIBLE] a simply asks
where is racked with set?

114
00:08:23.408 --> 00:08:27.614
The variable rect with?
&gt;&gt; Shirley Wu: I

115
00:08:27.614 --> 00:08:32.394
removed that from this code piece for

116
00:08:32.394 --> 00:08:36.685
like first six [INAUDIBLE].
&gt;&gt; Audience 1: Yes,

117
00:08:36.685 --> 00:08:38.739
sure.
&gt;&gt; Shirley Wu: Yeah, but

118
00:08:38.739 --> 00:08:43.280
this is where we get
to play with the code.

119
00:08:43.280 --> 00:08:49.450
So that exact piece of code with
a rect with is included in this block.

120
00:08:51.350 --> 00:08:57.250
So, let's take about five minutes to
kind of play with this piece of code,

121
00:08:57.250 --> 00:08:59.980
change around numbers,
change around the data, add or

122
00:08:59.980 --> 00:09:04.910
remove a rectangle if you want to, but
make sure to console log all the things,

123
00:09:04.910 --> 00:09:09.650
and open up the arrays as you console log,
and

124
00:09:09.650 --> 00:09:14.288
kind of dig into what's happening under
the hood, so that you can get a sense.

125
00:09:14.288 --> 00:09:17.469
Yeah, five minutes.

