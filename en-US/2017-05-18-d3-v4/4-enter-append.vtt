WEBVTT

1
00:00:00.380 --> 00:00:01.948
&gt;&gt; Shirley Wu: The question
we had earlier.

2
00:00:01.948 --> 00:00:07.730
What if we have more data then
we have rectangle elements?

3
00:00:07.730 --> 00:00:15.740
So this piece of code gives back the exact
same bar graph that we had earlier.

4
00:00:18.220 --> 00:00:21.800
The only difference is now we
don't create rectangle elements.

5
00:00:22.970 --> 00:00:26.788
So, when we're doing the svg.selectAll,

6
00:00:26.788 --> 00:00:31.719
what are we even selecting if
they don't exist in the DOM?

7
00:00:33.704 --> 00:00:36.500
&gt;&gt; Shirley Wu: And the answer is,
it's an empty selection.

8
00:00:36.500 --> 00:00:40.190
And this blew my mind
when I first realized.

9
00:00:40.190 --> 00:00:42.040
So how are those bars even appearing?

10
00:00:44.950 --> 00:00:50.170
So this is the part, the data enter
append, and that's the magic.

11
00:00:50.170 --> 00:00:56.344
That was the like [SOUND] mind blow
moment for me when I first learned D3.

12
00:00:56.344 --> 00:01:01.521
So let's go through how this is
working underneath the hood.

13
00:01:01.521 --> 00:01:06.268
So,
&gt;&gt; Shirley Wu: That

14
00:01:06.268 --> 00:01:08.890
same doodle from earlier.

15
00:01:08.890 --> 00:01:14.900
So when we do .data and
we enter in the set of data,

16
00:01:14.900 --> 00:01:20.211
we pass in the set of
data like we did before.

17
00:01:22.129 --> 00:01:25.453
&gt;&gt; Shirley Wu: This's what
that data is calculating.

18
00:01:25.453 --> 00:01:28.810
It's saying, here is all my data
that I had been posting and

19
00:01:28.810 --> 00:01:33.109
this all the rectangle elements that
exist on the screen right now which just

20
00:01:33.109 --> 00:01:34.264
happens to be zero.

21
00:01:34.264 --> 00:01:37.161
Which means I need five rectangles,

22
00:01:37.161 --> 00:01:41.279
I need to create five
rectangles to match that data.

23
00:01:41.279 --> 00:01:44.387
And that's all that data figures out.

24
00:01:44.387 --> 00:01:49.112
And then what that enter comes and
does is, it says, okay,

25
00:01:49.112 --> 00:01:51.947
I need to have five place holders for

26
00:01:51.947 --> 00:01:56.121
the right elements to make
sure it matches the data.

27
00:01:56.121 --> 00:02:00.247
So, it just puts in these
five place holders.

28
00:02:00.247 --> 00:02:05.499
And then finally, when you dot append,
it takes those placeholders and

29
00:02:05.499 --> 00:02:10.061
actually creates rectangle and
rect elements out of them, and

30
00:02:10.061 --> 00:02:13.266
also at the same time
binds all of that data.

31
00:02:13.266 --> 00:02:18.077
Yeah, so that's essentially what's
happening for data Enter-Append,

32
00:02:18.077 --> 00:02:22.524
and then down here is this,
exactly the same piece of code as earlier.

33
00:02:22.524 --> 00:02:24.980
Because after the data has been found,

34
00:02:24.980 --> 00:02:29.306
you can just access it with any of
these functions like we did before.

35
00:02:32.275 --> 00:02:34.944
&gt;&gt; Shirley Wu: So
I have another\g play with the code.

36
00:02:38.238 --> 00:02:43.333
&gt;&gt; Shirley Wu: So this time,
try console logging, I can actually

37
00:02:43.333 --> 00:02:48.608
do something like,
&gt;&gt; Shirley Wu: Let's see.

38
00:02:48.608 --> 00:02:52.762
Let's just give this
some sort of variable.

39
00:02:52.762 --> 00:02:55.227
Let's just cal it enter.

40
00:02:55.227 --> 00:02:59.431
And what I'm gonna do as I figure out,
as I Console,

41
00:02:59.431 --> 00:03:04.784
go through in Console log is I'm
just gonna comment out everything

42
00:03:04.784 --> 00:03:09.582
underneath selectAll, and
I'm just gonna look at enter.

43
00:03:13.851 --> 00:03:17.149
&gt;&gt; Shirley Wu: And
I'm going to open up my console.

44
00:03:20.786 --> 00:03:21.863
&gt;&gt; Shirley Wu: Okay.

45
00:03:24.829 --> 00:03:29.661
&gt;&gt; Shirley Wu: Okay, so this is one
that we saw earlier, except now,

46
00:03:29.661 --> 00:03:35.020
let me look at the groups,
where there should be the note list

47
00:03:35.020 --> 00:03:40.616
is zero because we don't have
any rect elements on the screen.

48
00:03:40.616 --> 00:03:47.325
So, this part just returns
that with no elements.

49
00:03:47.325 --> 00:03:53.360
Now let's console log
the dot data portion.

50
00:03:53.360 --> 00:03:54.651
This is what it looks like.

51
00:03:56.686 --> 00:03:59.783
&gt;&gt; Shirley Wu: And you can see
now this one says array of five,

52
00:03:59.783 --> 00:04:05.790
under the groups which is kind of like,
what D3 thinks is existing on the screen.

53
00:04:05.790 --> 00:04:07.170
But if you open it up,

54
00:04:07.170 --> 00:04:11.592
it's still empty because there's nothing
that exists on the screen right now.

55
00:04:11.592 --> 00:04:12.740
Can you guys see?

56
00:04:17.522 --> 00:04:18.099
&gt;&gt; Shirley Wu: Yeah.

57
00:04:18.099 --> 00:04:22.476
So groups is essentially what
d3 knows is on the screen.

58
00:04:22.476 --> 00:04:24.440
And right now,
there's nothing on the screen.

59
00:04:24.440 --> 00:04:30.874
So the array, even though it says five,
it's empty inside.

60
00:04:30.874 --> 00:04:34.358
And then, when you open up enter,
it says array of five.

61
00:04:34.358 --> 00:04:36.290
And this is all of the placeholders.

62
00:04:36.290 --> 00:04:40.072
So it just says I don't
know why it is called z.

63
00:04:40.072 --> 00:04:44.956
If you open that up,
you will see that it has that data

64
00:04:44.956 --> 00:04:48.969
bound to it that we
were looking at before.

65
00:04:48.969 --> 00:04:53.307
There are the five placeholder elements.

66
00:04:53.307 --> 00:04:58.332
And then if we Console log,

67
00:04:58.332 --> 00:05:06.645
lets just console log
what happens on Enter.

68
00:05:06.645 --> 00:05:07.678
So dot enter.

69
00:05:13.541 --> 00:05:15.207
&gt;&gt; Shirley Wu: So
this is what we're console logging.

70
00:05:19.344 --> 00:05:25.752
&gt;&gt; Shirley Wu: And now you see,
there is, it returns these groups and

71
00:05:25.752 --> 00:05:31.184
it returns all of
the placeholders in here, so

72
00:05:31.184 --> 00:05:38.679
that when we do dot Append,
&gt;&gt; Shirley Wu: We

73
00:05:38.679 --> 00:05:47.388
get all of the rectangle elements,
&gt;&gt; Shirley Wu: With the data bound.

74
00:05:47.388 --> 00:05:48.919
All right questions?

75
00:05:48.919 --> 00:05:53.397
&gt;&gt; Speaker 2: Yes, one question is,

76
00:05:53.397 --> 00:06:01.435
can we use Bootstrap 3 as well to
change the display of these items?

77
00:06:01.435 --> 00:06:06.292
&gt;&gt; Shirley Wu: Okay, so I haven't used
Bootstrap in quite a few years, but

78
00:06:06.292 --> 00:06:08.197
with Bootstrap three,

79
00:06:08.197 --> 00:06:14.025
I think how you can use Bootstrap is
you just set a lot of classes, right?

80
00:06:14.025 --> 00:06:16.093
So, yes.

81
00:06:16.093 --> 00:06:20.713
The answer is yes, and
what you could do there actually

82
00:06:20.713 --> 00:06:24.342
is if you take a look
at the selections API.

83
00:06:24.342 --> 00:06:27.708
So .attr isn't the only function
that you can use with the selection.

84
00:06:27.708 --> 00:06:35.017
There's a lot of other functions that you
can use, like .style will set CSS, dot.

85
00:06:35.017 --> 00:06:39.833
But in the case of classes,
if you want to use Bootstrap, and

86
00:06:39.833 --> 00:06:44.272
you want to set specific
classes depending on the data,

87
00:06:44.272 --> 00:06:49.381
what you can do is called, actually,
you can just say dot attr.

88
00:06:49.381 --> 00:06:54.653
I think if you just do dot attr class.

89
00:06:54.653 --> 00:07:00.380
And then, [COUGH] you just say,

90
00:07:00.380 --> 00:07:05.445
if the data is equal to cat,

91
00:07:05.445 --> 00:07:09.849
return, this is what my

92
00:07:09.849 --> 00:07:14.933
classes should look like.

93
00:07:14.933 --> 00:07:20.699
[LAUGH] And then like if it says blah,
blah, blah, you can return some other,

94
00:07:20.699 --> 00:07:26.497
whatever the classes should look,
whatever other classes there should be.

95
00:07:30.523 --> 00:07:34.495
&gt;&gt; Speaker 2: Thank you, and
then we have two more questions.

96
00:07:34.495 --> 00:07:40.415
One of them is basically the SVG
elements created with enter append

97
00:07:40.415 --> 00:07:46.227
element is one per line for
the CSV file or the row in the database,

98
00:07:46.227 --> 00:07:51.323
or whatever array of data
that you're given, correct?

99
00:07:51.323 --> 00:07:51.959
&gt;&gt; Shirley Wu: Yeah.

100
00:07:51.959 --> 00:07:54.424
&gt;&gt; Speaker 2: Let's say you
have seven rows of data,

101
00:07:54.424 --> 00:07:56.737
you'll get seven items right?

102
00:07:56.737 --> 00:07:57.890
&gt;&gt; Shirley Wu: Yes, precisely.

103
00:07:57.890 --> 00:08:02.810
&gt;&gt; Speaker 2: Good, okay, that makes
sense and then the last one is from Leo.

104
00:08:02.810 --> 00:08:06.890
How do you select one
specific piece of data?

105
00:08:06.890 --> 00:08:10.678
Let's say you wanted to represent
value 250 with a red bar.

106
00:08:10.678 --> 00:08:12.252
How would you do that?

107
00:08:12.252 --> 00:08:14.500
&gt;&gt; Shirley Wu: Yeah,
okay, awesome question.

108
00:08:14.500 --> 00:08:21.860
So first of actually let me show
you just for the sake of it, I'm.

109
00:08:21.860 --> 00:08:25.560
Let me give it 60 and 20 and

110
00:08:25.560 --> 00:08:30.010
then let me also make this smaller.

111
00:08:30.010 --> 00:08:35.650
So it's as simple as that,
when we use data enter append.

112
00:08:35.650 --> 00:08:39.500
This is why D3 stands for
data driven documents,

113
00:08:39.500 --> 00:08:45.260
because the idea is the dom should
reflect the data that you have.

114
00:08:45.260 --> 00:08:48.950
So, it was as easy as me putting in two

115
00:08:51.320 --> 00:08:56.290
more data elements and yeah.

116
00:08:56.290 --> 00:09:01.265
So that was the first one and
then the second one is how do we

117
00:09:01.265 --> 00:09:06.260
do something with
a specific data point data.

118
00:09:06.260 --> 00:09:11.400
So the question was let's say
we want to just make it blue for

119
00:09:11.400 --> 00:09:13.200
everything except for 250.

120
00:09:13.200 --> 00:09:18.290
So we say okay if the data
is equal to 250 actually

121
00:09:19.380 --> 00:09:21.050
let me not do this shorthand, okay.

122
00:09:22.310 --> 00:09:24.510
Let me do it the proper way.

123
00:09:26.390 --> 00:09:33.079
If the data is equal to 250,
I want you to return red.

124
00:09:33.079 --> 00:09:36.790
So now, the default for fill is black.

125
00:09:36.790 --> 00:09:41.770
So everything else is black, but
the element that has 250 bound

126
00:09:41.770 --> 00:09:45.560
to it is red now because we
have told it to return red.

127
00:09:45.560 --> 00:09:48.638
And then I say okay, for
everything else return blue.

128
00:09:48.638 --> 00:09:50.290
&gt;&gt; Shirley Wu: And that's all it takes.

129
00:09:50.290 --> 00:09:54.068
And that's the beauty of D 3 that
once you have the data bound,

130
00:09:54.068 --> 00:09:56.510
you can do absolutely anything with it.

131
00:09:56.510 --> 00:10:00.230
You can return for the functions.

132
00:10:00.230 --> 00:10:05.559
You can do anything you want as long
as it returns a valid value for

133
00:10:05.559 --> 00:10:07.840
that specific attribute.

134
00:10:07.840 --> 00:10:11.140
&gt;&gt; Speaker 2: Can d3 replace jQuery?

135
00:10:12.600 --> 00:10:15.889
&gt;&gt; Shirley Wu: I feel like I'd get into
some sort of an ideological war with this.

136
00:10:19.615 --> 00:10:27.144
&gt;&gt; Shirley Wu: I'm going to say,
&gt;&gt; Shirley Wu: I actually don't think so.

137
00:10:27.144 --> 00:10:30.528
And I say it this way,
I think jQuery, okay so

138
00:10:30.528 --> 00:10:36.510
I also haven't used jQuery in a good few
years because I do data visualization.

139
00:10:36.510 --> 00:10:41.680
So I pretty much use d3 and
d3 like does all of the selections I need.

140
00:10:41.680 --> 00:10:46.285
So this opinion comes with a grain
of salt that's like a few years old.

141
00:10:46.285 --> 00:10:50.020
So when I used jQuery,
I think jQuery the power for it for

142
00:10:50.020 --> 00:10:55.424
me was like all of the different selectors
it has but also the way that I could chain

143
00:10:55.424 --> 00:11:00.621
like getting the parent of an element,
or getting the sibling of an element.

144
00:11:00.621 --> 00:11:04.861
That was that and also, I think,
all of the event handling,

145
00:11:04.861 --> 00:11:06.700
I think I used to use that.

146
00:11:06.700 --> 00:11:11.614
But there is a specific set of things
you can do with jQuery that you can't do

147
00:11:11.614 --> 00:11:12.320
with D3.

148
00:11:12.320 --> 00:11:14.786
And I think for
each of the libraries out there, I mean,

149
00:11:14.786 --> 00:11:17.370
there's thousands of libraries out there,
I feel like.

150
00:11:17.370 --> 00:11:20.928
But for
the big ones that people use a lot,

151
00:11:20.928 --> 00:11:26.070
I think there's a specific use case for
each of them.

152
00:11:26.070 --> 00:11:31.607
And D3 meets the use case of
visualizing data on the web and

153
00:11:31.607 --> 00:11:35.114
jQuery meets a very different need.

154
00:11:35.114 --> 00:11:41.011
So If your need is just visualizing, like
sure D3 for sure will replace jQuery but

155
00:11:41.011 --> 00:11:45.293
it doesn't replace jQuery for
absolutely every use case.

156
00:11:47.240 --> 00:11:54.480
&gt;&gt; Shirley Wu: Yeah,
hopefully I didn't start a war [LAUGH].

157
00:11:54.480 --> 00:11:59.490
&gt;&gt; Speaker 2: So previously we asked
what happens with unbound data.

158
00:12:01.860 --> 00:12:05.490
The question has been redefined a little
bit more, and it has to do with,

159
00:12:05.490 --> 00:12:10.470
let's say that your data was an array,
one, two, three, four, five.

160
00:12:10.470 --> 00:12:14.970
After it was done binding to its nodes,
if the node count was

161
00:12:14.970 --> 00:12:20.660
less than the data array size,
then there would be unbound values.

162
00:12:20.660 --> 00:12:24.689
It would help a lot to know what to do
in those situations where you have,

163
00:12:24.689 --> 00:12:28.652
it seems like you have a mismatch
between how many elements you have and

164
00:12:28.652 --> 00:12:30.012
how much data you have.

165
00:12:30.012 --> 00:12:34.949
How, are there any tips that you have for
dealing with these types of discrepancies?

166
00:12:34.949 --> 00:12:39.978
&gt;&gt; Shirley Wu: Okay, so If I am
understanding the question correctly,

167
00:12:39.978 --> 00:12:45.552
it means that, If there's like
three elements on the screen.

168
00:12:45.552 --> 00:12:50.162
But five deal elements,
like what happens then?

169
00:12:50.162 --> 00:12:52.740
Was that pretty much the question?

170
00:12:52.740 --> 00:12:56.550
&gt;&gt; Speaker 2: Yeah,
it's something similar to that.

171
00:12:56.550 --> 00:13:00.237
There was,
this person is asking whether or

172
00:13:00.237 --> 00:13:05.529
not there was a tool that allows
you to see the state of the data.

173
00:13:05.529 --> 00:13:10.479
Is there a tool that you can use to
actually look into the DOM and say, okay,

174
00:13:10.479 --> 00:13:13.650
what data do you believe you have?

175
00:13:13.650 --> 00:13:17.020
&gt;&gt; Shirley Wu: Okay, great question.

176
00:13:17.020 --> 00:13:22.487
So different from what I was saying,
the three versus five.

177
00:13:22.487 --> 00:13:26.079
Let me just say for the three
rectangles versus five data elements,

178
00:13:26.079 --> 00:13:28.790
we'll cover that later in much detail.

179
00:13:28.790 --> 00:13:33.637
But that question is essentially
like how do I see the state of

180
00:13:33.637 --> 00:13:38.590
the dom elements on a screen and
what data has been bound to it.

181
00:13:38.590 --> 00:13:43.735
So the answer for
that is console.log actually

182
00:13:43.735 --> 00:13:48.233
I think what I'm gonna
do is open this up so

183
00:13:48.233 --> 00:13:52.880
then I can just switch back and
forth okay.

184
00:13:55.600 --> 00:14:03.082
So there is a very awesome
function called .nodes.

185
00:14:03.082 --> 00:14:08.427
And what .nodes does when you chain
it onto a selection is essentially

186
00:14:08.427 --> 00:14:12.880
lets you see, hold on,
I need to console.log that.

187
00:14:12.880 --> 00:14:17.429
Console.log enter.nodes,
and what that shows for

188
00:14:17.429 --> 00:14:22.786
you is essentially all of
the elements that you have selected,

189
00:14:22.786 --> 00:14:26.160
so it kind of just gives you that.

190
00:14:26.160 --> 00:14:31.810
But if you want to see the data
that's been bound, you do enter.data.

191
00:14:31.810 --> 00:14:36.942
And when you don't pass anything in,
if you don't pass any data into the .data

192
00:14:36.942 --> 00:14:41.395
function, all it does is it returns
you the data that's been bound.

193
00:14:43.212 --> 00:14:48.482
&gt;&gt; Shirley Wu: And so those two, those two
functions together can help you depending

194
00:14:48.482 --> 00:14:53.745
on what your need is, it can help you
look at what data is on the screen,

195
00:14:53.745 --> 00:14:56.360
that's been bound to the screen.

196
00:14:56.360 --> 00:15:01.488
So if you just want to, you can look
up the data this way by opening it up.

197
00:15:03.675 --> 00:15:05.145
&gt;&gt; Shirley Wu: Each of them up.

198
00:15:05.145 --> 00:15:09.586
&gt;&gt; Shirley Wu: But if you find that really
annoying then .data is what you need,

199
00:15:09.586 --> 00:15:10.811
yeah, perfect.

200
00:15:14.125 --> 00:15:17.120
&gt;&gt; Speaker 2: We have one more question.

201
00:15:17.120 --> 00:15:21.293
Very straight forward,
what is the browser compatibility of D3?

202
00:15:24.087 --> 00:15:26.232
&gt;&gt; Shirley Wu: 100%?

203
00:15:26.232 --> 00:15:28.172
&gt;&gt; Speaker 3: Yeah it's just JavaScript.

204
00:15:28.172 --> 00:15:29.543
&gt;&gt; Speaker 2: It depends
on what you do with it.

205
00:15:29.543 --> 00:15:34.413
&gt;&gt; Speaker 3: Yeah, so if you're using
svg then browser support can be shotty

206
00:15:34.413 --> 00:15:39.717
depending on the types of filters you
use on svg, or something like that.

207
00:15:39.717 --> 00:15:40.647
&gt;&gt; Shirley Wu: Yeah.

208
00:15:40.647 --> 00:15:43.726
&gt;&gt; Speaker 3: But it's just basic DOM and
JavaScript, so it works everywhere.

209
00:15:43.726 --> 00:15:45.180
&gt;&gt; Shirley Wu: Yeah.

210
00:15:45.180 --> 00:15:49.843
So I guess adding on to that,
I think there's

211
00:15:49.843 --> 00:15:54.877
nothing really special
about what D3 is doing So

212
00:15:54.877 --> 00:16:00.769
D3 is just supposed to be kind
of this utility function,

213
00:16:00.769 --> 00:16:05.400
this tool to help you manipulate the DOM.

214
00:16:05.400 --> 00:16:11.160
So if you use SVG, if you use Canvas,

215
00:16:12.900 --> 00:16:16.820
if you use HTML, D3 is basically just
a tool for you to manipulate that.

216
00:16:16.820 --> 00:16:21.356
So D3 is compatible with
any single browser,

217
00:16:21.356 --> 00:16:27.418
like Mark was saying,
it just depends on what you're using.

218
00:16:27.418 --> 00:16:33.480
So I think SVG actually wasn't available
in IE until IE8 or something like that.

219
00:16:33.480 --> 00:16:38.130
So it's just basically what you're
using to draw to the screen, yeah.

220
00:16:38.130 --> 00:16:39.700
&gt;&gt; Speaker 2: That's a good point.

221
00:16:39.700 --> 00:16:44.410
If you're using SVG, then you'll
need to have SVG compatibility.

222
00:16:44.410 --> 00:16:46.685
It's not necessarily D3's fault.

223
00:16:46.685 --> 00:16:47.230
&gt;&gt; Shirley Wu: Yeah.

224
00:16:47.230 --> 00:16:49.940
&gt;&gt; Speaker 2: You used it to render SVG.

225
00:16:51.480 --> 00:16:55.810
&gt;&gt; Shirley Wu: I had one quick
question from the group and

226
00:16:55.810 --> 00:17:01.080
that was if I save it, if a forked it,
it's in my own account, I save it,

227
00:17:01.080 --> 00:17:07.489
I'm not seeing it in my blocks,
and is it really saved?

228
00:17:07.489 --> 00:17:10.370
Blocks takes about ten minutes to refresh,

229
00:17:10.370 --> 00:17:14.130
so if you don't see it in your own
little profile, don't freak out.

230
00:17:14.130 --> 00:17:17.430
It should come up in the next half hour.

231
00:17:19.140 --> 00:17:20.590
Was there more questions?

232
00:17:22.110 --> 00:17:24.020
&gt;&gt; Speaker 2: There was a question.

233
00:17:24.020 --> 00:17:28.968
One of the questions is,
what if you take the SVG element that

234
00:17:28.968 --> 00:17:33.624
you have here in your code,
and I believe in the HTML, and

235
00:17:33.624 --> 00:17:37.407
instead of saying,
svg and then closing svg,

236
00:17:37.407 --> 00:17:42.160
you instead hard code it to
rect elements inside of it, and

237
00:17:42.160 --> 00:17:45.773
then ran D3 on it, what would happen then?

238
00:17:45.773 --> 00:17:54.240
&gt;&gt; Shirley Wu: Okay,
what's the best way to show this?

239
00:17:54.240 --> 00:17:59.140
We can do that right now,
and then, yeah, let's do it.

240
00:18:00.140 --> 00:18:02.530
So let's put in two rectangle elements.

241
00:18:13.565 --> 00:18:14.865
&gt;&gt; Shirley Wu: Yeah,
isn't that fascinating?

242
00:18:14.865 --> 00:18:17.230
&gt;&gt; Speaker 2: Mm-hm.

243
00:18:17.230 --> 00:18:22.949
So you had two rect elements in there,
and now I'm seeing three?

244
00:18:22.949 --> 00:18:29.460
&gt;&gt; Shirley Wu: Well, okay, so let me see
what is the best way to describe this.

245
00:18:29.460 --> 00:18:33.423
Okay, so, okay, let me do it this way.

246
00:18:39.467 --> 00:18:40.111
&gt;&gt; Shirley Wu: Yeah, so

247
00:18:40.111 --> 00:18:44.760
we have two rectangle elements
that's already been created.

248
00:18:44.760 --> 00:18:52.700
And then here, so
you can see there's a gap here for

249
00:18:52.700 --> 00:18:58.690
the first two, that you aren't seeing,
and then we see the three blue bars.

250
00:18:58.690 --> 00:19:01.960
And so what's actually happening
underneath the hood is,

251
00:19:01.960 --> 00:19:06.140
if you open this up and
if you inspect element, look at that.

252
00:19:06.140 --> 00:19:09.945
So yeah,
this is what's happening under the hood.

253
00:19:09.945 --> 00:19:14.660
So this is the two rectangle
elements that we've set in the SVG.

254
00:19:14.660 --> 00:19:21.430
And then, you can see, so
it exists, but then, look at that.

255
00:19:21.430 --> 00:19:24.039
The attributes are only set on the three.

256
00:19:24.039 --> 00:19:29.338
So what's happening is actually,
when we do,

257
00:19:29.338 --> 00:19:36.240
remember how we were talking
about the .enter and .append?

258
00:19:36.240 --> 00:19:39.590
It only returns what should be entered.

259
00:19:39.590 --> 00:19:43.980
So in this case, because we already
had two rectangles existing but

260
00:19:43.980 --> 00:19:48.870
then five data elements,
the extraneous was the last three.

261
00:19:48.870 --> 00:19:52.490
And that's why .enter and
.append only returns for

262
00:19:52.490 --> 00:19:57.710
you the last three rectangles for
you to modify the attributes on

263
00:19:59.160 --> 00:20:03.030
and doesn't give you the first
two that you already have.

264
00:20:03.030 --> 00:20:11.130
So let me actually right now, do
a console log to really drive that home.

265
00:20:12.660 --> 00:20:16.822
Let's see,
what should we be console logging?

266
00:20:16.822 --> 00:20:19.505
Let me do it this way.

267
00:20:19.505 --> 00:20:21.640
Let me console log the .data.

268
00:20:21.640 --> 00:20:26.061
So let's select all the rectangle
elements, and then bind the data, and

269
00:20:26.061 --> 00:20:27.645
see what that looks like.

270
00:20:32.372 --> 00:20:35.392
&gt;&gt; Shirley Wu: I understand that
there is limited screen space.

271
00:20:35.392 --> 00:20:39.298
[COUGH]
&gt;&gt; Shirley Wu: So

272
00:20:39.298 --> 00:20:43.332
this is what happens when we
select just those two and

273
00:20:43.332 --> 00:20:48.260
then bind the five rectangle or
five data elements to it.

274
00:20:48.260 --> 00:20:53.510
So you can see underneath groups, which is
what D3 thinks is existing on the screen.

275
00:20:53.510 --> 00:20:58.490
Look at that, it says array of 5, because
that's where we want to get to, but

276
00:20:58.490 --> 00:21:04.410
it just has the two rects that
already exists on the screen.

277
00:21:06.000 --> 00:21:07.780
And then enter, it says five.

278
00:21:09.320 --> 00:21:16.382
But it just has the three placeholders for
the three new ones that we want to create.

279
00:21:16.382 --> 00:21:19.090
Yeah, super fascinating.

280
00:21:19.090 --> 00:21:26.760
And then when we do the console log,
&gt;&gt; Shirley Wu: It says five.

281
00:21:26.760 --> 00:21:30.640
When we have console log enter append,
it says five.

282
00:21:30.640 --> 00:21:37.139
But then, there's only those three
rectangle elements that should be entered.

283
00:21:37.139 --> 00:21:39.780
Yeah, any other questions?

284
00:21:41.240 --> 00:21:43.840
&gt;&gt; Speaker 2: So
if you wanted to do something with

285
00:21:43.840 --> 00:21:47.570
the elements that you already had,
could you do that as well?

286
00:21:47.570 --> 00:21:51.910
&gt;&gt; Shirley Wu: So what we want to do,
actually lemme hold off on that question

287
00:21:51.910 --> 00:22:00.660
because that I think will get addressed
in the update exit section of the class.

288
00:22:00.660 --> 00:22:08.040
But let's also try and remember so that
we, yeah we go into that detail, yeah.

