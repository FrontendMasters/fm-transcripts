WEBVTT

1
00:00:00.190 --> 00:00:03.325
&gt;&gt; Shirley Wu: I started using D3 and
React together I think back in 2014,

2
00:00:03.325 --> 00:00:07.850
because my job started using, decided we
wanted to move from Backbone to React.

3
00:00:07.850 --> 00:00:13.003
And one of the biggest problems,
&gt;&gt; Shirley Wu: Okay so

4
00:00:13.003 --> 00:00:17.210
this is, but everybody knows React and
what React does?

5
00:00:18.650 --> 00:00:19.150
Cool.

6
00:00:21.390 --> 00:00:26.160
So D3,
it has the enter-update-exit pattern and

7
00:00:26.160 --> 00:00:29.900
React has a virtual DOM diffing.

8
00:00:29.900 --> 00:00:34.580
It basically does, I think I say they
both try solve the same problem, but

9
00:00:34.580 --> 00:00:38.446
they also, the problem is they
both want control of the DOM.

10
00:00:38.446 --> 00:00:41.250
With React and
a lot of those like MVC frameworks,

11
00:00:41.250 --> 00:00:47.350
like a lot of the problem is the fact that
both of them want control of the DOM.

12
00:00:47.350 --> 00:00:52.020
About two years ago after we
started using React, I went and

13
00:00:52.020 --> 00:00:55.383
figured out a few different approaches and

14
00:00:55.383 --> 00:01:00.633
I actually wrote about one of
the approaches in my Medium article.

15
00:01:04.549 --> 00:01:08.500
&gt;&gt; Shirley Wu: And it's called On D3,
React, and a little bit of Flux.

16
00:01:08.500 --> 00:01:16.105
And it goes into extreme detail
about how I use React and

17
00:01:16.105 --> 00:01:22.517
D3 together in such a way,
&gt;&gt; Shirley Wu: Yeah

18
00:01:22.517 --> 00:01:24.260
it goes into a lot of detail.

19
00:01:24.260 --> 00:01:28.170
Because I think it was a little bit
of a non conventional approach.

20
00:01:29.420 --> 00:01:33.860
So I have three approaches and
that's my second approach.

21
00:01:36.700 --> 00:01:39.712
And I think in this talk,

22
00:01:39.712 --> 00:01:43.747
I talk about like-
&gt;&gt; Shirley Wu: So,

23
00:01:43.747 --> 00:01:48.830
who should be doing the data calculation
and who should be doing the rendering.

24
00:01:50.930 --> 00:01:55.300
So approach number one is the use case is

25
00:01:55.300 --> 00:02:00.020
an application with a pretty small data
set and a pretty simple visualization.

26
00:02:00.020 --> 00:02:03.840
And in that case, I use React for
the structures, so

27
00:02:03.840 --> 00:02:07.600
base structures I mean the component
structures cuz that's kinda nice.

28
00:02:07.600 --> 00:02:11.620
And then I use it D3 for
the data calculation and I use React for

29
00:02:11.620 --> 00:02:12.709
the rendering.

30
00:02:15.186 --> 00:02:18.358
&gt;&gt; Shirley Wu: So,this is I
think the example code I have,

31
00:02:18.358 --> 00:02:23.591
it's basically a force layout that
when you click on update button it's

32
00:02:23.591 --> 00:02:29.015
just like randomly generates new node
data and then updates through that.

33
00:02:29.015 --> 00:02:34.070
And this is built with React and
D3 with my first approach

34
00:02:34.070 --> 00:02:41.041
where D3 does all of the data calculation
and React does all of the rendering.

35
00:02:41.041 --> 00:02:46.038
So I believe this is, yeah,
so I have a React's graph

36
00:02:46.038 --> 00:02:50.259
component, I create a graph component, and

37
00:02:50.259 --> 00:02:55.293
then I say okay, when,
&gt;&gt; Shirley Wu: And

38
00:02:55.293 --> 00:02:58.269
this is where I defined the force layout.

39
00:02:58.269 --> 00:03:04.068
And then I say,
okay when the component mounts or

40
00:03:04.068 --> 00:03:09.443
will mount, and
this is also version three,

41
00:03:09.443 --> 00:03:12.420
just to put it out there.

42
00:03:12.420 --> 00:03:15.790
This is version three of everything,
of D3.

43
00:03:15.790 --> 00:03:22.840
So on each tick,
force an update on the React component.

44
00:03:25.810 --> 00:03:28.300
Then on each update

45
00:03:28.300 --> 00:03:31.960
what react is doing it is literally
drawing all the nodes and links.

46
00:03:31.960 --> 00:03:36.588
It has the r attribute,

47
00:03:36.588 --> 00:03:41.447
the x, the dy, the x1,

48
00:03:41.447 --> 00:03:45.850
y1, y2 of the line.

49
00:03:45.850 --> 00:03:49.280
So React is taking care
of all of the rendering.

50
00:03:51.170 --> 00:03:54.470
And then,
yeah I return all of the nodes and links.

51
00:03:56.960 --> 00:03:58.750
So this is the first approach.

52
00:04:02.100 --> 00:04:05.920
Yeah, so D3 is just doing the data
calculation of getting the X and

53
00:04:05.920 --> 00:04:07.170
Y of each of the nodes.

54
00:04:07.170 --> 00:04:10.879
And then React does the setting
the attribute on those nodes and links.

55
00:04:12.200 --> 00:04:16.530
So this is what I think is like the most
straight forward simple approach.

56
00:04:16.530 --> 00:04:20.140
And so
the pro of it is like it's very clean,

57
00:04:20.140 --> 00:04:23.090
you're like your data, or
I mean sorry, your code and

58
00:04:23.090 --> 00:04:27.640
how you reason about it is very clean,
it's very easy to reason about it.

59
00:04:27.640 --> 00:04:32.730
But the con is that [COUGH]
you

60
00:04:32.730 --> 00:04:38.420
have to do the reacted life
cycle on every single tick.

61
00:04:38.420 --> 00:04:44.260
So like it's literally going through, so
react has the whole component I think,

62
00:04:44.260 --> 00:04:47.070
I guess like component should update.

63
00:04:47.070 --> 00:04:51.560
Component did update and all of those
things in between that I can't remember

64
00:04:51.560 --> 00:04:53.770
and that's also where they're
doing the virtual DOM diffing.

65
00:04:53.770 --> 00:05:00.730
And so on every single take and those
takes are fired really quickly and that

66
00:05:00.730 --> 00:05:06.060
life cycle is been called for every single
take, and that can get really unperfomant.

67
00:05:06.060 --> 00:05:09.750
And this is also true for

68
00:05:09.750 --> 00:05:13.740
things like animations is really hard for
this approach.

69
00:05:13.740 --> 00:05:17.440
Using D3 transitions is hard,
using this approach

70
00:05:19.470 --> 00:05:24.650
because with the D3 transitions,
D3 needs access to the DOM

71
00:05:25.820 --> 00:05:30.000
to be able to update the attributes on

72
00:05:30.000 --> 00:05:34.980
every single one of those interpolations,
the animation interpolation.

73
00:05:34.980 --> 00:05:39.200
So you can't use D3 functions
that need access to the DOM.

74
00:05:39.200 --> 00:05:43.790
For example, the D3 axes that we used
earlier, that's like super nice,

75
00:05:43.790 --> 00:05:49.220
we can't use that because that's D3
taking control of the DOM and rendering.

76
00:05:50.720 --> 00:05:55.190
You can't do anything that basically
needs to update really quickly.

77
00:05:55.190 --> 00:06:01.060
So you can't do drag functions,
because you need to, or I mean you can but

78
00:06:01.060 --> 00:06:06.190
drag functions can get unperformant,
and zoom functions get unperformant.

79
00:06:06.190 --> 00:06:10.470
So there's a lot of things that if you,
if all you need is

80
00:06:10.470 --> 00:06:15.670
a little bar chart, a line chart that
doesn't need to update all that often or

81
00:06:15.670 --> 00:06:17.730
doesn't need animations or something.

82
00:06:17.730 --> 00:06:21.570
And you just need to stick that into your
React app, this approach is really great.

83
00:06:21.570 --> 00:06:25.650
But if you want to get pass that, to like
different interactions that need a lot of

84
00:06:25.650 --> 00:06:32.310
updating, it does not do as good of a job.

85
00:06:32.310 --> 00:06:36.770
So the second approach is the approach
I mentioned earlier that I covered in

86
00:06:37.780 --> 00:06:39.836
extreme detail in this article.

87
00:06:39.836 --> 00:06:44.620
But the basic thing about it is, so the
use case is an application with a really

88
00:06:44.620 --> 00:06:49.320
small dataset, but
it's a highly interactive visualization.

89
00:06:51.510 --> 00:06:56.325
And the way that I think
about that is I use

90
00:06:56.325 --> 00:07:01.010
React again for component structure.

91
00:07:01.010 --> 00:07:05.740
D3 for the data calculation and
D3 and React for the rendering.

92
00:07:05.740 --> 00:07:11.510
So React takes care of
the elements of entering and

93
00:07:11.510 --> 00:07:16.170
exiting the elements and then D3 takes
care of updating the attributes.

94
00:07:17.230 --> 00:07:19.880
So my example code.

95
00:07:22.409 --> 00:07:27.234
&gt;&gt; Shirley Wu: So this is exact
same thing that we saw earlier, but

96
00:07:27.234 --> 00:07:33.116
the only difference is,
&gt;&gt; Shirley Wu: Okay so

97
00:07:33.116 --> 00:07:38.211
this that same graph component,
and D3 is still doing

98
00:07:38.211 --> 00:07:44.670
the calculation on each tick of the x and
y position and calculation.

99
00:07:44.670 --> 00:07:49.500
But now what we're doing is, we

100
00:07:49.500 --> 00:07:55.098
are creating a node and link component for
each of the nodes and links, so

101
00:07:55.098 --> 00:08:00.880
that when component

102
00:08:00.880 --> 00:08:06.513
mounts
&gt;&gt; Shirley Wu: Wait,

103
00:08:06.513 --> 00:08:12.916
hold on, this is where I mean that it's
been a while since I looked at this code.

104
00:08:12.916 --> 00:08:20.078
Okay, so I think,
because I structured it this way.

105
00:08:20.078 --> 00:08:27.287
Okay, so componentDidMount will
basically Map to the enter,

106
00:08:27.287 --> 00:08:32.871
like what you would do for
entering a selection.

107
00:08:32.871 --> 00:08:34.477
And then componentDidUpdate,

108
00:08:34.477 --> 00:08:38.358
will map to the update selection,
what you would do to the update selection.

109
00:08:38.358 --> 00:08:44.889
And then I think component
will unmount and

110
00:08:44.889 --> 00:08:49.880
will be the exit selection.

111
00:08:49.880 --> 00:08:53.270
So I think that is all I'm doing here,

112
00:08:53.270 --> 00:08:58.130
that I'm calling the enter node and
in enter node all I do is.

113
00:08:58.130 --> 00:09:03.650
So basically for

114
00:09:03.650 --> 00:09:09.249
the node component, react component,
I define a circle and I define a text.

115
00:09:10.480 --> 00:09:15.490
But I set the r attribute here,

116
00:09:15.490 --> 00:09:20.640
I also tell it you can force drag, and I

117
00:09:20.640 --> 00:09:25.860
set the x and y of the text and

118
00:09:25.860 --> 00:09:31.400
update node as the force
is ticking through it.

119
00:09:31.400 --> 00:09:36.210
I set the x and y of the node with D3,

120
00:09:40.930 --> 00:09:43.460
is the drag not working?

121
00:09:43.460 --> 00:09:49.785
Yeah, so this is like a lot
more convoluted of an approach,

122
00:09:49.785 --> 00:09:57.388
but the reason why we ended up with
this at the company I used to work for.

123
00:09:57.388 --> 00:10:01.670
One of the reasons that we moved to
React was because when we had backbone.

124
00:10:04.230 --> 00:10:05.350
We started getting really,

125
00:10:05.350 --> 00:10:08.940
really confused about all of
the elements that needed to be entered.

126
00:10:08.940 --> 00:10:14.058
And all of the elements that needed to be
exited, and how do we keep track of them?

127
00:10:14.058 --> 00:10:18.916
And then like, on what event should we
be entering this, on what event should

128
00:10:18.916 --> 00:10:23.195
we be exiting this, and on what
event should we be doing the update?

129
00:10:23.195 --> 00:10:27.098
And all of this got so confusing,
and we couldn't keep track of all

130
00:10:27.098 --> 00:10:30.740
the interactions that when we
moved to React we were like.

131
00:10:30.740 --> 00:10:34.370
That's it, we're getting React to
figure out what needs to be entered and

132
00:10:34.370 --> 00:10:37.360
exited because that's the hard part
that we couldn't keep track of.

133
00:10:37.360 --> 00:10:41.710
And so we're gonna use the virtual
dom to calculate that for us.

134
00:10:41.710 --> 00:10:46.360
And all we're going to use D3 for
is updating the attributes because

135
00:10:46.360 --> 00:10:51.170
one of the things that we wanted
was being able to animate.

136
00:10:51.170 --> 00:10:55.210
And so like I mentioned
before with D3 transition,

137
00:10:55.210 --> 00:10:58.220
D3 wants access to the X and Y attributes.

138
00:10:58.220 --> 00:11:03.240
So if I just give the control of

139
00:11:03.240 --> 00:11:08.250
the attributes to D3 and
have React do the enter and

140
00:11:08.250 --> 00:11:13.800
exit, then they're not actually
overlapping in control.

141
00:11:13.800 --> 00:11:19.170
And so the thought process behind
this works, and it worked well,

142
00:11:19.170 --> 00:11:24.520
and I think this is example app,

143
00:11:24.520 --> 00:11:30.410
and I think the whole point
was if you have a lot of data.

144
00:11:30.410 --> 00:11:36.923
That changes or you can manipulate
things cuz this one was I think, if this

145
00:11:36.923 --> 00:11:43.661
was a budget app like that example expense
app that I made for this blog post.

146
00:11:43.661 --> 00:11:45.627
That then took me like two
months because I was like,

147
00:11:45.627 --> 00:11:48.780
I'm gonna add this functionality,
I'm gonna add this functionality.

148
00:11:48.780 --> 00:11:53.570
And I think all that I wanted to
demonstrate here is there's different

149
00:11:53.570 --> 00:11:59.470
parts of the page that can edit
the data in different ways.

150
00:11:59.470 --> 00:12:02.710
So I could delete this and
then that expense goes away or

151
00:12:02.710 --> 00:12:07.466
I can add one that's like coffee and
then that's like three dollars maybe.

152
00:12:07.466 --> 00:12:10.610
And then adds and
then I can categorize it, and

153
00:12:10.610 --> 00:12:16.424
there's a lot of things I could do
that can change the visualization.

154
00:12:16.424 --> 00:12:19.430
And I think all I wanted to show for it is

155
00:12:20.950 --> 00:12:26.450
the functionality and then showing you
the different animations and transitions.

156
00:12:26.450 --> 00:12:32.150
And that's possible with this second
attempt or a second approach.

157
00:12:32.150 --> 00:12:35.240
So the pros and cons, the pro I feel

158
00:12:35.240 --> 00:12:40.790
was it really took advantage of
the respective strengths for React and D3.

159
00:12:40.790 --> 00:12:47.340
So D3 obviously, always use it for
the data calculation but

160
00:12:47.340 --> 00:12:52.607
then we can take advantage
of D3s transitions,

161
00:12:52.607 --> 00:12:59.037
but then we can also use
React to do the virtual dom.

162
00:12:59.037 --> 00:13:02.823
So that we don't have to have the mental
strain of personally taking care of what

163
00:13:02.823 --> 00:13:03.737
to enter and exit.

164
00:13:06.496 --> 00:13:11.567
&gt;&gt; Shirley Wu: So the cons were the React
component around all the nodes,

165
00:13:11.567 --> 00:13:18.102
if you start having lots of nodes,
that's extremely unperformant also.

166
00:13:18.102 --> 00:13:23.324
Another con is if you notice with this

167
00:13:23.324 --> 00:13:30.571
example I don't actually
have exit node because.

168
00:13:30.571 --> 00:13:34.651
Or I don't do anything with D3,

169
00:13:34.651 --> 00:13:41.225
I don't update any of the attributes for
D3 on exit.

170
00:13:41.225 --> 00:13:46.498
You can't actually animate the nodes out

171
00:13:46.498 --> 00:13:51.469
with this particular approach because

172
00:13:51.469 --> 00:13:56.440
React will just immediately remove all

173
00:13:56.440 --> 00:14:01.121
of the nodes that should be exiting.

174
00:14:01.121 --> 00:14:04.256
So you don't have enough
time to do your animation,

175
00:14:04.256 --> 00:14:09.113
you'll start your animation and will just
be like remerged right away because.

176
00:14:09.113 --> 00:14:13.678
React in D3 don't have that
communication to know that the nodes

177
00:14:13.678 --> 00:14:18.340
should only be removed after
the animation completes.

178
00:14:18.340 --> 00:14:23.370
So that's another thing, and then it
also made people really uncomfortable.

179
00:14:23.370 --> 00:14:27.700
There were like, this feels wrong, this
feels wrong to use React in D3 like this.

180
00:14:29.050 --> 00:14:35.930
I thought about a lot cuz I was like,
well maybe.

181
00:14:35.930 --> 00:14:40.691
But at the end of the day,
if your product has

182
00:14:40.691 --> 00:14:46.099
certain needs and
then it's not giving you bugs,

183
00:14:46.099 --> 00:14:51.150
like if this approach
isn't giving you bugs.

184
00:14:52.915 --> 00:14:59.815
Then I guess, how do you define wrong,
what's best practice?

185
00:14:59.815 --> 00:15:02.791
And so that's my response to that.

186
00:15:05.874 --> 00:15:10.045
&gt;&gt; Shirley Wu: So the third approach is
actually the approach that I pretty much

187
00:15:10.045 --> 00:15:10.670
use now.

188
00:15:14.500 --> 00:15:16.370
This is pretty much how
I code my React in D3.

189
00:15:16.370 --> 00:15:19.394
So, the use case for
this that I originally thought of was

190
00:15:19.394 --> 00:15:23.434
an app with a really large dataset and
frequently updating visualization.

191
00:15:26.979 --> 00:15:31.116
&gt;&gt; Shirley Wu: So for that one, I use
React for the component structure and

192
00:15:31.116 --> 00:15:36.079
I use D3 for the data calculation and
I use D3 for all of the rendering,

193
00:15:36.079 --> 00:15:39.184
whether it's enter, exit, or updating.

194
00:15:39.184 --> 00:15:42.815
And so
all that happens there is essentially,

195
00:15:46.158 --> 00:15:49.160
&gt;&gt; Shirley Wu: It looks uglier but

196
00:15:49.160 --> 00:15:56.292
all React does is make
this group container,

197
00:15:56.292 --> 00:16:02.276
we set a ref on it so that D3 knows to.

198
00:16:02.276 --> 00:16:07.243
Wrap that node, wow, this is a really

199
00:16:07.243 --> 00:16:11.470
old version of React too [LAUGH].

200
00:16:11.470 --> 00:16:16.046
But yeah, so
it basically grabs that group element and

201
00:16:16.046 --> 00:16:21.031
wraps it in d3, and
then we just D3 the whole way through.

202
00:16:24.079 --> 00:16:28.430
&gt;&gt; Shirley Wu: The whole thing and, yeah?

203
00:16:28.430 --> 00:16:32.130
&gt;&gt; Audience 1: So, on this strategy you
used to react to just create a container.

204
00:16:32.130 --> 00:16:33.580
&gt;&gt; Shirley Wu: Yeah.
&gt;&gt; Audience 1: And so here at d3,

205
00:16:33.580 --> 00:16:37.330
here is a nice tasty piece
of a real DOM just for you.

206
00:16:37.330 --> 00:16:38.220
&gt;&gt; Shirley Wu: Yeah.

207
00:16:38.220 --> 00:16:42.590
&gt;&gt; Audience 1: And then now, is this,
now you can go about using d3

208
00:16:42.590 --> 00:16:45.850
just the way everyone here has learned it,
where you can have transitions,

209
00:16:45.850 --> 00:16:48.848
you can have enter exit update,
right, and all that stuff.

210
00:16:48.848 --> 00:16:49.381
&gt;&gt; Shirley Wu: So.
&gt;&gt; Audience 1: Okay.

211
00:16:49.381 --> 00:16:50.680
&gt;&gt; Shirley Wu: Yeah, basically,

212
00:16:50.680 --> 00:16:55.430
all React did is to react,
that group is this black box,

213
00:16:55.430 --> 00:16:59.100
that it doesn't need to care about, and
two, d3, it's like, this container that

214
00:16:59.100 --> 00:17:03.906
you can go crazy in and have fun in And
so that's this approach.

215
00:17:03.906 --> 00:17:09.360
And then so back when I first gave
this talk I was like the pro,

216
00:17:09.360 --> 00:17:12.520
the visualization scales, and
you can use all the d3 functions,

217
00:17:12.520 --> 00:17:20.420
like you would just use d3 in any, you can
even copy over Mike Bostock's index.html.

218
00:17:20.420 --> 00:17:23.590
Well I mean not all of it, but
you can copy pieces of the code over and

219
00:17:23.590 --> 00:17:29.490
it works as long as you scope
it correctly, and this is great

220
00:17:29.490 --> 00:17:34.660
except the con is then why are you using,
like where are you even react both?

221
00:17:34.660 --> 00:17:39.410
And so I actually think,
since I gave this talk a year and

222
00:17:39.410 --> 00:17:43.900
a half ago I have come to like
really appreciate this approach,

223
00:17:43.900 --> 00:17:47.680
because it, one gives me the freedom
to use d3 anyway I like.

224
00:17:47.680 --> 00:17:51.970
And then it also likes gives me
the freedom to use react, like there's

225
00:17:51.970 --> 00:17:56.340
something that's amazingly beautiful
about how react forces me to think about,

226
00:17:56.340 --> 00:18:00.838
like components, componetizing like my

227
00:18:00.838 --> 00:18:06.020
visualizations, and so I love that and

228
00:18:06.020 --> 00:18:10.490
I love using react for just communication
between each of the different components.

229
00:18:10.490 --> 00:18:13.710
So if I have multiple visualizations
that are linked together,

230
00:18:13.710 --> 00:18:20.165
like if this visualization effects what
is displayed in this other visualization.

231
00:18:20.165 --> 00:18:22.655
React makes that like
communication super easy for

232
00:18:22.655 --> 00:18:25.695
me whereas like I was just used d3 or
something.

233
00:18:25.695 --> 00:18:29.235
I will have to use like a bunch of
dispatches to like do the communication

234
00:18:29.235 --> 00:18:32.745
which is kinda like what
we're doing with backbone

235
00:18:32.745 --> 00:18:37.120
reacts like makes that
thought process super easy.

236
00:18:37.120 --> 00:18:41.210
And then,
I think I also appreciate the fact that

237
00:18:42.500 --> 00:18:47.110
my application isn't going to
just have visualizations, right?

238
00:18:47.110 --> 00:18:52.090
It might have, like for example,
that Obama piece had a lot of text

239
00:18:52.090 --> 00:18:56.884
that explained things, my Hamilton
piece had different parts to it also.

240
00:18:56.884 --> 00:19:04.170
And so I use React normally for

241
00:19:04.170 --> 00:19:09.710
all of those non-data viz parts of
my app and use this approach for

242
00:19:09.710 --> 00:19:13.760
the visualization part of my app, and I
just do whatever I want with d3 within it.

243
00:19:15.380 --> 00:19:19.900
So the lessons I learned was the most,
most important,

244
00:19:19.900 --> 00:19:24.720
if there is nothing else that you get out
of this is never, ever, ever have React

245
00:19:24.720 --> 00:19:28.980
and D3 controlling the same parts of the
DOM, or else you're gonna get nasty bugs.

246
00:19:28.980 --> 00:19:33.400
I think I still very,
very vividly remember, I think I had

247
00:19:34.400 --> 00:19:39.920
used I accidentally had React
to keep track of an attribute or

248
00:19:39.920 --> 00:19:44.350
something or a specific element and
then d3 do something to it, and I was

249
00:19:44.350 --> 00:19:49.530
just getting nasty bugs for the whole
entire afternoon, then I was really sad.

250
00:19:49.530 --> 00:19:54.160
Just make sure their controls
don't overlap and then I then

251
00:19:54.160 --> 00:19:58.260
don't think I've ever seen bugs as long
as I don't have their controls overlap.

252
00:19:59.840 --> 00:20:03.268
Yeah, that one's cheesy, and

253
00:20:03.268 --> 00:20:07.440
then these ones assess the needs
of the project and then figure out

254
00:20:07.440 --> 00:20:12.110
what the combination of d3 and React is
that makes sense is, and that's Zootopia.

