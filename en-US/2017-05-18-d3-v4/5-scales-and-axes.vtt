WEBVTT

1
00:00:00.390 --> 00:00:02.920
&gt;&gt; Shirley Wu: So
how was this code sample?

2
00:00:02.920 --> 00:00:07.368
Did it help in terms of the enter append,
the data binding?

3
00:00:07.368 --> 00:00:12.060
Okay, cool,
because this is the first part.

4
00:00:12.060 --> 00:00:17.210
I like to think of it as like data binding
is one of the core parts of D3 and

5
00:00:17.210 --> 00:00:21.300
then also enter-update-exit is
one of the core parts of D3.

6
00:00:21.300 --> 00:00:25.280
And I personally maybe in a biased view
think that if you just grasp those two

7
00:00:25.280 --> 00:00:27.111
the rest of the D3 library makes so

8
00:00:27.111 --> 00:00:31.223
much sense.
&gt;&gt; Shirley Wu: Okay, so

9
00:00:31.223 --> 00:00:36.059
this is where we kinda go a little
bit outside that core part and

10
00:00:36.059 --> 00:00:41.740
then just have a little bit of fun or
what I think is fun, which it's not.

11
00:00:42.770 --> 00:00:47.440
So let's go into scales and axes because
now that we have like a bar chart,

12
00:00:47.440 --> 00:00:52.630
maybe we want people to be able
to see what your axes are.

13
00:00:52.630 --> 00:00:57.490
Or actually the other
things is like we give, for

14
00:00:57.490 --> 00:01:01.310
this one, for my examples thus far
we give really nice values, right?

15
00:01:02.350 --> 00:01:06.490
Between zero to 200 renders
nicely on the screen.

16
00:01:06.490 --> 00:01:13.300
But what if you had data whose
values were between zero and one.

17
00:01:13.300 --> 00:01:16.780
If you just rendered that as height,
it won't really show up for you.

18
00:01:16.780 --> 00:01:20.170
Or will like, if your height was
you know a thousand something.

19
00:01:20.170 --> 00:01:23.690
Like 2,000, or 10,000 or
something like that.

20
00:01:23.690 --> 00:01:28.960
So, let me,
you know to drive that home, like.

21
00:01:33.660 --> 00:01:34.580
I'm changing the wrong one.

22
00:01:35.930 --> 00:01:40.840
Like that's not gonna be
cool in your visualization.

23
00:01:40.840 --> 00:01:45.220
So that's were D3 scales come in really,
really helpful.

24
00:01:45.220 --> 00:01:53.230
And I find it like, it's one of those like
a born utility that's amazingly helpful.

25
00:01:53.230 --> 00:01:57.120
Because trying to code this scales
by yourself, as my co-instructor

26
00:01:57.120 --> 00:02:02.940
admitted try to do is really painful,
and there's a lot of edge cases.

27
00:02:02.940 --> 00:02:08.260
So the way that I like to think about
scales is so this is scale linear,

28
00:02:08.260 --> 00:02:14.530
which is one of the, actually let me
show you the documentation for it.

29
00:02:14.530 --> 00:02:20.479
So anytime that you want to use scale,
it's under d3/d3-scale.

30
00:02:22.790 --> 00:02:27.150
And these are all the different
kinds of scales that D3 provides.

31
00:02:27.150 --> 00:02:34.210
So under continuous, that should be a
continuous input and a continuous output.

32
00:02:34.210 --> 00:02:39.280
And there is a linear and then,
all these different ones.

33
00:02:39.280 --> 00:02:44.410
And so for this example, I'm just going
to show you scale linear, which is,

34
00:02:44.410 --> 00:02:48.540
I guess that's pretty self explanatory.

35
00:02:48.540 --> 00:02:51.790
If I say it's a linear scale,
that's pretty self explanatory.

36
00:02:51.790 --> 00:02:53.884
As opposed to like a log scale, okay.

37
00:02:53.884 --> 00:02:59.298
[LAUGH]
&gt;&gt; Shirley Wu: So with a scale,

38
00:02:59.298 --> 00:03:03.939
the two things at minimum
that you need that's

39
00:03:03.939 --> 00:03:08.950
required is to set the domain and
to set the range.

40
00:03:10.390 --> 00:03:17.412
And the domain, you can think of it as
the input, and the range as the output.

41
00:03:17.412 --> 00:03:23.860
And so I think the way that
we use scales a lot in D3

42
00:03:23.860 --> 00:03:28.850
is to think of it as mapping
your data attributes,

43
00:03:28.850 --> 00:03:31.840
your data values to the display.

44
00:03:33.110 --> 00:03:36.680
And the data attributes are the domain and
the display is the range.

45
00:03:36.680 --> 00:03:41.964
And what I mean by that is maybe
you have in your data like dates,

46
00:03:41.964 --> 00:03:47.810
so time or like in our previous one
it was like just values, right?

47
00:03:47.810 --> 00:03:53.195
Maybe you have like temperature or
maybe you have currency values,

48
00:03:53.195 --> 00:03:57.240
or whatever is in your data,
you want to be able to convert

49
00:03:57.240 --> 00:04:00.450
that to something that's
displayable in the screen.

50
00:04:00.450 --> 00:04:03.940
So maybe that's an x value, like maybe
you map the date to your x value.

51
00:04:03.940 --> 00:04:08.110
And maybe you map your
temperature to your y value,

52
00:04:08.110 --> 00:04:12.190
or maybe you mapped that to your,
like within height or

53
00:04:12.190 --> 00:04:16.320
if you have a circle then maybe it's
your radius, or maybe it's your opacity.

54
00:04:16.320 --> 00:04:22.870
Whatever the translation between those two
are, that's what scales are amazing for.

55
00:04:24.610 --> 00:04:32.180
So I have just a really simply example of
something of how you could use a scale.

56
00:04:32.180 --> 00:04:36.820
So the first one is maybe
your domain is 0 to 100.

57
00:04:36.820 --> 00:04:40.647
But actually maybe you want
to turn that into opacity so

58
00:04:40.647 --> 00:04:43.540
you need that mapping to be 0 to 1.

59
00:04:43.540 --> 00:04:48.310
So you give it 0 to 100, so
you set- And the domain and

60
00:04:48.310 --> 00:04:53.470
ranges that you pass in have to be
an array, if the min and the max.

61
00:04:53.470 --> 00:04:56.930
So for both of them,
you pass in your min and max, and

62
00:04:58.650 --> 00:05:05.450
then it gets mapped for min to min and
max to max, this, yeah.

63
00:05:08.960 --> 00:05:14.383
Okay, so for this one you know 0 to 0 and
100 to 1, all the in between.

64
00:05:14.383 --> 00:05:16.847
You can also flip it,
this is why I just realized min and

65
00:05:16.847 --> 00:05:18.570
max are probably the wrong examples.

66
00:05:18.570 --> 00:05:22.275
But it's basically the first value
of maps to the first value and

67
00:05:22.275 --> 00:05:24.893
the second value of maps
to the second value.

68
00:05:24.893 --> 00:05:30.312
So you can if, that whole height
that we were talking about

69
00:05:30.312 --> 00:05:36.312
before where with SVG your y value
goes from zero to increasing.

70
00:05:36.312 --> 00:05:39.331
And then so
you have to do that weird like, for

71
00:05:39.331 --> 00:05:43.070
the y value you have to be
height minus your data.

72
00:05:43.070 --> 00:05:46.030
With scales,
all you got to do is be like, okay,

73
00:05:46.030 --> 00:05:49.188
so I have this data that
goes from 0 to 100.

74
00:05:49.188 --> 00:05:52.658
And actually,

75
00:05:52.658 --> 00:05:58.505
I want to map that 0 to 500
because that's my height.

76
00:05:58.505 --> 00:06:03.695
So the data is 0, but
then because you want the height

77
00:06:03.695 --> 00:06:08.855
of your bar graph to be 500, that
places it at the bottom of your chart.

78
00:06:08.855 --> 00:06:15.975
And then my biggest, my 100,
my max becomes the 0 y value.

79
00:06:17.500 --> 00:06:21.050
And that way when you use the scale,

80
00:06:21.050 --> 00:06:25.490
you don't have to do anything
complicated like crazy,

81
00:06:25.490 --> 00:06:30.440
it just maps nicely to the screen,
not upside down.

82
00:06:30.440 --> 00:06:32.050
So that's another way
you can use the scale,

83
00:06:32.050 --> 00:06:36.230
there's plenty of ways
that you can use it.

84
00:06:36.230 --> 00:06:41.789
So what I said earlier about
needing to pass in an array with,

85
00:06:41.789 --> 00:06:45.948
usually it's an array with your min and
max.

86
00:06:45.948 --> 00:06:49.360
If you thought like,
okay how do I go through and get min and

87
00:06:49.360 --> 00:06:51.540
max of an array, right?

88
00:06:51.540 --> 00:06:54.450
Of values of my data.

89
00:06:54.450 --> 00:06:57.130
D3 has that taken care of for you too.

90
00:06:57.130 --> 00:06:59.490
So you can just be like d3.min.

91
00:06:59.490 --> 00:07:05.180
So d3 has these like array,
I think the module is d3 array.

92
00:07:05.180 --> 00:07:10.410
So array utility functions where you just
say d3.min, you pass in your data, and

93
00:07:10.410 --> 00:07:18.960
you're just like, this is the attribute
that I want to get the min and max on.

94
00:07:20.180 --> 00:07:22.260
Does that make sense?

95
00:07:22.260 --> 00:07:23.150
This is my accessor.

96
00:07:23.150 --> 00:07:25.690
So if I pass in the data,
and then my accessor.

97
00:07:27.890 --> 00:07:29.620
And I can do that same thing for max.

98
00:07:31.510 --> 00:07:36.270
You want to be getting the min and
max individually.

99
00:07:36.270 --> 00:07:41.571
Or if you're lazy like me,
you can use extent which basically gives

100
00:07:41.571 --> 00:07:48.350
you back the min and max which I, when I
found that out I was like, mind blown.

101
00:07:48.350 --> 00:07:50.540
I get mind blown a little
bit really easily.

102
00:07:50.540 --> 00:07:57.960
And the way that you can use that is, for
example, this is how I defined my yScale.

103
00:07:57.960 --> 00:08:02.684
So scale linear and
then I get the domain Which

104
00:08:02.684 --> 00:08:07.408
is the extent that I calculated earlier,
and

105
00:08:07.408 --> 00:08:13.141
then I mapped that,
because the extent is min and max.

106
00:08:13.141 --> 00:08:18.292
I mapped that to my height, and zero for
my y value, kind of like what I was

107
00:08:18.292 --> 00:08:23.557
talking about a slide before.
&gt;&gt; Speaker 2: Yes,

108
00:08:23.557 --> 00:08:25.447
we have a question from Alex.

109
00:08:25.447 --> 00:08:31.104
Is this primarily a transform of the x and
y-axis?

110
00:08:31.104 --> 00:08:35.870
Let's say that we had some data and
we want to place it in a chart.

111
00:08:35.870 --> 00:08:40.528
Is this primarily going to wind
up determining how high up or

112
00:08:40.528 --> 00:08:45.850
how far down something is, or
how left or right it is on that canvas?

113
00:08:48.380 --> 00:08:53.030
&gt;&gt; Shirley Wu: You could use it that way.

114
00:08:53.030 --> 00:08:59.870
So you could definitely use it as where
do I place things on the screen or

115
00:08:59.870 --> 00:09:04.870
how far do I want to transform,
but you're not limited to that.

116
00:09:07.240 --> 00:09:13.370
I feel like anything that's mappable,
like anything,

117
00:09:15.540 --> 00:09:19.500
I feel like you could do,
you can use skills for almost anything.

118
00:09:24.080 --> 00:09:25.720
You can do opacity, radius.

119
00:09:25.720 --> 00:09:30.921
If you have, for example,
there's also ordinal scales.

120
00:09:30.921 --> 00:09:38.284
So if you have a,
I think this is a discrete ranged mapping,

121
00:09:38.284 --> 00:09:45.208
sorry, mapping a discrete
domain to a discrete range,

122
00:09:45.208 --> 00:09:49.650
I think, should be orbital, yes.

123
00:09:49.650 --> 00:09:55.187
[LAUGH] So
if you have like a set of categories,

124
00:09:55.187 --> 00:09:59.850
maybe you have a bar chart of animals or

125
00:09:59.850 --> 00:10:05.533
something like that,
you have cat, dog, and

126
00:10:05.533 --> 00:10:10.634
your value is how much
people love them for

127
00:10:10.634 --> 00:10:18.359
your [LAUGH] x-axis,
you can use this thing called scale band,

128
00:10:18.359 --> 00:10:24.478
where you say my input is
an array of values of cat,

129
00:10:24.478 --> 00:10:28.868
dog,
&gt;&gt; Shirley Wu: Parrot,

130
00:10:28.868 --> 00:10:32.199
goldfish, and it can be any length,

131
00:10:32.199 --> 00:10:38.109
whereas when we were doing scale linear,
and it was continuous.

132
00:10:38.109 --> 00:10:42.082
I was telling you that it has
to be the min and max, right?

133
00:10:42.082 --> 00:10:47.025
With the ordinal scales it
could be any length of values

134
00:10:47.025 --> 00:10:50.464
as long as that's kind of your input.

135
00:10:50.464 --> 00:10:54.655
And then make sure to
read the documentation,

136
00:10:54.655 --> 00:10:59.120
because it has so
many different kind of scales.

137
00:10:59.120 --> 00:11:06.230
But for scale band, so for some of them,
you have to make sure to like,

138
00:11:06.230 --> 00:11:10.940
if you have you know eight,
eight values in your domain.

139
00:11:10.940 --> 00:11:14.630
You have to have eight values
that it maps directly to for

140
00:11:14.630 --> 00:11:19.050
your, range, and then there are some
of them that you could be like.

141
00:11:19.050 --> 00:11:25.690
Here are my like eight inputs, and
then I just want you to give me,

142
00:11:25.690 --> 00:11:30.216
and then I just tell it like,
I want you to map it between 0 and 1,000.

143
00:11:30.216 --> 00:11:33.240
And then it will go and
figure out like, so

144
00:11:33.240 --> 00:11:38.207
there's eight things, I should have 0 and
800, make my math easier.

145
00:11:38.207 --> 00:11:43.270
[LAUGH] and then go ahead and
be like, each of these

146
00:11:44.890 --> 00:11:50.244
pets will be 100 pixels wide and they will
figure out all of the x values for you.

147
00:11:50.244 --> 00:11:54.640
So scales are amazingly helpful and

148
00:11:54.640 --> 00:11:59.900
also definitely one of the things that you
should pick, and choose, and read about.

149
00:11:59.900 --> 00:12:02.472
So I use scale linear a lot.

150
00:12:02.472 --> 00:12:05.240
I use scale log a lot.

151
00:12:05.240 --> 00:12:11.729
I use scale log when there's a few
data points that are really,

152
00:12:11.729 --> 00:12:17.738
really large, and
then the rest of them are really small.

153
00:12:17.738 --> 00:12:24.920
So if you use that scale linear then it's
basically a bunch of really large things,

154
00:12:24.920 --> 00:12:29.240
and then really tiny things and
you can't see it.

155
00:12:29.240 --> 00:12:32.325
So then if you use scale log,
it kind of smooths that out a little bit.

156
00:12:32.325 --> 00:12:38.838
So I use that a lot, and I use scale
band a lot for ordinal domains,

157
00:12:38.838 --> 00:12:43.750
but there's more excitingly
esoteric things.

158
00:12:43.750 --> 00:12:50.320
I think quantize is if
you have a discreet,

159
00:12:50.320 --> 00:12:57.260
if you have, I think, a continuous domain,
yeah, continuous domain and

160
00:12:57.260 --> 00:13:02.900
discreet range, and so you can do
crazy fun things with these scales.

161
00:13:06.040 --> 00:13:10.385
But, and I forgot scaleTime,
scaleTime is amazing also.

162
00:13:10.385 --> 00:13:15.007
If you just have a bunch of dates,
and scaleTime is also continuous, so

163
00:13:15.007 --> 00:13:17.714
continuous domain to continuous range.

164
00:13:17.714 --> 00:13:25.278
So if you just say I want you to map from
January of 2017 to December of 2017,

165
00:13:25.278 --> 00:13:30.248
and then,
I want you to map it between 0 and 1000.

166
00:13:30.248 --> 00:13:36.730
And it will just calculate that for
you, and I think it's a lifesaver,

167
00:13:36.730 --> 00:13:42.781
because how do you, I don't even
know how you would go about coding

168
00:13:42.781 --> 00:13:46.446
that continuous scale, [LAUGH] yeah.
&gt;&gt; Speaker 3: For

169
00:13:46.446 --> 00:13:50.640
first scaleTime, is there a way to
define custom time stamps then?

170
00:13:50.640 --> 00:13:54.992
So you can say like it's in this month,
year, hour formatted?

171
00:13:54.992 --> 00:13:57.586
&gt;&gt; Shirley Wu: Do you mean like when you

172
00:13:57.586 --> 00:14:00.390
display it?
&gt;&gt; Speaker 3: Well, like if your data's in

173
00:14:00.390 --> 00:14:05.557
a like non-standard timestamp.
&gt;&gt; Shirley Wu: Okay, yes.

174
00:14:05.557 --> 00:14:12.140
So the question was if I have data
that's in a non-standard time format,

175
00:14:12.140 --> 00:14:16.812
so if my input isn't just
a JavaScript date object.

176
00:14:16.812 --> 00:14:21.270
Most of the time,
if it's a string or something,

177
00:14:21.270 --> 00:14:28.171
if you pass it into a JavaScript object,
most of the time it figures that out.

178
00:14:28.171 --> 00:14:32.736
And then you can just pass
that into scale time, but

179
00:14:32.736 --> 00:14:37.833
if it's truly weirdly non-standard,
you first need to

180
00:14:37.833 --> 00:14:43.402
convert that to a valid date
object to pass it into scaleTime.

181
00:14:43.402 --> 00:14:49.238
I think scaleTime will only accept,

182
00:14:49.238 --> 00:14:52.443
let me verify that.

183
00:14:52.443 --> 00:14:55.913
ScaleTime, I believe, only, so

184
00:14:55.913 --> 00:15:00.820
I'm guessing either a string or
a date object.

185
00:15:00.820 --> 00:15:06.250
So you need to get it into a valid form,
but

186
00:15:06.250 --> 00:15:11.700
D3 has you covered there also,
because D3 has this thing called D3 time

187
00:15:11.700 --> 00:15:15.920
that helps you parse, it basically,

188
00:15:15.920 --> 00:15:20.970
I think, so D3 timer,
maybe it's D3 time format, sorry.

189
00:15:20.970 --> 00:15:22.552
We have D3 time and time format.

190
00:15:28.340 --> 00:15:30.943
&gt;&gt; Shirley Wu: D3 time format that helps

191
00:15:30.943 --> 00:15:36.120
you be like, it,
&gt;&gt; Shirley Wu: Yeah, you tell it,

192
00:15:36.120 --> 00:15:40.971
this is what my date,
my non-standard date looks like,

193
00:15:40.971 --> 00:15:44.930
translate that into a validate format for
me.

194
00:15:46.280 --> 00:15:51.420
Yeah, so it won't be solved by scale, but
can be solved by another module in D3.

195
00:15:51.420 --> 00:15:55.660
I think this is why like people are like,
D3, so amazing.

196
00:15:55.660 --> 00:16:00.470
Yeah, [LAUGH] so
scaleLinear, scaleLog, and

197
00:16:00.470 --> 00:16:04.860
scaleTime for continuous things, and
then usually I use scaleBand for ordinal.

198
00:16:06.580 --> 00:16:08.500
So these are all of the Scales.

199
00:16:08.500 --> 00:16:12.990
And then now we can- so Scales are only
just like that mapping that translation.

200
00:16:12.990 --> 00:16:16.680
And then when you want to
like display that Axes,

201
00:16:18.270 --> 00:16:25.290
then there is retreat Axes
that takes your Scale.

202
00:16:25.290 --> 00:16:31.670
And basically renders that,
translates that to a set of axes.

203
00:16:31.670 --> 00:16:35.160
It renders the axis into your DOM for you.

204
00:16:36.710 --> 00:16:40.010
So let me really quickly kinda go
through this code, and what's happening.

205
00:16:40.010 --> 00:16:45.670
So this one's just saying,
I want my axis to be on the left.

206
00:16:45.670 --> 00:16:48.410
Wait, sorry, let's step back.

207
00:16:48.410 --> 00:16:53.440
On the left, and
the scale that I want to use is

208
00:16:53.440 --> 00:16:59.080
the y scale I defined earlier, and then
what I'm doing here is I'm saying okay,

209
00:17:01.500 --> 00:17:09.280
I want to render that
axis into a Into the DOM.

210
00:17:09.280 --> 00:17:13.400
And I want to get the svg and
I want to append this

211
00:17:15.290 --> 00:17:19.210
thing called a group element,
g group element.

212
00:17:20.340 --> 00:17:24.610
Which is just this svg element that's kind
of like this container that helps you have

213
00:17:24.610 --> 00:17:27.670
loads of other svg elements inside it.

214
00:17:27.670 --> 00:17:36.150
So I wasn't gonna get too deep into SVG,
but with SVG you can't nest elements.

215
00:17:36.150 --> 00:17:39.660
You can't nest a circle
element within a rect element.

216
00:17:39.660 --> 00:17:44.350
Or the only thing that you could nest is
this thing called group elements, and

217
00:17:44.350 --> 00:17:48.480
that group is kinda like Yeah,
the container that will hold your rect and

218
00:17:48.480 --> 00:17:53.040
circle and whatever, text elements, etc.

219
00:17:53.040 --> 00:17:58.190
And you can apply transformations
to that whole group element.

220
00:17:58.190 --> 00:18:03.870
So you can just be like,
this whole group element I want

221
00:18:03.870 --> 00:18:09.180
you to move to 200x and 100y,
or something like that and

222
00:18:09.180 --> 00:18:13.710
it transforms all the rectangles or
circles or whatever you have inside it,

223
00:18:13.710 --> 00:18:19.950
and the reason why you might want
this is because what D3 axes does for

224
00:18:19.950 --> 00:18:25.480
you underneath the hood is basically
create a bunch of path and.

225
00:18:25.480 --> 00:18:29.680
Text elements to render that axis for you.

226
00:18:29.680 --> 00:18:32.530
So you need the group element
to kind of contain that.

227
00:18:32.530 --> 00:18:36.880
And most of the time, you might want

228
00:18:36.880 --> 00:18:41.670
the axis to be not 0, 0 on the screen.

229
00:18:41.670 --> 00:18:46.630
So you use transform translate,
so this is saying translate

230
00:18:46.630 --> 00:18:51.363
40 pixels Across and 20 pixels down, and

231
00:18:51.363 --> 00:18:57.250
then call the axis to render.

232
00:18:57.250 --> 00:18:59.647
And what that looks like
in this tiny little thing,

233
00:18:59.647 --> 00:19:07.091
is that's what ends up getting rendered.
&gt;&gt; Speaker 3: In

234
00:19:07.091 --> 00:19:12.373
standard HTML CSS
equivalent is that almost

235
00:19:12.373 --> 00:19:17.510
like creating a Div to hold and
putting that

236
00:19:17.510 --> 00:19:22.410
DIv 20 pixels Down and to the right.
&gt;&gt; Shirley Wu: Yeah,

237
00:19:22.410 --> 00:19:25.090
yeah.
&gt;&gt; Speaker 3: So the g is like a div and

238
00:19:25.090 --> 00:19:27.840
then it's like putting in your CSS?
&gt;&gt; Shirley Wu: Yeah, yeah.

239
00:19:27.840 --> 00:19:30.080
&gt;&gt; Speaker 3: Move this 40 pixels over and

240
00:19:30.080 --> 00:19:31.180
down.
&gt;&gt; Shirley Wu: Yeah,

241
00:19:31.180 --> 00:19:33.050
you can think of it that way, definitely.

242
00:19:33.050 --> 00:19:38.220
But you can only call

243
00:19:38.220 --> 00:19:43.020
axes D3 axis, and SVG, and
maybe Canvas now, in V4.

244
00:19:43.020 --> 00:19:45.080
I haven't checked with Canvas.

245
00:19:45.080 --> 00:19:50.920
But you can only do it with SVG or
Canvas because, wait let

246
00:19:50.920 --> 00:19:55.710
me strike out the Canvas, cuz I'm not 100%
sure, but I think in V4 does Canvas now.

247
00:19:55.710 --> 00:20:01.960
But you can only do it with SVG because
it creates like Specifically text and

248
00:20:01.960 --> 00:20:04.750
line and path elements that
each time it wouldn't support,

249
00:20:04.750 --> 00:20:06.300
so that would be the only thing.

250
00:20:06.300 --> 00:20:09.710
But yeah, if you want to think
of it as that translate is

251
00:20:09.710 --> 00:20:13.300
basically like applying-.
&gt;&gt; Speaker 3: Like conceptually it's like

252
00:20:13.300 --> 00:20:17.250
making a div and
moving a div with CSS almost but

253
00:20:17.250 --> 00:20:19.000
it's the SBG equivalent.
&gt;&gt; Shirley Wu: Yeah.

254
00:20:20.290 --> 00:20:21.830
Okay.

255
00:20:21.830 --> 00:20:25.460
And you might want to do
that if you have the x axis.

256
00:20:25.460 --> 00:20:28.000
You don't want the x axis
to render at 0,0, right?

257
00:20:28.000 --> 00:20:33.550
You want to have that at 500 pixels down,

258
00:20:33.550 --> 00:20:37.640
or something at the bottom of your
bar chart, or something like that.

259
00:20:37.640 --> 00:20:41.100
So, that's why that one is really helpful.

260
00:20:42.280 --> 00:20:47.000
And then again, a really tiny
screenshot to kinda show you.

261
00:20:47.000 --> 00:20:51.901
I think it's important to show you here
that I wanted to get across is that don't

262
00:20:51.901 --> 00:20:56.808
be afraid of what d3 access is
because underneath the hood,

263
00:20:56.808 --> 00:21:01.250
like this is all it's doing,
you have that g,

264
00:21:01.250 --> 00:21:04.460
the g element that gets created.

265
00:21:04.460 --> 00:21:10.120
And all d3 is doing is making like
a bunch of groups with ticks and

266
00:21:10.120 --> 00:21:12.370
pads and to render this thing.

267
00:21:12.370 --> 00:21:16.756
And so you could actually if you want
to do something non-standard with it,

268
00:21:16.756 --> 00:21:18.685
that's not Imported by the API.

269
00:21:18.685 --> 00:21:24.255
All you have to do is be like,
select all the text elements in here and

270
00:21:24.255 --> 00:21:29.655
apply a style, or you can work with it
like you would work with any set of

271
00:21:29.655 --> 00:21:33.120
SVG selections otherwise.

272
00:21:33.120 --> 00:21:38.235
But I think most people don't
really edit what's in here.

273
00:21:39.390 --> 00:21:43.410
But if you desperately need to for some
reason, that's all it is under the hood.

274
00:21:43.410 --> 00:21:45.070
Questions?
&gt;&gt; Speaker 2: Good, so

275
00:21:45.070 --> 00:21:49.420
that segues perfectly into Leo's question.
&gt;&gt; Shirley Wu: Okay.

276
00:21:49.420 --> 00:21:51.000
&gt;&gt; Speaker 2: Similar to how do we make

277
00:21:51.000 --> 00:21:52.810
this particular bar red,

278
00:21:52.810 --> 00:21:57.770
how would you make a particular
label a particular color?

279
00:21:57.770 --> 00:22:02.120
How would you override just that one?
&gt;&gt; Shirley Wu: So

280
00:22:02.120 --> 00:22:05.240
the question itself is how
do you make a particular,

281
00:22:05.240 --> 00:22:10.170
say like take, like the 64,
how do you make that red?

282
00:22:10.170 --> 00:22:12.250
And nothing else red.

283
00:22:12.250 --> 00:22:17.200
But let me also answer a second part
that's kind of on the ask, which is like,

284
00:22:17.200 --> 00:22:24.578
how do I format Like how
do I format these texts.

285
00:22:24.578 --> 00:22:31.420
So if I want this one to be 68 but
I want this to be like 6060K.

286
00:22:31.420 --> 00:22:37.570
Well, I want these two attributes
like 68.0 somewhere like that,

287
00:22:37.570 --> 00:22:39.600
somewhere known headed to where.

288
00:22:39.600 --> 00:22:42.040
D3 is giving you, how do I do that?

289
00:22:42.040 --> 00:22:48.130
And that was actually going to be kind
of like the play with the code part.

290
00:22:48.130 --> 00:22:52.500
And so that for that you could, I want

291
00:22:55.150 --> 00:23:00.010
to show you, if you go to in d3 access and

292
00:23:00.010 --> 00:23:08.340
a lot of the functionality it gives you
is actually how to format your text.

293
00:23:08.340 --> 00:23:12.510
So either you want to specify
the tics that you have.

294
00:23:12.510 --> 00:23:18.550
So maybe you want to say d 3 is giving
me fifteen tics but I only want ten.

295
00:23:18.550 --> 00:23:24.580
Or I could be like, I think the one I use
a lot is this thing called tickFormat

296
00:23:24.580 --> 00:23:32.620
where you can pass it in being like I want
each of the text to be comma separated.

297
00:23:32.620 --> 00:23:36.750
If it's like 100,000,

298
00:23:36.750 --> 00:23:43.020
I want you to have a comma
at the correct mark and

299
00:23:43.020 --> 00:23:48.160
then like I want you to
have one decimal point.

300
00:23:48.160 --> 00:23:51.540
I want you to show one decimal point or
something like that, and

301
00:23:51.540 --> 00:23:56.360
you can actually also pass in a function
kind of like what we've been,

302
00:23:56.360 --> 00:24:04.510
you can pass enough function being for

303
00:24:04.510 --> 00:24:06.810
the odd numbers.

304
00:24:08.620 --> 00:24:12.190
Format it this way and for
the even numbers format it this way.

305
00:24:12.190 --> 00:24:18.230
So that's the unasked question of how
can you format the text of the text.

306
00:24:18.230 --> 00:24:23.083
And then let me answer the actual

307
00:24:23.083 --> 00:24:29.206
question of let's say, if I do Access.

308
00:24:29.206 --> 00:24:35.291
So if I just give that
variable then the .call(yAxis)

309
00:24:35.291 --> 00:24:41.900
I want to say should be returning
me to selection of the axis.

310
00:24:43.250 --> 00:24:45.579
So let's console.log that to double check.

311
00:25:02.880 --> 00:25:04.064
&gt;&gt; Shirley Wu: This is not the right.

312
00:25:13.131 --> 00:25:14.200
&gt;&gt; Shirley Wu: Let me do it this way.

313
00:25:15.280 --> 00:25:21.021
So the thing I mentioned earlier .node,
axis.node, yeah.

314
00:25:21.021 --> 00:25:26.100
So when you do .call in axis,
what that actually returns

315
00:25:26.100 --> 00:25:31.340
you is your axis selection So
I just console.logged acess.node.

316
00:25:31.340 --> 00:25:37.270
And then so down here, you can see
this is actually that whole access and

317
00:25:37.270 --> 00:25:43.890
then you can open it up and be like, these
are all of the takes and stuff inside it.

318
00:25:43.890 --> 00:25:47.704
So if, for example, what I want to do is.

319
00:25:50.460 --> 00:25:54.112
&gt;&gt; Shirley Wu: Turn one of the ticks red,

320
00:25:54.112 --> 00:25:57.931
I just say, and one of the.

321
00:26:01.737 --> 00:26:04.240
&gt;&gt; Shirley Wu: One of the.

322
00:26:07.621 --> 00:26:09.970
&gt;&gt; Shirley Wu: Text takes red.

323
00:26:09.970 --> 00:26:14.948
So now if do axis.selectAll,
it will give me all the text

324
00:26:14.948 --> 00:26:20.396
elements within that axis.
&gt;&gt; Shirley Wu: So

325
00:26:20.396 --> 00:26:25.729
that should be.
&gt;&gt; Shirley Wu: So,

326
00:26:25.729 --> 00:26:29.370
yeah, so this is all of
the text elements within it.

327
00:26:29.370 --> 00:26:36.870
And you can just treat that
like a normal selection and

328
00:26:36.870 --> 00:26:42.036
say I want the fill to be if that data,

329
00:26:42.036 --> 00:26:47.427
actually.
&gt;&gt; Shirley Wu: Now I think about it,

330
00:26:47.427 --> 00:26:50.245
hold on, let me figure out what
data that's bound to it is.

331
00:26:50.245 --> 00:26:51.544
.data.

332
00:26:51.544 --> 00:26:59.160
[LAUGH] Okay, this is the data
that's been bound to each of those.

333
00:26:59.160 --> 00:27:02.482
So let me just say, okay,

334
00:27:02.482 --> 00:27:07.616
if the data is 66 then I want it red, and

335
00:27:07.616 --> 00:27:14.299
otherwise I want it blue.
&gt;&gt; Shirley Wu: Ta-da,

336
00:27:14.299 --> 00:27:18.101
thank you, thank you.

337
00:27:18.101 --> 00:27:24.290
[LAUGH]
Wow, okay, you guys make me feel good.

338
00:27:24.290 --> 00:27:25.370
Yeah, so

339
00:27:25.370 --> 00:27:30.160
it just works like any other selection
that we've been talking about before.

340
00:27:30.160 --> 00:27:33.930
This is why I get very excited about D3.

341
00:27:33.930 --> 00:27:35.700
I think it just like very fun.

342
00:27:35.700 --> 00:27:38.880
And questions?
&gt;&gt; Speaker 2: Yes, there was a question

343
00:27:38.880 --> 00:27:44.440
previously about a little bit
of review for select all.

344
00:27:45.530 --> 00:27:50.545
Specifically, does it select only
the children or does it it actually

345
00:27:50.545 --> 00:27:55.390
go through multiple,
like children's children, or the farthest

346
00:27:55.390 --> 00:28:00.010
child that matches that pattern?
&gt;&gt; Shirley Wu: Second option I believe,

347
00:28:00.010 --> 00:28:03.560
I don't think about this anymore.

348
00:28:03.560 --> 00:28:06.530
So we need to verify it.

349
00:28:07.850 --> 00:28:12.900
Second option, because if you, for
example, take a look at this axis.

350
00:28:12.900 --> 00:28:18.170
You can see that the axis is a selection,

351
00:28:18.170 --> 00:28:23.131
and then when we do .select all text.

352
00:28:24.185 --> 00:28:28.810
Its first order children are actually
a bunch of group elements, and one path.

353
00:28:28.810 --> 00:28:30.350
So there's no text in there.

354
00:28:30.350 --> 00:28:33.540
So D3 actually goes in and
actually looks at,

355
00:28:33.540 --> 00:28:38.430
looks all the way down, and
finds all the text elements.

356
00:28:38.430 --> 00:28:40.980
And I think I forgot to
mention this earlier,

357
00:28:40.980 --> 00:28:44.640
which is you can definitely
change selections.

358
00:28:44.640 --> 00:28:49.010
So you can be like,
select all the group elements and

359
00:28:49.010 --> 00:28:51.090
select all the text elements inside.

360
00:28:51.090 --> 00:28:54.260
Or you can be like,
this access is a selection so

361
00:28:54.260 --> 00:28:56.916
then select everything that
matches my selector inside.

362
00:28:56.916 --> 00:29:00.570
You can chain that and
that's just helpful in terms of

363
00:29:00.570 --> 00:29:05.430
if you have two axes because
you have the x and y but

364
00:29:05.430 --> 00:29:10.280
you only want to change the colors
of the text in your y-axis.

365
00:29:10.280 --> 00:29:10.992
Then you can be like,

366
00:29:10.992 --> 00:29:15.380
y-axis .select all, and that wouldn't
touch anything in the x-axis.

367
00:29:15.380 --> 00:29:15.880
So, yeah.

