WEBVTT

1
00:00:00.170 --> 00:00:03.100
&gt;&gt; Shirley Wu: This is the part
that I think a lot of people were

2
00:00:03.100 --> 00:00:05.150
asking about when we were
covering the entering.

3
00:00:05.150 --> 00:00:10.550
So people were like,
if I have like not the same

4
00:00:10.550 --> 00:00:15.680
number of things on like not
like if we have three reqs and

5
00:00:15.680 --> 00:00:18.490
five data elements like what happens then?

6
00:00:18.490 --> 00:00:20.008
So this is where we go over that.

7
00:00:20.008 --> 00:00:25.488
And so,
&gt;&gt; Shirley Wu: When

8
00:00:25.488 --> 00:00:32.222
we talk about enter update exit,
&gt;&gt; Shirley Wu: The way

9
00:00:32.222 --> 00:00:35.805
to think about it is,
you have your first data set.

10
00:00:35.805 --> 00:00:41.575
So you have your first state, and then you
have maybe something changes to that data.

11
00:00:41.575 --> 00:00:45.885
So this was also the question previously
about what if you have live data coming

12
00:00:45.885 --> 00:00:50.259
in, and then there's your first state,
and then some of the data changes, and

13
00:00:50.259 --> 00:00:54.465
there's your second state, and
your third state, and your fourth state.

14
00:00:54.465 --> 00:00:57.510
How do you account for
all of that data changing?

15
00:00:57.510 --> 00:01:03.197
And maybe in your first data set, or
maybe your second data set has more or

16
00:01:03.197 --> 00:01:06.470
less data points than you first data set.

17
00:01:06.470 --> 00:01:09.961
How do I deal with that?

18
00:01:09.961 --> 00:01:13.881
So one of things that I wanted to mention
is this kind of concept called object

19
00:01:13.881 --> 00:01:14.565
constancy.

20
00:01:14.565 --> 00:01:19.804
It's a really short article that
you guys can read afterwards,

21
00:01:19.804 --> 00:01:23.975
but the really simple boiled
down is if you have data

22
00:01:23.975 --> 00:01:28.825
that changes between states,
you want to make sure that for

23
00:01:28.825 --> 00:01:34.380
each of those objects, that the user,
how do I describe this well?

24
00:01:34.380 --> 00:01:38.459
That the user has a way of following
what happened to that object,

25
00:01:38.459 --> 00:01:41.130
between one state to the next.

26
00:01:41.130 --> 00:01:47.580
So the example here is, so
these are I think age bracket.

27
00:01:47.580 --> 00:01:54.061
What's the percentage for each of the
states, so the y axis is the states and

28
00:01:54.061 --> 00:01:59.984
then the x axis is the percentage
of people 65 years and older.

29
00:01:59.984 --> 00:02:04.520
Or, and then there's all these different
options of like what about under 5 years,

30
00:02:04.520 --> 00:02:05.850
5 to 13 years, etc.

31
00:02:05.850 --> 00:02:08.520
So this is like,
all of these different data sets.

32
00:02:08.520 --> 00:02:12.990
And then, you want to transition
between each of these data sets.

33
00:02:12.990 --> 00:02:17.915
So then, right now it defaults
to 65 years but if I,

34
00:02:17.915 --> 00:02:23.729
let's say, do 45 to 64,
notice that little transition.

35
00:02:23.729 --> 00:02:30.310
So, some of the states have been pushed
down, some of the states come up.

36
00:02:30.310 --> 00:02:33.020
Some of them stay on the screen
because they're the top.

37
00:02:33.020 --> 00:02:34.650
I'm guessing this is ten.

38
00:02:34.650 --> 00:02:38.332
And they're the top ten states, and
then maybe their bars just increase or

39
00:02:38.332 --> 00:02:39.330
decrease in width.

40
00:02:42.826 --> 00:02:51.812
&gt;&gt; Shirley Wu: Yeah,
&gt;&gt; Shirley Wu: This is what's happening,

41
00:02:51.812 --> 00:02:56.996
and then underneath the hood
I haven't verified this but

42
00:02:56.996 --> 00:03:02.292
I'm pretty sure Mike isn't
making like 50 bar graphs.

43
00:03:02.292 --> 00:03:05.802
And transitioning those 50
bar graphs up and down,

44
00:03:05.802 --> 00:03:11.033
he's making these ten rectangles and
then he's transitioning those in and out.

45
00:03:14.020 --> 00:03:16.010
&gt;&gt; Shirley Wu: As you click
on the different states.

46
00:03:16.010 --> 00:03:23.451
And then he's animating them in and
out or like wider or less wide.

47
00:03:23.451 --> 00:03:26.020
So yeah,
that's the concept to object consistency.

48
00:03:26.020 --> 00:03:29.660
And that's kind of like the reason why
D3 has this whole thing of enter and

49
00:03:29.660 --> 00:03:31.270
exits to deal with it.

50
00:03:32.320 --> 00:03:38.309
The examples I was going to show you,
&gt;&gt; Shirley Wu: Was

51
00:03:38.309 --> 00:03:43.261
this visualization I did a few
months back of all of the lines in,

52
00:03:43.261 --> 00:03:46.776
have you guys heard of
Hamilton the musical?

53
00:03:46.776 --> 00:03:52.550
Okay, cool [LAUGH] I've been obsessed
with this for like the last almost year.

54
00:03:52.550 --> 00:03:55.700
And so
I took each like one of these lines.

55
00:03:55.700 --> 00:04:00.070
So each like bubble is a set of lines but
some by character and then visualize it.

56
00:04:01.810 --> 00:04:04.430
So I do like a bunch of analysis
then I talk about it and

57
00:04:04.430 --> 00:04:05.680
then you can like interact with it.

58
00:04:05.680 --> 00:04:09.319
But the part that I want to show you,
all the way at the bottom.

59
00:04:13.703 --> 00:04:17.539
&gt;&gt; Shirley Wu: Is this kind of concept
to like, here's all of the lines and

60
00:04:17.539 --> 00:04:20.300
I build a filter tool for it.

61
00:04:20.300 --> 00:04:22.580
So I can filter by let's say,
like Angelica.

62
00:04:22.580 --> 00:04:26.520
And so here's all of the songs,
all of Angelica's lines and

63
00:04:26.520 --> 00:04:30.601
her songs,
&gt;&gt; Shirley Wu: And

64
00:04:30.601 --> 00:04:35.063
now maybe I also want to filter
by this like one theme and

65
00:04:35.063 --> 00:04:38.780
then, so everything all gets faded out.

66
00:04:38.780 --> 00:04:41.440
And then, just those lines are remain,

67
00:04:41.440 --> 00:04:44.345
did you guys see that little like
transition where jump all the way up?

68
00:04:44.345 --> 00:04:51.722
[INAUDIBLE] It jumped all the way up, and
then when I deselect, it comes back in.

69
00:04:55.617 --> 00:04:58.375
&gt;&gt; Shirley Wu: Yeah,
&gt;&gt; Shirley Wu: And so,

70
00:04:58.375 --> 00:04:59.948
that's kind of object constancy, right?

71
00:04:59.948 --> 00:05:04.911
Like,
&gt;&gt; Shirley Wu: So

72
00:05:04.911 --> 00:05:10.146
that you get a sense that,
there are data points that are staying,

73
00:05:10.146 --> 00:05:13.418
there are data points that are leaving but

74
00:05:13.418 --> 00:05:18.671
you kinda get the sense of,
them all I guess connecting together.

75
00:05:20.840 --> 00:05:22.620
So this is the example I have.

76
00:05:22.620 --> 00:05:25.090
And then we are going to,
this is a big section,

77
00:05:25.090 --> 00:05:26.700
where we go into how that all works.

78
00:05:28.170 --> 00:05:29.724
Yeah, are you guys excited?

79
00:05:29.724 --> 00:05:36.340
[LAUGH] Cuz once we're past this hurdle,
the rest of D3 should be super easy.

80
00:05:36.340 --> 00:05:39.529
Once you get this,
the rest of that library is all yours.

81
00:05:40.850 --> 00:05:44.843
So the very key concept
about how the enter, update,

82
00:05:44.843 --> 00:05:49.902
exit works is, thus far,
we've been using this .data function,

83
00:05:49.902 --> 00:05:53.451
and remember how we only
pass in just this data,

84
00:05:53.451 --> 00:05:57.575
right, like we've only been
doing that data, data.

85
00:05:57.575 --> 00:06:02.060
But there's actually a second optional
argument that we can pass in called

86
00:06:02.060 --> 00:06:03.210
the key function.

87
00:06:03.210 --> 00:06:07.650
And that key functions essentially goes
through all of your like loops through

88
00:06:07.650 --> 00:06:13.290
your data and then you return whatever

89
00:06:14.560 --> 00:06:19.710
the key that identifying key for that data
should be, that data point should be.

90
00:06:21.310 --> 00:06:24.670
So in this case, I'm just saying okay,

91
00:06:24.670 --> 00:06:28.970
the data that I end up passing in
is just in that ray of integers.

92
00:06:28.970 --> 00:06:32.950
So I'm just saying just
use my integer as my key.

93
00:06:32.950 --> 00:06:36.050
If you have pass in let's
say a ray of objects and

94
00:06:36.050 --> 00:06:38.400
each of your objects have an id attribute.

95
00:06:38.400 --> 00:06:44.213
You can say use d.id as my key function,
or

96
00:06:44.213 --> 00:06:49.560
u can use d.name as my key function.

97
00:06:49.560 --> 00:06:51.510
The most important thing is that

98
00:06:52.790 --> 00:06:57.585
your key function should return
unique results, unique strings,

99
00:06:57.585 --> 00:07:02.120
or unique integers for each one of your
data points that's the only thing.

100
00:07:02.120 --> 00:07:07.069
If you don't return unique strings for
each of your data points

101
00:07:08.250 --> 00:07:12.650
D3 will get confused and think that
those two that have the same key,

102
00:07:12.650 --> 00:07:14.950
are actually the same thing and
combine them together.

103
00:07:14.950 --> 00:07:20.090
So you might get this bug of like,
you have like, ten data points,

104
00:07:20.090 --> 00:07:23.320
but then you only see nine on the screen,
and you're super confused.

105
00:07:23.320 --> 00:07:26.080
And that's because you didn't
give it unique identifiers,

106
00:07:26.080 --> 00:07:29.410
unique yeah, IDs, keys, keys, IDs.

107
00:07:30.450 --> 00:07:33.570
So that's the only thing to make
sure to be very careful of.

108
00:07:35.016 --> 00:07:38.520
And then, so once we have that,

109
00:07:39.550 --> 00:07:43.886
let's talk about .data, and
then key function and how it all works.

110
00:07:43.886 --> 00:07:49.670
So this is,

111
00:07:49.670 --> 00:07:54.530
let us pretend right now that we
have five rectangles on the screen.

112
00:07:55.970 --> 00:08:00.840
And those rectangles have
data bound on them such

113
00:08:00.840 --> 00:08:05.230
that these in the red are their keys.

114
00:08:05.230 --> 00:08:09.816
Like what gets returned by the key
function for each of those rectangles.

115
00:08:09.816 --> 00:08:13.887
And then this is my data set and
it has six data points.

116
00:08:13.887 --> 00:08:19.647
And because like our key function right is
just really simply returning the value,

117
00:08:19.647 --> 00:08:21.550
these are also their keys.

118
00:08:23.110 --> 00:08:27.370
So, the first thing that
data like calculates for us,

119
00:08:27.370 --> 00:08:32.270
is it figures out what your quote
unquote update selection is.

120
00:08:33.320 --> 00:08:38.670
And what that means is it takes,
executes your key function and

121
00:08:38.670 --> 00:08:45.370
it says okay on this side
this 120 maps to this 120.

122
00:08:45.370 --> 00:08:49.190
So this 120 in the data maps
to the 120 in the rectangle.

123
00:08:49.190 --> 00:08:53.210
And there's 250 in the date maps
to the 250 in the rectangle.

124
00:08:53.210 --> 00:08:56.960
And so those are the two rectangles, these

125
00:08:56.960 --> 00:09:01.490
are the two rectangles that match the data
so they're going to remain on the screen.

126
00:09:03.390 --> 00:09:05.540
So that's the update selection.

127
00:09:05.540 --> 00:09:09.440
Yeah, so the data calculates for
us the update selection.

128
00:09:09.440 --> 00:09:14.000
The next thing that .data calculates for
us is our enter selection.

129
00:09:14.000 --> 00:09:19.500
So it looks at both and
it says these are the data points and

130
00:09:19.500 --> 00:09:24.320
there's 233, 145 and
75 are the data points that don't yet

131
00:09:24.320 --> 00:09:31.036
exist in the rectangles because there's
no 230, or 300, or any of those.

132
00:09:31.036 --> 00:09:36.253
So .dataset okay,
we need to create four rectangles,

133
00:09:36.253 --> 00:09:41.146
create four rectangles to
be able to match the data.

134
00:09:41.146 --> 00:09:44.644
And that's what's happening here and
that's the enter selection.

135
00:09:44.644 --> 00:09:51.350
And finally .data calculates for
us it looks at the rectangle and says,

136
00:09:51.350 --> 00:09:58.455
here are all the rectangles whose
key doesn't exists in the data.

137
00:09:58.455 --> 00:10:03.640
So that's 100,
the rectangle with key 100 doesn't

138
00:10:03.640 --> 00:10:09.979
have an equivalent on the data side,
same thing with 175 and 200.

139
00:10:09.979 --> 00:10:15.810
And that .data calls
that the exit selection.

140
00:10:18.030 --> 00:10:21.540
That's the three rectangles that we
need to get rid of from the screen,

141
00:10:21.540 --> 00:10:22.680
from the DOM.

142
00:10:22.680 --> 00:10:24.320
And to be able to match with the data.

143
00:10:26.390 --> 00:10:27.480
How are we so far?

144
00:10:27.480 --> 00:10:28.610
Do you want me to repeat any of that?

145
00:10:30.520 --> 00:10:33.410
&gt;&gt; Speaker 2: I think I'm just a little
confused between the data values and

146
00:10:33.410 --> 00:10:35.020
the keys, so

147
00:10:35.020 --> 00:10:39.810
like the one, what your talking about
here are meant to be unique keys, right?

148
00:10:39.810 --> 00:10:42.420
Like it's not the value itself.

149
00:10:42.420 --> 00:10:43.230
&gt;&gt; Shirley Wu: Yeah.

150
00:10:43.230 --> 00:10:46.850
&gt;&gt; Speaker 2: So
if it were like a time-series or

151
00:10:46.850 --> 00:10:51.540
what if it's an index like 1 through
100 if we are 100 data values.

152
00:10:51.540 --> 00:10:54.433
&gt;&gt; Shirley Wu: Yeah, and
that's perfectly fine,

153
00:10:54.433 --> 00:10:59.990
yeah I did I 'm using data and
key like I'm using value and

154
00:10:59.990 --> 00:11:03.820
key as like the same thing here for
the sake of simplicity.

155
00:11:03.820 --> 00:11:06.955
But in practice you should be using,

156
00:11:06.955 --> 00:11:12.540
you should create anything that
makes sense for you as the key.

157
00:11:12.540 --> 00:11:18.760
So if that means for 100 values
just specifying one through 100,

158
00:11:18.760 --> 00:11:22.950
[INAUDIBLE] and
if that works that is great.

159
00:11:22.950 --> 00:11:24.619
If for example in our,

160
00:11:25.850 --> 00:11:28.540
let's say our temperature dataset
that we've been working with.

161
00:11:29.910 --> 00:11:35.460
We might use the date as our key, because
the dates are unique across the board.

162
00:11:35.460 --> 00:11:38.409
And we wouldn't want to
use the temperature value,

163
00:11:38.409 --> 00:11:41.020
because that's not unique.

164
00:11:41.020 --> 00:11:43.240
&gt;&gt; Speaker 2: So it's almost
like a row number a little bit?.

165
00:11:43.240 --> 00:11:44.244
&gt;&gt; Shirley Wu: Yeah.
&gt;&gt; Speaker 2: In a dataset.

166
00:11:44.244 --> 00:11:45.690
&gt;&gt; Shirley Wu: Yeah.
&gt;&gt; Speaker 2: So when you're reading

167
00:11:45.690 --> 00:11:50.520
your data your keys would just be all the
row numbers, associate with each value.

168
00:11:50.520 --> 00:11:51.140
&gt;&gt; Shirley Wu: Yeah.

169
00:11:51.140 --> 00:11:55.260
&gt;&gt; Speaker 2: And then,
if you'll need to show the first ten rows,

170
00:11:55.260 --> 00:11:57.130
those are the keys you'll
pull out to this way.

171
00:11:57.130 --> 00:12:02.160
&gt;&gt; Shirley Wu: Yeah, so the only thing is
make sure that those keys are the same

172
00:12:02.160 --> 00:12:03.900
across all of your states.

173
00:12:03.900 --> 00:12:09.700
So like if you, for your first state
only pull like rows one through 10,

174
00:12:09.700 --> 00:12:15.630
but then your next state, you actually
pull rows, like 10 through 20, make

175
00:12:15.630 --> 00:12:21.160
sure that these keys are 10 through 20 and
not 1 through 10 or anything like that.

176
00:12:21.160 --> 00:12:25.880
And actually if you don't provide
a key function, what D3 does,

177
00:12:25.880 --> 00:12:31.140
is under the hood it assumes
it kind of applies a key for

178
00:12:31.140 --> 00:12:36.650
each of them, that's just the index.

179
00:12:36.650 --> 00:12:41.890
So yeah,
it just uses the index as the key.

180
00:12:41.890 --> 00:12:45.060
But for something like, for

181
00:12:45.060 --> 00:12:49.780
if you're transitioning between different
states that have like different dates or

182
00:12:49.780 --> 00:12:54.100
different categories, or
in the case of this object constancy,

183
00:12:54.100 --> 00:12:57.020
the key function for
this one should be the states.

184
00:12:58.640 --> 00:13:02.946
That's one when you want to make
sure not only are they unique but

185
00:13:02.946 --> 00:13:07.112
that they're unique and
constant across all of your states.

186
00:13:07.112 --> 00:13:08.353
Yeah, data states.

187
00:13:11.050 --> 00:13:12.370
&gt;&gt; Shirley Wu: Question?

188
00:13:12.370 --> 00:13:15.140
&gt;&gt; Speaker 3: Yes, we had a question about

189
00:13:15.140 --> 00:13:18.310
the function that you
pass in to find the key.

190
00:13:18.310 --> 00:13:22.270
Does it accept a second parameter for
the index?

191
00:13:22.270 --> 00:13:28.000
&gt;&gt; Shirley Wu: Yes, it does so
the key function will accept both data or

192
00:13:28.000 --> 00:13:32.460
it will give you both the data and index,
and you can then return any string or

193
00:13:32.460 --> 00:13:33.370
integer you want.

194
00:13:33.370 --> 00:13:36.060
I think the integer will just get coerced
into a string or something like that.

195
00:13:37.820 --> 00:13:40.488
&gt;&gt; Speaker 3: Sorry,
one more question that just came in,

196
00:13:40.488 --> 00:13:43.448
does D3 have anything built in for
sorting data?

197
00:13:47.671 --> 00:13:52.505
&gt;&gt; Shirley Wu: No, I don't know
off the top of my head maybe in D3

198
00:13:52.505 --> 00:13:55.240
array module, maybe.

199
00:13:55.240 --> 00:14:01.630
So I do know that there is, just because
when it comes to manipulating the data,

200
00:14:01.630 --> 00:14:05.240
I just use something like low dash,
and I don't use D3.

201
00:14:05.240 --> 00:14:10.220
But I think D3 array might,
if you look into it D3 does,

202
00:14:10.220 --> 00:14:13.310
however, have a sort function for
the selection.

203
00:14:13.310 --> 00:14:19.930
So if you have an array, if you have
your selection of five rectangles and

204
00:14:19.930 --> 00:14:24.570
you want to sort that because

205
00:14:26.160 --> 00:14:34.410
somehow, it actually re-orders
the rectangle elements in the dom.

206
00:14:34.410 --> 00:14:38.010
So, if you had five rects, and it was one,
two, three, four, five, and you wanted to

207
00:14:38.010 --> 00:14:41.394
sort that the other way around, it
actually rearranges it in the dom itself.

208
00:14:41.394 --> 00:14:46.150
So, that's selector.sort,
so d3selection.sort.

209
00:14:46.150 --> 00:14:50.068
But, I'm not sure about array
sorting the data, yeah.

210
00:14:50.068 --> 00:14:55.005
Yeah cool, is there anything else

211
00:14:55.005 --> 00:14:59.990
that questions about enter exit.

212
00:14:59.990 --> 00:15:05.055
The update selection, the enter selection,
and the exit selection.

213
00:15:05.055 --> 00:15:09.434
Or was it straightforward enough,
straightforward enough?

214
00:15:09.434 --> 00:15:11.865
Cool perfect, in that case,

215
00:15:11.865 --> 00:15:17.230
let's go on to that console log again,
that's like super tiny.

216
00:15:18.670 --> 00:15:23.740
So remember how we looked at this a little

217
00:15:23.740 --> 00:15:29.590
bit underneath the hood but
I want to kind of emphasize this again.

218
00:15:29.590 --> 00:15:33.927
So this is the, this groups part,
all the way towards the bottom,

219
00:15:33.927 --> 00:15:36.104
that's your update selection.

220
00:15:38.920 --> 00:15:40.995
&gt;&gt; Shirley Wu: And
then this enter section,

221
00:15:40.995 --> 00:15:46.430
that's the four rectangle place
holders that we need to create.

222
00:15:46.430 --> 00:15:50.780
And then this exit is the three rectangles
that I mentioned earlier that needs to be

223
00:15:50.780 --> 00:15:54.220
removed, so
that all of this matches the new data set.

224
00:15:55.770 --> 00:16:04.130
And I think a great way to think about
this is I was talking to Stu earlier, and

225
00:16:04.130 --> 00:16:08.460
we were talking about how we want to think
about this as how like the whole point of

226
00:16:08.460 --> 00:16:14.650
D3 is to, God,
what was the wording that we used?

227
00:16:14.650 --> 00:16:15.940
&gt;&gt; Speaker 3: Describe.

228
00:16:15.940 --> 00:16:22.070
&gt;&gt; Shirley Wu: So we want to
describe what we want on the screen,

229
00:16:23.480 --> 00:16:28.190
so that when we get the data, that data
will be described on the screen correctly.

230
00:16:29.230 --> 00:16:34.290
So I think a lot of the confusion with
D3 comes from the fact that we start

231
00:16:34.290 --> 00:16:39.790
defining what we want to like we
started defining our rectangles and

232
00:16:39.790 --> 00:16:44.240
our attributes and all of that even before
we have any elements on the screen.

233
00:16:44.240 --> 00:16:48.432
And like, that whole like, like why
are we describing things that don't yet

234
00:16:48.432 --> 00:16:51.140
exist is I think what
confuses a lot of people, but

235
00:16:51.140 --> 00:16:53.802
if we kind of turn that
mentality around 180.

236
00:16:53.802 --> 00:17:01.034
And instead of thinking of it as
elements to manipulate with the data,

237
00:17:01.034 --> 00:17:09.570
rather, think of it as the data dictates
what showed up here on the screen.

238
00:17:09.570 --> 00:17:13.340
And all you're doing is
describing once we get the data,

239
00:17:13.340 --> 00:17:15.370
this is how that data should
look like on this screen.

240
00:17:16.460 --> 00:17:16.960
So, yep.

241
00:17:18.510 --> 00:17:21.020
&gt;&gt; Speaker 3: Yeah,
we have a question from Leo

242
00:17:21.020 --> 00:17:24.360
about the enter exit update paradime.

243
00:17:24.360 --> 00:17:25.030
&gt;&gt; Shirley Wu: Okay.

244
00:17:25.030 --> 00:17:27.040
&gt;&gt; Speaker 3: I don't know if anybody
here is familiar with react, but

245
00:17:27.040 --> 00:17:30.610
react invests blood and
treasure into figuring out whether or

246
00:17:30.610 --> 00:17:34.820
not something needs to update at all.

247
00:17:34.820 --> 00:17:40.056
And so, if you go into your data and
you just tweak one element, is it smart

248
00:17:40.056 --> 00:17:45.900
enough to leave most of the dom alone and
only tweak just that one changed element?

249
00:17:45.900 --> 00:17:48.818
Or does it re-render the entire thing?

250
00:17:48.818 --> 00:17:51.770
&gt;&gt; Shirley Wu: Okay, so
I love that question.

251
00:17:51.770 --> 00:17:53.970
So is, so

252
00:17:53.970 --> 00:17:58.750
the example was react is really, wait
actually everybody hears the question.

253
00:17:58.750 --> 00:18:00.140
So I don't know why I'm repeating it.

254
00:18:00.140 --> 00:18:06.210
So I actually love comparing D3 with react
because the way that I think about it is

255
00:18:06.210 --> 00:18:12.740
react is essentially doing under the hood
what D3, you have to do with D3 yourself.

256
00:18:12.740 --> 00:18:14.630
And what I mean by that,

257
00:18:14.630 --> 00:18:18.660
is react is really smart in figuring out
what is the smallest set of changes that

258
00:18:18.660 --> 00:18:21.880
you need to make to get from
the first state to the next state.

259
00:18:21.880 --> 00:18:27.890
Where as with D3,
the enter update exit, how much,

260
00:18:27.890 --> 00:18:33.100
how the dom gets rerendered
is only as smart as you.

261
00:18:33.100 --> 00:18:38.140
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Shirley Wu: As in D3 gives you all

262
00:18:38.140 --> 00:18:43.150
of the control about what you want to do
with the enter update and exit selections.

263
00:18:43.150 --> 00:18:48.920
So if you are smart about it and like,

264
00:18:48.920 --> 00:18:54.580
okay, I only need to update these
attributes for the update selection,

265
00:18:54.580 --> 00:18:57.216
and this the things that I need to do
with the enter and update selections.

266
00:18:57.216 --> 00:19:02.120
And this is the thing that we need
to do with the enter selections,

267
00:19:02.120 --> 00:19:06.580
if you make sure to think that through and
only manipulate,

268
00:19:06.580 --> 00:19:12.580
like only edit where it's necessary then
it will have the same effect as react.

269
00:19:13.620 --> 00:19:17.670
But if you are just like
update all these attributes

270
00:19:17.670 --> 00:19:21.420
all the time on all the selections,
then it would just rerender dot and

271
00:19:21.420 --> 00:19:22.990
the dom all the time, right.

272
00:19:22.990 --> 00:19:28.620
So all D3 does is it
gives you what each of

273
00:19:28.620 --> 00:19:33.550
those selections should be given the first
set of data and the second set of data.

274
00:19:33.550 --> 00:19:37.340
And you figure out what to do
with each of the selections.

