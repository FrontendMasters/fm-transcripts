WEBVTT

1
00:00:00.330 --> 00:00:02.630
&gt;&gt; Brian Holt: So let's go make
everything a synchronous cuz why not?

2
00:00:02.630 --> 00:00:07.646
So we're gonna get rid off

3
00:00:07.646 --> 00:00:14.500
search params as well and results.

4
00:00:14.500 --> 00:00:17.623
And then we're gonna do
basically the same thing here.

5
00:00:17.623 --> 00:00:21.874
Global details, we'll just make

6
00:00:21.874 --> 00:00:26.565
a couple copies of that one we'll call

7
00:00:26.565 --> 00:00:31.694
loadable results, I call this results,

8
00:00:31.694 --> 00:00:36.838
and this will be loadable search params.

9
00:00:36.838 --> 00:00:39.601
And this would be for search params,

10
00:00:39.601 --> 00:00:44.146
now the first thing you might say here,
this is a little bit of

11
00:00:44.146 --> 00:00:49.426
repetition can we make like some
sort of like higher order component.

12
00:00:49.426 --> 00:00:53.962
Yeah you absolutely could, like there's
and that would probably be better, but

13
00:00:53.962 --> 00:00:57.066
I think for this case we
are just going to keep it simple.

14
00:00:57.066 --> 00:01:00.693
And come back down here,

15
00:01:00.693 --> 00:01:05.184
and say loadable-results and

16
00:01:05.184 --> 00:01:10.719
loadable-search-params, okay?

17
00:01:10.719 --> 00:01:15.336
Now notice that on every page load,
we'll have two bundles loaded, and

18
00:01:15.336 --> 00:01:18.515
you'll notice what results
got loaded here, and

19
00:01:18.515 --> 00:01:23.307
then we'll go to search params page and
yet another bundle will be loaded.

20
00:01:23.307 --> 00:01:27.836
Now this is wasteful, if we're being
totally honest with ourselves.

21
00:01:27.836 --> 00:01:32.806
This page we just loaded ten kilobytes,
and that unminified and ungzips, so

22
00:01:32.806 --> 00:01:36.102
that's actually the biggest it could be,
right?

23
00:01:36.102 --> 00:01:41.939
You need to be shaving off like, I'm going
to guess like 20 to 20 plus kilobytes at

24
00:01:41.939 --> 00:01:47.799
the very very least of gzipped application
code before this become worth it, right.

25
00:01:47.799 --> 00:01:52.592
Because otherwise you're not really adding
too much in fact you gonna make user wait

26
00:01:52.592 --> 00:01:55.494
when they try navigate to
the different pages, and

27
00:01:55.494 --> 00:01:59.565
so it's balance, and this is something
you should definitely track.

28
00:01:59.565 --> 00:02:04.346
You wanna be cutting off like a quarter
second, a half second you have to making

29
00:02:04.346 --> 00:02:08.984
real dense into this, otherwise you're
making your code more abstract and

30
00:02:08.984 --> 00:02:13.708
harder to follow, right this is going
to be a little more difficult to debug.

31
00:02:13.708 --> 00:02:17.501
You're introducing more network
latency into your application, so

32
00:02:17.501 --> 00:02:20.082
there's a bunch of problems
with this as well.

33
00:02:20.082 --> 00:02:22.982
It's not always going to be a silver
bullet that's going to make your

34
00:02:22.982 --> 00:02:23.937
application better.

35
00:02:23.937 --> 00:02:26.049
You should be shaving off a lot.

36
00:02:26.049 --> 00:02:30.605
But like let me show you how much
of a difference it can make.

37
00:02:30.605 --> 00:02:36.208
You don't have to follow this I'm
just gonna show you if I import or

38
00:02:36.208 --> 00:02:41.426
sorry, MPM install lodash,
lodash is quite, quite large.

39
00:02:41.426 --> 00:02:46.836
And just for
fun lets install moment JS as well,

40
00:02:46.836 --> 00:02:50.228
two pretty large libraries.

41
00:02:50.228 --> 00:02:55.917
Then I'm going to go into
maybe the details page here,

42
00:02:55.917 --> 00:03:00.625
and I'm going to import
lodash from lodash.

43
00:03:00.625 --> 00:03:04.039
This would normally be an underscore,
right?

44
00:03:04.039 --> 00:03:08.589
And import moment from moment right, and

45
00:03:08.589 --> 00:03:14.059
just to use them I'm gonna
say consul.log load.

46
00:03:14.059 --> 00:03:18.735
So I'm doing this just so I include
these libraries into my bundle now.

47
00:03:18.735 --> 00:03:22.046
This is gonna balloon my bundle.

48
00:03:22.046 --> 00:03:24.217
I'm going to RPM run def here.

49
00:03:30.627 --> 00:03:34.302
&gt;&gt; Brian Holt: It's smart enough to
actually go and recognize that moment and

50
00:03:34.302 --> 00:03:37.270
load Azure only imported in details,
right?

51
00:03:37.270 --> 00:03:38.559
So it's not gonna load upfront,

52
00:03:38.559 --> 00:03:40.640
and it's not gonna load them
in the another bundles.

53
00:03:41.990 --> 00:03:45.462
So I am in details list should be good.

54
00:03:45.462 --> 00:03:51.074
Hard refresh in this page,
notice that the results page 15 kilobyte,

55
00:03:51.074 --> 00:03:56.236
now if I go into details,
I click on blue here, 745 kilobytes.

56
00:03:56.236 --> 00:04:02.516
So this would be a good point for
us to introduce code splitting.

57
00:04:02.516 --> 00:04:05.909
So hopefully now you're kinda getting the
picture like this is when it's useful and

58
00:04:05.909 --> 00:04:07.170
this is when it's not useful.

59
00:04:07.170 --> 00:04:09.505
Again it's not a silver bullet,
It's definitely a trade off.

60
00:04:09.505 --> 00:04:11.960
Any time that you're
introducing network latency,

61
00:04:11.960 --> 00:04:14.532
you need to be asking yourself
some questions, right.

62
00:04:14.532 --> 00:04:16.532
You want to cut down on how
many API calls your making,

63
00:04:16.532 --> 00:04:18.455
you want to cut down on how
many bundles your doing.

64
00:04:18.455 --> 00:04:21.113
So you have to make
the appropriate trade off here.

65
00:04:21.113 --> 00:04:23.552
Does it make sense cool, so

66
00:04:23.552 --> 00:04:29.079
this is again a big reason why
I'm a big fan of code splitting.

67
00:04:29.079 --> 00:04:31.227
You can get your bundles really,
really small.

68
00:04:31.227 --> 00:04:34.399
I have a separate conference
talk that my slides are up and

69
00:04:34.399 --> 00:04:36.645
it also on YouTube called ten KB or Bust,

70
00:04:36.645 --> 00:04:40.830
how to get your application under ten
kilobytes on that initial page load.

71
00:04:40.830 --> 00:04:44.637
Spoiler alert, you can't use react,
you actually have to switch to preact,

72
00:04:44.637 --> 00:04:46.728
which I will show you
how to do later today.

73
00:04:46.728 --> 00:04:51.291
[LAUGH] Do we have any
questions about this?

74
00:04:51.291 --> 00:04:54.937
It's pretty cool, right?

75
00:04:54.937 --> 00:04:59.603
Like this was pretty much free, I just
set up an import statement and it worked.

76
00:04:59.603 --> 00:05:01.695
I think that's really cool.

