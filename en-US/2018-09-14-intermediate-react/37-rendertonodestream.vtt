WEBVTT

1
00:00:00.003 --> 00:00:02.275
&gt;&gt; Brian Holt: So I've cut a commit here.

2
00:00:02.275 --> 00:00:05.520
And so if you're interested in that,
you can go grab the commit right there.

3
00:00:05.520 --> 00:00:07.592
This is in the branch SSR.

4
00:00:07.592 --> 00:00:13.099
But I want to take this one step
further because React server-side

5
00:00:13.099 --> 00:00:18.619
rendering got better with 16.0,
I guess, yeah, 16.0.

6
00:00:20.160 --> 00:00:22.800
Right now, this is a pretty small
application so this would be good for

7
00:00:22.800 --> 00:00:23.579
what we're doing.

8
00:00:23.579 --> 00:00:29.268
But imagine we have a super, super long
document that takes a while to render.

9
00:00:29.268 --> 00:00:32.574
That could be a problem with this because
this is gonna really slow down as it's

10
00:00:32.574 --> 00:00:34.329
doing all that server-side rendering,

11
00:00:34.329 --> 00:00:36.701
particularly when some of
it's already done upfront.

12
00:00:36.701 --> 00:00:40.239
So would it be great if we could
stream the markup to someone?

13
00:00:40.239 --> 00:00:41.844
If they immediately call the page and

14
00:00:41.844 --> 00:00:45.434
I just immediately flush something out to
them so they can see something, right?

15
00:00:45.434 --> 00:00:46.767
That would be pretty cool.

16
00:00:46.767 --> 00:00:54.696
With React 16, that became possible
with a method called renderToNodeStream.

17
00:00:54.696 --> 00:00:59.568
So I want you to go back and
open your app.js.

18
00:00:59.568 --> 00:01:04.567
I want you to change instead,
sorry, not app.js, but server.js.

19
00:01:04.567 --> 00:01:10.435
Rather than say renderToString, I want
you to say renderToNodeStream, okay?

20
00:01:15.786 --> 00:01:18.788
&gt;&gt; Brian Holt: So
we're gonna reorganize this a little bit.

21
00:01:18.788 --> 00:01:22.402
So rather than just doing
one res.send down here,

22
00:01:22.402 --> 00:01:25.608
we're going to res.send a couple of times.

23
00:01:25.608 --> 00:01:28.226
So the very first thing when someone,
in fact,

24
00:01:28.226 --> 00:01:30.327
I can just get rid of that right there.

25
00:01:30.327 --> 00:01:32.789
The first thing that I'm gonna
do when someone makes a request,

26
00:01:32.789 --> 00:01:34.670
I'm going to immediately
flush out the header.

27
00:01:34.670 --> 00:01:44.205
So I'm gonna say res.write(parts[0]).

28
00:01:44.205 --> 00:01:46.767
So the first thing they're
gonna get all the CSS,

29
00:01:46.767 --> 00:01:49.332
they're gonna get all
the title of the document.

30
00:01:49.332 --> 00:01:52.950
And this is gonna be a big performance
one because immediately there gonna start

31
00:01:52.950 --> 00:01:53.600
loading CSS.

32
00:01:53.600 --> 00:01:55.188
Whereas before they had to wait for

33
00:01:55.188 --> 00:01:58.264
the entire document to finish
before they start downloading CSS.

34
00:01:58.264 --> 00:02:01.272
While you're still finishing your
server side rendering, guess what?

35
00:02:01.272 --> 00:02:02.306
They're downloading your CSS.

36
00:02:02.306 --> 00:02:05.631
So you're just getting ahead of
the curve here a little bit.

37
00:02:07.953 --> 00:02:08.812
&gt;&gt; Brian Holt: Okay?

38
00:02:08.812 --> 00:02:12.634
After that then I'm gonna
do the res.markup stuff, or

39
00:02:12.634 --> 00:02:14.351
the reactMarkup stuff.

40
00:02:14.351 --> 00:02:19.773
Then I'm gonna do const stream

41
00:02:19.773 --> 00:02:27.494
= renderToNodeStream(reactMarkup).

42
00:02:27.494 --> 00:02:30.693
Okay, so this is going to be what's called
a NodeStream which I'm not gonna get

43
00:02:30.693 --> 00:02:31.326
too much into.

44
00:02:31.326 --> 00:02:32.669
It's a primitive type for

45
00:02:32.669 --> 00:02:36.343
node that you can have data returns
multiple times basically, right?

46
00:02:36.343 --> 00:02:38.800
It's gonna be a stream of oncoming data.

47
00:02:38.800 --> 00:02:46.048
And I'm gonna say stream.on,
or sorry, stream.pipe first,

48
00:02:46.048 --> 00:02:50.941
stream.pipe(res, [ end: false ]).

49
00:02:50.941 --> 00:02:54.566
So what this is gonna do is it's gonna
take stream as it has more data coming

50
00:02:54.566 --> 00:02:55.977
back from React rendering.

51
00:02:55.977 --> 00:02:58.152
It's gonna just pipe that into res, right?

52
00:02:58.152 --> 00:02:59.772
Pipe in the sense of bash, right?

53
00:02:59.772 --> 00:03:01.804
It's like connecting two pipes together.

54
00:03:01.804 --> 00:03:06.008
That the stream pipe is now
connected to the res pipe, right?

55
00:03:06.008 --> 00:03:10.344
This end: false thing is once this
stream finishes, I'm not done yet,

56
00:03:10.344 --> 00:03:13.058
cuz I still have to write the footer,
right?

57
00:03:13.058 --> 00:03:16.360
parts[1] up here.

58
00:03:16.360 --> 00:03:23.206
Here I'm gonna say stream.on("end") so
once it is finished, run this function.

59
00:03:25.338 --> 00:03:32.317
&gt;&gt; Brian Holt: What I want it to do
is I want it to res.write(parts[1]).

60
00:03:32.317 --> 00:03:34.733
And then up here,
I'll just move this res.end in here.

61
00:03:34.733 --> 00:03:39.576
So once this has ended, once I've written
parts[1], then I want to finish, right?

62
00:03:39.576 --> 00:03:42.297
And I'll close the stream.

63
00:03:43.992 --> 00:03:45.722
&gt;&gt; Brian Holt: And
everything else stays the same.

64
00:03:52.650 --> 00:03:56.461
&gt;&gt; Brian Holt: So let's go start and
stop our server again.

65
00:03:56.461 --> 00:03:58.302
Keep in mind this is not live reloading.

66
00:03:58.302 --> 00:04:01.884
So every time that you make any sort of
modification to this, you have to stop and

67
00:04:01.884 --> 00:04:02.796
start your server.

68
00:04:02.796 --> 00:04:05.106
If you wanna have that
kind of live reload,

69
00:04:05.106 --> 00:04:07.810
you're gonna use something
called node daemon.

70
00:04:07.810 --> 00:04:09.466
I won't show you how to do it but
just know that it's out there.

71
00:04:14.323 --> 00:04:17.436
&gt;&gt; Brian Holt: So now if I refresh this
page, honestly largely, you're not gonna

72
00:04:17.436 --> 00:04:21.111
to see much of a difference, right,
because this is such a small application.

73
00:04:21.111 --> 00:04:23.409
But I wanted to show you how
you do streams, right, so

74
00:04:23.409 --> 00:04:26.285
you can have multiple kind of chunks
being loaded at the same time.

75
00:04:26.285 --> 00:04:30.820
This will be much better if
you have a large application.

76
00:04:36.255 --> 00:04:39.839
&gt;&gt; Brian Holt: Yeah, even this won't
really see cuz the chunks return so

77
00:04:39.839 --> 00:04:43.214
quickly that it's hard to
really see that happening.

78
00:04:43.214 --> 00:04:45.552
But it's a huge, huge win.

79
00:04:50.295 --> 00:04:51.678
&gt;&gt; Brian Holt: Any questions about this?

80
00:04:56.737 --> 00:04:58.476
&gt;&gt; Brian Holt: This is always
something you wanna measure,

81
00:04:58.476 --> 00:05:01.417
how much this is benefitting you,
because obviously there are trade offs.

82
00:05:01.417 --> 00:05:05.040
Usually, server-side rendering is a win,
but it is not always a win.

83
00:05:05.040 --> 00:05:09.352
In this particular application,
where this pedadoctor app is so small,

84
00:05:09.352 --> 00:05:10.958
it's probably a net lost.

85
00:05:10.958 --> 00:05:14.162
It's probably faster to just
download all the markup and

86
00:05:14.162 --> 00:05:16.030
download all the job descript and

87
00:05:16.030 --> 00:05:20.184
have them react to application
bootstrap client-side, so it depends.

88
00:05:23.367 --> 00:05:25.344
&gt;&gt; Brian Holt: Great,
that's service side rendering.

89
00:05:25.344 --> 00:05:29.394
That's really all there is to it, so,
&gt;&gt; Brian Holt: Something you can

90
00:05:29.394 --> 00:05:29.949
definitely do.

