WEBVTT

1
00:00:00.000 --> 00:00:03.010
&gt;&gt; Brian Holt: Let's go and
write our Node server now.

2
00:00:03.010 --> 00:00:09.032
So create a new file, let's save that,
and where do I put this?

3
00:00:09.032 --> 00:00:12.835
Typically you would have, this is
the source directory for our application,

4
00:00:12.835 --> 00:00:15.841
your Node server's gonna be
more complicated than one file.

5
00:00:15.841 --> 00:00:20.419
Our is not, so I'm just gonna put it in
the root directory and call it Server.js.

6
00:00:20.419 --> 00:00:24.625
But if you had multiple files, I'd
probably have like a server side folder

7
00:00:24.625 --> 00:00:28.312
and a client side code folder,
but for now, server.js is good.

8
00:00:30.874 --> 00:00:35.626
&gt;&gt; Brian Holt: Here and
we're gonna do a bunch of stuff like this,

9
00:00:35.626 --> 00:00:40.943
import Express from express,
import React from react.

10
00:00:40.943 --> 00:00:46.865
Import renderToString

11
00:00:46.865 --> 00:00:53.977
from react-dom/server.

12
00:00:53.977 --> 00:01:00.811
Import ServerLocation

13
00:01:00.811 --> 00:01:07.990
from @reach/router.

14
00:01:07.990 --> 00:01:13.646
Import fs from fs, and

15
00:01:13.646 --> 00:01:18.712
import App from ./

16
00:01:23.106 --> 00:01:28.175
&gt;&gt; Brian Holt: src/App, okay?

17
00:01:28.175 --> 00:01:30.177
So let's talk about some of
the things we imported up here.

18
00:01:30.177 --> 00:01:33.123
First thing,
I'm still using ES6 modules and

19
00:01:33.123 --> 00:01:37.702
this is gonna work in Node because
everything is being run through Babel.

20
00:01:37.702 --> 00:01:40.677
Typically, Node does not
understand modules like this.

21
00:01:40.677 --> 00:01:46.605
You typically have to do something
like const express = require express,

22
00:01:46.605 --> 00:01:49.626
common JS modules as they are called.

23
00:01:49.626 --> 00:01:53.164
But because everything is being run
through Babel I can do it like this and

24
00:01:53.164 --> 00:01:55.840
I like to keep things uniform if I can,
so this is fine.

25
00:01:58.378 --> 00:02:01.481
&gt;&gt; Brian Holt: React, I think that's self
evidence where that's coming from and

26
00:02:01.481 --> 00:02:02.194
why we need it.

27
00:02:02.194 --> 00:02:07.035
RenderToString, so we've seen render and
we've seen hydrate before, but

28
00:02:07.035 --> 00:02:09.651
what renderToString does exactly that.

29
00:02:09.651 --> 00:02:12.602
It's going to take our
Node application and

30
00:02:12.602 --> 00:02:18.035
generate the HTML as a string which then
we can insert into our HTML file, right?

31
00:02:20.699 --> 00:02:25.234
&gt;&gt; Brian Holt: Okay, ServerLocation, this
one is kind of an interesting one because

32
00:02:25.234 --> 00:02:28.647
our routing is happening
on the client side, right?

33
00:02:28.647 --> 00:02:33.543
So we wouldn't need this if we weren't
using, this is, sorry, reach/router.

34
00:02:33.543 --> 00:02:38.413
Yep, reach/router like that,
not react/router, on line 4 there.

35
00:02:38.413 --> 00:02:43.338
Make sure that is an h, or
else you're gonna have a bad day.

36
00:02:43.338 --> 00:02:49.509
ServerLocation is going to help us
do all of the client side routing.

37
00:02:49.509 --> 00:02:53.886
But it's gonna execute all of
the reach/router code inside of Node, so

38
00:02:53.886 --> 00:02:56.266
that all the routing maps up together.

39
00:02:56.266 --> 00:02:58.072
So this makes it really
easy to do routing.

40
00:02:58.072 --> 00:03:01.791
We just let reach/router handle all
of the redirects and stuff like that.

41
00:03:08.469 --> 00:03:11.659
&gt;&gt; Brian Holt: Okay,
make it's all super simple.

42
00:03:11.659 --> 00:03:17.031
Okay, underneath that I wanna say const

43
00:03:17.031 --> 00:03:22.722
PORT = process.env.PORT or 3000.

44
00:03:22.722 --> 00:03:24.656
So if you wanna deploy
this to like Azure or

45
00:03:24.656 --> 00:03:27.805
something like that, what Azure
will do when it starts up a server,

46
00:03:27.805 --> 00:03:31.146
it will pass in the port that that
application needs to be listening on.

47
00:03:31.146 --> 00:03:36.166
It's gonna be something like 80,
it could be 5,000, you don't know what

48
00:03:36.166 --> 00:03:41.351
it's gonna be, but if you don't pass into
port then go ahead and use port 3000.

49
00:03:41.351 --> 00:03:44.531
This is just a good habit
to be into with Node,

50
00:03:44.531 --> 00:03:49.655
then we're going to read in our HTML
we generate from our build process.

51
00:03:49.655 --> 00:03:54.092
So, this is going to be done with the fs

52
00:03:54.092 --> 00:03:58.533
module which stands for file system,

53
00:03:58.533 --> 00:04:03.691
fs readFileSync from dist/index.html.

54
00:04:07.498 --> 00:04:10.327
&gt;&gt; Brian Holt: .toString.

55
00:04:10.327 --> 00:04:13.280
So this is going to read
the generated mark up, right.

56
00:04:13.280 --> 00:04:16.785
Which is gonna have all the correct
file paths and all the CSS, and

57
00:04:16.785 --> 00:04:18.904
all that stuff is gonna be built for us.

58
00:04:18.904 --> 00:04:23.238
We're going to read it in here, this
comes in as a buffer and we set it out

59
00:04:23.238 --> 00:04:27.530
the string which is what this is gonna
be a string of that HTML, right?

60
00:04:27.530 --> 00:04:29.369
So it's gonna be a string of,

61
00:04:29.369 --> 00:04:34.532
see if I can just show you really quickly
what it looks like, index.html, right?

62
00:04:34.532 --> 00:04:37.544
So this has like a style path,

63
00:04:37.544 --> 00:04:42.243
I like to correct all
the stuff will be done, so

64
00:04:42.243 --> 00:04:48.046
this is going to be loaded in
the string here in this HTML.

65
00:04:48.046 --> 00:04:52.078
Const app = express,
this will start the application,

66
00:04:52.078 --> 00:04:55.780
or not start it but
allow us to start configuring it.

67
00:04:55.780 --> 00:05:02.356
First thing is we need
to use app.use stop,

68
00:05:02.356 --> 00:05:10.019
app.use/dist express.static('dist').

69
00:05:10.019 --> 00:05:14.839
So, anytime anyone makes
a request to /dist on our server,

70
00:05:14.839 --> 00:05:19.376
look at our dist directory,
insert that statically, so

71
00:05:19.376 --> 00:05:24.686
all of our HTML, CSS,
images will come from that dist directory.

72
00:05:24.686 --> 00:05:31.676
So, for every other request that comes
in we're gonna give it this handler.

73
00:05:31.676 --> 00:05:35.509
So this will be run on every other request
that doesn't hit that first handler.

74
00:05:38.434 --> 00:05:43.367
&gt;&gt; Brian Holt: Const reactMarkup =, and

75
00:05:43.367 --> 00:05:50.874
we're gonna wrap it in ServerLocation,

76
00:05:50.874 --> 00:05:57.530
url is going to be equal to req.url.

77
00:05:57.530 --> 00:06:02.444
So if someone calls with slash search
params, we need to render that page,

78
00:06:02.444 --> 00:06:02.992
right?

79
00:06:02.992 --> 00:06:07.280
So that's what ServerLocation and req url
does, is it passes slash search params

80
00:06:07.280 --> 00:06:11.337
into the ServerLocation, which will
make sure that app renders correctly.

81
00:06:14.296 --> 00:06:16.490
&gt;&gt; Brian Holt: And again,
this is being run through babel so

82
00:06:16.490 --> 00:06:18.470
we're free to jsx directly in our Node.

83
00:06:22.069 --> 00:06:27.729
&gt;&gt; Brian Holt: Then,
&gt;&gt; Brian Holt: We

84
00:06:27.729 --> 00:06:29.970
have something that needs to happen here.

85
00:06:29.970 --> 00:06:36.802
So if we go into index.html,
our code goes here, right?

86
00:06:36.802 --> 00:06:39.732
Inside of what says not rendered.

87
00:06:39.732 --> 00:06:43.226
So how do we render the string
markup that we just did,

88
00:06:43.226 --> 00:06:46.266
how do we render that
specifically into here?

89
00:06:48.100 --> 00:06:50.771
&gt;&gt; Brian Holt: There's a bunch of
ways that you can do this, and

90
00:06:50.771 --> 00:06:52.670
I'll let you pick your favorite.

91
00:06:52.670 --> 00:06:56.590
The way that we did it at Netflix,
is we actually had all of

92
00:06:56.590 --> 00:07:01.512
this living inside of React and so
React generated the whole document.

93
00:07:01.512 --> 00:07:05.018
That's fine, I think it's a little bit
overkill because that React will only be

94
00:07:05.018 --> 00:07:06.165
run server side, right?

95
00:07:07.865 --> 00:07:12.156
&gt;&gt; Brian Holt: I'm gonna give you
the absolute simplest way to do this.

96
00:07:12.156 --> 00:07:15.859
But feel free to use something like
Lodash templating or handle bars,

97
00:07:15.859 --> 00:07:19.389
like any sort of templating language
would make this pretty easy.

98
00:07:19.389 --> 00:07:23.333
For our specific used
case we have two parts.

99
00:07:23.333 --> 00:07:26.337
The part that comes
before not rendered and

100
00:07:26.337 --> 00:07:29.767
the part that comes after not rendered,
right?

101
00:07:29.767 --> 00:07:33.349
And then when everything else
goes in the middle of that.

102
00:07:33.349 --> 00:07:38.411
Well, this comes in as a string and
if I have a before part and

103
00:07:38.411 --> 00:07:43.695
an after part and a delimiter,
can I just use string.split?

104
00:07:43.695 --> 00:07:45.922
Sure, why not, it will work.

105
00:07:47.644 --> 00:07:49.929
&gt;&gt; Brian Holt: It will be fast too.

106
00:07:49.929 --> 00:07:54.774
So if I come in here to server.js, and
often times what people do is they'll

107
00:07:54.774 --> 00:07:58.865
just have two different strings
exported from some document and

108
00:07:58.865 --> 00:08:01.993
then just read from that,
and that's fine too.

109
00:08:01.993 --> 00:08:09.784
But what I'm gonna do is I'm gonna
say const parts = html.split.

110
00:08:09.784 --> 00:08:12.575
And actually, we can do this outside of
this cuz this doesn't have to happen.

111
00:08:12.575 --> 00:08:17.554
We can do this once cuz it never changes,

112
00:08:17.554 --> 00:08:22.686
so up here, const parts = html.split.

113
00:08:22.686 --> 00:08:25.721
And we're gonna split around not rendered.

114
00:08:30.586 --> 00:08:33.530
&gt;&gt; Brian Holt: Right, so this is gonna
give me back two things, everything that

115
00:08:33.530 --> 00:08:37.025
comes before not rendered, everything
else that comes after not rendered.

116
00:08:37.025 --> 00:08:40.331
And because you use split,
it doesn't keep not rendered in there,

117
00:08:40.331 --> 00:08:41.729
cuz that's the delimiter.

118
00:08:43.577 --> 00:08:44.882
&gt;&gt; Brian Holt: Makes sense?

119
00:08:44.882 --> 00:08:48.315
It's a JavaScript thing,
there's nothing specific to React here.

120
00:08:48.315 --> 00:08:52.777
So now I have two parts here and
I can say res.send.

121
00:08:56.409 --> 00:09:03.052
&gt;&gt; Brian Holt: And I'm gonna use a HTML
template stream with the back ticks,

122
00:09:03.052 --> 00:09:07.028
first part is gonna be parts[0].

123
00:09:07.028 --> 00:09:12.603
Second part is gonna be renderToString

124
00:09:16.187 --> 00:09:18.522
&gt;&gt; Brian Holt: reactMarkup.

125
00:09:18.522 --> 00:09:20.901
And the third part is gonna be parts[1]

126
00:09:24.815 --> 00:09:28.002
&gt;&gt; Brian Holt: And that works.

127
00:09:28.002 --> 00:09:33.624
So now at the end here after I send
that I can just say res.end, that's it.

128
00:09:38.470 --> 00:09:40.570
&gt;&gt; Brian Holt: Just throw
in here console.log

129
00:09:44.222 --> 00:09:46.056
&gt;&gt; Brian Holt: Listening on port, just so

130
00:09:46.056 --> 00:09:50.679
we know that the server is up and
I need to make that a template string,

131
00:09:50.679 --> 00:09:52.135
not a normal string.

132
00:09:55.402 --> 00:10:03.716
&gt;&gt; Brian Holt: Okay, and then at the very
last thing is app.listen on PORT, okay?

133
00:10:07.591 --> 00:10:10.669
&gt;&gt; Brian Holt: So
let's go see how that works,

134
00:10:10.669 --> 00:10:14.660
hopefully it just works, npm run start.

135
00:10:17.579 --> 00:10:20.296
&gt;&gt; Brian Holt: So it's gonna run
that build process first again,

136
00:10:20.296 --> 00:10:22.633
if you're on Windows
npm run build first and

137
00:10:22.633 --> 00:10:29.155
then run npm run start
&gt;&gt; Brian Holt: You can see

138
00:10:29.155 --> 00:10:34.362
there that`s everything that it generated,
&gt;&gt; Brian Holt: Throw error,

139
00:10:34.362 --> 00:10:35.932
one we gonna solve.

140
00:10:47.348 --> 00:10:50.844
&gt;&gt; Brian Holt: I think
I did this wrong here.

141
00:10:50.844 --> 00:10:56.831
So I just called the server.js right here,
that's gotta be correct.

142
00:10:59.898 --> 00:11:04.035
&gt;&gt; Brian Holt: So that's the part,
I took out service/index.js and

143
00:11:04.035 --> 00:11:06.239
I just make this server.js.

144
00:11:07.863 --> 00:11:11.638
&gt;&gt; Brian Holt: Okay, so
now we're gonna do npm run start again.

145
00:11:19.745 --> 00:11:24.179
&gt;&gt; Brian Holt: Listening on 3000.

146
00:11:24.179 --> 00:11:30.912
So now, hopefully I can just come in
here to 3000 and it's working, right?

147
00:11:30.912 --> 00:11:34.005
Our application works,
all that stuff is working, so

148
00:11:34.005 --> 00:11:38.191
React is obviously working cuz it's
doing all that client set handling.

149
00:11:38.191 --> 00:11:42.176
But let's take a look at what
happens if I look at interact here.

150
00:11:42.176 --> 00:11:46.103
And I'm going to,
let's just throttle this.

151
00:11:47.271 --> 00:11:52.114
&gt;&gt; Brian Holt: So we refresh the page,
notice it comes in with complete markup.

152
00:11:52.114 --> 00:11:59.208
Let's even go one step further and
say, settings, disable JavaScript.

153
00:12:11.099 --> 00:12:15.991
&gt;&gt; Brian Holt: No throttling there we go,
Settings, and disable JavaScript.

154
00:12:18.643 --> 00:12:22.030
&gt;&gt; Brian Holt: So now JavaScript
is disabled on this page, right?

155
00:12:22.030 --> 00:12:23.178
So this actually is not gonna work.

156
00:12:23.178 --> 00:12:26.960
If I choose dog, it's not going to go
request anything because it has no code

157
00:12:26.960 --> 00:12:30.560
governing that, but
this is complete markup, right?

158
00:12:30.560 --> 00:12:34.360
Go even one step further, you can
view source up here and you can see

159
00:12:34.360 --> 00:12:38.600
coming in here is like you have the label,
and the value, and all that kind of stuff.

160
00:12:38.600 --> 00:12:42.710
On the first page load it appears to
load much quicker because you get

161
00:12:42.710 --> 00:12:43.910
complete markup.

162
00:12:43.910 --> 00:12:46.010
So you're immediately
showing the user something,

163
00:12:46.010 --> 00:12:49.720
this is a big win for
perceived performance, right?

164
00:12:49.720 --> 00:12:53.872
The page is not actually loading any
faster, if we're gonna get really into it,

165
00:12:53.872 --> 00:12:56.390
technically server side
rendering it's not free, right?

166
00:12:56.390 --> 00:12:59.000
It does have to do some rendering and
some work at the back-end.

167
00:12:59.000 --> 00:13:01.700
So you might be slowing down your
time to interact a little bit,

168
00:13:01.700 --> 00:13:05.430
but you can be a big winner you show
something to the user right away.

169
00:13:05.430 --> 00:13:08.890
And so the user will immediately see
something to have to start deciding what

170
00:13:08.890 --> 00:13:09.730
they wanna do, right?

171
00:13:09.730 --> 00:13:14.414
Like am looking at this page, is like
do I really wanna search in Seattle?

172
00:13:14.414 --> 00:13:17.077
And by the time you click on here and
start typing in here,

173
00:13:17.077 --> 00:13:19.040
hopefully you've loaded, right?

174
00:13:19.040 --> 00:13:23.392
Because that's good half second that
someone has to take make a decision and

175
00:13:23.392 --> 00:13:24.625
click on something.

176
00:13:24.625 --> 00:13:29.632
So it's a big win for,
cuz it feels like it's loaded instantly.

