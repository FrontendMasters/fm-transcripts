WEBVTT

1
00:00:00.772 --> 00:00:04.366
&gt;&gt; Brian Holt: So
that's gonna conclude our time on tests.

2
00:00:04.366 --> 00:00:07.827
Does anyone have any
questions about tests?

3
00:00:07.827 --> 00:00:12.683
&gt;&gt; Speaker 2: So with the fact that you
were getting 16% coverage with the modal

4
00:00:12.683 --> 00:00:16.261
to actually properly test
that would you have to,

5
00:00:16.261 --> 00:00:21.560
because you're importing it into
the file that you are starting to test.

6
00:00:21.560 --> 00:00:25.970
Would you have to make another instance of

7
00:00:25.970 --> 00:00:31.136
the specific component or
meaning the modal, or

8
00:00:31.136 --> 00:00:37.059
is there a way within there it
has the relative use of it?

9
00:00:37.059 --> 00:00:41.247
&gt;&gt; Brian Holt: So, the correct answer
to your question would be that your

10
00:00:41.247 --> 00:00:44.757
Details.test.js should not test Modal.js.

11
00:00:44.757 --> 00:00:46.876
You should not rely on
details to test modal.

12
00:00:46.876 --> 00:00:49.051
You should have a separate test for

13
00:00:49.051 --> 00:00:52.809
Modal.test.js that covers
everything inside of Modal.

14
00:00:52.809 --> 00:00:57.987
So almost every component probably
should have its own test.

15
00:00:57.987 --> 00:01:01.356
That kind of answer your question?

16
00:01:01.356 --> 00:01:03.172
Any questions from online, Mark?

17
00:01:03.172 --> 00:01:03.938
Or are we good?

18
00:01:03.938 --> 00:01:09.091
&gt;&gt; Mark: What factors
do you use to determine

19
00:01:09.091 --> 00:01:13.053
which components to test?

20
00:01:13.053 --> 00:01:17.597
&gt;&gt; Brian Holt: That's a good question,
so I'm going to give you a giant grain

21
00:01:17.597 --> 00:01:22.164
of salt about I do not have typical
opinions about testing UIs.

22
00:01:22.164 --> 00:01:26.714
So take everything I'm about to tell you
as an atypical response to this question,

23
00:01:26.714 --> 00:01:28.605
not reflective of the community.

24
00:01:28.605 --> 00:01:31.485
For the most part I try to tell
you what the community thinks.

25
00:01:31.485 --> 00:01:37.331
In this case, what I think is I do not
test my React components hardly at all.

26
00:01:37.331 --> 00:01:40.851
And the reason being is when I was
working at Netflix for example,

27
00:01:40.851 --> 00:01:42.652
our UI was in such a state of flux.

28
00:01:42.652 --> 00:01:45.738
Every week we're pushing new
components and new routes, and

29
00:01:45.738 --> 00:01:48.053
new things that we're
constantly testing and

30
00:01:48.053 --> 00:01:51.814
refactoring all these kind of things so,
our UI was constantly changing.

31
00:01:51.814 --> 00:01:54.049
So, spending any amount
of time writing test for

32
00:01:54.049 --> 00:01:57.334
these would mean they're going to
be throwing away next week, right?

33
00:01:57.334 --> 00:02:02.048
So I did not write every many tests for
my React components.

34
00:02:02.048 --> 00:02:05.114
You might be in a different situation
where you're like working at maybe like

35
00:02:05.114 --> 00:02:07.898
a bank or something like that where
you're gonna write a component and

36
00:02:07.898 --> 00:02:09.233
it's gonna live for five years.

37
00:02:09.233 --> 00:02:12.743
In that case, yeah, you should
go write some tests for that and

38
00:02:12.743 --> 00:02:16.397
make sure that all the functions work,
but when I was at Netflix.

39
00:02:16.397 --> 00:02:21.109
We will be wasting time by writing
too many tests for React components.

40
00:02:21.109 --> 00:02:27.280
So in my opinion the way that I do
tests is I write multiples right,

41
00:02:27.280 --> 00:02:33.244
so I have maybe like an API module and
I test the hell out of that.

42
00:02:33.244 --> 00:02:35.597
Because no matter what if I'm changing,

43
00:02:35.597 --> 00:02:38.834
UI components that API
client's gonna live on, right?

44
00:02:38.834 --> 00:02:40.515
I'm gonna use that API clients, so

45
00:02:40.515 --> 00:02:44.159
I test all of my modules to exhaustion,
I test like all the various branches,

46
00:02:44.159 --> 00:02:47.369
I try to have like a 100% test
coverage on those things, right.

47
00:02:47.369 --> 00:02:50.808
All that error cases,
all that kind of stuff.

48
00:02:50.808 --> 00:02:55.722
I might write some snap shot components
for something like the The navigation or

49
00:02:55.722 --> 00:02:57.565
the header things like that.

50
00:02:57.565 --> 00:03:00.416
The footer.
Things that are not changing too much.

51
00:03:00.416 --> 00:03:04.855
Then I was trying to have a couple
like end to end tests on cypress or

52
00:03:04.855 --> 00:03:07.212
selenium, something like that.

53
00:03:07.212 --> 00:03:09.649
Those are so painful to maintain.

54
00:03:09.649 --> 00:03:13.203
You only want to have one or
two that are extremely critical.

55
00:03:13.203 --> 00:03:14.705
This had covered things like,

56
00:03:14.705 --> 00:03:18.114
maybe if you're doing any commerce
website that would be check out and

57
00:03:18.114 --> 00:03:21.612
add to cart like, very, very essential
core things to your business.

58
00:03:21.612 --> 00:03:25.462
But I'm not gonna have a test that
you can update your password,

59
00:03:25.462 --> 00:03:28.039
it's something that's less important.

60
00:03:28.039 --> 00:03:32.710
So, I wanna have the bare minimum amount
of test that give me an assurance that if

61
00:03:32.710 --> 00:03:37.472
I go out, I'm not gonna break things,
and that's generally testing modules.

62
00:03:37.472 --> 00:03:42.176
So if your components unless it's
a long living component I tend not to

63
00:03:42.176 --> 00:03:43.620
test them very much.

64
00:03:43.620 --> 00:03:45.981
Unless I'm having a lot of
bugs with one of them, and

65
00:03:45.981 --> 00:03:49.268
it is a long living component then
I'll go write some more test, right?

66
00:03:49.268 --> 00:03:53.400
So I tend to write test that
cover bug fixes as well.

67
00:03:53.400 --> 00:03:58.125
Generally because it helps me assure
myself that I have fixed the bug.

68
00:04:00.576 --> 00:04:03.214
&gt;&gt; Brian Holt: So that's kind of around
about way of saying I don't test UIs

69
00:04:03.214 --> 00:04:03.738
very much.

70
00:04:05.921 --> 00:04:09.412
&gt;&gt; Brian Holt: But I invite you to form
your own opinion on the matter and

71
00:04:09.412 --> 00:04:12.977
like I said I'm against
the community in this particular

72
00:04:12.977 --> 00:04:15.222
matter
&gt;&gt; Brian Holt: So

73
00:04:15.222 --> 00:04:19.135
that got us through testing with React.

74
00:04:19.135 --> 00:04:23.046
In previous versions of this course I've
gone a little bit more into depth as well.

75
00:04:23.046 --> 00:04:25.101
If you wanna check that out,
and I used Enzyme.

76
00:04:25.101 --> 00:04:30.651
Enzyme is a very common library used for
testing React libraries.

77
00:04:30.651 --> 00:04:32.850
It's put up by AirBnB, it's really good.

78
00:04:32.850 --> 00:04:37.673
So if you want to learn how to use
enzyme with just check out B3,

79
00:04:37.673 --> 00:04:40.586
everything from the previous version

80
00:04:40.586 --> 00:04:45.514
of complete [INAUDIBLE] in
Frontend Masters has all of that in it.

