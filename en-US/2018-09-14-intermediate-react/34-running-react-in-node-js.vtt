WEBVTT

1
00:00:00.000 --> 00:00:03.854
&gt;&gt; Brian Holt: So here's the thought
process I need you work through in

2
00:00:03.854 --> 00:00:04.679
your head.

3
00:00:04.679 --> 00:00:09.465
We're gonna be running our
React application in Node.

4
00:00:09.465 --> 00:00:14.965
So anything that references window
doesn't work in Node, because window

5
00:00:14.965 --> 00:00:20.916
doesn't exist, right, it's not in
a browser so you can't reference window.

6
00:00:20.916 --> 00:00:26.031
So for example, if I come in here
to App.js, down here at the bottom,

7
00:00:26.031 --> 00:00:29.700
document, which is on window,
doesn't exist.

8
00:00:29.700 --> 00:00:33.870
ThereÂ´s no document in the Node setting.

9
00:00:33.870 --> 00:00:37.485
So we need to split this out for code
that will only run in the browser, and

10
00:00:37.485 --> 00:00:40.627
then everything else will be run in Node,
for the first time for

11
00:00:40.627 --> 00:00:42.019
the first render, right?

12
00:00:42.019 --> 00:00:46.021
Cuz what we're gonna to do now is,
we are going to render our entire React

13
00:00:46.021 --> 00:00:49.760
application out to static HTML and
serve that on the first request so

14
00:00:49.760 --> 00:00:52.658
that the user immediately sees something,
right?

15
00:00:52.658 --> 00:00:56.781
The first render will already be done, and
then React downloads, and bootstraps, and

16
00:00:56.781 --> 00:00:58.129
does all that kind of stuff.

17
00:00:58.129 --> 00:01:00.270
It will just take over
the existing markup.

18
00:01:00.270 --> 00:01:04.678
This is called server-side rendering,
or SSR often for short, or universal

19
00:01:04.678 --> 00:01:09.103
rendering, or isomorphic rendering,
there's a bunch of dumb names for it.

20
00:01:09.103 --> 00:01:12.184
It's just taking React and
rendering a node,

21
00:01:12.184 --> 00:01:14.952
it's not anything more fancy than that.

22
00:01:17.591 --> 00:01:20.180
&gt;&gt; Brian Holt: I hate dumb
computer science, stupid.

23
00:01:20.180 --> 00:01:22.971
Isomorphic, that's just the most
pretentious thing I've ever heard.

24
00:01:22.971 --> 00:01:27.398
[LAUGH] So let's get into this.

25
00:01:27.398 --> 00:01:32.097
So I'm gonna come in here and I'm gonna
create a new file here inside of,

26
00:01:32.097 --> 00:01:33.265
where do I put it?

27
00:01:37.038 --> 00:01:39.976
&gt;&gt; Brian Holt: Actually,
let's do this first.

28
00:01:39.976 --> 00:01:44.833
Inside of source,
I'm gonna create a new file and

29
00:01:44.833 --> 00:01:48.542
I'm gonna call it, ClientApp.js.

30
00:01:48.542 --> 00:01:52.905
So inside ClientApp is where we're
gonna do all of our browser stuff, so

31
00:01:52.905 --> 00:01:55.417
ClientApp will not be run inside of Node.

32
00:01:55.417 --> 00:01:59.311
So this will actually do the rendering
to the DOM, and anything that you need,

33
00:01:59.311 --> 00:01:59.901
excuse me,

34
00:01:59.901 --> 00:02:03.692
anything that you need to do that's
browser-specific can be done in here.

35
00:02:03.692 --> 00:02:06.584
And a good example of what that might
be would be your analytics, right?

36
00:02:06.584 --> 00:02:10.753
You're not gonna fire analytics for
the browser inside of Node, so

37
00:02:10.753 --> 00:02:12.884
this could be done here just fine.

38
00:02:12.884 --> 00:02:16.918
For our purposes, we're just going
to import React from 'react';.

39
00:02:20.366 --> 00:02:26.031
&gt;&gt; Brian Holt: import { render },
&gt;&gt; Brian Holt: Sorry,

40
00:02:26.031 --> 00:02:28.900
import { render } from 'react-dom'.

41
00:02:31.203 --> 00:02:37.696
&gt;&gt; Brian Holt: And
import the App from ' ./' App.

42
00:02:37.696 --> 00:02:38.837
And actually,
we're not gonna use render here.

43
00:02:38.837 --> 00:02:42.360
We had been previously using render
to render to the DOM, right, but

44
00:02:42.360 --> 00:02:45.174
we're actually gonna use
something called hydrate.

45
00:02:47.963 --> 00:02:51.859
&gt;&gt; Brian Holt: So what's different
between hydrate and render?

46
00:02:51.859 --> 00:02:54.991
hydrate is different,
because what hydrate does is it looks for

47
00:02:54.991 --> 00:02:59.167
existing markup to take over an existing
application, whereas render is gonna say,

48
00:02:59.167 --> 00:03:01.785
this is blank,
replace everything inside of there.

49
00:03:01.785 --> 00:03:06.606
This is new to React 16,
previously it was render in both cases.

50
00:03:06.606 --> 00:03:08.316
So that's why we're gonna use hydrate now.

51
00:03:08.316 --> 00:03:17.142
So hydrate,
&gt;&gt; Brian Holt: (&lt;App /&gt;,

52
00:03:17.142 --> 00:03:23.204
document.getElementById("root"));.

53
00:03:27.330 --> 00:03:28.746
&gt;&gt; Brian Holt: So at ./App.

54
00:03:37.878 --> 00:03:41.301
&gt;&gt; Brian Holt: And this will get us
bootstrapped on the client, right?

55
00:03:41.301 --> 00:03:45.175
Now, this is going to be our entry
point to the application, not App.

56
00:03:45.175 --> 00:03:49.695
App is gonna just be another
component that exports a module.

57
00:03:49.695 --> 00:03:54.534
So we actually need to go into index.html.

58
00:03:54.534 --> 00:03:59.036
Here it says,
script equals src="./App.js".

59
00:03:59.036 --> 00:04:01.839
We're actually gonna
make this ClientApp.js,

60
00:04:01.839 --> 00:04:04.715
cuz this is now the entry
point to our application.

61
00:04:10.198 --> 00:04:12.783
&gt;&gt; Brian Holt: And if you remember,
this is what Parcel's reading from to

62
00:04:12.783 --> 00:04:15.589
figure out where to start, so
that's what that's important.

63
00:04:19.932 --> 00:04:25.674
&gt;&gt; Brian Holt: Okay, so
now I need you to go to App.js.

64
00:04:25.674 --> 00:04:29.665
Down here at the bottom we have this
ReactDOM.render business down here.

65
00:04:29.665 --> 00:04:34.340
Not gonna do that anymore, I'm just
gonna say, export default App;, and

66
00:04:34.340 --> 00:04:38.226
this will be pulled into ClientApp for
the rendering process.

67
00:04:42.707 --> 00:04:44.710
&gt;&gt; Brian Holt: So you can come up
here as well and delete ReactDOM,

68
00:04:44.710 --> 00:04:46.118
cuz we're not using that anymore.

69
00:04:55.065 --> 00:04:56.210
&gt;&gt; Brian Holt: Okay?

70
00:04:57.380 --> 00:05:01.120
&gt;&gt; Brian Holt: One more thing that we
have to do, let's go into Modal.js.

71
00:05:04.013 --> 00:05:06.228
&gt;&gt; Brian Holt: This is where
we're doing the portal rendering.

72
00:05:06.228 --> 00:05:07.493
We have a problem here,

73
00:05:07.493 --> 00:05:11.242
because inside of Modal we're
referencing document again, right?

74
00:05:11.242 --> 00:05:16.155
So if we try and import Modal.js
we're gonna crash the node, right?

75
00:05:16.155 --> 00:05:19.440
Because it's referencing
document.getElementById(), so

76
00:05:19.440 --> 00:05:21.118
how are we gonna get around that?

77
00:05:23.162 --> 00:05:25.516
&gt;&gt; Brian Holt: It's actually not too bad.

78
00:05:25.516 --> 00:05:30.012
We're gonna move this, not to the
constructor but into componentDidMount().

79
00:05:32.370 --> 00:05:35.945
&gt;&gt; Brian Holt: And rather than saying,
const modal = that, we're gonna say,

80
00:05:35.945 --> 00:05:37.449
this.modalRoot = that.

81
00:05:40.538 --> 00:05:46.403
&gt;&gt; Brian Holt: And
this.modalRoot.appendChild(this.el).

82
00:05:46.403 --> 00:05:49.854
And again, this constructor still
might be run inside of React.

83
00:05:49.854 --> 00:05:52.853
We don't want that to crash if
you ever construct the Modal, so

84
00:05:52.853 --> 00:05:56.773
let's just move this from the constructor
into componentDidMount() as well.

85
00:05:58.662 --> 00:06:01.199
&gt;&gt; Brian Holt: Like that.

86
00:06:01.199 --> 00:06:07.049
And here, now this is just this,
oops, excuse me, this.modalRoot.

87
00:06:07.049 --> 00:06:11.042
Now, why did this fix everything?

88
00:06:11.042 --> 00:06:14.218
Well, when is componentDidMount() run?

89
00:06:14.218 --> 00:06:16.634
When it actually enters the DOM for
the first time.

90
00:06:16.634 --> 00:06:21.617
So if you think about it, it's never
going to enter the DOM in Node, right?

91
00:06:21.617 --> 00:06:25.117
It's gonna go through the first render
process but it doesn't ever actually enter

92
00:06:25.117 --> 00:06:28.018
the DOM, so anything that you do
inside of componentDidMount(),

93
00:06:28.018 --> 00:06:30.131
you're guaranteed to be
in the browser context.

94
00:06:30.131 --> 00:06:32.537
So anything you need to do browser-based,

95
00:06:32.537 --> 00:06:36.053
you can throw it into
componentDidMount() and that's fine.

