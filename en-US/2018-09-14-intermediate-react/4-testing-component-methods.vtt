WEBVTT

1
00:00:00.120 --> 00:00:02.210
&gt;&gt; Brian Holt: Okay, so
I wanna go a little bit deeper.

2
00:00:04.440 --> 00:00:09.710
Let's go back into our details.test.js.

3
00:00:09.710 --> 00:00:14.494
I wanna make sure that when
toggle motor was called that show

4
00:00:14.494 --> 00:00:18.060
motor becomes toggled, right.

5
00:00:18.060 --> 00:00:22.264
So, you can actually do a little
bit more in-depth testing here.

6
00:00:22.264 --> 00:00:27.402
So I'm gonna say shows modal
when togggleModal is called.

7
00:00:27.402 --> 00:00:32.631
Okay.

8
00:00:32.631 --> 00:00:38.226
So I'm gonna say const
c = create details and

9
00:00:38.226 --> 00:00:41.180
I'm gonna say search.

10
00:00:43.000 --> 00:00:45.400
We'll just give it an empty function,

11
00:00:45.400 --> 00:00:49.020
so it will happily construct
itself cuz it requires one.

12
00:00:51.680 --> 00:00:55.529
Then, I'm gonna say const
instance = c.getInstance.

13
00:00:55.529 --> 00:01:01.923
So, this is actually giving me back
an instance of my particular element,

14
00:01:01.923 --> 00:01:06.600
so I can actually manipulate
it directly here in node.

15
00:01:06.600 --> 00:01:09.900
So, if I'm gonna say thing,

16
00:01:09.900 --> 00:01:15.314
expect instance.state.showModal
to be false

17
00:01:15.314 --> 00:01:20.860
Then I'm gonna say
instance.toggleModal which

18
00:01:20.860 --> 00:01:27.460
is going to be that function
that we have inside of details,

19
00:01:27.460 --> 00:01:31.963
just to show you again, it's this one.

20
00:01:31.963 --> 00:01:33.482
Line 40 here, inside the details.

21
00:01:36.586 --> 00:01:41.918
&gt;&gt; Brian Holt: ToggleModal And I'm gonna

22
00:01:41.918 --> 00:01:51.433
say expect(instance.state.showModal).

23
00:01:51.433 --> 00:01:54.847
toBe(true).

24
00:01:58.905 --> 00:02:01.808
&gt;&gt; Brian Holt: So basically on
construction, I expect not to show

25
00:02:01.808 --> 00:02:05.667
the modal and then after I call
toggleModal, I expect it to be true.

26
00:02:13.260 --> 00:02:14.339
&gt;&gt; Brian Holt: Run tests.

27
00:02:17.059 --> 00:02:19.384
&gt;&gt; Brian Holt: And
you can see that should pass.

28
00:02:19.384 --> 00:02:23.990
Now the first thing, whenever I write
a test that pass, personally something in

29
00:02:23.990 --> 00:02:27.665
just my own personal thing is I
wanna make sure I can make it fail.

30
00:02:27.665 --> 00:02:30.696
I want to make sure that it fails and
I expect it to fail.

31
00:02:30.696 --> 00:02:33.888
So an easy way to do this would be to

32
00:02:33.888 --> 00:02:38.790
go into Details If I turn
this state wherever it is.

33
00:02:41.060 --> 00:02:41.660
Here.

34
00:02:41.660 --> 00:02:44.370
State equals showModal false.

35
00:02:44.370 --> 00:02:48.350
If I turn this to true we would
expect it to not pass the test right?

36
00:02:48.350 --> 00:02:50.306
Because on construction
showModal will be true.

37
00:02:55.838 --> 00:02:59.102
&gt;&gt; Brian Holt: Lo and behold,
it does fail because it's gonna fail that

38
00:02:59.102 --> 00:03:03.251
first assertion, then on construction,
it's gonna be false, okay?

39
00:03:03.251 --> 00:03:07.241
One more time just to make sure we
can make it fail the other way is I'm

40
00:03:07.241 --> 00:03:10.461
gonna make it so
that I forgot this exclamation point,

41
00:03:10.461 --> 00:03:12.707
which is not going to flip it, right?

42
00:03:12.707 --> 00:03:14.412
You would expect it to
fail the second assertion.

43
00:03:19.136 --> 00:03:21.464
&gt;&gt; Brian Holt: And you can see here
now it fails the second assertion.

44
00:03:26.662 --> 00:03:30.622
&gt;&gt; Brian Holt: So expected to be true and
what it received was false.

45
00:03:30.622 --> 00:03:35.183
Another thing I like with Jest is it gives
you succinct things like this is the one

46
00:03:35.183 --> 00:03:39.472
that failed, like this to be assertion
failed and I expect it to get true and

47
00:03:39.472 --> 00:03:40.242
I got false.

48
00:03:40.242 --> 00:03:45.258
Now with booleans that's obvious how
it failed, right, but if you have like

49
00:03:45.258 --> 00:03:50.526
long objects of configurations, it'll
give you the actual value that failed.

50
00:03:50.526 --> 00:03:56.533
So go back in, save it
&gt;&gt; Brian Holt: And run npm test again.

