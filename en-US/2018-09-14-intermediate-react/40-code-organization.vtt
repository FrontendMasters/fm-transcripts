WEBVTT

1
00:00:00.091 --> 00:00:02.069
&gt;&gt; Brian Holt: Another just
really brief section here.

2
00:00:02.069 --> 00:00:05.870
Last time when I gave this course and
several time's I've given this course,

3
00:00:05.870 --> 00:00:09.845
people say, how do you choose to organize
your code when you are making large scale

4
00:00:09.845 --> 00:00:10.958
React applications?

5
00:00:10.958 --> 00:00:15.561
So one, I'm going to show you the way I
choose to do this which is based on my

6
00:00:15.561 --> 00:00:17.358
experience writing React.

7
00:00:17.358 --> 00:00:20.024
But there's no prescribed way.

8
00:00:20.024 --> 00:00:21.303
There's no right way to do this.

9
00:00:21.303 --> 00:00:24.457
It's like asking someone,
how do you set up a Java project?

10
00:00:24.457 --> 00:00:26.545
Well, there are 19 million ways.

11
00:00:26.545 --> 00:00:29.357
There are some best practices around it,
but

12
00:00:29.357 --> 00:00:32.028
there's not necessarily one way to do it.

13
00:00:32.028 --> 00:00:36.753
So I'm going to show you one way,
which is opinionated and

14
00:00:36.753 --> 00:00:40.910
you should definitely take
it with a grain of salt.

15
00:00:40.910 --> 00:00:44.123
So I made an example application
here called photo gallery and

16
00:00:44.123 --> 00:00:45.433
it's been open source.

17
00:00:45.433 --> 00:00:47.492
You can see it's actually, how old is it?

18
00:00:47.492 --> 00:00:48.530
It's over a year old.

19
00:00:48.530 --> 00:00:49.660
It's probably about 18 months old.

20
00:00:51.320 --> 00:00:52.320
Well, maybe not quite that.

21
00:00:53.750 --> 00:00:58.112
So this is actually a Preact application,
but it doesn't make any difference.

22
00:00:58.112 --> 00:00:59.185
In the previous section,

23
00:00:59.185 --> 00:01:02.174
I showed you that there's little
difference between Preact and React.

24
00:01:02.174 --> 00:01:08.451
So this is laid out exactly how a layout
of React application, it's the same thing.

25
00:01:08.451 --> 00:01:11.612
It's also written in flow type and I'm
about to show you how to do type script.

26
00:01:11.612 --> 00:01:15.340
But again, those two are so similar,
it doesn't really make a difference.

27
00:01:15.340 --> 00:01:18.570
The core here that I'm trying to
communicate to you is this is how I would

28
00:01:18.570 --> 00:01:20.310
layout and organize a project.

29
00:01:22.320 --> 00:01:24.550
So feel free to check this out,
it's on my GitHub.

30
00:01:27.190 --> 00:01:28.540
Same source directory.

31
00:01:30.850 --> 00:01:33.375
So here, I have one browser entry.

32
00:01:33.375 --> 00:01:36.662
This is what the actual entry
to the project is it and

33
00:01:36.662 --> 00:01:39.499
it's just imports from app and renders it.

34
00:01:39.499 --> 00:01:43.403
And then if you look here inside
of the components directory,

35
00:01:43.403 --> 00:01:45.967
every component got its own directory.

36
00:01:45.967 --> 00:01:49.786
So if I click into, for
example, the navigation link,

37
00:01:49.786 --> 00:01:51.747
it has the navigation link.

38
00:01:51.747 --> 00:01:56.763
It has its tests and actually let's look
at a different one like PhotoStream.

39
00:01:56.763 --> 00:01:58.782
Let's look at this one.

40
00:01:58.782 --> 00:02:01.526
All the CSS for PhotoStream,
all of it's in here.

41
00:02:01.526 --> 00:02:05.948
The entire world of PhotoStream lives
inside the PhotoStream directory,

42
00:02:05.948 --> 00:02:09.963
including its test as well and
snapshots and all that kind of stuff.

43
00:02:12.095 --> 00:02:13.488
&gt;&gt; Brian Holt: And
then here, this index.js.

44
00:02:13.488 --> 00:02:15.600
All it does is import PhotoStream and
export it.

45
00:02:15.600 --> 00:02:18.812
So that if I look here
instead of PhotoStream.jsx,

46
00:02:18.812 --> 00:02:22.754
if you remember index.js,
if you don't specify a directory,

47
00:02:22.754 --> 00:02:27.510
it'll automatically import
the index.js from that directory.

48
00:02:27.510 --> 00:02:32.058
So it makes these paths really nice.

49
00:02:32.058 --> 00:02:34.783
And this entire application,

50
00:02:34.783 --> 00:02:41.068
all it is like a iPhoto showing
a photo gallery kind of thing, right?

51
00:02:41.068 --> 00:02:41.985
Hey, photo gallery.

52
00:02:41.985 --> 00:02:43.962
It's the name of the application.

53
00:02:43.962 --> 00:02:46.246
So here's why I like this.

54
00:02:46.246 --> 00:02:48.002
This optimizes for deletability.

55
00:02:48.002 --> 00:02:51.993
The moment that I stopped using
the popover, I just delete that directory.

56
00:02:51.993 --> 00:02:54.287
All of its tests, all of its styling,

57
00:02:54.287 --> 00:02:58.820
all of the code that was associated with
it just goes out the window with it.

58
00:02:58.820 --> 00:03:03.471
Or if I have something that has
children components, those will be

59
00:03:03.471 --> 00:03:08.466
directories inside of PhotoStream,
PhotoStream photo or whatever.

60
00:03:08.466 --> 00:03:10.833
So to me, this is a good way
of organizing a project.

61
00:03:10.833 --> 00:03:18.050
Because it makes it really easy to
componentize in your head what goes where.

62
00:03:18.050 --> 00:03:19.527
It makes it very obvious and

63
00:03:19.527 --> 00:03:24.420
it makes it very easy to keep your project
free of dead code, and free of dead CSS.

64
00:03:24.420 --> 00:03:27.790
How many of you have dead
CSS in your applications?

65
00:03:27.790 --> 00:03:31.300
All of you, myself included.

66
00:03:31.300 --> 00:03:37.255
When I started LinkedIn,
I think they had 2 megabytes of CSS.

67
00:03:37.255 --> 00:03:41.385
That is ridiculous,
because it's hard to delete CSS.

68
00:03:41.385 --> 00:03:43.641
Because we have no idea what's
being used and what's not.

69
00:03:43.641 --> 00:03:48.845
If you do something like this where
if you have PhotoStream.css like it's

70
00:03:48.845 --> 00:03:53.735
all in here and I just delete
the directory, all the styles go with it.

71
00:03:53.735 --> 00:03:57.216
So you never have dead CSS or
if you're doing something like a motion,

72
00:03:57.216 --> 00:03:59.347
then it's just built into the component.

73
00:03:59.347 --> 00:04:01.576
And so when you delete the component,
it goes with it as well.

74
00:04:01.576 --> 00:04:08.951
Dead CSS is a problem for sure and
this helps mitigate that problem.

75
00:04:08.951 --> 00:04:09.901
Any questions about that?

76
00:04:09.901 --> 00:04:13.002
That's just like a high-level
architecture of how I like to do it.

77
00:04:13.002 --> 00:04:17.311
I'll keep things like
common styles in here, so

78
00:04:17.311 --> 00:04:20.261
you can see I keep colors in here.

79
00:04:20.261 --> 00:04:23.522
There's some test helpers that
I've put in to here as well and

80
00:04:23.522 --> 00:04:27.299
you can keep that kind of common like
top level stuff in there, as well.

81
00:04:27.299 --> 00:04:31.384
I'd probably have them for like module
like an API client or utils or helpers, or

82
00:04:31.384 --> 00:04:33.040
something like that.

83
00:04:33.040 --> 00:04:34.438
Yeah, question?

84
00:04:34.438 --> 00:04:38.568
&gt;&gt; Speaker 2: Is there any kind of tooling
you're aware of that kind of scans your

85
00:04:38.568 --> 00:04:41.887
code base and
realize that you have dead components or

86
00:04:41.887 --> 00:04:44.709
is that just sort of you
should just be aware?

87
00:04:44.709 --> 00:04:48.440
&gt;&gt; Brian Holt: Yeah, I don't know if
there's one available for Webpack or

88
00:04:48.440 --> 00:04:52.694
something like that, but
it's really easy to statically analyze.

89
00:04:52.694 --> 00:04:56.915
This never gets imported anywhere,
you can just delete it.

90
00:04:56.915 --> 00:04:58.995
But normally, that should be
on the developer of like hey,

91
00:04:58.995 --> 00:04:59.957
I removed this component.

92
00:04:59.957 --> 00:05:02.729
I'm gonna go check to make sure
it's not used anywhere else and

93
00:05:02.729 --> 00:05:03.945
then I'm gonna delete it.

94
00:05:03.945 --> 00:05:05.289
Never be afraid of deleting code.

95
00:05:05.289 --> 00:05:07.222
People get like all upset
about deleting code,

96
00:05:07.222 --> 00:05:10.815
cuz they're worried that they're throwing
away some history or something like that.

97
00:05:10.815 --> 00:05:12.987
That's what you have get for.

98
00:05:12.987 --> 00:05:15.002
So you can always go back and commit,

99
00:05:15.002 --> 00:05:17.871
and pull out code that you
have previously deleted.

100
00:05:17.871 --> 00:05:22.796
So don't mess up your get
history is what I'm saying,

101
00:05:22.796 --> 00:05:26.981
but please be aggressive
with deleting code.

102
00:05:26.981 --> 00:05:29.542
Deleting code is my favorite thing to do.

103
00:05:29.542 --> 00:05:31.867
Literally, nothing gets me happy.

104
00:05:31.867 --> 00:05:35.092
I'm making my life easier,
it's like cleaning house.

105
00:05:35.092 --> 00:05:36.663
It's the same sort of feeling.

106
00:05:41.567 --> 00:05:45.003
&gt;&gt; Brian Holt: So, that's all I wanted
to say about architecture of a project,

107
00:05:45.003 --> 00:05:46.135
I think this is good.

108
00:05:46.135 --> 00:05:49.749
This is the way I design
my personal projects, so

109
00:05:49.749 --> 00:05:52.315
it's something I would suggest.

