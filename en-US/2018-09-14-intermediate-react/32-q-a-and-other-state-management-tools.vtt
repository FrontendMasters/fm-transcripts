WEBVTT

1
00:00:01.078 --> 00:00:04.289
&gt;&gt; Speaker 1: What about using
a global actions.js file and

2
00:00:04.289 --> 00:00:07.090
using constants instead.

3
00:00:07.090 --> 00:00:10.736
&gt;&gt; Brian Holt: Yeah, so last time I
taught this course, I did exactly that.

4
00:00:10.736 --> 00:00:14.329
If you go in to here,
the previous version of this,

5
00:00:14.329 --> 00:00:19.177
you can see here that I have actions.js
where I just export the actual

6
00:00:19.177 --> 00:00:22.538
name of these various
actions that I want to do.

7
00:00:22.538 --> 00:00:27.491
So rather than setting
the actual string literal in

8
00:00:27.491 --> 00:00:31.418
both places, I used the variable name.

9
00:00:31.418 --> 00:00:35.379
This kind of prevents a little bit like
fat fingering this, because if you mess up

10
00:00:35.379 --> 00:00:38.712
this string it's really hard to
tell that you messed up the string.

11
00:00:38.712 --> 00:00:41.921
So some people insist
that's the best idea.

12
00:00:41.921 --> 00:00:43.789
I'm torn about it.

13
00:00:43.789 --> 00:00:46.717
Honestly, something that I'm
not showing you today but

14
00:00:46.717 --> 00:00:50.809
it's a really [INAUDIBLE] Redux as well
is it works really well with type script.

15
00:00:50.809 --> 00:00:54.712
Because I can basically say like,
if I have a set search term,

16
00:00:54.712 --> 00:00:59.609
in fact I can show you what this look
like with flow, which is pretty similar.

17
00:01:01.550 --> 00:01:06.540
And I think I have it in FlowType maybe,
types.

18
00:01:06.540 --> 00:01:10.391
So this is FlowType, but
TypeScript looks almost the same here.

19
00:01:10.391 --> 00:01:14.585
You can say hey,
if it's a set search term type of action,

20
00:01:14.585 --> 00:01:19.304
then is gonna be a string type and
if is not a string type then fail.

21
00:01:19.304 --> 00:01:24.154
It doesn't pass my type checking or
if it's ADD_API_DATA then is gonna be

22
00:01:24.154 --> 00:01:28.347
show type or it gonna be animal type or
pet or something like that.

23
00:01:28.347 --> 00:01:33.052
So you can actually have your type
checker make sure that action

24
00:01:33.052 --> 00:01:37.597
type match up with the The type
that's being served with it.

25
00:01:37.597 --> 00:01:39.256
So that's up to you,

26
00:01:39.256 --> 00:01:44.430
it's a personal decision how you
wanna handle that kind of thing.

27
00:01:44.430 --> 00:01:51.128
But yeah, we're working together with a
type checker and with Redux is quite nice.

28
00:01:51.128 --> 00:01:52.502
Other questions?

29
00:01:56.164 --> 00:01:57.968
&gt;&gt; Speaker 3: I've got a question.

30
00:01:57.968 --> 00:01:59.380
&gt;&gt; Brian Holt: Yeah?

31
00:01:59.380 --> 00:02:04.395
&gt;&gt; Speaker 3: With Redux where you
get the time traveling, debugging,

32
00:02:04.395 --> 00:02:11.372
just a lot of sophistication to be able
to control the state of your application.

33
00:02:11.372 --> 00:02:15.947
Is there anything like that if you
were to go with the context route?

34
00:02:18.453 --> 00:02:22.237
&gt;&gt; Brian Holt: No, I don't think so,
I don't think react has that ability.

35
00:02:22.237 --> 00:02:27.568
Those set states are not necessarily gonna
be like atomic transactional things.

36
00:02:27.568 --> 00:02:31.600
So you don't have some of the guarantees
that redux does by enforcing this

37
00:02:31.600 --> 00:02:34.930
transactional nature of the reducers and
the action types.

38
00:02:34.930 --> 00:02:38.788
So,
&gt;&gt; Brian Holt: Not that I'm aware of.

39
00:02:40.075 --> 00:02:43.361
&gt;&gt; Brian Holt: Okay, I don't think so.

40
00:02:43.361 --> 00:02:45.804
So if you want that and
that's important to you,

41
00:02:45.804 --> 00:02:47.720
you have to use something like Redux.

42
00:02:50.358 --> 00:02:54.704
&gt;&gt; Brian Holt: Probably just one last
thing I wanna add onto here before we wrap

43
00:02:54.704 --> 00:02:59.211
up the Redux section
&gt;&gt; Brian Holt: Redux is not the only type

44
00:02:59.211 --> 00:03:00.616
of central data store.

45
00:03:00.616 --> 00:03:05.130
There's also the various flavors of Flux,
like Flummox and Alt, and all the other

46
00:03:05.130 --> 00:03:09.404
ones that I can't remember, all
the various cute names around Flux, right?

47
00:03:09.404 --> 00:03:10.889
As well as MobX.

48
00:03:13.877 --> 00:03:19.464
&gt;&gt; Brian Holt: I would personally say
that there's no reason to use any other

49
00:03:19.464 --> 00:03:26.135
flavor of Flux, Redux is the one that
is the best out of that type of thing.

50
00:03:26.135 --> 00:03:31.315
That you have some sort of central data
store that you're dispatching actions to,

51
00:03:31.315 --> 00:03:33.024
Redux kind of nailed that.

52
00:03:33.024 --> 00:03:36.891
Redux arose out of something called
Flux that Facebook used to use and

53
00:03:36.891 --> 00:03:39.301
they kind of have migrated away from that.

54
00:03:39.301 --> 00:03:42.762
So if you're interested in that
you can go read about Flux.

55
00:03:42.762 --> 00:03:46.870
I still think it's on Facebook's read
post that you can read about it.

56
00:03:46.870 --> 00:03:49.564
But I think Redux is a much
better version of that.

57
00:03:49.564 --> 00:03:51.604
They just kind of nailed that API and

58
00:03:51.604 --> 00:03:54.463
the other ones have kind
of died off at this point.

59
00:03:54.463 --> 00:03:59.178
But the other one that does live on,
that people are interested in,

60
00:03:59.178 --> 00:04:00.597
is one called MobX.

61
00:04:00.597 --> 00:04:05.632
MobX is more based on observables and
functional reactive programming,

62
00:04:05.632 --> 00:04:08.563
and I'm not gonna say
a lot more than that.

63
00:04:08.563 --> 00:04:12.141
From my impressions of it,
I've never written code with it.

64
00:04:12.141 --> 00:04:14.650
So that's why I don't want to
tell you too much about it.

65
00:04:14.650 --> 00:04:19.561
But it is more powerful,
it's more expressive, and it's a lot,

66
00:04:19.561 --> 00:04:22.380
in my opinion, much more difficult.

67
00:04:22.380 --> 00:04:26.516
As soon as you're getting into functional
reactive programming you're just kinda

68
00:04:26.516 --> 00:04:30.415
leveling up the amount of knowledge that
every engineer needs to have about your

69
00:04:30.415 --> 00:04:31.187
application.

70
00:04:31.187 --> 00:04:35.201
So, I've never used it and I've also
very rarely felt the need to use it.

71
00:04:35.201 --> 00:04:37.111
Because this is complicated enough for me.

72
00:04:37.111 --> 00:04:39.640
MileBacks is more complicated, I think.

73
00:04:39.640 --> 00:04:45.016
&gt;&gt; Speaker 1: Steve Kenney does have
an entire advanced state management course

74
00:04:45.016 --> 00:04:51.256
with React, which covers all these
different kinds of variance in flavors.

75
00:04:51.256 --> 00:04:53.694
&gt;&gt; Brian Holt: Cool, yeah, so definitely,
I mean Steve's a great teacher, so

76
00:04:53.694 --> 00:04:55.184
definitely check out Steve's course.

