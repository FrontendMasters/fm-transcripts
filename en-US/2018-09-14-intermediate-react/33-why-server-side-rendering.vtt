WEBVTT

1
00:00:00.430 --> 00:00:01.916
&gt;&gt; Brian Holt: Server side rendering.

2
00:00:01.916 --> 00:00:04.858
Let's go back to our page here.

3
00:00:07.678 --> 00:00:09.514
&gt;&gt; Brian Holt: We look at
server side rendering.

4
00:00:11.844 --> 00:00:16.918
&gt;&gt; Brian Holt: So right now, when a user
downloads our pet adoption application,

5
00:00:16.918 --> 00:00:23.160
they'd first download the HTML which loads
the CSS, and it loads the JavaScript.

6
00:00:23.160 --> 00:00:26.490
The JavaScript loads on the page and
then renders the React application for

7
00:00:26.490 --> 00:00:27.900
the first time.

8
00:00:27.900 --> 00:00:31.631
So if you look at my application here,
I'm gonna just for

9
00:00:31.631 --> 00:00:34.681
a second come in here and
turn off JavaScript,

10
00:00:38.405 --> 00:00:43.043
&gt;&gt; Brian Holt: Which is on the right.

11
00:00:44.790 --> 00:00:46.894
&gt;&gt; Brian Holt: Disable JavaScript.

12
00:00:49.315 --> 00:00:52.470
&gt;&gt; Brian Holt: And I have to run
the server again, npm run dev.

13
00:01:01.965 --> 00:01:06.270
&gt;&gt; Brian Holt: So once it's done building
here, and now, refresh the page.

14
00:01:07.320 --> 00:01:11.840
So if I disable JavaScript, which I'm
not of the opinion these days that

15
00:01:11.840 --> 00:01:14.420
you need to have your application
work without JavaScript.

16
00:01:14.420 --> 00:01:17.810
I think that's a dated solution,
that used to be true, but

17
00:01:17.810 --> 00:01:21.360
now every browser reliably
has JavaScript running in it.

18
00:01:22.370 --> 00:01:28.900
However, the problem with this is, this
is what people see on your application

19
00:01:28.900 --> 00:01:33.720
if they have a slow connection
until everything loads, right.

20
00:01:33.720 --> 00:01:39.800
We have to wait for React to download the
application to be parsed then executed.

21
00:01:39.800 --> 00:01:43.490
And then for it to go through its first
render and then render out to the dom.

22
00:01:43.490 --> 00:01:46.404
That can be quite long, if we're on 2G.

23
00:01:46.404 --> 00:01:49.459
I mean, so re-enable JavaScript here so

24
00:01:49.459 --> 00:01:54.533
you can see it's come back but
let's look what happens if we do this.

25
00:01:54.533 --> 00:02:01.140
I'm gonna put this on regular 2G,
that's gonna take a long time.

26
00:02:01.140 --> 00:02:03.963
That sucks, right,
it sucks that our applications.

27
00:02:03.963 --> 00:02:05.328
I mean, how long are we into this?

28
00:02:05.328 --> 00:02:11.811
We're 15 to 20 seconds into this and
a user still seeing not rendered.

29
00:02:11.811 --> 00:02:17.676
So hopefully, I'm establishing the problem
here for you that this is too slow.

30
00:02:17.676 --> 00:02:21.743
This is too slow for
any sort of user to come to my website and

31
00:02:21.743 --> 00:02:23.994
see not rendered for this long.

32
00:02:23.994 --> 00:02:27.259
This is a bad experience.

33
00:02:27.259 --> 00:02:28.297
How long did that take?

34
00:02:28.297 --> 00:02:32.497
That took 30 seconds,
&gt;&gt; Brian Holt: For

35
00:02:32.497 --> 00:02:34.490
our very small application.

36
00:02:34.490 --> 00:02:38.222
Again, this is not built for production,
so it's not quite apples to apples.

37
00:02:38.222 --> 00:02:39.561
We could make this a bit faster.

38
00:02:39.561 --> 00:02:44.407
But even if you're on a fast connection,
coming back here and

39
00:02:44.407 --> 00:02:46.934
just putting on no throttling.

40
00:02:50.347 --> 00:02:53.824
&gt;&gt; Brian Holt: Most users, for the first
time are gonna see not rendered up there,

41
00:02:53.824 --> 00:02:56.329
right, which is not
a great experience either.

42
00:02:56.329 --> 00:02:59.300
You're gonna have like
a flash of unrendered dom.

43
00:03:00.650 --> 00:03:03.585
So let's talk about server side rendering.

44
00:03:03.585 --> 00:03:07.369
If you're doing a Node application,
this is actually quite easy to do.

45
00:03:07.369 --> 00:03:09.819
If you're doing something with rails or
something else,

46
00:03:09.819 --> 00:03:11.776
you're gonna have a little
bit more trouble.

47
00:03:11.776 --> 00:03:15.516
You're gonna have to have some sort of
mid tier service of that request to your

48
00:03:15.516 --> 00:03:18.641
backend, does service side rendering and
shows it to the user.

49
00:03:18.641 --> 00:03:20.938
I'm not gonna talk about that today,
but just know that it's possible.

50
00:03:20.938 --> 00:03:23.079
That's how Netflix does it, for example.

51
00:03:23.079 --> 00:03:26.544
They have Java backends, they have
a Node mid tier service that requests to

52
00:03:26.544 --> 00:03:29.734
the backend, does server side rendering,
and serves the request.

53
00:03:31.210 --> 00:03:33.563
&gt;&gt; Brian Holt: I'm gonna show you how
to do it just using a Node server, so

54
00:03:33.563 --> 00:03:35.870
we're gonna write a really
quick Node server.

55
00:03:35.870 --> 00:03:39.998
This is not a course on Node, so I'm not
gonna be telling you too much about Node,

56
00:03:39.998 --> 00:03:43.370
Frontend Masters has upcoming
great content about Node as well.

