WEBVTT

1
00:00:00.000 --> 00:00:01.877
&gt;&gt; Brian Holt: So this is Modal right now.

2
00:00:01.877 --> 00:00:06.227
Here's my suggestion, too, if you're gonna
start converting one of your projects over

3
00:00:06.227 --> 00:00:08.700
to TypeScript,
start it at some sort of leaf node.

4
00:00:08.700 --> 00:00:11.900
You don't wanna start at the top,
don't start at app.js,

5
00:00:11.900 --> 00:00:14.172
cuz that's gonna be a real painful thing.

6
00:00:14.172 --> 00:00:16.286
Instead, start at something like Modal,

7
00:00:16.286 --> 00:00:19.900
which is Modal's not really
importing anything else here, right?

8
00:00:19.900 --> 00:00:24.480
It's just self-contained, so these
self-contained components are a really

9
00:00:24.480 --> 00:00:28.020
good candidate for
converting over to TypeScript.

10
00:00:28.020 --> 00:00:32.920
Cuz now, if I convert Modal to being in
TypeScript, anything that imports Modal,

11
00:00:32.920 --> 00:00:36.570
when I go to convert that, we'll already
have TypeScript definitions available for

12
00:00:36.570 --> 00:00:39.920
it, which makes it easier to
convert the entire project.

13
00:00:39.920 --> 00:00:42.940
Believe me, as someone that has
converted a project of both Flow and

14
00:00:42.940 --> 00:00:46.060
another project to TypeScript,
this helps a lot.

15
00:00:48.050 --> 00:00:51.750
So with TypeScript, it's really easy
to opt in to TypeScript checking.

16
00:00:51.750 --> 00:00:57.125
I'm just gonna open this in my finder
here, so you can see here modal.js.

17
00:00:57.125 --> 00:01:00.530
I'm just going to right click on here and
say rename.

18
00:01:00.530 --> 00:01:05.940
And I'm gonna rename it from .js to .tsx.

19
00:01:05.940 --> 00:01:10.260
Now why not just ts,
it was just called js before.

20
00:01:10.260 --> 00:01:13.730
With TypeScript, you have to call it tsx.

21
00:01:13.730 --> 00:01:16.430
Otherwise, TypeScript
won't understand the jsx.

22
00:01:16.430 --> 00:01:21.040
So whereas js and jsx, that's optional,
it's your opinion, tsx is required.

23
00:01:21.040 --> 00:01:22.594
You have to call it tsx.

24
00:01:22.594 --> 00:01:26.800
Okay, so now we have modal.tsx.

25
00:01:26.800 --> 00:01:28.240
And I'm gonna close this.

26
00:01:28.240 --> 00:01:30.653
Now, check out this.el business.

27
00:01:30.653 --> 00:01:32.700
What's going on?

28
00:01:32.700 --> 00:01:34.170
Why is that not working?

29
00:01:35.380 --> 00:01:38.210
Well, TypeScript is gonna kind of tie
your hands in a bunch of stuff and

30
00:01:38.210 --> 00:01:41.260
make you do things that you
may not necessarily wanna do.

31
00:01:41.260 --> 00:01:44.423
In this case,
we're referring to this.el and

32
00:01:44.423 --> 00:01:49.573
we haven't told TypeScript about anything
on this that it can reference to.

33
00:01:49.573 --> 00:01:53.538
So we have to tell TypeScript
up front what is this.el.

34
00:01:53.538 --> 00:01:57.297
So the first thing I'm gonna
do here at the top above

35
00:01:57.297 --> 00:02:01.694
the,
&gt;&gt; Brian Holt: Yeah.

36
00:02:04.605 --> 00:02:05.741
&gt;&gt; Brian Holt: Let's do it this way.

37
00:02:08.341 --> 00:02:09.277
&gt;&gt; Brian Holt: There's a couple
ways we could do this.

38
00:02:09.277 --> 00:02:13.487
I could say private el, and
this would solve it, but

39
00:02:13.487 --> 00:02:16.647
since we're using class properties,

40
00:02:16.647 --> 00:02:21.349
let's just convert it all the way and
just say it's this.

41
00:02:24.791 --> 00:02:26.186
&gt;&gt; Brian Holt: And
now I can get rid of constructor.

42
00:02:26.186 --> 00:02:28.918
So this takes care of everything here.

43
00:02:31.785 --> 00:02:34.506
&gt;&gt; Brian Holt: And this private, this
is actually a thing for Typescript and

44
00:02:34.506 --> 00:02:36.033
not necessarily for JavaScript.

45
00:02:36.033 --> 00:02:39.390
It's private in the sense that
only Modal can access it.

46
00:02:39.390 --> 00:02:41.950
But the actual enforcement mechanism for
this is type script.

47
00:02:41.950 --> 00:02:46.632
So if in another class, they're trying to
access private.el, it's gonna say, uh-uh,

48
00:02:46.632 --> 00:02:50.430
that's a private one, I'm not gonna
let you compile unless you fix that.

49
00:02:50.430 --> 00:02:51.830
So you can actually
enforce this public and

50
00:02:51.830 --> 00:02:54.050
private things that we're
not able to do before.

51
00:02:55.330 --> 00:02:57.300
All these other methods though,
they are public, and

52
00:02:57.300 --> 00:02:59.680
we need to denote them as such.

53
00:02:59.680 --> 00:03:05.460
So public, render public component
amount and public component amount.

54
00:03:05.460 --> 00:03:07.200
Why are they public?

55
00:03:07.200 --> 00:03:08.194
React is calling them, right?

56
00:03:08.194 --> 00:03:12.279
So it has to be public or React wouldn't
technically be able to access it.

57
00:03:15.258 --> 00:03:16.910
&gt;&gt; Brian Holt: Okay,
so that happens there.

58
00:03:16.910 --> 00:03:22.614
And I think,
&gt;&gt; Brian Holt: So

59
00:03:22.614 --> 00:03:25.543
last thing here.

60
00:03:28.633 --> 00:03:32.743
&gt;&gt; Brian Holt: Modal route
should be an HTML element.

61
00:03:32.743 --> 00:03:35.767
This is another nice thing about
TypeScript because we get more and

62
00:03:35.767 --> 00:03:36.632
more deep into it.

63
00:03:36.632 --> 00:03:39.094
You can hover over anything, and
it's gonna tell you what it is, right?

64
00:03:39.094 --> 00:03:41.180
This should be an HTML element.

65
00:03:41.180 --> 00:03:43.863
What happens if Modal is undefined though?

66
00:03:43.863 --> 00:03:45.985
This is gonna error.

67
00:03:45.985 --> 00:03:49.262
So with TypeScript,
we're gonna have to say here,

68
00:03:49.262 --> 00:03:52.243
you have to be more
defensive with TypeScript.

69
00:03:52.243 --> 00:03:58.293
if (modalRoot),
this is called the type refinement

70
00:03:58.293 --> 00:04:03.124
appendChild,
&gt;&gt; Brian Holt: And

71
00:04:03.124 --> 00:04:08.169
same here because modalRoot
can potentially be undefined.

72
00:04:15.506 --> 00:04:18.366
&gt;&gt; Brian Holt: There you go,
now Modal is all TypeScriptified.

73
00:04:23.507 --> 00:04:25.581
&gt;&gt; Brian Holt: So
now if we go into any other component,

74
00:04:25.581 --> 00:04:27.900
we have access to type
definitions in Modal.

75
00:04:27.900 --> 00:04:31.507
And it'll do type checking for
us on everything that is coming in and

76
00:04:31.507 --> 00:04:32.276
out of Modal.

