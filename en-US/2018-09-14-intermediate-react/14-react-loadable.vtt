WEBVTT

1
00:00:00.603 --> 00:00:03.518
&gt;&gt; Brian Holt: Code splitting is this
idea that you don't need all of your code

2
00:00:03.518 --> 00:00:05.671
upfront to run all your application,
right?

3
00:00:05.671 --> 00:00:10.583
If I have a big single page application I
don't need 100% of the code loaded upfront

4
00:00:10.583 --> 00:00:12.005
for everything to work.

5
00:00:12.005 --> 00:00:16.094
So that means I can differ loading
some of that code to later so

6
00:00:16.094 --> 00:00:18.589
that I can load that web page faster.

7
00:00:18.589 --> 00:00:23.214
This is really, really key, particularly
if you have a large scale applications

8
00:00:23.214 --> 00:00:27.378
that you don't wanna load everything
upfront that doesn't make sense.

9
00:00:27.378 --> 00:00:31.267
So a big way you can cut down your initial
bundle size is by doing code splitting.

10
00:00:31.267 --> 00:00:34.437
So this is a big performance optimization.

11
00:00:34.437 --> 00:00:38.378
So we get to identify to parcel or
to webpack or

12
00:00:38.378 --> 00:00:43.692
whatever bundler you are using
points that it can split out.

13
00:00:43.692 --> 00:00:47.798
And by doing that, it'll make
multiple different JavaScript files.

14
00:00:47.798 --> 00:00:50.536
And then whenever we go
to load those files,

15
00:00:50.536 --> 00:00:55.278
it'll actually go behind the scenes,
load those extra JavaScript files.

16
00:00:55.278 --> 00:00:59.503
And then once they're ready,
it'll load your application.

17
00:00:59.503 --> 00:01:02.009
So the first thing I need you to do,

18
00:01:02.009 --> 00:01:06.684
actually you can stop your service
quick and say, npm install.

19
00:01:06.684 --> 00:01:10.662
And we're gonna install a library
called react-loadable, like that.

20
00:01:15.139 --> 00:01:19.690
&gt;&gt; Brian Holt: react-loadable is
a component that basically you

21
00:01:19.690 --> 00:01:24.025
provide to it,
the component you want to load and

22
00:01:24.025 --> 00:01:27.957
the component to show while it's loading.

23
00:01:27.957 --> 00:01:32.405
As well you can also define a component
to show if there's an error.

24
00:01:32.405 --> 00:01:35.661
So it's really, really convenient
if we're doing code splitting.

25
00:01:35.661 --> 00:01:38.502
So let's go back and
run our service again, npm run dev.

26
00:01:42.317 --> 00:01:49.105
&gt;&gt; Brian Holt: And we are gonna go
into app.js from the application here.

27
00:01:49.105 --> 00:01:52.326
So app.js, this one right here.

28
00:01:55.723 --> 00:01:58.243
&gt;&gt; Brian Holt: And we're gonna show
you how to do code-splitting by route,

29
00:01:58.243 --> 00:02:00.096
which is kinda the easiest one to do,
right?

30
00:02:00.096 --> 00:02:03.569
If I'm on the home page,
I don't need to load the about page.

31
00:02:03.569 --> 00:02:08.291
Or in our case here, if I'm on
the results page, I don't necessarily

32
00:02:08.291 --> 00:02:12.947
need to load the details page,
until the user actually clicks on it.

33
00:02:12.947 --> 00:02:17.382
So what I'm going to do here, is I'm
actually just going to delete details.

34
00:02:17.382 --> 00:02:21.623
The way that the bundler knows
which routes to split out, sorry,

35
00:02:21.623 --> 00:02:23.629
which components to include,

36
00:02:23.629 --> 00:02:28.428
which modules to include in your code
as it reads these input statements.

37
00:02:28.428 --> 00:02:32.727
So if I want to split out details, I have
to make sure that it doesn't import it at

38
00:02:32.727 --> 00:02:35.567
the top or
else we have done nothing useful, right?

39
00:02:35.567 --> 00:02:40.644
But now we need to import, we'll do

40
00:02:40.644 --> 00:02:47.080
it here underneath the petfinder-client,

41
00:02:47.080 --> 00:02:54.042
import loadable from react-loadable, okay?

42
00:02:54.042 --> 00:02:57.424
This is a function that we
provide a loader to it,

43
00:02:57.424 --> 00:02:59.742
some sort of loading component.

44
00:02:59.742 --> 00:03:04.602
And then it will give us back
a component that we can use instead of

45
00:03:04.602 --> 00:03:06.494
the one that's coming.

46
00:03:06.494 --> 00:03:12.056
So above the class here, what I want
you to do is I want you to say,

47
00:03:12.056 --> 00:03:17.618
const loadable, it's a function
that we provide an object to.

48
00:03:17.618 --> 00:03:26.187
Sorry, const loadableDetails = loadable,
like that.

49
00:03:26.187 --> 00:03:29.153
So the first thing we need to give
it is something to load, right?

50
00:03:29.153 --> 00:03:31.057
So we wanna load the details route.

51
00:03:31.057 --> 00:03:36.421
So we're gonna say loader:,
and this needs to be some sort

52
00:03:36.421 --> 00:03:42.558
of function that's going to run
once it's actually been invoked.

53
00:03:42.558 --> 00:03:46.090
So we're gonna give it a arrow function
that's going to return some sort of

54
00:03:46.090 --> 00:03:46.996
promise, right?

55
00:03:46.996 --> 00:03:50.690
The promise of the details
route being loaded.

56
00:03:50.690 --> 00:03:54.780
So let me introduce to
you to something called

57
00:03:54.780 --> 00:03:59.526
the import function import('./Details').

58
00:03:59.526 --> 00:04:02.461
So now we just have the this
import statement at the top.

59
00:04:02.461 --> 00:04:06.243
This isn't a function in invocation,
this is a module declaration, right?

60
00:04:06.243 --> 00:04:10.680
This is static, you can't use the
variables up here or anything like that.

61
00:04:10.680 --> 00:04:14.272
This is static, so you can statically and
analyze your bundles.

62
00:04:14.272 --> 00:04:17.762
Over this, this is a function, right?

63
00:04:17.762 --> 00:04:19.151
So it's dynamic.

64
00:04:19.151 --> 00:04:22.696
Whenever I use this component,
this loadableDetails component that I

65
00:04:22.696 --> 00:04:26.725
have constructed, it's going to call
this function that I've provided here.

66
00:04:26.725 --> 00:04:31.420
And this function calls
the import function.

67
00:04:31.420 --> 00:04:34.364
What import does is a dynamic loader,
right?

68
00:04:34.364 --> 00:04:37.007
So parcel goes through, sees this, and

69
00:04:37.007 --> 00:04:41.762
it's going to split out details
automatically into a separate bundle.

70
00:04:41.762 --> 00:04:49.440
And parcel knows how to load stuff
off from your project, right?

71
00:04:49.440 --> 00:04:53.386
So it does all that wiring up for you,
it's all kinda little bit magical,

72
00:04:53.386 --> 00:04:55.116
if we're being honest, okay?

73
00:04:55.116 --> 00:04:55.953
Okay, and

74
00:04:55.953 --> 00:05:02.014
the next thing we have to provide here
is a loading component called loading.

75
00:05:02.014 --> 00:05:06.571
Right now, I'm gonna say return

76
00:05:06.571 --> 00:05:11.135
&lt;h1&gt;loading split out code.

77
00:05:11.135 --> 00:05:16.487
As you might imagine this might be more
sophisticated, it might be like a loading

78
00:05:16.487 --> 00:05:21.699
spinner or something better than just
an h1 that says it's loading, right?

79
00:05:21.699 --> 00:05:25.707
So now,
I have this thing called loadableDetails.

80
00:05:25.707 --> 00:05:28.859
And this is a component that
I can use inside of my code.

81
00:05:28.859 --> 00:05:31.381
So down here, instead of having details,

82
00:05:31.381 --> 00:05:34.190
which should be underlined right now,
right?

83
00:05:34.190 --> 00:05:38.190
I'm gonna say,

84
00:05:38.190 --> 00:05:43.051
loadableDetails.

85
00:05:43.051 --> 00:05:48.075
So the first thing I want you to notice,
let's just restart, or clear, npm run.

86
00:05:48.075 --> 00:05:50.345
You don't have to do this,
I'm just gonna do it to show you.

87
00:05:50.345 --> 00:05:55.471
It should tell you that it
split out a different route.

88
00:05:55.471 --> 00:05:59.254
Nope, it doesn't, webpack does.

89
00:05:59.254 --> 00:06:04.445
But in any case,
if we go back to our application here.

90
00:06:04.445 --> 00:06:07.165
So let's refresh and
let's watch the network tab here, and

91
00:06:07.165 --> 00:06:09.040
we'll just watch the JavaScript files.

92
00:06:09.040 --> 00:06:11.296
So notice I loaded here App.js, right?

93
00:06:11.296 --> 00:06:12.102
That's our main bundle.

94
00:06:12.102 --> 00:06:15.212
That's our main entry point
into our application.

95
00:06:15.212 --> 00:06:18.762
But as soon as I click into
one of these animals here,

96
00:06:18.762 --> 00:06:21.761
notice that it's gonna load another file.

97
00:06:21.761 --> 00:06:26.735
This is another JavaScript file
that it loaded from my application.

98
00:06:26.735 --> 00:06:28.641
So that's pretty cool, right?

99
00:06:28.641 --> 00:06:30.112
We didn't really have to do very much.

100
00:06:30.112 --> 00:06:33.428
We just had to identify a point,
just like this point can be split out,

101
00:06:33.428 --> 00:06:35.013
this component can be split out.

102
00:06:35.013 --> 00:06:40.402
Here's what you do while it's loading and
here's what to do when it's loaded.

103
00:06:40.402 --> 00:06:41.712
Pretty compelling, right?

104
00:06:41.712 --> 00:06:43.770
I think it is.

