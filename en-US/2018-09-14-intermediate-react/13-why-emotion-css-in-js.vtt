WEBVTT

1
00:00:00.990 --> 00:00:03.330
&gt;&gt; Brian Holt: Cool, does anyone
have any questions about Emotion or

2
00:00:03.330 --> 00:00:04.580
anything in general about Emotion?

3
00:00:04.580 --> 00:00:07.790
I'll give you my final opinion on CSS and
JS here in just a second.

4
00:00:07.790 --> 00:00:12.952
But any questions about the mechanics or
how to do it?

5
00:00:12.952 --> 00:00:15.232
&gt;&gt; Brian Holt: Or
just in general about Emotion.

6
00:00:15.232 --> 00:00:18.073
&gt;&gt; Speaker 2: I'm still not
understanding what is the benefit,

7
00:00:18.073 --> 00:00:19.600
other than deletability.

8
00:00:19.600 --> 00:00:22.350
Which you could handle by
putting your SaaS file into

9
00:00:22.350 --> 00:00:23.860
a folder with your component.

10
00:00:25.220 --> 00:00:29.680
I still don't see the benefit
of using Emotion.

11
00:00:29.680 --> 00:00:35.190
Because it seems a lot
more syntax involved like.

12
00:00:35.190 --> 00:00:38.839
&gt;&gt; Brian Holt: Part of it is like all of,
everything lives in one file,

13
00:00:38.839 --> 00:00:40.168
that's a benefit.

14
00:00:40.168 --> 00:00:44.070
If any of you have ever written Vue JS,
or have looked at Vue JS.

15
00:00:44.070 --> 00:00:47.535
I think to me the biggest
innovation that Vue came

16
00:00:47.535 --> 00:00:50.163
up with was single file components.

17
00:00:50.163 --> 00:00:51.715
If you don't know what
that is go check it out.

18
00:00:51.715 --> 00:00:52.438
I think it's revolutionary.

19
00:00:52.438 --> 00:00:56.776
I hope that we're gonna get more towards
that direction in general with JavaScript.

20
00:00:56.776 --> 00:01:01.718
But I think having everything live
in one file, that's a big benefit.

21
00:01:01.718 --> 00:01:05.092
And the other thing is that
this has a runtime, right?

22
00:01:05.092 --> 00:01:09.700
And while it's net loss a little
bit on the performance side and,

23
00:01:11.288 --> 00:01:12.922
&gt;&gt; Brian Holt: Just like file size and

24
00:01:12.922 --> 00:01:15.857
the performance implications of that.

25
00:01:15.857 --> 00:01:17.297
But at the same time,

26
00:01:17.297 --> 00:01:21.873
now you can manipulate all of your
styles in JavaScript at runtime.

27
00:01:21.873 --> 00:01:25.870
If you're doing things like SaaS or
LESS, you're limited to build time.

28
00:01:25.870 --> 00:01:28.017
So anything that you can
only do at build time.

29
00:01:28.017 --> 00:01:31.669
But, like I can base like
how frequently this spins,

30
00:01:31.669 --> 00:01:36.383
I could just say like,
&gt;&gt; Brian Holt: All right,

31
00:01:36.383 --> 00:01:39.404
we're gonna build this super fast cuz
I think this could be compelling.

32
00:01:39.404 --> 00:01:43.250
So,
&gt;&gt; Brian Holt: Frequency,

33
00:01:46.054 --> 00:01:47.248
&gt;&gt; Brian Holt: And s,

34
00:01:47.248 --> 00:01:51.450
let's see,
&gt;&gt; Brian Holt: Props frequency.

35
00:01:56.571 --> 00:02:01.339
&gt;&gt; Brian Holt: So this can actually be
a function that it'll provide to you,

36
00:02:01.339 --> 00:02:05.388
and then here we'll just do it,
this is a SpyGlass.

37
00:02:09.105 --> 00:02:15.480
&gt;&gt; Brian Holt: And then here,
we'd say frequency = 5.

38
00:02:15.480 --> 00:02:19.542
So this will be really slow, right?

39
00:02:19.542 --> 00:02:25.177
But we can even take this a little bit
further if we make this a class component.

40
00:02:27.441 --> 00:02:32.488
&gt;&gt; Brian Holt: Class NavBar = extends

41
00:02:32.488 --> 00:02:38.041
React.Component render

42
00:02:38.041 --> 00:02:42.936
return,
&gt;&gt; Brian Holt: And

43
00:02:42.936 --> 00:02:44.805
just move all this into there.

44
00:02:49.704 --> 00:02:51.317
&gt;&gt; Brian Holt: Okay, so
now we have the class component.

45
00:02:51.317 --> 00:02:58.094
Okay, and now I'm gonna set this.state,

46
00:02:58.094 --> 00:03:04.883
I'm sorry, state = (frequency: 1).

47
00:03:08.977 --> 00:03:10.753
&gt;&gt; Brian Holt: And
maybe set it to like 10.

48
00:03:10.753 --> 00:03:19.344
And then we'll say
halfFrequency = this.setState.

49
00:03:21.855 --> 00:03:27.242
&gt;&gt; Brian Holt: Frequency
is this.frequency/2,

50
00:03:27.242 --> 00:03:31.287
this.state.frequency.

51
00:03:31.287 --> 00:03:39.762
And then we'll say onClick
= this.halfFrequency.

52
00:03:39.762 --> 00:03:47.238
And frequency will equal
to this.state.frequency.

53
00:03:47.238 --> 00:03:51.013
This was a long example, but
I think hopefully we got it.

54
00:03:51.013 --> 00:03:53.690
Right now, this is going real slow.

55
00:03:53.690 --> 00:03:56.638
Every 10 seconds, it's going to rotate,
but if I click on it,

56
00:03:56.638 --> 00:03:58.260
it's going to start going faster.

57
00:04:03.693 --> 00:04:06.177
&gt;&gt; Brian Holt: [LAUGH]
&gt;&gt; Speaker 2: It was worth

58
00:04:06.177 --> 00:04:06.738
it just for that.

59
00:04:06.738 --> 00:04:09.055
[LAUGH]
&gt;&gt; Brian Holt: [LAUGH]

60
00:04:12.151 --> 00:04:13.043
&gt;&gt; Speaker 3: You convinced us,

61
00:04:13.043 --> 00:04:13.772
it's useful.

62
00:04:13.772 --> 00:04:15.920
[LAUGH]
&gt;&gt; Speaker 4: So

63
00:04:15.920 --> 00:04:20.653
you specifically use it to make your
spy glasses faster, is the takeaway?

64
00:04:20.653 --> 00:04:22.504
&gt;&gt; Brian Holt: Yes,
that is the only thing.

65
00:04:22.504 --> 00:04:24.192
This is the unique use case for this.

66
00:04:24.192 --> 00:04:27.987
[LAUGH] This projectors
not refreshing right, but

67
00:04:27.987 --> 00:04:33.867
you should see on my laptop right now,
it's going way faster than even that.

68
00:04:33.867 --> 00:04:35.396
&gt;&gt; Speaker 3: Have the dogs spin too.

69
00:04:35.396 --> 00:04:37.306
&gt;&gt; Speaker 2: [LAUGH] But
they'll get sick.

70
00:04:37.306 --> 00:04:40.647
&gt;&gt; Brian Holt: [LAUGH] But
like this is my point is like,

71
00:04:40.647 --> 00:04:46.638
this makes manipulating your styles
in real time incredibly simple.

72
00:04:46.638 --> 00:04:49.426
If you wanted to do this with CSS,
obviously possible.

73
00:04:49.426 --> 00:04:53.631
But we're gonna have a little bit more
difficulty getting up and running on that.

74
00:04:53.631 --> 00:04:55.284
This was trivial.

75
00:04:55.284 --> 00:04:56.208
I made it up, like right now.

76
00:04:56.208 --> 00:05:02.022
[LAUGH] So,
&gt;&gt; Brian Holt: Cool, any other questions?

77
00:05:06.218 --> 00:05:10.092
&gt;&gt; Brian Holt: So I kinda half
answered your question with you,

78
00:05:10.092 --> 00:05:12.652
what do I think about CSS and JS?

79
00:05:12.652 --> 00:05:15.785
I gotta stop that, that's really annoying.

80
00:05:15.785 --> 00:05:22.343
[LAUGH] In general, I don't reach for
it out of the box first.

81
00:05:22.343 --> 00:05:26.285
For the most part, writing normal
CSS with classes is sufficient.

82
00:05:26.285 --> 00:05:28.283
I think it's good enough for me.

83
00:05:28.283 --> 00:05:31.537
But I am stoked that people
are doing this because it's

84
00:05:31.537 --> 00:05:33.597
pushing the boundaries forward.

85
00:05:33.597 --> 00:05:36.902
We're looking at CSS with new eyes.

86
00:05:36.902 --> 00:05:40.578
And I think pushing the boundaries
like this is really important

87
00:05:40.578 --> 00:05:42.697
to us moving forward as an industry.

88
00:05:42.697 --> 00:05:45.983
And so
I don't discourage anyone from doing it,

89
00:05:45.983 --> 00:05:48.637
especially if you're using Emotion.

90
00:05:48.637 --> 00:05:52.070
The performance overhead on this is
minimal enough that I think it values,

91
00:05:52.070 --> 00:05:54.369
it adds enough value that
it might be worth doing.

92
00:05:54.369 --> 00:05:58.220
I think the idea of doing design
systems and things like that is

93
00:05:58.220 --> 00:06:02.679
really compelling with Emotion, so
I think that's a good thing to do.

94
00:06:02.679 --> 00:06:05.731
And if you're doing things
like this where you

95
00:06:05.731 --> 00:06:10.593
have to have real time affecting of
your styles at run time, use Emotion.

96
00:06:10.593 --> 00:06:12.367
This is awesome,
this is what it's made for.

97
00:06:12.367 --> 00:06:14.961
This is what it's the best at.

98
00:06:14.961 --> 00:06:19.055
So yeah,
that's kind of my idea behind Emotion.

99
00:06:19.055 --> 00:06:23.741
I really like CSS modules so
if I'm gonna reach for

100
00:06:23.741 --> 00:06:27.765
something, CSS modules has no overhead.

101
00:06:27.765 --> 00:06:31.566
It's basically the idea that you can
import CSS, and then it just grabs all of

102
00:06:31.566 --> 00:06:34.623
your imported CSS and
it just makes a big style sheet out of it.

103
00:06:34.623 --> 00:06:38.607
So that's kind of my middle
ground that I really like.

104
00:06:38.607 --> 00:06:40.008
And Parcel does that out of the box.

105
00:06:40.008 --> 00:06:43.784
What that would look like,
instead of having Emotion up here,

106
00:06:43.784 --> 00:06:51.187
I would just say import,
&gt;&gt; Brian Holt: ./my-css.css, right?

107
00:06:51.187 --> 00:06:55.120
And then it would import that, and then
at build time, it gathers all of those

108
00:06:55.120 --> 00:06:59.312
imports together, makes a giant style
sheet, and then that's what you export.

109
00:06:59.312 --> 00:07:01.157
I think that's pretty cool.

110
00:07:01.157 --> 00:07:03.236
&gt;&gt; Speaker 2: You said it does
SaaS out of the box as well.

111
00:07:03.236 --> 00:07:07.163
&gt;&gt; Brian Holt: Mm-hm, it does SaaS, LESS,
Stylus, all those ones out of the box.

112
00:07:11.867 --> 00:07:16.213
&gt;&gt; Brian Holt: So all of this is up in
a branch, the branch is called Emotion.

113
00:07:16.213 --> 00:07:22.396
It unfortunately does not have
the really cool magnifying glass trick.

114
00:07:22.396 --> 00:07:27.125
That's a bonus feature for
Frontend Master's subscribers.

115
00:07:27.125 --> 00:07:28.863
It's the director's cut.

