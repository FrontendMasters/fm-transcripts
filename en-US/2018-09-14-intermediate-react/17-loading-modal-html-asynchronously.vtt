WEBVTT

1
00:00:00.000 --> 00:00:04.169
&gt;&gt; Brian Holt: How can we make
this even faster and even better?

2
00:00:04.169 --> 00:00:09.442
Well, so when I load this page,
let's go back to the Adopt Me page.

3
00:00:11.313 --> 00:00:12.375
&gt;&gt; Brian Holt: So when I click on Details,

4
00:00:12.375 --> 00:00:14.229
I do want this to be as fast as possible,
right?

5
00:00:14.229 --> 00:00:17.101
So whenever I click on this now,
I make the user wait for

6
00:00:17.101 --> 00:00:20.673
more JavaScript to be downloaded,
and that's 745 kilobytes.

7
00:00:20.673 --> 00:00:21.429
That's a lot.

8
00:00:21.429 --> 00:00:25.868
That's a long time for someone on like 3G
or 2G to wait for a page to be downloaded.

9
00:00:25.868 --> 00:00:28.223
So how can I speed that up?

10
00:00:28.223 --> 00:00:33.221
Well, there's a feature called
Service Workers which are amazing.

11
00:00:33.221 --> 00:00:35.946
Front end masters has great PWA content,
so

12
00:00:35.946 --> 00:00:40.964
that's definitely something to check or
just search for progressive web apps.

13
00:00:40.964 --> 00:00:43.958
So Service Workers are these features that
you can install on your application which

14
00:00:43.958 --> 00:00:45.361
I'm not gonna show you how to do today.

15
00:00:45.361 --> 00:00:49.023
But what you could do is you could use
a Service Worker in the background,

16
00:00:49.023 --> 00:00:51.724
that after you make that
initial page load to go out and

17
00:00:51.724 --> 00:00:54.624
do a secondary fetch to fetch
all the rest of the bundles.

18
00:00:54.624 --> 00:00:57.986
And the way you do that is you can
have Parcel generate a JSON of all

19
00:00:57.986 --> 00:01:00.485
the various bundles that are created,
right?

20
00:01:00.485 --> 00:01:04.000
Have your Service Worker load that
particular JSON object and go out and

21
00:01:04.000 --> 00:01:05.758
make all the additional requests so

22
00:01:05.758 --> 00:01:09.112
that it can already cache those
things after the initial page load.

23
00:01:09.112 --> 00:01:12.522
Cuz what you care about is you want
the first page load to be super fast, and

24
00:01:12.522 --> 00:01:16.277
then in the background you can hurry and
load everything else in the background.

25
00:01:16.277 --> 00:01:19.015
So rather than making the user wait for
this one to,

26
00:01:19.015 --> 00:01:20.867
I mean look how long it's taking.

27
00:01:20.867 --> 00:01:22.442
This is the local host, right?

28
00:01:22.442 --> 00:01:24.069
That's a little crazy.

29
00:01:26.353 --> 00:01:29.717
&gt;&gt; Brian Holt: You can have your Service
Worker go in and load all that stuff in

30
00:01:29.717 --> 00:01:33.548
the background so when you call
that import promise, it's instant.

31
00:01:33.548 --> 00:01:36.250
So that's a really cool
feature of Service Workers.

32
00:01:38.865 --> 00:01:39.928
&gt;&gt; Brian Holt: Okay, one last thing.

33
00:01:39.928 --> 00:01:43.705
I wanna show you that you can split
on other places besides routes.

34
00:01:43.705 --> 00:01:45.856
Routes are a good place to do it.

35
00:01:45.856 --> 00:01:49.550
That makes sense but there are other
places you can do it as well.

36
00:01:49.550 --> 00:01:52.515
Like if I'm on this page what
other code could I split out here?

37
00:01:52.515 --> 00:01:54.704
I mean I guess I can split
out the carousel, but

38
00:01:54.704 --> 00:01:58.187
that would be really weird because we'd
load the first part of the page and

39
00:01:58.187 --> 00:02:00.059
then this part would still be loading.

40
00:02:00.059 --> 00:02:05.321
And it wouldn't make a lot of
difference or sense to do that.

41
00:02:05.321 --> 00:02:07.533
But we have this modal, right?

42
00:02:07.533 --> 00:02:11.542
That doesn't get shown right up front,
we could split that out.

43
00:02:11.542 --> 00:02:13.622
So how would you do that?

44
00:02:13.622 --> 00:02:18.069
What we wanna do is we wanna load this
modal content into synchronicity right

45
00:02:18.069 --> 00:02:18.980
here, right?

46
00:02:18.980 --> 00:02:24.740
So we wanna make a new file and call it,
&gt;&gt; Brian Holt: What did I call it here?

47
00:02:24.740 --> 00:02:26.207
Adopt modal content.

48
00:02:26.207 --> 00:02:30.513
AdoptModalContent.js.

49
00:02:30.513 --> 00:02:33.427
This is gonna be inside of
your source directory, and

50
00:02:33.427 --> 00:02:35.124
it's gonna be pretty simple.

51
00:02:35.124 --> 00:02:41.250
So it's gonna import React from react,

52
00:02:41.250 --> 00:02:49.194
and const Adopt ModalContent = props,
&gt;&gt; Brian Holt: And

53
00:02:49.194 --> 00:02:51.739
it's going to return something
here in this function body.

54
00:02:51.739 --> 00:02:59.041
We'll do that in a second, and
we'll export default AdoptModalContent.

55
00:03:00.596 --> 00:03:02.887
&gt;&gt; Brian Holt: So now I wanna pull
everything out of this modal in here and

56
00:03:02.887 --> 00:03:03.907
I wanna put it into here.

57
00:03:03.907 --> 00:03:11.079
So for now, I'm just gonna copy this and
I'm gonna put this here.

58
00:03:13.775 --> 00:03:17.557
&gt;&gt; Brian Holt: We have
a problem with this, though.

59
00:03:17.557 --> 00:03:20.057
If you remember from our React course,

60
00:03:20.057 --> 00:03:25.958
you can only have one top level element,
&gt;&gt; Brian Holt: Right?

61
00:03:25.958 --> 00:03:29.026
So this doesn't actually work yet,
because I have the H1 and

62
00:03:29.026 --> 00:03:30.274
a div that are top level.

63
00:03:30.274 --> 00:03:33.900
Now, in previous versions of React, what I
would have done is just wrapped everything

64
00:03:33.900 --> 00:03:35.452
in a div, and I would have been fine.

65
00:03:37.468 --> 00:03:40.571
&gt;&gt; Brian Holt: But this is how you end
up with, quote unquote, div soup, right?

66
00:03:40.571 --> 00:03:43.027
You end up with having just
10,000 unnecessary divs.

67
00:03:43.027 --> 00:03:46.409
It's not necessarily that
really bad of a thing but

68
00:03:46.409 --> 00:03:51.221
React 16 introduced us the ability
to do this thing called fragments.

69
00:03:51.221 --> 00:03:56.295
So we can say react.fragment and
now this works.

70
00:03:56.295 --> 00:04:01.609
So this does not actually
render anything on top level,

71
00:04:01.609 --> 00:04:05.577
it just renders this fragment together.

72
00:04:07.726 --> 00:04:11.353
&gt;&gt; Brian Holt: When they have the new
version of JSX you will be able to just

73
00:04:11.353 --> 00:04:11.953
do this.

74
00:04:14.960 --> 00:04:18.077
&gt;&gt; Brian Holt: And
that's what a fragment will look like.

75
00:04:18.077 --> 00:04:20.425
But if I save this right
now Parcel would blow up,

76
00:04:20.425 --> 00:04:22.669
cuz Parcel doesn't know
what to do with that.

77
00:04:24.369 --> 00:04:25.051
&gt;&gt; Brian Holt: And so let's

78
00:04:25.051 --> 00:04:28.440
stick with that,
&gt;&gt; Brian Holt: And

79
00:04:28.440 --> 00:04:31.257
here we're gonna have to
change this to props as well.

80
00:04:35.688 --> 00:04:39.761
&gt;&gt; Brian Holt: Going back into details, so
instead of having this stuff right here,

81
00:04:39.761 --> 00:04:47.355
I'm gonna have this be,
&gt;&gt; Brian Holt: LoadableContent or

82
00:04:47.355 --> 00:04:48.228
something like that.

83
00:04:48.228 --> 00:04:54.875
So, yeah, that's what I called it,
LoadableContent, like that.

84
00:04:59.605 --> 00:05:02.704
&gt;&gt; Brian Holt: But this still has
to receive the toggleModal so

85
00:05:02.704 --> 00:05:05.890
we'll keep that as well, this.toggleModal.

86
00:05:07.751 --> 00:05:14.218
&gt;&gt; Brian Holt: And name=name cuz those
are being passed into Props up here.

87
00:05:14.218 --> 00:05:16.346
Did I get that?

88
00:05:16.346 --> 00:05:18.666
Yeah, here I have to say, sorry,

89
00:05:18.666 --> 00:05:24.006
props.name as well,
&gt;&gt; Brian Holt: Right

90
00:05:24.006 --> 00:05:28.494
there on line 5 of AdoptModalContent.

91
00:05:31.650 --> 00:05:33.107
&gt;&gt; Brian Holt: And then I'm gonna
go back to the Details page.

92
00:05:33.107 --> 00:05:37.100
Now we have this little content so
we have to go make that above here, so

93
00:05:37.100 --> 00:05:42.617
we're gonna go and do that,
&gt;&gt; Brian Holt: Then when

94
00:05:42.617 --> 00:05:47.678
I say const LoadableContent =

95
00:05:47.678 --> 00:05:53.665
Loadable,
&gt;&gt; Brian Holt: loader,

96
00:05:55.737 --> 00:05:58.849
&gt;&gt; Brian Holt: And we're gonna say

97
00:05:58.849 --> 00:06:04.164
import./AdoptModalContent.

98
00:06:04.164 --> 00:06:09.459
And loading is gonna be some function that

99
00:06:09.459 --> 00:06:15.822
returns loading content or
something like that.

100
00:06:23.598 --> 00:06:25.141
&gt;&gt; Brian Holt: Yeah,
it's gonna be upset by that.

101
00:06:25.141 --> 00:06:26.603
Fine, whatever.

102
00:06:44.903 --> 00:06:46.240
&gt;&gt; Brian Holt: Still upset about that?

103
00:06:46.240 --> 00:06:47.766
No, that's fine.

104
00:06:50.843 --> 00:06:53.001
&gt;&gt; Brian Holt: Yeah,
you have to load that.

105
00:06:55.694 --> 00:07:00.958
&gt;&gt; Brian Holt: Import,
Loadable from ./Loadable,

106
00:07:00.958 --> 00:07:05.612
not dot slash, react-loadable.

107
00:07:11.477 --> 00:07:12.557
&gt;&gt; Brian Holt: There we go.

108
00:07:12.557 --> 00:07:14.780
Okay, so now,
if I'm gonna click Adopt, and

109
00:07:14.780 --> 00:07:18.846
you're gonna see down at the bottom it's
gonna load adoptable content right here.

110
00:07:18.846 --> 00:07:22.084
And you'll see a little bit
delay between when I load it and

111
00:07:22.084 --> 00:07:23.880
the content actually shows up.

112
00:07:23.880 --> 00:07:26.905
Very, quite quick.

113
00:07:26.905 --> 00:07:30.516
But let's see,
we could probably get this with 3G,

114
00:07:30.516 --> 00:07:35.261
so if I loaded this page now on 3G,
this is what it's gonna look like.

115
00:07:35.261 --> 00:07:40.193
This is gonna load the first bundle, which
is gonna take a while cuz none of this

116
00:07:40.193 --> 00:07:44.167
is G zipped, none of this is mini-fied or
anything like that.

117
00:07:49.107 --> 00:07:52.554
&gt;&gt; Brian Holt: Now you might be thinking,
that was pretty slow, and

118
00:07:52.554 --> 00:07:56.320
we had to wait quite a bit of time for
that loading content.

119
00:07:56.320 --> 00:07:58.818
But think if we had been loading
everything else as well.

120
00:07:58.818 --> 00:08:01.083
We would have waited a lot longer.

121
00:08:01.083 --> 00:08:04.755
And so if I click here, Adopt Theo,
still pretty quick, but

122
00:08:04.755 --> 00:08:10.304
that's because this is a tiny bundle,
8.39 kilobites un-G zipped, unmini-fied.

