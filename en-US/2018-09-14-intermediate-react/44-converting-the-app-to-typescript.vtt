WEBVTT

1
00:00:00.064 --> 00:00:01.706
&gt;&gt; Brian: All right so
let's go do another route.

2
00:00:01.706 --> 00:00:04.455
Let's go do details.js.

3
00:00:04.455 --> 00:00:07.121
Here.

4
00:00:07.121 --> 00:00:09.220
Why is this upset?

5
00:00:18.248 --> 00:00:19.494
&gt;&gt; Brian: One more thing.

6
00:00:25.746 --> 00:00:28.000
&gt;&gt; Brian: Why is this
still in preact compat.

7
00:00:31.768 --> 00:00:33.145
&gt;&gt; Brian: That's interesting.

8
00:00:43.703 --> 00:00:46.020
&gt;&gt; Brian: Okay, good.

9
00:00:46.020 --> 00:00:47.814
It's in a weird state.

10
00:00:47.814 --> 00:00:53.717
So should be good to go
now here in details.js.

11
00:00:53.717 --> 00:00:58.278
So I'm gonna come in here and

12
00:00:58.278 --> 00:01:04.940
rename details.js to be details.tsx.

13
00:01:09.239 --> 00:01:09.932
&gt;&gt; Brian: Okay.

14
00:01:14.198 --> 00:01:16.393
&gt;&gt; Brian: So, a couple of things up here.

15
00:01:18.419 --> 00:01:21.336
&gt;&gt; Brian: So
up here from pet finder client.

16
00:01:23.200 --> 00:01:25.231
&gt;&gt; Brian: We're gonna import, some types.

17
00:01:25.231 --> 00:01:30.591
So pet finder client exports
some types that you can use,

18
00:01:30.591 --> 00:01:34.286
so one of them is gonna be pet response.

19
00:01:34.286 --> 00:01:37.659
And one of them's going
to be called PetMedia.

20
00:01:37.659 --> 00:01:41.740
Now what's cool about this, notice that
it knows PetMedia already exists on there

21
00:01:41.740 --> 00:01:44.832
that's because I wrote the TypeScript
definitions for you and

22
00:01:44.832 --> 00:01:47.004
it can read those TypeScript definitions.

23
00:01:47.004 --> 00:01:49.045
And those are already
available to up here.

24
00:01:54.166 --> 00:01:57.382
&gt;&gt; Brian: And then here it's gonna
enforce some more safety on us so

25
00:01:57.382 --> 00:01:59.334
we'll get there in just a second.

26
00:02:04.961 --> 00:02:07.200
&gt;&gt; Brian: But notice it's already
made a bunch of errors for us.

27
00:02:07.200 --> 00:02:10.430
It's like hey this isn't public or
private.

28
00:02:10.430 --> 00:02:12.960
You need to make that public or
private so.

29
00:02:12.960 --> 00:02:15.950
These ones we're going
to say state is public,

30
00:02:15.950 --> 00:02:18.282
because it can be modified by React.

31
00:02:18.282 --> 00:02:21.797
This is gonna be public.

32
00:02:21.797 --> 00:02:23.110
These are gonna be public.

33
00:02:26.360 --> 00:02:28.100
So, that solves some problems.

34
00:02:30.970 --> 00:02:35.129
So hey, you have ID and I don't really
know what ID is, where's that coming from?

35
00:02:36.910 --> 00:02:39.760
Well, you have to tell React what
its props that it expects are.

36
00:02:39.760 --> 00:02:44.567
So the way that we can do that

37
00:02:44.567 --> 00:02:49.311
is-
&gt;&gt; Brian: Through

38
00:02:49.311 --> 00:02:51.003
this thing called route component props.

39
00:02:51.003 --> 00:02:57.176
So what we can do is provide React ways
of knowing what types are gonna come in.

40
00:02:57.176 --> 00:03:02.192
Because this is a route,
we need to tell it that hey some

41
00:03:02.192 --> 00:03:07.006
of these props are gonna
be coming from each router.

42
00:03:07.006 --> 00:03:12.219
So we're gonna tell it's gonna come
from route component props right here.

43
00:03:12.219 --> 00:03:13.390
This one at the top.

44
00:03:13.390 --> 00:03:15.000
We're going to click that.

45
00:03:15.000 --> 00:03:18.280
Imports that from reach router and

46
00:03:18.280 --> 00:03:22.020
the one coming from that is gonna
be an object that looks like this.

47
00:03:24.370 --> 00:03:28.120
And it's gonna be an ID and string.

48
00:03:32.340 --> 00:03:33.870
So let's deconstruct that a little bit.

49
00:03:33.870 --> 00:03:35.300
These are called generics.

50
00:03:35.300 --> 00:03:39.973
So a React component can have
various types of props and strings.

51
00:03:39.973 --> 00:03:42.479
It's flexible in that sense, right?

52
00:03:42.479 --> 00:03:45.440
And then from reach router.

53
00:03:45.440 --> 00:03:48.410
If you remember in our app.js.

54
00:03:48.410 --> 00:03:51.100
The ID here is coming from the route.

55
00:03:51.100 --> 00:03:56.418
So we have to tell TypeScript expect
this ID to come from the route.

56
00:03:56.418 --> 00:03:59.179
Getting a little bit toward some
advanced type scripture, but

57
00:03:59.179 --> 00:04:00.907
this is gonna be super helpful for you.

58
00:04:02.690 --> 00:04:07.170
&gt;&gt; Brian: So getting back to
details.tsx we're telling it hey,

59
00:04:07.170 --> 00:04:09.561
expect the ID from the route.

60
00:04:10.852 --> 00:04:14.788
&gt;&gt; Brian: Okay, so
that's where that comes from.

61
00:04:14.788 --> 00:04:17.602
So now you'll notice down here
where it was erroring out and

62
00:04:17.602 --> 00:04:23.500
said hey-
&gt;&gt; Brian: Where's the ID?

63
00:04:23.500 --> 00:04:24.200
Right here.

64
00:04:24.200 --> 00:04:25.820
Now it's not erring out an ID, right?

65
00:04:25.820 --> 00:04:27.110
Now it's like,
I know where that comes from.

66
00:04:27.110 --> 00:04:28.196
It comes from each router.

67
00:04:31.548 --> 00:04:35.120
&gt;&gt; Brian: So a bunch of this stuff, it's
gonna say like, hey, this isn't any type.

68
00:04:35.120 --> 00:04:38.217
I don't know what this is, so you have to
identify a bunch of these other things.

69
00:04:38.217 --> 00:04:42.073
One thing I was going to show you here,
while i'm thinking about it.

70
00:04:42.073 --> 00:04:47.623
There's a browser extension for
TSLint, that you should install

71
00:04:47.623 --> 00:04:53.185
it if you're using VS Code,
this one right here, the TSLint one.

72
00:04:53.185 --> 00:04:58.834
That'll show you in your VS Code instance
right away, here are your errors.

73
00:04:58.834 --> 00:05:01.553
Okay model.tsx.

74
00:05:01.553 --> 00:05:05.569
No sorry, details.tsx.

75
00:05:05.569 --> 00:05:12.659
So it's gonna say here
hey process.m.api key.

76
00:05:12.659 --> 00:05:14.281
I don't know like that might be undefined.

77
00:05:14.281 --> 00:05:14.849
That might not be there.

78
00:05:14.849 --> 00:05:20.503
What happens if someone starts this
application without process.m.api key?

79
00:05:20.503 --> 00:05:22.241
So you have to do, again,

80
00:05:22.241 --> 00:05:27.226
a type refinement is like if this
doesn't happen, stop the application.

81
00:05:27.226 --> 00:05:35.317
So if I try and
build this without process.env.API_KEY, or

82
00:05:35.317 --> 00:05:40.516
without process.env.API_SECRET,

83
00:05:42.653 --> 00:05:48.016
&gt;&gt; Brian: Then throw a new error,

84
00:05:48.016 --> 00:05:50.970
no API keys.

85
00:05:52.490 --> 00:05:56.980
So now, at this point, TypeScript knows
that, hey, if I get past this point,

86
00:05:56.980 --> 00:06:01.403
I know for a fact API_KEY exists, and
I know for a fact API_SECRET exists, so

87
00:06:01.403 --> 00:06:02.960
I'm golden at this point.

88
00:06:02.960 --> 00:06:05.652
So that's what this type
refinement is doing.

89
00:06:05.652 --> 00:06:09.655
&gt;&gt; Speaker 2: Also yes,
if this stops props.id?

90
00:06:11.196 --> 00:06:12.515
&gt;&gt; Speaker 2: Not this
stops props completely?

91
00:06:12.515 --> 00:06:13.086
Yeah.

92
00:06:19.917 --> 00:06:21.541
&gt;&gt; Brian: Yeah,
I guess that's what you would have to do.

93
00:06:21.541 --> 00:06:29.613
So if it doesn't pass it I guess
if they don't pass in anything,

94
00:06:29.613 --> 00:06:34.552
you would not do this request, right?

95
00:06:40.563 --> 00:06:44.668
&gt;&gt; Brian: Sometimes you gotta give
it a little bit of a kickstart.

96
00:06:44.668 --> 00:06:45.848
Nope.

97
00:06:45.848 --> 00:06:47.224
&gt;&gt; Speaker 3: We did a return.

98
00:06:47.224 --> 00:06:48.118
&gt;&gt; Brian: Just return?

99
00:06:48.118 --> 00:06:50.148
&gt;&gt; Speaker 3: Yeah.

100
00:06:50.148 --> 00:06:51.997
Can [INAUDIBLE] all of this?

101
00:06:51.997 --> 00:06:52.971
&gt;&gt; Brian: Yep, it does.

102
00:06:52.971 --> 00:06:55.720
It's quite sophisticated with that stuff.

103
00:06:59.480 --> 00:07:00.536
&gt;&gt; Brian: There we go.

104
00:07:00.536 --> 00:07:02.104
So now at this point, it says like.

105
00:07:04.593 --> 00:07:08.359
&gt;&gt; Brian: I know for
a fact that ID's gonna be there.

106
00:07:08.359 --> 00:07:10.642
So you can see here,
this question mark right there.

107
00:07:10.642 --> 00:07:13.910
ID question mark means it
might not be there, so

108
00:07:13.910 --> 00:07:16.698
you need to handle this night null case.

109
00:07:18.842 --> 00:07:19.735
&gt;&gt; Brian: Okay.

110
00:07:22.259 --> 00:07:23.518
&gt;&gt; Brian: Next thing.

111
00:07:28.027 --> 00:07:31.474
&gt;&gt; Brian: Inside of Pet.get then.then.

112
00:07:31.474 --> 00:07:35.238
Up here you're gonna say hey,
if they don't come back with

113
00:07:35.238 --> 00:07:38.570
data.petfinder.pet we
need to handle that case.

114
00:07:38.570 --> 00:07:43.794
I'll just say navigate to slash.

115
00:07:46.340 --> 00:07:47.154
&gt;&gt; Brian: And then return.

116
00:07:53.184 --> 00:07:56.220
&gt;&gt; Brian: Exclamation, there you go.

117
00:07:56.220 --> 00:07:59.160
Now it knows, it's like,
okay, I know pet's there.

118
00:07:59.160 --> 00:08:02.385
So then it fixed all those errors.

119
00:08:02.385 --> 00:08:04.290
So this is a common thing for
me with petfinder.

120
00:08:04.290 --> 00:08:05.941
Sometimes I kind have to massage and

121
00:08:05.941 --> 00:08:09.362
fight the types a little bit before
they're like, okay, now you got it.

122
00:08:09.362 --> 00:08:10.209
Right?

123
00:08:10.209 --> 00:08:14.196
But now I'm guaranteed this
ain't gonna crash, okay?

124
00:08:14.196 --> 00:08:20.588
As long as this comes back as a pet
response, this is not gonna crash.

125
00:08:20.588 --> 00:08:24.170
And now, this one is upset.

126
00:08:24.170 --> 00:08:25.260
What are you upset about?

127
00:08:33.173 --> 00:08:36.500
&gt;&gt; Brian: Cannot use JSX unless,
class new.

128
00:08:40.290 --> 00:08:40.938
That's what it is.

129
00:08:40.938 --> 00:08:48.090
In your tsconfig.json, jsx right there.

130
00:08:48.090 --> 00:08:51.371
Yep, uncomment that one and

131
00:08:51.371 --> 00:08:56.478
say-
&gt;&gt; Brian: React, you have to

132
00:08:56.478 --> 00:09:02.367
let TypeScript knows like by the way,
I'm doing some React stuff in here.

133
00:09:02.367 --> 00:09:06.198
So that's line nine in
here in your tsconfig.

134
00:09:10.930 --> 00:09:14.419
&gt;&gt; Brian: Okay?

135
00:09:14.419 --> 00:09:21.235
So now going into details.tsx,
now everything's okay with details.tsx.

136
00:09:21.235 --> 00:09:24.922
Okay, so far so good.

137
00:09:24.922 --> 00:09:25.897
Nailing it.

138
00:09:25.897 --> 00:09:27.836
[LAUGH]

