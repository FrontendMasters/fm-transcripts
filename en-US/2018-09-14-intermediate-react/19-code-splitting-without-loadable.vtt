WEBVTT

1
00:00:00.093 --> 00:00:01.694
&gt;&gt; Brian: So that's code splitting.

2
00:00:01.694 --> 00:00:06.547
I've given you all the tools now pretty
much to do whatever you want with the code

3
00:00:06.547 --> 00:00:07.354
splitting.

4
00:00:07.354 --> 00:00:10.929
It doesn't really get a lot
more complicated than that.

5
00:00:10.929 --> 00:00:15.864
It really is, if we're looking at
our code here, here in details,.

6
00:00:15.864 --> 00:00:16.978
This is the key right here.

7
00:00:16.978 --> 00:00:18.607
It's this import function right here.

8
00:00:18.607 --> 00:00:25.805
This is just signaling to
&gt;&gt; Brian: Parcel to go out and

9
00:00:25.805 --> 00:00:28.420
fetch this and
then this returns a promise.

10
00:00:28.420 --> 00:00:31.270
And when you call dot then on the promise
this will give you the module inside of

11
00:00:31.270 --> 00:00:32.870
the promise body.

12
00:00:32.870 --> 00:00:34.290
That's just how it works.

13
00:00:34.290 --> 00:00:36.900
So now,
it's not any more complicated than that.

14
00:00:36.900 --> 00:00:38.610
We could actually write this ourselves.

15
00:00:38.610 --> 00:00:40.656
And in fact, in version three of this,

16
00:00:40.656 --> 00:00:44.200
I make you write it yourself cuz
it really isn't very complicated.

17
00:00:44.200 --> 00:00:46.047
Probably even just pull
it up here real quick.

18
00:00:46.047 --> 00:00:47.738
Complete intro to react.

19
00:00:50.870 --> 00:00:52.256
&gt;&gt; Brian: Let's see.

20
00:00:52.256 --> 00:00:53.463
Repo.

21
00:00:58.691 --> 00:01:02.366
&gt;&gt; Brian: And if you look in the js here,

22
00:01:02.366 --> 00:01:07.374
Async Route here, this one .jsx file.

23
00:01:07.374 --> 00:01:11.992
This is about it.

24
00:01:11.992 --> 00:01:15.598
So on component to mount,
you take the loading promise and

25
00:01:15.598 --> 00:01:18.551
call dot then when
the module finally arrives.

26
00:01:18.551 --> 00:01:22.475
And I just set this dot component equals
module dot default, and then you set,

27
00:01:22.475 --> 00:01:24.330
this is loaded, and then down here.

28
00:01:24.330 --> 00:01:27.463
If it's loading you show the spinner.

29
00:01:27.463 --> 00:01:30.355
If it's not loading then
you show the component.

30
00:01:32.101 --> 00:01:34.961
&gt;&gt; Brian: So
loadable does a little bit more.

31
00:01:34.961 --> 00:01:38.539
It has retry logic and
some other fancy stuff, but at its core,

32
00:01:38.539 --> 00:01:40.304
it's nothing more than this.

33
00:01:43.195 --> 00:01:44.834
&gt;&gt; Brian: In other words,
you could write this, right?

34
00:01:44.834 --> 00:01:48.286
And you could write loadables.

35
00:01:48.286 --> 00:01:49.780
There's no black magic here.

36
00:01:54.556 --> 00:01:57.214
&gt;&gt; Brian: So again, if you actually
wanna go through that process

37
00:01:57.214 --> 00:01:59.793
just check out the version
three of this course.

38
00:01:59.793 --> 00:02:01.635
Last thing about code splitting.

39
00:02:03.583 --> 00:02:06.783
&gt;&gt; Brian: If you need to check out
the branch and see this later,

40
00:02:06.783 --> 00:02:09.928
it's the name of the branch
is code dash splitting.

41
00:02:09.928 --> 00:02:12.814
And that is at the bottom of that page.

42
00:02:12.814 --> 00:02:16.064
Of the codes splitting
in the course notes.

