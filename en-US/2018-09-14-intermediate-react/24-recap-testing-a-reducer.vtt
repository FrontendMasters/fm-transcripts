WEBVTT

1
00:00:00.421 --> 00:00:04.439
&gt;&gt; Brian Holt: So let's hammer home
a little bit like, what is a reducer?

2
00:00:04.439 --> 00:00:09.823
A reducer is a function that adheres
to just a particular contract, right?

3
00:00:09.823 --> 00:00:12.565
So notice, we're just exporting
a default function here, right?

4
00:00:12.565 --> 00:00:14.062
It's just a function.

5
00:00:14.062 --> 00:00:17.285
The function takes an old state,

6
00:00:17.285 --> 00:00:22.472
it takes in an action object and
it returns new state.

7
00:00:22.472 --> 00:00:26.152
If you follow those things,
you are a reducer.

8
00:00:26.152 --> 00:00:31.082
A reducer is also if you're comfortable
with functional programming,

9
00:00:31.082 --> 00:00:34.326
it's a pure function,
it has no side effects.

10
00:00:34.326 --> 00:00:40.760
So for example, if I had something
up here that says like, let x = 1.

11
00:00:40.760 --> 00:00:46.640
And here I did x++ and return state + x,

12
00:00:46.640 --> 00:00:50.250
I know that makes zero sense but
bear with me for a second.

13
00:00:52.190 --> 00:00:56.127
This is no longer a reducer because
this is ambient state, right?

14
00:00:56.127 --> 00:01:00.120
And if I call this function 10 billion
times, on the 10 billion and first time,

15
00:01:00.120 --> 00:01:01.558
what's the answer gonna be?

16
00:01:03.890 --> 00:01:06.180
&gt;&gt; Brian Holt: It's not gonna be the same,
right?

17
00:01:06.180 --> 00:01:07.650
So when I say it's a pure function,

18
00:01:07.650 --> 00:01:10.450
it means I can call it 10 billion
times with the same parameters and

19
00:01:10.450 --> 00:01:13.490
get the same answer on the 10 billion and
first time, right.

20
00:01:13.490 --> 00:01:16.320
So that's what a pure function
is on this particular case.

21
00:01:17.350 --> 00:01:21.416
So all reducers must be
pure functions as well.

22
00:01:21.416 --> 00:01:25.581
Now, what's great about being pure
functions if you're familiar with testing

23
00:01:25.581 --> 00:01:28.166
patterns, they're super easy to test,
right?

24
00:01:28.166 --> 00:01:32.777
Because I just have to give it some state,
some action, and

25
00:01:32.777 --> 00:01:38.587
just make sure that, in fact, the test for
this would just look like test,

26
00:01:38.587 --> 00:01:43.957
you don't have to copy this, but
just to show you what it looks like.

27
00:01:43.957 --> 00:01:48.869
This will be test on the locationReducer.

28
00:01:48.869 --> 00:01:54.018
And I would just have to say

29
00:01:54.018 --> 00:02:00.809
expect(locationReducer) with

30
00:02:00.809 --> 00:02:05.959
a state of Seattle, WA and

31
00:02:05.959 --> 00:02:12.982
an action of type SET_LOCATION and

32
00:02:12.982 --> 00:02:19.316
payload of San Francisco, CA.

33
00:02:23.156 --> 00:02:29.328
&gt;&gt; Brian Holt: Let's make
sure we get this right,

34
00:02:29.328 --> 00:02:34.480
toBe San Francisco, right?

35
00:02:34.480 --> 00:02:35.184
That's it.

36
00:02:35.184 --> 00:02:37.433
That'll be the whole test,
this entire thing.

37
00:02:37.433 --> 00:02:40.346
I read this one liner test, and
I basically get to be assured

38
00:02:40.346 --> 00:02:43.201
forever that this works exactly
the way that I want it to and

39
00:02:43.201 --> 00:02:45.493
I'm prevented against having regressions.

40
00:02:45.493 --> 00:02:47.305
Pretty cool, right?

41
00:02:47.305 --> 00:02:49.686
So that's another reason that reducers and

42
00:02:49.686 --> 00:02:53.363
read outs are cool because these
tests basically read themselves.

43
00:02:53.363 --> 00:02:56.810
And actually, I'm gonna show you later,
they've literally write themselves.

44
00:02:56.810 --> 00:03:00.172
We can actually have Redux
to generate tests for

45
00:03:00.172 --> 00:03:03.795
itself which is amazing,
and I'll show you that.

46
00:03:03.795 --> 00:03:08.249
Okay, so drop that, drop that,
so that's what a reducer is,

47
00:03:08.249 --> 00:03:13.206
it has to be a pure function that
takes an old state, and an action, and

48
00:03:13.206 --> 00:03:16.083
it returns some sort of state from that.

49
00:03:16.083 --> 00:03:21.063
Either the old state if the action type
doesn't apply to it, or the payload or

50
00:03:21.063 --> 00:03:24.218
whatever modifications you need to do,
right?

51
00:03:26.555 --> 00:03:27.783
&gt;&gt; Brian Holt: Questions about reducers?

52
00:03:27.783 --> 00:03:28.750
Does that make sense?

53
00:03:30.841 --> 00:03:32.758
&gt;&gt; Brian Holt: So we're still only
halfway through this process.

54
00:03:32.758 --> 00:03:34.424
Like we still got more steps to do.

55
00:03:34.424 --> 00:03:36.704
I'll show you how
the reducers get called but

56
00:03:36.704 --> 00:03:39.706
I need you to understand how
reducers fundamentally work.

