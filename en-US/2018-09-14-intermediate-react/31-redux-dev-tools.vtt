WEBVTT

1
00:00:00.000 --> 00:00:05.238
&gt;&gt; Brian Holt: So I've redone all this
stuff and by the way you now understand

2
00:00:05.238 --> 00:00:09.887
everything about Redux or
at least heard about Redux.

3
00:00:09.887 --> 00:00:13.787
There is a great talk
about what's simple and

4
00:00:13.787 --> 00:00:18.621
what's complex versus what's easy and
what's hard.

5
00:00:18.621 --> 00:00:23.662
Redux is simple in the sense that
there's not a lot to it, right?

6
00:00:23.662 --> 00:00:27.032
You can actually write Redux
in about 80 lines of code.

7
00:00:27.032 --> 00:00:31.039
It's really just storing an object and
giving it back at appropriate time.

8
00:00:31.039 --> 00:00:35.060
So it's simple effect that
there's not a lot to it.

9
00:00:35.060 --> 00:00:39.564
But it's damn hard, right [LAUGH]
dealing with reducers and thunks and

10
00:00:39.564 --> 00:00:42.246
all this is an entire cycle, it's hard.

11
00:00:42.246 --> 00:00:45.579
So if it feels hard that's because
in my opinion this is hard.

12
00:00:45.579 --> 00:00:50.841
And in some places, perhaps
unnecessarily hard for state management.

13
00:00:50.841 --> 00:00:55.312
But, so I guess I'm trying to say if
you're sitting there feeling this is hard

14
00:00:55.312 --> 00:01:00.014
and I don't fully grasp it, I'm giving
you permission to feel that way, right?

15
00:01:00.014 --> 00:01:03.709
It's okay that you feel that way,
for sure.

16
00:01:03.709 --> 00:01:04.529
One more thing.

17
00:01:04.529 --> 00:01:08.672
I wanna show you one of the big advantages
about Redux which is this little tab

18
00:01:08.672 --> 00:01:09.392
right here.

19
00:01:09.392 --> 00:01:11.911
The Redux Dev Tools.

20
00:01:11.911 --> 00:01:18.860
So if you are on Firefox, just Google,

21
00:01:18.860 --> 00:01:23.500
Firefox Redux Dev Tools.

22
00:01:23.500 --> 00:01:28.438
Same thing for Chrome, Redux Dev Tools.

23
00:01:28.438 --> 00:01:35.019
And if you're on Chrome, then Chrome
will work as well, Chrome Dev Tools.

24
00:01:35.019 --> 00:01:38.402
They had it on Safari,
I think they stopped supporting that one,

25
00:01:38.402 --> 00:01:39.701
I'm not actually sure.

26
00:01:39.701 --> 00:01:44.252
The nice thing about the Redux Dev Tools
is you can actually embed them inside

27
00:01:44.252 --> 00:01:47.467
of your application,
because it's all just React.

28
00:01:47.467 --> 00:01:51.592
So if you're on something like React
native or something like that,

29
00:01:51.592 --> 00:01:53.950
you can still have the Redux Dev Tools.

30
00:01:53.950 --> 00:01:56.467
You can still have some
sort of extension for it.

31
00:01:56.467 --> 00:02:00.178
Anyway, so
I have it installed here via Firefox.

32
00:02:00.178 --> 00:02:05.372
And I can see here,
I can look at all of the actions that have

33
00:02:05.372 --> 00:02:10.833
been dispatched to my,
&gt;&gt; Brian Holt: To my store,

34
00:02:10.833 --> 00:02:15.570
so I can look here,
I did an init right there.

35
00:02:15.570 --> 00:02:17.530
And I can see the state at this point.

36
00:02:17.530 --> 00:02:23.070
I can see that it Seattle Washington,
no animal, no breed, and no breeds, right?

37
00:02:23.070 --> 00:02:26.464
And then I can kinda walk
through this over time.

38
00:02:26.464 --> 00:02:28.180
So there's the init.

39
00:02:28.180 --> 00:02:30.741
Set animal,
cuz I've changed it from animal though.

40
00:02:30.741 --> 00:02:34.517
In fact, let's just start over so
you can see well, how this works.

41
00:02:34.517 --> 00:02:38.255
So, no matter what,
this at at init action will be dispatched,

42
00:02:38.255 --> 00:02:42.828
that's when it's setting up your default
state which is why you have to settle

43
00:02:42.828 --> 00:02:46.040
those defaults like I showed
you previously, right.

44
00:02:46.040 --> 00:02:48.609
Then, I'm gonna change it to dog.

45
00:02:48.609 --> 00:02:51.627
So we called SET_ANIMAL and then
immediately it calls SET_BREEDS, right?

46
00:02:51.627 --> 00:02:53.914
Because it goes out to the API and
comes back.

47
00:02:53.914 --> 00:02:56.988
So that's why there's two
different actions there.

48
00:02:56.988 --> 00:02:59.372
You can see what the action looks like.

49
00:02:59.372 --> 00:03:02.307
It'll actually give you a DIF right here,
which is quite nice, but

50
00:03:02.307 --> 00:03:04.533
you can actually see the raw
action up here as well.

51
00:03:04.533 --> 00:03:06.575
And then you can see the state afterwards.

52
00:03:09.508 --> 00:03:11.083
&gt;&gt; Brian Holt: Which is compelling, right.

53
00:03:11.083 --> 00:03:12.804
Pretty cool.

54
00:03:12.804 --> 00:03:15.245
So if I change this to cat.

55
00:03:15.245 --> 00:03:16.385
Again, you will see that.

56
00:03:16.385 --> 00:03:21.783
If I change this to calico or
something like that.

57
00:03:21.783 --> 00:03:27.767
You'll see that it's getting that and you
can see the state at this point in time.

58
00:03:27.767 --> 00:03:30.359
Which is what we'd want to see.

59
00:03:30.359 --> 00:03:36.085
If I change this to be San Francisco,
notice I'm getting

60
00:03:36.085 --> 00:03:41.828
a location change every single
time that I type, right.

61
00:03:41.828 --> 00:03:45.905
Because it's dispatching an action every
single time that I type, which is fine.

62
00:03:45.905 --> 00:03:49.555
They can see this actions
are like half tight,

63
00:03:49.555 --> 00:03:52.560
let's do something kind of fun here.

64
00:03:52.560 --> 00:03:59.082
I'm gonna pull the slider here and I'm
gonna start watch San Francisco up here.

65
00:03:59.082 --> 00:04:02.969
Let's start going backwards in time,

66
00:04:02.969 --> 00:04:07.811
this is call time traveling debugging,
right?

67
00:04:07.811 --> 00:04:12.750
Which is extremely compelling for
debugging things, cuz you can go

68
00:04:12.750 --> 00:04:18.539
backwards and forwards in time to
figure out what broke in that process.

69
00:04:18.539 --> 00:04:23.892
&gt;&gt; Brian Holt: And due to the nature
of modular transactional actions,

70
00:04:23.892 --> 00:04:25.350
we can do that.

71
00:04:27.121 --> 00:04:30.417
&gt;&gt; Brian Holt: So and I can actually like
you notice that now Seattle's there.

72
00:04:30.417 --> 00:04:33.233
And now I can go back and
I can walk through.

73
00:04:33.233 --> 00:04:35.915
And I'll unselect the breed.

74
00:04:35.915 --> 00:04:39.495
I can change to different dog, right?

75
00:04:39.495 --> 00:04:43.144
I can actually just have it
play through all the way.

76
00:04:43.144 --> 00:04:45.206
So you can see what I was doing over time.

77
00:04:49.399 --> 00:04:51.854
&gt;&gt; Brian Holt: And
that's pretty cool too, right?

78
00:04:54.363 --> 00:04:56.253
&gt;&gt; Brian Holt: As you might have imagined,

79
00:04:56.253 --> 00:04:59.326
time traveling is very useful for
debugging,

80
00:04:59.326 --> 00:05:04.233
cuz you can actually identify the exact
moment in time when things break.

81
00:05:04.233 --> 00:05:12.213
Really what this is actually doing is its
actually just removing all the actions and

82
00:05:12.213 --> 00:05:16.551
replaying them to get
you back to that state.

83
00:05:16.551 --> 00:05:20.577
Now you can actually even do,
lets just refresh this again.

84
00:05:20.577 --> 00:05:23.900
Let's say I changed this to dog, okay?

85
00:05:23.900 --> 00:05:31.980
And then I have maybe change this from
like bloodhound and then delete this.

86
00:05:31.980 --> 00:05:39.100
And then change this to maybe something
else like Black Russian Terrier, okay?

87
00:05:39.100 --> 00:05:41.284
So I have this Set_Breed, Set_Breed, and

88
00:05:41.284 --> 00:05:44.167
then between the two I have
the Set_Location, I was like.

89
00:05:44.167 --> 00:05:48.627
I wonder what happens,
like I want everything to be the same but

90
00:05:48.627 --> 00:05:51.835
I don't want that Set_Location to happen.

91
00:05:51.835 --> 00:05:55.229
I can actually say right here,
hey, you know what, skip that.

92
00:06:02.225 --> 00:06:07.095
&gt;&gt; Brian Holt: Outside on the separate, I
wanted to do it on the location, this one.

93
00:06:07.095 --> 00:06:11.616
So it'll be like that action never
happened, but everything else happened.

94
00:06:11.616 --> 00:06:14.550
So notice that like the breed still
here is Black Russian Terrier but

95
00:06:14.550 --> 00:06:17.085
I skipped the part where I
deleted Seattle, Washington.

96
00:06:17.085 --> 00:06:20.979
So you can actually remove things in and
put them back in and

97
00:06:20.979 --> 00:06:23.855
kind of see how that shakes out otherwise.

98
00:06:23.855 --> 00:06:27.860
Now an experiment that I've
previously run is like,

99
00:06:27.860 --> 00:06:31.866
I wanna see how customers
are interacting with this.

100
00:06:31.866 --> 00:06:35.104
So whenever a customer
errored out of my webpage,

101
00:06:35.104 --> 00:06:39.585
I dumped the ledger from Redux and
just sent it off to my error server.

102
00:06:39.585 --> 00:06:45.395
So that I could actually see how customers
were crashing my application, right?

103
00:06:45.395 --> 00:06:49.316
So that there's some idea around being
able to see exactly how customers

104
00:06:49.316 --> 00:06:50.740
are interacting with it.

105
00:06:50.740 --> 00:06:53.296
Because you can just look at the ledger
of how they're interacting with Redux.

106
00:06:53.296 --> 00:06:57.638
And you can see the evolution
of your app over time.

107
00:06:57.638 --> 00:07:00.910
Always be careful with tags,
cuz there's definitely GDPR and

108
00:07:00.910 --> 00:07:02.461
privacy issues around that.

109
00:07:02.461 --> 00:07:07.133
But it is possible.

110
00:07:07.133 --> 00:07:12.463
Okay, I can dispatch actions on the fly.

111
00:07:12.463 --> 00:07:13.687
There's a bunch of stuff you can do here.

112
00:07:13.687 --> 00:07:20.037
But the last one I wanted to show
you that I find to be pretty great.

113
00:07:20.037 --> 00:07:24.245
Right now I have my state,
which has no animal, right?

114
00:07:24.245 --> 00:07:29.225
And I want to write us a unit test to
test to make sure that my change animal

115
00:07:29.225 --> 00:07:31.722
works the way that I anticipate it.

116
00:07:31.722 --> 00:07:34.606
So I'm gonna change this to dog.

117
00:07:34.606 --> 00:07:39.565
And that worked the way
that I wanted it to, right?

118
00:07:39.565 --> 00:07:43.065
So I look at this right here and

119
00:07:43.065 --> 00:07:47.830
it went from being nothing to being dog.

120
00:07:47.830 --> 00:07:50.184
This works the way I anticipated, right?

121
00:07:50.184 --> 00:07:51.507
I feel good about that.

122
00:07:51.507 --> 00:07:54.102
So over here where it says test.

123
00:07:54.102 --> 00:07:57.005
I'm gonna click on that.

124
00:07:57.005 --> 00:08:00.913
It actually generated a unit test for

125
00:08:00.913 --> 00:08:06.343
me that I can just copy and
paste into my unit tests.

126
00:08:06.343 --> 00:08:08.739
Test that write themselves.

127
00:08:08.739 --> 00:08:10.135
That's pretty cool, right?

128
00:08:10.135 --> 00:08:13.803
And maybe you're not using Jest,
maybe you're using, Mocha, Tape, Ava,

129
00:08:13.803 --> 00:08:16.152
it has several different
templates here for you.

130
00:08:16.152 --> 00:08:19.461
So all I have to do is copy and
paste this entire thing.

131
00:08:19.461 --> 00:08:24.768
Just dump it into my Tests directory,
and I am done.

132
00:08:24.768 --> 00:08:27.031
So this concludes Redux.

133
00:08:27.031 --> 00:08:28.968
You now understand the basics of Redux.

134
00:08:28.968 --> 00:08:33.479
There's more advanced state management
stuff you can do, again with Sagas.

135
00:08:33.479 --> 00:08:36.500
It generally has to do with
more like orchestration

136
00:08:36.500 --> 00:08:38.405
of asynchronous data sources.

137
00:08:38.405 --> 00:08:42.984
The synchronous stuff is just this.

138
00:08:42.984 --> 00:08:48.239
You can add additional middleware, so
it's like the apply middleware stuff.

139
00:08:48.239 --> 00:08:51.557
There's like, logging middlewares and
error handling middlewares and

140
00:08:51.557 --> 00:08:52.841
other things like that, but

141
00:08:52.841 --> 00:08:55.636
this is the core library of
Redux that you've learned today.

