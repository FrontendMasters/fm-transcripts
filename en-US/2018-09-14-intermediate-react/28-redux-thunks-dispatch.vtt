WEBVTT

1
00:00:00.956 --> 00:00:05.506
&gt;&gt; Brian Holt: Everything we've done
here so far is synchronized, right?

2
00:00:05.506 --> 00:00:11.498
Someone types into a input, and
I dispatch a set location action,

3
00:00:11.498 --> 00:00:17.822
which then goes into the occasion
reducer and that updates the store.

4
00:00:17.822 --> 00:00:20.682
So that all happens one
step after another.

5
00:00:20.682 --> 00:00:25.108
There is no Ajax request in here,
there's no animations in here,

6
00:00:25.108 --> 00:00:27.566
there's no element of time in here.

7
00:00:27.566 --> 00:00:32.790
But I wanna be able to store breeds
inside of my redux store, right?

8
00:00:32.790 --> 00:00:34.296
When that is asynchronous,

9
00:00:34.296 --> 00:00:38.009
it is asynchronous because we have to
go to the Petfinder API to get it.

10
00:00:39.440 --> 00:00:44.071
&gt;&gt; Brian Holt: So let's take what
we were doing inside of search box.

11
00:00:48.726 --> 00:00:52.449
&gt;&gt; Brian Holt: Nope,
inside of app.js rather.

12
00:00:52.449 --> 00:00:55.298
App.js up here.

13
00:00:55.298 --> 00:00:56.628
This getBreeds stuff.

14
00:00:56.628 --> 00:01:02.162
I wanna take this getBreeds
&gt;&gt; Brian Holt: Request for

15
00:01:02.162 --> 00:01:06.770
information, and I want to move
that into an action creator.

16
00:01:08.700 --> 00:01:13.136
So actually, what I'm gonna do is
most of this just works as is, so

17
00:01:13.136 --> 00:01:18.078
I'm just gonna copy everything that's
in here, outside of getBreeds.

18
00:01:18.078 --> 00:01:26.777
And here, I'm gonna make a new
action creator called getBreeds.js.

19
00:01:26.777 --> 00:01:33.407
Here, I'm going to import
PF from Petfinder client.

20
00:01:35.938 --> 00:01:41.532
&gt;&gt; Brian Holt: Here,
I'll do the const petfinder

21
00:01:41.532 --> 00:01:46.753
equals pf ceremony where you have

22
00:01:46.753 --> 00:01:53.290
to get the key process.env.API_KEY.

23
00:01:53.290 --> 00:01:59.994
And secret: process.env.API_SECRET, okay?

24
00:02:01.159 --> 00:02:07.556
&gt;&gt; Brian Holt: And then, I'm gonna
export default function getBreeds.

25
00:02:12.167 --> 00:02:16.703
&gt;&gt; Brian Holt: And then, here's kinda
where it gets a little interesting is this

26
00:02:16.703 --> 00:02:20.210
has to return what's called a thunk.

27
00:02:20.210 --> 00:02:25.410
Now, a thunk is just a really dumb
computer science word for a function,

28
00:02:25.410 --> 00:02:26.020
pretty much.

29
00:02:27.520 --> 00:02:31.367
So let's just give you an example
of what a thunk could be.

30
00:02:33.517 --> 00:02:35.960
&gt;&gt; Brian Holt: Let's say I
have the price of my stock.

31
00:02:35.960 --> 00:02:37.610
You don't have to copy this part.

32
00:02:37.610 --> 00:02:39.684
Don't copy this.

33
00:02:39.684 --> 00:02:46.548
Const myStockPrice.

34
00:02:46.548 --> 00:02:50.772
And that's equal to 1,000 or
something like that.

35
00:02:50.772 --> 00:02:52.423
When I'm writing this code,

36
00:02:52.423 --> 00:02:56.070
at this moment in time,
this is statically determined, right?

37
00:02:56.070 --> 00:03:00.055
This is determined upfront because
I wrote 1,000 right there, and

38
00:03:00.055 --> 00:03:03.050
I can't change it at runtime, right?

39
00:03:03.050 --> 00:03:08.090
It's determined at the time that I write
it because I wrote 1,000 right there.

40
00:03:08.090 --> 00:03:11.431
A thunk is the idea that I don't have
to determine this at compile time,

41
00:03:11.431 --> 00:03:12.889
I can determine it at runtime.

42
00:03:12.889 --> 00:03:19.736
So instead, what I would say
is const myStockPrice would

43
00:03:19.736 --> 00:03:25.023
be equal to determineStockPrice, right?

44
00:03:25.023 --> 00:03:30.719
It would be a function that would
return to me later the stock price.

45
00:03:32.551 --> 00:03:35.326
&gt;&gt; Brian Holt: So what would be
said of determineStockPrice in this

46
00:03:35.326 --> 00:03:36.341
particular case?

47
00:03:36.341 --> 00:03:38.947
It would be called a thunk, right?

48
00:03:38.947 --> 00:03:42.922
And it's just a really fancy
way that we're using functions,

49
00:03:42.922 --> 00:03:46.981
to determine later at run time,
what the stock prices gonna be.

50
00:03:51.162 --> 00:03:54.305
&gt;&gt; Brian Holt: So,
was have anything to do with redux?

51
00:03:54.305 --> 00:03:58.711
This has to do with redux because when
I call getBreeds for the first time,

52
00:03:58.711 --> 00:04:01.854
I don't actually know what the breeds are,
right?

53
00:04:01.854 --> 00:04:04.086
They could add new breeds,
they could subtract breeds, and

54
00:04:04.086 --> 00:04:05.542
I don't wanna just put a list in there.

55
00:04:05.542 --> 00:04:09.474
I wanna determine later at runtime
what those breeds are gonna be.

56
00:04:09.474 --> 00:04:11.908
And the way I determine that
is with an Ajax request.

57
00:04:11.908 --> 00:04:14.187
So I don't wanna statically
determine it right now.

58
00:04:14.187 --> 00:04:18.973
Whereas I can say in animal.js,
this is what SET_ANIMAL is.

59
00:04:18.973 --> 00:04:25.592
I know it's a SET_ANIMAL type, right?

60
00:04:25.592 --> 00:04:28.331
And as soon as I have,
sorry, this is the reducer.

61
00:04:28.331 --> 00:04:33.918
But change animal, right?

62
00:04:33.918 --> 00:04:36.680
I know as soon as I call
this action creator,

63
00:04:36.680 --> 00:04:39.005
I know what the animal is right away.

64
00:04:39.005 --> 00:04:43.981
With a thunk, I'm gonna determine,
after I make that AJAX request later,

65
00:04:43.981 --> 00:04:46.327
to get that actual data fed into it.

66
00:04:46.327 --> 00:04:49.050
So going back to getBreeds.

67
00:04:51.212 --> 00:04:56.575
&gt;&gt; Brian Holt: This is a function
that returns a function.

68
00:05:00.286 --> 00:05:03.628
&gt;&gt; Brian Holt: And the function
that returns, that is the thunk.

69
00:05:06.693 --> 00:05:12.801
&gt;&gt; Brian Holt: So return function,
call it getBreedsThunk.

70
00:05:16.082 --> 00:05:18.124
&gt;&gt; Brian Holt: And this is fed two things.

71
00:05:18.124 --> 00:05:22.590
It's fed dispatch, and it's fed getState.

72
00:05:26.620 --> 00:05:31.567
&gt;&gt; Brian Holt: So dispatch and
getState are going to come from redux.

73
00:05:31.567 --> 00:05:35.403
Redux will provide those things for us.

74
00:05:35.403 --> 00:05:39.141
So the first thing in order to request for
the breeds that I want,

75
00:05:39.141 --> 00:05:41.508
I'm going to get the animal that I need.

76
00:05:41.508 --> 00:05:46.442
So const animal equals getSstate.

77
00:05:46.442 --> 00:05:50.023
Get state will go out and actually grab
the current state of the Redux store and

78
00:05:50.023 --> 00:05:51.135
provide it back to you.

79
00:05:51.135 --> 00:05:54.308
So in this case, I'm going and
grabbing the state in order for

80
00:05:54.308 --> 00:05:56.209
me to request the breeds that I want.

81
00:05:56.209 --> 00:06:00.548
I have to get the animal out,
which is what this is, right?

82
00:06:00.548 --> 00:06:05.945
Then, again, grabbing here from app.js,
wherever that went.

83
00:06:07.825 --> 00:06:10.063
&gt;&gt; Brian Holt: I'm gonna
go copy everything here.

84
00:06:15.772 --> 00:06:18.596
&gt;&gt; Brian Holt: And
I'm gonna go into getBreeds.

85
00:06:18.596 --> 00:06:20.734
And I'm gonna put inside of the thunk.

86
00:06:24.342 --> 00:06:29.431
&gt;&gt; Brian Holt: If, okay, and
anywhere where it says this.state.animal,

87
00:06:29.431 --> 00:06:32.872
I just need to say
&gt;&gt; Brian Holt: In fact,

88
00:06:32.872 --> 00:06:37.262
I can just do
&gt;&gt; Brian Holt: So I'm gonna select

89
00:06:37.262 --> 00:06:40.558
everywhere that I say this.state.animal
&gt;&gt; Brian Holt: Which I

90
00:06:40.558 --> 00:06:43.140
think is just those two places,
and just delete those.

91
00:06:43.140 --> 00:06:47.139
So it says if animal, then you're gonna
go out and grab the animal, right?

92
00:06:52.775 --> 00:06:55.865
&gt;&gt; Brian Holt: This does all of the same
song and dance that we have to.

93
00:06:55.865 --> 00:06:59.637
But now,
we're not gonna call setState, right?

94
00:06:59.637 --> 00:07:00.858
This isn't in React anymore.

95
00:07:00.858 --> 00:07:06.209
We need to dispatch actions
to our redux store.

96
00:07:06.209 --> 00:07:07.347
So how do we do that?

97
00:07:09.621 --> 00:07:12.685
&gt;&gt; Brian Holt: Well, we have this dispatch
function up here, that's what that's for.

98
00:07:15.598 --> 00:07:19.126
&gt;&gt; Brian Holt: So rather than calling
setState here, the way we're gonna do that

99
00:07:19.126 --> 00:07:25.334
is we're gonna say
&gt;&gt; Brian Holt: Dispatch.

100
00:07:28.601 --> 00:07:36.702
&gt;&gt; Brian Holt: And the type here is
going to be type: SET_BREEDS, right?

101
00:07:36.702 --> 00:07:39.890
Cuz that's gonna get into
our setBreeds reducer.

102
00:07:39.890 --> 00:07:42.682
And then, the payload is gonna be this.

103
00:07:48.603 --> 00:07:49.882
&gt;&gt; Brian Holt: And get rid of that.

104
00:07:54.252 --> 00:07:55.540
&gt;&gt; Brian Holt: Right?
So

105
00:07:55.540 --> 00:07:59.130
this is what this dispatch function does.

106
00:07:59.130 --> 00:08:01.420
It gives us an object to the reducer.

107
00:08:01.420 --> 00:08:04.890
And this is how you get things in
the reducers is by using dispatch.

108
00:08:08.838 --> 00:08:13.537
&gt;&gt; Brian Holt: Now, everywhere that we say
&gt;&gt; Brian Holt: That.

109
00:08:17.934 --> 00:08:20.371
&gt;&gt; Brian Holt: We'll have
to say instead of this,

110
00:08:20.371 --> 00:08:24.171
well
&gt;&gt; Brian Holt: We'll just say payload is

111
00:08:24.171 --> 00:08:24.867
empty array.

112
00:08:30.485 --> 00:08:32.480
&gt;&gt; Brian Holt: And then,
same thing down here.

113
00:08:46.321 --> 00:08:48.366
&gt;&gt; Brian Holt: That's it,
that's how thunks work.

114
00:08:50.634 --> 00:08:56.818
&gt;&gt; Brian Holt: This is the most basic way
of doing Ajax with redux, is with thunks.

115
00:09:02.618 --> 00:09:04.670
&gt;&gt; Brian Holt: Now,
you don't have to use redux this way.

116
00:09:04.670 --> 00:09:07.854
There's a myriad of
other ways that you can

117
00:09:07.854 --> 00:09:11.047
handle asynchronous actions with redux.

118
00:09:11.047 --> 00:09:15.567
You can handle all the asynchronous
actions outside of Redux.

119
00:09:15.567 --> 00:09:21.644
So if I went back to app.js here,
instead of calling this .set state,

120
00:09:21.644 --> 00:09:25.508
I could be using a dispatch
function in here.

121
00:09:25.508 --> 00:09:27.940
And handle all of the asynchronous
action inside of React.

122
00:09:27.940 --> 00:09:30.317
And then, dispatch things to Redux.

123
00:09:30.317 --> 00:09:33.002
If you're gonna use redux,
I don't think this is a good idea.

124
00:09:36.891 --> 00:09:40.085
&gt;&gt; Brian Holt: In my opinion, one of
the more elegant parts of redux is you can

125
00:09:40.085 --> 00:09:44.021
externalize all this asynchronous data
fetching into action creators, or

126
00:09:44.021 --> 00:09:45.756
thunks in this particular case.

127
00:09:48.232 --> 00:09:51.334
&gt;&gt; Brian Holt: So again, thunks are kind
of the more basic way of doing things.

128
00:09:51.334 --> 00:09:56.094
It's a function that does whatever
asynchronous action that you need to do.

129
00:09:56.094 --> 00:10:01.902
There are redux-promise, that you can
provide promises to the redux store.

130
00:10:01.902 --> 00:10:04.279
And it will unwrap those promises and

131
00:10:04.279 --> 00:10:08.275
allow you to use those promises
to dispatch actions to Redux.

132
00:10:12.864 --> 00:10:16.295
&gt;&gt; Brian Holt: There's one called
redux-observable that you can use

133
00:10:16.295 --> 00:10:18.320
observables from RxJS to do it.

134
00:10:18.320 --> 00:10:21.990
And there's another one called the
redux-sagas that you can use generators to

135
00:10:23.270 --> 00:10:23.930
do it.

136
00:10:23.930 --> 00:10:27.099
Each one of those is more
complicated than the last.

137
00:10:28.180 --> 00:10:31.990
But if you have to have multiple
layers of coordinating,

138
00:10:31.990 --> 00:10:35.360
asynchronous actions, something
like generators is what you need.

