WEBVTT

1
00:00:00.320 --> 00:00:02.460
&gt;&gt; Brian Holt: Now, starting with Redux.

2
00:00:02.460 --> 00:00:05.400
React and Redux are often mentioned in
the same sentence, to the point that there

3
00:00:05.400 --> 00:00:09.420
are many people that don't really
know where the two separate, right?

4
00:00:09.420 --> 00:00:13.380
I have consulted too many companies,
they just said well,

5
00:00:13.380 --> 00:00:15.750
we used React, so we used Redux, right?

6
00:00:15.750 --> 00:00:19.260
And they just thought the two just
are married together and just go together.

7
00:00:19.260 --> 00:00:22.260
That is not the case,
that is definitely not the case.

8
00:00:22.260 --> 00:00:25.372
You should almost never start
a project with Redux out of the box.

9
00:00:25.372 --> 00:00:29.593
Unless you have very specific requirements
that need Redux out of the box,

10
00:00:29.593 --> 00:00:33.214
I would suggest start with just
pure React and go until it hurts.

11
00:00:33.214 --> 00:00:37.600
And then once it hurts, go back and
refactor and introduce Redux.

12
00:00:37.600 --> 00:00:40.456
You're gonna see in just
a second why I say that.

13
00:00:40.456 --> 00:00:42.905
When you add Redux to a project,

14
00:00:42.905 --> 00:00:48.460
it greatly increases the complexity
of the flow of data within your app.

15
00:00:49.740 --> 00:00:53.680
The reason why it's good is it makes it
very predictable how your data flows,

16
00:00:53.680 --> 00:00:56.350
it makes it very testable how
your data mutates, right?

17
00:00:56.350 --> 00:00:59.868
These are desirable things, but
it goes from as easy as saying,

18
00:00:59.868 --> 00:01:03.398
set state would just react and
that's the end of mutating data.

19
00:01:03.398 --> 00:01:07.495
You have to go through now five or
six steps instead of one step.

20
00:01:07.495 --> 00:01:09.581
That should give you pause, I think.

21
00:01:09.581 --> 00:01:13.859
So there are benefits, but
it's a trade off, there are downsides and

22
00:01:13.859 --> 00:01:16.702
they're pretty big
downsides in my opinion.

23
00:01:18.678 --> 00:01:21.312
&gt;&gt; Brian Holt: So people accuse me of
hating on Redux or anything like that.

24
00:01:21.312 --> 00:01:23.221
I actually think Redux is
a marvel of engineering.

25
00:01:23.221 --> 00:01:27.787
I think it's a really cool library,
but it's difficult.

26
00:01:27.787 --> 00:01:32.990
When you throw these brand new developers,
or people who are new to JavaScript,

27
00:01:32.990 --> 00:01:36.596
or things like that,
it caches them up like pretty bad.

28
00:01:36.596 --> 00:01:40.777
And you can end up with kind of a mess
of a code base because you have a bunch

29
00:01:40.777 --> 00:01:45.478
of people contributing to a repo that
don't really know how write it very well.

30
00:01:45.478 --> 00:01:50.674
Redux requires a bit
of discipline as well.

31
00:01:50.674 --> 00:01:53.070
So let's talk about what React or
Redux is at its core.

32
00:01:53.070 --> 00:01:58.394
It's a central data store for
your entire repo.

33
00:01:58.394 --> 00:02:03.235
It's as if you had one React state for
your entire repo.

34
00:02:03.235 --> 00:02:06.096
That's kind of the gist
of what it does for you.

35
00:02:06.096 --> 00:02:07.753
Why is this appealing?

36
00:02:07.753 --> 00:02:12.278
Well, if you remember from when we talked
about context in the previous course.

37
00:02:12.278 --> 00:02:16.756
It's very convenient if you have multiple
different components reading from the same

38
00:02:16.756 --> 00:02:17.440
data store.

39
00:02:17.440 --> 00:02:21.779
So if you have user data, right,
if the user logs in and has their name and

40
00:02:21.779 --> 00:02:25.905
address and email, and you need to
use that on the settings page, and

41
00:02:25.905 --> 00:02:29.490
nav header, because you show
them their email and avatar.

42
00:02:29.490 --> 00:02:33.113
And you're reading this data all over
your application, it's really convenient

43
00:02:33.113 --> 00:02:35.815
to have some sort of data store
that you can read from, right?

44
00:02:35.815 --> 00:02:37.810
And you don't have to pass
those props everywhere.

45
00:02:37.810 --> 00:02:39.767
So if you have problems like that,

46
00:02:39.767 --> 00:02:43.419
that's something that Redux can
definitely help you out with.

47
00:02:43.419 --> 00:02:48.968
However, people get a little tempted
to throw everything into Redux.

48
00:02:48.968 --> 00:02:52.964
I've even seen applications where
they've out logged using React state.

49
00:02:52.964 --> 00:02:57.007
That is a terrible idea, and you've messed
up the entire reason for using React, and

50
00:02:57.007 --> 00:03:00.340
honestly you shouldn't even use
React at that point, in my opinion.

51
00:03:00.340 --> 00:03:05.118
That is a giant mistake,
to put everything in Redux.

52
00:03:05.118 --> 00:03:09.336
So again, Redux can be helpful, but
it needs to be well architected and

53
00:03:09.336 --> 00:03:11.955
it has to have a lot of
discipline around it.

54
00:03:14.515 --> 00:03:18.472
&gt;&gt; Brian Holt: Another reason why I
like Redux is it's extremely testable.

55
00:03:18.472 --> 00:03:20.664
It's testable at multiple
different levels.

56
00:03:20.664 --> 00:03:25.622
And any time you can have tests around
mutating data, that is key, whereas I was

57
00:03:25.622 --> 00:03:29.994
kind of low on testing in the testing
module for the React components.

58
00:03:29.994 --> 00:03:34.870
If you're doing Redux, test everything,
top to bottom, right, tons, and tons, and

59
00:03:34.870 --> 00:03:35.725
tons of tests.

60
00:03:35.725 --> 00:03:40.039
If you're not writing tests for
Redux, you're not using it properly.

61
00:03:40.039 --> 00:03:44.360
And Redux takes a lot of care to
make every step of the process very,

62
00:03:44.360 --> 00:03:45.450
very testable.

63
00:03:45.450 --> 00:03:48.883
Honestly it's probably the most
compelling reason to use it.

64
00:03:50.602 --> 00:03:53.839
&gt;&gt; Brian Holt: Lastly, the debugging
story on Redux is pretty great.

65
00:03:53.839 --> 00:03:57.467
We're gonna get into that at
the end of this module here, but

66
00:03:57.467 --> 00:04:01.826
let me just give you a little teaser
of the phrase time travel debugging.

67
00:04:01.826 --> 00:04:05.085
That's amazing, and we'll get there,
and I'll show you, and

68
00:04:05.085 --> 00:04:07.049
it's gonna just [SOUND] blow your mind.

69
00:04:07.049 --> 00:04:10.205
Okay,
&gt;&gt; Brian Holt: So

70
00:04:10.205 --> 00:04:16.258
when you're doing React and you have React
State Management, it's pretty simple.

71
00:04:16.258 --> 00:04:19.005
You call setState, and
you let React rerender, and

72
00:04:19.005 --> 00:04:23.009
that is just the endless cycle of calling
setState and letting it rerender.

73
00:04:23.009 --> 00:04:27.026
And that's a contract by now you
should hopefully understand.

74
00:04:27.026 --> 00:04:31.300
With Redux we add a lot
more to this process.

75
00:04:31.300 --> 00:04:34.188
So let me walk you
through some steps here.

76
00:04:34.188 --> 00:04:36.494
User types in an input box,

77
00:04:36.494 --> 00:04:41.317
that calls an action creator
to get a well formed action.

78
00:04:41.317 --> 00:04:44.154
That action is then dispatched to Redux.

79
00:04:44.154 --> 00:04:49.023
Redux then inserts that action to a route
reducer, the root reducer delegates

80
00:04:49.023 --> 00:04:53.390
that action to another correct
reducer to handle that sort of action.

81
00:04:53.390 --> 00:04:57.164
That reduce returns a new state,
and given the old state and

82
00:04:57.164 --> 00:05:01.014
the action object,
the new state becomes a storage state and

83
00:05:01.014 --> 00:05:05.420
then that is fed back into React and
calls for us to update with React.

84
00:05:05.420 --> 00:05:11.346
So I have that here as eight steps,
as opposed to one step with React.

85
00:05:11.346 --> 00:05:14.047
And I'm being a little generous, too,

86
00:05:14.047 --> 00:05:18.895
because if you have anything asynchronous
about it, it gets to be more,

87
00:05:18.895 --> 00:05:23.676
or if you have to dispatch multiple
actions, it can get a little crazy.

88
00:05:25.434 --> 00:05:29.547
&gt;&gt; Brian Holt: But each one of those steps
that I just outlined for you is testable,

89
00:05:29.547 --> 00:05:31.145
and that's pretty cool.

90
00:05:33.426 --> 00:05:36.894
&gt;&gt; Brian Holt: So this is kind of
the thing that we're gonna get into.

91
00:05:36.894 --> 00:05:40.425
So you're gonna have kind of multiple
different concepts thrown at you all at

92
00:05:40.425 --> 00:05:43.735
once, cuz the unfortunate truth of this
is you have to set up a lot of the,

93
00:05:43.735 --> 00:05:46.208
kind of infrastructure around
this to get it to work.

