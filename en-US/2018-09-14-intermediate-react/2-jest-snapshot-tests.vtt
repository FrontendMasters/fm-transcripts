WEBVTT

1
00:00:00.000 --> 00:00:04.940
&gt;&gt; Brian Holt: So
let's talk about what a snapshot test is.

2
00:00:04.940 --> 00:00:08.684
For me, I like to write tests that
are really quick to write and

3
00:00:08.684 --> 00:00:10.489
really quick to understand.

4
00:00:10.489 --> 00:00:15.821
So I don't expect details to
change very often, right?

5
00:00:15.821 --> 00:00:18.477
It's a route that details
page is finished now.

6
00:00:18.477 --> 00:00:23.265
So basically what a snapshot says is like,
I want you to dump out all of

7
00:00:23.265 --> 00:00:28.316
the markup for this, and then fail
this test if it changes in the future.

8
00:00:28.316 --> 00:00:32.094
I expect this to stay the same over time.

9
00:00:32.094 --> 00:00:37.496
In fact, it should, so
if I come back over here to my thing,

10
00:00:37.496 --> 00:00:40.128
and let's say,
&gt;&gt; Brian Holt: npx,

11
00:00:40.128 --> 00:00:43.650
which will run something
from my package.json.

12
00:00:43.650 --> 00:00:44.238
jest, so

13
00:00:44.238 --> 00:00:49.560
it's gonna run jest from my package.json,
&gt;&gt; Brian Holt: Jest

14
00:00:49.560 --> 00:00:53.776
already knows how to run babel out of the
box it's already built into jest which is

15
00:00:53.776 --> 00:00:55.021
a nice feature of that.

16
00:00:55.021 --> 00:00:59.541
And you can see here that you have
one test pass, cuz it assumes that

17
00:00:59.541 --> 00:01:04.086
The first time that you run it,
it's going to be correct, right?

18
00:01:04.086 --> 00:01:05.771
We'll go verify that.

19
00:01:05.771 --> 00:01:08.447
One thing that you'll notice
here is that it has WARNING,

20
00:01:08.447 --> 00:01:11.243
YOU CALLED JSONP IN A NON-BROWSER CONTEXT,
that's fine.

21
00:01:11.243 --> 00:01:12.424
It's fine that we did that.

22
00:01:12.424 --> 00:01:16.112
We're basically using this
petFinder client library,

23
00:01:16.112 --> 00:01:21.267
which if you try to run it in Node, it
just doesn't do anything and it warns you.

24
00:01:21.267 --> 00:01:22.640
So you can just ignore that.

25
00:01:22.640 --> 00:01:26.338
In fact if you wanna make sure that
you don't see that you just say,

26
00:01:26.338 --> 00:01:27.989
-- silent shut up jest, and

27
00:01:27.989 --> 00:01:33.468
it will just hide that as well.
&gt;&gt; Brian Holt: But you

28
00:01:33.468 --> 00:01:36.833
can see there I ran it once and the first
time it says one snapshot written and

29
00:01:36.833 --> 00:01:40.640
the second time it's just hey everything
stayed the same I'm gonna pass your test.

30
00:01:42.200 --> 00:01:46.410
So actually go into your browser
really quick you can see here does

31
00:01:46.410 --> 00:01:50.040
this new snapshots directory,
put the double underscore as well?

32
00:01:50.040 --> 00:01:53.643
If I look in it,
have this details.test.js.snap, and

33
00:01:53.643 --> 00:01:58.272
if I look in there,
&gt;&gt; Brian Holt: if you render details for

34
00:01:58.272 --> 00:02:00.954
the first time it gives
you a loading component,

35
00:02:00.954 --> 00:02:03.230
that's exactly what I expect, right?

36
00:02:03.230 --> 00:02:06.334
Because when it loads the first time,

37
00:02:06.334 --> 00:02:11.285
it's gonna mean a loading state
that's what I want it to do.

38
00:02:11.285 --> 00:02:13.463
But what happens if I come
in here to details.js.

39
00:02:16.431 --> 00:02:17.107
&gt;&gt; Brian Holt: And I come in and

40
00:02:17.107 --> 00:02:22.676
say,
&gt;&gt; Brian Holt: not

41
00:02:22.676 --> 00:02:25.161
loading lol I don't know.

42
00:02:25.161 --> 00:02:29.052
Something different than it
was expecting previously.

43
00:02:29.052 --> 00:02:32.900
So, if I come in here and say,
RUN jest again it's gonna say,

44
00:02:32.900 --> 00:02:36.600
wow, wow,
wow I was expecting to see loading...

45
00:02:36.600 --> 00:02:40.520
now, I got not loading lol,
so it fails the test, right?

46
00:02:40.520 --> 00:02:43.677
Something changed over time,
maybe I was expecting this, right?

47
00:02:43.677 --> 00:02:47.148
Or maybe I wasn't,
like I changed some other ambient thing or

48
00:02:47.148 --> 00:02:48.967
I pulled in a different module.

49
00:02:48.967 --> 00:02:51.324
All I can tell you is like,
hey this changed and

50
00:02:51.324 --> 00:02:54.886
here is what I saw change.
&gt;&gt; Brian Holt: Make sense so

51
00:02:54.886 --> 00:02:58.978
far?
&gt;&gt; Brian Holt: So

52
00:02:58.978 --> 00:03:00.327
what happens if I was
expecting this to change?

53
00:03:00.327 --> 00:03:03.658
What if I need, like I was expecting
this to always be like this,

54
00:03:03.658 --> 00:03:07.130
okay I rewrote this component, and
now I wanted to look like this.

55
00:03:07.130 --> 00:03:12.103
Really easy, you just run it again
with -u, I think that stands for

56
00:03:12.103 --> 00:03:15.520
-- update, but we'll just run it with- u.

57
00:03:15.520 --> 00:03:19.315
And now its just like cool, well you
expected that so I updated your snapshot.

58
00:03:19.315 --> 00:03:26.019
And if I go look at my snapshot again,
you'll see that it's updated.

59
00:03:26.019 --> 00:03:28.100
So now if i run it again,

60
00:03:28.100 --> 00:03:33.392
npx jest without the u.
&gt;&gt; Brian Holt: Everything

61
00:03:33.392 --> 00:03:36.693
passes.
&gt;&gt; Brian Holt: So

62
00:03:36.693 --> 00:03:38.211
let's talk about snapshot testing.

63
00:03:38.211 --> 00:03:40.628
One, don't go crazy with them.

64
00:03:40.628 --> 00:03:42.983
I know of people that's like,
I'm gonna snapshot everything.

65
00:03:42.983 --> 00:03:48.110
No, it's just a good easy-to-write,
low confidence test that like.

66
00:03:48.110 --> 00:03:51.670
This looked like this before and I expect
this to continue looking like this

67
00:03:51.670 --> 00:03:54.110
until I don't and
then I will update it, right?

68
00:03:54.110 --> 00:03:57.180
So it's a really good way to
write a low confidence test

69
00:03:57.180 --> 00:04:00.320
that these things are going,
but it's two lines, right?

70
00:04:00.320 --> 00:04:05.650
If you go look at the test again,
like how easy it is to write this.

71
00:04:05.650 --> 00:04:10.400
This is phenomenally easy to write,
that's why I think these are good test to

72
00:04:10.400 --> 00:04:12.950
just do some quick,
little confidence test to just value.

73
00:04:12.950 --> 00:04:15.890
It's like this runs, this renders,
there's no errors, and

74
00:04:15.890 --> 00:04:18.520
it comes out with what it
came out with previously.

75
00:04:18.520 --> 00:04:19.576
It's a really easy way to prevent

76
00:04:19.576 --> 00:04:26.057
regressions.
&gt;&gt; Brian Holt: The other

77
00:04:26.057 --> 00:04:27.288
thing I was gonna say here.

78
00:04:27.288 --> 00:04:29.780
Some people like to do
match inline snapshot.

79
00:04:30.830 --> 00:04:33.159
So let's just run that again,
to show you what that looks like.

80
00:04:39.362 --> 00:04:40.397
&gt;&gt; Brian Holt: It'll actually go and

81
00:04:40.397 --> 00:04:44.620
rewrite, notice I didn't write this,
it actually went in and wrote this for me.

82
00:04:44.620 --> 00:04:47.910
So we'll actually write
directly into the test.

83
00:04:47.910 --> 00:04:52.220
Some people like that, I prefer not, I
actually like the separate snapshot files.

84
00:04:52.220 --> 00:04:55.026
Because sometimes this can be very long,
right?

85
00:04:55.026 --> 00:04:57.400
You can have a huge component
that has a lot of mark up,

86
00:04:57.400 --> 00:05:01.170
it makes this testing
file to look not good.

87
00:05:01.170 --> 00:05:03.480
So I would not suggest it,

88
00:05:03.480 --> 00:05:08.840
it also said like, hey I see a snap shot
that no one's using, that's obsolete.

89
00:05:08.840 --> 00:05:13.055
So to warn you about
those kind of things too.

90
00:05:13.055 --> 00:05:16.004
So let's go make that back to snapshot,

91
00:05:16.004 --> 00:05:19.515
save that,
&gt;&gt; Brian Holt: and

92
00:05:19.515 --> 00:05:25.365
run npx again.
&gt;&gt; Brian Holt: Cool.

93
00:05:25.365 --> 00:05:28.909
And we'll go back to our details page and
make that loading again.

94
00:05:30.150 --> 00:05:35.820
And we'll run it with npxrun-u to
re-update that snapshot again.

95
00:05:35.820 --> 00:05:40.350
Now the question people often ask me is,
should I check in my snapshot files?

96
00:05:40.350 --> 00:05:42.420
Yes, you should.

97
00:05:42.420 --> 00:05:44.870
Generally, you don't
check in generated files.

98
00:05:44.870 --> 00:05:46.764
That's kind of a rule of thumb with gip.

99
00:05:46.764 --> 00:05:49.061
But this one,
if it runs on my computer this way,

100
00:05:49.061 --> 00:05:51.703
it should also run on her
computer the same way, right?

101
00:05:51.703 --> 00:05:55.230
So it should run on all the various
developers computers exactly the same way.

102
00:05:55.230 --> 00:05:56.990
So you should check in your snapshots.

103
00:05:56.990 --> 00:06:02.923
It's a part of your tests.
&gt;&gt; Brian Holt: I'm a big fan of Jest.

104
00:06:02.923 --> 00:06:04.614
I think it makes testing really easy.

105
00:06:04.614 --> 00:06:08.962
I do like the snapshot feature, but
again, don't go crazy with them and

106
00:06:08.962 --> 00:06:10.685
just realize what they are.

107
00:06:10.685 --> 00:06:12.722
They're easy to write,
low confidence test.

108
00:06:12.722 --> 00:06:16.089
They're not going to
replace normal unit tests.

109
00:06:16.089 --> 00:06:19.550
They're another layer of testing
in your testing strategy.

110
00:06:22.040 --> 00:06:25.010
As a side note, I think they're
super useful for APIs, right?

111
00:06:25.010 --> 00:06:29.080
The nice thing about snapshot
is that anything that you can

112
00:06:29.080 --> 00:06:32.280
write out to JSON can be a snapshot test,
right?

113
00:06:32.280 --> 00:06:36.160
So an API response would be a perfect
thing to write a snapshot test for.

114
00:06:37.160 --> 00:06:40.980
So definitely take that forward with you.

