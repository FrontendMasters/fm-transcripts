WEBVTT

1
00:00:00.000 --> 00:00:01.730
&gt;&gt; Brian Holt: That's all
this rootReducer does.

2
00:00:01.730 --> 00:00:05.579
So this, let's just, for fun,
let's go make rootReducer and we'll or

3
00:00:05.579 --> 00:00:08.011
the locationReducer, and we'll come back.

4
00:00:08.011 --> 00:00:09.300
So, location.js.

5
00:00:09.300 --> 00:00:10.523
We'll come in here.

6
00:00:10.523 --> 00:00:14.415
It's going to export a default function.

7
00:00:14.415 --> 00:00:17.254
And well call it the locationReducer.

8
00:00:17.254 --> 00:00:21.683
This takes in, again,
a state and an action.

9
00:00:21.683 --> 00:00:26.579
And if it arrives to this reducer,
we know that it's just

10
00:00:26.579 --> 00:00:30.772
going to do whatever it
already needs to be here.

11
00:00:30.772 --> 00:00:35.464
So we'll say const newState,

12
00:00:35.464 --> 00:00:40.158
newState = Object.assigned

13
00:00:40.158 --> 00:00:45.038
we'll give in an empty object.

14
00:00:45.038 --> 00:00:49.548
Every reducer must return a new object
that a huge key here you can't just modify

15
00:00:49.548 --> 00:00:53.268
the old state it's must be new
state that is a new object, right?

16
00:00:53.268 --> 00:00:58.133
So that is what this does, okay?

17
00:00:58.133 --> 00:01:00.238
Then we'll assign everything
from state previously.

18
00:01:00.238 --> 00:01:01.597
Cuz we don't wanna override other things.

19
00:01:01.597 --> 00:01:04.636
There could be hundreds of things
inside of this state object.

20
00:01:04.636 --> 00:01:07.453
We only wanna modify the location.

21
00:01:07.453 --> 00:01:11.126
And then the last thing,
we'll just overwrite the location.

22
00:01:11.126 --> 00:01:18.704
So location will be action.payload.

23
00:01:18.704 --> 00:01:22.744
Then down here we just return.

24
00:01:22.744 --> 00:01:29.710
NewState you try return newState.

25
00:01:29.710 --> 00:01:36.400
And really you can discard
down to return this like that.

26
00:01:36.400 --> 00:01:39.764
So this reducers not very complicated,
right?

27
00:01:39.764 --> 00:01:43.750
All it does is it just reads the payload
and assigns it to the right place.

28
00:01:43.750 --> 00:01:45.076
That's all it's doing.

29
00:01:49.639 --> 00:01:55.035
&gt;&gt; Brian Holt: Any questions about this?

30
00:01:55.035 --> 00:01:58.890
Now this is pretty round about, this is
kind of like multiple steps into this.

31
00:01:58.890 --> 00:02:01.058
None of this is very hard.

32
00:02:01.058 --> 00:02:04.810
I could of just state dot
location equals blah.

33
00:02:04.810 --> 00:02:08.590
Why am I going through all
those ritual and circumstance?

34
00:02:08.590 --> 00:02:13.920
And that question, why are we going
through all those ritual and circumstance?

35
00:02:13.920 --> 00:02:18.230
The nice thing about this, this is
mutating state like state is changing.

36
00:02:18.230 --> 00:02:24.810
99% of your bugs in your application
are from Mutating state the wrong way.

37
00:02:24.810 --> 00:02:28.200
So here,
I can write a unit test very easily for

38
00:02:28.200 --> 00:02:32.288
this to assure myself this always
happens the same way, the correct way.

39
00:02:32.288 --> 00:02:34.274
That's compelling.

40
00:02:36.096 --> 00:02:38.471
&gt;&gt; Brian Holt: Okay, so
any questions about the location reducer,

41
00:02:38.471 --> 00:02:39.751
does that make sense so far?

42
00:02:42.752 --> 00:02:44.575
&gt;&gt; Brian Holt: So
that's what this Reducer does,

43
00:02:44.575 --> 00:02:46.654
is it just delegates to other Reducers.

44
00:02:46.654 --> 00:02:51.635
Let's go into combineReducers
of why this is helpful.

45
00:02:51.635 --> 00:02:52.542
Right now,

46
00:02:52.542 --> 00:02:58.451
we're passing the entire state of
the entire world to the locationReducer.

47
00:02:58.451 --> 00:03:02.972
So if locationReducer just did this,
for example,

48
00:03:02.972 --> 00:03:09.255
this would break everything or
maybe just even did something like this.

49
00:03:09.255 --> 00:03:16.485
And it just says return
location action.payload.

50
00:03:16.485 --> 00:03:19.549
Payload.

51
00:03:19.549 --> 00:03:20.938
What happens now.

52
00:03:20.938 --> 00:03:23.931
This just obliterated everything in state,
right?

53
00:03:23.931 --> 00:03:27.851
Anything that wasn't state
previously is just gone now.

54
00:03:27.851 --> 00:03:30.970
Imagine if your application just
decided to drop all of its state?

55
00:03:30.970 --> 00:03:33.478
[LAUGH] That would break everything,
right?

56
00:03:33.478 --> 00:03:38.425
So that's why we can come back into and
not write this Reducer and

57
00:03:38.425 --> 00:03:40.632
you just combine Reducers.

58
00:03:40.632 --> 00:03:44.903
What this is gonna do which makes it
a little bit easier, comment that out for

59
00:03:44.903 --> 00:03:45.790
just a second.

60
00:03:47.430 --> 00:03:49.450
We'll put this as combined reducers.

61
00:03:49.450 --> 00:03:52.630
When this calls location, it'll use
that key name, which is the key name

62
00:03:52.630 --> 00:03:57.620
of the location, it'll pull that out and
it will provide that to here.

63
00:03:57.620 --> 00:04:01.650
So state actually won't be the entire
state, it will just be location.

64
00:04:01.650 --> 00:04:05.598
So now this Reducer only has to
worry about location problems.

65
00:04:07.677 --> 00:04:10.440
&gt;&gt; Brian Holt: So we are gonna
refactor this just a tiny bit.

66
00:04:10.440 --> 00:04:13.778
So it's going to be, we are gonna
move the action type into here.

67
00:04:13.778 --> 00:04:21.290
So switch action.type or
we don't have to use a switch,

68
00:04:21.290 --> 00:04:25.828
we can just use an if statement, so

69
00:04:25.828 --> 00:04:31.318
if action.type === SET_LOCATION.

70
00:04:32.490 --> 00:04:41.848
&gt;&gt; Brian Holt: Then return action.payload.

71
00:04:41.848 --> 00:04:45.677
else, return

72
00:04:45.677 --> 00:04:54.416
state
&gt;&gt; Brian Holt: So

73
00:04:54.416 --> 00:04:58.847
what have we changed now with combine
reducers this function now is going to be

74
00:04:58.847 --> 00:05:01.791
called every single time for
every single action.

75
00:05:01.791 --> 00:05:06.160
So not every action that comes through
here it's gonna be a set location.

76
00:05:06.160 --> 00:05:09.092
It might be a set animal one, right?

77
00:05:09.092 --> 00:05:12.278
If it's a set animal action type,
it's just gonna say,

78
00:05:12.278 --> 00:05:16.399
I don't have to care about that one,
I'm just gonna return the state as it was.

79
00:05:16.399 --> 00:05:21.346
So you always have to return something,
so you either return the old state if

80
00:05:21.346 --> 00:05:24.767
nothing needs to change or
you return the new state.

81
00:05:24.767 --> 00:05:26.080
Last thing here.

82
00:05:26.080 --> 00:05:27.830
This has to have a default state.

83
00:05:29.500 --> 00:05:34.330
So when it instantiates the application
that it has some sort of state to

84
00:05:34.330 --> 00:05:37.580
start with,
a default state if you will, right?

85
00:05:37.580 --> 00:05:39.690
So we can use default
parameters in ES6 and

86
00:05:39.690 --> 00:05:44.440
just say that the default state
of this is Seattle, Washington.

87
00:05:45.940 --> 00:05:48.520
So now, if state is null or undefined or

88
00:05:48.520 --> 00:05:50.980
anything like that,
this will now become Seattle.

89
00:05:50.980 --> 00:05:53.150
So this is the initial
state of the application.

90
00:05:54.860 --> 00:05:56.885
So now we can get rid of all of that.

91
00:06:00.830 --> 00:06:07.674
&gt;&gt; Brian Holt: And now we have our first
reducer for the location of our animal.

92
00:06:07.674 --> 00:06:09.808
Does that make sense so far?

93
00:06:09.808 --> 00:06:14.634
We still have to kind of finish out the
circle with actions and action creators,

94
00:06:14.634 --> 00:06:16.806
but we'll do that here in a second.

95
00:06:16.806 --> 00:06:22.092
If this is vexing, that's because
it's confusing, just so you know.

96
00:06:22.092 --> 00:06:26.355
It is confusing, so if it feels hard,
it's because it is.

