WEBVTT

1
00:00:00.000 --> 00:00:02.045
&gt;&gt; Brian Holt: This is something that you
should really be considering doing with

2
00:00:02.045 --> 00:00:02.673
your application.

3
00:00:02.673 --> 00:00:05.539
Particularly if your application code,
like your JavaScript bundles,

4
00:00:05.539 --> 00:00:06.885
are like over a megabyte, right?

5
00:00:06.885 --> 00:00:10.472
Because you should have like an initial
payload that's gonna be like,

6
00:00:10.472 --> 00:00:12.752
I would say no more
than like 50 kilobytes.

7
00:00:12.752 --> 00:00:16.621
If you're doing more than 50 kilobytes you
probably should try and slim down your

8
00:00:16.621 --> 00:00:20.390
initial page load to be the bare, bare
minimum to get your application started.

9
00:00:20.390 --> 00:00:23.717
Obviously it's gonna vary by what
kind of application you're doing,

10
00:00:23.717 --> 00:00:25.385
what kind of demographic you have.

11
00:00:25.385 --> 00:00:27.497
If it's an internal network thing and

12
00:00:27.497 --> 00:00:31.262
everyone's on gigabit fiber then
you don't have to care, right?

13
00:00:31.262 --> 00:00:34.676
But if you're trying to reach
rural farmers in Montana or

14
00:00:34.676 --> 00:00:39.882
you're trying to reach demographics in
India, where they have congested Internet.

15
00:00:39.882 --> 00:00:42.943
This is something you really
should be thinking about.

16
00:00:42.943 --> 00:00:47.114
And you have to remember, React itself
is already 30-something kilobytes.

17
00:00:47.114 --> 00:00:51.275
So that's already just eaten out
a big part of your application, so

18
00:00:51.275 --> 00:00:54.273
you have to be really
conscious of these things.

19
00:00:54.273 --> 00:00:57.163
You can see here, this is 871 kilobytes.

20
00:00:57.163 --> 00:01:01.889
We're building this in development
without gzipping, so that's why.

21
00:01:01.889 --> 00:01:03.820
We will make this much smaller,

22
00:01:03.820 --> 00:01:07.697
I think our application right
now is about 50 kilobytes as is.

23
00:01:11.081 --> 00:01:12.907
&gt;&gt; Brian Holt: Does anybody have
any questions about what we did?

24
00:01:12.907 --> 00:01:15.254
&gt;&gt; Speaker 2: She was talking
about like named exports.

25
00:01:15.254 --> 00:01:18.758
&gt;&gt; Brian Holt: Right, so I didn't say
import default or anything like that.

26
00:01:18.758 --> 00:01:20.654
Is that what you're getting at?

27
00:01:20.654 --> 00:01:25.096
So loadable assumes that whatever's
in details is the default export.

28
00:01:25.096 --> 00:01:28.228
There is a way that you can
define that resolution.

29
00:01:28.228 --> 00:01:30.150
You'd have to look at the documentation,
but

30
00:01:30.150 --> 00:01:32.576
there is a way around that if
it's a named export, right.

31
00:01:32.576 --> 00:01:33.890
Does that answer your question?

32
00:01:33.890 --> 00:01:35.152
Okay, cool, good question.

33
00:01:35.152 --> 00:01:37.463
Loadable makes a bunch of assumptions and

34
00:01:37.463 --> 00:01:40.241
I'm just showing you like
the bare minimum here.

35
00:01:40.241 --> 00:01:47.365
There's like five more things you
can do with it, like let's see.

36
00:01:47.365 --> 00:01:49.501
&gt;&gt; Brian Holt: Like error, I don't know,

37
00:01:49.501 --> 00:01:54.221
there's a bunch of other top
level properties you can do here.

38
00:01:56.857 --> 00:01:58.358
&gt;&gt; Brian Holt: Maybe,
yeah, that's what I can do.

39
00:02:00.662 --> 00:02:03.370
&gt;&gt; Brian Holt: isLoading,
pastDelay, timeOut, error, retry,

40
00:02:03.370 --> 00:02:06.753
you can have it have like retry logic and
some other things as well.

41
00:02:09.916 --> 00:02:13.046
&gt;&gt; Brian Holt: Yeah, modules,
I think modules is how you would fix that.

42
00:02:18.256 --> 00:02:20.906
&gt;&gt; Brian Holt: Yeah, and then the last
thing I was gonna show you is notice that

43
00:02:20.906 --> 00:02:22.068
when I first load the page.

44
00:02:22.068 --> 00:02:25.230
It's gonna go from loading,
loading, split out page, and

45
00:02:25.230 --> 00:02:27.536
then it goes to loading
cuz it loads all the.

46
00:02:27.536 --> 00:02:29.309
So I have multiple layers of loading here.

47
00:02:29.309 --> 00:02:32.989
We could probably handle this
a little bit better than we do, but

48
00:02:32.989 --> 00:02:34.565
this works for now, yeah.

49
00:02:34.565 --> 00:02:38.731
&gt;&gt; Speaker 2: Can you lazy load
components without using React loadable?

50
00:02:38.731 --> 00:02:45.759
&gt;&gt; Brian Holt: Yeah absolutely, so
let's think about how we could do that.

51
00:02:45.759 --> 00:02:49.230
All right I think I got this.

52
00:02:49.230 --> 00:02:53.998
So I'm gonna go into this one.

53
00:02:56.576 --> 00:02:59.601
&gt;&gt; Brian Holt: Okay, I'm not gonna do it
cuz I'd have to refactor a lot of the code

54
00:02:59.601 --> 00:03:02.374
here but what you could do
with petfinder-client, right?

55
00:03:02.374 --> 00:03:07.083
Because petfinder-client is always being
called inside of component didmount and

56
00:03:07.083 --> 00:03:09.147
it's already asynchronous right?

57
00:03:09.147 --> 00:03:12.979
So pretend I'm not loading
petfinder-client anywhere else, right?

58
00:03:12.979 --> 00:03:19.257
I could say up here, const pf =,
let's do it inside of here.

59
00:03:22.441 --> 00:03:30.193
&gt;&gt; Brian Holt: const pf = import
petfinder-client, like this.

60
00:03:30.193 --> 00:03:37.249
And then I would say, petfinder =
&gt;&gt; Brian Holt: This

61
00:03:37.249 --> 00:03:38.705
would be PF promise actually.

62
00:03:42.791 --> 00:03:49.639
&gt;&gt; Brian Holt: pfPromise.then,
then you would have PF here, right?

63
00:03:49.639 --> 00:03:52.864
And then inside of this promise body
you would have PF available to you.

64
00:03:52.864 --> 00:03:57.301
And then you could do all of this
stuff inside of that promise, right?

65
00:03:57.301 --> 00:04:02.037
And you would have to move obviously all
of this stuff into there as well, right?

66
00:04:02.037 --> 00:04:05.394
But you can define break points anywhere,
it doesn't have to be routes,

67
00:04:05.394 --> 00:04:07.357
it doesn't have to be anything like that.

68
00:04:07.357 --> 00:04:13.156
Like, in fact, the next thing I want to,
yeah, let's finish this out.

69
00:04:13.156 --> 00:04:18.782
That's a good point and I think I will,
&gt;&gt; Brian Holt: Yeah,

70
00:04:18.782 --> 00:04:21.972
show you some more things you can
do here with the React loadable.

71
00:04:21.972 --> 00:04:25.218
But yeah, you can define
those import points anywhere,

72
00:04:25.218 --> 00:04:29.220
you just have to use this import
function where ever I put that, this.

73
00:04:32.893 --> 00:04:35.732
&gt;&gt; Brian Holt: So that's parcel doing
that for you behind the scenes, right?

74
00:04:35.732 --> 00:04:38.884
It's not React or anything like that,
parcel's doing that.

75
00:04:38.884 --> 00:04:42.437
Same with webpack, will do exactly
the same thing the exact same way.

