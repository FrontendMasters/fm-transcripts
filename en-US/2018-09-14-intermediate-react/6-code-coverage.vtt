WEBVTT

1
00:00:00.000 --> 00:00:04.803
&gt;&gt; Brian Holt: We're gonna add one
more thing here which is gonna be

2
00:00:04.803 --> 00:00:06.557
test:coverage.

3
00:00:06.557 --> 00:00:11.645
And we're gonna do again jest

4
00:00:11.645 --> 00:00:16.536
--silent --coverage.

5
00:00:16.536 --> 00:00:21.463
There's another library that
jest incorporates inside of

6
00:00:21.463 --> 00:00:25.668
it called Istanbul
&gt;&gt; Brian Holt: What Istanbul does code

7
00:00:25.668 --> 00:00:27.134
coverage reports for you.

8
00:00:27.134 --> 00:00:30.984
Which is it should be familiar to many
of your developers out there, but

9
00:00:30.984 --> 00:00:35.025
if you are not familiar with it it's going
to tell you how much of your code is

10
00:00:35.025 --> 00:00:36.074
covered by tests.

11
00:00:36.074 --> 00:00:40.420
So I think the best way to show is
just to show you someone run mpm run

12
00:00:40.420 --> 00:00:41.696
test:coverage.

13
00:00:47.141 --> 00:00:52.071
&gt;&gt; Brian Holt: And you can see here
these all have pretty bad coverage this

14
00:00:52.071 --> 00:00:54.089
is why they're in red.

15
00:00:54.089 --> 00:00:58.134
Of all the files that you have imported
into test, which keep in mind,

16
00:00:58.134 --> 00:01:00.620
I have a lot of other
files that I haven't.

17
00:01:00.620 --> 00:01:03.291
This is just the ones
that are being imported.

18
00:01:03.291 --> 00:01:08.937
Only 22% of them are covered by state or
22% of statements are covered by tests.

19
00:01:08.937 --> 00:01:10.053
That's really low.

20
00:01:10.053 --> 00:01:15.082
Anything under 80 is
probably not sufficient.

21
00:01:15.082 --> 00:01:21.496
7% of branches, 21% of functions, but
I still did pass all my tests, right?

22
00:01:21.496 --> 00:01:23.507
&gt;&gt; Speaker 2: What's a branch?

23
00:01:23.507 --> 00:01:26.779
&gt;&gt; Brian Holt: A branch can be like
you covered the if statement but

24
00:01:26.779 --> 00:01:29.149
you didn't cover the L statements.

25
00:01:29.149 --> 00:01:35.366
All right, so actually let's show you
even a step further, if you hit ls now.

26
00:01:35.366 --> 00:01:38.048
You can see I have this
coverage directory.

27
00:01:38.048 --> 00:01:39.920
You should ignore this first of all.

28
00:01:39.920 --> 00:01:42.136
This is generated by Istanbul.

29
00:01:42.136 --> 00:01:44.180
I'm going to go into coverage and

30
00:01:44.180 --> 00:01:47.393
it will give you a bunch of stats and
stuff like that.

31
00:01:47.393 --> 00:01:50.094
You can feed this in through a JSon file,
but

32
00:01:50.094 --> 00:01:53.678
the interesting one here is
the lcov-report directory.

33
00:01:53.678 --> 00:01:58.435
So if you go into there,
and I say open index.html,

34
00:01:58.435 --> 00:02:03.421
this is just going to open it
in my default web browser.

35
00:02:03.421 --> 00:02:05.133
In my case, I'm in Mac so this works.

36
00:02:05.133 --> 00:02:07.424
This doesn't work in Linux and
I don't think in PowerShell either.

37
00:02:07.424 --> 00:02:14.210
But just, whatever the case,
open this index.html file in a browser and

38
00:02:14.210 --> 00:02:18.374
you'll get a nice
generated report of this.

39
00:02:18.374 --> 00:02:21.130
And I can actually click
in the details and

40
00:02:21.130 --> 00:02:24.686
I can see all this stuff you
didn't cover with tests.

41
00:02:24.686 --> 00:02:27.001
You didn't cover the error case.

42
00:02:27.001 --> 00:02:28.661
You didn't render all this stuff.

43
00:02:28.661 --> 00:02:29.906
None of this works, right?

44
00:02:29.906 --> 00:02:34.231
So you can see here,
this loading thing was covered, right?

45
00:02:34.231 --> 00:02:38.467
We did a good job of covering that, but
we didn't cover the rest of this so

46
00:02:38.467 --> 00:02:41.112
that's why we get pretty
bad code coverage.

47
00:02:41.112 --> 00:02:46.092
But that's interesting we didn't
actually test Modal.js did we, right?

48
00:02:46.092 --> 00:02:51.416
We didn't write that, but if you remember,
that's imported into the details page.

49
00:02:51.416 --> 00:02:56.069
So if I go into here as well,
&gt;&gt; Brian Holt: Notice this stuff is

50
00:02:56.069 --> 00:02:56.727
all ran once.

51
00:02:56.727 --> 00:02:58.386
You can see that by the 1 x right there.

52
00:02:58.386 --> 00:03:01.013
That's probably pretty hard to see.

53
00:03:01.013 --> 00:03:02.993
So you can see this was run once, but

54
00:03:02.993 --> 00:03:06.827
nothing inside of Modal was ever
actually tested because our test and

55
00:03:06.827 --> 00:03:10.949
actually instantiate modal,
did render Modal or do anything like that.

56
00:03:10.949 --> 00:03:16.578
So we have the guarantee
that if I import Modal,

57
00:03:16.578 --> 00:03:20.676
it's not going to throw an error.

58
00:03:20.676 --> 00:03:23.032
But we're not assured of
anything more than that.

59
00:03:25.391 --> 00:03:27.694
&gt;&gt; Brian Holt: So
this is really useful as well.

60
00:03:27.694 --> 00:03:34.358
Another cool part of jest and
Istanbul in general.

61
00:03:36.289 --> 00:03:38.232
&gt;&gt; Brian Holt: And the nice thing
is I didn't have to set this up.

62
00:03:38.232 --> 00:03:41.469
If you've ever had to set up
Istanbul by hand it's a pain.

63
00:03:41.469 --> 00:03:48.460
So it's really nice that jest
just has this built into it.

64
00:03:48.460 --> 00:03:50.772
So before you like, I'm gonna do this,

65
00:03:50.772 --> 00:03:54.988
I'm gonna get 100% test coverage and
it's gonna make me look great.

66
00:03:54.988 --> 00:03:58.973
I want you to warn you of
the false god of test coverage.

67
00:03:58.973 --> 00:04:02.551
People think that if you
have 100% test coverage,

68
00:04:02.551 --> 00:04:04.970
that means my repo is well-tested.

69
00:04:04.970 --> 00:04:07.079
Well, as you saw with Modal.js,

70
00:04:07.079 --> 00:04:11.317
I had 16% test coverage of Modal.js
with a garbage test, right?

71
00:04:11.317 --> 00:04:15.060
It told me absolutely nothing other
than this didn't throw an error.

72
00:04:15.060 --> 00:04:16.542
There's no syntax errors.

73
00:04:16.542 --> 00:04:19.206
That's about all I got from Modal.js.

74
00:04:19.206 --> 00:04:24.822
It's possible to have absolutely
garbage test and 100% test coverage.

75
00:04:24.822 --> 00:04:28.204
So what you should use test coverage for

76
00:04:28.204 --> 00:04:33.340
is that I'm not covering less
of my code with test, right?

77
00:04:33.340 --> 00:04:36.796
It's kind of a relative thing,
so relatively to previously,

78
00:04:36.796 --> 00:04:41.232
I'm maintaining how much test I have,
the goal is not a 100% test coverage,

79
00:04:41.232 --> 00:04:43.010
the goal is good tests, right?

80
00:04:43.010 --> 00:04:46.333
The goal is having,
if I launch new code inter production,

81
00:04:46.333 --> 00:04:48.201
I'm not going to crash, right?

82
00:04:48.201 --> 00:04:51.314
That's what test is gonna help you do, and

83
00:04:51.314 --> 00:04:55.042
a 100% test covers doesn't mean that,
okay?

84
00:04:55.042 --> 00:04:58.079
So I rather have 50% test
coverage with great test,

85
00:04:58.079 --> 00:05:00.864
then a 100% test coverage
with garbage test.

