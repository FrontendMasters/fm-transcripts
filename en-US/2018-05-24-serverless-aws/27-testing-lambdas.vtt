WEBVTT

1
00:00:03.170 --> 00:00:05.460
&gt;&gt; Scott Moss: The next thing we're gonna
do is we're gonna write some tests.

2
00:00:05.460 --> 00:00:08.661
So because what good is all
this if we're not writing

3
00:00:08.661 --> 00:00:12.185
tests?
&gt;&gt; Scott Moss: I'm gonna checkout to

4
00:00:12.185 --> 00:00:12.925
lesson 4.

5
00:00:12.925 --> 00:00:17.600
And basically, lesson 4 is like
the same thing as lesson 3 solution.

6
00:00:17.600 --> 00:00:22.054
And leading up to what I was saying
about me abstracting this app out is so

7
00:00:22.054 --> 00:00:24.410
that I can write tests for it.

8
00:00:24.410 --> 00:00:25.980
This is pretty much what
you're gonna be doing.

9
00:00:25.980 --> 00:00:28.210
So there's a couple
ways you can test this.

10
00:00:28.210 --> 00:00:31.680
If you think about it,
you can just forget about lambda, right?

11
00:00:31.680 --> 00:00:34.460
Just forget about it,
you're just testing an express out.

12
00:00:34.460 --> 00:00:38.400
And at that point, you could test this
however you want, this is an express out.

13
00:00:38.400 --> 00:00:41.056
But then if you're like,
well actually, yeah,

14
00:00:41.056 --> 00:00:44.866
I wanna test what's happening in
lambda and see what's going on here.

15
00:00:44.866 --> 00:00:47.709
Let me get this to go away.

16
00:00:47.709 --> 00:00:50.340
I wanna test this whole thing.

17
00:00:50.340 --> 00:00:53.720
You could do that too, but
what good is that gonna do?

18
00:00:53.720 --> 00:00:55.670
Really, it's just testing some
library that you downloaded.

19
00:00:55.670 --> 00:00:58.640
What's the point of doing that,
at least in this example?

20
00:00:58.640 --> 00:01:01.020
So I don't really recommend testing that.

21
00:01:01.020 --> 00:01:05.580
And also It's a good practice, and
I talked about this yesterday in

22
00:01:05.580 --> 00:01:09.670
the other course, that when you
create these functions like that,

23
00:01:09.670 --> 00:01:13.710
you just don't put stuff in this
function that you can't test, right?

24
00:01:13.710 --> 00:01:16.240
So for instance, let's get rid of this.

25
00:01:16.240 --> 00:01:17.150
Let's just get rid of this for now.

26
00:01:19.600 --> 00:01:23.686
And I just write my own function here.
&gt;&gt; Scott Moss: And

27
00:01:23.686 --> 00:01:26.870
I got the event, the context.

28
00:01:28.820 --> 00:01:31.580
And then I decide to come in here and
I'm gonna make another function.

29
00:01:33.340 --> 00:01:34.950
How are you gonna test this function?

30
00:01:36.410 --> 00:01:40.720
Can you tell me how you're
gonna test this function?

31
00:01:40.720 --> 00:01:42.110
You can't test this function.

32
00:01:42.110 --> 00:01:45.480
You can only test that it ran
like testing this function.

33
00:01:46.660 --> 00:01:49.639
This function was declared inside
of handler so there's no way,

34
00:01:49.639 --> 00:01:51.000
you don't have access to it.

35
00:01:51.000 --> 00:01:53.555
You can't just say,
let me grab function two and test it.

36
00:01:53.555 --> 00:01:58.267
You can't, it's stuck in this function so
the only way that you could ever test it

37
00:01:58.267 --> 00:02:02.254
is if you were to call it in here at
one point and then you test handler.

38
00:02:02.254 --> 00:02:06.062
And then find some way to, I mean,
what you would have to do is

39
00:02:06.062 --> 00:02:09.875
you would expect this function
to do some type of mutation and

40
00:02:09.875 --> 00:02:13.640
then hopefully that mutation
is returned by this handler.

41
00:02:13.640 --> 00:02:16.344
And then you'd check the mutation for
a value,

42
00:02:16.344 --> 00:02:19.873
that is the worst way to test something,
that's really bad.

43
00:02:19.873 --> 00:02:20.730
Just don't do it.

44
00:02:20.730 --> 00:02:24.810
Or unless you're like,
I'm gonna put some state up here again and

45
00:02:24.810 --> 00:02:26.326
I will mutate that state down here.

46
00:02:26.326 --> 00:02:29.990
You're like man and then you're gonna
test this state to see if it changed.

47
00:02:29.990 --> 00:02:33.140
That's really bad, so don't do that.

48
00:02:33.140 --> 00:02:37.670
You won't be able to test anything and
you're gonna drive yourself crazy.

49
00:02:37.670 --> 00:02:39.680
So what you should do instead is one,

50
00:02:39.680 --> 00:02:43.178
don't declare things like
that in your functions and

51
00:02:43.178 --> 00:02:47.940
instead declare other functions and
use them inside of this function.

52
00:02:47.940 --> 00:02:50.850
And you can just test them individually,
and everything's good to go.

53
00:02:50.850 --> 00:02:56.270
So that's what I recommend doing which
is why I have this set out here.

54
00:02:56.270 --> 00:02:57.180
Everybody follow me on that?

55
00:02:58.180 --> 00:02:59.890
It's just good testing, in general.

56
00:02:59.890 --> 00:03:02.550
And I don't know how that
applies to other languages, but

57
00:03:02.550 --> 00:03:04.400
in JavaScript that's definitely the truth.

58
00:03:06.020 --> 00:03:09.760
So as far as writing tests, what you can
do is we'll just make a new file in here

59
00:03:09.760 --> 00:03:12.920
and we'll call this api.spec.js.

60
00:03:12.920 --> 00:03:14.340
We're gonna be using jests for

61
00:03:14.340 --> 00:03:18.860
testing, which should already
be set up in the package.json.

62
00:03:18.860 --> 00:03:20.390
And it's just a simple command, jest.

63
00:03:20.390 --> 00:03:22.090
There's some other options
we can pass here, but

64
00:03:22.090 --> 00:03:25.900
we're not using databases and
we're not doing anything like that.

65
00:03:25.900 --> 00:03:28.370
So we can just use
the default jest command.

66
00:03:28.370 --> 00:03:31.590
Default, it'll look for
a spec file and run it for us.

67
00:03:31.590 --> 00:03:32.360
We don't have to do anything.

68
00:03:32.360 --> 00:03:36.310
And luckily for us,
jest is basically Mocha, but better.

69
00:03:36.310 --> 00:03:39.470
So if you know Mocha, I'm sorry,
it's basically Jasmine, but better.

70
00:03:39.470 --> 00:03:42.770
But then Jasmine is also just
Mocha cuz Mocha came from Jasmine.

71
00:03:42.770 --> 00:03:44.130
So they're all the same.

72
00:03:44.130 --> 00:03:46.550
So you can just come in here and
you just write some text.

73
00:03:46.550 --> 00:03:50.609
So I'm gonna say describe API.

74
00:03:50.609 --> 00:03:53.174
And just to see if this is working,
I'm gonna say test.

75
00:03:53.174 --> 00:03:56.312
Instead of saying it, I'm gonna say test
which is what jest likes to use, but

76
00:03:56.312 --> 00:04:02.898
I believe you can still say it.
&gt;&gt; Scott Moss: And

77
00:04:02.898 --> 00:04:07.135
then expect is built into jest,
so I can just say expect and

78
00:04:07.135 --> 00:04:10.620
I'm just gonna say expect (1) toBe(1).

79
00:04:10.620 --> 00:04:14.445
And we'll see if that runs,
just to make sure our test isn't

80
00:04:14.445 --> 00:04:19.621
broken.
&gt;&gt; Scott Moss: Yeah,

81
00:04:19.621 --> 00:04:21.820
looks like it should be okay.

82
00:04:21.820 --> 00:04:26.840
So what we're going to
do is go into this API.

83
00:04:26.840 --> 00:04:29.080
I want you to think of a strategy
of how you want to test this.

84
00:04:29.080 --> 00:04:32.590
My recommendation is test
this the express way.

85
00:04:32.590 --> 00:04:36.120
Use an express type thing to test this and

86
00:04:36.120 --> 00:04:38.970
I can give you a hint
of what you could use.

87
00:04:38.970 --> 00:04:44.914
If you look at the package at JSON,
there's this, right here,

88
00:04:44.914 --> 00:04:49.370
supertest if you use that,
you could just look it up.

89
00:04:49.370 --> 00:04:54.280
I would use that to test my ExpressUp,
it's pretty simple.

90
00:04:54.280 --> 00:04:56.340
So I always have some tests and
do that and

91
00:04:56.340 --> 00:05:00.700
see if you can just get some tests running
for this which will be really cool.

92
00:05:00.700 --> 00:05:03.040
And it shouldn't take too long,
there's no right or wrong here.

93
00:05:03.040 --> 00:05:07.660
I just want you to get in the habit
of realizing that writing tests for

94
00:05:07.660 --> 00:05:11.300
a lambda function is pretty much the same
thing as writing a test for anything,

95
00:05:11.300 --> 00:05:13.100
if you write it in such a way.

96
00:05:13.100 --> 00:05:17.230
You should never be at the point where
you're testing the event object and

97
00:05:17.230 --> 00:05:19.050
the context object.

98
00:05:19.050 --> 00:05:21.000
If you're testing that,
it's like, what are you doing?

99
00:05:21.000 --> 00:05:22.230
Why are you doing that?

100
00:05:22.230 --> 00:05:23.140
You shouldn't even be testing that.

101
00:05:23.140 --> 00:05:26.770
Make another function that takes
the values from those objects and

102
00:05:26.770 --> 00:05:27.620
test those things.

103
00:05:27.620 --> 00:05:30.090
You shouldn't be testing
the handlers themselves.

104
00:05:30.090 --> 00:05:34.670
That's not your job to ensure that the
handler is receiving the right arguments.

105
00:05:34.670 --> 00:05:38.020
That's AWS's job, so
you shouldn't be testing those.

106
00:05:38.020 --> 00:05:39.630
If your handler's not
receiving the right argument,

107
00:05:39.630 --> 00:05:42.320
there's nothing you can do about it and
passing tests isn't gonna help you.

108
00:05:42.320 --> 00:05:45.010
Your function is gonna fail
because AWS messed up, so

109
00:05:45.010 --> 00:05:46.060
there's no point in testing that.

