WEBVTT

1
00:00:00.130 --> 00:00:02.652
&gt;&gt; Scott: Onto what we really want to
talk about now that we know events.

2
00:00:02.652 --> 00:00:06.500
And we know about what's
happening on lambda.

3
00:00:06.500 --> 00:00:09.700
But what we really wanted to
do was create an API, right?

4
00:00:09.700 --> 00:00:11.817
We all wanna create an API with lambdas,

5
00:00:11.817 --> 00:00:15.048
that's kind of what we're
all thinking about.

6
00:00:15.048 --> 00:00:17.866
But eventually, when you'll get to
the point where you'll realize there's so

7
00:00:17.866 --> 00:00:19.076
many things I can do with a lambda.

8
00:00:19.076 --> 00:00:21.886
But the first step is always an API,
cuz that's where you're coming from.

9
00:00:21.886 --> 00:00:25.116
You're coming from creating an API on a
traditional server or something like that.

10
00:00:25.116 --> 00:00:28.852
And you'll mess around with it and you'll
be like, wow, actually I can do this.

11
00:00:28.852 --> 00:00:32.810
And I can break this lambda out, and
I can do all this crazy, crazy stuff.

12
00:00:32.810 --> 00:00:35.940
And then you get hit with performance,
you realize it was a bad idea, so

13
00:00:35.940 --> 00:00:36.570
you don't do it.

14
00:00:36.570 --> 00:00:40.040
[LAUGH] But what we wanna do is
we wanna start with those APIs.

15
00:00:40.040 --> 00:00:44.528
So if we're still on AWS, and
this is just to show you what's happening.

16
00:00:44.528 --> 00:00:49.300
There's this thing here called an API
Gateway, and it's literally a gateway for

17
00:00:49.300 --> 00:00:49.932
your API.

18
00:00:49.932 --> 00:00:55.355
You can think of it like a proxy in
front of whatever you want it to be.

19
00:00:55.355 --> 00:00:58.590
In this case, we're gonna put it
in front of our lambda functions.

20
00:00:58.590 --> 00:01:06.200
So it's gonna be responsible for
routing our HTTP events to our lambdas.

21
00:01:06.200 --> 00:01:08.170
That's what this API
gateway is gonna be for.

22
00:01:08.170 --> 00:01:09.910
You can come on here and
you can create one.

23
00:01:09.910 --> 00:01:11.800
Remember, I told you,
we don't have to do this.

24
00:01:11.800 --> 00:01:14.984
We can do it through through
a configuration file,

25
00:01:14.984 --> 00:01:17.249
because creating out here is really bad.

26
00:01:17.249 --> 00:01:18.910
I do not recommend it.

27
00:01:18.910 --> 00:01:21.498
So we're gonna do that on.

28
00:01:21.498 --> 00:01:26.664
And the event that we're
gonna be subscribing to,

29
00:01:26.664 --> 00:01:32.789
if we go back to the lambda console and
we click on the lambda,

30
00:01:32.789 --> 00:01:37.500
and we click on test,
we click on one of these.

31
00:01:37.500 --> 00:01:42.480
The event that we're gonna subscribe
to is the API Gateway AWS Proxy event.

32
00:01:42.480 --> 00:01:44.230
So let's just take a look
at this event realquick.

33
00:01:46.180 --> 00:01:47.070
Pretty crazy, right?

34
00:01:47.070 --> 00:01:49.024
There's a lot of stuff in here.

35
00:01:49.024 --> 00:01:52.390
But the things you're gonna immediately
recognize is there's a body.

36
00:01:52.390 --> 00:01:54.050
So if you do a post request, you got that.

37
00:01:54.050 --> 00:01:59.595
The resource is the URL, the non-formatted
URL that someone made a request to.

38
00:01:59.595 --> 00:02:05.215
And then you got all this meta information
about a request context and what identity,

39
00:02:05.215 --> 00:02:10.080
IM user, IP address, and all this stuff,
what stage this lambda was in.

40
00:02:10.080 --> 00:02:13.550
Of course you got headers,
any path parameters,

41
00:02:13.550 --> 00:02:16.750
the method that was called,
and tons of stuff.

42
00:02:16.750 --> 00:02:18.660
So this is all you would need, so

43
00:02:18.660 --> 00:02:21.350
your lambda could be able
to respond to HTTP request.

44
00:02:21.350 --> 00:02:25.160
This event is formatted
from the API Gateway.

45
00:02:25.160 --> 00:02:30.290
So when someone issues an HTTP request
to your API Gateway, the gateway format

46
00:02:30.290 --> 00:02:34.870
this object based on the incoming request
and sends it to your lambda as an event.

47
00:02:34.870 --> 00:02:36.450
It does that for you.

48
00:02:36.450 --> 00:02:39.290
Now there's two different
API Gateway events.

49
00:02:39.290 --> 00:02:44.430
There's a proxy and then there's just
basically like forwarding, almost.

50
00:02:44.430 --> 00:02:48.100
We're gonna use the proxy,
because when we use a proxy,

51
00:02:48.100 --> 00:02:52.930
this gives our lambdas power to control
what the response object looks like.

52
00:02:52.930 --> 00:02:57.120
Without that,
we would have to go to AWS API Gateway and

53
00:02:57.120 --> 00:03:00.490
we have to use their GUI to determine
what the response would look like,

54
00:03:00.490 --> 00:03:03.040
using something called velocity
templates or something like that.

55
00:03:03.040 --> 00:03:06.300
It's not the fun, it's really bad,
I do not recommend doing that.

56
00:03:06.300 --> 00:03:07.120
So by default,

57
00:03:07.120 --> 00:03:11.108
serverless automatically uses the proxy
implementation of API Gateway.

58
00:03:11.108 --> 00:03:14.549
And I don't recommend going away
from that, just stay with the proxy.

59
00:03:14.549 --> 00:03:18.470
You don't even have to do anything, just
use the API Gateway and you're good to go.

60
00:03:19.560 --> 00:03:22.800
If you want to do non-proxy stuff,
just don't do it.

61
00:03:22.800 --> 00:03:23.690
It's not smart.

62
00:03:25.740 --> 00:03:27.234
Great, any questions on that
before we get into, yes?

63
00:03:27.234 --> 00:03:31.519
&gt;&gt; Speaker 2: So you basically got
the documentation that you need for

64
00:03:31.519 --> 00:03:36.823
how to set up a request by going
through the process of creating this.

65
00:03:36.823 --> 00:03:37.399
&gt;&gt; Scott: Exactly, yep.

66
00:03:37.399 --> 00:03:40.060
&gt;&gt; Speaker 2: Is there
documentation elsewhere?

67
00:03:40.060 --> 00:03:43.880
If I was gonna create my
own API documentation for

68
00:03:43.880 --> 00:03:49.090
my consumers, I need those headers, the
way that they're formatted or whatever.

69
00:03:49.090 --> 00:03:51.745
Where do I find that information
outside of this console?

70
00:03:51.745 --> 00:03:55.417
&gt;&gt; Scott: So are you saying that,
you have an API for your consumers and

71
00:03:55.417 --> 00:03:59.669
you wanna provide them documentation
of how they can access your API?

72
00:03:59.669 --> 00:04:02.185
&gt;&gt; Speaker 2: That's right.
This is gonna be my API.

73
00:04:02.185 --> 00:04:06.785
This API Gateway is gonna be what
I'm providing to my customers.

74
00:04:06.785 --> 00:04:09.635
How do I,
where is documentation that I create.

75
00:04:09.635 --> 00:04:12.985
Do I need to create it from that
window that you just made, or

76
00:04:12.985 --> 00:04:15.034
is there other Amazon-
&gt;&gt; Scott: Amazon-

77
00:04:15.034 --> 00:04:16.656
&gt;&gt; Speaker 2: Or AWS documentation I can

78
00:04:16.656 --> 00:04:17.830
get that from?

79
00:04:17.830 --> 00:04:22.500
&gt;&gt; Scott: Amazon does not have,
I guess you would call it a portal.

80
00:04:22.500 --> 00:04:25.218
They don't have a documentation
portal to even offer to users, so

81
00:04:25.218 --> 00:04:26.584
you're kind of screwed on that.

82
00:04:26.584 --> 00:04:33.675
[LAUGH] But when it comes down to this-
&gt;&gt; Speaker 2: I

83
00:04:33.675 --> 00:04:36.230
can fish in there, it's okay.

84
00:04:36.230 --> 00:04:38.150
I can go in there, and
see what I need to have.

85
00:04:38.150 --> 00:04:41.660
&gt;&gt; Scott: Right, but what I was gonna
say is you can change this, right?

86
00:04:41.660 --> 00:04:47.340
For instance, if we look at this
API proxy, like this is the events.

87
00:04:48.410 --> 00:04:51.640
Your users don't have to
send something like this.

88
00:04:51.640 --> 00:04:53.350
You see what I mean?
This is not what they'll be sending.

89
00:04:53.350 --> 00:04:53.937
&gt;&gt; Speaker 2: Right.
&gt;&gt; Scott: They won't be sending.

90
00:04:53.937 --> 00:04:57.261
This is what API Gateway formats for you.

91
00:04:57.261 --> 00:04:58.519
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott: They'll just send a regular

92
00:04:58.519 --> 00:04:59.752
HTTP request like they've normally done.

93
00:04:59.752 --> 00:05:01.731
And the API Gateway's like, okay, cool.

94
00:05:01.731 --> 00:05:02.316
&gt;&gt; Speaker 2: All right.

95
00:05:02.316 --> 00:05:03.818
&gt;&gt; Scott: Based on that,
here's what the lambda gets.

96
00:05:03.818 --> 00:05:04.704
Does that make sense?

97
00:05:04.704 --> 00:05:06.088
&gt;&gt; Speaker 2: That does make sense.

98
00:05:06.088 --> 00:05:08.975
&gt;&gt; Scott: Yeah, and
AWS API gateway is not like, yeah,

99
00:05:08.975 --> 00:05:11.427
it's the one that they want you to use.

100
00:05:11.427 --> 00:05:14.659
But there's other API Gateways
out there like Kong or,

101
00:05:14.659 --> 00:05:17.147
I can't even, I've used so many of them.

102
00:05:17.147 --> 00:05:20.688
But yeah, when they call in,
they might have lambda integrations and

103
00:05:20.688 --> 00:05:24.050
then they format the events
completely different.

104
00:05:24.050 --> 00:05:26.460
So it really depends on
what's calling your lambda.

105
00:05:26.460 --> 00:05:31.750
It's just API Gateway, you gotta think
about it as they're the ones, API Gateway

106
00:05:31.750 --> 00:05:35.510
is the tool that's calling your lambda and
not so much your user, right?

107
00:05:35.510 --> 00:05:36.010
Okay.

