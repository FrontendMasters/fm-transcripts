WEBVTT

1
00:00:00.260 --> 00:00:03.761
&gt;&gt; Scott: Any questions on ServerLess,
Lambda, AWS,

2
00:00:03.761 --> 00:00:08.629
any of this crazy stuff I just
mentioned or anything in general?

3
00:00:13.374 --> 00:00:16.084
&gt;&gt; Scott: Yes?
&gt;&gt; Speaker 2: You had mentioned keeping

4
00:00:16.084 --> 00:00:20.144
something warm earlier,
how does one do that?

5
00:00:20.144 --> 00:00:22.782
&gt;&gt; Scott: Yeah,
how does one keep something warm?

6
00:00:22.782 --> 00:00:26.296
Okay, there's a couple ways.

7
00:00:26.296 --> 00:00:29.440
So when I said keeping something warm,
when you deploy a Lambda,

8
00:00:29.440 --> 00:00:31.784
basically the reason
it's called ServerLess,

9
00:00:31.784 --> 00:00:34.714
is because you don't have to
maintain the infrastructure.

10
00:00:34.714 --> 00:00:37.505
But there's still infrastructure there and
there's a container there.

11
00:00:37.505 --> 00:00:41.547
That container spins up every
time your Lambda's accessed and

12
00:00:41.547 --> 00:00:45.291
then it tends to stay around there for
some period of time.

13
00:00:45.291 --> 00:00:48.487
And it will stay longer if you
continue accessing that Lambda,

14
00:00:48.487 --> 00:00:50.493
although eventually it will recycle.

15
00:00:50.493 --> 00:00:54.437
So that's what's called keeping it warm
because that time from spinning up a new

16
00:00:54.437 --> 00:00:57.630
container to your Lambda actually
running is called Cold Start.

17
00:00:57.630 --> 00:01:00.217
So you can keep that warm by
just pinging your Lambda,

18
00:01:00.217 --> 00:01:02.127
so that really depends on your Lambda.

19
00:01:02.127 --> 00:01:04.607
So if your Lambda is
a API Lambda o API Gateway,

20
00:01:04.607 --> 00:01:08.803
you could probably just set up a row or a
git request to it like some status page or

21
00:01:08.803 --> 00:01:11.243
something right, so
that will keep it warm.

22
00:01:11.243 --> 00:01:16.573
If your Lambda is not exposed by HTTP and
it's like some backgrounds off, then

23
00:01:16.573 --> 00:01:21.924
you can subscribe a LAmbda to an interval
which is at the top of event you can do.

24
00:01:21.924 --> 00:01:24.960
And on the interval you can just run the
Lambda, which will then keep them warm.

25
00:01:24.960 --> 00:01:28.825
So there's many ways to do it, but
at the end of the day as long as you

26
00:01:28.825 --> 00:01:32.972
invoke a Lambda on some interval then
that would increase the longevity

27
00:01:32.972 --> 00:01:38.260
of the container that it's in, which will
decrease the chance of a cold start.

28
00:01:38.260 --> 00:01:39.664
So that's what I mean by keeping it warm.

29
00:01:39.664 --> 00:01:43.552
But eventually, you're gonna run into
a cold start, and when you do it's gonna

30
00:01:43.552 --> 00:01:47.689
suck, for real, especially if your Lambdas
are big, we run into that problem a lot.

31
00:01:47.689 --> 00:01:52.183
We have five-second API calls sometimes,
so it's kind of bad.

32
00:01:52.183 --> 00:01:55.379
But also that has a lot to do
with our code, we had a really

33
00:01:55.379 --> 00:01:59.194
bad database infrastructure set up too,
so it's a lot of things.

34
00:01:59.194 --> 00:02:01.438
It's basically just
compounds all the way down,

35
00:02:01.438 --> 00:02:04.441
so you kind of gotta have some clean
code to take advantage of that.

36
00:02:04.441 --> 00:02:09.527
And for awhile I wasn't convinced that
Lambda would be a good approach yet

37
00:02:09.527 --> 00:02:13.805
for something that was being used
that a client had to wait on.

38
00:02:13.805 --> 00:02:15.611
Lambda's great for
anything in the background, hands down.

39
00:02:15.611 --> 00:02:17.521
But then when it comes do to, all right,

40
00:02:17.521 --> 00:02:20.291
this is an API request somebody's
gonna be waiting on it.

41
00:02:20.291 --> 00:02:24.706
I wasn't convinced that it was ready but
now with things like CloudFlare Workers,

42
00:02:24.706 --> 00:02:26.419
FaunaDB, service databases.

43
00:02:26.419 --> 00:02:27.352
I'm convinced that,

44
00:02:27.352 --> 00:02:30.112
actually you can get really good
performance out of these things.

45
00:02:30.112 --> 00:02:34.817
Even with a code start penalty,
because you can actually use, you can grab

46
00:02:34.817 --> 00:02:39.536
that performance back by having service
databases and things on the edge.

47
00:02:39.536 --> 00:02:42.355
So where as before when it first came out,
I mean couldn't get an API

48
00:02:42.355 --> 00:02:45.830
call faster than 200 milliseconds,
there's just nothing you can do about it.

49
00:02:45.830 --> 00:02:47.863
So that's not the case anymore.

50
00:02:47.863 --> 00:02:51.781
&gt;&gt; Speaker 3: What do people use,
or what did you use as

51
00:02:51.781 --> 00:02:56.513
an alternative to avoid
the cold starts before?

52
00:02:56.513 --> 00:03:00.938
Or what's, if you're gonna have
a bigger application that you wanna

53
00:03:00.938 --> 00:03:04.544
serve always running,
what's the alternative in AWS?

54
00:03:04.544 --> 00:03:07.033
&gt;&gt; Scott: If you want a bigger
application that's always running,

55
00:03:07.033 --> 00:03:09.534
just a traditional server,
is what what you're asking?

56
00:03:09.534 --> 00:03:10.360
&gt;&gt; Speaker 3: Yeah, I guess so,

57
00:03:10.360 --> 00:03:13.219
you're just gonna host it on
a traditional server at that point?

58
00:03:13.219 --> 00:03:16.049
&gt;&gt; Scott: Yeah,
you just put it on Beanstalk, or EC2,

59
00:03:16.049 --> 00:03:20.634
or you can look at FarGate,
which is basically server-less containers.

60
00:03:20.634 --> 00:03:25.114
So AWS Fargate, I don't know where
they come up with these names,

61
00:03:25.114 --> 00:03:28.326
it's like they have a hat,
like Harry Potter.

62
00:03:28.326 --> 00:03:34.555
You're like Fargate, so yeah, this one is,
it's like service containers basically.

63
00:03:34.555 --> 00:03:38.253
So this one will run containers for you in
servers or clusters without you managing

64
00:03:38.253 --> 00:03:41.640
the underlying infrastructure and
it will only charge you when you use it.

65
00:03:41.640 --> 00:03:48.555
That would probably be the long,
server version of Serverless I guess.

66
00:03:48.555 --> 00:03:51.059
&gt;&gt; Speaker 3: That's cool,
gonna ask, getting at.

67
00:03:51.059 --> 00:03:51.676
Cool.

68
00:03:51.676 --> 00:03:56.060
&gt;&gt; Speaker 4: This one doesn't work
with Kubernetes, though, I don't think?

69
00:03:57.630 --> 00:03:58.995
&gt;&gt; Scott: Probably not,
I haven't really looked too much into it.

70
00:03:58.995 --> 00:03:59.850
Let me see.
&gt;&gt; Speaker 4: The last,

71
00:03:59.850 --> 00:04:01.965
if you scroll down,
it's the last line down there.

72
00:04:01.965 --> 00:04:09.306
Right there, support for EKS, yeah.

73
00:04:09.306 --> 00:04:12.398
&gt;&gt; Scott: Okay, yeah,
there's another one too.

74
00:04:12.398 --> 00:04:14.161
I forgot what it's called,
but it's in preview.

75
00:04:14.161 --> 00:04:17.592
And that one might be- I
think that's EKS actually.

76
00:04:17.592 --> 00:04:18.973
Yeah, EKS, okay, yeah.

77
00:04:18.973 --> 00:04:21.179
Fargate support for
EKS will be available 2018.

78
00:04:21.179 --> 00:04:23.329
Yeah, it's coming.

79
00:04:27.043 --> 00:04:27.593
&gt;&gt; Scott: Any other questions?

80
00:04:29.049 --> 00:04:32.880
For API gateway cuz API
gateway's not that good.

81
00:04:32.880 --> 00:04:35.275
Check out Kong, Kong's really dope.

82
00:04:35.275 --> 00:04:37.053
Not the dog toy.

83
00:04:37.053 --> 00:04:41.428
&gt;&gt; [LAUGH]
&gt;&gt; Scott: [LAUGH] Get Kong, yeah.

84
00:04:41.428 --> 00:04:43.630
So this is lie ,y shape,
they pivoted and they do Kong now.

85
00:04:43.630 --> 00:04:46.680
They have a paid enterprise plan,
super expensive.

86
00:04:46.680 --> 00:04:48.049
So if you've got the money, look into it.

87
00:04:48.049 --> 00:04:50.223
But the open source version
is actually really cool.

88
00:04:50.223 --> 00:04:54.660
It's a LUA based API gateway,
based off LUA and NGINX,

89
00:04:54.660 --> 00:04:57.411
which is really amazing and fast.

90
00:04:57.411 --> 00:04:59.156
The open source version is really good,
and

91
00:04:59.156 --> 00:05:01.479
there's tons of open source
dashboards that tie into it.

92
00:05:01.479 --> 00:05:04.299
We use for the longest, so
we're probably gonna go back to it.

93
00:05:04.299 --> 00:05:08.861
Highly recommend using this over API
gateway, way better, way more extensive.

94
00:05:08.861 --> 00:05:12.430
Way better things as far as
authentication strategies.

95
00:05:12.430 --> 00:05:17.346
You could do so many more things here,
had no problems with it whatsoever.

96
00:05:17.346 --> 00:05:20.550
And it's free if you do the open source,
but here we got some questions here.

97
00:05:20.550 --> 00:05:25.252
What do you think of Dino Gels
with Dynamo DVs when using Lambda.

98
00:05:25.252 --> 00:05:28.750
I've never heard of Dino Gel,
that sounds like a toothpaste.

99
00:05:28.750 --> 00:05:32.341
But let me see what that is,

100
00:05:32.341 --> 00:05:37.272
it's a DynmoDBMapper, it's like an ORM.

101
00:05:37.272 --> 00:05:39.552
I have no opinion on Dynmo gels, but

102
00:05:39.552 --> 00:05:44.492
I think if there's any abstraction
around DynamoDB it's probably a safe bet

103
00:05:44.492 --> 00:05:48.302
because interacting with
DynamoDB natively is horrible.

104
00:05:48.302 --> 00:05:49.569
So yeah, I would say, go for it.

105
00:05:49.569 --> 00:05:52.524
And using of a Lambda?

106
00:05:52.524 --> 00:05:53.873
Yeah, of course, definitely.

107
00:05:53.873 --> 00:05:57.027
Would you recommend using
DynamoDB disadvantages?

108
00:05:57.027 --> 00:05:58.661
I would recommend using DynamoDB.

109
00:05:58.661 --> 00:06:03.751
I think it's the best bet you could
use for AWS right now in your lambdas.

110
00:06:03.751 --> 00:06:07.572
As long as you don't plan on doing things
like analytics on your database and

111
00:06:07.572 --> 00:06:10.556
anything like that, but
as far as feature set goes, yeah,

112
00:06:10.556 --> 00:06:12.243
it's pretty straight forward.

113
00:06:12.243 --> 00:06:14.158
It's gonna give you the best support for
Lambda,

114
00:06:14.158 --> 00:06:16.356
you're gonna be able to
subscribe to different events.

115
00:06:16.356 --> 00:06:18.571
You're gonna be able to do
a lot of different things, but

116
00:06:18.571 --> 00:06:20.479
you're gonna be stuck in
the Amazon ecosystem.

117
00:06:20.479 --> 00:06:24.007
So you won't be able to benefit
from tools that only work with SQL,

118
00:06:24.007 --> 00:06:28.291
some type of business analytics dashboard
unless you pipe it to some other ETL and

119
00:06:28.291 --> 00:06:31.133
put it through there, or
you track it with segments.

120
00:06:31.133 --> 00:06:32.561
So there's some things there, but

121
00:06:32.561 --> 00:06:34.756
that's kinda true with any
non-based SQL database.

122
00:06:34.756 --> 00:06:37.378
So I would say, yeah,
definitely at least give it a shot,

123
00:06:37.378 --> 00:06:40.066
especially if you don't plan
on leaving AWS anytime soon.

124
00:06:40.066 --> 00:06:43.224
But if you plan on,
we might go to DigitalOcean or

125
00:06:43.224 --> 00:06:47.029
something later on then don't
do it because it's only for AWS.

126
00:06:47.029 --> 00:06:53.331
What's your opinion about CIICD options,
I code Pipeline, I code build?

127
00:06:53.331 --> 00:06:57.679
I don't use any of those CIIs that AWS
has, I think they're just, I don't know,

128
00:06:57.679 --> 00:07:00.451
like I don't like things
that don't look good, and

129
00:07:00.451 --> 00:07:02.991
they don't look good to
me I'll just say that.

130
00:07:02.991 --> 00:07:07.029
So I've been using Travis and circle
lately, Travis has been pretty good.

131
00:07:07.029 --> 00:07:10.772
So Jenkins is kind of old school for me, I
don't really like the way it looks either,

132
00:07:10.772 --> 00:07:12.533
kind of picky on things that look good.

133
00:07:12.533 --> 00:07:13.954
&gt;&gt; Speaker 3: Do you use code pipeline?

134
00:07:13.954 --> 00:07:16.679
&gt;&gt; Scott: They use code pipeline,
so there you go.

135
00:07:16.679 --> 00:07:18.810
It probably works good,
I just don't like the way it looks.

136
00:07:18.810 --> 00:07:24.278
And I should, I got free credits, maybe
I should check it out but I don't know.

137
00:07:27.331 --> 00:07:30.491
&gt;&gt; Scott: Okay, I think that's it,
any other questions?

138
00:07:30.491 --> 00:07:32.771
Last call for some questions.

139
00:07:32.771 --> 00:07:36.307
All right, thanks for coming.

140
00:07:36.307 --> 00:07:40.386
Everybody is well equipped
to do some server less now.

141
00:07:40.386 --> 00:07:43.976
If there's any other questions, feel
free to email me, reach out on Twitter,

142
00:07:43.976 --> 00:07:45.380
Ahead of Mark, but thank you.

143
00:07:45.380 --> 00:07:49.557
[APPLAUSE]

