WEBVTT

1
00:00:00.100 --> 00:00:03.792
&gt;&gt; Scott Moss: Now,
how would you test this locally, right?

2
00:00:03.792 --> 00:00:04.874
How would you run,

3
00:00:04.874 --> 00:00:08.469
how could you test booking your
hotel locally on your machine?

4
00:00:08.469 --> 00:00:10.210
There's just no way.

5
00:00:10.210 --> 00:00:13.070
But if you click on it,
it'll give you this object right here.

6
00:00:13.070 --> 00:00:16.630
And the reason that I showed you that
event.json before is because that workflow

7
00:00:16.630 --> 00:00:20.940
allows you to take this object,
bring it back to your machine locally, and

8
00:00:20.940 --> 00:00:23.951
now you can write your lamda's to
respond to this type of event.

9
00:00:23.951 --> 00:00:26.010
And therefore, you can run it locally.

10
00:00:26.010 --> 00:00:28.076
But again, I said there's trade-offs.

11
00:00:28.076 --> 00:00:31.690
Because if your lambda's using
resources that AWS needs, or

12
00:00:31.690 --> 00:00:35.810
that it needs AWS, then it might
be kind of hard to run it locally.

13
00:00:35.810 --> 00:00:39.600
So you still might have
to test it in AWS itself.

14
00:00:39.600 --> 00:00:42.180
So it really depends on your Lambda and
what it's doing, and

15
00:00:42.180 --> 00:00:44.510
what resources it's trying to grab.

16
00:00:44.510 --> 00:00:48.230
But this is probably the closest thing
you're gonna get to running a local uses.

17
00:00:48.230 --> 00:00:51.780
It's grabbing this event object,
messing around with the payload, and

18
00:00:51.780 --> 00:00:53.550
then testing your Lambda functions.

19
00:00:53.550 --> 00:00:54.341
It's also great for

20
00:00:54.341 --> 00:00:57.278
testing as well to make sure your Lambda
responds to these types of events.

21
00:00:57.278 --> 00:00:58.654
Does that make sense?

22
00:01:00.320 --> 00:01:04.484
&gt;&gt; Scott Moss: Cool, and then, as far as
testing it on AWS, again, you click this

23
00:01:04.484 --> 00:01:09.180
Test button, when you select this event,
you pick the event that you want.

24
00:01:09.180 --> 00:01:10.600
You can give it a name to save it later.

25
00:01:10.600 --> 00:01:12.490
You could even create
your own custom event.

26
00:01:12.490 --> 00:01:14.996
You just hit this Create right here,
or I'll give it a name.

27
00:01:20.129 --> 00:01:23.275
&gt;&gt; Scott Moss: My God, there we go.

28
00:01:23.275 --> 00:01:24.560
&gt;&gt; Scott Moss: I'll hit Create.

29
00:01:24.560 --> 00:01:27.290
So that'll make the event,
you can see it's loaded up right here.

30
00:01:27.290 --> 00:01:31.470
And if I just hit Test, it's going
to run my lambda with that event.

31
00:01:31.470 --> 00:01:33.592
And then, I can look at the logs and
look at the details, and

32
00:01:33.592 --> 00:01:34.499
I can see what happened.

33
00:01:34.499 --> 00:01:38.094
So this is how you would
test it on AWS itself.

34
00:01:40.602 --> 00:01:42.630
&gt;&gt; Scott Moss: Everybody follow me there?

35
00:01:42.630 --> 00:01:45.330
And that's about literally
all I do on AWS with lambda.

36
00:01:45.330 --> 00:01:46.878
When it comes with
anything else with lambda,

37
00:01:46.878 --> 00:01:48.115
I don't touch anything else on AWS.

38
00:01:48.115 --> 00:01:50.690
There's really not much
else you have to touch.

39
00:01:50.690 --> 00:01:53.870
When you get to the deployment,
you'll see everything we do here

40
00:01:54.920 --> 00:01:57.360
can pretty much be configured
through Serverless.

41
00:01:57.360 --> 00:01:58.870
And without getting too deep,

42
00:01:58.870 --> 00:02:02.485
that's because Serverless is using
something called Cloud Formation.

43
00:02:02.485 --> 00:02:04.586
Does anybody ever use CloudFormation?

44
00:02:06.665 --> 00:02:08.104
&gt;&gt; Scott Moss: Kinda, okay, all right.

45
00:02:08.104 --> 00:02:13.470
Cloud Formation is basically like,
okay, you see all this crap here?

46
00:02:13.470 --> 00:02:17.748
Instead of coming on here and
clicking on all the services you need and

47
00:02:17.748 --> 00:02:19.592
trying to tie them together,

48
00:02:19.592 --> 00:02:24.190
CloudFormation is an API that you can
use from the CLI that does it for you.

49
00:02:24.190 --> 00:02:28.260
You basically create a configuration
file that's a CloudFormation file, and

50
00:02:28.260 --> 00:02:29.540
you send that to Amazon.

51
00:02:29.540 --> 00:02:30.840
Amazon creates all this stuff for you.

52
00:02:32.020 --> 00:02:32.970
That's what CloudFormation is.

53
00:02:32.970 --> 00:02:35.120
But even that file's really hard to use.

54
00:02:35.120 --> 00:02:37.860
So service is an abstraction
on top of that file.

55
00:02:37.860 --> 00:02:41.509
That's basically what service is, it's
an abstraction on top of AWS' abstraction.

56
00:02:43.290 --> 00:02:45.440
That's how complicated it is.

57
00:02:45.440 --> 00:02:49.340
So that means whatever is
available on CloudFormation,

58
00:02:49.340 --> 00:02:51.450
we also have available on Serverless.

59
00:02:51.450 --> 00:02:56.130
And support for CloudFormation as far
as these services go, are pretty high.

60
00:02:56.130 --> 00:03:00.291
I would say Amazon has at least 80% of
all their services on CloudFormation, and

61
00:03:00.291 --> 00:03:03.010
they're adding more support daily.

62
00:03:03.010 --> 00:03:06.000
So if it's on CloudFormation,
Service also has it.

63
00:03:06.000 --> 00:03:08.620
Therefore, we can configure
it inside of our YAML file.

64
00:03:08.620 --> 00:03:09.770
Therefore, we'd never
have to come in here.

65
00:03:10.860 --> 00:03:11.830
So, really cool.

