WEBVTT

1
00:00:00.180 --> 00:00:00.820
&gt;&gt; Instructor: So here's a function.

2
00:00:02.010 --> 00:00:03.825
You can see it's literally a handler.

3
00:00:03.825 --> 00:00:04.920
It takes an event and a callback.

4
00:00:06.060 --> 00:00:09.430
Okay, this is advance, man,
I don't wanna talk about this.

5
00:00:09.430 --> 00:00:11.090
Okay, I'm gonna talk about it.

6
00:00:11.090 --> 00:00:16.060
This right here is a node-specific
thing in Lambda, only for

7
00:00:16.060 --> 00:00:17.530
a node, because it's asynchronous.

8
00:00:17.530 --> 00:00:19.430
This basically means, so by default,

9
00:00:19.430 --> 00:00:23.290
Lambda will wait until the event loop
is empty before it decides to exit.

10
00:00:25.310 --> 00:00:27.430
Who here doesn't know
what the event loop is?

11
00:00:27.430 --> 00:00:28.340
So I can describe that.

12
00:00:28.340 --> 00:00:31.200
It's totally fine, it's an advanced thing
if you don't know what the event loop is,

13
00:00:31.200 --> 00:00:33.850
especially if you don't know JavaScript.

14
00:00:33.850 --> 00:00:38.420
An event loop is basically how
JavaScript does asynchronous things.

15
00:00:38.420 --> 00:00:40.429
An event loop, you can think of it like,

16
00:00:41.960 --> 00:00:46.180
JavaScript is constantly going from top
to bottom to run synchronous operations.

17
00:00:46.180 --> 00:00:49.991
When it comes across on the asynchronous,
it puts it in a table to be processed

18
00:00:49.991 --> 00:00:52.455
later at the bottom of
this synchronous test, and

19
00:00:52.455 --> 00:00:56.208
it continues on that process until
there is nothing registered, right, so

20
00:00:56.208 --> 00:00:58.572
that's an event loop and
it keeps doing that.

21
00:00:58.572 --> 00:01:02.220
By default,
the Lambda is going to continue to

22
00:01:02.220 --> 00:01:07.800
be open until there's nothing left
on that asynch table basically.

23
00:01:07.800 --> 00:01:10.390
This tells it to ignore that.

24
00:01:10.390 --> 00:01:13.020
Just when I call done, be done.

25
00:01:13.020 --> 00:01:15.050
When I run this call back,
just cut it off,

26
00:01:15.050 --> 00:01:17.400
I don't care if there's anything
hanging in the background.

27
00:01:17.400 --> 00:01:19.710
This is useful for database connections.

28
00:01:19.710 --> 00:01:24.000
So if you connect to something pretty much
anything other than dynamo DV and Lambda,

29
00:01:24.000 --> 00:01:26.310
which is why I did not talk
about databases in this course,

30
00:01:26.310 --> 00:01:28.210
because it's extremely complicated.

31
00:01:28.210 --> 00:01:32.290
You will have to do this, otherwise
a database connection is a long lift

32
00:01:32.290 --> 00:01:36.370
connection and if you call the call
back inside of a lambda, it still won't

33
00:01:36.370 --> 00:01:40.310
exit because there's still asynchronous
things hanging there at the background,

34
00:01:40.310 --> 00:01:41.520
your database connection.

35
00:01:41.520 --> 00:01:45.800
This tells Lambda to ignore that
database connection and exit anyway.

36
00:01:45.800 --> 00:01:48.660
So very complicated,
that's what that first line is.

37
00:01:48.660 --> 00:01:50.990
And then if we just look,
you can see it's kinda just.

38
00:01:50.990 --> 00:01:52.550
I mean, what is it doing here?

39
00:01:52.550 --> 00:01:54.280
It looks like it's
making a request object.

40
00:01:55.490 --> 00:01:57.730
It's waiting for the next tick.

41
00:01:59.340 --> 00:02:02.450
Yeah, it's basically just simulating
requests, I mean, I'm sorry,

42
00:02:02.450 --> 00:02:04.500
it's just simulating express.

43
00:02:04.500 --> 00:02:06.050
It's pretty simple here.

44
00:02:06.050 --> 00:02:09.730
So yeah, nothing too fancy, but yeah,
that's basically what it's doing.

45
00:02:09.730 --> 00:02:12.310
It's satisfying whatever expressed needs,
but

46
00:02:12.310 --> 00:02:17.690
in the context of the Lambda's arguments.

