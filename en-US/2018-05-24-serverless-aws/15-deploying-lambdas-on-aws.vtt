WEBVTT

1
00:00:01.920 --> 00:00:05.036
&gt;&gt; Scott Moss: In this next lesson,
we're going to go ahead and

2
00:00:05.036 --> 00:00:09.915
deploy all of this stuff to AWS, and
walk through what that actually means.

3
00:00:09.915 --> 00:00:13.430
What's different on AWS other than
what we already talked about.

4
00:00:13.430 --> 00:00:17.492
And how to do things like
environment variables, and

5
00:00:17.492 --> 00:00:20.116
looking at logs, and debugging.

6
00:00:20.116 --> 00:00:23.471
And things like that and
just kind of get a kind of sense

7
00:00:23.471 --> 00:00:26.916
of what a lambda function looks like and
what it means.

8
00:00:26.916 --> 00:00:30.431
Before we start, are there any
questions of the previous lessons,

9
00:00:30.431 --> 00:00:33.590
when we rushed off to lunch,
that I might not have answered?

10
00:00:35.977 --> 00:00:37.810
&gt;&gt; Scott Moss: All right,
well, let's hop right into it.

11
00:00:37.810 --> 00:00:41.648
So there's not another branch for this
because you don't really have to change

12
00:00:41.648 --> 00:00:44.522
a lot of code for
this one because we're mostly deploying.

13
00:00:44.522 --> 00:00:49.080
But I'm just going to deploy this and then
we're going to walk through some stuff.

14
00:00:49.080 --> 00:00:52.394
So first things first is talking
about a couple of ways you can deploy

15
00:00:52.394 --> 00:00:54.092
using the Serverless framework.

16
00:00:54.092 --> 00:00:59.403
If we go look at the terminal here,
just type in sls, and we go to help,

17
00:00:59.403 --> 00:01:04.640
you can also look at the docs for
this, there's a few things to note.

18
00:01:06.693 --> 00:01:11.270
&gt;&gt; Scott Moss: One is the deploy function
and you can see right there it says deploy

19
00:01:11.270 --> 00:01:15.420
a Serverless service, so,
what is a Serverless service?

20
00:01:15.420 --> 00:01:18.378
Well, remember if you go back
to our serverless.yml file,

21
00:01:18.378 --> 00:01:19.949
you will find a service is this.

22
00:01:19.949 --> 00:01:24.635
Basically, you can think of a service as
pretty much every function that's going to

23
00:01:24.635 --> 00:01:27.020
be listed here, that's a service.

24
00:01:27.020 --> 00:01:30.641
You can have multiple services in one
repo, you just put them in other folders.

25
00:01:30.641 --> 00:01:33.230
And each one of those folders will
have it's own serverless.yml file.

26
00:01:33.230 --> 00:01:37.470
So you can totally do that, I've tried
that before, I don't think it works good,

27
00:01:37.470 --> 00:01:38.994
mostly just around like git.

28
00:01:38.994 --> 00:01:42.510
There's just issues with git and
how that works.

29
00:01:42.510 --> 00:01:44.969
Because Serverless doesn't allow you to,

30
00:01:44.969 --> 00:01:48.833
if you want to run these serverless
commands from your command line.

31
00:01:48.833 --> 00:01:54.250
It's going to assume that you're in a
directory that has a serverless.yml file.

32
00:01:54.250 --> 00:01:58.231
So if you have multiple folders with
multiple serverless.yml files in them.

33
00:01:58.231 --> 00:02:01.331
You'll have to change directories into
those folders from here just to be able to

34
00:02:01.331 --> 00:02:03.950
run the commands, and
that gets annoying really fast.

35
00:02:03.950 --> 00:02:06.419
So that's why I don't
recommend doing that.

36
00:02:06.419 --> 00:02:10.443
So just group your functions together by
a service, and then make another repo for

37
00:02:10.443 --> 00:02:12.032
another service it might be in.

38
00:02:12.032 --> 00:02:16.950
But you can put them all in the same repo
with different folders, so back to deploy.

39
00:02:18.112 --> 00:02:20.902
&gt;&gt; Scott Moss: If you just run
service deploy, it's going to deploy

40
00:02:20.902 --> 00:02:24.990
that entire service, which means
every function in that service.

41
00:02:24.990 --> 00:02:28.562
But where does it deploy to,
and how does it know to deploy?

42
00:02:28.562 --> 00:02:30.180
Well, let's talk about that.

43
00:02:30.180 --> 00:02:31.767
If you go back to provider,

44
00:02:31.767 --> 00:02:35.498
if you just get rid of these three
things that I have here on mine.

45
00:02:35.498 --> 00:02:38.951
This will still deploy,
that's because it has defaults,

46
00:02:38.951 --> 00:02:41.237
so I think I talked about this earlier.

47
00:02:41.237 --> 00:02:46.159
But as far as the profile, it's just going
to use the default profile in your AWS

48
00:02:46.159 --> 00:02:48.301
config which is on your computer.

49
00:02:48.301 --> 00:02:52.364
And if you don't have an AWS config, then
you problably exported some variables,

50
00:02:52.364 --> 00:02:53.710
this is going to use those.

51
00:02:53.710 --> 00:02:56.290
It has a waterfall of
fallbacks that it checks, but

52
00:02:56.290 --> 00:02:58.156
this is your chance to overwrite it.

53
00:02:58.156 --> 00:03:02.101
And say, actually I want to you to
use this AWS profile that I made,

54
00:03:02.101 --> 00:03:04.300
if you have one, mine is femasters.

55
00:03:04.300 --> 00:03:07.464
So if you don't have that,
you probably need to comment that out or

56
00:03:07.464 --> 00:03:10.530
change it to whatever profile you
did make if you made one at all.

57
00:03:10.530 --> 00:03:15.230
If you just exported your variables in the
Bash or whatever, you can just use that.

58
00:03:15.230 --> 00:03:21.046
You can also use environment variables
inside this file using template language.

59
00:03:21.046 --> 00:03:23.944
I don't recommend doing that,
it gets real sloppy, just don't do it,

60
00:03:23.944 --> 00:03:25.450
there's better systems for that.

61
00:03:25.450 --> 00:03:28.509
I don't think Serverless made
a really good system for

62
00:03:28.509 --> 00:03:32.779
integrating environment variables into
the yml file, so I try to avoid it.

63
00:03:32.779 --> 00:03:38.716
The next thing is the region, by default,
I believe Serverless defaults to US-EAST1,

64
00:03:38.716 --> 00:03:42.560
which is, what is that,
is that Virginia, or is that US?

65
00:03:42.560 --> 00:03:46.463
Is that Virginia?
Okay, yeah, so that defaults to Virginia,

66
00:03:46.463 --> 00:03:51.420
and then stage defaults to dev,
and what is stage?

67
00:03:51.420 --> 00:03:53.557
Basically it allows you to
stage your functions, so,

68
00:03:53.557 --> 00:03:56.120
just like if you had a server
where you had staging, production.

69
00:03:56.120 --> 00:03:58.852
And pull requests,
whatever your stages are,

70
00:03:58.852 --> 00:04:02.230
you can add different stages
to your functions too.

71
00:04:02.230 --> 00:04:05.805
So for each function, if I have one
function and I have four different stages,

72
00:04:05.805 --> 00:04:08.150
then I would have four
different functions on AWS.

73
00:04:08.150 --> 00:04:08.912
Four different,

74
00:04:08.912 --> 00:04:12.140
I don't want to say versions because
you can actually do versions.

75
00:04:12.140 --> 00:04:15.653
Four different stages for each one of
those functions, if that makes sense?

76
00:04:15.653 --> 00:04:19.137
And they would have their own
API gateways and everything, so

77
00:04:19.137 --> 00:04:22.240
that they're literally,
copies of your functions.

78
00:04:22.240 --> 00:04:25.626
And then you can choose,
depending on the name that you gave them,

79
00:04:25.626 --> 00:04:27.146
what you want to do with them.

80
00:04:27.146 --> 00:04:30.624
And this stage variable is accessible
inside that context object,

81
00:04:30.624 --> 00:04:31.790
inside your lambdas.

82
00:04:31.790 --> 00:04:34.779
So, inside your lambdas, you can
determine what stage you're into and

83
00:04:34.779 --> 00:04:35.713
do different things.

84
00:04:35.713 --> 00:04:39.160
So there's a lot of interesting things
you can do at that stage variable.

85
00:04:39.160 --> 00:04:42.914
Like, changing URLs,
like we're in stage staging, so

86
00:04:42.914 --> 00:04:46.828
when I talk to this other API,
I use the staging API URL instead.

87
00:04:46.828 --> 00:04:49.350
So that's kind of where that comes in.

88
00:04:49.350 --> 00:04:53.863
It's really handy to be able to test your
lambdas in production without having them

89
00:04:53.863 --> 00:04:55.742
override the production lambda.

90
00:04:55.742 --> 00:05:00.438
So that's what this is for, and by default
it will default to dev, but again,

91
00:05:00.438 --> 00:05:04.490
you could override all of this,
which is what I'm doing.

92
00:05:04.490 --> 00:05:09.382
You can also override this on
the command line too with flags, so

93
00:05:09.382 --> 00:05:14.378
once you've got those things,
you can pretty much deploy this.

94
00:05:14.378 --> 00:05:17.950
So if you run deploy, it will deploy
all of them, if you deploy a function,

95
00:05:17.950 --> 00:05:19.840
it will deploy just that one function.

96
00:05:20.970 --> 00:05:23.386
If you deploy a list,
you can see right here,

97
00:05:23.386 --> 00:05:27.982
list-deployed version of your Serverless
Service, just don't use this, [LAUGH].

98
00:05:27.982 --> 00:05:32.160
And then a list of functions, lists all of
the deployed functions and their versions.

99
00:05:32.160 --> 00:05:34.064
Basically what this is supposed to do,

100
00:05:34.064 --> 00:05:37.482
it's supposed to show you all
the functions that are deployed in AWS.

101
00:05:37.482 --> 00:05:40.200
For some reason, this doesn't work for
me, which is why I said I don't use it.

102
00:05:40.200 --> 00:05:43.964
If anybody else can get it to work,
that's fine, maybe I think I just have

103
00:05:43.964 --> 00:05:47.330
like a messed up version of Serverless,
actually, yeah, I do.

104
00:05:47.330 --> 00:05:51.996
I forked Serverless and did some changes
to it, so I'm far off from what,

105
00:05:51.996 --> 00:05:54.220
yeah, it might work for you.

106
00:05:54.220 --> 00:05:56.359
This doesn't work for
me because I forked it and

107
00:05:56.359 --> 00:05:59.207
did some stuff because it was messed up,
and I never went back.

108
00:05:59.207 --> 00:06:02.397
But yeah, this just shows you all your,
actually let's check,

109
00:06:02.397 --> 00:06:03.620
let me see if this works.

110
00:06:05.564 --> 00:06:06.090
&gt;&gt; Scott Moss: Deploy.

111
00:06:07.757 --> 00:06:08.257
&gt;&gt; Scott Moss: List.

112
00:06:09.682 --> 00:06:11.720
&gt;&gt; Scott Moss: So this should show
me the service that's deployed.

113
00:06:14.650 --> 00:06:17.410
&gt;&gt; Scott Moss: Yeah, it looks like
it's working now, okay, yeah,

114
00:06:17.410 --> 00:06:20.550
this wasn't working for
me like a week ago, nice.

115
00:06:20.550 --> 00:06:23.202
So this is so you're,
like all the services that you deploy,

116
00:06:23.202 --> 00:06:26.224
this isn't really that helpful because,
what does this mean to you?

117
00:06:26.224 --> 00:06:29.810
You didn't do a CloudFormation thing,
you don't know what this is.

118
00:06:29.810 --> 00:06:31.684
So it's really not that useful but

119
00:06:31.684 --> 00:06:34.599
I would imagine list functions
would be more useful.

120
00:06:34.599 --> 00:06:39.090
Because it will actually show you the
functions that you deploy, which for me,

121
00:06:39.090 --> 00:06:42.490
I don't have any functions
deployed from this service.

122
00:06:42.490 --> 00:06:43.749
So that's why it's throwing
me an error right now.

123
00:06:46.034 --> 00:06:48.884
&gt;&gt; Scott Moss: All right, but the main
one you will probably use is going to

124
00:06:48.884 --> 00:06:51.340
be deploy and sometimes deploy function.

125
00:06:51.340 --> 00:06:53.669
And the difference is, again,
deploy deploys everything,

126
00:06:53.669 --> 00:06:55.696
which is great if you just
need to deploy everything.

127
00:06:55.696 --> 00:06:57.589
But if you only change one function,

128
00:06:57.589 --> 00:07:02.890
then don't go through trying to redeploy
everything, just deploy that one function.

129
00:07:02.890 --> 00:07:06.480
And it is not that big of a deal right now
because we don't have a build step with

130
00:07:06.480 --> 00:07:07.040
this repo.

131
00:07:07.040 --> 00:07:10.406
But we use webpack for our lambda
functions because we like to use

132
00:07:10.406 --> 00:07:13.370
the latest everything,
and that has to build.

133
00:07:13.370 --> 00:07:17.056
And then webpack dedupes the node
modules and bundles and optimizes, so

134
00:07:17.056 --> 00:07:18.274
it can take a long time.

135
00:07:18.274 --> 00:07:22.029
And then we have like ten functions plus
and all we did was change one line and

136
00:07:22.029 --> 00:07:22.950
one function.

137
00:07:22.950 --> 00:07:27.790
So, running sls deploy will do
all of that again, zip it all up,

138
00:07:27.790 --> 00:07:31.747
and then just to really
only override one function.

139
00:07:31.747 --> 00:07:36.464
So, yeah not really worth it, so, yeah
you'll probably only use these two things,

140
00:07:36.464 --> 00:07:38.640
so, that's what I'm going to do now.

141
00:07:38.640 --> 00:07:41.847
I'm just going to go ahead and
run sls deploy here, and

142
00:07:41.847 --> 00:07:45.359
the first time you deploy,
it's going to take a long time.

143
00:07:45.359 --> 00:07:49.440
And that's because it has to set
up your CloudFormation stack.

144
00:07:49.440 --> 00:07:52.038
So whenever you do CloudFormation,
which service is doing for

145
00:07:52.038 --> 00:07:54.693
you, it creates what's called
a CloudFormation stack in AWS.

146
00:07:54.693 --> 00:07:59.419
Which is basically AWS taking
that CloudFormation file and

147
00:07:59.419 --> 00:08:05.220
creating a text stack really of
all the services that you need.

148
00:08:05.220 --> 00:08:07.649
And it's going to create that stack for
you, and

149
00:08:07.649 --> 00:08:09.433
it's going to keep it there on AWS.

150
00:08:09.433 --> 00:08:12.760
So the next time you deploy, it doesn't
have to recreate all those resources.

151
00:08:12.760 --> 00:08:15.438
It just updates them based on
the configuration that you gave it.

152
00:08:15.438 --> 00:08:18.787
It can detect changes, it does diffs and
it knows what's different and what's not,

153
00:08:18.787 --> 00:08:21.440
but the first time it has to
create all that from scratch.

154
00:08:21.440 --> 00:08:22.568
So it can take a long time.

155
00:08:22.568 --> 00:08:26.989
So the things that Serverless is going
to be telling CloudFormation to create

156
00:08:26.989 --> 00:08:29.240
are going to be things like log groups.

157
00:08:30.540 --> 00:08:34.776
ARNs for lambdas, IM users for
execution, insider limbs,

158
00:08:34.776 --> 00:08:37.441
it's going to create a lot of things.

159
00:08:37.441 --> 00:08:40.250
We're using API gateway, so
it's got to create that.

160
00:08:40.250 --> 00:08:42.302
And really,
depending on what you connected it to,

161
00:08:42.302 --> 00:08:44.973
it's going to create a lot of stuff,
so it could take quite a while.

162
00:08:44.973 --> 00:08:48.678
So I'm just going to run this for now,
and we're going to see what happens and

163
00:08:48.678 --> 00:08:49.709
how long this takes.

164
00:08:49.709 --> 00:08:51.915
I should have ran this before I talked so
it'd be done by now.

165
00:08:51.915 --> 00:08:53.534
&gt;&gt; Group: [LAUGH]
&gt;&gt; Scott Moss: [LAUGH] Because it could

166
00:08:53.534 --> 00:08:58.440
take a while, I mean, we only have two or
three functions, so it's not so bad.

167
00:08:58.440 --> 00:09:02.955
But I've had deployments
take ten minutes before, but

168
00:09:02.955 --> 00:09:06.230
basically you can see the process here.

169
00:09:06.230 --> 00:09:09.664
I didn't put verbose on it,
you can do dash, dash, v, or

170
00:09:09.664 --> 00:09:14.630
dash, dash, verbose, or dash,
v to see the verbose of what's happening.

171
00:09:14.630 --> 00:09:17.403
The other thing you can do is,
right here it's saying updating stack,

172
00:09:17.403 --> 00:09:18.478
checking stack progress.

173
00:09:18.478 --> 00:09:23.235
You can actually just go to AWS
while all this is happening,

174
00:09:23.235 --> 00:09:27.630
and go to Services, go to CloudFormation.

175
00:09:27.630 --> 00:09:29.758
And you should be able to see this
happening in real time as it's updating.

176
00:09:29.758 --> 00:09:32.719
And you can see it right there, mine is,

177
00:09:32.719 --> 00:09:37.660
Update In Progress, so
it's actually updating this right now.

178
00:09:37.660 --> 00:09:39.968
And then, yeah,
I guess I already had a stack, so

179
00:09:39.968 --> 00:09:41.589
mine probably won't take that long.

180
00:09:41.589 --> 00:09:45.280
But if you click on this,
you can see everything that's happening.

181
00:09:45.280 --> 00:09:50.409
So all this is in progress right now, it
looks like it's creating a new TodoLambda,

182
00:09:50.409 --> 00:09:52.808
right there, creating a TodoLambda.

183
00:09:52.808 --> 00:09:57.219
That's in progress,
it's creating a new TodosLambda,

184
00:09:57.219 --> 00:10:03.270
it's creating an ApiGateway for
a method called Get, for the Todo.

185
00:10:03.270 --> 00:10:06.923
So you can see it's literally doing
everything that we described inside of our

186
00:10:06.923 --> 00:10:07.872
serverless.yml.

187
00:10:07.872 --> 00:10:11.040
Which, again, is just an abstraction
around CloudFormation,

188
00:10:11.040 --> 00:10:12.940
which AWS already created.

189
00:10:12.940 --> 00:10:16.117
So sometimes this doesn't
work all the time,

190
00:10:16.117 --> 00:10:19.138
sometimes it fails just for weird reasons.

191
00:10:19.138 --> 00:10:23.052
You've just got to unplug it and
plug it back in, honestly, [LAUGH],

192
00:10:23.052 --> 00:10:25.830
that's the best way to
get past this sometimes.

193
00:10:25.830 --> 00:10:29.903
Usually around packaging and
things with webpack, it kinda fails, but

194
00:10:29.903 --> 00:10:31.580
most of the time, it'll go.

195
00:10:31.580 --> 00:10:34.560
So, once it's done,
you'll see something like this,

196
00:10:34.560 --> 00:10:38.600
you'll get this Service Information,
listing your service, the stage.

197
00:10:38.600 --> 00:10:42.045
And by the way, if you go back and
look at this CloudFormation,

198
00:10:42.045 --> 00:10:45.041
the name of this CloudFormation
is serverless-dev.

199
00:10:45.041 --> 00:10:47.750
So where did it get that name from?

200
00:10:47.750 --> 00:10:51.010
Well, that's the name of my service,
dash, the name of the stage,

201
00:10:51.010 --> 00:10:53.104
that's where serverless-dev came from.

202
00:10:53.104 --> 00:10:55.345
So for every stage you create,
for every service,

203
00:10:55.345 --> 00:10:57.190
you'll get a new CloudFormation stack.

204
00:10:57.190 --> 00:11:00.735
So it's completely isolated from
the other services, which is great for

205
00:11:00.735 --> 00:11:01.600
testing things.

206
00:11:01.600 --> 00:11:05.800
Here's the region, again, here's a stack
name, I don't have any API keys.

207
00:11:05.800 --> 00:11:10.818
And because I created the HTTP
events inside my serverless.yml,

208
00:11:10.818 --> 00:11:13.515
I got these nice URLs that I can hit.

