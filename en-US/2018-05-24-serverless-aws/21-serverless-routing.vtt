WEBVTT

1
00:00:02.759 --> 00:00:07.712
&gt;&gt; Scott Moss: Now what we're gonna do
is we're going to learn about different

2
00:00:07.712 --> 00:00:13.440
ways to handle routing in our
Lambda API that we just created.

3
00:00:13.440 --> 00:00:17.200
So if we go back to our API,
we had two functions.

4
00:00:17.200 --> 00:00:19.240
I mean, I made this third one
while I was just talking about it,

5
00:00:19.240 --> 00:00:22.800
but really, we have two or three
depending on what you have in your repo.

6
00:00:22.800 --> 00:00:25.807
And they're all different APIs and they're
all three different functions, right?

7
00:00:25.807 --> 00:00:28.999
And this is cool, but if you go
back to how you would have created

8
00:00:28.999 --> 00:00:33.037
something on a server, you'd probably
just have something like Express, and

9
00:00:33.037 --> 00:00:35.730
then Express defined what the routes were,
right?

10
00:00:35.730 --> 00:00:38.950
Actually, I think that's
a much better workflow, and

11
00:00:38.950 --> 00:00:41.440
I wish I could go back
to something like that.

12
00:00:41.440 --> 00:00:43.740
And yeah, you can,
you can totally do that.

13
00:00:43.740 --> 00:00:50.920
So what we can do is instead is we can
just have API gateway proxy to one Lambda.

14
00:00:50.920 --> 00:00:54.339
And then we have that one
Lambda proxy to Express.

15
00:00:54.339 --> 00:00:56.997
And then we just have Express
to find the routes and

16
00:00:56.997 --> 00:00:59.100
do everything internally from there.

17
00:00:59.100 --> 00:01:03.109
And then that way, literally transitioning
from an API that you made on Node that's

18
00:01:03.109 --> 00:01:05.659
Express based to Lambda
that's just copy and paste.

19
00:01:05.659 --> 00:01:09.101
You don't have to do anything, you just
copy the code from whatever you had and

20
00:01:09.101 --> 00:01:11.390
paste it into Lambda function and
you're done.

21
00:01:11.390 --> 00:01:14.070
You don't have to set up anything but
just a proxy.

22
00:01:14.070 --> 00:01:17.928
So that's the easiest transition
from going from a traditional API

23
00:01:17.928 --> 00:01:21.594
you might have with Express and
Node to Lambda in one afternoon.

24
00:01:21.594 --> 00:01:24.290
So that's what we're gonna do.

25
00:01:24.290 --> 00:01:26.020
So a couple of things
that we have to do for

26
00:01:26.020 --> 00:01:30.940
that to work is we need to
consolidate our functions.

27
00:01:30.940 --> 00:01:32.307
We have three functions here.

28
00:01:32.307 --> 00:01:37.087
Don't get me wrong, there are some
benefits of having multiple functions,

29
00:01:37.087 --> 00:01:39.070
and actually, you know what?

30
00:01:39.070 --> 00:01:41.740
I'm gonna walk down the different
paths that you can do.

31
00:01:41.740 --> 00:01:46.190
Let me take a step back before we
transition over to using Express,

32
00:01:46.190 --> 00:01:49.290
let me talk about the different
paths that you can take.

33
00:01:49.290 --> 00:01:55.320
So one is the path that we just took,
which we have three different functions

34
00:01:55.320 --> 00:01:59.650
that have three different HTTP routes.

35
00:01:59.650 --> 00:02:04.020
So it's like one for one match, for
each function it's doing its own route.

36
00:02:04.020 --> 00:02:06.480
The next iteration we could
have done is we could have had,

37
00:02:08.338 --> 00:02:10.195
&gt;&gt; Scott Moss: Three different routes

38
00:02:10.195 --> 00:02:13.080
point to the same function, right?

39
00:02:14.180 --> 00:02:17.870
And what I mean the same function, I mean
there's actually three different Lambda

40
00:02:17.870 --> 00:02:20.160
functions, but
they'll be the same handler, right?

41
00:02:20.160 --> 00:02:24.515
So if I gave all these functions
the same handler, like handler was just

42
00:02:24.515 --> 00:02:28.560
src/api/api, and I put that here, and I
put that here, they are the same handler.

43
00:02:28.560 --> 00:02:31.550
Yes, I would get three
separate Lambda functions, but

44
00:02:31.550 --> 00:02:36.300
they would all be the same code, so over
here, there would always just be one file.

45
00:02:36.300 --> 00:02:38.030
And then inside of here I'd
do some internal routing.

46
00:02:39.320 --> 00:02:40.840
So yeah, you could do that.

47
00:02:40.840 --> 00:02:42.871
And then you can do routing
based on the context,

48
00:02:42.871 --> 00:02:44.780
you're like, what's the function name?

49
00:02:44.780 --> 00:02:47.620
The function name is
whatever was put here.

50
00:02:47.620 --> 00:02:49.980
So I can check the function name,
I can check the path.

51
00:02:49.980 --> 00:02:53.190
So that's one way you can do it, and
that might be more helpful if you

52
00:02:53.190 --> 00:02:56.720
would wanna do some things like analytics
and you wanted to track on that level.

53
00:02:56.720 --> 00:02:58.720
So it's like, cool,
it's the same source function, but

54
00:02:58.720 --> 00:03:02.780
I've got these three Lambda separated,
so I wanna be able to separate them

55
00:03:02.780 --> 00:03:06.200
completely so that way my metrics
dashboard is separated out by functions.

56
00:03:06.200 --> 00:03:09.660
So I can literally just go see
how long a todo's function

57
00:03:09.660 --> 00:03:11.480
took to execute versus the API function,

58
00:03:11.480 --> 00:03:16.860
even though they're the same source code,
they're separate Lambda functions though.

59
00:03:16.860 --> 00:03:20.600
So it might be easier to segment that way,
so that's the second way.

60
00:03:20.600 --> 00:03:25.231
The third way is what we're gonna do is
we're just gonna have one function send

61
00:03:25.231 --> 00:03:30.143
every request over to its source code,
which we'll just use Express inside of it,

62
00:03:30.143 --> 00:03:34.029
and Express will do all the routing
just like you normally would.

63
00:03:35.470 --> 00:03:36.570
See if you have questions on that?

64
00:03:37.941 --> 00:03:38.718
&gt;&gt; Scott Moss: Yes.

65
00:03:38.718 --> 00:03:43.144
&gt;&gt; Student: I mean, bit that then is
gonna trigger the Express function and

66
00:03:43.144 --> 00:03:47.250
charge you for
it no matter what the address is, correct?

67
00:03:47.250 --> 00:03:50.130
So if you got web crawlers and trawlers,

68
00:03:50.130 --> 00:03:54.240
you're gonna pay for
thousands of bad requests.

69
00:03:54.240 --> 00:03:56.900
&gt;&gt; Scott Moss: Well, yeah that depends on
how loose you wanna be with your proxy.

70
00:03:56.900 --> 00:03:59.290
We're gonna proxy every single route, but

71
00:03:59.290 --> 00:04:02.560
you could proxy only
the routes that you want.

72
00:04:02.560 --> 00:04:06.990
So yeah, you're right, it's totally
up to you how you wanna do that.

73
00:04:06.990 --> 00:04:09.840
But yeah, you could totally
have people crawl on you.

74
00:04:09.840 --> 00:04:11.430
But the way you get around that is,

75
00:04:11.430 --> 00:04:15.197
what we didn't really talk about today,
is having a authorizer.

76
00:04:15.197 --> 00:04:20.000
Authorizer is a Lambda function that
sits in front of your Lambda functions.

77
00:04:20.000 --> 00:04:24.115
And then whenever somebody will hit your
API gateway, API gateway is like cool,

78
00:04:24.115 --> 00:04:27.880
does this Lambda that you're
trying to access have authorizer?

79
00:04:27.880 --> 00:04:30.680
Let me go talk to the authorizer first,
which itself is a Lambda function,

80
00:04:30.680 --> 00:04:34.410
and then based on a token,
a header, or IP address,

81
00:04:34.410 --> 00:04:38.960
or whatever, it'll authorize access to
the Lambda function you really want.

82
00:04:38.960 --> 00:04:40.850
And if not, you can get denied there.

83
00:04:40.850 --> 00:04:44.240
So that's a good place to do things
like rate limiting and stuff like that.

84
00:04:44.240 --> 00:04:46.420
So that's how you would get around that.

85
00:04:46.420 --> 00:04:48.676
And then if you really
wanted to get crazy with it,

86
00:04:48.676 --> 00:04:51.703
you could move that to the Edge and
do that on the Lambda on the Edge.

87
00:04:51.703 --> 00:04:53.546
So it doesn't even go
anywhere near anything,

88
00:04:53.546 --> 00:04:55.550
it's just like right on cloud front.

89
00:04:55.550 --> 00:04:57.560
So it's a lot of ways
you can mitigate that.

