WEBVTT

1
00:00:00.130 --> 00:00:01.280
&gt;&gt; Scott Moss: So all this is deployed.

2
00:00:01.280 --> 00:00:05.880
So let's go check on this and see what's
actually happening and get a walk through

3
00:00:05.880 --> 00:00:09.900
of some of our tools that AWS gives
us after we deploy our lambdas.

4
00:00:09.900 --> 00:00:13.760
So first thing you'll note is I
used to have one function here.

5
00:00:13.760 --> 00:00:15.250
That's gone.
I'll have

6
00:00:15.250 --> 00:00:16.610
you notice I don't even
remember the name of it.

7
00:00:16.610 --> 00:00:19.680
There was a function here, it's gone now,
it got completely wiped out.

8
00:00:19.680 --> 00:00:22.550
And these three functions
that we created are now here.

9
00:00:22.550 --> 00:00:24.200
So why did it do that?

10
00:00:24.200 --> 00:00:28.810
Well, the reason it did that, and it's
not like I didn't want that to happen.

11
00:00:28.810 --> 00:00:30.690
That's what I wanted to happen.

12
00:00:30.690 --> 00:00:35.380
It did that because I used to have
another function with a different name

13
00:00:35.380 --> 00:00:39.330
in this exact same service
that got deployed.

14
00:00:39.330 --> 00:00:42.860
So that created a stack for
this service on Cloud formation.

15
00:00:42.860 --> 00:00:48.020
But we checked out to new branch, and
I deleted that function out of my source

16
00:00:48.020 --> 00:00:52.600
code and added three new functions with
the same service which is the same stack.

17
00:00:52.600 --> 00:00:56.610
So when I redeploy just now,
it's stateless.

18
00:00:56.610 --> 00:01:01.330
It realized that I didn't deploy with that
same service or same function that I had

19
00:01:01.330 --> 00:01:06.040
before, so it's like you must want to
delete it, so it deleted it for me.

20
00:01:06.040 --> 00:01:09.254
So we just deleted that form
because I deployed a new service.

21
00:01:09.254 --> 00:01:12.650
When I did service deploy,
I'm literally pushing up the service.

22
00:01:12.650 --> 00:01:14.360
Here's everything
the service is gonna have,

23
00:01:14.360 --> 00:01:16.450
and that function was no longer there.

24
00:01:16.450 --> 00:01:19.640
So therefore,
it deleted it from AWS for me.

25
00:01:19.640 --> 00:01:21.400
If were just deploy one function,

26
00:01:21.400 --> 00:01:24.590
it would have still be there,
because I didn't deploy the service.

27
00:01:24.590 --> 00:01:27.650
This is a stateless deploy,

28
00:01:27.650 --> 00:01:31.000
it's going to overwrite anything that's
there if you deploy the service.

29
00:01:31.000 --> 00:01:35.060
So if you deleted a function locally,
but you still want it on AWS,

30
00:01:35.060 --> 00:01:38.370
don't redeploy the whole service cuz
you will get rid of that function.

31
00:01:38.370 --> 00:01:41.660
But actually, that's not that big of a
deal because Lambda functions deployments

32
00:01:41.660 --> 00:01:44.050
are so easy, you can just deploy again,
and you wouldn't miss a beat.

33
00:01:44.050 --> 00:01:44.938
So it's not that big of a deal.

34
00:01:44.938 --> 00:01:47.245
They're stateless,
you're not losing anything,

35
00:01:47.245 --> 00:01:48.790
there's no state saved on Lambda.

36
00:01:48.790 --> 00:01:51.590
So even if you got rid of the function,
just deploy it again and you're back.

37
00:01:51.590 --> 00:01:53.960
It's not that big a deal, it's not
like a server where you're like, man,

38
00:01:53.960 --> 00:01:57.150
I gotta spin up an instance,
I gotta do all this, and I gotta.

39
00:01:57.150 --> 00:01:59.789
You don't have to worry about that,
you just deploy it again.

40
00:01:59.789 --> 00:02:03.014
So that can be a side effect
if you aren't aware of it.

41
00:02:03.014 --> 00:02:04.380
But let's get back to it.

42
00:02:05.400 --> 00:02:06.710
We got these three functions.

43
00:02:06.710 --> 00:02:08.600
They're running 08.

44
00:02:08.600 --> 00:02:12.740
This code size is how big
the source code is for

45
00:02:12.740 --> 00:02:14.660
this function, and that's pretty big.

46
00:02:14.660 --> 00:02:17.130
I wouldn't deploy functions that big.

47
00:02:17.130 --> 00:02:21.420
But this is that big because it's just
literally bundling all the node modules,

48
00:02:21.420 --> 00:02:23.000
all of them for each function.

49
00:02:23.000 --> 00:02:24.320
So that's why it's used.

50
00:02:24.320 --> 00:02:26.020
Binaries, everything.

51
00:02:26.020 --> 00:02:29.060
So let's check on one of them, and
let's see what's going on here.

52
00:02:30.160 --> 00:02:32.450
So now, we're gonna go down
to this configuration and

53
00:02:32.450 --> 00:02:33.710
we're gonna look at a few things.

54
00:02:33.710 --> 00:02:37.590
One thing to note here is they built
this nice GUI now where you can see your

55
00:02:37.590 --> 00:02:42.440
function, and you can see all the events
that are attached to this function.

56
00:02:42.440 --> 00:02:45.020
The one we know for sure is API Gateway,
cuz we added that, right?

57
00:02:45.020 --> 00:02:47.090
So if we click on that,
you can scroll down.

58
00:02:47.090 --> 00:02:51.400
It'll even tell you, yeah,
you have a GET method to this PATH,

59
00:02:51.400 --> 00:02:54.090
no authorization, and it's enabled.

60
00:02:55.090 --> 00:02:55.730
There you go.
So

61
00:02:55.730 --> 00:02:57.090
you know all the information
you have there.

62
00:02:57.090 --> 00:03:01.490
And again, we did that with service.yml.
&gt;&gt; Scott Moss: This CloudWatch one is

63
00:03:01.490 --> 00:03:05.271
something that we've never talked about,
but this gets created for

64
00:03:05.271 --> 00:03:07.531
us by Serverless and CloudFormation.

65
00:03:07.531 --> 00:03:11.785
And basically, this is where we can go
to see the logs that we console.log

66
00:03:11.785 --> 00:03:13.035
inside of our lambda's.

67
00:03:13.035 --> 00:03:16.575
So if we were to run console.log,
we can go here, and we can check it out.

68
00:03:16.575 --> 00:03:18.025
So, where is here?

69
00:03:18.025 --> 00:03:22.620
Well, if you go to services,
you type in CloudWatch, and

70
00:03:22.620 --> 00:03:24.125
there's a lot of Cloud things in here.

71
00:03:24.125 --> 00:03:29.970
[LAUGH] It's definitely CloudWatch.
&gt;&gt; Scott Moss: And let this load up.

72
00:03:29.970 --> 00:03:34.816
You'll click on Logs, and you'll see
I got three different groups here.

73
00:03:34.816 --> 00:03:39.650
I've dev-api, dev-todo, dev-todos.

74
00:03:39.650 --> 00:03:42.068
So let's look at the todo one.
&gt;&gt; Scott Moss: And then,

75
00:03:42.068 --> 00:03:44.140
if I had any logs, they'll show up here.

76
00:03:44.140 --> 00:03:45.890
There'll be entries here, and
you can click on them, and

77
00:03:45.890 --> 00:03:46.830
it'll just show you the logs.

78
00:03:46.830 --> 00:03:47.630
And they're just streaming.

79
00:03:48.690 --> 00:03:52.550
And this is where you would see your
logs without setting up an external

80
00:03:52.550 --> 00:03:55.110
logging service that you would
use somewhere else, most likely.

81
00:03:55.110 --> 00:03:56.920
But this is how you would get your logs.

82
00:03:56.920 --> 00:03:57.580
And this was created for

83
00:03:57.580 --> 00:04:00.546
you automatically.
&gt;&gt; Scott Moss: So

84
00:04:00.546 --> 00:04:07.213
let's go back to Lambda.
&gt;&gt; Scott Moss: The other

85
00:04:07.213 --> 00:04:10.412
thing is the notes down here.
&gt;&gt; Scott Moss: If you read

86
00:04:10.412 --> 00:04:14.204
this right here, it says the deployment
package of your Lambda function,

87
00:04:14.204 --> 00:04:18.450
serverless-dev-todos, is too large
to enable inline code editing.

88
00:04:18.450 --> 00:04:20.020
However, you can still invoke
your function right now.

89
00:04:20.020 --> 00:04:22.800
So what that's saying is because
we packaged our lambdas up

90
00:04:22.800 --> 00:04:24.960
using Node modules,
it's just too much code.

91
00:04:24.960 --> 00:04:25.710
It's 6.2 megabytes.

92
00:04:25.710 --> 00:04:27.210
They can't show it right here.

93
00:04:27.210 --> 00:04:29.875
But if it was just a simple function,
there's actually a editor,

94
00:04:29.875 --> 00:04:32.800
will load up right here, and
we can edit it right here.

95
00:04:32.800 --> 00:04:33.910
And we can deploy different versions.

96
00:04:33.910 --> 00:04:36.100
And we can literally just
write our lambda right here.

97
00:04:36.100 --> 00:04:39.520
But if you're doing crazy stuff
you will almost never do that

98
00:04:39.520 --> 00:04:41.060
because you have too many dependencies.

99
00:04:41.060 --> 00:04:43.780
But if you have a dependency-free
function that's,

100
00:04:43.780 --> 00:04:45.900
I don't know what you would do with it.

101
00:04:45.900 --> 00:04:48.404
Yeah, you could just edit
the code right here if you

102
00:04:48.404 --> 00:04:53.151
wanted to.
&gt;&gt; Scott Moss: This brings us

103
00:04:53.151 --> 00:04:54.440
down to environment variables,

104
00:04:54.440 --> 00:04:58.020
which is how you would inject environment
variables into your application.

105
00:04:58.020 --> 00:04:59.700
So this is where you would do it.

106
00:04:59.700 --> 00:05:02.740
You just do key values,
and then they're set.

107
00:05:02.740 --> 00:05:07.827
If you want to encrypt them using KMS,
then you can also encrypt them using KMS.

108
00:05:07.827 --> 00:05:09.778
Which is Amazon's key management system.

109
00:05:09.778 --> 00:05:11.133
That's what KMS stands for.

110
00:05:11.133 --> 00:05:13.580
And then, you would decrypt
them inside your function.

111
00:05:13.580 --> 00:05:15.029
This is true for EC2.

112
00:05:15.029 --> 00:05:22.210
Beanstalk, whatever platform or whatever
container service on AWS that you use.

113
00:05:22.210 --> 00:05:23.680
They all use the same thing.

114
00:05:23.680 --> 00:05:24.970
So this is if you want encryption.

115
00:05:26.470 --> 00:05:29.870
Tags, these are just tags that
you can add to your functions.

116
00:05:29.870 --> 00:05:32.530
So on the previous screen,
where it's listing all the functions,

117
00:05:32.530 --> 00:05:35.130
you can just search for
them easier just by tags.

118
00:05:35.130 --> 00:05:37.360
Cuz eventually, you might have
hundreds of functions in there, and

119
00:05:37.360 --> 00:05:38.820
they might be hard to search for.

120
00:05:38.820 --> 00:05:42.760
So you can add tags to them, so you can
figure out what function is what, and

121
00:05:42.760 --> 00:05:44.200
you can find them much easier.

122
00:05:44.200 --> 00:05:47.416
So by default, it puts the stage tag on
it to dev, so you can filter out by all

123
00:05:47.416 --> 00:05:51.804
your dev functions, which is very helpful.
&gt;&gt; Scott Moss: And then,

124
00:05:51.804 --> 00:05:52.900
you get down to all this crazy stuff.

125
00:05:54.160 --> 00:05:55.710
Okay, so execution role.

126
00:05:55.710 --> 00:06:03.910
Basically, your lambda
needs to be invoked,

127
00:06:03.910 --> 00:06:09.464
assuming a role of some
authorized user on AWS.

128
00:06:09.464 --> 00:06:14.370
Cuz user's not a person, user is
just some, it's actually the lambda.

129
00:06:14.370 --> 00:06:18.160
You have to give the lambda
some permission to execute.

130
00:06:18.160 --> 00:06:22.300
And this tells your lambda whether
it can access other AWS resources or

131
00:06:22.300 --> 00:06:24.910
not based on its execution authorization.

132
00:06:25.950 --> 00:06:28.160
If you never done IM Users or

133
00:06:28.160 --> 00:06:30.890
anything like that in AWS,
all this stuff sounds complicated.

134
00:06:30.890 --> 00:06:34.700
But basically, all this means is
think of your lambda as a person, and

135
00:06:34.700 --> 00:06:39.070
you have to give it some permissions so
it can or cannot access other things.

136
00:06:39.070 --> 00:06:44.182
So if you have a DynamoDB table or some
other thing you're gonna access on AWS,

137
00:06:44.182 --> 00:06:47.860
this role needs to have permissions for
it.

138
00:06:47.860 --> 00:06:51.289
By default,
Serverless creates an execution role for

139
00:06:51.289 --> 00:06:54.220
your lambdas and it uses the namespace.

140
00:06:54.220 --> 00:06:59.160
Your service dash your stage dash
your region dash lambda roles.

141
00:06:59.160 --> 00:07:05.170
So then, you can go to iam, find that
role and attach permissions to it.

142
00:07:05.170 --> 00:07:06.900
And that's how you can do things.

143
00:07:06.900 --> 00:07:11.360
So for instance, if I want to
access s3 inside of this lambda,

144
00:07:11.360 --> 00:07:16.482
I would have to go to iam,
find that role that I just found out,

145
00:07:16.482 --> 00:07:19.300
attach the s3 permissions to it,
and then I can use it.

146
00:07:19.300 --> 00:07:21.085
Otherwise, I can't use it
inside of that lambda.

147
00:07:21.085 --> 00:07:24.707
Does that make sense?
&gt;&gt; Scott Moss: It's pretty complicated.

148
00:07:24.707 --> 00:07:29.070
Literally could be a startup around IM.
&gt;&gt; Scott Moss: If you've never looked

149
00:07:29.070 --> 00:07:32.451
at this, somebody could literally make a
startup around this interface right here.

150
00:07:32.451 --> 00:07:37.973
So it's pretty bad.
&gt;&gt; Scott Moss: Any questions so

151
00:07:37.973 --> 00:07:41.700
far?
&gt;&gt; Scott Moss: On this stuff.

152
00:07:41.700 --> 00:07:43.444
&gt;&gt; Speaker 2: How do you avoid bundling

153
00:07:43.444 --> 00:07:47.590
modules in these Webpack?
&gt;&gt; Scott Moss: Yeah, so

154
00:07:47.590 --> 00:07:52.130
if you aren't using Webpack,
there's tons of tools.

155
00:07:52.130 --> 00:07:55.750
You can just look up service plugins to or
whatever.

156
00:07:55.750 --> 00:07:58.710
If you are using Webpack,
there's one tool that you want to use, and

157
00:07:58.710 --> 00:07:59.487
this is what we use.

158
00:07:59.487 --> 00:08:05.308
It's a webpack-serverless, or
is it serverless-webpack, I don't know.

159
00:08:05.308 --> 00:08:07.910
It's serverless-webpack, yeah.

160
00:08:07.910 --> 00:08:10.100
This one's really, really good.

161
00:08:10.100 --> 00:08:13.560
The developer that writes
this is always on top of it.

162
00:08:13.560 --> 00:08:16.090
I mean,
the dude just updated eight hours ago.

163
00:08:16.090 --> 00:08:18.460
So he's always on top of it.

164
00:08:18.460 --> 00:08:20.810
This one is really good.

165
00:08:20.810 --> 00:08:24.210
It's very efficient at de-duping things.

166
00:08:24.210 --> 00:08:26.220
I mean, yeah, it's really good.

167
00:08:26.220 --> 00:08:27.410
I highly recommend using this one.

168
00:08:28.420 --> 00:08:30.690
And it kind of does a lot of the work for
you.

169
00:08:30.690 --> 00:08:34.347
It even helps you set up your webpack
configuration so you don't have to.

170
00:08:34.347 --> 00:08:37.300
So, yeah, I highly recommend using
this if you're using webpack.

171
00:08:37.300 --> 00:08:40.900
And if you're not using webpack, I still
recommend just using this anyway just for

172
00:08:40.900 --> 00:08:42.750
the bundling options.

173
00:08:42.750 --> 00:08:45.330
Cuz it'll just do the webpack stuff for
you.

174
00:08:45.330 --> 00:08:47.076
But this is definitely
the one that you want.

175
00:08:47.076 --> 00:08:50.150
And it'll de-dupe and
slim things down, and

176
00:08:50.150 --> 00:08:52.900
make sure,
cuz basically it's webpack, right?

177
00:08:52.900 --> 00:08:53.960
So it creates a tree.

178
00:08:53.960 --> 00:08:55.860
It looks at all your require statements,
and

179
00:08:55.860 --> 00:08:58.630
it figures out from there
what packages does this need,

180
00:08:58.630 --> 00:09:02.200
what packages does this need, and it goes
all the way down to the leaf, the child.

181
00:09:02.200 --> 00:09:04.730
So recursively checks,
looks like it's AST, so

182
00:09:04.730 --> 00:09:07.610
it only includes the stuff that you need.

183
00:09:07.610 --> 00:09:08.400
So it's really good.

184
00:09:08.400 --> 00:09:11.320
But that could also bite you in
the butt if you're using things

185
00:09:11.320 --> 00:09:15.370
that you're not requiring indirectly
because you know that the module that you

186
00:09:15.370 --> 00:09:19.360
are requiring has installed that,
then you will have an error on AWS.

187
00:09:19.360 --> 00:09:21.200
And it'll be crypted,
you wouldn't even know what,

188
00:09:21.200 --> 00:09:23.480
you'd be like I don't know
what's happening here.

189
00:09:23.480 --> 00:09:26.760
AWS is like we just couldn't load
your function, you wouldn't know why.

190
00:09:26.760 --> 00:09:30.640
And you have to go trace down all the
requires like webpack would to figure out

191
00:09:30.640 --> 00:09:31.890
why you messed up.

192
00:09:31.890 --> 00:09:37.334
So it can be good and it can be bad.
&gt;&gt; Scott Moss: Yes?

193
00:09:37.334 --> 00:09:38.589
&gt;&gt; Speaker 3: I'm wondering if you're

194
00:09:38.589 --> 00:09:42.589
planning on going through the configuring
your AWS account with your Serverless.

195
00:09:44.040 --> 00:09:48.416
Essentially just creating a role or
a user, and then going in and

196
00:09:48.416 --> 00:09:51.669
getting that configured
through Serverless.

197
00:09:51.669 --> 00:09:53.380
Cuz you kinda have to do
the configuration setup.

198
00:09:53.380 --> 00:09:55.210
If you have the keys
already on your computer,

199
00:09:55.210 --> 00:09:57.900
you kinda said it should pull them in?
&gt;&gt; Scott Moss: Yeah.

200
00:09:57.900 --> 00:09:59.000
&gt;&gt; Speaker 3: Okay, I might just have

201
00:09:59.000 --> 00:10:01.680
to go through it again, but-
&gt;&gt; Scott Moss: Do you need help with that?

202
00:10:01.680 --> 00:10:04.330
Is your stuff not configured?
&gt;&gt; Speaker 3: It's not configured, and

203
00:10:04.330 --> 00:10:08.490
I just tried to do the configure
with the provider and the secret and

204
00:10:08.490 --> 00:10:11.006
the key that I just generated, too?
&gt;&gt; Scott Moss: With

205
00:10:11.006 --> 00:10:13.048
the profile [INAUDIBLE] profile, okay.
&gt;&gt; Speaker 3: Yeah, and

206
00:10:13.048 --> 00:10:16.057
it's just saying that it doesn't exist
when it tries to go up and find it.

207
00:10:16.057 --> 00:10:18.431
And I don't wanna take time
away from the class to do that,

208
00:10:18.431 --> 00:10:20.479
but-
&gt;&gt; Scott Moss: The short answer for

209
00:10:20.479 --> 00:10:23.901
that one is, if you're doing it,
what you wanna do instead for

210
00:10:23.901 --> 00:10:27.982
that is you want to
&gt;&gt; Scott Moss: Instead of doing

211
00:10:27.982 --> 00:10:32.970
the profile setup, if you just export
these in your bash, you should be fine.

212
00:10:32.970 --> 00:10:36.720
And if you already have AWS stuff, just
get rid of them before you start working

213
00:10:36.720 --> 00:10:38.190
on your other AWS stuff.
&gt;&gt; Speaker 3: Or

214
00:10:38.190 --> 00:10:39.230
make a new profile.
&gt;&gt; Scott Moss: Or

215
00:10:39.230 --> 00:10:40.730
just make a new profile, yeah.

216
00:10:40.730 --> 00:10:42.270
So yeah, this is probably the easiest way.

217
00:10:42.270 --> 00:10:46.720
That way, you don't have to mess around
with the AWS profile stuff which is, yeah,

218
00:10:46.720 --> 00:10:48.551
this stuff is kinda tricky.
&gt;&gt; Speaker 3: Yeah,

219
00:10:48.551 --> 00:10:51.282
there's a couple of places where
you can get off track, essentially.

220
00:10:51.282 --> 00:10:52.057
&gt;&gt; Scott Moss: Right, yeah, so

221
00:10:52.057 --> 00:10:55.280
I would just stick for this as a temporary
solution for the course, yeah.

