WEBVTT

1
00:00:00.330 --> 00:00:06.630
&gt;&gt; Scott: So any questions on Express,
how it works with Serverless,

2
00:00:06.630 --> 00:00:11.060
why you should use it, or which
method to use as far as routing goes,

3
00:00:11.060 --> 00:00:13.530
and the trade-offs and
why you would use them?

4
00:00:13.530 --> 00:00:17.522
Cuz there's some pretty different use
cases you would use a lot of this

5
00:00:17.522 --> 00:00:18.205
stuff for.

6
00:00:20.373 --> 00:00:23.770
&gt;&gt; Speaker 2: HTTP isn't
express specific is it?

7
00:00:23.770 --> 00:00:25.400
When you, the Serverless HTTP?

8
00:00:25.400 --> 00:00:28.853
&gt;&gt; Scott: No, the service HTTP
has nothing to do with Express.

9
00:00:28.853 --> 00:00:36.435
But Express, so services HTTP is
based off of HTTP which Express uses.

10
00:00:36.435 --> 00:00:39.383
So because they share
similar dependencies,

11
00:00:39.383 --> 00:00:43.010
Express just so
happens to work with service HTTP.

12
00:00:43.010 --> 00:00:44.480
But it wasn't designed to work with it.

13
00:00:44.480 --> 00:00:49.480
It's just service HTTP, and it follows the
same API as HTTP does which Express uses.

14
00:00:49.480 --> 00:00:52.280
&gt;&gt; Speaker 2: Do you know if
most other server frameworks,

15
00:00:52.280 --> 00:00:55.690
I'm thinking Python specifically,
I'm not sure if you would know this,

16
00:00:55.690 --> 00:01:00.830
but would a flask use
HTTP also to communicate?

17
00:01:00.830 --> 00:01:03.020
And so
the process is probably pretty similar.

18
00:01:03.020 --> 00:01:05.880
&gt;&gt; Scott: I don't know the exact
library flask would use,

19
00:01:05.880 --> 00:01:09.270
but I'm 100% sure you can use
flask on Serverless, yeah.

20
00:01:09.270 --> 00:01:11.480
I've come across it in the wild.

21
00:01:11.480 --> 00:01:14.185
I just don't know what the library is,
cuz I don't practice Python every day.

22
00:01:17.055 --> 00:01:18.810
&gt;&gt; Scott: I haven't written
Python in two years.

23
00:01:19.870 --> 00:01:21.510
But it's my favorite language, actually.

24
00:01:21.510 --> 00:01:23.490
I just don't have a reason to write it.

25
00:01:23.490 --> 00:01:28.384
[LAUGH]
&gt;&gt; Scott: Any other

26
00:01:28.384 --> 00:01:29.773
questions on this stuff?

27
00:01:31.291 --> 00:01:33.970
&gt;&gt; Scott: Cool, so
this doesn't change any deployment.

28
00:01:33.970 --> 00:01:34.840
This doesn't change anything.

29
00:01:34.840 --> 00:01:38.030
You'd still deploy it
the same way you would, and

30
00:01:38.030 --> 00:01:42.700
if you did what I did, where you commented
these out, or you deleted these,

31
00:01:42.700 --> 00:01:46.270
when you do a deploy, these are already
gone from AWS, completely gone.

32
00:01:46.270 --> 00:01:48.300
They're not gonna be there.

33
00:01:48.300 --> 00:01:52.350
So that's supposed to happen,
so don't freak out.

34
00:01:52.350 --> 00:01:54.020
I was like, what happened to my lambdas?

35
00:01:54.020 --> 00:01:55.770
I was gonna use them.

36
00:01:55.770 --> 00:01:56.270
Yes.

37
00:01:58.383 --> 00:01:58.883
&gt;&gt; Scott: Question?

38
00:02:00.630 --> 00:02:04.320
What sort of routing would you suggest
if you are using an enterprise app,

39
00:02:04.320 --> 00:02:08.680
with components like S3,
DynamoDB, Kinesis, and so on?

40
00:02:08.680 --> 00:02:13.430
If you're doing that,
I would not recommend using Express

41
00:02:13.430 --> 00:02:17.700
because then you'll just get caught
up writing a big old Express app, and

42
00:02:17.700 --> 00:02:20.920
you're not using service
anymore at that point.

43
00:02:20.920 --> 00:02:23.540
Because the thing about
service is there's limits.

44
00:02:23.540 --> 00:02:24.842
And yes,
they keep increasing those limits, but

45
00:02:24.842 --> 00:02:25.742
you're still gonna have limits.

46
00:02:25.742 --> 00:02:29.430
So you're looking at 250
megabyte file size limit.

47
00:02:29.430 --> 00:02:32.660
You're looking at execution time limits,
memory limits.

48
00:02:32.660 --> 00:02:36.500
So the most you can shard that out and
spread it out across multiple functions,

49
00:02:36.500 --> 00:02:39.801
if you're doing heavy things like
Kinesis streams and S-tree and Dynamo,

50
00:02:39.801 --> 00:02:43.280
yeah, I would definitely make
different functions for that.

51
00:02:43.280 --> 00:02:45.540
Because they're all sound like
they're doing different things.

52
00:02:45.540 --> 00:02:49.230
Whereas what we're talking about is more
like this is just an API general thing.

53
00:02:49.230 --> 00:02:53.230
We're interacting with S3, and Dynamo and
Kinesis and all these different

54
00:02:53.230 --> 00:02:55.750
functionalities, it almost sounds
like completely different things.

55
00:02:55.750 --> 00:02:57.920
You should probably have
those in different functions.

56
00:02:57.920 --> 00:03:01.060
So, yeah, I would use different
functions for those things and

57
00:03:01.060 --> 00:03:05.570
take advantage of native events and
support that AWS would give you

58
00:03:05.570 --> 00:03:10.230
versus trying to tie that
logic into Express yourself.

59
00:03:10.230 --> 00:03:12.590
Which you don't have to,
if AWS gives it to you for free.

