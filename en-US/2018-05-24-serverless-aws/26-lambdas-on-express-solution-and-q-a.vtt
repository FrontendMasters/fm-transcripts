WEBVTT

1
00:00:00.360 --> 00:00:05.780
&gt;&gt; Scott Moss: Was everyone able to
convert over their app using Express?

2
00:00:07.300 --> 00:00:08.300
Pretty simple, right?

3
00:00:08.300 --> 00:00:11.567
So again, if you're thinking about
using Serverless in Lambda and

4
00:00:11.567 --> 00:00:12.941
you have an Express app, and

5
00:00:12.941 --> 00:00:17.300
your manager is telling you that you can't
do it because it's gonna take forever.

6
00:00:17.300 --> 00:00:19.170
Then you can just do that this weekend.

7
00:00:19.170 --> 00:00:21.050
And say, look I already did it.

8
00:00:21.050 --> 00:00:22.050
And then it can't say anything.

9
00:00:22.050 --> 00:00:24.500
And then you just show them the numbers of
how much money they're gonna be saving.

10
00:00:24.500 --> 00:00:26.100
And they're gonna be like.

11
00:00:26.100 --> 00:00:27.660
But then you try to connect to
the database and you're like,

12
00:00:27.660 --> 00:00:28.412
actually, we can't do it.

13
00:00:28.412 --> 00:00:33.690
[LAUGH] If anyone wants to talk about
connecting databases in Lambda,

14
00:00:33.690 --> 00:00:39.250
we can definitely do that after this
next module cuz, yeah, good luck.

15
00:00:40.620 --> 00:00:42.660
Were there any questions about that?

16
00:00:42.660 --> 00:00:44.140
Did anybody notice any patterns?

17
00:00:44.140 --> 00:00:47.510
Was there anything different
using Express on Lambda

18
00:00:47.510 --> 00:00:50.650
than you might have experienced using
Express on a traditional server?

19
00:00:50.650 --> 00:00:53.527
And if so, what were those differences
that you might have examined?

20
00:00:56.829 --> 00:00:57.595
&gt;&gt; Scott Moss: Nothing there?

21
00:00:57.595 --> 00:00:59.220
And, yeah?

22
00:00:59.220 --> 00:01:00.138
&gt;&gt; Speaker 2: Well, I mean,

23
00:01:00.138 --> 00:01:04.872
I guess an immediate question that comes
to mind that I didn't experience, but

24
00:01:04.872 --> 00:01:09.463
I definitely thought about while we were
on break was using Express as a server

25
00:01:09.463 --> 00:01:14.222
naturally leads to all kinds of questions
that you have with an Express server.

26
00:01:14.222 --> 00:01:15.425
&gt;&gt; Scott Moss: Right.
&gt;&gt; Speaker 2: What kind of

27
00:01:15.425 --> 00:01:18.236
Middleware am I gonna use to manage flow?

28
00:01:18.236 --> 00:01:20.145
&gt;&gt; Scott Moss: Right.
&gt;&gt; Speaker 2: What resources is my Express

29
00:01:20.145 --> 00:01:25.135
server gonna use for authentication and
logging and all that kind of stuff?

30
00:01:25.135 --> 00:01:27.710
&gt;&gt; Scott Moss: Mm-hm.
&gt;&gt; Speaker 2: Is that all manageable in

31
00:01:27.710 --> 00:01:31.990
the AWS environment or no?

32
00:01:31.990 --> 00:01:34.546
&gt;&gt; Scott Moss: Yeah, and
this is kind of what I was saying with

33
00:01:34.546 --> 00:01:38.429
the question in the chatroom is it's so
nice to have Express on Lamba.

34
00:01:38.429 --> 00:01:43.104
But then you get caught of thinking about
what you would do in a traditional Express

35
00:01:43.104 --> 00:01:47.020
server, which is on a server,
which is all of that stuff.

36
00:01:47.020 --> 00:01:51.520
But in reality you probably wouldn't do
authorization on that Express server.

37
00:01:51.520 --> 00:01:52.760
You'd have another Lambda for that.

38
00:01:52.760 --> 00:01:56.530
Or your Middleware would
be very basic because

39
00:01:56.530 --> 00:01:59.720
most of the Middleware you're doing could
probably offload it to another Lambda.

40
00:01:59.720 --> 00:02:03.510
So there's a lot of things you would, the
way I would like to think about is just

41
00:02:03.510 --> 00:02:08.084
think of Express as just the routing,
and forget everything else you did.

42
00:02:08.084 --> 00:02:10.590
Because yes, you can do everything
you just described, but

43
00:02:10.590 --> 00:02:14.850
at the end of the day you just have
a huge Express app on a Lambda function.

44
00:02:14.850 --> 00:02:17.670
And it's like what benefit
are you getting from that?

45
00:02:17.670 --> 00:02:20.490
And it's probably going to be worse,
because it's probably slower most likely.

46
00:02:20.490 --> 00:02:22.190
Depending on where your setup was.

47
00:02:22.190 --> 00:02:24.200
And you're not taking advantage
of anything else that

48
00:02:24.200 --> 00:02:25.740
a Lambda could offer you.

49
00:02:25.740 --> 00:02:27.510
So you might be saving money, maybe.

50
00:02:27.510 --> 00:02:29.950
Maybe you'll save some money,
but that's about it.

51
00:02:29.950 --> 00:02:34.704
&gt;&gt; Speaker 2: I guess a follow up
question to that was, I wonder if anyone,

52
00:02:34.704 --> 00:02:39.926
I mean basically by using Express
you are putting in a lot of baggage

53
00:02:39.926 --> 00:02:44.793
in the node modules that Webpack
is just gonna remove anyway.

54
00:02:44.793 --> 00:02:47.877
I wonder if there are already exist
library out there that's just

55
00:02:47.877 --> 00:02:49.846
basically just, [CROSSTALK] Routing?

56
00:02:49.846 --> 00:02:50.531
&gt;&gt; Scott Moss: Just the routing.

57
00:02:50.531 --> 00:02:51.849
Yeah, tons of them.

58
00:02:51.849 --> 00:02:52.470
There's at least a hundred of them.

59
00:02:52.470 --> 00:02:55.694
You can just type in, I mean, there are so

60
00:02:55.694 --> 00:03:00.475
many of them like node, [CROSSTALK] I
should be using that instead of Express.

61
00:03:00.475 --> 00:03:04.640
Yeah, I think the Express one is
literally just a transitioning over.

62
00:03:04.640 --> 00:03:07.020
It's like, cool,
how do we get from here to here?

63
00:03:07.020 --> 00:03:08.580
All right, boom, place it in.

64
00:03:08.580 --> 00:03:11.150
Now, let's start taking things out and
making it more lightweight,

65
00:03:11.150 --> 00:03:14.030
and that's kinda
the approach I would take.

66
00:03:14.030 --> 00:03:16.493
Type in node routing and
the first thing that comes up is Express.

67
00:03:16.493 --> 00:03:18.690
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Scott Moss: SEO is strong.

68
00:03:20.070 --> 00:03:21.430
But yeah, there's tons of routers.

69
00:03:21.430 --> 00:03:24.410
Or you could've went down the path that I
was saying where you just make your own

70
00:03:24.410 --> 00:03:27.400
hash table, state machine and
do it yourself.

71
00:03:27.400 --> 00:03:30.192
But yeah, there's tons of them out there.

72
00:03:30.192 --> 00:03:34.095
Are there any other questions
with Express and Serverless and

73
00:03:34.095 --> 00:03:36.430
how those things combine together?

74
00:03:38.240 --> 00:03:39.810
Everybody understands how that works?

75
00:03:39.810 --> 00:03:42.650
It's not a long live server,
even though you have Express.

76
00:03:42.650 --> 00:03:44.220
It's still just a Lambda function.

77
00:03:45.370 --> 00:03:45.970
All right?

78
00:03:45.970 --> 00:03:47.100
Okay, cool.

79
00:03:47.100 --> 00:03:50.540
Next thing we're gonna do is
we're gonna talk about testing.

80
00:03:50.540 --> 00:03:54.734
But I did wanna talk about,
I think it's a good

81
00:03:54.734 --> 00:03:59.157
opportunity to talk about
some gotchas in here.

82
00:03:59.157 --> 00:04:02.317
Or something that are, somethings you
just wouldn't really know unless you just

83
00:04:02.317 --> 00:04:03.678
kinda like mess like Express.

84
00:04:03.678 --> 00:04:05.260
I'm sorry, Serverless profile.

85
00:04:05.260 --> 00:04:08.950
So let me check out to lesson-3-solution.

86
00:04:08.950 --> 00:04:10.296
This just has my test on it.

87
00:04:14.347 --> 00:04:15.760
&gt;&gt; Scott Moss: Okay,
okay, I'm fine with that.

88
00:04:18.572 --> 00:04:19.212
&gt;&gt; Scott Moss: My God.

89
00:04:28.521 --> 00:04:29.417
&gt;&gt; Scott Moss: Okay.

90
00:04:29.417 --> 00:04:32.796
So, a couple of things to note here is

91
00:04:32.796 --> 00:04:38.328
that,
&gt;&gt; Scott Moss: Looks

92
00:04:38.328 --> 00:04:40.880
like my solution's like,
yeah, I broke it out.

93
00:04:40.880 --> 00:04:41.380
Okay, cool.

94
00:04:41.380 --> 00:04:44.840
A couple things to note here is just for

95
00:04:44.840 --> 00:04:49.240
my solution what I decided to do was kind
of like what I would do in a traditional

96
00:04:49.240 --> 00:04:55.050
app whereas I wouldn't,
if I make an Express app I don't

97
00:04:55.050 --> 00:04:58.090
start the Express server in the same
file that I create the Express server.

98
00:04:58.090 --> 00:05:02.260
And that's because I want to be able to
export that app instance from Express and

99
00:05:02.260 --> 00:05:04.050
test it without starting a server.

100
00:05:04.050 --> 00:05:05.740
So I always start
the server in another file.

101
00:05:05.740 --> 00:05:08.360
So that's kinda what I did here
when I started the server.

102
00:05:08.360 --> 00:05:09.780
So I create the Express out here.

103
00:05:09.780 --> 00:05:15.488
I export it and then in another file
I actually require and do the thing.

104
00:05:15.488 --> 00:05:19.016
And that allows me to be a little test
everything in this file without having to

105
00:05:19.016 --> 00:05:21.360
interact with all the business logic here.

106
00:05:21.360 --> 00:05:23.080
So that's kind of the solution I did.

107
00:05:23.080 --> 00:05:26.200
And that's just like
having this testable code.

108
00:05:26.200 --> 00:05:29.400
Eventually you break all the stuff out
into all different other types of things,

109
00:05:29.400 --> 00:05:31.800
but that's just the approach I took.

110
00:05:31.800 --> 00:05:35.880
But the things I wanted to
talk about were understanding

111
00:05:37.500 --> 00:05:42.350
things like closures, and caching, and

112
00:05:42.350 --> 00:05:47.510
that stuff inside of Lambda cuz they
actually do have effects, side effects.

113
00:05:47.510 --> 00:05:51.800
So this function right here,
this is our handler.

114
00:05:51.800 --> 00:05:56.040
This is the actual Lambda function that's
going to be invoked, this is the entry.

115
00:05:56.040 --> 00:06:01.230
Whatever state you declare out here
while the container is still used and

116
00:06:01.230 --> 00:06:04.610
the Lambda is still hot it's
basically cache, it's closure.

117
00:06:04.610 --> 00:06:06.820
So you could have side effects in here.

118
00:06:06.820 --> 00:06:09.770
So this can be useful and
this can also be dangerous.

119
00:06:09.770 --> 00:06:12.540
This is useful for things like
databases where you would cache

120
00:06:12.540 --> 00:06:14.636
a database connection so
it's not always reconnecting.

121
00:06:14.636 --> 00:06:18.110
And this kind of how you get
around this software databases.

122
00:06:18.110 --> 00:06:21.180
But it can also be dangerous if you
declare some object out here and

123
00:06:21.180 --> 00:06:24.800
you're mutating the object somewhere in
this function on every single request, and

124
00:06:24.800 --> 00:06:27.480
you're having these bugs where
everybody is getting different values.

125
00:06:27.480 --> 00:06:29.030
And you're like,
I don't know what's going on.

126
00:06:29.030 --> 00:06:34.290
Also, cuz you're mutating this object
in a closer inside of this Lambda.

127
00:06:34.290 --> 00:06:37.860
So you gotta remember that cuz
the container has the same memory.

128
00:06:37.860 --> 00:06:38.660
It's the same container.

129
00:06:38.660 --> 00:06:41.640
So if you keep it here it's
gonna hold a reference to it.

130
00:06:41.640 --> 00:06:44.570
So that can be used in your advantage.

131
00:06:44.570 --> 00:06:46.990
It could also be used
to your disadvantage.

132
00:06:46.990 --> 00:06:48.320
So just be wary of that.

133
00:06:48.320 --> 00:06:51.900
We really ran into that problem so
many times.

134
00:06:51.900 --> 00:06:54.550
And then when I ran to the problem of
how do I keep it dated it's connection

135
00:06:54.550 --> 00:06:55.750
over open,

136
00:06:55.750 --> 00:06:59.410
I realized it like I could just do that
thing that got me stuck like a week ago.

137
00:06:59.410 --> 00:07:01.517
So, [LAUGH] that's how that worked out.

138
00:07:01.517 --> 00:07:04.880
Any questions on that,
this might not understand what I mean but

139
00:07:04.880 --> 00:07:10.090
I like the closures and mutations
basically, I just walk through it.

140
00:07:10.090 --> 00:07:14.735
But If I had this function here,
&gt;&gt; Scott Moss: And

141
00:07:14.735 --> 00:07:21.633
I had an object says state,
&gt;&gt; Scott Moss: And

142
00:07:21.633 --> 00:07:26.857
if I came in here and
was just like state.name =,

143
00:07:34.532 --> 00:07:35.401
&gt;&gt; Scott Moss: Right,

144
00:07:35.401 --> 00:07:38.880
I'm changing the state up here.

145
00:07:38.880 --> 00:07:39.980
It's in a closure.

146
00:07:39.980 --> 00:07:43.050
So as long as its container is
still open this is the same state,

147
00:07:43.050 --> 00:07:44.470
it's the same object.

148
00:07:44.470 --> 00:07:47.410
So I'm mutating that state and
I could possibly have side effects.

149
00:07:47.410 --> 00:07:49.930
All right, so
you gotta be careful of that.

150
00:07:49.930 --> 00:07:53.980
So if you are keeping state outside of
your handlers for better or for worse, and

151
00:07:53.980 --> 00:07:57.650
you don't intend to have side effects
just make sure you keep everything

152
00:07:58.730 --> 00:07:59.970
stateless and mutable.

153
00:07:59.970 --> 00:08:03.268
So instead of doing that you
might do something like,

154
00:08:12.526 --> 00:08:13.308
&gt;&gt; Scott Moss: And then now you just

155
00:08:13.308 --> 00:08:15.640
made a new object based off of that,
you put a name there.

156
00:08:15.640 --> 00:08:16.823
So it's immutable now.

157
00:08:16.823 --> 00:08:19.370
So just be wary of that.

158
00:08:19.370 --> 00:08:21.420
[LAUGH] It will bite you and

159
00:08:21.420 --> 00:08:25.200
you would not know what's going on,
cuz it just will not tell you.

160
00:08:25.200 --> 00:08:28.400
And if you have a frame or Express you
won't even know where the closure is.

161
00:08:28.400 --> 00:08:31.689
You would be like, I don't even
know where the handler starts or

162
00:08:31.689 --> 00:08:32.890
where the closure ends.

163
00:08:32.890 --> 00:08:34.670
You just won't even know what's going on.

164
00:08:34.670 --> 00:08:36.490
So just be careful with that.

165
00:08:36.490 --> 00:08:38.970
My advice is just put
everything in a function.

166
00:08:38.970 --> 00:08:40.514
Put everything in a function, you're fine.

167
00:08:40.514 --> 00:08:43.900
You would never have this problem cuz
these functions do not reach out and

168
00:08:43.900 --> 00:08:45.160
create closures.

169
00:08:45.160 --> 00:08:46.530
Just put everything in a function.

170
00:08:46.530 --> 00:08:48.980
Closures are not good for
Lambda unless you absolutely need to.

171
00:08:48.980 --> 00:08:51.502
Does that make sense?

172
00:08:54.008 --> 00:08:54.508
&gt;&gt; Scott Moss: Cool.

173
00:08:55.710 --> 00:08:57.782
What else did I want to talk
about before I get to testing?

174
00:09:01.168 --> 00:09:01.850
&gt;&gt; Scott Moss: I think that's it.

175
00:09:01.850 --> 00:09:05.310
Most of the other stuff
is really advanced.

176
00:09:05.310 --> 00:09:07.050
Any other questions?

177
00:09:07.050 --> 00:09:09.375
Specific things so far?

178
00:09:09.375 --> 00:09:12.707
I mean so far what you've learned about
Lambda is basically all you need to know

179
00:09:12.707 --> 00:09:13.876
about deploying Lambdas.

180
00:09:13.876 --> 00:09:16.780
You all could just deploy
Lambdas on AWS right now and

181
00:09:16.780 --> 00:09:19.870
you'd be totally well equipped to do it.

182
00:09:19.870 --> 00:09:24.200
You will run into problems if things
go sideways for sure, as we all do.

183
00:09:24.200 --> 00:09:29.310
But you are more than well equipped to go
deploy some Lambdas, so congratulations.

184
00:09:29.310 --> 00:09:33.350
If I had a certificate and
a printer I'd print some out.

185
00:09:33.350 --> 00:09:36.209
I don't have that.

186
00:09:36.209 --> 00:09:37.797
[LAUGH] So, [LAUGH]

