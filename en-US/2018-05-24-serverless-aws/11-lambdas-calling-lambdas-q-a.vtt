WEBVTT

1
00:00:00.610 --> 00:00:01.200
&gt;&gt; Scott Moss: Yes.

2
00:00:01.200 --> 00:00:04.180
&gt;&gt; Student: So
seems likely that from here,

3
00:00:05.400 --> 00:00:09.920
I might trigger events to trigger
other landers, can I do that?

4
00:00:09.920 --> 00:00:10.600
&gt;&gt; Scott Moss: You bet, yeah.

5
00:00:10.600 --> 00:00:12.409
&gt;&gt; Student: I'm like can I do that?

6
00:00:12.409 --> 00:00:12.976
&gt;&gt; Scott Moss: Yeah, can you.

7
00:00:12.976 --> 00:00:14.680
&gt;&gt; Student: [LAUGH]
&gt;&gt; Scott Moss: Yeah, it sounds really cool

8
00:00:14.680 --> 00:00:16.580
and you know what, there you can do it.

9
00:00:16.580 --> 00:00:20.339
It's the problem is like, how to do it
effectively and efficiently because you

10
00:00:20.339 --> 00:00:23.927
can go on, so I'm gonna get into a little
bit of how lambdas actually work and

11
00:00:23.927 --> 00:00:26.660
the architecture underneath them.

12
00:00:26.660 --> 00:00:31.070
The way they work is AWS spins
up a container, right and

13
00:00:31.070 --> 00:00:33.890
that container gets recycled.

14
00:00:33.890 --> 00:00:37.540
But inside that container, that's when
your lambda actually gets executed.

15
00:00:37.540 --> 00:00:41.410
So what happens is let's say you haven't
executed a lambda in like a day.

16
00:00:41.410 --> 00:00:42.780
You finally execute a lambda,

17
00:00:42.780 --> 00:00:45.810
that creates a container and then that
spins up your line of functions, so

18
00:00:45.810 --> 00:00:49.490
there's a cold start there, that's gonna
take some time, it's not warm yet.

19
00:00:49.490 --> 00:00:52.560
So, that's gonna take some overheat and
then your lambda executes.

20
00:00:52.560 --> 00:00:54.242
And if you heat it like within,

21
00:00:54.242 --> 00:00:57.934
whatever, you know frequency that
ADS decides to recycle things,

22
00:00:57.934 --> 00:01:02.032
nobody really knows the exact number,
it's between 5 and 20 minutes.

23
00:01:02.032 --> 00:01:06.040
I've been looking, nobody knows
the number, then, it's warm, you're good.

24
00:01:06.040 --> 00:01:09.990
So if you have a lambda that you hit
with a HTTP request that was cold,

25
00:01:09.990 --> 00:01:11.030
there's a cold start there.

26
00:01:11.030 --> 00:01:13.411
And then, let's say you've got
some database connections there,

27
00:01:13.411 --> 00:01:14.939
this has got to connect
to those databases.

28
00:01:14.939 --> 00:01:16.185
And then, inside that lambda,

29
00:01:16.185 --> 00:01:18.180
you hit another lambda that
had a cold start there.

30
00:01:18.180 --> 00:01:21.160
And then, it had database connections,
you could imagine, it could be really,

31
00:01:21.160 --> 00:01:22.550
really slow.

32
00:01:22.550 --> 00:01:26.750
And eventually it's compounded,
so, it sounds cool at first but

33
00:01:26.750 --> 00:01:29.460
it really all depends on like what
you're doing in those lambdas.

34
00:01:29.460 --> 00:01:33.030
If they are async versus synchronous,
like if I'm calling a lambda and

35
00:01:33.030 --> 00:01:35.420
just forgetting about it cuz it's doing
something in the background, that's fine.

36
00:01:35.420 --> 00:01:36.362
It's never gonna hurt you, but

37
00:01:36.362 --> 00:01:38.970
if you're calling a lambda that's
calling another lambda and

38
00:01:38.970 --> 00:01:42.000
it's waiting on that lambda and you're
client's waiting on the first lambda.

39
00:01:43.260 --> 00:01:46.320
Your API's gonna be pretty slow and
not to mention right now,

40
00:01:46.320 --> 00:01:49.430
API Gateway adds somewhere
between 200 milliseconds

41
00:01:49.430 --> 00:01:53.860
of delay to every single request and
they're working on that, but that's a lot.

42
00:01:53.860 --> 00:01:56.340
Just 200 milliseconds right off
the bat for using API Gateway.

43
00:01:57.620 --> 00:02:01.810
So there's a lot of trade offs there,
so you can totally do it but,

44
00:02:03.110 --> 00:02:06.950
probably shouldn't, at least not
without figuring out what you're doing.

