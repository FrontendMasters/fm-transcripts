WEBVTT

1
00:00:00.060 --> 00:00:02.880
&gt;&gt; Scott Moss: Welcome back, I hope
everyone had a chance to setup the route

2
00:00:02.880 --> 00:00:07.249
handlers in the service yellow file for
the to-do's and the to-do route.

3
00:00:07.249 --> 00:00:09.980
And we're also going to walk through how
to set up parameters as one of these

4
00:00:09.980 --> 00:00:15.290
routes as well and then how you can
access them inside your lambda functions.

5
00:00:15.290 --> 00:00:19.640
So first things first, we can pretty
much just, if you followed along before.

6
00:00:19.640 --> 00:00:24.690
You could probably just copy what I have
here, and we'll place that on the todos

7
00:00:24.690 --> 00:00:27.150
underneath the handler while
I have both of these open.

8
00:00:27.150 --> 00:00:29.960
And we'll just paste that there.

9
00:00:29.960 --> 00:00:33.220
And instead,
we'll just call this todo GET.

10
00:00:34.360 --> 00:00:39.960
And then for the todo one, this is where
we wanna use an ID cuz it's rest and

11
00:00:39.960 --> 00:00:42.318
That's just how you
follow with a parameter.

12
00:00:42.318 --> 00:00:46.170
So we'll call this one todo and then for
the parameter we'll use this syntax here,

13
00:00:46.170 --> 00:00:47.570
and then we'll just say id.

14
00:00:47.570 --> 00:00:53.290
And this right here is basically
saying here's a place holder for

15
00:00:53.290 --> 00:00:54.880
an ID that I wanna use.

16
00:00:56.300 --> 00:01:00.962
Now, depending on what version of
servers offline we're using all

17
00:01:00.962 --> 00:01:05.294
these in the gateway now you might
also have to come down here and

18
00:01:05.294 --> 00:01:10.002
add like parameters,
&gt;&gt; Scott Moss: parameters,

19
00:01:10.002 --> 00:01:15.106
okay, I'm sorry, yeah there it is, it's
request, yeah, request object parameters.

20
00:01:16.858 --> 00:01:21.020
&gt;&gt; Scott Moss: And then in
the parameters you have to say ID True.

21
00:01:21.020 --> 00:01:24.080
Just to make sure it actually
goes through API gateway.

22
00:01:24.080 --> 00:01:28.950
Because API gateway is very
configurable and very strict.

23
00:01:28.950 --> 00:01:33.490
So you would have to, this is telling to,
like, hey, allow this to happen.

24
00:01:33.490 --> 00:01:36.210
Allow it to happen so
the Landa can access it.

25
00:01:36.210 --> 00:01:37.640
Otherwise it may or may not do it.

26
00:01:37.640 --> 00:01:40.110
The behavior I've observed
is [INAUDIBLE] list.

27
00:01:40.110 --> 00:01:42.762
So it's better to be explicit
that leave it up to chance.

28
00:01:44.724 --> 00:01:46.410
&gt;&gt; Scott Moss: So, this sets up our route.

29
00:01:46.410 --> 00:01:51.469
And from here always should be able to
do is just coming here, yarn dev, and

30
00:01:51.469 --> 00:01:58.900
on 4,500 here I'm just gonna
use http pi here to a 4,500.

31
00:01:58.900 --> 00:02:04.710
And I'm gonna head up todo, and boom,
we get back those to-dos good to go.

32
00:02:04.710 --> 00:02:10.600
And then, I'm gonna do Slash, some random
ID here, and also get back that todo.

33
00:02:10.600 --> 00:02:16.000
And then as far as the lambdas themselves,

34
00:02:16.000 --> 00:02:21.400
and what that will look like, if we go
into the To Do on the hazard parameter.

35
00:02:21.400 --> 00:02:24.110
Did anybody look to see where
that parameter is coming in and

36
00:02:24.110 --> 00:02:25.730
how you can access it?

37
00:02:25.730 --> 00:02:26.610
Alright, what is it on?

38
00:02:26.610 --> 00:02:27.300
Is it on the event?

39
00:02:27.300 --> 00:02:28.200
Is it on the context?

40
00:02:29.670 --> 00:02:30.207
&gt;&gt; Speaker 2: It's on the event.

41
00:02:30.207 --> 00:02:32.640
&gt;&gt; Scott Moss: It's on the event, yes.
So, let's just look at this now.

42
00:02:32.640 --> 00:02:35.700
Let's just verify what's going on here.

43
00:02:35.700 --> 00:02:37.020
I know we look at the event in AWS.

44
00:02:37.020 --> 00:02:39.480
Let's just see what's happening here.

45
00:02:41.570 --> 00:02:43.410
And restart-
&gt;&gt; Speaker 2: You have some typos.

46
00:02:43.410 --> 00:02:45.453
&gt;&gt; Scott Moss: It's not gonna work.

47
00:02:45.453 --> 00:02:45.953
&gt;&gt; Speaker 2: Nice.

48
00:02:47.426 --> 00:02:49.882
&gt;&gt; Speaker 2: In JSON and-.

49
00:02:49.882 --> 00:02:51.354
&gt;&gt; Scott Moss: No.

50
00:02:51.354 --> 00:02:53.230
There we go, cool.

51
00:02:53.230 --> 00:02:55.710
I don't know why VS Code

52
00:02:55.710 --> 00:02:58.880
has that autocomplete just in
your face as you're typing.

53
00:02:58.880 --> 00:02:59.552
It's so annoying.

54
00:03:05.383 --> 00:03:06.440
&gt;&gt; Scott Moss: All right.

55
00:03:06.440 --> 00:03:09.770
So now, if we run, is that TODO?

56
00:03:09.770 --> 00:03:10.270
Yeah.

57
00:03:12.104 --> 00:03:14.450
&gt;&gt; Scott Moss: And
we look at the logs, here's the event.

58
00:03:15.620 --> 00:03:18.420
You can see we got some headers,
the actual PATH, so

59
00:03:18.420 --> 00:03:21.500
this is the PATH relative to the ROOT.

60
00:03:21.500 --> 00:03:22.500
Any parameters.

61
00:03:22.500 --> 00:03:26.400
This is what that parameter true does that
actually just sets it up really nice for

62
00:03:26.400 --> 00:03:27.550
you like this.

63
00:03:27.550 --> 00:03:31.460
And then just like the request context,
the account ID,

64
00:03:31.460 --> 00:03:35.190
the resource ID, stage,
all those different type of things.

65
00:03:35.190 --> 00:03:38.866
Authorizer, we'll talk a little
more about authorizers, but we will

66
00:03:38.866 --> 00:03:43.356
not actually writing custom authorizers,
and then just some basic other stuff here.

67
00:03:43.356 --> 00:03:46.176
Anybody take a look at the context
object and what was on here?

68
00:03:47.765 --> 00:03:48.517
&gt;&gt; Scott Moss: No?

69
00:03:48.517 --> 00:03:49.575
All right, let's take a look.

70
00:03:52.027 --> 00:03:53.665
&gt;&gt; Scott Moss: So in the context object,

71
00:03:53.665 --> 00:03:58.429
again it really depends on what you're
doing, if you need this or not But for

72
00:03:58.429 --> 00:04:02.830
this case for offline it really is
not that helpful cuz it's offline.

73
00:04:02.830 --> 00:04:06.090
But basically, it gives you the name
of the lambda function you're actually

74
00:04:06.090 --> 00:04:09.380
executing in which is great for
things like analytics and stuff like that.

75
00:04:09.380 --> 00:04:12.300
If you're trying to log analytics
on your lambda functions,

76
00:04:12.300 --> 00:04:13.500
now you know what function was ran.

77
00:04:13.500 --> 00:04:18.380
So that's mostly what I use context for
is things like analytics cuz it's more of

78
00:04:18.380 --> 00:04:23.600
Platform information than
it is the actual event.

79
00:04:23.600 --> 00:04:28.110
So then, the versioning of your function,
because you can actually version your

80
00:04:28.110 --> 00:04:31.010
lambdas, and
we'll talk about that when we deploy.

81
00:04:31.010 --> 00:04:32.050
You'll get the ARN.

82
00:04:32.050 --> 00:04:37.400
If you don't know what ARN in Amazon,
ARN stands for Amazon resource number.

83
00:04:37.400 --> 00:04:40.920
It's basically a unique identifier for
any resource on Amazon,

84
00:04:40.920 --> 00:04:44.150
whether it's a lambda function
All the way to a database table.

85
00:04:44.150 --> 00:04:45.360
It's a unique identifier.

86
00:04:45.360 --> 00:04:49.930
And it's a combination of your account ID,
the region, some random thing.

87
00:04:49.930 --> 00:04:51.730
It's a unique identifier.

88
00:04:51.730 --> 00:04:54.990
So this is the ARN for
this lambda function which, again,

89
00:04:54.990 --> 00:05:00.300
is really good for analytics and
stuff like that and debugging.

90
00:05:00.300 --> 00:05:02.410
And then,
you just get things like the request ID,

91
00:05:02.410 --> 00:05:07.500
which is the ID that AWS API Gateway
assigned to this request.

92
00:05:07.500 --> 00:05:08.550
Sometimes, it'll be in the header.

93
00:05:08.550 --> 00:05:12.330
You should probably get rid of it,
because it's a security thing.

94
00:05:12.330 --> 00:05:16.860
And we didn't talk about this,
but by default,

95
00:05:16.860 --> 00:05:21.310
when you deploy to AWS,
Service creates a log group for you.

96
00:05:21.310 --> 00:05:23.340
So you could actually
go look at your logs.

97
00:05:23.340 --> 00:05:26.030
This is the group name and
the stream name of those logs, so

98
00:05:26.030 --> 00:05:27.350
you can go check them out.

99
00:05:27.350 --> 00:05:32.780
So whenever you do a log inside of Lambda
on AWS, those logs get written to a file.

100
00:05:32.780 --> 00:05:34.800
This is where these files are on AWS.

101
00:05:34.800 --> 00:05:36.270
This is the name of it.

102
00:05:36.270 --> 00:05:39.830
So when we deploy again, we'll go check
out those logs and see what's happening.

103
00:05:39.830 --> 00:05:42.920
The other way is you can check out your
logs is through your terminal 2, you can

104
00:05:42.920 --> 00:05:47.450
stream them but just looking at them while
you do this is probably pretty simpler.

105
00:05:47.450 --> 00:05:50.670
And then identity,
this is if you did a customer authorizer,

106
00:05:50.670 --> 00:05:55.250
like if you add another lambda function
in front of this lambda function that

107
00:05:55.250 --> 00:05:57.400
authorized access to this lambda function.

108
00:05:57.400 --> 00:06:03.599
So AWS has this thing called incognito
which is like there are version of Zero.

109
00:06:03.599 --> 00:06:07.218
And they do things like social out,
password out, and JWTs.

110
00:06:07.218 --> 00:06:11.864
It would add things here, and then,
client context is just context of

111
00:06:11.864 --> 00:06:15.407
the client sent of if you need
which is almost never and

112
00:06:15.407 --> 00:06:18.581
that's basically what
the context object is.

113
00:06:18.581 --> 00:06:20.336
Any questions on any of the stuff?

114
00:06:21.520 --> 00:06:27.730
&gt;&gt; Scott Moss: Can you mock the context,
similar to how you do the event?

115
00:06:27.730 --> 00:06:34.233
&gt;&gt; Speaker 2: Yeah, from my understanding,
you can't do it through service offline.

116
00:06:34.233 --> 00:06:37.858
But if you run evoke locally, you can
mock out whatever the hell you want.

117
00:06:37.858 --> 00:06:38.510
&gt;&gt; Scott Moss: Okay.
&gt;&gt; Speaker 2: Yeah.

