WEBVTT

1
00:00:03.417 --> 00:00:06.239
&gt;&gt; Scott Moss: So, now we're gonna
talk about and this is a brief topic.

2
00:00:06.239 --> 00:00:10.263
But I just wanna talk about basically two

3
00:00:10.263 --> 00:00:15.004
different ways of how you
can execute a lambda.

4
00:00:15.004 --> 00:00:18.360
There is synchronous and
then there is asynchronous.

5
00:00:18.360 --> 00:00:21.843
Who here thinks they know what I'm
talking about when I say that?

6
00:00:21.843 --> 00:00:23.905
Cuz it's tricky, I know you're thinking,
it's JavaScript, yeah asynchronous,

7
00:00:23.905 --> 00:00:25.131
synchronous, that's what
you're talking about.

8
00:00:25.131 --> 00:00:26.886
I'm not, I'm talking about something else.

9
00:00:26.886 --> 00:00:28.662
Anybody wanna take a stab at it?

10
00:00:28.662 --> 00:00:31.954
The two different modes of running
a lambda function, synchronous or

11
00:00:31.954 --> 00:00:32.748
asynchronous.

12
00:00:32.748 --> 00:00:35.117
No, okay.

13
00:00:35.117 --> 00:00:40.373
Basically, synchronous mode
is when you call a lambda and

14
00:00:40.373 --> 00:00:44.671
you're waiting for
the response to come back.

15
00:00:44.671 --> 00:00:46.796
So this is like an API event.

16
00:00:46.796 --> 00:00:49.084
This is like I'm on a server and
I'm calling a lambda.

17
00:00:49.084 --> 00:00:51.708
This is a client calling a lambda
that's waiting on a response.

18
00:00:51.708 --> 00:00:53.913
It's what your servers do now.

19
00:00:53.913 --> 00:00:57.967
When you make a call to an API you
wait for the response to come back.

20
00:00:57.967 --> 00:01:01.207
It's happening in async but
it's synchronous cuz you're waiting for

21
00:01:01.207 --> 00:01:02.773
it to come back, it's blocking.

22
00:01:02.773 --> 00:01:06.582
Asynchronous lambda is something that
you fire and you forget about it.

23
00:01:06.582 --> 00:01:07.987
It's not gonna respond back to you.

24
00:01:07.987 --> 00:01:12.805
It's gonna go update S3 somewhere or
send an email in the background or

25
00:01:12.805 --> 00:01:15.626
update a DynamoDB table for some reason.

26
00:01:15.626 --> 00:01:17.368
That's an asynchronous lambda.

27
00:01:17.368 --> 00:01:20.328
So those are two different context
in which you can call lambdas.

28
00:01:20.328 --> 00:01:24.657
And that's very important because
depending on what context you're running

29
00:01:24.657 --> 00:01:26.505
in can affect your performance.

30
00:01:26.505 --> 00:01:28.807
It can affect a lot of things so

31
00:01:28.807 --> 00:01:33.610
you got to be careful how you
actually execute those lambdas.

32
00:01:33.610 --> 00:01:38.569
And that only comes down to when
you actually call the lambda

33
00:01:38.569 --> 00:01:40.959
yourself using the AWSSDK.

34
00:01:40.959 --> 00:01:43.876
So if you use the SDK and
you invoke a lamda using the SDK,

35
00:01:43.876 --> 00:01:48.290
whether it's on your node server or inside
of another lambda, maybe on the client,

36
00:01:48.290 --> 00:01:50.744
I don't why you're doing it but
you can do it.

37
00:01:50.744 --> 00:01:55.434
You'll have the option to say, I want this
to be synchronous or not synchronous.

38
00:01:55.434 --> 00:01:58.093
And then you can do that there.

39
00:01:58.093 --> 00:01:59.560
There are some trade-offs

