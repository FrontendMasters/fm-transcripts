WEBVTT

1
00:00:00.070 --> 00:00:03.766
&gt;&gt; Scott Moss: The next thing is
monitoring, so they have pretty much basic

2
00:00:03.766 --> 00:00:07.535
monitoring around what's
happening inside your function so

3
00:00:07.535 --> 00:00:10.003
you have things like invocation count.

4
00:00:10.003 --> 00:00:14.781
The duration of your functions,
how many errors, throttled invocations,

5
00:00:14.781 --> 00:00:19.557
we'll talk about throttling, iterator age,
DLQ errors like pretty much,

6
00:00:19.557 --> 00:00:24.273
all the metrics you would need to figure
out what's going on in your system.

7
00:00:24.273 --> 00:00:28.480
But they're basically bare, I mean,
you probably wanna use some other type

8
00:00:28.480 --> 00:00:32.622
of instrumentation on your lambdas to
get more information out of them, but

9
00:00:32.622 --> 00:00:33.737
it's good enough.

10
00:00:33.737 --> 00:00:36.645
It's good enough to figure out that
your lambda is performing pretty bad or

11
00:00:36.645 --> 00:00:38.874
pretty good and
you can figure out what bottlenecks are.

12
00:00:41.146 --> 00:00:42.856
&gt;&gt; Scott Moss: And
the other two things up top are,

13
00:00:42.856 --> 00:00:46.780
we have this throttle thing here which
basically throttles your lambda.

14
00:00:46.780 --> 00:00:49.819
So you know if you're experiencing
downtime on your database or

15
00:00:49.819 --> 00:00:53.760
you're migrating or somebody's hacking
you or something, you can throttle your

16
00:00:53.760 --> 00:00:57.156
lambda so it does exactly what it says,
it's throttling your lambda.

17
00:00:57.156 --> 00:01:02.066
And then qualifiers, these are basically
the versions that I was talking about, so

18
00:01:02.066 --> 00:01:05.040
you can have a different
versions of your lambda and

19
00:01:05.040 --> 00:01:07.668
then you can tag them
with different names and

20
00:01:07.668 --> 00:01:12.170
then they became qualified versions
of length which I can execute.

21
00:01:12.170 --> 00:01:15.442
This is very dent,
the only time I've ever use this,

22
00:01:15.442 --> 00:01:19.103
is when I assume lambda on
the edge was lambda on cold front.

23
00:01:19.103 --> 00:01:22.951
You specifically have to give them
versions, because it takes CloudFront,

24
00:01:22.951 --> 00:01:26.430
30 minutes to deploy Orlando to
every node across the world.

25
00:01:26.430 --> 00:01:28.910
So you have to do versions,
so it's kinda crazy,

26
00:01:28.910 --> 00:01:34.540
other than that I've almost never used
these and the actions are just actions.

27
00:01:34.540 --> 00:01:38.700
And that's about it as far
as the difference between,

28
00:01:38.700 --> 00:01:41.950
deploying it on Lambda,
and running it locally.

29
00:01:41.950 --> 00:01:45.490
Basically it's just a GUI around the same
thing you get inside your repo and

30
00:01:45.490 --> 00:01:47.170
some monitoring tools.

31
00:01:47.170 --> 00:01:52.327
And then I showed you logs, talked
about the execution role in the VPC.

32
00:01:52.327 --> 00:01:59.210
Everything else is pretty much the same,
any questions on Lambda on AWS?

33
00:02:02.918 --> 00:02:05.368
&gt;&gt; Scott Moss: Okay and
then one thing I showed earlier, but

34
00:02:05.368 --> 00:02:09.690
I was gonna show again, because I just
cannot emphasize how important this is,

35
00:02:09.690 --> 00:02:12.870
especially if you use Webpack
to bundle your functions.

36
00:02:12.870 --> 00:02:17.850
But if you go to you can find
the bucket name of your function.

37
00:02:17.850 --> 00:02:21.333
It's always gonna be your
service-your stage and

38
00:02:21.333 --> 00:02:25.870
then it's gonna be -service deployed
bucket with some key on it.

39
00:02:25.870 --> 00:02:27.920
So, that's the bucket for
the service you're looking for.

40
00:02:27.920 --> 00:02:32.860
Click on that, click on server list,
click on your stage, so

41
00:02:32.860 --> 00:02:34.890
if you have multiple stages
they'll be listed here.

42
00:02:34.890 --> 00:02:36.910
Click on that and

43
00:02:36.910 --> 00:02:40.740
then, for every deploy that you make,
there's gonna be one of these.

44
00:02:40.740 --> 00:02:44.072
So this means I deploy it this many times,
so pick on one of these for

45
00:02:44.072 --> 00:02:45.987
your latest deployment or whatever.

46
00:02:45.987 --> 00:02:50.461
And this is helpful because,
especially if you're using Webpack, and

47
00:02:50.461 --> 00:02:55.445
you don't have source maps, you'll get
an error, and you'll go look at the log

48
00:02:55.445 --> 00:03:00.780
in CloudFront or CloudTrail and you'll
be like I have no idea what that is.

49
00:03:00.780 --> 00:03:02.190
You wouldn't,
you just won't know what it is.

50
00:03:02.190 --> 00:03:06.010
Cuz there's no stack trace, it's all
a webpack, you won't know what's going on.

51
00:03:06.010 --> 00:03:09.380
So the best thing that I've been doing,
that actually I would come in here and

52
00:03:09.380 --> 00:03:13.900
just download the ZIP file and just see
what's going on in the compile code.

53
00:03:13.900 --> 00:03:16.814
And that's actually been helping me,
so this can be very helpful for that.

54
00:03:16.814 --> 00:03:18.607
It could also just be like, you know,

55
00:03:18.607 --> 00:03:21.930
just a sanity check to make sure that
you got the right lambda on there.

56
00:03:21.930 --> 00:03:26.560
So you can just verify, like yeah this did
get updated correctly, what's going on,

57
00:03:26.560 --> 00:03:28.150
because weird things do happen.

58
00:03:28.150 --> 00:03:30.460
So yeah, this is where it is,
so basically,

59
00:03:30.460 --> 00:03:34.140
when your lambda is invoked,
remember I talked about the cold boot,

60
00:03:34.140 --> 00:03:36.440
there's a cold boot around
the container starting up.

61
00:03:36.440 --> 00:03:38.290
There is a cold boot around
the lambda being created.

62
00:03:38.290 --> 00:03:42.000
That's because your lambda is just a file,
they have to go to S3 and unzip it.

63
00:03:42.000 --> 00:03:44.430
So the bigger your lambda,
the longer it's gonna take to unzip it.

64
00:03:44.430 --> 00:03:46.637
So you wanna keep your lambda small and
thin and

65
00:03:46.637 --> 00:03:48.738
then you wanna keep those containers warm.

66
00:03:48.738 --> 00:03:51.253
And therefore you dont
have any cold boots, so

67
00:03:51.253 --> 00:03:54.040
your lambdas are just zip
files upload S3 for you.

68
00:03:55.370 --> 00:03:58.510
And in fact when lambda first came
out you had to manually do this.

69
00:03:58.510 --> 00:04:02.230
You had to manually zip your lambdas and
put them here yourself and

70
00:04:02.230 --> 00:04:04.120
then they would get them and
that was as horrible experience.

71
00:04:07.150 --> 00:04:07.837
Yes,.

72
00:04:07.837 --> 00:04:10.544
&gt;&gt; Speaker 2: So if you do the reverse and

73
00:04:10.544 --> 00:04:16.210
destroy your function
from the function GUI.

74
00:04:16.210 --> 00:04:21.830
Will AWS go back through all of these
buckets and eliminate all of these files?

75
00:04:21.830 --> 00:04:23.610
Or do you have to go do clean up yourself?

76
00:04:23.610 --> 00:04:25.780
&gt;&gt; Scott Moss: They will not,
yeah, they don't care,

77
00:04:25.780 --> 00:04:28.090
if you do it through CloudFormation,
it will.

78
00:04:28.090 --> 00:04:31.180
If you just do it through the GUI,
they will not,

79
00:04:31.180 --> 00:04:33.190
you will just be in a weird state.

80
00:04:33.190 --> 00:04:36.880
What will happen is if you did that,
you deleted some stuff out of here and

81
00:04:36.880 --> 00:04:40.130
then you try to redeploy the servlet
server, so it will just scrap out,

82
00:04:40.130 --> 00:04:43.770
couldn't do it because you told it to
redeploy, you didn't tell it to create.

83
00:04:43.770 --> 00:04:46.383
So they'll go try to redeploy to
a bucket that no longer exists and

84
00:04:46.383 --> 00:04:48.010
then it'll just break.

85
00:04:48.010 --> 00:04:51.910
So then you would have to actually just
delete everything and do a new deploy.

86
00:04:51.910 --> 00:04:55.070
So it's very straight and
very robust on what it's doing.

87
00:04:55.070 --> 00:04:56.980
So yeah, unfortunately you couldn't and

88
00:04:56.980 --> 00:05:01.800
we ran into that tons of times which
is why I said don't mix and match.

89
00:05:01.800 --> 00:05:05.260
That's the biggest mistake I made when
I was using Lambda, the first time.

90
00:05:05.260 --> 00:05:09.944
&gt;&gt; Speaker 2: Is that your path then when
you guys are tearing down functions?

91
00:05:09.944 --> 00:05:11.660
Do you go back and do all that or?

92
00:05:11.660 --> 00:05:12.950
&gt;&gt; Scott Moss: No,
when we were tearing down functions,

93
00:05:12.950 --> 00:05:16.290
we just used sls remove which
removes the whole stack.

94
00:05:16.290 --> 00:05:19.730
Goes to cloud formation, tells cloud
formation to remove everything.

95
00:05:19.730 --> 00:05:22.510
And then cloud formation's like, cool,
I'm just gonna take down everything,

96
00:05:22.510 --> 00:05:25.410
all the IM roles, the functions,
every single thing.

97
00:05:25.410 --> 00:05:28.490
It's gonna remove everything for you,
sometimes it takes a long time, sometimes

98
00:05:28.490 --> 00:05:31.630
it hangs and it'll be done and you won't
even know, it's like an hour later.

99
00:05:31.630 --> 00:05:35.150
This is why I said it's nice to be able
to come to AWS and look at the cloud

100
00:05:35.150 --> 00:05:38.340
formation tab and watch it happening so
you can see when it's done.

101
00:05:38.340 --> 00:05:40.700
It's more helpful that way, but,
yeah that's what I would do.

102
00:05:40.700 --> 00:05:44.108
I just wouldn't mess with anything
in here if I was doing serverless,

103
00:05:44.108 --> 00:05:45.337
it's too conflicting.

104
00:05:48.460 --> 00:05:51.140
&gt;&gt; Scott Moss: Any questions
on any of this stuff?

105
00:05:52.420 --> 00:05:54.490
&gt;&gt; Speaker 3: Cloud formation logs,
you said?

106
00:05:54.490 --> 00:05:56.610
&gt;&gt; Scott Moss: Cloud form-
&gt;&gt; Speaker 3: Get to that real quick?

107
00:05:56.610 --> 00:05:57.500
&gt;&gt; Scott Moss: Where?

108
00:05:57.500 --> 00:05:58.339
&gt;&gt; Speaker 3: You said that,

109
00:05:58.339 --> 00:06:00.240
In order to watch the progress
&gt;&gt; Scott Moss: Yeah,

110
00:06:00.240 --> 00:06:02.270
watch the progress of course.

111
00:06:02.270 --> 00:06:07.721
That's confirmation, so if you go here and
you click on the service name you'll see,

112
00:06:07.721 --> 00:06:10.796
when you scroll down
you'll see all this stuff.

113
00:06:10.796 --> 00:06:14.316
This is the history of what's been
happening in a confirmation for you and

114
00:06:14.316 --> 00:06:16.260
it's all time stamped and everything.

115
00:06:16.260 --> 00:06:19.415
It's literally every single event and
what called the event and

116
00:06:19.415 --> 00:06:21.061
what was the status of the event?

117
00:06:21.061 --> 00:06:26.170
Is pretty verbose, so yeah,
you can also get most of this, too.

118
00:06:26.170 --> 00:06:30.030
If, when you deploy, or
you run any command with serverless,

119
00:06:30.030 --> 00:06:34.790
if you type -v for verbose, it'll print
that cloud formation stack out for you,

120
00:06:34.790 --> 00:06:35.990
too, while it's happening.

121
00:06:35.990 --> 00:06:38.280
That way, you don't have to go
through the dashboard and look at it.

122
00:06:38.280 --> 00:06:40.737
So that's if you want
all that stuff in here.

