WEBVTT

1
00:00:00.070 --> 00:00:04.130
&gt;&gt; Scott Moss: All right, so did everyone
gets a chance to create a local lambda and

2
00:00:04.130 --> 00:00:05.140
invoke it locally?

3
00:00:06.450 --> 00:00:07.650
Did anyone do anything extra?

4
00:00:09.970 --> 00:00:10.947
Nice, what did you do?

5
00:00:10.947 --> 00:00:13.100
&gt;&gt; Speaker 2: I deployed [CROSSTALK]
&gt;&gt; Scott Moss: Snap.

6
00:00:13.100 --> 00:00:13.690
There you go.

7
00:00:13.690 --> 00:00:15.130
Okay, what about anybody else?

8
00:00:15.130 --> 00:00:17.270
Anybody else deploy?

9
00:00:17.270 --> 00:00:18.600
You deployed too, nice.

10
00:00:18.600 --> 00:00:22.420
Anybody tried to create multiple
lambdas to do different things,

11
00:00:22.420 --> 00:00:24.200
different events maybe?

12
00:00:24.200 --> 00:00:26.140
Maybe looked ahead, looked at some docs.

13
00:00:26.140 --> 00:00:28.459
Checked out a different solution brand,
something like that?

14
00:00:28.459 --> 00:00:30.410
No?
All right, cool.

15
00:00:30.410 --> 00:00:35.356
So let's just hop right in, and
I'll just create some lambdas here.

16
00:00:35.356 --> 00:00:38.750
So basically he first thing you would
have done is you would have come

17
00:00:38.750 --> 00:00:41.890
into functions, or I'm sorry,
the serverless yaml file.

18
00:00:41.890 --> 00:00:43.140
Made a functions property here.

19
00:00:43.140 --> 00:00:45.020
And then you would've given
your function a name.

20
00:00:45.020 --> 00:00:46.390
I'm just gonna call it helloworld.

21
00:00:47.580 --> 00:00:50.880
And then basically you would do,
is you would give it a handler.

22
00:00:50.880 --> 00:00:59.620
And that handler is, the handler's
gonna be the path to the file, right?

23
00:00:59.620 --> 00:01:02.160
So this file is in source.

24
00:01:02.160 --> 00:01:06.020
So you can't just type
in the name of file,

25
00:01:06.020 --> 00:01:11.393
you gotta give the full path,
so in this case src/hander.

26
00:01:11.393 --> 00:01:12.959
And then, I'm sorry, not handler but

27
00:01:12.959 --> 00:01:17.209
helloworld is the name of the file,
&gt;&gt; Scott Moss: And

28
00:01:17.209 --> 00:01:22.214
then this is the handler, so .handler.

29
00:01:22.214 --> 00:01:27.045
And then now you can come in here and

30
00:01:27.045 --> 00:01:33.218
we can just say done(null, 'hello').

31
00:01:33.218 --> 00:01:34.910
And once we've got that,
we can just run it.

32
00:01:34.910 --> 00:01:37.341
So we can say sls invoke.

33
00:01:39.309 --> 00:01:43.140
&gt;&gt; Scott Moss: Local -f and
then the name of the file.

34
00:01:43.140 --> 00:01:44.530
I'm sorry, the name of the function,

35
00:01:44.530 --> 00:01:48.513
which is whatever name you gave it here,
so helloworld.

36
00:01:48.513 --> 00:01:56.213
So invoke,
&gt;&gt; Scott Moss: Local -f and

37
00:01:56.213 --> 00:01:58.738
then helloworld.

38
00:02:03.020 --> 00:02:05.631
&gt;&gt; Scott Moss: There we go, so
then you'll get that message.

39
00:02:05.631 --> 00:02:08.000
Anybody try to put an error in here and
see what happens if you do that?

40
00:02:09.090 --> 00:02:11.631
No, nobody tried that, what?

41
00:02:11.631 --> 00:02:12.705
That's fine.

42
00:02:12.705 --> 00:02:15.101
All right, so I'll put an error here.

43
00:02:20.350 --> 00:02:21.385
&gt;&gt; Scott Moss: Let's see what happens.

44
00:02:24.758 --> 00:02:26.590
&gt;&gt; Scott Moss: Boom,
it sends you back an error.

45
00:02:27.900 --> 00:02:29.660
Now, this is just what happens locally.

46
00:02:31.120 --> 00:02:32.680
Depending on how you execute it and

47
00:02:32.680 --> 00:02:36.860
what you're functions doing on AWS,
it won't look like this.

48
00:02:36.860 --> 00:02:41.140
In fact, debugging lambda functions
is the most difficult thing

49
00:02:41.140 --> 00:02:41.920
when they're deployed.

50
00:02:41.920 --> 00:02:45.070
At least in my experience,
it can be difficult.

51
00:02:45.070 --> 00:02:48.230
And we'll talk about different things
you'll have to do once you deploy to make

52
00:02:48.230 --> 00:02:49.630
that a little easier.

53
00:02:49.630 --> 00:02:51.910
But it's still pretty hard.

54
00:02:51.910 --> 00:02:56.760
I mean, there's not much you can do,
unless you want to write another lambda

55
00:02:56.760 --> 00:03:02.050
that goes into the container of another
lambda, looks at it while it's running.

56
00:03:02.050 --> 00:03:04.260
There's so many things you can do,
but it's very difficult.

57
00:03:05.650 --> 00:03:08.730
Okay, cool.
Any questions on helloworld?

58
00:03:08.730 --> 00:03:10.490
Getting a lambda out there?

59
00:03:10.490 --> 00:03:13.760
I know there was some questions
earlier about event, context.

60
00:03:14.820 --> 00:03:17.500
Any specific ones I didn't answer
about how that event works?

61
00:03:17.500 --> 00:03:19.690
Maybe I wasn't clear, or
there was something there.

62
00:03:19.690 --> 00:03:22.259
Does everyone understand
how this event works?

63
00:03:23.500 --> 00:03:25.760
As far as up to the point
would have described.

64
00:03:25.760 --> 00:03:29.200
You might not understand AWS,
but as far as how to describe.

65
00:03:29.200 --> 00:03:34.330
So just a walkthrough again,
we can pass an event

66
00:03:34.330 --> 00:03:39.240
from a file using the -p flag and
it will pass the event to it.

67
00:03:39.240 --> 00:03:43.988
I'm not doing anything with it right now,
so it's airing out, but

68
00:03:43.988 --> 00:03:48.005
if I were to just pass that event,
just echo, like this.

69
00:03:50.530 --> 00:03:52.769
&gt;&gt; Scott Moss: That's
the event that's in the file.

70
00:03:52.769 --> 00:03:55.898
So the file is the payload
which is also the event,

71
00:03:55.898 --> 00:03:59.400
and that's just because I'm
invoking it locally, but

72
00:03:59.400 --> 00:04:03.364
this same lambda function might
also be used in another event.

73
00:04:03.364 --> 00:04:06.903
And therefore it would have a different
context, different everything, so

74
00:04:06.903 --> 00:04:09.788
it might not look the same, but
I'm just evoking it locally and

75
00:04:09.788 --> 00:04:12.200
I'm forcing the event to
be whatever I wanted to be.

76
00:04:12.200 --> 00:04:14.120
So therefore it is that way.

77
00:04:14.120 --> 00:04:17.580
But in production,
it probably won't be this way.

78
00:04:17.580 --> 00:04:22.460
So sls invoke local is
a really great tool to use.

79
00:04:22.460 --> 00:04:27.286
I use it for
just seeing if my lambda is running.

80
00:04:27.286 --> 00:04:30.750
But in actuality,
unless you are writing a raw lambda,

81
00:04:30.750 --> 00:04:34.120
like it's just completely raw,
you always give it an input.

82
00:04:35.310 --> 00:04:38.295
Most of time running sls
invoke local doesn't work.

83
00:04:39.980 --> 00:04:40.730
And you'll see why.

84
00:04:40.730 --> 00:04:44.930
And it's mostly because these lambda'
are kind of responding to different events

85
00:04:44.930 --> 00:04:46.710
that are real events.

86
00:04:46.710 --> 00:04:49.130
So the only way to get them to
work locally, to test them out,

87
00:04:49.130 --> 00:04:52.340
is if you basically go to AWS,
get a copy of the event,

88
00:04:52.340 --> 00:04:56.296
paste it into your file and then you test
it with that, which is pretty reliable.

89
00:04:56.296 --> 00:04:59.640
But then sometimes what you
would do in that lambda

90
00:04:59.640 --> 00:05:04.720
relies on services on AWS that you
don't wanna be doing inside of a CI.

91
00:05:04.720 --> 00:05:08.430
Or you don't wanna be doing on your
machine, so it's really hard to test.

92
00:05:08.430 --> 00:05:11.720
Sls invoke local is cool just to
make sure nothing's breaking, but

93
00:05:11.720 --> 00:05:15.460
it's not like a production dry run.

94
00:05:15.460 --> 00:05:20.610
I wouldn't do it this way, I would run
it on AWS there to see if it's good.

95
00:05:20.610 --> 00:05:22.030
Does that make sense?

