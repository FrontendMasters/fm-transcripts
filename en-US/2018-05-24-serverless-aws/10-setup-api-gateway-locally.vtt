WEBVTT

1
00:00:00.210 --> 00:00:02.410
&gt;&gt; Scott Moss: All right,
so, let's hop into this.

2
00:00:02.410 --> 00:00:04.644
Let's check out to the next branch here.

3
00:00:08.959 --> 00:00:13.461
&gt;&gt; Scott Moss: lesson-2, and
lesson-2 has got a lot more stuff in it.

4
00:00:18.216 --> 00:00:21.210
&gt;&gt; Scott Moss: So I'm just gonna
walk through some of this stuff.

5
00:00:21.210 --> 00:00:26.784
One, in the serversless yml file,
we got two handlers here.

6
00:00:26.784 --> 00:00:29.440
You all know what these are.

7
00:00:29.440 --> 00:00:30.680
You know what functions are.

8
00:00:30.680 --> 00:00:31.450
You what handlers are.

9
00:00:31.450 --> 00:00:32.440
So this shouldn't be new.

10
00:00:32.440 --> 00:00:33.450
I just have two new functions.

11
00:00:33.450 --> 00:00:40.050
And then there's this API folder
would like todo.js and todos.js.

12
00:00:40.050 --> 00:00:41.300
So that's what you get here.

13
00:00:41.300 --> 00:00:46.310
Now, what we're gonna do is we're
gonna make a new function, and

14
00:00:46.310 --> 00:00:49.430
instead of just running this
function locally with invoke,

15
00:00:49.430 --> 00:00:51.920
we're gonna hook this
function up to an HTTP event.

16
00:00:51.920 --> 00:00:56.180
And then we're gonna use this plugin
called serverless-offline to actually

17
00:00:56.180 --> 00:00:58.950
start a server offline for us.

18
00:00:58.950 --> 00:01:04.120
That executes our function serverless,
all right, let me explain that.

19
00:01:04.120 --> 00:01:09.390
So API gateway is the thing that's sitting
in between your client and your lambda.

20
00:01:09.390 --> 00:01:13.600
So therefore, it's a long live process,
it's a server, API gateway is a server.

21
00:01:13.600 --> 00:01:17.830
We're gonna emulate that server on our
machine, API gateway, but our functions

22
00:01:17.830 --> 00:01:20.890
are still serverless and they're gonna
be executed in a different context.

23
00:01:20.890 --> 00:01:25.246
So API gateway, locally on our machine,
is gonna execute our lambdas for us,

24
00:01:25.246 --> 00:01:26.701
just like it would on AWS.

25
00:01:26.701 --> 00:01:29.120
And that's what we're gonna do locally.

26
00:01:29.120 --> 00:01:31.300
That is different than what we just did,

27
00:01:31.300 --> 00:01:35.070
which is where we just invoked the lambda
without an API gateway in between it.

28
00:01:35.070 --> 00:01:37.210
And we passed in our own event.

29
00:01:37.210 --> 00:01:39.940
We're now gonna go through
a local API gateway,

30
00:01:39.940 --> 00:01:43.560
which formats the event the exact
same way that I just showed you.

31
00:01:43.560 --> 00:01:45.710
It's gonna do that formation for us.

32
00:01:45.710 --> 00:01:47.370
Everybody following me there?

33
00:01:47.370 --> 00:01:49.480
Okay, so let's make a new function.

34
00:01:49.480 --> 00:01:50.470
I'm gonna make a new function here.

35
00:01:50.470 --> 00:01:53.800
And I'm just gonna call this one api.js.

36
00:01:56.759 --> 00:01:58.797
&gt;&gt; Scott Moss: And I'll call it handler.

37
00:02:02.223 --> 00:02:06.790
&gt;&gt; Scott Moss: And it's gonna take
an event, some context, and then done.

38
00:02:06.790 --> 00:02:09.030
And this context object's actually
going to have some stuff announced.

39
00:02:09.030 --> 00:02:11.340
So we'll look at it too when we get there.

40
00:02:11.340 --> 00:02:17.660
And remember I said, done takes null,
and then whatever response you want,

41
00:02:17.660 --> 00:02:22.300
well, now because we're using the API
gateway, and we're using the proxy method.

42
00:02:24.020 --> 00:02:26.670
API gateway calls Arelanda and
then we would respond.

43
00:02:26.670 --> 00:02:31.060
That goes back through API gateway, then
API gateway responds back to our client.

44
00:02:31.060 --> 00:02:36.440
So API gateway is the final
piece before our client sees it.

45
00:02:36.440 --> 00:02:40.200
So in order for API gateway to respond
back to our client in a predictable way,

46
00:02:40.200 --> 00:02:42.680
we have to respond back to API
gateway in a predictable way.

47
00:02:42.680 --> 00:02:45.620
So they give us a format in which
we have to respond to them.

48
00:02:45.620 --> 00:02:48.180
So we can no longer just put
whatever the hell we want here.

49
00:02:48.180 --> 00:02:51.760
In fact, the syntax now is
gonna be something like this.

50
00:02:51.760 --> 00:02:53.760
You put a status code.

51
00:02:53.760 --> 00:02:56.330
And you can put whatever
status code you want here.

52
00:02:56.330 --> 00:03:00.800
So like if this lambda resolved to a 200,
then I would put 200 here.

53
00:03:00.800 --> 00:03:02.300
Or if it was a 401,
then I'd put a 401 here.

54
00:03:02.300 --> 00:03:04.600
Whatever the status code needs to be.

55
00:03:04.600 --> 00:03:07.750
The next thing is optional is headers.

56
00:03:07.750 --> 00:03:10.310
So you put a object of key values here for
headers.

57
00:03:10.310 --> 00:03:14.210
This is gonna tell API gateway
what headers I wanna send down for

58
00:03:14.210 --> 00:03:15.380
this request.

59
00:03:15.380 --> 00:03:20.230
This only works with the API proxy
method that's on by default.

60
00:03:20.230 --> 00:03:23.610
If you opt out of the proxy method,
you don't get to set the headers.

61
00:03:23.610 --> 00:03:26.230
You have to go into AWS API gateway and
set them there.

62
00:03:26.230 --> 00:03:26.980
Which is not fun.

63
00:03:26.980 --> 00:03:28.870
You also don't get to set the status code.

64
00:03:28.870 --> 00:03:31.060
You got to do it in AWS API gateway.

65
00:03:31.060 --> 00:03:32.170
Don't recommend doing that.

66
00:03:32.170 --> 00:03:34.400
You probably want control here.

67
00:03:34.400 --> 00:03:35.314
And then the last part,

68
00:03:35.314 --> 00:03:38.660
which is probably one of the most
important parts is the body.

69
00:03:38.660 --> 00:03:40.670
The body is whatever payload
you want to send back.

70
00:03:40.670 --> 00:03:43.010
The only important thing to remember
here is this must be stringified.

71
00:03:44.430 --> 00:03:46.140
Lambda's are very low level.

72
00:03:46.140 --> 00:03:49.570
So they're not going to do things
like stringify json for you, so

73
00:03:49.570 --> 00:03:51.280
you have to do it yourself.

74
00:03:51.280 --> 00:03:53.130
So whatever you send back
here has to be stringified.

75
00:03:53.130 --> 00:03:58.920
So I'm just gonna send back
a message that says hello.

76
00:04:01.020 --> 00:04:01.810
Cool, and then this,

77
00:04:01.810 --> 00:04:06.840
now our lambda is set up to properly
respond to an HTTP based event.

78
00:04:06.840 --> 00:04:09.440
The next thing we need to do
is actually setup that event.

79
00:04:09.440 --> 00:04:11.984
So what we'll do is we'll go over
to the serverless yml file and

80
00:04:11.984 --> 00:04:13.380
I'll open this up in another tab.

81
00:04:17.299 --> 00:04:21.580
&gt;&gt; Scott Moss: And first things first,
just let's make another function here.

82
00:04:21.580 --> 00:04:22.800
And we'll call this one, api.

83
00:04:22.800 --> 00:04:25.425
And we'll say the handler.

84
00:04:25.425 --> 00:04:31.124
This to src/api/api.handler.

85
00:04:31.124 --> 00:04:33.950
By the way, you don't have to export.

86
00:04:33.950 --> 00:04:35.850
I notice all my exports
are called handler, but

87
00:04:35.850 --> 00:04:37.010
you don't have to export it as handler.

88
00:04:37.010 --> 00:04:38.490
You can export it wherever
the hell you want to.

89
00:04:38.490 --> 00:04:39.400
It doesn't matter.

90
00:04:39.400 --> 00:04:41.780
As long as you give it
the same name over here.

91
00:04:41.780 --> 00:04:45.150
Cuz it's that I've just been using
handler in this example because I

92
00:04:45.150 --> 00:04:48.490
would always run into problems where
I would just have the wrong name.

93
00:04:48.490 --> 00:04:51.470
And this is always handler, so
I'll just use handler for everything.

94
00:04:51.470 --> 00:04:54.110
And then if you get into using
the web pack with lambda,

95
00:04:54.110 --> 00:04:56.240
which you can, it gets really complicated.

96
00:04:56.240 --> 00:04:59.380
So just for consistency,
pick a name and always use that name.

97
00:04:59.380 --> 00:05:01.620
Otherwise, you will get lost.

98
00:05:01.620 --> 00:05:03.650
Although it looks cool
to have all these names,

99
00:05:03.650 --> 00:05:06.670
just don't [LAUGH], you will mess up.

100
00:05:08.050 --> 00:05:08.640
All right, cool.

101
00:05:08.640 --> 00:05:15.552
So now that we have that, the next thing
you wanna do is you can add an events,

102
00:05:15.552 --> 00:05:19.886
yeah, I think it's plural,
here to your API.

103
00:05:19.886 --> 00:05:25.945
And this allows you to pick the type of
events that your lambda can subscribe to.

104
00:05:25.945 --> 00:05:28.849
So the events that we wanna
subscribe to is gonna be http.

105
00:05:34.283 --> 00:05:40.116
&gt;&gt; Scott Moss: So with http, what we
can to do is we can use a shorthand

106
00:05:40.116 --> 00:05:45.832
method that says we want to
do a GET request to /api.

107
00:05:45.832 --> 00:05:50.252
So what this is saying is that I
have a function called api whose

108
00:05:50.252 --> 00:05:52.600
handler is that source.

109
00:05:52.600 --> 00:05:56.790
And it's going to subscribe to an event,
the http event.

110
00:05:56.790 --> 00:05:59.816
And for that event, it's going to be
able to do a GET request to /api.

111
00:06:02.633 --> 00:06:07.006
&gt;&gt; Scott Moss: So now, when someone
does a request to wherever my lambda or

112
00:06:07.006 --> 00:06:10.417
wherever my AWS API gateway's hosted/api,

113
00:06:10.417 --> 00:06:14.360
it's gonna execute this handler for
this function.

114
00:06:14.360 --> 00:06:20.330
And it's going to pass the event that AWS
gateway formatted as the first argument.

115
00:06:20.330 --> 00:06:24.910
And then it's gonna wait for
a response or an error to be called.

116
00:06:24.910 --> 00:06:26.132
And then it's gonna respond
back to the client.

117
00:06:29.285 --> 00:06:31.050
&gt;&gt; Scott Moss: Does that make sense?

118
00:06:31.050 --> 00:06:32.050
So let's run this.

119
00:06:33.100 --> 00:06:36.320
Now you might think that we
can just invoke this locally.

120
00:06:36.320 --> 00:06:36.820
Why can't we do that?

121
00:06:40.070 --> 00:06:42.291
&gt;&gt; Speaker 2: [INAUDIBLE] get request?

122
00:06:43.600 --> 00:06:44.640
&gt;&gt; Scott Moss: All right, say that again?

123
00:06:44.640 --> 00:06:45.970
&gt;&gt; Speaker 2: You wanted
to send in a GET request?

124
00:06:45.970 --> 00:06:48.310
&gt;&gt; Scott Moss: Right, I didn't send in
a GET request.u I just called the lambda.

125
00:06:49.550 --> 00:06:56.058
If I just called the lambda locally
like this, invoke local -f api.

126
00:06:58.727 --> 00:07:01.660
&gt;&gt; Scott Moss: It will
just print this out.

127
00:07:01.660 --> 00:07:04.710
But I'm not actually testing
that it's working with an API.

128
00:07:04.710 --> 00:07:09.700
So the next step would be, I'll just
go copy the event object from AWS and

129
00:07:09.700 --> 00:07:10.670
then send that in.

130
00:07:10.670 --> 00:07:13.220
It's like, okay,
that's more of a realistic test, for sure.

131
00:07:13.220 --> 00:07:17.150
But you really wanna test the whole flow,
so you wanna run it through API gateway.

132
00:07:17.150 --> 00:07:19.800
And that's where serverless
offline comes in.

133
00:07:19.800 --> 00:07:23.150
So you can just run sls

134
00:07:23.150 --> 00:07:27.080
offline start which actually I think
is already in the package.json.

135
00:07:27.080 --> 00:07:28.380
Let me see if I put it in there.

136
00:07:30.570 --> 00:07:34.220
Yeah, you can just run epm run dev or
if you're using yarn.

137
00:07:34.220 --> 00:07:41.090
You can do yarn dev and that's gonna
run service offline on port 4500.

138
00:07:41.090 --> 00:07:41.780
So you just run that.

139
00:07:43.940 --> 00:07:46.540
And you can see,
it'll tell you right here couple things.

140
00:07:46.540 --> 00:07:51.150
One, it says, you got some routes for
this function called api.

141
00:07:51.150 --> 00:07:53.060
And it's for a GET request, so /api.

142
00:07:53.060 --> 00:07:55.520
And then it's like, routes for
this other function?

143
00:07:55.520 --> 00:07:56.810
None, you didn't tell me about them.

144
00:07:56.810 --> 00:07:57.830
Routes for this other function?

145
00:07:57.830 --> 00:07:58.830
Nope, didn't tell me about it.

146
00:08:00.380 --> 00:08:01.690
Right, so now we've got some routes.

147
00:08:01.690 --> 00:08:05.930
So all I gotta do now is go to this URL,
/api,

148
00:08:05.930 --> 00:08:08.700
and this should execute my lambda,
so let's check it out.

149
00:08:11.930 --> 00:08:14.800
Okay, this one says 404 not found.

150
00:08:14.800 --> 00:08:16.799
Anybody knows why it's a 404?

151
00:08:17.840 --> 00:08:18.960
&gt;&gt; Speaker 2: Set it to API?

152
00:08:18.960 --> 00:08:19.510
&gt;&gt; Scott Moss: That's right.

153
00:08:19.510 --> 00:08:20.970
I didn't make a route for root.

154
00:08:20.970 --> 00:08:21.940
So it didn't create,

155
00:08:21.940 --> 00:08:25.010
it's literally only gonna route to
whatever I told it to route to.

156
00:08:25.010 --> 00:08:28.320
And so it's not like it's setting
up some magic, some defaulting.

157
00:08:28.320 --> 00:08:30.940
It was very explicit,
it's only gonna go to what I setup.

158
00:08:30.940 --> 00:08:34.050
So now if go to /api you
could see I got my message.

159
00:08:34.050 --> 00:08:36.350
All right, so my lambda actually executed.

160
00:08:37.740 --> 00:08:40.720
So that's how easy it is to
set up an API with lambda.

161
00:08:40.720 --> 00:08:45.510
And there's definitely some
more things we can do in here.

162
00:08:45.510 --> 00:08:49.410
This right here is the shorthand method,
this is basically me saying,

163
00:08:49.410 --> 00:08:51.760
I wanna set up a GET request to /api.

164
00:08:51.760 --> 00:08:56.552
But if you wanna do more advanced things,
&gt;&gt; Scott Moss: You wanna set

165
00:08:56.552 --> 00:08:57.760
up a different path.

166
00:09:00.480 --> 00:09:05.500
You can say, I want /api,
but then I also only

167
00:09:05.500 --> 00:09:10.910
want it to be a GET request, or maybe I
also want it to be only a post request.

168
00:09:10.910 --> 00:09:11.510
So you can do that.

169
00:09:11.510 --> 00:09:12.370
I wanna say GET.

170
00:09:12.370 --> 00:09:14.940
And this is also where you'd
do something like cores true,

171
00:09:14.940 --> 00:09:17.540
to ensure that this core is enabled,
and things like that.

172
00:09:17.540 --> 00:09:22.500
So there's a plethora of options you
can pass through this HTTP, that

173
00:09:22.500 --> 00:09:25.980
we will not get into today, because that's
literally a whole other course on its own.

174
00:09:25.980 --> 00:09:26.980
Just look at the docs.

175
00:09:26.980 --> 00:09:29.360
But that's mostly how you would set up.

176
00:09:29.360 --> 00:09:32.050
So you would give it a route,
give it a method, and

177
00:09:32.050 --> 00:09:35.890
then some configurable options depending
on your needs of your application.

178
00:09:38.010 --> 00:09:39.010
Any questions on this?

179
00:09:40.270 --> 00:09:43.610
&gt;&gt; Speaker 2: Yeah, that response
looks like it also returned all of

180
00:09:43.610 --> 00:09:44.690
the existing routes.

181
00:09:46.210 --> 00:09:48.730
&gt;&gt; Scott Moss: Which response,
in the browser?

182
00:09:48.730 --> 00:09:50.323
This one?
&gt;&gt; Speaker 2: Your 404 response, actually.

183
00:09:50.323 --> 00:09:50.832
&gt;&gt; Scott Moss: Did it?

184
00:09:50.832 --> 00:09:51.332
Let's see.

185
00:09:55.833 --> 00:09:59.710
&gt;&gt; Scott Moss: Yeah, so it's like, cool,
this will not happen in production.

186
00:09:59.710 --> 00:10:00.350
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: Okay yeah,

187
00:10:00.350 --> 00:10:01.380
I see what you're saying, yeah.

188
00:10:01.380 --> 00:10:03.336
This is just offline cuz it's
a development tour, right?

189
00:10:03.336 --> 00:10:05.280
They know you're running this offline.

190
00:10:05.280 --> 00:10:09.680
So basically, service offline
is somebody went, and I'm so

191
00:10:09.680 --> 00:10:13.020
glad they did this cuz I would never
do it, they went and looked at, they

192
00:10:13.020 --> 00:10:18.780
basically just broke apart AWS API gateway
to see exactly how everything works.

193
00:10:18.780 --> 00:10:20.490
And they just tried to emulate it locally.

194
00:10:20.490 --> 00:10:23.801
And I looked at the code.
It's ridiculous, I don't know how or

195
00:10:23.801 --> 00:10:26.890
why somebody thought this is gonna be fun.

196
00:10:26.890 --> 00:10:28.670
But I'm glad they did it.

197
00:10:28.670 --> 00:10:31.410
Then they added enhancements like this,
telling you,

198
00:10:31.410 --> 00:10:33.360
you probably meant this route.

199
00:10:33.360 --> 00:10:35.200
But in production,
you will never see that.

200
00:10:35.200 --> 00:10:36.990
AWS will never put that there.

201
00:10:36.990 --> 00:10:39.130
But they offer things like that.

202
00:10:39.130 --> 00:10:42.340
They also offer you to be like
turn off authentication and

203
00:10:42.340 --> 00:10:45.370
simple development tools like that for
local development.

204
00:10:45.370 --> 00:10:47.270
But yeah, you would never see this like.

205
00:10:47.270 --> 00:10:49.910
In fact, the error you would get
in production is you just get

206
00:10:49.910 --> 00:10:51.070
a CloudFront error.

207
00:10:51.070 --> 00:10:54.746
Because, right, AWS API gateway actually
goes to CloudFront the CDN which then

208
00:10:54.746 --> 00:10:57.664
hits the gateway, but
the gateway is like, I don't have it, so

209
00:10:57.664 --> 00:10:59.360
then CloudFront errors out.

210
00:10:59.360 --> 00:11:01.880
So we didn't even go anywhere,
it won't even touch our code.

211
00:11:01.880 --> 00:11:03.330
It would just freak out
way before it gets there.

