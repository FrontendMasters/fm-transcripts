WEBVTT

1
00:00:00.180 --> 00:00:01.930
&gt;&gt; Scott Moss: I had a few
questions on the chat if anybody

2
00:00:01.930 --> 00:00:03.136
are interested in hearing.

3
00:00:03.136 --> 00:00:07.479
One of them were, it's considered
a best practice to trigger lambdas

4
00:00:07.479 --> 00:00:10.951
at regular intervals to keep
them out of the cold state.

5
00:00:10.951 --> 00:00:14.612
I wouldn't say it's a best practice, but
it is a practice, I do it, so yeah, and

6
00:00:14.612 --> 00:00:16.486
there's a couple of ways you can do that.

7
00:00:16.486 --> 00:00:21.676
You can have one lambda calling
another lambda all the time or

8
00:00:21.676 --> 00:00:24.950
you can use Cloud, is it CloudWatch?

9
00:00:24.950 --> 00:00:27.595
CloudWatch events,
you can register intervals,

10
00:00:27.595 --> 00:00:31.235
that's actually a type of event
that you can register to, actually.

11
00:00:31.235 --> 00:00:38.131
If you click on Events here.
&gt;&gt; Speaker 2: Yeah, but you

12
00:00:38.131 --> 00:00:41.976
mentioned if you don't know how much time.
&gt;&gt; Scott Moss: Yeah, you're still playing

13
00:00:41.976 --> 00:00:47.214
a guessing game but at least you might get
it, but even then, they still recycle.

14
00:00:47.214 --> 00:00:49.405
Even if you keep them warm, they've still
got to get rid of them because that's how

15
00:00:49.405 --> 00:00:50.203
they save the money, right?

16
00:00:50.203 --> 00:00:53.333
That's how they are able to give
you that per usage billing.

17
00:00:53.333 --> 00:00:56.484
Which by the way, the minimum they'll
charge you for is 100 milliseconds.

18
00:00:56.484 --> 00:00:59.198
Doesn't matter how fast your lambda is,
you'll always get charged for

19
00:00:59.198 --> 00:01:01.550
100 milliseconds, so
there are some things there.

20
00:01:01.550 --> 00:01:04.629
But yeah, you can use Events for
that, we use it all the time, or

21
00:01:04.629 --> 00:01:06.642
when we redeploy with one of our lambdas.

22
00:01:06.642 --> 00:01:11.012
And then there's another lambda that's
calling all the other lambdas, so

23
00:01:11.012 --> 00:01:12.182
it's kinda crazy.

24
00:01:12.182 --> 00:01:16.800
Is every function you define an
independent lambda when you deploy to AWS?

25
00:01:16.800 --> 00:01:19.800
Yes, every function you define is
definitely an independent lambda,

26
00:01:19.800 --> 00:01:20.757
when deployed to AWS.

27
00:01:20.757 --> 00:01:23.684
They have nothing to do with each other,
other than the fact that they were in

28
00:01:23.684 --> 00:01:25.970
the same repo that you
created on your machine.

29
00:01:25.970 --> 00:01:30.388
But once they get on AWS, they don't know
about each other, they don't do anything.

30
00:01:30.388 --> 00:01:35.340
They have nothing in common, other than
they were in the same repo, that's it.

31
00:01:35.340 --> 00:01:38.012
Even if you share
dependencies between the two,

32
00:01:38.012 --> 00:01:42.196
depending on how you package when we
get to deployment, how you package it.

33
00:01:42.196 --> 00:01:43.680
They still wouldn't have
anything in common.

34
00:01:43.680 --> 00:01:47.455
They would create their own versions of
those dependencies because at the end of

35
00:01:47.455 --> 00:01:49.497
the day, and this is getting really deep.

36
00:01:49.497 --> 00:01:54.198
But if you go look at Amazon and
you go to s3,

37
00:01:54.198 --> 00:02:00.315
how does Amazon know what your lambda is,
where is it at?

38
00:02:00.315 --> 00:02:03.625
But it's actually saving
it in a s3 bucket,

39
00:02:03.625 --> 00:02:08.491
in a zip file.
&gt;&gt; Scott Moss: Here, so

40
00:02:08.491 --> 00:02:11.891
every time you deploy a lambda,
it's saving as a zip file.

41
00:02:11.891 --> 00:02:16.140
So if you have lambda functions
that are sharing dependencies.

42
00:02:16.140 --> 00:02:19.097
Like node modules in the same repo
where there's several lambda functions.

43
00:02:19.097 --> 00:02:21.769
When you deploy it,
depending on how you deploy it,

44
00:02:21.769 --> 00:02:26.120
a copy of all those dependencies will get
zipped in the appropriate functions file.

45
00:02:26.120 --> 00:02:29.282
So, yeah, they really don't
depend on each other at all,

46
00:02:29.282 --> 00:02:30.942
they just make their own copy.

47
00:02:30.942 --> 00:02:32.966
For you putting them in one repo,
that's just easy for

48
00:02:32.966 --> 00:02:35.080
you to deploy things like
different services together.

49
00:02:35.080 --> 00:02:38.216
Like, these are all common lambdas,
I'm going to deploy them together.

50
00:02:38.216 --> 00:02:40.110
But when they go to AWS,
they don't know about each other.

