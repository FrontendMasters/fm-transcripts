WEBVTT

1
00:00:00.030 --> 00:00:02.710
&gt;&gt; Scott Moss: So
if everyone has this repo up,

2
00:00:03.850 --> 00:00:07.800
the format is pretty much in the readme,
but just to go over it again.

3
00:00:07.800 --> 00:00:11.210
We're gonna be checking
out to different lessons.

4
00:00:11.210 --> 00:00:12.268
Each lesson has a number on it.

5
00:00:12.268 --> 00:00:16.504
So we'll be starting with lesson one, so
feel free to check out to that lesson,

6
00:00:16.504 --> 00:00:17.588
to lesson dash one.

7
00:00:17.588 --> 00:00:20.810
And then we can get started on
what we're gonna be talking about.

8
00:00:20.810 --> 00:00:23.820
And what we're gonna be doing in
this first lesson is just going over

9
00:00:23.820 --> 00:00:26.220
how to create a Hello, World Lambda.

10
00:00:26.220 --> 00:00:29.550
Now, I heard that there was a lot
of people using Python here.

11
00:00:29.550 --> 00:00:31.930
We're not gonna be using Python in
this course, we'll be using Node and

12
00:00:31.930 --> 00:00:34.550
JavaScript, but everything still applies.

13
00:00:34.550 --> 00:00:37.780
There aren't really too many differences
when it comes down to the actual

14
00:00:37.780 --> 00:00:41.570
language that you choose to
use inside of Lambda and AWS.

15
00:00:41.570 --> 00:00:43.510
Pretty much still has the same input and

16
00:00:43.510 --> 00:00:46.740
expects the same output,
it's just your language of choice.

17
00:00:46.740 --> 00:00:49.630
So there really aren't that
many differences here.

18
00:00:49.630 --> 00:00:53.410
There definitely are some differences,
but that's more advanced and

19
00:00:53.410 --> 00:00:56.070
we will not be covering that stuff today.

20
00:00:56.070 --> 00:00:57.718
But I'm willing to talk about it,
for sure.

21
00:00:57.718 --> 00:01:03.738
So let's do that,
let's check out do lesson 1.

22
00:01:03.738 --> 00:01:08.470
And what we're gonna do
is let's just open this.

23
00:01:08.470 --> 00:01:11.690
And you don't have to follow along here.

24
00:01:11.690 --> 00:01:16.030
You're gonna be released, and you're gonna
do an exercise, but I'm just gonna go

25
00:01:16.030 --> 00:01:21.690
through a hello world lambda, some
different examples, the configuration.

26
00:01:21.690 --> 00:01:23.900
And how you can get started and
I'm gonna let you loose.

27
00:01:23.900 --> 00:01:26.820
So let's just take a tour
of a couple things.

28
00:01:26.820 --> 00:01:29.450
First step, what you are gonna have to do,
and you can it now or

29
00:01:29.450 --> 00:01:35.020
when you do your exercise, is you're gonna
have to install globally serverless.

30
00:01:36.550 --> 00:01:40.790
So make sure you globally install
that with whatever your flavor is.

31
00:01:40.790 --> 00:01:42.210
So make sure you globally install that.

32
00:01:45.340 --> 00:01:48.758
And once you get that going
you should have called SLS,

33
00:01:48.758 --> 00:01:51.360
don't hit enter when you do that.

34
00:01:51.360 --> 00:01:55.720
You should have SLS or server less,
SLS is the shorthand name for

35
00:01:55.720 --> 00:01:58.150
it, but you can just type out serverless.

36
00:02:00.240 --> 00:02:03.420
So you should have that command ready, and

37
00:02:03.420 --> 00:02:05.840
that's pretty much all you're
gonna need to do this course.

38
00:02:05.840 --> 00:02:08.580
You got AWS set up, you got serverless.

39
00:02:08.580 --> 00:02:11.960
Again, if you don't have AWS set up,
you can still follow along locally,

40
00:02:11.960 --> 00:02:13.100
you just won't be able to deploy.

41
00:02:14.480 --> 00:02:16.253
Okay.

42
00:02:16.253 --> 00:02:20.484
Now that we got that, I already have
this repo here that's set up for you,

43
00:02:20.484 --> 00:02:24.522
it's already scaffolded out so
you don't have to make a new project.

44
00:02:24.522 --> 00:02:28.723
What I'm gonna do now is I'm gonna walk
through creating a new project from

45
00:02:28.723 --> 00:02:31.055
scratch and setting up a Hello World, and

46
00:02:31.055 --> 00:02:33.469
then you will be set to
do that in this repo.

47
00:02:33.469 --> 00:02:37.073
So what I'm about to do now do not follow
along you already have a repo set up for

48
00:02:37.073 --> 00:02:38.695
you I'm just gonna make a new one.

49
00:02:40.811 --> 00:02:46.053
&gt;&gt; Scott Moss: For this lesson, so
I'm just gonna say demo sls, oops.

50
00:02:49.068 --> 00:02:49.720
&gt;&gt; Scott Moss: Actually.

51
00:02:49.720 --> 00:02:53.240
Demo.

52
00:02:55.579 --> 00:02:58.456
&gt;&gt; Scott Moss: So what I'm gonna do is
I'm gonna use the sls command which

53
00:02:58.456 --> 00:03:00.803
is short for serverless,
and if you go to help,

54
00:03:00.803 --> 00:03:04.000
you'll see that there's
some commands here.

55
00:03:04.000 --> 00:03:07.130
One is gonna be for generate.

56
00:03:07.130 --> 00:03:07.630
Where's it at?

57
00:03:13.767 --> 00:03:15.344
&gt;&gt; Scott Moss: Actually they're not
listed here, maybe they updated it.

58
00:03:15.344 --> 00:03:19.933
Let's look at the docs and
see what that actual command is.

59
00:03:19.933 --> 00:03:20.578
&gt;&gt; Student: Create?

60
00:03:20.578 --> 00:03:22.910
&gt;&gt; Scott Moss: It's create now?

61
00:03:22.910 --> 00:03:23.648
Is that what it is?

62
00:03:23.648 --> 00:03:25.834
Let's see.

63
00:03:33.157 --> 00:03:34.670
&gt;&gt; Scott Moss: Yep,
it's create, okay, nice.

64
00:03:34.670 --> 00:03:39.600
So sls create, and
then you can patch it at template,

65
00:03:39.600 --> 00:03:42.950
the template is basically what
language do you want to start with?

66
00:03:42.950 --> 00:03:47.960
Do you want to use advanced things like
TypeScript or WebPack, stuff like that.

67
00:03:47.960 --> 00:03:50.160
So and there's tons of templates.

68
00:03:50.160 --> 00:03:56.297
So we go look up serverless templates,
&gt;&gt; Scott Moss: And

69
00:03:56.297 --> 00:03:58.948
we look up AWS node is
the one we're gonna be using.

70
00:04:03.911 --> 00:04:07.295
&gt;&gt; Scott Moss: Actually, let's look at
the how to do it and not the actual code.

71
00:04:09.989 --> 00:04:15.037
&gt;&gt; Scott Moss: So basically, if you pass
in a template like this, let me zoom in on

72
00:04:15.037 --> 00:04:21.320
that, you can pass in the platform dash
the language you're trying to use.

73
00:04:21.320 --> 00:04:26.890
And it'll actually that function with
that language on the specific platform.

74
00:04:26.890 --> 00:04:31.430
So for us, we want to create one
on the AWS platform using nodejs.

75
00:04:31.430 --> 00:04:38.630
So we'd say sls or serverless create -t,
and for us it'd be aws-nodejs.

76
00:04:38.630 --> 00:04:40.952
And that's going to go ahead and
create a function for us.

77
00:04:43.264 --> 00:04:47.520
&gt;&gt; Scott Moss: So
sls create -t aws and then nodejs.

78
00:04:51.625 --> 00:04:55.030
&gt;&gt; Scott Moss: And
it's gonna do all that stuff right there.

79
00:04:55.030 --> 00:04:56.240
Let's see where it put it.

80
00:04:56.240 --> 00:04:59.243
Looks like it might have put it, alright,
it just put it right in the root.

81
00:04:59.243 --> 00:05:04.413
So let's do it in
a different directory and

82
00:05:04.413 --> 00:05:07.433
we will call it Demo SOS.

83
00:05:07.433 --> 00:05:07.933
There we go.

84
00:05:10.088 --> 00:05:10.600
&gt;&gt; Scott Moss: Cool.

85
00:05:10.600 --> 00:05:16.030
So now if I open this up, I

86
00:05:16.030 --> 00:05:20.670
now got a bare bones
service function here.

87
00:05:20.670 --> 00:05:22.800
So let's take a tour of what's here.

88
00:05:22.800 --> 00:05:25.350
It's only three files,
minus the get ignore it's only two files.

89
00:05:25.350 --> 00:05:27.637
So we get this one thing called a handler.

90
00:05:27.637 --> 00:05:30.759
So handler is the term that Lambda and

91
00:05:30.759 --> 00:05:35.796
most functions use to describe
the actual function that's

92
00:05:35.796 --> 00:05:41.310
going to be deployed on the platform
that you're deploying to.

93
00:05:41.310 --> 00:05:44.890
So you can think of the handler
as the entry function

94
00:05:44.890 --> 00:05:46.300
into what you're gonna be accessing.

95
00:05:46.300 --> 00:05:49.760
It's the actual lambda, although your
lambda could call other functions.

96
00:05:49.760 --> 00:05:53.010
Whether they're other lambda functions or
functions in your code.

97
00:05:53.010 --> 00:05:55.950
This is the actual lambda function.

98
00:05:55.950 --> 00:05:58.730
And handlers is the key word that they
use, you can call it whatever you want.

99
00:05:58.730 --> 00:06:01.300
That's just the word that they use,
this is the handler.

100
00:06:02.310 --> 00:06:05.160
So basically they generated
us a handler here and

101
00:06:05.160 --> 00:06:07.260
just from the looks of it
you'll learn later today.

102
00:06:07.260 --> 00:06:10.320
This looks like it's gonna
be a handler for an API,

103
00:06:10.320 --> 00:06:13.530
basically I know that because they're
responding back with a status code.

104
00:06:14.790 --> 00:06:16.240
All lambda functions aren't just for

105
00:06:16.240 --> 00:06:18.810
APIs, these ones specifically
looks like it was coded for that.

106
00:06:19.960 --> 00:06:24.280
So the quick things to note here is the
parameters and we'll talk about that and

107
00:06:24.280 --> 00:06:25.840
then the response.

108
00:06:25.840 --> 00:06:28.680
So that's the handler file and
then if you go to the service YML,

109
00:06:28.680 --> 00:06:31.870
this is the configuration file for
a serverless itself.

110
00:06:31.870 --> 00:06:35.120
It's heavily commented,
very well documented.

111
00:06:35.120 --> 00:06:37.230
So I'm not gonna cover everything
here because it's literally so

112
00:06:37.230 --> 00:06:38.550
many things in here.

113
00:06:38.550 --> 00:06:40.800
In fact, you can extend it
to put whatever you want.

114
00:06:40.800 --> 00:06:43.650
So there's an unlimited amount
of options you can put in here.

115
00:06:43.650 --> 00:06:47.190
But the important things to
remember is one, it's a service.

116
00:06:47.190 --> 00:06:50.330
This service is basically
like the namespace for

117
00:06:50.330 --> 00:06:53.090
these groups of lambdas that
you're gonna be creating.

118
00:06:53.090 --> 00:06:54.830
So you can put many lambdas
in this project and

119
00:06:54.830 --> 00:06:57.210
you can deploy them together or
separate it.

120
00:06:57.210 --> 00:06:59.530
But they're all pretty much
gonna be namespace with this.

121
00:06:59.530 --> 00:07:01.540
You could think that's what a service is.

122
00:07:01.540 --> 00:07:03.680
It's like the name space for the lambdas.

123
00:07:03.680 --> 00:07:04.340
It's like their group.

124
00:07:04.340 --> 00:07:07.180
And then provider,
because we chose AWS and

125
00:07:07.180 --> 00:07:10.630
node, it went ahead and
put that in for us.

126
00:07:10.630 --> 00:07:15.320
AWS node, I'm actually gonna change that
to 8.10, which is newly supportive AWS,

127
00:07:15.320 --> 00:07:17.870
like 3 or 4 weeks ago, maybe.

128
00:07:17.870 --> 00:07:18.640
So I'm going to do that.

129
00:07:19.640 --> 00:07:22.260
And then if you go all the way down here,
you'll get to this part that says

130
00:07:22.260 --> 00:07:24.630
functions, and
this is where the magic happens.

131
00:07:24.630 --> 00:07:28.460
So, let's open up the directory and
we can just do a quick glance here.

132
00:07:28.460 --> 00:07:30.740
So functions,
we have a function called hello.

133
00:07:30.740 --> 00:07:33.280
We can put whatever we want there.

134
00:07:33.280 --> 00:07:37.170
That name, it doesn't matter,
that's the name of your function.

135
00:07:37.170 --> 00:07:38.920
This is how it's gonna show up on AWS.

136
00:07:38.920 --> 00:07:40.730
This is gonna be the name of your lambda.

137
00:07:40.730 --> 00:07:43.530
But it has nothing to
do with the file name,

138
00:07:43.530 --> 00:07:47.620
it's whatever name you want this lambda to
be on the platform that you deploy it to.

139
00:07:47.620 --> 00:07:49.010
So when we go look on AWS,

140
00:07:49.010 --> 00:07:52.070
if we were to deploy this function,
we'd see a lambda function called hello.

141
00:07:53.170 --> 00:07:56.370
And then now we need to tell serverless,
where is the source code for

142
00:07:56.370 --> 00:07:58.010
this function that we're calling hello.

143
00:07:59.060 --> 00:08:01.155
The way you do that is you add
the handler property here,

144
00:08:01.155 --> 00:08:05.330
again that's the word that they
use to describe the actual lambda.

145
00:08:05.330 --> 00:08:09.910
And then you just give it the path
to the file that has the lambda.

146
00:08:11.870 --> 00:08:13.900
This path is relative
to the serverless.yml.

147
00:08:13.900 --> 00:08:16.580
So if we go look at the handler.js,

148
00:08:16.580 --> 00:08:18.688
you'll notice that this file
over here is called handler.

149
00:08:18.688 --> 00:08:23.530
Right here, oops.

150
00:08:23.530 --> 00:08:24.710
And then there is a .hello.

151
00:08:24.710 --> 00:08:27.621
That's not the file extension,
that hello is the name of the export.

152
00:08:30.129 --> 00:08:32.700
&gt;&gt; Scott Moss: So that has to match.

153
00:08:32.700 --> 00:08:35.310
So again,
this is the name of the file, handler.

154
00:08:36.320 --> 00:08:39.040
And then dot,
it's not the extension of the file,

155
00:08:39.040 --> 00:08:41.980
it's the name of the export
that you're exporting.

156
00:08:41.980 --> 00:08:45.390
So those have to match or
service will not find your function.

157
00:08:45.390 --> 00:08:46.080
It will just break.

158
00:08:48.050 --> 00:08:50.930
So now that we got that, what we can
do is, I'll just keep this here.

159
00:08:50.930 --> 00:08:53.010
And then we can actually run this lambda.

160
00:08:53.010 --> 00:08:55.800
So let's do that, and
there's a couple ways we can do it.

161
00:08:55.800 --> 00:08:57.740
Because we didn't set up an api,

162
00:08:57.740 --> 00:09:01.690
this is just a function,
we can just invoke the function locally.

163
00:09:01.690 --> 00:09:03.440
We're not going to set up
an api right now, that's later.

164
00:09:03.440 --> 00:09:06.810
So the way we can do that is we
can just type in sls invoke,

165
00:09:06.810 --> 00:09:09.260
and then you have to pass in local.

166
00:09:09.260 --> 00:09:13.620
If you don't pass in local, it's gonna try
to invoke it in AWS but it's not there yet

167
00:09:13.620 --> 00:09:14.910
so it'll just break.

168
00:09:14.910 --> 00:09:17.810
So you add type in local and
-f is the name of the function that you

169
00:09:17.810 --> 00:09:20.903
actually want to invoke in our case
the function is called, hello.

170
00:09:23.322 --> 00:09:26.824
&gt;&gt; Scott Moss: So if I'll run it you
can see that's what this function

171
00:09:26.824 --> 00:09:30.556
returns which is exactly what
was in the callback response

172
00:09:30.556 --> 00:09:37.677
here
&gt;&gt; Scott Moss: So again this all worked

173
00:09:37.677 --> 00:09:42.920
with service because we told service
that we had a function called hello.

174
00:09:42.920 --> 00:09:47.650
Its source is pointing to this path
called handler which is the file name.

175
00:09:47.650 --> 00:09:49.290
And then the export is hello.

176
00:09:49.290 --> 00:09:52.969
And then inside that handler
we have this three events.

177
00:09:54.650 --> 00:09:58.980
We don't, these events right here, this
event, this context, and this callback,

178
00:09:58.980 --> 00:10:02.270
is not so important right now,
because we're going to get to it.

179
00:10:02.270 --> 00:10:06.420
But really, the only thing to note
here is that if you've ever used node,

180
00:10:06.420 --> 00:10:11.520
you know the callback pattern is mostly
error first, and then the actual data.

181
00:10:11.520 --> 00:10:12.740
That's the pattern that it's following.

182
00:10:12.740 --> 00:10:15.530
So if you had an error you
would put the error here first.

183
00:10:15.530 --> 00:10:17.520
And then it would error out.

184
00:10:17.520 --> 00:10:19.650
But we don't have an error here,
we're just gonna send back this response.

185
00:10:19.650 --> 00:10:21.610
And you could put back whatever you want.

186
00:10:21.610 --> 00:10:23.720
It's just,
you literally put whatever you want here.

187
00:10:23.720 --> 00:10:26.210
When we get to APIs,
you can't put whatever you want there.

188
00:10:26.210 --> 00:10:27.680
But we're just invoking this locally, so

189
00:10:27.680 --> 00:10:31.800
you can respond with, it really
doesn't matter what you respond with.

190
00:10:31.800 --> 00:10:34.277
You can respond with whatever,
because we're just invoking it locally.

191
00:10:38.223 --> 00:10:42.130
&gt;&gt; Scott Moss: And that's basically,
at the end of the day, that's a lambda.

192
00:10:42.130 --> 00:10:43.230
That's it.

193
00:10:43.230 --> 00:10:45.350
And then, you would deploy this to AWS.

194
00:10:45.350 --> 00:10:49.440
And then the next part is really how
you actually activate this lambda.

195
00:10:49.440 --> 00:10:51.040
What does it respond to?

196
00:10:51.040 --> 00:10:53.040
Does it respond to HTTP events?

197
00:10:53.040 --> 00:10:55.340
Does it respond to S3 PUT and DELETEs.

198
00:10:55.340 --> 00:10:57.450
Does it respond to Kinesis Streams?

199
00:10:57.450 --> 00:10:59.680
Or DynamoDB events, there's so

200
00:10:59.680 --> 00:11:04.320
many things you could do which will
change how these arguments look.

201
00:11:04.320 --> 00:11:06.160
And then that's where things
start getting interesting.

