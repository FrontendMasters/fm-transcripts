WEBVTT

1
00:00:00.300 --> 00:00:04.555
&gt;&gt; Scott Moss: Okay, so
what I have is basically this.

2
00:00:04.555 --> 00:00:10.045
So I'm using supertest which
given an express application

3
00:00:10.045 --> 00:00:17.070
will setup a request function or object
for you that allows you to actually,

4
00:00:17.070 --> 00:00:21.700
run the express requests and
get back the result.

5
00:00:21.700 --> 00:00:25.448
So it's basically allowing you to execute
the controllers on your Express app

6
00:00:25.448 --> 00:00:28.129
without actually starting
an Express server, right?

7
00:00:28.129 --> 00:00:30.410
Because Express,
like I said, it's two parts.

8
00:00:30.410 --> 00:00:33.277
There's a routing middleware and
controller side, and

9
00:00:33.277 --> 00:00:34.897
then there's the server side.

10
00:00:34.897 --> 00:00:37.547
You don't need to start a server
to tie into the other side, and

11
00:00:37.547 --> 00:00:39.009
that's what supertest is doing.

12
00:00:39.009 --> 00:00:40.462
So we're actually starting a server here.

13
00:00:40.462 --> 00:00:45.617
We're just tieing into the event
like nature of express.

14
00:00:45.617 --> 00:00:49.984
Which basically says if you hit
this route, fire this event.

15
00:00:49.984 --> 00:00:53.045
Which runs this middle and
this controller, that's what we're doing.

16
00:00:53.045 --> 00:00:57.560
So if I go to one of my APIs
which is slash todos' I know I'm

17
00:00:57.560 --> 00:01:01.241
getting back two things
on the data property.

18
00:01:01.241 --> 00:01:04.757
So if I go to the spec, you could see
the that's exactly what I'm doing.

19
00:01:04.757 --> 00:01:09.121
I expect to get 200, I expect that data
property have two, so if I run this.

20
00:01:14.438 --> 00:01:18.597
&gt;&gt; Scott Moss: We should get back,
&gt;&gt; Scott Moss: okay, and we do.

21
00:01:18.597 --> 00:01:21.956
Did anybody write their test differently?

22
00:01:21.956 --> 00:01:24.306
Not so much as the assertion for
just like,

23
00:01:24.306 --> 00:01:28.436
how they set the test up that they use
something else other than supertest.

24
00:01:28.436 --> 00:01:33.000
I'm just interested on how you've
done that and what you did.

25
00:01:35.039 --> 00:01:36.547
&gt;&gt; Scott Moss: Everybody used supertest?

26
00:01:36.547 --> 00:01:37.837
Do you able to use it?

27
00:01:37.837 --> 00:01:39.742
Yeah, sometimes it's [COUGH] pretty easy.

28
00:01:39.742 --> 00:01:42.974
It's created by the same
person that made Express, so

29
00:01:42.974 --> 00:01:46.221
I would imagine it would work
very well with it, cool.

30
00:01:46.221 --> 00:01:48.103
And I mean, that's basically for testing.

31
00:01:48.103 --> 00:01:50.215
There's really not much more to it.

32
00:01:50.215 --> 00:01:52.938
But actually, it all depends
on how you write your lambda.

33
00:01:52.938 --> 00:01:56.458
In this case, we wrote a lambda using
Express, so supertest was A-okay.

34
00:01:56.458 --> 00:02:00.263
But if we decided to write,
you know, just Vanilla JavaScript,

35
00:02:00.263 --> 00:02:03.183
then it would be up to you
to extract out your code.

36
00:02:03.183 --> 00:02:04.858
Kind of like how I was
showing you earlier.

37
00:02:04.858 --> 00:02:06.984
So you can easily test it in here.

38
00:02:06.984 --> 00:02:13.351
But when you run your test, the only
thing you would have to be aware of is,

39
00:02:13.351 --> 00:02:19.013
if there's specific AWS things
that you would need in your test.

40
00:02:19.013 --> 00:02:22.634
But that's true with any server,
so you would just mark that up.

41
00:02:22.634 --> 00:02:25.005
So there shouldn't be any difference here.

42
00:02:25.005 --> 00:02:29.673
At the end of the day you're just testing
your function that has three inputs.

43
00:02:29.673 --> 00:02:33.087
And then as far as the event goes,
you can go to AWS and

44
00:02:33.087 --> 00:02:35.504
grab the event that you need to test.

45
00:02:35.504 --> 00:02:37.902
And you can pass that
into your test as well.

46
00:02:37.902 --> 00:02:40.796
Or if you're calling lambda from
another lambda and have a custom event,

47
00:02:40.796 --> 00:02:43.193
you can test that as well because
you're the one calling it.

48
00:02:43.193 --> 00:02:46.921
So there's really is no reason
why you can't test your lambdas'.

49
00:02:46.921 --> 00:02:50.497
It's no different than
testing anything else.

50
00:02:50.497 --> 00:02:53.800
Any questions on testing with lambdas' and
how that works?

