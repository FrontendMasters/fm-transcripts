WEBVTT

1
00:00:02.529 --> 00:00:04.970
&gt;&gt; Scott Moss: So
let's get onto the good part.

2
00:00:04.970 --> 00:00:08.250
So this is it, there's no more lessons for
the rest of today.

3
00:00:08.250 --> 00:00:11.143
The rest of the time, I just wanna
show you some of the resources and

4
00:00:11.143 --> 00:00:14.152
things that I've been working with,
and things to look forward to.

5
00:00:14.152 --> 00:00:15.169
And then just open it up for

6
00:00:15.169 --> 00:00:17.533
any questions about what you may
be doing with Serverless and

7
00:00:17.533 --> 00:00:20.610
some of the stuff I might have talked
about today that I said I'll get to later.

8
00:00:20.610 --> 00:00:21.140
Just remind me.

9
00:00:22.200 --> 00:00:26.250
So some of the things I wanted to see is,
basically just like.

10
00:00:28.490 --> 00:00:30.260
Actually this one is really cool.

11
00:00:30.260 --> 00:00:34.820
So Cloudcraft, if you need to
put together some AWS diagrams,

12
00:00:34.820 --> 00:00:35.680
this one is really cool.

13
00:00:35.680 --> 00:00:39.940
Basically it allows you to either
connect to your AWS account.

14
00:00:39.940 --> 00:00:43.090
And it will pull in resources that are
connected and draw diagrams for you, or

15
00:00:43.090 --> 00:00:44.520
you can put them together.

16
00:00:44.520 --> 00:00:47.840
It will also tell you how much these
things cost on a monthly, weekly,

17
00:00:47.840 --> 00:00:49.690
whatever, basis, so it's really cool.

18
00:00:49.690 --> 00:00:52.950
And it's really great for
just showing diagrams.

19
00:00:52.950 --> 00:00:53.518
So yeah,

20
00:00:53.518 --> 00:00:58.078
I recommend using this if you need to
show infrastructure diagrams for AWS.

21
00:00:58.078 --> 00:00:59.341
It pretty much knows everything,

22
00:00:59.341 --> 00:01:01.270
especially if you login
with your AWS account.

23
00:01:01.270 --> 00:01:02.850
It's provisioning everything.

24
00:01:02.850 --> 00:01:04.850
So it's really cool.

25
00:01:04.850 --> 00:01:06.900
Another one is basically,

26
00:01:07.930 --> 00:01:12.800
remember I said connecting to
database in Lambda is like painful.

27
00:01:12.800 --> 00:01:13.710
That's because it is.

28
00:01:13.710 --> 00:01:16.028
[COUGH] Unless you're using like
Diamond DB which make sense,

29
00:01:16.028 --> 00:01:17.830
cuz that's Amazon's database.

30
00:01:17.830 --> 00:01:20.250
But that's also because

31
00:01:20.250 --> 00:01:24.060
the rise of Serverless has created
what's called Serverless databases.

32
00:01:24.060 --> 00:01:29.880
So if you were to type in Serverless
databases, you would get so much stuff.

33
00:01:29.880 --> 00:01:32.960
The first one you would see,
wow, Amazon took over that fast.

34
00:01:32.960 --> 00:01:35.310
Okay, this just launched.

35
00:01:35.310 --> 00:01:39.820
Amazon Aurora, which is basically like
an auto scaling SQL database basically.

36
00:01:39.820 --> 00:01:44.000
They already had Aurora,
now they have Aurora Serverless,

37
00:01:44.000 --> 00:01:49.650
which is, it spins up the database and
only charges you when you access it,

38
00:01:49.650 --> 00:01:52.710
whereas a regular Aurora
is always running.

39
00:01:52.710 --> 00:01:57.720
Aurora is like their SQL post
[INAUDIBLE] base database system, so

40
00:01:57.720 --> 00:02:00.440
now they have a Serverless version
of it which is really cool.

41
00:02:00.440 --> 00:02:02.620
So this ties into the Serverless model.

42
00:02:02.620 --> 00:02:04.630
And I even have to manage this database.

43
00:02:04.630 --> 00:02:09.450
And I'm pretty sure this one's
like available globally and

44
00:02:09.450 --> 00:02:10.290
pretty much all that stuff.

45
00:02:10.290 --> 00:02:11.860
So definitely check this one out.

46
00:02:12.930 --> 00:02:14.000
Pretty easy.

47
00:02:14.000 --> 00:02:20.180
You can see it's like 0.06 cents for
a one ACU, which is an ACU is like

48
00:02:20.180 --> 00:02:24.800
every time you hit the database, so yeah.

49
00:02:24.800 --> 00:02:26.400
Check that out.

50
00:02:26.400 --> 00:02:29.937
Another one you might see is, there's so

51
00:02:29.937 --> 00:02:33.558
much stuff on here.
&gt;&gt; Scott Moss: Actually,

52
00:02:33.558 --> 00:02:34.140
I'm just gonna type in.

53
00:02:34.140 --> 00:02:36.250
I thought it would show up on Google,
but it's not.

54
00:02:36.250 --> 00:02:41.330
So faunadv is a new one,
start up out of San Francisco.

55
00:02:41.330 --> 00:02:47.480
Just recently raised some dough, so
they're trying to do exciting things.

56
00:02:47.480 --> 00:02:52.660
But this one is a global
transactional NoSQL database.

57
00:02:52.660 --> 00:02:56.130
And what makes these databases Serverless
is that you don't manage their connection,

58
00:02:56.130 --> 00:02:59.700
you're actually just access them
over HTTP, kinda like an API.

59
00:02:59.700 --> 00:03:03.160
That's how you access it, but
it's not so raw in low levels on API,

60
00:03:03.160 --> 00:03:05.680
they have SDKs that you
can integrate with.

61
00:03:05.680 --> 00:03:08.940
But at the end of the day, those SDKs
are just calling HTTP based APIs.

62
00:03:08.940 --> 00:03:13.530
So that's why they're Serverless,
because you don't manage a connection, and

63
00:03:13.530 --> 00:03:16.780
you can spin up databases and
close down databases or whatever you want.

64
00:03:16.780 --> 00:03:19.690
The sweet thing about Fauna is that

65
00:03:19.690 --> 00:03:25.000
it's as easy to make a new database as it
is to make a post request to a to-do app.

66
00:03:25.000 --> 00:03:26.080
So that means,

67
00:03:26.080 --> 00:03:31.400
before you might have thought about the
trade offs of multi-tenant systems where

68
00:03:31.400 --> 00:03:35.090
you have a system where you have this data
provision across different customers.

69
00:03:35.090 --> 00:03:38.710
But provisioning a new database for every
single customer is really expensive and

70
00:03:38.710 --> 00:03:40.160
tedious, so you just don't do it.

71
00:03:40.160 --> 00:03:43.530
And you stick with multi-tenant
within the database, but

72
00:03:43.530 --> 00:03:45.840
putting a customer ID on everything.

73
00:03:45.840 --> 00:03:48.050
But with Fauna,
you can just put up a new database,

74
00:03:48.050 --> 00:03:50.240
because you don't get charged
unless you use it anyway.

75
00:03:50.240 --> 00:03:52.870
So everybody gets their own database and
then you just need like

76
00:03:52.870 --> 00:03:56.620
one database that manages the database
names of everybody else's database.

77
00:03:56.620 --> 00:03:57.910
So it's pretty cool.

78
00:03:57.910 --> 00:04:01.580
You can do stuff like that now whereas
before that was really tough to do.

79
00:04:01.580 --> 00:04:04.584
You'd have to manage all those databases
and have to provision them and

80
00:04:04.584 --> 00:04:06.989
your application probably
wouldn't be self-served,

81
00:04:06.989 --> 00:04:09.942
because people would have to wait
until the databases get spun up, and

82
00:04:09.942 --> 00:04:12.368
stuff like that, well,
I was like it's just on the fly.

83
00:04:12.368 --> 00:04:15.340
So pretty cool,
how we're gonna check them out.

84
00:04:15.340 --> 00:04:21.240
There's a learning curve to their syntax,
but it seems to be pretty legit.

85
00:04:21.240 --> 00:04:24.298
Another one which I think
is very promising is

86
00:04:24.298 --> 00:04:31.420
Azure's Cosmo DB which
is also pretty new too.

87
00:04:31.420 --> 00:04:32.220
This one I really like,

88
00:04:32.220 --> 00:04:36.930
because it's a DB that's globally
distributed and it's a multi-model.

89
00:04:36.930 --> 00:04:43.200
Basically it's SQL, no SQL,
and Graph at the same time.

90
00:04:43.200 --> 00:04:45.330
And you can pick which model you want.

91
00:04:45.330 --> 00:04:48.220
And because of that transitioning over
to this database is really seamless.

92
00:04:48.220 --> 00:04:51.040
So if you have a Mongo DB actually
you can transition over to

93
00:04:51.040 --> 00:04:53.540
Azure Cosmo DB without
changing any of your code.

94
00:04:53.540 --> 00:04:57.133
You can still use the same Mongos if you
want and just connect to this database.

95
00:04:57.133 --> 00:04:58.370
And that will just work.

96
00:04:58.370 --> 00:05:00.870
And so it's actually pretty seamless, and

97
00:05:00.870 --> 00:05:03.250
the sweet thing about it is
that is globally distributed.

98
00:05:03.250 --> 00:05:07.503
So that's really good if we're gonna be
doing globally distributed apps using

99
00:05:07.503 --> 00:05:08.262
Lambda.

