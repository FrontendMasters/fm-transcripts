WEBVTT

1
00:00:00.210 --> 00:00:01.600
&gt;&gt; Scott Moss: Back to the lambdas, so

2
00:00:01.600 --> 00:00:04.620
that's execution role,
and what that means.

3
00:00:05.770 --> 00:00:06.900
This right here, basic settings,

4
00:00:06.900 --> 00:00:08.970
this is literally just
a description of your lambda.

5
00:00:08.970 --> 00:00:10.530
You give a description, it's just for

6
00:00:10.530 --> 00:00:14.400
us humans to read the descriptions of
our lambdas, and that's basically it.

7
00:00:14.400 --> 00:00:16.760
Memory, this is exactly
what it sounds like,

8
00:00:16.760 --> 00:00:19.050
this is how much memory you
wanna allocate to your lambdas.

9
00:00:19.050 --> 00:00:23.211
Cuz by default, you get 1024 megs, but
you can go all the way to 3000 megs,

10
00:00:23.211 --> 00:00:24.294
which is a new limit.

11
00:00:24.294 --> 00:00:27.440
They actually just increased the memory,
it didn't use to be this high.

12
00:00:27.440 --> 00:00:30.020
The thing about the memory is,
from my testing and

13
00:00:30.020 --> 00:00:33.990
from my research, is that, yes, if you
increase the memory, it actually does have

14
00:00:33.990 --> 00:00:37.260
a significant impact on your performance,
depending on what you're doing.

15
00:00:37.260 --> 00:00:40.900
But it does double, triple your cost,
so the more memory you add,

16
00:00:40.900 --> 00:00:42.650
the more they're gonna charge you.

17
00:00:42.650 --> 00:00:45.010
So you might be thinking,
it's just pennies.

18
00:00:45.010 --> 00:00:47.921
Yeah, it adds up, so
that's the whole point.

19
00:00:47.921 --> 00:00:52.196
It's just pennies, it's easy,
just throw it at it, but it will add up.

20
00:00:52.196 --> 00:00:56.832
So just something to think about,
I would just test your stuff and

21
00:00:56.832 --> 00:00:58.551
make sure you're not.

22
00:00:58.551 --> 00:01:01.295
I mean, if you have a memory leak,
and you think, by coming here,

23
00:01:01.295 --> 00:01:03.892
just increasing this is gonna help you,
it's not a good idea.

24
00:01:03.892 --> 00:01:04.751
That's basically what I'm saying.

25
00:01:04.751 --> 00:01:09.978
[LAUGH] Don't do that,
go find your memory leak.

26
00:01:09.978 --> 00:01:13.328
Some people actually don't care about
memory leaks for lambda cuz it's like,

27
00:01:13.328 --> 00:01:15.884
it's a lambda, it's not stateful,
it'll just restart.

28
00:01:15.884 --> 00:01:21.599
I'm like, my God, okay, so don't do that.

29
00:01:21.599 --> 00:01:26.000
And then timeout is how long can
this lambda run before it times out.

30
00:01:26.000 --> 00:01:29.110
So if you have some hanging operation,
like a database connection,

31
00:01:29.110 --> 00:01:30.710
some async thing.

32
00:01:30.710 --> 00:01:35.380
How long is AWS gonna keep this lambda
alive before it says, okay, that's enough.

33
00:01:35.380 --> 00:01:38.090
And even if there's nothing hanging,
even if your process is

34
00:01:38.090 --> 00:01:41.240
synchronously going through
code execution, but it's taking

35
00:01:41.240 --> 00:01:45.020
longer than the specific amount that you
put here, it'll still just cut it off.

36
00:01:45.020 --> 00:01:47.310
So it doesn't even have to be
async operation, it could be, hey,

37
00:01:47.310 --> 00:01:49.590
your function's just taking too long,
we're gonna cut you off.

38
00:01:49.590 --> 00:01:52.040
So that's what this can be,
this defaults to six seconds.

39
00:01:52.040 --> 00:01:54.718
You can also override
all these options that I

40
00:01:54.718 --> 00:01:57.265
just talked about inside the service YML.

41
00:01:57.265 --> 00:02:01.143
Every single thing that I just described,
environment variables, tags,

42
00:02:01.143 --> 00:02:04.066
execution role, description,
memory, and timeout.

43
00:02:04.066 --> 00:02:08.530
You can override in the service YML file,
and therefore we update it.

44
00:02:08.530 --> 00:02:13.324
My recommendation is, if you do
something with the service YML file,

45
00:02:13.324 --> 00:02:14.881
always do it in there.

46
00:02:14.881 --> 00:02:17.980
Don't come back and change it in here,
cuz then things will be out of sync.

47
00:02:17.980 --> 00:02:19.530
And I found out that when you do that and

48
00:02:19.530 --> 00:02:23.960
you try to redeploy the call formation,
it errors out sometimes.

49
00:02:23.960 --> 00:02:26.900
Cuz it tries to look at a previous
state to figure out what's going on.

50
00:02:26.900 --> 00:02:29.790
And if you mess around with it,
It kinda errors out.

51
00:02:29.790 --> 00:02:32.080
We had to get to the point where we
just had to delete all of our lambdas

52
00:02:32.080 --> 00:02:33.260
and redeploy them.

53
00:02:33.260 --> 00:02:35.919
Which sounds really bad, but it's so easy
to do, it's like, all right, whatever.

54
00:02:35.919 --> 00:02:38.878
Just delete them and redeploy them,
so we've done that a couple times.

55
00:02:41.329 --> 00:02:45.510
&gt;&gt; Scott Moss: This next one,
which is Network, specifically to VPC.

56
00:02:45.510 --> 00:02:48.496
Does anyone know what a VPC
is in the context of AWS?

57
00:02:51.305 --> 00:02:52.935
&gt;&gt; Scott Moss: Okay,
this is very important, without this,

58
00:02:52.935 --> 00:02:54.780
you probably won't even
really use lambdas at all.

59
00:02:54.780 --> 00:02:59.360
But we're not gonna configure VPC today
because that's just a whole other lesson.

60
00:02:59.360 --> 00:03:03.740
But basically,
it's just like a private network, right?

61
00:03:03.740 --> 00:03:08.300
So without a VPC and an Internet gateway,

62
00:03:08.300 --> 00:03:12.520
IDW set up on AWS, your lambda won't
be able to talk to the Internet.

63
00:03:13.910 --> 00:03:17.070
So by default, when you deploy a lambda
to AWS, it can't talk to the Internet.

64
00:03:17.070 --> 00:03:21.390
If you're trying to make a GitHub
call inside your lambda, like.

65
00:03:21.390 --> 00:03:24.870
Inside my lambda function,
I'm gonna make an API call to GitHub.

66
00:03:24.870 --> 00:03:26.880
You won't be able to do it,
it's gonna get blocked.

67
00:03:26.880 --> 00:03:29.820
And the only way to get around that is
to set up a VPC that is connected to

68
00:03:29.820 --> 00:03:30.800
an Internet gateway.

69
00:03:30.800 --> 00:03:32.547
And you gotta do all that on lambda, and

70
00:03:32.547 --> 00:03:37.120
that's just some advanced networking
stuff that I do not wanna walk through.

71
00:03:37.120 --> 00:03:38.645
But you would have to set that up,

72
00:03:38.645 --> 00:03:41.329
again, you can also do this
through the service YML file.

73
00:03:41.329 --> 00:03:45.607
But you cannot talk to the Internet
in your lambda without setting up

74
00:03:45.607 --> 00:03:47.491
an Internet gateway on a VPC.

75
00:03:47.491 --> 00:03:51.880
So just remember that,
it took me two weeks to figure out.

76
00:03:51.880 --> 00:03:55.890
We almost abandoned lambda, cuz we were
like, you can't even make an API call.

77
00:03:55.890 --> 00:03:57.800
This is stupid,
I don't know how people use this.

78
00:03:57.800 --> 00:04:04.360
And I was like, my God, Internet gateway,
VPCs, gotta allow all that stuff.

79
00:04:04.360 --> 00:04:07.300
So yeah, that's that,
debugging, error handling,

80
00:04:07.300 --> 00:04:10.380
this is some new stuff that they have,
that they actually just added.

81
00:04:10.380 --> 00:04:14.440
This basically means,
if your lambdas are dying,

82
00:04:14.440 --> 00:04:17.390
what do you want AWS to automatically
do for you, if anything?

83
00:04:17.390 --> 00:04:19.658
They can send that error
to an SNS topic or

84
00:04:19.658 --> 00:04:23.885
SQS, which then you can have another
lambda or something subscribe to it.

85
00:04:23.885 --> 00:04:28.241
And then you can keep retrying it, so
it's like a retry queue or error queue.

86
00:04:28.241 --> 00:04:31.700
And you can do things depending on
what is happening in your lambda.

87
00:04:31.700 --> 00:04:34.550
It's really cool,
then they have active tracing,

88
00:04:34.550 --> 00:04:37.470
which goes all the way down to figure
out what's happening in your lambdas.

89
00:04:37.470 --> 00:04:40.682
It looks like they're trying to compete
with a lot of third-party tools out

90
00:04:40.682 --> 00:04:43.610
there that already offer some of this for
lambdas, so good for them.

91
00:04:43.610 --> 00:04:47.723
But it's AWS, I mean,
you're gonna get a really bad dashboard.

92
00:04:47.723 --> 00:04:53.630
So [LAUGH] concurrency,
that's exactly what it sounds like.

93
00:04:53.630 --> 00:04:59.685
How many parallel invocations of this
function can you run at one time?

94
00:04:59.685 --> 00:05:06.152
So right now, it says, use unreserved
account currency, which is 1,000.

95
00:05:06.152 --> 00:05:08.835
You can put something else
there if you wanted to, but

96
00:05:08.835 --> 00:05:11.049
it's not gonna let you go over 1,000.

97
00:05:11.049 --> 00:05:15.931
So that's the max that you're gonna get,
so that's something to think about.

98
00:05:15.931 --> 00:05:18.135
You can actually call them and
they can increase a lot of this stuff.

99
00:05:18.135 --> 00:05:21.224
So things like memory,
timeout, concurrency,

100
00:05:21.224 --> 00:05:24.026
you can call them and
request for this stuff.

101
00:05:24.026 --> 00:05:25.977
And then they'll be like,
it's gonna take a couple days.

102
00:05:25.977 --> 00:05:29.835
And most of the time they'll do it, but
what they'll do instead is try to look at

103
00:05:29.835 --> 00:05:33.290
your stack to figure out if there's
a better way to do it instead.

104
00:05:33.290 --> 00:05:36.670
But they can increase all this stuff,
don't let them tell you that they can't.

105
00:05:36.670 --> 00:05:40.040
But if you do need increase in this stuff,
you code's probably messed up.

106
00:05:40.040 --> 00:05:45.260
So they have these limits for
a reason, but just to let you know.

107
00:05:45.260 --> 00:05:49.040
And then this auditing and compliance is,
actually, I have no idea what this is.

108
00:05:49.040 --> 00:05:51.130
It's my first time seeing this,
so this is new.

109
00:05:51.130 --> 00:05:52.970
So I'm not even gonna pretend
that I know what that is.

110
00:05:52.970 --> 00:05:56.379
So I'm guessing it's auditing and
compliance, [LAUGH] so

111
00:05:56.379 --> 00:05:59.654
I'm not even gonna talk about it,
that's a new thing.

112
00:05:59.654 --> 00:06:01.339
So I'm not sure what that is, I mean,

113
00:06:01.339 --> 00:06:04.490
it looks like it's just telling
to go somewhere else anyway.

114
00:06:04.490 --> 00:06:08.289
So we'll just forget about that,

115
00:06:08.289 --> 00:06:13.535
any questions on this lambda dashboard so
far?

116
00:06:13.535 --> 00:06:17.281
I went over a lot, whole bunch, again,
all that is in the serivce YML,

117
00:06:17.281 --> 00:06:20.233
you do all this in that file,
it's pretty crazy, yes.

118
00:06:20.233 --> 00:06:24.673
&gt;&gt; Marc Grabanski: For the VPC part,
without setting that up,

119
00:06:24.673 --> 00:06:29.003
are you still able to access other things?

120
00:06:29.003 --> 00:06:33.556
Like if I had a DynamoDB set up on my own-
&gt;&gt; Scott Moss: If that dynamo DB was not

121
00:06:33.556 --> 00:06:36.239
in the VPC, yeah, but it probably is.

122
00:06:36.239 --> 00:06:40.710
Yeah, you can access
anything on your AWS account

123
00:06:40.710 --> 00:06:44.230
that's not in the VPC with the lambda.

124
00:06:44.230 --> 00:06:46.423
But you cannot access
anything that's in the VPC or

125
00:06:46.423 --> 00:06:49.387
anything that's on the Internet
without setting up a VPC and an IGW.

126
00:06:52.167 --> 00:06:54.360
&gt;&gt; Scott Moss: Cool, okay, so
coming back all the way to the top,

127
00:06:54.360 --> 00:06:55.996
I don't recommend doing this stuff.

128
00:06:55.996 --> 00:07:00.008
But I'm gonna show you, so when we set
up those events in the service YML,

129
00:07:00.008 --> 00:07:01.916
you can also just do them here too.

130
00:07:01.916 --> 00:07:05.550
Because the service framework is not made
by AWS, I don't know if I mentioned that.

131
00:07:05.550 --> 00:07:08.979
AWS didn't make the service framework,
it's just a company called Serverless.

132
00:07:08.979 --> 00:07:12.636
So that means AWS has to have their own
way for you to attach events and things,

133
00:07:12.636 --> 00:07:14.810
and this is how they want you to do it.

134
00:07:14.810 --> 00:07:17.490
So you can come in here, and
you can attach your own events.

135
00:07:17.490 --> 00:07:20.220
So if I wanted to add a CloudWatch event,
I can add one here.

136
00:07:20.220 --> 00:07:23.180
If I wanted to add a CodeCommit event,
I could add one here.

137
00:07:23.180 --> 00:07:24.690
And it just adds the event, that simple.

138
00:07:24.690 --> 00:07:27.116
Then I would come down here and
configure that event, as you can see.

139
00:07:27.116 --> 00:07:31.090
But the serverless YML does the exact
same thing, so it's kinda up to you.

140
00:07:31.090 --> 00:07:35.450
Like I said, if you're gonna do one
one way, keep it, don't mix and match.

141
00:07:35.450 --> 00:07:38.886
Don't add events here and
then some events in the YML file.

142
00:07:38.886 --> 00:07:42.040
Just wherever you're gonna do it,
just do it there and that's it.

143
00:07:42.040 --> 00:07:45.980
The reason I prefer the YML
file is cuz it's in git.

144
00:07:45.980 --> 00:07:49.702
It's history, I can reversion them,
I can check them into Git, I can go back.

145
00:07:49.702 --> 00:07:53.218
This is just a dashboard that anybody
can come in here and just click on x and

146
00:07:53.218 --> 00:07:53.854
it's done.

147
00:07:53.854 --> 00:07:59.442
So I'd rather not do that, so
I'd rather have my stuff in Git.

148
00:07:59.442 --> 00:08:01.804
And let me get rid of that one,
there we go.

149
00:08:01.804 --> 00:08:05.200
So again, yeah, you can come in here and
you can add all these events and

150
00:08:05.200 --> 00:08:06.113
do all your stuff.

