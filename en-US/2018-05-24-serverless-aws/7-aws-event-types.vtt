WEBVTT

1
00:00:00.070 --> 00:00:03.590
&gt;&gt; Scott: All right, so let's get into the
next topic which is gonna be event types.

2
00:00:03.590 --> 00:00:05.340
So I'm gonna go to my AWS here.

3
00:00:07.950 --> 00:00:10.706
&gt;&gt; Scott: Or
one of the ones I made for this.

4
00:00:15.477 --> 00:00:16.861
&gt;&gt; Scott: Yeah, go there.

5
00:00:27.380 --> 00:00:28.987
&gt;&gt; Scott: See if I can
remember the login here.

6
00:00:33.356 --> 00:00:37.300
&gt;&gt; Scott: Yea, all right,
so this is the AWS console.

7
00:00:37.300 --> 00:00:39.016
It looks better than it used to be.

8
00:00:39.016 --> 00:00:42.612
But [LAUGH] it's still the AWS console.

9
00:00:42.612 --> 00:00:47.542
I always make a joke that if you click on
this Service tab and you pick two things,

10
00:00:47.542 --> 00:00:52.080
maybe three, and build a GUI around it,
you got a startup.

11
00:00:52.080 --> 00:00:52.831
That's a startup.

12
00:00:52.831 --> 00:00:55.579
&gt;&gt; [LAUGH]
&gt;&gt; Scott: Any two or

13
00:00:55.579 --> 00:00:57.491
three of these things.

14
00:00:57.491 --> 00:00:59.160
You'd probably get away with one.

15
00:00:59.160 --> 00:01:02.890
And you just build a better experience
over it, and then you got to startup and

16
00:01:02.890 --> 00:01:04.750
they'll buy you, that's it.

17
00:01:04.750 --> 00:01:08.471
So if you're thinking about it,
just remember you learned it here.

18
00:01:08.471 --> 00:01:12.118
&gt;&gt; [LAUGH]
&gt;&gt; Scott: So we're gonna go

19
00:01:12.118 --> 00:01:16.510
to the lambdas, and this is where you're
gonna be doing most of your work.

20
00:01:16.510 --> 00:01:20.300
So what we just did before was we
wrote a lambda on our machine,

21
00:01:20.300 --> 00:01:22.150
we didn't deploy it but
we wrote a lambda there.

22
00:01:22.150 --> 00:01:26.391
Now I'm going to show you what you would
have to do if you didn't have serverless

23
00:01:26.391 --> 00:01:30.390
framework, and how when lambda first
came out what you basically did.

24
00:01:30.390 --> 00:01:33.610
So you can see right here I
only have one lambda here for

25
00:01:33.610 --> 00:01:35.790
this region in Northern California.

26
00:01:35.790 --> 00:01:36.540
Here's the one lambda.

27
00:01:36.540 --> 00:01:40.789
I already redeployed this lambda,
it's the Service Developer API.

28
00:01:40.789 --> 00:01:44.530
If I click on it,
you get this nice console.

29
00:01:44.530 --> 00:01:46.220
Again, this looks way
better than it used to be.

30
00:01:46.220 --> 00:01:48.760
It used to be so
bad I would never look in here, but

31
00:01:48.760 --> 00:01:50.110
it's definitely a lot better now.

32
00:01:51.230 --> 00:01:56.033
So the important things I wanna talk about
is kinda what's matching up with our

33
00:01:56.033 --> 00:01:59.111
serverless file and
different things like that.

34
00:02:01.362 --> 00:02:02.716
&gt;&gt; Scott: Don't worry about
the API gateway stuff,

35
00:02:02.716 --> 00:02:04.020
we'll get there in a minute.

36
00:02:04.020 --> 00:02:07.160
But the important thing
to notice here is that

37
00:02:08.440 --> 00:02:13.480
when you go from local to AWS, the service
framework does a lot of things for

38
00:02:13.480 --> 00:02:16.060
you, and we'll get into those things
when we talk about deployment.

39
00:02:16.060 --> 00:02:18.596
But I just want to give you some context
just in case as I'm scrolling you're going

40
00:02:18.596 --> 00:02:21.080
to see some stuff like,
we didn't set any of that up.

41
00:02:21.080 --> 00:02:23.180
We didn't set up CloudWatch logs or
API gateway.

42
00:02:23.180 --> 00:02:24.210
That's fine, we'll get into that for

43
00:02:24.210 --> 00:02:27.010
deployment, but
we don't really have to do a lot of that.

44
00:02:27.010 --> 00:02:28.890
Serverless is gonna do that for us.

45
00:02:28.890 --> 00:02:32.410
But the thing that I wanted to
talk about is a few things.

46
00:02:32.410 --> 00:02:38.334
One, if you check out the runtime
with the lambda it says 8.10.

47
00:02:38.334 --> 00:02:42.374
If you go look at the Serverless YML you
notice that it's the same runtime that we

48
00:02:42.374 --> 00:02:46.550
put here, so it's doing a lot of
that stuff for us in the background.

49
00:02:46.550 --> 00:02:52.160
But the important thing that I really
wanna talk about are these events.

50
00:02:52.160 --> 00:02:54.580
So at the top, if you click on Test,

51
00:02:56.220 --> 00:03:01.100
you will get this drop-down that says
Event Template, and it says Hello World.

52
00:03:01.100 --> 00:03:04.150
If you just scroll
through all these events,

53
00:03:04.150 --> 00:03:08.260
these are all the events that your
lambda can subscribe to from AWS.

54
00:03:08.260 --> 00:03:10.850
It's kinda ridiculous,
I'm just gonna name a few of them.

55
00:03:10.850 --> 00:03:14.630
I mean there's literally a group
full of just Alexa events.

56
00:03:14.630 --> 00:03:18.070
So if you wanna write lambdas that
responded to Alexa smart home,

57
00:03:18.070 --> 00:03:18.829
here's all of them right here.

58
00:03:19.970 --> 00:03:23.610
And your lambda could,
I know everybody's thinking, man,

59
00:03:23.610 --> 00:03:25.100
I could do some crazy stuff.

60
00:03:25.100 --> 00:03:27.150
Yeah, I know, you really can.

61
00:03:27.150 --> 00:03:29.760
There's a lot of crazy stuff,
and that's just Alexa.

62
00:03:29.760 --> 00:03:32.150
And then you get to
the AWS specific things,

63
00:03:32.150 --> 00:03:34.690
the more practical things you're
probably doing day to day.

64
00:03:34.690 --> 00:03:37.630
This list is just growing,
as I'm scrolling it's growing.

65
00:03:37.630 --> 00:03:41.130
So some of the common one
that I find myself using,

66
00:03:41.130 --> 00:03:45.620
and a little description on those,
CloudFront AB testing.

67
00:03:45.620 --> 00:03:46.700
This is actually really cool.

68
00:03:46.700 --> 00:03:49.490
You can do a lot of things with this,
especially if you get into lambda

69
00:03:49.490 --> 00:03:53.680
on the Edge, which I can talk about later
if anyone's interested in Edge computing.

70
00:03:53.680 --> 00:03:57.380
That's really cool, and basically that
allows you to do exacting what it says,

71
00:03:57.380 --> 00:03:58.108
AB testing.

72
00:03:58.108 --> 00:04:02.450
CloudFront is AWS's CDN,
so it's an Edge network.

73
00:04:02.450 --> 00:04:06.280
And this allows you to do AB
testing on the Edge using a lambda.

74
00:04:06.280 --> 00:04:09.860
So now you can write functions that exist
on the Edge nearest to your customers,

75
00:04:09.860 --> 00:04:11.530
which is ridiculous.

76
00:04:11.530 --> 00:04:17.810
And they keep expanding the parameters for
those functions.

77
00:04:17.810 --> 00:04:19.550
Those functions used to be
very minimum resources,

78
00:04:19.550 --> 00:04:21.810
now they're actually very
intensive in resources.

79
00:04:21.810 --> 00:04:23.922
You can connect to databases
on the Edge if you wanted to,

80
00:04:23.922 --> 00:04:25.870
which before you couldn't have done that.

81
00:04:25.870 --> 00:04:29.415
So you can imagine the possibilities
there, it's kind of ridiculous,

82
00:04:29.415 --> 00:04:31.749
you don't even need
an origin server anymore.

83
00:04:31.749 --> 00:04:35.389
Another good one that I use a lot and
that we'll be using here,

84
00:04:35.389 --> 00:04:40.310
is gonna be AWS gateway, AWS proxy,
whcih we're gonna be talking about next.

85
00:04:40.310 --> 00:04:43.119
This is basically saying
you wanna create an API and

86
00:04:43.119 --> 00:04:46.789
have the lambdas be the things that
respond to your API basically.

87
00:04:46.789 --> 00:04:50.250
They're like the controllers for your API,
we we'll be talking more about that.

88
00:04:50.250 --> 00:04:52.749
That's probably the most
heavily used one for

89
00:04:52.749 --> 00:04:55.064
sure cuz it's literally creating an API.

90
00:04:56.811 --> 00:05:00.578
&gt;&gt; Scott: SES email receiving, this one's
really cool because you can basically,

91
00:05:00.578 --> 00:05:04.819
if you use SES, simple email service, with
AWS and you have all your emails coming in

92
00:05:04.819 --> 00:05:07.790
through there,
you can have a lambda subscribed to that.

93
00:05:07.790 --> 00:05:10.480
So whenever you get an email,
you can do something.

94
00:05:10.480 --> 00:05:11.910
Now imagine the possibilities there.

95
00:05:11.910 --> 00:05:14.250
I mean, there's literally,
you can do so much stuff with that.

96
00:05:14.250 --> 00:05:17.130
I just got an email from somebody,
run this lambda function, and

97
00:05:17.130 --> 00:05:20.930
that lambda functions gets the email
as a payload with all the context, and

98
00:05:20.930 --> 00:05:21.890
all the good stuff on it.

99
00:05:21.890 --> 00:05:25.680
So there's some pretty crazy
things you can do there.

100
00:05:25.680 --> 00:05:30.470
We're using it for things like if someone
sends an email to our support, our

101
00:05:30.470 --> 00:05:33.960
technical support, we automatically open
up an issue on GitHub with that person.

102
00:05:33.960 --> 00:05:35.810
And when it gets closed,

103
00:05:35.810 --> 00:05:38.420
that sends another lambda to email
them that the issue got closed.

104
00:05:38.420 --> 00:05:42.560
So it's automatic resolutional issues
with us without us having to do anything,

105
00:05:42.560 --> 00:05:44.030
and that's all lambdas.

106
00:05:44.030 --> 00:05:45.293
It's costing us pennies a year.

107
00:05:47.878 --> 00:05:49.500
&gt;&gt; Scott: CloudWatch
logs is another good one.

108
00:05:49.500 --> 00:05:52.300
Basically it's subscribing
to logs from CloudWatch.

109
00:05:52.300 --> 00:05:55.526
Really good for
picking things off a stream.

110
00:05:55.526 --> 00:06:00.249
If you have a constant stream of events
through CloudFront or anything that you're

111
00:06:00.249 --> 00:06:04.363
loged into, you can pick those off and
send them through some pipeline or

112
00:06:04.363 --> 00:06:08.470
some ETL service or
some data warehouse for processing later.

113
00:06:08.470 --> 00:06:12.646
Really good source, we use it for keeping
track of API calls and things like that.

114
00:06:14.269 --> 00:06:20.490
&gt;&gt; Scott: And then another good one is,
&gt;&gt; Scott: S3, yeah, S3 put and delete.

115
00:06:20.490 --> 00:06:23.380
This one's really cool because
you can basically can respond to

116
00:06:23.380 --> 00:06:24.230
events inside of S3.

117
00:06:24.230 --> 00:06:26.130
So if you've never used S3 before,

118
00:06:26.130 --> 00:06:31.750
it's basically just Amazon's
file system in the cloud, right.

119
00:06:31.750 --> 00:06:35.280
You can upload assets to it,
and it's everywhere.

120
00:06:35.280 --> 00:06:36.000
So that's S3.

121
00:06:36.000 --> 00:06:38.840
Now you can subscribe to
those events on those files.

122
00:06:38.840 --> 00:06:43.020
So if I have a folder of files and
someone adds a file to it,

123
00:06:43.020 --> 00:06:46.580
like a user uploaded an image,
I can now run a lambda function, right.

124
00:06:46.580 --> 00:06:48.730
So I can grab that image and

125
00:06:48.730 --> 00:06:53.310
resize it, or pre-process it, or
abstract it, or crop it, things like that.

126
00:06:53.310 --> 00:06:54.630
And vice versa, if they delete it,

127
00:06:54.630 --> 00:06:58.910
I can also do different things, like go
clear the cache or something like that.

128
00:06:58.910 --> 00:07:01.080
So that's really powerful,
to do things like that.

129
00:07:02.700 --> 00:07:05.480
And again,
those are some of the ones that I use.

130
00:07:05.480 --> 00:07:07.990
I think we use a lot more here,
we're experimenting with a lot of stuff.

131
00:07:07.990 --> 00:07:10.720
And again, it just keeps going on and
on and on.

132
00:07:10.720 --> 00:07:15.370
I don't even know what this lec stuff is,
I've never even heard of this.

133
00:07:15.370 --> 00:07:18.996
Book a car, book a hotel,
I don't even know what that is but

134
00:07:18.996 --> 00:07:20.534
it sounds interesting.

135
00:07:20.534 --> 00:07:23.973
So, [LAUGH] if you wanna run
a lambda whenever you book a hotel,

136
00:07:23.973 --> 00:07:25.906
this is where you would do it.

137
00:07:25.906 --> 00:07:29.670
So, if anybody ever looks that up, you
let me know what that is, that's awesome.

