WEBVTT

1
00:00:00.002 --> 00:00:00.577
&gt;&gt; Scott Moss: Okay.

2
00:00:00.577 --> 00:00:01.106
&gt;&gt; Speaker 2: I have a quick question.

3
00:00:01.106 --> 00:00:02.202
&gt;&gt; Scott Moss: Yeah, what's up?

4
00:00:02.202 --> 00:00:04.386
&gt;&gt; Speaker 2: In the repo.

5
00:00:04.386 --> 00:00:04.990
&gt;&gt; Scott Moss: Yeah.

6
00:00:04.990 --> 00:00:07.100
&gt;&gt; Speaker 2: I just cloned
it with the serverless yaml,

7
00:00:07.100 --> 00:00:08.080
looks a little bit different.

8
00:00:08.080 --> 00:00:09.950
&gt;&gt; Scott Moss: Yes,
let's take a look at that.

9
00:00:09.950 --> 00:00:12.792
&gt;&gt; Speaker 2: Cuz there's no
functions in that yaml file.

10
00:00:12.792 --> 00:00:15.299
&gt;&gt; Scott Moss: Yeah,
cuz you'll be making them.

11
00:00:15.299 --> 00:00:17.805
&gt;&gt; Speaker 2: Gotcha.
&gt;&gt; Scott Moss: [LAUGH] That's what you're

12
00:00:17.805 --> 00:00:19.310
going to be doing.

13
00:00:19.310 --> 00:00:19.960
Yeah.

14
00:00:19.960 --> 00:00:24.224
Yeah, so let's look at that one,
let's look at the yaml file in your repo,

15
00:00:24.224 --> 00:00:25.760
and let's just talk about
the differences here.

16
00:00:25.760 --> 00:00:28.970
So we have this service,
I just called it the serverless, for

17
00:00:28.970 --> 00:00:32.140
the provider,
we talked about just the name, aws.

18
00:00:32.140 --> 00:00:32.900
For profile,

19
00:00:32.900 --> 00:00:37.840
this is the name of my aws profile, that
my credentials are sort of my computer.

20
00:00:37.840 --> 00:00:41.870
If you don't have aws profile and
you just set it to default,

21
00:00:41.870 --> 00:00:45.090
or if you're exporting through a batch
profile, then you don't need this.

22
00:00:45.090 --> 00:00:46.590
You can just get rid of that.

23
00:00:46.590 --> 00:00:50.240
In fact, I'm almost positive no
one here has an aws profile called

24
00:00:50.240 --> 00:00:51.250
frontend masters.

25
00:00:51.250 --> 00:00:53.290
So you can just comment that out.

26
00:00:53.290 --> 00:00:54.980
This only matters when
we go deploy things, so

27
00:00:54.980 --> 00:00:56.570
it's not that big of
a deal in this lesson.

28
00:00:56.570 --> 00:00:59.450
This is only going come down to
when we actually deploy something.

29
00:00:59.450 --> 00:01:01.470
This is for aws permissions.

30
00:01:01.470 --> 00:01:03.690
And then, again, these are also for aws.

31
00:01:03.690 --> 00:01:05.770
What region do you want to deploy to?

32
00:01:05.770 --> 00:01:06.600
And what stage?

33
00:01:06.600 --> 00:01:10.030
And we'll talk about stages
when we deploy in a minute.

34
00:01:10.030 --> 00:01:11.440
But don't worry about that right now.

35
00:01:11.440 --> 00:01:14.960
And then plugins is exactly
what it sounds like.

36
00:01:14.960 --> 00:01:18.450
We're telling AWS what
plugins we want to use.

37
00:01:18.450 --> 00:01:21.010
We're gonna talk about
the serverless-offline plugin when we do

38
00:01:21.010 --> 00:01:22.290
the API lesson.

39
00:01:22.290 --> 00:01:25.694
Right now it doesn't matter,
but that's where you put that.

40
00:01:25.694 --> 00:01:28.830
So yeah, for you, to answer your question,
yeah, you would come down here and

41
00:01:28.830 --> 00:01:31.570
you would have to register some functions,
and you would have to get them to work.

42
00:01:33.030 --> 00:01:35.990
So speaking of,
that's what you're gonna do.

43
00:01:35.990 --> 00:01:38.588
If you look in the source folder,
there's two files in here.

44
00:01:38.588 --> 00:01:43.690
There's a helloworld that has a function
that has being exported on a handler.

45
00:01:43.690 --> 00:01:46.890
It's got and event, context and then done.

46
00:01:46.890 --> 00:01:51.281
I mean you can call these whatever you
want, but the order is always gonna be

47
00:01:51.281 --> 00:01:54.711
an event first, followed by context,
followed by done.

48
00:01:54.711 --> 00:01:57.308
Then you have this even.json.

49
00:01:57.308 --> 00:02:02.677
So I'm gonnao walk you through why this
is here and what you can do with it.

50
00:02:02.677 --> 00:02:06.061
So we already talked about the starter
argument, which is basically the callback

51
00:02:06.061 --> 00:02:09.262
that follows the node style pattern of
error first and then response second.

52
00:02:09.262 --> 00:02:12.718
So whenever you're done inside this
handler, you will call done, and

53
00:02:12.718 --> 00:02:15.600
you will send back to
response that you want.

54
00:02:15.600 --> 00:02:17.750
The second argument here, context.

55
00:02:17.750 --> 00:02:22.770
This is basically meta information about
the execution context of your lander.

56
00:02:22.770 --> 00:02:26.640
So locally,
there literally won't be anything there,

57
00:02:26.640 --> 00:02:27.720
unless you pass something there.

58
00:02:27.720 --> 00:02:30.811
But when you run this on AWS or
if you run this with serverless offline,

59
00:02:30.811 --> 00:02:34.750
there's going to be some context around
what stage you're on, what was the ARN?

60
00:02:34.750 --> 00:02:36.890
Who is the IM user?

61
00:02:36.890 --> 00:02:39.830
Just tons of context about
the execution of that

62
00:02:39.830 --> 00:02:41.730
function that will help you do things.

63
00:02:41.730 --> 00:02:45.120
So that's more for
advanced cases, but very useful.

64
00:02:45.120 --> 00:02:48.140
And then the event is actually
what was the pay load.

65
00:02:48.140 --> 00:02:51.760
You can think of the event as like,
if you were doing a request to your API,

66
00:02:51.760 --> 00:02:53.250
what did you pass to the body?

67
00:02:53.250 --> 00:02:56.863
That's what the event is, it's whatever
the payload that was sent to this Lambda,

68
00:02:56.863 --> 00:02:58.730
and it's always gonna be that.

69
00:02:58.730 --> 00:03:03.370
And depending on what event that
your Lambda subscribes to in AWS,

70
00:03:03.370 --> 00:03:06.860
this event object is gonna
look completely different.

71
00:03:06.860 --> 00:03:09.910
If you're subscribing to an API
event compared to some other event,

72
00:03:09.910 --> 00:03:10.930
it's gonna look completely different.

73
00:03:12.070 --> 00:03:13.760
So those are your three arguments.

74
00:03:13.760 --> 00:03:18.770
So what you're gonna do is you're gonna
find a way to get this helloworld function

75
00:03:18.770 --> 00:03:20.490
to actually work.

76
00:03:21.500 --> 00:03:25.840
And so you can actually execute it on
the command line using sls, invoke, local.

77
00:03:25.840 --> 00:03:28.810
So you want to be able to
invoke that function local.

78
00:03:28.810 --> 00:03:34.010
And the reason this event.json is here,
because if you look at sls or

79
00:03:34.010 --> 00:03:39.120
serverless, and you type in invoke, and
you type in help, you'll see that there's

80
00:03:40.850 --> 00:03:44.680
a flag that you can pass in called path.

81
00:03:44.680 --> 00:03:47.700
And you can get a path to a JSON or
YAML file.

82
00:03:47.700 --> 00:03:51.650
And it will take that JSON file, and
it will pass it as an input to the Lambda.

83
00:03:51.650 --> 00:03:55.055
So that's why have this event.json.

84
00:03:55.055 --> 00:03:59.262
So you can use that as a file to patch
in as an input to this Lamda, so

85
00:03:59.262 --> 00:04:02.568
you can see what that event
object would look like.

86
00:04:02.568 --> 00:04:05.190
So you can actually see
what's actually happening.

87
00:04:05.190 --> 00:04:10.582
So again, there's a flag that
you can use on the serverless.

88
00:04:10.582 --> 00:04:14.230
You give it a path to a file, and
it will grab the data in that file and

89
00:04:14.230 --> 00:04:17.375
pass it as the first argument
in your Lambda as the event.

90
00:04:17.375 --> 00:04:19.505
So use that, get a Hello World going,

91
00:04:19.505 --> 00:04:23.380
and then once you get back make another
one and see whether you can do it

