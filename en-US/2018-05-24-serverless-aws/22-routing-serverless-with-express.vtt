WEBVTT

1
00:00:00.130 --> 00:00:04.040
&gt;&gt; Scott Moss: A few things we need to
clean up is, one, what we'll have to do

2
00:00:04.040 --> 00:00:10.570
is, we'll have to like I say consolidate
our function so what we'll do next is,

3
00:00:10.570 --> 00:00:12.470
I'm not going to delete anything because
I'm going to leave that up to you.

4
00:00:12.470 --> 00:00:16.285
I'm just going to make
another function here.

5
00:00:16.285 --> 00:00:20.970
And I'm going to call this one God,
API's already taken.

6
00:00:20.970 --> 00:00:21.696
It's such a good name.

7
00:00:21.696 --> 00:00:27.450
[LAUGH] I don't want to rename it
because then it gets confusing.

8
00:00:27.450 --> 00:00:28.750
You know what?

9
00:00:28.750 --> 00:00:31.403
I'm just gonna reuse this API1.

10
00:00:31.403 --> 00:00:33.160
So I'm gonna reuse this API1.

11
00:00:33.160 --> 00:00:37.025
And then, for its HTTP event,

12
00:00:37.025 --> 00:00:42.959
I'm just gonna put
&gt;&gt; Scott Moss: Any,

13
00:00:42.959 --> 00:00:50.400
which basically means any verb, so get,
post, put, delete, whatever, to this path.

14
00:00:50.400 --> 00:00:53.040
So any verb to this path,
that's the short hand method.

15
00:00:53.040 --> 00:00:54.600
So I wanna do that.

16
00:00:54.600 --> 00:01:03.386
Also want to be able to proxy to any
&gt;&gt; Scott Moss: Thing you might put here,

17
00:01:03.386 --> 00:01:06.009
and then I'll put this plus,
which basically means,

18
00:01:06.009 --> 00:01:08.240
I've gotta wrap this in the string.

19
00:01:08.240 --> 00:01:13.730
This is saying,
any verb to root/ whatever this is,

20
00:01:13.730 --> 00:01:15.680
it can be anything,
that's what this is saying.

21
00:01:15.680 --> 00:01:18.190
So it doesn't matter
what's coming after here.

22
00:01:18.190 --> 00:01:22.720
It can be as many slashes,
just redirect all that.

23
00:01:22.720 --> 00:01:30.548
I'll put this in a string because
the reason a combination of this syntax,

24
00:01:30.548 --> 00:01:34.540
like a verb and a template thing here.

25
00:01:34.540 --> 00:01:38.105
So you gotta wrap it in a string.
&gt;&gt; Scott Moss: I think that's just

26
00:01:38.105 --> 00:01:38.620
a YAML thing.

27
00:01:40.100 --> 00:01:44.040
So this is just saying, this api function
is not going to respond to anything coming

28
00:01:44.040 --> 00:01:45.800
in here and anything coming in here.

29
00:01:47.220 --> 00:01:54.300
So I can just kinda comment these out.
&gt;&gt; Scott Moss: And let's test this.

30
00:01:54.300 --> 00:01:58.552
So I go to api,
looks like it's sending back hello, so

31
00:01:58.552 --> 00:02:03.836
let me stop that.
&gt;&gt; Scott Moss: And I'm gonna do yarn

32
00:02:03.836 --> 00:02:08.801
dev.
&gt;&gt; Scott Moss: Serverless.yml,

33
00:02:08.801 --> 00:02:11.230
I think I gotta check out to
the new branch, actually.

34
00:02:11.230 --> 00:02:12.944
git co lesson-3, yeah,

35
00:02:12.944 --> 00:02:18.300
check out to the new branch.
&gt;&gt; Scott Moss: Let me copy this stuff.

36
00:02:19.330 --> 00:02:25.719
Copy the goods.
&gt;&gt; Scott Moss: Let me

37
00:02:25.719 --> 00:02:33.032
check it out.
&gt;&gt; Scott Moss: Right

38
00:02:33.032 --> 00:02:37.504
here.
&gt;&gt; Scott Moss: Okay.

39
00:02:41.268 --> 00:02:41.792
&gt;&gt; Scott Moss: All right, so

40
00:02:41.792 --> 00:02:42.760
now that we've got that.

41
00:02:44.270 --> 00:02:49.953
Yeah, this one was down here.
&gt;&gt; Scott Moss: Cool,

42
00:02:49.953 --> 00:02:52.088
so now we're gonna run dev and

43
00:02:52.088 --> 00:02:57.620
hopefully that doesn't break.
&gt;&gt; Scott Moss: There we go.

44
00:02:57.620 --> 00:03:01.390
All right, so you can see right now
we've got routes for API, ANY / and

45
00:03:01.390 --> 00:03:03.360
then param everything.

46
00:03:04.930 --> 00:03:06.340
So let's test this out.

47
00:03:06.340 --> 00:03:11.664
If I go to http :4500 /

48
00:03:11.664 --> 00:03:17.740
hey/there.
&gt;&gt; Scott Moss: Looks like it's working.

49
00:03:17.740 --> 00:03:20.190
I definitely didn't make that route.

50
00:03:20.190 --> 00:03:25.410
So looks like it's going there.
&gt;&gt; Scott Moss: Perfect.

51
00:03:25.410 --> 00:03:26.880
So our proxying is working fine.

52
00:03:26.880 --> 00:03:28.430
So it looks like we're
forwarding everything.

53
00:03:28.430 --> 00:03:32.920
And just to double check, let's issue
a different method like post here.

54
00:03:32.920 --> 00:03:33.640
See if that works.

55
00:03:33.640 --> 00:03:34.386
Yep, that works, too.

56
00:03:34.386 --> 00:03:43.730
What about, PUT
&gt;&gt; Scott Moss: Any questions on that?

57
00:03:43.730 --> 00:03:44.721
How to set that up.

58
00:03:44.721 --> 00:03:47.471
Again most of the stuff
is in the service docs,

59
00:03:47.471 --> 00:03:53.323
all this is a service.
&gt;&gt; Scott Moss: Pretty simple, right?

60
00:03:53.323 --> 00:03:58.329
The next thing we're gonna do
is we need to find a way to

61
00:03:58.329 --> 00:04:03.169
do some routing in here.
&gt;&gt; Scott Moss: Yeah,

62
00:04:03.169 --> 00:04:05.260
you could just look at the event object,
right?

63
00:04:05.260 --> 00:04:06.910
And just look at the path parameters, and

64
00:04:06.910 --> 00:04:12.440
you can set up your own state
machine that you use for a router.

65
00:04:12.440 --> 00:04:13.460
I mean, it's pretty simple.

66
00:04:13.460 --> 00:04:16.521
You could just have keys
in here that are like

67
00:04:16.521 --> 00:04:20.291
this/route.
&gt;&gt; Scott Moss: And

68
00:04:20.291 --> 00:04:22.910
then run this method
which is the controller.

69
00:04:22.910 --> 00:04:28.120
So, there's a couple things you can
do here but that's kind of garbage.

70
00:04:28.120 --> 00:04:31.320
[LAUGH] So, you probably wanna
use like a regular router.

71
00:04:31.320 --> 00:04:33.860
Or I'm sorry, you wanna use a router
that's already got some features built

72
00:04:33.860 --> 00:04:35.660
into it like express.

73
00:04:35.660 --> 00:04:36.860
So that's what we wanna do.

74
00:04:36.860 --> 00:04:38.520
So there's a couple of
packages we wanna use.

75
00:04:38.520 --> 00:04:43.100
And you could look in the packets.json.

76
00:04:43.100 --> 00:04:43.990
There's one.

77
00:04:43.990 --> 00:04:45.170
Obviously there's express.

78
00:04:45.170 --> 00:04:48.310
And then there's this serverless HTTP.

79
00:04:48.310 --> 00:04:51.910
So those are the two packages we're gonna
be using to create our express server.

80
00:04:51.910 --> 00:04:56.425
So first thing first is what
we'll do Is we'll just say

81
00:04:56.425 --> 00:04:59.283
express equals require express.

82
00:04:59.283 --> 00:05:02.068
And who here has used express?

83
00:05:02.068 --> 00:05:05.752
Okay, so if you haven't used express
it's so easy like you won't,

84
00:05:05.752 --> 00:05:09.767
you don't need to learn it, just watch
what I'm doing and ask questions.

85
00:05:09.767 --> 00:05:16.696
And then we'll have this server,
I'm just gonna call it HTTP.

86
00:05:23.322 --> 00:05:25.588
&gt;&gt; Scott Moss: Cool, so now we got that,

87
00:05:25.588 --> 00:05:30.360
and what we can do now is,
we can make an express app.

88
00:05:30.360 --> 00:05:37.569
So let's just say, app = express
&gt;&gt; Scott Moss: And

89
00:05:37.569 --> 00:05:41.330
then we'll make some routes,
app.get/ just this route.

90
00:05:42.650 --> 00:05:47.840
And we'll just register a handler here,
so request response.

91
00:05:49.430 --> 00:05:53.714
And we'll just do a response.json that

92
00:05:53.714 --> 00:05:57.124
says
&gt;&gt; Scott Moss: Okay, so

93
00:05:57.124 --> 00:06:01.184
we'll do that.
&gt;&gt; Scott Moss: But

94
00:06:01.184 --> 00:06:07.480
this isn't going to work because http kind
of like, http creates this handler for us.

95
00:06:07.480 --> 00:06:09.330
So cuz right now it's like okay cool.

96
00:06:09.330 --> 00:06:12.470
I got this route but
like what do I do with this stuff, right?

97
00:06:12.470 --> 00:06:14.810
So what you're gonna do is you're
gonna take this out of the handler.

98
00:06:14.810 --> 00:06:17.470
You're gonna get rid of all of this.

99
00:06:17.470 --> 00:06:21.779
And instead,
there's gonna make your app appear in this

100
00:06:21.779 --> 00:06:26.408
closure.
&gt;&gt; Scott Moss: And

101
00:06:26.408 --> 00:06:30.070
then now, all you're gonna export
is HTTP wrapping your app.

102
00:06:30.070 --> 00:06:31.380
And then that's it.

103
00:06:32.430 --> 00:06:36.110
Now, you have an express app On service.

104
00:06:36.110 --> 00:06:37.300
A service express app.

105
00:06:37.300 --> 00:06:41.107
So if you have express like this is
literally the easiest transition to

106
00:06:41.107 --> 00:06:41.640
Alanda.

107
00:06:41.640 --> 00:06:42.970
It's pretty ridiculous.

108
00:06:42.970 --> 00:06:43.810
So let's test this.

109
00:06:45.440 --> 00:06:46.270
Maybe I didn't do it right.

110
00:06:46.270 --> 00:06:51.127
But let's see.
&gt;&gt; Scott Moss: Cool, so

111
00:06:51.127 --> 00:06:53.460
it looks like it's still starting.

112
00:06:53.460 --> 00:06:55.370
I registered a route for route.

113
00:06:55.370 --> 00:06:56.860
So let's check that out.

114
00:06:56.860 --> 00:07:00.719
It was a git request.

115
00:07:00.719 --> 00:07:04.480
So, 4500, git, message okay.

116
00:07:04.480 --> 00:07:05.300
Looks like it's good.

117
00:07:05.300 --> 00:07:09.470
Let's test out these other ones,
like a PUT, boom can't do that,

118
00:07:09.470 --> 00:07:11.020
because I didn't register
that with express.

119
00:07:11.020 --> 00:07:14.160
So, server has proxied it correctly.

120
00:07:14.160 --> 00:07:18.390
But then Express was like,
no, can't do that, so

121
00:07:18.390 --> 00:07:21.440
it didn't really work out,
so pretty simple.

122
00:07:21.440 --> 00:07:25.240
So now, at this point, you're really just
doing everything that Express can do,

123
00:07:25.240 --> 00:07:28.120
without having to start
a server on some port, right,

124
00:07:28.120 --> 00:07:30.360
cuz you're just a service function.

125
00:07:30.360 --> 00:07:36.160
And it's stateless, so this is only gonna
happen per request, so it's pretty cool.

126
00:07:38.010 --> 00:07:39.809
Any questions on this?

127
00:07:39.809 --> 00:07:46.576
Yes.
&gt;&gt; Speaker 2: So as an Express programmer,

128
00:07:46.576 --> 00:07:51.035
basically you have,
when I think about this code

129
00:07:51.035 --> 00:07:56.040
running on a standalone server,
there's an instance

130
00:07:56.040 --> 00:08:00.480
of Express listening at all times.
&gt;&gt; Scott Moss: Yep.

131
00:08:00.480 --> 00:08:02.400
&gt;&gt; Speaker 2: How does that reconcile,

132
00:08:02.400 --> 00:08:04.750
maybe it's just my brain that's
not working through this.

133
00:08:04.750 --> 00:08:09.030
How does that reconcile with idea
of Alanda which does its job and

134
00:08:09.030 --> 00:08:11.480
then shuts down?
&gt;&gt; Scott Moss: Yeah, okay, so

135
00:08:11.480 --> 00:08:13.240
there's two parts to the express route,
right?

136
00:08:13.240 --> 00:08:17.550
You have the routing and the controllers
in the middleware, that's the framework.

137
00:08:17.550 --> 00:08:21.730
And then you have the networking side
of it, which is actually the server.

138
00:08:21.730 --> 00:08:23.940
Just think of Express without the server.

139
00:08:23.940 --> 00:08:27.320
That whole part that's always
on that's list thing, it's gone.

140
00:08:27.320 --> 00:08:32.729
Because in Express, when you do
something like what is it, app.

141
00:08:34.030 --> 00:08:36.180
Listen?
&gt;&gt; Speaker 2: Yeah, but you didn't do that

142
00:08:36.180 --> 00:08:37.899
cuz you have that in HTTP.
&gt;&gt; Scott Moss: Right,

143
00:08:37.899 --> 00:08:39.520
that's what's doing it.
&gt;&gt; Speaker 2: That makes better

144
00:08:39.520 --> 00:08:40.080
sense.
&gt;&gt; Scott Moss: Yeah.

145
00:08:40.080 --> 00:08:40.710
&gt;&gt; Speaker 2: Okay.

146
00:08:40.710 --> 00:08:42.360
&gt;&gt; Scott Moss: Because express built in

147
00:08:42.360 --> 00:08:45.190
actually uses the native
HTTP method in node.

148
00:08:45.190 --> 00:08:47.790
So when you it call listen,
it's actually just starting,

149
00:08:47.790 --> 00:08:51.280
it's doing http.createserver,
whereas this, it's kinda proxying that.

150
00:08:51.280 --> 00:08:55.470
It's poly-filling, it's satisfying
whatever Express needs, but

151
00:08:55.470 --> 00:08:57.010
it's not actually functional.

152
00:08:57.010 --> 00:08:59.704
It's really actually providing functional.

153
00:08:59.704 --> 00:09:01.370
I mean,
this is just returning a function, right?

154
00:09:01.370 --> 00:09:02.640
So we could look at this.

155
00:09:02.640 --> 00:09:04.640
Let's just look at it so
maybe that'll make more sense.

156
00:09:06.110 --> 00:09:09.810
So, man, this keyboard is so sticky.

157
00:09:09.810 --> 00:09:10.350
Let's do this.

158
00:09:14.130 --> 00:09:19.989
So that's the handler,
&gt;&gt; Scott Moss: Right,

159
00:09:19.989 --> 00:09:23.328
so this is just gonna return
the function and in fact we'll do this.

160
00:09:32.801 --> 00:09:33.412
&gt;&gt; Scott Moss: My god

161
00:09:43.099 --> 00:09:43.620
&gt;&gt; Scott Moss: Actually,

162
00:09:43.620 --> 00:09:45.500
let me clean this up, it's bothering me.

163
00:09:46.660 --> 00:09:47.610
There you go.

164
00:09:47.610 --> 00:09:50.902
Okay, so yeah,
this is gonna return a function and

165
00:09:50.902 --> 00:09:53.056
we can see what this function is.

166
00:10:00.793 --> 00:10:03.042
&gt;&gt; Scott Moss: We'll just execute that,

167
00:10:03.042 --> 00:10:04.220
go back here.

168
00:10:06.470 --> 00:10:08.010
It's just gonna say function.

169
00:10:08.010 --> 00:10:11.510
Let me do, I can do that, I don't know
why I thought that was gonna do something

170
00:10:11.510 --> 00:10:20.320
different.
&gt;&gt; Scott Moss: There we go.

171
00:10:20.320 --> 00:10:20.820
Cool.

