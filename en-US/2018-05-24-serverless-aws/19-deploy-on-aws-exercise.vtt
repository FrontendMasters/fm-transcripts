WEBVTT

1
00:00:00.020 --> 00:00:01.600
&gt;&gt; Scott Moss: So if you haven't already,

2
00:00:01.600 --> 00:00:04.708
what you're gonna be doing is you're
gonna be deploying your stack.

3
00:00:04.708 --> 00:00:10.050
So everybody knows
the command to deploy right?

4
00:00:10.050 --> 00:00:11.096
It's deploy.

5
00:00:11.096 --> 00:00:16.020
So [LAUGH] what I want you to do is to
deploy it and then I want to see if,

6
00:00:16.020 --> 00:00:19.290
check and
see if you can actually access your API.

7
00:00:19.290 --> 00:00:23.400
Try to access it through curl, and
then try to access it in a browser, and

8
00:00:23.400 --> 00:00:24.280
see if it actually works.

9
00:00:25.530 --> 00:00:28.810
So some of you it might fail on
the browser, for others it might not, and

10
00:00:28.810 --> 00:00:30.030
I wanna know if people know why.

11
00:00:31.460 --> 00:00:35.260
In curl it should probably always pass but
in a browser it could possibly fails.

12
00:00:35.260 --> 00:00:40.110
So check that out and if you do,
use your debugging powers that I just

13
00:00:40.110 --> 00:00:44.730
taught you about,
by looking at the logs inside of cloud.

14
00:00:44.730 --> 00:00:47.860
My God, which one is it?

15
00:00:47.860 --> 00:00:50.122
There's so many clouds.

16
00:00:50.122 --> 00:00:53.520
Cloud, Cloud, my God, okay.

17
00:00:54.740 --> 00:00:55.240
Okay, let's go back.

18
00:00:58.048 --> 00:01:02.629
&gt;&gt; Scott Moss: It's gotta be, I wanna say
Cloud trail but like, like there is so

19
00:01:02.629 --> 00:01:03.830
many clouds.

20
00:01:03.830 --> 00:01:06.230
Cloud watch, okay, wow.

21
00:01:07.790 --> 00:01:12.500
Cloud watch, yes, if you've got
a Cloud watch, then you click on logs.

22
00:01:12.500 --> 00:01:16.510
Then you click on your function and then
you'll see logs like as I have right here.

23
00:01:16.510 --> 00:01:21.360
So if I click on this I can see all the
logs that were executed, and basically,

24
00:01:21.360 --> 00:01:24.120
these logs are just like,
these aren't logs that I logged.

25
00:01:24.120 --> 00:01:29.360
These are just an Amazon login that
a request was started and then a request

26
00:01:29.360 --> 00:01:33.218
ended, that's all these logs are, and
then, it will tell you how long it took.

27
00:01:33.218 --> 00:01:36.190
This was 12.3 milliseconds.

28
00:01:36.190 --> 00:01:40.280
Billed Duration, the minimum like I
said is always 100 milliseconds and

29
00:01:40.280 --> 00:01:41.300
this is your memory.

30
00:01:41.300 --> 00:01:45.350
So then yeah, that's how you know
how much their charging you.

31
00:01:45.350 --> 00:01:49.290
So then you go write another lambda
that's subscribe to this log and

32
00:01:49.290 --> 00:01:50.540
then counts it for you.

33
00:01:50.540 --> 00:01:53.360
So when Amazon tries to overcharge you,
you can like no,

34
00:01:53.360 --> 00:01:56.154
I've been counting all of these and
in fact, I don't owe you that much money.

35
00:01:56.154 --> 00:02:00.400
So just read that somebody did that and

36
00:02:00.400 --> 00:02:03.280
they got a lot of,
Amazon had to get the money back.

37
00:02:03.280 --> 00:02:05.550
So I thought it was really funny.

38
00:02:05.550 --> 00:02:06.960
I was like, wow!

39
00:02:06.960 --> 00:02:07.980
That's an overkill.

40
00:02:07.980 --> 00:02:12.080
So yeah, do that, and one last trick is
you can actually look at your logs here,

41
00:02:12.080 --> 00:02:14.550
if you type in serverless -f, and

42
00:02:14.550 --> 00:02:18.718
then you give it a function name,
you can just stream your logs here.

43
00:02:18.718 --> 00:02:23.800
So -f, the function name will be API and
this will just give you a logs

44
00:02:23.800 --> 00:02:29.150
like as is right now, but if you want
to stream them I believe you need

45
00:02:29.150 --> 00:02:34.340
to type in -t to stream them and
the logs will just come in in real time.

46
00:02:35.640 --> 00:02:36.640
So you can see them here as well.

47
00:02:39.003 --> 00:02:41.640
&gt;&gt; Scott Moss: So those are all my tricks,
that's all I got.

