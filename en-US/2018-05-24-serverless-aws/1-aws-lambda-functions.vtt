WEBVTT

1
00:00:00.120 --> 00:00:02.486
&gt;&gt; Scott Moss: So
let's just hop right into service.

2
00:00:02.486 --> 00:00:07.381
So there's this really cool website
called service.com, it's in the README.

3
00:00:07.381 --> 00:00:11.833
And basically what I wanna do is,
before we talk about serverless and

4
00:00:11.833 --> 00:00:15.450
serverless, cuz there's two serverlesses.

5
00:00:15.450 --> 00:00:18.300
I wanna talk about what lambda is, and

6
00:00:18.300 --> 00:00:22.430
what functions as a service means,
and how all that's coming together.

7
00:00:23.700 --> 00:00:26.354
So me,
I'm not really a person to do slides.

8
00:00:26.354 --> 00:00:29.210
Actually, we're gonna do slides for
this course, but then at the last minute,

9
00:00:29.210 --> 00:00:34.190
I decided to take them out, because it was
just all AWS, so I decided not to do that.

10
00:00:34.190 --> 00:00:36.820
So I wanna move away from that, and
get into more practical things.

11
00:00:36.820 --> 00:00:41.240
But short, I just wanna talk about
functions as a service and lambdas.

12
00:00:41.240 --> 00:00:46.210
So basically, functions as a service
is being able to deploy functions

13
00:00:46.210 --> 00:00:50.930
in the cloud, and then run those
functions based on some type of event.

14
00:00:50.930 --> 00:00:52.220
That's basically it.

15
00:00:52.220 --> 00:00:55.480
The difference between that, and a
traditional server where it's a long lived

16
00:00:55.480 --> 00:00:59.990
server, that's on some
port that's always on,

17
00:00:59.990 --> 00:01:04.250
that is probably listening for some HTTP
request to come in, that's the difference.

18
00:01:04.250 --> 00:01:05.700
Functions as a service,
they don't do that.

19
00:01:05.700 --> 00:01:06.756
They're not long-lived.

20
00:01:06.756 --> 00:01:10.930
They only spin up when they're subscribing
to an event and that event happens.

21
00:01:10.930 --> 00:01:11.880
And then, they shut down.

22
00:01:11.880 --> 00:01:13.210
They're stateless.

23
00:01:13.210 --> 00:01:14.670
So that's the big difference there.

24
00:01:14.670 --> 00:01:17.790
And most platforms charge
you per usage for that.

25
00:01:17.790 --> 00:01:20.000
AWS is one of the cheapest.

26
00:01:21.090 --> 00:01:26.390
And then, getting into Lambda, that's
the name of AWS's functions as as service.

27
00:01:26.390 --> 00:01:27.010
It's called lambda.

28
00:01:27.010 --> 00:01:31.304
So whenever you hear someone say lambda,
they're specifically talking about AWS's

29
00:01:31.304 --> 00:01:35.610
functions as a service, and not some
other functions on some other platform.

30
00:01:35.610 --> 00:01:39.369
And pretty much every other platform
has their own functions as a service,

31
00:01:39.369 --> 00:01:42.545
Azure functions,
Google Cloud functions through Firebase.

32
00:01:42.545 --> 00:01:45.681
Even Alt Zero has some called of web task,
you can do,

33
00:01:45.681 --> 00:01:49.257
you can even create your own
using Kubernetes if you want to.

34
00:01:49.257 --> 00:01:52.288
There's so many different platforms for
functions as a service.

35
00:01:52.288 --> 00:01:57.059
The AWS by far is the best
which we'll soon discover.

36
00:01:57.059 --> 00:01:59.251
Any questions on any of that language and

37
00:01:59.251 --> 00:02:01.780
any of the stuff that
we just talked about?

38
00:02:01.780 --> 00:02:05.733
Distinguishes between lambdas and
functions as a service, and AWS,

39
00:02:05.733 --> 00:02:10.840
that cleared some stuff for some people.
&gt;&gt; Scott Moss: Cool.

