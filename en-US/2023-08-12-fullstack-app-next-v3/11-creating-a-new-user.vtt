WEBVTT

1
00:00:00.330 --> 00:00:04.786
&gt;&gt; Scott Moss: The next thing we wanna do
is basically we want to, we have the logic

2
00:00:04.786 --> 00:00:11.320
and the middleware where if you try to go
anywhere, it's gonna force you to log in.

3
00:00:11.320 --> 00:00:16.261
But because of that web hook issue that I
told you about syncing our state with our

4
00:00:16.261 --> 00:00:18.710
users, we need to find a way to do that.

5
00:00:18.710 --> 00:00:20.750
So we're gonna do that with
a server side component.

6
00:00:20.750 --> 00:00:23.860
So the route to the componen,
it's gonna do all that syncing for us.

7
00:00:23.860 --> 00:00:25.949
That's gonna be in new user.

8
00:00:25.949 --> 00:00:30.579
However, I was having an issue
with forcing the sign up page to

9
00:00:30.579 --> 00:00:33.260
redirect to new user after signup.

10
00:00:33.260 --> 00:00:37.194
I don't think these props will work
the way they're supposed to work, but

11
00:00:37.194 --> 00:00:39.200
I do have like multiple workarounds.

12
00:00:39.200 --> 00:00:41.350
I'll explain the workarounds and
then we'll pick one.

13
00:00:41.350 --> 00:00:45.284
So one workaround is we actually don't
even have to render a signup page at all,

14
00:00:45.284 --> 00:00:48.690
because clerk has a hosted signup
page that we can use if we don't have

15
00:00:48.690 --> 00:00:50.090
this in our app.

16
00:00:50.090 --> 00:00:52.537
Basically if we just get
rid of this route and

17
00:00:52.537 --> 00:00:57.170
the middle where we're redirect to
sign in, it'll go to the hosted page.

18
00:00:57.170 --> 00:00:59.010
Which will then fix our issue most likely.

19
00:00:59.010 --> 00:01:02.740
I think that's what I had on the previous
build, which is why it was working.

20
00:01:02.740 --> 00:01:04.730
I don't really like that.

21
00:01:04.730 --> 00:01:08.215
So I think the other way we
can do it is we can just,

22
00:01:08.215 --> 00:01:13.230
we can check inside the homepage to
see if you already signed in or not.

23
00:01:13.230 --> 00:01:16.160
If you are, we'll send you to journal.

24
00:01:16.160 --> 00:01:18.882
But basically,
we'll make this age group dynamic.

25
00:01:18.882 --> 00:01:22.190
If you are already signed in,
will see your Journal.

26
00:01:22.190 --> 00:01:25.947
If you aren't signed in,
then we will send you to new user,

27
00:01:25.947 --> 00:01:31.075
which will then trigger the off to kick up
coz new user is an authenticator route.

28
00:01:31.075 --> 00:01:34.504
And then, it will ask you to sign in,
and because you went to new user,

29
00:01:34.504 --> 00:01:38.050
the redirect URL be stuck on the user and
it'll send you back to new user as

30
00:01:38.050 --> 00:01:41.159
a sign-in person this time and
then it'll do all the syncing.

31
00:01:41.159 --> 00:01:45.284
So that was a lot of explanation,
I think that's the way we're gonna do it,

32
00:01:45.284 --> 00:01:47.037
so we have more control over it.

33
00:01:47.037 --> 00:01:48.040
Hopefully it works.

34
00:01:48.040 --> 00:01:48.910
I haven't tried it yet.

35
00:01:48.910 --> 00:01:50.170
But in theory that should work.

36
00:01:50.170 --> 00:01:51.980
Yeah, if not,
we'll just do the hosted page.

37
00:01:51.980 --> 00:01:53.730
So, let's try it.

38
00:01:53.730 --> 00:01:57.430
All right, so first things first is
let's check for the user in there.

39
00:01:57.430 --> 00:01:59.570
It's actually really simple to do that.

40
00:01:59.570 --> 00:02:03.330
We can do the get, what is it called?

41
00:02:03.330 --> 00:02:05.420
Gits clerk?

42
00:02:05.420 --> 00:02:08.450
No, it's a, actually, you know what?

43
00:02:08.450 --> 00:02:10.040
I don't have to guess, it's here.

44
00:02:10.040 --> 00:02:14.310
It is actually, so they have they
have a lot of them actually.

45
00:02:14.310 --> 00:02:16.470
So they have current user, which is
the one that we probably wanna get.

46
00:02:18.080 --> 00:02:21.040
We can actually just use off two,
that's probably a better one.

47
00:02:21.040 --> 00:02:22.470
So let's do that.

48
00:02:22.470 --> 00:02:27.521
So what we'll do is we'll get auth,
so we can say,

49
00:02:27.521 --> 00:02:32.699
auth at the top here,
input auth from clerk next js.

50
00:02:32.699 --> 00:02:36.265
And if you haven't had an intro to
next.js 13 and server components,

51
00:02:36.265 --> 00:02:39.193
me put an async right here is
probably gonna blow your mind.

52
00:02:39.193 --> 00:02:41.724
But I can put an async array
here on this component, and

53
00:02:41.724 --> 00:02:44.210
it works fine because it's
only running on a server.

54
00:02:44.210 --> 00:02:45.630
It's not a client component.

55
00:02:45.630 --> 00:02:46.590
It's just a regular function.

56
00:02:46.590 --> 00:02:48.690
So that's pretty cool.

57
00:02:48.690 --> 00:02:51.854
So then inside of here,

58
00:02:51.854 --> 00:02:56.773
I can just say, await off like this.

59
00:02:59.025 --> 00:03:02.003
&gt;&gt; Scott Moss: And
I should be able to get back a user ID

60
00:03:06.332 --> 00:03:09.473
&gt;&gt; Scott Moss: So then I can say I'll do

61
00:03:09.473 --> 00:03:14.194
something like this, let href =.

62
00:03:14.194 --> 00:03:20.291
I'll just assume that you are not signed
in, so I'll make it go to new-user.

63
00:03:20.291 --> 00:03:25.335
But if user ID, then href

64
00:03:25.335 --> 00:03:30.391
should equals journal.

65
00:03:34.654 --> 00:03:37.218
&gt;&gt; Scott Moss: I guess I can just put
this on one line it's bothering me so

66
00:03:37.218 --> 00:03:38.561
I'm gonna put it on one line.

67
00:03:38.561 --> 00:03:40.338
So user ID.

68
00:03:43.533 --> 00:03:46.181
&gt;&gt; Scott Moss: So if you are logged in,
we'll go to journal.

69
00:03:50.958 --> 00:03:55.907
&gt;&gt; Scott Moss: Otherwise,
we'll go to /new-user.

70
00:03:55.907 --> 00:03:59.560
I could probably even move this
down here too, with async await.

71
00:03:59.560 --> 00:04:01.826
That's actually kinda crazy to think
about, I've never done that, let me see.

72
00:04:01.826 --> 00:04:07.534
You could probably do
just do await auth like,

73
00:04:12.414 --> 00:04:15.132
Like that, and that would work too.

74
00:04:15.132 --> 00:04:17.210
Kinda crazy, I'm not gonna do that.

75
00:04:17.210 --> 00:04:20.413
No one's ever gonna approve
that put request, so

76
00:04:20.413 --> 00:04:23.000
[LAUGH] it is just don't do it.

77
00:04:23.000 --> 00:04:26.965
Don't be that person that's like,
whoa, I could, so I did.

78
00:04:26.965 --> 00:04:29.367
No one's ever gonna approve that.

79
00:04:29.367 --> 00:04:30.930
And if they do, they're crazy too.

80
00:04:30.930 --> 00:04:32.500
Like go work with somebody else.

81
00:04:32.500 --> 00:04:38.260
And then it's coming out here and buying
that to href, and now that'll be dynamic.

82
00:04:38.260 --> 00:04:42.180
&gt;&gt; Speaker 2: I'm still
on the async component.

83
00:04:42.180 --> 00:04:43.916
&gt;&gt; Scott Moss: [LAUGH] Its so
clean, right?

84
00:04:43.916 --> 00:04:46.070
[LAUGH] It's so clean.

85
00:04:46.070 --> 00:04:49.649
When I first learned server-side
rendering in, like, 2015,

86
00:04:49.649 --> 00:04:53.225
this is what I thought it was, and
it wasn't so now I'm like, okay,

87
00:04:53.225 --> 00:04:57.632
thus makes sense, like this is what i
thought server-side rendering was, but no.

88
00:04:57.632 --> 00:05:02.232
It wasn't [LAUGH].

89
00:05:02.232 --> 00:05:05.992
&gt;&gt; Scott Moss: Okay, so we got that and
now we can kinda check it.

90
00:05:05.992 --> 00:05:08.460
So, I don't think I'm logged in.

91
00:05:08.460 --> 00:05:09.450
I might have a cookie.

92
00:05:09.450 --> 00:05:10.720
We'll see.

93
00:05:10.720 --> 00:05:14.659
Yeah, so if I hover over this, it says
journal, so I think that's because I might

94
00:05:14.659 --> 00:05:17.870
have a cookie in here where
I was already logged in.

95
00:05:17.870 --> 00:05:23.210
Yeah, I do, so let me delete that,
delete that, let me refresh.

96
00:05:24.890 --> 00:05:27.440
So now when I hover over,
you can see it goes to new user.

97
00:05:27.440 --> 00:05:29.155
So I don't have that cookie anymore.

98
00:05:31.390 --> 00:05:36.399
&gt;&gt; Scott Moss: So what we wanna do is now
we wanna go to this new user page and

99
00:05:36.399 --> 00:05:38.560
we wanna do a few things.

100
00:05:38.560 --> 00:05:41.240
So first we wanna check.

101
00:05:41.240 --> 00:05:43.160
Well, you can't get to this page
unless you're authenticated.

102
00:05:43.160 --> 00:05:46.524
So we don't really need to check to
see if you are authenticated, but

103
00:05:46.524 --> 00:05:47.860
I guess it wouldn't hurt.

104
00:05:47.860 --> 00:05:52.863
So what we basically the agenda here is,
if this if you got

105
00:05:52.863 --> 00:05:57.880
to this page, that means you
are indeed a brand new user.

106
00:05:57.880 --> 00:06:01.214
So we're gonna check in the database
to see if there's not a user with

107
00:06:01.214 --> 00:06:02.520
this clerk user ID.

108
00:06:02.520 --> 00:06:05.483
If there isn't,
create that user with a clerk user ID and

109
00:06:05.483 --> 00:06:09.681
do any initialization that we need for
that new user, like a new Stripe account,

110
00:06:09.681 --> 00:06:11.620
a new project, new org, whatever.

111
00:06:11.620 --> 00:06:13.830
Whatever you do for
your app, do that here.

112
00:06:13.830 --> 00:06:16.625
If the user already exists then
somehow you got to this page and

113
00:06:16.625 --> 00:06:19.660
you're already a user so
we'll just redirect you to journal.

114
00:06:19.660 --> 00:06:21.290
You can get out of here.

115
00:06:21.290 --> 00:06:23.040
And that's the goal, right?

116
00:06:23.040 --> 00:06:25.650
So let's do that.

117
00:06:25.650 --> 00:06:27.610
And this is the server department so
you can do all that on the logic.

118
00:06:27.610 --> 00:06:32.440
So let's bring in our database so
we'll say, prisma from utils prisma.

119
00:06:33.900 --> 00:06:38.656
Make sure you import the one from Util,
the one that we made,

120
00:06:38.656 --> 00:06:40.811
not the one from at prisma.

121
00:06:40.811 --> 00:06:47.737
And if you're curious like how
I'm able to do this at sign here,

122
00:06:47.737 --> 00:06:53.510
that's free because in our
TS config we have this past

123
00:06:53.510 --> 00:06:59.027
setup right here that says
at anything is a alias for

124
00:06:59.027 --> 00:07:03.288
the root slash the matching anything.

125
00:07:03.288 --> 00:07:09.276
So I can say at and that basically puts me
at the root of my folder slash anything.

126
00:07:09.276 --> 00:07:11.369
You set up more here if you want to.

127
00:07:11.369 --> 00:07:17.660
You just gotta make sure you do something
called base URL or the base path.

128
00:07:19.660 --> 00:07:20.630
Now guess its base URL.

129
00:07:20.630 --> 00:07:22.250
You gotta add like a base URL here.

130
00:07:22.250 --> 00:07:24.670
It's like dot, do you wanna set up more?

131
00:07:26.190 --> 00:07:28.040
It'll tell you if you don't.

132
00:07:28.040 --> 00:07:31.260
Cool, prisma and
then let's just make some functions here.

133
00:07:31.260 --> 00:07:37.498
So we'll make a function that says,

134
00:07:37.498 --> 00:07:41.731
create new user like so.

135
00:07:41.731 --> 00:07:46.266
And then we'll use the same auth
thing that we have from clerk,

136
00:07:46.266 --> 00:07:48.502
this will give us that user ID.

137
00:07:48.502 --> 00:07:52.741
So we can say, this will be async,

138
00:07:52.741 --> 00:07:58.309
await auth,
this will give us a user ID here.

139
00:08:02.237 --> 00:08:07.110
&gt;&gt; Scott Moss: So now we have our userId,
then what we wanna do is just go and

140
00:08:07.110 --> 00:08:12.775
see if there is a user in the database
with this userId or not, right?

141
00:08:12.775 --> 00:08:17.023
So, now we can say, is there a match here?

142
00:08:17.023 --> 00:08:18.262
So we can say, await.

143
00:08:21.038 --> 00:08:21.989
&gt;&gt; Scott Moss: And
this is where prisma is really cool.

144
00:08:21.989 --> 00:08:23.864
So now I can say prisma.

145
00:08:23.864 --> 00:08:26.877
And you can see,
it knows that I have a user,

146
00:08:26.877 --> 00:08:29.413
it knows that I have a journal entry.

147
00:08:29.413 --> 00:08:33.414
It knows that I have an analysis, it just
knows all that because it's type checked.

148
00:08:33.414 --> 00:08:39.894
So, prisma.user, and I can say find,
let's do, findUnique.

149
00:08:39.894 --> 00:08:44.511
Cuz I'm searching by a unique property.

150
00:08:44.511 --> 00:08:47.501
I can parse in an object,
and I can say where.

151
00:08:47.501 --> 00:08:50.431
Which is another object,

152
00:08:50.431 --> 00:08:55.765
in this case where clerkId is userId,
like so.

153
00:08:56.930 --> 00:08:59.790
&gt;&gt; Scott Moss: And you'll just get
a TypeScript error here saying, well,

154
00:08:59.790 --> 00:09:00.679
user ID might be no.

155
00:09:00.679 --> 00:09:02.286
And this has to be a string.

156
00:09:02.286 --> 00:09:06.522
You can just ignore it, or if you really
wanted to be saved, you could just say,

157
00:09:06.522 --> 00:09:07.798
well, it's a string.

158
00:09:07.798 --> 00:09:09.806
So we're gonna do that.

159
00:09:09.806 --> 00:09:16.605
And then we're gonna say,
if not a match, [COUGH].

160
00:09:16.605 --> 00:09:20.158
Cuz by default, this won't throw
an error if it doesn't find it.

161
00:09:20.158 --> 00:09:24.951
If you want it to, you can say,
find unique or throw.

162
00:09:24.951 --> 00:09:27.281
And then it will throw an error
if it doesn't find it.

163
00:09:27.281 --> 00:09:30.731
I don't want it to throw an error if it
doesn't find it because I need to do some

164
00:09:30.731 --> 00:09:32.178
logic, if it doesn't find it.

165
00:09:32.178 --> 00:09:34.902
So I would just catch that error anyway.

166
00:09:34.902 --> 00:09:36.830
So, don't even throw it.

167
00:09:36.830 --> 00:09:40.812
So, if there isn't a match,
then this is a brand new user.

168
00:09:40.812 --> 00:09:44.171
Because we have this clerkId,
and it's not in our database.

169
00:09:44.171 --> 00:09:47.968
So, either they went into their console,

170
00:09:47.968 --> 00:09:51.974
found all the appropriate
JSON Web Tokens and

171
00:09:51.974 --> 00:09:55.884
cookies and IDs and
added it in the console.

172
00:09:55.884 --> 00:09:57.386
And then went to this route.

173
00:09:57.386 --> 00:09:59.031
This is probably a new user.

174
00:09:59.031 --> 00:10:01.040
So, they did that,
they deserved that, they deserve it.

175
00:10:01.040 --> 00:10:04.918
Whatever they're trying to get,
they deserve it, so.

176
00:10:06.565 --> 00:10:11.069
&gt;&gt; Scott Moss: Yeah,
so now we'll say user =

177
00:10:11.069 --> 00:10:15.754
await prisma.user.create.

178
00:10:17.380 --> 00:10:20.050
&gt;&gt; Scott Moss: And for whenever you
do a create, you can just do data,

179
00:10:20.050 --> 00:10:21.047
which is an object.

180
00:10:21.047 --> 00:10:23.069
And then pass in all
the things that a user needs.

181
00:10:23.069 --> 00:10:27.420
And it'll tell you if you hover over it,
or it kinda tells you.

182
00:10:27.420 --> 00:10:29.710
It's just, it's very abstracted away.

183
00:10:29.710 --> 00:10:31.303
But it's the same thing,
you're running a schema.

184
00:10:31.303 --> 00:10:37.212
So, if you forgot, just go look at your
schema and you can see that a user needs.

185
00:10:37.212 --> 00:10:43.093
A clerkId, an email, and
entries is an empty array.

186
00:10:43.093 --> 00:10:44.271
So we don't have to put anything in there.

187
00:10:44.271 --> 00:10:45.506
Okay, so we need an email.

188
00:10:45.506 --> 00:10:48.655
So, this is what we want,
we want current user here.

189
00:10:52.247 --> 00:10:58.267
&gt;&gt; Scott Moss: This will be user, and I
guess we probably should do a check here.

190
00:10:58.267 --> 00:11:01.412
Cuz if, actually,
this should never happen.

191
00:11:01.412 --> 00:11:03.550
Because this is an authenticated
page through the middleware.

192
00:11:03.550 --> 00:11:06.307
So you should never be
able to get to this page.

193
00:11:06.307 --> 00:11:09.802
This should never be known, because
there's no way you should have gotten to

194
00:11:09.802 --> 00:11:11.701
this page without being authenticated.

195
00:11:11.701 --> 00:11:13.466
So I know you are at least authenticated,

196
00:11:13.466 --> 00:11:15.741
I'm trying to figure out if
you're a new user or not.

197
00:11:15.741 --> 00:11:19.766
Because this page won't load because
our middleware will block you.

198
00:11:19.766 --> 00:11:20.971
Cuz I didn't make that a public.

199
00:11:20.971 --> 00:11:25.293
I didn't go in here and say, yeah, new
user is a public page, I didn't do that.

200
00:11:25.293 --> 00:11:27.220
So, you can't get there
unless you're authenticated.

201
00:11:27.220 --> 00:11:29.490
So, I can make that assumption.

202
00:11:29.490 --> 00:11:33.363
So there's no need for me to do a check
here to see if you are logged in.

203
00:11:33.363 --> 00:11:35.181
You are, unless my middleware failed.

204
00:11:35.181 --> 00:11:37.434
And if that's the case,
I got bigger problems.

205
00:11:37.434 --> 00:11:39.807
So, I don't need do a check there.

206
00:11:39.807 --> 00:11:43.652
And then can come out here and
say user.id.

207
00:11:44.923 --> 00:11:47.825
&gt;&gt; Scott Moss: Like that, this thing
still gonna freak out cuz that might be.

208
00:11:47.825 --> 00:11:52.651
No, it's not, but
it's still gonna freak out.

209
00:11:52.651 --> 00:11:59.291
And then here clerkId is user.id.

210
00:11:59.291 --> 00:12:06.205
And then email is user(.),
okay, he stopped doing it.

211
00:12:06.205 --> 00:12:10.081
Email, I think it's user.email, we'll see.

212
00:12:10.081 --> 00:12:14.890
And it looks like I'm not gonna be able
to call it user cuz I have a user here.

213
00:12:14.890 --> 00:12:18.941
So I'll just call this new user,
like that.

214
00:12:22.001 --> 00:12:24.737
&gt;&gt; Scott Moss: It says user
does not exist on type 'User'.

215
00:12:24.737 --> 00:12:28.035
So, what does exist on user then?

216
00:12:28.035 --> 00:12:29.786
Let's see.

217
00:12:31.150 --> 00:12:35.702
&gt;&gt; Scott Moss: Show me, we'll just log
it and we'll see, that's the best way.

218
00:12:35.702 --> 00:12:38.029
[LAUGH] That's how you do.

219
00:12:38.029 --> 00:12:41.018
Wait, is it gonna show
all my personal stuff?

220
00:12:41.018 --> 00:12:43.755
We'll see [LAUGH].

221
00:12:43.755 --> 00:12:47.779
Cuz I did log in with Google, but
I don't think there, we'll see,

222
00:12:47.779 --> 00:12:49.131
I got nothing to hide.

223
00:12:49.131 --> 00:12:50.301
All right, so we'll do that.

224
00:12:50.301 --> 00:12:52.808
We got a new user,
it's got the card thing.

225
00:12:52.808 --> 00:12:55.012
I don't have any additional
setup that I need, but

226
00:12:55.012 --> 00:12:56.504
this is where you would do strive.

227
00:12:56.504 --> 00:12:58.528
And like I said, any initial
setup you would need for a user,

228
00:12:58.528 --> 00:12:59.490
you would do it here on sign.

229
00:12:59.490 --> 00:13:02.430
This is basically your sign up, right?

230
00:13:02.430 --> 00:13:04.521
So we have that new user.

231
00:13:04.521 --> 00:13:06.475
Once all that is done, I mean,

232
00:13:06.475 --> 00:13:09.937
we don't even really need to
&gt;&gt; Scott Moss: Wait,

233
00:13:09.937 --> 00:13:13.526
save that anywhere, so
we could just avoid it.

234
00:13:13.526 --> 00:13:20.321
And now what happens is once we get past
this, we're basically in the same state.

235
00:13:20.321 --> 00:13:22.338
So, once we already created a user,

236
00:13:22.338 --> 00:13:25.016
we're in the same state
as if there was no match.

237
00:13:25.016 --> 00:13:29.473
As in, I'm sorry, we're in the same
state as if there was a match.

238
00:13:29.473 --> 00:13:33.279
So, you are basically our current
user in our database now.

239
00:13:33.279 --> 00:13:37.391
So we can just go down to after this if
statement, and we can redirect now, right?

240
00:13:37.391 --> 00:13:41.680
So now we can just be, yeah,
cool, let's just redirect.

241
00:13:44.548 --> 00:13:49.961
&gt;&gt; Scott Moss: Redirect, I know
there's a redirect in there somewhere.

242
00:13:54.077 --> 00:13:55.861
&gt;&gt; Scott Moss: What is all this stuff?

243
00:13:57.354 --> 00:13:58.284
&gt;&gt; Scott Moss: Let's see.

244
00:13:58.284 --> 00:14:03.008
I think the redirect from
&gt;&gt; Scott Moss: Next,

245
00:14:03.008 --> 00:14:06.175
mm-hm, let's go see.

246
00:14:06.175 --> 00:14:08.384
From next navigation.

247
00:14:08.384 --> 00:14:09.324
That's what I thought about.

248
00:14:09.324 --> 00:14:11.602
I couldn't remember if that
was only client side or not.

249
00:14:11.602 --> 00:14:13.921
But I guess that does
work on the service side.

250
00:14:13.921 --> 00:14:18.097
I just wanted to verify with what I had.

251
00:14:18.097 --> 00:14:19.339
Yeah, I guess that,

252
00:14:19.339 --> 00:14:23.000
I don't know why I thought that
only worked on the client side.

253
00:14:23.000 --> 00:14:24.360
That's awesome, okay, good for them.

254
00:14:24.360 --> 00:14:26.249
That's probably why they recommend it now.

255
00:14:26.249 --> 00:14:31.076
So, navigation, [COUGH] then redirects.

256
00:14:33.363 --> 00:14:35.636
&gt;&gt; Scott Moss: This thing needs a from,
that's why.

257
00:14:35.636 --> 00:14:42.439
Okay, and then now we could just say,
yeah, cool now redirect to journal.

258
00:14:50.334 --> 00:14:53.947
&gt;&gt; Scott Moss: So we got create user,
we don't need off anymore.

259
00:14:56.343 --> 00:14:58.781
&gt;&gt; Scott Moss: I mean, we could show like
a loading spinner here if we want, but

260
00:14:58.781 --> 00:14:59.874
it doesn't really matter.

261
00:14:59.874 --> 00:15:01.633
There's really no UI concept here.

262
00:15:01.633 --> 00:15:05.140
We're basically using this page as
an API route if you think about it,

263
00:15:05.140 --> 00:15:07.170
but it's just happening on the server.

264
00:15:07.170 --> 00:15:09.020
And then now I can just call the function,
right?

265
00:15:09.020 --> 00:15:11.561
I could just be, yeah, cool.

266
00:15:11.561 --> 00:15:15.567
Async, and it just awaits.

267
00:15:16.630 --> 00:15:17.603
&gt;&gt; Scott Moss: Create new user.

268
00:15:21.554 --> 00:15:23.611
&gt;&gt; Scott Moss: Cool,
I'm guessing user doesn't have e-mail, so

269
00:15:23.611 --> 00:15:25.263
we'll figure out what that is in a second.

270
00:15:25.263 --> 00:15:28.855
But everything else should be good, yes.

271
00:15:28.855 --> 00:15:34.823
&gt;&gt; Scott Moss: Message from the chat that
user.e-mail addresses is the property and

272
00:15:34.823 --> 00:15:39.507
it returns an array of emails
associated with the user.

273
00:15:39.507 --> 00:15:43.070
Got it user.email
addresses returns an array.

274
00:15:43.070 --> 00:15:46.478
I think I probably had
that somewhere already.

275
00:15:46.478 --> 00:15:52.529
Yeah, looks like I had an all file
that [LAUGH] basically did that.

276
00:15:52.529 --> 00:15:54.556
Yeah, email addresses.

277
00:15:54.556 --> 00:15:55.722
Yeah, line 25 there.

278
00:15:55.722 --> 00:15:58.496
Yeah, okay, that makes sense.

279
00:15:58.496 --> 00:16:00.593
Let's try that, so user.

280
00:16:00.593 --> 00:16:06.314
emailAddresses,
&gt;&gt; Scott Moss: [0].emailAddress,

281
00:16:06.314 --> 00:16:10.546
I think it's always gonna be the first,
in this case,

282
00:16:10.546 --> 00:16:13.125
we only have Google or whatever.

283
00:16:13.125 --> 00:16:14.764
So it's always gonna be like that one.

284
00:16:14.764 --> 00:16:18.721
And this is just gonna freak out
cuz this could be undefined.

285
00:16:18.721 --> 00:16:24.496
But there's no way you could have become
a clerk user without having an email.

286
00:16:24.496 --> 00:16:27.446
It's either you have to pay Google,
which means you have an email, or

287
00:16:27.446 --> 00:16:30.063
you have to sign up with email,
which means you have an email.

288
00:16:30.063 --> 00:16:34.259
So this will always be defined, but
obviously, the SDK doesn't know that.

289
00:16:34.259 --> 00:16:36.266
So it'll still run.

290
00:16:36.266 --> 00:16:38.977
This is a TypeScript error.

291
00:16:38.977 --> 00:16:40.570
Okay, so now we have that.

292
00:16:40.570 --> 00:16:42.634
We create NewUser.

293
00:16:42.634 --> 00:16:44.929
Let's see what happens.

294
00:16:44.929 --> 00:16:49.238
And then we should get a 404 cuz we
haven't made the journal page yet.

295
00:16:49.238 --> 00:16:51.350
So I'm gonna do that,
gonna hover over this.

296
00:16:51.350 --> 00:16:54.115
I'm not signed in, so
it's telling me go to NewUser.

297
00:16:54.115 --> 00:16:58.048
If I click this, it should go to NewUser
or attempt to go to NewUser, but

298
00:16:58.048 --> 00:17:02.193
the middleware is gonna intercept it and
be like, nah, you gotta sign in.

299
00:17:02.193 --> 00:17:05.282
Then I'll click sign up,
I'll then sign up.

300
00:17:05.282 --> 00:17:09.767
That should redirect me back to NewUser,
and then NewUser will create me a new user

301
00:17:09.767 --> 00:17:13.474
database, which should then
redirect me to channel, hopefully.

302
00:17:13.474 --> 00:17:14.861
[LAUGH] So a lot of work.

303
00:17:14.861 --> 00:17:18.189
Let me also just make sure I
deleted myself from clerk.

304
00:17:18.189 --> 00:17:24.096
I did not, so you can just come here and
delete yourself to be a new user again.

305
00:17:24.096 --> 00:17:28.722
And actually, I don't think that affects
how this works, but just doing it anyway.

306
00:17:28.722 --> 00:17:30.230
Okay, let's give it a try.

307
00:17:31.770 --> 00:17:33.130
So click get started.

308
00:17:33.130 --> 00:17:35.300
Boom, middleware
automatically redirects us.

309
00:17:35.300 --> 00:17:39.161
We can see the redirect URL is indeed
pointing us to NewUser, so that's good.

310
00:17:39.161 --> 00:17:41.597
I'm gonna click Sign up.

311
00:17:41.597 --> 00:17:44.526
I'm gonna continue with Google.

312
00:17:44.526 --> 00:17:46.805
Gotta log in with my Google's.

313
00:17:46.805 --> 00:17:49.264
It went to NewUser.

314
00:17:49.264 --> 00:17:51.651
NewUser waited for a minute, and
boom, it redirected me to journal.

315
00:17:51.651 --> 00:17:55.155
So it worked exactly like
we said it was gonna work.

316
00:17:55.155 --> 00:17:58.567
So that's why I was like, you can probably
show a loading screen there if you

317
00:17:58.567 --> 00:18:00.379
wanted to cuz I knew
it was gonna pause for

318
00:18:00.379 --> 00:18:02.964
a little bit because it's going
to clerk to get the user.

319
00:18:02.964 --> 00:18:06.580
And then it's going to our
database to create the user.

320
00:18:06.580 --> 00:18:07.630
So I knew there's gonna
be a little pause there.

321
00:18:07.630 --> 00:18:11.978
So you can show a loading animation
there or whatever you want.

322
00:18:11.978 --> 00:18:14.278
I can show you how you can get that for
free.

323
00:18:14.278 --> 00:18:17.157
In fact, if you took the intro course,

324
00:18:17.157 --> 00:18:21.277
you know all you have to do is
make a loading file in here.

325
00:18:22.617 --> 00:18:24.121
&gt;&gt; Scott Moss: And you get that for free.

326
00:18:24.121 --> 00:18:28.251
So we're not gonna do that right now.

327
00:18:28.251 --> 00:18:29.187
Okay, that works.

328
00:18:29.187 --> 00:18:30.590
Let's verify some things.

329
00:18:30.590 --> 00:18:35.760
So let's go look at our database.

330
00:18:35.760 --> 00:18:39.078
So we'll look what's in our database,

331
00:18:39.078 --> 00:18:41.190
npx prisma,
&gt;&gt; Scott Moss: studio,

332
00:18:41.190 --> 00:18:46.513
it's gonna launch an app and where we can
look at all the things in our database.

333
00:18:46.513 --> 00:18:52.942
You can see I indeed have one user
in there, and that user is me.

334
00:18:52.942 --> 00:18:54.253
There's my email.

335
00:18:54.253 --> 00:18:55.862
I have no journal entries.

336
00:18:55.862 --> 00:18:59.350
Here's my clerk ID and
all the other things.

337
00:18:59.350 --> 00:19:00.617
So it works.

338
00:19:06.379 --> 00:19:10.373
&gt;&gt; Scott Moss: All right, and now if I go
back home, if I hover over that button,

339
00:19:10.373 --> 00:19:13.728
it should just send me to journal and
never to NewUser.

340
00:19:13.728 --> 00:19:16.358
So it just goes to journal
cuz I'm logged in.

341
00:19:23.782 --> 00:19:26.460
&gt;&gt; Scott Moss: Cool,
any questions on that?

342
00:19:28.197 --> 00:19:29.848
&gt;&gt; Scott Moss: This is the easiest
auth you're ever gonna make,

343
00:19:29.848 --> 00:19:30.882
I'm gonna tell you right now.

344
00:19:30.882 --> 00:19:33.506
It doesn't get easier than this.

345
00:19:33.506 --> 00:19:36.973
I remember having to
roll auth from scratch,

346
00:19:36.973 --> 00:19:39.717
and this is before JSON web tokens.

347
00:19:39.717 --> 00:19:44.224
[LAUGH] This is like
rolling your own memory for

348
00:19:44.224 --> 00:19:49.215
cookies and
sessions on the server, my God.

349
00:19:49.215 --> 00:19:51.845
And you go to JSON web tokens,
I thought that was so much easier,

350
00:19:51.845 --> 00:19:52.881
even that became a pain.

351
00:19:52.881 --> 00:19:55.559
So it doesn't get easier than this.

352
00:19:55.559 --> 00:19:58.331
But if you did wanna roll your own,
somewhat roll your own,

353
00:19:58.331 --> 00:20:02.265
as in you didn't wanna use a service, but
you don't wanna write all the code for it,

354
00:20:02.265 --> 00:20:04.556
there's literally
a package called NextAuth.

355
00:20:04.556 --> 00:20:08.473
That's the only thing I would ever
use if I was gonna roll my own auth.

356
00:20:08.473 --> 00:20:10.782
So highly recommend using this.

357
00:20:10.782 --> 00:20:15.328
I was gonna show this in the course
instead, but I just didn't think it would

358
00:20:15.328 --> 00:20:20.032
be honest of me to recommend something
I wouldn't use, so I wouldn't use it.

359
00:20:20.032 --> 00:20:20.831
I'd just pick a service.

360
00:20:20.831 --> 00:20:24.100
I just wanna get back to
writing the code of my app.

361
00:20:24.100 --> 00:20:26.020
I don't wanna be innovating on Auth.

362
00:20:26.020 --> 00:20:28.958
To me, Auth is the same,
that is always ever gonna be.

363
00:20:28.958 --> 00:20:31.772
And when it changes, I want
the experts to figure it out, not me.

