WEBVTT

1
00:00:00.000 --> 00:00:03.424
Well, let's create our
client that we're gonna use.

2
00:00:03.424 --> 00:00:07.406
Cuz every time we make a client in the
database, or I'm sorry, every time we make

3
00:00:07.406 --> 00:00:11.463
a client, which is an instance of the SDK,
it creates a new database connection.

4
00:00:11.463 --> 00:00:14.964
So we kinda wanna cache that,
and we'll create that, and

5
00:00:14.964 --> 00:00:17.475
then we'll be able to use that in our app.

6
00:00:17.475 --> 00:00:18.889
So this one won't take along.

7
00:00:21.153 --> 00:00:26.553
Let's head over to,
Let's make a new folder.

8
00:00:26.553 --> 00:00:32.552
Let's make a new folder called Utils,
Like so.

9
00:00:32.552 --> 00:00:33.782
I'll put it on the root.

10
00:00:33.782 --> 00:00:39.047
Inside of Utils I'm gonna make
a new folder called db.ts,

11
00:00:39.047 --> 00:00:43.484
it's not a React file, so
there's no tsx or jsx.

12
00:00:45.411 --> 00:00:52.269
And then I'm just going to
import from @prisma/client.

13
00:00:52.269 --> 00:00:57.582
And I'm gonna get Prisma,
or is it a named import?

14
00:00:57.582 --> 00:01:00.140
Is it a named import, yeah, prisma/client.

15
00:01:04.500 --> 00:01:06.849
And there's a lot of ways to do this.

16
00:01:08.482 --> 00:01:11.644
And I've went back and forth on a lot
of ways, so I just wanna make sure I'm

17
00:01:11.644 --> 00:01:14.300
consistent with this one cuz
this one actually is important.

18
00:01:14.300 --> 00:01:16.243
So I'm gonna see what I did here.

19
00:01:19.030 --> 00:01:22.109
Yeah, I'll copy this and
then we'll talk about it.

20
00:01:27.009 --> 00:01:31.320
Okay, few things gone,
few lines of code but

21
00:01:31.320 --> 00:01:34.732
it's actually really important.

22
00:01:34.732 --> 00:01:37.931
Like I said, when you make a new
instance of a client, like here,

23
00:01:37.931 --> 00:01:40.505
you're creating a new
connection to the database.

24
00:01:40.505 --> 00:01:44.106
We wanna try to limit those connection
strings as much as possible,

25
00:01:44.106 --> 00:01:48.211
even though we're using PlanetScale and
it scales those out for us, still,

26
00:01:48.211 --> 00:01:50.379
we kinda just wanna do that just in case.

27
00:01:50.379 --> 00:01:55.140
And basically what we're doing to get
around that is we're just checking

28
00:01:55.140 --> 00:01:58.134
to see if we already instantiated prisma,
and

29
00:01:58.134 --> 00:02:01.841
the way we can check that is
by assigning it to the global.

30
00:02:01.841 --> 00:02:09.164
So you have this thing called
globalThis in Node, globalThis.

31
00:02:09.164 --> 00:02:13.382
It's basically just the global
space that you're running in.

32
00:02:15.414 --> 00:02:17.820
It's like what's left to
the dot of the global space,

33
00:02:17.820 --> 00:02:19.559
that's why it's called globalThis.

34
00:02:19.559 --> 00:02:23.942
And we're just gonna to check to see
if prisma is there first, right here.

35
00:02:25.822 --> 00:02:34.398
And if it's not, then make it, And
assign it to the variable of prisma.

36
00:02:34.398 --> 00:02:38.776
And then if we're not in production,
add that to the global prisma,

37
00:02:38.776 --> 00:02:40.525
only in development mode.

38
00:02:40.525 --> 00:02:44.446
The reason we also do this in development
mode is because of how Next.js does hot

39
00:02:44.446 --> 00:02:45.568
reloading and stuff.

40
00:02:45.568 --> 00:02:49.623
Every time you save a file in Next.js,
it does a hot refresh, hot reload, and

41
00:02:49.623 --> 00:02:53.629
it will mess up the database connection,
and it will just break eventually.

42
00:02:53.629 --> 00:02:58.544
After like ten hot reloads it'll be like,
I don't have any more capacity

43
00:02:58.544 --> 00:03:02.504
to make a database connection,
so this prevents that, yeah.

44
00:03:02.504 --> 00:03:05.766
&gt;&gt; Be a dumb question,
the as unknown as brace on line three,

45
00:03:05.766 --> 00:03:07.710
that's just TypeScript, yeah?

46
00:03:07.710 --> 00:03:08.928
&gt;&gt; That's just TypeScript, yeah.

47
00:03:08.928 --> 00:03:14.018
This is a fancy way to coerce
a type into something.

48
00:03:14.018 --> 00:03:15.957
So first you convert it to unknown,

49
00:03:15.957 --> 00:03:18.872
and then you convert it to
whatever the hell you want.

50
00:03:18.872 --> 00:03:22.056
Why do you have to do that,
that's TypeScript.

51
00:03:22.056 --> 00:03:26.374
If I just did it this way first,
it'd be like, no, that's not that.

52
00:03:26.374 --> 00:03:30.295
So then I'm like, okay, well,
now you don't know about it, and

53
00:03:30.295 --> 00:03:32.760
now I'm gonna tell you about it, right?

54
00:03:32.760 --> 00:03:37.574
[LAUGH] Yeah, it's fancy.

55
00:03:37.574 --> 00:03:41.927
So, yeah, it's like if you're doing this,
it's like, what's the point of TypeScript,

56
00:03:41.927 --> 00:03:42.653
but whatever.

57
00:03:42.653 --> 00:03:47.763
I actually just read an article about the
Svelte team moving away from TypeScript,

58
00:03:47.763 --> 00:03:50.464
and instead just using
type annotations and

59
00:03:50.464 --> 00:03:53.100
comments which gives you the same result.

60
00:03:53.100 --> 00:03:55.183
You can just put the type
annotations in the comments and

61
00:03:55.183 --> 00:03:56.253
have TypeScript read that.

62
00:03:56.253 --> 00:03:59.003
So, thought that was pretty interesting.

