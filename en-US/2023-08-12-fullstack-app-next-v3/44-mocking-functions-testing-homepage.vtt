WEBVTT

1
00:00:00.160 --> 00:00:04.108
Okay, so now that we got that
all the setup out of the way,

2
00:00:04.108 --> 00:00:05.850
we can write some tests.

3
00:00:05.850 --> 00:00:08.150
So there really is no right or
wrong way to do this.

4
00:00:08.150 --> 00:00:11.420
You can co-locate your test
next to your components.

5
00:00:11.420 --> 00:00:14.790
You can make a test folder
in the app directory.

6
00:00:14.790 --> 00:00:17.830
You can put underscore in front of it so
it's ignored by Node.js.

7
00:00:17.830 --> 00:00:23.629
I'm just gonna just put it on a route,
call it tests, keep it simple.

8
00:00:26.022 --> 00:00:28.297
Oops, not a file but a folder.

9
00:00:30.896 --> 00:00:32.734
Cool, so
we have tests right here on the root.

10
00:00:32.734 --> 00:00:39.772
And then let's make a tests for
the, what's a simple one?

11
00:00:39.772 --> 00:00:40.647
How about the homepage?

12
00:00:40.647 --> 00:00:45.049
It's simple but it's got some auth in it,
some async stuff, so we can figure out how

13
00:00:45.049 --> 00:00:48.530
to get around that, but simple
enough to where we can try this out.

14
00:00:51.340 --> 00:00:56.294
Let's do that.
So I'll make a new file in here,

15
00:00:56.294 --> 00:01:01.781
I'll call this, home.test.tsx.

16
00:01:11.425 --> 00:01:15.288
And there's still some setup left.

17
00:01:15.288 --> 00:01:20.474
[LAUGH] Still got a little more setup and
this is where I was banging my head, okay?

18
00:01:20.474 --> 00:01:23.837
So I don't know if you've ever
used testing library before but

19
00:01:23.837 --> 00:01:26.630
these are common render and screen.

20
00:01:26.630 --> 00:01:31.530
And then this was one of the first
signs that I've ever used, vitest.

21
00:01:31.530 --> 00:01:37.050
So I've never used a V thing before, but I
guess if you use it before it seems cool,

22
00:01:37.050 --> 00:01:41.386
I think I'll be using it going
forward if it matters to anybody.

23
00:01:41.386 --> 00:01:46.485
And then we wanna import our homepage so

24
00:01:46.485 --> 00:01:53.449
I'll just call this like
the homepage from app page.

25
00:01:53.449 --> 00:01:58.328
So we got our homepage here, and
then from there before we tested our

26
00:01:58.328 --> 00:02:03.260
homepage has these third party
modules that it imports, right?

27
00:02:03.260 --> 00:02:08.000
If we go look here it imports next
link imports clerk the next link one's

28
00:02:08.000 --> 00:02:11.400
fine because it's just a component.

29
00:02:11.400 --> 00:02:15.471
But this auth from clerk this is
doing something and we don't really,

30
00:02:15.471 --> 00:02:18.300
I don't wanna test this I
just want it to go away.

31
00:02:19.570 --> 00:02:21.310
So we can mock that out.

32
00:02:21.310 --> 00:02:25.268
And the way that we can mock that
out with vitest is using vi.mock,

33
00:02:25.268 --> 00:02:29.578
you can mock out an entire path to
a module and you can just return an object

34
00:02:29.578 --> 00:02:33.550
that will mimic the object you would
get if you imported this path.

35
00:02:35.470 --> 00:02:36.530
So that's what we're gonna do.

36
00:02:36.530 --> 00:02:38.721
We're gonna mock out the auth,

37
00:02:38.721 --> 00:02:43.113
we're gonna mock out clerk
provider coz that's in the layout.

38
00:02:43.113 --> 00:02:48.961
We're gonna mock out use user,
we're gonna mock out a lot of this stuff.

39
00:02:48.961 --> 00:02:50.908
So let's do that.

40
00:02:50.908 --> 00:02:55.605
We can say vi.mock, we're

41
00:02:55.605 --> 00:03:00.896
gonna mock out clerk/nextjs.

42
00:03:00.896 --> 00:03:07.253
It's a function and honestly,
we can just return an object here like so.

43
00:03:10.883 --> 00:03:14.590
And then we want to mock
out something called auth.

44
00:03:14.590 --> 00:03:17.000
That's the same auth
that is being used here.

45
00:03:17.000 --> 00:03:22.020
We wanna mock that out, it's gonna return
our new function that we have ourselves.

46
00:03:22.020 --> 00:03:24.862
It's an a sync function, so
we'll just return a promise that just

47
00:03:24.862 --> 00:03:28.036
resolves to some fake user ID coz
that's really what we're using it for.

48
00:03:31.888 --> 00:03:33.670
So I'll just say new promise.

49
00:03:36.178 --> 00:03:44.056
Like this,
resolve some user ID of whatever,

50
00:03:44.056 --> 00:03:49.080
like that, there we go.

51
00:03:49.080 --> 00:03:50.360
So we got auth mocked out.

52
00:03:52.370 --> 00:03:56.570
And then we want to mock
out the card provider.

53
00:03:56.570 --> 00:03:59.520
Probably don't need to, actually,
I think the off depends on that.

54
00:03:59.520 --> 00:04:03.085
So I think that's why I decided to knock
it out, even though it's only being used

55
00:04:03.085 --> 00:04:06.210
in the layout file,
which we're not importing and testing.

56
00:04:06.210 --> 00:04:09.440
I think auth depends on the clerk provider
being there, so we have to mark it out.

57
00:04:10.510 --> 00:04:14.217
So mark that out, I mean that's really,
we just need to make a fake component that

58
00:04:14.217 --> 00:04:16.609
renders its children that's
what a provider does.

59
00:04:17.940 --> 00:04:22.674
So children and,

60
00:04:22.674 --> 00:04:30.257
a div here has its children.

61
00:04:30.257 --> 00:04:37.723
All right, getting skin somewhere and then
the user one I don't think we use this so

62
00:04:37.723 --> 00:04:41.680
I'm trying to think why
did I put this here?

63
00:04:41.680 --> 00:04:45.959
I think I had a problem this the one that
I got I had to go look up all this stuff

64
00:04:45.959 --> 00:04:49.617
that was happening and clerk, so
I think I had it for some reason

65
00:04:49.617 --> 00:04:53.990
the way clerk was importing, exporting
stuff this was getting in the way.

66
00:04:53.990 --> 00:04:57.915
So you have no I don't think we use this
hook coz we don't do any client side data

67
00:04:57.915 --> 00:04:58.523
checking.

68
00:04:58.523 --> 00:05:00.404
I had to mock this one out.

69
00:05:00.404 --> 00:05:04.466
So I'm just gonna mock it out,

70
00:05:04.466 --> 00:05:10.260
use user a function
that returns an object.

71
00:05:10.260 --> 00:05:13.580
I just got these properties on them,
so actually just going to copy them so

72
00:05:13.580 --> 00:05:15.290
they don't really care.

73
00:05:15.290 --> 00:05:20.523
So fake user is signed in true or false
doesn't matter, these values don't matter.

74
00:05:20.523 --> 00:05:26.184
The next one is this mock is here just
in case you wanna test the layout.

75
00:05:26.184 --> 00:05:29.632
I think I was testing
the layout at one point, and

76
00:05:29.632 --> 00:05:33.505
the layout uses this font
function next font Google and

77
00:05:33.505 --> 00:05:38.830
that was causing problems so
I just marked it out until it go away.

78
00:05:38.830 --> 00:05:43.440
So I did that, but I don't think
I'm using the layout anymore.

79
00:05:43.440 --> 00:05:46.080
If so we'll add this,
if not, not a big deal.

80
00:05:47.210 --> 00:05:48.540
Now we can make some tests.

81
00:05:48.540 --> 00:05:54.710
I can say test this homepage like so,
it's async like this.

82
00:05:56.060 --> 00:06:00.092
Really all I have to do
is render the page and

83
00:06:00.092 --> 00:06:05.584
I can await the page being
called not that, the homepage.

84
00:06:08.893 --> 00:06:11.330
Now once that is rendered,
now I can do my screen.

85
00:06:11.330 --> 00:06:17.050
So I can say expect(screen),
what's a good one?

86
00:06:17.050 --> 00:06:18.379
Yeah, getByText, I think that one's good.

87
00:06:18.379 --> 00:06:22.124
So screen.getBy text,

88
00:06:22.124 --> 00:06:26.054
what's on the homepage?

89
00:06:26.054 --> 00:06:32.840
We have tracking your mood,
or something like that.

90
00:06:36.236 --> 00:06:42.600
Maybe we really care if that's
on the screen to be truthy.

91
00:06:46.943 --> 00:06:51.770
So we just expect screen by get
text to return some element, and

92
00:06:51.770 --> 00:06:54.877
if that is an element, that's truthy.

93
00:06:54.877 --> 00:07:01.340
So if we set everything up correctly,
we got one more thing to do.

94
00:07:01.340 --> 00:07:02.880
We have to add a command for our test.

95
00:07:02.880 --> 00:07:07.291
So if we go to our package JSON,
make a new command in the scripts,

96
00:07:07.291 --> 00:07:10.837
call it test, and
then you could just say, vitest.

97
00:07:17.456 --> 00:07:23.430
And then we can just say NPM test and
see if this works or not.

98
00:07:23.430 --> 00:07:28.327
Cool, okay, so it looks like it
did render though, that's great.

99
00:07:28.327 --> 00:07:30.770
So it looks like our test is just bad,
which is so good.

100
00:07:30.770 --> 00:07:35.640
So they were just so this worked
the first time, that's so good.

101
00:07:35.640 --> 00:07:38.453
Yeah, it just didn't find the element,
right?

102
00:07:38.453 --> 00:07:43.620
So I'm guessing getBy text doesn't,
I look deeply into that.

103
00:07:43.620 --> 00:07:46.960
So let's pick a different
let's say get started.

104
00:07:51.533 --> 00:07:54.068
Cool, get started and I passed.

105
00:07:59.798 --> 00:08:03.143
So once once you render this
page like this, you can pretty

106
00:08:03.143 --> 00:08:08.070
much do whatever you want at this price,
just regular call assertions with excepts.

107
00:08:08.070 --> 00:08:10.790
You can do snapshot testing,
however you wanna do it.

108
00:08:10.790 --> 00:08:14.837
This is the only part that's just
tough at the end of the mocking part.

109
00:08:14.837 --> 00:08:18.673
Everything after that, there's really
nothing new to it than any other react

110
00:08:18.673 --> 00:08:21.651
framework or anything else,
it's clearly the same thing.

