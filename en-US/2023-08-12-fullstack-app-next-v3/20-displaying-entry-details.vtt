WEBVTT

1
00:00:00.190 --> 00:00:01.520
Let's work on this editor.

2
00:00:01.520 --> 00:00:06.570
Okay, so right now, We just have an ID.

3
00:00:06.570 --> 00:00:08.520
Let's replace this with
an actual text editor.

4
00:00:08.520 --> 00:00:12.200
So what we can do is let's
make a new component.

5
00:00:12.200 --> 00:00:14.490
We'll call it Editor in
the components folder.

6
00:00:16.080 --> 00:00:19.451
This is probably the most interactive
component on the page so it's for

7
00:00:19.451 --> 00:00:21.090
sure gonna be a client component.

8
00:00:21.090 --> 00:00:23.820
And we'll just say editor.

9
00:00:37.831 --> 00:00:41.860
We will get an entry here and
we'll just return,

10
00:00:43.541 --> 00:00:48.044
The, entry.content.

11
00:00:51.836 --> 00:00:52.848
So we got that.

12
00:00:55.461 --> 00:01:02.072
We can then go into the editor page
which is Journal ID, or EntryPage.

13
00:01:04.744 --> 00:01:06.534
And I'm just gonna bring an editor here.

14
00:01:06.534 --> 00:01:08.992
So you can render client components and
server components.

15
00:01:11.556 --> 00:01:17.580
The editor is expecting a entry though we
don't have an entry, so we need to get it.

16
00:01:17.580 --> 00:01:19.640
So let's make a function to get the entry.

17
00:01:19.640 --> 00:01:22.689
This is a server component, so
we can dispatch it on the server.

18
00:01:22.689 --> 00:01:29.560
So we'll just say const
getEntry async function.

19
00:01:31.260 --> 00:01:34.610
We need to use our helper
function to get the user.

20
00:01:34.610 --> 00:01:39.214
It's gonna be await getUserByClerkID.

21
00:01:43.271 --> 00:01:47.500
And then getEntry is gonna take in
an ID for the entry that we wanna get.

22
00:01:47.500 --> 00:01:52.639
And we can say entry is gonna be await,

23
00:01:52.639 --> 00:02:00.420
bring in our
prisma.journalEntry.findUnique.

24
00:02:00.420 --> 00:02:03.290
So we wanna find a unique one here.

25
00:02:03.290 --> 00:02:08.770
Okay, so we might have to go back and
update our schema and let's see why.

26
00:02:08.770 --> 00:02:10.660
So we wanna find a unique journal entry.

27
00:02:11.920 --> 00:02:15.583
But we wanna make sure that
that journal entry is for

28
00:02:15.583 --> 00:02:19.000
this user that is logged in and
it is the ID here.

29
00:02:19.000 --> 00:02:24.700
I couldn't just say, yeah,
find me the one where ID is ID, I mean,

30
00:02:24.700 --> 00:02:30.540
it's not throwing any errors that works,
it'll execute.

31
00:02:30.540 --> 00:02:35.120
I mean, you can just pass in
any idea you want, right?

32
00:02:35.120 --> 00:02:37.890
If the ID is coming from the params,
which it will be.

33
00:02:37.890 --> 00:02:41.259
All I need to know is the ID of your
journal entry and I can go in here and

34
00:02:41.259 --> 00:02:42.330
I can see it.

35
00:02:42.330 --> 00:02:47.133
So I need to make sure that not only is it
grabbing the one with the ID from the URL,

36
00:02:47.133 --> 00:02:50.240
but also it belongs to
the person that is signed in.

37
00:02:50.240 --> 00:02:52.737
So if you go back and look at our schema,

38
00:02:52.737 --> 00:02:55.559
we know that our journal
entry has a user ID.

39
00:02:57.020 --> 00:02:59.710
So you might just say, that's simple.

40
00:02:59.710 --> 00:03:04.570
I'll just say where ID is ID and
userID is user dot.ID.

41
00:03:05.950 --> 00:03:07.730
Nope, that's not gonna work.

42
00:03:07.730 --> 00:03:10.985
And basically, the reason that's not gonna
work I don't think this message tells you.

43
00:03:10.985 --> 00:03:12.113
Let me see if it tells you.

44
00:03:13.721 --> 00:03:16.230
No, so there's no way you would
have known why this didn't work.

45
00:03:16.230 --> 00:03:20.277
So the reason this doesn't work
is because, this is find unique,

46
00:03:20.277 --> 00:03:24.498
which means everything that you put
in where has to be a unique index.

47
00:03:24.498 --> 00:03:31.160
On our schema, user ID is not a unique
index, it's just a regular index.

48
00:03:31.160 --> 00:03:33.774
So we have to make this unique.

49
00:03:33.774 --> 00:03:37.340
So we could just say, all right,
let's make this unique like this.

50
00:03:38.826 --> 00:03:41.340
And then now we can do that.

51
00:03:41.340 --> 00:03:44.348
But hold on,
this introduces another problem.

52
00:03:44.348 --> 00:03:51.324
This works but now you effectively as a
user can only ever have one journal entry.

53
00:03:51.324 --> 00:03:54.556
Because as soon as you make a journal
entry with your user ID on it and you try

54
00:03:54.556 --> 00:03:58.690
to make another journal entry with your
user ID on it, it's like, nope, you can't.

55
00:03:58.690 --> 00:04:01.750
There's already one with
your user user ID on it.

56
00:04:01.750 --> 00:04:05.800
So we're gonna make a compound index,
which is a combination of two things.

57
00:04:05.800 --> 00:04:08.290
So it'd be the userId plus the ID.

58
00:04:08.290 --> 00:04:12.507
And then now, as long as this combination
is unique, which it should be,

59
00:04:12.507 --> 00:04:16.160
cuz both of these two things are unique,
we should be fine.

60
00:04:16.160 --> 00:04:19.320
And it satisfies the constraint
of having a userId be unique.

61
00:04:19.320 --> 00:04:20.873
So we're gonna save that.

62
00:04:25.548 --> 00:04:29.222
And then to reflect these changes,
we need to make a database push.

63
00:04:29.222 --> 00:04:31.898
So in your terminal,

64
00:04:31.898 --> 00:04:37.950
npx prisma db push Probably
gonna get a warning here.

65
00:04:37.950 --> 00:04:38.730
There we go.

66
00:04:38.730 --> 00:04:41.915
We added a unique constraint
covering the columns user and

67
00:04:41.915 --> 00:04:46.530
ID on the table JournalEntry will be added
if there are any existing duplicate values

68
00:04:46.530 --> 00:04:47.830
this will fail.

69
00:04:47.830 --> 00:04:50.348
There aren't any existing
duplicate values, so we're good.

70
00:04:54.830 --> 00:04:57.833
Generate a new client, and
justto avoid any issues,

71
00:04:57.833 --> 00:05:00.514
I'm going to stop my server and
start it again.

72
00:05:07.533 --> 00:05:08.283
Cool.

73
00:05:10.034 --> 00:05:11.632
And then we just need to go in and

74
00:05:11.632 --> 00:05:15.530
obviously this is messed up cuz we
haven't passed anything into it yet.

75
00:05:15.530 --> 00:05:18.440
So now we just need to go in here and
now we get this.

76
00:05:18.440 --> 00:05:23.327
We still get the same error, but
instead of doing ID and userID,

77
00:05:23.327 --> 00:05:26.290
we're gonna say userID_ID.

78
00:05:26.290 --> 00:05:30.222
It's when you do a combination,
complex or compound index,

79
00:05:30.222 --> 00:05:34.758
the property in which you query from
is a combination of the two of them in

80
00:05:34.758 --> 00:05:39.630
the order in which you pass into
the array separated by underscore.

81
00:05:39.630 --> 00:05:42.987
So userID_ID, that's an object.

82
00:05:42.987 --> 00:05:50.750
And then you can say, well the userID
is user.id and the id is id.

83
00:06:02.501 --> 00:06:03.514
Any questions on that?

84
00:06:09.152 --> 00:06:13.760
&gt;&gt; Can you say a little bit more
about on line 9, that complex?

85
00:06:13.760 --> 00:06:15.620
&gt;&gt; Yeah.
&gt;&gt; Key is like?

86
00:06:15.620 --> 00:06:18.899
&gt;&gt; Yep, so let's bring up this-
&gt;&gt; That's corresponding directly to

87
00:06:18.899 --> 00:06:20.986
the way this is declared on 36?

88
00:06:20.986 --> 00:06:26.350
&gt;&gt; Yep, 100%, so we have this array
here and we have userID and ID.

89
00:06:26.350 --> 00:06:30.090
So it's a compound index
consisting of these two values,

90
00:06:30.090 --> 00:06:32.380
and now we want to query on them.

91
00:06:32.380 --> 00:06:35.872
So to query on them,
there's this virtual field,

92
00:06:35.872 --> 00:06:38.890
which is a combination
of those two values.

93
00:06:38.890 --> 00:06:43.165
So user ID, you could replace the comma
you would see in an array with

94
00:06:43.165 --> 00:06:45.820
an underscore, and then ID.

95
00:06:45.820 --> 00:06:49.580
And then we have to provide each
individual value for each one of those.

96
00:06:49.580 --> 00:06:55.021
So the userID portion, it's the ID of user
and the ID portion is what was passed in.

97
00:06:55.021 --> 00:06:58.402
Have the entry,
now we just return that entry.

98
00:06:58.402 --> 00:06:59.410
Wait, not done yet.

99
00:07:00.704 --> 00:07:02.060
Actually, I think we might be done yeah.

100
00:07:02.060 --> 00:07:04.400
I was thinking ahead of AI stuff,
never mind.

101
00:07:04.400 --> 00:07:05.970
We're just gonna return the entry for now.

102
00:07:05.970 --> 00:07:08.760
We're gonna come back and
change this with some AI stuff later.

103
00:07:08.760 --> 00:07:11.470
So we're going to return the entry.

104
00:07:11.470 --> 00:07:16.110
And then now I can go down here and
say, give me the entry await.

105
00:07:16.110 --> 00:07:20.290
Make this async, await get entry.

106
00:07:20.290 --> 00:07:26.890
And then I have to pass in
the id which will be params.id.

107
00:07:26.890 --> 00:07:31.490
And then I can just say,
cool, here's your entry.

108
00:07:31.490 --> 00:07:37.050
And this is fine, you can pass props to
client components from a server component.

109
00:07:37.050 --> 00:07:39.280
They just have to be serializable.

110
00:07:39.280 --> 00:07:42.445
And anything that comes from our
database is serializable because

111
00:07:42.445 --> 00:07:46.130
it wouldn't have been able to save in
a database if it wasn't serializable.

112
00:07:46.130 --> 00:07:48.666
So we can be rest assured
that it's safe to pass.

113
00:07:48.666 --> 00:07:55.000
If it's safe to store in the database and
come back which crosses the Internet,

114
00:07:55.000 --> 00:08:01.067
then it's safe to go into our client
component which crosses the Internet.

115
00:08:05.935 --> 00:08:10.871
Okay, and there we go, our entry is there
on the page, at least the content for it.

