WEBVTT

1
00:00:00.190 --> 00:00:03.681
Let's get ready to use our database and
our app.

2
00:00:03.681 --> 00:00:05.862
And now we can write
some data fetching and

3
00:00:05.862 --> 00:00:09.173
data mutating functions that
take advantage of the database.

4
00:00:09.173 --> 00:00:11.833
But the one thing we wanna do is,
like I said,

5
00:00:11.833 --> 00:00:16.681
we want to sync the clerk user with the
user that we're gonna create our database.

6
00:00:16.681 --> 00:00:18.256
So let's do that.

7
00:00:18.256 --> 00:00:21.440
Before we can do it,
we actually have to write a real schema.

8
00:00:21.440 --> 00:00:21.974
So let's do that.

9
00:00:25.290 --> 00:00:26.809
So back to the schema.

10
00:00:26.809 --> 00:00:29.270
Let's just keep working on this user.

11
00:00:29.270 --> 00:00:32.454
So we want the user to have a createdAt,
and

12
00:00:32.454 --> 00:00:37.948
that's just gonna be a DateTime type,
and we can give it a default of now.

13
00:00:37.948 --> 00:00:41.269
So it's created whenever it got created.

14
00:00:44.484 --> 00:00:52.287
You can do an updatedAt, that's very
similar, That's a date-time type.

15
00:00:54.537 --> 00:00:57.787
I believe there's a updatedAt
attribute here, so

16
00:00:57.787 --> 00:01:02.777
it'll automatically add that timestamp for
us every time this gets updated,

17
00:01:02.777 --> 00:01:05.060
so we don't have to manually do it.

18
00:01:10.044 --> 00:01:13.160
And then, I mean,
we could pretty much put whatever we want.

19
00:01:13.160 --> 00:01:17.686
I don't want all the information
about a user that clerk has.

20
00:01:17.686 --> 00:01:21.695
That would just be hard to just keep that
cuz then it's well, what if they go,

21
00:01:21.695 --> 00:01:24.730
cuz clerk also allows the user
to go change their account.

22
00:01:24.730 --> 00:01:26.410
So if they change their account on clerk,

23
00:01:26.410 --> 00:01:28.907
then now I gotta write some logic
to keep that in sync here too.

24
00:01:28.907 --> 00:01:31.490
I just want to keep in sync
on the initial signup,

25
00:01:31.490 --> 00:01:34.210
I don't really care if they
do all the other stuff.

26
00:01:34.210 --> 00:01:38.121
In fact, I would just rather just hit
clerk's API as a source of truth to get

27
00:01:38.121 --> 00:01:39.624
information about my user.

28
00:01:39.624 --> 00:01:41.610
I just need to know what user it is.

29
00:01:41.610 --> 00:01:44.700
So really, all I need is the id
that belongs to that clerk user and

30
00:01:44.700 --> 00:01:45.339
add it here.

31
00:01:45.339 --> 00:01:48.972
And now I can just ask clerk about this
user, whatever I want to know about

32
00:01:48.972 --> 00:01:52.740
the user, versus copying all the data
over and trying to keep that in sync.

33
00:01:52.740 --> 00:01:53.716
It sounds very brittle.

34
00:01:53.716 --> 00:01:55.040
It sounds like someone's job.

35
00:01:55.040 --> 00:01:59.380
It's like that's the person on the team
whose job is to keep the clerk and

36
00:01:59.380 --> 00:02:00.247
user in sync.

37
00:02:00.247 --> 00:02:02.930
That's a job, so I'm not doing it.

38
00:02:02.930 --> 00:02:03.454
We're just gonna add the clerk id.

39
00:02:03.454 --> 00:02:10.642
So I'm gonna say clerkId,
that's a type string, and it's unique.

40
00:02:10.642 --> 00:02:13.535
Only one user can have this click id.

41
00:02:13.535 --> 00:02:19.592
&gt;&gt; Can you make a quick comment about
like app decorators we're using,

42
00:02:19.592 --> 00:02:24.095
are those leveraging native
functions to Prisma?

43
00:02:24.095 --> 00:02:27.925
&gt;&gt; Yeah, so
this is Prisma proprietary language I,

44
00:02:27.925 --> 00:02:30.850
don't know if they have a name for it.

45
00:02:30.850 --> 00:02:34.323
I don't know if it's called Prisma SDL or
whatever.

46
00:02:34.323 --> 00:02:37.554
But yeah,
it's their proprietary language and

47
00:02:37.554 --> 00:02:41.830
all of these map to specific
database functionalities.

48
00:02:41.830 --> 00:02:45.961
In fact, they have a chart
that walks through all of it.

49
00:02:45.961 --> 00:02:46.490
Here we go.

50
00:02:46.490 --> 00:02:50.821
Yeah, so you can see how these map to
different things within a database and

51
00:02:50.821 --> 00:02:54.137
what they're doing, and
that's basically, I think.

52
00:02:54.137 --> 00:02:58.118
So the Prisma team used to be
a GraphQL server as a service, but

53
00:02:58.118 --> 00:03:02.713
really what was cool about that was
they built some really cool database

54
00:03:02.713 --> 00:03:05.255
functionality to help build that app.

55
00:03:05.255 --> 00:03:10.026
And I think they realized that, wait,
this database functionality that we

56
00:03:10.026 --> 00:03:14.162
built is a really cool product on its own,
we should leverage that.

57
00:03:14.162 --> 00:03:17.640
So they also have
a product that you can use.

58
00:03:17.640 --> 00:03:21.319
But if you use something like PlanetScale,
you don't need the product that they have,

59
00:03:21.319 --> 00:03:24.665
actually, cuz the product they have helps
you scale a database on serverless.

60
00:03:24.665 --> 00:03:26.840
But if you use PlanetScale,
you don't need it.

61
00:03:26.840 --> 00:03:28.253
So, PlanetScale is great.

62
00:03:31.710 --> 00:03:32.240
Good question though.

63
00:03:35.460 --> 00:03:36.450
Cool, okay, so we have that.

64
00:03:36.450 --> 00:03:38.400
What else could we put on here?

65
00:03:38.400 --> 00:03:41.397
We could put email here if we wanted.

66
00:03:41.397 --> 00:03:42.650
Let's do that.

67
00:03:42.650 --> 00:03:45.770
That way we can reference this in
the UI somewhere, here you are,

68
00:03:45.770 --> 00:03:47.603
here's your user email, whatever.

69
00:03:47.603 --> 00:03:48.920
That's also unique.

70
00:03:50.640 --> 00:03:53.197
And by the way, if you don't put
a question mark on the end of this,

71
00:03:53.197 --> 00:03:54.308
that means it's required.

72
00:03:54.308 --> 00:03:56.460
Everything's required unless
it has a question mark on it.

73
00:03:58.545 --> 00:04:01.413
So got email, and
we can stop with the user for now.

74
00:04:01.413 --> 00:04:04.913
And now we're gonna think about all
the other models in our app and

75
00:04:04.913 --> 00:04:06.065
what we need to make.

76
00:04:06.065 --> 00:04:10.175
So the next one is gonna
be a journal entry.

77
00:04:10.175 --> 00:04:15.811
I'm just gonna copy these three things
here because everything's pretty

78
00:04:15.811 --> 00:04:21.453
much got to have these three fields,
an id, a createdAt, and updatedAt.

79
00:04:22.744 --> 00:04:29.113
And then from there, a journal entry has
It has content, that's the actual content.

80
00:04:29.113 --> 00:04:30.470
It's a string.

81
00:04:31.490 --> 00:04:34.278
Because MySQL is a fixed
width column database,

82
00:04:34.278 --> 00:04:37.341
it's gonna hit a limit on
how long that string can be.

83
00:04:37.341 --> 00:04:40.371
So to get around that,

84
00:04:40.371 --> 00:04:45.479
you can just do db.text or db.Text.

85
00:04:46.820 --> 00:04:48.466
There we go.

86
00:04:48.466 --> 00:04:53.185
This is basically changing
it to full-blown text in

87
00:04:53.185 --> 00:04:58.280
the database and
not some fixed width char or car.

88
00:04:58.280 --> 00:05:01.344
Char, car, I don't know how you
pronounce it, it's short for character,

89
00:05:01.344 --> 00:05:02.820
which is what it would be by default.

90
00:05:02.820 --> 00:05:08.320
If you don't know anything about MySQL,
then don't listen to anything I just said.

91
00:05:08.320 --> 00:05:10.847
This just means I want
my string to be long.

92
00:05:10.847 --> 00:05:12.595
[LAUGH] That's what this means.

93
00:05:18.102 --> 00:05:22.040
Okay, we have content,
what else does an entry have?

94
00:05:22.040 --> 00:05:24.780
It has the user that created it,
so we need a relationship here.

95
00:05:24.780 --> 00:05:26.730
I like to put my relationships up here.

96
00:05:26.730 --> 00:05:32.316
To make a relationship,
you just need two fields.

97
00:05:32.316 --> 00:05:36.787
You need a unique field that associates
this entry with the thing you

98
00:05:36.787 --> 00:05:38.050
want to relate to.

99
00:05:38.050 --> 00:05:39.464
In this case,
I'll just call it the userId.

100
00:05:39.464 --> 00:05:40.800
You can call it whatever you want.

101
00:05:40.800 --> 00:05:42.958
You can call it, ownerId,
it doesn't matter.

102
00:05:42.958 --> 00:05:45.690
Creator, I'm just gonna call it a userId.

103
00:05:45.690 --> 00:05:50.442
Its type is a string because the type
of a userId is also a string.

104
00:05:50.442 --> 00:05:53.440
If the userId type was int, and
you did the auto-increment,

105
00:05:53.440 --> 00:05:55.350
then this will also be int for integer.

106
00:05:55.350 --> 00:05:57.990
You just got to make sure
the type that you put for

107
00:05:57.990 --> 00:06:02.035
the relation is the same type that it
is on the thing you're relating to.

108
00:06:02.035 --> 00:06:06.949
Type string, and
then I can say @relation, like this.

109
00:06:09.263 --> 00:06:11.810
Then I can say fields, which is an array.

110
00:06:15.605 --> 00:06:19.310
And then I can say references.

111
00:06:19.310 --> 00:06:23.720
So fields is basically just
gonna be the field that

112
00:06:23.720 --> 00:06:27.290
you want this relationship to tie into.

113
00:06:27.290 --> 00:06:32.050
So in this case, it'll be userId, like so.

114
00:06:32.050 --> 00:06:36.657
And then the reference is what is the name
of the field on which you're referencing

115
00:06:36.657 --> 00:06:39.212
on the other model, in this case, it's id.

116
00:06:39.212 --> 00:06:44.030
So I'm referencing id, like that.

117
00:06:44.030 --> 00:06:44.530
I'm sorry, hold on.

118
00:06:47.170 --> 00:06:48.961
Forget what I just said.
That goes on the next one,

119
00:06:48.961 --> 00:06:50.170
[LAUGH] not this one.

120
00:06:50.170 --> 00:06:51.616
I'm like, wait, this doesn't look right.

121
00:06:51.616 --> 00:06:54.080
So actually,
we can just change it right now.

122
00:06:54.080 --> 00:06:58.598
So instead of saying userId right here,
just call this user and

123
00:06:58.598 --> 00:07:00.910
give it a type of user like that.

124
00:07:06.750 --> 00:07:13.003
And then you can make the userId field,
which is just type String.

125
00:07:13.003 --> 00:07:15.750
And you'll still get this error,
which is expected.

126
00:07:15.750 --> 00:07:18.064
We'll talk about why this is the case, but

127
00:07:18.064 --> 00:07:20.967
that's how you set up
the relationship in this side.

128
00:07:20.967 --> 00:07:25.645
So we're saying the userId
field on JournalEntry is gonna

129
00:07:25.645 --> 00:07:28.990
reference the id field on the user model.

130
00:07:31.107 --> 00:07:36.059
So userId here, references id there.

131
00:07:37.820 --> 00:07:41.673
And it's freaking out because it's like,
yeah, but

132
00:07:41.673 --> 00:07:46.410
you got to set up the relationship
on the other side too.

133
00:07:46.410 --> 00:07:47.011
So let's go do that.

134
00:07:47.011 --> 00:07:51.520
We can actually just go back up to user,
and you can call this whatever you want.

135
00:07:51.520 --> 00:07:54.649
I'll just call it entries.

136
00:07:54.649 --> 00:07:57.110
It's a one to many relationship.

137
00:07:57.110 --> 00:08:00.629
A journal entry can have one user,
but a user can have many entries.

138
00:08:00.629 --> 00:08:05.051
So it's gonna be an array of
journal entries like that.

139
00:08:05.051 --> 00:08:12.170
And then we get one more squiggly here.

140
00:08:12.170 --> 00:08:15.572
And this thing is basically saying,
hey, relationship mode is Prisma.

141
00:08:15.572 --> 00:08:19.940
We're not gonna generate these foreign
keys for you, you need to do it yourself.

142
00:08:19.940 --> 00:08:21.240
It's a technical issue.

143
00:08:21.240 --> 00:08:24.190
Basically, what they're saying
is you just need to index that.

144
00:08:24.190 --> 00:08:28.134
So we can say, you can go down to
the bottom, and you can say index,

145
00:08:28.134 --> 00:08:32.100
which is a function that takes
an array has two sides in front of it.

146
00:08:32.100 --> 00:08:36.070
And you can say index the userId,
and that will solve that problem.

147
00:08:36.070 --> 00:08:39.233
We will actually probably make this
unique because we'll have to query it.

148
00:08:39.233 --> 00:08:42.055
But we'll keep it indexed for
now, and we'll come back and

149
00:08:42.055 --> 00:08:43.189
change it if we need to.

150
00:08:43.189 --> 00:08:47.149
Get our journal entry,
the last thing we need to make, or

151
00:08:47.149 --> 00:08:50.926
at least one more thing,
I don't know what else.

152
00:08:50.926 --> 00:08:51.610
Yeah.

153
00:08:51.610 --> 00:08:53.946
Yep.
&gt;&gt; So, on line 31.

154
00:08:53.946 --> 00:08:57.346
You know,
the references we know is looking for

155
00:08:57.346 --> 00:09:01.092
that value on the type
that we've declared on 31.

156
00:09:01.092 --> 00:09:03.294
Does it check that about the fields,

157
00:09:03.294 --> 00:09:07.782
is it inherently gonna referencing
the model that were defining this one.

158
00:09:07.782 --> 00:09:12.718
&gt;&gt; Correct, yeah, so the field is only
referencing a field that's on this model,

159
00:09:12.718 --> 00:09:15.926
so it's looking for
something here with this name.

160
00:09:15.926 --> 00:09:16.774
&gt;&gt; Self model.

161
00:09:16.774 --> 00:09:20.903
&gt;&gt; Right, exactly, and yeah, the reference
is like, okay, what is the name of

162
00:09:20.903 --> 00:09:25.112
the field on the reference that you're
talking about, and that's called id.

163
00:09:25.112 --> 00:09:27.617
So if this was not called id,
if it was like that,

164
00:09:27.617 --> 00:09:29.461
you can see it breaks immediately.

165
00:09:29.461 --> 00:09:33.181
It's like, there's nothing called that,
what are you talking about, so.

