WEBVTT

1
00:00:00.130 --> 00:00:05.000
So we mostly finished all
the authentication work.

2
00:00:05.000 --> 00:00:09.512
I think what was left is just getting
it to redirect to the new user,

3
00:00:09.512 --> 00:00:13.640
which we will need to do and
I'll talk about that in a minute.

4
00:00:13.640 --> 00:00:16.510
And we gotta set some stuff
up before we can do that.

5
00:00:16.510 --> 00:00:19.260
But yeah, it's mostly there for
free, right.

6
00:00:19.260 --> 00:00:22.650
ClerkJS makes it pretty simple
to set up authentication.

7
00:00:22.650 --> 00:00:25.471
And you'll see once we use
some of those helpers inside

8
00:00:25.471 --> 00:00:30.420
of our data fetching functions that it's
really, really, really simple to do.

9
00:00:30.420 --> 00:00:32.840
So let's talk about that
whole new user thing.

10
00:00:32.840 --> 00:00:37.700
So the reason we need to do that is mostly
just how ClerkJS handles authentication.

11
00:00:37.700 --> 00:00:41.205
So if you follow along in their docs,
actually I don't even know where in

12
00:00:41.205 --> 00:00:43.740
the docs they talk about it so
I'll just explain it.

13
00:00:44.770 --> 00:00:48.470
But basically, we want to be able to sync.

14
00:00:49.590 --> 00:00:53.468
So when you use a third-party service
like Clerk for authentication,

15
00:00:53.468 --> 00:00:55.740
they keep track of all your users for you.

16
00:00:56.750 --> 00:00:59.730
And that's cool, but I don't want some
other app keeping track of my users.

17
00:00:59.730 --> 00:01:02.500
I wanna keep track of my
own users in my database.

18
00:01:02.500 --> 00:01:04.630
I just don't want that to happen, so

19
00:01:04.630 --> 00:01:08.891
I need to find some way to sync the users
that they create when people sign up

20
00:01:08.891 --> 00:01:12.380
to my app with the database
of users that I have.

21
00:01:12.380 --> 00:01:15.370
And they have a way to do that,
it's mostly through a webhook.

22
00:01:15.370 --> 00:01:19.830
So if you don't know what a webhook is,
this basically means once

23
00:01:19.830 --> 00:01:24.695
someone interacts with Clerk's APIs
to sign up, sign in, whatever,

24
00:01:24.695 --> 00:01:29.800
they will then take a URL that I gave them
and issue a request of that URL to let

25
00:01:29.800 --> 00:01:34.707
me know that someone has done something
and then I can sync my database.

26
00:01:34.707 --> 00:01:40.947
The problem with that is that is
asynchronous, as in there's no way for

27
00:01:40.947 --> 00:01:46.254
me to wait for a webhook, or
at least no elegant way, right.

28
00:01:46.254 --> 00:01:48.446
If I'm waiting for
them to talk to my server,

29
00:01:48.446 --> 00:01:51.331
that's a lot different than me
firing off an API request and

30
00:01:51.331 --> 00:01:55.120
then getting a result back,
cuz in this case that's not happening.

31
00:01:55.120 --> 00:01:59.646
Someone signs up and then I just have
to wait until, they hit my API, cool,

32
00:01:59.646 --> 00:02:02.820
someone signed up,
let me sync the database.

33
00:02:02.820 --> 00:02:07.840
And I don't want to let the user in
my app unless they're in my database.

34
00:02:07.840 --> 00:02:11.215
So that means they're just gonna
be sitting there waiting, I guess,

35
00:02:11.215 --> 00:02:15.180
while I'm polling some location on my back
end to see if the database got updated.

36
00:02:16.260 --> 00:02:18.530
That's a little gross, so
I don't wanna do that.

37
00:02:18.530 --> 00:02:19.445
So instead,

38
00:02:19.445 --> 00:02:25.130
what we're gonna do is we're going to
redirect the user to another page.

39
00:02:25.130 --> 00:02:29.822
In that page we'll do some server side
logic through a server component that will

40
00:02:29.822 --> 00:02:33.755
then take the authentication logic
that is already in the browser,

41
00:02:33.755 --> 00:02:38.033
fetch the user from Clerk, and then
create a user in the database there and

42
00:02:38.033 --> 00:02:40.390
then anything else we need for the user.

43
00:02:40.390 --> 00:02:45.234
So this is where if you had to create a
customer, you had to set up a project for

44
00:02:45.234 --> 00:02:48.850
the user, anything you need to
initialize you would do it there

45
00:02:48.850 --> 00:02:52.180
on the server cuz it's
a server side component.

46
00:02:52.180 --> 00:02:55.880
And only then do we redirect them to,
in this case, journal.

47
00:02:55.880 --> 00:02:56.930
So that's what we wanna do.

48
00:02:56.930 --> 00:03:01.131
But in order to do any of that we gotta
make a database, and a database schema,

49
00:03:01.131 --> 00:03:02.359
and set all that up, so

50
00:03:02.359 --> 00:03:05.969
that's what we're gonna do next
&gt;&gt; Can you explain a webhook a little

51
00:03:05.969 --> 00:03:06.484
better.

52
00:03:06.484 --> 00:03:10.320
I think I know what you're talking about,
but more context would be helpful for me.

53
00:03:10.320 --> 00:03:11.430
&gt;&gt; Explain what, what was it?

54
00:03:11.430 --> 00:03:12.280
&gt;&gt; Webhook.

55
00:03:12.280 --> 00:03:13.180
&gt;&gt; Webhook, yes, okay.

56
00:03:13.180 --> 00:03:14.310
So what is a webhook?

57
00:03:14.310 --> 00:03:17.280
A webhook is essentially,
it's like an event, okay.

58
00:03:17.280 --> 00:03:21.760
Let's talk about two servers, let's
talk about GitHub and then your server.

59
00:03:21.760 --> 00:03:26.864
So if you created a webhook on GitHub,
and let's say you

60
00:03:26.864 --> 00:03:32.960
wanted to subscribe to the pull
request comment event, okay.

61
00:03:32.960 --> 00:03:36.976
So what would happen is you would
give GitHub a URL to your API,

62
00:03:36.976 --> 00:03:41.550
let's say you have
yourwebsite.com/API/webhooks, all right.

63
00:03:41.550 --> 00:03:48.020
And you say hey, GitHub, I wanna subscribe
to the pull request comment event.

64
00:03:48.020 --> 00:03:51.897
So GitHub's like, okay cool,
whenever someone makes a comment on a pull

65
00:03:51.897 --> 00:03:55.897
request I'm going to issue a request to
the URL that you gave me with the event

66
00:03:55.897 --> 00:04:00.364
information, whatever information they
wanna send they're gonna send it to you.

67
00:04:00.364 --> 00:04:04.684
And then that way you can respond to that,
you can take that information and,

68
00:04:04.684 --> 00:04:09.139
I don't know, let's say your app is a
Slack bot that shows Slack messages every

69
00:04:09.139 --> 00:04:11.820
time someone makes a message
on a pull request.

70
00:04:11.820 --> 00:04:15.756
So your server will then get notified by
GitHub that someone made a comment, and

71
00:04:15.756 --> 00:04:19.590
then now you can issue a Slack message
in Slack because you just got notified.

72
00:04:19.590 --> 00:04:23.038
So it makes your app real time because
you get notified by events, and

73
00:04:23.038 --> 00:04:25.320
that's basically what a webhook is.

74
00:04:25.320 --> 00:04:29.304
And that's great in that scenario
because no one went in Slack and

75
00:04:29.304 --> 00:04:32.270
was like,
show me the pull request messages.

76
00:04:32.270 --> 00:04:35.637
So they were not waiting on it, it just
came in, which is a great use case for

77
00:04:35.637 --> 00:04:36.720
webhooks.

78
00:04:36.720 --> 00:04:42.050
But if you're like, I click this button,
I fire off a request,

79
00:04:42.050 --> 00:04:47.310
but now I have to wait until
the server that I talk to comes back.

80
00:04:47.310 --> 00:04:51.895
Webhooks aren't good for that because you
don't know when it's gonna come back and

81
00:04:51.895 --> 00:04:55.576
it's not responding to a request,
it's requesting your server,

82
00:04:55.576 --> 00:04:57.960
it's actually the opposite.

83
00:04:57.960 --> 00:05:02.856
So the only way to know that, to keep it
serial inside your webhook handler is

84
00:05:02.856 --> 00:05:06.539
to update some state somewhere,
typically a database.

85
00:05:06.539 --> 00:05:09.933
And then on your front end you just
keep polling to see if that thing

86
00:05:09.933 --> 00:05:14.022
got updated in the database, and if it
did you knew that the webhook got fired.

87
00:05:14.022 --> 00:05:17.322
And that's just it's not fun to do,
so I'm not gonna sit here and

88
00:05:17.322 --> 00:05:19.550
write polling logic and
do stuff like that.

89
00:05:19.550 --> 00:05:22.442
So we're just gonna use
this shortcut to do that.

