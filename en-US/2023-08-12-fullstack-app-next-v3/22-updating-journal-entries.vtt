WEBVTT

1
00:00:00.080 --> 00:00:02.500
Got a nice editor here, nothing crazy.

2
00:00:03.970 --> 00:00:08.160
Then we also need this other section
on the right that we need for AI stuff.

3
00:00:08.160 --> 00:00:09.980
We're gonna do that later
when we talk about AI stuff.

4
00:00:09.980 --> 00:00:12.578
So there's still gonna be a bunch
of layout changes that's gonna be

5
00:00:12.578 --> 00:00:13.880
working on in here.

6
00:00:13.880 --> 00:00:18.070
But for now,
let's try to work on the auto saving part.

7
00:00:18.070 --> 00:00:21.740
Which if you think about it,
it's really just us updating the entry,

8
00:00:21.740 --> 00:00:23.620
we're just updating the content.

9
00:00:23.620 --> 00:00:27.602
So that means we need to make a route to
update, we need to make a function to

10
00:00:27.602 --> 00:00:31.830
update, and then we need to make
the logic that does the updating.

11
00:00:31.830 --> 00:00:35.230
So let's get to work.

12
00:00:35.230 --> 00:00:39.410
We will go into our routes api/journal.

13
00:00:40.530 --> 00:00:45.226
Just following rest conventions,
we'll make another folder in here

14
00:00:45.226 --> 00:00:50.081
underneath journal called id, so
that way you can make a patch request to

15
00:00:50.081 --> 00:00:54.320
/api/journal / the ID of
the journal which you wanna patch.

16
00:00:56.400 --> 00:01:00.351
So on the inside of that, it's not an api
route unless we make a route.ts file.

17
00:01:08.774 --> 00:01:10.708
And then we want to export.

18
00:01:13.802 --> 00:01:16.568
Const PATCH.

19
00:01:19.215 --> 00:01:21.570
So we're gonna do a PATCH and not a PUT.

20
00:01:21.570 --> 00:01:22.760
Honestly, it doesn't matter.

21
00:01:22.760 --> 00:01:25.410
We can do whatever we want with
whatever function we want.

22
00:01:25.410 --> 00:01:28.119
The verbs don't change our logic,
our behavior,

23
00:01:28.119 --> 00:01:32.152
it just change the expectations of
the client that's issuing the request.

24
00:01:32.152 --> 00:01:36.923
In this case, the expectation of
a PATCH is that you did an update but

25
00:01:36.923 --> 00:01:40.858
you didn't override that
whole thing in the database,

26
00:01:40.858 --> 00:01:43.807
you changed some of the properties on it.

27
00:01:43.807 --> 00:01:47.640
Whereas a PUT would be,
replace this whole thing with this thing.

28
00:01:47.640 --> 00:01:49.180
That's the difference,
they're both updates.

29
00:01:49.180 --> 00:01:52.330
One just replaces,
the other one just updates.

30
00:01:52.330 --> 00:01:54.250
So when I think of update,
I actually think of PATCH.

31
00:01:54.250 --> 00:01:58.577
And when I think of PUT,
I think of replace.

32
00:02:02.082 --> 00:02:04.480
But again,
you don't have to do any of that.

33
00:02:04.480 --> 00:02:07.370
You can make PATCH do GET if you
want you can make GET do POST.

34
00:02:07.370 --> 00:02:08.680
It doesn't matter,
you can do whatever you want.

35
00:02:08.680 --> 00:02:11.960
If you use Graph QL they only
ever do POST request and

36
00:02:11.960 --> 00:02:15.500
they only ever do 200 status
codes even on errors.

37
00:02:15.500 --> 00:02:21.743
It doesn't matter, so it's just up to, do
you want to tap into how the web has been

38
00:02:21.743 --> 00:02:27.100
built since before any of us were born,
then yeah, you would do this.

39
00:02:28.960 --> 00:02:30.770
Okay, cool.

40
00:02:30.770 --> 00:02:33.330
PATCH, what are we gonna do here?

41
00:02:33.330 --> 00:02:36.530
Well, we need access to the params.

42
00:02:36.530 --> 00:02:40.260
So the first thing is,
let's get the request.

43
00:02:40.260 --> 00:02:42.190
So we have the request here.

44
00:02:42.190 --> 00:02:45.844
And then a params is the next argument
which is an object because it's

45
00:02:45.844 --> 00:02:48.890
the structure and
then get params like that.

46
00:02:48.890 --> 00:02:49.870
That'll give us params.

47
00:02:51.310 --> 00:02:57.159
And then the first thing we wanna do is,
because we need to update the,

48
00:02:57.159 --> 00:03:02.960
we wanna update the entry we first
need to know who this user is.

49
00:03:02.960 --> 00:03:08.437
So, here I know what I'm about to do,

50
00:03:08.437 --> 00:03:16.839
let me make this async await
getUserByClerkID like that.

51
00:03:18.740 --> 00:03:22.054
So we got our user, and

52
00:03:22.054 --> 00:03:28.480
then we can say updatedEntry is await.

53
00:03:28.480 --> 00:03:33.709
Let's bring in prisma,
prisma.journalEntry.,

54
00:03:33.709 --> 00:03:37.786
and then we're just gonna say, update.

55
00:03:45.013 --> 00:03:47.378
And then for update,
we first need to say where, so

56
00:03:47.378 --> 00:03:49.280
find the thing that we wanna update.

57
00:03:49.280 --> 00:03:55.328
In this case,
we want to do our combo index here and

58
00:03:55.328 --> 00:04:01.379
we want to find the userId
who belongs to userId and

59
00:04:01.379 --> 00:04:05.740
the id that belongs to params.id.

60
00:04:05.740 --> 00:04:10.008
And I know it's called id on params
because that's what I called the folder,

61
00:04:10.008 --> 00:04:10.610
it's id.

62
00:04:11.630 --> 00:04:13.779
Whatever I call the folder,
that's what params is gonna have on it.

63
00:04:15.080 --> 00:04:19.010
And this thing's just still freaking out
cuz it's, you forgot to add a data thing.

64
00:04:19.010 --> 00:04:24.830
So we're gonna add data, and
then data is what we want to update.

65
00:04:24.830 --> 00:04:27.030
What is the update in
which you are issuing?

66
00:04:28.760 --> 00:04:34.320
So in this case, I wanna update content.

67
00:04:34.320 --> 00:04:37.990
So that means content's gonna
come in from the request object.

68
00:04:37.990 --> 00:04:39.420
So we good, we can grab that.

69
00:04:39.420 --> 00:04:42.977
So I can say,
looking at this structure assuming

70
00:04:42.977 --> 00:04:47.850
the client's gonna set up an object
with a content property on it.

71
00:04:49.330 --> 00:04:51.560
And since we're writing the code,
it is gonna do that.

72
00:04:52.670 --> 00:04:59.080
And we can just await request.json,
and that's how you get the body.

73
00:05:00.210 --> 00:05:01.980
If you've ever used Express or

74
00:05:01.980 --> 00:05:06.289
anything else like that in the past
you've probably done like rec.body.

75
00:05:06.289 --> 00:05:09.160
Next.js uses web standards.

76
00:05:09.160 --> 00:05:13.020
It uses the request standard.

77
00:05:13.020 --> 00:05:19.210
So this request standard that's
default in the web, I'll open this.

78
00:05:21.440 --> 00:05:25.370
This is how you would get JSON from it,
and it says right here.

79
00:05:25.370 --> 00:05:29.127
Returns a promise that resolves the result
of parsing the request body as JSON,

80
00:05:29.127 --> 00:05:29.974
request.json.

81
00:05:35.319 --> 00:05:36.960
Cool, so we got the content.

82
00:05:38.220 --> 00:05:43.990
We got to update it thing,
should be good to go.

83
00:05:43.990 --> 00:05:50.370
Let's just return NextResponse.json,

84
00:05:50.370 --> 00:05:58.176
put a data property on there
with the updatedEntry.

85
00:05:58.176 --> 00:06:03.193
All righty, and then we're gonna
head over to our utils, api.

86
00:06:03.193 --> 00:06:06.290
And we need to make a function
here in which we update an entry.

87
00:06:06.290 --> 00:06:07.600
So let's do that.

88
00:06:07.600 --> 00:06:11.550
Const export const,
actually I'll do this at the top.

89
00:06:11.550 --> 00:06:13.000
It's more screen real estate.

90
00:06:17.389 --> 00:06:23.244
UpdateEntry, this is just going to,
I guess we could just take the content for

91
00:06:23.244 --> 00:06:27.785
now, since we know that's
the only thing we're updating.

92
00:06:30.481 --> 00:06:32.340
I guess we need to id as well nevermind.

93
00:06:32.340 --> 00:06:37.751
So we'll say id and
then the content, like that.

94
00:06:42.543 --> 00:06:47.578
And then what we can do is
we can just say res = await.

95
00:06:49.994 --> 00:06:55.250
Fetch, we're gonna make
a new request like so.

96
00:06:56.370 --> 00:07:02.336
That request takes in a URL,
so we can say createURL,

97
00:07:02.336 --> 00:07:06.844
which is going to be /api/journal/,

98
00:07:06.844 --> 00:07:11.280
I need to interpolate the id here.

99
00:07:11.280 --> 00:07:13.000
So we'll change that to a template stream.

100
00:07:15.310 --> 00:07:16.240
There we go.

101
00:07:19.260 --> 00:07:23.630
And then request takes in a second
arguments for our method.

102
00:07:25.930 --> 00:07:30.024
Which is PATCH since we did the PATCH,
and then the body,

103
00:07:30.024 --> 00:07:35.483
it's gonna be JSON.stringify an object
that has a content property on it,

104
00:07:35.483 --> 00:07:39.170
cuz that's what we're
expecting on the back end.

105
00:07:39.170 --> 00:07:45.710
If you remember, we're expecting content
on the body, so I'm passing that up.

106
00:07:48.868 --> 00:07:49.700
Like that.

107
00:07:51.378 --> 00:07:52.186
Cool.

108
00:07:53.718 --> 00:07:54.845
And same thing.

109
00:07:56.272 --> 00:07:58.228
If res.ok

110
00:08:00.103 --> 00:08:05.019
Then we can just say yeah, given the data,

111
00:08:05.019 --> 00:08:09.809
await res.json and return data.data.

112
00:08:09.809 --> 00:08:14.511
We building abstraction
around this since we repeated

113
00:08:14.511 --> 00:08:18.310
ourselves twice already, but it's fine.

114
00:08:18.310 --> 00:08:23.184
I feel like I need more reps using
the new request object anyway,

115
00:08:23.184 --> 00:08:27.530
so I don't mind doing it until
it becomes annoying to me.

116
00:08:27.530 --> 00:08:31.775
Because it's still somewhat new, so
I don't mind getting those reps in.

117
00:08:34.120 --> 00:08:35.163
Yes.

118
00:08:35.163 --> 00:08:37.240
&gt;&gt; How would we do air handling here?

119
00:08:38.430 --> 00:08:43.108
&gt;&gt; Yeah, I mean, I guess it depends on
what you want to do with the air, but so.

120
00:08:43.108 --> 00:08:46.760
Basically, the res.ok just means
that it was a status code.

121
00:08:46.760 --> 00:08:49.930
It was a non four or 500 status code.

122
00:08:49.930 --> 00:08:51.640
If that's the truth, then this is good.

123
00:08:51.640 --> 00:08:54.910
Anything else is bad, right?

124
00:08:54.910 --> 00:08:56.151
This is terrible.

125
00:08:56.151 --> 00:08:59.678
But what you would probably want to do is,
well, so

126
00:08:59.678 --> 00:09:03.713
there's many different ways
to handle an error, right?

127
00:09:03.713 --> 00:09:08.640
So one you might get a error status code,
that's the case, this else will be fine.

128
00:09:08.640 --> 00:09:13.194
The other cases is,
you get a good status code, but for

129
00:09:13.194 --> 00:09:17.660
some reason,
this breaks trying to get json breaks.

130
00:09:17.660 --> 00:09:21.440
So then, you would need to
try catch in here, right?

131
00:09:21.440 --> 00:09:27.913
So you have to do that or you could
just try catch the entire fetch call,

132
00:09:27.913 --> 00:09:35.171
use try catch this entire thing, and
then try to handle the error that way too.

133
00:09:35.171 --> 00:09:40.225
But because this function is
completely isolated from the UI and

134
00:09:40.225 --> 00:09:43.315
the UIs can be either server or client,

135
00:09:43.315 --> 00:09:49.317
it's probably better just to return
when you find your error, when error.

136
00:09:49.317 --> 00:09:54.652
It's probably better just to
return something like error,

137
00:09:54.652 --> 00:09:57.901
true or something like that, code.

138
00:09:57.901 --> 00:10:03.008
Whatever your codes are,
and then message for UI.

139
00:10:03.008 --> 00:10:06.572
You can put a message here if you wanted
to, and then that way, any UI, whether

140
00:10:06.572 --> 00:10:10.253
it's frontend or backend, can take that
and do whatever they need to do with it.

141
00:10:12.297 --> 00:10:13.900
That's probably how I would do it.

142
00:10:13.900 --> 00:10:15.670
I mean,
you can even have the backend do this too.

143
00:10:15.670 --> 00:10:18.093
You can have the backend send back errors.

144
00:10:25.168 --> 00:10:26.067
Any other questions?

145
00:10:28.783 --> 00:10:30.126
Yep.

146
00:10:30.126 --> 00:10:34.030
&gt;&gt; I don't see a header object,
do we get some kind of abstraction for it?

147
00:10:34.030 --> 00:10:35.830
Where do we specify the content type?

148
00:10:37.300 --> 00:10:40.130
&gt;&gt; The header option,
and the request objects?

149
00:10:41.160 --> 00:10:43.290
There is a header option
in here somewhere.

150
00:10:43.290 --> 00:10:46.060
Yeah, you just do headers like this.

151
00:10:46.060 --> 00:10:46.760
You can pass it in.

152
00:10:46.760 --> 00:10:49.545
I guess you're asking,
where do we put it cuz I'm not using it?

153
00:10:49.545 --> 00:10:54.427
Well, it's just implied that if you add
a body that you're probably doing JSON so

154
00:10:54.427 --> 00:10:56.925
you don't have to add the headers there.

155
00:10:56.925 --> 00:11:01.874
It's implied you don't have to be
specific using the request object,

156
00:11:01.874 --> 00:11:07.910
the request object was was made in late
2020s, so or I'm sorry, early 2020.

157
00:11:07.910 --> 00:11:11.342
So it just knows that you're probably
doing JSON whereas everything before that,

158
00:11:11.342 --> 00:11:12.480
didn't prioritize that.

159
00:11:12.480 --> 00:11:14.940
So it's making a really good
assumption that that's what you want.

160
00:11:14.940 --> 00:11:16.940
But if you wanna do headers,
you could, you could say headers.

161
00:11:18.090 --> 00:11:22.820
Which actually you could use
the new headers like this.

162
00:11:22.820 --> 00:11:24.946
Yeah, there's a header standard too.

163
00:11:26.542 --> 00:11:29.940
There's all types of stuff.

164
00:11:29.940 --> 00:11:31.716
I like it, I'm for it.

