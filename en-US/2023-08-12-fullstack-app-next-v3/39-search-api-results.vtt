WEBVTT

1
00:00:00.130 --> 00:00:04.255
Right now, we have a qa done,
assuming it works.

2
00:00:04.255 --> 00:00:08.149
[LAUGH] And what we need to do now is
make sure we call this an API route, so

3
00:00:08.149 --> 00:00:12.448
we can call it from the front-end of that
form that we created with our input.

4
00:00:12.448 --> 00:00:14.610
So let's make a new API route.

5
00:00:14.610 --> 00:00:22.143
We'll go to api/, instead of doing
/journal, we'll just do api/question.

6
00:00:24.595 --> 00:00:27.398
And make a route.ts in there
if you're using TypeScript.

7
00:00:27.398 --> 00:00:32.108
And we'll make this a POST request,
so I'll just export const POST.

8
00:00:35.532 --> 00:00:39.924
Like that, and
we'll need the request cuz we need to get

9
00:00:39.924 --> 00:00:44.606
the question that you ask, so
we'll get the request here.

10
00:00:47.530 --> 00:00:54.635
And then to get the question from
the request, we'll de-structure this.

11
00:00:54.635 --> 00:01:00.424
It'll be an object cuz we'll set up an
object that has a question property on it.

12
00:01:00.424 --> 00:01:06.666
And that's gonna from request.json,
like that.

13
00:01:06.666 --> 00:01:11.109
And then we need to get the user cuz
we gotta find all the users' entries.

14
00:01:11.109 --> 00:01:14.550
So we need to know who this user is, and

15
00:01:14.550 --> 00:01:19.944
we have our utility for that,
which is getUserByClerkID.

16
00:01:23.626 --> 00:01:28.533
And then now we just need
to get all the entries,

17
00:01:28.533 --> 00:01:31.721
so we can say entries = await,

18
00:01:31.721 --> 00:01:36.764
we bring in prisma.journalEntry.findMany.

19
00:01:36.764 --> 00:01:41.859
For now,
we'll just find them all that where,

20
00:01:44.995 --> 00:01:50.584
userId is user.id.

21
00:01:57.849 --> 00:02:07.143
And I really only want to select the,
The entries,

22
00:02:07.143 --> 00:02:11.977
or I'm sorry, the content, cuz we're
only using or we're making the docs.

23
00:02:11.977 --> 00:02:14.875
No, I guess we're using the id
createdAt and content, so

24
00:02:14.875 --> 00:02:16.544
I'm only gonna go select those.

25
00:02:16.544 --> 00:02:19.149
So I think id is already there,
but I was gonna put it anyway.

26
00:02:19.149 --> 00:02:20.783
It always comes with an id.

27
00:02:20.783 --> 00:02:24.788
We want content, and
then we want createdAt.

28
00:02:24.788 --> 00:02:25.660
Why do I do this?

29
00:02:25.660 --> 00:02:27.264
It's just performance on the database.

30
00:02:27.264 --> 00:02:29.882
The database grabs less data,
it moves faster.

31
00:02:32.891 --> 00:02:35.387
And it's less memory.

32
00:02:35.387 --> 00:02:40.372
And this was 100,000 entries, and
each entry had 30 properties on it.

33
00:02:40.372 --> 00:02:43.582
It's a smaller memory footprint,
we've only selected three properties.

34
00:02:47.607 --> 00:02:50.308
So we got that, and
now we can ask the question.

35
00:02:50.308 --> 00:02:55.197
So we can say, give me the answer,

36
00:02:55.197 --> 00:02:59.589
await the qa function from AI.

37
00:02:59.589 --> 00:03:04.760
And it takes in our question,
and it takes in our entries.

38
00:03:15.402 --> 00:03:20.808
And then we'll just send that
back on NextResponse.json,

39
00:03:20.808 --> 00:03:27.594
always sending back on a data prompt for
me, and something like the answer.

40
00:03:27.594 --> 00:03:29.272
Okay, so we have that.

41
00:03:29.272 --> 00:03:35.450
Now we just need to make a utility
function in our API utils.

42
00:03:35.450 --> 00:03:37.030
We'll make one that's called askQuestion.

43
00:03:37.030 --> 00:03:44.199
So export const askQuestion.

44
00:03:44.199 --> 00:03:46.769
It's gonna take in a question.

45
00:03:46.769 --> 00:03:47.892
It's gonna be async.

46
00:03:50.542 --> 00:03:54.407
And I'm just gonna copy this whole thing,
paste that.

47
00:03:57.352 --> 00:03:58.881
And POST is good.

48
00:03:58.881 --> 00:04:02.870
It's not /journal, it's /question now.

49
00:04:02.870 --> 00:04:07.778
And we just need to pass up
a body with a JSON.stringify of

50
00:04:07.778 --> 00:04:13.116
an object that has a question
property on it, and that's it.

51
00:04:23.780 --> 00:04:25.063
Any questions on that?

52
00:04:33.159 --> 00:04:35.740
Okay, we are almost there.

53
00:04:35.740 --> 00:04:41.047
What we need to do now is hook this
up to our form being submitted and

54
00:04:41.047 --> 00:04:46.562
do something with the response,
assuming [LAUGH] any of this works.

55
00:04:46.562 --> 00:04:49.990
So let's do that.

56
00:04:49.990 --> 00:04:53.356
Let's close all my windows there.

57
00:04:53.356 --> 00:04:59.586
So we'll go back to the app page and
the journal.

58
00:04:59.586 --> 00:05:04.576
We'll go to the question, and
here we go, so handleSubmit.

59
00:05:04.576 --> 00:05:05.924
So async function now.

60
00:05:08.795 --> 00:05:10.991
And we just wanna get the answer.

61
00:05:10.991 --> 00:05:15.911
So we can say answer = await,
ask the question,

62
00:05:15.911 --> 00:05:19.159
which is from @/utils/api.

63
00:05:21.866 --> 00:05:24.594
The question is just gonna be value.

64
00:05:30.143 --> 00:05:33.243
I'm gonna do some loading states here
cuz it's going to take a long time to

65
00:05:33.243 --> 00:05:34.451
come back, I'm guessing.

66
00:05:34.451 --> 00:05:38.235
So I'll just say loading, setLoading.

67
00:05:44.367 --> 00:05:51.257
SetLoading(true) when we start,
setLoading(false) when we're done.

68
00:05:51.257 --> 00:05:57.165
Also clear the input, so
setValue to empty string.

69
00:06:00.701 --> 00:06:02.297
So we got our answer.

70
00:06:02.297 --> 00:06:06.105
And then I need some state to
keep track of the answer, so

71
00:06:06.105 --> 00:06:10.822
I'll make some state for that,
and I'll say, response, I guess.

72
00:06:19.854 --> 00:06:24.133
And I'll say setResponse to answer.

73
00:06:34.862 --> 00:06:39.088
And then from there,
just some loading states, so,

74
00:06:42.928 --> 00:06:47.295
We can disable the button
if loading is true.

75
00:06:47.295 --> 00:06:49.912
We can disable the input
if loading is true.

76
00:06:53.241 --> 00:06:57.827
And we'll just show some stuff down here,
so

77
00:06:57.827 --> 00:07:04.945
if loading,
We wanna show just some really .div.

78
00:07:07.503 --> 00:07:08.408
That says loading.

79
00:07:12.210 --> 00:07:17.264
Like that, and then when we get
the response, we can show that.

80
00:07:21.413 --> 00:07:23.665
What did I call it?

81
00:07:23.665 --> 00:07:26.446
I guess I didn't spell it right.

82
00:07:26.446 --> 00:07:27.133
There we go.

83
00:07:29.285 --> 00:07:33.728
Get the response, and then if there's
a response, then just show it here.

84
00:07:36.781 --> 00:07:41.891
Cool, and, Should be good.

85
00:07:44.370 --> 00:07:48.850
Very simple, just doing a simple loading
state, keeping track of the input values

86
00:07:48.850 --> 00:07:52.575
and the actual response that we get
back so we can put it on the screen.

87
00:07:54.560 --> 00:07:58.180
This would have been a lot harder to
do with a server action possible.

88
00:07:58.180 --> 00:08:01.773
But eventually, you still have to
probably do a client component

89
00:08:01.773 --> 00:08:05.513
anyway to handle some of the stuff
you need from the server actions.

90
00:08:05.513 --> 00:08:10.588
So I'm just gonna keep it like that,

91
00:08:10.588 --> 00:08:14.686
and let's see what we broke.

92
00:08:14.686 --> 00:08:18.940
So I guess I should just
add some more entries here.

93
00:08:18.940 --> 00:08:22.213
Cohere, why does it want Cohere?

94
00:08:24.463 --> 00:08:25.427
Okay.

95
00:08:28.216 --> 00:08:29.528
I don't know why it's asking.

96
00:08:29.528 --> 00:08:34.991
So Cohere, it's a competitor to OpenAI.

97
00:08:34.991 --> 00:08:37.130
It's actually really cool.

98
00:08:37.130 --> 00:08:39.524
I don't know why it wants Cohere.

99
00:08:39.524 --> 00:08:46.482
Let me just double check my AI thing
to make sure I didn't do import

100
00:08:46.482 --> 00:08:52.373
where it's trying to get
Cohere from somewhere.

101
00:08:52.373 --> 00:08:53.428
I mean, I'll install it.

102
00:08:53.428 --> 00:08:58.386
I just don't know why it's asking for
it, it's weird, if it makes it happy.

103
00:09:03.392 --> 00:09:06.311
I guess it just really wanted that.

104
00:09:06.311 --> 00:09:08.609
[LAUGH] That was weird.

105
00:09:08.609 --> 00:09:10.117
I'm gonna make a new entry.

106
00:09:12.878 --> 00:09:16.284
Cool, I'm gonna write about my day.

107
00:09:16.284 --> 00:09:21.490
This is a very bad day for me.

108
00:09:21.490 --> 00:09:27.842
I didn't get the promotion that I wanted.

109
00:09:27.842 --> 00:09:29.010
So I'll save that.

110
00:09:34.210 --> 00:09:35.684
I'll make another one here.

111
00:09:39.640 --> 00:09:46.864
This one is,
let's say this was a very good day.

112
00:09:46.864 --> 00:09:51.324
Today, my brother

113
00:09:51.324 --> 00:09:57.186
graduated from school.

114
00:09:57.186 --> 00:09:58.969
So we'll have another good one.

115
00:10:02.461 --> 00:10:04.451
And that should be good enough.

116
00:10:04.451 --> 00:10:06.361
I just realized I never went back and
changed these cards.

117
00:10:06.361 --> 00:10:09.797
I guess we could do that too, but
I feel like you all know how to do that.

118
00:10:09.797 --> 00:10:16.897
So now I can say,
have I been in a good mood?

119
00:10:16.897 --> 00:10:20.083
I can ask that, cuz I don't know
if I'm in a good mood or not, and

120
00:10:20.083 --> 00:10:21.387
let's see what we broke.

121
00:10:27.126 --> 00:10:29.103
Yes, you have been in a good mood.

122
00:10:29.103 --> 00:10:32.096
[LAUGH] So apparently, I haven't.

123
00:10:32.096 --> 00:10:34.901
So let me ask you this,

124
00:10:34.901 --> 00:10:40.230
have I been in a bad
mood overall this week?

125
00:10:40.230 --> 00:10:43.687
I guess in its head, it's like, well,
you have been in a good mood, but

126
00:10:43.687 --> 00:10:45.575
that would mean you're in a good mood.

127
00:10:45.575 --> 00:10:47.888
It's like one of these,
you are in a good mood at one point.

128
00:10:47.888 --> 00:10:50.793
So yes, you have been in a good mood.

129
00:10:50.793 --> 00:10:53.115
So you gotta be very specific with it, so.

130
00:11:03.690 --> 00:11:06.942
The new context is not useful
in refining the original answer.

131
00:11:06.942 --> 00:11:08.878
Therefore, the original
answer still stands.

132
00:11:08.878 --> 00:11:12.292
Based on the new context, it is possible
that you have been in a bad mood overall

133
00:11:12.292 --> 00:11:14.690
this week due to not getting
the promotion you wanted.

134
00:11:14.690 --> 00:11:17.463
However, without additional information
about your mood throughout the rest of

135
00:11:17.463 --> 00:11:19.524
the week, it's still difficult
to determine for certain.

136
00:11:19.524 --> 00:11:24.996
So yeah, it's right, but it's kinda weird.

137
00:11:24.996 --> 00:11:26.656
You know you're not talking to a person.

138
00:11:26.656 --> 00:11:29.768
And there's ways to fix this
to make it seem better.

139
00:11:29.768 --> 00:11:36.750
I can, for instance,
do something like, where is it?

140
00:11:36.750 --> 00:11:39.038
I can tell this thing to talk
like a pirate if I want to, and

141
00:11:39.038 --> 00:11:40.484
it'll talk like a pirate, right?

142
00:11:40.484 --> 00:11:46.225
So [LAUGH] there's really
not much you can't do here.

143
00:11:46.225 --> 00:11:48.029
So you can steer it.

144
00:11:48.029 --> 00:11:51.955
You can make it do stuff, but
for the most part, it seems good.

145
00:11:55.112 --> 00:11:56.895
Any questions on this?

146
00:11:58.102 --> 00:11:58.819
Yes.

147
00:11:58.819 --> 00:12:04.447
&gt;&gt; There was just a comment that
in your langchain/embeddings

148
00:12:04.447 --> 00:12:09.202
import that you would add
/openai to the end of it?

149
00:12:09.202 --> 00:12:13.252
&gt;&gt; And not the root, and
that caused the Cohere?

150
00:12:13.252 --> 00:12:14.229
That makes sense.

151
00:12:14.229 --> 00:12:18.817
So if I did that, then it wouldn't have
tried to bring in that one file that

152
00:12:18.817 --> 00:12:20.602
probably had Cohere there.

153
00:12:20.602 --> 00:12:21.487
That makes sense.

154
00:12:21.487 --> 00:12:25.363
Yeah, I don't know why or
who is in charge of their, so langchain,

155
00:12:25.363 --> 00:12:30.650
they are mostly a Python shop, so I don't
think JavaScript is their native thing.

156
00:12:30.650 --> 00:12:34.966
So the way that they export their stuff
is not how people do it in JavaScript.

157
00:12:34.966 --> 00:12:37.330
It definitely is like Python.

158
00:12:37.330 --> 00:12:42.827
So it's very confusing and just unnatural
for me to understand how they do that.

159
00:12:42.827 --> 00:12:45.804
I can never remember any of these imports.

160
00:12:45.804 --> 00:12:47.491
They've already changed on me four times.

161
00:12:49.858 --> 00:12:52.049
&gt;&gt; That part at least is very JavaScripty.

162
00:12:52.049 --> 00:12:54.890
&gt;&gt; That part is JavaScripty, yeah,
that part just makes it, yeah.

