WEBVTT

1
00:00:00.600 --> 00:00:05.272
Let's try to get this thing in here and
saved, let's think about how we gonna save

2
00:00:05.272 --> 00:00:08.840
it actually,
there's some behavioral stuff here.

3
00:00:08.840 --> 00:00:12.690
Okay, so we have the save function
now inside the editor, here we go.

4
00:00:12.690 --> 00:00:18.750
We have the save function now,
but when do we save it?

5
00:00:18.750 --> 00:00:23.396
How would you say, how would anybody
save this if you were making this,

6
00:00:23.396 --> 00:00:25.648
how would you have this be, yeah?

7
00:00:25.648 --> 00:00:29.214
&gt;&gt; I mean, I'd probably wanna link it to
a button just because you wouldn't want

8
00:00:29.214 --> 00:00:32.025
somebody to accidentally backspace
their entire text area or

9
00:00:32.025 --> 00:00:33.701
actually paste something over it and

10
00:00:33.701 --> 00:00:36.690
then lose their entry cuz it's
automatically patched through.

11
00:00:36.690 --> 00:00:39.305
I'd want there to be some user validation.

12
00:00:39.305 --> 00:00:41.286
&gt;&gt; So a manual button where you hit save?

13
00:00:41.286 --> 00:00:41.821
&gt;&gt; Yeah.

14
00:00:41.821 --> 00:00:45.186
&gt;&gt; Okay, that works, anybody else?

15
00:00:45.186 --> 00:00:47.360
&gt;&gt; CRDTs obviously [LAUGH].

16
00:00:47.360 --> 00:00:51.130
&gt;&gt; [LAUGH] Sure we
definitely not doing that.

17
00:00:51.130 --> 00:00:52.136
&gt;&gt; How long is this workshop?

18
00:00:52.136 --> 00:00:53.086
&gt;&gt; Yeah.

19
00:00:53.086 --> 00:00:54.635
&gt;&gt; Not long enough for that.

20
00:00:54.635 --> 00:00:58.987
&gt;&gt; I would do either yeah button or
maybe an on key up but

21
00:00:58.987 --> 00:01:03.657
checking what the key is to
avoid something like that.

22
00:01:03.657 --> 00:01:06.901
Maybe both the pros,
those have pros and cons.

23
00:01:06.901 --> 00:01:09.186
&gt;&gt; Yeah, everything's a trade-off.

24
00:01:09.186 --> 00:01:13.729
Yeah, it's like finest line between
a good user experience of this,

25
00:01:13.729 --> 00:01:18.195
it's just working but also being
able to unstuck yourself if you just

26
00:01:18.195 --> 00:01:21.130
accidentally backspaced or did something.

27
00:01:21.130 --> 00:01:24.620
So, having good history,
there really is no right answer.

28
00:01:25.680 --> 00:01:28.419
In this course we're gonna do autosave, so

29
00:01:28.419 --> 00:01:31.900
this is going to save automatically for
you.

30
00:01:31.900 --> 00:01:34.387
But it's not gonna be looking at key
structures or anything like that,

31
00:01:34.387 --> 00:01:35.790
this is going to do it by state.

32
00:01:35.790 --> 00:01:37.967
It's gonna detect when state changes and

33
00:01:37.967 --> 00:01:41.560
try to debounce from that versus
looking at the keystrokes.

34
00:01:41.560 --> 00:01:45.563
It's not perfect but
it took me five minutes to make.

35
00:01:45.563 --> 00:01:48.298
So, it's gonna [LAUGH] be
a five-minute solution.

36
00:01:48.298 --> 00:01:51.144
&gt;&gt; [LAUGH]
&gt;&gt; So, it is a good rough draft,

37
00:01:51.144 --> 00:01:54.110
it's like just hey, I put that PR up
there, don't look at it yet though.

38
00:01:54.110 --> 00:01:57.580
It's just up there though, don't look,
I just want you to know it's there.

39
00:01:57.580 --> 00:02:02.840
But if you do look, let me know,
it's one of those vibes, cool.

40
00:02:02.840 --> 00:02:07.735
So, in order to do that I was just gonna
just create the auto save hook from

41
00:02:07.735 --> 00:02:13.140
scratch and I did, and then I realized
it's a two-hour lecture on doing that.

42
00:02:13.140 --> 00:02:16.130
So, I just found a package
that did almost what I wanted.

43
00:02:16.130 --> 00:02:19.991
So, we're gonna install that and
I believe,

44
00:02:19.991 --> 00:02:24.248
I forgot the name of the package
now I got to go look,

45
00:02:24.248 --> 00:02:28.917
I believe it is called,
yeah, react dash autosave.

46
00:02:28.917 --> 00:02:35.541
So, let's do that npm
install react dash autosave.

47
00:02:39.785 --> 00:02:43.089
And basically, what this hook does,

48
00:02:43.089 --> 00:02:48.240
I can show you before we do it,
is, where's an example?

49
00:02:48.240 --> 00:02:51.721
Here we go, so basically what this
hook does is you can call it,

50
00:02:51.721 --> 00:02:54.240
you can give it some data to watch.

51
00:02:54.240 --> 00:02:59.094
For changes, it puts that in a use effect,
I'm sure and then give it a function

52
00:02:59.094 --> 00:03:04.080
to call when it detects a change and
then you can adjust the dÃ©buts on that.

53
00:03:04.080 --> 00:03:07.890
So, it's pretty trivial,
but can be quite powerful.

54
00:03:07.890 --> 00:03:10.825
So, that's exactly what we're gonna do and

55
00:03:10.825 --> 00:03:15.536
then we can have a saving state to show
some feedback to the user that hey,

56
00:03:15.536 --> 00:03:20.290
this thing is currently saving right now,
and things like that.

57
00:03:20.290 --> 00:03:24.938
We won't handle edge cases like what
happens if they start typing when

58
00:03:24.938 --> 00:03:26.041
it's saving and

59
00:03:26.041 --> 00:03:31.960
what happens if error is out while they're
typing like we're not doing too much work.

60
00:03:31.960 --> 00:03:38.640
I've did that for like years and it's soul
crushing, [LAUGH] so I want to do that.

61
00:03:38.640 --> 00:03:43.300
But yeah, let's add some auto saving so

62
00:03:43.300 --> 00:03:49.890
I'll say use auto save like that,
you can bring that in.

63
00:03:52.700 --> 00:03:57.224
It doesn't have a return value so
it's just an object like that, and

64
00:03:57.224 --> 00:04:01.170
then the data prop, so
what do we want to watch for changes?

65
00:04:01.170 --> 00:04:04.321
Well of course, the value,
whenever the value changes,

66
00:04:04.321 --> 00:04:07.619
because that's the thing that's
being changed on change.

67
00:04:07.619 --> 00:04:14.928
And then on save, we can just run a
function here so I'm just gonna say async.

68
00:04:18.461 --> 00:04:21.651
And inside here, you'll get
the value that changed, right, so

69
00:04:21.651 --> 00:04:24.680
I'm just gonna put underscore value,
is the changed value.

70
00:04:26.600 --> 00:04:31.193
You could just grab the value from here,
but it might be a few cycles

71
00:04:31.193 --> 00:04:35.990
behind in the render cycle, so
it's not guaranteed to be up to date.

72
00:04:35.990 --> 00:04:41.090
It's the same logic from
if you were to call

73
00:04:41.090 --> 00:04:46.330
a set value that relied
on some other value,

74
00:04:46.330 --> 00:04:52.150
this is not guaranteed to
be what you think it is.

75
00:04:52.150 --> 00:04:56.884
So instead, you have to put that
in a callback like this to make

76
00:04:56.884 --> 00:05:01.620
sure that you are on the current
cycle that you think you're on

77
00:05:01.620 --> 00:05:05.380
cuz the reading circle
might be lagging behind.

78
00:05:07.200 --> 00:05:10.440
So, we get the value there and
then on save,

79
00:05:10.440 --> 00:05:16.400
we just wanna bring in our function that
we made which was called update entry.

80
00:05:16.400 --> 00:05:22.450
So, let's do that, so we'll say,
yeah cool, let's get the entry or updated.

81
00:05:22.450 --> 00:05:27.287
This will be a weight update entry,

82
00:05:27.287 --> 00:05:31.969
it takes in an ID and some content.

83
00:05:31.969 --> 00:05:35.251
So, the ID It's gonna be entry.id and

84
00:05:35.251 --> 00:05:39.537
then the content it's
gotta be underscore value.

85
00:05:46.738 --> 00:05:54.049
Cool, so we got that and then what do
we wanna do with this update, yes?

86
00:05:54.049 --> 00:05:56.727
&gt;&gt; I was just gonna ask if you could
speak to underscore value really quick.

87
00:05:56.727 --> 00:05:58.503
What does that pointing to,

88
00:05:58.503 --> 00:06:02.131
is that pointing to the current
state of the hook on eight?

89
00:06:02.131 --> 00:06:07.040
&gt;&gt; Yeah, so underscore value and
value are the same thing.

90
00:06:07.040 --> 00:06:10.410
They both represent the value
of the text area in this case.

91
00:06:10.410 --> 00:06:15.618
But the reason why we would want to
use this version of it and not this

92
00:06:15.618 --> 00:06:22.130
version of it is because of just how react
does rendering and how it does batching.

93
00:06:22.130 --> 00:06:26.066
If we instead use this value,
okay, I'll say this,

94
00:06:26.066 --> 00:06:32.800
this function gets called whenever
autosave detects a change from this value.

95
00:06:32.800 --> 00:06:34.620
So, it detects that change and

96
00:06:34.620 --> 00:06:38.890
then it issues a callback on which
we can then write some code in.

97
00:06:38.890 --> 00:06:43.022
That pretty much guarantees that we
have the latest version of this value,

98
00:06:43.022 --> 00:06:46.563
if we use this version of it,
it might not be the latest version,

99
00:06:46.563 --> 00:06:49.070
it could be a couple cycles behind.

100
00:06:49.070 --> 00:06:51.783
Especially on something like a text
editor, when someone's typing really fast,

101
00:06:51.783 --> 00:06:53.950
it might be a couple of keystrokes behind.

102
00:06:53.950 --> 00:06:57.680
So, if you use it, it'll work but
you might have some issues there.

103
00:06:57.680 --> 00:07:00.860
So, I put underscore in front of it
because it is the same thing as this,

104
00:07:00.860 --> 00:07:03.298
but you can't, I don't wanna,
I mean this works to,

105
00:07:03.298 --> 00:07:05.367
I don't have to put
underscore in front of it.

106
00:07:05.367 --> 00:07:09.943
It will still be the same thing, I just
hate doing variable shadowing like that,

107
00:07:09.943 --> 00:07:11.035
it's confusing.

108
00:07:16.773 --> 00:07:19.647
Cool, any other questions?

109
00:07:19.647 --> 00:07:26.258
No, okay, so we have that,
the other thing to note is that okay,

110
00:07:26.258 --> 00:07:31.790
what do we do with the updated
entry when it comes back,

111
00:07:31.790 --> 00:07:37.591
do we set that somewhere,
like do we put that somewhere?

112
00:07:37.591 --> 00:07:40.803
No, if we did that,
it would mess things up because

113
00:07:40.803 --> 00:07:45.064
if they started typing while this
was saving and then we went back and

114
00:07:45.064 --> 00:07:49.949
set the text area to what to save to it
would erase everything they just typed.

115
00:07:49.949 --> 00:07:53.710
So, we don't actually wanna update
the text area with an updated value.

116
00:07:53.710 --> 00:07:56.739
The text area is never gonna wait
on the server to update the screen,

117
00:07:56.739 --> 00:08:00.490
it's just gonna keep going, and
it's just gonna save in the background.

118
00:08:00.490 --> 00:08:04.425
So yes, that does create edge cases like
what if I hit back on the page before

119
00:08:04.425 --> 00:08:06.930
the autosave kicked in,
and things like that.

120
00:08:06.930 --> 00:08:10.803
So, you've gotta catch those edge cases,
and there are a lot but that's what you

121
00:08:10.803 --> 00:08:15.310
gotta do for a great user experience,
just gotta deal with those edge cases.

122
00:08:15.310 --> 00:08:20.045
So, right now we're not gonna do
anything with it right now, but

123
00:08:20.045 --> 00:08:22.320
we'll get to it in a minute.

124
00:08:22.320 --> 00:08:26.013
We should have a loading state though,
let's do that so

125
00:08:26.013 --> 00:08:29.719
we can know what's going on so
we can say it's loading.

126
00:08:29.719 --> 00:08:34.178
SetIsLoading equals useState false and

127
00:08:34.178 --> 00:08:39.157
then when this kicks off, we can say yeah,

128
00:08:39.157 --> 00:08:46.234
this thing is loading and
then this thing is done we can say okay,

129
00:08:46.234 --> 00:08:51.241
it's done, setIsLoading to false like so.

130
00:09:00.745 --> 00:09:04.450
And then we'll just throw something really
ugly on the screen when something is

131
00:09:04.450 --> 00:09:04.958
loading.

132
00:09:06.267 --> 00:09:08.809
Is loading and,

133
00:09:17.434 --> 00:09:19.493
Load it.

134
00:09:29.251 --> 00:09:33.267
Cool, any questions so far, yes?

135
00:09:33.267 --> 00:09:35.850
&gt;&gt; Is there any debouncing
control with autosave or

136
00:09:35.850 --> 00:09:37.934
can you speak to how it would debounce?

137
00:09:37.934 --> 00:09:41.262
&gt;&gt; Yeah, there is, what's it called,

138
00:09:41.262 --> 00:09:46.151
let me see, trying to get
the name of the property that,

139
00:09:46.151 --> 00:09:51.889
this is look at the doc, so
I'm trying to duck type right now use.

140
00:09:51.889 --> 00:09:56.988
Use react autoSave,
it does have an ability for

141
00:09:56.988 --> 00:09:59.671
you to pass in that time.

142
00:09:59.671 --> 00:10:01.590
Where is it at, interval, there it is.

143
00:10:01.590 --> 00:10:02.313
So, you can pass an interval.

144
00:10:02.313 --> 00:10:06.880
So, the number of milliseconds
between save attempts.

145
00:10:06.880 --> 00:10:09.405
So, basically the debounce attempt
by default is two seconds so

146
00:10:09.405 --> 00:10:11.130
you can play around with that.

147
00:10:11.130 --> 00:10:15.026
If you gonna to look at the source code,
which is something I always do on smaller

148
00:10:15.026 --> 00:10:17.810
libraries like this,
it's actually really simple.

149
00:10:17.810 --> 00:10:21.632
So, if you go look at
the use autosave component,

150
00:10:21.632 --> 00:10:25.000
it's just doing a few use effects, right?

151
00:10:25.000 --> 00:10:29.748
And it's using a use debounce hook which
is probably doing some debouncing I

152
00:10:29.748 --> 00:10:33.400
would imagine, they created themselves.

153
00:10:33.400 --> 00:10:37.587
And yeah, it's just watching
that data that you gave it and

154
00:10:37.587 --> 00:10:41.021
it's keeping track of
the functions with a ref,

155
00:10:41.021 --> 00:10:47.004
a ref is basically the same thing as state
except for it doesn't cause a re-render.

156
00:10:47.004 --> 00:10:52.482
And yeah, that's it, it's actually really,
really simple how they're doing it.

157
00:10:52.482 --> 00:10:57.611
So, you can take a look at it
if you wanna learn some more and

158
00:10:57.611 --> 00:11:03.473
then as far as the use deep bounce,
if you wanna take a look at that,

159
00:11:03.473 --> 00:11:07.594
yeah, it's literally just a set timeout.

160
00:11:07.594 --> 00:11:10.480
So, it's a simple thing, but
it's very powerful for sure,

161
00:11:10.480 --> 00:11:14.254
it's much simpler than what I was making,
which was five times the size of that,

162
00:11:14.254 --> 00:11:15.602
I was getting crazy with it.

163
00:11:20.259 --> 00:11:26.228
Okay, let's see what we broke, yeah?

164
00:11:26.228 --> 00:11:31.142
So, if I start typing something and
we wait two seconds, it's gonna break or

165
00:11:31.142 --> 00:11:34.482
it's gonna work,
we're gonna find out right now.

166
00:11:34.482 --> 00:11:37.926
So, let's wait two seconds,
it says loading,

167
00:11:37.926 --> 00:11:40.783
I didn't see an error, it looked good.

168
00:11:40.783 --> 00:11:44.938
So, if I refresh and this still
stays on the page, then it worked,

169
00:11:44.938 --> 00:11:46.139
looks like it did.

170
00:11:46.139 --> 00:11:52.591
So that was pretty clean, that was
some notion level user experience.

