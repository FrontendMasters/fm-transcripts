WEBVTT

1
00:00:00.060 --> 00:00:06.550
Now that we have the parser, we basically
are going to create a prompt template.

2
00:00:06.550 --> 00:00:09.989
We're gonna do some interpolation and
things like that,

3
00:00:09.989 --> 00:00:14.910
but we're not gonna do it ourself because,
come on now, we're not gonna do that.

4
00:00:14.910 --> 00:00:18.586
LangChain has a bunch of stuff
that we can use to create that,

5
00:00:18.586 --> 00:00:21.770
specifically something
called a prompt template.

6
00:00:21.770 --> 00:00:28.014
So we're gonna use a prompt template and
we're gonna give it a guiding a prompt and

7
00:00:28.014 --> 00:00:33.101
then we're gonna mix that in with
the schema that we just created.

8
00:00:33.101 --> 00:00:37.093
And then that way we'll get back the full
prompt that we wanna use combined with

9
00:00:37.093 --> 00:00:38.861
the actual journal entry as well.

10
00:00:38.861 --> 00:00:40.030
So that's what we're gonna do.

11
00:00:40.030 --> 00:00:43.365
So we just need to bring in
the PromptTemplate from LangChain and

12
00:00:43.365 --> 00:00:44.920
we can get started with that.

13
00:00:44.920 --> 00:00:49.965
So I'm just gonna make a function down
here that says getPrompt, like this.

14
00:00:53.362 --> 00:00:53.960
And yeah,

15
00:00:53.960 --> 00:00:58.161
all getPrompt is gonna do is just take
in some content from a journal entry.

16
00:01:00.963 --> 00:01:04.019
And then we can import a prompt from,

17
00:01:04.019 --> 00:01:10.630
let me see if I can figure this
import out without looking, prompts.

18
00:01:10.630 --> 00:01:11.680
Maybe it's just prompts.

19
00:01:13.010 --> 00:01:14.040
It is.

20
00:01:14.040 --> 00:01:15.120
Yeah, so it's just prompts.

21
00:01:15.120 --> 00:01:21.068
So then we wanna get PromptTemplate,
From langchain/prompts.

22
00:01:23.573 --> 00:01:26.624
So the first thing we
wanna do is we kinda wanna

23
00:01:26.624 --> 00:01:29.284
parse this Zod schema that we created.

24
00:01:31.312 --> 00:01:33.670
Or I should say format it.

25
00:01:33.670 --> 00:01:36.235
And I'm just gonna say,

26
00:01:36.235 --> 00:01:43.323
const formatted_instructions =
the parser that we just created,

27
00:01:43.323 --> 00:01:48.100
and then you can say
getFormatInstructions.

28
00:01:50.180 --> 00:01:54.118
If you were to log this, it's basically
taking this entire schema and

29
00:01:54.118 --> 00:01:57.170
doing the equivalent of what I did here.

30
00:01:57.170 --> 00:02:00.035
I will log it so you can see.

31
00:02:00.035 --> 00:02:02.880
And you'll see just how much better
it is at doing it than what I did.

32
00:02:02.880 --> 00:02:04.635
And you're like, okay, that's cool,

33
00:02:04.635 --> 00:02:07.705
cuz that's all it's doing is just creating
that for us so we don't have to do it.

34
00:02:11.892 --> 00:02:13.620
Okay, we got that.

35
00:02:13.620 --> 00:02:15.097
And then the next thing we wanna do here,

36
00:02:15.097 --> 00:02:17.150
as you can see we just want
to make this PromptTemplate.

37
00:02:17.150 --> 00:02:20.480
There's three things that go into
a PromptTemplate, the actual template.

38
00:02:20.480 --> 00:02:24.297
So this is like the steering instructions
of like this is what you are,

39
00:02:24.297 --> 00:02:26.570
these are the instructions.

40
00:02:26.570 --> 00:02:28.910
And then we have input variables for
interpolation.

41
00:02:28.910 --> 00:02:30.352
This will be the entry, and

42
00:02:30.352 --> 00:02:34.100
then any partial variables which
will be our format instructions.

43
00:02:34.100 --> 00:02:35.550
So, let's do that.

44
00:02:37.140 --> 00:02:42.852
So we'll say prompts = new PromptTemplate,

45
00:02:42.852 --> 00:02:50.813
like this, Template.

46
00:02:50.813 --> 00:02:54.822
So in this template, I'm just gonna
copy the one I had cuz I actually had to

47
00:02:54.822 --> 00:02:57.936
do a lot of trial and
error to get this template to be good.

48
00:02:57.936 --> 00:03:00.470
So I highly recommend you
copying this one too.

49
00:03:00.470 --> 00:03:04.135
And I'll copy and then I'll read it,
so you can see why I did it this way.

50
00:03:07.959 --> 00:03:11.080
So this one is basically
what I'm saying here.

51
00:03:12.815 --> 00:03:16.030
I think it's just freaking out
because of TypeScript, yeah, okay.

52
00:03:16.030 --> 00:03:20.260
So the template that I have here is I'm
saying analyze the following journal

53
00:03:20.260 --> 00:03:22.310
entry, follow the instructions and

54
00:03:22.310 --> 00:03:26.427
format your response to match the format
instructions, no matter what.

55
00:03:26.427 --> 00:03:27.728
And I'm screaming at it.

56
00:03:27.728 --> 00:03:31.487
And then on the new line, I'm going to
interpolate the formatted instructions,

57
00:03:31.487 --> 00:03:32.630
which are gonna be this,

58
00:03:32.630 --> 00:03:35.900
actually I'll just change the name
of that to format_instructions,

59
00:03:35.900 --> 00:03:39.300
and then the actual content,
the entry itself, the journal entry.

60
00:03:39.300 --> 00:03:43.010
So we're gonna put that in there, yes.

61
00:03:43.010 --> 00:03:46.549
&gt;&gt; Two things, like 30,
the word instructions,

62
00:03:46.549 --> 00:03:50.614
there's a typo there kinda
at the end of line 30.

63
00:03:50.614 --> 00:03:58.698
Sorry the first part of line 30, [LAUGH]
follow the instructions and format.

64
00:03:58.698 --> 00:04:00.480
&gt;&gt; Yeah, right, yeah.

65
00:04:00.480 --> 00:04:02.300
Yeah, so
this is a good time to talk about that.

66
00:04:02.300 --> 00:04:06.760
So yes, probably wanna fix that,
also the AI.

67
00:04:07.900 --> 00:04:10.581
AI does a really good job of like
correcting your grammar for you.

68
00:04:10.581 --> 00:04:13.200
So you could do typos,
it'll probably understand it.

69
00:04:13.200 --> 00:04:15.860
But if you do too many typos,
it probably will affect the output.

70
00:04:15.860 --> 00:04:16.930
But yes, thank you.

71
00:04:16.930 --> 00:04:19.580
&gt;&gt; And then line 20,
kind of the same deal.

72
00:04:19.580 --> 00:04:24.724
There's a hexadecimal color code that-
&gt;&gt; That-

73
00:04:24.724 --> 00:04:26.400
&gt;&gt; Represent, but as you said,

74
00:04:26.400 --> 00:04:28.283
probably would have been fixed.

75
00:04:28.283 --> 00:04:30.642
&gt;&gt; Yep, thank you.

76
00:04:35.510 --> 00:04:37.425
Cool, any questions on this so far?

77
00:04:41.284 --> 00:04:45.759
&gt;&gt; The no matter what, in your background,
have you played around with alternates and

78
00:04:45.759 --> 00:04:48.609
that is the best way to get it
to do the thing or is that?

79
00:04:48.609 --> 00:04:50.595
&gt;&gt; Yeah, that's the one?
&gt;&gt; Yeah, that's the one.

80
00:04:50.595 --> 00:04:51.269
&gt;&gt; Nice.

81
00:04:51.269 --> 00:04:52.560
&gt;&gt; That's a pro tip right there.

82
00:04:53.790 --> 00:04:57.803
Remember that, put at the end of all
your prompts, no matter what, or

83
00:04:57.803 --> 00:04:59.390
you're fired, right?

84
00:04:59.390 --> 00:05:00.860
And then it'd be like, I'm sorry.

85
00:05:02.000 --> 00:05:06.010
And then you feel bad, [LAUGH] cool.

86
00:05:06.010 --> 00:05:09.980
And then we have input variables.

87
00:05:09.980 --> 00:05:13.479
In this case it'll just be entry.

88
00:05:14.870 --> 00:05:17.500
And we will interpolate that later.

89
00:05:17.500 --> 00:05:22.090
And then we have partial variables,
which in this case will be,

90
00:05:22.090 --> 00:05:25.670
it will be an object with
the format instruction.

91
00:05:25.670 --> 00:05:27.630
So it just needs to be the same
name as you have here.

92
00:05:27.630 --> 00:05:32.780
So I have format_instructions, so
I'm gonna put format_instructions.

93
00:05:32.780 --> 00:05:37.243
So we're interpolating this, we're
interpolating the partial value variables

94
00:05:37.243 --> 00:05:40.122
now, we'll interpolate
the entry variable later.

95
00:05:47.306 --> 00:05:49.695
Okay, and then from there,

96
00:05:49.695 --> 00:05:55.480
now we're actually gonna call the format,
which is asynchronous.

97
00:05:55.480 --> 00:05:57.360
And this is where we actually
interpolate the entry.

98
00:05:57.360 --> 00:05:59.100
And then we'll get back our actual prompt.

99
00:05:59.100 --> 00:06:00.094
And then we'll log it in.

100
00:06:00.094 --> 00:06:01.540
And then we'll check it out.

101
00:06:01.540 --> 00:06:05.474
So I'm just gonna call this the input, and

102
00:06:05.474 --> 00:06:10.628
I'm just gonna await the prompt.format,
like this.

103
00:06:10.628 --> 00:06:12.040
Make this async at the top.

104
00:06:12.040 --> 00:06:16.232
And from here I'm just gonna say entry,

105
00:06:16.232 --> 00:06:21.296
cuz that's what we have for
our interpolation.

106
00:06:24.655 --> 00:06:26.450
If I can type, there we go.

107
00:06:26.450 --> 00:06:30.132
And then contents go here.

108
00:06:35.276 --> 00:06:38.794
And always return the input,
but I'll log it first.

109
00:06:42.955 --> 00:06:45.570
There we go.

110
00:06:45.570 --> 00:06:48.900
And then for analyze,
instead of taking in a prompt,

111
00:06:48.900 --> 00:06:52.163
we'll actually take in some
content from an entry.

112
00:06:52.163 --> 00:06:56.280
No, we'll just take in the entry itself,
and then we'll create a new prompt.

113
00:06:56.280 --> 00:07:00.666
So we'll say input = await getPrompt,

114
00:07:00.666 --> 00:07:06.410
and it just takes in that content,
like so.

115
00:07:06.410 --> 00:07:09.110
And then I'll pass in the input here.

