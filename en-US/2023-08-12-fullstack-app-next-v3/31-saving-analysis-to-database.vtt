WEBVTT

1
00:00:00.000 --> 00:00:04.400
Hopefully, somebody has their mind blown
about some of this really cool stuff and

2
00:00:04.400 --> 00:00:05.813
how easy it was to do this.

3
00:00:05.813 --> 00:00:09.814
I mean, we literally just hit an API and
then we have these really cool tools with

4
00:00:09.814 --> 00:00:12.700
laying chain to help us with parsing and
stuff like that.

5
00:00:12.700 --> 00:00:16.228
So the next thing we wanna
do is actually parse this.

6
00:00:16.228 --> 00:00:19.297
We wanna get the JSON from this text.

7
00:00:19.297 --> 00:00:25.466
And we want to actually
have the output be JSON.

8
00:00:25.466 --> 00:00:27.555
So this is one step we got to do.

9
00:00:27.555 --> 00:00:30.800
We just have to call parse
on a parser on the output,

10
00:00:30.800 --> 00:00:33.526
and that will give us back the JSON, okay?

11
00:00:33.526 --> 00:00:35.028
So we'll do that.

12
00:00:35.028 --> 00:00:39.254
Even with all of this, sometimes we might
not get back exactly what we want, so

13
00:00:39.254 --> 00:00:42.282
we might have to address that and
I'll talk about that.

14
00:00:42.282 --> 00:00:44.741
And the way [LAUGH] we
address it is with more AI.

15
00:00:44.741 --> 00:00:47.701
We just throw AI at it and it just works.

16
00:00:47.701 --> 00:00:48.958
So let's do that.

17
00:00:48.958 --> 00:00:51.128
So I'm gonna get rid of
my logs right quick.

18
00:00:52.755 --> 00:00:55.460
And then what I'm gonna do,
I'm gonna try to catch this.

19
00:00:55.460 --> 00:01:00.195
And the reason I'm gonna try to
cache this is because if our parser

20
00:01:00.195 --> 00:01:04.856
fails at trying to parse this JSON,
I want to do something else.

21
00:01:04.856 --> 00:01:12.191
So I'm just going to return
parser.parse the result.

22
00:01:14.867 --> 00:01:17.751
So remember,
our parser is based off this schema, so

23
00:01:17.751 --> 00:01:20.902
it's going to try to parse it
in the shape of this, right?

24
00:01:20.902 --> 00:01:22.494
So it's just gonna try
to get back to JSON.

25
00:01:25.482 --> 00:01:30.107
And if we get an error,
we'll log it so you can see it.

26
00:01:30.107 --> 00:01:34.627
This is the one time I actually do
want it to show an error unless it

27
00:01:34.627 --> 00:01:36.741
won't because I want it now.

28
00:01:36.741 --> 00:01:37.803
So we'll do that.

29
00:01:37.803 --> 00:01:42.128
And then the last thing we'll do is we'll,
we'll run it right click so we can see it.

30
00:01:42.128 --> 00:01:46.779
But I also just want to start moving
this stuff over out of the service site

31
00:01:46.779 --> 00:01:49.830
call that I'm doing on
the server component and

32
00:01:49.830 --> 00:01:53.892
bringing it to the actual place
where we're gonna be using it.

33
00:01:53.892 --> 00:01:57.657
But yeah, we can log the result
of this right quick just so

34
00:01:57.657 --> 00:01:59.471
we can have a sanity check.

35
00:01:59.471 --> 00:02:01.806
So I'm just gonna do the log over here.

36
00:02:03.694 --> 00:02:07.854
So I'll log this whole await thing.

37
00:02:07.854 --> 00:02:09.237
Gotta love async await.

38
00:02:14.269 --> 00:02:15.804
And I'm just gonna refresh this and

39
00:02:15.804 --> 00:02:18.268
run this just to see what it
looks like when it's parsed.

40
00:02:18.268 --> 00:02:21.303
If everything works, we should
just get back a JavaScript object,

41
00:02:21.303 --> 00:02:22.215
that's the point.

42
00:02:22.215 --> 00:02:25.488
And if it doesn't, the error should have
been thrown and we'll see the error.

43
00:02:30.797 --> 00:02:32.260
Cool, it worked.

44
00:02:32.260 --> 00:02:34.062
We got back a JavaScript object.

45
00:02:34.062 --> 00:02:36.222
So the parcel worked in this case.

46
00:02:36.222 --> 00:02:42.775
Again, if it would have broke,
we would have gotten the error.

47
00:02:42.775 --> 00:02:46.167
Basically, you would have gotten
a JSON parse error, like, hey,

48
00:02:46.167 --> 00:02:49.814
I tried to parse this, but I couldn't,
so you'll get a parsing error.

49
00:02:49.814 --> 00:02:51.097
There's a way to fix that.

50
00:02:51.097 --> 00:02:54.465
If it stays consistent,
it looks like we don't have to do it, but

51
00:02:54.465 --> 00:02:56.547
I might just show you how to do it anyway,

52
00:02:56.547 --> 00:03:00.313
[LAUGH] cuz I kept running into problems
with it, so we might do it anyway.

53
00:03:00.313 --> 00:03:02.509
Any questions on this?

54
00:03:02.509 --> 00:03:06.141
Okay, looks like we got everything we
need to insert this into the database.

55
00:03:06.141 --> 00:03:11.259
All we gotta do now is go to where we're
updating and creating an entry and make

56
00:03:11.259 --> 00:03:16.002
a new analyze instance in the database and
we can bring that into our UI.

57
00:03:16.002 --> 00:03:17.728
So let's do that.

58
00:03:17.728 --> 00:03:20.385
First things first,
I'm just gonna get rid of the call here.

59
00:03:20.385 --> 00:03:22.388
We don't need this anymore.

60
00:03:22.388 --> 00:03:24.384
That was just for me to test it out.

61
00:03:24.384 --> 00:03:26.103
We don't want this running here.

62
00:03:26.103 --> 00:03:28.817
We want this running in our APIs.

63
00:03:28.817 --> 00:03:34.053
So if I go to where we're creating
a journal which will be api/

64
00:03:34.053 --> 00:03:38.902
journal/route.ts, this is
where we create an entry.

65
00:03:38.902 --> 00:03:40.901
So I'll just go.

66
00:03:40.901 --> 00:03:45.226
I mean, I guess you could probably
skip doing an analysis on

67
00:03:45.226 --> 00:03:50.159
the initial entry because it's
always just gonna be this content,

68
00:03:50.159 --> 00:03:54.238
but we might as well just kick it off and
just do it there.

69
00:03:54.238 --> 00:03:56.468
So we'll just do it here.

70
00:03:56.468 --> 00:04:00.962
And the best way we can
do that is basically,

71
00:04:00.962 --> 00:04:04.738
we can wait until after this is done.

72
00:04:04.738 --> 00:04:07.643
We can do a nested right within here, but

73
00:04:07.643 --> 00:04:12.435
we'll just wait till it's done
because we wanna get the content.

74
00:04:12.435 --> 00:04:19.879
So we'll say const analysis

75
00:04:19.879 --> 00:04:24.845
= await analyze.

76
00:04:24.845 --> 00:04:28.471
And we just wanna pass in entry.content.

77
00:04:28.471 --> 00:04:29.846
That's it.

78
00:04:29.846 --> 00:04:34.097
And this should get us back
to the JavaScript object,

79
00:04:34.097 --> 00:04:37.504
unless it doesn't cause the parse broke.

80
00:04:37.504 --> 00:04:39.726
All right, we'll get that back.

81
00:04:39.726 --> 00:04:43.127
And then now we can save this in
the database with a new entry or

82
00:04:43.127 --> 00:04:44.402
a new analysis entry.

83
00:04:44.402 --> 00:04:49.555
So this will be newanalysis.

84
00:04:49.555 --> 00:04:52.440
Actually, we're not even gonna sit in
this back, so I'm just gonna await it.

85
00:04:52.440 --> 00:05:00.926
This will be
prisma.analysis.create like so.

86
00:05:00.926 --> 00:05:03.167
So we can create an analysis.

87
00:05:03.167 --> 00:05:10.320
If we go look at our schema, we can
see that an analysis needs an entry,

88
00:05:10.320 --> 00:05:14.341
a mood, summary, color, negative.

89
00:05:14.341 --> 00:05:18.069
I forgot to put subject in here.

90
00:05:18.069 --> 00:05:19.716
So let's add subject to the schema.

91
00:05:22.394 --> 00:05:23.983
So we'll add a subject there.

92
00:05:23.983 --> 00:05:29.141
We'll save that Because

93
00:05:29.141 --> 00:05:34.514
we did change the schema,
you know we gotta run npx prisma db push.

94
00:05:34.514 --> 00:05:36.196
Exactly, gotta do that.

95
00:05:36.196 --> 00:05:37.926
Probably you gonna get an error here.

96
00:05:37.926 --> 00:05:38.967
No, we're good.

97
00:05:38.967 --> 00:05:43.016
No, we haven't made any analyses yet,
so we're not gonna get an error.

98
00:05:43.016 --> 00:05:45.272
We would have though because
this is required, and

99
00:05:45.272 --> 00:05:49.311
we already had some analyses that didn't
like, you're making a new required field,

100
00:05:49.311 --> 00:05:51.949
but without a default,
you're gonna have some data loss.

101
00:05:51.949 --> 00:05:54.164
And then it'll be like we got
to reset the whole database and

102
00:05:54.164 --> 00:05:56.265
you just got to go through all
this stuff all over again.

103
00:05:56.265 --> 00:05:57.560
So we're good there.

104
00:05:57.560 --> 00:06:01.765
Highly recommend when you do
that to stop your server and

105
00:06:01.765 --> 00:06:05.074
started again because
the Prisma client and

106
00:06:05.074 --> 00:06:10.094
runtime won't pick up those
database changes until you restart.

107
00:06:10.094 --> 00:06:10.636
There we go.

108
00:06:10.636 --> 00:06:14.621
So we're gonna create, and
then we're gonna say data.

109
00:06:14.621 --> 00:06:19.891
And for the data here,
we need the entry ID,

110
00:06:19.891 --> 00:06:23.600
which will just be entry.id.

111
00:06:23.600 --> 00:06:28.505
And then we need the entire analysis
which we can just spread over cuz all

112
00:06:28.505 --> 00:06:32.756
the property names are the exact
same name in the schema as they

113
00:06:32.756 --> 00:06:35.718
are in the schema that
was created in here.

114
00:06:35.718 --> 00:06:37.393
Right, let me explain that one more time.

115
00:06:37.393 --> 00:06:42.790
So all the property names here,
mood, summary, color, negative,

116
00:06:42.790 --> 00:06:48.842
and subject are the same names and the
same types as they are in this zod schema.

117
00:06:48.842 --> 00:06:54.411
Mood, summary, subject, negative, color,
boolean, string, string, string, string.

118
00:06:54.411 --> 00:06:56.144
So we could just map
the whole object over.

119
00:06:56.144 --> 00:06:57.559
We don't have to write them one by one.

120
00:07:03.762 --> 00:07:08.910
Cool, this thing's freaking out because
one of these things might be undefined or

121
00:07:08.910 --> 00:07:10.318
something like that.

122
00:07:10.318 --> 00:07:11.774
But I'm just going to ignore it.

123
00:07:11.774 --> 00:07:12.775
Hopefully, it's fine.

124
00:07:12.775 --> 00:07:13.931
If not, we'll figure it out.

125
00:07:13.931 --> 00:07:16.966
Hopefully, it's just a TypeScript
error and not a run-time error.

126
00:07:16.966 --> 00:07:18.137
Okay, so we got that.

127
00:07:18.137 --> 00:07:21.872
We're just gonna do the same
thing inside of, well,

128
00:07:21.872 --> 00:07:24.700
I guess we'll do the update in a minute.

129
00:07:24.700 --> 00:07:27.054
Let's just try this right now
just to see if it creates.

130
00:07:27.054 --> 00:07:30.221
So we'll run this when we make a new one.

131
00:07:30.221 --> 00:07:32.322
And let's see what errors we get, if any.

132
00:07:32.322 --> 00:07:34.754
So that just means it was
gonna refresh right-click.

133
00:07:37.896 --> 00:07:40.395
Okay, now I'm just gonna make a new entry.

134
00:07:40.395 --> 00:07:42.481
Let's see what happens.

135
00:07:42.481 --> 00:07:45.852
It's definitely taking a long time, so
I know it's talking to OpenAPI right now.

136
00:07:50.145 --> 00:07:51.562
There we go.

137
00:07:51.562 --> 00:07:52.398
Okay, it did it.

138
00:07:52.398 --> 00:07:54.673
Yeah, I guess it was just stale or
something.

139
00:07:54.673 --> 00:07:55.886
Okay, so we have that.

140
00:07:55.886 --> 00:07:58.008
We can double-check in our database.

141
00:07:58.008 --> 00:07:59.785
Cause we were not putting
anything here yet,

142
00:07:59.785 --> 00:08:01.524
we can just check to see
if that got created.

143
00:08:01.524 --> 00:08:09.309
So I'm just gonna do npx prisma, studio.

144
00:08:09.309 --> 00:08:10.807
That's gonna open up our studio.

145
00:08:10.807 --> 00:08:14.965
You can see that I do you have
an analysis here and it was created for

146
00:08:14.965 --> 00:08:20.348
this journal entry, and it has a mood,
a summary, a color, a negative, and work.

147
00:08:20.348 --> 00:08:25.197
So that whole flow of taking in
the content of a journal entry,

148
00:08:25.197 --> 00:08:30.419
going to some LOM, asking it to do
an analysis on all these things,

149
00:08:30.419 --> 00:08:36.137
getting back structured output, and
then saving that to the database.

150
00:08:36.137 --> 00:08:37.389
You just did that.

151
00:08:37.389 --> 00:08:38.604
It's pretty impressive.

152
00:08:38.604 --> 00:08:41.402
This was so hard to do.

153
00:08:41.402 --> 00:08:45.026
Five years ago, six years ago,
you had to be an AI expert.

154
00:08:45.026 --> 00:08:47.395
You had to have access to GPUs.

155
00:08:47.395 --> 00:08:49.478
You had to have a good
model that was trained.

156
00:08:49.478 --> 00:08:54.469
You had to have it, which means you
had great access to clean data.

157
00:08:54.469 --> 00:08:57.419
There are so many things you
would had to have to do this, and

158
00:08:57.419 --> 00:08:59.310
it still wouldn't have been as good.

159
00:08:59.310 --> 00:09:01.029
It still would have been bad.

160
00:09:01.029 --> 00:09:04.219
So the fact that you just had an API
call like you hit a Pokemon API or

161
00:09:04.219 --> 00:09:06.607
something like that,
it's kinda impressive.

162
00:09:08.875 --> 00:09:10.693
And if you're already thinking like,

163
00:09:10.693 --> 00:09:13.839
wow, I can make some crazy stuff
with this technology, then yeah.

164
00:09:13.839 --> 00:09:16.746
When I said earlier, I'm having
a lot of fun just writing code now,

165
00:09:16.746 --> 00:09:17.718
it is because of this.

166
00:09:17.718 --> 00:09:18.633
I'm just like, man.

167
00:09:18.633 --> 00:09:20.431
I can make some crazy stuff.

