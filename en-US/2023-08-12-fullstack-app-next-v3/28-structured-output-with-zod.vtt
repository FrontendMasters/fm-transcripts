WEBVTT

1
00:00:00.480 --> 00:00:03.800
But as you can see, when it does work,
we are getting back those things.

2
00:00:03.800 --> 00:00:08.518
So now we got to find a way to
keep this consistent, parse this,

3
00:00:08.518 --> 00:00:12.660
extract it and
then add it to our database.

4
00:00:12.660 --> 00:00:16.227
So, going down that thought of
basically giving it a schema,

5
00:00:16.227 --> 00:00:20.895
we're gonna use some JavaScript schema
library to create the schema for us, and

6
00:00:20.895 --> 00:00:24.550
then create this prompt for us,
so we don't have to create it.

7
00:00:24.550 --> 00:00:26.145
We'll just write code, and

8
00:00:26.145 --> 00:00:30.075
that code will generate this prompt
with the schema embedded into it.

9
00:00:30.075 --> 00:00:32.763
And we'll get it back every single time,
and

10
00:00:32.763 --> 00:00:37.092
we'll just get back a JavaScript
object from this versus like a string.

11
00:00:39.134 --> 00:00:42.090
Sound pretty cool, right, yeah, all right.

12
00:00:42.090 --> 00:00:44.430
So let's do that, and
that's kind of what langchain is for.

13
00:00:44.430 --> 00:00:48.950
So few things here,
we need to install something.

14
00:00:48.950 --> 00:00:53.520
We need to install something called Zod,
you've never heard of Zod?

15
00:00:54.830 --> 00:00:58.040
Best way I could describe it is,
it's just a schema library.

16
00:00:58.040 --> 00:00:59.561
You could just make schemas in JavaScript.

17
00:01:01.258 --> 00:01:04.916
That's basically it,
it's probably the most popular one,

18
00:01:04.916 --> 00:01:07.669
I'll just show you what it looks like,
okay.

19
00:01:07.669 --> 00:01:10.128
I hate when people don't put
examples in their README, I get it.

20
00:01:10.128 --> 00:01:12.662
You spend a lot of time on the website,
it's nice.

21
00:01:12.662 --> 00:01:15.990
But just put one example in the README.

22
00:01:15.990 --> 00:01:20.200
So, that's a good example,
okay, here we go.

23
00:01:20.200 --> 00:01:21.675
It looks something like this, right?

24
00:01:21.675 --> 00:01:25.886
So you can make a schema,
you can give it like, what types.

25
00:01:25.886 --> 00:01:26.650
Here's a better one.

26
00:01:26.650 --> 00:01:28.400
So you can make a schema
that represents a user.

27
00:01:28.400 --> 00:01:30.680
It's an object that has a username,
it's type of string.

28
00:01:30.680 --> 00:01:33.065
We're basically gonna do that, all right?

29
00:01:33.065 --> 00:01:40.116
So get into our code,
we'll import Z from Zod like so.

30
00:01:43.153 --> 00:01:45.831
And then we need to import a few
other things from langchain, but

31
00:01:45.831 --> 00:01:47.479
let's just work on the schema for now.

32
00:01:47.479 --> 00:01:52.507
So let's just say schema = z., actually,

33
00:01:52.507 --> 00:01:58.564
no, there's a,
we're gonna use langchain right now.

34
00:01:58.564 --> 00:02:02.264
I forgot langchain has a plug-in for
Zyde that we're gonna use so

35
00:02:02.264 --> 00:02:04.156
we don't have to do it manually.

36
00:02:04.156 --> 00:02:10.280
So we're gonna import, from langchain,
this one's going to be there.

37
00:02:11.460 --> 00:02:14.086
Where is it,
I think it's like output parsers.

38
00:02:17.150 --> 00:02:22.782
Yeah, I think it's just from
output parsers, and that's Zod.

39
00:02:22.782 --> 00:02:24.196
I'll see they changed all their imports.

40
00:02:24.196 --> 00:02:27.464
Let's go look at the docs, Let's see.

41
00:02:30.914 --> 00:02:35.301
I'll put parsers underneath prompts,

42
00:02:35.301 --> 00:02:40.640
I'll put parser, Here we go,

43
00:02:40.640 --> 00:02:46.236
it is called yeah, structured output
parser and then .from Zod Schema.

44
00:02:46.236 --> 00:02:47.673
Yeah, that's way different
than what it used to be.

45
00:02:47.673 --> 00:02:50.778
So structured output parser.

46
00:02:50.778 --> 00:02:55.441
And then basically what we're gonna do is
just make this parser that takes in a Zod

47
00:02:55.441 --> 00:02:56.000
object.

48
00:02:56.000 --> 00:03:03.481
So what we can do is we can say, make
our parser here, structured output part.

49
00:03:05.233 --> 00:03:11.354
Structured output parser.fromZodSchema.

50
00:03:13.936 --> 00:03:17.456
And then we can just kinda create our
.schema, so the way it's gonna work,

51
00:03:17.456 --> 00:03:21.313
all we have to do is, in our case, it's an
object with those four properties on it.

52
00:03:21.313 --> 00:03:23.430
But we have to add this describe here.

53
00:03:23.430 --> 00:03:27.997
This describe is what langchain is
gonna use to write the prompt for us.

54
00:03:27.997 --> 00:03:32.520
So this is the description that you
wanna tell GPT what this field is.

55
00:03:32.520 --> 00:03:35.091
So you're only describing this field,
whereas,

56
00:03:35.091 --> 00:03:38.879
if you look at the prompt that I wrote,
I kind of described the whole thing.

57
00:03:38.879 --> 00:03:42.605
I was like,
this is what the whole thing looks like.

58
00:03:42.605 --> 00:03:45.288
What we're gonna be doing is we're
only gonna be describing each

59
00:03:45.288 --> 00:03:47.080
field individually.

60
00:03:47.080 --> 00:03:50.887
I didn't do that, I just said, give me
the summary, the mood, the subject.

61
00:03:50.887 --> 00:03:54.360
But I didn't describe what the mood was,
I did describe what the summary was.

62
00:03:54.360 --> 00:03:57.950
So it probably could have did a better job
at that if I gave it a better description.

63
00:03:57.950 --> 00:04:00.366
So that's what we're gonna do.

64
00:04:02.628 --> 00:04:08.210
So inside of our AI,
we're gonna make a z.object.

65
00:04:08.210 --> 00:04:12.931
It's gonna have a mood and
then mood's gonna be

66
00:04:12.931 --> 00:04:17.780
a z.string, and we're gonna say .describe.

67
00:04:17.780 --> 00:04:22.568
So here,
all we have to do is just describe, yes.

68
00:04:22.568 --> 00:04:26.287
&gt;&gt; Kinda an opinion question,
but can you experience so

69
00:04:26.287 --> 00:04:29.838
far, at what point,
at what level of complexity or

70
00:04:29.838 --> 00:04:35.641
usage do you find it's worth it to switch
over to using a structured output parser?

71
00:04:35.641 --> 00:04:39.340
Be it Zod or another one,
when using langchain or

72
00:04:39.340 --> 00:04:41.603
an API to connect with an LLM?

73
00:04:41.603 --> 00:04:45.047
Is it really just like don't
leave home without it or

74
00:04:45.047 --> 00:04:49.824
is there a certain level of complexity
at which point you really do want to

75
00:04:49.824 --> 00:04:53.683
just be structuring and
parsing your JSON, you get back?

76
00:04:53.683 --> 00:04:57.369
&gt;&gt; Yeah, for the most part I think
the most use cases out there probably

77
00:04:57.369 --> 00:05:01.781
aren't doing structured outputs,
they're doing natural language outputs.

78
00:05:01.781 --> 00:05:06.338
So they're using open AI to get back
a natural language in which they do for

79
00:05:06.338 --> 00:05:11.276
semantic searching, they render
documentation, they do text-to-voice.

80
00:05:11.276 --> 00:05:13.868
So for
them they don't want structured output, so

81
00:05:13.868 --> 00:05:17.923
I would say that's probably most of it for
the people doing structured output.

82
00:05:17.923 --> 00:05:21.593
If you're generating anything
that has any type of formatting,

83
00:05:21.593 --> 00:05:23.067
you're gonna need this.

84
00:05:23.067 --> 00:05:29.925
There's this, well, I mean, technically
we're still relying on prompt engineering.

85
00:05:29.925 --> 00:05:31.895
This thing's just making a prompt for us.

86
00:05:31.895 --> 00:05:35.171
There's been other advancements
that people have created to like

87
00:05:35.171 --> 00:05:36.405
get structured output.

88
00:05:36.405 --> 00:05:41.994
The best way to do it is to do something
called fine-tuning, where you can train,

89
00:05:41.994 --> 00:05:46.289
so if you think about an LLM,
let's say it's 99% trained.

90
00:05:46.289 --> 00:05:50.931
You can train the last 1% of it,
to do a very specific thing, you can say,

91
00:05:50.931 --> 00:05:53.244
here is a prompt that I will give you.

92
00:05:53.244 --> 00:05:55.841
And here's the output I would
expect you to give me, and

93
00:05:55.841 --> 00:05:58.392
I'm gonna give you
200,000 examples of that.

94
00:05:58.392 --> 00:06:01.011
And then now you know exactly what
the format that I'm looking for

95
00:06:01.011 --> 00:06:02.734
when I asked for something specifically.

96
00:06:02.734 --> 00:06:05.299
So you can fine tune OpenAPI as well, and

97
00:06:05.299 --> 00:06:10.063
OpenAI I will give you a custom model ID
that you can use to make API calls to.

98
00:06:10.063 --> 00:06:11.024
So you could do that.

99
00:06:11.024 --> 00:06:16.100
There's also something called,
Yeah, that's mostly it.

100
00:06:16.100 --> 00:06:17.683
There's another thing but
it's kind of complicated.

101
00:06:17.683 --> 00:06:19.163
So I'm not gonna get into it.

102
00:06:19.163 --> 00:06:22.800
But fine tuning, finding another model,
or in this case,

103
00:06:22.800 --> 00:06:25.434
prompt engineering is what we're doing.

104
00:06:25.434 --> 00:06:30.325
But we're using the tool to help us a
profit engineering versus having to figure

105
00:06:30.325 --> 00:06:35.362
this out yourself, because there's gonna
be a time where this is going to break,

106
00:06:35.362 --> 00:06:37.119
and I promise you, it will.

107
00:06:37.119 --> 00:06:39.707
Because actually,
when I built this course the first time,

108
00:06:39.707 --> 00:06:41.087
I didn't use the output parts.

109
00:06:41.087 --> 00:06:43.096
I was like, I'm just gonna do this,
it's gonna be fine, and

110
00:06:43.096 --> 00:06:43.919
it worked and it worked.

111
00:06:43.919 --> 00:06:49.163
And then when I got here, it stopped
working, I was okay, this ain't it.

112
00:06:49.163 --> 00:06:51.288
So, cool.

113
00:06:51.288 --> 00:06:54.826
So now we just need to
describe what the mood is.

114
00:06:54.826 --> 00:06:57.547
So I'll show you what,
just so what this looks like,

115
00:06:57.547 --> 00:07:00.825
I'll go to the code that I already
wrote so you can see what I put.

116
00:07:00.825 --> 00:07:03.846
So when I described the mood,
I basically said,

117
00:07:03.846 --> 00:07:07.180
the mood of the person who
wrote the journal entry.

118
00:07:07.180 --> 00:07:09.040
And that's what I described the mood as.

119
00:07:09.040 --> 00:07:14.038
I'm really trying to describe to the AI
what, I think the mood should be in much

120
00:07:14.038 --> 00:07:17.830
detail as I can but
be very brief at the same time.

121
00:07:17.830 --> 00:07:18.656
So in this case,

122
00:07:18.656 --> 00:07:22.270
the mood of the person who wrote
the journal entry is what I wanted to put.

123
00:07:22.270 --> 00:07:23.880
So I'm actually just gonna
put that there as well.

124
00:07:26.010 --> 00:07:31.042
And then for summary, same thing,

125
00:07:31.042 --> 00:07:34.573
z.string.describe.

126
00:07:34.573 --> 00:07:42.067
And for that one I put,
Quick summary of the entire entry.

127
00:07:42.067 --> 00:07:43.724
So I'm going to do that,

128
00:07:48.445 --> 00:07:51.085
Also I had some problems
when I didn't put periods on

129
00:07:51.085 --> 00:07:55.165
the end of these descriptions cuz I think
the way that it can catch them together,

130
00:07:55.165 --> 00:07:58.645
if you don't put a period there it
just creates this run on sentence,

131
00:07:58.645 --> 00:08:02.916
which I think OpenAI can figure out on its
own, but I'd rather not leave it a chance.

132
00:08:02.916 --> 00:08:07.868
So just putting the period there to
let her know that I'm done with that.

133
00:08:09.776 --> 00:08:12.640
And you can try your own descriptions,
you don't have to put these.

134
00:08:15.602 --> 00:08:17.533
And then for, what do we have?

135
00:08:17.533 --> 00:08:18.924
Whether it's negative or not.

136
00:08:22.912 --> 00:08:27.496
This will be z.boolean.describe.

137
00:08:29.379 --> 00:08:35.402
And I put, is the journal entry negative?

138
00:08:35.402 --> 00:08:37.708
And then I put in parentheses.

139
00:08:37.708 --> 00:08:40.877
Example, does it contain
negative emotions?

140
00:08:40.877 --> 00:08:41.570
Question mark.

141
00:08:41.570 --> 00:08:44.530
So this is kind of like a question.

142
00:08:44.530 --> 00:08:47.410
And then I give it a further reason or

143
00:08:47.410 --> 00:08:52.700
further thought to think about,
hey, think about it like this.

144
00:08:52.700 --> 00:08:54.589
Does it contain negative emotions?

145
00:08:58.234 --> 00:08:59.954
And I think I did have to
experiment with this one.

146
00:08:59.954 --> 00:09:03.074
I was not getting back what I thought,
I was given a Boolean but

147
00:09:03.074 --> 00:09:04.337
it was just never right.

148
00:09:04.337 --> 00:09:08.545
I would put in there like,
I'm not feeling good today at all.

149
00:09:08.545 --> 00:09:11.480
I don't wanna get out of bed, and
it was like this isn't negative.

150
00:09:11.480 --> 00:09:13.608
I'm like, no, that's pretty negative,
I don't know.

151
00:09:17.094 --> 00:09:22.169
And then the last one we wanna write for
now will be color.

152
00:09:22.169 --> 00:09:26.300
So for color, we're using a hexadecimal.

153
00:09:26.300 --> 00:09:31.190
So I put a hexadecimal color code that
represents the mood of the entry.

154
00:09:31.190 --> 00:09:36.633
And then I gave it an example of what
a hexadecimal will look like for

155
00:09:36.633 --> 00:09:38.570
a certain mood.

156
00:09:38.570 --> 00:09:43.840
So, I put example this color which is
like blue for representing happiness.

157
00:09:43.840 --> 00:09:44.840
So it knows.

158
00:09:47.669 --> 00:09:55.248
Some I'm gonna do that,
color: z.string.describe.

159
00:10:00.981 --> 00:10:05.950
So this is something that's called like a,
well, if we only wrote just this prompt,

160
00:10:05.950 --> 00:10:09.401
this would be like a one shot,
which basically just means,

161
00:10:09.401 --> 00:10:12.458
I gave it an example of what
I expect the output to be.

162
00:10:12.458 --> 00:10:14.600
This helps with steering.

163
00:10:14.600 --> 00:10:17.963
When you give the AI examples of like,
hey, for instance,

164
00:10:17.963 --> 00:10:21.392
I asked the AI to generate me
a React component and I was like,

165
00:10:21.392 --> 00:10:24.630
here's an example of how
I write React components.

166
00:10:24.630 --> 00:10:27.055
That's me giving it an example
that's called like a one shot,

167
00:10:27.055 --> 00:10:28.230
you can do many shot.

168
00:10:28.230 --> 00:10:30.745
If you don't give an example it's
called a zero shot as in like,

169
00:10:30.745 --> 00:10:33.800
I'm not even gonna tell you how
to do this, just figure it out.

170
00:10:33.800 --> 00:10:37.305
So typically, depending on what
you're asking and what you're doing,

171
00:10:37.305 --> 00:10:39.040
more examples could be better.

172
00:10:39.040 --> 00:10:42.540
Sometimes you don't need them, but
in this case, we're giving an example.

173
00:10:42.540 --> 00:10:45.272
So, cuz I wasn't sure if
just saying hexadecimal,

174
00:10:45.272 --> 00:10:47.270
it was going to give me a hexadecimal.

175
00:10:47.270 --> 00:10:51.170
So I was like,
this is what I mean, I mean this.

176
00:10:51.170 --> 00:10:54.435
So I'm steering it in the direction
that I want to keep it more consistent.

177
00:10:59.212 --> 00:11:00.915
Cool, any questions on this so far?

178
00:11:00.915 --> 00:11:02.651
Yes.

179
00:11:02.651 --> 00:11:06.291
&gt;&gt; I see you set temperature to zero, or
are we gonna talk about temperature later?

180
00:11:06.291 --> 00:11:07.994
&gt;&gt; That's right,
we'll talk about temperature next.

181
00:11:07.994 --> 00:11:10.558
I did say I was gonna get back to that,
okay.

182
00:11:10.558 --> 00:11:12.362
Any other questions on this?

183
00:11:16.262 --> 00:11:19.246
Okay, so temperature I did say
I was gonna talk about this,

184
00:11:19.246 --> 00:11:21.644
the best way I can describe
[LAUGH] temperature.

185
00:11:21.644 --> 00:11:26.175
So basically, whenever you run completion
or inference, there's a bunch of

186
00:11:26.175 --> 00:11:30.790
settings you can tweak to determine how
you get a certain output with most LLMs.

187
00:11:30.790 --> 00:11:32.130
Temperature is one of those settings.

188
00:11:32.130 --> 00:11:35.775
Temperature basically just
describes the variance and

189
00:11:35.775 --> 00:11:37.953
how random the outputs could be.

190
00:11:37.953 --> 00:11:41.291
A temperature of one means, so
think about randomness as like, okay,

191
00:11:41.291 --> 00:11:43.250
if you think about how predictions work.

192
00:11:43.250 --> 00:11:48.683
I'm gonna give you a prompt and
then to be able to predict the next word,

193
00:11:48.683 --> 00:11:52.218
it basically has statistics on, let's say,

194
00:11:52.218 --> 00:11:57.492
the next word that it can write can
be one of these 10 words, right?

195
00:11:57.492 --> 00:12:03.060
And then it ranks those words based off
of how likely each word would be next.

196
00:12:03.060 --> 00:12:06.060
So maybe this word is a 90%
chance this is the next word.

197
00:12:06.060 --> 00:12:08.450
This is a 50% chance,
this is the next word, right?

198
00:12:08.450 --> 00:12:14.470
Temperature basically allows that window
on which it can select to be bigger.

199
00:12:14.470 --> 00:12:16.430
So, let's say temperature is zero,

200
00:12:16.430 --> 00:12:20.210
it'll probably only pick the most
likely things to come next.

201
00:12:20.210 --> 00:12:23.030
But with a temperature of one, you're
like, I don't care, pick any one of those.

202
00:12:23.030 --> 00:12:26.902
Even one that's not likely to come next,
but it's on the radar somewhere,

203
00:12:26.902 --> 00:12:28.010
pick that.

204
00:12:28.010 --> 00:12:29.570
So what does that look like in practice?

205
00:12:29.570 --> 00:12:32.518
It just makes your stuff look and
sound more silly or

206
00:12:32.518 --> 00:12:34.652
more creative is what you would see.

207
00:12:34.652 --> 00:12:38.454
So a higher temperature
makes it more creative,

208
00:12:38.454 --> 00:12:42.266
a lower temperature makes
it more not creative.

209
00:12:42.266 --> 00:12:44.503
But it's helpful for
if you want factual things.

210
00:12:44.503 --> 00:12:48.515
If I'm using AI to ask questions
about some PDF, I gave it.

211
00:12:48.515 --> 00:12:51.870
I definitely want the temperature to
be zero cuz I want it to be factual and

212
00:12:51.870 --> 00:12:54.510
I want it to be real cuz as it
gets more silly and creative,

213
00:12:54.510 --> 00:12:55.776
it starts making up stuff.

214
00:12:55.776 --> 00:12:57.394
And that's called hallucination.

215
00:12:57.394 --> 00:13:00.476
So the AI will hallucinate, and
that's actually a billion dollar problem.

216
00:13:00.476 --> 00:13:03.589
There's a lot of companies out there
trying to solve AI hallucination.

217
00:13:03.589 --> 00:13:07.302
Because it sounds plausible,
the census is coherent,

218
00:13:07.302 --> 00:13:12.437
the grammar is correct, but if I fact
check that, that is completely wrong,

219
00:13:12.437 --> 00:13:15.914
and even putting temperature on 0,
won't fix it.

220
00:13:15.914 --> 00:13:19.681
And there's a lot of reasons because
of that, the training cutoff for,

221
00:13:19.681 --> 00:13:23.039
this GPT-3 had a trading
cutoff in like 2020 or 2021.

222
00:13:23.039 --> 00:13:27.135
So it knows nothing after that, and
even the stuff that it knows before that,

223
00:13:27.135 --> 00:13:29.166
it's probably still gonna be wrong.

224
00:13:29.166 --> 00:13:33.822
So there's a lot of ways around that but
yeah that's what temperature is.

225
00:13:33.822 --> 00:13:37.551
It's the silliness level, or
the, I call it the fun level,

226
00:13:37.551 --> 00:13:40.348
this crank it up to one
if you want a lot of fun.

