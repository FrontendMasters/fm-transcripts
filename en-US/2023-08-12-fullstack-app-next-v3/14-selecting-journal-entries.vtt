WEBVTT

1
00:00:00.780 --> 00:00:06.630
Let's work on the journal,
getting all the entries.

2
00:00:06.630 --> 00:00:07.540
Let's just do that.

3
00:00:07.540 --> 00:00:10.840
It's fine if we don't have any right now,
we'll at least get an empty array.

4
00:00:10.840 --> 00:00:13.721
Then when we're able to make them, they'll
just show up on a page magically and

5
00:00:13.721 --> 00:00:14.890
it'll feel good.

6
00:00:14.890 --> 00:00:16.580
So let's just do that.

7
00:00:17.820 --> 00:00:19.809
So in the journal, it's a server.

8
00:00:21.060 --> 00:00:25.003
It's a react server component, which means
we can just fetch all the general entries

9
00:00:25.003 --> 00:00:28.130
right here in this file because
it's gonna execute in Node.

10
00:00:28.130 --> 00:00:29.860
None of this code is gonna
end up in the browser.

11
00:00:29.860 --> 00:00:31.950
It's just going to be HTML.

12
00:00:31.950 --> 00:00:33.280
So let's make a function that does that.

13
00:00:33.280 --> 00:00:37.380
So we'll say const get entries.

14
00:00:37.380 --> 00:00:39.093
It's gonna be an a sync function.

15
00:00:41.023 --> 00:00:46.599
And we're gonna bring in our database,

16
00:00:46.599 --> 00:00:49.880
so prisma, like this.

17
00:00:53.845 --> 00:00:56.820
And we need to get all
the entries from the database.

18
00:00:56.820 --> 00:01:01.140
So let's look at our schema.

19
00:01:01.140 --> 00:01:04.320
Let's see if we can figure out what
we need to get the entries for

20
00:01:04.320 --> 00:01:05.830
this user from the database.

21
00:01:05.830 --> 00:01:11.198
So if we look at an entry, this is
everything an entry has, what would I,

22
00:01:11.198 --> 00:01:16.042
what would I need to know to get
all the entries for a certain user?

23
00:01:20.499 --> 00:01:22.289
&gt;&gt; User ID?
&gt;&gt; Yeah, I would need to know the user ID.

24
00:01:22.289 --> 00:01:26.495
I would need to know the user ID, but

25
00:01:26.495 --> 00:01:32.116
how can I get the user ID
while I'm in this page?

26
00:01:37.364 --> 00:01:38.608
&gt;&gt; Current user.
&gt;&gt; Current user will give

27
00:01:38.608 --> 00:01:41.740
me the clerk user, but
it won't give me the user in my database.

28
00:01:42.910 --> 00:01:44.444
But maybe there's something there.

29
00:01:49.870 --> 00:01:51.130
&gt;&gt; Is there an authed user?

30
00:01:54.070 --> 00:01:58.095
&gt;&gt; So it sounds like what you're saying,
we need to make that [LAUGH].

31
00:01:58.095 --> 00:01:59.410
So let's do that.

32
00:01:59.410 --> 00:02:00.260
So I'm gonna go to utilities.

33
00:02:00.260 --> 00:02:02.370
I'm gonna make a new file,
I'm gonna call it off.

34
00:02:03.580 --> 00:02:07.269
And basically in this file is, so
we can get the current clerk user,

35
00:02:07.269 --> 00:02:10.078
we can't get because clerk
has utilities around.

36
00:02:10.078 --> 00:02:14.629
Grabbing the information from cookies and
things like that, making an API call and

37
00:02:14.629 --> 00:02:15.743
giving us the user.

38
00:02:15.743 --> 00:02:18.909
But I need to get the user ID
of the user in my database.

39
00:02:18.909 --> 00:02:23.027
But I have the clerk user and I know
that I have a clerk ID on the user, so

40
00:02:23.027 --> 00:02:25.938
I can leverage that like,
if I have the clerk ID,

41
00:02:25.938 --> 00:02:30.350
I can find the user and then I can grab
that user's ID and find the entries.

42
00:02:30.350 --> 00:02:32.490
I'm probably gonna be doing that a lot.

43
00:02:32.490 --> 00:02:37.370
Let's make a helper function that
associates our clerk ID with a given user.

44
00:02:37.370 --> 00:02:39.670
Basically, find a user by this clerk ID.

45
00:02:39.670 --> 00:02:40.330
Let's do that.

46
00:02:40.330 --> 00:02:42.140
We're going to have to write that so
many times.

47
00:02:42.140 --> 00:02:46.727
So export const git user by

48
00:02:46.727 --> 00:02:51.319
clerk ID a sync function.

49
00:02:54.648 --> 00:02:59.149
And basically we'll just say and
we'll do that we'll do

50
00:02:59.149 --> 00:03:03.834
the author one not the user one
because all we need is the ID so

51
00:03:03.834 --> 00:03:09.871
we can say await off from clerk next like
this, this will give us the user ID.

52
00:03:13.861 --> 00:03:19.540
And then we can say,
const user equals await.

53
00:03:19.540 --> 00:03:24.506
We can bring in our prisma ,dot

54
00:03:24.506 --> 00:03:29.090
user dot find unique where,

55
00:03:29.090 --> 00:03:32.340
clerk ID is user ID.

56
00:03:32.340 --> 00:03:40.460
I'm actually gonna do a find throw,
find or throw here.

57
00:03:40.460 --> 00:03:44.084
Because if somehow you convince
clerk that you're real, but

58
00:03:44.084 --> 00:03:47.330
you don't exist in my database,
that's a problem.

59
00:03:47.330 --> 00:03:48.907
So I'm gonna throw that in.

60
00:03:54.298 --> 00:03:57.703
At this point, I would imagine you
are in my database because how

61
00:03:57.703 --> 00:04:01.640
would you have slipped past the new
user logic that we created over here?

62
00:04:01.640 --> 00:04:02.620
So something's not right.

63
00:04:02.620 --> 00:04:04.559
So I definitely wanna see
this error if it happens.

64
00:04:06.270 --> 00:04:09.955
Like that's the type of thinking you have
to do when you're building like a full

65
00:04:09.955 --> 00:04:12.320
stack app is like how these
systems work together.

66
00:04:12.320 --> 00:04:15.855
And that's why like, even if you're like
10 years in, and you're a senior engineer,

67
00:04:15.855 --> 00:04:18.318
you're gonna work on a new company
that has a new code base, and

68
00:04:18.318 --> 00:04:19.690
you're familiar with that code.

69
00:04:19.690 --> 00:04:21.180
You're familiar with the framework.

70
00:04:21.180 --> 00:04:23.640
You don't know how they're
things tie together.

71
00:04:23.640 --> 00:04:27.029
So you're still gonna take a long
time like this affects this, and

72
00:04:27.029 --> 00:04:30.260
this affects this, and this affects this.

73
00:04:30.260 --> 00:04:33.779
That's why there's frameworks out there
frameworks are there to kind of lessen

74
00:04:33.779 --> 00:04:37.000
that load, especially frameworks
that have conventions like nextJas.

75
00:04:37.000 --> 00:04:40.880
So you can just make a very safe
assumption like, yeah, that's a page.

76
00:04:40.880 --> 00:04:42.110
That's a route, that's a layout.

77
00:04:42.110 --> 00:04:43.630
Like you can just make those assumptions.

78
00:04:43.630 --> 00:04:47.136
Whereas, if this wasn't here,
then now you gotta be like, well,

79
00:04:47.136 --> 00:04:49.610
hey team,
what's the convention for our app?

80
00:04:49.610 --> 00:04:53.490
And they'll be like, yeah ask this person.

81
00:04:53.490 --> 00:04:55.225
And it's the person that like
quit like a month ago, so

82
00:04:55.225 --> 00:04:56.260
they don't work here anymore.

83
00:04:57.490 --> 00:05:00.960
And no one keeps up the style guy,
style guy is like two years old.

84
00:05:00.960 --> 00:05:03.110
So good luck looking at that.

85
00:05:03.110 --> 00:05:06.658
So this is why frameworks are great
because it helps lessen the burden of

86
00:05:06.658 --> 00:05:09.290
understanding what the conventions are.

87
00:05:09.290 --> 00:05:11.800
Even then,
you'll still be pretty down bad for

88
00:05:11.800 --> 00:05:14.390
a while until you figure
those conventions out.

89
00:05:16.310 --> 00:05:19.280
Okay, so now we have a user, and
then we can just return this user.

90
00:05:19.280 --> 00:05:20.864
We're not doing any error
handling right now.

91
00:05:23.152 --> 00:05:24.392
Cool.

92
00:05:25.747 --> 00:05:30.771
And then actually,
I'll probably just extend this to take in,

93
00:05:30.771 --> 00:05:37.954
I'll extend this to take in like Let's see

94
00:05:37.954 --> 00:05:44.669
I'm gonna say like includes this will make
sense in a second and then select, yeah.

95
00:05:44.669 --> 00:05:47.156
So when you do a search, you can say,

96
00:05:47.156 --> 00:05:52.340
select what properties you wanna
select from this user object.

97
00:05:52.340 --> 00:05:56.930
And then include is basically
like doing a joint table.

98
00:05:58.370 --> 00:06:02.146
Like if there were references on
this user schema, which there is.

99
00:06:02.146 --> 00:06:06.350
You can say like, include entries and
it will go grab those entries and

100
00:06:06.350 --> 00:06:08.850
include them here on the user.

101
00:06:08.850 --> 00:06:12.464
So I'm just gonna extend this function
to allow you to pass in those things so

102
00:06:12.464 --> 00:06:14.470
I can pass them into the query.

103
00:06:14.470 --> 00:06:16.100
So you can get them on the user object.

104
00:06:16.100 --> 00:06:16.600
Yes.

105
00:06:17.630 --> 00:06:20.879
&gt;&gt; Is there a reason you don't make
the ID in the user table the same as

106
00:06:20.879 --> 00:06:21.599
the clerk ID?

107
00:06:25.700 --> 00:06:26.310
&gt;&gt; Is there?

108
00:06:26.310 --> 00:06:30.359
Yeah, I don't wanna be bound to clerk if
I decide that I don't wanna use clerk

109
00:06:30.359 --> 00:06:30.930
anymore.

110
00:06:30.930 --> 00:06:32.437
And like, hey,
we're switching off providers, so

111
00:06:32.437 --> 00:06:33.910
we're gonna roll our own off.

112
00:06:33.910 --> 00:06:36.650
I don't wanna have clerk IDs.

113
00:06:36.650 --> 00:06:40.259
That's mostly it and
then also I don't want.

114
00:06:41.790 --> 00:06:45.331
I would rather the database be responsible
for making ID's than me be responsible for

115
00:06:45.331 --> 00:06:46.390
making ID's.

116
00:06:46.390 --> 00:06:51.190
It seems like that means every time you
make a new user, you have to make an API

117
00:06:51.190 --> 00:06:55.540
call, which I guess you have to do
right now anyway with the clerk ID.

118
00:06:55.540 --> 00:06:58.447
Yeah, I mean there's it's just those
reasons just thinking ahead of being like,

119
00:06:58.447 --> 00:07:00.300
I don't want to be bound to this.

120
00:07:00.300 --> 00:07:04.111
And I would rather the database do
the IDs, but if you feel safe and

121
00:07:04.111 --> 00:07:07.450
comfortable with that, yeah,
you could totally do it.

122
00:07:07.450 --> 00:07:11.710
I mean, all you have to do is just
get rid of everything after ID.

123
00:07:11.710 --> 00:07:16.200
Just get rid of this default,
and you're good.

124
00:07:16.200 --> 00:07:18.384
You just got to add the IDs yourself.

125
00:07:21.184 --> 00:07:22.735
But I'm not doing it.

126
00:07:25.664 --> 00:07:30.266
Okay, so back to auth, we have
getUserByClerkID this returns the user,

127
00:07:30.266 --> 00:07:33.100
you can include or
select whatever you want.

128
00:07:33.100 --> 00:07:37.317
If anything, these need some
healthy defaults, I believe so,

129
00:07:37.317 --> 00:07:42.200
hopefully passing an empty object
to prisma won't make it die.

130
00:07:42.200 --> 00:07:43.230
So hopefully that works.

131
00:07:44.270 --> 00:07:47.910
I think that's pretty good there.

132
00:07:47.910 --> 00:07:50.160
So we'll go back to our page.

133
00:07:50.160 --> 00:07:55.864
And now we can say user equals await,

134
00:07:55.864 --> 00:08:00.657
get user by clerk ID like that.

135
00:08:00.657 --> 00:08:05.140
And this thing's freaking out
because I made that non-optional?

136
00:08:05.140 --> 00:08:09.470
Let me see,
this is this is what I'm talking about.

137
00:08:09.470 --> 00:08:12.526
I gotta go, I'm like, all right, let me
tell this like I'm not doing all that I'm

138
00:08:12.526 --> 00:08:14.320
just gonna let that thing freak out.

139
00:08:14.320 --> 00:08:17.908
I'm [LAUGH] don't like
passing that stuff in so

140
00:08:17.908 --> 00:08:21.780
I'm not gonna do it,
it's just gonna freak out.

141
00:08:21.780 --> 00:08:23.650
It's still valid JavaScript.

142
00:08:23.650 --> 00:08:27.008
So cool.
We have our user and then now I can say,

143
00:08:27.008 --> 00:08:29.980
give me all the entries.

144
00:08:29.980 --> 00:08:36.873
So I can say Prisma dot journal entries,
journal entry.fine.

145
00:08:36.873 --> 00:08:42.340
Many where user

146
00:08:42.340 --> 00:08:48.233
ID is user.id.

147
00:08:48.233 --> 00:08:53.422
And an order by created

148
00:08:53.422 --> 00:08:58.150
at descending.

149
00:08:58.150 --> 00:09:03.560
So newest at the top or no,
that would be ascending, wouldn't it?

150
00:09:03.560 --> 00:09:05.670
No, no, no descending.

151
00:09:05.670 --> 00:09:06.550
Yeah, newest at the top.

152
00:09:09.570 --> 00:09:11.450
More time goes on, the bigger the number.

153
00:09:11.450 --> 00:09:18.380
So yeah, so we got our entries
that belong to the user.

154
00:09:18.380 --> 00:09:19.632
We can return those entries.

155
00:09:22.121 --> 00:09:23.110
Great.

156
00:09:23.110 --> 00:09:26.254
By default, if there are any entries,
it'll return an empty array.

157
00:09:29.831 --> 00:09:36.051
All right,
make this an async page components and

158
00:09:36.051 --> 00:09:44.356
then we can say, get them entries
= await getentries() Got it.

159
00:09:47.156 --> 00:09:48.800
And I'll just log this.

160
00:09:48.800 --> 00:09:50.997
Since nothing's gonna be there,
we can just see that,

161
00:09:50.997 --> 00:09:52.510
that it's an empty array, at least.

162
00:09:52.510 --> 00:09:56.038
Hopefully, we'll see
everything goes right.

163
00:10:02.366 --> 00:10:05.910
Cool, let's check it out.

164
00:10:08.890 --> 00:10:10.750
Can I read properties of undefined?

165
00:10:10.750 --> 00:10:12.970
So I'm destructuring.

166
00:10:12.970 --> 00:10:18.970
I guess I just need to, okay,
I gotta go on and do some work here.

167
00:10:18.970 --> 00:10:21.530
I didn't wanna do it,
but we'll just do it.

168
00:10:21.530 --> 00:10:27.380
So I could actually just do that,
and that will work actually

169
00:10:27.380 --> 00:10:33.125
that's probably the simplest
easiest way to do it I think.

170
00:10:35.939 --> 00:10:39.691
I know it then this will be undefined,
is so much work.

171
00:10:41.940 --> 00:10:43.810
This will happen when
you try to get fancy.

172
00:10:43.810 --> 00:10:45.710
All right, let's just do it the right way.

173
00:10:45.710 --> 00:10:53.000
So we'll just say options and
options equals an empty object.

174
00:10:53.000 --> 00:10:58.684
And then we can just say
select is options.select.

175
00:11:00.040 --> 00:11:02.303
Or like an empty object.

176
00:11:06.036 --> 00:11:11.060
And includes is options .includes or
an empty object.

177
00:11:11.060 --> 00:11:12.170
Assuming we can put empty object.

178
00:11:12.170 --> 00:11:15.875
If this breaks, then there's
a million ways to fix this, but

179
00:11:15.875 --> 00:11:19.884
I'll probably just scrap it because
it's already making me mad.

180
00:11:23.748 --> 00:11:24.248
Okay.

181
00:11:27.040 --> 00:11:28.300
Let's see, yeah, it looks like.

182
00:11:30.280 --> 00:11:32.220
Yeah, it doesn't like, I knew it.

183
00:11:32.220 --> 00:11:33.880
I called it.

184
00:11:33.880 --> 00:11:36.260
It doesn't like when it's empty, okay?

185
00:11:36.260 --> 00:11:38.829
We're just not gonna let you do it because
I don't feel like dealing with this.

186
00:11:41.700 --> 00:11:44.047
You just can't be extended,
how about that?

187
00:11:45.732 --> 00:11:47.384
You just don't get to do it.

188
00:11:48.644 --> 00:11:51.181
Try to make these nice functions and
they don't wanna play along.

189
00:11:55.277 --> 00:11:57.137
Cool, okay, so that fixed that.

190
00:11:57.137 --> 00:12:01.418
And then if we look in the output of our.

191
00:12:01.418 --> 00:12:03.453
Terminal, we see entries an empty array.

192
00:12:12.995 --> 00:12:17.590
And all this stuff you see here is
just the logging of the database.

193
00:12:17.590 --> 00:12:20.100
Every time you interact with the database,
it's gonna log.

194
00:12:20.100 --> 00:12:23.340
Because in my prisma client,
I put that on there.

195
00:12:23.340 --> 00:12:27.410
I'll put, I'll put a log each query.

196
00:12:27.410 --> 00:12:31.300
You can take that off if
you don't wanna see it.

197
00:12:31.300 --> 00:12:33.768
Yes.
&gt;&gt; Someone in the chat suggested that you

198
00:12:33.768 --> 00:12:35.770
could default them to undefined.

199
00:12:36.790 --> 00:12:38.158
&gt;&gt; Yeah.
&gt;&gt; Which would work,

200
00:12:38.158 --> 00:12:40.030
there's a lot of ways to do it.

201
00:12:40.030 --> 00:12:42.759
&gt;&gt; Yeah, I just don't,
I don't wanna do it anymore, but yes,

202
00:12:42.759 --> 00:12:44.290
you could default to undefined.

203
00:12:44.290 --> 00:12:48.275
I mean, honestly, the real way to do it
is just to first write the types for it.

204
00:12:48.275 --> 00:12:53.396
And then dynamically,basically
what you would do is

205
00:12:53.396 --> 00:13:00.356
you would take this object out,
make this a variable, like so, right?

206
00:13:00.356 --> 00:13:08.830
And then you would add dynamically
if something was here.

207
00:13:08.830 --> 00:13:11.570
So either the prop is there or
it isn't there.

208
00:13:11.570 --> 00:13:15.500
Versus that, and that's probably the best
way, you can also do that inline too.

209
00:13:16.840 --> 00:13:18.186
By setting it to undefined,

210
00:13:18.186 --> 00:13:21.560
which is what the person was talking
about cuz undefined gets dropped.

