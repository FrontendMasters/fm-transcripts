WEBVTT

1
00:00:00.070 --> 00:00:05.104
Now that you've observed
the problem of not being able

2
00:00:05.104 --> 00:00:10.249
to properly update the page
once some data was created,

3
00:00:10.249 --> 00:00:16.391
we can quickly fix that problem and
move on to creating the editor.

4
00:00:16.391 --> 00:00:19.190
So, it's actually just a one line change.

5
00:00:19.190 --> 00:00:21.073
It's quite simple to fix, but

6
00:00:21.073 --> 00:00:26.010
I just wanted it to exaggerate how much of
a problem it is so you can think about it.

7
00:00:27.290 --> 00:00:31.426
Really, the only thing we need to do is,
anywhere server side really, but

8
00:00:31.426 --> 00:00:36.430
specifically in this route, because
that's where we're making the change.

9
00:00:36.430 --> 00:00:38.610
We just need to tell Next.js.

10
00:00:38.610 --> 00:00:39.510
Well, first,

11
00:00:39.510 --> 00:00:44.024
you have to understand how Next.js
caches data, and what it does with data.

12
00:00:44.024 --> 00:00:46.734
Whenever a page like
this page here gets data,

13
00:00:46.734 --> 00:00:51.530
especially if it's using something like
fetch, it's gonna be cached, right?

14
00:00:51.530 --> 00:00:54.130
And that's the problem,
it's still data, right?

15
00:00:54.130 --> 00:00:58.902
We can tell Next.js we want
to revalidate that cache,

16
00:00:58.902 --> 00:01:04.000
as in clean it and
go get it again whenever we make changes.

17
00:01:04.000 --> 00:01:05.060
So that's all we have to do.

18
00:01:05.060 --> 00:01:09.067
So we can go into our posts and
right before we respond, we can say, hey,

19
00:01:09.067 --> 00:01:12.060
by the way,
can you revalidate this path for me?

20
00:01:12.060 --> 00:01:15.188
So you can import revalidate
path from next cache, and

21
00:01:15.188 --> 00:01:17.420
you can just give it a route.

22
00:01:17.420 --> 00:01:19.489
In this case, the route that we
wanna revalidate is journal.

23
00:01:22.866 --> 00:01:25.940
&gt;&gt; I know there's something called
like use optimistic coming along as

24
00:01:25.940 --> 00:01:28.540
an alternative to like revalidate
about this last night.

25
00:01:28.540 --> 00:01:31.880
Is that something you've spoken
to the next folks about?

26
00:01:31.880 --> 00:01:35.260
Is that still too premature to
really discuss or think about?

27
00:01:35.260 --> 00:01:37.840
&gt;&gt; Yeah, the thing about use
optimistic is mostly for

28
00:01:37.840 --> 00:01:41.510
server actions that you want to
optimistically show updates for.

29
00:01:41.510 --> 00:01:43.960
So we're not using server action,
so I wouldn't use it.

30
00:01:43.960 --> 00:01:46.310
And then it's a hook that you
have to use on client side.

31
00:01:46.310 --> 00:01:50.051
So, in my opinion, I'm like, why even do
the server action if you already have to

32
00:01:50.051 --> 00:01:53.490
make a client component to show
the user optimistic update?

33
00:01:53.490 --> 00:01:58.328
I get it, at that point, the only
thing you're saving is the fact that

34
00:01:58.328 --> 00:02:02.280
you don't have to make
the API route yourself.

35
00:02:02.280 --> 00:02:04.880
But it's still making
a request over the wire.

36
00:02:04.880 --> 00:02:05.970
It's still doing everything else.

37
00:02:05.970 --> 00:02:10.464
So you're trading the work from
setting up the API route, and

38
00:02:10.464 --> 00:02:16.270
instead set up all the things to make sure
you can get the data and do validation.

39
00:02:16.270 --> 00:02:20.492
So, I don't know if it's worth it,
in my opinion.

