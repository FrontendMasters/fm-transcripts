WEBVTT

1
00:00:46.014 --> 00:00:51.906
Now that you've observed
the problem of not being

2
00:00:51.906 --> 00:00:59.071
able to properly update the page
once some data was created.

3
00:00:59.071 --> 00:01:03.032
We can quickly fix that problem and
move on to creating the editor, so

4
00:01:03.032 --> 00:01:05.298
it's actually just a one line change.

5
00:01:05.298 --> 00:01:09.450
It's quite simple to fix, but
I just wanted to exaggerate how much of

6
00:01:09.450 --> 00:01:12.180
a problem that is, so
you can think about it.

7
00:01:13.470 --> 00:01:17.955
Really the only thing we need to do
is anywhere service side really, but

8
00:01:17.955 --> 00:01:22.668
specifically in this route because
that's where we're making a change,

9
00:01:22.668 --> 00:01:24.634
we just need to tell Next.JS.

10
00:01:24.634 --> 00:01:28.289
Well, first you have to understand
how Next.JS caches data and

11
00:01:28.289 --> 00:01:30.938
what it does with data,
whatever a page like.

12
00:01:30.938 --> 00:01:35.693
This page here gets data, especially
if it's using something like fetch,

13
00:01:35.693 --> 00:01:37.710
it's gonna be cached, right?

14
00:01:37.710 --> 00:01:40.210
And that's the problem,
it's still data, right?

15
00:01:40.210 --> 00:01:45.655
We can tell Next.JS that we want
to re-validate that cache and

16
00:01:45.655 --> 00:01:48.130
clean it and go get it again.

17
00:01:49.200 --> 00:01:51.139
Whenever we make changes, so
that's all we have to do.

18
00:01:51.139 --> 00:01:55.837
So we can go into our posts right before
we respond, we can say, hey, by the way,

19
00:01:55.837 --> 00:01:58.139
can you re-validate this path for me?

20
00:01:58.139 --> 00:02:01.626
So you can import revalidatePath
from NextCache, and

21
00:02:01.626 --> 00:02:03.454
you can just give it a route.

22
00:02:03.454 --> 00:02:06.030
In this case, the route that we
wanna re-validate is journal.

23
00:02:08.939 --> 00:02:12.244
&gt;&gt; I know there's something called use
optimistic coming along as an alternative

24
00:02:12.244 --> 00:02:14.572
to re-validate,
I was reading about this last night.

25
00:02:14.572 --> 00:02:19.045
Is that something you've spoken to
the next folks about is that still too

26
00:02:19.045 --> 00:02:22.142
premature to really like discuss or
think about?

27
00:02:22.142 --> 00:02:25.869
&gt;&gt; Yeah, the thing about use optimistic is
mostly for server actions that you want to

28
00:02:25.869 --> 00:02:29.125
optimistically show updates for,
so we're not using server action.

29
00:02:29.125 --> 00:02:32.429
So I wouldn't use it and then it's a hook
that you have to use on client side.

30
00:02:32.429 --> 00:02:36.606
So in my opinion, I'm why even do the
server action if you already have to make

31
00:02:36.606 --> 00:02:39.581
a client component to show
the use optimistic update?

32
00:02:39.581 --> 00:02:44.485
I get it, you're saving, at that point,
the only thing you're saving is the fact

33
00:02:44.485 --> 00:02:47.567
that you don't have to make
the API route yourself,

34
00:02:47.567 --> 00:02:51.060
but it's still making
a request over the wire.

35
00:02:51.060 --> 00:02:52.617
It's still doing everything
else you just don't have.

36
00:02:52.617 --> 00:02:56.817
So you're trading the work from
setting up the API route and

37
00:02:56.817 --> 00:03:02.450
instead set up all the things to make sure
you can get the data and do validation.

38
00:03:02.450 --> 00:03:06.479
So I don't know if it's worth it,
in my opinion.

