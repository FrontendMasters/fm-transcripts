WEBVTT

1
00:00:00.460 --> 00:00:07.414
Regarding testing,
how would you mock the open API requests?

2
00:00:07.414 --> 00:00:11.585
&gt;&gt; Same thing.

3
00:00:11.585 --> 00:00:16.759
It would be a lot more code, but
it's the same, it's the same.

4
00:00:16.759 --> 00:00:21.114
Well, I guess, I mean, I guess there's
a lot of ways you can do it actually,

5
00:00:21.114 --> 00:00:22.053
let me show you.

6
00:00:22.053 --> 00:00:28.326
So, Vitest has so many ways to do mocking,

7
00:00:28.326 --> 00:00:33.253
there's not just one way,
I just mocked out the whole module.

8
00:00:33.253 --> 00:00:36.752
But because the way Ling
chain does its imports,

9
00:00:36.752 --> 00:00:39.234
I guess that could be kinda weird.

10
00:00:39.234 --> 00:00:43.872
So you could just mock it
out on a per function basis.

11
00:00:43.872 --> 00:00:50.976
Let me see if they have
an example of that.

12
00:00:50.976 --> 00:00:51.872
Not that.

13
00:00:56.192 --> 00:00:56.881
Here we go.
So

14
00:00:56.881 --> 00:01:01.745
you can do like a spy.mockimplementonce,

15
00:01:01.745 --> 00:01:06.482
to literally look at specific functions.

16
00:01:06.482 --> 00:01:11.239
You can do V dot function to mock the
implementation like a specific function

17
00:01:11.239 --> 00:01:11.991
like this.

18
00:01:11.991 --> 00:01:13.250
So there's a lot of ways you could do it.

19
00:01:13.250 --> 00:01:17.814
I mean, you probably could just mock out
the whole module to like we did in a test

20
00:01:17.814 --> 00:01:21.134
and then what you could do is
just do this part right here,

21
00:01:21.134 --> 00:01:24.059
you see where I'm mocking
out the entire module.

22
00:01:25.110 --> 00:01:28.110
But these are the only
methods that I'm stubbing.

23
00:01:28.110 --> 00:01:31.666
So, for the open AI one, if you go to AI,

24
00:01:31.666 --> 00:01:37.340
the place in which we're calling
Open AI would be model.call.

25
00:01:37.340 --> 00:01:41.832
So if you look at the call that comes
from model, model comes from Open AI,

26
00:01:41.832 --> 00:01:43.650
open AI comes from this path.

27
00:01:43.650 --> 00:01:46.320
So you could just mock
this whole path out.

28
00:01:46.320 --> 00:01:50.962
And then stub this open API to be a class
that returns something with a call method

29
00:01:50.962 --> 00:01:53.130
on it that does nothing.

30
00:01:53.130 --> 00:01:58.531
So like I said, it's just a lot more
code but that's how you would do it.

31
00:01:58.531 --> 00:02:02.669
&gt;&gt; And a little bit more
generally speaking with testing,

32
00:02:02.669 --> 00:02:05.934
what else in this app
would you want to test?

33
00:02:05.934 --> 00:02:07.160
What would I want to test?

34
00:02:07.160 --> 00:02:11.033
&gt;&gt; So I wouldn't be testing any of the
content on the page because I'd probably

35
00:02:11.033 --> 00:02:14.270
be using a CMS and
the data would be dynamic anyway.

36
00:02:14.270 --> 00:02:15.842
So I wouldn't be testing that.

37
00:02:15.842 --> 00:02:20.332
I would probably test to see that
certain elements are on the page though.

38
00:02:20.332 --> 00:02:22.700
Because certain elements means
certain components were loaded up.

39
00:02:22.700 --> 00:02:28.539
So I would be testing that, for
instance, I might test that loading

40
00:02:28.539 --> 00:02:33.979
animation spinner for
a auto save is there and not take it away.

41
00:02:33.979 --> 00:02:37.562
I will test anything that has
a conditional, which is a branch.

42
00:02:37.562 --> 00:02:41.810
So anything with a branch I wanna test to
make sure that we handle that conditional.

43
00:02:41.810 --> 00:02:45.851
So I would try to throw different
things that inputs to see those

44
00:02:45.851 --> 00:02:50.060
conditionals that can be something
like a conditional and a JSX.

45
00:02:50.060 --> 00:02:54.190
That could be something like this
where the button is changing.

46
00:02:54.190 --> 00:02:58.817
So I was like, okay, I'm gonna make a new
mock, make user ID there for one, test it

47
00:02:58.817 --> 00:03:02.946
to make sure it's journal, and then mock
it out to where user ID is not there and

48
00:03:02.946 --> 00:03:05.414
then test to see if that says new user,
right?

49
00:03:05.414 --> 00:03:08.000
So I'll test each conditional like that.

50
00:03:08.000 --> 00:03:09.570
Anywhere there's logic.

51
00:03:09.570 --> 00:03:12.289
I'm not so
concerned about just pure rendering,

52
00:03:12.289 --> 00:03:14.500
I'm only concerned if there's logic.

53
00:03:14.500 --> 00:03:17.215
So like pretty much anywhere
there's like interpolating,

54
00:03:17.215 --> 00:03:18.605
I will be like looking in here.

55
00:03:18.605 --> 00:03:19.620
So I'll test that.

56
00:03:20.620 --> 00:03:22.479
I'll test like if there's
like a map in here.

57
00:03:22.479 --> 00:03:26.650
Anywhere there's interpolation, I'm gonna
test, everything else I'm not testing for.

58
00:03:26.650 --> 00:03:27.600
Really not worth it.

59
00:03:27.600 --> 00:03:30.623
You don't wanna go out and
just like, alright,

60
00:03:30.623 --> 00:03:34.765
a two string equals this two string and
like see these two strings?

61
00:03:34.765 --> 00:03:37.750
I mean,
I guess that's what snapshot testing is.

62
00:03:37.750 --> 00:03:39.830
But yeah, I would do that.

63
00:03:39.830 --> 00:03:42.740
And then obviously the easy one
is just all these utilities.

64
00:03:42.740 --> 00:03:44.407
These have nothing to do it react and

65
00:03:44.407 --> 00:03:47.640
just plain old JavaScript functions
that you can test, no problem.

66
00:03:47.640 --> 00:03:50.250
So all these should be tested.

67
00:03:50.250 --> 00:03:54.210
And then I would probably test the API
because these are also very easy to test.

68
00:03:54.210 --> 00:03:55.370
They're just functions.

69
00:03:55.370 --> 00:03:57.830
You can stub out everything
that's passed to them.

70
00:03:57.830 --> 00:04:00.040
So this is literally just a function.

71
00:04:00.040 --> 00:04:01.271
You can stub out any one of these.

72
00:04:01.271 --> 00:04:03.788
It's pure node,
even a request object that came in here.

73
00:04:03.788 --> 00:04:06.330
You could just pass it on yourself and
stub it out.

74
00:04:06.330 --> 00:04:10.651
So I would test that, you can spy on these
next responses to see what information

75
00:04:10.651 --> 00:04:12.920
they got back to make sure it's correct.

76
00:04:15.740 --> 00:04:17.680
Yeah that's that's probably
everything I would test.

77
00:04:19.890 --> 00:04:24.072
&gt;&gt; I will piggyback on that with we
just released a couple weeks ago,

78
00:04:24.072 --> 00:04:26.710
an enterprise UI development course.

79
00:04:26.710 --> 00:04:31.394
The context of the course is
maintaining a very large code base, but

80
00:04:31.394 --> 00:04:35.999
it's covers everything testing
related to that from component to

81
00:04:35.999 --> 00:04:41.425
integration to mocking and spying and
so if you're interested in just testing

82
00:04:41.425 --> 00:04:46.300
in general that's another great new
course that we that we released.

83
00:04:46.300 --> 00:04:50.476
&gt;&gt; Yep, cool any other questions?

84
00:04:50.476 --> 00:04:54.865
&gt;&gt; Regarding responsive design you
didn't use the tailwind classes but

85
00:04:54.865 --> 00:04:59.845
can you speak briefly to, how you would
approach responsive design with Halo,

86
00:04:59.845 --> 00:05:03.189
is it easier to use those
classes from the beginning or

87
00:05:03.189 --> 00:05:08.205
kind of stuff everything out like you have
now and then add the classes in after?

88
00:05:08.205 --> 00:05:10.185
&gt;&gt; Yeah, I think if you're
gonna do responsive design,

89
00:05:10.185 --> 00:05:11.398
you should make it mobile first.

90
00:05:11.398 --> 00:05:14.815
So all the classes you use
are meant to be on mobile and

91
00:05:14.815 --> 00:05:16.844
then you add classes going up.

92
00:05:16.844 --> 00:05:20.661
I think if you add classes going down it's
so much harder to do that in my opinion.

93
00:05:20.661 --> 00:05:25.034
&gt;&gt; So if I were to make this responsive
from day one, like for instance this page,

94
00:05:25.034 --> 00:05:28.943
like I think some people like, okay,
I'm gonna go in here but like for

95
00:05:28.943 --> 00:05:33.687
a small screen, which which is how you do
this until when, I'm gonna do this thing.

96
00:05:33.687 --> 00:05:35.006
I wouldn't do it that way.

97
00:05:35.006 --> 00:05:40.367
All of this CSS, all these classes
here would be for a phone by default.

98
00:05:40.367 --> 00:05:45.024
And then, I'm like, okay, now for
a desktop where it's large,

99
00:05:45.024 --> 00:05:49.114
then I would add like a different
width here or something.

100
00:05:49.114 --> 00:05:53.780
I would change it on the way up, so
that's how I would do it if I was

101
00:05:53.780 --> 00:05:57.411
gonna do it would tell when
much easier going up and

102
00:05:57.411 --> 00:06:02.589
down Yep.

103
00:06:02.589 --> 00:06:06.979
&gt;&gt; I've more ore of a general question,
when you're coming up with a project like

104
00:06:06.979 --> 00:06:10.908
this, do you kinda have a process,
do you come up with the idea first and

105
00:06:10.908 --> 00:06:14.641
then find the technology are you
poking around in the technology and

106
00:06:14.641 --> 00:06:16.111
then the idea developed?

107
00:06:16.111 --> 00:06:18.070
&gt;&gt; Yeah, that's a good question.

108
00:06:18.070 --> 00:06:22.311
So I mean, with these technologies, so I
usually try not to teach anything that I'm

109
00:06:22.311 --> 00:06:25.440
not constantly using and
super passionate about.

110
00:06:25.440 --> 00:06:29.390
So it's always just on my mind about,
the thing that I'm teaching.

111
00:06:29.390 --> 00:06:31.228
So with next.js and anything AI related,

112
00:06:31.228 --> 00:06:33.800
that's just what I've
just been using forever.

113
00:06:33.800 --> 00:06:40.510
And as far as like the idea,
it's I don't really have a process.

114
00:06:40.510 --> 00:06:44.786
I think it's more like what sounds,
what do I think people would like making?

115
00:06:44.786 --> 00:06:45.794
What sounds cool?

116
00:06:45.794 --> 00:06:50.590
And the only thing that I try to scope
it off of is like, is it teachable?

117
00:06:50.590 --> 00:06:53.620
Because there's like really a lot of
things that I can just sit up here and

118
00:06:53.620 --> 00:06:55.807
just make, but
it wouldn't be a good experience for

119
00:06:55.807 --> 00:06:58.610
anyone just to watch me just struggle
to Google looking up things.

120
00:06:58.610 --> 00:07:02.680
So I have to make sure that it's
teachable and it's building on something.

121
00:07:02.680 --> 00:07:05.060
So that's the only filter that I have.

122
00:07:05.060 --> 00:07:06.760
But yeah, really?

123
00:07:06.760 --> 00:07:09.750
I do have a, I guess I think about
if I really thought about it,

124
00:07:09.750 --> 00:07:12.340
I there's things I tried
to stay away from.

125
00:07:12.340 --> 00:07:16.894
Which are like, I try to stay away from
apps that aren't impressive unless you

126
00:07:16.894 --> 00:07:18.570
have a bunch of data.

127
00:07:18.570 --> 00:07:22.312
Like for instance, if I was like, let's
rebuild Twitter, that sounds cool, but

128
00:07:22.312 --> 00:07:25.690
unless you have a bunch of tweets on
the page, it looks, it's pretty bad.

129
00:07:25.690 --> 00:07:28.160
Or unless it's like, hey,
we're all using the same server and

130
00:07:28.160 --> 00:07:30.509
we can see each other's tweets,
it's really not that fun.

131
00:07:30.509 --> 00:07:33.967
It's social by nature, so if we can't
demonstrate that social aspect,

132
00:07:33.967 --> 00:07:35.658
it's really not that impressive.

133
00:07:35.658 --> 00:07:39.671
So I try to stay away from multiplayer
social experiences because they're not

134
00:07:39.671 --> 00:07:42.360
that impressive unless
you're doing it together.

135
00:07:43.600 --> 00:07:47.507
So it mostly lands on like productivity
type things because most productivity apps

136
00:07:47.507 --> 00:07:50.400
are like solo where you can
just do your own thing.

137
00:07:50.400 --> 00:07:52.438
Maybe it's better with people,
but you could totally do it.

138
00:07:52.438 --> 00:07:54.545
You can work on Notion by yourself.

139
00:07:54.545 --> 00:07:56.350
So it's usually that.

140
00:07:56.350 --> 00:08:00.914
And then,
I do also tend to make sure that the app,

141
00:08:00.914 --> 00:08:06.560
as far as like the features that it has,
are very simple.

142
00:08:06.560 --> 00:08:10.641
And then I just expand on top of that
because I think it's those things in

143
00:08:10.641 --> 00:08:14.535
between that you would need to know
as like an engineer having a job.

144
00:08:14.535 --> 00:08:17.529
I think it's really cool to like,
I built this AI feature.

145
00:08:17.529 --> 00:08:18.724
But you know what's better?

146
00:08:18.724 --> 00:08:20.818
Is that you understand authentication and

147
00:08:20.818 --> 00:08:23.668
you understand how these things
in between these features

148
00:08:23.668 --> 00:08:27.232
work because every single app are gonna
have these features in between.

149
00:08:27.232 --> 00:08:29.244
They're gonna have the table stakes,
right?

150
00:08:29.244 --> 00:08:32.045
It doesn't matter what app you make,
your own routing, you're gonna be testing,

151
00:08:32.045 --> 00:08:34.334
you're gonna need components,
you're gonna need data fetching,

152
00:08:34.334 --> 00:08:35.252
you're gonna be caching.

153
00:08:35.252 --> 00:08:39.094
So I like to focus on those things and
just sprinkle like features in that

154
00:08:39.094 --> 00:08:42.102
aren't really unique or
that are unique to the app, but

155
00:08:42.102 --> 00:08:46.840
you probably won't see in any other app
'cause it's just too unique for this.

156
00:08:46.840 --> 00:08:48.550
So that's just kinda my thought process.

