WEBVTT

1
00:00:00.000 --> 00:00:04.033
Now, we're gonna make the journal
card actually do something.

2
00:00:04.033 --> 00:00:05.094
So let's do that.

3
00:00:10.009 --> 00:00:10.795
There we go.

4
00:00:10.795 --> 00:00:17.181
So what we wanna do here is on click,
we want to create a new journal entry, and

5
00:00:17.181 --> 00:00:23.304
then navigate to the editor page in
which you can edit that journal entry.

6
00:00:23.304 --> 00:00:26.268
And all that needs to happen without
asking the user for anything.

7
00:00:26.268 --> 00:00:28.976
So we're not gonna show model
what's the name of your journal?

8
00:00:28.976 --> 00:00:32.971
Well, our journals don't have names, and
I know that cuz we wrote the scheme, and

9
00:00:32.971 --> 00:00:34.697
they literally don't have names.

10
00:00:34.697 --> 00:00:37.177
So we don't need any information and

11
00:00:37.177 --> 00:00:41.497
they don't have anything unique
about them other than the IDs.

12
00:00:41.497 --> 00:00:44.890
So we could give them the same
content as well as a starting point,

13
00:00:44.890 --> 00:00:47.060
which is exactly what we're going to do.

14
00:00:47.060 --> 00:00:51.851
So it's just gonna be like a default
journal entry that says, New Entry,

15
00:00:51.851 --> 00:00:54.956
and from ther, you can go and
start editing it.

16
00:00:54.956 --> 00:00:58.092
So let's do that.

17
00:00:58.092 --> 00:01:03.053
First things first is we need to set up
an onClick inside of our NewEntryCard.

18
00:01:04.733 --> 00:01:07.649
How do we set up an onClick
on a server component?

19
00:01:09.934 --> 00:01:10.635
Anybody know?

20
00:01:10.635 --> 00:01:12.734
&gt;&gt; You use client thing how to do that.

21
00:01:12.734 --> 00:01:14.945
&gt;&gt; You can,
you have to make it a client component.

22
00:01:14.945 --> 00:01:17.055
So now we've got to turn
it into a client component.

23
00:01:17.055 --> 00:01:20.896
So if you don't know what this is,
you actually do know what this is.

24
00:01:20.896 --> 00:01:23.717
It's every React component you've
ever made in your entire life,

25
00:01:23.717 --> 00:01:24.665
that's what this is.

26
00:01:24.665 --> 00:01:28.285
Every component we've made up
until this point was different,

27
00:01:28.285 --> 00:01:29.836
it was a server component.

28
00:01:29.836 --> 00:01:32.688
It tricked you, it made you think you were
writing React components where you were

29
00:01:32.688 --> 00:01:34.436
not, you're writing
React server components.

30
00:01:34.436 --> 00:01:40.254
This is exactly what you thought it was,
it's a regular React component.

31
00:01:40.254 --> 00:01:41.255
Now, we can use hooks,

32
00:01:41.255 --> 00:01:44.076
we can do anything that you could
have done in any React component.

33
00:01:44.076 --> 00:01:48.907
Whereas in something like EntryCard,
you cannot write a hook in here,

34
00:01:48.907 --> 00:01:52.868
you cannot do any of that stuff,
it's just not possible.

35
00:01:52.868 --> 00:01:55.928
The other thing is,
because this is a client component,

36
00:01:55.928 --> 00:01:57.471
you cannot make this async.

37
00:01:57.471 --> 00:02:00.625
You cannot do that,
that is not gonna work.

38
00:02:00.625 --> 00:02:02.296
So everything has its own purpose.

39
00:02:02.296 --> 00:02:06.063
This is gonna be a client component
because we need interactivity.

40
00:02:06.063 --> 00:02:10.701
Interactivity requires JavaScript,
JavaScript means it's gonna run on client.

41
00:02:10.701 --> 00:02:11.777
So let's do that.

42
00:02:11.777 --> 00:02:16.514
So onClick,
we want to be able to do something.

43
00:02:16.514 --> 00:02:22.343
So we'll say, onClick, We're going to,

44
00:02:22.343 --> 00:02:29.112
let's just make a function up
here that says handleOnClick.

45
00:02:29.112 --> 00:02:31.477
Cool, that was passed out here.

46
00:02:33.980 --> 00:02:39.061
So far so good, so onClick,
we want to be able to

47
00:02:39.061 --> 00:02:44.159
make an API call and
create a new journal entry.

48
00:02:44.159 --> 00:02:45.430
So it's a few things we have to do.

49
00:02:45.430 --> 00:02:49.899
One, we need a API to even hit to
make a new entry, that's one thing.

50
00:02:49.899 --> 00:02:53.320
Two, we need a function
that calls that API, right?

51
00:02:53.320 --> 00:02:54.499
So we got to make both of those.

52
00:02:54.499 --> 00:02:57.595
So let's start with the actual API,
and then we'll come back and

53
00:02:57.595 --> 00:02:58.900
we'll make the function.

54
00:02:58.900 --> 00:03:02.780
And then we'll bring it in here and
we'll tie it all together.

55
00:03:02.780 --> 00:03:06.751
So to make an API,
we just gotta go into app/api,

56
00:03:06.751 --> 00:03:10.830
which we already have, and
just make a new folder.

57
00:03:10.830 --> 00:03:16.070
And we're gonna call
this the journal folder,

58
00:03:16.070 --> 00:03:19.484
so it'll be /api/journal.

59
00:03:19.484 --> 00:03:24.388
And inside of here,
if you make a route.ts,

60
00:03:24.388 --> 00:03:31.369
that's a very specific name,
just like you have to make a page.

61
00:03:31.369 --> 00:03:34.130
In the API, you have to make a route file.

62
00:03:34.130 --> 00:03:38.269
This is saying,
I now have a route for /api/journal.

63
00:03:38.269 --> 00:03:41.055
And inside this route, I want someone
to be able to create something.

64
00:03:41.055 --> 00:03:45.069
Usually, the ACP for
creating something is a post.

65
00:03:45.069 --> 00:03:50.292
So all I have to do here
is export a function

66
00:03:50.292 --> 00:03:55.080
called POST, put a capital letters.

67
00:03:55.080 --> 00:04:00.698
And this is going to allow me to,
This is basically

68
00:04:00.698 --> 00:04:06.550
enabling /api/journal POST,
like a post request to that route.

69
00:04:08.140 --> 00:04:13.549
So for this route, I'm gonna say,
what do I need to create a journal?

70
00:04:13.549 --> 00:04:17.062
Let's look at the schema,

71
00:04:17.062 --> 00:04:21.959
I need a userId, I need some content.

72
00:04:21.959 --> 00:04:25.680
I don't need an analysis, that's optional.

73
00:04:25.680 --> 00:04:29.818
So we're not gonna actually use it for
content, and it's not unique, so

74
00:04:29.818 --> 00:04:33.250
we can just make some content out,
but we do need the userId.

75
00:04:33.250 --> 00:04:36.030
So we need to get the user's information.

76
00:04:36.030 --> 00:04:42.194
Luckily for us,
we already have a utility function for

77
00:04:42.194 --> 00:04:47.296
that, and it's called getUserByClerkID.

78
00:04:47.296 --> 00:04:53.559
This works in the API's functions as well
because we didn't explicitly say it,

79
00:04:53.559 --> 00:04:57.809
but this all file is only
being used on the server side.

80
00:04:57.809 --> 00:04:59.665
This is not being used on a client.

81
00:04:59.665 --> 00:05:02.841
If you try to use this on the client,
it will, for sure,

82
00:05:02.841 --> 00:05:05.759
100% not work because
these are node modules.

83
00:05:05.759 --> 00:05:07.012
How do I know that?

84
00:05:07.012 --> 00:05:09.489
Always I know principle
doesn't work on a client.

85
00:05:09.489 --> 00:05:13.980
I know this auth function was meant
to work on the server from clerk.

86
00:05:13.980 --> 00:05:18.597
There is a package you can install
called server only to ensure your

87
00:05:18.597 --> 00:05:20.750
stuff only runs on the server.

88
00:05:20.750 --> 00:05:24.110
I'm not gonna do that, you just import it
and it basically will error out if you try

89
00:05:24.110 --> 00:05:26.169
to bring anything from
this file into the client.

90
00:05:26.169 --> 00:05:27.301
It'll error out,

91
00:05:27.301 --> 00:05:32.057
not to be confused with doing something
like this, which is called use server.

92
00:05:32.057 --> 00:05:35.011
That's only useful for
creating server actions,

93
00:05:35.011 --> 00:05:39.417
which I don't think we're gonna be
doing because I don't feel the need to.

94
00:05:39.417 --> 00:05:40.837
There's a lot going on there.

95
00:05:40.837 --> 00:05:45.917
[LAUGH] I know it's very confusing,
but that's just how it is.

96
00:05:45.917 --> 00:05:52.601
Anyway, we got the user, and
now we want to be able to create an entry.

97
00:05:52.601 --> 00:05:53.179
So let's do that.

98
00:05:53.179 --> 00:05:57.432
So we'll say, entry = await,

99
00:05:57.432 --> 00:06:05.947
let's bring in our
prisma.journalEntry.create, like so.

100
00:06:05.947 --> 00:06:09.434
And then we wanna create with this data,

101
00:06:09.434 --> 00:06:14.265
this data is gonna be userId,
it's gonna be user.id.

102
00:06:14.265 --> 00:06:15.314
You do that.

103
00:06:15.314 --> 00:06:20.672
The other way you can do this is
you can say, user, pass an object,

104
00:06:20.672 --> 00:06:26.536
say, connect, pass another object,
id, and you can say, user.id.

105
00:06:26.536 --> 00:06:27.766
You can do that too.

106
00:06:27.766 --> 00:06:35.099
This is like you specifically
connecting this user to this entry.

107
00:06:35.099 --> 00:06:37.500
But why am I gonna do all
that when I can do this?

108
00:06:37.500 --> 00:06:39.049
So I'm just gonna do that.

109
00:06:39.049 --> 00:06:43.933
So we got the userId, it's freaking out,
cuz it's like, hey, you forgot something,

110
00:06:43.933 --> 00:06:47.079
you're missing something,
you're missing content.

111
00:06:47.079 --> 00:06:53.615
So I'm gonna add content, and every new
entry is just gonna have the same content.

112
00:06:53.615 --> 00:06:59.849
Write about your day, something like that.

113
00:06:59.849 --> 00:07:01.199
This needs a comma.

114
00:07:04.279 --> 00:07:08.606
Cool, so we got that,
satisfied all the needs there.

115
00:07:08.606 --> 00:07:13.682
We have our entry, and
now we can just send this back with

116
00:07:13.682 --> 00:07:20.379
a return NextResponse that you got
to import from NextServer, dot json.

117
00:07:20.379 --> 00:07:24.479
And I typically always send back an object
with a data property with the data that

118
00:07:24.479 --> 00:07:25.530
I'm sending back.

119
00:07:25.530 --> 00:07:29.100
That's just how I've always done it,
you can do whatever you want.

120
00:07:29.100 --> 00:07:31.800
I prefer to send back an object
with the same key on it so

121
00:07:31.800 --> 00:07:36.060
I could have some predictable code on the
frontend that's looking for the same key.

122
00:07:36.060 --> 00:07:39.427
If I just send back to entry by default,
that object's gonna have different keys on

123
00:07:39.427 --> 00:07:41.704
it, another route's gonna
have different keys on it.

124
00:07:41.704 --> 00:07:45.292
It's just better just to be like, I know
that's gonna be on the data property,

125
00:07:45.292 --> 00:07:46.428
let me just grab it, so.

126
00:07:50.186 --> 00:07:51.641
Any questions on that?

127
00:07:56.222 --> 00:07:59.771
And also, because the middleware
is protecting all of our routes,

128
00:07:59.771 --> 00:08:03.819
we can also assume that you can't access
this unless you're logged in as well

129
00:08:03.819 --> 00:08:05.946
because the middleware won't let you.

130
00:08:13.153 --> 00:08:16.257
Cool, all right, so we got that,

131
00:08:16.257 --> 00:08:21.840
now what we wanna do is make
a function that will call this API.

132
00:08:21.840 --> 00:08:26.662
So I'm gonna go to my utils,
make a new file, I'm gonna call it api.ts.

133
00:08:29.008 --> 00:08:34.134
I'm gonna make a new function here

134
00:08:34.134 --> 00:08:39.449
called createNewEntry, like so.

135
00:08:40.650 --> 00:08:43.163
And we're gonna use fetch here,

136
00:08:43.163 --> 00:08:48.381
which is a slightly modified version
of fetch that Next.js modify.

137
00:08:48.381 --> 00:08:50.310
We don't need to worry
about those modifications.

138
00:08:50.310 --> 00:08:54.440
But one big difference is that
fetch now uses the request standard

139
00:08:54.440 --> 00:08:58.285
object that's built into the web,
so we'll be using that.

140
00:08:58.285 --> 00:09:03.229
So I was gonna make a utility
function that creates a URL for us.

141
00:09:03.229 --> 00:09:05.310
Remember, fetch,
you can't pass in the relative URL.

142
00:09:05.310 --> 00:09:08.975
So you have to pass in the full path URL,
even on localhost.

143
00:09:08.975 --> 00:09:13.634
So I could just hardcode that, I could
just say, HTTP localhost slash whatever.

144
00:09:13.634 --> 00:09:16.146
But what about when I'm not on localhost,
if it's hardcoded?

145
00:09:16.146 --> 00:09:17.584
So I want that to be dynamic.

146
00:09:17.584 --> 00:09:20.440
So I'm gonna make a function
that dynamically does that.

147
00:09:20.440 --> 00:09:24.623
So I'll just say const createURL, and

148
00:09:24.623 --> 00:09:30.597
then that's just gonna take
in a URL path that you want.

149
00:09:30.597 --> 00:09:35.842
And then it's just going

150
00:09:35.842 --> 00:09:42.085
to return, let's just say,

151
00:09:42.085 --> 00:09:50.087
window.location.origin + path.

152
00:09:53.955 --> 00:09:58.761
So cuz our API is always gonna
be on whatever website we're

153
00:09:58.761 --> 00:10:01.220
on slash API slash whatever.

154
00:10:01.220 --> 00:10:05.163
So window.location.origin,

155
00:10:05.163 --> 00:10:13.197
it's always gonna give you the full
URL that you're currently on.

156
00:10:13.197 --> 00:10:15.375
And no slashes after, right?

157
00:10:15.375 --> 00:10:21.712
So if I go to another website here,
it's just gonna give me github.com.

158
00:10:29.050 --> 00:10:30.629
Cool, okay, so we got that.

159
00:10:30.629 --> 00:10:35.525
Now, we can go back to this function,
createNewEntry,

160
00:10:35.525 --> 00:10:38.385
and I guess I got that backwards.

161
00:10:38.385 --> 00:10:43.050
There we go, what I was doing there.

162
00:10:43.050 --> 00:10:48.778
Now, we can say, const res = await,

163
00:10:48.778 --> 00:10:51.469
make this async.

164
00:10:51.469 --> 00:10:53.732
This will be fetch.

165
00:10:53.732 --> 00:10:58.930
And then inside of fetch,
I'm gonna do a new request,

166
00:10:58.930 --> 00:11:02.328
like this, request takes in a URL.

167
00:11:02.328 --> 00:11:07.292
So the URL that I want is createURL,

168
00:11:07.292 --> 00:11:11.933
like so, with /api/journal.

169
00:11:11.933 --> 00:11:14.717
That's the route we just made.

170
00:11:14.717 --> 00:11:20.095
The second argument to request
is an object for configuration.

171
00:11:20.095 --> 00:11:26.533
So method is gonna be POST, and
then body, this is going to be,

172
00:11:26.533 --> 00:11:31.636
we don't actually have to
send anything up here,

173
00:11:31.636 --> 00:11:37.838
because in our route,
we already just hardcode the defier.

174
00:11:37.838 --> 00:11:39.973
We don't even need to send a body here,

175
00:11:39.973 --> 00:11:44.009
but if you were to send a body,
just make sure you JSON.stringify first.

176
00:11:44.009 --> 00:11:49.835
So stringify, Stringify.

177
00:11:49.835 --> 00:11:52.737
Make sure you stringify whatever
thing you were gonna send up here.

178
00:11:52.737 --> 00:11:56.604
We don't really need it, so

179
00:11:56.604 --> 00:12:02.566
I'm just gonna do that,
and then I can say,

180
00:12:02.566 --> 00:12:06.768
if res.ok, then return res.

181
00:12:09.419 --> 00:12:15.620
Or actually, I'll just say,
const data = await res.json,

182
00:12:15.620 --> 00:12:20.768
that's a promise, and
then I'll return the data,

183
00:12:20.768 --> 00:12:24.289
.data cuz I always send back data.

184
00:12:31.807 --> 00:12:35.361
And if it's not okay, we're not
gonna worry about errors right now,

185
00:12:35.361 --> 00:12:37.059
we'll do error handling later.

186
00:12:37.059 --> 00:12:39.273
I could just do all my
error handling at once,

187
00:12:39.273 --> 00:12:42.421
because then I found out if I just
piecemeal the error handling,

188
00:12:42.421 --> 00:12:45.180
it'd be different for
every single function that I do.

189
00:12:45.180 --> 00:12:48.912
Where it's just creating a unified error
handling system with appropriate messages

190
00:12:48.912 --> 00:12:51.312
and status codes,
you gotta think about it like that.

191
00:12:51.312 --> 00:12:54.226
Not just like, this time,
we'll handle this function, and this time,

192
00:12:54.226 --> 00:12:57.236
we'll handle this function,
it'll just be different everywhere you go.

193
00:12:57.236 --> 00:12:59.059
You gotta take it as a system approach.

194
00:12:59.059 --> 00:13:02.346
So I like to think about that entirely and
later.

195
00:13:02.346 --> 00:13:05.570
So we're good for now.

196
00:13:05.570 --> 00:13:10.350
All right, so we'll return that data,
we have create new entry.

197
00:13:10.350 --> 00:13:12.410
This should work, hopefully.

198
00:13:12.410 --> 00:13:17.255
And let's go see what happens.

199
00:13:17.255 --> 00:13:21.280
Cool, so
let's head over to our NewEntryCard.

200
00:13:21.280 --> 00:13:27.117
Onclick we will say, async,

201
00:13:27.117 --> 00:13:35.763
let's await createNewEntry, like this.

202
00:13:35.763 --> 00:13:38.349
And we don't need to get
the return value here.

203
00:13:38.349 --> 00:13:42.740
The reason we don't need the return value
is because we can't do anything with it.

204
00:13:42.740 --> 00:13:45.298
There's literally nothing we can do.

205
00:13:45.298 --> 00:13:48.996
This component doesn't render
all the entries on the page, so

206
00:13:48.996 --> 00:13:52.297
having access to that return
entry here means nothing.

207
00:13:52.297 --> 00:13:56.853
You might say, well, what if we just had
a function in here that we can call that

208
00:13:56.853 --> 00:13:59.979
says, onClick, and
then we pass in the value there?

209
00:13:59.979 --> 00:14:05.996
We can't do that because this NewEntryCard

210
00:14:05.996 --> 00:14:13.811
component is being rendered
in a server component here.

211
00:14:13.811 --> 00:14:17.153
And you can't pass functions as
properties to server components and

212
00:14:17.153 --> 00:14:20.734
client components because they can't
be serialized over the Internet.

213
00:14:20.734 --> 00:14:25.546
So that won't work, so
there really is no point of trying

214
00:14:25.546 --> 00:14:28.873
to get the return value of the API call.

215
00:14:28.873 --> 00:14:30.801
And you'll see we'll
run into a UI problem,

216
00:14:30.801 --> 00:14:33.613
where it's like the screen won't
update until you hit refresh.

217
00:14:33.613 --> 00:14:35.515
And we'll talk about how we can fix that.

218
00:14:35.515 --> 00:14:38.853
But that's because we're fetching
the data on the server in one place, and

219
00:14:38.853 --> 00:14:41.582
then we're updating the data on
the client in another place.

220
00:14:41.582 --> 00:14:46.478
Whereas before, you probably use
something like React, what is it?

221
00:14:46.478 --> 00:14:49.728
React Query or SWR,
where you're mutating and

222
00:14:49.728 --> 00:14:52.989
fetching all in the same
place on the frontend.

223
00:14:52.989 --> 00:14:57.569
So you do wanna get the return value and
update the cache and do all this stuff.

224
00:14:57.569 --> 00:15:00.402
These two things don't
share the same cache.

225
00:15:00.402 --> 00:15:02.148
We're literally getting
data on the server and

226
00:15:02.148 --> 00:15:03.682
then we're doing stuff on the frontend.

227
00:15:03.682 --> 00:15:06.953
So it doesn't work that way,
they don't know about each other.

228
00:15:06.953 --> 00:15:10.208
There's no JavaScript on the frontend for
this component at all.

229
00:15:10.208 --> 00:15:14.689
It's just HTML, whereas this component
has tons of JavaScript on the frontend.

230
00:15:14.689 --> 00:15:20.803
So, Cool, okay, so we have that.

231
00:15:20.803 --> 00:15:25.957
And then after this, what we wanna
do is we wanna do a redirect,

232
00:15:25.957 --> 00:15:28.891
but we don't wanna use redirects.

233
00:15:28.891 --> 00:15:34.264
We want to use router, so we're bringing
in useRouter from NextNavigation.

234
00:15:34.264 --> 00:15:39.696
Inside of here,
we'll say router = useRouter, like so.

235
00:15:39.696 --> 00:15:45.226
After we create this,
we'll just say router.push

236
00:15:45.226 --> 00:15:50.386
to /journal/ and
we need the ID of the journal.

237
00:15:50.386 --> 00:15:55.102
So I guess in this case, we will get the
data here only because we need to route to

238
00:15:55.102 --> 00:15:58.540
it, but not because we're
trying to show it on the page.

239
00:16:02.466 --> 00:16:04.589
So like that.

240
00:16:04.589 --> 00:16:08.471
So router.push, the router is just a,
I really like what Next.js do here,

241
00:16:08.471 --> 00:16:10.339
they're just abstracting around.

242
00:16:10.339 --> 00:16:14.189
They're just leveraging the web, they're
like, there's already a good router in

243
00:16:14.189 --> 00:16:16.920
the web, let's just make
a wrapper around it, useRouter.

244
00:16:16.920 --> 00:16:20.069
If you've ever used the HTML5 push
state router, that's what this is.

245
00:16:20.069 --> 00:16:24.095
It's just a stack, it's just an array
of routes, and you're pushing to it,

246
00:16:24.095 --> 00:16:25.193
which means go to it.

247
00:16:25.193 --> 00:16:28.195
And when you go back,
you pop, it's very simple.

248
00:16:28.195 --> 00:16:31.080
So this is the equivalent of saying,
go here, right?

249
00:16:31.080 --> 00:16:35.089
So you could replace it if you wanted to.

250
00:16:35.089 --> 00:16:40.235
And basically, it will go to it,
and then it will replace

251
00:16:40.235 --> 00:16:44.751
the route that you're on
now with this new entry.

252
00:16:44.751 --> 00:16:46.499
So when you go back,
you won't go back here,

253
00:16:46.499 --> 00:16:48.201
you'll go back to one that's before this.

254
00:16:48.201 --> 00:16:52.288
So you're not creating a new instance,
a new space in the stack,

255
00:16:52.288 --> 00:16:56.842
you're replacing the space in the stack,
but we're not gonna do that.

256
00:16:56.842 --> 00:16:58.690
That's useful for something else.

257
00:16:58.690 --> 00:17:01.526
If you had a modal attached to a route,
and when someone hits back,

258
00:17:01.526 --> 00:17:03.410
you don't want them to
go back to the modal.

259
00:17:03.410 --> 00:17:06.642
You want them to go back to
the page before the modal so

260
00:17:06.642 --> 00:17:08.850
you would do a replace, not a push.

261
00:17:08.850 --> 00:17:13.379
It's a lot to think about,
well, let's see what we broke.

262
00:17:13.379 --> 00:17:18.140
[LAUGH] All right, all right,
okay, so well, if this works,

263
00:17:18.140 --> 00:17:22.996
for sure, what's gonna happen
is we're gonna get a 404 cuz

264
00:17:22.996 --> 00:17:26.682
we don't have that route set up for
Journal ID.

265
00:17:26.682 --> 00:17:28.820
So that's what we should see.

266
00:17:28.820 --> 00:17:34.420
So we click this, it worked,
it did exactly what I was supposed to do.

267
00:17:34.420 --> 00:17:39.052
So you can see you got the ID here,
and it went there, and it's 404.

268
00:17:39.052 --> 00:17:43.706
And just to verify like we always do,

269
00:17:43.706 --> 00:17:47.608
we can go to npx prisma studio,

270
00:17:47.608 --> 00:17:53.331
load that thing up, and
click this tab here.

271
00:17:53.331 --> 00:17:56.840
And you can see,
we do have a journal entry now.

272
00:17:56.840 --> 00:18:01.648
And it has our default
content right about your day.

273
00:18:01.648 --> 00:18:04.700
Pretty cool, any questions on that?

274
00:18:04.700 --> 00:18:09.637
Yes.
&gt;&gt; Could you show the createNewEntry thing

275
00:18:09.637 --> 00:18:11.640
in the utils API?

276
00:18:11.640 --> 00:18:14.380
&gt;&gt; Absolutely, there you go.

277
00:18:14.380 --> 00:18:19.279
So basically, what this is doing,
it's weird looking cuz I'm

278
00:18:19.279 --> 00:18:24.190
passing a function in another function,
in another function.

279
00:18:24.190 --> 00:18:27.310
So it's weird,
I guess I could have not done it that way.

280
00:18:27.310 --> 00:18:31.905
But yeah, so this creates the URL,
this creates the request, and

281
00:18:31.905 --> 00:18:33.640
this creates the fetch.

282
00:18:33.640 --> 00:18:35.480
&gt;&gt; We don't need any credentials for

283
00:18:35.480 --> 00:18:38.849
the fetch because this is all
happening on the server, right?

284
00:18:38.849 --> 00:18:41.049
&gt;&gt; This is actually
happening on the client.

285
00:18:41.049 --> 00:18:44.074
And there are credentials being passed or
cookies.

286
00:18:44.074 --> 00:18:48.310
Cookies are passed automatically, so
we don't have to manually pass them.

287
00:18:48.310 --> 00:18:52.210
Yeah, but I think Kurt also includes
a JSON web token in the local stores

288
00:18:52.210 --> 00:18:55.005
that you can use yourself
if you want to do that, but

289
00:18:55.005 --> 00:18:57.547
the cookies are being
passed automatically.

290
00:18:57.547 --> 00:19:02.067
And then what's happening is the cookies
are being passed automatically,

291
00:19:02.067 --> 00:19:06.373
which then, because the route that
we're hitting is not protected, or

292
00:19:06.373 --> 00:19:10.768
it is protected, right here,
this middleware is checking that cookie.

293
00:19:10.768 --> 00:19:13.003
You'd be like, yeah, they're good to go.

294
00:19:13.003 --> 00:19:16.713
And then our function runs, so
then our function comes here.

295
00:19:16.713 --> 00:19:18.013
This function then runs.

296
00:19:18.013 --> 00:19:22.311
And then there's another cookie
check here, so it text a cookie,

297
00:19:22.311 --> 00:19:26.856
then it goes to clerk, comes back
with a user, and then our code runs.

298
00:19:26.856 --> 00:19:28.416
Yeah, there's a lot going on there.

