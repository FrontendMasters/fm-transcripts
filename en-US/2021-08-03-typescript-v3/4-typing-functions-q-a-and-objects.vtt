WEBVTT

1
00:00:00.250 --> 00:00:04.513
Why does TypeScript not complain
in that example, where I'm passing

2
00:00:04.513 --> 00:00:08.820
a number into the promise constructor
whether the result is any?

3
00:00:08.820 --> 00:00:10.950
Yeah, it's kinda mysterious, right?

4
00:00:10.950 --> 00:00:19.660
So I'm gonna go back to that example
because it is quite shocking, right?

5
00:00:19.660 --> 00:00:20.760
Let me let me take us back here.

6
00:00:20.760 --> 00:00:22.470
It's this one right here.

7
00:00:22.470 --> 00:00:29.680
Like the reason I show this to you
is because n E's are dangerous.

8
00:00:29.680 --> 00:00:34.575
And the fact that in this case, just to
recall, like what stage of the code we

9
00:00:34.575 --> 00:00:38.629
were at here, we had not given
arguments a type and therefore,

10
00:00:38.629 --> 00:00:44.380
like what is a plus b even mean when a or
b theoretically could be anything right?

11
00:00:44.380 --> 00:00:45.340
We don't know.

12
00:00:45.340 --> 00:00:49.410
So result ends up being in any.

13
00:00:49.410 --> 00:00:54.185
Now, the point here is
that an any does not just

14
00:00:54.185 --> 00:00:58.722
cause problems that
have to do with itself.

15
00:00:58.722 --> 00:01:03.707
When an enemy is passed
into well that flexibility

16
00:01:03.707 --> 00:01:07.970
will compromise that well typed code.

17
00:01:07.970 --> 00:01:13.169
So in this case,
an any variable can hold anything,

18
00:01:13.169 --> 00:01:18.020
and they can also masquerade as anything.

19
00:01:18.020 --> 00:01:21.060
That's a useful way to think about this.

20
00:01:21.060 --> 00:01:24.784
It's a wild card It can accept anything,
but

21
00:01:24.784 --> 00:01:28.420
it can also present itself as anything.

22
00:01:28.420 --> 00:01:34.559
And in this case, that's gonna cause
problems, even if your types are really,

23
00:01:34.559 --> 00:01:39.570
really good about where that
any goes where it enters into.

24
00:01:39.570 --> 00:01:44.020
So that's the liability of
having something like this.

25
00:01:45.030 --> 00:01:46.980
Hopefully that makes sense.

26
00:01:46.980 --> 00:01:48.320
It can masquerade as anything.

27
00:01:49.910 --> 00:01:53.980
Louise making a comment
about my unit test remarks.

28
00:01:53.980 --> 00:01:57.137
Yes I agree with you that,
the guarantees and

29
00:01:57.137 --> 00:02:02.470
the checking that type script gives
you in a, in a declarative way, right?

30
00:02:02.470 --> 00:02:06.909
These constraints, they help avoid
defensive programming to some extent, but

31
00:02:06.909 --> 00:02:11.688
when we start building type cards, you may
accuse me of defensive programming again.

32
00:02:11.688 --> 00:02:15.410
So I wish to withhold your judgment for
the time being.

33
00:02:17.560 --> 00:02:23.660
All right and he says much of the job
of TypeScript is about type annotation.

34
00:02:23.660 --> 00:02:27.320
The JS doc introduced way before
TypeScript was inter invented.

35
00:02:28.350 --> 00:02:29.890
Let me rephrase this question.

36
00:02:29.890 --> 00:02:34.034
So, Annice you're basically asking,
like, why do we say that there's so

37
00:02:34.034 --> 00:02:36.930
much value that comes
along with TypeScript.

38
00:02:36.930 --> 00:02:41.800
When you could have done some of
these things in the JS doc world.

39
00:02:41.800 --> 00:02:43.620
That's a very fair point.

40
00:02:43.620 --> 00:02:44.950
But let me show you this.

41
00:02:44.950 --> 00:02:48.220
Let me show you what you could
have done in the JS doc world.

42
00:02:50.320 --> 00:02:52.984
So Annice is referring to
the fact that I could have done.

43
00:02:57.074 --> 00:02:59.480
Sorry I always forget
the ordering of this.

44
00:03:05.168 --> 00:03:07.340
Let's hover over these tool tips.

45
00:03:07.340 --> 00:03:08.790
Oops maybe I'm doing this wrong.

46
00:03:10.100 --> 00:03:10.800
I think it's like that.

47
00:03:10.800 --> 00:03:13.211
Let me try one of each, see if it works.

48
00:03:17.304 --> 00:03:22.320
I think the fact that it's running in the
type playground is hurting us a little bit

49
00:03:22.320 --> 00:03:27.352
here, But

50
00:03:27.352 --> 00:03:32.950
take it from me,
I really think it's this B and A number.

51
00:03:34.380 --> 00:03:36.230
So you could have done
something like this.

52
00:03:36.230 --> 00:03:38.974
And if this were a more
normal environment,

53
00:03:38.974 --> 00:03:42.960
we would have seen that like a and
b are regarded as numbers.

54
00:03:42.960 --> 00:03:47.858
But here's something that JS doc would
have also let you do something like

55
00:03:47.858 --> 00:03:52.361
that right where you forget to add
a type for one of your variables and

56
00:03:52.361 --> 00:03:56.787
defining more complicated types
in JS Doc is really complicated,

57
00:03:56.787 --> 00:04:00.110
things with type params and
stuff like that.

58
00:04:00.110 --> 00:04:04.770
So really what JSDoc was missing was
strong enforcement of alignment.

59
00:04:04.770 --> 00:04:10.036
Between the comments that you're
writing and the code that they were

60
00:04:10.036 --> 00:04:15.846
documenting that that was hard, and
for that matter within your function,

61
00:04:15.846 --> 00:04:21.294
JS doc was probably not helping you
much unless you're being extremely

62
00:04:21.294 --> 00:04:26.695
vigilant about saying like result
equal saying Something like this.

63
00:04:33.024 --> 00:04:37.401
This level of JS doc might have
gotten you a long way, but

64
00:04:37.401 --> 00:04:41.810
I don't come across too
many code bases to do this.

65
00:04:41.810 --> 00:04:46.326
It's a lot of vigilance required
to keep all this up today.

66
00:04:50.960 --> 00:04:56.615
Okay, I am actually gonna
proceed because a lot of

67
00:04:56.615 --> 00:05:03.493
these other questions I know
we're going to get to later on.

68
00:05:06.735 --> 00:05:10.324
Nita asks what is a use case for any.

69
00:05:10.324 --> 00:05:14.842
We're gonna talk about that in
the section called Top and Bottom tyes,

70
00:05:14.842 --> 00:05:19.285
dedicated discussion around any and
it's kind of a part of network and

71
00:05:19.285 --> 00:05:23.080
unknown which is kind of
like a special program.

72
00:05:23.080 --> 00:05:25.590
So with that let's pick back up.

73
00:05:25.590 --> 00:05:28.773
Now that we've covered variables and
basic functions,

74
00:05:28.773 --> 00:05:31.390
it's time to talk about collections.

75
00:05:31.390 --> 00:05:33.460
These mutable value types.

76
00:05:33.460 --> 00:05:36.459
And in JavaScript,
these are objects, arrays, and

77
00:05:36.459 --> 00:05:39.800
something called Tuples which
are a special type of array.

78
00:05:42.230 --> 00:05:46.640
So we're gonna learn how to type
all of these different things.

79
00:05:47.870 --> 00:05:50.490
And let's begin with objects.

80
00:05:50.490 --> 00:05:55.462
So when we talk about the types
of objects, they are two things,

81
00:05:55.462 --> 00:05:59.130
what properties are on this object?

82
00:05:59.130 --> 00:06:01.950
And what are the types
of these properties?

83
00:06:01.950 --> 00:06:06.759
And that applied recursively
could describe deeply

84
00:06:06.759 --> 00:06:10.650
nested objects, or very small objects.

85
00:06:10.650 --> 00:06:12.740
I mean that that's the core principle.

86
00:06:12.740 --> 00:06:15.000
Some people refer to this as a shape,
right?

87
00:06:15.000 --> 00:06:16.788
What properties do you have and

88
00:06:16.788 --> 00:06:21.000
what kinds of things can I store
under each of the properties?

89
00:06:21.000 --> 00:06:24.698
So let's just start with
a conceptual model of a car,

90
00:06:24.698 --> 00:06:29.200
which we could describe as
like a 2002 Toyota Corolla.

91
00:06:29.200 --> 00:06:32.404
It has a year a make and
a model, the make and

92
00:06:32.404 --> 00:06:35.699
the model are going to
end up being strings.

93
00:06:36.910 --> 00:06:39.100
And the year it's gonna
end up being a number.

94
00:06:41.050 --> 00:06:45.440
So we can describe the type
of this object as follows.

95
00:06:45.440 --> 00:06:49.562
And again,
we're seeing the same syntax, value, or

96
00:06:49.562 --> 00:06:53.682
like property name or
variable name, colon type, and

97
00:06:53.682 --> 00:06:59.530
we're creating something that looks
a lot like JavaScript objects syntax.

98
00:07:01.280 --> 00:07:04.370
But instead of key value,
we have key type.

99
00:07:07.140 --> 00:07:14.720
We can actually use this colon type syntax
with this structure that we've created.

100
00:07:14.720 --> 00:07:18.090
If we hover over a car,
we can see that it's stuck, right?

101
00:07:18.090 --> 00:07:22.659
So just as before where we were saying,
age colon number, or

102
00:07:22.659 --> 00:07:26.333
end time colon date,
we're seeing car colon and

103
00:07:26.333 --> 00:07:31.550
then this big thing that we've created and
that's a type of object.

104
00:07:35.190 --> 00:07:40.900
If we wanted to use this to describe
an argument, we can do this.

105
00:07:40.900 --> 00:07:46.365
And we can see that as we reach into
this object and we do car.make,

106
00:07:46.365 --> 00:07:51.520
make as a string, model is a string,
and year is a number.

107
00:07:51.520 --> 00:07:54.623
So this is where we're getting
that nice validation and

108
00:07:54.623 --> 00:07:57.140
these would show up in
autocomplete as well.

109
00:07:57.140 --> 00:08:01.540
If you did car.m,
you would see that making model drop down.

