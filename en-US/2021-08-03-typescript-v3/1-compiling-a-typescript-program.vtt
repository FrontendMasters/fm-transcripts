WEBVTT

1
00:00:00.000 --> 00:00:04.401
The first thing we're gonna do is
compile a basic TypeScript program.

2
00:00:04.401 --> 00:00:07.908
And this is gonna be about the simplest
program that we can think of,

3
00:00:07.908 --> 00:00:09.640
consisting only of three files.

4
00:00:10.660 --> 00:00:13.499
Our goals in this chapter are to learn

5
00:00:13.499 --> 00:00:18.540
a little bit about how to use
the TSC compiler command.

6
00:00:18.540 --> 00:00:23.482
We're going to learn and understand
how JavaScript language level and

7
00:00:23.482 --> 00:00:28.980
module type affect the kinda thing
that comes out of our compiler.

8
00:00:28.980 --> 00:00:33.702
And then, finally, we're gonna look at
other things that come out of the compiler

9
00:00:33.702 --> 00:00:35.340
than JavaScript, right?

10
00:00:35.340 --> 00:00:40.259
We're gonna see some type information that
we could potentially publish along with

11
00:00:40.259 --> 00:00:41.130
this code.

12
00:00:41.130 --> 00:00:44.420
If it were a library and
this is called the declaration file.

13
00:00:44.420 --> 00:00:47.890
Which has the extension .d.ts.

14
00:00:49.280 --> 00:00:53.640
So let's consider a simple project,
as I said, it'll consist of three files.

15
00:00:53.640 --> 00:00:55.050
So we've got package JSON,

16
00:00:55.050 --> 00:00:59.590
which is the normal package JSON you're
used to seeing in JavaScript project.

17
00:00:59.590 --> 00:01:04.055
We have a tsconfig file, which
contains all of the instructions, and

18
00:01:04.055 --> 00:01:07.080
options, or passing to the compiler.

19
00:01:07.080 --> 00:01:09.410
And then, finally,
we have some source code.

20
00:01:09.410 --> 00:01:11.690
So let's look at these
three files one by one.

21
00:01:13.030 --> 00:01:15.790
In package JSON,
we can see a couple of things.

22
00:01:15.790 --> 00:01:21.180
We have only one dependency, and it's
a dev dependency, and that is TypeScript.

23
00:01:22.360 --> 00:01:25.280
In addition to that,
we have an NPM script.

24
00:01:25.280 --> 00:01:30.526
So that we could run something like
yarn Dev, or NPM, run Dev, and

25
00:01:30.526 --> 00:01:36.264
we would see the TypeScript compiler
start up and watch our source code.

26
00:01:36.264 --> 00:01:38.644
So that every time we save a file,

27
00:01:38.644 --> 00:01:42.990
it'll incrementally kind
of update the build result.

28
00:01:42.990 --> 00:01:46.696
If you've used Webpack-dev-server or
something like nodemon,

29
00:01:46.696 --> 00:01:49.740
this will give you similar behavior.

30
00:01:49.740 --> 00:01:54.709
And preserve watch output
this just make sure that

31
00:01:54.709 --> 00:02:00.140
every save does not clear
your console's output.

32
00:02:00.140 --> 00:02:03.547
You kind of wanna keep that
council output, in my opinion,

33
00:02:03.547 --> 00:02:06.490
I don't like things erasing
my terminal history.

34
00:02:06.490 --> 00:02:12.510
So let's look at our tsconfig,
the second of the three files.

35
00:02:12.510 --> 00:02:15.369
We have only three
properties in this file, and

36
00:02:15.369 --> 00:02:18.000
we're gonna start from the bottom.

37
00:02:18.000 --> 00:02:21.870
So include tells the compiler
where to find our source code.

38
00:02:21.870 --> 00:02:26.420
In this case, we're going to end
up compiling all ts files that we

39
00:02:26.420 --> 00:02:30.003
find in the source folder,
that's just index ts.

40
00:02:30.003 --> 00:02:33.510
We have two compiler options
that we're defining here.

41
00:02:33.510 --> 00:02:38.770
First is, where are we going
to put our output, right?

42
00:02:38.770 --> 00:02:41.200
Everything that the compiler generates.

43
00:02:41.200 --> 00:02:45.786
By default, TypeScript will create
JavaScript files that are side by side

44
00:02:45.786 --> 00:02:49.380
with the TypeScript
source that created them.

45
00:02:49.380 --> 00:02:53.960
I don't like this because it kind of mixes
my build result with my source code.

46
00:02:53.960 --> 00:02:58.540
I like having everything in a folder
like dist or out, something like that.

47
00:02:58.540 --> 00:03:03.126
So that if I ever wanna clear
everything away and build again,

48
00:03:03.126 --> 00:03:07.220
I can just rm rf and
be rid of the built stuff.

49
00:03:07.220 --> 00:03:09.813
Finally, we have a target property, and

50
00:03:09.813 --> 00:03:13.750
this helps us describe the language
level of our build output.

51
00:03:15.410 --> 00:03:17.368
By default, it's ES3,

52
00:03:17.368 --> 00:03:22.620
which is kind of like Internet Explorer
six level of JavaScript.

53
00:03:22.620 --> 00:03:27.810
And we're gonna start there and see
the garbage that the compiler spits out.

54
00:03:27.810 --> 00:03:31.850
And we're gonna crank that language level
up to more and more modern JavaScript.

55
00:03:31.850 --> 00:03:35.402
Let's say we were only
supporting modern browsers, and

56
00:03:35.402 --> 00:03:38.664
we'll see that things get
cleaned up quite nicely.

57
00:03:38.664 --> 00:03:43.728
So it's important to understand
that everything we described in

58
00:03:43.728 --> 00:03:49.650
this compiler object can be passed
to the TSC command, as a COI flag.

59
00:03:49.650 --> 00:03:51.580
So here's an example of outDir.

60
00:03:51.580 --> 00:03:56.705
Now, I don't typically like
using VCLI flags except in very,

61
00:03:56.705 --> 00:03:59.380
very simple situations.

62
00:03:59.380 --> 00:04:03.958
I'm very quick to sort of set up
a tsconfig and have this nice,

63
00:04:03.958 --> 00:04:08.554
you know, configuration that I
can check in with my project.

64
00:04:08.554 --> 00:04:13.216
And I can be sure that I'm gonna be
running exactly the same command over and

65
00:04:13.216 --> 00:04:14.030
over again.

66
00:04:15.350 --> 00:04:20.200
The last of the three files we're
gonna at, is the source code, right,

67
00:04:20.200 --> 00:04:22.260
this index.ts file.

68
00:04:22.260 --> 00:04:26.961
And it's not a big program, but
it contains a couple interesting

69
00:04:26.961 --> 00:04:31.323
things that will present us with
some clear signals about how

70
00:04:31.323 --> 00:04:35.702
the compiler responds to that
target property, this here.

71
00:04:35.702 --> 00:04:40.740
As well as the type of module we
instruct the compiler to make for us.

72
00:04:40.740 --> 00:04:44.731
So you're going to see that it
includes the use of a promise,

73
00:04:44.731 --> 00:04:50.300
which only came with JavaScript
2015 edition, right, ES2015.

74
00:04:50.300 --> 00:04:53.485
Then we'll see that a sync and
await are used,

75
00:04:53.485 --> 00:04:58.967
which kind of had partial support
through generator functions in ES2015.

76
00:04:58.967 --> 00:05:03.872
But it only got real clear
support like using a sync and

77
00:05:03.872 --> 00:05:07.905
await as keywords that came in ES2017.

78
00:05:07.905 --> 00:05:11.260
So we should start to see
things kind of disappear and

79
00:05:11.260 --> 00:05:16.142
become the more normal code that we're
used to reading modern JavaScript as

80
00:05:16.142 --> 00:05:18.290
we crank that language level up.

81
00:05:19.430 --> 00:05:21.010
And here is the source code.

82
00:05:21.010 --> 00:05:24.180
So all this program does,
here's the entry point.

83
00:05:24.180 --> 00:05:27.980
It console.log something,
and what is it console.log?

84
00:05:27.980 --> 00:05:34.330
Well, it's whatever addNumbers returns and
that gets awaited.

85
00:05:34.330 --> 00:05:40.100
So addNumbers, just waits for half
a second and then adds a and b together.

86
00:05:40.100 --> 00:05:43.808
So effectively we should see
like a half second wait and

87
00:05:43.808 --> 00:05:47.770
then seven printed to our console,
not too complicated.

88
00:05:50.120 --> 00:05:52.992
This is a good opportunity for
me to show you one of

89
00:05:52.992 --> 00:05:57.000
the features of this website that
we're gonna be looking at today.

90
00:05:58.440 --> 00:06:02.990
You can hover over various
symbols in these code samples and

91
00:06:02.990 --> 00:06:06.910
see what you would be seeing
in Visual Studio Code.

92
00:06:06.910 --> 00:06:11.597
So this is a little bit like a read
only VS Code frame where you can

93
00:06:11.597 --> 00:06:17.090
really understand the types of
everything that you're touching.

94
00:06:17.090 --> 00:06:21.102
This is really, really important
because the tooltips don't lie,

95
00:06:21.102 --> 00:06:24.422
this will tell you why something
is failing and it helps,

96
00:06:24.422 --> 00:06:28.290
you understand what's
going on within the code.

97
00:06:28.290 --> 00:06:32.765
So the vast majority of the code samples,
you'll see today allow you to do this.

98
00:06:32.765 --> 00:06:37.739
Additionally, if we want to see this
code run in the TypeScript playground,

99
00:06:37.739 --> 00:06:39.738
you could hit this try button.

100
00:06:39.738 --> 00:06:44.677
And it would take you right here and
you'd be able to actually click logs,

101
00:06:44.677 --> 00:06:47.873
and run this, and
right now, we can't run it.

102
00:06:47.873 --> 00:06:51.549
But because we have an expert
in this playground,

103
00:06:51.549 --> 00:06:54.870
which it's not designed to handle.

104
00:06:54.870 --> 00:06:59.105
But you're gonna be able to actually,
play with each of these examples and

105
00:06:59.105 --> 00:07:02.400
I encourage you to poke at them and
to understand them, and

106
00:07:02.400 --> 00:07:05.070
to maybe try to break
them try to fix them.

107
00:07:05.070 --> 00:07:07.710
So let's go back to what
we were just looking at.

108
00:07:07.710 --> 00:07:13.080
So this is our small program and here I'm
cluing you into hovering over tooltips.

109
00:07:14.250 --> 00:07:16.269
So how might we run the compiler?

110
00:07:16.269 --> 00:07:20.939
Well, if you were to check this program
out this this repo out what you could, you

111
00:07:20.939 --> 00:07:26.340
could run yarn dev, and you would see that
TypeScript is starting to watch your code.

112
00:07:26.340 --> 00:07:29.331
And immediately you would
see a dist folder created,

113
00:07:29.331 --> 00:07:32.130
which would contain an index.js file.

114
00:07:32.130 --> 00:07:36.378
And we can look at what
that code would be and

115
00:07:36.378 --> 00:07:40.280
shield your eyes because it's a mess.

116
00:07:41.420 --> 00:07:46.376
This is like all the polyfills,
right, this is a sync and

117
00:07:46.376 --> 00:07:51.350
await and promises and
just a bunch of junk here, right?

118
00:07:51.350 --> 00:07:56.160
Remember, this is really dumbed
down JavaScript for IE6.

119
00:07:56.160 --> 00:07:59.690
So we're gonna close this,
be done with it.

120
00:07:59.690 --> 00:08:03.330
And that'll be our starting point,
just a bunch of junk.

121
00:08:04.370 --> 00:08:09.794
So let's change the target language level,
we can simply go from ES3 to ES2015.

122
00:08:11.030 --> 00:08:16.130
Leaving everything else intact, and
the compiler output would change.

123
00:08:17.700 --> 00:08:20.887
So now we start to see some more
modern language features, but

124
00:08:20.887 --> 00:08:23.320
not everything we're used to seeing.

125
00:08:23.320 --> 00:08:30.830
So there is a promise constructor which
is nice, we do see a yield keyword.

126
00:08:30.830 --> 00:08:36.760
Interesting that we got this in ES2015,
but we didn't get a sync and await yet.

127
00:08:36.760 --> 00:08:41.332
So we have a generator function
which makes the polyfill for

128
00:08:41.332 --> 00:08:44.830
a sync and await makes it much cleaner.

129
00:08:44.830 --> 00:08:49.920
Because that's a very important thing to
be able to use to define a sync and await.

130
00:08:49.920 --> 00:08:56.870
But it doesn't yet look like our source
code with the type stripped away.

131
00:08:56.870 --> 00:08:58.950
That's where we're sort of
working our way towards.

132
00:09:00.420 --> 00:09:07.060
So this is ES2015 if we step up to ES2017,
this is what it would look like.

133
00:09:07.060 --> 00:09:11.360
So we're going to see actual use
of the a sync and await keywords.

134
00:09:11.360 --> 00:09:15.935
And this a waiter helper,
which is this thing up here,

135
00:09:15.935 --> 00:09:19.522
that will have disappeared and here we go.

136
00:09:19.522 --> 00:09:24.180
Now, this looks like our TypeScript
code with the types removed.

137
00:09:26.100 --> 00:09:29.348
So if you're interested in
how to define your output,

138
00:09:29.348 --> 00:09:32.500
target is a really
important thing to define.

139
00:09:32.500 --> 00:09:36.511
One of the questions we got
during the break had to do

140
00:09:36.511 --> 00:09:39.530
with multi target output, right?

141
00:09:39.530 --> 00:09:42.325
What if you're building for
modern browsers and

142
00:09:42.325 --> 00:09:44.990
you have a legacy browser
you need to support.

143
00:09:44.990 --> 00:09:50.144
So typically what I would do is have
TypeScript output something like this,

144
00:09:50.144 --> 00:09:53.230
which by the way, still is in ES modules.

145
00:09:53.230 --> 00:09:57.866
And then you could use something like
Babel to make a legacy build for

146
00:09:57.866 --> 00:09:59.423
IE11 if you need to.

147
00:09:59.423 --> 00:10:04.350
So in your dist folder,
if we had run the compiler,

148
00:10:04.350 --> 00:10:09.048
we would have found
a file called index.d.ts,

149
00:10:09.048 --> 00:10:12.600
and this is a declaration file.

150
00:10:12.600 --> 00:10:16.486
Now, there's a new keyword here that
I'm gonna ask you to ignore for

151
00:10:16.486 --> 00:10:18.180
the time being.

152
00:10:18.180 --> 00:10:20.870
Cuz it's not the most
interesting thing going on here.

153
00:10:20.870 --> 00:10:25.870
The most interesting thing is this appears
to be a function with no implementation.

154
00:10:25.870 --> 00:10:30.910
It's just sort of a semi colon at
the end of the arguments list, right?

155
00:10:30.910 --> 00:10:35.686
So you can think of this almost like
the types that were stripped away from

156
00:10:35.686 --> 00:10:37.210
our source code.

157
00:10:37.210 --> 00:10:41.744
So you start with TypeScript,
which is code that runs and

158
00:10:41.744 --> 00:10:46.940
types, and then your compiler
almost separates those out.

159
00:10:46.940 --> 00:10:51.531
So you get a js file that runs and
you get these dts files,

160
00:10:51.531 --> 00:10:55.780
which contain only the type information.

161
00:10:55.780 --> 00:10:56.840
Why is this good?

162
00:10:56.840 --> 00:11:02.480
Well, it lets people who are just using
JavaScript who aren't writing TypeScript.

163
00:11:02.480 --> 00:11:05.950
They can compile those js files and
just call it a day.

164
00:11:05.950 --> 00:11:10.642
And people who are writing TypeScript,
they can kind of reassemble that together

165
00:11:10.642 --> 00:11:15.750
and have the JavaScript that runs and
the types that describe the constraints.

166
00:11:15.750 --> 00:11:20.870
So this is what will allow you to remain
compatible with users who depend on

167
00:11:20.870 --> 00:11:26.250
your code regardless of whether they
themselves are authoring TypeScript.

168
00:11:27.570 --> 00:11:30.883
So one more thing that's important to
understand are the types of modules

169
00:11:30.883 --> 00:11:32.690
the compiler is emitting.

170
00:11:32.690 --> 00:11:36.252
If we tried to run this code
that we generated up here,

171
00:11:36.252 --> 00:11:40.542
right this code here,
specifically with this export keyword.

172
00:11:40.542 --> 00:11:42.656
If we tried to run this with node,

173
00:11:42.656 --> 00:11:47.124
we would get an error right at that
line with the export keyword, why?

174
00:11:47.124 --> 00:11:52.768
Node wants common j s modules
right this is node js is module

175
00:11:52.768 --> 00:11:58.315
system predates a standardized
JavaScript module.

176
00:11:58.315 --> 00:12:03.161
And even today, although they are moving
towards these standardized modules,

177
00:12:03.161 --> 00:12:06.165
even today,
node wants to run a common j s module.

178
00:12:07.990 --> 00:12:10.170
And you can read more about
that if you click this link.

179
00:12:11.200 --> 00:12:16.023
But if we wanted to make something that
runs with node, it's just as easy as

180
00:12:16.023 --> 00:12:20.860
adding a module property to our
compiler options in the tsconfig file.

181
00:12:20.860 --> 00:12:27.330
And what this is gonna generate for us is
it will change this export add numbers and

182
00:12:27.330 --> 00:12:33.040
we'll change that into
exports.addNumbers equals addNumbers.

183
00:12:33.040 --> 00:12:40.250
So this is the kind of output that
we expect in the node js world.

184
00:12:40.250 --> 00:12:42.262
This represents the easiest and

185
00:12:42.262 --> 00:12:46.294
simplest possible TypeScript
program that you could compile.

186
00:12:47.950 --> 00:12:51.242
Now we're going to pivot and
talk about the programming language.

187
00:12:51.242 --> 00:12:52.900
Now that we kind of know
how to use the tool

