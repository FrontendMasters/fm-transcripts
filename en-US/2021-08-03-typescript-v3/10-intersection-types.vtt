WEBVTT

1
00:00:00.927 --> 00:00:02.718
Great, so those are union types.

2
00:00:02.718 --> 00:00:07.255
Let's talk about intersection types,
and as we get into intersection types,

3
00:00:07.255 --> 00:00:11.332
I should be clear that you're going
to find union types far more often.

4
00:00:11.332 --> 00:00:15.022
And I want you to think about
why that might be, well,

5
00:00:15.022 --> 00:00:17.735
we'll leave that as a mystery for now.

6
00:00:17.735 --> 00:00:20.975
Intersection types
are substantially more rare.

7
00:00:20.975 --> 00:00:25.834
And conceptually,
what an intersection type is,

8
00:00:25.834 --> 00:00:29.906
just to remind you, it is an END operator.

9
00:00:29.906 --> 00:00:37.054
And this is where in terms of the values
allowed, if we go back up to the top here,

10
00:00:37.054 --> 00:00:43.589
we're talking about only the overlap
between these two sets of things.

11
00:00:43.589 --> 00:00:48.309
Let's use an example here,
and let's imagine

12
00:00:48.309 --> 00:00:53.148
a case where we wanted
an instrumented promise.

13
00:00:53.148 --> 00:00:57.667
And by that I mean a promise that
sort of measures the time at which

14
00:00:57.667 --> 00:01:02.539
an async operation began, and
then a time at which things finished.

15
00:01:02.539 --> 00:01:05.177
Maybe you want to print
this to the console or

16
00:01:05.177 --> 00:01:10.401
fire some sort of tracking event, so you
can understand how your code's performing.

17
00:01:10.401 --> 00:01:15.491
In any case,
it could look something like this.

18
00:01:15.491 --> 00:01:19.041
Well, sorry,
I described a use case here and

19
00:01:19.041 --> 00:01:23.443
actually changed my mind and
made it a similar use case.

20
00:01:23.443 --> 00:01:27.313
Let me describe what this use case does.

21
00:01:27.313 --> 00:01:30.953
Just cuz the promised one turned out to be
tricky, this is something I've actually

22
00:01:30.953 --> 00:01:34.398
used it for to be clear, this is something
I can make a concise example around.

23
00:01:34.398 --> 00:01:38.220
So, what we're doing here
is we have a date, and

24
00:01:38.220 --> 00:01:43.746
we want basically date to have a new
property on it that's called end.

25
00:01:43.746 --> 00:01:48.569
Now we're not changing all dates
by reopening the prototype and

26
00:01:48.569 --> 00:01:53.031
tacking on a new function,
we just want a date with extras,

27
00:01:53.031 --> 00:01:55.635
a date with some extra stuff on it.

28
00:01:55.635 --> 00:01:58.267
So this is what this could look like.

29
00:01:58.267 --> 00:02:02.871
So we've got makeWeek, and
it'll use today as the start date,

30
00:02:02.871 --> 00:02:07.488
it'll add a week to today's date
in order to establish the end.

31
00:02:07.488 --> 00:02:14.567
And I'm using this spread operator to
basically get everything that's on date,

32
00:02:14.567 --> 00:02:18.568
or everything that's on start, rather, and

33
00:02:18.568 --> 00:02:23.508
then tack on the other day at
the end of the week to the end.

34
00:02:23.508 --> 00:02:29.124
The type I get back is everything
that you know and love about date,

35
00:02:29.124 --> 00:02:35.365
and in addition to that, an end property
where you can find another date.

36
00:02:35.365 --> 00:02:38.156
I'm just gonna open
this in the playground.

37
00:02:38.156 --> 00:02:42.748
So we've got all of this stuff,
the regular date API, and

38
00:02:42.748 --> 00:02:46.613
there's the end, and
there's the other date.

39
00:02:46.613 --> 00:02:50.366
So it's sort of like mashing
these two things together, right?

40
00:02:50.366 --> 00:02:52.332
That's what this end operator does.

41
00:02:52.332 --> 00:02:55.537
It's almost like a merging
together of two types.

42
00:02:55.537 --> 00:03:01.127
This being one and this being the other.

43
00:03:01.127 --> 00:03:01.632
&gt;&gt; Doesn't this look more like
a union than an intersection?

44
00:03:01.632 --> 00:03:06.708
Because when you say, this way it doesn't

45
00:03:06.708 --> 00:03:11.932
have all the properties
of the data option.

46
00:03:11.932 --> 00:03:17.177
&gt;&gt; So if you look at the behavior
that's available to you,

47
00:03:17.177 --> 00:03:24.216
it like feels like the labels for
these types are kind of reversed, right?

48
00:03:24.216 --> 00:03:29.180
But if you think about these
in terms of the values that

49
00:03:29.180 --> 00:03:34.704
you're allowed to have,
that's where this makes sense.

50
00:03:34.704 --> 00:03:37.648
So let's go back up to
our diagram at the top,

51
00:03:37.648 --> 00:03:41.849
let's say that we have a set of
a bunch of different values here.

52
00:03:41.849 --> 00:03:46.930
On the left, instead of fruit,
we have all things that are dates.

53
00:03:46.930 --> 00:03:48.440
And on the right,

54
00:03:48.440 --> 00:03:53.988
we have all things that have an end
property whose value is a date.

55
00:03:53.988 --> 00:03:57.181
The only thing that we're happy with here,

56
00:03:57.181 --> 00:04:02.706
the only thing that matches our type
with that intersection type operator,

57
00:04:02.706 --> 00:04:06.780
the end, it would be things
that meet both categories.

58
00:04:06.780 --> 00:04:11.470
So, depending on how you look at it,
you could see at one of two ways.

59
00:04:11.470 --> 00:04:16.428
If you're thinking about this in
terms of the the set theory, meaning,

60
00:04:16.428 --> 00:04:20.915
I have a variable of this type,
what values is it allowed to hold?

61
00:04:20.915 --> 00:04:24.716
Then it's this slice in the middle,
it's the intersection.

62
00:04:24.716 --> 00:04:29.532
But if you're thinking about it
in terms of the resultant object,

63
00:04:29.532 --> 00:04:31.084
what can I do with it?

64
00:04:31.084 --> 00:04:33.541
Well, that's where you see everything.

65
00:04:33.541 --> 00:04:36.731
If we changed our mental model to like,
on the left,

66
00:04:36.731 --> 00:04:41.659
we've got things that can be done on date,
and on the right we've got things that

67
00:04:41.659 --> 00:04:46.690
can be done on this object with an end
property, now we can do everything, right?

68
00:04:46.690 --> 00:04:48.091
It's the whole thing.

69
00:04:48.091 --> 00:04:55.500
That is not what this kind of
type derives its name from.

70
00:04:55.500 --> 00:04:59.073
It's not about what you can do with it,

71
00:04:59.073 --> 00:05:03.202
it's about what types
of values may it hold.

72
00:05:03.202 --> 00:05:08.311
But I feel your pain in that,
I get these things mixed up a lot,

73
00:05:08.311 --> 00:05:14.819
because it's tempting to think of it in
terms of what may be done on this thing.

74
00:05:14.819 --> 00:05:19.818
But where they get their names has
to do with which set of values

75
00:05:19.818 --> 00:05:23.965
are allowable to be type
equivalent to this thing.

76
00:05:23.965 --> 00:05:25.047
Does that make sense?

77
00:05:25.047 --> 00:05:27.876
It's really tricky,
I used to teach this and

78
00:05:27.876 --> 00:05:30.854
say, look,
I want you to push intersection and

79
00:05:30.854 --> 00:05:35.337
union those words, push them out
the door and just remember end and or.

80
00:05:35.337 --> 00:05:40.085
Cuz we know we've got the two symbols,
they match up with the way we use them in

81
00:05:40.085 --> 00:05:45.148
JavaScript conditionals, that level of
understanding will take you a long way.

82
00:05:45.148 --> 00:05:49.657
But in terms of the way we think
about these sets, it's really mostly

83
00:05:49.657 --> 00:05:54.413
about what can this value hold, and
it's only the things that are both.

84
00:05:54.413 --> 00:06:01.177
And as a result, you get everything
that's available on either type, right?

85
00:06:01.177 --> 00:06:05.350
Hopefully, that makes sense,
I'm always looking for

86
00:06:05.350 --> 00:06:08.201
better ways to explain this to folks.

87
00:06:08.201 --> 00:06:14.521
But it's a common dissonance that people
experience when they learn TypeScript.

88
00:06:14.521 --> 00:06:18.323
All right, so I am stating,

89
00:06:18.323 --> 00:06:25.138
I'm postulating that
there's a 50 to 1 ratio or

90
00:06:25.138 --> 00:06:30.050
more of when you'll see there we go,

91
00:06:30.050 --> 00:06:34.183
I'm searching them already.

92
00:06:34.183 --> 00:06:41.163
A 50 to 1 ratio, when you'll see the or
types versus the end types.

93
00:06:41.163 --> 00:06:47.134
And as you think about why this might be,
consider control flow.

94
00:06:47.134 --> 00:06:52.511
So, we can have functions that branch,
right?

95
00:06:52.511 --> 00:06:55.153
You have a condition and
in one case you do one thing and

96
00:06:55.153 --> 00:06:56.991
the other case you do another thing.

97
00:06:56.991 --> 00:07:05.021
The return type of the function
ends up being path A or path B.

98
00:07:05.021 --> 00:07:12.088
So a lot of these or types originate
from things that look kind of like this.

99
00:07:15.839 --> 00:07:17.392
Right?

100
00:07:17.392 --> 00:07:24.835
As a result, we get this or,
this will happen a lot in your code.

101
00:07:24.835 --> 00:07:27.810
Branching is something that happens a lot.

102
00:07:27.810 --> 00:07:31.729
Control flow happens a lot,
it's a very, very common phenomenon.

103
00:07:31.729 --> 00:07:38.591
This sort of merging of two things
together, much less common,

104
00:07:38.591 --> 00:07:45.210
so that's why you're gonna see this or
thing far more often.

105
00:07:45.210 --> 00:07:51.642
It's because control flow
results in many possibilities,

106
00:07:51.642 --> 00:07:55.676
depending on what the inputs are, and

107
00:07:55.676 --> 00:07:59.851
thus you get the or, or union type out.

108
00:07:59.851 --> 00:08:03.770
And that's it, that's the end and the or.

109
00:08:03.770 --> 00:08:07.877
The devil's in the details here, and when
used in conjunction with other things gets

110
00:08:07.877 --> 00:08:10.801
more complicated, but
you can just think of it as end and or.

111
00:08:10.801 --> 00:08:16.730
With that, it's about time for us to
talk about interfaces and type aliases.

