WEBVTT

1
00:00:00.470 --> 00:00:03.422
The last topic we're
going to talk about in

2
00:00:03.422 --> 00:00:08.860
TypeScript Fundamentals V3 is
generic scopes and constraints.

3
00:00:08.860 --> 00:00:15.343
So these are some final details I want
to add to the concept of generics, so

4
00:00:15.343 --> 00:00:21.600
you can start to make use of
them in practical applications.

5
00:00:21.600 --> 00:00:25.382
Scopes and constraints have to do with
where you can use type parameters

6
00:00:25.382 --> 00:00:28.210
depending on where they're defined.

7
00:00:28.210 --> 00:00:33.875
And minimum requirements you
can impose on type parameters

8
00:00:33.875 --> 00:00:39.970
such that you can consume
them within your function.

9
00:00:39.970 --> 00:00:43.898
And that will make a little bit more
sense what I mean by that as we get into

10
00:00:43.898 --> 00:00:44.630
that topic.

11
00:00:46.387 --> 00:00:49.827
So again, I want to begin
with a motivating use case,

12
00:00:49.827 --> 00:00:53.250
why would we care about scopes and
constraints?

13
00:00:53.250 --> 00:00:56.487
What would be missing if we
didn't have these things?

14
00:00:58.178 --> 00:01:03.780
So constraints allow us to describe
a minimum requirement for a type param.

15
00:01:03.780 --> 00:01:08.802
And that is important in order
to be able to use, for example,

16
00:01:08.802 --> 00:01:14.000
the things within this list
beyond what we have seen so far.

17
00:01:14.000 --> 00:01:19.023
So we just dealt with this
list to dict function while we

18
00:01:19.023 --> 00:01:23.948
were passed a callback
that's used to generate IDs.

19
00:01:23.948 --> 00:01:29.619
But let's say we were building
something out for a data layer,

20
00:01:29.619 --> 00:01:36.360
where every object that we're working
with has a property on it called ID.

21
00:01:37.400 --> 00:01:39.865
Maybe it's coming from sequel database or

22
00:01:39.865 --> 00:01:43.154
something where there's just
always this primary key.

23
00:01:43.154 --> 00:01:45.306
It's always going to be there, and

24
00:01:45.306 --> 00:01:49.696
we always want to use that as the
mechanism for storing it in dictionary.

25
00:01:49.696 --> 00:01:53.540
Well, we don't need this callback anymore,
but

26
00:01:53.540 --> 00:01:58.391
we do have to define this assumption
about what the bare minimum

27
00:01:58.391 --> 00:02:03.350
requirement for the kinds of things
we expect to be in this list.

28
00:02:03.350 --> 00:02:06.050
We need to define that somewhere.

29
00:02:06.050 --> 00:02:12.155
So let's dig into this.

30
00:02:14.730 --> 00:02:20.027
So the function signature we'd like to
arrive at, we'd like to change from

31
00:02:20.027 --> 00:02:25.320
something like this to something
that kind of looks like this, right?

32
00:02:25.320 --> 00:02:29.988
So, previously,
we kind of had a list of any's here or

33
00:02:29.988 --> 00:02:33.032
some other very specific type, but

34
00:02:33.032 --> 00:02:38.316
we need everything to at least be
an object that has an ID on it.

35
00:02:38.316 --> 00:02:42.610
It's a minimum constraint that we need,
why?

36
00:02:42.610 --> 00:02:46.788
Because as we store items in
the dictionary, we're gonna reach into

37
00:02:46.788 --> 00:02:51.530
this item, and we're gonna retrieve
a property off of it called ID.

38
00:02:51.530 --> 00:02:56.270
We didn't have this requirement with
the first version of this algorithm.

39
00:02:56.270 --> 00:03:01.440
Right up here, we were given a function
that we could use to get these IDs.

40
00:03:01.440 --> 00:03:06.390
Whoever was calling this function,
it was their job to tell us what to do.

41
00:03:06.390 --> 00:03:08.565
We simply just said,
you gave me a callback,

42
00:03:08.565 --> 00:03:10.810
I'm going to use this
item with the callback.

43
00:03:10.810 --> 00:03:14.745
I have my ID, I don't need to
know how this callback works,

44
00:03:14.745 --> 00:03:17.560
you handle that you provide it to me.

45
00:03:17.560 --> 00:03:22.200
Well, now we need to be able to
reach into this, and grab an ID.

46
00:03:23.570 --> 00:03:28.111
So we need everything we
receive to have an ID.

47
00:03:28.111 --> 00:03:29.420
Here's how this would work.

48
00:03:32.290 --> 00:03:36.750
This would be the naive approach
that would fail, right?

49
00:03:36.750 --> 00:03:40.856
If we just tried to say, I have a type
paramater T, I get a list of T's,

50
00:03:40.856 --> 00:03:45.750
effectively this thing becomes pretty
pointless within the function.

51
00:03:45.750 --> 00:03:50.475
So if we look at this, so
I've got my item here,

52
00:03:50.475 --> 00:03:53.557
I've got a T in this callback.

53
00:03:53.557 --> 00:03:57.648
If I try to get an autocomplete on
this thing, there's nothing there for

54
00:03:57.648 --> 00:03:58.720
me to use.

55
00:03:58.720 --> 00:04:01.690
I cannot safely do anything here, why?

56
00:04:01.690 --> 00:04:05.700
Because T could be anything,
it could be a list of nulls.

57
00:04:07.660 --> 00:04:13.422
I can't safely do anything because
there's no minimum requirement for

58
00:04:13.422 --> 00:04:16.640
what kinds of Ts I'm willing to accept.

59
00:04:18.210 --> 00:04:19.601
So we need something better,

60
00:04:19.601 --> 00:04:22.503
we need something that allows
us to always have that ID there.

61
00:04:24.680 --> 00:04:28.898
So what we need to do is
describe this constraint.

62
00:04:28.898 --> 00:04:32.585
And I'm showing you kind of a one
line diff version of the change that

63
00:04:32.585 --> 00:04:33.500
we need to make.

64
00:04:33.500 --> 00:04:38.906
Because it's useful to understand where
the information moves as we start

65
00:04:38.906 --> 00:04:45.590
with the non-generic version of our
function, and move to the generic version.

66
00:04:45.590 --> 00:04:50.348
This here, right,
this is the minimum base class of minimum

67
00:04:50.348 --> 00:04:53.907
constraint we need this
stuff to align with.

68
00:04:53.907 --> 00:05:00.301
It kind of moves into two places here,
one like the array nature of this.

69
00:05:00.301 --> 00:05:07.913
We put that over here, but we've got this
constraint on that type parameter now.

70
00:05:07.913 --> 00:05:15.019
And you might be wondering, are we using
extends again, yet again, right, extends.

71
00:05:15.019 --> 00:05:17.990
What does this have to do with
the extends that I already know about?

72
00:05:17.990 --> 00:05:22.037
Well, it's kind of related,
at least conceptually,

73
00:05:22.037 --> 00:05:26.598
in that when you have a subclass
that extends from a base class,

74
00:05:26.598 --> 00:05:31.872
you're kinda guaranteed to have all
of that base class functionality.

75
00:05:31.872 --> 00:05:35.414
All of the class fields that were there,
all of the methods, and

76
00:05:35.414 --> 00:05:36.920
you might have more.

77
00:05:36.920 --> 00:05:38.103
But at minimum,

78
00:05:38.103 --> 00:05:43.390
you are gonna have everything that
can be expected of the base class.

79
00:05:43.390 --> 00:05:47.254
While here we're saying I
can be given any T, but

80
00:05:47.254 --> 00:05:50.940
it has to at least meet
this base requirement.

81
00:05:53.590 --> 00:05:58.638
That's the best I can do at
helping you at unifying this

82
00:05:58.638 --> 00:06:03.371
concept of extends across
everywhere it's used.

83
00:06:10.393 --> 00:06:14.460
So let's talk about scopes as they
have to do with type parameters.

84
00:06:17.340 --> 00:06:19.401
In the world of variables,

85
00:06:19.401 --> 00:06:25.660
we know that inner scopes can see things
that are available in outer scopes.

86
00:06:25.660 --> 00:06:29.267
For example in here,
I am able to see bowl,

87
00:06:29.267 --> 00:06:33.590
and I'm able to see apple,
I can see both, right?

88
00:06:33.590 --> 00:06:36.700
You can you can see from the inside out,
but

89
00:06:36.700 --> 00:06:41.450
not the outside in type parameters
work a very similar way.

90
00:06:41.450 --> 00:06:48.290
So here we have a higher order function
that's used to create a tuple.

91
00:06:48.290 --> 00:06:53.001
So you give it the first thing
that goes into the tuple, and

92
00:06:53.001 --> 00:06:58.096
then you give it the last thing
that you want to see in the tuple,

93
00:06:58.096 --> 00:07:00.810
just a tuple of size two, right?

94
00:07:00.810 --> 00:07:05.723
So ultimately, what's gonna happen,
if we look at the usage here,

95
00:07:05.723 --> 00:07:07.768
we've got a tupleCreator.

96
00:07:07.768 --> 00:07:10.352
And that returns a function, and

97
00:07:10.352 --> 00:07:14.770
then we finish the tuple
by giving that an argument.

98
00:07:14.770 --> 00:07:19.593
So everything's gonna start with three,
but then it'll finish with null or

99
00:07:19.593 --> 00:07:22.260
finish with this array of numbers.

100
00:07:22.260 --> 00:07:27.076
And I just wanna make it clear that
here you can see we're allowed,

101
00:07:27.076 --> 00:07:32.150
just as in this case above where down
here we can access both fruit and,

102
00:07:32.150 --> 00:07:34.810
sorry, both apple and bowl.

103
00:07:34.810 --> 00:07:37.976
Here, we can access both T and

104
00:07:37.976 --> 00:07:42.799
S because inner scopes
can see outer scopes.

105
00:07:42.799 --> 00:07:46.792
Just be careful you don't make
things too complicated with this.

106
00:07:46.792 --> 00:07:53.150
But a more pragmatic example might be you
have a type parameter that's on a class.

107
00:07:53.150 --> 00:07:57.007
And then you have a method that has
another type parameter of some sort.

108
00:08:01.840 --> 00:08:06.439
So finally,
the last thing I want to leave you with

109
00:08:06.439 --> 00:08:12.200
here are some best practices
around using generics.

110
00:08:12.200 --> 00:08:19.118
So first, make sure you remember that
the point of these type parameters and

111
00:08:19.118 --> 00:08:24.220
of generic types is to relate
multiple things, right?

112
00:08:24.220 --> 00:08:28.606
In the case of our list
to dictionary example,

113
00:08:28.606 --> 00:08:34.720
we're saying the list I'm given
is related to the callback.

114
00:08:34.720 --> 00:08:37.833
They're of the same type,
they both involve a T, right?

115
00:08:37.833 --> 00:08:43.210
And then I returned something that
has a T in it, so they're all linked.

116
00:08:43.210 --> 00:08:47.676
If you're not using a type
parameter more than once,

117
00:08:47.676 --> 00:08:52.045
you can end up casting inadvertently,
basically,

118
00:08:52.045 --> 00:08:58.520
forcing TypeScript to regard something
you have as a different type.

119
00:08:58.520 --> 00:09:01.460
So let's look at this,
let's look at what's going on here.

120
00:09:01.460 --> 00:09:05.171
We've got a function here that says,
return as string.

121
00:09:08.372 --> 00:09:12.460
Shouldn't be called returning a string,
but return as something.

122
00:09:12.460 --> 00:09:17.079
So we give it an argument which
isn't any and it returns a T.

123
00:09:17.079 --> 00:09:22.401
But look, we can give it a window,
and we're gonna be forced to specify

124
00:09:22.401 --> 00:09:27.830
a type parameter explicitly here
because nothing can be inferred here.

125
00:09:27.830 --> 00:09:31.220
We're not like accepting a T,
we're just returning a T.

126
00:09:31.220 --> 00:09:35.870
But effectively, what ends up happening
here is Windows passing straight through.

127
00:09:35.870 --> 00:09:38.413
But we've changed its type to a number,
and

128
00:09:38.413 --> 00:09:41.723
this is should be obvious why
this is dangerous, right?

129
00:09:41.723 --> 00:09:45.108
It's typecasting using
a different mechanism.

130
00:09:45.108 --> 00:09:51.240
And typecasting is typically done with
this as keyword where we're saying,

131
00:09:51.240 --> 00:09:57.675
look, just I know this is a window, but
I want you to regard it as something else.

132
00:09:57.675 --> 00:10:02.594
So when doing a code review, you might
be scanning through to see if someone's

133
00:10:02.594 --> 00:10:05.290
written as, but this is typecasting too.

134
00:10:06.950 --> 00:10:11.710
A single use of a type param,
right, it's only used here.

135
00:10:11.710 --> 00:10:13.875
This will have the same effect,

136
00:10:13.875 --> 00:10:17.790
it's just a harder problem
to catch in a code review.

137
00:10:17.790 --> 00:10:21.847
See two or more times,
that's where you want to use type params.

138
00:10:21.847 --> 00:10:27.812
This here, we call this convenience
casting, and if you're gonna cast,

139
00:10:27.812 --> 00:10:31.894
cast in a way, that is obvious for
code reviewers.

140
00:10:31.894 --> 00:10:37.028
It may be what you want to do, but
you want to have that discussion, and

141
00:10:37.028 --> 00:10:42.445
you want it to be clear that you're
going to change the type of this thing.

142
00:10:47.075 --> 00:10:53.267
So you want to define your type
parameters as simply as possible, and

143
00:10:53.267 --> 00:10:59.778
in a way that allows you to take advantage
of all of the static analysis and

144
00:10:59.778 --> 00:11:03.867
the inference that
TypeScript has to offer.

145
00:11:06.130 --> 00:11:12.024
So in this case, notice that,

146
00:11:12.024 --> 00:11:17.700
sorry, we have two options.

147
00:11:17.700 --> 00:11:25.134
We can either say T is a type, and
that type extends from an array of HasIds,

148
00:11:25.134 --> 00:11:29.740
versus down here we could
say T extends HasId.

149
00:11:29.740 --> 00:11:34.533
And the benefit here is
basically your types are gonna

150
00:11:34.533 --> 00:11:39.536
get a lot dirtier, and
depending see the tool tip here,

151
00:11:39.536 --> 00:11:43.496
it's sort of being inferred differently.

152
00:11:45.477 --> 00:11:47.152
I mean, it's kind of strange, right?

153
00:11:47.152 --> 00:11:51.006
The list is a T,
T extends an array of HasIds,

154
00:11:51.006 --> 00:11:54.460
let's see what the return type is here.

155
00:11:54.460 --> 00:11:58.904
Look at that, look at what
the return type is, it's a has ID or

156
00:11:58.904 --> 00:12:04.170
an undefined, whereas the return
type here, it's a T or undefined.

157
00:12:04.170 --> 00:12:07.520
We've actually lost a type parameter here,
isn't that interesting?

158
00:12:07.520 --> 00:12:14.300
And that's because when the return type is
analyzed, we don't know what T is, right?

159
00:12:14.300 --> 00:12:20.083
This is a list,
all we know is it's at least a HasId,

160
00:12:20.083 --> 00:12:25.604
but the build time analysis
can't figure out what

161
00:12:25.604 --> 00:12:31.797
the return type should be
until it's actually called.

162
00:12:31.797 --> 00:12:36.810
And that is a problem that is why we
have lost the T in the return type here.

163
00:12:36.810 --> 00:12:41.574
So you don't need to understand too
much about why this is bad, but

164
00:12:41.574 --> 00:12:47.444
the best practice is to sort of push your
type parameters down to the lowest level,

165
00:12:47.444 --> 00:12:50.876
the simplest way of
describing them as you can.

166
00:12:50.876 --> 00:12:52.584
And then in your argument list,

167
00:12:52.584 --> 00:12:56.265
of course, you don't have to just
take T straight up as an argument.

168
00:12:56.265 --> 00:13:01.470
You could take an array of Ts, a promise
that resolves to a T, whatever you like.

169
00:13:01.470 --> 00:13:05.216
And there you can see the type checking
will do its job more easily and

170
00:13:05.216 --> 00:13:06.410
more successfully.

171
00:13:07.520 --> 00:13:13.336
And then finally, the last thing I
want to leave you with is don't make

172
00:13:13.336 --> 00:13:20.456
things generic unless there's real value
in doing so premature abstraction is bad.

173
00:13:20.456 --> 00:13:23.985
It makes it hard for
you to understand your own code, and for

174
00:13:23.985 --> 00:13:26.350
others to understand your code.

175
00:13:26.350 --> 00:13:29.804
So just make sure that you
start out with simple things,

176
00:13:29.804 --> 00:13:34.655
and don't get into generic hell,
where everything has 15 type params, and

177
00:13:34.655 --> 00:13:38.134
just becomes hard to even
think about what's going on.

178
00:13:38.134 --> 00:13:43.720
These type parameters should have
a purpose, you should have a small

179
00:13:43.720 --> 00:13:49.510
number of them, and just don't let
the complexity get out of control.

