WEBVTT

1
00:00:00.080 --> 00:00:05.690
The next topic we're going to discuss is
nullish values and the three specific

2
00:00:05.690 --> 00:00:10.792
kinds of values that I'm talking
about are null, undefined and void.

3
00:00:10.792 --> 00:00:15.361
So we're gonna talk about each of those
three when I advise you use each of them.

4
00:00:15.361 --> 00:00:20.738
And then we're going to discuss
the non-null assertion operator where

5
00:00:20.738 --> 00:00:26.630
you cast away any possibility of
something being undefined or null.

6
00:00:26.630 --> 00:00:32.446
And then the definite assignment operator
which can be used in some interesting

7
00:00:32.446 --> 00:00:38.541
edge cases around class initialization,
or instance initialization, so null.

8
00:00:40.685 --> 00:00:46.458
Null indicates that there is a value for
something and that value is nothing.

9
00:00:48.475 --> 00:00:52.827
I wanna be clear that different people
have different opinions about this,

10
00:00:52.827 --> 00:00:55.208
when to use null, when to use undefined.

11
00:00:55.208 --> 00:00:59.464
But this has served me well,
so for example,

12
00:00:59.464 --> 00:01:06.744
if I receive a null return value from a
function or I find null on a class field,

13
00:01:06.744 --> 00:01:11.461
I take that to mean it's almost a 404,
right?

14
00:01:11.461 --> 00:01:14.695
Like a not found, nothing's there or
nothing's there yet,

15
00:01:14.695 --> 00:01:19.189
well really just nothing's there, like
something's arrived and that is nothing.

16
00:01:22.457 --> 00:01:27.489
Undefined, I take this to mean
that either we haven't gotten

17
00:01:27.489 --> 00:01:33.998
to providing something or we're not ever
going to provide you with something.

18
00:01:33.998 --> 00:01:36.094
So here's an example of a form,

19
00:01:36.094 --> 00:01:41.309
maybe we're like monitoring how long it
takes for a user to complete this form.

20
00:01:41.309 --> 00:01:46.221
And completedAt is
a property that is undefined

21
00:01:46.221 --> 00:01:50.529
because they haven't completed it yet.

22
00:01:50.529 --> 00:01:54.881
And when they complete it, we will get
a value so I prefer to use undefined for

23
00:01:54.881 --> 00:01:55.903
cases like this.

24
00:01:58.967 --> 00:02:05.008
Void as we said before, this should be
used explicitly for function returns and

25
00:02:05.008 --> 00:02:09.980
it means that the return value of
the function should be ignored.

26
00:02:11.545 --> 00:02:16.206
If you wanna learn or refresh
yourself more about how to use void,

27
00:02:16.206 --> 00:02:20.529
you can look at the functions
chapter where we show the impact

28
00:02:20.529 --> 00:02:25.525
of using void versus an undefined
return type on callback types.

29
00:02:25.525 --> 00:02:30.342
So that's null, undefined and void, so
now let's talk about these two operators.

30
00:02:30.342 --> 00:02:34.377
First, there's a non-null
assertion operator and

31
00:02:34.377 --> 00:02:39.040
you may think of this as kind
of similar to optional chaining,

32
00:02:39.040 --> 00:02:44.077
if you've ever used that,
this sort of dot, I think it's click.

33
00:02:46.455 --> 00:02:49.386
Yeah, it's like dot question mark,
something like that,

34
00:02:49.386 --> 00:02:51.344
I don't use it very much, to be honest.

35
00:02:51.344 --> 00:02:55.751
But that sort of allows you to
reach deeply into an object and

36
00:02:55.751 --> 00:03:00.600
if at any point in accessing a chain
of property something is found

37
00:03:00.600 --> 00:03:04.038
to be undefined,
it will sort of just give up,

38
00:03:04.038 --> 00:03:08.207
just evaluate out to undefined and
just sort of skip it.

39
00:03:08.207 --> 00:03:11.994
Non-null assertion operator
is sort of the last or

40
00:03:11.994 --> 00:03:15.650
the less forgiving variant of this.

41
00:03:15.650 --> 00:03:20.284
Here's an example, so let's say we have a
grocery cart which can contain fruits and

42
00:03:20.284 --> 00:03:21.440
vegetables.

43
00:03:21.440 --> 00:03:28.052
We initialize it without either and we try
to kind of reach into this and say like,

44
00:03:28.052 --> 00:03:33.787
okay, I hope fruits is there because
I want to treat it like an array and

45
00:03:33.787 --> 00:03:38.280
push stuff into it, but
this array might not be there.

46
00:03:38.280 --> 00:03:42.500
In fact, it's not there, because we
initialize this to an empty object.

47
00:03:43.500 --> 00:03:49.100
We're correctly being busted, on trying
to use something that might not be there.

48
00:03:49.100 --> 00:03:52.822
Well, if we use this
non-null assertion operator,

49
00:03:52.822 --> 00:03:58.292
this exclamation mark right here,
we're telling TypeScript to disregard.

50
00:03:59.997 --> 00:04:04.289
Got Glenn Marth,
I think I actually might have a typo,

51
00:04:04.289 --> 00:04:07.007
I do have a typo, this is the typo.

52
00:04:08.487 --> 00:04:12.270
That's a good catch, so it should not
be dot bang, it should be bang dot.

53
00:04:12.270 --> 00:04:17.205
[LAUGH] Yep, very good catch, thankfully,
my code example works because it's

54
00:04:17.205 --> 00:04:21.520
actually running TypeScript behind
the scenes and it compiled.

55
00:04:21.520 --> 00:04:27.080
So this is working in front of our eyes,
but I'll make that correction, thank you.

56
00:04:28.260 --> 00:04:32.366
So we can see that the possibility
of fruits being undefined has sort

57
00:04:32.366 --> 00:04:36.850
of been thrown out, we're just
saying please disregard TypeScript.

58
00:04:36.850 --> 00:04:41.701
I know what I'm doing,
I'm the software engineer here,

59
00:04:41.701 --> 00:04:44.086
just do what I tell you to do.

60
00:04:44.086 --> 00:04:48.458
And as a result,
we can kind of proceed through,

61
00:04:48.458 --> 00:04:52.948
I use this a lot, but
never in app or library code.

62
00:04:52.948 --> 00:04:58.951
I use it like crazy in test suites
because I prefer test frameworks and

63
00:04:58.951 --> 00:05:05.489
assertion libraries to be clear that
will regard a throw as a test failure.

64
00:05:05.489 --> 00:05:09.779
So if this is my test case,
where I have nothing,

65
00:05:09.779 --> 00:05:15.549
I don't have a fruits array in my
grocery cart, and this throws.

66
00:05:15.549 --> 00:05:19.461
That's a failed test and
that I'll treat it as a failed test,

67
00:05:19.461 --> 00:05:24.742
it's almost like a little mini assertion I
think this is beautiful in a test suite.

68
00:05:24.742 --> 00:05:29.448
I don't like it in app code because
it's a pretty hard failure to hit and

69
00:05:29.448 --> 00:05:35.130
I would much rather use a type guard and
set and check to see if this is undefined.

70
00:05:35.130 --> 00:05:37.113
And then let's reach into it,

71
00:05:37.113 --> 00:05:42.660
I think that is a more fault tolerant
way of handling this kind of situation.

72
00:05:42.660 --> 00:05:47.136
Because this in almost every
case like this is this

73
00:05:47.136 --> 00:05:51.731
could have a real possibility
of being undefined.

74
00:05:51.731 --> 00:05:54.075
I don't even like the idea.

75
00:05:54.075 --> 00:05:59.277
If we were to do this, I

76
00:05:59.277 --> 00:06:04.691
don't even think that this
is justified because you're

77
00:06:04.691 --> 00:06:10.329
like I slightly inattentive
refactor away from moving this

78
00:06:10.329 --> 00:06:15.756
somewhere else where you might
not have that guarantee.

79
00:06:15.756 --> 00:06:19.987
I prefer to have my guarantees by way
of type cards that will actually do

80
00:06:19.987 --> 00:06:24.452
some runtime thing to evaluate whether
something's there or not there.

81
00:06:24.452 --> 00:06:28.765
Compared to this, which is just saying
force the type system to forget

82
00:06:28.765 --> 00:06:31.117
about the possibility of undefined.

83
00:06:31.117 --> 00:06:37.042
That's a dangerous copy paste away
from creating problems for you.

84
00:06:38.609 --> 00:06:44.329
But great in test suites because
throwing errors in test suites,

85
00:06:44.329 --> 00:06:48.820
when things turn out in an unexpected way.

86
00:06:48.820 --> 00:06:52.356
That's a test failure, that's great,
that will tell you something's wrong,

87
00:06:52.356 --> 00:06:54.100
you can go and fix it.

88
00:06:54.100 --> 00:06:57.977
All right, definite assignment operator,

89
00:06:57.977 --> 00:07:03.793
it's the same exclamation mark
syntax used in a different place and

90
00:07:03.793 --> 00:07:06.456
that place is on class fields.

91
00:07:06.456 --> 00:07:11.796
So here's an example of something,
essentially a slightly

92
00:07:11.796 --> 00:07:17.150
relabeled piece of code that I
have in production right now.

93
00:07:17.150 --> 00:07:21.911
And it's a class that has to do
something asynchronous as part of

94
00:07:21.911 --> 00:07:23.594
its setup procedure.

95
00:07:23.594 --> 00:07:26.868
So constructors can't be async but

96
00:07:26.868 --> 00:07:31.350
they can kick off an async
method as they finish.

97
00:07:31.350 --> 00:07:35.037
And so what I do here is when
the constructor is invoked,

98
00:07:35.037 --> 00:07:38.573
I say I've got this setup promise and
I kick that off.

99
00:07:38.573 --> 00:07:45.023
And I say,
we begin in a non setup state and

100
00:07:45.023 --> 00:07:50.033
I'm going to, Chain in

101
00:07:50.033 --> 00:07:55.330
the promise returned by this method here,
right?

102
00:07:55.330 --> 00:08:00.503
So that means that this setup promise will
only resolve once this thing is done.

103
00:08:00.503 --> 00:08:04.763
And then when everything's done,
I'll flip that, his set up flag and

104
00:08:04.763 --> 00:08:07.620
say, okay, we're now ready to go.

105
00:08:07.620 --> 00:08:10.311
So I'm getting an error here and

106
00:08:10.311 --> 00:08:16.370
I'm seeing that this property has
no initializer which is true.

107
00:08:16.370 --> 00:08:19.715
And it is not definitely
assigned in the constructor,

108
00:08:19.715 --> 00:08:22.560
what does definitely assigned mean?

109
00:08:22.560 --> 00:08:25.710
It means that TypeScript wanted to see,

110
00:08:25.710 --> 00:08:31.186
it wanted to see something like this,
which I guess I could have done.

111
00:08:31.186 --> 00:08:35.420
It has no idea if or
when this is going to be invoked.

112
00:08:36.900 --> 00:08:42.315
And so it's not willing to,
doesn't wanna give me a guarantee

113
00:08:42.315 --> 00:08:47.335
that this property,
this class field will get its value.

114
00:08:47.335 --> 00:08:49.554
Now if something's
directly in a constructor,

115
00:08:49.554 --> 00:08:51.132
TypeScript can understand that.

116
00:08:51.132 --> 00:08:55.747
It can analyze it and it can say, if we
instantiate this thing and then we say,

117
00:08:55.747 --> 00:08:58.580
here's a thing with async setup.

118
00:08:58.580 --> 00:09:02.980
Well, by the time I give it to you, it
will have a Boolean value there because I

119
00:09:02.980 --> 00:09:06.870
saw you set one on the constructor but
down here, it's not so sure.

120
00:09:07.870 --> 00:09:13.453
Now, in this situation, I know
something that TypeScript doesn't and

121
00:09:13.453 --> 00:09:18.304
that is that the callback you
pass into a promise constructor,

122
00:09:18.304 --> 00:09:21.690
it is invoked synchronously.

123
00:09:21.690 --> 00:09:25.304
Which means that by the time we
actually get that new promise,

124
00:09:25.304 --> 00:09:28.641
this thing that I've selected,
that little callback,

125
00:09:28.641 --> 00:09:31.991
it's already been invoked and
it's already finished.

126
00:09:31.991 --> 00:09:36.337
And I will definitely have my
Boolean value there but TypeScript,

127
00:09:38.033 --> 00:09:41.618
It doesn't have a way of saying,
well, this is a synchronous callback.

128
00:09:41.618 --> 00:09:46.356
And this is an async callback and
I know about the runtime behavior here.

129
00:09:46.356 --> 00:09:49.528
It just has no way of describing that but
in this case, this code,

130
00:09:49.528 --> 00:09:50.830
it's actually okay.

131
00:09:50.830 --> 00:09:56.664
So, We could add something here,

132
00:09:56.664 --> 00:09:59.452
I'll just have to show you in the example.

133
00:09:59.452 --> 00:10:04.082
All we'd have to do is
add the exclamation mark.

134
00:10:04.082 --> 00:10:10.093
This right here, the definite
assignment operator, it's saying, look,

135
00:10:10.093 --> 00:10:15.740
I will assume responsibility for
making sure this thing gets its value.

136
00:10:18.038 --> 00:10:22.129
A great place to use this is
component lifecycle hooks.

137
00:10:22.129 --> 00:10:26.128
So no matter what component library or
framework you use,

138
00:10:26.128 --> 00:10:29.938
there's often like there's
the constructor logic.

139
00:10:29.938 --> 00:10:34.736
And then there's some initialization
process that happens later,

140
00:10:34.736 --> 00:10:38.706
maybe it's when the component's
initially rendered or

141
00:10:38.706 --> 00:10:44.345
when it's about to render and maybe you
take care of setting some stuff up there.

142
00:10:44.345 --> 00:10:50.219
So realistically, you're not doing much
with this thing, Until it's set up,

143
00:10:50.219 --> 00:10:52.910
and maybe it's rendered.

144
00:10:52.910 --> 00:10:56.953
So you might say, I know yes,
after your constructor runs,

145
00:10:56.953 --> 00:10:59.186
this thing is not gonna be there.

146
00:10:59.186 --> 00:11:03.498
But realistically, for all things I care
about, we can act as if it'll be there,

147
00:11:03.498 --> 00:11:06.577
so that's the kind of time
where you might wanna use this.

