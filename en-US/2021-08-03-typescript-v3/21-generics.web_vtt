WEBVTT

1
00:00:00.180 --> 00:00:06.155
We have now reached the culmination
of TypeScript fundamentals v3,

2
00:00:06.155 --> 00:00:08.086
and that is generics.

3
00:00:08.086 --> 00:00:12.871
So generics are a way of creating
types that are expressed in

4
00:00:12.871 --> 00:00:14.700
terms of other types.

5
00:00:14.700 --> 00:00:18.608
And the benefit of doing
this is it allows for

6
00:00:18.608 --> 00:00:23.369
a greater opportunity to
reuse code across your app.

7
00:00:23.369 --> 00:00:27.155
And that'll become clear as we
get deeper into this topic.

8
00:00:27.155 --> 00:00:30.379
Because this is an abstract concept,

9
00:00:30.379 --> 00:00:35.729
I want to begin by leading us up
to why we should care about this?

10
00:00:35.729 --> 00:00:41.770
What's the scenario we can see where
we're missing something from TypeScript?

11
00:00:41.770 --> 00:00:46.720
And that will help us understand why
should we even care about this thing?

12
00:00:46.720 --> 00:00:51.138
So let's go back to an example that
we've used before in this course, and

13
00:00:51.138 --> 00:00:53.011
that is a dictionary, right?

14
00:00:53.011 --> 00:00:56.196
We have this dictionary called phones and

15
00:00:56.196 --> 00:01:01.810
under an arbitrary key,
we can store a three part phone number.

16
00:01:01.810 --> 00:01:06.080
And we can see that all of these
properties look very, very similar.

17
00:01:06.080 --> 00:01:10.192
So sometimes it's convenient to
organize our data in dictionaries and

18
00:01:10.192 --> 00:01:14.020
sometimes it's convenient
to organize data in arrays.

19
00:01:14.020 --> 00:01:18.652
So it would be nice if we had
some sort of utility that let us

20
00:01:18.652 --> 00:01:23.975
transform data that was in one
type of collection into the other.

21
00:01:23.975 --> 00:01:29.936
So let's deal with this as our
starting point for our data.

22
00:01:29.936 --> 00:01:34.856
It's a object that has three parts for
a phone number.

23
00:01:34.856 --> 00:01:39.011
It's kind of customerId now, so
it's just a ten digit phone number.

24
00:01:39.011 --> 00:01:44.586
But we've got a customerId, areaCode,
phone number, and we have a list of them.

25
00:01:44.586 --> 00:01:48.774
What we want in the end is
something that looks like this,

26
00:01:48.774 --> 00:01:54.187
where effectively we have this key
value data structure, a dictionary,

27
00:01:54.187 --> 00:02:00.148
where each member of what was in the
array, it's stored under a particular key.

28
00:02:00.148 --> 00:02:02.532
In this case, it's the customerId.

29
00:02:02.532 --> 00:02:07.650
Now we're gonna start by implementing
a very specific solution that works for

30
00:02:07.650 --> 00:02:09.209
exactly this use case.

31
00:02:09.209 --> 00:02:14.474
And then as a second step, we're gonna see
if we can make it more generalized and

32
00:02:14.474 --> 00:02:17.788
kinda get a feel for
where we're at at that point.

33
00:02:19.745 --> 00:02:23.604
So we wanna go from this to this.

34
00:02:23.604 --> 00:02:28.580
So we will need one thing along the way
and that's the the mechanism for

35
00:02:28.580 --> 00:02:33.738
producing a key that we use for
storage of each object on the dictionary.

36
00:02:33.738 --> 00:02:38.884
And in order to make sure that we're
on our way to a generalized solution,

37
00:02:38.884 --> 00:02:43.366
we're going to want the color of
this function to provide us with

38
00:02:43.366 --> 00:02:46.025
the mechanism of obtaining that key.

39
00:02:46.025 --> 00:02:51.393
So part of what we're gonna ask for
here is a little callback function,

40
00:02:51.393 --> 00:02:56.415
sort of a higher order function
approach to solving this problem.

41
00:02:56.415 --> 00:03:01.264
So our function signature
could look like this,

42
00:03:01.264 --> 00:03:06.233
we've got this PhoneInfo type and
then a function

43
00:03:06.233 --> 00:03:11.436
that we can use to transform
a list of these PhoneInfo

44
00:03:11.436 --> 00:03:16.305
things to a dictionary
of the PhoneInfo things.

45
00:03:16.305 --> 00:03:21.236
Here's that little id callback
that I mentioned earlier,

46
00:03:21.236 --> 00:03:26.856
where in addition to being provided
the list, we're also provided

47
00:03:26.856 --> 00:03:32.891
with this function that can be used
given a PhoneInfo, obtain a string.

48
00:03:32.891 --> 00:03:36.348
And we will use that string as our key.

49
00:03:36.348 --> 00:03:37.852
This is throwing an error right now for

50
00:03:37.852 --> 00:03:40.023
obvious reasons like we're
not returning anything.

51
00:03:40.023 --> 00:03:41.973
We said we'd return a dictionary,

52
00:03:41.973 --> 00:03:46.068
currently we're not returning anything
at all, quite understandable.

53
00:03:46.068 --> 00:03:49.734
So implementing the function
itself is not really the point of

54
00:03:49.734 --> 00:03:52.988
what we're talking about here,
it is pretty simple.

55
00:03:52.988 --> 00:03:58.301
We can start by defining the dictionary
and we'll start with it empty.

56
00:03:58.301 --> 00:04:02.664
We'll iterate through each
member of the list will

57
00:04:02.664 --> 00:04:07.337
generate a key using
the function that were provided.

58
00:04:07.337 --> 00:04:13.975
And then we'll use that key to store that
member of the array in the dictionary and

59
00:04:13.975 --> 00:04:18.577
then ultimately at the end,
we return the dictionary.

60
00:04:18.577 --> 00:04:24.423
So that's the whole algorithm, loop,
find the key, shove it on the dictionary,

61
00:04:24.423 --> 00:04:28.359
and then return the dictionary at the end,
not too bad.

62
00:04:28.359 --> 00:04:32.893
So we can actually run this in
the TypeScript playground and

63
00:04:32.893 --> 00:04:35.804
convince ourselves that this works.

64
00:04:35.804 --> 00:04:39.606
So the way you do that
is you go click on Logs.

65
00:04:39.606 --> 00:04:44.818
As in Console Logs, that's where
this will show up, and then hit Run.

66
00:04:44.818 --> 00:04:48.116
So here we go, this is our input.

67
00:04:48.116 --> 00:04:51.969
And then down here is where
we're doing the log and

68
00:04:51.969 --> 00:04:57.675
we're seeing each of these objects
stored in the dictionary under a key.

69
00:04:57.675 --> 00:05:03.058
So we can see that it appears to work,
great.

70
00:05:03.058 --> 00:05:06.424
So let's attempt to make this
a little bit more general.

71
00:05:06.424 --> 00:05:12.444
And the approach we're gonna take is find
every reference to this PhoneInfo type and

72
00:05:12.444 --> 00:05:17.217
let's replace it with the most
general type that we have, an any.

73
00:05:17.217 --> 00:05:22.196
So we used to have an array of PhoneInfos
here, so it's an array of any.

74
00:05:22.196 --> 00:05:27.611
Our idGen callback used to take
a PhoneInfo as an argument,

75
00:05:27.611 --> 00:05:29.462
now it takes in any.

76
00:05:29.462 --> 00:05:33.797
And then we used to return
a dictionary of PhoneInfos, but

77
00:05:33.797 --> 00:05:36.631
we return a dictionary of any's now.

78
00:05:36.631 --> 00:05:40.006
Nothing else in this function has changed,
none of this has changed,

79
00:05:40.006 --> 00:05:40.985
it's all the same.

80
00:05:40.985 --> 00:05:46.969
So really it's just about the any's
that appeared in the function signature.

81
00:05:46.969 --> 00:05:52.233
Now if we wanna try this out, we can,
now I'm going to comment this

82
00:05:52.233 --> 00:05:57.216
last line out because it's really
just to illustrate a point.

83
00:05:57.216 --> 00:06:02.406
But if we run this, go to Logs and
Run, we can see that now

84
00:06:02.406 --> 00:06:08.053
we're able to use this on
a different type of array, right?

85
00:06:08.053 --> 00:06:13.204
These are not PhoneInfo objects, these are
just objects that have a name property.

86
00:06:13.204 --> 00:06:18.344
And I have my little callback that
describes what am I using as my key?

87
00:06:18.344 --> 00:06:20.480
How am I storing these on the dictionary?

88
00:06:21.670 --> 00:06:25.792
So we obviously get the correct
result at runtime, but

89
00:06:25.792 --> 00:06:30.990
the problem is we've lost all
of our useful type information.

90
00:06:30.990 --> 00:06:34.555
Everything that comes out is in any, so

91
00:06:34.555 --> 00:06:40.171
in making this more flexible,
we've had to relax our types,

92
00:06:40.171 --> 00:06:44.937
so much,
that we don't get any of that validation.

93
00:06:44.937 --> 00:06:48.719
That is basically the point of TypeScript,
right?

94
00:06:48.719 --> 00:06:52.122
In relaxing this so
that it can handle anything,

95
00:06:52.122 --> 00:06:56.698
we're back to JavaScript level
type safety, which is not much.

96
00:07:00.235 --> 00:07:05.374
That's the problem,
we need a mechanism of allowing

97
00:07:05.374 --> 00:07:11.312
flexibility without giving up
all of our type information and

98
00:07:11.312 --> 00:07:15.322
generics provide the ability to do that.

99
00:07:19.086 --> 00:07:22.558
So the first thing we'll need to
do is define a type parameter.

100
00:07:22.558 --> 00:07:28.064
You can think of type parameters
as arguments for types.

101
00:07:28.064 --> 00:07:32.170
They're kind of function arguments,
but there are four types.

102
00:07:32.170 --> 00:07:36.931
Just like functions can
return different values given

103
00:07:36.931 --> 00:07:40.244
different arguments passed to them,

104
00:07:40.244 --> 00:07:45.841
type parameters can influence
what generic types end up being.

105
00:07:45.841 --> 00:07:50.724
So we're gonna go ahead and
do a couple things here.

106
00:07:53.869 --> 00:07:56.111
This is gonna be our new
function signature, so

107
00:07:56.111 --> 00:07:58.418
there are some things that
have been added here.

108
00:07:58.418 --> 00:08:03.293
And we're gonna talk about exactly what
each of those pieces of syntax mean,

109
00:08:03.293 --> 00:08:07.050
just so we slow way down and
we understand what's going on.

110
00:08:07.050 --> 00:08:11.712
So first,
we have this angle bracket t thing to

111
00:08:11.712 --> 00:08:16.382
the right of the name of the function,
right?

112
00:08:16.382 --> 00:08:20.321
It's this thing right here,
so what is this,

113
00:08:20.321 --> 00:08:25.376
it is the type parameter list
with one type parameter in it.

114
00:08:25.376 --> 00:08:30.394
You can think of it like the equivalent
to the round parentheses for

115
00:08:30.394 --> 00:08:32.462
a function argument list.

116
00:08:32.462 --> 00:08:40.084
So if we had many type parameters here,
it might be t,x,y, something like that.

117
00:08:40.084 --> 00:08:43.536
The convention is like a common
convention you will see but

118
00:08:43.536 --> 00:08:45.730
it's not a limitation by any means.

119
00:08:45.730 --> 00:08:51.474
It's to use capital letters,
often the letter T is used.

120
00:08:51.474 --> 00:08:58.975
And this you can trace that back to
the use of a similar feature set in C++,

121
00:08:58.975 --> 00:09:03.756
where they would call
these template classes.

122
00:09:03.756 --> 00:09:08.680
It's the same thing, you could remember
T for type or T for template, so

123
00:09:08.680 --> 00:09:13.710
that's what this is, it basically
says there exists a type parameter t.

124
00:09:16.085 --> 00:09:22.356
The second thing, right instead of
receiving a list of PhoneInfos or

125
00:09:22.356 --> 00:09:27.663
an array of PhoneInfos,
we're receiving a list of T's.

126
00:09:27.663 --> 00:09:30.746
So what's that all about?

127
00:09:30.746 --> 00:09:36.838
Well, what's going to happen
is on a per invocation basis,

128
00:09:36.838 --> 00:09:40.908
you might end up with a different type T.

129
00:09:40.908 --> 00:09:47.945
So if we were passing this, a list
of PhoneInfos, T would be PhoneInfo.

130
00:09:47.945 --> 00:09:51.537
If we were to pass it a list of strings,
T would be string.

131
00:09:51.537 --> 00:09:56.829
So what we're gonna see is that
every time we use this function,

132
00:09:56.829 --> 00:10:00.954
TypeScript's going to use
the type of the array.

133
00:10:00.954 --> 00:10:05.028
This first thing that
the function receives,

134
00:10:05.028 --> 00:10:09.109
it'll use that to figure
out what T should be.

135
00:10:09.109 --> 00:10:14.645
So it's gonna infer what
T is on a per usage

136
00:10:14.645 --> 00:10:20.038
basis depending on the array we pass in.

137
00:10:20.038 --> 00:10:24.922
This is a much simpler example that kind

138
00:10:24.922 --> 00:10:29.806
of boil things down to the absolute most

139
00:10:29.806 --> 00:10:34.692
small atom that we can talk about here.

140
00:10:34.692 --> 00:10:39.488
We could define a function here that takes
an argument and just wraps it in an array,

141
00:10:39.488 --> 00:10:41.415
like it's a tupple of length 1.

142
00:10:41.415 --> 00:10:46.723
And whatever we give it,
it's gonna return a Tupple

143
00:10:46.723 --> 00:10:52.164
of 1 with that thing in it,
that's all it's doing.

144
00:10:52.164 --> 00:10:56.447
So let's look at the return
types of this function.

145
00:10:56.447 --> 00:11:01.034
Up here you can see it's
like wrapInArray&lt;T&gt;, right,

146
00:11:01.034 --> 00:11:03.475
arg is T, and it returns this.

147
00:11:03.475 --> 00:11:07.995
While we pass it a number,
look, the T turned to a number.

148
00:11:07.995 --> 00:11:13.175
We received an argument of type number,
we return a tupple with a number in it.

149
00:11:13.175 --> 00:11:16.319
Here's the date, here's the date,
and here's the date.

150
00:11:16.319 --> 00:11:18.920
I could do a RegExp,
we could do whatever we want.

151
00:11:18.920 --> 00:11:24.241
This type, it's almost like
it's morphing to accommodate

152
00:11:24.241 --> 00:11:28.635
our needs depending on
the argument we pass to it.

153
00:11:28.635 --> 00:11:33.481
So it's like auto
detecting what T should be,

154
00:11:33.481 --> 00:11:38.466
and returning the right
thing to us as a result.

155
00:11:38.466 --> 00:11:42.241
So let's go back to our example again,
our listToDict example.

156
00:11:42.241 --> 00:11:45.587
So we talked about this
type parameter list, right?

157
00:11:45.587 --> 00:11:46.540
Just saying T exists,

158
00:11:46.540 --> 00:11:49.859
we talked about how we're saying,
I'm going to receive a list of arguments.

159
00:11:49.859 --> 00:11:55.594
I'm gonna receive an argument and
it's defined in terms of T,

160
00:11:55.594 --> 00:12:01.237
that's gonna help TypeScript
infer what we should get for T.

161
00:12:01.237 --> 00:12:05.772
So now we have this line here,
that's our id

162
00:12:05.772 --> 00:12:11.302
generating callback and
we're using T here as well.

163
00:12:11.302 --> 00:12:13.145
So this means a couple of things.

164
00:12:13.145 --> 00:12:19.426
First, that we're going to get the use
of type checking within this callback.

165
00:12:19.426 --> 00:12:23.778
And the second is we're going
to effectively ensure that

166
00:12:23.778 --> 00:12:25.228
the type of thing or

167
00:12:25.228 --> 00:12:31.315
callback is designed to work with is the
same thing that the array has within it.

168
00:12:31.315 --> 00:12:37.223
So if we had something like this,
here's our array,

169
00:12:37.223 --> 00:12:42.079
it's an array of dates,
this arg is a date,

170
00:12:42.079 --> 00:12:46.304
we'd better be treating it as a date.

171
00:12:46.304 --> 00:12:50.458
We can't give it a function that's
designed to generate ideas for

172
00:12:50.458 --> 00:12:54.101
anything else,
its gotta be happy with working on dates.

173
00:12:59.677 --> 00:13:03.436
The last thing to look
at is the return type.

174
00:13:03.436 --> 00:13:08.504
So we can see that here,
it's just a dictionary of T's.

175
00:13:11.235 --> 00:13:14.823
And similar to how in our tiny,
tiny example, right,

176
00:13:14.823 --> 00:13:17.642
we had a return type
that looked like this.

177
00:13:17.642 --> 00:13:22.621
And we can see that the type of what comes
out of the function changes depending on

178
00:13:22.621 --> 00:13:23.673
what we pass in.

179
00:13:23.673 --> 00:13:29.438
Similarly down here, we're gonna get
a different kind of dictionary out.

180
00:13:29.438 --> 00:13:35.586
So let's put all of this together and
take a look at our original example.

181
00:13:35.586 --> 00:13:39.761
So all we've done is we've
brought the algorithm back in,

182
00:13:39.761 --> 00:13:43.279
it's a very simple little
looping process here.

183
00:13:43.279 --> 00:13:47.783
And let's look at our tool tips
as we attempt to use this.

184
00:13:47.783 --> 00:13:51.004
So here we're getting a dictionary out and

185
00:13:51.004 --> 00:13:55.039
we're passing in just
objects with a name property.

186
00:13:55.039 --> 00:13:59.449
And look at the dictionary we get out,
it's got an index signature, where

187
00:13:59.449 --> 00:14:04.075
each value that's found in the dictionary,
it's just an object with a name.

188
00:14:07.350 --> 00:14:12.581
Let's look at a different example,
here's our phoneList,

189
00:14:12.581 --> 00:14:16.914
right, a array of customer ids and
phone numbers.

190
00:14:16.914 --> 00:14:21.425
Well, you can see that the type
has sort of adapted here.

191
00:14:21.425 --> 00:14:25.008
It's inferred what T should be, and

192
00:14:25.008 --> 00:14:29.873
it's gonna return the right
kind of dictionary.

193
00:14:29.873 --> 00:14:34.894
So now, unlike our example where we
used any, and where we lost all type

194
00:14:34.894 --> 00:14:40.168
information as we pass through this
function, we tried to make it flexible

195
00:14:40.168 --> 00:14:45.129
enough that it would work for
any list to dictionary transformation.

196
00:14:45.129 --> 00:14:47.200
Unlike the any based approach,

197
00:14:47.200 --> 00:14:51.045
we're actually maintaining
all of our type information.

198
00:14:51.045 --> 00:14:53.057
It kind of passes straight through.

199
00:14:53.057 --> 00:14:56.940
So we can run this in
the TypeScript playground and

200
00:14:56.940 --> 00:15:00.185
we can convince ourselves that it works.

201
00:15:00.185 --> 00:15:05.390
So up here, this is our first dictionary,

202
00:15:05.390 --> 00:15:08.570
that is this right here and

203
00:15:08.570 --> 00:15:14.224
then down here this is
our second dictionary.

204
00:15:14.224 --> 00:15:18.754
What we're doing here, I'm just gonna
look back at the function signature here.

205
00:15:18.754 --> 00:15:24.838
What we're doing here is we're
saying on a per invocation basis,

206
00:15:24.838 --> 00:15:30.162
we will figure out what T is and
for that invocation T serves

207
00:15:30.162 --> 00:15:34.965
as a way of defining
a relationship between things.

208
00:15:34.965 --> 00:15:42.378
Meaning, the dictionary I will give you
is related to the list you gave me.

209
00:15:42.378 --> 00:15:46.133
The callback you'd better give me must

210
00:15:46.133 --> 00:15:51.040
be related in terms of type
to what's in your list.

211
00:15:51.040 --> 00:15:56.677
It serves as sort of a linkage
between all of these things and

212
00:15:56.677 --> 00:16:03.445
it allows us to remain flexible without
basically widening our type and

213
00:16:03.445 --> 00:16:09.444
making it so general, so
nonspecific that we lose our safety.

