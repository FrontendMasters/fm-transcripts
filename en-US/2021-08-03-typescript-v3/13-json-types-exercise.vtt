WEBVTT

1
00:00:00.450 --> 00:00:04.820
So we're going to begin
a collaborative exercise.

2
00:00:04.820 --> 00:00:09.058
And what I would like
to see us do here is,

3
00:00:09.058 --> 00:00:12.926
write some types using interfaces or

4
00:00:12.926 --> 00:00:18.056
type aliases, and
then what makes sense to you.

5
00:00:18.056 --> 00:00:24.490
But we want these types to
describe any valid JSON value.

6
00:00:24.490 --> 00:00:30.684
And I have for your convenience brought
a portion of the JSON specification, and

7
00:00:30.684 --> 00:00:36.830
so we wanna make types that describe
what we're seeing on the screen here.

8
00:00:36.830 --> 00:00:41.385
So a value can be an object,
an array, a number,

9
00:00:41.385 --> 00:00:44.510
a string, false, true or null.

10
00:00:44.510 --> 00:00:48.392
So you can I mean, I've taken these words
right out of the spec document, but

11
00:00:48.392 --> 00:00:51.440
we can take false and
true that's Boolean, right?

12
00:00:51.440 --> 00:00:55.574
So it's numbers, strings,
Booleans, No, and then arrays and

13
00:00:55.574 --> 00:01:00.161
objects that include those things,
but we couldn't have a function for

14
00:01:00.161 --> 00:01:03.040
example, functions don't belong in JSON.

15
00:01:04.420 --> 00:01:05.440
Make sense to everybody.

16
00:01:05.440 --> 00:01:08.570
If you've worked with JSON before,
I'm almost certain.

17
00:01:08.570 --> 00:01:11.416
So, this is your starting point code, and

18
00:01:11.416 --> 00:01:16.081
what you have here are some positive
test cases, all these should pass

19
00:01:16.081 --> 00:01:21.350
the TypeScript should be happy with
these and then negative test cases.

20
00:01:21.350 --> 00:01:23.099
So these should fail and

21
00:01:23.099 --> 00:01:29.270
the errors you're seeing here are because
they're not currently failing.

22
00:01:29.270 --> 00:01:34.404
This Ts expect error this special comment,
this tells the compiler

23
00:01:34.404 --> 00:01:39.010
that it should yell at us,
if it doesn't find an error here.

24
00:01:40.480 --> 00:01:44.496
So the fact that they're not failing,
because right now we're saying,

25
00:01:44.496 --> 00:01:47.040
look these things are anything right?

26
00:01:47.040 --> 00:01:50.147
So it's happy with a function
when it shouldn't be,

27
00:01:50.147 --> 00:01:53.360
that's why we call these
negative test cases.

28
00:01:53.360 --> 00:01:57.884
We got to suppress the errors
we're seeing here by making it so

29
00:01:57.884 --> 00:02:00.146
that this does not type check.

30
00:02:01.684 --> 00:02:06.348
So how are you going to
attempt this exercise, and

31
00:02:06.348 --> 00:02:10.576
we can work on it as a class together for
sure.

32
00:02:10.576 --> 00:02:15.252
But I'd like you to have a local
copy of this and play with it so

33
00:02:15.252 --> 00:02:20.150
that you can sort of poke around and
help us get to an answer.

34
00:02:20.150 --> 00:02:22.227
Just hit this try button and

35
00:02:22.227 --> 00:02:27.381
we can see the same errors right
here in the TypeScript Playground.

36
00:02:29.183 --> 00:02:33.693
So, basically, your job Is to make it so

37
00:02:33.693 --> 00:02:42.050
that these three types become
the right thing that describes JSON.

38
00:02:42.050 --> 00:02:46.345
So here's how I want you to think about
this, and I'll go one step further and

39
00:02:46.345 --> 00:02:50.460
I'll say it's important for
this task that we're looking at right now.

40
00:02:51.460 --> 00:02:56.985
So, the way TypeScript parses this file,

41
00:02:56.985 --> 00:03:02.969
it's a Java's functions, it'll go down and

42
00:03:02.969 --> 00:03:09.120
it'll say, JSON object noted for that.

43
00:03:09.120 --> 00:03:11.427
Let's keep scanning down and
let's keep looking.

44
00:03:11.427 --> 00:03:14.100
Look, there's a JSON array,
there's a type like that.

45
00:03:14.100 --> 00:03:17.349
All right, well, I know where to go
if I need to know about that, and

46
00:03:17.349 --> 00:03:19.401
it keeps going down and
keeps going down and

47
00:03:19.401 --> 00:03:22.950
it sort of finds the fact
that all these things exist.

48
00:03:22.950 --> 00:03:24.094
And then later on,

49
00:03:24.094 --> 00:03:28.670
it goes back and it starts looking at
the right hand side of the equals.

50
00:03:28.670 --> 00:03:34.062
So as a result, there's no, it's almost
like there's a hoisting effect here

51
00:03:34.062 --> 00:03:39.539
in that as long as you're on the right
hand side of the assignment operator here.

52
00:03:39.539 --> 00:03:43.593
You have access to any type
alias that exists in scope, and

53
00:03:43.593 --> 00:03:47.500
that by the way is also how
the recursion works, right?

54
00:03:47.500 --> 00:03:52.031
A lot of implementations of
Recursive structures like these,

55
00:03:52.031 --> 00:03:56.476
they have to do with sort of
scanning through and separating,

56
00:03:56.476 --> 00:04:01.020
declaring that something exists
from how it's implemented.

57
00:04:01.020 --> 00:04:06.299
That's a common way to address circular
referencing cuz the core problem there is,

58
00:04:06.299 --> 00:04:11.053
well, how can we know what it is when
it's referring to things that haven't

59
00:04:11.053 --> 00:04:12.266
been defined yet.

60
00:04:12.266 --> 00:04:14.915
But if you do it in two pieces,
so, you're good to go.

61
00:04:18.526 --> 00:04:21.750
Okay, let's get started here.

62
00:04:21.750 --> 00:04:26.020
So, I really like failure
driven development.

63
00:04:26.020 --> 00:04:29.500
I like to have a bunch of errors and
I can sort of SWAT at them and

64
00:04:29.500 --> 00:04:31.424
make them go away piece by piece.

65
00:04:31.424 --> 00:04:36.114
And right now, we're in this situation
where we're just like way, way,

66
00:04:36.114 --> 00:04:37.680
way too flexible.

67
00:04:37.680 --> 00:04:42.594
We're letting anything pass through,
that's why our positive test cases are all

68
00:04:42.594 --> 00:04:47.438
passing and our negative test cases are
largely failing with the exception of this

69
00:04:47.438 --> 00:04:49.980
big int thing, which apparently is fine.

70
00:04:51.940 --> 00:04:57.759
Apparently that it's already failing,

71
00:04:57.759 --> 00:05:01.259
interesting, so cool.

72
00:05:01.259 --> 00:05:06.472
Let's just tighten things up a little
bit more and let's start from

73
00:05:06.472 --> 00:05:11.960
sort of the narrowest, the most
specific constrained side of things,

74
00:05:11.960 --> 00:05:16.760
and then add things until we
get all of our cases passing.

75
00:05:16.760 --> 00:05:20.936
So for now,
I'm gonna define a new type here.

76
00:05:23.994 --> 00:05:27.940
We'll call it a primitive, and
let's just say for now it's a string.

77
00:05:28.980 --> 00:05:35.830
So JSON values, they can be strings,

78
00:05:35.830 --> 00:05:43.340
they can be numbers, or Boleans, or No.

79
00:05:43.340 --> 00:05:48.395
So here we're making good use
of our union type operator,

80
00:05:48.395 --> 00:05:54.080
string or a number or Boolean or
No, those are valid JSON values.

81
00:05:54.080 --> 00:05:58.898
And down here we can see our negative test

82
00:05:58.898 --> 00:06:04.003
cases about they are happy because without

83
00:06:04.003 --> 00:06:09.260
this comment, this is failing type check.

84
00:06:09.260 --> 00:06:12.549
So with the comment it's now happy, but

85
00:06:12.549 --> 00:06:16.720
we're missing our array case and
our object case.

86
00:06:16.720 --> 00:06:21.634
And certainly the nesting aspect we won't
even know until we address these two,

87
00:06:21.634 --> 00:06:25.318
I don't think we have much hope
of addressing nested raise,

88
00:06:25.318 --> 00:06:27.430
object, strings, and numbers.

89
00:06:27.430 --> 00:06:31.110
That's sort of the most
mixed of our cases.

90
00:06:31.110 --> 00:06:36.031
And I'm just gonna say so
we have an object and an array,

91
00:06:36.031 --> 00:06:40.874
I'm gonna say that primitive or
an object or an array.

92
00:06:43.469 --> 00:06:47.860
Cool, now we're back to failing,
why are we back to failing?

93
00:06:47.860 --> 00:06:51.573
Can someone guess,
when we have this code here,

94
00:06:51.573 --> 00:06:55.210
why did all of our negative
test cases light up?

95
00:06:56.350 --> 00:07:01.072
So function, somehow functions happy now,

96
00:07:01.072 --> 00:07:07.297
anyone have a guess, in chat or
on Zoom, what if I did this?

97
00:07:10.237 --> 00:07:13.888
Like we're back to Eddie,
somehow we're back to Eddie.

98
00:07:16.868 --> 00:07:19.004
Yes, Joshua.

99
00:07:19.004 --> 00:07:21.590
And Teresa, very good, both of you.

100
00:07:21.590 --> 00:07:25.239
So what we've done is we've performed,

101
00:07:25.239 --> 00:07:29.629
we've used this union type
operator with an any.

102
00:07:29.629 --> 00:07:35.149
And I want you to think about it kind
of like multiplying by zero in that,

103
00:07:35.149 --> 00:07:41.310
we were fine here when we just had it as
a string or a number or a Boolean or no.

104
00:07:41.310 --> 00:07:43.255
But as soon as we do this,

105
00:07:43.255 --> 00:07:49.330
it becomes an any because it's almost
like zero times anything is zero.

106
00:07:49.330 --> 00:07:53.683
Well, whatever type you like, or any,

107
00:07:53.683 --> 00:07:58.292
is any sort of just
eclipses all of the other

108
00:07:58.292 --> 00:08:02.530
type information that you have there.

109
00:08:04.140 --> 00:08:07.605
Very good Joshua and Teresa, so okay,

110
00:08:07.605 --> 00:08:13.720
well we'll have to solve that,
how would I type this JSON array?

111
00:08:13.720 --> 00:08:15.370
Like anyone have any ideas?

112
00:08:17.230 --> 00:08:21.025
No peeking at the answer, I know it's
on the website but don't ruin my fun.

113
00:08:24.714 --> 00:08:27.840
Conceptually, what is an array in JSON?

114
00:08:27.840 --> 00:08:32.758
What kind of values does it contain, okay.

115
00:08:35.267 --> 00:08:39.589
Bala's got number, number or string,

116
00:08:39.589 --> 00:08:43.920
Teresa, you've got another good one.

117
00:08:43.920 --> 00:08:47.768
So we couldn't do this,
we could try to exhaustively do this but

118
00:08:47.768 --> 00:08:52.259
remember we've also got arrays of arrays
like a JSON array of JSON arrays,

119
00:08:52.259 --> 00:08:54.650
that could be objects in my array.

120
00:08:54.650 --> 00:09:01.693
So really, I wanna just say, look,
a JSON array is an array of JSON values.

121
00:09:06.647 --> 00:09:08.875
There are many ways to implement this,

122
00:09:08.875 --> 00:09:12.123
this is just the way I'm
choosing to do it, so JSON oops.

123
00:09:16.379 --> 00:09:22.052
It's an array of JSON values, and now if I
were to take this JSON object thing out,

124
00:09:22.052 --> 00:09:25.258
cuz that's still an any at this point,
look,

125
00:09:25.258 --> 00:09:28.680
our array case got happy, so that's great.

126
00:09:28.680 --> 00:09:35.230
Even if we nested this, even if this
became a string it's still happy.

127
00:09:35.230 --> 00:09:39.165
So really we just need to
describe these objects somehow,

128
00:09:39.165 --> 00:09:43.360
how would we describe an object
like a JSON dictionary maybe.

129
00:09:44.770 --> 00:09:45.793
Anyone have ideas?

130
00:09:49.234 --> 00:09:50.761
&gt;&gt; Index signatures.

131
00:09:50.761 --> 00:09:53.380
&gt;&gt; Index signature, very good.

132
00:09:53.380 --> 00:09:54.625
So that looks like this.

133
00:09:59.486 --> 00:10:03.213
And then we can bring it
back into the fold, and

134
00:10:03.213 --> 00:10:08.130
there we are positive cases
happy negative cases happy.

135
00:10:08.130 --> 00:10:09.730
So I saw some other things in the chat.

136
00:10:09.730 --> 00:10:14.266
I'm not gonna call any names cuz
I don't wanna I like that people

137
00:10:14.266 --> 00:10:18.722
are collaborating,
even if the answers aren't quite there,

138
00:10:18.722 --> 00:10:22.690
if we had this so
this was one of the answers I saw in chat.

139
00:10:24.580 --> 00:10:26.210
What are we saying here?

140
00:10:26.210 --> 00:10:30.645
What's the difference between this and
that.

141
00:10:33.067 --> 00:10:38.777
This is a tuple of length one
that contains a JSON value,

142
00:10:38.777 --> 00:10:44.246
it's always gonna be one long,
which means this case

143
00:10:44.246 --> 00:10:49.240
here would fail, but
this case here would pass.

144
00:10:51.940 --> 00:10:55.918
So we wanna make sure that
we use this double box,

145
00:10:55.918 --> 00:11:00.483
square bracket notation right
double square bracket to

146
00:11:00.483 --> 00:11:04.573
say this is an array of
arbitrary like not a tuple.

147
00:11:07.210 --> 00:11:11.907
But there we go, and this is definitely
a recursive type because an array

148
00:11:11.907 --> 00:11:17.080
is expressed in terms of values and
values expressed in terms of arrays.

149
00:11:17.080 --> 00:11:19.817
It's looping and looping all over, but

150
00:11:19.817 --> 00:11:24.647
it's fine because remember all
the compiler does is it goes through and

151
00:11:24.647 --> 00:11:29.500
it says noted these things exist
types of the following names.

152
00:11:29.500 --> 00:11:33.224
And then it sort of has a placeholder for
those in memory and

153
00:11:33.224 --> 00:11:38.620
then on the right it says, okay, well,
I have a placeholder for this, I don't

154
00:11:38.620 --> 00:11:44.335
know what It is yet, but okay, whatever
JSON value is you'll have one here.

155
00:11:44.335 --> 00:11:45.965
And then it kinda goes through and
sorts things out.

156
00:11:47.265 --> 00:11:54.719
But there you go, this would be
suitable if you use the fetch API and

157
00:11:54.719 --> 00:12:00.990
you have a wait fetch that
JSON something this, right?

158
00:12:00.990 --> 00:12:05.700
Maybe you could say,
instead of returning any promise,

159
00:12:05.700 --> 00:12:10.114
maybe the value that comes
out of this promise is a JSON

160
00:12:10.114 --> 00:12:14.155
value doesn't contain functions,
only JSON.

161
00:12:19.516 --> 00:12:24.471
All right, if you want to look
at the solution it's down here

162
00:12:24.471 --> 00:12:26.910
behind the spoiler warning.

163
00:12:28.990 --> 00:12:30.659
So if you wanna look at it later and

164
00:12:30.659 --> 00:12:34.610
poke at it, maybe on your own time if
you like try different implementations.

165
00:12:34.610 --> 00:12:39.045
See if you can make this work with
interfaces or a combination of the two,

166
00:12:39.045 --> 00:12:43.860
this is a really useful thing,
everyone needs types for JSON.

167
00:12:43.860 --> 00:12:47.766
But maybe one day it'll be part of what
TypeScript ships part of the standard

168
00:12:47.766 --> 00:12:49.120
stuff that comes with it.

