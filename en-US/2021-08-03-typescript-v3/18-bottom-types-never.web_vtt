WEBVTT

1
00:00:00.377 --> 00:00:07.482
All right, let's talk about the opposite
of top types, a bottom type.

2
00:00:07.482 --> 00:00:14.525
Bottom types describe things
that can hold no possible value.

3
00:00:14.525 --> 00:00:20.051
So you can think of it almost like
you're free to choose anything within

4
00:00:20.051 --> 00:00:25.039
an empty set, that this variable
will be happy to hold, right?

5
00:00:25.039 --> 00:00:27.977
It's like anything you want, and

6
00:00:27.977 --> 00:00:33.763
you may pick it from this perfectly
empty box, [LAUGH] that is never.

7
00:00:33.763 --> 00:00:38.843
Sounds like a really abstract concept, and
if you're like me, if this is the first

8
00:00:38.843 --> 00:00:44.015
time you've heard about never, you're
wondering what is the point of this thing?

9
00:00:44.015 --> 00:00:46.658
Is it here just because
somebody loves math, and

10
00:00:46.658 --> 00:00:50.469
because they feel like they want
some great symmetry in the universe?

11
00:00:50.469 --> 00:00:54.026
Or is there something that I can
actually do with this that is useful?

12
00:00:54.026 --> 00:00:59.176
And I'm pleased to tell you, it's
the second one, there is something very

13
00:00:59.176 --> 00:01:04.020
useful you can do with it, and
that thing is exhaustive conditionals.

14
00:01:04.020 --> 00:01:07.978
So let's look at this situation.

15
00:01:07.978 --> 00:01:12.886
We've got a class called car,
a class called truck, and

16
00:01:12.886 --> 00:01:18.215
then a type called vehicle,
which can be either car or truck.

17
00:01:18.215 --> 00:01:22.959
And let's say that we wanna do
something with our vehicles.

18
00:01:22.959 --> 00:01:27.738
And we just have a vehicle,
we don't know whether it's car or truck,

19
00:01:27.738 --> 00:01:32.922
in fact, behind the scenes I have
something called obtain random vehicle,

20
00:01:32.922 --> 00:01:36.008
but just for now, say,
it's one of the two.

21
00:01:36.008 --> 00:01:39.144
So, what we can do is say,
okay, we got the type car here,

22
00:01:39.144 --> 00:01:41.128
we're gonna handle the truck case.

23
00:01:41.128 --> 00:01:45.343
Great, it's a truck we
can call the tow method.

24
00:01:45.343 --> 00:01:50.337
If it's a vehicle, sorry, if the vehicle
is a car, we can call drive, and

25
00:01:50.337 --> 00:01:55.357
that's something that's only available
on the car, okay, like class.

26
00:01:55.357 --> 00:01:59.562
Apparently trucks can't drive,
apparently, I don't have a truck.

27
00:01:59.562 --> 00:02:02.146
So, great, what's left?

28
00:02:02.146 --> 00:02:07.653
What's left after we've eliminated
the possibility that it's car,

29
00:02:07.653 --> 00:02:12.253
and we've eliminated
the possibility that it's a truck?

30
00:02:12.253 --> 00:02:13.759
What else could this thing be?

31
00:02:16.414 --> 00:02:20.231
It's kind of a trick question,
the answer is nothing.

32
00:02:20.231 --> 00:02:24.832
There's nothing else that could be,

33
00:02:24.832 --> 00:02:29.432
nothing, all that's left is never,

34
00:02:29.432 --> 00:02:34.045
there's nothing else that could be.

35
00:02:34.045 --> 00:02:39.935
We've taken care of 100% of the cases
of things we know about, right?

36
00:02:39.935 --> 00:02:42.945
Like cars and trucks, and
there's nothing else this could be.

37
00:02:42.945 --> 00:02:46.905
So the fact that we're saying
this ends up as never,

38
00:02:46.905 --> 00:02:51.684
that's another way of saying
we've handled all of the cases.

39
00:02:51.684 --> 00:02:56.773
We have an exhaustive
conditional that handles every

40
00:02:56.773 --> 00:03:02.663
possibility of this vehicle
being one of the things, right?

41
00:03:04.123 --> 00:03:12.024
So, let's see what happens if
someone comes along and adds boat.

42
00:03:12.024 --> 00:03:16.658
So what they've done is they've
created a class boat, and

43
00:03:16.658 --> 00:03:21.661
they've added boat as one of
the things of vehicle could now be,

44
00:03:21.661 --> 00:03:24.919
could now be a car, or a truck, or a boat.

45
00:03:24.919 --> 00:03:28.897
And I haven't touched
the rest of the code.

46
00:03:28.897 --> 00:03:30.548
Look what happens here.

47
00:03:30.548 --> 00:03:37.028
We see, wait a minute, this vehicle,
when it gets into this last else clause,

48
00:03:37.028 --> 00:03:41.883
there's something left over,
it could be a boat, right?

49
00:03:41.883 --> 00:03:47.518
This isn't a never, there's not nothing
left over after we handle car and

50
00:03:47.518 --> 00:03:52.535
truck, there's boat leftover,
and we're alerted to this now.

51
00:03:52.535 --> 00:03:57.194
So, imagine a world where this stuff here,
the car, the truck,

52
00:03:57.194 --> 00:04:02.278
the boat, the vehicle type,
this might be defined in some other file,

53
00:04:02.278 --> 00:04:06.378
maybe in a project with
10,000 JavaScript files.

54
00:04:06.378 --> 00:04:10.820
Someone alters this, and now all of the
conditions, all of the different places

55
00:04:10.820 --> 00:04:14.347
and the rest of the code base,
where they're looking through,

56
00:04:14.347 --> 00:04:18.685
they wanna make sure they handle every
case that this thing could possibly be.

57
00:04:18.685 --> 00:04:21.848
Now you see all of these
nice errors light up,

58
00:04:21.848 --> 00:04:26.190
where you know you have to go in,
and handle the boat case now.

59
00:04:26.190 --> 00:04:30.668
Either deliberately handle it or
deliberately not handle it,

60
00:04:30.668 --> 00:04:33.121
but attention is needed, right?

61
00:04:33.121 --> 00:04:37.970
These are places if they have
something down here that says,

62
00:04:37.970 --> 00:04:43.311
basically, like up here my vehicle
had better be a never, right?

63
00:04:43.311 --> 00:04:47.712
Or saying, I'm gonna create
a variable of type never, and

64
00:04:47.712 --> 00:04:51.056
the only thing that can
fit in never is never,

65
00:04:51.056 --> 00:04:55.830
it's the most specific,
finicky type there is in TypeScript.

66
00:04:55.830 --> 00:05:00.100
It's only happy with other nevers.

67
00:05:02.148 --> 00:05:07.340
So, this is only gonna work if
there's nothing left, and down here,

68
00:05:07.340 --> 00:05:12.628
there's boat left, and so
this conditional is no longer exhaustive.

69
00:05:12.628 --> 00:05:17.608
The way I like to handle this is I create,
and I have the same code,

70
00:05:17.608 --> 00:05:21.322
if you look for
this code like my GitHub account,

71
00:05:21.322 --> 00:05:25.057
you probably see a couple
dozen projects pop up.

72
00:05:25.057 --> 00:05:28.095
I should really just put it in
the library so I can use it that way.

73
00:05:28.095 --> 00:05:35.162
But I use this unreachable error all
the time, and it takes as an argument and

74
00:05:35.162 --> 00:05:40.030
never, and
it has a message as its second argument.

75
00:05:40.030 --> 00:05:45.146
So, the purpose of taking a never as
the first argument is, I wanna be able

76
00:05:45.146 --> 00:05:51.105
to pass something into it that will have a
compile error unless it's a never, right?

77
00:05:51.105 --> 00:05:54.637
So that's about creating
a compile error at the right spot.

78
00:05:54.637 --> 00:06:00.153
The message is so that if for some reason,
maybe have been lying in my types like

79
00:06:00.153 --> 00:06:06.107
cast something, something was an any, and
it's like weekend my types in some way.

80
00:06:06.107 --> 00:06:08.289
If I ever reached this line and

81
00:06:08.289 --> 00:06:14.156
I ever actually throw this error in code
that I didn't think I could ever reach.

82
00:06:14.156 --> 00:06:19.244
I get a very clear indication that
something was really weird here,

83
00:06:19.244 --> 00:06:25.509
and my assumptions about being unable to
reach this line of code, had been broken.

84
00:06:25.509 --> 00:06:29.930
And I have to take a close look at
what actually is going on here.

85
00:06:29.930 --> 00:06:34.860
And the way I would do this, is I
would say, instead of up here where we

86
00:06:34.860 --> 00:06:39.110
create a variable and
we set my vehicle equal to something,

87
00:06:39.110 --> 00:06:44.298
down here in this last else block here,
I would throw the error, right?

88
00:06:44.298 --> 00:06:48.923
And in this case,
I get a compile error because

89
00:06:48.923 --> 00:06:53.202
boat is leftover, and I'm alerted to it.

90
00:06:53.202 --> 00:06:57.863
So by kind of wrapping
this in an error subclass,

91
00:06:57.863 --> 00:07:02.185
we know that one of three
things will happen,

92
00:07:02.185 --> 00:07:07.434
depending on whether things break and
how they break.

93
00:07:07.434 --> 00:07:11.981
So, first, we've written our types,
well, everything is handled

94
00:07:11.981 --> 00:07:16.851
before we even reach that else clause,
we never entered the else, right?

95
00:07:16.851 --> 00:07:20.614
And everything's happy, so that's great.

96
00:07:20.614 --> 00:07:26.549
Another thing that could happen,
we catch this code change at compile time,

97
00:07:26.549 --> 00:07:32.048
which is the example we're seeing
in this error message here, right?

98
00:07:32.048 --> 00:07:36.608
Someone added boat, this piece of my code
needs an update, I'm alerted to it, and

99
00:07:36.608 --> 00:07:41.251
I can give it some attention, that could
happen, that's what we're seeing here.

100
00:07:41.251 --> 00:07:45.260
Finally, if somehow
something slips through,

101
00:07:45.260 --> 00:07:48.289
I at least get a good error message and

102
00:07:48.289 --> 00:07:53.289
I at least know that I thought
I could never reach this thing.

103
00:07:53.289 --> 00:07:59.973
And I get a description here, I mean,
maybe be more descriptive than this,

104
00:07:59.973 --> 00:08:05.829
but I could say, I didn't even
think this was a possible vehicle.

105
00:08:05.829 --> 00:08:10.410
Maybe you log out what this thing is,
so that it becomes more actionable for

106
00:08:10.410 --> 00:08:15.080
you and you'd go back to this code and
you'd say, where did boat come from?

107
00:08:15.080 --> 00:08:19.070
My types don't suggest that boats
possible, how did we end up with a boat?

108
00:08:19.070 --> 00:08:20.561
And you would track that down.

109
00:08:20.561 --> 00:08:24.106
So, it's also important to remember this
works really well with switch statements.

110
00:08:24.106 --> 00:08:28.815
And the only difference is you would
throw your unreachable error in

111
00:08:28.815 --> 00:08:31.302
your default case clause, right?

112
00:08:31.302 --> 00:08:34.255
That's it, whatever it is,
it's sort of the fall through.

113
00:08:34.255 --> 00:08:38.784
If any of your specific cases
with type guards aren't met,

114
00:08:38.784 --> 00:08:42.861
this is the thing you thought
could never happen, but

115
00:08:42.861 --> 00:08:46.590
if it does happen,
you get a nice error message.

116
00:08:46.590 --> 00:08:51.118
Exhaustive conditionals,
this is cool stuff and

117
00:08:51.118 --> 00:08:55.215
if some programming
languages support a more

118
00:08:55.215 --> 00:09:00.064
formalized version of this,
like rust, I believe,

119
00:09:00.064 --> 00:09:06.447
it demands that every conditional
you create is exhaustive, right?

120
00:09:06.447 --> 00:09:09.695
You have to write in
your no ops explicitly.

121
00:09:09.695 --> 00:09:14.578
So this gives you the ability
if you choose to use this never

122
00:09:14.578 --> 00:09:19.670
concept in this way,
you can do the same thing for your code.

