WEBVTT

1
00:00:00.180 --> 00:00:02.417
So what about optional properties?

2
00:00:02.417 --> 00:00:07.697
Let's extend our model of a car and
we'll say, sometimes we have

3
00:00:07.697 --> 00:00:12.790
an electric car and
they wanna charge at a particular voltage.

4
00:00:12.790 --> 00:00:15.048
So what is that chargeVoltage?

5
00:00:15.048 --> 00:00:18.177
Is it 240 volts, what is it?

6
00:00:18.177 --> 00:00:23.765
Now, chargeVoltage doesn't make any
sense for a car that runs on gasoline.

7
00:00:23.765 --> 00:00:30.441
So, Let's say that for
electric cars we will find this value,

8
00:00:30.441 --> 00:00:34.355
but for non-electric cars
this value will be missing.

9
00:00:34.355 --> 00:00:38.238
So this is an optional property
that may or may not be there.

10
00:00:38.238 --> 00:00:40.536
It's sometimes there, and it's a number.

11
00:00:42.718 --> 00:00:49.137
So we're going to use this question
mark to state that chargeVoltage

12
00:00:49.137 --> 00:00:54.127
might be there, but
if it is there it will be a number.

13
00:00:54.127 --> 00:00:59.010
And if we hover over this,
the type of chargeVoltage,

14
00:00:59.010 --> 00:01:02.736
its number and then a pipe and undefined.

15
00:01:02.736 --> 00:01:06.923
Can someone make a guess
as to what the pipe means?

16
00:01:06.923 --> 00:01:10.604
When do we see a pipe in JavaScript?

17
00:01:10.604 --> 00:01:13.360
Maybe two pipes next to each other.

18
00:01:13.360 --> 00:01:14.130
&gt;&gt; Means or?

19
00:01:14.130 --> 00:01:16.047
&gt;&gt; It means or, very good.

20
00:01:16.047 --> 00:01:19.387
So you can think of this as or for types.

21
00:01:19.387 --> 00:01:21.645
I see a lot of people in
the chat got it as well.

22
00:01:21.645 --> 00:01:25.940
So we'll talk more about and and
or, it is possible with types.

23
00:01:25.940 --> 00:01:30.225
But here we're seeing something that
conceptually aligns with what we set

24
00:01:30.225 --> 00:01:30.842
out to do.

25
00:01:30.842 --> 00:01:33.920
And that is, it may or may not be there.

26
00:01:37.189 --> 00:01:40.019
So here we can see we
regenerate our string.

27
00:01:40.019 --> 00:01:44.480
Here's our chargeVoltage,
and this is interesting.

28
00:01:44.480 --> 00:01:49.562
So, what we're doing here is
we're gonna make a basic string,

29
00:01:49.562 --> 00:01:53.794
and then I've just put this
line here to kind of reveal

30
00:01:53.794 --> 00:01:57.951
the type of chargeVoltage
that has this undefined.

31
00:01:57.951 --> 00:01:59.691
And then we have this condition.

32
00:01:59.691 --> 00:02:03.807
And at run time,
if we think about what this will do,

33
00:02:03.807 --> 00:02:08.964
we're checking to see if
chargeVoltage is defined or it's not.

34
00:02:08.964 --> 00:02:13.423
So we're creating a branch of
code that will only execute if

35
00:02:13.423 --> 00:02:16.463
something is there for chargeVoltage.

36
00:02:16.463 --> 00:02:20.912
And sure enough,
we can see that we've eliminated

37
00:02:20.912 --> 00:02:24.644
the undefined possibility here, right?

38
00:02:24.644 --> 00:02:29.432
If we go down this branch of code,
TypeScript seems to be able to understand

39
00:02:29.432 --> 00:02:33.082
that we're gonna have a number there,
and we can use it.

40
00:02:33.082 --> 00:02:36.711
We can print it as a number, right?

41
00:02:36.711 --> 00:02:40.523
This is what's called a type guard.

42
00:02:40.523 --> 00:02:45.980
It's where you typically will
combine some sort of predicate,

43
00:02:45.980 --> 00:02:50.032
like a check true or
false expression, right?

44
00:02:50.032 --> 00:02:56.135
You'll combine that with some control
flow tool like if or a case switch.

45
00:02:56.135 --> 00:03:02.124
And in doing that, you'll create
branches of code where the compiler can

46
00:03:02.124 --> 00:03:07.532
understand that like we'll take
a left turn if we're undefined,

47
00:03:07.532 --> 00:03:11.312
and we'll take a right
turn if we are defined.

48
00:03:11.312 --> 00:03:17.496
And that allows you to kind of
consume these things safely.

49
00:03:17.496 --> 00:03:18.132
By the way,

50
00:03:18.132 --> 00:03:22.229
this is one of those key points I talked
about where people love TypeScript.

51
00:03:22.229 --> 00:03:26.848
Every time I convert a JavaScript code
base to TypeScript I find a bunch of

52
00:03:26.848 --> 00:03:32.016
these, where somebody was sort of betting
on this value will probably be there.

53
00:03:32.016 --> 00:03:35.238
And it turns out,
there's no code that guarantees that,

54
00:03:35.238 --> 00:03:39.665
TypeScript is gonna demand that we put
this line here in order to start using it.

55
00:03:39.665 --> 00:03:42.030
We can go out to the playground and
give this a shot.

56
00:03:45.287 --> 00:03:49.076
So if we were to take this away, and

57
00:03:49.076 --> 00:03:53.782
let me make this a little
bit more obvious,

58
00:03:53.782 --> 00:03:57.336
we'll say, toFixed, right?

59
00:03:57.336 --> 00:04:01.389
So I'm just trying to use this in a way
that's gonna really break if it's

60
00:04:01.389 --> 00:04:03.188
something other than a number.

61
00:04:03.188 --> 00:04:08.838
If we got rid of this type guard, it's
just gonna say, look, you can't do that.

62
00:04:08.838 --> 00:04:13.115
This could be undefined, you can't
just reach into it and call toFixed.

63
00:04:13.115 --> 00:04:15.407
So the type guard serves that purpose.

64
00:04:15.407 --> 00:04:19.981
And I guarantee you write
JavaScript code today

65
00:04:19.981 --> 00:04:24.216
that is missing these in important places.

66
00:04:24.216 --> 00:04:26.421
I know, I do it all the time.

67
00:04:26.421 --> 00:04:29.059
Like every time I convert,
I find a bunch of these.

68
00:04:32.283 --> 00:04:35.578
So, because we have
this optional property,

69
00:04:35.578 --> 00:04:40.483
we can either pass this value in as
we are down here, or we can omit it.

70
00:04:40.483 --> 00:04:45.604
Now, some of you may wonder what if

71
00:04:45.604 --> 00:04:50.979
here, For this chargeVoltage,
what if I did this?

72
00:05:00.309 --> 00:05:01.451
And let's try to use it.

73
00:05:17.652 --> 00:05:21.219
So something's not happy here.

74
00:05:21.219 --> 00:05:25.913
And if we look at this error,
it's a little hard to read.

75
00:05:25.913 --> 00:05:30.797
I read TypeScript errors from the bottom
up cuz they're kind of like stack traces,

76
00:05:30.797 --> 00:05:34.933
especially in this case where we have
a problem with the whole object.

77
00:05:34.933 --> 00:05:36.413
That lowest line and

78
00:05:36.413 --> 00:05:41.560
the error message will tell you
the property that caused the problem.

79
00:05:41.560 --> 00:05:44.931
So we're seeing, okay,
chargeVoltage is declared here,

80
00:05:44.931 --> 00:05:48.630
chargeVoltage is missing in type,
and then it lists the type, but

81
00:05:48.630 --> 00:05:52.083
it's required in type, and
then it lists another type here.

82
00:05:52.083 --> 00:05:55.687
So what we're saying here is if
I didn't have a chargeVoltage,

83
00:05:55.687 --> 00:05:58.569
I actually have to do
chargeVoltage is undefined.

84
00:05:58.569 --> 00:06:02.351
I have to pass in an undefined,
that's kind of weird.

85
00:06:02.351 --> 00:06:06.321
There's a difference between
an optional property and

86
00:06:06.321 --> 00:06:10.720
a property that has the potential
to have an undefined value.

87
00:06:10.720 --> 00:06:14.877
Optional properties can be left out,
but if you do this,

88
00:06:14.877 --> 00:06:19.915
someone's gonna have to pass an undefined,
which is really weird.

89
00:06:19.915 --> 00:06:23.990
I don't like passing undefined in
as a deliberate argument, right?

90
00:06:23.990 --> 00:06:28.209
That's kind of strange, or
deliberate property value.

91
00:06:28.209 --> 00:06:31.324
So, that's the difference.

92
00:06:31.324 --> 00:06:33.198
And I see some face palms in chat.

93
00:06:33.198 --> 00:06:36.215
This is a justifiable facepalm.

94
00:06:36.215 --> 00:06:39.748
So, yeah, you wouldn't be able to do this.

95
00:06:39.748 --> 00:06:45.783
So optional is more than simply
adding that or undefined.

96
00:06:45.783 --> 00:06:50.686
It means that it can be present,
it can be absent.

97
00:06:50.686 --> 00:06:54.805
There is another type of error
that TypeScript catches for

98
00:06:54.805 --> 00:06:57.504
us called excess property checking.

99
00:06:57.504 --> 00:07:02.272
And again, I'm gonna illustrate this with
an example that builds potentially one

100
00:07:02.272 --> 00:07:04.052
more thing onto our car model.

101
00:07:04.052 --> 00:07:06.227
So we have our make, model, and year.

102
00:07:06.227 --> 00:07:10.898
And let's say that someone
got really eager and

103
00:07:10.898 --> 00:07:16.736
they decided they want to describe
the color of their car and

104
00:07:16.736 --> 00:07:19.796
pass that into this function.

105
00:07:19.796 --> 00:07:25.281
So we're getting what's called
an excess property error,

106
00:07:25.281 --> 00:07:30.118
and the keywords to look for
here is object literal may

107
00:07:30.118 --> 00:07:34.111
only specify known properties right here.

108
00:07:34.111 --> 00:07:36.835
And color is not one of those properties.

109
00:07:36.835 --> 00:07:43.309
So it's saying, you gave me this thing and
I didn't ask for it.

110
00:07:43.309 --> 00:07:47.767
And if we eliminated it,
everything would be fine, why?

111
00:07:47.767 --> 00:07:49.318
Why is TypeScript mad at us?

112
00:07:49.318 --> 00:07:51.188
This won't break your code.

113
00:07:51.188 --> 00:07:55.999
The fact that red's there won't break
your code, so why are we being alerted?

114
00:07:55.999 --> 00:08:00.999
Well, If we started to use car in here,

115
00:08:00.999 --> 00:08:04.966
there's no way to safely
access that color property.

116
00:08:04.966 --> 00:08:10.685
So it's a case where when we're changing,
when we have that color property there,

117
00:08:10.685 --> 00:08:16.094
we're setting ourselves up to never be
able to safely access that extra thing.

118
00:08:16.094 --> 00:08:21.588
It's like an appendix,
it's this vestigial thing that serves

119
00:08:21.588 --> 00:08:26.887
no purpose can safely be eliminated,
we know conclusively.

120
00:08:26.887 --> 00:08:32.984
So there are a couple things we could
do if we wanted to handle this case,

121
00:08:32.984 --> 00:08:36.656
and I'm going to show
you a couple of them.

122
00:08:36.656 --> 00:08:42.678
First, we could certainly say oops,
we can make it optional.

123
00:08:42.678 --> 00:08:46.106
This would make this thing go
away cuz potentially in here,

124
00:08:46.106 --> 00:08:49.468
we could use the undefined check,
we could access color,

125
00:08:49.468 --> 00:08:52.086
it's no longer a pointless
thing to pass in.

126
00:08:52.086 --> 00:08:54.141
So that's one thing we could do.

127
00:08:54.141 --> 00:08:58.882
And here's another thing that
sort of makes the point as to

128
00:08:58.882 --> 00:09:01.993
how the compiler is trying to help us.

129
00:09:01.993 --> 00:09:09.010
Let's, myCar, let's give it a value,
or variable, rather.

130
00:09:09.010 --> 00:09:13.312
So here,
we're also not getting an error, why?

131
00:09:13.312 --> 00:09:17.251
Well, conceivably,
something else other than printCar,

132
00:09:17.251 --> 00:09:23.852
could reach into this my car thing,
And get color.

133
00:09:23.852 --> 00:09:26.711
That's totally fair.

134
00:09:26.711 --> 00:09:32.998
It's no longer definitely pointless
to have that color property on there.

135
00:09:32.998 --> 00:09:37.552
And when we talk about object literal,
like access object literal

136
00:09:37.552 --> 00:09:42.347
property checking, it had to do with
the fact that we were just passing

137
00:09:42.347 --> 00:09:46.521
this thing in directly to
the function as an object literal.

138
00:09:46.521 --> 00:09:50.510
And that's why we were guaranteed that
like nobody is ever gonna be able

139
00:09:50.510 --> 00:09:52.514
to make use of this color property.

140
00:09:52.514 --> 00:09:54.254
No one else has access to it.

141
00:09:54.254 --> 00:09:59.633
It just lives in the argument list
of this one invocation of print car.

142
00:09:59.633 --> 00:10:05.430
It lives in a stack frame.

143
00:10:05.430 --> 00:10:10.508
And so definitely no one else
is gonna be able to use it.

144
00:10:10.508 --> 00:10:14.635
So you will see errors like that when
you convert something from JavaScript to

145
00:10:14.635 --> 00:10:17.439
TypeScript, and
you'll solve it a number of ways.

146
00:10:17.439 --> 00:10:21.569
As you're doing your early conversions,
it's gonna be because your

147
00:10:21.569 --> 00:10:26.265
types were missing something like,
yeah, color, we need to handle color.

148
00:10:26.265 --> 00:10:30.472
And then you're gonna start to find things
where there's like a misspelling or

149
00:10:30.472 --> 00:10:31.492
something weird.

150
00:10:31.492 --> 00:10:34.538
So we saw three different
ways to solve this.

151
00:10:34.538 --> 00:10:40.282
Remove the property, add the property
to the type, or create a variable.

152
00:10:40.282 --> 00:10:44.750
Because conceivably, something else could
access color through that variable.

