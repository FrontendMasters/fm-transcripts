WEBVTT

1
00:00:00.000 --> 00:00:02.544
So, we've talked about top types,
bottom types.

2
00:00:02.544 --> 00:00:06.973
Let's talk a little bit about type guards,
and narrowing.

3
00:00:06.973 --> 00:00:11.426
So we have already addressed
a bunch of different

4
00:00:11.426 --> 00:00:15.020
kinds of built in type guards, right?

5
00:00:15.020 --> 00:00:18.622
So I've created a value here that
could be it's not quite an any but

6
00:00:18.622 --> 00:00:20.819
it could be a bunch of different things.

7
00:00:20.819 --> 00:00:24.763
And we can see a bunch of different
ways that we can narrow it down,

8
00:00:24.763 --> 00:00:28.807
get a branch of code that will
execute only in a specific scenario.

9
00:00:28.807 --> 00:00:35.402
And then within that code block, we can
treat it in a more useful way, right?

10
00:00:35.402 --> 00:00:40.456
Like, as it stands, there's not much you
can do with value given that it's so

11
00:00:40.456 --> 00:00:42.383
varied like what it might be.

12
00:00:42.383 --> 00:00:45.302
So here we could say, okay,
it might be a date, so

13
00:00:45.302 --> 00:00:47.468
we use instant serve as a type guard.

14
00:00:47.468 --> 00:00:48.607
Type of, right?

15
00:00:48.607 --> 00:00:50.920
That works just fine.

16
00:00:50.920 --> 00:00:55.001
Checking whether something's undefined or
not, the type of is great for that.

17
00:00:55.001 --> 00:01:00.124
Checking against a specific value that's
a perfectly fine type card to use.

18
00:01:00.124 --> 00:01:02.186
Truthy, falsy checks are fine.

19
00:01:02.186 --> 00:01:08.439
Just beware, of course, empty strings and
zero and false are all false II values.

20
00:01:08.439 --> 00:01:13.273
So if you have something like it's
Boolean or undefined, truthy, false,

21
00:01:13.273 --> 00:01:17.590
you might catch something you're
not intending to catch, right?

22
00:01:17.590 --> 00:01:25.722
Some built in functions have type card
capabilities like array.is array, right?

23
00:01:25.722 --> 00:01:29.972
So we can see that value comes
in could be a bunch of things.

24
00:01:29.972 --> 00:01:34.922
But within this block,
it can only be a couple

25
00:01:34.922 --> 00:01:39.105
of length one that contains a number.

26
00:01:39.105 --> 00:01:42.753
Property presence check with
this in keyword, right?

27
00:01:42.753 --> 00:01:48.665
That's saying is does there exist an owned

28
00:01:48.665 --> 00:01:54.917
property called date range, within value.

29
00:01:54.917 --> 00:01:58.256
And then of course, you can always
like make a couple checks and

30
00:01:58.256 --> 00:02:01.547
then whatever's left over,
that'll be what's left over.

31
00:02:01.547 --> 00:02:05.175
So that's sort of like
a reverse type guard, right?

32
00:02:05.175 --> 00:02:07.473
Can carve away the parts
that you don't want.

33
00:02:07.473 --> 00:02:10.698
And all that's left is what's left.

34
00:02:10.698 --> 00:02:12.170
So those are built in type guards.

35
00:02:12.170 --> 00:02:15.714
And I think this is an exhaustive list.

36
00:02:15.714 --> 00:02:19.572
But let's talk about user defined
type guards because often,

37
00:02:19.572 --> 00:02:24.384
we want to operate on a much higher level
than simply saying, is this a string?

38
00:02:24.384 --> 00:02:25.602
Is this a number?

39
00:02:25.602 --> 00:02:31.197
We more want to think about if you're
building the front end masters website,

40
00:02:31.197 --> 00:02:35.534
you'd want to say is this a learning
path or is this a course?

41
00:02:35.534 --> 00:02:38.885
Or is this an instructor or
is this a user account?

42
00:02:38.885 --> 00:02:41.116
And that's a lot more complicated.

43
00:02:41.116 --> 00:02:46.013
It's harder to think about how you
might squeeze these kinds of things

44
00:02:46.013 --> 00:02:50.163
together to achieve that same
level of creating a branch and

45
00:02:50.163 --> 00:02:54.986
knowing that it's this more complex
object as you go down that path.

46
00:02:54.986 --> 00:03:00.427
So that's where user defined
type guards come in handy.

47
00:03:00.427 --> 00:03:04.703
And here's an example of how ugly
things could potentially get, right?

48
00:03:04.703 --> 00:03:09.776
So if we wanted to see,
is maybe car doesn't look like a car.

49
00:03:09.776 --> 00:03:14.334
Well, in order to do this safely,
given that it's an unknown, right,

50
00:03:14.334 --> 00:03:19.342
remember, we can't use this unknown until
we narrow it down with a type card and

51
00:03:19.342 --> 00:03:22.580
check it out and
make sure it's what we think it is.

52
00:03:22.580 --> 00:03:25.148
So you'd have to see okay, does it?

53
00:03:25.148 --> 00:03:27.601
Is it knowledge like Could it be null or
undefined?

54
00:03:27.601 --> 00:03:29.321
Well, we eliminate that with this.

55
00:03:29.321 --> 00:03:34.853
And then Okay, does it have like
is it an object of an object type?

56
00:03:34.853 --> 00:03:40.055
Does it have make model and year our
make model and year strings numbers.

57
00:03:40.055 --> 00:03:41.036
Do you could do this.

58
00:03:41.036 --> 00:03:43.604
Let's say you were willing to do this,
right?

59
00:03:45.684 --> 00:03:48.796
I would argue, you're already out of your
mind if you want to write a bunch of

60
00:03:48.796 --> 00:03:49.929
code that looks like this.

61
00:03:49.929 --> 00:03:52.288
But let's pretend you're out of your mind.

62
00:03:52.288 --> 00:03:59.760
So, even if this did work, Eventually,
you're gonna wanna refactor this.

63
00:03:59.760 --> 00:04:04.361
You're just gonna wanna take that same
code that's sort of a bunch of different

64
00:04:04.361 --> 00:04:06.017
stuff in your conditional.

65
00:04:06.017 --> 00:04:10.520
You move it out into a function just so
that your code can look like this, right?

66
00:04:10.520 --> 00:04:15.521
But the problem here is,
even though these are all type guards,

67
00:04:15.521 --> 00:04:20.523
there's nothing about his car
like there's nothing about this

68
00:04:20.523 --> 00:04:25.987
function that says, hey, TypeScript,
you should regard the true or

69
00:04:25.987 --> 00:04:29.253
false value that this function returns.

70
00:04:29.253 --> 00:04:35.236
As an indication of what
the type the argument is, right?

71
00:04:35.236 --> 00:04:40.571
Like, right now, even if we added
type annotations here, right?

72
00:04:40.571 --> 00:04:45.818
Even if we said this returns a Boolean
instead of an any there's nothing

73
00:04:45.818 --> 00:04:50.978
that tells TypeScript that something
special about that Boolean that

74
00:04:50.978 --> 00:04:56.592
it has any bearing on what should be
assumed about the argument we passed in.

75
00:04:56.592 --> 00:05:01.586
And so even the imperfect narrowing effect
that we had when we had all this stuff up

76
00:05:01.586 --> 00:05:05.119
here, like at least we saw
that it was an object, right?

77
00:05:05.119 --> 00:05:07.911
I mean, really,
that just came from this here.

78
00:05:07.911 --> 00:05:10.444
But we don't even get that here.

79
00:05:10.444 --> 00:05:11.620
It's back to unknown.

80
00:05:11.620 --> 00:05:14.054
We're like back to square one.

81
00:05:14.054 --> 00:05:18.799
So user defined type guards
are the solution to this problem.

82
00:05:18.799 --> 00:05:25.440
And the problem we're trying to solve is
TypeScript has no idea that the return

83
00:05:25.440 --> 00:05:31.085
value of his car like has anything
to do with what we passed into it.

84
00:05:31.085 --> 00:05:33.080
So here we go.

85
00:05:33.080 --> 00:05:36.750
We're going to make this
a user defined type guard.

86
00:05:36.750 --> 00:05:41.524
And we're going to start by
talking about an is type card.

87
00:05:41.524 --> 00:05:43.673
Value is foo, right?

88
00:05:43.673 --> 00:05:47.998
So we're going to see that
syntax somewhere in a moment.

89
00:05:47.998 --> 00:05:49.492
So here we go.

90
00:05:49.492 --> 00:05:51.708
It's a function is car-like.

91
00:05:51.708 --> 00:05:53.250
It takes an argument.

92
00:05:53.250 --> 00:05:56.804
Typically, you're going to want this
argument to be something very flexible.

93
00:05:56.804 --> 00:05:57.559
Why?

94
00:05:57.559 --> 00:05:58.970
Because you're going to reach into it.

95
00:05:58.970 --> 00:06:01.412
And you're going to check for
the presence of things.

96
00:06:01.412 --> 00:06:03.745
You're probing, right?

97
00:06:03.745 --> 00:06:08.911
You're inspecting it, you can't assume
that you know what it is yet, but

98
00:06:08.911 --> 00:06:14.412
you need it to be flexible enough to
perform the validation, that makes sense.

99
00:06:14.412 --> 00:06:18.876
And then what makes this a type guard
is the special way of writing its

100
00:06:18.876 --> 00:06:19.825
return type.

101
00:06:19.825 --> 00:06:27.202
So we can say effectively that like Yes,
his car like it returns a Boolean.

102
00:06:27.202 --> 00:06:33.647
But that Boolean should
be taken as an indication

103
00:06:33.647 --> 00:06:40.889
of whether value to test
conforms to the type car like.

104
00:06:40.889 --> 00:06:45.181
And we can write our
same implementation here.

105
00:06:45.181 --> 00:06:47.403
But look at this.

106
00:06:47.403 --> 00:06:49.878
Out here, it's unknown.

107
00:06:49.878 --> 00:06:56.057
And within this block,
it conforms to the interface.

108
00:06:56.057 --> 00:06:59.913
And it's only because you're
telling TypeScript to trust you.

109
00:07:01.664 --> 00:07:05.977
So, this is very important.

110
00:07:05.977 --> 00:07:09.987
This type guard can be your best friend or
it can be your worst enemy.

111
00:07:09.987 --> 00:07:17.406
Because let's just completely
do something crazy.

112
00:07:17.406 --> 00:07:19.647
What if we did this.

113
00:07:19.647 --> 00:07:25.277
Just anything you give me,
I'm just gonna say it's always car like.

114
00:07:25.277 --> 00:07:30.948
Well, there it is, I'm not narrowing the
value anymore if that's what's happening.

115
00:07:35.577 --> 00:07:38.744
So there's our -19.

116
00:07:38.744 --> 00:07:40.983
It'll be change this to x.

117
00:07:40.983 --> 00:07:44.793
Like apparently -19 is a car like,

118
00:07:44.793 --> 00:07:49.922
like I can access make model and
year on this thing.

119
00:07:49.922 --> 00:07:55.703
No errors, None,
no little red dots in my scroll bar here.

120
00:07:55.703 --> 00:08:01.394
So the type car is only as
good as your alignment between

121
00:08:01.394 --> 00:08:06.469
the actual checking logic
that you implement and

122
00:08:06.469 --> 00:08:11.419
the claim you make,
about what that logic means

123
00:08:11.419 --> 00:08:16.639
means in terms of the type,
of what's passed in.

124
00:08:16.639 --> 00:08:22.952
If your logic here is flawed,
you're gonna run into big problems,

125
00:08:22.952 --> 00:08:27.848
because type scripts got
to do exactly what you say.

126
00:08:27.848 --> 00:08:31.165
Right now I'm saying everything's carlike.

127
00:08:31.165 --> 00:08:35.099
And so -19 apparently has
a property called year on it,

128
00:08:35.099 --> 00:08:38.162
TypeScript doing what
I'm telling it to do.

129
00:08:38.162 --> 00:08:40.566
So just be really careful about these.

130
00:08:40.566 --> 00:08:44.528
These are again, I said this before
I want to say one more time.

131
00:08:44.528 --> 00:08:49.429
These type guards are the glue
between compile time validation and

132
00:08:49.429 --> 00:08:55.118
runtime behavior, you got to make sure
that your compile time validation and

133
00:08:55.118 --> 00:08:57.590
your runtime behavior match up.

134
00:08:57.590 --> 00:09:01.341
And if they don't, you're gonna
be lying to yourself here, right?

135
00:09:01.341 --> 00:09:05.914
You're gonna be allowing yourself
to comfortably reach in and

136
00:09:05.914 --> 00:09:10.497
pull things off and
operate on values that should be erroring.

137
00:09:10.497 --> 00:09:14.728
Let's look at the other type
of user defined type card.

138
00:09:14.728 --> 00:09:19.647
And it follows this format,
asserts value is foo.

139
00:09:19.647 --> 00:09:22.716
So, here's what the return
type looks like.

140
00:09:22.716 --> 00:09:25.986
I've changed this very slightly, right?

141
00:09:25.986 --> 00:09:28.748
But that the return type
is changed a little bit.

142
00:09:28.748 --> 00:09:33.282
The type guard itself if the check is

143
00:09:33.282 --> 00:09:38.724
the same check we were performing before,

144
00:09:38.724 --> 00:09:43.873
if it is found to not
be car like we throw.

145
00:09:43.873 --> 00:09:47.225
So if you pass through this function and

146
00:09:47.225 --> 00:09:52.922
we haven't thrown your car like
that's what we're saying here.

147
00:09:52.922 --> 00:09:57.396
If this function finishes
without throwing,

148
00:09:57.396 --> 00:10:02.786
that means value to test his car like so
effectively this

149
00:10:02.786 --> 00:10:07.842
function asserts that
the value to test is car like.

150
00:10:07.842 --> 00:10:10.054
As a result,
we can do something really cool here.

151
00:10:10.054 --> 00:10:15.138
We don't have to use a conditional because
we're sort of using the return versus

152
00:10:15.138 --> 00:10:20.316
throw branching, well, I don't necessarily
agree that that's control flow.

153
00:10:20.316 --> 00:10:25.446
It is definitely a true statement
that will only reach this line down

154
00:10:25.446 --> 00:10:30.308
here if we pass through the function
without throwing, right?

155
00:10:30.308 --> 00:10:35.585
But this is great for modeling,
things that are in test suites or

156
00:10:35.585 --> 00:10:40.376
things that really are exceptional
validation where if,

157
00:10:40.376 --> 00:10:45.673
like you don't even know how to
proceed unless this is car like.

158
00:10:45.673 --> 00:10:50.415
So we want to get something more
specific like we get we can't operate on

159
00:10:50.415 --> 00:10:52.153
this waltz and unknown and

160
00:10:52.153 --> 00:10:56.988
we legitimately do want an error to be
thrown if this is some weird value.

161
00:10:56.988 --> 00:10:59.902
So in a might be the right
thing to do here.

162
00:10:59.902 --> 00:11:02.874
But this is the other kind of
type card that you can use.

163
00:11:02.874 --> 00:11:07.351
I commonly will use both where
I would create something

164
00:11:07.351 --> 00:11:12.118
that's like is car-like and
then I would consume this and

165
00:11:12.118 --> 00:11:16.705
kind of wrap it in something
that'll throw it in error.

166
00:11:16.705 --> 00:11:22.658
So I get both of
the funding is typed guard.

167
00:11:22.658 --> 00:11:27.560
And then I'll use that same little
Boolean returning function in my

168
00:11:27.560 --> 00:11:29.110
asserts type guard.

169
00:11:29.110 --> 00:11:32.676
So here's a terrible
example of type guard.

170
00:11:32.676 --> 00:11:36.468
And you can see like, well, I already
showed you an even more terrible one.

171
00:11:36.468 --> 00:11:40.615
But here I'm assuming that
all false things are no.

172
00:11:40.615 --> 00:11:45.700
Well, this will make you think zero is
now an empty string is now like the false

173
00:11:45.700 --> 00:11:50.567
Boolean value is no, obviously,
there are false things that are not no.

174
00:11:50.567 --> 00:11:52.895
But again, TypeScript will.

175
00:11:54.958 --> 00:11:57.424
It will follow your instructions, right?

176
00:11:57.424 --> 00:12:00.644
So in this case we have empty and
we have zero.

177
00:12:00.644 --> 00:12:06.563
And we're here saying, if this value
is no then log and unfortunately,

178
00:12:06.563 --> 00:12:12.012
we're just catching way, way,
way too much with this type card.

179
00:12:12.012 --> 00:12:14.957
And we're never going to
be able to get here, right?

180
00:12:14.957 --> 00:12:20.575
It's claiming that It's
impossible that we'll get here.

