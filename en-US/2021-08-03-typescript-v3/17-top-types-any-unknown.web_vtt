WEBVTT

1
00:00:00.453 --> 00:00:05.031
The next topic we're gonna discuss is
honestly one of my favorite in TypeScript

2
00:00:05.031 --> 00:00:07.367
and it's this chapter and the next one.

3
00:00:07.367 --> 00:00:10.168
So we're gonna start with top and
bottom types,

4
00:00:10.168 --> 00:00:14.280
which are types they can hold anything and
types they can hold nothing.

5
00:00:14.280 --> 00:00:17.030
And then type guards and narrowing.

6
00:00:17.030 --> 00:00:21.654
So we saw a little bit about type
guards already, like type of,

7
00:00:21.654 --> 00:00:26.819
instance of, but we're gonna learn
how to write our own type guards.

8
00:00:26.819 --> 00:00:32.051
So the first thing I want
us to talk a little bit

9
00:00:32.051 --> 00:00:39.915
about is thinking about types in
terms of what is called set theory.

10
00:00:39.915 --> 00:00:47.593
And this might sound a little bit scary
cuz set theory gets very complicated.

11
00:00:47.593 --> 00:00:52.611
But I just want you to think
of it from the simple idea

12
00:00:52.611 --> 00:00:57.981
that we can think about types
as defining a set of values

13
00:00:57.981 --> 00:01:02.790
that a variable or
a function argument might be.

14
00:01:02.790 --> 00:01:09.598
So if we were to say that x is of type
boolean, what we're really saying is,

15
00:01:09.598 --> 00:01:16.311
you may select anything from the following
set of values, true or false.

16
00:01:16.311 --> 00:01:19.809
It can be one of those two things and

17
00:01:19.809 --> 00:01:25.250
the set describes all allowed
things that x could be.

18
00:01:25.250 --> 00:01:28.322
That's as far as we need
to go with set theory.

19
00:01:28.322 --> 00:01:33.049
So let's think about y being a number.

20
00:01:33.049 --> 00:01:36.418
So we could use what's
called set builder notation.

21
00:01:36.418 --> 00:01:39.430
Hopefully, this is human readable enough.

22
00:01:39.430 --> 00:01:47.350
But we could say there exists
a thing y such that y is any number.

23
00:01:47.350 --> 00:01:52.737
And if we imagine the same kind of
concept is dealing with a boolean,

24
00:01:52.737 --> 00:01:59.079
which only has two possibilities, y you
could think of as having a similar set.

25
00:01:59.079 --> 00:02:04.852
But within that set is any number that's
allowable in the world of JavaScript.

26
00:02:04.852 --> 00:02:08.760
So just a couple more examples
to sort of hit this point home.

27
00:02:08.760 --> 00:02:16.865
Here is a union type that could
be one of three specific numbers.

28
00:02:16.865 --> 00:02:19.610
So there's the set of
things that it could be.

29
00:02:19.610 --> 00:02:25.426
Null, actually is its own type, at least
with strict null checks turned on,

30
00:02:25.426 --> 00:02:29.279
which you should make sure
that remains turned on.

31
00:02:29.279 --> 00:02:32.970
But that's one thing that that could be.

32
00:02:32.970 --> 00:02:38.132
And here's an optional variable or
an optional property on some

33
00:02:38.132 --> 00:02:44.645
object type that could be exactly the
string pineapple or it could be undefined.

34
00:02:44.645 --> 00:02:46.420
Hopefully making sense so far.

35
00:02:46.420 --> 00:02:51.111
So type just describes
a set of things that you

36
00:02:51.111 --> 00:02:56.180
could find in the variable
that type describes.

37
00:02:56.180 --> 00:03:01.019
Great, so let's talk about top types.

38
00:03:01.019 --> 00:03:07.036
Top types are types to
describe anything and

39
00:03:07.036 --> 00:03:12.569
we've already seen one of these, any.

40
00:03:12.569 --> 00:03:20.524
So the set of things that any could be
it's any value allowable in JavaScript.

41
00:03:20.524 --> 00:03:26.049
It could be a function, a number,
a string, a big int, a symbol,

42
00:03:26.049 --> 00:03:32.689
null could be absolutely anything,
right, anything allowed in JavaScript.

43
00:03:32.689 --> 00:03:35.929
And that's what makes it a top type.

44
00:03:35.929 --> 00:03:44.219
It's the most general most flexible
thing that exists in this type system.

45
00:03:44.219 --> 00:03:48.039
There's another top type called unknown.

46
00:03:48.039 --> 00:03:51.501
So we're gonna talk about any first and
then we can go and look at unknown.

47
00:03:51.501 --> 00:03:53.679
Obviously, any is quite flexible.

48
00:03:53.679 --> 00:03:58.371
You can just think of it as playing by
the same rules as regular JavaScript.

49
00:03:58.371 --> 00:04:02.350
Obviously, there are risks
around using any.

50
00:04:02.350 --> 00:04:07.143
This is clearly at runtime going to be
a number, but I'm reaching into it as

51
00:04:07.143 --> 00:04:11.879
if it's got many, many nested things and
they're not going to be there.

52
00:04:11.879 --> 00:04:13.880
This will result in a runtime error.

53
00:04:13.880 --> 00:04:18.779
Now I got this question earlier,
is it wrong to use any?

54
00:04:18.779 --> 00:04:22.898
Is there any time where it's
the appropriate thing to do?

55
00:04:22.898 --> 00:04:26.563
And my answer is yes, there are times
when it's absolutely appropriate.

56
00:04:26.563 --> 00:04:28.598
A good example is console.log.

57
00:04:28.598 --> 00:04:34.921
If we look at the type of console.log,
it has a rest parameter here.

58
00:04:34.921 --> 00:04:41.439
So it takes any number of arguments
you like, each of which is an any.

59
00:04:41.439 --> 00:04:46.062
This is appropriate because console.log
can log just about anything to

60
00:04:46.062 --> 00:04:46.979
the console.

61
00:04:46.979 --> 00:04:50.189
There's no reason to impose
additional constraints here.

62
00:04:50.189 --> 00:04:54.500
Any describes accurately what
you should be doing here.

63
00:04:54.500 --> 00:04:56.782
So it's the absolute right thing to use.

64
00:04:56.782 --> 00:04:59.806
This is not something that
should be tightened up.

65
00:04:59.806 --> 00:05:00.962
This is correct.

66
00:05:00.962 --> 00:05:03.750
All right, let's look at unknown.

67
00:05:03.750 --> 00:05:09.514
Just as with any,
you can see that I can put a number in it,

68
00:05:09.514 --> 00:05:16.986
a string, document, a function like
set timeout, seems a lot like any.

69
00:05:16.986 --> 00:05:19.920
But here's the key difference.

70
00:05:19.920 --> 00:05:25.829
Unknown can't be used unless
you narrow it, right?

71
00:05:25.829 --> 00:05:29.713
Unless you use a type guard
with it to check it out,

72
00:05:29.713 --> 00:05:33.149
to make sure that it's acceptable for use.

73
00:05:33.149 --> 00:05:38.526
So it's almost like it comes with
a warning label that says, you must verify

74
00:05:38.526 --> 00:05:43.920
that this is what you think it is before
you go ahead and do something with it.

75
00:05:43.920 --> 00:05:49.511
So in this case, you can see, yeah,
we can put any value into it that we like,

76
00:05:49.511 --> 00:05:53.577
but we can't reach in and
start accessing it directly.

77
00:05:53.577 --> 00:05:56.209
We must do something like this.

78
00:05:56.209 --> 00:06:00.946
So you see my unknown, right at the time
that we're checking it before we

79
00:06:00.946 --> 00:06:04.762
established that it could be a string,
it's an unknown.

80
00:06:04.762 --> 00:06:06.839
And then down here, it's a string.

81
00:06:06.839 --> 00:06:08.909
So we're free to use it as a string.

82
00:06:08.909 --> 00:06:14.809
And then here's another
condition where it's an unknown.

83
00:06:14.809 --> 00:06:18.483
But as soon as we make it into this
code block, hey, it's a number, and

84
00:06:18.483 --> 00:06:20.219
we're free to use it as a number.

85
00:06:20.219 --> 00:06:24.981
So it's as flexible as any in terms
of its ability to hold things,

86
00:06:24.981 --> 00:06:29.830
but it places an extra responsibility
on whoever uses this value to

87
00:06:29.830 --> 00:06:33.220
kind of check it out first
with the type guard.

88
00:06:33.220 --> 00:06:36.040
So those are the two top types.

89
00:06:36.040 --> 00:06:42.449
So practical uses for a top types.

90
00:06:42.449 --> 00:06:46.547
One key place where you will
make heavy use of this is if

91
00:06:46.547 --> 00:06:50.749
you convert a project from
JavaScript to TypeScript.

92
00:06:50.749 --> 00:06:54.549
I do not advise that you
go straight from untyped or

93
00:06:54.549 --> 00:06:59.434
dynamically typed JavaScript code and
then try in one big pass to

94
00:06:59.434 --> 00:07:04.141
convert everything perfectly,
to have really strong,

95
00:07:04.141 --> 00:07:09.321
I just used the strong word to
describe types, shouldn't do that.

96
00:07:09.321 --> 00:07:14.397
To make a very specific well
articulated constraints with types and

97
00:07:14.397 --> 00:07:20.999
just try to convert the whole thing in one
big code triage, that's dangerous, right?

98
00:07:20.999 --> 00:07:24.585
Your odds are you're gonna break
something cuz it's just a lot

99
00:07:24.585 --> 00:07:27.979
of potential to change behavior
while you're doing that.

100
00:07:27.979 --> 00:07:32.125
It's common to define some
reasonable types where it's easy,

101
00:07:32.125 --> 00:07:37.033
where it makes sense, and to leave a lot
of anys in there, and to sort of clean

102
00:07:37.033 --> 00:07:42.424
those up in successive passes as you sort
of tighten things up, tighten things up.

103
00:07:42.424 --> 00:07:49.019
So any is really useful for sort of
work in progress mid conversion states.

104
00:07:49.019 --> 00:07:54.089
And it's also useful where you frankly
just don't have any idea what's going on.

105
00:07:54.089 --> 00:07:59.149
Like you have no compile time
ability to verify things.

106
00:07:59.149 --> 00:08:04.013
An example would be you just
received a fetch response and

107
00:08:04.013 --> 00:08:06.249
you decoded it from JSON.

108
00:08:06.249 --> 00:08:11.036
And you might think you know what
it is based on the endpoint, but

109
00:08:11.036 --> 00:08:12.820
can you really be sure?

110
00:08:12.820 --> 00:08:16.677
What if that API goes down and
it starts sending you error messages?

111
00:08:16.677 --> 00:08:17.980
You might wanna verify that.

112
00:08:17.980 --> 00:08:20.716
That might be a great use for unknown,

113
00:08:20.716 --> 00:08:24.316
values received at runtime
from your data layer.

114
00:08:24.316 --> 00:08:27.347
This works really well with
discriminated unions by the way.

115
00:08:27.347 --> 00:08:30.853
Remember where we had that tuple
where there was the success and

116
00:08:30.853 --> 00:08:32.052
there was the error.

117
00:08:32.052 --> 00:08:35.661
So maybe you receive an API response and
on every API response,

118
00:08:35.661 --> 00:08:39.066
there's a little key where if
you see that property there,

119
00:08:39.066 --> 00:08:43.449
that's a strong signal that you know
what the rest of the object looks like.

120
00:08:43.449 --> 00:08:47.697
So you can receive it as an unknown,
check for the presence of the key.

121
00:08:47.697 --> 00:08:50.987
Okay, now we know what it is and
you have a nice type for that thing.

122
00:08:50.987 --> 00:08:53.470
It's a great thing to use for data layers.

