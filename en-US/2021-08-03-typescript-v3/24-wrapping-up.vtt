WEBVTT

1
00:00:00.350 --> 00:00:03.679
Just to recap all the ground
that we've covered today.

2
00:00:03.679 --> 00:00:07.060
We started with a little
introduction to TypeScript, and

3
00:00:07.060 --> 00:00:11.800
compiled our first TypeScript programmer,
saw the compiled result.

4
00:00:11.800 --> 00:00:13.860
We changed our module types.

5
00:00:13.860 --> 00:00:16.340
We changed our language level,
we saw the difference in output.

6
00:00:17.480 --> 00:00:21.550
We talked about variables,
values, objects, and arrays.

7
00:00:21.550 --> 00:00:25.454
A little bit about tuples, and
we learned about type annotations, and

8
00:00:25.454 --> 00:00:29.240
index signatures, ways to define
the types of collections of data.

9
00:00:30.650 --> 00:00:35.610
Then we moved on to talk a little
bit about theory for type systems.

10
00:00:35.610 --> 00:00:39.033
Different ways of categorizing
type systems, and

11
00:00:39.033 --> 00:00:43.659
a little bit of set theory to describe
union and intersection types.

12
00:00:44.850 --> 00:00:49.910
We gave our types names,
using interfaces and type aliases, and

13
00:00:49.910 --> 00:00:54.880
defined some recursive types that
we can use for any JSON value.

14
00:00:56.660 --> 00:00:59.265
Then, after talking about functions and
classes,

15
00:00:59.265 --> 00:01:02.710
my favorite part about functions
is those multiple function heads.

16
00:01:03.860 --> 00:01:06.670
We talked about top and bottom types.

17
00:01:06.670 --> 00:01:11.250
These are those extreme types that
can be anything at all or nothing.

18
00:01:12.510 --> 00:01:17.263
And within extreme types, we talked
about that cool example for exhaustive

19
00:01:17.263 --> 00:01:22.403
conditionals, where you can make sure
that you handle every possible scenario.

20
00:01:22.403 --> 00:01:25.667
And you kind of end up with no
pieces of the pie leftover,

21
00:01:25.667 --> 00:01:28.250
absolutely every scenario handled.

22
00:01:28.250 --> 00:01:32.534
And you have compiled time enforcement of
that, which makes it really easy as you

23
00:01:32.534 --> 00:01:36.640
introduce new possibilities into your
code base, they're caught for you.

24
00:01:38.170 --> 00:01:41.390
We built some user defined type guards and

25
00:01:41.390 --> 00:01:46.500
learned assertion type guards,
and conditional type guards.

26
00:01:46.500 --> 00:01:50.364
Talked a little bit about nullish values,
talked about generics,

27
00:01:50.364 --> 00:01:54.680
built up a little standard library for
working with dictionaries.

28
00:01:54.680 --> 00:01:59.020
And then finally, scopes and
constraints for type parameters.

29
00:01:59.020 --> 00:02:00.440
That is a lot of ground to cover.

30
00:02:00.440 --> 00:02:05.242
And that will put you in a great position
for taking intermediate TypeScript,

31
00:02:05.242 --> 00:02:09.360
where we're going to dig even
deeper into these topics.

32
00:02:09.360 --> 00:02:12.112
And now that we've conquered generics,

33
00:02:12.112 --> 00:02:15.500
we're ready to go with
some even cooler concepts.

34
00:02:16.710 --> 00:02:19.860
Thanks so much for coming today and
hope you had a good time.

35
00:02:19.860 --> 00:02:22.180
I hope you enjoyed the course.

36
00:02:22.180 --> 00:02:25.416
&gt;&gt; So
back to the user defined type course,

37
00:02:25.416 --> 00:02:28.565
do you remember that CarLike example?

38
00:02:28.565 --> 00:02:32.840
&gt;&gt; The car, sorry, let me go back to that.

39
00:02:34.270 --> 00:02:41.760
Type guards, and you wanted CarLike,
the assertion ones or the is one?

40
00:02:41.760 --> 00:02:48.838
&gt;&gt; It doesn't matter, I was wondering is
there some sort of a more deliberate wave.

41
00:02:48.838 --> 00:02:51.706
It's shaking for your object type,

42
00:02:51.706 --> 00:02:56.528
especially that something I
believe you'll find that most.

43
00:02:56.528 --> 00:03:02.730
It's a chaser, right,
you came across it more than you should.

44
00:03:02.730 --> 00:03:05.332
&gt;&gt; Yeah, so you're wondering are there,

45
00:03:05.332 --> 00:03:09.323
I think you're saying this seems
like a very low-level API.

46
00:03:09.323 --> 00:03:14.025
Are there higher level more declarative
ways to inspect an object to

47
00:03:14.025 --> 00:03:16.260
figure out what types are on it?

48
00:03:17.540 --> 00:03:21.530
&gt;&gt; Yes, maybe some sort of
a utility that's been around.

49
00:03:21.530 --> 00:03:25.530
&gt;&gt; There are those utilities,
and they do exist.

50
00:03:25.530 --> 00:03:27.370
Here's the trick though.

51
00:03:27.370 --> 00:03:29.990
Type checking at runtime is not free.

52
00:03:29.990 --> 00:03:34.541
And especially, if you're running
this code on a very hot path,

53
00:03:34.541 --> 00:03:37.120
like a performance sensitive path.

54
00:03:38.650 --> 00:03:43.326
You may not want to be doing too much
with a mystery library that may be

55
00:03:43.326 --> 00:03:45.390
doing some heavy things.

56
00:03:45.390 --> 00:03:50.640
It's kind of tricky to solve in
the general case, but they do exist.

57
00:03:50.640 --> 00:03:54.000
I'm just not prepared to
endorse any particular one.

58
00:03:54.000 --> 00:03:58.819
Cuz I'm really looking for simple and
performance for things like this.

59
00:04:00.780 --> 00:04:03.671
&gt;&gt; So what are your advice
exactly when it comes to this?

60
00:04:03.671 --> 00:04:06.540
Cuz I see a lot of repetitions in place.

61
00:04:06.540 --> 00:04:07.310
&gt;&gt; Yes.

62
00:04:08.450 --> 00:04:11.834
So my advice-
&gt;&gt; [INAUDIBLE] Is start to define a couple

63
00:04:11.834 --> 00:04:14.737
of fives and add some assertions, and

64
00:04:14.737 --> 00:04:18.600
type guard too is gonna
be like a massive chunk.

65
00:04:18.600 --> 00:04:20.496
&gt;&gt; It does get a bit messy.

66
00:04:20.496 --> 00:04:25.558
My advice if you're at all able to
do this is to push this problem

67
00:04:25.558 --> 00:04:30.344
into your API layer,
where effectively every one of your,

68
00:04:33.863 --> 00:04:37.433
We're talking about values
discovered at runtime really,

69
00:04:37.433 --> 00:04:40.793
that's often where you're
gonna be using type guards.

70
00:04:44.296 --> 00:04:47.244
That discriminated union thing where,

71
00:04:47.244 --> 00:04:53.220
I see that there's a property called kind,
and I see that there's this label on it.

72
00:04:53.220 --> 00:04:57.940
Once you can do that and you can say,
well, if I see this thing here,

73
00:04:57.940 --> 00:05:02.827
this c tag on it, I know that the whole
thing, I know what it's gonna be.

74
00:05:02.827 --> 00:05:05.060
That's a powerful idea.

75
00:05:05.060 --> 00:05:07.898
GraphQL has some support
around this as well,

76
00:05:07.898 --> 00:05:12.638
where based on the query you make and
some things that you can do at build time.

77
00:05:12.638 --> 00:05:16.507
You can have some pretty strong
guarantees given that it sort of

78
00:05:16.507 --> 00:05:21.810
one central definition of a type that ends
up both in your client and server code.

79
00:05:21.810 --> 00:05:24.430
That's also common approach.

80
00:05:24.430 --> 00:05:28.040
So anything where you have
a well structured convention,

81
00:05:28.040 --> 00:05:30.839
this kind of code ends
up being a lot cleaner,

82
00:05:30.839 --> 00:05:34.464
in that you have a few type
guards that are heavily reused.

83
00:05:34.464 --> 00:05:37.125
And they sort of end up being nested,
right?

84
00:05:37.125 --> 00:05:41.435
You could have a type guard that's,
is this a single record or a collection?

85
00:05:41.435 --> 00:05:43.551
Once you figure that out, okay, well,

86
00:05:43.551 --> 00:05:46.585
what's the type of this
item in the collection?

87
00:05:46.585 --> 00:05:49.285
And they sort of stack up in that way.

88
00:05:49.285 --> 00:05:50.137
Does that make sense?

89
00:05:52.403 --> 00:05:53.525
&gt;&gt; Yeah, thank you.

90
00:05:53.525 --> 00:05:55.599
&gt;&gt; There is one more I
wanna leave you with,

91
00:05:55.599 --> 00:05:57.743
it's my favorite type guard of all time.

92
00:06:02.316 --> 00:06:04.432
It's this one.

93
00:06:04.432 --> 00:06:07.079
This will be an intermediate course for
sure.

94
00:06:15.744 --> 00:06:17.623
We don't have to make it the assert.

95
00:06:22.960 --> 00:06:24.880
So, now we're mixing two things, right?

96
00:06:24.880 --> 00:06:27.801
It's a type guard that is generic.

97
00:06:36.088 --> 00:06:41.682
So, in this case,
what this lets us do let,

98
00:06:54.118 --> 00:06:55.160
Something like that.

99
00:06:55.160 --> 00:06:59.549
So you could say if (isdefined(x)).

100
00:07:01.508 --> 00:07:04.430
And you can see here, it's a number.

101
00:07:04.430 --> 00:07:06.863
So you can start to
make these type guards,

102
00:07:06.863 --> 00:07:09.750
involve type params
with these type guards.

103
00:07:09.750 --> 00:07:14.110
And effectively what we're doing is we're
saying, we're peeling away the undefined.

104
00:07:14.110 --> 00:07:18.050
This is why I don't wanna use
the definite assertion operator.

105
00:07:18.050 --> 00:07:19.982
It's because I can write this, and

106
00:07:19.982 --> 00:07:23.790
it's something that will
actually do the checking for me.

107
00:07:23.790 --> 00:07:29.410
And then it'll let me throw a meaningful
error instead of cannot find too fixed

108
00:07:29.410 --> 00:07:36.450
on undefined, some weird, just letting
it explode wherever it's gonna explode.

109
00:07:36.450 --> 00:07:40.290
But kind of getting clever with these
things is is often time well spent.

