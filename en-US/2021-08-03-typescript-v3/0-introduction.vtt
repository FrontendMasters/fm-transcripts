WEBVTT

1
00:00:00.070 --> 00:00:03.619
Welcome to TypeScript Fundamentals V3.

2
00:00:03.619 --> 00:00:08.812
My name is Mike North, and
I'm a senior staff engineer at LinkedIn.

3
00:00:08.812 --> 00:00:13.178
I work in a part of the company
called the developer productivity and

4
00:00:13.178 --> 00:00:17.938
happiness team, where I'm
an infrastructure user experience expert.

5
00:00:17.938 --> 00:00:22.735
As well as the company's lead for
TypeScript infrastructure and

6
00:00:22.735 --> 00:00:27.717
how we roll TypeScript out across
all of our JavaScript code bases.

7
00:00:27.717 --> 00:00:32.841
So we're gonna start with some real talk,
I can't make you a TypeScript

8
00:00:32.841 --> 00:00:37.469
expert at the end of a one day workshop,
it's just not possible.

9
00:00:37.469 --> 00:00:42.134
But what I can do is make sure that by
the end of today, you have a well formed

10
00:00:42.134 --> 00:00:46.299
mental model that will hold up
even when things get complicated.

11
00:00:46.299 --> 00:00:47.814
And then you can learn more and

12
00:00:47.814 --> 00:00:51.219
you can try these things out that
we're going to introduce today.

13
00:00:51.219 --> 00:00:55.234
And I can guarantee you that by
setting you on the right path,

14
00:00:55.234 --> 00:01:00.195
you will find it easier and easier to
take in that new information on your own

15
00:01:00.195 --> 00:01:03.221
as you continue your TypeScript adventure.

16
00:01:05.664 --> 00:01:09.278
So first,
let's talk about what TypeScript is.

17
00:01:09.278 --> 00:01:14.210
It's a syntactic superset of JavaScript,
meaning it sort of starts

18
00:01:14.210 --> 00:01:18.971
with all of the JavaScript syntax
you know as its starting point and

19
00:01:18.971 --> 00:01:21.960
then layers additional concepts on top.

20
00:01:23.100 --> 00:01:27.903
It's an open source project
maintained by Microsoft,

21
00:01:27.903 --> 00:01:32.510
and the goal is to add
types to JavaScript.

22
00:01:32.510 --> 00:01:37.497
So through the use of the compiler,
TypeScript compiles out to

23
00:01:37.497 --> 00:01:42.010
readable JavaScript, and
it comes in three parts.

24
00:01:42.010 --> 00:01:44.825
There's the programming language,
the language server,

25
00:01:44.825 --> 00:01:48.645
and that's a piece of software that's
sort of behind your editing environment.

26
00:01:48.645 --> 00:01:51.414
It feeds your editor like VSCode,

27
00:01:51.414 --> 00:01:56.004
all that great information
that powers autocompletes.

28
00:01:56.004 --> 00:02:00.456
And then there's the compiler, and the
compiler is what performs that analysis on

29
00:02:00.456 --> 00:02:04.094
your code base and makes sure
everything lines up the way it should.

30
00:02:06.179 --> 00:02:09.161
TypeScript is incredibly popular.

31
00:02:09.161 --> 00:02:13.276
So this is the third version of the
TypeScript Fundamentals course that I'm

32
00:02:13.276 --> 00:02:15.087
teaching for Frontend Masters.

33
00:02:15.087 --> 00:02:19.986
And 2019, this is where I
taught the first version, and

34
00:02:19.986 --> 00:02:22.590
I brought out a chart like this.

35
00:02:22.590 --> 00:02:28.014
And I was really proud to be able to show,
look, React's a very popular library and

36
00:02:28.014 --> 00:02:31.903
TypeScript is on par with React,
look, it's so popular.

37
00:02:31.903 --> 00:02:34.353
That trend has obviously changed,

38
00:02:34.353 --> 00:02:38.530
React looks sort of like it's
been left in the dust here.

39
00:02:38.530 --> 00:02:42.421
I mean, these are two completely
different projects but

40
00:02:42.421 --> 00:02:47.690
just in terms of the things we think
about with ubiquitous pieces of tooling,

41
00:02:47.690 --> 00:02:52.980
things that are sort of always in your
Node modules for one reason or another.

42
00:02:52.980 --> 00:02:56.041
TypeScript is one of those
things that is increasingly

43
00:02:56.041 --> 00:03:00.790
part of what you're already doing,
even if you're not using it directly.

44
00:03:00.790 --> 00:03:05.023
And to me, it's starting to
look like exponential growth,

45
00:03:05.023 --> 00:03:07.100
not even linear growth here.

46
00:03:07.100 --> 00:03:13.486
So, everybody is using this,
people are really excited about it, why?

47
00:03:13.486 --> 00:03:19.148
I'm gonna give you a couple reasons
why you might care about TypeScript,

48
00:03:19.148 --> 00:03:23.820
why it might be an appealing thing for
you to look into.

49
00:03:23.820 --> 00:03:27.067
And we're obviously gonna learn
more about this throughout the day,

50
00:03:27.067 --> 00:03:29.280
you'll have many reasons
by the end of the day.

51
00:03:30.730 --> 00:03:36.320
First, it allows you as a code author to
leave more of your intent on the page.

52
00:03:36.320 --> 00:03:42.150
So if we look at a function like this that
you could find in a regular JavaScript

53
00:03:42.150 --> 00:03:47.817
application, this, it sort of is
a function that just runs a + b, right?

54
00:03:47.817 --> 00:03:52.702
This could be string concatenation,
it could be numeric addition,

55
00:03:52.702 --> 00:03:57.502
I mean the function name in this case
gives us sort of a clue here, but

56
00:03:57.502 --> 00:04:01.143
if you use this to combine strings,
it would work.

57
00:04:01.143 --> 00:04:04.030
Imagine in the future if
somebody came along and

58
00:04:04.030 --> 00:04:08.723
made what they thought was a non-breaking
change and they add the ability for

59
00:04:08.723 --> 00:04:12.062
a third upper end to be part
of what's happening here.

60
00:04:12.062 --> 00:04:16.326
If you were using this with string
concatenation, you'd end up with zeros at

61
00:04:16.326 --> 00:04:20.277
the end of every string that you're
combining through this function.

62
00:04:20.277 --> 00:04:24.665
So intent matters here, and whenever
there are multiple interpretations

63
00:04:24.665 --> 00:04:27.938
of what are the constraints,
and what's going on, and

64
00:04:27.938 --> 00:04:31.784
what was this designed to do,
you're kinda asking for trouble.

65
00:04:31.784 --> 00:04:36.629
In the TypeScript world,
we can have something like this where we

66
00:04:36.629 --> 00:04:41.488
say a is a number, b is a number,
this function returns a number.

67
00:04:41.488 --> 00:04:45.854
And even though theoretically a + b
could be used to combine strings,

68
00:04:45.854 --> 00:04:49.414
it's very clear what the author
intended for this to do.

69
00:04:49.414 --> 00:04:55.006
And not only is the code more clear
as we read it, but we are alerted

70
00:04:55.006 --> 00:05:01.770
to any use of add that deviates from
what the author originally intended.

71
00:05:01.770 --> 00:05:04.269
And this little pop up here,
this error message,

72
00:05:04.269 --> 00:05:08.330
is the kind of thing you would see right
in your editing environment like VSCode.

73
00:05:09.990 --> 00:05:15.366
So baking in more of that intent
is a huge win for TypeScript.

74
00:05:15.366 --> 00:05:21.008
Reason number two of many,
TypeScript has the potential to allow you

75
00:05:21.008 --> 00:05:27.717
to move some kinds of errors from runtime
where they affect users to compile time,

76
00:05:27.717 --> 00:05:32.570
which is maybe before you
even open a pull request.

77
00:05:32.570 --> 00:05:37.276
Examples of these kinds of errors that you
can catch include values that might or

78
00:05:37.276 --> 00:05:38.480
might not be there.

79
00:05:38.480 --> 00:05:42.669
Incomplete refactoring where maybe
you should have changed something in

80
00:05:42.669 --> 00:05:44.839
seven places but you only caught six.

81
00:05:44.839 --> 00:05:49.167
And then internal contracts
within your code base.

82
00:05:49.167 --> 00:05:53.602
Maybe it's the properties you thought you
were passing to a component, right, and

83
00:05:53.602 --> 00:05:56.101
now it requires that you
give it something new,

84
00:05:56.101 --> 00:05:58.805
TypeScript will help you
catch that kind of thing.

85
00:05:58.805 --> 00:06:02.093
Finally, TypeScript serves
as the foundation for

86
00:06:02.093 --> 00:06:04.467
a great code authoring experience.

87
00:06:04.467 --> 00:06:08.459
And I am of course referring to not
just the validation of making sure

88
00:06:08.459 --> 00:06:13.291
we're passing functions the right things,
but this great auto-complete where

89
00:06:13.291 --> 00:06:18.440
we sort of get code documentation brought
right into our editing environment.

90
00:06:18.440 --> 00:06:20.364
Really, really cool stuff and

91
00:06:20.364 --> 00:06:24.582
in my opinion this is sort of catching
up with the rest of the software

92
00:06:24.582 --> 00:06:29.394
engineering world where we finally get
a rich editing environment instead of

93
00:06:29.394 --> 00:06:33.778
basically a lightweight text editor
that does syntax highlighting.

94
00:06:33.778 --> 00:06:39.713
That's kind of where the JavaScript
world has been for too long.

95
00:06:41.685 --> 00:06:47.039
So, the last time I taught this workshop,
this is TypeScript Fundamentals V2,

96
00:06:47.039 --> 00:06:51.633
we spent a lot of time uncommenting code,
looking at small examples.

97
00:06:51.633 --> 00:06:54.807
Inspecting tooltips to
understand what's going on,

98
00:06:54.807 --> 00:06:59.855
how is TypeScript understanding our code,
we have leveled things up for this course.

99
00:06:59.855 --> 00:07:04.823
So the only things you're going to need
in order to follow along are this website

100
00:07:04.823 --> 00:07:09.285
that we're looking at right now and
the official TypeScript website.

101
00:07:09.285 --> 00:07:13.653
You won't even need to crack
open your code editor, why?

102
00:07:13.653 --> 00:07:18.817
We've brought VSCode into the browser, so
we're gonna be able to see examples and

103
00:07:18.817 --> 00:07:23.484
get hands-on without having to set
anything up, some really cool stuff.

104
00:07:25.094 --> 00:07:28.997
Let's look at how we're going to
spend our time during this course.

105
00:07:28.997 --> 00:07:34.044
First, we will look at compiling
our first TypeScript program and

106
00:07:34.044 --> 00:07:38.202
we will talk about variables,
objects, and arrays.

107
00:07:38.202 --> 00:07:41.496
We'll take a quick break, and
then we're going to get into some theory.

108
00:07:41.496 --> 00:07:46.545
And we'll talk about how TypeScript's type
system is different from what you may

109
00:07:46.545 --> 00:07:51.463
have seen in Java, or C#, basically
anywhere else in the programming world.

110
00:07:51.463 --> 00:07:55.762
TypeScript is sort of
a unique beast in some ways.

111
00:07:55.762 --> 00:08:00.299
After lunch, we're going to
collaboratively work together to define

112
00:08:00.299 --> 00:08:02.499
some of our own type information.

113
00:08:02.499 --> 00:08:07.424
And after tackling some of the last
core concepts in the JavaScript world,

114
00:08:07.424 --> 00:08:12.677
functions and classes, we'll talk about
these top and bottom types, right?

115
00:08:12.677 --> 00:08:15.950
These are things that can hold anything or
nothing.

116
00:08:15.950 --> 00:08:20.273
Sounds abstract but
they're very, very useful.

117
00:08:20.273 --> 00:08:24.712
Finally, towards the end of the day,
we're gonna slow things way down and

118
00:08:24.712 --> 00:08:26.896
tackle one of the most mysterious and

119
00:08:26.896 --> 00:08:30.507
abstract aspects of the TypeScript
programming language.

120
00:08:30.507 --> 00:08:37.835
And that is generics, or
defining types in terms of other types.

121
00:08:37.835 --> 00:08:42.587
This is one of the great conceptual
walls I can help you get over,

122
00:08:42.587 --> 00:08:47.515
and generally one of the biggest
sticking points that people hit as

123
00:08:47.515 --> 00:08:52.547
they're trying to start working
with this programming language.

124
00:08:52.547 --> 00:08:57.093
Here's a question, in a design system
how can I support consuming apps

125
00:08:57.093 --> 00:09:00.653
that don't use TypeScript as
well as those that do, and

126
00:09:00.653 --> 00:09:05.480
do I need to provide type
definitions as well as prototypes?

127
00:09:05.480 --> 00:09:10.817
Well, this is one of the great
aspects of TypeScript, one of the core

128
00:09:10.817 --> 00:09:17.080
principles is that it needs to be able
to work with regular JavaScript code.

129
00:09:17.080 --> 00:09:21.339
So even if your consumers
are using regular JavaScript,

130
00:09:21.339 --> 00:09:26.130
they'll still get a lot of
the benefits of that type information

131
00:09:26.130 --> 00:09:30.493
that comes from a library
written in TypeScript, right?

132
00:09:30.493 --> 00:09:35.740
So if you write the TypeScript, all of
your users will get that better developer

133
00:09:35.740 --> 00:09:41.290
experience to varying degrees but they're
all going to benefit to some degree.

134
00:09:41.290 --> 00:09:43.080
A very, very good question.

135
00:09:43.080 --> 00:09:45.789
We'll learn more about that very quickly,

136
00:09:45.789 --> 00:09:49.440
actually, in the next
chapter of the course.

137
00:09:49.440 --> 00:09:52.699
So Nita asks are there any
open source projects for

138
00:09:52.699 --> 00:09:57.520
beginners where we can apply and
practice TypeScript after this course?

139
00:09:58.630 --> 00:10:02.756
I'm gonna have to look back on that one,
I'm sure there are some,

140
00:10:02.756 --> 00:10:06.680
one I can tell you for
sure is the TypeScript website.

141
00:10:06.680 --> 00:10:11.625
So there are a lot of issues on the
TypeScript website that are marked as good

142
00:10:11.625 --> 00:10:17.320
for new contributors, and by its very
nature, it has a lot of small examples.

143
00:10:17.320 --> 00:10:20.775
And as people who are just
learning the language,

144
00:10:20.775 --> 00:10:26.368
that's kind of a superpower in that case
where you can use your lack of experience

145
00:10:26.368 --> 00:10:31.153
in this specific area to speak to
what's confusing and what's not.

146
00:10:31.153 --> 00:10:33.920
And you can really help
make the documentation,

147
00:10:33.920 --> 00:10:38.794
the little small projects that are part of
that TypeScript handbook and the website.

148
00:10:38.794 --> 00:10:41.565
You can make those a little bit better so
that they work for

149
00:10:41.565 --> 00:10:44.183
you because you're the intended audience,
right?

150
00:10:44.183 --> 00:10:48.733
So we have another question, are there
any plans to introduce aspects of

151
00:10:48.733 --> 00:10:52.326
TypeScript into the JavaScript
programming language?

152
00:10:52.326 --> 00:10:56.195
I would have to say, no, but don't worry.

153
00:10:56.195 --> 00:11:01.847
So JavaScript is kind of strange in
that code that we wrote in 1995,

154
00:11:01.847 --> 00:11:06.194
1992, it still has to run as JavaScript,
right?

155
00:11:06.194 --> 00:11:09.918
The Internet has to remain
backwards compatible.

156
00:11:09.918 --> 00:11:14.928
And for that reason,
it's unlikely that we'll shift from sort

157
00:11:14.928 --> 00:11:20.516
of a dynamically typed or duck typed
model to a statically typed model.

158
00:11:20.516 --> 00:11:25.783
So don't expect anytime soon for
types to become

159
00:11:25.783 --> 00:11:31.182
part of what most people
can run in their browser.

160
00:11:31.182 --> 00:11:36.410
Now, however,
[LAUGH] we do see examples where

161
00:11:36.410 --> 00:11:42.454
something is sort of piloted
in TypeScript, right?

162
00:11:42.454 --> 00:11:46.809
TypeScript adds a feature by itself and
then those become part of the JavaScript

163
00:11:46.809 --> 00:11:50.002
programming language but
it doesn't include the types.

164
00:11:50.002 --> 00:11:56.522
Examples of this include decorators, which
are likely to be part of JavaScript soon.

165
00:11:56.522 --> 00:12:00.148
Private fields, so
TypeScript has this concept of

166
00:12:00.148 --> 00:12:03.703
class fields that only
that class itself can see.

167
00:12:03.703 --> 00:12:05.837
Well, that's now part of JavaScript.

168
00:12:05.837 --> 00:12:12.483
So there are a few situations where,
aside from the typing aspect of things,

169
00:12:12.483 --> 00:12:18.839
language features sort of prove
themselves out in the TypeScript world.

170
00:12:18.839 --> 00:12:23.528
And then that allows TC39, the standards
body that decides what is part of

171
00:12:23.528 --> 00:12:26.530
JavaScript, right,
it allows them to see hey,

172
00:12:26.530 --> 00:12:29.993
there are a lot of apps that
got a lot of value out of this.

173
00:12:29.993 --> 00:12:35.167
How can we bring this to everybody, people
who write JavaScript and TypeScript?

174
00:12:35.167 --> 00:12:40.412
And then sort of we merge everything
together, right, where we make sure that

175
00:12:40.412 --> 00:12:46.480
once it's standardized, everyone can
make use of those kinds of features.

176
00:12:46.480 --> 00:12:48.475
Well, let's jump in and

177
00:12:48.475 --> 00:12:53.234
look at how we might compile
our first TypeScript program.

178
00:12:53.234 --> 00:12:56.871
Now, if you wanted to,
you could check out this repo,

179
00:12:56.871 --> 00:13:01.675
if you click Edit on GitHub,
it'll take you to a page in this repo.

180
00:13:01.675 --> 00:13:03.150
I would encourage you not to for

181
00:13:03.150 --> 00:13:06.217
this video course because we're
gonna move kinda quickly, and

182
00:13:06.217 --> 00:13:10.045
I'm gonna show you everything you would
see if you were to compile it yourself.

