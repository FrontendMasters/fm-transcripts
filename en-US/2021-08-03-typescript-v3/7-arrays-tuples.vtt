WEBVTT

1
00:00:00.422 --> 00:00:02.363
Let's talk about arrays.

2
00:00:02.363 --> 00:00:04.757
So we've talked a little
bit about object types.

3
00:00:04.757 --> 00:00:09.178
Obviously, arrays are the other main
type of collection that we work with

4
00:00:09.178 --> 00:00:10.189
in JavaScript.

5
00:00:10.189 --> 00:00:16.445
And sort of key value storage
we have positional storage.

6
00:00:16.445 --> 00:00:21.520
So, typically, for at least simple
types of arrays, all we have

7
00:00:21.520 --> 00:00:27.540
to do is add a pair of square brackets
after the type of the member of the array.

8
00:00:27.540 --> 00:00:29.409
So this would be an array of strings.

9
00:00:29.409 --> 00:00:31.440
And you see the inference works here,

10
00:00:31.440 --> 00:00:35.770
just as we would hope where we don't have
to explicitly write a type annotation.

11
00:00:35.770 --> 00:00:38.709
TypeScript understands what's going on.

12
00:00:38.709 --> 00:00:44.738
We could use our object type here as
well to say we have an array of cars and

13
00:00:44.738 --> 00:00:47.869
we could start with one car in there.

14
00:00:47.869 --> 00:00:52.028
So this you can think of it as
like this is just as much a type,

15
00:00:52.028 --> 00:00:56.709
as the word string is a type and
it can be used in all the same places.

16
00:00:58.570 --> 00:01:01.140
So that's simple arrays.

17
00:01:01.140 --> 00:01:02.860
Let's talk about tuples.

18
00:01:02.860 --> 00:01:04.653
So tuples are, I mean,

19
00:01:04.653 --> 00:01:09.699
you could have used tuples in
regular JavaScript if you wanted to.

20
00:01:09.699 --> 00:01:11.489
There's no special treatment.

21
00:01:11.489 --> 00:01:13.334
It's more like just a pattern.

22
00:01:13.334 --> 00:01:22.040
Where you have some meaning of positional
ordering of different pieces of data.

23
00:01:22.040 --> 00:01:26.189
So if we wanted to store our 2002,
Toyota Corolla,

24
00:01:26.189 --> 00:01:31.311
we could just have a convention that says,
the first member the first

25
00:01:31.311 --> 00:01:37.080
element of the tuple is the year followed
by the make, followed by the model.

26
00:01:37.080 --> 00:01:38.790
So we could store it like this.

27
00:01:38.790 --> 00:01:43.431
And then this makes destructured
assignment really nice because we can

28
00:01:43.431 --> 00:01:47.779
then pull out the individual little
parts of this compound value.

29
00:01:47.779 --> 00:01:53.430
And do something interesting
with your making model.

30
00:01:53.430 --> 00:01:58.860
So, unfortunately, inference is
not going to be our friend here.

31
00:01:58.860 --> 00:02:04.449
And again, we're back to
the theme of TypeScript making.

32
00:02:04.449 --> 00:02:08.867
We're trying to make a reasonable and
safe assumption,

33
00:02:08.867 --> 00:02:12.370
that will stay out of our
way most of the time.

34
00:02:12.370 --> 00:02:17.665
And in this case, it's decided that
what we're trying to do is create

35
00:02:17.665 --> 00:02:23.790
a mixed array of arbitrary length that
contains some mix of strings and numbers.

36
00:02:23.790 --> 00:02:30.030
And that's gonna be a problem for us, why?

37
00:02:30.030 --> 00:02:34.045
Well we could add an additional element,
right?

38
00:02:34.045 --> 00:02:37.810
Like this is a sedan versus a coupe.

39
00:02:37.810 --> 00:02:40.070
The year is not in the right place, right?

40
00:02:40.070 --> 00:02:44.780
The year should be the first element and
this is in the second position here.

41
00:02:44.780 --> 00:02:51.269
So it's just not describing things
as tightly as we really want.

42
00:02:51.269 --> 00:02:54.029
I invite you to think about this question.

43
00:02:54.029 --> 00:02:56.194
What do you want most of the time?

44
00:02:56.194 --> 00:02:59.333
So sometimes we return an array
that has two things in it and

45
00:02:59.333 --> 00:03:03.190
it's always two things and
there's always a number and then a string.

46
00:03:03.190 --> 00:03:07.715
And other times we use
arrays of arbitrary length.

47
00:03:07.715 --> 00:03:12.714
So show of hands, who uses arrays as
like arbitrary length collections

48
00:03:12.714 --> 00:03:15.895
more often than like,
just a pair of things?

49
00:03:15.895 --> 00:03:17.054
Like I know I do.

50
00:03:17.054 --> 00:03:21.136
And in the chat,
you can just type y or n, yes or no.

51
00:03:21.136 --> 00:03:22.604
Yeah, I see some hands up.

52
00:03:22.604 --> 00:03:28.930
So TypeScript is designing around this.

53
00:03:28.930 --> 00:03:33.211
They don't want to mess with
your regular array use case.

54
00:03:33.211 --> 00:03:38.184
And this is not a big problem, but all
it means is that you're going to have to

55
00:03:38.184 --> 00:03:42.792
explicitly state when you intend for
an array to be treated as a tuple.

56
00:03:42.792 --> 00:03:46.810
And you're gonna just need to define
a type annotation in that case.

57
00:03:46.810 --> 00:03:49.871
Again, it's running with
the theme of type strip trying to

58
00:03:49.871 --> 00:03:52.640
stay out of your way while
providing you with safety.

59
00:03:55.340 --> 00:03:58.340
And here is what that
tuple might look like.

60
00:03:58.340 --> 00:04:04.269
So within the square brackets,
we're simply indicating

61
00:04:04.269 --> 00:04:10.570
with each position what type of
value we expect to find there.

62
00:04:10.570 --> 00:04:13.052
In this case, we're being shown that or

63
00:04:13.052 --> 00:04:17.944
being alerted to the fact that two things
seem to be out of place, TypeScripts,

64
00:04:17.944 --> 00:04:21.169
not happy with the first or
the second element here.

65
00:04:21.169 --> 00:04:25.398
And that's because they need to be
switched in terms of position and

66
00:04:25.398 --> 00:04:30.460
then here we're seeing that source has
4 elements, the target only allows 3.

67
00:04:30.460 --> 00:04:35.459
It's basically saying the right hand
side has 4 things on the left hand side,

68
00:04:35.459 --> 00:04:38.879
you have my car and
you told me I should have 3 things.

69
00:04:38.879 --> 00:04:42.800
Therefore I object, right?

70
00:04:42.800 --> 00:04:44.890
So this is how you define tuples.

71
00:04:44.890 --> 00:04:50.690
They're, really useful in cases where
you want to return multiple things.

72
00:04:50.690 --> 00:04:55.574
But maybe it's not a type that's so
formalized that you wanna store things

73
00:04:55.574 --> 00:05:00.630
under property keys, like often,
maybe for form validation case, right?

74
00:05:00.630 --> 00:05:01.930
I don't want to throw errors.

75
00:05:01.930 --> 00:05:03.980
I kind of want to return errors.

76
00:05:03.980 --> 00:05:07.507
I'll return a tuple that
has in the first position,

77
00:05:07.507 --> 00:05:10.160
a string that's like success or okay.

78
00:05:10.160 --> 00:05:15.194
And then data, or
the first position it'll be like error and

79
00:05:15.194 --> 00:05:17.571
then followed by the error.

80
00:05:17.571 --> 00:05:23.180
But this is a pattern you see often
in languages like Python or Elixir.

81
00:05:23.180 --> 00:05:25.529
Where you return these things?

82
00:05:28.370 --> 00:05:32.680
So, you do want to be careful here and

83
00:05:32.680 --> 00:05:38.110
TypeScript 4.3 it's the latest release.

84
00:05:38.110 --> 00:05:42.633
So I'm leaving this immortalizing
this comment saying that,

85
00:05:42.633 --> 00:05:47.939
something might happen in the future,
but today there are limitations.

86
00:05:47.939 --> 00:05:50.894
There is not a whole lot of support for

87
00:05:50.894 --> 00:05:54.719
stopping you from treating
this like an array.

88
00:05:54.719 --> 00:06:00.197
So in this case,
you can see that during assignment,

89
00:06:00.197 --> 00:06:04.960
we get the error messages
we would hope to get.

90
00:06:04.960 --> 00:06:09.079
But in this case, you can see that
we start with a two element tuple.

91
00:06:09.079 --> 00:06:12.517
We can push the third one in,
we can pop them all out and

92
00:06:12.517 --> 00:06:16.430
TypeScript is not going to stop
us from doing anything here.

93
00:06:16.430 --> 00:06:22.180
I can give you a hypothesis as to
why TypeScript letting us do this.

94
00:06:22.180 --> 00:06:26.998
And it's because there is no
type equivalence check on

95
00:06:26.998 --> 00:06:31.509
num pair that happens when
we invoke methods on it.

96
00:06:31.509 --> 00:06:38.289
There's no concept in TypeScript yet
of like, I'm calling this thing push.

97
00:06:38.289 --> 00:06:43.089
Therefore, the thing that I was
invoking it on, like numb pair,

98
00:06:43.089 --> 00:06:45.110
it's type should change.

99
00:06:45.110 --> 00:06:49.800
There's no concept like
that in the language yet.

100
00:06:49.800 --> 00:06:55.656
So you have to be aware that you only
get that validation on assignment and

101
00:06:55.656 --> 00:07:00.456
you can still shoot yourself in
the foot by messing with your

102
00:07:00.456 --> 00:07:02.570
tuple using push and pop.

103
00:07:06.050 --> 00:07:10.639
And Luis points out there's a proposal for
real records and tuples and JS.

104
00:07:12.180 --> 00:07:14.176
That's, great.

105
00:07:14.176 --> 00:07:16.500
There are a lot of proposals for
things in JS.

106
00:07:16.500 --> 00:07:22.506
So I wouldn't wanna represent that
this is coming or even likely,

107
00:07:22.506 --> 00:07:27.990
until these proposals advance
to like at least stage three.

108
00:07:27.990 --> 00:07:32.874
Seems like the kind of thing that might
work though cuz it's to be reasonably

109
00:07:32.874 --> 00:07:33.799
performant.

110
00:07:33.799 --> 00:07:38.279
All right, and Niche has a question
that I need to read for a moment.

111
00:07:38.279 --> 00:07:42.599
Okay, I'm just gonna sort of
boil that question down and

112
00:07:42.599 --> 00:07:47.279
Niche asks a question about is
the JavaScript community, and

113
00:07:47.279 --> 00:07:53.053
really it's like TC 39, the committee
that decides what JavaScript is.

114
00:07:53.053 --> 00:07:57.711
Are they going to make JavaScript
a statically typed language?

115
00:07:57.711 --> 00:08:00.540
I think it's extremely unlikely.

116
00:08:00.540 --> 00:08:08.150
I'm gonna say less than 1% chance,
probably much less.

117
00:08:08.150 --> 00:08:11.534
And the reason is, this works pretty well,

118
00:08:11.534 --> 00:08:15.290
having sort of JavaScript
be a compiled target.

119
00:08:15.290 --> 00:08:20.781
Now, what's more likely to happen is
something around WebAssembly where

120
00:08:20.781 --> 00:08:26.110
you have other typed languages that
compile out to WebAssembly bundle.

121
00:08:26.110 --> 00:08:29.414
And maybe that includes
some runtime type checking.

122
00:08:29.414 --> 00:08:37.199
But remember this runtime type
checking does not come for free.

123
00:08:37.199 --> 00:08:41.569
And we still have a lot of
JavaScript to run in the world.

124
00:08:41.569 --> 00:08:47.070
So I do not expect types to be
added to JavaScript directly.

125
00:08:47.070 --> 00:08:50.140
But that shouldn't get in your
way because you can use this and

126
00:08:50.140 --> 00:08:51.980
treat JavaScript as a build target.

