WEBVTT

1
00:00:00.460 --> 00:00:07.300
Interfaces and Type Aliases are a way you
can give a friendly name to your types.

2
00:00:07.300 --> 00:00:11.990
Remember, we're still operating
within a structural type system here.

3
00:00:11.990 --> 00:00:16.841
So the fact that you call your interface,
car, or fruit or whatever it is,

4
00:00:16.841 --> 00:00:21.384
that's for you, and other people
that contribute to your code base,

5
00:00:21.384 --> 00:00:23.235
it's just a friendly name.

6
00:00:25.414 --> 00:00:29.989
In many cases, you're going to be
able to be free to choose whether

7
00:00:29.989 --> 00:00:33.650
you wish to use an interface,
or a type alias.

8
00:00:33.650 --> 00:00:36.305
So we're first gonna talk
about type aliases because

9
00:00:36.305 --> 00:00:38.890
they're the easier of the two concepts.

10
00:00:38.890 --> 00:00:41.290
Then we'll talk about interfaces.

11
00:00:41.290 --> 00:00:45.344
In particular, we're going to talk
a little bit about how they work with

12
00:00:45.344 --> 00:00:48.440
classes and
how they work with inheritance.

13
00:00:48.440 --> 00:00:53.670
We'll talk about what it means to say,
interfaces are open in TypeScript.

14
00:00:53.670 --> 00:00:58.470
And then finally, I'm gonna give
you a little guide about what

15
00:00:58.470 --> 00:01:03.271
are the cases where I do have
an opinion about which one you use,

16
00:01:03.271 --> 00:01:06.940
and finally, defining recursive types.

17
00:01:06.940 --> 00:01:12.459
After this, we're gonna do our
first collaborative exercise and

18
00:01:12.459 --> 00:01:16.510
build types that describe
any valid JSON value.

19
00:01:17.770 --> 00:01:19.870
We're gonna write some
code until the tests pass.

20
00:01:21.220 --> 00:01:22.360
So let's get to it.

21
00:01:23.520 --> 00:01:25.040
Type aliases.

22
00:01:25.040 --> 00:01:28.915
So, we've dealt with types
that look like this,

23
00:01:28.915 --> 00:01:32.780
be they a piece of user information or
a car.

24
00:01:32.780 --> 00:01:35.320
Colon and then a bunch of stuff.

25
00:01:35.320 --> 00:01:38.040
And you can imagine I'm
sure you don't have to

26
00:01:38.040 --> 00:01:40.898
imagine too hard that as we add a third,
fourth,

27
00:01:40.898 --> 00:01:45.880
fifth, sixth property to this,
it starts to get very, very cumbersome.

28
00:01:45.880 --> 00:01:49.835
You're gonna end up making a spelling
error or if you wanna add one more

29
00:01:49.835 --> 00:01:53.521
thing to this, maybe you have to
update seven different places,

30
00:01:53.521 --> 00:01:55.750
it's just gonna become a lot, right?

31
00:01:56.830 --> 00:02:00.110
So, Type aliases help with this.

32
00:02:01.480 --> 00:02:02.870
Three things they do for us.

33
00:02:02.870 --> 00:02:07.924
They allow us to give our type a more
meaningful name, something that is

34
00:02:07.924 --> 00:02:12.990
semantic, right, where the name of
the thing describes its purpose.

35
00:02:14.160 --> 00:02:19.289
We're going to be able to declare a type
alias in a single place and imported and

36
00:02:19.289 --> 00:02:24.029
exported it just as if it were a value
the same way we would import an export

37
00:02:24.029 --> 00:02:29.183
functions or constants or anything like
that from other JavaScript modules.

38
00:02:29.183 --> 00:02:31.592
So we can centrally define at once and

39
00:02:31.592 --> 00:02:35.490
refer to it in a bunch of
different places, which is great.

40
00:02:35.490 --> 00:02:38.927
That's gonna make our lives much
easier as things get more complicated.

41
00:02:41.175 --> 00:02:45.200
So, this is the first multifile
example I'm showing you.

42
00:02:45.200 --> 00:02:49.140
Please just trust that imports and
exports work reasonably well.

43
00:02:49.140 --> 00:02:52.019
So this is like a hypothetical filename.

44
00:02:52.019 --> 00:02:54.650
Here's an export from the file name.

45
00:02:54.650 --> 00:02:56.350
And then you can see
it's imported down here.

46
00:02:57.470 --> 00:03:00.100
And the type information
does sort of flow through.

47
00:03:01.360 --> 00:03:06.043
Here you can see that instead of
just to saying I have this type and

48
00:03:06.043 --> 00:03:11.337
using this for every variable,
every function parameter I care about,

49
00:03:11.337 --> 00:03:15.610
we're saying,
I'm gonna create an alias for this type.

50
00:03:15.610 --> 00:03:17.920
So I'm gonna use this type keyword.

51
00:03:17.920 --> 00:03:19.830
I'm gonna give my alias a name.

52
00:03:19.830 --> 00:03:26.320
And then we're gonna set it
equal to some type information.

53
00:03:26.320 --> 00:03:28.670
And it's important to understand
a couple things here.

54
00:03:28.670 --> 00:03:34.114
One, this is a very rare situation
where we can see type information

55
00:03:34.114 --> 00:03:39.360
appearing on the right hand
side of an assignment operator.

56
00:03:39.360 --> 00:03:40.760
Usually it's all on the left.

57
00:03:42.630 --> 00:03:46.339
Almost always it's all on the left, right?

58
00:03:46.339 --> 00:03:53.080
The second thing this declaration
we're making, this user contact info.

59
00:03:53.080 --> 00:03:56.400
This will disappear as part
of your build process.

60
00:03:56.400 --> 00:03:58.330
It'll just compile straight out.

61
00:04:00.660 --> 00:04:03.230
So it doesn't add any asset size or
anything like that.

62
00:04:05.740 --> 00:04:10.201
Alright, so this is how it's defined and
we can export it just as if it were,

63
00:04:10.201 --> 00:04:11.965
function or something else.

64
00:04:11.965 --> 00:04:14.380
So let's look at how we can use it.

65
00:04:14.380 --> 00:04:15.840
So we import it.

66
00:04:15.840 --> 00:04:21.370
And then we can use it in place of
explicitly stating the type itself.

67
00:04:21.370 --> 00:04:23.660
And we could use this in a bunch of
different functions in this file.

68
00:04:25.260 --> 00:04:27.070
So we're really just giving a Type a name.

69
00:04:27.070 --> 00:04:27.850
That's all in it.

70
00:04:27.850 --> 00:04:30.000
That's why they call it a type alias.

71
00:04:30.000 --> 00:04:33.990
And you can use a type alias for
any type you wish to define,

72
00:04:33.990 --> 00:04:38.900
there are really no limitations
beyond what TypeScript itself can do.

73
00:04:40.050 --> 00:04:45.283
I'm just simply making the point here
that we don't need things to be labelled

74
00:04:45.283 --> 00:04:50.464
with this specific type, we're just
describing a structure here, right?

75
00:04:50.464 --> 00:04:55.880
User contact info, anything that has
the right properties will make this happy.

76
00:04:57.010 --> 00:05:01.310
So here's an example of something that
it does have this access property.

77
00:05:01.310 --> 00:05:05.641
We're storing it as a variable, so it's
fine, but it's totally fine to use it even

78
00:05:05.641 --> 00:05:10.000
though the variable doesn't explicitly
have user contact info as its type.

79
00:05:10.000 --> 00:05:12.074
All that matters is the structure lines up

80
00:05:19.031 --> 00:05:22.290
So, we already talked a bit
about this declaration syntax.

81
00:05:22.290 --> 00:05:25.210
Type information on the right
side of the equal sign.

82
00:05:25.210 --> 00:05:29.382
The convention is to use title case for
names of type aliases and

83
00:05:29.382 --> 00:05:31.359
interfaces for that matter.

84
00:05:32.900 --> 00:05:37.084
And Just like variables,

85
00:05:37.084 --> 00:05:42.550
you can only have one type alias
of a given name in a given scope.

86
00:05:43.860 --> 00:05:47.049
Seems weird for me to say that but

87
00:05:47.049 --> 00:05:51.903
that limitation does not exist for
interfaces.

88
00:05:51.903 --> 00:05:56.199
So this would break for type aliases, but

89
00:05:56.199 --> 00:05:59.897
it would not break for interfaces.

90
00:06:05.089 --> 00:06:09.916
So we're gonna look at how a type alias
can clean up some code that we've

91
00:06:09.916 --> 00:06:11.370
seen before.

92
00:06:11.370 --> 00:06:16.370
And in this case, we're back to our coin
flip where we return an error sometimes,

93
00:06:16.370 --> 00:06:17.823
a success case in time.

94
00:06:17.823 --> 00:06:20.698
A success case if the coin
lands the right way,

95
00:06:20.698 --> 00:06:24.370
we're gonna look at how this
code can get cleaned up.

96
00:06:24.370 --> 00:06:28.380
And remember, this implementation
is gonna be the same in both cases.

97
00:06:28.380 --> 00:06:31.580
So we're really gonna focus
on this function signature.

98
00:06:35.410 --> 00:06:38.680
This is how we could clean
it up with type aliases.

99
00:06:38.680 --> 00:06:42.540
So we could say here is the tuple for
our error case.

100
00:06:42.540 --> 00:06:48.013
Here's the tupple for
our success case, and then below here,

101
00:06:48.013 --> 00:06:53.279
we can define the third alias
that describes the union type,

102
00:06:53.279 --> 00:06:56.080
right, the or between the two.

103
00:06:58.350 --> 00:07:03.182
By the way, this pipe here, this extra
pipe, that's just auto code formatting,

104
00:07:03.182 --> 00:07:04.300
doing its thing.

105
00:07:04.300 --> 00:07:06.050
It is not harmful, but it does.

106
00:07:06.050 --> 00:07:07.510
It's also not necessary.

107
00:07:07.510 --> 00:07:10.726
Doesn't make things a little bit more
readable because you can sort of just go,

108
00:07:10.726 --> 00:07:12.030
follow the line straight down.

109
00:07:13.390 --> 00:07:20.300
Look how much nicer this return type
is compared to this whole thing.

110
00:07:21.670 --> 00:07:23.730
It's just a little bit more easy to read.

111
00:07:29.430 --> 00:07:32.744
All right, let's talk about,
I'm calling it inheritance,

112
00:07:32.744 --> 00:07:35.210
it's pseudo inheritance, right?

113
00:07:35.210 --> 00:07:38.593
But how would we take
an existing type alias and

114
00:07:38.593 --> 00:07:43.080
create something that sort
of builds on top of it?

115
00:07:43.080 --> 00:07:47.581
So in this case,
it's very similar to what we saw with

116
00:07:47.581 --> 00:07:52.197
when we were studying this and
the intersection type.

117
00:07:52.197 --> 00:07:56.050
Special date has everything date has.

118
00:07:56.050 --> 00:07:59.770
Analytics effectively extends although
we're not using an extends keyword, but

119
00:07:59.770 --> 00:08:02.520
we're accomplishing something equivalent,
right?

120
00:08:02.520 --> 00:08:05.150
We're saying date is a type.

121
00:08:05.150 --> 00:08:08.100
And I'm gonna take everything
that it's giving me.

122
00:08:08.100 --> 00:08:11.630
And on top of that,
I'm doing some other stuff.

123
00:08:11.630 --> 00:08:13.910
So this is a good use case of this.

124
00:08:13.910 --> 00:08:17.826
This intersection type operator,
not truly inheritance but

125
00:08:17.826 --> 00:08:19.640
has the exact same outcome.

