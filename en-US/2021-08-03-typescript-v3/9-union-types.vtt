WEBVTT

1
00:00:00.040 --> 00:00:06.049
The next topic we're going to talk about
today is union and intersection types.

2
00:00:06.049 --> 00:00:12.165
And these conceptually can be thought
of as logical Boolean operators,

3
00:00:12.165 --> 00:00:14.782
and by that we mean, and, or.

4
00:00:14.782 --> 00:00:19.873
There are other operators that
have no representation in

5
00:00:19.873 --> 00:00:24.764
typescript but
we do have this concept of and, and or.

6
00:00:24.764 --> 00:00:31.389
So this is a hard concept for people
to wrap their heads around sometimes.

7
00:00:31.389 --> 00:00:35.713
So we're just gonna use a very
kind of explicit example here.

8
00:00:35.713 --> 00:00:39.968
Let's imagine that we
have two sets of things.

9
00:00:39.968 --> 00:00:44.585
We have things that are fruits, and
then we have things that are sour, and

10
00:00:44.585 --> 00:00:47.728
there is some overlap those
fruits that are sour.

11
00:00:47.728 --> 00:00:52.569
So a union type, you can read up on
the sort of set theory definition

12
00:00:52.569 --> 00:00:55.508
of what a union type is, if you wish, but

13
00:00:55.508 --> 00:01:00.537
you don't need to know that in order
to be successful with that trip.

14
00:01:00.537 --> 00:01:07.878
You can think of a union type as OR,
for types.

15
00:01:07.878 --> 00:01:13.407
And by union, we mean it could
be something that is in either

16
00:01:13.407 --> 00:01:18.841
of the two circles,
including the overlap between them.

17
00:01:18.841 --> 00:01:24.114
So if you think of a union like in
terms of this logical Boolean operator,

18
00:01:24.114 --> 00:01:26.626
I'll show you go to the wiki page.

19
00:01:26.626 --> 00:01:30.555
Just to show you this one diagram here,
right, it's everything.

20
00:01:30.555 --> 00:01:34.847
Everything that could
be in either category.

21
00:01:34.847 --> 00:01:36.949
So that's the OR.

22
00:01:36.949 --> 00:01:42.204
Intersection types are only
the intersection and

23
00:01:42.204 --> 00:01:47.332
that's the end, meaning,
the only things that

24
00:01:47.332 --> 00:01:54.358
are allowed are things that are in
the left side and the right side.

25
00:01:54.358 --> 00:01:59.753
That is an intersection type and, so
in that case we would be only looking at,

26
00:01:59.753 --> 00:02:05.314
lemon, lime and grapefruit and that's
because they are both fruits and sour.

27
00:02:05.314 --> 00:02:10.198
So let's look at how these two concepts
are represented in the TypeScript

28
00:02:10.198 --> 00:02:11.863
programming language.

29
00:02:11.863 --> 00:02:15.863
Union types can be described
using this pipe operator.

30
00:02:15.863 --> 00:02:20.863
For example, if we had a string,
maybe it's like a property on some

31
00:02:20.863 --> 00:02:25.428
response object that a function
returns and it could either be

32
00:02:25.428 --> 00:02:30.551
success literally that one string,
or it could be the string error.

33
00:02:30.551 --> 00:02:35.339
So it's not just any string,
it's one of these two specific strings.

34
00:02:35.339 --> 00:02:36.786
Here's another example.

35
00:02:36.786 --> 00:02:40.434
Let's flip a coin, do a math.random.

36
00:02:40.434 --> 00:02:45.140
If it's more than 0.5, let's call that
heads otherwise we return tail, so

37
00:02:45.140 --> 00:02:46.836
it could be one of these two.

38
00:02:46.836 --> 00:02:52.640
And the outcome, you can see it's heads or
tails, one or the other.

39
00:02:52.640 --> 00:02:56.812
And in this case, by the way,
note that there's no possibility of

40
00:02:56.812 --> 00:02:59.730
it being both heads and
tails at the same time.

41
00:02:59.730 --> 00:03:07.073
So a union type doesn't have to involve
a potential overlapping area here.

42
00:03:07.073 --> 00:03:10.174
It could literally be a string or
number and

43
00:03:10.174 --> 00:03:15.014
there is nothing that is both a string and
a number at the same time.

44
00:03:15.014 --> 00:03:19.239
Sort of two separate circles, but a union
type would represent anything that is in

45
00:03:19.239 --> 00:03:22.747
either circle, regardless of
whether there's an overlap or not.

46
00:03:22.747 --> 00:03:27.433
So let's make this a bit more
interesting using the tuples concept

47
00:03:27.433 --> 00:03:29.615
that we talked about earlier.

48
00:03:29.615 --> 00:03:35.508
And this is actually a common pattern that
people like to use whenever there may

49
00:03:35.508 --> 00:03:40.954
be collecting errors and returning
them instead of throwing an error and

50
00:03:40.954 --> 00:03:44.902
sort of interrupting
the execution of the program.

51
00:03:44.902 --> 00:03:50.096
So let's say that we are trying
to get some user information and

52
00:03:50.096 --> 00:03:55.783
that's what we're returning here,
is a name and an email address.

53
00:03:55.783 --> 00:03:58.543
And we're wrapping that in a tuple, right?

54
00:03:58.543 --> 00:04:02.796
So the name and the email address,
that's an object and

55
00:04:02.796 --> 00:04:07.774
we're storing that object in
the second position of the tuple and

56
00:04:07.774 --> 00:04:11.869
the first position we're calling success,
right?

57
00:04:11.869 --> 00:04:14.091
See that string success to
the extreme right of this tool tip.

58
00:04:14.091 --> 00:04:18.456
So that's like our success tuple,
it starts with the word success,

59
00:04:18.456 --> 00:04:20.426
and then it gives us some data.

60
00:04:20.426 --> 00:04:23.463
And then in case of an error,
we've got a string error and

61
00:04:23.463 --> 00:04:27.723
then an error object instead of throwing
it, we're just gonna return it here.

62
00:04:27.723 --> 00:04:33.815
So what that lets us do,
Is we have this thing, right?

63
00:04:33.815 --> 00:04:38.489
It could be either option,
we can choose how to handle it and

64
00:04:38.489 --> 00:04:42.791
we will know what's in
the second position of the tuple

65
00:04:42.791 --> 00:04:47.018
based on the string that we
see in the first position.

66
00:04:47.018 --> 00:04:50.609
So we're gonna look at how we can
deal with this value now, right?

67
00:04:50.609 --> 00:04:54.410
It's either this, or it's that,

68
00:04:54.410 --> 00:04:58.472
or this piece here, one or the other.

69
00:05:02.079 --> 00:05:05.675
So here's how we might consume that value.

70
00:05:07.526 --> 00:05:12.181
First, I want you to see that
if we look at either element of

71
00:05:12.181 --> 00:05:16.551
this tuple by itself,
this union type concept has sort

72
00:05:16.551 --> 00:05:21.117
of propagated through each
member of the tuple, right?

73
00:05:21.117 --> 00:05:24.019
Our first element here,
it's one of these two strings,

74
00:05:24.019 --> 00:05:27.176
and then our second element is
either an error or this object.

75
00:05:27.176 --> 00:05:28.781
So each by themselves,

76
00:05:28.781 --> 00:05:33.694
they sort of have this duality until
we straighten out what's going on.

77
00:05:33.694 --> 00:05:39.293
And I'm going to open this up in
the TypeScript playground really quick,

78
00:05:39.293 --> 00:05:45.449
because part of the motivating use case
here, we can get rid of this output here.

79
00:05:45.449 --> 00:05:51.373
But part of what's interesting is,
why would we need to narrow things down?

80
00:05:51.373 --> 00:05:56.753
Why can't we handle this value directly?

81
00:05:56.753 --> 00:06:01.500
So if I look at this first thing,
right, it's either error or success.

82
00:06:01.500 --> 00:06:04.797
And I have a lot of stuff on
here that indicates that yeah,

83
00:06:04.797 --> 00:06:06.317
this is gonna be a string.

84
00:06:06.317 --> 00:06:11.525
It's one specific string or another
specific string, but definitely a string.

85
00:06:11.525 --> 00:06:15.024
This second value down here is
a bit more complicated, right?

86
00:06:15.024 --> 00:06:18.109
It's an error or this special object and

87
00:06:18.109 --> 00:06:22.928
it turns out that all we can access
on this is name, why is that?

88
00:06:22.928 --> 00:06:26.132
Because error has a property called name,
and

89
00:06:26.132 --> 00:06:31.565
this object has a property called name,
and in both cases, they are strings.

90
00:06:31.565 --> 00:06:35.937
So all that we're able to access
here is the guaranteed behavior,

91
00:06:35.937 --> 00:06:41.244
the guaranteed stuff that will be there,
regardless of whether it's an error,

92
00:06:41.244 --> 00:06:45.245
or whether it's this object
with a name and email property.

93
00:06:45.245 --> 00:06:50.183
We have a name in either case, but we're
very limited in terms of what we can do as

94
00:06:50.183 --> 00:06:54.338
long as it's sort of in this state
where we're not sure what it is.

95
00:06:54.338 --> 00:06:58.097
So to access email, for example,

96
00:06:58.097 --> 00:07:02.383
I'm not gonna be able to do that, why?

97
00:07:02.383 --> 00:07:05.365
Because email does not
exist on type error, right?

98
00:07:05.365 --> 00:07:09.670
We have to arrive at a conclusion that
this is not the error case in order to

99
00:07:09.670 --> 00:07:14.349
safely access email, and that motivates
what we're about to talk about now.

100
00:07:14.349 --> 00:07:18.037
So here's the autocomplete we
would get for the letter S,

101
00:07:18.037 --> 00:07:20.908
like clearly we access
sub string behavior.

102
00:07:20.908 --> 00:07:24.278
Here we can only access name as we saw.

103
00:07:28.216 --> 00:07:33.213
And the bottom line is, when a value
has a type that includes a union,

104
00:07:33.213 --> 00:07:38.814
we're only able to use this common
behavior that's guaranteed to be there,

105
00:07:38.814 --> 00:07:42.518
no matter which circle we're
in our Venn diagram or

106
00:07:42.518 --> 00:07:44.955
two separate circle in our case.

107
00:07:44.955 --> 00:07:49.641
So the way we address this is
through a process called narrowing.

108
00:07:49.641 --> 00:07:54.078
And we've already seen this one,
so we didn't give it a name but

109
00:07:54.078 --> 00:07:58.450
it's this process of using some
condition with control flow.

110
00:07:58.450 --> 00:08:03.233
So we define a branch of code that will
only be taken if we're in our success

111
00:08:03.233 --> 00:08:07.644
case and another that will only be
taken if we're in our error case.

112
00:08:10.285 --> 00:08:13.705
And this will be done via this
concept called type guards.

113
00:08:15.993 --> 00:08:20.481
So later in the course we're going
to define our own type guards.

114
00:08:20.481 --> 00:08:23.002
These are called user defined type guards.

115
00:08:23.002 --> 00:08:28.045
And I like to think of
these as where build time

116
00:08:28.045 --> 00:08:32.570
validation and runtime behavior meet.

117
00:08:32.570 --> 00:08:36.359
We saw one for
example that was using type of.

118
00:08:36.359 --> 00:08:39.632
Here, remember when we were talking
about our charging voltage.

119
00:08:39.632 --> 00:08:43.160
It was this optional property,
it could be there it could not be there.

120
00:08:43.160 --> 00:08:48.316
So this is a type guard,
it connects build time validation with

121
00:08:48.316 --> 00:08:53.179
runtime behavior in that,
at runtime, we know that we will

122
00:08:53.179 --> 00:08:58.174
only enter this branch of code
if charge voltage is defined.

123
00:08:58.174 --> 00:09:04.279
At build time, we can operate with the
assumption that this is defined, right?

124
00:09:04.279 --> 00:09:09.326
So it it does serve as glue
between these two worlds,

125
00:09:09.326 --> 00:09:13.800
runtime check that happens
with a compile time

126
00:09:13.800 --> 00:09:19.209
narrowing down an increase
in specificity of the type.

127
00:09:19.209 --> 00:09:24.679
So here in this case,
is how we could make use of a type guard.

128
00:09:24.679 --> 00:09:32.062
So this same function, maybe get user info
has two types of things that might return.

129
00:09:32.062 --> 00:09:37.427
And we can see that still each
element of the tuple has this,

130
00:09:37.427 --> 00:09:41.289
maybe could be this, maybe could be that,

131
00:09:41.289 --> 00:09:45.493
which is kind of what
a union type is all about.

132
00:09:45.493 --> 00:09:50.666
And we can narrow things down,
we can use instance of, for example.

133
00:09:50.666 --> 00:09:53.501
So if second is an error, well,

134
00:09:53.501 --> 00:09:58.553
this branch of code will only enter it for
the arrow case.

135
00:09:58.553 --> 00:10:02.160
And then in the else
clause of this condition,

136
00:10:02.160 --> 00:10:05.126
we get everything that's leftover.

137
00:10:05.126 --> 00:10:09.806
After the if is handled, you can kinda
think of it like slicing up a pie,

138
00:10:09.806 --> 00:10:12.860
where there are two things
that this could be.

139
00:10:12.860 --> 00:10:17.660
And will handle the portion of possible
futures where this is an error,

140
00:10:17.660 --> 00:10:21.740
and then all that's left is
everything that's not error and

141
00:10:21.740 --> 00:10:25.744
that's what ends up happening
in the else clause, right?

142
00:10:25.744 --> 00:10:28.745
So there's still a benefit
to being in this else thing.

143
00:10:28.745 --> 00:10:31.337
So that's great, it's even better though.

144
00:10:31.337 --> 00:10:38.015
And this narrowing up here, this would
work with just the return object.

145
00:10:38.015 --> 00:10:42.136
It's either an error or it's this object,
but we can talk about how

146
00:10:42.136 --> 00:10:47.073
this tuple gives us some benefit via this
concept called discriminated unions.

147
00:10:47.073 --> 00:10:49.934
And what this is telling us here, well,

148
00:10:49.934 --> 00:10:53.310
let's first look at what
we're dealing with.

149
00:10:53.310 --> 00:10:56.898
We're looking at the first
element of the tuple,

150
00:10:56.898 --> 00:11:01.092
we're seeing if it exactly
matches our specific string.

151
00:11:01.092 --> 00:11:06.528
And then look, in this case, the entire
tuple is in the error case, right?

152
00:11:06.528 --> 00:11:10.719
That's the string error and
then the error object and

153
00:11:10.719 --> 00:11:13.990
then down here we have our success tuple.

154
00:11:13.990 --> 00:11:16.295
So TypeScript behind the scenes,

155
00:11:16.295 --> 00:11:21.938
clearly understands that if this string is
found in the first position of the tuple,

156
00:11:21.938 --> 00:11:25.369
we know what's going to be
in the second position.

157
00:11:25.369 --> 00:11:30.252
It understands that these are not two
shifting values either of which could be

158
00:11:30.252 --> 00:11:35.376
one or the other, there's one scenario,
and then there's another scenario.

159
00:11:35.376 --> 00:11:40.961
We could never end up with this object
here accompanied by the error string.

160
00:11:40.961 --> 00:11:45.478
It's clear that TypeScript understands
that because our check is on the first

161
00:11:45.478 --> 00:11:50.132
part of the tuple and what we're seeing as
a benefit is the whole tuple is either in

162
00:11:50.132 --> 00:11:51.722
one category or the other.

163
00:11:51.722 --> 00:11:54.681
This is what's called
a discriminated union.

164
00:11:54.681 --> 00:11:59.585
And what makes it a discriminated
union is we have a convenient key

165
00:11:59.585 --> 00:12:04.579
of some sort to use in combination
with the type guard that lets us in

166
00:12:04.579 --> 00:12:09.412
a broader sense switch between
many different possibilities.

167
00:12:09.412 --> 00:12:14.279
And this could be a property on an object,
or it could be a value in a tuple but

168
00:12:14.279 --> 00:12:19.075
usually it's gonna be something where
you can have a type guard that looks

169
00:12:19.075 --> 00:12:22.656
like this where you can handle
one of a number of cases.

170
00:12:22.656 --> 00:12:27.096
If there were 57 different
possible tuples we could

171
00:12:27.096 --> 00:12:31.348
return as long as each had
a specific key like this.

172
00:12:31.348 --> 00:12:34.024
A specific string as the zeroeth element.

173
00:12:34.024 --> 00:12:39.289
You could make a nice case switch that
would handle each one of those cases,

174
00:12:39.289 --> 00:12:42.310
and TypeScript would cooperate with you.

175
00:12:42.310 --> 00:12:48.440
And you'd get that nice well formed whole
tuple with both the sort of label for

176
00:12:48.440 --> 00:12:54.024
it and that second position which
is where the deeper information is.

177
00:12:54.024 --> 00:12:59.307
Another word for this by the way,
just in case you see it in the wild,

178
00:12:59.307 --> 00:13:03.965
it's a tagged union type, and
the tag is error or success.

179
00:13:03.965 --> 00:13:06.265
It's whatever that word is,

180
00:13:06.265 --> 00:13:11.610
which is the indicator of what should
be found in the other position.

