WEBVTT

1
00:00:00.552 --> 00:00:03.213
So, when we talk about this types,

2
00:00:03.213 --> 00:00:08.371
what we mean is the type of this
within a function when it's invoked.

3
00:00:08.371 --> 00:00:12.877
And this has the most relevance when
talking about freestanding functions

4
00:00:12.877 --> 00:00:14.666
because methods on classes,

5
00:00:14.666 --> 00:00:18.260
they kind of already have this
wired up in a convenient way.

6
00:00:19.330 --> 00:00:24.256
Here is example of what we
might care about this, so

7
00:00:24.256 --> 00:00:28.200
a button or a DOM element of any kind.

8
00:00:28.200 --> 00:00:32.837
If we wire up a handler,
like a click handler of some sort,

9
00:00:32.837 --> 00:00:37.667
when the buttons clicked,
this function will be invoked and

10
00:00:37.667 --> 00:00:43.650
this within the function will be
whichever DOM element emitted the event.

11
00:00:45.500 --> 00:00:50.062
So, if we tried to operate on that,
we would kinda be

12
00:00:50.062 --> 00:00:55.042
busted on it because what
we're being told here is look,

13
00:00:55.042 --> 00:01:00.666
I don't know that you wired up my
click handler to a Dom element.

14
00:01:00.666 --> 00:01:05.621
Like you could be using it that way or
a different way, but

15
00:01:05.621 --> 00:01:11.816
you can't start consuming this,
unless you tell me what it should be,

16
00:01:11.816 --> 00:01:15.652
so I can help you stay on the tracks,
right?

17
00:01:15.652 --> 00:01:21.360
And use it responsibly, so
in this case, we happen to be fine,

18
00:01:21.360 --> 00:01:25.692
because we have no opinion about this,
right?

19
00:01:25.692 --> 00:01:30.335
We can directly invoke it takes
the argument as it should, but

20
00:01:30.335 --> 00:01:35.710
it's the use of this that's kind of
causing an error message to pop up.

21
00:01:37.680 --> 00:01:41.235
So what we need to do is define
what's called a this type and

22
00:01:41.235 --> 00:01:45.228
it's sort of just an argument
that's passed behind the scenes,

23
00:01:45.228 --> 00:01:48.203
which makes sense to me
because that's kind of,

24
00:01:48.203 --> 00:01:52.650
when you think about how function apply,
function call works, right?

25
00:01:52.650 --> 00:01:55.583
We pass this along with
the arguments there,

26
00:01:55.583 --> 00:02:00.831
it's part of the information that goes to
the function when we want to invoke it,

27
00:02:00.831 --> 00:02:05.920
so it kind of makes sense that it's
included alongside the arguments.

28
00:02:05.920 --> 00:02:09.347
And now we can see that we're fine and,
in fact,

29
00:02:09.347 --> 00:02:13.740
that's the type of this it's
an HTML button element.

30
00:02:13.740 --> 00:02:17.276
And down here now we're busted on that,

31
00:02:17.276 --> 00:02:22.167
because the only safe way of
invoking this click handler

32
00:02:22.167 --> 00:02:26.744
It would be either using
function call like that, or

33
00:02:26.744 --> 00:02:31.140
creating a bound version of the function.

34
00:02:31.140 --> 00:02:36.057
And if we look at this bound handler,
it may not show it on the tooltip, no,

35
00:02:36.057 --> 00:02:38.175
it does show it on the tooltip, so

36
00:02:38.175 --> 00:02:42.590
now notice that my click handler
has this HTML button element.

37
00:02:42.590 --> 00:02:47.792
While the act of binding this,
it means that we're creating

38
00:02:47.792 --> 00:02:53.402
a new function that doesn't care
about which this, is being used

39
00:02:53.402 --> 00:03:00.580
because we're baking the right context
into that function that bind returns.

40
00:03:00.580 --> 00:03:05.495
So it makes sense that this bound handler,
you can just pass it in an event,

41
00:03:05.495 --> 00:03:08.610
because it's already got the right this.

42
00:03:08.610 --> 00:03:13.873
If anyone here have seen this pattern
before, where you're doing function bind,

43
00:03:13.873 --> 00:03:18.393
to hook things up to DOM elements,
maybe in a react component, right?

44
00:03:18.393 --> 00:03:24.217
This is kind of a common way of like
you pull methods off of your class and

45
00:03:24.217 --> 00:03:29.055
you say this dot action equals
this dot action dot bind, so

46
00:03:29.055 --> 00:03:34.622
there you go, this is the kind of
thing we're talking about here.

47
00:03:37.390 --> 00:03:41.264
And bind call and apply, at least for
modern versions of TypeScript,

48
00:03:41.264 --> 00:03:45.020
should work very very nicely with
the concept we just talked about.

49
00:03:46.670 --> 00:03:51.822
So, let's end our section on functions
by talking about best practices,

50
00:03:51.822 --> 00:03:55.688
I already asked you to
explicitly define return types.

51
00:03:55.688 --> 00:03:59.216
So, here's an example of a piece of code,

52
00:03:59.216 --> 00:04:03.920
where if we made what appears
to be an innocent change, so

53
00:04:03.920 --> 00:04:07.350
you see here we're fetching some data and

54
00:04:07.350 --> 00:04:12.855
then if the promise resolves,
we'd like to log it to the console.

55
00:04:12.855 --> 00:04:17.905
What if over here,
when we decode the body of our response,

56
00:04:17.905 --> 00:04:23.370
we start to only do that for
successful responses only, right?

57
00:04:23.370 --> 00:04:25.298
We add a guard around it.

58
00:04:27.150 --> 00:04:29.800
Errors would start to pop up,

59
00:04:29.800 --> 00:04:35.740
where we consume the result that
the promise resolves to, right?

60
00:04:35.740 --> 00:04:40.357
You start to see these
errors where they break as

61
00:04:40.357 --> 00:04:44.640
opposed to where you need to fix it,
right?

62
00:04:44.640 --> 00:04:46.766
This is the change, right?

63
00:04:46.766 --> 00:04:50.498
Get data now has the possibility
of returning undefined,

64
00:04:50.498 --> 00:04:55.237
you can see it right in the tooltip or
promise that resolves to undefined.

65
00:04:55.237 --> 00:04:59.419
I'd like my errors to pop up
closer to where I must fix them,

66
00:04:59.419 --> 00:05:01.940
we did talk about that a little bit.

67
00:05:04.430 --> 00:05:09.573
And so, this is what you would see if
we had this explicit return type and

68
00:05:09.573 --> 00:05:15.340
this error right on the function, and
it's really clear how we can address it.

