WEBVTT

1
00:00:00.340 --> 00:00:05.038
TypeScript takes the JavaScript
concept of a class and layers,

2
00:00:05.038 --> 00:00:07.830
some really useful stuff on top of it.

3
00:00:08.890 --> 00:00:15.700
We're going to talk about access modifier
keywords, private, public protected.

4
00:00:15.700 --> 00:00:18.010
We're gonna talk about private fields.

5
00:00:18.010 --> 00:00:22.003
And then I'm going to show
you how properties work,

6
00:00:22.003 --> 00:00:27.902
which is a shorthand that will come in,
t's very useful because without it,

7
00:00:27.902 --> 00:00:32.624
TypeScript classes can get really
verbose as you define class

8
00:00:32.624 --> 00:00:37.200
fields that sorta originate
from constructor arguments.

9
00:00:38.840 --> 00:00:42.410
So let's talk about class fields for
a moment.

10
00:00:42.410 --> 00:00:43.931
In the JavaScript world,

11
00:00:43.931 --> 00:00:48.836
you've probably seen code like this where
we take in arguments to the constructor,

12
00:00:48.836 --> 00:00:52.030
and we kinda tack them on to
each instance of the class.

13
00:00:54.290 --> 00:00:59.624
Part of what we get as a result of this
is like, the instance of the class isn't

14
00:00:59.624 --> 00:01:04.650
a well defined type, meaning we
don't know necessarily what's on it.

15
00:01:04.650 --> 00:01:09.018
We're very used to knowing upfront,
like what's gonna be here,

16
00:01:09.018 --> 00:01:12.770
these are the things that I
can expect on this interface.

17
00:01:12.770 --> 00:01:16.287
And that's not true if we can write
arbitrary logic in the constructor and

18
00:01:16.287 --> 00:01:18.270
just start tacking things on.

19
00:01:18.270 --> 00:01:21.740
As a result, if we look at the way
TypeScript analysing this,

20
00:01:21.740 --> 00:01:25.407
we can see that yes, it knows that
this is an instance of a car, but

21
00:01:25.407 --> 00:01:30.610
it's not gonna provide us any kinda type
safety around which methods we can invoke.

22
00:01:30.610 --> 00:01:33.008
And furthermore, all the arguments,

23
00:01:33.008 --> 00:01:36.560
the constructor arguments
end up being any as well.

24
00:01:36.560 --> 00:01:40.756
So we need to add type information to this
situation and get into a world that's

25
00:01:40.756 --> 00:01:44.635
providing us with that useful feedback
we have seen so far in the course,

26
00:01:44.635 --> 00:01:48.599
where the wrong types of arguments
will start to present error messages.

27
00:01:50.560 --> 00:01:56.220
So this is what the equivalent code
would look like in the TypeScript world.

28
00:01:56.220 --> 00:01:57.960
And I want you to notice a few things.

29
00:01:57.960 --> 00:02:05.335
First, we state the possible class
fields and their types up front.

30
00:02:07.538 --> 00:02:11.962
Second, obviously, just like a function
call signature, we have types for

31
00:02:11.962 --> 00:02:15.400
all the arguments passed
to the constructor.

32
00:02:15.400 --> 00:02:19.707
And then this code remains unaltered,
where we sorta take everything

33
00:02:19.707 --> 00:02:24.452
the constructor received and we can now
safely tack it onto the interface, or

34
00:02:24.452 --> 00:02:26.940
sorry, on to the instance of the class.

35
00:02:28.140 --> 00:02:32.470
We are now rightly stopped when we try
to invoke a method that doesn't exist.

36
00:02:32.470 --> 00:02:35.830
And we're rightly stopped
when we attempt to,

37
00:02:35.830 --> 00:02:40.031
like pass arguments to
the constructor in the wrong order or

38
00:02:40.031 --> 00:02:45.002
just otherwise fail to meet the demands
of what this wants to receive.

39
00:02:45.002 --> 00:02:51.200
On top of this,TypeScript adds
access modifier keywords.

40
00:02:51.200 --> 00:02:52.843
And here what I'm saying is,

41
00:02:52.843 --> 00:02:56.990
I just want to acknowledge this
code is getting very verbose.

42
00:02:56.990 --> 00:03:01.990
Like the word make is here,
here, here and here.

43
00:03:01.990 --> 00:03:04.400
So it's like four times for each property.

44
00:03:04.400 --> 00:03:07.470
We're working our way up towards
a simpler way to write this.

45
00:03:07.470 --> 00:03:11.023
We need to talk about access
modifier keywords first.

46
00:03:11.023 --> 00:03:15.967
So access modifier keywords, you can
find these in Java and C#, they all

47
00:03:15.967 --> 00:03:21.600
mean the same thing broadly across
a wide range of programming languages.

48
00:03:21.600 --> 00:03:25.240
Public means everyone can see something.

49
00:03:26.410 --> 00:03:31.877
Protected means a class can see something
and also subclasses can see it and

50
00:03:31.877 --> 00:03:37.000
then private means they're only
visible to the class itself.

51
00:03:37.000 --> 00:03:43.510
And when I talk about something can be
seen, I mean class fields or methods.

52
00:03:43.510 --> 00:03:50.020
So we use these words to indicate the
visibility of class fields and methods.

53
00:03:50.020 --> 00:03:51.793
So, here you could see, all right,

54
00:03:51.793 --> 00:03:55.050
we're exposing these class
fields to the outside world.

55
00:03:55.050 --> 00:03:59.194
Maybe we have a VinNumber that
the car class can see and

56
00:03:59.194 --> 00:04:02.470
any subclass of the car can also see.

57
00:04:02.470 --> 00:04:06.660
But maybe there's this door lock code that
we can unlock all the doors of the car.

58
00:04:06.660 --> 00:04:11.010
We wanna keep that private to the car,
not even subclasses can see that.

59
00:04:11.010 --> 00:04:13.257
So I want you to see a couple things here.

60
00:04:15.833 --> 00:04:18.948
First, this pattern, right?

61
00:04:18.948 --> 00:04:21.200
So, doorLockCode is private.

62
00:04:22.280 --> 00:04:24.929
But you can certainly provide,

63
00:04:24.929 --> 00:04:30.229
you can sorta open up access to
subclasses by defining a method or

64
00:04:30.229 --> 00:04:35.334
sometimes people define like a getter and
a setter property,

65
00:04:35.334 --> 00:04:42.520
it's not just about keeping things hidden
so that people don't peek at these values.

66
00:04:42.520 --> 00:04:45.964
I mean,
if you're running your app in a browser,

67
00:04:45.964 --> 00:04:51.300
you can't keep secrets there coz you're
sending all your code to your user.

68
00:04:51.300 --> 00:04:55.917
But you can control the pathways that
people will take in order to get

69
00:04:55.917 --> 00:04:57.860
certain things done.

70
00:04:57.860 --> 00:05:02.766
So if you wanted to unlock all the doors
and use your door lock code in a specific

71
00:05:02.766 --> 00:05:06.650
way and not expose that directly,
you could do that.

72
00:05:06.650 --> 00:05:09.737
And you could say this is a private thing,
but

73
00:05:09.737 --> 00:05:13.810
I allow it to be used in some
form through protected method.

74
00:05:15.550 --> 00:05:17.570
Let's look at a subclass here.

75
00:05:17.570 --> 00:05:23.100
So sedan extends car,
sit in can see a VIN number just fine.

76
00:05:23.100 --> 00:05:24.340
That's protected.

77
00:05:27.520 --> 00:05:30.776
It cannot see this door lock
code because it's private and

78
00:05:30.776 --> 00:05:33.310
it's only accessible within the class car.

79
00:05:36.630 --> 00:05:39.530
And here, we're kinda applying
the same pattern again.

80
00:05:39.530 --> 00:05:43.490
So we have a public function
that's called unlock,

81
00:05:43.490 --> 00:05:48.180
which calls this protected
method unlock all doors.

82
00:05:48.180 --> 00:05:53.030
So you see we can use this way
to control visibility into

83
00:05:53.030 --> 00:05:58.305
what's available on instances
of this class as a mechanism

84
00:05:58.305 --> 00:06:03.368
of providing a nice surface for
people to interact with,

85
00:06:03.368 --> 00:06:08.344
where they're not able to
get a directly modify state.

86
00:06:08.344 --> 00:06:14.042
And this might lead us if we have
a different locking mechanism on this car,

87
00:06:14.042 --> 00:06:18.110
we can now safely change that up here,
right?

88
00:06:18.110 --> 00:06:20.380
Nobody can possibly see this.

89
00:06:20.380 --> 00:06:24.532
So we can feel confident that if we change
it, we're not going to break anybody,

90
00:06:24.532 --> 00:06:28.020
as long as this method still
does what it's supposed to do.

91
00:06:28.020 --> 00:06:30.143
So it's a great encapsulation tool.

92
00:06:33.947 --> 00:06:38.436
A lot easier than just sorta
overloading your constructor and

93
00:06:38.436 --> 00:06:43.106
using that scope as private,
which is another common pattern.

94
00:06:46.158 --> 00:06:52.920
And obviously, from the outside of this
class, so here Here's our sidin class.

95
00:06:52.920 --> 00:06:58.200
This is the ending brace
of our class declaration.

96
00:06:58.200 --> 00:07:01.769
And here we're creating a sedan,
we can see this public thing,

97
00:07:01.769 --> 00:07:06.610
but we can't see this protected thing, and
we can't see this private thing, right?

98
00:07:06.610 --> 00:07:10.794
So it's saying this is protected, and
it's only accessible within the car and

99
00:07:10.794 --> 00:07:13.990
its subclasses So that's private,
public and protected.

100
00:07:15.470 --> 00:07:21.420
And this limited exposure concept
is really what I just described.

101
00:07:21.420 --> 00:07:25.513
The ability to take
something that is hidden and

102
00:07:25.513 --> 00:07:28.490
provide controlled access to it.

103
00:07:29.660 --> 00:07:33.458
Through, you know something
that is more visible,

104
00:07:33.458 --> 00:07:39.430
like exposing a private thing through
a protected method, something like that.

105
00:07:41.890 --> 00:07:42.680
Just a warning.

106
00:07:44.320 --> 00:07:49.420
JavaScript is least client side
JavaScript things that run in browsers.

107
00:07:49.420 --> 00:07:54.499
Please don't use this as a mechanism for
storing like auth tokens or

108
00:07:54.499 --> 00:07:57.720
encryption, keys, anything like that.

109
00:07:59.100 --> 00:08:04.740
This is really just about encapsulation,
not not security right?

110
00:08:07.620 --> 00:08:08.929
And furthermore,

111
00:08:08.929 --> 00:08:14.540
these access modifier keywords they
disappear as part of the build process.

112
00:08:14.540 --> 00:08:17.278
So anyone who puts like
a debugger in your program,

113
00:08:17.278 --> 00:08:20.100
they'll be able to see
all of your fields there.

114
00:08:20.100 --> 00:08:23.720
So it's not, this is again,
just fancy linter.

115
00:08:23.720 --> 00:08:26.030
This is not really private at runtime.

116
00:08:28.720 --> 00:08:32.820
JavaScript recently got the concept
of private class fields.

117
00:08:32.820 --> 00:08:37.395
You can recognize these because their name
begins with the hashtag as of TypeScript

118
00:08:37.395 --> 00:08:37.950
3.8.

119
00:08:37.950 --> 00:08:41.550
These work really nicely in TypeScript.

120
00:08:41.550 --> 00:08:44.230
This is private at runtime.

121
00:08:44.230 --> 00:08:46.870
They're a little more difficult to access.

122
00:08:46.870 --> 00:08:49.480
But again, I would not advise you
to put encryption stuff here.

123
00:08:51.510 --> 00:08:55.140
There's one last thing that's kind
of like an access modifier keyword.

124
00:08:55.140 --> 00:08:59.790
I say kind of because it can be used
in combination with other keywords.

125
00:08:59.790 --> 00:09:01.810
It's called read only.

126
00:09:01.810 --> 00:09:06.950
And this will yell at you
if you attempt to reassign.

127
00:09:08.190 --> 00:09:10.354
Values.
It's not about mutability,

128
00:09:10.354 --> 00:09:12.670
it's about reassign ability.

129
00:09:12.670 --> 00:09:17.820
So think of it more like const and
less like a frozen array of some sort.

130
00:09:17.820 --> 00:09:24.450
It's really about not pointing
year to a new number in this case.

131
00:09:28.774 --> 00:09:34.960
Keep in mind, giving it an initial
value in a constructor is totally fine.

132
00:09:36.640 --> 00:09:40.828
After it receives its initial value,
that's when it starts monitoring, and

133
00:09:40.828 --> 00:09:44.710
watching, and making sure that you
don't assign it to something else.

134
00:09:47.770 --> 00:09:50.370
Great, we've made it through
access modifier keywords.

135
00:09:50.370 --> 00:09:52.790
Now let's talk about puram properties.

136
00:09:52.790 --> 00:09:57.703
The more concise way to write
classes in a way that doesn't

137
00:09:57.703 --> 00:10:02.817
involve the word make 1234
times each property we have,

138
00:10:02.817 --> 00:10:08.630
that will become a class fields four
times we have to write that word So

139
00:10:08.630 --> 00:10:14.546
this is the abbreviated, well,
this is not the abbreviated syntax,

140
00:10:14.546 --> 00:10:18.590
but this is the before,
and here's the after.

141
00:10:20.890 --> 00:10:22.990
Put them both on the screen
at the same time.

142
00:10:22.990 --> 00:10:25.314
So it looks kinda strange,

143
00:10:25.314 --> 00:10:30.500
but the key thing is we have
an access modifier keyword.

144
00:10:30.500 --> 00:10:33.750
Before our constructor arguments.

145
00:10:33.750 --> 00:10:35.970
And it means exactly the same thing.

146
00:10:35.970 --> 00:10:40.002
The code on the bottom is going to
compile to exactly the same thing as

147
00:10:40.002 --> 00:10:41.220
the code on the top.

148
00:10:42.370 --> 00:10:43.190
I can prove it to you.

149
00:10:43.190 --> 00:10:44.820
Let's go to the TypeScript playground.

150
00:10:46.490 --> 00:10:52.271
Let's pop this out and
look at the JavaScript that it creates So

151
00:10:52.271 --> 00:10:56.199
what's happening here is we're saying,

152
00:10:56.199 --> 00:11:02.500
I have a constructor argument,
and I'm going to call make.

153
00:11:02.500 --> 00:11:04.950
I also have a class
field of the same name.

154
00:11:06.060 --> 00:11:11.760
And in my constructor,
please store what I received.

155
00:11:11.760 --> 00:11:17.508
In my class field puram properties
to constructor parameter,

156
00:11:17.508 --> 00:11:21.330
and it becomes a class property.

157
00:11:21.330 --> 00:11:26.144
And this is the only time you'll
see an access modifier keyword like

158
00:11:26.144 --> 00:11:30.207
this next to something other
than a method or a class field

159
00:11:32.977 --> 00:11:37.386
So, the most important
thing I can tell you,

160
00:11:37.386 --> 00:11:42.026
this is like a common snag
people hit is we have to

161
00:11:42.026 --> 00:11:47.360
study what happens around
constructor logic.

162
00:11:47.360 --> 00:11:51.280
Class field initialization,
these puram properties, right?

163
00:11:51.280 --> 00:11:56.980
There's a lot of stuff that's sort of
going on as we instantiate things.

164
00:11:56.980 --> 00:12:04.020
So I've created for
us an interesting situation here.

165
00:12:04.020 --> 00:12:09.160
Where we have a class field
with an initializer oops.

166
00:12:09.160 --> 00:12:14.010
And don't don't worry about console
log like not returning anything.

167
00:12:14.010 --> 00:12:16.960
We just want to see when
the console log happens.

168
00:12:16.960 --> 00:12:17.770
Right?

169
00:12:17.770 --> 00:12:19.620
We have a super call.

170
00:12:21.490 --> 00:12:26.210
We have one of these which sort of that
involves an assignment to a class field.

171
00:12:26.210 --> 00:12:30.600
So understanding the order of
operations here is really important.

172
00:12:31.980 --> 00:12:34.380
Right?
When is this going to get invoked?

173
00:12:34.380 --> 00:12:36.300
What happens before what?

174
00:12:36.300 --> 00:12:40.430
Well, when we compile it out,
we can kind of see.

175
00:12:40.430 --> 00:12:41.900
And thankfully, I've written.

176
00:12:43.010 --> 00:12:46.670
Class field initializer here,
custom constructor stuff.

177
00:12:46.670 --> 00:12:49.540
So we should hopefully be able to
recognize this when we see it in

178
00:12:49.540 --> 00:12:51.360
the compiled code.

179
00:12:51.360 --> 00:12:53.250
So, let's look at this.

180
00:12:53.250 --> 00:12:58.249
So first what happens is super,
then we have these puram properties,

181
00:12:58.249 --> 00:13:01.420
followed by class field initializers.

182
00:13:01.420 --> 00:13:04.440
And only then does our
constructor code actually run.

183
00:13:06.020 --> 00:13:07.800
That's right here, right?

184
00:13:07.800 --> 00:13:10.250
This is the last thing to run.

185
00:13:10.250 --> 00:13:12.380
So that's the order of operations.

186
00:13:12.380 --> 00:13:18.480
Prim properties, other class fields,
and then our custom constructor stuff.

187
00:13:18.480 --> 00:13:21.800
And before everything, the absolute
first thing, Is the super call.

188
00:13:25.520 --> 00:13:30.210
When in doubt, write a small example pass
it through the TypeScript playground.

189
00:13:30.210 --> 00:13:32.990
That's all I basically did here.

190
00:13:32.990 --> 00:13:35.470
So that you can see that this happens,
right?

191
00:13:35.470 --> 00:13:39.495
So, when in doubt,
make a small example and kick the tires.

192
00:13:44.479 --> 00:13:48.270
And although it's possible
to put stuff before super.

193
00:13:50.980 --> 00:13:56.268
You can't combine it with
these parameter properties,

194
00:13:56.268 --> 00:13:59.430
or class field initializers.

195
00:13:59.430 --> 00:14:04.276
Once you have those super must be
the absolute first thing in your class or

196
00:14:04.276 --> 00:14:08.510
in your constructor So
I can prove that to you.

197
00:14:10.300 --> 00:14:15.220
If I take this away, And

198
00:14:15.220 --> 00:14:19.540
that now we're fine.

199
00:14:19.540 --> 00:14:24.206
So it's it's these things this
automatic constructor behavior that

200
00:14:26.554 --> 00:14:30.350
Makes it so
that pre super logic is forbidden.

