WEBVTT

1
00:00:00.210 --> 00:00:02.741
So this is a little exercise.

2
00:00:02.741 --> 00:00:06.245
And our motivation is as follows.

3
00:00:07.802 --> 00:00:11.701
So we have a dictionary here.

4
00:00:11.701 --> 00:00:14.676
It's a bunch of a bunch of fruits.

5
00:00:14.676 --> 00:00:19.739
They have a color, and
they have a mass in grams.

6
00:00:19.739 --> 00:00:24.036
We have an interface, the type parameters
can be used with interfaces here.

7
00:00:24.036 --> 00:00:27.586
You see I'm saying it's
a dictionary of type T.

8
00:00:27.586 --> 00:00:30.310
Well, what can I find in this dictionary?

9
00:00:30.310 --> 00:00:32.156
A bunch of Ts, right?

10
00:00:32.156 --> 00:00:34.337
So you can use this however you like.

11
00:00:34.337 --> 00:00:39.624
So what we want to do is create
array.map array.filter and

12
00:00:39.624 --> 00:00:43.338
array.reduce, but for dictionaries.

13
00:00:44.542 --> 00:00:49.312
And below this,
I have a test suite similar

14
00:00:49.312 --> 00:00:54.090
to what we saw for
the JSON types exercise.

15
00:00:54.090 --> 00:00:59.080
So I'll give you, I'll say,
two minutes, just to read through this.

16
00:00:59.080 --> 00:01:03.393
And then I would like your
help in implementing this.

17
00:01:03.393 --> 00:01:06.017
But just look through the test cases so

18
00:01:06.017 --> 00:01:09.875
you can try to understand
where we're going with this.

19
00:01:17.156 --> 00:01:22.386
So at the bottom of the starter code,
of course, we have the usual Try button,

20
00:01:22.386 --> 00:01:27.558
when we click that, we should find
ourselves on the TypeScript playground.

21
00:01:27.558 --> 00:01:33.986
And I would like you to click this
Logs tab, and we can run the code.

22
00:01:33.986 --> 00:01:34.827
And right now,

23
00:01:34.827 --> 00:01:39.173
nothing is gonna be able to run cuz we
haven't really defined these functions.

24
00:01:39.173 --> 00:01:44.223
But once we have something a bit more
reasonable as our starting point,

25
00:01:44.223 --> 00:01:47.687
we should start to see
some good feedback there.

26
00:01:47.687 --> 00:01:52.090
So, really, around these lines here,
this is what we want to change.

27
00:01:52.090 --> 00:01:56.056
We don't wanna modify anything above or
below this point,

28
00:01:56.056 --> 00:01:58.368
just these three functions here.

29
00:01:58.368 --> 00:02:02.950
And the way these are defined,
they're the absolute most

30
00:02:02.950 --> 00:02:07.172
generalized functions that
we could possibly have.

31
00:02:09.058 --> 00:02:13.274
Meaning they take any number of arguments,
which could be anything, and

32
00:02:13.274 --> 00:02:14.640
they return anything.

33
00:02:14.640 --> 00:02:18.161
So, if it's our job to implement these,

34
00:02:18.161 --> 00:02:22.093
I think I'm just gonna
pick one to start with.

35
00:02:22.093 --> 00:02:27.179
And filter seems like
a good place to start.

36
00:02:27.179 --> 00:02:28.901
So I'm gonna begin with that one first.

37
00:02:31.445 --> 00:02:36.394
So this is going to need to have
a type parameter, and we'll call it T.

38
00:02:36.394 --> 00:02:41.214
In fact, all of these will need at
least a T, possibly a second parameter.

39
00:02:41.214 --> 00:02:45.512
And let's just think about these in terms
of like what they take in as arguments and

40
00:02:45.512 --> 00:02:46.521
what they return.

41
00:02:46.521 --> 00:02:51.164
And we can worry about sort of
filling in the algorithm once we

42
00:02:51.164 --> 00:02:52.996
have that pinned down.

43
00:02:52.996 --> 00:03:01.538
So filter, it's going to take
in a dictionary, Of type T.

44
00:03:01.538 --> 00:03:06.637
And it's gonna return a dictionary of T,
as well.

45
00:03:06.637 --> 00:03:09.950
It's just gonna have
fewer properties on it.

46
00:03:09.950 --> 00:03:14.775
It's gonna be the subset of properties
on the dictionary that meet

47
00:03:14.775 --> 00:03:16.678
some certain condition.

48
00:03:16.678 --> 00:03:23.477
And it's the caller's job to
state what that condition is.

49
00:03:23.477 --> 00:03:28.154
And for now,
we can just return an empty dictionary.

50
00:03:30.831 --> 00:03:33.128
And we'll also define the filter.

51
00:03:35.621 --> 00:03:38.261
Call it filterCb, for callback.

52
00:03:38.261 --> 00:03:46.229
This is going to take in an argument
of type T and return a boolean.

53
00:03:49.661 --> 00:03:55.270
And we can move these onto multiple lines
to make it really easy to see everything.

54
00:03:55.270 --> 00:03:58.667
So there's our first argument,
there's our filterCb.

55
00:03:58.667 --> 00:04:03.883
Now we may need more callback arguments
here, I know from using array filter,

56
00:04:03.883 --> 00:04:06.976
array reduce,
sometimes you get the id here.

57
00:04:06.976 --> 00:04:11.167
Let's only worry about that
if we absolutely need to.

58
00:04:12.673 --> 00:04:14.706
So that's filter.

59
00:04:14.706 --> 00:04:17.898
Map, so
map is used to transform a collection

60
00:04:17.898 --> 00:04:21.262
of one thing to a collection
of something else.

61
00:04:21.262 --> 00:04:24.542
And the transformation is
defined by a mapping function.

62
00:04:24.542 --> 00:04:31.792
So we might need two type parameters here
to represent the before and the after.

63
00:04:31.792 --> 00:04:35.654
So we could have T, and then let's say U..

64
00:04:35.654 --> 00:04:37.277
U comes after T.

65
00:04:37.277 --> 00:04:43.070
So, like filter,
we're going to take in as an argument,

66
00:04:43.070 --> 00:04:48.299
input, A dictionary of Ts,

67
00:04:48.299 --> 00:04:53.881
and what we're gonna return
is a dictionary of Us.

68
00:04:56.130 --> 00:05:01.585
And our mapping callback is going to take

69
00:05:01.585 --> 00:05:06.564
as an argument, a T, and return a U.

70
00:05:06.564 --> 00:05:11.433
We'll start out by just returning an empty
dictionary, which is technically the right

71
00:05:11.433 --> 00:05:15.400
type to return, it's just not
a meaningful thing to return right now.

72
00:05:17.590 --> 00:05:22.578
Reduce is a little more tricky, let me
just see if the test suite works without

73
00:05:22.578 --> 00:05:25.123
me defining the signature for reduce.

74
00:05:27.465 --> 00:05:31.174
Nope, we're gonna have to do
reduce as well here, no problem.

75
00:05:31.174 --> 00:05:35.320
So the point of reduce is to iteratively,

76
00:05:35.320 --> 00:05:39.821
while processing a collection,
build up and

77
00:05:39.821 --> 00:05:44.802
eventually return a singular
value of some sort.

78
00:05:44.802 --> 00:05:53.167
And the iterative assembly of that value
is to be defined by a reducer function.

79
00:05:53.167 --> 00:05:57.047
So, again, input, a dictionary of Ts, and

80
00:05:57.047 --> 00:06:02.053
then we have whatever value
you're looking to arrive at,

81
00:06:02.053 --> 00:06:04.725
let's call it V, ffor value.

82
00:06:04.725 --> 00:06:08.009
So we're gonna actually return a V,
not a dictionary.

83
00:06:09.212 --> 00:06:12.452
And we could have a reducer.

84
00:06:12.452 --> 00:06:19.892
And let's do a multiline, as we did
before, Just to spread things out.

85
00:06:19.892 --> 00:06:25.913
So this is going to take a current value,

86
00:06:25.913 --> 00:06:29.364
which will be V, And

87
00:06:29.364 --> 00:06:33.991
then an item from the dictionary,
which will be a T.

88
00:06:33.991 --> 00:06:36.847
And it'll return V, right?

89
00:06:36.847 --> 00:06:41.808
So sometimes reduce is great for a
summation, where you have a running total,

90
00:06:41.808 --> 00:06:46.109
you add each item to the total,
ultimately return the whole total.

91
00:06:46.109 --> 00:06:49.120
So this is gonna take our running total,

92
00:06:49.120 --> 00:06:52.585
the thing that we might
factor into the total.

93
00:06:52.585 --> 00:06:56.122
And then here's the new total that
would be returned by the reducer.

94
00:06:56.122 --> 00:07:01.495
We also have an initial value,
which will be a V.

95
00:07:07.799 --> 00:07:13.313
We can get away with just returning
the initial value right away here.

96
00:07:13.313 --> 00:07:15.567
Let's go back to filter and tackle this.

97
00:07:15.567 --> 00:07:19.055
So what we're gonna do is
iterate over the dictionary, so

98
00:07:19.055 --> 00:07:22.272
we'll create a new dictionary
that we aim to return.

99
00:07:22.272 --> 00:07:27.562
And then we'll iterate over the dictionary
we're given, see which values pass

100
00:07:27.562 --> 00:07:32.879
the filter, and if they pass the filter,
we'll add them to the new dictionary.

101
00:07:32.879 --> 00:07:38.896
So we end up returning the subset of
properties that pass through the filter.

102
00:07:42.159 --> 00:07:46.082
So call this toReturn,
eventually will return it.

103
00:07:51.909 --> 00:07:55.512
This will start out empty.

104
00:07:59.758 --> 00:08:03.753
Great, and
we can take advantage of the for of loop.

105
00:08:03.753 --> 00:08:11.890
That's a really nice thing to use when
iterating over an object like this.

106
00:08:14.373 --> 00:08:17.268
We can verify that this
is the right thing to do.

107
00:08:17.268 --> 00:08:19.042
Let's see, input.

108
00:08:26.071 --> 00:08:28.699
Maybe it's the for
in loop that I'm thinking of.

109
00:08:28.699 --> 00:08:29.728
Yep, it is.

110
00:08:29.728 --> 00:08:31.785
Yeah, for us is for an iterable.

111
00:08:31.785 --> 00:08:34.377
This is iterating over
the properties of an object.

112
00:08:34.377 --> 00:08:36.468
So here we've got our input.

113
00:08:36.468 --> 00:08:38.348
Here we see that key is a string,

114
00:08:38.348 --> 00:08:42.054
that's a good signal that it's
probably the dictionary key.

115
00:08:42.054 --> 00:08:47.431
Great, so we could say thisValue

116
00:08:47.431 --> 00:08:51.662
is the input dictionary,

117
00:08:54.388 --> 00:08:59.551
And retrieve an item by key if the filter

118
00:08:59.551 --> 00:09:05.348
callback passes when
we give it this value.

119
00:09:05.348 --> 00:09:08.763
We're gonna add this to the dictionary.

120
00:09:08.763 --> 00:09:14.957
toReturn[key] = thisValue.

121
00:09:14.957 --> 00:09:21.116
Great, so that filter, that should work.

122
00:09:21.116 --> 00:09:23.540
Let's look at map.

123
00:09:23.540 --> 00:09:26.708
So I'm gonna start with the same
code as we use for filter,

124
00:09:26.708 --> 00:09:28.397
cuz a lot's gonna be similar.

125
00:09:28.397 --> 00:09:32.718
The difference here is we have
just a mapping callback that

126
00:09:32.718 --> 00:09:36.599
transforms from original
dictionary to whatever,

127
00:09:36.599 --> 00:09:41.373
it transforms each item from A to B,
whatever those things are.

128
00:09:41.373 --> 00:09:45.293
So the thing we'll eventually return,
it's a dictionary of Us,

129
00:09:45.293 --> 00:09:46.700
not a dictionary of Ts.

130
00:09:46.700 --> 00:09:49.725
So we'll just make that
little adjustment there.

131
00:09:49.725 --> 00:09:52.272
We're still gonna iterate
over the input dictionary.

132
00:09:52.272 --> 00:10:00.171
We're still going to grab the value for
each key.

133
00:10:00.171 --> 00:10:07.846
The difference here is we're always going
to append things to the new dictionary.

134
00:10:07.846 --> 00:10:11.814
It's not a condition,
it's a transformation.

135
00:10:11.814 --> 00:10:13.611
So we'll say toReturn.

136
00:10:17.304 --> 00:10:20.971
And then this is gonna be a map,
mappingCb.

137
00:10:20.971 --> 00:10:24.690
So effectively here, for each,

138
00:10:27.367 --> 00:10:33.628
We're going to get value and
then perform the transformation.

139
00:10:36.437 --> 00:10:39.280
I wanna look at my type errors here and
see what's going on.

140
00:10:39.280 --> 00:10:42.961
So it looks like our map dictionary,
one of our tests,

141
00:10:42.961 --> 00:10:47.774
it wants to be provided the name of
the item, the key, rather, right?

142
00:10:47.774 --> 00:10:51.624
So we can go back up top and
make sure we accommodate that.

143
00:10:51.624 --> 00:10:54.561
So key is a string.

144
00:10:54.561 --> 00:10:56.251
And we'll just pass that along here.

145
00:10:59.074 --> 00:11:00.418
Great, no more errors.

146
00:11:00.418 --> 00:11:05.271
Seems like that was the only little extra
feature of a callback we had to add.

147
00:11:05.271 --> 00:11:07.283
Let's run this code.

148
00:11:07.283 --> 00:11:14.557
Great, now we're starting to see some
tests passing, and see where we're at.

149
00:11:14.557 --> 00:11:17.410
So we have a failed assertion
here around reduce.

150
00:11:17.410 --> 00:11:20.130
Makes sense,
we haven't really implemented reduce yet.

151
00:11:20.130 --> 00:11:24.651
But let's check out, so map, sorry,

152
00:11:24.651 --> 00:11:31.365
let me zoom in here,
somehow I got scrolled, there we go.

153
00:11:31.365 --> 00:11:36.157
So we're passing all of our tests for map,
we're passing all of our tests for filter.

154
00:11:36.157 --> 00:11:40.135
We're actually passing some tests for
reduce already.

155
00:11:40.135 --> 00:11:42.917
We have only one test
that hasn't passed yet.

156
00:11:42.917 --> 00:11:47.856
And that's because reduce is
just first making sure that we

157
00:11:47.856 --> 00:11:51.617
return something, if it's a truthy thing.

158
00:11:51.617 --> 00:11:55.175
So this is the meaningful test
that we still have to pass.

159
00:11:55.175 --> 00:11:57.574
So let's look at reduce.

160
00:11:57.574 --> 00:12:00.039
So we're gonna start out
with an initial value.

161
00:12:00.039 --> 00:12:05.016
This is gonna be a let declaration,
Because

162
00:12:05.016 --> 00:12:10.245
we'll keep writing over it with every loop
over the array, or the dictionary, rather.

163
00:12:12.541 --> 00:12:16.377
So we'll first initialize
the value with what we're given,

164
00:12:16.377 --> 00:12:18.156
we'll return it at the end.

165
00:12:18.156 --> 00:12:25.066
We're still going to loop, so I'm gonna
borrow some of that code from filter.

166
00:12:25.066 --> 00:12:27.305
Just the for in loop.

167
00:12:31.575 --> 00:12:36.361
And this actually,
while conceptually a bit abstract,

168
00:12:36.361 --> 00:12:39.960
it is implementation wise pretty simple.

169
00:12:39.960 --> 00:12:47.116
So the new value is reducer.

170
00:12:47.116 --> 00:12:53.072
And we'll pass in the last thing we had
for the current value and the item.

171
00:12:58.635 --> 00:13:00.627
Let's try to run this and
see where we're at.

172
00:13:05.052 --> 00:13:07.634
All right,
looks like we passed all the tests.

173
00:13:07.634 --> 00:13:12.027
So we just wrote higher
order functions for

174
00:13:12.027 --> 00:13:15.819
dictionaries using generic types.

175
00:13:15.819 --> 00:13:21.063
These will work for any dictionaries
that you might have in your code base.

176
00:13:21.063 --> 00:13:25.375
And you'll preserve all of
your type information as

177
00:13:25.375 --> 00:13:29.496
your collections pass
through these functions.

178
00:13:29.496 --> 00:13:33.221
Hopefully this illustrates
why type params and

179
00:13:33.221 --> 00:13:36.675
generics are an incredibly powerful tool.

180
00:13:36.675 --> 00:13:43.560
We get the ability to use these flexibly
without giving up all of our type safety.

