WEBVTT

1
00:00:00.320 --> 00:00:02.720
So we're gonna take a little
bit of a step back here.

2
00:00:02.720 --> 00:00:07.556
So far we've talked about variables,
simple function argument types,

3
00:00:07.556 --> 00:00:09.090
and return types.

4
00:00:09.090 --> 00:00:11.770
We've talked about objects,
arrays, and tuples.

5
00:00:11.770 --> 00:00:18.430
And now I want us to step back and
consider different kinds of type systems.

6
00:00:18.430 --> 00:00:20.005
And more specifically,

7
00:00:20.005 --> 00:00:23.860
how do we categorize different
kinds of types systems?

8
00:00:23.860 --> 00:00:28.010
Because we hear a lot of words
to describe these things, right?

9
00:00:28.010 --> 00:00:33.340
Static, dynamic, duck typing,
some people use this term strong types.

10
00:00:33.340 --> 00:00:35.040
What does it all mean?

11
00:00:35.040 --> 00:00:38.870
And what is the way to describe
what we're seeing type scripts do?

12
00:00:38.870 --> 00:00:43.490
So first, we need to understand,
what is type checking?

13
00:00:43.490 --> 00:00:50.237
Type checking has to do with answering
a question about type equivalence.

14
00:00:50.237 --> 00:00:54.905
As in, when we're using a foo,
a function here,

15
00:00:54.905 --> 00:00:57.906
is the value we're passing in,

16
00:00:57.906 --> 00:01:03.150
equivalent to what the function
is designed to accept?

17
00:01:03.150 --> 00:01:04.840
It's a comparison, right?

18
00:01:04.840 --> 00:01:11.590
Does this align with the constraints
of where I'm trying to use this value?

19
00:01:11.590 --> 00:01:15.100
That is type compatibility or
type equivalence.

20
00:01:15.100 --> 00:01:19.230
That's the question that we're evaluating
when we analyze this code, and

21
00:01:19.230 --> 00:01:22.597
think about whether we should
have an error on this line here.

22
00:01:25.215 --> 00:01:28.360
This happens when you pass
a value into a function.

23
00:01:28.360 --> 00:01:30.660
This happens when you assign things.

24
00:01:30.660 --> 00:01:34.050
So in this case, let's say x and
y are both variables.

25
00:01:34.050 --> 00:01:38.393
And here we'd be wondering
is the value that y holds

26
00:01:38.393 --> 00:01:42.030
type-equivalent to what x wants to hold?

27
00:01:43.130 --> 00:01:46.260
And if so, this assignment may
proceed without objection.

28
00:01:47.700 --> 00:01:50.859
But if x wants a number and
y hold the string, problem.

29
00:01:53.154 --> 00:01:56.486
Type equivalence checks
happen on return types,

30
00:01:56.486 --> 00:02:00.388
especially when you have this
explicit return type here.

31
00:02:00.388 --> 00:02:05.100
Is my strings an array of strings?

32
00:02:05.100 --> 00:02:06.788
That's what we said we would return.

33
00:02:06.788 --> 00:02:08.347
Are we returning it?

34
00:02:08.347 --> 00:02:13.124
Is the value I'm returning
equivalent to the type this function

35
00:02:13.124 --> 00:02:15.630
says it's going to return?

36
00:02:15.630 --> 00:02:20.603
So this is the same question,
it's just sort of asked in several places.

37
00:02:20.603 --> 00:02:27.742
You can check this footnote out if you
wanna see another example that's weird.

38
00:02:27.742 --> 00:02:30.340
But this is most of what
you wanna think about.

39
00:02:31.930 --> 00:02:36.977
So, with that question in mind,
let's think about different

40
00:02:36.977 --> 00:02:42.270
kinds of type systems and
how they answer this question.

41
00:02:42.270 --> 00:02:49.034
So the first way to categorize different
types systems is static versus dynamic.

42
00:02:49.034 --> 00:02:54.266
Static type systems have you
write types in your code.

43
00:02:54.266 --> 00:02:57.960
And that's TypeScript is
one of these things, right?

44
00:02:57.960 --> 00:03:02.860
Java, c++, C sharp, any of these
things are static type systems.

45
00:03:02.860 --> 00:03:07.452
It could be argued that Python with
type hints also kind of fits into

46
00:03:07.452 --> 00:03:11.553
this category, but
there's not much enforcement there.

47
00:03:11.553 --> 00:03:16.460
So it'd be a hard thing to defend.

48
00:03:16.460 --> 00:03:20.271
But TypeScript is definitely
a static type system.

49
00:03:20.271 --> 00:03:24.110
Types are in your code and
they're evaluated as part of the belt.

50
00:03:24.110 --> 00:03:31.520
Dynamic type systems perform their
type equivalence check at runtime.

51
00:03:31.520 --> 00:03:35.762
So, this includes a bunch of
languages here, where typically,

52
00:03:35.762 --> 00:03:39.771
you're just gonna see variable
declarations that just say,

53
00:03:39.771 --> 00:03:43.470
I have a variable name and
its value is Mike.

54
00:03:43.470 --> 00:03:45.310
And there are no types there, right?

55
00:03:45.310 --> 00:03:52.236
There's no support really for
adding types in a formalized way.

56
00:03:52.236 --> 00:03:57.410
We can also think about type system
as either nominal or structural.

57
00:03:57.410 --> 00:04:02.601
This is a weird one, because
TypeScript is a structural type system.

58
00:04:02.601 --> 00:04:07.493
But just about every other thing you
see in the programming language world,

59
00:04:07.493 --> 00:04:09.910
they are nominal type systems.

60
00:04:09.910 --> 00:04:13.870
So nominal type systems
is all about a name.

61
00:04:13.870 --> 00:04:15.090
That's what nominal means.

62
00:04:16.460 --> 00:04:19.520
So here's a sample of Java code.

63
00:04:19.520 --> 00:04:23.427
And you can see here, similar to
TypeScript, we have some properties,

64
00:04:23.427 --> 00:04:25.950
they are associated with some types.

65
00:04:25.950 --> 00:04:29.689
We have a class that
contains these properties.

66
00:04:29.689 --> 00:04:36.963
And we have a function here, print car and
it takes a car as an argument.

67
00:04:36.963 --> 00:04:43.370
The type equivalence check
that is evaluated down here,

68
00:04:43.370 --> 00:04:50.184
it's really did myCar come out
of a constructor called Car?

69
00:04:50.184 --> 00:04:53.460
Is your class named Car?

70
00:04:53.460 --> 00:04:55.460
That's a nominal type system.

71
00:04:55.460 --> 00:04:59.120
Everything is about what
is the name of your class?

72
00:04:59.120 --> 00:05:03.250
And the reason that this wouldn't work so
well in the JavaScript world

73
00:05:03.250 --> 00:05:08.480
is there's a whole lot of code out there
that's not written with classes like this.

74
00:05:08.480 --> 00:05:12.790
We pass objects with properties
around all the time.

75
00:05:12.790 --> 00:05:15.540
And if we had to convert
everything to classes,

76
00:05:15.540 --> 00:05:19.872
that would be a very substantial change
to our code bases that if required as

77
00:05:19.872 --> 00:05:24.480
part of migrating to TypeScript,
it would just be a lot of extra work.

78
00:05:24.480 --> 00:05:30.239
So a nominal type system won't
really fit existing JavaScript code,

79
00:05:30.239 --> 00:05:34.250
structural type systems
just care about shape.

80
00:05:35.470 --> 00:05:42.383
So here we have similar other classes
here, we can even have Car and

81
00:05:42.383 --> 00:05:46.960
Truck which kind of share some properties.

82
00:05:46.960 --> 00:05:51.650
We've got make model and year,
they exist both on Car and Truck.

83
00:05:51.650 --> 00:05:56.190
And we've even got an object here,
it's not an instance of a class,

84
00:05:56.190 --> 00:05:58.318
it has make, model, and year.

85
00:05:58.318 --> 00:06:01.840
Turns out,
everything's gonna work with printCar.

86
00:06:01.840 --> 00:06:07.610
All printCar cares about here is
do you have make, model, and year?

87
00:06:07.610 --> 00:06:13.034
It doesn't matter if you're an instance of
a class, or you're just a regular object,

88
00:06:13.034 --> 00:06:18.410
or maybe you're some weird function
with some properties hanging off of it.

89
00:06:18.410 --> 00:06:19.670
I mean, that's a class, right?

90
00:06:19.670 --> 00:06:23.720
But [LAUGH] it'll work with any of them.

91
00:06:23.720 --> 00:06:28.078
All it cares about is look, I intend
to reach into whatever you give me and

92
00:06:28.078 --> 00:06:32.390
I'm gonna use make, I'm gonna use a model,
I'm gonna use year.

93
00:06:32.390 --> 00:06:38.830
I don't care about the other stuff
going on around it, here's what I need.

94
00:06:38.830 --> 00:06:40.960
That's a structural type system.

95
00:06:40.960 --> 00:06:46.220
And these words here, Car and Truck,
they're just around for our convenience.

96
00:06:46.220 --> 00:06:52.290
They're around so that we as code authors
can make sense of what our code is doing.

97
00:06:52.290 --> 00:06:56.703
They play no role in any sort of

98
00:06:56.703 --> 00:07:01.490
type-equivalents checking.

99
00:07:01.490 --> 00:07:06.315
You could make something that might
simulate what's happening in Java.

100
00:07:06.315 --> 00:07:14.406
You'd have to say give me a value
that has a constructor property,

101
00:07:14.406 --> 00:07:19.185
which is a function that returns cars.

102
00:07:19.185 --> 00:07:24.470
Okay, you've defined the structure of
something that is a factory of cars and

103
00:07:24.470 --> 00:07:25.998
that is the car class.

104
00:07:25.998 --> 00:07:31.572
Okay, you could do that but
normal TypeScript code will not, right?

105
00:07:31.572 --> 00:07:35.535
Normal TypeScript code,
it's just do you have what I need?

106
00:07:35.535 --> 00:07:39.035
The properties and
the types those properties can hold.

107
00:07:39.035 --> 00:07:40.955
If so, we're good to go.

108
00:07:40.955 --> 00:07:41.645
Duck typing.

109
00:07:42.840 --> 00:07:44.390
We hear about duck typing.

110
00:07:44.390 --> 00:07:50.660
I mean, people describe JavaScript as
a duck typed programming language.

111
00:07:50.660 --> 00:07:54.606
And this gets its name from the duck test,
which means if it looks like a duck,

112
00:07:54.606 --> 00:07:58.480
swims like a duck, quacks like a duck,
it's probably a duck.

113
00:07:58.480 --> 00:08:02.902
And this is kind of another
way of saying dynamic typing,

114
00:08:02.902 --> 00:08:08.613
where we kinda attempt to go ahead and
use something, and if it works out,

115
00:08:08.613 --> 00:08:13.430
okay, and if it doesn't,
we'll throw an error at runtime.

116
00:08:13.430 --> 00:08:16.290
That's how JavaScript works.

117
00:08:16.290 --> 00:08:21.400
You can think of it as having
similarities to structural typing.

118
00:08:21.400 --> 00:08:26.000
In that, you just care about
having what you need, right?

119
00:08:26.000 --> 00:08:28.540
You don't care about who created it.

120
00:08:28.540 --> 00:08:33.399
It's similar to structural typing in
that way, but it's also dynamic typing,

121
00:08:33.399 --> 00:08:37.320
in that there is no type information
at build time to evaluate.

122
00:08:37.320 --> 00:08:39.440
So all of these errors
are popping up at runtime.

123
00:08:39.440 --> 00:08:41.140
Does that make sense?

124
00:08:41.140 --> 00:08:44.220
I mean, it might be a little bit of
a stretch to say it's similar to

125
00:08:44.220 --> 00:08:45.232
structural typing.

126
00:08:45.232 --> 00:08:48.710
But what they do have in common
is they have no concern for

127
00:08:48.710 --> 00:08:53.005
whether you came out of a class or
whether you're an object literal.

128
00:08:53.005 --> 00:08:58.150
As long as you have what is needed
in order to carry out the operation,

129
00:08:58.150 --> 00:08:59.846
we'll try to do that.

130
00:09:01.497 --> 00:09:05.014
But structural typing usually goes
with static types as well, right,

131
00:09:05.014 --> 00:09:07.110
where you have that type information.

132
00:09:07.110 --> 00:09:11.050
Okay, finally,
we have strong versus weak types.

133
00:09:11.050 --> 00:09:14.270
These terms don't really
have good definitions.

134
00:09:14.270 --> 00:09:18.790
There's no such thing I'm aware
of that's called strong typing.

135
00:09:18.790 --> 00:09:23.416
When people use the word strong typing,
I think they usually mean,

136
00:09:23.416 --> 00:09:26.430
static types, types that are in your code.

137
00:09:27.740 --> 00:09:31.322
And when they say weak types,
I think they mean dynamic types.

138
00:09:31.322 --> 00:09:35.660
But there is no consensus around
a definition for any of these terms.

139
00:09:35.660 --> 00:09:40.647
So you won't hear me use strong types
in this course, except right now?

140
00:09:40.647 --> 00:09:46.202
Static and dynamic, right, are the types
in the code, or do we attempt

141
00:09:46.202 --> 00:09:51.490
to sort of YOLO it and figure out if
things are gonna work at runtime?

