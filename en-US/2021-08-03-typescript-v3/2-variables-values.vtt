WEBVTT

1
00:00:00.310 --> 00:00:02.850
Let's talk about variables and values.

2
00:00:02.850 --> 00:00:06.363
In this chapter,
we're gonna talk about simple let and

3
00:00:06.363 --> 00:00:10.700
const declarations and
the very basics of typing functions.

4
00:00:10.700 --> 00:00:12.778
And that will serve as
a good foundation for

5
00:00:12.778 --> 00:00:15.445
us to start building other
more complicated types on.

6
00:00:17.285 --> 00:00:21.633
So variable declarations in JavaScript,
kind of look like this, right?

7
00:00:21.633 --> 00:00:26.268
We have let and const hopefully
nobody's using bar anymore, but

8
00:00:26.268 --> 00:00:29.565
we can just say something like,
let age = 6.

9
00:00:29.565 --> 00:00:35.200
And you may note that TypeScript is
kinda figured out this is a number.

10
00:00:35.200 --> 00:00:37.833
This does not seem like
an impressive trick,

11
00:00:37.833 --> 00:00:40.690
because obviously 6 is a number, right?

12
00:00:40.690 --> 00:00:43.303
Well, what you're seeing is inference,

13
00:00:43.303 --> 00:00:47.610
where TypeScript can contextually
understand the situation.

14
00:00:47.610 --> 00:00:53.180
It can see that yes, we have a variable
declaration with an initializer, right?

15
00:00:53.180 --> 00:00:59.640
Where we're assigning it to 6 right away,
clearly that should be a number, right?

16
00:01:01.320 --> 00:01:05.898
And not every programming language has
this by the wa,y if you work in the Java

17
00:01:05.898 --> 00:01:07.025
or the C++ area,

18
00:01:07.025 --> 00:01:11.120
every variable declaration typically
comes with the type up front.

19
00:01:11.120 --> 00:01:17.020
You have to say like int age =6,
you'd have to say it's an IT.

20
00:01:17.020 --> 00:01:19.670
This up here seems like
regular JavaScript.

21
00:01:19.670 --> 00:01:23.755
But down here, you could totally
do this with JavaScript, but

22
00:01:23.755 --> 00:01:25.772
TypeScript is unhappy, why?

23
00:01:25.772 --> 00:01:30.640
Age was the variable that was born
with a type and that type is number.

24
00:01:31.820 --> 00:01:34.995
And we can see that if we attempt
to give it a value that's a string,

25
00:01:34.995 --> 00:01:36.670
it's going to yell at us.

26
00:01:36.670 --> 00:01:40.030
This is the kind of thing that
TypeScript is designed to catch.

27
00:01:43.160 --> 00:01:47.920
I want you to remember that in TypeScript
variables are born with their types.

28
00:01:47.920 --> 00:01:49.572
So there are things we can do,

29
00:01:49.572 --> 00:01:53.289
which we'll learn about later to
make these types more specific.

30
00:01:54.580 --> 00:01:58.380
But it's hard to make them more general,
once they're declared.

31
00:01:59.660 --> 00:02:03.606
So, it's important to make sure that
when you define your variables,

32
00:02:03.606 --> 00:02:06.670
they have the types that
you need them to have.

33
00:02:06.670 --> 00:02:10.205
And if you ever need to generalize them,
usually you go right back to that variable

34
00:02:10.205 --> 00:02:13.340
declaration, and
that's where you have to make a change.

35
00:02:13.340 --> 00:02:16.513
So let's look at a similar example,
but with const.

36
00:02:16.513 --> 00:02:19.489
So if we just change our let to const,

37
00:02:19.489 --> 00:02:24.686
we can see that we get a different
type here, and that type is 6.

38
00:02:24.686 --> 00:02:27.147
And you might think,
well 6 is a value, right?

39
00:02:27.147 --> 00:02:29.920
Number is a type 6 is a value.

40
00:02:29.920 --> 00:02:34.288
What we have here is
called a literal type and

41
00:02:34.288 --> 00:02:38.450
it's a more specific kind of type.

42
00:02:38.450 --> 00:02:43.720
It's not just any number,
it's any number that is 6.

43
00:02:43.720 --> 00:02:45.360
You can think of it that way, right?

44
00:02:46.730 --> 00:02:51.358
So the reason that changing let
to const has done this thing,

45
00:02:51.358 --> 00:02:56.470
that we see before our eyes has
to do with two things going on.

46
00:02:56.470 --> 00:03:01.740
One, it's the nature of const's
declarations, they can't be reassigned.

47
00:03:01.740 --> 00:03:07.416
So we know that once we point it at a
thing, it will forever pointed that thing,

48
00:03:07.416 --> 00:03:11.200
age will always point to
whatever it is assigned to.

49
00:03:11.200 --> 00:03:17.140
And then the second is that, numbers in
JavaScript are immutable value types.

50
00:03:17.140 --> 00:03:22.830
Unlike arrays, where that's a value type
where you can push things into it, right?

51
00:03:22.830 --> 00:03:25.900
6 will always be 6, right?

52
00:03:25.900 --> 00:03:32.330
We can create a new number, but
we can't change an existing number.

53
00:03:33.510 --> 00:03:36.342
So basically,
this whole thing is poured and concrete,

54
00:03:36.342 --> 00:03:39.800
where it's a variable that can
never point to something else.

55
00:03:39.800 --> 00:03:42.720
And the thing it currently
points to cannot change.

56
00:03:42.720 --> 00:03:47.040
So we know very specifically that
this is 6 and it will always be 6.

57
00:03:48.700 --> 00:03:54.090
So TypeScript can make a safe
more specific assumption here.

58
00:03:55.140 --> 00:03:59.181
And that's a theme we're going to
see over and over, by the way,

59
00:03:59.181 --> 00:04:03.080
where TypeScript tries to make
the most specific assumption,

60
00:04:03.080 --> 00:04:06.111
that it can without risking
getting in your way.

61
00:04:06.111 --> 00:04:12.381
So 6 is called a literal type,
meaning it is literally the number 6 and

62
00:04:12.381 --> 00:04:17.291
if we think about why we were
able to make this assumption

63
00:04:17.291 --> 00:04:22.530
more specifically,
like we said in our two reasons there.

64
00:04:22.530 --> 00:04:27.430
But imagine if we made that same kind
of very specific assumption with

65
00:04:27.430 --> 00:04:29.360
a let declaration.

66
00:04:29.360 --> 00:04:30.800
So if we go back up here,

67
00:04:30.800 --> 00:04:36.180
what if we assumed age was always going
to be 6 that would get in our way, right?

68
00:04:36.180 --> 00:04:40.867
Like the nature of let declarations we're
probably going to assign them to something

69
00:04:40.867 --> 00:04:42.290
else in the future.

70
00:04:42.290 --> 00:04:46.760
And that's why you get that
the more relaxed constraint there,

71
00:04:46.760 --> 00:04:52.415
where normal code that treats this as
a number is going to behave nicely, right?

72
00:04:52.415 --> 00:04:55.460
Don't want TypeScript
to get into your way.

73
00:04:57.540 --> 00:05:00.900
We're gonna see literal types over and
over, but

74
00:05:00.900 --> 00:05:04.430
you can just think of them
as a set of allowed values.

75
00:05:07.400 --> 00:05:12.770
So sometimes we end up in situations
where we have to declare a variable,

76
00:05:12.770 --> 00:05:17.090
and then the variable gets
its value sometime later.

77
00:05:17.090 --> 00:05:23.332
So let's look at this piece of code
which begins with a timestamp,

78
00:05:23.332 --> 00:05:28.347
and it ends up measuring a startTime and
then sometime

79
00:05:28.347 --> 00:05:34.380
later when it finishes a random wait,
and it record an endTime.

80
00:05:34.380 --> 00:05:40.549
So maybe we wanna have access to
this endTime in this outer scope.

81
00:05:41.980 --> 00:05:44.734
But clearly like within
this set timeout function,

82
00:05:44.734 --> 00:05:48.460
that's when it's actually
going to get its endTime.

83
00:05:48.460 --> 00:05:50.180
So you could end up with
something like this.

84
00:05:50.180 --> 00:05:53.078
And if we look at the way this is defined,

85
00:05:53.078 --> 00:05:58.815
we can see that this is of type any that's
what this notation means, by the way.

86
00:05:58.815 --> 00:06:04.720
EndTime is a variable, it's a let
declaration and it has a type called any.

87
00:06:04.720 --> 00:06:08.470
Any is the most flexible
type in TypeScript.

88
00:06:10.090 --> 00:06:14.524
And you can think of it kind of
like JavaScript variable rules,

89
00:06:14.524 --> 00:06:18.537
where we could set it equal to
a string and then a number and

90
00:06:18.537 --> 00:06:24.210
then a function and then null and
then whatever, there's no constraint.

91
00:06:24.210 --> 00:06:28.530
It can be anything, any value that
is allowed in the JavaScript world.

92
00:06:28.530 --> 00:06:31.213
So it's not necessarily bad, but

93
00:06:31.213 --> 00:06:35.200
it's often much more
flexible than what you want.

94
00:06:36.530 --> 00:06:40.455
And in this case, we can see that
there's just not enough information for

95
00:06:40.455 --> 00:06:43.870
TypeScript to make a guess
as to what this should be.

96
00:06:43.870 --> 00:06:49.530
Because types are assigned to variables
when those variables are born.

97
00:06:49.530 --> 00:06:53.571
And when this is born, we don't know when
the set timeout is gonna be invoked, and

98
00:06:53.571 --> 00:06:55.810
we don't know what value
it's going to get.

99
00:06:56.980 --> 00:07:02.700
So in this case, we need to add
what's called a type annotation.

100
00:07:04.440 --> 00:07:10.540
And that is our colon type syntax, right?

101
00:07:10.540 --> 00:07:14.313
Where let here, what we're saying is,
endTime is a Date,

102
00:07:14.313 --> 00:07:18.385
we're not giving it a value yet,
but it's going to get a Date and

103
00:07:18.385 --> 00:07:22.060
you should treat it as if
it's going to get a Date.

104
00:07:22.060 --> 00:07:23.065
And now when we for

105
00:07:23.065 --> 00:07:28.070
some reason we're setting this to = to
0 before we give it its real endTime.

106
00:07:28.070 --> 00:07:30.710
We're told that we can't give it a number.

107
00:07:30.710 --> 00:07:33.460
This is a slot that's designed for a Date.

108
00:07:33.460 --> 00:07:35.010
This is exactly what we should give it.

109
00:07:36.730 --> 00:07:40.150
So now we're seeing enforcement of types.

110
00:07:40.150 --> 00:07:44.207
I only add type annotations
like this when I have to,

111
00:07:44.207 --> 00:07:47.987
because it's just extra
stuff in your code, and

112
00:07:47.987 --> 00:07:53.710
it tends to make things a little
bit more difficult to refactor.

113
00:07:53.710 --> 00:07:56.445
If you start adding types
all over the place, but

114
00:07:56.445 --> 00:08:00.830
in this case it's absolutely
appropriate and absolutely necessary.

115
00:08:00.830 --> 00:08:02.660
So let's look at functions.

116
00:08:02.660 --> 00:08:08.109
This same syntax that we saw with
this variable up here, right?

117
00:08:08.109 --> 00:08:12.644
Colon Date this can be used with our
add function here that we saw in

118
00:08:12.644 --> 00:08:14.799
the first slide of the course.

119
00:08:16.160 --> 00:08:20.020
It can be use to state that a and
b are numbers.

120
00:08:20.020 --> 00:08:22.650
And this function add returns numbers.

121
00:08:24.490 --> 00:08:28.170
You can see that by default,
everything ends up being any.

122
00:08:29.650 --> 00:08:32.531
This is because like imagine
we were converting this from

123
00:08:32.531 --> 00:08:34.990
a JavaScript file to a TypeScript file.

124
00:08:34.990 --> 00:08:39.062
Maybe we start with everything loose and
then we wanna crank things up and

125
00:08:39.062 --> 00:08:40.539
define the types as we go.

126
00:08:40.539 --> 00:08:44.160
That's probably not what we
want in the end now, right?

127
00:08:44.160 --> 00:08:47.080
So why is any gonna be
a problem in this case?

128
00:08:47.080 --> 00:08:48.690
Well, look here.

129
00:08:48.690 --> 00:08:54.014
This we know is gonna be 7 based on
the implementation of the function a+b.

130
00:08:55.430 --> 00:09:00.397
So we know promise doesn't accept
7 as its constructor argument, but

131
00:09:00.397 --> 00:09:03.310
TypeScript seems to be happy about this.

132
00:09:05.360 --> 00:09:08.118
This is not the same point
that I was making before,

133
00:09:08.118 --> 00:09:12.530
where the return value doesn't have
a type and therefore we could use it.

134
00:09:12.530 --> 00:09:14.660
We can reach into it in unsafe ways.

135
00:09:14.660 --> 00:09:17.360
If you have an any that's floating around.

136
00:09:17.360 --> 00:09:22.415
If that value enters well typed code,
it will break that well typed code,

137
00:09:22.415 --> 00:09:27.500
so the guarantees I have around
promises don't matter right now.

138
00:09:27.500 --> 00:09:31.915
Because I have this any, so having
something like this floating around can

139
00:09:31.915 --> 00:09:35.590
weaken your guarantees that
you have around your code.

140
00:09:35.590 --> 00:09:39.780
It's kinda dangerous thin,
now I say dangerous.

141
00:09:39.780 --> 00:09:45.040
It's only as dangerous as a regular
JavaScript variable, which is dangerous.

142
00:09:45.040 --> 00:09:47.780
So let's add some type annotations here.

143
00:09:47.780 --> 00:09:52.760
We can say that a and b are arguments,
each of them is a number.

144
00:09:52.760 --> 00:09:56.490
And here it's very clear that
the result that's returned is a number.

145
00:09:56.490 --> 00:10:00.121
And if we attempt to use this,
I mean, we already saw this example,

146
00:10:00.121 --> 00:10:04.580
we can't pass a string in that's
not compatible with a number.

147
00:10:04.580 --> 00:10:08.962
You may notice that, the return type
of the function is also inferred so

148
00:10:08.962 --> 00:10:11.737
that number on the right
side of the tooltip,

149
00:10:11.737 --> 00:10:16.629
the compiler is smart enough to figure out
that a + b, the result of adding those

150
00:10:16.629 --> 00:10:20.380
numbers together is a number and
that's what's returned.

