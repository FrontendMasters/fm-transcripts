WEBVTT

1
00:00:00.002 --> 00:00:04.650
It's time for us to dive a little
bit more deeply into functions and

2
00:00:04.650 --> 00:00:09.383
there were a couple of these early
topics we needed to tackle first.

3
00:00:09.383 --> 00:00:16.230
The union intersection operators for
sure and these named types, right?

4
00:00:16.230 --> 00:00:19.926
Like interfaces, type aliases,
so now we're ready for

5
00:00:19.926 --> 00:00:24.900
this and we already talked about
argument types and return types.

6
00:00:24.900 --> 00:00:30.921
Now we're gonna go deeper, so we're gonna
talk about defining Callable types,

7
00:00:30.921 --> 00:00:35.660
by that I mean,
interfaces that describe functions.

8
00:00:35.660 --> 00:00:41.674
Interfaces are type aliases rather, that
describes something that can be invoked,

9
00:00:41.674 --> 00:00:45.950
or something that can be
constructed using the new keyword.

10
00:00:47.290 --> 00:00:50.090
We're gonna talk about
function overloads and

11
00:00:50.090 --> 00:00:54.710
I won't even attempt to give you a sneak
preview of what that is because it's,

12
00:00:54.710 --> 00:00:58.830
if you've never seen it before,
it's kind of a wild concept.

13
00:00:58.830 --> 00:01:04.705
We'll talk about typing this,
If your function has a special need for

14
00:01:04.705 --> 00:01:11.690
making sure that whenever it's invoked,
it's, this scope is a specific thing.

15
00:01:13.080 --> 00:01:18.367
And then finally I think we covered
this a little bit, but we'll touch

16
00:01:18.367 --> 00:01:24.476
one more time on function return types,
and best practices, so let's jump in.

17
00:01:24.476 --> 00:01:26.863
Type aliases and interfaces,

18
00:01:26.863 --> 00:01:31.834
they both provide some capacity for
defining a call signature.

19
00:01:31.834 --> 00:01:35.739
So this is an interface we're used to
seeing instead of this thing that I've

20
00:01:35.739 --> 00:01:40.025
highlighted, we're used to seeing a bunch
of different property names, right?

21
00:01:40.025 --> 00:01:45.908
Instead we have parentheses and within
them what appears to be an argument list,

22
00:01:45.908 --> 00:01:48.946
and then a colon, and then a return type.

23
00:01:48.946 --> 00:01:52.558
So, this is a callable thing,
in a type aliases form,

24
00:01:52.558 --> 00:01:56.957
this is what it would look like and
note that we're using a fat arrow

25
00:01:56.957 --> 00:02:01.930
here kind of like an arrow function,
whereas up here we're using a colon.

26
00:02:03.620 --> 00:02:09.176
These are totally equivalent,
these top two and we can see here,

27
00:02:09.176 --> 00:02:16.246
we benefit when we do something like this
to define functions stored on variables,

28
00:02:16.246 --> 00:02:21.290
we benefit from having defined
these call signatures.

29
00:02:21.290 --> 00:02:26.420
We don't need to have type
annotations on function arguments.

30
00:02:26.420 --> 00:02:31.277
Usually you always need to, well that's
not gonna use usually an always in

31
00:02:31.277 --> 00:02:35.132
same sentence, but
with regular function declarations,

32
00:02:35.132 --> 00:02:39.780
you must include argument types
because there's no way to infer them.

33
00:02:41.090 --> 00:02:41.984
In this case,

34
00:02:41.984 --> 00:02:47.580
all of the type information you need is on
the left side of the assignment operator.

35
00:02:47.580 --> 00:02:51.731
So we know this is a number, we know this
is a number and we know we should be

36
00:02:51.731 --> 00:02:56.160
returning a number, you don't need
to state that information again.

37
00:02:56.160 --> 00:03:00.850
This is great for
things like callbacks, right?

38
00:03:00.850 --> 00:03:04.790
Where it just saves you from having to
add more and more type annotations.

39
00:03:04.790 --> 00:03:09.749
Sometimes we don't return
anything from functions and

40
00:03:09.749 --> 00:03:12.817
so, scream in the chat or on zoom.

41
00:03:12.817 --> 00:03:16.691
What is the function return if we have
no return statement in JavaScript,

42
00:03:16.691 --> 00:03:20.068
like if we capture the return value and
try to use it, what is it?

43
00:03:20.068 --> 00:03:21.402
Is it 42?

44
00:03:21.402 --> 00:03:26.780
Undefined, great, it's undefined,
so functions if they don't return,

45
00:03:26.780 --> 00:03:31.805
what we get when we attempt to use
their return value is undefined.

46
00:03:31.805 --> 00:03:36.493
Well, JavaScript has a way of,
sorry, TypeScript has

47
00:03:36.493 --> 00:03:41.480
a way of describing this and
it's with a void return type and

48
00:03:41.480 --> 00:03:45.871
this means specifically that
the return type of this

49
00:03:45.871 --> 00:03:50.292
function should not be used,
it should be ignored.

50
00:03:50.292 --> 00:03:54.229
So we could type these
functions as undefined, right?

51
00:03:54.229 --> 00:03:58.762
So, here's our callback, we have this
is a higher order function to run some

52
00:03:58.762 --> 00:04:02.477
function in four seconds and
here's the thing to run, right?

53
00:04:02.477 --> 00:04:08.274
It returns undefined and then here's
another one invoke in five seconds,

54
00:04:08.274 --> 00:04:10.492
and its return type is void.

55
00:04:10.492 --> 00:04:15.915
So, note that this little
arrow function here,

56
00:04:15.915 --> 00:04:20.294
it happens to return something, why?

57
00:04:20.294 --> 00:04:25.913
Because, although we hardly ever
use it Array.push actually returns

58
00:04:25.913 --> 00:04:32.270
a number that I mean, I don't even
know what this number represents.

59
00:04:32.270 --> 00:04:37.395
We think of it almost like an entirely
state modifying method that

60
00:04:37.395 --> 00:04:43.870
doesn't really return something useful,
it happens to return something.

61
00:04:43.870 --> 00:04:49.746
So, the void case is quite happy with
this, the undefined cases not, so there's

62
00:04:49.746 --> 00:04:56.080
a difference between saying the return
value of this function should be ignored.

63
00:04:56.080 --> 00:05:00.326
Versus, I promise I will
always return undefined,

64
00:05:00.326 --> 00:05:05.635
a void callback here you're fun,
returning whatever you like,

65
00:05:05.635 --> 00:05:12.390
you will be encouraged to not use that
value within the body of this function.

66
00:05:12.390 --> 00:05:17.499
But it's fine if you happen to return
something, whereas in this case up here,

67
00:05:17.499 --> 00:05:22.610
you may not return something versus
here it's like do what you like.

68
00:05:22.610 --> 00:05:26.027
Void is happy with whatever because
we're not going to use it, right?

69
00:05:26.027 --> 00:05:30.733
So, that's the difference and important
difference between void and undefined,

70
00:05:30.733 --> 00:05:34.240
void should only appear as
a function return type.

71
00:05:34.240 --> 00:05:38.960
You should not be using it anywhere
else because what it means is

72
00:05:38.960 --> 00:05:44.890
the return value of this function
should be Ignored and left unused.

73
00:05:44.890 --> 00:05:48.307
Let's talk about construct signatures for
a moment,

74
00:05:48.307 --> 00:05:53.281
this is another area that is sort of rare,
cuz oftentimes we just define classes

75
00:05:53.281 --> 00:05:56.789
which kind of have this sort
of functionality built in.

76
00:05:56.789 --> 00:06:02.690
But we have the ability to do this, so
here's an example of a Date constructor,

77
00:06:02.690 --> 00:06:05.684
and it looks just like a call signature,

78
00:06:05.684 --> 00:06:10.551
except we've added this new
keyword in front of it, that's it.

79
00:06:10.551 --> 00:06:15.553
So now, if I were to create something
that I'm calling, my Date constructor,

80
00:06:15.553 --> 00:06:20.190
set it equal to the date, class itself,
not a new instance of date.

81
00:06:20.190 --> 00:06:23.724
Now you see the TypeScript perfectly
happy to let me instantiate,

82
00:06:23.724 --> 00:06:27.319
you probably won't come across this
very often, but if you see it,

83
00:06:27.319 --> 00:06:29.900
I want you to know what you're looking at.

84
00:06:29.900 --> 00:06:34.521
This, you should come across
function overloads, so,

85
00:06:34.521 --> 00:06:40.587
because this is a Kind of abstract
concept, I wanna motivate the existence

86
00:06:40.587 --> 00:06:45.710
of this thing, function overloads
with a potential use case.

87
00:06:46.780 --> 00:06:52.286
So, let's imagine a situation where
we wanted to create a function that

88
00:06:52.286 --> 00:06:58.514
allows us to register what we're calling
a main event listener where that means,

89
00:06:58.514 --> 00:07:03.953
the primary event of whatever DOM
element we appear to be referring to.

90
00:07:03.953 --> 00:07:09.371
So, in the i frame case, if we're past
an i frame, I want us to be setting up

91
00:07:09.371 --> 00:07:15.149
a post message callback, like we're
communicating with the i frame, right?

92
00:07:15.149 --> 00:07:21.137
That's the main event you care about for
an i frame, if you don't believe me,

93
00:07:21.137 --> 00:07:26.974
let's pretend that it is and then form
would probably want submit, right?

94
00:07:26.974 --> 00:07:32.294
That's a big, meaningful event
that's associated with the form,

95
00:07:32.294 --> 00:07:36.971
so we could give it a shot by
creating two types that represent

96
00:07:36.971 --> 00:07:41.557
sort of our event listeners,
one that receives form data,

97
00:07:41.557 --> 00:07:46.258
one that receives a message event and
this is for the i frame.

98
00:07:46.258 --> 00:07:51.713
And we could say, all right, so my first
element here my first arg it's one

99
00:07:51.713 --> 00:07:56.822
of these two types of elements,
it's either the form or the i frame and

100
00:07:56.822 --> 00:08:01.777
then here we've got the handler for
the form or the i frame, right?

101
00:08:01.777 --> 00:08:06.143
We certainly can handle both cases and

102
00:08:06.143 --> 00:08:10.916
I can get the zeroeth i
frame on the page and

103
00:08:10.916 --> 00:08:14.475
I can try to handle this event.

104
00:08:14.475 --> 00:08:19.957
So here's the i frame, something's already
looking a little bit off here, right?

105
00:08:19.957 --> 00:08:24.235
Because we're not getting any type hint,
we're just getting an any, so

106
00:08:24.235 --> 00:08:28.040
that's not good, we're allowing
a lot of possibilities here.

107
00:08:28.040 --> 00:08:33.746
Basically, we don't have any sense
of saying the first argument

108
00:08:33.746 --> 00:08:40.812
passed to the function has any effect on
which second argument we should accept.

109
00:08:40.812 --> 00:08:44.738
So, to put this more concisely,
what we want,

110
00:08:44.738 --> 00:08:49.646
is when we get a form to strictly
be dealing with submit, and

111
00:08:49.646 --> 00:08:54.850
when we get an i frame to strictly
be dealing with post message,

112
00:08:54.850 --> 00:08:59.880
not a combination of the two,
that might not make any sense.

113
00:09:01.520 --> 00:09:06.673
So, function overloads help us solve this,
and effectively what

114
00:09:06.673 --> 00:09:12.654
we're doing here is we're saying I have
one implementation in my function,

115
00:09:12.654 --> 00:09:16.992
but I wanna define types for
two specific entry points.

116
00:09:16.992 --> 00:09:22.970
One that does the form stuff with
the right element and the right handler,

117
00:09:22.970 --> 00:09:29.445
and one that does the i frame stuff with
the right element and the right handler.

118
00:09:29.445 --> 00:09:36.386
This ensures that I have two specific
prescribed ways of doing things and

119
00:09:36.386 --> 00:09:41.505
I'm not left with all of
the flexibility that I really

120
00:09:41.505 --> 00:09:47.307
don't want to handle such as
this in combination with that,

121
00:09:47.307 --> 00:09:51.777
that would be sort of
like crossing our wires.

122
00:09:51.777 --> 00:09:57.031
So, we can see here if we get our frame
and get a form, this case works for

123
00:09:57.031 --> 00:10:01.674
handling the frame,
we can see we have type information here,

124
00:10:01.674 --> 00:10:07.850
there's our message event and
then in the form case, this works as well.

125
00:10:07.850 --> 00:10:11.306
Let me show you what a failing case
look like, basically, like let

126
00:10:11.306 --> 00:10:15.335
me show you what we can't do anymore,
and that would be something like this.

127
00:10:15.335 --> 00:10:19.487
Actually a better way to Illustrate this
is just to show you what the autocompletes

128
00:10:19.487 --> 00:10:20.095
look like.

129
00:10:20.095 --> 00:10:24.392
So, normally we just get
autocompletes like this and

130
00:10:24.392 --> 00:10:30.311
when we open this up we would just see
like, here's what you should type,

131
00:10:30.311 --> 00:10:36.150
but, look, we got one of two and
two of two, we kind of have two options.

132
00:10:36.150 --> 00:10:41.541
For what we can do here,
the form way, or the i frame way and

133
00:10:41.541 --> 00:10:47.487
note that we don't actually,
we're not offered the arguments

134
00:10:47.487 --> 00:10:53.348
that are described on lines 14 and
15 of this piece of code.

135
00:10:53.348 --> 00:10:59.799
No one's showing us In a union type,
right?

136
00:10:59.799 --> 00:11:02.884
Not for option one,
not for option two, right?

137
00:11:02.884 --> 00:11:06.702
It's one or the other,
we have two choices for the function,

138
00:11:06.702 --> 00:11:08.810
we're not allowed to mix.

139
00:11:08.810 --> 00:11:13.498
And what we're seeing here is that
we can see this, we can see this,

140
00:11:13.498 --> 00:11:19.690
this here is effectively hidden, that's
part of what is allowing us to do this.

141
00:11:19.690 --> 00:11:24.743
It basically means that this is sort of
what's invoked behind the scenes, we can

142
00:11:24.743 --> 00:11:29.819
make this whatever it needs to be in order
to handle all of the cases we care about.

143
00:11:29.819 --> 00:11:35.354
But we can have very specific entry
points that allow us to avoid handling

144
00:11:35.354 --> 00:11:40.359
these combinations of things that
we have no intent of allowing.

145
00:11:40.359 --> 00:11:43.663
So, we would call these two
heads of the function and

146
00:11:43.663 --> 00:11:48.093
then this often is referred to as
an implementation of the function and

147
00:11:48.093 --> 00:11:51.800
this is the only thing that
has the braces, right?

148
00:11:51.800 --> 00:11:58.562
So, an important thing to think about as
you consider using function overloads,

149
00:11:58.562 --> 00:12:03.861
is that the implementation has
to be compatible with the heads.

150
00:12:03.861 --> 00:12:08.032
So, the problem I've created
here is I think I just

151
00:12:08.032 --> 00:12:12.494
deleted the first argument for
this middle bit here and

152
00:12:12.494 --> 00:12:18.024
basically what the implementation
is the error message that we're

153
00:12:18.024 --> 00:12:23.179
getting is that there's just no way for
all of these to line up.

154
00:12:23.179 --> 00:12:27.918
They kind of need to be specific case one,
specific case two for the heads, and then

155
00:12:27.918 --> 00:12:32.607
an implementation that's general enough
to handle anything that might come in.

156
00:12:32.607 --> 00:12:36.466
But in this case it's sort of broken,
right?

157
00:12:36.466 --> 00:12:42.110
Meaning, we're only accepting
one element here, it's,

158
00:12:42.110 --> 00:12:47.089
we need something else,
if we were to, for example,

159
00:12:47.089 --> 00:12:51.849
just say look,
I'm gonna take another argument,

160
00:12:54.252 --> 00:12:58.536
And we need to see the fact that, we have
this type here, we need to allow for

161
00:12:58.536 --> 00:13:01.871
a possibility that an i frame
element might come through.

162
00:13:01.871 --> 00:13:07.639
So, this almost,
it has to be general enough that it could

163
00:13:07.639 --> 00:13:13.304
type check against any
combination of the head above it.

164
00:13:13.304 --> 00:13:17.870
So, these are almost like
specific cases that live within

165
00:13:17.870 --> 00:13:21.560
the type described by this hidden piece.

166
00:13:21.560 --> 00:13:26.711
It's a really powerful tool that lets
you have greater opportunities for

167
00:13:26.711 --> 00:13:31.362
code reuse, because you can have
something that is very carefully

168
00:13:31.362 --> 00:13:36.264
designed with specific entry points,
while having some very general

169
00:13:36.264 --> 00:13:40.440
shared logic that backs all
of those function signatures.

