WEBVTT

1
00:00:00.680 --> 00:00:05.450
So I prefer to explicitly
state return types.

2
00:00:05.450 --> 00:00:11.120
And I'm going to show you why, it has
to do with where problems are surfaced.

3
00:00:11.120 --> 00:00:15.210
Do you want those problems to be
surfaced at the place where you declare

4
00:00:15.210 --> 00:00:16.820
the function?

5
00:00:16.820 --> 00:00:19.870
Or do you want them to be surfaced
where you use the function?

6
00:00:21.810 --> 00:00:23.610
So my preference is this, and

7
00:00:23.610 --> 00:00:28.710
we can see that once we define a return
type we get an additional benefit there.

8
00:00:28.710 --> 00:00:33.553
And that is, every code path that
goes through the implementation of

9
00:00:33.553 --> 00:00:37.940
this function must live up to
what you state will happen.

10
00:00:37.940 --> 00:00:41.845
Meaning, even if you had like six or seven
different branches that happened based on

11
00:00:41.845 --> 00:00:46.610
different conditions, lots of complicated
logic for adding two numbers together.

12
00:00:46.610 --> 00:00:51.688
Every one of those has to return a number
or throw but you can't return null and

13
00:00:51.688 --> 00:00:56.224
one of those cases, this will give
you guarantees that everything is

14
00:00:56.224 --> 00:01:01.130
handled down every path that
that could possibly be taken.

15
00:01:01.130 --> 00:01:06.139
I want this error here,
surfaced at the function declaration.

16
00:01:07.610 --> 00:01:11.794
Not at where I'm using it, so I'm gonna
pop up in the TypeScript playground and

17
00:01:11.794 --> 00:01:13.742
we can look at the alternative here.

18
00:01:20.214 --> 00:01:23.437
So I can add 3 and 4 here,
let's get rid of this.

19
00:01:29.752 --> 00:01:31.338
Yeah, this is a great example.

20
00:01:31.338 --> 00:01:34.475
So what's happening here is add,

21
00:01:34.475 --> 00:01:39.667
it has a return type void,
meaning it doesn't return and

22
00:01:39.667 --> 00:01:46.390
rather than talk about void now,
let's return null, right?

23
00:01:46.390 --> 00:01:47.939
Add returns null, so

24
00:01:47.939 --> 00:01:53.400
right now let's say I use add a bunch
of different places in my program.

25
00:01:53.400 --> 00:01:59.574
They're all gonna light up, and the errors
happening at the point of invocation.

26
00:01:59.574 --> 00:02:04.281
If I state my intentions up
front with a return type that's

27
00:02:04.281 --> 00:02:10.110
explicit, Now, all of my usage is fine,

28
00:02:10.110 --> 00:02:14.865
because I mean, it's not gonna run
the way I would want it to run.

29
00:02:14.865 --> 00:02:21.660
But it returns a number that's what
I've stated, should happen, will happen.

30
00:02:23.590 --> 00:02:27.700
And now this is one thing that I need
to fix, so it just reduces the noise.

31
00:02:27.700 --> 00:02:31.986
You're not seeing like 15 different things
light up, you're seeing 1 thing light up,

32
00:02:31.986 --> 00:02:35.940
and it's taking you to the location
of where you need to make a fix.

33
00:02:35.940 --> 00:02:41.730
This is better, in my opinion,
that's why I like explicit return types.

34
00:02:41.730 --> 00:02:47.000
Let's you state your intentions upfront,
make sure you follow through with them.

35
00:02:47.000 --> 00:02:50.820
And it surfaces problems where
you need to fix the problems.

36
00:02:50.820 --> 00:02:56.290
&gt;&gt; Mike, this seems,
kinda like local preventative medicine,

37
00:02:56.290 --> 00:03:01.979
almost like when you were,
that last thing you did, I'm sorry.

38
00:03:01.979 --> 00:03:05.193
When you are declaring,
I guess what the output type should be?

39
00:03:05.193 --> 00:03:05.720
&gt;&gt; Yep.

40
00:03:05.720 --> 00:03:10.206
&gt;&gt; So that you don't leave
locally in your code and

41
00:03:10.206 --> 00:03:15.475
you can detect the error
before it happens, I suppose,

42
00:03:15.475 --> 00:03:19.715
just trying to, in simple terms for me,
&gt;&gt; Sure,

43
00:03:19.715 --> 00:03:22.106
let me tell you the way
I think about this.

44
00:03:22.106 --> 00:03:26.830
So test driven development isn't for
everybody, but

45
00:03:26.830 --> 00:03:30.629
I like type driven development, meaning,

46
00:03:30.629 --> 00:03:34.737
sometimes I will state
what I'm trying to do and

47
00:03:34.737 --> 00:03:40.406
put the usage of the function I
have not implemented yet in place.

48
00:03:40.406 --> 00:03:44.789
And I can define what I think
I need in terms of inputs and

49
00:03:44.789 --> 00:03:48.427
outputs, and
then I can implement it later.

50
00:03:48.427 --> 00:03:54.388
So I like to use this as a tool and
frequently I'll end up doing this.

51
00:03:54.388 --> 00:03:58.964
Write the code that I want to be able to
run and then fill in all of my functions.

52
00:03:58.964 --> 00:04:02.815
Now, you talk about this as
local preventative medicine.

53
00:04:02.815 --> 00:04:06.377
I think about this as local boundaries,

54
00:04:06.377 --> 00:04:11.722
where instead of validating that
your whole program works by

55
00:04:11.722 --> 00:04:17.929
running an extensive test suite
that tests everything all together.

56
00:04:17.929 --> 00:04:22.188
You can on a per function basis,
ensure that within this function,

57
00:04:22.188 --> 00:04:26.446
I am returning the right thing,
I am accepting the right thing, and

58
00:04:26.446 --> 00:04:29.180
then you can move on to another function.

59
00:04:29.180 --> 00:04:34.149
Now, TypeScript is not a replacement for
tests, it's not a replacement for

60
00:04:34.149 --> 00:04:35.000
unit tests.

61
00:04:36.000 --> 00:04:44.830
But this does give you the ability
to shift between micro and macro.

62
00:04:44.830 --> 00:04:49.300
Is this function doing the right thing,
is it returning the right thing?

63
00:04:49.300 --> 00:04:53.017
Do I have the right guarantees around
it and then shift out, and let's test

64
00:04:53.017 --> 00:04:56.917
the whole program, and let's make sure
that things work the way they should.

65
00:04:56.917 --> 00:04:59.137
And I say TypeScript is
not a replacement for

66
00:04:59.137 --> 00:05:02.040
tests because all it does is checks types,
right?

67
00:05:02.040 --> 00:05:06.450
It doesn't actually ensure that a and
b actually gets summed up together.

68
00:05:06.450 --> 00:05:10.916
So if you were writing tests that
specifically validated only the type

69
00:05:10.916 --> 00:05:13.950
information, yes, you can eliminate those.

70
00:05:13.950 --> 00:05:18.066
But, I think it's kind of
a dangerous statement to say,

71
00:05:20.027 --> 00:05:24.817
You no longer have to
write a lot of unit tests.

72
00:05:24.817 --> 00:05:28.121
TypeScript has nothing to do with
behavior that's still left to JavaScript.

73
00:05:28.121 --> 00:05:32.127
So, hopefully we're writing those
kinds of unit tests to begin with,

74
00:05:32.127 --> 00:05:33.680
don't stop writing this.

