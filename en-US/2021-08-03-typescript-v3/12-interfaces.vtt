WEBVTT

1
00:00:00.000 --> 00:00:02.023
What about interfaces?

2
00:00:02.023 --> 00:00:06.787
So interfaces are more
limited than type aliases,

3
00:00:06.787 --> 00:00:12.784
in that they can only be used to
define what we call object types.

4
00:00:12.784 --> 00:00:18.140
And object types are things
that are conceivably look kinda

5
00:00:18.140 --> 00:00:22.971
like a class instance
are an object with properties.

6
00:00:22.971 --> 00:00:28.697
Important to realize that union
type operators anything like this,

7
00:00:28.697 --> 00:00:31.664
make something not an object type.

8
00:00:31.664 --> 00:00:34.415
That's a little bit more complicated
than an object type, right?

9
00:00:34.415 --> 00:00:38.480
Because it's like, it has these two
possibilities, it could be one or

10
00:00:38.480 --> 00:00:41.348
the other, and
interface cannot describe that.

11
00:00:41.348 --> 00:00:46.561
It could describe what's being
used within something that

12
00:00:46.561 --> 00:00:52.200
uses one of these operators for
sure, but not this whole thing.

13
00:00:52.200 --> 00:00:55.396
You could not describe that with
an interface, so it is more limited.

14
00:00:55.396 --> 00:01:00.698
Just like type aliases you can import and
export interfaces from modules,

15
00:01:00.698 --> 00:01:04.823
just like type aliases,
they completely compile away and

16
00:01:04.823 --> 00:01:07.783
disappear as part of your build process.

17
00:01:07.783 --> 00:01:14.479
Inheritance has a lot more formality
around it with interfaces.

18
00:01:14.479 --> 00:01:17.950
So TypeScript calls,
keywords like extends, and

19
00:01:17.950 --> 00:01:21.268
we're gonna talk about
another one in a moment.

20
00:01:21.268 --> 00:01:26.268
Implements, calls these
things heritage clauses, and

21
00:01:26.268 --> 00:01:33.779
that they are used to describe ancestry in
an object oriented hierarchy of some sort.

22
00:01:33.779 --> 00:01:41.442
Extends is used to describe
inheritance between like things.

23
00:01:41.442 --> 00:01:46.010
Implements is used to describe
inheritance between unlike things.

24
00:01:46.010 --> 00:01:51.190
So we can see that classes can
extend from classes, right?

25
00:01:51.190 --> 00:01:54.102
We've seen this in JavaScript.

26
00:01:54.102 --> 00:01:59.202
Interfaces can extend
from other interfaces.

27
00:01:59.202 --> 00:02:02.714
But when working with classes and
interfaces,

28
00:02:02.714 --> 00:02:07.469
that's when you're gonna wanna
use this implements keyword.

29
00:02:07.469 --> 00:02:11.818
And what you're saying here
is I have this interface, and

30
00:02:11.818 --> 00:02:14.142
it describes the properties.

31
00:02:14.142 --> 00:02:17.864
And potentially the methods, like this is
the way you would type a method, right?

32
00:02:17.864 --> 00:02:19.598
I'm gonna eat some food.

33
00:02:19.598 --> 00:02:24.825
We'll talk about void a little bit later
just for now it's doesn't return anything.

34
00:02:24.825 --> 00:02:26.835
So we'll eat some food.

35
00:02:26.835 --> 00:02:32.203
When you say Dog implements AnimalLike,
what you're saying is,

36
00:02:35.477 --> 00:02:39.825
Make sure that my Dog
class does everything

37
00:02:39.825 --> 00:02:44.063
that an animal like interface requires.

38
00:02:44.063 --> 00:02:52.404
Every instance of dog should make
AnimalLike as an interface happy, right?

39
00:02:52.404 --> 00:02:55.930
And we're missing this eat method.

40
00:02:55.930 --> 00:02:57.534
So this is a good way,

41
00:02:57.534 --> 00:03:02.358
interfaces are a great way to
define contracts between things.

42
00:03:02.358 --> 00:03:07.358
And to say maybe I have these five or
six different classes,

43
00:03:07.358 --> 00:03:13.069
maybe they all have some support for
logging or for, I don't know.

44
00:03:13.069 --> 00:03:16.804
Some common like cross-cutting
thing that your code base needs,

45
00:03:16.804 --> 00:03:21.213
it could define an interface, you could
use that interface for many classes.

46
00:03:21.213 --> 00:03:27.250
And you're assured that TypeScript will
make sure each of these has what it needs.

47
00:03:27.250 --> 00:03:31.552
So we can see that the error we saw above
goes away as soon as we add the method.

48
00:03:31.552 --> 00:03:34.780
So now our class is complete,

49
00:03:34.780 --> 00:03:40.600
it implements everything
that AnimalLike demands.

50
00:03:40.600 --> 00:03:44.696
Now, if you've ever worked with
a programming language that supports true

51
00:03:44.696 --> 00:03:48.536
multiple inheritance, you'll
understand that it's probably a good

52
00:03:48.536 --> 00:03:51.367
thing that JavaScript
doesn't allow us to do this.

53
00:03:51.367 --> 00:03:56.031
By that we mean subclasses
that have multiple base

54
00:03:56.031 --> 00:04:00.816
classes that may mix with
each other in funny ways.

55
00:04:00.816 --> 00:04:04.513
Multiple inheritance makes
things wildly complicated.

56
00:04:04.513 --> 00:04:09.097
This is a way to have multiple facades.

57
00:04:09.097 --> 00:04:14.831
To have a class that aligns
with multiple contracts.

58
00:04:14.831 --> 00:04:16.393
I'm calling these contracts, right?

59
00:04:16.393 --> 00:04:20.839
It's a commitment to do everything
the interface says you must do.

60
00:04:20.839 --> 00:04:22.797
You can implement many interfaces.

61
00:04:22.797 --> 00:04:25.937
So here we've got a class
called LivingOrganism,

62
00:04:25.937 --> 00:04:28.644
we've got AnimalLike we've got CanBark.

63
00:04:28.644 --> 00:04:30.631
So these are both interfaces here.

64
00:04:30.631 --> 00:04:35.002
And we can see that the dog
can have a base class.

65
00:04:35.002 --> 00:04:39.317
And it can implement as many
interfaces as it wants down here.

66
00:04:39.317 --> 00:04:41.765
No problem, no problem at all.

67
00:04:41.765 --> 00:04:45.797
So it is possible.

68
00:04:45.797 --> 00:04:48.820
And I'll pop this out in
the in the playground here so

69
00:04:48.820 --> 00:04:50.616
I can play with it a little bit.

70
00:04:50.616 --> 00:04:54.424
It is totally possible if you had
a type alias that looked like this,

71
00:04:56.013 --> 00:05:01.680
You can extend or
you can implement, [LAUGH] right?

72
00:05:01.680 --> 00:05:04.959
A type alias,
we're seeing that right here.

73
00:05:04.959 --> 00:05:08.482
However, you're kinda asking for
trouble here.

74
00:05:08.482 --> 00:05:13.579
Because as soon as this type
alias becomes more complicated,

75
00:05:13.579 --> 00:05:16.333
the compiler is going to object.

76
00:05:16.333 --> 00:05:22.838
So I prefer to exclusively use
interfaces with this implement keyword,

77
00:05:22.838 --> 00:05:27.850
because the rules that
interfaces demand that you align

78
00:05:27.850 --> 00:05:32.983
with guarantee that they will
work nicely with classes.

79
00:05:32.983 --> 00:05:37.369
Imagine a case where you're using this
type in a bunch of different places.

80
00:05:37.369 --> 00:05:42.603
Sometimes with the class, sometimes
to define the argument of a function,

81
00:05:42.603 --> 00:05:46.118
you may find it useful to
add something like this but

82
00:05:46.118 --> 00:05:50.228
your object oriented inheritance
is not gonna work there.

83
00:05:52.676 --> 00:05:59.050
Basically if we had this here, it would
kind of imply that your constructor for

84
00:05:59.050 --> 00:06:05.436
dog, like I'm gonna run new dog and
I might get a number back, that's weird.

85
00:06:07.151 --> 00:06:11.012
It was theoretically possible in
JavaScript with like proxies or

86
00:06:11.012 --> 00:06:12.563
some other exotic stuff.

87
00:06:12.563 --> 00:06:18.101
It's not what you want, [LAUGH] it's not
what you almost certainly trying to do.

88
00:06:18.101 --> 00:06:18.802
So yeah,

89
00:06:18.802 --> 00:06:24.697
you could use a type alias here as long
as it's not something like this, right?

90
00:06:24.697 --> 00:06:26.407
It would have to just be an object type.

91
00:06:29.060 --> 00:06:33.418
So I recommend,
just use interfaces with implements.

92
00:06:33.418 --> 00:06:35.018
All right, interfaces are open.

93
00:06:35.018 --> 00:06:36.012
You may have heard about this.

94
00:06:36.012 --> 00:06:36.908
You may have read about this.

95
00:06:36.908 --> 00:06:37.938
What does it mean?

96
00:06:37.938 --> 00:06:40.512
It means that unlike with type aliases,

97
00:06:40.512 --> 00:06:43.699
we can have multiple declarations here,
right?

98
00:06:43.699 --> 00:06:47.953
Where we've got interface AnimalLike,
interface AnimalLike.

99
00:06:47.953 --> 00:06:49.676
We have a twice in a file.

100
00:06:49.676 --> 00:06:53.602
If this were a class or a variable or
function, something like that,

101
00:06:53.602 --> 00:06:57.731
we would be screamed at saying,
look, you already defined this thing,

102
00:06:57.731 --> 00:06:59.985
I already have something by this name.

103
00:06:59.985 --> 00:07:02.673
You can't do that again.

104
00:07:02.673 --> 00:07:06.671
You can't write on top of it or
whatever, whatever you're trying to do,

105
00:07:06.671 --> 00:07:07.647
you can't do it.

106
00:07:07.647 --> 00:07:10.864
Well, with interfaces, you absolutely can.

107
00:07:10.864 --> 00:07:15.619
And what effectively is happening here
is up here we're saying we have one

108
00:07:15.619 --> 00:07:20.771
method it's called isAlive and down here,
we're augmenting the interface.

109
00:07:20.771 --> 00:07:23.490
We're basically saying, look,

110
00:07:23.490 --> 00:07:28.844
there exists this AnimalLike thing
add on top of it, an eat method.

111
00:07:28.844 --> 00:07:32.216
And note that the fact that
we're doing this down here,

112
00:07:33.788 --> 00:07:36.146
It's a pervasive change that's happening.

113
00:07:36.146 --> 00:07:39.622
It doesn't matter that we're
doing it lower down in the code,

114
00:07:39.622 --> 00:07:42.325
the eat method is clearly
available right here.

115
00:07:42.325 --> 00:07:48.401
In fact this would have ramifications
throughout your project.

116
00:07:48.401 --> 00:07:52.001
If you had this in one
file your eat method,

117
00:07:52.001 --> 00:07:55.710
as a result of this
would pop up everywhere.

118
00:07:55.710 --> 00:07:57.914
This is not a localized thing.

119
00:07:57.914 --> 00:08:02.750
This is a holistic across
your app change potentially.

120
00:08:02.750 --> 00:08:07.781
Anywhere that you're using this AnimalLike
type, you would see this change.

121
00:08:07.781 --> 00:08:09.692
You would see this eat method.

122
00:08:11.263 --> 00:08:12.674
Why is this useful?

123
00:08:12.674 --> 00:08:14.804
Why would I care about this?

124
00:08:14.804 --> 00:08:16.537
Where and how is this useful?

125
00:08:16.537 --> 00:08:20.401
I've highlighted it for you because
it's probably a burning question.

126
00:08:20.401 --> 00:08:24.642
Well, sometimes we pin things
on the globals, right?

127
00:08:24.642 --> 00:08:27.540
Like we add stuff to the window object.

128
00:08:27.540 --> 00:08:33.507
Maybe there's some emerging thing that
will soon be available in JavaScript and

129
00:08:33.507 --> 00:08:39.489
you wanna code as if it's their promise
that finally might be an example of this.

130
00:08:39.489 --> 00:08:41.624
It was only recently standardized, right?

131
00:08:41.624 --> 00:08:47.150
So you may have to tack some things on
to an interface that already exists.

132
00:08:47.150 --> 00:08:49.787
And you can see that we're
able to do that here.

133
00:08:49.787 --> 00:08:58.037
So window, this is like the window that's
available in your web browser, right?

134
00:08:58.037 --> 00:09:01.096
Window.document, you're used
to running this, right?

135
00:09:01.096 --> 00:09:06.426
So by just having this little piece of
code here, we're augmenting window,

136
00:09:06.426 --> 00:09:13.987
we're changing it, such that, We've
got all of this stuff on here, right?

137
00:09:13.987 --> 00:09:18.958
But we've also got our example property,
so we're sort of tacking something on.

138
00:09:21.172 --> 00:09:23.439
You'll find little things like this.

139
00:09:23.439 --> 00:09:26.098
You may think of like,
globals are bad, right?

140
00:09:26.098 --> 00:09:30.059
We don't wanna do this, but you'll find
that you're consuming some library.

141
00:09:30.059 --> 00:09:35.341
The type information is incomplete,
you just wanna tack this one thing on,

142
00:09:35.341 --> 00:09:38.654
this is a way to do it,
this is a good way to do it.

143
00:09:38.654 --> 00:09:41.562
Augmenting an interface.

144
00:09:41.562 --> 00:09:43.864
Because they're open,
you can always add to them.

145
00:09:46.026 --> 00:09:49.123
So which one to use and when?

146
00:09:49.123 --> 00:09:52.964
Most of the time to be honest,
it's completely up to you.

147
00:09:52.964 --> 00:09:58.541
There are fewer and fewer advantages
as time goes on to fewer and

148
00:09:58.541 --> 00:10:03.819
fewer places where one makes
any more sense than the other.

149
00:10:03.819 --> 00:10:11.293
However, A couple clear,
Choices to make in some scenarios.

150
00:10:11.293 --> 00:10:16.291
Number one, if you're using
anything that does not align

151
00:10:16.291 --> 00:10:19.864
with this idea of an object type, right?

152
00:10:19.864 --> 00:10:23.416
Where if you're using
this union type operator,

153
00:10:23.416 --> 00:10:27.400
you must use a type alias,
you cannot use an interface.

154
00:10:27.400 --> 00:10:32.760
Number two, this is my recommendation
not a hard constraint.

155
00:10:32.760 --> 00:10:38.691
But if you want to use something that
it's designed for a class to consume,

156
00:10:38.691 --> 00:10:44.074
like class dog implements,
can eat food, or something like that.

157
00:10:44.074 --> 00:10:49.143
I would advise strongly that you use
interfaces for that because you will by

158
00:10:49.143 --> 00:10:54.132
making that decision never find yourself
in a place where the type you're

159
00:10:54.132 --> 00:10:58.983
creating becomes incompatible
with object-oriented inheritance.

160
00:10:58.983 --> 00:11:03.889
Number three, if you deliberately
want consumers of your types to

161
00:11:03.889 --> 00:11:07.491
augment your types,
you must use an interface.

162
00:11:07.491 --> 00:11:14.264
Cases like this will become more clear
in the intermediate TypeScript course.

163
00:11:14.264 --> 00:11:18.951
But there are situations where, A user of

164
00:11:18.951 --> 00:11:23.616
your code might sort of inject
stuff into your interfaces so

165
00:11:23.616 --> 00:11:27.629
they can describe the code
that they've written,

166
00:11:27.629 --> 00:11:32.415
which may be interacts with
a library that you've written.

167
00:11:32.415 --> 00:11:35.691
But interfaces because they are open and

168
00:11:35.691 --> 00:11:40.614
type aliases are not,
interfaces are the tool for this job.

169
00:11:40.614 --> 00:11:43.302
Finally, let's talk about recursive types.

170
00:11:43.302 --> 00:11:47.379
So by recursive types, I just simply
mean types that are self referential.

171
00:11:47.379 --> 00:11:53.519
So if we look at this, let's pretend
we just want nested arrays of numbers.

172
00:11:53.519 --> 00:11:55.717
How would we describe the type for this?

173
00:11:55.717 --> 00:11:57.493
Well, you could do it as follows.

174
00:11:58.994 --> 00:12:05.827
We could say, nested numbers is either
a number or an array of nested numbers.

175
00:12:05.827 --> 00:12:10.156
So recently this is
a TypeScript 3.7 feature.

176
00:12:10.156 --> 00:12:12.284
Type aliases started to support this.

177
00:12:12.284 --> 00:12:16.177
You used to have to use
a combination of interfaces and

178
00:12:16.177 --> 00:12:22.075
types in order to accomplish this, but
now, this becomes a lot easier to write.

179
00:12:22.075 --> 00:12:26.843
You're just saying it's a number or
an array of myself.

180
00:12:26.843 --> 00:12:29.963
And as a result,
we can do something like this.

181
00:12:29.963 --> 00:12:35.228
And you can see that .push
is validated as it should,

182
00:12:35.228 --> 00:12:40.142
because it wants numbers or
arrays of numbers, or

183
00:12:40.142 --> 00:12:43.196
recursive arrays of numbers.

184
00:12:43.196 --> 00:12:47.423
Thomas asks the question,
kinda going back to interfaces here.

185
00:12:47.423 --> 00:12:51.741
Does augmentation of interfaces
persist across files?

186
00:12:51.741 --> 00:12:56.312
Yes, type checking should
be a holistic operation

187
00:12:56.312 --> 00:13:00.468
that's performed on your
entire app at once.

188
00:13:00.468 --> 00:13:07.108
So, there is no such thing as local
augmentation of an interface.

189
00:13:07.108 --> 00:13:11.626
It's a whole set of constraints for
all of your code as it all fits together,

190
00:13:11.626 --> 00:13:13.546
including your dependencies.

191
00:13:13.546 --> 00:13:17.155
And that's type checking
is all of that at once.

