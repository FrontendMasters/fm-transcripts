WEBVTT

1
00:00:00.100 --> 00:00:04.170
So great,
we learn how to type rigid objects.

2
00:00:04.170 --> 00:00:05.440
What about dictionaries?

3
00:00:05.440 --> 00:00:07.820
So let's imagine
an address book situation.

4
00:00:07.820 --> 00:00:09.518
I know the address book and

5
00:00:09.518 --> 00:00:14.149
my phone lets me store multiple phone
numbers where I could say, home,

6
00:00:14.149 --> 00:00:18.640
work, fax, pager, whatever
apparently grew up during the 80s.

7
00:00:20.090 --> 00:00:24.345
So might look something like this, right,

8
00:00:24.345 --> 00:00:31.944
where we have a consistent type of value
that is stored under an arbitrary key.

9
00:00:31.944 --> 00:00:34.960
So we have this nice way to
easily look up values by key,

10
00:00:34.960 --> 00:00:37.050
just give me the work number.

11
00:00:37.050 --> 00:00:42.270
In order to type this properly, we need
something called an index signature.

12
00:00:42.270 --> 00:00:44.670
And here's what that looks like.

13
00:00:44.670 --> 00:00:49.386
We have these square brackets and
you should think of this almost like box

14
00:00:49.386 --> 00:00:52.633
notation for
accessing a value off of a property,

15
00:00:52.633 --> 00:00:57.390
like dictionary square bracket and
then a string for the property key.

16
00:00:57.390 --> 00:00:59.750
That's a good mnemonic device here, right?

17
00:00:59.750 --> 00:01:03.590
So you can pass in any string,
you can call this k whatever you want.

18
00:01:03.590 --> 00:01:08.240
It's sort of arbitrary, cuz you're
not really consuming k elsewhere.

19
00:01:08.240 --> 00:01:13.930
And then this is the type of value
that you will find under each key.

20
00:01:13.930 --> 00:01:17.207
And here we're starting out
with an empty dictionary but

21
00:01:17.207 --> 00:01:20.930
you can see we can reach in and
we will get this object out.

22
00:01:20.930 --> 00:01:26.030
Now, I'm showing you this flavor
of a dictionary for simplicity.

23
00:01:26.030 --> 00:01:30.930
What I like to do is add, and
I'll go out to the playground here.

24
00:01:30.930 --> 00:01:36.920
I like to do this because it's
bothersome that we know this is empty,

25
00:01:36.920 --> 00:01:42.211
and yet we're reaching in and
assuming facts will be there.

26
00:01:42.211 --> 00:01:46.570
Do I really wanna be able to do this?

27
00:01:46.570 --> 00:01:51.630
Which this will happily let me do.

28
00:01:51.630 --> 00:01:55.658
I kinda want that extra
rigor of being asked to

29
00:01:55.658 --> 00:01:59.800
check whether fax is actually present or
not.

30
00:02:02.330 --> 00:02:05.740
But it's up to you different patterns
work for different use cases.

31
00:02:05.740 --> 00:02:10.014
You pass a variable with extra property
to a function that does not use

32
00:02:10.014 --> 00:02:12.450
that property and it'll be okay.

33
00:02:12.450 --> 00:02:20.095
It does sound like you're describing
the excess property erroring case.

34
00:02:20.095 --> 00:02:24.911
TypeScript is basically trying to
discourage you from adding extra

35
00:02:24.911 --> 00:02:29.810
stuff to object literals which it can
guarantee you will not be able to

36
00:02:29.810 --> 00:02:33.540
safely access from within
the body of the function.

37
00:02:35.590 --> 00:02:40.631
And Theresa asks, why does storing that

38
00:02:40.631 --> 00:02:45.829
object as a variable get rid of the error?

39
00:02:45.829 --> 00:02:47.851
Let me take us back to that little screen.

40
00:02:49.806 --> 00:02:57.995
So why is it that if we take this here,
cut my car.

41
00:03:04.337 --> 00:03:09.431
So, when we weren't using
this through a variable we

42
00:03:09.431 --> 00:03:14.650
went in here and we said,
well, let me just copy this.

43
00:03:16.010 --> 00:03:19.328
So we've got a variable right now
we're not currently using and

44
00:03:19.328 --> 00:03:22.044
we're passing this in,
we get this error message.

45
00:03:22.044 --> 00:03:30.140
So I suggest that there is no
way to safely access color.

46
00:03:31.930 --> 00:03:35.397
No way, within the print car function.

47
00:03:35.397 --> 00:03:39.390
Like first nobody can see this
object other than print car.

48
00:03:39.390 --> 00:03:44.289
It's an argument that you're passing to
the function, out here there's just no

49
00:03:44.289 --> 00:03:49.330
way for me to access that object that
I've created, to pass into the function.

50
00:03:49.330 --> 00:03:52.520
The only place we can access it,
is from within print car.

51
00:03:52.520 --> 00:03:57.740
And within print car, we've stated that,
this is the type of object we receive.

52
00:03:57.740 --> 00:04:02.850
So, if I do car.c colors
not appearing on this list.

53
00:04:02.850 --> 00:04:05.750
We can't access that color property.

54
00:04:05.750 --> 00:04:10.747
So based on the fact that only print
car can see it, can see the object,

55
00:04:10.747 --> 00:04:15.664
and print car won't be able to access
that color property that's why

56
00:04:15.664 --> 00:04:18.450
you're getting that error.

57
00:04:18.450 --> 00:04:21.800
Let's see if those same conditions hold
true in the case where we're using

58
00:04:21.800 --> 00:04:23.140
the variable.

59
00:04:23.140 --> 00:04:25.290
So I'm gonna replace this with my car.

60
00:04:27.130 --> 00:04:32.921
And print car still cannot
access a color property because

61
00:04:32.921 --> 00:04:38.580
it doesn't state upfront
that color might be there.

62
00:04:38.580 --> 00:04:48.560
However, down here,
We can see color, right?

63
00:04:48.560 --> 00:04:53.322
We have this variable and conceivably we
could use this variable in other places,

64
00:04:53.322 --> 00:04:57.890
in other ways, maybe for a different
function that wants to see a color there.

65
00:04:59.690 --> 00:05:04.884
So, in the case where we're
storing this as a variable,

66
00:05:04.884 --> 00:05:10.070
you cannot prove that
the color property is a waste.

67
00:05:10.070 --> 00:05:14.620
You cannot prove that it's pointless and
that's why we no longer get the error.

68
00:05:14.620 --> 00:05:18.310
You only get the error when it can be
proven that the property is pointless.

