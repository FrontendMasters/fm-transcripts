WEBVTT

1
00:00:00.240 --> 00:00:04.820
&gt;&gt; Jon Kuperman: So there's this really
cool concept, it's like tab trapping or

2
00:00:04.820 --> 00:00:06.460
focus trapping, anything like that.

3
00:00:06.460 --> 00:00:10.960
So again now that we're all experts
at tabbing around on our websites.

4
00:00:12.430 --> 00:00:17.010
Going back to my Twitter modal example,
so when you're on Twitter.com and

5
00:00:17.010 --> 00:00:19.780
you start tabbing,
you would start at the navigation.

6
00:00:19.780 --> 00:00:24.136
But then from a tweet, when you modal you
still wanna be able tab around, but we

7
00:00:24.136 --> 00:00:28.810
really should restrict you to only being
able to tab around in that modal, right?

8
00:00:28.810 --> 00:00:31.850
What we don't want is like you tabbing
all the way through the back or

9
00:00:31.850 --> 00:00:33.010
something like that.

10
00:00:33.010 --> 00:00:37.020
And so there is this concept,
so basically what you do, and

11
00:00:37.020 --> 00:00:42.070
we gonna all do it together, so don't
worry, is that you, when the modal opens,

12
00:00:42.070 --> 00:00:48.410
you grab it JavaScript, and you find all
the focusable elements inside of it.

13
00:00:48.410 --> 00:00:50.540
And then you convert them to an Array, and

14
00:00:50.540 --> 00:00:53.840
then what you want to do is you wanna
find like the first and the last item.

15
00:00:53.840 --> 00:00:57.630
So say you have a modal that has two
input fields and a Submit button.

16
00:00:57.630 --> 00:00:59.030
You'd grab the first input field and

17
00:00:59.030 --> 00:01:01.260
the Submit button,
as your first and your last.

18
00:01:01.260 --> 00:01:03.930
And then what you wanna do is you
just have keyboard listeners where

19
00:01:05.000 --> 00:01:09.710
if they're on the last item and they hit
tab, instead of taking them wherever,

20
00:01:09.710 --> 00:01:11.930
put it back on the first item,
and then vice versa.

21
00:01:11.930 --> 00:01:15.290
If they're on the first item and
they hit Shift-Tab, send them back around.

22
00:01:15.290 --> 00:01:18.200
And so basically you're like
kinda trapping the user for

23
00:01:18.200 --> 00:01:22.430
their own good into this modal so they
can tab through and see where they're at.

24
00:01:23.590 --> 00:01:28.380
And so, yeah, basically the three steps
are grabbing all the focusable children,

25
00:01:28.380 --> 00:01:31.340
listening for both tab and shift tab, and

26
00:01:31.340 --> 00:01:35.020
then only doing something if they're
gonna go off the edge of the modal.

27
00:01:35.020 --> 00:01:37.160
So if they're gonna go off that edge,
send them back around.

28
00:01:38.600 --> 00:01:43.450
Cool, so this one, basically,
after you have all of the elements,

29
00:01:43.450 --> 00:01:49.110
you would do something like this,
if o n a key app listener

30
00:01:49.110 --> 00:01:54.680
if the current element is the first
tab stop and they're going backwards,

31
00:01:54.680 --> 00:01:59.360
prevent default and then focus on the last
one, is the basic logic of that thing.

32
00:01:59.360 --> 00:02:03.900
It is really helpful again
it's just one of those things,

33
00:02:03.900 --> 00:02:05.550
if you're gonna have modals,
you really should have,

34
00:02:05.550 --> 00:02:08.390
you know some way of allowing keep
only users to go through here.

