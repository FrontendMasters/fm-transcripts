WEBVTT

1
00:00:00.000 --> 00:00:04.860
We're gonna talk about cumulative layout
shift, which is one of the metrics or

2
00:00:04.860 --> 00:00:09.660
I'd say the metric that I see that people
have the most trouble with actually.

3
00:00:10.790 --> 00:00:16.029
And as a reminder, the cumulative
layout shift is about the movement,

4
00:00:16.029 --> 00:00:21.550
distance and impact of page elements
during the lifetime of the document.

5
00:00:21.550 --> 00:00:23.459
So as we load the page,

6
00:00:23.459 --> 00:00:29.990
sometimes things get pushed around
as images pop in or iframes load.

7
00:00:29.990 --> 00:00:35.273
And we want to avoid moving things
around we don't wanna change

8
00:00:35.273 --> 00:00:40.970
the map of the page the user is
building as they see it load all right.

9
00:00:42.390 --> 00:00:45.915
Commutative layout shift
is also adversely affected

10
00:00:45.915 --> 00:00:48.630
by the work that we've done to date.

11
00:00:48.630 --> 00:00:52.635
There's this important interaction
between the layout shifts,

12
00:00:52.635 --> 00:00:56.580
and deferring things to improve
your largest contentful paint.

13
00:00:57.630 --> 00:01:02.296
The largest contentful paint if we look
at a spectrum of the timeline of a page,

14
00:01:02.296 --> 00:01:07.160
LCP is this time where you're
signaling to the user, hey, I'm ready.

15
00:01:07.160 --> 00:01:10.608
You can start carrying what's on
the screen and start interacting and

16
00:01:10.608 --> 00:01:12.020
deciding what you wanna do.

17
00:01:12.020 --> 00:01:17.055
And if you do stuff,
before LCP like you have stuff popping in,

18
00:01:17.055 --> 00:01:21.805
that still affects your
cumulative layout shift if you're

19
00:01:21.805 --> 00:01:25.230
loading stuff in different orders.

20
00:01:25.230 --> 00:01:29.080
But the user will kind of forgive you,
they'll understand, they expect it.

21
00:01:29.080 --> 00:01:32.890
They're like yeah,
it's the page loading, it's cool.

22
00:01:32.890 --> 00:01:36.923
So here's this really annoying
gift of how, a gaming site or

23
00:01:36.923 --> 00:01:41.050
gaming news site used to load,
that was like super annoying.

24
00:01:41.050 --> 00:01:44.980
And I stopped going to it entirely
because I couldn't stand it.

25
00:01:44.980 --> 00:01:48.550
If this happened before largest
contentful paint, that'd be fine.

26
00:01:49.890 --> 00:01:53.687
But the fact that it happens
after largest contentful paint,

27
00:01:53.687 --> 00:01:56.990
as you're scrolling through the page.

28
00:01:56.990 --> 00:01:58.830
Was infuriating.

29
00:01:58.830 --> 00:02:01.660
You never knew where in
the document you were.

30
00:02:01.660 --> 00:02:04.400
You couldn't pick you couldn't
just read it sequentially.

31
00:02:04.400 --> 00:02:08.800
It was constantly injecting ads and
images and sponsored content.

32
00:02:08.800 --> 00:02:13.130
And it was so
incredibly frustrating to use.

33
00:02:15.110 --> 00:02:19.410
So how do we improve layout shifts.

34
00:02:19.410 --> 00:02:23.740
So here's the screenshot of the New York
times from a couple of days ago.

35
00:02:23.740 --> 00:02:28.816
And, as we talked about before, there
are a couple of things here, the pop in

36
00:02:28.816 --> 00:02:33.750
like the images, kind of push the page
down and sometimes that mean image.

37
00:02:33.750 --> 00:02:37.140
It doesn't seem to happen every time for
me, but I've seen that a couple of times.

38
00:02:37.140 --> 00:02:41.200
The main image will like load in late and
it might push things to the side.

39
00:02:42.290 --> 00:02:47.112
And we can prevent these shifts from
happening by telling the browser what

40
00:02:47.112 --> 00:02:49.100
the layout is going to be.

41
00:02:49.100 --> 00:02:50.975
We can give it hints and say, hey,

42
00:02:50.975 --> 00:02:54.320
here's a box that I'm gonna
put an advertisement in later.

43
00:02:54.320 --> 00:02:57.630
And that box is gonna be this size.

44
00:02:57.630 --> 00:03:02.459
Keep this empty box there so that you
can position all of the other content

45
00:03:02.459 --> 00:03:06.500
relative to how much space
that's going to use.

46
00:03:06.500 --> 00:03:10.939
Essentially, I have an advertisement box
that I need to put at the top of the page

47
00:03:10.939 --> 00:03:12.440
and specify its height.

48
00:03:12.440 --> 00:03:15.859
It says we need to say
this is 320 pixels tall.

49
00:03:17.160 --> 00:03:23.010
So that everything else that happens
before that loads, knows where to go.

50
00:03:23.010 --> 00:03:27.090
And the image, we need to tell it,
hey, I'm about 640 by 480.

51
00:03:27.090 --> 00:03:29.640
We tell it like what, what size is it.

52
00:03:32.040 --> 00:03:36.490
Now, these sizes aren't necessarily fixed,
right?

53
00:03:36.490 --> 00:03:38.949
Because as a page might.

54
00:03:40.130 --> 00:03:43.040
Might become responsive and scaled down.

55
00:03:43.040 --> 00:03:47.127
It's very common that the browser itself
will have its own stylesheet that it's

56
00:03:47.127 --> 00:03:48.450
going to apply.

57
00:03:48.450 --> 00:03:51.640
And it'd be very common for
you to have a rule that says like,

58
00:03:51.640 --> 00:03:55.260
the maximum image width is 100%,
something like that.

59
00:03:55.260 --> 00:03:58.790
It's in most base CSS framework.

60
00:03:58.790 --> 00:04:00.410
Reset functions.

61
00:04:00.410 --> 00:04:03.800
What that's gonna do is by
saying this image is 640 by 480.

62
00:04:03.800 --> 00:04:07.695
browser remembers what
that aspect ratio is, so

63
00:04:07.695 --> 00:04:11.890
it knows what the relative width and
height is.

64
00:04:11.890 --> 00:04:16.466
So as the responsive as a page
responsively collapses down,

65
00:04:16.466 --> 00:04:20.040
the width might become less than 640.

66
00:04:20.040 --> 00:04:25.057
But it knows that it needs
to reserve 640 by 480 for

67
00:04:25.057 --> 00:04:28.151
the image if it loads later, and so

68
00:04:28.151 --> 00:04:32.760
this won't necessarily
break responsive pages.

69
00:04:34.950 --> 00:04:40.560
All right, let's take a look at
the biggest offender of this.

70
00:04:40.560 --> 00:04:44.690
In our test page and
that is positioning our banner.

71
00:04:46.740 --> 00:04:51.816
So if we go back to our, request
metrics site here, when we load this,

72
00:04:51.816 --> 00:04:58.730
we have the super annoying privacy banner,
like a lot of sites on the internet have.

73
00:04:58.730 --> 00:05:02.525
And it is a legal thing for a lot of
European countries that you have to

74
00:05:02.525 --> 00:05:06.989
say that you are using cookies even though
every site everywhere has always used

75
00:05:06.989 --> 00:05:11.140
cookies and always will use cookies,
but you have to like say that you do.

76
00:05:12.600 --> 00:05:16.380
Well, you need to show this,
but you do not need to show it.

77
00:05:16.380 --> 00:05:18.643
So intrusively, we don't need to say, hey,

78
00:05:18.643 --> 00:05:23.070
you have to be right there on the top
of the page and push everything down.

79
00:05:23.070 --> 00:05:24.290
This could be your banner.

80
00:05:24.290 --> 00:05:26.080
It could be an advertisement.

81
00:05:26.080 --> 00:05:28.180
It could be it could be anything.

82
00:05:28.180 --> 00:05:29.960
What if we didn't put it there?

83
00:05:29.960 --> 00:05:32.933
What if instead of at the top
of the page getting injected,

84
00:05:32.933 --> 00:05:36.700
what if we just had floating
over the bottom of the page?

85
00:05:36.700 --> 00:05:37.730
What other sites do that?

86
00:05:37.730 --> 00:05:43.460
Well, we can make a design choice and
just change where this is positioned.

87
00:05:44.660 --> 00:05:50.608
So let's go into we go into public assets,

88
00:05:50.608 --> 00:05:55.910
CSS, there's a banner dot CSS file.

89
00:05:57.190 --> 00:06:02.274
Today, the consent banner is positioned
relative top zero, which means

90
00:06:02.274 --> 00:06:07.522
when the banner loads, it gets stuck
right into the top of the page and pushes

91
00:06:07.522 --> 00:06:13.000
down anything that might be up there,
which is exactly what layout shift is.

92
00:06:13.000 --> 00:06:13.630
We don't want that.

93
00:06:15.280 --> 00:06:21.250
Instead, what if we position it fixed,
which is floating, right?

94
00:06:21.250 --> 00:06:24.820
It's going to float over the rest of
the content, always in the same spot.

95
00:06:24.820 --> 00:06:28.040
And we want to put it at the bottom.

96
00:06:28.040 --> 00:06:33.150
We can put it at the top too, but
fixed on the top is weird, weird choice.

97
00:06:33.150 --> 00:06:35.190
So let's just put it there.

98
00:06:35.190 --> 00:06:38.908
So if we flip that around and
reload this page.

99
00:06:41.580 --> 00:06:42.668
We haven't really changed anything.

100
00:06:42.668 --> 00:06:45.210
We just moved it from
the top to the bottom.

101
00:06:45.210 --> 00:06:47.710
But this content isn't changing anymore.

102
00:06:49.450 --> 00:06:53.410
So let's go and run a Lighthouse and
see what we did.

103
00:06:53.410 --> 00:06:57.384
So before, our CLS was quite bad at 2.93.

104
00:06:59.300 --> 00:07:03.660
If we run this again, that's a lot better.

105
00:07:03.660 --> 00:07:05.930
It's that it's point 08.

106
00:07:05.930 --> 00:07:11.200
That was a big part of our layout ship
problem was just that initial push down.

107
00:07:11.200 --> 00:07:15.730
It was a it was a huge negative
influence on our page.

108
00:07:15.730 --> 00:07:19.772
Now, one things you might
notice here is because we

109
00:07:19.772 --> 00:07:23.370
added a bunch of lazy loading things.

110
00:07:23.370 --> 00:07:27.980
As we scroll down the page, a bunch
of stuff gets injected into the page.

111
00:07:29.010 --> 00:07:33.109
And if you're quick, you see the layout
shifting as these things load.

112
00:07:34.710 --> 00:07:38.367
Looks like I broke something in
my code that's not important.

113
00:07:38.367 --> 00:07:43.183
You'll also see that as we scroll down
the page, the cumulative layout shift

114
00:07:43.183 --> 00:07:46.902
kept increasing that lighthouse
number isn't accurate.

115
00:07:46.902 --> 00:07:51.157
That lighthouse number was just what your
layout shift was at the beginning at

116
00:07:51.157 --> 00:07:55.671
the end of the load cycle, but not at the
end of when the user experienced the page,

117
00:07:55.671 --> 00:07:58.170
or how Google search
will actually rank you.

118
00:07:59.780 --> 00:08:03.240
The CLS increased every time
something new came into the page.

119
00:08:04.280 --> 00:08:08.090
Those new things are the images
asynchronously loading.

120
00:08:08.090 --> 00:08:13.150
Because we've scrolled over them,
how low can you get the CLS of this page?

121
00:08:14.480 --> 00:08:17.622
By decorating the various
lazy loaded things

122
00:08:17.622 --> 00:08:20.540
that we put in with size attributes?

123
00:08:20.540 --> 00:08:22.490
Tell me how big this image should be.

124
00:08:22.490 --> 00:08:24.970
Tell me how big this iframe should be.

125
00:08:24.970 --> 00:08:28.690
And can you get, the CLS.

126
00:08:29.770 --> 00:08:34.190
Or the community layout
score to less than 0.01.

127
00:08:34.190 --> 00:08:38.460
Let's do the first one together just so
you know what we're talking about.

128
00:08:38.460 --> 00:08:41.880
Okay, here we have this
call out right here.

129
00:08:41.880 --> 00:08:48.670
If we load in asynchronously, this is 0 by
0, and all of the text around it moves.

130
00:08:48.670 --> 00:08:51.458
So I want to describe what this is.

131
00:08:51.458 --> 00:08:56.681
So if we look at this
image in our dev tools, so

132
00:08:56.681 --> 00:09:03.423
this image is at this
resolution 666 by 500 pixels.

133
00:09:03.423 --> 00:09:09.848
And so I can solve the community
layout shift of this particular image

134
00:09:09.848 --> 00:09:16.272
by finding that first call out right
here and saying that this image,

135
00:09:16.272 --> 00:09:21.959
the width of this image is 6066 and
the height is 500.

136
00:09:25.340 --> 00:09:29.020
Which will instruct the browser
to reserve that much space.

137
00:09:30.530 --> 00:09:35.074
Go ahead and apply similar rules to
other things that you see shifting

138
00:09:35.074 --> 00:09:38.110
around on the page and see if you can get.

139
00:09:38.110 --> 00:09:41.335
The [INAUDIBLE] of layout
score to less than 0.1,

140
00:09:41.335 --> 00:09:44.485
depending on the flakiness
of your lighthouse and

141
00:09:44.485 --> 00:09:49.690
what screen size you're running, you may
or may not be able to hit that 0.01.

142
00:09:49.690 --> 00:09:54.413
When I did it just now, I hit 0.06 which
was still a slight improvement, But

143
00:09:54.413 --> 00:09:58.460
at this screen size, there's still
a little bit of layout shift.

144
00:09:58.460 --> 00:10:00.650
I don't know if I got all of them.

145
00:10:00.650 --> 00:10:05.600
This is something that you're probably
never gonna get completely down to zero.

146
00:10:05.600 --> 00:10:09.768
But if you can get reasonably close so
that the user can't always notice it,

147
00:10:09.768 --> 00:10:12.060
that's going to give you your benefits.

