WEBVTT

1
00:00:00.130 --> 00:00:05.869
So let's look at how do we improve
images even further, because even though

2
00:00:05.869 --> 00:00:12.750
we're not pulling all of our images down
right away, they're still kind of big.

3
00:00:12.750 --> 00:00:18.549
They're bigger than I would expect
them to be for what we're doing.

4
00:00:18.549 --> 00:00:24.027
For example, if we take a look at our
images, these call out images that we need

5
00:00:24.027 --> 00:00:29.672
to download, even though we're downloading
them lazily a 1.2 megabytes for

6
00:00:29.672 --> 00:00:34.421
this one, and 250 kilobytes for
that one, which is pretty big.

7
00:00:34.421 --> 00:00:37.061
They're pretty big for
what we get out of them,

8
00:00:37.061 --> 00:00:39.830
which is this little image right here.

9
00:00:39.830 --> 00:00:43.528
Even though it's a great image,
it's probably not a 1.2 great,

10
00:00:43.528 --> 00:00:45.649
1.2 megabyte worth of great image.

11
00:00:47.683 --> 00:00:50.010
So how do we reduce this?

12
00:00:50.010 --> 00:00:56.620
Let's say I have a picture and the source
I have of the picture is 1200 pixels wide.

13
00:00:56.620 --> 00:01:03.200
I name it picture-1200.jpg,
just to kind of indicate picture quality.

14
00:01:03.200 --> 00:01:08.567
Well, how I display that picture
is gonna be different based

15
00:01:08.567 --> 00:01:14.410
on which browser and
which device my end user views it on.

16
00:01:14.410 --> 00:01:17.267
For example,
on a large screen on the desktop,

17
00:01:17.267 --> 00:01:21.410
they might see that image in
the full 1200 pixels wide.

18
00:01:21.410 --> 00:01:23.760
And I'm showing them the right thing.

19
00:01:23.760 --> 00:01:28.711
But if they're on a tablet, the responsive
nature of the website is gonna squish that

20
00:01:28.711 --> 00:01:32.200
down, and I might only have 900 pixels.

21
00:01:32.200 --> 00:01:34.690
On a mobile I have even less and
I can only show 600 pixels.

22
00:01:35.900 --> 00:01:41.035
So how do I improve and
send fewer bytes down

23
00:01:41.035 --> 00:01:47.312
the wire by showing a smaller
version of the image for

24
00:01:47.312 --> 00:01:51.036
this particular screen size?

25
00:01:51.036 --> 00:01:56.320
Well, there's some annotations that
we can use for that called srcset.

26
00:01:56.320 --> 00:02:00.037
Now, in the old days, an image had
a source, it's like here's the file,

27
00:02:00.037 --> 00:02:00.925
load this image.

28
00:02:00.925 --> 00:02:05.980
But now we can say multiple sources and
some rules about when to use them.

29
00:02:05.980 --> 00:02:10.590
So for example in addition to the 1200
pixel version, I have this picture.

30
00:02:10.590 --> 00:02:14.780
I have a 900 and a 600, which I can
describe using this annotation.

31
00:02:14.780 --> 00:02:16.296
I can say here's a 600.

32
00:02:16.296 --> 00:02:18.360
Here's a picture, it's 600 wide.

33
00:02:18.360 --> 00:02:20.668
Here's a 900, it's 900 wide.

34
00:02:20.668 --> 00:02:22.110
Here's another one, it's 1200 wide.

35
00:02:23.520 --> 00:02:29.620
And then we can tell the browser when to
use these by using a sizes annotation.

36
00:02:29.620 --> 00:02:33.457
That says just like
a CSS conditional rule,

37
00:02:33.457 --> 00:02:39.800
up to the max width of 600 pixels,
use the 600 pixel image.

38
00:02:39.800 --> 00:02:44.253
If it's up to 900, use the 900,
if it's anything else, use the 1200.

39
00:02:44.253 --> 00:02:50.293
And so doing that, we can optimize which
images get delivered down to which users.

40
00:02:52.441 --> 00:02:55.855
When the browser goes to interpret it,
it's gonna look at the sizes attribute

41
00:02:55.855 --> 00:02:59.230
first, it's gonna say, hey, what are my
rules, which one do I need to get?

42
00:03:00.390 --> 00:03:01.902
And then it's gonna look at srcset and

43
00:03:01.902 --> 00:03:04.090
it's only going to get
the image that it needs.

44
00:03:04.090 --> 00:03:07.040
So if the screen is only 500 pixels wide,

45
00:03:07.040 --> 00:03:10.324
it's only gonna pull
down that picture 600.

46
00:03:10.324 --> 00:03:12.230
It's not going to bother
downloading the other ones.

47
00:03:13.470 --> 00:03:17.996
If there's not a srcset or the srcsets
don't match, eventually it'll go back and

48
00:03:17.996 --> 00:03:20.530
look at the source, but
only as a last resort.

49
00:03:22.610 --> 00:03:27.330
The other way that we can improve images
is simply by crunching the images.

50
00:03:27.330 --> 00:03:31.922
There's a bunch of algorithms that
we can use to actually just rip out

51
00:03:31.922 --> 00:03:37.130
unnecessary quality attributes and
metadata inside of most images.

52
00:03:37.130 --> 00:03:40.631
Here is an example from a service that
I've used a bunch called tiny png.

53
00:03:40.631 --> 00:03:42.276
It's a cool picture of a panda.

54
00:03:42.276 --> 00:03:47.847
On the left it's 57K, on the right
it's 15K and they're exactly the same.

55
00:03:47.847 --> 00:03:51.170
You can get a lot of mileage out
of just crunching your images.

56
00:03:52.840 --> 00:03:54.575
So let's do that, let's do that together.

57
00:03:56.402 --> 00:04:00.140
So I've built a little utility for
us to use.

58
00:04:00.140 --> 00:04:02.952
If we take a look inside
of the tools folder,

59
00:04:02.952 --> 00:04:06.000
I have a little js file
called image optimizer.

60
00:04:07.060 --> 00:04:09.270
Now, we don't need to go
through this line by line.

61
00:04:09.270 --> 00:04:14.245
But this is a build tool that you can use
called imagemin, and imagemin just apply

62
00:04:14.245 --> 00:04:19.074
some of these really common image
optimization things that's got plugins for

63
00:04:19.074 --> 00:04:22.900
JPEGs, and PNGs, and SVGs,
and GIF images, and whatever.

64
00:04:24.660 --> 00:04:29.587
I've built this image optimizer to
basically go through all of the images

65
00:04:29.587 --> 00:04:31.653
that we have in this website and

66
00:04:31.653 --> 00:04:36.440
create a .min version with
these common optimizations.

67
00:04:36.440 --> 00:04:38.460
We can run that right from the terminal.

68
00:04:38.460 --> 00:04:40.140
So let's stop our website.

69
00:04:42.260 --> 00:04:46.645
Now we can enter the command
npm run imagemin.

70
00:04:46.645 --> 00:04:51.981
Because I've defined this as
a command in my package,json.

71
00:04:51.981 --> 00:04:55.599
If we run that, it blows up.

72
00:04:58.907 --> 00:05:02.850
It blows up because I'm using
the wrong version of node, sorry.

73
00:05:10.557 --> 00:05:13.370
Okay, hopefully it ran successfully for
everybody.

74
00:05:14.510 --> 00:05:19.700
It takes, a few seconds to run because
there's actually some real work behind it.

75
00:05:19.700 --> 00:05:24.050
What it did is if we look in
the public assets images folder,

76
00:05:24.050 --> 00:05:27.900
there's now a .min version
of all of the files.

77
00:05:27.900 --> 00:05:30.720
It's created a crunched version of them.

78
00:05:30.720 --> 00:05:32.500
Now we can see what exactly that means.

79
00:05:32.500 --> 00:05:39.665
So for example,
request_metrics_logo_rss.png, is 4.6K.

80
00:05:39.665 --> 00:05:42.800
And the minified version is 3.14K.

81
00:05:42.800 --> 00:05:45.130
So we got a little benefit off of that.

82
00:05:45.130 --> 00:05:51.746
If we go and look like one of our really
big images, like these call outs,

83
00:05:51.746 --> 00:05:56.528
the unmodified call out
break down 24 is 248K.

84
00:05:56.528 --> 00:06:01.710
Whereas the minified version is only 223.

85
00:06:01.710 --> 00:06:07.001
So we're carving out 25 to
40% off of these images.

86
00:06:09.046 --> 00:06:11.840
We've generated all of
these images right in line.

87
00:06:11.840 --> 00:06:15.980
So we're gonna use some IDE incantations
to go ahead and replace it.

88
00:06:17.250 --> 00:06:23.487
I am going to do a find for
anytime there is a .png in this file.

89
00:06:23.487 --> 00:06:29.430
And I'm going to replace that
with a .min.png in line.

90
00:06:29.430 --> 00:06:31.460
I'm gonna run those.

91
00:06:31.460 --> 00:06:34.355
I'm gonna do the same thing for svg.

92
00:06:38.520 --> 00:06:39.900
And that's all I have to do.

93
00:06:39.900 --> 00:06:47.148
I don't have any JPEGs or
any GIFs in this website.

94
00:06:47.148 --> 00:06:49.780
But if you did,
you could do the same thing.

95
00:06:49.780 --> 00:06:51.743
Essentially on all of these lines,

96
00:06:51.743 --> 00:06:55.350
I have just replaced the path to
reference the minified version.

97
00:06:56.470 --> 00:07:01.528
Now, the other thing we needed to
do was use some responsiveness

98
00:07:01.528 --> 00:07:05.568
to load the correct size image for
these call outs.

99
00:07:09.453 --> 00:07:10.544
Like this right here.

100
00:07:10.544 --> 00:07:18.030
Here's one of our call outs, referencing
a 2400 wide call out distribution.

101
00:07:18.030 --> 00:07:21.240
We want to change this and
reference a src set.

102
00:07:21.240 --> 00:07:24.840
So we're going to call this data.srcset,

103
00:07:24.840 --> 00:07:28.547
because we still want
it to be lazily loaded.

104
00:07:28.547 --> 00:07:34.240
And we're gonna define a couple
of alternate image sizes.

105
00:07:34.240 --> 00:07:40.523
So rather than 2400, so
we'll have a 2400 wide,

106
00:07:40.523 --> 00:07:45.990
but we're also gonna have some other ones.

107
00:07:45.990 --> 00:07:52.046
We're gonna have a 1200 wide.

108
00:07:56.800 --> 00:08:01.616
And we'll have a 900 wide.

109
00:08:05.554 --> 00:08:07.569
And we'll have a 600 wide.

110
00:08:13.428 --> 00:08:18.172
Which covers a wide range
of possible values that

111
00:08:18.172 --> 00:08:22.960
our customers could load our website in.

112
00:08:22.960 --> 00:08:24.840
Now, how do we pick the right one?

113
00:08:24.840 --> 00:08:26.960
How do we tell the browser
to pick the right one?

114
00:08:26.960 --> 00:08:31.269
Well, that's the sizes attribute
as we talked about before,

115
00:08:31.269 --> 00:08:35.430
you might actually go to the slides and
just copy paste that.

116
00:08:38.456 --> 00:08:39.822
I can't copy paste it.

117
00:08:39.822 --> 00:08:41.432
Max with 600 and 600.

118
00:08:56.920 --> 00:09:04.384
Do a 9 and a 12 and
all else fills a 2400 pixel.

119
00:09:04.384 --> 00:09:09.994
And a 9 and a 12 and 2400 pixel.

120
00:09:09.994 --> 00:09:14.124
So we define a couple of rules, so
up to the max width of 600 pixels,

121
00:09:14.124 --> 00:09:16.170
use a 600 pixel wide image.

122
00:09:16.170 --> 00:09:20.380
900, 900, 1200, 1200, if you don't know,
go ahead and use the big one.

123
00:09:22.470 --> 00:09:26.021
So with this annotation,
this image is now responsive and

124
00:09:26.021 --> 00:09:29.130
should load the correct size document.

125
00:09:29.130 --> 00:09:31.350
Now three call outs.

126
00:09:31.350 --> 00:09:33.949
Let's go ahead and
replicate this for the other two,

127
00:09:33.949 --> 00:09:37.300
which we're just gonna do
with some copy paste magic.

128
00:09:37.300 --> 00:09:42.225
So I'm gonna copy all of these
images down to this next image,

129
00:09:42.225 --> 00:09:45.160
and I'm just gonna paste it.

130
00:09:45.160 --> 00:09:48.871
The only part that's different
about my images is they're called

131
00:09:48.871 --> 00:09:51.780
callout- something-the size.

132
00:09:51.780 --> 00:09:54.950
So I'm just gonna change
distribution to break down.

133
00:10:06.384 --> 00:10:11.350
And we'll change this one here,
To Web Vital.

134
00:10:17.659 --> 00:10:22.014
Okay, so with that saved,
we're now running smaller images and

135
00:10:22.014 --> 00:10:23.930
responsive images.

136
00:10:23.930 --> 00:10:28.089
So let's pop back over to our
Chrome window and reload this.

137
00:10:30.093 --> 00:10:31.580
I'm not running.

138
00:10:31.580 --> 00:10:33.170
As part of that, I had to stop the server.

139
00:10:33.170 --> 00:10:35.880
So we have to go back to our terminal and

140
00:10:35.880 --> 00:10:39.116
do NPM start to get our
server running again.

141
00:10:42.602 --> 00:10:44.680
All right, so now we have this running.

142
00:10:46.300 --> 00:10:51.720
And if we go and
take a look at our dev tools, If we scroll

143
00:10:51.720 --> 00:10:57.037
down our page until some of our
things load right now it's loading

144
00:10:57.037 --> 00:11:02.270
the 2400 wide image because
we're running on a big screen.

145
00:11:03.370 --> 00:11:08.971
Now if I shrink the size of this
to a smaller screen and reload it,

146
00:11:12.188 --> 00:11:16.127
I'm now pulling down the 900
wide version of this image.

147
00:11:16.127 --> 00:11:19.534
It's going to respond to
what screen is running and

148
00:11:19.534 --> 00:11:23.350
how big it is to download
the right version that you need.

149
00:11:24.810 --> 00:11:31.053
So I'm gonna put this back to where
it was, which is about 12 or 1150.

150
00:11:33.541 --> 00:11:37.843
And let's run another lighthouse report
and see if we got any improvement.

151
00:11:39.721 --> 00:11:44.170
This improvement might be more
noticeable for mobile users.

152
00:11:44.170 --> 00:11:47.320
So I don't know if necessarily we're even
gonna see an improvement right here.

153
00:11:49.230 --> 00:11:51.550
Now when we see about the same.

154
00:11:51.550 --> 00:11:55.124
But if we were to run this thing
using the mobile lighthouse report,

155
00:11:55.124 --> 00:11:59.400
I would imagine we would see quite a big
improvement from changing those images.

