WEBVTT

1
00:00:00.000 --> 00:00:07.100
We are starting to look at how to improve
the individual Core Web Vital Matrix.

2
00:00:08.510 --> 00:00:12.060
And so let's start with
the first contentful paint.

3
00:00:12.060 --> 00:00:16.715
As a quick reminder, the first contentful
paint is the time from the page start

4
00:00:16.715 --> 00:00:21.990
until the user sees an indication that
the page is going to load for them.

5
00:00:21.990 --> 00:00:25.720
Another way of saying that
is we need to respond quick.

6
00:00:25.720 --> 00:00:26.680
So how do we do that?

7
00:00:26.680 --> 00:00:28.850
How do we make sure that
we're responding quick?

8
00:00:29.950 --> 00:00:34.155
Well, let's conceptually think
about our website again.

9
00:00:34.155 --> 00:00:38.590
So what all websites inherently do
is you have a set of servers or

10
00:00:38.590 --> 00:00:42.235
hosts or virtual machines or
whatever it is.

11
00:00:42.235 --> 00:00:46.537
And you need to have a set of documents
that you need to deliver across

12
00:00:46.537 --> 00:00:48.745
the network to your users.

13
00:00:48.745 --> 00:00:53.428
And so there's a few different parts of
this that can all contribute to what is

14
00:00:53.428 --> 00:00:55.815
slowing down first contentful paint.

15
00:00:57.300 --> 00:00:59.314
Your servers need to be quick.

16
00:00:59.314 --> 00:01:04.805
You need to deliver small documents that
can be sent efficiently, and the amount

17
00:01:04.805 --> 00:01:09.990
of hops through that magical cloud
network needs to be as short as possible.

18
00:01:10.990 --> 00:01:13.698
And so
you need to focus on these three things to

19
00:01:13.698 --> 00:01:16.890
improve your first contentful paint.

20
00:01:16.890 --> 00:01:19.000
So there's different tactics for
each of these three.

21
00:01:20.390 --> 00:01:25.780
So your servers,
how do we make sure your server is quick?

22
00:01:25.780 --> 00:01:29.111
Well, we need to make sure that
your server is sized correctly for

23
00:01:29.111 --> 00:01:30.460
what you're doing.

24
00:01:30.460 --> 00:01:35.450
This is the first thing that we need to do
in order to improve it is focusing on your

25
00:01:35.450 --> 00:01:36.440
servers.

26
00:01:36.440 --> 00:01:40.732
Now the specific changes to your servers
is going to be very dependent on what

27
00:01:40.732 --> 00:01:44.550
you're doing and
what technology stack you're doing.

28
00:01:44.550 --> 00:01:47.890
But essentially,
you need to focus on three things.

29
00:01:47.890 --> 00:01:51.204
First, sizing the hardware or
the virtual machine or your network or

30
00:01:51.204 --> 00:01:54.530
whatever your constraining
factors are correctly.

31
00:01:54.530 --> 00:01:58.060
You need to make sure that you have enough
overhead in the machines that you've

32
00:01:58.060 --> 00:02:00.210
selected to deliver
the content that you need.

33
00:02:01.220 --> 00:02:05.075
Second, you should minimize the processing
you need to do in order to fulfill

34
00:02:05.075 --> 00:02:06.200
the request.

35
00:02:06.200 --> 00:02:09.869
As in, if you just need to serve
an index.html page to your users, you

36
00:02:09.869 --> 00:02:14.580
probably shouldn't be making calls to your
database in order to fulfil that request.

37
00:02:14.580 --> 00:02:17.940
Unless there's something especially
interesting that you need to do with that.

38
00:02:19.030 --> 00:02:23.020
And third, the bandwidth, the bandwidth
you have to your servers needs to

39
00:02:23.020 --> 00:02:27.280
be big enough in order to fulfil all the
requests that you have coming in at once.

40
00:02:29.444 --> 00:02:34.420
How do we make sure we're doing as small
thing as possible with out documents?

41
00:02:34.420 --> 00:02:38.367
Well, the two major things that we can
speak here is the size of our content and

42
00:02:38.367 --> 00:02:40.210
how we compress it.

43
00:02:40.210 --> 00:02:44.479
So content size, how do you deliver
a small of payload as you can and

44
00:02:44.479 --> 00:02:47.900
still get the effectiveness that you need?

45
00:02:47.900 --> 00:02:52.573
So this is gonna be again,
dependent on your application, but

46
00:02:52.573 --> 00:02:57.601
if you're delivering an HTML page or
a JavaScript file or an image,

47
00:02:57.601 --> 00:03:02.030
there's certain upper limits
on how much you should send.

48
00:03:03.090 --> 00:03:09.056
For an HTML document, probably if
you're sending anything more than 80 or

49
00:03:09.056 --> 00:03:13.550
100k in terms of total size,
that is just way too much,

50
00:03:13.550 --> 00:03:18.260
you're putting too much on
a page at the same time.

51
00:03:18.260 --> 00:03:22.128
An image might be a meg at
its upper limit, right?

52
00:03:22.128 --> 00:03:24.910
For how big an image
should be on the Internet.

53
00:03:24.910 --> 00:03:27.388
And if you're sending out
bigger things than that,

54
00:03:27.388 --> 00:03:31.010
then you're just sending too much
content to be consumed over this medium.

55
00:03:32.430 --> 00:03:37.134
Compression, so even if you're
sending a 100k HTML document,

56
00:03:37.134 --> 00:03:42.509
how you compress that document over
the wire can greatly improve that speed.

57
00:03:43.570 --> 00:03:48.820
Most commonly on just about any platform,
you can turn on Gzip compression.

58
00:03:48.820 --> 00:03:50.162
And for newer web platforms,

59
00:03:50.162 --> 00:03:52.820
you can turn on more advanced
compression such as Brotli.

60
00:03:52.820 --> 00:03:57.330
Now this is going to be very specific
to your technology stack and so

61
00:03:57.330 --> 00:04:03.510
I'm not gonna be able to go specifically
into what compression you should use.

62
00:04:03.510 --> 00:04:08.489
But compressing your documents is gonna be
able to greatly reduce the number of bytes

63
00:04:08.489 --> 00:04:12.780
that you're gonna push over the wire and
send fewer and do fewer things.

64
00:04:14.810 --> 00:04:19.860
The third part that is under our
control is how we transmit our data.

65
00:04:19.860 --> 00:04:23.488
So, if we take a look at that cloud and
zoom in on it a little bit,

66
00:04:23.488 --> 00:04:27.440
there's actually more than
one thing happening here.

67
00:04:27.440 --> 00:04:32.055
There's where our servers are in
your data center or in Amazon or

68
00:04:32.055 --> 00:04:36.937
in Microsoft or in Digital Ocean or
wherever you host your content.

69
00:04:36.937 --> 00:04:42.320
And there's a series of network
hops in their own infrastructure.

70
00:04:42.320 --> 00:04:44.370
And you largely don't
have control of that.

71
00:04:45.740 --> 00:04:49.786
On the other side, you have your users,
they're connected to their own ISP or

72
00:04:49.786 --> 00:04:52.490
their own wireless network or whatever.

73
00:04:52.490 --> 00:04:55.680
And that has a series of
hops to manage that network.

74
00:04:57.920 --> 00:05:01.360
Between them is what's
connecting those two networks.

75
00:05:01.360 --> 00:05:04.880
And these are all
the infrastructure of the Internet.

76
00:05:06.110 --> 00:05:09.370
And this time is something
that we can control.

77
00:05:09.370 --> 00:05:12.455
We can control based on where
we place our servers and

78
00:05:12.455 --> 00:05:15.059
how far away they are from
our actual users.

79
00:05:16.070 --> 00:05:18.790
Now this time is actually
more interesting and

80
00:05:18.790 --> 00:05:21.239
more relevant than you might think it is.

81
00:05:21.239 --> 00:05:25.865
For example, the minimum time that can be
if your servers are on the East Coast of

82
00:05:25.865 --> 00:05:30.696
the United States, and your current user
is on the west coast of the United States,

83
00:05:30.696 --> 00:05:33.680
is that's going to be 200 milliseconds?

84
00:05:33.680 --> 00:05:37.652
There's just no way to get it any faster
than that if you have to communicate that

85
00:05:37.652 --> 00:05:39.050
difference.

86
00:05:39.050 --> 00:05:41.836
This is obviously due to
the speed of light and

87
00:05:41.836 --> 00:05:44.780
how fast network hardware
can switch packets.

88
00:05:46.110 --> 00:05:52.550
So there's a ton of performance benefits
to be gained by reducing this distance.

89
00:05:52.550 --> 00:05:53.870
So how do you reduce this distance?

90
00:05:55.030 --> 00:05:59.494
Well, the most effective,
easiest way to do it is to use CDNs.

91
00:05:59.494 --> 00:06:03.530
A content distribution network service
is a way of taking the content,

92
00:06:03.530 --> 00:06:06.780
those files that your
servers are spitting out.

93
00:06:06.780 --> 00:06:11.310
And rather than sending them through
the entire series of tubes that is

94
00:06:11.310 --> 00:06:13.630
the Internet every time.

95
00:06:13.630 --> 00:06:17.559
What if we just had a copy of them
right at the edge of every one of our

96
00:06:17.559 --> 00:06:18.637
users networks?

97
00:06:18.637 --> 00:06:22.218
So that they can just grab it right
from there without having to get across

98
00:06:22.218 --> 00:06:23.880
the Internet.

99
00:06:23.880 --> 00:06:27.002
And that's what most CDNs are doing.

100
00:06:27.002 --> 00:06:32.428
CDN like CloudFlare or Akamai or
maxCDN, or there's dozens and

101
00:06:32.428 --> 00:06:37.990
dozens and dozens out there
if you look up CDN servers.

102
00:06:37.990 --> 00:06:42.453
And most of these, what they will
do is when a user makes a request,

103
00:06:42.453 --> 00:06:44.510
the CDN will pick it up.

104
00:06:44.510 --> 00:06:46.850
They'll call your stuff,
if they don't already have a copy.

105
00:06:46.850 --> 00:06:49.275
And they will just cache
a copy of your response and

106
00:06:49.275 --> 00:06:52.030
serve it out to every single
user who might ask for it.

107
00:06:52.030 --> 00:06:57.050
And this is dramatically faster
than actually doing the real work.

108
00:06:57.050 --> 00:07:00.406
Essentially, we're doing fewer
things by not processing each

109
00:07:00.406 --> 00:07:02.340
request across the entire network.

110
00:07:04.130 --> 00:07:09.470
So this is largely about putting
infrastructure things in place.

111
00:07:09.470 --> 00:07:15.750
Which is very, very hard to demo, and
largely dependent on your infrastructure.

112
00:07:15.750 --> 00:07:20.950
But our example repository has a way for
us to put server upgrades in place.

113
00:07:20.950 --> 00:07:26.094
So let's do that together and
simulate what impact or performance doing

114
00:07:26.094 --> 00:07:30.917
a server and infrastructure update
would have on request metrics.

115
00:07:30.917 --> 00:07:34.640
Okay, I'm gonna flip back
over here to our code.

116
00:07:34.640 --> 00:07:39.835
And in order to do this,
we're gonna need to pop open package.json,

117
00:07:39.835 --> 00:07:44.340
this is something that I made
configurable in this library.

118
00:07:45.460 --> 00:07:48.784
There's a couple of
options here under config.

119
00:07:48.784 --> 00:07:53.460
And these are some specific keys that
we're looking at that my simulated server

120
00:07:53.460 --> 00:07:55.530
is going to honor.

121
00:07:55.530 --> 00:08:00.307
Now because setting up a CDN and setting
up server compression is gonna vary so

122
00:08:00.307 --> 00:08:04.160
much depending on what
platform you're using.

123
00:08:04.160 --> 00:08:06.290
We're not gonna cover the details of that.

124
00:08:06.290 --> 00:08:07.934
We're just going to turn it on for

125
00:08:07.934 --> 00:08:10.650
this Express server that
we're operating right now.

126
00:08:11.670 --> 00:08:16.475
So I'm gonna change the server delay from
the 200 milliseconds it's representing

127
00:08:16.475 --> 00:08:20.703
now as though my server was on the East
Coast and my user was on the West Coast.

128
00:08:20.703 --> 00:08:25.045
To something more realistic
of what I would see on a CD

129
00:08:25.045 --> 00:08:28.710
end website of a 50 milliseconds server.

130
00:08:29.930 --> 00:08:34.605
This is essentially a simulating that
we're putting our infrastructure much

131
00:08:34.605 --> 00:08:35.890
closer to our users.

132
00:08:37.160 --> 00:08:40.370
And I'm gonna change
server compress to true.

133
00:08:40.370 --> 00:08:44.233
So it's basically just telling my
server we're gonna attach very simple

134
00:08:44.233 --> 00:08:45.050
compression.

135
00:08:45.050 --> 00:08:48.090
We are gonna Gzip our content
before we send it over the wire.

136
00:08:49.970 --> 00:08:55.608
Save the JSON file and then you're
going to want to stop the process and

137
00:08:55.608 --> 00:08:59.060
run NPM start again to
pick up the changes.

138
00:09:00.990 --> 00:09:06.250
So we've completed some server upgrades or
simulated server upgrades.

139
00:09:06.250 --> 00:09:09.200
If we refresh our Request Metrics page,

140
00:09:09.200 --> 00:09:13.030
we should see a much faster
response to our service.

141
00:09:14.030 --> 00:09:19.598
If we go into our DevTools and look at,
say, the network of these requests,

142
00:09:19.598 --> 00:09:24.557
we can see that all of our requests
are coming in at around 50 to 60

143
00:09:24.557 --> 00:09:28.480
milliseconds, representing
that speed increase.

144
00:09:29.620 --> 00:09:34.439
And if we click on one of these,
we can see that the content that

145
00:09:34.439 --> 00:09:38.440
we are getting back from
our server is now Gzipped.

146
00:09:39.580 --> 00:09:40.930
So what does this mean?

147
00:09:40.930 --> 00:09:43.280
What is the actual impact of this?

148
00:09:43.280 --> 00:09:46.370
Well, to see the improvement,
let's go back to Lighthouse.

149
00:09:47.400 --> 00:09:51.040
And if we did it from before,
this was our initial snapshot, right?

150
00:09:51.040 --> 00:09:53.440
We hadn't done anything to our servers.

151
00:09:53.440 --> 00:09:56.370
And here we are at Lighthouse scores.

152
00:09:56.370 --> 00:09:59.858
Let's go ahead and run it again now
that we've made these upgrades.

153
00:09:59.858 --> 00:10:03.492
And we're just gonna click the little
plus sign in the upper left, and

154
00:10:03.492 --> 00:10:06.210
generate a new report with
the exact same settings.

155
00:10:08.090 --> 00:10:09.211
Huge improvement, right?

156
00:10:10.715 --> 00:10:15.258
I went from in the seventies
to in the nineties, and

157
00:10:15.258 --> 00:10:21.090
my First Contentful Paint went way up or
improved considerably.

158
00:10:21.090 --> 00:10:22.903
It's now at 0.6 seconds, and

159
00:10:22.903 --> 00:10:26.730
Largest Contentful Paint is
only a little bit behind it.

160
00:10:26.730 --> 00:10:31.830
So simply adding this made a huge
impact in the performance of the site.

161
00:10:31.830 --> 00:10:34.070
Now, unfortunately,
it doesn't help everything.

162
00:10:34.070 --> 00:10:39.570
It's still the same site with the same
choices with the same order of operations.

163
00:10:39.570 --> 00:10:42.070
And so
there's other metrics that are still slow.

164
00:10:42.070 --> 00:10:45.450
It's still slow till we
are actually done with the page.

165
00:10:45.450 --> 00:10:46.970
It's still shifting around a lot.

166
00:10:46.970 --> 00:10:50.590
It's still doing some things we don't
want, but we made a big impact.

167
00:10:51.770 --> 00:10:57.350
You can see this impact reflected
in your field data as well.

168
00:10:57.350 --> 00:11:05.739
If we refresh the page a few times, The
perf.log.csv is gonna continue to update.

169
00:11:05.739 --> 00:11:09.399
If you paste that across into our
dashboard, you should see a significant

170
00:11:09.399 --> 00:11:13.367
decrease in both the first contentful
paint and the largest contentful paint.

