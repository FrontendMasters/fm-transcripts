WEBVTT

1
00:00:00.000 --> 00:00:04.382
Now let's get started with part 3,
which is the shortest of our 3 parts.

2
00:00:04.382 --> 00:00:05.985
I'm sure you will be excited about that.

3
00:00:05.985 --> 00:00:08.665
I'm not gonna keep you that much longer.

4
00:00:08.665 --> 00:00:11.600
But we're gonna talk about
three important things.

5
00:00:12.890 --> 00:00:16.288
In the first 2 parts, we were trying
to understand performance and

6
00:00:16.288 --> 00:00:18.010
how to work with it.

7
00:00:18.010 --> 00:00:18.898
In this part,

8
00:00:18.898 --> 00:00:24.090
we're gonna figure out how do we give
ourselves the opportunity to work with it?

9
00:00:24.090 --> 00:00:28.317
How do we justify our performance
work to the people around us,

10
00:00:28.317 --> 00:00:33.820
to the businesses we work in, and
how do we figure out how much is enough?

11
00:00:33.820 --> 00:00:36.888
When have we done enough
work on performance and

12
00:00:36.888 --> 00:00:38.810
we can move on to other tasks?

13
00:00:40.180 --> 00:00:45.985
And how do we justify keeping our
application performance over time?

14
00:00:45.985 --> 00:00:49.340
Now, in the examples that we put together,

15
00:00:49.340 --> 00:00:54.155
I had a website that was pretty slow,
but it wasn't that slow.

16
00:00:54.155 --> 00:00:57.938
Even at the beginning,
my very slow version of

17
00:00:57.938 --> 00:01:03.085
requestmetrics.com wasn't that slow,
it was kind of okay.

18
00:01:03.085 --> 00:01:08.412
I've been to real websites,
they were a lot slower than that,

19
00:01:08.412 --> 00:01:11.440
and part of that is design up front.

20
00:01:11.440 --> 00:01:18.740
If you visit the real requestmetrics.com,
It's super fast.

21
00:01:18.740 --> 00:01:21.279
And it's super fast for
a bunch of reasons.

22
00:01:21.279 --> 00:01:24.305
One, I've optimized all those things, but

23
00:01:24.305 --> 00:01:29.411
also there's just not that much on
the page, it's a pretty simple design.

24
00:01:29.411 --> 00:01:33.629
There's light colors, there's lots
of spacing, there's a few images.

25
00:01:33.629 --> 00:01:38.972
The images are all kind of Ilustrationing,
there's not a lot

26
00:01:38.972 --> 00:01:44.020
of detail in them, and so
they can be much smaller in size.

27
00:01:44.020 --> 00:01:48.282
And once you approach something with
that kind of simplicity that I want

28
00:01:48.282 --> 00:01:51.052
things to be fast from
the beginning mindset,

29
00:01:51.052 --> 00:01:54.190
it's kind of hard to mess up
down the road like I had.

30
00:01:54.190 --> 00:01:59.066
It actually took me four days of making
things really, really bad to get

31
00:01:59.066 --> 00:02:03.980
that website in a state that I could
show you how to make it better.

32
00:02:03.980 --> 00:02:06.587
It wasn't easy to take a fast website,

33
00:02:06.587 --> 00:02:12.190
a website that was designed to be fast
from the beginning and make it slow.

34
00:02:12.190 --> 00:02:15.510
So that's interesting in its own right.

35
00:02:15.510 --> 00:02:20.267
If we make something fast from
the beginning, we spend way less time

36
00:02:20.267 --> 00:02:25.030
trying to figure it out, and
the fixes that we need to do are easier.

37
00:02:25.030 --> 00:02:30.940
And we can do that by making
performance a team value up front.

38
00:02:30.940 --> 00:02:35.290
If you think about the app you're
building, or the site you're making,

39
00:02:35.290 --> 00:02:37.466
or whatever you're working on, and

40
00:02:37.466 --> 00:02:42.190
you think that performance is something
that is a core feature of this product.

41
00:02:42.190 --> 00:02:45.099
It's something that I wanna compete on.

42
00:02:45.099 --> 00:02:46.742
I want to deliver this service and

43
00:02:46.742 --> 00:02:50.270
I want to deliver this service 20%
faster than our next competitor.

44
00:02:51.290 --> 00:02:54.199
And to do that, you need to
approach it from the beginning.

45
00:02:55.270 --> 00:02:58.510
Performance is not a task.

46
00:02:58.510 --> 00:03:03.820
Too many times in too many organizations,
this would be a plan of something.

47
00:03:03.820 --> 00:03:07.735
We're gonna build a web app and
here's a simple compound board.

48
00:03:07.735 --> 00:03:10.886
And we've gotten login done,
and new user creation done, and

49
00:03:10.886 --> 00:03:14.988
we got a bunch of pretty charts, and we're
building a change password thing, and

50
00:03:14.988 --> 00:03:16.726
we're gonna do send alerts next.

51
00:03:16.726 --> 00:03:21.202
And then a week before launch,
we're gonna worry about making it fast.

52
00:03:21.202 --> 00:03:23.080
I mean it's not gonna work.

53
00:03:23.080 --> 00:03:27.956
You can apply some of these techniques and
you can improve the performance, but

54
00:03:27.956 --> 00:03:30.140
it's never going to be fast.

55
00:03:30.140 --> 00:03:32.444
It's going to be not slow.

56
00:03:32.444 --> 00:03:34.847
It's going to be less slow
than it would have been.

57
00:03:34.847 --> 00:03:41.320
But it's never gonna be fast unless you
start with fast from the beginning.

58
00:03:41.320 --> 00:03:44.150
So how do you start with
fast from the beginning?

59
00:03:46.310 --> 00:03:50.694
Well, performance needs to
be a cross cutting concern,

60
00:03:50.694 --> 00:03:55.550
along with other important things
like security and quality.

61
00:03:55.550 --> 00:03:59.417
If you're building an app that's
gonna be open to the internet,

62
00:03:59.417 --> 00:04:04.010
you kind of need to start with
security ideas right up front.

63
00:04:04.010 --> 00:04:07.240
How are we gonna protect this
from unauthorized access?

64
00:04:07.240 --> 00:04:09.920
How are we going to
authenticate our users?

65
00:04:09.920 --> 00:04:12.058
How are we gonna do these things?

66
00:04:12.058 --> 00:04:16.406
You can't just figure that out at
the very end, this are things that

67
00:04:16.406 --> 00:04:20.684
need to be built in to the system
from the beginning, quality too.

68
00:04:20.684 --> 00:04:24.612
You're building something you
wanna make sure it's bug free or

69
00:04:24.612 --> 00:04:27.531
as close to bug free as you
can make it by the end.

70
00:04:27.531 --> 00:04:31.990
Well, you can't all of a sudden do
huge bug fixing sections at the end.

71
00:04:31.990 --> 00:04:35.065
You need to be testing things as you go.

72
00:04:35.065 --> 00:04:39.297
Your unit testing and interaction
testing., and smoke testing, and

73
00:04:39.297 --> 00:04:43.107
whatever other testing is appropriate for
your situation, but

74
00:04:43.107 --> 00:04:46.290
you need to be doing that along the way.

75
00:04:46.290 --> 00:04:48.330
Performance is just like that.

76
00:04:48.330 --> 00:04:51.620
You need to be thinking about
the performance of your system as you go.

77
00:04:52.620 --> 00:04:54.140
How do you do that?

78
00:04:54.140 --> 00:04:55.690
You do it with data.

79
00:04:55.690 --> 00:04:59.822
So you need to start testing
the performance of your site early,

80
00:04:59.822 --> 00:05:02.815
do it often, and
constantly be getting data.

81
00:05:02.815 --> 00:05:07.623
So as you're beginning, when your
project is just a twinkle in your eye,

82
00:05:07.623 --> 00:05:12.218
the first time you put code on a page,
you should run Lighthouse on it.

83
00:05:12.218 --> 00:05:16.510
You should run some performance,
you should get an idea of how well it

84
00:05:16.510 --> 00:05:21.960
performed at the beginning, and
periodically take more Lighthouse reports.

85
00:05:21.960 --> 00:05:26.400
You can even export them in the UI, you
can save them over time, and compare them.

86
00:05:27.580 --> 00:05:31.425
As soon as you have it out in the wild,
you should be gathering field data and

87
00:05:31.425 --> 00:05:34.650
seeing how real users
experience your site.

88
00:05:34.650 --> 00:05:38.580
This is the only way to
really know what to work on.

89
00:05:38.580 --> 00:05:44.089
You don't know what's slow unless
the users tell you what's slow.

90
00:05:44.089 --> 00:05:47.846
And they probably won't call you up and
tell you what's slow in any kind of

91
00:05:47.846 --> 00:05:51.740
valuable way, you probably
need to gather some real data.

92
00:05:51.740 --> 00:05:56.183
So monitoring performance from
the beginning is incredibly valuable to

93
00:05:56.183 --> 00:05:57.285
keeping it fast.

94
00:06:00.025 --> 00:06:01.525
Here's an example of some data.

95
00:06:01.525 --> 00:06:06.032
So one of the things that Request Metrics
can do is we do this flame chart and

96
00:06:06.032 --> 00:06:08.455
we can send this out every day.

97
00:06:08.455 --> 00:06:13.110
And this is what a lot of companies
use to just say, do I need to care?

98
00:06:13.110 --> 00:06:17.428
Here's how on the page or here's how
the app performed in the last 24 hours

99
00:06:17.428 --> 00:06:22.190
with some top level things of, hey,
here's how many people visited.

100
00:06:22.190 --> 00:06:25.918
Here's what the median user saw,
here's what the worst user saw, and

101
00:06:25.918 --> 00:06:26.860
here's a chart.

102
00:06:27.880 --> 00:06:32.416
And that stuff from a glance, if I'm
not aware of any performance issue and

103
00:06:32.416 --> 00:06:36.952
I'm not actively working on something,
I can look at that and say, okay,

104
00:06:36.952 --> 00:06:42.160
that's all right, not worried about it,
delete, move on with my day.

105
00:06:42.160 --> 00:06:46.341
But without that, you never really
know when the performance of your

106
00:06:46.341 --> 00:06:49.889
app has fallen because it's
gonna do it slowly over time.

107
00:06:49.889 --> 00:06:54.661
You're gonna lose 10 milliseconds today,
and 20 milliseconds tomorrow, and

108
00:06:54.661 --> 00:06:58.300
100 milliseconds next week when
you add that other library.

109
00:06:58.300 --> 00:07:01.069
And before you know it,
it's gonna take 17 seconds to load

110
00:07:01.069 --> 00:07:04.860
your app because you've just piled on and
piled on, and piled on.

111
00:07:04.860 --> 00:07:07.314
Unless you're monitoring that over time,

112
00:07:07.314 --> 00:07:10.110
you can't necessarily
see how bad it's gotten.

113
00:07:11.220 --> 00:07:13.190
So how do you do this?

114
00:07:13.190 --> 00:07:16.980
You need to make fast
part of your planning.

115
00:07:16.980 --> 00:07:20.414
So when you're planning your work,
I don't know what your planning system is,

116
00:07:20.414 --> 00:07:21.680
it doesn't matter.

117
00:07:21.680 --> 00:07:25.070
I really post notes on a wall,
but some people don't.

118
00:07:25.070 --> 00:07:29.516
Here's a post note, we're gonna
write a login feature for our app.

119
00:07:29.516 --> 00:07:32.317
Also, when we're specing
out what does login mean,

120
00:07:32.317 --> 00:07:36.186
there's various level of details of
saying here's what the feature is.

121
00:07:36.186 --> 00:07:39.213
The user has to login with a password,
cool.

122
00:07:39.213 --> 00:07:44.122
Well, you need to be a little bit
more specific than that sometimes.

123
00:07:44.122 --> 00:07:48.319
You need to say maybe, hey, they shouldn't
be able to get to the system if they

124
00:07:48.319 --> 00:07:52.280
don't have that password and, hey,
it should work on all the browsers.

125
00:07:52.280 --> 00:07:55.400
If you got it working in Chrome,
that's not enough.

126
00:07:55.400 --> 00:07:59.738
You should have it with a wide
set of compatibility so

127
00:07:59.738 --> 00:08:03.691
that it works on everywhere
you need it to work.

128
00:08:03.691 --> 00:08:08.720
And maybe what you should include
is how fast is acceptable.

129
00:08:08.720 --> 00:08:13.307
If you can't log in, if this isn't
accomplished in less than two seconds on

130
00:08:13.307 --> 00:08:15.750
a mobile device, that is not done.

131
00:08:15.750 --> 00:08:18.286
You haven't figured out how
to do this performance yet

132
00:08:18.286 --> 00:08:22.120
because you're not gonna be able
to figure that out at the end.

133
00:08:22.120 --> 00:08:26.162
When you're writing the login process is
when you need to figure out how to make it

134
00:08:26.162 --> 00:08:27.299
fast, not at the end.

135
00:08:28.390 --> 00:08:31.647
So this covers all of the main things
you need to think about as part of

136
00:08:31.647 --> 00:08:33.040
planning work.

137
00:08:33.040 --> 00:08:36.170
Here's the feature you're gonna write,
you're gonna keep it secure.

138
00:08:36.170 --> 00:08:39.352
You wanna make sure it's of high quality,
and meets the broadest needs,

139
00:08:39.352 --> 00:08:41.897
and you wanna make sure it's fast.

140
00:08:41.897 --> 00:08:46.400
By making performance part of this
definition of done if I can borrow

141
00:08:46.400 --> 00:08:51.697
an agile term, you can bake it into the
process and make it part of your culture.

