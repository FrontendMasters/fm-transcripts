WEBVTT

1
00:00:00.550 --> 00:00:04.026
So let's think about how do we translate

2
00:00:04.026 --> 00:00:08.628
these subjective perceived
performance concepts,

3
00:00:08.628 --> 00:00:14.640
into actual metrics that we can
care about and try and improve.

4
00:00:14.640 --> 00:00:17.973
Because if we stay in psychology,
everything stays very squishy and

5
00:00:17.973 --> 00:00:18.900
hard to quantify.

6
00:00:20.430 --> 00:00:24.902
And so there's some ways that we
measure performance in the past.

7
00:00:24.902 --> 00:00:28.098
And some ways that we're gonna
measure performance in the future and

8
00:00:28.098 --> 00:00:29.156
they're different.

9
00:00:29.156 --> 00:00:32.773
The old way the people measured
performance is with a metric

10
00:00:32.773 --> 00:00:34.430
called page load.

11
00:00:34.430 --> 00:00:41.200
So how long from the time you clicked
something until the page loaded.

12
00:00:41.200 --> 00:00:45.162
So in the old days, like geo cities,
you'd click on it, and

13
00:00:45.162 --> 00:00:48.840
some of the screen would paint but
it's not quite done.

14
00:00:48.840 --> 00:00:50.690
And then the rest of
the screen would draw and

15
00:00:50.690 --> 00:00:54.910
you could actually interact with it and
see what kinds of things were out there.

16
00:00:54.910 --> 00:00:59.695
And that time from the start,
from when you initially click that link or

17
00:00:59.695 --> 00:01:01.547
hit enter to go to that URL.

18
00:01:01.547 --> 00:01:07.840
Until the page was done,
was yeah, was the load time.

19
00:01:07.840 --> 00:01:11.200
And it was measured with the load events,
which was meant to be triggered.

20
00:01:11.200 --> 00:01:12.720
Hey, everything is done.

21
00:01:12.720 --> 00:01:13.600
Here's an event.

22
00:01:13.600 --> 00:01:16.970
And I can measure the milliseconds between
those two things and get a measure.

23
00:01:18.240 --> 00:01:22.352
Fortunately, soon as you start
attaching value to a metric.

24
00:01:22.352 --> 00:01:27.737
Like a company is rewarding its
employees for hitting something,

25
00:01:27.737 --> 00:01:33.740
or advertisers only being willing to
go on to a page that loaded so fast.

26
00:01:33.740 --> 00:01:36.564
Soon as you start valuing a metric,

27
00:01:36.564 --> 00:01:40.810
it's gonna get gamed, and
the load event was gamed.

28
00:01:42.910 --> 00:01:47.326
Lots of techniques came around to
lazy load, to like defer stuff tha

29
00:01:47.326 --> 00:01:51.825
don't actually paint a lot of
the screen until after the load off it.

30
00:01:51.825 --> 00:01:56.920
The user won't notice that our
load event will get a lot faster.

31
00:01:56.920 --> 00:02:00.070
Well, we kind of ruined the metric
when that started happening.

32
00:02:01.670 --> 00:02:03.005
Fact it got real bad.

33
00:02:03.005 --> 00:02:07.554
It got to the point where the load
events on some sites would fire almost

34
00:02:07.554 --> 00:02:08.760
right away.

35
00:02:08.760 --> 00:02:12.812
Like it would be an empty screen with
a blank div and the load event would fire.

36
00:02:12.812 --> 00:02:16.080
And then all the JavaScript would
wake up and build the page.

37
00:02:16.080 --> 00:02:18.560
Well, we're not measuring
anything anymore,

38
00:02:18.560 --> 00:02:20.380
that metric has lost all its value.

39
00:02:22.420 --> 00:02:24.969
And so we've invented some new ways.

40
00:02:24.969 --> 00:02:28.900
Some new ways that are going
to be harder to gain.

41
00:02:28.900 --> 00:02:33.751
I'm not saying that people won't hack
these metrics, but they're going

42
00:02:33.751 --> 00:02:38.386
to be harder to break because they
measure suddenly different things.

43
00:02:40.051 --> 00:02:43.923
Rather than one metric that measures
from the start of the page to the end of

44
00:02:43.923 --> 00:02:45.290
the page.

45
00:02:45.290 --> 00:02:49.350
We have four different metrics that
measure four different aspects of

46
00:02:49.350 --> 00:02:50.530
performance.

47
00:02:50.530 --> 00:02:53.529
And these are called the core web vitals.

48
00:02:53.529 --> 00:02:57.841
FCP, which stands for
the first contentful paint, LCP,

49
00:02:57.841 --> 00:03:00.840
which is the largest contentful paint.

50
00:03:01.960 --> 00:03:05.498
CLS which is the Cumulative Layout Shift,
and

51
00:03:05.498 --> 00:03:09.570
the FID, which is the First Input Delay.

52
00:03:09.570 --> 00:03:12.050
We're gonna talk about
each of these in detail.

53
00:03:13.280 --> 00:03:20.020
But these metrics are alive and
well and impacting your site today.

54
00:03:20.020 --> 00:03:21.260
Even if you have not heard of them.

55
00:03:22.680 --> 00:03:28.329
Google cares about these metrics right
now, in your Google Webmaster Tools.

56
00:03:28.329 --> 00:03:33.112
If you've been in there to like see how
Google ranks your site, how they crawl

57
00:03:33.112 --> 00:03:37.250
your site, they're measuring your
web vitals values right now.

58
00:03:37.250 --> 00:03:43.320
And if you cross over, their arbitrary,
their not arbitrary, their thresholds.

59
00:03:43.320 --> 00:03:46.998
They will tell you, they'll say,
hey, these things are problems and

60
00:03:46.998 --> 00:03:51.320
in the future, we're gonna reduce
your rank if you don't fix them.

61
00:03:51.320 --> 00:03:56.220
This particular site has both
an LCP issue and a CLS issue.

62
00:03:56.220 --> 00:03:58.830
And saying hey,
you got some things to fix here.

63
00:04:01.190 --> 00:04:04.820
So let's dig in and understand
what each of these metrics mean.

64
00:04:06.500 --> 00:04:08.050
The first contentful paint.

65
00:04:09.090 --> 00:04:14.600
This is the time from the start,
when the user first clicks the link or

66
00:04:14.600 --> 00:04:20.210
enters the URL, until the first
meaningful content enters the page.

67
00:04:21.210 --> 00:04:25.560
It's not a blank div,
it's something was rendered.

68
00:04:25.560 --> 00:04:28.250
It's the header bar on MPR data.

69
00:04:28.250 --> 00:04:32.950
It's the first link,
the title of the site, whatever.

70
00:04:32.950 --> 00:04:37.110
This is the time that you take until you
can render the first bit of content.

71
00:04:39.760 --> 00:04:44.290
The time untill the user sees
an indication that the page is loaded.

72
00:04:44.290 --> 00:04:46.602
If we tie this back to psychology,

73
00:04:46.602 --> 00:04:50.605
this is when the user first
feels their sense of certainty.

74
00:04:50.605 --> 00:04:54.883
That that click registered and
that your site is online and

75
00:04:54.883 --> 00:04:58.390
that they will get the data there after.

76
00:04:58.390 --> 00:05:00.558
Before that, there's a lot of uncertainty.

77
00:05:00.558 --> 00:05:06.369
And the longer that goes with the white
page, the more uncertainty builds.

78
00:05:06.369 --> 00:05:09.020
Condense this down to a simple rule.

79
00:05:09.020 --> 00:05:12.421
This is about responding quick.

80
00:05:12.421 --> 00:05:17.210
LCP is the largest contentful paint.

81
00:05:17.210 --> 00:05:22.845
So, throughout the loading cycle,
different parts of your screen will draw.

82
00:05:22.845 --> 00:05:25.540
And we can measure how much
of the screen has been drawn.

83
00:05:26.600 --> 00:05:31.866
And the time at which the largest
percentage of the screen was rendered,

84
00:05:31.866 --> 00:05:34.380
is the largest contentful paint.

85
00:05:34.380 --> 00:05:37.460
And this is just measured in pixel area.

86
00:05:37.460 --> 00:05:41.848
So each time a render cycle happens,
your browser will measure hey, what's

87
00:05:41.848 --> 00:05:46.780
the length and width of this element that
just came in and all the other elements?

88
00:05:46.780 --> 00:05:48.227
and here's the total area.

89
00:05:48.227 --> 00:05:53.620
And the time at which the largest area was
rendered is the largest contentful paint.

90
00:05:53.620 --> 00:05:58.386
Now this is a proxy for when does the user

91
00:05:58.386 --> 00:06:02.870
think that the site is almost ready.

92
00:06:05.170 --> 00:06:08.190
Here we can see an example on npr.org.

93
00:06:08.190 --> 00:06:12.360
The largest contentful paint on
this page is actually the images,

94
00:06:12.360 --> 00:06:14.070
which is very common.

95
00:06:14.070 --> 00:06:15.839
A lot of times your images are gonna be so

96
00:06:15.839 --> 00:06:19.380
big that the image becomes
the largest contentful paint.

97
00:06:19.380 --> 00:06:24.040
And so all three of these images kind
of load at the same render cycle.

98
00:06:24.040 --> 00:06:26.770
And so when the primary image is drawn.

99
00:06:26.770 --> 00:06:31.050
And article images for the columns below.

100
00:06:31.050 --> 00:06:33.580
And the advertisement image render,
this is LCP.

101
00:06:33.580 --> 00:06:37.550
And so the time until these come in
is an important metric to Google.

102
00:06:39.250 --> 00:06:43.635
This is the time until the user sees
that most of the pages there and

103
00:06:43.635 --> 00:06:47.080
believes that it's either ready or
almost ready.

104
00:06:48.522 --> 00:06:52.960
Condensing that down to a rule
that means get to the point.

105
00:06:52.960 --> 00:06:56.120
The user came to your site for a reason.

106
00:06:56.120 --> 00:06:58.759
Show that reason as fast as you can.

107
00:07:01.989 --> 00:07:07.605
The third metric that we're gonna talk
about is cumulative layout shift, CLS.

108
00:07:07.605 --> 00:07:12.417
This is a little GIF that we made,
that illustrates exactly what this is.

109
00:07:12.417 --> 00:07:15.232
You come to a page and
you go to click a button, but

110
00:07:15.232 --> 00:07:17.589
just as you're about to click a button.

111
00:07:17.589 --> 00:07:21.147
Some really obnoxious thing
loads in a synchronously and

112
00:07:21.147 --> 00:07:25.497
pushes the content down and
you almost just click on an ad.

113
00:07:25.497 --> 00:07:28.784
In some cases it's almost like they're
trying to get you to mistakenly

114
00:07:28.784 --> 00:07:29.507
click on an ad.

115
00:07:30.990 --> 00:07:35.510
And if this happens multiple times,
it gets even more frustrating.

116
00:07:35.510 --> 00:07:38.100
Well, this movement is
called the layout shift.

117
00:07:39.290 --> 00:07:43.444
And the cumulative layout shift is
a measurement of all the times that this

118
00:07:43.444 --> 00:07:46.480
happens during the lifetime of your page.

119
00:07:46.480 --> 00:07:48.440
So here's the New York Times.

120
00:07:48.440 --> 00:07:53.410
On the top, there's a really annoying top
banner image that you might have seen.

121
00:07:53.410 --> 00:07:55.030
That pushes the whole page down.

122
00:07:56.390 --> 00:08:00.410
And it's like 300 or 400 pixels,
and just is super irritating.

123
00:08:01.460 --> 00:08:04.832
And then if that primary image
takes a little while to load,

124
00:08:04.832 --> 00:08:08.480
that can push content out of the way
as the image comes in as well.

125
00:08:09.530 --> 00:08:14.456
And so the Cumulative Layout Shift,
is the total shift that happened because

126
00:08:14.456 --> 00:08:18.260
of the top image,
plus the total shift of the second image.

127
00:08:19.340 --> 00:08:23.270
Now this isn't a metric that just
recorded once during loading is done.

128
00:08:23.270 --> 00:08:25.670
This is the entire lifetime of the page.

129
00:08:25.670 --> 00:08:29.603
So if you're asynchronously
loading content over time,

130
00:08:29.603 --> 00:08:32.502
such as an infinite scroll list of things.

131
00:08:32.502 --> 00:08:37.258
If you're injecting content and
pushing other content down, you're

132
00:08:37.258 --> 00:08:42.506
creating lots and lots and lots of layout
shifts that Google is not gonna like.

133
00:08:42.506 --> 00:08:45.299
And frankly users don't really like.

134
00:08:45.299 --> 00:08:49.592
The cumulative layout shift is
the total movement distance and

135
00:08:49.592 --> 00:08:54.620
the impact of page elements during
that entire lifetime of the document.

136
00:08:55.930 --> 00:08:59.140
Simplified, don't move stuff around.

137
00:08:59.140 --> 00:09:01.354
Once you've shown stuff on the screen,

138
00:09:01.354 --> 00:09:05.008
don't move it even if other stuff
loads in a synchronously later.

139
00:09:08.361 --> 00:09:09.470
Thinking for a second.

140
00:09:10.720 --> 00:09:14.396
If the cumulative layout shift is
all of the shifts that happened

141
00:09:14.396 --> 00:09:16.857
during the entire lifetime of a document.

142
00:09:16.857 --> 00:09:20.221
How might this affect a client-side
rendered application or

143
00:09:20.221 --> 00:09:22.880
react application
an angular application etc.

144
00:09:24.380 --> 00:09:28.442
Well, in those sort of applications,
often you'll click on something, and

145
00:09:28.442 --> 00:09:32.320
it'll redraw a big portion of
the screen to simulate a page movement.

146
00:09:32.320 --> 00:09:34.260
But it wasn't really a page moment.

147
00:09:34.260 --> 00:09:36.450
It was the same document it was before.

148
00:09:37.820 --> 00:09:41.870
Did that push things around
as part of that click?

149
00:09:41.870 --> 00:09:45.441
If so, that created a whole
lot of layout shift and

150
00:09:45.441 --> 00:09:49.790
made your commutative layout
shift score a whole lot worse.

151
00:09:53.420 --> 00:09:54.886
All right, the fourth and

152
00:09:54.886 --> 00:09:59.470
final web vital that we're gonna
talk about is the first input delay.

153
00:09:59.470 --> 00:10:02.180
And for many,
this is the hardest one to understand.

154
00:10:02.180 --> 00:10:06.837
Cuz it's more conceptual about what
the browser needs to be doing, and not so

155
00:10:06.837 --> 00:10:08.710
much about what the user sees.

156
00:10:09.830 --> 00:10:14.231
So let's say you see a web page load and
you think it's done,

157
00:10:14.231 --> 00:10:20.550
the largest contentful paint has happened,
and you're ready to start doing things.

158
00:10:20.550 --> 00:10:23.770
So CNN has loaded and
you go to click on an article.

159
00:10:23.770 --> 00:10:28.399
Well, in order to improve their scores,
they might have deferred

160
00:10:28.399 --> 00:10:33.460
a bunch of their work to load later
after the content has happened.

161
00:10:33.460 --> 00:10:34.070
And that's fine.

162
00:10:34.070 --> 00:10:35.650
That's a good thing to do.

163
00:10:35.650 --> 00:10:40.673
But think deferred so much content, so
much JavaScript still needs to be run,

164
00:10:40.673 --> 00:10:45.300
that the browser is busy doing
that when the user first clicks.

165
00:10:45.300 --> 00:10:50.261
There's gonna be a delay, between
the time when the page looks ready, and

166
00:10:50.261 --> 00:10:56.330
the user interacts with it, until the time
the first click handler can fire.

167
00:10:56.330 --> 00:10:59.170
This isn't the time that
your click handler takes.

168
00:10:59.170 --> 00:11:03.373
It's the time that the browser
is too busy passing, and

169
00:11:03.373 --> 00:11:09.200
compiling your Java Script, to even
fire the event is the first input delay.

170
00:11:10.460 --> 00:11:13.440
And so this is only measured on
times when the user interacts.

171
00:11:13.440 --> 00:11:17.550
If the user never interacts with your
page, you never even get this metric.

172
00:11:17.550 --> 00:11:22.000
But when they do, this is
an indication of your page is ready.

173
00:11:22.000 --> 00:11:24.086
The user thought they could do something,
but

174
00:11:24.086 --> 00:11:26.820
they really couldn't cuz
you weren't done yet.

175
00:11:26.820 --> 00:11:29.890
You were still loading abnoxious
amounts of stuff in the background.

176
00:11:32.210 --> 00:11:36.766
The first input delay is the browser time
delay between the users first click and

177
00:11:36.766 --> 00:11:40.110
the execution of your application code.

178
00:11:40.110 --> 00:11:42.829
Simplified, don't load so much stuff.

179
00:11:43.980 --> 00:11:45.213
Don't load what you don't need.

180
00:11:47.441 --> 00:11:49.340
So let's compile those together.

181
00:11:49.340 --> 00:11:52.830
The first contentful paint
is about responding quick.

182
00:11:52.830 --> 00:11:54.810
Get something out the door to
the user as soon as you can.

183
00:11:55.890 --> 00:12:00.120
The largest contentful paint is about
measuring how well you get to the point.

184
00:12:00.120 --> 00:12:03.410
Show the user what they came here for
as fast as you can.

185
00:12:04.580 --> 00:12:08.610
The commulative layout shift is
a rule to don't move stuff around.

186
00:12:08.610 --> 00:12:13.200
If you put it on the screen, don't change
where it is, as other things come in.

187
00:12:13.200 --> 00:12:16.580
And the first input delay measures,
don't load too much stuff.

188
00:12:16.580 --> 00:12:20.572
Don't put too many things on the page
that it's gonna slow the browser down.

189
00:12:22.832 --> 00:12:27.520
Each of these metrics has a range,
that Google thinks is acceptable.

190
00:12:28.910 --> 00:12:32.659
For LCP for example, if you can show
the largest amount of content in less than

191
00:12:32.659 --> 00:12:35.610
two and a half seconds,
Google thinks you're doing great.

192
00:12:36.810 --> 00:12:41.570
If it's less than four seconds,
you might need to get a little better.

193
00:12:41.570 --> 00:12:44.860
If you're worse than that,
it thinks you suck.

194
00:12:44.860 --> 00:12:47.670
And it thinks that it's going to
rank you slower in the future.

195
00:12:49.060 --> 00:12:52.566
It's got these scores for
each of the metrics and it's available,

196
00:12:52.566 --> 00:12:56.080
on the lighthouse reports and
on everything that they show you.

197
00:12:56.080 --> 00:12:57.490
They're gonna colour code your stuff.

198
00:12:58.640 --> 00:13:01.860
In fact, in our next exercise,
we're gonna take a look at that as well.

