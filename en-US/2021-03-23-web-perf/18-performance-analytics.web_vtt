WEBVTT

1
00:00:00.720 --> 00:00:02.998
So let's look at some performance.

2
00:00:02.998 --> 00:00:07.931
So in our hypothetical example,
we now deploy our

3
00:00:07.931 --> 00:00:12.636
website with some
performance analysis in it.

4
00:00:12.636 --> 00:00:17.696
And we can produce some
charts based on that.

5
00:00:17.696 --> 00:00:20.310
I can show you how we did that.

6
00:00:20.310 --> 00:00:23.387
If we look at this log file.

7
00:00:23.387 --> 00:00:25.536
Yours probably doesn't have
as many entries as mine.

8
00:00:25.536 --> 00:00:30.752
But if you just reload Chrome a bunch more
times, you'll get you'll get more entries.

9
00:00:30.752 --> 00:00:33.467
We can chart this pretty easily.

10
00:00:33.467 --> 00:00:37.398
I have a document all set up for
you already.

11
00:00:37.398 --> 00:00:40.308
If you look in the readme
of this repository,

12
00:00:40.308 --> 00:00:42.842
there's a link out to both documents.

13
00:00:42.842 --> 00:00:47.637
Both the performance worksheet
that we played with in part one.

14
00:00:47.637 --> 00:00:52.626
As well as this example
performance dashboard that we're

15
00:00:52.626 --> 00:00:54.569
going to look at next.

16
00:00:54.569 --> 00:01:00.780
If you pop open the performance dashboard
and again, make a copy of this.

17
00:01:00.780 --> 00:01:06.894
So that you can edit the numbers
here is some very simplified

18
00:01:06.894 --> 00:01:12.164
reports based on your field
data that we captured.

19
00:01:12.164 --> 00:01:15.818
This works through a dashboard and
a data sheet.

20
00:01:15.818 --> 00:01:23.254
The data is just hate you took the CSV
contents of that log and you paste it in.

21
00:01:23.254 --> 00:01:27.989
So we'll do that together.

22
00:01:27.989 --> 00:01:33.934
I'm going to go into my perf.log.csv.

23
00:01:33.934 --> 00:01:41.005
And I'm going to select it all and
copy it.

24
00:01:41.005 --> 00:01:45.289
And then I'm gonna to go to
my performance worksheet.

25
00:01:45.289 --> 00:01:48.489
I'm gonna delete the sample
data that's already in here.

26
00:01:53.609 --> 00:01:56.492
I'm gonna paste it in
the stuff I just pulled in.

27
00:01:59.051 --> 00:02:04.703
Now it might not properly
figure everything out for

28
00:02:04.703 --> 00:02:11.675
you, and so you'll need to go to Data,
split text to columns.

29
00:02:11.675 --> 00:02:15.996
So that's going to be the field
data that we pulled from our perf.

30
00:02:15.996 --> 00:02:22.772
JS agent as we've loaded it here locally
playing, flipping back to the dashboard.

31
00:02:22.772 --> 00:02:28.227
This will then Chart the data

32
00:02:28.227 --> 00:02:33.007
that we were looking at.

33
00:02:33.007 --> 00:02:40.486
So based on what you put in what you paste
into your data, here is your load times.

34
00:02:40.486 --> 00:02:44.598
First contentful paints,
largest contentful paints,

35
00:02:44.598 --> 00:02:48.119
kimito layout shifts,
and first input delays.

36
00:02:48.119 --> 00:02:54.773
With them charted here below.

37
00:02:54.773 --> 00:02:57.044
So being that we haven't made any changes.

38
00:02:57.044 --> 00:03:01.780
What we're looking at right now is just
the natural variability that happens in

39
00:03:01.780 --> 00:03:02.847
small datasets.

40
00:03:02.847 --> 00:03:05.856
So we only have a few points
of data to work with.

41
00:03:05.856 --> 00:03:09.643
We really need to get up into the hundreds
before like things start to make

42
00:03:09.643 --> 00:03:10.336
sense here.

43
00:03:10.336 --> 00:03:18.973
But it looks like we have
some normal levels of data.

44
00:03:18.973 --> 00:03:22.533
Let's move back in to our slides and
our hypothetical.

45
00:03:22.533 --> 00:03:27.285
So if we deploy this and
start gathering data for some days,

46
00:03:27.285 --> 00:03:29.863
some weeks a month, whatever.

47
00:03:29.863 --> 00:03:32.587
Here's some field data that we pulled in.

48
00:03:34.145 --> 00:03:38.733
And there's a couple interesting
things in this data over time.

49
00:03:38.733 --> 00:03:42.399
There's a couple of LCP issues here.

50
00:03:42.399 --> 00:03:47.245
Where at least in these two different
times the LCP has spiked up

51
00:03:47.245 --> 00:03:51.282
quite a bit higher than what
it would normally be at.

52
00:03:51.282 --> 00:03:56.065
And here we had some sort of layout
shift issue that spiked that up

53
00:03:56.065 --> 00:03:57.848
considerably higher.

54
00:03:57.848 --> 00:04:01.718
Now in isolation, we don't know what
these mean, we know they got worse.

55
00:04:01.718 --> 00:04:08.825
But we don't know that that's bad or
that that's anything to care about.

56
00:04:08.825 --> 00:04:13.420
So we need to compare it
with real business data.

57
00:04:13.420 --> 00:04:18.127
And that's where our,
the justification for our time and

58
00:04:18.127 --> 00:04:21.401
our efforts are going to come into play.

59
00:04:21.401 --> 00:04:26.219
So if we overlay our business analytics
that we captured before with our bounce

60
00:04:26.219 --> 00:04:27.903
rate and our session time.

61
00:04:27.903 --> 00:04:30.944
We can see a correlation here.

62
00:04:30.944 --> 00:04:34.265
We can see that the stuff happened weird.

63
00:04:34.265 --> 00:04:38.383
At the same points in both charts.

64
00:04:38.383 --> 00:04:43.382
On the far left, we see that hey,
when CLS got a lot worse,

65
00:04:43.382 --> 00:04:46.764
the session time fell and on the right.

66
00:04:46.764 --> 00:04:51.026
We see that that happened the same way.

67
00:04:51.026 --> 00:04:55.489
When CLS kind of freaked
out session time fell.

68
00:04:55.489 --> 00:05:02.486
But also that when first contentful
paint got slower bounce rate went up.

69
00:05:02.486 --> 00:05:05.213
Which kind of intuitively makes sense.

70
00:05:05.213 --> 00:05:09.651
If it takes a long time for your page to
load, then the users are just gonna leave,

71
00:05:09.651 --> 00:05:11.433
they're not gonna wait for it.

72
00:05:12.826 --> 00:05:17.076
And so these kind of patterns in
the data teach us some things,

73
00:05:17.076 --> 00:05:19.952
we can arrive at conclusions based on it.

74
00:05:19.952 --> 00:05:23.891
And the first is that
commutative lot layout shift

75
00:05:23.891 --> 00:05:27.279
is inversely correlated to session time.

76
00:05:27.279 --> 00:05:32.747
As our layout shifts get worse,
the sessions are going to get shorter.

77
00:05:32.747 --> 00:05:39.299
And that the largest contentful paint
is inversely correlated to bounce rate.

78
00:05:39.299 --> 00:05:43.505
The time it takes to paint
our screen gets slower,

79
00:05:43.505 --> 00:05:48.524
the more likely it's going to
be that our customers leave.

80
00:05:48.524 --> 00:05:52.536
Now, it's important to remember
is that this is for our example.

81
00:05:52.536 --> 00:05:56.549
This is based on this data that
I've showed you right now.

82
00:05:56.549 --> 00:06:01.625
That correlation, is not universal and
it might not exist for

83
00:06:01.625 --> 00:06:05.049
your customers, for your application.

84
00:06:05.049 --> 00:06:08.225
It's important to look at
your performance data, and

85
00:06:08.225 --> 00:06:10.926
correlate it against
your business metrics.

86
00:06:10.926 --> 00:06:14.741
So that you can see what
if any correlations exist,

87
00:06:14.741 --> 00:06:17.678
that you can use to drive your efforts.

88
00:06:17.678 --> 00:06:21.783
To improve your data, because if you're
not focused on what the customers.

89
00:06:21.783 --> 00:06:24.908
What the users are actually doing,

90
00:06:24.908 --> 00:06:29.811
you don't know if you're
improving the right things.

91
00:06:29.811 --> 00:06:34.619
So let's move on to
improving the right things.

92
00:06:34.619 --> 00:06:40.820
So there's a pretty simple rule
to how to improve performance.

93
00:06:40.820 --> 00:06:45.080
This is general, whether you're
talking about application performance,

94
00:06:45.080 --> 00:06:47.510
database performance, web performance.

95
00:06:47.510 --> 00:06:50.678
There's really just one
thing you need to do.

96
00:06:50.678 --> 00:06:53.587
You need to do fewer things.

97
00:06:53.587 --> 00:06:59.237
You can't really do it faster,
but you can do fewer things.

98
00:06:59.237 --> 00:07:02.442
And I mean that in every possible layer,
so

99
00:07:02.442 --> 00:07:06.727
you can send fewer bytes,
you can send fewer documents.

100
00:07:06.727 --> 00:07:12.570
You can send smaller documents,
you can have less overhead.

101
00:07:12.570 --> 00:07:16.287
Ultimately, all that we
can do in any part of

102
00:07:16.287 --> 00:07:20.617
web development is figuring
out a way to do things.

103
00:07:20.617 --> 00:07:21.454
So that's it.

104
00:07:21.454 --> 00:07:22.519
That's how I would do it.

105
00:07:22.519 --> 00:07:26.212
The end let's go to the bar.

106
00:07:26.212 --> 00:07:31.153
No, growing up.

