WEBVTT

1
00:00:00.030 --> 00:00:02.806
Before we get started on part three,
I wanna give an opportunity for

2
00:00:02.806 --> 00:00:04.180
us to talk about some questions.

3
00:00:04.180 --> 00:00:08.864
There was a great question in chat
just before we left about whether or

4
00:00:08.864 --> 00:00:13.791
not the first input delay is different
than another metric called time to

5
00:00:13.791 --> 00:00:15.720
interactivity.

6
00:00:15.720 --> 00:00:18.671
Time to interactivity is another
metric that you'll see in the Google

7
00:00:18.671 --> 00:00:20.010
lighthouse report.

8
00:00:20.010 --> 00:00:23.370
But it's not usually considered
one of the core web vitals.

9
00:00:23.370 --> 00:00:25.929
It's not something that
Google is gonna rank you on.

10
00:00:25.929 --> 00:00:27.600
They're different things.

11
00:00:27.600 --> 00:00:32.202
Time to interactivity is a milestone
that happens sometime after largest

12
00:00:32.202 --> 00:00:33.920
contentful paint.

13
00:00:33.920 --> 00:00:39.216
And it's the milestone at which your
document is all kind of built together and

14
00:00:39.216 --> 00:00:43.820
Google thinks it is fully
ready to accept user input.

15
00:00:43.820 --> 00:00:48.971
Whereas first input delay is
that from the time when the user

16
00:00:48.971 --> 00:00:54.123
actually interacts with your site,
until when your code is

17
00:00:54.123 --> 00:01:00.100
able to respond to an event,
that delay is first input delay.

18
00:01:00.100 --> 00:01:03.260
The first is a milestone
in the loading process.

19
00:01:03.260 --> 00:01:07.260
It's something else taking consider
between first contentful paint,

20
00:01:07.260 --> 00:01:10.086
largest contentful paint,
time to interactive.

21
00:01:10.086 --> 00:01:13.297
Whereas first input delay is
more measuring whether or

22
00:01:13.297 --> 00:01:16.305
not you're loading too much stuff.

23
00:01:16.305 --> 00:01:18.145
But it's a good question.

24
00:01:18.145 --> 00:01:24.924
So the question from zoom was not fully
understanding what the performance and,

25
00:01:24.924 --> 00:01:28.820
was it the Performance tab or
the Network tab?

26
00:01:31.110 --> 00:01:32.600
&gt;&gt; It was the Performance tab.

27
00:01:32.600 --> 00:01:35.921
&gt;&gt; The Performance tab,
not fully understanding all the different

28
00:01:35.921 --> 00:01:39.300
information that's in the Performance
tab of Google dev tools.

29
00:01:39.300 --> 00:01:40.650
And well, we can absolutely do that.

30
00:01:40.650 --> 00:01:42.790
We'll go through that here in a second.

31
00:01:42.790 --> 00:01:47.764
I just wanna point out before we dig
into that, that there is a whole course

32
00:01:47.764 --> 00:01:52.580
in the front end masters catalog that
focuses on the Chrome Dev Tools and

33
00:01:52.580 --> 00:01:55.329
I believe it takes a deep dive into that.

34
00:01:55.329 --> 00:01:58.826
But we can do a five minute
version of that right now,

35
00:01:58.826 --> 00:02:01.860
which might be helpful for
a bunch of people.

36
00:02:02.930 --> 00:02:04.440
So let's go ahead and do that,

37
00:02:04.440 --> 00:02:07.530
since I didn't see anybody else
running to answer a question.

38
00:02:08.540 --> 00:02:11.730
So let's take a look at
the Performance tab.

39
00:02:11.730 --> 00:02:15.578
And indeed there is a whole
lot of stuff going on.

40
00:02:15.578 --> 00:02:19.984
This has always been like
some of the most intimidating

41
00:02:19.984 --> 00:02:23.912
information dense things that Chrome does,
and

42
00:02:23.912 --> 00:02:30.100
I personally think that this could use
a lot of UI work, but it is what it is.

43
00:02:30.100 --> 00:02:32.930
Everybody seems to be confused by it,
including me.

44
00:02:32.930 --> 00:02:35.358
It took me a very long time
of clicking around and

45
00:02:35.358 --> 00:02:37.800
I still get lost in it all the time.

46
00:02:37.800 --> 00:02:40.420
So don't feel bad about that at all.

47
00:02:41.680 --> 00:02:46.270
There's a couple of different
sections of this that are important.

48
00:02:46.270 --> 00:02:47.310
Let's go from the top down.

49
00:02:48.340 --> 00:02:52.910
We have this first, third of the page.

50
00:02:52.910 --> 00:02:53.965
Not quite third of the page.

51
00:02:53.965 --> 00:02:58.821
And what this is showing,
is it showing kind of a top level

52
00:02:58.821 --> 00:03:03.678
view of how busy was your
machine while this page loaded,

53
00:03:03.678 --> 00:03:08.434
how much of various resources
were being consumed, and

54
00:03:08.434 --> 00:03:12.615
what did the page look like at that time.

55
00:03:12.615 --> 00:03:16.927
So you can see as I kind of move
my mouse left and right here,

56
00:03:16.927 --> 00:03:21.592
I see these little pop ups that says,
at this particular time,

57
00:03:21.592 --> 00:03:26.450
here's what the page looked
like in the loading process.

58
00:03:26.450 --> 00:03:30.087
Hence it's low rez, it's not like
a perfect pixel perfect image, but

59
00:03:30.087 --> 00:03:32.980
it gives you an idea of what it was like.

60
00:03:32.980 --> 00:03:37.160
So for example, this is at 1394
milliseconds 1194 994, etc.

61
00:03:37.160 --> 00:03:41.901
The line or this area chart in the middle,

62
00:03:41.901 --> 00:03:48.430
I personally have never
found it valuable at all.

63
00:03:48.430 --> 00:03:51.520
But it's charting different
things that are happening.

64
00:03:51.520 --> 00:03:54.520
So how busy is the CPU on your machine?

65
00:03:54.520 --> 00:03:58.230
And what is consuming that time?

66
00:03:58.230 --> 00:04:04.342
Those numbers are the colors
line up relevantly or

67
00:04:04.342 --> 00:04:10.500
line up to these activities
here in the bottom.

68
00:04:10.500 --> 00:04:15.860
So if you see a blue thing coming up,
it's all the CPU is caught up loading.

69
00:04:15.860 --> 00:04:19.590
Yellow is what you'll see more of and
that's time that's caught up in scripting.

70
00:04:19.590 --> 00:04:23.379
You don't see a whole lot of yellow
on this particular chart because this

71
00:04:23.379 --> 00:04:26.970
website doesn't have a whole
lot of JavaScript on it.

72
00:04:26.970 --> 00:04:28.590
The purple is rendering.

73
00:04:28.590 --> 00:04:31.506
So that's the actual time that
the browser is figuring out Hey,

74
00:04:31.506 --> 00:04:33.080
what does this element look like?

75
00:04:33.080 --> 00:04:35.189
Where does it need to be,
that sort of thing.

76
00:04:35.189 --> 00:04:36.900
And green is painting.

77
00:04:36.900 --> 00:04:41.350
So the actually placing of things,
the drawing of individual pixels.

78
00:04:42.710 --> 00:04:46.475
The top part of this which we don't
really have anything interesting to

79
00:04:46.475 --> 00:04:50.040
say about my application,
is the frames per second.

80
00:04:50.040 --> 00:04:54.244
So frames per second is how many, if you
have an animation or something like that

81
00:04:54.244 --> 00:04:58.470
something is animating onto the page or
you're doing fancy stuff with canvas.

82
00:04:59.480 --> 00:05:04.020
How many frames per second is
your browser able to render?

83
00:05:04.020 --> 00:05:07.623
What that is usually indicative of
something much more interactive kind

84
00:05:07.623 --> 00:05:08.640
of thing.

85
00:05:08.640 --> 00:05:13.132
And you're usually shooting for
16 frames a second or better,

86
00:05:13.132 --> 00:05:17.230
which is what a human would be
able to normally perceive of.

87
00:05:17.230 --> 00:05:21.652
And if anytime that frames per second
drops below 16 frames per second,

88
00:05:21.652 --> 00:05:27.010
then the UI starts feeling a little janky,
kinda like glitchy to the end user.

89
00:05:27.010 --> 00:05:28.990
Again, there's no animations on this page.

90
00:05:28.990 --> 00:05:33.922
There's nothing really interesting
to show on this particular example.

91
00:05:33.922 --> 00:05:37.250
And on the bottom here we have the heap.

92
00:05:37.250 --> 00:05:41.150
So if you're having problems
with like JavaScript memory and

93
00:05:41.150 --> 00:05:46.025
you need to know, is there a memory leak
and where it might be, this is your top

94
00:05:46.025 --> 00:05:50.540
little roll up of how much memory has
JavaScript consumed on this page.

95
00:05:50.540 --> 00:05:54.940
How much is JavaScript and
the Document Object Model entirely?

96
00:05:54.940 --> 00:05:59.716
How much does it consume to the page and
when in the lifecycle of the page during

97
00:05:59.716 --> 00:06:03.520
the loading process was
that memory allocated?

98
00:06:03.520 --> 00:06:08.836
So we can see from the beginning
there's very little happening

99
00:06:08.836 --> 00:06:13.859
right here at this point
around 570 milliseconds or so.

100
00:06:16.831 --> 00:06:19.890
Right here,
we see a big increase in the heap.

101
00:06:19.890 --> 00:06:24.113
This is probably the rendering of a bunch
of elements that happened because every

102
00:06:24.113 --> 00:06:28.940
element on the dom is like an object
in the model that requires some memory.

103
00:06:28.940 --> 00:06:33.140
That's this high level thing rolling
up here and how to read that.

104
00:06:33.140 --> 00:06:35.268
This in a lot of ways is a mini map,

105
00:06:35.268 --> 00:06:40.230
like a navigation element to the data
below, which is drilling into things.

106
00:06:41.490 --> 00:06:46.648
So, this middle section here
is super information dense,

107
00:06:46.648 --> 00:06:50.620
and in a lot of ways, it's very small.

108
00:06:50.620 --> 00:06:54.130
And so the top is largely meant
as like a navigation element.

109
00:06:54.130 --> 00:06:55.960
So you see something interesting.

110
00:06:55.960 --> 00:07:00.863
If I see, hey, right here, there's a whole
bunch of interesting things happening in

111
00:07:00.863 --> 00:07:05.297
this chart and it looks like a major load
event is happening kinda right there,

112
00:07:05.297 --> 00:07:08.400
I can select this area to zoom in on it.

113
00:07:08.400 --> 00:07:14.090
Now this section below is now a zoomed in
representation of what we see up here.

114
00:07:14.090 --> 00:07:18.602
And we can explore different
interactions of the page in that time.

115
00:07:18.602 --> 00:07:21.711
So for example,
the network if we expand that,

116
00:07:21.711 --> 00:07:27.020
we can see what network transactions were
happening during this specific time.

117
00:07:28.100 --> 00:07:32.973
In this case, it looks like there
was a font being downloaded that was

118
00:07:32.973 --> 00:07:35.250
in progress from Google fonts.

119
00:07:37.370 --> 00:07:41.347
If we scroll to different times, So

120
00:07:41.347 --> 00:07:45.879
scrolling left I see other things being
downloaded earlier in the page cycle.

121
00:07:49.334 --> 00:07:52.940
You really need a big screen to
understand a lot of this stuff.

122
00:07:54.120 --> 00:07:59.022
So as we scroll back, we can see
all the different assets that need

123
00:07:59.022 --> 00:08:03.136
to be loaded as part of this page and
when they started.

124
00:08:03.136 --> 00:08:06.414
So if we go all the way
back to the beginning,

125
00:08:06.414 --> 00:08:12.097
we see here's when the request for
the initial document started coming in.

126
00:08:12.097 --> 00:08:17.119
And then at around 100 milliseconds
the document finished enough so

127
00:08:17.119 --> 00:08:20.560
it could start downloading
these other things.

128
00:08:20.560 --> 00:08:23.202
The main.css file started first,

129
00:08:23.202 --> 00:08:28.232
followed by a bunch of these images
that were near the top of the DOM.

130
00:08:28.232 --> 00:08:32.905
Once the main.css loaded enough
it knew that it needed to start

131
00:08:32.905 --> 00:08:36.093
loading this other CSS files from Google.

132
00:08:36.093 --> 00:08:40.480
We keep going we see or
at this point at 122 milliseconds,

133
00:08:40.480 --> 00:08:42.980
the perf JS file started loading.

134
00:08:42.980 --> 00:08:46.400
This must been when we hit the bottom
of the page and we started rendering.

135
00:08:46.400 --> 00:08:51.254
And so as we scroll through this,
we can see when each resource started,

136
00:08:51.254 --> 00:08:56.279
and how long it took, and maybe what
it was contending for resources with.

137
00:08:56.279 --> 00:08:58.900
Is how to read this section right here.

138
00:09:02.170 --> 00:09:07.047
So the network tab is, or the network
section to that is super interesting.

139
00:09:07.047 --> 00:09:10.619
Frames is like a zoomed in
version of the screenshots,

140
00:09:10.619 --> 00:09:14.700
it's like when did the major
parts of the page change.

141
00:09:14.700 --> 00:09:16.658
As you scroll through it,

142
00:09:16.658 --> 00:09:21.890
you'll see here's what at every
different time the page change.

143
00:09:21.890 --> 00:09:23.000
Here's what it looked like.

144
00:09:23.000 --> 00:09:28.460
So at exactly this time is when
the slop writing the rocket came in.

145
00:09:28.460 --> 00:09:32.062
The text hasn't even rendered yet
because some of the things are waiting for

146
00:09:32.062 --> 00:09:33.335
a font to come down.

147
00:09:33.335 --> 00:09:38.825
But the rocket has to come in, and the
rocket is the largest thing on the page.

148
00:09:38.825 --> 00:09:42.602
We see a few milliseconds later,
a little chat window renders, and

149
00:09:42.602 --> 00:09:44.835
we see the high in the corner.

150
00:09:44.835 --> 00:09:49.855
And as we go through, we can see at what
time did each part of the page come in.

151
00:09:52.295 --> 00:09:53.785
That's what the frames are showing you.

152
00:09:56.090 --> 00:10:00.076
Interactions and animations is for
more interactive things that's like

153
00:10:00.076 --> 00:10:04.000
click events and how long this
animation took and that sort of thing.

154
00:10:04.000 --> 00:10:05.540
It's not really relevant for this page.

155
00:10:05.540 --> 00:10:07.430
There's nothing in it.

156
00:10:07.430 --> 00:10:10.220
Actually I've no idea what
this experience tab is for.

157
00:10:10.220 --> 00:10:11.900
I've never seen anything useful in it.

158
00:10:11.900 --> 00:10:14.047
So I can't tell you.

159
00:10:14.047 --> 00:10:16.730
Main is about JavaScript.

160
00:10:16.730 --> 00:10:19.880
It's about execution of things.

161
00:10:19.880 --> 00:10:24.437
So if we zoom in on an area where
JavaScript is happening and

162
00:10:24.437 --> 00:10:28.070
zoom in on things,
we have to zoom in real far.

163
00:10:30.110 --> 00:10:36.008
We can see when different tasks
are being fired, so a set timeout or

164
00:10:36.008 --> 00:10:40.550
something is finishing and
we need to do some work.

165
00:10:40.550 --> 00:10:44.040
Now there's nothing particularly
interesting happening on this page.

166
00:10:44.040 --> 00:10:48.830
This must be something in the background
that I don't really know about.

167
00:10:48.830 --> 00:10:52.136
Let's zoom out and
see if there's anything else interesting.

168
00:10:52.136 --> 00:10:53.643
Here's a bunch of stuff at the beginning.

169
00:10:58.582 --> 00:11:00.390
Right, here's a good one.

170
00:11:00.390 --> 00:11:00.890
Okay.

171
00:11:03.902 --> 00:11:08.709
So here we have some things going on and
if we look at this, this is a task.

172
00:11:08.709 --> 00:11:11.646
If we want some more
information about this,

173
00:11:11.646 --> 00:11:16.979
this is where this bottom section starts
becoming valuable cuz if we pull this up,

174
00:11:16.979 --> 00:11:19.480
we can see what exactly that task was.

175
00:11:20.620 --> 00:11:23.191
We can see how long did it take,
what was it.

176
00:11:23.191 --> 00:11:27.855
It looks like it was some system task that
went off executing some maybe JavaScript

177
00:11:27.855 --> 00:11:29.970
that's built into the browser.

178
00:11:29.970 --> 00:11:31.330
Not really sure.

179
00:11:31.330 --> 00:11:36.590
But that fired off compact evaluating
a script and compiling a script.

180
00:11:36.590 --> 00:11:40.353
So this was probably downloading one of
our JavaScript files, evaluating it and

181
00:11:40.353 --> 00:11:41.860
figuring out what to do with it.

182
00:11:43.360 --> 00:11:44.310
And so we can zoom in here.

183
00:11:45.400 --> 00:11:47.168
If you have other things on the page,

184
00:11:47.168 --> 00:11:50.431
you probably have much more
interesting JavaScript on your pages.

185
00:11:50.431 --> 00:11:54.233
You'll see set timeouts fire or Click
events and you'll see exactly the call

186
00:11:54.233 --> 00:11:58.038
tree of this JavaScript called this
JavaScript called this JavaScript, and

187
00:11:58.038 --> 00:12:00.230
how long each of those things take.

188
00:12:00.230 --> 00:12:04.758
The main tab is super valuable for
understanding the performance of

189
00:12:04.758 --> 00:12:10.580
the JavaScript itself, which was a little
bit outside the sphere of this course.

190
00:12:10.580 --> 00:12:15.440
But there's two whole other courses
in the front end masters catalog

191
00:12:15.440 --> 00:12:20.472
about JavaScript performance and
JavaScript bundling performance,

192
00:12:20.472 --> 00:12:24.660
about how to get really
deep on this section.

193
00:12:24.660 --> 00:12:30.160
There's a bunch of other stuff that
honestly I have never used for

194
00:12:30.160 --> 00:12:31.900
anything useful.

195
00:12:31.900 --> 00:12:36.657
And so I don't know that I can speak
to intelligently about it if I

196
00:12:36.657 --> 00:12:38.870
speak intelligently at all.

197
00:12:38.870 --> 00:12:44.270
But so the biggest tip I can give
you is think of this UI like a tree.

198
00:12:44.270 --> 00:12:48.239
The top is a navigation to the middle,
and the middle,

199
00:12:48.239 --> 00:12:51.440
blows up in more detail on the bottom.

200
00:12:51.440 --> 00:12:54.155
And so
if you can kind of get that in your head,

201
00:12:54.155 --> 00:12:57.020
the information feels
a little bit less dense.

202
00:12:58.040 --> 00:13:02.040
Also be aware that JavaScript
apps are very diverse.

203
00:13:02.040 --> 00:13:03.540
There's lots of different kinds of things.

204
00:13:03.540 --> 00:13:04.166
And so for

205
00:13:04.166 --> 00:13:10.260
any app that you're working with probably
75% of this data isn't relevant to you.

206
00:13:10.260 --> 00:13:15.200
So focus on the bits of performance
that are relevant to your site.

207
00:13:15.200 --> 00:13:18.804
If you're not doing animation stuff,
don't worry about frames per second and

208
00:13:18.804 --> 00:13:19.850
animation.

209
00:13:19.850 --> 00:13:24.572
If you're not writing a lot of JavaScript,
don't put a bunch of JavaScript in here.

210
00:13:24.572 --> 00:13:28.270
Focus on the bits of this that
are relevant for your application.

211
00:13:29.270 --> 00:13:33.277
&gt;&gt; So I was curious on the demonstration
performance dashboard,

212
00:13:33.277 --> 00:13:38.339
I knew there's a lot more complex places
to grab a lot of that data, do you happen

213
00:13:38.339 --> 00:13:43.120
to use this type of format and grabbing
it for just a quick high level usage.

214
00:13:43.120 --> 00:13:47.338
I know I have to deal with some sites
that this could be very useful but

215
00:13:47.338 --> 00:13:52.222
it seems like very labor intensive but
same time it provides that really nice,

216
00:13:52.222 --> 00:13:55.310
I don't need a lot of that in the weeds,
right?

217
00:13:55.310 --> 00:13:59.080
&gt;&gt; Yeah, so this would be, feel free
to take this and use it for things.

218
00:13:59.080 --> 00:14:02.606
There's a couple of kind of big
limitations of this particular

219
00:14:02.606 --> 00:14:06.143
dashboard because this was for
a demonstration kind of thing.

220
00:14:06.143 --> 00:14:10.280
It's not the kind of thing you would
necessarily use in production.

221
00:14:10.280 --> 00:14:14.541
The biggest problem with this current
sheet is that it's charting each

222
00:14:14.541 --> 00:14:18.803
individual line as its own thing when
not everything is the same level of

223
00:14:18.803 --> 00:14:20.180
importance.

224
00:14:20.180 --> 00:14:22.612
You'd probably want to roll things up and

225
00:14:22.612 --> 00:14:26.370
say give me a summary of what
happened each minute kind of thing.

226
00:14:26.370 --> 00:14:28.672
So you could see variations
in minute to minute.

227
00:14:28.672 --> 00:14:32.880
How did things happen and how many data
points are rolled into each minute.

228
00:14:32.880 --> 00:14:34.420
You can totally do that
with Google Sheets.

229
00:14:34.420 --> 00:14:37.150
You could use a pivot table to do that.

230
00:14:37.150 --> 00:14:40.098
It's all gonna be a little
labor intensive like you said.

231
00:14:40.098 --> 00:14:43.330
If you just need to do a one off and
you had access to the data,

232
00:14:43.330 --> 00:14:45.030
you could totally do it.

233
00:14:45.030 --> 00:14:49.483
If you're gonna be doing work long term
performance analysis of field data, I

234
00:14:49.483 --> 00:14:54.420
would totally recommend that you have some
sort of monitoring aggregating solution.

235
00:14:54.420 --> 00:14:58.690
Either something that you home grow
yourself with something like perf JS

236
00:14:58.690 --> 00:15:01.560
writing to your back end and
build something, or

237
00:15:01.560 --> 00:15:05.900
a service like request metrics or
similar kind of thing to capture data and

238
00:15:05.900 --> 00:15:08.650
give you those long term
kind of projections.

