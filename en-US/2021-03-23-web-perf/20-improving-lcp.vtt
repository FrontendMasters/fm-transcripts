WEBVTT

1
00:00:00.860 --> 00:00:02.090
We're gonna move on to our second metric.

2
00:00:02.090 --> 00:00:08.930
And this is the most interesting metric,
probably the largest contentful paint.

3
00:00:10.230 --> 00:00:13.380
So we know how to get
the first bytes out the door.

4
00:00:13.380 --> 00:00:15.720
We can make some some
infrastructure changes and

5
00:00:15.720 --> 00:00:19.420
make sure that we're getting our
bytes out as fast as possible.

6
00:00:19.420 --> 00:00:24.433
But how do we make sure that the bytes
that we're sending in loading the page

7
00:00:24.433 --> 00:00:30.140
are the right ones to get to this point
of completion as soon as possible.

8
00:00:30.140 --> 00:00:35.233
As a reminder, the largest contentful
paint is that time between starts and

9
00:00:35.233 --> 00:00:40.330
when the user sees that most of
the page is ready, or almost ready.

10
00:00:40.330 --> 00:00:43.701
So how do we make sure that
we get to the point get

11
00:00:43.701 --> 00:00:48.206
to the most critical content as
fast as we can in our document.

12
00:00:48.206 --> 00:00:52.854
There's largely three things that
we're going to focus on in order to

13
00:00:52.854 --> 00:00:54.700
improve this.

14
00:00:54.700 --> 00:00:58.103
The first is we're going to look at
all of the resources that come down,

15
00:00:58.103 --> 00:01:01.010
all of the resources that are part
of building our document.

16
00:01:01.010 --> 00:01:06.530
And there's some of them that
maybe we don't need right away.

17
00:01:06.530 --> 00:01:10.134
Maybe some of them aren't needed
until the user does something or

18
00:01:10.134 --> 00:01:13.620
the user scrolls down,
can we defer some of those until later?

19
00:01:14.910 --> 00:01:20.610
The second is images are a big
part of most website sizes.

20
00:01:20.610 --> 00:01:23.370
What can we do to further crunch images

21
00:01:23.370 --> 00:01:27.610
down beyond just applying
dumb compression algorithms.

22
00:01:28.760 --> 00:01:33.788
And third, there's a bunch of overhead
that comes in with most HTTP requests,

23
00:01:33.788 --> 00:01:38.380
how can we cut as much of that overhead
out and still deliver our content?

24
00:01:41.390 --> 00:01:44.870
Okay, let's look at the sequence,

25
00:01:44.870 --> 00:01:49.588
here's a very simplified
version of what we would

26
00:01:49.588 --> 00:01:55.000
see in the performance
panel of Google dev tools.

27
00:01:55.000 --> 00:01:58.913
We'll look at that in a minute but I want
to show the simplified version first so

28
00:01:58.913 --> 00:02:00.471
you get a good understanding.

29
00:02:00.471 --> 00:02:01.997
At the beginning of a request,

30
00:02:01.997 --> 00:02:05.590
the first thing we need to do
is fetch an HTML document.

31
00:02:05.590 --> 00:02:07.953
We need to get the initial
document pull it down and

32
00:02:07.953 --> 00:02:10.950
have the browser parse it apart
to figure out what we need to do.

33
00:02:11.980 --> 00:02:14.009
And as the document is being parsed,

34
00:02:14.009 --> 00:02:17.960
the browser finds other resources
that it needs to pull down.

35
00:02:17.960 --> 00:02:22.418
Like maybe there's a CSS file in the head
of the page and needs to reach out and

36
00:02:22.418 --> 00:02:24.450
start downloading that CSS file.

37
00:02:25.820 --> 00:02:31.873
Oftentimes, that CSS file will then need
other resources like a background image or

38
00:02:31.873 --> 00:02:35.310
a font or an import of another CSS file.

39
00:02:35.310 --> 00:02:39.610
And so that can chain events and
cause cause more time there.

40
00:02:40.890 --> 00:02:43.832
You'll also likely have
images in the file, and

41
00:02:43.832 --> 00:02:47.635
images are going to all come down
as the browser's gonna try and

42
00:02:47.635 --> 00:02:51.610
parallelize this as much as it can and
download all of the images.

43
00:02:53.130 --> 00:02:56.755
But eventually, depending on how
many resources you have the read

44
00:02:56.755 --> 00:03:00.054
the parallelism that the reason
that the browser can do is and

45
00:03:00.054 --> 00:03:04.030
how many things that can download
at once might get saturated.

46
00:03:04.030 --> 00:03:08.703
And some of the images might get deferred
until later when it can open up some time

47
00:03:08.703 --> 00:03:09.900
to download those.

48
00:03:12.480 --> 00:03:17.780
And most applications are going to have
some JavaScript and JavaScript as we know.

49
00:03:17.780 --> 00:03:22.109
Has a lot of things going for it where it
reaches out and pulls down more assets,

50
00:03:22.109 --> 00:03:26.109
it might need to pull down other
JavaScript files, pull in this module,

51
00:03:26.109 --> 00:03:28.030
asynchronously load this asset.

52
00:03:28.030 --> 00:03:31.397
And so
JavaScript will load other JavaScript,

53
00:03:31.397 --> 00:03:37.130
which will then load other JavaScript is
a very common pattern that we would see.

54
00:03:37.130 --> 00:03:39.558
Now if we attach our metrics here,

55
00:03:39.558 --> 00:03:45.840
the first contentful paint happened
right after we brought down that HTML.

56
00:03:45.840 --> 00:03:51.459
So brought down the HTML and we could show
the first inklings of the screen, FCP but

57
00:03:51.459 --> 00:03:57.930
the largest contentful paint is when we're
ready when we have all this other stuff.

58
00:03:57.930 --> 00:04:01.110
And so that might not happen until clearly
on the other side, clear at the end.

59
00:04:01.110 --> 00:04:04.001
We've pulled down our images,
all the JavaScript has run,

60
00:04:04.001 --> 00:04:07.530
all of the CSS has come down, and we
render the rest of the page and the LCP.

61
00:04:07.530 --> 00:04:13.055
And between that is all the things that
we're doing to get to render the page,

62
00:04:13.055 --> 00:04:16.285
to render that first bit
of content that the,

63
00:04:16.285 --> 00:04:20.300
to render the biggest bit of
content that the user seen.

64
00:04:21.380 --> 00:04:23.460
So how do we do that faster?

65
00:04:23.460 --> 00:04:26.800
We do that faster by
doing fewer things there.

66
00:04:26.800 --> 00:04:30.789
How can we reduce the number
of things we're doing and

67
00:04:30.789 --> 00:04:36.914
focus on getting to the user's intended
most important content as fast as we can?

68
00:04:36.914 --> 00:04:41.960
Now, this chart is called a waterfall and
it might look familiar.

69
00:04:41.960 --> 00:04:43.783
This is a very simplified version,

70
00:04:43.783 --> 00:04:48.160
because the Chrome dev tools can
be kind of overwhelming at times.

71
00:04:48.160 --> 00:04:52.684
But if we go back over to our Chrome tab,
and you visit the from your lighthouse

72
00:04:52.684 --> 00:04:57.570
report, you scroll down, there's this
button here called view original trace.

73
00:04:58.710 --> 00:05:01.290
This is gonna open up
the performance tab and

74
00:05:01.290 --> 00:05:05.706
show you all of the things that went
into building that lighthouse report.

75
00:05:05.706 --> 00:05:11.981
The waterfall is,
don't have a whole lot of space here,

76
00:05:11.981 --> 00:05:16.930
there we go,
the waterfall you can see right here

77
00:05:16.930 --> 00:05:21.360
in this network section in the middle.

78
00:05:21.360 --> 00:05:25.369
And so close that out,

79
00:05:25.369 --> 00:05:29.972
hi that, Okay, we can see,

80
00:05:29.972 --> 00:05:34.130
all right, so the waterfall is this thing
happening right here in the middle.

81
00:05:35.720 --> 00:05:40.648
Where we see at the beginning, the initial
HTML document request which then

82
00:05:40.648 --> 00:05:44.421
leads to the CSS files,
it tries to download one CSS file,

83
00:05:44.421 --> 00:05:49.150
which indicates to load another
CSS file and another CSS file.

84
00:05:49.150 --> 00:05:51.159
There's some JavaScript that happens and

85
00:05:51.159 --> 00:05:53.230
then we hit some sort
of parallelism block.

86
00:05:54.320 --> 00:05:57.629
And we have to wait until a bunch
of other images start coming down.

87
00:06:01.823 --> 00:06:05.711
Images after images after images
after images, all kinds of different

88
00:06:05.711 --> 00:06:09.405
things chaining after each other
as different dependencies hit and

89
00:06:09.405 --> 00:06:10.910
different limits get set.

90
00:06:12.100 --> 00:06:16.620
On this chart, we can also see where
the different metrics are happening.

91
00:06:16.620 --> 00:06:21.478
So this metric or this waterfall chart
lines up with these markers below and

92
00:06:21.478 --> 00:06:25.036
so we can see at this point
is document content loaded.

93
00:06:25.036 --> 00:06:28.790
And then the first paint and
the first contentful paint, and

94
00:06:28.790 --> 00:06:32.330
then shortly thereafter
the largest contentful paint.

95
00:06:32.330 --> 00:06:35.330
And then a whole bunch of
other stuff happens and

96
00:06:35.330 --> 00:06:37.655
eventually the load event fires, so

97
00:06:37.655 --> 00:06:43.470
there's still a bunch of stuff happening
on this site, even after LCP happens.

98
00:06:43.470 --> 00:06:45.820
But at LCP,
we think that the page is done.

99
00:06:47.060 --> 00:06:51.495
Now, here's what you can use to
dig into your specific pages and

100
00:06:51.495 --> 00:06:56.094
blow that out, but for
the purpose of our conversation right now,

101
00:06:56.094 --> 00:06:59.320
let's stick with our simplistic viewpoint.

102
00:07:01.911 --> 00:07:04.550
So we're gonna figure out
how to do fewer things here.

103
00:07:06.349 --> 00:07:12.550
So the first way that we can do fewer
things, is to defer resources until later.

104
00:07:12.550 --> 00:07:17.450
Maybe not all of these things need
to be done in order to hit LCP.

105
00:07:18.470 --> 00:07:20.890
What are the only things
that we really need to do?

106
00:07:22.390 --> 00:07:23.362
For example,

107
00:07:23.362 --> 00:07:28.910
maybe a couple of those images aren't
even visible on the first screen.

108
00:07:28.910 --> 00:07:32.960
Maybe they're like way down the page,
the user is not gonna see them right away.

109
00:07:34.080 --> 00:07:36.960
And maybe the JavaScript
doesn't need to be there.

110
00:07:36.960 --> 00:07:40.460
In the case of request metrics,
the JavaScript is optional,

111
00:07:40.460 --> 00:07:44.290
it enhances the page,
it's not required for the page.

112
00:07:44.290 --> 00:07:48.164
So why are we wasting all
this time pulling it down and

113
00:07:48.164 --> 00:07:52.933
executing it, when it's not
actually necessary to get to LCP.

114
00:07:52.933 --> 00:07:57.439
So how do we differ these resources
specifically until later?

115
00:07:57.439 --> 00:08:00.437
Well, there's a couple of ways to do it,

116
00:08:00.437 --> 00:08:04.978
here's a simplistic example of
an HTML page, so in this page,

117
00:08:04.978 --> 00:08:10.976
we have a couple of scripts in the HTML
head, there's a main.js and a banner.js,

118
00:08:10.976 --> 00:08:15.980
and in the body we have a couple
of pictures, picture and picture2.

119
00:08:17.320 --> 00:08:21.847
But, maybe we don't need
all of these right away,

120
00:08:21.847 --> 00:08:26.280
maybe we can defer these
some of these till later.

121
00:08:27.900 --> 00:08:32.664
In the current model, this is what
a waterfall chart would look like we

122
00:08:32.664 --> 00:08:37.345
have all of the resources just on
the page and so as the HTML is parsed,

123
00:08:37.345 --> 00:08:40.630
it starts downloading all of them.

124
00:08:40.630 --> 00:08:46.050
The first JavaScript that comes down and
finishes, goes first, and it executes.

125
00:08:46.050 --> 00:08:49.380
And then once the first
JavaScript file is executed,

126
00:08:49.380 --> 00:08:55.090
the second JavaScript file is executed,
which then allows the images to render.

127
00:08:55.090 --> 00:08:58.827
Because the scripts are just in the head,
they are blocking.

128
00:08:58.827 --> 00:09:03.327
The browser is going to stop and wait for
this JavaScript to come down and

129
00:09:03.327 --> 00:09:05.430
execute before it continues on.

130
00:09:05.430 --> 00:09:11.005
But it doesn't have to be if we don't
need it, we shouldn't execute it and

131
00:09:11.005 --> 00:09:16.150
download it at this face, so
there's a couple of ways we can do that.

132
00:09:17.280 --> 00:09:18.086
The first and

133
00:09:18.086 --> 00:09:23.770
probably most common way is to decorate
the script with an async attribute.

134
00:09:23.770 --> 00:09:27.826
Now async instructs the browser to say,
hey,

135
00:09:27.826 --> 00:09:32.714
download this file when you
want when you can get to it and

136
00:09:32.714 --> 00:09:35.430
then process it, do it later.

137
00:09:37.020 --> 00:09:40.354
But it doesn't quite have
the behavior that we would

138
00:09:40.354 --> 00:09:44.230
expect because the browser's
really eager to get started.

139
00:09:44.230 --> 00:09:49.102
And so even though that first file is
decorated async, the browser says,

140
00:09:49.102 --> 00:09:52.360
okay, I will do that one right now.

141
00:09:52.360 --> 00:09:56.142
Starts looking the second one in
the image, and then it realizes, hey,

142
00:09:56.142 --> 00:09:59.060
I still got plenty of time,
I still got stuff to do.

143
00:09:59.060 --> 00:10:03.007
Let me start download that and
as soon as it starts downloading it,

144
00:10:03.007 --> 00:10:05.470
it commits itself to executing it.

145
00:10:05.470 --> 00:10:08.740
And so once it came down,
it's going to execute it.

146
00:10:08.740 --> 00:10:13.840
The async one, even though the other
one Is not decorated with a sync.

147
00:10:13.840 --> 00:10:18.025
It's purely on the order that
they finish downloading,

148
00:10:18.025 --> 00:10:21.520
which causes unexpected congestion, right?

149
00:10:21.520 --> 00:10:25.985
We haven't actually improved LCP at all,
we've just created like this weird race

150
00:10:25.985 --> 00:10:29.900
condition where we don't know which
JavaScript is going to load first.

151
00:10:32.810 --> 00:10:36.348
With async if the script finishes fast,

152
00:10:36.348 --> 00:10:40.310
it's still going to
block your load events.

153
00:10:42.030 --> 00:10:46.260
So the other annotation that
we can use is called defer.

154
00:10:46.260 --> 00:10:49.490
And this one Is probably
what we should all use, but

155
00:10:49.490 --> 00:10:52.610
seems way less common in the wild.

156
00:10:52.610 --> 00:10:56.910
And the first is telling the browser,
don't load this yet,

157
00:10:56.910 --> 00:11:01.040
you don't need this right now,
do it later.

158
00:11:01.040 --> 00:11:05.070
Defer is essentially saying, hey,
you can download it whenever you want.

159
00:11:05.070 --> 00:11:09.590
If you can parallelize the download fine,
but never execute it until we're done.

160
00:11:11.150 --> 00:11:14.980
And so it goes ahead and it loads
all the different assets it needs.

161
00:11:14.980 --> 00:11:18.193
But even though our first
script loaded first,

162
00:11:18.193 --> 00:11:22.200
the execution is delayed
until after the load event.

163
00:11:22.200 --> 00:11:27.507
It is no longer going to
be a blocking factor for

164
00:11:27.507 --> 00:11:32.551
us and
this led to a small improvement here.

165
00:11:32.551 --> 00:11:36.844
Now there's one more thing that we can
do is we can just change the order that

166
00:11:36.844 --> 00:11:38.530
things happen.

167
00:11:38.530 --> 00:11:41.825
So as the browser is
reading your HTML file,

168
00:11:41.825 --> 00:11:46.590
it's doing things kind of in
the order you wrote them.

169
00:11:46.590 --> 00:11:50.763
And so if you have all of your script tags
and all of your CSS tags in the head of

170
00:11:50.763 --> 00:11:54.873
your document, even though that
semantically kind of makes sense to us,

171
00:11:54.873 --> 00:11:58.800
we're telling the browser hey,
get all these things first.

172
00:11:58.800 --> 00:12:02.650
Start getting these things,
even if you don't necessarily need them.

173
00:12:02.650 --> 00:12:08.221
And so you can take those scripts that you
might not need, like analytics or like,

174
00:12:08.221 --> 00:12:13.792
enhancement kind of things, and you can
put them at the end of your HTML document,

175
00:12:13.792 --> 00:12:19.140
get all the other stuff,
get all the important stuff done first.

176
00:12:19.140 --> 00:12:20.535
Then download the Java scripts.

177
00:12:22.199 --> 00:12:26.730
And what impact does that
have on our waterfall?

178
00:12:26.730 --> 00:12:29.700
Well, now the JavaScript isn't
going to load right away.

179
00:12:29.700 --> 00:12:33.154
It's going to take a little time for the
browser to process all the document and

180
00:12:33.154 --> 00:12:37.520
then it when it gets to the script tags,
it says great, I'll start loading them.

181
00:12:37.520 --> 00:12:41.600
And the first one that is marked defer
is still delayed until after LCP.

182
00:12:41.600 --> 00:12:46.205
The second one without a defer is
executed as soon as it comes down,

183
00:12:46.205 --> 00:12:49.510
leading to another slight
improvement in LCP.

184
00:12:49.510 --> 00:12:54.400
What about these images,
how do we make these images slow down?

185
00:12:55.440 --> 00:12:59.038
Maybe that first picture needs to
be on the page as part of LCP,

186
00:12:59.038 --> 00:13:01.540
it's part of the main content.

187
00:13:01.540 --> 00:13:04.938
But the second one is something down and
down in the body of the document,

188
00:13:04.938 --> 00:13:06.760
we don't want it.

189
00:13:06.760 --> 00:13:11.690
Well, there's an annotation for that
as well, that looks really attractive.

190
00:13:11.690 --> 00:13:16.408
It's called loading and loading can
be lazy, we can tell the browser,

191
00:13:16.408 --> 00:13:21.122
hey, load this thing later load it
when the user could possibly see it,

192
00:13:21.122 --> 00:13:22.870
don't load it right now.

193
00:13:22.870 --> 00:13:26.363
And that seems that seems great,
that seems like exactly what we want,

194
00:13:26.363 --> 00:13:27.890
it's the differ of pictures.

195
00:13:28.890 --> 00:13:33.782
If we were to do that and apply everything
here, we would if you do not load

196
00:13:33.782 --> 00:13:38.035
the second image until the user
happened to scroll down to it and

197
00:13:38.035 --> 00:13:44.040
not bother rendering it right away,
there is no longer a factor to hit LCP.

198
00:13:44.040 --> 00:13:50.060
LCP is basically only constrained with how
fast can we load this image and render it.

199
00:13:50.060 --> 00:13:53.659
The only factor really being considered
because we've pushed everything off and

200
00:13:53.659 --> 00:13:56.750
said, hey, this is low priority,
you don't need to worry about it.

