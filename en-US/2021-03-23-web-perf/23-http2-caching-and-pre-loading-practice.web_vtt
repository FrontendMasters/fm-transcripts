WEBVTT

1
00:00:00.350 --> 00:00:05.340
The third thing that we can do to improve
our LCP is to reduce the overhead.

2
00:00:05.340 --> 00:00:08.489
So if we've in our
hypothetical example here,

3
00:00:08.489 --> 00:00:13.841
we minimized all the requests that we need
to focus on just the CSS that we render,

4
00:00:13.841 --> 00:00:19.200
and just the images that are above
the fold and visible to the user.

5
00:00:19.200 --> 00:00:24.740
But is there anything that we can do
to make these requests go faster?

6
00:00:25.790 --> 00:00:27.250
Yes, yes there is.

7
00:00:28.800 --> 00:00:31.600
Let's look at what a request is.

8
00:00:31.600 --> 00:00:33.860
So when one of these requests happen.

9
00:00:33.860 --> 00:00:38.449
At the beginning, if it's a new origin, if
we're not loading it from the same place

10
00:00:38.449 --> 00:00:42.799
as our document, we might have to do a DNS
look up, say where is this image from?

11
00:00:42.799 --> 00:00:46.369
And then we'll have to establish
a TCP connection to them and

12
00:00:46.369 --> 00:00:51.199
an SSL hand shake for security, and then
we make the request, and the response and

13
00:00:51.199 --> 00:00:52.251
then process it.

14
00:00:52.251 --> 00:00:56.163
If we had a second image that's
also on the same domain,

15
00:00:56.163 --> 00:00:59.006
we'd have to do all of that stuff again.

16
00:00:59.006 --> 00:01:01.249
We might not have to make
a second DNS lookup, but

17
00:01:01.249 --> 00:01:03.010
we have to do all of those same things.

18
00:01:04.280 --> 00:01:07.240
Well, that's a lot of redundancy.

19
00:01:07.240 --> 00:01:08.310
How do we do fewer things?

20
00:01:09.410 --> 00:01:15.486
One of the best ways to do fewer things
is to implement a protocol called HTTP/2.

21
00:01:15.486 --> 00:01:19.670
This is supported on most web servers,
but not all.

22
00:01:19.670 --> 00:01:23.244
Unfortunately ExpressGS does
not support HTTP/2 yet, but

23
00:01:23.244 --> 00:01:27.310
if you're using EngineX or Apache,
they're really easy to turn on.

24
00:01:28.320 --> 00:01:34.430
One of the many benefits of HTTP/2
is that you can reuse connections.

25
00:01:34.430 --> 00:01:38.308
As in, if I'm making multiple
requests to your web server,

26
00:01:38.308 --> 00:01:43.600
I don't have to do a TCP connection and
an SSL handshake every single time.

27
00:01:43.600 --> 00:01:47.520
I can do it once and ask for
all of the documents together.

28
00:01:47.520 --> 00:01:50.610
And so
I've cut out a big part of that overhead.

29
00:01:51.770 --> 00:01:56.357
Unfortunately, you can't always use
HTTP/2 practically because even

30
00:01:56.357 --> 00:02:01.101
though it's way faster in terms of
actually pushing the bytes over the wire.

31
00:02:01.101 --> 00:02:03.547
And you can reuse those connections,

32
00:02:03.547 --> 00:02:08.450
there's some cons as well as then
not all servers work with it yet.

33
00:02:08.450 --> 00:02:09.430
Not all connections.

34
00:02:09.430 --> 00:02:12.269
It's really hard to get node up and
running with it.

35
00:02:12.269 --> 00:02:15.841
And so if you're doing like
a local dev server like I am,

36
00:02:15.841 --> 00:02:19.250
you might not be able to run it locally.

37
00:02:19.250 --> 00:02:23.215
The other thing that really makes it
hard to run locally is that you have to

38
00:02:23.215 --> 00:02:24.120
use SSL.

39
00:02:24.120 --> 00:02:28.215
You cannot have an unencrypted,
HTTP/2 connection.

40
00:02:28.215 --> 00:02:31.883
As many of you I imagine can a test
it is kind of a pain in the butt,

41
00:02:31.883 --> 00:02:34.172
to have a local selling certificate and

42
00:02:34.172 --> 00:02:37.805
go through that set of hoops every
time you want to do Dev work.

43
00:02:39.075 --> 00:02:45.214
Locally signed SSL is still,
even in 2021, kind of a pain in the butt.

44
00:02:45.214 --> 00:02:51.520
All right, what other ways can
we use to reduce overhead?

45
00:02:51.520 --> 00:02:52.650
Well, we can cache it.

46
00:02:52.650 --> 00:02:55.577
What if we didn't have to
make any of those things,

47
00:02:55.577 --> 00:02:58.390
we could just take an image and
process it.

48
00:02:58.390 --> 00:02:59.270
We didn't have to request it.

49
00:02:59.270 --> 00:03:02.440
We didn't have to respond to it,
because the browser already had it.

50
00:03:03.810 --> 00:03:08.570
This would be fantastic but
you can only do it on secondary requests.

51
00:03:08.570 --> 00:03:11.728
Really.
So, when you're serving an image or

52
00:03:11.728 --> 00:03:16.827
a JavaScript file or an HTML document,
any of those requests can be

53
00:03:16.827 --> 00:03:22.018
decorated with several headers that
tell the browser how long do you

54
00:03:22.018 --> 00:03:26.960
wanna keep this document,
this image, this JavaScript file.

55
00:03:29.150 --> 00:03:32.592
These headers are cache-control,
expires an etag, and

56
00:03:32.592 --> 00:03:36.300
they're all necessary for
different things.

57
00:03:36.300 --> 00:03:41.440
Cache control tells you, how long should
you hold on to this file in seconds.

58
00:03:41.440 --> 00:03:44.527
So this is saying, hey, for
five minutes, this is the image,

59
00:03:44.527 --> 00:03:47.170
you don't need to ask for
it again you're good to go.

60
00:03:48.730 --> 00:03:52.993
If you want to be very explicit about
it expires tells you exactly when this

61
00:03:52.993 --> 00:03:55.550
image expires and
do not keep it after that.

62
00:03:56.870 --> 00:04:01.713
And to help it further, you can return
a hashed version of the object that says,

63
00:04:01.713 --> 00:04:04.963
hi, if you ask for it again,
and it says the same tag,

64
00:04:04.963 --> 00:04:09.540
I'm just going to tell you to
use the thing you already have.

65
00:04:09.540 --> 00:04:13.146
All three of these headers are options
that are easily turned on that you

66
00:04:13.146 --> 00:04:16.990
can easily turn on in most platforms you
don't have to like figure any of this

67
00:04:16.990 --> 00:04:18.730
stuff out for yourself.

68
00:04:18.730 --> 00:04:20.935
You look at the platform,
and the framework and

69
00:04:20.935 --> 00:04:24.192
the technologies that you're using and
look up caching headers, and

70
00:04:24.192 --> 00:04:27.770
there should be easy ways to
configure all of these options.

71
00:04:27.770 --> 00:04:32.216
And these have huge benefits to
performance huge benefits, but

72
00:04:32.216 --> 00:04:36.570
only for returning users,
which is important to know.

73
00:04:36.570 --> 00:04:40.576
The first time a user hits your page,
the first impression they get,

74
00:04:40.576 --> 00:04:41.763
nothing is cached.

75
00:04:41.763 --> 00:04:45.240
They're gonna have to pay that price for
everything.

76
00:04:45.240 --> 00:04:50.020
And so you don't want the first
impression to be that your site is slow.

77
00:04:50.020 --> 00:04:52.260
So everything else needs
to be fast as well.

78
00:04:54.510 --> 00:04:57.920
All right, there's a third way
that we can reduce overhead.

79
00:04:57.920 --> 00:04:59.180
And that's what preload.

80
00:05:00.430 --> 00:05:04.862
In the case of our CSS files, we have
one CSS file that then needs to ask for

81
00:05:04.862 --> 00:05:09.364
some fonts, which is super common a lot
of sites use like Google fonts, or

82
00:05:09.364 --> 00:05:12.490
you have your own fonts to pull down.

83
00:05:12.490 --> 00:05:14.790
You could also have a CSS that imports and
other CSS.

84
00:05:16.340 --> 00:05:21.028
Well, we know that we need these
things like it's in our CSS file,

85
00:05:21.028 --> 00:05:24.060
like we know that we
need to get this asset.

86
00:05:25.420 --> 00:05:29.340
What if we could tell the browser,
hi, go get this thing right away.

87
00:05:29.340 --> 00:05:31.790
Don't wait for
you to parse all the way through it.

88
00:05:31.790 --> 00:05:34.190
I'm telling you right now
you're gonna need it go get it.

89
00:05:35.390 --> 00:05:35.920
We can do that.

90
00:05:38.180 --> 00:05:44.855
When we do that, we can pull that forward
and start that request right away.

91
00:05:44.855 --> 00:05:49.810
And we can do that with something
called a preconnect request.

92
00:05:49.810 --> 00:05:52.211
So because the site uses Google fonts,

93
00:05:52.211 --> 00:05:57.350
I know that we're going to need
to connect to fonts.gstatic.com.

94
00:05:57.350 --> 00:06:01.292
I don't necessarily know what file you're
gonna want because Google's can change

95
00:06:01.292 --> 00:06:04.350
some things, but
I know you're going to want to talk to it.

96
00:06:04.350 --> 00:06:05.464
And so go ahead and

97
00:06:05.464 --> 00:06:09.040
do your like connection setup
your DNS lookup right now.

98
00:06:10.990 --> 00:06:15.130
For other things like maybe
I have an import of another

99
00:06:15.130 --> 00:06:20.019
CSS file I know exactly what file
you need and I can do a pre load.

100
00:06:20.019 --> 00:06:22.450
This is go ahead and fetch the file.

101
00:06:22.450 --> 00:06:24.660
Something downstream is
going to need it and

102
00:06:24.660 --> 00:06:27.060
I want you to get started
downloading it early.

103
00:06:28.190 --> 00:06:30.905
We can use these things
to decorate our page and

104
00:06:30.905 --> 00:06:33.280
get started sooner on what we need to do.

105
00:06:35.080 --> 00:06:40.098
By doing this, we can further shrink
the difference between first contentful

106
00:06:40.098 --> 00:06:45.267
paint and largest contentful paint by
smashing down that time we're waiting for

107
00:06:45.267 --> 00:06:47.030
all the fonts to come down.

108
00:06:48.800 --> 00:06:53.480
So let's go ahead and add preload and
preconnect to our setup.

109
00:06:55.210 --> 00:06:57.780
So let's figure out what
we need to preload.

110
00:06:57.780 --> 00:07:02.160
So if we go over to our Network tab and
show everything,

111
00:07:02.160 --> 00:07:06.650
we can see here's all the things
that need to come down.

112
00:07:09.200 --> 00:07:15.216
As we go down here we can see fonts,
here's the fonts that are coming down and

113
00:07:15.216 --> 00:07:19.880
the fonts are coming down
from fonts.gstatic.com.

114
00:07:19.880 --> 00:07:22.230
So we know we're going to
need to connect to that.

115
00:07:25.070 --> 00:07:28.622
So if we go back to our HTML document,
now we go in the head,

116
00:07:28.622 --> 00:07:32.260
because we know we wanna get
this thing started right away.

117
00:07:33.600 --> 00:07:36.000
Let's add some links.

118
00:07:36.000 --> 00:07:37.700
So we're gonna have a link.

119
00:07:37.700 --> 00:07:43.850
This is going to be a pre-connect, we want
to go ahead and connect to this resource.

120
00:07:43.850 --> 00:07:48.355
Let's connect to
https://fonts.gstatic.com.

121
00:07:54.805 --> 00:07:59.960
We also are going to be connecting to, as
part of pulling down our website, we have

122
00:07:59.960 --> 00:08:05.430
this little chat widget over here, which
is connecting from a different origin.

123
00:08:05.430 --> 00:08:09.188
In my case, it's just a different port
running it's local host Port 3001.

124
00:08:09.188 --> 00:08:11.300
But I know we're gonna connect there.

125
00:08:11.300 --> 00:08:13.640
So we can go ahead and add that too.

126
00:08:13.640 --> 00:08:20.860
So we're gonna pre connect
to http://localhost:3001.

127
00:08:20.860 --> 00:08:25.990
And there's even a CSS file that
we have that is being chained.

128
00:08:28.170 --> 00:08:34.218
Because Main, we can see in this little
waterfall chart here on the right,

129
00:08:34.218 --> 00:08:38.826
the main CSS file is then loading
the fontello CSS file and

130
00:08:38.826 --> 00:08:43.020
the banner CSS file and
the index CSS file.

131
00:08:43.020 --> 00:08:48.922
So we can just tell it to go ahead and
preload it.

132
00:08:48.922 --> 00:08:52.949
Index.CSS

133
00:08:56.815 --> 00:09:05.138
fontello.css, banner.css actually
I think fontelo is a battery

134
00:09:13.979 --> 00:09:19.860
So all together we added these five
annotations to the top of our index.

135
00:09:19.860 --> 00:09:24.557
We said that we want you to go ahead and
establish a connection to fonts.g static

136
00:09:24.557 --> 00:09:29.690
and local host 3001 cuz you're
gonna need these connections later.

137
00:09:29.690 --> 00:09:30.393
And go ahead and

138
00:09:30.393 --> 00:09:34.181
download these other things because we
know you're gonna want to connect to them,

139
00:09:34.181 --> 00:09:38.030
or we know you're going to download
them as part of your process.

140
00:09:38.030 --> 00:09:41.270
And so the browser can get
started on these requests sooner.

141
00:09:43.880 --> 00:09:45.230
So we can save that.

142
00:09:46.450 --> 00:09:47.380
All those things together.

143
00:09:47.380 --> 00:09:50.780
We have crunched the amount
of things that we've done.

144
00:09:50.780 --> 00:09:55.455
And made the smallest possible critical
path between first contentful paint and

145
00:09:55.455 --> 00:09:58.280
largest contentful paint,
we're gonna take.

