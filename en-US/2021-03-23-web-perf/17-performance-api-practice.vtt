WEBVTT

1
00:00:00.760 --> 00:00:05.210
There's another important part of the
performance API that we should talk about.

2
00:00:05.210 --> 00:00:09.090
And this is how we get the web
vital information specifically.

3
00:00:09.090 --> 00:00:11.820
And that's called
the performance observer.

4
00:00:12.820 --> 00:00:17.163
And so a way to observe different
performance events that might not happen

5
00:00:17.163 --> 00:00:18.643
at known points in time.

6
00:00:18.643 --> 00:00:22.788
Like the purport like the navigation
entry might a navigation entry,

7
00:00:22.788 --> 00:00:25.878
we always know that by
the time the load event fires,

8
00:00:25.878 --> 00:00:30.430
we have all the information in that
entry that we would ever need.

9
00:00:30.430 --> 00:00:34.880
But different web vitals might
not happen until the end.

10
00:00:34.880 --> 00:00:41.540
We might not know what our web vital
score is, until 30 seconds into the page.

11
00:00:41.540 --> 00:00:44.720
And so we need a different
paradigm to get that information.

12
00:00:44.720 --> 00:00:46.730
And that's where performance
observer comes in.

13
00:00:48.490 --> 00:00:52.810
When we create a performance observer,
we tell it to look for a specific thing.

14
00:00:52.810 --> 00:00:57.160
Tell me about paint events,
tell me about layout shift events.

15
00:00:58.340 --> 00:01:02.414
And whenever those sorts of events happen,
we can capture that and

16
00:01:02.414 --> 00:01:05.044
get that information programmatically.

17
00:01:05.044 --> 00:01:09.874
Unfortunately, in somebody's infinite
wisdom, these things are also called

18
00:01:09.874 --> 00:01:14.720
entries just like the other thing,
but it's a different object entirely.

19
00:01:14.720 --> 00:01:18.462
They're not related at all,
they're totally different shapes,

20
00:01:18.462 --> 00:01:20.520
just a different kind of entry.

21
00:01:20.520 --> 00:01:23.330
So extra confusing for all of us.

22
00:01:23.330 --> 00:01:28.998
But something to keep in mind is that the
performance timings is one kind of entry,

23
00:01:28.998 --> 00:01:33.118
and the performance observer
is a different kind of entry.

24
00:01:37.037 --> 00:01:39.250
So, let's take a look at this.

25
00:01:39.250 --> 00:01:40.610
So we're gonna do two things.

26
00:01:41.640 --> 00:01:46.511
We're gonna run a lighthouse report on our
site, so that we get a baseline of how

27
00:01:46.511 --> 00:01:50.239
does our site perform right now,
according to lighthouse.

28
00:01:50.239 --> 00:01:55.250
And then we're gonna walk through, I'm not
gonna ask you to build it on your own.

29
00:01:55.250 --> 00:01:59.280
We're gonna walk through some code
together and implemented on the site.

30
00:01:59.280 --> 00:02:04.700
To capture real field data from our
site so that we can pull it together.

31
00:02:06.030 --> 00:02:08.450
So, we're gonna code together.

32
00:02:08.450 --> 00:02:15.080
So, if you're ready, open up your IDE
of choice and have a look at some code.

33
00:02:19.074 --> 00:02:23.782
So in the public folder under assets,
j s utility,

34
00:02:23.782 --> 00:02:28.273
there's a couple of files
in there that I brought

35
00:02:28.273 --> 00:02:32.780
in from other projects
that we're going to use.

36
00:02:33.800 --> 00:02:35.599
The first is perf j s.

37
00:02:36.610 --> 00:02:41.410
Perf j s is our field
data performance agent.

38
00:02:41.410 --> 00:02:46.570
This is the thing that's actually gonna
capture field data from our webpage and

39
00:02:46.570 --> 00:02:48.210
bring it back.

40
00:02:48.210 --> 00:02:52.277
And it's gonna do that by into by
interacting with that performance API

41
00:02:52.277 --> 00:02:53.510
programmatically.

42
00:02:55.420 --> 00:02:56.630
So how does this work?

43
00:02:57.900 --> 00:03:01.770
At the top of it is an incantation
that you might have seen before.

44
00:03:01.770 --> 00:03:04.010
This is document ready.

45
00:03:04.010 --> 00:03:06.290
We're gonna wait until
everything is done and

46
00:03:06.290 --> 00:03:09.090
the document is ready
before we do anything.

47
00:03:09.090 --> 00:03:14.160
This is the equivalent of jQuery
dot ready if you don't use jQuery.

48
00:03:14.160 --> 00:03:17.608
This is just raw JavaScript that
just works in all browsers.

49
00:03:17.608 --> 00:03:20.470
And is free.

50
00:03:20.470 --> 00:03:22.290
And I copy and paste this around a lot.

51
00:03:24.100 --> 00:03:28.320
Once we're actually ready to do some
stuff, we're gonna capture perf data.

52
00:03:28.320 --> 00:03:31.750
And so we create a payload of all the
different things that we're gonna measure.

53
00:03:33.380 --> 00:03:38.244
We wanna know what the URL of the pages
because as the user navigates around,

54
00:03:38.244 --> 00:03:41.436
there might be the Index page or
the pricing page or

55
00:03:41.436 --> 00:03:43.900
the features page or whatever.

56
00:03:43.900 --> 00:03:47.080
And I need to know what page are we
capturing performance data from.

57
00:03:47.080 --> 00:03:51.990
And then I want to get
a bunch of different metrics.

58
00:03:51.990 --> 00:03:54.570
From the old world of performance.

59
00:03:54.570 --> 00:03:57.016
I want to capture DOM content loaded,

60
00:03:57.016 --> 00:04:01.150
of when did the initial document
finish when was the load event?

61
00:04:02.420 --> 00:04:06.068
This information is still valuable and
still relevant,

62
00:04:06.068 --> 00:04:08.880
just in a different way
than the web vitals.

63
00:04:10.300 --> 00:04:14.610
And then I wanna capture each of the four
web vitals that we've talked about.

64
00:04:14.610 --> 00:04:18.960
First contentful paint, largest contentful
paint, communitive layout shifts.

65
00:04:18.960 --> 00:04:23.477
And for simpler delay, and to do this,
we're gonna need to create some

66
00:04:23.477 --> 00:04:28.240
performance observers to say I want to
listen for certain kinds of events.

67
00:04:29.390 --> 00:04:34.100
And so the first one we're gonna create
is the first contentful paint observer.

68
00:04:35.650 --> 00:04:41.326
So we are gonna create a performance
observer let's just collapse those and,

69
00:04:41.326 --> 00:04:45.540
we're gonna create a performance observer,
that when,

70
00:04:45.540 --> 00:04:49.780
it goes off, it's gonna call our function.

71
00:04:49.780 --> 00:04:54.012
And it's gonna observe our document for
paint events and

72
00:04:54.012 --> 00:04:58.660
pass in the buffered property or
the buffered option.

73
00:04:58.660 --> 00:05:02.383
What buffered means is that,
hey, because we're waiting for

74
00:05:02.383 --> 00:05:06.738
a document to be ready before we're
creating any or any of our observers,

75
00:05:06.738 --> 00:05:09.778
some of these events might
have already happened.

76
00:05:09.778 --> 00:05:10.953
By saying buffered,

77
00:05:10.953 --> 00:05:15.076
it means I want them I'll give me
the events even if they already happened.

78
00:05:15.076 --> 00:05:19.830
I can get historical events
will be passed into me as well.

79
00:05:19.830 --> 00:05:24.670
And whenever that happens, I want you to
call my function, my handle FCP function.

80
00:05:27.000 --> 00:05:31.880
There's a little bit of ceremony that
seems to be necessary with this API,

81
00:05:31.880 --> 00:05:35.990
where the list of entries you
get isn't actually the entries.

82
00:05:35.990 --> 00:05:38.880
It's like an odd envelope for the entries.

83
00:05:38.880 --> 00:05:44.350
So you call entry list get entries,
which sometimes doesn't return an array.

84
00:05:44.350 --> 00:05:46.940
So you have to like default it.

85
00:05:46.940 --> 00:05:51.360
In my opinion, this is a bunch of like
ceremony that is totally unnecessary, but

86
00:05:51.360 --> 00:05:53.050
that's what the API demands.

87
00:05:54.190 --> 00:06:01.035
So for that, you'll get an array, an array
of objects pate entries that have come in.

88
00:06:01.035 --> 00:06:05.579
And for each page entry, we need to
look at them because not all paint

89
00:06:05.579 --> 00:06:10.286
entries are the first contentful paint
entry will get a paint entry for

90
00:06:10.286 --> 00:06:13.260
every time that there
might be a paint of it.

91
00:06:14.890 --> 00:06:19.752
So we'll have to look to see hey,
the entry that we get is it called first

92
00:06:19.752 --> 00:06:24.373
contentful paint which is specifically
the metric we care about and

93
00:06:24.373 --> 00:06:27.720
if it is, we're just gonna capture the.

94
00:06:27.720 --> 00:06:31.140
So what was the start time of
the first contentful paint?

95
00:06:32.300 --> 00:06:38.158
And for our own ease of use, we'll
write it out to the console as well, so

96
00:06:38.158 --> 00:06:44.730
that we can interact are other observers
are gonna look a little bit similar.

97
00:06:44.730 --> 00:06:49.430
But each of the web vitals
has its own quirks.

98
00:06:49.430 --> 00:06:50.820
Of course, nothing is just,

99
00:06:50.820 --> 00:06:53.720
hey, here's an obvious API that
does what you think it does.

100
00:06:53.720 --> 00:06:55.200
And you don't need to think about.

101
00:06:55.200 --> 00:06:56.660
Nope, they're all a little weird.

102
00:06:58.290 --> 00:07:03.679
So for example, we just went through
the first contentful paint clearly largest

103
00:07:03.679 --> 00:07:09.620
contentful paint would be the same thing,
just a slightly different thing, no.

104
00:07:09.620 --> 00:07:11.960
No, it's a totally different
event we're gonna listen to.

105
00:07:11.960 --> 00:07:16.921
We're not gonna listen to paint events,
we're gonna listen specifically to

106
00:07:16.921 --> 00:07:22.050
a largest contentful paint event because
it's different, but it is what it is.

107
00:07:23.160 --> 00:07:26.190
Inside the ceremony is exactly the same.

108
00:07:26.190 --> 00:07:30.570
We unwrap unwrap the envelope
of entries loop over them.

109
00:07:30.570 --> 00:07:35.503
And unfortunately this will go off
multiple times every time there is

110
00:07:35.503 --> 00:07:40.220
a paint event and
it is the been the largest one to date.

111
00:07:40.220 --> 00:07:42.850
Like so far in the process.

112
00:07:42.850 --> 00:07:46.426
The contentful paint event
will go off again so,

113
00:07:46.426 --> 00:07:49.140
this is gonna go off again and again.

114
00:07:49.140 --> 00:07:54.111
And so, what we need to do is we need to
measure, is the start time of the event

115
00:07:54.111 --> 00:07:57.956
that we just got bigger than
what we've captured before?

116
00:07:57.956 --> 00:08:02.161
And if it is as we update it,
because the first contentful paint,

117
00:08:02.161 --> 00:08:07.437
by definition will also be the largest
contentful paint when it happens, and then

118
00:08:07.437 --> 00:08:12.339
every subsequent paint will be measured
if it is bigger than the one before.

119
00:08:17.373 --> 00:08:19.160
Can we also have layout shifts?

120
00:08:19.160 --> 00:08:20.770
Is not a paint event.

121
00:08:20.770 --> 00:08:22.060
It's a little different.

122
00:08:22.060 --> 00:08:24.060
It is a layout shift, remember.

123
00:08:24.060 --> 00:08:26.190
This is when the page is pushing around.

124
00:08:26.190 --> 00:08:30.889
So any time elements are shifted on
the page, we are gonna listen for

125
00:08:30.889 --> 00:08:32.460
a layout shift event.

126
00:08:33.550 --> 00:08:38.490
And it'll call our handler after
unwrapping the same package,

127
00:08:38.490 --> 00:08:41.700
we have to look at
a couple of things here.

128
00:08:42.740 --> 00:08:48.080
First, we need to check to make
sure that this wasn't expected.

129
00:08:48.080 --> 00:08:50.700
And what do I mean by expected?

130
00:08:50.700 --> 00:08:56.074
I mean, there's lots of patterns
on the web where you might

131
00:08:56.074 --> 00:09:01.940
have a drop down menu and
expander acts like maximize video.

132
00:09:01.940 --> 00:09:05.644
Thinks that the user just clicked
a button and something got bigger and

133
00:09:05.644 --> 00:09:08.170
the elements around it shifted.

134
00:09:08.170 --> 00:09:10.240
Well clearly that's expected,
that's what we want.

135
00:09:10.240 --> 00:09:14.020
And we wouldn't want that to
count against our score, so

136
00:09:14.020 --> 00:09:18.200
we're gonna get a layout shift
event anytime it happens.

137
00:09:18.200 --> 00:09:23.446
But if there was a click event and
the immediate event loop preceding

138
00:09:23.446 --> 00:09:29.290
this layout shift It'll be flagged and
we don't want to capture that.

139
00:09:29.290 --> 00:09:31.970
It's not part of our
cumulative layout shift score.

140
00:09:33.380 --> 00:09:36.520
But aside from that we have
to add this up ourselves.

141
00:09:36.520 --> 00:09:38.302
So every time there's a layout shift,

142
00:09:38.302 --> 00:09:40.890
we just add it to the previous
add it to the pile.

143
00:09:40.890 --> 00:09:46.120
We're adding them all together and
the total score will be the.

144
00:09:46.120 --> 00:09:50.440
Now this can happen again through
the entire lifetime of the document.

145
00:09:50.440 --> 00:09:54.487
So as a document changes, this is gonna
keep going off and getting bigger and

146
00:09:54.487 --> 00:09:55.310
bigger.

147
00:09:55.310 --> 00:09:59.442
The last of the web vitals
is first input delay,

148
00:09:59.442 --> 00:10:04.301
which will create yet
another performance observer for

149
00:10:04.301 --> 00:10:09.110
this is gonna listen for
the first input event.

150
00:10:09.110 --> 00:10:11.300
And we're gonna unwrap the entry.

151
00:10:12.350 --> 00:10:15.397
Now, rather than just getting
a single metric this time,

152
00:10:15.397 --> 00:10:18.070
we have to do a little
bit of math ourselves.

153
00:10:18.070 --> 00:10:24.990
Because the data that it tells us is
when did I start first calling events?

154
00:10:24.990 --> 00:10:28.636
Calling events in response to
this click event versus when did

155
00:10:28.636 --> 00:10:31.460
the click event actually happen?

156
00:10:31.460 --> 00:10:34.510
That's the delay between when
the click event happened.

157
00:10:34.510 --> 00:10:38.740
And we're able to process our
first event handler based on it.

158
00:10:38.740 --> 00:10:40.870
So we do that math and provide it.

159
00:10:40.870 --> 00:10:44.803
Now this is only gonna happen if there's
a click if the user hits the page then

160
00:10:44.803 --> 00:10:46.420
leaves the page.

161
00:10:46.420 --> 00:10:47.480
There's no 1st input.

162
00:10:47.480 --> 00:10:48.210
They never did anything.

163
00:10:50.210 --> 00:10:53.580
So with all 4 of these listeners going,
we're gonna be capturing the data.

164
00:10:54.780 --> 00:10:57.910
How do we get it back to our server?

165
00:10:57.910 --> 00:11:02.856
Well, because these things can happen
at any point during the lifecycle of

166
00:11:02.856 --> 00:11:04.460
the page.

167
00:11:04.460 --> 00:11:08.060
You don't necessarily know when you're
done when you have the data that you need.

168
00:11:08.060 --> 00:11:13.139
And so the only real way to get that
data back to yourself reliably with

169
00:11:13.139 --> 00:11:18.330
the correct values is to wait for
the page to be done, to be unloaded.

170
00:11:18.330 --> 00:11:22.260
The user is leaving so
we can listen to the unload event.

171
00:11:23.280 --> 00:11:26.620
Now, if you've ever tried to listen to
the unload event, you didn't know that it.

172
00:11:26.620 --> 00:11:32.076
You can't do very much, you can't like
fire off a fetch request there and

173
00:11:32.076 --> 00:11:36.200
have any reliability
that you're gonna get it.

174
00:11:36.200 --> 00:11:37.230
But you can do other things.

175
00:11:38.860 --> 00:11:43.264
For example, you can send
a beacon a begin is a very small

176
00:11:43.264 --> 00:11:47.330
payload that you can say
after this page is done.

177
00:11:47.330 --> 00:11:51.340
Post this after the API,
I don't want to know anything about it.

178
00:11:51.340 --> 00:11:52.780
I can't really even configure it.

179
00:11:52.780 --> 00:11:54.370
I can't tell you it's Jason.

180
00:11:54.370 --> 00:12:00.869
I'm gonna fire the string up, report and
pray that he lives in the right place so

181
00:12:00.869 --> 00:12:05.990
we're gonna fire off our
payload to this beacon API.

182
00:12:05.990 --> 00:12:09.364
There's a couple other bits of
data that we hadn't captured yet

183
00:12:09.364 --> 00:12:12.540
that we can pull off the performance API.

184
00:12:12.540 --> 00:12:15.970
So we're gonna get a particular entry,
the navigation entry.

185
00:12:15.970 --> 00:12:18.370
So the one that we looked at.

186
00:12:18.370 --> 00:12:21.223
Now we're gonna pull two
particular values off of it,

187
00:12:21.223 --> 00:12:24.820
which is the DOM content loaded and
the load event.

188
00:12:24.820 --> 00:12:26.890
So we can get these
historical bits of data.

189
00:12:28.970 --> 00:12:32.310
So this is a very simple
performance agent.

190
00:12:32.310 --> 00:12:36.970
Now, some of you might be wondering,
hey, why do I need to write all of this?

191
00:12:36.970 --> 00:12:39.510
Like this seems like a lot
of really low level stuff.

192
00:12:39.510 --> 00:12:42.380
And it is, but
you should know how it works.

193
00:12:42.380 --> 00:12:46.222
There's a library that does most of
this stuff, or yeah, most of it and

194
00:12:46.222 --> 00:12:50.210
in a little bit more bulletproof ways,
and it's available from Google.

195
00:12:50.210 --> 00:12:51.830
It's called web vitals,
you can pull it in.

196
00:12:51.830 --> 00:12:55.150
It's a little bit bigger than this,
but it's more production ready.

197
00:12:55.150 --> 00:12:59.507
Alternatively, if you use a service for
this, they'll provide you an agent that

198
00:12:59.507 --> 00:13:03.548
they would use for their data scheme as
well, like request metrics as our own

199
00:13:03.548 --> 00:13:08.370
agent that does stuff very similar to
this inside of our inside of our code.

200
00:13:08.370 --> 00:13:11.361
But for the purpose of our workshop today,

201
00:13:11.361 --> 00:13:15.110
we have our own custom
partisinal home grown agents.

202
00:13:16.360 --> 00:13:20.780
So we just need to add this to our page,
and we should start capturing data.

203
00:13:22.010 --> 00:13:25.371
So pop open the index of our document, and

204
00:13:25.371 --> 00:13:29.980
we just need to load this
script like any other.

205
00:13:29.980 --> 00:13:34.130
So we're gonna scroll down until we start
finding the other script tags on the page,

206
00:13:34.130 --> 00:13:35.580
scople here.

207
00:13:35.580 --> 00:13:36.840
And let's just add it.

208
00:13:36.840 --> 00:13:42.177
So I'm gonna copy this one and
I'm gonna load

209
00:13:42.177 --> 00:13:47.102
it first, and it's in j s/util /perf.

210
00:13:51.343 --> 00:13:52.438
And I'm gonna save that.

211
00:13:57.035 --> 00:14:01.661
Now if I go back to our page here, and

212
00:14:01.661 --> 00:14:08.139
reload it you'll see in
the console of dev tools,

213
00:14:08.139 --> 00:14:12.010
all of our data got fired off.

214
00:14:13.060 --> 00:14:15.633
So it recorded the FCP as 713 and

215
00:14:15.633 --> 00:14:20.871
then recorded an LCP the largest
contentful page has also 713, but

216
00:14:20.871 --> 00:14:27.030
then there was another paint that was
bigger and so that recorded again at 925.

217
00:14:27.030 --> 00:14:31.410
That's why we need to
continually rewrite this.

218
00:14:31.410 --> 00:14:33.410
Now you'll see a lot of CLS.

219
00:14:33.410 --> 00:14:37.390
This has a lot of different layout
shifts happening over time.

220
00:14:38.520 --> 00:14:43.566
And if we go to the page and
scroll down, we might even see more CLS

221
00:14:43.566 --> 00:14:49.000
is fire as different parts of
the page might render asynchronously.

222
00:14:50.360 --> 00:14:52.080
If we eventually click on the page.

223
00:14:53.080 --> 00:14:57.695
We'll see the first input delay, which by
this time, everything should be done and

224
00:14:57.695 --> 00:14:59.490
there won't be any delay.

225
00:14:59.490 --> 00:15:03.210
But at whatever point the user actually
clicks on it, we will record this.

226
00:15:05.452 --> 00:15:09.550
Right now all of this data is still in
our browser, we need to get it back

227
00:15:09.550 --> 00:15:14.010
to the server, which is happening as
a beacon as part of unloading the page.

228
00:15:15.050 --> 00:15:18.408
So if we go back to request metrics and
reload the page,

229
00:15:18.408 --> 00:15:21.920
that beacon should have gone off and
fired to our server.

230
00:15:23.910 --> 00:15:25.530
How do you know that that happens?

231
00:15:26.620 --> 00:15:30.963
If you go to the Network tab,
and we look for

232
00:15:30.963 --> 00:15:38.820
slash API which is where it was firing
it off, we don't see it in here.

233
00:15:38.820 --> 00:15:42.204
Like here's a couple of fonts
that have API in them, but

234
00:15:42.204 --> 00:15:45.790
we don't see our actual
beacon requests going off.

235
00:15:45.790 --> 00:15:51.210
And that's because beacons are kind
of tied in with the previous page.

236
00:15:51.210 --> 00:15:54.702
So it happened as part of
closing the previous page and

237
00:15:54.702 --> 00:15:59.203
disappear there's some tricks in
Chrome tools to like see them, but

238
00:15:59.203 --> 00:16:02.570
you never get all
the information about them.

239
00:16:02.570 --> 00:16:05.150
So it's much easier to understand
them from the server side.

240
00:16:06.840 --> 00:16:11.275
If we take a look at your,
your running server wherever you're

241
00:16:11.275 --> 00:16:16.300
running the console,
you might see some new lines got printed.

242
00:16:16.300 --> 00:16:20.150
Our server will report every time it gets,
a performance payload.

243
00:16:20.150 --> 00:16:22.470
It's just printing out,
hey, here's all the values.

244
00:16:24.380 --> 00:16:29.279
And what we'll play with later is actually
analyzing these values because they're

245
00:16:29.279 --> 00:16:32.530
being written into
a directory called logs.

246
00:16:32.530 --> 00:16:33.910
Perf dot log dot CSV.

247
00:16:33.910 --> 00:16:37.463
And so every time that beacon
has gone off on your page,

248
00:16:37.463 --> 00:16:40.290
it's just writing a new row into this.

249
00:16:40.290 --> 00:16:43.930
Here's another piece of field data.

250
00:16:43.930 --> 00:16:48.570
And so here we are now starting
to capture data from our site.

251
00:16:50.450 --> 00:16:54.930
There's one other thing we should do
before we move back to our slides.

252
00:16:54.930 --> 00:16:58.656
And that's,
we should capture a bit of lab data so

253
00:16:58.656 --> 00:17:04.248
that we can start measuring the changes
that we're gonna make to our site,

254
00:17:04.248 --> 00:17:07.820
and how it affects both lab data and
field data.

255
00:17:09.410 --> 00:17:13.140
So going to our request metric sites,
and opening up chrome tools,

256
00:17:13.140 --> 00:17:15.710
I just want you to go to lighthouse.

257
00:17:15.710 --> 00:17:21.390
With clear storage, simulated throttling
performance desktop and generate a report.

258
00:17:23.060 --> 00:17:24.189
It's really bad.

259
00:17:24.189 --> 00:17:25.460
Really really bad.

260
00:17:26.640 --> 00:17:28.420
It's not as bad as it could be.

261
00:17:28.420 --> 00:17:30.120
Because it's actually hard to make a site.

262
00:17:31.120 --> 00:17:35.305
Bad when it was once good, which we'll
talk about a whole bunch more later.

263
00:17:35.305 --> 00:17:40.177
But we have a 1.3 second FCP,
a 1.6 second LCP,

264
00:17:40.177 --> 00:17:47.930
0.26 community with layout shift,
and overall just really terrible.

265
00:17:47.930 --> 00:17:50.990
And we're gonna spend some time improving
these numbers here in a minute.

