WEBVTT

1
00:00:00.180 --> 00:00:04.725
Powering any performance improvement
effort should be some data,

2
00:00:04.725 --> 00:00:09.710
we should have some idea of what's wrong,
and how are we going to fix it?

3
00:00:09.710 --> 00:00:12.550
And when do we know if we're done?

4
00:00:12.550 --> 00:00:14.540
So we need some metrics.

5
00:00:14.540 --> 00:00:19.204
Well, some of the most important metrics
for a performance effort actually have

6
00:00:19.204 --> 00:00:24.090
nothing to do with performance, their
business metrics or their website metrics.

7
00:00:25.260 --> 00:00:30.001
Here's some analytics from request
metrics that show our bounce rate,

8
00:00:30.001 --> 00:00:35.850
which is how many times does a user hit
our site and then immediately leave?

9
00:00:35.850 --> 00:00:38.540
And then how long do
they spend on our site?

10
00:00:38.540 --> 00:00:42.690
When they do what's, how long is their
session and here's the chart over time.

11
00:00:43.710 --> 00:00:47.900
There's a couple of things that
are maybe a little weird about this.

12
00:00:47.900 --> 00:00:51.212
There's some anomalies,
there's a big decrease or

13
00:00:51.212 --> 00:00:55.080
a little decrease in
session time right here.

14
00:00:55.080 --> 00:00:59.108
There's a whole bunch of wonky
stuff going on right here and

15
00:00:59.108 --> 00:01:03.370
a little bit of wonky stuff
going on right there.

16
00:01:03.370 --> 00:01:06.290
And the interesting to know,
why did this happen?

17
00:01:06.290 --> 00:01:10.100
Is there a technical reason
behind these changes?

18
00:01:10.100 --> 00:01:13.370
Or is it just the randomness
of the internet?

19
00:01:14.580 --> 00:01:20.437
Well, in order to really understand this,
we need to gather data from our website,

20
00:01:20.437 --> 00:01:23.970
real data,
not crux data that is rolled up.

21
00:01:23.970 --> 00:01:27.624
Not how our lighthouse was
running on that day real data,

22
00:01:27.624 --> 00:01:31.990
like what did the users that were
driving these actual numbers?

23
00:01:31.990 --> 00:01:35.256
What performance attributes did they see?

24
00:01:35.256 --> 00:01:39.388
And so to do that, we're gonna
need to capture real field data.

25
00:01:39.388 --> 00:01:40.910
And that's the next thing we're gonna do.

26
00:01:42.430 --> 00:01:43.554
In order to do that,

27
00:01:43.554 --> 00:01:48.700
we're gonna need to explore a couple of
API's available to us in the browser.

28
00:01:48.700 --> 00:01:52.100
And the first is window.performance.

29
00:01:52.100 --> 00:01:57.886
This is a fantastic and huge space If
you haven't already checked it out,

30
00:01:57.886 --> 00:02:02.880
the MDN article on it is
obviously the definitive guide.

31
00:02:02.880 --> 00:02:07.049
I'm gonna give you the crib notes here as
part of this training about what we need

32
00:02:07.049 --> 00:02:08.990
to do to accomplish our goals.

33
00:02:08.990 --> 00:02:11.291
But to understand all of the ins and
outs of it,

34
00:02:11.291 --> 00:02:13.420
I encourage you to go
check out those docs.

35
00:02:15.610 --> 00:02:21.350
The first important part of
the performance API is called the entries.

36
00:02:21.350 --> 00:02:27.456
Now, an entry is describing one
network event, one transaction,

37
00:02:27.456 --> 00:02:32.070
one request that has happened
as part of this page.

38
00:02:32.070 --> 00:02:38.320
And it captures a whole bunch
of interesting things about it.

39
00:02:38.320 --> 00:02:43.291
Now we can get those entries through any
of these API's, we can just get them all,

40
00:02:43.291 --> 00:02:47.680
we can get all of a certain kind,
we get all named this thing.

41
00:02:47.680 --> 00:02:51.122
And by kind I mean,
you could get the navigation entry,

42
00:02:51.122 --> 00:02:55.670
you could say how did this page
the document itself perform?

43
00:02:55.670 --> 00:03:00.722
Or how long did it take to
download this JavaScript file or

44
00:03:00.722 --> 00:03:03.679
this image or this Ajax request?

45
00:03:03.679 --> 00:03:08.380
Let's take a look at what we
would get back from that.

46
00:03:08.380 --> 00:03:12.560
Any of these things is gonna
return a list of entries.

47
00:03:12.560 --> 00:03:18.167
And that list of entry is going to have
all of these many property on which

48
00:03:18.167 --> 00:03:25.110
is a little overwhelming to look at and
be like, I don't even know where to start.

49
00:03:25.110 --> 00:03:26.800
Lots going on here.

50
00:03:26.800 --> 00:03:31.620
But this is a navigation entry you
can see from entry type navigation.

51
00:03:33.390 --> 00:03:36.959
What would this mean
practically to a human being.

52
00:03:38.240 --> 00:03:42.510
Well, we can translate that to a request.

53
00:03:42.510 --> 00:03:46.313
Here is a diagram of a HTTP
document request and

54
00:03:46.313 --> 00:03:51.481
all the different phases that
a browser would need to go through

55
00:03:51.481 --> 00:03:55.967
at the beginning,
if we're leaving a previous page,

56
00:03:55.967 --> 00:04:00.670
we might need to unload that page and
do some of that work.

57
00:04:01.720 --> 00:04:06.830
When that's done, we have an event
called navigationStart at the beginning.

58
00:04:06.830 --> 00:04:12.791
And we might do some redirects, we might
process some asynchronous unloading,

59
00:04:12.791 --> 00:04:17.360
but navigationStart is one of
these properties that we have.

60
00:04:19.990 --> 00:04:24.845
Then we have fetchStart Which
is when we actually first start

61
00:04:24.845 --> 00:04:29.230
making the final requests
that will become this page.

62
00:04:29.230 --> 00:04:30.990
We're going to reach into our caches.

63
00:04:32.070 --> 00:04:34.420
See if the browser might already have it.

64
00:04:34.420 --> 00:04:37.728
And if not, we're gonna proceed and
do a DNS lookup.

65
00:04:37.728 --> 00:04:43.028
We'll connect over TCP,
will establish an SSL connection

66
00:04:43.028 --> 00:04:50.342
will actually fire the request that we
want, get a response back from the server,

67
00:04:50.342 --> 00:04:55.127
process it, render it and
then trigger a load event.

68
00:04:55.127 --> 00:04:57.000
And these are all
the different steps in there.

69
00:04:58.320 --> 00:05:01.010
Now let's take a look at what
this actually looks like.

70
00:05:01.010 --> 00:05:02.199
Let's look at some code.

71
00:05:04.180 --> 00:05:08.770
So here I have my example
request metric site.

72
00:05:08.770 --> 00:05:11.967
And I have my Chrome Dev Tools
open in another window.

73
00:05:14.141 --> 00:05:19.240
So let's explore this performance API and
see what it looks like.

74
00:05:19.240 --> 00:05:23.160
So hanging off of the global
namespace is performance.

75
00:05:23.160 --> 00:05:24.460
There's a bunch of stuff on here.

76
00:05:25.940 --> 00:05:29.970
So I can just get all
the entries through get entries.

77
00:05:31.360 --> 00:05:36.630
That returns a great big array of
these performance timing events.

78
00:05:36.630 --> 00:05:39.167
Some of them are performance
navigation timings,

79
00:05:39.167 --> 00:05:41.610
some of our performance resource timings.

80
00:05:41.610 --> 00:05:44.040
There's some other kinds
of things in here.

81
00:05:44.040 --> 00:05:48.210
But if I pop open one of these,
I get all of those raw numbers.

82
00:05:48.210 --> 00:05:52.398
This is the actual raw data
of when did each of these

83
00:05:52.398 --> 00:05:56.501
different phases of the network start and
stop.

84
00:05:56.501 --> 00:06:03.069
And with this, I can get really low level
data about how long each request took.

85
00:06:04.430 --> 00:06:07.922
Now, you might be thinking
that this sounds familiar,

86
00:06:07.922 --> 00:06:12.150
like isn't there a better way like
justice than the raw numbers?

87
00:06:12.150 --> 00:06:16.610
And absolutely, there is, this is how we
get this information programmatically.

88
00:06:16.610 --> 00:06:20.510
But you see a lot of the same
information in the Network tab.

89
00:06:21.640 --> 00:06:24.422
If you load up a page,
and on the Network tab,

90
00:06:24.422 --> 00:06:29.408
you see all the different requests who
would go out, these numbers correspond to

91
00:06:29.408 --> 00:06:34.360
the same different things that you
would see in the timing section here.

92
00:06:34.360 --> 00:06:36.394
How long did it take
to queue something up?

93
00:06:36.394 --> 00:06:39.662
How long did it take to process
each different phase for

94
00:06:39.662 --> 00:06:44.150
all the different documents, all
the different assets that need to go in.

95
00:06:44.150 --> 00:06:47.851
If I wanna pull this information
programmatically and

96
00:06:47.851 --> 00:06:53.168
aggregate it across all of my user base,
the performance API is how we do that.

