WEBVTT

1
00:00:01.400 --> 00:00:04.783
Unfortunately, there's a huge
red flag that keeps us,

2
00:00:04.783 --> 00:00:08.587
from using loading dot loading
equals lazy, and that's this,

3
00:00:08.587 --> 00:00:12.450
the compatibility table
of the loading attribute.

4
00:00:12.450 --> 00:00:14.888
So it's this really
annoying one red thing,

5
00:00:14.888 --> 00:00:19.220
that happens to be a red thing that will
block us from using it, which is Safari.

6
00:00:19.220 --> 00:00:21.777
If it works in Chrome, it works in Edge,

7
00:00:21.777 --> 00:00:27.520
it works in Firefox, it works in Android,
it won't work on iOS, or on Macs.

8
00:00:27.520 --> 00:00:31.058
And if it won't work on iOS or on Macs,
it's kind of a deal killer, so

9
00:00:31.058 --> 00:00:32.840
we need a different way to do this.

10
00:00:33.960 --> 00:00:39.310
Fortunately, JavaScript to the rescue,
we can solve this problem with JavaScript.

11
00:00:41.250 --> 00:00:46.008
We're gonna do another code exercise
together, and play with that, so

12
00:00:46.008 --> 00:00:48.350
back in our project.

13
00:00:48.350 --> 00:00:51.679
In the utility folder,
public assets JS detail,

14
00:00:51.679 --> 00:00:56.830
I have another little utility, that I
bring around from project to project,

15
00:00:56.830 --> 00:01:01.230
that happens to solve this
particular problem for us.

16
00:01:01.230 --> 00:01:05.250
It's called lazy loader, and we're gonna
walk through briefly how it works,

17
00:01:05.250 --> 00:01:07.350
and then we're gonna apply it together.

18
00:01:07.350 --> 00:01:09.806
And we're gonna actually change
the order of our document, and

19
00:01:09.806 --> 00:01:11.380
see some improvements.

20
00:01:11.380 --> 00:01:14.340
So the top of this is that,
same snippet of code or

21
00:01:14.340 --> 00:01:19.010
very similar snippet of code that
we saw with the performance agent.

22
00:01:19.010 --> 00:01:23.284
This is a bit of incantation that's
basically equivalent to jQuery.ready,

23
00:01:23.284 --> 00:01:27.510
it's saying, hey, wait until the document
is ready before we do anything.

24
00:01:29.430 --> 00:01:32.356
And then it starts looking at the page,
and

25
00:01:32.356 --> 00:01:36.840
we're trying to find things that
we want to be leisurely loaded.

26
00:01:38.010 --> 00:01:44.290
So we look for anything on the page,
that happens to contain the attribute.

27
00:01:44.290 --> 00:01:50.100
Data dash source, not source not SRC,
like a regular image would have,

28
00:01:50.100 --> 00:01:54.970
but data dot source, and so
we have all these lazy elements.

29
00:01:56.550 --> 00:02:00.556
And what we're gonna do is,
we're gonna create what's called a,

30
00:02:00.556 --> 00:02:05.480
intersection observer, if it exists,
it might not exist on all browsers.

31
00:02:05.480 --> 00:02:09.868
But most modern browsers have
intersection observer, and

32
00:02:09.868 --> 00:02:16.360
intersection observer allows us to detect
is an element inside the view frame.

33
00:02:16.360 --> 00:02:22.509
Can this element be seen, so, we're
gonna create a intersection observer for

34
00:02:22.509 --> 00:02:25.650
each of the lazy elements that we found.

35
00:02:27.390 --> 00:02:34.232
And whenever, that element that is a has
a data source attribute is intersecting,

36
00:02:34.232 --> 00:02:38.940
then we're going to load it,
and turn off our observer.

37
00:02:40.220 --> 00:02:46.429
The load function, essentially just copies
the value from data dot source and,

38
00:02:46.429 --> 00:02:53.110
data source set, which we'll talk about in
the future, into their real attributes.

39
00:02:54.180 --> 00:02:58.018
So essentially, we have an image file,
that doesn't have a source,

40
00:02:58.018 --> 00:03:01.335
until it intersects, and
then we write a source into it, and

41
00:03:01.335 --> 00:03:03.460
the browser will go and download it.

42
00:03:03.460 --> 00:03:10.991
So we can utilize this, by changing any of
our elements from source to data source,

43
00:03:10.991 --> 00:03:16.170
will essentially tell this
thing to lazily load itself.

44
00:03:17.370 --> 00:03:22.375
So let's apply that,
let's figure out how to use that,

45
00:03:22.375 --> 00:03:25.727
if we look at our page, and we load it.

46
00:03:28.086 --> 00:03:32.503
All of these annoying things,
what images do we need to load, well,

47
00:03:32.503 --> 00:03:34.800
you should probably load the logo.

48
00:03:34.800 --> 00:03:38.217
And we should load this cool
picture of the sloth on a rocket,

49
00:03:38.217 --> 00:03:40.030
it's part of the main content.

50
00:03:40.030 --> 00:03:43.368
But if we scroll down,
there's this YouTube video,

51
00:03:43.368 --> 00:03:45.750
that we probably don't need to load.

52
00:03:45.750 --> 00:03:49.570
And then there's like,
these big images showing off features,

53
00:03:49.570 --> 00:03:52.010
we probably don't need to load them yet.

54
00:03:53.050 --> 00:03:56.969
And this really concerned sloths,
we probably don't need to load him either,

55
00:03:56.969 --> 00:04:00.903
and sloths looking at a blueprint,
we probably don't need to load him either.

56
00:04:00.903 --> 00:04:03.830
And the pricing one,
we don't need to load him either.

57
00:04:03.830 --> 00:04:08.612
We can differ tonnes of these images,
and not load them right, now and

58
00:04:08.612 --> 00:04:12.490
focus on the two images,
the logo and the rocket.

59
00:04:12.490 --> 00:04:15.500
They're important at the beginning, so

60
00:04:15.500 --> 00:04:19.633
let's look at our index dot HTML and
how we would do that.

61
00:04:21.712 --> 00:04:26.220
So here we have our header, in the header
we have the request metrics logo.

62
00:04:26.220 --> 00:04:29.842
We wanna keep that,
we want that to load as fast as possible,

63
00:04:29.842 --> 00:04:32.270
we are gonna leave that exactly as it is.

64
00:04:34.260 --> 00:04:38.767
As we scroll down, we see our flying
sloth, or our sloth on a rocket is just

65
00:04:38.767 --> 00:04:43.590
a background image here, as part of
our main top part of our document.

66
00:04:43.590 --> 00:04:46.779
So we wanna leave that, let's keep going,

67
00:04:46.779 --> 00:04:51.090
here we have a YouTube video,
a YouTube embed.

68
00:04:51.090 --> 00:04:54.137
Now the cool thing about
the lazy loader script,

69
00:04:54.137 --> 00:04:58.140
is it doesn't care what kind of
element if we want to load lazy.

70
00:04:58.140 --> 00:05:00.666
It's not, it doesn't just support images,

71
00:05:00.666 --> 00:05:04.033
it could support anything that
has a source, like an iframe,

72
00:05:04.033 --> 00:05:08.280
we don't necessarily need to load
this YouTube iframe right away.

73
00:05:08.280 --> 00:05:11.801
So we can slow it down
by saying data source.

74
00:05:14.282 --> 00:05:18.972
Now, some browsers really dislike when an
element that needs a source doesn't have

75
00:05:18.972 --> 00:05:22.550
a source, so we can create an empty
source attribute like that.

76
00:05:24.700 --> 00:05:27.264
When the browser interprets this,
it's gonna say, hey, I have an iframe,

77
00:05:27.264 --> 00:05:29.560
and I don't need to load anything,
so I'm not going to do anything.

78
00:05:30.970 --> 00:05:35.773
And this is just a bit of data for
later, but when this element intersects,

79
00:05:35.773 --> 00:05:40.490
when it's visible, our script
will copy the value into source.

80
00:05:40.490 --> 00:05:45.094
And the browser will load it as
it normally would, essentially,

81
00:05:45.094 --> 00:05:48.380
delaying the value until when you need it.

82
00:05:48.380 --> 00:05:52.452
Let's keep going down,
here we have our call-outs,

83
00:05:52.452 --> 00:05:56.710
our different features
that we want to show off.

84
00:05:56.710 --> 00:06:01.335
So here we have some images, we can do
the same thing, we're just gonna change

85
00:06:01.335 --> 00:06:05.280
source to data source, and
put a empty source attribute in there.

86
00:06:07.320 --> 00:06:12.399
Now copy this so
we can go a little faster,

87
00:06:12.399 --> 00:06:16.317
there's 1, 2, 3 of these,

88
00:06:16.317 --> 00:06:20.962
we have the sloth looking concerned,

89
00:06:20.962 --> 00:06:29.093
we'll do that there as well,
Sloths building a rocket.

90
00:06:33.260 --> 00:06:38.420
And that's it, cool, all right,
so we've changed several

91
00:06:38.420 --> 00:06:43.100
of the images that are below
the fold to have this value.

92
00:06:43.100 --> 00:06:47.469
Now we need to add our lazy loader,
so that this works, so for now,

93
00:06:47.469 --> 00:06:50.747
at the top of the document
with all of our scripts,

94
00:06:50.747 --> 00:06:53.890
let's just put our lazy
loader in here as well.

95
00:06:55.780 --> 00:06:59.991
So it's right next to our purpose,
I'm just gonna call it lazy loader,

96
00:06:59.991 --> 00:07:01.730
dot j s and put it right there.

97
00:07:07.390 --> 00:07:10.048
This is not the only thing that
we talked about deferring,

98
00:07:10.048 --> 00:07:12.740
we also talked about
deferring the scripts.

99
00:07:12.740 --> 00:07:16.859
None of these things, really need
to be there immediately, right,

100
00:07:16.859 --> 00:07:20.740
we don't need to capture
performance before page load.

101
00:07:20.740 --> 00:07:24.941
We don't need to initialize our lazy
loader until page load, we probably don't

102
00:07:24.941 --> 00:07:28.630
need to render the banner, or
load our chat script or any of the jobs.

103
00:07:28.630 --> 00:07:33.701
None of this needs to be happening first,
so why does it,

104
00:07:33.701 --> 00:07:38.362
let's just take all of this,
all of these scripts.

105
00:07:38.362 --> 00:07:44.282
And we'll cut them out of the head, and
go all the way down to the very end, and

106
00:07:44.282 --> 00:07:50.330
just below it, before we close the body,
let's put them all here.

107
00:07:50.330 --> 00:07:54.503
So the browser doesn't even
start worrying about JavaScript,

108
00:07:54.503 --> 00:07:57.372
until the content is
all like put together.

109
00:07:57.372 --> 00:08:02.778
And we can go a step further and say, hey,
don't even execute these, don't execute

110
00:08:02.778 --> 00:08:07.681
these until we're ready, and let's put
the defer attribute on all of them.

111
00:08:09.811 --> 00:08:12.227
Don't forget chatty here at the bottom.

112
00:08:18.200 --> 00:08:21.724
So all of these are in place,
all of these are now loaded.

113
00:08:25.492 --> 00:08:30.240
If we go back to our HTML,
and reload the page.

114
00:08:33.390 --> 00:08:38.201
Visually I can't see a difference yet,
because my pages too fast right now, but

115
00:08:38.201 --> 00:08:42.450
chances are slower users will
definitely see this impact.

116
00:08:42.450 --> 00:08:46.310
So let's prove that, let's go and
take a look at lighthouse again, now,

117
00:08:46.310 --> 00:08:49.024
before we made these changes,
I was getting a 95.

118
00:08:50.150 --> 00:08:56.340
If it was point 6 and point 9 and point 2,
6 were my scores, let's run this again.

119
00:08:56.340 --> 00:09:01.273
Now that we've made this differing update,
I'm gonna hit plus,

120
00:09:01.273 --> 00:09:03.310
and generate a new report.

121
00:09:04.670 --> 00:09:08.794
All right, so my lighthouse is finished,
and we gained two points in performance,

122
00:09:08.794 --> 00:09:11.100
we did a little bit better.

123
00:09:11.100 --> 00:09:14.481
Our first contentful paint change, but
that's just some natural variability,

124
00:09:14.481 --> 00:09:16.490
largest contentful paint
changed a little bit.

125
00:09:16.490 --> 00:09:20.086
That's some natural variability,
the time to interactive went way down,

126
00:09:20.086 --> 00:09:21.780
total blocking time went way down.

127
00:09:23.010 --> 00:09:28.810
If we go and take a look at our trace,
look at how much fewer,

128
00:09:28.810 --> 00:09:32.757
how many fewer things need to happen here

129
00:09:35.143 --> 00:09:41.370
Most of that busy work is now pushed
down the page, it is less important.

130
00:09:41.370 --> 00:09:46.696
So essentially, what we did was we took
all of these nasty elements over here.

131
00:09:46.696 --> 00:09:51.233
These other images, this extra
JavaScript that was coming down,

132
00:09:51.233 --> 00:09:55.700
we removed it from our critical path,
we have fewer things to do.

133
00:09:56.730 --> 00:10:00.090
Now, this isn't gonna improve
performance for every user,

134
00:10:00.090 --> 00:10:03.070
but it will prove performance for
most users.

135
00:10:03.070 --> 00:10:07.296
Over a large data set, we're gonna
see the total, or the median, and

136
00:10:07.296 --> 00:10:12.260
the P 75, lcps, come way down, because
there's fewer things that can block.

