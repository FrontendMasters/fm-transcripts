WEBVTT

1
00:00:00.580 --> 00:00:03.830
&gt;&gt; Bianca Gandolfo: Here is our code for
the partition.

2
00:00:03.830 --> 00:00:06.176
So it's gonna take an array,
and a low and a high.

3
00:00:06.176 --> 00:00:08.720
If it we're doing the whole array,
like we did before,

4
00:00:08.720 --> 00:00:12.640
where just the, we're just gonna
choose the last one, right.

5
00:00:12.640 --> 00:00:15.900
It's a little bit different than
this example where we choose five,

6
00:00:15.900 --> 00:00:18.220
we're just gonna choose the last one.

7
00:00:18.220 --> 00:00:22.216
So in our example, we would just
choose four, just out of simplicity.

8
00:00:22.216 --> 00:00:26.734
And then our previous location is
gonna be the beginning, right.

9
00:00:26.734 --> 00:00:31.187
So it's low and the reason we passed this
every time is because as we're doing

10
00:00:31.187 --> 00:00:34.400
recursion, the high and
low are gonna change.

11
00:00:34.400 --> 00:00:35.935
The arrays are gonna stay the same.

12
00:00:35.935 --> 00:00:38.740
This is an in-place sort.

13
00:00:38.740 --> 00:00:43.080
But the part of the array that we're
looking at is gonna be smaller every time,

14
00:00:43.080 --> 00:00:47.650
hopefully, right, if we're doing it right.

15
00:00:47.650 --> 00:00:51.270
So again, our pivot,
we're just gonna choose the last one.

16
00:00:51.270 --> 00:00:54.030
Pivot location is gonna
start at the beginning.

17
00:00:54.030 --> 00:01:00.250
So, the first time will be four and
this one would be zero, right.

18
00:01:00.250 --> 00:01:01.590
We just start at
the beginning of the array.

19
00:01:01.590 --> 00:01:02.870
This is gonna be the end of the array.

20
00:01:04.280 --> 00:01:07.546
So we're gonna iterate
through the entire array.

21
00:01:07.546 --> 00:01:13.877
And if the element that we're looking at,
right, we'll start at the beginning.

22
00:01:13.877 --> 00:01:17.437
We're gonna loop through the entire array.

23
00:01:19.160 --> 00:01:20.340
Is less than or equal to the pivot.

24
00:01:20.340 --> 00:01:24.900
You're going to swap it
with the pivot location.

25
00:01:24.900 --> 00:01:29.910
And then we're going to increment
the pivot location, when it's less.

26
00:01:33.400 --> 00:01:34.430
Cool?
Otherwise you do nothing.

27
00:01:34.430 --> 00:01:36.310
And you're going to keep doing that.

28
00:01:36.310 --> 00:01:40.010
You're going to keep swapping all the
lesser items to before the pivot location,

29
00:01:40.010 --> 00:01:43.460
and incrementing the pivot
location whenever it's less.

30
00:01:43.460 --> 00:01:48.440
And then at the end,
you're just going to swap

31
00:01:48.440 --> 00:01:54.040
the pivot itself to its
final pivot location.

32
00:01:54.040 --> 00:01:57.900
Here, this pivot location is just
a potential final pivot location until we

33
00:01:57.900 --> 00:02:00.840
have looped through everything,
and then we swap it.

34
00:02:02.800 --> 00:02:03.300
Cool?

35
00:02:04.570 --> 00:02:05.070
Awesome.

36
00:02:06.660 --> 00:02:10.300
And here is the entire thing.

37
00:02:12.560 --> 00:02:15.120
So here we're initializing our low and
high.

38
00:02:16.840 --> 00:02:20.150
We're gonna loop through from low to high,
we're gonna partition.

39
00:02:20.150 --> 00:02:24.590
This is going to return
the the pivot location for

40
00:02:24.590 --> 00:02:30.380
us, so we know the next left and
right we want to work with.

41
00:02:30.380 --> 00:02:37.149
And so you can see here, we referenced
that pivot location to again,

42
00:02:37.149 --> 00:02:42.530
recursively, partition the left and
the right side.

43
00:02:49.067 --> 00:02:50.616
&gt;&gt; Bianca Gandolfo: Cool.

44
00:02:50.616 --> 00:02:54.819
&gt;&gt; off screen: So if I was in an interview
and somebody asked not to whiteboard it or

45
00:02:54.819 --> 00:02:59.622
anything, but to just put into words
why Quicksort is more efficient than,

46
00:02:59.622 --> 00:03:03.390
like I don't know, Bubblesort,
or something like that?

47
00:03:03.390 --> 00:03:08.825
What would be, I mean I could say like,
cuz it's in log n but like.

48
00:03:08.825 --> 00:03:10.560
Do you know what I mean?

49
00:03:10.560 --> 00:03:12.740
Is there a good way to
put into words what-

50
00:03:12.740 --> 00:03:13.620
&gt;&gt; Bianca Gandolfo: Why it's

51
00:03:13.620 --> 00:03:15.040
probably faster?

52
00:03:15.040 --> 00:03:15.670
&gt;&gt; off screen: Yeah.

53
00:03:15.670 --> 00:03:17.900
&gt;&gt; Bianca Gandolfo: So in it's worst
case it's actually not faster.

54
00:03:19.530 --> 00:03:24.660
It actually is n squared in its worst
case but that's very, very unlikely and

55
00:03:24.660 --> 00:03:31.990
has been proven to be so unlikely that
it is kind of not worth worrying about.

56
00:03:31.990 --> 00:03:37.704
But, the reason it's n log n, would that
be a better answer to your question?

57
00:03:37.704 --> 00:03:39.100
Why is it n log n?

58
00:03:41.190 --> 00:03:42.220
Is that what you're asking?

59
00:03:42.220 --> 00:03:42.930
Okay.

60
00:03:42.930 --> 00:03:45.110
So what makes it n log n?

61
00:03:45.110 --> 00:03:49.070
So what makes it n, right,

62
00:03:49.070 --> 00:03:55.320
is the fact that we're looping
through the entire array, right.

63
00:03:55.320 --> 00:03:57.510
We have to loop through the entire array.

64
00:03:57.510 --> 00:04:02.324
That's in, and
the part that makes it log n is

65
00:04:02.324 --> 00:04:07.532
the slicing it in half,
and recursing, right?

66
00:04:09.033 --> 00:04:12.757
&gt;&gt; Bianca Gandolfo: And so, every time you
recurse, you continue to slice it in half,

67
00:04:12.757 --> 00:04:15.760
but you always have to loop
through the entire thing.

68
00:04:15.760 --> 00:04:17.840
So that's n times log n.

69
00:04:17.840 --> 00:04:19.899
So if you were just recursing, and

70
00:04:19.899 --> 00:04:25.290
you weren't having to loop through
the entire array, it would just be log n.

71
00:04:25.290 --> 00:04:29.763
But since we have a linear time operation
inside the recursion, or the recursion's

72
00:04:29.763 --> 00:04:33.800
actually inside the other one, we have
to multiply them, and it's n log n.

73
00:04:33.800 --> 00:04:38.222
And the reason you were asking a couple
days ago, or yesterday, whenever that was,

74
00:04:38.222 --> 00:04:43.700
was why, why is it n log n and
not n or whatever?

75
00:04:43.700 --> 00:04:48.262
We talk about cutting significant digits,
what makes it significant?

76
00:04:51.421 --> 00:04:55.710
&gt;&gt; Bianca Gandolfo: It's just significant,
the n and the log n are both significant.

77
00:04:55.710 --> 00:04:56.370
&gt;&gt; off screen: Both significant?

78
00:04:56.370 --> 00:05:00.260
&gt;&gt; Bianca Gandolfo: Yeah,
because it shows that it's

79
00:05:00.260 --> 00:05:04.650
slower than linear time, but
it's not quite exponential.

80
00:05:07.050 --> 00:05:07.800
Yeah.

81
00:05:07.800 --> 00:05:08.970
&gt;&gt; off screen: Okay, thank you.

82
00:05:08.970 --> 00:05:10.828
&gt;&gt; Bianca Gandolfo: Yeah, cool.

83
00:05:10.828 --> 00:05:14.358
All right,

84
00:05:14.358 --> 00:05:19.660
let's reflect.

85
00:05:19.660 --> 00:05:20.315
This was a fun one.

86
00:05:22.654 --> 00:05:25.383
&gt;&gt; Bianca Gandolfo: So we said before,

87
00:05:25.383 --> 00:05:30.501
that remember the pivot location,

88
00:05:30.501 --> 00:05:35.790
oops, only changes when the element

89
00:05:35.790 --> 00:05:40.410
is less than the pivot, right.

90
00:05:42.030 --> 00:05:42.538
So that was a thing.

91
00:05:47.009 --> 00:05:51.846
&gt;&gt; off screen: And also,
&gt;&gt; off screen: You only swap the pivot

92
00:05:51.846 --> 00:05:54.762
when you're done comparing
all of the others.

93
00:05:54.762 --> 00:06:00.051
&gt;&gt; Bianca Gandolfo: Yeah, so
one way you can swap the pivot

94
00:06:00.051 --> 00:06:06.509
to the final pivot location at the end,
yeah.

95
00:06:12.128 --> 00:06:13.000
&gt;&gt; Bianca Gandolfo: Cool, what else?

96
00:06:18.803 --> 00:06:21.089
&gt;&gt; Bianca Gandolfo: What's something
that's still a little fuzzy?

97
00:06:22.850 --> 00:06:27.200
&gt;&gt; off screen: Think it might help, like
the partitioning portion of the sorting,

98
00:06:27.200 --> 00:06:28.880
there's different ways to do that.

99
00:06:28.880 --> 00:06:33.120
Maybe you can have different
methods like comparison and

100
00:06:33.120 --> 00:06:38.360
contrasting, kind of like a table or
some kind of visualization,

101
00:06:38.360 --> 00:06:42.150
like summarizing all the different
ways you can do the partitioning

102
00:06:42.150 --> 00:06:44.480
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

103
00:06:44.480 --> 00:06:47.810
Contrast, contract.

104
00:06:47.810 --> 00:06:53.182
Contract that partition,
that sounds dangerous.

105
00:06:53.182 --> 00:06:59.230
Yeah, so, the big takeaway here is that
it doesn't really matter specifically

106
00:06:59.230 --> 00:07:03.824
how you get there, as long as you somehow
get all of the items that are less

107
00:07:03.824 --> 00:07:09.790
than the pivot to the left and
everything that's greater to the right.

108
00:07:09.790 --> 00:07:15.470
Specifically, how many swaps you get
there really doesn't matter, or which

109
00:07:15.470 --> 00:07:20.190
element that you choose for the partition,
for the most part doesn't really matter.

110
00:07:20.190 --> 00:07:25.157
People have all kind of theories and write
research on this but for our use case,

111
00:07:25.157 --> 00:07:29.150
you just have to pick a pivot and
make sure everything to the left is less,

112
00:07:29.150 --> 00:07:33.550
everything to the right is greater and
how you get there is up to you.

113
00:07:34.690 --> 00:07:36.450
Yeah, and there are different kinds.

114
00:07:36.450 --> 00:07:40.920
There's different ways of getting there.

115
00:07:40.920 --> 00:07:45.570
&gt;&gt; off screen: Yeah, even like the first
time you did We kind of like tap the pivot

116
00:07:45.570 --> 00:07:51.290
and the location and in the first swap,
you could do like in two different arrays.

117
00:07:51.290 --> 00:07:52.790
&gt;&gt; Bianca Gandolfo: Yeah,
yeah, yeah, yeah.

118
00:07:52.790 --> 00:07:56.925
&gt;&gt; off screen: So like the first
fork in the length minus one,

119
00:07:56.925 --> 00:08:01.080
with the pivot location and
then you do the pivot and

120
00:08:01.080 --> 00:08:05.780
like so it's kind of.- Yeah, yeah, yeah
&gt;&gt; Bianca Gandolfo: Yeah there's a few

121
00:08:05.780 --> 00:08:09.100
different ways you can do it and
it can be kinda confusing.

122
00:08:09.100 --> 00:08:11.213
Yeah, I get that, cool.

123
00:08:11.213 --> 00:08:13.714
Thank you.

124
00:08:18.456 --> 00:08:20.422
&gt;&gt; Bianca Gandolfo: Did anyone
code this out all the way?

125
00:08:23.058 --> 00:08:24.110
&gt;&gt; Bianca Gandolfo: No?

126
00:08:24.110 --> 00:08:25.390
Couple people, yeah.

127
00:08:25.390 --> 00:08:27.690
&gt;&gt; off screen: I worked on it, but
I had to look at the solution.

128
00:08:27.690 --> 00:08:28.640
&gt;&gt; Bianca Gandolfo: You
looked at the solution?

129
00:08:29.810 --> 00:08:30.760
Cool.

130
00:08:30.760 --> 00:08:32.450
So did you look at the solution and
then go back?

131
00:08:32.450 --> 00:08:38.930
And were you able to do it?

132
00:08:38.930 --> 00:08:42.430
&gt;&gt; off screen: Yeah,
I mean I tried on my own for a while.

133
00:08:42.430 --> 00:08:46.990
And I failed, and I looked at the solution
and went back and saw what I did.

134
00:08:46.990 --> 00:08:48.090
&gt;&gt; Bianca Gandolfo: Yeah, totally.

135
00:08:48.090 --> 00:08:50.920
Yeah the first time I did Quicksort,
I had to look at the solution too.

136
00:08:50.920 --> 00:08:54.210
Yeah, that's kind of a,
it's pretty abstract,

137
00:08:54.210 --> 00:08:56.860
it's not a straightforward concept.

138
00:08:58.170 --> 00:09:02.640
Who here thinks that if they
needed to implement Quicksort now,

139
00:09:02.640 --> 00:09:06.609
in a non pressure interview situation,
that they could do it?

140
00:09:08.410 --> 00:09:11.950
Okay, and we're just hanging out
eating pizza and coding up Quicksort,

141
00:09:11.950 --> 00:09:13.570
cuz you know, it's Saturday night and
that's what we do.

142
00:09:15.170 --> 00:09:17.370
You don't do that on a Saturday, no, okay.

143
00:09:17.370 --> 00:09:22.220
&gt;&gt; off screen: I think if I could
run it and then when it didn't work,

144
00:09:22.220 --> 00:09:23.970
change some things a few times.

145
00:09:23.970 --> 00:09:25.330
I think I could get it going.

146
00:09:25.330 --> 00:09:26.500
&gt;&gt; Bianca Gandolfo: Cool,
so if you could debug it?

147
00:09:26.500 --> 00:09:27.350
&gt;&gt; off screen: Yeah.
&gt;&gt; Bianca Gandolfo: If you're

148
00:09:27.350 --> 00:09:28.830
not whiteboarding it, essentially?

149
00:09:28.830 --> 00:09:29.830
&gt;&gt; off screen: Yeah.

150
00:09:29.830 --> 00:09:32.660
&gt;&gt; Bianca Gandolfo: Got it, okay, cool.

151
00:09:33.830 --> 00:09:34.470
Anything else?

152
00:09:34.470 --> 00:09:38.320
Jen, do you have any
thoughts on Quicksort?

153
00:09:38.320 --> 00:09:39.495
&gt;&gt; off screen: That's kind of the same.

154
00:09:39.495 --> 00:09:40.530
[LAUGH]
&gt;&gt; Bianca Gandolfo: Yeah, so

155
00:09:40.530 --> 00:09:42.460
if you could debug it,
you feel like you could get there, but

156
00:09:42.460 --> 00:09:44.940
maybe on the whiteboard, not so much?

157
00:09:46.120 --> 00:09:49.330
Cool, that's fair, awesome.

158
00:09:49.330 --> 00:09:52.750
Yeah, attempt this in your
interviews with caution.

159
00:09:52.750 --> 00:09:57.150
Definitely try to master it before
trying to show off and be cool.

160
00:09:58.270 --> 00:10:00.060
Just start with Bubblesort,
if you need to.

161
00:10:01.990 --> 00:10:03.690
But just remember these facts,
and bring them up,

162
00:10:03.690 --> 00:10:05.320
you're like,
there's Mergesort and Quicksort.

163
00:10:05.320 --> 00:10:08.370
I know they'd be faster, but
let's start with a naive approach and

164
00:10:08.370 --> 00:10:09.780
just go from there.

165
00:10:09.780 --> 00:10:10.280
Make your life easier.

166
00:10:13.009 --> 00:10:16.106
&gt;&gt; Bianca Gandolfo: Cool,
there's some more Quicksorts for

167
00:10:16.106 --> 00:10:18.850
further study if you're interested

