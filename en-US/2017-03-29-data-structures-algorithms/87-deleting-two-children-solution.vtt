WEBVTT

1
00:00:00.008 --> 00:00:03.088
&gt;&gt; Bianca Gandolfo: So we're gonna
jump into the meat of our solution for

2
00:00:03.088 --> 00:00:05.608
deleting a node from a binary search tree.

3
00:00:05.608 --> 00:00:10.147
So can I just see a show of hands
of who was able to get the binary

4
00:00:10.147 --> 00:00:13.450
search tree validation function working?

5
00:00:14.750 --> 00:00:17.340
Okay, cool, about half.

6
00:00:17.340 --> 00:00:22.179
And then who was able to get cases for

7
00:00:22.179 --> 00:00:28.396
the leaf to work?
&gt;&gt; Bianca Gandolfo: Cool,

8
00:00:28.396 --> 00:00:30.320
one node?
&gt;&gt; Speaker 2: Our cases worked,

9
00:00:30.320 --> 00:00:31.306
just [LAUGH] [CROSSTALK]
&gt;&gt; Speaker 3: Yeah,

10
00:00:31.306 --> 00:00:33.017
we're trying to put them together.
&gt;&gt; Bianca Gandolfo: Two nodes?

11
00:00:35.302 --> 00:00:36.298
&gt;&gt; Bianca Gandolfo: What about for

12
00:00:36.298 --> 00:00:41.220
the case where it's a root?
&gt;&gt; Speaker 3: We didn't get that.

13
00:00:41.220 --> 00:00:42.700
&gt;&gt; Bianca Gandolfo: Okay, cool.

14
00:00:42.700 --> 00:00:43.217
Jen, did you account for the root?

15
00:00:43.217 --> 00:00:47.861
Do you have [CROSSTALK] yet?
&gt;&gt; Jen: I think I have root,

16
00:00:47.861 --> 00:00:51.830
but I don't have the other one.

17
00:00:51.830 --> 00:00:54.000
I have the parents.

18
00:00:54.000 --> 00:00:57.069
Eh, that's what I'm fighting.
&gt;&gt; Bianca Gandolfo: Fighting with your

19
00:00:57.069 --> 00:00:57.850
parents?
&gt;&gt; Jen: Yep.

20
00:00:57.850 --> 00:00:59.408
&gt;&gt; Bianca Gandolfo: Typical,

21
00:00:59.408 --> 00:01:02.526
[LAUGH] just kidding.

22
00:01:02.526 --> 00:01:05.100
Okay, here we go.

23
00:01:05.100 --> 00:01:09.829
So if this is found, so
this is assuming that we're gonna search

24
00:01:09.829 --> 00:01:13.609
through our binary search tree and
find the value.

25
00:01:13.609 --> 00:01:16.990
So once it's found,
we're gonna enter into this if statement.

26
00:01:18.470 --> 00:01:23.334
So the first thing you wanna do is you
wanna figure out how many children there

27
00:01:23.334 --> 00:01:27.561
are.
&gt;&gt; Bianca Gandolfo: So

28
00:01:27.561 --> 00:01:33.717
we add if there's a child, then it's 1.

29
00:01:33.717 --> 00:01:38.849
If it's a child on the left,
then add 1, otherwise 0.

30
00:01:40.090 --> 00:01:42.349
If there's a right add 1, otherwise add 0.

31
00:01:42.349 --> 00:01:46.860
Cool, so we have a tiernary
operator with some addition.

32
00:01:48.310 --> 00:01:53.809
And it's literally just counting
if there's 0, 1, or 2 children.

33
00:01:53.809 --> 00:01:59.369
Any questions about this,
what's going on there?

34
00:02:03.950 --> 00:02:06.279
&gt;&gt; Bianca Gandolfo: Can I get thumbs,

35
00:02:06.279 --> 00:02:08.147
we're good?

36
00:02:08.147 --> 00:02:12.755
Okay, so if the value is at the root,

37
00:02:12.755 --> 00:02:17.510
we're gonna enter into this.

38
00:02:17.510 --> 00:02:22.401
So we're gonna just do a switch statement,
&gt;&gt; Bianca Gandolfo: On how

39
00:02:22.401 --> 00:02:23.660
many children there are.

40
00:02:23.660 --> 00:02:26.840
So if there are 2,

41
00:02:26.840 --> 00:02:32.290
then we're going to set
a replacement to the root's left.

42
00:02:34.730 --> 00:02:38.487
Okay, and then you wanna find
the right-most leaf node, and

43
00:02:38.487 --> 00:02:42.983
it's gonna be the new root.
&gt;&gt; Bianca Gandolfo: Does that make sense?

44
00:02:44.075 --> 00:02:45.239
&gt;&gt; Bianca Gandolfo: So.

45
00:02:53.946 --> 00:02:54.566
&gt;&gt; Bianca Gandolfo: So we're

46
00:02:54.566 --> 00:02:56.195
gonna keep going right.

47
00:02:56.195 --> 00:03:02.760
So while replacement.right is not null,
we're gonna keep incrementing.

48
00:03:04.870 --> 00:03:07.230
replacementParent is gonna be replacement.

49
00:03:08.380 --> 00:03:15.300
Cool, so there's us tracking
that replacementParent, cool?

50
00:03:15.300 --> 00:03:20.436
So this is getting us to the right-most
node in our binary search tree.

51
00:03:20.436 --> 00:03:21.102
&gt;&gt; Bianca Gandolfo: Cool.

52
00:03:22.530 --> 00:03:24.517
&gt;&gt; Bianca Gandolfo: All right, so

53
00:03:24.517 --> 00:03:30.646
here is the case if it's
not the first node on

54
00:03:30.646 --> 00:03:37.620
the left.
&gt;&gt; Bianca Gandolfo: Then

55
00:03:37.620 --> 00:03:40.923
we're gonna remove the new road [LAUGH],

56
00:03:40.923 --> 00:03:44.920
road, the new root from
its previous position.

57
00:03:44.920 --> 00:03:50.140
So here we are putting the left's
replacement onto the replacementParent's

58
00:03:50.140 --> 00:03:54.897
right.
&gt;&gt; Bianca Gandolfo: Then

59
00:03:54.897 --> 00:03:58.040
we're gonna give the new root all
of the old root's children, right?

60
00:03:58.040 --> 00:04:07.035
And by all of them, we mean both.
&gt;&gt; Bianca Gandolfo: Cool?

61
00:04:12.524 --> 00:04:13.510
&gt;&gt; Bianca Gandolfo: Got any questions?

62
00:04:15.070 --> 00:04:22.650
So otherwise we'll just make our,
&gt;&gt; Bianca Gandolfo: Our assignment here.

63
00:04:22.650 --> 00:04:25.010
Actually, I'm lost at what this is doing.

64
00:04:25.010 --> 00:04:29.764
Replace right with this._root.right.

65
00:04:29.764 --> 00:04:30.560
Okay.

66
00:04:30.560 --> 00:04:34.483
So you're going to take
the root's right and

67
00:04:34.483 --> 00:04:40.228
put it into its final position.
&gt;&gt; Bianca Gandolfo: And

68
00:04:40.228 --> 00:04:43.191
this._root is a replacement.

69
00:04:43.191 --> 00:04:47.092
So here's a way to get around
the assigning this equals this,

70
00:04:47.092 --> 00:04:51.230
is if we give our tree data structure,
our constructor, a root.

71
00:04:52.920 --> 00:04:55.334
Yeah, so
just like we had a storage in our,

72
00:04:55.334 --> 00:04:56.390
&gt;&gt; Bianca Gandolfo: In other data

73
00:04:56.390 --> 00:05:00.710
structures we've made,
this implementation, and

74
00:05:00.710 --> 00:05:04.262
this is Nicholas Zakas' implementation,

75
00:05:04.262 --> 00:05:09.531
has a root in its constructor.
&gt;&gt; Bianca Gandolfo: So

76
00:05:09.531 --> 00:05:14.527
the other way of doing this is we would
just assign it to the value instead of

77
00:05:14.527 --> 00:05:20.670
the entire node.
&gt;&gt; Bianca Gandolfo: Cool.

78
00:05:20.670 --> 00:05:24.955
So that's for
the case where it's the root, right?

79
00:05:24.955 --> 00:05:26.118
Which is kind of a special case,

80
00:05:26.118 --> 00:05:31.388
a little more complicating.
&gt;&gt; Bianca Gandolfo: Right.

81
00:05:31.388 --> 00:05:37.349
So otherwise, there are two children,

82
00:05:37.349 --> 00:05:42.607
this is when remember we are going to

83
00:05:42.607 --> 00:05:48.042
take the left-most node of the right

84
00:05:48.042 --> 00:05:55.034
node.
&gt;&gt; Bianca Gandolfo: Did

85
00:05:55.034 --> 00:05:56.372
you guys get that?
&gt;&gt; Speaker 2: And

86
00:05:56.372 --> 00:05:57.909
then of the right.
&gt;&gt; Bianca Gandolfo: And

87
00:05:57.909 --> 00:06:01.424
I'll just show you the picture, so.
&gt;&gt; Speaker 3: Yeah.

88
00:06:01.424 --> 00:06:06.470
The left-most of the right and we replace
it, so that's what we're doing here.

89
00:06:08.090 --> 00:06:10.025
Cool, so here's a replacement,

90
00:06:10.025 --> 00:06:14.520
current.left.
&gt;&gt; Bianca Gandolfo: This one's actually

91
00:06:14.520 --> 00:06:20.600
going the other way.
&gt;&gt; Bianca Gandolfo: current.left.

92
00:06:22.850 --> 00:06:23.980
So this one's just going the other way.

93
00:06:25.360 --> 00:06:30.746
So replacementParent is current.
&gt;&gt; Bianca Gandolfo: Here's

94
00:06:30.746 --> 00:06:34.802
our current.
&gt;&gt; Bianca Gandolfo: So and

95
00:06:34.802 --> 00:06:38.257
we're gonna find the right-most
node instead of the left-most node.

96
00:06:38.257 --> 00:06:40.002
This is just an opposite implementation.

97
00:06:40.002 --> 00:06:42.610
If you wanna switch it,
you just change left and right.

98
00:06:44.670 --> 00:06:47.500
So I'll go all the way, all the way,
all the way to the right-most node.

99
00:06:49.830 --> 00:06:53.914
And the replacementParent,
&gt;&gt; Bianca Gandolfo: Is just gonna be

100
00:06:53.914 --> 00:06:59.430
the one right above that.
&gt;&gt; Bianca Gandolfo: Cool,

101
00:06:59.430 --> 00:07:04.483
and then we just swap them.
&gt;&gt; Bianca Gandolfo: Then we assign

102
00:07:04.483 --> 00:07:10.443
the children.
&gt;&gt; Bianca Gandolfo: And

103
00:07:10.443 --> 00:07:12.174
then you swap them.

104
00:07:12.174 --> 00:07:15.910
So instead of,
how'd we do it in the pseudocode?

105
00:07:15.910 --> 00:07:19.387
We said something like we were just gonna
keep track if it was on the left or

106
00:07:19.387 --> 00:07:19.957
the right or

107
00:07:19.957 --> 00:07:22.040
something like that, of the parent.
&gt;&gt; Speaker 2: Yeah,

108
00:07:22.040 --> 00:07:26.410
we were passing a parent relationship.
&gt;&gt; Bianca Gandolfo: Yeah, so

109
00:07:26.410 --> 00:07:30.100
what we could do is just
compare the values instead.

110
00:07:32.460 --> 00:07:36.828
And we give the left the replacement or
the right the replacement,

111
00:07:36.828 --> 00:07:41.746
depending on if the current value is
bigger than the parent value, right?

112
00:07:41.746 --> 00:07:44.710
Cuz if it's bigger it goes on the right,
if it's lesser, it goes on the left.

113
00:07:46.960 --> 00:07:50.006
And those are our cases, or
that's the third case at

114
00:07:50.006 --> 00:07:55.257
least.
&gt;&gt; Bianca Gandolfo: Cool.

115
00:07:56.404 --> 00:07:58.560
&gt;&gt; Bianca Gandolfo: Any questions?

116
00:07:58.560 --> 00:07:59.060
It's kind of a lot.

117
00:08:09.900 --> 00:08:14.110
&gt;&gt; Bianca Gandolfo: Okay.
&gt;&gt; Bianca Gandolfo: That's deleting a node

118
00:08:14.110 --> 00:08:16.699
from a binary search tree.

