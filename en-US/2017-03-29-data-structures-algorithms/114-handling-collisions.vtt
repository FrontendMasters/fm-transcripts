WEBVTT

1
00:00:00.280 --> 00:00:04.340
&gt;&gt; Bianca Gandolfo: So this is all fine
and dandy until we have a collision.

2
00:00:04.340 --> 00:00:09.070
A collision is what happens when we
run our hash function and we pass

3
00:00:10.100 --> 00:00:15.630
hello into it, and
then we also get a 3, right?

4
00:00:17.300 --> 00:00:20.706
There's no perfect way of
implementing a hashing function for

5
00:00:20.706 --> 00:00:24.377
this to never, ever,
ever happen within realistic constraints.

6
00:00:24.377 --> 00:00:29.138
So we can expect that this will
happen at least once if we

7
00:00:29.138 --> 00:00:33.390
have a certain number of inputs, right?

8
00:00:33.390 --> 00:00:36.030
It's never gonna happen if
you just do one input, right?

9
00:00:36.030 --> 00:00:40.800
But with a certain number of inputs,
you're always gonna have a collision.

10
00:00:42.560 --> 00:00:47.091
So we need to account for that.
&gt;&gt; Bianca Gandolfo: And

11
00:00:47.091 --> 00:00:50.050
when we were talking about it earlier,
we were like, you know what?

12
00:00:50.050 --> 00:00:54.924
Maybe,
&gt;&gt; Bianca Gandolfo: We'll just put two

13
00:00:54.924 --> 00:01:02.350
things into our storage, right, like that.
&gt;&gt; off screen: Mm-hm.

14
00:01:04.550 --> 00:01:05.299
&gt;&gt; Bianca Gandolfo: Seems reasonable,

15
00:01:05.299 --> 00:01:08.346
right?
&gt;&gt; off screen: How do you get out

16
00:01:08.346 --> 00:01:09.315
the right one?
&gt;&gt; Bianca Gandolfo: Yeah,

17
00:01:09.315 --> 00:01:10.490
and that's the next question.

18
00:01:10.490 --> 00:01:11.731
How do we get out the right one?

19
00:01:11.731 --> 00:01:17.798
What do you think?
&gt;&gt; Bianca Gandolfo: Does

20
00:01:17.798 --> 00:01:23.057
anyone have an idea?
&gt;&gt; off screen: Do you have to

21
00:01:23.057 --> 00:01:28.811
store the key as well?
&gt;&gt; Bianca Gandolfo: Yeah, so to get

22
00:01:28.811 --> 00:01:33.610
around that, we'd have to create a tuple.
&gt;&gt; off screen: That

23
00:01:33.610 --> 00:01:36.330
makes sense.
&gt;&gt; Bianca Gandolfo: So.

24
00:01:36.330 --> 00:01:37.690
&gt;&gt; off screen: It's still fast,

25
00:01:37.690 --> 00:01:41.910
cuz you can.
&gt;&gt; Bianca Gandolfo: Thingamajig,

26
00:01:41.910 --> 00:01:44.223
comma, true.

27
00:01:44.223 --> 00:01:46.231
Let's put this on a new line so
we can see it.

28
00:01:46.231 --> 00:01:49.109
And then, hola.

29
00:01:54.115 --> 00:01:58.488
&gt;&gt; Bianca Gandolfo: Hello comma hola.

30
00:01:58.488 --> 00:02:06.138
And this works, and it will make
it a little bit slower, right?

31
00:02:06.138 --> 00:02:13.580
Because then every time just say,
in the worst case every time we land here,

32
00:02:13.580 --> 00:02:20.020
we have a terrible hashing function and
every time it gives us 3.

33
00:02:20.020 --> 00:02:24.770
And so for n, right,
we have it's all in the index 3 and

34
00:02:24.770 --> 00:02:29.621
then we have to just loop through
either our linked list or

35
00:02:29.621 --> 00:02:34.900
whatever it is that we have in here,
to find the matching one.

36
00:02:34.900 --> 00:02:38.612
So, in the worst case, it's linear.

37
00:02:38.612 --> 00:02:44.188
However, with modern hashing functions and

38
00:02:44.188 --> 00:02:49.324
things like that, we don't have to worry

39
00:02:49.324 --> 00:02:53.750
about this happening in real life.

40
00:02:53.750 --> 00:02:55.060
Does that make sense?

41
00:02:55.060 --> 00:02:58.370
So realistically, if you're using
the right hashing function,

42
00:02:58.370 --> 00:03:04.560
this shouldn't happen, or it's so unlikely
that it's not even worth accounting for.

43
00:03:04.560 --> 00:03:09.160
And then,
the other thing that we do is we resize

44
00:03:09.160 --> 00:03:14.120
our storage once we reach
a certain capacity.

45
00:03:14.120 --> 00:03:15.598
And you'll do that in the exercises.

46
00:03:15.598 --> 00:03:22.160
Once we reach 25%, 50%, 75%, you'll
resize the array and redistribute it.

47
00:03:22.160 --> 00:03:25.339
And also,
that sounds like an expensive operation.

48
00:03:25.339 --> 00:03:29.411
But if you design it well enough
that it happens so infrequently,

49
00:03:29.411 --> 00:03:33.644
that it kinda averages out so
it doesn't affect our constant time.

50
00:03:33.644 --> 00:03:34.890
Does that make sense?

51
00:03:34.890 --> 00:03:39.905
So there's some mathy stuff behind there,
and we can just kind of trust

52
00:03:39.905 --> 00:03:45.004
that if we're doing it the right way,
that it will average itself out and

53
00:03:45.004 --> 00:03:48.870
not be an issue.
&gt;&gt; off screen: So when you resize your

54
00:03:48.870 --> 00:03:53.060
array, then the hashing function
will return a different value.

55
00:03:53.060 --> 00:03:54.350
&gt;&gt; Bianca Gandolfo: Yeah, yeah, yeah.

56
00:03:54.350 --> 00:03:56.005
&gt;&gt; off screen: And that's why it works.

57
00:03:56.005 --> 00:03:57.600
&gt;&gt; Bianca Gandolfo: Mm-hm, exactly.

58
00:03:57.600 --> 00:03:59.450
So that's why I was saying
our hashing function-

59
00:03:59.450 --> 00:03:59.971
&gt;&gt; off screen: Interesting.

60
00:03:59.971 --> 00:04:01.246
&gt;&gt; Bianca Gandolfo: Was gonna take some

61
00:04:01.246 --> 00:04:04.120
extra data, which is, what is the range?

62
00:04:04.120 --> 00:04:08.999
So for this one it's gonna be 0-4,
but maybe we wanna double it.

63
00:04:08.999 --> 00:04:13.138
Usually, when you resize your hashing
table, you double it every time,

64
00:04:13.138 --> 00:04:14.891
and then you redistribute it.

65
00:04:14.891 --> 00:04:20.197
And so you'll rehash everything in
your hash table to a new value,

66
00:04:20.197 --> 00:04:23.892
maybe between 0 and
8 now, or something like

67
00:04:23.892 --> 00:04:29.640
that.
&gt;&gt; Bianca Gandolfo: That make sense?

68
00:04:31.040 --> 00:04:33.629
Cool, that's the only difficult
part about a hash table.

69
00:04:33.629 --> 00:04:38.460
Everything else is straightforward
because it's just an object.

70
00:04:40.675 --> 00:04:41.663
&gt;&gt; Bianca Gandolfo: Cool?

71
00:04:44.939 --> 00:04:45.583
&gt;&gt; Bianca Gandolfo: All right,

72
00:04:45.583 --> 00:04:49.715
so when we go into coding this out we
need to think about collisions, right?

73
00:04:49.715 --> 00:04:52.685
We need to account for them in our code.

