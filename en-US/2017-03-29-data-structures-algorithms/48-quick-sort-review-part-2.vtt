WEBVTT

1
00:00:00.000 --> 00:00:02.303
&gt;&gt; Speaker 1: So
now our array looks like this.

2
00:00:02.303 --> 00:00:03.044
It's updating.

3
00:00:03.044 --> 00:00:05.949
Then what's the next thing that happens,
Tinbit?

4
00:00:05.949 --> 00:00:09.944
&gt;&gt; Speaker 2: The pivot location will be

5
00:00:09.944 --> 00:00:12.451
the 1, too.
&gt;&gt; Speaker 1: Yep,

6
00:00:12.451 --> 00:00:15.047
pivot location is now 1,
cuz we incremented.

7
00:00:15.047 --> 00:00:18.285
It was 0.

8
00:00:18.285 --> 00:00:18.920
And then, Miranda,

9
00:00:18.920 --> 00:00:26.588
what's the next thing that happens?
&gt;&gt; Speaker 2: And.

10
00:00:30.432 --> 00:00:31.620
&gt;&gt; Speaker 1: I think I just got lost.

11
00:00:31.620 --> 00:00:32.775
[LAUGH]
&gt;&gt; Speaker 2: No worries, so

12
00:00:32.775 --> 00:00:34.129
we're inside of a loop.

13
00:00:34.129 --> 00:00:34.987
&gt;&gt; Speaker 1: Yes.
&gt;&gt; Speaker 2: Yeah.

14
00:00:34.987 --> 00:00:36.387
&gt;&gt; Speaker 1: So last time we left off,

15
00:00:36.387 --> 00:00:38.258
so Tinbit was kind of gesturing.

16
00:00:38.258 --> 00:00:40.480
That's our loop, this is our loop gesture.
&gt;&gt; Speaker 2: Yeah.

17
00:00:40.480 --> 00:00:42.048
&gt;&gt; Speaker 1: [LAUGH]

18
00:00:42.048 --> 00:00:43.334
&gt;&gt; Speaker 2: So it goes back

19
00:00:43.334 --> 00:00:47.100
through the 4 loop again.
&gt;&gt; Speaker 1: So now this is 3.

20
00:00:47.100 --> 00:00:48.068
&gt;&gt; Speaker 2: Okay.

21
00:00:50.603 --> 00:00:54.530
&gt;&gt; Speaker 1: And then what's the next

22
00:00:54.530 --> 00:00:59.850
thing that happens, Miranda?
&gt;&gt; Speaker 2: So

23
00:00:59.850 --> 00:01:04.654
the array i.
&gt;&gt; Speaker 1: So it's 4,

24
00:01:04.654 --> 00:01:09.396
right?
&gt;&gt; Speaker 1: 4 is the value, right?

25
00:01:09.396 --> 00:01:10.052
&gt;&gt; Speaker 2: Mm-hm.

26
00:01:10.052 --> 00:01:12.125
&gt;&gt; Speaker 1: Okay, less than-

27
00:01:12.125 --> 00:01:13.519
&gt;&gt; Speaker 2: 0, 1, 2, 3, yep.

28
00:01:13.519 --> 00:01:14.272
&gt;&gt; Speaker 1: Set it equal

29
00:01:14.272 --> 00:01:17.805
to.
&gt;&gt; Speaker 2: And

30
00:01:17.805 --> 00:01:20.254
then our pivot is 2.
&gt;&gt; Speaker 1: 2.

31
00:01:22.660 --> 00:01:23.515
&gt;&gt; Speaker 2: Which is false.

32
00:01:25.325 --> 00:01:26.183
&gt;&gt; Speaker 2: So we skip.

33
00:01:28.600 --> 00:01:29.357
&gt;&gt; Speaker 2: Got it?

34
00:01:29.357 --> 00:01:29.877
&gt;&gt; Speaker 1: Yes.

35
00:01:29.877 --> 00:01:30.678
&gt;&gt; Speaker 2: That make sense?

36
00:01:30.678 --> 00:01:31.634
&gt;&gt; Speaker 1: I think so.

37
00:01:31.634 --> 00:01:32.205
&gt;&gt; Speaker 2: All right,

38
00:01:32.205 --> 00:01:35.831
then we loop again.
&gt;&gt; Speaker 2: All

39
00:01:35.831 --> 00:01:39.391
right?
&gt;&gt; Speaker 2: So

40
00:01:39.391 --> 00:01:45.484
is i less than hi at this point?
&gt;&gt; Speaker 2: This is our,

41
00:01:47.476 --> 00:01:51.826
&gt;&gt; Speaker 2: Stop condition, 4 equals 4.

42
00:01:51.826 --> 00:01:53.825
So we break out of this 4 loop and

43
00:01:53.825 --> 00:01:59.807
we're done.
&gt;&gt; Speaker 2: Cool.

44
00:02:01.927 --> 00:02:03.946
&gt;&gt; Speaker 2: And the last thing that we

45
00:02:03.946 --> 00:02:09.729
need to do is we're gonna move now
our pivot, with our pivot location.

46
00:02:09.729 --> 00:02:12.756
This is a different implementation than
the one we talked about yesterday,

47
00:02:12.756 --> 00:02:13.712
with the double swaps.

48
00:02:13.712 --> 00:02:17.369
Mm-hm, this is the Lomuto

49
00:02:17.369 --> 00:02:21.202
partition scheme.
&gt;&gt; Speaker 1: Okay, so that's why I was.

50
00:02:21.202 --> 00:02:22.166
[LAUGH]
&gt;&gt; Speaker 2: Yeah,

51
00:02:22.166 --> 00:02:22.938
it's a little bit different.

52
00:02:22.938 --> 00:02:27.840
So what this one does at the end,
it waits till it's done and

53
00:02:27.840 --> 00:02:32.270
then it just swaps it at the end,
which is way better.

54
00:02:32.270 --> 00:02:35.722
Cool, so we're gonna swap.

55
00:02:35.722 --> 00:02:42.574
Again we're just gonna put
our swap on our stack.

56
00:02:42.574 --> 00:02:48.223
And what is our, this is our,
&gt;&gt; Speaker 2: Array,

57
00:02:48.223 --> 00:02:52.150
our pivot location is
what did we change it?

58
00:02:52.150 --> 00:02:54.372
It's 1 now, right?

59
00:02:54.372 --> 00:02:56.174
Cuz we incremented it.

60
00:02:56.174 --> 00:03:02.608
And then hi is that's gonna be our pivot,
which was what?

61
00:03:02.608 --> 00:03:07.318
4, okay, so they're not equal.

62
00:03:07.318 --> 00:03:12.004
We're gonna keep going,

63
00:03:12.004 --> 00:03:15.844
temp array at i is 3.

64
00:03:15.844 --> 00:03:18.910
So this is gonna be 3,
the value not the index.

65
00:03:18.910 --> 00:03:23.134
And now we're going to do some swapping,

66
00:03:23.134 --> 00:03:26.884
so here is our original 5, 4, 2.

67
00:03:26.884 --> 00:03:28.300
Here is our original and
now we're gonna swap it.

68
00:03:29.420 --> 00:03:33.402
Array at i is gonna become,

69
00:03:33.402 --> 00:03:37.217
or i1 is gonna become 2.

70
00:03:37.217 --> 00:03:40.855
And now it's just going to stay like that.

71
00:03:40.855 --> 00:03:43.866
And then we're gonna edit this one.

72
00:03:43.866 --> 00:03:46.619
i2, which is our hi is gonna be our temp,

73
00:03:46.619 --> 00:03:52.266
which is 3.
&gt;&gt; Speaker 2: Cool?

74
00:03:52.266 --> 00:03:55.335
Awesome, so that is swapped.

75
00:03:55.335 --> 00:03:56.349
And we return to our array,

76
00:03:56.349 --> 00:04:04.085
here is our array.
&gt;&gt; Speaker 2: It returns out here,

77
00:04:04.085 --> 00:04:06.517
and we're gonna return the pivot location.

78
00:04:06.517 --> 00:04:07.930
This is another important thing.

79
00:04:09.500 --> 00:04:12.306
Our pivot location is 1.

80
00:04:12.306 --> 00:04:17.796
So we had pop this off, moving on,
the pivot location is now 1.

81
00:04:17.796 --> 00:04:19.635
We're returning from this function,

82
00:04:19.635 --> 00:04:24.309
so we're popping off this function.
&gt;&gt; Speaker 2: Now,

83
00:04:24.309 --> 00:04:30.195
we're going back to where we first
went inside of the function.

84
00:04:30.195 --> 00:04:33.265
p is now 1 because we returned
our pivot location, which is 1.

85
00:04:39.479 --> 00:04:41.109
&gt;&gt; Speaker 2: Got it, and

86
00:04:41.109 --> 00:04:45.353
our new array looks like this.

87
00:04:51.794 --> 00:04:52.854
&gt;&gt; Speaker 2: 5,

88
00:04:52.854 --> 00:04:58.197
3.
&gt;&gt; Speaker 2: Yeah,

89
00:04:58.197 --> 00:05:03.212
we're there, are we all there?
&gt;&gt; Speaker 2: Any questions about

90
00:05:03.212 --> 00:05:08.346
how we got here?
&gt;&gt; Speaker 2: No,

91
00:05:08.346 --> 00:05:12.599
can I have just one clarifying question?
&gt;&gt; Speaker 1: Which one is

92
00:05:12.599 --> 00:05:13.323
the pivot again?

93
00:05:13.323 --> 00:05:16.217
[LAUGH]
&gt;&gt; Speaker 2: The pivot is the one that

94
00:05:16.217 --> 00:05:18.783
you wanna move to its final place.

95
00:05:18.783 --> 00:05:20.601
So it was 2.
&gt;&gt; Speaker 1: It was 2, okay, that's-

96
00:05:20.601 --> 00:05:21.901
&gt;&gt; Speaker 2: It was 2, yeah.

97
00:05:21.901 --> 00:05:24.529
&gt;&gt; Speaker 1: But now we're gonna-

98
00:05:24.529 --> 00:05:26.335
&gt;&gt; Speaker 2: Now we're gonna run it,

99
00:05:26.335 --> 00:05:29.265
now we're gonna jump into a recursion.

100
00:05:29.265 --> 00:05:36.402
So once your pivot finds its place,
you then do the same thing.

101
00:05:36.402 --> 00:05:40.111
You partition the right and the left.

102
00:05:40.111 --> 00:05:45.018
And that's why we return the pivot
location so that when we get here,

103
00:05:45.018 --> 00:05:49.093
we're gonna quicksort relative
to the pivot location.

104
00:05:53.344 --> 00:05:54.247
&gt;&gt; Speaker 2: Cool?

105
00:05:57.069 --> 00:05:59.283
&gt;&gt; Speaker 1: The pivot may not always be

106
00:05:59.283 --> 00:06:01.599
in that position, right?

107
00:06:01.599 --> 00:06:05.573
So why do you,
-1 is to get the index, right?

108
00:06:05.573 --> 00:06:09.460
&gt;&gt; Speaker 2: So the pivot is at index 1.

109
00:06:09.460 --> 00:06:10.110
&gt;&gt; Speaker 1: Right, so

110
00:06:10.110 --> 00:06:14.842
why would you subtract 1?
&gt;&gt; Speaker 2: The end of it

111
00:06:14.842 --> 00:06:19.134
as at 1 before.

112
00:06:19.134 --> 00:06:23.982
So this one is going to
quicksort starting at 0 to p-1,

113
00:06:23.982 --> 00:06:27.619
which is just one single element, right?

114
00:06:27.619 --> 00:06:29.037
So that's just gonna return pretty quick,

115
00:06:29.037 --> 00:06:33.355
cuz it's just one element.
&gt;&gt; Speaker 2: Then this one-

116
00:06:33.355 --> 00:06:34.560
&gt;&gt; Speaker 1: I guess, so

117
00:06:34.560 --> 00:06:39.384
if the pivot were in say,
the [COUGH] index of 2,

118
00:06:39.384 --> 00:06:43.847
would you need to do p-2?
&gt;&gt; Speaker 2: No it's always gonna be p-1.

119
00:06:43.847 --> 00:06:44.529
&gt;&gt; Speaker 1: Just the one right

120
00:06:44.529 --> 00:06:45.696
beside it, okay.
&gt;&gt; Speaker 2: Because you

121
00:06:45.696 --> 00:06:46.782
just want the one on the left.

122
00:06:46.782 --> 00:06:50.392
This could be super long,
&gt;&gt; Speaker 1: Okay

123
00:06:50.392 --> 00:06:51.282
&gt;&gt; Speaker 2: And you just wanna get

124
00:06:51.282 --> 00:06:53.117
everything to the left.
&gt;&gt; Speaker 1: Got it.

125
00:06:53.117 --> 00:06:54.123
&gt;&gt; Speaker 2: Yeah.

126
00:06:55.823 --> 00:06:56.374
&gt;&gt; Speaker 2: And then for

127
00:06:56.374 --> 00:06:58.254
this one it's everything to the right.

128
00:06:58.254 --> 00:07:01.090
And that's because we now know, whoops.

129
00:07:01.090 --> 00:07:06.128
We now know that the 2 is in its final
place, we don't need to sort it anymore.

130
00:07:06.128 --> 00:07:09.846
Now we have to do the sides, cool?

131
00:07:09.846 --> 00:07:13.406
All right, all right.

132
00:07:13.406 --> 00:07:18.840
So we're gonna pass in our array,
lo, this is 0.

133
00:07:18.840 --> 00:07:23.579
p- 1 is also 0.
&gt;&gt; Speaker 2: So

134
00:07:23.579 --> 00:07:27.173
we can just skip this if that's okay.

135
00:07:27.173 --> 00:07:29.459
Is everyone fine with skipping this?

136
00:07:29.459 --> 00:07:33.261
It's gonna return pretty quick.
&gt;&gt; Speaker 2: Okay, so

137
00:07:33.261 --> 00:07:39.807
we're gonna skip that.
&gt;&gt; Speaker 2: And

138
00:07:39.807 --> 00:07:47.316
we're gonna do the right side,
p+1 is 2 and then hi is 4.

139
00:07:47.316 --> 00:07:51.771
All right, so then we run our quicksort.

140
00:07:51.771 --> 00:07:57.689
And again, we're leaving off right here,
just as a reference point.

141
00:07:57.689 --> 00:07:59.291
Okay, here we go

142
00:08:07.193 --> 00:08:08.543
&gt;&gt; Speaker 2: All right?

143
00:08:08.543 --> 00:08:11.471
So lo at this point is not undefined.

144
00:08:11.471 --> 00:08:14.021
hi, also not undefined.

145
00:08:14.021 --> 00:08:18.257
So we will just keep this 2 and 4.

146
00:08:18.257 --> 00:08:24.159
So if lo, 2, is less than 4,

147
00:08:24.159 --> 00:08:28.027
we're gonna loop.

148
00:08:28.027 --> 00:08:34.955
I'm sorry, we're gonna partition.
&gt;&gt; Speaker 2: Ready, are we ready?

149
00:08:34.955 --> 00:08:38.089
Are we ready?

150
00:08:38.089 --> 00:08:42.398
partition, partition.

151
00:08:45.007 --> 00:08:47.910
&gt;&gt; Speaker 2: Okay, so again,

152
00:08:47.910 --> 00:08:52.752
we have the same values here.

153
00:08:52.752 --> 00:08:55.648
At this point,
everything on the left is sorted.

154
00:08:55.648 --> 00:09:00.473
Now we're gonna start working
on indexes 2 through 4.

155
00:09:00.473 --> 00:09:09.127
All right, so our pivot is gonna be 3.
&gt;&gt; Speaker 2: Our lo is 2.

156
00:09:09.127 --> 00:09:14.461
So while 2 &lt; 4, we will

157
00:09:14.461 --> 00:09:19.623
loop here.
&gt;&gt; Speaker 2: So

158
00:09:19.623 --> 00:09:25.524
array at i, what's array at i?
&gt;&gt; Speaker 1: 5.

159
00:09:25.524 --> 00:09:30.024
&gt;&gt; Speaker 2: 5 &lt;= to our pivot,

160
00:09:30.024 --> 00:09:32.774
which is 3.

161
00:09:32.774 --> 00:09:34.617
Is that true?

162
00:09:34.617 --> 00:09:36.108
Nope, false.

163
00:09:36.108 --> 00:09:37.755
So we're gonna skip over.

164
00:09:37.755 --> 00:09:43.247
We're gonna loop again.
&gt;&gt; Speaker 2: Oops,

165
00:09:43.247 --> 00:09:46.226
now this is 3.

166
00:09:46.226 --> 00:09:51.204
Is 4 less than 3?
&gt;&gt; Speaker 2: Nope, so

167
00:09:51.204 --> 00:09:55.136
we'll skip again.
&gt;&gt; Speaker 2: Uh-oh.

168
00:09:58.106 --> 00:10:00.718
&gt;&gt; Speaker 2: 4 less than 4?

169
00:10:00.718 --> 00:10:03.028
Nope, so we break out.

170
00:10:03.028 --> 00:10:08.526
So we swap.
&gt;&gt; Speaker 2: Are we following still,

171
00:10:08.526 --> 00:10:11.537
we're good?
&gt;&gt; Speaker 2: So

172
00:10:11.537 --> 00:10:15.101
our pivot location,
&gt;&gt; Speaker 2: Still

173
00:10:15.101 --> 00:10:20.225
the same.
&gt;&gt; Speaker 2: All right,

174
00:10:20.225 --> 00:10:24.663
so we're gonna swap our
pivot location with our hi.

175
00:10:24.663 --> 00:10:31.314
So what that's gonna do is
we're gonna swap a 5 with 3.

176
00:10:35.159 --> 00:10:37.148
&gt;&gt; Speaker 2: Cool?

177
00:10:37.148 --> 00:10:40.550
And this, as you can see,
since our list was mostly sorted,

178
00:10:40.550 --> 00:10:43.297
it's a pretty inefficient algorithm,
right?

179
00:10:43.297 --> 00:10:47.731
Cuz now, our list is already sorted and
we still have more recursion to

180
00:10:47.731 --> 00:10:53.242
do.
&gt;&gt; Speaker 2: All right,

181
00:10:53.242 --> 00:10:56.849
so our pivot location is 2.

182
00:10:56.849 --> 00:11:02.278
And then we start all over again
sorting the left and the right,

183
00:11:02.278 --> 00:11:07.059
or I'm sorry.
&gt;&gt; Speaker 2: Just the right at

184
00:11:07.059 --> 00:11:12.037
this point.
&gt;&gt; Speaker 2: Cool?

185
00:11:15.536 --> 00:11:16.082
&gt;&gt; Speaker 1: I mean,

186
00:11:16.082 --> 00:11:20.695
to me it looks like it's kind of chaotic,
but it brings order faster.

187
00:11:20.695 --> 00:11:22.802
Is that what it is?
&gt;&gt; Speaker 2: Yeah, so

188
00:11:22.802 --> 00:11:28.740
on the average case, it's for
this kind of sort, it's the fastest sort.

189
00:11:28.740 --> 00:11:31.540
And so most native implementations
of this sort are going to

190
00:11:31.540 --> 00:11:32.884
be a quicksort underneath.

191
00:11:32.884 --> 00:11:35.992
But there are some times when its slower.

192
00:11:35.992 --> 00:11:39.544
And that's why it's important to
recognize the limitations of a quicksort.

193
00:11:39.544 --> 00:11:42.114
Which is if it's mostly sorted, or

194
00:11:42.114 --> 00:11:46.666
if you chose the highest one every time,
it becomes n squared.

195
00:11:46.666 --> 00:11:49.870
And you might as well just do
a bubble sort at that point, yeah.

