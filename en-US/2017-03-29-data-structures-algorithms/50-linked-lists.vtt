WEBVTT

1
00:00:00.050 --> 00:00:02.940
&gt;&gt; Bianca Gandolfo: Before we get
into creating our trees, though,

2
00:00:02.940 --> 00:00:06.860
let's talk about a simplified tree,
which is a linked list.

3
00:00:06.860 --> 00:00:08.840
Have people used linked lists before?

4
00:00:09.850 --> 00:00:14.740
Okay, so a couple of people
have heard of a linked list,

5
00:00:14.740 --> 00:00:17.260
maybe you don't use them
in your day to day.

6
00:00:17.260 --> 00:00:22.520
It's more of a primitive data structure,
it could be useful but

7
00:00:22.520 --> 00:00:23.450
we don't use it that much.

8
00:00:24.950 --> 00:00:25.966
So what is a linked list?

9
00:00:25.966 --> 00:00:31.510
A linked list is a tree that where
each node only has one child.

10
00:00:33.600 --> 00:00:41.190
So as we can see here,
this is a linked list of breakfast foods.

11
00:00:41.190 --> 00:00:44.960
We love eating here in this class,
and food, and breakfast.

12
00:00:44.960 --> 00:00:50.590
So each node in our linked list has
a value, so this value is coffee,

13
00:00:50.590 --> 00:00:55.470
and it has a link to its next, toast.

14
00:00:55.470 --> 00:00:57.860
Actually, this is backwards,
let's start with bacon.

15
00:00:57.860 --> 00:00:59.589
We should always start with bacon,
cuz you know why?

16
00:00:59.589 --> 00:01:03.824
If you die before you get to the egg,
at least you had your bacon.

17
00:01:03.824 --> 00:01:04.810
You know what I mean?

18
00:01:04.810 --> 00:01:05.918
That's my life philosophy.

19
00:01:05.918 --> 00:01:09.806
So, [LAUGH] bacon points to egg,

20
00:01:09.806 --> 00:01:15.428
egg is next is toast,
your next is the coffee.

21
00:01:15.428 --> 00:01:18.410
And so that's a linked list.

22
00:01:20.485 --> 00:01:25.090
&gt;&gt; Bianca Gandolfo: Any questions
about linking our lists to

23
00:01:25.090 --> 00:01:28.754
a happy breakfast list family?

24
00:01:31.689 --> 00:01:32.257
&gt;&gt; Bianca Gandolfo: Cool.
&gt;&gt; MJ: So

25
00:01:32.257 --> 00:01:36.527
the link is the only thing that
makes it a structure, I guess?

26
00:01:36.527 --> 00:01:39.611
They're individuals and
then they know about the next one and

27
00:01:39.611 --> 00:01:43.771
the next one knows about the next one but
other than that, they're not conscious.

28
00:01:43.771 --> 00:01:45.961
&gt;&gt; Bianca Gandolfo: Yeah, they're not
aware of other people on the list.

29
00:01:45.961 --> 00:01:46.598
&gt;&gt; MJ: Okay.

30
00:01:50.215 --> 00:01:54.530
&gt;&gt; MJ: I can't picture it but
I'm thinking of subarrays and an array.

31
00:01:54.530 --> 00:01:58.103
Is it similar?

32
00:01:58.103 --> 00:01:58.803
&gt;&gt; Bianca Gandolfo: Not quite.

33
00:01:58.803 --> 00:02:00.690
&gt;&gt; MJ: Because there's a link.

34
00:02:00.690 --> 00:02:04.430
&gt;&gt; Bianca Gandolfo: So the link would
just be a reference to the next node.

35
00:02:04.430 --> 00:02:09.270
And so it doesn't need to all be in
the same array or data structure.

36
00:02:09.270 --> 00:02:11.038
And actually that's
the beauty of a linked list,

37
00:02:11.038 --> 00:02:13.030
is because they're not all
in the same data structure.

38
00:02:13.030 --> 00:02:15.420
We could do some operations a lot faster.

39
00:02:15.420 --> 00:02:17.360
&gt;&gt; MJ: Okay.
&gt;&gt; Bianca Gandolfo: Yeah, cool.

40
00:02:18.830 --> 00:02:19.779
Here's some pictures.

41
00:02:19.779 --> 00:02:22.840
And I found this bacon conga line,
which is perfect.

42
00:02:25.145 --> 00:02:27.090
&gt;&gt; Bianca Gandolfo: So
here's an example of our linked list.

43
00:02:27.090 --> 00:02:28.400
We have a pointer to our head.

44
00:02:30.860 --> 00:02:32.630
And then each node.

45
00:02:32.630 --> 00:02:33.335
Here's each node, right?

46
00:02:33.335 --> 00:02:38.760
This one has a bunch of nodes, has data,
and then a pointer to the next node.

47
00:02:41.923 --> 00:02:45.610
&gt;&gt; Bianca Gandolfo: How do we
make a pointer in JavaScript?

48
00:02:47.090 --> 00:02:48.822
If we want to point to another object,
how would we do that?

49
00:02:51.690 --> 00:02:52.417
&gt;&gt; MJ: In the object?

50
00:02:52.417 --> 00:02:53.850
&gt;&gt; Bianca Gandolfo: Hm?
&gt;&gt; MJ: Put in the object?

51
00:02:56.013 --> 00:02:57.020
&gt;&gt; MJ: Never mind.

52
00:02:57.020 --> 00:02:58.340
&gt;&gt; Bianca Gandolfo: Okay.

53
00:02:58.340 --> 00:02:58.840
Anyone know?

54
00:03:00.900 --> 00:03:03.649
&gt;&gt; MJ: Can't you just reference
the object, like he was saying?

55
00:03:03.649 --> 00:03:06.931
&gt;&gt; Bianca Gandolfo: Yeah, you just set it,
you set the next variable to the object.

56
00:03:06.931 --> 00:03:10.260
Again, it's not gonna
be copying an object.

57
00:03:10.260 --> 00:03:11.942
It's just a reference to it.

58
00:03:15.726 --> 00:03:16.340
&gt;&gt; Bianca Gandolfo: Cool?

59
00:03:16.340 --> 00:03:17.610
So that's what we're doing here.

60
00:03:19.530 --> 00:03:24.580
We have our data,
that could be its own object.

61
00:03:24.580 --> 00:03:26.736
The node itself is absolutely
some sort of object,

62
00:03:26.736 --> 00:03:28.770
right, because we have to
have a reference to it.

63
00:03:28.770 --> 00:03:31.530
We can't have a primitive
value there like a string.

64
00:03:31.530 --> 00:03:33.150
I know we were doing stacks with strings.

65
00:03:33.150 --> 00:03:34.650
This wouldn't work in this case.

66
00:03:36.180 --> 00:03:41.840
All the way to the end,
the tail of our linked list,

67
00:03:41.840 --> 00:03:45.654
its pointer is null,
&gt;&gt; Bianca Gandolfo: Cool?

68
00:03:47.751 --> 00:03:51.869
&gt;&gt; Bianca Gandolfo: Linked list, linked
list, any questions about our linked list?

69
00:03:53.620 --> 00:03:56.259
Anyone else have a song about
linked list that they just made up?

70
00:03:56.259 --> 00:03:58.702
&gt;&gt; MJ: [LAUGH].

71
00:03:58.702 --> 00:04:00.369
&gt;&gt; Bianca Gandolfo: Okay, cool.

72
00:04:00.369 --> 00:04:03.650
So let's talk about some operations,
and what that might look like.

73
00:04:05.400 --> 00:04:09.145
Adding an item, so we have our node A.

74
00:04:09.145 --> 00:04:13.153
And for A, our node.next is C.

75
00:04:15.780 --> 00:04:18.970
&gt;&gt; Bianca Gandolfo: Cool,
because our node is an object.

76
00:04:18.970 --> 00:04:23.908
Perhaps we have a property called next
that's pointing to our next node.

77
00:04:23.908 --> 00:04:27.568
That's how a linked list is
operating under the hood.

78
00:04:27.568 --> 00:04:29.980
Does that make sense?

79
00:04:31.170 --> 00:04:34.312
Cool, now we wanna add a new node.

80
00:04:34.312 --> 00:04:35.330
How might we do that?

81
00:04:38.366 --> 00:04:42.543
&gt;&gt; Bianca Gandolfo: An important
note is that A has a link to C but

82
00:04:42.543 --> 00:04:47.317
C does not have a link to A,
&gt;&gt; Bianca Gandolfo: That

83
00:04:47.317 --> 00:04:49.270
would be called a doubly linked list.

84
00:04:49.270 --> 00:04:51.569
We're only talking about singly
linked lists at this point.

85
00:04:51.569 --> 00:04:56.250
&gt;&gt; MJ: Could you just change A's
link to B and add I think to C on B?

86
00:04:56.250 --> 00:04:57.047
&gt;&gt; Bianca Gandolfo: Mm-hm.

87
00:04:59.060 --> 00:05:02.576
&gt;&gt; Bianca Gandolfo: So,
A dot next is B, B dot next equals C.

88
00:05:02.576 --> 00:05:04.960
Probably need a temporary
variable on there,

89
00:05:06.742 --> 00:05:08.095
&gt;&gt; Bianca Gandolfo: But otherwise,

90
00:05:08.095 --> 00:05:10.319
pretty straightforward.

91
00:05:10.319 --> 00:05:13.502
Cool, where do we think
the time complexity

92
00:05:13.502 --> 00:05:16.089
of an operation like that might be?

93
00:05:19.349 --> 00:05:21.200
&gt;&gt; MJ: Constant?

94
00:05:21.200 --> 00:05:23.562
&gt;&gt; Bianca Gandolfo: Constant, yeah.

95
00:05:23.562 --> 00:05:27.953
So if we were to add a node
into a middle of an array for

96
00:05:27.953 --> 00:05:32.641
example,
&gt;&gt; Bianca Gandolfo: What would be

97
00:05:32.641 --> 00:05:34.649
the constant tie in there?

98
00:05:34.649 --> 00:05:38.009
&gt;&gt; Bianca Gandolfo: MJ,
what would be time complexity there?

99
00:05:39.727 --> 00:05:43.330
&gt;&gt; MJ: Add it to the middle of an array?

100
00:05:43.330 --> 00:05:43.924
&gt;&gt; Bianca Gandolfo: Mm-hm.

101
00:05:43.924 --> 00:05:48.398
&gt;&gt; Bianca Gandolfo: Or just add a node,

102
00:05:48.398 --> 00:05:52.037
not to the end.

103
00:05:55.400 --> 00:05:58.415
&gt;&gt; MJ: Isn't it linear cuz you
have to shift the other ones?

104
00:05:58.415 --> 00:06:00.980
&gt;&gt; Bianca Gandolfo: Yeah, yup.

105
00:06:00.980 --> 00:06:04.544
So adding an item to
an array in the middle or

106
00:06:04.544 --> 00:06:09.494
the beginning is gonna be
a linear time operation, right,

107
00:06:09.494 --> 00:06:13.859
because we have to shift
everything over one index.

108
00:06:13.859 --> 00:06:17.516
And so here we see a linked list,
because it's not in an array,

109
00:06:17.516 --> 00:06:21.810
is actually faster for the use case
when we wanna add an item to the middle.

110
00:06:23.914 --> 00:06:25.560
&gt;&gt; Bianca Gandolfo: Do
you have a question?

111
00:06:27.340 --> 00:06:28.546
&gt;&gt; MJ: No, I'm not sure.

112
00:06:28.546 --> 00:06:32.690
I guess it depends on what
exactly you mean, right?

113
00:06:32.690 --> 00:06:36.267
That if you said I wanted to add
this to the end of the linked list,

114
00:06:36.267 --> 00:06:38.201
you'd have to search for the end.

115
00:06:38.201 --> 00:06:42.480
But yeah, if you're at say,
insert at the current position.

116
00:06:42.480 --> 00:06:45.148
Yeah, if you have a reference to the node.

117
00:06:45.148 --> 00:06:45.648
&gt;&gt; Bianca Gandolfo: Absolutely, yep.

118
00:06:48.024 --> 00:06:49.069
&gt;&gt; Bianca Gandolfo: Cool.

119
00:06:51.463 --> 00:06:54.150
&gt;&gt; Bianca Gandolfo: All right,
what about deleting?

120
00:06:56.204 --> 00:07:00.850
&gt;&gt; Bianca Gandolfo: How might we
delete an item from a linked list?

121
00:07:02.791 --> 00:07:05.228
&gt;&gt; Bianca Gandolfo: Could
just be one operation, right,

122
00:07:05.228 --> 00:07:07.984
you just change A's reference from B to C.

123
00:07:07.984 --> 00:07:08.484
&gt;&gt; MJ: Mm-hm.

124
00:07:11.219 --> 00:07:15.248
&gt;&gt; Bianca Gandolfo: Yep, and it all
will just be garbage collected, totally.

125
00:07:19.398 --> 00:07:22.315
&gt;&gt; MJ: I guess, so
if you just, like I said,

126
00:07:22.315 --> 00:07:28.353
change the reference on A from B to C, and
B would still have its reference to C.

127
00:07:28.353 --> 00:07:34.637
Do you have to null out the reference on B
in order to make it not part of the list?

128
00:07:34.637 --> 00:07:36.629
Or is it just enough that A skips over it?

129
00:07:37.730 --> 00:07:38.860
&gt;&gt; Bianca Gandolfo: That's
a good question.

130
00:07:38.860 --> 00:07:42.987
So the question is, will it be garbage
collected if there's a pointer to

131
00:07:42.987 --> 00:07:45.502
something else but
not a pointer to itself?

132
00:07:45.502 --> 00:07:49.310
Is that a good summary of your question?

133
00:07:49.310 --> 00:07:50.386
&gt;&gt; MJ: Yes.
&gt;&gt; Bianca Gandolfo: Once there's no

134
00:07:50.386 --> 00:07:54.120
reference to an object,
it gets deleted, yeah.

135
00:07:54.120 --> 00:07:56.590
Even if it holds a reference
to something else, yeah.

136
00:07:59.061 --> 00:08:00.240
&gt;&gt; Bianca Gandolfo: Cool.

137
00:08:02.843 --> 00:08:06.430
&gt;&gt; Bianca Gandolfo: All right,
okay, so here's our interface.

138
00:08:06.430 --> 00:08:09.309
We have a storage, we have a head.

139
00:08:09.309 --> 00:08:14.410
We might even have a reference to the tail
depending on the operations that you want.

140
00:08:15.530 --> 00:08:20.060
Some methods, addToTail, remove,
you can search it, as well.

141
00:08:22.420 --> 00:08:24.490
And that's sort of the basics for
our linked lists.

