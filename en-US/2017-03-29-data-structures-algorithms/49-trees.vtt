WEBVTT

1
00:00:00.200 --> 00:00:03.340
&gt;&gt; Bianca Gandolfo: Moving right along,
we're going to talk about trees and

2
00:00:03.340 --> 00:00:04.340
searching.

3
00:00:04.340 --> 00:00:10.250
Trees are a high,
I can never say hierarchical,

4
00:00:10.250 --> 00:00:14.190
data structure that is useful.

5
00:00:14.190 --> 00:00:16.125
I mean, we use it all the time, right?

6
00:00:16.125 --> 00:00:17.395
We have the dom tree, right?

7
00:00:17.395 --> 00:00:20.380
We have dom nodes for
our frontend people out there.

8
00:00:20.380 --> 00:00:25.412
Trees are used for
parsing your code under the hood.

9
00:00:25.412 --> 00:00:31.500
It's used for 3D graphics, used for,
my gosh, I don't now, like auto-complete,

10
00:00:31.500 --> 00:00:36.105
a lot of game logic, searching for things.
&gt;&gt; Bianca Gandolfo: So

11
00:00:36.105 --> 00:00:37.320
trees are super, super useful.

12
00:00:37.320 --> 00:00:38.790
We use them all the time.

13
00:00:38.790 --> 00:00:41.740
We see them a lot in interviews as well.

14
00:00:41.740 --> 00:00:44.590
So that's why we're gonna
spend some time on it today.

15
00:00:44.590 --> 00:00:48.880
We're gonna be talking about
binary trees tomorrow, and

16
00:00:48.880 --> 00:00:50.948
then we're gonna get into
the graphs after that.

17
00:00:50.948 --> 00:00:52.692
Cool?

18
00:00:52.692 --> 00:00:57.220
All right.
&gt;&gt; Bianca Gandolfo: Here we have a tree.

19
00:00:57.220 --> 00:01:00.600
I'm just gonna give you a little vocab,
a little tour of our tree.

20
00:01:00.600 --> 00:01:02.810
Trees in computer science are upside down.

21
00:01:02.810 --> 00:01:04.140
We start with the root at the top.

22
00:01:05.200 --> 00:01:07.180
And we have levels.

23
00:01:07.180 --> 00:01:08.570
So this is a binary tree.

24
00:01:08.570 --> 00:01:12.740
It's called a binary tree because
each node has two children.

25
00:01:12.740 --> 00:01:14.120
Notice I called them children.

26
00:01:14.120 --> 00:01:21.690
So we have a child/parent relationship
between nodes in this tree.

27
00:01:21.690 --> 00:01:24.140
So we have here a root node.

28
00:01:24.140 --> 00:01:27.950
Our root node is a parent of this
left child and this right child.

29
00:01:29.550 --> 00:01:31.080
And we have different levels.

30
00:01:31.080 --> 00:01:34.010
And that's gonna be important in terms of,
when we get to balancing trees.

31
00:01:35.330 --> 00:01:41.670
Each node we consider its own tree,
and then we also can have subtrees.

32
00:01:42.930 --> 00:01:46.390
At the end, a node that has no children,

33
00:01:47.430 --> 00:01:51.217
call that a leaf.
&gt;&gt; Bianca Gandolfo: So

34
00:01:51.217 --> 00:01:56.150
that's our tree growing from
the root down, down, down.

35
00:01:56.150 --> 00:02:02.139
And we have our leaves on the bottom.
&gt;&gt; Speaker 2: And anything that's

36
00:02:02.139 --> 00:02:04.640
not a root or a leaf is just a node?
&gt;&gt; Bianca Gandolfo: Yeah,

37
00:02:04.640 --> 00:02:09.561
it's an internal node.
&gt;&gt; Bianca Gandolfo: Those are internal

38
00:02:09.561 --> 00:02:10.500
nodes.
&gt;&gt; Speaker 2: They're all nodes.

39
00:02:11.650 --> 00:02:13.430
&gt;&gt; Speaker 3: So where are these numbers

40
00:02:13.430 --> 00:02:15.480
coming from?
&gt;&gt; Bianca Gandolfo: Yeah, so

41
00:02:15.480 --> 00:02:19.730
each node is going to have some
data in it probably, right?

42
00:02:19.730 --> 00:02:24.740
And normally, when we have examples of
trees, we just have integers to simplify.

43
00:02:24.740 --> 00:02:27.303
But your tree could have probably

44
00:02:27.303 --> 00:02:30.410
objects with lots of different
kinds of data in it, yeah.

45
00:02:32.360 --> 00:02:33.050
Okay, good question.

46
00:02:34.990 --> 00:02:35.490
Awesome.

47
00:02:37.570 --> 00:02:39.706
So let's think about this interface.

48
00:02:39.706 --> 00:02:40.793
So our constructor.

49
00:02:40.793 --> 00:02:42.886
So this is a data structure, so

50
00:02:42.886 --> 00:02:46.921
we're gonna use our pseudo
classical pattern again here.

51
00:02:46.921 --> 00:02:51.196
And in our constructor,
some important things are storage.

52
00:02:51.196 --> 00:02:56.534
How are we gonna store all of our
nodes and represent relationships?

53
00:02:56.534 --> 00:03:01.120
And the root, which is the beginning of
our tree, and how we access most things.

54
00:03:01.120 --> 00:03:05.020
So methods, not all obviously, are insert.

55
00:03:05.020 --> 00:03:10.660
You wanna be able to insert a node or
a key into a tree.

56
00:03:10.660 --> 00:03:14.880
You want to search for
a key, the key is a value.

57
00:03:14.880 --> 00:03:17.240
Returns truth exists, false if it's not.

58
00:03:17.240 --> 00:03:19.870
Trees are often used for search.

59
00:03:19.870 --> 00:03:25.810
We're gonna be talking about different
search algorithms starting tomorrow.

60
00:03:25.810 --> 00:03:30.512
So min/max will return the minimum or
maximum value.

61
00:03:30.512 --> 00:03:31.870
And removal.

62
00:03:31.870 --> 00:03:34.322
This is a little trickier.

63
00:03:34.322 --> 00:03:36.728
If you're gonna be removing things
in the middle of the tree, and

64
00:03:36.728 --> 00:03:41.686
you have to preserve some sort of order.
&gt;&gt; Bianca Gandolfo: If you don't need to

65
00:03:41.686 --> 00:03:43.910
preserve any order, then not too hard.

66
00:03:45.430 --> 00:03:47.190
Awesome.
So this is our tree interface.

