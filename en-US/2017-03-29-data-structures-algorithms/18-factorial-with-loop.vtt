WEBVTT

1
00:00:00.160 --> 00:00:01.690
&gt;&gt; Bianca Gandolfo: Now we're
gonna talk about factorial.

2
00:00:01.690 --> 00:00:04.410
I have to talk about factorial because
this is when everyone has to talk about

3
00:00:04.410 --> 00:00:05.210
factorial.

4
00:00:05.210 --> 00:00:06.340
Blah, blah, blah, recursion.

5
00:00:06.340 --> 00:00:06.840
You ready?

6
00:00:08.850 --> 00:00:13.125
Our math person will be happy.
&gt;&gt; Speaker 2: [LAUGH]

7
00:00:13.125 --> 00:00:14.462
&gt;&gt; Bianca Gandolfo: All right,

8
00:00:14.462 --> 00:00:17.140
so what is a factorial?

9
00:00:17.140 --> 00:00:18.910
You guys remember what that one is?

10
00:00:18.910 --> 00:00:20.988
It's the one with the [SOUND].

11
00:00:20.988 --> 00:00:26.692
It's got the bang on it.
&gt;&gt; Bianca Gandolfo: So,

12
00:00:28.124 --> 00:00:31.135
&gt;&gt; Bianca Gandolfo: If we, I don't know,

13
00:00:31.135 --> 00:00:38.469
did 6 factorial.
&gt;&gt; Bianca Gandolfo: What is the equivalent

14
00:00:38.469 --> 00:00:41.631
of that, does anyone remember?
&gt;&gt; Speaker 3: That's 6.

15
00:00:41.631 --> 00:00:42.640
&gt;&gt; [INAUDIBLE]

16
00:00:42.640 --> 00:00:44.465
&gt;&gt; Speaker 3: 5 times 4 times 3.

17
00:00:44.465 --> 00:00:45.321
&gt;&gt; Bianca Gandolfo: Mm-hm.

18
00:00:50.985 --> 00:00:51.880
&gt;&gt; Bianca Gandolfo: Okay, not times 0 cuz

19
00:00:51.880 --> 00:00:55.508
that wouldn't make sense.
&gt;&gt; Speaker 2: [LAUGH]

20
00:00:55.508 --> 00:00:57.048
zero.
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

21
00:00:57.048 --> 00:00:58.550
So this is a factorial.

22
00:01:01.240 --> 00:01:07.620
Multiply, multiply, multiply, this is
just a very classic example of recursion.

23
00:01:07.620 --> 00:01:12.490
It hurts me to use this example but
I feel like it's a necessary evil.

24
00:01:13.610 --> 00:01:18.939
Yeah, okay, I'm sorry,
I wanted it to be about food and

25
00:01:18.939 --> 00:01:22.950
cute cats and stuff, but maybe tomorrow.

26
00:01:22.950 --> 00:01:27.820
Okay, so we have a pattern here,
where's my thing?

27
00:01:29.300 --> 00:01:36.210
So the pattern that's recursion,
or that's factorial, is this.

28
00:01:36.210 --> 00:01:39.180
Is it's the results of,

29
00:01:39.180 --> 00:01:44.700
the results times equal
basically n minus 1.

30
00:01:44.700 --> 00:01:50.790
We could see here if we're
looping through this,

31
00:01:50.790 --> 00:01:56.740
we would say result times
equals starting at 2.

32
00:01:56.740 --> 00:01:59.050
Again, remember why we can't start at 0.

33
00:01:59.050 --> 00:02:02.011
Starting at 1's not helpful either, right,
because 1 times anything is the same.

34
00:02:02.011 --> 00:02:07.370
So we start at 2, we count up,
and then we return the result.

35
00:02:09.330 --> 00:02:10.790
Clear on how this works?

36
00:02:11.930 --> 00:02:12.990
But we have a pattern.

37
00:02:14.200 --> 00:02:15.090
Here's our pattern.

38
00:02:16.460 --> 00:02:21.590
Maybe it's not super obvious at first,
but there we are.

39
00:02:21.590 --> 00:02:25.070
And so,
what we hope to do is use this pattern

40
00:02:26.580 --> 00:02:32.210
to inform our recursion, cuz we can do
recursion with loops, and so here we go.

41
00:02:33.310 --> 00:02:41.542
So, we have a base case
somewhere hidden in this loop.

42
00:02:41.542 --> 00:02:44.265
All right,
the base case is the point in which we

43
00:02:44.265 --> 00:02:48.849
are gonna stop.
&gt;&gt; Bianca Gandolfo: We're probably gonna

44
00:02:48.849 --> 00:02:54.195
pass a recursive function a number like 5.
&gt;&gt; Bianca Gandolfo: And

45
00:02:54.195 --> 00:02:57.460
then we wanna get to a certain
base case that's a stopping point.

46
00:02:59.250 --> 00:03:04.639
And we also want to actually do
the computation of the factorial.

47
00:03:04.639 --> 00:03:09.730
Yeah, so what is our base case?
&gt;&gt; Speaker 3: Zero.

48
00:03:11.720 --> 00:03:13.260
&gt;&gt; Speaker 2: When i is less than or

49
00:03:13.260 --> 00:03:19.078
equal to the number that you passed in?
&gt;&gt; Bianca Gandolfo: I

50
00:03:19.078 --> 00:03:23.428
guess it depends on where you start.
&gt;&gt; Bianca Gandolfo: Right,

51
00:03:23.428 --> 00:03:29.063
because the number that you, so if we're
imagining this loop and you have i.

52
00:03:29.063 --> 00:03:33.779
So you're starting at, so
you're saying when it's less, so 4,

53
00:03:33.779 --> 00:03:38.035
3, 2, 1, it would stop on all of those?
&gt;&gt; Speaker 2: Yeah, yeah, yeah.

54
00:03:38.035 --> 00:03:38.626
&gt;&gt; Bianca Gandolfo: On all of them or

55
00:03:38.626 --> 00:03:39.453
just one?
&gt;&gt; Speaker 2: No, no,

56
00:03:39.453 --> 00:03:40.924
no.
&gt;&gt; Speaker 2: Wait,

57
00:03:40.924 --> 00:03:44.354
sorry.
&gt;&gt; Bianca Gandolfo: So

58
00:03:44.354 --> 00:03:46.440
the base case is a stopping case.

59
00:03:46.440 --> 00:03:48.510
You're talking about the work step.

60
00:03:48.510 --> 00:03:52.020
We want to do work on those steps.
&gt;&gt; Speaker 2: Right.

61
00:03:52.020 --> 00:03:53.620
&gt;&gt; Speaker 3: Suggestion from the chat.

62
00:03:53.620 --> 00:03:55.922
i equals num.
&gt;&gt; Bianca Gandolfo: When i equals num,

63
00:03:55.922 --> 00:03:58.500
yeah, if we're counting up.

64
00:03:58.500 --> 00:04:00.257
Or, if we're counting down,

65
00:04:00.257 --> 00:04:02.570
when i equals what?
&gt;&gt; Speaker 3: One.

66
00:04:02.570 --> 00:04:04.510
&gt;&gt; Bianca Gandolfo: One, yeah or two.

67
00:04:04.510 --> 00:04:05.800
Exactly, great.

68
00:04:05.800 --> 00:04:09.090
So it depends on which order we're
going in, either one is fine.

69
00:04:09.090 --> 00:04:12.140
In this case, this example is counting up.

70
00:04:12.140 --> 00:04:15.730
So once we reach num, awesome.

71
00:04:15.730 --> 00:04:16.930
So we had our base case.

72
00:04:16.930 --> 00:04:22.389
We can imagine in our head now,
in a recursive function,

73
00:04:22.389 --> 00:04:26.368
we have some like if, n equals, equals,

74
00:04:26.368 --> 00:04:32.204
equals 5 since we're counting
up in this example, break.

