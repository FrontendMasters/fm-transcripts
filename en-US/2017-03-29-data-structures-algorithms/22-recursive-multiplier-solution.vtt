WEBVTT

1
00:00:00.000 --> 00:00:02.502
&gt;&gt; Bianca Gandolfo: Is there
another one that you wanna do?

2
00:00:02.502 --> 00:00:03.032
&gt;&gt; Student1: Five.
&gt;&gt; Student2: Yeah, five.

3
00:00:03.032 --> 00:00:04.143
&gt;&gt; Student3: Five.
&gt;&gt; class: [LAUGH]

4
00:00:04.143 --> 00:00:04.718
&gt;&gt; Bianca Gandolfo: All right.

5
00:00:04.718 --> 00:00:07.814
&gt;&gt; Student2: [LAUGH] I don't actually
understand the directions on five.

6
00:00:07.814 --> 00:00:09.740
&gt;&gt; Bianca Gandolfo: Well,
hopefully I do, let's see.

7
00:00:10.870 --> 00:00:12.270
&gt;&gt; Student2: It's like I'm the only one.

8
00:00:12.270 --> 00:00:13.725
&gt;&gt; Student3: There's an extra word into.

9
00:00:13.725 --> 00:00:18.013
&gt;&gt; class: [CROSSTALK]
&gt;&gt; Bianca Gandolfo: That takes two

10
00:00:18.013 --> 00:00:19.607
arguments return value.

11
00:00:19.607 --> 00:00:20.972
&gt;&gt; Student2: Okay.

12
00:00:22.180 --> 00:00:23.640
&gt;&gt; Bianca Gandolfo: Yeah, I see.

13
00:00:23.640 --> 00:00:24.310
Like that?

14
00:00:24.310 --> 00:00:24.840
&gt;&gt; Student2: Yeah, okay.

15
00:00:25.940 --> 00:00:29.130
&gt;&gt; Bianca Gandolfo: Great, array function
that takes two arguments, array and

16
00:00:29.130 --> 00:00:32.140
number, and multiplies each
array value by a number and

17
00:00:32.140 --> 00:00:34.640
returns an array of the values.

18
00:00:34.640 --> 00:00:40.210
So for example,
let's just do some input-output.

19
00:00:40.210 --> 00:00:43.090
So we have an array of numbers,
we pass it through a function and

20
00:00:43.090 --> 00:00:44.370
it's gonna transform.

21
00:00:44.370 --> 00:00:46.530
And then we also pass maybe three.

22
00:00:46.530 --> 00:00:50.790
We're gonna pass it through a function,
and

23
00:00:50.790 --> 00:00:55.620
it's gonna transform our array into 3,
6, 9.

24
00:00:55.620 --> 00:00:57.390
Cool, is this how everyone
understood the problem?

25
00:00:58.720 --> 00:01:04.597
Great, so this isn't too dissimilar
to our other one, right?

26
00:01:06.876 --> 00:01:11.815
&gt;&gt; Bianca Gandolfo: RecursiveMultiplier
equals a function,

27
00:01:11.815 --> 00:01:18.680
it's going to take an array of numbers and
then here we are.

28
00:01:20.040 --> 00:01:21.970
&gt;&gt; Student1: You also need
a multiplier on your function.

29
00:01:21.970 --> 00:01:23.580
&gt;&gt; Bianca Gandolfo: Thank you so much.

30
00:01:23.580 --> 00:01:25.756
What should we call that?

31
00:01:25.756 --> 00:01:27.070
Num is what we're gonna call it.

32
00:01:28.170 --> 00:01:31.870
Great, so who here has completed this?

33
00:01:34.440 --> 00:01:36.240
Cool, let's see.

34
00:01:36.240 --> 00:01:37.130
How did you do it?

35
00:01:38.520 --> 00:01:43.340
&gt;&gt; Student3: I pop the last element off a
list, ran recursive multiplier again, and

36
00:01:43.340 --> 00:01:44.040
then pushed it.

37
00:01:45.530 --> 00:01:47.340
So I multiplied it in place.

38
00:01:47.340 --> 00:01:52.070
So I said, remove the last element,
multiply, and then-

39
00:01:52.070 --> 00:01:52.909
&gt;&gt; Bianca Gandolfo: Tack it on.

40
00:01:52.909 --> 00:01:53.504
&gt;&gt; Student3: And add on it.

41
00:01:53.504 --> 00:01:58.769
&gt;&gt; Bianca Gandolfo: Onto the same array?

42
00:01:58.769 --> 00:01:59.625
&gt;&gt; Student3: Yeah.
&gt;&gt; Bianca Gandolfo: Got it.

43
00:01:59.625 --> 00:02:01.086
&gt;&gt; Student3: That's why I
multiplied it in place.

44
00:02:01.086 --> 00:02:02.410
&gt;&gt; Bianca Gandolfo: Cool, cool, cool.

45
00:02:02.410 --> 00:02:06.590
So you didn't actually pop
it off actually, or you did?

46
00:02:06.590 --> 00:02:09.620
&gt;&gt; Student3: I said,
var last equals arr.pop.

47
00:02:09.620 --> 00:02:14.400
And then recursive multiplier,
call it on the new shorter array and

48
00:02:14.400 --> 00:02:16.149
then pushed last times number.

49
00:02:17.650 --> 00:02:19.020
&gt;&gt; Bianca Gandolfo: Okay,
let's walk you through.

50
00:02:19.020 --> 00:02:20.060
&gt;&gt; Student3: Yeah, please.

51
00:02:21.840 --> 00:02:24.720
&gt;&gt; Bianca Gandolfo: So
what's the first thing that I need to do?

52
00:02:26.250 --> 00:02:27.830
I wanna see your solution.

53
00:02:29.630 --> 00:02:30.740
&gt;&gt; Student3: Okay.
&gt;&gt; Bianca Gandolfo: Yeah.

54
00:02:30.740 --> 00:02:34.910
&gt;&gt; Student3: So I said,
if arr.length equals 0, return arr.

55
00:02:34.910 --> 00:02:37.139
&gt;&gt; Bianca Gandolfo: Okay.

56
00:02:37.139 --> 00:02:39.818
&gt;&gt; Student3: And I said,
var last equals arr.pop.

57
00:02:39.818 --> 00:02:43.940
Well here, I'll let you type.

58
00:02:43.940 --> 00:02:45.360
&gt;&gt; Bianca Gandolfo: Okay.

59
00:02:45.360 --> 00:02:53.520
&gt;&gt; Student3: Okay, so
var last equals arr.pop.

60
00:02:53.520 --> 00:02:56.570
And then, recursiveMultiplier arr, num.

61
00:03:05.100 --> 00:03:06.080
&gt;&gt; Bianca Gandolfo: Okay.

62
00:03:06.080 --> 00:03:10.070
&gt;&gt; Student3: This looks circular,
and then arr.push.

63
00:03:10.070 --> 00:03:13.760
&gt;&gt; Bianca Gandolfo: Down here?
&gt;&gt; Student3: Yep, last times num.

64
00:03:18.790 --> 00:03:20.280
&gt;&gt; Student3: And then return arr.

65
00:03:21.730 --> 00:03:22.230
&gt;&gt; Bianca Gandolfo: Okay.

66
00:03:26.740 --> 00:03:27.657
&gt;&gt; Bianca Gandolfo: I see.

67
00:03:27.657 --> 00:03:28.786
Okay, cool.

68
00:03:31.535 --> 00:03:36.910
&gt;&gt; Bianca Gandolfo: So let's do our
thing that we do with the stack.

69
00:03:38.210 --> 00:03:40.190
Does that hold full for all of us?

70
00:03:41.600 --> 00:03:43.450
Yeah, thumbs on that?

71
00:03:43.450 --> 00:03:47.220
Great, so let's take a look at this.

72
00:03:48.680 --> 00:03:50.920
Let's pretend our input's one,
two, three, and then three.

73
00:03:52.210 --> 00:03:58.693
So recursiveMult, I needed to have
shorter names, recursiveMultiplier.

74
00:04:03.959 --> 00:04:08.449
&gt;&gt; Bianca Gandolfo: One, two,
and three, three, semicolon.

75
00:04:08.449 --> 00:04:13.500
All right, so here's the first one, right?

76
00:04:13.500 --> 00:04:15.220
I'm just doing those
brackets to keep track.

77
00:04:16.910 --> 00:04:17.820
Here's the first one, and

78
00:04:19.330 --> 00:04:23.740
the values that we have here,
let's make it a little bit bigger.

79
00:04:25.090 --> 00:04:29.190
The values that we have here are 1,
2, 3, and then comma 3.

80
00:04:29.190 --> 00:04:32.400
We're all on the same page?

81
00:04:32.400 --> 00:04:37.650
So arr.length, here, this is gonna
be false so we're gonna skip this.

82
00:04:37.650 --> 00:04:42.580
Var last is arr.pop, so
that's gonna give us the value 3.

83
00:04:42.580 --> 00:04:47.210
And our array, just to have a side
note is just now 1 and 2, right?

84
00:04:48.960 --> 00:04:54.515
So when we pass it to recursiveMultiplier,
the things that we're passing are 1 and

85
00:04:54.515 --> 00:04:57.980
2, and then 3, cool.

86
00:04:57.980 --> 00:05:02.080
So this is getting us closer to our base
case here, when we're popping it off.

87
00:05:03.230 --> 00:05:06.340
&gt;&gt; Bianca Gandolfo: And
this is our base case, 1 to 0.

88
00:05:06.340 --> 00:05:10.725
Great, so we're gonna pause here,
&gt;&gt; Bianca Gandolfo: And

89
00:05:10.725 --> 00:05:15.155
I'm gonna put some stars here just to say,
this is where we pause in our code,

90
00:05:15.155 --> 00:05:17.832
because we're gonna hop
into this function.

91
00:05:21.463 --> 00:05:24.600
&gt;&gt; Bianca Gandolfo: 2, is everyone
keeping track of my weird symbols?

92
00:05:26.430 --> 00:05:28.618
Great, you guys are so smart.

93
00:05:28.618 --> 00:05:31.413
Okay, [SOUND]

94
00:05:41.050 --> 00:05:42.020
&gt;&gt; Bianca Gandolfo: Okay, so here we are.

95
00:05:42.020 --> 00:05:45.481
We're in one layer, right?

96
00:05:45.481 --> 00:05:48.910
So we have, this is 2.

97
00:05:48.910 --> 00:05:56.190
We're passing 1 and 2 and then 3, good.

98
00:05:57.360 --> 00:05:59.604
So this is still false,
because our length is now 2.

99
00:05:59.604 --> 00:06:05.880
We're gonna pop off that last one,
it's gonna give us 1.

100
00:06:08.492 --> 00:06:14.545
&gt;&gt; Bianca Gandolfo: It's gonna give us 2,
and then our function is gonna be 1.

101
00:06:16.329 --> 00:06:17.392
&gt;&gt; Bianca Gandolfo: Cool.

102
00:06:19.151 --> 00:06:23.330
&gt;&gt; Bianca Gandolfo: Another one,
my goodness.

103
00:06:23.330 --> 00:06:27.130
So we are going to call you 3.

104
00:06:27.130 --> 00:06:32.453
Just a reminder of those numbers,
we have 1,

105
00:06:32.453 --> 00:06:38.540
3
&gt;&gt; Bianca Gandolfo: It's like inception,

106
00:06:38.540 --> 00:06:40.250
just keep going down.

107
00:06:41.450 --> 00:06:45.800
So here we just have 1, 3.

108
00:06:45.800 --> 00:06:47.956
Length is still false.

109
00:06:47.956 --> 00:06:54.314
We're gonna pop 1, our array is not empty.

110
00:06:54.314 --> 00:06:56.294
Sad, sad array.

111
00:06:56.294 --> 00:06:58.674
&gt;&gt; class: [LAUGH]
&gt;&gt; Bianca Gandolfo: [LAUGH] I gotta

112
00:06:58.674 --> 00:07:01.580
entertain myself somehow.

113
00:07:03.080 --> 00:07:04.740
So we have our fourth call.

114
00:07:06.170 --> 00:07:10.900
And then we're passing an empty array,
and then 3.

115
00:07:10.900 --> 00:07:14.870
I forgot to do my stars.

116
00:07:14.870 --> 00:07:17.390
Remember, the stars are just
where we left off, right?

117
00:07:17.390 --> 00:07:18.840
Cuz whenever we hop into a function,

118
00:07:18.840 --> 00:07:22.420
we don't finish executing the next
code that's really important.

119
00:07:23.780 --> 00:07:25.720
So we're just gonna hop on in.

120
00:07:28.222 --> 00:07:31.696
&gt;&gt; Bianca Gandolfo: My goodness, 5,
I got to make these examples shorter.

121
00:07:31.696 --> 00:07:35.746
&gt;&gt; Bianca Gandolfo: Yes, and

122
00:07:35.746 --> 00:07:42.340
then comma 3.

123
00:07:42.340 --> 00:07:44.140
This is true finally.

124
00:07:44.140 --> 00:07:49.630
So now, we're returning our array, right,
which is just empty at this point.

125
00:07:54.012 --> 00:07:56.139
&gt;&gt; Bianca Gandolfo: And then, so-
&gt;&gt; Student2: Bianca?

126
00:07:56.139 --> 00:07:57.170
&gt;&gt; Bianca Gandolfo: Yeah?

127
00:07:57.170 --> 00:07:58.170
&gt;&gt; Student2: A request?
&gt;&gt; Bianca Gandolfo: Sure.

128
00:07:58.170 --> 00:08:00.655
&gt;&gt; Student2: Can you change it from plain
text to JavaScript in your thing, so

129
00:08:00.655 --> 00:08:02.230
that they get the syntax highlighting.

130
00:08:02.230 --> 00:08:07.705
&gt;&gt; Bianca Gandolfo: Sure,
[SOUND] beautiful.

131
00:08:07.705 --> 00:08:10.728
&gt;&gt; class: [LAUGH]
&gt;&gt; Bianca Gandolfo: So our array,

132
00:08:10.728 --> 00:08:16.440
which is empty, is gonna be returned.

133
00:08:17.800 --> 00:08:19.480
All right, so
now we need to go back up the stack.

134
00:08:19.480 --> 00:08:22.330
So this was five, wait,
sorry this was four.

135
00:08:24.330 --> 00:08:26.490
Guys, you didn't tell me I was wrong.

136
00:08:26.490 --> 00:08:31.540
That's your job to tell me when I'm
wrong and I'm here to argue with you.

137
00:08:32.840 --> 00:08:35.001
&gt;&gt; Bianca Gandolfo: So
we're gonna pop this off, remember,

138
00:08:35.001 --> 00:08:37.980
we're returning the array,
we're gonna pop this off.

139
00:08:39.800 --> 00:08:43.370
&gt;&gt; Bianca Gandolfo: And now,
we are going to return our array.

140
00:08:44.560 --> 00:08:45.060
What happens here?

141
00:08:48.390 --> 00:08:50.414
&gt;&gt; Bianca Gandolfo: Return
this array in here,

142
00:08:50.414 --> 00:08:53.940
but I don't know if
anything's gonna happen.

143
00:08:53.940 --> 00:08:55.160
What's gonna happen?

144
00:08:57.187 --> 00:08:59.722
&gt;&gt; class: Go down to the next line?

145
00:08:59.722 --> 00:09:01.912
&gt;&gt; Bianca Gandolfo: Yeah, nothing really.

146
00:09:01.912 --> 00:09:06.813
So we're gonna go down to the next line,
and

147
00:09:06.813 --> 00:09:10.290
we're gonna do array.push.

148
00:09:10.290 --> 00:09:15.085
Array is still empty though in this frame,
times num which is 3,

149
00:09:15.085 --> 00:09:17.980
and then we're gonna return it again.

150
00:09:17.980 --> 00:09:21.557
So the return goes up.

151
00:09:22.935 --> 00:09:29.014
&gt;&gt; Bianca Gandolfo: And
at that point actually, where were we?

152
00:09:29.014 --> 00:09:33.430
Last.num, one times three.

153
00:09:35.720 --> 00:09:37.550
Yeah, so we're returning up.

154
00:09:37.550 --> 00:09:39.120
And we're here, in returns.

155
00:09:40.280 --> 00:09:47.480
A return is this, but
it's actually not doing anything for us.

156
00:09:49.900 --> 00:09:51.156
Cool, so we get back here.

157
00:09:51.156 --> 00:09:56.396
Array.push, last

158
00:09:56.396 --> 00:10:01.634
times num which is 2

159
00:10:01.634 --> 00:10:07.804
times 3, which is 6.

160
00:10:09.060 --> 00:10:14.620
We return our array,
[SOUND] things are getting complicated.

161
00:10:14.620 --> 00:10:16.680
Is our array one?

162
00:10:16.680 --> 00:10:17.610
&gt;&gt; class: It's three.

163
00:10:17.610 --> 00:10:21.310
&gt;&gt; Bianca Gandolfo: Or
is it three, but why I wonder?

164
00:10:21.310 --> 00:10:22.810
Does anyone know?

165
00:10:25.340 --> 00:10:29.291
&gt;&gt; Student1: This was passable last time.

166
00:10:29.291 --> 00:10:32.652
&gt;&gt; Bianca Gandolfo: Yeah, it's actually
because we're just doing work all

167
00:10:32.652 --> 00:10:33.870
in the same array.

168
00:10:33.870 --> 00:10:37.631
So all the work that you're doing through,
no matter where we're pushing it,

169
00:10:37.631 --> 00:10:39.130
it doesn't really matter.

170
00:10:39.130 --> 00:10:42.046
All that really matters is the order
in which we're doing this,

171
00:10:42.046 --> 00:10:44.440
because we're all doing
work in the same array.

172
00:10:44.440 --> 00:10:47.710
We're not making copies of the array,
does it make sense?

173
00:10:50.030 --> 00:10:55.230
Cool, so
what's happening here when we pushed,

174
00:10:55.230 --> 00:10:57.380
I shouldn't have deleted all that stuff.

175
00:10:57.380 --> 00:10:57.880
Where are you?

176
00:11:00.695 --> 00:11:03.905
Okay, so here, actually, no.

177
00:11:03.905 --> 00:11:05.625
That one is okay.

178
00:11:05.625 --> 00:11:06.185
We'll get rid of you.

179
00:11:07.625 --> 00:11:09.755
This is where the magic happens.

180
00:11:09.755 --> 00:11:11.325
Nope, still not happening.

181
00:11:12.915 --> 00:11:14.365
Here's our magic.

182
00:11:14.365 --> 00:11:18.030
So when we're pushing here,
we're pushing one.

183
00:11:18.030 --> 00:11:20.520
Then when we return this array,
we don't need to return anything.

184
00:11:20.520 --> 00:11:22.937
We can just return-
&gt;&gt; Student1: No, we're not pushing one,

185
00:11:22.937 --> 00:11:23.670
we're pushing three.

186
00:11:23.670 --> 00:11:26.906
&gt;&gt; Bianca Gandolfo: Yeah,
three, thank you.

187
00:11:26.906 --> 00:11:28.960
We can return,
[SOUND] here it doesn't really matter.

188
00:11:30.996 --> 00:11:35.920
&gt;&gt; Bianca Gandolfo: And we go up, it's all
about the order in which this is executed.

189
00:11:35.920 --> 00:11:38.690
The next one we're gonna push, and

190
00:11:38.690 --> 00:11:44.538
it's gonna be 3 comma,
what's the next one?

191
00:11:44.538 --> 00:11:45.130
&gt;&gt; class: Six.

192
00:11:45.130 --> 00:11:48.540
&gt;&gt; Bianca Gandolfo: Six, great.

193
00:11:48.540 --> 00:11:49.810
And again, we had popped this off.

194
00:11:51.090 --> 00:11:53.910
We're continuing and
returning the array which is fine.

195
00:11:55.970 --> 00:12:01.100
And then,
since we did that we've popped that.

196
00:12:01.100 --> 00:12:04.780
Did we do this one yet?

197
00:12:04.780 --> 00:12:07.480
Are we one less, did we skip one?

198
00:12:11.340 --> 00:12:13.350
We should have a 9 here somewhere.

199
00:12:13.350 --> 00:12:14.250
&gt;&gt; Student3: Isn't it this time?

200
00:12:15.810 --> 00:12:17.100
&gt;&gt; Bianca Gandolfo: Did
we not just do this one?

201
00:12:17.100 --> 00:12:17.900
&gt;&gt; Student3: No.

202
00:12:17.900 --> 00:12:18.510
&gt;&gt; Bianca Gandolfo: Okay.

203
00:12:18.510 --> 00:12:19.900
And then you're right, cool.

204
00:12:21.460 --> 00:12:22.690
Here we are, we're gonna push it.

205
00:12:23.830 --> 00:12:30.820
We're gonna return our array,
which is awesome because now it matters.

206
00:12:32.030 --> 00:12:38.043
And we have 3, 6,
[SOUND] that's not 6 and 9.

207
00:12:38.043 --> 00:12:41.606
Beautiful solution, and
then we pop this off because you are dead.

208
00:12:41.606 --> 00:12:44.166
&gt;&gt; class: [LAUGH]
&gt;&gt; Bianca Gandolfo: You're dead to us,

209
00:12:44.166 --> 00:12:45.690
recursiveMultiplier.

210
00:12:45.690 --> 00:12:50.102
That was too many layers of recursion for
one 3:30 in the afternoon.

211
00:12:50.102 --> 00:12:53.458
&gt;&gt; class: [LAUGH]
&gt;&gt; Bianca Gandolfo: [SOUND] Cool,

212
00:12:53.458 --> 00:12:54.605
question?

213
00:12:54.605 --> 00:12:56.810
&gt;&gt; Student2: It's a request.

214
00:12:56.810 --> 00:12:58.870
If you're tired now,
this is gonna make you work.

215
00:12:58.870 --> 00:13:02.608
Do it without a wrapper function, please.

216
00:13:02.608 --> 00:13:04.200
&gt;&gt; Bianca Gandolfo: Do it
without a wrapper function.

217
00:13:04.200 --> 00:13:05.730
So this is without a wrapper function.

218
00:13:07.437 --> 00:13:10.640
&gt;&gt; Bianca Gandolfo: This example
is without a wrapper function.

219
00:13:12.850 --> 00:13:15.160
&gt;&gt; Student2: Maybe it was the previous
one, I might have missed it.

220
00:13:15.160 --> 00:13:16.180
&gt;&gt; Bianca Gandolfo: Okay.

221
00:13:16.180 --> 00:13:19.780
Yeah, so this is an example of it
happening without a wrapper function.

222
00:13:19.780 --> 00:13:24.140
So it's important to be mindful here,

223
00:13:24.140 --> 00:13:29.980
that we can do what we're doing here with
pushing this array, because it's an array.

224
00:13:31.090 --> 00:13:32.400
It also works with objects.

225
00:13:32.400 --> 00:13:36.580
Whenever we're mutating data for
a primitive data type, like a string or

226
00:13:36.580 --> 00:13:40.030
a number, this isn't gonna fly, yeah?

227
00:13:40.030 --> 00:13:44.250
This is when we need to return it directly
like we were doing previously when we were

228
00:13:44.250 --> 00:13:46.250
returning string loop.

229
00:13:46.250 --> 00:13:49.970
Because what we're doing when we have
primitive data types is we're passing

230
00:13:49.970 --> 00:13:52.340
copies around pretty much.

231
00:13:52.340 --> 00:13:57.148
When we're doing objects in arrays and
things like that, or actually just objects

232
00:13:57.148 --> 00:14:00.934
in arrays and functions,
cuz that's an object, but whatever.

233
00:14:00.934 --> 00:14:04.235
Those are going to stay the same,
you're not passing copies,

234
00:14:04.235 --> 00:14:06.240
you're just passing pointers to it.

235
00:14:06.240 --> 00:14:07.905
Does that make sense?

236
00:14:07.905 --> 00:14:09.381
Cool.

237
00:14:12.798 --> 00:14:16.482
&gt;&gt; Bianca Gandolfo: All right, great.

238
00:14:18.480 --> 00:14:19.450
Any questions about this?

239
00:14:24.045 --> 00:14:25.204
&gt;&gt; Bianca Gandolfo: No?

240
00:14:25.204 --> 00:14:29.300
All right,
do you guys wanna do some stack and

241
00:14:29.300 --> 00:14:32.150
queue stuff now that we left off,
or do you have a question?

242
00:14:32.150 --> 00:14:35.050
&gt;&gt; Student1: Did you say that there is
a more complicated way to do the recursive

243
00:14:35.050 --> 00:14:39.250
reverse one or this is a different way?

244
00:14:39.250 --> 00:14:41.588
&gt;&gt; Bianca Gandolfo: Yeah,
it's in the same style as this.

245
00:14:41.588 --> 00:14:43.019
&gt;&gt; Student1: Okay.

246
00:14:43.019 --> 00:14:45.790
&gt;&gt; Bianca Gandolfo: Yeah, yeah, it's not.

247
00:14:45.790 --> 00:14:51.584
I don't know if it's more complicated
necessarily maybe I said that,

248
00:14:51.584 --> 00:14:56.510
but it's just the order in which
things happen it just is less

249
00:14:56.510 --> 00:15:00.020
linear seeming than this, right?

250
00:15:00.020 --> 00:15:00.810
Does that make sense?

251
00:15:02.090 --> 00:15:03.890
&gt;&gt; Student3: Cuz you push it to the front,
right?

252
00:15:03.890 --> 00:15:07.120
Instead of pushing it to the end it-
&gt;&gt; Bianca Gandolfo: On shift, yeah.

253
00:15:07.120 --> 00:15:11.814
&gt;&gt; Student3: I mean, for the recursive
reverse, if you wanna do it my style.

254
00:15:11.814 --> 00:15:13.649
&gt;&gt; Bianca Gandolfo: Yeah, great.

255
00:15:13.649 --> 00:15:16.070
So this is recursive in the same order.

256
00:15:16.070 --> 00:15:19.670
So you would just need to
unshift instead of push.

