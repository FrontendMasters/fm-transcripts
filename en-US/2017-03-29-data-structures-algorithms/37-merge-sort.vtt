WEBVTT

1
00:00:00.270 --> 00:00:04.990
&gt;&gt; Bianca: Merge sort,
which is our first sorting algorithm.

2
00:00:04.990 --> 00:00:08.300
That is sub-quadratic time,
which is great.

3
00:00:08.300 --> 00:00:11.250
Just means that this is
a sorting algorithm that

4
00:00:11.250 --> 00:00:16.790
can take a substantial amount of data and
sort it for us, so it's pretty exciting.

5
00:00:16.790 --> 00:00:19.640
All right, so divide and conquer.

6
00:00:20.700 --> 00:00:24.150
So divide and conquer, when you think of
divide and conquer the first thing you

7
00:00:24.150 --> 00:00:28.980
should think of is recursion.
&gt;&gt; Bianca: Yeah?

8
00:00:28.980 --> 00:00:32.972
Who here has done divide and
conquer some time?

9
00:00:32.972 --> 00:00:35.140
Okay, cool.

10
00:00:35.140 --> 00:00:38.889
All it means is, you take a problem,
you break it into smaller sub problems.

11
00:00:39.930 --> 00:00:44.480
Do the work on each sub-problem, and
then maybe combine them together.

12
00:00:44.480 --> 00:00:46.940
The next divide and conquer,
where there's no combination step,

13
00:00:46.940 --> 00:00:51.010
but this is the general recipe, is that
there is some combination step at the end.

14
00:00:52.660 --> 00:00:58.170
And for us, merge-sort,
you might guess that the combination

15
00:00:58.170 --> 00:01:01.271
is a merge at the end, maybe.

16
00:01:01.271 --> 00:01:03.580
Cool?

17
00:01:03.580 --> 00:01:06.490
Yeah, and you have to recognize a base
case, so you don't have an infinite loop.

18
00:01:08.370 --> 00:01:12.270
Great.
&gt;&gt; Bianca: Here we are.

19
00:01:12.270 --> 00:01:17.440
So I'm just gonna show you
the merge routine first,

20
00:01:17.440 --> 00:01:20.130
before we break down
the entire merge sort.

21
00:01:21.530 --> 00:01:26.800
So we start with these two sorted lists,

22
00:01:27.820 --> 00:01:33.350
and we merge them into one sorted list.

23
00:01:33.350 --> 00:01:38.390
The way we do that is,
we compare the first one in this sorted

24
00:01:38.390 --> 00:01:43.260
list with this one
&gt;&gt; Bianca: If this one's smaller.

25
00:01:45.604 --> 00:01:46.788
&gt;&gt; Bianca: We put it in there,

26
00:01:46.788 --> 00:01:49.240
we put it in the final one.

27
00:01:49.240 --> 00:01:52.500
Then we compare the next
one with the next one, and

28
00:01:54.290 --> 00:01:59.228
then we put the smaller one.
&gt;&gt; Bianca: Again compare,

29
00:01:59.228 --> 00:02:01.490
compare, 10's gonna be smaller.

30
00:02:02.590 --> 00:02:05.370
We are going to x it.

31
00:02:05.370 --> 00:02:06.205
10, 27, 82.

32
00:02:06.205 --> 00:02:15.496
27 is smaller.
&gt;&gt; Bianca: All right,

33
00:02:15.496 --> 00:02:17.336
so we compare 38 to 82.

34
00:02:17.336 --> 00:02:21.670
38 is gonna to be smaller, although my
dyslexia almost made me say the other one.

35
00:02:25.321 --> 00:02:28.420
&gt;&gt; Bianca: All right, we have 43, 82.

36
00:02:28.420 --> 00:02:30.580
43 is going to be smaller.

37
00:02:31.900 --> 00:02:32.740
Pop it in there.

38
00:02:32.740 --> 00:02:37.070
Don't forget our x, and then we have 82.

39
00:02:37.070 --> 00:02:41.000
So that's the procedure of
the merge routine, right?

40
00:02:41.000 --> 00:02:42.880
We take these sorted lists, and

41
00:02:42.880 --> 00:02:46.960
because they're sorted,
we can do this much easier.

42
00:02:46.960 --> 00:02:51.521
Can someone guess what
the time complexity of this

43
00:02:51.521 --> 00:02:55.384
might be.
&gt;&gt; Bianca: For

44
00:02:55.384 --> 00:03:02.511
this routine?
&gt;&gt; Speaker 2: I'd say it's going

45
00:03:02.511 --> 00:03:07.563
to be equal to whatever the shorter of
the list, cuz you have to do a comparison

46
00:03:07.563 --> 00:03:12.092
equals length of the shorter list, right?
&gt;&gt; Speaker 3: Don't you think [CROSSTALK]

47
00:03:12.092 --> 00:03:13.615
linear?
&gt;&gt; Speaker 2: Merge is linear.

48
00:03:13.615 --> 00:03:14.810
&gt;&gt; Speaker 4: It's exponenential,

49
00:03:14.810 --> 00:03:16.420
log?
&gt;&gt; Bianca: I have

50
00:03:16.420 --> 00:03:17.860
heard every single one.
&gt;&gt; Speaker 2: I know.

51
00:03:17.860 --> 00:03:18.470
&gt;&gt; Bianca: This is great.

52
00:03:18.470 --> 00:03:19.887
&gt;&gt; Speaker 2: That's gonna throw out

53
00:03:19.887 --> 00:03:21.936
in a sec.
&gt;&gt; Speaker 4: It's maybe

54
00:03:21.936 --> 00:03:23.480
exponential?

55
00:03:23.480 --> 00:03:24.300
&gt;&gt; Bianca: Exponential?
&gt;&gt; Speaker 4: Yeah.

56
00:03:24.300 --> 00:03:25.490
&gt;&gt; Bianca: Well, the thing about merge

57
00:03:25.490 --> 00:03:28.940
sort that we know,
is that it's not exponential for sure.

58
00:03:28.940 --> 00:03:30.850
Cuz I said at the beginning,
since it's divide and

59
00:03:30.850 --> 00:03:32.470
conquer it's not gonna be exponential.

60
00:03:33.770 --> 00:03:35.440
So there's not gonna be nested loops here.

61
00:03:36.910 --> 00:03:39.590
So given that,
cuz a few people said exponential,

62
00:03:40.680 --> 00:03:44.290
maybe cuz we're just thinking, my gosh,
we have to do all these comparisons.

63
00:03:45.420 --> 00:03:48.440
Maybe it's gonna be like a nested loop,
cuz that's what we've been doing.

64
00:03:48.440 --> 00:03:51.250
But actually, if you think about it,
we just have a pointer, and

65
00:03:52.350 --> 00:03:57.160
we're just incrementing
pointers on over one list and

66
00:03:57.160 --> 00:04:02.460
pushing it into another list.
&gt;&gt; Bianca: So you're just comparing.

67
00:04:02.460 --> 00:04:09.580
You don't need to do a nested loop.
&gt;&gt; Bianca: That make sense?

68
00:04:09.580 --> 00:04:12.710
Cuz you're not comparing all
of these to all of these,

69
00:04:12.710 --> 00:04:14.710
you're just comparing the first ones, or

70
00:04:14.710 --> 00:04:17.600
the second, as you pop them off.
&gt;&gt; Speaker 2: So

71
00:04:17.600 --> 00:04:20.348
you're saying it's linear?
&gt;&gt; Bianca: Mm-hm,

72
00:04:20.348 --> 00:04:21.360
yep.
&gt;&gt; Speaker 2: But

73
00:04:21.360 --> 00:04:25.410
if you had a list of 100
that were sorted and

74
00:04:25.410 --> 00:04:29.680
a list of 20 that were sorted,
it would only be 20 comparisons, right?

75
00:04:29.680 --> 00:04:30.960
Cuz I need to take the rest,

76
00:04:30.960 --> 00:04:32.170
the remaining-
&gt;&gt; Bianca: Yeah,

77
00:04:32.170 --> 00:04:34.370
it sort of depends on how
you implement it, but

78
00:04:34.370 --> 00:04:38.440
yeah, hopefully you have
an optimization where that will just

79
00:04:39.480 --> 00:04:42.044
copy the rest of it over,
and it will still be linear.

80
00:04:44.215 --> 00:04:48.515
Because you'd still have to copy
each one over, you know what I mean?

81
00:04:48.515 --> 00:04:54.125
There's no bulk copy paste situation,
unfortunately.

82
00:04:54.125 --> 00:04:58.255
But the way it works is, we divide and

83
00:04:58.255 --> 00:05:01.305
conquer, and
you roughly divide it in half every time.

84
00:05:01.305 --> 00:05:02.955
If it's an odd number, it kinda gets.

85
00:05:04.010 --> 00:05:08.611
It might be one off, but for
the most part, it's not gonna be 20/80.

86
00:05:08.611 --> 00:05:10.540
And for the most part, I mean, never.

87
00:05:10.540 --> 00:05:13.410
If your implementation's doing that,
then that's something,

88
00:05:13.410 --> 00:05:17.960
that's not a merge sort.
&gt;&gt; Speaker 4: What if the two lists

89
00:05:17.960 --> 00:05:21.870
are not sorted?
&gt;&gt; Bianca: If they're not sorted?

90
00:05:21.870 --> 00:05:23.530
&gt;&gt; Speaker 4: Yeah, at the beginning

91
00:05:23.530 --> 00:05:25.250
&gt;&gt; Bianca: Then it would be quadratic,

92
00:05:25.250 --> 00:05:25.970
if it wasn't sorted.

93
00:05:26.970 --> 00:05:31.180
But that's the magic of the merge sort,
is that we know that each of these

94
00:05:31.180 --> 00:05:35.160
smaller arrays are gonna be sorted,
because we are gonna do that ourselves.

95
00:05:35.160 --> 00:05:35.950
We're gonna do that work.

96
00:05:37.140 --> 00:05:39.570
Yeah, but
I just wanted to sort of zoom in here.

97
00:05:39.570 --> 00:05:41.884
We zoomed in to the merged part,
and then we're gonna zoom out.

98
00:05:41.884 --> 00:05:46.250
We have, in this divide &amp; conquer,

99
00:05:46.250 --> 00:05:49.290
the base case, breaking down the problem,
doing the work,

100
00:05:49.290 --> 00:05:53.500
which in this case is the same as combing
it, because our work is sorting it.

101
00:05:53.500 --> 00:05:56.000
And merging is where the sorting
is really happening.

102
00:05:56.000 --> 00:05:57.980
And we'll see what that means in a second.

