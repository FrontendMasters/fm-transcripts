WEBVTT

1
00:00:00.260 --> 00:00:03.250
&gt;&gt; Bianca Gandolfo: Binary search tree,
quick review, so

2
00:00:03.250 --> 00:00:05.730
we have our n-ary tree,
which we just created.

3
00:00:05.730 --> 00:00:10.560
We have parent/child relationships,
each node can have n amount of children.

4
00:00:10.560 --> 00:00:12.820
And we have this sequential access, right?

5
00:00:12.820 --> 00:00:14.700
Where we start from a root node, and

6
00:00:14.700 --> 00:00:18.310
we access the children from there,
unless we have a reference, right?

7
00:00:19.540 --> 00:00:24.530
So a binary tree is the same as the n-ary
tree, except that each node can

8
00:00:24.530 --> 00:00:29.810
have a maximum of two children, so we
have this concept of a left and a right.

9
00:00:29.810 --> 00:00:33.480
And then, our next sort of iteration on
top of that, is our binary search tree,

10
00:00:33.480 --> 00:00:37.690
which is the same as a binary tree,
except that all the nodes on the left,

11
00:00:38.990 --> 00:00:42.130
it's a search tree and everything
is gonna be sorted in this tree.

12
00:00:42.130 --> 00:00:45.270
Everything in the left,
the values are less than the node, and

13
00:00:45.270 --> 00:00:48.130
everything on the right,
the values are greater.

14
00:00:48.130 --> 00:00:53.212
The way I remember left and
right is, because like most people

15
00:00:53.212 --> 00:00:59.090
that I know are right-handed, so
I think like more right, left less.

16
00:01:00.170 --> 00:01:03.423
And so, that's how we set
up our binary search tree.

17
00:01:03.423 --> 00:01:08.479
And the entire sub tree in left
is gonna be less than the right,

18
00:01:08.479 --> 00:01:11.335
and the right is gonna be greater.

19
00:01:11.335 --> 00:01:14.802
Cool?

20
00:01:14.802 --> 00:01:18.299
Do we have a visual, in our head here?

21
00:01:20.193 --> 00:01:21.050
&gt;&gt; Bianca Gandolfo: Where's our visual?

22
00:01:22.690 --> 00:01:23.590
I don't have a visual.

23
00:01:23.590 --> 00:01:24.302
That's okay.

24
00:01:26.554 --> 00:01:30.740
&gt;&gt; Bianca Gandolfo: So,
the thing about performance.

25
00:01:33.130 --> 00:01:37.276
So we often think about searching and

26
00:01:37.276 --> 00:01:42.710
lookup when we have some sorted list,
right?

27
00:01:42.710 --> 00:01:46.665
So we have our sorted array,
which might be a simpler version then

28
00:01:46.665 --> 00:01:50.560
de-sorted nested arrays, right,
which are binary search trees.

29
00:01:50.560 --> 00:01:54.380
We saw our n-ary tree is just
a nested in arrays, right?

30
00:01:54.380 --> 00:02:00.019
Objects in arrays, binary search
tree is gonna be the same idea.

31
00:02:00.019 --> 00:02:03.330
For an array your value
look-up by key is super fast.

32
00:02:04.690 --> 00:02:08.540
However, if you need to insert or
delete, it's a little bit slower.

33
00:02:08.540 --> 00:02:10.230
And we saw that, right,

34
00:02:10.230 --> 00:02:15.220
cuz we would have to shift over all the
elements in an array, to make it happen.

35
00:02:16.610 --> 00:02:17.110
Yeah?

36
00:02:18.560 --> 00:02:22.691
So with the binary search tree,
&gt;&gt; Bianca Gandolfo: These

37
00:02:22.691 --> 00:02:24.500
things are usually a bit faster.

38
00:02:25.500 --> 00:02:28.997
So a value lookup by key inserting and
deleting, and

39
00:02:28.997 --> 00:02:33.370
that's because our data structure
is flexible and we don't have

40
00:02:33.370 --> 00:02:38.319
contiguous usage of memory space,
like you might with an array, right?

41
00:02:38.319 --> 00:02:41.119
So if you wanna add something
to the beginning of the array,

42
00:02:41.119 --> 00:02:44.120
you just shift everything
over to the right.

43
00:02:44.120 --> 00:02:49.060
Which for a binary search tree,
simply inserting means that you're going

44
00:02:49.060 --> 00:02:53.670
to traverse the tree, and
find its place in the list.

45
00:02:55.250 --> 00:02:57.400
Let's find my picture of
the binary search tree.

46
00:02:58.520 --> 00:02:59.885
Where did it go?

47
00:03:02.568 --> 00:03:04.684
&gt;&gt; Bianca Gandolfo: Where are you,
picture?

48
00:03:04.684 --> 00:03:06.865
We have it in another slide deck,
for sure.

49
00:03:09.361 --> 00:03:10.502
&gt;&gt; Bianca Gandolfo: Circular tree.

50
00:03:13.250 --> 00:03:17.091
&gt;&gt; Bianca Gandolfo: Okay, so
this is our binary search tree.

51
00:03:20.627 --> 00:03:21.550
&gt;&gt; Bianca Gandolfo: Can you guys see that?

52
00:03:23.210 --> 00:03:24.297
It's right there.

53
00:03:26.070 --> 00:03:29.980
&gt;&gt; Bianca Gandolfo: So we see here,
we have our root and say,

54
00:03:29.980 --> 00:03:34.121
we wanted to add, but just say, we add 7,

55
00:03:34.121 --> 00:03:39.529
we're gonna add it to the left
cuz it's less than 11,

56
00:03:39.529 --> 00:03:43.350
versus 15, which is gonna be right.

57
00:03:43.350 --> 00:03:51.390
Notice that this entire subtree
is going to be greater than 11.

58
00:03:51.390 --> 00:03:55.100
This entire subtree is gonna
be less than 11, right?

59
00:03:55.100 --> 00:03:56.760
I was talking about that earlier.

60
00:03:56.760 --> 00:04:04.001
And let's imagine that we wanted to
insert the value 2, into this tree.

61
00:04:04.001 --> 00:04:09.440
It would start from the root and we would
say, is 2 greater than or equal to 11?

62
00:04:09.440 --> 00:04:11.760
It's less, so we're gonna go left.

63
00:04:12.780 --> 00:04:17.891
So greater than or equal to 7 is less,
so we're gonna go left.

64
00:04:17.891 --> 00:04:23.218
Greater than or equal to 5,
it is less, so we're gonna go left.

65
00:04:25.811 --> 00:04:30.112
&gt;&gt; Speaker 2: Wouldn't it be easier
to reorganize the structure, so

66
00:04:30.112 --> 00:04:35.784
that the 7 becomes the node and
2 show and become 1, greater than that,

67
00:04:35.784 --> 00:04:40.510
which is 11, and
then the smaller two on the left side.

68
00:04:40.510 --> 00:04:44.230
&gt;&gt; Bianca Gandolfo: So yeah, so the
greater is still the 7 subtree are greater

69
00:04:44.230 --> 00:04:46.480
than the left subtree still.

70
00:04:46.480 --> 00:04:51.352
So if its 2, where we want it to go,
is to the left of the 3 because it's

71
00:04:51.352 --> 00:04:56.060
less than 3, versus, if we were to add 4,
it would go left, left,

72
00:04:56.060 --> 00:05:00.658
left, but once we get to 3,
we were gonna add it then to the right.

73
00:05:00.658 --> 00:05:01.590
Does that make sense?

74
00:05:01.590 --> 00:05:06.802
So, 2 would go here,
4 would go to the right.

75
00:05:10.656 --> 00:05:11.878
&gt;&gt; Bianca Gandolfo: Cool?

76
00:05:11.878 --> 00:05:15.876
So what would happen if
we wanted to add 19?

77
00:05:19.633 --> 00:05:22.638
&gt;&gt; Bianca Gandolfo: What would
be the first thing that happens?

78
00:05:22.638 --> 00:05:24.510
&gt;&gt; Speaker 2: You go to the right of 11.

79
00:05:24.510 --> 00:05:25.858
&gt;&gt; Bianca Gandolfo: Mm-hm.

80
00:05:25.858 --> 00:05:29.631
So we'd say, is 19 less than or
greater than?

81
00:05:29.631 --> 00:05:33.590
It's greater than, we're gonna go to
the right, then what will happen?

82
00:05:34.810 --> 00:05:35.770
&gt;&gt; Speaker 2: Same thing.

83
00:05:35.770 --> 00:05:37.080
&gt;&gt; Bianca Gandolfo: Less than or
greater than?

84
00:05:37.080 --> 00:05:39.049
It's greater, so
it's gonna go to the right.

85
00:05:39.049 --> 00:05:40.814
&gt;&gt; Speaker 2: Mm-hm.

86
00:05:40.814 --> 00:05:42.490
&gt;&gt; Bianca Gandolfo: 20,
less than or greater?

87
00:05:42.490 --> 00:05:43.070
&gt;&gt; Speaker 2: Less.

88
00:05:43.070 --> 00:05:45.102
&gt;&gt; Bianca Gandolfo: Less, 18?

89
00:05:45.102 --> 00:05:45.882
&gt;&gt; Speaker 2: Greater.

90
00:05:45.882 --> 00:05:49.445
&gt;&gt; Bianca Gandolfo: Greater,
then it will come out on the right.

91
00:05:51.081 --> 00:05:54.730
&gt;&gt; Bianca Gandolfo: And so
that is how we have a binary search tree.

92
00:05:54.730 --> 00:05:56.740
Cool.
And that is another reason why insertion

93
00:05:58.080 --> 00:05:59.110
is easy, right?

94
00:05:59.110 --> 00:06:03.190
We don't need to rearrange
an entire array,

95
00:06:03.190 --> 00:06:08.289
we just need to traverse
down into the proper place.

96
00:06:10.840 --> 00:06:13.308
How much less work is that probably?

97
00:06:17.233 --> 00:06:19.215
&gt;&gt; Speaker 2: Well,
it would be a recursive, right?

98
00:06:19.215 --> 00:06:19.890
&gt;&gt; Bianca Gandolfo: Mm-hm?

99
00:06:19.890 --> 00:06:22.160
&gt;&gt; Speaker 2: So, versus the loop.

100
00:06:22.160 --> 00:06:26.467
&gt;&gt; Bianca Gandolfo: Yeah, so we wouldn't
have to look at all of our elements.

101
00:06:26.467 --> 00:06:28.090
&gt;&gt; Speaker 2: So
we'd only be cutting it in half?

102
00:06:28.090 --> 00:06:30.281
&gt;&gt; Bianca Gandolfo: Yeah, so
when we cut something in half each time,

103
00:06:30.281 --> 00:06:30.969
&gt;&gt; Speaker 2: That's the login.

104
00:06:32.240 --> 00:06:32.840
&gt;&gt; Bianca Gandolfo: It's what?

105
00:06:32.840 --> 00:06:33.801
&gt;&gt; Speaker 2: Login?

106
00:06:33.801 --> 00:06:34.400
&gt;&gt; Bianca Gandolfo: Yep.
&gt;&gt; Speaker 2: Yeah.

107
00:06:34.400 --> 00:06:35.750
&gt;&gt; Bianca Gandolfo: Yep,
so logarithmic time.

