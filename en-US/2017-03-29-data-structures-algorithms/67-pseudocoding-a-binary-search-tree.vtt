WEBVTT

1
00:00:00.280 --> 00:00:03.590
&gt;&gt; Bianca Gandolfo: So we're gonna get
started with our Binary Search Tree.

2
00:00:03.590 --> 00:00:06.740
We're gonna start with some pseudocode,
we'll walk through pseudocode, and

3
00:00:06.740 --> 00:00:08.230
then we will look at a solution.

4
00:00:08.230 --> 00:00:10.370
And then it'll be lunchtime.

5
00:00:10.370 --> 00:00:11.650
Sound like a plan?

6
00:00:11.650 --> 00:00:15.040
Awesome, and when we come back,
we are gonna be talking about exploring.

7
00:00:15.040 --> 00:00:17.810
We're going to be explorers
through our binary search trees.

8
00:00:17.810 --> 00:00:20.130
There are different ways to
traverse our Binary Search Tree.

9
00:00:20.130 --> 00:00:25.140
We'll explore three ways and
then we get to the fun stuff.

10
00:00:25.140 --> 00:00:29.270
We're gonna learn how to delete
nodes from our binary search tree.

11
00:00:29.270 --> 00:00:30.960
And that will probably take
us to the end of the day.

12
00:00:32.250 --> 00:00:37.260
And tomorrow, we'll look into
balancing cuz at the end we're gonna

13
00:00:37.260 --> 00:00:40.810
analyze our operations in the binary
search tree, and they seem pretty good.

14
00:00:41.990 --> 00:00:44.980
However, in the worst case,
we can do better.

15
00:00:44.980 --> 00:00:48.320
And that comes into play
when we start balancing.

16
00:00:48.320 --> 00:00:49.740
But we'll get to that.

17
00:00:49.740 --> 00:00:51.550
First let's just start
with the constructor.

18
00:00:53.170 --> 00:00:55.336
So what are some things that
we need in the constructor?

19
00:00:58.385 --> 00:00:59.625
&gt;&gt; Speaker 2: You need a left and a right.

20
00:00:59.625 --> 00:01:00.480
&gt;&gt; Bianca Gandolfo: Mm-hm.

21
00:01:00.480 --> 00:01:02.430
&gt;&gt; Speaker 2: And the value.

22
00:01:02.430 --> 00:01:06.174
&gt;&gt; Bianca Gandolfo: So
we need a value, we need a left.

23
00:01:06.174 --> 00:01:10.690
We need a right.

24
00:01:10.690 --> 00:01:12.437
Anything else?

25
00:01:20.833 --> 00:01:24.020
&gt;&gt; Bianca Gandolfo: Nope, nothing else.

26
00:01:24.020 --> 00:01:26.460
So we have the value,
we have the left and the right.

27
00:01:26.460 --> 00:01:31.457
If this was a linked list, we would
just have a next if this was a n-ary

28
00:01:31.457 --> 00:01:36.560
tree we would have an array, right,
cuz then it can have multiple.

29
00:01:36.560 --> 00:01:41.986
If we were to have three
branches per node,

30
00:01:41.986 --> 00:01:45.014
we might have a middle.

31
00:01:45.014 --> 00:01:48.910
So that's just some different interfaces
that you might make in your constructor.

32
00:01:50.860 --> 00:01:51.600
So insert.

33
00:01:53.400 --> 00:01:55.576
So insert, what does it take?

34
00:01:55.576 --> 00:01:56.438
&gt;&gt; Speaker 2: The value.

35
00:01:56.438 --> 00:02:01.734
&gt;&gt; Bianca Gandolfo: It takes the value.

36
00:02:01.734 --> 00:02:03.179
And what is the goal here?

37
00:02:03.179 --> 00:02:04.580
What do we want to do with our insert?

38
00:02:07.489 --> 00:02:10.287
&gt;&gt; Speaker 2: We wanna find where it goes.

39
00:02:10.287 --> 00:02:14.608
&gt;&gt; Bianca Gandolfo: Yeah,
find its proper place.

40
00:02:14.608 --> 00:02:15.732
So what are the rules for that?

41
00:02:18.769 --> 00:02:23.967
&gt;&gt; Speaker 2: If it's less
than the current value,

42
00:02:23.967 --> 00:02:29.335
then you need to move add it to the left.

43
00:02:29.335 --> 00:02:30.790
&gt;&gt; Bianca Gandolfo: Mm-hm.

44
00:02:38.329 --> 00:02:41.169
&gt;&gt; Bianca Gandolfo: Okay, what else?

45
00:02:41.169 --> 00:02:42.160
What are some other roles?

46
00:02:43.640 --> 00:02:45.625
So if the value is less we go left.

47
00:02:45.625 --> 00:02:49.929
&gt;&gt; Speaker 2: [CROSSTALK]
Or we can insert it there.

48
00:02:49.929 --> 00:02:50.742
&gt;&gt; Bianca Gandolfo: What's that?

49
00:02:50.742 --> 00:02:52.956
&gt;&gt; Speaker 2: If there's a null at
the left we can insert it there.

50
00:02:52.956 --> 00:02:54.476
&gt;&gt; Bianca Gandolfo: Mm-hm, go left.

51
00:02:57.549 --> 00:02:59.936
&gt;&gt; Bianca Gandolfo: If there's a left,
right?

52
00:02:59.936 --> 00:03:04.300
So if there's a left go left.

53
00:03:04.300 --> 00:03:10.980
Otherwise, right, else insert, right?

54
00:03:10.980 --> 00:03:12.792
&gt;&gt; Speaker 2: How about equal?

55
00:03:12.792 --> 00:03:13.658
&gt;&gt; Bianca Gandolfo: Hm?

56
00:03:13.658 --> 00:03:14.855
&gt;&gt; Speaker 2: How about it to be equal?

57
00:03:14.855 --> 00:03:16.744
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: What if it's equal?

58
00:03:16.744 --> 00:03:19.267
&gt;&gt; Speaker 2: Yeah.

59
00:03:19.267 --> 00:03:22.422
&gt;&gt; Bianca Gandolfo: Usually in a BST you
don't wanna have equals in it, but if it

60
00:03:22.422 --> 00:03:26.416
was equals then you could just choose if
it would go on the left or the right.

61
00:03:26.416 --> 00:03:31.278
But normally, you don't wanna have
duplicates because it gets kinda tricky

62
00:03:31.278 --> 00:03:33.314
when you start deleting nodes.

63
00:03:37.306 --> 00:03:43.190
&gt;&gt; Bianca Gandolfo: So
what's the other case?

64
00:03:43.190 --> 00:03:45.534
So we have if it's less than.

65
00:03:45.534 --> 00:03:48.961
&gt;&gt; Speaker 2: So less than or equal left,
and then if it's greater go right.

66
00:03:48.961 --> 00:03:55.070
&gt;&gt; Bianca Gandolfo: Cool, so
if the value is greater than current.

67
00:04:00.103 --> 00:04:01.677
&gt;&gt; Bianca Gandolfo: Go right.

68
00:04:01.677 --> 00:04:03.763
&gt;&gt; Speaker 2: It would be the same,
if right go right, else if left.

69
00:04:03.763 --> 00:04:04.552
&gt;&gt; Bianca Gandolfo: Mm-hm.

70
00:04:11.901 --> 00:04:14.930
&gt;&gt; Bianca Gandolfo: Else insert.

71
00:04:20.562 --> 00:04:23.734
&gt;&gt; Bianca Gandolfo: What do we think?

72
00:04:23.734 --> 00:04:26.597
&gt;&gt; Speaker 2: That looks
like it would work.

73
00:04:26.597 --> 00:04:29.060
&gt;&gt; Bianca Gandolfo: Cool,
should we try it now?

74
00:04:36.009 --> 00:04:37.126
&gt;&gt; Bianca Gandolfo: Question?

75
00:04:47.232 --> 00:04:50.812
&gt;&gt; Speaker 2: It should go back
to the loop, right, if one.

76
00:04:50.812 --> 00:04:57.170
Then you go to the second, and
then should come back if it's not the end.

77
00:04:57.170 --> 00:04:59.090
&gt;&gt; Bianca Gandolfo: Should it come back?

78
00:04:59.090 --> 00:05:01.680
&gt;&gt; Speaker 2: To the beginning
of the comparison.

79
00:05:01.680 --> 00:05:02.890
&gt;&gt; Bianca Gandolfo: To the beginning?

80
00:05:02.890 --> 00:05:03.968
&gt;&gt; Speaker 2: Of the omparison loop.

81
00:05:03.968 --> 00:05:09.896
&gt;&gt; Bianca Gandolfo: So,
that would be true if you were going to be

82
00:05:09.896 --> 00:05:15.848
comparing it to every single node, right?

83
00:05:15.848 --> 00:05:16.829
Mm-hm.

84
00:05:16.829 --> 00:05:18.484
&gt;&gt; Speaker 2: Yeah.

85
00:05:19.920 --> 00:05:21.159
&gt;&gt; Bianca Gandolfo: But for this one,

86
00:05:21.159 --> 00:05:24.730
you just want to compare
it along that one path.

87
00:05:24.730 --> 00:05:25.820
&gt;&gt; Speaker 2: One path.

88
00:05:25.820 --> 00:05:26.738
&gt;&gt; Bianca Gandolfo: Yeah.

89
00:05:29.825 --> 00:05:33.073
&gt;&gt; Speaker 2: But at each node you need
to do both, whether it's greater or

90
00:05:33.073 --> 00:05:33.922
less, right?

91
00:05:33.922 --> 00:05:35.610
Mm-hm, mm-hm.

92
00:05:35.610 --> 00:05:36.850
&gt;&gt; Bianca Gandolfo: Are we
missing anything else?

93
00:05:37.870 --> 00:05:42.061
&gt;&gt; Speaker 3: And
in practice should we allow duplicates, or

94
00:05:42.061 --> 00:05:46.685
should we throw an error
if value equals this value?

95
00:05:46.685 --> 00:05:47.736
&gt;&gt; Speaker 2: It depends.

96
00:05:47.736 --> 00:05:49.660
&gt;&gt; Bianca Gandolfo: It depends
on what you need to do, yeah.

97
00:05:49.660 --> 00:05:53.072
&gt;&gt; Speaker 2: On the GitHub it
said you just need to do one.

98
00:05:53.072 --> 00:05:55.766
All values in the left subchain
of a node are less than or

99
00:05:55.766 --> 00:05:57.360
equal to the value of the node.

100
00:05:57.360 --> 00:06:00.280
&gt;&gt; Bianca Gandolfo: Yeah, that's fine, but

101
00:06:00.280 --> 00:06:04.120
they also don't have a deletion piece,
which we're adding.

102
00:06:05.190 --> 00:06:06.260
So that's when it gets complicated.

103
00:06:06.260 --> 00:06:08.330
So if you're not deleting it, so
if you have a binary search tree, and

104
00:06:08.330 --> 00:06:11.440
you're just adding all day, and you're
not deleting anything or balancing or

105
00:06:11.440 --> 00:06:13.540
rotating, you can have duplicates.

106
00:06:13.540 --> 00:06:14.940
It doesn't really matter.

107
00:06:14.940 --> 00:06:18.380
But once you start rearranging the trees,
it gets a little hairy.

108
00:06:18.380 --> 00:06:23.986
And so, if you're making a binary search
tree where you wanna handle deletions and

109
00:06:23.986 --> 00:06:27.842
rotations, you wanna be
strict about your duplicates.

110
00:06:27.842 --> 00:06:29.790
&gt;&gt; Speaker 2: What are rotations?

111
00:06:29.790 --> 00:06:34.249
&gt;&gt; Bianca Gandolfo: Rotation happens
when you basically you're gonna be

112
00:06:34.249 --> 00:06:39.210
rearranging your tree so
that its height is not super deep.

113
00:06:39.210 --> 00:06:42.337
Cuz in the worse case,
if your binary tree everything is less,

114
00:06:42.337 --> 00:06:44.920
less, less it can look like a linked list,
right?

115
00:06:44.920 --> 00:06:46.991
And so
we'll talk about that more in depth but

116
00:06:46.991 --> 00:06:49.650
you'll wanna rotate it to find balance.

117
00:06:49.650 --> 00:06:54.728
Yeah.
And a balance is basically the depth

118
00:06:54.728 --> 00:07:02.750
of a tree is never more than
one level deeper than the rest.

119
00:07:02.750 --> 00:07:05.860
Hope that make sense.

120
00:07:05.860 --> 00:07:10.760
So here I can show you,
we'll talk about a little bit more,

121
00:07:10.760 --> 00:07:14.440
so here we have these different levels so
this is balanced, right?

122
00:07:14.440 --> 00:07:20.069
Cuz it's all the same level, but say we
had like three, two, zero, negative one,

123
00:07:20.069 --> 00:07:25.590
negative two, all the way to left,
then it would suddenly be unbalanced.

124
00:07:25.590 --> 00:07:30.960
Because negative two down here would be
three levels deeper than the last level.

125
00:07:32.270 --> 00:07:35.540
And so when we are traversing this and
finding it,

126
00:07:35.540 --> 00:07:40.440
it's actually gonna be greater
than logarithmic time.

127
00:07:40.440 --> 00:07:43.720
Because it's not being cut
in half every time any more.

128
00:07:43.720 --> 00:07:46.550
It's now suddenly just linear,
it's a linked list at that point.

129
00:07:47.690 --> 00:07:52.770
So in the worst case, it can be the same
as a linked list, unless it's balanced.

130
00:07:52.770 --> 00:07:59.385
Once it's balanced, which is what we want,
and which we'll do probably tomorrow,

131
00:07:59.385 --> 00:08:03.513
it preserves

132
00:08:03.513 --> 00:08:08.610
our desired time complexity,
which is log in.

