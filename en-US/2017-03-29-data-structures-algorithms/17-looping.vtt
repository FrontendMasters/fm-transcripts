WEBVTT

1
00:00:00.150 --> 00:00:01.720
&gt;&gt; off screen female: And your template.

2
00:00:01.720 --> 00:00:07.300
What context to you want to put the looper
variable or the count variable in?

3
00:00:07.300 --> 00:00:09.720
So like if not global

4
00:00:09.720 --> 00:00:12.210
where would that fit in your-
&gt;&gt; Bianca Gandolfo: Yeah.

5
00:00:12.210 --> 00:00:14.360
Okay.
&gt;&gt; off screen female: Yeah.

6
00:00:14.360 --> 00:00:15.200
&gt;&gt; Bianca Gandolfo: Perfect segue

7
00:00:15.200 --> 00:00:16.440
into our next topic.

8
00:00:17.860 --> 00:00:19.990
So here is the loop, right.

9
00:00:19.990 --> 00:00:22.860
This is a function called loopNTimes.

10
00:00:22.860 --> 00:00:28.280
We just pass an n and if you're going to
keep track of that counter, you keep track

11
00:00:28.280 --> 00:00:33.560
of it here, n-1, n+2, however you
want to do it, bypassing it through.

12
00:00:35.630 --> 00:00:39.790
Cool, okay.

13
00:00:41.600 --> 00:00:46.102
So, I'm gonna just go through this to make
sure we're all super solid on recursion,

14
00:00:46.102 --> 00:00:50.240
because tomorrow,

15
00:00:50.240 --> 00:00:55.280
we're gonna be applying
this o lots of cool stuff.

16
00:00:55.280 --> 00:00:58.010
Okay, so here we have loopNTimes.

17
00:00:58.010 --> 00:01:02.711
We are going to call it and
then I'm gonna pass

18
00:01:02.711 --> 00:01:07.050
the mic to the audience, so be prepared.

19
00:01:07.050 --> 00:01:13.680
You need to tell me what's gonna happen
next and I will do it on the screen.

20
00:01:13.680 --> 00:01:14.630
Cool?

21
00:01:14.630 --> 00:01:16.530
Okay, who wants to help me out?

22
00:01:16.530 --> 00:01:19.840
Who is a very helpful person and
likes to be helpful?

23
00:01:19.840 --> 00:01:22.110
Thanks Andy!
&gt;&gt; off screen male: Sure, anytime.

24
00:01:22.110 --> 00:01:23.920
So the first time,

25
00:01:23.920 --> 00:01:27.360
it will console dot log N equals three.
&gt;&gt; Bianca Gandolfo: Well, what's the very,

26
00:01:27.360 --> 00:01:29.660
very first thing that's gonna happen?
&gt;&gt; off screen male: The very,

27
00:01:29.660 --> 00:01:33.360
very first thing?

28
00:01:33.360 --> 00:01:34.980
You'll call it.
&gt;&gt; Bianca Gandolfo: Yup and

29
00:01:34.980 --> 00:01:37.818
it will pass three, right?
&gt;&gt; off screen male: Yes.

30
00:01:37.818 --> 00:01:38.609
&gt;&gt; Bianca Gandolfo: Cool and

31
00:01:38.609 --> 00:01:42.465
then you can go from there.
&gt;&gt; off screen male: So

32
00:01:42.465 --> 00:01:46.731
you'll call it passing in
3 at console.log and =3,

33
00:01:46.731 --> 00:01:51.560
3 is not less than or =1, so
it will not return complete.

34
00:01:51.560 --> 00:01:57.634
What it will do is call itself on 3- 1 or

35
00:01:57.634 --> 00:02:03.380
2, in layman's terms.
&gt;&gt; Bianca Gandolfo: Cool,

36
00:02:03.380 --> 00:02:06.710
all right, who wants to go next?

37
00:02:06.710 --> 00:02:09.450
Yeah, okay.
&gt;&gt; off screen female: Okay, so

38
00:02:09.450 --> 00:02:14.231
now it'll be called with 2.
&gt;&gt; Bianca Gandolfo: It's

39
00:02:14.231 --> 00:02:16.209
gonna be called with 2?
&gt;&gt; off screen female: Yep.

40
00:02:16.209 --> 00:02:17.005
&gt;&gt; Bianca Gandolfo: Okay, so

41
00:02:17.005 --> 00:02:19.599
I'm gonna put it on our stack.

42
00:02:21.050 --> 00:02:24.642
And just to note, there's a return
statement here but we're not there yet,

43
00:02:24.642 --> 00:02:25.478
just to be clear.

44
00:02:25.478 --> 00:02:27.730
Because I think this confuses
some people sometimes.

45
00:02:27.730 --> 00:02:29.640
But yeah, so n equals 2.

46
00:02:29.640 --> 00:02:36.690
So n will console log with 2 and
it still isn't less than or equal to 1.

47
00:02:36.690 --> 00:02:41.390
So we won't return complete yet,
we'll go around for another time, cool.

48
00:02:41.390 --> 00:02:42.660
All right who's next?

49
00:02:42.660 --> 00:02:45.422
I think Miranda wants to go.

50
00:02:45.422 --> 00:02:46.535
&gt;&gt; off screen female: Hopefully.
&gt;&gt; off screen male: One

51
00:02:46.535 --> 00:02:47.603
&gt;&gt; off screen female: [LAUGH] So

52
00:02:47.603 --> 00:02:52.487
it'll call itself with n minus 1, or

53
00:02:52.487 --> 00:02:57.259
1, 2 minus 1, 1, yeah.
&gt;&gt; Bianca Gandolfo: Mm hm.

54
00:02:57.259 --> 00:02:59.458
&gt;&gt; off screen female: And then we'll log

55
00:02:59.458 --> 00:03:05.377
with 1, if, is less than or
equal to one over two.

56
00:03:05.377 --> 00:03:09.510
So we'll return complete.
&gt;&gt; Bianca Gandolfo: Return complete.

57
00:03:09.510 --> 00:03:11.960
Yeah, absolutely.

58
00:03:11.960 --> 00:03:16.400
And what that aslo means is that we
will not move forward in this function.

59
00:03:17.450 --> 00:03:20.590
So once we return, the next thing,

60
00:03:20.590 --> 00:03:24.410
the thing that we have to do is,
we have to pop this off the star.

61
00:03:24.410 --> 00:03:28.400
So here we go, just gonna delete it and
that's our pop.

62
00:03:28.400 --> 00:03:30.030
Everyone clear on how this works?

63
00:03:31.530 --> 00:03:36.535
Okay, so I pop it off and this returns us

64
00:03:36.535 --> 00:03:42.840
complete, right, in a string, great.

65
00:03:42.840 --> 00:03:46.520
So basically and so this return statement
is going to return whatever this returns.

66
00:03:49.310 --> 00:03:50.560
So it's going to return complete.

67
00:03:53.080 --> 00:03:56.755
Pop it off the stack,
because this function is done.

68
00:03:56.755 --> 00:04:02.126
This returns complete again,
return statement

69
00:04:02.126 --> 00:04:06.973
is just gonna return
whatever this function

70
00:04:06.973 --> 00:04:12.090
loopNTimes returns and
so returns complete.

71
00:04:12.090 --> 00:04:15.946
We pop it off and

72
00:04:15.946 --> 00:04:20.100
then we have here

73
00:04:20.100 --> 00:04:27.318
complete.
&gt;&gt; Bianca Gandolfo: Cool, so

74
00:04:27.318 --> 00:04:34.620
if someone sum up in their own
words how this process works?

75
00:04:36.430 --> 00:04:37.270
Someone who hasn't talked yet.

76
00:04:37.270 --> 00:04:39.676
But if no one says anything
then I'm gonna call on Abby.

77
00:04:41.289 --> 00:04:41.845
&gt;&gt; Bianca Gandolfo: Just like

78
00:04:41.845 --> 00:04:45.180
what is your, if you had to summarize or
just would have,

79
00:04:45.180 --> 00:04:49.940
maybe you have sort of like a concept
in your mind of how this works?

80
00:04:49.940 --> 00:04:51.970
A picture or
something if you're a visual person.

81
00:04:53.340 --> 00:04:56.240
Can you share that with me,
with the group?

82
00:04:56.240 --> 00:04:58.270
This helps everyone here just
sort of deepen our knowledge,

83
00:04:58.270 --> 00:05:01.100
it helps me know what's going
on in your head, as well.

84
00:05:01.100 --> 00:05:05.720
And I can clarify any confusions, because
it's important to make sure we have

85
00:05:05.720 --> 00:05:09.924
this solid before we move on tomorrow,
when it gets a little trickier.

86
00:05:09.924 --> 00:05:11.036
Yeah?
&gt;&gt; off screen male: Can I actually

87
00:05:11.036 --> 00:05:12.040
ask a question first?
&gt;&gt; Bianca Gandolfo: Sure.

88
00:05:13.250 --> 00:05:14.504
&gt;&gt; off screen male: What happens to

89
00:05:14.504 --> 00:05:18.340
the string complete?
&gt;&gt; Bianca Gandolfo: What do you mean?

90
00:05:18.340 --> 00:05:19.410
&gt;&gt; off screen male: So I'm just looking

91
00:05:19.410 --> 00:05:21.370
at it in the console and
it just gets down to one.

92
00:05:21.370 --> 00:05:24.810
But it never Like,
where does complete go I guess?

93
00:05:24.810 --> 00:05:27.200
Is it just saved for
whatever function it goes to next,

94
00:05:27.200 --> 00:05:28.630
is that?
&gt;&gt; Bianca Gandolfo: Yeah,

95
00:05:28.630 --> 00:05:29.410
that's a great question.

96
00:05:29.410 --> 00:05:31.637
So what happens, here,

97
00:05:31.637 --> 00:05:36.137
let me just put us back where we were.
&gt;&gt; Bianca Gandolfo: So

98
00:05:36.137 --> 00:05:41.859
since it's basically anything that's being
returned is gonna return to the next up.

99
00:05:43.100 --> 00:05:46.890
And so, this function here is
the next one that's up, right?

100
00:05:46.890 --> 00:05:47.761
&gt;&gt; off screen female: I get that I just

101
00:05:47.761 --> 00:05:50.353
mean at the very end.
&gt;&gt; Bianca Gandolfo: Mm-hm.

102
00:05:50.353 --> 00:05:51.832
&gt;&gt; off screen male: If it's returned,

103
00:05:51.832 --> 00:05:54.650
it doesn't print int he console.
&gt;&gt; off screen female: It doesn't

104
00:05:54.650 --> 00:05:55.840
print in the console, but

105
00:05:55.840 --> 00:05:58.350
it's stored somewhere, right?
&gt;&gt; Bianca Gandolfo: Yeah.

106
00:05:58.350 --> 00:06:00.610
It's stored in the scope of the function.
&gt;&gt; off screen male: Okay.

107
00:06:00.610 --> 00:06:01.390
&gt;&gt; Bianca Gandolfo: So it's private in

108
00:06:01.390 --> 00:06:02.230
there, yeah.

109
00:06:03.430 --> 00:06:08.260
Yeah, you can keep track of it by
console.logging instead of returning.

110
00:06:09.480 --> 00:06:16.810
Or doing both maybe if you wanted.
&gt;&gt; Bianca Gandolfo: Cool, okay.

111
00:06:16.810 --> 00:06:21.723
So I am still waiting for someone to just
give me a summary of this process that we

112
00:06:21.723 --> 00:06:26.189
went through in like kind of drawing
out and mapping out these recursive

113
00:06:26.189 --> 00:06:31.474
calls.
&gt;&gt; off screen female: I

114
00:06:31.474 --> 00:06:35.722
guess it the function
that calls itself until

115
00:06:35.722 --> 00:06:39.837
a specific condition is met.
&gt;&gt; Bianca Gandolfo: Yeah, yeah and

116
00:06:39.837 --> 00:06:42.900
then what happens when
that condition is met?

117
00:06:44.480 --> 00:06:47.462
&gt;&gt; off screen female: It removes itself

118
00:06:47.462 --> 00:06:52.473
from the stack, right?
&gt;&gt; Bianca Gandolfo: Yeah,

119
00:06:52.473 --> 00:06:58.180
so well, once the function
on the stack Has completed,

120
00:06:58.180 --> 00:07:01.700
it just hops off the stack and
then it goes to the next one,

121
00:07:02.940 --> 00:07:07.750
all the way up to the top.
&gt;&gt; off screen female: It

122
00:07:07.750 --> 00:07:12.930
sounds like you roll your snowball down
the hill and it accumulates as it goes?

123
00:07:12.930 --> 00:07:17.330
At the end, you just sort of whip
the snowball back to where you started.

124
00:07:17.330 --> 00:07:19.156
Well, I think you rewind
the video [CROSSTALK], [LAUGH].

125
00:07:19.156 --> 00:07:20.814
[LAUGH]
&gt;&gt; Bianca Gandolfo: Yeah, yeah,

126
00:07:20.814 --> 00:07:21.560
yeah, exactly.

127
00:07:21.560 --> 00:07:27.900
I think of it more as like, you throw
the snowball up on top of the hill and

128
00:07:27.900 --> 00:07:29.880
then it starts rolling down kind of,
you know what I mean?

129
00:07:29.880 --> 00:07:32.000
Because, or
you go all the to the bottom and

130
00:07:32.000 --> 00:07:34.220
it rolls backwards against gravity or
something.

131
00:07:34.220 --> 00:07:36.890
Because it's really going all the way,
all the way, all the way down and

132
00:07:36.890 --> 00:07:39.910
then it goes back up,
does that make sense?

133
00:07:39.910 --> 00:07:41.710
Totally.
&gt;&gt; [INAUDIBLE]

134
00:07:41.710 --> 00:07:42.560
&gt;&gt; Bianca Gandolfo: Yeah, exactly,

135
00:07:42.560 --> 00:07:44.360
I think that's the most plausible example

136
00:07:45.500 --> 00:07:49.250
in my world, that's how my world works.
&gt;&gt; off screen male: I guess what I would

137
00:07:49.250 --> 00:07:54.600
say is usually try to solve a hard problem
by splitting it into simpler problems and

138
00:07:54.600 --> 00:07:59.560
if the simpler problem is similar to the
original problem Then that's a recursive

139
00:08:00.610 --> 00:08:01.780
situation.
&gt;&gt; Bianca Gandolfo: Yeah, yeah.

140
00:08:01.780 --> 00:08:02.660
Totally.

141
00:08:02.660 --> 00:08:06.070
So we'll see,
especially starting tomorrow,

142
00:08:06.070 --> 00:08:10.630
exactly what David is talking about here.

143
00:08:10.630 --> 00:08:14.560
The whole core of recursion is

144
00:08:14.560 --> 00:08:18.010
just the same procedure on smaller and
smaller bits.

145
00:08:18.010 --> 00:08:21.540
And it could save us a lot of time
when we talk about fast algorithms.

146
00:08:21.540 --> 00:08:24.250
Some of them can save us a lot of time.

147
00:08:24.250 --> 00:08:27.660
So, that's kind of cool.

148
00:08:28.830 --> 00:08:33.366
We like fast algorithms because that
means we can do more cool stuff.

149
00:08:33.366 --> 00:08:37.930
All right, we're good?
&gt;&gt; Bianca Gandolfo: So,

150
00:08:37.930 --> 00:08:42.842
if I was a teacher
Hypothetically [LAUGH] I gave

151
00:08:42.842 --> 00:08:46.994
you a test tomorrow and was like, hm.

152
00:08:46.994 --> 00:08:52.068
How does [LAUGH] recursion,
can you solve, can you loop in

153
00:08:52.068 --> 00:08:57.544
with recursion,
&gt;&gt; Bianca Gandolfo: What

154
00:08:57.544 --> 00:09:00.280
grade would you give yourself?

155
00:09:00.280 --> 00:09:03.400
What grade do you think I would give you?
&gt;&gt; off screen male: Out of

156
00:09:03.400 --> 00:09:06.100
what?
&gt;&gt; Bianca Gandolfo: Out of A through

157
00:09:06.100 --> 00:09:07.885
C.
&gt;&gt; off screen male: Okay.

158
00:09:07.885 --> 00:09:09.370
[LAUGH]
&gt;&gt; Bianca Gandolfo: There's no failing

159
00:09:09.370 --> 00:09:09.890
grades here.

160
00:09:15.920 --> 00:09:16.440
A through C.

161
00:09:16.440 --> 00:09:17.190
Anyone?

162
00:09:17.190 --> 00:09:17.770
Here you can do it.

163
00:09:17.770 --> 00:09:21.079
This is A, B and C.

164
00:09:21.079 --> 00:09:24.620
It's okay I'm not actually going to
give you a test or anything like that.

165
00:09:24.620 --> 00:09:25.390
I'm just taking a,

166
00:09:25.390 --> 00:09:28.740
I just wanna see where you're at, so
I can talk a lot more about this.

167
00:09:28.740 --> 00:09:31.740
Or, we can get going.

168
00:09:31.740 --> 00:09:34.220
It's really up to you, so.
&gt;&gt; off screen male: Is the test to write

169
00:09:34.220 --> 00:09:38.850
a recursive function from scratch?
&gt;&gt; Bianca Gandolfo: If I said hey,

170
00:09:38.850 --> 00:09:43.120
can you loop n times and
write the loop n times specific function.

171
00:09:44.750 --> 00:09:45.760
Yes, you guys are good.

172
00:09:45.760 --> 00:09:47.010
Awesome, great.

