WEBVTT

1
00:00:00.280 --> 00:00:05.154
&gt;&gt; Bianca Gandolfo: Let's get picture of
our adjacency list for reference, okay.

2
00:00:05.154 --> 00:00:08.513
We're just gonna say, myGraph, right.

3
00:00:11.387 --> 00:00:12.590
&gt;&gt; Bianca Gandolfo: Equal some new graph.

4
00:00:15.050 --> 00:00:17.726
And then let's just pretend we do all
the operations to build our graph.

5
00:00:21.025 --> 00:00:23.720
&gt;&gt; Bianca Gandolfo: Let's
move this like this.

6
00:00:23.720 --> 00:00:26.150
We're gonna move this like this.

7
00:00:26.150 --> 00:00:26.650
All right.

8
00:00:28.100 --> 00:00:32.355
So now we have myGraph,
and we're gonna run

9
00:00:32.355 --> 00:00:38.002
myGraph.traverseDepthFirst,
traverseDepthFirst.

10
00:00:41.812 --> 00:00:42.824
&gt;&gt; Bianca Gandolfo: Just like this.

11
00:00:46.432 --> 00:00:50.225
&gt;&gt; Bianca Gandolfo: Cool, and let's do it.

12
00:00:53.390 --> 00:00:54.820
&gt;&gt; Bianca Gandolfo: Actually,
let's give it a value.

13
00:00:54.820 --> 00:00:58.110
We'll start with 1, and
then we'll have some function,

14
00:00:59.600 --> 00:01:04.650
we'll just call it foo,
cuz I'm not creative at all.

15
00:01:04.650 --> 00:01:06.141
Okay, here we go.

16
00:01:08.439 --> 00:01:11.328
&gt;&gt; Bianca Gandolfo: All right,
I'm gonna skip this to save us some space.

17
00:01:14.086 --> 00:01:15.950
&gt;&gt; Bianca Gandolfo: And
we're gonna copy this.

18
00:01:17.080 --> 00:01:25.620
So the first time we come in here we're
gonna initialize visited to an empty.

19
00:01:25.620 --> 00:01:29.100
It's gonna be initialized cuz
we haven't passed visited.

20
00:01:29.100 --> 00:01:30.237
We're checking here if we have passed it.

21
00:01:30.237 --> 00:01:35.536
Since we haven't, it's gonna be empty.

22
00:01:35.536 --> 00:01:39.110
The distance is gonna start off at 0,
cuz it's our very first one.

23
00:01:40.340 --> 00:01:41.770
We're gonna call our function on there.

24
00:01:41.770 --> 00:01:46.260
And let's just say we're gonna
console.log, the value of something.

25
00:01:47.670 --> 00:01:50.200
And it's just gonna log one.

26
00:01:50.200 --> 00:01:53.410
Good to go, now visited value equals true.

27
00:01:53.410 --> 00:01:57.290
So what that's gonna look like is this,
right?

28
00:01:57.290 --> 00:02:02.399
Our value is 1, we're setting it as true
and that's what visited now looks like.

29
00:02:03.630 --> 00:02:06.110
Okay, so now we're gonna do this forEach.

30
00:02:06.110 --> 00:02:07.020
We're gonna loop through.

31
00:02:08.460 --> 00:02:11.810
And the way that forEach works is

32
00:02:11.810 --> 00:02:15.040
it's gonna loop through
each item in a collection.

33
00:02:15.040 --> 00:02:18.460
In this case,
our collection could be an array.

34
00:02:18.460 --> 00:02:20.920
And I think, yeah,
it's an array in this implementation.

35
00:02:20.920 --> 00:02:27.380
So for each element in our array,
we're going to run this function.

36
00:02:27.380 --> 00:02:30.005
And we're gonna call that element,
neighbor, right?

37
00:02:30.005 --> 00:02:35.015
And the reason we're calling it neighbor
is because this is our adjacency list.

38
00:02:35.015 --> 00:02:39.326
So everything in our adjacency
list is considered a neighbor.

39
00:02:39.326 --> 00:02:46.518
So for 1 in our adjacency
list we have 2 and 3, and

40
00:02:46.518 --> 00:02:52.800
in this for-each loop we're going to be
looping first through 2, right here, okay?

41
00:02:54.250 --> 00:02:56.494
So, here we go.

42
00:02:56.494 --> 00:03:02.202
First we're gonna check
if it's been visited,

43
00:03:02.202 --> 00:03:07.782
so for
the neighbors we're saying visited 2.

44
00:03:07.782 --> 00:03:10.341
And this is gonna return what?

45
00:03:13.716 --> 00:03:14.732
&gt;&gt; Bianca Gandolfo: Undefined.

46
00:03:16.681 --> 00:03:18.800
&gt;&gt; Bianca Gandolfo: Cuz we haven't
visited yet, it doesn't exist.

47
00:03:18.800 --> 00:03:24.000
So since it returned undefined,
woah, craziness.

48
00:03:24.000 --> 00:03:27.940
Since it returned undefined,
we're not gonna enter into this.

49
00:03:29.000 --> 00:03:31.560
We're going to traverse.

50
00:03:33.250 --> 00:03:39.400
So here, this is referring
to our entire graph, right?

51
00:03:40.980 --> 00:03:42.660
So we're gonna traverse.

52
00:03:42.660 --> 00:03:44.450
We're gonna pass 2.

53
00:03:44.450 --> 00:03:46.090
So here's our recursion.

54
00:03:46.090 --> 00:03:50.800
So we're going to paste
our entire internals over.

55
00:03:53.558 --> 00:03:54.306
&gt;&gt; Bianca Gandolfo: Cool.

56
00:03:54.306 --> 00:04:01.812
So the things that we're passing, we're
passing neighbor, 2, our function, foo.

57
00:04:01.812 --> 00:04:07.620
And then visited which is our object,
right.

58
00:04:07.620 --> 00:04:08.530
That what's it looks like.

59
00:04:09.680 --> 00:04:12.070
And then our distance plus 1, which is 1.

60
00:04:13.160 --> 00:04:17.531
Okay, so those are things we're
tracking for each recursive call.

61
00:04:17.531 --> 00:04:18.346
And here we go.

62
00:04:18.346 --> 00:04:22.580
Visited, we're gonna either pass it or
set it.

63
00:04:22.580 --> 00:04:25.176
Since we passed it,
this is what visited looks like.

64
00:04:27.162 --> 00:04:29.632
&gt;&gt; Bianca Gandolfo: Distance
is now gonna be 1.

65
00:04:29.632 --> 00:04:36.217
We're gonna call our function or whatever,
and maybe that's gonna console.log, 2.

66
00:04:36.217 --> 00:04:39.950
We're just imagining that's what foo does,
it could do anything.

67
00:04:39.950 --> 00:04:47.950
And then now we're going to add
a new element to our visited object.

68
00:04:47.950 --> 00:04:49.517
So now the current value is what?

69
00:04:54.253 --> 00:04:56.560
&gt;&gt; Bianca Gandolfo: 2, absolutely.

70
00:04:56.560 --> 00:04:57.899
So our current value is 2.

71
00:04:59.440 --> 00:05:02.290
So we're gonna add it, and
we're gonna set it as true.

72
00:05:02.290 --> 00:05:04.755
And now you can see how it's
kind of like bread crumbs,

73
00:05:04.755 --> 00:05:07.940
cuz you're remembering where
you've been previously.

74
00:05:12.830 --> 00:05:14.910
Cool.
So this, right,

75
00:05:14.910 --> 00:05:16.130
is still gonna be our graph.

76
00:05:18.750 --> 00:05:20.220
And then here's our node list values.

77
00:05:20.220 --> 00:05:23.210
So we're looking at 2's adjacency list and

78
00:05:23.210 --> 00:05:26.287
looping through it with this forEach,
okay?

79
00:05:26.287 --> 00:05:32.036
And each neighbor is gonna be one
element in forEach's array, or

80
00:05:32.036 --> 00:05:38.212
if it's a linked list or whatever,
however you're going to save it.

81
00:05:38.212 --> 00:05:42.891
In this case we're using an array, okay.

82
00:05:42.891 --> 00:05:48.211
So the first thing we're
gonna do is we're gonna

83
00:05:48.211 --> 00:05:56.137
see if that neighbor has been visited
by checking in our visited object.

84
00:05:56.137 --> 00:05:58.680
And the first neighbor of 2 is 4.

85
00:06:01.600 --> 00:06:02.460
Has it been visited?

86
00:06:02.460 --> 00:06:04.420
No, cuz it's not here yet.

87
00:06:04.420 --> 00:06:10.250
So, if we look up visited 4,
it's just gonna return undefined, right?

88
00:06:13.260 --> 00:06:15.106
So that's gonna be false, and

89
00:06:15.106 --> 00:06:18.950
we're going to then traverse
because it hasn't been visited.

