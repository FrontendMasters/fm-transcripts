WEBVTT

1
00:00:00.210 --> 00:00:02.970
&gt;&gt; Bianca Gandolfo: So
we're gonna check out our next divide and

2
00:00:02.970 --> 00:00:05.190
conquer sorting algorithm.

3
00:00:05.190 --> 00:00:09.820
It's called quick sort, it's one of the
more famous sorting algorithms out there.

4
00:00:12.000 --> 00:00:14.780
You guys ready, ready to jump in?

5
00:00:15.910 --> 00:00:20.960
So just a reminder, when we say divide and
conquer we have aA few basic steps.

6
00:00:20.960 --> 00:00:22.820
The first one,
we have to always find our base case.

7
00:00:22.820 --> 00:00:30.510
2, we're gonna break our
problem down during each loop.

8
00:00:30.510 --> 00:00:31.580
Conquer, do the work.

9
00:00:32.590 --> 00:00:33.515
And 3, combine.

10
00:00:33.515 --> 00:00:37.917
So with quick sort, or with merge sort,

11
00:00:37.917 --> 00:00:43.880
all of the work is happening
on the combination piece.

12
00:00:43.880 --> 00:00:47.400
With quick sort we actually
skip the combination part

13
00:00:47.400 --> 00:00:51.780
because we're doing an in place operation.

14
00:00:51.780 --> 00:00:57.110
And all of the action happens on
the partition, which is the splitting.

15
00:01:00.927 --> 00:01:02.666
&gt;&gt; Bianca Gandolfo: Cool, so in essence,

16
00:01:02.666 --> 00:01:08.069
what we're doing with a quick sort
is we're choosing a pivot point and

17
00:01:08.069 --> 00:01:12.374
with everything,
usually it's either the first one or

18
00:01:12.374 --> 00:01:16.880
the last one, the last element in array,
we choose that.

19
00:01:16.880 --> 00:01:20.120
Here, let me have my picture for you.

20
00:01:20.120 --> 00:01:21.030
We choose our pivot point.

21
00:01:21.030 --> 00:01:23.540
So here we're choosing 4,
which is the end of our array.

22
00:01:23.540 --> 00:01:32.260
And we're going to swap out all of
the elements that are larger to the right.

23
00:01:33.410 --> 00:01:36.210
And all of them that are less
are gonna be to the left.

24
00:01:36.210 --> 00:01:40.094
And so what happens when we loop
through here and we swap them,

25
00:01:40.094 --> 00:01:44.360
4 is gonna be in its final place
where it's supposed to be, right?

26
00:01:44.360 --> 00:01:47.540
Does that make sense?

27
00:01:47.540 --> 00:01:51.020
So as we move all of the higher ones.

28
00:01:51.020 --> 00:01:55.719
So 7 would go there, then 5, 9,

29
00:01:55.719 --> 00:02:00.280
and 8, and then 5, right?

30
00:02:00.280 --> 00:02:01.790
The very last one.

31
00:02:01.790 --> 00:02:07.490
Then 4 is gonna be here, and
that's its final position in the array.

32
00:02:08.600 --> 00:02:09.510
You see that?

33
00:02:09.510 --> 00:02:12.480
Even though everything else is
out of order, the pivot point

34
00:02:13.640 --> 00:02:17.680
is now the partition,
which is its final point.

35
00:02:17.680 --> 00:02:18.740
So that's sorted.

36
00:02:18.740 --> 00:02:21.800
Wherever it winds up is
the sorted part of the array.

37
00:02:21.800 --> 00:02:23.817
In the bigger array, right?

38
00:02:23.817 --> 00:02:26.750
We're not sorted arrays of size one.

39
00:02:26.750 --> 00:02:31.500
We're talking about it has found
its final place in the big array.

40
00:02:31.500 --> 00:02:34.140
And all this is taking place in place.

41
00:02:34.140 --> 00:02:38.140
Unlike merge sort where we are creating
new arrays and then merging them together.

42
00:02:38.140 --> 00:02:40.630
Does that make sense?

43
00:02:42.640 --> 00:02:47.775
Cool, so
once we find the final place for our 4,

44
00:02:47.775 --> 00:02:56.530
we are then gonna recursively partition
the right side and the left side.

45
00:02:56.530 --> 00:03:01.930
So just like we did with the 4, we're
going to choose maybe on the left side

46
00:03:01.930 --> 00:03:06.240
the last one, and then we're gonna
swap it until it has its final place.

47
00:03:07.840 --> 00:03:11.390
Same thing on the right, we have quite a
few more here, so a little few more steps.

48
00:03:11.390 --> 00:03:16.277
So 7, we get 7 into its final place,
we split it,

49
00:03:16.277 --> 00:03:20.570
we split it again to the partition.

50
00:03:20.570 --> 00:03:26.210
And then it's all in its final place,
cuz again, we're all doing this in place.

51
00:03:26.210 --> 00:03:27.610
So we don't have to merge it or
combine it,

52
00:03:27.610 --> 00:03:31.469
that's why there's no combination step.
&gt;&gt; Bianca Gandolfo: Does that make

53
00:03:31.469 --> 00:03:35.335
sense?
&gt;&gt; Bianca Gandolfo: Brains exploding

54
00:03:35.335 --> 00:03:36.020
a little bit?

55
00:03:37.030 --> 00:03:38.260
Quick sort's kind of a crazy one.

