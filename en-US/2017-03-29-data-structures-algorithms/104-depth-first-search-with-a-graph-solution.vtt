WEBVTT

1
00:00:00.146 --> 00:00:06.060
&gt;&gt; Bianca Gandolfo: We are going to
quickly, quickly, quickly go over depth

2
00:00:06.060 --> 00:00:11.370
for search and breath for
a search with our graphs.

3
00:00:11.370 --> 00:00:13.700
And then we're gonna jump
in the harsh tables and

4
00:00:13.700 --> 00:00:17.990
then we're gonna do a summation
of the entire workshop and

5
00:00:17.990 --> 00:00:23.250
sort out next steps armed with what
you know what's the next battle.

6
00:00:24.270 --> 00:00:28.405
Cool so here's our depth for
search procedure.

7
00:00:28.405 --> 00:00:31.397
So here's the procedure where
we're marking with colors.

8
00:00:31.397 --> 00:00:34.280
So the first one is you
wanna mark this discovered.

9
00:00:35.830 --> 00:00:38.940
And then for
everything that's unvisited visit them.

10
00:00:41.740 --> 00:00:45.505
&gt;&gt; Bianca Gandolfo: And
then mark it as explored once you

11
00:00:45.505 --> 00:00:49.530
have visited all the way down, cool?

12
00:00:49.530 --> 00:00:51.870
So we did some experimental pseudo code.

13
00:00:51.870 --> 00:00:55.530
I left you with some questions
which I'll answer when we explore

14
00:00:55.530 --> 00:00:59.550
the solution, which we'll do now.

15
00:01:01.170 --> 00:01:02.140
Good morning.

16
00:01:03.740 --> 00:01:05.180
Here we go.
&gt;&gt; Speaker 2: Could

17
00:01:05.180 --> 00:01:06.910
you move your mic up a little bit?

18
00:01:06.910 --> 00:01:07.440
&gt;&gt; Bianca Gandolfo: Sure, sure.

19
00:01:07.440 --> 00:01:09.290
&gt;&gt; Speaker 2: Because we're not.

20
00:01:09.290 --> 00:01:09.810
&gt;&gt; Bianca Gandolfo: Better now?

21
00:01:09.810 --> 00:01:10.460
&gt;&gt; Speaker 2: Yep.
&gt;&gt; Bianca Gandolfo: Okay.

22
00:01:12.440 --> 00:01:14.220
So here's our depth for search.

23
00:01:16.320 --> 00:01:20.079
So the first thing we're doing is
catching if there's any errors.

24
00:01:21.250 --> 00:01:26.500
This is saying if the value

25
00:01:26.500 --> 00:01:30.510
doesn't exist in our adjacency list,
we're gonna say it's invalid,

26
00:01:30.510 --> 00:01:35.400
or if the function that we're
passing in is not a function.

27
00:01:35.400 --> 00:01:37.810
The idea here is that our depth for
search.

28
00:01:37.810 --> 00:01:43.380
We're not just exploring it for no reason
we're gonna be passing it a callback and

29
00:01:43.380 --> 00:01:45.430
doing some operation on each node.

30
00:01:47.030 --> 00:01:49.744
&gt;&gt; Bianca Gandolfo: So whether it is
adding exclamation points at the end,

31
00:01:49.744 --> 00:01:52.570
which we talked about when
we were talking about trees.

32
00:01:52.570 --> 00:01:59.520
Or doing some real work, maybe you're
going through and I don't know.

33
00:01:59.520 --> 00:02:02.710
For some reason,
appending all this to the DOM so

34
00:02:02.710 --> 00:02:05.120
that you can see it and
it's not just this abstract concept.

35
00:02:05.120 --> 00:02:09.742
Maybe for each node, you're going to

36
00:02:09.742 --> 00:02:14.363
pin some image with the value, and for

37
00:02:14.363 --> 00:02:21.885
each edge you're gonna paint
a line between those two nodes.

38
00:02:21.885 --> 00:02:27.190
So you can show from
our adjacent c list and

39
00:02:27.190 --> 00:02:33.719
turn it into a data
visualization on the front end.

40
00:02:34.850 --> 00:02:36.350
That could be one reason.

41
00:02:36.350 --> 00:02:37.760
You can also do that with breath for
research.

42
00:02:37.760 --> 00:02:40.890
There's no reason to only do
that with that first search.

43
00:02:40.890 --> 00:02:43.140
Okay, so we're checking, great.

44
00:02:43.140 --> 00:02:46.610
And we're gonna track two things.

45
00:02:46.610 --> 00:02:50.040
Whether it's been visited and
the distance.

46
00:02:50.040 --> 00:02:57.719
So this is how deep we go into
the into the data structure and

47
00:02:57.719 --> 00:03:01.110
we're gonna pass it into
our function everytime for

48
00:03:01.110 --> 00:03:07.248
the cases where the distance is important,
cool?

49
00:03:07.248 --> 00:03:13.120
So, once we have done that
once we have run the function

50
00:03:13.120 --> 00:03:18.280
on it we consider it visited and we set
that flag to true in our visited object.

51
00:03:18.280 --> 00:03:24.090
So here we're just using an object as
I called it the bread crumb method.

52
00:03:24.090 --> 00:03:29.090
Where we're just using it
to see if we have, it's

53
00:03:29.090 --> 00:03:33.660
just a quick look up to see if we
have looked at something before.

54
00:03:33.660 --> 00:03:38.610
And so if you just set it to true in this
object you could just do a quick look up,

55
00:03:38.610 --> 00:03:40.036
just to see if it's been visited.

56
00:03:40.036 --> 00:03:46.180
Cool, make sense, great.

57
00:03:46.180 --> 00:03:48.890
So you could see is where
we're doing that check.

58
00:03:48.890 --> 00:03:50.910
It's just one little line.

59
00:03:50.910 --> 00:03:54.898
If, neighbor has been
visited then you just return.

60
00:03:54.898 --> 00:03:59.720
So, my, something.

61
00:03:59.720 --> 00:04:03.590
I was gonna swear but I stopped myself.

62
00:04:03.590 --> 00:04:05.940
Here is some chain stuff going on.

63
00:04:05.940 --> 00:04:09.730
We are looking through the nodes.

64
00:04:09.730 --> 00:04:10.800
This is our adjacency list, right.

65
00:04:13.320 --> 00:04:16.210
For each of those,
we are going to run this function.

66
00:04:18.480 --> 00:04:19.960
At the end we are passing this.

67
00:04:19.960 --> 00:04:24.241
Which is gonna set our contacts, so

68
00:04:24.241 --> 00:04:29.100
we don't lose that this is our current,

69
00:04:32.687 --> 00:04:37.930
&gt;&gt; Bianca Gandolfo: Node, yeah, okay.

70
00:04:37.930 --> 00:04:41.000
So if we visited it, we are done,

71
00:04:41.000 --> 00:04:44.780
we don't wanna visit things twice cuz
then we could get stuck in loops.

72
00:04:44.780 --> 00:04:49.940
Otherwise we're gonna traverse,
which is our recursive call.

73
00:04:53.700 --> 00:04:58.800
&gt;&gt; Bianca Gandolfo: Cool, I'm gonna do our
thing that we do with the stack, trace.

