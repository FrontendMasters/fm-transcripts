WEBVTT

1
00:00:00.260 --> 00:00:03.260
&gt;&gt; Bianca Gandolfo: So we're gonna
talk about a couple edge cases that

2
00:00:03.260 --> 00:00:04.410
were brought up.

3
00:00:04.410 --> 00:00:07.480
How to account for them and
then we're gonna look at a solution.

4
00:00:07.480 --> 00:00:11.840
And then we're gonna see if we
can optimize our solution and

5
00:00:13.250 --> 00:00:14.990
then we'll keep rolling.

6
00:00:14.990 --> 00:00:19.050
Sound good?
All right, so what David was talking about

7
00:00:19.050 --> 00:00:24.970
before we went and did our exercise,
was what if our minimum is the root?

8
00:00:24.970 --> 00:00:29.400
And so there's two cases where
the minimum is the root and

9
00:00:29.400 --> 00:00:33.181
then it has a right sub-tree.

10
00:00:33.181 --> 00:00:37.970
And then, what about the case
when the minimum is the root and

11
00:00:37.970 --> 00:00:39.930
also the last element in the tree?

12
00:00:39.930 --> 00:00:44.388
Are there any other edge cases that come
to mind, that came to mind when you were

13
00:00:44.388 --> 00:00:53.870
doing these exercises?
&gt;&gt; Bianca Gandolfo: Cool.

14
00:00:56.170 --> 00:00:57.170
All right.

15
00:00:57.170 --> 00:01:02.289
So, for this case, if we were to delete

16
00:01:02.289 --> 00:01:07.426
7,
&gt;&gt; Bianca Gandolfo: What

17
00:01:07.426 --> 00:01:08.680
would we have to do to our tree?

18
00:01:08.680 --> 00:01:11.800
So I wrote out our tree just so we'd
have a reference to what it looks like.

19
00:01:12.980 --> 00:01:18.455
Like, what would we have to
change in this nested object for

20
00:01:18.455 --> 00:01:23.451
it to be correct?
&gt;&gt; Bianca Gandolfo: So

21
00:01:23.451 --> 00:01:27.617
we want.
&gt;&gt; Bianca Gandolfo: Sorry,

22
00:01:27.617 --> 00:01:28.880
that's not what we want.

23
00:01:28.880 --> 00:01:33.700
We want two lined up like this.
&gt;&gt; Student1: All

24
00:01:33.700 --> 00:01:38.540
the pointers aren't filled out.
&gt;&gt; Bianca Gandolfo: It's

25
00:01:38.540 --> 00:01:42.140
just the right pointers are, see?
&gt;&gt; Student2: Tree.

26
00:01:42.140 --> 00:01:43.190
&gt;&gt; Student1: Which one has on

27
00:01:43.190 --> 00:01:44.070
the right tree, not just-

28
00:01:44.070 --> 00:01:44.689
&gt;&gt; Bianca Gandolfo: There's no left.
&gt;&gt; Student1: Right.

29
00:01:46.260 --> 00:01:46.885
&gt;&gt; Bianca Gandolfo: But the right is,

30
00:01:46.885 --> 00:01:48.720
this is the right.
&gt;&gt; Student1: So

31
00:01:48.720 --> 00:01:52.410
then the 8 one would be pointing to 9.
&gt;&gt; Student2: This is the parent.

32
00:01:54.432 --> 00:01:56.141
&gt;&gt; Student1: I get it, I gotcha,

33
00:01:56.141 --> 00:02:01.743
yep.
&gt;&gt; Bianca Gandolfo: Actually

34
00:02:01.743 --> 00:02:08.147
this one would be null.

35
00:02:13.617 --> 00:02:15.520
&gt;&gt; Bianca Gandolfo: Okay, so
we have this tree on the left.

36
00:02:15.520 --> 00:02:21.532
Here it is as an object.
&gt;&gt; Bianca Gandolfo: What

37
00:02:21.532 --> 00:02:24.306
do we want it to look like
after we run a delete method on

38
00:02:24.306 --> 00:02:28.341
it?
&gt;&gt; Student2: Just the second two

39
00:02:28.341 --> 00:02:30.378
lines.
&gt;&gt; Bianca Gandolfo: Yeah, so

40
00:02:30.378 --> 00:02:36.800
we would essentially delete.
&gt;&gt; Bianca Gandolfo: This top one, right?

41
00:02:39.380 --> 00:02:40.302
And we want it to look something like

42
00:02:40.302 --> 00:02:43.345
this.
&gt;&gt; Bianca Gandolfo: But

43
00:02:43.345 --> 00:02:44.520
how do we do that in code?

44
00:02:44.520 --> 00:02:46.780
We can't just delete.

45
00:02:46.780 --> 00:02:50.113
Can we?
&gt;&gt; Bianca Gandolfo: Not like that

46
00:02:50.113 --> 00:02:52.969
at least.
&gt;&gt; Student2: Yeah,

47
00:02:52.969 --> 00:02:56.140
we couldn't really figure out
a way with our implementation.

48
00:02:56.140 --> 00:02:59.036
Because we don't really have
the concept of a root other

49
00:02:59.036 --> 00:03:01.749
than it's the node that you start on.
&gt;&gt; Bianca Gandolfo: Mm

50
00:03:01.749 --> 00:03:05.174
hm.
&gt;&gt; Student2: And we couldn't figure out

51
00:03:05.174 --> 00:03:09.860
a way to.
&gt;&gt; Bianca Gandolfo: Yeah, so

52
00:03:09.860 --> 00:03:15.550
the root is just where it starts, which
is going to be saved in the variable.

53
00:03:15.550 --> 00:03:20.570
So because it starts here, because
the very first value in our object,

54
00:03:20.570 --> 00:03:21.970
let's save into our variable name.

55
00:03:23.190 --> 00:03:27.319
Has the value 7 or 7 is the root.
&gt;&gt; Bianca Gandolfo: So

56
00:03:27.319 --> 00:03:31.829
we'd want it to look like this,

57
00:03:31.829 --> 00:03:40.352
where our very first object in
our nested data structure is,

58
00:03:40.352 --> 00:03:45.698
the 8.
&gt;&gt; Bianca Gandolfo: So

59
00:03:45.698 --> 00:03:52.610
essentially, what I recommend
is to rewrite 7, 7s value to 8.

60
00:03:52.610 --> 00:03:57.785
Change its, overwrite its

61
00:03:57.785 --> 00:04:05.718
right value.
&gt;&gt; Bianca Gandolfo: To 8

62
00:04:05.718 --> 00:04:11.113
dot right.
&gt;&gt; Bianca Gandolfo: That makes sense?

63
00:04:11.113 --> 00:04:12.175
&gt;&gt; Student2: Yes.

64
00:04:12.175 --> 00:04:13.336
&gt;&gt; Student1: You're just overwriting

65
00:04:13.336 --> 00:04:15.668
the value?
&gt;&gt; Bianca Gandolfo: Do you wanna over

66
00:04:15.668 --> 00:04:19.680
write both the value?
&gt;&gt; Student1: I thought we couldn't do

67
00:04:19.680 --> 00:04:20.345
that.
&gt;&gt; Bianca Gandolfo: And

68
00:04:20.345 --> 00:04:23.961
the right.
&gt;&gt; Student2: We tried to do that and

69
00:04:23.961 --> 00:04:26.330
we thought you couldn't do that for
some reason.

70
00:04:26.330 --> 00:04:31.220
Something about the value being, where if
in cases where the value is more complex

71
00:04:31.220 --> 00:04:33.500
or the node held more.
&gt;&gt; Bianca Gandolfo: Yeah, but

72
00:04:33.500 --> 00:04:37.670
in this case, do you have any other
thoughts about how we could do it?

73
00:04:37.670 --> 00:04:39.071
&gt;&gt; Student2: No.

74
00:04:39.071 --> 00:04:40.187
&gt;&gt; Bianca Gandolfo: Anyone else?

75
00:04:44.321 --> 00:04:45.250
&gt;&gt; Bianca Gandolfo: Me either.

76
00:04:45.250 --> 00:04:49.258
[LAUGH] Or I guess the other way
you could do it is simply just

77
00:04:49.258 --> 00:04:54.190
reassign.
&gt;&gt; Bianca Gandolfo: Starting here, right?

78
00:04:55.980 --> 00:05:01.880
So if you said myBst = myBst,

79
00:05:01.880 --> 00:05:04.948
let's see, so

80
00:05:04.948 --> 00:05:10.140
we have to go to dot right,

81
00:05:10.140 --> 00:05:16.754
then we just assign it directly.

82
00:05:16.754 --> 00:05:17.480
Does that make sense?

83
00:05:21.320 --> 00:05:25.860
Any questions?
&gt;&gt; Student2: Can you do that from within?

84
00:05:25.860 --> 00:05:29.160
We tried setting this equal to this dot,
right?

85
00:05:29.160 --> 00:05:31.981
In it, it wouldn't run.

86
00:05:31.981 --> 00:05:35.160
Can you, could we do it at three?

87
00:05:35.160 --> 00:05:39.630
If we had just done variable name
equals variable name that would

88
00:05:41.330 --> 00:05:42.400
work.
&gt;&gt; Bianca Gandolfo: So,

89
00:05:42.400 --> 00:05:44.900
inside the function you
probably want it to be this.

90
00:05:46.720 --> 00:05:48.760
And only for the case when it's the node,

91
00:05:48.760 --> 00:05:51.020
when it's the root node.
&gt;&gt; Student2: Okay, yeah, that-

92
00:05:51.020 --> 00:05:52.000
&gt;&gt; Bianca Gandolfo: Yeah, that make sense?

93
00:05:52.000 --> 00:05:54.152
&gt;&gt; Student2: We got an error when we tried

94
00:05:54.152 --> 00:05:56.680
doing that, it said-
&gt;&gt; Bianca Gandolfo: Just make sure-

95
00:05:56.680 --> 00:05:57.778
&gt;&gt; Student2: Invalid left-hand side in

96
00:05:57.778 --> 00:06:03.033
assignment.
&gt;&gt; Bianca Gandolfo: Yeah, are you

97
00:06:03.033 --> 00:06:05.580
doing it on the prototype and everything?

98
00:06:05.580 --> 00:06:06.800
&gt;&gt; Student2: Yes.
&gt;&gt; Bianca Gandolfo: Okay, I don't know.

99
00:06:06.800 --> 00:06:07.610
&gt;&gt; Student2: The SQL stuff-

100
00:06:07.610 --> 00:06:08.270
&gt;&gt; Bianca Gandolfo: I can look at your

101
00:06:08.270 --> 00:06:09.589
specific error.
&gt;&gt; Student1: Okay.

102
00:06:10.840 --> 00:06:12.205
&gt;&gt; Bianca Gandolfo: Yeah,

103
00:06:12.205 --> 00:06:16.302
you can re-assign.

104
00:06:16.302 --> 00:06:18.345
Okay, questions, comments?

105
00:06:18.345 --> 00:06:26.212
Okay.

106
00:06:26.212 --> 00:06:27.380
So what about this?

107
00:06:27.380 --> 00:06:28.320
What do we do here?

108
00:06:30.130 --> 00:06:35.569
So we wanna delete the minimum, but
we only have one value and because of

109
00:06:35.569 --> 00:06:43.045
that fact, it's also the root.
&gt;&gt; Student2: If

110
00:06:43.045 --> 00:06:46.401
we can re-ascend the value,
we can just say the value equals null.

111
00:06:46.401 --> 00:06:47.199
&gt;&gt; Bianca Gandolfo: Mm hm.

112
00:06:48.330 --> 00:06:49.740
&gt;&gt; Student2: Or if this assignment works,

113
00:06:49.740 --> 00:06:52.948
we could just set so equal to null.
&gt;&gt; Bianca Gandolfo: So

114
00:06:52.948 --> 00:06:57.068
if we said this equals null,
then it would look like this.

115
00:06:57.068 --> 00:07:03.497
Bst, like that.

116
00:07:03.497 --> 00:07:05.713
So both work.

117
00:07:07.720 --> 00:07:09.960
Just depends on what you want
to do next with it, right?

118
00:07:09.960 --> 00:07:12.150
If you just want it to disappear and
you're never going to touch it again?

119
00:07:13.460 --> 00:07:15.840
You know,
it's reasonable to say it's a null.

120
00:07:15.840 --> 00:07:22.780
But if you're going to continue
to add children to this?

121
00:07:22.780 --> 00:07:24.090
Leaves, notes,

122
00:07:24.090 --> 00:07:27.540
then you're going to want to make sure
that you preserve the left and the right.

123
00:07:27.540 --> 00:07:28.940
So that you can continue growing it.

124
00:07:30.990 --> 00:07:33.125
So kill the tree forever,

125
00:07:33.125 --> 00:07:38.765
maybe you wanna use it later,
&gt;&gt; Bianca Gandolfo: Cool?

126
00:07:40.787 --> 00:07:41.484
&gt;&gt; Bianca Gandolfo: All right.

127
00:07:46.059 --> 00:07:46.821
&gt;&gt; Bianca Gandolfo: Here's a quick and

128
00:07:46.821 --> 00:07:51.121
dirty deleteMin.
&gt;&gt; Bianca Gandolfo: So

129
00:07:51.121 --> 00:07:56.278
let's check it out.
&gt;&gt; Bianca Gandolfo: So,

130
00:07:56.278 --> 00:07:59.170
this is the deleteMin,
by the way, not the deleteMax.

131
00:08:00.360 --> 00:08:03.600
So if there's no left and

132
00:08:03.600 --> 00:08:08.340
there's no right and there's a parent.

133
00:08:09.930 --> 00:08:17.160
We simply set the parent left to null,
otherwise we delete the value, right?

134
00:08:17.160 --> 00:08:24.400
And this is for the case where we
want to add nodes later, or whatever.

135
00:08:24.400 --> 00:08:29.080
It preserves the node tree structure,
doesn't delete it forever, or

136
00:08:29.080 --> 00:08:30.140
forever, right?

137
00:08:30.140 --> 00:08:32.417
Sets it to null?

138
00:08:32.417 --> 00:08:39.349
Cool, make sense?
&gt;&gt; Bianca Gandolfo: Otherwise,

139
00:08:39.349 --> 00:08:46.430
if there isn't a left, but
there is a right and there's a parent.

140
00:08:46.430 --> 00:08:49.040
We set the parent's left to its right.

141
00:08:49.040 --> 00:08:53.600
Otherwise we can reassign the value or
just like we talked about

142
00:08:55.500 --> 00:08:59.200
a second ago we could also say this

143
00:09:03.650 --> 00:09:08.760
dot Ew, you're right,
we can't set this to anything.

144
00:09:08.760 --> 00:09:10.210
&gt;&gt; Student1: Yeah you can't.

145
00:09:10.210 --> 00:09:11.090
&gt;&gt; Bianca Gandolfo: So we would be stuck

146
00:09:11.090 --> 00:09:12.500
doing.
&gt;&gt; Student1: That's what

147
00:09:12.500 --> 00:09:13.520
we were stuck on.

148
00:09:13.520 --> 00:09:22.400
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Bianca Gandolfo: Okay.

149
00:09:24.130 --> 00:09:25.190
I'm happy with that solution then.

150
00:09:26.830 --> 00:09:32.790
So, this the only way that you can
assign this is using call and apply.

151
00:09:32.790 --> 00:09:37.220
That's when you can just like choose
what you want this to be, but

152
00:09:37.220 --> 00:09:39.660
you have to do it when you're
invoking the function.

153
00:09:39.660 --> 00:09:42.650
You can't just assign this willy nilly.

154
00:09:42.650 --> 00:09:47.254
You can assign properties to this,
you could say like, this dot xyz,

155
00:09:47.254 --> 00:09:50.390
you could do that, but
you can't override it.

156
00:09:50.390 --> 00:09:51.524
Cool.

157
00:09:51.524 --> 00:09:57.030
Yep, otherwise, we were gonna recurse.
&gt;&gt; Bianca Gandolfo: Cool?

158
00:09:58.440 --> 00:10:00.456
Quick and dirty, straightforward,

159
00:10:00.456 --> 00:10:03.847
very verbose.
&gt;&gt; Bianca Gandolfo: So what if we

160
00:10:03.847 --> 00:10:08.762
want it to just change this to delete max?
&gt;&gt; Bianca Gandolfo: What do we have to

161
00:10:08.762 --> 00:10:14.089
change?
&gt;&gt; Student2: Invert the lefts from

162
00:10:14.089 --> 00:10:19.156
the rights.
&gt;&gt; Bianca Gandolfo: Okay.

163
00:10:19.156 --> 00:10:22.524
Is that it?
&gt;&gt; Student2: Yeah I think

164
00:10:22.524 --> 00:10:26.270
so.
&gt;&gt; Bianca Gandolfo: Uh-oh.

165
00:10:26.270 --> 00:10:27.230
&gt;&gt; Student2: Yeah [LAUGH] I was gonna say,

166
00:10:27.230 --> 00:10:28.641
wow!
You have really good

167
00:10:28.641 --> 00:10:29.628
memory.
&gt;&gt; Bianca Gandolfo: I'm gonna

168
00:10:29.628 --> 00:10:30.190
forget it all.

169
00:10:30.190 --> 00:10:32.486
Okay.
&gt;&gt; Bianca Gandolfo: Okay,

170
00:10:32.486 --> 00:10:36.793
now I'm remembering.

171
00:10:45.887 --> 00:10:48.835
&gt;&gt; Bianca Gandolfo: And
you're gonna see how this.left.left works.

172
00:10:48.835 --> 00:10:54.973
It works because it's a nested tree.
&gt;&gt; Bianca Gandolfo: Double-check me here,

173
00:10:54.973 --> 00:10:58.315
folks.
&gt;&gt; Student1: Also, if not this and

174
00:10:58.315 --> 00:11:02.452
this, there you go.
&gt;&gt; Bianca Gandolfo: That's

175
00:11:02.452 --> 00:11:10.900
all.
&gt;&gt; Bianca Gandolfo: Cool.

176
00:11:10.900 --> 00:11:11.958
Run the code in your mind.

177
00:11:11.958 --> 00:11:15.302
So, if it has

178
00:11:15.302 --> 00:11:20.951
a right
&gt;&gt; Bianca Gandolfo: Where's our

179
00:11:20.951 --> 00:11:26.214
slides?
&gt;&gt; Bianca Gandolfo: Let's

180
00:11:26.214 --> 00:11:28.166
look at our picture.

181
00:11:28.166 --> 00:11:33.530
So let's say we're deleting 25.

182
00:11:33.530 --> 00:11:39.179
So we say if there's a right, we're gonna
go all the way down right, right, right.

183
00:11:40.860 --> 00:11:47.330
So if there's no children, there's
a parent, so we're setting to null.

184
00:11:47.330 --> 00:11:49.700
So leaf works great.

185
00:11:49.700 --> 00:11:54.180
So let's say we don't have 25 and
we're doing 20.

186
00:11:54.180 --> 00:11:58.401
Pass it in, [SOUND] all the way through.

187
00:11:58.401 --> 00:12:02.077
It doesn't have a right and it has a left.

188
00:12:02.077 --> 00:12:03.210
It does have a parent.

189
00:12:03.210 --> 00:12:06.778
So we say parent dot right
equals this dot left.

190
00:12:06.778 --> 00:12:07.906
Cool.

191
00:12:07.906 --> 00:12:10.260
Sounds good.

192
00:12:10.260 --> 00:12:12.881
Sure, question?
&gt;&gt; Student3: What is this value

193
00:12:12.881 --> 00:12:15.418
is equal to now do?
&gt;&gt; Bianca Gandolfo: You have to say

194
00:12:15.418 --> 00:12:19.360
that one more time and
not have your hand in front of your mouth.

195
00:12:19.360 --> 00:12:22.324
&gt;&gt; Student3: What's not in the else

196
00:12:23.416 --> 00:12:26.410
this.value is null.

197
00:12:26.410 --> 00:12:32.310
Yeah, what does it do?
&gt;&gt; Bianca Gandolfo: So this is if a,

198
00:12:33.560 --> 00:12:39.770
if the root,
if the max value is the last node.

199
00:12:39.770 --> 00:12:41.199
So there's no more nodes in this tree.

200
00:12:42.340 --> 00:12:46.210
So we're just deleting this one node and
imagining there's no other nodes here.

201
00:12:48.130 --> 00:12:51.350
So for a tree of size one, what do you do?

202
00:12:51.350 --> 00:12:54.290
You just set that value to null and

203
00:12:54.290 --> 00:12:58.279
it's just an empty tree at that point.
&gt;&gt; Student3: And

204
00:12:58.279 --> 00:13:02.630
then you can [INAUDIBLE] statement.
&gt;&gt; Bianca Gandolfo: Yeah, so this is for

205
00:13:02.630 --> 00:13:06.640
the case that there is,

206
00:13:09.050 --> 00:13:12.410
so this is for, let's see.

207
00:13:13.780 --> 00:13:21.098
So the max val is the root with a subtree.
&gt;&gt; Bianca Gandolfo: So,

208
00:13:21.098 --> 00:13:27.218
where is our, so
this is the case that we're counting for.

209
00:13:27.218 --> 00:13:30.132
Where it's 7, 8, 9,

210
00:13:30.132 --> 00:13:36.230
this is the minimum example,
but it's the same idea.

211
00:13:37.230 --> 00:13:40.060
So if we wanted to delete 7,
it's the node,

212
00:13:40.060 --> 00:13:42.849
so we have to do something different,
because the node doesn't have a parent.

213
00:13:44.010 --> 00:13:47.498
And so that's why we account for
it in all these craziness nested if-else

214
00:13:47.498 --> 00:13:50.151
statements.
&gt;&gt; Bianca Gandolfo: And

215
00:13:50.151 --> 00:13:51.770
there are shorter ways to do this.

216
00:13:51.770 --> 00:13:56.846
This is the most verbose step by step.
&gt;&gt; Bianca Gandolfo: Cool?

217
00:13:59.546 --> 00:14:00.865
&gt;&gt; Bianca Gandolfo: Awesome.

218
00:14:03.577 --> 00:14:04.611
&gt;&gt; Bianca Gandolfo: Moving on.

219
00:14:08.760 --> 00:14:10.434
&gt;&gt; Student3: Delete

220
00:14:10.434 --> 00:14:12.380
max.
&gt;&gt; Bianca Gandolfo: Hm?

221
00:14:12.380 --> 00:14:13.647
&gt;&gt; Student3: How will you correct,

222
00:14:13.647 --> 00:14:16.540
if you forgot delete max.
&gt;&gt; Bianca Gandolfo: What's that?

223
00:14:16.540 --> 00:14:17.710
&gt;&gt; Student3: The last statement,

224
00:14:17.710 --> 00:14:23.010
if, yeah delete max is.
&gt;&gt; Bianca Gandolfo: This one?

225
00:14:23.010 --> 00:14:23.636
&gt;&gt; Student3: The last if.

226
00:14:23.636 --> 00:14:24.473
&gt;&gt; Student2: Line 16,

227
00:14:24.473 --> 00:14:27.330
the delete min.
&gt;&gt; Bianca Gandolfo: Hmm,

228
00:14:27.330 --> 00:14:34.105
good eye.
&gt;&gt; Bianca Gandolfo: Very cool.

229
00:14:34.105 --> 00:14:34.962
&gt;&gt; Student1: That would make for

230
00:14:34.962 --> 00:14:37.376
a confusing bug.
&gt;&gt; Bianca Gandolfo: Yeah.

231
00:14:42.090 --> 00:14:42.945
&gt;&gt; Bianca Gandolfo: Yeah, especially if

232
00:14:42.945 --> 00:14:52.597
deleteMin also existed.
&gt;&gt; Bianca Gandolfo: All

233
00:14:52.597 --> 00:14:55.800
right, any questions?
&gt;&gt; Student2: Yeah,

234
00:14:55.800 --> 00:14:59.840
so for an empty tree,
we're setting this value equals null.

235
00:14:59.840 --> 00:15:03.499
Does that mean we'd have to check for
this value equals null in all of our other

236
00:15:03.499 --> 00:15:06.158
methods?
&gt;&gt; Bianca Gandolfo: Yeah,

237
00:15:06.158 --> 00:15:12.100
yep.
&gt;&gt; Bianca Gandolfo: Yep, so it depends.

238
00:15:12.100 --> 00:15:14.803
If you wanna account for
an NP tree in your implementation,

239
00:15:14.803 --> 00:15:21.628
that's how you could do it.
&gt;&gt; Student2: Just

240
00:15:21.628 --> 00:15:26.791
making [INAUDIBLE] method.
&gt;&gt; Bianca Gandolfo: Hmm?

241
00:15:26.791 --> 00:15:28.119
&gt;&gt; Student2: Probably just make them use

242
00:15:28.119 --> 00:15:28.940
empty method.

243
00:15:28.940 --> 00:15:30.392
&gt;&gt; Bianca Gandolfo: Yep.
&gt;&gt; Student2: Insert that

244
00:15:30.392 --> 00:15:31.390
everywhere.
&gt;&gt; Bianca Gandolfo: Yeah.

245
00:15:33.700 --> 00:15:34.200
All right.

246
00:15:35.610 --> 00:15:36.650
Cool.

247
00:15:36.650 --> 00:15:39.230
So we talked about delete min/max.

248
00:15:39.230 --> 00:15:43.230
This is a simplified example
of just deleting a node,

249
00:15:43.230 --> 00:15:44.500
more generally from a tree.

250
00:15:46.850 --> 00:15:50.570
So when we're deleting a node from
a binary search tree, there's three cases

251
00:15:50.570 --> 00:15:53.950
and we already talked about the first
two in our min and max, right.

252
00:15:53.950 --> 00:15:57.190
The first case is when
a node is a leaf node.

253
00:15:57.190 --> 00:16:01.700
What do we do?
&gt;&gt; Bianca Gandolfo: What do we do if it's

254
00:16:01.700 --> 00:16:05.340
a leaf node, meaning it has no children?
&gt;&gt; Student1: We remove the pointer

255
00:16:05.340 --> 00:16:07.150
from the parent.
&gt;&gt; Bianca Gandolfo: Mm hm.

256
00:16:07.150 --> 00:16:11.630
If when into null,
parents pointer is now null,

257
00:16:11.630 --> 00:16:14.930
that's pretty straightforward.

258
00:16:14.930 --> 00:16:18.078
And what do we do when
the node has one child?

259
00:16:29.527 --> 00:16:30.190
&gt;&gt; Student1: Move the node.

260
00:16:31.400 --> 00:16:32.220
&gt;&gt; Bianca Gandolfo: Yep, you just move

261
00:16:32.220 --> 00:16:33.180
the node up to the parent.

262
00:16:34.440 --> 00:16:39.650
And we know that it's going to
meet our requirements because

263
00:16:39.650 --> 00:16:46.760
the entire right sub-tree is always
going to be greater than the root node.

264
00:16:46.760 --> 00:16:50.390
Or the node in question and the entire
left sub-tree is going to be less.

265
00:16:50.390 --> 00:16:55.197
So if we move it up and
it's just one node.

266
00:16:58.821 --> 00:17:00.590
&gt;&gt; Bianca Gandolfo: Then we're good to go.

