WEBVTT

1
00:00:00.025 --> 00:00:05.272
&gt;&gt; Bianca Gandolfo: Breadth-first search
follows this pattern where we traverse

2
00:00:05.272 --> 00:00:11.608
our graph in layers rather than all
the way down first and then the next ones.

3
00:00:11.608 --> 00:00:18.120
So just so we can trace it here,
it's going to go by level, etc.

4
00:00:18.120 --> 00:00:22.628
So
&gt;&gt; Bianca Gandolfo: If we were to console

5
00:00:22.628 --> 00:00:27.322
log the depth every time
that we do this traversal,

6
00:00:27.322 --> 00:00:30.500
it would log something like this.

7
00:00:32.080 --> 00:00:37.027
Zero, one, one, one, two, two, two,

8
00:00:37.027 --> 00:00:40.777
two, three.
&gt;&gt; Bianca Gandolfo: So

9
00:00:40.777 --> 00:00:45.844
we're going by depth.
&gt;&gt; Bianca Gandolfo: We're good?

10
00:00:48.163 --> 00:00:49.000
&gt;&gt; Bianca Gandolfo: Cool.

11
00:00:49.000 --> 00:00:53.220
And we talked about how
depth-first search uses a stack.

12
00:00:53.220 --> 00:00:56.910
We're using a stack under
the hood with recursion.

13
00:00:56.910 --> 00:01:02.410
However, breath-first search, we have to
explicitly use a queue to make it work.

14
00:01:02.410 --> 00:01:05.833
So, we're going to use a cue for
our stack and

15
00:01:05.833 --> 00:01:11.720
when you're thinking about depth first
search versus breath first search.

16
00:01:11.720 --> 00:01:16.407
The first thing that should
come to your mind cue for

17
00:01:16.407 --> 00:01:21.094
BFS, stack for DFS,
that should be the first thing

18
00:01:21.094 --> 00:01:23.399
that comes to your mind.

19
00:01:26.192 --> 00:01:30.241
&gt;&gt; Bianca Gandolfo: Cool.
&gt;&gt; Bianca Gandolfo: All

20
00:01:30.241 --> 00:01:34.526
right.
&gt;&gt; Bianca Gandolfo: What

21
00:01:34.526 --> 00:01:35.272
else do I wanna tell you about it?

22
00:01:35.272 --> 00:01:40.607
Okay, okay.
&gt;&gt; Bianca Gandolfo: Should

23
00:01:40.607 --> 00:01:41.450
we just jump in?

24
00:01:43.300 --> 00:01:45.270
Explore the code, and then we'll.

25
00:01:45.270 --> 00:01:48.580
We'll explore the code and
then we'll use our example again, okay?

26
00:01:50.260 --> 00:01:54.340
So, we're gonna do a check if it's valid.

27
00:01:54.340 --> 00:01:58.910
Again, we have this visited object,
and then we have the queue.

28
00:01:58.910 --> 00:02:02.620
So the queue is just gonna add our value,
and then make it's gonna make it an array.

29
00:02:04.550 --> 00:02:10.038
So we are going to give it a 0
if it's visited in this case,

30
00:02:10.038 --> 00:02:12.618
and then we're gonna see.

31
00:02:12.618 --> 00:02:17.139
So while the queue has something in it,

32
00:02:17.139 --> 00:02:23.029
we're gonna do this loop,
&gt;&gt; Bianca Gandolfo: Cool?

33
00:02:23.029 --> 00:02:28.062
All right.

34
00:02:28.062 --> 00:02:33.230
So, for our first no were
going to shift our queue.

35
00:02:33.230 --> 00:02:34.020
What does shift do?

36
00:02:39.350 --> 00:02:40.560
Anyone know?

37
00:02:40.560 --> 00:02:42.890
Let's check it out.
&gt;&gt; Speaker 2: Move everything over one.

38
00:02:42.890 --> 00:02:43.712
&gt;&gt; Bianca Gandolfo: Mm hm So

39
00:02:43.712 --> 00:02:47.411
if we have q and it's an object,

40
00:02:47.411 --> 00:02:52.891
I'm sorry it's an array,
and we say q shift and

41
00:02:52.891 --> 00:02:58.919
then we look at q it's gonna
take off the first one and

42
00:02:58.919 --> 00:03:02.495
shift everything over by one.

43
00:03:05.781 --> 00:03:08.510
&gt;&gt; Bianca Gandolfo: We're good?

44
00:03:08.510 --> 00:03:12.861
Great.
&gt;&gt; Bianca Gandolfo: Okay, so

45
00:03:12.861 --> 00:03:16.902
that's what we're doing here.
&gt;&gt; Bianca Gandolfo: Then we're running our

46
00:03:16.902 --> 00:03:17.500
function.

47
00:03:19.880 --> 00:03:24.996
We're going to pass our node And
then visited node,

48
00:03:24.996 --> 00:03:28.936
interesting.
&gt;&gt; Bianca Gandolfo: Let's keep

49
00:03:28.936 --> 00:03:30.620
that in our mind.

50
00:03:30.620 --> 00:03:32.220
Why might we pass that?

51
00:03:32.220 --> 00:03:32.720
Very strange.

52
00:03:34.220 --> 00:03:39.630
So we have our neighbors.
&gt;&gt; Bianca Gandolfo: We're

53
00:03:39.630 --> 00:03:41.510
gonna be filtering.

54
00:03:41.510 --> 00:03:43.059
So what does filter do?

55
00:03:43.059 --> 00:03:47.990
Anyone know, anyone familiar
with the interface of filter?

56
00:03:49.360 --> 00:03:50.260
No?

57
00:03:50.260 --> 00:03:51.480
Some of us?

58
00:03:51.480 --> 00:03:56.180
So, filter is going to loop through all of

59
00:03:56.180 --> 00:04:02.080
the elements in a collection and

60
00:04:02.080 --> 00:04:09.600
if it returns true it's
going to return an array

61
00:04:09.600 --> 00:04:13.795
of all of those values that

62
00:04:13.795 --> 00:04:19.520
were true,
based on some function that you passed in.

63
00:04:21.930 --> 00:04:25.780
So here's our function that we're passing.

64
00:04:28.060 --> 00:04:29.230
Here.

65
00:04:29.230 --> 00:04:33.640
So, as you can see, there's a certain,

66
00:04:37.820 --> 00:04:41.020
something has to be met in order for
it to return true.

67
00:04:41.020 --> 00:04:46.369
If that condition is met then we're
gonna add it to our neighbor's

68
00:04:46.369 --> 00:04:52.565
array.
&gt;&gt; Bianca Gandolfo: Any

69
00:04:52.565 --> 00:04:55.970
question about what that's doing?

70
00:04:55.970 --> 00:05:01.827
What condition needs to be met?
&gt;&gt; Speaker 3: It can't be visited.

71
00:05:01.827 --> 00:05:03.387
&gt;&gt; Bianca Gandolfo: Yeah, mm-hm, yeah.

72
00:05:03.387 --> 00:05:09.624
So if,
&gt;&gt; Bianca Gandolfo: If

73
00:05:09.624 --> 00:05:13.574
we do a look up on our visited object and

74
00:05:13.574 --> 00:05:18.520
it's undefined, we're gonna enter in here.

75
00:05:20.190 --> 00:05:25.272
So we're gonna call it visited[neighbor],
visited[node]+1,

76
00:05:25.272 --> 00:05:29.210
we're adding one here and
then we're gonna return true.

77
00:05:30.520 --> 00:05:34.470
So essentially, we can't have visited it.

78
00:05:36.030 --> 00:05:40.980
So this is a way for us to build a queue
based on the nodes that we haven't yet

79
00:05:40.980 --> 00:05:45.280
visited and by queue, I mean an array.

80
00:05:47.065 --> 00:05:51.692
Cool.
&gt;&gt; Bianca Gandolfo: So

81
00:05:51.692 --> 00:05:54.906
there we are, and
then we're gonna do this thing.

82
00:05:54.906 --> 00:05:58.723
QUEUE = queue.concat(neighbors).

83
00:05:58.723 --> 00:06:00.620
Let's see what that does.

84
00:06:03.060 --> 00:06:03.640
Where's our queue?

85
00:06:04.980 --> 00:06:10.133
Here's our queue.
And then we're gonna say neighbors,

86
00:06:10.133 --> 00:06:15.510
neighbors, and let's do like this.

87
00:06:15.510 --> 00:06:16.475
So we say q.concat(neighbors), right?

88
00:06:16.475 --> 00:06:18.660
We pass it neighbors.

89
00:06:18.660 --> 00:06:26.220
Does anyone know what this does?

90
00:06:26.220 --> 00:06:29.807
If I hit enter what's gonna happen?
&gt;&gt; Speaker 3: Turn that into

91
00:06:29.807 --> 00:06:33.310
a string [CROSSTALK].
&gt;&gt; Bianca Gandolfo: Tacking it on the in.

92
00:06:33.310 --> 00:06:37.000
Concat immediately you
see concat with strings.

93
00:06:37.000 --> 00:06:39.560
But here we are just
concatenating two arrays.

94
00:06:39.560 --> 00:06:48.097
We're just gonna put it on the in.
&gt;&gt; Bianca Gandolfo: Cool.

95
00:06:48.097 --> 00:06:50.892
All right.

96
00:06:50.892 --> 00:06:52.440
So, here we are.

97
00:06:54.160 --> 00:06:58.090
Adding all the neighbors
next on the queue.

98
00:07:00.130 --> 00:07:00.630
Okay?

99
00:07:03.950 --> 00:07:08.730
And we're going to keep doing
that until our queue is empty.

