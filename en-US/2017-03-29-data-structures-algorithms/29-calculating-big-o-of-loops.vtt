WEBVTT

1
00:00:00.230 --> 00:00:03.306
&gt;&gt; Bianca Gandolfo: So
my next question I'm posing to you is, so

2
00:00:03.306 --> 00:00:07.057
what if we have multiple expressions,
loops, etc.

3
00:00:07.057 --> 00:00:11.674
So we're looking at time complexity
of individual operations, so

4
00:00:11.674 --> 00:00:14.510
let's talk about how do we combine that?

5
00:00:15.602 --> 00:00:19.165
It's gonna take a little bit of math and
I'll give you a rule of thumb, right.

6
00:00:19.165 --> 00:00:23.246
You're either gonna multiply something,
or you're going to add something, for

7
00:00:23.246 --> 00:00:25.170
the most part, for the most part.

8
00:00:25.170 --> 00:00:31.431
You're gonna add things when they're next
to each other but they're not in a loop if

9
00:00:31.431 --> 00:00:37.623
they're inside of a loop that might hint
to you that it's multiplication, okay.

10
00:00:37.623 --> 00:00:42.070
And then again we're just doing
estimations here this is not exact math.

11
00:00:43.990 --> 00:00:44.490
Cool.

12
00:00:46.420 --> 00:00:49.809
So, whatever, blah, blah, blah.

13
00:00:49.809 --> 00:00:54.728
We have some for loop here.
&gt;&gt; Bianca Gandolfo: So,

14
00:00:54.728 --> 00:00:56.414
Christina asks would it be helpful for

15
00:00:56.414 --> 00:01:00.219
interviews to memorize all JavaScript
native methods and it's time complexities.

16
00:01:01.440 --> 00:01:03.310
I discourage memorization.

17
00:01:03.310 --> 00:01:07.420
I actually just encourage you
to understand how they work.

18
00:01:07.420 --> 00:01:11.270
And then be able to figure out
the time complexity from there,

19
00:01:12.420 --> 00:01:15.810
because there's no way that you're
gonna be able to memorize everything.

20
00:01:15.810 --> 00:01:20.830
And so, what you wanna do is
understand the underlying mechanics,

21
00:01:20.830 --> 00:01:22.410
so that you can calculate it on your own.

22
00:01:23.750 --> 00:01:25.180
Good question.
&gt;&gt; Speaker 2: Sorry,

23
00:01:25.180 --> 00:01:27.900
what makes a method native?
&gt;&gt; Bianca Gandolfo: It comes for

24
00:01:27.900 --> 00:01:30.415
free with JavaScript.
&gt;&gt; Speaker 2: You didn't have to add

25
00:01:30.415 --> 00:01:32.721
a library or anything?
&gt;&gt; Bianca Gandolfo: Yep, yep,

26
00:01:32.721 --> 00:01:36.127
yep.
&gt;&gt; Bianca Gandolfo: Yeah, so

27
00:01:36.127 --> 00:01:40.200
there's native methods and
then there's like browser methods.

28
00:01:40.200 --> 00:01:44.179
There's methods that come from a library,

29
00:01:44.179 --> 00:01:48.851
methods that you wrote yourself, yeah.
&gt;&gt; Speaker 2: Thank you.

30
00:01:48.851 --> 00:01:53.190
&gt;&gt; Bianca Gandolfo: Yeah, good question.

31
00:01:53.190 --> 00:01:58.104
All right, so,

32
00:01:58.104 --> 00:02:02.670
i'll return.

33
00:02:04.090 --> 00:02:06.702
Let's just do 1 + 1.

34
00:02:06.702 --> 00:02:08.635
All right, so

35
00:02:08.635 --> 00:02:13.474
what's our time complexity here?

36
00:02:22.573 --> 00:02:25.412
&gt;&gt; Bianca Gandolfo: So,
here we are combining some stuff.

37
00:02:25.412 --> 00:02:29.052
1 + 1 what's our time complexity of

38
00:02:29.052 --> 00:02:31.475
that expression?
&gt;&gt; Speaker 2: Constant.

39
00:02:31.475 --> 00:02:36.811
&gt;&gt; Bianca Gandolfo: Yeah so O of 1.

40
00:02:36.811 --> 00:02:40.341
And then what about our loop?
&gt;&gt; Speaker 2: It's linear,

41
00:02:40.341 --> 00:02:43.958
I'm thinking it would still be.

42
00:02:43.958 --> 00:02:47.744
Linear because it, even though, cuz what
you're doing inside the loop is constant.

43
00:02:47.744 --> 00:02:50.865
&gt;&gt; Bianca Gandolfo: Mm-hm, yeah, exactly.

44
00:02:50.865 --> 00:02:54.420
So we have that.

45
00:02:54.420 --> 00:02:55.970
We're gonna guess that that's linear time.

46
00:02:57.070 --> 00:03:00.013
Take a guess.
Let's look at something similar.

47
00:03:00.013 --> 00:03:01.259
And see how it compares.

48
00:03:03.280 --> 00:03:08.924
So everyone understand my notation here?

49
00:03:08.924 --> 00:03:11.031
My pseudo JavaScript?

50
00:03:27.144 --> 00:03:27.960
&gt;&gt; Bianca Gandolfo: I don't know.

51
00:03:32.284 --> 00:03:33.544
&gt;&gt; Bianca Gandolfo: No.

52
00:03:37.032 --> 00:03:38.044
&gt;&gt; Bianca Gandolfo: Okay.

53
00:03:41.071 --> 00:03:42.190
&gt;&gt; Bianca Gandolfo: What's going on here?

54
00:03:43.620 --> 00:03:47.541
So what's this?
&gt;&gt; Speaker 3: Was constant, but

55
00:03:47.541 --> 00:03:49.451
then you have a nested loop.

56
00:03:49.451 --> 00:03:56.470
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; Speaker 3: Which

57
00:03:56.470 --> 00:03:58.240
is n squared.
&gt;&gt; Bianca Gandolfo: Yeah.

58
00:04:01.110 --> 00:04:08.279
Cool.
&gt;&gt; Bianca Gandolfo: So

59
00:04:08.279 --> 00:04:13.835
I'm gonna give you just a quick and dirty,
like how do we estimate what is the time

60
00:04:13.835 --> 00:04:19.089
complexity of these.
&gt;&gt; Bianca Gandolfo: I don't know,

61
00:04:19.089 --> 00:04:19.730
these loops.

62
00:04:21.160 --> 00:04:25.720
So when we have a statement next to each
other, we're gonna add them together.

63
00:04:26.770 --> 00:04:31.680
So we can say that this is O of 1,
plus O of

64
00:04:31.680 --> 00:04:37.010
1 which doesn't really amount
to anything to O of 1 right?

65
00:04:37.010 --> 00:04:42.000
When we have something nested
we're gonna multiply them.

66
00:04:42.000 --> 00:04:47.660
So we're gonna think about this as,
let's see, how do I separate this?

67
00:04:47.660 --> 00:04:54.684
As O(n)*O(n).

68
00:04:57.582 --> 00:05:01.800
&gt;&gt; Bianca Gandolfo: And you can kind
of estimate this as looking like this,

69
00:05:01.800 --> 00:05:06.916
O(n) squared.
&gt;&gt; Bianca Gandolfo: You

70
00:05:06.916 --> 00:05:14.427
know times o(2).
&gt;&gt; Bianca Gandolfo: See [INAUDIBLE]

71
00:05:14.427 --> 00:05:18.774
because it's nested, we multiply it,
if they're standing next to each other,

72
00:05:18.774 --> 00:05:23.228
we add it.
&gt;&gt; Bianca Gandolfo: But we only care about

73
00:05:23.228 --> 00:05:28.720
significant digits, so
we just cut off our constant time and

74
00:05:28.720 --> 00:05:33.549
we stick with O(n squared).
&gt;&gt; Bianca Gandolfo: So yeah,

75
00:05:33.549 --> 00:05:36.556
we're just estimating here and
we're thinking worst case scenario.

76
00:05:47.879 --> 00:05:49.536
&gt;&gt; Bianca Gandolfo: And then we chop it

77
00:05:49.536 --> 00:05:53.630
off because we go for
the worst case, cool?

78
00:05:54.970 --> 00:06:00.296
Quick and dirty.
&gt;&gt; Bianca Gandolfo: Any

79
00:06:00.296 --> 00:06:04.040
questions about that?
&gt;&gt; Speaker 2: Can you repeat the last one

80
00:06:05.360 --> 00:06:06.990
you deleted?
&gt;&gt; Bianca Gandolfo: Yeah, sure.

81
00:06:06.990 --> 00:06:12.530
So when something is nested in a loop,
you wanna multiply it.

82
00:06:13.530 --> 00:06:17.060
When they are sitting next to each other,
you add them.

83
00:06:17.060 --> 00:06:22.050
So here we are sitting next to
each other we add these and

84
00:06:22.050 --> 00:06:25.220
then we're also gonna multiply
it against our loops.

85
00:06:28.090 --> 00:06:31.147
But they're not significant so
we just chop it and in fact as soon as you

86
00:06:31.147 --> 00:06:35.470
[INAUDIBLE] loop you could just
automatically say, okay that's in squared.

87
00:06:35.470 --> 00:06:40.629
And that's totally fine.
&gt;&gt; Bianca Gandolfo: For loop,

88
00:06:40.629 --> 00:06:46.340
you can think linear.
&gt;&gt; Bianca Gandolfo: Cool?

89
00:06:46.340 --> 00:06:48.589
Awesome.

90
00:06:48.589 --> 00:06:52.040
Any questions here.

91
00:06:52.040 --> 00:06:53.440
All right.
&gt;&gt; Speaker 4: I'm still a little confused

92
00:06:53.440 --> 00:06:56.490
on how you decide what to chop off.
&gt;&gt; Bianca Gandolfo: You chop off the one

93
00:06:56.490 --> 00:06:58.330
that's the slowest.

94
00:06:58.330 --> 00:07:00.220
I'm sorry, you keep the slowest one.
&gt;&gt; Speaker 2: Keep the slowest.

95
00:07:00.220 --> 00:07:01.336
Got it, okay.
&gt;&gt; Bianca Gandolfo: Yeah, yeah,

96
00:07:01.336 --> 00:07:04.632
yeah.
&gt;&gt; Bianca Gandolfo: Cuz we're just

97
00:07:04.632 --> 00:07:12.149
interested in the worst case scenario.
&gt;&gt; Bianca Gandolfo: All right,

98
00:07:12.149 --> 00:07:17.494
good question.
&gt;&gt; Bianca Gandolfo: That's

99
00:07:17.494 --> 00:07:19.310
the most math we're gonna do.

100
00:07:20.430 --> 00:07:25.240
All right, so we have this question,
what about O of log n?

101
00:07:25.240 --> 00:07:27.112
And I kinda gave you a hint.

102
00:07:34.133 --> 00:07:35.036
&gt;&gt; Bianca Gandolfo: That,

103
00:07:35.036 --> 00:07:40.459
things are O of logn
when you cut it in half.

104
00:07:42.320 --> 00:07:45.060
So you can think about any algorithm

105
00:07:46.280 --> 00:07:50.290
where your data set is cut
in half in order to find it.

106
00:07:50.290 --> 00:07:53.760
So the classic example is
you have a telephone book.

107
00:07:53.760 --> 00:08:00.240
And you could leaf through all of
the pages of the telephone book to find.

108
00:08:01.240 --> 00:08:03.910
You know, your friends last name.

109
00:08:03.910 --> 00:08:06.980
If this was 1980.
&gt;&gt; Speaker 2: Mm-hm.

110
00:08:06.980 --> 00:08:08.550
&gt;&gt; Bianca Gandolfo: You look through it or

111
00:08:08.550 --> 00:08:12.220
since it's sorted, you can open
the telephone book to the middle.

112
00:08:12.220 --> 00:08:16.030
And you can say so
my friends last name starts with a f.

113
00:08:17.050 --> 00:08:19.700
You know is it greater or less.

114
00:08:19.700 --> 00:08:23.029
If it's less, then you rip the phone
book in half and you throw away half.

115
00:08:24.090 --> 00:08:26.146
Have you guys seen this metaphor before?
&gt;&gt; Speaker 2: Yeah.

116
00:08:26.146 --> 00:08:27.346
&gt;&gt; Bianca Gandolfo: And then you open it

117
00:08:27.346 --> 00:08:31.366
in half again and you say,
is it greater, is it lesser?

118
00:08:31.366 --> 00:08:35.750
And then [LAUGH] depending on, you rip off
the other half and you keep doing that.

119
00:08:35.750 --> 00:08:37.130
And so it's logarithmic,

120
00:08:37.130 --> 00:08:42.490
because as it grows the amount of steps
that you're doing is halved, essentially.

121
00:08:42.490 --> 00:08:47.880
And so you can see that logarithmic
Graph that it kind of goes like that.

122
00:08:47.880 --> 00:08:49.370
And that's a pretty good algorithm.

123
00:08:49.370 --> 00:08:51.370
We're happy when things are logarithmic,
for the most part.

124
00:08:54.510 --> 00:09:00.746
Cool and that's a binary search.
&gt;&gt; Bianca Gandolfo: Cool, all right.

125
00:09:00.746 --> 00:09:02.247
Questions?

126
00:09:10.141 --> 00:09:11.133
&gt;&gt; Bianca Gandolfo: Okay.

127
00:09:13.895 --> 00:09:15.110
&gt;&gt; Bianca Gandolfo: Cool.

128
00:09:15.110 --> 00:09:17.590
Some common operations so

129
00:09:17.590 --> 00:09:21.460
running a statement like like one plus
one, constant time, value look-up.

130
00:09:21.460 --> 00:09:22.350
An array object or

131
00:09:22.350 --> 00:09:27.000
variable is going to be constant time,
login is going to be when you loop.

132
00:09:28.410 --> 00:09:32.140
And cut everything in half every time and
you are throwing it away,

133
00:09:32.140 --> 00:09:32.640
that's important.

134
00:09:32.640 --> 00:09:34.620
Because we are going to do something,
when we cut it in half.

135
00:09:34.620 --> 00:09:37.000
But we don't throw away the other half and

136
00:09:37.000 --> 00:09:39.480
I will talk about that in a second
when we get there later today.

137
00:09:39.480 --> 00:09:40.565
It will be fun.

138
00:09:40.565 --> 00:09:45.310
And then, O(n) looping through.

139
00:09:45.310 --> 00:09:46.950
N squared, double loops.

140
00:09:48.240 --> 00:09:50.030
And again,
it's important the loops are nested.

141
00:09:50.030 --> 00:09:52.620
They're not loops next to each other,
that's still linear, so

142
00:09:52.620 --> 00:09:57.030
if it's a loop on top then a loop
right after, that's going to be two n.

143
00:09:58.180 --> 00:10:02.486
Right, nested is n squared.
&gt;&gt; Bianca Gandolfo: Cool.

144
00:10:02.486 --> 00:10:09.990
All right, are you ready?
&gt;&gt; Bianca Gandolfo: Space complexity.

145
00:10:09.990 --> 00:10:14.270
Basically the same, except we're thinking
about when we're doing an algorithm,

146
00:10:14.270 --> 00:10:20.680
are we creating another data
structure to save our data?

147
00:10:20.680 --> 00:10:25.290
So, in some of the things that we were
doing yesterday when we created an extra

148
00:10:25.290 --> 00:10:31.370
array to store our data, what would
you think that space complexity was?

149
00:10:31.370 --> 00:10:37.962
Remember when we did that?
&gt;&gt; Speaker 2: Yeah, we created a second

150
00:10:37.962 --> 00:10:40.940
order [INAUDIBLE] reverse going into it.
&gt;&gt; Bianca Gandolfo: Yeah, yeah,

151
00:10:40.940 --> 00:10:43.870
so when reverse the array we created
a second one and we just copied it over.

152
00:10:45.920 --> 00:10:52.010
So as our data grows, right,
it was an array of integers.

153
00:10:52.010 --> 00:10:55.481
As that grows,
how does the space grow that it takes

154
00:10:55.481 --> 00:10:59.283
up?
&gt;&gt; Speaker 2: Seems

155
00:10:59.283 --> 00:11:01.030
linear.
&gt;&gt; Bianca Gandolfo: Yeah.

156
00:11:01.030 --> 00:11:06.490
It's absolutely linear, yep exactly, maybe
that matters maybe that doesn't matter.

157
00:11:06.490 --> 00:11:08.620
We mostly just talk about time complexity,

158
00:11:10.070 --> 00:11:13.590
base complexity is
a little less important.

159
00:11:13.590 --> 00:11:18.350
But it is something you should note so
that's why we have in place sorts and

160
00:11:18.350 --> 00:11:20.950
then we have not in place
sorts which will copy over.

161
00:11:22.530 --> 00:11:24.059
Cool.

162
00:11:24.059 --> 00:11:28.570
All right, so here's some review notes for
you to read on your own, if you'd like.

163
00:11:28.570 --> 00:11:33.720
Remember I promised you a link,
it's right here if you wanna learn about

164
00:11:33.720 --> 00:11:36.710
other notations and what they mean.

165
00:11:37.930 --> 00:11:41.270
In interviews, in real life,
we're only gonna really talk about big O.

166
00:11:42.950 --> 00:11:46.510
Everything else is more of
an academic type thing to talk about.

167
00:11:46.510 --> 00:11:48.960
So if you're interested in that
kind of thing, have at it.

168
00:11:50.690 --> 00:11:52.630
More stuff for you to read.

169
00:11:52.630 --> 00:11:55.920
Here is our big takeaway.

170
00:11:55.920 --> 00:11:56.870
It's worst-case scenario.

171
00:11:56.870 --> 00:12:00.810
We drop any non-significant operations or
constants.

