WEBVTT

1
00:00:00.310 --> 00:00:04.703
&gt;&gt; Bianca Gandolfo: Any big takeaways
from this, anything new that you learned?

2
00:00:04.703 --> 00:00:08.000
&gt;&gt; Speaker 2: No, the whole thing was kind
of new to me, the whole traverse thing.

3
00:00:08.000 --> 00:00:12.830
And when you first put up the picture
of the first traversal or

4
00:00:12.830 --> 00:00:15.960
whatever, I did not at all
get how it was gonna work.

5
00:00:15.960 --> 00:00:18.300
So the whole thing was new to me.

6
00:00:18.300 --> 00:00:22.700
&gt;&gt; Bianca Gandolfo: Cool, so
what took you from, I had no idea how it

7
00:00:22.700 --> 00:00:27.659
was going to work,
to okay maybe I have some inkling?

8
00:00:27.659 --> 00:00:30.978
&gt;&gt; Speaker 2: It was when you
were talking about it and

9
00:00:30.978 --> 00:00:35.010
I guess just walking
through it the first time.

10
00:00:36.750 --> 00:00:37.310
&gt;&gt; Bianca Gandolfo: Cool, so like

11
00:00:37.310 --> 00:00:38.440
the pseudocode-

12
00:00:38.440 --> 00:00:39.020
&gt;&gt; Speaker 2: Yeah
&gt;&gt; Bianca Gandolfo: Component.

13
00:00:40.070 --> 00:00:42.611
Cool, anyone else have that same reaction?

14
00:00:42.611 --> 00:00:48.620
You're like, god I have no idea,
how to even approach this.

15
00:00:48.620 --> 00:00:50.847
No everyone's like,
that's it this is gonna be easy.

16
00:00:50.847 --> 00:00:54.722
&gt;&gt; Speaker 3: I think one takeaway is
the trees are really made for recursion,

17
00:00:54.722 --> 00:00:55.234
right.

18
00:00:56.360 --> 00:00:59.356
&gt;&gt; Bianca Gandolfo: Yeah, exactly, so when
we think of recursive data structures,

19
00:00:59.356 --> 00:01:00.721
we think of trees, for sure.

20
00:01:00.721 --> 00:01:03.200
&gt;&gt; Speaker 4: How they're super nice,
and neat.

21
00:01:03.200 --> 00:01:07.496
And I guess it also makes sense that you
have three different ways you can traverse

22
00:01:07.496 --> 00:01:10.348
it cuz you have at any point
in time a little triangle.

23
00:01:10.348 --> 00:01:11.992
&gt;&gt; Bianca Gandolfo: There's
more than three ways, but yeah.

24
00:01:11.992 --> 00:01:13.070
&gt;&gt; Speaker 4: But yeah.

25
00:01:13.070 --> 00:01:14.476
&gt;&gt; Bianca Gandolfo: Yeah, we'll get there.

26
00:01:16.348 --> 00:01:17.930
&gt;&gt; Bianca Gandolfo: So many ways.

27
00:01:17.930 --> 00:01:23.076
&gt;&gt; Speaker 3: I know that the recursion

28
00:01:23.076 --> 00:01:27.241
make easy life, and

29
00:01:27.241 --> 00:01:32.876
how to catch up the tree that

30
00:01:32.876 --> 00:01:38.521
is left right self, I get.

31
00:01:38.521 --> 00:01:42.974
&gt;&gt; Bianca Gandolfo: Yeah, so you
are saying that recreation makes your life

32
00:01:42.974 --> 00:01:47.060
easier and
then the concept of the self left right.

33
00:01:47.060 --> 00:01:47.710
&gt;&gt; Speaker 3: Yeah.

34
00:01:47.710 --> 00:01:48.948
&gt;&gt; Bianca Gandolfo: Helps
you kind of see the patern?

35
00:01:48.948 --> 00:01:49.630
&gt;&gt; Speaker 3: Right.

36
00:01:49.630 --> 00:01:53.240
&gt;&gt; Bianca Gandolfo: And then it
applies like, literally to the code.

37
00:01:53.240 --> 00:01:57.314
And, I don't know, I don't feel like
recursion always clicks for me like that.

38
00:01:57.314 --> 00:01:59.940
With a pattern, your're like,

39
00:01:59.940 --> 00:02:04.877
that pattern makes sense to me 100%
where I can really spell it out.

40
00:02:04.877 --> 00:02:08.380
So, I really like that about it too, cool.

41
00:02:09.400 --> 00:02:10.984
So what have we done so far with our tree?

42
00:02:15.848 --> 00:02:17.146
&gt;&gt; Bianca Gandolfo: So
here's our binary search tree.

43
00:02:17.146 --> 00:02:20.665
&gt;&gt; Bianca Gandolfo: What have we done?

44
00:02:20.665 --> 00:02:23.595
What's the first thing we did today?

45
00:02:23.595 --> 00:02:24.580
&gt;&gt; Speaker 2: Insert?

46
00:02:24.580 --> 00:02:27.690
&gt;&gt; Bianca Gandolfo: Yup,
so we built it, we learned

47
00:02:27.690 --> 00:02:32.590
how to insert things into our binary
search tree, in the correct order, right?

48
00:02:32.590 --> 00:02:37.193
That's the whole point of a binary
search tree is there's an order there.

49
00:02:37.193 --> 00:02:37.970
What else did we do?

50
00:02:37.970 --> 00:02:40.346
&gt;&gt; Speaker 5: We learned how to check for
a value.

51
00:02:40.346 --> 00:02:44.870
&gt;&gt; Bianca Gandolfo: Yeah, so
we did contains, so we searched for

52
00:02:44.870 --> 00:02:46.780
specific values.

53
00:02:48.801 --> 00:02:49.918
&gt;&gt; Bianca Gandolfo: What else?

54
00:02:54.089 --> 00:02:57.210
&gt;&gt; Bianca Gandolfo: Nothing else?

55
00:02:57.210 --> 00:02:59.200
&gt;&gt; Speaker 2: We learned
different ways to traverse.

56
00:02:59.200 --> 00:03:02.860
&gt;&gt; Bianca Gandolfo: Yeah, so
we also traversed, totally.

57
00:03:02.860 --> 00:03:06.656
So we built it, we peeked around.

58
00:03:06.656 --> 00:03:09.454
Let's think about, for
a moment time complexity for

59
00:03:09.454 --> 00:03:11.580
the operations that we've done so far.

60
00:03:11.580 --> 00:03:12.450
So we talked about insert.

61
00:03:14.651 --> 00:03:20.570
&gt;&gt; Bianca Gandolfo: What do you think is,
&gt;&gt; Bianca Gandolfo: Sort of the average

62
00:03:20.570 --> 00:03:25.880
case insertion if you had just average
in your minds based on this picture?

63
00:03:28.372 --> 00:03:30.750
&gt;&gt; Bianca Gandolfo: Quick and
dirty average.

64
00:03:30.750 --> 00:03:32.080
&gt;&gt; Speaker 3: Login?

65
00:03:32.080 --> 00:03:33.400
&gt;&gt; Bianca Gandolfo: Log in,
why do we think it's login?

66
00:03:34.510 --> 00:03:35.802
&gt;&gt; Speaker 3: That's the height.

67
00:03:35.802 --> 00:03:39.399
&gt;&gt; Bianca Gandolfo: Yeah,
login is gonna be the height of the tree.

68
00:03:39.399 --> 00:03:43.432
And it's also because we're gonna be
splitting our problem in half every

69
00:03:43.432 --> 00:03:44.220
single time.

70
00:03:46.430 --> 00:03:48.630
So anything where we split
the problem in half.

71
00:03:48.630 --> 00:03:52.144
Just like we did the phone book example,
that's a binary search,

72
00:03:52.144 --> 00:03:54.979
where we split it in half and
throw the half of it away.

73
00:03:57.859 --> 00:03:59.944
&gt;&gt; Bianca Gandolfo: So
when we have a tree like this and

74
00:03:59.944 --> 00:04:04.433
we are splitting the problem in half,
we can expect it to be login.

75
00:04:04.433 --> 00:04:12.843
&gt;&gt; Bianca Gandolfo: I
see some furrowed brows.

76
00:04:12.843 --> 00:04:18.350
&gt;&gt; Speaker 4: Is that for
contains or for searching?

77
00:04:18.350 --> 00:04:19.302
&gt;&gt; Bianca Gandolfo: For insertion.

78
00:04:19.302 --> 00:04:20.800
&gt;&gt; Speaker 4: Insertion.

79
00:04:20.800 --> 00:04:24.530
&gt;&gt; Bianca Gandolfo: What about for
contains slash a search, right?

80
00:04:24.530 --> 00:04:27.501
So search is contains,
it's the same thing.

81
00:04:31.233 --> 00:04:33.800
&gt;&gt; Bianca Gandolfo: So
let's say the we needed to search for 18.

82
00:04:35.662 --> 00:04:38.840
&gt;&gt; Bianca Gandolfo: First of all how
many nodes do we have, we can count?

83
00:04:38.840 --> 00:04:46.423
So we have 4, 8, 12, 14,
we have 15 nodes here.

84
00:04:46.423 --> 00:04:52.829
How many steps would it take for
us to find 18?

85
00:04:58.024 --> 00:05:02.222
&gt;&gt; Bianca Gandolfo: So we start here,
so one, two, well, one,

86
00:05:02.222 --> 00:05:04.994
two, three, and then four.

87
00:05:08.370 --> 00:05:09.598
&gt;&gt; Bianca Gandolfo: So
probably like four steps.

88
00:05:12.620 --> 00:05:14.006
&gt;&gt; Bianca Gandolfo: Yeah,
and then if we doubled that.

89
00:05:16.540 --> 00:05:17.202
&gt;&gt; Bianca Gandolfo: How would that change?

90
00:05:22.210 --> 00:05:23.845
&gt;&gt; Bianca Gandolfo: Or
what if we just cut it in half?

91
00:05:26.322 --> 00:05:27.860
&gt;&gt; Speaker 4: You went to 15?

92
00:05:27.860 --> 00:05:31.035
&gt;&gt; Bianca Gandolfo: And we just had this,
yeah, we just had this one.

93
00:05:35.429 --> 00:05:38.660
&gt;&gt; Bianca Gandolfo: So then,
we only have three one, two, three.

94
00:05:38.660 --> 00:05:39.940
What if we cut it in half again?

95
00:05:41.680 --> 00:05:43.830
Then it's just two steps, right one, two.

96
00:05:45.460 --> 00:05:52.513
So as the problem grows,
the operations grow by how much?

97
00:05:58.650 --> 00:06:02.300
&gt;&gt; Bianca Gandolfo: Half, right?
Does that make sense?

98
00:06:04.380 --> 00:06:07.390
So when we have 15 or so, it's gonna

99
00:06:08.950 --> 00:06:13.640
take us 4 times to get to 18,
when we cut it in half, right?

100
00:06:13.640 --> 00:06:17.286
So we throw away this left side,
it's gonna take us three.

101
00:06:17.286 --> 00:06:22.326
And we throw away the other half,
it'll just take us two.

102
00:06:24.754 --> 00:06:29.659
&gt;&gt; Bianca Gandolfo: And
that's logarithmic, there's two.

103
00:06:31.890 --> 00:06:33.958
&gt;&gt; Bianca Gandolfo: Yeah?
&gt;&gt; Speaker 4: How do you know two that

104
00:06:33.958 --> 00:06:34.567
again?

105
00:06:34.567 --> 00:06:37.017
&gt;&gt; Bianca Gandolfo: Login, so O of login.

106
00:06:37.017 --> 00:06:37.664
&gt;&gt; Speaker 4: Okay.
&gt;&gt; Bianca Gandolfo: Yeah.

107
00:06:41.369 --> 00:06:43.499
&gt;&gt; Bianca Gandolfo: So
O parentheses login.

108
00:06:43.499 --> 00:06:46.780
Not O of N login which is different.

109
00:06:46.780 --> 00:06:49.168
What would make this N login?

110
00:06:52.250 --> 00:06:53.760
&gt;&gt; Bianca Gandolfo: Like what makes
an operation N login versus login?

111
00:06:56.324 --> 00:06:58.353
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yeah,

112
00:06:58.353 --> 00:07:02.761
every time you cut it in half,
you have to also do a linear operation.

113
00:07:02.761 --> 00:07:03.640
&gt;&gt; Speaker 5: Right.

114
00:07:03.640 --> 00:07:07.698
&gt;&gt; Bianca Gandolfo: Yeah, so
multiply it times n, yeah.

115
00:07:07.698 --> 00:07:12.478
To like merge sort or
quick sort where we have

116
00:07:12.478 --> 00:07:16.625
to iterate through the entire thing.

117
00:07:16.625 --> 00:07:19.836
So if you were traversing a tree and
transforming it?

118
00:07:21.834 --> 00:07:24.540
&gt;&gt; Bianca Gandolfo: So
what is a tree traversal then?

119
00:07:31.466 --> 00:07:34.988
&gt;&gt; Bianca Gandolfo: So
just visiting every node?

120
00:07:34.988 --> 00:07:40.110
So say this tree is 15.

121
00:07:40.110 --> 00:07:43.120
How many operations do we have
to take to visit every node?

122
00:07:43.120 --> 00:07:44.458
&gt;&gt; Speaker 2: 15, right.

123
00:07:44.458 --> 00:07:49.200
&gt;&gt; Bianca Gandolfo: 15,
what about if there's 30?

124
00:07:49.200 --> 00:07:50.676
&gt;&gt; Speaker 2: It's always gonna be linear,
right?

125
00:07:50.676 --> 00:07:55.248
&gt;&gt; Bianca Gandolfo: Linear, exactly, yeah.

126
00:07:59.498 --> 00:08:03.176
&gt;&gt; Bianca Gandolfo: Yeah, so something
that could make it more than linear is if

127
00:08:03.176 --> 00:08:07.020
whatever function that you're
calling inside of this tree.

128
00:08:08.750 --> 00:08:13.490
Does something also that is linear,
so if your callback function

129
00:08:13.490 --> 00:08:17.720
has maybe a loop in it that loops
through n times, the same n, right?

130
00:08:17.720 --> 00:08:21.221
So n meaning the number of nodes,
that would make it what?

131
00:08:24.871 --> 00:08:27.243
&gt;&gt; Speaker 5: N login.

132
00:08:27.243 --> 00:08:28.326
n times n.

133
00:08:28.326 --> 00:08:30.140
&gt;&gt; Bianca Gandolfo: Times n, okay.

134
00:08:30.140 --> 00:08:32.010
Which is quadratic, yep.

