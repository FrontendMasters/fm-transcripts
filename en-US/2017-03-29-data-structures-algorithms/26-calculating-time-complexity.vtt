WEBVTT

1
00:00:00.100 --> 00:00:01.650
&gt;&gt; Bianca Gandolfo: So
let's jump into an example.

2
00:00:01.650 --> 00:00:04.956
Does anyone here use Kayak.com,
like Priceline?

3
00:00:04.956 --> 00:00:10.920
So let's imagine that you work for
Kayak.com and you have these hotel,

4
00:00:10.920 --> 00:00:16.810
kind of flights, etc, websites,
you do use a lot of sorting, right.

5
00:00:16.810 --> 00:00:19.950
You have to sort, you're searching,
all of these things.

6
00:00:19.950 --> 00:00:23.450
So it's a very algorithm-heavy type
of application, very practical.

7
00:00:23.450 --> 00:00:27.490
We use these all the time,
these e-commerce type websites.

8
00:00:27.490 --> 00:00:31.650
And so let's say for example,
you work at Kayak.com and

9
00:00:31.650 --> 00:00:36.960
your PM asks you to add
a feature that on the top right,

10
00:00:36.960 --> 00:00:40.860
it just lists the range of the prices for
the hotels.

11
00:00:42.260 --> 00:00:47.203
So maybe, I don't know what's a good UI
decision here or where you'll put that.

12
00:00:47.203 --> 00:00:52.632
Maybe like right here,
we would put $50 to $400.

13
00:00:52.632 --> 00:00:56.686
Whatever it is that actually
reflects the minimum and

14
00:00:56.686 --> 00:01:01.151
the maximum price
&gt;&gt; Bianca Gandolfo: Of the hotels in this

15
00:01:01.151 --> 00:01:04.290
dataset, in some range, right?

16
00:01:04.290 --> 00:01:07.927
Are we following here?
&gt;&gt; Bianca Gandolfo: Any questions

17
00:01:07.927 --> 00:01:08.630
about that?

18
00:01:09.830 --> 00:01:10.330
Cool.

19
00:01:11.680 --> 00:01:12.180
All right.

20
00:01:13.560 --> 00:01:16.150
So we'll have to write
an algorithm to do a job.

21
00:01:16.150 --> 00:01:16.770
Yay.

22
00:01:18.290 --> 00:01:22.130
So, like I was saying,
the more data we have,

23
00:01:22.130 --> 00:01:27.153
we don't know how much data is in
kayak.com, The longer that's gonna

24
00:01:27.153 --> 00:01:30.964
take to figure out the minimum and the
maximum required for that range, right?

25
00:01:30.964 --> 00:01:36.710
Cuz we have to look through n
amount of data or x amount of data.

26
00:01:36.710 --> 00:01:37.210
Cool.

27
00:01:39.020 --> 00:01:41.400
And so, that's cool, we understand that.

28
00:01:41.400 --> 00:01:43.450
That's gonna be true, no matter what.

29
00:01:43.450 --> 00:01:45.660
What about as our data grows?

30
00:01:45.660 --> 00:01:47.340
How does that cost change?

31
00:01:47.340 --> 00:01:48.596
And that's the thing
that we're interested in.

32
00:01:48.596 --> 00:01:53.630
And we're gonna look at some different
examples and how to think about that.

33
00:01:55.520 --> 00:01:57.250
Cool.
So here's an example of our data.

34
00:01:57.250 --> 00:01:59.470
We have an array of hotels.

35
00:02:00.770 --> 00:02:05.025
And so price is unsorted, etc.

36
00:02:05.025 --> 00:02:09.105
Or maybe who knows how
many are in between here.

37
00:02:09.105 --> 00:02:11.189
Cool?

38
00:02:11.189 --> 00:02:12.648
Awesome.

39
00:02:12.648 --> 00:02:17.819
So one approach to figure
this out is to compare

40
00:02:17.819 --> 00:02:23.130
every number to all the other numbers,
right.

41
00:02:24.530 --> 00:02:32.880
And so we would have to go through all of
this, calculate, maybe the difference.

42
00:02:32.880 --> 00:02:33.640
Like, where and

43
00:02:33.640 --> 00:02:37.580
find the highest difference between
them to find the top and the bottom.

44
00:02:37.580 --> 00:02:41.849
Obviously, we know that this is not
the most efficient way to do it, right?

45
00:02:41.849 --> 00:02:43.760
Just off the top of our head.

46
00:02:43.760 --> 00:02:45.356
It seems like a lot of extra work, and

47
00:02:45.356 --> 00:02:48.203
it may not be the most intuitive
way of approaching this problem.

48
00:02:48.203 --> 00:02:50.450
But there's one way to approach it.

49
00:02:50.450 --> 00:02:55.038
Just literally comparing every
number to every other number in our

50
00:02:55.038 --> 00:03:00.750
data set, cool.

51
00:03:00.750 --> 00:03:02.570
And so,
how many comparisons will we have to make?

52
00:03:07.085 --> 00:03:09.370
&gt;&gt; Speaker 2: However many.

53
00:03:09.370 --> 00:03:13.030
&gt;&gt; Bianca Gandolfo: Yeah, so it's gonna be

54
00:03:13.030 --> 00:03:19.600
this amount of columns times
this amount of rows, right?

55
00:03:21.230 --> 00:03:25.130
And so if this was four, right,

56
00:03:25.130 --> 00:03:29.860
it'd be 4 times 4, 16 comparisons, right?

57
00:03:29.860 --> 00:03:33.410
It's 10, 10 times 10, 100 comparisons.

58
00:03:33.410 --> 00:03:35.860
And so
if we distill that down into any number,

59
00:03:35.860 --> 00:03:39.680
what would we call that in math?
&gt;&gt; Speaker 3: Squares?

60
00:03:39.680 --> 00:03:41.464
&gt;&gt; Bianca Gandolfo: Square, yeah, yeah,

61
00:03:41.464 --> 00:03:47.483
and so we call this n squared.
&gt;&gt; Bianca Gandolfo: Where's my So

62
00:03:47.483 --> 00:03:50.180
we call this an n square solution.

63
00:03:51.650 --> 00:03:55.970
It didn't show up, that's okay.
&gt;&gt; Bianca Gandolfo: Does that make sense?

64
00:03:55.970 --> 00:04:00.550
So n squared, as in grows the amount
of operations that have to happen,

65
00:04:01.630 --> 00:04:03.680
grows exponentially by two.

66
00:04:05.900 --> 00:04:07.680
And we can see with this box.

67
00:04:07.680 --> 00:04:10.520
Every time it grows,
we have to add a column on the right, And

68
00:04:10.520 --> 00:04:12.070
we have to add a row on the bottom.

69
00:04:13.570 --> 00:04:15.820
And so we could just count that.

70
00:04:15.820 --> 00:04:18.790
And that would be the time complexity of

71
00:04:18.790 --> 00:04:23.100
that operation.
&gt;&gt; Speaker 3: The diagonal though is just

72
00:04:23.100 --> 00:04:24.670
comparing numbers to themselves.

73
00:04:26.130 --> 00:04:27.020
Why is that necessary?

74
00:04:28.870 --> 00:04:30.130
You know what I mean?

75
00:04:30.130 --> 00:04:30.859
If-
&gt;&gt; Bianca Gandolfo: Yeah,

76
00:04:30.859 --> 00:04:35.885
you could optimize and say,
if this number is itself, skip.

77
00:04:35.885 --> 00:04:38.566
But at the end of the day, it's not
really gonna make a big difference.

78
00:04:38.566 --> 00:04:44.341
Yeah, cool.
&gt;&gt; Bianca Gandolfo: All

79
00:04:44.341 --> 00:04:48.829
right.
&gt;&gt; Bianca Gandolfo: Cool,

80
00:04:48.829 --> 00:04:56.210
uh-oh.
&gt;&gt; Bianca Gandolfo: Where's my other one?

81
00:04:59.740 --> 00:05:05.480
Okay,
&gt;&gt; Bianca Gandolfo: It's out of order.

82
00:05:06.910 --> 00:05:08.740
Here we go.
Sorry, sorry, sorry.

83
00:05:08.740 --> 00:05:11.680
Okay, so
this is just what I was saying before.

84
00:05:11.680 --> 00:05:19.215
As it grows, how does this grow?
&gt;&gt; Bianca Gandolfo: Right,

85
00:05:19.215 --> 00:05:22.480
significant amount of growth, right?

86
00:05:22.480 --> 00:05:27.020
Cuz the difference from 3 to 5 is two.

87
00:05:28.670 --> 00:05:33.080
The number of operations from 9 to 25,
much more than that.

88
00:05:34.320 --> 00:05:38.860
So we call this a slow algorithm and
squared is considered very slow.

89
00:05:38.860 --> 00:05:40.842
It's not ideal.

90
00:05:40.842 --> 00:05:43.813
Cool, great.

91
00:05:43.813 --> 00:05:47.840
Awesome, so here's another way we
could think about this problem.

92
00:05:47.840 --> 00:05:54.380
So what if we just checked, if for
the highest number and the lowest number.

93
00:05:54.380 --> 00:05:57.080
How many operations do we have to do for
that?

94
00:05:58.350 --> 00:06:03.240
So as we're going through,
we're asking what's the maximum?

95
00:06:03.240 --> 00:06:07.702
What's the minimum?
&gt;&gt; Bianca Gandolfo: So

96
00:06:07.702 --> 00:06:12.280
as we go through, yes this is the max,
yes this is the minimum.

97
00:06:12.280 --> 00:06:13.633
At this point, right, the first loop.

98
00:06:13.633 --> 00:06:15.242
First.

99
00:06:15.242 --> 00:06:22.120
Yes, no, who knows, who knows, no.

100
00:06:22.120 --> 00:06:24.640
And we'll just update this.

101
00:06:24.640 --> 00:06:27.680
Does that make sense,
as we're looping through?

102
00:06:27.680 --> 00:06:31.880
It might even be easier to think
about it like that, if you want.

103
00:06:35.150 --> 00:06:38.770
So how many comparisons here were made,
overall?

104
00:06:45.550 --> 00:06:46.245
&gt;&gt; Speaker 2: N times two?

105
00:06:46.245 --> 00:06:49.020
&gt;&gt; Bianca Gandolfo: Mm-hm.

106
00:06:49.020 --> 00:06:53.662
So for every input,
this is, if we have one,

107
00:06:53.662 --> 00:06:58.426
say we only have a list of 1,
we have to check,

108
00:06:58.426 --> 00:07:01.871
we have two operations, right.

109
00:07:01.871 --> 00:07:06.439
If we have two, we have four operations.

110
00:07:08.430 --> 00:07:09.755
If we have four,

111
00:07:09.755 --> 00:07:16.008
we have eight operations.
&gt;&gt; Bianca Gandolfo: Are we

112
00:07:16.008 --> 00:07:17.400
seeing this here?

113
00:07:18.420 --> 00:07:23.752
Again, you can just count these boxes and
you can see how many operations there are.

114
00:07:23.752 --> 00:07:28.866
And then we can distill it down to what
that means in a more generic way and

115
00:07:28.866 --> 00:07:32.619
call it 2n, yeah.
&gt;&gt; Bianca Gandolfo: Cool,

116
00:07:32.619 --> 00:07:35.605
did you have a question?
&gt;&gt; Speaker 3: I just-

117
00:07:35.605 --> 00:07:36.181
&gt;&gt; Bianca Gandolfo: Or you're just-

118
00:07:36.181 --> 00:07:37.170
&gt;&gt; Speaker 3: Trying to ask some-

119
00:07:37.170 --> 00:07:38.848
&gt;&gt; Bianca Gandolfo: [LAUGH] That's okay,

120
00:07:38.848 --> 00:07:40.140
cool.

121
00:07:40.140 --> 00:07:45.108
So n being the dataset,
the size of the dataset.

122
00:07:45.108 --> 00:07:54.807
Cool.
&gt;&gt; Bianca Gandolfo: So,

123
00:07:54.807 --> 00:07:56.560
what about this case?

124
00:07:56.560 --> 00:07:57.950
What if our data was sorted?

125
00:07:57.950 --> 00:08:00.570
So here, we have our array and
it's sorted.

126
00:08:03.440 --> 00:08:05.978
How many operations will we
have to do to complete this?

127
00:08:09.108 --> 00:08:11.760
&gt;&gt; Speaker 2: Complete what?

128
00:08:11.760 --> 00:08:13.400
&gt;&gt; Bianca Gandolfo: To find the highest

129
00:08:13.400 --> 00:08:15.810
and the lowest.
&gt;&gt; Speaker 2: Two,

130
00:08:15.810 --> 00:08:17.611
right?
&gt;&gt; Bianca Gandolfo: Yeah,

131
00:08:17.611 --> 00:08:18.724
probably just two.

132
00:08:18.724 --> 00:08:21.517
Highest and lowest, maybe three if you

133
00:08:21.517 --> 00:08:24.290
have to return something.
&gt;&gt; Speaker 2: It's just like it's

134
00:08:24.290 --> 00:08:28.450
the derivative of the n squared and
2n, and then again, and

135
00:08:28.450 --> 00:08:31.010
then you get the 2.
&gt;&gt; Bianca Gandolfo: Yeah,

136
00:08:31.010 --> 00:08:32.150
it's not that complicated.

137
00:08:33.960 --> 00:08:38.950
It's like a coincidence, lots of 2's here.

138
00:08:38.950 --> 00:08:41.420
It's actually, it has nothing to, yeah.

139
00:08:42.770 --> 00:08:47.213
So the reason it's 2 is because
all we have to do is say hotels.

140
00:08:47.213 --> 00:08:49.100
Zero, right?

141
00:08:49.100 --> 00:08:53.581
To get, this is gonna be the minimum,
assuming it's in ascending order.

142
00:08:53.581 --> 00:08:57.109
And then we have hotels, right,

143
00:08:57.109 --> 00:09:02.410
hotels.length-1, that's gonna be our max.

144
00:09:04.310 --> 00:09:11.067
So that's 1 in two operations.
&gt;&gt; Bianca Gandolfo: Do we see how that's

145
00:09:11.067 --> 00:09:15.730
different than our other things where
we'd have to loop and check everyone?

146
00:09:17.320 --> 00:09:21.295
Cool.
&gt;&gt; Bianca Gandolfo: Any questions about

147
00:09:21.295 --> 00:09:25.240
the difference between these run times?
&gt;&gt; Speaker 2: What

148
00:09:25.240 --> 00:09:30.011
do you call this last one?
&gt;&gt; Bianca Gandolfo: This is constant time.

149
00:09:30.011 --> 00:09:31.490
&gt;&gt; Bianca Gandolfo: Mm-hm.

150
00:09:31.490 --> 00:09:37.430
So as our input-size grows here,
it doesn't change.

151
00:09:37.430 --> 00:09:41.925
So if our input, so
if this list is a billion long,

152
00:09:41.925 --> 00:09:45.790
it's still gonna cost us two operations.

153
00:09:48.440 --> 00:09:51.521
That's the fastest, right,
that you could ever want.

154
00:09:51.521 --> 00:09:57.685
It's always just gonna be 2.
&gt;&gt; Speaker 2: Do

155
00:09:57.685 --> 00:09:59.930
you count the sorting though,
in the operation?

156
00:09:59.930 --> 00:10:01.680
Cuz when you add a new item-
&gt;&gt; Bianca Gandolfo: Yeah, so

157
00:10:01.680 --> 00:10:03.950
we're assuming that's already sorted.

158
00:10:03.950 --> 00:10:04.618
&gt;&gt; Speaker 2: Already sorted.
&gt;&gt; Bianca Gandolfo: Yeah.

159
00:10:04.618 --> 00:10:05.121
&gt;&gt; Speaker 2: Yeah, okay.

160
00:10:05.121 --> 00:10:08.307
&gt;&gt; Bianca Gandolfo: Mm-hm, good question

161
00:10:08.307 --> 00:10:14.160
though, great.
&gt;&gt; Bianca Gandolfo: I see some

162
00:10:14.160 --> 00:10:22.434
faces in the audience that look confused.
&gt;&gt; Bianca Gandolfo: Let's see,

163
00:10:22.434 --> 00:10:24.760
can someone make up a question?

164
00:10:24.760 --> 00:10:26.170
It might not even be really your question.

165
00:10:26.170 --> 00:10:30.110
It could be just a made-up question.
&gt;&gt; Speaker 2: Wait,

166
00:10:30.110 --> 00:10:34.890
do you ever need to just get
the minimum and max of a list?

167
00:10:34.890 --> 00:10:36.560
Or would you know it was already sorted?

168
00:10:37.590 --> 00:10:40.238
Like would there be a used
case where you could do this?

169
00:10:40.238 --> 00:10:41.074
&gt;&gt; Bianca Gandolfo: Would there be a used

170
00:10:41.074 --> 00:10:42.460
case for this specific example?

171
00:10:43.570 --> 00:10:45.600
Yeah, if you know it's already sorted.

172
00:10:45.600 --> 00:10:49.470
If you're keeping your list sorted, which
is usually a good idea if you need to do

173
00:10:49.470 --> 00:10:54.560
something like this, then yeah, yeah.

174
00:10:54.560 --> 00:10:56.830
But sometimes,
you don't have that luxury, right?

175
00:10:56.830 --> 00:10:58.780
Sometimes you're getting
data from who knows where.

176
00:11:00.730 --> 00:11:05.320
Might not be sorted, you might have
to sort it yourself first, cool.

