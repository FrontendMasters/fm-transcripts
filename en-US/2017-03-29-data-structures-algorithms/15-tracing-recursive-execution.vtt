WEBVTT

1
00:00:00.280 --> 00:00:03.070
&gt;&gt; Bianca Gandolfo: So
WTH is this even doing?

2
00:00:03.070 --> 00:00:06.396
So let's just start with how
the code is executing here.

3
00:00:06.396 --> 00:00:10.850
I'm gonna pull up my Sublime for
us, we'll copy it in.

4
00:00:12.870 --> 00:00:13.930
So remember how I was like, hey,

5
00:00:13.930 --> 00:00:18.660
we're gonna need to know about this
stack trace thing, remember that?

6
00:00:18.660 --> 00:00:20.490
Just a few hours ago, I mentioned that.

7
00:00:20.490 --> 00:00:22.036
This is when this comes in.

8
00:00:22.036 --> 00:00:26.670
What we're gonna do is we're
going to execute this code and

9
00:00:26.670 --> 00:00:28.170
figure out what it's doing.

10
00:00:28.170 --> 00:00:31.520
I might have given you a hint before
about specifically what this is doing.

11
00:00:31.520 --> 00:00:33.910
But let's just check it out.

12
00:00:33.910 --> 00:00:38.133
So the big secret here is this code
is actually doing zero things.

13
00:00:38.133 --> 00:00:39.549
Does anyone know why?

14
00:00:43.007 --> 00:00:46.505
&gt;&gt; Bianca Gandolfo: Because
we haven't called it yet.

15
00:00:46.505 --> 00:00:49.989
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Bianca Gandolfo: Come on, all right, so

16
00:00:49.989 --> 00:00:51.200
here we go.

17
00:00:52.440 --> 00:00:54.970
We just called it for the first time, and

18
00:00:54.970 --> 00:00:59.870
this is my line saying,
this is what's happening underneath.

19
00:00:59.870 --> 00:01:01.170
Get it, it's underneath.

20
00:01:01.170 --> 00:01:04.250
And this is our code
that's gonna be executing.

21
00:01:04.250 --> 00:01:05.631
Right, we'll have it as a reference.

22
00:01:05.631 --> 00:01:06.882
Are you following here?

23
00:01:06.882 --> 00:01:13.030
All right, so
we just invoked a function called callMe.

24
00:01:13.030 --> 00:01:15.710
So we're gonna put this function
definition onto our stack.

25
00:01:17.540 --> 00:01:19.570
We jump into the body of our function.

26
00:01:19.570 --> 00:01:20.460
My gosh, another one.

27
00:01:21.670 --> 00:01:25.380
And let's just number
this just to keep track.

28
00:01:25.380 --> 00:01:26.781
Yeah, and so this is 1,
all right, I'm sorry, this is 2.

29
00:01:26.781 --> 00:01:31.317
And this will be useful later, right?

30
00:01:31.317 --> 00:01:38.028
Cuz right now this one's kind of just
a funny example, no, what's going on?

31
00:01:42.665 --> 00:01:45.687
&gt;&gt; Bianca Gandolfo: So we have found
ourselves in an infinite loop,

32
00:01:45.687 --> 00:01:48.641
I can be dramatic and
keep doing this forever.

33
00:01:49.821 --> 00:01:52.330
&gt;&gt; Bianca Gandolfo: But
I think we get the point, right?

34
00:01:52.330 --> 00:01:54.300
Now, what this function is doing,
it's calling itself,

35
00:01:54.300 --> 00:01:56.049
calling itself into an infinite loop.

36
00:01:57.050 --> 00:01:59.150
The other thing is,
if you have an infinite loop,

37
00:01:59.150 --> 00:02:01.680
these things are never gonna happen after.

38
00:02:01.680 --> 00:02:03.710
So this callMe has never been invoked.

39
00:02:04.920 --> 00:02:07.550
This one that says anytime
has never been invoked.

40
00:02:08.820 --> 00:02:11.301
And in fact,
we're just kind of stuck in this forever.

41
00:02:11.301 --> 00:02:12.525
And it's definitely gonna
crash your browser.

42
00:02:12.525 --> 00:02:17.330
So don't run this code,
if you don't want that to happen, cool.

43
00:02:17.330 --> 00:02:22.016
However, I think I have
some on my next slide.

44
00:02:22.016 --> 00:02:25.924
Do I, where?

45
00:02:25.924 --> 00:02:31.200
All right, so great,
we have this infinite loop,

46
00:02:31.200 --> 00:02:36.180
take some away just to make some space.

47
00:02:36.180 --> 00:02:37.720
How do we stop it from looping?

48
00:02:39.740 --> 00:02:42.080
So now we have this thing,
it's looping forever.

49
00:02:42.080 --> 00:02:46.643
It's not useful to us.

50
00:02:46.643 --> 00:02:51.256
What would be one way to
stop it from looping?

51
00:02:51.256 --> 00:02:53.150
&gt;&gt; Speaker 2: Give it a break condition.

52
00:02:53.150 --> 00:02:55.040
&gt;&gt; Bianca Gandolfo: Yeah, break or return.

53
00:02:55.040 --> 00:02:56.340
&gt;&gt; Speaker 2: Return.

54
00:02:56.340 --> 00:03:01.610
&gt;&gt; Bianca Gandolfo: Yeah, exactly,
it says no more infinite loops, awesome.

55
00:03:01.610 --> 00:03:02.930
Now what is our function doing?

56
00:03:04.730 --> 00:03:06.070
Nothing, it's just immediately returning.

57
00:03:07.170 --> 00:03:09.500
Well, that's not exactly
what we want to do either.

58
00:03:09.500 --> 00:03:11.830
There's no looping happening, right?

59
00:03:11.830 --> 00:03:15.150
For recursion, we want some
looping action, most of the time.

60
00:03:16.200 --> 00:03:17.980
This is just a regular function
that's just returning.

61
00:03:17.980 --> 00:03:20.360
It's no longer recursive,
that's a problem.

62
00:03:22.250 --> 00:03:22.783
Have a question?

63
00:03:22.783 --> 00:03:25.480
&gt;&gt; Speaker 3: Question from the channel,
what is return?

64
00:03:25.480 --> 00:03:26.450
&gt;&gt; Bianca Gandolfo: Ooh, what is return?

65
00:03:26.450 --> 00:03:29.090
Return, that is a really good question.

66
00:03:29.090 --> 00:03:30.890
How do I explain return?

67
00:03:30.890 --> 00:03:36.600
Return is, there's a keyword in JavaScript
that will break out of the function.

68
00:03:36.600 --> 00:03:41.240
It's gonna return from the function
whatever the value that is to the right.

69
00:03:41.240 --> 00:03:45.970
So it could be a string,
you could return numbers if you want.

70
00:03:45.970 --> 00:03:50.600
And it's how you can send data that
perhaps is calculated inside of

71
00:03:50.600 --> 00:03:54.530
the function outside to
maybe another function.

72
00:03:54.530 --> 00:03:58.280
Or, and maybe, yeah probably,

73
00:03:58.280 --> 00:04:02.390
another function is where it's gonna go,
so that's return.

74
00:04:02.390 --> 00:04:05.180
The thing to know about return is
it's gonna break out of the function.

75
00:04:05.180 --> 00:04:10.020
So anything that happens,
after a return statement, won't run.

76
00:04:11.140 --> 00:04:16.000
So since we have a return here,
this callMe('anytime') business never

77
00:04:16.000 --> 00:04:21.230
happens, which is why this isn't recursive
anymore because we have this return.

78
00:04:21.230 --> 00:04:22.750
That kind of ruins everything.

79
00:04:22.750 --> 00:04:24.330
It fixes one thing, right?

80
00:04:24.330 --> 00:04:25.658
But it ruins everything else.

81
00:04:30.211 --> 00:04:38.762
&gt;&gt; Bianca Gandolfo: So what should we do?

82
00:04:38.762 --> 00:04:40.240
I'm stumped.

83
00:04:52.351 --> 00:04:54.786
&gt;&gt; Bianca Gandolfo: We
want it to be recursive.

84
00:04:54.786 --> 00:04:57.170
&gt;&gt; Speaker 3: Suggestion,
base case, if statement.

85
00:04:57.170 --> 00:05:00.527
&gt;&gt; Bianca Gandolfo: Yeah, yeah,
absolutely, thank you Sarah K.

86
00:05:00.527 --> 00:05:05.602
We wanna have some conditional
that will allow us

87
00:05:05.602 --> 00:05:11.686
to be recursive without having
an unlimited loop, yeah?

88
00:05:11.686 --> 00:05:17.310
All right, cool, so
what would that might look like?

89
00:05:17.310 --> 00:05:24.290
Maybe we have a tracker here,
does that make sense?

90
00:05:24.290 --> 00:05:27.152
Let's see how this works,
it's a little bit different.

91
00:05:30.364 --> 00:05:31.958
&gt;&gt; Bianca Gandolfo: All right.

92
00:05:34.884 --> 00:05:36.441
&gt;&gt; Bianca Gandolfo: Oops.

93
00:05:39.491 --> 00:05:43.150
&gt;&gt; Bianca Gandolfo: All right,
are we ready?

94
00:05:44.630 --> 00:05:45.565
So we call, callMe.

95
00:05:45.565 --> 00:05:50.540
We have that body of the function here,
great.

96
00:05:50.540 --> 00:05:51.860
We increment tracker.

97
00:05:51.860 --> 00:05:53.560
What is tracker?

98
00:05:53.560 --> 00:05:54.270
Tracker is 0.

99
00:05:54.270 --> 00:05:56.440
Well, actually well,
let's just say it's 1 is fine.

100
00:05:58.150 --> 00:06:02.830
And so if tracker is 3,
this is gonna be false.

101
00:06:02.830 --> 00:06:06.860
We don't Enter here, which means
we get to jump into a recursion.

102
00:06:06.860 --> 00:06:11.910
callMe, which means that we have to

103
00:06:11.910 --> 00:06:16.890
put another function on the stack,
so this is gonna be our second one.

104
00:06:16.890 --> 00:06:19.710
Let's put it in loops, in braces.

105
00:06:19.710 --> 00:06:22.690
So this means this is the second
function call, just to clarify.

106
00:06:22.690 --> 00:06:24.763
And then I'm also gonna put it here,
just so

107
00:06:24.763 --> 00:06:27.075
we can keep track of how
this is working in order.

108
00:06:27.075 --> 00:06:29.831
Are we all following?

109
00:06:29.831 --> 00:06:32.403
Great, so here's a second one.

110
00:06:32.403 --> 00:06:33.790
We're gonna increment tracker.

111
00:06:33.790 --> 00:06:34.810
Tracker is now 2.

112
00:06:36.050 --> 00:06:39.070
So if tracker is 3, no, that is false.

113
00:06:39.070 --> 00:06:41.044
We're gonna skip this one, keep going.

114
00:06:41.044 --> 00:06:45.896
We're gonna call again,
this is gonna be the third one.

115
00:06:47.219 --> 00:06:50.896
&gt;&gt; Bianca Gandolfo: And
comment this, now this is 3, true!

116
00:06:50.896 --> 00:06:54.430
Now this returns loops, okay?

117
00:06:54.430 --> 00:06:56.920
So because we have a return statement
it's not gonna continue on.

118
00:06:58.460 --> 00:07:02.392
We are going to pop,
&gt;&gt; Bianca Gandolfo: This off,

119
00:07:02.392 --> 00:07:03.830
cuz we're returning.

120
00:07:03.830 --> 00:07:05.540
That's how the pop happens,
you have to return.

121
00:07:07.440 --> 00:07:12.703
And now since we popped out of this,
this is gonna return the string loops.

122
00:07:12.703 --> 00:07:14.340
Does that make sense?

123
00:07:16.380 --> 00:07:16.998
Cool, and

124
00:07:16.998 --> 00:07:22.704
then since this is finished executing,
&gt;&gt; Bianca Gandolfo: Well,

125
00:07:22.704 --> 00:07:25.100
pop, this one is now finished executing.

126
00:07:26.280 --> 00:07:26.870
And we have a pop.

127
00:07:28.740 --> 00:07:29.329
Should we see it in action?

128
00:07:36.549 --> 00:07:37.426
&gt;&gt; Bianca Gandolfo: callMe, whoo!

129
00:07:37.426 --> 00:07:41.715
[APPLAUSE] But what's missing?

130
00:07:43.119 --> 00:07:46.890
&gt;&gt; Bianca Gandolfo: There was
a piece of data that we highlighted.

131
00:07:46.890 --> 00:07:50.520
&gt;&gt; Speaker 2: We didn't send it
all the way back up the tree.

132
00:07:50.520 --> 00:07:52.608
&gt;&gt; Bianca Gandolfo: Yeah,
so we had return loops.

133
00:07:52.608 --> 00:07:55.509
And perhaps, maybe it was useful for us.

134
00:07:56.930 --> 00:08:01.570
In our specific implementation
to return this string, but

135
00:08:01.570 --> 00:08:04.370
it got stuck somewhere, yeah?

136
00:08:05.630 --> 00:08:08.990
Actually, lets review where it got stuck.

137
00:08:10.730 --> 00:08:14.709
So we return here,
then when we get to this.

138
00:08:15.760 --> 00:08:17.548
We're not actually returning the string.

139
00:08:19.878 --> 00:08:22.335
&gt;&gt; Bianca Gandolfo: It's
gonna return undefined,

140
00:08:22.335 --> 00:08:26.498
because the function,
&gt;&gt; Bianca Gandolfo: It just

141
00:08:26.498 --> 00:08:30.061
automatically returns undefined at the end
and so it's gonna keep doing that.

142
00:08:32.527 --> 00:08:39.414
&gt;&gt; Bianca Gandolfo: And doing that, so
this returns undefined, which means this,

143
00:08:39.414 --> 00:08:44.387
and then this also returns
undefined as well,

144
00:08:44.387 --> 00:08:50.144
which means this one is also
gonna return undefined.

145
00:08:57.548 --> 00:09:01.660
&gt;&gt; Bianca Gandolfo: Can I have
one question from someone?

146
00:09:01.660 --> 00:09:05.490
&gt;&gt; Speaker 3: Do we need to set
the tracker back to 0, though?

147
00:09:07.340 --> 00:09:11.520
&gt;&gt; Bianca Gandolfo: I mean, yeah probably,
this tracker lives in an outside world

148
00:09:11.520 --> 00:09:16.360
where it's in a global context, just not a
best practice, that's just for an example.

149
00:09:16.360 --> 00:09:18.610
But yeah,
ideally you'd want to set it back to 0.

150
00:09:18.610 --> 00:09:22.600
And it would be a matter of,
where would you do that, right?

151
00:09:22.600 --> 00:09:24.596
Probably when you return, right?

152
00:09:28.280 --> 00:09:32.112
&gt;&gt; Bianca Gandolfo: Something like that,
but anyways super dangerous because if you

153
00:09:32.112 --> 00:09:37.760
have a bunch of callMes happening, it's
all gonna be affecting the same tracker.

154
00:09:37.760 --> 00:09:39.468
So not a good idea.

155
00:09:39.468 --> 00:09:43.760
&gt;&gt; Speaker 3: Can you just
do a return callMe anytime?

156
00:09:43.760 --> 00:09:47.372
&gt;&gt; Bianca Gandolfo: Yeah, totally,
so if you return callMe anytime,

157
00:09:47.372 --> 00:09:52.160
instead what's gonna happen,
instead of it returning a new find,

158
00:09:52.160 --> 00:09:55.270
it's gonna return whatever this returns.

159
00:09:55.270 --> 00:09:57.140
Does that make sense?

160
00:09:57.140 --> 00:09:58.510
And what that returns is loops.

161
00:09:59.540 --> 00:10:00.521
So we pop it off.

162
00:10:04.658 --> 00:10:06.490
&gt;&gt; Bianca Gandolfo: Again,
we'll just pretend that we have that.

163
00:10:07.870 --> 00:10:16.140
And that's how we get to
preserve our return value.

164
00:10:16.140 --> 00:10:19.900
This might seem silly now, but this is a
really common mistake when we do recursion

165
00:10:19.900 --> 00:10:23.888
and we forget to return up or
people just memorize it.

166
00:10:23.888 --> 00:10:26.891
I have to return the function,
the last function.

167
00:10:26.891 --> 00:10:31.062
So I'm just gonna put a return there
without actually understanding why it is

168
00:10:31.062 --> 00:10:35.310
so important that you have two return
statements in your recursive function.

169
00:10:35.310 --> 00:10:37.538
This is why, for this style.

170
00:10:37.538 --> 00:10:39.600
There's a few different ways to do it,
but specifically for this style,

171
00:10:39.600 --> 00:10:40.310
that's why you have it.

