WEBVTT

1
00:00:00.190 --> 00:00:01.640
&gt;&gt; Bianca Gandolfo: So
we're just gonna go over the solution for

2
00:00:01.640 --> 00:00:03.970
implementing a hash
table before we wrap up.

3
00:00:03.970 --> 00:00:05.710
So here's our hash table.

4
00:00:05.710 --> 00:00:12.570
We initialize it with a size that we can
pass in, empty storage, and a counter.

5
00:00:14.450 --> 00:00:21.250
So if we wanted to create myHash table,
we'd say new HashTable.

6
00:00:21.250 --> 00:00:26.787
Then we'll pass it [COUGH] into size 5,
cool.

7
00:00:28.510 --> 00:00:29.830
&gt;&gt; Bianca Gandolfo: Pretty
straightforward,

8
00:00:29.830 --> 00:00:31.556
just creating an empty HashTable.

9
00:00:31.556 --> 00:00:35.364
So we console.log(myHash),

10
00:00:35.364 --> 00:00:39.309
it will look something like this.

11
00:00:42.786 --> 00:00:48.647
&gt;&gt; Bianca Gandolfo: Right size,
storage as empty and

12
00:00:48.647 --> 00:00:53.170
then count 0, right.

13
00:00:53.170 --> 00:00:56.270
So it looks like, cool.

14
00:00:56.270 --> 00:01:01.543
So we have this helper function
called find, takes a key and

15
00:01:01.543 --> 00:01:08.720
it's gonna hash, right, it's gonna hash
the key along with the size, right?

16
00:01:08.720 --> 00:01:12.120
Because the hash function is gonna
be different depending on the size

17
00:01:12.120 --> 00:01:14.424
of the hash table.

18
00:01:17.290 --> 00:01:20.804
&gt;&gt; Bianca Gandolfo: Cool, so
then we just do a look up

19
00:01:20.804 --> 00:01:26.223
or,
&gt;&gt; Bianca Gandolfo: This that stores

20
00:01:26.223 --> 00:01:32.010
that hash is the value or
something that's empty.

21
00:01:32.010 --> 00:01:33.330
We have some bucket.

22
00:01:33.330 --> 00:01:34.510
We have a match.

23
00:01:34.510 --> 00:01:35.190
We have some match index.

24
00:01:35.190 --> 00:01:39.380
We're gonna loop through our bucket,
right?

25
00:01:39.380 --> 00:01:40.810
This is if we have multiples.

26
00:01:42.840 --> 00:01:45.760
Yeah, if we have multiples
in the same place.

27
00:01:49.470 --> 00:01:50.740
We'll call it a bucket, why not.

28
00:01:52.860 --> 00:01:53.640
Where's our function?

29
00:01:53.640 --> 00:01:56.130
So we're gonna loop, look at that.

30
00:01:56.130 --> 00:01:59.380
So we're gonna loop
through the entire bucket.

31
00:01:59.380 --> 00:02:01.909
We're going to say I have an index.

32
00:02:03.680 --> 00:02:09.139
This is just a gar so that's not looping
through crazy stuff, it matches.

33
00:02:09.139 --> 00:02:13.600
And then return the item that's
the value that we're looking for.

34
00:02:13.600 --> 00:02:16.250
And then also the index.

35
00:02:17.630 --> 00:02:22.180
Now, at the end of the day,
we're gonna return the match,

36
00:02:22.180 --> 00:02:25.840
which is the value, the entire bucket,
and the match index.

37
00:02:29.160 --> 00:02:33.931
&gt;&gt; Bianca Gandolfo: Cool, so
this is handling cases where we have

38
00:02:33.931 --> 00:02:38.451
multiple items in the same index, right,

39
00:02:38.451 --> 00:02:43.737
remember when we had both thingamajig and
hello?

40
00:02:43.737 --> 00:02:45.398
Both of their values
were in the same index.

41
00:02:45.398 --> 00:02:46.530
This is the case where we're
gonna need to loop through that.

42
00:02:46.530 --> 00:02:48.964
We call that, in the index of bucket,

43
00:02:48.964 --> 00:02:53.160
and it's full of whatever collisions
we might have had, right?

44
00:02:53.160 --> 00:02:55.240
And we just save them in there.

45
00:02:55.240 --> 00:02:58.550
And, if this is optimized and everything,

46
00:02:58.550 --> 00:03:03.918
like it is underneath the hood,
this isn't gonna happen all the time,

47
00:03:03.918 --> 00:03:09.205
and it's gonna keep it within,
still, on average, constant time.

48
00:03:09.205 --> 00:03:11.520
Cool, awesome.

49
00:03:11.520 --> 00:03:12.276
And here's a setter.

50
00:03:12.276 --> 00:03:18.160
So it's gonna take your key and value, and
we're gonna save the value in its proper

51
00:03:18.160 --> 00:03:23.450
place, with the key as well, right, so we
can look up later if there's collisions,

52
00:03:23.450 --> 00:03:27.160
so,
&gt;&gt; Bianca Gandolfo: Here we go.

53
00:03:27.160 --> 00:03:31.710
So the match, we're gonna send
it through our find, our bucket.

54
00:03:33.220 --> 00:03:36.000
So this is if we already
have this value saved.

55
00:03:37.400 --> 00:03:40.670
So how an object works is you can't have

56
00:03:42.230 --> 00:03:45.684
two,
&gt;&gt; Bianca Gandolfo: You can't have

57
00:03:45.684 --> 00:03:48.160
different values on the same property,
right?

58
00:03:48.160 --> 00:03:56.067
So whenever you update, if I had wanted
to change thingamajig from true to false,

59
00:03:56.067 --> 00:04:02.500
we can't both have thingamajig = true and
thingamajig = false.

60
00:04:02.500 --> 00:04:05.050
It can only be one.

61
00:04:05.050 --> 00:04:09.850
And so this is making sure
that if it already exists,

62
00:04:09.850 --> 00:04:11.470
we're not gonna put it there.

63
00:04:11.470 --> 00:04:14.260
We're just gonna update the value, right?

64
00:04:14.260 --> 00:04:17.300
So here, if there's a match,
you're gonna update the value.

65
00:04:18.360 --> 00:04:20.370
Otherwise you're gonna add a new item,
right.

66
00:04:20.370 --> 00:04:25.550
The new item is gonna be
initialized as an empty object.

67
00:04:25.550 --> 00:04:30.150
We are gonna add the key and
value, increment the count,

68
00:04:31.690 --> 00:04:34.250
which is gonna be useful later
when we're gonna be resizing.

69
00:04:34.250 --> 00:04:35.790
When we get to a certain size, right?

70
00:04:37.110 --> 00:04:38.600
We're gonna push it into the bucket.

71
00:04:40.240 --> 00:04:44.729
And this is our resize,
if we have a certain size.

72
00:04:46.050 --> 00:04:51.590
And then we just return this at the end so
that we can chain, cool?

73
00:04:53.390 --> 00:04:56.660
Your implementation might be a little bit
more simple than this and that's fine,

74
00:04:56.660 --> 00:04:59.130
it's just accounting for
different situations and

75
00:04:59.130 --> 00:05:02.279
also has the extra credit kind
of included for the resize.

76
00:05:04.160 --> 00:05:07.210
And by kind of, I mean it's using it but
we haven't defined it.

77
00:05:08.840 --> 00:05:09.440
Any questions?

78
00:05:11.910 --> 00:05:14.600
No, cool, and then a getter,

79
00:05:14.600 --> 00:05:19.170
we're just gonna use that find
function again, get that match.

80
00:05:19.170 --> 00:05:22.185
You're gonna return match and match.key.

81
00:05:25.030 --> 00:05:30.518
&gt;&gt; Bianca Gandolfo: Or sorry,
you're gonna return either the match or

82
00:05:30.518 --> 00:05:32.960
match.key, no and.

83
00:05:32.960 --> 00:05:36.499
This is true and
we're gonna return the value.

84
00:05:36.499 --> 00:05:40.529
Okay, so if there's a match,

85
00:05:40.529 --> 00:05:44.870
we'll return the value, cool?

86
00:05:44.870 --> 00:05:47.070
Questions.

87
00:05:47.070 --> 00:05:48.428
Did you guys get a chance
to implement these things?

88
00:05:48.428 --> 00:05:49.070
&gt;&gt; Speaker 2: Mostly.

89
00:05:50.800 --> 00:05:51.960
&gt;&gt; Bianca Gandolfo: Mostly?

90
00:05:51.960 --> 00:05:53.160
Awesome.

91
00:05:53.160 --> 00:05:53.750
It's a fun one.

92
00:05:57.158 --> 00:05:59.620
&gt;&gt; Bianca Gandolfo: All right.

93
00:05:59.620 --> 00:06:02.560
So just a little summary of hash tables.

94
00:06:02.560 --> 00:06:09.134
So the pros, adding is fast,
removing is fast, and accessing is fast.

95
00:06:09.134 --> 00:06:11.470
The cons,
there's no preserved order, right,

96
00:06:11.470 --> 00:06:15.050
so some other data structures
that we looked into, stacks,

97
00:06:15.050 --> 00:06:19.580
queues, linkless trees, have some
order in relationships between them.

98
00:06:19.580 --> 00:06:22.290
Hash tables, we don't have that,
but it's really good,5 and

99
00:06:22.290 --> 00:06:26.220
anytime you're looking up an item or
you're deleting an item,

100
00:06:27.470 --> 00:06:32.600
using a hash table or just a JavaScript
object is gonna be useful.

101
00:06:32.600 --> 00:06:34.880
Why are we implementing
hash tables from scratch?

102
00:06:34.880 --> 00:06:40.530
Because it's a common interview question,
so being armed with this deepens

103
00:06:40.530 --> 00:06:43.730
your understanding of how JavaScript
objects work underneath the hood.

104
00:06:43.730 --> 00:06:47.970
But also, it's fair game in
an interview and it's pretty common.

105
00:06:47.970 --> 00:06:51.619
So know that, cool?

106
00:06:51.619 --> 00:06:55.320
Yeah, ES6 gets you a map data structure.

107
00:06:55.320 --> 00:06:58.460
It's kind of like a hash table,
but it has a preserved order.

108
00:06:58.460 --> 00:07:00.280
So you can look into that.

109
00:07:00.280 --> 00:07:00.780
It's kind of cool.

