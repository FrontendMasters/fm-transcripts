WEBVTT

1
00:00:00.550 --> 00:00:04.220
&gt;&gt; Bianca Gandolfo: Pseudocode,
what might we need in the constructor for

2
00:00:04.220 --> 00:00:05.390
an adjacency list?

3
00:00:05.390 --> 00:00:12.720
So, let's just say for
now it's an array, just for simplicity.

4
00:00:16.843 --> 00:00:17.970
&gt;&gt; Bianca Gandolfo: Okay?

5
00:00:17.970 --> 00:00:22.280
And if we wanted to add a node,
right, we're gonna pass a value.

6
00:00:24.412 --> 00:00:28.752
And we wanna add that value.

7
00:00:33.510 --> 00:00:38.951
&gt;&gt; Bianca Gandolfo: Oops, probably we'll
initialize it to another empty array,

8
00:00:38.951 --> 00:00:44.200
so that then we can add all of
our adjacent nodes or vertices.

9
00:00:45.780 --> 00:00:46.280
&gt;&gt; Speaker 2: Yes.

10
00:00:47.580 --> 00:00:51.590
&gt;&gt; Bianca Gandolfo: Or,
if it already exists, right?

11
00:00:52.870 --> 00:00:59.140
We'll just put whatever that is there or
we'll initialize it, right?

12
00:00:59.140 --> 00:01:02.830
For the case where there's already
something inside of the adjacency list,

13
00:01:02.830 --> 00:01:05.290
and it's not the first
node that we're adding.

14
00:01:08.021 --> 00:01:09.163
&gt;&gt; Bianca Gandolfo: Cool?

15
00:01:09.163 --> 00:01:09.685
&gt;&gt; Speaker 2: Cool.

16
00:01:13.030 --> 00:01:17.168
&gt;&gt; Bianca Gandolfo: So we're gonna have
a data structure that looks like this,

17
00:01:17.168 --> 00:01:23.430
we're gonna add our graph
&gt;&gt; Bianca Gandolfo: .addnode,

18
00:01:23.430 --> 00:01:25.310
and we're gonna pass.

19
00:01:26.990 --> 00:01:29.638
&gt;&gt; Bianca Gandolfo: Just pass 1.

20
00:01:29.638 --> 00:01:33.504
Then, we have,
&gt;&gt; Bianca Gandolfo: And

21
00:01:33.504 --> 00:01:36.980
we're gonna have undefined.

22
00:01:36.980 --> 00:01:42.949
And then, here, we'll have 1, because
that's just how the array will work.

23
00:01:45.360 --> 00:01:50.650
We initialize an array at 1 and
then this doesn't already exist, so

24
00:01:50.650 --> 00:01:52.250
we'll add an empty array.

25
00:01:52.250 --> 00:01:53.210
So there's 1.

26
00:01:56.081 --> 00:02:03.221
&gt;&gt; Speaker 2: Okay,
I think I'm willing to try.

27
00:02:03.221 --> 00:02:04.490
&gt;&gt; Bianca Gandolfo: Two?

28
00:02:17.370 --> 00:02:21.790
&gt;&gt; Bianca Gandolfo: Zero,
one, two, three, four, five.

29
00:02:23.285 --> 00:02:28.760
Okay, so now, we've initialized

30
00:02:28.760 --> 00:02:37.770
three different nodes in our graph,
1, 2 and 5.

31
00:02:37.770 --> 00:02:39.749
But right now they're not
connected to anything else.

32
00:02:42.720 --> 00:02:45.550
&gt;&gt; Bianca Gandolfo: That's
not very useful.

33
00:02:47.120 --> 00:02:49.130
So how might we connect our graph?

34
00:02:50.310 --> 00:02:56.235
&gt;&gt; Speaker 2: So,
assuming we're passing v1 and

35
00:02:56.235 --> 00:03:01.395
v2 to edge, we could do nodes,

36
00:03:01.395 --> 00:03:05.037
index v1.push v2.

37
00:03:13.076 --> 00:03:17.552
&gt;&gt; Speaker 2: It seems like the adjacency
list is just a series of lists of what

38
00:03:17.552 --> 00:03:19.550
it's connected to.

39
00:03:19.550 --> 00:03:20.050
&gt;&gt; Bianca Gandolfo: Yep.

40
00:03:21.770 --> 00:03:24.990
&gt;&gt; Bianca Gandolfo: And then this is
if its only one direction, right?

41
00:03:24.990 --> 00:03:25.600
&gt;&gt; Speaker 2: Yep.

42
00:03:25.600 --> 00:03:31.050
&gt;&gt; Bianca Gandolfo: If it's undirected,
how might this be different?

43
00:03:34.493 --> 00:03:38.181
&gt;&gt; Speaker 2: The whole thing?

44
00:03:40.700 --> 00:03:46.390
&gt;&gt; Bianca Gandolfo: Nope,
we'll just add to both.

45
00:03:46.390 --> 00:03:49.410
Instead of just one.

46
00:03:49.410 --> 00:03:50.076
So, v2 push v1.

47
00:03:50.076 --> 00:03:50.710
&gt;&gt; Speaker 2: [INAUDIBLE].
&gt;&gt; Bianca Gandolfo: Yep.

