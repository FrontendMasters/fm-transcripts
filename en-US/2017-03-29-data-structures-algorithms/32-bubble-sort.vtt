WEBVTT

1
00:00:00.200 --> 00:00:01.310
&gt;&gt; Bianca Gandolfo: So
we're gonna talk about sorting.

2
00:00:01.310 --> 00:00:06.070
How many people here have implemented
some sort of sort on their own?

3
00:00:06.070 --> 00:00:08.180
Two or three of us, very cool.

4
00:00:08.180 --> 00:00:10.640
What's sort?
Do you guys use sorting at work?

5
00:00:10.640 --> 00:00:13.620
Do you implement your own
sorting algorithms at work?

6
00:00:13.620 --> 00:00:14.710
Or you just did it for fun?

7
00:00:19.830 --> 00:00:22.315
&gt;&gt; Bianca Gandolfo: Everyone's now
looking at me, this is really funny.

8
00:00:22.315 --> 00:00:23.290
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Bianca Gandolfo: So,

9
00:00:23.290 --> 00:00:26.060
when did you implement
a sorting algorithm?

10
00:00:27.350 --> 00:00:30.625
&gt;&gt; Speaker 2: I did a binary exclusion
as part of a class one time.

11
00:00:30.625 --> 00:00:33.632
&gt;&gt; Bianca Gandolfo: Mm-hm,
so, for school, cool.

12
00:00:33.632 --> 00:00:38.690
School, for fun?

13
00:00:38.690 --> 00:00:39.930
Suddenly no one knows how to talk.

14
00:00:39.930 --> 00:00:41.729
I have amnesia sometimes, so I understand.

15
00:00:43.550 --> 00:00:49.570
&gt;&gt; Bianca Gandolfo: All right, cool, so
sorting, sorting is super important.

16
00:00:49.570 --> 00:00:53.750
We do have a native sort method in
JavaScript that we'll talk about.

17
00:00:53.750 --> 00:00:56.090
It does not use any of these
elementary sorts, thank God,

18
00:00:56.090 --> 00:01:01.540
because what we're gonna learn is that
they all kind of suck in terms of speed.

19
00:01:01.540 --> 00:01:04.064
But it is important for
us to go through them.

20
00:01:04.064 --> 00:01:08.706
They're gonna be your basic naive
implementation when you sit down in

21
00:01:08.706 --> 00:01:13.505
the chair and the scary interviewer
is like, here is an unsorted list and

22
00:01:13.505 --> 00:01:18.239
blah, blah, blah, something,
something, and you need to sort it.

23
00:01:18.239 --> 00:01:22.284
This is probably what you're gonna
start off with your first stab.

24
00:01:22.284 --> 00:01:27.343
Unless you master one or
both of our tecursive

25
00:01:27.343 --> 00:01:32.140
sorts later this afternoon, cool?

26
00:01:32.140 --> 00:01:34.990
&gt;&gt; Speaker 3: My friend asked me if
we were going to reverse a binary

27
00:01:34.990 --> 00:01:35.920
tree on a whiteboard.

28
00:01:37.090 --> 00:01:39.302
&gt;&gt; Bianca Gandolfo: We are not
gonna be doing any white boarding.

29
00:01:39.302 --> 00:01:43.460
&gt;&gt; Speaker 3: [LAUGH]
Yay.

30
00:01:43.460 --> 00:01:44.358
&gt;&gt; Bianca Gandolfo: But yeah.

31
00:01:44.358 --> 00:01:48.291
If you're gonna be doing white boarding
interviews, definitely practice this kind

32
00:01:48.291 --> 00:01:51.800
of stuff on a, we have one whiteboard,
but that's broken unfortunately.

33
00:01:51.800 --> 00:01:53.670
But good question.

34
00:01:53.670 --> 00:01:54.200
Awesome.

35
00:01:54.200 --> 00:01:57.510
We're gonna start with bubble.

36
00:02:00.090 --> 00:02:02.790
So, basically how bubble sort works, and

37
00:02:02.790 --> 00:02:08.390
I'll just have this gif that
should start working a second.

38
00:02:08.390 --> 00:02:14.560
So bubble sort just compares
adjacent values and

39
00:02:14.560 --> 00:02:18.210
swaps the larger one up to the top.

40
00:02:19.440 --> 00:02:23.660
And so, it's called bubble sort because
the higher numbers start to bubble up

41
00:02:24.900 --> 00:02:29.420
to the end and as we go up you'll
see we'll start to, on the right,

42
00:02:29.420 --> 00:02:34.750
have a sorted array, and on the left
we will have an unsorted array.

43
00:02:34.750 --> 00:02:36.520
Although this sort here
is not optimized so

44
00:02:36.520 --> 00:02:38.850
it's not even thinking
about that too much.

45
00:02:40.210 --> 00:02:41.150
Cool.

46
00:02:41.150 --> 00:02:43.910
There's something really important
that I have to share with you.

47
00:02:43.910 --> 00:02:47.130
Which is this video, which is awesome.

48
00:02:48.619 --> 00:02:51.080
&gt;&gt; Bianca Gandolfo: And
I'll know if you guys are ready for this.

49
00:02:52.090 --> 00:02:52.790
But this is

50
00:02:54.600 --> 00:03:00.470
these Eastern European dances that
implement, have you guys seen this before?

51
00:03:00.470 --> 00:03:03.560
My God, it's so good, are you ready?

52
00:03:03.560 --> 00:03:05.760
I don't know if you guys can hear it.

53
00:03:08.390 --> 00:03:11.000
No, Chrome doesn't play videos.

54
00:03:11.000 --> 00:03:11.910
Let me open Firefox.

55
00:03:11.910 --> 00:03:13.580
Does anyone else have that problem?

56
00:03:19.124 --> 00:03:21.131
&gt;&gt; Bianca Gandolfo: Okay.

57
00:03:21.131 --> 00:03:24.046
&gt;&gt; [MUSIC]

58
00:03:24.046 --> 00:03:30.759
&gt;&gt; Bianca Gandolfo: Isn't this

59
00:03:30.759 --> 00:03:36.803
awesome?

60
00:03:36.803 --> 00:03:44.550
&gt;&gt; [MUSIC]

61
00:03:44.550 --> 00:03:47.500
&gt;&gt; Bianca Gandolfo: If I had free time,
I'd be doing stupid stuff like this.

62
00:03:47.500 --> 00:03:48.400
Come on.

63
00:03:48.400 --> 00:03:54.690
They're gonna get started any second now.

64
00:03:54.690 --> 00:03:56.645
Here we go.

65
00:03:56.645 --> 00:04:06.215
&gt;&gt; [MUSIC]

66
00:04:06.215 --> 00:04:07.091
&gt;&gt; Bianca Gandolfo: Come on,
start sorting.

67
00:04:07.091 --> 00:04:13.405
&gt;&gt; Speaker 2: [LAUGH]
Here we go.

68
00:04:13.405 --> 00:04:15.660
&gt;&gt; Bianca Gandolfo: So we compare,
3 is greater, it goes up.

69
00:04:15.660 --> 00:04:19.190
&gt;&gt; [MUSIC]

70
00:04:19.190 --> 00:04:23.321
&gt;&gt; Bianca Gandolfo: Extra credit if
someone learns this dance before tomorrow.

71
00:04:23.321 --> 00:04:25.064
[LAUGH]

72
00:04:25.064 --> 00:04:26.319
&gt;&gt; [MUSIC]

73
00:04:26.319 --> 00:04:27.687
&gt;&gt; Bianca Gandolfo: Cool, let's skip,

74
00:04:27.687 --> 00:04:30.905
I know you guys wanna watch
all five minutes of it.

75
00:04:30.905 --> 00:04:33.058
&gt;&gt; Speaker 2: [LAUGH].
&gt;&gt; Bianca Gandolfo: Let's skip maybe

76
00:04:33.058 --> 00:04:34.040
to like-

77
00:04:34.040 --> 00:04:37.140
&gt;&gt; [MUSIC]

78
00:04:37.140 --> 00:04:44.111
&gt;&gt; Bianca Gandolfo: Here,
just to get the full experience.

79
00:04:44.111 --> 00:04:46.920
We are the YouTube generation.

80
00:04:46.920 --> 00:04:48.870
We can't watch anything for
more than 30 seconds.

81
00:04:48.870 --> 00:04:50.300
&gt;&gt; [MUSIC]

82
00:04:50.300 --> 00:04:54.070
&gt;&gt; Bianca Gandolfo: And now it's sorted.

83
00:04:54.070 --> 00:04:56.147
&gt;&gt; [MUSIC]

84
00:04:56.147 --> 00:04:58.172
&gt;&gt; Bianca Gandolfo: Awesome.

85
00:04:58.172 --> 00:05:01.881
I just wanted to share that with you,

86
00:05:01.881 --> 00:05:06.667
because I just love any
moment where these can be

87
00:05:06.667 --> 00:05:11.110
slightly more interesting, like any way.

88
00:05:12.340 --> 00:05:14.163
&gt;&gt; [MUSIC]
&gt;&gt; Bianca Gandolfo: [LAUGH] All right,

89
00:05:14.163 --> 00:05:14.710
cool.

90
00:05:14.710 --> 00:05:16.170
So I have-.

91
00:05:16.170 --> 00:05:17.880
&gt;&gt; Speaker 4: Have you see the D3 one?

92
00:05:17.880 --> 00:05:18.950
&gt;&gt; Bianca Gandolfo: They have-.

93
00:05:20.140 --> 00:05:21.344
&gt;&gt; Speaker 4: The sorting with D3?

94
00:05:21.344 --> 00:05:22.227
&gt;&gt; Bianca Gandolfo: Mm-hm.

95
00:05:22.227 --> 00:05:24.105
&gt;&gt; Speaker 4: Okay, I'll post the link.

96
00:05:24.105 --> 00:05:26.310
&gt;&gt; Bianca Gandolfo: They
are some good videos for that?

97
00:05:26.310 --> 00:05:31.121
&gt;&gt; Speaker 4: It's not video, it's-
&gt;&gt; Bianca Gandolfo: It's a D3

98
00:05:31.121 --> 00:05:34.440
visualization, maybe?

99
00:05:34.440 --> 00:05:35.130
&gt;&gt; Speaker 4: Yeah.

100
00:05:35.130 --> 00:05:40.940
Micro Stock has a whole talk
on visualizing algorithms.

101
00:05:40.940 --> 00:05:41.760
&gt;&gt; Bianca Gandolfo: Cool.

102
00:05:41.760 --> 00:05:43.454
That's awesome.
&gt;&gt; Speaker 4: So you can literally type

103
00:05:43.454 --> 00:05:48.630
in, visualizing algorithms
Micro Stock I'll past it into chat.

104
00:05:48.630 --> 00:05:49.130
&gt;&gt; Bianca Gandolfo: Cool.

105
00:05:50.760 --> 00:05:51.850
All right.
&gt;&gt; Speaker 4: They have some really

106
00:05:51.850 --> 00:05:53.090
good stuff.

107
00:05:53.090 --> 00:05:54.450
&gt;&gt; Bianca Gandolfo: So that's bubble sort.

108
00:05:54.450 --> 00:05:59.160
Again, we're comparing adjacent

109
00:05:59.160 --> 00:06:04.190
elements, swapping the bigger one.

110
00:06:04.190 --> 00:06:06.420
Swapping, swapping,
swapping, starting over.

111
00:06:06.420 --> 00:06:07.911
Swapping, swapping,
swapping, starting over.

112
00:06:07.911 --> 00:06:10.268
Swapping, swapping, swapping.

113
00:06:10.268 --> 00:06:13.330
Cool, pretty straightforward.

114
00:06:13.330 --> 00:06:14.859
&gt;&gt; Bianca Gandolfo: Here's our interface.

115
00:06:16.460 --> 00:06:20.570
So bubble sort is a function, it takes
a list and it returns a sorted list.

116
00:06:20.570 --> 00:06:23.500
It does some things in between,
loops through it,

117
00:06:23.500 --> 00:06:25.410
maybe compares some, maybe swaps them.

118
00:06:28.450 --> 00:06:32.370
How is this interface different than when
we were talking about the interfaces for

119
00:06:32.370 --> 00:06:33.100
a data structure?

120
00:06:43.050 --> 00:06:44.240
&gt;&gt; Bianca Gandolfo: Anyone?

121
00:06:44.240 --> 00:06:48.500
&gt;&gt; Speaker 5: Well, the ones where their
data structures had a return value.

122
00:06:50.450 --> 00:06:53.340
This is more like a, I don't know.

123
00:06:53.340 --> 00:06:56.520
I guess that you could say this
is returning a sorted list.

124
00:06:56.520 --> 00:06:58.010
&gt;&gt; Speaker 2: Yeah, mm-hm?

125
00:06:58.010 --> 00:07:01.680
&gt;&gt; Speaker 3: I fee like you would
instantiate a queue or a stack.

126
00:07:01.680 --> 00:07:02.701
&gt;&gt; Bianca Gandolfo: Yeah yeah yeah.
&gt;&gt; Speaker 3: And this is just

127
00:07:02.701 --> 00:07:06.670
a function you pass a list to,
and it returns a sorted list.

128
00:07:06.670 --> 00:07:08.460
&gt;&gt; Bianca Gandolfo: Yeah,
exactly, so this is an algorithm.

129
00:07:08.460 --> 00:07:10.910
We're not doing any sort
of class patterns here.

130
00:07:12.026 --> 00:07:16.700
It's just gonna be a function that
takes an input, gives an output.

131
00:07:18.690 --> 00:07:19.470
That's what I'm looking for.

132
00:07:20.500 --> 00:07:23.670
So in our interface, we're not
gonna have a constructor function.

133
00:07:23.670 --> 00:07:25.860
We're not gonna have shared methods.

134
00:07:25.860 --> 00:07:29.280
This is just a method, and
maybe this method could live

135
00:07:30.360 --> 00:07:34.810
as a shared method on
the data structure perhaps.

136
00:07:34.810 --> 00:07:38.560
So this is like sort of a zoom
in of one of those methods

137
00:07:38.560 --> 00:07:42.830
that you might have on a prototype
of some data structure.

138
00:07:42.830 --> 00:07:46.219
Probably not bubble sort because
as you might have noticed,

139
00:07:46.219 --> 00:07:49.949
it's pretty slow that's why
the video is like five minutes long.

140
00:07:49.949 --> 00:07:52.913
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Bianca Gandolfo: But it works,

141
00:07:52.913 --> 00:07:57.408
it works, and if you just need
something that works, I'm not judging.

142
00:07:57.408 --> 00:07:59.697
Cool.

143
00:07:59.697 --> 00:08:06.460
All right, so now it's over to you again.

144
00:08:06.460 --> 00:08:12.590
We're gonna pseudocode bubble sort.

145
00:08:12.590 --> 00:08:17.440
I'm gonna give you ten minutes to
write out some pseudocode about

146
00:08:17.440 --> 00:08:21.860
how you think you can go about
approaching this algorithm.

147
00:08:23.720 --> 00:08:24.300
Let's check it out.

148
00:08:24.300 --> 00:08:25.720
Here's my pseudocode.

149
00:08:25.720 --> 00:08:26.690
Mine says.

150
00:08:30.040 --> 00:08:34.810
&gt;&gt; Bianca Gandolfo: For
k, loop through 1 to n-1.

151
00:08:34.810 --> 00:08:37.352
For i, loop to 0 to n-2.

152
00:08:37.352 --> 00:08:41.890
If the first one is greater than
the second one, or the next one, right,

153
00:08:41.890 --> 00:08:43.240
adjacent, switch them.

154
00:08:45.930 --> 00:08:46.430
Bubble sort.

155
00:08:47.720 --> 00:08:48.750
Anyone do it differently?

156
00:08:54.390 --> 00:08:54.940
&gt;&gt; Speaker 4: While loop.

157
00:08:54.940 --> 00:08:56.480
&gt;&gt; Bianca Gandolfo: While loop.

158
00:08:56.480 --> 00:08:57.845
Instead of the other one.

159
00:08:57.845 --> 00:09:03.130
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Okay, cool.

160
00:09:03.130 --> 00:09:04.209
No?

161
00:09:04.209 --> 00:09:07.470
Okay, so that's the pseudocode for
bubble sort.

162
00:09:07.470 --> 00:09:12.140
We're gonna jump into how do we
analyze the run time of bubble sort?

163
00:09:13.800 --> 00:09:14.700
Cool.

164
00:09:14.700 --> 00:09:20.443
So, our loop, ( n- 1 ), right,
because we're only looping to the end.

165
00:09:20.443 --> 00:09:26.960
Next one, ( n- 2 ), right?

166
00:09:26.960 --> 00:09:28.750
Which probably isn't gonna matter later.

167
00:09:28.750 --> 00:09:31.630
Remember that these smaller
things don't really matter.

168
00:09:33.180 --> 00:09:36.886
Then we have some constant swaps and
things like that, yeah?

169
00:09:40.319 --> 00:09:44.220
&gt;&gt; Bianca Gandolfo: Cool, so again,
since they're nested, we multiply them.

170
00:09:46.050 --> 00:09:51.740
And you can use a polynomial expander
if you want, or you can do it yourself.

171
00:09:51.740 --> 00:09:55.530
If you wanna like hark back to,
what's that?

172
00:09:55.530 --> 00:09:58.070
Trigonometry, precalculus or something?

173
00:09:58.070 --> 00:09:58.630
&gt;&gt; Speaker 3: Yeah.

174
00:09:58.630 --> 00:10:00.660
&gt;&gt; Bianca Gandolfo: But
it comes out to this.

175
00:10:02.400 --> 00:10:08.860
&gt;&gt; Bianca Gandolfo: Where really
all we care about is the n squared.

176
00:10:08.860 --> 00:10:12.360
So if you add it all up, or
multiply it all up and then expand it,

177
00:10:12.360 --> 00:10:14.540
it'll look like this.

178
00:10:14.540 --> 00:10:19.140
But at the end of the day,
we consider this an n squared algorithm.

179
00:10:19.140 --> 00:10:22.870
So yeah, there is some math that
you can do if you're into that.

180
00:10:22.870 --> 00:10:27.710
But when we're thinking about it, we only
think about it in terms of n squared.

181
00:10:31.066 --> 00:10:35.412
&gt;&gt; Bianca Gandolfo: Cool, any questions?

182
00:10:38.760 --> 00:10:40.910
&gt;&gt; Bianca Gandolfo: Is everyone
clear how we got this?

183
00:10:43.730 --> 00:10:48.540
&gt;&gt; Speaker 4: Can you explain
the first two things, k and i?

184
00:10:48.540 --> 00:10:49.621
&gt;&gt; Bianca Gandolfo: k and i.

185
00:10:49.621 --> 00:10:54.170
Yeah that's like when you say for i = 0,
for k = 0, or j, just a variable name.

186
00:10:54.170 --> 00:11:00.610
So this is a variable name in our loop.

187
00:11:02.640 --> 00:11:07.093
&gt;&gt; Bianca Gandolfo: This is just sort
of like a standard pseudocode kind

188
00:11:07.093 --> 00:11:08.240
of wording.

189
00:11:11.270 --> 00:11:14.896
&gt;&gt; Bianca Gandolfo: So
you're looping through and all the, for

190
00:11:14.896 --> 00:11:19.610
every loop this is gonna be
incremented from 1 to n- 1.

191
00:11:19.610 --> 00:11:23.070
So the first loop k will be 1,
the second loop will be 2, etc.

192
00:11:23.070 --> 00:11:27.519
And then for i, I'll start at 0 and
we'll go to n- 2.

193
00:11:29.310 --> 00:11:32.480
&gt;&gt; Speaker 4: So n is the length of the-
&gt;&gt; Bianca Gandolfo: Of the list.

194
00:11:32.480 --> 00:11:33.160
&gt;&gt; Speaker 4: Yeah, yeah, okay.

195
00:11:33.160 --> 00:11:34.530
&gt;&gt; Bianca Gandolfo: Yeah,
exactly, exactly.

196
00:11:36.580 --> 00:11:44.090
So a is our array, we have i,
i + 1, and we swapped them.

197
00:11:46.890 --> 00:11:50.870
&gt;&gt; Bianca Gandolfo: Cool,
since they're nested, we multiply them.

198
00:11:50.870 --> 00:11:52.140
This is called a polynomial.

199
00:11:52.140 --> 00:11:54.210
That's not really important.

200
00:11:54.210 --> 00:11:57.650
All we need to know is at the end
of the day it goes to n squared.

201
00:11:57.650 --> 00:11:59.020
If you can see that pattern and

202
00:11:59.020 --> 00:12:02.030
you can make that estimation,
that's all you need to do.

203
00:12:02.030 --> 00:12:03.840
But if you're interested in that,

204
00:12:03.840 --> 00:12:08.180
you can also do it more
specifically if you'd like.

205
00:12:08.180 --> 00:12:09.900
&gt;&gt; Speaker 4: What's k in this?

206
00:12:09.900 --> 00:12:13.790
&gt;&gt; Bianca Gandolfo: k is the variable
in the loop when you say 4 of our i.

207
00:12:13.790 --> 00:12:14.878
Yeah.
&gt;&gt; Speaker 4: It's just the editor.

208
00:12:14.878 --> 00:12:17.181
&gt;&gt; Bianca Gandolfo: Mm-hm.

209
00:12:17.181 --> 00:12:20.630
Yeah, great.

210
00:12:20.630 --> 00:12:22.230
So we have some nested loops in here.

211
00:12:23.530 --> 00:12:24.880
We know that's gonna be n squared.

212
00:12:27.410 --> 00:12:28.660
Doesn't it feel nice?

213
00:12:28.660 --> 00:12:32.130
You can dust off the math.

214
00:12:32.130 --> 00:12:36.920
Except for our mathematician David,
he's probably sad.

215
00:12:36.920 --> 00:12:38.330
But everyone else is probably relieved.

216
00:12:38.330 --> 00:12:39.250
Do we feel relieved?

217
00:12:40.340 --> 00:12:40.840
A little bit?

218
00:12:42.360 --> 00:12:47.610
Less intimidated by it,
perhaps, hopefully.

219
00:12:47.610 --> 00:12:49.350
Okay, cool.

220
00:12:49.350 --> 00:12:53.040
&gt;&gt; Speaker 4: Yeah, and of course you can
just replace the n- 1 with n instead of

221
00:12:53.040 --> 00:12:54.050
expanding, right?

222
00:12:54.050 --> 00:12:55.670
Unless you like multiplying.

223
00:12:55.670 --> 00:12:57.472
&gt;&gt; Bianca Gandolfo: Yep, absolutely.

224
00:13:00.312 --> 00:13:06.486
&gt;&gt; Bianca Gandolfo: All right so,
you could optimize it a little bit,

225
00:13:06.486 --> 00:13:10.750
and not loop all the way to the end.

226
00:13:11.850 --> 00:13:13.084
And then we have something called n-k-1.

227
00:13:13.084 --> 00:13:19.220
Because we're not going to the end
as the end of our loop is sorted.

228
00:13:19.220 --> 00:13:21.520
Do you have a question?

229
00:13:21.520 --> 00:13:23.820
&gt;&gt; Speaker 5: You want the inner
loop to have a k in it, right?

230
00:13:23.820 --> 00:13:24.479
Not the outer.

231
00:13:28.270 --> 00:13:29.940
&gt;&gt; Bianca Gandolfo: Yeah you
might be right there, thank you.

232
00:13:31.340 --> 00:13:34.670
Either way,
the point here that I'm trying to make

233
00:13:34.670 --> 00:13:37.270
is that at the end of the day
this is still n squared.

234
00:13:37.270 --> 00:13:41.358
So even if we optimize this a little bit,

235
00:13:41.358 --> 00:13:45.810
still gonna be n squared, so there we are.

236
00:13:45.810 --> 00:13:52.890
Bubble sort, n squared, space complexity,
constant, cuz it's in place.

