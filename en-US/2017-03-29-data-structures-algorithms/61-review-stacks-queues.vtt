WEBVTT

1
00:00:00.160 --> 00:00:03.280
&gt;&gt; Bianca Gandolfo: What is a stack,
and what is a queue?

2
00:00:03.280 --> 00:00:05.540
They are both ordered
collections of items.

3
00:00:07.140 --> 00:00:10.250
Ordered, not sorted, but
there is an order to them.

4
00:00:11.450 --> 00:00:12.962
They are a limited access data structure.

5
00:00:12.962 --> 00:00:17.740
That means that you can only access
certain elements given some rules.

6
00:00:17.740 --> 00:00:21.344
Versus a random access data
structure like an array,

7
00:00:21.344 --> 00:00:24.394
you can access in the middle
if you wanted to.

8
00:00:24.394 --> 00:00:27.120
For a stack or
a queue there are certain rules, right?

9
00:00:27.120 --> 00:00:30.620
Either last in first out,
or first in first out.

10
00:00:30.620 --> 00:00:33.910
They are known for
fast insert and fast removal.

11
00:00:37.270 --> 00:00:39.145
Cool, so what are the differences?

12
00:00:39.145 --> 00:00:41.040
A stack is Last in/First Out.

13
00:00:41.040 --> 00:00:44.470
So the last one you put on top
you also take that one off.

14
00:00:44.470 --> 00:00:47.290
A queue is First in/First Out.

15
00:00:48.640 --> 00:00:50.158
The first one in is the first one out.

16
00:00:50.158 --> 00:00:57.100
So it comes out in I would say correct
order in terms of if we're taking turns.

17
00:00:57.100 --> 00:01:00.524
We all use the example, for some reason,
standing in line at the deli.

18
00:01:00.524 --> 00:01:04.017
Literally every single thing you find
on the Internet about a queue it talks

19
00:01:04.017 --> 00:01:04.693
about a deli.

20
00:01:04.693 --> 00:01:06.335
I don't think everyone's from New York.

21
00:01:06.335 --> 00:01:07.300
&gt;&gt; class: [LAUGH]
&gt;&gt; Bianca Gandolfo: Just really bad

22
00:01:07.300 --> 00:01:08.410
at making examples.

23
00:01:08.410 --> 00:01:13.560
A stack, everyone talks about pancake
stacks, or a stack of books, actually.

24
00:01:13.560 --> 00:01:14.800
A stack of books is the one.

25
00:01:16.180 --> 00:01:21.696
And some vocab, push and pop,
we talk about stacks in those terms.

26
00:01:21.696 --> 00:01:22.970
Queue, dequeue, enqueue.

27
00:01:22.970 --> 00:01:27.030
Sometimes they'll be different names,
but more or less the same.

28
00:01:27.030 --> 00:01:28.380
It's the same idea, just different names.

29
00:01:29.900 --> 00:01:32.170
Cool, so some uses for a stack.

30
00:01:32.170 --> 00:01:33.400
Backtracking, undo.

31
00:01:33.400 --> 00:01:36.150
We explored the call stack with recursion.

32
00:01:36.150 --> 00:01:37.800
Kind of explored how that works.

33
00:01:37.800 --> 00:01:40.420
Parsing expressions, depth first search.

34
00:01:40.420 --> 00:01:42.670
Queue we use for breadth first search.

35
00:01:42.670 --> 00:01:44.150
We looked at our pop-up messages.

36
00:01:44.150 --> 00:01:46.670
We have our event queue in the browser.

37
00:01:46.670 --> 00:01:49.530
Whenever you click on something,
queues up.

38
00:01:49.530 --> 00:01:53.690
HTTP requests to a server
are gonna be queued up and

39
00:01:53.690 --> 00:01:58.790
answered in order, maybe, maybe.

40
00:01:59.990 --> 00:02:02.880
In the order in which it arrives, but
whenever it gets there, who knows?

41
00:02:05.480 --> 00:02:11.010
Cool.
So how do we implement them?

42
00:02:12.190 --> 00:02:15.190
We implemented them using objects, but

43
00:02:15.190 --> 00:02:18.110
you can also implement them
using linked lists or arrays.

44
00:02:18.110 --> 00:02:22.044
We also implemented a stack using
a string if you guys remember that.

45
00:02:22.044 --> 00:02:25.851
We have different ways of implementation,
so you need to be mindful of the pros and

46
00:02:25.851 --> 00:02:29.500
cons for each,
&gt;&gt; Bianca Gandolfo: That's all I ask.

47
00:02:29.500 --> 00:02:31.050
Let's take a look.

48
00:02:31.050 --> 00:02:33.130
So here is an implementation
using an array.

49
00:02:33.130 --> 00:02:36.420
Someone was asking me about this
the other day, so here we are.

50
00:02:36.420 --> 00:02:38.690
We have our elements,
our storage is an array.

51
00:02:39.810 --> 00:02:42.976
When we pop it off, again, constant time.

52
00:02:42.976 --> 00:02:49.420
When we push, also constant time, great.

53
00:02:49.420 --> 00:02:54.570
Queue enqueue, so when we push,
again, we have our constant time.

54
00:02:54.570 --> 00:02:58.880
However when we dequeue we're
using the shift operator, or

55
00:02:58.880 --> 00:03:01.710
shift method, method, method.

56
00:03:01.710 --> 00:03:03.600
Sorry to sound like a Minnesotan.

57
00:03:03.600 --> 00:03:04.630
Method.

58
00:03:04.630 --> 00:03:05.720
Or no is that southern?

59
00:03:05.720 --> 00:03:08.572
&gt;&gt; class: I was gonna say,
we don't sound like that.

60
00:03:08.572 --> 00:03:12.652
&gt;&gt; Bianca Gandolfo: [LAUGH] I gotta
stop before I get pitchforks.

61
00:03:12.652 --> 00:03:14.347
&gt;&gt; class: [LAUGH].

62
00:03:14.347 --> 00:03:16.230
&gt;&gt; Bianca Gandolfo: So
we have a problem here for

63
00:03:16.230 --> 00:03:22.010
our queue that our dequeue is probably
linear time because of the shift method.

64
00:03:23.991 --> 00:03:24.714
&gt;&gt; Bianca Gandolfo: Cool.

65
00:03:24.714 --> 00:03:26.990
There are some ways to account for this.

66
00:03:26.990 --> 00:03:31.060
If we create an array
that's pretty big and

67
00:03:31.060 --> 00:03:36.020
we start queueing, in the middle of it,
that's a way to save some time.

68
00:03:38.720 --> 00:03:41.280
However, linear time,
if we just do it regular.

69
00:03:42.530 --> 00:03:48.740
So we can optimize it by using an object
and keeping track of the head and tail.

70
00:03:48.740 --> 00:03:53.066
And this is what we did in
our exercises on day one.

71
00:03:53.066 --> 00:03:53.798
&gt;&gt; Bianca Gandolfo: Cool.

72
00:03:58.033 --> 00:04:00.309
&gt;&gt; Bianca Gandolfo: All right,
second queue.

73
00:04:00.309 --> 00:04:07.380
This is mostly an exercise in
just doing the class patterns.

74
00:04:07.380 --> 00:04:10.000
So if you remember back to the class
patterns, we can talk about that.

75
00:04:12.240 --> 00:04:14.950
Anything noteworthy about stack and queue?

76
00:04:20.840 --> 00:04:22.960
&gt;&gt; Student: I think it was
pretty straightforward.

77
00:04:22.960 --> 00:04:27.500
But I have to admit that when it came to
the very first exercise on the first day,

78
00:04:27.500 --> 00:04:28.510
I blanked.

79
00:04:28.510 --> 00:04:29.990
I was like, I didn't even know what to do.

80
00:04:29.990 --> 00:04:31.290
What are the directions here?

81
00:04:32.300 --> 00:04:34.730
&gt;&gt; Bianca Gandolfo: Yeah, and
that's super common, right?

82
00:04:34.730 --> 00:04:40.360
If this connection between an abstract
concept, and how does that turn into code?

83
00:04:40.360 --> 00:04:42.930
You have to exercise that muscle.

84
00:04:42.930 --> 00:04:47.670
And then, after you've done it, then
you're like, that actually wasn't so bad.

85
00:04:51.120 --> 00:04:51.620
Very cool.

86
00:04:53.750 --> 00:04:55.720
Thank you for being honest.

87
00:04:55.720 --> 00:04:56.220
&gt;&gt; Student: Yeah.

88
00:04:56.220 --> 00:04:56.720
&gt;&gt; Bianca Gandolfo: Yeah.

89
00:04:58.921 --> 00:05:00.160
&gt;&gt; Bianca Gandolfo: Cool, anyone else?

90
00:05:02.000 --> 00:05:05.870
Anyone else blank out at the beginning
of the exercise when, yeah?

91
00:05:05.870 --> 00:05:11.820
&gt;&gt; Student2: Sounds very simple, but when
you go to writing it, it there's a block.

92
00:05:11.820 --> 00:05:13.750
&gt;&gt; Bianca Gandolfo: Yeah, yeah, yeah,
unless you're actually doing push and

93
00:05:13.750 --> 00:05:15.010
pop, right?

94
00:05:15.010 --> 00:05:16.520
In which case you get that for free.

95
00:05:16.520 --> 00:05:18.680
&gt;&gt; Student2: Yeah.
&gt;&gt; Bianca Gandolfo: Yeah, cool.

96
00:05:21.060 --> 00:05:23.476
Anything?

97
00:05:23.476 --> 00:05:25.740
Okay, we'll move on.

98
00:05:25.740 --> 00:05:27.280
Okay, Ernest did as well, online.

99
00:05:28.320 --> 00:05:29.520
Ernest is so earnest.

100
00:05:31.141 --> 00:05:36.021
Cool, so further study, it might be
interesting to look into how the call

101
00:05:36.021 --> 00:05:40.111
stack and the event queue work together
when you execute your JavaScript code.

102
00:05:40.111 --> 00:05:41.561
It's kinda cool, I would look into that.

