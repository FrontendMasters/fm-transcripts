WEBVTT

1
00:00:00.400 --> 00:00:02.400
&gt;&gt; Bianca Gandolfo: Binary search tree.

2
00:00:02.400 --> 00:00:04.798
So we implemented it,
we did some exercises,

3
00:00:04.798 --> 00:00:06.955
now we're gonna talk about exploring them.

4
00:00:06.955 --> 00:00:09.570
So we did a little bit of exploration,
right?

5
00:00:09.570 --> 00:00:15.606
When I think about
exploration in an algorithm,

6
00:00:15.606 --> 00:00:22.232
I think about basically
touching every single node in

7
00:00:22.232 --> 00:00:27.250
a tree looking at every item in an array.

8
00:00:28.580 --> 00:00:33.660
Going all the way from head to tail on
the link list and traversing through.

9
00:00:33.660 --> 00:00:39.733
So that, you could maybe do some
transformations with your data.

10
00:00:39.733 --> 00:00:41.494
That would be the main thing.

11
00:00:41.494 --> 00:00:46.003
Or,
&gt;&gt; Bianca Gandolfo: I don't know, maybe

12
00:00:46.003 --> 00:00:49.190
you wanna add up all of the numbers in
your binary search tree for some reason?

13
00:00:49.190 --> 00:00:54.725
Whatever it is, you want to look at
every node in your binary search tree,

14
00:00:54.725 --> 00:00:56.410
we would be doing these traversals.

15
00:00:56.410 --> 00:00:58.350
So there's three different ones.

16
00:00:58.350 --> 00:01:04.120
And the order is important, mostly
because binary search trees are ordered.

17
00:01:04.120 --> 00:01:05.240
And the order for

18
00:01:05.240 --> 00:01:09.560
whatever your implementation is,
is probably gonna matter.

19
00:01:10.960 --> 00:01:12.470
And so
that's why we have these three orders.

20
00:01:14.600 --> 00:01:16.110
So let's just look at our
picture really quick.

21
00:01:17.810 --> 00:01:23.110
So let's imagine that we're
looping through, and we want to

22
00:01:23.110 --> 00:01:27.800
make this the most excited
binary search tree in the world.

23
00:01:27.800 --> 00:01:30.720
And this is my favorite
data transformation.

24
00:01:30.720 --> 00:01:36.410
It's really good for
Twitter plugins when your Twitter

25
00:01:36.410 --> 00:01:40.050
feed is just full of boring people, and
you want to loop, and you just want to

26
00:01:40.050 --> 00:01:45.130
concatenate some explanation points at the
end, to give some excitement to your life.

27
00:01:45.130 --> 00:01:47.590
So that would be
an excitement transformation.

28
00:01:47.590 --> 00:01:49.340
We just put usually three.

29
00:01:49.340 --> 00:01:50.660
I think three is good.

30
00:01:50.660 --> 00:01:51.940
Maybe two.

31
00:01:51.940 --> 00:01:55.719
One if you're kind of subdued
at the end of each data, right?

32
00:01:55.719 --> 00:02:00.699
So, in the case that it's your Twitter
feed, the data would be the text

33
00:02:00.699 --> 00:02:05.513
nodes in your twitter feed, and
in this case we have these numbers and

34
00:02:05.513 --> 00:02:11.540
we'll just transform it into exciting
numbers with exclamation points.

35
00:02:11.540 --> 00:02:16.856
So to make that happen we need to visit
all of our friends here in our tree,

36
00:02:16.856 --> 00:02:19.398
and that's what we're gonna do.

37
00:02:19.398 --> 00:02:21.830
What do you think the time complexity
of that kind of operation is?

38
00:02:21.830 --> 00:02:25.140
I mean, it's super useful, and
it's something you need to do every day.

39
00:02:25.140 --> 00:02:28.880
So it's good to know what the time
complexity of that kind of operation,

40
00:02:28.880 --> 00:02:31.000
every time you wanna
make your data structure

41
00:02:31.000 --> 00:02:37.660
excited.
&gt;&gt; Speaker 2: Linear?

42
00:02:38.920 --> 00:02:39.540
&gt;&gt; Bianca Gandolfo: Why do we think this

43
00:02:39.540 --> 00:02:42.680
is linear?
&gt;&gt; Speaker 2: To do one thing to all of

44
00:02:42.680 --> 00:02:44.260
the things?
&gt;&gt; Bianca Gandolfo: Yeah.

45
00:02:44.260 --> 00:02:45.380
Yeah, exactly.

46
00:02:45.380 --> 00:02:52.140
So it's gonna to be linear because
you're visiting every node once.

47
00:02:52.140 --> 00:02:52.900
Hopefully just once.

48
00:02:52.900 --> 00:02:56.710
If you're doing more than once then
you're probably doing something extra.

49
00:02:56.710 --> 00:02:57.680
&gt;&gt; Speaker 2: Too much excitement.

50
00:02:57.680 --> 00:02:58.549
&gt;&gt; Bianca Gandolfo: Yeah, too exciting.

51
00:03:00.090 --> 00:03:04.680
And so,
if our binary search tree doubled, right?

52
00:03:04.680 --> 00:03:05.830
It's twice as much work.

53
00:03:07.180 --> 00:03:11.208
That's the idea behind a linear algorithm,

54
00:03:11.208 --> 00:03:17.180
great.
&gt;&gt; Bianca Gandolfo: So, before we jump in.

55
00:03:18.990 --> 00:03:22.860
We've done some exploration before,
it's not our first rodeo.

56
00:03:24.050 --> 00:03:27.690
How have we explored a linked list

57
00:03:27.690 --> 00:03:32.486
in the past?
&gt;&gt; Speaker 2: Well,

58
00:03:32.486 --> 00:03:34.637
we'd start at the beginning and

59
00:03:34.637 --> 00:03:38.014
then we'd go on the next object.
&gt;&gt; Bianca Gandolfo: How do you say that in

60
00:03:38.014 --> 00:03:43.630
coding language, though?
&gt;&gt; Speaker 2: We traverse?

61
00:03:43.630 --> 00:03:44.164
&gt;&gt; Bianca Gandolfo: Yeah,

62
00:03:44.164 --> 00:03:45.590
you traversed it.

63
00:03:47.030 --> 00:03:49.749
What piece of JavaScript did
you use to make that happen?

64
00:03:51.890 --> 00:03:52.500
&gt;&gt; Bianca Gandolfo: There was not

65
00:03:52.500 --> 00:03:55.152
abracadabra, explore link list!
&gt;&gt; Speaker 2: Loop

66
00:03:55.152 --> 00:03:56.910
through?
&gt;&gt; Bianca Gandolfo: Yeah.

67
00:03:56.910 --> 00:03:57.740
We use a loop.

68
00:03:57.740 --> 00:04:01.555
What kind of loop do we use?
&gt;&gt; Speaker 2: You use the Y loop.

69
00:04:01.555 --> 00:04:02.980
&gt;&gt; Bianca Gandolfo: Mm-hm.

70
00:04:02.980 --> 00:04:08.470
For our linked list, if you wanna explore
it, we did a little bit when we were just

71
00:04:08.470 --> 00:04:12.830
searching through our linked list when we
will contains for a linked list yesterday.

72
00:04:12.830 --> 00:04:14.090
Is it yesterday?

73
00:04:14.090 --> 00:04:15.510
Think so, I get my days confused.

74
00:04:17.730 --> 00:04:21.920
So we explored it simply by doing a Y
loop, we just made sure we didn't have

75
00:04:21.920 --> 00:04:26.670
an infinite Y loop by
incrementing to the next next,

76
00:04:27.710 --> 00:04:30.980
the next this dot next equals this
dot next next, something like that.

77
00:04:32.600 --> 00:04:35.970
Cool, seems pretty straightforward.

78
00:04:35.970 --> 00:04:40.049
Right start at this, and you go this
dot next, this dot next dot next,

79
00:04:40.049 --> 00:04:41.916
this dot next dot next dot next,

80
00:04:41.916 --> 00:04:45.840
all the way until you get to this
dot next dot next dot next dot next.

81
00:04:45.840 --> 00:04:48.810
And then you just can't say it anymore.

82
00:04:48.810 --> 00:04:50.570
So that's how we explore Linked List.

83
00:04:51.750 --> 00:04:54.103
What about an Array?

84
00:04:54.103 --> 00:04:56.062
We wanted to look at all
elements in the Array,

85
00:04:56.062 --> 00:04:59.216
I think we do this almost every day.
&gt;&gt; Speaker 2: It's for a loop.

86
00:04:59.216 --> 00:04:59.851
&gt;&gt; Bianca Gandolfo: Mm-hm.

87
00:04:59.851 --> 00:05:01.650
Just for loop, look through it,

88
00:05:01.650 --> 00:05:04.626
concatonate all those
exclamation points as needed.

89
00:05:04.626 --> 00:05:11.308
Cool, object?
&gt;&gt; Speaker 2: For

90
00:05:11.308 --> 00:05:13.991
loop?
&gt;&gt; Bianca Gandolfo: For

91
00:05:13.991 --> 00:05:18.356
in loop usually.
&gt;&gt; Bianca Gandolfo: What about our stack

92
00:05:18.356 --> 00:05:23.320
and queue?
&gt;&gt; [INAUDIBLE]

93
00:05:23.320 --> 00:05:24.513
&gt;&gt; Bianca Gandolfo: It's kind of a trick

94
00:05:24.513 --> 00:05:27.750
question, you're not supposed
to be able to do that.

95
00:05:27.750 --> 00:05:28.295
&gt;&gt; Speaker 2: Right.

96
00:05:28.295 --> 00:05:29.051
&gt;&gt; Bianca Gandolfo: [LAUGH]

97
00:05:29.051 --> 00:05:30.600
&gt;&gt; Speaker 3: I was gonna say do we do

98
00:05:30.600 --> 00:05:31.250
that?
&gt;&gt; Bianca Gandolfo: No.

99
00:05:31.250 --> 00:05:32.470
&gt;&gt; Speaker 3: You have to [INAUDIBLE]

100
00:05:32.470 --> 00:05:33.127
&gt;&gt; Bianca Gandolfo: I mean you could

101
00:05:33.127 --> 00:05:35.766
probably do it, right, but
you're not really supposed to.

102
00:05:35.766 --> 00:05:40.726
The whole point of the stack and queue is
you are not supposed to be able to look

103
00:05:40.726 --> 00:05:43.920
through it in the very
generic implementation.

104
00:05:45.170 --> 00:05:50.862
But, create it as you will as you need for
your life.

105
00:05:50.862 --> 00:05:53.174
And you'll be like,
I really need a stack or a queue,

106
00:05:53.174 --> 00:05:54.830
where I can look at everything.

107
00:05:54.830 --> 00:05:57.508
Except Bianca said that
I shouldn't do that-

108
00:05:57.508 --> 00:05:58.634
&gt;&gt; Speaker 3: [LAUGH]

109
00:05:58.634 --> 00:05:59.649
&gt;&gt; Bianca Gandolfo: So now,

110
00:05:59.649 --> 00:06:01.680
now what do I do?

111
00:06:03.090 --> 00:06:06.240
Cool, awesome.

112
00:06:06.240 --> 00:06:10.199
So we are explorers, we have
Indiana Jones hats and stuff like that,

113
00:06:10.199 --> 00:06:11.576
we know how to get down.

114
00:06:11.576 --> 00:06:15.740
Now we're going to talk about how
we might do this with a tree.

115
00:06:17.100 --> 00:06:18.590
A binary tree, specifically.

116
00:06:20.920 --> 00:06:25.250
So, the first one is called
an in-order traversal.

117
00:06:25.250 --> 00:06:27.780
Why do you think it might be
called an in-order traversal?

118
00:06:29.360 --> 00:06:30.950
&gt;&gt; Speaker 2: Equalling in order.

119
00:06:30.950 --> 00:06:31.470
&gt;&gt; Bianca Gandolfo: Yeah, so

120
00:06:31.470 --> 00:06:32.010
it goes in order.

121
00:06:32.010 --> 00:06:35.970
But what's the order exactly?
&gt;&gt; Speaker 2: From smallest to biggest.

122
00:06:35.970 --> 00:06:36.560
&gt;&gt; Bianca Gandolfo: Yeah, so

123
00:06:36.560 --> 00:06:38.330
you're gonna go from smallest to biggest,
exactly.

124
00:06:40.270 --> 00:06:42.480
So how do we do that?

125
00:06:42.480 --> 00:06:44.507
Well in this picture
it makes it look easy.

126
00:06:44.507 --> 00:06:45.080
&gt;&gt; Speaker 3: That is so cool.

127
00:06:45.080 --> 00:06:45.810
&gt;&gt; Bianca Gandolfo: You just follow

128
00:06:45.810 --> 00:06:47.530
the dotted line obviously, right?

129
00:06:47.530 --> 00:06:49.260
You start at 11,
you follow the dotted line,

130
00:06:49.260 --> 00:06:51.370
you show up at three.
&gt;&gt; Speaker 3: That's so

131
00:06:51.370 --> 00:06:53.990
cool.
&gt;&gt; Speaker 2: Find the smallest one first.

132
00:06:55.570 --> 00:06:56.190
Yes.

133
00:06:56.190 --> 00:07:00.130
So you go left until there's
nothing left and then you go right.

134
00:07:00.130 --> 00:07:02.400
&gt;&gt; Bianca Gandolfo: Yep, yep, yep.

135
00:07:03.590 --> 00:07:04.210
But you can't.

136
00:07:04.210 --> 00:07:08.680
When you get to 11 you have
to switch to left again.

137
00:07:08.680 --> 00:07:10.478
&gt;&gt; Speaker 3: Think about if there were

138
00:07:10.478 --> 00:07:13.170
more levels to that.
&gt;&gt; Bianca Gandolfo: Yeah.

139
00:07:13.170 --> 00:07:14.473
&gt;&gt; Speaker 2: Well if you're on the left

140
00:07:14.473 --> 00:07:19.990
line you go to the- One of the above?
&gt;&gt; Bianca Gandolfo: So

141
00:07:19.990 --> 00:07:22.790
just know, what's that?
&gt;&gt; Speaker 2: We call the left?

142
00:07:22.790 --> 00:07:23.647
&gt;&gt; Bianca Gandolfo: Yeah, so

143
00:07:23.647 --> 00:07:26.551
we start at the left, exactly.

144
00:07:26.551 --> 00:07:28.282
So we have to start at the route null.

145
00:07:28.282 --> 00:07:32.663
We don't have a choice.
&gt;&gt; Bianca Gandolfo: I was gonna

146
00:07:32.663 --> 00:07:35.435
say thanks, Obama, but
I don't know if that's appropriate to be

147
00:07:35.435 --> 00:07:36.490
political.
&gt;&gt; Speaker 2: [LAUGH]

148
00:07:36.490 --> 00:07:37.478
&gt;&gt; Bianca Gandolfo: [LAUGH]

149
00:07:39.954 --> 00:07:40.868
&gt;&gt; Bianca Gandolfo: I stopped myself and

150
00:07:40.868 --> 00:07:42.270
then I went there, whatever.

151
00:07:44.290 --> 00:07:49.027
So we start at 11, and then we have
two choices, we can go right, or

152
00:07:49.027 --> 00:07:50.104
we can go left.

153
00:07:50.104 --> 00:07:52.440
So which way do you,
we have to go left, right?

154
00:07:52.440 --> 00:07:55.365
And we're at 7, and then we have
to go left, or we can go right.

155
00:07:55.365 --> 00:07:56.320
We have to go left.

156
00:07:56.320 --> 00:07:58.660
Go left, right?

157
00:07:58.660 --> 00:07:59.273
Do we see a pattern here?

158
00:07:59.273 --> 00:08:04.280
So you go left and then we're calling
a function on each of these data points.

159
00:08:04.280 --> 00:08:05.888
That's a transformation, right?

160
00:08:05.888 --> 00:08:08.870
We're not just like getting and
then moving on through life.

161
00:08:08.870 --> 00:08:16.276
We wanna actually do some
work on each of these nodes.

162
00:08:16.276 --> 00:08:20.440
Cool, so we go left left left,
then we do some work.

163
00:08:20.440 --> 00:08:22.805
There's a callback function,

164
00:08:22.805 --> 00:08:27.275
our excited number function
that puts exclamation points.

165
00:08:27.275 --> 00:08:32.843
Then, perhaps,
we pop out maybe from a recursive call,

166
00:08:32.843 --> 00:08:37.949
maybe, I don't know, and
then we want to go right.

167
00:08:37.949 --> 00:08:43.700
Sorry, then we wanna do it
with the current one, right?

168
00:08:43.700 --> 00:08:45.198
So we pop out of that.

169
00:08:45.198 --> 00:08:48.590
We want to call it, on our current node,
5, because it's the next one.

170
00:08:49.670 --> 00:08:56.610
Then we want to go right and
call it on our right node, 6.

171
00:08:56.610 --> 00:09:04.690
And then maybe we'll pop
out somehow back to 7.

172
00:09:04.690 --> 00:09:06.107
And then, wait.

173
00:09:06.107 --> 00:09:07.715
It's the same thing all over again.

174
00:09:07.715 --> 00:09:10.680
Just like the left.
&gt;&gt; Bianca Gandolfo: The right.

175
00:09:10.680 --> 00:09:17.921
And then we're going to pop back
out to our top root node, okay?

176
00:09:17.921 --> 00:09:23.837
All right.
&gt;&gt; Bianca Gandolfo: Why

177
00:09:23.837 --> 00:09:27.357
is this not showing?
&gt;&gt; Bianca Gandolfo: Okay.

178
00:09:29.229 --> 00:09:31.152
&gt;&gt; Speaker 2: I didn't think the trees had

179
00:09:31.152 --> 00:09:35.062
knowledge of their-
&gt;&gt; [INAUDIBLE]

180
00:09:35.062 --> 00:09:37.168
&gt;&gt; Bianca Gandolfo: Of their parents.

181
00:09:37.168 --> 00:09:37.959
[LAUGH]
&gt;&gt; Speaker 2: [LAUGH]

182
00:09:37.959 --> 00:09:39.130
&gt;&gt; Bianca Gandolfo: [LAUGH] They're orphan

183
00:09:39.130 --> 00:09:39.940
trees.
&gt;&gt; Speaker 2: You know what I mean?

184
00:09:39.940 --> 00:09:43.123
How is 6 getting onto 7?
&gt;&gt; Bianca Gandolfo: Yeah, they don't.

185
00:09:43.123 --> 00:09:47.791
That's the thing is they don't have,
well, I mean it's a loop

186
00:09:47.791 --> 00:09:52.730
data structure right, so
they're all together in the same world.

187
00:09:54.100 --> 00:09:55.108
Did I say loop data structure?

188
00:09:55.108 --> 00:09:56.650
I meant nested.

189
00:09:56.650 --> 00:09:59.044
Nested data structure.
So they all live in the same world, but

190
00:09:59.044 --> 00:10:01.540
they don't necessarily have a pointer.

191
00:10:01.540 --> 00:10:04.619
There's no like, this.parent.value, right?

192
00:10:04.619 --> 00:10:06.664
There could be,
you could implement that, but

193
00:10:06.664 --> 00:10:08.770
we don't do that with our
binary search stream.

194
00:10:08.770 --> 00:10:12.730
We don't have to,
&gt;&gt; Bianca Gandolfo: And we'll see why.

