WEBVTT

1
00:00:00.330 --> 00:00:03.060
&gt;&gt; Bianca Gandolfo: So
we're going to just think about

2
00:00:03.060 --> 00:00:04.780
the key components of our hash table.

3
00:00:04.780 --> 00:00:07.330
We're massaging this into our brain.

4
00:00:07.330 --> 00:00:09.640
So we have the storage, right?

5
00:00:09.640 --> 00:00:11.950
And when we implement our hash table,

6
00:00:11.950 --> 00:00:16.750
we cannot use a object as
storage cuz that's cheating,

7
00:00:16.750 --> 00:00:23.130
just like we couldn't use an array for our
QR stack when our first implementation.

8
00:00:23.130 --> 00:00:27.000
So we're gonna use something to store it,
but it's not gonna be an object.

9
00:00:27.000 --> 00:00:33.509
What do you think it might be?
&gt;&gt; Speaker 2: So

10
00:00:33.509 --> 00:00:36.580
it's not gonna be an object?
&gt;&gt; Bianca Gandolfo: Yeah, our store.

11
00:00:36.580 --> 00:00:37.860
We have to store it somewhere.

12
00:00:37.860 --> 00:00:39.380
It's not gonna be an object.

13
00:00:39.380 --> 00:00:41.940
What's our other option?
&gt;&gt; Speaker 2: Array?

14
00:00:41.940 --> 00:00:43.100
&gt;&gt; Bianca Gandolfo: Yep, we'll

15
00:00:43.100 --> 00:00:44.580
use an array.

16
00:00:44.580 --> 00:00:47.730
We have some hashing function,
that's gonna take our input.

17
00:00:47.730 --> 00:00:54.438
It's gonna return a number that could
be an index in our array, yeah.

18
00:00:54.438 --> 00:00:59.930
And then, we have some operations,
you wanna be able to set.

19
00:01:01.220 --> 00:01:05.820
Which is gonna take the property
in the value, the property or

20
00:01:05.820 --> 00:01:08.510
the key called there
the interchangeable terms.

21
00:01:09.610 --> 00:01:14.018
It is going to map to the location,

22
00:01:14.018 --> 00:01:20.251
the value is what gets to
saved at that location.

23
00:01:20.251 --> 00:01:22.918
You could also save the key,

24
00:01:22.918 --> 00:01:27.932
which you might need to if
we have a collision, yeah?

25
00:01:27.932 --> 00:01:29.700
Does that make sense?

26
00:01:29.700 --> 00:01:33.750
So when we're hashing, we're not
hashing the property and the value.

27
00:01:33.750 --> 00:01:36.250
We're just hashing the property
because if we think about

28
00:01:36.250 --> 00:01:38.600
the interface of an object, right.

29
00:01:38.600 --> 00:01:43.310
When you're doing a key lookup,
you only have a reference to the property.

30
00:01:43.310 --> 00:01:44.660
You usually don't know what the value is.

31
00:01:44.660 --> 00:01:47.450
If you knew what the value is,
you wouldn't be doing the lookup.

32
00:01:47.450 --> 00:01:52.780
So you wanna be able to pass the property
name, so that you can get that value.

33
00:01:52.780 --> 00:01:54.970
So your hash function is only
gonna take the property name.

34
00:01:54.970 --> 00:01:58.370
Even though when you set it you're
gonna take both the property and

35
00:01:58.370 --> 00:02:00.950
the value, when you get to Gt.

36
00:02:00.950 --> 00:02:02.300
You only have the property.

37
00:02:02.300 --> 00:02:05.690
So your hashing function should be
returning a value based on the property,

38
00:02:05.690 --> 00:02:09.210
not a property and a value or the value.

39
00:02:09.210 --> 00:02:10.820
Just the property.

40
00:02:10.820 --> 00:02:12.120
That make sense?

41
00:02:12.120 --> 00:02:16.219
Okay, and then you should be
able to remove it as well.

42
00:02:20.492 --> 00:02:24.006
&gt;&gt; Bianca Gandolfo: Yeah?

43
00:02:24.006 --> 00:02:27.307
&gt;&gt; Speaker 2: When we set the property,

44
00:02:27.307 --> 00:02:31.958
how do you, if we hash the property,

45
00:02:31.958 --> 00:02:34.600
we get
&gt;&gt; Bianca Gandolfo: So no,

46
00:02:34.600 --> 00:02:41.080
when you hash the property,
you get like a hash key.

47
00:02:41.080 --> 00:02:43.680
So whatever it returns, so

48
00:02:43.680 --> 00:02:47.850
you put your property into your hashing
function and it returns some value.

49
00:02:47.850 --> 00:02:51.696
And you could call that a hash code,
a hash key, something like that.

50
00:02:51.696 --> 00:02:52.232
&gt;&gt; Speaker 3: How to,

51
00:02:52.232 --> 00:02:55.820
so why do we see the values here in the,
so

52
00:02:55.820 --> 00:03:01.620
the property we pass through the hash
function, and then we get values.

53
00:03:01.620 --> 00:03:03.936
So at the beginning,

54
00:03:03.936 --> 00:03:08.552
if we set a value how does it works?
&gt;&gt; Bianca Gandolfo: Well, so

55
00:03:08.552 --> 00:03:13.561
I think what you're thinking
about is you're thinking

56
00:03:13.561 --> 00:03:18.910
about the value of the hash
being the value of the property.

57
00:03:18.910 --> 00:03:22.058
And it's actually something
totally different,

58
00:03:22.058 --> 00:03:26.390
so if we open up our.
&gt;&gt; Bianca Gandolfo: Actually let me put

59
00:03:26.390 --> 00:03:27.574
it.
&gt;&gt; Bianca Gandolfo: I'm gonna

60
00:03:27.574 --> 00:03:30.384
put it in here so it's easier to

61
00:03:30.384 --> 00:03:40.150
read.
&gt;&gt; Bianca Gandolfo: Okay.

62
00:03:41.600 --> 00:03:45.563
So when we are, we have like, we have
like myObj equals an object, right?

63
00:03:45.563 --> 00:03:50.043
And then you say, myObj.thingamagig,

64
00:03:50.043 --> 00:03:53.630
magig, I think that's how you.

65
00:03:53.630 --> 00:03:55.731
Could someone spell check that

66
00:03:55.731 --> 00:03:57.202
thingamagig?
&gt;&gt; Speaker 2: I think

67
00:03:57.202 --> 00:03:58.048
there's a j.

68
00:03:58.048 --> 00:03:59.250
&gt;&gt; Bianca Gandolfo: [LAUGH]
&gt;&gt; Speaker 2: The

69
00:03:59.250 --> 00:03:59.787
middle g.
&gt;&gt; Bianca Gandolfo: You're right.

70
00:03:59.787 --> 00:04:00.740
&gt;&gt; Speaker 4: Thingamagig?

71
00:04:00.740 --> 00:04:01.440
&gt;&gt; Bianca Gandolfo: Yeah, there we go,

72
00:04:01.440 --> 00:04:03.540
thank you.
I'm not a good speller.

73
00:04:03.540 --> 00:04:08.439
So, myObj.thingamajig is obviously true,

74
00:04:08.439 --> 00:04:11.460
I mean what else could it be.

75
00:04:12.580 --> 00:04:19.284
Then we have, you know, myobj.hello=,

76
00:04:19.284 --> 00:04:24.310
you know Spanish for hello.

77
00:04:24.310 --> 00:04:29.791
So, we now have an object

78
00:04:29.791 --> 00:04:36.060
It looks like this, right.

79
00:04:37.400 --> 00:04:41.060
So whenever we are setting a property
onto an object we pass it both

80
00:04:41.060 --> 00:04:42.680
the property name.

81
00:04:42.680 --> 00:04:44.770
Sometimes we call this the key and

82
00:04:44.770 --> 00:04:49.050
we also pass the value and so, we have
a data structure that looks like this.

83
00:04:51.390 --> 00:04:54.030
Deep underneath, and
probably not even that deep,

84
00:04:54.030 --> 00:04:56.610
probably just below the surface.

85
00:04:56.610 --> 00:05:02.519
These properties are going
to map to some location.

86
00:05:03.670 --> 00:05:09.410
And we'll say that we have,
let's pretend that this is our memory and

87
00:05:09.410 --> 00:05:12.345
each location here has an address.

88
00:05:12.345 --> 00:05:17.427
Okay, we want to pass this

89
00:05:17.427 --> 00:05:22.279
property into our hash.

90
00:05:22.279 --> 00:05:28.363
You know,
we wanted to return a memory address

91
00:05:28.363 --> 00:05:34.450
which lets just say it's
gonna give us three.

92
00:05:36.160 --> 00:05:41.230
So that means we're gonna
save the value true in

93
00:05:41.230 --> 00:05:48.682
the location three.
&gt;&gt; Bianca Gandolfo: Okay,

94
00:05:48.682 --> 00:05:51.100
and so, this is memory.

95
00:05:54.360 --> 00:05:59.401
Okay, now, we want to look

96
00:05:59.401 --> 00:06:07.960
up myObj.thingamajig,
&gt;&gt; Bianca Gandolfo: Right?

97
00:06:07.960 --> 00:06:10.140
We wanted to return true.

98
00:06:10.140 --> 00:06:16.360
So what we do is under the hood,
is we hash it again.

99
00:06:16.360 --> 00:06:20.150
So we're like we need
to look up thingamajig.

100
00:06:20.150 --> 00:06:21.020
Where is it?

101
00:06:21.020 --> 00:06:23.579
You send it through the hash,
the hash said, hash says.

102
00:06:24.900 --> 00:06:25.440
It's at 3.

103
00:06:25.440 --> 00:06:28.330
And then you just go to 3 and
get that value.

104
00:06:29.820 --> 00:06:33.410
So the hash value actually is
mapping to where it's located.

105
00:06:35.100 --> 00:06:38.590
While the property name is
the name that we give it, right?

106
00:06:38.590 --> 00:06:42.060
So when we're naming our properties,
we're not giving it

107
00:06:43.070 --> 00:06:46.250
memory address because that would
be really, really difficult, right?

108
00:06:46.250 --> 00:06:50.921
If we were constrained to that, we're just
giving it a string name and we just wanna

109
00:06:50.921 --> 00:06:55.392
map it to somewhere in memory so that it
can go there directly instead of having to

110
00:06:55.392 --> 00:07:01.800
search through everything to find it.
&gt;&gt; Bianca Gandolfo: Is

111
00:07:01.800 --> 00:07:03.349
that clarified?
&gt;&gt; Speaker 3: Yeah,

112
00:07:03.349 --> 00:07:08.184
the value that pass is different from
that time, yeah, that was my question.

113
00:07:08.184 --> 00:07:09.820
&gt;&gt; Bianca Gandolfo: Yep, but yeah exactly.

114
00:07:09.820 --> 00:07:12.600
And so every time you pass this though
you want it to give you the same value.

115
00:07:12.600 --> 00:07:16.100
Because imagine if you got two now,
on accident.

116
00:07:16.100 --> 00:07:19.902
And now you're gonna go look up in memory
and it's gonna give you Undefined and

117
00:07:19.902 --> 00:07:21.408
that would break everything.

118
00:07:21.408 --> 00:07:24.340
So that's why its really important that
were getting the same value every time.

119
00:07:26.860 --> 00:07:29.892
And then similarly you know,

120
00:07:29.892 --> 00:07:34.986
we put hello we want to
return whatever maybe 1 and

121
00:07:34.986 --> 00:07:38.879
then we're gonna put our value here.

122
00:07:45.654 --> 00:07:51.774
&gt;&gt; Speaker 2: This is all a hypothetical

123
00:07:51.774 --> 00:07:56.230
use case, right?

124
00:07:56.230 --> 00:07:56.866
We haven't seen-
&gt;&gt; Bianca Gandolfo: No,

125
00:07:56.866 --> 00:07:59.179
this is what it does underneath the hood.

126
00:08:00.270 --> 00:08:01.450
This is like the internals

127
00:08:01.450 --> 00:08:03.440
of how your objects are working.
&gt;&gt; Speaker 2: I

128
00:08:03.440 --> 00:08:03.940
see.
&gt;&gt; Bianca Gandolfo: Yeah.

129
00:08:07.159 --> 00:08:07.700
&gt;&gt; Bianca Gandolfo: So it's not

130
00:08:07.700 --> 00:08:09.430
hypothetical.

131
00:08:09.430 --> 00:08:14.950
It's a simplification, for sure,
but this is the mechanics of it.

132
00:08:15.960 --> 00:08:18.200
It's that we're taking a string,

133
00:08:18.200 --> 00:08:22.730
we're somehow mapping that
string to a location in memory.

134
00:08:25.290 --> 00:08:28.780
And getting it out, in constant time,
this is what makes it constant time.

135
00:08:28.780 --> 00:08:33.650
We couldn't do this,
then every look up like this would be,

136
00:08:33.650 --> 00:08:35.290
you know at least linear.

137
00:08:36.610 --> 00:08:39.277
Unless it's sorted in
which case it could be.

138
00:08:41.817 --> 00:08:43.171
&gt;&gt; Bianca Gandolfo: Logarithmic,

139
00:08:43.171 --> 00:08:48.899
logarithmic because we can make
a binary search that's sorted,

140
00:08:48.899 --> 00:08:50.410
maybe, cool.
&gt;&gt; Speaker 2: So

141
00:08:50.410 --> 00:08:54.100
can you hash say, for example, a graph.

142
00:08:54.100 --> 00:08:58.570
So in your travels,
you don't need to go both ways.

143
00:08:58.570 --> 00:09:04.742
You can avoid the
&gt;&gt; Bianca Gandolfo: I'm not sure,

144
00:09:04.742 --> 00:09:10.008
I mean they're definitely
algorithms that you use

145
00:09:10.008 --> 00:09:15.650
hashing with graphs for
like security related stuff.

146
00:09:17.350 --> 00:09:21.300
But I don't know if that would
speed up your graph reversal.

147
00:09:22.520 --> 00:09:26.680
But I mean, we're using a hash
table in our breakrams, right?

148
00:09:26.680 --> 00:09:31.550
We're using an object to make
everything faster, right?

149
00:09:31.550 --> 00:09:34.840
If we didn't use our object
to track where we had been,

150
00:09:34.840 --> 00:09:37.700
then suddenly everything
gets really complicated.

151
00:09:37.700 --> 00:09:38.551
Yeah.

152
00:09:38.551 --> 00:09:45.910
Cool.
&gt;&gt; Bianca Gandolfo: Mm-hm.

153
00:09:45.910 --> 00:09:47.550
&gt;&gt; Speaker 3: What kind of value we have

154
00:09:47.550 --> 00:09:52.890
to pass on in the first function,
my function table?

155
00:09:52.890 --> 00:09:56.350
See the property values here.
&gt;&gt; Bianca Gandolfo: Mm-hm.

156
00:09:56.350 --> 00:09:58.170
&gt;&gt; Speaker 3: So the value-

157
00:09:58.170 --> 00:09:59.474
&gt;&gt; Bianca Gandolfo: Yeah, so the property.

158
00:09:59.474 --> 00:10:00.310
&gt;&gt; Speaker 3: Yeah.

159
00:10:00.310 --> 00:10:01.110
&gt;&gt; Bianca Gandolfo: Would be like

160
00:10:01.110 --> 00:10:04.250
thingamajig and the value would be true.

161
00:10:05.960 --> 00:10:10.210
So this is how objects actually work,
right?

162
00:10:10.210 --> 00:10:14.376
And if we were to make our own,

163
00:10:14.376 --> 00:10:20.211
we can make a set function set set method,

164
00:10:20.211 --> 00:10:25.902
and we say thingamajig and then, true.

165
00:10:25.902 --> 00:10:31.065
And that would do the same thing as here
where we're just setting it directly

166
00:10:31.065 --> 00:10:37.846
using dot notation.
&gt;&gt; Bianca Gandolfo: Right?

167
00:10:37.846 --> 00:10:42.928
And then.
&gt;&gt; Bianca Gandolfo: Right and

168
00:10:42.928 --> 00:10:47.070
those of you who are familiar with object
oriented language are really familiar with

169
00:10:47.070 --> 00:10:51.150
setters and getters.
&gt;&gt; Bianca Gandolfo: I should have

170
00:10:51.150 --> 00:10:53.835
chosen a smaller

171
00:10:53.835 --> 00:11:00.090
word.
&gt;&gt; Speaker 2: Does JavaScript

172
00:11:00.090 --> 00:11:05.124
not have a formalized dictionary object?
&gt;&gt; Bianca Gandolfo: No.

173
00:11:05.124 --> 00:11:06.113
&gt;&gt; Speaker 2: Because its,

174
00:11:06.113 --> 00:11:09.580
I'm getting confused cuz
this just seems like a-

175
00:11:09.580 --> 00:11:11.060
&gt;&gt; Bianca Gandolfo: It is a dictionary.

176
00:11:11.060 --> 00:11:12.990
It's another word for it, dictionary,

177
00:11:12.990 --> 00:11:15.050
HashMap.
&gt;&gt; Speaker 2: Okay, so

178
00:11:15.050 --> 00:11:19.780
a dictionary is a.
&gt;&gt; Bianca Gandolfo: As far as JavaScript

179
00:11:19.780 --> 00:11:25.570
is concerned yeah, it's all the same.
&gt;&gt; Speaker 2: And

180
00:11:25.570 --> 00:11:29.710
then the actual hashing part just takes
place under the covers like that is

181
00:11:29.710 --> 00:11:30.225
just-
&gt;&gt; Bianca Gandolfo: Yeah.

182
00:11:30.225 --> 00:11:31.461
&gt;&gt; Speaker 2: Okay.

183
00:11:31.461 --> 00:11:32.265
&gt;&gt; Bianca Gandolfo: Yep.

184
00:11:36.360 --> 00:11:37.444
&gt;&gt; Speaker 2: Okay.

185
00:11:37.444 --> 00:11:38.167
&gt;&gt; Bianca Gandolfo: Yep.

186
00:11:38.167 --> 00:11:40.329
Awesome

