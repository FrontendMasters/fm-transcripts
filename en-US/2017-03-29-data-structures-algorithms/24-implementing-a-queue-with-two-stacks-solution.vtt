WEBVTT

1
00:00:00.210 --> 00:00:01.990
&gt;&gt; Bianca Gandolfo: So
the first thing you probably need to do is

2
00:00:03.020 --> 00:00:04.560
import your stack code here.

3
00:00:05.640 --> 00:00:07.060
So here we are, stack, stack, stack.

4
00:00:08.080 --> 00:00:08.850
Got our stack stuff.

5
00:00:10.180 --> 00:00:14.670
And the secret here is,
we have an in stack and an out stack.

6
00:00:15.670 --> 00:00:21.373
So whenever you push something in,
you put it in the In storage.

7
00:00:24.012 --> 00:00:28.320
&gt;&gt; Bianca Gandolfo: No,
this should say stackIn.

8
00:00:32.266 --> 00:00:32.990
&gt;&gt; Bianca Gandolfo: And then,

9
00:00:32.990 --> 00:00:37.860
when your dequeue,
this is where the tricky thing happens.

10
00:00:37.860 --> 00:00:42.220
So when your stackOut equals 0,
which is the beginning, right?

11
00:00:42.220 --> 00:00:43.820
Whenever you start to dequeue.

12
00:00:43.820 --> 00:00:45.920
You wanna transfer your stacks.

13
00:00:45.920 --> 00:00:47.620
My gosh, what does that mean?

14
00:00:47.620 --> 00:00:49.120
Well, let's check it out.

15
00:00:49.120 --> 00:00:56.450
So while your stackIn is full,
has something in it, you're gonna push.

16
00:00:56.450 --> 00:00:59.130
I'm sorry, you're gonna pop
everything from your stack.

17
00:01:00.200 --> 00:01:02.140
And you're gonna push it,
your stackIn, and

18
00:01:02.140 --> 00:01:04.430
you're gonna push it into your stackOut.

19
00:01:04.430 --> 00:01:06.020
Again, I'm gonna draw this out for
you in a second.

20
00:01:07.640 --> 00:01:14.460
Great, and then once you have a stackOut,
you're just gonna pop it off.

21
00:01:14.460 --> 00:01:15.650
Cool, we're good?

22
00:01:18.100 --> 00:01:19.218
All right.

23
00:01:19.218 --> 00:01:22.762
&gt;&gt; Speaker 2: Wait, what's the like use
case that we're storing, like in the data?

24
00:01:24.180 --> 00:01:25.210
&gt;&gt; Bianca Gandolfo: Why would we do this?

25
00:01:26.400 --> 00:01:30.174
Just to be tricky on an interview,
to confuse you.

26
00:01:30.174 --> 00:01:32.674
It's not really useful other than that.

27
00:01:35.266 --> 00:01:38.019
&gt;&gt; Speaker 2: But
is the goal to drive the two stacks?

28
00:01:38.019 --> 00:01:41.119
Like what's the relationship between in
and out supposed to be for two stacks?

29
00:01:41.119 --> 00:01:43.450
&gt;&gt; Bianca Gandolfo: Yeah, good question.

30
00:01:43.450 --> 00:01:46.558
So for our, let me see.

31
00:01:46.558 --> 00:01:52.483
Let's see, I'm trying to draw here.

32
00:01:55.250 --> 00:01:59.628
&gt;&gt; Bianca Gandolfo: Finally, I can draw.

33
00:01:59.628 --> 00:02:02.710
Okay, so, let's just draw,
where is my thing?

34
00:02:02.710 --> 00:02:08.079
Okay
&gt;&gt; Bianca Gandolfo: Okay,

35
00:02:08.079 --> 00:02:13.957
so here's my, [LAUGH] drawing, my God.

36
00:02:13.957 --> 00:02:17.698
[LAUGH] Here's our end stack.

37
00:02:17.698 --> 00:02:21.300
I'm gonna get better at this, I promise.

38
00:02:21.300 --> 00:02:23.110
Okay, so here's our in stack.

39
00:02:26.130 --> 00:02:28.840
And here's our out stack, okay.

40
00:02:33.020 --> 00:02:36.227
So remember, for a queue,

41
00:02:36.227 --> 00:02:41.757
we want the first one in to
also be the first one out.

42
00:02:41.757 --> 00:02:42.859
True?

43
00:02:42.859 --> 00:02:44.402
Okay.

44
00:02:44.402 --> 00:02:52.915
So,
&gt;&gt; Bianca Gandolfo: Out, okay.

45
00:02:52.915 --> 00:02:58.483
So now as you can see here,
whenever we wanna push a value,

46
00:02:58.483 --> 00:03:02.925
so let's say, come on,
just start with one.

47
00:03:02.925 --> 00:03:10.020
I'll push it here, 1, 2, right?

48
00:03:10.020 --> 00:03:15.172
And then, so the difference is is
whenever we're pushing something in what

49
00:03:15.172 --> 00:03:20.403
we're using the in stack and whenever
we're popping something out, we have

50
00:03:20.403 --> 00:03:25.574
to put it all in to the out stack because
you need to flip it over for it to work.

51
00:03:25.574 --> 00:03:31.142
Because for the queue,
you want it to come out the first,

52
00:03:31.142 --> 00:03:36.131
you want one to be the first
one to come out, right?

53
00:03:36.131 --> 00:03:39.632
But in this case since it is a stack,
the only thing we can take out is two.

54
00:03:39.632 --> 00:03:44.575
So if we pop everything out of this
end stack and you put it here,

55
00:03:44.575 --> 00:03:47.920
that's supposed to be an arrow.

56
00:03:47.920 --> 00:03:49.582
We'll pop it and we'll go here.

57
00:03:52.039 --> 00:03:53.020
&gt;&gt; Bianca Gandolfo: And here.

58
00:03:53.020 --> 00:03:55.714
And so since it's a stack,
we can now take it out.

59
00:03:57.603 --> 00:03:59.850
&gt;&gt; Bianca Gandolfo: Does that make sense?

60
00:03:59.850 --> 00:04:01.837
So that's the basics of it.

61
00:04:01.837 --> 00:04:08.187
And so, when we transfer stacks,
it's whenever this reaches 0.

62
00:04:08.187 --> 00:04:14.130
So we're gonna, this is gone.

63
00:04:14.130 --> 00:04:18.270
That's like the core of how this works,
cool?

64
00:04:18.270 --> 00:04:19.230
I'm gonna go over it one more time.

65
00:04:19.230 --> 00:04:20.370
You have a question?

66
00:04:20.370 --> 00:04:23.859
&gt;&gt; Speaker 3: It's just reversing
the stack, so it acts like a cube?

67
00:04:23.859 --> 00:04:24.371
&gt;&gt; Bianca Gandolfo: Mm-hm.

68
00:04:24.371 --> 00:04:25.645
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Bianca Gandolfo: Yeah.

69
00:04:25.645 --> 00:04:28.430
&gt;&gt; Speaker 2: Are you're keeping
them sync the whole time?

70
00:04:28.430 --> 00:04:34.529
&gt;&gt; Bianca Gandolfo: No, you only
switch them when you start copying.

71
00:04:34.529 --> 00:04:37.200
&gt;&gt; Speaker 2: When you need
more to put in the out queue?

72
00:04:37.200 --> 00:04:37.830
&gt;&gt; Bianca Gandolfo: Yep.
&gt;&gt; Speaker 2: Okay.

73
00:04:37.830 --> 00:04:39.130
&gt;&gt; Bianca Gandolfo: Yup, yup.

74
00:04:39.130 --> 00:04:44.240
&gt;&gt; Speaker 4: Question from Victoria,
wouldn't it just be easier to use unshift?

75
00:04:44.240 --> 00:04:46.374
&gt;&gt; Bianca Gandolfo: Wouldn't it
just be easier to use unshift?

76
00:04:47.540 --> 00:04:50.480
I don't think the point of this
exercise is because it's easier, no,

77
00:04:50.480 --> 00:04:52.220
it's just one of those
interview questions.

78
00:04:53.940 --> 00:04:58.598
&gt;&gt; Speaker 4: So are you constraining
it to only use push and pop?

79
00:04:58.598 --> 00:04:59.680
&gt;&gt; Bianca Gandolfo: Yeah,
cuz it's Q and NQ.

80
00:04:59.680 --> 00:05:00.511
&gt;&gt; Speaker 4: Right, but

81
00:05:00.511 --> 00:05:03.925
your implementation is
an array of push and pop?

82
00:05:03.925 --> 00:05:04.850
&gt;&gt; Bianca Gandolfo: Yeah,
yeah, yeah, push and pop.

83
00:05:04.850 --> 00:05:09.720
Yes, cuz that's the implementation
of a stack has to be push and pop.

84
00:05:17.012 --> 00:05:18.570
&gt;&gt; Bianca Gandolfo: Does that make sense?

85
00:05:18.570 --> 00:05:19.350
It's clicking?

86
00:05:19.350 --> 00:05:20.740
Yeah, great.

87
00:05:20.740 --> 00:05:22.530
&gt;&gt; Speaker 4: I guess unshift
would be inefficient, right?

88
00:05:22.530 --> 00:05:23.998
Because-
&gt;&gt; Bianca Gandolfo: Well,

89
00:05:23.998 --> 00:05:27.349
unshift is not a stack thing.

90
00:05:27.349 --> 00:05:28.220
&gt;&gt; Speaker 4: Okay.

91
00:05:28.220 --> 00:05:28.720
&gt;&gt; Bianca Gandolfo: Yeah.

92
00:05:31.360 --> 00:05:33.200
But yes, it does do the same thing,
exactly.

93
00:05:33.200 --> 00:05:34.950
Cool.

94
00:05:34.950 --> 00:05:39.486
All right, so my drawing skills suck,

95
00:05:39.486 --> 00:05:43.750
I'm just gonna stop doing that now.

96
00:05:47.939 --> 00:05:53.477
&gt;&gt; Bianca Gandolfo: Can someone
explain to me in their own words,

97
00:05:53.477 --> 00:05:57.995
how the in-stock and the out-stock

98
00:05:57.995 --> 00:06:02.235
work together to emulate a queue?

99
00:06:05.639 --> 00:06:06.410
&gt;&gt; Bianca Gandolfo: Is my question clear?

100
00:06:07.960 --> 00:06:11.159
What's the relationship between
the in stack and the out stack?

101
00:06:14.070 --> 00:06:17.835
&gt;&gt; Speaker 5: The out stack is
the reverse of the in stack.

102
00:06:17.835 --> 00:06:19.281
&gt;&gt; Bianca Gandolfo: Mm-hm.

103
00:06:19.281 --> 00:06:24.725
&gt;&gt; Speaker 5: Since with a stack,
you always, a stack is last and first off.

104
00:06:24.725 --> 00:06:26.100
&gt;&gt; Bianca Gandolfo: Mm-hm.

105
00:06:26.100 --> 00:06:29.965
&gt;&gt; Speaker 5: So then if you reverse it,

106
00:06:29.965 --> 00:06:31.948
it becomes-
&gt;&gt; Speaker 3: A queue?

107
00:06:31.948 --> 00:06:32.808
&gt;&gt; Speaker 5: A queue, yeah.

108
00:06:32.808 --> 00:06:34.483
&gt;&gt; Bianca Gandolfo: Cool, awesome.

109
00:06:34.483 --> 00:06:39.221
&gt;&gt; Speaker 2: [INAUDIBLE] is kind of
like an on the fly calculator queue when

110
00:06:39.221 --> 00:06:41.510
you need it, it seems like.

111
00:06:43.550 --> 00:06:44.640
&gt;&gt; Bianca Gandolfo: The second one,
the out-stack?

112
00:06:44.640 --> 00:06:45.312
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Bianca Gandolfo: Yeah,

113
00:06:45.312 --> 00:06:48.800
the out-stack is only for popping.

114
00:06:48.800 --> 00:06:55.418
&gt;&gt; Speaker 2: Yeah, it's like an impromptu
queue when you need to pop something.

115
00:06:55.418 --> 00:06:56.590
&gt;&gt; Bianca Gandolfo: Yeah,
except it's still a stack.

116
00:06:59.949 --> 00:07:01.276
&gt;&gt; Bianca Gandolfo: Yeah.

117
00:07:01.276 --> 00:07:05.190
So again, these are one of these tricky
questions that you find in interviews.

118
00:07:05.190 --> 00:07:08.770
It's kind of a mind bender, cuz you're
like, well, how is that possible?

119
00:07:08.770 --> 00:07:10.300
And that's kind of why I throw it in here,

120
00:07:10.300 --> 00:07:13.250
because it's really hard to come
up with this stuff on your own.

121
00:07:13.250 --> 00:07:16.440
I remember when I first saw this
question I was like, I don't know.

122
00:07:16.440 --> 00:07:17.470
Why would you ever do that?

123
00:07:17.470 --> 00:07:18.390
Why would you ever wanna do that?

124
00:07:18.390 --> 00:07:20.200
That's a waste of my time.

125
00:07:20.200 --> 00:07:24.373
But if you ever come across it,
now you know.

126
00:07:24.373 --> 00:07:26.445
You have a question?

127
00:07:26.445 --> 00:07:31.600
&gt;&gt; Speaker 6: You do out-stack
when the in-stack is full or

128
00:07:31.600 --> 00:07:35.310
just every time e push and we pop?

129
00:07:35.310 --> 00:07:37.677
&gt;&gt; Bianca Gandolfo: So
the out-stack is only going,

130
00:07:37.677 --> 00:07:40.896
you're only gonna transfer the in-stack.

131
00:07:40.896 --> 00:07:44.772
So as you're pushing,
you're pushing into the in-stack.

132
00:07:44.772 --> 00:07:49.190
And then when you want to pop,
you're going to transfer

133
00:07:49.190 --> 00:07:53.708
the in-stack into the out-stack,
which reverses it.

134
00:07:53.708 --> 00:07:55.230
And the you start popping from there.

135
00:07:55.230 --> 00:07:58.955
And then you transfer again,

136
00:07:58.955 --> 00:08:04.473
once your stack is empty, the out-stack.

137
00:08:04.473 --> 00:08:09.420
&gt;&gt; Speaker 6: So it doesn't matter
the stock is full or nothing?

138
00:08:09.420 --> 00:08:10.130
&gt;&gt; Bianca Gandolfo: One more time?

139
00:08:10.130 --> 00:08:16.888
&gt;&gt; Speaker 6: [INAUDIBLE] Could
not be full to 10, right?

140
00:08:16.888 --> 00:08:19.550
&gt;&gt; Bianca Gandolfo: It could be full,
they could both have stuff in it.

141
00:08:20.592 --> 00:08:25.361
&gt;&gt; Speaker 6: At the beginning,
it is possible to say a full extent,

142
00:08:25.361 --> 00:08:28.485
if it's not full using that stack?

143
00:08:28.485 --> 00:08:30.996
&gt;&gt; Bianca Gandolfo: So what you're
saying that if the in-stack is empty?

144
00:08:30.996 --> 00:08:32.210
Is that what you mean?

145
00:08:32.210 --> 00:08:36.860
&gt;&gt; Speaker 6: No,
I'm saying that you have 10 of space.

146
00:08:36.860 --> 00:08:43.725
And if you put any stack of five,
so you pop and that reverse.

147
00:08:43.725 --> 00:08:49.641
And if you go in like that,
the order is missed sometimes.

148
00:08:49.641 --> 00:08:56.570
We're gonna start with the full stack or
with no full stack?

149
00:08:56.570 --> 00:08:59.796
&gt;&gt; Bianca Gandolfo: So you're saying if we
have a stack that has a certain capacity,

150
00:08:59.796 --> 00:09:01.008
we need that capacity.

151
00:09:01.008 --> 00:09:02.818
How do we account for that?

152
00:09:02.818 --> 00:09:03.580
&gt;&gt; Speaker 6: Yeah.

153
00:09:03.580 --> 00:09:04.330
&gt;&gt; Bianca Gandolfo: That's
a good question.

154
00:09:04.330 --> 00:09:05.040
In JavaScript,

155
00:09:05.040 --> 00:09:10.090
we don't really have to think of those
constraints because our array is just,

156
00:09:10.090 --> 00:09:13.810
they're not actually contiguous blocks
of memory like you would think.

157
00:09:13.810 --> 00:09:18.774
And so, our arrays are just like,
you can make them as big as you want.

158
00:09:18.774 --> 00:09:20.430
You know what I mean?

159
00:09:20.430 --> 00:09:23.900
So you don't have to declare
the size of the array ahead of time.

160
00:09:23.900 --> 00:09:28.680
You could if you need to, but normally
we don't have to think about that.

161
00:09:28.680 --> 00:09:31.480
It's kind of the nice things
about JavaScript, yeah.

