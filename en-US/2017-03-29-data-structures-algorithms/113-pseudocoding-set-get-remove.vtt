WEBVTT

1
00:00:00.130 --> 00:00:03.540
&gt;&gt; Bianca Gandolfo: We're gonna spend ten
minutes pseudocoding out these operations,

2
00:00:03.540 --> 00:00:04.620
not the hashing function though.

3
00:00:04.620 --> 00:00:08.791
You can just assume that the hashing
function works under some rules that you

4
00:00:08.791 --> 00:00:09.775
create, right?

5
00:00:09.775 --> 00:00:14.535
The rule probably is the number needs to
be returned between 0 and 10 or something.

6
00:00:14.535 --> 00:00:19.393
You wanna have a rule in turn, because
you don't want it to return 352 when

7
00:00:19.393 --> 00:00:22.407
you wanna work with
an array that's size 10.

8
00:00:24.000 --> 00:00:25.863
&gt;&gt; Bianca Gandolfo: Cool.

9
00:00:25.863 --> 00:00:27.075
&gt;&gt; Speaker 2: Sorry, I'm still confused.

10
00:00:27.075 --> 00:00:31.540
Where would the hash take place
with us implementing this

11
00:00:31.540 --> 00:00:36.190
cuz we can just assign a key and
a value to an object, right,

12
00:00:36.190 --> 00:00:39.181
without-
&gt;&gt; Bianca Gandolfo: We're using an array

13
00:00:39.181 --> 00:00:43.821
though and
our hash is gonna hash to an index.

14
00:00:43.821 --> 00:00:45.619
&gt;&gt; Speaker 2: Okay, I see.

15
00:00:45.619 --> 00:00:46.440
Okay, thank you.

16
00:00:46.440 --> 00:00:47.880
&gt;&gt; Bianca Gandolfo: Yeah, yeah.

17
00:00:47.880 --> 00:00:49.000
We had a task.

18
00:00:49.000 --> 00:00:53.624
Our task was pseudo,

19
00:00:56.026 --> 00:00:58.232
&gt;&gt; Bianca Gandolfo: Code out.

20
00:00:58.232 --> 00:01:00.528
&gt;&gt; Speaker 3: [INAUDIBLE] Size, please.

21
00:01:02.352 --> 00:01:07.090
&gt;&gt; Bianca Gandolfo: Out a hash table,
all right.

22
00:01:07.090 --> 00:01:08.290
So we have our constructor.

23
00:01:09.740 --> 00:01:11.543
What do we need inside of our constructor?

24
00:01:13.962 --> 00:01:14.980
&gt;&gt; Speaker 4: Storage.

25
00:01:14.980 --> 00:01:16.260
&gt;&gt; Bianca Gandolfo: Some sort of storage.

26
00:01:18.570 --> 00:01:20.390
What did you guys use for your storage?

27
00:01:20.390 --> 00:01:21.416
&gt;&gt; Speaker 4: An array.

28
00:01:23.340 --> 00:01:25.220
&gt;&gt; Bianca Gandolfo: Some empty array.

29
00:01:27.380 --> 00:01:34.220
And then you also want a hashingFunction,
&gt;&gt; Bianca Gandolfo: Right?

30
00:01:35.570 --> 00:01:42.787
That's gonna take some value and return,
&gt;&gt; Bianca Gandolfo: An index for

31
00:01:42.787 --> 00:01:45.060
the array, right?

32
00:01:46.230 --> 00:01:50.594
So we can initialize
our array to size ten.

33
00:01:53.629 --> 00:01:55.554
&gt;&gt; Bianca Gandolfo: So
we'll just have an array.

34
00:01:55.554 --> 00:01:58.562
Let's do five to save some typing here.

35
00:02:02.256 --> 00:02:03.550
&gt;&gt; Bianca Gandolfo: So here we are.

36
00:02:03.550 --> 00:02:04.853
That should say undefined.

37
00:02:04.853 --> 00:02:09.690
So we're initializing our array to
size five and this is our hash table.

38
00:02:11.400 --> 00:02:16.641
And we have a hashing function and
it's going to return index for the array.

39
00:02:16.641 --> 00:02:23.096
Specifically what that means is gonna
return a number between 0 and 4, right?

40
00:02:23.096 --> 00:02:25.852
Cuz our hashing function actually
doesn't know anything about the array.

41
00:02:25.852 --> 00:02:29.200
It just knows that it
has to return a number,

42
00:02:29.200 --> 00:02:32.940
an integer, in between zero and four.

43
00:02:32.940 --> 00:02:35.310
And that's a constraint that we
can give to our hash function and

44
00:02:35.310 --> 00:02:41.240
hash functions tend to be flexible, and
we'll talk about why in just a second.

45
00:02:42.970 --> 00:02:44.140
So here's our hash function.

46
00:02:45.300 --> 00:02:46.700
So then we had a few methods.

47
00:02:46.700 --> 00:02:50.573
We had a setter, we had a getter and
then we had a remove, right?

48
00:02:52.271 --> 00:02:57.187
&gt;&gt; Bianca Gandolfo: So to set,
we're gonna take a key and

49
00:02:57.187 --> 00:03:02.102
a value and we want to save the value,

50
00:03:02.102 --> 00:03:07.030
save the value in the array, right?

51
00:03:09.530 --> 00:03:12.830
And for that to happen,
we somehow have to get our key,

52
00:03:14.180 --> 00:03:17.200
which might be a string, right?

53
00:03:17.200 --> 00:03:22.812
What was an example that we used earlier,
thingamajig?

54
00:03:22.812 --> 00:03:23.663
&gt;&gt; Speaker 2: Yes.

55
00:03:23.663 --> 00:03:26.941
&gt;&gt; Bianca Gandolfo: Thingamajig is
our key and our value was true.

56
00:03:29.435 --> 00:03:35.320
&gt;&gt; Bianca Gandolfo: We now wanna
make this saved into our storage.

57
00:03:35.320 --> 00:03:37.962
So how do we do that?

58
00:03:37.962 --> 00:03:43.277
So we say the value in the array, so
we need to run the hash function,

59
00:03:44.473 --> 00:03:47.449
&gt;&gt; Bianca Gandolfo: With only the key,

60
00:03:47.449 --> 00:03:49.870
thingamajig.

61
00:03:54.011 --> 00:03:55.480
&gt;&gt; Bianca Gandolfo: Gonna run it.

62
00:03:55.480 --> 00:04:00.210
This is going to return,
&gt;&gt; Bianca Gandolfo: Some value.

63
00:04:00.210 --> 00:04:05.237
Let's say it returns 4,
let's say it returns 3, actually.

64
00:04:07.281 --> 00:04:13.095
&gt;&gt; Bianca Gandolfo: And
then you want to save true which

65
00:04:13.095 --> 00:04:18.108
is our value to the third index

66
00:04:18.108 --> 00:04:23.792
of our storage,
&gt;&gt; Bianca Gandolfo: Cool?

67
00:04:23.792 --> 00:04:29.291
So that's how we are saving properties and

68
00:04:29.291 --> 00:04:32.964
values into our hash table.

69
00:04:32.964 --> 00:04:34.265
Any questions about that?

70
00:04:36.437 --> 00:04:38.770
&gt;&gt; Bianca Gandolfo: Cool, yeah?

71
00:04:38.770 --> 00:04:43.895
&gt;&gt; Speaker 5: In the storage, what is
the difference using undefined or null?

72
00:04:43.895 --> 00:04:46.430
&gt;&gt; Bianca Gandolfo: What's the difference
between undefined and null?

73
00:04:46.430 --> 00:04:49.402
&gt;&gt; Speaker 5: What if we use that-
&gt;&gt; Bianca Gandolfo: What if we use null?

74
00:04:49.402 --> 00:04:50.435
&gt;&gt; Speaker 5: Yeah.

75
00:04:50.435 --> 00:04:52.724
&gt;&gt; Bianca Gandolfo: So
when you initialize an array,

76
00:04:52.724 --> 00:04:59.180
it's gonna initialize it to undefined,
it's not gonna initialize it to null.

77
00:04:59.180 --> 00:05:02.380
For you to initialize each value to null,
you'd have to loop through the array and

78
00:05:02.380 --> 00:05:02.990
set it to null.

79
00:05:03.990 --> 00:05:07.774
But if you initialize an array on its own,
it's just automatically gonna

80
00:05:07.774 --> 00:05:10.469
have an empty array with
a bunch of undefineds in it.

81
00:05:12.960 --> 00:05:17.127
&gt;&gt; Bianca Gandolfo: Yeah,
&gt;&gt; Bianca Gandolfo: Okay, so

82
00:05:17.127 --> 00:05:20.848
we're gonna have a getter.

83
00:05:20.848 --> 00:05:23.294
What do we pass to our getter?

84
00:05:23.294 --> 00:05:25.017
&gt;&gt; Speaker 4: You pass the key.

85
00:05:25.017 --> 00:05:26.373
&gt;&gt; Bianca Gandolfo: Yeah,
we're gonna pass the key.

86
00:05:31.032 --> 00:05:35.657
&gt;&gt; Bianca Gandolfo: And the thing
that we wanna do here is you wanna

87
00:05:35.657 --> 00:05:38.467
return the value, right?

88
00:05:38.467 --> 00:05:39.808
&gt;&gt; Speaker 4: Yeah.

89
00:05:39.808 --> 00:05:42.450
&gt;&gt; Bianca Gandolfo: Value
saved in storage.

90
00:05:44.630 --> 00:05:48.538
So what do we need to do to get there?

91
00:05:48.538 --> 00:05:52.749
&gt;&gt; Speaker 4: We have to run
the hashing function on the key again.

92
00:05:52.749 --> 00:05:53.403
&gt;&gt; Bianca Gandolfo: Yep.

93
00:05:53.403 --> 00:05:56.065
&gt;&gt; Speaker 4: And because it's a hashing
function it'll return the same value that

94
00:05:56.065 --> 00:05:56.930
it did the first time.

95
00:05:56.930 --> 00:05:57.694
&gt;&gt; Bianca Gandolfo: Mm-hm.

96
00:05:57.694 --> 00:06:00.496
&gt;&gt; Speaker 4: Which will give
you the address in the array.

97
00:06:06.855 --> 00:06:09.052
&gt;&gt; Bianca Gandolfo: It's
gonna return the same value.

98
00:06:11.291 --> 00:06:15.424
&gt;&gt; Bianca Gandolfo: So for
example, 3 for thingamajig.

99
00:06:18.497 --> 00:06:22.090
&gt;&gt; Bianca Gandolfo: Right, and
then with that value we can just go

100
00:06:22.090 --> 00:06:26.617
directly,
&gt;&gt; Bianca Gandolfo: We

101
00:06:26.617 --> 00:06:29.054
can go directly to our storage.

102
00:06:29.054 --> 00:06:34.310
Retrieve value from storage

103
00:06:34.310 --> 00:06:41.763
using the index from the hash function.

104
00:06:45.166 --> 00:06:47.553
&gt;&gt; Bianca Gandolfo: Cool,
does that make sense?

105
00:06:50.079 --> 00:06:51.169
&gt;&gt; Bianca Gandolfo: Great.

106
00:06:53.271 --> 00:06:54.883
&gt;&gt; Bianca Gandolfo: So, remove.

107
00:06:54.883 --> 00:06:59.083
So say that we no longer wanna have

108
00:06:59.083 --> 00:07:03.289
a thingamajig,
&gt;&gt; Bianca Gandolfo: Equals

109
00:07:03.289 --> 00:07:05.930
true in our hash table.

110
00:07:05.930 --> 00:07:09.680
Cuz we're like, wow, that's the least
useful thing to have in our hash table,

111
00:07:09.680 --> 00:07:11.310
we need to get it out.

112
00:07:11.310 --> 00:07:12.507
How do we do that?

113
00:07:15.523 --> 00:07:20.471
&gt;&gt; Speaker 2: Can we just set the,
&gt;&gt; Speaker 2: The value to that

114
00:07:20.471 --> 00:07:21.655
key to null?

115
00:07:23.022 --> 00:07:25.389
&gt;&gt; Bianca Gandolfo: Yeah,
so when we remove it,

116
00:07:25.389 --> 00:07:28.850
we're gonna pass the key again, right?

117
00:07:30.545 --> 00:07:34.941
&gt;&gt; Bianca Gandolfo: So we wanna set
the value at the index to null,

118
00:07:34.941 --> 00:07:40.164
maybe undefined, whatever,
something like that.

119
00:07:40.164 --> 00:07:42.773
How do we get the index?

120
00:07:42.773 --> 00:07:43.844
&gt;&gt; Speaker 2: Hash the key.

121
00:07:43.844 --> 00:07:48.442
&gt;&gt; Bianca Gandolfo: Yep,
hash the key to get the index.

122
00:07:48.442 --> 00:07:53.696
And then, look up index on storage,

123
00:07:53.696 --> 00:07:57.260
set that to null, cool.

