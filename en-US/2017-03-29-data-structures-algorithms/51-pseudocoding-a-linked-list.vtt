WEBVTT

1
00:00:00.140 --> 00:00:03.230
&gt;&gt; Bianca Gandolfo: So
let's start by getting into our pairs and

2
00:00:03.230 --> 00:00:06.210
just pseudocoding out our
linked lists together.

3
00:00:06.210 --> 00:00:10.794
So the first thing we need to do would
be write a constructor function.

4
00:00:15.606 --> 00:00:17.307
&gt;&gt; off screen male: I don't know if I did

5
00:00:17.307 --> 00:00:22.308
it right, but what I did was
the function takes just a node as

6
00:00:22.308 --> 00:00:27.210
a parameter, and
then it sets this.head equal to node and

7
00:00:27.210 --> 00:00:32.253
this.tail equal to node.
&gt;&gt; off screen female: What happened?

8
00:00:32.253 --> 00:00:33.282
&gt;&gt; Bianca Gandolfo: Sorry.

9
00:00:37.524 --> 00:00:38.539
&gt;&gt; off screen male: Does it take the node

10
00:00:38.539 --> 00:00:39.374
as a parameter or

11
00:00:39.374 --> 00:00:43.505
just the data that we're storing?
&gt;&gt; Bianca Gandolfo: Depends on your

12
00:00:43.505 --> 00:00:48.609
implementation.
&gt;&gt; Bianca Gandolfo: Yeah,

13
00:00:48.609 --> 00:00:49.633
so what do you mean?

14
00:00:49.633 --> 00:00:50.577
So-
&gt;&gt; off screen male: Yes.

15
00:00:50.577 --> 00:00:51.099
&gt;&gt; Bianca Gandolfo: Do you mean

16
00:00:51.099 --> 00:00:54.234
this is gonna take an actual node,
which has the next property?

17
00:00:54.234 --> 00:00:58.844
Or is this gonna be the data, like 11.
&gt;&gt; off screen male: It

18
00:00:58.844 --> 00:01:00.487
doesn't really matter.

19
00:01:00.487 --> 00:01:04.769
It just takes the data cuz it
doesn't have a child property yet.

20
00:01:04.769 --> 00:01:05.647
&gt;&gt; Bianca Gandolfo: Cool.

21
00:01:10.744 --> 00:01:12.097
&gt;&gt; off screen male: So on the actual

22
00:01:12.097 --> 00:01:17.301
linked list object, I created a head and
a tail property and

23
00:01:17.301 --> 00:01:22.992
set both of those,
&gt;&gt; off screen male: Equal to the.

24
00:01:22.992 --> 00:01:24.052
&gt;&gt; Bianca Gandolfo: Whoops,

25
00:01:24.052 --> 00:01:28.050
cool.
&gt;&gt; Bianca Gandolfo: Set to

26
00:01:28.050 --> 00:01:34.669
the value.
&gt;&gt; Bianca Gandolfo: Okay.

27
00:01:38.165 --> 00:01:39.380
&gt;&gt; Bianca Gandolfo: So we're setting it

28
00:01:39.380 --> 00:01:44.162
to the value.
&gt;&gt; Bianca Gandolfo: There's one little

29
00:01:44.162 --> 00:01:53.979
thing that we need to do here.
&gt;&gt; Bianca Gandolfo: Anyone?

30
00:01:58.032 --> 00:01:58.711
&gt;&gt; Bianca Gandolfo: Okay,

31
00:01:58.711 --> 00:02:03.015
we'll discover what it is, okay.
&gt;&gt; off screen male: Do we need to have

32
00:02:03.015 --> 00:02:07.680
a place for the reference to the next one?
&gt;&gt; Bianca Gandolfo: Mm-hm.

33
00:02:07.680 --> 00:02:09.360
&gt;&gt; off screen male: But it's gonna be

34
00:02:09.360 --> 00:02:11.588
null, right?
&gt;&gt; Bianca Gandolfo: Mm-hm.

35
00:02:14.340 --> 00:02:15.088
&gt;&gt; off screen male: Okay.

36
00:02:15.088 --> 00:02:20.940
[LAUGH] Yeah, I didn't add a child
reference until the add to tail function.

37
00:02:20.940 --> 00:02:27.420
In the first pass through I set
an undefined child element to the tail.

38
00:02:27.420 --> 00:02:31.640
But then I didn't see why I was doing it,
so I removed that.

39
00:02:31.640 --> 00:02:34.356
And I just have,
in the add to tail method,

40
00:02:34.356 --> 00:02:37.963
I set tail.child equal to the next value.
&gt;&gt; Bianca Gandolfo: Okay,

41
00:02:37.963 --> 00:02:39.494
that makes sense.

42
00:02:39.494 --> 00:02:41.784
So one thing that we can
put in here is a node

43
00:02:41.784 --> 00:02:46.666
constructor.
&gt;&gt; Bianca Gandolfo: That's separate

44
00:02:46.666 --> 00:02:48.650
from our linked list constructor.

45
00:02:48.650 --> 00:02:54.216
And this can pass, we can say it's
a new node and we can pass the value.

46
00:02:54.216 --> 00:02:58.889
And so, in our node constructor,

47
00:02:58.889 --> 00:03:06.320
this is where we wanna say this.value,
this.next.

48
00:03:06.320 --> 00:03:11.260
We wanna set it to null, not undefined,
because just the best practice

49
00:03:11.260 --> 00:03:15.100
to set things to null and let
the computer set things to undefined, so

50
00:03:15.100 --> 00:03:19.970
that you know the programmer set it
to null, not it just wasn't defined,

51
00:03:19.970 --> 00:03:22.980
and there's some error somewhere.
&gt;&gt; off screen male: Purposefully done?

52
00:03:22.980 --> 00:03:25.392
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

53
00:03:25.392 --> 00:03:30.603
Cool, so this.head,
we probably wanna set it actually

54
00:03:30.603 --> 00:03:37.554
to the node.
&gt;&gt; Bianca Gandolfo: Cool?

55
00:03:39.366 --> 00:03:40.257
&gt;&gt; Bianca Gandolfo: Awesome,

56
00:03:40.257 --> 00:03:42.534
so how do we add to the tail?

57
00:03:49.012 --> 00:03:50.834
&gt;&gt; off screen male: In my implementation,

58
00:03:50.834 --> 00:03:53.838
I did just a function that takes a node or

59
00:03:53.838 --> 00:03:59.220
you could have it take a value and
then use our node constructor again.

60
00:04:00.760 --> 00:04:04.316
And then all I did was
set this.tail.childs, or

61
00:04:04.316 --> 00:04:09.447
what you're calling next, to the node.
&gt;&gt; Bianca Gandolfo: Set tail.

62
00:04:09.447 --> 00:04:09.978
&gt;&gt; off screen male: Yeah,

63
00:04:09.978 --> 00:04:13.365
set tail.next.
&gt;&gt; Bianca Gandolfo: Tail's next to

64
00:04:13.365 --> 00:04:15.690
the value.
&gt;&gt; off screen male: To the node.

65
00:04:15.690 --> 00:04:16.717
&gt;&gt; Bianca Gandolfo: Or to the node,

66
00:04:16.717 --> 00:04:21.296
yeah, to the node.
&gt;&gt; Bianca Gandolfo: So probably,

67
00:04:21.296 --> 00:04:26.993
you might wanna create a node from value.
&gt;&gt; off screen male: And

68
00:04:26.993 --> 00:04:29.896
then update the tail to be equal to the.

69
00:04:38.968 --> 00:04:39.549
&gt;&gt; Bianca Gandolfo: Great, so

70
00:04:39.549 --> 00:04:41.295
we have some pointers, right?

71
00:04:41.295 --> 00:04:44.300
We have our head pointer and
our tail pointer.

72
00:04:44.300 --> 00:04:48.130
And these make operations much
faster in our linked list, right?

73
00:04:48.130 --> 00:04:51.760
Otherwise, we might have to traverse
through the entire linked list.

74
00:04:53.350 --> 00:04:58.220
But if we have a pointer to the tail,
that makes adding to the tail, what?

75
00:04:58.220 --> 00:04:59.124
&gt;&gt; off screen male: Fast.

76
00:04:59.124 --> 00:05:02.318
&gt;&gt; Bianca Gandolfo: Fast, constant time,

77
00:05:02.318 --> 00:05:03.440
great.

78
00:05:06.280 --> 00:05:12.897
What about removing a node?
&gt;&gt; off screen male: I

79
00:05:12.897 --> 00:05:17.883
wasn't super happy with this, but
what I came up with was just again,

80
00:05:17.883 --> 00:05:22.783
taking a node as a parameter, and
then setting a temporary variable I

81
00:05:22.783 --> 00:05:26.944
called parent equal to the head,
or equal to this.head.

82
00:05:26.944 --> 00:05:32.723
And I did a while loop, while
parent.next is not equal to the node and

83
00:05:32.723 --> 00:05:38.719
parent.next is not equal to null,
set parent equal to parent.next.

84
00:05:38.719 --> 00:05:43.616
So it starts at the head and goes through
each one till it finds the one that

85
00:05:43.616 --> 00:05:46.936
has the child we're looking for.
&gt;&gt; Bianca Gandolfo: Okay, so just so

86
00:05:46.936 --> 00:05:48.850
I can catch up with you typing.

87
00:05:48.850 --> 00:05:51.699
You were saying, so
you set the parent to head.

88
00:05:51.699 --> 00:05:52.275
&gt;&gt; off screen male: Yeah, and

89
00:05:52.275 --> 00:05:55.832
then while the parent's next is not equal-
&gt;&gt; Bianca Gandolfo: It's not

90
00:05:55.832 --> 00:05:56.656
null.
&gt;&gt; off screen male: And

91
00:05:56.656 --> 00:06:00.204
also not what we're looking for.
&gt;&gt; Bianca Gandolfo: Or

92
00:06:00.204 --> 00:06:05.732
node.
&gt;&gt; off screen male: Then just

93
00:06:05.732 --> 00:06:12.270
set parent equal to parent.next.

94
00:06:12.270 --> 00:06:13.330
Are we searching?

95
00:06:15.450 --> 00:06:19.100
Yeah, that's what I, I couldn't figure
out how to get the head of the one

96
00:06:20.150 --> 00:06:22.480
we were looking for
without starting at the beginning.

97
00:06:24.440 --> 00:06:29.940
So then once it exits this loop,
it will have found the parent to our node.

98
00:06:29.940 --> 00:06:37.280
And so then it just sets that
next equal to our node's next.

99
00:06:37.280 --> 00:06:40.393
So parent.next equals
node.next outside the loop.

100
00:06:40.393 --> 00:06:43.208
&gt;&gt; Bianca Gandolfo: Okay, so when found,

101
00:06:43.208 --> 00:06:49.740
set the parent.next to the child's next,
right?

102
00:06:49.740 --> 00:06:54.070
Or the node in question's next, right?
&gt;&gt; off screen male: Yeah.

103
00:06:54.070 --> 00:06:59.494
&gt;&gt; Bianca Gandolfo: Cool, all right.

104
00:06:59.494 --> 00:07:00.652
How do you feel?
&gt;&gt; off screen male: Yeah,

105
00:07:00.652 --> 00:07:03.090
I didn't like that we were
starting at the beginning, but

106
00:07:03.090 --> 00:07:05.950
I couldn't think of a better way to do it.
&gt;&gt; Bianca Gandolfo: Yeah, does

107
00:07:05.950 --> 00:07:08.450
anyone have a better way of doing this?
&gt;&gt; off screen male: I

108
00:07:08.450 --> 00:07:12.040
thought that remove meant removing
the child node of the current node.

109
00:07:13.590 --> 00:07:14.358
&gt;&gt; Bianca Gandolfo: Yeah, so

110
00:07:14.358 --> 00:07:17.723
this one is removing any node in the list.

111
00:07:17.723 --> 00:07:22.502
If you want to remove the tail, right?

112
00:07:22.502 --> 00:07:25.380
That would be a constant time,
we have a pointer to that.

113
00:07:25.380 --> 00:07:29.770
If we have a pointer to the parent,
and that's what you're saying.

114
00:07:29.770 --> 00:07:32.639
Your implementation was you have a parent,
and

115
00:07:32.639 --> 00:07:35.302
then you say you wanna
remove the next node.

116
00:07:35.302 --> 00:07:40.439
Yeah, cool, awesome.

117
00:07:44.924 --> 00:07:46.217
&gt;&gt; Bianca Gandolfo: Any questions?

118
00:07:53.671 --> 00:07:54.848
&gt;&gt; off screen male: Is there a better

119
00:07:54.848 --> 00:07:57.710
way to do it than to start it?
&gt;&gt; Bianca Gandolfo: No,

120
00:07:57.710 --> 00:08:02.163
with your constraints and
it being a singly linked list,

121
00:08:02.163 --> 00:08:07.077
you don't have a reference to the parent,
you have to find it,

122
00:08:07.077 --> 00:08:08.660
yeah.
&gt;&gt; off screen male: So you're saying you

123
00:08:08.660 --> 00:08:12.238
really have to loop for this?
&gt;&gt; Bianca Gandolfo: Yeah,

124
00:08:12.238 --> 00:08:18.536
yeah.
&gt;&gt; Bianca Gandolfo: Cool.

125
00:08:18.536 --> 00:08:19.647
&gt;&gt; off screen male: So is there a way to

126
00:08:19.647 --> 00:08:23.810
do it without the head and
tail property on the linked list itself?

127
00:08:23.810 --> 00:08:27.564
Could you do it with just
giving the nodes the links and

128
00:08:27.564 --> 00:08:32.572
not having an implementation of
the linked list that stores the head and

129
00:08:32.572 --> 00:08:35.281
the tail?
&gt;&gt; Bianca Gandolfo: So the reason we

130
00:08:35.281 --> 00:08:39.714
have the head and tail is because it
makes a lot of operations easier.

131
00:08:39.714 --> 00:08:42.594
So you can add to the tail
in constant time,

132
00:08:42.594 --> 00:08:46.680
you can remove this tail in constant time,
stuff like that.

133
00:08:46.680 --> 00:08:49.260
But you do need a reference to the head.

134
00:08:49.260 --> 00:08:52.491
Cuz otherwise,
you wouldn't know where to start,

135
00:08:52.491 --> 00:08:55.935
yeah.
&gt;&gt; Bianca Gandolfo: Mm-hm.

136
00:08:58.782 --> 00:08:59.672
&gt;&gt; Bianca Gandolfo: Yeah, and so,

137
00:08:59.672 --> 00:09:01.876
this remove method has a search in it.

138
00:09:01.876 --> 00:09:07.086
And that kind of exposes one of
the things that makes a linked list

139
00:09:07.086 --> 00:09:12.020
slow is whenever you need to
search versus an array, right?

140
00:09:12.020 --> 00:09:15.660
If we're comparing it to our arrays,
or stacks and queues, well actually,

141
00:09:15.660 --> 00:09:17.940
stacks and queues are the same thing.

142
00:09:17.940 --> 00:09:21.989
But an array, if we wanna find,
&gt;&gt; Bianca Gandolfo: Something,

143
00:09:21.989 --> 00:09:23.400
it's just a constant time lookup.

144
00:09:24.950 --> 00:09:29.176
Yeah, all right, so
are we ready to code this out and

145
00:09:29.176 --> 00:09:36.058
do some exercises with this?
&gt;&gt; Bianca Gandolfo: Is that a yes?

146
00:09:36.058 --> 00:09:41.794
Or do you have more questions?
&gt;&gt; Bianca Gandolfo: Okay,

147
00:09:41.794 --> 00:09:47.135
let me have one more question.
&gt;&gt; off screen male: What's

148
00:09:47.135 --> 00:09:51.390
the context in which you'd
use this remove node method?

149
00:09:53.570 --> 00:09:54.730
So when are you calling it?

150
00:09:54.730 --> 00:09:58.170
Is it inside something else?

151
00:09:58.170 --> 00:09:58.870
I don't know.

152
00:09:58.870 --> 00:10:03.767
I'm trying to get some context because
initially, we did an if statement.

153
00:10:03.767 --> 00:10:08.670
So basically, if there was no reference to
another node, that means it's the tail.

154
00:10:08.670 --> 00:10:13.712
So we remove the previous object
reference and then return the node.

155
00:10:13.712 --> 00:10:18.239
But otherwise, we just change
the reference to the following

156
00:10:18.239 --> 00:10:22.727
object.
&gt;&gt; Bianca Gandolfo: So wait, sorry,

157
00:10:22.727 --> 00:10:25.334
you said that you're
just doing remove from

158
00:10:25.334 --> 00:10:27.510
tail?
&gt;&gt; off screen male: Or

159
00:10:27.510 --> 00:10:30.590
if it's not the tail,
if it has a reference already,

160
00:10:30.590 --> 00:10:32.460
if the previous one has a reference,
then it's not.

161
00:10:34.910 --> 00:10:35.990
Okay, I just confused myself.

162
00:10:37.160 --> 00:10:39.879
The one we're removing, okay,
so if the one we're removing

163
00:10:39.879 --> 00:10:42.670
has a reference to another one,
that means it's not the tail.

164
00:10:42.670 --> 00:10:46.734
So we just remove the previous
object's reference-

165
00:10:46.734 --> 00:10:48.177
&gt;&gt; Bianca Gandolfo: So you have to find-

166
00:10:48.177 --> 00:10:49.182
&gt;&gt; off screen male: Change that to

167
00:10:49.182 --> 00:10:51.972
the last one, to the following one.
&gt;&gt; Bianca Gandolfo: So

168
00:10:51.972 --> 00:10:57.008
there is no way in a singly linked
list to go from the current one,

169
00:10:57.008 --> 00:10:58.900
backwards.
&gt;&gt; off screen male: Okay.

170
00:10:58.900 --> 00:10:59.940
&gt;&gt; Bianca Gandolfo: Right, you can't do

171
00:11:01.190 --> 00:11:05.366
dot previous in this implementation.
&gt;&gt; off screen male: Could you do, well but

172
00:11:05.366 --> 00:11:10.044
you'd have to call it a parent.
&gt;&gt; Bianca Gandolfo: What do you mean?

173
00:11:10.044 --> 00:11:10.700
&gt;&gt; off screen male: Never mind, I'm

174
00:11:10.700 --> 00:11:12.872
confusing myself the more I talk, so-
&gt;&gt; Bianca Gandolfo: No,

175
00:11:12.872 --> 00:11:13.586
I think you have a good point.

176
00:11:13.586 --> 00:11:17.399
Like, you could,
if you had a link to the previous node,

177
00:11:17.399 --> 00:11:19.630
you could do that really easily.

178
00:11:20.980 --> 00:11:26.096
Right, because all you'd have to do is
redirect the parent nodes next to the next

179
00:11:26.096 --> 00:11:28.966
next, which is the child's next, right.
&gt;&gt; off screen male: But

180
00:11:28.966 --> 00:11:30.383
you're saying there's no link there,
so you don't know what it is.

181
00:11:30.383 --> 00:11:32.192
&gt;&gt; Bianca Gandolfo: Right now there isn't,

182
00:11:32.192 --> 00:11:37.102
and that would be an optimization,
right, is to add a previous, or

183
00:11:37.102 --> 00:11:39.687
P-R-E-V is usually what we say,

184
00:11:39.687 --> 00:11:41.945
to make a doubly linked list.
&gt;&gt; off screen male: Got

185
00:11:41.945 --> 00:11:42.556
it.
&gt;&gt; Bianca Gandolfo: Yeah.

186
00:11:42.556 --> 00:11:43.171
&gt;&gt; off screen male: Okay, that makes

187
00:11:43.171 --> 00:11:44.759
sense.
Is that what it's called,

188
00:11:44.759 --> 00:11:45.830
a doubly linked list?
&gt;&gt; Bianca Gandolfo: Mm-hm, mm-hm, yep.

