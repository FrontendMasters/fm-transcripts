WEBVTT

1
00:00:00.270 --> 00:00:01.730
&gt;&gt; Bianca Gandolfo: What's a linked list?

2
00:00:01.730 --> 00:00:04.810
&gt;&gt; Speaker 2: It's some objects that
are linked together with a reference to

3
00:00:04.810 --> 00:00:06.190
the next one?

4
00:00:06.190 --> 00:00:07.100
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

5
00:00:08.400 --> 00:00:13.260
So again, this is an ordered collection of
nodes, not to be confused with a sorted.

6
00:00:13.260 --> 00:00:16.500
It's not necessarily sorted,
it's just ordered, it has an order.

7
00:00:16.500 --> 00:00:21.540
Sequential access, which means you can
only access it in a certain sequence.

8
00:00:21.540 --> 00:00:28.940
Great, usually starting from the head or
the tail, if it's double linked list.

9
00:00:28.940 --> 00:00:33.150
And accessing the next one.

10
00:00:33.150 --> 00:00:38.450
Cool, and nodes contain
the reference to the next node.

11
00:00:38.450 --> 00:00:39.440
That is a linked list.

12
00:00:40.990 --> 00:00:42.850
Cool, so here's our picture.

13
00:00:42.850 --> 00:00:44.370
We have a value here.

14
00:00:44.370 --> 00:00:48.330
And then, next to it, we have a pointer.

15
00:00:48.330 --> 00:00:49.821
So you can imagine this is an object.

16
00:00:51.987 --> 00:00:53.660
&gt;&gt; Bianca Gandolfo: And
this has a pointer to the next object.

17
00:00:53.660 --> 00:00:57.210
Here's another object
pointer to the next object.

18
00:00:58.220 --> 00:00:59.562
Cool, deletion's pretty quick.

19
00:00:59.562 --> 00:01:05.691
We just re-direct our
.next to the .next.next.

20
00:01:08.168 --> 00:01:09.086
&gt;&gt; Bianca Gandolfo: Cool?

21
00:01:11.480 --> 00:01:13.150
&gt;&gt; Bianca Gandolfo: All right, here we go.

22
00:01:13.150 --> 00:01:17.280
So we have our linked list,
we give it a value.

23
00:01:18.880 --> 00:01:21.600
Note that this if statement
is not really gonna cut it

24
00:01:21.600 --> 00:01:22.510
It's going to give us an error.

25
00:01:22.510 --> 00:01:25.310
You probably want to
throw an error instead.

26
00:01:26.690 --> 00:01:29.650
So we're going to create a new
node with the head value.

27
00:01:30.870 --> 00:01:34.310
When we create a new node it's going
to have again the next and the value.

28
00:01:34.310 --> 00:01:35.470
The next is set to null.

29
00:01:35.470 --> 00:01:38.140
I recommend null instead of undefined.

30
00:01:38.140 --> 00:01:39.770
And then the head is also the tail.

31
00:01:41.930 --> 00:01:42.754
Also if we insert and

32
00:01:42.754 --> 00:01:48.252
delete with the reference to the node,
&gt;&gt; Bianca Gandolfo: It's constant time,

33
00:01:48.252 --> 00:01:49.470
the slide is wrong.

34
00:01:51.440 --> 00:01:58.745
If you don't have a reference to the node,
&gt;&gt; Bianca Gandolfo: You're

35
00:01:58.745 --> 00:01:59.437
gonna need to Search for it, right?

36
00:01:59.437 --> 00:02:04.198
Which at the worst case is linear time.

37
00:02:08.564 --> 00:02:09.373
&gt;&gt; Bianca Gandolfo: Cool.

38
00:02:09.373 --> 00:02:11.208
Why is it linear time?

39
00:02:17.745 --> 00:02:20.488
&gt;&gt; Speaker 2: Because you're not
gonna loop across the whole thing,

40
00:02:20.488 --> 00:02:21.544
you're just gonna.

41
00:02:25.008 --> 00:02:27.040
&gt;&gt; Speaker 2: Actually, I don't know.

42
00:02:27.040 --> 00:02:28.950
Because you just changing the reference,
right?

43
00:02:28.950 --> 00:02:29.760
So it's just a.

44
00:02:31.200 --> 00:02:34.930
&gt;&gt; Bianca Gandolfo: So
if you have a reference

45
00:02:36.300 --> 00:02:38.340
then it will be constant time, right?

46
00:02:38.340 --> 00:02:40.540
Cuz your just changing the next.

47
00:02:40.540 --> 00:02:45.220
Or you need a reference to the parent
if you're deleteing or inserting.

48
00:02:47.240 --> 00:02:48.890
But if we don't have
a reference to the node,

49
00:02:48.890 --> 00:02:54.360
what do we have to do to
find the node in question?

50
00:02:57.000 --> 00:02:59.430
Yes.
So you would have to loop through

51
00:02:59.430 --> 00:03:00.430
our link list.

52
00:03:00.430 --> 00:03:01.670
Right, we loop through the link list for

53
00:03:01.670 --> 00:03:04.300
the while loop, we can't use the for
loop in this case.

54
00:03:07.390 --> 00:03:11.750
And looping through any less is
gonna be linear time, right?

55
00:03:11.750 --> 00:03:15.000
Because if we double that list
it's gonna double our work.

56
00:03:15.000 --> 00:03:16.170
So we have to look at each one.

57
00:03:18.180 --> 00:03:20.920
In the worst case, right because there
could be the case where the one that

58
00:03:20.920 --> 00:03:23.270
you're looking for is the head, right?

59
00:03:23.270 --> 00:03:25.310
In which case you're looking at one.

60
00:03:25.310 --> 00:03:26.570
Right, it's one operation.

61
00:03:26.570 --> 00:03:27.920
However we're not thinking about that.

62
00:03:27.920 --> 00:03:29.800
We're thinking about
what's the worse case.

63
00:03:29.800 --> 00:03:31.390
The worse case is all the way at the end.

64
00:03:31.390 --> 00:03:37.014
So we would have to loop through
the entire link list, cool.

65
00:03:37.014 --> 00:03:39.068
&gt;&gt; Speaker 3: Question?

66
00:03:39.068 --> 00:03:40.100
&gt;&gt; Bianca Gandolfo: Sure.

67
00:03:40.100 --> 00:03:45.660
&gt;&gt; Speaker 3: What do you mean reference
or result reference just picking up one.

68
00:03:45.660 --> 00:03:49.870
element from the middle,
or just, it's not clear.

69
00:03:49.870 --> 00:03:53.000
&gt;&gt; Bianca Gandolfo: Yeah, so your
question is why can't you just pick one

70
00:03:53.000 --> 00:03:54.680
randomly in the middle and
have a reference?

71
00:03:56.700 --> 00:03:57.890
&gt;&gt; Speaker 3: With a reference and

72
00:03:57.890 --> 00:04:00.780
without reference just to be
the example of some kind.

73
00:04:00.780 --> 00:04:02.080
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

74
00:04:02.080 --> 00:04:07.380
So an insert or
a delete with a reference means that you

75
00:04:07.380 --> 00:04:12.220
know what object you're going to be
deleting, inserting after, right?

76
00:04:12.220 --> 00:04:14.420
So you have, you have that reference.

77
00:04:14.420 --> 00:04:17.350
Maybe it's saved in a variable somewhere.

78
00:04:17.350 --> 00:04:18.220
So if you're inserting for

79
00:04:18.220 --> 00:04:22.310
example after the tail, which is a very
common operation for a linked list.

80
00:04:22.310 --> 00:04:25.390
Usually you're going to
have a pointer to the tail.

81
00:04:25.390 --> 00:04:27.100
So you have a reference to that node.

82
00:04:27.100 --> 00:04:31.470
So if you wanted to add
Something next to the tail.

83
00:04:31.470 --> 00:04:39.070
You would have to say this.tail.next
equals the new value.

84
00:04:39.070 --> 00:04:40.060
And that's easy, right?

85
00:04:40.060 --> 00:04:43.270
Because that's just
a constant time operation.

86
00:04:43.270 --> 00:04:44.930
We're good to go.

87
00:04:44.930 --> 00:04:49.690
For deletion we have
to have a reference to

88
00:04:49.690 --> 00:04:54.670
the parent, right, or I'm sorry.

89
00:04:54.670 --> 00:04:59.040
So if we wanna delete somewhere
after maybe the head.

90
00:04:59.040 --> 00:05:04.140
Like the one after the head,
you can delete the second one.

91
00:05:04.140 --> 00:05:08.750
And that would be having a reference
that just comes fo free.

92
00:05:08.750 --> 00:05:13.300
Otherwise you could
somehow save references

93
00:05:13.300 --> 00:05:16.630
as you're building your linked list or
whatever.

94
00:05:16.630 --> 00:05:18.790
You can have a reference
however you wanna have them.

95
00:05:18.790 --> 00:05:20.240
Generally, it's just gonna be the head and
tail.

96
00:05:22.150 --> 00:05:25.230
Otherwise, you're gonna have to search for

97
00:05:25.230 --> 00:05:26.970
the element in which
you wanna insert after.

98
00:05:26.970 --> 00:05:31.990
So maybe you wanna insert the number

99
00:05:31.990 --> 00:05:37.530
4 only after the number 5 and you have a
linked list that's numbered 1 through 10.

100
00:05:37.530 --> 00:05:43.400
You have to go 1 and then 2 and
then 3 and 4, I'm sorry.

101
00:05:43.400 --> 00:05:49.170
And then 5 and then you put 4 after which
that doesn't make sense sequentially but

102
00:05:49.170 --> 00:05:50.680
you get what I mean, right?

103
00:05:50.680 --> 00:05:54.890
So you want to insert it after but
you'd have to look through to get there.

104
00:05:54.890 --> 00:05:55.920
Because we don't,

105
00:05:55.920 --> 00:05:59.760
it's not an array where you can just
do a quick look up with an index.

106
00:05:59.760 --> 00:06:05.480
Where you can say like link list,
bracket 4, or something like that.

107
00:06:05.480 --> 00:06:06.900
That's not how it works.

108
00:06:06.900 --> 00:06:10.908
The only way you can access it is through
the dot next unless you have it saved in

109
00:06:10.908 --> 00:06:11.595
a variable.

110
00:06:14.620 --> 00:06:15.585
&gt;&gt; Bianca Gandolfo: Cool, good question.

111
00:06:15.585 --> 00:06:17.821
Awesome.

112
00:06:21.330 --> 00:06:22.187
&gt;&gt; Bianca Gandolfo: Any more questions?

113
00:06:28.952 --> 00:06:30.100
&gt;&gt; Bianca Gandolfo: No?

114
00:06:30.100 --> 00:06:31.730
How did linked lists land for you?

115
00:06:31.730 --> 00:06:36.812
What was confusing at
first that Cleared up.

116
00:06:43.528 --> 00:06:46.065
&gt;&gt; Speaker 2: But I mean, I didn't really
know what a linked list was before.

117
00:06:46.065 --> 00:06:47.380
&gt;&gt; Bianca Gandolfo: Mm-hm.

118
00:06:47.380 --> 00:06:49.640
&gt;&gt; Speaker 2: Before this, so.

119
00:06:49.640 --> 00:06:55.600
&gt;&gt; Bianca Gandolfo: What is your So
just a concept of the linked list.

120
00:06:55.600 --> 00:06:56.140
Yeah.

121
00:06:56.140 --> 00:06:57.258
&gt;&gt; Speaker 2: Yeah, for sure.

122
00:06:57.258 --> 00:06:58.226
&gt;&gt; Bianca Gandolfo: Cool.

123
00:07:02.294 --> 00:07:03.537
&gt;&gt; Speaker 2: And then at first,

124
00:07:03.537 --> 00:07:08.440
I though they would have references
to the parent as well as the child.

125
00:07:08.440 --> 00:07:11.212
And I think you said that's
actually that's a double link list.

126
00:07:11.212 --> 00:07:12.450
Sorry.
&gt;&gt; Bianca Gandolfo: Yep.

127
00:07:12.450 --> 00:07:14.950
Yeah, and
if you're interested in the solution for

128
00:07:14.950 --> 00:07:20.140
the double link list there's
a solution that you can check out.

129
00:07:20.140 --> 00:07:22.510
Yeah, cool.

130
00:07:22.510 --> 00:07:26.780
So it can be singly linked or
doubly linked.

131
00:07:26.780 --> 00:07:30.810
Cool.
We are going to have multiple links.

132
00:07:32.290 --> 00:07:33.820
Length and it's called a skip list.

133
00:07:33.820 --> 00:07:36.820
You can look into that to see sort
of a variation of a link list.

134
00:07:40.693 --> 00:07:43.320
&gt;&gt; Speaker 2: I have sort
of an insight question.

135
00:07:43.320 --> 00:07:46.680
So one thing, I mean, for the most part,
this was pretty straightforward.

136
00:07:46.680 --> 00:07:50.700
But one thing I was confused about
is what a node actually was.

137
00:07:50.700 --> 00:07:53.510
I wanted it to have a name and
an identifier and

138
00:07:53.510 --> 00:07:57.900
so It seemed kind of complicated
to me like overcomplicated.

139
00:07:57.900 --> 00:08:00.270
But then I was talking to
a friend about it yesterday.

140
00:08:00.270 --> 00:08:02.850
And I'm interested in what
you think about this is.

141
00:08:02.850 --> 00:08:07.470
But he said that the whole point is to be
sort of agnostic about what a note is.

142
00:08:07.470 --> 00:08:09.330
And that's kind of the whole
point of a link list.

143
00:08:09.330 --> 00:08:12.150
Would you agree with that or?

144
00:08:12.150 --> 00:08:12.750
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 2: You don't

145
00:08:12.750 --> 00:08:15.120
really want to worry about
exactly what each note is.

146
00:08:15.120 --> 00:08:17.060
It's just a matter of Connecting them.

147
00:08:17.060 --> 00:08:18.720
&gt;&gt; Bianca Gandolfo: Yeah,
yeah, exactly, yeah.

148
00:08:18.720 --> 00:08:21.915
The purpose of the linked list isn't
necessarily, you want your data in any

149
00:08:21.915 --> 00:08:27.220
sort of list to be the same type,
the same format.

150
00:08:27.220 --> 00:08:30.400
Ideally, right, if you're doing
things the way you're supposed to do.

151
00:08:30.400 --> 00:08:34.860
But a linked, what is specifically
in your linked list can vary.

152
00:08:34.860 --> 00:08:39.840
And your specific implementation
is going to change.

153
00:08:39.840 --> 00:08:43.592
So the point is you should understand
where the overall concept and

154
00:08:43.592 --> 00:08:46.960
then be able to fill in the blank for
your use case.

155
00:08:46.960 --> 00:08:51.530
And a node can contain, as long as it
has a dot next and some sort of value.

156
00:08:53.580 --> 00:08:55.490
The rest of it is kind of up to you,
right?

157
00:08:55.490 --> 00:08:57.970
The value could be an object, right?

158
00:08:57.970 --> 00:09:00.920
That has a bunch of different
values in it, right?

159
00:09:00.920 --> 00:09:03.180
That could be a possibility, yeah.

160
00:09:03.180 --> 00:09:07.330
And different variations of linked lists
have different ways that they connect to

161
00:09:07.330 --> 00:09:10.800
their .next another dot next.

162
00:09:12.220 --> 00:09:14.100
&gt;&gt; Speaker 2: The question I'm
realizing may be off topic so

163
00:09:14.100 --> 00:09:15.590
you can just talk later.

164
00:09:15.590 --> 00:09:19.390
But I'm wondering at one point a linked
list starts to become more of a database.

165
00:09:19.390 --> 00:09:22.500
I mean, if you start adding all of
these links and references and things.

166
00:09:22.500 --> 00:09:23.450
&gt;&gt; Bianca Gandolfo: Becomes a database?

167
00:09:23.450 --> 00:09:27.060
&gt;&gt; Speaker 2: More like a- not a database,
but you know what I mean?

168
00:09:27.060 --> 00:09:30.650
&gt;&gt; Bianca Gandolfo: Well data
structures underly databases, right?

169
00:09:30.650 --> 00:09:31.770
So.

170
00:09:31.770 --> 00:09:33.910
&gt;&gt; Speaker 2: Okay, so
it's just a simpler form of it.

171
00:09:33.910 --> 00:09:35.530
&gt;&gt; Bianca Gandolfo: Yeah,
yeah, yeah, cool.

172
00:09:37.210 --> 00:09:41.770
&gt;&gt; Bianca Gandolfo: I like that.

173
00:09:41.770 --> 00:09:44.400
Yeah?
&gt;&gt; Speaker 3: The diagram that reads very

174
00:09:44.400 --> 00:09:48.435
clearly, and
the diagram you show is very clear.

175
00:09:48.435 --> 00:09:50.890
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; Speaker 3: But putting the diagram to

176
00:09:50.890 --> 00:09:54.630
the code was some starting out,

177
00:09:54.630 --> 00:09:59.890
to start to code was hard for me.

178
00:09:59.890 --> 00:10:02.170
&gt;&gt; Bianca Gandolfo: Yeah, so
when you saw the diagram, it made sense.

179
00:10:02.170 --> 00:10:04.225
But then when you started to code,
it was kinda difficult?

180
00:10:04.225 --> 00:10:07.195
Okay, yeah, but

181
00:10:07.195 --> 00:10:12.350
leap to code was tough, yeah.

182
00:10:13.710 --> 00:10:17.220
And with data structures,
you'll find that once you did it once.

183
00:10:17.220 --> 00:10:21.320
Then you're familiar with the approach and
it's easier, right?

184
00:10:21.320 --> 00:10:25.480
But getting from the concept to
the actual implementation for

185
00:10:25.480 --> 00:10:30.080
the first time can be It
could be hard on your brain.

186
00:10:30.080 --> 00:10:31.370
It's a good practice, right?

187
00:10:31.370 --> 00:10:36.070
Because you're not always gonna have some
predefined data structure that I'm gonna

188
00:10:36.070 --> 00:10:38.120
tell you exactly how you should do it.

189
00:10:38.120 --> 00:10:39.750
You know what I mean?

190
00:10:39.750 --> 00:10:42.660
You're gonna need to be able to think
like, okay, here's my use case.

191
00:10:42.660 --> 00:10:44.360
This is what I need to do.

192
00:10:44.360 --> 00:10:45.540
Here's some constraints.

193
00:10:47.000 --> 00:10:49.140
You know,
what's the best way of doing this?

194
00:10:49.140 --> 00:10:51.580
And being able to reason
through it on your own.

195
00:10:51.580 --> 00:10:54.590
But again, it is a leap and
something that comes with practice,

196
00:10:54.590 --> 00:10:55.790
and that's why you're here, right?

197
00:10:55.790 --> 00:10:56.570
To get that practice.

198
00:10:57.640 --> 00:10:59.420
Because probably when you're
thinking about your data,

199
00:10:59.420 --> 00:11:00.520
you're drawing it on a white board.

200
00:11:00.520 --> 00:11:03.910
You're not coding it out first,
hopefully, you know?

201
00:11:03.910 --> 00:11:04.840
That would be kind of scary.

