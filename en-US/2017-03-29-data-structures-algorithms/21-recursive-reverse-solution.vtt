WEBVTT

1
00:00:00.200 --> 00:00:02.290
&gt;&gt; Bianca Gandolfo: We're
gonna go over some solutions,

2
00:00:02.290 --> 00:00:05.370
talk about the coming days.

3
00:00:05.370 --> 00:00:09.570
How to prepare mentally,
physically, all those things,

4
00:00:09.570 --> 00:00:13.290
for building on this knowledge, right?

5
00:00:13.290 --> 00:00:17.310
So today is mostly your
view of some concepts that

6
00:00:17.310 --> 00:00:21.060
the rest of the course is
going to build on, yeah?

7
00:00:21.060 --> 00:00:25.320
So even if you don't master it today,
you're gonna see it again.

8
00:00:25.320 --> 00:00:28.000
And we're just gonna keep building
on it and building on it.

9
00:00:28.000 --> 00:00:29.770
These little building blocks, right?

10
00:00:29.770 --> 00:00:30.410
Just like this.

11
00:00:31.470 --> 00:00:34.450
Let's start with some recursion problems.

12
00:00:34.450 --> 00:00:35.420
We'll go through some of them.

13
00:00:35.420 --> 00:00:41.762
Is there one in particular that you like?
&gt;&gt; Bianca Gandolfo: Which one?

14
00:00:41.762 --> 00:00:43.215
&gt;&gt; Speaker 2: The last one.

15
00:00:43.215 --> 00:00:46.167
&gt;&gt; Bianca Gandolfo: RecursiveReverse.

16
00:00:48.932 --> 00:00:50.228
&gt;&gt; Bianca Gandolfo: Awesome.

17
00:00:52.988 --> 00:00:54.252
&gt;&gt; Bianca Gandolfo: So I'm just gonna take

18
00:00:54.252 --> 00:00:56.120
that instruction, put it here.

19
00:00:57.830 --> 00:01:02.250
So our task is to write a function called
recursiveReverse that takes an array and

20
00:01:02.250 --> 00:01:05.920
uses recursion to return
its contents in reverse.

21
00:01:08.340 --> 00:01:12.873
I like this, so let's just set it up,

22
00:01:12.873 --> 00:01:17.980
recursiveReverse equals a function.

23
00:01:17.980 --> 00:01:19.490
Probably takes some array, yeah?

24
00:01:21.820 --> 00:01:25.512
There we are, okay.

25
00:01:25.512 --> 00:01:27.564
So there's a few ways we can do this,
right?

26
00:01:27.564 --> 00:01:32.337
The first way, the easiest way
probably is to have a function.

27
00:01:32.337 --> 00:01:33.877
I'm sorry, to have an array,

28
00:01:33.877 --> 00:01:36.853
a second array that we just
pushed in to backwards, right?

29
00:01:36.853 --> 00:01:42.168
And so, we've been looping in the previous
problems, looping using recursion.

30
00:01:42.168 --> 00:01:46.579
So the simplest way is just
to create an array and

31
00:01:46.579 --> 00:01:49.901
loop through it backwards, yeah?

32
00:01:49.901 --> 00:01:54.957
And then the other way is by swapping.

33
00:01:54.957 --> 00:02:01.384
Cool, let's do it the easy way first.
&gt;&gt; Bianca Gandolfo: So

34
00:02:01.384 --> 00:02:06.591
let's create our second array.

35
00:02:08.894 --> 00:02:12.169
&gt;&gt; Bianca Gandolfo: Let's see,

36
00:02:12.169 --> 00:02:16.040
var addItems,

37
00:02:16.040 --> 00:02:20.215
we'll call it.

38
00:02:20.215 --> 00:02:23.140
So, who here got to this problem?

39
00:02:25.220 --> 00:02:29.960
Cool, did anyone do it
this way with the loop, or

40
00:02:29.960 --> 00:02:34.783
with the extra array?
&gt;&gt; Speaker 2: We didn't finished

41
00:02:34.783 --> 00:02:36.920
the problem.
&gt;&gt; Bianca Gandolfo: You didn't finish it.

42
00:02:36.920 --> 00:02:37.800
Okay, no worries.

43
00:02:38.970 --> 00:02:39.470
Here we are.

44
00:02:41.460 --> 00:02:44.490
Cool, so the basic setup.

45
00:02:45.930 --> 00:02:51.360
We probably wanna, actually this would be,
we'll call this reversed array, right?

46
00:02:51.360 --> 00:02:52.150
It's a better name.

47
00:02:53.610 --> 00:02:57.280
And we'll return at the end
the reversed array.

48
00:02:58.400 --> 00:02:59.610
So I'm just doing some setup.

49
00:02:59.610 --> 00:03:03.437
What we're gonna do is we're gonna
loop backwards using recursion, and

50
00:03:03.437 --> 00:03:09.012
we're gonna push into this array
&gt;&gt; Bianca Gandolfo: We're gonna use this

51
00:03:09.012 --> 00:03:12.246
function here to do that, this is gonna
be a recursive function on the inside.

52
00:03:12.246 --> 00:03:17.090
And then at the end, we're just
gonna return our reversed array.

53
00:03:19.300 --> 00:03:19.834
Sound solid?

54
00:03:19.834 --> 00:03:22.854
I think it's sounds solid, that's just me.

55
00:03:22.854 --> 00:03:28.360
All right, so
you have to call addItems, right?

56
00:03:29.780 --> 00:03:33.049
Probably wanna pass it the initial
array just to start it off.

57
00:03:39.427 --> 00:03:40.043
&gt;&gt; Bianca Gandolfo: Then,

58
00:03:43.001 --> 00:03:44.398
&gt;&gt; Bianca Gandolfo: Just to be clear,

59
00:03:44.398 --> 00:03:49.630
we don't actually need to pass it in,
but just for clarity.

60
00:03:49.630 --> 00:03:53.110
Let's see, what's the opposite of reverse?

61
00:03:53.110 --> 00:03:56.759
Like, inOrderarr?
&gt;&gt; Speaker 2: OrderedArr.

62
00:03:56.759 --> 00:03:57.526
&gt;&gt; Bianca Gandolfo: Ordered,

63
00:03:57.526 --> 00:04:01.354
okay.
&gt;&gt; Speaker 3: It's reversed.

64
00:04:03.317 --> 00:04:04.571
&gt;&gt; Bianca Gandolfo: It's what?

65
00:04:04.571 --> 00:04:06.131
&gt;&gt; [INAUDIBLE]

66
00:04:06.131 --> 00:04:07.670
&gt;&gt; Speaker 3: Never mind.

67
00:04:07.670 --> 00:04:09.476
&gt;&gt; Bianca Gandolfo: [LAUGH]

68
00:04:12.869 --> 00:04:13.830
&gt;&gt; Bianca Gandolfo: It's over my head.

69
00:04:15.460 --> 00:04:19.910
That's my kind of joke too,
just like super cheesy.

70
00:04:19.910 --> 00:04:25.253
I mean that as a compliment.
&gt;&gt; Speaker 2: [LAUGH]

71
00:04:25.253 --> 00:04:25.764
&gt;&gt; Bianca Gandolfo: Okay,

72
00:04:25.764 --> 00:04:31.270
so I just named this ordered array,
just to be clear that It's not.

73
00:04:31.270 --> 00:04:33.380
It technically is the same and
you could do it this way.

74
00:04:33.380 --> 00:04:35.830
But when you start naming things the same,
and

75
00:04:35.830 --> 00:04:37.740
it starts to get confusing
about which one is which.

76
00:04:37.740 --> 00:04:38.654
So that's why I named it differently.

77
00:04:38.654 --> 00:04:43.892
Great, all right.

78
00:04:43.892 --> 00:04:46.290
So here we are at the meat of the problem.

79
00:04:46.290 --> 00:04:48.080
Let's take a stab.

80
00:04:50.130 --> 00:04:56.146
What is our,
&gt;&gt; Bianca Gandolfo: Base

81
00:04:56.146 --> 00:05:01.502
case?
&gt;&gt; Bianca Gandolfo: What could be

82
00:05:01.502 --> 00:05:07.240
a base case in this scenario?
&gt;&gt; Speaker 2: First array?

83
00:05:07.240 --> 00:05:09.060
&gt;&gt; Speaker 3: Like lesson two?

84
00:05:09.060 --> 00:05:10.880
Ideally.
&gt;&gt; Bianca Gandolfo: Yeah, so

85
00:05:10.880 --> 00:05:17.820
like we can say if, assuming we're pushing
off a bit, right, or popping off a bit.

86
00:05:17.820 --> 00:05:25.436
If array is empty, return, cool.

87
00:05:25.436 --> 00:05:32.750
Yeah, anything else?

88
00:05:32.750 --> 00:05:38.754
So addItems, so
we're going to our recursion here.

89
00:05:38.754 --> 00:05:48.060
We need to get closer to an empty array.
&gt;&gt; Bianca Gandolfo: So what should we do?

90
00:05:48.060 --> 00:05:49.580
How do we get there?

91
00:05:49.580 --> 00:05:54.407
How do we get there?
&gt;&gt; Speaker 2: Of the end of it.

92
00:05:54.407 --> 00:05:55.937
&gt;&gt; Bianca Gandolfo: [SOUND] So

93
00:05:55.937 --> 00:06:01.676
we say order, so orderedArr.
&gt;&gt; Speaker 2: Is the-

94
00:06:01.676 --> 00:06:02.760
&gt;&gt; Bianca Gandolfo: Dot pop.

95
00:06:02.760 --> 00:06:04.786
&gt;&gt; Speaker 2: Is the array that you're

96
00:06:04.786 --> 00:06:07.299
taking, ordered array then?

97
00:06:07.299 --> 00:06:08.880
Is the array that you're taking in,

98
00:06:08.880 --> 00:06:10.020
ordered array?
&gt;&gt; Bianca Gandolfo: Yeah,

99
00:06:10.020 --> 00:06:12.780
this is our original array
that's not reversed yet.

100
00:06:15.190 --> 00:06:15.776
&gt;&gt; Speaker 2: Where's order,

101
00:06:15.776 --> 00:06:17.407
[INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yeah,

102
00:06:17.407 --> 00:06:20.441
it's just a parameter name.

103
00:06:20.441 --> 00:06:21.638
So it comes in here and

104
00:06:21.638 --> 00:06:23.460
then I pass it down here.
&gt;&gt; Speaker 2: Got you.

105
00:06:23.460 --> 00:06:24.061
&gt;&gt; Bianca Gandolfo: And

106
00:06:24.061 --> 00:06:27.873
then it becomes that.

107
00:06:27.873 --> 00:06:29.810
Cool, so we pop it off.

108
00:06:29.810 --> 00:06:33.861
So we're getting closer, but
what else do we need to do?

109
00:06:38.962 --> 00:06:42.534
&gt;&gt; [INAUDIBLE]

110
00:06:42.534 --> 00:06:47.158
&gt;&gt; Bianca Gandolfo: Yeah, reversedArr.

111
00:07:02.134 --> 00:07:03.844
&gt;&gt; Bianca Gandolfo: Cool.

112
00:07:09.326 --> 00:07:14.905
&gt;&gt; Bianca Gandolfo: So this is our

113
00:07:14.905 --> 00:07:19.986
base case.

114
00:07:19.986 --> 00:07:25.540
We're just gonna say as
long as we have a length,

115
00:07:25.540 --> 00:07:32.729
as long as it is greater than 0,
we're gonna do these things.

116
00:07:37.832 --> 00:07:41.440
&gt;&gt; Bianca Gandolfo: Else return.

117
00:07:43.240 --> 00:07:44.260
This look like it's gonna work?

118
00:07:45.330 --> 00:07:51.820
Do we have any bugs in this code?
&gt;&gt; Bianca Gandolfo: Did I

119
00:07:51.820 --> 00:07:57.262
spell anything wrong?
&gt;&gt; Bianca Gandolfo: Does

120
00:07:57.262 --> 00:08:01.356
return need to be in an else,
like will that evaluate every time

121
00:08:01.356 --> 00:08:07.113
otherwise?
&gt;&gt; Bianca Gandolfo: It will,

122
00:08:07.113 --> 00:08:11.459
but it doesn't matter at this
point because that it's at

123
00:08:11.459 --> 00:08:18.997
the end.
&gt;&gt; Bianca Gandolfo: Cool,

124
00:08:18.997 --> 00:08:19.840
should we try it?

125
00:08:19.840 --> 00:08:26.281
There's only one way to know if it works.
&gt;&gt; Bianca Gandolfo: All right,

126
00:08:26.281 --> 00:08:32.377
let's check it out.
&gt;&gt; Bianca Gandolfo: All right,

127
00:08:32.377 --> 00:08:35.935
so let's just put it in order and
let's see.

128
00:08:39.431 --> 00:08:42.535
&gt;&gt; Bianca Gandolfo: What do we think?

129
00:08:42.535 --> 00:08:44.790
[SOUND] I'm so nervous.

130
00:08:44.790 --> 00:08:49.702
[SOUND] It is reversed.

131
00:08:49.702 --> 00:08:51.380
So that's an easy way of doing it.

132
00:08:51.380 --> 00:08:56.975
And I always recommend don't over
complicate your life unnecessarily.

133
00:08:56.975 --> 00:09:00.699
Don't optimize before you need to.

134
00:09:00.699 --> 00:09:04.494
So if this is doing
what you need to do and

135
00:09:04.494 --> 00:09:09.334
you have a small data set,
I say rock on with this.

136
00:09:09.334 --> 00:09:10.216
Cool, and

137
00:09:10.216 --> 00:09:16.000
then this is the wrapper function
style that I was mentioning before.

138
00:09:16.000 --> 00:09:18.880
Where we have a function in here,

139
00:09:18.880 --> 00:09:22.680
we have a variable in an enclosure
that we're just adding to.

140
00:09:22.680 --> 00:09:27.571
It's a lot easier to keep track
of what you're returning,

141
00:09:29.710 --> 00:09:30.674
&gt;&gt; Bianca Gandolfo: In this case.

142
00:09:30.674 --> 00:09:33.340
So if you can do it that way, awesome.

143
00:09:34.710 --> 00:09:38.300
It's a little less elegant
than some other styles.

144
00:09:38.300 --> 00:09:40.680
But-
&gt;&gt; Speaker 2: What's a closure again?

145
00:09:40.680 --> 00:09:42.646
&gt;&gt; Bianca Gandolfo: A closure is just like

146
00:09:42.646 --> 00:09:45.375
a, closure is about scope and

147
00:09:45.375 --> 00:09:50.626
it happens when you have
a function inside of a function.

148
00:09:50.626 --> 00:09:55.276
And so, the reason that this
is called a closure variable,

149
00:09:55.276 --> 00:10:02.350
because this inner function has access.
&gt;&gt; Bianca Gandolfo: To

150
00:10:02.350 --> 00:10:03.521
retains access to it, and

151
00:10:03.521 --> 00:10:08.809
it's also inside of another function.
&gt;&gt; Bianca Gandolfo: Normally

152
00:10:08.809 --> 00:10:13.568
you do some funky things with returning
this addItems outside of this function.

153
00:10:13.568 --> 00:10:19.040
So that you can actually access
reverse array through addItems even

154
00:10:19.040 --> 00:10:25.100
if that function had already executed,
which is why it has a fancy name.

155
00:10:25.100 --> 00:10:28.620
In this case, it's just scope.

156
00:10:28.620 --> 00:10:30.270
You know what I mean?

157
00:10:31.960 --> 00:10:33.310
Not really anything special about it.

