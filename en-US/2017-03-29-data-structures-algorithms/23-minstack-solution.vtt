WEBVTT

1
00:00:00.364 --> 00:00:03.150
&gt;&gt; Bianca: So I'm moving on recursing
back to our stacks and cues.

2
00:00:03.150 --> 00:00:06.190
So MinStack,
super common interview question.

3
00:00:06.190 --> 00:00:15.490
This is a bit of a cool trick,

4
00:00:15.490 --> 00:00:16.940
because it's in constant time.

5
00:00:16.940 --> 00:00:17.550
Which we'll talk about tomorrow.

6
00:00:17.550 --> 00:00:20.620
But it's a pretty fast,
it's a very, very fast way.

7
00:00:20.620 --> 00:00:25.130
To keep track of the minimum
value in your stack, right?

8
00:00:25.130 --> 00:00:28.620
So if you think about ways you can
find minimum value in your stack,

9
00:00:28.620 --> 00:00:30.730
is you can loop through
all of your stacks.

10
00:00:30.730 --> 00:00:33.998
So you have to look at every single thing,
every time you're looking for

11
00:00:33.998 --> 00:00:34.970
something, right?

12
00:00:34.970 --> 00:00:39.678
or every time you're either
taking something off,

13
00:00:39.678 --> 00:00:47.180
putting something on you have to search,
every little thing, each value, yeah?

14
00:00:47.180 --> 00:00:48.810
am I making sense?

15
00:00:48.810 --> 00:00:52.960
Cool, and
that is not what we call constant time.

16
00:00:52.960 --> 00:00:54.880
We'll talk more about specifics tomorrow,
but

17
00:00:54.880 --> 00:00:59.718
that is pretty slow if you think about a
list that's like a bajillion things on us.

18
00:00:59.718 --> 00:01:01.570
That's a scientific term.

19
00:01:01.570 --> 00:01:02.914
All of you.

20
00:01:02.914 --> 00:01:04.047
Ask the math guy, right?
bajillion

21
00:01:04.047 --> 00:01:06.044
&gt;&gt; Male: Absolutely.

22
00:01:06.044 --> 00:01:06.728
&gt;&gt; Bianca: Yeah.

23
00:01:06.728 --> 00:01:10.880
So you have a bajillion squares,
and you're tryna.

24
00:01:10.880 --> 00:01:13.060
So as you're going through and
you're adding, right, and

25
00:01:13.060 --> 00:01:14.280
you're like, this is the minimum.

26
00:01:14.280 --> 00:01:15.030
I'll keep comparing.

27
00:01:15.030 --> 00:01:15.910
It's not a big deal.

28
00:01:15.910 --> 00:01:19.540
But once you start taking off,
then you're like, my gosh.

29
00:01:19.540 --> 00:01:21.540
What's the second minimum?

30
00:01:21.540 --> 00:01:23.930
And going, and going, and going, and
then you have to search through,

31
00:01:23.930 --> 00:01:25.680
is that the second minimum,
is that the second minimum.

32
00:01:25.680 --> 00:01:27.330
You have to check through all of them.

33
00:01:29.480 --> 00:01:30.510
Yeah?

34
00:01:30.510 --> 00:01:31.520
Cool.

35
00:01:31.520 --> 00:01:33.750
So this is a cool trick to avoid that.

36
00:01:34.910 --> 00:01:39.420
In the keys here,
we have this second stack.

37
00:01:39.420 --> 00:01:40.840
We call it our MinStack,

38
00:01:40.840 --> 00:01:46.350
that lives inside of our other stack
that we happen to call a MinStack.

39
00:01:48.400 --> 00:01:53.400
So as we're going through,
it's kind of your standard,

40
00:01:53.400 --> 00:01:58.420
if we haven't reached capacity, and

41
00:01:58.420 --> 00:02:02.140
if the value is less,

42
00:02:02.140 --> 00:02:07.680
if the previous value is less than
the current value that you're adding.

43
00:02:07.680 --> 00:02:11.640
If the previous value is
less than the current value.

44
00:02:12.710 --> 00:02:19.550
Then you're gonna keep pushing every
single time that minimum value.

45
00:02:20.760 --> 00:02:26.210
Otherwise, You're gonna push the new value
because it's less than the last one.

46
00:02:26.210 --> 00:02:30.410
And this is your MinStack, by the way.

47
00:02:30.410 --> 00:02:32.911
This is a different stack
from your storage here.

48
00:02:32.911 --> 00:02:35.002
And I’m gonna draw in a second, but

49
00:02:35.002 --> 00:02:38.750
I’m just gonna walk you
through the code first.

50
00:02:38.750 --> 00:02:40.490
Yeah?
&gt;&gt; Female: So

51
00:02:40.490 --> 00:02:45.196
what's accumulating in the MinStack?
&gt;&gt; Bianca: The MinStack is gonna

52
00:02:45.196 --> 00:02:48.890
keep track of all of your minimum values.

53
00:02:48.890 --> 00:02:53.790
Any given sort of,
You can think of it as different phases.

54
00:02:53.790 --> 00:02:57.830
As you add, add, and we'll be keeping
track of the minimum all the time.

55
00:02:57.830 --> 00:03:01.172
As you pop, you'll keep popping and
you'll always have the minimum.

56
00:03:01.172 --> 00:03:03.850
I'm gonna draw it in a second and
it's gonna make more sense, I promise.

57
00:03:03.850 --> 00:03:05.480
I got a new toy.

58
00:03:05.480 --> 00:03:06.320
I'm ready to play.

59
00:03:07.360 --> 00:03:08.600
Let's see, if I can make it work.

60
00:03:08.600 --> 00:03:15.000
All right, so did that work?

61
00:03:15.000 --> 00:03:16.850
Here we go, all right.

62
00:03:19.120 --> 00:03:25.610
So, let's just say,
let me stop for a moment.

63
00:03:25.610 --> 00:03:30.640
I'm gonna put this code here so
we have something to

64
00:03:30.640 --> 00:03:36.382
reference.
&gt;&gt; Bianca: And

65
00:03:36.382 --> 00:03:39.350
I'll make it in pretty JavaScript for
all of you.

66
00:03:41.500 --> 00:03:42.000
All right.

67
00:03:43.086 --> 00:03:47.800
So, this is imagine we have
a stack called, myStack, and

68
00:03:47.800 --> 00:03:50.130
then we just are pushing some stuff on it,
right?

69
00:03:51.820 --> 00:03:59.679
We're gonna push, push, push.
&gt;&gt; Bianca: Yeah, and then you can think,

70
00:03:59.679 --> 00:04:04.920
I'm gonna draw this as an array, but
you guys know it's actually an object.

71
00:04:04.920 --> 00:04:08.418
So when we push the first one 1,
23, 9, 5 right?

72
00:04:08.418 --> 00:04:13.112
Makes sense?

73
00:04:13.112 --> 00:04:16.210
Great.

74
00:04:16.210 --> 00:04:18.420
So this is our actual stack.

75
00:04:18.420 --> 00:04:23.580
So as we're pushing, as you would
expect you know our state changes.

76
00:04:23.580 --> 00:04:25.680
Our state is just like what
does our data look like?

77
00:04:25.680 --> 00:04:30.301
So, at this point it looks like that,
at this point,

78
00:04:30.301 --> 00:04:35.025
it looks like this, and
at this point, it looks like,

79
00:04:35.025 --> 00:04:39.780
not like that, looks like this,
23 and 9, yeah?

80
00:04:39.780 --> 00:04:43.070
So we're growing our stack, easy.

81
00:04:44.510 --> 00:04:51.150
The difference between this one,
this regular stack, this is our storage.

82
00:04:53.330 --> 00:04:54.680
And then we have our MinStack.

83
00:04:56.520 --> 00:05:00.972
So what our MinStack is doing,
is every time we push something,

84
00:05:00.972 --> 00:05:03.290
we're gonna push a value
into our MinStack.

85
00:05:03.290 --> 00:05:03.820
Every time.
And

86
00:05:03.820 --> 00:05:08.700
it's always gonna be the minimum
value at that state.

87
00:05:08.700 --> 00:05:14.532
So at this state it's gonna push this one.
&gt;&gt; Bianca: So

88
00:05:14.532 --> 00:05:16.165
I'm not gonna label all this, but

89
00:05:16.165 --> 00:05:21.030
we know that the first one is gonna be the
storage and the second one is our minimum.

90
00:05:21.030 --> 00:05:22.560
So at this one, at this state,

91
00:05:22.560 --> 00:05:26.009
1 is the minimum.
&gt;&gt; Bianca: I'm sorry,

92
00:05:26.009 --> 00:05:30.379
this is the second state, and
1 continues to be our minimum.

93
00:05:32.735 --> 00:05:35.224
&gt;&gt; Bianca: Making sense?

94
00:05:35.224 --> 00:05:40.510
So now, if we did pop off from your stack,

95
00:05:45.460 --> 00:05:48.174
&gt;&gt; Bianca: What this would look like,

96
00:05:48.174 --> 00:05:52.780
we're gonna pop it off, goodbye, goodbye.

97
00:05:52.780 --> 00:05:57.810
And we're still gonna keep track
of that minimum there, okay?

98
00:05:59.280 --> 00:06:03.046
But I'm getting ahead of myself,
let's go through the whole spiel.

99
00:06:06.345 --> 00:06:11.797
&gt;&gt; Bianca: All right [NOISE]

100
00:06:11.797 --> 00:06:16.833
1,1,1.

101
00:06:16.833 --> 00:06:21.540
This is a terrible example.

102
00:06:21.540 --> 00:06:22.610
I'm so sorry.

103
00:06:22.610 --> 00:06:26.335
So, it's gonna be-
&gt;&gt; Female: [LAUGH]

104
00:06:26.335 --> 00:06:29.320
&gt;&gt; Bianca: Like this.

105
00:06:29.320 --> 00:06:30.640
So let's check out the code.

106
00:06:30.640 --> 00:06:34.540
So, what the code is saying here,
so we're not at capacity.

107
00:06:34.540 --> 00:06:37.020
Whatever, we don't have the capacity,
we don't care about that.

108
00:06:37.020 --> 00:06:41.113
So if the last one,
if the value is greater then the last one,

109
00:06:41.113 --> 00:06:45.870
then you're gonna put the last one,
I'm doing this wrong, guys.

110
00:06:45.870 --> 00:06:47.650
You're not calling me out.

111
00:06:49.310 --> 00:06:51.718
Then push the value, Okay.

112
00:06:51.718 --> 00:06:53.060
Here we go.

113
00:06:53.060 --> 00:06:53.726
I'm lying to you.

114
00:06:53.726 --> 00:07:00.023
Let's see.

115
00:07:00.023 --> 00:07:04.880
So if, the last one, no, no, no.

116
00:07:04.880 --> 00:07:05.380
Okay.

117
00:07:06.380 --> 00:07:07.660
No, no, I was right, I'm sorry.

118
00:07:10.160 --> 00:07:10.990
I am sorry.

119
00:07:10.990 --> 00:07:15.190
Let's do, let's not start with one,
let's start with four.

120
00:07:16.730 --> 00:07:18.950
Nope, let's start with 6.

121
00:07:18.950 --> 00:07:22.460
This is a better example, don't you think?

122
00:07:22.460 --> 00:07:23.900
Are you guys following me?

123
00:07:23.900 --> 00:07:25.677
All right.

124
00:07:25.677 --> 00:07:29.492
Let's re-try here.

125
00:07:37.229 --> 00:07:39.090
&gt;&gt; Bianca: Okay, here we are.

126
00:07:40.700 --> 00:07:42.380
Okay, so
this is where it's a little bit different.

127
00:07:43.430 --> 00:07:44.220
Let's change our 1s to 6s.

128
00:07:44.220 --> 00:07:45.680
All right.

129
00:07:50.230 --> 00:07:53.400
So when we push the 5, we look,
we peek at the last one.

130
00:07:53.400 --> 00:07:58.750
We say is this one less than
the current one, and no it's not.

131
00:07:58.750 --> 00:08:01.463
So then we put a 5 there, cool?

132
00:08:01.463 --> 00:08:07.125
Awesome, and the reason is,
is that every time we pop,

133
00:08:07.125 --> 00:08:11.190
we'll always have the last one on top.

134
00:08:11.190 --> 00:08:16.890
You won't have to search through
our stack, and find it every time.

135
00:08:16.890 --> 00:08:18.110
So it's just an optimisation,

136
00:08:18.110 --> 00:08:21.891
it's kind of a
&gt;&gt; Bianca: You know,

137
00:08:21.891 --> 00:08:24.561
Min cycles are really common
interview question, so

138
00:08:24.561 --> 00:08:27.780
just like keeping this in the back
of your mind, super helpful.

139
00:08:29.230 --> 00:08:31.190
Well any question about
this implementation?

140
00:08:33.020 --> 00:08:34.680
&gt;&gt; Male: Question from the chart earlier.

141
00:08:34.680 --> 00:08:38.570
Tigan is asking why push
the minimum value again?

142
00:08:38.570 --> 00:08:39.330
&gt;&gt; Bianca: Why push the minimum

143
00:08:39.330 --> 00:08:40.920
value again?

144
00:08:40.920 --> 00:08:41.770
That's a great question.

145
00:08:41.770 --> 00:08:46.060
So the reason is that, the reason why
we're pushing it multiple times is so

146
00:08:46.060 --> 00:08:52.040
that when you pop it, you're keeping
track of which states but this is true.

147
00:08:53.480 --> 00:08:57.367
So,
&gt;&gt; Bianca: For the last state,

148
00:08:57.367 --> 00:08:59.740
which is this, right?

149
00:08:59.740 --> 00:09:02.940
It's true that 5 is the last one.

150
00:09:02.940 --> 00:09:09.921
But when we pop it off like this,
&gt;&gt; Bianca: In this state, which we can

151
00:09:09.921 --> 00:09:15.620
see here, it's true that 6 is the minimum,
and that's true for all of the other ones.

152
00:09:17.510 --> 00:09:19.748
And the reason that we need to keep
track of it, for each state is so

153
00:09:19.748 --> 00:09:21.850
that we don't have to go searching for
it every single time.

154
00:09:21.850 --> 00:09:27.187
And that saves us time, makes it faster
and we'll talk about specifics tomorrow,

155
00:09:27.187 --> 00:09:33.698
around that.
&gt;&gt; Bianca: So

156
00:09:33.698 --> 00:09:38.740
another question is,
couldn't you just check

157
00:09:38.740 --> 00:09:43.528
to see if the top of
the normal stack is equal,

158
00:09:43.528 --> 00:09:47.700
to the top of the min stack when you pop?

159
00:09:51.190 --> 00:09:53.765
&gt;&gt; Bianca: So I think what they're saying

160
00:09:53.765 --> 00:09:58.718
is, if the one that you're
popping off is the minimum one,

161
00:09:58.718 --> 00:10:03.682
the one that you're popping off
is the same as the minimum.

162
00:10:03.682 --> 00:10:06.276
So that would somehow create a shortcut,

163
00:10:06.276 --> 00:10:11.017
like it does make it a little bit simpler
to understand doing it that way, but

164
00:10:11.017 --> 00:10:15.780
when you need to find the next smallest
one, you have to go and search for it.

165
00:10:15.780 --> 00:10:17.720
So you need to keep track of it for
every state.

166
00:10:17.720 --> 00:10:19.154
&gt;&gt; Male: In addition to that,

167
00:10:19.154 --> 00:10:24.652
if you had a duplicate number that was the
minimum, you would've popped it off and

168
00:10:24.652 --> 00:10:27.760
you wouldn't know.
&gt;&gt; Bianca: Yeah, absolutely.

169
00:10:27.760 --> 00:10:29.348
For though we need to
handle duplicates as well.

170
00:10:29.348 --> 00:10:30.675
Cool.

171
00:10:30.675 --> 00:10:34.830
All right.

172
00:10:34.830 --> 00:10:36.180
So that is a MinStack.

173
00:10:37.810 --> 00:10:41.180
Great.
Should we do something with a queue now?

174
00:10:41.180 --> 00:10:42.140
&gt;&gt; Male: Have we seen the pop?

175
00:10:42.140 --> 00:10:43.570
I'm sorry.

176
00:10:43.570 --> 00:10:47.090
Or is that on the git hub or.
&gt;&gt; Bianca: Yeah.

177
00:10:47.090 --> 00:10:50.120
All those solutions are in
the solution branch.

178
00:10:51.650 --> 00:10:55.450
Yeah, so
you can look at what pop looks like.

179
00:10:55.450 --> 00:11:00.802
The main difference,
is you just pop off the Min.

180
00:11:00.802 --> 00:11:05.712
That's it.
&gt;&gt; Bianca: Great.

181
00:11:07.794 --> 00:11:09.642
&gt;&gt; Bianca: All right.

182
00:11:09.642 --> 00:11:10.537
I forgot to draw a picture.

183
00:11:10.537 --> 00:11:12.210
Well.

184
00:11:12.210 --> 00:11:14.490
Did you guys get it without the picture?

185
00:11:14.490 --> 00:11:16.876
Okay.
&gt;&gt; Bianca: All right.

186
00:11:16.876 --> 00:11:17.430
&gt;&gt; Female: Since so

187
00:11:17.430 --> 00:11:20.020
many people actually use a lot.

188
00:11:20.020 --> 00:11:24.338
Like I could see you doing MinStack and
a Mc Stack and a mean stack or whatever.

189
00:11:24.338 --> 00:11:25.038
&gt;&gt; Bianca: Yeah,

190
00:11:25.038 --> 00:11:27.970
yeah.
&gt;&gt; Female: Is it like a thing you

191
00:11:27.970 --> 00:11:28.520
actually use?

192
00:11:28.520 --> 00:11:31.540
[CROSSTALK]
&gt;&gt; Bianca: It's a useful thing, for sure.

193
00:11:31.540 --> 00:11:33.420
I've never used it, in real life or

194
00:11:33.420 --> 00:11:39.050
anything like that, but
it is useful if you have a lot of data.

195
00:11:39.050 --> 00:11:44.240
It's really important, it would be really
important to have something like this, so

196
00:11:44.240 --> 00:11:45.746
you don't have to search again?
&gt;&gt; Male: Yeah.

197
00:11:45.746 --> 00:11:49.569
And just as said generally something which
is useful when they're doing the min max

198
00:11:49.569 --> 00:11:52.260
is not the actual value, but
it's position in the stack.

199
00:11:52.260 --> 00:11:55.680
&gt;&gt; Bianca: What do you mean by that?

200
00:11:55.680 --> 00:11:58.480
&gt;&gt; Male: So you're not

201
00:11:58.480 --> 00:12:00.870
knowing exactly where that minimum is but

202
00:12:00.870 --> 00:12:04.340
you've got a certain number of
layers to get to it possibly.

203
00:12:04.340 --> 00:12:07.081
So it says how much.

204
00:12:07.081 --> 00:12:09.840
How far am I from the minimum?
&gt;&gt; Bianca: mmmm, its so

205
00:12:09.840 --> 00:12:14.240
you would calculate that by the size of

206
00:12:14.240 --> 00:12:17.040
the stack before it changes value.
&gt;&gt; Male: right well you would use it

207
00:12:17.040 --> 00:12:20.690
the same way, it's just your positioning
instead of the actual value.

208
00:12:20.690 --> 00:12:22.114
&gt;&gt; Bianca: hm,

209
00:12:22.114 --> 00:12:25.844
mm ok ok
&gt;&gt; Male: better compared to like ascending

210
00:12:25.844 --> 00:12:26.664
or descending and

211
00:12:26.664 --> 00:12:30.300
then picking the value from the
&gt;&gt; Bianca: Like sorting it

212
00:12:30.300 --> 00:12:33.333
&gt;&gt; Male: Yeah, sorting it and picking the

213
00:12:33.333 --> 00:12:34.980
&gt;&gt; Bianca: It's much faster.

214
00:12:34.980 --> 00:12:37.780
But it takes more space.
So there's a trade off.

215
00:12:37.780 --> 00:12:40.660
Like you have to store two stacks.

216
00:12:41.760 --> 00:12:44.310
But in terms of speed, it's faster.

217
00:12:44.310 --> 00:12:47.490
It depends on what your
constraints are right?

218
00:12:47.490 --> 00:12:49.140
If you have a ton of space.

219
00:12:50.340 --> 00:12:52.340
But you need to do something quick.

220
00:12:52.340 --> 00:12:55.040
It might be useful yeah.

221
00:12:57.430 --> 00:12:57.930
Cool.

222
00:12:58.930 --> 00:13:01.974
If you have a stack and you don't care
about the minimum or maximum number,

223
00:13:01.974 --> 00:13:03.293
probably very useless as well.

224
00:13:03.293 --> 00:13:04.332
Yeah.

225
00:13:04.332 --> 00:13:05.852
Cool.
Yep question?

226
00:13:05.852 --> 00:13:08.903
&gt;&gt; Male: Victoria's question.

227
00:13:10.180 --> 00:13:15.630
Would there be a difference in storing
a single stack that has value, x min x,

228
00:13:15.630 --> 00:13:23.390
instead of two separate stacks?
&gt;&gt; Male: So,

229
00:13:23.390 --> 00:13:27.080
essentially, your stack frame
is an object with two values.

230
00:13:27.080 --> 00:13:28.071
&gt;&gt; Bianca: Yeah you could do that,

231
00:13:28.071 --> 00:13:30.460
you just don't normally wanna
edit your data like that.

232
00:13:30.460 --> 00:13:35.300
If you are having some metadata
about your data you usually don't

233
00:13:35.300 --> 00:13:37.680
wanna mutate your actual data.

234
00:13:38.990 --> 00:13:45.620
So, you could, it might be a bad idea,
but yeah you could totally do that.

