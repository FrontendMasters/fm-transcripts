WEBVTT

1
00:00:00.210 --> 00:00:02.890
&gt;&gt; Bianca Gandolfo: All right, we're gonna
start with our first elementary data

2
00:00:02.890 --> 00:00:06.460
structures, stacks and queues.

3
00:00:06.460 --> 00:00:09.190
So stacks and queues are used everywhere.

4
00:00:09.190 --> 00:00:12.290
You use them all the time,
you might not even know.

5
00:00:12.290 --> 00:00:17.713
Under the hood, you use stacks and

6
00:00:17.713 --> 00:00:21.670
queues all the time.

7
00:00:21.670 --> 00:00:22.440
Someone has a question.

8
00:00:23.850 --> 00:00:26.600
So the question is, in

9
00:00:28.780 --> 00:00:33.240
what cases would you not basically

10
00:00:33.240 --> 00:00:38.110
dynamically set those properties by
passing in an argument to the instance?

11
00:00:38.110 --> 00:00:41.610
So that's whenever you have some constant,
right?

12
00:00:41.610 --> 00:00:44.990
Some constant that is gonna be
matched through all of the classes.

13
00:00:44.990 --> 00:00:48.890
So if you have a certain type of building,
maybe you have

14
00:00:48.890 --> 00:00:54.090
a yurt and yurts only have one floor.

15
00:00:54.090 --> 00:00:59.330
And so, you could have a constant,
this.floors=1, yeah?

16
00:00:59.330 --> 00:01:01.610
And so whenever you don't want to,

17
00:01:01.610 --> 00:01:07.390
if you don't need to dynamically set,
then you don't need to do that.

18
00:01:07.390 --> 00:01:11.820
And you shouldn't be adding extra part
to the interface to make it complicated

19
00:01:11.820 --> 00:01:13.730
if it's not necessary.

20
00:01:13.730 --> 00:01:15.630
Stacks and queues, stacks and queues.

21
00:01:15.630 --> 00:01:17.190
Let's get started.

22
00:01:17.190 --> 00:01:19.139
So some ingredients to
learn a data structure.

23
00:01:20.480 --> 00:01:22.680
You wanna learn the concept
of this theory.

24
00:01:22.680 --> 00:01:23.958
How do you do that?

25
00:01:23.958 --> 00:01:26.800
You'd write, right?

26
00:01:26.800 --> 00:01:28.630
We draw a little figure.

27
00:01:28.630 --> 00:01:31.810
When you think of a data structure,
you probably think of a circle,

28
00:01:31.810 --> 00:01:36.280
some lines connecting, and
usually a number or boxes.

29
00:01:36.280 --> 00:01:41.780
So we draw out the diagram, we create
the API or the operations methods.

30
00:01:41.780 --> 00:01:44.290
The APIs is just the interface, right?

31
00:01:44.290 --> 00:01:48.190
Your methods,
just like we were putting in a .prototype.

32
00:01:48.190 --> 00:01:51.280
How are we gonna interface with our data,
right?

33
00:01:51.280 --> 00:01:56.010
Are we going to be able to add things,
are we gonna be able to delete things.

34
00:01:56.010 --> 00:01:57.690
Sort things, etc.

35
00:01:57.690 --> 00:02:03.020
Those are gonna be all part of
the API that you're gonna define.

36
00:02:03.020 --> 00:02:06.660
Depending on usually depending on use
case but in this case we're gonna be

37
00:02:06.660 --> 00:02:09.220
first talking about generals and
then getting a little more specific.

38
00:02:12.900 --> 00:02:15.100
Cool, then we're gonna build it.

39
00:02:15.100 --> 00:02:18.326
This is the fun part, where you're
maybe gonna pseudocode it out,

40
00:02:18.326 --> 00:02:19.410
if you're into that.

41
00:02:19.410 --> 00:02:22.340
If you're totally not into that,
it's optional.

42
00:02:22.340 --> 00:02:23.720
I do recommend it.

43
00:02:23.720 --> 00:02:27.900
It does help kind of give you
a little bit of an outline for

44
00:02:27.900 --> 00:02:29.520
how you're gonna approach it.

45
00:02:29.520 --> 00:02:33.120
And for those of you, someone mentioned in
the chat that they feel like maybe it's

46
00:02:33.120 --> 00:02:36.420
hard to communicate their thought process,
because it's not quite linear.

47
00:02:36.420 --> 00:02:40.480
Pseudocoding can help you organize
things on paper in a non-linear way and

48
00:02:40.480 --> 00:02:42.730
then get it into a linear step-by-step.

49
00:02:42.730 --> 00:02:44.960
And this is gonna help you when you're
communicating with your interviewers,

50
00:02:44.960 --> 00:02:48.470
when you're communicating with your
teammates or your pair or even yourself.

51
00:02:48.470 --> 00:02:53.150
Getting your thought pattern to fall
into some order is gonna help you

52
00:02:53.150 --> 00:02:54.120
solve problems faster.

53
00:02:55.400 --> 00:02:57.210
So, pseudocode if you want.

54
00:02:57.210 --> 00:02:58.270
Code out the data structure.

55
00:02:58.270 --> 00:02:59.870
This is not the optional part.

56
00:02:59.870 --> 00:03:02.800
This is the part where you
say VAR blah blah blah equals

57
00:03:02.800 --> 00:03:03.954
function whatever whatever.

58
00:03:03.954 --> 00:03:09.400
You're gonna code it out, and
you're gonna code the methods

59
00:03:09.400 --> 00:03:13.040
that go on to it, the parts that
are sorting it, the parts that are adding,

60
00:03:13.040 --> 00:03:16.050
the parts that are taking off,
all of that.

61
00:03:16.050 --> 00:03:18.330
Then you're gonna use it,
you're gonna test it out.

62
00:03:19.390 --> 00:03:22.180
Pair it with a more complex
algorithm if you want, and

63
00:03:22.180 --> 00:03:25.320
we'll talk about that in the coming days.

64
00:03:25.320 --> 00:03:29.410
And then, last but not least, we
are going to need to understand a little

65
00:03:29.410 --> 00:03:33.730
more deeply, our data structure and
the operations that go along with it.

66
00:03:33.730 --> 00:03:35.176
So what is the time complexity?

67
00:03:35.176 --> 00:03:38.770
We're gonna talk about that pretty soon,
we might be able to squeeze it in today,

68
00:03:38.770 --> 00:03:42.330
but if not first thing tomorrow we'll
learn how to calculate time complexity,

69
00:03:42.330 --> 00:03:44.540
which is, how fast is your algorithm?

70
00:03:44.540 --> 00:03:48.300
How many pieces of data can your algorithm
process on a modern computer before it

71
00:03:48.300 --> 00:03:52.950
just [SOUND], or takes years and
years and years and years to calculate.

72
00:03:52.950 --> 00:03:56.838
And how can you optimize it knowing
that your algorithm is slow,

73
00:03:56.838 --> 00:04:01.090
how can you make it faster so
that you can calculate more data, right?

74
00:04:01.090 --> 00:04:03.190
We have really fast computers these days,
but

75
00:04:03.190 --> 00:04:06.310
we also have a lot more
data than ever before.

76
00:04:06.310 --> 00:04:10.930
And so it's still important that we
are optimizing cuz there are many, many,

77
00:04:10.930 --> 00:04:15.760
many algorithms that modern computers
cannot complete because they're just too

78
00:04:15.760 --> 00:04:20.358
slow and there's two much data.
&gt;&gt; Bianca Gandolfo: Great, so

79
00:04:20.358 --> 00:04:22.180
these are our ingredients.

80
00:04:22.180 --> 00:04:26.290
So have the concept, we have the code,
we have the playing with it, and

81
00:04:26.290 --> 00:04:28.970
then we have the deeper knowledge.

82
00:04:28.970 --> 00:04:32.400
And so when you're thinking,
I think I knew what a hash table is.

83
00:04:32.400 --> 00:04:35.340
You've got this list, and make sure
that you're able to do all these things.

84
00:04:35.340 --> 00:04:38.220
If you can do all these things,
you're good.

85
00:04:38.220 --> 00:04:38.750
You have it.

86
00:04:40.870 --> 00:04:43.620
And I'll mention this again
in a couple days as well.

87
00:04:45.420 --> 00:04:48.640
All right, so we're gonna jump
in to the concept of stacks.

88
00:04:48.640 --> 00:04:52.530
So stacks,
they're an elementary data structure.

89
00:04:53.970 --> 00:04:59.150
They are last item in, first item out.

90
00:04:59.150 --> 00:04:59.990
What does that mean?

91
00:05:01.400 --> 00:05:06.730
So it's a list data structure of items,
we use push and pop.

92
00:05:06.730 --> 00:05:09.470
Sounds familiar, yeah, sounds familiar.

93
00:05:09.470 --> 00:05:11.530
Maybe we used this was arrays.

94
00:05:11.530 --> 00:05:16.180
So a stack is basically an array, except
the only thing that you can do on it,

95
00:05:16.180 --> 00:05:19.290
more or less, is to push and pop.

96
00:05:19.290 --> 00:05:24.090
Yeah, if there was no shift and un-shift
on an array, would just be a stack.

97
00:05:24.090 --> 00:05:26.920
And this is just a theoretical
concept of a stack and

98
00:05:26.920 --> 00:05:29.920
so, look at our little pancakes, so cute.

99
00:05:30.970 --> 00:05:35.470
So we have one little smiley pancake,
so we just pushed onto our stack.

100
00:05:35.470 --> 00:05:38.980
The zero there is our index number.

101
00:05:40.620 --> 00:05:45.010
One so we push, push, pop, pop.

102
00:05:45.010 --> 00:05:46.590
Push, push.

103
00:05:46.590 --> 00:05:51.740
Notice when we take one off
it has to be the top one.

104
00:05:51.740 --> 00:05:55.900
We can't take off smiley
pancake number zero.

105
00:05:55.900 --> 00:06:03.070
Right, until we take off one and
then we can pop them, yeah?

106
00:06:04.810 --> 00:06:11.178
This is a stack.
&gt;&gt; Bianca Gandolfo: Cool?

107
00:06:11.178 --> 00:06:12.713
Good to go?

108
00:06:12.713 --> 00:06:16.398
Great.

109
00:06:16.398 --> 00:06:23.030
So an example of a stack is our
call stack, and you know what?

110
00:06:23.030 --> 00:06:26.910
I need to do this, really quick.

111
00:06:29.430 --> 00:06:29.930
All right.

112
00:06:31.110 --> 00:06:34.740
So we're going to do just
a really really like high level,

113
00:06:34.740 --> 00:06:40.630
like how is our code executed, and
being pushed into the call sack.

114
00:06:40.630 --> 00:06:45.030
Again, this is gonna be sort of like,
kinda hand-wavy a little bit,

115
00:06:45.030 --> 00:06:47.860
but basically this is how it works.

116
00:06:47.860 --> 00:06:50.150
So we're going to use this function.

117
00:06:50.150 --> 00:06:53.820
It's a procedural function
that makes eggs of any style.

118
00:06:53.820 --> 00:06:54.960
So here's our procedure.

119
00:06:56.430 --> 00:06:57.650
It's a function.

120
00:06:57.650 --> 00:06:59.390
It takes the style of eggs.

121
00:06:59.390 --> 00:07:02.760
I like my eggs scrambled, and
I like them three at a time.

122
00:07:02.760 --> 00:07:05.290
Now we're just gonna walk
you through the code, and

123
00:07:05.290 --> 00:07:07.240
we're going to put it on the stack.

124
00:07:07.240 --> 00:07:11.520
And this is just an example of like,
a stack, a stack in the wild.

125
00:07:11.520 --> 00:07:19.090
You know, free and
how we use it when we're under the hood.

126
00:07:20.100 --> 00:07:25.300
Awesome, so first thing's first.

127
00:07:26.520 --> 00:07:33.309
Whenever we call a function we jump
into the body of the function.

128
00:07:33.309 --> 00:07:40.540
And somewhere in there it gets
pushed onto our call sack.

129
00:07:40.540 --> 00:07:43.640
So, we could say make eggs, yeah?

130
00:07:43.640 --> 00:07:48.365
And then once we jump inside, we're

131
00:07:48.365 --> 00:07:52.910
gonna say okay,

132
00:07:52.910 --> 00:07:56.800
we have this completed egg, great,
if the style is not boiled,

133
00:07:57.800 --> 00:08:01.440
style scrambled is not boiled,
we want to crack our eggs.

134
00:08:02.540 --> 00:08:05.960
So the next thing we need to
do is we need to crack eggs.

135
00:08:05.960 --> 00:08:09.380
So we're pushing the next
function on to our call stack.

136
00:08:10.600 --> 00:08:12.465
And let's just imagine for

137
00:08:12.465 --> 00:08:17.600
a moment that inside crack eggs we
have even more functions, right?

138
00:08:17.600 --> 00:08:20.490
We don't have that much scream real
state here so we'll have to use

139
00:08:20.490 --> 00:08:24.950
our imagination that we're calling cracked
eggs maybe in the first line is what?

140
00:08:24.950 --> 00:08:26.260
Maybe you need to get a bowl.

141
00:08:26.260 --> 00:08:26.760
I don't know.

142
00:08:28.080 --> 00:08:29.410
You need to get a bowl.

143
00:08:29.410 --> 00:08:31.982
And then in order to get
a bowl inside of that,

144
00:08:31.982 --> 00:08:35.230
maybe the first thing you need
to do is open the cabinet.

145
00:08:35.230 --> 00:08:40.340
So as we are executing our code,

146
00:08:40.340 --> 00:08:44.690
and we're getting into layers and
layers of functions inside functions,

147
00:08:44.690 --> 00:08:47.830
we're going to stack them in
what we call a call stack.

148
00:08:47.830 --> 00:08:52.940
A one little cube of that
is called a stack frame.

149
00:08:52.940 --> 00:08:55.240
And again,
this is kind of reductionist, but

150
00:08:55.240 --> 00:09:00.910
I just want to use it
to show you an example.

151
00:09:00.910 --> 00:09:05.360
Then once we finished opening
the cabinet we're gonna pop it off,

152
00:09:05.360 --> 00:09:08.714
once we finish executing getBowl,
it returns something, right?

153
00:09:08.714 --> 00:09:14.130
We're gonna pop it off and
then we're at crackEggs.

154
00:09:14.130 --> 00:09:15.530
Where are we?

155
00:09:15.530 --> 00:09:17.120
There we go, crackEggs.

156
00:09:18.880 --> 00:09:22.120
And then once that's done, we pop it off.

157
00:09:23.420 --> 00:09:26.500
And then once this is done, we pop it off.

158
00:09:26.500 --> 00:09:28.350
And so that is higher stack frame more or

159
00:09:28.350 --> 00:09:32.430
less works under the hood when
we're executing functions.

160
00:09:32.430 --> 00:09:34.130
Does that makes sense?

161
00:09:34.130 --> 00:09:36.680
So once you go layers deep, it's a way so

162
00:09:36.680 --> 00:09:41.320
that it can trace how to get back
to where it left off, more or less.

163
00:09:41.320 --> 00:09:43.470
Does that make sense?

164
00:09:43.470 --> 00:09:47.550
So this is gonna be useful when we talk
about recursion, because recursion is

165
00:09:47.550 --> 00:09:51.770
one of those abstract things where we're
calling functions inside of functions, and

166
00:09:51.770 --> 00:09:55.920
it's important that we're able to sort
of trace this line of thought through.

167
00:09:56.990 --> 00:09:58.400
Yep?
&gt;&gt; Speaker 2: A request,

168
00:09:58.400 --> 00:10:03.540
if you could explain how call
stack relates to the error

169
00:10:03.540 --> 00:10:07.133
call stack size exceeded.
&gt;&gt; Bianca Gandolfo: Yeah, so there's,

170
00:10:07.133 --> 00:10:09.356
you have limited memory in your browser,
and

171
00:10:09.356 --> 00:10:13.640
if you have an unlimited loop that loops,
loops, loops and keeps calling functions.

172
00:10:13.640 --> 00:10:18.395
People who are just getting started
with recursion, I always recommend new

173
00:10:18.395 --> 00:10:22.851
window if you're running this in
your browser, because you might have

174
00:10:22.851 --> 00:10:27.480
an infinite loop which means that as
we're filling in these call stacks.

175
00:10:27.480 --> 00:10:31.150
So my call stack is pretty short,
I only have seven spots.

176
00:10:31.150 --> 00:10:35.710
So once I have all of these spots full,
it's exceeded and

177
00:10:35.710 --> 00:10:40.270
it's just you run out of memory and
it just explodes.

178
00:10:40.270 --> 00:10:41.580
And that's your call stack exceeding.

179
00:10:43.420 --> 00:10:44.180
Cool.

180
00:10:44.180 --> 00:10:45.186
Or a stack overflow.

181
00:10:45.186 --> 00:10:50.510
Our favorite programming website.

182
00:10:50.510 --> 00:10:51.590
All right.

183
00:10:51.590 --> 00:10:52.650
Any questions here?

184
00:10:52.650 --> 00:10:53.760
So this our stack.

185
00:10:54.960 --> 00:10:57.280
So we have them under the hood.

186
00:10:57.280 --> 00:10:58.870
We also can create them.

187
00:10:58.870 --> 00:11:01.544
We can use them like arrays.

188
00:11:01.544 --> 00:11:04.570
We're gonna implement them
not as an array because

189
00:11:04.570 --> 00:11:07.320
we like to do things a little
more interesting here.

190
00:11:07.320 --> 00:11:09.079
You have a question?
&gt;&gt; Speaker 2: Another question,

191
00:11:09.079 --> 00:11:12.550
what exactly is a stack frame?
&gt;&gt; Bianca Gandolfo: So a stack frame is

192
00:11:12.550 --> 00:11:17.670
basically, it's just like
the instance of the function

193
00:11:18.980 --> 00:11:23.990
inside of, it's like in the stack, so

194
00:11:23.990 --> 00:11:28.330
if you think of the stack as an array,
you have indices 0 through and n, right?

195
00:11:29.650 --> 00:11:35.270
So stack frame would be one index in the,
or one item in your array.

196
00:11:36.370 --> 00:11:37.460
So you can think about it like that.

197
00:11:38.990 --> 00:11:43.290
So say you have an array that's
defined and you only have 0 to 7,

198
00:11:43.290 --> 00:11:46.640
so you have 8 spaces.

199
00:11:46.640 --> 00:11:50.960
Once you get to index eight, or nine,

200
00:11:50.960 --> 00:11:56.060
ten, whatever,
there's no more space, yeah?

201
00:11:56.060 --> 00:11:57.570
So, that's sort of the idea here.

202
00:11:59.420 --> 00:12:02.180
All right, great.

203
00:12:02.180 --> 00:12:06.330
Any more questions?
&gt;&gt; Speaker 2: One follow up

204
00:12:06.330 --> 00:12:09.010
to that.
&gt;&gt; Bianca Gandolfo: Are there multiple

205
00:12:09.010 --> 00:12:10.990
stack frames going on at once?

206
00:12:10.990 --> 00:12:12.780
The short answer is no.

207
00:12:12.780 --> 00:12:17.697
The long answer is maybe.

208
00:12:17.697 --> 00:12:23.560
[LAUGH] So
JavaScript is a single threaded language.

209
00:12:23.560 --> 00:12:27.040
The idea is you can only
execute one line at a time.

210
00:12:27.040 --> 00:12:30.320
But that's not always true cuz it gets,
like there's a little asterisk there.

211
00:12:30.320 --> 00:12:32.590
Like the language,
yes is singly threaded, but

212
00:12:32.590 --> 00:12:37.560
it really depends on the environment if
you're using like the DOM-API for example.

213
00:12:37.560 --> 00:12:38.350
There's web workers.

214
00:12:38.350 --> 00:12:43.480
There's a bunch of different ways
to make it not singly threaded.

215
00:12:43.480 --> 00:12:48.230
So that is why the short answer is no,
but the long answer is hm, maybe.

216
00:12:48.230 --> 00:12:48.770
Does that makes sense?

217
00:12:49.840 --> 00:12:50.410
Good question.

