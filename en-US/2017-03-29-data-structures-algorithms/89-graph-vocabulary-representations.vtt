WEBVTT

1
00:00:00.190 --> 00:00:01.940
&gt;&gt; Bianca Gandolfo: We
are going to hop into graphs.

2
00:00:01.940 --> 00:00:03.960
So we looked at linked lists,
we looked at trees,

3
00:00:03.960 --> 00:00:06.290
which were all a specialized
type of graph.

4
00:00:06.290 --> 00:00:12.050
So a graph is simply a collection
of vertices connected by edges.

5
00:00:12.050 --> 00:00:15.990
It is a data structure that

6
00:00:15.990 --> 00:00:20.870
is really good at representing
relationships between different nodes.

7
00:00:20.870 --> 00:00:23.690
And not necessarily
a hierarchical relationship, but

8
00:00:23.690 --> 00:00:24.740
any kind of relationship.

9
00:00:24.740 --> 00:00:28.920
And graphs are one of the most
widely used data structures when

10
00:00:30.040 --> 00:00:35.870
we're trying to study real world
things like, I don't know.

11
00:00:35.870 --> 00:00:37.770
Like a map, for example,
all the cities and

12
00:00:37.770 --> 00:00:43.260
the streets would be considered a graph,
the Internet, right?

13
00:00:43.260 --> 00:00:49.900
Different servers connected
would be an example.

14
00:00:49.900 --> 00:00:54.420
Websites connected with
links as the edges.

15
00:00:54.420 --> 00:00:55.123
What else?

16
00:00:55.123 --> 00:01:00.122
We can also represent mazes as points and

17
00:01:00.122 --> 00:01:04.835
edges, like Pac-Man is an example.

18
00:01:04.835 --> 00:01:06.495
We'll do some traversals,

19
00:01:06.495 --> 00:01:10.930
which will be the same as maze traversals
if you wanted to make a maze solver.

20
00:01:12.070 --> 00:01:14.200
What else can we do with graphs?

21
00:01:14.200 --> 00:01:20.470
Hm, so those are kind of obvious ones.

22
00:01:20.470 --> 00:01:27.180
And then there's a bunch of
mathematical applications as well for

23
00:01:27.180 --> 00:01:31.400
calculating different stuff in statistics.
&gt;&gt; Bianca Gandolfo: When

24
00:01:35.180 --> 00:01:36.130
else can we do a graph?

25
00:01:36.130 --> 00:01:39.032
Does anyone else have
an example of a graph?

26
00:01:40.980 --> 00:01:42.620
&gt;&gt; Bianca Gandolfo: So we can replicate

27
00:01:42.620 --> 00:01:47.847
natural phenomena and
see if water can flow through cracks,

28
00:01:47.847 --> 00:01:52.880
depending on the density of the rock and
things like that.

29
00:01:52.880 --> 00:01:56.842
So we can do all kinds of really
cool modeling with graphs.

30
00:01:56.842 --> 00:01:57.889
Trying to think of what else.

31
00:01:59.100 --> 00:02:01.881
Like data compression is another use of

32
00:02:01.881 --> 00:02:07.830
a graph.
&gt;&gt; Bianca Gandolfo: So

33
00:02:07.830 --> 00:02:10.960
that's really cool stuff.

34
00:02:10.960 --> 00:02:15.574
But we have to start with
one thing at a time, right?

35
00:02:15.574 --> 00:02:19.247
We have our vertices, or nodes,
we can call them nodes, but

36
00:02:19.247 --> 00:02:22.790
we technically call them vertices,
connected by edges.

37
00:02:25.530 --> 00:02:26.050
Cool.

38
00:02:26.050 --> 00:02:27.300
We have relationships.

39
00:02:30.140 --> 00:02:32.090
So we have some new vocabulary words.

40
00:02:33.350 --> 00:02:36.860
So again, edges, they represent
a connection between two vertices.

41
00:02:36.860 --> 00:02:39.080
They can be directed or undirected.

42
00:02:39.080 --> 00:02:43.270
A directed graph means that
you can only travel from

43
00:02:43.270 --> 00:02:44.790
one node in a certain direction.

44
00:02:44.790 --> 00:02:46.060
So this is a directed graph,

45
00:02:46.060 --> 00:02:49.390
where you could only travel
from this node to this node.

46
00:02:49.390 --> 00:02:51.110
We can't go backwards.

47
00:02:51.110 --> 00:02:55.484
And so use cases for
a directed graph would be a street.

48
00:02:55.484 --> 00:02:57.580
So any sort of navigation.

49
00:02:57.580 --> 00:03:01.980
Google Maps, for example, would be
a really, really complex directed graph,

50
00:03:01.980 --> 00:03:04.620
because there's one way streets and
things like that.

51
00:03:04.620 --> 00:03:07.660
And you can only get to
places in a certain order.

52
00:03:07.660 --> 00:03:09.460
So that would be a directed graph.

53
00:03:09.460 --> 00:03:18.795
An undirected graph would be,
&gt;&gt; Bianca Gandolfo: I don't know,

54
00:03:18.795 --> 00:03:20.360
I'm thinking.

55
00:03:20.360 --> 00:03:21.260
One that doesn't order.

56
00:03:21.260 --> 00:03:24.230
Direction is not a piece data
that's important to you.

57
00:03:25.360 --> 00:03:27.850
So the vertices,
those are gonna be your nodes.

58
00:03:27.850 --> 00:03:28.840
They're gonna contain data.

59
00:03:30.300 --> 00:03:33.600
A path is just a sequence
of connected vertices.

60
00:03:33.600 --> 00:03:38.960
So back to the example of
the website with the links.

61
00:03:38.960 --> 00:03:42.990
You can see if there's a way to get
from one website to another website by

62
00:03:42.990 --> 00:03:45.270
following embedded links.

63
00:03:45.270 --> 00:03:52.006
Web crawlers do that,
your search engine does that kinda stuff.

64
00:03:53.640 --> 00:03:56.365
Simple path, no repeated vertices.

65
00:03:56.365 --> 00:04:01.670
A cycle is a path that's cyclical.

66
00:04:01.670 --> 00:04:03.400
So this would be a cycle.

67
00:04:03.400 --> 00:04:08.120
That's one of the main things that sets
a tree apart from a graph by just a very,

68
00:04:08.120 --> 00:04:12.370
the definition of it is that a tree
is a graph that has no cycles.

69
00:04:12.370 --> 00:04:15.490
So you'll never see a cycle in a tree.

70
00:04:15.490 --> 00:04:17.720
Suddenly, if your tree has a cycle,
you're doing it wrong and

71
00:04:17.720 --> 00:04:19.830
you suddenly made a graph, which is fine.

72
00:04:19.830 --> 00:04:21.080
Just maybe you're using the wrong data

73
00:04:21.080 --> 00:04:23.850
structure.
&gt;&gt; Bianca Gandolfo: And then,

74
00:04:23.850 --> 00:04:29.748
an acyclic graph has no cycles.
&gt;&gt; Bianca Gandolfo: Cool,

75
00:04:29.748 --> 00:04:32.770
mm-hm?
&gt;&gt; Speaker 2: So for the undirected graph,

76
00:04:32.770 --> 00:04:36.700
do you need a reference going
from one node to the other and

77
00:04:36.700 --> 00:04:40.680
another reference coming from the other
node to this one, so you need to have two?

78
00:04:40.680 --> 00:04:41.810
&gt;&gt; Bianca Gandolfo: Mm-hm, you need to

79
00:04:41.810 --> 00:04:48.420
have a way to represent, either going
one way or the other way, yeah.

80
00:04:48.420 --> 00:04:51.584
Or and, it's an and, not an or.

81
00:04:51.584 --> 00:04:56.490
Cool.
&gt;&gt; Bianca Gandolfo: Yeah, so, Facebook,

82
00:04:56.490 --> 00:05:00.821
Twitter, any sort of social network,
that would be an undirected graph,

83
00:05:00.821 --> 00:05:05.151
actually, where you can go from one
friend to the other friend, back, and

84
00:05:05.151 --> 00:05:07.722
in any which order's an undirected graph.

85
00:05:07.722 --> 00:05:12.220
So social networks, a very,
very famous example of graph is Facebook.

86
00:05:12.220 --> 00:05:14.480
And we hear about, Facebook graph search.

87
00:05:14.480 --> 00:05:19.090
And it's just really advanced algorithms
around processing large graphs of data,

88
00:05:20.210 --> 00:05:24.070
around relationships between people,
companies,

89
00:05:24.070 --> 00:05:27.860
interests, all kinds
if interesting things.

90
00:05:27.860 --> 00:05:29.290
It may be a little bit creepy, right?

91
00:05:29.290 --> 00:05:32.650
All the data they're able
to extract from that.

92
00:05:35.920 --> 00:05:37.850
&gt;&gt; Bianca Gandolfo: Okay, so

93
00:05:37.850 --> 00:05:40.560
here's some common operations
that we're gonna think about

94
00:05:40.560 --> 00:05:43.710
when we're thinking
about any kind of graph.

95
00:05:43.710 --> 00:05:45.280
We need to be able to add an edge,

96
00:05:45.280 --> 00:05:50.990
delete an edge, detect if there's
an edge between two nodes.

97
00:05:50.990 --> 00:05:55.780
Find its neighbors and see if
there's a path between two vertices.

98
00:05:58.110 --> 00:05:58.610
Cool.

99
00:05:59.760 --> 00:06:01.280
Creating a vertex as well.

100
00:06:01.280 --> 00:06:06.640
So you can have a graph that's unconnected
that's just one vertex in space.

101
00:06:06.640 --> 00:06:11.270
And it can live there forever and
then you can just connect them anytime.

102
00:06:11.270 --> 00:06:15.830
That make sense?
&gt;&gt; Bianca Gandolfo: All right,

103
00:06:15.830 --> 00:06:16.780
common operations.

104
00:06:18.050 --> 00:06:23.410
So the next thing I want to talk about
is how do we represent our graph.

105
00:06:23.410 --> 00:06:26.410
So when we've been talking about trees and
linked lists,

106
00:06:26.410 --> 00:06:29.510
we've only really talked about one
way to represent them more or less.

107
00:06:29.510 --> 00:06:32.420
And it's kind of these nested
data structures with pointers.

108
00:06:32.420 --> 00:06:37.730
But actually, when we represent graphs,
we do it in a more abstract way because

109
00:06:37.730 --> 00:06:42.370
we wanna optimize for certain
algorithms or operations on a graph.

110
00:06:44.170 --> 00:06:48.010
So I'll talk about two major ones,
and we're only gonna stick to one.

111
00:06:48.010 --> 00:06:53.089
But we'll do some exercises
thinking about how can we represent

112
00:06:53.089 --> 00:06:57.330
this graph not as a super
nested object necessarily.

113
00:06:57.330 --> 00:07:01.520
Like were doing with trees, that might be
where your next step in your mind was.

114
00:07:01.520 --> 00:07:06.527
Like, we have a linked list, its objects,
they have pointers to each other.

115
00:07:06.527 --> 00:07:07.619
We have a tree.

116
00:07:07.619 --> 00:07:10.479
It's an object within
an object within an object,

117
00:07:10.479 --> 00:07:14.900
continue with more pointers right?
&gt;&gt; Bianca Gandolfo: Graphs,

118
00:07:14.900 --> 00:07:18.530
you could represent it like that, but
we're gonna talk about how to optimize

119
00:07:18.530 --> 00:07:23.530
that representation for
specific use cases.

120
00:07:23.530 --> 00:07:24.748
That's what we're gonna do right now.

121
00:07:24.748 --> 00:07:29.722
Any questions?
&gt;&gt; Bianca Gandolfo: I really love graphs.

122
00:07:29.722 --> 00:07:33.340
So here's an adjacency matrix.

123
00:07:33.340 --> 00:07:37.800
So you can imagine this is like a 2D
array, an array within an array

124
00:07:37.800 --> 00:07:42.980
that is gonna represent just a binary
relationship between two nodes.

125
00:07:42.980 --> 00:07:47.040
And so this is what graphs
are really good at is representing

126
00:07:47.040 --> 00:07:48.790
any kinda binary relationship.

127
00:07:48.790 --> 00:07:53.990
And so if you can imagine what
that might mean, it's huge, right?

128
00:07:53.990 --> 00:08:00.260
So how we do that with this
adjacency matrix is simply

129
00:08:00.260 --> 00:08:05.990
put a 1, true, where there is an edge.

130
00:08:05.990 --> 00:08:09.520
So between 2 and 1, we have an edge.

131
00:08:09.520 --> 00:08:11.310
We represent it here as well.

132
00:08:12.520 --> 00:08:19.380
So we can just populate this based on,
&gt;&gt; Bianca Gandolfo: Where we have edges.

133
00:08:19.380 --> 00:08:24.940
So if we wanna add an edge,
we simply change the 0 to a 1.

134
00:08:24.940 --> 00:08:31.506
To delete an edge, change the 1 to a 0.

135
00:08:31.506 --> 00:08:35.745
Cool, and this is undirected, so
it does not have any opinions about which

136
00:08:35.745 --> 00:08:41.835
direction it can go.
&gt;&gt; Bianca Gandolfo: So

137
00:08:41.835 --> 00:08:47.993
what would have to change if we still
wanted to use this adjacency matrix but

138
00:08:47.993 --> 00:08:52.850
we wanted to represent a directed graph?
&gt;&gt; Speaker 2: It'll be a zero for

139
00:08:52.850 --> 00:08:54.988
the one that's not direct,

140
00:08:54.988 --> 00:08:58.076
it has the direction to.
&gt;&gt; Bianca Gandolfo: Yeah, yeah,

141
00:08:58.076 --> 00:09:02.903
so instead of having a two way street
here, we'd only put a one where it could

142
00:09:02.903 --> 00:09:08.780
actually travel.
&gt;&gt; Bianca Gandolfo: Or

143
00:09:08.780 --> 00:09:16.680
in this case, a negative one.
&gt;&gt; Bianca Gandolfo: Cool,

144
00:09:16.680 --> 00:09:20.470
so there's another kinda graph
that I didn't tell you about yet.

145
00:09:20.470 --> 00:09:23.500
It's called a weighted graph.

146
00:09:23.500 --> 00:09:28.050
And this gives us a little
more information about,

147
00:09:28.050 --> 00:09:34.070
we can call it the cost between two nodes.

148
00:09:34.070 --> 00:09:38.590
And this cost in our map example
could be the time to travel between

149
00:09:38.590 --> 00:09:40.070
two cities, right?

150
00:09:40.070 --> 00:09:42.800
Which can change if there's traffic or
whatever.

151
00:09:42.800 --> 00:09:48.380
It could be the size of pipes if
we're measuring water moving through,

152
00:09:48.380 --> 00:09:53.226
I don't know, the plumbing
system in the city or bandwidth.

153
00:09:53.226 --> 00:09:58.445
Or the distance between servers,
so that we can calculate

154
00:09:58.445 --> 00:10:03.990
how long it takes to travel
across the Internet, somewhere.

155
00:10:05.340 --> 00:10:10.890
What else could this represent, weighted?
&gt;&gt; Speaker 2: Use this for

156
00:10:10.890 --> 00:10:12.780
kinetic systems biology,

157
00:10:12.780 --> 00:10:15.610
you have different molecules, reactions.
&gt;&gt; Bianca Gandolfo: I

158
00:10:15.610 --> 00:10:17.070
don't know anything about biology.

159
00:10:18.170 --> 00:10:22.623
But if there's a cost to get from one
place to another, like maybe energy,

160
00:10:22.623 --> 00:10:25.910
calories.
&gt;&gt; Speaker 2: The reaction time.

161
00:10:25.910 --> 00:10:26.570
&gt;&gt; Bianca Gandolfo: Yeah, so

162
00:10:26.570 --> 00:10:30.858
those things could be represented
in a graph with a cost.

163
00:10:30.858 --> 00:10:33.477
Or a weight, we call it a weighted graph.

164
00:10:33.477 --> 00:10:36.982
And this is a directed weighted graph
means that it has both direction and

165
00:10:36.982 --> 00:10:40.296
weight.
&gt;&gt; Bianca Gandolfo: And

166
00:10:40.296 --> 00:10:44.564
you can see we represent
it very similarly.

167
00:10:44.564 --> 00:10:49.631
We usually use just the weight

168
00:10:49.631 --> 00:10:58.217
instead of the one.
&gt;&gt; Bianca Gandolfo: Cool?

169
00:10:58.217 --> 00:11:02.380
Okay, and so this is very different than
how we were representing our data before.

170
00:11:02.380 --> 00:11:07.450
It was kind of we have this idea,
we draw it and then it's kind of abstract.

171
00:11:07.450 --> 00:11:10.930
And now to me, it feels like
it's another layer abstraction.

172
00:11:10.930 --> 00:11:11.690
Do we feel that way?

173
00:11:12.720 --> 00:11:18.780
Yeah, I'm like dancing,
dancing to my graph.

174
00:11:18.780 --> 00:11:19.280
Cool.

