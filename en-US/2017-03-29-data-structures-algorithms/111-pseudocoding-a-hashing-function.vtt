WEBVTT

1
00:00:00.190 --> 00:00:02.430
&gt;&gt; Bianca Gandolfo: Now we're gonna
pseudocode a hashing function.

2
00:00:02.430 --> 00:00:04.770
We're gonna create our own
hashing function right now.

3
00:00:04.770 --> 00:00:07.020
So the first thing we need
to do is take an input,

4
00:00:07.020 --> 00:00:10.460
and the second thing we need
to do is create an output.

5
00:00:11.910 --> 00:00:16.439
And this is, you have all of the creative
freedom that you want to explore what it

6
00:00:16.439 --> 00:00:19.670
might look like to create
a hashing function.

7
00:00:19.670 --> 00:00:22.940
In real life, you're probably not gonna
have to create a hashing function,

8
00:00:22.940 --> 00:00:26.680
this is more of a exploratory exercise to
understand how a hashing function might

9
00:00:26.680 --> 00:00:28.100
work underneath.

10
00:00:28.100 --> 00:00:30.482
But people study this kind of thing and

11
00:00:30.482 --> 00:00:33.613
write their dissertations
on this kind of thing.

12
00:00:33.613 --> 00:00:36.930
And there's all kinds of
types of hashing functions.

13
00:00:36.930 --> 00:00:39.590
But let's try our own, sound good?

14
00:00:39.590 --> 00:00:44.330
So input, we have to have an output and

15
00:00:44.330 --> 00:00:49.263
we want it to,
&gt;&gt; Bianca Gandolfo: We want

16
00:00:49.263 --> 00:00:51.830
the input to always the same output.

17
00:00:53.630 --> 00:00:59.420
So if I put in ABCD and

18
00:00:59.420 --> 00:01:05.040
it returns three, if I put ABCD in again,
it needs to return three again.

19
00:01:05.040 --> 00:01:07.950
So it's not random,
it has to be able to map.

20
00:01:07.950 --> 00:01:11.861
This is the input, this is the output,
that's my dance for it.

21
00:01:14.132 --> 00:01:15.180
&gt;&gt; Bianca Gandolfo: We had a mission.

22
00:01:15.180 --> 00:01:18.912
We needed to write a function that

23
00:01:18.912 --> 00:01:21.881
takes an input-
&gt;&gt; Speaker 2: Can you pump up the font

24
00:01:21.881 --> 00:01:22.581
a little bit?

25
00:01:22.581 --> 00:01:31.418
&gt;&gt; Bianca Gandolfo: Yeah, and
always returns the same output,

26
00:01:36.387 --> 00:01:38.442
&gt;&gt; Bianca Gandolfo: Right?

27
00:01:38.442 --> 00:01:44.320
However, not the same as
the input [LAUGH], right?

28
00:01:44.320 --> 00:01:47.884
If we put in two, we don't want it to
return two because that would be useless,

29
00:01:47.884 --> 00:01:49.570
so it has to be something different.

30
00:01:54.828 --> 00:01:58.970
&gt;&gt; Bianca Gandolfo: Okay, okay,
so this is our hashing function.

31
00:01:58.970 --> 00:02:02.455
A hashing function is
gonna take some input,

32
00:02:02.455 --> 00:02:07.877
it's gonna do an operation on it and
return a value at the end, right?

33
00:02:07.877 --> 00:02:12.377
Whether that value is used
to encrypt your data so

34
00:02:12.377 --> 00:02:16.987
that people who are watching
your data go by can't

35
00:02:16.987 --> 00:02:21.283
intercept it and
understand it in plain text.

36
00:02:21.283 --> 00:02:26.476
You always wanna do that with passwords,
for example,

37
00:02:26.476 --> 00:02:31.226
or if we're using it to
return a value that's gonna

38
00:02:31.226 --> 00:02:35.770
map to a memory address
when we're saving data.

39
00:02:37.100 --> 00:02:39.209
So those are some different
reasons why we'd wanna do this.

40
00:02:41.989 --> 00:02:46.706
&gt;&gt; Bianca Gandolfo: So probably wanna
write a function that says myHash, and

41
00:02:46.706 --> 00:02:49.860
it's gonna take your input, right?

42
00:02:51.290 --> 00:03:00.000
We could put some constraints on it,
like must be a string, or whatever.

43
00:03:00.000 --> 00:03:03.828
You can put whatever constraints you
want on it as long as it's gonna return

44
00:03:03.828 --> 00:03:05.380
the same thing.

45
00:03:05.380 --> 00:03:11.340
So if we're gonna put in,
HELLO ARE WE THERE YET?,

46
00:03:11.340 --> 00:03:16.530
as an input and for
some reason it's gonna return

47
00:03:16.530 --> 00:03:22.100
us 764.32a or z, z, okay, z [LAUGH].

48
00:03:22.100 --> 00:03:27.869
And when you do it a second time, you want
it to return the same thing every time.

49
00:03:30.413 --> 00:03:34.790
&gt;&gt; Bianca Gandolfo: And
then THIS OTHER THING THAT I'M YELLING,

50
00:03:38.011 --> 00:03:40.894
&gt;&gt; Bianca Gandolfo: You want IT to init

51
00:03:40.894 --> 00:03:42.628
returns.

52
00:03:42.628 --> 00:03:47.706
43, you want it to, again, you wanna
be able to recreate that every time.

53
00:03:49.961 --> 00:03:53.201
&gt;&gt; Bianca Gandolfo: And
what these values mean to you could vary.

54
00:03:56.485 --> 00:04:00.463
&gt;&gt; Bianca Gandolfo: Right, depending in
what context you're using this hash in

55
00:04:00.463 --> 00:04:03.920
function, it's a very broad topic.

56
00:04:03.920 --> 00:04:07.357
Okay, so that was our mission.

57
00:04:09.635 --> 00:04:10.933
&gt;&gt; Bianca Gandolfo: So
how might we do this?

58
00:04:15.429 --> 00:04:20.050
&gt;&gt; Bianca Gandolfo: What did you do
when you were pseudocoding out a fake

59
00:04:20.050 --> 00:04:21.888
hashing function?

60
00:04:25.238 --> 00:04:31.231
&gt;&gt; Speaker 2: So
I got the ASCII value of each character

61
00:04:31.231 --> 00:04:32.640
&gt;&gt; Bianca Gandolfo: Cool.

62
00:04:32.640 --> 00:04:36.480
&gt;&gt; Speaker 2: And-
&gt;&gt; Bianca Gandolfo: And then what?

63
00:04:36.480 --> 00:04:39.040
&gt;&gt; Speaker 2: At first I was just
adding them all together, but

64
00:04:39.040 --> 00:04:42.290
then I felt like my output
wasn't impressively long enough.

65
00:04:42.290 --> 00:04:45.050
So then I started multiplying
them all together.

66
00:04:45.050 --> 00:04:46.185
&gt;&gt; Bianca Gandolfo: Cool, so-
&gt;&gt; Speaker 3: Yeah, so that's what I-

67
00:04:46.185 --> 00:04:47.096
&gt;&gt; Speaker 2: [LAUGH].

68
00:04:47.096 --> 00:04:51.489
&gt;&gt; Bianca Gandolfo: So
you got the ASCII value and added or

69
00:04:51.489 --> 00:04:55.747
multiplied them together, cool.

70
00:05:02.171 --> 00:05:03.790
&gt;&gt; Bianca Gandolfo: Awesome.

71
00:05:03.790 --> 00:05:08.240
&gt;&gt; Speaker 2: And then to make it weirder,
I returned the hex number.

72
00:05:09.360 --> 00:05:12.556
It returned it as hex instead of binary or
decimal one.

73
00:05:14.375 --> 00:05:15.230
&gt;&gt; Bianca Gandolfo: How did you do that?

74
00:05:15.230 --> 00:05:17.650
Is there just a method that does that?

75
00:05:17.650 --> 00:05:23.310
&gt;&gt; Speaker 2: Called two string and
pass 16 in the parameters.

76
00:05:23.310 --> 00:05:25.783
So it returns a base 16.

77
00:05:25.783 --> 00:05:27.057
&gt;&gt; Bianca Gandolfo: Cool,
that's fancy, I like that.

78
00:05:27.057 --> 00:05:29.577
And then returned the hex
instead of decimal.

79
00:05:31.706 --> 00:05:33.417
&gt;&gt; Bianca Gandolfo: Cool,
so that would do it.

80
00:05:33.417 --> 00:05:34.900
[LAUGH] I like that.

81
00:05:35.910 --> 00:05:39.930
I especially like the third step, cool.

82
00:05:39.930 --> 00:05:41.060
Anyone do anything different?

83
00:05:45.312 --> 00:05:46.260
&gt;&gt; Bianca Gandolfo: No?

84
00:05:46.260 --> 00:05:49.248
Cool, yeah,
these are all legitimate ways of doing it.

85
00:05:52.173 --> 00:05:53.130
&gt;&gt; Bianca Gandolfo: Cool.

86
00:05:55.771 --> 00:05:57.700
&gt;&gt; Bianca Gandolfo: Any questions?

87
00:05:57.700 --> 00:06:00.480
So this a hashing function, right?

88
00:06:00.480 --> 00:06:03.620
What actually happens in
the middle of a hashing function

89
00:06:04.640 --> 00:06:07.960
is like a very academic pursuit and

90
00:06:07.960 --> 00:06:11.960
I encourage you to research different
ways that hashing functions work.

91
00:06:13.560 --> 00:06:16.830
It's kinda cool, but
beyond the scope of today.

92
00:06:16.830 --> 00:06:20.997
We just need to understand that a hashing
function, you're gonna put in a value and

93
00:06:20.997 --> 00:06:23.330
it's gonna return the same
value every time.

94
00:06:23.330 --> 00:06:27.889
And so here is a diagram of
our hash table interface, and

95
00:06:27.889 --> 00:06:33.020
how we're gonna work with it for
our hash function.

96
00:06:33.020 --> 00:06:40.500
So we can see here, we are gonna
put in a key into a hash table.

97
00:06:41.680 --> 00:06:48.370
It's gonna pass through a hash function,
then it's gonna map to some location.

98
00:06:49.740 --> 00:06:54.420
So Lisa Smith, it's going to hash to one,

99
00:06:54.420 --> 00:07:00.930
then John Smith two, and
then Sarah Dee maybe 14, cool?

100
00:07:02.010 --> 00:07:06.920
And this might be like a memory address or
a memory bucket, if you will.

101
00:07:08.310 --> 00:07:12.341
And so this is just sort of like a high
level kinda visualization of how this

102
00:07:12.341 --> 00:07:13.062
might work.

103
00:07:15.492 --> 00:07:16.437
&gt;&gt; Bianca Gandolfo: That make sense?

104
00:07:18.228 --> 00:07:22.270
&gt;&gt; Bianca Gandolfo: Cool,
&gt;&gt; Bianca Gandolfo: What else do I wanna

105
00:07:22.270 --> 00:07:22.809
tell you?

106
00:07:28.143 --> 00:07:30.820
&gt;&gt; Bianca Gandolfo: Okay,
I think that's all I wanted to tell you.

107
00:07:30.820 --> 00:07:32.227
&gt;&gt; Speaker 2: One question.

108
00:07:32.227 --> 00:07:33.715
&gt;&gt; Bianca Gandolfo: Yeah, sure.

109
00:07:33.715 --> 00:07:34.900
In the picture?

110
00:07:34.900 --> 00:07:39.200
&gt;&gt; Speaker 2: Yeah, if for instance,
if we give some key value,

111
00:07:40.230 --> 00:07:44.500
that key value map to the same address,
how do we?

112
00:07:44.500 --> 00:07:48.575
&gt;&gt; Bianca Gandolfo: So you're only
gonna map the key, not the value.

113
00:07:48.575 --> 00:07:50.600
And you're saying,
what if it maps to the same address?

114
00:07:50.600 --> 00:07:52.006
&gt;&gt; Speaker 2: Same address, yeah.

115
00:07:52.006 --> 00:07:56.387
&gt;&gt; Bianca Gandolfo: Yeah,
collision, they call it a collision.

116
00:07:56.387 --> 00:07:59.190
I was gonna wait till later, but
I can start talking about it now.

117
00:07:59.190 --> 00:08:02.830
&gt;&gt; Speaker 2: But if it's a function,
you can't have a collision.

118
00:08:04.306 --> 00:08:08.295
&gt;&gt; Bianca Gandolfo: Well, so
the the hashing function is the thing

119
00:08:08.295 --> 00:08:12.520
that is gonna give you your hash value,
right?

120
00:08:12.520 --> 00:08:15.196
Let's say, for example,
our hash value's between 0 and 15.

121
00:08:16.330 --> 00:08:20.800
And eventually, if you can only
return something between 0 and 15,

122
00:08:20.800 --> 00:08:24.790
eventually, you are going to
get the same value, right?

123
00:08:26.040 --> 00:08:30.190
And then the question is,
what do you do when your hash function for

124
00:08:30.190 --> 00:08:34.310
two different keys is
returning the same number?

125
00:08:35.630 --> 00:08:38.190
Yeah, we call it a collision.

126
00:08:38.190 --> 00:08:40.705
And so when we have a collision,

127
00:08:40.705 --> 00:08:45.188
how we handle that is we put
both of them in the same place.

128
00:08:50.149 --> 00:08:52.195
&gt;&gt; Bianca Gandolfo: And
then the specifics of like okay,

129
00:08:52.195 --> 00:08:55.169
what do you mean you put both
of them in the same place?

130
00:08:55.169 --> 00:08:58.580
Varies based on the implementation,
and we'll explore one of them.

