WEBVTT

1
00:00:00.250 --> 00:00:02.123
&gt;&gt; Bianca Gandolfo: So
merge sort is a divide and

2
00:00:02.123 --> 00:00:04.896
conquer recursive sorting algorithm.

3
00:00:04.896 --> 00:00:08.344
So our divide and
conquer steps our recognize the base case,

4
00:00:08.344 --> 00:00:11.190
we're gonna have divide,
conquer and combine.

5
00:00:12.330 --> 00:00:16.190
So for merge sort our base case was

6
00:00:16.190 --> 00:00:21.090
when our array is a size of 1,
right, we're just gonna return up

7
00:00:21.090 --> 00:00:25.430
because that's gonna be the sorted
array of length 1, right?

8
00:00:25.430 --> 00:00:30.380
Our divide was every time we recurs
we were breaking our problem

9
00:00:31.900 --> 00:00:32.960
into a left and a right.

10
00:00:34.400 --> 00:00:38.220
And our conquer and
combine stops were the same.

11
00:00:38.220 --> 00:00:40.320
So when we were merging
we were conquering, and

12
00:00:40.320 --> 00:00:41.901
we're also combining in one step.

13
00:00:43.027 --> 00:00:44.044
&gt;&gt; Bianca Gandolfo: Cool?

14
00:00:45.604 --> 00:00:51.520
&gt;&gt; Bianca Gandolfo: So here's just a big
picture graphic of what all this means.

15
00:00:51.520 --> 00:00:56.235
So we have our unsorted list,
and we keep breaking it in half,

16
00:00:56.235 --> 00:01:00.407
breaking in half until we get
to our base case which is,

17
00:01:00.407 --> 00:01:06.506
every element is a sorted list of one,
and then we merge them together in order.

18
00:01:06.506 --> 00:01:13.646
So we swap, merge these, merge these and
then, again, we're gonna merge more,

19
00:01:13.646 --> 00:01:18.363
merge more until finally,
&gt;&gt; Bianca Gandolfo: We

20
00:01:18.363 --> 00:01:21.013
have it merged in order, yeah?

21
00:01:25.111 --> 00:01:28.779
&gt;&gt; Bianca Gandolfo: Cool, so
here is just some code for

22
00:01:28.779 --> 00:01:33.215
our merge routine, we have a while loop.

23
00:01:33.215 --> 00:01:36.256
So while our result is
less than the left and

24
00:01:36.256 --> 00:01:41.559
the right,
&gt;&gt; Bianca Gandolfo: Lengths,

25
00:01:41.559 --> 00:01:45.228
you're gonna keep looping.

26
00:01:45.228 --> 00:01:50.277
So our left and our right again are,
those are the two halves of

27
00:01:50.277 --> 00:01:55.932
the array in question that we're
gonna merge into our result array.

28
00:01:55.932 --> 00:02:01.397
So,
&gt;&gt; Bianca Gandolfo: You would go through,

29
00:02:01.397 --> 00:02:07.135
push the one, that's smaller, and
at the end you're gonna return it.

30
00:02:07.135 --> 00:02:10.328
So a couple of steps in there,
but that's the gist.

31
00:02:12.225 --> 00:02:12.725
&gt;&gt; Bianca Gandolfo: Cool?

32
00:02:14.385 --> 00:02:17.089
&gt;&gt; Bianca Gandolfo: This is probably the
toughest part of the merge sort algorithm

33
00:02:17.089 --> 00:02:18.082
is the merge routine.

34
00:02:20.068 --> 00:02:25.733
&gt;&gt; Bianca Gandolfo: Awesome,
so here is the entire thing,

35
00:02:25.733 --> 00:02:28.995
we have our base case,

36
00:02:28.995 --> 00:02:33.470
remember we have a list of one.

37
00:02:33.470 --> 00:02:36.270
So we're gonna divide it left,
divide it right,

38
00:02:36.270 --> 00:02:41.221
we're gonna recursively sort the left, and
we're gonna recursively sort the right.

39
00:02:41.221 --> 00:02:45.933
So what this does is we're gonna go left,
left, left, all the way to the bottom.

40
00:02:45.933 --> 00:02:50.059
Then right, right, right,
all the way when we get to the top, and

41
00:02:50.059 --> 00:02:51.626
then down the other way.

42
00:02:51.626 --> 00:02:55.274
And you're gonna return leftSorted and
rightSorted and

43
00:02:55.274 --> 00:02:57.559
this is where we're merging them.

44
00:02:59.340 --> 00:03:03.634
So at the bottom,
we're just merging one and

45
00:03:03.634 --> 00:03:08.606
one, and then as we recurse
up it will be two two etc.

46
00:03:08.606 --> 00:03:11.966
And that way, cool,
any questions about this?

47
00:03:18.032 --> 00:03:22.106
&gt;&gt; Bianca Gandolfo: Cool,
reflection, who here feels like,

48
00:03:22.106 --> 00:03:26.980
who here knew merge sort
before taking this class?

49
00:03:28.390 --> 00:03:29.250
Okay, just David.

50
00:03:30.870 --> 00:03:31.960
Anyone else?

51
00:03:31.960 --> 00:03:36.053
Who here feels like if they were asked
today in an interview they could

52
00:03:36.053 --> 00:03:37.472
implement merge sort?

53
00:03:37.472 --> 00:03:42.596
Maybe, maybe, okay.

54
00:03:42.596 --> 00:03:45.195
Where are the parts where you're like,
my God,

55
00:03:45.195 --> 00:03:47.140
maybe I won't be able to do that part?

56
00:03:48.910 --> 00:03:50.606
&gt;&gt; Speaker 2: Well, it kinda depends on,

57
00:03:50.606 --> 00:03:54.931
[LAUGH] like I could definitely
pseudo-code it, I get it conceptually.

58
00:03:54.931 --> 00:03:58.729
But like the other night I tried
to implement it just to make

59
00:03:58.729 --> 00:04:01.362
sure I still got it, and I ran into some,

60
00:04:01.362 --> 00:04:06.570
[LAUGH] just hiccups where it wasn't
working exactly how I wanted to do it.

61
00:04:06.570 --> 00:04:08.016
But I think that's just kind of a practice

62
00:04:08.016 --> 00:04:09.637
thing I need to run through
it a few more times.

63
00:04:09.637 --> 00:04:11.143
&gt;&gt; Bianca Gandolfo: Cool.

64
00:04:11.143 --> 00:04:14.364
&gt;&gt; Speaker 2: I think maybe the tricky
part of merging is figuring out the logic

65
00:04:14.364 --> 00:04:17.002
of what to do when you run
out of elements in one part.

66
00:04:20.899 --> 00:04:27.120
&gt;&gt; Bianca Gandolfo: When the left or
right is empty, is that what you mean?

67
00:04:27.120 --> 00:04:28.536
&gt;&gt; Speaker 2: Yeah, so you've.

68
00:04:30.539 --> 00:04:31.040
&gt;&gt; Bianca Gandolfo: Yeah, so

69
00:04:31.040 --> 00:04:34.110
like maybe the left array is
a bunch of smaller elements and

70
00:04:34.110 --> 00:04:38.220
then you have your right array,
which is a bunch of larger elements.

71
00:04:38.220 --> 00:04:41.201
As you are merging and looping through,

72
00:04:41.201 --> 00:04:46.565
suddenly your left array is empty and
you have items in your right array.

73
00:04:46.565 --> 00:04:48.135
What do you do in that case?

74
00:04:48.135 --> 00:04:50.526
And that was something that was tricky for
some people.

75
00:04:50.526 --> 00:04:53.091
&gt;&gt; Bianca Gandolfo: Cool, what else?

76
00:04:55.953 --> 00:04:57.563
&gt;&gt; Bianca Gandolfo: Anything?

77
00:04:59.755 --> 00:05:05.599
&gt;&gt; Bianca Gandolfo: Any questions,

78
00:05:05.599 --> 00:05:09.358
about it?

79
00:05:09.358 --> 00:05:13.823
&gt;&gt; Speaker 2: I never quite understood
how it works when you have an odd

80
00:05:13.823 --> 00:05:17.370
number in the array and you're slicing it.

81
00:05:17.370 --> 00:05:20.773
Does that just round somehow and-
&gt;&gt; Bianca Gandolfo: Yeah,

82
00:05:20.773 --> 00:05:21.356
you either-
&gt;&gt; Speaker 2: So

83
00:05:21.356 --> 00:05:23.771
you don't have any control
over what goes where?

84
00:05:23.771 --> 00:05:29.059
&gt;&gt; Bianca Gandolfo: I mean, you can
choose, right, you can round up or down.

85
00:05:29.059 --> 00:05:31.466
&gt;&gt; Speaker 2: And
in this example what are you doing?

86
00:05:31.466 --> 00:05:33.040
&gt;&gt; Bianca Gandolfo: Let's see.

87
00:05:33.040 --> 00:05:38.983
&gt;&gt; Bianca Gandolfo: So,
&gt;&gt; Bianca Gandolfo: Let's see,

88
00:05:38.983 --> 00:05:44.131
let's do array slice, let's make an array,

89
00:05:44.131 --> 00:05:47.173
and test out what happens.

90
00:05:47.173 --> 00:05:52.930
We want it to be an odd number, yeah?

91
00:05:52.930 --> 00:05:56.719
So we're saying array.slice and

92
00:05:56.719 --> 00:06:02.712
we're passing 0 and
an array.length over 2.

93
00:06:02.712 --> 00:06:06.431
&gt;&gt; Bianca Gandolfo: So
this is gonna be our left.

94
00:06:09.689 --> 00:06:15.786
&gt;&gt; Bianca Gandolfo: And then our right,
&gt;&gt; Bianca Gandolfo: Is just gonna do this,

95
00:06:15.786 --> 00:06:18.710
cool, so let's check it out.

96
00:06:18.710 --> 00:06:22.882
So our left, and our right so
our right is gonna have the greater one.

97
00:06:25.941 --> 00:06:29.762
&gt;&gt; Speaker 2: So is that built into
slice that's doing the rounding?

98
00:06:29.762 --> 00:06:33.669
Cuz arr.length divided by two
would return a decimal, right?

99
00:06:33.669 --> 00:06:36.458
This one's just an integer
it drops the decimal in it?

100
00:06:37.821 --> 00:06:44.088
&gt;&gt; Speaker 2: Did the division will,
drop the decimal or the slice does?

101
00:06:44.088 --> 00:06:45.450
&gt;&gt; Speaker 3: Slice does.

102
00:06:45.450 --> 00:06:46.060
Does it?

103
00:06:46.060 --> 00:06:49.069
&gt;&gt; Speaker 2: Yeah, yeah cuz you're right.

104
00:06:49.069 --> 00:06:51.904
&gt;&gt; Speaker 3: Because JavaScript
doesn't have an integer type, right?

105
00:06:51.904 --> 00:06:54.677
So 5 divided by 2 would be 2.5.

106
00:06:54.677 --> 00:06:56.040
&gt;&gt; Speaker 2: It would return 2.5.

107
00:06:56.040 --> 00:06:59.150
&gt;&gt; Speaker 3: Yeah, but
sliced as just treated as two.

108
00:06:59.150 --> 00:07:00.390
&gt;&gt; Speaker 2: Cool, okay.

109
00:07:02.170 --> 00:07:04.880
Does Python do that?

110
00:07:04.880 --> 00:07:05.570
&gt;&gt; Speaker 3: It's complicated.

111
00:07:05.570 --> 00:07:06.651
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Bianca Gandolfo: [LAUGH]

112
00:07:06.651 --> 00:07:07.245
&gt;&gt; Speaker 2: Depends on whether

113
00:07:07.245 --> 00:07:08.437
you're using Python 2 or Python 3.

114
00:07:08.437 --> 00:07:09.350
&gt;&gt; Speaker 3: Sure, okay.

115
00:07:12.013 --> 00:07:14.315
&gt;&gt; Bianca Gandolfo: Cool, so that would
be the difference if it was three.

116
00:07:16.096 --> 00:07:17.217
&gt;&gt; Bianca Gandolfo: We
would be missing something.

117
00:07:19.405 --> 00:07:20.519
&gt;&gt; Bianca Gandolfo: Cool, good question.

118
00:07:24.502 --> 00:07:26.799
&gt;&gt; Bianca Gandolfo: Thank you.

119
00:07:32.650 --> 00:07:33.547
&gt;&gt; Bianca Gandolfo: Cool.

