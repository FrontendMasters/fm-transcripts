WEBVTT

1
00:00:00.220 --> 00:00:01.990
&gt;&gt; Bianca Gandolfo: So
we looked at the linked list, but

2
00:00:01.990 --> 00:00:03.881
we did not look at the tree yesterday.

3
00:00:03.881 --> 00:00:08.198
The interesting thing that I wanted to
point out about our tree versus our

4
00:00:08.198 --> 00:00:09.060
linked list.

5
00:00:09.060 --> 00:00:12.530
So a link list is a type of tree it's
a simple tree that has one child.

6
00:00:12.530 --> 00:00:16.140
And this is a general tree
called an N-ary tree, right,

7
00:00:16.140 --> 00:00:17.270
you've heard of a binary tree.

8
00:00:17.270 --> 00:00:20.923
That means there's two children N-ary
means there could be N number of children,

9
00:00:20.923 --> 00:00:21.713
so general tree.

10
00:00:21.713 --> 00:00:26.610
It's not the most useful tree because of
that, but it's a good intro into trees.

11
00:00:27.960 --> 00:00:33.308
So the difference between our linked list
and our tree is that, we call them nodes,

12
00:00:33.308 --> 00:00:41.093
but instead of,
&gt;&gt; Bianca Gandolfo: How do I say this.

13
00:00:41.093 --> 00:00:46.580
Instead of having its own constructor,
each node we consider it a tree.

14
00:00:48.170 --> 00:00:55.330
And so we just, as we add a node,
we're just adding trees.

15
00:00:55.330 --> 00:00:59.973
So each node is in itself a tree.
&gt;&gt; Bianca Gandolfo: Yeah,

16
00:00:59.973 --> 00:01:04.443
and as you save your instance of a tree,

17
00:01:04.443 --> 00:01:09.454
as you add a child this
instance is going to be

18
00:01:09.454 --> 00:01:14.948
your root node.
&gt;&gt; Bianca Gandolfo: That

19
00:01:14.948 --> 00:01:19.080
make sense?
&gt;&gt; Bianca Gandolfo: Cool.

20
00:01:23.972 --> 00:01:25.245
&gt;&gt; Bianca Gandolfo: Why is this different

21
00:01:25.245 --> 00:01:26.450
than a linked list?

22
00:01:26.450 --> 00:01:29.566
And why do you think linked list
we had a node constructor and

23
00:01:29.566 --> 00:01:35.517
then we had a linked list constructor?
&gt;&gt; Bianca Gandolfo: When

24
00:01:35.517 --> 00:01:39.956
this we don't?
&gt;&gt; Speaker 2: One child versus multiple

25
00:01:39.956 --> 00:01:41.706
children.
&gt;&gt; Bianca Gandolfo: Yeah, there's that.

26
00:01:41.706 --> 00:01:47.064
But couldn't we just
have a node that instead

27
00:01:47.064 --> 00:01:51.858
of saying, null, it's just an array?

28
00:01:51.858 --> 00:02:01.670
So the .Next can be an array.
&gt;&gt; Bianca Gandolfo: There

29
00:02:01.670 --> 00:02:05.554
is no reason it couldn't be.
&gt;&gt; Speaker 3: But then that array each

30
00:02:05.554 --> 00:02:11.610
element can have another next right?
&gt;&gt; Bianca Gandolfo: Yeah,

31
00:02:11.610 --> 00:02:14.800
I mean so you don't wanna make a linked
list like that but you could and

32
00:02:14.800 --> 00:02:18.966
it wouldn't break it.
&gt;&gt; Speaker 3: In that case the array

33
00:02:18.966 --> 00:02:22.948
itself would have a .Next property or
each element in the array would

34
00:02:22.948 --> 00:02:26.065
have .Next properties.
&gt;&gt; Bianca Gandolfo: I don't know,

35
00:02:26.065 --> 00:02:27.610
let me think.

36
00:02:27.610 --> 00:02:31.600
So if we had a linked list and
we had the .Next as an array,

37
00:02:31.600 --> 00:02:34.590
then yeah the array would
have it's own .Next.

38
00:02:34.590 --> 00:02:37.815
So it would be like array.next.
&gt;&gt; Speaker 3: Okay.

39
00:02:37.815 --> 00:02:38.873
&gt;&gt; Bianca Gandolfo: Yeah.

40
00:02:38.873 --> 00:02:41.070
&gt;&gt; Speaker 3: Not each element?

41
00:02:41.070 --> 00:02:42.182
&gt;&gt; Bianca Gandolfo: Not each element

42
00:02:42.182 --> 00:02:48.078
within the array.
&gt;&gt; Bianca Gandolfo: This is hypothetical,

43
00:02:48.078 --> 00:02:49.855
this is not a good implementation.

44
00:02:49.855 --> 00:02:57.009
[LAUGH]
&gt;&gt; Speaker 3: So the question is, why was

45
00:02:57.009 --> 00:03:00.629
our linked list constructor as well as a-
&gt;&gt; Bianca Gandolfo: Yeah,

46
00:03:00.629 --> 00:03:02.101
as well as a node constructor.

47
00:03:02.101 --> 00:03:06.726
The simple answer is, is for
a tree all we need is the value and

48
00:03:06.726 --> 00:03:09.870
the children for our linked list.

49
00:03:09.870 --> 00:03:17.160
We have pointers to both a head and
a tail within our data structure.

50
00:03:17.160 --> 00:03:20.700
And so because of that,
it makes sense to separate it, right?

51
00:03:20.700 --> 00:03:25.610
Cuz each node of a linked list doesn't
have a head and tail, however each tree

52
00:03:25.610 --> 00:03:30.518
has a value in an array of children.
&gt;&gt; Bianca Gandolfo: So you could do it,

53
00:03:30.518 --> 00:03:33.875
if you did implement it by making
each node part of the tree,

54
00:03:33.875 --> 00:03:36.697
you might realize that in
your tree constructor,

55
00:03:36.697 --> 00:03:41.797
it would just be kind of empty.
&gt;&gt; Bianca Gandolfo: Right,

56
00:03:41.797 --> 00:03:44.910
because what that would look like.

57
00:03:46.730 --> 00:03:52.054
&gt;&gt; Bianca Gandolfo: Right we have function

58
00:03:52.054 --> 00:03:56.540
Node, the value.

59
00:04:10.923 --> 00:04:14.688
&gt;&gt; Speaker 3: I'm thinking maybe the
reason we want to separate the node from

60
00:04:14.688 --> 00:04:19.920
the linked list is that in a linked list
we wanna keep track of where the tail is.

61
00:04:19.920 --> 00:04:24.906
And in a tree there are many leaves, so
it's not practical to keep track of all

62
00:04:24.906 --> 00:04:28.370
the leaves.
&gt;&gt; Bianca Gandolfo: Yep, yeah, absolutely.

63
00:04:28.370 --> 00:04:31.841
So it all has to do with
this extra this.head.

64
00:04:33.868 --> 00:04:35.386
&gt;&gt; Bianca Gandolfo: this.tail,

65
00:04:35.386 --> 00:04:40.192
right this extra metadata
that we want just on

66
00:04:40.192 --> 00:04:45.890
the parent's data structure,
right not each node.

67
00:04:45.890 --> 00:04:50.312
So for this case, for this particular
tree we don't need metadata,

68
00:04:50.312 --> 00:04:57.536
all we need is the value and the children.
&gt;&gt; Bianca Gandolfo: So,

69
00:04:57.536 --> 00:05:03.392
we don't need to have an external
node creator cuz each node is a tree,

70
00:05:03.392 --> 00:05:10.241
there's no metadata needed.
&gt;&gt; Bianca Gandolfo: Can I

71
00:05:10.241 --> 00:05:15.024
have one question about that?
&gt;&gt; Bianca Gandolfo: You can

72
00:05:15.024 --> 00:05:18.540
just humor me with a question,
if you already know the answer.

73
00:05:23.001 --> 00:05:24.063
&gt;&gt; Speaker 3: Is there a limit on the

74
00:05:24.063 --> 00:05:26.910
number of children that a tree can have?
&gt;&gt; Bianca Gandolfo: Not

75
00:05:26.910 --> 00:05:31.391
this one.
&gt;&gt; Speaker 3: Do you need to

76
00:05:31.391 --> 00:05:36.345
keep track of the very first root?
&gt;&gt; Bianca Gandolfo: Yeah,

77
00:05:36.345 --> 00:05:41.220
so the root is just gonna be here,
it's just gonna be this.

78
00:05:41.220 --> 00:05:47.173
The instance is your root.
&gt;&gt; Speaker 3: From

79
00:05:47.173 --> 00:05:51.285
looking at just a tree object,

80
00:05:51.285 --> 00:05:57.260
is there a way to tell if it's the root?
&gt;&gt; Bianca Gandolfo: So,

81
00:05:57.260 --> 00:05:59.580
it's the root if it
doesn't have any parents.

82
00:06:00.800 --> 00:06:04.370
And if your tree doesn't have
a reference to its parent,

83
00:06:04.370 --> 00:06:09.050
which usually it doesn't, it's hard to
know if it's explicitly the root, so

84
00:06:09.050 --> 00:06:17.082
yeah.
&gt;&gt; Bianca Gandolfo: Cool.

85
00:06:19.230 --> 00:06:20.618
&gt;&gt; Bianca Gandolfo: So to add a child,

86
00:06:20.618 --> 00:06:24.049
where we're gonna put it on the prototype.

87
00:06:25.060 --> 00:06:30.388
We're gonna instantiate a new tree, and
we're gonna push it to the children array,

88
00:06:30.388 --> 00:06:35.605
and then maybe we'll return it.
&gt;&gt; Bianca Gandolfo: Cool,

89
00:06:35.605 --> 00:06:36.910
anyone do it differently?

90
00:06:47.765 --> 00:06:48.363
&gt;&gt; Bianca Gandolfo: No, everyone do this

91
00:06:48.363 --> 00:06:52.209
exactly like this?
&gt;&gt; Speaker 3: I indented that with

92
00:06:52.209 --> 00:06:54.380
four spaces instead of two,
that's the only difference.

93
00:06:54.380 --> 00:06:58.461
[LAUGH] It's a hard different so well,

94
00:06:58.461 --> 00:07:03.039
spark debate world wide.
&gt;&gt; Speaker 2: It could be worse,

95
00:07:03.039 --> 00:07:05.040
you could have used tabs.
&gt;&gt; Bianca Gandolfo: I know.

96
00:07:05.040 --> 00:07:05.760
&gt;&gt; Speaker 3: Instead of child I

97
00:07:05.760 --> 00:07:06.938
named variable sub tree.
&gt;&gt; Bianca Gandolfo: Sub tree?

98
00:07:06.938 --> 00:07:11.820
Cool.
&gt;&gt; Bianca Gandolfo: It's a good name for

99
00:07:11.820 --> 00:07:12.750
it.

