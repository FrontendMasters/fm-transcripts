WEBVTT

1
00:00:00.180 --> 00:00:01.840
&gt;&gt; Bianca Gandolfo: So our interface.

2
00:00:01.840 --> 00:00:03.510
So we have our constructor function.

3
00:00:03.510 --> 00:00:05.690
Inside of our constructor
function we need a storage.

4
00:00:05.690 --> 00:00:10.730
We need to store our data whether
it's a reference to our functions,

5
00:00:10.730 --> 00:00:16.680
whether it's a list of all of our cats or
whatever it may be.

6
00:00:16.680 --> 00:00:19.360
We need to have a storage and
then we have our methods, right.

7
00:00:19.360 --> 00:00:22.616
We have push, we're pretty familiar
with this interface, right?

8
00:00:22.616 --> 00:00:28.080
And this is why it's a pretty common
first data structure to encounter.

9
00:00:28.080 --> 00:00:30.440
Push, we're familiar with that.

10
00:00:30.440 --> 00:00:35.250
Push means you're gonna put a value,
the top or on the back, right?

11
00:00:35.250 --> 00:00:37.550
Top takes it off the back and

12
00:00:37.550 --> 00:00:42.730
size is gonna tell you
the size of our stack, right.

13
00:00:42.730 --> 00:00:46.280
So in the world where we
are talking about stack frames,

14
00:00:46.280 --> 00:00:48.325
it will count the stack frames.

15
00:00:48.325 --> 00:00:53.182
In the world where it's an array of our
cats in order from our favorite cat to

16
00:00:53.182 --> 00:00:55.160
our least favorite cat.

17
00:00:55.160 --> 00:00:58.540
Probably based on how similar they
based on how similar they are to dogs.

18
00:00:58.540 --> 00:01:00.140
That's how I like cats.

19
00:01:00.140 --> 00:01:03.320
If that cats more like a dog,
they're more my favorite.

20
00:01:03.320 --> 00:01:07.410
And so I would sort my stack
like that of cat names.

21
00:01:07.410 --> 00:01:08.850
So we're familiar with these.

22
00:01:10.300 --> 00:01:12.770
And let's think about this.

23
00:01:12.770 --> 00:01:15.300
So, if we had to implement a stack but

24
00:01:15.300 --> 00:01:20.920
we didn't have an array,
&gt;&gt; Bianca Gandolfo: What could we use?

25
00:01:20.920 --> 00:01:22.914
What in the world is life for

26
00:01:22.914 --> 00:01:28.376
a stack outside of an array?
&gt;&gt; Speaker 2: Linked

27
00:01:28.376 --> 00:01:29.720
list?
&gt;&gt; Bianca Gandolfo: Hmm?

28
00:01:29.720 --> 00:01:30.467
&gt;&gt; Speaker 2: Linked list,

29
00:01:30.467 --> 00:01:33.081
or I'm sorry.
&gt;&gt; Bianca Gandolfo: It could be a linked

30
00:01:33.081 --> 00:01:36.041
list, but we don't have a native
linked list in JavaScript, yeah.

31
00:01:36.041 --> 00:01:39.611
Yeah,
&gt;&gt; Bianca Gandolfo: But that's good,

32
00:01:39.611 --> 00:01:43.264
I see where your brain is going.

33
00:01:43.264 --> 00:01:46.100
How do we store data
in vanilla JavaScript.

34
00:01:46.100 --> 00:01:47.200
If we didn't have a data structure,

35
00:01:47.200 --> 00:01:50.540
how do we store it?
&gt;&gt; Speaker 3: Variable.

36
00:01:50.540 --> 00:01:51.470
&gt;&gt; Bianca Gandolfo: In a variable.

37
00:01:51.470 --> 00:01:53.230
Yeah, we can store it in a variable.

38
00:01:53.230 --> 00:01:54.800
That's how we store data.

39
00:01:54.800 --> 00:02:00.110
We could hypothetically
just have a string.

40
00:02:00.110 --> 00:02:05.386
And if our data is all strings we could
just concatenate along the string and

41
00:02:05.386 --> 00:02:10.260
then just have methods that will only
slice off the end of the string.

42
00:02:11.300 --> 00:02:14.140
Maybe you'll have spaces or
dashes or something like that.

43
00:02:15.240 --> 00:02:16.080
Are we following here?

44
00:02:16.080 --> 00:02:17.620
&gt;&gt; Speaker 4: Yeah.
&gt;&gt; Bianca Gandolfo: Cool.

45
00:02:19.130 --> 00:02:23.790
So here we have our constructor
where our storage is a string.

46
00:02:25.090 --> 00:02:27.190
If we start off as an empty
string this is our empty stack.

47
00:02:27.190 --> 00:02:33.307
And then we have our,
&gt;&gt; Bianca Gandolfo: Our

48
00:02:33.307 --> 00:02:35.720
different methods here, right?

49
00:02:35.720 --> 00:02:36.970
We're all familiar with this now.

50
00:02:36.970 --> 00:02:40.539
We can see that we're
creating our instance.

51
00:02:40.539 --> 00:02:44.487
This is gonna be a weekly menu so,
I don't know if you guys on Sunday or

52
00:02:44.487 --> 00:02:48.520
Monday kind of think about,
okay this week I'm gonna have red beans.

53
00:02:48.520 --> 00:02:52.000
I'm from New Orleans originally, so
we always have red beans on a Monday.

54
00:02:52.000 --> 00:02:56.290
And tomorrow's Tuesday,
maybe we'll have tacos for Tuesday.

55
00:02:56.290 --> 00:02:58.980
Wednesday I heard that we
might have Jamaican food.

56
00:02:58.980 --> 00:03:03.430
And so we can push our weekly
menu onto our stack here and

57
00:03:03.430 --> 00:03:08.780
then just pop it off as we
need a recipe or whatever.

58
00:03:09.890 --> 00:03:14.520
So here we are,
we're creating our weekly menu.

59
00:03:14.520 --> 00:03:16.360
However, we have a problem.

60
00:03:16.360 --> 00:03:22.158
Our engineer did not finish
implementing the methods.

61
00:03:22.158 --> 00:03:23.012
My God, what are we gonna do?

62
00:03:23.012 --> 00:03:25.490
What are we gonna do?

63
00:03:25.490 --> 00:03:26.996
I think we need to pace and
put our hands like this.

64
00:03:26.996 --> 00:03:29.408
This is what we do when
we don't know what to do.

65
00:03:29.408 --> 00:03:32.128
Hyperventilating, [NOISE].

66
00:03:32.128 --> 00:03:35.917
Okay, I think we're fine,
gonna be fine, okay, all right.

67
00:03:35.917 --> 00:03:40.568
So,
&gt;&gt; Bianca Gandolfo: I'm gonna turn it

68
00:03:40.568 --> 00:03:41.200
over to you all.

69
00:03:42.640 --> 00:03:43.140
Yeah?

70
00:03:44.620 --> 00:03:48.080
We are going to do
the job of our engineers.

71
00:03:48.080 --> 00:03:52.120
Those engineers, they're never doing
their job, right, it's so annoying.

72
00:03:52.120 --> 00:03:57.890
We're gonna implement this,
our storage is a string, yeah?

73
00:03:57.890 --> 00:04:02.570
So we need to push our data, you can
create rules about this data if you want.

74
00:04:02.570 --> 00:04:05.660
It's data, maybe it has to be a string.

75
00:04:05.660 --> 00:04:08.360
Maybe we can't push a function on there,
cuz that would get complicated.

76
00:04:09.360 --> 00:04:10.110
Maybe it's a number.

77
00:04:11.200 --> 00:04:15.470
Maybe you have to separate it with a dash,
or

78
00:04:15.470 --> 00:04:20.410
maybe you have to separate it with,
I don't know, you get to decide.

79
00:04:20.410 --> 00:04:24.260
And that's the cool thing
about this cooking class,

80
00:04:24.260 --> 00:04:28.070
you have a framework here,
you get to put in the ingredients.

81
00:04:28.070 --> 00:04:29.040
Yeah.

82
00:04:29.040 --> 00:04:32.991
So we're gonna take about 20 minutes.
&gt;&gt; Bianca Gandolfo: To

83
00:04:32.991 --> 00:04:33.870
implement our stack.

84
00:04:33.870 --> 00:04:39.449
Is everyone clear with what we have to do?
&gt;&gt; Bianca Gandolfo: Awesome.

85
00:04:39.449 --> 00:04:40.661
Okay.
&gt;&gt; Speaker 2: Question?

86
00:04:40.661 --> 00:04:42.510
&gt;&gt; Bianca Gandolfo: Yeah.

87
00:04:42.510 --> 00:04:44.190
&gt;&gt; Speaker 5: David M is asking,

88
00:04:44.190 --> 00:04:45.860
couldn't we use a literal

89
00:04:45.860 --> 00:04:48.860
using the index as it's properties?
&gt;&gt; Bianca Gandolfo: Like

90
00:04:48.860 --> 00:04:49.670
an object literal?

91
00:04:51.930 --> 00:04:55.060
You could, but we are gonna use
a string because it's more interesting.

92
00:04:56.960 --> 00:05:00.494
Yeah, but that's the next step,
you guys are one step ahead.

93
00:05:00.494 --> 00:05:01.360
&gt;&gt; Speaker 2: Will you explain again

94
00:05:01.360 --> 00:05:04.330
what exactly we need to do?
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

95
00:05:04.330 --> 00:05:07.946
So hopefully you guys have
access to the slides now.

96
00:05:07.946 --> 00:05:11.997
You're gonna take this code, you're gonna
copy it, you're gonna put it in your

97
00:05:11.997 --> 00:05:15.300
text editor, or even in your
JavaScript console if you like that.

98
00:05:16.640 --> 00:05:17.890
We're gonna fill in the blanks.

99
00:05:17.890 --> 00:05:22.790
So we have all these methods here,
but they're totally blank,

100
00:05:22.790 --> 00:05:26.070
because the engineer didn't do the job,
typical.

101
00:05:26.070 --> 00:05:30.020
So it's now up to you,
you've gotta stay up late and

102
00:05:30.020 --> 00:05:33.530
finish up that work, so that we know
what we're gonna eat next week.

103
00:05:33.530 --> 00:05:34.700
You know what I mean?

104
00:05:34.700 --> 00:05:37.029
Otherwise, we're gonna starve,
so the stakes are pretty high.

105
00:05:38.820 --> 00:05:40.130
Cool?

106
00:05:40.130 --> 00:05:42.020
So we're building a stack interface.

107
00:05:42.020 --> 00:05:47.920
So push pushes it to the back,
pop takes it off of of the back, yeah?

108
00:05:49.930 --> 00:05:52.810
So.
&gt;&gt; Speaker 2: They're asking for

109
00:05:52.810 --> 00:05:54.960
clarification in the chat room.

110
00:05:54.960 --> 00:05:55.840
You want them to

111
00:05:55.840 --> 00:05:58.500
use a string as the storage, correct?

112
00:05:58.500 --> 00:05:59.240
&gt;&gt; Bianca Gandolfo: Yes.
&gt;&gt; Speaker 2: Not

113
00:05:59.240 --> 00:06:00.140
an array.

114
00:06:00.140 --> 00:06:00.660
&gt;&gt; Bianca Gandolfo: Nope.
&gt;&gt; Speaker 2: Not

115
00:06:00.660 --> 00:06:02.000
an object.
&gt;&gt; Bianca Gandolfo: Yep.

116
00:06:02.000 --> 00:06:03.048
&gt;&gt; Speaker 2: Not a file, nothing.

117
00:06:03.048 --> 00:06:04.444
A string.
&gt;&gt; Bianca Gandolfo: Nope,

118
00:06:04.444 --> 00:06:06.170
we're using a string.

119
00:06:06.170 --> 00:06:11.230
We're using a string basically
as an array more or less.

120
00:06:11.230 --> 00:06:14.910
You can think of it that way if that
makes more sense to you, David.

121
00:06:14.910 --> 00:06:17.790
But we're using a string for
our storage for our stack.

