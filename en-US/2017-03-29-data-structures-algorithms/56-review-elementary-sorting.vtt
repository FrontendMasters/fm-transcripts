WEBVTT

1
00:00:00.080 --> 00:00:04.040
&gt;&gt; Bianca Gandolfo: We're going to quickly
go over our elementary sorting algorithms.

2
00:00:04.040 --> 00:00:05.800
These are comparison sorts.

3
00:00:05.800 --> 00:00:09.130
So bubble sort compares
adjacent elements and

4
00:00:09.130 --> 00:00:12.310
bubbles up the largest
through each iteration.

5
00:00:12.310 --> 00:00:14.680
Then we have our insertion sort.

6
00:00:14.680 --> 00:00:18.532
It takes the first element, then sorts
the rest of the array around that element.

7
00:00:18.532 --> 00:00:21.190
Inserting it into the right place.

8
00:00:21.190 --> 00:00:25.882
Selection sort is going to keep selecting
the smallest element until the array is

9
00:00:25.882 --> 00:00:26.442
sorted.

10
00:00:28.264 --> 00:00:30.270
&gt;&gt; Bianca Gandolfo: So,
these are elementary sorts.

11
00:00:30.270 --> 00:00:34.646
These are sorts that you could probably
come up with on your own, right,

12
00:00:34.646 --> 00:00:35.521
if you had to.

13
00:00:37.881 --> 00:00:39.520
&gt;&gt; Bianca Gandolfo: But
they're terribly slow.

14
00:00:39.520 --> 00:00:43.300
And that's okay for small input sizes.

15
00:00:44.380 --> 00:00:45.620
But, important to know.

16
00:00:47.090 --> 00:00:49.300
Cool, we also learned some vocabulary.

17
00:00:49.300 --> 00:00:51.890
So we have a stable algorithm.

18
00:00:51.890 --> 00:00:55.450
It's going to preserve the original
order when values are the same.

19
00:00:56.830 --> 00:00:58.090
And then we have adaptive,

20
00:00:58.090 --> 00:01:02.340
which means it's going to become more
efficient as the list is nearly sorted.

21
00:01:02.340 --> 00:01:06.310
And these are some things to consider
when you're choosing the proper

22
00:01:06.310 --> 00:01:11.080
sorting algorithm for your use case.

23
00:01:11.080 --> 00:01:12.420
&gt;&gt; Speaker 2: Can I aks
you a quick question?

24
00:01:12.420 --> 00:01:13.900
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

25
00:01:13.900 --> 00:01:19.440
&gt;&gt; Speaker 2: We've referred to the better
sorting algorithm as optimized.

26
00:01:19.440 --> 00:01:21.790
But would that be the same,
adaptive and optimized?

27
00:01:21.790 --> 00:01:22.290
Or are they different?

28
00:01:24.460 --> 00:01:29.020
&gt;&gt; Bianca Gandolfo: So when we optimize an
algorithm, you can optimize any algorithm,

29
00:01:29.020 --> 00:01:31.100
not just a sorting algorithm.

30
00:01:31.100 --> 00:01:34.680
Like, making something adaptive
could be an optimization,

31
00:01:34.680 --> 00:01:35.940
but they're not exactly the same.

32
00:01:35.940 --> 00:01:37.520
Does that answer your question?

33
00:01:37.520 --> 00:01:38.150
&gt;&gt; Speaker 2: Yeah.

34
00:01:38.150 --> 00:01:43.930
&gt;&gt; Bianca Gandolfo: Cool.
Good question, though.

35
00:01:43.930 --> 00:01:45.610
So here's our bubble sort.

36
00:01:46.840 --> 00:01:48.230
This is our solution from yesterday.

37
00:01:48.230 --> 00:01:52.270
We set our wall at the end of the array.

38
00:01:52.270 --> 00:01:54.200
That's going to be considered
our first sorted element.

39
00:01:55.600 --> 00:02:00.680
Alright, we're going to move up
our first sorted element to there.

40
00:02:00.680 --> 00:02:02.440
And as we loop through,

41
00:02:02.440 --> 00:02:07.880
we're going to compare adjacent
elements and continue swapping them.

42
00:02:07.880 --> 00:02:10.680
And then once we get to the end,
our walls going to move over one.

43
00:02:11.740 --> 00:02:14.120
And at the end,
we're going to return our array.

44
00:02:14.120 --> 00:02:18.600
So bubble sort is adaptive,
however, it is not stable.

45
00:02:21.920 --> 00:02:24.731
How can we make bubble sort adaptive?

46
00:02:29.780 --> 00:02:31.170
&gt;&gt; Speaker 2: You said it is adaptive.

47
00:02:31.170 --> 00:02:32.500
&gt;&gt; Bianca Gandolfo: It can be adaptive.

48
00:02:32.500 --> 00:02:33.248
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Bianca Gandolfo: Mm-hm.

49
00:02:38.260 --> 00:02:41.440
&gt;&gt; Speaker 3: Exit the main loop
early if there are no swaps.

50
00:02:41.440 --> 00:02:42.930
&gt;&gt; Bianca Gandolfo: Yep, exactly.

51
00:02:45.520 --> 00:02:48.580
So if we loop through our entire
collection, or entire array.

52
00:02:48.580 --> 00:02:53.001
And we have no swaps,
then we know that all of

53
00:02:53.001 --> 00:02:59.110
the greater elements
are in their proper place.

54
00:02:59.110 --> 00:03:00.510
And so you can just break the loop early.

55
00:03:00.510 --> 00:03:05.350
And that would be a way to create
an adaptive algorithm for bubble sort.

56
00:03:07.720 --> 00:03:09.370
Yeah, so you have a flag, right?

57
00:03:11.470 --> 00:03:14.850
True, false, something like that.

58
00:03:14.850 --> 00:03:15.770
Cool.

59
00:03:15.770 --> 00:03:16.980
&gt;&gt; Speaker 4: Why isn't it stable though?

60
00:03:16.980 --> 00:03:26.580
It seems that we'd never swap equal things
&gt;&gt; Bianca Gandolfo: Why isn't it stable?

61
00:03:28.000 --> 00:03:29.900
Because, you couldn't swap equal things.

62
00:03:31.260 --> 00:03:37.010
Because the way that it swaps,
it only swaps the adjacent ones.

63
00:03:38.570 --> 00:03:40.450
And it puts out of order automatically.

64
00:03:40.450 --> 00:03:47.039
Does that make sense?

65
00:03:48.780 --> 00:03:49.280
No.

66
00:03:50.765 --> 00:03:53.382
&gt;&gt; Bianca Gandolfo: So
let me think of a different way to say it.

67
00:03:53.382 --> 00:03:58.413
So,
&gt;&gt; Bianca Gandolfo: Hm.

68
00:04:04.506 --> 00:04:05.225
&gt;&gt; Bianca Gandolfo: I
wish I had a picture.

69
00:04:13.058 --> 00:04:13.740
&gt;&gt; Speaker 4: Because the only

70
00:04:13.740 --> 00:04:16.570
way one thing can move past the other
is if they're become adjacent.

71
00:04:16.570 --> 00:04:17.420
And then are swapped.

72
00:04:18.960 --> 00:04:20.738
And then you'd never swap
them if they were equal.

73
00:04:24.474 --> 00:04:25.132
&gt;&gt; Bianca Gandolfo: Yeah.

74
00:04:25.132 --> 00:04:29.026
&gt;&gt; Speaker 4: It's a tangent and

75
00:04:29.026 --> 00:04:34.338
I don't want to
&gt;&gt; Bianca Gandolfo: Okay.

76
00:04:34.338 --> 00:04:35.220
No worries.

77
00:04:35.220 --> 00:04:37.530
So we'll just jump into insertion sort.

78
00:04:37.530 --> 00:04:43.070
So insertion sort is going to select
the first element of an array.

79
00:04:43.070 --> 00:04:45.980
and then it's going to loop through
the remainder of the array.

80
00:04:45.980 --> 00:04:50.070
Comparing it and
either inserting it before or after.

81
00:04:50.070 --> 00:04:51.990
So can it be adaptive?

82
00:04:51.990 --> 00:04:52.890
Yes.

83
00:04:52.890 --> 00:04:53.855
Is it stable?

84
00:04:53.855 --> 00:04:54.801
Yes.

85
00:04:57.651 --> 00:04:58.954
&gt;&gt; Bianca Gandolfo: Cool.
Questions?

86
00:05:03.833 --> 00:05:07.540
&gt;&gt; Bianca Gandolfo: Okay,
moving on, selection sort.

87
00:05:07.540 --> 00:05:10.160
We are going to select the smallest one.

88
00:05:10.160 --> 00:05:14.190
We are going to put it into either a new
array or at the beginning of the array.

89
00:05:15.260 --> 00:05:18.500
And keep selecting
the next smallest element.

90
00:05:20.220 --> 00:05:23.961
It is not adaptive, it is not stable.

91
00:05:23.961 --> 00:05:25.545
We're good?

92
00:05:25.545 --> 00:05:26.650
Awesome.

93
00:05:27.910 --> 00:05:28.460
Reflection.

94
00:05:28.460 --> 00:05:30.590
What was your experience coding these out?

95
00:05:34.922 --> 00:05:39.980
&gt;&gt; Speaker 5: The figures that you had,
how do you think through was very helpful.

96
00:05:41.050 --> 00:05:41.800
&gt;&gt; Bianca Gandolfo: The what?

97
00:05:41.800 --> 00:05:42.820
&gt;&gt; Speaker 5: The figure.

98
00:05:42.820 --> 00:05:43.530
&gt;&gt; Speaker 2: Animations?

99
00:05:43.530 --> 00:05:44.500
&gt;&gt; Speaker 5: Animations, yes.

100
00:05:44.500 --> 00:05:48.130
&gt;&gt; Bianca Gandolfo: Yeah, animations.

101
00:05:48.130 --> 00:05:51.380
We're hopeful we can figure out the order.

102
00:05:51.380 --> 00:05:56.340
I don't know if that's
the best way of wording it.

103
00:05:58.870 --> 00:05:59.370
Cool.

104
00:05:59.370 --> 00:06:02.820
&gt;&gt; Speaker 2: I kind of wish I had
watched the other dances on my own time.

105
00:06:02.820 --> 00:06:06.540
Because I always think about
that dance with the bubble sort.

106
00:06:06.540 --> 00:06:08.430
So I should have watched the others.

107
00:06:08.430 --> 00:06:09.680
&gt;&gt; Bianca Gandolfo: Yeah, cool.

108
00:06:09.680 --> 00:06:12.290
Anything else?

109
00:06:12.290 --> 00:06:13.788
Anything that was harder
than you were expecting?

110
00:06:17.449 --> 00:06:18.384
&gt;&gt; Bianca Gandolfo: Easier
than you expecting?

111
00:06:25.407 --> 00:06:26.330
&gt;&gt; Bianca Gandolfo: No?

112
00:06:26.330 --> 00:06:29.630
It was about on target
in terms of difficulty.

113
00:06:29.630 --> 00:06:31.930
&gt;&gt; Speaker 6: I remember the insertion and

114
00:06:31.930 --> 00:06:35.210
selection being more difficult
than the bubble to implement, but

115
00:06:35.210 --> 00:06:38.340
I don't remember specifically
what I got from that.

116
00:06:38.340 --> 00:06:40.150
I just remember it took some effort.

117
00:06:42.940 --> 00:06:43.440
&gt;&gt; Bianca Gandolfo: Cool.

118
00:06:45.700 --> 00:06:49.630
Anything else, anything that particularly
helped you get to the exercises.

119
00:06:51.740 --> 00:06:54.990
Something like a mistake
you made then fixed,

120
00:06:56.420 --> 00:06:58.536
a mistake that you still have
that has not been fixed.

121
00:06:58.536 --> 00:07:01.488
[LAUGH] No.

122
00:07:01.488 --> 00:07:01.988
Okay.

123
00:07:06.038 --> 00:07:07.050
&gt;&gt; Bianca Gandolfo: Okay.

124
00:07:07.050 --> 00:07:10.890
&gt;&gt; Speaker 5: I like the way that
she went through line by line and

125
00:07:10.890 --> 00:07:12.680
having the array first.

126
00:07:12.680 --> 00:07:15.509
And the items first and
then switching and kind of.

127
00:07:16.510 --> 00:07:18.340
That was very helpful.

128
00:07:18.340 --> 00:07:19.210
&gt;&gt; Bianca Gandolfo: Got it, so

129
00:07:19.210 --> 00:07:24.810
the more like visual,
like a visual walkthrough of steps.

130
00:07:24.810 --> 00:07:27.488
&gt;&gt; Speaker 5: Yeah
&gt;&gt; Bianca Gandolfo: Cool,

131
00:07:27.488 --> 00:07:33.350
awesome, cool.

132
00:07:33.350 --> 00:07:34.388
You guys ready?

133
00:07:34.388 --> 00:07:38.440
Further study non-comparison sorts,
look these up they're kind of cool.

134
00:07:38.440 --> 00:07:39.540
Radix, Counting, Bucket

