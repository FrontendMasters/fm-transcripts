WEBVTT

1
00:00:00.510 --> 00:00:01.970
&gt;&gt; Bianca Gandolfo: Can we
break the pseudocode down more?

2
00:00:03.340 --> 00:00:05.795
&gt;&gt; Speaker 2: So
are you setting flags on the nodes?

3
00:00:05.795 --> 00:00:06.516
&gt;&gt; Bianca Gandolfo: Mm-hm.

4
00:00:06.516 --> 00:00:07.422
&gt;&gt; Speaker 2: Okay?

5
00:00:07.422 --> 00:00:08.100
&gt;&gt; Bianca Gandolfo: Yeah.

6
00:00:09.650 --> 00:00:10.940
&gt;&gt; Speaker 2: Okay, or like a flag?

7
00:00:10.940 --> 00:00:15.170
&gt;&gt; Bianca Gandolfo: Yeah, so that way
when you're checking, you can see.

8
00:00:16.870 --> 00:00:18.530
&gt;&gt; Speaker 2: Right.

9
00:00:18.530 --> 00:00:20.428
&gt;&gt; Bianca Gandolfo: If you've
been there or not, yeah.

10
00:00:22.151 --> 00:00:24.877
&gt;&gt; Bianca Gandolfo: And we don't really
need to do that with a tree, right,

11
00:00:24.877 --> 00:00:27.390
because we don't have
to worry about cycles.

12
00:00:27.390 --> 00:00:27.890
Right.

13
00:00:29.824 --> 00:00:31.016
&gt;&gt; Bianca Gandolfo: Okay.

14
00:00:33.300 --> 00:00:36.050
&gt;&gt; Bianca Gandolfo: Does anyone
have a solid pseudocode solution?

15
00:00:50.360 --> 00:00:56.572
&gt;&gt; Bianca Gandolfo: Okay, so each node
needs to be visited and explored.

16
00:01:01.530 --> 00:01:02.840
&gt;&gt; Bianca Gandolfo: So we'll visit,

17
00:01:16.130 --> 00:01:17.660
&gt;&gt; Bianca Gandolfo: Does that seem fair?

18
00:01:17.660 --> 00:01:20.370
Like we have to go to each node,
we have to visit it and

19
00:01:20.370 --> 00:01:24.950
then we have to make sure that we
have visited everything around it and

20
00:01:24.950 --> 00:01:27.920
marked as explored before we
just said that we are done.

21
00:01:29.920 --> 00:01:33.622
&gt;&gt; Bianca Gandolfo: Cool,
and then it recurse,

22
00:01:33.622 --> 00:01:38.270
we have a base case, which is what?

23
00:01:38.270 --> 00:01:39.550
&gt;&gt; Speaker 2: If it's been explored.

24
00:01:44.070 --> 00:01:50.560
&gt;&gt; Bianca Gandolfo: Yes, if it has
been explored which we know that how?

25
00:01:52.510 --> 00:01:55.990
&gt;&gt; Speaker 2: Because there's going
to be an attribute on that node

26
00:01:55.990 --> 00:01:57.770
that tells us it's been explored or not.

27
00:01:59.170 --> 00:02:01.820
&gt;&gt; Bianca Gandolfo: Or
there's like no further places to go.

28
00:02:01.820 --> 00:02:02.962
&gt;&gt; Speaker 2: Or
there's no further place to go, yeah.

29
00:02:02.962 --> 00:02:06.070
&gt;&gt; Bianca Gandolfo: Yeah,
so what does that mean?

30
00:02:06.070 --> 00:02:09.920
So know where to go,
it could mean that for example for

31
00:02:09.920 --> 00:02:14.871
the 6, there's no adjacency list,
or it's empty.

32
00:02:16.050 --> 00:02:20.920
So an empty list or it could be what else?

33
00:02:20.920 --> 00:02:22.210
What are some other examples?

34
00:02:27.200 --> 00:02:30.558
&gt;&gt; Bianca Gandolfo: So
it's either visited or explored already,

35
00:02:30.558 --> 00:02:35.561
cuz you don't wanna go there
&gt;&gt; Bianca Gandolfo: You don't

36
00:02:35.561 --> 00:02:41.040
wanna recourse into something that is
already being visited or explored.

37
00:02:42.090 --> 00:02:46.030
&gt;&gt; Bianca Gandolfo: Two way two
kind of based cases scenario, okay?

38
00:02:46.030 --> 00:02:52.220
So that every time we visit.

39
00:02:54.549 --> 00:02:58.380
&gt;&gt; Bianca Gandolfo: If we call this our
recourse and we call this traverse, right.

40
00:03:03.336 --> 00:03:05.884
&gt;&gt; Bianca Gandolfo: Another thing we know
about recourse is we have to break our

41
00:03:05.884 --> 00:03:08.440
problem down into smaller pieces, right.

42
00:03:08.440 --> 00:03:10.250
So what pieces?

43
00:03:14.130 --> 00:03:16.250
&gt;&gt; Bianca Gandolfo: What pieces
do we want to break it down into.

44
00:03:22.993 --> 00:03:24.244
&gt;&gt; Bianca Gandolfo: All right,

45
00:03:24.244 --> 00:03:33.954
we have our nodes
&gt;&gt; Bianca Gandolfo: So

46
00:03:33.954 --> 00:03:37.944
we're saying each node
needs to be visited and

47
00:03:37.944 --> 00:03:42.050
to marked as explored,
is that the same thing?

48
00:03:42.050 --> 00:03:45.880
&gt;&gt; Speaker 3: Does, like do you mark a
node as explored once it's been visited or

49
00:03:45.880 --> 00:03:46.830
is there a little more to it?

50
00:03:46.830 --> 00:03:49.880
&gt;&gt; Bianca Gandolfo: There's a little
more to it, so visited happens.

51
00:03:49.880 --> 00:03:55.060
So for example, we visit 1 and then we go
all the way down, all the way down, all

52
00:03:55.060 --> 00:03:59.230
the way down, all the way down to 6, and
6 is the first one we mark as explored.

53
00:03:59.230 --> 00:04:00.630
&gt;&gt; Speaker 3: Okay,
cuz there's nowhere else to go.

54
00:04:00.630 --> 00:04:01.990
&gt;&gt; Bianca Gandolfo: There's
nowhere else to go.

55
00:04:01.990 --> 00:04:06.290
And then, because of that,
5 has been explored, 4 has been explored,

56
00:04:06.290 --> 00:04:12.520
2 has been explored,
1 is still visited 3, we visit.

57
00:04:12.520 --> 00:04:16.640
We check, we don't have anywhere to go and
now 3 is explored.

58
00:04:16.640 --> 00:04:18.698
And now we pop back, 1 is explored.

59
00:04:18.698 --> 00:04:19.668
Okay?

60
00:04:23.066 --> 00:04:28.213
&gt;&gt; Speaker 3: So when we first
go to a node we need to check

61
00:04:28.213 --> 00:04:33.520
if there's anywhere else we can go, yep.

62
00:04:33.520 --> 00:04:38.648
&gt;&gt; Bianca Gandolfo: [COUGH] So is there
somewhere to go or is everything in

63
00:04:38.648 --> 00:04:43.670
the adjacency list been
visited slash explored.

64
00:04:43.670 --> 00:04:45.280
Maybe we just want to say explored.

65
00:04:48.160 --> 00:04:50.160
I don't know.
I haven't committed.

66
00:04:50.160 --> 00:04:51.430
&gt;&gt; Speaker 3: Okay.

67
00:04:51.430 --> 00:04:51.930
&gt;&gt; Bianca Gandolfo: To either one.

68
00:04:53.230 --> 00:04:59.400
&gt;&gt; Speaker 3: So with your definition
6 can't be explored, right?

69
00:04:59.400 --> 00:05:01.310
6 can't be visited.

70
00:05:01.310 --> 00:05:02.450
&gt;&gt; Bianca Gandolfo: So 6 is explored,

71
00:05:02.450 --> 00:05:07.030
6 is actually the first one that we
consider explored Because as we go down,

72
00:05:07.030 --> 00:05:10.820
we start here, we go down, we do gown,
and we go down and we get to 6.

73
00:05:10.820 --> 00:05:15.250
At this point, 1, 2, 4, and
5 have all been visited,

74
00:05:15.250 --> 00:05:17.740
but we have not marked them explored yet.

75
00:05:17.740 --> 00:05:25.310
Because we're not sure yet that there's
no more other adjacent vertices, right?

76
00:05:25.310 --> 00:05:27.890
Because we haven't checked,
we've only gone down one path.

77
00:05:27.890 --> 00:05:29.070
All the way down to the bottom.

78
00:05:29.070 --> 00:05:32.470
And we wanna make sure that we account for
other path, so

79
00:05:32.470 --> 00:05:35.350
that one is just visited
because we go down this way.

80
00:05:35.350 --> 00:05:38.780
We hadn't yet explored the 3 and so,

81
00:05:38.780 --> 00:05:42.560
explore is when all the edges and
vertices are done.

82
00:05:42.560 --> 00:05:47.719
So basically, explore is when we've gone
to both of the items at JSON C list.

83
00:05:58.742 --> 00:06:07.490
&gt;&gt; Bianca Gandolfo: So we need to traverse
somewhere in our adjacent C list, right?

84
00:06:07.490 --> 00:06:10.200
We have two options of
what we can traverse.

85
00:06:10.200 --> 00:06:13.970
We can traverse either the edges or

86
00:06:13.970 --> 00:06:17.180
we can traverse through
the nodes themselves, right.

87
00:06:17.180 --> 00:06:21.920
Because that's what we have,
we have either an array

88
00:06:21.920 --> 00:06:26.250
of our edges or
we have these values in our object, right.

89
00:06:27.310 --> 00:06:30.574
1 to 6, yes.

90
00:06:30.574 --> 00:06:31.470
Mm-hm.

91
00:06:31.470 --> 00:06:36.320
&gt;&gt; Speaker 3: But the edges are what
represent, but places we can go.

92
00:06:36.320 --> 00:06:38.420
&gt;&gt; Bianca Gandolfo: Yeah,
so what does that tell you?

93
00:06:38.420 --> 00:06:40.010
&gt;&gt; Speaker 3: That that's
what we wanna traverse.

94
00:06:40.010 --> 00:06:42.790
&gt;&gt; Bianca Gandolfo: Yeah, so
we wanna traverse into the edges.

95
00:06:45.635 --> 00:06:46.770
&gt;&gt; Speaker 3: Yes.

96
00:06:46.770 --> 00:06:48.439
&gt;&gt; Bianca Gandolfo: So
the first time we do this.

97
00:06:49.510 --> 00:06:51.720
Right, this that knows that value,
we're looking at one.

98
00:06:54.324 --> 00:06:58.402
&gt;&gt; Bianca Gandolfo: And
we wanna go into the first item, two.

99
00:07:02.215 --> 00:07:07.130
&gt;&gt; Bianca Gandolfo: And then,
let's just say we recurse.

100
00:07:09.070 --> 00:07:10.820
We recurse, so we visit.

101
00:07:16.400 --> 00:07:21.150
&gt;&gt; Bianca Gandolfo: We visit 2,
which is here, and we can go to 0, right?

102
00:07:22.570 --> 00:07:27.360
So if we wrote this code just
looking at the first index.

103
00:07:27.360 --> 00:07:31.718
It would kind of work for a while, right,

104
00:07:31.718 --> 00:07:35.951
we go to 4, 4 goes to 5, 5 goes to 6,

105
00:07:35.951 --> 00:07:40.310
6 meets our best case, so we jump out.

106
00:07:40.310 --> 00:07:43.170
We jump out, we jump out,
we jump out, we jump out.

107
00:07:43.170 --> 00:07:47.415
The time it doesn't work is when our
adjacency list is greater than size 1.

108
00:07:49.030 --> 00:07:53.070
&gt;&gt; Bianca Gandolfo: Do you see why?

109
00:07:58.085 --> 00:08:00.372
&gt;&gt; Speaker 3: Because we're just,
we want to go to the first one?

110
00:08:00.372 --> 00:08:02.729
&gt;&gt; Bianca Gandolfo: Mm-hm.

111
00:08:08.540 --> 00:08:12.175
&gt;&gt; Speaker 3: Could we use a loop
there to traverse all of them?

112
00:08:12.175 --> 00:08:12.675
&gt;&gt; Bianca Gandolfo: Mm-hm.

113
00:08:23.410 --> 00:08:26.269
&gt;&gt; Bianca Gandolfo: Let's
call it array of edges

114
00:08:29.812 --> 00:08:31.580
&gt;&gt; Bianca Gandolfo: No, what did I hit?

115
00:08:34.024 --> 00:08:35.340
God, it scared me.

116
00:08:35.340 --> 00:08:38.779
I was like don't erase everything, okay?

117
00:08:43.384 --> 00:08:46.669
&gt;&gt; Bianca Gandolfo: Okay, so for

118
00:08:46.669 --> 00:08:52.050
i we're gonna loop.

119
00:08:59.238 --> 00:09:00.399
&gt;&gt; Bianca Gandolfo: How
does that land with us?

120
00:09:04.363 --> 00:09:10.347
&gt;&gt; Speaker 3: [INAUDIBLE]
Mm-hm.

121
00:09:14.400 --> 00:09:18.584
&gt;&gt; Bianca Gandolfo: So we'll start with 1,
is 1 visited or explored,

122
00:09:18.584 --> 00:09:20.019
or in empty list?

123
00:09:21.810 --> 00:09:23.650
No, so we're gonna loop through it.

124
00:09:24.850 --> 00:09:27.526
So the very first one
we're gonna traverse- Yep.

125
00:09:27.526 --> 00:09:31.869
Which is gonna be our recurse of call.

126
00:09:31.869 --> 00:09:37.280
&gt;&gt; Speaker 3: Yeah.
Go to 2, is 4 explored or visited?

127
00:09:37.280 --> 00:09:39.460
&gt;&gt; Bianca Gandolfo: No,
so we will traverse.

128
00:09:40.810 --> 00:09:44.254
Same thing, we will traverse,
we will traverse, we get to 6.

129
00:09:44.254 --> 00:09:49.570
6 is now, has an empty list,

130
00:09:49.570 --> 00:09:53.010
so we return, 5.

131
00:09:53.010 --> 00:09:55.770
So, again we're not flagging here so

132
00:09:55.770 --> 00:09:58.706
there at some point we're gonna want
to flag, but let's pretend that we did.

133
00:09:58.706 --> 00:10:03.470
So 6 s explored at that point and

134
00:10:03.470 --> 00:10:08.100
then we go up, up up up, to 1.

135
00:10:08.100 --> 00:10:13.530
And in this 1 we're back at this 4 loop,
then I will be 1,

136
00:10:13.530 --> 00:10:15.405
and then that's when we go to 3

137
00:10:28.630 --> 00:10:32.894
&gt;&gt; Bianca Gandolfo: So, who wants to teach

138
00:10:32.894 --> 00:10:38.510
me about how this code works.

139
00:10:41.722 --> 00:10:43.608
&gt;&gt; Bianca Gandolfo: Anyone?

140
00:10:46.820 --> 00:10:49.450
&gt;&gt; Bianca Gandolfo: Well,
everyone all the same time.

141
00:10:49.450 --> 00:10:50.700
&gt;&gt; Speaker 3: Anyone interrupt this 1.

142
00:10:50.700 --> 00:10:56.369
&gt;&gt; Bianca Gandolfo: [LAUGH] [LAUGH]
Let's see, could just take a guess.

143
00:10:57.640 --> 00:11:01.910
So the way you learn is trying it and then
maybe it was wrong and then I'd tell you

144
00:11:01.910 --> 00:11:06.660
the right way and then suddenly you'd know
where your mistake was in your thinking.

145
00:11:08.540 --> 00:11:13.450
So by taking a stab at it and
showing us your mental model it's going to

146
00:11:13.450 --> 00:11:17.110
help you and it's also going to help
probably the other half of the class who

147
00:11:17.110 --> 00:11:22.230
also has this mental model
that may be incorrect.

148
00:11:22.230 --> 00:11:25.177
Or, you got it 100%.

149
00:11:25.177 --> 00:11:27.280
&gt;&gt; Speaker 3: And
then you get all the glory.

150
00:11:27.280 --> 00:11:29.060
&gt;&gt; Bianca Gandolfo: Yeah, and
then you just get credit for that.

151
00:11:37.520 --> 00:11:39.260
&gt;&gt; Bianca Gandolfo: Anyone, anyone?

152
00:11:39.260 --> 00:11:41.600
&gt;&gt; Speaker 3: I'll give it
a go if nobody wants to.

153
00:11:41.600 --> 00:11:42.750
&gt;&gt; Bianca Gandolfo: Okay.

154
00:11:42.750 --> 00:11:47.133
&gt;&gt; Speaker 3: I feel like I'm hogging
all the interaction chances though.

155
00:11:47.133 --> 00:11:47.860
&gt;&gt; Bianca Gandolfo: Well.

156
00:11:47.860 --> 00:11:52.160
&gt;&gt; Speaker 3: So we'll start off at 1,
and so we'll check

157
00:11:52.160 --> 00:11:57.160
there if it's an empty list, or if it's
already been marked, visited, or explored.

158
00:11:57.160 --> 00:12:00.250
None of those things are true,
so we move through and

159
00:12:00.250 --> 00:12:01.880
loop through its array of edges.

160
00:12:02.950 --> 00:12:05.690
We go through the first entry
in that array and that's 2.

161
00:12:05.690 --> 00:12:12.116
We do a recursive call
to our traverse on 2.

162
00:12:12.116 --> 00:12:16.739
We check if 2, either contains an empty
list or has already been marked visited or

163
00:12:16.739 --> 00:12:17.410
explored.

164
00:12:17.410 --> 00:12:20.138
That's not true, so
we move down to our second thing, and

165
00:12:20.138 --> 00:12:21.880
we loop through its array of edges.

166
00:12:21.880 --> 00:12:28.230
Its array of edges only contains 4,
with triggers on 4.

167
00:12:28.230 --> 00:12:33.050
We check if it has an empty list or
if it's been visited or explored.

168
00:12:33.050 --> 00:12:35.019
That's not true, so
we loop through its edges.

169
00:12:36.040 --> 00:12:40.051
So we'd go into 5,
&gt;&gt; Speaker 3: It does not have empty lists

170
00:12:40.051 --> 00:12:42.490
or has been visited or explored.

171
00:12:42.490 --> 00:12:45.240
So we'd traverse on 5, which gets us to 6.

172
00:12:45.240 --> 00:12:49.557
Now 6 has an empty list, so

173
00:12:49.557 --> 00:12:54.864
we return and don't go anything further.

174
00:12:54.864 --> 00:13:00.924
Which pops us back into,
&gt;&gt; Speaker 3: 5,

175
00:13:00.924 --> 00:13:03.380
so we'll finish that loop.

176
00:13:03.380 --> 00:13:06.600
There's nothing else in the loop,
so that pops us back to 4.

177
00:13:06.600 --> 00:13:07.640
We'll finish that loop.

178
00:13:07.640 --> 00:13:10.340
There's nothing else there,
so that takes us back to 2.

179
00:13:10.340 --> 00:13:13.600
Finish that loop, nothing else there,
that takes us back to 1.

180
00:13:13.600 --> 00:13:17.419
Now there is another entry in that loop,
so we'll go into 3.

181
00:13:18.460 --> 00:13:23.370
And then from 3, we'll check if it's
got nowhere to go, which is not true,

182
00:13:23.370 --> 00:13:25.140
or if it's been visited,
which is not true.

183
00:13:25.140 --> 00:13:30.793
So we'll traverse 3, we'll loop through
its array of edges, which takes us to 4.

184
00:13:30.793 --> 00:13:37.500
We go to 4, now it's already been
visited so we return back to 3.

185
00:13:37.500 --> 00:13:40.310
And there is nothing else
to go in to that loop.

186
00:13:40.310 --> 00:13:46.740
We go back to 1, then we are done, right?

187
00:13:46.740 --> 00:13:48.640
Because, that loop is finished.

188
00:13:48.640 --> 00:13:50.190
&gt;&gt; Bianca Gandolfo: Yup, perfect.

189
00:13:50.190 --> 00:13:51.840
Snaps that was beautiful.

190
00:13:51.840 --> 00:13:53.040
Lets give him snaps.

191
00:13:53.040 --> 00:13:55.700
Don't need to be stingy with your snaps.

192
00:13:55.700 --> 00:13:57.195
They don't cost that much.

193
00:13:57.195 --> 00:14:01.620
[LAUGH] All right, okay, cool.

194
00:14:01.620 --> 00:14:03.150
So before, we're not gonna do exercises,

195
00:14:03.150 --> 00:14:05.540
we're just gonna jump into
Breadth-First Search.

196
00:14:05.540 --> 00:14:10.960
So you have some to dos here,
to do, where do you put flags?

197
00:14:13.630 --> 00:14:15.420
&gt;&gt; Bianca Gandolfo: How
many flags do we need?

198
00:14:15.420 --> 00:14:17.470
Do we need explored and visited?

199
00:14:17.470 --> 00:14:17.970
&gt;&gt; Speaker 2: No.

200
00:14:20.805 --> 00:14:26.120
&gt;&gt; Bianca Gandolfo: Visited or just one,
doesn't matter, you can decide.

201
00:14:27.760 --> 00:14:28.680
What are the questions that are open?

202
00:14:28.680 --> 00:14:33.770
I think those are our main open
questions it's just around the flagging.

