WEBVTT

1
00:00:00.240 --> 00:00:02.050
&gt;&gt; Bianca Gandolfo: So
quick sort is another recursive divide and

2
00:00:02.050 --> 00:00:03.470
conquer sorting algorithm.

3
00:00:03.470 --> 00:00:06.334
So we have our divide and
conquer steps here.

4
00:00:06.334 --> 00:00:08.000
Of course we need to
recognize our base case.

5
00:00:08.000 --> 00:00:10.580
What happens if we don't
recognize our base case?

6
00:00:10.580 --> 00:00:11.910
&gt;&gt; Speaker 2: Infinite loop.

7
00:00:11.910 --> 00:00:13.500
&gt;&gt; Bianca Gandolfo: Fun forever until

8
00:00:13.500 --> 00:00:16.600
your browser crashes,
right, infinite loop.

9
00:00:16.600 --> 00:00:22.560
One, I guess zero one, one is we're going
to divide And two we're gonna conquer, so

10
00:00:22.560 --> 00:00:28.480
divide and conquer for the quick sort is
in the same step, it's our partition step.

11
00:00:28.480 --> 00:00:30.943
And then combine, we don't really
have a combine in this case.

12
00:00:33.108 --> 00:00:34.050
&gt;&gt; Bianca Gandolfo: Cool?

13
00:00:36.370 --> 00:00:37.047
&gt;&gt; Bianca Gandolfo: All right,

14
00:00:37.047 --> 00:00:39.019
let's talk about the partition.

15
00:00:40.220 --> 00:00:44.370
So the goal is to move the pivot
to its sorted place in the array.

16
00:00:46.190 --> 00:00:50.080
So a key here is a pivot is
a number that you choose.

17
00:00:50.080 --> 00:00:52.330
In this case, we're choosing five,

18
00:00:52.330 --> 00:00:56.720
we're just putting it at the end and we're
gonna keep it highlighted so we know.

19
00:00:56.720 --> 00:00:59.910
We want know to In this case,
we're just getting it out of the way.

20
00:00:59.910 --> 00:01:04.910
But eventually,
if we have all of the lesser values,

21
00:01:04.910 --> 00:01:10.120
which are these blue values, to the left,
and all of the greater values

22
00:01:10.120 --> 00:01:15.760
to the right, then we know that 5
is in its final location, right?

23
00:01:15.760 --> 00:01:22.790
Everything else is still unsorted,
but 5 is good, so that is our goal.

24
00:01:22.790 --> 00:01:28.830
Is to get 5 into it's final location
by moving through the array.

25
00:01:28.830 --> 00:01:35.940
Moving all the lesser one's to the left,
and keeping track of where.

26
00:01:35.940 --> 00:01:39.400
The lesser values are to the left of.

27
00:01:39.400 --> 00:01:47.140
So right here, the lesser values are our
past to the left of 1, right, index 1.

28
00:01:47.140 --> 00:01:55.222
Here the lesser values are to
the left of index 0, 1, 2, 3, etc.

29
00:01:55.222 --> 00:02:01.060
And so, we keep track of it, and
that is what we call our pivot location.

30
00:02:01.060 --> 00:02:07.150
So as we're adding lesser values,
our pivot location is moving to the right.

31
00:02:07.150 --> 00:02:14.763
We start a pivot location at the
beginning, and we say, is 3 less than 5.

32
00:02:14.763 --> 00:02:18.930
Yes, so we move our pivot location over,
is 7 less than 5?

33
00:02:18.930 --> 00:02:22.372
No, keep a pivot location the same.

34
00:02:22.372 --> 00:02:24.757
8 less than 5?

35
00:02:24.757 --> 00:02:27.686
No, keep the pivot location the same.

36
00:02:27.686 --> 00:02:28.812
4?

37
00:02:28.812 --> 00:02:29.598
Less than 5?

38
00:02:29.598 --> 00:02:37.150
Yes, move 4 to the pivot location,
right, which is 1, keep moving.

39
00:02:37.150 --> 00:02:38.632
All right, then swap them.

40
00:02:38.632 --> 00:02:45.776
2 same thing, swap it so
now pivot location is here.

41
00:02:45.776 --> 00:02:48.270
Cool on that process?

42
00:02:49.280 --> 00:02:51.760
And again the idea is we
want all the lesser values,

43
00:02:51.760 --> 00:02:54.980
these blue values to be
to the left of our pivot.

44
00:02:56.260 --> 00:02:58.760
Which is 5,
which is just a number we randomly pick.

45
00:02:58.760 --> 00:03:03.109
Sometimes we'll pick the one at the end,
sometimes we'll pick one in the middle,

46
00:03:03.109 --> 00:03:07.585
sometimes it's a random number depending
on the implementation, and how you expect

47
00:03:07.585 --> 00:03:14.699
your data to come into your algorithm.
&gt;&gt; Bianca Gandolfo: Cool,

48
00:03:14.699 --> 00:03:19.704
we saw a couple different ways of doing
it, was that yesterday or two days ago?

49
00:03:19.704 --> 00:03:25.449
One was to swap or pivot, twice right?

50
00:03:25.449 --> 00:03:31.220
So, as we moved up we swapped our
pivot and then we swapped it back, and

51
00:03:31.220 --> 00:03:36.510
then another way that we saw, was we kept
the pivot at the end and just swapped it.

52
00:03:36.510 --> 00:03:41.272
In our very last,
&gt;&gt; Bianca Gandolfo: Once our

53
00:03:41.272 --> 00:03:45.326
pivot location had completed,
it's round, right?

54
00:03:45.326 --> 00:03:51.180
Once we've gone through and made sure
all of the elements that were lesser

55
00:03:51.180 --> 00:03:54.810
were to the left and all the elements
that were greater were to the right.

56
00:03:54.810 --> 00:03:57.520
Which is essentially you just have
to loop through the entire array.

57
00:03:58.690 --> 00:03:59.892
Except for the last one.

58
00:03:59.892 --> 00:04:05.580
Array.length- 2, cool.

59
00:04:05.580 --> 00:04:09.318
Can I see thumbs on that?

60
00:04:09.318 --> 00:04:13.100
Could I get a question
around this partition step?

61
00:04:15.460 --> 00:04:16.880
&gt;&gt; Speaker 2: Whenever we implemented it,

62
00:04:16.880 --> 00:04:19.155
we grabbed the one from the end.
&gt;&gt; Bianca Gandolfo: Mm-hm.

63
00:04:19.155 --> 00:04:20.296
&gt;&gt; Speaker 2: Does the implementation

64
00:04:20.296 --> 00:04:22.086
change much if you grabbed one from is it

65
00:04:22.086 --> 00:04:24.150
the middle?
&gt;&gt; Bianca Gandolfo: Not really.

66
00:04:24.150 --> 00:04:25.578
&gt;&gt; Speaker 2: Not really?

67
00:04:25.578 --> 00:04:26.689
&gt;&gt; Bianca Gandolfo: Not really, I mean

68
00:04:26.689 --> 00:04:31.280
the reason that there is all kinds of
theory around which one you should chose.

69
00:04:33.770 --> 00:04:39.670
If you know that it's not a sorted
array or like mostly sorted.

70
00:04:39.670 --> 00:04:41.490
Then it's fine to just chose the end.

71
00:04:41.490 --> 00:04:43.070
But if you think it's
gonna be mostly sorted,

72
00:04:43.070 --> 00:04:45.170
well you shouldn't be using quick sort.

73
00:04:45.170 --> 00:04:49.050
But then picking one in the middle might
make it less likely that it's the maximum

74
00:04:49.050 --> 00:04:50.580
value, right?

75
00:04:50.580 --> 00:04:56.190
So if you pick the maximum
value every time, this step

76
00:04:56.190 --> 00:05:01.470
of swapping is gonna
become exponential time.

77
00:05:01.470 --> 00:05:05.440
Cuz when you break it up,

78
00:05:05.440 --> 00:05:10.440
you're going to have nothing going to
the right, everything going to the left,

79
00:05:10.440 --> 00:05:16.970
and then it's just a quadratic
algorithm at that point.

80
00:05:16.970 --> 00:05:20.250
So that's why where you pick is important

81
00:05:20.250 --> 00:05:24.040
as long as you're not picking the maximum.
&gt;&gt; Speaker 2: How many

82
00:05:24.040 --> 00:05:27.450
total different ways
actually do you do this?

83
00:05:27.450 --> 00:05:30.104
Another new way, so
that we have [CROSSTALK]

84
00:05:30.104 --> 00:05:31.457
&gt;&gt; Bianca Gandolfo: We just have two ways,

85
00:05:31.457 --> 00:05:36.400
this is the same way that we looked at in
our, well this is a little bit different.

86
00:05:36.400 --> 00:05:37.290
&gt;&gt; Speaker 2: Different?

87
00:05:37.290 --> 00:05:38.336
&gt;&gt; Bianca Gandolfo: Because we're choosing

88
00:05:38.336 --> 00:05:40.379
the one in the middle [CROSSTALK]
&gt;&gt; Speaker 2: Mm-hm.

89
00:05:40.379 --> 00:05:41.130
&gt;&gt; Bianca Gandolfo: There're a bunch of

90
00:05:41.130 --> 00:05:42.460
different ways of doing it, yeah.

91
00:05:43.780 --> 00:05:46.600
So we chose the one in
the middle this time

92
00:05:46.600 --> 00:05:50.510
The last two times we always
chose one at the end but

93
00:05:52.400 --> 00:05:55.490
it's not different other than that.
&gt;&gt; Speaker 2: But and

94
00:05:55.490 --> 00:05:57.210
this was the double spot right?
&gt;&gt; Bianca Gandolfo: No,

95
00:05:57.210 --> 00:05:58.960
this was the same as well.
&gt;&gt; Speaker 2: Is it?

96
00:05:58.960 --> 00:05:59.700
&gt;&gt; Bianca Gandolfo: Yeah, cuz we just

97
00:05:59.700 --> 00:06:02.804
move it to the end and once we're done.
&gt;&gt; Speaker 2: I see,

98
00:06:02.804 --> 00:06:05.135
I was looking at the two arrows.
&gt;&gt; Bianca Gandolfo: Yep.

99
00:06:05.135 --> 00:06:06.422
&gt;&gt; Speaker 2: Okay.

100
00:06:06.422 --> 00:06:07.390
&gt;&gt; Bianca Gandolfo: Yep.

101
00:06:07.390 --> 00:06:08.385
&gt;&gt; Speaker 2: You said something

102
00:06:08.385 --> 00:06:11.810
about array.length minus two.
&gt;&gt; Bianca Gandolfo: Yep.

103
00:06:11.810 --> 00:06:12.930
&gt;&gt; Speaker 2: What was that?

104
00:06:12.930 --> 00:06:14.050
&gt;&gt; Bianca Gandolfo: So we'll loop up to

105
00:06:14.050 --> 00:06:16.767
the second to last.
&gt;&gt; Speaker 2: Okay, okay.

106
00:06:16.767 --> 00:06:17.322
&gt;&gt; Bianca Gandolfo: At the time,

107
00:06:17.322 --> 00:06:20.830
cuz our pivot is at the end, yeah.
&gt;&gt; Speaker 2: I wonder if,

108
00:06:20.830 --> 00:06:24.370
would it be practical to have
chose the median as the pivot.

109
00:06:24.370 --> 00:06:26.221
Cuz I think you can find the median and

110
00:06:26.221 --> 00:06:29.981
I'll log in.
&gt;&gt; Bianca Gandolfo: Just

111
00:06:29.981 --> 00:06:31.007
maybe choose three and

112
00:06:31.007 --> 00:06:35.628
then choose the one in the middle?
&gt;&gt; Bianca Gandolfo: Or just loop through?

113
00:06:35.628 --> 00:06:36.400
&gt;&gt; Speaker 2: Well I choose the median

114
00:06:36.400 --> 00:06:41.100
value so that the splits would be equal.
&gt;&gt; Bianca Gandolfo: Yeah, yeah, if,

115
00:06:41.100 --> 00:06:47.010
depending that would be
another linear time operation.

116
00:06:47.010 --> 00:06:50.760
And if you can handle it,
and there's a chance that

117
00:06:52.710 --> 00:06:58.144
it's mostly sorted of something like that,
it might be worth it, for sure.

118
00:06:58.144 --> 00:07:00.350
Cool.
&gt;&gt; Speaker 3: Got a question from

119
00:07:00.350 --> 00:07:01.551
online.
&gt;&gt; Bianca Gandolfo: Yeah,

120
00:07:01.551 --> 00:07:05.471
can you please explain this example again,
with pivot = 5?

121
00:07:05.471 --> 00:07:10.950
Sure, so
our first step is to choose a pivot point.

122
00:07:12.310 --> 00:07:18.558
In this case, we're choosing just
this random pivot point, yeah?

123
00:07:18.558 --> 00:07:22.660
And we're gonna move it to the end just so
it's out of the way.

124
00:07:22.660 --> 00:07:26.280
Cool, so we switch five with
four just to get the five

125
00:07:26.280 --> 00:07:29.730
our pivot point out of the way, cool?

126
00:07:29.730 --> 00:07:33.513
So we start at the beginning with
our pivot location being zero.

127
00:07:33.513 --> 00:07:38.465
And again, the goal is that we
wanna make sure all of the items to

128
00:07:38.465 --> 00:07:43.337
the left of our pivot point
are less than our pivot 5, tight?

129
00:07:43.337 --> 00:07:50.083
And that is shown as
&gt;&gt; Bianca Gandolfo: The blue ones, right?

130
00:07:50.083 --> 00:07:52.010
So we're gonna start here.

131
00:07:52.010 --> 00:07:56.960
At this point our pivot point at the very,
very beginning, our pivot point is 0.

132
00:07:56.960 --> 00:08:02.789
We say is 3 less than 5, so
if the element is less than or

133
00:08:02.789 --> 00:08:05.892
equal to the pivot We are going

134
00:08:05.892 --> 00:08:11.595
to,
&gt;&gt; Bianca Gandolfo: We're

135
00:08:11.595 --> 00:08:14.650
going to make sure this element
is before the pivot location.

136
00:08:16.920 --> 00:08:20.900
So here we go, we're just gonna
move the pivot location up one.

137
00:08:20.900 --> 00:08:24.170
So now a pivot location is one, right.

138
00:08:24.170 --> 00:08:26.310
We didn't need to swap anything
at this point cuz it's just

139
00:08:26.310 --> 00:08:29.170
at the beginning, all right.

140
00:08:29.170 --> 00:08:29.810
Does that make sense?

141
00:08:29.810 --> 00:08:31.020
Cuz we're already at the pivotal location.

142
00:08:32.120 --> 00:08:37.180
So now it's one,
let me check is 7 less than 5?

143
00:08:37.180 --> 00:08:41.250
And we're checking all of them right
whether the pivotal location is here,

144
00:08:41.250 --> 00:08:42.022
here, here.

145
00:08:42.022 --> 00:08:46.850
We're gonna loop through all of
them to check and swap them.

146
00:08:46.850 --> 00:08:50.540
So if your location is 1, is it less than?

147
00:08:50.540 --> 00:08:55.520
No, so we're gonna move forward, the pivot
location is still the same place, okay?

148
00:08:55.520 --> 00:08:57.020
So is 8 less than 5?

149
00:08:57.020 --> 00:08:58.430
No, we're gonna keep moving.

150
00:08:58.430 --> 00:09:00.440
Again, the pivot location has not changed.

151
00:09:01.560 --> 00:09:04.110
Now, we say is 4 less than 5?

152
00:09:04.110 --> 00:09:05.190
Yes.

153
00:09:05.190 --> 00:09:08.832
Now, we are going to
switch 4 with the pivot

154
00:09:08.832 --> 00:09:12.231
location.
&gt;&gt; Bianca Gandolfo: And

155
00:09:12.231 --> 00:09:16.270
increment the pivot location by 1,
which is now 8.

156
00:09:16.270 --> 00:09:21.445
However, we're still gonna check 2 next.
&gt;&gt; Bianca Gandolfo: Okay?

157
00:09:21.445 --> 00:09:24.690
So is 2 Less than 5?

158
00:09:24.690 --> 00:09:30.752
Yes, so we're gonna switch
2 with the pivot location,

159
00:09:30.752 --> 00:09:35.814
here, and
increment the pivot location by 1.

160
00:09:35.814 --> 00:09:40.189
The next one, so the pivot location's
here, and we're gonna check our next one.

161
00:09:40.189 --> 00:09:44.905
1 is less, so we're going to
move it to the pivot location,

162
00:09:44.905 --> 00:09:47.870
increment the pivot location by one.

163
00:09:49.210 --> 00:09:52.000
The next one we're looking at is 9.

164
00:09:52.000 --> 00:09:55.110
9 is not less, so we leave it alone.

165
00:09:55.110 --> 00:09:56.870
We don't increment the pivot location.

166
00:09:58.500 --> 00:09:59.290
We go to the next one.

167
00:10:00.870 --> 00:10:04.660
5, is 5 less than or equal to 5.

168
00:10:04.660 --> 00:10:06.100
Yes?

169
00:10:06.100 --> 00:10:13.267
We move it to the pivot location,
increment the pivot location by one,

170
00:10:13.267 --> 00:10:19.460
and then we loop through
the entire array at that point.

171
00:10:19.460 --> 00:10:22.609
And now you can see
the pivot location is here.

172
00:10:23.770 --> 00:10:28.410
All the elements to the left are unsorted,
but less.

173
00:10:28.410 --> 00:10:34.390
All the elements to the right
are unsorted, but greater.

174
00:10:34.390 --> 00:10:39.273
And so what we need to do is move phi to
the pivot location which is it's final

175
00:10:39.273 --> 00:10:41.220
point, where it needs to be.

176
00:10:41.220 --> 00:10:43.770
And it's not gonna move after this,
this is where it's gonna be.

177
00:10:44.790 --> 00:10:48.320
And the recursion happens after this,

178
00:10:48.320 --> 00:10:53.820
where we then partition the left,
and we partition the right.

179
00:10:55.880 --> 00:11:01.680
And with each recursive call, our elements
will wind up in their final place.

180
00:11:01.680 --> 00:11:04.930
Just like 5 through the partitioning.

181
00:11:04.930 --> 00:11:07.840
This is the partition step
wound up in its final place.

182
00:11:07.840 --> 00:11:13.090
So you can imagine, as this breaks
down further and further, we

183
00:11:13.090 --> 00:11:18.120
have our elements landing in
their final place, right?

184
00:11:18.120 --> 00:11:21.610
And we know it's the final place because
anything that's less than the pivot

185
00:11:23.770 --> 00:11:27.200
Will be to the left, and anything that's
greater will be to the right, always, and

186
00:11:27.200 --> 00:11:29.100
that's the final place.

187
00:11:29.100 --> 00:11:31.475
Whether or not on either side
of it is sorted at that point.

188
00:11:33.647 --> 00:11:34.249
&gt;&gt; Bianca Gandolfo: That make

189
00:11:34.249 --> 00:11:41.643
sense?
&gt;&gt; Bianca Gandolfo: Okay,

190
00:11:41.643 --> 00:11:44.013
I have a question from Miranda.
&gt;&gt; Miranda: No,

191
00:11:44.013 --> 00:11:45.737
I think I got it.
&gt;&gt; Bianca Gandolfo: You got

192
00:11:45.737 --> 00:11:46.502
it?
&gt;&gt; Miranda: Yeah.

193
00:11:46.502 --> 00:11:47.170
&gt;&gt; Bianca Gandolfo: What was the aha

194
00:11:47.170 --> 00:11:51.936
moment for you?
&gt;&gt; Speaker 3: Like, what was something

195
00:11:51.936 --> 00:11:57.378
that wasn't clear that is now more clear?
&gt;&gt; Miranda: I think

196
00:11:57.378 --> 00:12:04.309
visualizing going through the array,

197
00:12:07.182 --> 00:12:09.419
&gt;&gt; Miranda: With the same pivot location,

198
00:12:09.419 --> 00:12:12.800
I think that's where I was stuck.
&gt;&gt; Bianca Gandolfo: Yeah,

199
00:12:12.800 --> 00:12:16.340
so the fact that the pivot
location only changes when?

200
00:12:17.630 --> 00:12:21.690
When it's less than, yeah.
&gt;&gt; Miranda: Less than, yep.

201
00:12:21.690 --> 00:12:23.698
I don't think I grasped that.

202
00:12:23.698 --> 00:12:25.533
[LAUGH]
&gt;&gt; Bianca Gandolfo: Yeah, yeah and

203
00:12:25.533 --> 00:12:29.043
that's an important point,
cool it wasn't clear for

204
00:12:29.043 --> 00:12:31.871
me at the beginning while
we were tracking pivot and

205
00:12:31.871 --> 00:12:34.680
pivot locations separately.
&gt;&gt; Speaker 2: Because I didn't get that

206
00:12:34.680 --> 00:12:39.410
it was a final pivot location, I thought
that we were moving the pivot and then for

207
00:12:39.410 --> 00:12:41.570
some reason scoring
the location separately.

208
00:12:41.570 --> 00:12:45.230
Yeah yeah, I've been brainstorming on
what can we name these, the pivot and

209
00:12:45.230 --> 00:12:50.084
pivot location To make it more clear?
&gt;&gt; Miranda: I

210
00:12:50.084 --> 00:12:53.195
think maybe that's why it's confusing,
cuz they're so similar,

211
00:12:53.195 --> 00:12:55.480
I don't know.
&gt;&gt; Bianca Gandolfo: Yeah.

212
00:12:55.480 --> 00:12:56.206
&gt;&gt; Miranda: I think I got it.

213
00:12:56.206 --> 00:12:59.030
[LAUGH]
&gt;&gt; Bianca Gandolfo: Yeah.

214
00:12:59.030 --> 00:12:59.970
&gt;&gt; Speaker 2: Just calling it final

215
00:12:59.970 --> 00:13:01.810
pivot location works, I think?
&gt;&gt; Bianca Gandolfo: Yeah,

216
00:13:01.810 --> 00:13:03.600
final pivot location.

217
00:13:04.630 --> 00:13:08.349
Yeah, so my only issue with that
is that then it's kind of saying,

218
00:13:11.180 --> 00:13:13.970
maybe like potential
final tentative location,

219
00:13:13.970 --> 00:13:19.130
because its not actually final
until it's final, right?

220
00:13:19.130 --> 00:13:20.419
So, yeah I was thinking about that and

221
00:13:20.419 --> 00:13:25.206
was like that may be misleading.
&gt;&gt; Bianca Gandolfo: Potential final

222
00:13:25.206 --> 00:13:26.050
pivot location

