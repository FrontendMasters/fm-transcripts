WEBVTT

1
00:00:00.100 --> 00:00:03.260
&gt;&gt; Bianca Gandolfo: So
we need to define our classes.

2
00:00:03.260 --> 00:00:07.400
I like to think about it in terms of,
okay, so what is it?

3
00:00:08.490 --> 00:00:11.400
What does it have and
what does it do, right?

4
00:00:11.400 --> 00:00:13.430
And the keyword here is what.

5
00:00:13.430 --> 00:00:19.760
That's sort of the foundation
of object-oriented programming,

6
00:00:19.760 --> 00:00:25.120
is based on whats, versus based on like
a verb or something when we think about.

7
00:00:25.120 --> 00:00:28.264
Maybe like functional programming style,
that means anything,

8
00:00:28.264 --> 00:00:32.094
maybe you've taken the functional class
that we have here on Frontend Masters.

9
00:00:32.094 --> 00:00:33.960
So here's a what?

10
00:00:33.960 --> 00:00:36.220
Is our constructor function.

11
00:00:36.220 --> 00:00:38.272
What is this?

12
00:00:38.272 --> 00:00:39.704
It says it, it says it.

13
00:00:41.488 --> 00:00:43.599
&gt;&gt; Bianca Gandolfo: It's a building,
it's a building.

14
00:00:43.599 --> 00:00:44.935
&gt;&gt; Group: It's a building.

15
00:00:44.935 --> 00:00:47.440
[LAUGH]
&gt;&gt; Bianca Gandolfo: Thank you, good job.

16
00:00:47.440 --> 00:00:49.420
So the what, it's a building.

17
00:00:50.450 --> 00:00:51.290
What does it have?

18
00:00:52.710 --> 00:00:58.030
Floors, right, like this building
that we're in has one floor.

19
00:00:58.030 --> 00:01:00.830
Maybe you live in a building that
has multiple floors, I don't know.

20
00:01:00.830 --> 00:01:05.772
Maybe you work in a building
that has a bajillion floors.

21
00:01:05.772 --> 00:01:11.090
So that's our constructor, it's just a
function, right, so just a plain function.

22
00:01:11.090 --> 00:01:13.590
Inside, we define properties.

23
00:01:15.030 --> 00:01:20.430
Our properties have key value pairs
as an object, so we give them names.

24
00:01:20.430 --> 00:01:22.230
So the what again, is a building.

25
00:01:24.100 --> 00:01:25.552
Floors, we'll pass it in.

26
00:01:28.001 --> 00:01:28.501
&gt;&gt; Bianca Gandolfo: Cool.

27
00:01:30.720 --> 00:01:34.563
So before we jump here, so

28
00:01:34.563 --> 00:01:38.414
what happens when we say,

29
00:01:40.373 --> 00:01:45.190
&gt;&gt; Bianca Gandolfo: MyHouse, right?

30
00:01:45.190 --> 00:01:49.945
Oops, so myHouse equals new Building(3).

31
00:01:49.945 --> 00:01:52.642
This is us, creating a house.

32
00:01:52.642 --> 00:01:55.742
This is why my program is awesome,
like how easy was it building that house?

33
00:01:55.742 --> 00:02:00.371
If we were able to build houses this easy
in San Francisco, rent would not be so

34
00:02:00.371 --> 00:02:01.580
crazy.

35
00:02:01.580 --> 00:02:03.145
But anyway, we don't live.

36
00:02:03.145 --> 00:02:05.272
&gt;&gt; Group: [LAUGH]
&gt;&gt; Bianca Gandolfo: This is not

37
00:02:05.272 --> 00:02:09.924
San Francisco and this is the Internet,
and so here we are,

38
00:02:09.924 --> 00:02:13.760
with JavaScript,
making houses easy to build.

39
00:02:13.760 --> 00:02:17.085
So we have our instance of our house here,

40
00:02:17.085 --> 00:02:21.554
which is just an object that
looks something like this.

41
00:02:27.446 --> 00:02:33.479
&gt;&gt; Bianca Gandolfo: "building", floors:3.

42
00:02:33.479 --> 00:02:37.670
So we have some like, syntaxy things here.

43
00:02:37.670 --> 00:02:41.340
But all it's doing, it's just creating
an object that has two properties.

44
00:02:41.340 --> 00:02:43.010
The what and the floors, right?

45
00:02:43.010 --> 00:02:46.894
We pass in the floors here, right?

46
00:02:46.894 --> 00:02:49.806
Everyone following how this is happening?

47
00:02:51.921 --> 00:02:52.873
&gt;&gt; Bianca Gandolfo: Yeah, okay.

48
00:02:52.873 --> 00:02:54.754
Any questions about how this is happening?

49
00:02:56.413 --> 00:02:57.425
&gt;&gt; Bianca Gandolfo: Cool, so

50
00:02:57.425 --> 00:03:03.560
there is a little bit of magic
here which is my complaint.

51
00:03:03.560 --> 00:03:10.330
But anyway, this keyword,
new, does some magic.

52
00:03:10.330 --> 00:03:14.176
For better or worse, if you come from
some sort of like a Java background,

53
00:03:14.176 --> 00:03:15.810
this might feel comfortable.

54
00:03:15.810 --> 00:03:16.717
You might like that.

55
00:03:16.717 --> 00:03:21.651
But JavaScript, my opinion is bullshit,
but anyway, here we are,

56
00:03:21.651 --> 00:03:25.440
do use the keyword, new, does some magic.

57
00:03:25.440 --> 00:03:29.910
And the magic that it does, is it kinda,
does like this weird thing and

58
00:03:29.910 --> 00:03:31.550
I'll just show you.

59
00:03:31.550 --> 00:03:37.910
It kind of does this, it says,
this equals an empty object, so it creates

60
00:03:37.910 --> 00:03:41.930
this as an empty object, so that you can
add all the what and the floors on it,

61
00:03:41.930 --> 00:03:46.329
right, because you can't add properties
to something that doesn't exist.

62
00:03:47.520 --> 00:03:51.570
And then at the end, it just returns this.

63
00:03:51.570 --> 00:03:58.731
So that's what it's doing, hypothetically,
behind the scenes magic, cool.

64
00:04:01.145 --> 00:04:04.410
&gt;&gt; Bianca Gandolfo: So that's what
it's doing, recreating our house.

65
00:04:07.050 --> 00:04:10.310
And it's just an object,
there's nothing different.

66
00:04:11.320 --> 00:04:13.498
We're just using the keyword, new.

67
00:04:13.498 --> 00:04:16.879
And we have to use the keyword, this,

68
00:04:16.879 --> 00:04:21.960
in order to say what
the instance is gonna look like.

69
00:04:21.960 --> 00:04:25.328
Cool, who here has done this before?

70
00:04:26.874 --> 00:04:30.680
&gt;&gt; Bianca Gandolfo: Awesome, great.

71
00:04:32.180 --> 00:04:35.576
All right, and then, so that's the what.

72
00:04:35.576 --> 00:04:39.770
And the what it is and what it has on it.

73
00:04:39.770 --> 00:04:41.328
This is the what it does, right?

74
00:04:41.328 --> 00:04:44.250
Methods, they're gonna be functions,
again,

75
00:04:44.250 --> 00:04:48.083
some like weird stuff that happens
cuz JavaScript is just weird.

76
00:04:48.083 --> 00:04:50.801
We have this word prototype,
it's so terrible,

77
00:04:50.801 --> 00:04:54.486
they do this to us so it makes it so
hard, it makes my job really hard,

78
00:04:54.486 --> 00:04:59.145
cuz everyone's like, my God, prototype,
that means something really crazy and

79
00:04:59.145 --> 00:05:02.534
that everything is different
now because it says prototype.

80
00:05:02.534 --> 00:05:03.620
It doesn't mean anything.

81
00:05:04.710 --> 00:05:07.360
Really, it's just an object, right?

82
00:05:07.360 --> 00:05:08.680
That's why you can use this dot here.

83
00:05:08.680 --> 00:05:09.946
It's just an object.

84
00:05:09.946 --> 00:05:15.866
And it's an object, and
what it just does is it makes,

85
00:05:15.866 --> 00:05:23.350
oops sorry, makes this method
available on each instance, right?

86
00:05:23.350 --> 00:05:28.129
The instance is my house,
which is an object,

87
00:05:28.129 --> 00:05:32.426
and this is how we put on a method, right?

88
00:05:32.426 --> 00:05:37.040
And the reason we do this is because,
if we put it inside of our

89
00:05:37.040 --> 00:05:42.202
constructor function here,
then every time we call the function,

90
00:05:42.202 --> 00:05:46.750
we'd be creating a new instance
of those methods, right?

91
00:05:46.750 --> 00:05:51.345
And the point of a function is that,
we don't create a new function every time,

92
00:05:51.345 --> 00:05:53.600
we just can call it, right?

93
00:05:53.600 --> 00:05:55.760
And so, it just saves us space.

94
00:05:55.760 --> 00:06:00.760
So technically, we could say,
this.countFloors.

95
00:06:00.760 --> 00:06:06.490
We could do that, it's just not
the best practice, etc., cool.

96
00:06:08.470 --> 00:06:15.267
So our properties here go inside,
our constructor,

97
00:06:15.267 --> 00:06:19.880
our methods go on the .prototype.

98
00:06:19.880 --> 00:06:24.260
And just to clarify,
this is the constructor function name.

99
00:06:25.350 --> 00:06:31.600
Then we say, .prototype and then dot
whatever you wanna call the method.

100
00:06:31.600 --> 00:06:32.440
Yeah, okay.

101
00:06:33.650 --> 00:06:35.370
Great, any questions about this?

102
00:06:37.560 --> 00:06:41.351
&gt;&gt; Speaker 3: So, if you call countFloors
on something that's not a building,

103
00:06:41.351 --> 00:06:44.005
is there an error that
it gives you initially?

104
00:06:44.005 --> 00:06:49.581
&gt;&gt; Bianca Gandolfo: Yeah, so
you could say myHouse.countFloors.

105
00:06:49.581 --> 00:06:55.345
But I couldn't say like
whateverYeah.countFloors.

106
00:06:55.345 --> 00:06:57.090
You couldn't do that cuz it doesn't exist.

107
00:06:57.090 --> 00:07:01.990
It only is gonna exist on instances
that were created from Building.

108
00:07:01.990 --> 00:07:07.840
And that's what the prototype thing does,
&gt;&gt; Bianca Gandolfo: In a nutshell.

109
00:07:07.840 --> 00:07:11.452
&gt;&gt; Speaker 4: So we don't put the function
inside the constructor because it's

110
00:07:11.452 --> 00:07:13.396
the same function for each object?

111
00:07:13.396 --> 00:07:14.810
&gt;&gt; Bianca Gandolfo: Yeah,
yeah, yeah, yeah.

112
00:07:14.810 --> 00:07:18.600
The reason is, so here, we're just, we're
literally calling this function, right?

113
00:07:18.600 --> 00:07:23.272
And so every time we call a function,
it's gonna run the body of the function.

114
00:07:23.272 --> 00:07:27.239
And then, if we say we have like, millions
of buildings in Minneapolis, and your

115
00:07:27.239 --> 00:07:31.264
gonna create them, you don't want to have
millions of the count floors function,

116
00:07:31.264 --> 00:07:33.650
you just want one that you can use for
all of them.

117
00:07:33.650 --> 00:07:38.410
And so, back to my, like factory image,

118
00:07:38.410 --> 00:07:44.680
it's like you have like, a factory, and
it's creating your buildings, right?

119
00:07:44.680 --> 00:07:49.780
Maybe they're like a model building,
maybe different floor sizes.

120
00:07:49.780 --> 00:07:53.185
And each one has a floor,
each one has a what, yeah?

121
00:07:53.185 --> 00:07:54.660
Are we following here?

122
00:07:54.660 --> 00:07:56.007
My hand gestures.

123
00:07:56.007 --> 00:07:58.967
And then, they all have like this

124
00:07:58.967 --> 00:08:03.730
trusty telephone line up
to the countFloors method.

125
00:08:03.730 --> 00:08:07.700
There's only one, it's like in the clouds,
and it says, countFloors.

126
00:08:07.700 --> 00:08:12.220
And you all have a phone that connects,
and you just hit countFloors and

127
00:08:12.220 --> 00:08:17.200
it calls up to the cloud, and
then you say hey, can you count my floors?

128
00:08:17.200 --> 00:08:21.487
And then it goes, yeah, and
then it gives you how many floors.

129
00:08:21.487 --> 00:08:25.790
Instead of all of the countFloor
methods being in the building, right?

130
00:08:27.230 --> 00:08:30.496
And they just, can just call and
it's always the same.

131
00:08:30.496 --> 00:08:32.098
&gt;&gt; Speaker 5: Just like Random Access.

132
00:08:32.098 --> 00:08:34.842
Is that what it is?

133
00:08:34.842 --> 00:08:36.485
&gt;&gt; Bianca Gandolfo: Yeah,
I guess you could,

134
00:08:36.485 --> 00:08:41.580
I don't really think about it like that,
but maybe you could, yeah.

135
00:08:41.580 --> 00:08:44.710
So this is a pattern that we're gonna be
using for our data structures, right?

136
00:08:46.639 --> 00:08:49.755
So the what,
&gt;&gt; Bianca Gandolfo: Oops, so

137
00:08:49.755 --> 00:08:53.745
the what is probably
gonna be something like,

138
00:08:53.745 --> 00:08:58.850
what's a data structure
you've heard of before?

139
00:08:58.850 --> 00:08:59.605
&gt;&gt; Speaker 6: Tree.

140
00:08:59.605 --> 00:09:02.990
&gt;&gt; Bianca Gandolfo: You now might have,

141
00:09:02.990 --> 00:09:08.374
maybe it has apples, and then,

142
00:09:16.173 --> 00:09:18.089
&gt;&gt; Bianca Gandolfo: Right, and then for

143
00:09:18.089 --> 00:09:24.769
our prototype,
&gt;&gt; Bianca Gandolfo: Dot,

144
00:09:24.769 --> 00:09:29.520
blah blah blah.

145
00:09:29.520 --> 00:09:30.989
So this is how this is going to connect,
right?

146
00:09:30.989 --> 00:09:38.018
So we have our data structure,
we're going to put some properties on it.

147
00:09:38.018 --> 00:09:40.167
And then we're gonna add
a function to the prototype.

148
00:09:41.627 --> 00:09:42.867
This is where it all comes together.

