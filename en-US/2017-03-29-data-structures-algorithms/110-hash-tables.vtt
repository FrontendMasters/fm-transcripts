WEBVTT

1
00:00:00.000 --> 00:00:02.007
&gt;&gt; Bianca Gandolfo: Hash tables
are made up of two things,

2
00:00:02.007 --> 00:00:06.790
some things store your stuff in, right, so
data structure, and then hashing function.

3
00:00:06.790 --> 00:00:10.193
If you've done any sort of
authentication layer, whatever, for

4
00:00:10.193 --> 00:00:14.461
your company you're probably familiar
with certain kinds of hashing functions.

5
00:00:14.461 --> 00:00:16.338
Has anyone done that?
&gt;&gt; Speaker 2: Yeah.

6
00:00:16.338 --> 00:00:17.110
&gt;&gt; Bianca Gandolfo: Yeah, like login

7
00:00:17.110 --> 00:00:17.626
page, so.

8
00:00:17.626 --> 00:00:22.288
So you've probably used that before.t
If you've used a JavaScript object,

9
00:00:22.288 --> 00:00:24.510
then you have used a hash table.

10
00:00:24.510 --> 00:00:28.800
That's how JavaScript implements its
objects, as a hash table underneath.

11
00:00:28.800 --> 00:00:32.230
So, what do we know about
JavaScript objects?

12
00:00:32.230 --> 00:00:35.150
Has a key value pair, right?

13
00:00:35.150 --> 00:00:41.338
So we say, I don't know, like name,
actually you don't use name.

14
00:00:41.338 --> 00:00:46.710
User name is, what's your user name?

15
00:00:46.710 --> 00:00:50.930
Some people have a user name they use that
they really like and they wanna share.

16
00:00:52.549 --> 00:00:54.707
No?
&gt;&gt; [INAUDIBLE]

17
00:00:54.707 --> 00:00:56.540
&gt;&gt; Bianca Gandolfo: Like a user name.

18
00:00:56.540 --> 00:00:58.475
What's a famous user name?

19
00:00:58.475 --> 00:00:59.800
I don't know, anonymous.

20
00:01:01.040 --> 00:01:06.210
Anonymous user name, colon,
anonymous age, colon,

21
00:01:06.210 --> 00:01:10.943
question mark, question mark,
key value pairs.

22
00:01:10.943 --> 00:01:13.840
So we're familiar with that.

23
00:01:13.840 --> 00:01:17.564
Under the hood, there's a hashing
function that maps the key to an index.

24
00:01:17.564 --> 00:01:24.470
And this is the core of what makes
the lookup so fast for an object.

25
00:01:27.930 --> 00:01:30.340
Cuz we were talking about time complexity,
remember that?

26
00:01:30.340 --> 00:01:37.860
When I was like, accessing or saving
into an object is constant time, right?

27
00:01:37.860 --> 00:01:42.690
But if we look at for
example a linked list or a tree and

28
00:01:42.690 --> 00:01:45.530
these other data structures that we've
used that are a little more complex.

29
00:01:48.590 --> 00:01:52.310
Maybe you're wondering, how is that
even possible to be constant time?

30
00:01:52.310 --> 00:01:57.050
For it to be constant time, it has to know
immediately where to go and get that data.

31
00:01:57.050 --> 00:01:59.934
Where is it stored?
It needs to go immediately to that storage

32
00:01:59.934 --> 00:02:03.730
location somewhere,
probably in memory, in your computer.

33
00:02:03.730 --> 00:02:06.600
How does it know to get
there instantaneously

34
00:02:06.600 --> 00:02:09.590
without having to like look,
cuz we've been searching and

35
00:02:09.590 --> 00:02:13.050
sorting through things,
how does it get there, right?

36
00:02:13.050 --> 00:02:14.256
And that's where our
hashing function comes in.

37
00:02:14.256 --> 00:02:19.355
Our hashing function is going to
map the keys which are usually

38
00:02:19.355 --> 00:02:24.169
a string to some location,
right, some memory address.

39
00:02:25.780 --> 00:02:28.316
And so,
once we have that memory addressed,

40
00:02:28.316 --> 00:02:32.671
it's gonna do something mathematical
to know a location, like a distance.

41
00:02:32.671 --> 00:02:36.860
And then we can imagine a needle and
this is an oversimplification.

42
00:02:36.860 --> 00:02:40.198
But we have an input that's cat, and

43
00:02:40.198 --> 00:02:46.027
then it does some math that says
the index for cat is 4,300.

44
00:02:46.027 --> 00:02:53.162
And then it'll say, so the location is
gonna be 4,300 plus 8 plus 6 plus 0.23.

45
00:02:53.162 --> 00:02:57.557
Then it'll just move
a needle to that location in

46
00:02:57.557 --> 00:03:00.610
memory.
&gt;&gt; Bianca Gandolfo: So

47
00:03:00.610 --> 00:03:05.590
this is an oversimplification but
this is how we can sort of conceptualize

48
00:03:05.590 --> 00:03:09.623
how an object has instant look ups and
also instant saving.

49
00:03:09.623 --> 00:03:16.350
It'll just go directly there instead
of having to say is this the location?

50
00:03:16.350 --> 00:03:16.864
Is this the location?

51
00:03:16.864 --> 00:03:25.080
Is this location I'm going in circle cuz
usually we draw it out as like a disc.

52
00:03:25.080 --> 00:03:26.322
Those old record players.

53
00:03:26.322 --> 00:03:27.700
Yeah, exactly.

54
00:03:27.700 --> 00:03:31.770
So you can think of it as a record player,
and

55
00:03:31.770 --> 00:03:36.830
then if you unspin the record
player into a long strip,

56
00:03:36.830 --> 00:03:41.011
you can say each memory
slot is a centimeter or

57
00:03:41.011 --> 00:03:45.654
something, you can find
the location like that.

58
00:03:45.654 --> 00:03:48.458
But it's in a circle.

59
00:03:48.458 --> 00:03:49.800
So, other math stuff.

60
00:03:49.800 --> 00:03:52.852
But, that's the basic idea here.

61
00:03:52.852 --> 00:03:55.060
And same with an array.

62
00:03:55.060 --> 00:03:56.593
An array is easier to make that leap,
right?

63
00:03:56.593 --> 00:04:00.970
Cuz their indices are numerical and so
that kind of makes a little more sense.

64
00:04:00.970 --> 00:04:05.946
But under the hood, it's actually
also a hash table and an array.

65
00:04:05.946 --> 00:04:08.172
Because arrays are actually just objects,

66
00:04:08.172 --> 00:04:12.683
secretly.
&gt;&gt; Bianca Gandolfo: Or maybe not so

67
00:04:12.683 --> 00:04:15.760
maybe we all know that now,
I don't know, but.

68
00:04:15.760 --> 00:04:19.194
I just remember that I was
dealing with the DOM API and

69
00:04:19.194 --> 00:04:22.091
I had to iterate through
an array of inputs.

70
00:04:22.091 --> 00:04:25.091
And it was really confusing because
it looked like an array and

71
00:04:25.091 --> 00:04:27.940
then I tried to for each through it and
it wouldn't let me.

72
00:04:27.940 --> 00:04:32.426
And then I realized that it was actually
an object with indices that were the keys.

73
00:04:32.426 --> 00:04:40.680
Mm, yeah, and there is also pseudo arrays
out there like the arguments object.

74
00:04:40.680 --> 00:04:42.660
Have you guys used
arguments in a function?

75
00:04:42.660 --> 00:04:44.210
That's a pseudo array.

76
00:04:44.210 --> 00:04:48.631
You can't do a lot,
you can't slice it, for example.

77
00:04:48.631 --> 00:04:52.740
So there's all these weird fake array
things, and they're all objects.

78
00:04:52.740 --> 00:04:53.970
Even a real array.

79
00:04:53.970 --> 00:04:55.390
A real array is an object.

80
00:04:57.500 --> 00:05:00.055
Really the thing that sets it apart
is the dot length property and

81
00:05:00.055 --> 00:05:01.292
the methods that come with it.

82
00:05:01.292 --> 00:05:07.527
Anyway, the idea here is that we're
using hash tables under the hood.

83
00:05:07.527 --> 00:05:11.100
And we're gonna explore and
create our own just for fun.

84
00:05:13.790 --> 00:05:14.482
Cool, so

85
00:05:14.482 --> 00:05:20.197
the first thing we want to start with is
just talking about a hashing function.

86
00:05:20.197 --> 00:05:26.328
So a hashing function, like I said,
it takes an input of any size and

87
00:05:26.328 --> 00:05:30.203
it returns some identifier
that you can map

88
00:05:30.203 --> 00:05:34.956
backwards to it of usually
some fixed size, right?

89
00:05:34.956 --> 00:05:40.343
If we're thinking about that number
coming back as like a memory address or

90
00:05:40.343 --> 00:05:41.890
a location, right?

91
00:05:41.890 --> 00:05:45.802
It's gonna be within some range, right?

92
00:05:45.802 --> 00:05:50.327
It can't return something that's outside
of our range because then you'll be

93
00:05:50.327 --> 00:05:53.635
saving, not on your hard drive,
you'll be saving it to,

94
00:05:53.635 --> 00:05:57.578
I don't know, somewhere else on
your computer that's not useful.

95
00:05:57.578 --> 00:06:02.852
Or, what else?

96
00:06:02.852 --> 00:06:08.112
Yeah, so it's within a range if
you're hashing a password or

97
00:06:08.112 --> 00:06:12.979
you're hashing,
like GitHub will hash all your files.

98
00:06:14.070 --> 00:06:18.190
Like a whole file of whatever
length will hash into some key.

99
00:06:20.570 --> 00:06:25.370
So they could be very, very complex or
they could be really simple like my hash

100
00:06:25.370 --> 00:06:30.590
here, which is gonna return an integer
between 1 and 20 based on a string.

