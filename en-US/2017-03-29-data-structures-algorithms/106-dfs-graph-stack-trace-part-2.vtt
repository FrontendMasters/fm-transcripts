WEBVTT

1
00:00:00.330 --> 00:00:01.260
&gt;&gt; Bianca Gandolfo: Because
we're traversing,

2
00:00:01.260 --> 00:00:05.320
we are now going to put
some more on our stack.

3
00:00:06.360 --> 00:00:09.759
Our current,
&gt;&gt; Bianca Gandolfo: Where we passing or

4
00:00:09.759 --> 00:00:11.770
something.

5
00:00:11.770 --> 00:00:19.310
So our first value is neighbor, and
our visited array has two things in it.

6
00:00:23.110 --> 00:00:25.030
&gt;&gt; Bianca Gandolfo: Where did it go?

7
00:00:25.030 --> 00:00:25.640
Did I erase it?

8
00:00:28.868 --> 00:00:30.010
&gt;&gt; Bianca Gandolfo: Here it is.

9
00:00:30.010 --> 00:00:30.930
I just didn't comment it out.

10
00:00:32.480 --> 00:00:34.790
So our visited array now looks like this.

11
00:00:38.330 --> 00:00:40.389
&gt;&gt; Bianca Gandolfo: Right,
our distance is now what?

12
00:00:42.420 --> 00:00:43.410
&gt;&gt; Speaker 2: Two.

13
00:00:43.410 --> 00:00:44.265
&gt;&gt; Bianca Gandolfo: Two?
Yep, and

14
00:00:44.265 --> 00:00:48.090
we're going to run
a function on the value.

15
00:00:48.090 --> 00:00:51.310
What's the value that we just passed in?

16
00:00:56.120 --> 00:00:57.506
&gt;&gt; Bianca Gandolfo: What did we pass in?

17
00:00:57.506 --> 00:00:58.326
&gt;&gt; Speaker 3: Four.

18
00:00:58.326 --> 00:01:00.690
&gt;&gt; Bianca Gandolfo: Yep, four.

19
00:01:00.690 --> 00:01:04.840
Foo, our visited array has
some stuff in it, right?

20
00:01:04.840 --> 00:01:06.995
And then our distance of 2, right?

21
00:01:06.995 --> 00:01:11.280
1 plus 1, 2.

22
00:01:11.280 --> 00:01:19.082
Okay, so now we're going to add
our value to our visited list.

23
00:01:19.082 --> 00:01:25.745
Comma 4, true.

24
00:01:25.745 --> 00:01:30.554
And again,
we're going to loop through all of

25
00:01:30.554 --> 00:01:35.500
the values, adjacency list, array, right?

26
00:01:35.500 --> 00:01:39.311
So we go to 4, and check 5, so

27
00:01:39.311 --> 00:01:45.750
neighbor's now 5, we're going to check it.

28
00:01:45.750 --> 00:01:48.750
It doesn't exist yet in our list.

29
00:01:50.940 --> 00:01:53.206
&gt;&gt; Bianca Gandolfo: So
we're gonna skip that, and

30
00:01:53.206 --> 00:01:57.140
then we are going to keep
traversing all the way down.

31
00:02:03.323 --> 00:02:06.130
&gt;&gt; Bianca Gandolfo: Okay,
all the way down.

32
00:02:08.540 --> 00:02:10.150
So now,
I'm just gonna do this really quick.

33
00:02:12.120 --> 00:02:14.230
So we pass our visited in there.

34
00:02:16.360 --> 00:02:21.034
&gt;&gt; Bianca Gandolfo: So just so
we know, when we pass 5, we pass foo,

35
00:02:21.034 --> 00:02:23.950
we pass our object.

36
00:02:23.950 --> 00:02:27.070
&gt;&gt; Bianca Gandolfo: And
then we pass 3 as our distance.

37
00:02:27.070 --> 00:02:28.280
So our distance is now 3.

38
00:02:29.490 --> 00:02:33.280
We're console logging 5,
which is our current value.

39
00:02:33.280 --> 00:02:36.010
We're now adding 5 to our visited list,
right?

40
00:02:36.010 --> 00:02:38.715
The reason we do it after this,
is because,

41
00:02:38.715 --> 00:02:42.164
once we call the function,
we consider that visiting.

42
00:02:43.210 --> 00:02:48.640
&gt;&gt; Bianca Gandolfo: And then,
we're gonna loop through its neighbors.

43
00:02:48.640 --> 00:02:52.899
We're going to look at its first neighbor,
which is 6, has not yet

44
00:02:52.899 --> 00:02:55.760
been visited, so we're gonna call it here.

45
00:02:55.760 --> 00:03:00.335
So the neighbor, we're going to pass 6,
and we're going to pass foo,

46
00:03:00.335 --> 00:03:05.368
we're going to pass our visited object and
then our distance, which is now 4.

47
00:03:05.368 --> 00:03:09.678
And then, we're gonna go all the way,

48
00:03:09.678 --> 00:03:13.080
all the way down to the bottom.

49
00:03:15.450 --> 00:03:22.050
&gt;&gt; Bianca Gandolfo: So now, our visited
array, I mean, object, looks like this.

50
00:03:22.050 --> 00:03:24.010
Our distance is now 4.

51
00:03:24.010 --> 00:03:26.370
We're gonna console log 6.

52
00:03:26.370 --> 00:03:33.920
And now, since we ran our function,
we are going to set 6 to true, okay?

53
00:03:33.920 --> 00:03:38.778
Now we're gonna loop through
all of the nodes in 6's array,

54
00:03:38.778 --> 00:03:42.060
which is how many times are we gonna loop?

55
00:03:45.245 --> 00:03:45.810
&gt;&gt; Speaker 2: Zero?

56
00:03:45.810 --> 00:03:46.680
&gt;&gt; Bianca Gandolfo: Zero times, right?

57
00:03:46.680 --> 00:03:52.790
So we're not gonna enter into this for
each, because it's empty.

58
00:03:52.790 --> 00:03:56.604
So just like any for loop, if it's empty,
you're not going to run it.

59
00:03:58.709 --> 00:04:01.440
&gt;&gt; Bianca Gandolfo: So we find
ourselves at the end of the function.

60
00:04:01.440 --> 00:04:02.540
Since we're at the end of the function,

61
00:04:02.540 --> 00:04:04.870
it's just gonna return
out of the function.

62
00:04:06.086 --> 00:04:10.170
&gt;&gt; Bianca Gandolfo: It returns undefined,
just automatically.

63
00:04:10.170 --> 00:04:14.760
And so, once we reach the end of a
function when we're doing our stack frames

64
00:04:14.760 --> 00:04:16.420
like this, what happens?

65
00:04:17.660 --> 00:04:18.450
&gt;&gt; Speaker 3: You pop it off.

66
00:04:18.450 --> 00:04:20.030
&gt;&gt; Bianca Gandolfo: You pop
it off the stack, absolutely.

67
00:04:21.450 --> 00:04:25.350
So we're gonna pop it off,
we're gonna find ourselves here.

68
00:04:27.670 --> 00:04:30.220
&gt;&gt; Bianca Gandolfo: Still in this for
each loop, right?

69
00:04:30.220 --> 00:04:33.680
So we pass 6, right?

70
00:04:33.680 --> 00:04:35.964
And then,
we're gonna see if there is another one.

71
00:04:35.964 --> 00:04:39.330
And since there isn't,
we have no more things to loop.

72
00:04:39.330 --> 00:04:43.160
So we,
&gt;&gt; What do we do when we are done with

73
00:04:43.160 --> 00:04:44.961
the function?

74
00:04:44.961 --> 00:04:45.593
&gt;&gt; Speaker 2: Pop it off.

75
00:04:45.593 --> 00:04:50.253
&gt;&gt; Bianca Gandolfo: Pop it off,
yeah, pop it off.

76
00:04:52.230 --> 00:04:56.490
&gt;&gt; Bianca Gandolfo: And notice we popped
off 5, we popped off 6, we popped off 5.

77
00:04:56.490 --> 00:04:59.390
Here we are, popping off 4, right?

78
00:04:59.390 --> 00:05:03.134
And the reason we're
popping it off is because,

79
00:05:03.134 --> 00:05:08.720
there's no more neighbors,
not because of the visited thing, right?

80
00:05:08.720 --> 00:05:12.462
We have, we're not going back up here and
checking, if it's been visited or

81
00:05:12.462 --> 00:05:14.720
actually it's in here
where we checked that.

82
00:05:16.090 --> 00:05:22.776
So we pop off 4, and then again,
we pop off 2, that's where we're at.

83
00:05:26.420 --> 00:05:31.030
&gt;&gt; Bianca Gandolfo: Then we're gonna come
back into 1, right, our value is 1 here.

84
00:05:33.480 --> 00:05:35.620
&gt;&gt; Bianca Gandolfo: And
we have one more loop through.

85
00:05:35.620 --> 00:05:39.450
So we loop through it once, then that's
how we went through all of that recursion.

86
00:05:39.450 --> 00:05:45.780
And now we're gonna check its
second neighbor, which is 3.

87
00:05:45.780 --> 00:05:50.307
So here, we're gonna check
if our visited object and

88
00:05:50.307 --> 00:05:55.435
also, just note that our object is,
when we pass it around,

89
00:05:55.435 --> 00:05:59.660
we're actually doing work
on the same object, so

90
00:05:59.660 --> 00:06:06.060
this object in here still has the things,
all of the values in it.

91
00:06:06.060 --> 00:06:07.270
What was it?

92
00:06:07.270 --> 00:06:09.140
We had 2, 4, 5, 6.

93
00:06:12.454 --> 00:06:14.090
&gt;&gt; Bianca Gandolfo: So just remember that.

94
00:06:18.140 --> 00:06:19.190
&gt;&gt; Bianca Gandolfo: Where are we?

95
00:06:19.190 --> 00:06:19.850
Here we are.
So

96
00:06:19.850 --> 00:06:25.900
we're going to check if 3 is in our
visited object, which is, is not.

97
00:06:27.450 --> 00:06:28.868
So then, we're gonna traverse again.

98
00:06:33.550 --> 00:06:37.017
&gt;&gt; Bianca Gandolfo: We are passing here 3,
again we're still passing foo,

99
00:06:37.017 --> 00:06:39.120
we're still passing all of this.

100
00:06:40.230 --> 00:06:41.074
Actually, it also has 1 in it.

101
00:06:43.750 --> 00:06:47.795
&gt;&gt; Bianca Gandolfo: Passing all of this,
and then the depth plus 1,

102
00:06:47.795 --> 00:06:50.980
there is still 1, right?

103
00:06:50.980 --> 00:06:54.480
Cuz the depth here,
even though we're passing a distance,

104
00:06:54.480 --> 00:06:59.650
because distance is a primitive value, it
doesn't get past around like the object.

105
00:06:59.650 --> 00:07:03.970
So we're doing work on, the number
is gonna change in each stalk frame,

106
00:07:03.970 --> 00:07:05.350
but the object is gonna stay the same.

107
00:07:07.960 --> 00:07:09.903
&gt;&gt; Bianca Gandolfo: Cool?

108
00:07:09.903 --> 00:07:11.160
Are we okay with that?

109
00:07:11.160 --> 00:07:13.128
&gt;&gt; Speaker 2: So
the depth is from the initial value?

110
00:07:13.128 --> 00:07:14.347
&gt;&gt; Bianca Gandolfo: Yeah, yeah.

111
00:07:14.347 --> 00:07:19.189
And if we wanted it to not do that,
you could potentially

112
00:07:19.189 --> 00:07:24.030
save it in an object and
then make sure that you're using

113
00:07:24.030 --> 00:07:28.990
the same object throughout,
and then you could save it.

114
00:07:28.990 --> 00:07:31.720
But in this case, we don't wanna do that.

115
00:07:31.720 --> 00:07:35.945
And it make sense for
us to just use a number.

116
00:07:35.945 --> 00:07:41.355
Okay, so recursion.

117
00:07:41.355 --> 00:07:43.640
No, recursion.

118
00:07:43.640 --> 00:07:44.770
So we're gonna call this on 3.

119
00:07:47.630 --> 00:07:51.520
&gt;&gt; Bianca Gandolfo: This is still
the same, our distance is now 1.

120
00:07:51.520 --> 00:07:52.710
We're gonna console log our value,
which is 3.

121
00:07:52.710 --> 00:07:58.450
Now, we're gonna set this up,
we're gonna add 3 to it.

122
00:08:02.960 --> 00:08:05.913
&gt;&gt; Bianca Gandolfo: Right, and
these all have true next to them,

123
00:08:05.913 --> 00:08:09.030
I'm just writing it shorter,
so we can fit it.

124
00:08:10.140 --> 00:08:17.269
So then, we go to 3 and
we're gonna loop through its array.

125
00:08:17.269 --> 00:08:18.797
All right, so first,

126
00:08:18.797 --> 00:08:23.555
we're gonna see if the neighbor has
been visited right, which is 4.

127
00:08:25.510 --> 00:08:30.470
So we look up visited, visited,
I can spell sometimes.

128
00:08:30.470 --> 00:08:37.000
And we're gonna pass 4, and
we're gonna do a lookup on this object.

129
00:08:37.000 --> 00:08:37.810
What is it gonna return?

130
00:08:40.880 --> 00:08:42.967
&gt;&gt; Bianca Gandolfo: For 4?

131
00:08:42.967 --> 00:08:45.150
&gt;&gt; Speaker 2: True.

132
00:08:45.150 --> 00:08:47.630
&gt;&gt; Bianca Gandolfo: True, yeah.

133
00:08:47.630 --> 00:08:49.150
So all of them are set here to true.

134
00:08:51.000 --> 00:08:54.080
&gt;&gt; Bianca Gandolfo: So
we have 4 in our breadcrumbs.

135
00:08:54.080 --> 00:08:55.670
So this returns true, so
we're just gonna return.

136
00:08:55.670 --> 00:09:01.464
&gt;&gt; Bianca Gandolfo: And since there's
no other, nothing else in our array,

137
00:09:01.464 --> 00:09:07.150
we're just gonna return out
of this entire recursion.

138
00:09:08.870 --> 00:09:15.093
&gt;&gt; Bianca Gandolfo: And then,
this is done too, there's nothing else.

139
00:09:16.146 --> 00:09:18.966
&gt;&gt; Bianca Gandolfo: Then we are done.

140
00:09:18.966 --> 00:09:22.380
&gt;&gt; Bianca Gandolfo: Depth first search,
with a graph.

