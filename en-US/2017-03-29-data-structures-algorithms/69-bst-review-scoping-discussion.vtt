WEBVTT

1
00:00:00.170 --> 00:00:04.833
&gt;&gt; Bianca Gandolfo: So before we took
the break, we went through the insertion

2
00:00:04.833 --> 00:00:08.940
procedure using our
four-binary-search tree.

3
00:00:08.940 --> 00:00:10.650
Any questions about that?

4
00:00:10.650 --> 00:00:14.507
Can we get a chance to
meditate on how we do that?

5
00:00:15.648 --> 00:00:20.815
&gt;&gt; Bianca Gandolfo: Yeah,
how we was there sort of

6
00:00:20.815 --> 00:00:26.200
an ha moment that happened?

7
00:00:28.020 --> 00:00:30.750
As we went through this, some of you
said that you only got through some of

8
00:00:30.750 --> 00:00:32.880
the pseudocode and
didn't get to the code part.

9
00:00:34.110 --> 00:00:41.920
Do you feel like you'd be able to take
this to the next step, at this point?

10
00:00:41.920 --> 00:00:44.819
It's just a feeling,
I'm not gonna ask you to prove it to me.

11
00:00:46.300 --> 00:00:47.540
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Bianca Gandolfo: Yeah?

12
00:00:48.650 --> 00:00:52.562
What do you think is the most
confusing part of this algorithm for

13
00:00:52.562 --> 00:00:56.266
people who just saw it for
the first time, hypothetically?

14
00:00:56.266 --> 00:01:02.230
&gt;&gt; Speaker 2: Calling insert(value) on
this,left, I just missed that part.

15
00:01:02.230 --> 00:01:03.891
I knew it was supposed to be recursive,
but

16
00:01:03.891 --> 00:01:06.070
I couldn't figure out where
to put the recursive part.

17
00:01:06.070 --> 00:01:08.804
&gt;&gt; Bianca Gandolfo: Yeah, so you knew it
was recursive but you didn't know where.

18
00:01:08.804 --> 00:01:09.724
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Bianca Gandolfo: Why did you know it

19
00:01:09.724 --> 00:01:10.820
was recursive?

20
00:01:10.820 --> 00:01:14.060
&gt;&gt; Speaker 2: Well, cuz I knew I had to
keep like, coming back and looking again.

21
00:01:14.060 --> 00:01:17.637
&gt;&gt; Bianca Gandolfo: Yeah, so that like
going deeper into the data structure,

22
00:01:17.637 --> 00:01:20.380
to you is like okay, that's recursion.

23
00:01:20.380 --> 00:01:23.591
&gt;&gt; Speaker 2: But I wasn't sure how to get
back without referencing something, but

24
00:01:23.591 --> 00:01:24.470
that makes sense.

25
00:01:24.470 --> 00:01:28.390
&gt;&gt; Bianca Gandolfo: Yeah, cool, got it.

26
00:01:28.390 --> 00:01:33.530
So the recursive and then how do
we even get to that part, right?

27
00:01:33.530 --> 00:01:36.801
Like how do you get to current's left, so

28
00:01:36.801 --> 00:01:40.674
that in the next recursive
call it's the child?

29
00:01:40.674 --> 00:01:45.456
And that's when we did this.left.insert,

30
00:01:45.456 --> 00:01:48.889
and we talked about, excuse me,

31
00:01:48.889 --> 00:01:53.694
we talked about how-
&gt;&gt; Bianca Gandolfo: The key

32
00:01:53.694 --> 00:01:56.380
word this is defined at call time.

33
00:01:56.380 --> 00:02:01.865
And whatever this evaluates
to is gonna be the node

34
00:02:01.865 --> 00:02:08.278
that is gonna be referenced in this,
inside of this call.

35
00:02:08.278 --> 00:02:16.050
Can someone re-explain to me what
I just said in there own words,

36
00:02:16.050 --> 00:02:20.020
or in my words, if it's easier?

37
00:02:22.870 --> 00:02:24.230
&gt;&gt; Bianca Gandolfo: If
you can remember them.

38
00:02:25.980 --> 00:02:31.729
Can binary search your memory for

39
00:02:31.729 --> 00:02:34.810
what I just said.

40
00:02:39.300 --> 00:02:42.352
&gt;&gt; Bianca Gandolfo: Or, the other option
is you can ask a question about a part

41
00:02:42.352 --> 00:02:43.952
that you don't understand.

42
00:02:43.952 --> 00:02:45.582
&gt;&gt; Speaker 2: What did you just say?

43
00:02:45.582 --> 00:02:48.030
&gt;&gt; Bianca Gandolfo: [LAUGH]
&gt;&gt; Speaker 2: That was my question.

44
00:02:48.030 --> 00:02:49.830
&gt;&gt; Bianca Gandolfo: Yeah,
so I was just saying.

45
00:02:49.830 --> 00:02:55.071
So how do we get to
the next recursion call,

46
00:02:55.071 --> 00:02:59.590
where the current is the next child?

47
00:03:00.640 --> 00:03:06.177
How do we do that?
How do we know that we did that?

48
00:03:06.177 --> 00:03:08.441
&gt;&gt; Speaker 2: How do we
know that we did that?

49
00:03:08.441 --> 00:03:10.778
&gt;&gt; Bianca Gandolfo: Yeah,
how do we know that we did that?

50
00:03:10.778 --> 00:03:14.549
And this.left is now the left of 7 and
not 11.

51
00:03:15.839 --> 00:03:18.130
&gt;&gt; Bianca Gandolfo: And
how does it all work together?

52
00:03:19.470 --> 00:03:24.242
&gt;&gt; Speaker 2: Well you're passing
the value again to the same method.

53
00:03:24.242 --> 00:03:26.120
&gt;&gt; Bianca Gandolfo: Mm-hm,
but what's the value?

54
00:03:29.234 --> 00:03:33.220
&gt;&gt; Bianca Gandolfo: The value is five.

55
00:03:33.220 --> 00:03:34.382
&gt;&gt; Speaker 2: Right up, there it is, yes.

56
00:03:34.382 --> 00:03:35.564
&gt;&gt; Bianca Gandolfo: Mm-hm.

57
00:03:36.971 --> 00:03:40.507
&gt;&gt; Bianca Gandolfo: So we're passing
the 5, so we're good about that,

58
00:03:40.507 --> 00:03:44.682
cuz that's pretty clear when we
call a function with a number.

59
00:03:44.682 --> 00:03:49.205
And there's a parameter, that parameter
is gonna contain that value, yeah?

60
00:03:49.205 --> 00:03:50.050
&gt;&gt; Speaker 2: Mm-hm.

61
00:03:50.050 --> 00:03:53.626
&gt;&gt; Bianca Gandolfo: But something that's
a little more difficult is when we have

62
00:03:53.626 --> 00:03:55.950
the keyword this inside of a function.

63
00:03:57.203 --> 00:04:01.260
&gt;&gt; Bianca Gandolfo: And
we want it to point to the child,

64
00:04:03.630 --> 00:04:05.110
&gt;&gt; Bianca Gandolfo: Of 11, right?

65
00:04:06.960 --> 00:04:09.424
&gt;&gt; Bianca Gandolfo: We did that,
cuz we went through and it's working,

66
00:04:09.424 --> 00:04:11.890
it appears to be working,
our pseudocode, right?

67
00:04:11.890 --> 00:04:14.879
We can't run it and test it,
except for with our brains but

68
00:04:14.879 --> 00:04:16.538
it appears to work pretty well.

69
00:04:19.370 --> 00:04:24.184
&gt;&gt; Bianca Gandolfo: But how do we know,
&gt;&gt; Bianca Gandolfo: That we went in

70
00:04:24.184 --> 00:04:25.710
another level?

71
00:04:29.560 --> 00:04:32.512
&gt;&gt; Bianca Gandolfo: The first step would
be like where do you suspect we're even

72
00:04:32.512 --> 00:04:33.170
doing that?

73
00:04:33.170 --> 00:04:36.409
We can start there.

74
00:04:36.409 --> 00:04:38.890
&gt;&gt; Speaker 2: Where we
call the method again?

75
00:04:38.890 --> 00:04:43.410
&gt;&gt; Bianca Gandolfo: Yeah, so we suspect
here on line four that this is where we

76
00:04:43.410 --> 00:04:48.410
are digging deeper,
it's a couple things that suggest that.

77
00:04:49.630 --> 00:04:54.618
We have our recursive call, we know that
with our recursion we're gonna be digging

78
00:04:54.618 --> 00:04:57.125
deeper into our data structure, right.

79
00:04:57.125 --> 00:05:01.843
And then, this.left seems useful

80
00:05:01.843 --> 00:05:06.880
because 11 is our current, right.

81
00:05:06.880 --> 00:05:08.090
11 is this.

82
00:05:09.980 --> 00:05:13.120
&gt;&gt; Bianca Gandolfo: Right,
here's 11, and its left is 7.

83
00:05:13.120 --> 00:05:16.680
And that's where we want to go, right.

84
00:05:16.680 --> 00:05:20.690
So those pieces fit together,
it seems right.

85
00:05:20.690 --> 00:05:28.400
This start left, great that's gonna be 7,
we wanna insert 5.

86
00:05:30.063 --> 00:05:31.340
&gt;&gt; Bianca Gandolfo: Yes?

87
00:05:31.340 --> 00:05:32.585
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Bianca Gandolfo: We jump in and

88
00:05:32.585 --> 00:05:39.770
that is how we get this next thing in the
stack and we say 5 is less than current.

89
00:05:41.920 --> 00:05:44.680
And we want current to be 7,
and we think it is.

90
00:05:44.680 --> 00:05:49.270
But my question is how do we know it is,
or why do you know it is?

91
00:05:53.240 --> 00:05:57.030
&gt;&gt; Speaker 2: What does
the computer know it is?

92
00:05:57.030 --> 00:05:58.180
&gt;&gt; Bianca Gandolfo: Yeah, we're running
the code right now in our brain.

93
00:05:58.180 --> 00:06:01.572
But yeah,
how does your execution context know,

94
00:06:01.572 --> 00:06:05.469
your browser,
whatever environment it's running in.

95
00:06:07.246 --> 00:06:13.860
&gt;&gt; Speaker 2: Cuz this changes
to the next binary surety so

96
00:06:13.860 --> 00:06:20.130
when you call the insert of this dot left.

97
00:06:20.130 --> 00:06:21.741
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; Speaker 2: And you could think of

98
00:06:21.741 --> 00:06:25.660
it as your inside left,
which is a new binary surety.

99
00:06:25.660 --> 00:06:30.900
And so the value that you had
before is no longer in scope.

100
00:06:30.900 --> 00:06:33.410
&gt;&gt; Bianca Gandolfo: Yeah, yeah, exactly.

101
00:06:33.410 --> 00:06:38.110
So it all has to do with this line here,
where we said this.left, right?

102
00:06:38.110 --> 00:06:42.280
We had this rule where,
when we call a function.

103
00:06:44.500 --> 00:06:49.846
&gt;&gt; Bianca Gandolfo: Whatever
to the left of that call

104
00:06:49.846 --> 00:06:55.790
is what this is inside of that call.

105
00:06:56.870 --> 00:07:00.980
Does that make sense, do you want me
to say it one more time, or we got it?

106
00:07:00.980 --> 00:07:01.673
One more time?
Or we got it?

107
00:07:01.673 --> 00:07:06.632
One more time?
Okay, so, when we call a function that's

108
00:07:06.632 --> 00:07:10.250
when we define the keyword this.

109
00:07:10.250 --> 00:07:13.112
Without calling a function,
keyword this means nothing to us,

110
00:07:13.112 --> 00:07:15.082
to anything to anybody, it's undefined.

111
00:07:15.082 --> 00:07:20.660
The soonest we call a function,
we can give this value.

112
00:07:20.660 --> 00:07:22.860
And one way of doing that,

113
00:07:22.860 --> 00:07:28.960
is it will automatically assign
the object to the left of that function.

114
00:07:28.960 --> 00:07:35.620
So this is the function,
this is the object to the left, right?

115
00:07:35.620 --> 00:07:39.921
This dot left evaluates,
right, so here's this,

116
00:07:39.921 --> 00:07:44.170
here's this dot left,
evaluates this object 7.

117
00:07:44.170 --> 00:07:47.358
And that's the rule for,
or one of the rules for

118
00:07:47.358 --> 00:07:49.920
the keyword this and how we define it.

119
00:07:49.920 --> 00:07:55.145
Another one that we used before, right,
is when we used the keyword new.

120
00:07:55.145 --> 00:07:56.970
We did some magic around
assigning values to this, right?

121
00:07:56.970 --> 00:08:01.270
Remember I was like, underneath the hood
it's gonna create this empty object.

122
00:08:01.270 --> 00:08:04.240
And then it's gonna return this at
the end, which is an object, right?

123
00:08:04.240 --> 00:08:08.144
So that's another way
to find this just like

124
00:08:08.144 --> 00:08:13.010
instantiating a new object,
and this is another way.

125
00:08:13.010 --> 00:08:17.255
Does anyone know any other ways to define
this in the body of a function that

126
00:08:17.255 --> 00:08:18.630
they've used before?

127
00:08:26.751 --> 00:08:27.784
&gt;&gt; Bianca Gandolfo: No?

128
00:08:27.784 --> 00:08:29.330
&gt;&gt; Speaker 3: Sorry,
could you say that again?

129
00:08:29.330 --> 00:08:31.895
&gt;&gt; Bianca Gandolfo: What's another
way that we can give this a value?

130
00:08:31.895 --> 00:08:35.260
&gt;&gt; Speaker 3: We use new.

131
00:08:35.260 --> 00:08:39.170
&gt;&gt; Bianca Gandolfo: Yeah, so
we use new when we're constructing.

132
00:08:39.170 --> 00:08:41.829
We give this a value, we create this.

133
00:08:43.920 --> 00:08:48.583
And this example we're doing
what I call left of the dot,

134
00:08:48.583 --> 00:08:51.700
is another way, so that's two ways.

135
00:08:51.700 --> 00:08:55.920
And I'm saying there's another way,
has anyone tried anything?

136
00:08:55.920 --> 00:08:58.228
Yeah?
&gt;&gt; Speaker 3: I got an answer online from

137
00:08:58.228 --> 00:08:58.950
Oscar.

138
00:08:58.950 --> 00:09:04.546
This .left is the object invoking insert,
so this equals this.left?

139
00:09:04.546 --> 00:09:09.935
&gt;&gt; Bianca Gandolfo: Yep,
that's totally true Oscar, wxactly.

140
00:09:09.935 --> 00:09:12.320
What's another way we can
say what this is though?

141
00:09:14.410 --> 00:09:16.525
This is gonna help you
in your JavaScript life.

142
00:09:16.525 --> 00:09:19.950
&gt;&gt; [INAUDIBLE],
&gt;&gt; Bianca Gandolfo: Yeah, so

143
00:09:19.950 --> 00:09:22.830
before you call a function,
what is this equal?

144
00:09:24.358 --> 00:09:27.372
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Nothing.

145
00:09:28.890 --> 00:09:30.640
&gt;&gt; Bianca Gandolfo: Does that make sense?

146
00:09:30.640 --> 00:09:34.455
This is like a pronoun, and you can put
a value in there, it's usually an object,

147
00:09:34.455 --> 00:09:35.800
you wanna it to be an object.

148
00:09:35.800 --> 00:09:39.270
&gt;&gt; Speaker 2: Is that the page
outside of the function?

149
00:09:39.270 --> 00:09:40.902
&gt;&gt; Bianca Gandolfo: The page?
&gt;&gt; Speaker 2: Yeah, is that,

150
00:09:40.902 --> 00:09:44.550
if you call this just in the global scope,
isn't it?

151
00:09:45.910 --> 00:09:47.547
&gt;&gt; Bianca Gandolfo: Yeah, if you just
called this in the global scope,

152
00:09:47.547 --> 00:09:48.470
it's just gonna be window.

153
00:09:48.470 --> 00:09:49.134
&gt;&gt; Speaker 2: Window?
&gt;&gt; Bianca Gandolfo: Yeah,

154
00:09:49.134 --> 00:09:51.000
it's gonna be kind of useless.

155
00:09:51.000 --> 00:09:54.390
So that's probably an error in
the language, it's not useful.

156
00:09:54.390 --> 00:09:58.660
But yeah, that's one way, we could just
call it and see what it's gonna look, and

157
00:09:58.660 --> 00:10:03.608
it's gonna be your window object
&gt;&gt; Bianca Gandolfo: So

158
00:10:03.608 --> 00:10:05.730
what I'm looking for is call or apply.

159
00:10:05.730 --> 00:10:06.390
Have you guys used call and apply?

160
00:10:06.390 --> 00:10:07.890
&gt;&gt; Speaker 3: Yeah.

161
00:10:07.890 --> 00:10:08.458
&gt;&gt; Bianca Gandolfo: Yeah, so

162
00:10:08.458 --> 00:10:12.300
call and apply is a function where
you can assign a value of this.

163
00:10:12.300 --> 00:10:15.660
You can choose it, right?

164
00:10:15.660 --> 00:10:20.567
For this one, you have some choice, but
it's a little constrained the keyword new,

165
00:10:20.567 --> 00:10:21.603
even more rules.

166
00:10:21.603 --> 00:10:25.741
Using call or apply,
you can basically hijack any method and

167
00:10:25.741 --> 00:10:29.160
tell it specifically what
you want this to equal.

168
00:10:29.160 --> 00:10:31.332
And so
I encourage you to research that and

169
00:10:31.332 --> 00:10:35.250
that will help you when you're doing
any sort of object oriented program.

170
00:10:36.260 --> 00:10:38.267
Or if you just don't
wanna lose your contacts,

171
00:10:38.267 --> 00:10:39.980
cuz you might lose the contacts of this.

172
00:10:39.980 --> 00:10:44.166
That happens a lot, you'll see this
exact stuff like that call and

173
00:10:44.166 --> 00:10:46.050
apply can help you with that.

174
00:10:46.050 --> 00:10:49.471
So anyway-
&gt;&gt; Speaker 3: Yeah,

175
00:10:49.471 --> 00:10:53.200
scoping in JavaScript is
super tricky sometimes.

176
00:10:53.200 --> 00:10:53.961
&gt;&gt; Bianca Gandolfo: Mm-hm, yep.
&gt;&gt; Speaker 2: Are you gonna

177
00:10:53.961 --> 00:10:55.730
show us an example of call and apply?

178
00:10:55.730 --> 00:10:57.390
&gt;&gt; Bianca Gandolfo: Nope.
&gt;&gt; Speaker 2: Okay, I'll just do it.

179
00:10:57.390 --> 00:11:00.690
&gt;&gt; Bianca Gandolfo: Yeah,
well maybe if I have a second later.

180
00:11:00.690 --> 00:11:04.870
It's not the most important thing,
it's just a little tidbit about.

181
00:11:04.870 --> 00:11:09.660
If you wanted to make sure you knew
specifically what this was you

182
00:11:09.660 --> 00:11:11.645
could use call and apply.

183
00:11:11.645 --> 00:11:12.290
&gt;&gt; Speaker 2: OK.

184
00:11:12.290 --> 00:11:15.290
&gt;&gt; Speaker 3: So that's interesting,
so you would pass this to call?

185
00:11:15.290 --> 00:11:18.897
&gt;&gt; Bianca Gandolfo: You would pass
whatever you want this to be.

186
00:11:18.897 --> 00:11:19.970
&gt;&gt; Speaker 3: Right.
&gt;&gt; Bianca Gandolfo: Right, which is 7.

187
00:11:19.970 --> 00:11:20.560
&gt;&gt; Speaker 3: Yep.

188
00:11:20.560 --> 00:11:21.730
&gt;&gt; Bianca Gandolfo: Is a way.

189
00:11:21.730 --> 00:11:24.887
We don't need to do it because
this works just fine for us, but

190
00:11:24.887 --> 00:11:27.700
that's just another way
that you could do it.

191
00:11:27.700 --> 00:11:30.470
And you'll probably see it
in some of our solutions.

192
00:11:30.470 --> 00:11:33.399
&gt;&gt; Speaker 3: You've got
a couple questions from online.

193
00:11:33.399 --> 00:11:34.466
&gt;&gt; Bianca Gandolfo: Sure.
&gt;&gt; Speaker 3: One from Tim A,

194
00:11:34.466 --> 00:11:36.350
does bind do the same thing?

195
00:11:38.360 --> 00:11:43.000
&gt;&gt; Bianca Gandolfo: Yeah, bind does
something a little bit different.

196
00:11:43.000 --> 00:11:47.830
So call, apply, and
bind are all methods on functions, right.

197
00:11:47.830 --> 00:11:52.620
So we have our array methods, push and
pop, that go to arrays, call, apply,

198
00:11:52.620 --> 00:11:54.970
and bind go to functions.

199
00:11:54.970 --> 00:11:59.838
And the main difference between
from bind versus call and apply,

200
00:11:59.838 --> 00:12:03.920
is bind is just going to
return an uninvoked function.

201
00:12:03.920 --> 00:12:07.291
So the function has not been called,

202
00:12:07.291 --> 00:12:11.980
the function just has
the keyword this bound to it.

203
00:12:11.980 --> 00:12:15.080
I guess maybe that's
why they call it bind.

204
00:12:15.080 --> 00:12:18.490
And then call and
apply will actually invoke the function.

205
00:12:18.490 --> 00:12:22.754
And all of this is covered in great
detail in Advanced JavaScript on

206
00:12:22.754 --> 00:12:24.844
Frontend Masters, as well as.

207
00:12:24.844 --> 00:12:25.362
&gt;&gt; Speaker 3: Mm-hm.
&gt;&gt; Speaker 2: I believe

208
00:12:25.362 --> 00:12:30.000
your fundamentals to functional java
script course accompanied with as well.

209
00:12:30.000 --> 00:12:30.921
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 2: And advanced

210
00:12:30.921 --> 00:12:32.190
GS fundamentals.

211
00:12:32.190 --> 00:12:35.620
So three or
four courses all covered called bind.

212
00:12:35.620 --> 00:12:37.580
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 2: On fronted master.

213
00:12:37.580 --> 00:12:38.527
&gt;&gt; Bianca Gandolfo: It's a good one,

214
00:12:38.527 --> 00:12:41.820
it's also a common java script
trivia question you'll get.

215
00:12:41.820 --> 00:12:44.665
If you're interviewing for
java script positions people will ask you.

216
00:12:44.665 --> 00:12:46.198
How does call-in apply work?

217
00:12:46.198 --> 00:12:47.998
So it's worth looking into.

218
00:12:50.820 --> 00:12:54.487
&gt;&gt; Bianca Gandolfo: In
a scale of one to five,

219
00:12:54.487 --> 00:12:59.906
how comfortable are we about getting

220
00:12:59.906 --> 00:13:05.700
to seven from eleven using recursion?

221
00:13:05.700 --> 00:13:08.058
So like, on, I'm scared,
alone in the dark.

222
00:13:08.058 --> 00:13:14.380
Three, maybe I have a flashlight
somewhere in my pocket.

223
00:13:14.380 --> 00:13:16.705
Five, is I am the spotlight and
I'm leading the way.

224
00:13:16.705 --> 00:13:20.365
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Bianca Gandolfo: So

225
00:13:20.365 --> 00:13:23.465
I need a full participation.

226
00:13:23.465 --> 00:13:24.970
&gt;&gt; Speaker 2: Four.

227
00:13:24.970 --> 00:13:26.010
&gt;&gt; Bianca Gandolfo: Four?

228
00:13:26.010 --> 00:13:29.520
4, 5, 4, what about you?

229
00:13:29.520 --> 00:13:32.812
3, cool, do you have a question?

230
00:13:32.812 --> 00:13:37.068
&gt;&gt; Speaker 4: Yeah,
my question is about the insert.

231
00:13:37.068 --> 00:13:39.841
&gt;&gt; Bianca Gandolfo: Mm-hm.

232
00:13:39.841 --> 00:13:48.060
&gt;&gt; Speaker 4: So, is JavaScript
tied in up on this insert function?

233
00:13:48.060 --> 00:13:50.790
&gt;&gt; Bianca Gandolfo: Is JavaScript
assigning this for us?

234
00:13:50.790 --> 00:13:54.293
&gt;&gt; Speaker 4: And just inserting it at-
&gt;&gt; Bianca Gandolfo: Insert is,

235
00:13:54.293 --> 00:13:57.370
we're defining insert, that's us.

236
00:13:57.370 --> 00:13:59.330
&gt;&gt; Speaker 4: How we
have to define insert?

237
00:13:59.330 --> 00:14:01.210
&gt;&gt; Bianca Gandolfo: Yeah, so
that's what the pseudocode is.

238
00:14:01.210 --> 00:14:03.790
The pseudocode's actually the insert code.

239
00:14:03.790 --> 00:14:07.112
So this is the recursive call, yeah.

240
00:14:07.112 --> 00:14:13.790
Well, all right, so
those of you who had a 4.

241
00:14:13.790 --> 00:14:16.260
What's that tinge of doubt?

242
00:14:16.260 --> 00:14:19.121
Is that like a confidence thing or

243
00:14:19.121 --> 00:14:24.440
is there a small gap that I can
identify and bring to the table?

244
00:14:24.440 --> 00:14:26.760
&gt;&gt; Speaker 3: I just kind of haven't
actually implemented it yet.

245
00:14:26.760 --> 00:14:27.950
&gt;&gt; Bianca Gandolfo: Yeah, okay.

246
00:14:27.950 --> 00:14:30.930
So maybe you get to the five,
but you actually coded it out.

247
00:14:30.930 --> 00:14:33.705
&gt;&gt; Speaker 3: Yeah, but actually I feel
like I understand the implementation.

248
00:14:33.705 --> 00:14:34.650
&gt;&gt; Bianca Gandolfo: Cool.

249
00:14:34.650 --> 00:14:36.790
&gt;&gt; Speaker 3: Just haven't actually gone
through the motion of making it work yet.

250
00:14:36.790 --> 00:14:41.047
&gt;&gt; Bianca Gandolfo: Cool,
no worries, all right.

