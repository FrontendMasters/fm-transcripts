WEBVTT

1
00:00:00.290 --> 00:00:02.730
&gt;&gt; Speaker 1: Actually I have
a question about that though.

2
00:00:02.730 --> 00:00:05.363
You're going right,
then you need to go left again.

3
00:00:05.363 --> 00:00:06.645
&gt;&gt; Bianca Gandolfo: Yep, cuz you're gonna,

4
00:00:06.645 --> 00:00:10.783
so once you traverse, what happens is,
it's gonna call this whole thing again, so

5
00:00:10.783 --> 00:00:12.718
it's gonna go both left,-
&gt;&gt; Speaker 1: Right, okay.

6
00:00:12.718 --> 00:00:13.394
&gt;&gt; Bianca Gandolfo: And right.

7
00:00:13.394 --> 00:00:15.805
&gt;&gt; Speaker 1: Yeah.

8
00:00:15.805 --> 00:00:16.921
&gt;&gt; Bianca Gandolfo: Just at 7,

9
00:00:16.921 --> 00:00:20.719
it's not gonna go left anymore from 7,

10
00:00:20.719 --> 00:00:23.669
cuz we already did that.
&gt;&gt; Speaker 1: Yeah, at that point.

11
00:00:23.669 --> 00:00:24.661
&gt;&gt; Bianca Gandolfo: It's only gonna go

12
00:00:24.661 --> 00:00:25.880
to the right.
&gt;&gt; Speaker 1: Okay.

13
00:00:25.880 --> 00:00:27.570
&gt;&gt; Speaker 3: At that point we go to

14
00:00:27.570 --> 00:00:29.090
the right.

15
00:00:29.090 --> 00:00:31.745
We get nine, right?
&gt;&gt; Speaker 1: Mm-hm.

16
00:00:31.745 --> 00:00:33.496
&gt;&gt; Speaker 3: And then how do we go-

17
00:00:33.496 --> 00:00:38.330
&gt;&gt; Bianca Gandolfo: Back to 11?

18
00:00:38.330 --> 00:00:39.630
&gt;&gt; Speaker 3: Just after nine,

19
00:00:39.630 --> 00:00:42.042
we have to go to eight, or just?
&gt;&gt; Bianca Gandolfo: Yeah,

20
00:00:42.042 --> 00:00:46.906
well first you go to eight, actually you
want to go all the way down to the left,

21
00:00:46.906 --> 00:00:50.518
and we can assume that if it did that for
this left subtree,

22
00:00:50.518 --> 00:00:54.354
the behavior is going to be
equivalent on this right subtree,

23
00:00:54.354 --> 00:00:58.983
because it's recursive and they're trees,
and that we can just trust.

24
00:00:58.983 --> 00:01:04.701
Same if it happened on this subtree

25
00:01:04.701 --> 00:01:10.222
like that, we can also trust that

26
00:01:10.222 --> 00:01:15.151
it happened on this subtree,

27
00:01:15.151 --> 00:01:20.890
the entire one, and even bigger.

28
00:01:20.890 --> 00:01:25.980
It's a trust we have to have in our heart.
&gt;&gt; Speaker 3: [LAUGH] How-

29
00:01:25.980 --> 00:01:26.527
&gt;&gt; Bianca Gandolfo: It's easier for

30
00:01:26.527 --> 00:01:27.390
some people than others.

31
00:01:28.890 --> 00:01:34.580
But there is a bug that David pointed out.

32
00:01:34.580 --> 00:01:38.156
So the point was,
I wanted all of my data to be

33
00:01:38.156 --> 00:01:46.014
exciting.
&gt;&gt; Bianca Gandolfo: So

34
00:01:46.014 --> 00:01:53.583
what did we put exclamation points on?
&gt;&gt; Speaker 4: Everything but

35
00:01:53.583 --> 00:01:55.650
11.
&gt;&gt; Bianca Gandolfo: So far, I mean,

36
00:01:55.650 --> 00:01:57.330
we did 7.

37
00:01:57.330 --> 00:01:59.470
What's the other one that we did?
&gt;&gt; Speaker 4: Five.

38
00:01:59.470 --> 00:02:00.580
Three.
&gt;&gt; Bianca Gandolfo: Five.

39
00:02:00.580 --> 00:02:07.370
How many nodes did we look at though?
&gt;&gt; Bianca Gandolfo: So

40
00:02:07.370 --> 00:02:11.570
what's going on?
&gt;&gt; Speaker 1: We need to call

41
00:02:11.570 --> 00:02:13.920
the function again at the end?

42
00:02:13.920 --> 00:02:16.769
After the right.
&gt;&gt; Bianca Gandolfo: Mm-hm.

43
00:02:16.769 --> 00:02:18.257
How do we know that we've made it that

44
00:02:18.257 --> 00:02:25.054
far?
&gt;&gt; Bianca Gandolfo: So

45
00:02:25.054 --> 00:02:29.185
we didn't call it on three,
and we didn't call it on six.

46
00:02:29.185 --> 00:02:32.790
Why not?
&gt;&gt; Speaker 4: They have to be returned?

47
00:02:32.790 --> 00:02:33.840
&gt;&gt; Bianca Gandolfo: Yeah, cuz it returned.

48
00:02:35.630 --> 00:02:36.740
Exactly.

49
00:02:36.740 --> 00:02:44.519
So how might we fix that?
&gt;&gt; Speaker 1: Could

50
00:02:44.519 --> 00:02:46.270
you return the function?

51
00:02:46.270 --> 00:02:51.760
If bang, bang, whatever,
if this left is not null,

52
00:02:51.760 --> 00:02:56.762
then traverse left, and
if this right is not null

53
00:02:56.762 --> 00:03:02.252
then traverse the right,
and we don't need the other

54
00:03:02.252 --> 00:03:11.180
check.
&gt;&gt; Bianca Gandolfo: What do we think?

55
00:03:11.180 --> 00:03:12.130
How does that change things?

56
00:03:12.130 --> 00:03:15.610
So you're suggesting we just
get rid of our base case?

57
00:03:15.610 --> 00:03:16.932
&gt;&gt; Speaker 1: Just say, yeah,

58
00:03:16.932 --> 00:03:22.728
if{!!this.left} traverse{this.left}.
&gt;&gt; Speaker 1: I

59
00:03:22.728 --> 00:03:26.900
don't know how you read that, yeah.
&gt;&gt; Bianca Gandolfo: Cool.

60
00:03:26.900 --> 00:03:27.658
Double bang.

61
00:03:27.658 --> 00:03:32.328
Double bang.
&gt;&gt; Speaker 1: Bang bang sounds more

62
00:03:32.328 --> 00:03:34.414
violent.
&gt;&gt; Bianca Gandolfo: [LAUGH] Bang bang.

63
00:03:34.414 --> 00:03:36.312
&gt;&gt; Speaker 1: Bang bang.

64
00:03:36.312 --> 00:03:37.138
&gt;&gt; Bianca Gandolfo: Cuz I just got right.

65
00:03:37.138 --> 00:03:43.516
Traverse right.
&gt;&gt; Bianca Gandolfo: All

66
00:03:43.516 --> 00:03:46.621
right party people.
&gt;&gt; Speaker 1: But

67
00:03:46.621 --> 00:03:50.108
we would still need the when.
&gt;&gt; Bianca Gandolfo: Still need- For

68
00:03:50.108 --> 00:03:50.610
the-
&gt;&gt; Speaker 4: Leafs.

69
00:03:52.630 --> 00:03:56.312
We distributed the base case.
&gt;&gt; Speaker 1: Well if you're at a leaf

70
00:03:56.312 --> 00:03:57.860
you're not going to recurse,

71
00:03:57.860 --> 00:03:59.825
because both conditions will fail.
&gt;&gt; Bianca Gandolfo: Yeah.

72
00:03:59.825 --> 00:04:02.998
Mm-hm, and where's the return happening

73
00:04:02.998 --> 00:04:10.169
then?
&gt;&gt; Speaker 1: Returning

74
00:04:10.169 --> 00:04:11.255
undefined.
&gt;&gt; Bianca Gandolfo: Yep, so

75
00:04:11.255 --> 00:04:15.224
it's just gonna return here,
cuz that's just what happens magically.

76
00:04:23.196 --> 00:04:24.004
&gt;&gt; Bianca Gandolfo: Cool?

77
00:04:30.120 --> 00:04:30.800
&gt;&gt; Bianca Gandolfo: All right, so

78
00:04:30.800 --> 00:04:36.346
that's our in-order traversal.
&gt;&gt; Bianca Gandolfo: Questions about this?

79
00:04:41.572 --> 00:04:44.536
&gt;&gt; Speaker 3: The function that you're

80
00:04:44.536 --> 00:04:47.903
passing your values to is just

81
00:04:47.903 --> 00:04:51.359
an aggregating function?
&gt;&gt; Bianca Gandolfo: I mean,

82
00:04:51.359 --> 00:04:52.874
what are you aggregating exactly?

83
00:04:52.874 --> 00:04:56.273
When you mean aggregate, do you mean
like you're adding stuff together?

84
00:04:56.273 --> 00:04:58.470
&gt;&gt; Speaker 4: Yeah, well, what is the,

85
00:04:58.470 --> 00:05:02.520
what, I guess I don't understand what the
return value of this is supposed to be.

86
00:05:02.520 --> 00:05:04.755
The whole process.
&gt;&gt; Bianca Gandolfo: Nothing.

87
00:05:04.755 --> 00:05:05.386
&gt;&gt; Speaker 4: Nothing?

88
00:05:05.386 --> 00:05:06.136
&gt;&gt; Bianca Gandolfo: Yeah.

89
00:05:06.136 --> 00:05:06.936
&gt;&gt; Speaker 4: You just wanna go

90
00:05:06.936 --> 00:05:09.907
through all the nodes and that's it?
&gt;&gt; Bianca Gandolfo: You wanna go through

91
00:05:09.907 --> 00:05:11.811
all the nodes and run a function on it.
&gt;&gt; Speaker 1: Yeah so,

92
00:05:11.811 --> 00:05:13.392
it might be pushing it onto an array-
&gt;&gt; Speaker 4: So

93
00:05:13.392 --> 00:05:14.889
it's like a transformation.
&gt;&gt; Bianca Gandolfo: Exactly.

94
00:05:14.889 --> 00:05:16.108
&gt;&gt; Speaker 4: Okay.

95
00:05:16.108 --> 00:05:16.884
&gt;&gt; Bianca Gandolfo: So we're transforming

96
00:05:16.884 --> 00:05:18.441
all of our numbers to
have exclamation points.

97
00:05:18.441 --> 00:05:19.165
&gt;&gt; Speaker 4: That's what

98
00:05:19.165 --> 00:05:19.730
I-
&gt;&gt; Bianca Gandolfo: Hypothetically.

99
00:05:19.730 --> 00:05:21.540
&gt;&gt; Speaker 4: That's what I was missing.

100
00:05:21.540 --> 00:05:25.860
Okay, I thought that it was something
like you were trying to push

101
00:05:25.860 --> 00:05:28.330
each of them onto an array, or
like add them to something,

102
00:05:28.330 --> 00:05:30.482
or-
&gt;&gt; Bianca Gandolfo: Yeah,

103
00:05:30.482 --> 00:05:32.550
maybe you could do that.
&gt;&gt; Speaker 4: Which you could.

104
00:05:32.550 --> 00:05:33.350
&gt;&gt; Bianca Gandolfo: But that was, so,

105
00:05:33.350 --> 00:05:36.960
if you are going to return
the value out of this,-

106
00:05:36.960 --> 00:05:37.752
&gt;&gt; Speaker 4: Yeah.

107
00:05:37.752 --> 00:05:38.406
&gt;&gt; Bianca Gandolfo: You need to

108
00:05:38.406 --> 00:05:41.313
change a few things around.
&gt;&gt; Speaker 4: Right.

109
00:05:41.313 --> 00:05:42.427
&gt;&gt; Bianca Gandolfo: Like, if your function

110
00:05:42.427 --> 00:05:46.130
is going to return something,
you need to account for that return value.

111
00:05:46.130 --> 00:05:48.290
Right now, this is just gonna

112
00:05:48.290 --> 00:05:49.710
let you do side effects.

113
00:05:49.710 --> 00:05:50.414
&gt;&gt; Speaker 4: Right.
&gt;&gt; Bianca Gandolfo: So-

114
00:05:50.414 --> 00:05:52.745
&gt;&gt; Speaker 4: Yep, okay.

115
00:05:52.745 --> 00:05:57.014
That makes sense.
&gt;&gt; Bianca Gandolfo: Yeah, okay.

116
00:05:57.014 --> 00:06:00.858
So,
&gt;&gt; Bianca Gandolfo: That's in-order

117
00:06:00.858 --> 00:06:01.468
traversal.

118
00:06:01.468 --> 00:06:03.715
We did that, it's quite elegant.

119
00:06:10.898 --> 00:06:11.753
&gt;&gt; Bianca Gandolfo: Pre-order traversal.

120
00:06:15.815 --> 00:06:16.546
&gt;&gt; Bianca Gandolfo: You guys ready for

121
00:06:16.546 --> 00:06:19.284
this?
&gt;&gt; Bianca Gandolfo: So

122
00:06:19.284 --> 00:06:23.048
the pre-order traversal runs
it on the parent before going

123
00:06:23.048 --> 00:06:28.330
to the child.
&gt;&gt; Bianca Gandolfo: Cool?

124
00:06:28.330 --> 00:06:30.130
So if you could see here,

125
00:06:30.130 --> 00:06:34.270
the arrow is saying that's the order
in which the function is called.

126
00:06:36.150 --> 00:06:39.054
It's not actually the order
in which it's visiting,

127
00:06:39.054 --> 00:06:43.189
necessarily.
&gt;&gt; Bianca Gandolfo: Cuz, right,

128
00:06:43.189 --> 00:06:47.910
we had to drill down in our recursive
calls kind of, to get down to the bottom.

129
00:06:47.910 --> 00:06:49.827
So we're not actually skipping anything,

130
00:06:49.827 --> 00:06:55.653
because we can't do that.
&gt;&gt; Bianca Gandolfo: Cool,

131
00:06:55.653 --> 00:06:58.960
so our pre-order, we start with 11.

132
00:06:58.960 --> 00:07:05.827
Then 7, 5, 3, 6, 9, 8, 10, [SOUND] 15,

133
00:07:05.827 --> 00:07:11.637
and then the same.
&gt;&gt; Bianca Gandolfo: So

134
00:07:11.637 --> 00:07:13.640
what order is this in?

135
00:07:13.640 --> 00:07:17.211
I already kind of told you, but
if you had to sum it up on your own?

136
00:07:28.813 --> 00:07:31.012
&gt;&gt; Speaker 4: It's in ascending order by

137
00:07:31.012 --> 00:07:33.953
parent, kind of.
&gt;&gt; [INAUDIBLE]

138
00:07:33.953 --> 00:07:34.555
&gt;&gt; Speaker 4: Parent,

139
00:07:34.555 --> 00:07:37.977
yeah.
&gt;&gt; Bianca Gandolfo: So

140
00:07:37.977 --> 00:07:41.177
it first looks at itself,
or the parent, and

141
00:07:41.177 --> 00:07:42.872
then it goes which way?

142
00:07:42.872 --> 00:07:45.337
&gt;&gt; Speaker 4: Left.
&gt;&gt; Bianca Gandolfo: Left?

143
00:07:48.267 --> 00:07:49.635
&gt;&gt; Bianca Gandolfo: And then it looks at?

144
00:07:49.635 --> 00:07:52.331
Self.
&gt;&gt; Speaker 4: Self.

145
00:07:52.331 --> 00:07:54.922
Left.
&gt;&gt; Bianca Gandolfo: Right.

146
00:07:54.922 --> 00:07:56.299
&gt;&gt; Speaker 4: Right.

147
00:07:56.299 --> 00:07:57.809
&gt;&gt; Bianca Gandolfo: Right.

148
00:07:57.809 --> 00:07:58.895
&gt;&gt; Speaker 4: Right, right.

149
00:07:58.895 --> 00:08:00.935
&gt;&gt; Bianca Gandolfo: Left, right.

150
00:08:00.935 --> 00:08:01.730
&gt;&gt; Speaker 4: Yeah, right,

151
00:08:01.730 --> 00:08:05.270
left, right, right, left.
&gt;&gt; Bianca Gandolfo: So

152
00:08:05.270 --> 00:08:09.566
part of your task here
is pseudo coding it out,

153
00:08:09.566 --> 00:08:16.285
just like we pseudo coded out
the in-order, for both the pre-order and

154
00:08:16.285 --> 00:08:24.819
the post-order.
&gt;&gt; Bianca Gandolfo: Cool?

155
00:08:24.819 --> 00:08:27.825
So what's post-order?
&gt;&gt; Speaker 4: Children first?

156
00:08:27.825 --> 00:08:28.860
&gt;&gt; Bianca Gandolfo: Mm-hm.

157
00:08:35.681 --> 00:08:36.278
&gt;&gt; Bianca Gandolfo: Cool,

158
00:08:36.278 --> 00:08:38.571
so I'm gonna set you free.

159
00:08:38.571 --> 00:08:41.507
So let's talk about what
in-order traversal is.

160
00:08:41.507 --> 00:08:48.450
So remember, trees, we can only go
from the parent to the child, right?

161
00:08:48.450 --> 00:08:51.130
That's the only way we can traverse,
and I'm still laughing about my thanks,

162
00:08:51.130 --> 00:08:52.420
yo mama joke.
&gt;&gt; Speaker 1: [LAUGH]

163
00:08:52.420 --> 00:08:54.001
&gt;&gt; Bianca Gandolfo: I've got to get over

164
00:08:54.001 --> 00:08:55.380
[LAUGH] it.

165
00:08:55.380 --> 00:08:57.390
So that's the only way you can do it.

166
00:08:57.390 --> 00:09:02.590
So we have to start at our root,
and we need to get down to 3,

167
00:09:02.590 --> 00:09:08.103
and then we want to go to 5,
6, 7, 8, 9, ten10 etc.,

168
00:09:08.103 --> 00:09:12.600
because we want to visit
our nodes in order, okay?

169
00:09:14.430 --> 00:09:19.301
So, knowing that we can only
visit from our parent to child,

170
00:09:19.301 --> 00:09:23.599
and we have two options right,
we have left or right,

171
00:09:23.599 --> 00:09:28.566
first one seems to me that we
would have to go left, right, and

172
00:09:28.566 --> 00:09:33.914
these are recursive calls, and
so, if I was personifying a tree,

173
00:09:33.914 --> 00:09:39.263
here I am, an in-order traversal tree,
what I would do is first,

174
00:09:39.263 --> 00:09:43.846
I wold start at 11,
cuz that's what you have to do, and

175
00:09:43.846 --> 00:09:49.045
then 7, going down, getting shorter,
then 5, and then 3.

176
00:09:49.045 --> 00:09:53.577
Once we hit 3, we wanna call the function,
right, cuz we wanna call

177
00:09:53.577 --> 00:09:57.956
the function to everything, and
then once we're done with that,

178
00:09:57.956 --> 00:10:02.670
we're gonna go back up to our parent,
how do we go back up to our parent?

179
00:10:04.240 --> 00:10:08.030
We have to return from our recursion,
somehow return another function.

180
00:10:09.980 --> 00:10:17.260
So then we call the function on 5,
and then we need to go right, to 6.

181
00:10:18.770 --> 00:10:22.305
So once 3, 5, and 6 are good to go,

182
00:10:22.305 --> 00:10:27.170
we're gonna return again up another layer,
to 7.

183
00:10:29.380 --> 00:10:32.890
We call, so from 7,
we're we left off, we went left.

184
00:10:33.920 --> 00:10:39.630
So once we return out of our left
recursion, we come back to ourself,

185
00:10:39.630 --> 00:10:40.780
call our function on ourself.

186
00:10:42.920 --> 00:10:43.840
Then, we're gonna go right.

187
00:10:45.210 --> 00:10:52.320
So the pattern here is left, self, right.
&gt;&gt; Bianca Gandolfo: Cool?

188
00:10:52.320 --> 00:10:54.350
So left, self, right.

189
00:10:55.680 --> 00:10:56.250
That's our pattern.

190
00:10:57.410 --> 00:10:57.910
Cool.

