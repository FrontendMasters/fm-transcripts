WEBVTT

1
00:00:00.170 --> 00:00:01.710
&gt;&gt; Bianca Gandolfo: Shall we run it?

2
00:00:01.710 --> 00:00:07.142
When we have a tree,
let's just do our subtree here,

3
00:00:07.142 --> 00:00:13.204
so we have 7 and then we'd have 5,
what was the other one?

4
00:00:13.204 --> 00:00:14.010
Maybe 8.

5
00:00:18.371 --> 00:00:20.404
&gt;&gt; Bianca Gandolfo: And
then we had, what did we have?

6
00:00:20.404 --> 00:00:24.773
3 and then 6.

7
00:00:31.290 --> 00:00:35.757
&gt;&gt; Bianca Gandolfo: Cool,
you guys see our little tree there?

8
00:00:35.757 --> 00:00:41.036
So 7 is the parent of 5,
then we have 3, and then we have 6.

9
00:00:43.193 --> 00:00:47.670
&gt;&gt; Bianca Gandolfo: So,
&gt;&gt; Bianca Gandolfo: Here is our tree.

10
00:00:50.700 --> 00:00:54.660
&gt;&gt; Bianca Gandolfo: So
let's say deleteMin().

11
00:00:54.660 --> 00:00:57.480
The first time we run it we're
not gonna pass anything, right?

12
00:00:57.480 --> 00:01:00.304
We're just gonna say tree.deleteMin().

13
00:01:01.520 --> 00:01:02.129
Something like that.

14
00:01:05.046 --> 00:01:11.482
&gt;&gt; Bianca Gandolfo: So
we are going to put this onto our stack.

15
00:01:17.928 --> 00:01:21.760
&gt;&gt; Bianca Gandolfo: All right, here we go.

16
00:01:24.310 --> 00:01:29.960
So, we start with the root node,
which is our 7.

17
00:01:31.820 --> 00:01:32.396
Does it enter here?

18
00:01:32.396 --> 00:01:36.810
&gt;&gt; Speaker 2: No.

19
00:01:36.810 --> 00:01:40.370
&gt;&gt; Bianca Gandolfo: Okay, so, no,
it has a left, it has a right.

20
00:01:41.870 --> 00:01:42.451
What about this one?

21
00:01:48.100 --> 00:01:50.946
&gt;&gt; Speaker 3: That doesn't
work either [CROSSTALK].

22
00:01:50.946 --> 00:01:59.010
&gt;&gt; Bianca Gandolfo: Nope, for it to work
it would not have a left but have a right.

23
00:01:59.010 --> 00:02:00.390
That's what that says.

24
00:02:00.390 --> 00:02:03.846
Both of those conditions need to be true
for it to enter into this condition.

25
00:02:06.959 --> 00:02:11.087
&gt;&gt; Bianca Gandolfo: And then otherwise,
if there is a left, which there is,

26
00:02:11.087 --> 00:02:15.049
right, our 5,
then we're gonna traverse, great.

27
00:02:18.420 --> 00:02:21.610
&gt;&gt; Bianca Gandolfo: And
then our value is 5.

28
00:02:21.610 --> 00:02:24.390
We can also think of
this as this dot value.

29
00:02:26.240 --> 00:02:29.250
Okay, so does it have a left?

30
00:02:29.250 --> 00:02:29.750
&gt;&gt; Speaker 2: Yes.

31
00:02:31.050 --> 00:02:34.380
&gt;&gt; Bianca Gandolfo: Yes, so,
it has left so it skips this so

32
00:02:34.380 --> 00:02:35.400
then we traverse again.

33
00:02:37.730 --> 00:02:41.280
This time going again to the left,
so we go to 3.

34
00:02:43.200 --> 00:02:45.706
So === 3.

35
00:02:51.931 --> 00:02:56.340
&gt;&gt; Bianca Gandolfo: Okay,
so does 3 have a left?

36
00:02:56.340 --> 00:02:57.880
&gt;&gt; Speaker 2: Yep, no, no.

37
00:02:57.880 --> 00:03:00.110
&gt;&gt; Bianca Gandolfo: No,
so that's true, right?

38
00:03:00.110 --> 00:03:03.420
Not left is true, what about not right?

39
00:03:03.420 --> 00:03:05.220
&gt;&gt; Speaker 2: Doesn't have a right either.

40
00:03:05.220 --> 00:03:10.310
&gt;&gt; Bianca Gandolfo: True, we forgot
to talk about passing the parent.

41
00:03:10.310 --> 00:03:17.769
So we're passing the parent,
at this point is 5, parent.left is null.

42
00:03:17.769 --> 00:03:25.247
Cool, so,
&gt;&gt; Bianca Gandolfo: We set that null,

43
00:03:25.247 --> 00:03:28.830
which essentially makes it go bye bye.

44
00:03:28.830 --> 00:03:32.990
So now we're left with this tree, so
anyway we come to the end, right?

45
00:03:32.990 --> 00:03:33.704
We pop all this off.

46
00:03:37.564 --> 00:03:39.156
&gt;&gt; Bianca Gandolfo: Yeah,
so we pop them all off and

47
00:03:39.156 --> 00:03:41.620
let's pretend we're
doing it all over again.

48
00:03:41.620 --> 00:03:44.520
We call the deleteMin one more time.

49
00:03:45.580 --> 00:03:47.070
It's gonna do a lot of the same thing, but

50
00:03:47.070 --> 00:03:50.150
the tree looks a little bit different now,
cuz we don't have the 3.

51
00:03:50.150 --> 00:03:54.029
So the first time we call it,
the value's gonna be 7.

52
00:03:55.160 --> 00:03:59.310
And there is a left, so we recourse.

53
00:04:00.532 --> 00:04:02.039
&gt;&gt; Bianca Gandolfo: The next value is 5.

54
00:04:06.494 --> 00:04:07.880
&gt;&gt; Bianca Gandolfo: And
does 5 have a left?

55
00:04:09.160 --> 00:04:09.660
&gt;&gt; Speaker 2: No.

56
00:04:10.790 --> 00:04:12.728
&gt;&gt; Bianca Gandolfo: Does
5 not have a right?

57
00:04:12.728 --> 00:04:13.631
&gt;&gt; Speaker 2: It has a right.

58
00:04:13.631 --> 00:04:16.030
&gt;&gt; Bianca Gandolfo: So
this is not true, so we skip this one.

59
00:04:17.300 --> 00:04:18.840
So does it now have a left?

60
00:04:18.840 --> 00:04:19.790
&gt;&gt; Speaker 2: Yep.

61
00:04:19.790 --> 00:04:20.810
&gt;&gt; Bianca Gandolfo: Does it have a right?

62
00:04:20.810 --> 00:04:21.310
&gt;&gt; Speaker 2: Yes.

63
00:04:22.980 --> 00:04:28.000
&gt;&gt; Bianca Gandolfo: And then we set
its parent, .left, to this .right.

64
00:04:28.000 --> 00:04:31.456
So the parent, being 7, so

65
00:04:31.456 --> 00:04:36.884
7's left,
&gt;&gt; Bianca Gandolfo: Is gonna be set to.

66
00:04:36.884 --> 00:04:39.430
So this our this, right here.

67
00:04:41.277 --> 00:04:44.081
&gt;&gt; Bianca Gandolfo: Our
5 is the this.right.

68
00:04:46.569 --> 00:04:48.390
&gt;&gt; Bianca Gandolfo: Does that make sense?

69
00:04:48.390 --> 00:04:49.330
&gt;&gt; Speaker 2: Yeah.

70
00:04:49.330 --> 00:04:52.530
&gt;&gt; Bianca Gandolfo: Can someone tell me
that one more time, what I just said,

71
00:04:52.530 --> 00:04:54.140
in your own words?

72
00:04:54.140 --> 00:04:55.888
What are we doing?

73
00:04:55.888 --> 00:04:59.714
&gt;&gt; Speaker 2: Setting 5 to 6, right?

74
00:04:59.714 --> 00:05:00.930
&gt;&gt; Bianca Gandolfo: Mm-hm, yep.

75
00:05:00.930 --> 00:05:05.606
&gt;&gt; Speaker 3: Setting the parent's
left to the 5's, right?

76
00:05:05.606 --> 00:05:07.940
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

77
00:05:09.300 --> 00:05:11.040
So we're essentially switching these out.

78
00:05:17.901 --> 00:05:19.080
&gt;&gt; Bianca Gandolfo: Something like that.

79
00:05:19.080 --> 00:05:21.300
&gt;&gt; Speaker 3: Is that
what we wanted to happen?

80
00:05:21.300 --> 00:05:25.620
Did we wanna keep deleting the mins or
did we just wanna delete the one min?

81
00:05:25.620 --> 00:05:27.420
&gt;&gt; Bianca Gandolfo: We just
pretended that we called it twice.

82
00:05:27.420 --> 00:05:28.140
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Bianca Gandolfo: Yeah,

83
00:05:28.140 --> 00:05:29.450
just so we could look at both,

84
00:05:29.450 --> 00:05:33.660
making sure that our code is working
how we want it to work, cool.

85
00:05:33.660 --> 00:05:34.570
&gt;&gt; Speaker 3: I have a question.

86
00:05:34.570 --> 00:05:35.820
&gt;&gt; Bianca Gandolfo: You have a question?

87
00:05:35.820 --> 00:05:37.950
&gt;&gt; Speaker 3: Why do we remove 5?

88
00:05:37.950 --> 00:05:39.660
Just we have to delete the 5s?

89
00:05:39.660 --> 00:05:40.759
&gt;&gt; Bianca Gandolfo: Because
5 is the minimum.

90
00:05:42.446 --> 00:05:46.946
&gt;&gt; Bianca Gandolfo: So this function is
just always going to delete the minimum,

91
00:05:46.946 --> 00:05:51.370
and before we deleted it in this
tree the 5 was the minimum.

92
00:05:51.370 --> 00:05:52.329
&gt;&gt; Speaker 3: Okay.

93
00:05:52.329 --> 00:05:54.113
&gt;&gt; Bianca Gandolfo: Yeah.

94
00:05:56.748 --> 00:06:00.233
&gt;&gt; Bianca Gandolfo: And so the challenge
that we are faced with is okay,

95
00:06:00.233 --> 00:06:04.870
we had to delete the 5, but
we also have to do something with the 6.

96
00:06:04.870 --> 00:06:06.563
Cuz we're not just deleting
the entire subtree,

97
00:06:06.563 --> 00:06:08.063
we're just deleting the one node, right?

98
00:06:08.063 --> 00:06:11.120
If we were deleting the entire subtree,
then we'd be good.

99
00:06:11.120 --> 00:06:14.538
We'd just break off that reference and
move on with our life.

100
00:06:17.560 --> 00:06:20.750
&gt;&gt; Bianca Gandolfo: Cool, so
again, we just switched them.

101
00:06:21.780 --> 00:06:25.580
Or, essentially, we moved 6 up and
then 5 is disconnected.

102
00:06:29.036 --> 00:06:31.070
&gt;&gt; Bianca Gandolfo: And we're all happy.

103
00:06:31.070 --> 00:06:33.198
And we're preserving the rules
of a binary search tree, right?

104
00:06:33.198 --> 00:06:38.127
We wanna make sure always
the left of the 7 is less and

105
00:06:38.127 --> 00:06:41.060
the right of the 7 is greater.

106
00:06:41.060 --> 00:06:45.747
And that's why when we do these delete
operations it's really important that

107
00:06:45.747 --> 00:06:48.597
we're mindful of which
side we're moving up.

108
00:06:51.313 --> 00:06:52.130
&gt;&gt; Bianca Gandolfo: To which side?

109
00:06:54.760 --> 00:06:58.778
&gt;&gt; Speaker 3: I guess one question is,
what if the minimum is the root?

110
00:06:58.778 --> 00:07:01.410
What if the minimum is the root?

111
00:07:06.480 --> 00:07:09.950
Well it doesn't have a parent and we're
going to set parent left equals null, and

112
00:07:09.950 --> 00:07:11.168
we're gonna have trouble.

113
00:07:11.168 --> 00:07:11.970
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

114
00:07:11.970 --> 00:07:13.270
So how can you catch that?

115
00:07:16.030 --> 00:07:21.920
&gt;&gt; Speaker 3: You could add
a condition for end this .parent or

116
00:07:21.920 --> 00:07:24.420
at end parent in the first one?

117
00:07:26.380 --> 00:07:30.300
So that wouldn't try to set parent
out left if there wasn't a parent.

118
00:07:30.300 --> 00:07:32.532
&gt;&gt; Bianca Gandolfo: Well,
it's not this .parent,

119
00:07:32.532 --> 00:07:35.950
it's just a parent, the parent [INAUDIBLE]
&gt;&gt; Speaker 3: Yeah, but

120
00:07:35.950 --> 00:07:36.480
wouldn't-
&gt;&gt; Bianca Gandolfo: So

121
00:07:36.480 --> 00:07:39.720
we can do a guard operator here.

122
00:07:42.480 --> 00:07:43.450
Something like that.

123
00:07:43.450 --> 00:07:46.190
But then we'd have to account for
the Ls, right?

124
00:07:48.430 --> 00:07:51.800
And the question is what
do we do with that node?

125
00:07:51.800 --> 00:07:55.990
Do we just set itself to null,
do we just not let you delete it?

126
00:07:58.490 --> 00:08:05.205
What do we think?

127
00:08:05.205 --> 00:08:07.810
&gt;&gt; Speaker 3: Cuz you're calling
this on the tree, right?

128
00:08:07.810 --> 00:08:10.889
So in that case,
it would be like the tree deleting itself.

129
00:08:12.020 --> 00:08:13.445
&gt;&gt; Bianca Gandolfo: No,
it's not gone though.

130
00:08:13.445 --> 00:08:20.880
&gt;&gt; Speaker 3: Well, you didn't say this
.right's going to be this .right's .right.

131
00:08:20.880 --> 00:08:26.118
I mean, I think the right child
is gonna become the new root,

132
00:08:26.118 --> 00:08:29.855
so you're going to have to copy that over.

133
00:08:29.855 --> 00:08:33.590
&gt;&gt; Bianca Gandolfo: Mm-hm.

134
00:08:33.590 --> 00:08:34.718
&gt;&gt; Speaker 3: Also there's still a right,
there's just not a-

135
00:08:34.718 --> 00:08:35.669
&gt;&gt; Bianca Gandolfo: So you could.

136
00:08:35.669 --> 00:08:37.620
&gt;&gt; Speaker 3: There could be.

137
00:08:37.620 --> 00:08:40.970
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 2: It couldn't have a right.

138
00:08:40.970 --> 00:08:43.155
&gt;&gt; Bianca Gandolfo: It could
if we had something like this.

139
00:08:43.155 --> 00:08:43.950
&gt;&gt; Speaker 2: Yeah.

140
00:08:43.950 --> 00:08:46.541
&gt;&gt; Speaker 3: You wanna say deleteMin?

141
00:08:46.541 --> 00:08:47.675
&gt;&gt; Bianca Gandolfo: Yeah.

142
00:08:47.675 --> 00:08:49.017
&gt;&gt; Speaker 2: Oops, sorry.

143
00:08:49.017 --> 00:08:50.310
&gt;&gt; Bianca Gandolfo: So
this is still a binary search tree.

144
00:08:50.310 --> 00:08:51.610
&gt;&gt; Speaker 2: It can have a left.

145
00:08:54.590 --> 00:08:59.158
&gt;&gt; Bianca Gandolfo: Yeah,
so we meet this condition,

146
00:08:59.158 --> 00:09:03.730
not left, at this point, right?

147
00:09:03.730 --> 00:09:07.160
And we have a right, so
how do we switch this?

148
00:09:07.160 --> 00:09:10.090
Make sure you account for
that in your solution and we'll come back.

