WEBVTT

1
00:00:00.250 --> 00:00:04.510
&gt;&gt; Bianca Gandolfo: So what was your
experience creating this adjacency matrix?

2
00:00:04.510 --> 00:00:06.340
&gt;&gt; Speaker 2: I'm feeling like
I still don't quite get it.

3
00:00:06.340 --> 00:00:07.790
&gt;&gt; Speaker 3: I don't understand it.

4
00:00:07.790 --> 00:00:13.842
&gt;&gt; Bianca Gandolfo: Yeah,
can we turn that into a question,

5
00:00:13.842 --> 00:00:17.952
like a specific question?

6
00:00:17.952 --> 00:00:18.640
[LAUGH]
&gt;&gt; Speaker 2: [LAUGH] So

7
00:00:18.640 --> 00:00:22.710
I tried to add a node that was a value.

8
00:00:22.710 --> 00:00:28.033
And so I came up with, if this dot

9
00:00:28.033 --> 00:00:33.410
nodes, and then like the index of value.

10
00:00:33.410 --> 00:00:34.880
That would mean it was already there.

11
00:00:34.880 --> 00:00:37.720
&gt;&gt; Bianca Gandolfo: So
in your constructor you said, you had.

12
00:00:37.720 --> 00:00:42.590
&gt;&gt; Speaker 2: In my, or yeah,
this dot underscore nodes equals object.

13
00:00:44.529 --> 00:00:47.625
&gt;&gt; Bianca Gandolfo: Okay, is there
a reason you're initializing as an object

14
00:00:47.625 --> 00:00:48.920
and not an array?

15
00:00:48.920 --> 00:00:51.070
&gt;&gt; Speaker 2: That's what
was here in the github.

16
00:00:51.070 --> 00:00:52.840
&gt;&gt; Bianca Gandolfo: You're
just looking at the solution?

17
00:00:52.840 --> 00:00:56.730
&gt;&gt; Speaker 2: No, the exercises
had the constructor already done.

18
00:00:58.870 --> 00:01:03.120
&gt;&gt; Bianca Gandolfo: But that's not,
that's a different representation.

19
00:01:03.120 --> 00:01:04.530
&gt;&gt; Speaker 2: No wonder this was so hard.

20
00:01:04.530 --> 00:01:07.480
&gt;&gt; Bianca Gandolfo: Yeah, yeah.

21
00:01:07.480 --> 00:01:08.610
It's not in the exercise.

22
00:01:08.610 --> 00:01:11.260
It's an unrelated exercise.

23
00:01:11.260 --> 00:01:12.240
&gt;&gt; Speaker 2: Okay, cool cool.

24
00:01:13.560 --> 00:01:14.825
I think it should be an array then.

25
00:01:20.583 --> 00:01:21.990
&gt;&gt; Bianca Gandolfo: Or
we can leave it like that, yeah.

26
00:01:27.590 --> 00:01:33.287
So I think the easiest way to do it
is just initialize your 2D array.

27
00:01:46.213 --> 00:01:47.165
&gt;&gt; Bianca Gandolfo: Something like that.

28
00:01:48.988 --> 00:01:52.092
&gt;&gt; Bianca Gandolfo: So
just initialize it all at zero, and

29
00:01:52.092 --> 00:01:54.619
then just imagine this is ten.

30
00:01:58.868 --> 00:02:00.614
&gt;&gt; Bianca Gandolfo: So
we initialize it, it's empty.

31
00:02:06.450 --> 00:02:08.371
&gt;&gt; Bianca Gandolfo: And a lot of times,

32
00:02:08.371 --> 00:02:14.138
when you're doing different
graph processing things,

33
00:02:14.138 --> 00:02:19.302
you're given the graph and
then so they're like,

34
00:02:19.302 --> 00:02:24.410
here's the graph,
now figure out these things.

35
00:02:24.410 --> 00:02:28.690
And so, when you're given
the data ahead of time and

36
00:02:28.690 --> 00:02:35.430
you're not dynamically adding different
nodes to the graph, it's pretty easy,

37
00:02:35.430 --> 00:02:40.650
right, like you probably are given like
a list of nodes, and a list of edges and

38
00:02:40.650 --> 00:02:44.860
then from that you can just loop
through it and create your 2D array.

39
00:02:46.870 --> 00:02:48.840
Pretty straightforward and

40
00:02:48.840 --> 00:02:54.880
that would be one way to initialize it,
and here's another way.

41
00:02:54.880 --> 00:02:58.759
We're just initializing it empty,

42
00:02:58.759 --> 00:03:04.137
assuming that we have a certain size for
our graph,

43
00:03:04.137 --> 00:03:08.279
and then as we add nodes we will change.

44
00:03:15.001 --> 00:03:16.540
&gt;&gt; Bianca Gandolfo: Just
the relationship here, right?

45
00:03:19.660 --> 00:03:24.879
And then we might also wanna represent,
if we've added the node or not.

46
00:03:29.581 --> 00:03:30.310
&gt;&gt; Bianca Gandolfo: You know what I mean?

47
00:03:30.310 --> 00:03:32.360
So we're initializing an empty thing.

48
00:03:32.360 --> 00:03:37.310
So, if we want to check if
our graph contains a value,

49
00:03:37.310 --> 00:03:42.097
right now,
&gt;&gt; Bianca Gandolfo: We don't really

50
00:03:42.097 --> 00:03:44.570
know if it does.

51
00:03:44.570 --> 00:03:45.506
How could we do that?

52
00:03:49.036 --> 00:03:52.427
&gt;&gt; Bianca Gandolfo: Cuz that seems like
an easy thing that we could look up,

53
00:03:52.427 --> 00:03:55.330
in this kind of data structure, right?

54
00:03:55.330 --> 00:04:00.090
This kind of representation of our graph
is just like, does it exist at all?

55
00:04:01.800 --> 00:04:02.860
Because we have arrays.

56
00:04:02.860 --> 00:04:05.614
Arrays are kind of easy for
that kind of look up.

57
00:04:09.039 --> 00:04:10.165
&gt;&gt; Bianca Gandolfo: Should
we look at a picture?

58
00:04:13.497 --> 00:04:14.959
&gt;&gt; Speaker 4: Can you repeat again?

59
00:04:14.959 --> 00:04:15.702
&gt;&gt; Bianca Gandolfo: Hm?

60
00:04:15.702 --> 00:04:16.720
&gt;&gt; Speaker 4: One more repeat, please.

61
00:04:16.720 --> 00:04:18.700
&gt;&gt; Bianca Gandolfo: One more time?

62
00:04:18.700 --> 00:04:20.980
&gt;&gt; Speaker 4: I didn't catch the question.

63
00:04:20.980 --> 00:04:25.912
&gt;&gt; Bianca Gandolfo: Yeah.
So the question is, how is one way that we

64
00:04:25.912 --> 00:04:31.160
could represent that dynamically, right?

65
00:04:31.160 --> 00:04:33.830
So this is a graph that's
already been created.

66
00:04:33.830 --> 00:04:36.461
We know there's one through six,
we have one through six.

67
00:04:36.461 --> 00:04:38.295
And we're adding values.

68
00:04:40.714 --> 00:04:43.686
&gt;&gt; Bianca Gandolfo: How can we just
represent that something has been added?

69
00:04:47.273 --> 00:04:49.640
&gt;&gt; Bianca Gandolfo: Versus where you're
just initializing this empty graph.

70
00:04:51.280 --> 00:04:52.450
Does that make sense?

71
00:04:54.690 --> 00:04:58.400
&gt;&gt; Speaker 3: So
if you're initializing an empty graph,

72
00:04:58.400 --> 00:05:01.580
are you actually saying
that the points exist?

73
00:05:01.580 --> 00:05:06.070
But they just don't have
any connections yet.

74
00:05:06.070 --> 00:05:08.240
&gt;&gt; Bianca Gandolfo: Yeah, so
if we don't account for this,

75
00:05:08.240 --> 00:05:10.000
that's what it's saying, right.

76
00:05:10.000 --> 00:05:12.710
So this graph is saying
we have one through six.

77
00:05:12.710 --> 00:05:16.750
&gt;&gt; Speaker 3: Right, so if we're
&gt;&gt; Bianca Gandolfo: If we initialize it

78
00:05:16.750 --> 00:05:23.350
empty this is one way to do it, if we
initialize it just empty how do we know

79
00:05:23.350 --> 00:05:28.248
that these aren't just four
unconnected nodes in a graph?

80
00:05:28.248 --> 00:05:31.134
You know what I'm saying?

81
00:05:31.134 --> 00:05:35.115
&gt;&gt; Speaker 3: They are four
unconnected nodes in

82
00:05:35.115 --> 00:05:36.420
a graph
&gt;&gt; Bianca Gandolfo: But

83
00:05:36.420 --> 00:05:38.710
what if we just want to say
that this is an empty graph?

84
00:05:38.710 --> 00:05:40.590
&gt;&gt; Speaker 3: This is an empty graph?

85
00:05:40.590 --> 00:05:42.130
Then don't put zeroes in there?

86
00:05:43.330 --> 00:05:47.480
If a zero is going to be used as
a placeholder for something that exists?

87
00:05:49.890 --> 00:05:50.960
&gt;&gt; Bianca Gandolfo: True.

88
00:05:50.960 --> 00:05:54.170
So that would be one way, but
then whenever we add a node,

89
00:05:54.170 --> 00:05:56.685
we would have to suddenly put all zeroes,
right?

90
00:05:56.685 --> 00:06:00.270
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: So-

91
00:06:00.270 --> 00:06:02.000
&gt;&gt; Speaker 3: I mean you could make a list

92
00:06:02.000 --> 00:06:03.650
of the things that you have added.

93
00:06:03.650 --> 00:06:09.670
&gt;&gt; Bianca Gandolfo: Mm-hm, you could have
another auxiliary list, yeah totally.

94
00:06:09.670 --> 00:06:11.400
These are all things to think about.

95
00:06:11.400 --> 00:06:17.230
You can also just put an x, so
this is one and one, that one exists.

96
00:06:18.360 --> 00:06:20.070
Right, we're not gonna have
a connection with our selves.

97
00:06:20.070 --> 00:06:21.580
&gt;&gt; Speaker 3: Yeah,
that's kind of what I meant.

98
00:06:23.040 --> 00:06:27.340
&gt;&gt; Bianca Gandolfo: Yeah, or you can
literally just have another list here.

99
00:06:27.340 --> 00:06:29.970
But again this already takes up so
much space.

100
00:06:29.970 --> 00:06:31.290
Then you're taking up more space.

101
00:06:34.750 --> 00:06:37.590
So that's if we're adding the value for
the index.

102
00:06:37.590 --> 00:06:39.240
The order is a little bit easier, right?

103
00:06:39.240 --> 00:06:40.970
We can just keep a count.

104
00:06:40.970 --> 00:06:45.150
Anything beyond that count,
we haven't gotten to yet.

105
00:06:47.040 --> 00:06:48.270
Cool.

106
00:06:48.270 --> 00:06:50.090
Adding an edge, we talked about that.

107
00:06:51.770 --> 00:06:56.284
Overall, adding an edge is the easiest
thing you could do in a matrix.

108
00:06:58.377 --> 00:06:59.625
&gt;&gt; Bianca Gandolfo: Deleting edges,

109
00:06:59.625 --> 00:07:03.458
searching if something exists
is another easy thing.

110
00:07:09.117 --> 00:07:11.864
&gt;&gt; Bianca Gandolfo: Adjacency matrix.

111
00:07:11.864 --> 00:07:12.877
Any questions?

112
00:07:16.917 --> 00:07:17.920
&gt;&gt; Bianca Gandolfo: No, okay.

113
00:07:17.920 --> 00:07:21.592
&gt;&gt; Speaker 2: So essentially,
in the constructor,

114
00:07:21.592 --> 00:07:26.612
you're setting nodes to
a multidimensional array.

115
00:07:26.612 --> 00:07:30.153
That is basically what you'd wanna do,
right.

116
00:07:30.153 --> 00:07:32.144
Because in the pseudocode there,

117
00:07:32.144 --> 00:07:35.360
that's supposed to be
a picture of a graph, right?

118
00:07:35.360 --> 00:07:36.850
&gt;&gt; Bianca Gandolfo: Yeah.

119
00:07:36.850 --> 00:07:37.540
&gt;&gt; Speaker 2: But
&gt;&gt; Bianca Gandolfo: Yeah

120
00:07:37.540 --> 00:07:38.040
&gt;&gt; Speaker 2: But what you,

121
00:07:40.337 --> 00:07:40.867
&gt;&gt; Speaker 2: But it's just

122
00:07:40.867 --> 00:07:42.780
a multi-dimensional array, right?

123
00:07:42.780 --> 00:07:44.550
&gt;&gt; Bianca Gandolfo: Yeah,
that's what a matrix is.

124
00:07:44.550 --> 00:07:51.236
&gt;&gt; Speaker 2: And then the,
&gt;&gt; Speaker 2: Okay, I think so.

125
00:07:51.236 --> 00:07:54.290
&gt;&gt; Bianca Gandolfo: And
then the index represents the node.

126
00:07:55.960 --> 00:07:59.044
This value represents the edge.

127
00:07:59.044 --> 00:08:03.777
&gt;&gt; Speaker 2: The value represents the
edge, but the index represents the node,

128
00:08:03.777 --> 00:08:04.310
okay.

129
00:08:04.310 --> 00:08:07.990
&gt;&gt; Bianca Gandolfo: Yep and

130
00:08:07.990 --> 00:08:12.120
this is easy when we already know
what's going to be in the graph.

131
00:08:12.120 --> 00:08:14.720
It's like, okay,
we are given all of the things

132
00:08:14.720 --> 00:08:19.530
that's already going to be in the graph,
all of the nodes and all the edges, and

133
00:08:19.530 --> 00:08:23.110
then we just want to do some
calculations on it, right.

134
00:08:23.110 --> 00:08:27.390
So we don't have to worry about
adding nodes, because as we've seen,

135
00:08:27.390 --> 00:08:30.243
it's a little bit complicated to do that,

136
00:08:30.243 --> 00:08:36.450
especially once we reach the size,
then we have to resize.

137
00:08:36.450 --> 00:08:37.130
It gets complicated

