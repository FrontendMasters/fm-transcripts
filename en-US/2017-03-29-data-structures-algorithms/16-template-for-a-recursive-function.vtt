WEBVTT

1
00:00:00.380 --> 00:00:04.370
&gt;&gt; Bianca Gandolfo: Recursion, so
that's cool, we explored that.

2
00:00:04.370 --> 00:00:07.370
Here's a recipe that you've
probably heard before.

3
00:00:07.370 --> 00:00:09.710
You have an if statement
of some base case.

4
00:00:09.710 --> 00:00:15.160
Otherwise, do some recursion and
then return or, like we were doing,

5
00:00:15.160 --> 00:00:20.810
return some value, right,
which you can set up here.

6
00:00:20.810 --> 00:00:22.785
You can set out, and
you can accumulate it.

7
00:00:22.785 --> 00:00:28.230
There are different ways of
preserving that value, cool.

8
00:00:28.230 --> 00:00:33.120
And I almost forgot, there's actually the
work part that you wanna do that's useful.

9
00:00:33.120 --> 00:00:36.615
So far,
examples have been super not useful.

10
00:00:36.615 --> 00:00:43.026
It's just an oversimplified version,
and so ideally in this if statement,

11
00:00:43.026 --> 00:00:48.152
you want to get to a state that's
closer to your base case which

12
00:00:48.152 --> 00:00:55.755
is gonna be the smallest,
&gt;&gt; Bianca Gandolfo: Which is at the end or

13
00:00:55.755 --> 00:00:57.320
where you want your recursion to end.

14
00:00:57.320 --> 00:01:02.410
In this case, we want it to
end after three loops, right?

15
00:01:02.410 --> 00:01:07.570
So that's our base case right here and
return, right?

16
00:01:07.570 --> 00:01:11.720
We have some condition that gets
us closer to our base case.

17
00:01:14.400 --> 00:01:18.240
Otherwise, if we didn't do that,
we would still have an infinite loop and

18
00:01:18.240 --> 00:01:20.280
we would have problems.

19
00:01:20.280 --> 00:01:23.647
And so that's what that means.
&gt;&gt; Bianca Gandolfo: And

20
00:01:23.647 --> 00:01:28.311
you need a return where needed.
&gt;&gt; Bianca Gandolfo: Cool,

21
00:01:28.311 --> 00:01:32.794
yeah, question?
&gt;&gt; Speaker 2: In the previous example,

22
00:01:32.794 --> 00:01:36.809
the callMe anytime returns undefined,

23
00:01:36.809 --> 00:01:39.440
right?
&gt;&gt; Bianca Gandolfo: In

24
00:01:39.440 --> 00:01:40.850
this example, it doesn't.

25
00:01:40.850 --> 00:01:43.179
So here, it returned undefined.

26
00:01:44.330 --> 00:01:49.633
When we add the return statement on the
last line there, it's gonna return loops,

27
00:01:49.633 --> 00:01:54.501
because it's gonna return up the stack,
just like we were doing over here.

28
00:02:03.754 --> 00:02:04.538
&gt;&gt; Bianca Gandolfo: So we have the stack

29
00:02:04.538 --> 00:02:05.180
as it returns.

30
00:02:05.180 --> 00:02:08.650
It's gonna pop off and
it's either gonna return something or not.

31
00:02:08.650 --> 00:02:09.964
That's what you can do.

32
00:02:09.964 --> 00:02:14.520
You can either return something or
it just disappears.

33
00:02:14.520 --> 00:02:15.660
Well, you could do side effects.

34
00:02:15.660 --> 00:02:19.488
But in this case, it just disappears.
&gt;&gt; Speaker 2: If we don't use

35
00:02:19.488 --> 00:02:24.016
return until 3 loop,
it will bring us on undefined,

36
00:02:24.016 --> 00:02:26.489
right?
&gt;&gt; Bianca Gandolfo: Yeah, exactly, so

37
00:02:26.489 --> 00:02:29.250
if there's no return,
it's just gonna return undefined,

38
00:02:29.250 --> 00:02:33.400
cuz that's the default.
&gt;&gt; Speaker 2: Up to three loops, and

39
00:02:33.400 --> 00:02:36.297
then return loops, right?
&gt;&gt; Bianca Gandolfo: Sorry, I can't,

40
00:02:36.297 --> 00:02:39.653
say it one more time.
&gt;&gt; Speaker 2: Up to 3 recursion, for

41
00:02:39.653 --> 00:02:45.420
3 times,
it returns undefined on the third one,

42
00:02:45.420 --> 00:02:50.741
it returns the 3 loops, right?
&gt;&gt; Bianca Gandolfo: Yeah,

43
00:02:50.741 --> 00:02:54.659
so the very, very first one returns-
&gt;&gt; Speaker 2: Undefined.

44
00:02:54.659 --> 00:02:55.458
&gt;&gt; Bianca Gandolfo: Loops,

45
00:02:55.458 --> 00:03:00.483
loops actually gets returned first and
then if there

46
00:03:00.483 --> 00:03:05.520
is a return statement here,
this return gets last.

