WEBVTT

1
00:00:00.050 --> 00:00:02.940
&gt;&gt; Bianca Gandolfo: Breadth-first
search is the kind and

2
00:00:02.940 --> 00:00:06.105
humble sibling of depth-first search.

3
00:00:06.105 --> 00:00:11.514
You might guess that depth-first search
is called depth-first search because

4
00:00:11.514 --> 00:00:17.390
we first search deep into the data
structure before going anywhere else.

5
00:00:17.390 --> 00:00:24.504
And breadth-first search has nothing to do
with baking or bread, despite its name.

6
00:00:24.504 --> 00:00:28.560
We're talking about breadth
in terms of wideness, right?

7
00:00:28.560 --> 00:00:31.640
And so you can imagine as
we traverse our graph or

8
00:00:31.640 --> 00:00:37.590
a tree, that we're first going out and
then down, right?

9
00:00:37.590 --> 00:00:42.174
And it looks a bit different for
a tree versus a graph.

10
00:00:42.174 --> 00:00:44.590
And I'm gonna show you a tree first,
cuz I think it's easier.

11
00:00:45.680 --> 00:00:48.430
So here's our tree for
our breadth-first search.

12
00:00:48.430 --> 00:00:53.620
You can see that our path is
going to start at some top node,

13
00:00:53.620 --> 00:00:55.940
right, this is probably our root node.

14
00:00:55.940 --> 00:00:59.210
And then we're gonna go from B,
C, and D, so

15
00:00:59.210 --> 00:01:04.100
breadth, wide, and then E, F, G, H, and I.

16
00:01:04.100 --> 00:01:07.370
And in the order, the specific order,
right, this one's going from left to

17
00:01:07.370 --> 00:01:12.060
right, you get to this side, right?
&gt;&gt; off screen: It looks like it's

18
00:01:12.060 --> 00:01:13.329
reading a book.
&gt;&gt; Bianca Gandolfo: Yeah,

19
00:01:13.329 --> 00:01:16.799
it's kinda like reading a book, and so

20
00:01:16.799 --> 00:01:21.540
that's breadth-first search.
&gt;&gt; Bianca Gandolfo: It's

21
00:01:21.540 --> 00:01:22.770
a different kind of search.

22
00:01:22.770 --> 00:01:28.624
And again, these are the foundational
pieces of bigger and

23
00:01:28.624 --> 00:01:33.200
more complex algorithms
that do cool things.

24
00:01:34.390 --> 00:01:37.090
And I'll talk about at the end
what those things are.

25
00:01:37.090 --> 00:01:42.696
So here's a diagram of breadth-first
search with the grey and

26
00:01:42.696 --> 00:01:48.210
the black and the white concepts,
so white is undiscovered.

27
00:01:49.350 --> 00:01:55.630
We visit, we visit, we explore,
we explore, explore.

28
00:01:57.490 --> 00:01:58.880
Cool, so level by level.

29
00:01:58.880 --> 00:02:03.810
When this is a graph,
we measure the depth of the graph by

30
00:02:03.810 --> 00:02:08.921
how far away it is from a particular node.

31
00:02:08.921 --> 00:02:12.350
So let me look at a picture.

32
00:02:13.820 --> 00:02:20.600
So if we were starting a breadth-first
search from 4, we would explore.

33
00:02:20.600 --> 00:02:22.661
Since this isn't a tree,
this is not a tree,

34
00:02:22.661 --> 00:02:27.440
it doesn't necessarily have a root node or
anything like that, we can start anywhere.

35
00:02:27.440 --> 00:02:34.100
So first we would explore 2, 3,
and 5, before then exploring 6.

36
00:02:34.100 --> 00:02:38.570
And then actually we couldn't explore 1,
because the directions won't allow us.

37
00:02:38.570 --> 00:02:42.250
But hypothetically if this was an
undirected graph, we would then visit 1.

38
00:02:43.640 --> 00:02:48.168
And then the specifics right in between,
do we do 5 first, do we do 2 first or

39
00:02:48.168 --> 00:02:51.250
whatever, is up to your
specific implementation.

40
00:02:51.250 --> 00:02:58.540
And it mirrors pretty closely kind of how
we did in order, pre-order, post-order.

41
00:02:58.540 --> 00:03:03.330
So just like you can tweak
things a little bit, cool?

42
00:03:05.400 --> 00:03:11.060
And so here's a procedure for
breadth-first search.

43
00:03:11.060 --> 00:03:16.825
So the core of breadth-first search
is a queue, which is the opposite

44
00:03:16.825 --> 00:03:21.980
of what the core data structure for
a depth-first search is.

45
00:03:21.980 --> 00:03:22.770
Can someone guess?

46
00:03:22.770 --> 00:03:28.800
So we actually don't explicitly use a data
structure in our depth-first search,

47
00:03:28.800 --> 00:03:33.640
but we're implicitly using
a data structure underneath.

48
00:03:33.640 --> 00:03:37.008
Can you guess which one that is?
&gt;&gt; Bianca Gandolfo: Here's a hint,

49
00:03:37.008 --> 00:03:37.990
it's recursion.

50
00:03:37.990 --> 00:03:41.894
And whenever we do recursion,
when we start pasting things over and

51
00:03:41.894 --> 00:03:45.420
running through the code, what is that?
&gt;&gt; off screen: Stack.

52
00:03:45.420 --> 00:03:46.460
&gt;&gt; Bianca Gandolfo: Stack, yeah.

53
00:03:46.460 --> 00:03:50.010
So the core of depth-first is a stack.

54
00:03:50.010 --> 00:03:56.950
We can do that either explicitly,
by creating a stack, or we can do it by

55
00:03:56.950 --> 00:04:01.886
having recursive calls and the stack
is taken care of for us behind, okay.

56
00:04:01.886 --> 00:04:05.440
So depth-first search we have a queue.

57
00:04:05.440 --> 00:04:09.834
We don't have anything happening
behind the scenes that's giving us

58
00:04:09.834 --> 00:04:12.570
a queue necessarily in this case.

59
00:04:12.570 --> 00:04:14.960
So we'll first create our queue.

60
00:04:14.960 --> 00:04:22.769
And we're gonna queue up things in
order by layer, right, not by depth.

61
00:04:24.110 --> 00:04:25.450
So we have this while loop.

62
00:04:25.450 --> 00:04:29.670
And we say while queue is not empty,
perform the following steps.

63
00:04:29.670 --> 00:04:32.890
You're gonna dequeue,
mark it as discovered.

64
00:04:34.760 --> 00:04:38.566
Enqueue all unvisited neighbors.

65
00:04:38.566 --> 00:04:42.829
And then mark it as explored
once it's unqueued.

66
00:04:43.990 --> 00:04:48.951
So that is sort of
the core of the procedure.

67
00:04:48.951 --> 00:04:57.340
And then we're going to pseudocode
it now that we've peeked, okay

