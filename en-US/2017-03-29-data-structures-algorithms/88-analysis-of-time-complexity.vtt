WEBVTT

1
00:00:00.070 --> 00:00:04.030
&gt;&gt; Bianca Gandolfo: So let's talk about
time complexity of our binary search tree.

2
00:00:04.030 --> 00:00:10.509
What operations have we done so far?

3
00:00:10.509 --> 00:00:12.902
&gt;&gt; off screen male: What
operations have we done the tree?

4
00:00:12.902 --> 00:00:14.352
&gt;&gt; Bianca Gandolfo: So
what methods have we built for it?

5
00:00:14.352 --> 00:00:15.356
&gt;&gt; off screen male: Insert.

6
00:00:15.356 --> 00:00:16.460
&gt;&gt; Bianca Gandolfo: Insert.

7
00:00:16.460 --> 00:00:17.286
&gt;&gt; off screen male: Contains.

8
00:00:17.286 --> 00:00:18.240
&gt;&gt; Bianca Gandolfo: Contains.

9
00:00:18.240 --> 00:00:19.210
&gt;&gt; off screen male: Delete.

10
00:00:19.210 --> 00:00:20.579
&gt;&gt; Bianca Gandolfo: Delete.

11
00:00:20.579 --> 00:00:21.536
&gt;&gt; off screen male: And then we had the-
&gt;&gt; off screen female: We had all

12
00:00:21.536 --> 00:00:22.059
the traversals.

13
00:00:22.059 --> 00:00:26.319
&gt;&gt; off screen male: Traversals, yeah,
the depth [INAUDIBLE] traversals.

14
00:00:26.319 --> 00:00:33.332
&gt;&gt; Bianca Gandolfo: Yep, yep, so for
insert, what is the worst case runtime?

15
00:00:36.961 --> 00:00:37.851
&gt;&gt; off screen male: Linear?

16
00:00:37.851 --> 00:00:41.140
&gt;&gt; Bianca Gandolfo: Linear,
why is it linear?

17
00:00:41.140 --> 00:00:44.350
&gt;&gt; off screen male: If you had to go
through every single node to find

18
00:00:44.350 --> 00:00:46.540
the right place to put it.

19
00:00:46.540 --> 00:00:49.250
Well, you wouldn't really do that
because it's already sorted.

20
00:00:50.450 --> 00:00:51.540
&gt;&gt; Bianca Gandolfo: Well, it's linear for

21
00:00:51.540 --> 00:00:56.366
the case where it's basically
a linked list, right?

22
00:00:56.366 --> 00:01:01.404
If it's just 11, 7, 5, 3 like that,

23
00:01:01.404 --> 00:01:06.584
it would just be essentially
a linked list and

24
00:01:06.584 --> 00:01:09.853
so to get to insert maybe 2,

25
00:01:09.853 --> 00:01:14.380
then that would be a linear operation.

26
00:01:14.380 --> 00:01:17.784
So that's the worst case.

27
00:01:17.784 --> 00:01:21.337
&gt;&gt; off screen female: It's logarithmic,
isn't it?

28
00:01:21.337 --> 00:01:23.629
&gt;&gt; Bianca Gandolfo: It's
logarithmic in the average-

29
00:01:23.629 --> 00:01:24.269
&gt;&gt; off screen female: In the average case.

30
00:01:24.269 --> 00:01:26.390
&gt;&gt; Bianca Gandolfo: In the average case,
yeah.

31
00:01:26.390 --> 00:01:29.520
And that's because of the binary nature
of the binary search tree, right?

32
00:01:29.520 --> 00:01:33.230
We want to be able to cut in half
our problem every single time.

33
00:01:33.230 --> 00:01:36.660
And what that requires is
a balanced binary search tree.

34
00:01:36.660 --> 00:01:37.559
So there's a bunch of

35
00:01:39.290 --> 00:01:42.620
algorithms that will in different kinds
of trees that will keep that balance.

36
00:01:42.620 --> 00:01:46.500
But our binary search tree does not have

37
00:01:47.580 --> 00:01:50.906
any method that keeps it balanced and
keeps it from becoming a link list.

38
00:01:50.906 --> 00:01:57.360
So tree's balance when the levels

39
00:01:58.810 --> 00:02:05.070
in any given branch are no
more than one further.

40
00:02:05.070 --> 00:02:09.750
So if three had two and then one,
that would make it unbalanced.

41
00:02:09.750 --> 00:02:14.361
But if three only had a two sticking out,
it would still be considered balanced.

42
00:02:16.357 --> 00:02:17.307
&gt;&gt; Bianca Gandolfo: Does that make sense?

43
00:02:17.307 --> 00:02:22.074
So it's the degree in which
it's from the last layer.

44
00:02:27.897 --> 00:02:31.075
&gt;&gt; Bianca Gandolfo: And with balance comes

45
00:02:35.606 --> 00:02:39.353
&gt;&gt; Bianca Gandolfo: Faster insert and

46
00:02:39.353 --> 00:02:41.610
removal.

47
00:02:41.610 --> 00:02:44.628
Cool, so we insert, what else do we do?

48
00:02:47.843 --> 00:02:48.680
&gt;&gt; Bianca Gandolfo: What else do we do?

49
00:02:49.850 --> 00:02:51.480
We inserted, we traversed.

50
00:02:51.480 --> 00:02:55.552
What's the runtime of any traversal?

51
00:02:55.552 --> 00:02:56.092
&gt;&gt; off screen female: Linear.

52
00:02:56.092 --> 00:02:57.793
&gt;&gt; Bianca Gandolfo: Linear.

53
00:02:57.793 --> 00:03:00.512
Why?

54
00:03:00.512 --> 00:03:02.440
&gt;&gt; off screen female: Because
they have to visit each one.

55
00:03:02.440 --> 00:03:03.034
&gt;&gt; Bianca Gandolfo: Yep.

56
00:03:03.034 --> 00:03:07.040
So it's just the nature of a traversal
is you explore every node in a tree and

57
00:03:07.040 --> 00:03:09.270
because of that,
it's gonna be linear time.

58
00:03:10.640 --> 00:03:12.060
Cool.

59
00:03:12.060 --> 00:03:12.925
What about our delete?

60
00:03:17.029 --> 00:03:22.420
&gt;&gt; off screen male: So
the delete itself should be constant?

61
00:03:22.420 --> 00:03:26.620
But you might have to search to
perform delete, which could be linear?

62
00:03:26.620 --> 00:03:30.920
&gt;&gt; Bianca Gandolfo: So
let's look at our picture again.

63
00:03:30.920 --> 00:03:36.470
So if we wanted to delete 18, so first,
you're right, we have to get there.

64
00:03:36.470 --> 00:03:38.340
Right?
So searching for it.

65
00:03:38.340 --> 00:03:43.184
And the worst case, that's gonna be
linear if this is a link list, right?

66
00:03:45.399 --> 00:03:49.172
&gt;&gt; Bianca Gandolfo: And then yeah,
the delete action itself, right,

67
00:03:49.172 --> 00:03:55.241
just swapping and reassigning more or less
is gonna be a constant time operation.

68
00:04:02.070 --> 00:04:02.710
&gt;&gt; Bianca Gandolfo: Cool.

69
00:04:02.710 --> 00:04:08.270
Okay, all right, great.

70
00:04:08.270 --> 00:04:11.954
So if you are intrigued
by binary trees and

71
00:04:11.954 --> 00:04:16.920
you're like I wanna have
a more performant one.

72
00:04:16.920 --> 00:04:21.140
Performant is not a real word but
we use it in software engineering.

73
00:04:21.140 --> 00:04:21.850
I don't know why.

74
00:04:21.850 --> 00:04:27.319
But an AVL tree, a Red-Black tree, and
Splay trees are all balanced trees,

75
00:04:27.319 --> 00:04:30.930
that will optimize your
binary search tree.

76
00:04:30.930 --> 00:04:32.000
So look into them.

77
00:04:32.000 --> 00:04:34.310
They're pretty cool and they're fun.

78
00:04:35.740 --> 00:04:36.960
Cool, so that's binary search trees.

79
00:04:36.960 --> 00:04:37.960
We went through a lot.

80
00:04:37.960 --> 00:04:41.530
And the delete step is a doozy, right?

81
00:04:42.730 --> 00:04:44.990
It's doable but there are a lot
of little moving pieces there.

