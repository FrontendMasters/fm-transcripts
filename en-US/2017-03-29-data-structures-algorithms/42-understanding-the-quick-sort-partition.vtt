WEBVTT

1
00:00:00.360 --> 00:00:01.830
&gt;&gt; Bianca Gandolfo: Let's
talk about the partition.

2
00:00:01.830 --> 00:00:04.680
So there's two main
parts of the partition,

3
00:00:04.680 --> 00:00:09.190
there's the pivot point which is
the element that we choose at the end.

4
00:00:09.190 --> 00:00:13.948
And then there's the pivot
location which is where that,

5
00:00:13.948 --> 00:00:20.380
the four wound up in it's final
resting place and that's sorted.

6
00:00:20.380 --> 00:00:28.110
So that is the core of the partition step.
&gt;&gt; Bianca Gandolfo: Cool,

7
00:00:28.110 --> 00:00:32.660
can someone take a stab at re-explaining
to me what exactly is happening in

8
00:00:32.660 --> 00:00:39.010
the partition?
&gt;&gt; Speaker 2: So

9
00:00:39.010 --> 00:00:43.270
you pick an element from your list.

10
00:00:43.270 --> 00:00:48.503
And then you sort what's
left of it into greater and

11
00:00:48.503 --> 00:00:51.430
smaller than that element.

12
00:00:53.820 --> 00:01:00.010
And the pivot point moves to its
correct location in the sort.

13
00:01:00.010 --> 00:01:03.604
Everything else is only sorted so far
as if it's larger than the pivot point,

14
00:01:03.604 --> 00:01:06.328
it's on the right,
if it's smaller, it's on the left?

15
00:01:06.328 --> 00:01:12.910
&gt;&gt; Bianca Gandolfo: Yep, exactly, cool.

16
00:01:12.910 --> 00:01:17.230
Can I have,
&gt;&gt; Bianca Gandolfo: One and a half

17
00:01:17.230 --> 00:01:25.810
clarifying questions from the audience?
&gt;&gt; Bianca Gandolfo: So

18
00:01:25.810 --> 00:01:27.510
I have questions pretty easy.

19
00:01:27.510 --> 00:01:32.510
It's like a question that you
might already know the answer to.

20
00:01:32.510 --> 00:01:34.082
Sure.
&gt;&gt; Speaker 3: What's a pivot?

21
00:01:34.082 --> 00:01:35.830
&gt;&gt; Bianca Gandolfo: What is a pivot?

22
00:01:35.830 --> 00:01:39.680
The pivot itself you can
think of as a swap, yeah.

23
00:01:41.220 --> 00:01:42.410
&gt;&gt; Speaker 2: So theoretically it could be

24
00:01:42.410 --> 00:01:45.330
anything, right, you can?
&gt;&gt; Bianca Gandolfo: Like the pivot

25
00:01:45.330 --> 00:01:46.420
point?
&gt;&gt; Speaker 2: Yeah.

26
00:01:46.420 --> 00:01:47.020
&gt;&gt; Bianca Gandolfo: Yeah, you can choose

27
00:01:47.020 --> 00:01:49.500
anything, there's all kinds of
theories about which one to choose,

28
00:01:49.500 --> 00:01:52.540
which one is better, depends if you're
&gt;&gt; Speaker 2: But in this case,

29
00:01:52.540 --> 00:01:54.200
you've picked the last one?
&gt;&gt; Bianca Gandolfo: The last one,

30
00:01:54.200 --> 00:01:56.100
yeah, yeah.

31
00:01:56.100 --> 00:02:01.140
Last one, the first one, it's usually
a sort of entry level quick sort and

32
00:02:02.180 --> 00:02:03.620
it works fine.

33
00:02:03.620 --> 00:02:10.020
Unless your list is mostly sorted or
completely sorted already.

34
00:02:10.020 --> 00:02:14.820
In which case, that's like the worst
thing that you could possibly do.

35
00:02:14.820 --> 00:02:17.680
Hopefully you would know if your
list is already sorted though.

36
00:02:17.680 --> 00:02:19.890
And you probably wouldn't
choose a quick sort.

37
00:02:19.890 --> 00:02:24.920
You actually wouldn't need to
sort it at all, no sorting, cool.

38
00:02:24.920 --> 00:02:29.920
So that's a partition, so that's
where the action is happening, right?

39
00:02:29.920 --> 00:02:33.648
In the merge the action is
happening when you're combining it,

40
00:02:33.648 --> 00:02:36.834
in the quick sort the action
happens in the partition.

41
00:02:36.834 --> 00:02:40.850
Okay, we're gonna keep going, cool.

42
00:02:40.850 --> 00:02:45.360
So here's our goal, we wanna move the
pivot to its sorted place in the array.

43
00:02:45.360 --> 00:02:48.700
So we choose a pivot point,
it's usually gonna be the last element.

44
00:02:48.700 --> 00:02:51.310
But again,
we have all kinds of debates around that.

45
00:02:52.470 --> 00:02:57.900
So we start the pivot location at the
beginning, iterate through the array, and

46
00:02:57.900 --> 00:03:02.800
swap them so that the larger ones
are to the right and the ones on

47
00:03:02.800 --> 00:03:07.101
the left you just keep them to the left.
&gt;&gt; Speaker 4: Can you say

48
00:03:07.101 --> 00:03:11.560
that again?
&gt;&gt; Bianca Gandolfo: Sure.

49
00:03:12.790 --> 00:03:16.830
So, we choose the last element,
that was our 4.

50
00:03:16.830 --> 00:03:20.450
We start at the beginning of our array,
and we loop through and compare them.

51
00:03:21.570 --> 00:03:27.270
And if one is larger, you basically move,

52
00:03:29.150 --> 00:03:32.450
you like move it over.
&gt;&gt; Speaker 4: And

53
00:03:32.450 --> 00:03:36.960
that one goes to the end or?
&gt;&gt; Bianca Gandolfo: It can,

54
00:03:36.960 --> 00:03:38.350
it depends on the implementation.

55
00:03:38.350 --> 00:03:44.280
But basically the way you want
the pivot to move over one,

56
00:03:44.280 --> 00:03:46.440
so there's one to the left of it,
immediately, so

57
00:03:46.440 --> 00:03:48.620
you have to choose what you're
gonna do with that one.

58
00:03:48.620 --> 00:03:53.810
Whether you put it in the first
place might be the easiest one,

59
00:03:53.810 --> 00:03:56.240
but there are other ways to do it as well.

60
00:03:56.240 --> 00:03:59.700
And then you wanna make sure that
whatever's greater is on the right.

61
00:04:01.610 --> 00:04:04.013
Because it's going to be
kind of inching it's way.

62
00:04:04.013 --> 00:04:05.560
And I can show you the picture.

63
00:04:07.520 --> 00:04:11.560
So you see how the 4 is inching its way.

64
00:04:11.560 --> 00:04:13.940
It goes to the left one each time.

65
00:04:14.940 --> 00:04:16.678
And in this implementation,
we're just swapping it.

66
00:04:16.678 --> 00:04:20.348
So, when 3 is less, so we keep it there.

67
00:04:20.348 --> 00:04:26.200
7 is greater, so
we move it to the last one.

68
00:04:26.200 --> 00:04:32.372
However, we don't want 4 to be in 7's
place, we want it to be one over,

69
00:04:32.372 --> 00:04:35.120
so we swap the 4 with the 5.
&gt;&gt; Speaker 5: So

70
00:04:35.120 --> 00:04:40.580
how does the 7 get placed to the right
of the flow, does it create a slot,

71
00:04:40.580 --> 00:04:41.990
move 7 and then delete that?
&gt;&gt; Bianca Gandolfo: So

72
00:04:41.990 --> 00:04:44.680
we don't create the slot,
so the slot already exists.

73
00:04:44.680 --> 00:04:48.390
So what you need to do is you need
to move the 7 where the 4 is.

74
00:04:48.390 --> 00:04:52.440
You probably have to save a value
outside while you're swapping, right?

75
00:04:52.440 --> 00:04:56.851
Swap it, and then make sure you
move the 4 over one to the left and

76
00:04:56.851 --> 00:04:58.260
swap it with the 5.

77
00:04:58.260 --> 00:05:00.336
Does that make sense?

78
00:05:00.336 --> 00:05:03.200
So your 4 should only
move over one to the left

79
00:05:03.200 --> 00:05:04.390
each time.
&gt;&gt; Speaker 5: So

80
00:05:04.390 --> 00:05:07.320
it's kind of like swapping out?
&gt;&gt; Bianca Gandolfo: Yeah.

81
00:05:07.320 --> 00:05:08.970
And I know these arrows are a little bit

82
00:05:08.970 --> 00:05:11.923
confusing.
&gt;&gt; Bianca Gandolfo: But,

83
00:05:14.830 --> 00:05:15.350
&gt;&gt; Bianca Gandolfo: I know, it's kind

84
00:05:15.350 --> 00:05:20.787
of one of those brain hurty things.
&gt;&gt; Speaker 5: How do you choose

85
00:05:20.787 --> 00:05:26.750
you choose 4 and
how do you choose the other element?

86
00:05:26.750 --> 00:05:29.580
It's randomly or just you?
&gt;&gt; Bianca Gandolfo: You start

87
00:05:29.580 --> 00:05:33.465
at the beginning.
&gt;&gt; Bianca Gandolfo: Yeah, so you start, so

88
00:05:33.465 --> 00:05:41.650
4 is your pivot point that you want
to end up in its final place, right?

89
00:05:41.650 --> 00:05:44.920
And we know that it's in its final
place when everything that's less is to

90
00:05:44.920 --> 00:05:47.510
the left, and
everything to the right is greater.

91
00:05:49.010 --> 00:05:52.375
And so we wanna pivot or swap all of our

92
00:05:52.375 --> 00:05:57.250
other,
&gt;&gt; Bianca Gandolfo: Elements

93
00:05:57.250 --> 00:06:02.230
to be in the right place.
&gt;&gt; Speaker 5: Yeah, my question is,

94
00:06:02.230 --> 00:06:06.460
just to be,
we choose us as the pivot we worked for?

95
00:06:06.460 --> 00:06:10.923
And how do we choose
the other element to swap,

96
00:06:10.923 --> 00:06:15.060
now we see that we are swapping 7 and 5?.

97
00:06:15.060 --> 00:06:19.420
What if we, instead of that,
we use 8 or 9 as a beginning?

98
00:06:19.420 --> 00:06:22.900
Is there anything, is randomly, or

99
00:06:22.900 --> 00:06:24.225
just you choose?
&gt;&gt; Bianca Gandolfo: So

100
00:06:24.225 --> 00:06:29.810
the easiest way to do it is to have
your pivot point B at the last,

101
00:06:29.810 --> 00:06:33.020
the end, and then start your
iteration from the beginning.

102
00:06:34.300 --> 00:06:38.590
But there's lots of debate over
the specifics around that.

103
00:06:38.590 --> 00:06:43.040
But this implementation and the one that
we're gonna do in the exercise is going to

104
00:06:43.040 --> 00:06:47.580
recommend that you start at the back and
then you iterate from the beginning and

105
00:06:47.580 --> 00:06:53.630
compare.
&gt;&gt; Speaker 6: So

106
00:06:53.630 --> 00:06:57.546
you're shifting like three numbers
around until you get to the end?

107
00:06:57.546 --> 00:06:58.091
&gt;&gt; Bianca Gandolfo: Yeah.

108
00:06:58.091 --> 00:06:59.854
&gt;&gt; Speaker 6: There's a 5

109
00:06:59.854 --> 00:07:03.940
in the wrong
&gt;&gt; Bianca Gandolfo: So

110
00:07:03.940 --> 00:07:06.050
we do one more.
&gt;&gt; Speaker 6: So

111
00:07:06.050 --> 00:07:09.200
you're just trying to get all
the small things on one side and

112
00:07:09.200 --> 00:07:11.280
all the big things on the other side?
&gt;&gt; Bianca Gandolfo: Yep.

113
00:07:11.280 --> 00:07:12.797
&gt;&gt; Speaker 6: And that's it.

114
00:07:12.797 --> 00:07:13.685
&gt;&gt; Bianca Gandolfo: But why,

115
00:07:13.685 --> 00:07:18.340
why?
&gt;&gt; Speaker 6: Because then you have the

116
00:07:18.340 --> 00:07:22.310
smaller set to sort on each side of it?
&gt;&gt; Bianca Gandolfo: That's true.

117
00:07:22.310 --> 00:07:27.960
But also, if everything on the left
of the pivot location is smaller,

118
00:07:27.960 --> 00:07:30.380
and everything to the right of
the pivot location is greater,

119
00:07:30.380 --> 00:07:34.220
you know that that number,
4, is in it's final place.

120
00:07:34.220 --> 00:07:35.660
You know,
you don't need to move it anymore.

121
00:07:35.660 --> 00:07:36.885
&gt;&gt; Speaker 6: Okay, you don't need

122
00:07:36.885 --> 00:07:38.180
to move the 4 any more.

123
00:07:38.180 --> 00:07:41.000
That makes sense.
&gt;&gt; Bianca Gandolfo: And also, now we have

124
00:07:41.000 --> 00:07:46.400
two smaller things to work with in which
we're gonna do the same thing recursively.

125
00:07:47.540 --> 00:07:51.481
Which that's kinda where
the mind goes whoa so many.

126
00:07:51.481 --> 00:07:55.825
But that's the basic process.
&gt;&gt; Speaker 5: Kindly explain the arrow,

127
00:07:55.825 --> 00:08:00.410
just you moved 4, and why you moved 5 to-
&gt;&gt; Bianca Gandolfo: Yeah.

128
00:08:00.410 --> 00:08:01.065
&gt;&gt; Speaker 5: Yeah,

129
00:08:01.065 --> 00:08:05.410
you moved 7 to place of 4?
&gt;&gt; Bianca Gandolfo: Totally,

130
00:08:05.410 --> 00:08:08.109
yeah.
&gt;&gt; Speaker 5: So

131
00:08:08.109 --> 00:08:12.378
I think you see number 3 is less than 4,
and go to 7.

132
00:08:12.378 --> 00:08:16.080
7 is greater than,
you move 7 to the right.

133
00:08:16.080 --> 00:08:20.830
Why you jump to 5 to take
to them 7 place next?

134
00:08:22.530 --> 00:08:24.304
&gt;&gt; Bianca Gandolfo: So your question is,

135
00:08:24.304 --> 00:08:27.356
why don't we just switch 4 and 7 and

136
00:08:27.356 --> 00:08:30.334
then just keep 5 where it is?
&gt;&gt; Speaker 5: No,

137
00:08:30.334 --> 00:08:35.889
if you start from the beginning,
3 is less than 4,

138
00:08:35.889 --> 00:08:41.590
and you jump to 7,
you swap 7 to the right side of 4.

139
00:08:41.590 --> 00:08:47.560
And the arrow shows 5 is
taking to place of 7, why?

140
00:08:47.560 --> 00:08:53.374
So instead of being that
leaving 5 right there and

141
00:08:53.374 --> 00:08:57.120
go to the next to 7, that is 8.

142
00:08:57.120 --> 00:09:00.844
Like that, why you start at 7 and

143
00:09:00.844 --> 00:09:04.760
jump to 5 in the likes?
&gt;&gt; Bianca Gandolfo: Yeah,

144
00:09:04.760 --> 00:09:08.090
so the question is why
are we even messing with 5?

145
00:09:08.090 --> 00:09:10.960
Is that putting it out of order and
doing something weird?

146
00:09:10.960 --> 00:09:13.640
The answer is not really.

147
00:09:13.640 --> 00:09:19.667
So when we add 7 to the end,
we're not just tacking it to the end,

148
00:09:19.667 --> 00:09:24.940
what we're actually doing is
we are swapping 7 with 4.

149
00:09:24.940 --> 00:09:27.360
So see the first thing that
happens is this bottom arrow.

150
00:09:27.360 --> 00:09:29.240
We say 7 with 4, right?

151
00:09:29.240 --> 00:09:32.390
So now 4 is over here,
which is what we don't want.

152
00:09:33.700 --> 00:09:40.180
We want to make sure that 4
actually goes to the proper place.

153
00:09:40.180 --> 00:09:43.930
We want 4 to only move to
the left once each time.

154
00:09:43.930 --> 00:09:45.160
We don't want to mix 4 up.

155
00:09:45.160 --> 00:09:47.270
4 is in a special place.

156
00:09:47.270 --> 00:09:50.560
We wanna make sure that it's consistent
and that we don't lose track of it.

157
00:09:51.990 --> 00:09:57.970
So we move 7 over,
we move 4 to the next left and

158
00:09:57.970 --> 00:10:00.860
then whatever is in that spot
is gonna be swapped with 7.

159
00:10:00.860 --> 00:10:03.960
And the specific order in which
you to do that is up to you, but

160
00:10:03.960 --> 00:10:08.273
those are the three things you wanna do.
&gt;&gt; Speaker 6: What if you just happen to

161
00:10:08.273 --> 00:10:12.411
select the largest number
as your partition and

162
00:10:12.411 --> 00:10:16.352
it was already to the right most place?
&gt;&gt; Bianca Gandolfo: What do you think

163
00:10:16.352 --> 00:10:18.170
happens?
&gt;&gt; Speaker 6: And it would get nowhere.

164
00:10:18.170 --> 00:10:23.190
Well, I mean, it would recurse, right?

165
00:10:23.190 --> 00:10:26.040
So then you would just
partition the next section.

166
00:10:26.040 --> 00:10:26.860
&gt;&gt; Bianca Gandolfo: Yeah, what if you got

167
00:10:26.860 --> 00:10:31.130
the largest one every single time?
&gt;&gt; Speaker 6: It would not be very fast.

168
00:10:31.130 --> 00:10:31.810
&gt;&gt; Bianca Gandolfo: Yeah, right?

169
00:10:31.810 --> 00:10:32.575
&gt;&gt; Speaker 6: And I mean, that's

170
00:10:32.575 --> 00:10:33.476
what I'm thinking of.

171
00:10:33.476 --> 00:10:37.190
But you would have to
have somewhat to do that.

172
00:10:37.190 --> 00:10:37.830
[LAUGH]
&gt;&gt; Bianca Gandolfo: Yeah and

173
00:10:37.830 --> 00:10:40.191
that's the argument behind it,

174
00:10:40.191 --> 00:10:44.830
it's like yeah quick sort in
the worst case is n squared.

175
00:10:44.830 --> 00:10:45.860
Absolutely.

176
00:10:45.860 --> 00:10:47.010
Totally terrible.

177
00:10:47.010 --> 00:10:50.760
However, the chances of it
happening are pretty low.

178
00:10:50.760 --> 00:10:56.130
And there's lots of mathematically proofs
that are beyond the scope of my knowledge.

179
00:10:56.130 --> 00:10:58.830
But you're welcome to,
if you're into that, look it up.

180
00:10:58.830 --> 00:11:01.721
I'm gonna answer some questions here.
&gt;&gt; Speaker 7: That would mean your list is

181
00:11:01.721 --> 00:11:03.380
already sorted, right?

182
00:11:04.470 --> 00:11:06.860
If every time the last
one was the biggest one.

183
00:11:06.860 --> 00:11:08.890
&gt;&gt; Bianca Gandolfo: Yep, yep yep, exactly.

184
00:11:08.890 --> 00:11:11.870
So why is it called quick sort and
not partition sort?

185
00:11:11.870 --> 00:11:12.830
That is a great question.

186
00:11:12.830 --> 00:11:16.990
We can make a movement and call it
partition sort, make it really clear.

187
00:11:16.990 --> 00:11:21.757
Quick sort is the most popular sort,
and it's considered the fastest, so

188
00:11:21.757 --> 00:11:23.660
we call it quick dort I think.

189
00:11:23.660 --> 00:11:26.310
I don't know the history of the name,
but I'm gonna go with that.

190
00:11:27.600 --> 00:11:32.290
So, Brett ask, so,
we're comparing 4 and 7 the first time?

191
00:11:32.290 --> 00:11:36.090
The very very first time we're actually
comparing 3 with 4 and we're like, well,

192
00:11:36.090 --> 00:11:38.570
actually that's smaller, BS.

193
00:11:38.570 --> 00:11:42.875
And then the next time that we actually
care about when a swap happens is the 7

194
00:11:42.875 --> 00:11:43.559
and the 4.

195
00:11:43.559 --> 00:11:47.299
So yes, that's true in Brett,

196
00:11:47.299 --> 00:11:51.326
calling people like numbers now.

197
00:11:51.326 --> 00:11:55.934
[LAUGH] Okay, how are we feeling about

198
00:11:55.934 --> 00:12:01.070
this?
&gt;&gt; Bianca Gandolfo: Are we closer in

199
00:12:01.070 --> 00:12:06.130
our minds, in our hearts, in our souls,
and all those parts of ourselves?

