WEBVTT

1
00:00:00.680 --> 00:00:03.400
&gt;&gt; Bianca Gandolfo: Do you guys want to
take a stab at representing this into

2
00:00:03.400 --> 00:00:05.350
some real Java scripts?

3
00:00:05.350 --> 00:00:09.970
Again, there's some complexity here, and
I'm gonna encourage you to make it easy,

4
00:00:09.970 --> 00:00:12.780
you know what I mean?

5
00:00:12.780 --> 00:00:17.020
You don't need to hash anything or
whatever, just do it the easy way.

6
00:00:18.130 --> 00:00:22.600
Whether you want to initialize your
matrix, or add a column row everytime.

7
00:00:23.720 --> 00:00:25.460
Or whatever resize it.

8
00:00:25.460 --> 00:00:29.640
You can make those decisions
however you want to design this.

9
00:00:29.640 --> 00:00:35.340
The idea here is we wanna explore what
it takes, what are the constraints?

10
00:00:35.340 --> 00:00:36.450
What comes easy?

11
00:00:36.450 --> 00:00:37.130
What's harder?

12
00:00:38.230 --> 00:00:40.990
And do we like it?

13
00:00:40.990 --> 00:00:45.630
Maybe for you for
the things that you wanna do.

14
00:00:45.630 --> 00:00:48.480
The JDC matrix works just fine.

15
00:00:48.480 --> 00:00:50.200
It's simpler in your mind.

16
00:00:50.200 --> 00:00:52.760
Maybe, maybe not.

17
00:00:52.760 --> 00:00:56.380
We just wanna get familiar with
this representation of the graph.

18
00:00:56.380 --> 00:00:59.210
It's the simplest representation.

19
00:01:04.140 --> 00:01:08.710
No, no we'll go with this,
it's the simplest one, I don't know.

20
00:01:10.310 --> 00:01:11.560
Yeah, what else do I wanna say?

21
00:01:15.800 --> 00:01:19.770
One last point I wanna make is do you
know what the space complexity of this

22
00:01:19.770 --> 00:01:23.630
is?
&gt;&gt; Speaker 2: The what now?

23
00:01:23.630 --> 00:01:25.020
&gt;&gt; Speaker 3: N squared.

24
00:01:25.020 --> 00:01:26.140
&gt;&gt; Bianca Gandolfo: Mm-hm, n squared.

25
00:01:27.380 --> 00:01:28.020
Space complex.

26
00:01:28.020 --> 00:01:32.820
So we talked a lot about time complexity
and that's usually what we care about but

27
00:01:32.820 --> 00:01:34.330
space complexity is also a thing.

28
00:01:34.330 --> 00:01:37.780
It's how much space does it
take to represent your data so

29
00:01:37.780 --> 00:01:43.480
as your data doubles, how much more space
does it take to store these six nodes?

30
00:01:43.480 --> 00:01:49.840
So we have 6 nodes but we have to have 6
times 6, 36 bases here, in memory, right?

31
00:01:49.840 --> 00:01:54.422
Because they're arrays,
they're saving a little spot in memory,

32
00:01:54.422 --> 00:01:57.823
or a big spot, depending,
right, for this data.

33
00:01:57.823 --> 00:02:02.542
And so,
&gt;&gt; Bianca Gandolfo: It's a lot of data,

34
00:02:02.542 --> 00:02:08.097
especially if we don't
have a lot of connections,

35
00:02:08.097 --> 00:02:13.652
if it's just mostly zeros,
we call that a sparsely

36
00:02:13.652 --> 00:02:18.324
connected graph, or loosely connected.

37
00:02:18.324 --> 00:02:20.296
We just have a bunch of zeros,
that's a waste of space, so

38
00:02:20.296 --> 00:02:23.260
that's another thing to think about
when thinking about adjacency matrix.

39
00:02:23.260 --> 00:02:27.069
But we'll review that in a second,
I want you guys to jump into the code and

40
00:02:28.350 --> 00:02:34.930
have a feel for adding nodes and deleting
nodes, or not deleting, adding edges.

41
00:02:34.930 --> 00:02:36.700
We already know what it's
like to delete nodes.

42
00:02:36.700 --> 00:02:39.550
We're not going there quite yet.

43
00:02:39.550 --> 00:02:44.660
We're still traumatized from
deleting our binary search nodes so

44
00:02:46.400 --> 00:02:50.760
adding nodes, adding edges,
representing our matrix somehow.

