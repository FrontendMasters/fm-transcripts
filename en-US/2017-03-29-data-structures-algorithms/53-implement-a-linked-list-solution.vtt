WEBVTT

1
00:00:00.170 --> 00:00:02.290
&gt;&gt; Bianca Gandolfo: So
here is our linked list constructor.

2
00:00:04.371 --> 00:00:06.510
&gt;&gt; Bianca Gandolfo: I'm gonna
pass in the value here.

3
00:00:08.540 --> 00:00:12.436
&gt;&gt; Bianca Gandolfo: If, you don't pass
anything we have a catch there saying

4
00:00:12.436 --> 00:00:13.580
don't do that.

5
00:00:15.949 --> 00:00:21.283
&gt;&gt; Bianca Gandolfo: So,
&gt;&gt; Bianca Gandolfo: We're setting our

6
00:00:21.283 --> 00:00:26.990
head, right head value is
gonna equal the value.

7
00:00:26.990 --> 00:00:29.540
And then the next is gonna
be initialize to null.

8
00:00:31.050 --> 00:00:34.810
Cool, so we have two constructors here,
we have our node constructor, and

9
00:00:34.810 --> 00:00:36.411
then we have our linked list constructor.

10
00:00:38.630 --> 00:00:44.095
&gt;&gt; Bianca Gandolfo: Cool, and then we're
setting our tail to head because when

11
00:00:44.095 --> 00:00:50.230
we start with a linked list of 1,
the head is also the tail, cool?

12
00:00:52.260 --> 00:00:57.930
All right so this is a tricky one, so
let's make a for each for our linked list.

13
00:00:57.930 --> 00:01:01.987
If we think about how we
implement a foreach for an array,

14
00:01:01.987 --> 00:01:04.110
it has a few main components.

15
00:01:04.110 --> 00:01:06.100
Let me type this out for us, actually.

16
00:01:07.250 --> 00:01:08.410
How do I?
There we go.

17
00:01:09.900 --> 00:01:12.230
&gt;&gt; Bianca Gandolfo: So
we have a few main components.

18
00:01:19.130 --> 00:01:21.600
&gt;&gt; Bianca Gandolfo: But
we're gonna implement this.

19
00:01:21.600 --> 00:01:27.041
So if we have maybe some loop,
and we want to pass

20
00:01:27.041 --> 00:01:32.212
it some function,
that takes the value, and

21
00:01:32.212 --> 00:01:37.538
I don't know console.logs to value, okay?

22
00:01:38.574 --> 00:01:40.919
&gt;&gt; Bianca Gandolfo: myCall back.

23
00:01:42.418 --> 00:01:45.226
&gt;&gt; Bianca Gandolfo: Yeah, cool.

24
00:01:50.877 --> 00:01:51.800
&gt;&gt; Bianca Gandolfo: Okay.

25
00:01:54.045 --> 00:01:56.995
&gt;&gt; Bianca Gandolfo: So if we're gonna
implement our own foreach here.

26
00:02:05.465 --> 00:02:08.015
&gt;&gt; Bianca Gandolfo: Right it's
gonna take some call back.

27
00:02:08.015 --> 00:02:10.065
Let's pass the array to make it easier.

28
00:02:12.025 --> 00:02:12.945
&gt;&gt; Bianca Gandolfo: And our call back.

29
00:02:14.110 --> 00:02:16.310
Is everyone following here?

30
00:02:16.310 --> 00:02:23.344
&gt;&gt; Bianca Gandolfo: We would pass it,
myArray,

31
00:02:23.344 --> 00:02:28.919
and then myCallback.

32
00:02:28.919 --> 00:02:29.892
Cool?

33
00:02:31.106 --> 00:02:31.862
&gt;&gt; Bianca Gandolfo: So
we're running in here.

34
00:02:31.862 --> 00:02:36.615
So now what we're gonna do, we're gonna
write the guts of this foreach for

35
00:02:36.615 --> 00:02:37.300
an array.

36
00:02:37.300 --> 00:02:43.378
And then we're gonna think about how
this is different using a linked list.

37
00:02:45.020 --> 00:02:48.454
&gt;&gt; Bianca Gandolfo: So the first thing
you probably wanna do is loop through

38
00:02:48.454 --> 00:02:52.350
our array and we're going to
call our callback on each value.

39
00:02:53.540 --> 00:02:59.630
So the idea is for the first loop,
you wanna pass 1, for the second loop,

40
00:02:59.630 --> 00:03:04.290
2, and then, you guessed it, for
the third one we're gonna pass 3.

41
00:03:04.290 --> 00:03:10.200
So at the end of the day, we want
it to print out 1, 2, and 3, right?

42
00:03:10.200 --> 00:03:12.287
In that order.

43
00:03:17.150 --> 00:03:18.990
&gt;&gt; Bianca Gandolfo: So
we wanna write a for loop, right?

44
00:03:22.216 --> 00:03:26.146
&gt;&gt; Bianca Gandolfo: That
is the les than arr.length,

45
00:03:29.196 --> 00:03:30.574
&gt;&gt; Bianca Gandolfo: Okay.

46
00:03:33.786 --> 00:03:39.276
&gt;&gt; Bianca Gandolfo: And now we wanna call
our call back on each value of our array,

47
00:03:39.276 --> 00:03:40.050
right.

48
00:03:40.050 --> 00:03:42.250
So array at i, that's gonna be our value.

49
00:03:42.250 --> 00:03:46.640
When it's zero,
the value itself is going to be one, etc.

50
00:03:46.640 --> 00:03:49.840
And this value is gonna get
passed into our callback.

51
00:03:49.840 --> 00:03:53.607
So val is now one, and
we'll just console.log val,

52
00:03:53.607 --> 00:03:56.046
we'll pop back out, loop again.

53
00:03:58.540 --> 00:04:02.877
&gt;&gt; Bianca Gandolfo: This is gonna be two,
meaning this is going to be 2,

54
00:04:02.877 --> 00:04:07.890
consolelog 2, and
then we pop back out over here.

55
00:04:07.890 --> 00:04:08.650
Everyone clear how this works?

56
00:04:11.370 --> 00:04:15.340
&gt;&gt; Bianca Gandolfo: Cuz it is a very basic
implementation of foreach for an array.

57
00:04:15.340 --> 00:04:19.090
So what are the main components for
a foreach function?

58
00:04:21.890 --> 00:04:23.490
&gt;&gt; Speaker 2: Well a loop?

59
00:04:23.490 --> 00:04:23.990
&gt;&gt; Bianca Gandolfo: Yeah.

60
00:04:27.825 --> 00:04:32.683
&gt;&gt; Bianca Gandolfo: loop, and what else?

61
00:04:36.867 --> 00:04:37.890
&gt;&gt; Speaker 2: Variables.

62
00:04:37.890 --> 00:04:39.800
&gt;&gt; Bianca Gandolfo: Yeah,
there's a couple variables in there.

63
00:04:40.910 --> 00:04:44.175
But what is an operation
that needs to happen?

64
00:04:44.175 --> 00:04:45.348
&gt;&gt; Speaker 2: Increment.
&gt;&gt; Bianca Gandolfo: What's that?

65
00:04:45.348 --> 00:04:46.997
&gt;&gt; Speaker 2: Increment.

66
00:04:46.997 --> 00:04:49.912
&gt;&gt; Bianca Gandolfo: Loop increment.

67
00:04:49.912 --> 00:04:53.230
&gt;&gt; Speaker 3: Compare
&gt;&gt; Bianca Gandolfo: What is it?

68
00:04:53.230 --> 00:04:57.934
&gt;&gt; Speaker 3: Compare,
this is all in the loop signature here.

69
00:04:59.562 --> 00:05:01.391
&gt;&gt; Bianca Gandolfo: Awesome.

70
00:05:01.391 --> 00:05:03.100
What else?

71
00:05:03.100 --> 00:05:05.849
There's one other thing happening
here other than the loop itself.

72
00:05:07.570 --> 00:05:09.488
&gt;&gt; Bianca Gandolfo: Hint,
it is inside of a loop.

73
00:05:09.488 --> 00:05:12.070
[LAUGH]
&gt;&gt; Speaker 2: The action?

74
00:05:12.070 --> 00:05:13.560
&gt;&gt; Bianca Gandolfo: Yeah,
what's the action?

75
00:05:13.560 --> 00:05:16.205
&gt;&gt; Speaker 2: Taking the callback on the-
&gt;&gt; Bianca Gandolfo: Yeah, so

76
00:05:16.205 --> 00:05:20.888
you wanna call the callback on,

77
00:05:22.197 --> 00:05:25.620
&gt;&gt; Bianca Gandolfo: An item in the array.

78
00:05:27.680 --> 00:05:30.126
Cool?
So we're all clear on what foreach does,

79
00:05:30.126 --> 00:05:32.140
how it would work with an array, right?

80
00:05:33.910 --> 00:05:37.750
So the main components here are gonna
be the same for our linked lists.

81
00:05:37.750 --> 00:05:40.710
The main difference is how we
loop through a linked list,

82
00:05:40.710 --> 00:05:44.020
since our linked list doesn't
have numerical indices, right?

83
00:05:44.020 --> 00:05:49.080
That's why this for loop works, cuz we
have numerical indices in our array.

84
00:05:49.080 --> 00:05:54.250
The for in loop works nice for objects
because it's creative for an object.

85
00:05:54.250 --> 00:05:59.421
But we don't have like a native loop
that's created for a linked list, right?

86
00:06:02.420 --> 00:06:04.960
&gt;&gt; Bianca Gandolfo: So this is where
we have to create our on loop.

87
00:06:04.960 --> 00:06:10.416
So we just roll out the for
loop, the for in loop.

88
00:06:10.416 --> 00:06:14.737
What's another kinda loop I realize
the answer's also on the screen, so

89
00:06:14.737 --> 00:06:16.210
you could easily cheat.

90
00:06:17.670 --> 00:06:18.982
&gt;&gt; Speaker 2: I peeked,
so I'm not gonna answer.

91
00:06:18.982 --> 00:06:24.380
&gt;&gt; Bianca Gandolfo: Okay,
how about someone who's been quiet today.

92
00:06:24.380 --> 00:06:25.180
How about Rosie?

93
00:06:26.790 --> 00:06:29.585
What's a different kinda loop?

94
00:06:29.585 --> 00:06:31.140
&gt;&gt; Speaker 3: A while?

95
00:06:31.140 --> 00:06:33.273
&gt;&gt; Bianca Gandolfo: For a loop,
yeah, a wire loop, absolutely.

96
00:06:36.060 --> 00:06:41.980
&gt;&gt; Bianca Gandolfo: And
what are our conditions for

97
00:06:41.980 --> 00:06:45.802
our while loop?

98
00:06:45.802 --> 00:06:50.909
&gt;&gt; Speaker 2: When I did it myself,
I did a no .next is not equal to null,

99
00:06:50.909 --> 00:06:56.680
but I see that here, I'm used to C# and
you can't do that in C#.

100
00:06:56.680 --> 00:06:57.320
&gt;&gt; Bianca Gandolfo: Wild node?
&gt;&gt; Speaker 2: Yeah,

101
00:06:57.320 --> 00:07:02.082
so is that wild node translate to wild
node is not null or is not undefined?

102
00:07:02.082 --> 00:07:06.150
&gt;&gt; Bianca Gandolfo: Yeah, so what happens
is this is gonna be forced into a boolean.

103
00:07:06.150 --> 00:07:09.095
If it's undefined,
it's going to force into false,

104
00:07:09.095 --> 00:07:11.330
if it's defined it will be true.

105
00:07:11.330 --> 00:07:13.350
&gt;&gt; Speaker 2: What about null?

106
00:07:13.350 --> 00:07:14.500
&gt;&gt; Bianca Gandolfo: Null
is also going to be false.

107
00:07:14.500 --> 00:07:15.326
&gt;&gt; Speaker 2: Okay.

108
00:07:15.326 --> 00:07:15.910
&gt;&gt; Bianca Gandolfo: Yeah.

109
00:07:15.910 --> 00:07:16.510
&gt;&gt; Speaker 2: That's really cool.

110
00:07:16.510 --> 00:07:21.839
&gt;&gt; Bianca Gandolfo: Yeah, so
false values are gonna be undefined,

111
00:07:21.839 --> 00:07:27.550
null, 0, empty string, stuff like that.

112
00:07:27.550 --> 00:07:28.050
&gt;&gt; Speaker 2: Awesome.

113
00:07:29.170 --> 00:07:30.804
Do we need to force?
Would it be better well,

114
00:07:30.804 --> 00:07:32.089
node not equal to null?

115
00:07:34.070 --> 00:07:36.640
&gt;&gt; Bianca Gandolfo: Well,
this while node is not undefined.

116
00:07:40.065 --> 00:07:44.700
&gt;&gt; Bianca Gandolfo: You're right,
you're right it's null, yeah, yep.

117
00:07:45.710 --> 00:07:46.300
You could say that.

118
00:07:47.730 --> 00:07:53.123
while (node != null),

119
00:07:53.123 --> 00:08:00.410
but this is just a short hand, yeah.

120
00:08:00.410 --> 00:08:04.690
Cool, so while we have a node
we're gonna do the callback.

121
00:08:04.690 --> 00:08:06.080
Passing the value,

122
00:08:06.080 --> 00:08:11.090
someone asked before if we should
pass the entire node or the value.

123
00:08:11.090 --> 00:08:14.150
In general when we're doing
operations on our data,

124
00:08:14.150 --> 00:08:16.802
we're gonna disregard
some of the metadata,

125
00:08:16.802 --> 00:08:21.636
we're gonna do work on the actual value,
right that's what we're interested in.

126
00:08:21.636 --> 00:08:27.000
The .next metadata that helps
us organize our data and

127
00:08:27.000 --> 00:08:31.740
access it and things like that quickly.

128
00:08:31.740 --> 00:08:35.400
But, isn't what we wanna work on.

129
00:08:36.610 --> 00:08:37.703
Does that make sense?

130
00:08:37.703 --> 00:08:42.970
So in general you're gonna be working with
the value itself, not the entire node.

131
00:08:46.281 --> 00:08:52.100
&gt;&gt; Bianca Gandolfo: Cool, and
then we set node to node.next.

132
00:08:52.100 --> 00:08:55.515
And as long as node.next is not null,
it's gonna keep looping.

133
00:08:58.850 --> 00:08:59.350
&gt;&gt; Bianca Gandolfo: And
so that's a foreach.

134
00:09:04.295 --> 00:09:05.933
&gt;&gt; Bianca Gandolfo: Cool, questions?

135
00:09:07.965 --> 00:09:08.465
&gt;&gt; Bianca Gandolfo: Awesome.

136
00:09:09.941 --> 00:09:13.740
&gt;&gt; Bianca Gandolfo: So here's our print,
it's just gonna print out all the values.

137
00:09:13.740 --> 00:09:19.143
We're using our own foreach as well.

138
00:09:20.420 --> 00:09:23.179
&gt;&gt; Bianca Gandolfo: So we're gonna
store it into an auxiliary array.

139
00:09:24.880 --> 00:09:28.458
The reason we have to do that is cuz if
you look in the internals of foreach,

140
00:09:28.458 --> 00:09:30.090
we're not returning anything.

141
00:09:30.090 --> 00:09:33.099
So, we have to push in
an external variable.

142
00:09:34.477 --> 00:09:37.165
&gt;&gt; Bianca Gandolfo: We're gonna
look through, here's our callback.

143
00:09:37.165 --> 00:09:40.592
Our callback is just saying foreach value,
push it to our result.

144
00:09:40.592 --> 00:09:46.368
&gt;&gt; Bianca Gandolfo: And then you're
going to return it at the end as joined.

145
00:09:48.850 --> 00:09:54.800
&gt;&gt; Bianca Gandolfo: You might
recognize this as kind of like a map,

146
00:09:54.800 --> 00:09:58.920
sort of, implementation.

147
00:09:58.920 --> 00:10:03.430
&gt;&gt; Speaker 4: So, you've got, sorry, we've
got one question from online from Tegan.

148
00:10:03.430 --> 00:10:07.783
And she's asking with this implementation,
can you transform data?

149
00:10:10.108 --> 00:10:12.089
&gt;&gt; Bianca Gandolfo: Can
you transform data?

150
00:10:12.089 --> 00:10:15.477
Yes, you can transform
your data with a for each,

151
00:10:15.477 --> 00:10:18.550
depending on what your callback is, right?

152
00:10:18.550 --> 00:10:25.184
So in your callback, you could say,
&gt;&gt; Bianca Gandolfo: Yeah, you're right.

153
00:10:25.184 --> 00:10:29.850
We need to have a reference to the node
itself cuz we're only passing the value.

154
00:10:29.850 --> 00:10:33.872
If the value is an object, and
you're changing a property on it,

155
00:10:33.872 --> 00:10:35.775
it will transform your data but

156
00:10:35.775 --> 00:10:39.815
if we're using primitive data
types then it would just get lost.

157
00:10:42.300 --> 00:10:43.890
&gt;&gt; Bianca Gandolfo: So yes and no.

158
00:10:43.890 --> 00:10:49.474
And traditionally in for each what you'd
pass is not just the value, you're gonna

159
00:10:49.474 --> 00:10:55.070
pass to call back you're gonna pass
the value, and also the entire collection.

160
00:10:55.070 --> 00:10:57.652
And so,
in the more traditional implementation,

161
00:10:57.652 --> 00:11:01.374
then you could transform your data,
even if it was a primitive data type,

162
00:11:01.374 --> 00:11:05.110
cuz you would have a reference to
the actual node that you're working on.

163
00:11:09.660 --> 00:11:11.775
&gt;&gt; Bianca Gandolfo: Cool, now I like
how you guys are thinking into this,

164
00:11:11.775 --> 00:11:14.877
because these are all things that you
need to think about when you're creating

165
00:11:14.877 --> 00:11:15.831
your data structures.

166
00:11:15.831 --> 00:11:18.110
Is specifics for your use case, right?

167
00:11:18.110 --> 00:11:23.060
So if you need to transform your data,
absolutely,

168
00:11:23.060 --> 00:11:27.524
it's something to consider when you're
creating an implementation, yeah.

169
00:11:30.156 --> 00:11:32.790
&gt;&gt; Bianca Gandolfo: Awesome, okay.

170
00:11:35.408 --> 00:11:38.380
&gt;&gt; Bianca Gandolfo: Anymore questions?

171
00:11:39.674 --> 00:11:40.680
&gt;&gt; Bianca Gandolfo: All right.

172
00:11:40.680 --> 00:11:42.330
&gt;&gt; Speaker 2: I had
a question about print.

173
00:11:42.330 --> 00:11:43.611
So you made an array and

174
00:11:43.611 --> 00:11:47.940
then called join, that join I'm not
familiar with that returns as string?

175
00:11:47.940 --> 00:11:51.390
Is that more for forment then
concatonating the string as you go?

176
00:11:53.340 --> 00:11:56.263
Or is it just kind of- No,
just for format.

177
00:11:56.263 --> 00:12:00.280
Okay [INAUDIBLE] Cuz this,
if you think about it.

178
00:12:02.728 --> 00:12:06.004
&gt;&gt; Bianca Gandolfo: Joining probably
is just looping through the array and

179
00:12:06.004 --> 00:12:10.556
concatenating it, so you can either
concatenate it as you go or do it after,

180
00:12:10.556 --> 00:12:13.010
it's still gonna be linear, yeah.

181
00:12:13.010 --> 00:12:13.865
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Bianca Gandolfo: Yeah.

182
00:12:18.677 --> 00:12:19.279
&gt;&gt; Bianca Gandolfo: Cool.

183
00:12:23.987 --> 00:12:26.140
&gt;&gt; Bianca Gandolfo: Okay,
so let's just do one more.

184
00:12:27.487 --> 00:12:30.180
&gt;&gt; Bianca Gandolfo: All right,
insert after.

185
00:12:31.530 --> 00:12:35.280
&gt;&gt; Bianca Gandolfo: Great, so
this takes a node and this takes a value.

186
00:12:35.280 --> 00:12:39.545
This is the current node and then you're
gonna insert the value after, cool.

187
00:12:42.240 --> 00:12:44.700
&gt;&gt; Bianca Gandolfo: So
we saw a picture of this before but

188
00:12:44.700 --> 00:12:47.821
you wanna get a reference
to the former next.

189
00:12:49.540 --> 00:12:52.860
&gt;&gt; Bianca Gandolfo: So
this is the old next, right?

190
00:12:54.940 --> 00:12:57.695
And this is gonna become the next

191
00:12:57.695 --> 00:13:02.651
for,
&gt;&gt; Bianca Gandolfo: This value

192
00:13:02.651 --> 00:13:03.195
that we're adding right?

193
00:13:05.713 --> 00:13:06.213
&gt;&gt; Bianca Gandolfo: Cool.

194
00:13:07.570 --> 00:13:10.610
&gt;&gt; Bianca Gandolfo: So here is our new
value, we're creating a node with it.

195
00:13:11.820 --> 00:13:18.160
So our current node in question,
we're adding our new node to that one, and

196
00:13:18.160 --> 00:13:25.310
then our new node's .next is gonna point
to the previous .next of our current node.

197
00:13:28.660 --> 00:13:35.680
&gt;&gt; Bianca Gandolfo: Cool, and then also
if it's the tail, you can reset the tail.

198
00:13:39.356 --> 00:13:43.570
&gt;&gt; Speaker 2: Do you need
the two temp variables?

199
00:13:44.790 --> 00:13:45.990
You do, okay.

200
00:13:45.990 --> 00:13:50.771
So I just did var new node
equals new node on the value,

201
00:13:50.771 --> 00:13:55.270
and then new node.next,
I set to no node.next.

202
00:13:55.270 --> 00:13:57.199
&gt;&gt; Bianca Gandolfo: So,
say that one more time, you did what?

203
00:13:59.130 --> 00:14:04.241
&gt;&gt; Speaker 2: So
var newNode = newNode, takes value.

204
00:14:04.241 --> 00:14:07.150
&gt;&gt; Bianca Gandolfo: I see,
like newNode like this.

205
00:14:07.150 --> 00:14:12.377
&gt;&gt; Speaker 2: Yeah, and
then newNode.next = node.next.

206
00:14:15.278 --> 00:14:24.099
&gt;&gt; Speaker 2: Then node.next = newNode
&gt;&gt; Bianca Gandolfo: Yep.

207
00:14:24.099 --> 00:14:25.919
That's what I did.

208
00:14:25.919 --> 00:14:27.231
&gt;&gt; Bianca Gandolfo: Totally.

209
00:14:27.231 --> 00:14:33.603
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yep, great.

210
00:14:33.603 --> 00:14:36.233
What's the time complexity of this?

211
00:14:37.895 --> 00:14:40.050
&gt;&gt; Speaker 2: Constant.
&gt;&gt; Bianca Gandolfo: Constant time.

212
00:14:40.050 --> 00:14:43.075
&gt;&gt; Bianca Gandolfo: What's the time
complexity of this if we didn't have

213
00:14:43.075 --> 00:14:44.620
a reference to this node but

214
00:14:44.620 --> 00:14:47.655
we only had the value of
the node that we had to look up.

215
00:14:47.655 --> 00:14:51.727
&gt;&gt; Speaker 2: Can be linear right,
cuz we have to go through?

216
00:14:51.727 --> 00:14:56.137
&gt;&gt; Bianca Gandolfo: Linear in the worst
case because you'd have to loop through

217
00:14:56.137 --> 00:14:57.935
it, absolutely cool.

218
00:14:57.935 --> 00:15:05.325
So another thing I wanna show you, is that
we also have, where are we going here.

219
00:15:08.660 --> 00:15:12.980
&gt;&gt; Bianca Gandolfo: Some solutions for
double linked list.

220
00:15:14.490 --> 00:15:17.809
If you wanna take a look at that as well,
this is the same exercises but

221
00:15:17.809 --> 00:15:19.139
with a double linked list.

222
00:15:21.282 --> 00:15:24.660
&gt;&gt; Bianca Gandolfo: Awesome,
all right, any questions?

223
00:15:24.660 --> 00:15:25.803
Cuz we're gonna keep moving.

224
00:15:30.235 --> 00:15:32.500
&gt;&gt; Bianca Gandolfo: No?
&gt;&gt; Speaker 2: So each node is an object?

225
00:15:33.790 --> 00:15:38.110
And does it have a name, like how do
you refer to just one of the nodes?

226
00:15:38.110 --> 00:15:41.290
&gt;&gt; Bianca Gandolfo: .next or .hen.

227
00:15:43.270 --> 00:15:44.020
&gt;&gt; Speaker 2: Okay.

228
00:15:44.020 --> 00:15:46.919
&gt;&gt; Bianca Gandolfo: Yeah, so you can
save it into a variable if you want, and

229
00:15:46.919 --> 00:15:48.724
that would be saving a reference.

230
00:15:48.724 --> 00:15:49.580
&gt;&gt; Speaker 2: Okay.

231
00:15:49.580 --> 00:15:53.050
&gt;&gt; Bianca Gandolfo: But you're not gonna
save a reference to every single node.

232
00:15:53.050 --> 00:15:54.132
&gt;&gt; Speaker 2: Right, right.
&gt;&gt; Bianca Gandolfo: Except for

233
00:15:54.132 --> 00:15:57.020
in the .next of the previous node, right?

