WEBVTT

1
00:00:00.370 --> 00:00:03.350
&gt;&gt; Bianca Gandolfo: Ready to deep
dive into our Breadth-First Search.

2
00:00:03.350 --> 00:00:06.607
I'm just gonna construct what
our graph looks like at this

3
00:00:06.607 --> 00:00:16.129
point.
&gt;&gt; Bianca Gandolfo: So

4
00:00:16.129 --> 00:00:18.090
I'm just building our graph.

5
00:00:18.090 --> 00:00:22.091
For each node, I'm building
a list of all of its neighbors.

6
00:00:22.091 --> 00:00:25.620
So for A, we have B, C, and D.

7
00:00:25.620 --> 00:00:32.850
For B, we have E, and F, right?

8
00:00:32.850 --> 00:00:37.924
For E, we have I.

9
00:00:37.924 --> 00:00:42.231
For F, we have an empty array,

10
00:00:42.231 --> 00:00:46.783
cool.
&gt;&gt; Bianca Gandolfo: Now, we're doing

11
00:00:46.783 --> 00:00:51.639
breadth search through the whole thing.
&gt;&gt; Bianca Gandolfo: Okay, for

12
00:00:51.639 --> 00:00:54.503
C, I can't actually,

13
00:00:54.503 --> 00:01:00.652
is C connected?
&gt;&gt; Bianca Gandolfo: Let's go with yes,

14
00:01:00.652 --> 00:01:05.160
let's just put a cycle on
there because why not?

15
00:01:05.160 --> 00:01:11.933
So we have D and then we have G.
&gt;&gt; Bianca Gandolfo: Let

16
00:01:11.933 --> 00:01:13.306
me know if I'm missing anything.

17
00:01:13.306 --> 00:01:18.136
Then we have D, then we have

18
00:01:18.136 --> 00:01:23.382
G,
&gt;&gt; Bianca Gandolfo: And

19
00:01:23.382 --> 00:01:27.720
H.
&gt;&gt; Bianca Gandolfo: And what else?

20
00:01:27.720 --> 00:01:32.018
And then we have G,

21
00:01:32.018 --> 00:01:36.246
which has D and C.

22
00:01:36.246 --> 00:01:37.780
I forgot to do the background.

23
00:01:37.780 --> 00:01:45.090
Let's do this undirected, dang it.
&gt;&gt; Bianca Gandolfo: So if it's undirected,

24
00:01:45.090 --> 00:01:47.480
they each will have reference to
everything that it's connected to.

25
00:01:57.897 --> 00:01:58.922
&gt;&gt; Bianca Gandolfo: Let's

26
00:01:58.922 --> 00:02:03.289
see.
&gt;&gt; Bianca Gandolfo: Let me

27
00:02:03.289 --> 00:02:07.401
know where I need to add stuff, C, A, D,

28
00:02:07.401 --> 00:02:13.644
G.
&gt;&gt; Bianca Gandolfo: D, G, C, H C, A,

29
00:02:19.733 --> 00:02:21.794
&gt;&gt; Bianca Gandolfo: My goodness.

30
00:02:21.794 --> 00:02:23.607
G, D, C, okay.

31
00:02:23.607 --> 00:02:24.429
Are we good?

32
00:02:24.429 --> 00:02:27.140
Do we have all of the things
that we need in our list?

33
00:02:27.140 --> 00:02:29.814
So A, B, C, D.

34
00:02:29.814 --> 00:02:35.251
B, E, F, A, yep, B, F,

35
00:02:35.251 --> 00:02:40.286
A, E, we should have I, B and

36
00:02:40.286 --> 00:02:45.288
not F, not F.
&gt;&gt; Bianca Gandolfo: It's

37
00:02:45.288 --> 00:02:51.880
not connected to F, we should have B,
C, should have D, G.

38
00:02:53.890 --> 00:02:59.236
And A, D, G, C, H,

39
00:02:59.236 --> 00:03:04.596
A, G, D, and C.
&gt;&gt; Speaker 2: You're missing I.

40
00:03:04.596 --> 00:03:05.171
&gt;&gt; Bianca Gandolfo: Thank you.

41
00:03:08.963 --> 00:03:09.888
&gt;&gt; Bianca Gandolfo: Okay,

42
00:03:09.888 --> 00:03:15.723
anything else?
&gt;&gt; Bianca Gandolfo: Cool.

43
00:03:19.455 --> 00:03:21.863
&gt;&gt; Bianca Gandolfo: All right, so

44
00:03:21.863 --> 00:03:23.876
here we go.

45
00:03:23.876 --> 00:03:28.637
Here we go.
&gt;&gt; Bianca Gandolfo: I'm

46
00:03:28.637 --> 00:03:33.613
gonna take this out cuz we're just gonna
assume that we're passing at the right

47
00:03:33.613 --> 00:03:38.780
thing.
&gt;&gt; Bianca Gandolfo: All right,

48
00:03:38.780 --> 00:03:43.030
so the first thing that we want to
pass it is A, so we'll just say,

49
00:03:44.813 --> 00:03:47.481
&gt;&gt; Bianca Gandolfo: myGraph, right,

50
00:03:47.481 --> 00:03:53.660
this is myGraph = adjacency lists, yeah?

51
00:03:53.660 --> 00:04:00.010
And then we're gonna say
myGraph.traverseBreadthfirst,

52
00:04:00.010 --> 00:04:06.002
and we're gonna pass at A and
then some function, right?

53
00:04:06.002 --> 00:04:07.080
Whatever function we want.

54
00:04:08.630 --> 00:04:11.630
Cool, so that's how we get started.

55
00:04:11.630 --> 00:04:15.020
And we're just gonna trace
it all the way through.

56
00:04:15.020 --> 00:04:18.589
All right, so visited.
&gt;&gt; Speaker 3: I have a question.

57
00:04:18.589 --> 00:04:19.561
&gt;&gt; Bianca Gandolfo: Sure.

58
00:04:19.561 --> 00:04:21.654
&gt;&gt; Speaker 3: The reason that you didn't

59
00:04:21.654 --> 00:04:26.140
have the elements in the RA
when you created the graph.

60
00:04:26.140 --> 00:04:29.660
Starting from levels,
zero, one, two, like that.

61
00:04:29.660 --> 00:04:33.910
Is it because you're introducing your
first element as saying later on?

62
00:04:35.697 --> 00:04:37.440
&gt;&gt; Bianca Gandolfo: What do you mean?

63
00:04:37.440 --> 00:04:40.391
&gt;&gt; Speaker 3: Like if you go to C, is D,

64
00:04:40.391 --> 00:04:41.665
G, and A.

65
00:04:41.665 --> 00:04:48.500
So why didn't you have A, D, and G plus C?
&gt;&gt; Bianca Gandolfo: You're

66
00:04:48.500 --> 00:04:53.574
asking like why is that array in a random
order and not in the correct order?

67
00:04:53.574 --> 00:04:57.740
It has to do with when you add the edge.

68
00:04:57.740 --> 00:05:01.975
So whenever you add the edge

69
00:05:01.975 --> 00:05:07.132
you're gonna push the reference

70
00:05:07.132 --> 00:05:11.928
to the element into that list.

71
00:05:11.928 --> 00:05:18.332
First, maybe we added the edge T,
E and then we added F,

72
00:05:18.332 --> 00:05:23.392
and then later we added A,
so it is dynamic.

73
00:05:23.392 --> 00:05:26.550
Yeah, okay, here we go.

74
00:05:26.550 --> 00:05:28.097
So visited is empty.

75
00:05:28.097 --> 00:05:32.249
Q is gonna be value around

76
00:05:32.249 --> 00:05:37.804
the A.
&gt;&gt; Bianca Gandolfo: Cool.

77
00:05:41.557 --> 00:05:44.070
&gt;&gt; Bianca Gandolfo: So now we're adding it

78
00:05:44.070 --> 00:05:50.733
to our array, our objects,
&gt;&gt; Bianca Gandolfo: Giving

79
00:05:50.733 --> 00:05:53.547
it the value 0, okay?

80
00:05:53.547 --> 00:05:56.920
So while queue.length so
we have queue of length what?

81
00:05:59.369 --> 00:06:01.389
&gt;&gt; Speaker 2: 1.

82
00:06:01.389 --> 00:06:04.368
&gt;&gt; Bianca Gandolfo: We're gonna shift

83
00:06:04.368 --> 00:06:06.046
the node.

84
00:06:06.046 --> 00:06:09.860
So our queue is now empty,
and then we pop off our A.

85
00:06:09.860 --> 00:06:13.470
So notice now A, we're going to pass it.

86
00:06:13.470 --> 00:06:18.030
We're also going to pass its number,
which is zero.

87
00:06:18.030 --> 00:06:22.320
We have our neighbors that we're
going to create right now.

88
00:06:23.590 --> 00:06:28.830
So we're going to say this.node.

89
00:06:28.830 --> 00:06:32.630
Probably this is better to say,
you know what this means, right?

90
00:06:32.630 --> 00:06:38.351
This is going to be A, myGraph A.

91
00:06:38.351 --> 00:06:39.579
Does that make sense?

92
00:06:39.579 --> 00:06:41.589
I just called this something different.

93
00:06:41.589 --> 00:06:43.880
And then we're going to filter through.

94
00:06:43.880 --> 00:06:49.150
Loop through all of our
elements in that array,

95
00:06:49.150 --> 00:06:53.520
so we have this array that
we're gonna be looping through.

96
00:06:56.630 --> 00:06:59.013
Let's see where do we wanna put it.

97
00:07:05.458 --> 00:07:06.730
&gt;&gt; Bianca Gandolfo: This is the neighbors.

98
00:07:09.280 --> 00:07:12.442
This is what we are starting
with is not necessarily what we

99
00:07:12.442 --> 00:07:14.970
are saving because we
have to filter it first.

100
00:07:14.970 --> 00:07:18.102
But we'll start with this.

101
00:07:18.102 --> 00:07:23.100
So the first neighbor is going to be B,
right?

102
00:07:24.960 --> 00:07:29.200
So if visited neighbor, all right,
let's look at our neighbor

103
00:07:32.150 --> 00:07:35.850
or visited, where's our visited thing?

104
00:07:35.850 --> 00:07:37.780
Here it is, so we don't have B.

105
00:07:39.290 --> 00:07:46.000
So B is undefined, right,
which means we haven't yet visited it.

106
00:07:46.000 --> 00:07:46.930
We're gonna save it here.

107
00:07:48.010 --> 00:07:52.822
So now,
our visited object has our A in it with

108
00:07:52.822 --> 00:07:57.243
0.
&gt;&gt; Bianca Gandolfo: And

109
00:07:57.243 --> 00:08:06.447
then we have our B with 1,
&gt;&gt; Bianca Gandolfo: Cool?

110
00:08:06.447 --> 00:08:09.966
And then weÂ´re gonna return true,

111
00:08:09.966 --> 00:08:14.776
which is going to add it
to our actual neighbor's

112
00:08:14.776 --> 00:08:22.410
array.
&gt;&gt; Bianca Gandolfo: Okay,

113
00:08:22.410 --> 00:08:24.420
for our first filter.

114
00:08:24.420 --> 00:08:28.532
Our second filter,
we're gonna now check C.

115
00:08:28.532 --> 00:08:31.410
That's now been visited,
we're gonna add it.

116
00:08:37.180 --> 00:08:38.141
&gt;&gt; Bianca Gandolfo: Why is this 1 and

117
00:08:38.141 --> 00:08:42.391
not 2?
&gt;&gt; Speaker 3: Same level.

118
00:08:42.391 --> 00:08:42.933
&gt;&gt; Bianca Gandolfo: Mm-hm,

119
00:08:42.933 --> 00:08:49.930
cuz we're looking at the current node.
&gt;&gt; Bianca Gandolfo: We're

120
00:08:49.930 --> 00:08:51.020
gonna return true.

121
00:08:51.020 --> 00:08:54.961
And so this is going to put C in there,
excuse me, and

122
00:08:54.961 --> 00:08:57.300
then now we're gonna check D.

123
00:08:58.910 --> 00:09:04.930
D has not yet been discovered, but
we're gonna add it to our visited list.

124
00:09:06.430 --> 00:09:10.470
D, still gonna be 1.

125
00:09:10.470 --> 00:09:15.426
I'm gonna return true and now here we go.

126
00:09:15.426 --> 00:09:22.220
We've done filtering through all of their
neighbors of our current node, which is A.

127
00:09:24.640 --> 00:09:27.310
And it leaves us with an array of
everything that returned true which is

128
00:09:27.310 --> 00:09:28.650
everything that wasn't discovered.

129
00:09:30.430 --> 00:09:36.560
And now, we are going to
concat that with our queue.

130
00:09:36.560 --> 00:09:41.620
Our queue is actually empty,
so we're going to be left

131
00:09:41.620 --> 00:09:48.759
with this.
&gt;&gt; Bianca Gandolfo: Cool?

132
00:09:53.680 --> 00:09:55.905
&gt;&gt; Speaker 3: Why are we seeing nodes

133
00:09:55.905 --> 00:09:56.729
nodes?

134
00:09:56.729 --> 00:10:00.432
I don't see any variable.
&gt;&gt; Bianca Gandolfo: Why are we seeing

135
00:10:00.432 --> 00:10:02.336
nodes_nodes?
&gt;&gt; Speaker 3: Yeah-

136
00:10:02.336 --> 00:10:04.159
&gt;&gt; Bianca Gandolfo: Are those to _nodes?

137
00:10:04.159 --> 00:10:06.663
&gt;&gt; Speaker 3: No, there is no nodes

138
00:10:06.663 --> 00:10:10.605
variable here, so why is?
&gt;&gt; Bianca Gandolfo: Yeah,

139
00:10:10.605 --> 00:10:14.295
our node is whatever was
the first element in our queue.

140
00:10:14.295 --> 00:10:18.230
And this _nodes is from
the implementation of your graph.

141
00:10:19.240 --> 00:10:25.770
So you can save all of your nodes in
an object called underscore nodes.

142
00:10:27.070 --> 00:10:31.711
But I simplified it for us and just did A.

143
00:10:31.711 --> 00:10:35.950
So we could just do it like that,

144
00:10:38.899 --> 00:10:42.380
&gt;&gt; Bianca Gandolfo: To make it easier.

145
00:10:42.380 --> 00:10:47.920
Cool, okay, so we were just doing
work in that one while loop.

146
00:10:47.920 --> 00:10:52.630
Now, we're going to come back inside
because we still have some items in our

147
00:10:52.630 --> 00:10:56.020
queue, and we're gonna shift it again.

148
00:10:56.020 --> 00:10:59.830
Remember, this is what
our queue looks like now.

149
00:11:05.380 --> 00:11:06.710
&gt;&gt; Bianca Gandolfo: This is our queue,

150
00:11:06.710 --> 00:11:08.560
we're gonna unshift it.

151
00:11:08.560 --> 00:11:10.130
So we're just gonna
take the first one off.

152
00:11:13.790 --> 00:11:14.395
&gt;&gt; Bianca Gandolfo: And

153
00:11:14.395 --> 00:11:18.430
we're gonna return B.

154
00:11:18.430 --> 00:11:22.938
Cool, and we're gonna do all
of that same work with B,

155
00:11:22.938 --> 00:11:26.180
which is we're going to look through.

156
00:11:28.194 --> 00:11:33.660
All of it neighbors, we are going to make
sure that they haven't been checked yet.

157
00:11:33.660 --> 00:11:36.730
And if they haven't,
we're gonna add it to our neighbors queue.

158
00:11:36.730 --> 00:11:44.181
We're gonna give it a number
based on the number away.

159
00:11:44.181 --> 00:11:49.945
Far away is from the original
value that we pass in,

160
00:11:49.945 --> 00:11:57.321
which was A.
&gt;&gt; Bianca Gandolfo: That

161
00:11:57.321 --> 00:12:03.320
make sense?
&gt;&gt; Bianca Gandolfo: Because

162
00:12:03.320 --> 00:12:06.020
we're gonna say visited node,
the current node is B.

163
00:12:06.020 --> 00:12:09.020
B's value is 1, plus 1 is 2.

164
00:12:09.020 --> 00:12:13.508
And so we're just keeping track
here at what level it is.

165
00:12:17.181 --> 00:12:19.825
&gt;&gt; Bianca Gandolfo: Cool?

166
00:12:19.825 --> 00:12:25.910
And then we'll keep doing that until
we have explored the instructor.

167
00:12:25.910 --> 00:12:28.107
What's up?
&gt;&gt; Speaker 3: What will it be if we

168
00:12:28.107 --> 00:12:29.480
reach to A?

169
00:12:29.480 --> 00:12:32.749
Because B is-
&gt;&gt; Bianca Gandolfo: Yeah, yeah,

170
00:12:32.749 --> 00:12:34.400
that is a good question.

171
00:12:34.400 --> 00:12:36.575
So what if we look at A?

172
00:12:36.575 --> 00:12:37.700
A is a neighbor.

173
00:12:39.320 --> 00:12:44.647
But what is going to happen is
that A has already been visited,

174
00:12:44.647 --> 00:12:50.632
so we won't go there.
&gt;&gt; Bianca Gandolfo: So

175
00:12:50.632 --> 00:12:53.960
first, we start off with a queue of A,

176
00:12:53.960 --> 00:12:59.170
then we add to the queue,
all of the neighbors of B, or of A.

177
00:12:59.170 --> 00:13:02.200
So we have a queue of B, C and D.

178
00:13:02.200 --> 00:13:05.310
A has since been popped off once
we entered into this layer.

179
00:13:05.310 --> 00:13:10.040
First, we go to B and
we explore its children.

180
00:13:10.040 --> 00:13:15.530
We're gonna push this to the back
of our queue over here ,which has

181
00:13:15.530 --> 00:13:17.970
the C and D at this point.

182
00:13:17.970 --> 00:13:20.270
Then we go to C,
we explore it's neighbors.

183
00:13:20.270 --> 00:13:27.430
It is gonna look like a D, but
we already have it in our queue.

184
00:13:27.430 --> 00:13:31.820
And so we're gonna keep going, like that.

185
00:13:31.820 --> 00:13:34.666
And we're concatenate that,
then concatenate that.

186
00:13:34.666 --> 00:13:37.910
And then once we get to E,
we'll check here.

187
00:13:37.910 --> 00:13:38.883
That one hasn't been visited, and

188
00:13:38.883 --> 00:13:40.500
then we'll concatenate to
the back of the queue.

189
00:13:41.920 --> 00:13:44.206
And so we'll process our queue in order.

190
00:13:44.206 --> 00:13:49.268
And that's how we'll make sure that we're
visiting all of the nodes that have

191
00:13:49.268 --> 00:13:55.330
not yet been visited in order by layer.
&gt;&gt; Bianca Gandolfo: And

192
00:13:55.330 --> 00:13:56.740
that is breadth-first search.

