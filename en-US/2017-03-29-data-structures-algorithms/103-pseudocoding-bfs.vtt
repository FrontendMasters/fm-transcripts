WEBVTT

1
00:00:00.320 --> 00:00:03.000
&gt;&gt; Bianca Gandolfo: Let's pretend
that this is an un directive graph.

2
00:00:03.000 --> 00:00:07.300
Yeah, let's pretend this is un directive
graph, which means, in our adjacency

3
00:00:07.300 --> 00:00:10.440
table we need to use our imagination
just a little bit and I'm sorry.

4
00:00:10.440 --> 00:00:13.380
You have to do this, this late in the day.

5
00:00:13.380 --> 00:00:17.860
But that means so, for
example, three, four.

6
00:00:19.320 --> 00:00:23.280
Four also has a, Three in here.
&gt;&gt; Speaker 2: End of

7
00:00:23.280 --> 00:00:27.110
two?
&gt;&gt; Bianca Gandolfo: Well there will be

8
00:00:27.110 --> 00:00:33.590
twice as many edges, because with an
undirected graph you represent both ways.

9
00:00:33.590 --> 00:00:38.970
So if there's, a connection between
four and two, in four's adjacency list,

10
00:00:38.970 --> 00:00:42.670
you'll have two and in two's
adjacency list you'll also have four.

11
00:00:42.670 --> 00:00:44.510
you just need to make
sure you're doing both.

12
00:00:44.510 --> 00:00:46.490
And we can then ignore these arrows, and

13
00:00:46.490 --> 00:00:50.710
we can just focus on,
traversing in the right order.

14
00:00:52.700 --> 00:00:53.840
Just like simplify our life.

15
00:00:54.950 --> 00:00:55.450
Okay.

16
00:00:56.880 --> 00:00:59.020
So we know we have to have a queue.

17
00:00:59.020 --> 00:01:06.650
Somewhere, somehow we need
to queue in order by layer.

18
00:01:06.650 --> 00:01:08.810
True?

19
00:01:08.810 --> 00:01:09.647
Okay.

20
00:01:09.647 --> 00:01:16.235
Queue, some order by layer such that,

21
00:01:16.235 --> 00:01:22.025
the least deep nodes are processed

22
00:01:22.025 --> 00:01:29.640
first.
&gt;&gt; Bianca Gandolfo: Fair?

23
00:01:29.640 --> 00:01:30.990
That's the English version.

24
00:01:30.990 --> 00:01:35.030
We'll see what that actually
looks like in code.

25
00:01:35.030 --> 00:01:36.680
So we have a queue.

26
00:01:36.680 --> 00:01:43.488
Somehow we need to, create that queue.

27
00:01:49.569 --> 00:01:50.356
&gt;&gt; Bianca Gandolfo: How might we do that?

28
00:01:53.022 --> 00:01:55.905
&gt;&gt; Speaker 2: You use the nodes in four's

29
00:01:55.905 --> 00:02:00.980
adjacency list
&gt;&gt; Bianca Gandolfo: Yeah absolutely.

30
00:02:00.980 --> 00:02:03.200
That wasn't so hard.

31
00:02:03.200 --> 00:02:05.940
So, so
what was the question were answering?

32
00:02:05.940 --> 00:02:09.100
How do we find our first queue?

33
00:02:11.040 --> 00:02:11.720
Where could it be?

34
00:02:11.720 --> 00:02:12.640
How do we create it?

35
00:02:15.310 --> 00:02:16.790
We have that adjacency list right?

36
00:02:18.820 --> 00:02:22.820
So, we can imagine four and
four's adjacency list.

37
00:02:24.010 --> 00:02:26.690
So we have four,
we have an adjacency list.

38
00:02:26.690 --> 00:02:32.520
We have two, three, and
five, something like that.

39
00:02:34.000 --> 00:02:37.500
So we really have the queue, here.

40
00:02:37.500 --> 00:02:40.206
Cuz a queue is just like an array.

41
00:02:40.206 --> 00:02:45.716
So either,
we use the data structure that we have,

42
00:02:45.716 --> 00:02:52.670
in our adjacency list or
you could push into in external queue.

43
00:02:52.670 --> 00:02:58.334
The specifics on how you wanna do that
again, I'm not dogmatic about that.

44
00:02:58.334 --> 00:03:00.989
It's just, at the end of the day,
we have a queue here.

45
00:03:02.020 --> 00:03:04.312
We need to make sure that,
we go through it.

46
00:03:04.312 --> 00:03:05.517
Cool.

47
00:03:05.517 --> 00:03:09.410
Awesome, so we're good there.

48
00:03:11.090 --> 00:03:15.976
So we'll start with four,
or the current node,

49
00:03:15.976 --> 00:03:21.266
which would be four.
&gt;&gt; Bianca Gandolfo: Process,

50
00:03:21.266 --> 00:03:24.870
profess, profess your love for our queues.

51
00:03:24.870 --> 00:03:31.758
Process the adjacency lists,
&gt;&gt; Bianca Gandolfo: For

52
00:03:31.758 --> 00:03:36.793
current Node.
&gt;&gt; Bianca Gandolfo: Does

53
00:03:36.793 --> 00:03:42.390
that make sense?
&gt;&gt; Speaker 3: So

54
00:03:42.390 --> 00:03:46.790
based on the direction,
it's a little confusing when you have two,

55
00:03:46.790 --> 00:03:51.180
three, five and that [INAUDIBLE] because
the arrows are pointing towards four, four

56
00:03:51.180 --> 00:03:54.180
from two and three and it's [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yeah, so

57
00:03:54.180 --> 00:03:58.139
yeah, yeah, so let's just pretend
that this is an undirected graph.

58
00:03:59.310 --> 00:04:02.926
Yeah, so just pretend it's
an un-directive graph, just so

59
00:04:02.926 --> 00:04:06.340
we can make our life easier here and
focus on less details.

60
00:04:06.340 --> 00:04:10.150
So that's why I made,
a sample adjacency list for four,.

61
00:04:10.150 --> 00:04:15.818
If it was undirected, we would have all of
the edges represented, versus the one that

62
00:04:15.818 --> 00:04:21.350
we have here, where it's only five because
technically, in the directed graph.

63
00:04:21.350 --> 00:04:26.184
It only has one edge,
directed to five, connected to five.

64
00:04:26.184 --> 00:04:31.563
But,
&gt;&gt; Bianca Gandolfo: I say,

65
00:04:31.563 --> 00:04:36.272
let's not clutter ourselves right
now with directed graphs, and

66
00:04:36.272 --> 00:04:40.474
let's just focus on just the core
concepts and then we can,

67
00:04:40.474 --> 00:04:43.770
we can make it complicated later,
if we want.

68
00:04:44.970 --> 00:04:46.378
Okay, where were we?

69
00:04:46.378 --> 00:04:51.140
So, we're gonna process
the adjacency list for

70
00:04:51.140 --> 00:04:55.089
our current Node, and then what happens

71
00:04:55.089 --> 00:05:03.276
next?
&gt;&gt; Bianca Gandolfo: So,

72
00:05:03.276 --> 00:05:07.807
this would basically work,
if we just needed to process one layer,

73
00:05:07.807 --> 00:05:10.360
right?
&gt;&gt; Speaker 2: Right, then you have to

74
00:05:10.360 --> 00:05:15.337
go and process the layers following.
&gt;&gt; Bianca Gandolfo: Then

75
00:05:15.337 --> 00:05:18.620
process next layers.

76
00:05:18.620 --> 00:05:21.599
So the next layers would be,
we need to get to six, and

77
00:05:21.599 --> 00:05:23.065
then we need to get to one.

78
00:05:23.065 --> 00:05:26.990
So that would be the next layer.
&gt;&gt; Speaker 2: Right, and

79
00:05:26.990 --> 00:05:29.510
then you would look at
their adjacency lists and

80
00:05:29.510 --> 00:05:34.290
you wouldn't see any more that
you haven't already seen.

81
00:05:34.290 --> 00:05:37.559
And so you would not process any more.
&gt;&gt; Bianca Gandolfo: Yeah,

82
00:05:37.559 --> 00:05:45.155
absolutely.
&gt;&gt; Bianca Gandolfo: But

83
00:05:45.155 --> 00:05:49.211
how do we do that?
&gt;&gt; Bianca Gandolfo: So,

84
00:05:49.211 --> 00:05:53.187
we need to make sure that we go through,
our adjacency list first,

85
00:05:53.187 --> 00:05:55.891
right?
&gt;&gt; Bianca Gandolfo: And process it,

86
00:05:55.891 --> 00:05:58.360
because it needs to be in that order.

87
00:05:58.360 --> 00:06:04.060
That makes sense to me.
&gt;&gt; Speaker 4: You want the adjacency

88
00:06:04.060 --> 00:06:09.440
list for the nodes in the adjacency list?
&gt;&gt; Bianca Gandolfo: Mm hm,

89
00:06:09.440 --> 00:06:14.680
yeah, so maybe the next step is, so
we processed each one of those nodes.

90
00:06:16.950 --> 00:06:26.190
And then maybe as we're processing it,
we can somehow, I don't know.

91
00:06:26.190 --> 00:06:29.490
Do something so that we have,
something next to go to.

92
00:06:33.890 --> 00:06:34.640
Am I making sense?

93
00:06:35.950 --> 00:06:36.860
Is the objective clear?

94
00:06:38.990 --> 00:06:41.710
So we process a queue, or you know,

95
00:06:41.710 --> 00:06:46.350
process the array and then,
and the question is then what?

96
00:06:47.600 --> 00:06:52.569
Miranda says, okay, why don't we process
it again and then go and visit everything.

97
00:06:52.569 --> 00:06:57.710
Does that seem like it'll work?

98
00:07:00.030 --> 00:07:00.950
Okay.

99
00:07:00.950 --> 00:07:05.540
Process the next layers

100
00:07:05.540 --> 00:07:09.901
by looping through and

101
00:07:09.901 --> 00:07:17.022
then like going into those, right?

102
00:07:26.683 --> 00:07:27.398
&gt;&gt; Bianca Gandolfo: I don't know,

103
00:07:27.398 --> 00:07:28.894
I have amnesia.
&gt;&gt; Speaker 2: But if it's a-

104
00:07:35.597 --> 00:07:37.030
&gt;&gt; Bianca Gandolfo: So, we loop through.

105
00:07:39.150 --> 00:07:45.142
Here and we mark these as, maybe, visited,

106
00:07:45.142 --> 00:07:50.190
or whatever.
&gt;&gt; Bianca Gandolfo: Something like that.

107
00:07:51.670 --> 00:07:56.066
Or we put exclamation points at the end,

108
00:07:56.066 --> 00:07:59.310
very useful operation to do.

109
00:07:59.310 --> 00:08:04.421
So we did that, and then, we're gonna go

110
00:08:04.421 --> 00:08:09.370
again and we're gonna like, do what?

111
00:08:09.370 --> 00:08:10.030
Like look

112
00:08:10.030 --> 00:08:14.960
maybe in the adjacency list for, for it?

113
00:08:14.960 --> 00:08:18.370
&gt;&gt; Speaker 4: Edges?
&gt;&gt; Bianca Gandolfo: Yeah.

114
00:08:18.370 --> 00:08:23.371
So we look through again,
and then like, maybe,

115
00:08:23.371 --> 00:08:30.060
maybe just, what do you think
about just like recursing?

116
00:08:30.060 --> 00:08:30.560
Here.

117
00:08:33.470 --> 00:08:37.974
Recurse with like,

118
00:08:37.974 --> 00:08:44.870
Gone.
&gt;&gt; Bianca Gandolfo: Does that make sense?

119
00:08:44.870 --> 00:08:49.661
So, we go to the next thing and the
adjacency list, so lets just say two, so

120
00:08:49.661 --> 00:08:51.579
we look up (nodes[2]).

121
00:08:51.579 --> 00:08:55.450
All right, similar like we had this
thing before, this underscore nodes.

122
00:08:58.730 --> 00:09:01.559
So we recurse, so
we loop and then we recurse.

123
00:09:02.810 --> 00:09:07.202
And then we start over again.
&gt;&gt; Bianca Gandolfo: That seem

124
00:09:07.202 --> 00:09:12.223
useful?
&gt;&gt; Bianca Gandolfo: Do we have to do

125
00:09:12.223 --> 00:09:18.475
that?
&gt;&gt; Bianca Gandolfo: I think

126
00:09:18.475 --> 00:09:25.160
we're left with some questions to ponder.
&gt;&gt; Bianca Gandolfo: So the question is,

127
00:09:25.160 --> 00:09:30.100
how do we get to the next layer?
&gt;&gt; Bianca Gandolfo: How

128
00:09:30.100 --> 00:09:34.010
do we get to the next layer?
&gt;&gt; Bianca Gandolfo: Do we need to recurse?

129
00:09:35.350 --> 00:09:36.333
&gt;&gt; Speaker 2: I feel like we might

130
00:09:36.333 --> 00:09:40.100
not need to.
&gt;&gt; Speaker 2: Because-

131
00:09:40.100 --> 00:09:40.610
&gt;&gt; Bianca Gandolfo: You feel in your

132
00:09:40.610 --> 00:09:43.448
heart.
&gt;&gt; Speaker 2: Yeah, because we have

133
00:09:43.448 --> 00:09:48.442
the data structure that we can index into.

134
00:09:48.442 --> 00:09:50.254
It isn't like a linked list or

135
00:09:50.254 --> 00:09:53.880
a tree where you have to have
the node to access the next one.

136
00:09:53.880 --> 00:09:56.184
You have all the information all the time,
wherever you are.

137
00:09:56.184 --> 00:10:00.350
&gt;&gt; Bianca Gandolfo: Well, that's true.

138
00:10:00.350 --> 00:10:02.770
But do you have all
the information that you need.

139
00:10:02.770 --> 00:10:04.625
That's the question that
we're gonna be left with,

140
00:10:04.625 --> 00:10:06.400
cuz' we're running out of time.
&gt;&gt; Speaker 2: Right.

141
00:10:06.400 --> 00:10:08.283
We're gonna ponder.
&gt;&gt; Bianca Gandolfo: We're gonna sleep

142
00:10:08.283 --> 00:10:08.920
on it.

143
00:10:08.920 --> 00:10:09.730
We're gonna come back and

144
00:10:09.730 --> 00:10:13.760
we're gonna have all the answers
to all the questions, maybe.

145
00:10:14.880 --> 00:10:17.920
So wait, so
how do we get to the next layer?

146
00:10:17.920 --> 00:10:19.150
Do we need to recurse?

147
00:10:20.180 --> 00:10:20.680
Yeah.

148
00:10:21.720 --> 00:10:25.330
What about that flagging stuff,
we've been talking about that?

149
00:10:27.170 --> 00:10:29.230
When does flagging happen?

150
00:10:29.230 --> 00:10:30.820
Do we even need to recurse?

151
00:10:30.820 --> 00:10:36.012
If we don't, how do we do it and
the whole point, if we wanna get to that

152
00:10:36.012 --> 00:10:42.529
next layer.
&gt;&gt; Bianca Gandolfo: Seem fair?

153
00:10:42.529 --> 00:10:43.810
Cool.

154
00:10:43.810 --> 00:10:46.840
So these are things that you're gonna
explore when you're implementing

155
00:10:46.840 --> 00:10:47.386
your code.

156
00:10:47.386 --> 00:10:53.370
It's gonna be easier for you to debug,
while you're actually coding it out.

157
00:10:53.370 --> 00:10:54.886
Careful for loops, infinite loops.

158
00:10:54.886 --> 00:10:57.318
Great.

159
00:11:03.611 --> 00:11:07.905
&gt;&gt; Bianca Gandolfo: So, you can check back

160
00:11:07.905 --> 00:11:11.750
tomorrow morning.

161
00:11:11.750 --> 00:11:15.020
We'll go through,
the answers to these questions.

162
00:11:15.020 --> 00:11:18.440
I don't expect you to do
these on a Friday night.

163
00:11:18.440 --> 00:11:22.700
But if you happen to get a chance,
it will help you, while we're exploring

164
00:11:22.700 --> 00:11:27.740
the solution tomorrow, come with good
questions and deepen your understanding.

165
00:11:29.040 --> 00:11:32.500
So we'll do that and
we'll do some like recapping.

166
00:11:35.330 --> 00:11:36.290
Sound fair?

167
00:11:36.290 --> 00:11:36.821
Sound good?
And

168
00:11:36.821 --> 00:11:41.860
then we'll jump right into hash tables and
we're gonna be out after lunch.

169
00:11:41.860 --> 00:11:44.412
I may do a summation right after lunch.

170
00:11:44.412 --> 00:11:49.440
About, okay, so you have these
foundational pieces like I've been saying.

171
00:11:49.440 --> 00:11:52.220
And, we're starting to
piece them together.

172
00:11:52.220 --> 00:11:57.056
We're using a queue, we're talking
about maybe using hash tables, and

173
00:11:57.056 --> 00:11:59.030
we've used other pieces.

174
00:11:59.030 --> 00:12:02.229
Now we have, we know how to do
breadth first search for our trees, or

175
00:12:02.229 --> 00:12:04.082
we will once we figure it out tonight and

176
00:12:04.082 --> 00:12:08.318
tomorrow morning.
&gt;&gt; Bianca Gandolfo: So,

177
00:12:08.318 --> 00:12:12.600
it's all sort of coming together.

178
00:12:12.600 --> 00:12:15.910
And then,
there's a whole new layer, right?

179
00:12:15.910 --> 00:12:19.810
That we take these foundational skills and
apply to even more problems,

180
00:12:19.810 --> 00:12:21.039
like real world problems.

181
00:12:22.920 --> 00:12:24.562
That are maybe important to you,

182
00:12:24.562 --> 00:12:29.077
maybe important to your interviewer.
&gt;&gt; Bianca Gandolfo: So

183
00:12:29.077 --> 00:12:30.800
that's what we'll do tomorrow.

184
00:12:32.080 --> 00:12:34.760
We probably won't go in depth
into how to implement them.

185
00:12:34.760 --> 00:12:39.100
It'll be more like, okay you know these
things, you can implement this now.

186
00:12:39.100 --> 00:12:42.230
You know these things, you can
implement this now with these pieces.

187
00:12:42.230 --> 00:12:46.251
Kinda thing, and then it'll be up to you
to go on and explore that on your own.

