WEBVTT

1
00:00:00.360 --> 00:00:02.070
&gt;&gt; Bianca Gandolfo: Let's
try to calculate some,

2
00:00:02.070 --> 00:00:06.120
real code and
talk about time complexity with them.

3
00:00:06.120 --> 00:00:09.090
So some operations are constant time.

4
00:00:09.090 --> 00:00:12.660
Some operations, are linear time.

5
00:00:12.660 --> 00:00:15.263
Some are more, some are less.

6
00:00:15.263 --> 00:00:19.120
Let's explore, native methods.

7
00:00:20.290 --> 00:00:23.190
Yeah, do you guys know some
JavaScript native methods?

8
00:00:25.220 --> 00:00:26.348
Maybe for some arrays.

9
00:00:26.348 --> 00:00:29.600
&gt;&gt; Speaker 2: [INAUDIBLE]
Like you'll have to amend.

10
00:00:29.600 --> 00:00:30.298
&gt;&gt; Speaker 3: Push.

11
00:00:30.298 --> 00:00:33.625
&gt;&gt; Bianca Gandolfo: Yeah,
so that would be one.

12
00:00:33.625 --> 00:00:39.070
Like array that, push is a good one.

13
00:00:41.230 --> 00:00:42.710
&gt;&gt; Bianca Gandolfo: Mm, that's not native.

14
00:00:44.400 --> 00:00:46.818
&gt;&gt; Speaker 3: Pop.
&gt;&gt; Bianca Gandolfo: Yep got a pop,

15
00:00:46.818 --> 00:00:53.981
then we have like some,
like the expressions.

16
00:00:53.981 --> 00:00:55.590
Then we have maybe some loops.

17
00:01:00.146 --> 00:01:02.100
&gt;&gt; Bianca Gandolfo: And
what else can we put in here?

18
00:01:02.100 --> 00:01:06.460
We have like array.unshift
&gt;&gt; Bianca Gandolfo: Etc.

19
00:01:09.170 --> 00:01:13.490
So when we push to an array,

20
00:01:16.450 --> 00:01:19.535
as our array increases in size,

21
00:01:19.535 --> 00:01:23.770
how does the push method, how much more
work does the push method have to do?

22
00:01:26.478 --> 00:01:27.580
&gt;&gt; Speaker 2: Constant?

23
00:01:27.580 --> 00:01:29.640
&gt;&gt; Bianca Gandolfo: Constant,
it's the same, right?

24
00:01:29.640 --> 00:01:30.230
What's constant?

25
00:01:30.230 --> 00:01:31.448
O of?

26
00:01:31.448 --> 00:01:33.490
&gt;&gt; Speaker 2: 1
&gt;&gt; Speaker 3: 1, yeah.

27
00:01:33.490 --> 00:01:36.340
&gt;&gt; Bianca Gandolfo: Whoops, cool.

28
00:01:36.340 --> 00:01:37.660
What about pop?

29
00:01:37.660 --> 00:01:41.310
As our array grows in size,
how much more work does pop take?

30
00:01:43.270 --> 00:01:43.895
&gt;&gt; Speaker 2: Constant as well.

31
00:01:43.895 --> 00:01:44.554
&gt;&gt; Bianca Gandolfo: Mm-hm.

32
00:01:47.402 --> 00:01:49.952
&gt;&gt; Bianca Gandolfo: Awesome,
and expressions like this,

33
00:01:49.952 --> 00:01:54.830
obviously they don't change in size,
so that's also gonna be constant.

34
00:01:56.700 --> 00:01:57.411
What about a 4 loop?

35
00:01:57.411 --> 00:01:58.525
&gt;&gt; Speaker 2: Linear?

36
00:01:58.525 --> 00:01:59.548
&gt;&gt; Bianca Gandolfo: Mm-hm.

37
00:02:02.059 --> 00:02:06.780
&gt;&gt; Bianca Gandolfo: So, as our,
whatever we're looping through, right?

38
00:02:06.780 --> 00:02:09.390
It could be a number,
it could be an array.

39
00:02:09.390 --> 00:02:14.860
As that grows, we're gonna add one
more every time, for every loop.

40
00:02:16.570 --> 00:02:18.040
Good?

41
00:02:18.040 --> 00:02:18.540
Awesome.

42
00:02:21.810 --> 00:02:22.700
What about unshift?

43
00:02:27.485 --> 00:02:28.813
&gt;&gt; Bianca Gandolfo: So unshift is,

44
00:02:28.813 --> 00:02:33.320
when you put an element at
the beginning of an array.

45
00:02:35.600 --> 00:02:36.800
&gt;&gt; Speaker 2: When you
put it at the beginning?

46
00:02:36.800 --> 00:02:37.850
&gt;&gt; Bianca Gandolfo: Hm hm.

47
00:02:37.850 --> 00:02:39.460
&gt;&gt; Speaker 2: Seems like it'd be constant.

48
00:02:39.460 --> 00:02:41.499
So would you have to shift every-
&gt;&gt; Bianca Gandolfo: Yep.

49
00:02:42.945 --> 00:02:47.118
&gt;&gt; Bianca Gandolfo: So here, we have
to shift everything over one index,

50
00:02:47.118 --> 00:02:49.640
what kind of operation is that?

51
00:02:55.506 --> 00:02:56.940
&gt;&gt; Bianca Gandolfo: So
how can we think about this?

52
00:02:56.940 --> 00:03:03.430
So, let's say our array, oops,
our array, has a length of 4.

53
00:03:05.861 --> 00:03:10.497
&gt;&gt; Bianca Gandolfo: How many times
do we have to shift it over, for

54
00:03:10.497 --> 00:03:12.820
it to do this, right?

55
00:03:14.550 --> 00:03:17.223
Shift over 1 to this index,
2 to this index,

56
00:03:17.223 --> 00:03:20.850
4 to this index, or
you know 4 to the next index over.

57
00:03:20.850 --> 00:03:21.950
&gt;&gt; Speaker 2: Would it be quadratic?

58
00:03:24.730 --> 00:03:25.420
&gt;&gt; Bianca Gandolfo: Let's think about it.

59
00:03:27.560 --> 00:03:31.335
So what if,

60
00:03:31.335 --> 00:03:36.009
our
&gt;&gt; Bianca Gandolfo: We doubled,

61
00:03:36.009 --> 00:03:39.250
we doubled, right?

62
00:03:39.250 --> 00:03:40.310
So how much work is this?

63
00:03:40.310 --> 00:03:41.749
So we have to move it over how many times?

64
00:03:43.610 --> 00:03:44.210
&gt;&gt; Speaker 2: Four.

65
00:03:44.210 --> 00:03:45.120
&gt;&gt; Bianca Gandolfo: Four times yeah?

66
00:03:50.751 --> 00:03:55.570
&gt;&gt; Bianca Gandolfo: For this one,
&gt;&gt; Bianca Gandolfo: How many times do we

67
00:03:55.570 --> 00:03:56.657
have to move this over?

68
00:03:56.657 --> 00:03:59.888
&gt;&gt; Speaker 2: Eight times.

69
00:03:59.888 --> 00:04:00.756
&gt;&gt; Bianca Gandolfo: Eight.

70
00:04:00.756 --> 00:04:02.654
&gt;&gt; Speaker 2: Linear.

71
00:04:02.654 --> 00:04:07.309
&gt;&gt; Bianca Gandolfo: Mm-hm, so
as our array grows, we have,

72
00:04:07.309 --> 00:04:12.363
in more moves that we have to make,
cuz we have

73
00:04:12.363 --> 00:04:17.700
to shift every one over,
and we can't skip it.

74
00:04:17.700 --> 00:04:20.096
Where there's no getting out of that.

75
00:04:20.096 --> 00:04:22.715
So we were just talking about array.

76
00:04:22.715 --> 00:04:25.550
That unshift.

77
00:04:29.232 --> 00:04:31.945
&gt;&gt; Bianca Gandolfo: And
if we wanted to add, a 0 to it,

78
00:04:31.945 --> 00:04:35.520
how many times do we have to shift?

79
00:04:35.520 --> 00:04:39.060
So this is four moves, right?

80
00:04:39.060 --> 00:04:40.980
And if we double it.

81
00:04:49.991 --> 00:04:51.150
&gt;&gt; Bianca Gandolfo: This is eight moves.

82
00:04:54.830 --> 00:04:57.146
So the size of the array here.

83
00:04:57.146 --> 00:05:00.873
Size of 8.

84
00:05:03.370 --> 00:05:06.591
&gt;&gt; Bianca Gandolfo: Size of 4.

85
00:05:06.591 --> 00:05:12.670
So given this, if we had an array of 100,
or length 100,

86
00:05:12.670 --> 00:05:19.118
how many shifts would we have to
make to add the 0 at the beginning?

87
00:05:19.118 --> 00:05:22.850
100, yeah, and so
that's a linear time operation.

88
00:05:24.110 --> 00:05:28.420
So, the point I'm trying to make is that,
even though we have this native methods

89
00:05:28.420 --> 00:05:30.880
and we do need to be
mindful that they run,

90
00:05:30.880 --> 00:05:36.680
they still running underneath the hood
at different time complexities.

91
00:05:36.680 --> 00:05:41.230
And when we're calculating time
complexity, we need to keep that in mind.

92
00:05:41.230 --> 00:05:43.720
So if we're unshifting, which is
not a very popular thing to do, but

93
00:05:43.720 --> 00:05:46.680
you might be unshifting in
your algorithms, I don't know.

94
00:05:46.680 --> 00:05:52.040
Or sorting it's another one, something
that sort, is different time complexities.

95
00:05:54.140 --> 00:05:54.930
Cool.

96
00:05:54.930 --> 00:05:55.769
Questions about this?

97
00:06:00.110 --> 00:06:01.254
No.
Everyone's just an expert at

98
00:06:01.254 --> 00:06:01.876
time complexity now?

99
00:06:01.876 --> 00:06:03.458
Okay.

100
00:06:03.458 --> 00:06:09.430
&gt;&gt; Speaker 2: Do you have some example
concerning quadratic and exponential?

101
00:06:10.610 --> 00:06:13.030
&gt;&gt; Bianca Gandolfo: Yeah.
So quadratic, so

102
00:06:13.030 --> 00:06:18.030
an example of quadratic would be,
like a loop within a loop.

103
00:06:18.030 --> 00:06:22.350
So if you're looping
over the same set twice,

104
00:06:22.350 --> 00:06:25.640
that is just a classic example
of quadratic in an exponential.

105
00:06:25.640 --> 00:06:30.093
Similarly, like if you have
three loops looping over,

106
00:06:30.093 --> 00:06:35.397
the same data set, or two different
data sets of a similar length,

107
00:06:35.397 --> 00:06:40.154
you're gonna have a cubic
which is an exponential, yeah.

108
00:06:43.675 --> 00:06:45.060
&gt;&gt; Bianca Gandolfo: Cool.

109
00:06:45.060 --> 00:06:46.450
So is sorting linear?

110
00:06:48.680 --> 00:06:49.350
That's a great question.

111
00:06:49.350 --> 00:06:53.850
It depends on the sorting algorithm that
you use, and if we think about sorting and

112
00:06:53.850 --> 00:06:58.020
what it takes, we have to compare things
to one another, and we're gonna get to

113
00:06:58.020 --> 00:07:01.150
that in a second, but you're never
gonna see a linear sorting algorithm.

114
00:07:01.150 --> 00:07:02.990
If someone invents a linear
sorting algorithm,

115
00:07:02.990 --> 00:07:06.700
they're gonna win some Nobel prize
in computer science, if that exists.

116
00:07:09.110 --> 00:07:11.760
&gt;&gt; Bianca Gandolfo: So no,
there's no linear sorting.

