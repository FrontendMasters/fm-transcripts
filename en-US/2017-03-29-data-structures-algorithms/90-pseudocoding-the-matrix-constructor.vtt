WEBVTT

1
00:00:00.100 --> 00:00:00.990
&gt;&gt; Bianca Gandolfo: Pseudocode,

2
00:00:00.990 --> 00:00:04.760
we're just thinking about representing
our graph as a an adjacency matrix.

3
00:00:04.760 --> 00:00:08.590
So I guess, in our constructor,
we might need to have a matrix in there?

4
00:00:09.640 --> 00:00:10.200
Perhaps?

5
00:00:21.753 --> 00:00:23.600
&gt;&gt; Bianca Gandolfo: What might
I need to create a matrix?

6
00:00:23.600 --> 00:00:26.570
So everyone,
does everyone know what a matrix here is,

7
00:00:26.570 --> 00:00:29.710
when we talk about matrix in terms of
how we represent them in programming?

8
00:00:31.971 --> 00:00:33.390
&gt;&gt; Bianca Gandolfo: I'm
gonna take that as a no.

9
00:00:34.880 --> 00:00:36.460
Which is fine,
cuz I can explain it right now.

10
00:00:36.460 --> 00:00:42.740
So a matrix is how we represent,
like something on a 2D plane, often.

11
00:00:42.740 --> 00:00:48.090
Anything that's a game board,
chess, whatever, tic-tac-toe.

12
00:00:48.090 --> 00:00:52.120
Those are always gonna be, if you've
done any of those sort of toy problems,

13
00:00:52.120 --> 00:00:56.049
those are gonna be represented
as a matrix, or a 2D array.

14
00:00:58.000 --> 00:01:02.100
There's a lot of like, mathematical stuff
around matrices, but doesn't matter for

15
00:01:02.100 --> 00:01:05.340
us, but is the same thing.

16
00:01:06.490 --> 00:01:10.290
&gt;&gt; Bianca Gandolfo: What else
do I wanna say about matrix?

17
00:01:10.290 --> 00:01:16.750
Yeah, so if we were gonna have a like, two
by two matrix, it would look like this.

18
00:01:24.650 --> 00:01:29.058
&gt;&gt; Bianca Gandolfo: So that's a two by two
matrix, and often, it's an array, right?

19
00:01:29.058 --> 00:01:34.708
So here's,
&gt;&gt; Bianca Gandolfo: Actually,

20
00:01:34.708 --> 00:01:38.390
it's like this, no, I'm confusing myself.

21
00:01:38.390 --> 00:01:39.800
I had to do it like this, so I can see it.

22
00:01:43.083 --> 00:01:45.780
&gt;&gt; Bianca Gandolfo: I think
I have an extra bracket.

23
00:01:45.780 --> 00:01:47.890
Here we go.

24
00:01:47.890 --> 00:01:51.896
&gt;&gt; Bianca Gandolfo: So
we see that we have two arrays here, and

25
00:01:51.896 --> 00:01:56.029
we can represent by columns and then rows.

26
00:01:57.940 --> 00:02:01.800
We could put some values in here, etc.

27
00:02:07.020 --> 00:02:08.880
&gt;&gt; Bianca Gandolfo: Cool,
so that's our matrix.

28
00:02:16.130 --> 00:02:17.516
&gt;&gt; Bianca Gandolfo: Cool,
so we need to like,

29
00:02:17.516 --> 00:02:22.858
initialize a matrix with,
&gt;&gt; Bianca Gandolfo: Maybe some,

30
00:02:22.858 --> 00:02:27.801
we could start with sort of
a default number of empty spaces, or

31
00:02:27.801 --> 00:02:32.520
we could just start with one and
then add as we go.

32
00:02:32.520 --> 00:02:37.150
So your specific implementation,
I'm not really opinionated about it.

33
00:02:37.150 --> 00:02:42.690
But, so just need to create a matrix,
so let's just say initialize the matrix.

34
00:02:42.690 --> 00:02:47.700
&gt;&gt; Speaker 2: Is there
a minimum to create a matrix?

35
00:02:47.700 --> 00:02:50.572
Like, do you have to have one column and
one row, or it's not a matrix?

36
00:02:50.572 --> 00:02:52.938
Or like,
&gt;&gt; Bianca Gandolfo: Yeah,

37
00:02:52.938 --> 00:02:57.835
you have to have at least, I don't
know what like the actual rule is for

38
00:02:57.835 --> 00:03:02.898
the definition, but if you don't have,
like an array within an array,

39
00:03:02.898 --> 00:03:06.066
then it's just an empty array essentially.

40
00:03:09.035 --> 00:03:10.401
&gt;&gt; Speaker 2: Okay, thank you.

41
00:03:10.401 --> 00:03:14.049
&gt;&gt; Bianca Gandolfo: Mm-hm.

42
00:03:15.230 --> 00:03:19.340
Cool, so we initialize our matrix,
our adjacency matrix,

43
00:03:20.500 --> 00:03:24.450
somehow, and we can decide what makes
the most sense for us when we get there.

44
00:03:25.470 --> 00:03:26.400
What else might we need?

45
00:03:30.830 --> 00:03:32.550
&gt;&gt; Speaker 2: Values?

46
00:03:32.550 --> 00:03:33.050
I guess we don't need them.

47
00:03:36.910 --> 00:03:39.074
&gt;&gt; Bianca Gandolfo: Okay,
well we can start there, and

48
00:03:39.074 --> 00:03:42.330
then move to this method and
see if anything comes up.

49
00:03:45.130 --> 00:03:45.906
&gt;&gt; Bianca Gandolfo: Yeah, so

50
00:03:45.906 --> 00:03:52.130
do you guys follow my process of
creating data structures and algorithms?

51
00:03:52.130 --> 00:03:57.130
Basically, my process, and
we've been doing this this entire classes.

52
00:03:57.130 --> 00:04:00.268
Okay, let's think about the thing that
we just drew, we saw a picture like,

53
00:04:00.268 --> 00:04:02.070
what are the things that stand out, right?

54
00:04:02.070 --> 00:04:05.350
What's the first thing that stood out,
others than matrix?

55
00:04:05.350 --> 00:04:09.120
Maybe we should Google what matrix is,
figure out what that is.

56
00:04:10.340 --> 00:04:15.479
And then, my next thought would be like,
what else might we need in there?

57
00:04:16.630 --> 00:04:18.520
And then, if I'm like,
well, I'm not quite sure,

58
00:04:18.520 --> 00:04:21.350
I'm gonna move on to the next thing and

59
00:04:21.350 --> 00:04:25.910
then see if something arises where I get
stuck, and then I need something extra.

60
00:04:25.910 --> 00:04:29.070
And so, I encourage you just
to use the same process

61
00:04:29.070 --> 00:04:32.870
when you're reasoning through,
learning a new data structure or

62
00:04:32.870 --> 00:04:36.380
algorithm, cuz there's no way we're
gonna memorize all of them, right?

63
00:04:36.380 --> 00:04:40.520
Like, even if you take this class three
times, unless you're teaching the class,

64
00:04:40.520 --> 00:04:44.134
it's really, really hard to memorize,
and I even forget stuff too, and

65
00:04:44.134 --> 00:04:45.150
I teach this class.

66
00:04:46.180 --> 00:04:50.489
So it is important to just be
able to reason through it,

67
00:04:50.489 --> 00:04:54.802
rather than trying to stick
to your memory about like,

68
00:04:54.802 --> 00:04:59.318
how the specific implementation is and
all that, okay?

