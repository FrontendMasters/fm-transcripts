WEBVTT

1
00:00:00.270 --> 00:00:03.160
&gt;&gt; Bianca Gandolfo: I'm gonna quickly
go over some of the solution code,

2
00:00:03.160 --> 00:00:04.480
which you have access to.

3
00:00:04.480 --> 00:00:08.630
You may be asking where can I find that,
Bianca?

4
00:00:08.630 --> 00:00:10.120
Does your link even work?

5
00:00:10.120 --> 00:00:11.860
Well, we will find out now.

6
00:00:11.860 --> 00:00:13.100
Here's we go.
Are you ready?

7
00:00:15.150 --> 00:00:15.850
One, two, three.

8
00:00:17.240 --> 00:00:18.560
Here we are.

9
00:00:18.560 --> 00:00:21.620
You might notice it looks
almost exactly the same

10
00:00:22.760 --> 00:00:25.910
except this is a solution
branch from that repo.

11
00:00:25.910 --> 00:00:29.480
Feel free to do pull requests to this
branch if you wanna add different

12
00:00:29.480 --> 00:00:30.810
solutions, that's always cool.

13
00:00:30.810 --> 00:00:34.980
This is an open source repo,
so feel free to contribute.

14
00:00:34.980 --> 00:00:36.260
All right, so where were we?

15
00:00:36.260 --> 00:00:39.330
We were at stacks.

16
00:00:39.330 --> 00:00:40.623
What do you want to do first,
stack or cue?

17
00:00:40.623 --> 00:00:41.875
Which one did you guys do first?

18
00:00:45.318 --> 00:00:47.848
&gt;&gt; Speaker 2: Do stack first.

19
00:00:47.848 --> 00:00:52.815
&gt;&gt; Bianca Gandolfo: Stack first?

20
00:00:52.815 --> 00:00:55.870
All right, let's take a look.

21
00:00:55.870 --> 00:01:03.430
All right, so
here's just our stack implementation.

22
00:01:03.430 --> 00:01:06.881
So we have the ability to set
a capacity if you'd like,

23
00:01:06.881 --> 00:01:09.540
this will allow your stack to overflow.

24
00:01:09.540 --> 00:01:12.340
So we have our storage,
we have an empty object, and

25
00:01:12.340 --> 00:01:14.250
then we have a counter in here.

26
00:01:15.910 --> 00:01:18.240
So we have our push, it takes a value.

27
00:01:19.240 --> 00:01:24.760
If this._count is less than the capacity,
right?

28
00:01:24.760 --> 00:01:26.950
This is a software overflow.

29
00:01:26.950 --> 00:01:31.240
Then you're gonna increment count, or

30
00:01:31.240 --> 00:01:35.120
actually you're going to, it starts
at 0 and then it increments after.

31
00:01:35.120 --> 00:01:40.180
And we're gonna add it to our storage,
yeah?

32
00:01:41.330 --> 00:01:43.230
This look familiar to how you guys did it?

33
00:01:43.230 --> 00:01:44.090
Anyone do it differently?

34
00:01:47.030 --> 00:01:48.930
&gt;&gt; Bianca Gandolfo: Anyone
do it differently?

35
00:01:48.930 --> 00:01:49.870
Everyone get to this part?

36
00:01:51.020 --> 00:01:56.370
Thumbs, middle thumbs, down thumb,
okay, a lot of people didn't.

37
00:01:56.370 --> 00:01:59.870
Okay, no worries,
I'll just kind of review.

38
00:01:59.870 --> 00:02:02.270
And then remember try to
do it on your own but

39
00:02:02.270 --> 00:02:04.212
don't look at the solution
at the same time.

40
00:02:04.212 --> 00:02:04.910
That's my only request.

41
00:02:04.910 --> 00:02:10.300
And I say that because I care about you
and your effective use of your time.

42
00:02:11.440 --> 00:02:12.520
Cool.

43
00:02:12.520 --> 00:02:13.760
So our push.

44
00:02:13.760 --> 00:02:17.000
We are gonna just check
that we're not overflowing.

45
00:02:17.000 --> 00:02:21.030
If we aren't then we're just
going to use our counter.

46
00:02:22.890 --> 00:02:23.740
And save it there.

47
00:02:23.740 --> 00:02:26.110
We're gonna return this._count.

48
00:02:27.690 --> 00:02:30.670
This is the same implementation
the the array does,

49
00:02:30.670 --> 00:02:35.160
so if you push into an array,
it's gonna return the length of the array.

50
00:02:36.450 --> 00:02:37.800
So, that's why we're doing that.

51
00:02:37.800 --> 00:02:45.150
And then otherwise,
we're like stack overflow, stop, right?

52
00:02:45.150 --> 00:02:46.200
So, we have pop.

53
00:02:47.340 --> 00:02:48.230
Here we are.

54
00:02:48.230 --> 00:02:50.650
We are saving the value here.

55
00:02:50.650 --> 00:02:51.566
We're gonna delete it.

56
00:02:51.566 --> 00:02:55.450
And, again,
this._count is gonna have a reference to

57
00:02:59.010 --> 00:03:02.440
the last index plus one.

58
00:03:03.500 --> 00:03:06.390
Yeah, thumbs on what I mean by that.

59
00:03:06.390 --> 00:03:08.880
Okay, we're gonna decrement it first,

60
00:03:10.220 --> 00:03:13.100
that's why the minus minus
is at the beginning.

61
00:03:13.100 --> 00:03:14.670
It decrements first so

62
00:03:14.670 --> 00:03:18.400
if count is five before we run this line,
it's gonna be four.

63
00:03:19.750 --> 00:03:23.250
Yeah, this could be confusing to
people when the decrement is at

64
00:03:23.250 --> 00:03:25.320
the beginning versus sometimes
you see it at the end.

65
00:03:26.470 --> 00:03:31.750
The beginning it decrements first,
at the end it decrements after.

66
00:03:31.750 --> 00:03:33.800
So it'll return a number and
then decrement.

67
00:03:35.450 --> 00:03:39.020
All right, so we have two things
that you can do in this moment.

68
00:03:39.020 --> 00:03:44.235
One, you can repeat what I just described
or two you can ask me a question.

69
00:03:47.677 --> 00:03:50.069
&gt;&gt; Speaker 2: Repeat.

70
00:03:50.069 --> 00:03:51.360
&gt;&gt; Bianca Gandolfo: Yeah, let's hear it.

71
00:03:51.360 --> 00:03:55.830
&gt;&gt; Speaker 2: Okay so if you put the
incremeter or the decrementer in front of

72
00:03:55.830 --> 00:04:01.250
the value, it will use the value
after that has happened to it.

73
00:04:01.250 --> 00:04:05.180
If you do it after,
it will use the value and then do that.

74
00:04:05.180 --> 00:04:07.170
&gt;&gt; Bianca Gandolfo: Yes, awesome.

75
00:04:07.170 --> 00:04:07.770
We're good on that?

76
00:04:09.150 --> 00:04:11.580
You have a thing and
you're doing this with your eyebrows.

77
00:04:11.580 --> 00:04:13.736
Is that how you just look or
are you thinking.

78
00:04:13.736 --> 00:04:15.882
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Bianca Gandolfo: [LAUGH]

79
00:04:15.882 --> 00:04:18.850
&gt;&gt; Speaker 3: I don't know, I guess I'd

80
00:04:18.850 --> 00:04:25.720
rather avoid, seems like you're asking for
bugs if you're using features, but okay.

81
00:04:25.720 --> 00:04:27.820
&gt;&gt; Bianca Gandolfo: Yeah,
it'a a stylistic choice for sure.

82
00:04:28.950 --> 00:04:34.140
But this, so this is like I'm judging you
and your coding style or I'm confused.

83
00:04:35.670 --> 00:04:36.472
&gt;&gt; Speaker 3: Yeah, I'm judging you.

84
00:04:36.472 --> 00:04:38.996
[LAUGH]
&gt;&gt; Bianca Gandolfo: Okay, that's fair.

85
00:04:41.794 --> 00:04:44.043
&gt;&gt; Bianca Gandolfo: All right, cool.

86
00:04:44.043 --> 00:04:47.890
All right, I will say it one more time.

87
00:04:47.890 --> 00:04:50.500
Because the live streamers say so
and so I will do it.

88
00:04:52.260 --> 00:04:56.700
So I'm highlighting this piece of code,
it's a little bit confusing

89
00:04:56.700 --> 00:05:00.349
because sometimes, and I'll just
open my side here, sometimes we see

90
00:05:03.230 --> 00:05:08.848
x plus plus,
sometimes we see x minus minus, right?

91
00:05:08.848 --> 00:05:16.030
Or what we're looking at here is
something equivalent to this, yeah?

92
00:05:19.260 --> 00:05:24.110
So the difference between these two, and
this is mostly like JavaScript trivia, but

93
00:05:24.110 --> 00:05:28.600
it is important,
is the order of operations.

94
00:05:28.600 --> 00:05:32.460
So each of these expressions is
a shortcut that does two things.

95
00:05:32.460 --> 00:05:36.480
The first thing it does is it
either adds or or it minuses one.

96
00:05:36.480 --> 00:05:39.550
The second thing it does
is it returns a number.

97
00:05:39.550 --> 00:05:43.710
The difference is between the order
in which those operations happen.

98
00:05:45.120 --> 00:05:48.540
So for this one, where the operator

99
00:05:50.000 --> 00:05:56.370
is to the right of the variable,
it is going to

100
00:05:56.370 --> 00:06:02.060
return the number first, and then it's
going to either increment or decrement.

101
00:06:02.060 --> 00:06:07.001
So for example, if x ==3 at

102
00:06:07.001 --> 00:06:10.970
the beginning, yeah?

103
00:06:10.970 --> 00:06:12.722
Or let's say 4.

104
00:06:12.722 --> 00:06:19.551
Then we will, so it'll be 4 and
it will return 4 and

105
00:06:19.551 --> 00:06:26.400
then it will decrement it,
and it will be 5, yeah?

106
00:06:27.690 --> 00:06:28.190
Cool.

107
00:06:29.720 --> 00:06:34.670
For example for this one the number in
the brackets if this is in some brackets

108
00:06:34.670 --> 00:06:39.338
will first be four and then the next time
you loop around it'll be three, yeah?

109
00:06:39.338 --> 00:06:40.166
Cool.

110
00:06:42.995 --> 00:06:44.530
&gt;&gt; Bianca Gandolfo: Great.

111
00:06:46.000 --> 00:06:48.700
And the difference here, for this one,

112
00:06:49.880 --> 00:06:53.840
is that first it's gonna do the operation,
and then return it.

113
00:06:53.840 --> 00:06:57.870
So this will actually return 5,
while this one returns 4.

114
00:06:59.993 --> 00:07:02.730
&gt;&gt; Bianca Gandolfo: Yeah,
and this one will return 3,

115
00:07:02.730 --> 00:07:05.294
while this one still returns 4.

116
00:07:07.569 --> 00:07:08.724
&gt;&gt; Bianca Gandolfo: Cool.

117
00:07:10.949 --> 00:07:13.662
&gt;&gt; Bianca Gandolfo: All right, great.

118
00:07:15.890 --> 00:07:17.800
&gt;&gt; Bianca Gandolfo: Okay, where were we?

119
00:07:17.800 --> 00:07:21.063
Okay, so, we're decrementing it first.

120
00:07:23.510 --> 00:07:28.380
&gt;&gt; Bianca Gandolfo: Then
passing in the integer.

121
00:07:28.380 --> 00:07:28.970
Yeah, okay.

122
00:07:30.000 --> 00:07:36.430
Then we delete it and
then we say if this._count

123
00:07:36.430 --> 00:07:41.790
is less than zero, make it zero and
you're gonna return the value.

124
00:07:43.550 --> 00:07:44.448
Cool.
This is for

125
00:07:44.448 --> 00:07:46.651
the case where we pop off the last one.

126
00:07:49.178 --> 00:07:51.563
&gt;&gt; Bianca Gandolfo: Cool, so this is peek.

127
00:07:51.563 --> 00:07:56.590
And this is just gonna show us
the last one that's about to pop.

128
00:07:56.590 --> 00:07:59.090
So this is if you want to look at the last
one but you don't want to pop it off.

129
00:08:01.190 --> 00:08:02.980
Count, that's easy, return this._count.

130
00:08:02.980 --> 00:08:07.820
And then we have the MinStack which I'm

131
00:08:07.820 --> 00:08:10.990
not gonna give you a walk through because
a lot of you guys haven't done it yet.

132
00:08:10.990 --> 00:08:13.560
But you have the code here.

133
00:08:13.560 --> 00:08:14.140
It's really fun.
It's

134
00:08:15.350 --> 00:08:16.600
not something you're
gonna do in real life.

135
00:08:16.600 --> 00:08:18.870
We were just talking
about this in the chat.

136
00:08:18.870 --> 00:08:23.830
You're not gonna ever, well,
actually I'm thinking of a different one.

137
00:08:25.270 --> 00:08:28.000
But we were talking about something else.

138
00:08:28.000 --> 00:08:29.110
Nevermind.

139
00:08:29.110 --> 00:08:30.540
Anyway, MinStack,

140
00:08:30.540 --> 00:08:34.070
I want you guys to implement it before
I show you the solutions, okay?

141
00:08:35.260 --> 00:08:38.359
Cool, any questions about this?

142
00:08:40.230 --> 00:08:42.110
&gt;&gt; Bianca Gandolfo: This
is pretty straightforward.

143
00:08:42.110 --> 00:08:45.420
So who here kind of had a gap?

144
00:08:45.420 --> 00:08:50.060
So I was just talking with Maurice a few
minutes ago, and we were talking about

145
00:08:50.060 --> 00:08:54.360
this sort of gap when that happens,
when I'm talking about this thing,

146
00:08:54.360 --> 00:08:57.450
talking about this thing,
theoretically it sounds great.

147
00:08:57.450 --> 00:09:01.390
But if you've never actually implemented
it before, it was like, God,

148
00:09:01.390 --> 00:09:02.030
I understand it.

149
00:09:02.030 --> 00:09:03.380
But then when it gets to the code,

150
00:09:04.600 --> 00:09:08.830
there's a little bit of
a difficulty moving through.

151
00:09:10.130 --> 00:09:11.920
Anyone else experience that?

152
00:09:12.940 --> 00:09:14.050
Yeah?

153
00:09:14.050 --> 00:09:16.680
Cool.
So this is the learning moment, right?

154
00:09:16.680 --> 00:09:17.670
This is what you're here for.

155
00:09:17.670 --> 00:09:21.340
It's like, that's the part where you're
like, this is where I haven't done this

156
00:09:21.340 --> 00:09:26.660
thing before, and I'm gonna grow
by pushing through that limit.

157
00:09:26.660 --> 00:09:27.250
So that's awesome.

158
00:09:27.250 --> 00:09:28.340
If you're already experiencing that,

159
00:09:29.510 --> 00:09:34.760
your brain is gonna be like whoa through
all of that, so that's exciting.

160
00:09:34.760 --> 00:09:36.590
All right, so where are we?

161
00:09:36.590 --> 00:09:38.090
We want to look at queue.

162
00:09:39.860 --> 00:09:41.740
We'll do this pretty quickly.

163
00:09:41.740 --> 00:09:47.340
It's not super,
super different than before except for,

164
00:09:47.340 --> 00:09:49.280
in this case,
we're gonna have a head and a tail.

165
00:09:49.280 --> 00:09:55.000
And I think that's gonna be for
a different implementation.

166
00:09:56.690 --> 00:10:01.250
So we're gonna enqueue, so
we're gonna add something to the list.

167
00:10:02.260 --> 00:10:09.930
So if it is not above the capacity,
you're gonna add the value.

168
00:10:09.930 --> 00:10:11.420
And then you're gonna increment the tail.

169
00:10:12.950 --> 00:10:18.480
Return this._count,
otherwise you reach the max capacity.

170
00:10:18.480 --> 00:10:21.170
Really similar to our other one.

171
00:10:22.290 --> 00:10:25.960
Great, so when we DQ, again,
we need to save our element.

172
00:10:27.620 --> 00:10:28.890
We have our pointer to a head.

173
00:10:29.910 --> 00:10:30.700
We're gonna delete it.

174
00:10:32.370 --> 00:10:37.760
And then if the head is less than
the tail, increment the head and return.

175
00:10:37.760 --> 00:10:40.660
Peak very similar.

176
00:10:40.660 --> 00:10:44.040
Then to the other one, count as well.

177
00:10:44.040 --> 00:10:46.400
It's gonna be the difference
between the tail and the head.

178
00:10:48.250 --> 00:10:49.050
Awesome.

179
00:10:49.050 --> 00:10:52.570
Everything else you should spend
time implementing on your own when

180
00:10:53.760 --> 00:10:55.730
you get a second later today, cool?

181
00:10:55.730 --> 00:10:57.640
And we'll go through it tomorrow morning.

182
00:10:59.410 --> 00:11:02.240
All right,
any questions about this implementation?

183
00:11:05.300 --> 00:11:09.540
&gt;&gt; Speaker 3: Why do we
use underscore before?

184
00:11:09.540 --> 00:11:10.630
&gt;&gt; Bianca Gandolfo: Yeah,
why don't we use underscore?

185
00:11:10.630 --> 00:11:16.120
So that means it's basically
like a private variable.

186
00:11:16.120 --> 00:11:18.270
We don't really have this
concept of a private variable,

187
00:11:18.270 --> 00:11:22.410
it's basically telling other engineers,
hey this is my interface that I created.

188
00:11:23.840 --> 00:11:26.810
Don't mess with this directly.

189
00:11:26.810 --> 00:11:32.700
Only mess with it in the interface that
I created which is with these methods.

190
00:11:33.810 --> 00:11:36.000
Does that make sense?

191
00:11:36.000 --> 00:11:38.450
It's like saying it's private,
but it's not actually private.

192
00:11:38.450 --> 00:11:45.570
You could change them anywhere,
but it's a mark to not do that.

193
00:11:45.570 --> 00:11:46.480
Do you have something?

194
00:11:46.480 --> 00:11:49.440
&gt;&gt; Speaker 2: A remark on the chat
which I think you might address.

195
00:11:49.440 --> 00:11:53.260
Victoria's asking or saying,
I don't know what O(1) means.

196
00:11:53.260 --> 00:11:56.830
So I'm guessing, that is what I came for

197
00:11:56.830 --> 00:12:02.106
was to learn what that Greek
complex trig looking syntax means.

198
00:12:02.106 --> 00:12:05.830
&gt;&gt; Bianca Gandolfo: Yep, so yep that's
big on notation and this is here just for

199
00:12:05.830 --> 00:12:07.140
your reference.

200
00:12:07.140 --> 00:12:10.000
But we'll get into that,
maybe by the end of the day but

201
00:12:10.000 --> 00:12:13.559
probably first thing tomorrow
depending on how things go.

202
00:12:14.710 --> 00:12:16.530
Yeah, we're gonna get into that.

203
00:12:16.530 --> 00:12:19.090
Right now we're just one step at a time,
yeah.

