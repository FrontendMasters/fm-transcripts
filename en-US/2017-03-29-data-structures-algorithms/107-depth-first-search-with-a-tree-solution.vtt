WEBVTT

1
00:00:00.250 --> 00:00:04.450
&gt;&gt; Bianca Gandolfo: What do you remember
about depth first search with a tree, and

2
00:00:04.450 --> 00:00:05.990
how is it different?

3
00:00:05.990 --> 00:00:10.415
Let's compare just for fun.
&gt;&gt; Speaker 2: You don't have to keep

4
00:00:10.415 --> 00:00:14.878
track of where you've visited.
&gt;&gt; Bianca Gandolfo: Let's

5
00:00:14.878 --> 00:00:18.462
go,
&gt;&gt; Bianca Gandolfo: Why don't we have

6
00:00:18.462 --> 00:00:20.190
to keep track of where
we've visted in the tree?

7
00:00:21.600 --> 00:00:25.997
Solution.
&gt;&gt; Speaker 3: Cuz you

8
00:00:25.997 --> 00:00:30.113
don't have to worry about the pads.
&gt;&gt; Bianca Gandolfo: Yeah,

9
00:00:30.113 --> 00:00:32.177
cuz here's our tree one.

10
00:00:53.635 --> 00:00:54.511
&gt;&gt; Bianca Gandolfo: So for a tree,

11
00:00:54.511 --> 00:00:57.651
in this case we're not
keeping track of our depth.

12
00:00:57.651 --> 00:01:01.848
We could do that though if
we wanted in a similar way.

13
00:01:01.848 --> 00:01:04.430
What we're doing this for each here.

14
00:01:05.520 --> 00:01:08.145
The main difference is we have those for
each.

15
00:01:08.145 --> 00:01:10.520
This for
each is gonna check if it's visited.

16
00:01:12.590 --> 00:01:15.554
This tree we don't.
&gt;&gt; Bianca Gandolfo: And

17
00:01:15.554 --> 00:01:16.911
what's the reason again?

18
00:01:16.911 --> 00:01:19.079
I said it but then suddenly forgot.

19
00:01:32.714 --> 00:01:35.688
&gt;&gt; Bianca Gandolfo: Why?
What happens--what's the difference

20
00:01:35.688 --> 00:01:38.060
between a tree and a graph?

21
00:01:38.060 --> 00:01:41.760
The main difference?
&gt;&gt; Speaker 3: A graph can have cyclical

22
00:01:41.760 --> 00:01:43.870
paths.
&gt;&gt; Bianca Gandolfo: Yeah, and so

23
00:01:43.870 --> 00:01:48.990
what would happen if we didn't check,

24
00:01:48.990 --> 00:01:51.910
if we visited and we had a cycle?
&gt;&gt; Speaker 2: Infinite

25
00:01:51.910 --> 00:01:52.509
loop.
&gt;&gt; Bianca Gandolfo: We'd

26
00:01:52.509 --> 00:01:53.507
have an infinite loop.

27
00:01:53.507 --> 00:01:57.670
And so
we have this catch that's saying okay,

28
00:01:57.670 --> 00:02:03.008
if this has been visited we're
not gonna keep traversing,

29
00:02:03.008 --> 00:02:06.333
and recursing into that every time.

30
00:02:06.333 --> 00:02:08.645
Cool?

31
00:02:08.645 --> 00:02:17.042
Great.
&gt;&gt; Bianca Gandolfo: All right.

32
00:02:17.042 --> 00:02:21.783
Any questions?
&gt;&gt; Bianca Gandolfo: So,

33
00:02:21.783 --> 00:02:27.940
there was a question online
about passing this to for each.

34
00:02:27.940 --> 00:02:31.700
For each takes a second parameter.

35
00:02:31.700 --> 00:02:36.060
And that's just setting the context so
that you don't lose the value of this.

36
00:02:36.060 --> 00:02:39.816
We briefly talked about this being kind
of finicky and there's certain rules.

37
00:02:39.816 --> 00:02:45.162
And how we can't explicitly set it inside
of the body of the function except for

38
00:02:45.162 --> 00:02:48.940
using call and apply or
using the keyword new.

39
00:02:48.940 --> 00:02:50.790
Or what else did we say?

40
00:02:50.790 --> 00:02:55.682
Just calling it to the left of the dot,
etcetera.

41
00:02:55.682 --> 00:03:00.753
And then some functions take that into
consideration in their implementation

42
00:03:00.753 --> 00:03:05.741
like for each to make sure that you're
able to explicitly set what this is, so

43
00:03:05.741 --> 00:03:08.069
that you don't lose your context.

44
00:03:08.069 --> 00:03:12.115
Which is a common problem in JavaScript,
just losing your context and

45
00:03:12.115 --> 00:03:16.641
then you're saying this dot my function,
and then you're getting an error,

46
00:03:16.641 --> 00:03:20.380
you're running out of the window for
some reason.

47
00:03:20.380 --> 00:03:25.530
Or it says window is not a function,
or something crazy like that.

48
00:03:25.530 --> 00:03:27.240
So, that's this.

49
00:03:29.490 --> 00:03:29.990
Okay.

