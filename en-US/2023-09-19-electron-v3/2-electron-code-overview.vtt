WEBVTT

1
00:00:00.140 --> 00:00:01.857
So let's jump into it.

2
00:00:01.857 --> 00:00:03.828
And one of the things
at the very beginning,

3
00:00:03.828 --> 00:00:06.019
I'll kind of just put this up again for
a moment.

4
00:00:06.019 --> 00:00:09.274
We've got three different repos that
we're gonna play around with today.

5
00:00:09.274 --> 00:00:13.138
And also there is this tool called
Electron Fiddle that you can play

6
00:00:13.138 --> 00:00:13.969
around with.

7
00:00:13.969 --> 00:00:17.394
I have it installed here, I'll kind
of just show you cause I think it

8
00:00:17.394 --> 00:00:20.594
like highlights a little bit of
what the kind of processes are.

9
00:00:20.594 --> 00:00:24.490
So we'll kind of take a look
at one of these electronic

10
00:00:24.490 --> 00:00:29.439
fiddles because it's a very,
very simple view of an electron app.

11
00:00:29.439 --> 00:00:32.190
And then we're gonna jump into
this tool called electron forge.

12
00:00:32.190 --> 00:00:36.490
Like I mentioned earlier,
electron forge is a bunch of the kind of

13
00:00:36.490 --> 00:00:41.336
standard tools and setup because,
in the same way with create react app,

14
00:00:41.336 --> 00:00:44.174
could you wire up your
own web pack by hand?

15
00:00:44.174 --> 00:00:47.868
And maybe you want to, but
you probably don't, right?

16
00:00:47.868 --> 00:00:49.355
And could you get all these things set up?

17
00:00:49.355 --> 00:00:53.520
And for instance, a question about
auto-updating stuff along those lines.

18
00:00:53.520 --> 00:00:59.160
It's kind of a lot of the best practices
and boilerplate kind of set up for you.

19
00:00:59.160 --> 00:01:03.598
And so we'll use that for
most of our time together cuz I would say,

20
00:01:03.598 --> 00:01:07.324
unless you are porting a,
I won't even say legacy, but

21
00:01:07.324 --> 00:01:12.730
an existing application and can you port
it to Electron Forge, you can, right.

22
00:01:12.730 --> 00:01:16.270
But, generally speaking for
starting Electron apps,

23
00:01:16.270 --> 00:01:21.775
I would like highly recommend the setup in
Electron Forge, otherwise you will fight.

24
00:01:21.775 --> 00:01:25.952
And be copying and pasting stuff off a
stack overflow to build this setup 'cause

25
00:01:25.952 --> 00:01:29.711
eventually you will probably want
some amount of a build tool, right?

26
00:01:29.711 --> 00:01:34.549
Regardless of where you fall on
the vanilla.js to [LAUGH] react spectrum,

27
00:01:34.549 --> 00:01:35.100
right?

28
00:01:35.100 --> 00:01:39.400
At some point,
insofar especially that we don't write

29
00:01:39.400 --> 00:01:44.341
to the file system anymore,
having some kind of module system or

30
00:01:44.341 --> 00:01:47.920
Bundler makes sense at some point or
another.

31
00:01:47.920 --> 00:01:52.260
But this is the kind of like
hello world of an electron app.

32
00:01:52.260 --> 00:01:54.380
If we open up Electron fiddle.

33
00:01:54.380 --> 00:01:59.992
And I think having the world's simplest
version kind of gives you a sense of what

34
00:01:59.992 --> 00:02:05.120
we're getting into as we kinda go into
one of these Electron forge apps.

35
00:02:05.120 --> 00:02:07.900
So to kinda take a quick tour.

36
00:02:07.900 --> 00:02:12.841
You start out with the Electron library
and could you do an NPM and Knit and

37
00:02:12.841 --> 00:02:14.470
NPM install electron.

38
00:02:14.470 --> 00:02:15.940
Absolutely, right?

39
00:02:15.940 --> 00:02:20.615
That is theoretically all that's happening
in this version without Electron

40
00:02:20.615 --> 00:02:24.170
forge is simply cool,
we NPM installed electron, right?

41
00:02:24.170 --> 00:02:29.419
And generally speaking,
when you use electron to start up the app,

42
00:02:29.419 --> 00:02:34.130
it will look in your package json for
your main file, right?

43
00:02:34.130 --> 00:02:38.650
In this case that is main.js, and
that is the initial entry point.

44
00:02:38.650 --> 00:02:39.560
The same way for

45
00:02:39.560 --> 00:02:43.900
a node process where you might have
a main file that's either index.js or

46
00:02:43.900 --> 00:02:48.660
server.js, that when you run an NPM start
that is equally as true for Electron.

47
00:02:48.660 --> 00:02:52.536
And in electron once you're
running it within electron itself,

48
00:02:52.536 --> 00:02:55.500
you've got a whole bunch
of these kinda modules.

49
00:02:55.500 --> 00:02:59.005
Now, back in the day,
you had to do a lot more thinking about

50
00:02:59.005 --> 00:03:01.883
which ones were available
in the main process and

51
00:03:01.883 --> 00:03:04.924
which ones are available
in the renderer process.

52
00:03:04.924 --> 00:03:09.135
That newer security posture
makes your life a lot easier

53
00:03:09.135 --> 00:03:13.629
cuz very few of them are available
in the renderer process.

54
00:03:13.629 --> 00:03:17.791
Right, and that's where, like I said
before, a lot of our time together is

55
00:03:17.791 --> 00:03:21.368
gonna be dancing on that like,
hey, main process has access to,

56
00:03:21.368 --> 00:03:25.876
can read power settings, can figure out
when the AC goes on versus battery power.

57
00:03:25.876 --> 00:03:29.695
Or can read and write to the file system,
or directly talk to a data,

58
00:03:29.695 --> 00:03:33.581
all that stuff, a lot of times you
render a process being like, hey,

59
00:03:33.581 --> 00:03:36.530
main process, I need this,
can you get this for me?

60
00:03:36.530 --> 00:03:39.030
And then it will send it back over, right?

61
00:03:39.030 --> 00:03:43.819
And so less of trying to think about
which ones are available where that was

62
00:03:43.819 --> 00:03:45.760
a lot harder of a lift before.

63
00:03:45.760 --> 00:03:47.220
But now, none of them.

64
00:03:47.220 --> 00:03:50.320
None of them, like four of them, right?

65
00:03:50.320 --> 00:03:53.020
And it'll become increasingly
clear which ones they are.

66
00:03:53.020 --> 00:03:56.648
The IPC ability to talk
to the main process,

67
00:03:56.648 --> 00:04:01.160
like spinning up other,
smaller browser contexts and

68
00:04:01.160 --> 00:04:06.473
clipboard, it might be one more,
but, there's four of them.

69
00:04:06.473 --> 00:04:09.165
So we've got the ability
to pull an electron and

70
00:04:09.165 --> 00:04:11.800
then you can see we're
pulling in two things.

71
00:04:11.800 --> 00:04:15.310
App, and then browser window.

72
00:04:15.310 --> 00:04:18.510
I will let you take a wild guess
what browser window does, right?

73
00:04:18.510 --> 00:04:23.810
And when you call new browser window,
what happens?

74
00:04:23.810 --> 00:04:26.786
In there we have the width and
the height of the browser window and

75
00:04:26.786 --> 00:04:29.060
there are a whole bunch
of other options in here.

76
00:04:29.060 --> 00:04:31.771
There is the maximum width,
the minimum width, so

77
00:04:31.771 --> 00:04:33.789
you can very much control the window,

78
00:04:33.789 --> 00:04:37.717
it's not just like with somebody
else's browser where it's good luck.

79
00:04:37.717 --> 00:04:39.793
Think about every
responsive design viewport,

80
00:04:39.793 --> 00:04:41.370
you can have some amount of control.

81
00:04:41.370 --> 00:04:45.480
You can also assume you're building for
the desktop as well.

82
00:04:45.480 --> 00:04:50.610
As web preferences, there are things
of do you wanna disable web security?

83
00:04:50.610 --> 00:04:54.925
I'm gonna tell you, you don't,
you make your own choices.

84
00:04:54.925 --> 00:04:57.305
And this is where we say
where the preload script is.

85
00:04:57.305 --> 00:05:02.484
That is that one script that has a little
bit of ability to grab some things from

86
00:05:02.484 --> 00:05:07.823
the main process and has a little bit more
leeway than the actual browser context

87
00:05:07.823 --> 00:05:13.105
does right before you go in, and so
we'll look at the preload.js in a moment.

88
00:05:13.105 --> 00:05:16.879
Then next,
you just load up an HTML file, right?

89
00:05:16.879 --> 00:05:22.330
And that is effectively the entry
point for your application, right?

90
00:05:22.330 --> 00:05:25.885
You can choose whether or not you wanna
use a framework or something along

91
00:05:25.885 --> 00:05:29.264
those lines but you get that initial
HTML file that kinda starts out,

92
00:05:29.264 --> 00:05:31.672
and we'll peek at that too,
just to see as well.

93
00:05:31.672 --> 00:05:36.218
And the cool part is you have full control
over everything, you can choose to

94
00:05:36.218 --> 00:05:40.780
immediately open the DevTools,
there's a bunch of options there as well.

95
00:05:40.780 --> 00:05:41.970
As you go in you have full control.

96
00:05:41.970 --> 00:05:45.477
You can even say if
process m = development,

97
00:05:45.477 --> 00:05:49.550
then open it by default,
so on and so forth, right?

98
00:05:49.550 --> 00:05:57.900
A lot of even production electron apps
still let you open up the DevTools, right?

99
00:05:57.900 --> 00:05:59.865
I'm pretty sure, in a number of them,

100
00:05:59.865 --> 00:06:03.390
you're still allowed to kind of
inspect and stuff along those lines.

101
00:06:03.390 --> 00:06:06.711
When we build custom menus,
custom application menus,

102
00:06:06.711 --> 00:06:10.250
you can choose whether or
not you wanna expose that, right?

103
00:06:10.250 --> 00:06:14.070
So it's like, you can lock that
down a little bit more if you want.

104
00:06:14.070 --> 00:06:18.515
So this is a function called CreateWindow
but all it does is create a new window.

105
00:06:18.515 --> 00:06:21.862
When the app is ready we'll go ahead and
create a window,

106
00:06:21.862 --> 00:06:26.186
as you can see there are some like OS
accoutrements in here then we will talk

107
00:06:26.186 --> 00:06:30.690
a lot more about this as we go along,
right, even if you're a Windows like.

108
00:06:30.690 --> 00:06:33.937
Yeah, you can ignore some of them, and
you'll have to think about other Windows

109
00:06:33.937 --> 00:06:36.050
things, but
there's some just general behavior.

110
00:06:36.050 --> 00:06:40.864
And that's again, I would say 90% might be
heard properly, but the lion's share is

111
00:06:40.864 --> 00:06:45.370
the process model and the other part is
getting your app not to feel weird, right?

112
00:06:45.370 --> 00:06:49.191
And so for instance, if you close
the last window on a Windows app or

113
00:06:49.191 --> 00:06:51.180
Linux app, you quit the process.

114
00:06:51.180 --> 00:06:53.934
If you close the last window
on a macOS application,

115
00:06:53.934 --> 00:06:56.950
it still hangs open and
you can open a new window, right?

116
00:06:56.950 --> 00:07:02.346
And so you can see that on activate,
on macOS, which is the only time you could

117
00:07:02.346 --> 00:07:08.180
activate it when there are no windows,
go ahead and create a window again, right?

118
00:07:08.180 --> 00:07:10.750
Which is I click the icon,
it opens back up.

119
00:07:10.750 --> 00:07:16.096
And then on windows all closed,
if it's not macOS,

120
00:07:16.096 --> 00:07:21.078
so darwin,
no js if you say process.platform,

121
00:07:21.078 --> 00:07:26.320
no js will think that,
Linux I think is just Linux.

122
00:07:26.320 --> 00:07:31.090
Windows might be win 32 regardless of,
whether or not you're on a 64 bit.

123
00:07:31.090 --> 00:07:32.303
I don't make the rules around here.

124
00:07:32.303 --> 00:07:34.760
I mean, listen, macOS is darwin, right?

125
00:07:34.760 --> 00:07:39.298
Cuz that is the bsd shell that is
based on, and so we say, okay, for

126
00:07:39.298 --> 00:07:43.044
everything else if you're not macOS,
quit, right?

127
00:07:43.044 --> 00:07:46.945
And we'll see what this
full thing does as well.

128
00:07:46.945 --> 00:07:52.329
But that's our main processes,
right now mostly all that is doing

129
00:07:52.329 --> 00:07:58.387
is identifying a preload.js and
index.html and then spinning that up and

130
00:07:58.387 --> 00:08:03.020
then handing some amount of
accoutrements around that.

131
00:08:03.020 --> 00:08:08.510
Looking at the preload and
I will hide main.js for a moment.

132
00:08:08.510 --> 00:08:10.370
There's a few things to note here.

133
00:08:10.370 --> 00:08:15.705
One is of the, and I remember what
the fourth thing was that the pre

134
00:08:15.705 --> 00:08:20.760
render process has is access to
the process object from node.

135
00:08:20.760 --> 00:08:25.727
Right, so it can read information about
the environment that it's running on,

136
00:08:25.727 --> 00:08:29.014
as well as in this case,
like, process.versions,

137
00:08:29.014 --> 00:08:31.000
which is put there by electron.

138
00:08:31.000 --> 00:08:32.900
But it also has access to the DOM.

139
00:08:32.900 --> 00:08:37.503
It's that kind of intermediary between
the main process about to go into

140
00:08:37.503 --> 00:08:42.557
the renderer process and get a few last
things back, the ability to communicate

141
00:08:42.557 --> 00:08:47.625
back to the main process which we will
spend most of the first app talking about.

142
00:08:47.625 --> 00:08:52.586
And then a few other things but
it also has access to the DOM but,

143
00:08:52.586 --> 00:08:56.049
as you can guess by
the name of this process,

144
00:08:56.049 --> 00:09:01.760
it is running before we've even
loaded index.html, it is basically,

145
00:09:01.760 --> 00:09:07.120
we have spun up a chromium process and
we have done nothing to it yet.

146
00:09:07.120 --> 00:09:09.300
We have not loaded in an HTML file.

147
00:09:09.300 --> 00:09:12.350
We have not even began to parse anything.

148
00:09:12.350 --> 00:09:15.571
This is why you still have
access to a few last things,

149
00:09:15.571 --> 00:09:18.793
which is there's still effectively,
we're just,

150
00:09:18.793 --> 00:09:23.251
just outta the main process and
nothing has really been grabbed onto yet.

151
00:09:23.251 --> 00:09:27.993
So it is still roughly safe to figure out
what are the last few things we wanna

152
00:09:27.993 --> 00:09:32.981
expose to the renderer process to kind
of have that connection back and forth.

153
00:09:32.981 --> 00:09:34.681
Cool.

154
00:09:34.681 --> 00:09:40.656
And then the renderer process in this
case is just a script tag, right?

155
00:09:40.656 --> 00:09:44.712
And it's a normal,
what you think about as client side code,

156
00:09:44.712 --> 00:09:50.814
it might be the end result of your webpack
or Bundler or something along those lines.

157
00:09:50.814 --> 00:09:53.951
The thing that you are always
used to as frontend engineers,

158
00:09:53.951 --> 00:09:57.100
this is where we normally live,
this is what we normally do.

159
00:09:57.100 --> 00:10:01.690
This one is mostly actually replacing the
DOM from the preload script cuz it needs

160
00:10:01.690 --> 00:10:02.850
access to process.

161
00:10:02.850 --> 00:10:07.330
But you could theoretically make just
a few properties on the process object

162
00:10:07.330 --> 00:10:11.670
available, and we will look at that
when we build our first app together.

163
00:10:11.670 --> 00:10:12.309
Cool.

164
00:10:12.309 --> 00:10:15.846
And then lastly, we've got the HTML file,

165
00:10:15.846 --> 00:10:21.211
which shouldn't be a lot of things
that you haven't seen before.

166
00:10:21.211 --> 00:10:26.185
Electron will get mad at you if
you don't use a decent CSP policy.

167
00:10:26.185 --> 00:10:30.759
Which can get tricky sometimes
because if you're using webpack,

168
00:10:30.759 --> 00:10:35.414
it wants to do stuff with like hot
module reloading and WebSockets so

169
00:10:35.414 --> 00:10:40.559
you got to play around with that a little
bit, but it is basically the DOM and

170
00:10:40.559 --> 00:10:44.340
then it pulls in our renderer.js,
so on and so forth.

171
00:10:44.340 --> 00:10:48.993
This is the bare minimum one would need
for an electron application, right?

172
00:10:48.993 --> 00:10:54.367
And again, you could literally just do
an npm and knit, npm install electron

173
00:10:54.367 --> 00:10:59.175
setup these four files and
you've got an electron app effectively.

