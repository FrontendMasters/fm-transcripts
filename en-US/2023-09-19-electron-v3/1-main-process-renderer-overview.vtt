WEBVTT

1
00:00:00.025 --> 00:00:04.202
90% of the battle is trying
to just wrap our heads

2
00:00:04.202 --> 00:00:08.973
around the dance between
the two process models, right?

3
00:00:08.973 --> 00:00:12.829
And I would say that maybe five or
six years ago,

4
00:00:12.829 --> 00:00:17.176
four years ago,
that was maybe 50% of the battle.

5
00:00:17.176 --> 00:00:21.509
That said, there is a little bit
more security posture than there was

6
00:00:21.509 --> 00:00:25.706
back then and a lot more protecting
bad actors, so on and so forth.

7
00:00:25.706 --> 00:00:29.442
When you can run all of Node in
the browser, that's fine and

8
00:00:29.442 --> 00:00:33.403
great until you start pulling in
a third party script off a CDN or

9
00:00:33.403 --> 00:00:35.730
even your own script off of a CDN.

10
00:00:35.730 --> 00:00:41.606
It could just say like fs.rightfile or
something along those lines, right?

11
00:00:41.606 --> 00:00:45.280
So you can circumvent all
of the security things and

12
00:00:45.280 --> 00:00:49.988
you shouldn't and I'm not gonna
talk that much about it, Mark.

13
00:00:49.988 --> 00:00:51.997
&gt;&gt; Does it handle auto updates?

14
00:00:51.997 --> 00:00:54.721
Maybe you answered it, but missed it.

15
00:00:54.721 --> 00:00:56.700
&gt;&gt; So you can handle auto updates.

16
00:00:56.700 --> 00:01:00.674
You need to be running a server
that has those updates, right?

17
00:01:00.674 --> 00:01:05.952
So what they're gonna talk about is
regular Electron out of the box,

18
00:01:05.952 --> 00:01:08.780
it's kind of agnostic around that.

19
00:01:08.780 --> 00:01:13.750
Electron Forge, which is, I would say,
not dissimilar to Create React app or

20
00:01:13.750 --> 00:01:18.738
what have you for Electron and it wires
up like Webpack and all of these things.

21
00:01:18.738 --> 00:01:23.512
Does support Squirrel,
which is kind of the app updater

22
00:01:23.512 --> 00:01:28.094
you've seen and
loved throughout your entire life.

23
00:01:28.094 --> 00:01:31.679
You do need to wire up a server
that pushes out those updates.

24
00:01:31.679 --> 00:01:34.928
There are some libraries that
will use GitHub actions and

25
00:01:34.928 --> 00:01:37.370
GitHub releases to try
to help you with it.

26
00:01:37.370 --> 00:01:39.470
Some of that becomes specific
to how you wanna release it.

27
00:01:39.470 --> 00:01:43.038
The other option for all these things, of
course, is there is nothing stopping you.

28
00:01:43.038 --> 00:01:47.499
There is the built-in capabilities for
both in-app purchases in, for

29
00:01:47.499 --> 00:01:52.249
instance, the Mac App Store, as well as
using the Mac App Store Writ Large for

30
00:01:52.249 --> 00:01:53.950
pushing out your updates.

31
00:01:53.950 --> 00:01:57.542
So those are all possible and doable.

32
00:01:57.542 --> 00:02:01.699
And they do involve standing up at
least a server to say what the most

33
00:02:01.699 --> 00:02:04.605
recent update is and
stuff along those lines.

34
00:02:04.605 --> 00:02:09.059
And if you use Electron Forge,
the ability to check for those updates,

35
00:02:09.059 --> 00:02:12.042
download those updates is built-in, right?

36
00:02:12.042 --> 00:02:18.831
You just need to set up
the server at that point, so yes.

37
00:02:18.831 --> 00:02:23.266
So yeah, like I said, 90% of the battle
when building Electron applications, and

38
00:02:23.266 --> 00:02:27.641
90% of our focus today is going to be just
understanding how to communicate between

39
00:02:27.641 --> 00:02:28.636
these processes.

40
00:02:28.636 --> 00:02:32.427
But I think if we're gonna do that,
we should talk about the two, right?

41
00:02:32.427 --> 00:02:36.337
And so I kind of said, hey, we've got
Node and we've got Chromium, right?

42
00:02:36.337 --> 00:02:41.052
The term of art in Electron
is the main process versus

43
00:02:41.052 --> 00:02:44.171
the renderer processes, right?

44
00:02:44.171 --> 00:02:48.040
And ideally, that should probably already
fit into a certain mental model on which

45
00:02:48.040 --> 00:02:50.320
one is Node and
which one is the browser, right?

46
00:02:50.320 --> 00:02:55.671
And also, you can see when I said the main
process versus renderer processes,

47
00:02:55.671 --> 00:02:58.930
you can get a sense of how
many of each there are.

48
00:02:58.930 --> 00:03:03.626
Now, you don't necessarily
need more than one, right, but

49
00:03:03.626 --> 00:03:06.530
you might have more than one, right?

50
00:03:06.530 --> 00:03:10.474
And so for most of apps we're gonna build
today, we're gonna keep it relatively

51
00:03:10.474 --> 00:03:14.730
simple, which is we got a main process
that spins up a renderer process.

52
00:03:14.730 --> 00:03:18.013
But there's nothing stopping you if
you think about VS Code, where you

53
00:03:18.013 --> 00:03:21.910
might have multiple windows open, right,
that has multiple renderer processes.

54
00:03:21.910 --> 00:03:24.059
In the same way that in Chrome,

55
00:03:24.059 --> 00:03:28.039
every single one of your tabs
is its own process, right?

56
00:03:28.039 --> 00:03:30.780
And they're isolated
from the other processes.

57
00:03:30.780 --> 00:03:33.430
That is true in your Electron app as well.

58
00:03:33.430 --> 00:03:36.980
You could spin up multiple, yeah, you
can have multiple different files open.

59
00:03:36.980 --> 00:03:37.881
You could do any of these things.

60
00:03:37.881 --> 00:03:41.052
They are essentially
separate processes and

61
00:03:41.052 --> 00:03:45.650
they're kind of the main process
is what ties them all together.

62
00:03:45.650 --> 00:03:48.543
The main process can spin up these,
they can take them down,

63
00:03:48.543 --> 00:03:51.060
they can also close themselves,
so on and so forth.

64
00:03:51.060 --> 00:03:57.890
The main process is that it is not wrong
to think about it like a server, right?

65
00:03:57.890 --> 00:04:02.719
It is that model that we have as front
end engineers of our client side code,

66
00:04:02.719 --> 00:04:06.640
which maybe is running across
many of our users' browsers.

67
00:04:06.640 --> 00:04:10.656
Yes, I understand how microservices work,
or one server, right,

68
00:04:10.656 --> 00:04:12.257
that they talk to, right?

69
00:04:12.257 --> 00:04:18.546
That model, that mental framework, is not
wrong when thinking about Electron apps.

70
00:04:18.546 --> 00:04:22.823
I think it's a decent
heuristic in this case.

71
00:04:22.823 --> 00:04:28.479
Like I said before, back in the day,
this is a screenshot from the last version

72
00:04:28.479 --> 00:04:34.239
of this course, you could literally just
pull in Node in the renderer process.

73
00:04:34.239 --> 00:04:35.610
Can you do this?

74
00:04:35.610 --> 00:04:37.955
Yes, do you have to opt
into it since Electron 12?

75
00:04:37.955 --> 00:04:41.535
And to be clear, at the time of this
recording, we're on Electron 26.

76
00:04:41.535 --> 00:04:46.518
One thing I should note, though,
is that the numbers go very fast nowadays,

77
00:04:46.518 --> 00:04:50.899
not because there are breaking changes,
that it's SemVer per se.

78
00:04:50.899 --> 00:04:56.450
It is based on a cadence of Chromium and
Node releases, right?

79
00:04:56.450 --> 00:05:00.321
And so in a lot of cases,
if you go from Node 18 to 20 per se,

80
00:05:00.321 --> 00:05:04.132
there might not be any breaking
changes in the Electron API.

81
00:05:04.132 --> 00:05:07.212
You're just bumping up a version of
Node or a version of Chromium or

82
00:05:07.212 --> 00:05:08.651
something along those lines.

83
00:05:08.651 --> 00:05:11.590
And so there's a rhythm and
a cadence to that.

84
00:05:11.590 --> 00:05:15.677
So I think for a while, there was
forever before you hit Electron 1, and

85
00:05:15.677 --> 00:05:17.496
then years before Electron 2.

86
00:05:17.496 --> 00:05:22.456
Now it's kind of on that you don't
necessarily think, I mean, you do think

87
00:05:22.456 --> 00:05:27.122
a little about what version of Node,
but it is less of a turn on that one.

88
00:05:27.122 --> 00:05:30.318
So we are on at the time of
this recording Electron 26,

89
00:05:30.318 --> 00:05:32.297
which came out earlier this week.

90
00:05:32.297 --> 00:05:37.911
From 12 forward, just letting you do
whatever you wanted to someone's computer

91
00:05:37.911 --> 00:05:42.975
from a browser context that could load
arbitrary code is now frowned upon.

92
00:05:42.975 --> 00:05:46.618
I will make one illusion at one
point on how to opt out of that,

93
00:05:46.618 --> 00:05:50.559
and then I will never talk about
it again because it's a bad idea.

94
00:05:50.559 --> 00:05:53.933
And it's better to just learn
how to do it correctly.

95
00:05:53.933 --> 00:05:58.182
But if it's a quick and dirty thing you're
just running on your own, sure, go for it,

96
00:05:58.182 --> 00:05:58.780
have at it.

97
00:05:58.780 --> 00:05:59.388
But nowadays,

98
00:05:59.388 --> 00:06:02.111
we do need to figure out how to talk
to the main process back and forth.

99
00:06:02.111 --> 00:06:05.787
And so IPC or inter-process communication
is gonna be the big way that

100
00:06:05.787 --> 00:06:09.100
we do that over our time together,
and we'll be doing it a lot.

101
00:06:09.100 --> 00:06:11.310
There's various different
ways to interact with it.

102
00:06:11.310 --> 00:06:15.968
The other kind of new thing since the last
time we talked about Electron together is

103
00:06:15.968 --> 00:06:17.530
these preloaded scripts.

104
00:06:17.530 --> 00:06:20.474
Before, there was just the main
process and the renderer process.

105
00:06:20.474 --> 00:06:24.630
In terms of process model,
that's totally true, right?

106
00:06:24.630 --> 00:06:27.813
But you do need a little
help getting some stuff from

107
00:06:27.813 --> 00:06:30.563
the main process into the browser context.

108
00:06:30.563 --> 00:06:37.350
So you have this preload script, which
exists in the renderer process, right?

109
00:06:37.350 --> 00:06:40.618
And it's in a place that kind
of before the DOM loads,

110
00:06:40.618 --> 00:06:43.306
before you load in any
third party scripts,

111
00:06:43.306 --> 00:06:48.470
before you do anything that might in any
way interact with the outside world.

112
00:06:48.470 --> 00:06:50.950
A place to kinda set up an allow list,

113
00:06:50.950 --> 00:06:56.300
what different kind of interactions
you wanna have with the main process.

114
00:06:56.300 --> 00:06:59.900
And then that is kind of you can
expose just the very few things.

115
00:06:59.900 --> 00:07:04.310
It's kind of the regular security
principle of least access, right?

116
00:07:04.310 --> 00:07:08.493
So as much as you need,
as little as you can get away with.

117
00:07:08.493 --> 00:07:13.307
So you're gonna expose the very small set
of things that your renderer processes

118
00:07:13.307 --> 00:07:16.859
need access to in order to talk
to the main process, right?

119
00:07:16.859 --> 00:07:18.811
Those happen in a preload script.

120
00:07:18.811 --> 00:07:21.137
That is technically part
of the renderer process, so

121
00:07:21.137 --> 00:07:23.159
it's not an additional
process beyond that.

122
00:07:23.159 --> 00:07:26.827
It is just like a one last
stop before we go into

123
00:07:26.827 --> 00:07:31.280
what is normally a full
browser environment, right?

124
00:07:31.280 --> 00:07:35.189
And we get a bunch of ways to just make
sure that we are isolating just what you

125
00:07:35.189 --> 00:07:37.068
need, and then those are exposed.

126
00:07:37.068 --> 00:07:40.529
And then we use those to communicate
back and forth with the main process.

