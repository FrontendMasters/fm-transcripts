WEBVTT

1
00:00:00.090 --> 00:00:04.477
We could do the eating our vegetables
where we do everything the hard way first.

2
00:00:04.477 --> 00:00:06.976
In the interest of time and attention,

3
00:00:06.976 --> 00:00:11.761
I'm going to use Electron Forge to kind
of give us a solid foundation here.

4
00:00:11.761 --> 00:00:16.830
Because, again, it will have a lot of
those processes wired up and ready to go.

5
00:00:16.830 --> 00:00:20.989
And also I think it becomes useful cuz
it's a great way to look at it and

6
00:00:20.989 --> 00:00:24.088
then be able to see how to
engineer that ourselves.

7
00:00:24.088 --> 00:00:27.271
So I am going to pause for a minute, and

8
00:00:27.271 --> 00:00:32.455
I would say that over here we've
got the three repositories.

9
00:00:32.455 --> 00:00:36.434
The first one we're gonna use is
this one here called Firesale.

10
00:00:36.434 --> 00:00:38.535
You don't need to download
anything over here,

11
00:00:38.535 --> 00:00:41.695
these are just useful if you need it,
Electron Fiddle is useful.

12
00:00:41.695 --> 00:00:45.945
First one we're gonna do is Markdown
Editor that we talked about earlier.

13
00:00:45.945 --> 00:00:48.802
So I would say,
if you have not pulled it down and

14
00:00:48.802 --> 00:00:52.885
done the requisite npm installs,
let's just do that for a moment.

15
00:00:52.885 --> 00:00:56.876
We took a look at a just
first vanilla Electron app.

16
00:00:56.876 --> 00:01:00.928
You will see that there is not a lot
different in this Electron Forge app.

17
00:01:00.928 --> 00:01:06.130
But there are a few additional tasting
notes that we should talk about.

18
00:01:07.180 --> 00:01:11.401
One is,
despite the fact that it doesn't look

19
00:01:11.401 --> 00:01:16.390
that much different,
this is in TypeScript, right?

20
00:01:18.200 --> 00:01:23.555
Like I said, most TypeScript these days,
you could probably copy and

21
00:01:23.555 --> 00:01:29.483
paste this directly to JavaScript and
not have an issue whatsoever, right?

22
00:01:29.483 --> 00:01:34.028
But this is technically a TypeScript file,
so we've got that in place.

23
00:01:34.028 --> 00:01:38.600
Electron Forge is running
either Webpack or

24
00:01:38.600 --> 00:01:43.940
a Vite server to do
the hot module reloading.

25
00:01:43.940 --> 00:01:48.179
So we do have a dev server
that is running, and

26
00:01:48.179 --> 00:01:52.651
so it is running localhost,
whatever it runs.

27
00:01:52.651 --> 00:01:55.846
The Webpack version,
I think it's running at port 9000.

28
00:01:55.846 --> 00:02:00.026
For the Vite version, I believe it's 5173.

29
00:02:00.026 --> 00:02:04.480
Why that lives rent-free in my head, I
don't know, but I believe those are true.

30
00:02:04.480 --> 00:02:10.965
Otherwise, it will go ahead and
try to load the compiled assets, right?

31
00:02:10.965 --> 00:02:13.646
So that's just for us in development,

32
00:02:13.646 --> 00:02:16.662
something that we have
in that case as well.

33
00:02:16.662 --> 00:02:18.794
And then, at this moment,

34
00:02:18.794 --> 00:02:23.532
I am choosing to load the Dev Tools
open in the detached mode.

35
00:02:23.532 --> 00:02:27.402
Again, you can put in whatever mode
you want, you want it at the bottom,

36
00:02:27.402 --> 00:02:28.681
you want it at the side.

37
00:02:28.681 --> 00:02:32.762
These are not particularly big windows,
so I've chosen to detach it,

38
00:02:32.762 --> 00:02:34.608
you can change that as you want.

39
00:02:34.608 --> 00:02:37.415
And yeah, that's a createWindow function.

40
00:02:37.415 --> 00:02:40.341
And then when the app is ready, when
it's fully started up, we go ahead and

41
00:02:40.341 --> 00:02:41.141
create the window.

42
00:02:41.141 --> 00:02:44.735
And we have very similar
to what we saw previously.

43
00:02:44.735 --> 00:02:48.970
And that is my main process file,
and we will add to it.

44
00:02:48.970 --> 00:02:51.735
Trust me,
we will add to it in our time together.

45
00:02:51.735 --> 00:02:55.272
But that is the initial
kind of like first version.

46
00:02:55.272 --> 00:02:59.529
A pattern that you'll see a lot too,
though, is,

47
00:02:59.529 --> 00:03:05.469
as you can imagine, there is a period
of time between opening a window,

48
00:03:05.469 --> 00:03:11.317
loading up the HTML and all the CSS and
stuff along those lines as well.

49
00:03:11.317 --> 00:03:19.760
Which could theoretically give you the
flash of white content or what have you.

50
00:03:19.760 --> 00:03:23.188
So there are ways around that, and
let's kinda just talk about that.

51
00:03:23.188 --> 00:03:27.120
Cuz it gives you a sense of a little bit
more of the kind of model here as well.

52
00:03:28.670 --> 00:03:33.340
So for instance,
we could theoretically choose to,

53
00:03:33.340 --> 00:03:40.310
if we say show:false, that will not
show the window by default, right?

54
00:03:40.310 --> 00:03:43.813
And we could at that point
say something along the lines

55
00:03:43.813 --> 00:03:48.930
of, You've got this main
window ready to show.

56
00:03:48.930 --> 00:03:54.650
And this is like, now, okay, we've got a
DOM, we've got everything kinda loaded up.

57
00:03:54.650 --> 00:03:57.250
That's when we could
theoretically choose to show it.

58
00:03:57.250 --> 00:04:00.038
Now, it depends like on what
you're doing in this case, but

59
00:04:00.038 --> 00:04:02.660
I think it's a pretty solid
practice in this case.

60
00:04:02.660 --> 00:04:07.195
And so the same way show was false,
we can call this a method here,

61
00:04:07.195 --> 00:04:09.040
which is to show it.

62
00:04:09.040 --> 00:04:14.560
And then you could also choose, for
instance, to focus it as well, right?

63
00:04:14.560 --> 00:04:17.354
So load everything up while it's hidden,
and

64
00:04:17.354 --> 00:04:21.560
then go ahead when it's ready to show it,
so on and so forth.

65
00:04:21.560 --> 00:04:25.589
But we don't have a really
great use case for it, right?

66
00:04:25.589 --> 00:04:32.399
But I do wanna kinda point out that the
ability to start up renderer processes and

67
00:04:32.399 --> 00:04:39.020
not show them does at least open up
some interesting possibilities, right?

68
00:04:39.020 --> 00:04:42.206
Cuz we said before,
renderer processes are Chromium,

69
00:04:42.206 --> 00:04:44.590
they've got GPU acceleration support.

70
00:04:44.590 --> 00:04:50.233
You can theoretically spin up threads
that don't necessarily show a window,

71
00:04:50.233 --> 00:04:56.317
but could theoretically be doing image
processing or something along those lines.

72
00:04:56.317 --> 00:05:00.217
You could have one that has maybe
a canvas that is resizing or

73
00:05:00.217 --> 00:05:04.593
doing stuff to images, and
then message back and forth with that.

74
00:05:04.593 --> 00:05:06.766
All those things become very involved.

75
00:05:06.766 --> 00:05:10.198
But the ability to spin up processes and
not show them, and

76
00:05:10.198 --> 00:05:13.292
not necessarily do the child
process dance in Node.

77
00:05:13.292 --> 00:05:16.863
And have all of the Web APIs available and

78
00:05:16.863 --> 00:05:22.900
stuff along those lines is
a relatively powerful concept as well.

79
00:05:22.900 --> 00:05:26.731
And to point that out as well,
in any given browser context,

80
00:05:26.731 --> 00:05:29.010
you again have all the Web APIs.

81
00:05:29.010 --> 00:05:33.834
So all the service worker stuff, all
the shared workers, all the web workers,

82
00:05:33.834 --> 00:05:34.348
right?

83
00:05:34.348 --> 00:05:36.590
All of those things are available and

84
00:05:36.590 --> 00:05:39.490
accessible to you in
your application as well.

85
00:05:39.490 --> 00:05:44.249
A lot of those are very niche use cases,
if you need those things above and

86
00:05:44.249 --> 00:05:46.683
beyond the standard kind of pieces.

87
00:05:46.683 --> 00:05:49.144
Cuz we already have multiple processes
here, we've got the main process,

88
00:05:49.144 --> 00:05:50.342
we've got the renderer processes.

89
00:05:50.342 --> 00:05:52.815
We're gonna do everything asynchronous.

90
00:05:52.815 --> 00:05:56.363
So we are taking advantage of a lot of
things that make JavaScript fast and

91
00:05:56.363 --> 00:05:57.790
snappy to begin with.

92
00:05:57.790 --> 00:06:02.508
But should you have
a very specific use case,

93
00:06:02.508 --> 00:06:08.979
there is a lot of power and
flexibility here in what you can do.

94
00:06:08.979 --> 00:06:10.030
So let's go ahead.

95
00:06:10.030 --> 00:06:14.262
One of the things is that, yes, we have
Vite for our client-side processes.

96
00:06:14.262 --> 00:06:16.846
But could you play with Nodemon or

97
00:06:16.846 --> 00:06:21.748
something along those lines to
regenerate the app every time?

98
00:06:21.748 --> 00:06:24.507
I'm choosing not to for
the name of simplicity.

99
00:06:24.507 --> 00:06:27.969
But in this case,
now we do still show it, but we wait for

100
00:06:27.969 --> 00:06:30.413
the DOM to load before we see anything.

101
00:06:30.413 --> 00:06:34.304
That's a little tweak there that I think,
generally speaking,

102
00:06:34.304 --> 00:06:36.649
I tend to use a lot, which is this once.

103
00:06:36.649 --> 00:06:40.938
A lot of these things extend from
Node.js Event Emitter, right?

104
00:06:40.938 --> 00:06:44.844
And so we're saying one time when
the window is ready to show, all right,

105
00:06:44.844 --> 00:06:47.752
actually go and show it, and
stuff along those lines.

106
00:06:47.752 --> 00:06:51.475
And like I said, if you don't
want the Developer Tools opening,

107
00:06:51.475 --> 00:06:53.584
you can totally just get rid of this.

108
00:06:53.584 --> 00:07:00.557
Cuz they are always accessible to you by
default in the actual View menu as well.

109
00:07:00.557 --> 00:07:03.168
So I will leave that to you
whether you want it or not.

110
00:07:03.168 --> 00:07:04.793
At various times I will turn it off and

111
00:07:04.793 --> 00:07:07.738
turn it on depending on what kind
of point that I'm trying to make.

