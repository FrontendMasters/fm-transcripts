WEBVTT

1
00:00:00.490 --> 00:00:03.472
I did threaten midway
through our time together,

2
00:00:03.472 --> 00:00:07.313
just to kinda like riff a little
bit about performance, right?

3
00:00:07.313 --> 00:00:10.692
You are still on the hook for performance.

4
00:00:10.692 --> 00:00:17.010
And yes, the jokes about
how Chrome is a memory hog.

5
00:00:17.010 --> 00:00:20.180
You are now Chrome, welcome,
you are part of the problem.

6
00:00:20.180 --> 00:00:25.120
That said, most of us use VS Code and
don't complain, right?

7
00:00:25.120 --> 00:00:27.305
I would say most of us use Slack,
and don't complain, but

8
00:00:27.305 --> 00:00:28.474
I don't know if that's true.

9
00:00:28.474 --> 00:00:31.960
But most of us,
it is possible to have a performing app.

10
00:00:31.960 --> 00:00:35.637
The thing is that, yes, of course,

11
00:00:35.637 --> 00:00:40.273
Chromium is a dependency that is large,
yes.

12
00:00:40.273 --> 00:00:45.878
That said, depending on if you're
doing this for work, right?

13
00:00:45.878 --> 00:00:51.224
Like, okay, also like,
were you ever going to build a Linux app?

14
00:00:51.224 --> 00:00:51.810
Or both?

15
00:00:51.810 --> 00:00:55.614
Was your company gonna spin
up teams bespoke to a Mac OS?

16
00:00:55.614 --> 00:00:57.509
You probably weren't, right?

17
00:00:57.509 --> 00:01:01.457
And so you have that,
and it is not true that

18
00:01:01.457 --> 00:01:06.410
all Electron apps are memory hogs,
or whatever.

19
00:01:06.410 --> 00:01:09.935
Again, I don't think I've ever complained
about the performance characteristics of

20
00:01:09.935 --> 00:01:10.658
VS Code, right?

21
00:01:10.658 --> 00:01:13.140
Maybe it's taking up a lot of
memory right now, I don't know.

22
00:01:13.140 --> 00:01:17.152
But the fact of the matter is,
the bigger thing is there's so

23
00:01:17.152 --> 00:01:19.445
much under your control, right?

24
00:01:19.445 --> 00:01:22.817
If you do things like write file sync,
which in a world of promises,

25
00:01:22.817 --> 00:01:24.730
if you do that, I don't.

26
00:01:24.730 --> 00:01:26.734
I don't know what to tell you, right?

27
00:01:26.734 --> 00:01:28.840
That's gonna lock the main thread.

28
00:01:28.840 --> 00:01:29.736
Yeah, your performance is gonna suffer.

29
00:01:29.736 --> 00:01:34.095
If you've ever watched any of those
talks from Addy Osmani about the cost of

30
00:01:34.095 --> 00:01:34.934
JavaScript.

31
00:01:34.934 --> 00:01:39.545
Yeah, that JavaScript going
over the wire is expensive.

32
00:01:39.545 --> 00:01:41.308
You know what is more expensive?

33
00:01:41.308 --> 00:01:42.854
The time it takes to parse and

34
00:01:42.854 --> 00:01:46.210
compile that JavaScript to
get an experience, right?

35
00:01:46.210 --> 00:01:50.796
If you don't use progressive loading,
and all of the best practices in

36
00:01:50.796 --> 00:01:55.852
the browser and your electron app,
it will be slow, cuz you got lazy, right?

37
00:01:55.852 --> 00:02:00.816
And so a lot of the performance truisms
of progressively loading more code as you

38
00:02:00.816 --> 00:02:01.418
need it.

39
00:02:01.418 --> 00:02:06.568
Which is why I think a lot of the bundlers
and using Electron Forge makes sense,

40
00:02:06.568 --> 00:02:10.018
because the free things you
get up like you, right?

41
00:02:10.018 --> 00:02:12.903
Dynamically loading things
you know as you need to go.

42
00:02:12.903 --> 00:02:17.080
In all those cases, if you don't do those
things, and you write sloppy JavaScript,

43
00:02:17.080 --> 00:02:20.981
you will have a slow app, and you don't
get to blame Electron for that, right?

44
00:02:20.981 --> 00:02:23.784
Yes, Chromium is a dependency,
Chromium is large,

45
00:02:23.784 --> 00:02:26.913
but you also probably have 42
Chrome tabs open right now.

46
00:02:26.913 --> 00:02:32.411
You can still, for instance, one of the
things that we would choose to optimize

47
00:02:32.411 --> 00:02:37.497
if we're gonna go all the way to the
bottom of the apps that we built today,

48
00:02:37.497 --> 00:02:42.993
is that when we check to see if the file
had changes on every input - debounce that,

49
00:02:42.993 --> 00:02:43.598
right?

50
00:02:43.598 --> 00:02:46.290
Like little things like that,
that are true.

51
00:02:46.290 --> 00:02:50.334
If you are doing it in the browser is
true when you're building an Electron

52
00:02:50.334 --> 00:02:51.126
app, right?

53
00:02:51.126 --> 00:02:54.767
You don't just because there's no network,
always,

54
00:02:54.767 --> 00:02:59.345
that does not mean that you cannot
cause your own performance issues.

55
00:02:59.345 --> 00:03:01.455
And to keep those things in mind, and

56
00:03:01.455 --> 00:03:04.940
a lot of the best practices will
get you most of the way there.

57
00:03:04.940 --> 00:03:08.223
If you are doing things that
are expensive, one, make sure they're

58
00:03:08.223 --> 00:03:12.258
asynchronous, but two, either that, or
you have web workers available, right?

59
00:03:12.258 --> 00:03:15.340
And you have them reliably cuz you're
not worried about different browsers.

60
00:03:15.340 --> 00:03:18.380
You have child processes in
node that you can use.

61
00:03:18.380 --> 00:03:22.117
And in fact, you don't even need
to use the child processes cuz you

62
00:03:22.117 --> 00:03:24.540
could spin up a renderer process, right?

63
00:03:24.540 --> 00:03:28.760
That has no window, that it shows, that
is a second thread that you could offload

64
00:03:28.760 --> 00:03:31.627
work to through that
inter-process communication.

65
00:03:31.627 --> 00:03:34.914
And it's no different than anything
that we saw before, right?

66
00:03:34.914 --> 00:03:37.183
You would just simply send stuff to it,
and

67
00:03:37.183 --> 00:03:39.843
receive stuff in the same
IPC that we saw earlier.

68
00:03:39.843 --> 00:03:44.140
All those things are there, and
you do have to leverage them, and

69
00:03:44.140 --> 00:03:45.323
make use of them.

70
00:03:45.323 --> 00:03:49.123
But there's nothing like inherently,
there are enough,

71
00:03:49.123 --> 00:03:53.683
fast snappy mission-critical Electron
apps out there that you don't

72
00:03:53.683 --> 00:03:56.878
get to blame Electron if your app is slow,
right?

73
00:03:56.878 --> 00:04:01.870
And like all, but like there's not unique
and special principles around Electron.

74
00:04:01.870 --> 00:04:05.952
It is the same unique and
special principles around web development,

75
00:04:05.952 --> 00:04:06.584
but also.

76
00:04:06.584 --> 00:04:10.950
Yeah, and you don't have to deal with the
network, so it should be easier, right?

77
00:04:10.950 --> 00:04:15.238
And so just kind of, and if you do have to
deal with a network, maybe storing stuff,

78
00:04:15.238 --> 00:04:19.553
and doing progressive loading, and a lot
of the PWA techniques makes total sense.

79
00:04:19.553 --> 00:04:23.998
And again, it is a much more
reliable situation, except for

80
00:04:23.998 --> 00:04:28.881
the fact that if you write code
that corrupts databases on somebody

81
00:04:28.881 --> 00:04:32.210
else's computer,
it is a lot harder to fix.

82
00:04:32.210 --> 00:04:33.700
There is that kind of stuff as well.

