WEBVTT

1
00:00:00.300 --> 00:00:06.222
All right, so I just have one more app
that I kinda just wanna take a tour of and

2
00:00:06.222 --> 00:00:08.179
kinda show a little bit.

3
00:00:11.280 --> 00:00:15.501
Which is,
there are a lot of applications that need

4
00:00:15.501 --> 00:00:20.490
to persist data over a longer
period of time, right?

5
00:00:20.490 --> 00:00:25.580
And there's just some
practices around that as well.

6
00:00:25.580 --> 00:00:29.015
And so this application, I just added
a to do, I want to quit the app,

7
00:00:29.015 --> 00:00:30.022
I want to come back.

8
00:00:34.255 --> 00:00:37.232
And I want my data to be there, right?

9
00:00:37.232 --> 00:00:41.866
And again, the way that most native apps,
a lot of native apps do this,

10
00:00:41.866 --> 00:00:46.344
is they'll store it in a database,
SQLite being a very popular one,

11
00:00:46.344 --> 00:00:50.982
because the SQLite database does not
involve installing postgress and

12
00:00:50.982 --> 00:00:52.471
spinning up a server.

13
00:00:52.471 --> 00:00:56.202
It's usually a file that is database,
right,

14
00:00:56.202 --> 00:01:02.100
that can theoretically hold on and
persist things that you can query.

15
00:01:02.100 --> 00:01:04.886
And there are a whole bunch
of ways you can do this.

16
00:01:04.886 --> 00:01:08.036
You can use just use the SQLite 3 library,
directly,

17
00:01:08.036 --> 00:01:12.850
you can use Connects, which is what I'm
using, just an abstraction over that.

18
00:01:12.850 --> 00:01:15.530
There's Prisma which is super great.

19
00:01:15.530 --> 00:01:17.942
You can use all sorts of other, I mean,

20
00:01:17.942 --> 00:01:23.140
you can even use the web technology like
IndexedDB or any of those things as well.

21
00:01:23.140 --> 00:01:24.010
It doesn't matter.

22
00:01:24.010 --> 00:01:28.100
The general principles here are what
I care about more than anything else.

23
00:01:28.100 --> 00:01:31.237
A few notes is that if you're
not using Eletcron Forge,

24
00:01:31.237 --> 00:01:35.290
you do need to use this library
called Electron rebuild.

25
00:01:35.290 --> 00:01:41.110
Because, obviously,
compiled native modules like SQLite or

26
00:01:41.110 --> 00:01:48.570
what have you, are not only OS specific
but also a version of node specific.

27
00:01:48.570 --> 00:01:54.120
Back in the day when we all used node
sass, which was the C bindings on LibSass.

28
00:01:54.120 --> 00:01:56.750
You knew that every time you
bumped a version of node,

29
00:01:56.750 --> 00:02:00.607
you had to basically blow out all your
node modules and recompile everything,

30
00:02:00.607 --> 00:02:04.450
because all your compiled modules
are built against the version of node.

31
00:02:04.450 --> 00:02:07.800
And on top of that,
they're all usually OS specific as well.

32
00:02:07.800 --> 00:02:12.783
So what Electron rebuild does is it, cuz
the version of node where you run an npm

33
00:02:12.783 --> 00:02:18.060
install, it's probably not the version
that Electron is running, right?

34
00:02:18.060 --> 00:02:20.573
So obviously,
if you just do an npm install,

35
00:02:20.573 --> 00:02:24.543
you will have the wrong version already,
unless you have to the build,

36
00:02:24.543 --> 00:02:27.475
just assume you will
have the wrong version.

37
00:02:27.475 --> 00:02:31.596
And then by the time you go to
build this for any given, or

38
00:02:31.596 --> 00:02:35.104
package this for
any given OS, by definition,

39
00:02:35.104 --> 00:02:40.037
whatever you npm installed on is
almost definitely the wrong one.

40
00:02:40.037 --> 00:02:41.932
So if you're not using Eletcron Forge,

41
00:02:41.932 --> 00:02:45.667
then you do need to use this library
called Electron rebuild, which will just,

42
00:02:45.667 --> 00:02:48.847
by definition, rebuild the native
modules ,appropriately, for

43
00:02:48.847 --> 00:02:52.347
that version of Electron on the OS
that you're running, right?

44
00:02:52.347 --> 00:02:55.811
If you're using Eletcron Forge,
then you are using Electron rebuild,

45
00:02:55.811 --> 00:02:58.557
you just don't know it, and
it is handling that for you.

46
00:02:59.720 --> 00:03:04.210
And that's true for any of these
kind of native modules in this case.

47
00:03:04.210 --> 00:03:10.950
The other thing to think about is,
where do you put this database, right?

48
00:03:10.950 --> 00:03:13.790
If it was just a Node project,
you'd put it in the directory, right?

49
00:03:13.790 --> 00:03:17.390
But that's not where OSes store
your personal data, right?

50
00:03:17.390 --> 00:03:24.047
In Windows, it's percent sign, all caps,
app data, percent sign, something or else,

51
00:03:24.047 --> 00:03:29.334
and this place that is like a known
place to store user application data.

52
00:03:29.334 --> 00:03:32.501
On Mac OS, it's your library folder and

53
00:03:32.501 --> 00:03:37.170
some sub directories in there,
so on and so forth, right?

54
00:03:37.170 --> 00:03:41.948
So you wanna put user data
files in the place in the OS

55
00:03:41.948 --> 00:03:46.408
where native apps put user data files,
right?

56
00:03:46.408 --> 00:03:51.542
And again, that is different for
every OS but to no one's surprise,

57
00:03:51.542 --> 00:03:56.236
right, there is an abstraction
in Electron for doing that, so

58
00:03:56.236 --> 00:04:00.410
this app.getpath, and
there's a bunch of these.

59
00:04:00.410 --> 00:04:04.653
If I kind of just look here, you can
see there's a whole bunch of paths that

60
00:04:04.653 --> 00:04:07.625
you can get to,
including desktop and document.

61
00:04:07.625 --> 00:04:11.007
So if we were doing,
there was a default directory for

62
00:04:11.007 --> 00:04:15.440
the show open dialog, in the first app,
you could, theoretically,

63
00:04:15.440 --> 00:04:19.950
target it at the desktop documents,
downloads, soap music, right,

64
00:04:19.950 --> 00:04:24.715
cuz people actually put stuff in
the music and pictures folders, I guess.

65
00:04:24.715 --> 00:04:27.889
So on a temp directory,
videos, the user data and

66
00:04:27.889 --> 00:04:32.348
app data are where you kind of store,
app data, I think, is global and

67
00:04:32.348 --> 00:04:37.370
user data is the directory for
that given user logged into the machine.

68
00:04:37.370 --> 00:04:40.220
But it is the place where
you can store those things.

69
00:04:40.220 --> 00:04:44.185
So by definition you do
wanna make sure that you

70
00:04:44.185 --> 00:04:47.546
are storing stuff in the correct spot.

71
00:04:47.546 --> 00:04:52.705
And that you've got the setup
to build the native modules for

72
00:04:52.705 --> 00:04:59.501
the different versions of node and
Electron and platforms you're working at.

73
00:04:59.501 --> 00:05:01.990
Again, Eletcron Forge handles
this all out of the box.

74
00:05:01.990 --> 00:05:05.575
Electron rebuild itself is just
a post install, you just run it and

75
00:05:05.575 --> 00:05:07.249
it will do that for you as well.

76
00:05:07.249 --> 00:05:10.107
But like I said, unless you have
a reason not to use Eletcron Forge,

77
00:05:10.107 --> 00:05:12.277
it's almost always better
to use Eletcron Forge.

78
00:05:12.277 --> 00:05:16.135
All of the best practices are built in,
and a year or two ago,

79
00:05:16.135 --> 00:05:21.750
it wasn't an official, official electron
project, it was a user land kinda project.

80
00:05:21.750 --> 00:05:27.465
Now it is part of the Electron project,
so it is an officially supported

81
00:05:27.465 --> 00:05:32.912
first party tool, and so legacy apps
is a great reason not to use it.

82
00:05:36.064 --> 00:05:39.290
I'm running out of good
reasons not to use it.

83
00:05:40.410 --> 00:05:45.437
And beyond that though,
since your node process is no different,

84
00:05:45.437 --> 00:05:50.377
other than going through a not
particularly Electron-specific

85
00:05:50.377 --> 00:05:53.429
run through about how SQLite 3 works and

86
00:05:53.429 --> 00:05:58.391
how Connects is an abstraction over it,
and me creating a table.

87
00:05:58.391 --> 00:06:02.437
After that, it's just creating a bunch
of methods to pull stuff and put stuff in

88
00:06:02.437 --> 00:06:04.530
the database and the IPC around that.

89
00:06:04.530 --> 00:06:08.600
Right, and again, you might choose to
use Prisma, I would probably use Prisma.

90
00:06:08.600 --> 00:06:11.513
But I wanted to keep it at
least somewhat agnostic,

91
00:06:11.513 --> 00:06:15.860
without too much to read if one was
interested in reading this later.

92
00:06:15.860 --> 00:06:20.537
But the important parts are like to
put any files that you're storing that

93
00:06:20.537 --> 00:06:23.940
are unique configuration
files in the right place.

94
00:06:23.940 --> 00:06:27.331
And to understand that building native
modules comes with a certain amount of

95
00:06:27.331 --> 00:06:28.540
headache in and of itself.

96
00:06:28.540 --> 00:06:31.508
So is local storage the right answer?

97
00:06:31.508 --> 00:06:33.190
Maybe, right?

98
00:06:33.190 --> 00:06:37.978
Is just writing to a text file in that
app user data path the right choice,

99
00:06:37.978 --> 00:06:42.790
if you need that, or JSON file that
you just read from and write to?

100
00:06:42.790 --> 00:06:44.540
Possibly, right?

101
00:06:44.540 --> 00:06:48.128
Those are all very valid options,
and it's as much as you need and

102
00:06:48.128 --> 00:06:50.030
as little as you can get away with.

103
00:06:50.030 --> 00:06:52.640
If you need to write some
SQL to query stuff, yeah.

104
00:06:52.640 --> 00:06:57.443
SQLite 3 or some other, there's a thousand
little file system based databases now.

105
00:06:57.443 --> 00:06:59.500
The thing is you have all of node so

106
00:06:59.500 --> 00:07:02.890
they're all various things
that you can use, right?

107
00:07:02.890 --> 00:07:06.683
But then you also have all the web,
the cache API service workers,

108
00:07:06.683 --> 00:07:11.041
and everything along those lines are also
available to you at the same time.

109
00:07:11.041 --> 00:07:14.641
And either one of those can be the right
choice, depending on what you're doing.

110
00:07:14.641 --> 00:07:18.836
But there are just some things to
think about if you are storing files.

111
00:07:18.836 --> 00:07:21.402
You might not have permission for

112
00:07:21.402 --> 00:07:26.449
a given user to write in the applications
folder in and of itself.

113
00:07:26.449 --> 00:07:27.082
To be clear,

114
00:07:27.082 --> 00:07:30.950
I know how macOS works a little bit better
than I know how Windows works, right?

115
00:07:30.950 --> 00:07:34.278
Technically in macOS,
if we go into Finder,

116
00:07:34.278 --> 00:07:39.097
and one way if you wanna ever see
if something's an electron app,

117
00:07:39.097 --> 00:07:43.670
in macOS every application is
technically a folder, right?

118
00:07:43.670 --> 00:07:47.115
And so could you write in there, if you go
into like notion, show package contents,

119
00:07:47.115 --> 00:07:47.806
it's a folder?

120
00:07:47.806 --> 00:07:51.739
A great way to see if something is
an Electron app is just go to the show

121
00:07:51.739 --> 00:07:54.440
package contents and
go into the frameworks.

122
00:07:54.440 --> 00:07:59.408
If you see Electron in there,
that's how you know it's an Electron app,

123
00:07:59.408 --> 00:08:03.990
right, so theoretically,
could you write to a directory in here?

124
00:08:03.990 --> 00:08:05.421
You totally could.

125
00:08:05.421 --> 00:08:08.123
Should you?
You probably shouldn't.

126
00:08:08.123 --> 00:08:13.760
Look, I wonder what that app directory is,
look a package JSON.

127
00:08:13.760 --> 00:08:18.085
If you didn't use the app folder you'd
be writing in here, which now means it's

128
00:08:18.085 --> 00:08:21.976
shared across all the users, and
also you might not have permission to.

129
00:08:21.976 --> 00:08:25.097
Look they're using Eletcron Forge,
and all those kinds of things, and

130
00:08:25.097 --> 00:08:26.783
you can kind of do all those things, but

131
00:08:26.783 --> 00:08:29.719
just making sure you're trying to
write to the correct directory.

132
00:08:29.719 --> 00:08:34.084
I guarantee you they are not
writing the app data into here,

133
00:08:34.084 --> 00:08:38.550
this is just the actual JavaScript code,
so on and so forth.

134
00:08:38.550 --> 00:08:41.595
I was about to say, did they minify it?

135
00:08:41.595 --> 00:08:45.520
Theoretically, I guess you could probably
go in here and modify the code for

136
00:08:45.520 --> 00:08:47.927
notion or
whatever if you wanted to extend it.

137
00:08:47.927 --> 00:08:51.040
Don't cuz every time it downloads,
it'll all be blown away.

138
00:08:51.040 --> 00:08:55.865
But yeah, just trying to make sure that
you are putting the correct directory.

139
00:08:55.865 --> 00:08:58.839
And again, If you're not using a tool
like Eletcron Forge, if you're using

140
00:08:58.839 --> 00:09:02.152
Electron Forge, just don't think about
building against the version of Electron.

141
00:09:02.152 --> 00:09:06.325
If you're not using something like
Electron rebuild, incredibly important,

142
00:09:06.325 --> 00:09:10.305
but also, my major goal in this kind of
talk right now is to put it into your head

143
00:09:10.305 --> 00:09:13.712
that yeah, you can write to a database and
persist data, right?

144
00:09:13.712 --> 00:09:16.173
It doesn't have to be just
like stuff you're loading.

145
00:09:16.173 --> 00:09:19.578
Or you could load stuff from
an external server, right?

146
00:09:19.578 --> 00:09:23.179
Or you can do both, cuz ideally,
your app, if it's gonna be a desktop app,

147
00:09:23.179 --> 00:09:25.109
should probably work offline, right?

148
00:09:25.109 --> 00:09:31.311
Maybe it is Navigator.online or
is online, go fetch new data.

149
00:09:31.311 --> 00:09:35.662
A lot of the ideas of progressive web
apps probably apply here as well,

150
00:09:35.662 --> 00:09:40.311
except above and beyond just service
workers and stuff along those lines,

151
00:09:40.311 --> 00:09:42.892
you literally have a server, right, and

152
00:09:42.892 --> 00:09:47.140
the ability to persist stuff on
that machine and do things, right?

153
00:09:47.140 --> 00:09:51.997
As we saw before, your Electron
app can theoretically be somewhat

154
00:09:51.997 --> 00:09:56.000
headless as well and
exist in that sense also, right?

155
00:09:56.000 --> 00:10:01.040
And so there's a lot of really interesting
ideas and things along those lines.

