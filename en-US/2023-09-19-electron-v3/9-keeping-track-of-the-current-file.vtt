WEBVTT

1
00:00:00.000 --> 00:00:03.270
So to catch up,
we've got the ability to open files,

2
00:00:03.270 --> 00:00:05.606
we've got the ability to save files.

3
00:00:05.606 --> 00:00:09.807
We just wanna make sure that we've got
the ability to know what file we're

4
00:00:09.807 --> 00:00:11.781
currently working with, right?

5
00:00:11.781 --> 00:00:16.791
So what I'm thinking that I'm gonna do
is kind of give myself two functions

6
00:00:16.791 --> 00:00:21.976
called set current file and get current
file, like Revel in all of your work.

7
00:00:21.976 --> 00:00:25.358
When last we met our heroes, us.

8
00:00:25.358 --> 00:00:30.029
We had to build an open file, we have
really a save a file and export the HTML.

9
00:00:30.029 --> 00:00:33.604
We just don't really have a great sense
of knowing what file we're currently

10
00:00:33.604 --> 00:00:34.323
working with.

11
00:00:34.323 --> 00:00:39.269
So we can do the natural and normal things
that we expect from a desktop application

12
00:00:39.269 --> 00:00:43.085
in terms of like saving if you
already have a current file open.

13
00:00:43.085 --> 00:00:47.425
Or if you've saved the file and
all the other little like OS level,

14
00:00:47.425 --> 00:00:51.239
niceties that the various
operating systems provide us.

15
00:00:51.239 --> 00:00:54.843
So I think for starters,

16
00:00:54.843 --> 00:01:01.023
I'm gonna do a give myself two functions,

17
00:01:01.023 --> 00:01:06.699
getCurrentFile and setCurrentFile.

18
00:01:09.771 --> 00:01:14.326
And the getCurrentFile when I might just
take some of the more complicated code

19
00:01:14.326 --> 00:01:22.688
that I had and that's a file and
be able to say like, We'd say,

20
00:01:22.688 --> 00:01:27.850
let's say so filePath is a string.

21
00:01:31.180 --> 00:01:38.315
browserWindow is a BrowserWindow,
makes this asynchronous.

22
00:01:43.070 --> 00:01:51.293
And we'll have to say if
filePath give me that.

23
00:01:51.293 --> 00:01:55.728
Actually, if currentfile.filepath,

24
00:01:55.728 --> 00:02:00.930
we don't even really
need that argument there.

25
00:02:02.713 --> 00:02:03.690
Make this one optional.

26
00:02:03.690 --> 00:02:10.161
If there is currently
one that we know about,

27
00:02:10.161 --> 00:02:14.090
give me that, otherwise,

28
00:02:19.591 --> 00:02:27.440
Give me what we get back from the,
From the browser window.

29
00:02:27.440 --> 00:02:29.120
There's no browser window.

30
00:02:31.042 --> 00:02:33.399
Like, we could get back undefined.

31
00:02:33.399 --> 00:02:35.070
So we've got the ability to get that kind.

32
00:02:35.070 --> 00:02:39.687
When I might use that a little bit,
and then we've got setCurrentFile with

33
00:02:39.687 --> 00:02:44.522
should take a filePath, which is a string,
and all we're gonna build this out

34
00:02:44.522 --> 00:02:49.232
a little bit, but we'll just say,
currentFile.filepPath equals that.

35
00:02:49.232 --> 00:02:52.552
Awesome, that's gonna kind of be the
initial like pieces that we build upon,

36
00:02:52.552 --> 00:02:54.883
because there's a whole bunch
of stuff that we can do.

37
00:02:54.883 --> 00:02:57.865
We saw before, we can add to
the title to show the current file,

38
00:02:57.865 --> 00:03:00.529
we could set the representative
file on macOS, right?

39
00:03:00.529 --> 00:03:03.391
We might choose to try to
like keep track of whether or

40
00:03:03.391 --> 00:03:06.720
not there's changes and edits and
stuff along those lines.

41
00:03:06.720 --> 00:03:08.695
And all of those pieces, in fact,

42
00:03:08.695 --> 00:03:14.680
like, I'll decide what I
want to do here in a second.

43
00:03:14.680 --> 00:03:18.672
So there's a bunch of stuff we will
do as we set the current file and

44
00:03:18.672 --> 00:03:19.990
build it from there.

45
00:03:19.990 --> 00:03:21.721
I might even just make this
default current file.

46
00:03:21.721 --> 00:03:24.070
We'll find out as we go along.

47
00:03:24.070 --> 00:03:27.628
So the first thing I wanna do is just
at least get that get current file

48
00:03:27.628 --> 00:03:30.010
in here to just simplify
my code a little bit.

49
00:03:30.010 --> 00:03:36.169
And so on the saveFile, we'll just say,

50
00:03:41.708 --> 00:03:48.606
filePath = await getCurrentFile.

51
00:03:48.606 --> 00:03:54.126
The browser window in there, so
like ideally I'll get the one stored,

52
00:03:54.126 --> 00:03:59.747
if not I will get the browser window,
very similar to what we had before.

53
00:03:59.747 --> 00:04:02.284
We'll have that there as well.

54
00:04:04.074 --> 00:04:07.024
Cool, yeah, so we'll get it
there's current file path, we'll

55
00:04:07.024 --> 00:04:10.780
get the current file path, otherwise,
we will return the browser window, great.

56
00:04:10.780 --> 00:04:15.613
Everything moves along, and
then the setCurrentFile is upon saving it.

57
00:04:15.613 --> 00:04:20.550
We can actually probably just do
that in the save file dialog for

58
00:04:20.550 --> 00:04:25.035
now, which is await for that and
then, setCurrentFile, and

59
00:04:25.035 --> 00:04:28.920
we can do file path and
I can do content as well.

60
00:04:28.920 --> 00:04:31.651
While I'm in here,
I'll just have to adjust that one.

61
00:04:33.780 --> 00:04:37.274
So do filePath to do content string.

62
00:04:42.690 --> 00:04:46.559
So because we know the last
time that we saved,

63
00:04:46.559 --> 00:04:50.439
it will be the content
that we had in this case.

64
00:04:50.439 --> 00:04:51.238
Fix it right there.

65
00:04:51.238 --> 00:04:52.220
Cool.

66
00:04:52.220 --> 00:04:55.564
And then we also know
that when we open a file,

67
00:04:55.564 --> 00:04:58.917
we have the file path and
the content as well.

68
00:04:58.917 --> 00:05:02.421
So now that we have this set current file
abstraction, we can use it there too and

69
00:05:02.421 --> 00:05:05.507
which will make it a lot easier to see
that everything works the way that

70
00:05:05.507 --> 00:05:06.052
we expect.

71
00:05:06.052 --> 00:05:10.100
So when we open a file, we'll have
the file path, we'll have the content.

72
00:05:10.100 --> 00:05:16.680
So we'll also set current file to
file path and content as well, right?

73
00:05:16.680 --> 00:05:20.453
So we have that in place,
it's just storing it in memory,

74
00:05:20.453 --> 00:05:23.071
it doesn't really do a lot just yet, but

75
00:05:23.071 --> 00:05:26.779
it gives us the ability to add
on to this and handle stuff.

76
00:05:26.779 --> 00:05:30.241
So now whenever we save a file,
or whenever we open a file,

77
00:05:30.241 --> 00:05:33.351
we are keeping track of what
the current file is, and

78
00:05:33.351 --> 00:05:36.693
we can begin to put some of
those pieces in there as well.

79
00:05:36.693 --> 00:05:41.912
The nice part is that
electron makes this very,

80
00:05:41.912 --> 00:05:44.920
very, very simple for us.

81
00:05:44.920 --> 00:05:45.478
Which is,

82
00:05:45.478 --> 00:05:49.200
there are a few different options
that are available on the app module.

83
00:05:49.200 --> 00:05:52.720
So there is app.setRepresentedFile.

84
00:05:55.430 --> 00:05:59.990
It's actually not the one we want, so
we've got it, we're keeping track of it.

85
00:05:59.990 --> 00:06:04.440
And then what we wanna do is, let's
start with setting the title, actually.

86
00:06:04.440 --> 00:06:06.187
We've got that browser window.

87
00:06:06.187 --> 00:06:09.689
We should probably take that as well.

88
00:06:09.689 --> 00:06:11.955
So we can change the browserWindow too,

89
00:06:11.955 --> 00:06:15.360
I think I want that to be the first
argument, just to keep it.

90
00:06:19.844 --> 00:06:22.099
Cuz we should always have
one of those as well.

91
00:06:22.099 --> 00:06:25.099
So we'll get browserWindow and
now I have to pass that in.

92
00:06:25.099 --> 00:06:30.580
Luckily, TypeScript is gonna help me here,
so we'll pass the browserWindow in here.

93
00:06:30.580 --> 00:06:35.592
And we'll pass it over here as well.

94
00:06:35.592 --> 00:06:38.429
This is one of the reasons why I
made it a point to pass it through.

95
00:06:38.429 --> 00:06:40.867
And again, if you have just one window,

96
00:06:40.867 --> 00:06:44.180
you could just store it in
that top level scope as well.

97
00:06:44.180 --> 00:06:47.271
But it is one of those things where should
you decide to have multiple windows

98
00:06:47.271 --> 00:06:50.501
that you're storing them in, whether it
be an array, whether it be a hash map or

99
00:06:50.501 --> 00:06:51.779
something like that, right?

100
00:06:51.779 --> 00:06:53.899
No longer can you rely on a global.

101
00:06:53.899 --> 00:06:56.661
And you can call it
a premature optimization, but

102
00:06:56.661 --> 00:07:01.220
it's also not bothering anyone, and it
makes it a little bit easier to work with.

103
00:07:01.220 --> 00:07:04.290
You just have to remember
to pass it through.

104
00:07:04.290 --> 00:07:07.060
Cool, so now we've got,
we're setting the current file.

105
00:07:07.060 --> 00:07:10.200
We can do set title, we'll call it.

106
00:07:10.200 --> 00:07:13.534
We get a fun thing I'll
show you in a second,

107
00:07:13.534 --> 00:07:19.140
which is Electron respects a few
extra properties in the package.json.

108
00:07:19.140 --> 00:07:25.980
One of them, if we look in here that we'll
see, is we have this product name, right?

109
00:07:25.980 --> 00:07:29.740
So you have the repo name or the module
name that you normally use in NPM.

110
00:07:29.740 --> 00:07:35.249
But then Electron or Electron Forge in
particular respects this product name,

111
00:07:35.249 --> 00:07:40.769
which is like what you actually want it to
show like as the actual name of the app.

112
00:07:40.769 --> 00:07:44.280
When you are developing
right under the hood,

113
00:07:44.280 --> 00:07:49.330
there is like a shell of an Electron
app and it's called Electron.

114
00:07:49.330 --> 00:07:53.078
So that's what it shows the application
menu when it has the like macOS

115
00:07:53.078 --> 00:07:56.524
bindings here, like Windows,
you don't see this menu at all.

116
00:07:56.524 --> 00:07:59.965
But you can see this here when you
package the app instead of Electron,

117
00:07:59.965 --> 00:08:02.432
it will say the name of your application,
right?

118
00:08:02.432 --> 00:08:05.667
So you don't have to worry about like,
they open your app, it just says Electron,

119
00:08:05.667 --> 00:08:07.217
it will show the name of the application.

120
00:08:07.217 --> 00:08:10.556
As you're developing, it's kind of just
using a shell Electron app to like,

121
00:08:10.556 --> 00:08:12.390
hold it, and that one is called Electron.

122
00:08:12.390 --> 00:08:13.746
But the rest of the time,

123
00:08:13.746 --> 00:08:18.020
you will, because you will see the actual
name of your app once you package it.

124
00:08:18.020 --> 00:08:22.510
So that product name is then available for
you wherever you need as app.name,

125
00:08:22.510 --> 00:08:26.795
which in this case will be firesale,
or if you change it to something else,

126
00:08:26.795 --> 00:08:28.373
it will be something else.

127
00:08:28.373 --> 00:08:31.340
So we can set that as well.

128
00:08:31.340 --> 00:08:37.679
So we've got that in place,
and now we can also see like,

129
00:08:40.668 --> 00:08:47.244
browserWindow, setRepresentedFilename,
right?

130
00:08:47.244 --> 00:08:50.963
That is the one that we saw in the menu
bar up top where you can drag it,

131
00:08:50.963 --> 00:08:54.116
you can see exactly where it
was stuff along those lines.

132
00:08:54.116 --> 00:08:58.640
So that is like that's all you
really need to do is just tell it

133
00:08:58.640 --> 00:09:01.057
where on the OS this file lives.

134
00:09:01.057 --> 00:09:04.533
And then again,
I believe this is macOS specific and

135
00:09:04.533 --> 00:09:08.721
like the nice part is if you have
IntelliSense like VS Code, and

136
00:09:08.721 --> 00:09:12.846
you hover over a method name,
it says app platform is Darwin.

137
00:09:12.846 --> 00:09:17.780
That means macOS only, some of them are
Linux only some of them are Windows only,

138
00:09:17.780 --> 00:09:18.302
right?

139
00:09:18.302 --> 00:09:21.574
It all depends on things that one OS
can do that the other one can't do.

140
00:09:21.574 --> 00:09:24.982
The nice part is,
is you don't have to like,

141
00:09:24.982 --> 00:09:31.019
be like if Darwin do this If it is Windows
or Linux just nothing happens, right?

142
00:09:31.019 --> 00:09:32.639
And you don't necessarily
need to worry about it.

143
00:09:32.639 --> 00:09:36.908
So now, we can set
the representative file name and

144
00:09:36.908 --> 00:09:42.576
again this will happen when ever we
either open a file or save a file.

145
00:09:42.576 --> 00:09:45.526
Which are right now the two ways that
we could literally set a new file,

146
00:09:45.526 --> 00:09:48.288
like one could argue, could you drag and
drop in another file?

147
00:09:48.288 --> 00:09:49.488
Sure, right?

148
00:09:49.488 --> 00:09:51.308
The nice part is you
would just as you know,

149
00:09:51.308 --> 00:09:53.392
you're kind of already
getting the sense here.

150
00:09:53.392 --> 00:09:56.770
You'd send an IPC message back to
the renderer, you'd update these.

151
00:09:56.770 --> 00:09:58.551
You probably open the file, right?

152
00:09:58.551 --> 00:10:01.402
You'd probably trigger open file if they
dragged in a file because you won't have

153
00:10:01.402 --> 00:10:02.323
the contents otherwise.

154
00:10:02.323 --> 00:10:05.345
So these like abstractions, you can
kind of build on top of them in general.

155
00:10:05.345 --> 00:10:09.544
Let's just see it in action because I
think like the ability to know the current

156
00:10:09.544 --> 00:10:11.643
file and represent that in the window,

157
00:10:11.643 --> 00:10:14.586
we should verify that that
is all working as expected.

158
00:10:14.586 --> 00:10:16.361
So I'm gonna just give
that another start again.

159
00:10:19.659 --> 00:10:22.090
And so we see firesale and
now I gotta open a file.

160
00:10:22.090 --> 00:10:25.149
We'll see the context bridge one again.

161
00:10:25.149 --> 00:10:27.317
And now you can see I see the full path.

162
00:10:27.317 --> 00:10:31.955
Now node has a bunch of methods on
the path library if you just want the base

163
00:10:31.955 --> 00:10:37.372
name or something along those lines, like
that's easy enough to do, we'll do it.

164
00:10:37.372 --> 00:10:40.129
But now you can see I get this
representative file here and

165
00:10:40.129 --> 00:10:43.248
if I like command, click on it,
you can see exactly where it is.

166
00:10:43.248 --> 00:10:48.576
I can drag it, it looks,
it's beginning to look more and

167
00:10:48.576 --> 00:10:52.909
more like a full like
macOS like application.

168
00:10:52.909 --> 00:10:55.830
And again, you will still get the title.

169
00:10:55.830 --> 00:11:00.698
If you're on Windows or Linux, you will
just also get this on macOS, and both will

170
00:11:00.698 --> 00:11:05.160
begin to feel more and more like one of
these real like kind of files as well.

171
00:11:05.160 --> 00:11:10.471
So we could just do like we can grab
from path we can also get base name and

172
00:11:10.471 --> 00:11:15.534
just use that as well here, so
we can do basename for the filePath.

173
00:11:17.995 --> 00:11:20.264
And now we'll give another shot.

174
00:11:25.774 --> 00:11:27.684
Open a file.

175
00:11:30.205 --> 00:11:31.505
And now we see just the file name.

176
00:11:31.505 --> 00:11:33.709
So like whatever you're trying to go for,

177
00:11:33.709 --> 00:11:37.884
you can get the like appropriate effect
here and show whichever one makes sense.

178
00:11:37.884 --> 00:11:40.804
It's still the full file path when
we set the representative file.

179
00:11:40.804 --> 00:11:43.049
So we can see that here as well.

180
00:11:43.049 --> 00:11:50.143
The other thing we might choose to do
along the same time period is we can also,

181
00:11:50.143 --> 00:11:54.509
and this will work across
all of the different,

182
00:11:54.509 --> 00:11:58.349
all of the different operating systems.

183
00:11:58.349 --> 00:12:01.088
It manifests itself differently, and

184
00:12:01.088 --> 00:12:06.154
you'll know best is you can add it
to the recent documents list, right?

185
00:12:06.154 --> 00:12:11.955
Now, the one thing I will warn you is if
you're just in development, it is going

186
00:12:11.955 --> 00:12:17.515
to be, as you can see, my very mature
file names from previous runs of this.

187
00:12:17.515 --> 00:12:21.953
It is like, because you're using that
Electron shell application in this case,

188
00:12:21.953 --> 00:12:24.285
it is the same one that
you use repeatedly.

189
00:12:24.285 --> 00:12:26.164
When you build it up for production,

190
00:12:26.164 --> 00:12:30.599
obviously, then it bundles with the right
identifier, and stuff along those lines.

191
00:12:30.599 --> 00:12:35.925
But out of the box, you will see stuff
from previous iterations of this as well,

192
00:12:35.925 --> 00:12:39.282
but there are none of
them called manifesto.md.

193
00:12:39.282 --> 00:12:43.826
So, let's go verify that that
does what we think it does.

194
00:12:47.539 --> 00:12:49.894
Right, and we'll go ahead,
we open the file.

195
00:12:52.614 --> 00:12:56.649
And now we should see it in here as well,
right?

196
00:12:56.649 --> 00:13:01.071
And then it'll also show up in your like
recent documents where wherever recent

197
00:13:01.071 --> 00:13:02.863
documents are found in your OS.

198
00:13:02.863 --> 00:13:06.626
It registers with the OS as a document
that you have opened up recently and like,

199
00:13:06.626 --> 00:13:10.224
you're getting that full, like file
system integration at this point, or

200
00:13:10.224 --> 00:13:11.083
OS integration.

201
00:13:11.083 --> 00:13:14.302
That like you would come to
expect in an application.

202
00:13:14.302 --> 00:13:17.660
And again, like most of these things,
they are an attention to detail, and

203
00:13:17.660 --> 00:13:20.966
you do need to tell electron like
the specifics of how this should work, but

204
00:13:20.966 --> 00:13:22.926
the act of doing it is not very hard,
right?

205
00:13:22.926 --> 00:13:25.973
You just need to know, like,
okay, we're doing, you know,

206
00:13:25.973 --> 00:13:28.388
it's going to be a little
bit different for like,

207
00:13:28.388 --> 00:13:32.378
if you build like an image resizing app,
or something along those lines, right?

208
00:13:32.378 --> 00:13:36.707
Like another great example is if you just
wanted something that I can drag, drop,

209
00:13:36.707 --> 00:13:38.478
upload to my S3 bucket, right?

210
00:13:38.478 --> 00:13:40.603
You can whip something up
like that incredibly quickly.

211
00:13:40.603 --> 00:13:42.620
The nuances of what
the representative file is and

212
00:13:42.620 --> 00:13:44.593
how that works is gonna be different,
each one.

213
00:13:44.593 --> 00:13:45.614
So yeah, you have to tell it.

214
00:13:45.614 --> 00:13:50.498
But generally speaking,
once you have a sense of how that's

215
00:13:50.498 --> 00:13:55.205
supposed to work,
it should be relatively easy to check.

