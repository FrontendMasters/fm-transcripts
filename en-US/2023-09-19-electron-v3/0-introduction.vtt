WEBVTT

1
00:00:00.100 --> 00:00:02.240
We're gonna talk about Electron today.

2
00:00:02.240 --> 00:00:03.590
What does that mean?

3
00:00:03.590 --> 00:00:07.068
We're gonna take the fact
that we're web developers and

4
00:00:07.068 --> 00:00:09.178
ignore that reality for a moment.

5
00:00:09.178 --> 00:00:11.647
And just realize that in the modern era,

6
00:00:11.647 --> 00:00:16.160
being a JavaScript developer means
you can do whatever you want, right?

7
00:00:16.160 --> 00:00:18.880
It means you could [LAUGH]
hack on some hardware,

8
00:00:18.880 --> 00:00:22.282
it means that you can build
desktop applications, right?

9
00:00:22.282 --> 00:00:29.650
That's one of the great things about being
a front end engineer in the modern era.

10
00:00:29.650 --> 00:00:35.501
So today, we're gonna talk a lot about
building full on desktop applications.

11
00:00:35.501 --> 00:00:39.421
And one of the things I think a lot
about is, at one point in my life,

12
00:00:39.421 --> 00:00:42.851
you had to show a slide which is like,
and here's the one or

13
00:00:42.851 --> 00:00:47.192
two applications that are really reels
that are built on top of Electron.

14
00:00:47.192 --> 00:00:52.439
I looked at my doc the other day and
realized that almost

15
00:00:52.439 --> 00:00:57.343
all of the applications that
I use on a daily basis,

16
00:00:57.343 --> 00:01:05.000
many of them happen to be Electron
applications, arguably Chrome as well.

17
00:01:05.000 --> 00:01:08.196
But these days between Visual Studio Code,
Obsidian,

18
00:01:08.196 --> 00:01:12.684
which is a note-taking application,
the GitHub client, unsurprisingly,

19
00:01:12.684 --> 00:01:14.900
is an Electron application.

20
00:01:14.900 --> 00:01:17.860
Figma, Slack, by definition,

21
00:01:17.860 --> 00:01:23.440
you probably use at least one
Electron app daily, right?

22
00:01:23.440 --> 00:01:24.227
And so today,

23
00:01:24.227 --> 00:01:28.860
what we're gonna do is we're gonna talk
a little bit about how to build those.

24
00:01:28.860 --> 00:01:33.729
Right, and there are some
conceptual pieces to think about,

25
00:01:33.729 --> 00:01:39.067
right, but once you kinda wrap
your head around the model, right,

26
00:01:39.067 --> 00:01:44.490
the actual full range of
possibility is incredibly exciting.

27
00:01:44.490 --> 00:01:46.448
And at the end of the day,

28
00:01:46.448 --> 00:01:52.410
Electron is really just kind of
the marriage of two things, right?

29
00:01:52.410 --> 00:01:59.680
A full Node.js runtime as well as
a full Chromium based runtime.

30
00:01:59.680 --> 00:02:01.850
And so on one hand you've got chromium.

31
00:02:01.850 --> 00:02:06.890
And the nice part too is Electron comes
bundled with both of these, right?

32
00:02:06.890 --> 00:02:09.798
And so when you go and you package and
you build your Electron application,

33
00:02:09.798 --> 00:02:12.640
you don't have to worry about
are they running node 16?

34
00:02:12.640 --> 00:02:13.560
Are they running Node 20?

35
00:02:13.560 --> 00:02:17.994
Whatever version build they're running,
cuz you would package your own version

36
00:02:17.994 --> 00:02:21.979
of Node and you don't necessarily have
to worry about browser support and

37
00:02:21.979 --> 00:02:25.210
capabilities, and something,
something Safari right?

38
00:02:25.210 --> 00:02:28.760
Because you are also packaging
your own Chromium runtime.

39
00:02:28.760 --> 00:02:33.815
And so as I said before, Electron is
basically kind of just bringing together

40
00:02:33.815 --> 00:02:38.946
a version of Chromium, a version of Node,
and then creating a bunch of bridges

41
00:02:38.946 --> 00:02:44.000
between those two processes to allow you
to kind of both have the full access of

42
00:02:44.000 --> 00:02:49.092
a Node.js environment slash what we might
think of a lot of times as a server.

43
00:02:49.092 --> 00:02:53.805
As well as, everything that comes in
the browser, most notably the DOM,

44
00:02:53.805 --> 00:02:56.780
the runtime engine,
all the web APIs as well.

45
00:02:56.780 --> 00:03:01.672
So from Chromium, you get full HTML5
support, GPU acceleration, Blink,

46
00:03:01.672 --> 00:03:06.279
V8, which you also get on the Node side,
and all of the modern web APIs.

47
00:03:06.279 --> 00:03:10.610
And like I said, since you know exactly
what version of Chromium you're using cuz

48
00:03:10.610 --> 00:03:15.066
you chose it when you chose the version of
Electron, you can kind of rest confidently

49
00:03:15.066 --> 00:03:17.990
on what features you can and
cannot rely on as well.

50
00:03:17.990 --> 00:03:22.290
And then on the other side, you've got all
of Node.js wher, not only do you have full

51
00:03:22.290 --> 00:03:26.240
file system access and all the things
you have normally from node.

52
00:03:26.240 --> 00:03:28.900
You also can compile native module.

53
00:03:28.900 --> 00:03:32.924
So if you look at a lot of databases,
the drivers are perhaps C/C++,

54
00:03:32.924 --> 00:03:36.630
you can also compile those and
bundle those into your app as well.

55
00:03:36.630 --> 00:03:41.432
So you can ship your app with a Rust
module as well if you need to optimize for

56
00:03:41.432 --> 00:03:42.445
performance.

57
00:03:42.445 --> 00:03:46.212
And so you don't have these limitations
on what goes on the server,

58
00:03:46.212 --> 00:03:47.610
what goes on the client.

59
00:03:47.610 --> 00:03:51.419
There's some amount of that to think
about, but mostly predominantly for

60
00:03:51.419 --> 00:03:54.926
security reasons, because the part
that your users interact with,

61
00:03:54.926 --> 00:03:58.431
you probably wanna have at least
a little bit of a wall between that and

62
00:03:58.431 --> 00:04:01.180
the part that can write
to their file system.

63
00:04:01.180 --> 00:04:06.855
But other than that, you actually
have both of these things together,

64
00:04:06.855 --> 00:04:11.489
which kinda opens up a realm of
possibilities that are a lot

65
00:04:11.489 --> 00:04:15.380
bigger than either one independently,
right?

66
00:04:15.380 --> 00:04:19.100
It's like the whole is greater
than the sum of its parts.

67
00:04:19.100 --> 00:04:21.970
I think that's definitely
true with Electron.

68
00:04:21.970 --> 00:04:27.778
And like I said, at this point we
are far enough in to the Electron era,

69
00:04:27.778 --> 00:04:34.750
if you will, to know that, can you build
desktop quality apps that feel at home?

70
00:04:34.750 --> 00:04:37.650
I spend most of my life in
Visual Studio Code, right?

71
00:04:37.650 --> 00:04:41.140
And unfortunately, as a manager,
I spent a lot of my life in Slack as well.

72
00:04:41.140 --> 00:04:42.580
We don't talk about that part.

73
00:04:42.580 --> 00:04:45.530
But a lot of my life is in VS Code,
which is an Electron app.

74
00:04:45.530 --> 00:04:50.061
My note taking app, Obsidian,
Electron app, so on and so forth, right?

75
00:04:50.061 --> 00:04:53.988
And once we kind of wrap our heads
around the process model and

76
00:04:53.988 --> 00:04:58.070
the nuances of the OS integration,
then the actual ability for

77
00:04:58.070 --> 00:05:01.318
you to build desktop applications for
your need.

78
00:05:01.318 --> 00:05:04.586
Whether it's a direct business
use case or, honestly,

79
00:05:04.586 --> 00:05:08.463
I wish I had this convenience app that
I could just drag an image in and

80
00:05:08.463 --> 00:05:12.226
get it to do the right thing that I
use over and over and over again.

81
00:05:12.226 --> 00:05:15.827
The ability to kinda build these
things and package them up and

82
00:05:15.827 --> 00:05:19.040
use them is I think really great as well.

83
00:05:19.040 --> 00:05:21.534
So we're gonna build
a few little apps today.

84
00:05:21.534 --> 00:05:24.305
We've got just kind of
a mark down rendering app.

85
00:05:24.305 --> 00:05:29.397
And I think this does a really great
job of demoing a lot of the kind

86
00:05:29.397 --> 00:05:36.400
of interesting pieces of an Electron app,
which is it can read from the file system.

87
00:05:36.400 --> 00:05:38.850
It can write to the file system, right?

88
00:05:38.850 --> 00:05:40.110
It can export things.

89
00:05:40.110 --> 00:05:42.846
It can show that file in either finder or
Windows Explorer,

90
00:05:42.846 --> 00:05:45.650
depending on what operating
system you're using, right?

91
00:05:45.650 --> 00:05:49.794
It can then also open that markdown file
in the default application that the OS

92
00:05:49.794 --> 00:05:53.872
knows about, things that might be a lot
harder to do in the browser are kind of

93
00:05:53.872 --> 00:05:56.510
just natural and
easy inside of an Electron app.

94
00:05:56.510 --> 00:05:58.070
So I think it's a really
great way to kinda see.

95
00:05:58.070 --> 00:06:02.326
We can trigger data file dialogs,
we can scope which kinda file and

96
00:06:02.326 --> 00:06:04.540
things along those lines, Mark.

97
00:06:06.420 --> 00:06:10.167
&gt;&gt; What if you wanted a desktop app
as well as the browser app with

98
00:06:10.167 --> 00:06:11.570
the single code base.

99
00:06:11.570 --> 00:06:12.690
Have you seen that before?

100
00:06:12.690 --> 00:06:16.785
&gt;&gt; Yeah, I mean, you can theoretically,
and when we get to the build tool, things.

101
00:06:16.785 --> 00:06:20.306
When we start building some of these
apps using the Electron Forge,

102
00:06:20.306 --> 00:06:23.330
you'll see kind of that you
have a lot of the browser code,

103
00:06:23.330 --> 00:06:25.650
you do separate from
the main process code.

104
00:06:25.650 --> 00:06:27.170
You're not kinda jamming
them all in together.

105
00:06:27.170 --> 00:06:29.110
There is a little dance between the two.

106
00:06:29.110 --> 00:06:32.355
Would you have to do
some work to figure out,

107
00:06:32.355 --> 00:06:36.840
making the actual API calls
versus maybe talking directly.

108
00:06:36.840 --> 00:06:40.936
Yeah, but you could give yourself
the abstractions, but the kind of code,

109
00:06:40.936 --> 00:06:43.308
especially when we look at Electron Forge.

110
00:06:43.308 --> 00:06:48.104
You might use Vite, for instance, or Vite,
as they say, or Webpack or what have you,

111
00:06:48.104 --> 00:06:50.296
to build all the client-side assets.

112
00:06:50.296 --> 00:06:52.824
You do need to do a little bit
more of a mono repo dance, and

113
00:06:52.824 --> 00:06:55.357
you need to build yourself
some of the abstractions, but

114
00:06:55.357 --> 00:06:58.880
there's nothing stopping you because
it's just Chromium and Node, right?

115
00:06:58.880 --> 00:07:02.374
It's just some affordances you
might give yourself in the code.

116
00:07:02.374 --> 00:07:07.475
And the nice part is, back in the day,
also known as the last time we did

117
00:07:07.475 --> 00:07:13.618
this workshop, you could do a lot of just
regular node calls in the browser context,

118
00:07:13.618 --> 00:07:19.140
which theoretically would make it
very hard to ship it to the browser.

119
00:07:19.140 --> 00:07:22.390
Turns out that was not the best
security posture in the world.

120
00:07:22.390 --> 00:07:26.500
And so can you go around that and
circumvent and do that still?

121
00:07:26.500 --> 00:07:27.620
You absolutely can.

122
00:07:27.620 --> 00:07:32.070
Am I gonna show you how to do insecure
things that you shouldn't do?

123
00:07:32.070 --> 00:07:34.390
I will allude to it, but
I will not be doing that, right?

124
00:07:34.390 --> 00:07:38.749
And so insofar that we do try to separate
a lot of the UI piece from the Node piece,

125
00:07:38.749 --> 00:07:42.785
but still have that kind of integration
point over this module in Electron

126
00:07:42.785 --> 00:07:47.300
called the context bridge, we already
have that kind of separation of concerns.

127
00:07:47.300 --> 00:07:51.511
But there's nothing stopping you from
having a version where you can export

128
00:07:51.511 --> 00:07:55.404
a client side UI piece, and
then also having the full Electron piece.

129
00:07:55.404 --> 00:07:58.570
A lot of it just becomes,
how you set up a mono repo?

130
00:07:58.570 --> 00:08:02.717
And how do you make sure that you've
given yourself an abstraction

131
00:08:02.717 --> 00:08:07.070
where you can swap in making the API
calls versus whatever, right?

132
00:08:07.070 --> 00:08:10.701
But theoretically, you could also just
spin up a server, so on and so forth.

133
00:08:10.701 --> 00:08:14.668
Or maybe it's an application that lives,
but then talks to a remote server as well.

134
00:08:14.668 --> 00:08:19.626
Which is true probably if you think of
the GitHub application, Figma, so on and

135
00:08:19.626 --> 00:08:22.660
so forth,
that they are by definition, right,

136
00:08:22.660 --> 00:08:27.850
just progressively enhancing the web
experience with additional capabilities.

137
00:08:27.850 --> 00:08:28.860
So absolutely.

138
00:08:30.440 --> 00:08:32.430
Yep, so we've got a markdown application.

139
00:08:32.430 --> 00:08:35.167
And then we also have,
depending on what we want,

140
00:08:35.167 --> 00:08:38.140
we can always build
the classic to-do list.

141
00:08:38.140 --> 00:08:42.110
And then the ability to build actual
menu bar and system tray applications,

142
00:08:42.110 --> 00:08:44.542
depending on your operating system, right?

143
00:08:44.542 --> 00:08:49.547
So system tray for Windows, menu bar for
MacOS, and kind of build applications

144
00:08:49.547 --> 00:08:54.192
like places that you normally don't
find web views all the time, right?

145
00:08:54.192 --> 00:08:57.555
i mean, you do because we live in a world
where there's Electron apps all over

146
00:08:57.555 --> 00:08:58.083
the place.

147
00:08:58.083 --> 00:09:01.937
But generally speaking, the ability to
kind of create all sorts of different

148
00:09:01.937 --> 00:09:05.570
experiences above and beyond what you
might have in the browser as well.

149
00:09:06.800 --> 00:09:10.779
So kind of the high level we're gonna
cover, obviously, like I said, and

150
00:09:10.779 --> 00:09:14.443
I will say this probably two more
times before we really jump into it,

151
00:09:14.443 --> 00:09:18.676
is the biggest part of understanding and
grokking how to build an Electron app is

152
00:09:18.676 --> 00:09:21.935
this dance between the main process and
the render process.

153
00:09:21.935 --> 00:09:26.602
We'll talk about the Electron
process model in a moment.

154
00:09:26.602 --> 00:09:31.070
But in terms of the high level, what we
wanna kind of talk about today is, again,

155
00:09:31.070 --> 00:09:33.899
triggering these native
file system dialogues for

156
00:09:33.899 --> 00:09:38.454
both saving and opening files, and then
accessing the file system accordingly.

157
00:09:38.454 --> 00:09:43.005
Some of the operating system
level integration that you might

158
00:09:43.005 --> 00:09:48.010
leverage to make your app feel
a little bit more at home, right?

159
00:09:48.010 --> 00:09:53.335
We will skirt around the really,
really OS specific stuff because you

160
00:09:53.335 --> 00:09:58.400
might be on a Linux machine or
a Windows machine or a MacOS machine.

161
00:09:58.400 --> 00:10:02.865
We'll do a few little nods
that make it feel correct, but

162
00:10:02.865 --> 00:10:09.287
you do everything from have touchbar
integration on the 2016 to, whatever,

163
00:10:09.287 --> 00:10:15.725
2019 Macbook pros, to the tiles in
Windows 10 and 11, so on and so forth.

164
00:10:15.725 --> 00:10:19.816
Outside of just the very first foray,
as we showed just a high

165
00:10:19.816 --> 00:10:24.809
level look at Electron, we're just
gonna use TypeScript out of the box.

166
00:10:24.809 --> 00:10:29.277
One, because it's super easy.

167
00:10:29.277 --> 00:10:35.061
Two, because that way we've solved
that question right then and there.

168
00:10:35.061 --> 00:10:38.698
If you don't wanna use TypeScript,
you can just change any

169
00:10:38.698 --> 00:10:42.915
of the file extensions to .js, but
you will see that it is shockingly

170
00:10:42.915 --> 00:10:47.524
little TypeScript that I have to write
to get everything working, right?

171
00:10:47.524 --> 00:10:49.709
And also as someone live coding,

172
00:10:49.709 --> 00:10:53.533
having a type checker catch my
booboos before I squint at my

173
00:10:53.533 --> 00:10:58.076
screen wondering why something's
not working is beneficial to me.

174
00:10:58.076 --> 00:11:00.434
We will talk a little bit about,
in the first example,

175
00:11:00.434 --> 00:11:03.783
we'll just do vanilla JavaScript, or
I guess vanilla TypeScript, right?

176
00:11:03.783 --> 00:11:07.649
But in the second example, just to kinda
show how easy it is to integrate a front

177
00:11:07.649 --> 00:11:11.059
end framework, we'll grab React
because it's the lingua franca.

178
00:11:11.059 --> 00:11:15.140
And we'll kinda do the second one using
React just to show that integrating any of

179
00:11:15.140 --> 00:11:17.732
these front end frameworks is super easy,
right?

180
00:11:17.732 --> 00:11:21.602
The goal of our time together
is to at least make sure

181
00:11:21.602 --> 00:11:25.742
that there's not a lot of
huge unanswered questions.

182
00:11:25.742 --> 00:11:29.354
We'll talk about some of the other
features, like accessing clipboard,

183
00:11:29.354 --> 00:11:32.395
triggering notifications,
registering a global shortcut so

184
00:11:32.395 --> 00:11:35.224
you can activate your app from
anywhere with a keystroke.

185
00:11:35.224 --> 00:11:38.780
Again, putting the menu
bar in the system tray and

186
00:11:38.780 --> 00:11:44.380
then what it might look to use some native
modules if need be, as well, right?

187
00:11:44.380 --> 00:11:49.730
So we kind of have all of those different
bullets that we'll hit along the way.

188
00:11:49.730 --> 00:11:54.109
The only thing that we're really not
gonna focus on very deeply is the kinda

189
00:11:54.109 --> 00:11:57.249
packaging signing out cuz
that's very OS specific.

190
00:11:57.249 --> 00:11:59.661
In a lot of cases,
to just package the app,

191
00:11:59.661 --> 00:12:03.282
Electron Forge makes that super simply,
just npm run package.

192
00:12:03.282 --> 00:12:08.748
To get the Apple developer certs
designed to put in the app store

193
00:12:08.748 --> 00:12:13.920
is $100 outlay that I'm not
gonna ask everyone to do.

194
00:12:13.920 --> 00:12:17.625
But generally speaking, to build and
develop the apps is kind of where we're

195
00:12:17.625 --> 00:12:21.330
gonna focus our time and energy today,
rather than getting to the very nuance

196
00:12:21.330 --> 00:12:25.167
that is operating specific and
involves laying out possibly $100 or more.

