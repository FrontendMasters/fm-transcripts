WEBVTT

1
00:00:00.470 --> 00:00:07.900
At this point, we've done pretty
extensive querying coverage for SQL.

2
00:00:07.900 --> 00:00:11.823
So you can take pretty much all these
skills and move directly over to MySQL,

3
00:00:11.823 --> 00:00:15.075
probably Oracle and some of these
other SQL based databases and

4
00:00:15.075 --> 00:00:16.320
just fly with it right.

5
00:00:16.320 --> 00:00:21.700
So now I've kind of,
I've taught you generic SQL stuff.

6
00:00:23.070 --> 00:00:25.260
I'm going to move you into.

7
00:00:25.260 --> 00:00:28.670
Postgres stuff,
specifically Postgres stuff.

8
00:00:28.670 --> 00:00:33.686
And this is the part that like,
these are the reasons

9
00:00:33.686 --> 00:00:40.870
why I chose Postgres to teach you versus
MySQL and some of those other ones.

10
00:00:43.360 --> 00:00:48.051
So one of the really cool features of
Postgres is it's kind of ends up being

11
00:00:48.051 --> 00:00:52.895
a multi paradigm database because it
has the ability to do unstructured data

12
00:00:52.895 --> 00:00:53.850
within SQL.

13
00:00:53.850 --> 00:00:56.230
And it's kind of a fascinating
way they chosen to do it.

14
00:00:56.230 --> 00:01:02.410
You can actually store JSON
as a data type in Postgres.

15
00:01:02.410 --> 00:01:06.440
And then Postgres knows
how to query JSON for you.

16
00:01:06.440 --> 00:01:08.986
So you can have it this mixed,
like schema and

17
00:01:08.986 --> 00:01:13.200
schemaless data that lives side
by side in the same thing.

18
00:01:13.200 --> 00:01:16.255
So that's the cool thing
about this JSON data type.

19
00:01:16.255 --> 00:01:19.615
Type is a doesn't have to have a schema so
you can put whatever you want in it.

20
00:01:21.775 --> 00:01:26.520
And it kind of allows you to kind of blur
that line between what a document is and

21
00:01:26.520 --> 00:01:30.099
what a record is across document and
SQL based databases.

22
00:01:31.170 --> 00:01:34.120
This is, as far as I know,
very unique to Postgres.

23
00:01:34.120 --> 00:01:37.862
I don't think this exists
in many SQL types.

24
00:01:37.862 --> 00:01:43.885
So, one of the In fact, let's go back
over here if we look at this you

25
00:01:43.885 --> 00:01:50.334
can see we have this rich content table
if I only put five records in here so

26
00:01:50.334 --> 00:01:56.830
you can if you want to look at it,
just say select star from rich content.

27
00:02:00.300 --> 00:02:05.160
And you'll see here it has a Content ID
a comment ID, and has content in it.

28
00:02:06.950 --> 00:02:08.830
So the content ID is that it's unique.

29
00:02:08.830 --> 00:02:13.050
In fact, let's go back over here
is it It's a unique primary key.

30
00:02:13.050 --> 00:02:15.270
The comment ID refers to a comment.

31
00:02:15.270 --> 00:02:19.855
And then the content is a JSON

32
00:02:19.855 --> 00:02:24.830
data type and it's not known.

33
00:02:26.970 --> 00:02:32.289
So imagine you're making a message
board anyone had the ability to embed

34
00:02:32.289 --> 00:02:39.160
videos embed polls, and embed images, you
wanna have this rich content experience.

35
00:02:39.160 --> 00:02:42.550
The way that you can do that
is with this JSON data type,

36
00:02:42.550 --> 00:02:46.330
because these things are gonna
be kinda amorphous, right?

37
00:02:46.330 --> 00:02:49.050
So if you look down here,
I have several of them out here.

38
00:02:49.050 --> 00:02:53.740
This one's gonna be a poll and it's gonna
have a question, it's gonna have options.

39
00:02:53.740 --> 00:02:56.425
Or this one's going to be a video and
it's going to be URL and

40
00:02:56.425 --> 00:02:58.380
it's going to dimension to those videos.

41
00:02:59.500 --> 00:03:03.968
So these various different types
of Rich Content are going to have

42
00:03:03.968 --> 00:03:08.290
different kinds of things that
are going to associate with it.

43
00:03:08.290 --> 00:03:13.160
So it's going to have this kind of,
it needs a schemaless way of expressing.

44
00:03:13.160 --> 00:03:15.290
Our other option is to
have multiple tables.

45
00:03:15.290 --> 00:03:18.030
One describes poles one describes videos.

46
00:03:18.030 --> 00:03:19.108
One describes images and

47
00:03:19.108 --> 00:03:22.650
then we're going to have to have some sort
of like connecting table in the middle.

48
00:03:22.650 --> 00:03:27.470
That's going to be just a comment
idea of links to a particular type of

49
00:03:27.470 --> 00:03:32.455
other common or like Rich Content ID,
you can express this in tables but

50
00:03:32.455 --> 00:03:36.130
it gets messy and gross and
involves a lot of tables.

51
00:03:37.820 --> 00:03:40.739
This is really nice because we can just
put everything in the same table and

52
00:03:40.739 --> 00:03:42.280
just express it as JSON.

53
00:03:42.280 --> 00:03:46.972
So that's kind of the use case for
this one is I have heterogeneous data is I

54
00:03:46.972 --> 00:03:51.830
guess how I would describe that like
data that should live in the same table.

55
00:03:51.830 --> 00:03:55.708
It's of a similar thing,
collection variety, but

56
00:03:55.708 --> 00:03:58.713
might have different dimensions to it.

57
00:03:58.713 --> 00:04:01.720
This is exactly what JSON is made for.

58
00:04:04.230 --> 00:04:08.160
So, the symbols that you need to
get used to are these arrow types.

59
00:04:10.660 --> 00:04:12.680
So let's just go ahead and
go write one right now.

60
00:04:12.680 --> 00:04:19.400
So we're going to say select, content,
which is the name of the JSON.

61
00:04:22.440 --> 00:04:28.080
Column, right content, this one here,
but I'm going to put minus and

62
00:04:28.080 --> 00:04:34.940
then I'm gonna put angle bracket now,
my font here puts these down as one glyph.

63
00:04:34.940 --> 00:04:39.410
But just know this is actually it's
my font combining them into one.

64
00:04:39.410 --> 00:04:40.200
glyph right.

65
00:04:40.200 --> 00:04:41.790
This is with the.

66
00:04:41.790 --> 00:04:44.650
Cascadia code is a free
font put out by Microsoft.

67
00:04:46.366 --> 00:04:48.090
So that's what that arrow means.

68
00:04:48.090 --> 00:04:49.455
It just makes it more readable for me.

69
00:04:51.064 --> 00:04:53.540
And then I want to select the type here,
right?

70
00:04:53.540 --> 00:04:56.080
So this is something inside
of that JSON object.

71
00:04:56.080 --> 00:05:01.160
So I'm going to select type Form.

72
00:05:02.610 --> 00:05:09.625
Which under store content so now this is
going to go through each one of these and

73
00:05:09.625 --> 00:05:15.440
it grabs out pole and video and
pull Image and Image, right?

74
00:05:15.440 --> 00:05:20.202
Which makes sense if you look at
these pull video pull image and

75
00:05:20.202 --> 00:05:24.610
the question mark column there
We didn't give it a name.

76
00:05:25.680 --> 00:05:31.260
But we can go in here and
say as you know, content type right?

77
00:05:31.260 --> 00:05:34.126
And now it's actually called content type
look a little bit more readable, right?

78
00:05:37.129 --> 00:05:37.667
This is great.

79
00:05:37.667 --> 00:05:41.160
This is really cool when we're now
querying JSON out of Postgres.

80
00:05:41.160 --> 00:05:44.060
Another thing that this will do for
you this JSON data type,

81
00:05:44.060 --> 00:05:46.790
it will enforce that you're
putting in proper JSON.

82
00:05:46.790 --> 00:05:50.570
So if you try and Feed it like
a string of not well formed JSON,

83
00:05:50.570 --> 00:05:53.550
it will rebel and say,
no, you won't do this.

84
00:05:53.550 --> 00:05:55.480
This must be valid JSON.

85
00:05:55.480 --> 00:06:00.246
Let's fathom for a moment that I'm making
some sort of like drop down selector for

86
00:06:00.246 --> 00:06:03.970
my rich, you know,
experience to create these rich content.

87
00:06:03.970 --> 00:06:06.737
And I want to have a drop down of all
the various different types that I

88
00:06:06.737 --> 00:06:08.270
can support.

89
00:06:08.270 --> 00:06:09.080
Well, I could do this.

90
00:06:09.080 --> 00:06:11.180
This is exactly what I did.

91
00:06:11.180 --> 00:06:12.360
But I have image in here twice.

92
00:06:12.360 --> 00:06:13.120
I have pulled her twice.

93
00:06:13.120 --> 00:06:17.160
It'd be nice if I could just
select the distinct ones right?

94
00:06:17.160 --> 00:06:18.144
Well, lo and

95
00:06:18.144 --> 00:06:24.150
behold there's something unsurprisingly
called select distinct like this.

96
00:06:29.390 --> 00:06:33.746
And actually that that's a problem and
I meant to show you that so

97
00:06:33.746 --> 00:06:38.670
what distinct does is like alright
distill this down to just the ones that

98
00:06:38.670 --> 00:06:43.671
are you know the same one so what we wanna
get back as poll video and image and

99
00:06:43.671 --> 00:06:49.110
we wanna leave out the duplicate so
we wanna D duplicate this set.

100
00:06:49.110 --> 00:06:53.765
It'd be nice if we could do,
this, but the problem is that

101
00:06:53.765 --> 00:06:58.900
the type that you get back here,
we assume that this is a string.

102
00:06:58.900 --> 00:07:01.510
It looks like a string here,
but the problem is,

103
00:07:01.510 --> 00:07:05.855
is it's actually not correct quite still
actually a JSON blackbox to postgres.

104
00:07:05.855 --> 00:07:06.925
It doesn't know what to do with these.

105
00:07:06.925 --> 00:07:10.651
You can see here it says, I don't have an
equality operator from type JSON because

106
00:07:10.651 --> 00:07:14.323
it doesn't know what it is and refuses to
tell you what it is because it just won't

107
00:07:14.323 --> 00:07:17.640
it doesn't know It could be something
different from every single one.

108
00:07:18.740 --> 00:07:21.276
Now we could do something
like this where we say cast,

109
00:07:26.035 --> 00:07:29.770
Type, as text.

110
00:07:29.770 --> 00:07:34.020
Like that, and this will say,
hey, postgres, I'm positive.

111
00:07:34.020 --> 00:07:37.765
What's coming out of here is text us
all the text operations here, and

112
00:07:37.765 --> 00:07:39.170
that'll end up working.

113
00:07:41.580 --> 00:07:42.180
Right?

114
00:07:42.180 --> 00:07:43.220
And that's what this does.

115
00:07:43.220 --> 00:07:43.930
Now it works.

116
00:07:43.930 --> 00:07:45.210
Now we're getting distinct.

117
00:07:45.210 --> 00:07:46.030
Just so you know.

118
00:07:46.030 --> 00:07:49.650
This is the first time I'm showing you
distinct but distinct works everywhere.

119
00:07:49.650 --> 00:07:53.550
Select distinct just will d
duplicate whatever returns to you.

120
00:07:53.550 --> 00:07:57.110
So, This is burdensome, right?

121
00:07:57.110 --> 00:08:00.733
This would be nice if we could just
get it as text in the first place and

122
00:08:00.733 --> 00:08:04.040
we didn't have to do this
all this casting business.

123
00:08:04.040 --> 00:08:10.417
Well, you can if you put
a second angle bracket there,

124
00:08:10.417 --> 00:08:16.009
which again, I promise you, this is three
glyphs together if A minus sign and

125
00:08:16.009 --> 00:08:21.770
two angle brackets, which my font
combines into this pretty arrow.

126
00:08:21.770 --> 00:08:24.472
And it's just saying,
whatever you select out of this,

127
00:08:24.472 --> 00:08:26.170
just cast it as a text immediately.

128
00:08:26.170 --> 00:08:27.304
And you can see there,

129
00:08:27.304 --> 00:08:30.959
it does actually end up doing that you
can see it even lacks those quotes.

130
00:08:32.620 --> 00:08:36.330
Again, this is Postgres saying,
I don't know what comes out of JSON.

131
00:08:36.330 --> 00:08:39.340
I don't you have to tell me explicitly
what is coming out of JSON or

132
00:08:39.340 --> 00:08:40.833
I don't know what to do with it.

133
00:08:44.300 --> 00:08:46.040
Whereas this one is just saying.

134
00:08:47.900 --> 00:08:51.815
I know this is text cast it as text,
because you have to imagine, I mean,

135
00:08:51.815 --> 00:08:53.560
let's let's do this, right.

136
00:08:53.560 --> 00:08:59.502
If I Select content if
I select dimensions.

137
00:09:04.864 --> 00:09:06.660
These ones don't have dimensions.

138
00:09:06.660 --> 00:09:09.527
If you go back and
look at these up here Images and

139
00:09:09.527 --> 00:09:12.550
videos have dimensions polls do not.

140
00:09:12.550 --> 00:09:15.710
So these come back as no and
these come back as objects.

141
00:09:15.710 --> 00:09:16.630
And this is Postgres.

142
00:09:16.630 --> 00:09:18.960
Just saying,
I will give you whatever you ask for.

143
00:09:18.960 --> 00:09:21.570
But if you asked me to do competitors and
operations in addition and

144
00:09:21.570 --> 00:09:24.270
stuff like that, you got to tell
me a friend, I'm getting a string,

145
00:09:24.270 --> 00:09:26.650
I'm getting a number, that kind of stuff.

146
00:09:26.650 --> 00:09:31.670
&gt;&gt; It does the output from Postgres,
say five rows and Wi Fi, were returned.

147
00:09:31.670 --> 00:09:33.816
No values comes as rows discuss?

148
00:09:33.816 --> 00:09:34.670
&gt;&gt; Yeah.

149
00:09:34.670 --> 00:09:36.080
So in this particular case.

150
00:09:38.150 --> 00:09:41.181
There's these two poles don't
have heights and widths, but

151
00:09:41.181 --> 00:09:44.630
they still get returned cuz we're
not trying it to exclude anything.

152
00:09:44.630 --> 00:09:46.450
So it's gonna return
something from everything.

153
00:09:46.450 --> 00:09:48.070
And it just won't return.

154
00:09:48.070 --> 00:09:49.570
It'll return null for those ones.

155
00:09:49.570 --> 00:09:51.300
So this is a no.

156
00:09:51.300 --> 00:09:56.436
So if you wanted to get from

157
00:09:56.436 --> 00:10:01.808
rich content where content

158
00:10:01.808 --> 00:10:08.814
dimensions think you have to do this

159
00:10:08.814 --> 00:10:14.370
is not no and there you go.

160
00:10:14.370 --> 00:10:18.600
So you have to tell us like specifically,
I don't want any North things back.

161
00:10:18.600 --> 00:10:20.570
That makes sense.

162
00:10:22.040 --> 00:10:22.540
&gt;&gt; Thank you.

163
00:10:22.540 --> 00:10:23.350
&gt;&gt; Yep.

164
00:10:23.350 --> 00:10:24.030
Good question.

165
00:10:24.030 --> 00:10:24.693
Other questions.

166
00:10:29.726 --> 00:10:38.840
All righty Like you kind of spoiled
my next little section there.

167
00:10:38.840 --> 00:10:40.430
So thanks for that.

168
00:10:40.430 --> 00:10:41.080
Just kidding.

169
00:10:41.080 --> 00:10:42.570
That's a good question.

170
00:10:42.570 --> 00:10:46.906
But what I wanna do right now I want
to go and select all the heights and

171
00:10:46.906 --> 00:10:50.040
widths for
things that have heights and widths.

172
00:10:51.520 --> 00:10:57.210
So what I want to do is I
want to say select content.

173
00:10:59.690 --> 00:11:01.639
Then I want to select from dimensions.

174
00:11:02.990 --> 00:11:05.590
Because notice that that's nested, right?

175
00:11:05.590 --> 00:11:09.307
And inside of 'dimensions'
I wanna get height,

176
00:11:14.140 --> 00:11:16.393
Height' As height.

177
00:11:18.341 --> 00:11:22.650
So notice the first one here,
this one, I'm using a single arrow.

178
00:11:22.650 --> 00:11:24.246
Cuz I still want the JSON object,

179
00:11:24.246 --> 00:11:27.380
I still wanna do I want to
access something deeper in it.

180
00:11:27.380 --> 00:11:29.220
So I do single error here.

181
00:11:29.220 --> 00:11:33.982
And then here, I know this is
the terminal of this particular,j

182
00:11:33.982 --> 00:11:36.880
ason tree that I'm traversing.

183
00:11:36.880 --> 00:11:38.390
So I'm asking for the height back.

184
00:11:38.390 --> 00:11:42.980
This will give me the height back as
a string, and I'm using that as height.

185
00:11:44.410 --> 00:11:49.297
We'll do the same thing for a width.

186
00:11:55.192 --> 00:12:00.747
I need to do dimensions,

187
00:12:00.747 --> 00:12:06.840
dimensions width as with.

188
00:12:06.840 --> 00:12:12.990
Okay, from rich underscore

189
00:12:12.990 --> 00:12:16.834
content where and

190
00:12:16.834 --> 00:12:21.958
this is where I'm going

191
00:12:21.958 --> 00:12:27.416
to say content is not no.

192
00:12:27.416 --> 00:12:35.960
So where content dimensions is not Nmo.

193
00:12:38.270 --> 00:12:42.123
And here you can see, this will give me
back all of the dimensions of my various

194
00:12:42.123 --> 00:12:44.200
images and videos that have them.

195
00:12:44.200 --> 00:12:46.320
t's going to exclude all the polls
that don't have dimensions

196
00:12:46.320 --> 00:12:47.120
associated with them.

197
00:12:48.720 --> 00:12:51.120
But I wanted to show you here,
this is how you do multi level,

198
00:12:51.120 --> 00:12:53.636
right because these things can
have multiple layers of depth.

199
00:12:53.636 --> 00:12:56.243
They can have arrays, they can have
all sorts of stuff as well and

200
00:12:56.243 --> 00:12:57.220
this is how you do that.

201
00:13:01.030 --> 00:13:06.150
And what I was originally
intending to do just put in here.

202
00:13:08.620 --> 00:13:09.910
Fine, I can do that.

203
00:13:12.630 --> 00:13:15.290
Comment ID and
this will give you back as well.

204
00:13:15.290 --> 00:13:16.240
The comment ID.

