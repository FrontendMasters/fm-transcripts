WEBVTT

1
00:00:00.850 --> 00:00:06.326
Let's build a quick node JS app
with Postgres instead of MongoDB.

2
00:00:06.326 --> 00:00:08.580
It's going to look and feel very similar.

3
00:00:08.580 --> 00:00:11.252
In fact, we're going to use
pretty much the same front end.

4
00:00:11.252 --> 00:00:16.704
Our very beautiful,
well-crafted bare bones HTML.

5
00:00:16.704 --> 00:00:20.727
So again, just wanna call out,
you can access all the samples here.

6
00:00:20.727 --> 00:00:24.170
If you click on this, you can see here,
there's the Postgres SQL one.

7
00:00:24.170 --> 00:00:27.011
All of the code for
what we're about to do is here.

8
00:00:27.011 --> 00:00:30.048
So if you don't wanna write the code along
with me, feel free to just copy it and

9
00:00:30.048 --> 00:00:30.753
take a look at it.

10
00:00:33.220 --> 00:00:36.971
So let's go back to our command line.

11
00:00:36.971 --> 00:00:40.213
I'm gonna open a new terminal
on my host computer.

12
00:00:40.213 --> 00:00:42.060
So I have a MongoDB sample here.

13
00:00:42.060 --> 00:00:49.795
I'm going to make a directory
of postgresql-sample and

14
00:00:49.795 --> 00:00:53.346
cd into that npm init-y.

15
00:00:56.950 --> 00:00:59.595
I wanna say npm install express 4.17.1.

16
00:00:59.595 --> 00:01:04.396
And then we're also going to install pg,

17
00:01:04.396 --> 00:01:11.540
which is the name of the driver for
Postgres, @8.4.1.

18
00:01:12.940 --> 00:01:17.241
Now again,
you can use an ORM for Postgres,

19
00:01:17.241 --> 00:01:21.782
there is connects,
there is a couple of them.

20
00:01:21.782 --> 00:01:22.829
I do not use them.

21
00:01:22.829 --> 00:01:26.056
So I do not know but
you feel free to use an ORM.

22
00:01:26.056 --> 00:01:28.639
We are just going to
query Postgres directly.

23
00:01:28.639 --> 00:01:30.519
So install that, it should go pretty fast.

24
00:01:35.220 --> 00:01:37.119
Make a directory of static.

25
00:01:40.802 --> 00:01:44.886
I'm just gonna copy from

26
00:01:44.886 --> 00:01:49.557
the mongodb sample static,

27
00:01:51.730 --> 00:01:55.648
index.html, and I'm gonna put
that into my static directory.

28
00:01:55.648 --> 00:01:58.924
Because we're going to be using literally
the same front end we're just going to

29
00:01:58.924 --> 00:01:59.850
change some strings.

30
00:01:59.850 --> 00:02:05.332
And then you can go ahead and
touch server.js install.

31
00:02:05.332 --> 00:02:09.919
And then we'll open code to this.

32
00:02:09.919 --> 00:02:14.864
So here in this index.html,
this instead of being

33
00:02:14.864 --> 00:02:20.180
a MongoDB app,
this is going to be a Postgres app.

34
00:02:20.180 --> 00:02:24.861
And instead of being the search here,
we're going to put this as Board ID.

35
00:02:28.569 --> 00:02:30.683
And other than that,
this is going to work exactly the same.

36
00:02:30.683 --> 00:02:35.400
What's going to call a get, that's going
to put a search.value in there and

37
00:02:35.400 --> 00:02:38.957
then it's going to return to
us whatever the API returns,

38
00:02:38.957 --> 00:02:42.310
which is what we're going to
grab out of the database.

39
00:02:45.840 --> 00:02:51.463
So save that and

40
00:02:51.463 --> 00:02:55.792
here we go.

41
00:02:55.792 --> 00:03:00.784
Let's go open our server.js and

42
00:03:00.784 --> 00:03:06.845
say const express = require express and

43
00:03:06.845 --> 00:03:12.014
const Pool capital P with the curly

44
00:03:12.014 --> 00:03:17.198
braces around it, = require pg.

45
00:03:17.198 --> 00:03:19.226
So what is pool?

46
00:03:19.226 --> 00:03:24.204
Pool, what I'm gonna do for
this whole project as well,

47
00:03:24.204 --> 00:03:30.022
I use prettier a lot just to keep
everything really prim and clean.

48
00:03:30.022 --> 00:03:35.213
So I'm gonna create a new file here,

49
00:03:35.213 --> 00:03:38.233
called .prettier.

50
00:03:42.132 --> 00:03:45.031
Prettierrc, yes.

51
00:03:45.031 --> 00:03:49.510
Put an empty object here and now whenever
I save these things, it's gonna fix them.

52
00:03:49.510 --> 00:03:55.993
The extension you need for
that if you wanna do it is Prettier,

53
00:03:55.993 --> 00:04:02.363
this one code forward matter and
then just to format on Save.

54
00:04:02.363 --> 00:04:05.745
Okay, so if you see my code
rearranging and looking neater for

55
00:04:05.745 --> 00:04:09.661
you that's that's why, otherwise
it ends up looking a little gross.

56
00:04:09.661 --> 00:04:12.732
So let's talk about pool for
just a second.

57
00:04:12.732 --> 00:04:17.637
Whereas MongoDB was kinda managing
all of our connections for

58
00:04:17.637 --> 00:04:22.443
us with Postgres, the way that
it does is it creates a bunch of

59
00:04:22.443 --> 00:04:27.932
connections from your server to Postgres,
and then it reuses them.

60
00:04:27.932 --> 00:04:31.872
So as soon as you say connect this it'll
give you actually an old connection so

61
00:04:31.872 --> 00:04:33.822
that you can be instantly connected.

62
00:04:33.822 --> 00:04:38.110
And that way in the process, if we're
using them, one, you don't overwhelm your

63
00:04:38.110 --> 00:04:41.251
Postgres server with a bunch of open and
close connections.

64
00:04:41.251 --> 00:04:44.002
And two, your connections will end up
being faster because it doesn't actually

65
00:04:44.002 --> 00:04:45.100
have to do the handshake again.

66
00:04:45.100 --> 00:04:47.493
It's actually already,
still connected to Postgres.

67
00:04:47.493 --> 00:04:48.502
So that's what a pool is.

68
00:04:48.502 --> 00:04:52.024
It's a pool of connections,
hence why the term pool comes from.

69
00:04:53.854 --> 00:04:58.102
So we're going to say
constant pool = new Pool.

70
00:05:00.063 --> 00:05:03.510
And let's it's give it
a connection string.

71
00:05:05.090 --> 00:05:07.458
And our connection strings
going to look like this.

72
00:05:07.458 --> 00:05:14.151
Postgresqul://Postgres, which is the name
of our user, we didn't change it.

73
00:05:14.151 --> 00:05:17.837
So by default the name
username is Postgres colon,

74
00:05:17.837 --> 00:05:21.080
whatever you called your secret password.

75
00:05:21.080 --> 00:05:24.682
I called mine, mysecretpassword.

76
00:05:24.682 --> 00:05:27.870
So if you just follow it
along with me just go with

77
00:05:27.870 --> 00:05:33.078
mysecretpassword@localhost:532, which
is the port that we're on.

78
00:05:33.078 --> 00:05:37.362
And then you want to connect to a specific

79
00:05:37.362 --> 00:05:42.535
database which is going
to be message_boards.

80
00:05:42.535 --> 00:05:45.360
So this needs to be the name
of whatever you have.

81
00:05:45.360 --> 00:05:50.430
Where's my, here, right,
this is the name of the database.

82
00:05:50.430 --> 00:05:54.820
For some of you, if you didn't change it,
it might say Postgres here.

83
00:05:54.820 --> 00:05:58.934
If you see Postgres here,
then put Postgres here.

84
00:06:01.183 --> 00:06:03.870
Right, that's the name of the database
that you've been writing to.

85
00:06:06.231 --> 00:06:10.011
If you see message_boards here,
then put message_boards there.

86
00:06:10.011 --> 00:06:11.673
It's just important those things match up,

87
00:06:11.673 --> 00:06:13.472
cuz it's gonna connect
to a specific database.

88
00:06:17.840 --> 00:06:21.103
Okay, so that's our connection string.

89
00:06:21.103 --> 00:06:25.905
Again, this is something that you'd use
some sort of like secret manager like

90
00:06:25.905 --> 00:06:27.371
Key Vault to deal with.

91
00:06:27.371 --> 00:06:32.042
And then we're gonna have
an async init function,

92
00:06:35.127 --> 00:06:38.801
init, and then immediately after we
define the init, we're gonna call it.

93
00:06:43.722 --> 00:06:47.402
So const app = express.

94
00:06:50.765 --> 00:06:55.917
Then we're gonna say app.get.

95
00:06:57.893 --> 00:07:02.738
We define a route called /get,

96
00:07:02.738 --> 00:07:11.360
define an async function to
deal with this, rec and rez.

97
00:07:13.492 --> 00:07:20.829
Okay const client = await pool.connect.

98
00:07:20.829 --> 00:07:23.270
So this is how we're gonna get
a client back from the pool.

99
00:07:23.270 --> 00:07:24.706
We're gonna say, hey, pool connect me.

100
00:07:24.706 --> 00:07:28.222
If it has one to give to you it's like,
all right, here you go, here's a client.

101
00:07:28.222 --> 00:07:31.473
If it doesn't have one available for
you, it'll make a new connection and

102
00:07:31.473 --> 00:07:32.562
then hand you that back.

103
00:07:32.562 --> 00:07:36.480
So that's why we have to wait for
it to give us back a connection.

104
00:07:36.480 --> 00:07:39.314
Let's say we wanna give it a,

105
00:07:41.882 --> 00:07:45.412
Query where we wanna get the data back for
a board, right?

106
00:07:45.412 --> 00:07:49.684
So if someone goes to the board 39 we
wanna know that it's called the coffee

107
00:07:49.684 --> 00:07:54.039
board, for example, and we wanna know
the description of the coffee board.

108
00:07:54.039 --> 00:07:56.691
And then we also wanna know all of
the comments that are on the coffee board.

109
00:07:56.691 --> 00:07:58.262
So we're gonna actually do two queries,
right?

110
00:07:58.262 --> 00:08:01.362
We're gonna do one to get the data for
the board,

111
00:08:01.362 --> 00:08:03.940
and one to get the data for the comments.

112
00:08:05.560 --> 00:08:08.970
We could accomplish this in one
query if we did an inner join.

113
00:08:08.970 --> 00:08:13.827
But that would mean that we'd be sending
back a lot of copies of all of the various

114
00:08:13.827 --> 00:08:16.884
different board data,
we don't want to do that.

115
00:08:16.884 --> 00:08:22.532
Let's just make this two queries at this,
that would be more effective.

116
00:08:22.532 --> 00:08:24.880
So I'm gonna say client,
let's do it this way.

117
00:08:24.880 --> 00:08:28.744
We're gonna do two queries at once.

118
00:08:28.744 --> 00:08:35.787
We're gonna do one that gets back
comment response and board response.

119
00:08:38.428 --> 00:08:42.490
Okay, and then we're going
to do = await Promise.all.

120
00:08:42.490 --> 00:08:46.792
promise.all takes in multiple promises and

121
00:08:46.792 --> 00:08:51.443
then won't finish until
everything finishes.

122
00:08:51.443 --> 00:08:56.835
In this particular case we want to
send two queries at the same time.

123
00:08:56.835 --> 00:09:01.023
One for, yeah, one for each of those
things that we're going to query for.

124
00:09:01.023 --> 00:09:06.528
So for the first one we say, client.query.

125
00:09:06.528 --> 00:09:10.219
Here we go, SELECT *

126
00:09:10.219 --> 00:09:15.756
FROM COMMENTS NATURAL LEFT JOIN

127
00:09:15.756 --> 00:09:21.706
rich_content right because if we

128
00:09:21.706 --> 00:09:27.652
want to get all the rich content for

129
00:09:27.652 --> 00:09:34.440
those comments WHERE BOARD ID = $1.

130
00:09:34.440 --> 00:09:40.427
Okay, then afterwards we're

131
00:09:40.427 --> 00:09:45.491
going to provide a array,

132
00:09:45.491 --> 00:09:50.567
so rec.query.search.

133
00:09:50.567 --> 00:09:52.081
So let's talk about this for a second.

134
00:09:54.785 --> 00:09:58.440
This is saying wherever the $1
is replace that in here.

135
00:09:58.440 --> 00:10:02.115
So the rec.query.search
is going to be put here.

136
00:10:03.445 --> 00:10:04.649
Why are we doing that?

137
00:10:04.649 --> 00:10:08.628
This is called parameterised queries.

138
00:10:08.628 --> 00:10:13.079
The reason why we're doing this is
if we put this directly in there,

139
00:10:13.079 --> 00:10:17.622
we're gonna have a huge problem
with what's called SQL injection.

140
00:10:17.622 --> 00:10:20.041
I'm gonna show you how to do
that here in just a second.

141
00:10:20.041 --> 00:10:22.790
But for now, just follow along
with my lead right there.

142
00:10:25.830 --> 00:10:29.042
Put in our second query here client.query.

143
00:10:31.517 --> 00:10:36.146
SELECT * FROM boards

144
00:10:36.146 --> 00:10:41.293
WHERE board ID = $1.

145
00:10:41.293 --> 00:10:48.230
Same thing here,
it's a parameterised query there as well.

146
00:10:57.190 --> 00:10:59.839
Okay, so now we're gonna have two
responses here, we're goona have one for

147
00:10:59.839 --> 00:11:00.912
the board one for the comment.

148
00:11:05.019 --> 00:11:11.081
Wait, this is supposed
to be inside of here.

149
00:11:11.081 --> 00:11:15.111
So I just moved this highlighted
block inside of the app.get.

150
00:11:15.111 --> 00:11:18.140
So every time that app.get gets called
this is what we want to cause accidentally

151
00:11:18.140 --> 00:11:18.949
doing outside of it.

152
00:11:22.903 --> 00:11:27.085
So again,
all of that's inside I just copied and

153
00:11:27.085 --> 00:11:30.658
pasted that inside of the app.get here.

154
00:11:35.757 --> 00:11:39.944
Now, all we need to do is send this
back to the client with a res.json.

155
00:11:42.480 --> 00:11:49.265
And we're gonna give back the status ok.

156
00:11:49.265 --> 00:11:57.360
We're going to give back the board
with boardRes.rows0, right?

157
00:11:57.360 --> 00:12:03.277
Because we either want to give it back
the one board response we're going

158
00:12:03.277 --> 00:12:08.713
to get cuz there's gonna be exactly
one board or nothing, right?

159
00:12:08.713 --> 00:12:12.970
If someone gives something that's out of
bounds, we just want to give back nothing.

160
00:12:12.970 --> 00:12:17.837
And then here where we want to save posts,

161
00:12:17.837 --> 00:12:23.540
we just want to return
commentsRes.rows here or

162
00:12:23.540 --> 00:12:27.865
we can give them back an empty array.

163
00:12:27.865 --> 00:12:30.334
This actually will never
be an empty array.

164
00:12:30.334 --> 00:12:35.314
It will never be undefined,
it'll always be an empty array.

165
00:12:35.314 --> 00:12:39.250
So this is actually superfluous.

166
00:12:39.250 --> 00:12:44.650
We can just put that and
that'll work just the same.

167
00:12:45.918 --> 00:12:52.540
Okay, so now outside of this app.get,
so outside of this one here,

168
00:12:52.540 --> 00:12:56.879
let's say const PORT = 3000 app.use,

169
00:12:56.879 --> 00:13:03.178
same kind of thing we did last
time express.static./static.

170
00:13:06.587 --> 00:13:12.389
App.listenon(PORT) and

171
00:13:12.389 --> 00:13:17.465
console.log running on

172
00:13:17.465 --> 00:13:25.928
http://localhost:PORT like that.

173
00:13:30.493 --> 00:13:37.868
All right, so here we go,
let's see if this works.

174
00:13:37.868 --> 00:13:43.199
I'm gonna open my terminal here and
I'm going to say node server.js.

175
00:13:43.199 --> 00:13:45.712
It's running on port 3000.

176
00:13:45.712 --> 00:13:50.950
Get a nice little front end here,
put in number 39, click Search.

177
00:13:50.950 --> 00:13:53.700
And this should have returned already,
so what happened?

178
00:13:55.210 --> 00:13:58.715
Here we can see it's not working.

179
00:14:03.733 --> 00:14:05.743
Where'd my code go, here.

180
00:14:09.520 --> 00:14:11.866
So I'm getting an unhandled promise error.

181
00:14:16.744 --> 00:14:20.163
CommentRes is not defined.

182
00:14:20.163 --> 00:14:25.310
CommentRes and I put commentRes.

183
00:14:25.310 --> 00:14:30.134
So yeah, I called this
commentsRes in this commentRes,

184
00:14:30.134 --> 00:14:36.071
you just got to make sure that
they're called the same variable name.

185
00:14:36.071 --> 00:14:37.814
So I'll stop and start my server again.

186
00:14:37.814 --> 00:14:42.054
It doesn't automatically refresh
your code so you have to stop and

187
00:14:42.054 --> 00:14:43.881
start it every single time.

188
00:14:43.881 --> 00:14:50.108
And let's go back to where's my Firefox,
refresh the page, search and there we go.

189
00:14:50.108 --> 00:14:52.764
So you can see we get status ok.

190
00:14:52.764 --> 00:14:54.603
Board, this is the board information.

191
00:14:54.603 --> 00:14:56.071
It's the coffee board.

192
00:14:56.071 --> 00:14:57.052
It's got a board description.

193
00:14:59.986 --> 00:15:02.454
And you can see here,
here are all the comments.

194
00:15:05.327 --> 00:15:09.554
And you can see here some of these
have polls attached to them,

195
00:15:09.554 --> 00:15:13.970
some of them have YouTube videos,
all sorts of fun stuff.

196
00:15:13.970 --> 00:15:20.281
One of the things I'll throw out here
is that I did the join on rich content.

197
00:15:20.281 --> 00:15:25.280
You'll notice that some of these,
see if I can show you one of them.

198
00:15:25.280 --> 00:15:28.780
Yeah, comment id 351 351.

199
00:15:28.780 --> 00:15:34.552
This thing had two different
rich content associated with it.

200
00:15:34.552 --> 00:15:36.223
So it actually returns this twice, right?

201
00:15:36.223 --> 00:15:40.172
Because it's doing that join.

202
00:15:40.172 --> 00:15:43.456
In my code, I'd have to go through and
de-duplicate this down into one thing or

203
00:15:43.456 --> 00:15:45.129
aggregate them in some particular way.

204
00:15:45.129 --> 00:15:52.336
You could do some sort of like group by,
without would be possible as well.

205
00:15:52.336 --> 00:15:54.967
I just didn't do that right now, just in
your code, you would have to handle two

206
00:15:54.967 --> 00:15:57.580
different comment IDs coming back with
both different kinds of rich content.

