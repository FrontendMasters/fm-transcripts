WEBVTT

1
00:00:00.136 --> 00:00:02.706
There's two more data types
that I just wanna talk about,

2
00:00:02.706 --> 00:00:03.865
just at a very high level.

3
00:00:03.865 --> 00:00:06.267
I'm not gonna show you how to
operate on them but you can go,

4
00:00:06.267 --> 00:00:09.025
I left links in the docs here that
you can go check out how to use them.

5
00:00:09.025 --> 00:00:15.172
The first of them is HyperLogLog,
which I just love the name.

6
00:00:15.172 --> 00:00:18.884
So it's often abbreviated HLLs.

7
00:00:18.884 --> 00:00:24.670
So in another one of my courses, the four
semesters of computer science part 2,

8
00:00:24.670 --> 00:00:27.748
I talk about a thing called Bloom filters.

9
00:00:27.748 --> 00:00:33.968
So Bloom filters these kind of things
where you can add things to it and

10
00:00:33.968 --> 00:00:39.664
they're very fast for lookups but
they have a margin of error.

11
00:00:39.664 --> 00:00:43.804
This is great for
extremely large data sets

12
00:00:43.804 --> 00:00:48.522
where you have a tolerance for
false positives.

13
00:00:48.522 --> 00:00:54.751
So HyperLogLogs are actually that same
idea implemented inside of Redis.

14
00:00:54.751 --> 00:00:57.686
It doesn't use Bloom filters it uses
something called the HyperLogLog.

15
00:00:57.686 --> 00:00:59.896
I don't know why they're called that.

16
00:00:59.896 --> 00:01:02.186
Did I put that in there?

17
00:01:02.186 --> 00:01:03.026
No, I didn't.

18
00:01:03.026 --> 00:01:04.516
So anyway, you can probably
go search through the docs.

19
00:01:04.516 --> 00:01:09.172
It's another way of doing these
kind of Bloom filter type of ideas.

20
00:01:09.172 --> 00:01:13.150
And the nice thing about
HyperLogLogs versus Bloom filters.

21
00:01:13.150 --> 00:01:17.296
Bloom filters can have very
high margins of error up to 30,

22
00:01:17.296 --> 00:01:19.342
20% something like that.

23
00:01:19.342 --> 00:01:23.981
HyperLogLogs is like
a 0.8% margin of error.

24
00:01:23.981 --> 00:01:29.622
So let me just give you an example of
when you might use something like this.

25
00:01:29.622 --> 00:01:33.885
There's a great article from medium and
when they used Bloom

26
00:01:33.885 --> 00:01:38.666
filters on medium.com of when to
recommend a new article to a user.

27
00:01:38.666 --> 00:01:42.375
What they'll use a Bloom filter to say,
should I show this or

28
00:01:42.375 --> 00:01:45.231
should I recommend this
article to this user?

29
00:01:45.231 --> 00:01:48.778
And they'll use a Bloom filter to
determine whether or not they should or

30
00:01:48.778 --> 00:01:50.533
should not show that to the person.

31
00:01:50.533 --> 00:01:52.026
Whenever a user has read an article,

32
00:01:52.026 --> 00:01:55.022
they don't wanna recommend to that
user again to read that same article.

33
00:01:55.022 --> 00:01:58.774
So what they do is they add it to
this Bloom filter, or in this case,

34
00:01:58.774 --> 00:02:00.785
they could add it to HyperLogLogs.

35
00:02:00.785 --> 00:02:03.063
And sometimes it's going to tell them,

36
00:02:03.063 --> 00:02:07.620
this user has read this article when in
fact that user hasn't read that article.

37
00:02:07.620 --> 00:02:11.955
But the consequence of that false positive
is that that particular user won't be

38
00:02:11.955 --> 00:02:15.857
recommended an article that they
haven't read before, which is fine.

39
00:02:15.857 --> 00:02:20.203
Because they'll just get recommended
another article that they

40
00:02:20.203 --> 00:02:22.580
definitely haven't read before.

41
00:02:22.580 --> 00:02:24.789
It's kind of a strange thing.

42
00:02:24.789 --> 00:02:30.819
But the trade off here is with having
some tolerance for that false positive,

43
00:02:30.819 --> 00:02:36.038
you're able to go way faster and
have much less memory footprint.

44
00:02:36.038 --> 00:02:37.405
So, that's what that is.

45
00:02:37.405 --> 00:02:41.854
If it's a little weird, because it's
weird, someday in the future, you might

46
00:02:41.854 --> 00:02:46.971
have that, it's like, this is the perfect
time I've been waiting my whole damn life.

47
00:02:46.971 --> 00:02:50.908
I wanna use a HyperLogLog or
that moment may never come and

48
00:02:50.908 --> 00:02:56.089
I'm sorry that you won't have such
a glorious moment with HyperLogLogs.

49
00:02:56.089 --> 00:02:58.755
Okay, so that's HyperLogLogs.

50
00:02:58.755 --> 00:03:00.007
The other thing is Streams.

51
00:03:00.007 --> 00:03:04.831
These are much more newer to Redis and
I have not personally used them.

52
00:03:04.831 --> 00:03:09.882
But it's basically something you can do
pub sub, so publish subscribe with Redis.

53
00:03:09.882 --> 00:03:16.473
You can subscribe to a key where something
can be publishing new things to that key.

54
00:03:16.473 --> 00:03:22.048
And then using a Stream, you can just be
continually reading things out of Redis.

55
00:03:22.048 --> 00:03:26.838
So it's basically you can subscribe
into like a read only Stream and

56
00:03:26.838 --> 00:03:28.189
get keys out of it.

57
00:03:28.189 --> 00:03:31.721
So the example that they
use is like logging, right?

58
00:03:31.721 --> 00:03:35.073
So if you're logging something from your
app service, you can log it to Redis.

59
00:03:35.073 --> 00:03:40.058
And you can have something else
subscribing to that continual logging

60
00:03:40.058 --> 00:03:41.415
of to that Stream.

61
00:03:43.141 --> 00:03:47.056
So, another good thing to do that would
be like reading from an IoT device so

62
00:03:47.056 --> 00:03:50.412
that if you have like a temperature
sensor, that's reading and

63
00:03:50.412 --> 00:03:52.977
getting a new reading
like every three minutes.

64
00:03:52.977 --> 00:03:56.811
You could be subscribed to that
temperature update through a Stream

65
00:03:56.811 --> 00:03:57.421
in Redis.

66
00:03:57.421 --> 00:03:59.389
I don't know if that's
how I would implement it.

67
00:03:59.389 --> 00:04:01.916
Obviously I haven't so
I can't really tell you but

68
00:04:01.916 --> 00:04:04.869
that is a data type that is
available to you in Redis as well.

