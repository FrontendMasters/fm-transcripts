WEBVTT

1
00:00:00.030 --> 00:00:01.725
So we're gonna get into updating Mongo DB.

2
00:00:01.725 --> 00:00:03.996
So, so far, we've just must have
been talking about reading and

3
00:00:03.996 --> 00:00:04.752
writing to Mongo DB.

4
00:00:04.752 --> 00:00:08.919
We're gonna be talking more about now,
how to do updates, deletes,

5
00:00:08.919 --> 00:00:10.600
those kinds of things.

6
00:00:10.600 --> 00:00:15.634
So the first, like we've already talked
about, insert one and insert many, right?

7
00:00:15.634 --> 00:00:19.785
Insert one is, I wanna insert one thing
into my database or my collection.

8
00:00:19.785 --> 00:00:20.572
Insert many is,

9
00:00:20.572 --> 00:00:24.580
I have an array of documents, I would like
to insert all of those into my collection.

10
00:00:25.770 --> 00:00:28.950
You'll also notice that there is
a function called insert, right?

11
00:00:28.950 --> 00:00:31.670
It's not insert one and
so many, but just insert,

12
00:00:31.670 --> 00:00:33.830
this is actually the old way of doing it.

13
00:00:33.830 --> 00:00:36.080
I would recommend to
not use insert anymore.

14
00:00:36.080 --> 00:00:38.814
I think it's also deprecated
according to MongoDB.

15
00:00:38.814 --> 00:00:42.251
It would intelligently decide if
you're trying to insert one or

16
00:00:42.251 --> 00:00:46.700
if you're trying to insert many,
depending on what you gave it.

17
00:00:46.700 --> 00:00:49.612
But what they found is that,
people were just messing things up and

18
00:00:49.612 --> 00:00:53.620
accidentally inserting too many or
accidentally and only inserting one thing.

19
00:00:53.620 --> 00:00:57.983
Normally, that way, they would try and
be to insert many objects, and

20
00:00:57.983 --> 00:01:02.290
they would actually end up inserting
one very, very large document.

21
00:01:03.850 --> 00:01:07.298
So they just recommend, tell MongoDB up
front you're trying to insert many or

22
00:01:07.298 --> 00:01:07.880
insert one.

23
00:01:07.880 --> 00:01:12.036
And this is true of all of the methods
when we talk about, there's a delete one,

24
00:01:12.036 --> 00:01:15.756
delete many, delete, just use
the delete one and the delete many, and

25
00:01:15.756 --> 00:01:17.450
same thing with update as well.

26
00:01:17.450 --> 00:01:19.580
Do the update, many or update one.

27
00:01:19.580 --> 00:01:21.881
So I'm not gonna show you again,
insert one and insert many,

28
00:01:21.881 --> 00:01:22.820
we already did that one.

29
00:01:22.820 --> 00:01:24.530
So we're gonna move on to updates.

30
00:01:26.990 --> 00:01:33.538
So the first one that we're gonna
do here is, we're gonna update one.

31
00:01:33.538 --> 00:01:39.715
So what I'm gonna do now is,
I'm gonna say db.pets.update1.

32
00:01:39.715 --> 00:01:45.061
So this is gonna work just like find one,
where it's going to find

33
00:01:45.061 --> 00:01:50.721
that the first one that it encounters,
I think it's by create date.

34
00:01:50.721 --> 00:01:53.330
It's going to update that one,
it's not gonna update anything else.

35
00:01:54.370 --> 00:01:58.240
So here, I'm gonna say, update one.

36
00:01:58.240 --> 00:02:00.750
And the first thing that you're
gonna give it is a query object.

37
00:02:00.750 --> 00:02:05.590
This is the exact same object that
you provide to find or find one or

38
00:02:05.590 --> 00:02:07.620
find many, right?

39
00:02:07.620 --> 00:02:11.792
Or there's no find many, it's just find.

40
00:02:11.792 --> 00:02:16.064
So I'm gonna say, find one that's a dog,
that's named Luna.

41
00:02:21.606 --> 00:02:24.158
And you don't have to put quotes there,
those quotes are optional,

42
00:02:24.158 --> 00:02:25.358
cuz it's JavaScript, right?

43
00:02:25.358 --> 00:02:31.373
Name, Luna, breed, Haveanease.

44
00:02:31.373 --> 00:02:36.456
So we're gonna find my Luna, okay?

45
00:02:36.456 --> 00:02:40.358
And then the second object
that you can provide to,

46
00:02:40.358 --> 00:02:46.003
is you're basically gonna tell MongoDB,
how do you want to update this?

47
00:02:46.003 --> 00:02:52.150
We wanna set her owner to me,
Brian Holt, dollar signs set.

48
00:02:52.150 --> 00:02:56.022
So this is going to be basically an object
that's gonna do like an object merge, or

49
00:02:56.022 --> 00:02:59.108
what is object at assign,
if you're familiar with JavaScript,

50
00:02:59.108 --> 00:03:00.646
that's how this is gonna work.

51
00:03:00.646 --> 00:03:05.479
So I'm gonna provide this
in another object, and

52
00:03:05.479 --> 00:03:09.515
I'm gonna give it an owner of Brian Holt,

53
00:03:15.192 --> 00:03:15.700
Okay?

54
00:03:17.860 --> 00:03:20.705
So let's just kind of break this down,
update one,

55
00:03:20.705 --> 00:03:24.080
you're gonna provide it a query object and
an update object.

56
00:03:24.080 --> 00:03:27.353
The first one is going to find
the record that you're trying to, or

57
00:03:27.353 --> 00:03:29.580
the document that you're trying to update.

58
00:03:29.580 --> 00:03:32.070
The second one is going to
tell it how to update it.

59
00:03:32.070 --> 00:03:37.807
So if I run this,
did I not include enough,

60
00:03:37.807 --> 00:03:41.200
that's what I did wrong.

61
00:03:41.200 --> 00:03:45.410
Hold on, I put too many curly braces.

62
00:03:45.410 --> 00:03:49.541
This seems to happen to me quite a bit,

63
00:03:49.541 --> 00:03:53.939
I'm just gonna copy and paste this one.

64
00:03:56.671 --> 00:03:58.638
I need to do that again.

65
00:03:58.638 --> 00:04:02.610
There we go, so
it'll give you acknowledged true,

66
00:04:02.610 --> 00:04:07.860
this is like, this was successful,
this actually did happen.

67
00:04:07.860 --> 00:04:11.490
It matched one thing which is good,
cuz that's what I asked for,

68
00:04:11.490 --> 00:04:13.539
update one and I modified one thing.

69
00:04:13.539 --> 00:04:17.418
So if I ran this again, you would notice
that it said, it matched one, but

70
00:04:17.418 --> 00:04:21.812
it didn't modify anything, because that
was already the way that it was, right?

71
00:04:25.313 --> 00:04:32.305
So now, if I change this from,
if I say db.pets.find,

72
00:04:32.305 --> 00:04:36.980
and I searched by owner, Brian Holt.

73
00:04:36.980 --> 00:04:43.100
You notice, it's only gonna return one.

74
00:04:43.100 --> 00:04:45.519
So a couple things that I've
demonstrated here, one,

75
00:04:45.519 --> 00:04:47.581
we just showed you how to do update one,
right?

76
00:04:47.581 --> 00:04:50.770
So that's gonna be updating
this one to be Brian Holt.

77
00:04:50.770 --> 00:04:54.349
But also notice that,
no other pet object or

78
00:04:54.349 --> 00:04:58.640
pet document in our
collection has an owner.

79
00:04:58.640 --> 00:05:02.550
I just made that one up on the flier,
that piece of schema, right?

80
00:05:02.550 --> 00:05:05.176
So that's what's really cool
about MongoDB, is like,

81
00:05:05.176 --> 00:05:08.180
if you wanna change the schema
of your collection, just do it.

82
00:05:08.180 --> 00:05:12.820
There's no pomp and
circumstance to do anything about this.

83
00:05:12.820 --> 00:05:15.303
You just go, and
you can change things on the fly.

84
00:05:17.629 --> 00:05:20.482
It's one of the superpowers of MongoDB,
it's also one of its downfalls,

85
00:05:20.482 --> 00:05:22.290
cuz it's really easy to mess this up,
right?

86
00:05:22.290 --> 00:05:26.514
Because it's not going to challenge you,
the guard rails are of,

87
00:05:26.514 --> 00:05:28.411
you can do whatever you want.

88
00:05:28.411 --> 00:05:31.047
So it's kind of a double
edged sword there.

89
00:05:31.047 --> 00:05:33.496
So let's do an update many.

90
00:05:33.496 --> 00:05:40.420
We're gonna do db.pets.updateMany.

91
00:05:40.420 --> 00:05:46.833
Let's say it's every dog's birthday today,
it's dog birthday day, let's do that.

92
00:05:46.833 --> 00:05:51.090
So the first thing is we're gonna do is,
we're going to do an updateMany.

93
00:05:51.090 --> 00:05:52.830
We're gonna give it a query object.

94
00:05:52.830 --> 00:05:56.312
So we're gonna find every dog type, dog,

95
00:05:56.312 --> 00:06:00.520
and then we're gonna
give it a query object.

96
00:06:00.520 --> 00:06:06.040
And we're gonna say, when to use
a special operator for updates.

97
00:06:06.040 --> 00:06:08.953
And we're going increment all
of their ages by one, right?

98
00:06:08.953 --> 00:06:13.225
Because some of them will be af age 1,
some will be age 2,

99
00:06:13.225 --> 00:06:17.862
some will be age 3, and
we wanted to just add 1 to all of those.

100
00:06:17.862 --> 00:06:22.387
So we say, $inc for increment And

101
00:06:22.387 --> 00:06:25.120
then we're gonna find age, and
we're going to want to increase it by 1.

102
00:06:25.120 --> 00:06:26.462
You can increase it by 2, right?

103
00:06:26.462 --> 00:06:32.729
If you wanted to So

104
00:06:32.729 --> 00:06:36.939
now, if we run that,
you can see that we matched 2501

105
00:06:36.939 --> 00:06:41.790
documents in the collection, and
we've modified all of those.

106
00:06:43.270 --> 00:06:47.819
So actually, if it's find again that dog,
you can see here,

107
00:06:47.819 --> 00:06:53.503
Luna's age was age eight here, and now,
you can see Luna's age is age nine,

108
00:06:53.503 --> 00:06:58.810
because we incremented all of
their ages by 1, make sense?

109
00:06:58.810 --> 00:06:59.790
There's a bunch of those.

110
00:06:59.790 --> 00:07:05.740
There's, I put a link in here as well,
you could just take a look here.

111
00:07:07.720 --> 00:07:12.620
Increment, rename, you can rename fields.

112
00:07:12.620 --> 00:07:16.455
So for example, if you're trying to
change names to be Title, I don't know,

113
00:07:16.455 --> 00:07:17.568
something like that.

114
00:07:17.568 --> 00:07:22.063
You can do this renamed,
names the keys for all these,

115
00:07:22.063 --> 00:07:27.460
you can unset, so you can just
delete something off of an object.

116
00:07:27.460 --> 00:07:30.869
You can insert the current date,
all these things are available to you.

117
00:07:40.463 --> 00:07:45.694
So we talked about update,
specifically using this set,

118
00:07:45.694 --> 00:07:52.330
yeah, I can see here, this particular
set operator to change an object.

119
00:07:52.330 --> 00:07:55.240
So we were just changing and
leaving everything else the same.

120
00:07:55.240 --> 00:07:57.852
There's something as well called replace.

121
00:07:57.852 --> 00:08:00.880
So you can replace one and replace many.

122
00:08:00.880 --> 00:08:04.247
And instead of providing
here a set object,

123
00:08:04.247 --> 00:08:08.988
you provide the whole object and
it will replace everything.

124
00:08:08.988 --> 00:08:12.269
That makes sense?

125
00:08:12.269 --> 00:08:15.030
So, yeah, be aware that you can
use update or you can use replace.

126
00:08:18.190 --> 00:08:22.142
So let's talk about upsert,
which is a ridiculous word, but

127
00:08:22.142 --> 00:08:26.019
it is one that you'll hear a lot
in talking about databases.

128
00:08:27.470 --> 00:08:31.650
Upsert is the idea, is like,
if you find something, update it.

129
00:08:31.650 --> 00:08:35.150
If it's not there, insert it,
does that make sense?

130
00:08:37.200 --> 00:08:39.946
So it's kind of this atomic transaction,
or

131
00:08:39.946 --> 00:08:44.080
this atomic query that allows you
to change something if it exists.

132
00:08:44.080 --> 00:08:48.060
If not, then go ahead and update it.

133
00:08:48.060 --> 00:08:49.630
So let's go ahead and
run one of those really quick.

134
00:08:53.340 --> 00:08:59.265
So we're gonna say, DB.pets.update1.

135
00:08:59.265 --> 00:09:02.620
And let's say we wanna put in here,
Sarah dog.

136
00:09:02.620 --> 00:09:05.993
I don't know if you've ever seen
Sarah dog, but it's adorable.

137
00:09:05.993 --> 00:09:10.377
The dog's name is Sudo, so
you can tell the dog to sudo sit,

138
00:09:10.377 --> 00:09:15.480
which is just the funniest joke that
never gets old to me, all right?

139
00:09:15.480 --> 00:09:20.365
So type dog name, Sudo.

140
00:09:20.365 --> 00:09:25.079
You'll notice that we don't have a dog
named Sudo in our database right now.

141
00:09:25.079 --> 00:09:28.339
And the breed is a wheaten,
which I had to go look up,

142
00:09:28.339 --> 00:09:31.026
which are adorable dogs by the way, okay?

143
00:09:31.026 --> 00:09:35.300
So that's the thing that
we're gonna query for,

144
00:09:35.300 --> 00:09:40.390
that query will not match
anything on a database.

145
00:09:40.390 --> 00:09:44.570
So what we're gonna do here is,
we're gonna give it a set object.

146
00:09:44.570 --> 00:09:48.213
So dollar signs set, and
because it's an upsert,

147
00:09:48.213 --> 00:09:53.634
we wanna provide it the whole object,
because if nothing matches that dog,

148
00:09:53.634 --> 00:09:58.570
then it's going to take that set
object and make that the new object.

149
00:09:58.570 --> 00:10:00.090
So you have to provide
it with everything else.

150
00:10:00.090 --> 00:10:03.580
Also will be lacking
that in the new object.

151
00:10:05.140 --> 00:10:09.251
So type dog, name, Sudo.

152
00:10:15.323 --> 00:10:19.880
Breed, Wheaton, age, 5.

153
00:10:19.880 --> 00:10:22.580
I don't actually know how old Sudo is,
but I just took a guess.

154
00:10:24.210 --> 00:10:27.030
Index, we'll just give it a random index.

155
00:10:27.030 --> 00:10:32.814
So I'm gonna give it 20,000 and

156
00:10:32.814 --> 00:10:37.170
the owner is Sarah Drasner.

157
00:10:37.170 --> 00:10:42.303
If you don't know Sarah, she's another
instructor in Frontend Masters,

158
00:10:42.303 --> 00:10:47.130
and has amazing courses on design and
view and lots of other cool stuff.

159
00:10:47.130 --> 00:10:49.120
Okay, so that's our set object.

160
00:10:50.700 --> 00:10:56.375
Then the last thing is, we're gonna give
it one more parameter to this update one,

161
00:10:56.375 --> 00:10:58.820
this is like a configuration ones.

162
00:10:58.820 --> 00:11:04.380
We can provide different sorts
of configurations to this query.

163
00:11:04.380 --> 00:11:09.970
We're just gonna give it an upsert:true.

164
00:11:09.970 --> 00:11:12.146
That basically says,
if you don't find it, insert it.

165
00:11:15.190 --> 00:11:18.750
I forgot a curly brace here.

166
00:11:18.750 --> 00:11:21.150
So I'm just gonna copy and
paste this from my notes.

167
00:11:23.710 --> 00:11:25.090
Promise you it's the same thing though.

168
00:11:27.620 --> 00:11:30.580
So we're querying for this,
it's not gonna find it.

169
00:11:30.580 --> 00:11:31.930
We're gonna try and set it to this.

170
00:11:31.930 --> 00:11:35.883
So if this did exist, this would get
updated, because it's not going to exist,

171
00:11:35.883 --> 00:11:37.350
it's going to get inserted.

172
00:11:39.150 --> 00:11:43.560
So you can see here, match 0,
modified 0, upserted ID.

173
00:11:43.560 --> 00:11:47.470
This means it actually did get
inserted into our collection.

174
00:11:48.730 --> 00:11:56.921
So now, if we just said DB.pets.findpets,

175
00:11:56.921 --> 00:12:00.281
find name, Sudo,

176
00:12:00.281 --> 00:12:06.092
we would find, Find one.

177
00:12:08.010 --> 00:12:09.677
Our good friend Sudo the dog.

