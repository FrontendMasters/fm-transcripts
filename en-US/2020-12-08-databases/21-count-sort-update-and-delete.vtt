WEBVTT

1
00:00:00.210 --> 00:00:05.547
Let's say we wanna delete every user
right now that has never logged in.

2
00:00:05.547 --> 00:00:11.580
Where you can do that is you can
say WHERE last_login IS NULL,

3
00:00:11.580 --> 00:00:16.568
like that, and that'll be a lot,
so it's just for

4
00:00:16.568 --> 00:00:19.481
the moment, say LIMIT 10.

5
00:00:22.027 --> 00:00:26.338
And then here you can see we've grabbed
out of here ten people who have never

6
00:00:26.338 --> 00:00:31.833
logged in, that's,
How you do that with that is null.

7
00:00:31.833 --> 00:00:34.456
What you can also do is not null, right?

8
00:00:34.456 --> 00:00:38.069
This will also work,
this will give you the people that were,

9
00:00:38.069 --> 00:00:39.947
you can see that has no overlap.

10
00:00:39.947 --> 00:00:42.839
So that's how you kind of
do that filtering, right?

11
00:00:42.839 --> 00:00:47.971
You can say where, what if we wanted
to do something a bit more complex?

12
00:00:50.499 --> 00:00:54.634
Like we wanted to filter on multiple
different things, well, you can do and

13
00:00:54.634 --> 00:00:55.543
in the same way.

14
00:00:55.543 --> 00:00:59.565
So let's say we wanted to do it
where people haven't logged in and

15
00:00:59.565 --> 00:01:02.870
their accounts are more
than six months old, right?

16
00:01:02.870 --> 00:01:07.586
So let's say we're cleaning out the
database, we wanna clean out anyone that

17
00:01:07.586 --> 00:01:11.598
hasn't logged in, and
their account is more than six months old.

18
00:01:11.598 --> 00:01:16.535
So we'll do the same thing where last
login is null and then you just say AND,

19
00:01:16.535 --> 00:01:19.403
and now you can put in
another where clause.

20
00:01:19.403 --> 00:01:26.415
So I'm gonna say now And
then you can actually

21
00:01:26.415 --> 00:01:30.339
do date math directly, and Postgres is
pretty smart and can figure that out.

22
00:01:30.339 --> 00:01:37.443
So I'm gonna say NOW()
-interval Six months,

23
00:01:37.443 --> 00:01:42.927
it's smart enough to turn
that into date math for

24
00:01:42.927 --> 00:01:47.616
you, and then we can just say LIMIT 10.

25
00:01:52.665 --> 00:01:57.798
Yeah, so we have to say created_on, and

26
00:01:57.798 --> 00:02:05.142
created_on is less than
the interval now minus 6 months.

27
00:02:05.142 --> 00:02:10.141
All right, so
these people haven't logged in and

28
00:02:10.141 --> 00:02:17.531
their accounts are more than six months
old, it's the first ten of them.

29
00:02:17.531 --> 00:02:18.705
So again, let's break that down.

30
00:02:18.705 --> 00:02:24.919
You're selecting these fields from
users where last login is null.

31
00:02:24.919 --> 00:02:31.246
So these people have never logged in and
created on is less than,

32
00:02:31.246 --> 00:02:36.519
oops, is less than now which
is the current timestamp

33
00:02:36.519 --> 00:02:42.512
at this moment in time minus
interval of six months, right?

34
00:02:42.512 --> 00:02:49.878
So that time space, and
then you're limited that to ten.

35
00:02:49.878 --> 00:02:54.707
What happens if we want to
find the oldest user account?

36
00:02:54.707 --> 00:02:59.310
We gonna say SELECT user_id,

37
00:02:59.310 --> 00:03:02.851
email, created_on,

38
00:03:02.851 --> 00:03:07.985
FROM users ORDER BY created_on,

39
00:03:07.985 --> 00:03:12.777
and we'll do LIMIT 10 again.

40
00:03:17.545 --> 00:03:21.899
Now I think all of these accounts
are within a year of each other or

41
00:03:21.899 --> 00:03:23.443
something like that.

42
00:03:23.443 --> 00:03:28.316
So yeah, a year ago which would be in

43
00:03:28.316 --> 00:03:33.193
2019, the forever times ago.

44
00:03:33.193 --> 00:03:37.568
These would be our oldest user accounts.

45
00:03:37.568 --> 00:03:41.218
Now, if you wanted to find
the newest ones, it's pretty easy,

46
00:03:41.218 --> 00:03:45.898
all you have to do is put created_on,
ORDER BY created_on DESC for descending.

47
00:03:45.898 --> 00:03:49.832
And you can see we have stuff
that was created yesterday.

48
00:03:54.959 --> 00:03:57.912
So that's order by,
order by just lets you sort, right?

49
00:03:57.912 --> 00:04:00.777
That's the sorting command here.

50
00:04:00.777 --> 00:04:05.984
And just so you know, we put DESC here,
you can also put a ASC for

51
00:04:05.984 --> 00:04:09.532
ascending, it's just implied, right?

52
00:04:09.532 --> 00:04:14.721
So if you leave it out, it's automatically
assumed that you mean ascending.

53
00:04:14.721 --> 00:04:17.451
Let's go into count, this is a good one.

54
00:04:17.451 --> 00:04:20.801
What if we just wanna know
how many users we have?

55
00:04:20.801 --> 00:04:25.539
SELECT COUNT(*) like that from users,

56
00:04:25.539 --> 00:04:34.239
we have 1000 users because that's
exactly how many I put in the database.

57
00:04:34.239 --> 00:04:37.084
The star represents just we're looking for
total roles,

58
00:04:37.084 --> 00:04:39.359
in general we're ignoring everything else.

59
00:04:40.502 --> 00:04:45.623
If you wanna look at how many users
have ever logged in, since count

60
00:04:45.623 --> 00:04:51.489
will ignore null values, what you can
do is count the amount of last logins.

61
00:04:51.489 --> 00:04:55.162
And you can see here 678
users have a last login,

62
00:04:55.162 --> 00:04:58.588
that means the other ones
have never logged in.

63
00:04:58.588 --> 00:05:03.580
So that's just what that star means,
it just means count the ones where

64
00:05:03.580 --> 00:05:08.166
this is not know, or if you put stars,
it says count all the rows.

65
00:05:08.166 --> 00:05:16.570
So I'm gonna say UPDATE
users SET last_login=NOW(),

66
00:05:16.570 --> 00:05:21.610
so this is a query that we would run,

67
00:05:21.610 --> 00:05:26.484
for example, if a user logged in,

68
00:05:26.484 --> 00:05:29.694
WHERE user_id=1.

69
00:05:29.694 --> 00:05:32.686
And so we could run this right now just
like that, nd it would work, right?

70
00:05:32.686 --> 00:05:35.336
This would just work as is,
this would update that user.

71
00:05:35.336 --> 00:05:41.180
Let's say we wanted to update it and
also get that record back,

72
00:05:41.180 --> 00:05:45.161
what you can do is do RETURNING *, right?

73
00:05:45.161 --> 00:05:48.801
This is basically saying,
do you remember the find one and

74
00:05:48.801 --> 00:05:53.196
update that we did in MongoDB,
this is the same behavior in Postgres.

75
00:05:53.196 --> 00:05:57.273
This returning star just says,
also give me back that thing.

76
00:05:59.032 --> 00:06:00.538
So you can see here,

77
00:06:00.538 --> 00:06:05.506
user ID one now does have a last
login whereas before they didn't.

78
00:06:05.506 --> 00:06:09.859
Or if we did it again, you'll notice that
it's different because time has advanced

79
00:06:09.859 --> 00:06:11.527
since we last ran that command.

80
00:06:14.337 --> 00:06:18.502
And just to prove my point here, if you
just run this with a semicolon there,

81
00:06:18.502 --> 00:06:22.753
it will just tell you I updated one
record, and it won't tell you what it was.

82
00:06:22.753 --> 00:06:27.195
So that's what that returning,
you can always just tack it on the end,

83
00:06:27.195 --> 00:06:29.575
give me back the stuff that I updated.

84
00:06:29.575 --> 00:06:34.560
If you wanna update multiple things,

85
00:06:34.560 --> 00:06:39.388
the way that looks is UPDATE users SET

86
00:06:39.388 --> 00:06:43.595
full_name='Brian Holt',

87
00:06:43.595 --> 00:06:48.284
email='lol@example.com'.

88
00:06:51.770 --> 00:06:57.786
WHERE user_id=2

89
00:06:57.786 --> 00:07:02.034
RETUNING *.

90
00:07:04.800 --> 00:07:08.966
I put an extra comment there,
I should not do that, and

91
00:07:08.966 --> 00:07:12.599
you can see there now
I've updated User ID two.

92
00:07:12.599 --> 00:07:20.035
So now that their full name is Brian Holt,
and their email is lol@exmaple.

93
00:07:20.035 --> 00:07:22.791
[LAUGH] And let's do one more here.

94
00:07:22.791 --> 00:07:30.973
We'll say DELETE FROM
users WHERE user_id=1000.

95
00:07:32.780 --> 00:07:36.772
And there you go,
that's how you delete a record.

96
00:07:36.772 --> 00:07:43.823
&gt;&gt; I just have a question, returning
star means returning all these fields?

97
00:07:43.823 --> 00:07:49.183
&gt;&gt; Returning star means I want
the record back that I updated, right?

98
00:07:49.183 --> 00:07:52.051
So in this particular case,
I updated user_id2,

99
00:07:52.051 --> 00:07:56.626
please return to me that whole record that
I just updated after it's been updated.

100
00:07:56.626 --> 00:07:58.071
So you can see here,

101
00:07:58.071 --> 00:08:02.747
I set full name you called the Brian Holt,
that's what this did.

102
00:08:02.747 --> 00:08:08.058
Whereas up here, when I didn't pass it in,
it just says UPDATE 1,

103
00:08:08.058 --> 00:08:13.943
it doesn't tell you what it updated,
it just goes like yep, update done.

104
00:08:13.943 --> 00:08:19.171
Answer Stevens question,
how was samples Postgres SQL imported.

105
00:08:19.171 --> 00:08:26.747
I literally just copied the contents
of that file and pasted it into PSQL.

106
00:08:26.747 --> 00:08:31.668
There's another way of doing it, but it
got complicated with containers being in

107
00:08:31.668 --> 00:08:35.034
the way, so the easiest way
is to just copy and paste it.

108
00:08:37.149 --> 00:08:38.837
It will take a while.

109
00:08:38.837 --> 00:08:41.994
Is there any way to get lost records?

110
00:08:41.994 --> 00:08:46.662
Let me infer what you mean by lost,
that you mean deleted,

111
00:08:46.662 --> 00:08:50.583
and if that's not correct,
please let me know.

112
00:08:50.583 --> 00:08:55.139
The answer is no, it's kind of like one
of those like, if you RM a file, its real

113
00:08:55.139 --> 00:08:59.637
gone, it's not coming back, you should
be very cautious of what you delete.

114
00:08:59.637 --> 00:09:03.289
Case in point, very first job,
aka my internship,

115
00:09:03.289 --> 00:09:07.944
I dropped an entire table of telemetry
data that we never got back.

116
00:09:07.944 --> 00:09:11.031
I'm pretty sure whoever would have
done that would have gotten fired, but

117
00:09:11.031 --> 00:09:13.923
I was an intern, it was my second day,
and they didn't wanna fire me.

118
00:09:13.923 --> 00:09:17.953
I mean, hopefully you have a company
that's smart enough to run periodic

119
00:09:17.953 --> 00:09:18.668
backups, so

120
00:09:18.668 --> 00:09:22.640
that you're not losing much more than
like a half day's worth of stuff.

121
00:09:22.640 --> 00:09:27.628
In my case, it was real gone, we did not
have any back ons, it was for real gone,

122
00:09:27.628 --> 00:09:30.467
and it was months of
data center health data.

123
00:09:30.467 --> 00:09:33.732
So they were pretty upset, but hopefully,

124
00:09:33.732 --> 00:09:39.216
an e-commerce company backs up their
stuff, [LAUGH] that's really sad.

125
00:09:39.216 --> 00:09:43.668
&gt;&gt; The other strategy I've seen
people employ is soft deleting,

126
00:09:43.668 --> 00:09:46.190
where they change a deleted to one.

127
00:09:46.190 --> 00:09:50.561
&gt;&gt; I've seen it too, so they'll do is
they'll excise something from a table,

128
00:09:50.561 --> 00:09:55.154
so they'll remove it from one table and
put it into like a deleted records table.

129
00:09:55.154 --> 00:09:58.858
And then that table will just be cleaned
out every 30 days or something like that.

130
00:09:58.858 --> 00:10:00.389
There's a lot of strategies
you can do to mitigate it.

131
00:10:00.389 --> 00:10:04.838
But as soon as I say something like this,
where it's you say delete where user

132
00:10:04.838 --> 00:10:09.371
equals 1000, it's gone, this record
is not retrievable at this point.

133
00:10:11.094 --> 00:10:15.092
I mean, I guess you could probably shut
down the computer, pull it out, and

134
00:10:15.092 --> 00:10:18.482
try and read the magnetic data back,
but you're probably not.

135
00:10:18.482 --> 00:10:19.772
Probably not gonna work.

