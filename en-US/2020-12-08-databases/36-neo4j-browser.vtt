WEBVTT

1
00:00:00.550 --> 00:00:03.821
So one of the nice things that
Neo4j kind of provides for

2
00:00:03.821 --> 00:00:08.710
you out of the box is it actually
has a very nice browser experience.

3
00:00:08.710 --> 00:00:12.040
And I should say that in the Postgres
section, we could have gone over pgAdmin.

4
00:00:12.040 --> 00:00:15.210
That's a very compatible
project with Postgres.

5
00:00:15.210 --> 00:00:17.713
We can have like a nice
browser experience.

6
00:00:17.713 --> 00:00:21.294
It's like phpMyAdmin if
you're familiar with MySQL.

7
00:00:21.294 --> 00:00:24.630
I think MongoDB has an open
source project similar as well.

8
00:00:24.630 --> 00:00:28.927
The nice thing about Neo4j is it's
actually built directly into Neo4j.

9
00:00:28.927 --> 00:00:32.600
So I want you to just
open your browser and

10
00:00:32.600 --> 00:00:37.571
I want you to go to
localhost:7474 like that, and

11
00:00:37.571 --> 00:00:41.371
you should end up in this Neo4j browser.

12
00:00:41.371 --> 00:00:43.690
We set no authentication.

13
00:00:43.690 --> 00:00:48.706
So you should be able to just say
connect and it should just work.

14
00:00:48.706 --> 00:00:51.070
And you get this really cool
kind of database explorer.

15
00:00:51.070 --> 00:00:56.870
The thing I wanna call it here at the top,
this is actually a query section.

16
00:00:56.870 --> 00:01:01.494
So if I say,
MATCH (n) RETURN n; like that,

17
00:01:01.494 --> 00:01:05.645
it'll actually run this query here, and

18
00:01:05.645 --> 00:01:10.403
it gives us a nice little
visual explorer here.

19
00:01:14.886 --> 00:01:15.577
What is this one?

20
00:01:18.625 --> 00:01:22.220
This is our little sad Michael Cera
that I wasn't able to connect to this.

21
00:01:24.090 --> 00:01:27.735
So this actually returned to us our
entire graph here that we've created with

22
00:01:27.735 --> 00:01:31.280
Scott Pilgrim vs the World, and
it's kinda fun and you can move it around.

23
00:01:31.280 --> 00:01:36.698
You can click on it and expand or
hide the child relationships.

24
00:01:36.698 --> 00:01:39.271
There's a bunch of cool stuff
like that you can do with this.

25
00:01:39.271 --> 00:01:41.180
Anyway, dismiss it, that's fun.

26
00:01:41.180 --> 00:01:42.620
You can also get this in a table, right?

27
00:01:42.620 --> 00:01:49.390
So this is the table layout of what
we returned here, or text or code.

28
00:01:49.390 --> 00:01:50.754
There's a bunch of stuff you can do,

29
00:01:50.754 --> 00:01:52.430
various different ways
you can look at this.

30
00:01:53.810 --> 00:01:55.770
But we'll be using this
little box here at the top.

31
00:01:55.770 --> 00:01:58.454
It's kinda hard to see,
that's why I call it out.

32
00:01:58.454 --> 00:02:01.018
But all of your queries will run here and

33
00:02:01.018 --> 00:02:05.535
then it just adds the new kind of card
here and it pushes the rest down.

34
00:02:06.591 --> 00:02:09.816
Here on the side, you can kinda
get like a database explorer.

35
00:02:09.816 --> 00:02:15.325
It'll tell you that we have nine nodes in
our database, we have seven relationships.

36
00:02:15.325 --> 00:02:20.110
We have movies and persons, we have
acted in and directed relationships.

37
00:02:20.110 --> 00:02:22.510
And here's some also properties.

38
00:02:22.510 --> 00:02:27.077
So if I click on this, it'll show me
all of the nodes with names in them.

39
00:02:27.077 --> 00:02:33.608
It's a nice little way to kind
of explore your database.

40
00:02:33.608 --> 00:02:38.341
Okay, so one of the cool things about this
is it actually has a bunch of different

41
00:02:38.341 --> 00:02:41.462
sample databases and
we're gonna use one of these.

42
00:02:41.462 --> 00:02:42.534
So I'm gonna say,

43
00:02:42.534 --> 00:02:47.670
:play movies, and it's gonna drop down
this little kind of tutorial thing.

44
00:02:47.670 --> 00:02:51.000
So do that, and this is fun to follow.

45
00:02:51.000 --> 00:02:52.405
You can do this as well.

46
00:02:52.405 --> 00:02:57.625
If you click over here,
it'll have this big query here.

47
00:02:57.625 --> 00:03:02.500
I want you to click on the query here and
it's gonna populate all that up here.

48
00:03:02.500 --> 00:03:06.499
This is a very long query that's going
to create a lot of movies and actors and

49
00:03:06.499 --> 00:03:08.010
actresses in our database.

50
00:03:09.670 --> 00:03:15.840
So if I do that, and then I click play
here, it's going to return to us here.

51
00:03:15.840 --> 00:03:19.680
Here's all the movies that Tom Hanks,
for example,

52
00:03:19.680 --> 00:03:24.456
has starred in, as well as people
that have acted with Tom Hanks and

53
00:03:24.456 --> 00:03:28.231
directed and
these various different capacities.

54
00:03:32.374 --> 00:03:33.812
But that's not it.

55
00:03:33.812 --> 00:03:37.320
Now, we have like 130 some actors in
our database, which is cool, actors and

56
00:03:37.320 --> 00:03:37.895
actresses.

57
00:03:42.931 --> 00:03:45.120
Cool, is everyone with me so far?

58
00:03:47.610 --> 00:03:50.508
Okay, if you're having
a problem with that and

59
00:03:50.508 --> 00:03:54.139
you wanna keep using cypher-shell,
I actually did here.

60
00:03:54.139 --> 00:03:59.220
If you come into Neo4j browser,
actually kind of the outline

61
00:03:59.220 --> 00:04:03.923
of how you do it cuz it's kind
of a pain to get this to work.

62
00:04:07.225 --> 00:04:08.721
Yeah, here's a link right here.

63
00:04:08.721 --> 00:04:11.457
If you click this link down here at
the bottom of the course website,

64
00:04:11.457 --> 00:04:13.857
it'll give you just that whole
queries that you can copy and

65
00:04:13.857 --> 00:04:16.700
paste into cypher-shell, and
everything will just work just fine.

66
00:04:19.319 --> 00:04:23.263
Okay, so now, we have a movie database
full of actors and actresses and

67
00:04:23.263 --> 00:04:27.688
directors, and we can start querying
that with fun different kind of queries.

68
00:04:31.766 --> 00:04:34.591
So let's keep doing this
in the browser here.

69
00:04:34.591 --> 00:04:38.357
You can do these queries either in
the browser or in the cypher-shell,

70
00:04:38.357 --> 00:04:40.260
both of those work just fine for me.

71
00:04:40.260 --> 00:04:42.160
The cypher-shell just tends
to be a little bit prettier.

72
00:04:42.160 --> 00:04:44.756
Or sorry, the other way around,
the browser ends up being a little bit

73
00:04:44.756 --> 00:04:50.120
prettier So let's do that.

74
00:04:50.120 --> 00:04:57.280
So I wanna see all of the labels that
I have in my new movie database.

75
00:04:57.280 --> 00:05:01.728
So I'm gonna to say, MATCH (n), so

76
00:05:01.728 --> 00:05:07.568
match all of the nodes in
my particular database,

77
00:05:07.568 --> 00:05:15.646
and I'm gonna say RETURN DISTINCT
labels(n), and count (*).

78
00:05:15.646 --> 00:05:20.370
Actually, you probably wanna, anyway.

79
00:05:20.370 --> 00:05:24.050
So what this is gonna do is it's gonna
go and match every node in our database.

80
00:05:24.050 --> 00:05:27.640
And then distinct, you probably remember
from Postgres, is going to only return.

81
00:05:27.640 --> 00:05:30.280
It's gonna deduplicate all of this.

82
00:05:30.280 --> 00:05:33.095
It's gonna grab all of the labels
from all of these nodes, and

83
00:05:33.095 --> 00:05:35.890
then it's going to count them up for us.

84
00:05:35.890 --> 00:05:38.450
It's going to aggregate
them is the term for that.

85
00:05:38.450 --> 00:05:41.855
So if we run that, we can see one
of them doesn't have a label,

86
00:05:41.855 --> 00:05:45.740
which is why that Michael Cera
one wasn't working.

87
00:05:45.740 --> 00:05:47.130
There we go, we can actually go fix that.

88
00:05:49.290 --> 00:05:53.958
We have 140 that have person and we have
39 that have movie associated with it.

89
00:05:53.958 --> 00:05:56.720
So that's good.

90
00:05:56.720 --> 00:05:59.560
Let's go see in all the various different
kinds of relationships that we have.

91
00:05:59.560 --> 00:06:04.934
So we can say, MATCH (n)-[r], and

92
00:06:04.934 --> 00:06:10.950
then we're not gonna
look at anything here.

93
00:06:10.950 --> 00:06:13.837
You could put a variable here, but we
don't care what it's actually matching to.

94
00:06:13.837 --> 00:06:16.287
So I'm just gonna leave that empty.

95
00:06:16.287 --> 00:06:20.886
And I'm going to RETURN type(r), and

96
00:06:20.886 --> 00:06:26.577
then again,
count(*) to aggregate all that.

97
00:06:26.577 --> 00:06:30.690
And we can see here we have directed,
acted in, produced,

98
00:06:30.690 --> 00:06:32.840
wrote, reviewed, follows.

99
00:06:32.840 --> 00:06:35.640
So there's a bunch of different kind of
relationships that we have here as well.

100
00:06:37.220 --> 00:06:41.516
Okay, so let's just pick an actor and
actress and start making some queries to

101
00:06:41.516 --> 00:06:46.180
kinda figure out what kind of things
that they've acted in with other people.

102
00:06:46.180 --> 00:06:48.898
We were looking at Aubrey Plaza before,
but

103
00:06:48.898 --> 00:06:52.430
let's pick another actor
that has more relationships.

104
00:06:52.430 --> 00:06:56.300
So I'm gonna pick Keanu Reeves
just cuz I also like Keanu Reeves.

105
00:06:56.300 --> 00:07:02.539
So I'm gonna say, MATCH (Keanu:Person) and

106
00:07:02.539 --> 00:07:07.265
I'm gonna say, [:Acted_IN],

107
00:07:12.140 --> 00:07:21.289
In (m:Movie),
With other people who [:ACTED_IN],

108
00:07:21.289 --> 00:07:28.248
and we'll just call this person Costar,
which will be another person.

109
00:07:28.248 --> 00:07:31.860
Oops, how do we get Shift+Enter?

110
00:07:31.860 --> 00:07:35.211
Okay, so if you hold Shift and hit Enter,
it'll allow you to do multiple lines.

111
00:07:37.867 --> 00:07:39.640
WHERE Keanu's name is,
in fact, Keanu Reeves.

112
00:07:39.640 --> 00:07:43.900
We got some nice autocompletion here.

113
00:07:43.900 --> 00:07:52.562
So I'm gonna say Keanu.name
= "Keanu Reeves".

114
00:07:52.562 --> 00:07:56.213
RETURN DISTINCT Costar.name.

115
00:08:01.545 --> 00:08:03.560
It's because we're doing distinct, right?

116
00:08:03.560 --> 00:08:06.730
Because Keanu Reeves has been in,
for example,

117
00:08:06.730 --> 00:08:09.291
Keanu Reeves is in all three Matrices.

118
00:08:09.291 --> 00:08:14.400
[LAUGH] Keanu Reeves is in all three
Matrix films, let's go with that.

119
00:08:14.400 --> 00:08:15.790
So that means that, for

120
00:08:15.790 --> 00:08:19.900
example, Carrie-Anne Moss was in
three different distinct films.

121
00:08:19.900 --> 00:08:24.340
So let's find out who was in
the most films with Keanu Reeves.

122
00:08:26.100 --> 00:08:30.685
So we'll do a count(*) here as well, And

123
00:08:30.685 --> 00:08:38.008
then we'll ORDER BY, Count(*) DESCENDING.

124
00:08:38.008 --> 00:08:44.740
And then after that, let's alphabetize.

125
00:08:44.740 --> 00:08:48.280
So then, you'll say Costar.name.

126
00:08:48.280 --> 00:08:53.610
So if we do this, now,
you have to click play up here,

127
00:08:57.709 --> 00:08:59.630
Dismiss this little thing here as well.

128
00:08:59.630 --> 00:09:04.355
We're gonna get Carrie-Anne Moss,
Hugo Weaving, and Laurence Fishburne,

129
00:09:04.355 --> 00:09:08.950
no surprise, Matrix, who were in three
different films with Keanu Reeves.

130
00:09:08.950 --> 00:09:13.958
And then a bunch of these other people who
were just in one film with Keanu Reeves.

131
00:09:13.958 --> 00:09:16.770
Because we just returned Costar.name,

132
00:09:16.770 --> 00:09:20.396
it's just going to give us
exactly what we asked for.

133
00:09:20.396 --> 00:09:25.522
But what's pretty cool here,
instead of doing all of this aggregation,

134
00:09:25.522 --> 00:09:29.489
what we can do,
I'm gonna just delete all this ORDER BY,

135
00:09:29.489 --> 00:09:33.830
and just RETURN Costar by itself and
not DISTINCT.

136
00:09:33.830 --> 00:09:37.560
So to make this a little bit simpler,
we're gonna return the entire node.

137
00:09:37.560 --> 00:09:40.392
And if we do that in the browser,
the browser is like, cool,

138
00:09:40.392 --> 00:09:42.340
I can show you a visualization of this.

139
00:09:42.340 --> 00:09:46.890
So if I click play now,
we're gonna get a nice little graph here.

140
00:09:48.860 --> 00:09:50.576
Now, we didn't return the relationships.

141
00:09:50.576 --> 00:09:53.782
If we return the relationships, that will
actually make this even prettier for us.

142
00:09:53.782 --> 00:09:58.094
So if I click that and I say, RETURN,

143
00:10:02.831 --> 00:10:07.891
Let's say, we'll call this one a and

144
00:10:07.891 --> 00:10:13.600
return b, and
we return Costar and a and b.

145
00:10:13.600 --> 00:10:16.430
Now, we get like a nice correlation.

146
00:10:16.430 --> 00:10:16.993
We should.

147
00:10:19.942 --> 00:10:25.150
We also need the movie as well,
obviously, And m.

148
00:10:28.473 --> 00:10:32.599
Now, here we go.

149
00:10:32.599 --> 00:10:38.826
Now, you can see all these films that were
in Keanu Reeves, they're disconnected.

150
00:10:38.826 --> 00:10:40.913
And so what's the central
node that we're missing here?

151
00:10:40.913 --> 00:10:43.616
Keanu Reeves himself, right?

152
00:10:43.616 --> 00:10:48.589
So we also have to return Keanu.

153
00:10:48.589 --> 00:10:53.800
Now, after doing all of this,
now we get a nice little graph.

154
00:10:53.800 --> 00:10:55.778
You can see all the stuff and

155
00:10:55.778 --> 00:11:01.040
how they are connected together
in this kind of web of movies.

156
00:11:01.040 --> 00:11:05.644
So you can see these ones are like
highly all attached to the Matrix films,

157
00:11:05.644 --> 00:11:10.026
The Replacements, Johnny Mnemonic,
Something's Got to Give, and

158
00:11:10.026 --> 00:11:11.600
the Devil's Advocate.

159
00:11:11.600 --> 00:11:15.990
Now, if you're doing this in cypher-shell,
obviously, it's far less impressive.

160
00:11:15.990 --> 00:11:20.274
In fact, if I just copy and paste this,
it's gonna be really hard to read in

161
00:11:20.274 --> 00:11:24.286
cypher-shell cuz it's going to return
to just a whole lot of no data,

162
00:11:24.286 --> 00:11:27.487
which is pretty hard to read
on a command line like this.

163
00:11:27.487 --> 00:11:32.782
But in the web browser, it actually
makes it pretty pleasant to look at.

