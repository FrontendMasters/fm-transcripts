WEBVTT

1
00:00:00.000 --> 00:00:05.247
We're gonna pop into writing
a Node.js app with MongoDB.

2
00:00:05.247 --> 00:00:06.789
Let's go ahead and open this one.

3
00:00:06.789 --> 00:00:12.613
And we're not gonna learn any new concepts
here with write a Node app with MongoDB.

4
00:00:12.613 --> 00:00:16.969
But I wanted to make sure that you are
able to transfer the skills that you learn

5
00:00:16.969 --> 00:00:21.460
from just writing commands into a command
line, which is fun for querying, but

6
00:00:21.460 --> 00:00:24.295
obviously not useful for
writing applications.

7
00:00:24.295 --> 00:00:27.044
I just wanna make sure you could
transfer that into code, right?

8
00:00:27.044 --> 00:00:33.150
So we're just gonna write a really quick,
really dumb MongoDB app.

9
00:00:33.150 --> 00:00:35.380
So what I want you to do is,
I want you to come back over here.

10
00:00:36.410 --> 00:00:37.588
Don't shut down your Mongo server,

11
00:00:37.588 --> 00:00:39.190
I'll show you how to do
that here in just a second.

12
00:00:39.190 --> 00:00:41.400
I'm just gonna open a new terminal.

13
00:00:41.400 --> 00:00:49.620
So I have a directory called
personal/complete-intro-to-databases.

14
00:00:49.620 --> 00:00:53.167
So you can see here,
I just have an empty database, or sorry,

15
00:00:53.167 --> 00:00:56.733
I also have an empty database,
but I have an empty directory.

16
00:00:56.733 --> 00:00:59.078
I'm just gonna start
a new Node project here.

17
00:00:59.078 --> 00:01:01.980
So I'm gonna make a directory, and

18
00:01:01.980 --> 00:01:07.029
this will be called mongodb-sample or
something like that.

19
00:01:09.721 --> 00:01:12.538
One note actually I wanna add here.

20
00:01:12.538 --> 00:01:18.084
If you come here to the course website,
I have a repo here, db-samples,

21
00:01:18.084 --> 00:01:22.924
this has the complete code for
all of the samples in this course.

22
00:01:22.924 --> 00:01:25.860
So if you wanna just go clone that and
use that, that's fine.

23
00:01:25.860 --> 00:01:28.858
We're gonna be writing all the code
together so you don't have to clone it.

24
00:01:28.858 --> 00:01:31.575
But if you get lost,
you can obviously just come in here, and

25
00:01:31.575 --> 00:01:34.473
you can see what's in the package.json,
blah, blah, blah.

26
00:01:34.473 --> 00:01:39.859
It's all there for you to use as well,
so that's at btholt/db-samples,

27
00:01:39.859 --> 00:01:42.735
and there's a link right there as well.

28
00:01:42.735 --> 00:01:48.544
So coming back over here, what we're gonna
do is, we're gonna do an npm init -y.

29
00:01:48.544 --> 00:01:50.591
This will give us a new package.json,

30
00:01:50.591 --> 00:01:53.950
the -y just means I don't really
care what things you put in it.

31
00:01:53.950 --> 00:02:00.626
And here, I'm gonna install, express,

32
00:02:00.626 --> 00:02:05.980
let's get a specific version of express,
I'll figure out which one it is.

33
00:02:05.980 --> 00:02:10.155
So we're gonna grab express at 4.17.1.

34
00:02:14.928 --> 00:02:19.807
We're gonna install mongodb at 3.6.2,

35
00:02:19.807 --> 00:02:25.484
I already had an express there,
so I have it in there twice.

36
00:02:25.484 --> 00:02:28.420
Again, the reason why I'm giving you
specific versions for this is that,

37
00:02:28.420 --> 00:02:30.425
if someone's watching this
course in the future,

38
00:02:30.425 --> 00:02:32.305
that they're getting
the same versions as me.

39
00:02:32.305 --> 00:02:35.657
I've been bit by this before where
I'll write code for something.

40
00:02:35.657 --> 00:02:38.554
And then later, they update
the framework to be totally different.

41
00:02:38.554 --> 00:02:42.424
I don't want that to happen, so yeah, just
go ahead and grab these specific versions.

42
00:02:42.424 --> 00:02:45.749
Or if you wanted to grab the latest
versions, just know that some

43
00:02:45.749 --> 00:02:49.212
things might be different, and
you might have to adjust for that.

44
00:02:49.212 --> 00:02:52.322
The first thing that people will
probably ask me is, hey Brian,

45
00:02:52.322 --> 00:02:55.617
why are you not using mongoose,
right, why are you using MongoDB?

46
00:02:55.617 --> 00:02:56.774
Totally valid question.

47
00:02:56.774 --> 00:03:01.337
mongoose is a very popular library for
interacting with MongoDB.

48
00:03:01.337 --> 00:03:05.859
And in Node specifically,
it's what you would call an ORM,

49
00:03:05.859 --> 00:03:10.027
which I believe stands for
object-relation manager,

50
00:03:10.027 --> 00:03:14.440
something like that,
I honestly couldn't tell you.

51
00:03:14.440 --> 00:03:18.035
It's an ORM,
that's the thing that I know it as.

52
00:03:18.035 --> 00:03:21.780
An ORM basically allows you
to use the library, and

53
00:03:21.780 --> 00:03:25.450
then the library constructs
the queries for you.

54
00:03:25.450 --> 00:03:28.039
So it's a layer of indirection
between you and the database.

55
00:03:29.590 --> 00:03:32.938
This is useful sometimes for some people
because it helps them make good choices,

56
00:03:32.938 --> 00:03:35.380
when they don't know how
to make the good choices.

57
00:03:35.380 --> 00:03:38.520
I'm trying to teach you how to
make the good choices yourself.

58
00:03:38.520 --> 00:03:43.812
So we're gonna be using MongoDB, which is
the official driver from Mongo itself.

59
00:03:43.812 --> 00:03:46.671
You'll notice I use the term driver.

60
00:03:46.671 --> 00:03:51.466
Driver's kind of the word that you
use to describe the library that's

61
00:03:51.466 --> 00:03:53.993
made to interact with the database.

62
00:03:53.993 --> 00:03:58.857
So there's gonna be a Ruby driver,
a Python driver, a Go driver, all for

63
00:03:58.857 --> 00:03:59.567
MongoDB.

64
00:03:59.567 --> 00:04:05.054
So MongoDB is the official one for MongoDB
that's put out by MongoDB themselves,

65
00:04:05.054 --> 00:04:08.406
mongoose is an unofficial
community source one.

66
00:04:08.406 --> 00:04:13.356
It's great if that's what you want, if you
want an ORM, go ahead and go use them.

67
00:04:13.356 --> 00:04:16.144
I just never use them personally, so
I'm gonna not teach you those today.

68
00:04:16.144 --> 00:04:20.765
Okay, so now we have all that,
I want you to make

69
00:04:20.765 --> 00:04:25.981
a directory called static,
make directory static.

70
00:04:25.981 --> 00:04:28.892
We're just gonna put our
index.html in there.

71
00:04:28.892 --> 00:04:32.034
And then we're gonna
create two files here.

72
00:04:32.034 --> 00:04:35.093
We're gonna put one in
static called index.html.

73
00:04:35.093 --> 00:04:38.132
And then we're also gonna
create one in server.js.

74
00:04:38.132 --> 00:04:40.481
touch just creates a file.

75
00:04:40.481 --> 00:04:43.190
So now if you look here, let's do this.

76
00:04:43.190 --> 00:04:47.969
You can see here, I have a node_modules,
I have a package-lock, a package.json,

77
00:04:47.969 --> 00:04:50.472
the server.js, and the static directory.

78
00:04:50.472 --> 00:04:54.864
Inside of that static directory,
you can see there I have an index.html.

79
00:04:54.864 --> 00:04:58.835
Pretty barebones project,
we're gonna make this very simple.

80
00:04:58.835 --> 00:05:02.074
This is definitely not a Node.js course,
so

81
00:05:02.074 --> 00:05:05.235
the code here is going
to be very barebones.

82
00:05:05.235 --> 00:05:09.679
If you want a good Node course, you should
take Scott Moss's on Frontend Masters.

83
00:05:09.679 --> 00:05:13.554
All right, so I'm gonna open this
in my favorite editor, obviously,

84
00:05:13.554 --> 00:05:17.123
[LAUGH] which is gonna be VS Code,
seeing as that's what I work on.

85
00:05:17.123 --> 00:05:19.242
So I'm gonna say code ..

86
00:05:22.205 --> 00:05:28.558
And let's make this big, and
we're gonna look first at our index.html.

87
00:05:28.558 --> 00:05:33.225
Make this a bit bigger for you,
gonna hide that, all right.

88
00:05:35.946 --> 00:05:39.665
So we're in our index.html,
I'm gonna put html:5.

89
00:05:39.665 --> 00:05:41.493
And then if I hit Tab,

90
00:05:41.493 --> 00:05:47.599
VS Code is going to autocomplete this
out to a barebones HTML document.

91
00:05:47.599 --> 00:05:53.321
It's called Emmet,
feel free to look that up, E-M-M-E-T.

92
00:05:54.540 --> 00:05:59.863
And I'm gonna call this
my MongoDB Sample App.

93
00:05:59.863 --> 00:06:06.673
Okay, we're gonna make a very barebones,
all this is gonna do is,

94
00:06:06.673 --> 00:06:11.931
we're gonna take advantage
of that full text search

95
00:06:11.931 --> 00:06:16.841
that we created in one of
our previous sections.

96
00:06:16.841 --> 00:06:18.712
So again, no CSS, super barebones.

97
00:06:18.712 --> 00:06:21.220
This is just to be a sample application
where you can see how to connect

98
00:06:21.220 --> 00:06:22.960
a frontend to a database
through a Node server.

99
00:06:22.960 --> 00:06:28.889
So let's put an input in here,
and this is gonna be type text.

100
00:06:28.889 --> 00:06:33.657
The placeholder is gonna
be equal to Search,

101
00:06:33.657 --> 00:06:37.429
and the id is going to equal search.

102
00:06:37.429 --> 00:06:40.607
Search, I can spell.

103
00:06:43.446 --> 00:06:49.460
Okay, underneath that,
we're gonna have a button,

104
00:06:49.460 --> 00:06:56.403
id is going to equal btn, and
the code here is gonna say Search.

105
00:06:56.403 --> 00:07:01.428
And then we're gonna have a pre,
which is a pre format tag.

106
00:07:01.428 --> 00:07:06.238
And inside of that, we're going to have
a code which is gonna be code format,

107
00:07:06.238 --> 00:07:09.497
cuz we're just gonna
literally paste JSON in here.

108
00:07:09.497 --> 00:07:12.738
We're not gonna any formatting or
anything like that.

109
00:07:12.738 --> 00:07:18.194
I just want you to see what it looks like,
and this is gonna be id="code".

110
00:07:18.194 --> 00:07:20.923
Now normally, I would say,
create a separate script file,

111
00:07:20.923 --> 00:07:23.291
we'll start a build process,
blah, blah, blah.

112
00:07:23.291 --> 00:07:26.438
I'm just literally gonna put this
in a script tag right now so

113
00:07:26.438 --> 00:07:28.917
that there's no way that
you can get lost here.

114
00:07:28.917 --> 00:07:33.340
So we're literally just gonna write
JavaScript in a script tag here.

115
00:07:33.340 --> 00:07:36.201
const button, we're gonna go query for

116
00:07:36.201 --> 00:07:40.331
all of our various different
things that we just created.

117
00:07:40.331 --> 00:07:45.002
document.getElementById('btn'), and

118
00:07:45.002 --> 00:07:49.091
then we're gonna do that two more times.

119
00:07:49.091 --> 00:07:58.333
So once, Once for that,
once for code, right?

120
00:07:58.333 --> 00:08:01.462
So code is gonna be
the this code element here.

121
00:08:01.462 --> 00:08:05.660
And then we're gonna do it as well for
the search.

122
00:08:05.660 --> 00:08:08.993
So search search, code code,
so this is just gonna

123
00:08:08.993 --> 00:08:13.966
be a programmatic handle on these three
different elements up here, okay?

124
00:08:18.002 --> 00:08:22.712
Underneath that,
we're gonna say btn.addEventListener.

125
00:08:22.712 --> 00:08:29.102
So on click, sorry,
let me hide this again.

126
00:08:34.529 --> 00:08:38.137
Okay, so btn.addEventListener('click').

127
00:08:42.070 --> 00:08:45.500
Okay, and then we're gonna
make an async function here.

128
00:08:49.003 --> 00:08:53.656
So whenever someone clicks that
code button, we're gonna say,

129
00:08:53.656 --> 00:08:59.251
code.innerText = 'loading', so
that someone knows that it's loading.

130
00:08:59.251 --> 00:09:06.884
And then we're gonna say
const res = await fetch,

131
00:09:06.884 --> 00:09:11.329
and we're gonna get it from,

132
00:09:17.764 --> 00:09:22.093
/get?search=,

133
00:09:26.415 --> 00:09:34.900
+ encodeURIComponent(search.value).

134
00:09:38.333 --> 00:09:39.303
No semicolon.

135
00:09:41.821 --> 00:09:42.721
Okay.

136
00:09:44.333 --> 00:09:48.387
So what this is gonna do is,
as soon as someone clicks the button,

137
00:09:48.387 --> 00:09:50.983
it's gonna grab the value out of search.

138
00:09:50.983 --> 00:09:57.115
It's going to attach that onto a /get with
a query string of search=blah, right?

139
00:09:57.115 --> 00:09:59.620
And then we're gonna take
that in the Node server, and

140
00:09:59.620 --> 00:10:02.026
we're gonna use that to
search our Mongo database.

141
00:10:04.761 --> 00:10:12.849
Okay, here we're gonna say
const json = await res.json().

142
00:10:16.755 --> 00:10:21.115
Okay, and then here at this point,
we can say,

143
00:10:21.115 --> 00:10:25.270
code.innerText =, let's add a new line.

144
00:10:25.270 --> 00:10:30.824
"\n" + JSON.stringify(json, null, 4),

145
00:10:30.824 --> 00:10:36.252
which is gonna to be just
a preformatted JSON object

146
00:10:36.252 --> 00:10:41.571
that we're just gonna dump
out into the results.

147
00:10:41.571 --> 00:10:43.508
So this is extremely barebones, right?

148
00:10:43.508 --> 00:10:47.002
What do we expect to see when
we open this on the page?

149
00:10:47.002 --> 00:10:51.016
An input, a button, and
then there'll be nothing in here,

150
00:10:51.016 --> 00:10:53.863
just because there's no code in here yet.

151
00:10:53.863 --> 00:10:58.747
Then whenever we press the button,
it's going to run this event listener,

152
00:10:58.747 --> 00:11:00.511
the click event listener.

153
00:11:00.511 --> 00:11:03.378
It'll set the text to loading,
it'll request to our Node server,

154
00:11:03.378 --> 00:11:05.403
which we need to code,
we're about to do that.

155
00:11:05.403 --> 00:11:12.139
And then it's going to get that and it's
going to dump that out into the pre code.

156
00:11:12.139 --> 00:11:15.130
So we'll see JSON coming back from our
express server that we're about to write.

