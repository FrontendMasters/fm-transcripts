WEBVTT

1
00:00:01.130 --> 00:00:05.587
So let's go ahead and write another
query now to query for the relationship.

2
00:00:05.587 --> 00:00:09.557
So, what I'm gonna do here now after I've
done this, we're gonna start looking

3
00:00:09.557 --> 00:00:13.365
at Aubrey Plaza because I think she's
very funny, and we're going to match,

4
00:00:15.958 --> 00:00:25.371
(p:Person)-[:ACTED_IN]

5
00:00:25.371 --> 00:00:31.019
-&gt; (m:Movie);

6
00:00:34.888 --> 00:00:40.705
And actually, let's just grab that r,
and we're going to return r.

7
00:00:44.664 --> 00:00:47.662
So in this particular case,
we're getting all of the people that act

8
00:00:47.662 --> 00:00:50.726
in various different roles inside
of Scott Pilgrim Versus the World.

9
00:00:53.416 --> 00:00:56.596
So I can actually query directly for
these edges or relationships.

10
00:01:01.696 --> 00:01:07.738
Okay, let's put a where clause in here,

11
00:01:07.738 --> 00:01:11.537
WHERE p.name= 'Aubrey

12
00:01:11.537 --> 00:01:19.661
Plaza And then you wanna return p, right?

13
00:01:19.661 --> 00:01:25.683
Because we're gonna find the person that
acted in Scott Pilgrim Versus the World,

14
00:01:25.683 --> 00:01:28.449
so that'll be Aubrey Plaza, right?

15
00:01:28.449 --> 00:01:33.161
Or we can look at the r, we can see that
Aubrey Plaza in Scott Pilgrim Versus

16
00:01:33.161 --> 00:01:35.745
the World played Julie Powers, right?

17
00:01:35.745 --> 00:01:38.432
Or again,
you can return m which will be the movie,

18
00:01:38.432 --> 00:01:40.879
which will be Scott Pilgrim
versus the World.

19
00:01:44.006 --> 00:01:48.211
So this actually will give you every
movie that Aubrey Plaza played.

20
00:01:48.211 --> 00:01:50.491
And in this case, we just have
one movie in our database, but

21
00:01:50.491 --> 00:01:51.712
this would give you all of them.

22
00:01:55.954 --> 00:02:00.653
Okay, now what happens if I wanted
to find everyone that acted in

23
00:02:00.653 --> 00:02:02.576
a film with Aubrey Plaza.

24
00:02:02.576 --> 00:02:04.070
Well, you can actually do that as well.

25
00:02:04.070 --> 00:02:09.544
So I'm gonna say MATCH (p:Person) -&gt;,

26
00:02:15.261 --> 00:02:23.203
[:ACTED_IN]; -&gt; (movie), right?

27
00:02:23.203 --> 00:02:25.290
We don't even have to get that variable
because we're not gonna refer to it.

28
00:02:25.290 --> 00:02:29.436
We're just looking for any movie that
someone acted in with Aubrey Plaza and

29
00:02:29.436 --> 00:02:32.426
then I can just do an arrow
in the other direction here.

30
00:02:32.426 --> 00:02:38.175
&lt;-[ :ACTED_IN], and then I'll have another
person so we'll just call this person,

31
00:02:38.175 --> 00:02:42.832
I don't know, -(q:) is what I have
my notes, I don't know why I did q.

32
00:02:45.359 --> 00:02:49.096
So another person like that,

33
00:02:49.096 --> 00:02:54.177
WHERE p.name = 'Aubrey Plaza' AND,

34
00:02:54.177 --> 00:02:59.417
we don't want it to return Aubrey Plaza.

35
00:02:59.417 --> 00:03:02.436
Because technically, Aubrey plaza
has been in the movies with herself,

36
00:03:02.436 --> 00:03:03.859
according to our graph database.

37
00:03:03.859 --> 00:03:08.179
So when we say where q.name, and

38
00:03:08.179 --> 00:03:13.578
this is how you do,
null equal is the angle

39
00:03:13.578 --> 00:03:18.361
bracket is just together like that,

40
00:03:18.361 --> 00:03:23.633
&lt;&gt; 'Aubrey Plaza' RETURN q.name.

41
00:03:23.633 --> 00:03:27.814
So again, I really liked,
I messed that up,

42
00:03:27.814 --> 00:03:33.004
there's shouldn't be an arrow there,
right there I meant.

43
00:03:33.004 --> 00:03:38.963
So this is actually not gonna work because
there shouldn't be an angle bracket there.

44
00:03:44.317 --> 00:03:47.042
There we go, so this is where it is.

45
00:03:47.042 --> 00:03:51.581
So p:Person, then you have just
a minus sign, acted in movie, and

46
00:03:51.581 --> 00:03:55.564
you have this other person that
also acted in the movie, and

47
00:03:55.564 --> 00:03:58.288
then you just return the name down here.

48
00:03:58.288 --> 00:04:02.225
And so you can see these are all
the people that played roles in films with

49
00:04:02.225 --> 00:04:03.087
Aubrey Plaza.

50
00:04:03.087 --> 00:04:06.287
Now imagine that you had 100 films and
1,000 actresses,

51
00:04:06.287 --> 00:04:08.626
you would get 1,000 actresses back here.

52
00:04:13.375 --> 00:04:14.414
Pretty cool, right?

53
00:04:14.414 --> 00:04:17.610
I like Cipher as a query
language cuz it reads very well,

54
00:04:17.610 --> 00:04:21.218
despite the fact that graphs
are kind of complicated, right?

55
00:04:21.218 --> 00:04:23.599
There's a lot of interesting
things you can do with graphs, but

56
00:04:23.599 --> 00:04:26.466
as long as you're just kind of like
drawing your relationships between these

57
00:04:26.466 --> 00:04:28.871
various different nodes,
it's pretty easy to query for them.

58
00:04:32.575 --> 00:04:35.788
Like, what if I wanted to find
all the roles that these people

59
00:04:35.788 --> 00:04:37.246
played with Aubrey Plaza?

60
00:04:37.246 --> 00:04:41.390
It's totally possible, so
I'm gonna do the same thing here,

61
00:04:41.390 --> 00:04:44.684
except I'm gonna describe r here and
ACTED_IN.

62
00:04:44.684 --> 00:04:49.886
I'm gonna say where p = q.name,
and then what I wanna

63
00:04:49.886 --> 00:04:55.667
do is I wanna return &lt;&gt; q.name,
I wanna return r.roles.

64
00:04:55.667 --> 00:05:00.002
And you can see here these are all
the roles people played in films with

65
00:05:00.002 --> 00:05:05.406
Aubrey Plaza, it's wild to me that that's
so easy to query for something like that.

66
00:05:05.406 --> 00:05:08.466
All I did is stick a variable
here with our r : ACTED_IN, and

67
00:05:08.466 --> 00:05:11.050
then all I did was return
the property of r.roles.

68
00:05:11.050 --> 00:05:13.109
So what if I wanna query for

69
00:05:13.109 --> 00:05:19.019
everyone that was younger than Aubrey
Plaza that played in a film with her?

70
00:05:19.019 --> 00:05:23.888
Again, terribly easy to do,
same query up here.

71
00:05:29.586 --> 00:05:34.396
Okay, and
then here instead of saying where

72
00:05:34.396 --> 00:05:38.556
q.name is not equal to Aubrey Plaza,

73
00:05:38.556 --> 00:05:44.016
all I have to do here is
say where q.born is greater

74
00:05:44.016 --> 00:05:48.826
than p.born and then just return q.name.

75
00:05:48.826 --> 00:05:53.713
And so these are both Brie Larson,
and Anna Kendrick played in a film

76
00:05:53.713 --> 00:05:58.444
with Aubrey Plaza, and
they are both younger than Aubrey Plaza.

77
00:05:58.444 --> 00:06:00.781
Just to kind of show you something so
that you know will how to do this.

78
00:06:00.781 --> 00:06:05.654
Let's say that we wanted to create
a constraint where movie names

79
00:06:05.654 --> 00:06:06.900
must be unique.

80
00:06:06.900 --> 00:06:11.576
Now we all know that there's like 17
Godzilla films because they keep calling

81
00:06:11.576 --> 00:06:14.505
the films Godzilla, but
for a moment, fathom for

82
00:06:14.505 --> 00:06:16.974
a second that a movie name must be unique.

83
00:06:16.974 --> 00:06:22.542
What you can do here is you can say,

84
00:06:22.542 --> 00:06:26.958
CREATE CONSTRAINT ON (a:

85
00:06:26.958 --> 00:06:33.298
Movie) ASSERT a.title IS unique;.

86
00:06:33.298 --> 00:06:36.535
And this is going to
create an index actually,

87
00:06:36.535 --> 00:06:40.108
where it's gonna force
movie titles to be unique.

88
00:06:40.108 --> 00:06:43.659
And now if I tried to go create another
film called Scott Pilgrim Versus the World

89
00:06:43.659 --> 00:06:46.839
is gonna say, you can't do this,
I've been told that this is unique,

90
00:06:46.839 --> 00:06:49.024
so I'm going to hold this
constraint to be true.

91
00:06:49.024 --> 00:06:53.074
So that's how you do unique and
naming with graph databases.

92
00:06:53.074 --> 00:06:54.868
So graph databases
actually do have indexes,

93
00:06:54.868 --> 00:06:56.440
we'll get to that here in just a second.

