WEBVTT

1
00:00:00.005 --> 00:00:06.573
One of the cool things that Redis can
do is, it can do some math for you.

2
00:00:06.573 --> 00:00:09.782
So let's say we're tracking
all the visits to our website.

3
00:00:09.782 --> 00:00:14.165
So I'm gonna say set visits to 0,
because no one's visited our website yet.

4
00:00:14.165 --> 00:00:19.348
There's another command, so when I say
command, these SET, GET, all those kinda

5
00:00:19.348 --> 00:00:24.960
things, again, I'm capitalizing it for
your benefit, you don't have to.

6
00:00:24.960 --> 00:00:26.920
You can also say set like that,
and it works.

7
00:00:28.350 --> 00:00:31.260
Let's say someone visits our website,
we can issue a command.

8
00:00:31.260 --> 00:00:34.358
We don't have to say GET visits,
then do another SET.

9
00:00:34.358 --> 00:00:38.419
We can just say INCR, like this, visits.

10
00:00:42.621 --> 00:00:44.168
And there you go, that just increments it.

11
00:00:44.168 --> 00:00:48.550
And we can do it again, and again, and
again, and again, and again, right?

12
00:00:48.550 --> 00:00:54.160
So there's some amount of math
that Redis can do for you.

13
00:00:54.160 --> 00:00:58.819
You can also do decrement visits, and
lo and behold, it will decrement as well.

14
00:01:00.130 --> 00:01:05.173
Let's say we're writing
an American football tracker.

15
00:01:05.173 --> 00:01:08.919
You can say SET score, and

16
00:01:08.919 --> 00:01:13.858
let's say SET score:seahawks,

17
00:01:13.858 --> 00:01:20.504
cuz I'm a Seattle Seahawks fan, obviously.

18
00:01:20.504 --> 00:01:26.190
Their score is 0, and
we'll say SET score:broncos to be 0,

19
00:01:26.190 --> 00:01:29.959
right, cuz that's how the game starts.

20
00:01:29.959 --> 00:01:36.850
And then later in the game,
you wanna say increment by INCRBY.

21
00:01:39.266 --> 00:01:46.191
Then we'll say score:seahawks, 6, right?

22
00:01:46.191 --> 00:01:50.247
So this will actually go through and
increment the Seahawks' score by 6.

23
00:01:50.247 --> 00:01:54.737
Then if they score their extra point,
you can say by 1, and lo and behold,

24
00:01:54.737 --> 00:01:56.105
there's 7, right?

25
00:01:56.105 --> 00:01:58.769
So INCRBY allows you to not
only just add something, but

26
00:01:58.769 --> 00:02:01.218
you can actually specify
how much you wanna add by.

27
00:02:01.218 --> 00:02:06.450
There's also DECRBY, and
you can put score:broncos,

28
00:02:06.450 --> 00:02:12.996
cuz no one likes the Broncos,
right, 3, so now their score's -3.

29
00:02:12.996 --> 00:02:16.524
That's not possible, but in my fabricated
reality, their score is -3, and

30
00:02:16.524 --> 00:02:17.744
that's what DECRBY does.

31
00:02:17.744 --> 00:02:23.552
It allows you to do the same thing,
just by decreasing.

32
00:02:23.552 --> 00:02:29.452
You can do multiple sets and
multiple gets,

33
00:02:29.452 --> 00:02:38.233
so I'm gonna say MSET
score:seahawks 43 score:broncos 8.

34
00:02:38.233 --> 00:02:42.903
If we were just setting the end of the
game scores, that's how you would do that.

35
00:02:42.903 --> 00:02:49.224
And then again, we can do MGET
score:seahawks score:broncos.

36
00:02:49.224 --> 00:02:55.341
The first one we get back is 43,
the second one that we get back is 8.

37
00:02:55.341 --> 00:02:58.019
This one is decidedly easier than
the other ones, that's kinda why I saved

38
00:02:58.019 --> 00:03:00.716
it to the end, for when your brains
are all mushy from the other databases.

39
00:03:00.716 --> 00:03:03.182
This one's like, this one's easy,
we like this one.

40
00:03:03.182 --> 00:03:07.273
Another one it's useful is EXISTS, right?

41
00:03:07.273 --> 00:03:11.104
So I can just say EXISTS score:seahawks.

42
00:03:11.104 --> 00:03:16.347
And it's gonna say 1, yep,
that definitely exists.

43
00:03:16.347 --> 00:03:20.215
If I went in here and queried for
a Vikings score, I haven't set a Vikings

44
00:03:20.215 --> 00:03:23.780
score, so it's gonna say that one
doesn't exist in my database.

45
00:03:23.780 --> 00:03:27.370
The example I have here in my notes is,

46
00:03:27.370 --> 00:03:31.524
if you were doing a pathfinding algorithm,

47
00:03:31.524 --> 00:03:37.826
you could kind of use that as a way to,
SET plane:0:0 for x, y.

48
00:03:37.826 --> 00:03:42.566
So I would say SET plane:0:0 true, or

49
00:03:42.566 --> 00:03:47.312
visited, something like that, right?

50
00:03:47.312 --> 00:03:50.501
And then later, if I try to go back to
that same area, I could just say hey,

51
00:03:50.501 --> 00:03:53.653
have I visited this place before,
plane:0:0, and it'll say yes.

52
00:03:53.653 --> 00:03:57.004
Have I visited this area, no, and then I
could know that I could go there, right?

53
00:03:57.004 --> 00:04:00.284
That's an example of how
you could use EXISTS.

54
00:04:00.284 --> 00:04:04.383
If you wanna delete things,
you can say SET greeting hello.

55
00:04:06.931 --> 00:04:10.205
EXISTS greeting, DEL greeting, and

56
00:04:10.205 --> 00:04:15.333
then if I asked EXISTS greeting again,
it's gonna say no.

57
00:04:15.333 --> 00:04:19.694
So that's what that delete does, it just
deletes something out of your cache.

58
00:04:19.694 --> 00:04:25.067
And honestly, I just showed you,
get and set are 90%,

59
00:04:25.067 --> 00:04:29.359
we're up to 96% of how
you would use Redis.

60
00:04:29.359 --> 00:04:33.142
But let's go into the advanced
stuff cuz why not, it's kinda fun.

61
00:04:33.142 --> 00:04:37.930
When would you use Redis as opposed
to just keeping something in

62
00:04:37.930 --> 00:04:40.016
memory on your app server?

63
00:04:40.016 --> 00:04:43.072
In general,
when I'm writing Node servers, and

64
00:04:43.072 --> 00:04:47.888
PHP servers, and Ruby servers, I want
my endpoints to be stateless, right?

65
00:04:47.888 --> 00:04:50.647
So that in between my first call and
my second call,

66
00:04:50.647 --> 00:04:52.454
I'm not maintaining any state.

67
00:04:52.454 --> 00:04:56.527
The reason why that's really helpful is
because, when I then scale out my app

68
00:04:56.527 --> 00:05:00.802
server to be ten app servers, you don't
know which one they're gonna hit next.

69
00:05:00.802 --> 00:05:04.988
So if I have to maintain state for
a user across API calls,

70
00:05:04.988 --> 00:05:07.266
then I can just set it in Redis.

71
00:05:07.266 --> 00:05:10.095
And they're all gonna be reading
from the same Redis even if it's

72
00:05:10.095 --> 00:05:11.184
different app servers.

73
00:05:11.184 --> 00:05:16.030
If you have just one app server
running your entire app, go ahead and

74
00:05:16.030 --> 00:05:17.401
keep it in memory.

75
00:05:17.401 --> 00:05:20.935
I can't see why you would use Redis,
right, unless you have a lot of stuff

76
00:05:20.935 --> 00:05:24.473
that you need to store because you
don't wanna take up all of your memory.

77
00:05:24.473 --> 00:05:28.250
But when you have two app servers,
that becomes a big problem.

