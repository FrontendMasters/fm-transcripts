WEBVTT

1
00:00:00.030 --> 00:00:01.490
Let's create our first table.

2
00:00:01.490 --> 00:00:06.670
So, like I said, we're gonna be doing
a message board today with Postgres.

3
00:00:06.670 --> 00:00:09.870
I kind of tried to choose like a good
problem for each one of these.

4
00:00:09.870 --> 00:00:12.467
So they're not exactly they
gonna be the same problem.

5
00:00:12.467 --> 00:00:17.405
Whereas like a pet adoption app,
is good for Mongo, something that's more

6
00:00:17.405 --> 00:00:22.770
relational like a message board is
really good for a relational database.

7
00:00:22.770 --> 00:00:25.460
So we're gonna say create table.

8
00:00:25.460 --> 00:00:26.990
Now something I'm gonna tell you upfront.

9
00:00:28.110 --> 00:00:30.600
It's optional to
capitalize all this stuff.

10
00:00:30.600 --> 00:00:32.970
So you can totally say
create table like this.

11
00:00:32.970 --> 00:00:35.077
It'll get it for your benefits.

12
00:00:35.077 --> 00:00:38.837
And in general people tend
to capitalize the commands,

13
00:00:38.837 --> 00:00:43.957
they can see the difference very quickly
between what they're imputing and

14
00:00:43.957 --> 00:00:46.765
what is like a official SQL kind of thing.

15
00:00:48.135 --> 00:00:51.997
If you're feeling lazy like I often do
when I'm writing SQL, feel free to just

16
00:00:51.997 --> 00:00:55.755
put everything in lowercase just know
that that's why I'm capitalizing.

17
00:00:55.755 --> 00:00:57.245
It's hopefully for your benefit.

18
00:00:58.245 --> 00:01:02.170
So CREATE TABLE users, Open parentheses.

19
00:01:02.170 --> 00:01:05.660
We're gonna create a table here.

20
00:01:06.830 --> 00:01:09.920
And we're gonna have a user id.

21
00:01:09.920 --> 00:01:14.348
This is gonna be,
you can put this as INT or integer, and

22
00:01:14.348 --> 00:01:17.281
we'll put into Gerges for this one.

23
00:01:17.281 --> 00:01:21.363
We're gonna make this a primary key.

24
00:01:21.363 --> 00:01:25.634
So primary key means like
this is the thing that

25
00:01:25.634 --> 00:01:30.016
the database is primarily
going to indexes on so

26
00:01:30.016 --> 00:01:35.290
MongoDB had an underscore id,
this is that but for this.

27
00:01:35.290 --> 00:01:41.446
And then we're gonna have
generated always as identity.

28
00:01:41.446 --> 00:01:46.510
This is going to be
an arrow incrementing id.

29
00:01:46.510 --> 00:01:50.657
So the first record that we're going
to insert into this database, or

30
00:01:50.657 --> 00:01:55.670
table rather, is gonna have id one,
then we'll have id2, then id3, then id4.

31
00:01:55.670 --> 00:01:58.080
And it will keep track of that for us.

32
00:01:58.080 --> 00:02:01.590
We don't have to keep track of it.

33
00:02:01.590 --> 00:02:06.405
That's what this generated always as
identity means that's what it's for.

34
00:02:06.405 --> 00:02:11.401
In previous versions of Postgres,
this was called a serial.

35
00:02:11.401 --> 00:02:13.905
If you're familiar with Postgres,
you might have seen that before.

36
00:02:13.905 --> 00:02:17.637
It's not exactly the same thing but
it's really close.

37
00:02:17.637 --> 00:02:20.370
The reason why they switched to
generated always as identity.

38
00:02:20.370 --> 00:02:23.554
This is actually part of
the official SQL spec.

39
00:02:23.554 --> 00:02:28.248
So there is a an SQL spec that all of
these SQL Server, and Postgres, and

40
00:02:28.248 --> 00:02:33.500
MySQL share, and for the most part,
they're relatively compatible.

41
00:02:33.500 --> 00:02:35.529
But serial was a Postgres thing, and so

42
00:02:35.529 --> 00:02:39.180
they wanted to come back to
the the official SQL way of doing it.

43
00:02:39.180 --> 00:02:42.330
And so that's why they came into
generated always as identity.

44
00:02:42.330 --> 00:02:45.992
So for example, I think this create tables
statement that we're about to issue,

45
00:02:45.992 --> 00:02:48.580
I think it would work as is with MySQL,
for example.

46
00:02:48.580 --> 00:02:49.950
Not all of them will,
but some of them will.

47
00:02:52.180 --> 00:02:54.780
User id, okay,
then we're gonna have a user name.

48
00:02:56.670 --> 00:02:58.080
We have to tell what kind of thing it is.

49
00:02:58.080 --> 00:03:02.560
Whereas this was an integer, right,
which is gonna be a number 1234, right?

50
00:03:02.560 --> 00:03:05.330
The username we want it to be
a string of characters, right?

51
00:03:05.330 --> 00:03:08.630
So in SQL, you call that a VARCHAR or

52
00:03:08.630 --> 00:03:13.030
a variable amount of characters,
or a string.

53
00:03:14.460 --> 00:03:16.942
So this varchar we're
gonna give it a length,

54
00:03:16.942 --> 00:03:21.030
we're gonna say usernames can only
be 25 long, that's what this means.

55
00:03:22.060 --> 00:03:26.190
It's going to be unique, so
no two people can have the same username,

56
00:03:26.190 --> 00:03:27.730
I think that makes sense.

57
00:03:27.730 --> 00:03:32.730
And we're gonna say this is never null,
which means if you're going to insert

58
00:03:32.730 --> 00:03:38.064
into this database, you must include a
username, or I will not accept this query.

59
00:03:40.273 --> 00:03:43.290
Okay, same thing with email, varchar.

60
00:03:45.130 --> 00:03:47.850
We'll make this 50 I don't know if
that's a good length for emails.

61
00:03:47.850 --> 00:03:50.862
It's probably too short but
that's what we're doing for now.

62
00:03:50.862 --> 00:03:55.661
Unique, not null.

63
00:03:55.661 --> 00:04:00.616
Okay, full name for

64
00:04:00.616 --> 00:04:07.030
Varchar 100 not null.

65
00:04:07.030 --> 00:04:10.495
I don't know if full name 100
that's probably not long enough

66
00:04:10.495 --> 00:04:13.960
either like the king of Thailand
couldn't put his name in there.

67
00:04:13.960 --> 00:04:21.264
If you've never looked at the king
of Thailand name look at it a lot.

68
00:04:21.264 --> 00:04:26.240
[LAUGH] last login we'll
make this a timestamp.

69
00:04:27.680 --> 00:04:31.213
So what we're gonna do here is
every time that the user logs in,

70
00:04:31.213 --> 00:04:34.890
we're going to log that they've
logged in with this last login.

71
00:04:34.890 --> 00:04:37.945
And this is useful for if someone
doesn't log in for like six months,

72
00:04:37.945 --> 00:04:39.261
you can just say, all right,

73
00:04:39.261 --> 00:04:42.070
clear out all of the people that
have been logged in six months.

74
00:04:43.820 --> 00:04:44.920
This one can be null, right?

75
00:04:44.920 --> 00:04:48.720
So if someone creates an account and
never logs in, this could be null, right?

76
00:04:48.720 --> 00:04:49.960
So we're not gonna put NOT NULL.

77
00:04:51.600 --> 00:04:56.240
And then we're gonna do a created_on,
of when they created this account.

78
00:04:56.240 --> 00:04:58.245
This would be a timestamp.

79
00:04:58.245 --> 00:04:59.157
That's not null.

80
00:05:05.175 --> 00:05:06.367
Okay.

81
00:05:06.367 --> 00:05:07.015
And there you go.

82
00:05:07.015 --> 00:05:08.325
We now have created a table.

83
00:05:08.325 --> 00:05:10.852
If we put slash D you can see here,

84
00:05:10.852 --> 00:05:14.930
we have a user's table as
this first one represents.

85
00:05:14.930 --> 00:05:19.397
And then the second one, it creates this
little sequence type that it uses that to

86
00:05:19.397 --> 00:05:22.880
keep track of where we are in
that auto incrementing id.

87
00:05:22.880 --> 00:05:26.830
So all of those auto incrementing id's
will have their own little sequence in

88
00:05:26.830 --> 00:05:29.090
this list of relations thing.

89
00:05:29.090 --> 00:05:31.774
So something you can do
instead of using a bar chart,

90
00:05:31.774 --> 00:05:35.625
you can use something called text,
which is a different kind of data type.

91
00:05:35.625 --> 00:05:38.054
That basically says that we're
not putting an upper limit on it.

92
00:05:38.054 --> 00:05:40.616
It can be like 65,000 characters ish.

93
00:05:40.616 --> 00:05:43.708
I think 65,000 is the right one.

94
00:05:43.708 --> 00:05:48.973
But with varchar we can just
say like there's a hard cap

95
00:05:48.973 --> 00:05:56.202
at this that we don't want people
to have 65,000 character emails.

96
00:05:56.202 --> 00:06:02.177
There's a lot of types of Postgres data.

97
00:06:02.177 --> 00:06:06.600
There, I dropped the link there into the
course notes of all the various different

98
00:06:06.600 --> 00:06:08.470
kinds of data types for Postgres.

99
00:06:08.470 --> 00:06:11.495
Feel free to check that out if you're
interested in seeing what other types

100
00:06:11.495 --> 00:06:12.175
are available.

101
00:06:12.175 --> 00:06:14.361
Or there will be probably
a course done on that as well.

102
00:06:18.712 --> 00:06:20.490
All right, so now we have a table.

103
00:06:20.490 --> 00:06:25.428
Tables empty, so let's go ahead and
insert something into that table.

104
00:06:25.428 --> 00:06:30.323
So next thing we're gonna do is
we're gonna do insert into this is

105
00:06:30.323 --> 00:06:34.770
going to allow us to do
an insert into the database.

106
00:06:34.770 --> 00:06:36.500
So we're going to insert into users.

107
00:06:36.500 --> 00:06:38.050
That's the name of our table.

108
00:06:38.050 --> 00:06:40.360
And we're going to insert a username.

109
00:06:40.360 --> 00:06:43.962
So we have to actually type out
the name like of the columns or

110
00:06:43.962 --> 00:06:46.648
the fields that we're gonna be putting in.

111
00:06:46.648 --> 00:06:52.382
Email, full name and created_on like that,

112
00:06:52.382 --> 00:06:56.950
and then we're going to say values.

113
00:06:56.950 --> 00:07:02.770
And this is gonna go in that same order.

114
00:07:02.770 --> 00:07:09.040
So the username we're gonna
say is btholt By the way,

115
00:07:09.040 --> 00:07:14.991
you must use single quotes here do
not use double quotes in SQL or

116
00:07:14.991 --> 00:07:18.266
SQL you have to use single quotes.

117
00:07:18.266 --> 00:07:23.203
Some emails lol@example.com,
name is Brian Holt and

118
00:07:23.203 --> 00:07:29.925
then this is gonna be the created on and
so we wanna created on to be right now,

119
00:07:29.925 --> 00:07:34.040
right cuz I'm creating
my account right now.

120
00:07:34.040 --> 00:07:37.540
So I'm gonna say now like that that's
a function built into Postgres.

121
00:07:37.540 --> 00:07:39.770
That's gonna give me
the current timestamp back.

122
00:07:42.010 --> 00:07:46.100
Okay, I'm gonna close this parentheses
right here, put a semicolon at the end.

123
00:07:47.270 --> 00:07:50.580
And you can see here I have an insert 01.

124
00:07:50.580 --> 00:07:58.760
This one represents that I successfully
inserted something into my database.

125
00:07:58.760 --> 00:08:00.290
The 0 represents the oid.

126
00:08:01.350 --> 00:08:04.980
Which we're not covering nor
using throughout the span of this course.

127
00:08:04.980 --> 00:08:08.770
So no worries about it just ,yeah.

128
00:08:08.770 --> 00:08:10.820
It's not something we're going to cover.

129
00:08:10.820 --> 00:08:11.382
It's not important.

130
00:08:15.349 --> 00:08:16.420
All right.

131
00:08:16.420 --> 00:08:20.186
So now we've inserted something
into our database that is like at

132
00:08:20.186 --> 00:08:23.000
the base level of how you
insert things into SQL.

133
00:08:24.130 --> 00:08:27.560
This language here this
CREATE TABLE this insert into.

134
00:08:27.560 --> 00:08:30.620
This is what SQL looks like it
almost reads like English sometimes.

135
00:08:30.620 --> 00:08:32.330
So, which is nice.

136
00:08:32.330 --> 00:08:35.320
I like SQL for
that reason ends up being fairly readable.

137
00:08:36.510 --> 00:08:39.680
So now I wanna get it out I
wanna read from the database.

138
00:08:39.680 --> 00:08:41.190
How would I do that?

139
00:08:41.190 --> 00:08:46.398
Well, the most basic easy way
to do that is to say select

140
00:08:46.398 --> 00:08:54.350
star which is gonna mean everything right
select everything from users like that.

141
00:08:54.350 --> 00:08:59.910
And you can see here, this will read back
everything that I inserted into users.

142
00:08:59.910 --> 00:09:03.570
So select is basically saying get this
stuff out of the database stars keep

143
00:09:03.570 --> 00:09:06.180
saying, I don't wanna do any projection,
right?

144
00:09:06.180 --> 00:09:07.620
This is where you would
do the projection part.

145
00:09:07.620 --> 00:09:08.730
We talked about that in MongoDB.

146
00:09:08.730 --> 00:09:13.729
If I wanted to do that, I would just say
select username, and maybe full name.

147
00:09:15.400 --> 00:09:17.310
Like that and
this would only select username and

148
00:09:17.310 --> 00:09:19.280
full name it would leave
everything else behind.

149
00:09:20.310 --> 00:09:23.420
So the star is a wild card means
select everything from it.

150
00:09:26.230 --> 00:09:29.820
And use just say from
which table from users.

151
00:09:29.820 --> 00:09:33.330
Notice here on last login,
it's null, right?

152
00:09:33.330 --> 00:09:34.140
Cuz we didn't provide it.

153
00:09:34.140 --> 00:09:36.130
So it just says, okay,
you didn't give it to me.

154
00:09:36.130 --> 00:09:37.420
That's gotta be null.

155
00:09:37.420 --> 00:09:40.839
So this user, btholt,
has never logged into our system.

156
00:09:42.720 --> 00:09:44.510
So it's good question here.

157
00:09:44.510 --> 00:09:50.209
Is there a default length or do we always
have to specify length for each field?

158
00:09:50.209 --> 00:09:54.802
With varchar, you do have to
specify how long the string is, or

159
00:09:54.802 --> 00:09:58.850
how long the string could potentially be.

160
00:09:58.850 --> 00:10:00.330
Again, use that textfield.

161
00:10:00.330 --> 00:10:04.530
That's kind of how you're saying I give
up there's no upper bounds on this.

162
00:10:04.530 --> 00:10:07.060
use as much space is necessary.

163
00:10:07.060 --> 00:10:10.775
There's some other subtle
differences between varchar and

164
00:10:10.775 --> 00:10:13.977
text that probably outside
the scope of this class,

165
00:10:13.977 --> 00:10:17.060
but it has to do with like
how much inquiry from them

