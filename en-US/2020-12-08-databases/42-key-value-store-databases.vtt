WEBVTT

1
00:00:00.590 --> 00:00:04.553
So the three things I've talked about so
far, document databases,

2
00:00:04.553 --> 00:00:07.300
relational databases, and graph databases.

3
00:00:10.700 --> 00:00:13.081
They're more used for storing data.

4
00:00:13.081 --> 00:00:17.867
They're more for
being original sources of truth.

5
00:00:17.867 --> 00:00:22.265
And then yeah, they're meant to
be original sources of truth.

6
00:00:22.265 --> 00:00:24.465
I think that's what I
wanted to say about that.

7
00:00:24.465 --> 00:00:26.872
A key-value store is actually
an entirely different beast, and

8
00:00:26.872 --> 00:00:28.195
used in an entirely different way.

9
00:00:28.195 --> 00:00:30.355
Usually it's a companion
to another database.

10
00:00:30.355 --> 00:00:34.208
I'm gonna say usually,
cuz I have seen people do very strange and

11
00:00:34.208 --> 00:00:36.882
unexpected things with key-value stores.

12
00:00:36.882 --> 00:00:41.579
But suffice to say,
That's not the common use case for these.

13
00:00:43.422 --> 00:00:47.968
So you can think of a key-value
store as just the world's

14
00:00:47.968 --> 00:00:51.370
largest JavaScript object, right?

15
00:00:51.370 --> 00:00:54.797
You can set a key on an object
to be some sort of value.

16
00:00:54.797 --> 00:00:56.794
And then later, you can come back and

17
00:00:56.794 --> 00:01:00.280
say give me back the key that I
stored in this particular object.

18
00:01:02.710 --> 00:01:04.810
This ends up being really useful for
a couple of things.

19
00:01:04.810 --> 00:01:07.540
One of them is for caching, right?

20
00:01:07.540 --> 00:01:11.093
So if you have some sort of
very expensive operation to do,

21
00:01:11.093 --> 00:01:14.064
and you don't want to have
to redo it every single

22
00:01:14.064 --> 00:01:17.759
time that someone makes a request
to a particular endpoint,

23
00:01:17.759 --> 00:01:22.270
a key-value store is actually one of
the best things you can use for that.

24
00:01:22.270 --> 00:01:27.619
If you had a very expensive SQL query
that queries every user in the database,

25
00:01:27.619 --> 00:01:32.985
you can you can cache that temporarily
in a key-value store, such as Redis.

26
00:01:36.544 --> 00:01:37.750
What else is this used for?

27
00:01:37.750 --> 00:01:40.817
One of the things about
key-value stores is normally,

28
00:01:40.817 --> 00:01:45.190
you don't store data in there
that you can't afford to lose.

29
00:01:45.190 --> 00:01:49.121
So caching is a good example,
you can afford to lose your cache.

30
00:01:49.121 --> 00:01:54.640
It might suck to lose your cache,
but you're not gonna drop data.

31
00:01:54.640 --> 00:01:56.900
Another good use case would be telemetry.

32
00:01:56.900 --> 00:01:59.526
If you lose all of your telemetry for
a day, or something like that,

33
00:01:59.526 --> 00:02:01.108
it's probably not the end of the world.

34
00:02:01.108 --> 00:02:04.820
You don't want to, but if you lost it,
you wouldn't cry about it.

35
00:02:04.820 --> 00:02:09.620
Whereas, if you were storing bank
transactions in Redis, might be a problem.

36
00:02:09.620 --> 00:02:11.635
And a bigger example of this
will actually be memcache, and

37
00:02:11.635 --> 00:02:13.180
we'll talk about that
here in just a second.

38
00:02:15.740 --> 00:02:17.360
Again, people are gonna disagree with me.

39
00:02:17.360 --> 00:02:20.829
But I don't think it's
a controversial thing to say,

40
00:02:20.829 --> 00:02:26.270
is that you typically don't wanna use a
key-value store for mission critical data.

41
00:02:29.800 --> 00:02:32.063
So we'll get into it.

42
00:02:32.063 --> 00:02:33.540
I'll show you how to use
Redis here in just a second.

43
00:02:33.540 --> 00:02:37.385
But I just wanna let you know that there
are a couple other options out there that

44
00:02:37.385 --> 00:02:38.150
are not Redis.

45
00:02:38.150 --> 00:02:40.992
One of them is Postgres has
an ability called hstore,

46
00:02:40.992 --> 00:02:42.960
which is really a key-value store.

47
00:02:44.370 --> 00:02:47.060
So if you're already running Postgres, and

48
00:02:47.060 --> 00:02:51.802
you have key-value kind of things that
you wanna store, and performance is not

49
00:02:51.802 --> 00:02:57.290
necessarily the reason why you're doing
it, then hstore would be a good option.

50
00:02:57.290 --> 00:03:00.130
hstore, it's a query against Postgres.

51
00:03:00.130 --> 00:03:03.458
And a lot of times, that you're gonna use
a key-value store is to get away from

52
00:03:03.458 --> 00:03:05.079
overloading your database servers.

53
00:03:06.800 --> 00:03:09.986
And so you don't wanna just add more
things to your database server that kinda

54
00:03:09.986 --> 00:03:13.240
defeats the purpose of why you would use
a key-value store in the first place.

55
00:03:13.240 --> 00:03:16.295
So hstore is not gonna solve all of these
problems, but I just wanted to throw it

56
00:03:16.295 --> 00:03:18.720
out there that it is actually
possible to do it with Postgres.

57
00:03:20.170 --> 00:03:23.230
The most common one I
would say is memecached.

58
00:03:23.230 --> 00:03:27.570
I imagine many of you've probably heard of
memcache, probably have used memecached.

59
00:03:27.570 --> 00:03:30.668
Memcache is like the SQLite
of key-value stores,

60
00:03:30.668 --> 00:03:32.910
in the sense that it's very simple.

61
00:03:32.910 --> 00:03:36.988
It's very small, and it's meant
to do huge amounts of operations,

62
00:03:36.988 --> 00:03:40.790
because it's not gonna write
anything to disc ever.

63
00:03:40.790 --> 00:03:43.385
So if you turn off a computer, guess what?

64
00:03:43.385 --> 00:03:47.811
Your entire memcache goes away, so
that can be a little scary to people, so

65
00:03:47.811 --> 00:03:50.429
don't store essential stuff in memcache.

66
00:03:51.850 --> 00:03:55.189
But if you're just doing really
quick caching kind of things,

67
00:03:55.189 --> 00:03:57.969
memcache is actually a really
good option for that.

68
00:03:57.969 --> 00:04:00.709
It's, yeah,
the most simple program in the world.

69
00:04:00.709 --> 00:04:03.330
All you do is give it keys and
ask for keys.

70
00:04:03.330 --> 00:04:06.960
That's really the entire capability
of what memcache can do.

71
00:04:06.960 --> 00:04:09.166
Today we're gonna talk
about one called Redis.

72
00:04:09.166 --> 00:04:14.770
So I hear people say Redis, just sounds
weird to me, so I'm gonna stick to Redis.

73
00:04:16.620 --> 00:04:18.672
Redis stands for Remote Dictionary Server,

74
00:04:18.672 --> 00:04:21.484
I think that kinda makes sense
if you're a Python developer.

75
00:04:21.484 --> 00:04:25.908
It's a remote dictionary that
you can read and write to.

76
00:04:25.908 --> 00:04:27.133
I've used it a lot in my career.

77
00:04:27.133 --> 00:04:30.140
I'd say it's one of the most common
pieces of infrastructure that I see.

78
00:04:31.330 --> 00:04:33.950
I know Azure offers a managed Redis.

79
00:04:33.950 --> 00:04:38.740
I know AWS does,
a lot of companies offer Redis.

80
00:04:38.740 --> 00:04:40.730
It's an open source project as well.

81
00:04:40.730 --> 00:04:43.724
It doesn't have any restrictive licensing,
so it's pretty free to use for

82
00:04:43.724 --> 00:04:44.250
you as well.

83
00:04:45.300 --> 00:04:47.230
And it's a great companion
to any other database.

84
00:04:47.230 --> 00:04:49.570
So you'll use MongoDB and Redis.

85
00:04:49.570 --> 00:04:51.727
So you'll use Postgres and Redis together.

86
00:04:54.279 --> 00:04:58.110
So let's go ahead and get started with it.

87
00:04:58.110 --> 00:05:05.610
So I'm gonna copy this one right here,
And I'm gonna pop over to my commandline.

88
00:05:05.610 --> 00:05:06.999
I'm just gonna close this.

89
00:05:09.430 --> 00:05:16.095
And I'm gonna say docker ps, and
I'm gonna first kill my Neo4j.

90
00:05:16.095 --> 00:05:17.400
Again, you don't have to do this.

91
00:05:18.530 --> 00:05:22.210
If you wanna keep playing with Neo4j,
feel free to just leave it up and running.

92
00:05:22.210 --> 00:05:25.180
And now I'm going to
run this Redis server.

93
00:05:27.460 --> 00:05:29.620
So this will get Redis
running with my Redis.

94
00:05:29.620 --> 00:05:35.207
It'll expose port 6379,
which is the port that Redis runs on,

95
00:05:35.207 --> 00:05:37.964
and we're running 6.0.8.

96
00:05:37.964 --> 00:05:41.775
Okay, and
then I'm gonna copy this one here,

97
00:05:41.775 --> 00:05:47.060
this Docker exec, and
this should drop me directly into Redis.

98
00:05:49.220 --> 00:05:52.310
Okay, you can see here one, two,
so let's make this a lot bigger.

99
00:05:55.110 --> 00:05:58.959
So you can see here, I've just
dropped directly into 127.0.0.1:639,

100
00:05:58.959 --> 00:06:01.710
cuz I'm actually running this
from inside of the container.

101
00:06:01.710 --> 00:06:06.612
So I'm connecting locally,
technically, to Redis.

102
00:06:10.833 --> 00:06:14.170
So let's get this with the most
simple use case possible.

103
00:06:14.170 --> 00:06:16.390
I don't know, just ignore that.

104
00:06:18.040 --> 00:06:22.665
I'm just gonna say SET name,

105
00:06:22.665 --> 00:06:26.560
Brian Holt, like that.

106
00:06:26.560 --> 00:06:30.080
And it says, okay, I did that.

107
00:06:30.080 --> 00:06:32.790
I did the thing that you asked me to do,
I set Brian Holt.

108
00:06:32.790 --> 00:06:34.600
Now, what happens if I
wanna get Brian Holt?

109
00:06:36.050 --> 00:06:43.450
You can probably guess,
GET name Brian Holt.

110
00:06:43.450 --> 00:06:47.081
I mean, that's, let's be honest,
about 80% of how to use Redis right there.

111
00:06:47.081 --> 00:06:49.704
We could probably end the class,
and you would just be like, okay,

112
00:06:49.704 --> 00:06:51.140
I know enough about Redis right now.

113
00:06:52.140 --> 00:06:53.330
We're not gonna stop there.

114
00:06:53.330 --> 00:06:55.145
I'm gonna show you a bunch of other
really cool stuff you can do with Redis.

115
00:06:55.145 --> 00:07:00.254
But getting and setting keys is about
90% of why you wanna use Reddit,

116
00:07:00.254 --> 00:07:01.531
Reddit, Redis.

117
00:07:01.531 --> 00:07:05.090
Too close, we did use Redis at Reddit.

118
00:07:05.090 --> 00:07:05.890
That was confusing.

119
00:07:07.810 --> 00:07:14.725
Okay, so the primary use case here would
be, let's say I queried my Neo4j cluster,

120
00:07:14.725 --> 00:07:20.310
and I got a count of all the various
different facets of people.

121
00:07:20.310 --> 00:07:22.380
And that was a very
expensive query to run.

122
00:07:22.380 --> 00:07:26.430
What I would do is I would take that query
result, and I would put it in Redis.

123
00:07:26.430 --> 00:07:27.583
And I'd say all right,

124
00:07:27.583 --> 00:07:30.970
I have to rerun this query every
day to make sure this is fresh.

125
00:07:30.970 --> 00:07:34.285
But I can just come in here and say get
Neo4j results, and it would just give me

126
00:07:34.285 --> 00:07:38.140
back the results, so I don't have to
recalculate it every single time, right?

127
00:07:38.140 --> 00:07:41.470
So it's a cache of what
I did from Postgres.

