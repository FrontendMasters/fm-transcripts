WEBVTT

1
00:00:00.515 --> 00:00:02.776
So let's go write some queries for this.

2
00:00:02.776 --> 00:00:10.149
We're going to talk about joins like this
is the secret sauce of an SQL database.

3
00:00:10.149 --> 00:00:13.202
This is like the reason why you
want to write SQL databases.

4
00:00:13.202 --> 00:00:15.322
You want to have access to
this power of joins and

5
00:00:15.322 --> 00:00:16.973
unions and those kind of fun things.

6
00:00:16.973 --> 00:00:18.926
I don't know if you think that's fun.

7
00:00:18.926 --> 00:00:21.388
I might have a warped
sense of what is fun.

8
00:00:21.388 --> 00:00:23.605
I don't know you'll have to tell me.

9
00:00:26.835 --> 00:00:28.279
So let's just kind of get started.

10
00:00:28.279 --> 00:00:32.988
First I'm going to say first

11
00:00:32.988 --> 00:00:38.090
select comment ID, user ID and

12
00:00:38.090 --> 00:00:45.561
left comment 20 as preview, so well left.

13
00:00:45.561 --> 00:00:46.861
These comments are pretty long.

14
00:00:46.861 --> 00:00:51.356
And I don't want to display
all the ones otherwise it

15
00:00:51.356 --> 00:00:54.431
makes it really hard for me to read.

16
00:00:54.431 --> 00:00:58.561
So left comment just means give me
the first 20 characters cut off everything

17
00:00:58.561 --> 00:00:59.570
after that right.

18
00:00:59.570 --> 00:01:03.922
So the first 20 characters will be
left If you want to take the last

19
00:01:03.922 --> 00:01:07.275
20 characters as you might guess,
it's right.

20
00:01:07.275 --> 00:01:10.514
And then to just kind of
clean up the column name,

21
00:01:10.514 --> 00:01:16.296
it'll return this it'll project this as
preview, you don't have to put that there.

22
00:01:16.296 --> 00:01:17.648
It just makes it easier to read.

23
00:01:17.648 --> 00:01:22.227
So from comments where

24
00:01:22.227 --> 00:01:26.809
board ID equals 39.

25
00:01:26.809 --> 00:01:30.589
Okay, so this gives me a common ID,

26
00:01:30.589 --> 00:01:35.132
a user ID and
then the preview of that text.

27
00:01:35.132 --> 00:01:38.532
Now if I'm going to try and
display this to my users,

28
00:01:38.532 --> 00:01:43.341
my users don't care what the user ideas,
they want to know the user name.

29
00:01:43.341 --> 00:01:45.933
They don't want to know
what the user ideas.

30
00:01:45.933 --> 00:01:47.174
But where's that user information?

31
00:01:47.174 --> 00:01:48.513
Where's the username actually live?

32
00:01:48.513 --> 00:01:52.656
It doesn't live in the comment
more it shouldn't, right?

33
00:01:52.656 --> 00:01:55.352
It lives in the users table.

34
00:01:55.352 --> 00:02:00.965
So I guess this kind of brings us back to
a fun foundational truth of databases.

35
00:02:00.965 --> 00:02:03.449
You wanna have one source of truth, right?

36
00:02:03.449 --> 00:02:08.185
So for a username, you wanna have one
place where that username is stored and

37
00:02:08.185 --> 00:02:11.968
then you want to use that
username everywhere else, right?

38
00:02:11.968 --> 00:02:13.814
You don't wanna duplicate the data.

39
00:02:13.814 --> 00:02:15.911
You want to have a single source of truth.

40
00:02:15.911 --> 00:02:18.579
This is just kind of a general
programming kind of,

41
00:02:18.579 --> 00:02:22.425
principle but in this particular case,
like, let's say we had user ID,

42
00:02:22.425 --> 00:02:26.538
instead of user ID, we had username and
we were doing everything by username.

43
00:02:26.538 --> 00:02:31.259
That's bad because if the user
ever updates their username,

44
00:02:31.259 --> 00:02:34.263
we now have to change that everywhere.

45
00:02:34.263 --> 00:02:37.373
If you've ever tried to
keep data in sync before,

46
00:02:37.373 --> 00:02:40.273
you just know,
data always falls out of sync.

47
00:02:40.273 --> 00:02:41.743
It's just a hard truth,

48
00:02:41.743 --> 00:02:45.811
the hard reality of writing code that
you can never keep data in sync.

49
00:02:45.811 --> 00:02:48.874
So instead, we have a user table
that contains all the user data and

50
00:02:48.874 --> 00:02:52.503
then we're gonna use the user ID as a
foreign key and refer to that everywhere.

51
00:02:52.503 --> 00:02:55.629
And then if that user wants
to update their username,

52
00:02:55.629 --> 00:02:59.455
they update it in one place and
it updates magically everywhere.

53
00:03:03.567 --> 00:03:06.903
So let's make a better query.

54
00:03:06.903 --> 00:03:12.036
That's going to return to us
that particular users username.

55
00:03:12.036 --> 00:03:17.551
So we're going to select

56
00:03:17.551 --> 00:03:26.218
comment_id, comments.user_id,

57
00:03:26.218 --> 00:03:32.258
users.username, time,

58
00:03:32.258 --> 00:03:37.253
LEFT(comment 20,

59
00:03:40.455 --> 00:03:42.688
AS preview,

60
00:03:48.639 --> 00:03:54.915
FROM, user, or FROM comments rather.

61
00:03:57.176 --> 00:04:02.309
Then here's where the fun comes in,
you're gonna say INNER Join users.

62
00:04:02.309 --> 00:04:10.267
So you're gonna we're just
selecting from comments.

63
00:04:10.267 --> 00:04:12.270
And then we're gonna join data from users.

64
00:04:12.270 --> 00:04:14.185
And they're gonna say on,

65
00:04:14.185 --> 00:04:18.858
you have to give it the clause of
how it knows how to match things up.

66
00:04:18.858 --> 00:04:23.951
And I'm gonna say, comments

67
00:04:23.951 --> 00:04:30.272
User-id Equals users.user_id.

68
00:04:30.272 --> 00:04:33.610
It kind of sounds like if these two things
match up, that means they go together.

69
00:04:33.610 --> 00:04:37.747
Where am I going to do it for one board.

70
00:04:37.747 --> 00:04:40.025
So we're gonna do board id equals 39.

71
00:04:40.025 --> 00:04:45.468
Where, board, id equals 39.

72
00:04:49.719 --> 00:04:52.080
Now you can see comments,

73
00:04:52.080 --> 00:04:57.781
id 524 the username that that
person uses is this all right?

74
00:04:57.781 --> 00:05:03.062
And so now we have enough data to
go back and actually correlate it.

75
00:05:03.062 --> 00:05:05.702
We can actually displays cuz now
we know their usernames, right?

76
00:05:05.702 --> 00:05:08.059
And we know what time they posted it.

77
00:05:08.059 --> 00:05:09.278
This is enough data for

78
00:05:09.278 --> 00:05:13.396
us to go and actually make the display
of the message board, for board 39.

79
00:05:16.539 --> 00:05:20.627
So let's talk a tiny second about this
line right there instead of select No, so

80
00:05:20.627 --> 00:05:22.533
we're saying comments dot user id.

81
00:05:22.533 --> 00:05:25.477
We could have said users
that user ID as well,

82
00:05:25.477 --> 00:05:29.503
they're gonna end up being the same,
but it's ambiguous for

83
00:05:29.503 --> 00:05:34.704
us to just say user ID, we have to specify
which of the same user IDs that we want.

84
00:05:34.704 --> 00:05:36.076
You can't be ambiguous.

85
00:05:36.076 --> 00:05:40.918
Whereas, comment_id, it knows comment_id
only exists inside of comments,

86
00:05:40.918 --> 00:05:42.921
it doesn't exist inside a user.

87
00:05:42.921 --> 00:05:46.666
So we don't have to put
the comments.comments_id.

88
00:05:46.666 --> 00:05:48.122
Not ambiguous.

89
00:05:48.122 --> 00:05:51.481
In fact,
I think we could have left out username.

90
00:05:51.481 --> 00:05:55.975
We could have,
because that's not ambiguous either.

91
00:05:55.975 --> 00:06:00.511
I think let's just try it.

92
00:06:00.511 --> 00:06:05.479
Yeah.

93
00:06:05.479 --> 00:06:08.112
See, we didn't have to put that one
there cause it's not ambiguous.

94
00:06:08.112 --> 00:06:09.426
There's only one username.

95
00:06:09.426 --> 00:06:12.804
Yeah, but when you start
doing multiple joints, right?

96
00:06:12.804 --> 00:06:16.707
So we did one join, but you can do
multiple joints across many tables.

97
00:06:16.707 --> 00:06:21.512
It starts to just, just become easier
to like always put out users.com and

98
00:06:21.512 --> 00:06:24.573
start and
just kind of keep it really straight.

99
00:06:24.573 --> 00:06:30.375
So cool, right?

100
00:06:30.375 --> 00:06:32.311
Like this is how you do joins in SQL.

101
00:06:32.311 --> 00:06:37.076
This is kind of like one of the big
powerful things about relational databases

102
00:06:37.076 --> 00:06:40.095
is that one user can have many comments,
right?

103
00:06:40.095 --> 00:06:43.557
We don't have to store that user's
information across many comments,

104
00:06:43.557 --> 00:06:46.860
whereas in MongoDB, that actually
might be the correct way to do it.

105
00:06:46.860 --> 00:06:48.812
In SQL,
we can store the users in one spot.

106
00:06:48.812 --> 00:06:51.572
And there are many comments
in another place, right?

107
00:06:51.572 --> 00:06:54.831
Called a one to many relationship right?

108
00:06:54.831 --> 00:06:56.180
One user has many comments.

109
00:06:56.180 --> 00:06:59.279
And as you may imagine,
there's many to many relationships.

110
00:06:59.279 --> 00:07:02.557
There's many one, there's a bunch of
way to do these kind of relations.

111
00:07:02.557 --> 00:07:05.474
Right now we're just
talking about one too many.

112
00:07:05.474 --> 00:07:09.821
And like one board has
many comments as well.

113
00:07:09.821 --> 00:07:13.590
So you can have multiple one to
many relationships across tables.

