WEBVTT

1
00:00:00.180 --> 00:00:04.320
Let's get into some coding with Neo4J.

2
00:00:04.320 --> 00:00:08.460
So we're gonna write a really quick app
again with node js, the, with the bare

3
00:00:08.460 --> 00:00:13.780
bones front end that's going to talk to
a node server that's going to query Neo4j.

4
00:00:13.780 --> 00:00:17.378
So the first thing I want you to do
is I want you to pop over to your

5
00:00:17.378 --> 00:00:18.360
terminal here.

6
00:00:18.360 --> 00:00:23.618
I'm going to get out of here, I,'m going
to make a new directory with Neo4j sample.

7
00:00:23.618 --> 00:00:26.513
Remember that there's
that db samples repo,

8
00:00:26.513 --> 00:00:30.460
there's a link in the course notes for
you to pop on over there.

9
00:00:32.670 --> 00:00:38.557
Neo4j sample and here we're

10
00:00:38.557 --> 00:00:44.206
gonna say npm and Init -y and

11
00:00:44.206 --> 00:00:49.856
we're gonna say npm install

12
00:00:49.856 --> 00:00:55.036
express 4.17.1 and

13
00:00:55.036 --> 00:01:01.638
neo4j- driver at 4.1.2.

14
00:01:01.638 --> 00:01:03.650
That'll take into second to install.

15
00:01:03.650 --> 00:01:05.996
We got all those installed,

16
00:01:05.996 --> 00:01:10.994
make a directory [COUGH] We'll
make a directory called static

17
00:01:14.165 --> 00:01:21.970
And here we're gonna type
static/index.html and server.js.

18
00:01:21.970 --> 00:01:24.180
And we'll open this in Visual Studio code.

19
00:01:27.370 --> 00:01:30.080
Okay, we'll make that full screen here.

20
00:01:33.260 --> 00:01:39.016
Let's go ahead and
make our index HTML here.

21
00:01:40.600 --> 00:01:45.220
So we put html: 5, and,
hit Tab that's Emmet,

22
00:01:45.220 --> 00:01:49.550
rather expand this out to a full device.

23
00:01:49.550 --> 00:01:55.507
We'll call the title, Neo4j Sample.

24
00:01:55.507 --> 00:02:02.780
And then in here we're
gonna put two inputs.

25
00:02:02.780 --> 00:02:05.741
What our app is gonna do is it's gonna
take two people and it's gonna tell us

26
00:02:05.741 --> 00:02:08.940
the shortest path between these two people
of how they're connected in movies.

27
00:02:10.810 --> 00:02:18.103
Okay, so
we're gonna have input type equals text,

28
00:02:18.103 --> 00:02:23.242
then we'll have this be place holder

29
00:02:23.242 --> 00:02:29.060
equals Person 1 and id equals person 1.

30
00:02:30.270 --> 00:02:35.070
We'll copy that line here and

31
00:02:35.070 --> 00:02:40.062
make this person 2 then we'll

32
00:02:40.062 --> 00:02:44.100
have an id of Button btn.

33
00:02:48.680 --> 00:02:55.248
So a button with the id of
button that will be search.

34
00:02:55.248 --> 00:02:59.743
And then we'll do our pre code
thing here again pre code, and

35
00:02:59.743 --> 00:03:01.870
this will have an id of code.

36
00:03:03.500 --> 00:03:08.459
Okay, so that's all the html
that we need right there.

37
00:03:08.459 --> 00:03:13.279
Two inputs, a button, and
a pre formatted code block.

38
00:03:13.279 --> 00:03:17.735
Underneath that,
we're going to put a script tag.

39
00:03:18.925 --> 00:03:23.842
And in here we're gonna have
get our const btn equals

40
00:03:23.842 --> 00:03:27.206
document dot get element by id btn.

41
00:03:27.206 --> 00:03:30.365
And we'll do this four times here.

42
00:03:31.735 --> 00:03:37.258
This one will be code.

43
00:03:37.258 --> 00:03:42.610
This one will be person 1,

44
00:03:42.610 --> 00:03:47.730
person 1 and person 2 and

45
00:03:47.730 --> 00:03:51.474
person 2, okay?

46
00:03:51.474 --> 00:03:53.770
We're gonna add an event
listener on the button.

47
00:03:53.770 --> 00:03:57.240
So btn.addEventListener.

48
00:03:57.240 --> 00:03:58.581
And on click.

49
00:04:01.962 --> 00:04:04.004
People run, this async function.

50
00:04:10.863 --> 00:04:15.305
So first thing I'm gonna say
is code.inner = loading.

51
00:04:17.182 --> 00:04:20.210
Inner texts that is equals loading.

52
00:04:22.310 --> 00:04:28.987
And then we'll say const
res = a wait.fetch.

53
00:04:28.987 --> 00:04:30.516
And we're gonna search for.

54
00:04:33.001 --> 00:04:36.852
Rather I'm gonna hit await fetch rather

55
00:04:40.792 --> 00:04:47.020
And we're gonna go hit the,
get URL and question mark.

56
00:04:48.380 --> 00:04:50.390
Let's just do this with
the template string actually.

57
00:04:50.390 --> 00:04:55.633
So I'm going to do back
ticks here slash get I'm

58
00:04:55.633 --> 00:05:03.250
going to say question mark person
1 equals person.value, right?

59
00:05:04.370 --> 00:05:10.420
We have to encode your eyes well encode UI
component so that it can fit into a URL.

60
00:05:10.420 --> 00:05:14.666
I'm gonna say person 1.value.

61
00:05:19.122 --> 00:05:25.580
And person 2 equals same thing
here in code UI component.

62
00:05:27.560 --> 00:05:33.254
Person 2.value underneath

63
00:05:33.254 --> 00:05:41.913
that will say const json = await res.json.

64
00:05:41.913 --> 00:05:48.559
And lastly code.InnerText = new

65
00:05:48.559 --> 00:05:57.965
line + JSON.stringify(json), null, 4.

66
00:05:57.965 --> 00:06:01.580
So this is just going to go get out
to our API that we're about to write.

67
00:06:01.580 --> 00:06:03.410
It's going to go fetch that data.

68
00:06:03.410 --> 00:06:09.239
It's going to then put that into a JSON
object, then we can use JSON stringify

69
00:06:09.239 --> 00:06:14.454
to put that into a nicely formatted
response that we can just look at.

70
00:06:14.454 --> 00:06:17.790
All right,
let's go open our server file now.

71
00:06:21.420 --> 00:06:27.400
const express = require (express).

72
00:06:27.400 --> 00:06:34.204
const neo4j = require neo4j driver.

73
00:06:34.204 --> 00:06:38.480
const connectionString

74
00:06:42.154 --> 00:06:47.140
Again we normally feed this in through
some sort of key management system.

75
00:06:47.140 --> 00:06:49.440
But today we just gonna say bolt: //.

76
00:06:49.440 --> 00:06:54.885
Bolt is the name of the protocol
that neo4j uses instead of Http,

77
00:06:54.885 --> 00:06:56.965
this one is called bolt.

78
00:06:56.965 --> 00:07:01.964
Local host and,
the port that that listens on is 7687.

79
00:07:01.964 --> 00:07:07.280
You can configure that but
by default that's the one that it uses.

80
00:07:08.790 --> 00:07:16.178
Const driver = neo4j.driver and
you have to give it that connectionString.

81
00:07:22.055 --> 00:07:24.989
Okay, async function and Init and

82
00:07:24.989 --> 00:07:30.663
then will immediately call that
a Init function underneath here.

83
00:07:35.040 --> 00:07:40.171
And let's set this to be
indent using spaces 2,

84
00:07:42.659 --> 00:07:47.220
Okay const session = driver.session.

85
00:07:47.220 --> 00:07:49.810
This is how you kind of acquire
a new session with the driver.

86
00:07:52.250 --> 00:07:53.670
I'm too far into this.

87
00:07:53.670 --> 00:07:59.320
But one first is const app
= express() like that.

88
00:07:59.320 --> 00:07:59.920
So now we have an app.

89
00:08:01.420 --> 00:08:06.510
Here we're gonna say app.get(/'get'),

90
00:08:06.510 --> 00:08:16.180
async (req, res) Here's we're
going to acquire a new session.

91
00:08:16.180 --> 00:08:21.120
So, again, Neo4j is going to manage
a pool of connections for you.

92
00:08:21.120 --> 00:08:25.330
This is how you get a session
to interact with Neo4j.

93
00:08:25.330 --> 00:08:31.014
So I'm gonna say const
session = driver.session.

94
00:08:34.498 --> 00:08:39.932
Const result = await session

95
00:08:39.932 --> 00:08:44.068
await session.run.

96
00:08:44.068 --> 00:08:50.180
And then here, this is where
we're gonna give it our query

97
00:08:50.180 --> 00:08:56.067
that we wanna send where
the cipher that we want to send.

98
00:08:56.067 --> 00:08:58.550
So let's do it this way.

99
00:08:58.550 --> 00:09:00.730
We'll put backticks here.

100
00:09:00.730 --> 00:09:03.560
And then I want to just put this
in here so it's nicely formatted.

101
00:09:03.560 --> 00:09:08.464
The nice thing about Neo4j is it
doesn't care about whitespace.

102
00:09:08.464 --> 00:09:13.275
So we're actually going to go use that
same query that we were using before to

103
00:09:13.275 --> 00:09:16.657
match people how far away
are they from Kevin Bacon but

104
00:09:16.657 --> 00:09:19.376
we're gonna genericized it a little bit.

105
00:09:19.376 --> 00:09:21.870
Is genericized a word because it is now.

106
00:09:23.690 --> 00:09:25.655
MATCH path.

107
00:09:25.655 --> 00:09:26.155
Coarse.

108
00:09:27.165 --> 00:09:28.755
Sounds like jazzercise.

109
00:09:29.985 --> 00:09:32.035
Sometimes I entertain myself.

110
00:09:32.035 --> 00:09:38.804
Okay shortest path And

111
00:09:38.804 --> 00:09:43.563
here when I say, First person is going

112
00:09:43.563 --> 00:09:47.760
to be first colon person ,name.

113
00:09:47.760 --> 00:09:52.416
And we have the same problem here that
we had with SQL that we need to be

114
00:09:52.416 --> 00:09:55.120
careful of what text we feed into here.

115
00:09:55.120 --> 00:09:58.140
So cipher injection is
a real thing here as well.

116
00:09:58.140 --> 00:10:00.650
So we're going to say dollar sign person.

117
00:10:00.650 --> 00:10:04.980
One and then we'll provide that
in as a parameterized query.

118
00:10:08.070 --> 00:10:12.147
Okay, then we're gonna put a dash here and

119
00:10:12.147 --> 00:10:16.904
we're going to put our star and
then a dash here and

120
00:10:16.904 --> 00:10:21.787
we don't want the angle bracket,
Second Person,

121
00:10:25.720 --> 00:10:32.734
And then here,
we don't want that Second Person

122
00:10:32.734 --> 00:10:38.910
name :$Person 2, Okay.

123
00:10:41.360 --> 00:10:48.990
Then here we're gonna say
UNWIND nodes (path) as node.

124
00:10:48.990 --> 00:10:54.575
I'm gonna say RETURN coalesce(node.name,

125
00:10:54.575 --> 00:11:00.298
node.title) As whatever
you want to call it and

126
00:11:00.298 --> 00:11:06.450
the return all we'll just
call it text here, okay?

127
00:11:08.000 --> 00:11:09.480
So that's going to be our query.

128
00:11:09.480 --> 00:11:12.590
Now we have to give it
the parameters that it needs.

129
00:11:12.590 --> 00:11:19.397
So for person 1,
we're going to give it req.quer.person1,

130
00:11:19.397 --> 00:11:24.860
and person 2 will be req.query.person2.

131
00:11:24.860 --> 00:11:27.827
Again, I just want to really
underscore this fact again.

132
00:11:27.827 --> 00:11:32.133
Do not directly just put person one
in here because they could put cipher

133
00:11:32.133 --> 00:11:36.560
querying language in there and
you would be in a world of hurt.

134
00:11:36.560 --> 00:11:40.286
So just let the Neo4j driver
do all that stuff for you,

135
00:11:40.286 --> 00:11:44.904
the Neo4j drivers made by them with
help from the community, and so

136
00:11:44.904 --> 00:11:49.540
they know very well how to prevent
these kind of injection attacks.

137
00:11:52.930 --> 00:11:56.774
Okay, so now we get we'll get
a result back results will be

138
00:11:56.774 --> 00:11:59.211
a query result you can see that here.

139
00:11:59.211 --> 00:12:07.747
So what I'm gonna do underneath this
session.run is I'm gonna say res.json.

140
00:12:09.202 --> 00:12:10.095
Status ok.

141
00:12:12.166 --> 00:12:22.121
And path:results.records.map.

142
00:12:22.121 --> 00:12:28.035
And then we're just going to do a quick
map here to do say record return.

143
00:12:28.035 --> 00:12:35.270
Record.get text.

144
00:12:35.270 --> 00:12:36.870
So what are we doing here?

145
00:12:36.870 --> 00:12:41.339
This actually gives me back record
object and it has like functions and

146
00:12:41.339 --> 00:12:43.010
things like that.

147
00:12:43.010 --> 00:12:45.400
What we want to do is we just
want to get the text out of it.

148
00:12:45.400 --> 00:12:48.303
So that's why we're going to just go
through I'm going to call record dot get

149
00:12:48.303 --> 00:12:49.970
text on each one of these records.

150
00:12:49.970 --> 00:12:55.690
Then path here will just be an array
of texts that we got back from Neo4j.

151
00:12:55.690 --> 00:12:57.330
So we have to massage
the data a little bit.

152
00:12:57.330 --> 00:12:59.080
We can't just return it raw.

153
00:12:59.080 --> 00:13:02.011
And then here we'll just call end.

154
00:13:02.011 --> 00:13:08.943
Then down here at the bottom,
you'll say await session.close().

155
00:13:08.943 --> 00:13:10.665
Cuz you have to tell the sessions,
all right, I'm done,

156
00:13:10.665 --> 00:13:11.800
you can reuse this connection again.

157
00:13:14.900 --> 00:13:22.512
And then we'll say app,
or const PORT = 3000,

158
00:13:22.512 --> 00:13:29.433
app.use(express.static) ./static and

159
00:13:29.433 --> 00:13:32.893
app.listen process or

160
00:13:32.893 --> 00:13:37.226
yeah, we'll just say port.

161
00:13:37.226 --> 00:13:46.261
And then console.log.listening

162
00:13:46.261 --> 00:13:51.983
on, http:// local

163
00:13:51.983 --> 00:13:56.210
host : + PORT.

164
00:13:56.210 --> 00:14:02.012
All right, that should be
everything that we need to get our,

165
00:14:02.012 --> 00:14:04.920
this results I messed this up.

166
00:14:04.920 --> 00:14:07.020
So you can see here on line 13 in line 26.

167
00:14:07.020 --> 00:14:10.810
I call this results in this results,
I'm gonna put an S there.

168
00:14:10.810 --> 00:14:15.235
So these are called the same
thing on line 26 on line 13.

169
00:14:15.235 --> 00:14:16.081
Okay, now I'm gonna save that.

170
00:14:16.081 --> 00:14:19.461
Now I'm gonna come to my terminal and

171
00:14:19.461 --> 00:14:25.030
I'm gonna say node server.js
listening on port 3000.

172
00:14:25.030 --> 00:14:26.500
I'm going to open that.

173
00:14:27.620 --> 00:14:31.870
So yeah, person 1 and person 2 up here.

174
00:14:31.870 --> 00:14:36.714
So let's put Charlize Theron and

175
00:14:36.714 --> 00:14:45.200
put Ken Reeves I don't know
I'm just making stuff up now.

176
00:14:48.290 --> 00:14:49.410
So we got an error here.

177
00:14:49.410 --> 00:14:50.400
Let's see what what happened.

178
00:14:56.560 --> 00:14:59.230
Expected parameter person 1.

179
00:14:59.230 --> 00:15:05.090
So here in our index HTML,
I forgot this equal signs here.

180
00:15:05.090 --> 00:15:06.750
So line 25.

181
00:15:06.750 --> 00:15:13.334
Get person 1 equals that and
person two equals that.

182
00:15:17.195 --> 00:15:19.078
Okay?
Just got to make sure you get

183
00:15:19.078 --> 00:15:19.984
this URL right.

184
00:15:19.984 --> 00:15:22.237
I knew that because I was looking here and

185
00:15:22.237 --> 00:15:26.611
it says I was expecting a parameter person
1 so I looked over here and server and

186
00:15:26.611 --> 00:15:30.210
you can see here is like that
should be passing that in.

187
00:15:30.210 --> 00:15:32.726
So it means that that was
definitely coming in undefined.

188
00:15:34.901 --> 00:15:37.310
So I should be able to
just refresh this page.

189
00:15:39.210 --> 00:15:41.490
And send it and there we go.

190
00:15:41.490 --> 00:15:44.614
So Charlize Theron and canneries
were both the devil's advocate so

191
00:15:44.614 --> 00:15:46.520
that's less interesting.

192
00:15:46.520 --> 00:15:51.335
So let's say Charlize Theron and
Tom Hanks.

193
00:15:55.140 --> 00:15:58.880
Well, they're both nothing to do
that's again, less interesting.

194
00:15:58.880 --> 00:16:01.989
How about Keanu Reeves and Tom Hanks?

195
00:16:01.989 --> 00:16:06.742
There you go,so canneries was in
the replacements Jessica Thompson was in

196
00:16:06.742 --> 00:16:11.580
Cloud Atlas and then Tom Hanks is also
in Cloud Atlas with Jessica Thompson.

