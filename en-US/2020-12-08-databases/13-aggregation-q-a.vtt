WEBVTT

1
00:00:00.000 --> 00:00:04.603
One thing I do want to show you actually,
I have a link here in the notes.

2
00:00:04.603 --> 00:00:07.973
There are a lot of stages.

3
00:00:07.973 --> 00:00:15.032
So I showed you a bucket I
showed you he can do count.

4
00:00:15.032 --> 00:00:15.681
Match.

5
00:00:15.681 --> 00:00:16.462
I showed you match.

6
00:00:16.462 --> 00:00:22.575
I showed you sort there's projectors
redact, replace with sample.

7
00:00:22.575 --> 00:00:25.787
Also, like there's a lot of different
stuff you can do with the aggregation.

8
00:00:25.787 --> 00:00:26.882
Pipeline.

9
00:00:26.882 --> 00:00:30.760
How do you query buckets once you've
gone through the aggregation pipeline.

10
00:00:30.760 --> 00:00:33.281
What you get back is
an array of objects and

11
00:00:33.281 --> 00:00:36.604
you can treat those as you
would basically documents.

12
00:00:36.604 --> 00:00:37.939
Otherwise in your yourself.

13
00:00:37.939 --> 00:00:39.236
Collection.

14
00:00:39.236 --> 00:00:43.266
Beyond that, I'd have to go look at
exactly how you do it because I don't

15
00:00:43.266 --> 00:00:47.760
remember off the top my head every time
that I do the aggregation pipeline stuff,

16
00:00:47.760 --> 00:00:52.054
I have to go and read the docs line by
line because it's not something that I end

17
00:00:52.054 --> 00:00:53.610
up doing very frequently.

18
00:00:53.610 --> 00:00:57.670
But it's not terribly difficult you just
end up acquiring them like odd like normal

19
00:00:57.670 --> 00:00:58.199
objects.

20
00:00:58.199 --> 00:01:01.402
There's nothing special
you need to treat them.

21
00:01:01.402 --> 00:01:06.010
In fact, you can see here I did
literally query them right here.

22
00:01:06.010 --> 00:01:09.988
With the sword I just said, hey,
sort this and count by negative one.

23
00:01:09.988 --> 00:01:14.048
You could bucket these again by saying
here's all the ones that have more than

24
00:01:14.048 --> 00:01:14.556
800.

25
00:01:14.556 --> 00:01:17.378
And here's all the ones
that have less than 800.

26
00:01:17.378 --> 00:01:20.004
It's all just objects to MongoDB.

27
00:01:20.004 --> 00:01:20.909
That's a good question.

28
00:01:20.909 --> 00:01:23.987
Are the buckets saved or
indexed or anything like that?

29
00:01:23.987 --> 00:01:25.951
Not by default, by default,

30
00:01:25.951 --> 00:01:29.574
it's just gonna print out
what you ask it to print out.

31
00:01:29.574 --> 00:01:32.244
It does have the ability to actually
write to another collection.

32
00:01:32.244 --> 00:01:36.746
So let's say you're doing like daily stats
on how many people visited your website,

33
00:01:36.746 --> 00:01:40.014
right and you were keeping all
of your sessions in a database.

34
00:01:40.014 --> 00:01:42.376
One that's not really a good use case for
MongoDB.

35
00:01:42.376 --> 00:01:48.055
But you could potentially hit
the software exists to do that.

36
00:01:48.055 --> 00:01:52.447
And then at the end of the day,
you wanted to aggregate that into like,

37
00:01:52.447 --> 00:01:55.286
how many Firefox users visited and
how many.

38
00:01:55.286 --> 00:01:58.098
Chrome users and edge users and
all that kind of stuff.

39
00:01:58.098 --> 00:02:00.149
You could do that with
the aggregation pipeline.

40
00:02:00.149 --> 00:02:04.645
And then you could have that right to
another, like daily starts collection and

41
00:02:04.645 --> 00:02:07.075
then you could read from that collection.

42
00:02:07.075 --> 00:02:08.791
Every day, right?

43
00:02:08.791 --> 00:02:12.334
So by default, it doesn't save anywhere.

44
00:02:12.334 --> 00:02:14.826
But you could write that
to a another collection.

45
00:02:14.826 --> 00:02:18.030
Obviously, that's not gonna be
indexed by default either, but

46
00:02:18.030 --> 00:02:20.660
there's no reason you
couldn't index that as well.

47
00:02:20.660 --> 00:02:25.778
Michael see, so
is there any documentation we can go

48
00:02:25.778 --> 00:02:30.677
explore I left some link
to it in the course notes.

49
00:02:30.677 --> 00:02:32.523
It's on the aggregation
page at the bottom.

50
00:02:32.523 --> 00:02:33.026
I'm sure.

51
00:02:33.026 --> 00:02:36.347
Front of masters will also
put a course note here.

52
00:02:36.347 --> 00:02:37.186
Actually.
I don't know,

53
00:02:37.186 --> 00:02:38.810
&gt;&gt; Put it on the object.

54
00:02:38.810 --> 00:02:40.023
IDs are randomly generated.

55
00:02:40.023 --> 00:02:41.801
Are.

56
00:02:41.801 --> 00:02:45.203
Is there any serial order father?

57
00:02:45.203 --> 00:02:51.142
&gt;&gt; That's a good question are the like
let's see if I can find one in here.

58
00:02:51.142 --> 00:02:54.667
Yeah, like these object IDs right here.

59
00:02:54.667 --> 00:02:59.613
I don't actually really know precisely
the algorithm that goes into the one thing

60
00:02:59.613 --> 00:03:03.924
that I do know is it actually does
create does contain a time stamp in it.

61
00:03:03.924 --> 00:03:06.036
So it is based on the time
when was written,

62
00:03:06.036 --> 00:03:08.336
you can actually pull
the time stamp out of it.

63
00:03:08.336 --> 00:03:12.532
You'd have to go look it up if
you just search for like MongoID.

64
00:03:12.532 --> 00:03:16.991
Time stamp,
it'll contain the creation time in it.

65
00:03:16.991 --> 00:03:21.988
So you can actually, you don't actually
if you're looking at creation times,

66
00:03:21.988 --> 00:03:26.325
just know that the object idea
automatically contains that whether or

67
00:03:26.325 --> 00:03:27.810
not you created or not.

68
00:03:27.810 --> 00:03:29.897
That's the only interesting
thing I can remember about it.

69
00:03:29.897 --> 00:03:32.147
And the other thing is it's
always guaranteed unique.

70
00:03:33.774 --> 00:03:36.319
But the randomization is through the time.

71
00:03:36.319 --> 00:03:41.350
Even if two objects are inserted
relatively close to each other in time.

72
00:03:41.350 --> 00:03:45.945
They will never have the same ID
this this object ID here 100% of

73
00:03:45.945 --> 00:03:49.738
the time will always be
totally unique to that object.

74
00:03:49.738 --> 00:03:50.420
Good question.

