WEBVTT

1
00:00:00.410 --> 00:00:04.050
So asked,
is database migration a common occurrence?

2
00:00:04.050 --> 00:00:05.703
Yes, the answer is yes.

3
00:00:05.703 --> 00:00:08.719
When I worked at Reddit,
we did a lot of database migration.

4
00:00:08.719 --> 00:00:11.829
So let's talk about database migration for
just a second.

5
00:00:11.829 --> 00:00:17.565
I guess,
particular in a different question.

6
00:00:17.565 --> 00:00:20.113
So I'm going to answer the question
that I had my head first and

7
00:00:20.113 --> 00:00:22.227
then I will go back and
ask her pratiques question.

8
00:00:22.227 --> 00:00:26.072
So, database migrations from the
perspective of I have one schema in my SQL

9
00:00:26.072 --> 00:00:29.378
database, and I need to have
a different schema in my database.

10
00:00:29.378 --> 00:00:34.167
This is called a migration,
which is why I was thinking about that,

11
00:00:34.167 --> 00:00:38.968
it's expensive and it sucks, and
if you can avoid it, you should.

12
00:00:38.968 --> 00:00:43.770
So with SQL, it's really good for you
to anticipate your schema needs upfront

13
00:00:43.770 --> 00:00:48.425
because when you have to move and
do alter table commands, it's unfunded,

14
00:00:48.425 --> 00:00:51.792
unfunded is the correct term for
what that feels like.

15
00:00:51.792 --> 00:00:55.475
So there's a Django that's what
we used to write at Reddit.

16
00:00:55.475 --> 00:00:58.739
Django has an ability called South
which they've now renamed to something

17
00:00:58.739 --> 00:01:01.396
else which will actually do
ALTER TABLE statements for you.

18
00:01:01.396 --> 00:01:05.496
And it's messy, it takes a long time,
so it's possible,

19
00:01:05.496 --> 00:01:10.262
but it's better if you can anticipate
your needs upfront politics.

20
00:01:10.262 --> 00:01:15.176
Actual question is about migrating
from one database to another

21
00:01:15.176 --> 00:01:17.180
like wholesale, right?

22
00:01:17.180 --> 00:01:24.172
If I need to move from Postgres
to MongoDB what's that look like?

23
00:01:24.172 --> 00:01:26.606
I don't see that necessarily as much,

24
00:01:26.606 --> 00:01:31.179
I've never been party to that we actually
did consider when I was at Reddit

25
00:01:31.179 --> 00:01:35.186
moving from MySQL to Postgres to
get some of that JSON goodness.

26
00:01:35.186 --> 00:01:38.055
And we ended up not doing
it because it's expensive.

27
00:01:38.055 --> 00:01:42.730
It's expensive in the fact that you
have to write a lot of code that

28
00:01:42.730 --> 00:01:47.660
takes data out of one database
normalizes and sticks into another and

29
00:01:47.660 --> 00:01:51.499
it just never typically goes
the way that you want to.

30
00:01:51.499 --> 00:01:55.696
I would only say you need to
have a very good reason, and

31
00:01:55.696 --> 00:01:58.615
even if you've that good of a reason,

32
00:01:58.615 --> 00:02:03.739
it still might not be worth it to
move from one database to another.

33
00:02:03.739 --> 00:02:05.892
Migrating databases is really tough.

34
00:02:05.892 --> 00:02:09.695
So I would only do it if you had
catastrophic reasons that you had to move

35
00:02:09.695 --> 00:02:10.606
off one of them.

36
00:02:10.606 --> 00:02:14.892
Mina is asking we had a lot of trouble
with subscription using pub sub Redis.

37
00:02:14.892 --> 00:02:17.129
Any advice to optimize it?

38
00:02:17.129 --> 00:02:22.162
Unfortunately, I don't have enough
experience with the pub sub

39
00:02:22.162 --> 00:02:27.211
mechanisms of reticence,
to give you any sort of useful advice.

40
00:02:27.211 --> 00:02:31.566
But when you find the answer, I would love
for you to tweet me at and tell me what

41
00:02:31.566 --> 00:02:36.331
your experiences because I haven't heard
of a lot of people using it in production.

42
00:02:36.331 --> 00:02:40.229
So, best of luck,
I think it's what I have to say,

43
00:02:40.229 --> 00:02:43.603
[LAUGH] Congratulations
on making this far.

44
00:02:43.603 --> 00:02:48.116
This is a very long course about
a lot of information all at once.

45
00:02:48.116 --> 00:02:53.937
So just congratulations, I'm impressed
with myself that I made it this far,

46
00:02:53.937 --> 00:02:56.151
right, I know these things.

47
00:02:56.151 --> 00:02:58.867
I just want to give you a some
like parting advice on like how to

48
00:02:58.867 --> 00:03:02.333
choose the correct database because I
think that's kind of one of my points of

49
00:03:02.333 --> 00:03:05.638
this course is I want you to know when
you're going into these decisions,

50
00:03:05.638 --> 00:03:07.535
what trade offs you're making, right.

51
00:03:07.535 --> 00:03:10.090
I want you to have the pros and
cons here so

52
00:03:10.090 --> 00:03:15.211
that whatever problem you're tackling,
you choose the right tool for the job.

53
00:03:15.211 --> 00:03:18.396
So I'm going to walk you through my
process of how, if I'm starting a new

54
00:03:18.396 --> 00:03:21.334
startup and I have a new app,
how I'm going to choose my database.

55
00:03:23.072 --> 00:03:27.552
The first thing is like what's
the paradigm of your data?

56
00:03:27.552 --> 00:03:29.397
Do you have highly relational data?

57
00:03:29.397 --> 00:03:30.509
Do you need to do a lot of joins?

58
00:03:30.509 --> 00:03:35.174
Then you probably need to use a relational
database, that's the most obvious one.

59
00:03:35.174 --> 00:03:40.313
Do I have highly unstructured data where
I have collections of related objects,

60
00:03:40.313 --> 00:03:43.195
but might have shifting
schemers over time.

61
00:03:43.195 --> 00:03:47.059
Then something like MongoDB is
gonna be really good for that.

62
00:03:47.059 --> 00:03:50.400
Do you have something where you have to
describe a lot of relationships between

63
00:03:50.400 --> 00:03:52.284
various different nodes in your database?

64
00:03:52.284 --> 00:03:54.677
In that case, you probably need a graph.

65
00:03:54.677 --> 00:03:58.109
Do you just need simple needs
of setting and getting,

66
00:03:58.109 --> 00:04:01.095
then something like Redis can do that for
you.

67
00:04:01.095 --> 00:04:02.632
And one thing we didn't talk about but

68
00:04:02.632 --> 00:04:04.660
one that you should probably
be aware of is Kafka.

69
00:04:04.660 --> 00:04:09.061
And Rabbit is, do you have a lot of
messages that are being passed around?

70
00:04:09.061 --> 00:04:12.113
Do you need to broker messages between
the different parts of your app?

71
00:04:12.113 --> 00:04:18.545
In that case, something like RabbitMQ or
Kafka can be really useful for that.

72
00:04:18.545 --> 00:04:23.305
So your answer is probably some
combination of all of the above, right?

73
00:04:23.305 --> 00:04:24.933
It's usually not, clear-cut,

74
00:04:24.933 --> 00:04:28.258
it's definitely that it's usually
like I got this middle area here.

75
00:04:28.258 --> 00:04:31.098
So how am I going to choose beyond that?

76
00:04:31.098 --> 00:04:34.028
And specifically when you
come to something like

77
00:04:34.028 --> 00:04:38.749
Postgres versus mySQL versus MongoDB,
that line's pretty blurry, right?

78
00:04:38.749 --> 00:04:41.498
They all can kind of
accomplish similar things.

79
00:04:46.112 --> 00:04:48.242
So yeah, consider your data needs,

80
00:04:48.242 --> 00:04:51.828
that's probably the first thing
I'm going to tell you to do.

81
00:04:51.828 --> 00:04:55.043
Something else for you to consider, and
this is going to be actually more towards

82
00:04:55.043 --> 00:04:56.997
data architecture rather
than which database.

83
00:04:56.997 --> 00:05:00.452
But we talked a lot about reading and
writing, but

84
00:05:00.452 --> 00:05:05.233
usually your application has either
a lot of reads or a lot of writes.

85
00:05:05.233 --> 00:05:09.567
Let me give you an example,
an application like Netflix,

86
00:05:09.567 --> 00:05:13.729
you're in general reading
from the database, right?

87
00:05:13.729 --> 00:05:17.929
You don't constantly go in and
change your Netflix profile every day,

88
00:05:17.929 --> 00:05:22.769
you generally write that once, and then
you leave it alone for a really long time.

89
00:05:22.769 --> 00:05:24.375
But that data gets read a lot, right?

90
00:05:24.375 --> 00:05:26.028
Because it's gonna read
from your preferences,

91
00:05:26.028 --> 00:05:28.679
it's gonna read from which movies you
wanna watch, and all that kind of stuff.

92
00:05:28.679 --> 00:05:31.849
That's a very read-heavy situation, so

93
00:05:31.849 --> 00:05:37.226
in that case you want to architecture
data so it's optimized to be read.

94
00:05:37.226 --> 00:05:41.407
So you're probably gonna write all of
your data generally in one place because

95
00:05:41.407 --> 00:05:45.395
you don't want to be doing 17 joins
to get all the correct data together,

96
00:05:45.395 --> 00:05:46.998
because that's expensive.

97
00:05:46.998 --> 00:05:51.822
Joins are not cheap.

98
00:05:51.822 --> 00:05:56.497
Again, I'm referencing my friend
that works at MongoDB Harry,

99
00:05:56.497 --> 00:06:00.496
he told me that like,
it's okay to do joins in MongoDB.

100
00:06:00.496 --> 00:06:02.786
As long,
you're not doing it a whole lot so

101
00:06:02.786 --> 00:06:05.335
you can actually have
multiple collections and

102
00:06:05.335 --> 00:06:09.535
do joins in MongoDB As long as you're not
doing it a lot right because then it's

103
00:06:09.535 --> 00:06:13.951
even if it's an expensive query if you're
running it once a day doesn't matter.

104
00:06:13.951 --> 00:06:17.526
So that's always something you want to
keep in mind is read heavy versus right

105
00:06:17.526 --> 00:06:20.716
heavy do I will not be optimizing my
data for being read from or is it do I

106
00:06:20.716 --> 00:06:24.401
want to be optimized idea so it's because
I'm rewriting it to it a lot, right?

107
00:06:24.401 --> 00:06:27.766
So Twitter is a good example of something
it's going to be very right heavy because

108
00:06:27.766 --> 00:06:31.250
people are tweeting all the time you're
writing, going to your database, right?

109
00:06:31.250 --> 00:06:34.080
So make those trade offs.

110
00:06:36.899 --> 00:06:42.134
Okay, so let's say I've I decided that
my I have a multi paradigm need for

111
00:06:42.134 --> 00:06:45.102
my database, which one do I choose next?

112
00:06:45.102 --> 00:06:49.492
Generally, I just go talk to my teams all
right, raise your hand if Mongo, raise

113
00:06:49.492 --> 00:06:54.013
your hand if Postgres, and if everyone in
the room knows Postgres, and no one knows

114
00:06:54.013 --> 00:06:57.911
Mongo, I think you pretty well have
your answer at that point, right.

115
00:06:57.911 --> 00:07:01.434
Familiarity buys a lot in terms
of experience just knowing how to

116
00:07:01.434 --> 00:07:03.465
administrate these kind of things.

117
00:07:03.465 --> 00:07:07.918
You don't have to like relearn all of
the trauma that comes with learning

118
00:07:07.918 --> 00:07:08.943
a new database.

119
00:07:08.943 --> 00:07:10.873
So familiarity is a big one,

120
00:07:10.873 --> 00:07:15.064
quality of drivers is one that
I think often gets overlooked.

121
00:07:15.064 --> 00:07:18.302
If you're gonna Going to be
writing you know to Postgres but

122
00:07:18.302 --> 00:07:19.737
you're writing elixir.

123
00:07:19.737 --> 00:07:23.896
I don't know the quality of the Postgres
connector to elixir, it might be good,

124
00:07:23.896 --> 00:07:26.420
I'm not saying it's bad or
anything like that.

125
00:07:26.420 --> 00:07:30.493
But you might want to just go check
out the quality of the drivers for

126
00:07:30.493 --> 00:07:32.696
the language that you've chosen.

127
00:07:32.696 --> 00:07:37.339
Operations costs, you want to look at this
from all perspectives like what does it

128
00:07:37.339 --> 00:07:41.915
cost me to run this database in production
in terms of like just the dollars moving

129
00:07:41.915 --> 00:07:45.919
out of your bank account, times you
have to spend writing code for it.

130
00:07:45.919 --> 00:07:47.396
Cost of downtime, but

131
00:07:47.396 --> 00:07:52.307
you also need to look at how expensive
is it to hire someone that can do this?

132
00:07:52.307 --> 00:07:57.001
So again, I'm going back to like,
how many elixir

133
00:07:57.001 --> 00:08:02.579
engineers know how to write to
Neo4j might be zero, right?

134
00:08:02.579 --> 00:08:05.093
So hiring for
those kind of things are very expensive.

135
00:08:05.093 --> 00:08:06.634
So look at it in terms of hiring,

136
00:08:06.634 --> 00:08:08.870
an expertise that exists
in the field as well.

137
00:08:12.715 --> 00:08:17.090
And like this is probably like the least
fun advice I'll give you today,

138
00:08:17.090 --> 00:08:18.820
which is be boring, right?

139
00:08:18.820 --> 00:08:22.552
Usually it's a good idea to just
go with boring tech choices.

140
00:08:22.552 --> 00:08:27.116
And when I say boring tech, like maybe
tomorrow, there's a brand new like

141
00:08:27.116 --> 00:08:30.667
Super DB that comes out that
does everything perfectly and

142
00:08:30.667 --> 00:08:35.686
everyone's on Hacker News is saying that
like, this is the greatest thing ever.

143
00:08:35.686 --> 00:08:37.247
It solved all my data needs.

144
00:08:37.247 --> 00:08:38.787
It also cured my arthritis, right?

145
00:08:38.787 --> 00:08:41.700
Like it just does everything.

146
00:08:41.700 --> 00:08:45.921
I'm gonna say, let everyone else
suffer through all of the growing

147
00:08:45.921 --> 00:08:50.229
pains of super DB and wait like five
years for it to become boring too.

148
00:08:50.229 --> 00:08:55.014
That's my advice to you, I'd rather
spend my time on the product and

149
00:08:55.014 --> 00:09:00.626
like working on finding product market fit
than I do want to spend getting super DB

150
00:09:00.626 --> 00:09:05.678
to play nice with my configuration
of terraform or something like that.

151
00:09:05.678 --> 00:09:09.237
In general when you're making technical
choices be as boring as possible.

152
00:09:12.445 --> 00:09:15.584
All right, let's talk about caching for
just a second.

153
00:09:15.584 --> 00:09:20.097
My very strong advice for
you is use caching sparingly and

154
00:09:20.097 --> 00:09:22.361
use it only when you need it.

155
00:09:22.361 --> 00:09:27.368
In other words, don't prematurely optimize
your application, and why do I say this?

156
00:09:27.368 --> 00:09:32.902
Caching adds a lot of an extra layer
of indirection to your application.

157
00:09:32.902 --> 00:09:37.822
My good example of this is that,
if you make a call to an end point,

158
00:09:37.822 --> 00:09:40.417
you don't actually really know,

159
00:09:40.417 --> 00:09:45.705
typically did that come from cache or
did that come from the database?

160
00:09:45.705 --> 00:09:48.530
And so when you have a bug
is a problem with the cat,

161
00:09:48.530 --> 00:09:50.695
is there a problem with the database?

162
00:09:50.695 --> 00:09:52.264
Is there a problem with the code?

163
00:09:52.264 --> 00:09:55.022
Is there problems to the code the rest of
the cache has a problem with the code that

164
00:09:55.022 --> 00:09:55.898
writes to the database.

165
00:09:55.898 --> 00:09:59.498
You added this like extra layer
of debugging to your app,

166
00:09:59.498 --> 00:10:02.357
that sucks debugging
the cache is the worst.

167
00:10:02.357 --> 00:10:04.405
And that's why I'm just telling you,

168
00:10:04.405 --> 00:10:06.957
as some of you are probably
my future coworkers.

169
00:10:06.957 --> 00:10:10.466
Please wait to use the cache
until you absolutely need it.

170
00:10:10.466 --> 00:10:13.288
Make sure that your caching
is solving a problem.

171
00:10:13.288 --> 00:10:17.240
Don't just cache because it
seems like a good idea, right?

172
00:10:17.240 --> 00:10:20.899
Just my general mantra with writing
code is have a problem to fix.

173
00:10:20.899 --> 00:10:23.088
Don't try to solve a problem
that you don't have yet

174
00:10:23.088 --> 00:10:25.694
because you usually don't end
up solving the right problem.

175
00:10:30.210 --> 00:10:34.853
Yeah, and just like a big reason I say
that is, while databases are expensive

176
00:10:34.853 --> 00:10:39.498
databases today, like Postgres and
Mongo DB are designed to handle enormous

177
00:10:39.498 --> 00:10:42.870
amounts of traffic,
have a little bit of faith in them.

178
00:10:42.870 --> 00:10:46.062
Like, let them show you that they
can actually handle quite a bit of

179
00:10:46.062 --> 00:10:49.084
capacity before you actually say like,
I don't believe you.

180
00:10:49.084 --> 00:10:55.760
Here's a cache in front of you,
so it's a very, very sharp sword.

181
00:10:55.760 --> 00:10:57.331
It's and it definitely cuts both ways.

182
00:10:57.331 --> 00:10:59.125
So just be careful with caching.

183
00:11:03.025 --> 00:11:08.823
Yeah I mean that the joke is there's two
things that are hard in computer science,

184
00:11:08.823 --> 00:11:13.878
caching, cache invalidation,
naming things and off by one, right?

185
00:11:13.878 --> 00:11:17.113
One of those is cache invalidation,
and there's a damn good reason for it.

186
00:11:17.113 --> 00:11:20.464
It's hard to figure out
how long to cache data.

187
00:11:20.464 --> 00:11:27.367
It's not there's not normally
a clear answer to that question.

188
00:11:27.367 --> 00:11:32.028
Okay, I'm just going to throw out here,
there's a bunch of really great courses in

189
00:11:32.028 --> 00:11:35.525
front of masters that cover some or
all of what I covered today.

190
00:11:35.525 --> 00:11:39.727
So I'm just going to throw out some two
of them that I think from me that I will

191
00:11:39.727 --> 00:11:42.465
personally benefit you
if you like this course,

192
00:11:42.465 --> 00:11:45.160
are the complete intro to
Linux in the CLA talk.

193
00:11:45.160 --> 00:11:49.248
I have a lot of good stuff in there
about how to work on Linux stuff and

194
00:11:49.248 --> 00:11:54.295
how to like understand the CLR better even
for people that know Linux pretty well.

195
00:11:54.295 --> 00:11:57.088
And another one here is
complete intro to containers.

196
00:11:57.088 --> 00:12:01.192
If you were interested in the Docker stuff
that we were running, I go Really in-depth

197
00:12:01.192 --> 00:12:04.669
probably more in-depth than anyone
wants to go, but I like it, right.

198
00:12:04.669 --> 00:12:09.443
So this will teach you everything
that we did today with containers,

199
00:12:09.443 --> 00:12:14.052
and then from some other amazing
structures on front and masters,

200
00:12:14.052 --> 00:12:18.762
Scott Moss personal here in mind
always kicks my ass at video games.

201
00:12:18.762 --> 00:12:21.499
Intro to MongoDB.

202
00:12:21.499 --> 00:12:26.328
That one uses Mongoose, so if you want to
learn stuff about ORM specifically with

203
00:12:26.328 --> 00:12:28.468
MongoDB, hop right into that one.

204
00:12:28.468 --> 00:12:33.428
And then API Design with MongoDB,
it goes into more Node code with Mongo,

205
00:12:33.428 --> 00:12:37.268
A plus teacher, good friend of mine,
I like Scott a lot,

206
00:12:37.268 --> 00:12:39.765
he also has some courses on GraphQL.

207
00:12:39.765 --> 00:12:43.700
So GraphQL from a server perspective,
GraphQL from a client perspective and

208
00:12:43.700 --> 00:12:44.982
then advanced GraphQL.

209
00:12:44.982 --> 00:12:48.701
If you'd liked that
stuff that we did today,

210
00:12:48.701 --> 00:12:51.768
Scott Moss has good
courses on that as well.

211
00:12:51.768 --> 00:12:56.123
And then another one of my
favorite courses is from my ex

212
00:12:56.123 --> 00:12:58.877
coworker at Netflix, Jem Young.

213
00:12:58.877 --> 00:13:03.329
He does a full stack engineering for
and that's another really good course,

214
00:13:03.329 --> 00:13:06.352
and that's going to be more
on the management side.

215
00:13:06.352 --> 00:13:08.518
I kind of gave you like little
footnotes here and there,

216
00:13:08.518 --> 00:13:11.206
Jem's going to get really deep into like,
let's start up a server.

217
00:13:11.206 --> 00:13:12.138
Let's talk about DNS.

218
00:13:12.138 --> 00:13:17.559
Let's talk about all that
kind of lower level stuff.

219
00:13:17.559 --> 00:13:21.832
Okay, thanks all for sticking with me.

220
00:13:21.832 --> 00:13:25.595
You unlocked the achievement of
listening to me for too many hours, and

221
00:13:25.595 --> 00:13:29.496
working with some databases,
hopefully this was helpful to everybody.

222
00:13:29.496 --> 00:13:34.223
Please tweet at me your success stories,
that just warms my cold, dead heart if you

223
00:13:34.223 --> 00:13:38.894
found any issues, I've actually noticed
a ton of issues in my course notes here.

224
00:13:38.894 --> 00:13:41.718
So I'm going to go fix a bunch of those,
open a pull request.

225
00:13:41.718 --> 00:13:44.441
I'm deeply grateful for
that kind of stuff.

226
00:13:44.441 --> 00:13:46.581
All right, everyone,
I really hope you enjoyed the course.

227
00:13:46.581 --> 00:13:50.822
Thanks for sticking it out with me, hope
y'all have a good rest of your week and

228
00:13:50.822 --> 00:13:53.280
I hope your your weather
is better than mine.

