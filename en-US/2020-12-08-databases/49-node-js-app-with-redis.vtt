WEBVTT

1
00:00:00.322 --> 00:00:02.356
So I'm gonna come in here.

2
00:00:02.356 --> 00:00:04.326
I'm going to Node sample.

3
00:00:04.326 --> 00:00:09.150
I'm gonna get out of that,
I'm gonna say mkdir redis-sample.

4
00:00:09.150 --> 00:00:12.059
I'm going to npm install.

5
00:00:12.059 --> 00:00:13.781
Let me get my versions out here.

6
00:00:17.335 --> 00:00:20.859
Npm init -y and

7
00:00:20.859 --> 00:00:27.366
I'm going to say npm install

8
00:00:27.366 --> 00:00:33.060
Reddis at 3.0.2 and

9
00:00:33.060 --> 00:00:39.309
express at 4.17.1.

10
00:00:39.309 --> 00:00:40.807
So what are the interesting
things about Redis?

11
00:00:40.807 --> 00:00:45.410
As far as I know, there's a company called
Redis labs, Redis labs makes Redis.

12
00:00:45.410 --> 00:00:48.542
And they make some of the drivers and
I don't think they make the node one.

13
00:00:48.542 --> 00:00:52.115
So I think this is actually a community
driver and there's several,

14
00:00:52.115 --> 00:00:56.182
and I just picked node Redis because I
think that's the most the largest one but

15
00:00:56.182 --> 00:00:59.670
there is also io Redis and
there's a couple of other ones.

16
00:00:59.670 --> 00:01:02.259
So this is not necessarily
one that you have to use.

17
00:01:02.259 --> 00:01:05.881
This is just one that we're you and
I are going to use together.

18
00:01:05.881 --> 00:01:12.602
Okay, we're going to make
a directory called static,

19
00:01:12.602 --> 00:01:19.898
we're going to touch in
static/index.html server.js.

20
00:01:19.898 --> 00:01:21.723
and cool.

21
00:01:21.723 --> 00:01:23.056
That should be fine.

22
00:01:23.056 --> 00:01:25.401
So we're going to say code with this.

23
00:01:35.357 --> 00:01:38.752
Html:5.

24
00:01:38.752 --> 00:01:44.042
This will be our Redis sample.

25
00:01:44.042 --> 00:01:50.199
And here we're just going to
implement like a page counter,

26
00:01:50.199 --> 00:01:53.830
which is going to be very exciting.

27
00:01:55.040 --> 00:02:00.442
We're gonna put an h1 here of visitors and

28
00:02:00.442 --> 00:02:07.504
we'll just put, loading here or
something like that.

29
00:02:07.504 --> 00:02:11.319
And then here underneath that,

30
00:02:11.319 --> 00:02:15.841
we're gonna just have a script tag and

31
00:02:15.841 --> 00:02:23.473
we're gonna put an async function
called register page view and

32
00:02:23.473 --> 00:02:28.419
then just underneath that we're going to

33
00:02:28.419 --> 00:02:33.505
actually call register paid view, okay,

34
00:02:33.505 --> 00:02:38.755
and here we're gonna say const rez equals.

35
00:02:38.755 --> 00:02:45.573
await fetch('/pageview'),

36
00:02:45.573 --> 00:02:52.595
then we're gonna say const views.

37
00:02:52.595 --> 00:02:57.736
I'm going to do like this
views to pull out the views

38
00:02:57.736 --> 00:03:02.520
key from this response
equals await rez JSON and

39
00:03:02.520 --> 00:03:07.075
we're gonna say document
get element by ID.

40
00:03:11.382 --> 00:03:12.390
Visitors.

41
00:03:12.390 --> 00:03:14.043
That's what we called it up there, right?

42
00:03:14.043 --> 00:03:15.212
Yep.

43
00:03:15.212 --> 00:03:17.589
Visitors.

44
00:03:17.589 --> 00:03:23.616
Enter text=views

45
00:03:23.616 --> 00:03:30.396
visitors all right,

46
00:03:30.396 --> 00:03:34.550
that's it.

47
00:03:34.550 --> 00:03:39.434
I mean we basically just like implemented
those like geo cities pageview counters.

48
00:03:39.434 --> 00:03:43.010
So I know everyone was dying to to
know how to do that with Redis.

49
00:03:43.010 --> 00:03:48.672
And you're welcome, I think,
is all I have to say.

50
00:03:48.672 --> 00:03:53.408
You spent so many hours working with me so
that we could get to

51
00:03:53.408 --> 00:03:58.260
our culminating final project
of Geocities page counters.

52
00:03:58.260 --> 00:04:00.867
All right, cool that we're all here.

53
00:04:00.867 --> 00:04:06.450
Bet you're really glad you stuck this out
all right, let's open our server digests.

54
00:04:06.450 --> 00:04:11.212
And just bring this magic home.

55
00:04:11.212 --> 00:04:14.385
So one of the really annoying
things about this Redis driver is

56
00:04:14.385 --> 00:04:15.860
it does not speak promises.

57
00:04:15.860 --> 00:04:18.234
And I'm just not down with
doing call backs anymore.

58
00:04:18.234 --> 00:04:19.544
I don't know about you, but

59
00:04:19.544 --> 00:04:22.340
I spent too long writing Java Script
to go back to call backs.

60
00:04:22.340 --> 00:04:26.881
So we're actually going to use
promise defy to make these

61
00:04:26.881 --> 00:04:29.446
Redis methods work correctly.

62
00:04:29.446 --> 00:04:32.159
So I'm gonna say const promisify.

63
00:04:32.159 --> 00:04:38.300
This is actually built into node j s,
which is very convenient, require util.

64
00:04:38.300 --> 00:04:41.599
This will turn any like node
style node back or callback,

65
00:04:41.599 --> 00:04:43.529
whatever you want to call those.

66
00:04:43.529 --> 00:04:46.229
Into a promise based API.

67
00:04:46.229 --> 00:04:49.291
And I'll show you how to do
that here in just a second.

68
00:04:49.291 --> 00:04:55.243
Const Express equals require Express.

69
00:04:55.243 --> 00:05:00.250
Const Redis equals require Redis.

70
00:05:00.250 --> 00:05:05.938
And const client equals
redis.createclient.

71
00:05:09.778 --> 00:05:10.297
Okay.

72
00:05:10.297 --> 00:05:14.963
Well, we're going to make a new function
here called Const Reddis incur.

73
00:05:14.963 --> 00:05:16.624
Right?
So this is actually going to be

74
00:05:16.624 --> 00:05:17.232
a function.

75
00:05:17.232 --> 00:05:22.464
That's going to do a incur
in our Redis server.

76
00:05:22.464 --> 00:05:30.985
And we're going to say equals
promisifyclient.anchor.

77
00:05:30.985 --> 00:05:34.174
Right.
So this is a method on this Redis client.

78
00:05:34.174 --> 00:05:37.669
And then we're just going
to say dot bind client.

79
00:05:37.669 --> 00:05:39.039
So, that this is correct.

80
00:05:39.039 --> 00:05:40.658
Otherwise this doesn't work.

81
00:05:40.658 --> 00:05:42.200
So now we get this function back.

82
00:05:42.200 --> 00:05:44.469
Called our anchor.

83
00:05:44.469 --> 00:05:48.650
And what all this does is it takes in
a key and it'll do an increment in a bit.

84
00:05:48.650 --> 00:05:50.173
It works with promises now.

85
00:05:50.173 --> 00:05:53.040
We don't have to do this we could
totally do with node style call backs.

86
00:05:53.040 --> 00:05:56.601
I just wanted to show you how to
make this a little bit easier.

87
00:05:56.601 --> 00:06:01.258
Okay, we're going to have
an async function and knit and

88
00:06:01.258 --> 00:06:05.540
we're going to call a knit
immediately after that.

89
00:06:09.110 --> 00:06:16.203
And I need this to be two spaces because
otherwise I just can't even, okay.

90
00:06:16.203 --> 00:06:21.819
Const app equals Express app

91
00:06:21.819 --> 00:06:27.690
dot get slash page views.

92
00:06:27.690 --> 00:06:28.720
page view.

93
00:06:28.720 --> 00:06:30.781
What did I say here?

94
00:06:30.781 --> 00:06:31.465
Page view.

95
00:06:31.465 --> 00:06:34.913
Okay, so page view with no assets.

96
00:06:34.913 --> 00:06:38.048
Async, req, res,

97
00:06:42.422 --> 00:06:48.249
Const views Equals await our inker and
then we give it a key.

98
00:06:48.249 --> 00:06:50.900
So we're going to do it with page views.

99
00:06:50.900 --> 00:06:53.570
So that this is the actual the name of
the key that's going to go out to Redis.

100
00:06:54.710 --> 00:06:59.451
And then views will actually be
the incremented number that's

101
00:06:59.451 --> 00:07:01.334
going to come back to us.

102
00:07:01.334 --> 00:07:05.703
Then we're gonna say res.json.

103
00:07:05.703 --> 00:07:09.600
Status okay?

104
00:07:09.600 --> 00:07:12.155
And views like that

105
00:07:17.011 --> 00:07:20.572
Okay, so now we need that'll work for
our handler.

106
00:07:20.572 --> 00:07:26.481
So underneath that,
we just need to say port = 3000.

107
00:07:26.481 --> 00:07:34.819
app.use(express.static./static( and

108
00:07:34.819 --> 00:07:41.907
app.listen(PORT) and console.log

109
00:07:44.706 --> 00:07:51.111
Running on http://localhost.

110
00:07:51.111 --> 00:07:54.262
Colon port.

111
00:07:58.467 --> 00:08:02.550
Alright big moment here.

112
00:08:02.550 --> 00:08:08.240
See if we can get some incrementing
numbers here that's being read and

113
00:08:08.240 --> 00:08:09.595
wrote to Redis.

114
00:08:09.595 --> 00:08:16.194
Let's see if we can get this running node
server dot JS, running on local host,

115
00:08:16.194 --> 00:08:21.550
300 one visitors,
two visitors, three visitors.

116
00:08:21.550 --> 00:08:23.068
We can just keep going all day.

117
00:08:26.053 --> 00:08:29.569
It's probably an already has
more patriots than my blog.

118
00:08:29.569 --> 00:08:30.634
I don't have a blog.

119
00:08:30.634 --> 00:08:34.360
So it does.

120
00:08:34.360 --> 00:08:35.582
All right.

121
00:08:35.582 --> 00:08:39.773
So that at its most
basic level is like how

122
00:08:39.773 --> 00:08:44.097
to connect your app to running to a Redis.

123
00:08:44.097 --> 00:08:48.610
Now, obviously it's very simple use case
here, but I'm sure you could imagine.

124
00:08:48.610 --> 00:08:54.562
You can do the same thing here
with AR get an AR set and

125
00:08:54.562 --> 00:08:57.339
all that kind of stuff.

126
00:08:57.339 --> 00:08:59.192
So on and so forth.

127
00:08:59.192 --> 00:09:01.770
And you can do that all and you can just
you don't even have to do this right you

128
00:09:01.770 --> 00:09:03.280
can use those note style
call backs as well.

