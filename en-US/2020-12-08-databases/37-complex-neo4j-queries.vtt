WEBVTT

1
00:00:00.600 --> 00:00:04.480
Now the moment you've all been
waiting for, degrees of Kevin Bacon,

2
00:00:04.480 --> 00:00:07.520
how far is an actor or
an actress away from Kevin Bacon?

3
00:00:10.180 --> 00:00:14.908
There's a really cool thing that,
Neo4j can do and

4
00:00:14.908 --> 00:00:19.540
it's called something
called use shortest path.

5
00:00:19.540 --> 00:00:24.031
So it actually do a pathfinding
algorithm on your graph database, and

6
00:00:24.031 --> 00:00:28.597
if you don't know how to do,
pathfinding, there's another course in

7
00:00:28.597 --> 00:00:33.360
front of masters from this guy that
talks about pathfinding algorithms.

8
00:00:33.360 --> 00:00:35.669
So you can actually take a course and
figure out how it does that.

9
00:00:37.500 --> 00:00:41.170
But let's see how this works with Neo4j.

10
00:00:41.170 --> 00:00:46.260
So I wanna find out what's
the shortest path between any actor.

11
00:00:46.260 --> 00:00:48.400
So in this case,
let's just do Keane Reeves.

12
00:00:48.400 --> 00:00:54.530
How many degrees away from Kevin Bacon
is Keane Reeves, so I'm gonna say match.

13
00:00:54.530 --> 00:00:56.510
We'll call this a path of some variety.

14
00:00:56.510 --> 00:01:00.440
And that's gonna be
equal to shortest path.

15
00:01:00.440 --> 00:01:02.950
It's very aptly named thing.

16
00:01:06.450 --> 00:01:11.211
Okay, and
then I'll put here we'll have a Bacon,

17
00:01:11.211 --> 00:01:16.540
as Lord Bacon,
as I like to sometimes call him, person.

18
00:01:19.020 --> 00:01:21.130
And name is Kevin Bacon.

19
00:01:25.090 --> 00:01:28.371
Okay, and then here we're gonna
describe a relationship and

20
00:01:28.371 --> 00:01:30.590
here we're gonna say any relationship.

21
00:01:30.590 --> 00:01:35.159
We don't care what the relationship is so
I'm gonna say star so that's gonna include

22
00:01:35.159 --> 00:01:39.750
directed followed rote we're just looking
for any connection between two people.

23
00:01:39.750 --> 00:01:43.640
If we want to only look in acted in,
then here we would put acted in.

24
00:01:43.640 --> 00:01:45.280
But in this particular case,
we can't we don't care.

25
00:01:45.280 --> 00:01:53.430
We want to see all relationships possible
between Kevin Bacon and Keane Reeves.

26
00:01:53.430 --> 00:01:58.418
So we'll say, actually we don't even
want an arrow there because both of them

27
00:01:58.418 --> 00:02:01.300
are gonna have directional relationships.

28
00:02:01.300 --> 00:02:06.850
So if I leave this angle bracket out.

29
00:02:06.850 --> 00:02:09.740
It'll actually just query for
any directional relationship.

30
00:02:09.740 --> 00:02:13.870
He won't look at the direction of
the relationship, which is what we want.

31
00:02:13.870 --> 00:02:20.593
We'll put Keanu, who's a person and

32
00:02:20.593 --> 00:02:25.220
the name is Keanu Reeves.

33
00:02:29.030 --> 00:02:35.554
Okay, and then underneath that, we were
just gonna say return paths like that.

34
00:02:43.015 --> 00:02:44.058
Yeah.

35
00:02:44.058 --> 00:02:46.261
If you had a massive graph database,

36
00:02:46.261 --> 00:02:50.370
you this could be a very
potentially expensive query.

37
00:02:50.370 --> 00:02:52.900
We don't care so we're just gonna
ignore this little warning right there.

38
00:02:54.330 --> 00:02:58.320
So if I click play here,
then we're gonna see the shortest path

39
00:02:58.320 --> 00:03:02.991
between Kevin Bacon and canneries
which is gonna go through something's

40
00:03:02.991 --> 00:03:06.850
got to give to Jack Nicholson to
a few good men to Kevin Bacon.

41
00:03:09.760 --> 00:03:10.350
Pretty cool, right?

42
00:03:11.680 --> 00:03:16.184
We now have like a database that we can
query to figure out connections between

43
00:03:16.184 --> 00:03:17.579
actors and actresses.

44
00:03:20.800 --> 00:03:23.475
Let's say like we wanted to do,

45
00:03:23.475 --> 00:03:28.500
Porsche just named this like p or
something like that.

46
00:03:28.500 --> 00:03:31.850
And so instead of we could do here.

47
00:03:31.850 --> 00:03:34.290
Charlize Theron,
I think that's how you spell her name.

48
00:03:37.960 --> 00:03:38.650
There you go.

49
00:03:38.650 --> 00:03:43.648
Charlize Theron was in That Thing You Do
with Tom Hanks who was in Apollo 13 with

50
00:03:43.648 --> 00:03:44.549
Kevin Bacon.

51
00:03:49.910 --> 00:03:53.626
So there's a bunch of different
these kind of like functions to find

52
00:03:53.626 --> 00:03:56.110
paths between people
a path is a data type in.

53
00:03:58.230 --> 00:04:01.779
Neo4j that allows you to look at kinda
paths around your database like you can

54
00:04:01.779 --> 00:04:02.280
imagine.

55
00:04:03.330 --> 00:04:05.860
Let's say you're on LinkedIn, for example.

56
00:04:05.860 --> 00:04:09.405
And you wanna find what's
the shortest path between me and

57
00:04:09.405 --> 00:04:13.950
the I don't know CEO of Salesforce or
something like that, right?

58
00:04:13.950 --> 00:04:17.236
You could do this kinda same thing to
say like, Well, I know this person,

59
00:04:17.236 --> 00:04:20.522
this person worked with this person and
this person did a project with this

60
00:04:20.522 --> 00:04:23.220
other person and
that's how we're connected, right?

61
00:04:23.220 --> 00:04:26.630
It doesn't even have to be people, right?

62
00:04:28.080 --> 00:04:32.330
Like one of the examples here in
this database is logistics, right?

63
00:04:32.330 --> 00:04:37.080
So what's the easiest way for
me to obtain milk, right?

64
00:04:37.080 --> 00:04:40.242
You can say like, well,
I can work with this distributor that is

65
00:04:40.242 --> 00:04:42.644
connected to this dairy
farm you can use kind of,

66
00:04:42.644 --> 00:04:46.210
you can derive those kind of
insights as well from graphs.

67
00:04:46.210 --> 00:04:47.210
So graphs are really cool.

68
00:04:47.210 --> 00:04:50.314
They can describe lots of things
that are not just movies, but

69
00:04:50.314 --> 00:04:52.950
it's a pretty concrete way for
you to imagine that.

70
00:04:55.040 --> 00:04:58.554
So just to kinda show you how you would do
this kind of in cipher shell without this

71
00:04:58.554 --> 00:04:59.560
neat visualization.

72
00:04:59.560 --> 00:05:02.321
Cause again, if you ran this query,
for example,

73
00:05:02.321 --> 00:05:06.899
if you ran this in cipher shell here, this
is gonna be, you're gonna get all these.

74
00:05:08.150 --> 00:05:09.750
Things about this is kind of unreadable.

75
00:05:11.510 --> 00:05:15.229
So what you could do here,

76
00:05:15.229 --> 00:05:20.310
if I put length path here like this.

77
00:05:21.470 --> 00:05:25.000
This will tell me at least
how length path would be 4.

78
00:05:25.000 --> 00:05:26.770
You have to take 4 hops to get there.

79
00:05:27.870 --> 00:05:32.850
Let's another good way for us to visualize
in cipher shells where we don't have these

80
00:05:32.850 --> 00:05:36.741
kind of fun visualizations is we
can use something called unwind.

81
00:05:39.098 --> 00:05:41.640
So I'm gonna show you how
to do that really quick.

82
00:05:41.640 --> 00:05:46.810
So we have this path this path thing
is like it's a big data structure.

83
00:05:46.810 --> 00:05:49.458
And we wanna have a more
useful way we can actually

84
00:05:49.458 --> 00:05:52.890
just see listed out all the titles
names of these connections.

85
00:05:52.890 --> 00:05:58.713
So what you can do,
instead of that is we can say,

86
00:05:58.713 --> 00:06:01.420
unwind nodes of path.

87
00:06:01.420 --> 00:06:05.550
So when we say nodes,
there's just no nodes, okay?

88
00:06:06.930 --> 00:06:10.410
We're gonna unwind the nodes of the path.

89
00:06:10.410 --> 00:06:15.374
So we're gonna ignore
the relationships for now, as node and

90
00:06:15.374 --> 00:06:20.830
this is basically, essentially
like kind of a for loop for Neo4j.

91
00:06:21.980 --> 00:06:28.460
So now whatever it gets run underneath,
this is going to be run multiple time.

92
00:06:28.460 --> 00:06:31.280
So this is gonna get run for
each node in our particular path.

93
00:06:31.280 --> 00:06:33.080
So I'm gonna say return.

94
00:06:34.400 --> 00:06:37.730
And I wanna return names and
titles, right?

95
00:06:37.730 --> 00:06:39.960
Because some things have names and
some things have titles.

96
00:06:39.960 --> 00:06:44.030
People have names, movies have titles,
so I need to return both of them.

97
00:06:44.030 --> 00:06:46.440
So there's a cool thing called Coalesce.

98
00:06:50.300 --> 00:06:55.294
And I can say node.name or node.title, as,

99
00:06:55.294 --> 00:06:58.371
I don't know name or title.

100
00:07:03.740 --> 00:07:04.980
Or we can even do this way.

101
00:07:07.530 --> 00:07:11.840
Yeah, name or title.

102
00:07:11.840 --> 00:07:13.450
I will do like that.

103
00:07:13.450 --> 00:07:18.417
Okay, so now what this will do is it
is going to coalesce is gonna say,

104
00:07:18.417 --> 00:07:21.450
if this exists, I am gonna return that.

105
00:07:21.450 --> 00:07:23.060
If not,
then I am gonna go to the second thing.

106
00:07:24.080 --> 00:07:26.130
And the second thing will be title.

107
00:07:26.130 --> 00:07:30.551
So if I click play here you can see
it now it just returns Kevin Bacon,

108
00:07:30.551 --> 00:07:35.300
Apollo 13, Tom Hanks, That Thing You Do,
Charlize Theron, right?

109
00:07:35.300 --> 00:07:39.401
So it kind of unwinds that so that we
can kind of pull the individual pieces

110
00:07:39.401 --> 00:07:42.240
out of these particular
elements that we want to.

