WEBVTT

1
00:00:00.141 --> 00:00:03.492
Terminology.
There's a lot of like terms that people

2
00:00:03.492 --> 00:00:06.530
around databases like to throw around.

3
00:00:06.530 --> 00:00:07.857
And hopefully we can
demystify some of them.

4
00:00:07.857 --> 00:00:11.818
Sometimes it's hard for me to even
know what terms I'm using cuz I'm so

5
00:00:11.818 --> 00:00:13.876
used to hearing them so frequently.

6
00:00:13.876 --> 00:00:16.859
So if I'm saying words that you
don't understand, just stop me so

7
00:00:16.859 --> 00:00:19.003
that we can make sure
that everyone gets these.

8
00:00:19.003 --> 00:00:24.862
So database is really just
a repository of data, right?

9
00:00:24.862 --> 00:00:28.702
If you can imagine like a program that
you're writing you have like an object

10
00:00:28.702 --> 00:00:32.673
that stores like your state like a Redux
store or something like that, right?

11
00:00:32.673 --> 00:00:35.326
This is basically that just on a much,
much larger scale.

12
00:00:35.326 --> 00:00:37.506
So instead of storing a hundred things,

13
00:00:37.506 --> 00:00:40.721
you're storing a million
things billion things, right?

14
00:00:40.721 --> 00:00:42.027
That's what databases can do.

15
00:00:42.027 --> 00:00:46.729
These are meant to be giant scale things
that can scale across the entire world

16
00:00:46.729 --> 00:00:51.300
that can have, resiliency and
store very important things on it, right?

17
00:00:51.300 --> 00:00:52.838
That's what databases are for.

18
00:00:52.838 --> 00:00:57.789
What's fun about them is that there
is a variety of different ways

19
00:00:57.789 --> 00:01:02.300
that they can work and
it depends on what you want them to do.

20
00:01:02.300 --> 00:01:04.353
So that's what I'm gonna teach you here.

21
00:01:04.353 --> 00:01:06.641
I'm gonna teach you four
different kinds of databases.

22
00:01:06.641 --> 00:01:10.818
That's why I chose these four different
databases that we are gonna be looking at

23
00:01:10.818 --> 00:01:14.643
today is because these are exemplary of,
different types of databases.

24
00:01:14.643 --> 00:01:19.239
It's actually funny I was working with
our artists to kind of come up with this

25
00:01:19.239 --> 00:01:20.168
picture here.

26
00:01:20.168 --> 00:01:23.305
And she was like, can you explain to
me a little bit what a database is and

27
00:01:23.305 --> 00:01:25.448
I came up with this analogy and
then she loved it so

28
00:01:25.448 --> 00:01:27.360
much she actually put it into the artwork.

29
00:01:27.360 --> 00:01:28.413
And I asked her,

30
00:01:28.413 --> 00:01:33.238
what's the best way to get from point
A to point B if that's only a mile a way.

31
00:01:35.780 --> 00:01:39.770
If you have a bicycle,
you have a car, you have a boat, and

32
00:01:39.770 --> 00:01:41.898
you have an airplane, right?

33
00:01:41.898 --> 00:01:48.244
Well, I think the answer is, it really
depends what's in between the two, right?

34
00:01:48.244 --> 00:01:51.584
If you're trying to get from one side
to the of Amsterdam to the other,

35
00:01:51.584 --> 00:01:54.316
having a Ferrari is not gonna
help you very much, right?

36
00:01:54.316 --> 00:01:55.038
That city is so

37
00:01:55.038 --> 00:01:59.266
jam packed that having a bike is gonna be
the best thing you could ever want, right?

38
00:01:59.266 --> 00:02:01.872
But if you're trying to get
from point A to point B and

39
00:02:01.872 --> 00:02:05.144
it's the middle of the ocean,
you probably want a boat, right?

40
00:02:05.144 --> 00:02:06.508
And so it depends on your,

41
00:02:06.508 --> 00:02:09.801
your job requirements of which
vehicle you're gonna choose.

42
00:02:09.801 --> 00:02:12.343
That's kind of the same
thing here with databases,

43
00:02:12.343 --> 00:02:14.786
they're all gonna get you
from point A to point B.

44
00:02:14.786 --> 00:02:16.765
But one of them is gonna
be significantly better for

45
00:02:16.765 --> 00:02:18.150
the problem that you have, right?

46
00:02:18.150 --> 00:02:20.326
That kind of makes sense.

47
00:02:20.326 --> 00:02:24.790
So you can see here she kind of ran
with that there's like a NEO4J,

48
00:02:24.790 --> 00:02:26.002
hot air balloon.

49
00:02:26.002 --> 00:02:28.971
There's a Redis car,
there's a MongoDB boat and

50
00:02:28.971 --> 00:02:33.295
there's an elephant cuz everyone
likes Postgres, elephants, okay?

51
00:02:33.295 --> 00:02:37.678
So that's kind of why we have all these
different kinds of databases is cause

52
00:02:37.678 --> 00:02:41.115
they're gonna work better for
different kinds of things.

53
00:02:41.115 --> 00:02:44.184
So when you have these like
massive stores of data and

54
00:02:44.184 --> 00:02:46.973
you wanna be able to get
certain resources out or

55
00:02:46.973 --> 00:02:51.734
update or delete certain things, you
need some sort of query language, right?

56
00:02:51.734 --> 00:02:54.882
Some things that you can hand to it and
say,

57
00:02:54.882 --> 00:02:58.131
here's an action that
I would like to take.

58
00:02:58.131 --> 00:03:01.968
And so all of these databases have various
different forms of query languages that

59
00:03:01.968 --> 00:03:03.312
we're gonna have to learn.

60
00:03:03.312 --> 00:03:07.207
So you're actually gonna end up learning
four different query languages today.

61
00:03:07.207 --> 00:03:10.186
But most of them are intuitive enough
that you should be able to pick them up

62
00:03:10.186 --> 00:03:10.917
pretty quickly.

63
00:03:10.917 --> 00:03:14.143
Okay, so that's a database.

64
00:03:14.143 --> 00:03:16.176
It's a repository for lots of data.

65
00:03:16.176 --> 00:03:20.024
And then that's another good term to pick
out of there's query where I'm gonna be

66
00:03:20.024 --> 00:03:21.093
using that term a lot.

67
00:03:21.093 --> 00:03:24.750
It's basically just something that you're
gonna send to a database, some action or

68
00:03:24.750 --> 00:03:26.182
request or something like that.

69
00:03:26.182 --> 00:03:27.257
That's, a query.

70
00:03:27.257 --> 00:03:30.575
Another good one to know is schemas.

71
00:03:30.575 --> 00:03:34.019
So a schema is basically what's
the shape of your data look like, right?

72
00:03:34.019 --> 00:03:35.962
So I had put an object in here.

73
00:03:35.962 --> 00:03:39.520
If I have this object here that says name,
city and

74
00:03:39.520 --> 00:03:44.446
state the schema of that data would
be the name and the city and state.

75
00:03:44.446 --> 00:03:47.735
So I could have five different objects and
they would all have the same schema.

76
00:03:47.735 --> 00:03:51.310
They would all have name, city and state
despite the fact that the values of those

77
00:03:51.310 --> 00:03:53.792
would be different,
the keys would always be the same.

78
00:03:53.792 --> 00:03:58.091
Another good way of thinking about that is
like think of a spreadsheet like Excel or

79
00:03:58.091 --> 00:03:59.850
numbers or something like that.

80
00:03:59.850 --> 00:04:05.673
The columns would be the schema
of your Excel spreadsheet.

81
00:04:05.673 --> 00:04:09.611
And you'll notice I'm gonna refer to
Spreadsheets a lot during this course,

82
00:04:09.611 --> 00:04:12.250
it's because a spreadsheet is a database,
right?

83
00:04:12.250 --> 00:04:15.167
Of some variety, it's a way of
storing data in a structured fashion,

84
00:04:15.167 --> 00:04:15.964
it's a database.

85
00:04:15.964 --> 00:04:22.360
I've actually seen way too many people use
like Google sheets directly as a database.

86
00:04:22.360 --> 00:04:25.453
So it's actually possible to
use a spreadsheet as one.

87
00:04:25.453 --> 00:04:28.570
Not suggesting it, not teaching it,
but it is possible.

88
00:04:28.570 --> 00:04:33.289
So schemas are important because
some databases like Postgres

89
00:04:33.289 --> 00:04:37.482
are gonna require us to be
very strict about our schema.

90
00:04:37.482 --> 00:04:39.800
We're gonna have to tell Postgres upfront,

91
00:04:39.800 --> 00:04:42.059
here's every key that
I will ever give you.

92
00:04:42.059 --> 00:04:44.268
And if you try and
give it another key, it's gonna be,

93
00:04:44.268 --> 00:04:45.673
I don't know what to do with that.

94
00:04:45.673 --> 00:04:47.758
And that just fails the entire
query altogether, right?

95
00:04:47.758 --> 00:04:50.603
And you can contrast that against mango,
mangoes and be like,

96
00:04:50.603 --> 00:04:51.846
give me whatever you want.

97
00:04:51.846 --> 00:04:52.718
I don't care.

98
00:04:52.718 --> 00:04:53.784
It's schemaless, right?

99
00:04:53.784 --> 00:04:55.176
So we'll get more into that.

100
00:04:55.176 --> 00:04:59.011
That's a word that you'll hear me thrown
around a lot in this course as well,

101
00:04:59.011 --> 00:04:59.906
which is schema.

102
00:04:59.906 --> 00:05:03.922
We're gonna be talking about document,
relational graph, and

103
00:05:03.922 --> 00:05:07.145
key value store databases
throughout this course.

104
00:05:07.145 --> 00:05:10.208
But I wanted to let you know that
there are actually a lot more than

105
00:05:10.208 --> 00:05:11.071
just those four.

106
00:05:11.071 --> 00:05:16.362
Those four might cover maybe I'm
gonna guess 90% of use cases.

107
00:05:16.362 --> 00:05:19.893
But there are a lot of other ones
as well that you should know about.

108
00:05:19.893 --> 00:05:23.248
One of them is search engines,
not like Google, but

109
00:05:23.248 --> 00:05:25.850
more like something called like Solar.

110
00:05:25.850 --> 00:05:30.380
Or Sphinx is another one that's really
popular that allows you to basically

111
00:05:30.380 --> 00:05:32.937
create a search engine for your database.

112
00:05:32.937 --> 00:05:35.728
A lot of these databases don't have
the ability to do what's called full

113
00:05:35.728 --> 00:05:36.286
text search.

114
00:05:36.286 --> 00:05:41.455
Which is to say, here is three words,
here's I wanna search for

115
00:05:41.455 --> 00:05:47.996
local beer inside of my database needs to
span across all the different columns.

116
00:05:47.996 --> 00:05:51.035
You do something like
a search engine to do that.

117
00:05:51.035 --> 00:05:54.570
Some of them had that ability
just built in like Postgres and

118
00:05:54.570 --> 00:05:58.113
MongoDB do but some don't, so
you'd use a search engine.

119
00:05:58.113 --> 00:06:03.290
Another one is called wide column
databases, these are fairly

120
00:06:03.290 --> 00:06:09.358
new type of database if you've heard
of what is it, Google's big table.

121
00:06:09.358 --> 00:06:13.388
Google's big table's kind of the famous
version of a y column database,

122
00:06:13.388 --> 00:06:17.548
another one is Apache Cassandra,
which is actually grew out of Facebook and

123
00:06:17.548 --> 00:06:19.698
how Facebook stores all of their data.

124
00:06:19.698 --> 00:06:24.110
I don't really totally
get how to use them.

125
00:06:24.110 --> 00:06:26.466
So I'm not gonna spend a ton of time.

126
00:06:26.466 --> 00:06:29.686
It's described as a two
dimensional key value store and

127
00:06:29.686 --> 00:06:33.602
if that doesn't mean anything to
you doesn't mean anything to me.

128
00:06:33.602 --> 00:06:35.318
So that how they describe it.

129
00:06:35.318 --> 00:06:39.489
Message brokers actually might come back
and do another course sometime on message

130
00:06:39.489 --> 00:06:42.540
brokers cuz I think it's really
important and really cool.

131
00:06:42.540 --> 00:06:46.583
This is gonna be something like Kafka or
rabbitmq.

132
00:06:46.583 --> 00:06:49.362
It's the ability to pass
messages between your programs.

133
00:06:49.362 --> 00:06:54.355
I think it's really underutilized
by node developers cuz it's really

134
00:06:54.355 --> 00:06:57.693
a really is conducive to
how to write node apps.

135
00:06:57.693 --> 00:07:00.787
And then another one's
called multimodal databases,

136
00:07:00.787 --> 00:07:03.763
which is a basically a database
that knows how to act.

137
00:07:03.763 --> 00:07:08.540
Maybe both as a relational and
non relational database at the same time,

138
00:07:08.540 --> 00:07:10.666
a good one is Azure, Cosmos dB.

139
00:07:10.666 --> 00:07:14.042
That's the one that I work a lot with
obviously because it's an Azure but

140
00:07:14.042 --> 00:07:15.769
another one would be like a Rango dB.

141
00:07:15.769 --> 00:07:18.601
Those are multi paradigm cuz
they can work in different ways.

142
00:07:21.610 --> 00:07:24.850
That's not all of them as well, but
that's probably like 95% of them.

143
00:07:24.850 --> 00:07:26.667
Now that I've described to you.

144
00:07:26.667 --> 00:07:30.868
But just go look at the Wikipedia
article of databases.

145
00:07:30.868 --> 00:07:32.847
You'll see that there's
a ton of types of databases.

146
00:07:32.847 --> 00:07:38.360
ACID, let's talk about that one for
a little bit.

147
00:07:38.360 --> 00:07:43.878
So it's an acronym that gets
thrown around a lot as databases.

148
00:07:43.878 --> 00:07:48.316
And I just wanted to make sure that you
understand why that gets thrown around.

149
00:07:48.316 --> 00:07:53.477
It stands for
atomicity I think is how you say that,

150
00:07:53.477 --> 00:07:57.438
the, the atomic nature of databases,

151
00:07:57.438 --> 00:08:02.134
consistency, isolation, and durability.

152
00:08:02.134 --> 00:08:05.516
And it's kind of like the qualities
that a database can have,

153
00:08:05.516 --> 00:08:09.631
not all of the databases that we're
gonna be looking at today, have that.

154
00:08:09.631 --> 00:08:13.936
And some of them do, but you need to
understand like the trade-offs that you're

155
00:08:13.936 --> 00:08:16.615
making, when you choose
one of these databases.

156
00:08:16.615 --> 00:08:23.073
So the first one, admittedly is
does this query happen all at once?

157
00:08:23.073 --> 00:08:24.823
And so it's atomic in nature, so

158
00:08:24.823 --> 00:08:28.459
it means you literally cannot divide
the query into multiple parts.

159
00:08:28.459 --> 00:08:29.979
It is a single query.

160
00:08:29.979 --> 00:08:31.135
That's important for

161
00:08:31.135 --> 00:08:34.611
things like you can imagine big
bank tracks transactions, right?

162
00:08:34.611 --> 00:08:39.217
If I'm gonna subtract $10 from my account
and add $10 to your account, you want that

163
00:08:39.217 --> 00:08:42.976
to be one transaction because if that
happens in multiple transactions,

164
00:08:42.976 --> 00:08:43.659
that means.

165
00:08:43.659 --> 00:08:47.529
What happens if one happens and
then the server goes down?

166
00:08:47.529 --> 00:08:51.227
I mean, someone lost $10 and
someone didn't gain $10.

167
00:08:51.227 --> 00:08:53.801
So that means you lost $10 altogether,
right?

168
00:08:53.801 --> 00:08:58.887
So you need that to be an atomic
transaction where the loss of $10 here and

169
00:08:58.887 --> 00:09:02.857
the gaining of $10 here is
all one atomic transaction.

170
00:09:02.857 --> 00:09:03.957
Does that make sense?

171
00:09:05.613 --> 00:09:11.068
It ends up being extremely important,
these are called transactions.

172
00:09:11.068 --> 00:09:13.500
So yeah that's really important,
you'll see it down here,

173
00:09:13.500 --> 00:09:15.152
we'll talk transactions again as well.

174
00:09:15.152 --> 00:09:17.051
The next one is consistency.

175
00:09:17.051 --> 00:09:21.485
A good example is as you always have
multiple database servers running at

176
00:09:21.485 --> 00:09:22.435
the same time.

177
00:09:22.435 --> 00:09:27.455
So if I have five database servers go
down, and I have a sorry, if I have five

178
00:09:27.455 --> 00:09:32.749
running and I have one go down, the other
four need to kind of pick up the slack.

179
00:09:32.749 --> 00:09:34.045
And if your database isn't consistent,

180
00:09:34.045 --> 00:09:35.904
that means that they're gonna
be out of whack a little bit.

181
00:09:35.904 --> 00:09:38.615
So, you don't actually know
which one knows the truth.

182
00:09:38.615 --> 00:09:41.768
And even worse,
you might actually lose data.

183
00:09:41.768 --> 00:09:45.305
So if your main database goes down,
and you have four others and

184
00:09:45.305 --> 00:09:47.527
they're lagging behind the main one.

185
00:09:47.527 --> 00:09:50.594
That means you could lose data
in the process which again for

186
00:09:50.594 --> 00:09:53.244
like banking stuff,
that's a disaster, right?

187
00:09:53.244 --> 00:09:56.538
Someone could be losing millions of
dollars just because your database went

188
00:09:56.538 --> 00:09:57.368
down at a bad time.

189
00:09:57.368 --> 00:10:00.969
You'll notice a lot of these times
I frame this in terms of money.

190
00:10:00.969 --> 00:10:04.875
It's because banks have been
really driving databases for

191
00:10:04.875 --> 00:10:06.835
the past 50 years, right?

192
00:10:06.835 --> 00:10:10.846
So a lot of these features exist
because banks have made them that way.

193
00:10:14.100 --> 00:10:14.924
Isolation.

194
00:10:14.924 --> 00:10:20.822
Isolation is just kind of, we don't
necessarily talk about this one as much.

195
00:10:20.822 --> 00:10:24.417
But if you have a query that's gonna
be doing a bunch of things all at once.

196
00:10:24.417 --> 00:10:27.568
It basically means that you
can run them concurrently,

197
00:10:27.568 --> 00:10:31.939
so you can run the transaction broken
down into pieces, all at the same time.

198
00:10:31.939 --> 00:10:33.500
Or it can run it serially.

199
00:10:33.500 --> 00:10:37.202
So, do this one, then this one,
then this one, then this one, right?

200
00:10:37.202 --> 00:10:40.340
And everything will happen the same way.

201
00:10:40.340 --> 00:10:44.140
So it just basically means you
can decompose it into parts,

202
00:10:44.140 --> 00:10:48.329
running it in different parts and
that's still gonna work okay.

203
00:10:48.329 --> 00:10:51.438
And then lastly durability that just says,
if your server crashes,

204
00:10:51.438 --> 00:10:53.594
you can restore it back to where it was,
right?

205
00:10:53.594 --> 00:10:56.512
And that just means it's
writing to disk successfully.

206
00:10:56.512 --> 00:11:03.031
And it's means your data is
durable to a crash, okay?

207
00:11:03.031 --> 00:11:04.717
So that's ACID.

208
00:11:04.717 --> 00:11:07.276
So if you hear database
described as ACID or

209
00:11:07.276 --> 00:11:11.485
if you hear a query is described as
being ACID, that's what it means.

210
00:11:11.485 --> 00:11:13.460
It means all of those
boxes are being checked.

211
00:11:13.460 --> 00:11:18.188
So you might be thinking right now is like
well, I want everything to be ACID, right?

212
00:11:18.188 --> 00:11:21.414
I want everything to be
totally done this way,

213
00:11:21.414 --> 00:11:25.067
but the thing is you're
making a trade off, right?

214
00:11:25.067 --> 00:11:26.672
ACID is safe, but it's slow.

215
00:11:26.672 --> 00:11:31.385
If you're reading through these something
like durability means if your query is

216
00:11:31.385 --> 00:11:35.208
durable, it means that it's not
only writing to the main server,

217
00:11:35.208 --> 00:11:39.306
but it's actually going to be writing
out to all of the other servers and

218
00:11:39.306 --> 00:11:41.725
they're all going to be writing to disk.

219
00:11:41.725 --> 00:11:43.955
And that you're gonna have to wait for

220
00:11:43.955 --> 00:11:47.864
all that stuff to happen before
the query is marked as successful.

221
00:11:47.864 --> 00:11:48.643
That is very slow,

222
00:11:48.643 --> 00:11:51.731
particularly if your database is
spread across the entire world, right?

223
00:11:51.731 --> 00:11:54.771
So instead of waiting, five milliseconds,

224
00:11:54.771 --> 00:11:59.418
you're now waiting two seconds for
your query to totally complete.

225
00:11:59.418 --> 00:12:02.636
That might be worth it again,
if you're moving money around, but

226
00:12:02.636 --> 00:12:04.822
if you're just updating a profile picture,

227
00:12:04.822 --> 00:12:08.976
it's probably okay if that's not totally
consistent and totally durable, right?

228
00:12:08.976 --> 00:12:10.370
There's acceptable loss in data.

229
00:12:10.370 --> 00:12:15.410
So that's what I'm just saying is know
trade offs that you're making, know which

230
00:12:15.410 --> 00:12:20.098
data is acceptable to lose, know what
data is totally unacceptable to lose.

231
00:12:20.098 --> 00:12:24.682
And you're gonna have to make
choices on databases based on that.

232
00:12:28.145 --> 00:12:31.066
Transactions the one,
I just wanna call this out specifically.

233
00:12:31.066 --> 00:12:36.215
Sometimes one query can't accomplish
all the things that you wanna do.

234
00:12:36.215 --> 00:12:39.216
So you're gonna have to send multiple
queries to do accomplish the thing that

235
00:12:39.216 --> 00:12:39.778
you wanna do.

236
00:12:39.778 --> 00:12:41.234
But again, you can't break it up.

237
00:12:41.234 --> 00:12:43.261
Most of these databases, in fact,

238
00:12:43.261 --> 00:12:47.194
I think all of these databases allow
the ability to do transactions.

239
00:12:47.194 --> 00:12:49.456
Which is I'm gonna send you five queries,
but

240
00:12:49.456 --> 00:12:53.292
I just don't want you to do anything
else besides those five queries, right?

241
00:12:53.292 --> 00:12:56.757
So it actually makes those five
queries act as one query and

242
00:12:56.757 --> 00:12:58.959
that's considered a transaction.

243
00:12:58.959 --> 00:13:02.519
And you're just guaranteeing this either
all happens or none of it happens.

244
00:13:02.519 --> 00:13:05.734
Because I can't have it partially happen,
right?

245
00:13:05.734 --> 00:13:10.241
Which going back to the money thing, if
you're gonna take $10 from this account,

246
00:13:10.241 --> 00:13:11.945
you must add it to this account.

247
00:13:11.945 --> 00:13:13.474
Don't do anything in the middle.

248
00:13:13.474 --> 00:13:15.808
I can't have that
inconsistency in my queries.

249
00:13:15.808 --> 00:13:18.572
If you have a multi threaded database,

250
00:13:18.572 --> 00:13:23.614
you're sending a query that can be
broken down into multiple threads.

251
00:13:23.614 --> 00:13:28.239
That query needs to work the same way in
parallel it then if it ran sequentially,

252
00:13:28.239 --> 00:13:32.242
which basically just means this query
needs to work the same way every

253
00:13:32.242 --> 00:13:34.679
single time, no matter what you send it.

254
00:13:34.679 --> 00:13:37.884
No matter how the database is processing
it, the query needs to work the same way.

255
00:13:37.884 --> 00:13:39.860
That's probably a better way of putting.

256
00:13:39.860 --> 00:13:44.761
And to be frank, I don't really understand
isolation as much because it's not

257
00:13:44.761 --> 00:13:46.893
something you ever talked about.

258
00:13:46.893 --> 00:13:50.464
It used it used to be important and
now basically everything checks that box.

259
00:13:50.464 --> 00:13:55.993
&gt;&gt; So a transact transactions
relate to a person a all databases?

260
00:13:55.993 --> 00:14:01.894
&gt;&gt; No transact transactions
relate to almost every database.

261
00:14:01.894 --> 00:14:07.026
It's how's databases get around
the problem of I have a thing that

262
00:14:07.026 --> 00:14:12.996
must be atomic, but I don't have the
ability to do this in one query, right?

263
00:14:12.996 --> 00:14:17.361
It's like I have to say this
idea in one sentence, but

264
00:14:17.361 --> 00:14:22.992
I have the grammar structure doesn't
allow me to do it one sentence.

265
00:14:22.992 --> 00:14:25.466
Therefore I'm gonna be using semi
colon to get this into one sentence.

266
00:14:25.466 --> 00:14:27.759
Does that kinda make sense?

267
00:14:31.194 --> 00:14:34.671
So it's related o the A,
I guess you would use it to fulfill the A.

268
00:14:34.671 --> 00:14:38.590
Yeah, okay, I guess they
are kind of tied to each other.

