WEBVTT

1
00:00:00.020 --> 00:00:02.835
Let's go and talk about Deletes.

2
00:00:02.835 --> 00:00:04.170
So we've done, inserts, deletes.

3
00:00:04.170 --> 00:00:11.810
So we've done inserts, updates up certs.

4
00:00:11.810 --> 00:00:13.153
And now we're gonna do a delete.

5
00:00:13.153 --> 00:00:21.575
Let's do db.pets.deleteMany.

6
00:00:21.575 --> 00:00:26.677
Let's delete all reptiles of breed
havanese because there's no such

7
00:00:26.677 --> 00:00:32.382
thing as a havanese reptile, so you just
give it a query object type reptile and

8
00:00:32.382 --> 00:00:37.685
you give it a breed, Hanese,

9
00:00:37.685 --> 00:00:42.211
I mean, you're doing a delete many so you
wanna be very careful of what you're gonna

10
00:00:42.211 --> 00:00:46.508
do with the delete many because you could
delete things that you don't want to.

11
00:00:46.508 --> 00:00:47.473
But in the end,

12
00:00:47.473 --> 00:00:52.390
you can see here this ended up deleting
357 documents from our collection.

13
00:00:53.440 --> 00:00:57.760
And same thing, there's a delete 1, if
you wanna delete just at most one thing.

14
00:00:57.760 --> 00:00:59.472
Like if you're only trying
to delete one thing,

15
00:00:59.472 --> 00:01:02.062
make sure using the delete 1 because
delete many it could be catastrophic

16
00:01:02.062 --> 00:01:03.160
when you get your query wrong.

17
00:01:04.390 --> 00:01:05.450
Because it doesn't ask questions.

18
00:01:05.450 --> 00:01:07.070
Like you wanna delete all
those things off gesture.

19
00:01:09.540 --> 00:01:14.720
Like if you just say delete many, I don't
know if that's gonna work, not gonna try.

20
00:01:15.940 --> 00:01:17.559
I'm just not interested in
figuring out if that works.

21
00:01:21.284 --> 00:01:27.780
It's like doing RM-RF/ on your
computer just don't do it.

22
00:01:27.780 --> 00:01:31.700
It's like the call of
the void as people call that,

23
00:01:31.700 --> 00:01:36.440
there's a set of functions called,
Find End, so there's,

24
00:01:36.440 --> 00:01:42.020
let's see here, find an update,
find and replace and find and delete.

25
00:01:43.020 --> 00:01:47.223
Let's just do a find a delete I think,
I don't have one of my notes here, but,

26
00:01:47.223 --> 00:01:49.150
I should be able to find and delete.

27
00:01:52.253 --> 00:01:58.726
Let's say name Fido,

28
00:01:58.726 --> 00:02:03.158
type reptile.

29
00:02:12.490 --> 00:02:19.900
Well, I guess that's not, it's find 1,
sorry, find 1 and delete.

30
00:02:21.186 --> 00:02:27.370
[COUGH] So what this does is
that's different from a delete.

31
00:02:28.660 --> 00:02:32.885
Notice when we did a delete many here,
it just says I deleted a bunch of stuff,

32
00:02:32.885 --> 00:02:36.135
it's gone with find one and
delete what's it's gonna do,

33
00:02:36.135 --> 00:02:40.894
it's actually going to find it, return to
that thing, and then also delete it right?

34
00:02:40.894 --> 00:02:44.907
So in this particular case, I got
the Phyto object back from MongoDB, but

35
00:02:44.907 --> 00:02:46.540
it also deleted this object.

36
00:02:46.540 --> 00:02:49.590
So this object is now
deleted in our database.

37
00:02:49.590 --> 00:02:54.741
So that's what find one and updates gonna
do it's gonna return to you that object or

38
00:02:54.741 --> 00:02:57.171
the the document before you update it so

39
00:02:57.171 --> 00:03:00.350
you can actually see it
before you update it.

40
00:03:00.350 --> 00:03:04.593
Sometimes that's useful, sometimes you
need to see it before you update it or any

41
00:03:04.593 --> 00:03:08.480
want that to be the same thing you wanna
find it and updated at the same time.

42
00:03:10.250 --> 00:03:14.171
So yeah, that's find 1 and update,
find 1 and replace, and find one and

43
00:03:14.171 --> 00:03:16.860
delete the name of those
three different methods.

44
00:03:21.897 --> 00:03:26.191
Cool, the last one I'm gonna
talk about is bulk, right, so

45
00:03:26.191 --> 00:03:29.320
this is less useful for
you doing our shell.

46
00:03:29.320 --> 00:03:30.620
So we're not gonna do it here.

47
00:03:30.620 --> 00:03:35.636
But imagine in your code that
you're having someone that's going

48
00:03:35.636 --> 00:03:42.580
to update their profile and add a pet and
remove another pet all at the same time.

49
00:03:42.580 --> 00:03:45.800
You could write this as three
separate queries to MongoDB.

50
00:03:45.800 --> 00:03:48.380
And that would be fine Mongo
would be just fine with that.

51
00:03:48.380 --> 00:03:52.132
What would be easier and a more efficient
use is you can do what's called a bulk

52
00:03:52.132 --> 00:03:56.920
write, which basically says like, I'm
going to queue up three different changes.

53
00:03:56.920 --> 00:03:59.040
And then I'm going to do
those all at the same time.

54
00:03:59.040 --> 00:04:03.750
So you, queue up three different queries,
and then you flush that bulk all right?

55
00:04:03.750 --> 00:04:07.950
And that all goes to the same,
over the same connection to MongoDB.

56
00:04:07.950 --> 00:04:10.330
Rather than opening three
different connections to MongoDB.

57
00:04:11.480 --> 00:04:14.138
So, this is just an efficiency
thing that you can do to do

58
00:04:14.138 --> 00:04:15.560
a bunch of things all at once.

59
00:04:15.560 --> 00:04:17.420
And that's called bulk right.

60
00:04:17.420 --> 00:04:24.140
And you'll find that in all of the Python,
Ruby, go drivers that you need that for.

