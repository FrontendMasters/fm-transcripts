WEBVTT

1
00:00:00.290 --> 00:00:03.500
Last one here,
let's do some full text search.

2
00:00:05.640 --> 00:00:10.952
So let's say we had a little like free
form search box in our pet adoption app,

3
00:00:10.952 --> 00:00:11.537
right?

4
00:00:11.537 --> 00:00:16.424
Where a user can go in and type dog, they
can type Havanese, they can type Luna.

5
00:00:16.424 --> 00:00:20.824
They can type any one of those
kind of things in there.

6
00:00:20.824 --> 00:00:24.357
We don't have one querable field
where we can say, hey MongoDB,

7
00:00:24.357 --> 00:00:27.131
give me anything that contains Luna in it,
right?

8
00:00:27.131 --> 00:00:30.166
And it would look across the name,
the description,

9
00:00:30.166 --> 00:00:32.600
the location all those different things.

10
00:00:32.600 --> 00:00:36.894
That's called full text search,
where you're doing text across multiple

11
00:00:36.894 --> 00:00:42.430
different columns or multiple different
fields, or whatever you wanna call them.

12
00:00:42.430 --> 00:00:45.450
It does have that ability to
do with a text search index.

13
00:00:45.450 --> 00:00:50.100
So what we're gonna do is we're
gonna say db.pets.createIndex again.

14
00:00:50.100 --> 00:00:55.801
But we're going to do this with type,

15
00:00:55.801 --> 00:01:01.330
text, breed, text, name, text.

16
00:01:01.330 --> 00:01:06.825
And what's this is gonna do is its
gonna create a new index containing

17
00:01:06.825 --> 00:01:12.713
all of these things, so now I can
just say, hey, pets, search for Luna.

18
00:01:12.713 --> 00:01:17.667
And it's gonna give me anything that
contains Luna across type, breed or name.

19
00:01:22.432 --> 00:01:28.960
It's key to know that collections
can only support one text index.

20
00:01:28.960 --> 00:01:31.990
So you can't have multiple different
types of texts index per collection.

21
00:01:31.990 --> 00:01:33.029
Each collection only gets one.

22
00:01:34.800 --> 00:01:39.123
Now the fun part is I
can say db.pets.find,

23
00:01:40.607 --> 00:01:46.436
$text, which is a special operator for

24
00:01:46.436 --> 00:01:52.269
searching against the full text index.

25
00:01:52.269 --> 00:01:59.024
And I'm gonna do a search for
dog Havanese Luna.

26
00:02:00.754 --> 00:02:06.010
You can imagine this is something that a
user would enter when they're looking for

27
00:02:06.010 --> 00:02:12.946
a pet, right I think that's right.

28
00:02:17.220 --> 00:02:17.720
Okay, cool.

29
00:02:20.875 --> 00:02:26.830
And so now what's interesting about this,
all of these are right.

30
00:02:26.830 --> 00:02:29.400
You can see that they all contain dog.

31
00:02:29.400 --> 00:02:32.580
They all contain one of these things,
right?

32
00:02:32.580 --> 00:02:35.690
Dog Havanese Luna, so
it's finding all the correct things.

33
00:02:35.690 --> 00:02:39.355
But you would expect that if I'm
searching for dog Havanese Luna,

34
00:02:39.355 --> 00:02:40.931
what were the top result be?

35
00:02:40.931 --> 00:02:42.914
It'd be the one that most
closely matches that right?

36
00:02:42.914 --> 00:02:45.880
The one that contains the most
amount of these search items.

37
00:02:45.880 --> 00:02:49.730
So by default MongoDB does
not sort these for you.

38
00:02:49.730 --> 00:02:52.170
It does actually create
what's called a text score.

39
00:02:52.170 --> 00:02:54.987
So you actually go have to go back and
say, give me this and

40
00:02:54.987 --> 00:02:58.236
also sort by the one that matches
most closely to my search terms.

41
00:03:00.513 --> 00:03:05.313
So you can do that by, same thing, but

42
00:03:05.313 --> 00:03:08.621
you have to give it a sort.

43
00:03:08.621 --> 00:03:12.843
And that sort is by score, And

44
00:03:12.843 --> 00:03:18.420
score can be called whatever you want,
it just has to be called something.

45
00:03:18.420 --> 00:03:25.352
But you have to give it this meta, $meta
and you're gonna search by text score.

46
00:03:31.293 --> 00:03:34.006
I think that's right.

47
00:03:36.419 --> 00:03:38.440
Yep, okay.

48
00:03:38.440 --> 00:03:42.228
So now I searched again by that but
if you look here at the top.

49
00:03:42.228 --> 00:03:45.200
Now it's named Luna type
dog breed Havanese.

50
00:03:45.200 --> 00:03:50.097
And so it's actually more closely trying
to figure out which of these matches

51
00:03:50.097 --> 00:03:51.768
my search terms the best.

52
00:03:54.950 --> 00:03:55.710
That makes sense?

53
00:03:58.850 --> 00:04:02.329
So if you actually wanna see that,
you can actually pull that score out so

54
00:04:02.329 --> 00:04:04.109
you can see the text score yourself.

55
00:04:06.130 --> 00:04:09.420
You just have to give it a projection or
not.

56
00:04:09.420 --> 00:04:10.313
You can just do it that way.

57
00:04:12.764 --> 00:04:16.930
So I'm going to say score and
just put the same thing here.

58
00:04:19.205 --> 00:04:27.688
$meta: "textScore".

59
00:04:33.181 --> 00:04:37.220
It's through

60
00:04:37.220 --> 00:04:42.273
the projection.

61
00:04:49.726 --> 00:04:54.630
So you can see here, the first thing
we're giving it is the search object.

62
00:04:54.630 --> 00:04:57.686
The second thing, we have to project
that score into the response, right,

63
00:04:57.686 --> 00:04:59.850
using the projections that
we talked about earlier.

64
00:04:59.850 --> 00:05:05.636
And you can see here now it's
giving these all a score of 3.2.

65
00:05:05.636 --> 00:05:10.012
I don't actually know what
those scores mean, but

66
00:05:10.012 --> 00:05:16.435
you can see all these match it, but
let's say like if we sort by text score.

67
00:05:18.412 --> 00:05:22.656
Yeah, if it didn't match it as well,
the text score would be different,

68
00:05:22.656 --> 00:05:24.444
and you can kinda sort by that.

69
00:05:24.444 --> 00:05:25.924
Yeah, that's how that works.

70
00:05:28.802 --> 00:05:31.985
Anyway, this is super useful if you
have some sort of text field freeform

71
00:05:31.985 --> 00:05:33.410
text search.

72
00:05:33.410 --> 00:05:35.450
You can use these text scores
to kind of pull things out.

73
00:05:35.450 --> 00:05:39.070
Another nice thing about these texts
score are these a full text search.

74
00:05:39.070 --> 00:05:43.894
It actually is language aware so it will
drop things like the, and and, and it,

75
00:05:43.894 --> 00:05:47.576
right like those kind of stop
words is what they're called.

76
00:05:47.576 --> 00:05:52.880
It's not just in English, it does it for
English but it also has that ability for

77
00:05:52.880 --> 00:05:58.440
Dutch and German and Japanese and
Chinese all that kind of stuff as well.

78
00:05:58.440 --> 00:06:02.060
Or you can just have it do neutral, where
it won't do any stop words whatsoever.

79
00:06:02.060 --> 00:06:06.464
All you have to do is you have to pass
an extra flag to that Full Text Search to

80
00:06:06.464 --> 00:06:10.820
say, here's the language that I want
you to do the full text search for.

81
00:06:12.860 --> 00:06:14.490
You can even do it for
multiple languages at a time.

82
00:06:14.490 --> 00:06:15.270
It actually works.

83
00:06:15.270 --> 00:06:19.600
If you want to do English and Spanish
that you can do it that way as well.

84
00:06:19.600 --> 00:06:21.071
There's a lot more to full text search,

85
00:06:21.071 --> 00:06:23.420
there's a lot more
superpowers that it has.

86
00:06:23.420 --> 00:06:25.690
This is just kind of
the most basic way to do it.

87
00:06:25.690 --> 00:06:29.511
So I left the link there in the course
notes for you to go ahead and to go and

88
00:06:29.511 --> 00:06:32.600
explore various different
ways to use full text search.

89
00:06:34.050 --> 00:06:36.670
Is the search case sensitive?

90
00:06:36.670 --> 00:06:39.401
No, pretty sure it's not,
but let's give it a shot.

91
00:06:41.417 --> 00:06:46.400
Nope, it is not case sensitive.

92
00:06:47.930 --> 00:06:52.043
I wanna say that there is a way to make
it case sensitive, but I haven't tried.

93
00:06:52.043 --> 00:06:55.480
So the question is, is what happens
if we insert another document?

94
00:06:55.480 --> 00:06:57.020
Do we have to reindex it?

95
00:06:57.020 --> 00:06:58.054
And the answer is no,

96
00:06:58.054 --> 00:07:01.390
it will continually index new things
that you put into the database.

97
00:07:01.390 --> 00:07:03.940
When you update it, it'll reindex itself.

98
00:07:03.940 --> 00:07:06.440
It automatically keeps its
own up to indexes up to date.

