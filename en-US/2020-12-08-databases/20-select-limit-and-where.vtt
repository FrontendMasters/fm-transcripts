WEBVTT

1
00:00:00.450 --> 00:00:03.690
So here, we're just going to start
going through the grammar of things

2
00:00:03.690 --> 00:00:04.660
you can do with SQL.

3
00:00:04.660 --> 00:00:08.347
I'm going to try and just give you kind of
a high level overview of here's a bunch of

4
00:00:08.347 --> 00:00:10.070
really cool stuff you can do with SQL.

5
00:00:10.070 --> 00:00:13.274
And then you're gonna
learn to kind of mix and

6
00:00:13.274 --> 00:00:18.010
match all these things to fit
the the querying needs that you have.

7
00:00:18.010 --> 00:00:21.040
So we saw the first one already
a select star from users.

8
00:00:21.040 --> 00:00:23.040
Pretty straightforward there.

9
00:00:23.040 --> 00:00:25.340
Yeah, let's do that first.

10
00:00:25.340 --> 00:00:28.030
So I want everyone to come
to this page right now.

11
00:00:28.030 --> 00:00:32.930
Complete intro to databases Querying
PostgreSQL or just to show you here.

12
00:00:32.930 --> 00:00:35.750
It's this one here, 3 on SQL.

13
00:00:38.040 --> 00:00:41.410
And it says click here for
a sample set of tables.

14
00:00:41.410 --> 00:00:48.900
So what this is, this is an extremely
long SQL query are actually several.

15
00:00:49.970 --> 00:00:53.690
And we're gonna run that it's gonna put
a bunch of sample data into our database.

16
00:00:53.690 --> 00:00:56.077
So if you click on that,
Firefox is just gonna say,

17
00:00:56.077 --> 00:00:58.210
where do you want me to save this?

18
00:00:58.210 --> 00:01:00.846
I'm just gonna say open this
with Visual Studio code.

19
00:01:02.506 --> 00:01:07.620
And you can see here, this is actually
6,000 lines of something of SQL.

20
00:01:07.620 --> 00:01:09.840
So what this is gonna do is,

21
00:01:09.840 --> 00:01:14.680
it's going to drop all these
tables if they exist, right?

22
00:01:14.680 --> 00:01:17.009
So it's actually going to drop
our users table for us, and

23
00:01:17.009 --> 00:01:18.910
then it's going to recreate it.

24
00:01:18.910 --> 00:01:21.910
Only reason it does that is you can re-run
this at any time, it'll always work.

25
00:01:21.910 --> 00:01:23.770
It's not gonna complain at you.

26
00:01:23.770 --> 00:01:27.156
So if you accidentally drop
one of your tables for fun,

27
00:01:27.156 --> 00:01:31.510
you can rerun this at any time,
this will fix everything, I promise.

28
00:01:32.510 --> 00:01:37.271
So, there are easier fancy ways
of just feeding a directly an SQL

29
00:01:37.271 --> 00:01:39.370
file to Postgres.

30
00:01:39.370 --> 00:01:41.080
I'm much too lazy to
show you how to do that.

31
00:01:41.080 --> 00:01:47.360
So I'm just going to command
A command C or control A control C.

32
00:01:47.360 --> 00:01:52.490
So I'm going to copy and
paste this directly into this and paste.

33
00:01:52.490 --> 00:01:54.870
And you can see,
this will take maybe about a minute.

34
00:01:54.870 --> 00:01:58.269
It's a lot of ask about
flying at your database.

35
00:02:00.510 --> 00:02:03.450
But it's going to insert like 2500
records into your database so

36
00:02:03.450 --> 00:02:06.470
that we can kind of play
around with a bunch of these.

37
00:02:06.470 --> 00:02:10.672
In the interim, while this is doing that,
we're going to be talking about

38
00:02:10.672 --> 00:02:13.620
all the different ways that
you can query Postgres.

39
00:02:13.620 --> 00:02:16.787
So we're going to do selects,
and inserts and updates, and

40
00:02:16.787 --> 00:02:18.600
limits and all that kind of stuff.

41
00:02:18.600 --> 00:02:21.000
So relatively the same sort of
things we learned about Mongo.

42
00:02:21.000 --> 00:02:21.510
We're gonna learn today.

43
00:02:21.510 --> 00:02:24.723
To the unlike the analogous
behaviors here in Postgres, and

44
00:02:24.723 --> 00:02:28.377
depending on how fast your computer is,
and how fast it is copying and

45
00:02:28.377 --> 00:02:31.780
pasting to Docker, this might take,
you know, a minute or so.

46
00:02:33.160 --> 00:02:35.290
You can see here, mine's still going.

47
00:02:35.290 --> 00:02:36.630
There we go.

48
00:02:36.630 --> 00:02:38.300
So mine's all done now.

49
00:02:38.300 --> 00:02:42.030
So if I do \d,
you can see here I should have a boards.

50
00:02:42.030 --> 00:02:45.300
Comments, rich content and users.

51
00:02:45.300 --> 00:02:47.640
So I have four tables that we're going
to be playing around with today.

52
00:02:47.640 --> 00:02:49.018
And we'll go over each one of them for

53
00:02:49.018 --> 00:02:50.980
right now we're only gonna
be talking about users.

54
00:02:50.980 --> 00:02:52.870
And then we'll get into the other
ones here in just a second.

55
00:02:52.870 --> 00:02:56.253
So we did SELECT* from users.

56
00:02:56.253 --> 00:02:59.330
If you do this right now,
we're gonna get a lot of users.

57
00:02:59.330 --> 00:03:04.289
It's actually going to give you
a more buffer more as a Linux program

58
00:03:04.289 --> 00:03:06.420
of all of your users.

59
00:03:06.420 --> 00:03:08.060
That's a lot.
I don't want to do that right now.

60
00:03:08.060 --> 00:03:12.530
So, but that's what that will
d we'll it be more useful?

61
00:03:12.530 --> 00:03:15.807
Can I just grab 10 instead of all of them,

62
00:03:15.807 --> 00:03:20.740
well same way with Mongo you can
do limit who you can do limit ten.

63
00:03:23.530 --> 00:03:25.510
Let's even do the lesson
that will do limit five.

64
00:03:28.315 --> 00:03:31.965
So, this will grab the first
five records in our database.

65
00:03:35.255 --> 00:03:40.245
So, by the way, these are all made up
fake emails made up fake names and

66
00:03:40.245 --> 00:03:41.525
stuff like that.

67
00:03:41.525 --> 00:03:45.785
So yeah.

68
00:03:47.445 --> 00:03:48.905
Some of them will have last logins.

69
00:03:48.905 --> 00:03:51.046
You can see a bunch of these
don't have last login.

70
00:03:53.611 --> 00:03:55.400
Yeah, limit that's a good one.

71
00:03:55.400 --> 00:03:58.912
If you know exactly how many
records you want to do, grab,

72
00:03:58.912 --> 00:04:01.860
let's do where well let's
do projection next.

73
00:04:01.860 --> 00:04:03.850
So we're doing star right here.

74
00:04:03.850 --> 00:04:06.180
So project objection is just
what we were showing before.

75
00:04:06.180 --> 00:04:09.542
You can do let's select username and

76
00:04:09.542 --> 00:04:14.966
full name from users limiting
five you can see here this will

77
00:04:14.966 --> 00:04:20.190
only return this which is
obviously a lot easier to read.

78
00:04:22.360 --> 00:04:23.830
Alright, let's do some where.

79
00:04:26.160 --> 00:04:33.004
So let's select username, email user ID.

80
00:04:35.332 --> 00:04:41.660
From users where user ID equals.

81
00:04:41.660 --> 00:04:45.940
User ID equals 150.

82
00:04:45.940 --> 00:04:50.799
So again, this is not again pretty
easy to read the order here

83
00:04:50.799 --> 00:04:53.290
is actually quite important.

84
00:04:53.290 --> 00:04:54.450
You must do the select.

85
00:04:54.450 --> 00:04:58.350
There's a specific order that
these clauses have to come in.

86
00:04:58.350 --> 00:05:04.010
And when l say clause this is a clause,
this is a clause, that's a clause right.

87
00:05:04.010 --> 00:05:05.580
So they do have to come
in a specific order.

88
00:05:07.140 --> 00:05:11.676
We can see here this will select exactly
one row where the user ID is 150, and

89
00:05:11.676 --> 00:05:12.650
we get this one.

