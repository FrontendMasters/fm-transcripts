WEBVTT

1
00:00:00.190 --> 00:00:04.866
Let's talk about subqueries.

2
00:00:07.812 --> 00:00:12.850
So subqueries allow you to
do a query within a query.

3
00:00:12.850 --> 00:00:14.530
It's query ception.

4
00:00:14.530 --> 00:00:21.824
Let's say you wanted to query all of the
comments left by someone named Maynard.

5
00:00:21.824 --> 00:00:23.550
I don't know,
maybe that seems useful to you.

6
00:00:25.240 --> 00:00:27.155
We don't actually have
that available to us, and

7
00:00:27.155 --> 00:00:28.940
there's no really useful
way to join on that.

8
00:00:28.940 --> 00:00:33.982
So what we can do is we can do
a query to find Maynard's user ID and

9
00:00:33.982 --> 00:00:38.090
then use that user ID to query for
all the comments.

10
00:00:39.800 --> 00:00:42.030
So we can say SELECT comment ID.

11
00:00:42.030 --> 00:00:47.571
Let's just make this on multiple lines.

12
00:00:47.571 --> 00:00:52.889
Comment_id, user_id and our comment,

13
00:00:52.889 --> 00:00:58.059
LEFT(comment, 20) FROM comments,

14
00:00:58.059 --> 00:01:03.229
WHERE, and then here you're gonna say,

15
00:01:03.229 --> 00:01:09.450
user_id = and
then I'm gonna put parentheses.

16
00:01:09.450 --> 00:01:14.870
This is way of me signaling to SQL I'm
gonna do a query within a query.

17
00:01:14.870 --> 00:01:22.483
And I'm gonna start writing
another query in here.

18
00:01:22.483 --> 00:01:27.981
SELECT user_id FROM users WHERE

19
00:01:27.981 --> 00:01:33.679
full_name = Maynard Simonich.

20
00:01:33.679 --> 00:01:39.230
So then I'm going to close that sub query.

21
00:01:39.230 --> 00:01:44.852
And then I'm gonna put a semicolon to
signal the end of the query altogether.

22
00:01:46.389 --> 00:01:51.990
So now you can see here, this will go and
this query gets run first.

23
00:01:51.990 --> 00:01:53.510
It's gonna go out to users.

24
00:01:53.510 --> 00:01:58.280
It's going to find this person's user id,
it's going to return that.

25
00:01:58.280 --> 00:02:03.502
And then it's gonna be used in this
query to find all of their comments.

26
00:02:03.502 --> 00:02:06.150
So that's all you need to know here.

27
00:02:06.150 --> 00:02:09.170
If you need to do a sub query
to go get something first,

28
00:02:09.170 --> 00:02:11.170
just put parentheses in here.

29
00:02:11.170 --> 00:02:12.470
You can nest them as much as you want.

30
00:02:12.470 --> 00:02:15.700
So you can have queries inside
of queries inside of queries.

31
00:02:15.700 --> 00:02:18.270
That's what how you do subqueries in SQL.

32
00:02:19.410 --> 00:02:21.230
Let's get into group by.

33
00:02:21.230 --> 00:02:25.581
So now we're getting into what we were
using the aggregation pipeline for

34
00:02:25.581 --> 00:02:26.950
in MongoDB.

35
00:02:26.950 --> 00:02:29.234
SQL kind of just has a built
into the language, so

36
00:02:29.234 --> 00:02:33.720
there's no differentiation between
the two, but let's talk about group by.

37
00:02:33.720 --> 00:02:39.230
So I'm gonna say,
SELECT boards.board_name.

38
00:02:39.230 --> 00:02:43.410
Yeah, so let's talk about first,
what we're gonna do with group by.

39
00:02:43.410 --> 00:02:48.110
We wanna find the top ten
most posted to boards.

40
00:02:48.110 --> 00:02:52.148
So we wanna go query the board's table,
find all the boards, and then we want go

41
00:02:52.148 --> 00:02:56.490
look in the comments tables and figure out
which one has the most amount of comments.

42
00:02:56.490 --> 00:03:02.605
So we're gonna use group by to figure
out that kind of aggregate number

43
00:03:02.605 --> 00:03:08.422
of comments per board and
then we're gonna do a group by with that.

44
00:03:08.422 --> 00:03:13.959
So we're gonna want to see our friend
COUNT(*) again to just count how

45
00:03:13.959 --> 00:03:20.150
many of each one that we have, and then
we'll just call that AS comment_count.

46
00:03:21.200 --> 00:03:25.418
SELECT boards.board_name.

47
00:03:29.318 --> 00:03:38.741
COUNT(*) as comment_count FROM comments.

48
00:03:42.783 --> 00:03:46.488
Here we could say INNER JOIN on or
I'm just gonna say NATURAL INNER JOIN,

49
00:03:46.488 --> 00:03:48.017
cuz I know this is gonna work.

50
00:03:51.546 --> 00:03:55.173
Boards, and they're gonna say GROUP BY so

51
00:03:55.173 --> 00:03:59.924
we're gonna tell it how to
aggregate things together.

52
00:03:59.924 --> 00:04:07.311
Boards.board_name, you could do this
probably on id as well, it should work.

53
00:04:11.559 --> 00:04:17.755
Then we're gonna say ORDER BY, this is
how you do sorting, right, ORDER BY.

54
00:04:17.755 --> 00:04:22.244
Comment_count, DESCENDING,
cuz we want the top 10 and

55
00:04:22.244 --> 00:04:27.559
then we're gonna say LIMIT 10,
cuz we only want 10 results back.

56
00:04:30.440 --> 00:04:34.121
And then you can see, again these
board names are auto generated so

57
00:04:34.121 --> 00:04:36.300
I don't really know what is which one.

58
00:04:37.530 --> 00:04:42.300
The cloned and the budgetary
management boards have 18 comments.

59
00:04:42.300 --> 00:04:46.840
These ones all have 16

60
00:04:46.840 --> 00:04:51.384
through 13, right?

61
00:04:51.384 --> 00:04:55.736
And if you wanted to see ascending,
you can see here this one has four.

62
00:05:01.452 --> 00:05:08.942
But we have a problem here, so
think about this for a second.

63
00:05:08.942 --> 00:05:12.979
This query that we ran right here,

64
00:05:12.979 --> 00:05:18.000
what happens if a board has zero comments?

65
00:05:19.630 --> 00:05:23.361
And actually, let me tell you, there is
a board in here that has zero comments,

66
00:05:23.361 --> 00:05:26.779
cuz I went and made sure of it,
cuz I wanted you to discover this problem.

67
00:05:26.779 --> 00:05:30.155
Because we're doing INNER JOIN,
what happens when there's no match?

68
00:05:32.722 --> 00:05:34.480
It gets left out of the data set, right?

69
00:05:37.210 --> 00:05:39.034
So what do we do?

70
00:05:40.533 --> 00:05:41.790
What do we want to join?

71
00:05:42.950 --> 00:05:43.450
Yeah, go ahead.

72
00:05:46.022 --> 00:05:50.590
Hold on,
I think I have you muted One more time.

73
00:05:50.590 --> 00:05:55.406
&gt;&gt; You want to left join?

74
00:05:55.406 --> 00:06:00.260
&gt;&gt; Close, we wanna right join on this
particular problem, which is super weird.

75
00:06:00.260 --> 00:06:02.460
And I know I said you almost
never use right joins.

76
00:06:02.460 --> 00:06:06.860
And then I just turned around and slap you
with a right join, but that's what I did.

77
00:06:06.860 --> 00:06:08.640
But I like where your head's at.

78
00:06:08.640 --> 00:06:10.560
That's exactly the kind of thinking
that you want to go through.

79
00:06:11.580 --> 00:06:12.320
So awesome.

80
00:06:14.110 --> 00:06:18.706
So we're gonna do a natural right join,
cuz we wanna include the boards, right, so

81
00:06:18.706 --> 00:06:22.020
left would be on comments,
right would be on board.

82
00:06:22.020 --> 00:06:26.870
And that's where we want to get
the thing that could be left out.

83
00:06:30.150 --> 00:06:33.827
So now we have fire, and
it says it has one comment but

84
00:06:33.827 --> 00:06:36.260
we know that's not true, right?

85
00:06:36.260 --> 00:06:41.650
It doesn't have one comment,
it has zero comments.

86
00:06:41.650 --> 00:06:42.150
Why is that?

87
00:06:44.140 --> 00:06:47.926
Well, that's a problem because
it's including something,

88
00:06:47.926 --> 00:06:50.790
it's including that board
with nothing on it.

89
00:06:50.790 --> 00:06:53.770
And it's counting that in our Count(*).

90
00:06:53.770 --> 00:06:56.632
So this Count(*),
it's called an aggregation function,

91
00:06:56.632 --> 00:06:57.770
aggregation pipeline.

92
00:06:57.770 --> 00:06:59.700
Hopefully, you're seeing
some parallels here.

93
00:06:59.700 --> 00:07:01.300
It's just counting all of the lines.

94
00:07:01.300 --> 00:07:05.840
And there's a line being included from
that one, which is not the right thing.

95
00:07:05.840 --> 00:07:07.720
So what do we actually want to count?

96
00:07:07.720 --> 00:07:09.400
We don't want to count any row.

97
00:07:09.400 --> 00:07:12.652
We want to count rows that
actually are really comments, or

98
00:07:12.652 --> 00:07:16.227
we can just count comment ids,
right, cuz if it has a comment id,

99
00:07:16.227 --> 00:07:18.870
it's definitely a real thing in comments.

100
00:07:18.870 --> 00:07:22.939
So I'm gonna say comment_id.

101
00:07:22.939 --> 00:07:28.670
Lo and behold, this fireboard
must be about the fire festival.

102
00:07:29.990 --> 00:07:31.960
Doesn't have any comments, right?

103
00:07:31.960 --> 00:07:35.635
But I wanted to show you how to kind of
work through some mental gymnastics of SQL

104
00:07:35.635 --> 00:07:39.089
bugs, cuz this is the kind of stuff that
you kind of have to think about when

105
00:07:39.089 --> 00:07:40.389
you're dealing with SQL.

106
00:07:40.389 --> 00:07:43.120
You have to be like, what am I including?

107
00:07:43.120 --> 00:07:44.900
What am I not including?

108
00:07:44.900 --> 00:07:47.253
Where's the data going and
where and why, right?

109
00:07:47.253 --> 00:07:49.177
Cuz it would have been super easy,
one, for

110
00:07:49.177 --> 00:07:51.050
us to just exclude this board altogether.

111
00:07:51.050 --> 00:07:54.627
And then it would have been super easy for
us to say, there's one comment in this,

112
00:07:54.627 --> 00:07:57.470
despite that there's actually
zero comments in this.

113
00:07:57.470 --> 00:07:59.933
Any questions before we move on?

114
00:07:59.933 --> 00:08:03.750
The question is when is limit evaluated,
right?

115
00:08:03.750 --> 00:08:07.813
So if I do a join, does a limit get
calculated first or is it join?

116
00:08:07.813 --> 00:08:10.146
Am I gonna be cutting things
off before I'm using them?

117
00:08:10.146 --> 00:08:14.489
There is a particular order of
operations with SQL that I do not

118
00:08:14.489 --> 00:08:19.011
remember off the top my head and
I have to look every single time.

119
00:08:19.011 --> 00:08:22.532
This one I think, I'm pretty sure,
limit is the last thing, so

120
00:08:22.532 --> 00:08:27.047
it does everything first and then it just
returns to you the first ten rows of that.

121
00:08:27.047 --> 00:08:29.410
I'm about 95% on that one.

122
00:08:29.410 --> 00:08:30.950
Do check my math.

123
00:08:30.950 --> 00:08:34.643
But if you just search for SQL order
of operations, it'll give you a pretty

124
00:08:34.643 --> 00:08:38.700
complete breakdown of, here's the complete
order of how things are evaluated.

