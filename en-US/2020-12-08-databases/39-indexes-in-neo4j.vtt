WEBVTT

1
00:00:00.830 --> 00:00:04.112
So we've been talking a lot about
query performance and cost and

2
00:00:04.112 --> 00:00:06.380
Neo4j is going to be no different, right?

3
00:00:06.380 --> 00:00:08.191
If you write really expensive queries,

4
00:00:08.191 --> 00:00:11.610
running Neo4j in production's gonna
end up being very, very expensive.

5
00:00:12.650 --> 00:00:15.127
So it also has the ability to add indexes.

6
00:00:16.961 --> 00:00:20.746
So let's say for example here,
you're writing another app, and

7
00:00:20.746 --> 00:00:24.000
this app will tell you who was
born in the same year as you.

8
00:00:24.000 --> 00:00:28.167
I don't know if that's
an interesting app to someone,

9
00:00:28.167 --> 00:00:31.369
probably is, I'm pretty sure it exists.

10
00:00:31.369 --> 00:00:35.630
But let's say that's something that we're
gonna do with our graph database here.

11
00:00:35.630 --> 00:00:40.874
So if we copy this query here, put it
over here, it's a really simple query,

12
00:00:40.874 --> 00:00:45.650
it's gonna say match person where
p.born equals some year, right?

13
00:00:47.100 --> 00:00:54.730
So if I play that R let's just put p.name.

14
00:00:54.730 --> 00:00:59.453
You can see here we have seven
different actors and actresses and

15
00:00:59.453 --> 00:01:03.303
directors, because
Lily Wichowski is a director,

16
00:01:03.303 --> 00:01:07.750
in our database that are born
in that particular year.

17
00:01:07.750 --> 00:01:11.915
Now this actually ends up being
a fairly expensive query,

18
00:01:11.915 --> 00:01:17.525
because it's actually going to go look
at every single node in our database and

19
00:01:17.525 --> 00:01:20.765
say what year were you born,
is it this year?

20
00:01:22.045 --> 00:01:24.617
Again, if you have a huge data,
if you are IMDB and

21
00:01:24.617 --> 00:01:26.701
you have the entire graph of all movies,

22
00:01:26.701 --> 00:01:31.018
that's going to be a very expensive thing
for you to look at that every single time.

23
00:01:33.852 --> 00:01:40.077
So it's actually come back over here,
so same query RETURN p.name, okay.

24
00:01:41.747 --> 00:01:47.170
Let's run EXPLAIN, it's nice that these
all work relatively the same way, right?

25
00:01:47.170 --> 00:01:52.048
Explain this, and it's gonna tell you its

26
00:01:52.048 --> 00:01:56.621
plan of how it plans to evaluate this.

27
00:01:56.621 --> 00:02:00.780
So it's gonna go in here and
it's gonna do a node by label scan.

28
00:02:00.780 --> 00:02:04.330
And it's going to look
at 140 rows variable.

29
00:02:04.330 --> 00:02:07.169
So let's look at 140 nodes in our graph,

30
00:02:07.169 --> 00:02:10.869
guess how many nodes in our
graph we have 140, right?

31
00:02:10.869 --> 00:02:13.820
So this is not a very efficient query.

32
00:02:15.490 --> 00:02:19.010
Let's go ahead and give that an index and
see how that affects it.

33
00:02:23.752 --> 00:02:31.999
Yeah, same thing.

34
00:02:35.117 --> 00:02:38.653
Yeah, so this node by label scan
is really where you need to

35
00:02:38.653 --> 00:02:41.445
be afraid of what's happening here.

36
00:02:41.445 --> 00:02:45.832
So let's say CREATE INDEX FOR,

37
00:02:49.765 --> 00:02:59.283
(p:Person), On (p.born)

38
00:03:03.873 --> 00:03:07.502
And try that, create index for
p:Person and p.born.

39
00:03:08.534 --> 00:03:10.496
So added one index now.

40
00:03:10.496 --> 00:03:16.140
We're now indexing all of our
celebrities by their birth year.

41
00:03:16.140 --> 00:03:19.420
And if you run that, explain again.

42
00:03:21.690 --> 00:03:24.460
Let's see if I can just make this
smaller for just one second.

43
00:03:24.460 --> 00:03:28.900
You can see here instead
of node label scan,

44
00:03:28.900 --> 00:03:34.905
we're getting a node index seek,
and this is much faster.

45
00:03:36.334 --> 00:03:39.480
So this was available
after 23 milliseconds.

46
00:03:39.480 --> 00:03:42.080
This one up here where
I ran it the last time.

47
00:03:43.500 --> 00:03:45.575
So, I mean,
we have a very small data set so

48
00:03:45.575 --> 00:03:48.540
you're not going to probably
see a huge increase.

49
00:03:48.540 --> 00:03:51.085
When I was running this earlier,
I actually saw like a six x speed up but

50
00:03:51.085 --> 00:03:54.190
I was probably running a bunch of
other stuff in the background as well.

51
00:03:54.190 --> 00:04:00.446
So this is how you end up
creating indexes in Neo4j.

52
00:04:00.446 --> 00:04:05.605
And again this is really nice because,

53
00:04:09.463 --> 00:04:13.291
We're not looking at the same,
that's why p.name,

54
00:04:16.470 --> 00:04:20.550
Instead of looking at 140 records in our
database, we're looking at just three,

55
00:04:20.550 --> 00:04:22.035
which is much faster, right?

56
00:04:22.035 --> 00:04:24.938
So those hops and
those trees end up being a lot faster.

57
00:04:29.238 --> 00:04:31.777
There's a bunch of different
kinds of indexes in Neo4j.

58
00:04:31.777 --> 00:04:35.099
If you have paths that you're
looking at frequently, or

59
00:04:35.099 --> 00:04:38.224
if you're doing a lot of
relationship examination.

60
00:04:38.224 --> 00:04:40.330
You can index relationships,
you can index nodes.

61
00:04:40.330 --> 00:04:41.450
There's a bunch of different kinds.

62
00:04:43.220 --> 00:04:44.780
Yeah, so feel free to go ahead and
check that out.

