WEBVTT

1
00:00:00.620 --> 00:00:02.837
Something I just wanna
put in a section for

2
00:00:02.837 --> 00:00:05.188
all the various different databases here.

3
00:00:05.188 --> 00:00:09.231
So I wanted you to be a little
familiar with how these get run from

4
00:00:09.231 --> 00:00:11.226
the operations perspective.

5
00:00:11.226 --> 00:00:11.915
Most of you,

6
00:00:11.915 --> 00:00:15.883
I'm assuming that you're a developer
writing code to access a database.

7
00:00:15.883 --> 00:00:20.534
You have to remember there's also someone
on the operation side that's not writing

8
00:00:20.534 --> 00:00:22.511
code or writing data to databases.

9
00:00:22.511 --> 00:00:25.429
They're just keeping the servers running,
and spinning them up, and

10
00:00:25.429 --> 00:00:26.313
spinning them down.

11
00:00:26.313 --> 00:00:30.302
Making sure they're resilient, making sure
that they're copied and backed up and

12
00:00:30.302 --> 00:00:31.434
all that kind of stuff.

13
00:00:31.434 --> 00:00:35.542
You as a developer, most of time, this
should be relatively transparent process

14
00:00:35.542 --> 00:00:38.831
to you shouldn't really have to know or
care how it's being run.

15
00:00:38.831 --> 00:00:41.144
However, there is some good
things to keep in mind,

16
00:00:41.144 --> 00:00:43.103
we're just gonna talk a second about that.

17
00:00:43.103 --> 00:00:45.542
So primary, secondary is replica sets,

18
00:00:45.542 --> 00:00:50.435
these are terms that you'll hear fairly
frequently in association with MongoDB.

19
00:00:50.435 --> 00:00:54.978
Every replica set, which is a group
of MongoDB servers has a primary,

20
00:00:54.978 --> 00:00:58.136
which is the thing that you can write to,
right?

21
00:00:58.136 --> 00:01:03.512
And it has secondaries, which are the
secondary servers that are running,

22
00:01:03.512 --> 00:01:06.792
basically, real time
copies of the primary.

23
00:01:06.792 --> 00:01:10.880
So you'll write to the primary, and then
the primary will then flush out that data

24
00:01:10.880 --> 00:01:14.151
to the secondary, so
that they're all relatively kept in sync.

25
00:01:14.151 --> 00:01:19.604
The thing to keep in mind is not fully
consistent, so remember our acid, right?

26
00:01:19.604 --> 00:01:22.459
A-C-I-D, it's not fully consistent,

27
00:01:22.459 --> 00:01:26.858
which means that if I write to primary,
and then Mongo says, okay,

28
00:01:26.858 --> 00:01:31.120
I accepted your query, it has not yet
gotten to the secondaries.

29
00:01:31.120 --> 00:01:35.009
This is a term that is known
as eventually consistent,

30
00:01:35.009 --> 00:01:38.397
which means it fails the C
part of the acid test.

31
00:01:38.397 --> 00:01:43.232
Unless you tell this query must only
be accepted once it's been written not

32
00:01:43.232 --> 00:01:46.312
only to the primary but
to all the secondaries.

33
00:01:46.312 --> 00:01:49.702
And then you achieve that
see part of the the acid,

34
00:01:49.702 --> 00:01:53.757
that's much slower and
usually not what you need, right?

35
00:01:53.757 --> 00:01:59.950
Usually eventual consistency and when I
say eventual it's usually milliseconds,

36
00:01:59.950 --> 00:02:04.671
usually not more than seconds,
probably not minutes, right?

37
00:02:04.671 --> 00:02:08.199
It just depends on how overloaded your
servers are, how busy they are, blah,

38
00:02:08.199 --> 00:02:09.381
all those kind of things.

39
00:02:09.381 --> 00:02:12.187
But that's the point here
is that you have primaries,

40
00:02:12.187 --> 00:02:15.180
you can only write to the primary,
that's a big key here.

41
00:02:15.180 --> 00:02:19.313
Only the primary will accept writes,
you can read from secondaries, right?

42
00:02:19.313 --> 00:02:23.047
Because the secondaries are just
eventually consistent copies

43
00:02:23.047 --> 00:02:26.375
of the primary, so
it's okay to read from secondaries.

44
00:02:26.375 --> 00:02:29.051
It's a good idea if that's
an acceptable trade off too,

45
00:02:29.051 --> 00:02:32.472
because the secondaries don't get
as much load as the primary, right?

46
00:02:32.472 --> 00:02:35.893
The primary gets a lot more load because
it's handling all of the writes.

47
00:02:35.893 --> 00:02:40.182
And so a group of primary, primary and
secondaries is called the replica set.

48
00:02:40.182 --> 00:02:45.137
These are all running things called
the MongoD process, the Mongo,

49
00:02:45.137 --> 00:02:48.991
Damon demon,
however you prefer to pronounce that.

50
00:02:48.991 --> 00:02:55.925
And yeah, that's a good thing to, but
let's talk about arbiters and elections.

51
00:02:55.925 --> 00:02:59.603
So what happens if your primary goes down?

52
00:02:59.603 --> 00:03:02.664
Well, if your primary goes
down MongoDB I'm not joking,

53
00:03:02.664 --> 00:03:05.543
this is what is called,
is holds an election, right?

54
00:03:05.543 --> 00:03:07.690
So each server, it gets a vote and

55
00:03:07.690 --> 00:03:11.461
they vote on who they think
that the new primary should be.

56
00:03:11.461 --> 00:03:15.336
And it does that through a bunch of
different factors like which one has

57
00:03:15.336 --> 00:03:16.518
the lowest latency,

58
00:03:16.518 --> 00:03:20.342
which one Is the most up-to-date it
does a bunch of stuff to decide.

59
00:03:20.342 --> 00:03:22.330
This is gonna be the new primary,

60
00:03:22.330 --> 00:03:26.953
what it'll do is it'll immediately
reassign that role to that new primary.

61
00:03:26.953 --> 00:03:31.547
And then it becomes a new primary and then
your ops person can go around and kick

62
00:03:31.547 --> 00:03:36.140
up the old server and say, okay, you're
back in the pool now as a secondary,

63
00:03:36.140 --> 00:03:38.770
you can also give them priorities.

64
00:03:38.770 --> 00:03:43.168
So let's say you have one
really beefy computer and

65
00:03:43.168 --> 00:03:47.983
five smaller computers
are inside of your replica set.

66
00:03:47.983 --> 00:03:51.716
Because your primary is gonna take a lot
more resources, so what you actually might

67
00:03:51.716 --> 00:03:55.092
do is you might have two really beefy
computers inside of your replica set.

68
00:03:55.092 --> 00:03:56.558
And then a bunch of smaller ones, and

69
00:03:56.558 --> 00:03:59.633
then assign a higher priority to the beefy
secondary so that when the election

70
00:03:59.633 --> 00:04:02.729
happens, it's gonna be that server
because it has more resources, right?

71
00:04:02.729 --> 00:04:04.183
So you can kind of play
some of those games there.

72
00:04:07.141 --> 00:04:11.410
Something that can happen is if you don't
have enough servers, you can have arbiters

73
00:04:11.410 --> 00:04:15.401
which are basically servers that don't
actually, that are not secondaries.

74
00:04:15.401 --> 00:04:20.257
All they do is vote their entire
purpose in existence is just a vote

75
00:04:20.257 --> 00:04:22.920
in prime these kinds of elections.

76
00:04:22.920 --> 00:04:29.030
Usually don't need those, but they do
exist and let's talk about sharding.

77
00:04:29.030 --> 00:04:34.599
So let's say you have five,
let's say petabytes of data, right?

78
00:04:34.599 --> 00:04:39.753
5000 terabytes of data,
you can't hold that on one server system,

79
00:04:39.753 --> 00:04:43.482
we don't have storage arrays
that are that big yet.

80
00:04:43.482 --> 00:04:45.113
So how would you handle that?

81
00:04:45.113 --> 00:04:50.521
Well you would have multiple replica
sets and then you would shard the data.

82
00:04:50.521 --> 00:04:55.353
So you'd split up whole junks
of data that would go to various

83
00:04:55.353 --> 00:04:57.451
different replica sets.

84
00:04:57.451 --> 00:05:01.243
And then you have a process called
Mongo s, Mongo sharding, right?

85
00:05:01.243 --> 00:05:03.805
That you would write
a query to the Mongo s, and

86
00:05:03.805 --> 00:05:07.042
then that would get shorted out
to one of the replica sets.

87
00:05:07.042 --> 00:05:11.048
So that's what sharding is it allows you
to handle even larger amounts of data.

88
00:05:14.827 --> 00:05:19.179
And then lastly, I told you all these
things, just so that hopefully you can

89
00:05:19.179 --> 00:05:24.014
ignore all these, I always use a managed
cloud version again, I work for the cloud.

90
00:05:24.014 --> 00:05:26.932
So I'm a bit biased in the matter, but
there is a bunch of managed versions,

91
00:05:26.932 --> 00:05:28.494
we would have to worry about any of this.

92
00:05:28.494 --> 00:05:31.509
All they do is like, hey,
give me a Mongo server, and

93
00:05:31.509 --> 00:05:35.797
then it'll give you back a connection
string and then it handles sharding,

94
00:05:35.797 --> 00:05:38.954
collections arbiters,
all that kind of stuff for you.

95
00:05:38.954 --> 00:05:42.692
You just pay him you're their money and

96
00:05:42.692 --> 00:05:47.002
they give you fully
scaled model of MongoDB.

97
00:05:47.002 --> 00:05:50.591
So MongoDB Atlas that's from the official
people that make MongoDB that's

98
00:05:50.591 --> 00:05:51.213
one of them.

99
00:05:51.213 --> 00:05:54.592
Microsoft Azure, Cosmos DB,
that's the one that I work with and

100
00:05:54.592 --> 00:05:56.871
there's Amazon Web Services Document DB.

101
00:05:56.871 --> 00:06:01.544
I'm sure Google has their own as well
there's a bunch of these that exist out

102
00:06:01.544 --> 00:06:02.063
there.

103
00:06:02.063 --> 00:06:05.273
I mean they're expensive,
databases are expensive,

104
00:06:05.273 --> 00:06:09.932
but it means you don't have to worry about
ops, which is worth a lot to me anyway.

105
00:06:09.932 --> 00:06:12.747
It's what I mean, it's what I do if I
was gonna start a new company today,

106
00:06:12.747 --> 00:06:15.852
that's would exact that's exactly what
I would reach for is a managed service.

107
00:06:15.852 --> 00:06:19.489
That's the last thing I was gonna say is
you can write to like document DB and

108
00:06:19.489 --> 00:06:21.183
Cosmos DB as if they were MongoDB.

109
00:06:21.183 --> 00:06:24.212
They are totally compatible
with a Mongo API,

110
00:06:24.212 --> 00:06:28.182
despite the fact that they're
not actually running Mongo.

111
00:06:28.182 --> 00:06:31.665
What skills should we consider managing
our own database instead of using

112
00:06:31.665 --> 00:06:32.626
a managed service?

113
00:06:32.626 --> 00:06:35.673
It's a great question.

114
00:06:38.350 --> 00:06:43.258
Here's my opinion on the matter, if you
have your own operations team at that

115
00:06:43.258 --> 00:06:48.557
point, you can probably consider running
your own replicas and things like that.

116
00:06:48.557 --> 00:06:53.542
But I'm not even sure if that's 100%
true even when you have your own

117
00:06:53.542 --> 00:06:55.834
operations team, let me refer.

118
00:06:55.834 --> 00:06:59.426
I would not consider it until
I had my own operations team,

119
00:06:59.426 --> 00:07:02.064
and even when I got my
own operations team,

120
00:07:02.064 --> 00:07:06.122
I would let a certified expert in
operations make that decision.

121
00:07:06.122 --> 00:07:09.179
And me the developer,
I would never make that decision.

122
00:07:13.233 --> 00:07:17.000
Things like Cosmos,
things like MongoDB Atlas,

123
00:07:17.000 --> 00:07:19.970
this scale to enormous sizes, right?

124
00:07:19.970 --> 00:07:23.559
Like these companies entire
businesses based on this, so

125
00:07:23.559 --> 00:07:28.551
they're not gonna crumble under
the pressure, it's their business, right?

126
00:07:28.551 --> 00:07:31.752
The problem that you're gonna have
with is it's gonna get too expensive.

127
00:07:31.752 --> 00:07:35.559
So if you're running massive clusters and
doing a lot of reads and writes,

128
00:07:35.559 --> 00:07:39.670
at some point] it will become cheaper for
you to not only manage your database but

129
00:07:39.670 --> 00:07:41.806
also pay the team to manage the database.

130
00:07:41.806 --> 00:07:44.267
And at that point, that's when you
might consider switching over.

