WEBVTT

1
00:00:01.000 --> 00:00:02.460
Let's talk about Indexes.

2
00:00:03.660 --> 00:00:07.840
So again, I talk a lot about
queries being expensive.

3
00:00:07.840 --> 00:00:10.060
Another one is you want
queries to be fast right?

4
00:00:10.060 --> 00:00:14.986
So let's say you're doing like a pet
adoption website and you people ask for,

5
00:00:14.986 --> 00:00:16.936
I wanna see all the dogs right?

6
00:00:16.936 --> 00:00:22.415
If you have, a million pets in your pet
adoption database, that can be quite slow,

7
00:00:22.415 --> 00:00:27.272
because it's gonna go read all of
the objects are all the documents in your

8
00:00:27.272 --> 00:00:32.390
database, and it's going to filter for
all the ones that have type dog on it.

9
00:00:32.390 --> 00:00:35.801
It'd be better, if we had that indexed, so

10
00:00:35.801 --> 00:00:40.324
that the database can basically
take a shortcut instead of

11
00:00:40.324 --> 00:00:45.325
having to look at every single
document in the database can say.

12
00:00:45.325 --> 00:00:49.715
Just build me like a tree that
allows me to go search for

13
00:00:49.715 --> 00:00:52.650
all of just the dogs in my database.

14
00:00:52.650 --> 00:00:54.370
So this is called an Index.

15
00:00:54.370 --> 00:00:57.590
And this actually exists in all of
the databases we talked about today,

16
00:00:57.590 --> 00:00:58.350
except rattus.

17
00:00:59.590 --> 00:01:01.386
So we'll be talking a lot
about indexes today.

18
00:01:05.850 --> 00:01:14.634
So, let's say say db.pets.find((
name: "Fido" okay?

19
00:01:14.634 --> 00:01:20.220
So I'm gonna just search for
all the pets named Fido in my database.

20
00:01:22.130 --> 00:01:26.322
It's fine, it works ok, I only have
ten thousand items in my database,

21
00:01:26.322 --> 00:01:30.378
which from I going to b it's not that
many used to handling millions and

22
00:01:30.378 --> 00:01:32.470
perhaps even billions of records.

23
00:01:33.760 --> 00:01:35.630
But let's do a dot, explain on this.

24
00:01:35.630 --> 00:01:38.860
And we're gonna ask for
the execution stats.

25
00:01:41.870 --> 00:01:45.358
So this is actually gonna pass
back to from Mongo and say,

26
00:01:45.358 --> 00:01:47.620
here's how I'm going to find that.

27
00:01:49.660 --> 00:01:53.186
So, it does what's called a execution or
a query planner,

28
00:01:53.186 --> 00:01:57.130
you'll hear those terms
thrown around quite a bit.

29
00:01:57.130 --> 00:01:58.780
So, the first thing it does is say,
all right,

30
00:01:58.780 --> 00:02:00.240
here's the query that I'm looking for.

31
00:02:00.240 --> 00:02:02.820
I'm looking for name,
where it's equal to Fido.

32
00:02:02.820 --> 00:02:05.100
And then it has a winning plan.

33
00:02:06.280 --> 00:02:09.633
Sometimes the database will try multiple
different strategies to try and

34
00:02:09.633 --> 00:02:12.711
figure out okay, I can search this way,
or I can search this way, or

35
00:02:12.711 --> 00:02:13.860
I can consider this way.

36
00:02:13.860 --> 00:02:16.040
In this case,
there's only one way to find it.

37
00:02:16.040 --> 00:02:18.950
It's gonna do what's called a call scan.

38
00:02:18.950 --> 00:02:22.282
And this is your worst nightmare
right here call scan is like,

39
00:02:22.282 --> 00:02:23.510
worst case scenario.

40
00:02:23.510 --> 00:02:26.653
I'm going to look at literally
every item in this or

41
00:02:26.653 --> 00:02:31.403
every document in this collection to
find all of your pet's name to find out,

42
00:02:31.403 --> 00:02:33.322
this is not what you wanna see.

43
00:02:33.322 --> 00:02:37.284
If this is a query that you run a lot,
you need to index this,

44
00:02:37.284 --> 00:02:43.190
that you don't see Colescott if you run
this like once a day, that's fine, right?

45
00:02:43.190 --> 00:02:44.980
Once a day,
you can take a performance hit.

46
00:02:44.980 --> 00:02:48.932
It doesn't really matter, but if you're
running this 10 times a second, you,

47
00:02:48.932 --> 00:02:50.430
need to index this yesterday.

48
00:02:50.430 --> 00:02:57.170
Okay, so that this is the part that I want
to be looking at here is the winning plan.

49
00:02:57.170 --> 00:03:01.370
And you can see here, the call scan is
exactly what you're trying to avoid.

50
00:03:01.370 --> 00:03:02.370
So here are the execution stats.

51
00:03:02.370 --> 00:03:06.300
This is actually gonna go through and
tell you what it did, how long it took.

52
00:03:06.300 --> 00:03:13.286
And you can see here, this is, again,
we have 9,644 items in the collection and

53
00:03:13.286 --> 00:03:17.670
it looked at all 9,644
items in the collection.

54
00:03:17.670 --> 00:03:19.710
This is not what you wanna see.

55
00:03:21.270 --> 00:03:23.800
So, how can we fix that?

56
00:03:25.210 --> 00:03:27.880
Well, we're gonna do that
by creating an index.

57
00:03:27.880 --> 00:03:32.031
So the first thing we're gonna do is,

58
00:03:32.031 --> 00:03:38.270
we're gonna say db.pets.create
index name colon 1.

59
00:03:38.270 --> 00:03:43.380
And what we're doing is we're
creating a simple index on name.

60
00:03:44.660 --> 00:03:45.160
And that's it.

61
00:03:46.410 --> 00:03:52.100
Now, something else I probably
need to throw out there.

62
00:03:52.100 --> 00:03:58.500
Don't just log on to your server this is
actually a fairly heavy procedure to do.

63
00:03:58.500 --> 00:04:00.040
So don't just do this in production.

64
00:04:01.090 --> 00:04:03.290
Like this can cause downtime.

65
00:04:03.290 --> 00:04:04.320
This can be very expensive.

66
00:04:04.320 --> 00:04:08.830
Again, we're doing it for 9,600 and
some odd items in a collection.

67
00:04:08.830 --> 00:04:12.900
Not that big a deal but 4 million,
this could take down your entire app.

68
00:04:15.830 --> 00:04:17.044
All right, so now,

69
00:04:17.044 --> 00:04:21.400
if we run that same query again
find Fido with execution stats.

70
00:04:21.400 --> 00:04:25.170
Notice up here,
we're gonna see Stage : Fetch.

71
00:04:25.170 --> 00:04:29.630
This is what we wanna see,
this is much faster, this is much better.

72
00:04:29.630 --> 00:04:32.817
This is basically said like I
found an index that uses or

73
00:04:32.817 --> 00:04:36.210
that I can use to find
whatever you're looking for.

74
00:04:36.210 --> 00:04:38.390
It goes way faster.

75
00:04:38.390 --> 00:04:44.458
So you can see here, it gives you a lot
more information of how this index works.

76
00:04:44.458 --> 00:04:52.200
But keys examined trying to find
the right one to point you out.

77
00:04:52.200 --> 00:04:53.620
So Doc's examined 964.

78
00:04:53.620 --> 00:04:56.970
That's the one that you don't wanna see.

79
00:04:58.600 --> 00:05:01.975
So total Doc's examined here 1070, right?

80
00:05:01.975 --> 00:05:09.040
That's significantly better, but I also
think if I remember correctly dot count.

81
00:05:09.040 --> 00:05:11.045
Sorry, not dot count.

82
00:05:13.450 --> 00:05:17.230
If I say count here,
that's actually the correct answer.

83
00:05:17.230 --> 00:05:22.650
That's how many dogs are actually,
or sorry.

84
00:05:22.650 --> 00:05:24.650
That's how many pets
are actually named Fido.

85
00:05:24.650 --> 00:05:26.960
So 10 70 is the bare minimum.

86
00:05:26.960 --> 00:05:33.150
So, yeah, it went significantly faster
looked at significantly less documents.

87
00:05:33.150 --> 00:05:36.525
And if you've taken my data science or
not my data science but

88
00:05:36.525 --> 00:05:40.032
my algorithms class,
this actually built a tree in memory, so

89
00:05:40.032 --> 00:05:44.420
that whenever you're doing these queries,
it's actually going in memory.

90
00:05:44.420 --> 00:05:46.080
So it's not writing to disk.

91
00:05:46.080 --> 00:05:49.914
And it's looking it's going through a tree
rather than looking at every single item

92
00:05:49.914 --> 00:05:51.000
in the in the database.

93
00:05:51.000 --> 00:05:56.570
So this should give us some
performance stats as well.

94
00:05:56.570 --> 00:06:00.380
Again, I'm on a pretty beefy MacBook Pro.

95
00:06:00.380 --> 00:06:03.040
How long did this take?

96
00:06:04.850 --> 00:06:06.650
Just took two milliseconds.

97
00:06:08.240 --> 00:06:09.580
LSC up here.

98
00:06:11.850 --> 00:06:12.880
How long did this one take?

99
00:06:14.170 --> 00:06:17.247
Four milliseconds so
not that huge a difference again,

100
00:06:17.247 --> 00:06:20.454
considering not that many items and
in this collection and

101
00:06:20.454 --> 00:06:23.740
also it's on my MacBook which
really isn't doing really.

102
00:06:23.740 --> 00:06:29.210
Anything else right now, but even still
50% query increase not bad right?

103
00:06:29.210 --> 00:06:30.530
We're not upset by that.

104
00:06:30.530 --> 00:06:35.958
So at anytime is all you can
say db.pets.get indexes and

105
00:06:35.958 --> 00:06:40.592
you can see here we have
one on name you will always

106
00:06:40.592 --> 00:06:45.249
have one an ID is always
indexed just by default.

107
00:06:47.030 --> 00:06:49.625
And yeah, that's how you do indexes.

108
00:06:52.662 --> 00:06:55.058
So you can do compound indexes, so

109
00:06:55.058 --> 00:07:01.210
let's say you're frequently querying by
both maybe age and pet at the same time.

110
00:07:01.210 --> 00:07:04.880
You can actually make a compound
index that uses both of those things.

111
00:07:04.880 --> 00:07:09.590
You kinda just have to understand the
shape of your data that it needs to be in.

112
00:07:09.590 --> 00:07:13.130
And how you're gonna query it.

113
00:07:13.130 --> 00:07:17.132
Normally I, kind of wait a little bit to
figure out what queries I wanna do, or

114
00:07:17.132 --> 00:07:21.074
sorry, what indexes I wanna do and
kind of see how I'm using the database and

115
00:07:21.074 --> 00:07:22.750
how the code is written.

116
00:07:22.750 --> 00:07:26.761
And then I'll go make indexes to kind
of index those kind of hot code paths.

117
00:07:29.662 --> 00:07:32.723
Because if you have an index
that's not doing anything,

118
00:07:32.723 --> 00:07:37.530
then it's just taking up space and memory,
yeah, don't have useless indexes as well.

119
00:07:37.530 --> 00:07:41.203
That's another good piece of advice,
because it's just waste space and

120
00:07:41.203 --> 00:07:41.981
performance.

121
00:07:41.981 --> 00:07:43.700
Let's talk about something else.

122
00:07:43.700 --> 00:07:45.240
Let's talk about unique indexes.

123
00:07:45.240 --> 00:07:52.570
So right now, in our database, you can
have in fact, here's a good example.

124
00:07:52.570 --> 00:07:53.690
Cause I think I did this earlier.

125
00:07:53.690 --> 00:07:59.503
Do these index find, index 10,000?

126
00:08:04.770 --> 00:08:06.320
No, okay.

127
00:08:06.320 --> 00:08:10.955
So I actually only have one
item of index one 10,000,

128
00:08:10.955 --> 00:08:14.210
but this index should be unique, right?

129
00:08:14.210 --> 00:08:18.350
No one should have the same index
in this particular collection.

130
00:08:18.350 --> 00:08:19.770
So we want that to be unique.

131
00:08:21.070 --> 00:08:24.626
Or maybe you can imagine, like maybe
you're doing a users collection and

132
00:08:24.626 --> 00:08:26.760
you want the username to be unique, right?

133
00:08:26.760 --> 00:08:30.720
So you put a unique constraint
on that particular field.

134
00:08:30.720 --> 00:08:34.611
You can do that with unique indexes.

135
00:08:34.611 --> 00:08:40.580
So what we're gonna do is we're
gonna say db.pets.create index.

136
00:08:40.580 --> 00:08:45.394
And I'm going to index,
that's funny index referring

137
00:08:45.394 --> 00:08:50.120
to this particular field
in our collection, right?

138
00:08:50.120 --> 00:08:52.710
It's not nothing special,
but the word index.

139
00:08:52.710 --> 00:08:55.869
And then all you have to do is you
add another thing here and say,

140
00:08:55.869 --> 00:08:57.130
make sure it's unique.

141
00:09:02.042 --> 00:09:06.120
Okay, so I went and
created a new index, it's on index.

142
00:09:06.120 --> 00:09:10.521
So now, if I say db.let's say 1,
that query will go much faster,

143
00:09:10.521 --> 00:09:12.930
cuz it's not gonna scan all of them.

144
00:09:12.930 --> 00:09:17.384
It actually goes directly to
that particular thing, but

145
00:09:17.384 --> 00:09:20.352
the other interesting thing is I say,

146
00:09:20.352 --> 00:09:26.140
db.pets.insert(1) I try to
insert a index 10,000 like that.

147
00:09:26.140 --> 00:09:32.730
It's gonna give me an error it's gonna say
right there duplicate error key, right?

148
00:09:32.730 --> 00:09:36.110
So it's actually not going to let
me insert duplicate keys here.

149
00:09:36.110 --> 00:09:38.630
That's what that unique
constraint allows me to do.

150
00:09:38.630 --> 00:09:44.917
Whereas before it would have just happily
accepted that right another useful

151
00:09:44.917 --> 00:09:52.340
thing about this is now index is quick is
indexed right the the index is indexed.

152
00:09:52.340 --> 00:09:56.559
That's just kind of a necessary byproduct
of doing a unique constraint is it does

153
00:09:56.559 --> 00:09:57.620
have to index that.

