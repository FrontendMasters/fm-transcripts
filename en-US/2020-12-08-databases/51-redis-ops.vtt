WEBVTT

1
00:00:00.374 --> 00:00:02.400
Let's talk about how
you administrate Redis.

2
00:00:04.890 --> 00:00:08.966
They do also have a primary secondary
kind of configuration sort of thing.

3
00:00:08.966 --> 00:00:12.458
Their primary terms know that they
prefer a leader and follower.

4
00:00:12.458 --> 00:00:16.471
So you have the leader server which
is one that you write to the primary.

5
00:00:16.471 --> 00:00:20.333
And they also have a follower server
which is kind of the secondary so

6
00:00:20.333 --> 00:00:23.990
the one that are being
replicated to from the leader.

7
00:00:23.990 --> 00:00:28.937
You also see as the master and follower
that's not the terms that I choose to use.

8
00:00:28.937 --> 00:00:33.039
But you will find master and slave in some
of their older documentation, but yeah,

9
00:00:33.039 --> 00:00:35.458
they have since moved on to leader and
follower.

10
00:00:37.839 --> 00:00:39.844
The leader will accept all of the rights,

11
00:00:39.844 --> 00:00:42.890
the followers are expected to
be exact replicas of the leader.

12
00:00:44.080 --> 00:00:49.712
The followers are also
sometimes called replicas.

13
00:00:49.712 --> 00:00:52.950
If the leader and
the followers lose track of each other,

14
00:00:52.950 --> 00:00:57.010
the followers are smart enough to
actually suggest request the delta.

15
00:00:57.010 --> 00:01:02.848
So the actual changes between when they
last saw the leader and now, right?

16
00:01:02.848 --> 00:01:05.323
They'll actually just
request that delta and

17
00:01:05.323 --> 00:01:09.712
they're smart enough to kind of go through
and selectively apply those updates.

18
00:01:09.712 --> 00:01:14.501
If it gets too out of sync or if they just
can't deal with it anymore it'll just

19
00:01:14.501 --> 00:01:18.690
wipe itself and totally copy
a brand new copy of the leader.

20
00:01:18.690 --> 00:01:21.468
So suffice to say it's actually pretty

21
00:01:21.468 --> 00:01:24.928
sophisticated with its
replication strategy.

22
00:01:24.928 --> 00:01:27.050
You can kind of mess with the consistency,
right?

23
00:01:27.050 --> 00:01:30.936
The C part of asset to say like
acknowledge my right as soon as

24
00:01:30.936 --> 00:01:34.665
the follower sees it, or
you can also go as far as saying,

25
00:01:34.665 --> 00:01:39.410
don't acknowledge my right until all
of the followers have written it to

26
00:01:39.410 --> 00:01:43.810
disk has a very slow way to do it but
it's possible to do it that way.

27
00:01:46.040 --> 00:01:52.061
There's also a way to command, we didn't
talk about that one too much or at all.

28
00:01:52.061 --> 00:01:56.853
But there's actually one that's
called WAIT, and you can say I need

29
00:01:56.853 --> 00:02:01.246
this to be into at least one
replica before I feel comfortable.

30
00:02:01.246 --> 00:02:04.648
So imagine I don't know again, you're
doing like banking stuff you might feel

31
00:02:04.648 --> 00:02:07.760
comfortable as like I need for this to
be at least written to one replica.

32
00:02:09.340 --> 00:02:10.750
So that's what WAIT will do.

33
00:02:12.955 --> 00:02:15.447
It's for your highly important stuff.

34
00:02:15.447 --> 00:02:17.313
Let's talk about Redis Cluster for
a second.

35
00:02:17.313 --> 00:02:22.400
Redis Clusters is shanding but for
Redis it'll take your keys and shand

36
00:02:22.400 --> 00:02:28.510
them out amongst the different pockets
of replicated leaders and followers.

37
00:02:28.510 --> 00:02:32.863
This is how you're gonna
start handling terabytes or

38
00:02:32.863 --> 00:02:36.064
at least gigabytes of key value stuff.

39
00:02:38.424 --> 00:02:41.554
It will make your Redis
deployment less consistent,

40
00:02:41.554 --> 00:02:45.254
which is usually a trade off that
you have to be willing to make.

41
00:02:45.254 --> 00:02:51.268
So it has a higher chance of dropping
rights on accident, which is not good.

42
00:02:51.268 --> 00:02:55.492
But the trade off that you're making
here is that Redis can scale to be much,

43
00:02:55.492 --> 00:02:56.390
much larger.

44
00:02:56.390 --> 00:02:58.513
So you need to think about that.

45
00:02:58.513 --> 00:03:01.580
That feature is called cluster,
Redis cluster.

46
00:03:01.580 --> 00:03:04.613
And there's another cool
feature called Redis Sentinel.

47
00:03:04.613 --> 00:03:07.144
So Redis Sentinel does
what's called self healing.

48
00:03:07.144 --> 00:03:09.788
We haven't talked a lot
about self healing, but

49
00:03:09.788 --> 00:03:12.480
it's a really hot topic in operations.

50
00:03:12.480 --> 00:03:17.515
What that means is like let's
say you have one follower and

51
00:03:17.515 --> 00:03:21.025
four leaders, sorry other way around.

52
00:03:21.025 --> 00:03:24.050
You have one leader and four followers and

53
00:03:24.050 --> 00:03:29.238
Redis suddenly detects that one of
your followers is dropping rights,

54
00:03:29.238 --> 00:03:34.190
it's latencies spiking,
it's running out of disk space.

55
00:03:34.190 --> 00:03:37.596
What you can do with Redis Sentinel is
like it can see that before it actually

56
00:03:37.596 --> 00:03:38.908
starts becoming a problem.

57
00:03:38.908 --> 00:03:41.134
So it's actually like a sentinel, right?

58
00:03:41.134 --> 00:03:45.159
It's watching all the vitals of
all these different servers.

59
00:03:45.159 --> 00:03:49.890
Before it becomes a problem, you can
rotate that server out of rotation,

60
00:03:49.890 --> 00:03:51.950
put in a brand new follower, and

61
00:03:51.950 --> 00:03:56.420
then you can kind of continue on
as if nothing had ever happened.

62
00:03:56.420 --> 00:03:58.212
It can do this kind of self healing.

63
00:03:58.212 --> 00:04:02.248
And so your operations persons or
you don't have to get paged it actually

64
00:04:02.248 --> 00:04:05.640
just gets fixed before it
even becomes a problem.

65
00:04:05.640 --> 00:04:06.842
That's called Sentinel.

66
00:04:06.842 --> 00:04:10.021
It's self healing Redis.

67
00:04:10.021 --> 00:04:13.910
It also has a bunch of charts and graphs
and metrics that let you know how much

68
00:04:13.910 --> 00:04:17.307
they're being written to,
how much they're being read out of,

69
00:04:17.307 --> 00:04:20.550
what queries are very old,
which ones never get run.

70
00:04:20.550 --> 00:04:21.263
Bunch of stuff like that.

71
00:04:21.263 --> 00:04:24.730
So Redis Sentinel, if you can be
running a lot of Redis is very helpful.

72
00:04:24.730 --> 00:04:26.552
So a big key with this is with Sentinel,

73
00:04:26.552 --> 00:04:29.268
you want these servers to live
independent of each other.

74
00:04:29.268 --> 00:04:31.031
So usually that's gonna
be like cross region.

75
00:04:31.031 --> 00:04:36.226
And what's cool about that, is if you
have some of your servers in US West,

76
00:04:36.226 --> 00:04:41.504
some of them in US East, some of them
in I don't know where else regions are,

77
00:04:41.504 --> 00:04:46.462
Europe, you can have them in,
[COUGH] various different other places.

78
00:04:46.462 --> 00:04:49.214
The Sentinel can actually
see those across regions.

79
00:04:49.214 --> 00:04:54.144
And if they can see that US West is going
down, it can move all of your servers

80
00:04:54.144 --> 00:04:59.332
automatically to US East and really
compensate for that particular problem.

81
00:05:01.493 --> 00:05:04.641
So yeah, it means you can survive
regional downtime, which is a big deal.

