WEBVTT

1
00:00:00.100 --> 00:00:04.641
So let's open our server.js.

2
00:00:04.641 --> 00:00:09.762
And here we're gonna write a little

3
00:00:09.762 --> 00:00:18.477
bit of node code const
express = require('express').

4
00:00:18.477 --> 00:00:25.242
const { MongoClient }
= require('mongodb').

5
00:00:25.242 --> 00:00:28.686
Notice that we have these
curly braces here cuz

6
00:00:28.686 --> 00:00:33.117
we're gonna be pulling out
the Mongo client from Mongodb.

7
00:00:35.597 --> 00:00:41.923
We're gonna have a connection
string of some variety.

8
00:00:41.923 --> 00:00:44.293
Normally, you wouldn't just
hard code this in here,

9
00:00:44.293 --> 00:00:46.520
you'd get it passed in from
like processed at env.

10
00:00:46.520 --> 00:00:51.621
So you'd have like, process.env.Mongo
connection string and then you'd

11
00:00:51.621 --> 00:00:57.810
use like an environmental variable to pass
it in, then you'd have something like.

12
00:00:57.810 --> 00:01:01.628
As your Key Vault or
whatever the Hash core one is called I

13
00:01:01.628 --> 00:01:06.480
can't remember the time ahead key
might be called Key Vault as well.

14
00:01:06.480 --> 00:01:09.181
Anyone something similar like that you'd
have some sort of like secret manager that

15
00:01:09.181 --> 00:01:09.990
would be managing that.

16
00:01:11.520 --> 00:01:14.190
We're not writing this for
the cloud at the moment.

17
00:01:14.190 --> 00:01:21.920
So we're just gonna put here
Mongodb://localhost27017.

18
00:01:21.920 --> 00:01:28.780
That's the default connection string for
Mongodb.

19
00:01:28.780 --> 00:01:35.390
This is the Mongodb protocol
that's different from HTTP, right?

20
00:01:35.390 --> 00:01:37.491
Local host is your local computer and

21
00:01:37.491 --> 00:01:40.970
27017 is the default port
that Mongodb runs on.

22
00:01:40.970 --> 00:01:43.890
And if you remember, we expose that
through Docker to our local computer.

23
00:01:46.710 --> 00:01:47.490
Okay.

24
00:01:47.490 --> 00:01:50.080
I'm gonna write an async init function.

25
00:01:50.080 --> 00:01:51.620
This is just kind of a habit of mine.

26
00:01:51.620 --> 00:01:53.140
I don't even know if
this needs to be async.

27
00:01:53.140 --> 00:01:55.114
I just always do it this way.

28
00:01:55.114 --> 00:01:58.550
And then I'll just write init down here.

29
00:01:58.550 --> 00:02:03.029
So I create an async function and
then I immediately call it.

30
00:02:03.029 --> 00:02:06.040
First thing I'll do is I'll get a client.

31
00:02:08.210 --> 00:02:11.347
First thing I wanna do here is I
want to indent using spaces and

32
00:02:11.347 --> 00:02:13.086
use two cuz this is bothering me.

33
00:02:13.086 --> 00:02:14.693
Here we go.

34
00:02:17.732 --> 00:02:24.620
So const client = new MongoClient,
you can give it the connection string.

35
00:02:24.620 --> 00:02:32.621
And then they have to do something
here is say use unified topology.

36
00:02:32.621 --> 00:02:36.286
It will still work if you don't
provide this but it's just saying,

37
00:02:36.286 --> 00:02:39.199
Hey Mongodb use your new
way of discovering servers.

38
00:02:40.550 --> 00:02:41.767
They just require that now or

39
00:02:41.767 --> 00:02:45.200
it gives you a big warning
eventually I think it'll break.

40
00:02:45.200 --> 00:02:47.000
So just say use unified topology true.

41
00:02:47.000 --> 00:02:51.887
And then underneath that you're

42
00:02:51.887 --> 00:02:57.140
gonna say await client.connect.

43
00:02:57.140 --> 00:03:00.540
This will actually go out and
connect to Mongo from your Node server.

44
00:03:02.160 --> 00:03:06.549
Okay, we wanna create an express app,
after this const express = app.

45
00:03:06.549 --> 00:03:10.396
And then we're gonna do an app.get.

46
00:03:10.396 --> 00:03:14.650
This is the typical express server stuff.

47
00:03:16.000 --> 00:03:20.969
So whenever someone calls get, if you
remember that's the API that we defined

48
00:03:20.969 --> 00:03:26.106
previously, we want them to call this
async function that takes in (req, res)

49
00:03:29.631 --> 00:03:33.990
If this, express service stuff is looking
unfamiliar to you, don't sweat it.

50
00:03:33.990 --> 00:03:36.070
This, the point of this course
is not the express part.

51
00:03:36.070 --> 00:03:38.790
The point of this stuff is how to interact
with Mongo in a programmatic setting.

52
00:03:39.980 --> 00:03:43.028
And again, go watch some of the note
courses in front of masters and

53
00:03:43.028 --> 00:03:45.158
they'll help you out
with this kind of stuff.

54
00:03:47.187 --> 00:03:52.127
So the first thing you want to do here
is now we're actually going to get

55
00:03:52.127 --> 00:03:54.240
into our real Mongodb stuff.

56
00:03:54.240 --> 00:04:01.298
So we're gonna say const db =
await client.db adoption or

57
00:04:01.298 --> 00:04:06.390
whatever you code your database, right?

58
00:04:06.390 --> 00:04:08.220
The whole database.

59
00:04:08.220 --> 00:04:11.150
I called my adoption, if you remember,
so we're gonna do that.

60
00:04:11.150 --> 00:04:17.365
This db objects,
you can see his actually of type db.

61
00:04:17.365 --> 00:04:20.941
I think it's exactly the same db
objects that you get inside of our,

62
00:04:20.941 --> 00:04:22.520
a little shell here, right.

63
00:04:22.520 --> 00:04:23.879
So if I come in over here and say.

64
00:04:25.400 --> 00:04:26.757
This one right db.

65
00:04:29.702 --> 00:04:31.760
It's going to be this same db objects.

66
00:04:31.760 --> 00:04:33.765
It's gonna have the same
similar sorts of methods.

67
00:04:36.951 --> 00:04:38.550
Okay, and
then we're going to grab a collection.

68
00:04:38.550 --> 00:04:45.088
So we're going to say const
collection = db.collection('pets')

69
00:04:45.088 --> 00:04:49.890
cuz that's what we called our collection.

70
00:04:49.890 --> 00:04:53.914
So now I have this collection object that
has a bunch of methods that I can actually

71
00:04:53.914 --> 00:04:54.930
use to run queries.

72
00:04:56.440 --> 00:05:01.826
So I'm gonna say const pets = await

73
00:05:01.826 --> 00:05:06.320
collection.find, right?

74
00:05:06.320 --> 00:05:07.971
So we're gonna do that find method.

75
00:05:12.823 --> 00:05:17.483
We wanna do the $text, again these queries
are gonna look very similar to you.

76
00:05:21.106 --> 00:05:21.816
$text.

77
00:05:25.312 --> 00:05:31.368
And inside of that, we're gonna have
another object which is gonna be $search,

78
00:05:31.368 --> 00:05:35.250
and it's going to be req.query.search,
right?

79
00:05:35.250 --> 00:05:37.468
That's gonna be what comes
in with the query string.

80
00:05:43.953 --> 00:05:47.630
And then we're gonna tell it,
please don't provide the ID.

81
00:05:47.630 --> 00:05:51.580
So we're gonna use projection to omit
the ID because we don't want that

82
00:06:02.481 --> 00:06:04.090
This got really messy quickly.

83
00:06:06.280 --> 00:06:07.453
There we go.
All right, so

84
00:06:07.453 --> 00:06:12.218
assume you find, it's gonna go find
the whatever texts that we searched for

85
00:06:12.218 --> 00:06:15.500
inside of our search box,
we're gonna omit the ID.

86
00:06:15.500 --> 00:06:20.877
The next thing that we're gonna
do is we're gonna put in a sort.

87
00:06:20.877 --> 00:06:27.430
So .sort and we're gonna sort by score
if you remember how we did that.

88
00:06:27.430 --> 00:06:31.244
So score colon, another object and

89
00:06:31.244 --> 00:06:37.100
the dollar sign meta, and
we're gonna do tech score.

90
00:06:40.580 --> 00:06:41.540
Okay, we only want 10.

91
00:06:41.540 --> 00:06:43.220
So we're gonna say .limit 10.

92
00:06:43.220 --> 00:06:48.020
And then here,
remember it gives you back an iterator.

93
00:06:48.020 --> 00:06:49.310
That's actually not
what we want this time.

94
00:06:49.310 --> 00:06:50.940
We just want the whole thing.

95
00:06:50.940 --> 00:06:54.550
So we're gonna say .toArray.

96
00:06:54.550 --> 00:07:00.639
Now what's really interesting about
this is until we call toArray here.

97
00:07:00.639 --> 00:07:06.830
But stop that, you can see here that
toArray here gets back a promise.

98
00:07:06.830 --> 00:07:08.670
That's actually what invokes the query.

99
00:07:08.670 --> 00:07:10.925
Like you need some sort of like
final action that says, all right,

100
00:07:10.925 --> 00:07:11.540
I'm going to be.

101
00:07:11.540 --> 00:07:14.930
I've constructed all this stuff go get it.

102
00:07:14.930 --> 00:07:17.713
So toarray is one of those
methods there's other ones, but

103
00:07:17.713 --> 00:07:21.000
if you notice your like limit,
for example, it's still a cursor.

104
00:07:21.000 --> 00:07:22.432
You're still building your query.

105
00:07:25.072 --> 00:07:28.230
So for example,
I think you can call next here.

106
00:07:28.230 --> 00:07:35.100
So next would actually give you the first
bit of whatever that cursor has to give.

107
00:07:35.100 --> 00:07:38.921
Because we're calling toArray, toArray
says give me everything that matches this,

108
00:07:38.921 --> 00:07:41.132
but we've limited to 10 so
it's not that much.

109
00:07:43.633 --> 00:07:48.456
So now pets, if you look at this, it's
going to be an array of stuff that our

110
00:07:48.456 --> 00:07:51.170
Mongo array or that Mongo gave back to us.

111
00:07:51.170 --> 00:07:58.649
So here we can say res.json, status: "ok".

112
00:07:58.649 --> 00:08:03.077
And then we can say, pets pets,
or if you remember JavaScript,

113
00:08:03.077 --> 00:08:08.040
you can just say pets and
that'll be the same thing as pets:pets.

114
00:08:08.040 --> 00:08:15.527
And then you have to say .end, and that'll
send back the API response from get.

115
00:08:15.527 --> 00:08:16.440
That's it.

116
00:08:16.440 --> 00:08:22.020
I mean that's the entirety of
writing Mongo queries for Node.js.

117
00:08:22.020 --> 00:08:25.630
Couple more things, but in here,
you have to give it a port.

118
00:08:25.630 --> 00:08:27.640
So I'm gonna say const PORT.

119
00:08:27.640 --> 00:08:29.474
I'm just gonna give it 3000.

120
00:08:31.130 --> 00:08:37.320
I'm gonna say
app.useexpress.static./static.

121
00:08:37.320 --> 00:08:40.810
So this will serve our index.html.

122
00:08:40.810 --> 00:08:43.040
If we put CSS files in there,
that would work as well.

123
00:08:43.040 --> 00:08:45.029
But that's what this is doing is hey,

124
00:08:45.029 --> 00:08:48.274
everything inside of my static
directory serve statically.

125
00:08:50.429 --> 00:08:52.769
App.listen(PORT).

126
00:08:54.493 --> 00:09:00.230
This will start it listening
on localhost 3000.

127
00:09:00.230 --> 00:09:03.250
And just to remind yourself
cuz l can never remember.

128
00:09:03.250 --> 00:09:07.828
I'm gonna say, running on

129
00:09:07.828 --> 00:09:17.664
http://localhost, port.

130
00:09:20.991 --> 00:09:21.810
That's it.

131
00:09:21.810 --> 00:09:23.422
That's our whole application.

132
00:09:26.603 --> 00:09:29.240
So I'm gonna open my terminal here.

133
00:09:29.240 --> 00:09:36.250
And I'm gonna say, node server.js.

134
00:09:36.250 --> 00:09:37.580
App is not defined.

135
00:09:37.580 --> 00:09:39.382
So let's see what I missed here.

136
00:09:39.382 --> 00:09:40.695
Did I forget to?

137
00:09:40.695 --> 00:09:44.750
I did this the opposite way,
app = express.

138
00:09:47.490 --> 00:09:48.970
So I changed line 12 here.

139
00:09:50.070 --> 00:09:53.600
You wanted line 12 here to
say const app = express.

140
00:09:55.610 --> 00:09:56.480
Not the other way around.

141
00:09:56.480 --> 00:09:59.690
I messed that up.

142
00:09:59.690 --> 00:10:01.047
Okay, let's try that again.

143
00:10:04.062 --> 00:10:06.280
There we go, running on localhost 3000.

144
00:10:06.280 --> 00:10:08.576
So now I should be able to
open this in my browser here.

145
00:10:10.735 --> 00:10:12.310
Got a nice little search bar here.

146
00:10:13.460 --> 00:10:15.840
So let's say luna havanese.

147
00:10:18.170 --> 00:10:22.430
And you can see here it is returning
stuff out of our database.

148
00:10:23.640 --> 00:10:26.758
Or I could say reptile fido.

149
00:10:26.758 --> 00:10:29.924
Fido, reptile,

150
00:10:33.661 --> 00:10:39.218
Or I don't know, cat african gray.

151
00:10:43.111 --> 00:10:45.642
There you go.

152
00:10:49.653 --> 00:10:52.748
Again, this is the most basic thing
that you could ever write for

153
00:10:52.748 --> 00:10:54.537
a Node application querying Mongo.

154
00:10:54.537 --> 00:10:58.052
But now you can kind of see here's how you
kind of get it into your application and

155
00:10:58.052 --> 00:10:59.170
start writing queries.

156
00:11:00.700 --> 00:11:03.751
So I mean, something fun you could
do here is you can go make like

157
00:11:03.751 --> 00:11:06.760
a searchable Mongo database
has like search facets, right?

158
00:11:06.760 --> 00:11:10.120
This is not an ideal experience for
searching around a database.

159
00:11:10.120 --> 00:11:15.309
It'd be better if you could say like,
lists cats, reptiles birds and make like

160
00:11:15.309 --> 00:11:20.584
a better more full fledged application out
of it if you wanted to learn a bit more.

