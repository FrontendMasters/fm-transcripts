WEBVTT

1
00:00:00.000 --> 00:00:03.811
Okay, so we want to get into
some more relational data.

2
00:00:03.811 --> 00:00:07.782
So far, we've just been talking about
users, which is like that one table.

3
00:00:07.782 --> 00:00:11.763
But we're gonna be adding actually
technically three more tables to look at,

4
00:00:11.763 --> 00:00:14.373
but we're gonna be talking
about just two of them.

5
00:00:14.373 --> 00:00:16.986
We're gonna be talking about
comments from users, and

6
00:00:16.986 --> 00:00:20.107
then the boards that those users
are posting comments to, right?

7
00:00:20.107 --> 00:00:22.429
So that's kind of
the hierarchy of our data.

8
00:00:22.429 --> 00:00:25.418
We have message boards, on those
message boards will be comments and

9
00:00:25.418 --> 00:00:27.180
those comments will be posted by users.

10
00:00:28.210 --> 00:00:29.910
When I'm talking about
a relational database,

11
00:00:29.910 --> 00:00:32.000
this is exactly what I'm talking about.

12
00:00:32.000 --> 00:00:34.060
This data relates to this one,
that relates to this one.

13
00:00:35.240 --> 00:00:39.965
So a big key and how you kind of establish
these relationships between these various

14
00:00:39.965 --> 00:00:41.180
different tables and

15
00:00:41.180 --> 00:00:45.110
records in these tables is through
a mechanism called foreign keys.

16
00:00:46.140 --> 00:00:50.796
When I say foreign, it just means this key
refers to something in a foreign table,

17
00:00:50.796 --> 00:00:52.290
right a different table.

18
00:00:53.300 --> 00:00:56.216
That's what the foreign means
in that particular case.

19
00:00:56.216 --> 00:01:00.574
They contains data that
lives in another table.

20
00:01:00.574 --> 00:01:04.300
This first table here, you should
recognize, this CREATE TABLE users.

21
00:01:04.300 --> 00:01:05.626
By the way,
these queries have already been run,

22
00:01:05.626 --> 00:01:06.880
you don't have to run this again.

23
00:01:06.880 --> 00:01:10.490
This run is part of your big
query that you ran previously.

24
00:01:11.680 --> 00:01:14.317
But we have this user table this
contains all the information about

25
00:01:14.317 --> 00:01:15.310
the individual user.

26
00:01:15.310 --> 00:01:20.307
We also created a boards table which
has a board_id, a board_name, and

27
00:01:20.307 --> 00:01:22.990
a board_description.

28
00:01:22.990 --> 00:01:24.620
Nothing here looks very surprising.

29
00:01:25.750 --> 00:01:29.750
There is nothing new about this that
we didn't already learn about users.

30
00:01:29.750 --> 00:01:32.333
But comments,
this contains some interesting things,

31
00:01:32.333 --> 00:01:34.230
let's kind of dig into this a little bit.

32
00:01:35.440 --> 00:01:39.070
As a comment_id that's a serial_id,
that's more we are aware of that,

33
00:01:39.070 --> 00:01:41.260
the GENERATED ALWAYS AS IDENTITY.

34
00:01:41.260 --> 00:01:45.870
The second thing that's interesting is a
comment is always posted by a user, right?

35
00:01:45.870 --> 00:01:49.140
So if you are thinking about
a Reddit message, right?

36
00:01:49.140 --> 00:01:53.640
A Reddit user posts to Reddit message,
those two things are linked, right?

37
00:01:53.640 --> 00:01:57.499
They're inexorably linked that you
must have a user that posts a comment,

38
00:01:57.499 --> 00:01:59.970
every comment must have a user.

39
00:01:59.970 --> 00:02:04.840
So this user_id references,
and this is an integer right?

40
00:02:04.840 --> 00:02:08.590
So integer int,
this is just a shorthand for that.

41
00:02:10.390 --> 00:02:16.314
This references the users table, and
specifically inside of that table,

42
00:02:16.314 --> 00:02:21.308
it references the user_id which is this,
this thing up here.

43
00:02:21.308 --> 00:02:24.298
So this just happens that user_id here,
and user_id here,

44
00:02:24.298 --> 00:02:27.069
they named the same thing,
they don't have to be right?

45
00:02:27.069 --> 00:02:30.570
That's just saying here in comments,
this is gonna be called user_id.

46
00:02:30.570 --> 00:02:35.020
But inside of the users table,
we're referencing the user_id.

47
00:02:35.020 --> 00:02:38.798
So for example, if this was just
called ID up here, not user_id,

48
00:02:38.798 --> 00:02:41.380
you would put ID right there.

49
00:02:41.380 --> 00:02:43.373
Now it's useful to call
them the same thing,

50
00:02:43.373 --> 00:02:45.920
we'll see why actually
little bit why that is.

51
00:02:45.920 --> 00:02:49.660
But you don't have to right, you can call
them different things that's totally fine.

52
00:02:51.340 --> 00:02:56.150
Same thing with a board_id every
comment is posted to a board, right?

53
00:02:56.150 --> 00:03:01.107
So you can't just post a comment down
into the ether, if you're on Reddit,

54
00:03:01.107 --> 00:03:05.755
you can't just post to no separate,
every post goes into a subreddit,

55
00:03:05.755 --> 00:03:08.140
every comment must go on a board.

56
00:03:08.140 --> 00:03:10.670
So that's where this board_id comes from.

57
00:03:10.670 --> 00:03:13.700
And it also references board_id
from the boards table.

58
00:03:14.760 --> 00:03:17.260
And then a comment which is text,
right, it's not a varchar.

59
00:03:17.260 --> 00:03:19.986
So it's of 65,000 length or less, and

60
00:03:19.986 --> 00:03:23.010
then a timestamp of when
you posted that comment.

61
00:03:26.080 --> 00:03:30.970
Okay, so
let's talk about ON DELETE CASCADE.

62
00:03:33.380 --> 00:03:39.630
I have a comment, right and let's say user
bit hold posted a comment to a board.

63
00:03:39.630 --> 00:03:42.890
And then later user bit Holt goes and
deletes their account.

64
00:03:44.080 --> 00:03:46.101
What should happen to those comments?

65
00:03:46.101 --> 00:03:50.512
Because they were posted by user,
by default if you don't say anything.

66
00:03:50.512 --> 00:03:54.466
So if I left off ON DELETE CASCADE, it
would just say, you can't delete this user

67
00:03:54.466 --> 00:03:58.150
account until you delete all the comments
that they've deleted, right?

68
00:03:58.150 --> 00:04:02.479
So I won't let you delete anything if
there has existing keys in another table,

69
00:04:02.479 --> 00:04:04.520
that can be useful, right?

70
00:04:04.520 --> 00:04:06.190
Maybe you wanna do some
special kind of cleanup.

71
00:04:06.190 --> 00:04:11.338
And you do not wanna delete a user account
before you have deleted their comments.

72
00:04:11.338 --> 00:04:17.050
This one I I'm saying ON DELETE CASCADE,
so whenever a user gets deleted,

73
00:04:17.050 --> 00:04:22.954
go into the comments table and delete
all of the comments that they've made.

74
00:04:22.954 --> 00:04:27.083
This just makes it really easy to cleanup,
all I have to do is delete a user account

75
00:04:27.083 --> 00:04:29.719
and all those comments
just magically dissapear.

76
00:04:29.719 --> 00:04:32.122
That's what ON DELETE CASCADE does.

77
00:04:32.122 --> 00:04:34.804
And there's also ON DELETE SET NULL.

78
00:04:34.804 --> 00:04:38.170
I think that's what it is,
yep right there, ON DELETE SET NULL.

79
00:04:38.170 --> 00:04:42.890
What this will do,
it'll go through on delete

80
00:04:42.890 --> 00:04:47.256
the username, it'll just set it to NULL.

81
00:04:47.256 --> 00:04:50.844
And, that might be a good thing too,
if you wanna keep track of the comments,

82
00:04:50.844 --> 00:04:52.627
even if a user deletes their account.

83
00:04:52.627 --> 00:04:57.356
So, you kind of decide what
your desired behaviors.

84
00:04:57.356 --> 00:05:02.162
And, the default action of not allowing
you to delete until you've deleted

85
00:05:02.162 --> 00:05:04.725
yourself is called ON DELETE NO ACTION.

86
00:05:04.725 --> 00:05:08.338
It just means throw an error if they try
to delete something from the users table

87
00:05:08.338 --> 00:05:09.994
that exists in the comments table.

