WEBVTT

1
00:00:00.350 --> 00:00:03.980
So Redis doesn't have the concept of
databases or anything like that, or

2
00:00:03.980 --> 00:00:07.560
collections or tables,
it's really just a big grab bag of keys.

3
00:00:07.560 --> 00:00:11.720
So now anytime I can just ask for
name, and it's just a bunch of keys.

4
00:00:11.720 --> 00:00:14.833
The thing that you should be worried about
is how do I make sure that I don't have

5
00:00:14.833 --> 00:00:16.023
naming collisions, right?

6
00:00:16.023 --> 00:00:20.187
How do I make sure that I
don't use name later, and

7
00:00:20.187 --> 00:00:25.059
you're gonna do that with
something called namespaces.

8
00:00:25.059 --> 00:00:27.668
It's just the way that you're gonna
name your keys to make sure that you're

9
00:00:27.668 --> 00:00:30.790
not overriding those keys later,
and I'll show you how to do that.

10
00:00:30.790 --> 00:00:34.390
Let's say I was storing addresses for
users, or let's say city.

11
00:00:34.390 --> 00:00:37.060
So we're sorting cities for users.

12
00:00:37.060 --> 00:00:40.895
So what I could do,
let's say I had set, and

13
00:00:40.895 --> 00:00:46.830
I'm gonna be working with my users and
my users all have addresses.

14
00:00:46.830 --> 00:00:51.050
I'm gonna put a colon kind of just
separate these different things.

15
00:00:52.100 --> 00:00:56.550
And then user:address, let's do this way.

16
00:00:56.550 --> 00:00:58.780
It's kind of a trick to figure out
how you wanna name these things.

17
00:00:58.780 --> 00:01:01.700
So, this is gonna be my user namespace.

18
00:01:01.700 --> 00:01:05.450
And then I'm gonna have a use:btholt for
just my users namespace.

19
00:01:05.450 --> 00:01:10.820
And then I'll have a city in here,
where I live, and I'll put Seattle there.

20
00:01:12.340 --> 00:01:18.557
And then later, I'm gonna add
another user to this database,

21
00:01:18.557 --> 00:01:23.720
and it's gonna be sarah_edo
is her her username and

22
00:01:23.720 --> 00:01:27.260
put city, and she lives in Denver.

23
00:01:27.260 --> 00:01:32.488
And then we'll have another user here,

24
00:01:32.488 --> 00:01:38.340
user:1mark:city lives in Minneapolis.

25
00:01:39.550 --> 00:01:41.310
I'm impressed that I
remembered how to spell that.

26
00:01:41.310 --> 00:01:45.710
There's a lot of Ns in there, actually
there's just two Ns it feels like a lot.

27
00:01:45.710 --> 00:01:50.110
But you can see here we kinda use these
namespaces to kinda separate these out.

28
00:01:50.110 --> 00:01:54.713
Now I can be kinda assured that user and
then username and then kinda city in

29
00:01:54.713 --> 00:01:59.370
second establish this kinda hierarchy
just by using nomenclature.

30
00:01:59.370 --> 00:02:02.634
Like if you're familiar with
the BEM way as naming CSS,

31
00:02:02.634 --> 00:02:07.370
it's kind of the same ideas, these names
in another cell don't have any power.

32
00:02:07.370 --> 00:02:12.359
But we're using these kind of hierarchy
to describe things to make sure we

33
00:02:12.359 --> 00:02:15.190
don't have naming collisions, right?

34
00:02:15.190 --> 00:02:17.500
Again, namespacing is kind
of how you refer to that.

35
00:02:18.930 --> 00:02:21.450
I mostly see people use colons with Redis.

36
00:02:22.780 --> 00:02:26.250
Just the way it is, I don't know
why people chose to do it that way.

37
00:02:26.250 --> 00:02:32.119
But I also have seen people do
user/btholt/city or they'll mix and

38
00:02:32.119 --> 00:02:38.240
match to user:bthold/city,
I'll see people use slashes as well.

39
00:02:38.240 --> 00:02:42.150
So however you wanna do that.

40
00:02:42.150 --> 00:02:46.441
And then again later,
we can do Get user:btholt:city, and

41
00:02:46.441 --> 00:02:49.420
it'll give us back that I live in Seattle.

42
00:02:51.620 --> 00:02:53.080
Make sense?

43
00:02:53.080 --> 00:02:56.730
It's kind of just a general tip of how
to keep things separated while in Redis.

44
00:02:59.210 --> 00:03:05.309
&gt;&gt; Okay, I can choose whatever element
I can, like other than that columns.

45
00:03:05.309 --> 00:03:09.930
&gt;&gt; Can use any delimiter
that you want to with Redis.

46
00:03:11.170 --> 00:03:14.690
I think so, let's go with yes, I think
you can use whatever delimiter you want.

47
00:03:14.690 --> 00:03:18.750
I think, they'll again generally
see people use colons.

48
00:03:18.750 --> 00:03:21.832
And I think there's some tooling that
they've actually built around people,

49
00:03:21.832 --> 00:03:23.309
assuming you use colons and slashes.

50
00:03:24.320 --> 00:03:29.326
But there's nothing from stopping me of

51
00:03:29.326 --> 00:03:35.821
saying user.btholtd.city
Seattle pretty sure.

52
00:03:35.821 --> 00:03:39.200
Yeah, I mean that should work just fine.

53
00:03:39.200 --> 00:03:40.740
It's a good question though.

54
00:03:40.740 --> 00:03:45.337
I'm trying to strongly encourage you to
use colons though because that's what

55
00:03:45.337 --> 00:03:47.130
people generally use, cool.

56
00:03:47.130 --> 00:03:50.053
So something else really
kind of interesting and

57
00:03:50.053 --> 00:03:54.898
strange I've seen people do is, let's say
you have a list of photos that you've

58
00:03:54.898 --> 00:03:59.650
banned from your website and
people keep trying to upload this photo.

59
00:03:59.650 --> 00:04:05.079
So what they'll do is they'll actually
use the photo binary as the key,

60
00:04:05.079 --> 00:04:10.064
cuz these keys can actually be
almost arbitrarily large they can be

61
00:04:10.064 --> 00:04:13.960
up to 512 megabytes of length for the key.

62
00:04:13.960 --> 00:04:18.893
I don't do that, I think it's actually a
poor idea because then you slow down your

63
00:04:18.893 --> 00:04:22.827
lookups because it has to traverse
through these giant keys, but

64
00:04:22.827 --> 00:04:26.206
it is technically possible
to use binaries as the keys.

65
00:04:26.206 --> 00:04:30.928
In that particular case, what I would say,
I would take a hash an MD5 or

66
00:04:30.928 --> 00:04:35.726
an SAJ, a SHA, as people say, of the photo
and then use that as the key and

67
00:04:35.726 --> 00:04:40.020
then you would know if I can upload or
not that particular photo.

68
00:04:40.020 --> 00:04:45.070
But there's a lot of clever
things that you can do with Redis

