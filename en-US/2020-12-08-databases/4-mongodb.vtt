WEBVTT

1
00:00:00.000 --> 00:00:03.235
There are lots of other NoSQL databases.

2
00:00:03.235 --> 00:00:05.081
And they come out fairly frequently.

3
00:00:05.081 --> 00:00:08.046
Today we're gonna be focusing
on one called MongoDB,

4
00:00:08.046 --> 00:00:12.634
which if you're a JavaScript developer,
probably sounds fairly familiar to you.

5
00:00:12.634 --> 00:00:16.868
But there are plenty of others to look
at like Cassandra, Couchbase, Rethink,

6
00:00:16.868 --> 00:00:18.625
there's a myriad of other ones.

7
00:00:18.625 --> 00:00:23.048
This one's just very popular with
specifically JavaScript developers,

8
00:00:23.048 --> 00:00:25.370
but in general with a lot of companies.

9
00:00:25.370 --> 00:00:27.966
So let's get into talking about MongoDB.

10
00:00:27.966 --> 00:00:31.620
I think it's pretty safe to say that
MongoDB is one of the most popular

11
00:00:31.620 --> 00:00:33.262
databases today in the world.

12
00:00:33.262 --> 00:00:38.465
It's been a pretty reliable custodian
of data for over a decade now.

13
00:00:38.465 --> 00:00:42.383
And it works really well with very small
workloads like when I'm just doing little

14
00:00:42.383 --> 00:00:46.473
one off projects myself, I very frequently
choose MongoDB just because it's really

15
00:00:46.473 --> 00:00:48.040
easy to get up and running with.

16
00:00:48.040 --> 00:00:52.330
The one thing I'm gonna say is if you go
look through MongoDB history, they've had

17
00:00:52.330 --> 00:00:56.498
a couple of rough patches of like there's
a time where they were dropping data for

18
00:00:56.498 --> 00:00:59.953
a while, they had some rough patches,
I'll just put it that way.

19
00:00:59.953 --> 00:01:03.662
I'm just gonna say that they're past
that they haven't had a real problem in

20
00:01:03.662 --> 00:01:04.303
a long time.

21
00:01:04.303 --> 00:01:08.562
So I feel very confident in
recommending to all of you.

22
00:01:08.562 --> 00:01:11.429
MongoDB is a very good use or
as good database for

23
00:01:11.429 --> 00:01:14.234
whatever workload you're
gonna throw at it.

24
00:01:16.312 --> 00:01:19.238
So let's go ahead and just dive into it.

25
00:01:19.238 --> 00:01:24.172
So hopefully you have
Docker Desktop up and running now.

26
00:01:24.172 --> 00:01:28.591
You can tell if it's up and
running, here in my Mac,

27
00:01:28.591 --> 00:01:32.217
you can see I had this
little whale up here.

28
00:01:32.217 --> 00:01:35.213
You can see here it says
Docker Desktop is running.

29
00:01:35.213 --> 00:01:37.824
Hopefully that's something
you see right now.

30
00:01:37.824 --> 00:01:39.160
If you do, then great.

31
00:01:39.160 --> 00:01:44.315
If not, then you'll have to get it up and
running.

32
00:01:44.315 --> 00:01:50.315
On Windows,
I think it's in your system tray.

33
00:01:50.315 --> 00:01:52.256
Yeah, it'll be in your
system tray as well.

34
00:01:55.639 --> 00:01:58.700
And then we're gonna be running
some commands that I have

35
00:01:58.700 --> 00:02:00.306
here just listed out for you.

36
00:02:00.306 --> 00:02:01.842
This should work in PowerShell.

37
00:02:01.842 --> 00:02:05.050
I didn't actually try it in PowerShell,
but this should work in PowerShell.

38
00:02:05.050 --> 00:02:10.182
If not, you can use WSL and
get into bash and the shell.

39
00:02:10.182 --> 00:02:14.587
This will definitely work through
bash in WSL, which stands for

40
00:02:14.587 --> 00:02:16.717
Windows subsystem for Linux.

41
00:02:16.717 --> 00:02:20.813
If you just search for WSL Windows, it'll
show you how to get that up and running.

42
00:02:20.813 --> 00:02:23.951
So I'm gonna copy this Docker run.

43
00:02:23.951 --> 00:02:27.382
And I'm gonna open my terminal here.

44
00:02:27.382 --> 00:02:28.860
And I'm just gonna paste that in there.

45
00:02:28.860 --> 00:02:33.822
Docker run--name test-mongo,
you can call it whatever you want,

46
00:02:33.822 --> 00:02:37.536
I just call it test mongo
because I'm not creative.

47
00:02:37.536 --> 00:02:44.153
-dit, that's for detach interactive and
tty that's what the dit stands for.

48
00:02:44.153 --> 00:02:47.763
-p this this is gonna be what port
you're gonna be opening from your Docker

49
00:02:47.763 --> 00:02:50.701
container running on your
computer to your local computer.

50
00:02:50.701 --> 00:02:55.633
So we're opening the port 27017, outside.

51
00:02:55.633 --> 00:02:59.177
So that's gonna be the ones gonna
be available my host computer, and

52
00:02:59.177 --> 00:03:02.845
it's gonna be opening 27017 which
is the default port for Mongo,

53
00:03:02.845 --> 00:03:04.759
interior on the inside, all right?

54
00:03:04.759 --> 00:03:07.090
So you can kinda map those ports
if you want them to be different.

55
00:03:07.090 --> 00:03:09.867
I don't, so that's why I'm saying that.

56
00:03:09.867 --> 00:03:11.720
The --rm just means if,

57
00:03:11.720 --> 00:03:16.783
when I'm done with it just remove
cleanup automatically afterwards.

58
00:03:16.783 --> 00:03:21.485
And then the name of the container
that will be pulling

59
00:03:21.485 --> 00:03:23.898
off of Docker Hub is Mongo.

60
00:03:23.898 --> 00:03:28.230
And then the :4.4.1 we're
pulling the version 4.4.1.

61
00:03:28.230 --> 00:03:33.159
So if you run this,
you should just get something like this.

62
00:03:33.159 --> 00:03:37.980
This is the hash of what's
running in side of docker.

63
00:03:37.980 --> 00:03:42.878
So if I type Docker PS right now,
you can see I have one container

64
00:03:42.878 --> 00:03:47.600
running which is this one you
can see these numbers match up.

65
00:03:47.600 --> 00:03:49.490
You can see it's
forwarding this port here.

66
00:03:49.490 --> 00:03:52.780
And you can see the name
of this is test Mongo.

67
00:03:52.780 --> 00:03:55.113
So now we have one container
running on our computer.

68
00:03:55.113 --> 00:03:56.481
It's running MongoDB.

69
00:03:56.481 --> 00:03:58.404
It's available for us to access.

70
00:03:58.404 --> 00:04:01.677
I don't actually have the Mongo
client installed on my computer, but

71
00:04:01.677 --> 00:04:02.683
the container does.

72
00:04:02.683 --> 00:04:04.081
So we can kind of cheat and

73
00:04:04.081 --> 00:04:07.151
use the containers own Mongo
to query against itself.

74
00:04:07.151 --> 00:04:11.783
So if you go back here to my notes at
this Docker exact command right here.

75
00:04:14.158 --> 00:04:18.218
And I'm gonna be connecting to
my test Mongo container, and

76
00:04:18.218 --> 00:04:21.013
I'm gonna be running the Mongo command.

77
00:04:21.013 --> 00:04:24.102
And now you can see here
I am inside of Mongo.

78
00:04:24.102 --> 00:04:27.802
So I'm now actually able
to query against Mongo.

79
00:04:27.802 --> 00:04:29.863
Now we're inside of MongoDB.

80
00:04:29.863 --> 00:04:33.121
And now we're able to start writing
quit all database clients, or

81
00:04:33.121 --> 00:04:35.216
all databases have these kind of clients,

82
00:04:35.216 --> 00:04:38.026
we can get into the command line and
start doing queries.

83
00:04:38.026 --> 00:04:39.254
So let's look at one of these.

84
00:04:39.254 --> 00:04:45.134
If I do show DBs like that, you can see
here I have three different databases.

85
00:04:45.134 --> 00:04:47.651
One called admin,
one called configure and called local.

86
00:04:47.651 --> 00:04:52.312
This is what Mongo creates for you by
default without you having to do anything.

87
00:04:55.437 --> 00:04:58.692
So Mongo has two kind
of key concepts here.

88
00:04:58.692 --> 00:05:02.637
One is called a database and
one is called a collection.

89
00:05:02.637 --> 00:05:07.317
And if you're familiar with something
like my sequel or Postgres or

90
00:05:07.317 --> 00:05:12.094
something like that, you'll be
familiar to databases and tables.

91
00:05:12.094 --> 00:05:16.811
So a table and a collection are roughly
analogous across MongoDB and

92
00:05:16.811 --> 00:05:18.890
like a relational database.

93
00:05:18.890 --> 00:05:21.163
So the first thing is we wanna
create our own database.

94
00:05:21.163 --> 00:05:23.813
A database is going to be
a group of collections.

95
00:05:23.813 --> 00:05:28.314
So let's say you had an app that was
running like a pet adoption, which is what

96
00:05:28.314 --> 00:05:32.965
we're gonna be doing, I always talk
about pet adoption, because I like dogs.

97
00:05:32.965 --> 00:05:37.298
That's that's really the crux
of that issue right there.

98
00:05:37.298 --> 00:05:41.470
We're gonna be using a database called
adoption because we're gonna have multiple

99
00:05:41.470 --> 00:05:43.948
different collections
inside of this database.

100
00:05:43.948 --> 00:05:45.849
So it's a group of collections.

101
00:05:45.849 --> 00:05:49.118
You'll find frequently your application
will only ever use one database,

102
00:05:49.118 --> 00:05:49.790
that's okay.

103
00:05:49.790 --> 00:05:53.039
If you have a bigger application
has a bunch of, this is users, and

104
00:05:53.039 --> 00:05:56.520
this is movies, and this is TV shows and
you need to separate those out,

105
00:05:56.520 --> 00:06:00.492
you could have multiple databases which
would then have multiple collections.

106
00:06:00.492 --> 00:06:04.604
It's all about organizing
your data in a useful way.

107
00:06:04.604 --> 00:06:08.493
But the idea is that you wanna
have like data together.

108
00:06:08.493 --> 00:06:10.912
So I'm gonna say use adoption, like that.

109
00:06:10.912 --> 00:06:14.533
That's gonna be the name of my database
because it's gonna be a pet adoption

110
00:06:14.533 --> 00:06:15.106
database.

111
00:06:15.106 --> 00:06:19.429
And you can see here now I've
switched to DB adoption.

112
00:06:19.429 --> 00:06:22.816
That didn't exist before, but again,
Mongo is dynamic in nature, so

113
00:06:22.816 --> 00:06:26.160
it just rolls with it, rise like
you want something called adoption?

114
00:06:26.160 --> 00:06:28.107
Here you go.
I don't actually have something like that,

115
00:06:28.107 --> 00:06:28.896
but you can have it now.

116
00:06:31.755 --> 00:06:32.951
So let's talk about collections.

117
00:06:32.951 --> 00:06:36.027
Collections are just basically like
a grab bag of documents, right?

118
00:06:36.027 --> 00:06:38.453
A document is gonna be like a record or

119
00:06:38.453 --> 00:06:43.561
if you're thinking about a spreadsheet,
it's gonna be like a row, right?

120
00:06:43.561 --> 00:06:49.235
So one individual entry into your
database is going to be a document and

121
00:06:49.235 --> 00:06:53.669
the table of those rows is
going to be your collection.

122
00:06:55.802 --> 00:06:58.430
So yeah, it's just a grab bag of objects,

123
00:06:58.430 --> 00:07:01.943
you can think of it as
basically JavaScript's objects.

124
00:07:01.943 --> 00:07:08.327
In fact, literally, the query language for
MongoDB is just JavaScript.

125
00:07:08.327 --> 00:07:13.743
So if you know JavaScript, you already
know how to do querying in MongoDB.

126
00:07:13.743 --> 00:07:18.627
So for example,
I can just type math.now like that.

127
00:07:18.627 --> 00:07:21.981
That's date.now, not math.now,

128
00:07:21.981 --> 00:07:26.290
you can see,
this is actually just JavaScript.

129
00:07:26.290 --> 00:07:28.548
So you can actually just run
JavaScript stuff in here.

130
00:07:28.548 --> 00:07:33.241
So math.max, that would work, right?

131
00:07:33.241 --> 00:07:35.516
Now, we'll actually just be copying and

132
00:07:35.516 --> 00:07:39.093
pasting some JavaScript in here
to generate some records for us.

133
00:07:39.093 --> 00:07:42.543
Again, I'm gonna be using the terms,
the correct term to use here is documents.

134
00:07:42.543 --> 00:07:44.152
That's what each of these are.

135
00:07:44.152 --> 00:07:47.902
But I will use the term documents and
records kind of interchangeably,

136
00:07:47.902 --> 00:07:49.474
just kinda fixed in my brain.

137
00:07:49.474 --> 00:07:50.940
Those terms that mean the same thing.

138
00:07:50.940 --> 00:07:52.680
It's one entry in your collection.

139
00:07:55.610 --> 00:08:02.642
So let's make a database of pets, and
let's insert a awesome record into that.

140
00:08:02.642 --> 00:08:06.254
So I'm gonna say DB,
that's gonna represent adoption, right?

141
00:08:06.254 --> 00:08:11.072
So that's kind of like the object
that represents adoption right now.

142
00:08:11.072 --> 00:08:12.613
And I'm gonna say .pets,

143
00:08:12.613 --> 00:08:16.502
that's gonna be the name of my
collection that I'm about to create.

144
00:08:16.502 --> 00:08:21.713
And I'm going to put an insert one,
like that.

145
00:08:21.713 --> 00:08:25.194
And this is a function that you just
give it a JavaScript object and

146
00:08:25.194 --> 00:08:28.950
it's gonna turn that into a record or
a document in our database here.

147
00:08:30.260 --> 00:08:31.885
So it's gonna have a name and

148
00:08:31.885 --> 00:08:35.684
this name is gonna be Luna because
it's obviously gonna be my dog.

149
00:08:35.684 --> 00:08:38.671
It's gonna be a type of dog.

150
00:08:40.663 --> 00:08:48.001
Its breed is going to be Havanese and
she is eight years old.

151
00:08:50.726 --> 00:08:55.382
So that should look pretty familiar to if
you've ever written JavaScript before.

152
00:08:55.382 --> 00:08:58.833
It's because it's
literally just JavaScript.

153
00:08:58.833 --> 00:09:00.223
Okay?

154
00:09:00.223 --> 00:09:05.536
So if I hit Enter that now,
you can see, it acknowledged,

155
00:09:05.536 --> 00:09:09.558
which means that the query was successful.

156
00:09:09.558 --> 00:09:13.323
And it inserted a new ID and
that object has an idea of blocks.

157
00:09:13.323 --> 00:09:16.292
So every documents that
you insert into MongoDB,

158
00:09:16.292 --> 00:09:18.561
it just automatically gives it an ID.

159
00:09:18.561 --> 00:09:21.860
It has its own kind of internal ID system.

160
00:09:21.860 --> 00:09:25.768
Whereas with other databases you
have to create your own IDs,

161
00:09:25.768 --> 00:09:28.333
MongoDB automatically has one for you.

162
00:09:28.333 --> 00:09:30.872
Let's take a look at that record then.

163
00:09:30.872 --> 00:09:34.768
So first thing we'd say db.pets.count.

164
00:09:34.768 --> 00:09:40.781
And you can see now this
has one record in it.

165
00:09:40.781 --> 00:09:45.065
And if I say show DBs now, you'll notice
that I do have an adoption database

166
00:09:45.065 --> 00:09:49.395
because it created that for
me when I inserted that first document.

167
00:09:49.395 --> 00:09:51.807
So now it's like okay,
now this is real and

168
00:09:51.807 --> 00:09:54.760
it goes and
actually creates all that stuff for you.

169
00:09:54.760 --> 00:10:00.043
Another thing that's gonna be helpful for
you is you can also say db.pets.help.

170
00:10:00.043 --> 00:10:03.370
And this is actually going to show
you all of the commands you can run.

171
00:10:03.370 --> 00:10:09.892
So you can do find, find one, get db,
get indexes, all that kind of stuff.

172
00:10:09.892 --> 00:10:11.748
I frequently forget all this stuff and

173
00:10:11.748 --> 00:10:14.481
it's nice to just be able to
kind of see that at a glance.

174
00:10:14.481 --> 00:10:18.196
I think that also works for
db, we just check it does.

175
00:10:18.196 --> 00:10:21.676
So you can see all the things that you can
do with the database as well in addition

176
00:10:21.676 --> 00:10:22.592
to the collection.

177
00:10:24.763 --> 00:10:28.529
We can do things like DB like stats
well I think that works, right?

178
00:10:28.529 --> 00:10:31.389
So this is, it has one collection,
one object inside of it,

179
00:10:31.389 --> 00:10:32.522
the average side of it.

180
00:10:32.522 --> 00:10:37.352
There's a bunch of stuff you can
do kind of administrative stuff.

181
00:10:37.352 --> 00:10:37.852
Yeah.

182
00:10:39.893 --> 00:10:48.242
&gt;&gt; I keep hearing the same record
as does the same as document?

183
00:10:48.242 --> 00:10:48.911
&gt;&gt; It is yeah.

184
00:10:48.911 --> 00:10:52.820
Those terms are not
necessarily interchangeable.

185
00:10:52.820 --> 00:10:55.640
But l also can't get away from saying
because I just kind of the word that

186
00:10:55.640 --> 00:10:56.253
comes to mind.

187
00:10:56.253 --> 00:11:00.693
But it's one entry in a database
can be considered a record.

188
00:11:00.693 --> 00:11:03.202
It can be considered a document, a row.

189
00:11:03.202 --> 00:11:06.317
You'll hear it called all
those different things.

190
00:11:06.317 --> 00:11:11.094
The correct term here is document.

