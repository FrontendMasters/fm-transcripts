WEBVTT

1
00:00:00.140 --> 00:00:02.670
Let's talk more about Redis.

2
00:00:02.670 --> 00:00:05.860
So this is the more Redis
concepts part of the notes.

3
00:00:05.860 --> 00:00:10.192
And we're going to be talking about
some of the more advanced things

4
00:00:10.192 --> 00:00:11.410
that Redis can do.

5
00:00:12.510 --> 00:00:15.495
Yeah, and we're gonna do one of them,

6
00:00:15.495 --> 00:00:20.150
the other ones we're just
gonna kind of chat about.

7
00:00:20.150 --> 00:00:25.081
So Redis does have a peculiar ability
to do to evaluate Lua I don't

8
00:00:25.081 --> 00:00:27.780
know if you're familiar with Lua.

9
00:00:27.780 --> 00:00:29.723
It's a very simplified,

10
00:00:29.723 --> 00:00:34.920
it's a programming language that
doesn't have a lot of syntax.

11
00:00:34.920 --> 00:00:36.540
We'll go with that.

12
00:00:36.540 --> 00:00:41.201
You can do a lot of things with Lua, but

13
00:00:41.201 --> 00:00:48.505
it is a fairly small language
in that particular capacity.

14
00:00:48.505 --> 00:00:52.509
So, if you need to do something
like really complicated with Redis,

15
00:00:52.509 --> 00:00:56.590
it does have the ability to
actually accept entire program.

16
00:00:56.590 --> 00:00:58.040
To do that within Lua.

17
00:00:59.160 --> 00:01:04.541
Now, my general advice for
you is if you're coming at a problem and

18
00:01:04.541 --> 00:01:08.867
you're saying,
I need Redis to evaluate Lua for me,

19
00:01:08.867 --> 00:01:12.520
you might reconsider what you're doing.

20
00:01:12.520 --> 00:01:14.990
It might not necessarily be a good idea.

21
00:01:14.990 --> 00:01:18.839
I really can't fathom of like
what I really wanted to do right

22
00:01:18.839 --> 00:01:21.110
now I wanted to evaluate Lua for me.

23
00:01:22.270 --> 00:01:27.248
So, I was actually talking to one of
the engineers that used to work on mixer

24
00:01:27.248 --> 00:01:31.990
right mixer is like the twitch
streaming platform that Microsoft I've

25
00:01:31.990 --> 00:01:36.875
used to have apparently mixer
used this capability quite a bit.

26
00:01:36.875 --> 00:01:40.745
So, I don't know, that was a big
website that handle a lot of traffic.

27
00:01:40.745 --> 00:01:41.255
They did it.

28
00:01:41.255 --> 00:01:43.725
So, I've never had to do this.

29
00:01:43.725 --> 00:01:45.720
I actually kind of think
this is a bad idea, but

30
00:01:45.720 --> 00:01:48.805
I could see eventually being useful and
we're gonna do it for science.

31
00:01:50.750 --> 00:01:54.080
So, let's just clear
this our a little bit.

32
00:01:54.080 --> 00:01:58.445
So I'm gonna say EVAL, which is how you
tell us I'm about to give you some Lua's,

33
00:01:58.445 --> 00:01:59.670
so buckle up.

34
00:01:59.670 --> 00:02:03.450
And then you're gonna say, like we're
gonna write a little bit of Lua.

35
00:02:03.450 --> 00:02:06.562
I don't know Lua so
I actually had to look up how to do this.

36
00:02:06.562 --> 00:02:11.411
For i = 9, or

37
00:02:11.411 --> 00:02:16.042
i = 0 ,9,1.

38
00:02:16.042 --> 00:02:20.623
So, from 0 to 9 increment by 1

39
00:02:23.585 --> 00:02:28.568
Do redis.call, SET, and

40
00:02:28.568 --> 00:02:33.700
then we gonna do a Lua key.

41
00:02:33.700 --> 00:02:37.962
So lua underscore key,

42
00:02:37.962 --> 00:02:41.798
underscore dot dot,

43
00:02:41.798 --> 00:02:45.858
this is all lua stuff.

44
00:02:45.858 --> 00:02:48.783
I, i times 5,

45
00:02:53.297 --> 00:03:00.340
End 0 So what does this do?

46
00:03:00.340 --> 00:03:03.820
Again this is not a Lua class,
so if you don't understand this.

47
00:03:03.820 --> 00:03:05.990
I don't particularly understand
it super well either.

48
00:03:05.990 --> 00:03:10.030
This is for loop from 0 to 9.

49
00:03:10.030 --> 00:03:15.278
And it's doing a Redis called sets,
how you actually call into Redis and

50
00:03:15.278 --> 00:03:21.060
calling set on Lua key 0, Lua key 1,
Lua key 2, Lua key 3 and setting those.

51
00:03:21.060 --> 00:03:25.909
So if I say GET Lua key 5 like that,

52
00:03:25.909 --> 00:03:30.929
it's 25 right, because it's 5

53
00:03:30.929 --> 00:03:35.630
times 5, again Lua key 630.

54
00:03:35.630 --> 00:03:40.307
So we're doing this all just so you can
see you can provide a bit of Lua code

55
00:03:40.307 --> 00:03:43.157
it will go through you
can do multiple sets.

56
00:03:43.157 --> 00:03:47.888
This is kind of where I think that Lua
could be useful as if I had to do kind

57
00:03:47.888 --> 00:03:52.719
of a bunch of stuff all at once and
I wanted to send it all at once to Redis.

58
00:03:52.719 --> 00:03:57.594
I still think I'd rather do that in my
Node JS code rather than sending Lua to be

59
00:03:57.594 --> 00:03:59.610
evaluated by Redis.

60
00:03:59.610 --> 00:04:04.579
But, I just wanted you to be aware
that there is a Lua interpreter

61
00:04:04.579 --> 00:04:06.061
built into Redis.

62
00:04:06.061 --> 00:04:11.466
Sorry about that 0 at the end here,
Redis has the ability

63
00:04:11.466 --> 00:04:16.320
to run in a cluster and
in a sharded cluster as well.

64
00:04:17.620 --> 00:04:19.364
If when that's the case,

65
00:04:19.364 --> 00:04:23.500
you actually have to tell Redis I'm
sending it to these keys.

66
00:04:23.500 --> 00:04:28.342
So I'd actually have to come in here and

67
00:04:28.342 --> 00:04:32.316
say 10 Lua key, 0, Lua key.

68
00:04:32.316 --> 00:04:35.186
And I'd actually have to go out and
say, here are all the keys

69
00:04:35.186 --> 00:04:38.470
that I'm about to change,
because it has to shard those correctly.

70
00:04:38.470 --> 00:04:44.500
And it has to know that upfront
before you do it in Lua.

71
00:04:44.500 --> 00:04:46.070
So, that's what that 10 means.

72
00:04:47.290 --> 00:04:48.606
Just so you know.

73
00:04:51.005 --> 00:04:55.167
Again, I don't particularly see this being
super useful to many students in this

74
00:04:55.167 --> 00:04:56.780
class, but it's kinda fun.

75
00:04:56.780 --> 00:04:58.860
We wrote a little bit of Lua today.

76
00:04:58.860 --> 00:05:00.985
How many of you expected
to write Lua today?

77
00:05:02.872 --> 00:05:04.610
If the answer is yes,.

78
00:05:04.610 --> 00:05:10.312
I have more questions for
you [LAUGH] all right.

79
00:05:13.825 --> 00:05:15.120
I think that's enough.

80
00:05:15.120 --> 00:05:16.990
Lua and Redis for today.

81
00:05:16.990 --> 00:05:19.664
I have another example in there but

82
00:05:19.664 --> 00:05:25.286
the relatively the idea is you can
actually pass arguments into the Lua,

83
00:05:25.286 --> 00:05:31.970
and use those with dollar signs or
keys, 1, keys 2, so on and so forth.

84
00:05:31.970 --> 00:05:34.835
In fact, we'll just copy and
paste that so you can see it.

85
00:05:34.835 --> 00:05:39.631
It looks like we're down here,
more Redis concepts.

86
00:05:44.356 --> 00:05:47.875
So, here,
you can actually pass in arguments.

87
00:05:47.875 --> 00:05:51.622
That's what the ARGV is, is you can
actually pass those arguments into

88
00:05:51.622 --> 00:05:53.940
the the Redis pro or
the Lua program as well.

89
00:05:57.356 --> 00:05:59.810
Okay, good enough.

90
00:05:59.810 --> 00:06:02.100
Pub Sub, we actually did talk about this.

91
00:06:02.100 --> 00:06:04.060
You can do this with streams.

92
00:06:04.060 --> 00:06:08.694
This is better for example, if you were
gonna try and pull reddish for changes,

93
00:06:08.694 --> 00:06:11.770
you could use a stream
to do that in better.

94
00:06:11.770 --> 00:06:12.950
So, publish and subscribe.

95
00:06:12.950 --> 00:06:15.740
That's a pub sub stands for,
it's actually a very useful pattern.

96
00:06:15.740 --> 00:06:18.540
I'd never done it with redness before, but

97
00:06:18.540 --> 00:06:22.770
I'll probably give it a shot after
this to see how useful it is.

98
00:06:22.770 --> 00:06:24.770
It's useful for
real time notifications and stuff.

99
00:06:24.770 --> 00:06:32.036
Things that you would, yeah,
you would use something like that for.

100
00:06:32.036 --> 00:06:36.516
Transactions, so we've talked about
this in previous where you wanna send

101
00:06:36.516 --> 00:06:38.770
multiple things at the same time.

102
00:06:38.770 --> 00:06:41.820
Redis also has this capability
of doing transactions.

103
00:06:41.820 --> 00:06:43.650
And it has a couple
different ways of doing it.

104
00:06:43.650 --> 00:06:47.060
You can do with multi exec,
discard and watch.

105
00:06:47.060 --> 00:06:50.260
I'm not gonna really get into
it because I've never had to do

106
00:06:50.260 --> 00:06:53.526
transactions in Redis If that's
really interesting to you,

107
00:06:53.526 --> 00:06:56.680
conceptually understand
what a transaction is.

108
00:06:56.680 --> 00:06:59.582
So you click here,
that'll take you into the Redis docs

109
00:06:59.582 --> 00:07:02.250
that'll tell you how to
do transactions in Redis.

110
00:07:03.260 --> 00:07:06.040
But the one I did wanna
spend some time on is LRU.

111
00:07:08.520 --> 00:07:13.383
So, one of the ways actually
literally the only way that

112
00:07:13.383 --> 00:07:17.829
mem cache works is you say,
all right, mem cache,

113
00:07:17.829 --> 00:07:23.600
you have 100 megabytes of
memory all to yourself, right?

114
00:07:23.600 --> 00:07:27.103
And you can store whatever you want in
there, but you get no more than 100

115
00:07:27.103 --> 00:07:30.509
megabytes or a gigabyte or 10 gigabytes or
whatever you wanna give it.

116
00:07:32.100 --> 00:07:34.913
What will happen is,
once it hits 100 megabytes,

117
00:07:34.913 --> 00:07:37.550
it has to evict something from its cache,
right?

118
00:07:37.550 --> 00:07:40.930
Something has to go away so
it can fit more stuff in there.

119
00:07:40.930 --> 00:07:44.010
And do that does that with
a strategy called LRU.

120
00:07:44.010 --> 00:07:47.932
Last or least recently updated, right.

121
00:07:50.702 --> 00:07:55.870
Not even updated least recently
used is actually the correct one.

122
00:07:55.870 --> 00:08:01.134
So what mem cached is gonna do is it's
gonna go look inside of itself and

123
00:08:01.134 --> 00:08:03.220
say what key in here.

124
00:08:03.220 --> 00:08:05.880
Is the least recently read or
written to, and

125
00:08:05.880 --> 00:08:09.880
then it'll take that key in evicted
out of there so that it's gone.

126
00:08:09.880 --> 00:08:13.750
And this is called an LRU strategy.

127
00:08:13.750 --> 00:08:17.740
This is useful for things that you're
just, setting cash on the fly.

128
00:08:17.740 --> 00:08:19.759
And it's making
the fundamental assumption,

129
00:08:19.759 --> 00:08:23.140
which is probably a pretty good assumption
that, if you're never using a key,

130
00:08:23.140 --> 00:08:25.329
it's probably okay if you
evicted from the cache.

131
00:08:26.670 --> 00:08:29.650
You can set Redis to act in
this exact same way as well.

132
00:08:29.650 --> 00:08:33.628
And it's a little bit of a step up from
mem cache because everything's getting

133
00:08:33.628 --> 00:08:37.725
written to disk so that if your server
accidentally goes down, you can just say,

134
00:08:37.725 --> 00:08:39.373
hey Redis, restart yourself.

135
00:08:39.373 --> 00:08:43.280
And it'll reload its cache because
everything was getting written to disk.

136
00:08:43.280 --> 00:08:46.050
That is the only way LRU is the only
way that mem cached can work.

137
00:08:46.050 --> 00:08:48.470
Redis actually has a couple
of different strategies.

138
00:08:50.160 --> 00:08:55.074
I left a link to that here, but the idea
here is if I can show you this actually

139
00:08:55.074 --> 00:08:57.570
give you a whole thing of how to do LRU.

140
00:08:59.450 --> 00:09:02.410
So, that's good too.

141
00:09:02.410 --> 00:09:07.200
Yeah, so
I had a good example here with gravatar.

142
00:09:07.200 --> 00:09:11.540
So imagine you're using, like gravatar is
it people imagine most people have seen

143
00:09:11.540 --> 00:09:14.960
gravatar before which the idea is
that you have an email address.

144
00:09:14.960 --> 00:09:18.477
And then anywhere that anyone that goes
to another website that uses gravatar can

145
00:09:18.477 --> 00:09:21.380
get your same Avatar and
they just use that same gravatar service.

146
00:09:23.420 --> 00:09:27.500
You're probably gonna cache users that
are frequently using gravatar and

147
00:09:27.500 --> 00:09:32.870
there's probably a lot of people that use
gravatar that very rarely hit gravatar.

148
00:09:32.870 --> 00:09:34.858
So an LRU would be very useful to them,

149
00:09:34.858 --> 00:09:39.020
because those people would get read
from the database and that's fine.

150
00:09:39.020 --> 00:09:41.040
But you'd have a high
cache hit percentage.

151
00:09:41.040 --> 00:09:44.399
And that's actually probably
what you're mostly looking for

152
00:09:44.399 --> 00:09:47.260
with caching is you want
caches to have hits, right.

153
00:09:47.260 --> 00:09:49.430
So you want to find things in the cache.

154
00:09:49.430 --> 00:09:50.900
That's what a cache hit percentages.

155
00:09:50.900 --> 00:09:53.480
And you wanna have low cache misses,
right?

156
00:09:53.480 --> 00:09:56.151
And cache misses when you look for
something in the cache, it's not there.

157
00:10:00.143 --> 00:10:03.020
All right, so
LRU that's one way that Redis can do it.

158
00:10:03.020 --> 00:10:04.650
There's a bunch of other ways
that Redis can do it as well.

159
00:10:05.890 --> 00:10:10.390
So again, just wanna call out here,
you can always go to this DB samples page.

160
00:10:10.390 --> 00:10:13.848
There's a Redis Directory here that
has the complete code in here.

