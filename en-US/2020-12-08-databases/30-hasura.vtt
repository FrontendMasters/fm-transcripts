WEBVTT

1
00:00:00.950 --> 00:00:02.036
The heavy lifting is done.

2
00:00:02.036 --> 00:00:04.853
This stuff's all fun now.

3
00:00:04.853 --> 00:00:07.546
I guess it wasn't fun before
is the implication of that.

4
00:00:07.546 --> 00:00:08.860
I thought it was fun.

5
00:00:08.860 --> 00:00:10.900
Even more stuff is fun.

6
00:00:10.900 --> 00:00:12.740
Let's talk about graphQL
because that's fun.

7
00:00:14.450 --> 00:00:17.768
This is too cool for me to not talk about.

8
00:00:17.768 --> 00:00:23.430
There's a thing called Hasura that
pairs very nicely with Postgres.

9
00:00:23.430 --> 00:00:28.186
It also has support coming from Mongo and
in MySQL,

10
00:00:28.186 --> 00:00:32.770
but today it works for
Postgres out of the box.

11
00:00:32.770 --> 00:00:34.374
So Hasura is a company,

12
00:00:34.374 --> 00:00:39.753
they make a product called Hasura that
sits in front of your Postgres database,

13
00:00:39.753 --> 00:00:45.050
and it turns your whole Postgres
database into a graphQL endpoint.

14
00:00:45.050 --> 00:00:48.010
And it's really cool, and I just wanna
show you kind of how to get started.

15
00:00:49.701 --> 00:00:53.280
So I want you to come back to your
command line, wherever that is, here.

16
00:00:55.123 --> 00:01:02.590
So again, we have, yeah,
my Postgres running right here.

17
00:01:02.590 --> 00:01:05.315
We're gonna run a second container here.

18
00:01:05.315 --> 00:01:10.521
And I'm just going to grab it off
the website here under Hasura.

19
00:01:14.785 --> 00:01:16.710
Just run that whole query right there.

20
00:01:19.200 --> 00:01:24.212
Not query, but whole command.

21
00:01:24.212 --> 00:01:28.762
It's going to connect to your
Postgres database again,

22
00:01:28.762 --> 00:01:33.700
postgres.mysecretpassword@host.docker.int-
ernal.

23
00:01:37.420 --> 00:01:39.881
Yeah, that should work, called my-hasura.

24
00:01:42.582 --> 00:01:46.333
I should start a new container here,
docker ps, you can see now I have a second

25
00:01:46.333 --> 00:01:52.302
one called my-hasura,
If this is not working for

26
00:01:52.302 --> 00:02:00.350
you, They have a Docker compose file here.

27
00:02:00.350 --> 00:02:03.955
So I left a link here, just follow this
introduction and this will get it running,

28
00:02:03.955 --> 00:02:06.097
and it might not get
running with your database,

29
00:02:06.097 --> 00:02:09.100
you might have to rerun
that query that I gave you.

30
00:02:09.100 --> 00:02:11.790
But this will get you up and
running using Docker compose.

31
00:02:13.000 --> 00:02:13.790
It's really easy.

32
00:02:13.790 --> 00:02:15.265
Again, just follow the instructions.

33
00:02:20.703 --> 00:02:25.322
Okay, once you're running,
open localhost:8080 and

34
00:02:25.322 --> 00:02:33.020
you should end up with,
Something that looks a lot like this.

35
00:02:33.020 --> 00:02:34.670
This dashboard for Hasura.

36
00:02:36.662 --> 00:02:42.649
So Hasura, again,
makes your database a graphQL endpoint.

37
00:02:42.649 --> 00:02:46.490
A lot of times you can even get around
mostly writing any back end code.

38
00:02:46.490 --> 00:02:50.450
It kind of just turns your database
into a back end by itself.

39
00:02:52.860 --> 00:02:57.231
So if you're here with me and you have all
your data up and running, click on Data.

40
00:02:57.231 --> 00:03:01.414
And then you can see you have a,
user's board has a boards, comments,

41
00:03:01.414 --> 00:03:02.640
rich content.

42
00:03:02.640 --> 00:03:09.215
I'm going to click Track, On all of these.

43
00:03:13.373 --> 00:03:16.824
You can even just click Track All.

44
00:03:16.824 --> 00:03:21.858
Now, what's probably not great about
these is I made everything public.

45
00:03:21.858 --> 00:03:23.770
You don't wanna make your
entire database public.

46
00:03:24.820 --> 00:03:27.910
I'll let you kind of get into that on your
own time, this is not a Hasura workshop.

47
00:03:27.910 --> 00:03:31.656
I just wanted to show you that
this exists, and it's really cool.

48
00:03:31.656 --> 00:03:34.510
And I'm also not gonna teach you graphQL.

49
00:03:34.510 --> 00:03:39.240
Scott Moss has three courses, I think,
on graphQL, and they're all awesome.

50
00:03:39.240 --> 00:03:42.584
So if this is interesting to you,
take this information,

51
00:03:42.584 --> 00:03:47.110
go take Scott's GraphQL courses and
come back and have GraphQL superpowers.

52
00:03:50.120 --> 00:03:53.620
Okay, but
you can write GraphQL queries here.

53
00:03:53.620 --> 00:03:54.901
So I'm actually just gonna copy and

54
00:03:54.901 --> 00:03:56.870
paste one because I can't
write GraphQL from memory.

55
00:03:58.730 --> 00:04:05.520
So I'll just copy and
paste this one into this and click play.

56
00:04:05.520 --> 00:04:08.259
And you can get rid of that.

57
00:04:08.259 --> 00:04:10.162
Play again.

58
00:04:10.162 --> 00:04:14.591
And now, using these GraphQL queries, you
can see here I'm getting information out

59
00:04:14.591 --> 00:04:17.620
of my database without writing
any Postgres whatsoever.

60
00:04:17.620 --> 00:04:19.850
It's all just running using GraphQL.

61
00:04:19.850 --> 00:04:26.292
Now, you compare that with
something like maybe Apollo or

62
00:04:26.292 --> 00:04:31.552
URQL, yeah, U-R-Q-L, to turn your Hasura

63
00:04:31.552 --> 00:04:36.690
back end into powering
a front end using this.

64
00:04:36.690 --> 00:04:38.292
There's a bunch of stuff like actions, and

65
00:04:38.292 --> 00:04:40.510
anyway, Hasura has a bunch
of really cool stuff.

66
00:04:40.510 --> 00:04:43.332
l just wanted to show you as long as
you have a postgres database running,

67
00:04:43.332 --> 00:04:45.383
it's really easy to get up and
running with Hasura.

68
00:04:49.337 --> 00:04:51.100
And to be honest with you,
I've only really played around with this.

69
00:04:51.100 --> 00:04:53.731
I haven't actually made any
real apps with this, but

70
00:04:53.731 --> 00:04:56.660
I'm impressed with how easy
this was to get up and running.

71
00:04:56.660 --> 00:05:00.335
We just spent a bunch of time
learning Postgres, and in 15 seconds,

72
00:05:00.335 --> 00:05:03.530
I had a Hasura backend with just
running a Docker container.

