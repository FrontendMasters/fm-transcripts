WEBVTT

1
00:00:00.000 --> 00:00:02.538
Like where's the name neo4j come from?

2
00:00:02.538 --> 00:00:05.300
That's a kind of a strange name.

3
00:00:06.580 --> 00:00:10.558
Back in the early, early parts of tech,

4
00:00:10.558 --> 00:00:16.240
it was really popular to put
four in names of things.

5
00:00:16.240 --> 00:00:20.954
And so this is actually even
before my time in tech, but

6
00:00:20.954 --> 00:00:24.750
this was like a popular naming convention.

7
00:00:24.750 --> 00:00:29.490
So Neo was just the name of the product
and then 4j was this enterprise product,

8
00:00:29.490 --> 00:00:30.000
right?

9
00:00:30.000 --> 00:00:32.210
That's kind of what that 4j meant.

10
00:00:32.210 --> 00:00:36.934
I'm sure someone can come in here and
explain that mean more thoroughly than me,

11
00:00:36.934 --> 00:00:43.410
but it was kind of, On topic at the time
that I think it just stuck around.

12
00:00:43.410 --> 00:00:48.100
I remember there was an April Fool's post
from neo4j that they were going to read.

13
00:00:48.100 --> 00:00:51.303
They were releasing soon, a version,
they would call it neo5j and

14
00:00:51.303 --> 00:00:52.830
people took it very seriously.

15
00:00:54.570 --> 00:00:58.750
And it was a joke that it's neo4j
they're gonna stick for with neo4j.

16
00:01:00.530 --> 00:01:03.541
Okay, so let's get our neo4j up and
running here.

17
00:01:03.541 --> 00:01:07.147
I got your Docker command
here ready to go,

18
00:01:07.147 --> 00:01:10.764
we're going to hop into our command line.

19
00:01:10.764 --> 00:01:14.868
Let's just,
I'm gonna shut down my postgres here.

20
00:01:14.868 --> 00:01:20.028
Docker kill my

21
00:01:20.028 --> 00:01:24.330
postgres.

22
00:01:24.330 --> 00:01:26.625
I think I've just saved,
I have to kill my hasura as well.

23
00:01:30.566 --> 00:01:32.050
Okay, I have nothing running.

24
00:01:32.050 --> 00:01:34.040
Now I'm going to paste that in here.

25
00:01:34.040 --> 00:01:39.210
Docker run, detach interactive TTY,
I actually don't need that part.

26
00:01:39.210 --> 00:01:43.541
dash dash RM,
remove the logs when you're done.

27
00:01:43.541 --> 00:01:45.467
Name my new 4j Port 7474.

28
00:01:45.467 --> 00:01:50.252
That is the port of
the browser interface to neo4j.

29
00:01:50.252 --> 00:01:54.883
7686 is the port that is actually
reading and writing to, so

30
00:01:54.883 --> 00:01:57.552
our app will actually use 7687.

31
00:01:57.552 --> 00:02:01.975
And then we're telling it to use no
auth because I'm just playing around

32
00:02:01.975 --> 00:02:03.869
with it on our local computer.

33
00:02:03.869 --> 00:02:06.649
Obviously, don't do that in
your production database.

34
00:02:06.649 --> 00:02:13.236
And then we'll be doing neo4j:4.1.3.

35
00:02:13.236 --> 00:02:15.190
And that should start up pretty quickly.

36
00:02:15.190 --> 00:02:17.906
Again, these are all running immediately
in my computer because I have them

37
00:02:17.906 --> 00:02:18.720
downloaded already.

38
00:02:18.720 --> 00:02:22.791
This will probably take you,
depending on how fast your internet is,

39
00:02:22.791 --> 00:02:24.310
30 seconds to start up.

40
00:02:25.620 --> 00:02:27.860
So now you can see here I got this up and
running,

41
00:02:27.860 --> 00:02:31.220
it's exposing the port's that I want,
everything is looking great.

42
00:02:33.680 --> 00:02:38.696
So we're gonna come back over here and

43
00:02:38.696 --> 00:02:44.352
we're gonna run this command right here.

44
00:02:44.352 --> 00:02:48.274
Docker exec dash it maione neo4j.

45
00:02:48.274 --> 00:02:53.816
And then we're going to run a command
line utility called cipher shell.

46
00:02:53.816 --> 00:02:55.856
So let's talk about what cipher is.

47
00:02:55.856 --> 00:03:01.522
Just like MongoDB uses JSON and
JavaScript and postgres uses SQL.

48
00:03:01.522 --> 00:03:05.810
There is a query language for
neo4j, and it is called Cipher.

49
00:03:05.810 --> 00:03:14.010
So it is a peculiar query language
made particularly for neo4j's.

50
00:03:14.010 --> 00:03:16.140
I don't believe it's used anywhere else.

51
00:03:17.510 --> 00:03:20.395
There is another query language that's
pretty well known, it's called Gremlin,

52
00:03:20.395 --> 00:03:21.990
which is different than
the company Gremlin.

53
00:03:23.050 --> 00:03:25.089
Gremlin is the Apache query language.

54
00:03:26.326 --> 00:03:28.510
But we'll will not be using that today.

55
00:03:28.510 --> 00:03:30.060
We'll be using cipher.

56
00:03:30.060 --> 00:03:31.340
Yeah, question?

57
00:03:31.340 --> 00:03:35.570
Does graph QL fit in here
with a graph database?

58
00:03:35.570 --> 00:03:37.822
It's a very fair question.

59
00:03:37.822 --> 00:03:41.682
I think the,
the answer to that is it could.

60
00:03:41.682 --> 00:03:47.510
Graph QL was made to query Facebook,
which is very graph-like in nature, right?

61
00:03:47.510 --> 00:03:51.227
It doesn't necessarily fit in,
out of the box,

62
00:03:51.227 --> 00:03:55.772
I can't just start using graph
QL to query against neo4j.

63
00:03:55.772 --> 00:04:01.370
I don't know the utility to make it work
with neo4J, but I don't doubt it exists.

64
00:04:01.370 --> 00:04:03.175
Is that a dodgy enough answer to that?

65
00:04:03.175 --> 00:04:08.680
[LAUGH] So, my answer there is not
necessarily, but probably could.

