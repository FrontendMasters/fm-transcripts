WEBVTT

1
00:00:00.300 --> 00:00:06.236
Let's say you're making
a movie recommendation site.

2
00:00:06.236 --> 00:00:12.973
Not that I would know anything help
working at large streaming movie sites.

3
00:00:12.973 --> 00:00:17.468
And let's say our recommendation algorithm
that we want to try today is we want to

4
00:00:17.468 --> 00:00:21.582
say I was like alright, this person
has seen, 45 films by Halle Berry.

5
00:00:21.582 --> 00:00:25.037
They probably really like Halle Berry or
Kristen Stewart, for example, but

6
00:00:25.037 --> 00:00:26.910
today we're gonna be using Halle Berry.

7
00:00:30.200 --> 00:00:36.888
We wanna query our network for
things that Halle Berry has acted in.

8
00:00:36.888 --> 00:00:41.568
And then we want to jump to like
recommendations have people that have been

9
00:00:41.568 --> 00:00:45.799
in films with Halle Berry so
that they can go check out other films.

10
00:00:45.799 --> 00:00:52.952
So the way that we could do that
is we can come in and say, match.

11
00:00:52.952 --> 00:00:56.568
Halle as a person,

12
00:00:56.568 --> 00:01:01.316
right and then acted in.

13
00:01:01.316 --> 00:01:03.982
And we wanna jump, but
we don't wanna jump too far, right?

14
00:01:03.982 --> 00:01:09.043
So as you may imagine,
I don't wanna jump to this person has been

15
00:01:09.043 --> 00:01:14.666
in this too far of a network effect,
we wanna just jump to immediately,

16
00:01:14.666 --> 00:01:18.062
has been in the same
film with Halle Berry.

17
00:01:18.062 --> 00:01:25.442
So we can do acted in Star and
then we do one dot dot four.

18
00:01:25.442 --> 00:01:31.343
And that's going to put an upper cap
of how far this will explore our graph.

19
00:01:31.343 --> 00:01:35.179
Okay, and then I'm not going to add
a directionality because they're going

20
00:01:35.179 --> 00:01:37.547
to have both,
directions in both directions.

21
00:01:37.547 --> 00:01:40.886
I wanna say this is gonna be our
recommendation the person that we wanna

22
00:01:40.886 --> 00:01:43.840
recommend to our movie viewer
that really likes Halle Berry.

23
00:01:47.112 --> 00:01:49.612
Okay, and then we'll say where.

24
00:01:49.612 --> 00:01:56.291
Halle dot name equals, Halle Berry [SOUND]

25
00:02:00.721 --> 00:02:04.749
RETURN DISTINCT [SOUND]

26
00:02:04.749 --> 00:02:10.262
Recommendation [SOUND] Dot name

27
00:02:13.164 --> 00:02:18.111
And then we also want to put an order by
right because if someone continually shows

28
00:02:18.111 --> 00:02:22.910
up in a lot of films with Halle Berry,
that would be a good indication that we'd

29
00:02:22.910 --> 00:02:26.862
want to recommend someone,
this particular actor or actress.

30
00:02:26.862 --> 00:02:30.601
So when I say order by.

31
00:02:30.601 --> 00:02:33.720
Recommendation.name.

32
00:02:33.720 --> 00:02:39.249
We could also put count

33
00:02:39.249 --> 00:02:44.492
star here, and say.

34
00:02:44.492 --> 00:02:48.315
Count star comma recommendation dot name.

35
00:02:48.315 --> 00:02:50.270
All right.

36
00:02:50.270 --> 00:02:53.828
So now we should be
able to run this query.

37
00:02:53.828 --> 00:02:55.120
And we'll get back.

38
00:02:55.120 --> 00:02:59.130
In this particular case,
no one's been in here we go.

39
00:02:59.130 --> 00:03:03.977
Probably should have done that descending.

40
00:03:03.977 --> 00:03:06.673
Let's read that again.

41
00:03:06.673 --> 00:03:10.748
So now you can see Carry on mass
Canneries and Laurence Fishburne and

42
00:03:10.748 --> 00:03:14.052
Meg Ryan have all been in
three films with Halle Berry.

43
00:03:14.052 --> 00:03:18.485
So this is a good indication,
we should recommend this film or

44
00:03:18.485 --> 00:03:20.631
these actors and actresses.

45
00:03:20.631 --> 00:03:23.483
To this person that
really likes Halle Berry.

46
00:03:23.483 --> 00:03:25.770
This is a terrible
recommendation algorithm.

47
00:03:25.770 --> 00:03:30.666
But I think you can kind of see here,
you can kind of explore graphs and

48
00:03:30.666 --> 00:03:34.142
see the interesting ways
things are connected.

49
00:03:34.142 --> 00:03:37.041
Like this would be better for
like bands for example, right?

50
00:03:37.041 --> 00:03:41.994
Like if you listen to this band a lot and
your friend listens to the same band a lot

51
00:03:41.994 --> 00:03:46.212
and they also listen to this other
than a ton than you don't right.

52
00:03:46.212 --> 00:03:50.802
That would be a good recommendation,
for you.

53
00:03:50.802 --> 00:03:55.010
So let's talk about the one,
dot four here.

54
00:03:55.010 --> 00:03:58.823
This is kind of letting it know the upper
bounds of how far you want to jump.

55
00:03:58.823 --> 00:04:02.572
If I put six here because
I think this is it also

56
00:04:02.572 --> 00:04:07.124
includes you have to jump to a film and
then to a person.

57
00:04:07.124 --> 00:04:12.350
I think if I put six here you're
gonna get a lot more people right for

58
00:04:12.350 --> 00:04:17.872
example, her very extended right so
people that have acted in films.

59
00:04:17.872 --> 00:04:20.460
With Haile Berry that I've
acted with someone else, right,

60
00:04:20.460 --> 00:04:21.821
that's the extended network.

61
00:04:21.821 --> 00:04:26.040
If you add an additional hop there,
for whatever reason,

62
00:04:26.040 --> 00:04:29.753
Hugo Weaving is very much
in her extended network.

63
00:04:29.753 --> 00:04:33.400
And also for that matter,
that's probably most of the graph

64
00:04:33.400 --> 00:04:37.990
at this point because that's a very wide
graph if you if you allow for two hops

