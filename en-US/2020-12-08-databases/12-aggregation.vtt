WEBVTT

1
00:00:00.240 --> 00:00:02.310
Let's get into aggregation.

2
00:00:02.310 --> 00:00:03.980
It's actually one of my
favorite parts about MongoDB.

3
00:00:03.980 --> 00:00:06.773
I have a lot of favorite things
when it comes to databases.

4
00:00:06.773 --> 00:00:08.450
This is a favorite thing,

5
00:00:08.450 --> 00:00:13.037
as well as the other things that I
was favoriting before also favorite.

6
00:00:13.037 --> 00:00:20.323
All right, we're gonna be talking
about going back here aggregation.

7
00:00:20.323 --> 00:00:24.169
This is one of the first things that
actually got me like really excited about

8
00:00:24.169 --> 00:00:24.718
MongoDB.

9
00:00:24.718 --> 00:00:30.631
It felt like I could do, I don't know, it
felt like I was able to get interesting,

10
00:00:30.631 --> 00:00:36.838
unique insights out of my database that I
felt like I couldn't have done previously.

11
00:00:36.838 --> 00:00:39.265
So here's my example of
when I used this before.

12
00:00:39.265 --> 00:00:42.104
I used to work at a like
classifieds Type website.

13
00:00:42.104 --> 00:00:44.110
So you can picture like Craigslist.

14
00:00:44.110 --> 00:00:44.771
I didn't work at Craigslist.

15
00:00:44.771 --> 00:00:49.610
I worked at a different company
that did similar types of thing,

16
00:00:49.610 --> 00:00:53.653
and we had a rule that people
could only post five ads.

17
00:00:53.653 --> 00:00:56.612
Otherwise they had to pay money to
be able to post more ads, right?

18
00:00:56.612 --> 00:01:00.721
That's kind of the monetization
strategy for this company.

19
00:01:00.721 --> 00:01:03.993
But we'd have people that would just
go in and create multiple accounts,

20
00:01:03.993 --> 00:01:05.007
businesses, right?

21
00:01:05.007 --> 00:01:07.841
People would dishonestly
circumvent the rules and go and

22
00:01:07.841 --> 00:01:09.322
post multiple classifieds.

23
00:01:09.322 --> 00:01:13.940
And so I actually used this
technique to go in and

24
00:01:13.940 --> 00:01:17.754
find ads have the same address in them.

25
00:01:17.754 --> 00:01:22.069
And then I was actually able to
automatically ban people that were posting

26
00:01:22.069 --> 00:01:25.073
multiple ads across different accounts,
right?

27
00:01:25.073 --> 00:01:28.430
Again, I was a brand new developer I
was writing PHP for at the time, right?

28
00:01:28.430 --> 00:01:32.505
And this felt like a superpower to me that
I was able to write this like automatic

29
00:01:32.505 --> 00:01:36.029
banning mechanism for people that
were circumventing the rules and

30
00:01:36.029 --> 00:01:38.530
it's through this power
called aggregation.

31
00:01:38.530 --> 00:01:40.398
I'm going to show you
the new way of doing this in

32
00:01:40.398 --> 00:01:42.730
MongoDB called the aggregation pipeline.

33
00:01:42.730 --> 00:01:46.296
This is the preferred way,
the better way to do it.

34
00:01:46.296 --> 00:01:49.044
But there's an old way of
doing it called MapReduce.

35
00:01:49.044 --> 00:01:51.425
And if you're a functional programmer, and

36
00:01:51.425 --> 00:01:55.811
you like those kind of things that sounds
very appealing to it's still available,

37
00:01:55.811 --> 00:01:59.653
you can still do MapReduce,
it's just lower bit harder to understand.

38
00:01:59.653 --> 00:02:05.120
So we're going to focus on the aggregation
pipeline, but also know that there's

39
00:02:05.120 --> 00:02:10.522
the MapReduce framework out there as well
for doing MapReduce against MongoDB.

40
00:02:10.522 --> 00:02:15.351
So, what the aggregation pipeline
allows you to do basically allows you

41
00:02:15.351 --> 00:02:19.724
to take your data and slice it up
into various different buckets.

42
00:02:19.724 --> 00:02:21.303
And then you can kind of do averages.

43
00:02:21.303 --> 00:02:25.857
You can do additions, basically allows
you to derive insight from your data,

44
00:02:25.857 --> 00:02:30.756
allows you to combine them and unwind them
in interesting ways to kind of figure out,

45
00:02:30.756 --> 00:02:34.292
I don't know anything that you
want to know about your data.

46
00:02:34.292 --> 00:02:37.771
So well then I'm going to show you right
now is I want to find out how many puppies

47
00:02:37.771 --> 00:02:38.683
are in my database.

48
00:02:38.683 --> 00:02:41.755
How many adult dogs are in my database and
how many senior and

49
00:02:41.755 --> 00:02:43.911
super senior animals are in my database.

50
00:02:43.911 --> 00:02:48.441
This is possible through
the aggregation framework.

51
00:02:48.441 --> 00:02:51.157
So let's give her a shot here.

52
00:02:51.157 --> 00:02:57.016
We're gonna say DB.pets.aggregate.

53
00:02:57.016 --> 00:02:59.241
And then it does this in stages, right?

54
00:02:59.241 --> 00:03:03.575
So you can give it multiple different
stages of like, do this first,

55
00:03:03.575 --> 00:03:05.381
then do this, then do this.

56
00:03:05.381 --> 00:03:10.252
So we're going to give it one
stage first of bucketing.

57
00:03:10.252 --> 00:03:15.731
So the bucket allows
you to break your we're

58
00:03:15.731 --> 00:03:23.441
going to break our pet collection
down into buckets of by age.

59
00:03:23.441 --> 00:03:29.222
So with the bucket here,
we're going to say.

60
00:03:29.222 --> 00:03:36.300
GroupBy, Dollar sign age so the dollar

61
00:03:36.300 --> 00:03:39.905
sign is just saying that's the name of
the field that I want you to look for.

62
00:03:39.905 --> 00:03:45.848
So dollar sign age is going
to be grouped by their age.

63
00:03:45.848 --> 00:03:51.608
Okay then the boundaries.

64
00:03:51.608 --> 00:03:55.690
This is going to be defining the kind
of boundaries of where we want to put

65
00:03:55.690 --> 00:03:57.080
our dogs.

66
00:03:57.080 --> 00:03:58.834
So the first one is going
to be down to zero, right?

67
00:03:58.834 --> 00:04:02.643
So, anything between zero and two,
I don't know if I'm correct, but

68
00:04:02.643 --> 00:04:05.192
I'm asserting anything between zero and
two.

69
00:04:05.192 --> 00:04:08.117
I'm going to consider a puppy,
everything from three to eight,

70
00:04:08.117 --> 00:04:11.053
I'm going to be considering an adult and
everything above that.

71
00:04:11.053 --> 00:04:15.622
I'm going to be considering
a senior animal, so zero.

72
00:04:15.622 --> 00:04:18.937
So it includes the bottom and
excludes the top.

73
00:04:18.937 --> 00:04:21.547
So zero to three sets us
everything from zero to two.

74
00:04:21.547 --> 00:04:23.281
We will be in the first bucket.

75
00:04:23.281 --> 00:04:28.050
Everything from three to eight
will be in the adult bucket.

76
00:04:28.050 --> 00:04:32.431
And everything from 9 to 15
will be in the senior bucket.

77
00:04:32.431 --> 00:04:35.269
Then we have to give it some sort of
default because we do have some animals

78
00:04:35.269 --> 00:04:36.492
that are even older than that.

79
00:04:36.492 --> 00:04:40.454
We're just gonna put those
into like very senior, or

80
00:04:40.454 --> 00:04:46.632
you could also call that like 16 plus,
whatever you wanna call that last bucket.

81
00:04:46.632 --> 00:04:50.386
Basically, you're saying anything that
doesn't fit my boundaries stick in this

82
00:04:50.386 --> 00:04:51.092
other bucket.

83
00:04:51.092 --> 00:04:54.253
And then you have to define what kinda
output that you wanna put in there.

84
00:04:54.253 --> 00:04:58.573
I just wanna count but if you want it to
like I don't know you can put the animals

85
00:04:58.573 --> 00:05:01.983
into the buckets and
then do more aggregation on them later.

86
00:05:01.983 --> 00:05:04.110
There's a bunch of stuff you
can do with the output here.

87
00:05:04.110 --> 00:05:09.000
It's kind of like the projection that
you want out of your animal here.

88
00:05:09.000 --> 00:05:13.683
So the output all I want is a count.

89
00:05:13.683 --> 00:05:18.396
And I just want you to keep a running
total, so I'm gonna say sum: 1, so

90
00:05:18.396 --> 00:05:23.906
that means for every animal that you find
in this bucket, increase the count by one.

91
00:05:23.906 --> 00:05:26.441
I got to keep my I can never keep
these damn curly braces straight.

92
00:05:26.441 --> 00:05:29.490
So that's for bucket.

93
00:05:29.490 --> 00:05:31.064
That's for the one that contains bucket.

94
00:05:31.064 --> 00:05:34.664
And then I want to close the array and

95
00:05:34.664 --> 00:05:38.746
close the function call, yes, got it.

96
00:05:38.746 --> 00:05:42.552
First time, like a champion, all right, so

97
00:05:42.552 --> 00:05:46.871
ID this would correspond to the boundary,
right?

98
00:05:46.871 --> 00:05:51.840
So from zero to two, I have 1071 pets,

99
00:05:51.840 --> 00:05:58.879
from three to eight I have 3218,
from nine to 14 yeah,

100
00:05:58.879 --> 00:06:03.987
so I guess 16 wasn't plus wasn't right,

101
00:06:03.987 --> 00:06:08.706
it's actually technically 15 plus.

102
00:06:08.706 --> 00:06:12.460
Anyways, in my super senior category,
I have 2141.

103
00:06:12.460 --> 00:06:16.220
In fact, let's just fix that so
I can feel good about myself.

104
00:06:17.470 --> 00:06:23.042
So in this 15 plus one, so
that's 15 or above, we have 2141.

105
00:06:23.042 --> 00:06:25.407
Okay, so that's interesting.

106
00:06:25.407 --> 00:06:27.505
That's actually not technically
what the question was.

107
00:06:27.505 --> 00:06:33.380
The question was is, how do we figure
out how many senior dogs, right?

108
00:06:33.380 --> 00:06:36.619
So actually,
this is all the senior animals so

109
00:06:36.619 --> 00:06:39.035
I bucketed all animals in the pet.

110
00:06:39.035 --> 00:06:44.518
Collection, not just dogs, so I actually
need to add another stage to this.

111
00:06:44.518 --> 00:06:49.250
And the way I'm gonna do that,
well, I'm just gonna copy and

112
00:06:49.250 --> 00:06:51.902
paste it from here and explain it.

113
00:06:51.902 --> 00:06:53.983
All right, so this bucket,

114
00:06:53.983 --> 00:06:58.852
this is the same one except it's
called very senior here, right?

115
00:06:58.852 --> 00:07:02.779
We add another stage we're gonna put that
stage before the one that where we go and

116
00:07:02.779 --> 00:07:06.419
bucket them and we're gonna just say hey,
match everything that's dog,

117
00:07:06.419 --> 00:07:08.004
drop everything that's else.

118
00:07:08.004 --> 00:07:10.241
And so that's the first stage
will be that match stage.

119
00:07:10.241 --> 00:07:13.597
The second stage will
be the bucketing stage.

120
00:07:13.597 --> 00:07:16.908
So you can see here now these numbers
are much smaller because we're just

121
00:07:16.908 --> 00:07:17.730
looking at dogs.

122
00:07:17.730 --> 00:07:20.958
We're not looking at the rest
of the pets in the collection.

123
00:07:20.958 --> 00:07:22.303
So let's add one more thing.

124
00:07:22.303 --> 00:07:25.512
Let's say that for whatever reason,

125
00:07:25.512 --> 00:07:30.331
we wanted to sort these by
which one had the most, right?

126
00:07:30.331 --> 00:07:32.979
I mean, obviously,
we can do that visually.

127
00:07:32.979 --> 00:07:34.628
But that's less interesting.

128
00:07:34.628 --> 00:07:38.151
Let's do it programmatically.

129
00:07:38.151 --> 00:07:39.900
Add one more stage.

130
00:07:39.900 --> 00:07:44.260
So the pet, the match stage is the same,
the bucket stage stays the same, but

131
00:07:44.260 --> 00:07:46.151
adding one more stage at the end.

132
00:07:46.151 --> 00:07:50.551
Now we're just saying
sort by count descending,

133
00:07:50.551 --> 00:07:55.266
which basically says we're
going to have the one with

134
00:07:55.266 --> 00:08:00.102
the most first second most second,
so on and so forth.

135
00:08:00.102 --> 00:08:04.764
So you can see here we have the most adult
animals, second most senior animals,

136
00:08:04.764 --> 00:08:08.537
third most very senior animals and
the least amount of puppies.

137
00:08:08.537 --> 00:08:12.523
This is just one very, very simple
use case of the aggregation pipeline.

138
00:08:12.523 --> 00:08:14.361
This is a infinitely flexible,

139
00:08:14.361 --> 00:08:18.521
you can do lots of really amazing
things with the aggregation pipeline.

140
00:08:18.521 --> 00:08:21.613
I just wanted to kinda like get
your head around it a little bit.

141
00:08:21.613 --> 00:08:25.272
So you can think like, hey, I need to
derive this insight out of my data.

142
00:08:25.272 --> 00:08:31.728
I need to figure out, how many
reptiles were born on Tuesdays, right?

143
00:08:31.728 --> 00:08:35.162
I don't know stuff like that
that stuff that the aggregation

144
00:08:35.162 --> 00:08:37.667
pipeline could totally figure out for you.

145
00:08:37.667 --> 00:08:39.339
You're kind of getting
into almost like datasets.

146
00:08:39.339 --> 00:08:43.079
Actually not kind of you're literally
getting into like the data science part of

147
00:08:43.079 --> 00:08:44.564
what you can do with databases,

148
00:08:44.564 --> 00:08:47.919
which is kind of some of the cool stuff
like I'm not a data scientist, but

149
00:08:47.919 --> 00:08:51.062
anytime that you let me do data
sciency stuff, I feel like a wizard.

150
00:08:51.062 --> 00:08:52.540
So I like doing that kind of stuff.

