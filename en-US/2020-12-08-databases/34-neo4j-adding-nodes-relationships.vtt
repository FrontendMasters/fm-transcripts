WEBVTT

1
00:00:00.000 --> 00:00:02.773
Let's get into some Neo4j.

2
00:00:02.773 --> 00:00:06.358
So this is our graph database
that we're gonna be using today.

3
00:00:06.358 --> 00:00:09.109
The first thing I want you to do is I want
you to just run this docker command here.

4
00:00:09.109 --> 00:00:14.473
This is gonna get our Neo4j
database up and running.

5
00:00:14.473 --> 00:00:19.872
So this is gonna open port 7474, that's
where the browser experience is exposed.

6
00:00:19.872 --> 00:00:24.553
And the port 7687,
which is actually the communication

7
00:00:24.553 --> 00:00:29.430
port where you can actually have
your node app write to Neo4j.

8
00:00:29.430 --> 00:00:32.934
We're gonna say no authentication cuz
we're just doing this locally for

9
00:00:32.934 --> 00:00:33.960
fun in our computer.

10
00:00:33.960 --> 00:00:36.338
Obviously, you would not
do this production and

11
00:00:36.338 --> 00:00:38.776
have advanced credentials and
things like that.

12
00:00:38.776 --> 00:00:43.278
And we'll be on version 4.1.3.

13
00:00:43.278 --> 00:00:47.726
So I'm just gonna copy that command,
have head over to my terminal,

14
00:00:47.726 --> 00:00:48.958
paste it in there.

15
00:00:48.958 --> 00:00:53.101
And now, if I say docker ps,
you can see here, I got Neo4j running.

16
00:00:53.101 --> 00:00:57.190
And now, I'm gonna connect to it
with something called cypher-shell.

17
00:00:57.190 --> 00:01:00.860
So I'm gonna copy this one here,
paste that.

18
00:01:02.870 --> 00:01:07.780
And that will now connect me to Neo4j and
the cypher-shell.

19
00:01:07.780 --> 00:01:12.623
So what a cypher, cypher is actually
the name of the query language for Neo4j,

20
00:01:12.623 --> 00:01:17.100
just like you have JavaScript for
MongoDB and SQL for Postgres.

21
00:01:17.100 --> 00:01:21.280
The query language for
Neo4j is called cypher.

22
00:01:21.280 --> 00:01:24.339
It's not the only query language for
graph databases.

23
00:01:24.339 --> 00:01:26.878
In fact, I think cypher
actually just works on Neo4.

24
00:01:26.878 --> 00:01:31.160
But there's one called Gremlin
that works with kind of

25
00:01:31.160 --> 00:01:36.106
a wider variety of databases
including things like Cosmos DB.

26
00:01:36.106 --> 00:01:40.786
Okay, so let's get into actually creating

27
00:01:40.786 --> 00:01:45.220
our very first node in our database here.

28
00:01:46.390 --> 00:01:49.348
So we're gonna be talking about
the movie Scott Pilgrim vs the World,

29
00:01:49.348 --> 00:01:51.060
which is like one of my favorite movies.

30
00:01:51.060 --> 00:01:56.633
So I'm going to subject you to my
personal preferences of movies and

31
00:01:56.633 --> 00:02:00.270
we're going to create our first node here.

32
00:02:00.270 --> 00:02:04.395
So I'm gonna say CREATE, and again,
this is optional that you capitalize this.

33
00:02:04.395 --> 00:02:06.288
You can also say create just like that.

34
00:02:06.288 --> 00:02:08.901
I'm gonna capitalize it for your benefit.

35
00:02:08.901 --> 00:02:14.108
CREATE, and we'll make a p:Person.

36
00:02:14.108 --> 00:02:16.732
So this p here just represents a variable.

37
00:02:16.732 --> 00:02:21.636
We're not gonna necessarily
refer to it right now,

38
00:02:21.636 --> 00:02:24.534
but this :person right here,

39
00:02:24.534 --> 00:02:30.569
this is the label that we're gonna
put on this particular node.

40
00:02:30.569 --> 00:02:35.157
So it's gonna be a person, and then we're
gonna add some attributes to Scott.

41
00:02:36.417 --> 00:02:39.130
Not Scott, Michael, Michael Cera.

42
00:02:39.130 --> 00:02:44.300
So I'm gonna say,
name: "Michael Cera" like that,

43
00:02:44.300 --> 00:02:49.360
who plays Scott Pilgrim in
Scott Pilgrim vs the World,

44
00:02:49.360 --> 00:02:52.557
and Michael was born in 1988.

45
00:02:55.024 --> 00:02:58.714
So these right here are the properties or

46
00:02:58.714 --> 00:03:02.847
attributes of this particular person node.

47
00:03:02.847 --> 00:03:08.303
So person here, this is called a label,
and these are called the properties.

48
00:03:11.395 --> 00:03:16.674
Okay, and then I'm gonna close that,
put a semicolon.

49
00:03:16.674 --> 00:03:21.265
And now, I've added one node and set two
properties and added a label to that.

50
00:03:21.265 --> 00:03:25.668
So now, what happens if I want a query for
this particular node that I've made?

51
00:03:25.668 --> 00:03:34.728
I'm gonna say MATCH, P like this.

52
00:03:34.728 --> 00:03:37.020
So again, using a variable,
you can say person.

53
00:03:37.020 --> 00:03:39.501
This is just a variable name, so
that we can refer to it later.

54
00:03:39.501 --> 00:03:46.680
I'm gonna put p cuz I'm lazy, and
I'm gonna say name: "Michael Cera".

55
00:03:46.680 --> 00:03:50.932
And this is how I'm gonna query for
that node that I just created.

56
00:03:50.932 --> 00:03:54.156
Here at the end,
I need to put a curly brace there.

57
00:03:54.156 --> 00:03:57.450
Here at the end, I'm gonna have to say
RETURN cuz you have to do something with

58
00:03:57.450 --> 00:03:59.083
that node that we just created for it.

59
00:03:59.083 --> 00:04:03.434
I'm gonna say RETURN p, and
you can see here, we have now query for

60
00:04:03.434 --> 00:04:06.410
this Michael Cera node that we've created.

61
00:04:06.410 --> 00:04:08.670
We could also have created for
it just like this.

62
00:04:08.670 --> 00:04:15.110
So p:Person like that, this is going
to match every person in the database.

63
00:04:15.110 --> 00:04:16.298
Now, in this particular case,

64
00:04:16.298 --> 00:04:18.720
we just have one node in the database and
it happens to be a person.

65
00:04:19.900 --> 00:04:22.220
But you can see there that
also matches Michael Cera.

66
00:04:22.220 --> 00:04:26.614
Or if you wanna just get every single
node, this is gonna match every single

67
00:04:26.614 --> 00:04:31.036
node, which again, we just have one
node in the database, Michael Cera.

68
00:04:33.143 --> 00:04:35.630
Okay, let's create a second
node in our database.

69
00:04:35.630 --> 00:04:40.050
This node is actually going to represent
the movie Scott Pilgrim vs the World.

70
00:04:40.050 --> 00:04:44.885
So we're gonna say CREATE m:Movie.

71
00:04:44.885 --> 00:04:50.526
Again, this m here just represents
the movie that we're creating,

72
00:04:50.526 --> 00:04:53.970
it represents the variable, right?

73
00:04:53.970 --> 00:04:54.970
Or it is the variable rather.

74
00:04:54.970 --> 00:04:57.780
And then we just have to give it all
the attributes that we wanna give it.

75
00:04:57.780 --> 00:05:04.985
So create movie with a title
of Scott Pilgrim vs the World.

76
00:05:07.951 --> 00:05:12.830
It was released in 2010.

77
00:05:12.830 --> 00:05:17.057
Its tagline, and I'm not making this up,
this is actually the one

78
00:05:17.057 --> 00:05:21.529
that someone in marketing [LAUGH]
chose for Scott Pilgrim vs the World.

79
00:05:21.529 --> 00:05:29.222
Tagline is An epic of epic epicness.

80
00:05:29.222 --> 00:05:32.337
Someone was like really self-impressed
when they came up with that line.

81
00:05:36.135 --> 00:05:38.180
Okay, and
then we'll close our object there.

82
00:05:38.180 --> 00:05:42.600
So that'll be all of the properties,
and then we'll close that.

83
00:05:43.970 --> 00:05:46.950
And then here, if you want to,
you can say RETURN m;.

84
00:05:48.090 --> 00:05:49.970
This will both create it and
then will return it, so

85
00:05:49.970 --> 00:05:51.080
that we can inspect it right.

86
00:05:51.080 --> 00:05:54.230
So now, we can see, here's the movie
thing that we just created.

87
00:05:54.230 --> 00:05:56.910
It added one node, set three properties,
and added one label.

88
00:05:58.180 --> 00:05:59.870
Cool.
So now, we have two nodes.

89
00:05:59.870 --> 00:06:04.785
So if I run that same query, MATCH (p)
RETURN p;, I should get two things back,

90
00:06:04.785 --> 00:06:06.366
one person and one movie.

91
00:06:06.366 --> 00:06:08.601
As you can see here,
I get one person and one movie.

92
00:06:11.217 --> 00:06:15.488
Now, I wanna create a relationship
between Scott Pilgrim and Michael Cera.

93
00:06:15.488 --> 00:06:17.975
I wanna say that Michael Cera acted in and

94
00:06:17.975 --> 00:06:22.876
that acted in is gonna be the relationship
or the edge between those two things,

95
00:06:22.876 --> 00:06:27.220
that Michael Cera acted in
Scott Pilgrim vs the World.

96
00:06:27.220 --> 00:06:30.260
So the first thing we have to do is
we have to match both of those nodes.

97
00:06:30.260 --> 00:06:31.352
So I'm gonna say MATCH,

98
00:06:35.015 --> 00:06:44.558
(Michael:Person), (ScottVsWorld:,

99
00:06:44.558 --> 00:06:48.231
which is a movie.

100
00:06:48.231 --> 00:06:52.441
Now honestly, I could stop here cuz
I literally only have one person and

101
00:06:52.441 --> 00:06:53.660
one movie.

102
00:06:53.660 --> 00:06:56.265
But let's go ahead and
make this a little bit more qualified.

103
00:06:56.265 --> 00:06:57.554
So I'm gonna add a where clause.

104
00:06:57.554 --> 00:07:02.656
I'm gonna say WHERE Michael, Again,

105
00:07:02.656 --> 00:07:10.696
Michael just being a variable
that represents Michael Cera,

106
00:07:10.696 --> 00:07:17.978
.name = 'Michael Cera' AND
ScottVsWorld.title.

107
00:07:17.978 --> 00:07:19.078
I did call it title, right?

108
00:07:19.078 --> 00:07:19.825
I did.
Okay, cool.

109
00:07:21.425 --> 00:07:28.304
Title = 'Scott Pilgrim

110
00:07:28.304 --> 00:07:34.860
vs the World', okay?

111
00:07:34.860 --> 00:07:41.797
And I'm gonna say, CREATE
a relationship with Michael on one end.

112
00:07:41.797 --> 00:07:45.425
I'm gonna put a- here, then I'm gonna
put a relationship between the two.

113
00:07:45.425 --> 00:07:49.566
So I'm gonna do that with a kinda square
bracket, and I'm gonna call this r,

114
00:07:49.566 --> 00:07:52.639
you can call this a relationship or
something like that.

115
00:07:52.639 --> 00:07:56.290
I'm gonna say relationship:ACTED_IN.

116
00:07:56.290 --> 00:07:59.425
So the important part is here,
this relationship, again,

117
00:07:59.425 --> 00:08:00.720
represents a variable.

118
00:08:00.720 --> 00:08:05.879
ACTED_IN here, this represents the type
of relationship that we have here.

119
00:08:05.879 --> 00:08:10.040
So the type of relationship
is that Michael Cera acted in

120
00:08:10.040 --> 00:08:12.170
Scott Pilgrim vs the World.

121
00:08:12.170 --> 00:08:16.220
And this also can have
properties of its own.

122
00:08:16.220 --> 00:08:23.067
So the role that Michael Cera had in
Scott Pilgrim vs the World, if I do this,

123
00:08:27.216 --> 00:08:31.007
Is he had the role of Scott Pilgrim.

124
00:08:31.007 --> 00:08:35.197
Now, this is actually gonna be an array
here cuz yeah, as you can imagine,

125
00:08:35.197 --> 00:08:37.326
if we're doing the Nutty Professor,

126
00:08:37.326 --> 00:08:41.170
Eddie Murphy had like five
roles in that movie, right?

127
00:08:41.170 --> 00:08:45.693
In this particular case,
Michael Cera was just Scott Pilgrim.

128
00:08:45.693 --> 00:08:47.088
So we'll just close it at that.

129
00:08:49.571 --> 00:08:52.436
Okay, that's all the properties that we're
gonna put here in this relationship, but

130
00:08:52.436 --> 00:08:53.454
we could put as many as we want.

131
00:08:55.755 --> 00:08:58.671
And then we have to close
the square bracket.

132
00:08:58.671 --> 00:09:01.780
And then we have to describe,
again, this is a relationship.

133
00:09:01.780 --> 00:09:03.668
So I'm gonna put another- here, but

134
00:09:03.668 --> 00:09:08.490
I wanna describe the cardinality of the
direction of this particular relationship.

135
00:09:08.490 --> 00:09:14.120
It's Michael Cera acted in Scott Pilgrim.

136
00:09:14.120 --> 00:09:15.930
So there's a direction with that.

137
00:09:15.930 --> 00:09:18.090
So I'm gonna put this arrow here, right?

138
00:09:18.090 --> 00:09:21.848
Again, this is just a space with
an angle bracket at the end of it.

139
00:09:21.848 --> 00:09:24.821
But when I put those together,
my font combines them.

140
00:09:24.821 --> 00:09:28.410
It actually looks pretty nice
with this particular set up here.

141
00:09:29.960 --> 00:09:33.870
So Scott Pilgrim here is
gonna be ScottVsWorld.

142
00:09:33.870 --> 00:09:36.583
This is gonna represent the movie, right?

143
00:09:36.583 --> 00:09:40.890
Now, I can hit semi-colon here and
hit Enter, this would be done.

144
00:09:40.890 --> 00:09:47.710
But I just wanna return the relationship
here, so I can investigate that.

145
00:09:47.710 --> 00:09:51.896
So if I put semicolon here now, you can
see here it created one relationship and

146
00:09:51.896 --> 00:09:53.300
set one property.

147
00:09:53.300 --> 00:09:57.491
And the relationship that I've created
here is an ACTED_IN relationship of

148
00:09:57.491 --> 00:09:58.400
Scott Pilgrim.

149
00:09:58.400 --> 00:10:03.050
So this is one of the things that I
like about cypher is a query language.

150
00:10:03.050 --> 00:10:06.382
This is actually based on ASCII art and
they actually explicitly say that they did

151
00:10:06.382 --> 00:10:09.000
this so
that you kind of read it like a picture.

152
00:10:09.000 --> 00:10:11.729
So we have one end of this relationship,

153
00:10:11.729 --> 00:10:14.790
and then we have this
particular thing here.

154
00:10:14.790 --> 00:10:19.080
In fact, let me just copy and paste it so
you can see here, kind of in a vacuum.

155
00:10:19.080 --> 00:10:21.260
It's meant to read like a big arrow.

156
00:10:21.260 --> 00:10:26.287
In fact, if you just kinda like
pared this down a little bit,

157
00:10:28.360 --> 00:10:33.044
It's supposed to look like
this where you have like (a),

158
00:10:33.044 --> 00:10:36.144
then a relationship to (b), right?

159
00:10:36.144 --> 00:10:39.957
So it's meant to kinda like
read like a big arrow.

160
00:10:39.957 --> 00:10:43.054
But when you have a bunch of stuff in
here, it kinda gets like drawn out, right?

161
00:10:47.510 --> 00:10:51.265
Cool, last thing I wanted to kinda
call out here is kind of this,

162
00:10:51.265 --> 00:10:54.827
you'll notice the case in here
that it looks a little weird.

163
00:10:54.827 --> 00:10:59.249
So one, these relationships are always
described in screaming case, right,

164
00:10:59.249 --> 00:11:01.950
where everything is all uppercase.

165
00:11:01.950 --> 00:11:03.280
It doesn't have to be that way.

166
00:11:03.280 --> 00:11:07.292
That's just kind of conventions that
it's really easy to see that this is

167
00:11:07.292 --> 00:11:09.300
a relationship type.

168
00:11:09.300 --> 00:11:13.529
Whereas you look at something like
the label here like this one,

169
00:11:13.529 --> 00:11:15.500
it's in capital case again.

170
00:11:15.500 --> 00:11:19.308
So that's very easy to recognize at
a glance that this is a label type,

171
00:11:19.308 --> 00:11:21.440
not a relationship type.

172
00:11:21.440 --> 00:11:24.750
It's something that people
in the Neo4j community do.

173
00:11:24.750 --> 00:11:26.050
It's something that the docks recommend.

174
00:11:26.050 --> 00:11:27.780
So I just recommend that you do that, too.

175
00:11:28.810 --> 00:11:33.762
So the next thing is we're going
to copy and paste this really long

176
00:11:33.762 --> 00:11:39.112
query here,
That adds the rest of the actors and

177
00:11:39.112 --> 00:11:42.993
actresses and
directors to Scott Pilgrim vs the World.

178
00:11:42.993 --> 00:11:45.760
So, oop, I guess, I hold on,
that's gonna fail.

179
00:11:45.760 --> 00:11:46.620
I'll try that again.

180
00:11:47.760 --> 00:11:51.036
So if we do that, that added 7
nodes created, 7 relationships,

181
00:11:51.036 --> 00:11:52.330
and set 20 properties.

182
00:11:52.330 --> 00:11:56.705
You can see here, we added Aubrey Plaza,
Brie Larson, Anna Kendrick,

183
00:11:56.705 --> 00:12:00.450
all these actors and
actresses to Scott Pilgrim vs the World.

