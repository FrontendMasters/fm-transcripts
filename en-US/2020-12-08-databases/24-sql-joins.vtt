WEBVTT

1
00:00:00.340 --> 00:00:03.330
Let's go talk about joins,
more about joins.

2
00:00:05.530 --> 00:00:09.620
I got a great graphic off of Wikipedia.

3
00:00:09.620 --> 00:00:10.990
So credit to Wikipedia.

4
00:00:10.990 --> 00:00:14.250
You can see down here that
it's attribute it to them.

5
00:00:15.900 --> 00:00:17.947
There are multiple different
kinds of joins but

6
00:00:17.947 --> 00:00:20.770
we just talked about was one of
them which is called an inner join.

7
00:00:20.770 --> 00:00:25.244
In this particular case, it didn't really
matter because we were pretty well

8
00:00:25.244 --> 00:00:29.550
assured that there is a going to be
a match for, for everything right.

9
00:00:29.550 --> 00:00:31.030
So a good example of this.

10
00:00:33.050 --> 00:00:35.890
This top one here,
this is an inner join this AB one.

11
00:00:38.970 --> 00:00:43.692
Every comment definitely has a user,
every user well and that's the relation to

12
00:00:43.692 --> 00:00:47.590
the cuz we were querying for
all the comments on board number 39.

13
00:00:47.590 --> 00:00:52.331
And we know that every comment has a user
we're sure that by the way that we

14
00:00:52.331 --> 00:00:55.690
set up our tables with those foreign keys,
right?

15
00:00:55.690 --> 00:00:57.750
That's assured to us.

16
00:00:57.750 --> 00:01:03.070
So the kind of join that we chose
here you could have chosen left join,

17
00:01:03.070 --> 00:01:04.280
or inner join.

18
00:01:04.280 --> 00:01:05.890
Both of those would have worked.

19
00:01:07.290 --> 00:01:08.768
Right join probably wouldn't have worked.

20
00:01:11.195 --> 00:01:12.435
I don't have to think about that.

21
00:01:12.435 --> 00:01:16.757
Anyway, what you're seeing here is,
if I have records in both one of these,

22
00:01:16.757 --> 00:01:21.078
that bolt that matches the where, but
doesn't join, what do you want me to do

23
00:01:21.078 --> 00:01:25.605
with that inner join says like it must
have a match or don't include it.

24
00:01:25.605 --> 00:01:31.389
So if we had a comment that didn't have
a user match up in the user table.

25
00:01:32.690 --> 00:01:37.230
In a inner joins situation,
you would drop that comment.

26
00:01:37.230 --> 00:01:38.570
Does that make sense?

27
00:01:40.000 --> 00:01:44.442
So if one of the user IDs was set to
know you would just not include it.

28
00:01:47.583 --> 00:01:50.460
Let's talk about a second this left join.

29
00:01:50.460 --> 00:01:53.793
So let's take another kind of
situation where a left join is

30
00:01:53.793 --> 00:01:58.320
actually pretty useful,
if i had comments that didn't have users.

31
00:01:58.320 --> 00:02:01.599
And I wanted to include those comments
despite the fact that they didn't have

32
00:02:01.599 --> 00:02:03.062
users INNER JOIN wouldn't work,

33
00:02:03.062 --> 00:02:06.780
INNER JOIN would eliminate those
ones that don't have any users.

34
00:02:06.780 --> 00:02:10.567
Left join would include them, and
include anything in that querying table,

35
00:02:10.567 --> 00:02:13.520
that doesn't have a match
in the right table, right?

36
00:02:13.520 --> 00:02:16.838
So, in this case,
you have table A, and table B,

37
00:02:16.838 --> 00:02:19.940
inner join includes only the overlap.

38
00:02:19.940 --> 00:02:24.990
Left join also includes anything in
the first table from the from table here,

39
00:02:24.990 --> 00:02:25.910
right?

40
00:02:25.910 --> 00:02:28.040
That doesn't have a match
in the beat table.

41
00:02:29.350 --> 00:02:30.908
That makes sense?

42
00:02:30.908 --> 00:02:35.798
The flip side of that is let's
say I had users I wanted

43
00:02:35.798 --> 00:02:38.700
to include that had comments.

44
00:02:40.330 --> 00:02:42.110
I guess that wouldn't really work either.

45
00:02:42.110 --> 00:02:46.595
The one where this joins actually does
make sense is if I wanna grab boards that

46
00:02:46.595 --> 00:02:51.020
don't have any comments, then grabbing
from the right board makes sense.

47
00:02:52.800 --> 00:02:57.244
And then there is some wild kind of
joins where you wanna exclude things

48
00:02:57.244 --> 00:02:59.880
that exist in other trade tables.

49
00:02:59.880 --> 00:03:07.010
I don't use these ones hardly ever like
90% can be encompassed by inner joins.

50
00:03:07.010 --> 00:03:10.440
The other 8% come from here,
2% come from here.

51
00:03:10.440 --> 00:03:14.594
And then these ones just
don't happen very often, but

52
00:03:14.594 --> 00:03:18.210
let's talk about what they are left join.

53
00:03:18.210 --> 00:03:19.554
Yeah.
For comment has a user ID that

54
00:03:19.554 --> 00:03:20.946
doesn't exist included anyway.

55
00:03:22.863 --> 00:03:24.940
Outer joins, which are these ones here.

56
00:03:24.940 --> 00:03:28.276
Full outer join basically says,
if there's a match in the middle,

57
00:03:28.276 --> 00:03:32.388
don't include it only include things that
don't have matches from either table.

58
00:03:35.840 --> 00:03:37.440
Sorry, that's an outer join.

59
00:03:37.440 --> 00:03:41.834
FULL OUTER JOINS says include
everything that's this one right here.

60
00:03:44.319 --> 00:03:47.027
And then there's a thing as well
called a CROSS JOIN which if you

61
00:03:47.027 --> 00:03:50.480
know the mathematical term Cartesian
product, that's what that is.

62
00:03:50.480 --> 00:03:53.290
Basically sit make every
possible combination possible.

63
00:03:54.940 --> 00:03:59.438
So let's say you had a table with A,
B, and C in one, and a table of D and

64
00:03:59.438 --> 00:04:01.050
E in another.

65
00:04:01.050 --> 00:04:07.540
If you did a cross join, you'd end up with
a product of AD, AE, BD, BE, CD and CE.

66
00:04:07.540 --> 00:04:10.580
So it makes every possible
combination between the two tables.

67
00:04:11.710 --> 00:04:17.646
If you have, what did I say if you
have 1000 rows in one table and

68
00:04:17.646 --> 00:04:23.370
1000 rows in another,
you'll get a million records back so

69
00:04:23.370 --> 00:04:27.410
be cautious when you do cross joints,
okay.

70
00:04:27.410 --> 00:04:30.100
If that doesn't seem super clear,
it's okay.

71
00:04:30.100 --> 00:04:33.677
That's a lot to take in all the ones
this is we're kind of getting

72
00:04:33.677 --> 00:04:38.730
into like set math right of how to get
the overlap between two different things.

73
00:04:38.730 --> 00:04:39.620
Just know that.

74
00:04:39.620 --> 00:04:42.818
These Inner Joins are going to do most of
what you want to do and occasionally left

75
00:04:42.818 --> 00:04:46.590
joins and occasionally right joins
are going to be useful to you as well.

76
00:04:46.590 --> 00:04:48.990
Natural joins are kind of more of a,
I think it's a Postgres thing.

77
00:04:48.990 --> 00:04:51.540
I don't remember using these in MySQL,
don't quote me on that.

78
00:04:51.540 --> 00:04:52.790
I actually don't know if they exist or
not.

79
00:04:55.020 --> 00:05:00.900
But there's a cool thing that you can say
is, hey, I know the field names match up.

80
00:05:00.900 --> 00:05:04.330
So just make find ways
to make this work right.

81
00:05:04.330 --> 00:05:10.784
So we can actually rewrite this query
that I did here on INNER JOIN and

82
00:05:10.784 --> 00:05:15.880
just say what I can do here
is I can actually remove this

83
00:05:15.880 --> 00:05:21.559
entire on clause and
just say natural INNER JOIN like this.

84
00:05:25.620 --> 00:05:28.540
And it still works, which is pretty cool.

85
00:05:28.540 --> 00:05:30.060
Why does that still work?

86
00:05:31.640 --> 00:05:35.320
It's because we call them
user ID in both tables.

87
00:05:35.320 --> 00:05:38.580
And so it's like okay, I'm going to
look for things that have the same name.

88
00:05:38.580 --> 00:05:41.720
If they have the same name,
I'm going to make sure that they match.

89
00:05:41.720 --> 00:05:46.040
That's all natural join does it just
it's a little intelligence around.

90
00:05:46.040 --> 00:05:49.129
If you named these things
consistently across tables, and

91
00:05:49.129 --> 00:05:51.537
you didn't like cross contaminate, right,

92
00:05:51.537 --> 00:05:55.627
so if you call them ID in both different
tables, that wouldn't work, right?

93
00:05:55.627 --> 00:05:59.990
Because it would try and match comment
IDs to user IDs and that wouldn't work.

94
00:05:59.990 --> 00:06:03.780
Because they're called user ID in both
tables is like, I know what these are.

95
00:06:03.780 --> 00:06:05.570
I can do a natural inner join that way.

96
00:06:08.790 --> 00:06:09.483
Makes sense?

97
00:06:09.483 --> 00:06:11.504
And just to prove my point as well,

98
00:06:11.504 --> 00:06:15.170
I'm pretty sure if I just say
natural left join as well.

99
00:06:15.170 --> 00:06:16.820
It's actually not going
to change anything.

100
00:06:19.120 --> 00:06:24.601
Because the inner join in the left join in
this particular case we're gonna end up

101
00:06:24.601 --> 00:06:29.940
being the same thing now, I don't think
right join will work but let me check.

102
00:06:32.140 --> 00:06:32.830
I guess it would.

103
00:06:33.850 --> 00:06:39.872
Yeah it would because nothing would
ever be out of the If you look at this,

104
00:06:39.872 --> 00:06:43.540
everything's gonna end up being the same.

105
00:06:43.540 --> 00:06:45.570
I mean,
I guess we could do full outer join.

106
00:06:47.290 --> 00:06:47.790
No it wouldn't.

107
00:06:49.040 --> 00:06:50.720
Wait, hold on, actually it would.

108
00:06:53.520 --> 00:06:56.260
You can see that this stuff I
have to really think about it.

109
00:06:58.170 --> 00:07:02.666
This one still needs full outer and
natural, full outer join.

110
00:07:07.132 --> 00:07:10.804
Yeah, it actually doesn't have working so
you can do a full up, so in every one of

111
00:07:10.804 --> 00:07:14.530
these cases because everything is included
in the set every single time because of

112
00:07:14.530 --> 00:07:18.275
our foreign key constraints, you can
actually do any joint here and it'll work.

113
00:07:18.275 --> 00:07:21.750
I don't know why I decided to discover
this in front of you all right now, but

114
00:07:21.750 --> 00:07:23.830
it was a fun journey of
that you can graduate.

115
00:07:23.830 --> 00:07:24.800
Went on me with.

116
00:07:27.260 --> 00:07:29.963
Suffice to say if everything
is included in the set and

117
00:07:29.963 --> 00:07:33.980
on your joins it doesn't matter
which join you're gonna choose.

118
00:07:33.980 --> 00:07:37.743
What matters is when you have things
that are gonna match in one table and

119
00:07:37.743 --> 00:07:38.695
not in the other.

120
00:07:38.695 --> 00:07:41.020
And some of them will and
some of them won't.

121
00:07:41.020 --> 00:07:43.600
Then it matters is what
kind of join you choose.

122
00:07:45.880 --> 00:07:48.790
In that situation,
choose INNER JOIN, just so you know.

123
00:07:48.790 --> 00:07:50.360
So that's what natural join does.

124
00:07:50.360 --> 00:07:53.632
That was kind of be my original point
natural join just like if you named

125
00:07:53.632 --> 00:07:57.516
everything the same so user ID is called
user ID consistently throughout our tables

126
00:07:57.516 --> 00:07:59.470
natural join, we'll just match setup.

