WEBVTT

1
00:00:00.340 --> 00:00:06.060
So, we've now put one
document into our collection.

2
00:00:06.060 --> 00:00:06.680
Let's get it out.

3
00:00:07.740 --> 00:00:14.170
So if I say DB dot pets, and
then I say find one, just like that.

4
00:00:14.170 --> 00:00:17.030
There's only one document in the database.

5
00:00:17.030 --> 00:00:20.076
So or in the collection, so
it'll get that one right So

6
00:00:20.076 --> 00:00:24.248
I just gave it an empty query because I
knew it's going to find something and

7
00:00:24.248 --> 00:00:28.060
that something is going to be
literally the only one there.

8
00:00:28.060 --> 00:00:30.430
So that's why that one ends up working.

9
00:00:30.430 --> 00:00:32.230
But here you can provide
it with a query object.

10
00:00:32.230 --> 00:00:37.276
So in this particular case,
I could say, type dog, and it would

11
00:00:37.276 --> 00:00:43.640
find the first item in the database that
matched Typed dog which would also work.

12
00:00:44.910 --> 00:00:46.364
But if I said type cat here,

13
00:00:46.364 --> 00:00:50.750
it's not gonna find anything because we
don't have any cats in our database yet.

14
00:00:54.190 --> 00:00:57.764
So find one is gonna it's gonna go
into your database, it's gonna try and

15
00:00:57.764 --> 00:01:01.398
find the first thing that it can find
that matches that particular query and

16
00:01:01.398 --> 00:01:03.060
then it will return that.

17
00:01:03.060 --> 00:01:04.350
Even if you have 100 things in there.

18
00:01:04.350 --> 00:01:05.512
It's just going to ignore them.

19
00:01:05.512 --> 00:01:09.721
If you want to find all of
them Do you just do find, and

20
00:01:09.721 --> 00:01:13.500
this is going to give you an iterator.

21
00:01:13.500 --> 00:01:15.130
We'll talk about iterators
here in a second.

22
00:01:15.130 --> 00:01:18.330
But it's going to give you an iterator
to iterate all over all those.

23
00:01:18.330 --> 00:01:21.177
In this particular case,
there's only one to iterate over so

24
00:01:21.177 --> 00:01:23.270
it doesn't do anything special about that.

25
00:01:23.270 --> 00:01:25.970
It just returns out to you.

26
00:01:25.970 --> 00:01:31.190
But notice here, this underscore ID thing,
this is the one that

27
00:01:31.190 --> 00:01:36.650
MongoDB creates for you so
that's it's hash of what its ideas.

28
00:01:36.650 --> 00:01:38.160
This is guaranteed unique as well.

29
00:01:39.400 --> 00:01:40.553
Yeah, question.

30
00:01:40.553 --> 00:01:43.876
&gt;&gt; Does it always find,
the same one when you use find one or

31
00:01:43.876 --> 00:01:46.890
is it entirely random
which one it returns?

32
00:01:46.890 --> 00:01:50.235
&gt;&gt; He asked, does it always find,
the same one

33
00:01:50.235 --> 00:01:52.316
&gt;&gt; Was it just find a random one,

34
00:01:52.316 --> 00:01:56.515
it will find the same one but
never depend on that behavior.

35
00:01:56.515 --> 00:02:00.262
[LAUGH] That's a bad idea for you to
just assume that it's always gonna find

36
00:02:00.262 --> 00:02:03.829
the same one, because if someone
starts inserting, or updating, or

37
00:02:03.829 --> 00:02:06.800
deleting things,
you can change which one is gonna find.

38
00:02:06.800 --> 00:02:11.764
I believe it's gonna be the last one
either So it's going to be the first

39
00:02:11.764 --> 00:02:17.590
one created or last one modified and
I don't remember which one it is.

40
00:02:17.590 --> 00:02:20.840
Suffice to say, though it's not it's
not a behavior you want to depend on.

41
00:02:21.900 --> 00:02:25.165
So what I want to do right now is
I want to insert a lot of items

42
00:02:25.165 --> 00:02:29.100
into our database so that we can
start querying in interesting way, so

43
00:02:29.100 --> 00:02:31.320
Head back over to my course notes here.

44
00:02:32.570 --> 00:02:36.200
And you can see here I have this
long JavaScript command here.

45
00:02:36.200 --> 00:02:40.630
What this is going to do, this is going to
generate 10,000 Records in our database.

46
00:02:43.869 --> 00:02:48.410
So I mean you can see here, it's just
Creating an array of size 10,000.

47
00:02:48.410 --> 00:02:52.651
And then it's creating an object
that has various different names,

48
00:02:52.651 --> 00:02:55.880
various different types,
ages, and breeds here.

49
00:03:02.885 --> 00:03:05.843
So if you come over here,
paste that in here, hit enter.

50
00:03:05.843 --> 00:03:09.965
You'll see here that it gives you a back a
lot of object IDs because we just inserted

51
00:03:09.965 --> 00:03:12.015
10,000 items into our database.

52
00:03:17.175 --> 00:03:19.135
We can talk a second about that.

53
00:03:19.135 --> 00:03:20.120
Insert many.

54
00:03:20.120 --> 00:03:23.274
I mean, this is not shouldn't
be anything surprising to you,

55
00:03:23.274 --> 00:03:25.536
but you give an array
of JavaScript objects,

56
00:03:25.536 --> 00:03:29.120
and it inserts all of those as
individual documents in our collection.

57
00:03:34.580 --> 00:03:39.969
So if we come back over here and
say DB dot pets count,

58
00:03:39.969 --> 00:03:46.350
You can see now we have 10,001
records in our database.

59
00:03:46.350 --> 00:03:50.023
We have 10,001 documents in our
collection, the correct terminology,

60
00:03:50.023 --> 00:03:51.240
it's gonna take me that.

61
00:03:52.250 --> 00:03:55.322
As you can see the, for
the most part, people use all this

62
00:03:55.322 --> 00:03:59.900
terminology interchangeably cuz
they're all roughly the same idea.

63
00:03:59.900 --> 00:04:02.010
So now I wonder if I do DB dot pet stuff.

64
00:04:02.010 --> 00:04:06.175
Find one You can see here so
I think it goes by created date so

65
00:04:06.175 --> 00:04:09.840
I think it'll find the first
item that matches it.

66
00:04:09.840 --> 00:04:12.260
And it will find the first
one that was created.

67
00:04:12.260 --> 00:04:17.134
I think is the ordering on find one But
I'm not sure it's ambiguous and you never

68
00:04:17.134 --> 00:04:22.083
want to rely on ambiguous behavior in a
that that sounds like something that would

69
00:04:22.083 --> 00:04:26.110
crash your app like two months into it and
you wouldn't know why.

70
00:04:26.110 --> 00:04:31.407
So the first one here is find one we've
still we saw this one already find one and

71
00:04:31.407 --> 00:04:36.320
we found Luna But let's do some other
kind of interesting queries here.

72
00:04:37.850 --> 00:04:43.500
So let's say we wanted to find
one of index, you know, 1337.

73
00:04:43.500 --> 00:04:47.740
This object here is kind of
it's your query object, right?

74
00:04:47.740 --> 00:04:51.630
This you can use this to kind of filter
in various different in interesting ways.

75
00:04:51.630 --> 00:04:57.069
So this returned a cat that's
a havanese named Beethoven,

76
00:04:57.069 --> 00:05:01.870
interesting,You can put
multiple things in here.

77
00:05:01.870 --> 00:05:06.930
So let's say we wanted to find a dog,
a type.

78
00:05:08.980 --> 00:05:11.865
Dog, and that was of age 9,

79
00:05:11.865 --> 00:05:17.290
right?So it's going to match all of those,
right?

80
00:05:17.290 --> 00:05:18.790
So this is h9n2 dog.

81
00:05:18.790 --> 00:05:20.840
You can see it's index eight.

82
00:05:20.840 --> 00:05:22.200
So that one return.

83
00:05:22.200 --> 00:05:25.330
That was one of the first ones that
was inserted into the database.

84
00:05:25.330 --> 00:05:27.820
You might ask,
why do we have this index thing?

85
00:05:27.820 --> 00:05:29.250
We don't actually technically need this.

86
00:05:29.250 --> 00:05:31.120
In fact,
I would even tell you not to do it.

87
00:05:31.120 --> 00:05:32.463
But we're going to be
doing some indexing later.

88
00:05:32.463 --> 00:05:34.858
And I wanted to have a something
unique to index on so

89
00:05:34.858 --> 00:05:37.180
that's why that index is there.

90
00:05:37.180 --> 00:05:38.350
And then let's do fine.

91
00:05:38.350 --> 00:05:42.070
So let's say we wanted to
find all dogs of age nine.

92
00:05:42.070 --> 00:05:43.420
So I'm just going to release that.

93
00:05:43.420 --> 00:05:47.310
So it's DB dot pet stuff,
find type dog age nine.

94
00:05:47.310 --> 00:05:50.170
And you can see here we got quite a few.

95
00:05:53.140 --> 00:05:55.460
In fact, I think this is 20.

96
00:05:55.460 --> 00:05:59.000
So we got 20 different dogs
here a bit of age nine.

97
00:05:59.000 --> 00:06:01.260
It doesn't actually return
all those to you at once.

98
00:06:01.260 --> 00:06:05.881
So if I want to have multiple of these
return, or I want to get more of them,

99
00:06:05.881 --> 00:06:08.650
you can see here says type it for more.

100
00:06:08.650 --> 00:06:10.560
It stands for iterate.

101
00:06:10.560 --> 00:06:14.550
So if I type it's going to give me more
and more and more and more and more.

102
00:06:14.550 --> 00:06:17.660
So it's going to start iterating
all over these results.

103
00:06:17.660 --> 00:06:22.101
It only gives you 20 of them at a time
because it assumes Most people don't want

104
00:06:22.101 --> 00:06:23.910
a 1000 records all at once.

105
00:06:23.910 --> 00:06:27.495
If you wanted to find out how
many of these actually matched,

106
00:06:27.495 --> 00:06:29.548
you can come in here and say count.

107
00:06:29.548 --> 00:06:34.870
So if I do that actually
278 pets match that query.

108
00:06:34.870 --> 00:06:39.098
So we have 278 dogs that are of age nine.

109
00:06:39.098 --> 00:06:42.848
Out of 10,000 records in our database,

110
00:06:42.848 --> 00:06:47.420
out of our 10,000 documents
in our collection.

111
00:06:47.420 --> 00:06:48.890
That's this is going to be a pattern.

112
00:06:48.890 --> 00:06:52.182
And I'm very sorry about that, but

113
00:06:52.182 --> 00:06:57.470
that's good to know about it
that's actually going to.

114
00:06:57.470 --> 00:07:00.482
That's how you iterate all these
over these various different things.

115
00:07:00.482 --> 00:07:03.620
And you can change how many gives
to you at this at one time,

116
00:07:03.620 --> 00:07:07.401
you can change if it gives you five
records at a time or five documents or

117
00:07:07.401 --> 00:07:11.380
100 documents at a time you can
tell to you do all of them.

118
00:07:11.380 --> 00:07:13.210
In fact, I'll show you how to
do that here in just a second.

119
00:07:13.210 --> 00:07:16.774
Let's say that you wanted to You
wanted to get a typed doc and

120
00:07:16.774 --> 00:07:19.850
you only wanted to get
like the first 40 records.

121
00:07:19.850 --> 00:07:22.378
I can imagine you're implementing
search for like a pet adoption website.

122
00:07:22.378 --> 00:07:26.470
You could say give me only the first,

123
00:07:26.470 --> 00:07:32.413
40 records 40 documents
in the collection here,

124
00:07:32.413 --> 00:07:36.000
limit 40 That's count.

125
00:07:36.000 --> 00:07:40.135
Yeah, sorry, find.

126
00:07:40.135 --> 00:07:41.514
So now if I do IT again,

127
00:07:41.514 --> 00:07:46.175
notice it's actually done now
it's not actually asking me for.

128
00:07:46.175 --> 00:07:48.055
So you type it for more.

129
00:07:48.055 --> 00:07:48.595
Now it's done.

130
00:07:48.595 --> 00:07:52.310
If I say IT, it says there's no
cursor which basically means.

131
00:07:52.310 --> 00:07:56.243
You have all of them that you needed,
or to demonstrate that again,

132
00:07:56.243 --> 00:08:01.080
if I just say five, notice it's only going
to give me five objects in the database.

133
00:08:06.490 --> 00:08:06.990
Make sense?

134
00:08:08.190 --> 00:08:10.440
So that's what that limit is used for.

135
00:08:12.913 --> 00:08:18.060
Now let's say I wanted to get 40 but
I wanted to get them all at once.

136
00:08:18.060 --> 00:08:19.308
I don't want to have to wait.

137
00:08:19.308 --> 00:08:24.860
You can say.to array like this.

138
00:08:24.860 --> 00:08:27.825
And now this will give me all
40 at the same time in an array,

139
00:08:27.825 --> 00:08:31.850
That's actually you know, formats that
a little bit nicer so it's easy to read.

140
00:08:31.850 --> 00:08:34.080
But that's what the two array does.

141
00:08:34.080 --> 00:08:38.700
So if you say, give me all 278 of those
dogs that we were acquiring before and

142
00:08:38.700 --> 00:08:41.860
you said to array,
it will give you all 278 right?

143
00:08:41.860 --> 00:08:44.060
It won't give you a cursor back.

144
00:08:44.060 --> 00:08:49.604
It'll give you everything So that can be
expensive, especially if you're sending

145
00:08:49.604 --> 00:08:56.040
down to every single user 500 Records in
your 500 documents in your collection.

146
00:08:56.040 --> 00:08:57.790
That could end up being
a pretty expensive query.

147
00:08:57.790 --> 00:09:01.628
And I guess that kind of
bears mentioning right now,

148
00:09:01.628 --> 00:09:06.690
a lot of the things that I'm telling
you a lot of the tips and tricks and

149
00:09:06.690 --> 00:09:12.201
All that kind of stuff is based on
keeping your database healthy and cheap.

150
00:09:12.201 --> 00:09:16.420
It's because databases are almost
always the most expensive part of your

151
00:09:16.420 --> 00:09:19.754
application, at least like at
the companies I worked at,

152
00:09:19.754 --> 00:09:24.518
foreign above our biggest cloud costs,
were interacting with our databases and so

153
00:09:24.518 --> 00:09:28.150
a lot of these techniques
are designed to keep your costs down.

154
00:09:29.640 --> 00:09:34.895
Like when I was working at Reddit I think
our hosting cost versus our database cost,

155
00:09:34.895 --> 00:09:39.774
I think our database costs was almost
10 X, our hosting costs and that's,

156
00:09:39.774 --> 00:09:41.670
that's not super atypical.

157
00:09:45.220 --> 00:09:49.480
So that's why I talk a lot about
cost a lot about reliability.

158
00:09:49.480 --> 00:09:52.152
Those are the kinda things that when
you're thinking about databases,

159
00:09:52.152 --> 00:09:53.524
that's what you wanna think about.

160
00:09:53.524 --> 00:09:55.741
What if we wanna query by age and

161
00:09:55.741 --> 00:10:00.190
we want to find all of the senior
cats in our database, right?

162
00:10:00.190 --> 00:10:03.110
So let's say cats older than 12th.

163
00:10:03.110 --> 00:10:08.230
Well, you can say db.pet start count.

164
00:10:08.230 --> 00:10:12.595
Cause we're just going to figure out how
many of them we have you gonna say type

165
00:10:12.595 --> 00:10:17.640
cat, and then you're going to say age and
they're going to give age an object.

166
00:10:17.640 --> 00:10:18.989
Okay.
And so you're gonna have.

167
00:10:20.140 --> 00:10:24.863
Age is going to be greater than, so dollar
sign GT that means greater than, and

168
00:10:24.863 --> 00:10:26.950
we want it to be greater than 12.

169
00:10:26.950 --> 00:10:31.484
So you can actually kind of provide these
little sub query objects to Mongo DB, and

170
00:10:31.484 --> 00:10:33.270
it knows how to interpret that.

171
00:10:34.290 --> 00:10:38.740
So you can see here in our database,
we have 833 cats.

172
00:10:38.740 --> 00:10:42.910
That are of age older than, like greater
than that's what the GT stands for.

173
00:10:42.910 --> 00:10:48.300
12 If you want to do greater than or
equal to, you just add an E on there.

174
00:10:48.300 --> 00:10:50.640
And lo and behold,
we added a couple more so

175
00:10:50.640 --> 00:10:53.825
now there's no 1100 if you
include the age of 12, so

176
00:10:53.825 --> 00:10:58.740
there's a bunch of them there's greater
than, greater than or equal to less than.

177
00:10:58.740 --> 00:11:02.670
So LTE is less than or equal to theirs.

178
00:11:02.670 --> 00:11:08.070
If you really want it to be verbose
about something EQ does equals write.

179
00:11:09.960 --> 00:11:14.033
In reality, that's the same as just
putting, you know, 12 there, but sometimes

180
00:11:14.033 --> 00:11:18.710
that is actually required that you'll need
that fact I think we'll need it later.

181
00:11:18.710 --> 00:11:23.641
If you wanted to find out how many cats
are not aged 12 you can put not equals And

182
00:11:23.641 --> 00:11:27.299
you can see here, we have a lot
of cats that are of type cat,

183
00:11:27.299 --> 00:11:29.380
that are not 12 years old.

184
00:11:29.380 --> 00:11:34.230
And then you can also
give a raise to MongoDB.

185
00:11:34.230 --> 00:11:37.436
So if I wanted to have like
I don't know maybe breeds,

186
00:11:37.436 --> 00:11:41.783
it was an array of breeds right so that
could be a a mix between a pitbull and

187
00:11:41.783 --> 00:11:44.670
a terrier or something like that.

188
00:11:44.670 --> 00:11:47.888
You can use in to query
inside of arrays or

189
00:11:47.888 --> 00:11:52.730
you can put not in to not declare
if something is not an array.

190
00:11:52.730 --> 00:11:56.650
So there's a bunch of things you
can do around arrays and objects.

191
00:11:56.650 --> 00:11:59.210
These are called Query operators.

192
00:12:01.350 --> 00:12:02.820
I find myself using these quite a bit.

193
00:12:03.950 --> 00:12:09.754
Specifically like the greater than or
the you know less than like that.

194
00:12:10.775 --> 00:12:15.624
Yeah, so
like here's this is actually good let's

195
00:12:15.624 --> 00:12:20.356
do this one if you do DB dot
pets let's say we want to

196
00:12:20.356 --> 00:12:24.754
find everything named
Fido that's not a dog so

197
00:12:24.754 --> 00:12:30.170
you can do DB dot pets dot
find anyone to be a name.

198
00:12:30.170 --> 00:12:35.903
Fido and you want the type

199
00:12:35.903 --> 00:12:40.546
to be not equal to doc

200
00:12:45.754 --> 00:12:48.714
I did find but let's just to count so

201
00:12:48.714 --> 00:12:54.353
you can see we have 834 pets that
are named Fido that are not a dog.

