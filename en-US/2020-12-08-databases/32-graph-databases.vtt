WEBVTT

1
00:00:00.610 --> 00:00:04.404
So the two things I've shown you so
far MongoDB and

2
00:00:04.404 --> 00:00:09.350
Postgre are very general
purpose kinds of databases.

3
00:00:09.350 --> 00:00:14.254
As in like, if you're gonna be writing
a new app tomorrow there's decent

4
00:00:14.254 --> 00:00:17.666
chance you're gonna use one of these too,
right?

5
00:00:17.666 --> 00:00:20.190
They're meant to be very flexible.

6
00:00:20.190 --> 00:00:23.458
They're meant to fit
nearly every use case,

7
00:00:23.458 --> 00:00:26.900
they're obviously very powerful databases.

8
00:00:27.910 --> 00:00:30.400
We're gonna get into one that's
a more specialized use case.

9
00:00:30.400 --> 00:00:34.984
So you're not gonna use a graph database
for your everyday e-commerce website,

10
00:00:34.984 --> 00:00:36.040
for example.

11
00:00:36.040 --> 00:00:41.310
You're gonna be using it probably in
conjunction with another database.

12
00:00:41.310 --> 00:00:46.040
You're gonna be using graph databases
with another database for the most part.

13
00:00:46.040 --> 00:00:50.721
So graph databases are more niche, they're
more intended to solve a specific problem

14
00:00:50.721 --> 00:00:53.364
and less meant to be general-purpose,
right?

15
00:00:53.364 --> 00:00:56.260
This is not meant to power
your e-commerce website.

16
00:00:57.710 --> 00:01:02.528
So the example that we're gonna use today
is kind of the classic graph database

17
00:01:02.528 --> 00:01:06.400
kind of example problem,
which is movies and actors, right?

18
00:01:07.590 --> 00:01:09.439
And we'll kind of get into how that works.

19
00:01:11.939 --> 00:01:15.160
So, let's get into some
of the terminologies.

20
00:01:15.160 --> 00:01:18.472
Again, this is one of those things where
I use the terms interchangeably, and I'm

21
00:01:18.472 --> 00:01:21.750
very sorry about it, but it's also just
kind of how this is organized in my brain.

22
00:01:21.750 --> 00:01:25.255
And it's probably useful for you to hear
all the terminologies mixed together cuz

23
00:01:25.255 --> 00:01:27.350
that's kind of how it ends up working.

24
00:01:27.350 --> 00:01:32.280
So the first thing we'll talk about in
a graph database is a node or an entity.

25
00:01:32.280 --> 00:01:35.516
The correct term for Neo4j, which is
the name of the graph database that we're

26
00:01:35.516 --> 00:01:36.963
gonna be looking at today is a node,

27
00:01:36.963 --> 00:01:39.820
but sometimes you might
hear me call it an entity.

28
00:01:39.820 --> 00:01:41.300
A node is just a thing.

29
00:01:41.300 --> 00:01:44.420
It's basically a row or
a document in a graph database.

30
00:01:45.470 --> 00:01:48.790
It, yeah represents a thing.

31
00:01:48.790 --> 00:01:52.009
So in our case, if we're looking
at movies and people, right,

32
00:01:52.009 --> 00:01:56.290
those are gonna be the two different
kinds of nodes that we're gonna have.

33
00:01:56.290 --> 00:01:59.170
Those are both going to be
considered nodes, right?

34
00:01:59.170 --> 00:02:03.100
There's gonna be a person node,
and there's gonna be a movie node.

35
00:02:03.100 --> 00:02:07.545
Something that's peculiar to Neo4j
is one node can actually be multiple

36
00:02:07.545 --> 00:02:08.770
different things.

37
00:02:09.790 --> 00:02:15.380
So let's say instead of having just
a person label as they're called,

38
00:02:15.380 --> 00:02:22.640
you can have one person be both an actor
label, or actress label or director label.

39
00:02:22.640 --> 00:02:25.110
I node can have multiple
different kinds of labels.

40
00:02:25.110 --> 00:02:26.826
In this particular case,

41
00:02:26.826 --> 00:02:31.977
the only two labels that we're gonna
be looking at today are persons, right?

42
00:02:31.977 --> 00:02:36.425
Which will represent both actor,
actresses and directors.

43
00:02:36.425 --> 00:02:38.329
But you could also have a label for

44
00:02:38.329 --> 00:02:42.615
each one of those depending on kind of
how you choose to solve that problem.

45
00:02:42.615 --> 00:02:46.205
And then, the other label will be a movie,
and a movie is kind of a thing, right?

46
00:02:47.595 --> 00:02:54.800
So you can think of nodes as documents or
rows in a graph database.

47
00:02:54.800 --> 00:02:57.932
Now the interesting thing and
where graph databases really kind

48
00:02:57.932 --> 00:03:01.183
of get their power is they have
this things called relationships.

49
00:03:01.183 --> 00:03:03.650
Or frequently these
are called edges as well.

50
00:03:03.650 --> 00:03:07.370
The correct term for
Neo4j is relationship.

51
00:03:07.370 --> 00:03:11.606
And it just describes this node is
related to this other node, and

52
00:03:11.606 --> 00:03:16.780
we're gonna draw some sort of connecting
line between the two of those things.

53
00:03:18.000 --> 00:03:20.639
And we'll kind of visualize
this here in just a second.

54
00:03:21.650 --> 00:03:27.083
That's the power of graph databases,
is you can describe this kind of graph,

55
00:03:27.083 --> 00:03:31.860
like a web of relationships
between different things.

56
00:03:31.860 --> 00:03:34.260
A really good use case for
graph databases, and

57
00:03:34.260 --> 00:03:38.620
probably where they really got pushed
forward a lot, is social networks, right?

58
00:03:38.620 --> 00:03:41.756
So you can imagine like on LinkedIn,
you're connected to this person, this

59
00:03:41.756 --> 00:03:45.390
person is connected to that person and
that person is connected to that person.

60
00:03:45.390 --> 00:03:47.815
And that's how LinkedIn
knows how to recommend.

61
00:03:47.815 --> 00:03:51.431
Is like, hey, you probably know this
person because you know these 10

62
00:03:51.431 --> 00:03:55.658
people and they all know this person and
they're connected to them and you're not.

63
00:03:55.658 --> 00:03:59.214
Decent chance that as so many people
in your network know this person,

64
00:03:59.214 --> 00:04:01.640
you also probably know that person.

65
00:04:01.640 --> 00:04:04.840
So that's where these kind of
interesting insights of connections can

66
00:04:04.840 --> 00:04:06.290
kind of lead to these insights.

67
00:04:08.280 --> 00:04:10.430
Yeah, using these relationships.

68
00:04:10.430 --> 00:04:11.827
One thing about Neo4j,

69
00:04:11.827 --> 00:04:17.320
that's again kind of peculiar to Neo4j is
every relationship is directional, right?

70
00:04:17.320 --> 00:04:22.470
So it's not that just, well, let's
use an example from a social network.

71
00:04:22.470 --> 00:04:25.918
On Facebook when you are connected
to someone, you're both friends.

72
00:04:25.918 --> 00:04:29.333
Like you can't be connect to someone
you both have to acknowledge

73
00:04:29.333 --> 00:04:30.460
we are both friends.

74
00:04:31.490 --> 00:04:33.950
That relationship has no direction, right?

75
00:04:33.950 --> 00:04:36.967
I'm friends with Mark,
Mark is friends with me, and

76
00:04:36.967 --> 00:04:39.080
we can't have that be one way.

77
00:04:39.080 --> 00:04:40.830
Compare that to something like Twitter.

78
00:04:40.830 --> 00:04:42.996
If I follow Ayesha, right?

79
00:04:42.996 --> 00:04:45.970
She doesn't necessarily
have to follow me back.

80
00:04:45.970 --> 00:04:48.350
That's a directional relationship.

81
00:04:48.350 --> 00:04:54.830
So in Neo4j, all of these relationships
have directions associated with them.

82
00:04:56.080 --> 00:04:59.688
And sometimes you can just ignore these
directions if you don't really care about

83
00:04:59.688 --> 00:05:03.190
them, but every relationship
is going to have a direction.

84
00:05:03.190 --> 00:05:06.763
So in this particular case, if we were
describing the relationship between me and

85
00:05:06.763 --> 00:05:09.013
Ayesha on Twitter, and
we both follow each other.

86
00:05:09.013 --> 00:05:11.390
We would actually need two
different relationships.

87
00:05:11.390 --> 00:05:17.296
One, from me to her and one from her to
me to fully describe that relationship.

88
00:05:17.296 --> 00:05:21.691
Whereas in Facebook,
you just need one relationship because

89
00:05:21.691 --> 00:05:25.670
there's only one way that
relationship can go, cool.

90
00:05:28.340 --> 00:05:31.052
So, there's things called properties or
attributes,

91
00:05:31.052 --> 00:05:32.748
I probably will mix up those terms.

92
00:05:32.748 --> 00:05:35.828
Cuz they're relatively similar,
but in this particular case,

93
00:05:35.828 --> 00:05:37.460
they're gonna be the same thing.

94
00:05:37.460 --> 00:05:44.080
Every relationship and every node can have
properties associated with them, right?

95
00:05:44.080 --> 00:05:47.435
So, for example for
talking about like an actress,

96
00:05:47.435 --> 00:05:51.340
like we have Charlize Theron or
something like that.

97
00:05:51.340 --> 00:05:52.710
She can have a birthday.

98
00:05:52.710 --> 00:05:55.903
She can have,
I don't know hair color, eye color,

99
00:05:55.903 --> 00:06:00.490
those kinds of those will be
attributes of that particular node.

100
00:06:00.490 --> 00:06:02.120
And then a relationship
can also have a node.

101
00:06:02.120 --> 00:06:05.600
You can also have if Charlize Theron
acted in Arrested Development,

102
00:06:05.600 --> 00:06:07.580
that's what I'm watching right now.

103
00:06:07.580 --> 00:06:09.520
That's why it's top of mind.

104
00:06:10.750 --> 00:06:13.090
It can have like the role
that she played in it.

105
00:06:13.090 --> 00:06:14.750
It can have the year that that happened.

106
00:06:14.750 --> 00:06:17.503
It can have the episodes that she was in,
right?

107
00:06:17.503 --> 00:06:21.690
So those are kind of the attributes
that a relationship can have as well.

108
00:06:21.690 --> 00:06:24.580
So both entities and

109
00:06:24.580 --> 00:06:31.070
relationships can both have properties.

110
00:06:31.070 --> 00:06:34.407
So that's kind of the high level
terminology of what goes into a graph

111
00:06:34.407 --> 00:06:34.990
database.

112
00:06:34.990 --> 00:06:38.213
We'll start kind of getting into it,
and using them and

113
00:06:38.213 --> 00:06:40.590
sort of become a bit more concrete.

114
00:06:40.590 --> 00:06:44.110
We're gonna be using Neo4j,
that's kind of like the de facto.

115
00:06:44.110 --> 00:06:46.222
If you're gonna use an open
source graph database,

116
00:06:46.222 --> 00:06:50.590
it's kind of one that people reach for the
most or at least it's the most well known.

117
00:06:50.590 --> 00:06:54.509
There are other ones,
there are other graph databases,

118
00:06:54.509 --> 00:06:59.260
you can make MongoDB and Postgres
kind of acts like graph databases.

119
00:06:59.260 --> 00:07:01.870
There's a lot of different
ways to accomplish this.

120
00:07:01.870 --> 00:07:05.062
And then there's obviously,
things like again, Cosmos DB and

121
00:07:05.062 --> 00:07:08.860
some of those cloud based graph databases
that are available to you as well.

