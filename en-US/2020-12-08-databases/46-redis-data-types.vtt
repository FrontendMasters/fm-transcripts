WEBVTT

1
00:00:00.270 --> 00:00:02.410
Everything you've been looking at so
far is a string.

2
00:00:02.410 --> 00:00:07.980
Believe it or not,
even if I say, set num 5.

3
00:00:07.980 --> 00:00:12.000
And I say TYPE num.

4
00:00:12.000 --> 00:00:14.780
It says num is a string.

5
00:00:14.780 --> 00:00:18.110
It's just everything is a string in
that particular capacity in redis.

6
00:00:18.110 --> 00:00:19.900
It doesn't care about numbers.

7
00:00:19.900 --> 00:00:22.750
It really is just saying, all right,
well, that's a string too.

8
00:00:22.750 --> 00:00:23.920
It doesn't care.

9
00:00:23.920 --> 00:00:27.792
Even though you can do INCR num,
and it's like, cool,

10
00:00:27.792 --> 00:00:31.540
that's now a number, that's 6, right?

11
00:00:31.540 --> 00:00:34.490
It'll store everything as a string so
that's totally fine.

12
00:00:36.750 --> 00:00:38.073
Strings are binary safe.

13
00:00:38.073 --> 00:00:41.500
So technically,
you could put whole images in here, right?

14
00:00:41.500 --> 00:00:44.140
You could have a string, but
it's actually really a JPEG.

15
00:00:44.140 --> 00:00:45.890
It's fine.
I wouldn't recommend it.

16
00:00:45.890 --> 00:00:49.850
I'd recommend using something like
nginx for like that, but it's possible.

17
00:00:49.850 --> 00:00:54.654
If you needed to temporarily
store something in a cache,

18
00:00:54.654 --> 00:00:56.863
you could put it in Redis.

19
00:00:56.863 --> 00:01:04.400
They're also lists, ie arrays, sets,
sorted sets, hashes, hyper log logs.

20
00:01:04.400 --> 00:01:05.940
I didn't have a stroke.

21
00:01:05.940 --> 00:01:10.730
It's that's what they're called
hyper log logs and streams.

22
00:01:12.270 --> 00:01:16.000
We're not gonna really be talking about
streams when they're brand new and I'm.

23
00:01:16.000 --> 00:01:18.660
There's not really too much that
we could talk about with them.

24
00:01:18.660 --> 00:01:21.860
And we're gonna really gloss
over what a hyper log log is.

25
00:01:21.860 --> 00:01:24.090
I just wanted to say that as
many times as I could on air.

26
00:01:27.520 --> 00:01:30.520
Okay, let's scroll down here.

27
00:01:30.520 --> 00:01:32.910
Why did this look so upset, okay.

28
00:01:34.640 --> 00:01:36.180
Let's do some lists first.

29
00:01:38.680 --> 00:01:42.624
So a great time to be using a list or
an array Redis calls them lists,

30
00:01:42.624 --> 00:01:46.020
but arrays lists,
they're the same thing relatively.

31
00:01:47.140 --> 00:01:52.620
Let's create one.

32
00:01:52.620 --> 00:01:57.990
Let's say we're doing an app and this app
does to do reminders of you or for you.

33
00:01:57.990 --> 00:01:59.830
This would be a great time to use Redis.

34
00:01:59.830 --> 00:02:03.408
Because if you accidentally drop all
their notifications on the ground,

35
00:02:03.408 --> 00:02:06.710
like you just lose all that data,
probably not the end of the world.

36
00:02:06.710 --> 00:02:07.610
You just lost some notifications.

37
00:02:07.610 --> 00:02:10.650
Applications you still have that
source of truth in the database.

38
00:02:10.650 --> 00:02:11.870
So let's use Redis for that.

39
00:02:11.870 --> 00:02:16.158
So let's say we want to remind our user B
to hold to call his mom feed the dog and

40
00:02:16.158 --> 00:02:17.880
take out the trash.

41
00:02:17.880 --> 00:02:21.410
Let's say RPUSH and

42
00:02:21.410 --> 00:02:26.602
notifications: btholt Call

43
00:02:26.602 --> 00:02:30.968
your mom, feed the dog.

44
00:02:34.936 --> 00:02:37.510
And Take out trash.

45
00:02:37.510 --> 00:02:40.322
There's a nonzero chance that my mom
is watching the stream right now and

46
00:02:40.322 --> 00:02:42.660
she's gonna like send me texts
like you better call me.

47
00:02:42.660 --> 00:02:45.708
I didn't call her this Sunday so
she's gonna be upset about that one.

48
00:02:45.708 --> 00:02:51.010
Okay, so RPUSH it's pushing on the right.

49
00:02:51.010 --> 00:02:55.740
This is kind of like you remember
queues and stacks and stuff like that.

50
00:02:55.740 --> 00:02:57.890
So you're doing like stack.push, right?.

51
00:02:57.890 --> 00:02:58.730
That's what our push does.

52
00:02:58.730 --> 00:03:01.550
It pushes on the right side or
the end of the array.

53
00:03:01.550 --> 00:03:04.600
This array doesn't exist so
it will create one on the fly for us.

54
00:03:06.020 --> 00:03:07.570
And so now it says integer 3.

55
00:03:07.570 --> 00:03:11.010
That means I successfully pushed
three things on to a brand new array.

56
00:03:12.280 --> 00:03:17.836
And I can say LRANGE
notifications: btholt,

57
00:03:17.836 --> 00:03:22.400
and this is how you do length in Redis.

58
00:03:22.400 --> 00:03:26.576
I'm gonna say start from zero and
go to the end which is what -1 is and

59
00:03:26.576 --> 00:03:30.608
this will actually give me back
everything that I have in my array at

60
00:03:30.608 --> 00:03:32.420
the moment non destructive.

61
00:03:32.420 --> 00:03:37.605
So if I do it again, it's gonna
just it's basically like get for

62
00:03:37.605 --> 00:03:39.920
the arrays and I can do -2.

63
00:03:39.920 --> 00:03:42.680
Notice that this doesn't
say take out the trash.

64
00:03:42.680 --> 00:03:45.350
Or I can say two numbers 3, right?

65
00:03:45.350 --> 00:03:48.350
And this will give me everything
it gives me to the third one.

66
00:03:48.350 --> 00:03:54.056
So -1 is the end, -2 is two from the end,
or 3 is the to the third index.

67
00:03:54.056 --> 00:03:55.839
Does that make sense.

68
00:03:57.330 --> 00:03:59.780
It's kind of a strange way of doing it,
but that's the way they architected it.

69
00:04:02.890 --> 00:04:07.843
Okay, so let's say we show
the notification take out the trash to

70
00:04:07.843 --> 00:04:11.534
our user, Brian and he's a,
busy little boy and

71
00:04:11.534 --> 00:04:16.510
actually does the things that
the notifications tells him to do.

72
00:04:16.510 --> 00:04:21.800
We can say RPOP notifications: btholt

73
00:04:21.800 --> 00:04:26.550
give us back take out the trash.

74
00:04:26.550 --> 00:04:31.306
But if we do LRANGE one more time
now notice that this is no longer in

75
00:04:31.306 --> 00:04:35.376
the database or in our,
in our notifications, right?

76
00:04:35.376 --> 00:04:38.390
You can pop things in and out of the list.

77
00:04:39.490 --> 00:04:42.177
As you might imagine, we were doing LPOP,

78
00:04:42.177 --> 00:04:47.269
if you wanted to do shift in JavaScript
terms, which who uses that terminology.

79
00:04:47.269 --> 00:04:50.432
But a DQ if you're using
normal terminology, or

80
00:04:50.432 --> 00:04:55.370
LPOP in this where it's going to
remove it from the front of the list.

81
00:04:55.370 --> 00:04:59.500
So if Brian does call his mom,
we can do this.

82
00:04:59.500 --> 00:05:01.240
It'll say LPOP.

83
00:05:01.240 --> 00:05:03.313
And we can do our range again,
and now the only thing left down,

84
00:05:03.313 --> 00:05:04.110
there's feed the dog.

85
00:05:10.310 --> 00:05:15.053
You can also do LTRIM, and LTRIM, this
will actually take off multiple things in

86
00:05:15.053 --> 00:05:18.130
the array, as opposed to POP,
it's just as one.

87
00:05:18.130 --> 00:05:21.129
So, it's a tie remove multiple
things as both LTRIM, and LTRIM.

88
00:05:24.657 --> 00:05:26.760
So that's lists.

89
00:05:26.760 --> 00:05:28.070
Let's talk about hashes.

90
00:05:28.070 --> 00:05:31.729
Hashes are objects like if
you've ever worked with Python,

91
00:05:31.729 --> 00:05:34.895
they like to call things hashes or
other languages.

92
00:05:36.885 --> 00:05:39.565
So they have a thing called HMSET.

93
00:05:39.565 --> 00:05:42.885
And we're gonna say,
let's say we have a btholt: profile.

94
00:05:44.375 --> 00:05:47.635
And here you just do key value pairs.

95
00:05:47.635 --> 00:05:53.471
So my title Principal Program Manager,

96
00:05:53.471 --> 00:05:57.150
my title is too long.

97
00:05:57.150 --> 00:05:58.548
Can barely spell it.

98
00:05:58.548 --> 00:06:03.382
Company, Microsoft,

99
00:06:03.382 --> 00:06:08.699
city, Seattle, state,

100
00:06:08.699 --> 00:06:14.030
WA country, USA, okay.

101
00:06:14.030 --> 00:06:19.035
So this is all key value pair so
title will go the next thing

102
00:06:19.035 --> 00:06:24.679
will be the first is the key then
the value key value, key value.

103
00:06:24.679 --> 00:06:27.540
And now, I can say HGET like this.

104
00:06:27.540 --> 00:06:29.880
And then, I can say btholt:profile.

105
00:06:29.880 --> 00:06:33.640
So, I have to reference
wherever that hash is.

106
00:06:33.640 --> 00:06:35.790
And then, I just asked for
whatever I need.

107
00:06:35.790 --> 00:06:38.690
Let's say,
I wanna know what city Brian lives in?

108
00:06:38.690 --> 00:06:42.160
I can say city and
this will give me back Seattle.

109
00:06:45.210 --> 00:06:47.090
So it's all relatively straightforward.

110
00:06:47.090 --> 00:06:51.620
It's the same thing there's HGETs
there's HSETs, there's HINKERs.

111
00:06:51.620 --> 00:06:56.919
So all of these commands I've been
showing you have hash equivalent.

112
00:06:56.919 --> 00:07:00.703
And then if you wanna do
HGETALL btholt: profile,

113
00:07:00.703 --> 00:07:06.755
you'll see that it'll give you everything
back in key value pairs, right?

114
00:07:06.755 --> 00:07:11.305
title Principal Program Manager company,
Microsoft city Seattle.

115
00:07:11.305 --> 00:07:17.303
It comes back as an array,
Or a list in this, as it is.

116
00:07:17.303 --> 00:07:23.140
Cool, good so far, there's a bunch
more commands that you can do.

117
00:07:23.140 --> 00:07:24.042
I'm not going to show you all

118
00:07:24.042 --> 00:07:26.430
of them because they're
relatively copies of each other.

119
00:07:26.430 --> 00:07:28.852
But I left a link there
in the course notes for

120
00:07:28.852 --> 00:07:31.550
you to see what all
the different hash commands.

121
00:07:35.180 --> 00:07:40.850
Okay, sets in sorted sets,
a set is just a group of things right?

122
00:07:40.850 --> 00:07:44.330
So let's say I had a thing called colors.

123
00:07:44.330 --> 00:07:48.110
So I can do set add or
SADD as I like to say.

124
00:07:48.110 --> 00:07:50.390
I would like to SADD colors.

125
00:07:50.390 --> 00:07:56.489
And you can just say red, blue, yellow,

126
00:07:56.489 --> 00:08:02.259
green, black, pink, brown, okay.

127
00:08:02.259 --> 00:08:08.160
And I just added 7 colors to the,
color set.

128
00:08:09.290 --> 00:08:14.655
And then you can do things like SISMEMBER,
colors green.

129
00:08:14.655 --> 00:08:19.338
And it's gonna say, yes,
I do know green, but

130
00:08:19.338 --> 00:08:22.510
I can say is dog member of color.

131
00:08:22.510 --> 00:08:24.349
And it'll say, no,
dog is not member of colors.

132
00:08:26.200 --> 00:08:29.536
If I wanna see all of the members of it,
I can just say SMEMBERS colors and

133
00:08:29.536 --> 00:08:31.940
this will give me everything
that I have in the set.

134
00:08:34.130 --> 00:08:38.760
And I can say SPOP colors and it's just
gonna give me black a random color.

135
00:08:38.760 --> 00:08:39.940
So in this case I got brown black.

136
00:08:40.940 --> 00:08:42.760
I don't know if it's necessarily
the last one you added.

137
00:08:44.100 --> 00:08:46.750
Nope, it's not because I
added black then pink.

138
00:08:48.570 --> 00:08:52.030
So it just gives you back a random color.

139
00:08:52.030 --> 00:08:55.167
And that's basically what sets are is
you can just keep a bunch of random

140
00:08:55.167 --> 00:08:55.960
things in there.

141
00:08:57.790 --> 00:09:01.691
Like, I wouldn't necessarily like keep
every user's email address in there but

142
00:09:01.691 --> 00:09:05.363
you I guess potentially could say like,
well, if you're a part of this set,

143
00:09:05.363 --> 00:09:07.530
then I can't let you do
something like that.

144
00:09:07.530 --> 00:09:11.470
So it'd be good for like a allow
list banlist kind of scenarios.

145
00:09:12.640 --> 00:09:15.210
So yeah, that would work for that.

146
00:09:15.210 --> 00:09:16.880
sorted sets are relatively similar.

147
00:09:20.070 --> 00:09:24.072
Instead of doing SADD and S members,

148
00:09:24.072 --> 00:09:28.340
you can do ZADD and Z is now a sorted set.

149
00:09:29.380 --> 00:09:30.755
So let's do ordinals.

150
00:09:30.755 --> 00:09:35.724
And it's kind of like a priority queue
if you're familiar with those that you

151
00:09:35.724 --> 00:09:38.565
give something a priority or
like a number.

152
00:09:39.675 --> 00:09:45.162
And if you ask for a back, it'll give you
back at that those things in that order.

153
00:09:45.162 --> 00:09:47.705
So let's just look at an example that.

154
00:09:47.705 --> 00:09:50.335
So if I add with a priority of 3 third.

155
00:09:50.335 --> 00:09:55.057
So key here is the third and
this is the priority and

156
00:09:55.057 --> 00:09:59.680
ordinals is the name of the set of things,
okay.

157
00:09:59.680 --> 00:10:06.460
And then I say ZADD ordinals or
the ordinals as an ordinal number numbers.

158
00:10:06.460 --> 00:10:07.680
That's why I use the term ordinal.

159
00:10:09.000 --> 00:10:13.399
One first ZADD ordinals.

160
00:10:16.192 --> 00:10:21.728
2 second ZADD ordinals 10 tenth and

161
00:10:21.728 --> 00:10:26.020
then I came back and said.

162
00:10:26.020 --> 00:10:31.900
ZRANGE just like we do with lists
ordinals and gives me all of them.

163
00:10:31.900 --> 00:10:35.050
Sorry, like that.

164
00:10:35.050 --> 00:10:37.524
Notice it actually gives them
despite the fact that third,

165
00:10:37.524 --> 00:10:40.591
first second tenth it actually gives
them back to me in the correct order,

166
00:10:40.591 --> 00:10:42.090
because of these numbers, right?

167
00:10:42.090 --> 00:10:43.390
So it's a sorted set.

168
00:10:44.940 --> 00:10:46.490
That makes sense.

169
00:10:46.490 --> 00:10:48.840
I'm not entirely sure
when I would use this.

170
00:10:48.840 --> 00:10:52.510
I guess if I was implementing
a priority queue,

171
00:10:52.510 --> 00:10:58.370
this would be a good way to
implement a priority queue on Redis.

172
00:10:58.370 --> 00:10:59.193
So maybe if I,

173
00:10:59.193 --> 00:11:03.600
like I was using Redis to order print jobs
Might be a good way to do it that way.

174
00:11:03.600 --> 00:11:05.763
I don't know why I would use
Redis to order print jobs, but

175
00:11:05.763 --> 00:11:06.880
that's what came to my mind.

176
00:11:09.190 --> 00:11:10.560
Ordering network traffic.

177
00:11:10.560 --> 00:11:12.410
That would be another good reason.

178
00:11:12.410 --> 00:11:15.125
Any reason you'd use a priority queue
this is a way that you could do that

179
00:11:15.125 --> 00:11:15.630
with Redis,

