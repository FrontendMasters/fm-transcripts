WEBVTT

1
00:00:01.020 --> 00:00:06.400
Last thing, I am far less a master of
Postgres Ops, but I just wanna talk

2
00:00:06.400 --> 00:00:11.710
a little bit about, they also have
the idea of primary and secondary.

3
00:00:11.710 --> 00:00:16.163
Where you have a primary
database that's then

4
00:00:16.163 --> 00:00:20.166
replicated out to secondary databases.

5
00:00:20.166 --> 00:00:23.774
Due to historical nature, this is
frequently called master and slave,

6
00:00:23.774 --> 00:00:26.350
this is not the preferred
terminology anymore.

7
00:00:26.350 --> 00:00:28.460
I simply inform you that,
that's what it's called.

8
00:00:28.460 --> 00:00:31.483
So that when you read old
documentation that you can map that

9
00:00:31.483 --> 00:00:34.030
to the new terminology,
primary and secondary.

10
00:00:34.030 --> 00:00:37.460
I definitely wouldn't invite
you to use that terminology.

11
00:00:38.800 --> 00:00:40.703
In fact,
if you go look through Postgres's docs,

12
00:00:40.703 --> 00:00:42.756
they've actually removed
slave everywhere from it.

13
00:00:42.756 --> 00:00:46.795
So, sometimes it's still called master,

14
00:00:46.795 --> 00:00:54.335
like Mongo this has a replication strategy
of having primaries and secondaries.

15
00:00:54.335 --> 00:01:01.161
And you can write to the primaries,
you can read from the secondaries.

16
00:01:01.161 --> 00:01:02.473
If you wannna learn more,

17
00:01:02.473 --> 00:01:06.300
I left a link in there we can go read
more about how to administrate Postgres.

18
00:01:07.650 --> 00:01:11.240
This isn't people's entire jobs, DBAs,

19
00:01:11.240 --> 00:01:15.520
database administrators or
database architects.

20
00:01:15.520 --> 00:01:18.068
So I'm not gonna do them a disservice and
try and

21
00:01:18.068 --> 00:01:22.546
explain their job when they don't truly
understand everything that goes into it.

22
00:01:22.546 --> 00:01:26.578
I think the last thing that's worth
mentioning is, we played it pretty fast

23
00:01:26.578 --> 00:01:30.170
and loose with users and
passwords and that kind of stuff.

24
00:01:30.170 --> 00:01:34.651
Don't do that in production, have one
user tied to one service so that for

25
00:01:34.651 --> 00:01:39.516
example, if you lose all the source code,
and if you lose one of the passwords.

26
00:01:39.516 --> 00:01:44.171
You can just invalidate part, like one
user, but only had access to one database

27
00:01:44.171 --> 00:01:47.807
as opposed to having to invalidate
everything, everywhere.

28
00:01:47.807 --> 00:01:52.883
It's good to have multiple users and
have the least amount of

29
00:01:52.883 --> 00:01:57.870
like right privilege as possible,
yeah, scoped access.

30
00:01:59.750 --> 00:02:03.241
And yeah, I think that's really everything
that you shouldn't have to worry about

31
00:02:03.241 --> 00:02:05.318
with Postgres from
a developer's perspective.

32
00:02:05.318 --> 00:02:07.558
For the most part,
you just need a connection string,

33
00:02:07.558 --> 00:02:09.613
that you're going to use
to connect to Postgres.

