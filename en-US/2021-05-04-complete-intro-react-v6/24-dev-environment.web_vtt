WEBVTT

1
00:00:00.110 --> 00:00:04.376
So I've got a couple kind of development
tips for you, things that I found very,

2
00:00:04.376 --> 00:00:06.720
very helpful when I'm writing react code.

3
00:00:08.820 --> 00:00:10.210
One of them that's absolutely key.

4
00:00:11.240 --> 00:00:14.830
When you're writing your code,
you want the NODE_ENV to be development.

5
00:00:15.960 --> 00:00:20.446
So when I say NODE_ENV,
let me just show you here in a terminal.

6
00:00:20.446 --> 00:00:24.888
Let me just pop up this terminal here.

7
00:00:29.799 --> 00:00:32.637
So, in bash, you don't have to
follow along with me too much.

8
00:00:32.637 --> 00:00:37.961
But if I say NODE_ENV=development

9
00:00:37.961 --> 00:00:43.808
echo NODE_ENV doesn't even say that.

10
00:00:51.898 --> 00:00:54.255
Well suffice to say what I was
trying to demonstrate to you, and

11
00:00:54.255 --> 00:00:56.090
I could write node code
that would pull this out.

12
00:00:56.090 --> 00:01:01.118
But the idea is that you can set this
environmental variable to be development,

13
00:01:01.118 --> 00:01:02.476
production, test.

14
00:01:02.476 --> 00:01:04.230
There's a bunch of things
that this can be set to.

15
00:01:08.594 --> 00:01:12.192
And it's really critical with React that
when you're in development mode that

16
00:01:12.192 --> 00:01:14.010
that NODE_ENV is set to development.

17
00:01:14.010 --> 00:01:17.207
Because all those really nice
error messages that you and

18
00:01:17.207 --> 00:01:19.745
I are getting of not
showing the correct key.

19
00:01:19.745 --> 00:01:22.510
Or your hooks are called out of order,
all that kind of stuff.

20
00:01:22.510 --> 00:01:23.785
All the instrumentation for

21
00:01:23.785 --> 00:01:27.490
that debugging code only comes when
it's a node equals development.

22
00:01:27.490 --> 00:01:31.173
Now the good news for us is Parcel sets
all this stuff for us automatically.

23
00:01:31.173 --> 00:01:33.605
You actually don't have to do anything and
Parcel will set it for you.

24
00:01:33.605 --> 00:01:37.781
But with tools like web pack and
some like less opinionated tools,

25
00:01:37.781 --> 00:01:39.806
you have to set those yourself.

26
00:01:39.806 --> 00:01:43.868
So just be very careful that
you do development when you're

27
00:01:43.868 --> 00:01:45.418
in development mode.

28
00:01:45.418 --> 00:01:47.153
And then make sure it's production
when it's going out to production.

29
00:01:47.153 --> 00:01:48.985
Because you don't want
the developments tips and

30
00:01:48.985 --> 00:01:50.649
tools because it's like four times bigger.

31
00:01:50.649 --> 00:01:55.047
So by just setting it
to NODE_ENV=production,

32
00:01:55.047 --> 00:02:00.190
as you can see here,
it's literally four times smaller.

33
00:02:02.020 --> 00:02:05.861
Slack famously made this mistake that they
were shipping the development mode in

34
00:02:05.861 --> 00:02:06.940
Slack for a long time.

35
00:02:06.940 --> 00:02:12.250
And they saw a huge speed up in Slack
just by switching it to production.

36
00:02:12.250 --> 00:02:13.630
It's extremely easy to do.

37
00:02:13.630 --> 00:02:15.170
I don't fault them at all.

38
00:02:15.170 --> 00:02:18.423
But I wish they had found that sooner
because I use Slack a lot in my day to

39
00:02:18.423 --> 00:02:18.930
day life.

40
00:02:20.440 --> 00:02:25.296
&gt;&gt; And the reason the echo wasn't
working was you've got two ampersands

41
00:02:25.296 --> 00:02:26.947
between the commands.

42
00:02:26.947 --> 00:02:29.605
&gt;&gt; You are absolutely correct, thank you.

43
00:02:29.605 --> 00:02:32.264
&gt;&gt; You're welcome.

44
00:02:32.264 --> 00:02:33.474
&gt;&gt; So
you can see here NODE_ENV=production.

45
00:02:33.474 --> 00:02:35.993
So this is like an environmental
variable that you can use to.

46
00:02:39.050 --> 00:02:40.002
And again same here production.

47
00:02:40.002 --> 00:02:44.806
I might even have it set on my computer,
just always be yeah,

48
00:02:44.806 --> 00:02:50.100
well now I've done it temporarily for
my entire session, right?

49
00:02:51.810 --> 00:02:55.610
Anyway, there's a whole nother class on
that again, Linux and the command line.

50
00:02:55.610 --> 00:02:57.820
You can take that,
I go into this stuff pretty in depth.

51
00:02:58.860 --> 00:02:59.644
But as you can see,

52
00:02:59.644 --> 00:03:02.756
I have to retake my own course sometimes
cuz I forget some of these details.

53
00:03:04.989 --> 00:03:05.779
&gt;&gt; This just to confirm.

54
00:03:05.779 --> 00:03:09.168
So you're saying it's safer to
just leave it as production, so

55
00:03:09.168 --> 00:03:13.400
that we don't accidentally ship or
you're saying just remember to change it?

56
00:03:14.710 --> 00:03:18.260
&gt;&gt; So, actually what you'll probably
end up doing, this is a good question,

57
00:03:18.260 --> 00:03:20.750
when should you care about this?

58
00:03:20.750 --> 00:03:25.831
Normally, actually in my dot bash RC,
so if I say like, code.

59
00:03:30.684 --> 00:03:33.207
Bashrc, so this is your configuration for
your bash environment.

60
00:03:33.207 --> 00:03:35.402
If you're using Power Shell,
this is not helpful to you.

61
00:03:39.290 --> 00:03:42.190
I would just have in here
NODE_ENV=development because whenever I'm

62
00:03:42.190 --> 00:03:44.480
on my local computer,
it's always development right?

63
00:03:44.480 --> 00:03:47.820
I've never shipping stuff from
my local computer to the cloud.

64
00:03:47.820 --> 00:03:50.020
I always do that through GitHub actions or
something like that.

65
00:03:51.880 --> 00:03:55.392
But what I am saying is if you are doing
that kind of production bundling from

66
00:03:55.392 --> 00:03:56.469
your local computer.

67
00:03:56.469 --> 00:04:00.920
You do need to make sure that you're
setting that before you do it.

68
00:04:00.920 --> 00:04:06.229
So what you really wanna
do here is maybe here you

69
00:04:06.229 --> 00:04:11.955
would say like NODE_ENV=development,
right?

70
00:04:11.955 --> 00:04:13.590
And then you would set those here.

71
00:04:13.590 --> 00:04:14.855
This will only work in Bash,

72
00:04:14.855 --> 00:04:17.290
this would crash on Windows
if you try to do it this way.

73
00:04:17.290 --> 00:04:21.670
But you wanna make sure that those
environmental variables are being set.

74
00:04:21.670 --> 00:04:22.269
Good question.
How

75
00:04:22.269 --> 00:04:25.010
should you be setting the environmental
variables for the build?

76
00:04:25.010 --> 00:04:29.024
One, if you're using Parcel it
just happens if you say, so

77
00:04:29.024 --> 00:04:33.457
dev, it automatically sets
the environment to be development.

78
00:04:33.457 --> 00:04:35.830
And then we haven't done this yet.

79
00:04:35.830 --> 00:04:39.510
But if you come in here and
say build, parcel build,

80
00:04:39.510 --> 00:04:42.970
this is how you bundle it for production.

81
00:04:42.970 --> 00:04:45.850
It's smart enough to just switch that
automatically to NODE_ENV=production.

82
00:04:47.310 --> 00:04:49.550
Now if you're on something like
web pack or something else.

83
00:04:49.550 --> 00:04:54.271
Web pack has a plugin that allows
you to set the the environmental

84
00:04:54.271 --> 00:04:58.740
variables per type of build and
you would just wanna do that.

85
00:04:58.740 --> 00:05:01.820
So it's gonna vary by your bundler,
that's what I'm gonna say.

86
00:05:01.820 --> 00:05:05.457
But suffice to say what I want you to do
is I want you to make sure that that's

87
00:05:05.457 --> 00:05:08.110
happening with whatever
bundle tool you're using.

88
00:05:09.410 --> 00:05:11.790
But yeah, with Parcel,
it just happens for you.

89
00:05:11.790 --> 00:05:17.170
It's magic, that's kind of Parcels
modus operandi, right is magic.

