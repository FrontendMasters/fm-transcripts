WEBVTT

1
00:00:00.300 --> 00:00:02.213
Let's dive a bit more
into like what a hook is.

2
00:00:02.213 --> 00:00:04.928
The reason why these
are called hooks is because,

3
00:00:04.928 --> 00:00:07.004
react has this render cycle, right?

4
00:00:07.004 --> 00:00:12.698
So every time that I type in here,
react kicks off a re-render.

5
00:00:12.698 --> 00:00:17.105
And it's gonna call these hooks, and the
order that it calls them is particular.

6
00:00:17.105 --> 00:00:21.934
So if I had three of these, right, just
pretend that these were different looking.

7
00:00:21.934 --> 00:00:26.979
It's depending on that these hooks
are called in the same order.

8
00:00:26.979 --> 00:00:30.541
So this one's gonna be the first one, this
will be the second this be the third one.

9
00:00:30.541 --> 00:00:36.798
Like if this was animal and breed.

10
00:00:36.798 --> 00:00:40.761
Just ignore the other two for now.

11
00:00:40.761 --> 00:00:45.705
And this was dog and

12
00:00:45.705 --> 00:00:49.725
this was poodle

13
00:00:51.656 --> 00:00:55.307
It's really essential that these are
called in the same order because react is

14
00:00:55.307 --> 00:00:59.233
depending on the fact that these are gonna
be called New York because they're kind of

15
00:00:59.233 --> 00:01:01.905
like getting hooked up by
the React re-render, right?

16
00:01:01.905 --> 00:01:04.964
The reason I'm telling you all this so
if I do like if,

17
00:01:08.568 --> 00:01:14.503
I don't know Some thing is true.

18
00:01:14.503 --> 00:01:16.429
I put that in here.

19
00:01:16.429 --> 00:01:20.690
This is gonna really mess up my
renders because then if I have

20
00:01:20.690 --> 00:01:25.125
something like underneath that
like this sometimes this will

21
00:01:25.125 --> 00:01:28.549
get called sometimes
this will not get called.

22
00:01:28.549 --> 00:01:32.873
It'll mess up the order and those hooks
will go out of order, which means that you

23
00:01:32.873 --> 00:01:36.879
might have dog in this piece of poodle or
you might have Seattle in the post,

24
00:01:36.879 --> 00:01:40.209
like so you'll get the wrong
piece of state at the wrong time.

25
00:01:40.209 --> 00:01:44.888
So, in other words,
never ever put hooks inside of for loops,

26
00:01:44.888 --> 00:01:47.906
never put them inside of if statements.

27
00:01:47.906 --> 00:01:49.215
Never ever do that.

28
00:01:49.215 --> 00:01:50.947
That's a huge no, no.

29
00:01:50.947 --> 00:01:54.933
In fact, we're gonna add an es lint
rule that's not gonna let you do that.

30
00:01:54.933 --> 00:01:58.988
Does it re-render the entire page, or
does it re-render just a component.

31
00:01:58.988 --> 00:02:01.672
So react is actually quite smart
about where we renders and

32
00:02:01.672 --> 00:02:05.029
how that's actually why it's able to
get a lot of performance out of it.

33
00:02:05.029 --> 00:02:08.377
And why companies like Facebook and
Netflix and all those other big companies

34
00:02:08.377 --> 00:02:11.176
like is it's really intelligent
about it three render cycles.

35
00:02:11.176 --> 00:02:14.864
So is actually able to pick out just
the part of the page that's changed and

36
00:02:14.864 --> 00:02:18.151
re-render just that and
leave the other parts of the page alone.

37
00:02:18.151 --> 00:02:22.005
So in this particular case,
notice that this thing changed.

38
00:02:22.005 --> 00:02:24.780
So if I had another component
on this side of the page,

39
00:02:24.780 --> 00:02:28.128
it wouldn't rerender that one
it would only rerender this one.

40
00:02:28.128 --> 00:02:32.919
&gt;&gt; Hooks seem like a great place to
store a state that you want to update

41
00:02:32.919 --> 00:02:34.043
every render.

42
00:02:34.043 --> 00:02:40.943
But where would you store a state that
you don't necessarily want to render?

43
00:02:40.943 --> 00:02:42.418
They're affected render Exactly.

44
00:02:42.418 --> 00:02:43.271
&gt;&gt; Sure.

45
00:02:43.271 --> 00:02:47.896
So the question is, this seems like a good
place to put data that wants to like

46
00:02:47.896 --> 00:02:51.873
that can update frequently that
you want to affect the renders and

47
00:02:51.873 --> 00:02:53.336
those kinds of things.

48
00:02:53.336 --> 00:02:59.414
Why would I wanna store data that I don't
necessarily update that frequently or

49
00:02:59.414 --> 00:03:02.144
I don't want to affect the render.

50
00:03:02.144 --> 00:03:03.799
So kind of two separate questions.

51
00:03:03.799 --> 00:03:08.566
The first one that I answer is where do I
put data that I don't update frequently?

52
00:03:08.566 --> 00:03:13.301
And the way I'll answer that is
if it ever updates the render,

53
00:03:13.301 --> 00:03:16.042
you should put it in state, right?

54
00:03:16.042 --> 00:03:19.493
So even if it updates in frequently,
that's fine.

55
00:03:19.493 --> 00:03:22.457
React is plenty efficient
with those kind of things.

56
00:03:22.457 --> 00:03:25.731
So just go ahead and put that in a hook.

57
00:03:25.731 --> 00:03:30.348
Now the question is what happens if I
have a state that I don't want to affect

58
00:03:30.348 --> 00:03:35.184
the render, which is, I'm gonna go with
pretty rare but if it never updates,

59
00:03:35.184 --> 00:03:40.022
and it's kind of a singleton, you could
actually just put it outside of here,

60
00:03:40.022 --> 00:03:40.577
right?

61
00:03:40.577 --> 00:03:45.302
And I could say const
something equals here, right?

62
00:03:45.302 --> 00:03:47.949
And then this is gonna stay
the same across renders.

63
00:03:47.949 --> 00:03:50.226
But it's not gonna change
between components, right,

64
00:03:50.226 --> 00:03:52.796
if you have multiple components
are gonna share the same state.

65
00:03:52.796 --> 00:03:54.502
So that's something to keep in mind.

66
00:03:54.502 --> 00:03:59.718
Otherwise, there's things like refs, which
we can talk about in a different world.

67
00:03:59.718 --> 00:04:01.376
We'll talk about an intermediate, but

68
00:04:01.376 --> 00:04:04.218
there's another hook called use ref
that would be helpful for that.

69
00:04:04.218 --> 00:04:08.691
&gt;&gt; I guess a question I would have is,
I'm curious if you could.

70
00:04:08.691 --> 00:04:11.701
So you were saying like
not to set state and

71
00:04:11.701 --> 00:04:16.003
for loops, what would be the best
practice of setting state

72
00:04:16.003 --> 00:04:20.564
conditionally based on like
the state of another variable, so

73
00:04:20.564 --> 00:04:26.092
it'd be to have state variables for
both and then render it conditionally.

74
00:04:26.092 --> 00:04:31.229
Or could you say like if like use
a ternary operator to say like

75
00:04:31.229 --> 00:04:37.192
if location equals Seattle do this or
if it equals Detroit equal that.

76
00:04:37.192 --> 00:04:41.222
&gt;&gt; So I think the question becomes like
you kind of have dependent state right

77
00:04:41.222 --> 00:04:45.187
where one piece of state is dependent
on another piece of state that comes

78
00:04:45.187 --> 00:04:45.840
before it.

79
00:04:45.840 --> 00:04:50.682
So let's say basically what I would
do with something like that if I have

80
00:04:50.682 --> 00:04:55.525
like location here, and I'm gonna
show that it's raining or not, and

81
00:04:55.525 --> 00:04:59.658
if it's in Seattle,
it's definitely raining obviously.

82
00:04:59.658 --> 00:05:01.692
And then anywhere else, it's not raining.

83
00:05:01.692 --> 00:05:03.789
You would just calculate that state here,
right?

84
00:05:03.789 --> 00:05:07.520
So I'll have another variable
say like const is raining.

85
00:05:07.520 --> 00:05:09.606
This wouldn't be in a hook, right?

86
00:05:09.606 --> 00:05:11.366
Because it's derived from
other pieces of state.

87
00:05:11.366 --> 00:05:17.114
So, location triple = Seattle WA,

88
00:05:19.941 --> 00:05:21.441
True, false, right?

89
00:05:21.441 --> 00:05:25.162
And so I would like calculate that outside
of that and not store that in a hook.

90
00:05:25.162 --> 00:05:28.792
Now there's something called memo
where you can actually kind of store

91
00:05:28.792 --> 00:05:31.999
things like that if it's a really
expensive computation, and

92
00:05:31.999 --> 00:05:34.798
we will talk about that in
intermediate react as well.

93
00:05:34.798 --> 00:05:39.803
&gt;&gt; Would it be possible to get the non
de structure version of line four,

94
00:05:39.803 --> 00:05:41.282
just so I can see it?

95
00:05:41.282 --> 00:05:42.118
&gt;&gt; Yeah, sure.

96
00:05:42.118 --> 00:05:45.063
And actually, thank you for
calling that I meant to talk about that.

97
00:05:45.063 --> 00:05:49.147
So this probably looks
really weird to people.

98
00:05:49.147 --> 00:05:51.626
It's really common.

99
00:05:51.626 --> 00:05:54.741
You'll see this a lot in react, but
this is exactly what as he said,

100
00:05:54.741 --> 00:05:56.226
this is called destructuring.

101
00:05:56.226 --> 00:05:58.260
So let's just rewrite this.

102
00:05:58.260 --> 00:06:04.958
So what it looks like
without destructuring.

103
00:06:04.958 --> 00:06:09.139
Actually, we'll call this location and it
really is a tuple at the end of the day,

104
00:06:09.139 --> 00:06:10.775
and I know you say this tupple and

105
00:06:10.775 --> 00:06:13.821
I will die on the hill that I'm
still gonna call it a tupple.

106
00:06:13.821 --> 00:06:16.315
tuple I don't know,
I don't even care anymore.

107
00:06:16.315 --> 00:06:18.578
So now I have this thing.

108
00:06:18.578 --> 00:06:20.034
This is an array now.

109
00:06:20.034 --> 00:06:24.010
In fact, you can see here,
it pops up a nice type definition for

110
00:06:24.010 --> 00:06:27.550
me that it's gonna be a string and
a dispatch function.

111
00:06:27.550 --> 00:06:32.952
So now I would have
location equals constant

112
00:06:32.952 --> 00:06:37.624
Location, Location tuple, zero and

113
00:06:37.624 --> 00:06:43.322
const set location
Equals location tuple 1.

114
00:06:43.322 --> 00:06:48.501
So all this is saying here is like
I know that these are gonna come

115
00:06:48.501 --> 00:06:53.878
back in this particular order,
call them these names says look,

116
00:06:53.878 --> 00:06:58.408
0 is gonna be location and
1 is gonna be set location.

117
00:07:01.655 --> 00:07:02.227
Is that better?

118
00:07:05.001 --> 00:07:05.566
&gt;&gt; Yes, thank you.

119
00:07:05.566 --> 00:07:06.936
&gt;&gt; Cool, good question.

120
00:07:06.936 --> 00:07:12.934
This is extremely common in reacts, so
It's one that you'll wanna get used to.

121
00:07:17.844 --> 00:07:21.396
The nice thing about this is it
types very well for TypeScript.

122
00:07:21.396 --> 00:07:23.916
So everything comes in
with very defined types.

