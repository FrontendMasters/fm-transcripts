WEBVTT

1
00:00:00.520 --> 00:00:04.850
Right now our search params
page is getting quite long.

2
00:00:04.850 --> 00:00:07.340
It's we're up to 90 lines of code.

3
00:00:08.800 --> 00:00:11.260
There's no hard and fast rule for
how long these can be.

4
00:00:11.260 --> 00:00:12.994
But if you're at 1000 lines of code,

5
00:00:12.994 --> 00:00:15.330
you might want to reconsider
some of your life choices.

6
00:00:17.076 --> 00:00:21.410
In general, the idea is that you wanna
have one component handle one thing,

7
00:00:21.410 --> 00:00:22.910
just in general, right?

8
00:00:22.910 --> 00:00:26.750
You want it to, this one in particular
like you want it to be like the page.

9
00:00:26.750 --> 00:00:29.520
Then you want to like delegate
everything out to smaller components.

10
00:00:29.520 --> 00:00:32.700
So like a good example of this that we
did is we have this pet component and

11
00:00:32.700 --> 00:00:35.138
all this pet component does
is worry about being a pet,

12
00:00:35.138 --> 00:00:37.790
it doesn't worry about
doing anything else.

13
00:00:37.790 --> 00:00:40.905
And now it becomes reusable as well as
like if I have pets in multiple places,

14
00:00:40.905 --> 00:00:44.410
I can drop those pet components
in multiple different places.

15
00:00:44.410 --> 00:00:46.280
There's lots of benefits
to doing it this way.

16
00:00:47.740 --> 00:00:52.458
So, one of the things we could do is we
could we have multiple these like labels

17
00:00:52.458 --> 00:00:57.032
and selects, we could abstract that
into like a label control component or

18
00:00:57.032 --> 00:00:58.442
something like that.

19
00:00:58.442 --> 00:01:02.377
We're not, I'm not gonna do that because I
think for now, this is totally fine, but

20
00:01:02.377 --> 00:01:06.260
that that would be a place that you would
consider decomposing this larger component

21
00:01:06.260 --> 00:01:07.700
into two smaller components.

22
00:01:08.740 --> 00:01:13.682
The one that we are gonna decompose into
a smaller component is the bottom half

23
00:01:13.682 --> 00:01:16.950
of this page is like the results right?

24
00:01:16.950 --> 00:01:22.940
So it might make sense for us to
abstract that into like a results page,

25
00:01:22.940 --> 00:01:26.404
and then we could have that render here.

26
00:01:26.404 --> 00:01:32.068
So what I'm gonna do here,
I have my pets right here.

27
00:01:32.068 --> 00:01:33.664
I'm going to right click on this.

28
00:01:36.612 --> 00:01:38.397
And I can click refactor.

29
00:01:42.570 --> 00:01:44.065
I might have to do it this way.

30
00:01:48.658 --> 00:01:50.016
Sometimes this works.

31
00:01:52.912 --> 00:01:54.547
All right I'll just put it in a diff here.

32
00:01:56.698 --> 00:02:00.377
So I just wanna show you one of the
coolest capabilities that all I did was

33
00:02:00.377 --> 00:02:01.861
wrap the pets in its own div.

34
00:02:01.861 --> 00:02:03.684
Notice there's a little light bulb here.

35
00:02:03.684 --> 00:02:08.381
One of the cool things that VS code
can do for you is I can actually say,

36
00:02:10.686 --> 00:02:13.222
Extract to function in module scope.

37
00:02:18.355 --> 00:02:23.972
And this actually abstracted basically
into a new thing, and then I can just

38
00:02:23.972 --> 00:02:29.440
move this across or we can actually
even get a little bit faster than that.

39
00:02:29.440 --> 00:02:34.408
This used to work in closing scope now.

40
00:02:38.389 --> 00:02:41.170
So that's one thing you can do, you can
actually have it extracted out for you.

41
00:02:41.170 --> 00:02:43.400
In this case,
it didn't actually help us that much.

42
00:02:43.400 --> 00:02:44.328
So I'm not gonna do that.

43
00:02:47.129 --> 00:02:49.765
Step what I'm going to do,
I'm going to read these divs and

44
00:02:49.765 --> 00:02:52.860
we're just going to copy or
cut it out entirely.

45
00:02:52.860 --> 00:02:55.086
So I'm just going to cut that and

46
00:02:55.086 --> 00:02:58.719
we're going to put something
here called results.

47
00:03:00.270 --> 00:03:02.230
And we're just going to
pass the pets into it.

48
00:03:06.910 --> 00:03:07.752
Okay.

49
00:03:10.274 --> 00:03:15.053
We create a new file here as you
might guess we're going to call it

50
00:03:15.053 --> 00:03:17.630
results.js and we're going to.

51
00:03:21.242 --> 00:03:25.887
Import pet from ./pet.

52
00:03:28.696 --> 00:03:29.867
And then const.

53
00:03:31.846 --> 00:03:38.522
Results is gonna be = (props),

54
00:03:42.173 --> 00:03:49.620
And we're going to return blur and at the
bottom be sure to export, default results.

55
00:03:54.419 --> 00:03:55.784
And then we're going to.

56
00:03:59.978 --> 00:04:02.830
Well, yeah, so we have the props here.

57
00:04:02.830 --> 00:04:05.810
We know the thing that we want
out of the props is called pets.

58
00:04:05.810 --> 00:04:10.038
So an easy thing you can do here is I
can put curly braces inside of this and

59
00:04:10.038 --> 00:04:12.040
I can structure as pets.

60
00:04:12.040 --> 00:04:17.032
So this is going to pull out of this
props object, something called pets and

61
00:04:17.032 --> 00:04:18.380
call it pets.

62
00:04:18.380 --> 00:04:20.390
So now I don't have to say props.pets.

63
00:04:20.390 --> 00:04:23.536
I can just say pets makes my
code read a little bit easier.

64
00:04:25.471 --> 00:04:27.533
So I'm gonna make a div here.

65
00:04:27.533 --> 00:04:30.263
And it's class name is going
to be equal to search.

66
00:04:36.360 --> 00:04:41.340
Okay, and then what I want to do here
is like if there's no pets found.

67
00:04:41.340 --> 00:04:48.830
So if I say pets.length, We're gonna
use something called a ternary.

68
00:04:50.660 --> 00:04:51.990
So I'm gonna put a question mark here.

69
00:04:51.990 --> 00:04:54.609
It's basically like an inline
if statement for JavaScript.

70
00:04:56.280 --> 00:05:03.467
If I can't find anything,
Then put h1 let's make it actually an h2.

71
00:05:07.175 --> 00:05:13.787
So h2, No pets found.

72
00:05:13.787 --> 00:05:18.683
Then after that colon again parentheses,

73
00:05:18.683 --> 00:05:23.443
so if there's no pets found render this if

74
00:05:23.443 --> 00:05:28.611
there are pets found then do or
do pets.map.

75
00:05:31.283 --> 00:05:32.212
Pet.

76
00:05:37.881 --> 00:05:41.169
Can do the same thing here
because we've been doing a lot.

77
00:05:41.169 --> 00:05:42.153
Pet.

78
00:05:44.542 --> 00:05:46.520
You can do the destruction here as well.

79
00:05:46.520 --> 00:05:51.990
So if you wanted to change pet to,
animal blah blah blah.

80
00:05:51.990 --> 00:05:53.335
I'm not gonna do that
I'm just gonna do pet.

81
00:05:56.103 --> 00:06:05.048
Animal=pet.animal, key=pet.id,

82
00:06:05.048 --> 00:06:14.248
name= pet.name, breed=pet.breed,

83
00:06:14.248 --> 00:06:19.620
images=pet.images,

84
00:06:23.658 --> 00:06:28.121
Location equals and then we're
going to do a template string here.

85
00:06:30.468 --> 00:06:38.773
So backticks remember Pet.city, pet.state.

86
00:06:38.773 --> 00:06:41.070
So the API gives it back
to us in city comma state.

87
00:06:41.070 --> 00:06:42.950
And we want to give it back to the API or

88
00:06:42.950 --> 00:06:46.781
to the pet component as like one long
string that's like city comma state.

89
00:06:50.592 --> 00:06:54.956
And then the id=pet.id.

90
00:06:57.382 --> 00:06:59.668
Couple of things here and
then we'll close it off.

91
00:07:02.759 --> 00:07:05.120
So yeah,
let's talk about a couple of things here.

92
00:07:05.120 --> 00:07:09.970
One something that people might
ask is like I'm already giving

93
00:07:09.970 --> 00:07:12.360
the pet the id in the key place.

94
00:07:12.360 --> 00:07:14.429
Can't I just refer to the key place?

95
00:07:14.429 --> 00:07:22.010
And the answer is no, key only is used for
react, keeping track of changes, right?

96
00:07:22.010 --> 00:07:26.943
So it actually removes that can't when
it passes it down to you AKA you cannot

97
00:07:26.943 --> 00:07:28.802
have a prop called key ever.

98
00:07:28.802 --> 00:07:33.692
There's only a few that are reserved
key is one and children is the other.

99
00:07:33.692 --> 00:07:36.320
I don't think we talked we'll
talk about children later.

100
00:07:36.320 --> 00:07:40.491
But suffice to say you can actually
pass down like components right rendered

101
00:07:40.491 --> 00:07:43.305
components inside of
something called children.

102
00:07:45.135 --> 00:07:49.543
So that's why you have to
separately pass down pet.id.

103
00:07:49.543 --> 00:07:53.150
Now, I'm just going to show you don't
you don't have to type this in.

104
00:07:53.150 --> 00:07:54.920
I'm going to show you the lazy
way we could have done this.

105
00:07:54.920 --> 00:07:55.851
That's a bad idea.

106
00:07:59.214 --> 00:08:03.150
So, if I typed it in this way I
could have done dot dot dot pet.

107
00:08:04.550 --> 00:08:09.653
And then I would have
also had done key=pet.id

108
00:08:09.653 --> 00:08:14.650
these would have functioned similarly.

109
00:08:14.650 --> 00:08:16.910
So this is called the spread operator.

110
00:08:16.910 --> 00:08:21.410
And JSX is just going to take this
object and spread it across that.

111
00:08:23.250 --> 00:08:25.997
So instead of having to do these all
individually this would have just done

112
00:08:25.997 --> 00:08:28.500
that like is spreading across
the entire object that got from pet.

113
00:08:29.930 --> 00:08:34.505
Unless the component is actually meant to
be ignorant of all the properties being

114
00:08:34.505 --> 00:08:36.130
passed in, don't do this.

115
00:08:36.130 --> 00:08:39.486
And let me tell you from deep experience
with this problem, it makes us so

116
00:08:39.486 --> 00:08:41.630
much harder to read later.

117
00:08:41.630 --> 00:08:44.210
Because I'll come back here is
like what the hell is pep getting?

118
00:08:44.210 --> 00:08:49.480
I don't know,
right you become unable to understand.

119
00:08:49.480 --> 00:08:52.870
How the parent is interacting with
the child by reading the code.

120
00:08:52.870 --> 00:08:56.230
Yeah, I now have to go into pet to
figure out what it's expecting.

121
00:08:58.350 --> 00:09:02.380
&gt;&gt; Does this only work if
the key values are the same?

122
00:09:02.380 --> 00:09:06.098
So if the problem is name and
the API is returning name.

123
00:09:06.098 --> 00:09:10.438
&gt;&gt; Correct yep, so it'll only work if
these things won't are named the same

124
00:09:10.438 --> 00:09:15.688
thing, which actually, location wouldn't
work because we actually renamed location

125
00:09:15.688 --> 00:09:20.470
to something else and that the API does
not give that back to this location.

126
00:09:20.470 --> 00:09:24.356
So this is exactly what I'm talking about
is like the waters become very murky of

127
00:09:24.356 --> 00:09:29.230
what's going where and are we getting
the right things in the right locations.

128
00:09:29.230 --> 00:09:32.002
So I wanted to show you because you're
never really going to run into this

129
00:09:32.002 --> 00:09:34.600
because this looks so
nice and so easy to type.

130
00:09:34.600 --> 00:09:37.960
But just don't do it believe me, having
worked on a code base that did this a lot.

131
00:09:37.960 --> 00:09:40.090
It was incredibly
frustrating to work with.

132
00:09:46.143 --> 00:09:49.953
Just stick to this, I know it's verbose
and takes so many keystrokes in my

133
00:09:49.953 --> 00:09:53.820
fingers are so tired and please help me,
but don't just, don't do it.

134
00:09:53.820 --> 00:09:55.271
It's a terrible excuse for that.

135
00:09:59.061 --> 00:10:02.390
Okay, so
go back to search branch really quick.

136
00:10:02.390 --> 00:10:05.643
Let's just kind of wrap this up and
make it work, we have results here,

137
00:10:05.643 --> 00:10:08.120
but we have to import it at the top.

138
00:10:08.120 --> 00:10:11.040
So we stopped using pet because
pets now only used in results.

139
00:10:11.040 --> 00:10:12.820
It's not using search params.

140
00:10:12.820 --> 00:10:17.461
So you can say import
results from ./results you

141
00:10:17.461 --> 00:10:22.322
deleted pet up here and
then down here at the bottom,

142
00:10:22.322 --> 00:10:27.230
underneath the form,
you put results pets=pets.

143
00:10:27.230 --> 00:10:30.896
Now, if we go back over here, now we have
like a nice little search box over here

144
00:10:30.896 --> 00:10:33.080
and we added some more CSS and
structure to it.

145
00:10:33.080 --> 00:10:34.313
So, that's why that works now.

