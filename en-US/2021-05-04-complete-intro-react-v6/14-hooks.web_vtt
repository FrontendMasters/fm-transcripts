WEBVTT

1
00:00:00.112 --> 00:00:05.192
So the next section we're
gonna hop into is Hooks.

2
00:00:05.192 --> 00:00:12.400
Hooks was a really big deal when React
version 16.4, I think, came out.

3
00:00:12.400 --> 00:00:17.290
It was a whole new API for managing
state inside of your React application.

4
00:00:17.290 --> 00:00:23.210
And I would say it's really
easy to learn up front.

5
00:00:23.210 --> 00:00:25.797
So I think this is gonna be
a pretty fun experience for you.

6
00:00:25.797 --> 00:00:28.375
But they do have some kind of
odd issues that arise later.

7
00:00:28.375 --> 00:00:30.735
And I'll let you kind of be the judge
of if you like using Hooks better or

8
00:00:30.735 --> 00:00:31.419
class components.

9
00:00:31.419 --> 00:00:33.345
We'll talk about class components later.

10
00:00:33.345 --> 00:00:36.139
But basically it's a way
of managing state, right?

11
00:00:36.139 --> 00:00:40.423
So I have a text box on the page and
it's gonna say, Brian and

12
00:00:40.423 --> 00:00:45.246
then I wanna erase it, and
then I wanna put Steve in there, right?

13
00:00:45.246 --> 00:00:48.810
And then that state of that input
is gonna be tracked through a hook.

14
00:00:48.810 --> 00:00:52.128
So let's actually go do that right now.

15
00:00:52.128 --> 00:00:55.562
So I want you to go to
your React application and

16
00:00:55.562 --> 00:01:00.595
I want you to create a new file here
inside of your source directory,

17
00:01:04.004 --> 00:01:08.109
Called SearchParams.js.

18
00:01:08.109 --> 00:01:11.196
It's gonna be kind of our homepage.

19
00:01:11.196 --> 00:01:13.429
We're gonna start building
our pet adoption app.

20
00:01:13.429 --> 00:01:16.364
So this will be like the home page
where people can search for things.

21
00:01:18.974 --> 00:01:23.772
So I want you to make a React component
called SearchParams, const SearchParams.

22
00:01:27.856 --> 00:01:30.328
That's gonna return some mark-up here.

23
00:01:30.328 --> 00:01:36.771
That's gonna be inside of a div,
call it className = search-params.

24
00:01:39.543 --> 00:01:45.098
And then here at the bottom, very
important to export default SearchParams.

25
00:01:48.608 --> 00:01:54.411
First thing I wanna talk about here,
why is this className instead of class?

26
00:01:54.411 --> 00:01:56.180
Well, you have to remember we
are inside of JavaScript, right?

27
00:01:56.180 --> 00:02:00.102
And the word class is a reserved word,
right?

28
00:02:00.102 --> 00:02:06.026
I can't say const class = lol, right,
because this is technically not

29
00:02:06.026 --> 00:02:11.880
valid JavaScript because class
means something else in JavaScript.

30
00:02:11.880 --> 00:02:13.420
So same thing here.

31
00:02:13.420 --> 00:02:17.120
We call it className,
instead of just class.

32
00:02:17.120 --> 00:02:22.142
Now, to be fair, className is actually
the name of the JavaScript API for

33
00:02:22.142 --> 00:02:23.526
modifying a class.

34
00:02:23.526 --> 00:02:25.731
So that it's not that the React
team was making it up.

35
00:02:25.731 --> 00:02:28.824
They used the official JavaScript name for
that API.

36
00:02:31.825 --> 00:02:35.085
Okay, and again,
if you follow my class names,

37
00:02:35.085 --> 00:02:37.637
you will get all the styling for free.

38
00:02:41.021 --> 00:02:44.049
Okay, so we're gonna create a form here.

39
00:02:46.940 --> 00:02:52.001
And we're gonna have a label ,and
normally you'd have for here, right.

40
00:02:52.001 --> 00:02:55.549
But again, for,
reserved JavaScript word for for loops, so

41
00:02:55.549 --> 00:03:04.903
you have to call it htmlFor location,
And we're gonna call location.

42
00:03:04.903 --> 00:03:10.962
And we're gonna say input id = location,

43
00:03:10.962 --> 00:03:18.534
value =,
now here I can put something like Seattle,

44
00:03:18.534 --> 00:03:23.660
right, or something like that.

45
00:03:23.660 --> 00:03:26.770
So this is going to be bound
to whatever I put in there.

46
00:03:26.770 --> 00:03:28.046
In fact, let's just put it in there for
fun right now.

47
00:03:28.046 --> 00:03:34.781
And then placeholder = location.

48
00:03:34.781 --> 00:03:40.306
And then again self
closing tag/angle bracket.

49
00:03:45.436 --> 00:03:49.371
Okay, and then underneath the label here,
we're gonna put a button,

50
00:03:49.371 --> 00:03:50.952
then just call that Submit.

51
00:03:56.773 --> 00:03:59.635
So, should make some sense, right?

52
00:03:59.635 --> 00:04:03.806
We have a div here, it's gonna have a form
in it with one thing in it, which is

53
00:04:03.806 --> 00:04:08.130
gonna be this location control which is
gonna be an input of type text, right?

54
00:04:09.540 --> 00:04:11.819
And then the value here
is gonna be Seattle WA.

55
00:04:11.819 --> 00:04:15.497
And the placeholder is gonna be
location with a submit button on there.

56
00:04:18.738 --> 00:04:19.828
So nothing here too surprising.

57
00:04:19.828 --> 00:04:25.037
What happens if you wanna
track the state of location?

58
00:04:25.037 --> 00:04:28.406
Cuz right now,
this isn't being stored anywhere, right?

59
00:04:28.406 --> 00:04:30.721
But I wanna actually use
that somewhere else.

60
00:04:30.721 --> 00:04:36.455
So what I'm gonna do is I'm gonna
come in here and I'm going to, Well,

61
00:04:36.455 --> 00:04:38.700
yeah, let's do it this way,
this is actually probably even easier.

62
00:04:38.700 --> 00:04:44.190
So I'm gonna say const location = Seattle,
WA.

63
00:04:44.190 --> 00:04:48.860
So this is now a variable, and
I want this to be reflecting of that.

64
00:04:50.080 --> 00:04:51.687
So I can't just put location here.

65
00:04:54.008 --> 00:04:54.611
Why not?

66
00:04:54.611 --> 00:04:56.299
Cuz that would literally
be the string location.

67
00:04:59.274 --> 00:05:02.480
So what you can do here instead,
I'm gonna delete those, and

68
00:05:02.480 --> 00:05:05.020
I'm gonna put curly braces
around it like that.

69
00:05:05.020 --> 00:05:09.290
And now I can put location, so
it's gonna be reflective of this location.

70
00:05:09.290 --> 00:05:10.940
So that's what those curly braces mean.

71
00:05:10.940 --> 00:05:13.324
It just means it's
a JavaScript expression.

72
00:05:13.324 --> 00:05:18.040
So if I wanted to,
I could say toUpperCase, right?

73
00:05:18.040 --> 00:05:20.094
And now whatever location was,

74
00:05:20.094 --> 00:05:23.982
it would always be here as
JavaScript toUpperCase, right?

75
00:05:23.982 --> 00:05:26.612
So it can be anything that can be
the right side of an equal signs.

76
00:05:26.612 --> 00:05:28.712
That's called a JavaScript expression.

77
00:05:31.261 --> 00:05:33.570
Okay.

78
00:05:36.078 --> 00:05:38.888
So now I have all this setup,
we actually need to go render it, right?

79
00:05:38.888 --> 00:05:40.184
We made the stamp.

80
00:05:40.184 --> 00:05:41.174
Now we need to go stamp it.

81
00:05:41.174 --> 00:05:49.176
So we're gonna go back to app.js, And
we're gonna import from SearchParams.

82
00:05:54.119 --> 00:05:55.313
From ./SearchParams.

83
00:05:59.205 --> 00:06:01.133
We can go ahead and
delete your pet import for now.

84
00:06:04.210 --> 00:06:05.526
And delete these three here and

85
00:06:05.526 --> 00:06:08.215
I'm just gonna put SearchParams
directly on there like this.

86
00:06:12.813 --> 00:06:13.691
Okay, good?

87
00:06:18.436 --> 00:06:22.310
So now I have my SearchParams page,
all these.

88
00:06:23.550 --> 00:06:27.080
I have my app.js where it's importing from
that, and it's rendering it out there.

89
00:06:28.340 --> 00:06:32.615
So I would expect to see Adopt Me at
the top, my nice little logo, and

90
00:06:32.615 --> 00:06:34.870
my SearchParams underneath that.

91
00:06:36.860 --> 00:06:41.391
So, let me make sure that mine's not
running, so I'm gonna say mpm run dev,

92
00:06:41.391 --> 00:06:47.466
to get my server running, And
I'm gonna open that in my browser.

93
00:06:50.640 --> 00:06:54.997
So now you can see, I have a nice,
little search control here.

94
00:06:54.997 --> 00:06:59.539
And if I click on it and
I start typing in it, doesn't work.

95
00:07:03.080 --> 00:07:03.861
That's kinda strange, right?

96
00:07:03.861 --> 00:07:07.017
You would expect that you start typing
in it, and it would start working.

97
00:07:07.017 --> 00:07:11.247
It's actually kind of difficult to
break an input control in the browser.

98
00:07:11.247 --> 00:07:12.781
So congratulations,
you did something difficult.

99
00:07:12.781 --> 00:07:17.513
If you open your terminal,
it's actually gonna tell you, hey,

100
00:07:17.513 --> 00:07:20.018
this isn't gonna work by the way.

101
00:07:20.018 --> 00:07:21.927
You didn't actually tell
me to update anywhere.

102
00:07:21.927 --> 00:07:25.732
So I'm just gonna always put that there.

103
00:07:25.732 --> 00:07:29.978
So you have to keep in
mind of how React works.

104
00:07:29.978 --> 00:07:34.835
Every time that React detects
a change anywhere, right,

105
00:07:34.835 --> 00:07:37.222
it reruns its render cycle.

106
00:07:37.222 --> 00:07:41.899
So in this case, when I type a key here,
it's going to tell React, hey,

107
00:07:41.899 --> 00:07:43.373
something happened.

108
00:07:43.373 --> 00:07:45.642
React is going to kick
off a rerender cycle, and

109
00:07:45.642 --> 00:07:48.450
it's gonna rerender whatever it has.

110
00:07:48.450 --> 00:07:51.470
So let's go investigate that a little bit.

111
00:07:51.470 --> 00:07:54.050
If we come back over here to SearchParams.

112
00:07:54.050 --> 00:07:58.848
If I kick off a new rerender,
it's going to setLocation = Seattle,

113
00:07:58.848 --> 00:08:02.754
WA, and then it's going to
render that there, right?

114
00:08:02.754 --> 00:08:06.335
So that means every time that I
click that key, it's rerendering and

115
00:08:06.335 --> 00:08:10.423
it's grabbing Seattle, Washington here,
and it's rerendering it there.

116
00:08:10.423 --> 00:08:11.579
So no matter what I type there,

117
00:08:11.579 --> 00:08:14.430
it's going to ignore it because it's
always going to rerender as Seattle.

118
00:08:14.430 --> 00:08:16.490
So I have to give it
the mechanism to update itself.

119
00:08:16.490 --> 00:08:20.998
Now, other frameworks, you might get
something like what we call two way data

120
00:08:20.998 --> 00:08:24.754
binding, that was really popular
in Angular JS when it came out,

121
00:08:24.754 --> 00:08:29.690
that if I type something, it automatically
bound that to a variable and vice versa.

122
00:08:29.690 --> 00:08:33.790
If I updated the variable,
it update that to the DOM.

123
00:08:33.790 --> 00:08:37.030
React doesn't have that, you have
to actually do the wiring yourself.

124
00:08:37.030 --> 00:08:38.520
Luckily, it's actually quite simple.

125
00:08:38.520 --> 00:08:40.805
So let's go ahead and
take a look at how to do that.

126
00:08:40.805 --> 00:08:46.328
So the first thing up here I want you to
do is I want you to import at the top,

127
00:08:48.389 --> 00:08:51.361
useState from React.

128
00:08:51.361 --> 00:08:55.790
useState is what is called a hook, right?

129
00:08:57.120 --> 00:09:02.790
A hook allows us to keep track of state
as indicated by the state part of this.

130
00:09:02.790 --> 00:09:05.887
Another thing to note is
hooks always begin with use.

131
00:09:05.887 --> 00:09:09.980
useState, useEffect, useDebugValue,
there's a bunch of them.

132
00:09:09.980 --> 00:09:12.985
useState is probably 95%
of what you're gonna use.

133
00:09:15.966 --> 00:09:21.639
Okay, so instead of this location
here at the top, I'm gonna say const,

134
00:09:21.639 --> 00:09:25.586
I'm going to put square brackets,
setLocation,

135
00:09:29.519 --> 00:09:37.540
= useState with a string of the default
value, the first time value.

136
00:09:37.540 --> 00:09:41.408
So the first time value
of this is Seattle, WA,

137
00:09:41.408 --> 00:09:43.840
and then get rid of this line.

138
00:09:46.500 --> 00:09:50.287
Now we have a hook here that allows
us to have this location and

139
00:09:50.287 --> 00:09:54.450
then this piece of state that
it will track over time.

140
00:09:54.450 --> 00:09:56.230
So now we're already
using this location here.

141
00:09:57.260 --> 00:09:59.925
But the other thing we
wanna do is say onChange.

142
00:09:59.925 --> 00:10:04.033
So whenever this changes,
whenever the user does something,

143
00:10:04.033 --> 00:10:08.153
it's gonna give us back a function
that gives us back an event.

144
00:10:08.153 --> 00:10:09.954
So I'm gonna call that event E.

145
00:10:09.954 --> 00:10:11.458
You can call it event if you want to.

146
00:10:13.153 --> 00:10:18.559
But we're gonna say E, and
then we're gonna give it a function.

147
00:10:18.559 --> 00:10:25.423
And then I'm gonna say
setlocation(e.target.value).

148
00:10:29.774 --> 00:10:32.456
So if you've never seen this
style of function before,

149
00:10:32.456 --> 00:10:34.710
this is a one line arrow function.

150
00:10:34.710 --> 00:10:40.095
I mean, if you wanna make this
super verbose, you can say,

151
00:10:40.095 --> 00:10:44.860
function updateLocation,
that takes in an event.

152
00:10:45.880 --> 00:10:51.463
And then you can say
setLocation(e.target.value).

153
00:10:51.463 --> 00:10:57.711
And then here, instead of putting this
here, let's just do this so you can see,

154
00:11:00.609 --> 00:11:06.700
Like that, updateLocation.

155
00:11:06.700 --> 00:11:12.743
So these two lines, if I got rid of this
one, are functionally equivalent, right?

156
00:11:12.743 --> 00:11:15.708
They're doing exactly the same thing.

157
00:11:15.708 --> 00:11:18.174
This is just a shorthand
way of doing that.

158
00:11:21.043 --> 00:11:25.458
So we'll stick to that cuz I think that
it kinda keeps it really easy to read.

159
00:11:27.242 --> 00:11:32.265
So now if we head back over to our page,
we can actually type in it now, right?

160
00:11:37.546 --> 00:11:39.947
So this is how you do the data
binding between you and the DOM,

161
00:11:39.947 --> 00:11:41.470
is you just use hooks to do it this way.

