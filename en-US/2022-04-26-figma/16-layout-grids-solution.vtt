WEBVTT

1
00:00:00.240 --> 00:00:05.077
So our mission here was to implement two
grids so this was two-column grid just

2
00:00:05.077 --> 00:00:09.034
because it's small, which also if
you had a listing of images or

3
00:00:09.034 --> 00:00:12.556
something along those lines
you could theoretically use

4
00:00:12.556 --> 00:00:16.977
a grid like that as well you could
also directly have a 12 column grid.

5
00:00:16.977 --> 00:00:21.283
And they just span more columns as well
either one is fine this just happens to be

6
00:00:21.283 --> 00:00:25.525
relatively small canvas so that felt
appropriate if you wanted to go rogue and

7
00:00:25.525 --> 00:00:28.190
do 12 columns, more power to you.

8
00:00:28.190 --> 00:00:32.403
You can go ahead and like I said before,

9
00:00:32.403 --> 00:00:36.616
add in we don't want the default grid we

10
00:00:36.616 --> 00:00:41.340
want this case it is
going to be two columns,

11
00:00:41.340 --> 00:00:47.109
with a 36-pixel margin and
16-pixel gutters.

12
00:00:47.109 --> 00:00:50.260
That's not a real system.

13
00:00:50.260 --> 00:00:54.940
And then here we wanted to have
one column in both directions.

14
00:00:54.940 --> 00:00:56.620
And we can talk about,
why we might want to do that?

15
00:00:56.620 --> 00:01:01.180
But you might have noticed why you might
want to do it upon implementing it too.

16
00:01:01.180 --> 00:01:05.512
So, we can go ahead and
we can add in one column and

17
00:01:05.512 --> 00:01:10.400
we'll give it with this case,
20-pixel margins.

18
00:01:12.040 --> 00:01:18.389
And [SOUND] we can go ahead and
add a second one.

19
00:01:18.389 --> 00:01:24.803
And we'll change that to rows
we'll say one row with 20.

20
00:01:24.803 --> 00:01:29.703
And you can kind of see why you
might use this as basically,

21
00:01:29.703 --> 00:01:33.650
the equivalent of padding and CSS, right?

22
00:01:33.650 --> 00:01:38.575
If we wanted to have the ability to
snap to what we would normally have as

23
00:01:38.575 --> 00:01:42.164
the right padding,
we'll have to be like, okay,

24
00:01:42.164 --> 00:01:46.420
cool, I'm just gonna like,
put this in the right corner and

25
00:01:46.420 --> 00:01:50.940
I'm gonna add 20 to the X and
the Y over and over and over again.

26
00:01:50.940 --> 00:01:54.309
Now we can be like, no,
I wanna have some nice padding,

27
00:01:54.309 --> 00:01:59.250
I could snap stuff on there super easily,
and we have that in place as well.

28
00:01:59.250 --> 00:02:03.363
If you didn't have, let's say
hypothetically you just had the columns,

29
00:02:03.363 --> 00:02:07.934
right, you might increase it a little bit,
but that kinda gives you your padding on

30
00:02:07.934 --> 00:02:10.544
a mobile scrolling view as well,
right, and so

31
00:02:10.544 --> 00:02:14.950
you can use a one-column grid to simulate
padding and CSS in your Figma design.

32
00:02:17.220 --> 00:02:20.844
Where some of the magic happens though,

33
00:02:20.844 --> 00:02:25.450
is combining constraints and layout grids.

34
00:02:25.450 --> 00:02:30.239
So we saw before with constraints So
we can say like, stay in the middle, or

35
00:02:30.239 --> 00:02:35.580
snap to both sides and expand a contract
that worked great for, did I implement it?

36
00:02:35.580 --> 00:02:38.620
Our menu bar, right?

37
00:02:38.620 --> 00:02:41.732
But, theoretically,
if we had stuff in the middle of the page,

38
00:02:41.732 --> 00:02:45.550
we could try to center it, but they stay
the same size and just kinda sit there.

39
00:02:45.550 --> 00:02:47.120
I mean, we can do it watch.

40
00:02:47.120 --> 00:02:49.924
I'll grab, this is my son's artwork.

41
00:02:53.985 --> 00:02:54.960
Grab the right stuff.

42
00:02:56.360 --> 00:03:00.750
Cool, grab that, and it's not transparent,
that's just the layout grid.

43
00:03:01.970 --> 00:03:07.035
I could theoretically say stay to the
left, stay to the right, and they'd kind

44
00:03:07.035 --> 00:03:12.650
of grow and expand but it wouldn't really
do what I wanted, I could say center.

45
00:03:12.650 --> 00:03:17.491
All these are gonna be sub-par
Implementations, actually,

46
00:03:17.491 --> 00:03:21.872
this is working cuz layout grid
is in place basically with

47
00:03:21.872 --> 00:03:26.071
the layout grid the constraints
will go to the column or

48
00:03:26.071 --> 00:03:30.295
the row that it's in, right,
and can stay with that.

49
00:03:30.295 --> 00:03:33.910
So it's actually staying at
the center of that column, but

50
00:03:33.910 --> 00:03:38.480
what I might choose to do is kind
of stick it right there in there.

51
00:03:38.480 --> 00:03:41.650
And we'll say in this case,
left and right.

52
00:03:43.020 --> 00:03:44.690
Let's grab another one and
do the same thing.

53
00:03:46.420 --> 00:03:47.260
Make a copy this time.

54
00:03:49.940 --> 00:03:53.279
And we'll say, left and right

55
00:03:57.121 --> 00:04:00.325
And now you'll see that
they kinda grow and

56
00:04:00.325 --> 00:04:06.294
contract like if they had with 100 inside
of like two sections or divs in CSS.

57
00:04:06.294 --> 00:04:10.835
They kind of behave the way that
you think that they should and

58
00:04:10.835 --> 00:04:16.638
they don't have a scale property on the up
and down so they keep their height.

59
00:04:16.638 --> 00:04:19.902
Basically behaving the way that
they would in the browser and

60
00:04:19.902 --> 00:04:24.190
you basically get it for free if you use
layout grids and constraints together,

61
00:04:24.190 --> 00:04:28.030
that I will also work kind of in a more
like CSS Grid kind of format right so

62
00:04:28.030 --> 00:04:30.150
let's pull this up a little bit [SOUND].

63
00:04:30.150 --> 00:04:37.241
And we can say let's put this one in here,
and I can snap it in there and

64
00:04:37.241 --> 00:04:43.255
have it grow to the right size
grab another one real quick.

65
00:04:46.090 --> 00:04:47.450
We can pop it in there as well.

66
00:04:48.850 --> 00:04:51.550
Okay, now we actually want it to scale.

67
00:04:51.550 --> 00:04:53.430
We want both them to kind of
scale in both directions.

68
00:04:53.430 --> 00:04:55.320
So select them both.

69
00:04:55.320 --> 00:04:58.360
And we'll say left and
right, top and bottom.

70
00:04:59.550 --> 00:05:01.269
And now theoretically.

71
00:05:03.590 --> 00:05:07.440
They will actually grow and shrink
again like they would in the browser.

72
00:05:07.440 --> 00:05:11.758
The other cool thing that you can do with
frames that we didn't talk about before

73
00:05:11.758 --> 00:05:14.530
is, it is not unlikely
that you're developing for

74
00:05:14.530 --> 00:05:18.480
both especially doing for
mobile both landscape and portrait, right?

75
00:05:18.480 --> 00:05:23.177
And so in a frame if you ever need to
change the device you can actually just

76
00:05:23.177 --> 00:05:27.951
hit this drop down, but the other thing
that you can do is swap it between,

77
00:05:27.951 --> 00:05:31.742
I've broken this frame,
let's make it an iPad Pro11.

78
00:05:31.742 --> 00:05:36.042
And you can see it's like snapping to
the right sizes in each case, right?

79
00:05:36.042 --> 00:05:41.463
So to your point before I maybe can't make
an app where that will always just take up

80
00:05:41.463 --> 00:05:46.728
the right space and anything I drop it in
but I could theoretically set up one view

81
00:05:46.728 --> 00:05:52.228
and then duplicate the frame, make one an
iPad mini, make one Safari on a desktop,

82
00:05:52.228 --> 00:05:56.420
make one an iPhone, and
then adjust accordingly for each one.

83
00:05:56.420 --> 00:06:01.195
And you can see that even as I switch
to portrait I might adjust the rows in

84
00:06:01.195 --> 00:06:02.080
this case.

85
00:06:02.080 --> 00:06:05.440
I might have a set of portrait rows and
so on and so forth.

86
00:06:05.440 --> 00:06:09.583
But generally speaking,
I can kind of switch back and

87
00:06:09.583 --> 00:06:12.170
forth, even if it could be cool.

88
00:06:12.170 --> 00:06:13.100
Let's see real quick.

89
00:06:13.100 --> 00:06:21.170
One of the things we saw before is we
can make save styles out of a grid.

90
00:06:21.170 --> 00:06:28.410
So let's actually make one I'll call
it live coding, so don't get confused.

91
00:06:28.410 --> 00:06:33.083
Live coding, port tripped and sweet and

92
00:06:33.083 --> 00:06:37.489
then we're going to duplicate this,

93
00:06:41.213 --> 00:06:46.377
Over here and let's say that for
landscape we want to change

94
00:06:46.377 --> 00:06:52.366
this grid a little bit so we'll go
ahead and will detach this style and

95
00:06:52.366 --> 00:06:58.785
we're gonna say that maybe in portrait
mode just do two columns, right?

96
00:06:58.785 --> 00:07:05.788
And so what we can do is we can flip this,
gotta reset those constraints real quick,

97
00:07:10.087 --> 00:07:14.560
Gotta grab the right stuff and we'll set
it to those pieces, so the constraints

98
00:07:14.560 --> 00:07:18.388
are still there I just had to snap and
show the right part of the grid.

99
00:07:18.388 --> 00:07:22.693
And then we'll take this frame and

100
00:07:22.693 --> 00:07:27.737
you can see that now I
can get in a given one

101
00:07:27.737 --> 00:07:35.780
because I can make this also
a live coding landscape, right?

102
00:07:35.780 --> 00:07:40.034
So now as I make more frames, I can apply
the correct grid just by picking the grids

103
00:07:40.034 --> 00:07:41.485
I've decided that I want.

104
00:07:41.485 --> 00:07:44.712
And then theoretically,
as I'm copying these frames through,

105
00:07:44.712 --> 00:07:48.348
I can just apply the right grids and
see all the different views to make sure

106
00:07:48.348 --> 00:07:50.594
everything behaves the way
that I want it to.

107
00:07:50.594 --> 00:07:52.740
Everything's looking pretty good.

108
00:07:54.760 --> 00:07:58.447
&gt;&gt; Is there a way to tell Figma to use
different grids depending on portrait or

109
00:07:58.447 --> 00:07:59.110
landscape?

110
00:08:00.170 --> 00:08:02.380
&gt;&gt; No, not presently, right?

111
00:08:02.380 --> 00:08:04.849
There's a whole bunch of new
features coming all the time.

112
00:08:04.849 --> 00:08:09.689
One of the things that you can't do yet
that I wish, if I have a feature request,

113
00:08:09.689 --> 00:08:11.784
if anyone from Figma is watching,

114
00:08:11.784 --> 00:08:15.127
is there's no sense of
effectively cascading right?

115
00:08:15.127 --> 00:08:18.096
And so I would love to set
properties on a frame and

116
00:08:18.096 --> 00:08:21.574
have the things in there kinda
be able to like inherit, or

117
00:08:21.574 --> 00:08:24.920
at least be able to tell
the properties of its parents.

118
00:08:24.920 --> 00:08:28.627
So for instance, yeah,
if portrait use this grid,

119
00:08:28.627 --> 00:08:32.166
if landscape use the other one,
or if dark mode and

120
00:08:32.166 --> 00:08:37.160
I drag in a bunch of things use the dark
mode version of that component.

121
00:08:37.160 --> 00:08:39.179
When we get into components later,

122
00:08:39.179 --> 00:08:43.687
there are a bunch of things where I wish
that like right now each layer is kind of,

123
00:08:43.687 --> 00:08:47.995
they know about the constraints, but
l they don't really know about a lot of

124
00:08:47.995 --> 00:08:51.940
the other properties of the frame
that kind of surrounds it, right?

125
00:08:51.940 --> 00:08:56.882
They effectively like the metaphor that
you could abuse Is the idea of these

126
00:08:56.882 --> 00:09:01.666
are not props that the parent react
component passes into the child react

127
00:09:01.666 --> 00:09:03.330
component, right?

128
00:09:03.330 --> 00:09:06.070
So right now you can't.

129
00:09:06.070 --> 00:09:09.727
That said, looking at the number
of features that have changed

130
00:09:09.727 --> 00:09:14.074
in the last year, I wouldn't be shocked
if one day that feature shelter but

131
00:09:14.074 --> 00:09:16.500
at the time of this recording you can't.

