WEBVTT

1
00:00:00.450 --> 00:00:05.466
We have come to the end of a very
intense day of trying to wrap our heads

2
00:00:05.466 --> 00:00:10.746
around some perhaps very different and
new concepts about programming

3
00:00:10.746 --> 00:00:15.586
that make the act of programming
feel pretty different from how we

4
00:00:15.586 --> 00:00:21.220
might be used to it when we're
thinking about functions, purity.

5
00:00:21.220 --> 00:00:26.497
Side effects, things like that instead of
commands and imperative statements, so

6
00:00:26.497 --> 00:00:32.060
let's take a moment to reflect on all of
the amazing stuff that we have done today.

7
00:00:32.060 --> 00:00:34.900
We covered a bunch of stuff.

8
00:00:34.900 --> 00:00:39.500
We covered pure functions,
what they are how to identify them.

9
00:00:39.500 --> 00:00:41.680
What red flags to look for?

10
00:00:41.680 --> 00:00:46.243
How to avoid side effects, and
what side effects even are so

11
00:00:46.243 --> 00:00:51.995
how side effects are anything that
a function does that talks to the outside

12
00:00:51.995 --> 00:00:57.954
world other than taking its input
arguments and returning its output value.

13
00:00:57.954 --> 00:01:02.816
We also looked at some of the key
kind of techniques and tools and

14
00:01:02.816 --> 00:01:07.772
also consequences of what it means
to work with pure functions,

15
00:01:07.772 --> 00:01:10.270
and avoid side effects.

16
00:01:10.270 --> 00:01:14.754
So we looked at things using recursion,
instead of iteration,

17
00:01:14.754 --> 00:01:18.610
to run the same chunk
of code multiple times.

18
00:01:18.610 --> 00:01:23.627
We looked at using higher order functions
which take functions as values or

19
00:01:23.627 --> 00:01:26.290
return functions as outputs.

20
00:01:26.290 --> 00:01:31.505
And we looked at how to, break functions
down break complex functions down

21
00:01:31.505 --> 00:01:36.636
into simple ones how the concept of
closure allows us to kind of remember or

22
00:01:36.636 --> 00:01:41.240
lock in certain values certain
arguments to a function.

23
00:01:41.240 --> 00:01:45.958
And then how to build up tiny, small
single argument functions into complex

24
00:01:45.958 --> 00:01:51.130
programs using function composition and
things like pipelining.

25
00:01:51.130 --> 00:01:54.829
And then we also talked a lot
about mutating data and

26
00:01:54.829 --> 00:01:57.270
how we should not do that.

27
00:01:57.270 --> 00:02:00.753
And we just now saw some ways
some techniques and some tools,

28
00:02:00.753 --> 00:02:03.670
some libraries that we
can use in JavaScript.

29
00:02:03.670 --> 00:02:07.130
To make sure we avoid
mutating any of our data,

30
00:02:07.130 --> 00:02:12.103
because that is certainly gonna
help us with the predictability,

31
00:02:12.103 --> 00:02:16.542
the testability, the debug ability,
and just the general

32
00:02:16.542 --> 00:02:22.650
understandability [LAUGH] Of the code and
the programs that we're writing.

33
00:02:22.650 --> 00:02:27.157
When we do functional programming,
because that is our whole objective,

34
00:02:27.157 --> 00:02:31.878
functional programming can help us
write really predictable, really safe,

35
00:02:31.878 --> 00:02:34.739
really dependable and
testable programmes and

36
00:02:34.739 --> 00:02:39.315
hopefully make our lives as developers
a little bit easier even if we're not

37
00:02:39.315 --> 00:02:43.322
doing super strict hundred percent
functional programming, and

38
00:02:43.322 --> 00:02:47.256
we're just working in a few ideas
from functional programming,

39
00:02:47.256 --> 00:02:52.390
maybe I shouldn't mutate this array,
maybe I should return a new one.

40
00:02:52.390 --> 00:02:56.734
So that is a hope that now that
we have a few key ideas and

41
00:02:56.734 --> 00:03:02.046
tools in our toolbox to help us
think like functional programmers

42
00:03:02.046 --> 00:03:07.938
to understand times when functional
programming is a really good fit for

43
00:03:07.938 --> 00:03:14.504
problems, and to have some ideas of what
we might want to explore in more detail or

44
00:03:14.504 --> 00:03:20.090
learn more about next so
that we can continue our journey.

45
00:03:20.090 --> 00:03:23.040
So let's take a moment to think
about those questions together.

46
00:03:23.040 --> 00:03:24.640
What are we taking away today?

47
00:03:24.640 --> 00:03:28.868
What are some key ideas and
some exciting new things that we

48
00:03:28.868 --> 00:03:34.310
wanna look into that we're walking
away from this workshop with?

49
00:03:34.310 --> 00:03:35.340
Would anybody like to share?

50
00:03:36.480 --> 00:03:41.005
&gt;&gt; This is as exciting because I've
been learning React lately and

51
00:03:41.005 --> 00:03:46.940
trying to learn class based components
versus function based components.

52
00:03:46.940 --> 00:03:52.379
I was realizing that the same thing you
mentioned before understanding this and

53
00:03:52.379 --> 00:03:55.360
prototypes was kind of mind boggling.

54
00:03:55.360 --> 00:04:00.289
So cleaner components that
are functional components is

55
00:04:00.289 --> 00:04:05.218
somewhat similar to the idea
of functional programming I

56
00:04:05.218 --> 00:04:10.351
believe in these concepts helped
me to think about building

57
00:04:10.351 --> 00:04:16.410
one function to solve one portion
of my input, output problem.

58
00:04:16.410 --> 00:04:17.969
So build that chain so

59
00:04:17.969 --> 00:04:22.050
I can have pipelines that
create the result that I want.

60
00:04:23.410 --> 00:04:24.550
&gt;&gt; Awesome, awesome.

61
00:04:24.550 --> 00:04:29.679
So yeah, just to recap that,
especially coming from the world of React,

62
00:04:29.679 --> 00:04:34.810
where we have kind of the class based
react components versus the hooks and

63
00:04:34.810 --> 00:04:39.943
function based react components,
understanding those differences and

64
00:04:39.943 --> 00:04:45.322
why might be advantageous to work with
those functional style, is something

65
00:04:45.322 --> 00:04:50.785
that is maybe very closely related to
the contrast between object oriented and

66
00:04:50.785 --> 00:04:55.586
imperative code and functional code and
also taking away that we're

67
00:04:55.586 --> 00:05:00.552
thinking about our programs in terms
of those data transformations and

68
00:05:00.552 --> 00:05:06.500
how we can really isolate them so that we
write functions that just do one thing.

69
00:05:06.500 --> 00:05:09.994
One operation on one input,
getting one output, and

70
00:05:09.994 --> 00:05:15.760
then put those together through pipelines
to create more complex programs.

71
00:05:15.760 --> 00:05:17.100
Amazing, amazing points.

72
00:05:18.890 --> 00:05:20.840
Anyone else have takeaways to share?

73
00:05:21.940 --> 00:05:25.563
&gt;&gt; I think the pipelining where it
is very similar to a Unix pipeline,

74
00:05:25.563 --> 00:05:28.230
that's where something really clicked for
me.

75
00:05:29.640 --> 00:05:32.980
I might just be because I really come
from a server management background.

76
00:05:32.980 --> 00:05:36.100
But that was the point
where that's how it works.

77
00:05:36.100 --> 00:05:37.520
So that's the logic behind it.

78
00:05:37.520 --> 00:05:38.400
&gt;&gt; Yeah, definitely.

79
00:05:38.400 --> 00:05:42.511
So for folks that have spent a lot of time
at the command line or working with Unix

80
00:05:42.511 --> 00:05:46.937
systems, and pipelining fields sort of
second nature when you're piping commands

81
00:05:46.937 --> 00:05:50.425
from one end to the next that is
very similar in concept to how we're

82
00:05:50.425 --> 00:05:54.700
thinking about functional programming
where each command does one thing.

83
00:05:54.700 --> 00:05:58.992
It takes an input, it gives an output,
and we can put them together in these

84
00:05:58.992 --> 00:06:03.870
pipelines in these composed programs as
it were to get more complex work done.

85
00:06:03.870 --> 00:06:07.576
So yes, absolutely great to see
connections being drawn between other

86
00:06:07.576 --> 00:06:11.720
areas of programming that might not
have anything to do with JavaScript.

87
00:06:11.720 --> 00:06:14.381
Because functional programming
pops up again and again and

88
00:06:14.381 --> 00:06:17.990
some of those key ideas can pop up even
in places where you might not expect it.

89
00:06:17.990 --> 00:06:20.360
So keep an eye out for those similarities.

90
00:06:20.360 --> 00:06:21.240
Really great point.

91
00:06:21.240 --> 00:06:22.550
Thank you.

92
00:06:22.550 --> 00:06:27.150
&gt;&gt; I assume that this is
functional programming is kind of

93
00:06:27.150 --> 00:06:31.130
how you would build a strong and
secure API.

94
00:06:31.130 --> 00:06:34.281
One that, one that can handle when they,

95
00:06:34.281 --> 00:06:39.506
the input is going to be this,
you're going to get the same output for

96
00:06:39.506 --> 00:06:42.950
every single endpoint
that the person hits.

97
00:06:42.950 --> 00:06:46.120
It's going to give that exact output.

98
00:06:46.120 --> 00:06:47.090
Is that is that true?

99
00:06:47.090 --> 00:06:52.053
Do you think API when you create an API
you should be thinking in terms of

100
00:06:52.053 --> 00:06:54.005
Functional programming.

101
00:06:54.005 --> 00:06:58.259
&gt;&gt; Should you be thinking in terms
of functional programming and

102
00:06:58.259 --> 00:07:02.330
deterministic kind of input and
output out functions?

103
00:07:02.330 --> 00:07:06.080
When you're thinking
about designing API's?

104
00:07:06.080 --> 00:07:10.840
I think that it is a great teacher as it
were that functional programming can teach

105
00:07:10.840 --> 00:07:14.760
us a lot that is super useful for
implementing things like API's.

106
00:07:16.110 --> 00:07:19.904
Again so API's often have a lot of
kind of side effecting operations that

107
00:07:19.904 --> 00:07:20.660
we need to do.

108
00:07:20.660 --> 00:07:25.980
Maybe we need to store things to databases
or maybe we need to, output things.

109
00:07:25.980 --> 00:07:31.561
But again, we can push all of that into
a certain outside edge of our program and

110
00:07:31.561 --> 00:07:36.650
think instead about okay, what
are the computations that I need to do?

111
00:07:36.650 --> 00:07:42.319
What are the data structures the data
values that I have coming in and

112
00:07:42.319 --> 00:07:47.789
what are the things that somebody
needs me to give them back out and

113
00:07:47.789 --> 00:07:51.189
thinking about that in, in any kind of.

114
00:07:53.110 --> 00:07:56.310
Program that we're trying to
write where people are asking us,

115
00:07:56.310 --> 00:08:01.290
hey, I want this resource or hey, tell me
what's going on with that thing over here.

116
00:08:01.290 --> 00:08:06.210
Give me this this particular I don't
know cat picture on the internet.

117
00:08:06.210 --> 00:08:11.056
Those are really great cases where where
we can you can take a lot of value from

118
00:08:11.056 --> 00:08:15.903
these functional programming concepts
of how can we think about this less in

119
00:08:15.903 --> 00:08:20.748
terms of what steps do I need to take
to do this thing, imperative style, and

120
00:08:20.748 --> 00:08:23.450
more in terms of what are my inputs.

121
00:08:23.450 --> 00:08:25.300
What are my outputs?

122
00:08:25.300 --> 00:08:28.998
And how can I break that
process down into smaller

123
00:08:28.998 --> 00:08:34.710
operations that are easier to write and
easier to think about?

124
00:08:34.710 --> 00:08:35.580
So absolutely.

125
00:08:37.060 --> 00:08:41.710
And personally,
I think it's a really great mindset.

126
00:08:41.710 --> 00:08:47.020
To get into, when we're thinking
about any kind of program, right?

127
00:08:47.020 --> 00:08:51.546
Even if it is just to ask myself, should
I be thinking about this in terms of

128
00:08:51.546 --> 00:08:55.926
the steps that I need to take, or
should I be thinking about this in terms

129
00:08:55.926 --> 00:09:01.160
of the data transformations that need
to happen, the inputs and the outputs?

130
00:09:01.160 --> 00:09:07.968
And even if the answer is, what in this
case, I actually think an imperative step,

131
00:09:07.968 --> 00:09:13.920
do this do that oriented kind of
mindset is more helpful for me here.

132
00:09:13.920 --> 00:09:18.410
Taking that moment to reflect and think,
will thinking functionally helped me

133
00:09:18.410 --> 00:09:22.631
solve this problem and help make my
system diagram simpler, for example,

134
00:09:22.631 --> 00:09:25.529
is a really great question
to be asking ourselves.

135
00:09:27.880 --> 00:09:29.120
Excellent points, everybody.

136
00:09:32.270 --> 00:09:35.022
Okay, well,
I don't know about you all, but

137
00:09:35.022 --> 00:09:39.210
I think we've really stretched
our brain muscles today.

138
00:09:39.210 --> 00:09:43.220
And so, it is always good to give
your brain a little bit of a rest.

139
00:09:43.220 --> 00:09:49.010
But the most important thing is
that we have all come together.

140
00:09:49.010 --> 00:09:51.951
Today.
We've thought really hard about a lot of

141
00:09:51.951 --> 00:09:53.610
really tough problems.

142
00:09:53.610 --> 00:09:57.100
And I just wanna thank you all so
much for being here.

143
00:09:57.100 --> 00:10:01.644
Whether we are doing this all together
in this call or whether you are perhaps

144
00:10:01.644 --> 00:10:05.833
watching the videos later and
thinking through this on your own time,

145
00:10:05.833 --> 00:10:09.390
thank you so much for
taking the time, taking the energy.

146
00:10:09.390 --> 00:10:12.330
It takes a lot of energy to
stretch your brain like this.

147
00:10:12.330 --> 00:10:17.210
To try to wrap our heads around these,
these ideas and these concepts and

148
00:10:17.210 --> 00:10:18.980
this new mindset.

149
00:10:18.980 --> 00:10:23.331
So thank you so much for
coming along on this journey through some

150
00:10:23.331 --> 00:10:28.244
functional JavaScript first steps with
me I also want to give a huge shout

151
00:10:28.244 --> 00:10:33.000
out to all the folks at the Recurse
Center, a programming community in

152
00:10:33.000 --> 00:10:38.024
New York who helped me first wrap my
head around so many of these concepts.

153
00:10:38.024 --> 00:10:42.867
And want to give a huge thank you to
front end masters for having me and for

154
00:10:42.867 --> 00:10:47.810
observable for making all of these
notebooks and my time here possible.

155
00:10:48.810 --> 00:10:52.330
But most of all, thank you all for
struggling through these exercises and

156
00:10:52.330 --> 00:10:54.590
through these tough concepts.

157
00:10:54.590 --> 00:10:59.850
And please make sure this isn't the end
of your functional programming journey.

158
00:10:59.850 --> 00:11:03.690
The Learning continues
indefinitely forever.

159
00:11:03.690 --> 00:11:09.729
So there is another notebook in this
collection with some references and

160
00:11:09.729 --> 00:11:11.910
further reading for you.

161
00:11:14.360 --> 00:11:17.870
So at the end of this collection
you'll find a next steps notebook.

162
00:11:21.420 --> 00:11:23.079
You'll find this next steps notebook.

163
00:11:24.560 --> 00:11:28.420
Here with a lot of references and
further reading,

164
00:11:28.420 --> 00:11:32.820
including some of the things
that I've mentioned today,

165
00:11:32.820 --> 00:11:38.297
including some other front end masters
courses you might want to take and

166
00:11:38.297 --> 00:11:42.876
some more in depth resources on
some of these more individual

167
00:11:42.876 --> 00:11:46.236
specific topics that we've gone through.

168
00:11:46.236 --> 00:11:50.696
Also some links to some other libraries
and languages that you might want to check

169
00:11:50.696 --> 00:11:55.410
out for things like functional
programming, utilities and JavaScript.

170
00:11:55.410 --> 00:11:59.203
So I hope that this gives you
some good starting points for

171
00:11:59.203 --> 00:12:02.430
your functional JavaScript next steps.

172
00:12:02.430 --> 00:12:06.187
Now that we have taken our first
steps into understanding what is

173
00:12:06.187 --> 00:12:10.989
going on in this wild world of functional
programming and how can we start applying

174
00:12:10.989 --> 00:12:15.110
some of those ideas to our own code
right in our JavaScript code bases.

175
00:12:17.050 --> 00:12:20.500
So thank you all so much,
and we'll see you next time.

