WEBVTT

1
00:00:00.052 --> 00:00:04.773
Okay, in our next section we're gonna
talk about closure, function closure, and

2
00:00:04.773 --> 00:00:05.779
what that means.

3
00:00:05.779 --> 00:00:10.709
This may be a term that you've heard
kind of thrown around in JavaScript or

4
00:00:10.709 --> 00:00:12.260
it might be new.

5
00:00:12.260 --> 00:00:14.196
And again, the terminology is not so

6
00:00:14.196 --> 00:00:17.140
much the important thing as
the takeaways of the ideas.

7
00:00:19.570 --> 00:00:23.920
Keep in mind when we talked
about higher order functions,

8
00:00:23.920 --> 00:00:29.514
we said that functions can return other
functions as outputs just like they

9
00:00:29.514 --> 00:00:34.950
can take in other functions as inputs
like map and filter and reduced it.

10
00:00:36.240 --> 00:00:38.474
Now here's the other thing,

11
00:00:38.474 --> 00:00:43.220
within the body of a function
you can define another function.

12
00:00:44.260 --> 00:00:48.590
And because the body of
a function has its own scope,

13
00:00:48.590 --> 00:00:52.142
its own notion of the values of variables.

14
00:00:52.142 --> 00:00:54.997
When you define an inner function,

15
00:00:54.997 --> 00:01:00.470
that inner function has access
to the outer function scope.

16
00:01:00.470 --> 00:01:04.830
It has access to whatever values
that outer function is working with.

17
00:01:06.870 --> 00:01:11.018
So if you define a function
within another function,

18
00:01:11.018 --> 00:01:17.460
when you return out that inner function,
an interesting thing happens.

19
00:01:17.460 --> 00:01:23.141
Which is that you have the possibility for
that inner function once

20
00:01:23.141 --> 00:01:28.214
it's returned to remember values
from the scope in which it

21
00:01:28.214 --> 00:01:34.621
was defined even if those are not being
passed in directly to the function.

22
00:01:34.621 --> 00:01:39.129
[SOUND] What does that even mean?

23
00:01:39.129 --> 00:01:42.370
So that's the conceptual.

24
00:01:42.370 --> 00:01:44.640
Let's take a look at what that looks like.

25
00:01:45.730 --> 00:01:49.393
Here is an example of a really simple and

26
00:01:49.393 --> 00:01:55.165
perhaps not the most useful, but
kind of cool little function

27
00:01:55.165 --> 00:02:00.287
called makeAdjectifier which
takes in an adjective.

28
00:02:00.287 --> 00:02:03.276
This function is gonna define,

29
00:02:03.276 --> 00:02:08.710
its defining here another
function which takes in a noun.

30
00:02:09.830 --> 00:02:16.226
And then because it has access to this
scope of this makeAdjectifier function,

31
00:02:16.226 --> 00:02:22.058
it's going to return a string that
uses both the adjective and the noun.

32
00:02:22.058 --> 00:02:26.581
So what happens when I call
makeAdjectifier with an adjective?

33
00:02:26.581 --> 00:02:31.657
If I make a new function called coolify,
coolify is what

34
00:02:31.657 --> 00:02:39.010
I'm gonna name the function returned by
makeAdjectifier when I call it on cool.

35
00:02:40.360 --> 00:02:42.720
Now coolify is a function.

36
00:02:42.720 --> 00:02:45.140
Remember, this function
returns a function.

37
00:02:45.140 --> 00:02:50.026
coolify is now something that I can
apply to a noun like workshop and

38
00:02:50.026 --> 00:02:52.500
get out a string cool workshop.

39
00:02:52.500 --> 00:02:56.100
I can apply it to a different noun
drink and get out a string cool drink.

40
00:02:58.000 --> 00:03:04.533
And what this means is that now I can
call coolify on whatever nouns I want and

41
00:03:04.533 --> 00:03:09.617
it will always remember that
the adjective it's supposed

42
00:03:09.617 --> 00:03:14.200
to add is cool not rad,
awesome, or whatever else.

43
00:03:15.480 --> 00:03:20.268
And this is interesting because I'm no
longer in the context in the scope of

44
00:03:20.268 --> 00:03:22.410
makeAdjectifier.

45
00:03:22.410 --> 00:03:26.901
But because JavaScript supports
the notion of closures,

46
00:03:26.901 --> 00:03:33.222
the notion of these inner functions that
are able to what's called close over some

47
00:03:33.222 --> 00:03:38.920
value that exists in the scope of
the function in which they were defined.

48
00:03:40.060 --> 00:03:45.130
JavaScript is a language that supports
this meaning that this function now,

49
00:03:45.130 --> 00:03:50.356
even though makeAdjectifier is done
running, I am no longer in that function,

50
00:03:50.356 --> 00:03:54.106
it has retained that scope,
it can remember that value.

51
00:03:54.106 --> 00:03:59.462
So in a functional world, we said
we're no longer working with state,

52
00:03:59.462 --> 00:04:03.837
we're no longer working with
values changing over time,

53
00:04:03.837 --> 00:04:06.535
and we're not remembering state.

54
00:04:06.535 --> 00:04:11.296
But in a closure,
we have kind of a loophole for that.

55
00:04:11.296 --> 00:04:16.844
We have sort of a way to remember
something that is not an explicit

56
00:04:16.844 --> 00:04:21.779
argument to the function that
nevertheless is useful for

57
00:04:21.779 --> 00:04:26.509
its computation without
resorting to side effects for

58
00:04:26.509 --> 00:04:30.855
example, reading a global
adjective variable.

59
00:04:30.855 --> 00:04:34.914
So this becomes a really useful
tool in functional programming,

60
00:04:34.914 --> 00:04:38.990
which is what we're gonna dig
into in this section's exercise.

