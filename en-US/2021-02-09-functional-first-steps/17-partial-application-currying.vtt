WEBVTT

1
00:00:00.400 --> 00:00:04.817
So what this lets us do,
is it lets us take a function,

2
00:00:04.817 --> 00:00:11.650
which takes multiple arguments, and
kind of lock in some of the values.

3
00:00:11.650 --> 00:00:15.890
Another way of saying this is it
lets us partially apply a function.

4
00:00:17.380 --> 00:00:22.730
Apply in the functional programming world
is kind of a word like call a function.

5
00:00:22.730 --> 00:00:28.076
And so partial application is this
notion of kind of remembering

6
00:00:28.076 --> 00:00:34.511
certain arguments and being able to
then reuse functions more easily because

7
00:00:34.511 --> 00:00:40.560
I don't have to [COUGH] keep passing
in the same value over and over again.

8
00:00:40.560 --> 00:00:41.911
Cool, cool, cool, cool.

9
00:00:44.262 --> 00:00:48.420
There's a related concept in
functional programming called currying.

10
00:00:49.970 --> 00:00:55.778
Currying is the process of taking
a multi-argument function,

11
00:00:55.778 --> 00:01:01.800
a function that takes in multiple
values as its input arguments and

12
00:01:01.800 --> 00:01:08.252
breaking it up in a sense, into
a series of single argument functions,

13
00:01:08.252 --> 00:01:12.985
which successively,
remember the outer scope, so

14
00:01:12.985 --> 00:01:18.362
that I can partially apply each
of those multiple arguments

15
00:01:18.362 --> 00:01:23.415
to create again more reusable
functions that I can use to

16
00:01:23.415 --> 00:01:28.500
create more complex programs
out of simple functions.

17
00:01:30.380 --> 00:01:33.583
Let's take a look at some code because
me yapping is not gonna help this

18
00:01:33.583 --> 00:01:34.520
setting very well.

19
00:01:35.630 --> 00:01:36.510
All right.

20
00:01:36.510 --> 00:01:42.020
Here I've got my old greet function,
if you remember from earlier,

21
00:01:42.020 --> 00:01:48.590
which takes in a greeting and a name, and
returns out, hi Alan or Howdy, Alonzo.

22
00:01:48.590 --> 00:01:53.070
Now what I'm doing is I'm making
a curried version of that greet function,

23
00:01:53.070 --> 00:01:54.890
which I'll call curly curry.

24
00:01:54.890 --> 00:02:00.568
Greet [COUGH] which is a single argument
function, it takes in a greeting,

25
00:02:00.568 --> 00:02:06.339
then it returns another single argument
function, which takes in a name,

26
00:02:06.339 --> 00:02:11.310
and returns the same result as
our original greet function did.

27
00:02:12.670 --> 00:02:17.334
So now, if I wanna greet lots of
people with the same greeting,

28
00:02:17.334 --> 00:02:22.878
I don't have to keep passing in that
greeting over and over and over again,

29
00:02:22.878 --> 00:02:28.246
I can create a new function like
greetItalion sort of function, that I am

30
00:02:28.246 --> 00:02:34.320
going to create by calling curryGreet on
the greeting that I want to use like Ciao.

31
00:02:35.860 --> 00:02:40.080
And now I have a function that
I can call on anybody's name.

32
00:02:40.080 --> 00:02:44.781
And because of closure,
this inner function remembers that

33
00:02:44.781 --> 00:02:49.757
Ciao that greeting, and
is going to be able to output the desired

34
00:02:49.757 --> 00:02:55.130
string even though I didn't
have to keep passing Ciao in.

35
00:02:55.130 --> 00:02:59.264
And so similarly, we can see it again in
this example, I can create like a tex and

36
00:02:59.264 --> 00:03:01.760
greeting bypassing Howdy
to my current greet.

37
00:03:02.880 --> 00:03:07.546
And now I can greet all kinds of people
with my Howdy greeting without needing to

38
00:03:07.546 --> 00:03:12.213
repeat myself and keep passing in that
same greeting argument over and over and

39
00:03:12.213 --> 00:03:13.005
over again.

40
00:03:15.036 --> 00:03:18.326
So these concepts kind of go hand in hand.

41
00:03:18.326 --> 00:03:21.480
Closure being, the concept through which,

42
00:03:21.480 --> 00:03:25.890
that inner function can remember,
the outer function scope.

43
00:03:27.130 --> 00:03:32.242
And currying, being the process of
taking that multi-arg function,

44
00:03:32.242 --> 00:03:37.864
and breaking it down Into a series of
single argument functions, which thanks

45
00:03:37.864 --> 00:03:43.146
to closure, allow me to partially
apply that multi argument function and

46
00:03:43.146 --> 00:03:47.831
create a version that remembers
the first argument I passed in and

47
00:03:47.831 --> 00:03:51.957
gives me a new function I can
call on the second argument.

48
00:03:51.957 --> 00:03:56.945
So these are a series of concepts
that kind of go hand in hand to allow

49
00:03:56.945 --> 00:04:00.120
us to make more modular functions.

50
00:04:00.120 --> 00:04:05.445
They allow us to break down complex
functions in a way into sort of little

51
00:04:05.445 --> 00:04:11.240
Lego blocks that we can then build up
together into other complex functions.

52
00:04:12.240 --> 00:04:16.202
So these are some of these concepts that
when you get really into the functional

53
00:04:16.202 --> 00:04:20.050
programming world, they're gonna
start to become second nature.

54
00:04:20.050 --> 00:04:23.750
But for now,
they might feel a little bit strange.

55
00:04:23.750 --> 00:04:28.068
And it also might look a little bit
strange because sometimes we'll have a lot

56
00:04:28.068 --> 00:04:31.855
of functions successively calling
arguments one after the other,

57
00:04:31.855 --> 00:04:36.920
instead of passing in all those arguments
to a single call to the function.

58
00:04:36.920 --> 00:04:41.073
But if we can wrap our heads around this
we'll be in great shape to go on and

59
00:04:41.073 --> 00:04:45.429
understand some of the more in-depth
ways that we can work with closures and

60
00:04:45.429 --> 00:04:48.903
currying and partial application,
in more intermediate or

61
00:04:48.903 --> 00:04:53.633
advanced functional programming courses,
or tutorials, or things like that.

62
00:04:53.633 --> 00:04:58.550
Why are we doing it like this instead
of just using our original function and

63
00:04:58.550 --> 00:05:01.673
passing in the two arguments,
the greeting and

64
00:05:01.673 --> 00:05:05.358
then the name each time that
we wanna greet a new person?

65
00:05:05.358 --> 00:05:09.358
Is that the question?

66
00:05:09.358 --> 00:05:14.454
&gt;&gt; Yeah, it was not really, so
if you look the last few things here,

67
00:05:14.454 --> 00:05:18.440
the pair button,
great text and agreed texts.

68
00:05:18.440 --> 00:05:20.220
We'll repeat that again.

69
00:05:20.220 --> 00:05:23.020
&gt;&gt; Yeah,
&gt;&gt; Instead of us just this let's do that

70
00:05:23.020 --> 00:05:27.415
things and we guess that said that
the strings Alonzo prove it up.

71
00:05:27.415 --> 00:05:31.364
Howdy, comma, and

72
00:05:31.364 --> 00:05:35.670
then Alonzo
&gt;&gt; Sorry, is the question whyare we,

73
00:05:35.670 --> 00:05:40.360
why do we have such a simple function
when we could just write the string?

74
00:05:40.360 --> 00:05:42.440
&gt;&gt; Yeah
&gt;&gt; That's a good question.

75
00:05:42.440 --> 00:05:46.377
And in this case, this is a really,
really simple example that's just for

76
00:05:46.377 --> 00:05:50.260
demonstration purposes,
just to try to drive the idea through.

77
00:05:50.260 --> 00:05:56.800
But this function is not an immediately
very useful function, I agree.

78
00:05:56.800 --> 00:06:01.097
[LAUGH] But as we'll see in the next
exercise, there are a lot of cases where

79
00:06:01.097 --> 00:06:05.461
being able to split up arguments like
this, and being able to lock in some of

80
00:06:05.461 --> 00:06:10.280
those arguments so that we have a function
that we can reuse again and again.

81
00:06:10.280 --> 00:06:15.230
Will be, useful because the computation
is more complex than just smashing some

82
00:06:15.230 --> 00:06:17.020
strings together.

83
00:06:17.020 --> 00:06:21.651
So in this case, the functions here on
these slides are really simple just

84
00:06:21.651 --> 00:06:23.710
to try to convey the point.

85
00:06:23.710 --> 00:06:28.180
And this is probably not the type of code
that any of us need to write very often.

86
00:06:28.180 --> 00:06:32.325
But hopefully in the next exercises,
you'll get a sense for

87
00:06:32.325 --> 00:06:37.689
something that maybe is a little bit also
contrived, but hopefully also [LAUGH]

88
00:06:37.689 --> 00:06:43.216
can convey why you'd wanna break down
operations into really simple chunks, so

89
00:06:43.216 --> 00:06:48.760
that you can use them over and over again
without having to repeat yourself a lot.

