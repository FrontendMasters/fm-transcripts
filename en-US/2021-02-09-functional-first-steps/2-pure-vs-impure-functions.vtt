WEBVTT

1
00:00:00.350 --> 00:00:03.437
Let's return to the concept
of pure functions and

2
00:00:03.437 --> 00:00:07.184
just make sure that we are all on
the same page about what a pure

3
00:00:07.184 --> 00:00:11.104
function looks like, and
what a not pure function looks like.

4
00:00:11.104 --> 00:00:16.189
So right here I have two
versions of a similar program,

5
00:00:16.189 --> 00:00:22.270
a very simple program,
that basically outputs a greeting like,

6
00:00:22.270 --> 00:00:25.603
hello, Alonzo, or hello, Alan.

7
00:00:25.603 --> 00:00:31.337
Making reference to two of my
functional programming heroes,

8
00:00:31.337 --> 00:00:34.269
Alonzo Church and Alan Turing.

9
00:00:34.269 --> 00:00:38.922
I'd like everybody to take a moment
to take a look at these two

10
00:00:38.922 --> 00:00:44.043
versions of this code, and
think about what the differences are.

11
00:00:44.043 --> 00:00:48.333
And keeping in mind that,
pure functions have no side effects.

12
00:00:48.333 --> 00:00:51.030
In the not pure version,
what side effects do you see?

13
00:00:52.460 --> 00:00:57.429
Okay, so we had a great comment
that in the not pure function,

14
00:00:57.429 --> 00:01:00.780
it is kind of the hello is baked in.

15
00:01:00.780 --> 00:01:07.170
So it is not perhaps so,
extensible to other types of greetings.

16
00:01:07.170 --> 00:01:12.127
Now, we're gonna talk a lot later about
how functional programming helps us

17
00:01:12.127 --> 00:01:14.670
with reusability and code reuse.

18
00:01:14.670 --> 00:01:18.843
But in this case in this very simple
example, that is sort of something that

19
00:01:18.843 --> 00:01:24.030
the two versions have in common,
they both have this hello string baked in.

20
00:01:24.030 --> 00:01:28.212
So in this case, although it is
absolutely a great point that

21
00:01:28.212 --> 00:01:33.060
functional programming helps
us write more reusable code.

22
00:01:33.060 --> 00:01:38.213
In this case, the baked in hello
is not technically a side effect,

23
00:01:38.213 --> 00:01:42.620
because it is not dependent
on the outside world.

24
00:01:42.620 --> 00:01:49.125
Each of these functions, they have that
hello kind of internally to them, so

25
00:01:49.125 --> 00:01:55.146
that's part of the operation,
the computation that they're doing.

26
00:01:55.146 --> 00:01:58.479
It doesn't require, let's say,

27
00:01:58.479 --> 00:02:02.923
grabbing the greeting
from a global variable or

28
00:02:02.923 --> 00:02:09.491
pulling the greeting out of some API
endpoint or something like that.

29
00:02:09.491 --> 00:02:13.440
However, there is something kind of fishy
going on in the not pure function in

30
00:02:13.440 --> 00:02:15.020
that sense.

31
00:02:15.020 --> 00:02:16.160
Yeah, Jordan go ahead.

32
00:02:17.700 --> 00:02:22.139
&gt;&gt; In the not pure function, of course,
the side effect being if that

33
00:02:22.139 --> 00:02:26.263
function is called at a later
time when the variable changes,

34
00:02:26.263 --> 00:02:28.820
you might have an unexpected output.

35
00:02:29.980 --> 00:02:32.920
So the pure function you
have an expected output,

36
00:02:32.920 --> 00:02:37.630
you're gonna pass it one thing and
it's gonna return one thing.

37
00:02:37.630 --> 00:02:39.456
&gt;&gt; Absolutely, really great point.

38
00:02:39.456 --> 00:02:44.944
So Jordan mentioned that,
in the not pure function the name that's

39
00:02:44.944 --> 00:02:49.948
going to be output is being taken
from a global variable here,

40
00:02:49.948 --> 00:02:55.940
that was declared above the function
declaration, this name variable.

41
00:02:57.730 --> 00:03:02.041
And so, when I call this function
the first time I get an output, hello,

42
00:03:02.041 --> 00:03:06.320
Alonzo that's based on the value
of that name variable.

43
00:03:06.320 --> 00:03:10.696
But, let's say somebody else or maybe me
after I've forgotten what this function is

44
00:03:10.696 --> 00:03:14.980
for, goes along and changes the value of
that name variable replaces it with Alan.

45
00:03:16.360 --> 00:03:18.406
The next time that I call the function,

46
00:03:18.406 --> 00:03:22.630
because it's pulling from that global
variable, I now get a different output.

47
00:03:23.880 --> 00:03:27.931
And so, what we've just encountered is one

48
00:03:27.931 --> 00:03:32.099
really great red flag for
impure functions.

49
00:03:32.099 --> 00:03:37.889
Which is that, a pure function every
time you call it with the same

50
00:03:37.889 --> 00:03:43.807
arguments in this case, no arguments or
maybe the name argument.

51
00:03:43.807 --> 00:03:47.240
Every time you call it
with the same argument,

52
00:03:47.240 --> 00:03:51.036
you will get the same result,
that is a guarantee.

53
00:03:51.036 --> 00:03:55.555
Because, the result of that
function depends on nothing about

54
00:03:55.555 --> 00:04:00.740
the outside world,
only the arguments that are passed in.

55
00:04:00.740 --> 00:04:03.915
So, with the not pure
version of greet here,

56
00:04:03.915 --> 00:04:10.320
we do not have a pure function because I
can call this function the exact same way.

57
00:04:10.320 --> 00:04:14.478
I can call greet with no arguments
at one time and get one value, and

58
00:04:14.478 --> 00:04:19.170
at another time, I can call it the exact
same way and get a different value.

59
00:04:20.380 --> 00:04:24.070
And so,
there's a term here called deterministic.

60
00:04:24.070 --> 00:04:26.367
So a pure function is deterministic,

61
00:04:26.367 --> 00:04:30.440
meaning it's output is totally
determined by its inputs.

62
00:04:30.440 --> 00:04:34.860
And you will always get the same result
when you call the function with the same

63
00:04:34.860 --> 00:04:35.611
arguments.

64
00:04:37.386 --> 00:04:39.240
Really great point.

65
00:04:39.240 --> 00:04:42.651
So that is one thing we notice
about this not pure function.

66
00:04:42.651 --> 00:04:43.960
Erin, yes, go ahead.

67
00:04:43.960 --> 00:04:46.840
&gt;&gt; Did not do one has no input and
no output?

68
00:04:48.810 --> 00:04:52.920
&gt;&gt; No input and no output for
the not pure function, interesting.

69
00:04:52.920 --> 00:04:57.000
So no input,
meaning there it takes no arguments.

70
00:04:57.000 --> 00:05:02.513
Now that's true, it might be a little
bit of a yellow flag maybe for

71
00:05:02.513 --> 00:05:05.281
a function that takes no inputs.

72
00:05:05.281 --> 00:05:09.915
Because maybe what it actually needs to do
the computation is coming from the outside

73
00:05:09.915 --> 00:05:14.910
world, which as we just said, is not pure,
not a functional way to do things.

74
00:05:14.910 --> 00:05:15.433
But also,

75
00:05:15.433 --> 00:05:19.280
so we notice that there's no return
statement in the not pure greet function.

76
00:05:20.500 --> 00:05:25.580
In JavaScript that means there
is an implicit return undefined.

77
00:05:25.580 --> 00:05:30.253
But if we don't have a return statement,
that probably means that this function is

78
00:05:30.253 --> 00:05:33.750
doing something other
than returning its value.

79
00:05:33.750 --> 00:05:39.744
In this case, what is this function
doing other than returning its value?

80
00:05:39.744 --> 00:05:40.648
&gt;&gt; Logging.

81
00:05:40.648 --> 00:05:42.000
&gt;&gt; Logging, exactly.

82
00:05:42.000 --> 00:05:45.450
So in this case, we don't really
care about the return value.

83
00:05:45.450 --> 00:05:49.351
That's why we're okay with leaving
the keyword return out of it, and

84
00:05:49.351 --> 00:05:53.360
just getting our regular old
undefined as the return value.

85
00:05:53.360 --> 00:05:57.552
And instead what we're really interested
in is logging to the console,

86
00:05:57.552 --> 00:06:00.810
which is changing something
in the outside world.

87
00:06:00.810 --> 00:06:04.380
Printing a string like that to
the console is a side effect.

88
00:06:04.380 --> 00:06:09.437
So yes, no return statement or
not returning a value, huge red flag.

89
00:06:09.437 --> 00:06:13.096
But especially keeping in mind that,
logging or

90
00:06:13.096 --> 00:06:17.915
updating the world in any way other
than returning a value that is

91
00:06:17.915 --> 00:06:21.410
a violation of what we
set up here function is.

92
00:06:23.340 --> 00:06:30.910
And so, those are some great red flags for
identifying a not pure function.

93
00:06:32.060 --> 00:06:33.290
&gt;&gt; I have a question.

94
00:06:33.290 --> 00:06:34.110
&gt;&gt; Yes, question.

95
00:06:35.220 --> 00:06:40.262
&gt;&gt; Does this mean calling a function
within a function makes it not pure or

96
00:06:40.262 --> 00:06:45.221
is it just in this situation logging
of course is putting something to

97
00:06:45.221 --> 00:06:48.670
the console and that makes it appear?

98
00:06:48.670 --> 00:06:50.240
Very interesting question.

99
00:06:50.240 --> 00:06:53.679
So if you call a function
from within another function,

100
00:06:53.679 --> 00:06:56.320
does that make the outer function impure?

101
00:06:57.710 --> 00:07:02.320
So in functional programming,
when we're doing it really,

102
00:07:02.320 --> 00:07:07.286
really deliberately, we would
probably be passing in pretty much

103
00:07:07.286 --> 00:07:12.450
everything we need to work with
as an argument to the function.

104
00:07:12.450 --> 00:07:15.070
However, that would quickly
get very explosive.

105
00:07:15.070 --> 00:07:18.860
So sometimes it's a lot more convenient
to actually use globally defined

106
00:07:18.860 --> 00:07:21.940
functions from within other functions.

107
00:07:21.940 --> 00:07:27.028
And in that case, whether or
not the function that

108
00:07:27.028 --> 00:07:32.481
calls another function is
pure is also going to depend

109
00:07:32.481 --> 00:07:37.582
kind of on the purity of
the function its calling.

110
00:07:37.582 --> 00:07:41.136
So, if we are calling a function
that we know perhaps,

111
00:07:41.136 --> 00:07:45.793
because we're being really disciplined
about our function writing.

112
00:07:45.793 --> 00:07:49.383
Or perhaps because we're working in a
functional language that forces all of our

113
00:07:49.383 --> 00:07:51.090
functions to be pure.

114
00:07:51.090 --> 00:07:53.766
If we know that,
that inner function is pure, and

115
00:07:53.766 --> 00:07:56.957
that we're basically delegating
some computation to it,

116
00:07:56.957 --> 00:08:01.070
then that doesn't necessarily mean,
that we've got an impure function.

117
00:08:02.100 --> 00:08:04.647
Patrick
&gt;&gt; Yeah, so the pure function or

118
00:08:04.647 --> 00:08:08.330
the pure programmer doesn't
actually do anything.

119
00:08:08.330 --> 00:08:13.288
If I were to run that pure program, it
appears to me that it would just run and

120
00:08:13.288 --> 00:08:15.830
just not there is done nothing at all.

121
00:08:17.350 --> 00:08:22.790
&gt;&gt; We've just encountered the big
asterisk of functional programming.

122
00:08:22.790 --> 00:08:24.020
So Patrick raised the point.

123
00:08:25.840 --> 00:08:30.617
A pure function, if it's not allowed to do
anything in the world except return its

124
00:08:30.617 --> 00:08:33.470
output value,
it doesn't really do anything.

125
00:08:33.470 --> 00:08:37.970
I don't get any log output, I don't get my
profile picture updated on the website.

126
00:08:37.970 --> 00:08:43.550
I don't get the light to blink if I'm
working with LEDs or something like that.

127
00:08:43.550 --> 00:08:46.420
So I'm guessing
the question is what gives?

128
00:08:46.420 --> 00:08:49.220
How do we do anything in
functional programming?

129
00:08:50.260 --> 00:08:53.530
And this is a huge and
super important question, so

130
00:08:53.530 --> 00:08:55.665
thank you so much for raising it.

131
00:08:55.665 --> 00:09:00.219
How do you be productive as a computer
[LAUGH] programmer without ever doing side

132
00:09:00.219 --> 00:09:00.843
effects?

133
00:09:00.843 --> 00:09:03.945
Without ever writing things to consoles or

134
00:09:03.945 --> 00:09:08.347
storing things in databases or
updating things elsewhere?

135
00:09:08.347 --> 00:09:09.560
You don't.

136
00:09:09.560 --> 00:09:12.230
This is the big gotcha of
functional programming.

137
00:09:14.060 --> 00:09:17.615
When we're doing functional programming,

138
00:09:17.615 --> 00:09:23.328
we are concerned with the kind of
computational aspect of our programs.

139
00:09:23.328 --> 00:09:27.366
What functional programmers do
to be able to be productive, and

140
00:09:27.366 --> 00:09:29.921
to be able to actually affect the world.

141
00:09:29.921 --> 00:09:33.736
Because at the end of the day what we're
trying to do when we write programs,

142
00:09:33.736 --> 00:09:35.594
is to take all of those side effects.

143
00:09:35.594 --> 00:09:39.503
All of those logs, and
database transactions, and inputs and

144
00:09:39.503 --> 00:09:42.240
outputs from the outside world.

145
00:09:42.240 --> 00:09:47.773
And essentially push them to
the outside of the program,

146
00:09:47.773 --> 00:09:54.588
so that they're kind of the very,
very last step in doing any of this.

147
00:09:54.588 --> 00:09:59.449
And the inside of the program
is all totally pure.

148
00:09:59.449 --> 00:10:01.310
Why would you do this?

149
00:10:01.310 --> 00:10:04.265
Well, we're gonna talk in a moment about
some of the advantages of functional

150
00:10:04.265 --> 00:10:04.863
programming.

151
00:10:04.863 --> 00:10:09.295
But essentially, it means that,
anything going on inside of your program,

152
00:10:09.295 --> 00:10:11.760
all the logic, all of the business logic.

153
00:10:11.760 --> 00:10:16.703
And the computations and
the manipulations of data that

154
00:10:16.703 --> 00:10:22.276
are usually the tricky parts of
getting those programs right,

155
00:10:22.276 --> 00:10:27.180
all of that becomes much
more easier to deal with.

156
00:10:27.180 --> 00:10:29.587
Because it is more predictable,
it's safer,

157
00:10:29.587 --> 00:10:31.701
we're gonna talk about that in a moment.

158
00:10:31.701 --> 00:10:34.835
And those impure side effects,

159
00:10:34.835 --> 00:10:39.717
we can force out to the outer
edges of our program.

160
00:10:39.717 --> 00:10:43.582
So that we know, that,
by the time we've gotten there all of our

161
00:10:43.582 --> 00:10:47.606
computations have already worked
perfectly the way that we want.

162
00:10:47.606 --> 00:10:50.770
Because everything inside
the program is deterministic,

163
00:10:50.770 --> 00:10:53.560
as we said is a great
consequence of pure functions.

