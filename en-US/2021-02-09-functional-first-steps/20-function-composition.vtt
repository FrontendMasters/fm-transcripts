WEBVTT

1
00:00:00.080 --> 00:00:03.747
Let's press on with our next topic,

2
00:00:03.747 --> 00:00:08.361
which is how we take these
little functions and

3
00:00:08.361 --> 00:00:12.158
turn them into big complex programs.

4
00:00:12.158 --> 00:00:16.535
As we said before, functional programming
is programming with pure functions and

5
00:00:16.535 --> 00:00:19.250
everything in a functional
program is function.

6
00:00:19.250 --> 00:00:22.648
So you could say it's
functions all the way down.

7
00:00:22.648 --> 00:00:25.982
A program in the functional
programming mindset becomes

8
00:00:25.982 --> 00:00:30.970
a function that takes in some kind of
input and returns some kind of output.

9
00:00:30.970 --> 00:00:34.425
That function itself
may be made up of a lot

10
00:00:34.425 --> 00:00:39.265
more simple functions that
when we put them all together,

11
00:00:39.265 --> 00:00:44.924
give us a complex operation worthy
of a complete computer program.

12
00:00:44.924 --> 00:00:49.807
So the idea with functional programming
is that we have inputs coming in,

13
00:00:49.807 --> 00:00:52.260
we have outputs coming out.

14
00:00:52.260 --> 00:00:55.261
And those outputs can also
become new inputs for

15
00:00:55.261 --> 00:01:00.151
the next function whose outputs can
become new inputs for another function.

16
00:01:00.151 --> 00:01:04.112
Remember when we looked at that
filter MapReduce sandwich earlier,

17
00:01:04.112 --> 00:01:07.390
we had the outputs of filter
going into the input of map and

18
00:01:07.390 --> 00:01:11.369
the output of map going into the input
of reduce and so on and so forth.

19
00:01:11.369 --> 00:01:16.294
So what ends up happening when you
write functional programs is that you

20
00:01:16.294 --> 00:01:20.050
end up writing programs
where you think about.

21
00:01:20.050 --> 00:01:26.423
How the data is gonna flow
through your different functions.

22
00:01:26.423 --> 00:01:31.382
So you end up with something like this,
where if I wanna get from a,

23
00:01:31.382 --> 00:01:35.898
a green circle to b a purple triangle,
I might think, okay,

24
00:01:35.898 --> 00:01:42.680
I could have a function where I'm going to
transform green circles into Triangles.

25
00:01:42.680 --> 00:01:46.431
And then I might have a function where
I'm going to transform the color and

26
00:01:46.431 --> 00:01:48.316
return the same shape, but purple.

27
00:01:48.316 --> 00:01:50.530
And so
we're going to be flowing data through.

28
00:01:50.530 --> 00:01:53.068
So we think,
what's the output that I want?

29
00:01:53.068 --> 00:01:55.190
What's the input that I'm getting?

30
00:01:55.190 --> 00:01:59.646
And how can I flow the data
through a series of

31
00:01:59.646 --> 00:02:03.755
functions to get the result that I want?

32
00:02:03.755 --> 00:02:08.427
And once I figure that out,
I can actually use something called

33
00:02:08.427 --> 00:02:13.456
function composition where we
sorta putting together functions,

34
00:02:13.456 --> 00:02:18.572
composing them together to take
simple functions and create complex

35
00:02:18.572 --> 00:02:24.240
programs that nevertheless themselves
are input in output out functions.

36
00:02:25.740 --> 00:02:30.753
So what this might look like is if I had
that f of x function which is turning

37
00:02:30.753 --> 00:02:36.343
circles into triangles and then I have a g
of x function which is turning green into

38
00:02:36.343 --> 00:02:41.626
purple what I actually wanna be doing
is calling them both on the same input.

39
00:02:41.626 --> 00:02:45.650
So first I'm gonna call f of x, and
then whatever the output of that is,

40
00:02:45.650 --> 00:02:48.040
I'm gonna call g on that.

41
00:02:48.040 --> 00:02:54.124
And what I get then is kind of I can make
a single function that does all of that.

42
00:02:54.124 --> 00:02:57.100
So now I can treat that outer
function as just a black box.

43
00:02:57.100 --> 00:03:01.060
And once I've got it composed the right
way, I don't need to worry about all of

44
00:03:01.060 --> 00:03:04.433
the miniscule little operations
that are happening inside of it.

45
00:03:04.433 --> 00:03:07.558
I can treat it as a single kind of
blackbox where I only care about the input

46
00:03:07.558 --> 00:03:09.879
coming in and
I only care about the output coming out.

47
00:03:12.880 --> 00:03:17.808
So for example, I have a little ender
function here which is similar to

48
00:03:17.808 --> 00:03:23.000
the curried function we saw before,
where it takes in a single argument.

49
00:03:23.000 --> 00:03:27.086
Returns another function that
takes in a single argument, and

50
00:03:27.086 --> 00:03:29.560
then smashes their values together.

51
00:03:30.620 --> 00:03:33.964
So I can make an ender
function that I'll call

52
00:03:33.964 --> 00:03:37.487
adore which is gonna say
that something rocks.

53
00:03:37.487 --> 00:03:44.120
And then I might make an announce function
that's going to say y'all, like hey y'all.

54
00:03:44.120 --> 00:03:48.523
And then I might make an exclaim function
which is going to end things with

55
00:03:48.523 --> 00:03:52.000
exclamation point so
that I'm really excited about it.

56
00:03:52.000 --> 00:03:56.096
Now I probably don't think each of
these are super useful on their own but

57
00:03:56.096 --> 00:04:00.560
I could put them all together into
a function that I might call hypeup.

58
00:04:00.560 --> 00:04:04.955
Where I take in some thing,
some value x, string in this case.

59
00:04:04.955 --> 00:04:11.149
And then what I'm going to do is say
that I adore it, say that it rocks.

60
00:04:12.350 --> 00:04:16.327
Announced that say hey y'all and
then exclaim, that so

61
00:04:16.327 --> 00:04:21.756
add an exclamation point so that you
know that I'm really hyped up about it.

62
00:04:21.756 --> 00:04:26.787
So if now if i hypeUp ("JS"),
I can say JS rock y'all whoo.

63
00:04:26.787 --> 00:04:32.468
And if I hypeup FP I'll say FP
rocks y'all really excited.

64
00:04:32.468 --> 00:04:37.007
And hopefully by now and this long brain
busting day we're all feeling super hyped

65
00:04:37.007 --> 00:04:39.455
about this functional programming stuff.

66
00:04:40.630 --> 00:04:43.570
The idea here is that
now I have a program,

67
00:04:43.570 --> 00:04:47.694
hypeUp is now a program made
up of these simple functions.

68
00:04:47.694 --> 00:04:50.887
And maybe I want to, let's say,

69
00:04:50.887 --> 00:04:55.451
replace y'all with
something like everyone or

70
00:04:55.451 --> 00:05:00.354
folks, I can make a new function,
swap that out and

71
00:05:00.354 --> 00:05:05.030
still reuse my adore and
my explain functions and

72
00:05:05.030 --> 00:05:10.060
make a new hype up folks function for
example.

73
00:05:10.060 --> 00:05:13.345
So the idea here is that by
breaking down earlier we saw

74
00:05:13.345 --> 00:05:16.484
how by breaking down
complex argument functions,

75
00:05:16.484 --> 00:05:21.229
multi argument functions into single
ones we get smaller little functions.

76
00:05:21.229 --> 00:05:25.354
What we're thinking about now is how do we
take those smaller little functions and

77
00:05:25.354 --> 00:05:27.761
build them back up into
more complex programs.

