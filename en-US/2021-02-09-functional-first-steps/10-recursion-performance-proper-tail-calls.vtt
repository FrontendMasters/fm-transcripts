WEBVTT

1
00:00:00.490 --> 00:00:03.980
Okay, now let's come back to
that performance question.

2
00:00:03.980 --> 00:00:05.700
I'm sorry were there questions?

3
00:00:05.700 --> 00:00:09.908
&gt;&gt; When you using I mean with any
function with especially with, with,

4
00:00:09.908 --> 00:00:12.350
with recursive functions.

5
00:00:12.350 --> 00:00:17.511
Do you need to have more that your
base cases if somebody were to

6
00:00:17.511 --> 00:00:24.020
provide a negative number, would you
need something to check for that?

7
00:00:24.020 --> 00:00:24.720
&gt;&gt; Great question.

8
00:00:24.720 --> 00:00:25.860
What about error handling?

9
00:00:25.860 --> 00:00:29.469
What about, if somebody passes
a maybe a negative number or

10
00:00:29.469 --> 00:00:32.660
a mad they could pass a string or
some other thing?

11
00:00:32.660 --> 00:00:33.590
That's not right.

12
00:00:33.590 --> 00:00:35.010
And I have not handled that.

13
00:00:35.010 --> 00:00:39.989
And these are reference implementations
of sort of assuming that we're

14
00:00:39.989 --> 00:00:44.231
getting the right kind of value coming in,
and this is maybe,

15
00:00:44.231 --> 00:00:49.610
opens up another can of worms that
we're not gonna talk about today.

16
00:00:49.610 --> 00:00:55.141
But something else that goes hand in
hand with functional programming a lot

17
00:00:55.141 --> 00:01:00.142
is types, strongly typed data, so
data where we have a guarantee in

18
00:01:00.142 --> 00:01:06.240
the way the function is declared that it
will only take in, a certain type of data.

19
00:01:07.250 --> 00:01:11.924
And sometimes, maybe that's a type of data
that could be one of several types, or

20
00:01:11.924 --> 00:01:16.261
sometimes it's, really restrictive,
it has to be a positive integer, or

21
00:01:16.261 --> 00:01:18.040
something like that.

22
00:01:18.040 --> 00:01:22.350
And so a lot of the times in functional
programming, you will see types.

23
00:01:22.350 --> 00:01:27.319
Used to kind of guarantee that that
determinism because I'm not going

24
00:01:27.319 --> 00:01:31.862
to get an error because I,
I tried to add to, I don't know custom

25
00:01:31.862 --> 00:01:36.577
objects together that don't work
with the plus operator, or, or

26
00:01:36.577 --> 00:01:43.720
because I'm not handling a particular case
a negative number or something like that.

27
00:01:43.720 --> 00:01:48.836
So a lot of the times you will see in
functional, free or functional languages

28
00:01:48.836 --> 00:01:53.990
like Haskell, let's say you will see
types used as a way of doing that.

29
00:01:53.990 --> 00:01:58.872
And also you will see in JavaScript,
a lot of folks that like to write code in

30
00:01:58.872 --> 00:02:03.913
a functional style using some of these
more typed versions like type script to

31
00:02:03.913 --> 00:02:08.875
help them not worry about that and
have that guarantee going in that whatever

32
00:02:08.875 --> 00:02:14.000
we're operating on, we know exactly
what it's going to look like.

33
00:02:14.000 --> 00:02:18.860
And the the language or the type system
is gonna kind of figure that out for

34
00:02:18.860 --> 00:02:23.002
us but in the absence of that in
a vanilla JavaScript framework

35
00:02:23.002 --> 00:02:26.588
like this where we don't
have strongly typed data and

36
00:02:26.588 --> 00:02:30.510
n could really be anything and
JavaScript doesn't care.

37
00:02:30.510 --> 00:02:32.240
It could be undefined,
it could be whatever.

38
00:02:33.280 --> 00:02:38.015
We would wanna handle that the same
way we would in any JavaScript code.

39
00:02:38.015 --> 00:02:41.463
Great question.

40
00:02:41.463 --> 00:02:46.446
Okay, so now, the question of
performance came up a lot before or

41
00:02:46.446 --> 00:02:48.450
a couple of times before.

42
00:02:49.540 --> 00:02:51.450
What are the performance considerations?

43
00:02:51.450 --> 00:02:54.210
Is recursion and iteration,
do they give the same performance?

44
00:02:54.210 --> 00:02:55.850
Will there be any problems?

45
00:02:55.850 --> 00:03:00.514
So did folks have fun trying
to break their notebooks here

46
00:03:00.514 --> 00:03:04.410
with the different inputs
to these functions.

47
00:03:06.350 --> 00:03:10.148
I saw somebody had somebody
had fun crashing their,

48
00:03:10.148 --> 00:03:14.730
notebook I think, sorry there is
a small bug here but yes okay.

49
00:03:14.730 --> 00:03:18.928
So if we use,
let's say we just change the values here.

50
00:03:18.928 --> 00:03:24.179
So, the iterative one, 40 seems to work 50

51
00:03:24.179 --> 00:03:29.056
seems to work okay, let's try recursive.

52
00:03:29.056 --> 00:03:33.300
So four seems to work.

53
00:03:33.300 --> 00:03:38.486
14 seems to work 20 seems to work 40,

54
00:03:38.486 --> 00:03:43.420
it's real slow, it's real slow.

55
00:03:43.420 --> 00:03:45.570
It worked, but it was real slow.

56
00:03:45.570 --> 00:03:49.550
But if I were to go up to something
like 100 and what was it?

57
00:03:49.550 --> 00:03:55.030
104, it's thinking, it's thinking, it's
thinking, it's thinking, it's thinking.

58
00:03:58.908 --> 00:04:00.610
It's still thinking.

59
00:04:04.970 --> 00:04:06.790
It's taking it a very long time.

60
00:04:06.790 --> 00:04:09.971
Okay, well while we're talking about this,

61
00:04:09.971 --> 00:04:14.786
clearly we can see that the iterative
of Fibonacci one did not seem to be

62
00:04:14.786 --> 00:04:19.180
struggling as much as
the recursive Fibonacci one.

63
00:04:19.180 --> 00:04:23.290
Anybody have ideas about what is going on
here with this performance difference?

64
00:04:25.380 --> 00:04:29.850
&gt;&gt; The recursive function is
calculating the values again and again.

65
00:04:29.850 --> 00:04:32.010
For 40 it will calculate.

66
00:04:33.670 --> 00:04:36.700
I mean it's a recursive tree right.

67
00:04:36.700 --> 00:04:41.145
So it will calculate 14 many times and
under those 40

68
00:04:41.145 --> 00:04:46.158
values it will calculate 20 many times and
10 many times and

69
00:04:46.158 --> 00:04:52.750
also like each recursion is I mean,
it calls a new function on the stack.

70
00:04:52.750 --> 00:04:55.030
So it also wastes memory.

71
00:04:57.080 --> 00:04:58.580
&gt;&gt; Okay, so I heard a couple of things.

72
00:04:58.580 --> 00:05:04.739
So we have on the one hand
we have that this recursive

73
00:05:04.739 --> 00:05:11.480
function here is actually
making two recursive calls.

74
00:05:11.480 --> 00:05:13.720
So it's doing a lot of work.

75
00:05:13.720 --> 00:05:15.690
And it's going to be making the same call.

76
00:05:15.690 --> 00:05:20.700
So it's going to make let's say it's a,
we pass in four.

77
00:05:20.700 --> 00:05:26.720
It's going to call recursive Fibonacci on
two and then recursive Fibonacci on three.

78
00:05:26.720 --> 00:05:31.009
And then when we call it on three,
it's going to call it again on one and

79
00:05:31.009 --> 00:05:32.190
then again on two.

80
00:05:32.190 --> 00:05:36.239
So we've got kind of like multiple times
that we're making the same call with

81
00:05:36.239 --> 00:05:37.370
the same arguments.

82
00:05:37.370 --> 00:05:38.260
So that's one issue.

83
00:05:39.610 --> 00:05:42.660
And then the other thing that was
mentioned was the call stack.

84
00:05:42.660 --> 00:05:47.956
So you may have seen a minute
ago we had something called

85
00:05:47.956 --> 00:05:53.380
a too much recursion error or
an internal error.

86
00:05:53.380 --> 00:05:55.798
And I think I'm going to need to, so

87
00:05:55.798 --> 00:06:00.810
FYI folks if you ever get into a sticky
situation like this in observable.

88
00:06:02.640 --> 00:06:07.290
You can reload the page with
what's called Safe Mode.

89
00:06:07.290 --> 00:06:10.510
So if I put safe on the end of this and
I reload the page,

90
00:06:10.510 --> 00:06:12.670
I will get a version of my notebook.

91
00:06:15.600 --> 00:06:21.060
That allows me to see just the code, it's
not going to actually run any of it so

92
00:06:21.060 --> 00:06:25.180
that I can fix something that
might crash or hang the page.

93
00:06:26.230 --> 00:06:30.920
And so in this case, I'm just gonna,
put this value back down.

94
00:06:30.920 --> 00:06:35.364
To four so that we're not
crashing the page anymore so

95
00:06:35.364 --> 00:06:37.634
that we can talk about it and

96
00:06:37.634 --> 00:06:43.160
then I'm gonna reload not in safe mode and
now things work again.

97
00:06:43.160 --> 00:06:43.940
Okay, great.

98
00:06:43.940 --> 00:06:46.260
But we did see we saw it was
really struggling, right.

99
00:06:47.370 --> 00:06:52.433
And so,
[COUGH] We may have seen earlier a,

100
00:06:52.433 --> 00:06:55.770
too much recursion error.

101
00:06:55.770 --> 00:06:57.816
Let me see if I can get it to do it again.

102
00:06:57.816 --> 00:07:01.470
So you may have seen something like
this internal error too much recursion.

103
00:07:01.470 --> 00:07:02.490
This is the message you'll get.

104
00:07:02.490 --> 00:07:06.818
I'm in Firefox right now, you might see
call stack size exceeded in some other

105
00:07:06.818 --> 00:07:10.370
browsers, or
Stack Overflow might be another message.

106
00:07:10.370 --> 00:07:13.631
So this is another problem
that we're running into,

107
00:07:13.631 --> 00:07:16.460
which is a tricky thing for
recursion as well.

108
00:07:17.650 --> 00:07:20.980
So to recap,
we've got two problems with recursion.

109
00:07:20.980 --> 00:07:26.327
One is that in a function like recursive
Fibonacci where I've got this double

110
00:07:26.327 --> 00:07:31.754
recursive call here, I, I'm kind of
doing work multiple times doing the same

111
00:07:31.754 --> 00:07:37.265
work multiple times and one solution to
that that we're not going to get into but

112
00:07:37.265 --> 00:07:42.900
you might want to look up on your
own is something called memoization.

113
00:07:42.900 --> 00:07:48.670
So memoization is a sort of way of
caching the results of those functions.

114
00:07:48.670 --> 00:07:52.792
So that when I call recursive
Fibonacci of two, twice,

115
00:07:52.792 --> 00:07:55.599
once in the first recursive call, and

116
00:07:55.599 --> 00:08:00.424
then in the second one,
I don't have to repeat the computation,

117
00:08:00.424 --> 00:08:05.660
I can actually just use the value
from the first time I called it.

118
00:08:05.660 --> 00:08:07.892
So if you're curious about how that works,

119
00:08:07.892 --> 00:08:10.620
you can look up Memoization
in recursive functions.

120
00:08:11.900 --> 00:08:16.092
And then the other problem we saw was
this too much recursion or Stack Overflow

121
00:08:16.092 --> 00:08:20.640
error, which is because every time I call
a function in JavaScript and it mostly.

122
00:08:20.640 --> 00:08:25.019
Languages, I have to add a new frame for
that exact call of

123
00:08:25.019 --> 00:08:30.800
the function to what's called
the functions to the call stack.

124
00:08:30.800 --> 00:08:37.490
And the call stack is on my computer and
my computer has a finite amount of memory.

125
00:08:38.620 --> 00:08:41.661
So we're trying to do a operation

126
00:08:41.661 --> 00:08:47.040
recursion which could
theoretically go on forever.

127
00:08:47.040 --> 00:08:49.245
There's nothing conceptually or

128
00:08:49.245 --> 00:08:54.492
mathematically preventing that recursion
from going, going, going, going,

129
00:08:54.492 --> 00:08:59.661
going, going, going, going going,
however, we're doing that potentially

130
00:08:59.661 --> 00:09:05.160
infinite operation in a finite resource
environment, so how does that work?

131
00:09:05.160 --> 00:09:07.270
So we keep adding frames to the stack.

132
00:09:07.270 --> 00:09:10.731
And eventually if I have a really, really
deep recursion because I've got a big

133
00:09:10.731 --> 00:09:14.700
input number or I've got a large array
I'm operating on or something like that.

134
00:09:14.700 --> 00:09:18.380
I'm gonna run out of room and so I'm gonna
get this error call stack size exceeded or

135
00:09:18.380 --> 00:09:20.710
too much recursion or
whatever my browser tells me.

136
00:09:21.950 --> 00:09:27.831
The solution to that or a solution to that
is something called tail recursion and

137
00:09:27.831 --> 00:09:30.550
tail call optimization.

138
00:09:30.550 --> 00:09:35.483
Now we're not gonna get into
the details of how that works,

139
00:09:35.483 --> 00:09:40.418
but TLDR the quick version is
that tail call optimization is

140
00:09:40.418 --> 00:09:44.957
a feature of some runtimes
like my JavaScript engine,

141
00:09:44.957 --> 00:09:50.440
where it can perform an optimization
on my recursive code.

142
00:09:50.440 --> 00:09:56.030
If, if Importantly, I write that
recursive code in a particular way.

143
00:09:57.050 --> 00:09:59.481
So instead of writing
a regular recursive function,

144
00:09:59.481 --> 00:10:02.300
I write something that's called
a tail recursive function.

145
00:10:03.650 --> 00:10:09.896
Now again, we're not going to talk about
exactly what that means, but a year or

146
00:10:09.896 --> 00:10:16.070
so ago, my friend Natalia Margolis, and
I wrote a musical tech talk about it.

147
00:10:16.070 --> 00:10:19.608
So if you're bored one day and
want to learn through song how tail call

148
00:10:19.608 --> 00:10:22.300
optimization works,
you can check out that video.

149
00:10:23.370 --> 00:10:26.310
Or you can look it up for
yourself in JavaScript.

150
00:10:26.310 --> 00:10:29.190
In es six or es 2015.

151
00:10:29.190 --> 00:10:34.132
JavaScript introduced a feature
called Proper tail calls that

152
00:10:34.132 --> 00:10:39.070
allows you to in certain engines,
like Safari, for example,

153
00:10:39.070 --> 00:10:44.009
you can take advantage of this
tail call optimization thanks to

154
00:10:44.009 --> 00:10:49.120
the language feature proper tail
calls that was added in ESX.

155
00:10:49.120 --> 00:10:53.251
So those are some terms you can look up
if you want to read more about how to get

156
00:10:53.251 --> 00:10:56.927
around these performance issues,
and in functional languages,

157
00:10:56.927 --> 00:11:00.403
you would see that kind of thing
often built into the language so

158
00:11:00.403 --> 00:11:02.590
that you don't have to worry about it.

159
00:11:02.590 --> 00:11:04.430
You don't have to jump
through hoops with it.

160
00:11:04.430 --> 00:11:07.212
But in JavaScript because
it's a multipurpose language,

161
00:11:07.212 --> 00:11:10.040
we have to think a little bit
more deliberately about it.

162
00:11:10.040 --> 00:11:10.652
And in fact,

163
00:11:10.652 --> 00:11:15.380
JavaScript itself had to change in order
to make those work around as possible.

164
00:11:15.380 --> 00:11:19.649
So, that is I will leave you with and
answer to some of the questions that came

165
00:11:19.649 --> 00:11:22.630
up earlier about,
what about the performance?

166
00:11:22.630 --> 00:11:24.250
Aren't we gonna blow the call stack?

167
00:11:24.250 --> 00:11:26.341
Yes, yes, these are concerns for

168
00:11:26.341 --> 00:11:29.380
functional programming
there are workarounds.

169
00:11:29.380 --> 00:11:31.760
But honestly, this was a huge problem for

170
00:11:31.760 --> 00:11:34.620
the functional programming
community to solve.

171
00:11:34.620 --> 00:11:40.005
It took a really long time to figure
out how to combine this recursive way

172
00:11:40.005 --> 00:11:45.810
of thinking about solving problems and
this pure functional mindset.

173
00:11:45.810 --> 00:11:50.747
With the constraints of working on
a computer architecture that is just

174
00:11:50.747 --> 00:11:52.990
limited in its resources.

175
00:11:52.990 --> 00:11:56.989
So that was one of the reasons that
functional programming kind of took

176
00:11:56.989 --> 00:12:01.880
a long time to develop and kind of hit
the mainstream of software development.

177
00:12:01.880 --> 00:12:04.884
So these are some really interesting
things to dig into, in my opinion,

178
00:12:04.884 --> 00:12:06.410
once you start learning about like,

179
00:12:06.410 --> 00:12:09.350
what are the implications of
working with functional code.

180
00:12:09.350 --> 00:12:13.397
What does that mean for everything that
has to change in our way that we even

181
00:12:13.397 --> 00:12:16.650
think about computing on
a processor like this.

182
00:12:16.650 --> 00:12:20.146
So I hope you all will have a lot of
fun after this course digging into some

183
00:12:20.146 --> 00:12:24.470
of the resources that I'm going to
leave you with at the end of the day.

184
00:12:24.470 --> 00:12:25.380
To find out more.

185
00:12:26.730 --> 00:12:28.076
Okay, so the question is,

186
00:12:28.076 --> 00:12:31.400
is tail call optimization
a feature of JavaScript engines?

187
00:12:31.400 --> 00:12:36.142
Yes, it is something that you as
a programmer can't implement the language

188
00:12:36.142 --> 00:12:38.790
itself has to implement it.

189
00:12:38.790 --> 00:12:42.190
And so then the second part of
the question is do all JavaScript engines

190
00:12:42.190 --> 00:12:43.180
support it?

191
00:12:43.180 --> 00:12:48.112
Do all JavaScript engines have this
implemented the answer to that is No.

192
00:12:48.112 --> 00:12:50.788
For example, I am in,
in Firefox right now,

193
00:12:50.788 --> 00:12:53.827
which does not implement
tail call optimization.

194
00:12:53.827 --> 00:12:59.589
So, even if I write my code in a way that
could work with tail call optimization,

195
00:12:59.589 --> 00:13:03.800
if I run this code in Firefox,
we won't see it work.

196
00:13:03.800 --> 00:13:08.440
But if I run it in Safari, Safari does
implement tail call optimization.

197
00:13:08.440 --> 00:13:11.770
So we would be able to
take advantage of that.

198
00:13:11.770 --> 00:13:13.606
If I write my code the right way,

199
00:13:13.606 --> 00:13:17.420
I would be able to take advantage
of that in Safari node and V eight.

200
00:13:17.420 --> 00:13:20.190
So V eight the engine that
powers chrome and node.

201
00:13:21.480 --> 00:13:24.000
V eight did implement it.

202
00:13:24.000 --> 00:13:30.063
In a few years back in the version
that was accessible through node six,

203
00:13:30.063 --> 00:13:32.600
it was behind a feature flag.

204
00:13:32.600 --> 00:13:37.380
You could use the harmony feature flag,
but there are some.

205
00:13:37.380 --> 00:13:41.710
Drawbacks to doing tail call optimization,
which we'll get into a little bit in

206
00:13:41.710 --> 00:13:45.913
the talk that I linked and which you'll
also find out if you read more about some

207
00:13:45.913 --> 00:13:49.670
of the resources that I've linked in
some of the terms that I mentioned

208
00:13:49.670 --> 00:13:53.580
that you can go Google or DuckDuckGo or
use your search engine of choice.

209
00:13:55.280 --> 00:13:58.517
Suffice it to say that when
you do tail call optimization,

210
00:13:58.517 --> 00:14:00.640
you're messing with the call stack.

211
00:14:01.720 --> 00:14:09.260
You're messing with the, engines history,
of what has been what is being called.

212
00:14:09.260 --> 00:14:12.680
And so one problem for example,
is that then, if you're trying to.

213
00:14:12.680 --> 00:14:15.785
Trying to debug that, or
if you're trying to debug,

214
00:14:15.785 --> 00:14:19.570
exactly where in the call stack,
something went wrong.

215
00:14:19.570 --> 00:14:22.770
That introduces complications because
you're kind of like rewriting history

216
00:14:22.770 --> 00:14:24.330
a little bit.

217
00:14:24.330 --> 00:14:25.293
In any case,

218
00:14:25.293 --> 00:14:30.730
this is a reason why those features in
VA never really hit the mainstream.

219
00:14:30.730 --> 00:14:32.950
So we don't have tail call
optimization in Chrome.

220
00:14:32.950 --> 00:14:38.096
We don't have tail call optimization
in the latest versions of node.

221
00:14:38.096 --> 00:14:42.751
So Safari WebKit engine is is
the the safari engine is the only

222
00:14:42.751 --> 00:14:47.700
browser engine that I'm aware
of that actually implements this

