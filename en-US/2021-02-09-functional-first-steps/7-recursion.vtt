WEBVTT

1
00:00:00.170 --> 00:00:04.775
Now we have hopefully a pretty good
intuition of what a pure function is and

2
00:00:04.775 --> 00:00:09.306
how to recognize one, or how to
recognize a function that's not pure and

3
00:00:09.306 --> 00:00:12.071
what some of those red
flags are to look for.

4
00:00:12.071 --> 00:00:16.271
So now we wanna talk about
another technique in a functional

5
00:00:16.271 --> 00:00:19.466
programmers toolbox, which is recursion.

6
00:00:19.466 --> 00:00:24.466
And how it helps us avoid a more
imperative style of looping

7
00:00:24.466 --> 00:00:26.310
through iteration.

8
00:00:28.280 --> 00:00:33.877
So, okay, iteration and recursion,
we could think of as kind of two mini

9
00:00:33.877 --> 00:00:39.206
paradigms that sort of go hand in
hand with imperative programming for

10
00:00:39.206 --> 00:00:43.480
iteration and
functional programming for recursion.

11
00:00:44.900 --> 00:00:50.006
So, iteration and recursion
are two ways of thinking about how

12
00:00:50.006 --> 00:00:55.800
to get the computer to do the same
operation, lots of different times.

13
00:00:57.490 --> 00:01:00.164
And in the iteration mini paradigm or
sub paradigm,

14
00:01:00.164 --> 00:01:02.657
these don't usually get called paradigms,
but

15
00:01:02.657 --> 00:01:06.507
I think that they are coz they're kind
of like ways of looking at the world.

16
00:01:06.507 --> 00:01:11.817
In the iteration mini paradigm,
we think about that

17
00:01:11.817 --> 00:01:17.498
repetition in terms of loops with for
or while usually.

18
00:01:17.498 --> 00:01:22.164
And that loop as we go,
we're probably going to

19
00:01:22.164 --> 00:01:26.948
be changing some variable
like a counter like I or

20
00:01:26.948 --> 00:01:31.395
when you do like a for
let, element of array.

21
00:01:31.395 --> 00:01:35.490
We're using this element variable, and
we're gonna be changing that as we go.

22
00:01:35.490 --> 00:01:40.230
So that means we have some value changing
over time, which means that it's stateful.

23
00:01:41.380 --> 00:01:44.956
And so when you have a really
complex iterative loop,

24
00:01:44.956 --> 00:01:50.370
sometimes it can be hard to think about,
okay, what's the value of I right now?

25
00:01:50.370 --> 00:01:51.420
Where am I in my loop?

26
00:01:51.420 --> 00:01:52.340
Which loop am I on?

27
00:01:52.340 --> 00:01:53.860
What are the values?

28
00:01:53.860 --> 00:01:58.290
And so again, we have that general problem
of like it's hard to think about state.

29
00:01:58.290 --> 00:02:00.760
It's hard to think about
values changing over time.

30
00:02:02.470 --> 00:02:04.681
And so in the recursive mini paradigm,

31
00:02:04.681 --> 00:02:08.780
we're gonna think about things
in a more pure functional way.

32
00:02:08.780 --> 00:02:12.916
We're in recursion instead of using for
or while and

33
00:02:12.916 --> 00:02:18.220
these stateful loops,
we're going to use self reference.

34
00:02:18.220 --> 00:02:22.810
We're gonna have a function call
itself firma within itself.

35
00:02:24.720 --> 00:02:29.320
So that we have kind of this
functional inception of self reference.

36
00:02:31.180 --> 00:02:34.659
And that is how we're gonna
execute the same operation or

37
00:02:34.659 --> 00:02:37.060
the same chunk of code multiple times.

38
00:02:38.320 --> 00:02:43.092
Now what that means is that each call
of the function again, all I care

39
00:02:43.092 --> 00:02:48.680
about is the input coming in, and
all I care about is the output going out.

40
00:02:48.680 --> 00:02:52.590
So the idea is that we're no longer
changing those values over time.

41
00:02:52.590 --> 00:02:53.870
We're getting rid of that state.

42
00:02:53.870 --> 00:02:59.294
We've got a more stateless way of
repeating the code that we need to repeat.

43
00:02:59.294 --> 00:03:04.638
So this is kind of the big picture of
the difference between the iteration

44
00:03:04.638 --> 00:03:09.293
mode of getting code to execute
multiple times and recursion.

45
00:03:12.246 --> 00:03:16.701
So as we said iteration doesn't
really go that nicely with functional

46
00:03:16.701 --> 00:03:21.684
programming like we saw in that example
from our pure functions exercise where

47
00:03:21.684 --> 00:03:27.150
we had an iterative loop that was
changing a table within our function.

48
00:03:27.150 --> 00:03:32.135
So instead, when we're writing functional
code we're gonna move away from

49
00:03:32.135 --> 00:03:35.366
iteration and
towards a more recursive mindset.

50
00:03:35.366 --> 00:03:38.771
So let's take a look at some
iterative code right here.

51
00:03:38.771 --> 00:03:42.300
I've got a sum function,
it takes in some array of numbers.

52
00:03:43.310 --> 00:03:48.061
And then it's using a variable
called total with a for loop, so

53
00:03:48.061 --> 00:03:53.442
that we're changing the value of total
each time we run through this for

54
00:03:53.442 --> 00:03:57.510
loop, adding on numbers from the array.

55
00:03:57.510 --> 00:04:00.710
And so
if I run this code on array of numbers,

56
00:04:00.710 --> 00:04:04.230
I'm gonna get out some certain output.

57
00:04:04.230 --> 00:04:07.291
And now again,
this might be a deterministic function

58
00:04:07.291 --> 00:04:12.020
that always gives me the sum if I always
give it the same array of numbers.

59
00:04:12.020 --> 00:04:16.826
But, again, that looping inside,
that changing of that value of total,

60
00:04:16.826 --> 00:04:19.726
the fact that total can
have different values

61
00:04:19.726 --> 00:04:24.060
over time through this code
is not super functional.

62
00:04:24.060 --> 00:04:28.120
So let's make this even more
functional by making it recursive.

63
00:04:29.170 --> 00:04:31.979
So now, we have a recursive sum function.

64
00:04:33.870 --> 00:04:36.820
It's recursive because it
makes a call to itself.

65
00:04:38.100 --> 00:04:43.610
So within the body of sum,
I'm actually calling sum as well.

66
00:04:45.170 --> 00:04:47.510
That is a definition of
a recursive function.

67
00:04:47.510 --> 00:04:51.423
Now in practice when you're
writing recursive functions,

68
00:04:51.423 --> 00:04:55.040
you have to make sure you have
two parts to the function.

69
00:04:57.100 --> 00:05:00.599
On the one hand, I have my recursive case.

70
00:05:00.599 --> 00:05:06.030
So, in this recursive case,
I'm gonna be taking off the first

71
00:05:06.030 --> 00:05:10.949
thing in my numbers array and
then, adding it to whatever

72
00:05:10.949 --> 00:05:16.500
the result is of this same sum
operation on the rest of the array.

73
00:05:16.500 --> 00:05:21.111
So I'm using slice here in JavaScript
to take the rest of the numbers in

74
00:05:21.111 --> 00:05:23.231
the array after that first one.

75
00:05:23.231 --> 00:05:24.790
And that is my recursion.

76
00:05:25.810 --> 00:05:30.952
However, if I don't stop that recursion
at some point am just gonna keep

77
00:05:30.952 --> 00:05:36.516
calling myself down and down and down and
down and down into an infinite loop and

78
00:05:36.516 --> 00:05:42.670
it's gonna be like when Leonardo DiCaprio
in inception gets lost in the dream world.

79
00:05:42.670 --> 00:05:46.320
If you haven't seen the movie, and you
wanna take a study break, it's pretty fun.

80
00:05:46.320 --> 00:05:50.580
In any case, we don't want to get
lost in an infinite series of loops.

81
00:05:50.580 --> 00:05:53.700
So we also need what's called a base case.

82
00:05:53.700 --> 00:05:57.539
We need a non recursive case in
our function, which we can use if

83
00:05:57.539 --> 00:06:01.958
to split that out where in the case
that I only have one number in my array,

84
00:06:01.958 --> 00:06:06.232
I'm gonna stop recursion,
I'm not gonna do any recursive call, and

85
00:06:06.232 --> 00:06:11.390
I'm just gonna return that number because
the sum of a single number is that number.

86
00:06:12.510 --> 00:06:16.583
So when we're thinking about writing
recursive functions, this is what I want

87
00:06:16.583 --> 00:06:20.169
everybody to remember is make sure
that you're writing a base case and

88
00:06:20.169 --> 00:06:24.143
you might have more than one cases in
which you're not doing that recursion.

89
00:06:24.143 --> 00:06:27.965
And then your recursive case,
don't forget that base case or

90
00:06:27.965 --> 00:06:30.477
else you're gonna run into headaches.

91
00:06:30.477 --> 00:06:32.860
And we'll take a look at later what
kind of headaches [LAUGH] those will be.

92
00:06:33.990 --> 00:06:34.560
Questions?

93
00:06:36.420 --> 00:06:41.063
Do we not run into problems when we have
really, really large arrays with lots and

94
00:06:41.063 --> 00:06:43.674
lots of recursive calls
that are necessary?

95
00:06:43.674 --> 00:06:45.339
Yes, we do.

96
00:06:45.339 --> 00:06:46.485
We totally do.

97
00:06:46.485 --> 00:06:49.429
And in a moment we're gonna talk about and

98
00:06:49.429 --> 00:06:54.610
we're gonna see [LAUGH] maybe what
that problem is gonna look like.

99
00:06:54.610 --> 00:06:56.051
And how we can solve it,

100
00:06:56.051 --> 00:07:00.430
is a subject that's something we're
gonna talk super briefly about.

101
00:07:00.430 --> 00:07:03.602
But I'm also gonna send you some
resources where you can find out

102
00:07:03.602 --> 00:07:07.660
more about how you can get around that
problem in functional programming.

103
00:07:07.660 --> 00:07:11.835
But great point, yes, there is an issue
here and if we're not quite sure what that

104
00:07:11.835 --> 00:07:15.910
issue might be, the next exercise we're
gonna think about it a little harder.

105
00:07:17.970 --> 00:07:25.160
&gt;&gt; I have a question about, I guess it's
just a [INAUDIBLE] functional calls.

106
00:07:25.160 --> 00:07:30.159
Is it possible to, with your output
of data global value that maybe

107
00:07:30.159 --> 00:07:35.072
you don't reference but
it's like we're building a database or

108
00:07:35.072 --> 00:07:39.560
you're building some information
from a recursive call.

109
00:07:41.480 --> 00:07:45.710
If during the call you're
updating a global variable,

110
00:07:45.710 --> 00:07:50.940
global value or database does that
make it that is not pure function?

111
00:07:52.780 --> 00:07:57.592
&gt;&gt; If during your recursive functions
execution and during the recursive calls,

112
00:07:57.592 --> 00:08:01.397
you are updating something and
outside world like a database,

113
00:08:01.397 --> 00:08:04.680
does that make it an impure function?

114
00:08:04.680 --> 00:08:05.671
Is the question?

115
00:08:05.671 --> 00:08:06.561
What does everybody think?

116
00:08:09.282 --> 00:08:10.398
I see some thumbs up.

117
00:08:10.398 --> 00:08:11.124
&gt;&gt; Yes.

118
00:08:11.124 --> 00:08:12.850
&gt;&gt; I hear yes.

119
00:08:12.850 --> 00:08:13.620
Yes.

120
00:08:13.620 --> 00:08:14.560
Yes, exactly.

121
00:08:14.560 --> 00:08:18.820
So again, none of the techniques that
we're gonna look at that are that are kind

122
00:08:18.820 --> 00:08:22.318
of handy ways of thinking about
the practice the day to day of doing

123
00:08:22.318 --> 00:08:24.220
functional programming.

124
00:08:24.220 --> 00:08:28.339
None of these will replace the core
concept which is that we need purity,

125
00:08:28.339 --> 00:08:32.811
we need determinism, we need to make
sure that we're avoiding side effects.

126
00:08:32.811 --> 00:08:38.667
So this is all going to be kind of a yes
and yes, we need pure functions and we

127
00:08:38.667 --> 00:08:45.387
can use recursion to help us avoid state
within those functions in iterative loops.

128
00:08:45.387 --> 00:08:49.936
But we still don't want to
introduce non determinism or

129
00:08:49.936 --> 00:08:55.280
introduce side effects into our code,
even if it's recursive.

130
00:08:55.280 --> 00:08:59.774
So it is totally possible, and
in the world of JavaScript happens a lot

131
00:08:59.774 --> 00:09:03.640
that you have a recursive
function that is not pure.

132
00:09:03.640 --> 00:09:08.355
So recursion is not a condition of purity,
it is more a consequence of when

133
00:09:08.355 --> 00:09:12.918
you're in a world where you have no
possibility of changing values over

134
00:09:12.918 --> 00:09:18.410
time where you have no such concept
as state values changing over time.

135
00:09:18.410 --> 00:09:23.836
That recursion ends up being useful for
that pure functional world.

136
00:09:23.836 --> 00:09:24.699
If that makes sense.

137
00:09:27.551 --> 00:09:28.847
Great.

138
00:09:28.847 --> 00:09:29.783
Other questions?

139
00:09:29.783 --> 00:09:33.905
Are recursive functions more
expensive than iterative functions?

140
00:09:33.905 --> 00:09:35.336
That is a great question and

141
00:09:35.336 --> 00:09:38.759
gets also at this question of are you
gonna run into performance or

142
00:09:38.759 --> 00:09:42.947
other problems if you have really,
really big data that you're operating on?

143
00:09:42.947 --> 00:09:46.532
And that is a whole really
interesting question that I

144
00:09:46.532 --> 00:09:49.490
definitely wanna talk
about with all of us.

145
00:09:49.490 --> 00:09:53.790
But I think it'll be great if we
can take a look at these exercises.

146
00:09:53.790 --> 00:09:58.480
And part of the exercise is gonna be
actually thinking about that question.

147
00:09:58.480 --> 00:10:03.380
What are the performance implications for
iteration versus for recursion?

