WEBVTT

1
00:00:00.008 --> 00:00:06.515
We are hopefully really excited to dig
into these pure functions or are they?

2
00:00:06.515 --> 00:00:08.041
Or are they?

3
00:00:08.041 --> 00:00:09.370
That's what we're gonna be finding out.

4
00:00:09.370 --> 00:00:12.750
So hopefully everybody had a chance
to go through this notebook.

5
00:00:12.750 --> 00:00:17.733
And if anyone is again having any issues
with accessing the course materials on

6
00:00:17.733 --> 00:00:19.860
observable, they should work.

7
00:00:19.860 --> 00:00:21.220
It should work in all browsers and
whatnot.

8
00:00:21.220 --> 00:00:23.920
But if anyone is having struggles,
please let us know.

9
00:00:25.900 --> 00:00:27.960
So let's talk about these pure functions,
shall we?

10
00:00:29.570 --> 00:00:33.499
Okay, we're gonna go through these
one by one and just make sure that

11
00:00:33.499 --> 00:00:37.449
if there's any questions about why
we labeled it as pure or not pure.

12
00:00:37.449 --> 00:00:39.315
Or any asterisks or what if sir,

13
00:00:39.315 --> 00:00:43.060
those kind of questions that we
have a chance to go through them.

14
00:00:43.060 --> 00:00:47.610
So let's just take a few minutes to
go through each of these functions.

15
00:00:47.610 --> 00:00:49.590
All right, this get date function.

16
00:00:50.940 --> 00:00:55.092
What do we think and
folks can shout it out pure or not?

17
00:00:55.092 --> 00:00:56.544
&gt;&gt; Not.

18
00:00:56.544 --> 00:01:01.970
&gt;&gt; I heard it not, nodding I see
nodding so it sounds like everybody

19
00:01:01.970 --> 00:01:08.450
thinks it is not pure has a high five
raise hands, it is indeed not pure.

20
00:01:08.450 --> 00:01:14.119
Can anybody recap without looking
at the explanation right now,

21
00:01:14.119 --> 00:01:17.736
why this is not pure function, get date.

22
00:01:17.736 --> 00:01:20.996
&gt;&gt; I thought it was pure originally.

23
00:01:20.996 --> 00:01:21.545
&gt;&gt; Okay.

24
00:01:21.545 --> 00:01:24.771
&gt;&gt; Everytime you call it,
you get a new date.

25
00:01:24.771 --> 00:01:28.364
&gt;&gt; Everytime you call
it you get a new date.

26
00:01:28.364 --> 00:01:31.609
Is that what someone else had unmuted
is that what a someone else's was

27
00:01:31.609 --> 00:01:32.271
about to say?

28
00:01:32.271 --> 00:01:36.100
&gt;&gt; Actually the date is
a part of the outside world.

29
00:01:36.100 --> 00:01:38.130
It's not an argument.

30
00:01:38.130 --> 00:01:39.380
So that is why.

31
00:01:39.380 --> 00:01:41.350
Otherwise we always give new arguments.

32
00:01:41.350 --> 00:01:43.100
So those are also new.

33
00:01:43.100 --> 00:01:44.920
Is a part of the outside world.

34
00:01:44.920 --> 00:01:46.300
It's not an argument.

35
00:01:46.300 --> 00:01:48.600
&gt;&gt; The date is a part
of the outside world.

36
00:01:48.600 --> 00:01:51.800
So we are asking something
about the outside world here.

37
00:01:51.800 --> 00:01:57.400
And yes, so when we call this different
times like on different days, let's say if

38
00:01:57.400 --> 00:02:02.850
we call this tomorrow or in a week or in
a year, assuming we get to 2021 [LAUGH].

39
00:02:02.850 --> 00:02:06.461
If we call this multiple times at
different times when the data has changed

40
00:02:06.461 --> 00:02:09.024
because that is something
about the outside world,

41
00:02:09.024 --> 00:02:10.980
we will get a different result.

42
00:02:10.980 --> 00:02:13.706
So we can't be guaranteed
that this is deterministic,

43
00:02:13.706 --> 00:02:17.766
we can't be guaranteed that if I call get
date with the same arguments in this case,

44
00:02:17.766 --> 00:02:20.670
no arguments that I'm always
gonna get the same answer.

45
00:02:20.670 --> 00:02:23.380
In fact, I'll get different things for
the return value.

46
00:02:23.380 --> 00:02:26.030
So yes, we have kind of a little
bit of an interaction here.

47
00:02:26.030 --> 00:02:31.193
The question was is it not
the constructor of the data object

48
00:02:31.193 --> 00:02:36.055
that's MPR as opposed to
the function get date itself.

49
00:02:36.055 --> 00:02:39.795
And so again, this is one of those cases
where we need to know something about

50
00:02:39.795 --> 00:02:43.895
the functions that we're calling within
our functions and their purity, right?

51
00:02:43.895 --> 00:02:49.979
So this date, when I construct a new date,
like this like we do in get date.

52
00:02:50.980 --> 00:02:55.396
I have an impure function because
I can call that multiple times on

53
00:02:55.396 --> 00:02:59.260
different days and
still get different answers.

54
00:02:59.260 --> 00:03:02.545
So yes, there is introducing
impurity into our function.

55
00:03:02.545 --> 00:03:08.165
There, because this
function is not super pure.

56
00:03:08.165 --> 00:03:12.520
So let's contrast this I think it'll it'll
bring a few things about get date to

57
00:03:12.520 --> 00:03:13.235
light here.

58
00:03:13.235 --> 00:03:15.455
If we look at get workshop date.

59
00:03:15.455 --> 00:03:17.425
We'll leave that one up there too.

60
00:03:17.425 --> 00:03:18.575
What about get workshop date?

61
00:03:18.575 --> 00:03:20.284
What do we think pure or not?

62
00:03:21.901 --> 00:03:22.440
&gt;&gt; Pure.

63
00:03:23.640 --> 00:03:24.270
&gt;&gt; I heard pure.

64
00:03:25.640 --> 00:03:26.220
&gt;&gt; Pure.

65
00:03:26.220 --> 00:03:27.427
&gt;&gt; Pure, pure.

66
00:03:27.427 --> 00:03:29.807
Lets try pure.

67
00:03:29.807 --> 00:03:30.887
Woo hoo.

68
00:03:30.887 --> 00:03:36.150
So what's the difference between
get workshop date and get date?

69
00:03:37.210 --> 00:03:40.193
So yes, this get workshop date
function is deterministic,

70
00:03:40.193 --> 00:03:42.220
it always gives the same result.

71
00:03:42.220 --> 00:03:47.117
If I call it tomorrow, if I call it
in a year, if I call it in 10 years,

72
00:03:47.117 --> 00:03:51.684
assuming JavaScript hasn't
changed dramatically since then,

73
00:03:51.684 --> 00:03:53.773
I should get the same result.

74
00:03:53.773 --> 00:03:58.287
And again, there is a little bit of
interaction here going on with this date,

75
00:03:58.287 --> 00:04:02.940
the capital D date in JavaScript because
we need to know something about that and

76
00:04:02.940 --> 00:04:05.728
what it's gonna what its
behavior is gonna be.

77
00:04:05.728 --> 00:04:10.526
But the way that date constructor
works if I pass in these arguments,

78
00:04:10.526 --> 00:04:13.436
I'm always gonna get back the same date.

79
00:04:13.436 --> 00:04:15.620
And that's gonna give me
the same date string.

80
00:04:15.620 --> 00:04:19.874
So this get workshop date function
even though it takes no inputs.

81
00:04:19.874 --> 00:04:25.862
It's always going to give me the same
output regardless of when I call it.

82
00:04:25.862 --> 00:04:27.100
So it is deterministic.

83
00:04:27.100 --> 00:04:30.040
I always know what this function
is gonna return if I call it

84
00:04:30.040 --> 00:04:32.750
with the same arguments,
no arguments in this case.

85
00:04:33.810 --> 00:04:34.930
Okay, moving on.

86
00:04:34.930 --> 00:04:38.625
How about this two hex function?

87
00:04:38.625 --> 00:04:40.010
Pure or not?

88
00:04:42.340 --> 00:04:49.850
I heard pure, I'm seeing nods for
pure, Woo hoo, this is pure.

89
00:04:51.260 --> 00:04:56.555
Again we've got a function which depends

90
00:04:56.555 --> 00:05:02.610
on essentially only its input arguments.

91
00:05:02.610 --> 00:05:07.311
We are using some built in
JavaScript features here,

92
00:05:07.311 --> 00:05:10.549
like some of these string methods but

93
00:05:10.549 --> 00:05:16.510
those also are not going to introduce
impurity into this function.

94
00:05:16.510 --> 00:05:21.290
So we're always gonna have a predictable
deterministic output, yeah.

95
00:05:21.290 --> 00:05:25.770
So the question is if I have
a function that's taking in an array.

96
00:05:25.770 --> 00:05:31.930
And returning a random element from that
array, is that a pure or impure function?

97
00:05:31.930 --> 00:05:35.515
No, I'm gonna return that
right back over to the room.

98
00:05:35.515 --> 00:05:41.249
What if folks think pure or not, if I'm
returning a randomly selected element?

99
00:05:41.249 --> 00:05:45.020
&gt;&gt; Up here, the random number
generator is a side effects.

100
00:05:45.020 --> 00:05:48.650
&gt;&gt; I heard not pure the random
number generator is a side effect.

101
00:05:48.650 --> 00:05:52.030
So, what do we know about randomness?

102
00:05:53.350 --> 00:05:55.760
It is not deterministic, right?

103
00:05:55.760 --> 00:05:58.158
That is it's kind of
the opposite of deterministic.

104
00:05:58.158 --> 00:06:03.186
If a deterministic thing is something
that we know what its answer is gonna be,

105
00:06:03.186 --> 00:06:06.614
then a random thing is something
that we have no idea or

106
00:06:06.614 --> 00:06:10.826
maybe we have some idea
probabilistically but we can't be sure.

107
00:06:10.826 --> 00:06:14.240
So randomness is a side effect.

108
00:06:14.240 --> 00:06:18.059
Randomness is not functional
randomness is not deterministic.

109
00:06:18.059 --> 00:06:22.230
And so randomness is another one of those
things where when we're working with

110
00:06:22.230 --> 00:06:26.335
randomness, we need to think about it as
a side effect and is one of those world

111
00:06:26.335 --> 00:06:30.215
affecting operations that we kind of
pushed to the edges of our program.

112
00:06:30.215 --> 00:06:34.079
So working with the randomness and
functional programming is a whole topic

113
00:06:34.079 --> 00:06:37.634
that's a big can of worms that is
certainly super interesting to dive

114
00:06:37.634 --> 00:06:41.371
into but for suffice it to say that in
the code that we're gonna be writing

115
00:06:41.371 --> 00:06:44.711
today to really wrap our heads
around functional programming.

116
00:06:44.711 --> 00:06:47.050
We're gonna be doubling
down on determinism and

117
00:06:47.050 --> 00:06:49.780
we're gonna be avoiding
things like randomness.

118
00:06:49.780 --> 00:06:54.710
So randomness would introduce
impurity in functional programming.

119
00:06:54.710 --> 00:06:57.050
We want to be deterministic and

120
00:06:57.050 --> 00:07:01.820
we do not want to change the outside
state of the world except for

121
00:07:01.820 --> 00:07:06.590
returning a value, that is the thing
that we are concerned with

122
00:07:06.590 --> 00:07:12.170
doing to the outside world is
giving it our output value back.

123
00:07:12.170 --> 00:07:15.673
So yes, we want to make sure
we're being deterministic and

124
00:07:15.673 --> 00:07:20.540
make sure that all that we are doing
is returning that output value.

125
00:07:20.540 --> 00:07:25.923
So how about this RGB to hex

126
00:07:25.923 --> 00:07:31.069
function pure not pure?

127
00:07:31.069 --> 00:07:32.157
&gt;&gt; Pure.

128
00:07:32.157 --> 00:07:32.810
&gt;&gt; I hear pure.

129
00:07:36.070 --> 00:07:37.150
It is indeed.

130
00:07:38.280 --> 00:07:45.160
So similar logic as last time with
our two hex function in this case.

131
00:07:45.160 --> 00:07:51.002
However, we do we make this we
make use of this to hex function,

132
00:07:51.002 --> 00:07:54.220
right which again is a little bit.

133
00:07:54.220 --> 00:07:55.916
Maybe we need to think about it and

134
00:07:55.916 --> 00:08:00.210
make sure that we know whether to hex
is pure and deterministic or not.

135
00:08:00.210 --> 00:08:04.310
But since we already said that to
hex is deterministic it is pure.

136
00:08:04.310 --> 00:08:07.275
In this case,
we're not introducing any impurity, and so

137
00:08:07.275 --> 00:08:09.016
we've still got a pure function.

138
00:08:09.016 --> 00:08:15.760
How about set color pure or not?

139
00:08:20.290 --> 00:08:21.470
I hear not.

140
00:08:21.470 --> 00:08:22.680
I hear some knots.

141
00:08:22.680 --> 00:08:25.509
I hear not pure, not pure.

142
00:08:25.509 --> 00:08:27.326
Whoo hoo, great work.

143
00:08:27.326 --> 00:08:31.140
All right, can somebody tell me what
is not pure about this function?

144
00:08:31.140 --> 00:08:32.460
&gt;&gt; It's not returning anything.

145
00:08:33.490 --> 00:08:35.600
&gt;&gt; Well,
we saw one of those big red flags.

146
00:08:35.600 --> 00:08:37.130
It's not returning anything.

147
00:08:37.130 --> 00:08:38.390
There's no return statement.

148
00:08:38.390 --> 00:08:41.191
So in JavaScript,
it's returning undefined but again,

149
00:08:41.191 --> 00:08:44.800
red flag because what's important in
pure functions is what they return.

150
00:08:44.800 --> 00:08:47.764
So if I don't even care enough
to put the word return in there,

151
00:08:47.764 --> 00:08:49.820
I probably have a pretty good indication.

152
00:08:49.820 --> 00:08:51.213
It's not a pure function.

153
00:08:51.213 --> 00:08:54.429
Anything else that makes
us think it's not pure?

154
00:08:54.429 --> 00:08:56.709
&gt;&gt; It's accessing the DOM.

155
00:08:56.709 --> 00:08:58.900
&gt;&gt; It's accessing the DOM, yes.

156
00:08:58.900 --> 00:09:07.270
So this function is setting the color
of a element from our document.

157
00:09:07.270 --> 00:09:10.630
So this is a side effect.

158
00:09:10.630 --> 00:09:13.798
This is something that it's doing to
the world other than returning a value,

159
00:09:13.798 --> 00:09:16.235
which again, we don't even have
a return statement here so

160
00:09:16.235 --> 00:09:17.890
we're not returning a value.

161
00:09:17.890 --> 00:09:21.070
Instead what we're doing is
updating the world somehow.

162
00:09:21.070 --> 00:09:23.880
So that is a prime example.

163
00:09:23.880 --> 00:09:28.259
Color pun not intended [LAUGH]
of a impurity of a side

164
00:09:28.259 --> 00:09:30.560
effect in that function.

165
00:09:32.600 --> 00:09:36.259
Okay, moving on how about
read JSON file pure or

166
00:09:36.259 --> 00:09:39.010
not feel like we're on a game show.

167
00:09:40.250 --> 00:09:41.030
&gt;&gt; I think not impure.

168
00:09:42.310 --> 00:09:44.969
I hear not, I see thumbs down,
I hear impure.

169
00:09:47.270 --> 00:09:49.590
And it is indeed not pure.

170
00:09:50.680 --> 00:09:52.600
Can somebody recap why?

171
00:09:55.850 --> 00:10:01.322
&gt;&gt; It's fetching the data
from an outside URL,

172
00:10:01.322 --> 00:10:03.369
and then,
&gt;&gt; It fetch,

173
00:10:03.369 --> 00:10:06.850
&gt;&gt; It's probably it's returning.

174
00:10:06.850 --> 00:10:08.115
All right, fine.

175
00:10:08.115 --> 00:10:10.054
So that's why.

176
00:10:10.054 --> 00:10:13.060
&gt;&gt; It's fetching the data
from an outside URL.

177
00:10:13.060 --> 00:10:17.936
So that is something that is
coming in from the outside world

178
00:10:17.936 --> 00:10:20.480
into the function, not pure.

179
00:10:21.540 --> 00:10:26.178
And also, what happens if
the data at that URL changes or

180
00:10:26.178 --> 00:10:31.090
maybe that resource goes away and
the fetch fails.

181
00:10:31.090 --> 00:10:31.770
What happens then?

182
00:10:33.240 --> 00:10:36.331
Well, we're probably gonna get
a different result [LAUGH] than

183
00:10:36.331 --> 00:10:37.960
we did when it was working.

184
00:10:37.960 --> 00:10:39.970
So we have non determinism as well.

185
00:10:39.970 --> 00:10:44.739
So this is again, these are real
warning signs or red flags for

186
00:10:44.739 --> 00:10:47.042
functions that are not pure.

187
00:10:47.042 --> 00:10:51.353
Is if they're looking at something in the
outside world, then because the outside

188
00:10:51.353 --> 00:10:55.373
world is always changing, we might not
have a deterministic pure function.

189
00:10:55.373 --> 00:11:02.971
&gt;&gt; Is it also a red flag that
the file name input was never used?

190
00:11:02.971 --> 00:11:08.021
&gt;&gt; Is it also a red flag that
the file name input was never used?

191
00:11:08.021 --> 00:11:13.402
That is probably also interesting
because it's actually

192
00:11:13.402 --> 00:11:18.420
not operating on the file
name that was passed in.

193
00:11:18.420 --> 00:11:21.573
This may also be instructor oversight but

194
00:11:21.573 --> 00:11:26.076
let's imagine that file name
was that this was replaced and

195
00:11:26.076 --> 00:11:30.690
I can actually do this right
in observable, what about now?

196
00:11:30.690 --> 00:11:35.040
&gt;&gt; Impure because the file,
I mean the content of the file can change.

197
00:11:36.310 --> 00:11:40.307
&gt;&gt; So we have a still maybe it is impure
because the content of that file could

198
00:11:40.307 --> 00:11:40.840
change.

199
00:11:40.840 --> 00:11:44.701
Yes so in this case,
it is looking at the input.

200
00:11:44.701 --> 00:11:48.729
Unlike the previous version which
may be instructor error but

201
00:11:48.729 --> 00:11:51.441
even though it's looking at that input,

202
00:11:51.441 --> 00:11:55.718
it's using this fetch to find
something from the outside world.

203
00:11:55.718 --> 00:11:58.444
Which might have changed,
might be different, might not be there,

204
00:11:58.444 --> 00:12:00.490
might give us an error we don't know.

205
00:12:00.490 --> 00:12:04.557
So again, that's why these impure
functions are less predictable and

206
00:12:04.557 --> 00:12:07.742
they're harder to debug,
you'd have to really like,

207
00:12:07.742 --> 00:12:11.170
make sure that you've handled
all those error cases.

208
00:12:11.170 --> 00:12:13.216
They're harder to test.

209
00:12:13.216 --> 00:12:17.975
And so, even though even if we're
passing in the file name anytime we're

210
00:12:17.975 --> 00:12:22.966
asking the outside world for a resource or
looking outside of the function for

211
00:12:22.966 --> 00:12:25.146
information, that is not pure.

212
00:12:25.146 --> 00:12:27.794
&gt;&gt; Are all asynchronous
functions impure by definition

213
00:12:27.794 --> 00:12:31.780
because you're returning a promise
that later needs to be resolved.

214
00:12:31.780 --> 00:12:35.095
I think anything you're doing
asynchronously is non deterministic

215
00:12:35.095 --> 00:12:36.751
because if it was deterministic,

216
00:12:36.751 --> 00:12:39.790
then you wouldn't need to return
a promise in the first place.

217
00:12:39.790 --> 00:12:41.270
Is that correct or am I.

218
00:12:41.270 --> 00:12:45.104
&gt;&gt; Interesting question are all
asynchronous operations

219
00:12:45.104 --> 00:12:47.350
in JavaScript impure.

220
00:12:47.350 --> 00:12:51.470
Because we need to wait for
those promises to resolve.

221
00:12:51.470 --> 00:12:56.694
What about a case of a really long
running calculation that perhaps

222
00:12:56.694 --> 00:13:02.663
if I have some kind of like distributed
system and part of one of my processors

223
00:13:02.663 --> 00:13:07.910
is doing a long calculation and
I'm waiting for that to come back.

224
00:13:09.050 --> 00:13:12.560
Well, it depends again on like that
calculation and what it's doing.

225
00:13:12.560 --> 00:13:14.887
So I, this is an interesting one and

226
00:13:14.887 --> 00:13:18.930
asynchronicity in JavaScript
always opens up cans of worms.

227
00:13:19.970 --> 00:13:24.610
And again, JavaScript itself is
not necessarily the way JavaScript

228
00:13:24.610 --> 00:13:30.140
runs is not necessarily like the most
pure functional environment.

229
00:13:30.140 --> 00:13:36.155
However the operation that
we're doing asynchronously,

230
00:13:36.155 --> 00:13:40.170
it might not be an impure operation.

231
00:13:40.170 --> 00:13:43.190
In this case,
it's grabbing something from the world.

232
00:13:43.190 --> 00:13:48.100
But maybe it would just be a super long
computation that I'm waiting to complete.

233
00:13:49.190 --> 00:13:50.387
And using this await,

234
00:13:50.387 --> 00:13:55.620
I'm essentially pausing my function from
doing anything else until that is done.

235
00:13:55.620 --> 00:13:58.403
And so if that is a deterministic
pure operation and

236
00:13:58.403 --> 00:14:01.316
if my function is also being
deterministic and pure,

237
00:14:01.316 --> 00:14:05.349
then I don't necessarily have any
impurity introduced into my program.

238
00:14:05.349 --> 00:14:08.603
But I feel like we want to ask folks
like Kyle Simpson and Brian Lonsurf,

239
00:14:08.603 --> 00:14:10.348
what they think about that question.

240
00:14:10.348 --> 00:14:15.601
They are much more
Asynchronous JavaScript pros then me,

241
00:14:15.601 --> 00:14:21.290
okay moving right along so
we said read Jason file was not pure.

242
00:14:21.290 --> 00:14:23.969
What about write Jason string?

243
00:14:23.969 --> 00:14:30.641
Pure or not?

244
00:14:30.641 --> 00:14:33.100
&gt;&gt; Pure.

245
00:14:33.100 --> 00:14:37.996
&gt;&gt; We should be confident if we've
already clicked all of these buttons,

246
00:14:37.996 --> 00:14:43.558
all right so what makes right Jason string
pure while read Jason file is not pure.

247
00:14:43.558 --> 00:14:48.084
What right Jason string is doing
is taking in an object and

248
00:14:48.084 --> 00:14:53.284
outputting a string based on that
object now, Jason stringify.

249
00:14:53.284 --> 00:14:57.476
We probably have to look into a little
bit make sure that we know whether

250
00:14:57.476 --> 00:15:00.318
it's deterministic or
not, but in this case,

251
00:15:00.318 --> 00:15:04.533
that is going to return the same string
if I was give it the same object.

252
00:15:04.533 --> 00:15:07.680
However, there is a little
bit of an asterisk on this.

253
00:15:07.680 --> 00:15:12.221
Can anybody think of a condition
in which this might introduce

254
00:15:12.221 --> 00:15:15.636
a little bit of trickiness
to this situation?

255
00:15:15.636 --> 00:15:19.047
Has to do with the object or passing in.

256
00:15:19.047 --> 00:15:21.832
&gt;&gt; The object is an array maybe?

257
00:15:21.832 --> 00:15:24.900
&gt;&gt; Okay, I heard maybe if
the object is an array or what if?

258
00:15:24.900 --> 00:15:27.467
&gt;&gt; If object is changing?

259
00:15:27.467 --> 00:15:33.233
&gt;&gt; If the object is changing, right, so
if the object is a regular JavaScript

260
00:15:33.233 --> 00:15:39.740
object or regular JavaScript array,
both of those are mutable types of data.

261
00:15:39.740 --> 00:15:45.400
So somebody could come along and
mess with the contents of my object.

262
00:15:45.400 --> 00:15:50.135
And so then if I call this function on the
same object because it has retained its

263
00:15:50.135 --> 00:15:53.045
identity but the contents of the object.

264
00:15:53.045 --> 00:15:56.739
Inside have changed then I might get
a different output when I call this at

265
00:15:56.739 --> 00:15:57.719
different times.

266
00:15:57.719 --> 00:16:01.258
So again, this is why it's really
important in functional programming to

267
00:16:01.258 --> 00:16:03.460
work with immutable
data that can't change.

268
00:16:03.460 --> 00:16:06.341
And we're gonna look at how
we can do that in JavaScript,

269
00:16:06.341 --> 00:16:09.780
which doesn't by default have
a lot of immutable data.

270
00:16:09.780 --> 00:16:12.240
We're gonna look at that
in depth later today.

271
00:16:12.240 --> 00:16:15.846
The truth table functions here
exclusive are real quick.

272
00:16:15.846 --> 00:16:18.459
Let's do it pure or not.

273
00:16:18.459 --> 00:16:19.667
&gt;&gt; Pure.

274
00:16:19.667 --> 00:16:22.810
&gt;&gt; I heard pure, boom.

275
00:16:22.810 --> 00:16:27.388
Hopefully it's clear that this will always
give me the same result because I can

276
00:16:27.388 --> 00:16:31.146
depend on those logical operators
in JavaScript to always give me

277
00:16:31.146 --> 00:16:34.106
the same thing if I give
them the same truth values.

278
00:16:34.106 --> 00:16:39.235
All right now what about this
compute truth table where I give

279
00:16:39.235 --> 00:16:43.963
it an operator and
I get out a table of all of the different

280
00:16:43.963 --> 00:16:48.004
permutations for
that operator, pure or not?

281
00:16:48.004 --> 00:16:49.712
&gt;&gt; Pure.

282
00:16:49.712 --> 00:16:52.418
&gt;&gt; I heard pure and
I see thumbs up indeed.

283
00:16:52.418 --> 00:16:56.748
Now, there's a little bit more going
on in this function than in some of

284
00:16:56.748 --> 00:16:59.410
the functions that we've seen so far.

285
00:16:59.410 --> 00:17:01.050
But let's think about it.

286
00:17:01.050 --> 00:17:03.177
We're taking in an operator and

287
00:17:03.177 --> 00:17:07.840
that is really the only thing that
the value of this result depends on.

288
00:17:08.840 --> 00:17:14.233
And then we are returning that value,
which in this case

289
00:17:14.233 --> 00:17:19.854
is an array of objects, and
we should get the same object no

290
00:17:19.854 --> 00:17:25.270
matter how many times we call
it with the same argument.

291
00:17:26.540 --> 00:17:31.850
However, there is also something about
this function that feels a little fishy.

292
00:17:31.850 --> 00:17:34.573
Feels a little not functional.

293
00:17:34.573 --> 00:17:38.156
Does anybody get a tingling sense, yes?

294
00:17:38.156 --> 00:17:42.862
&gt;&gt; The operator argument could
be a function which does affect

295
00:17:42.862 --> 00:17:44.470
the outside world.

296
00:17:44.470 --> 00:17:47.498
&gt;&gt; Okay, the operator could be sneaky and

297
00:17:47.498 --> 00:17:51.730
pass in a side effecting
impure function here.

298
00:17:51.730 --> 00:17:56.570
That is one way that we could
introduce impurity into this function.

299
00:17:56.570 --> 00:18:00.038
And so again,
that's why in pure functional languages,

300
00:18:00.038 --> 00:18:04.110
you're sort of guaranteed that
all of your functions are pure.

301
00:18:04.110 --> 00:18:06.200
And that's a nice guarantee
to have in JavaScript.

302
00:18:06.200 --> 00:18:07.740
We don't have that guarantee.

303
00:18:07.740 --> 00:18:09.770
So we have to be disciplined about it.

304
00:18:09.770 --> 00:18:10.680
But yes, good point.

305
00:18:12.680 --> 00:18:16.420
&gt;&gt; That is also that we
are mutating table inside.

306
00:18:16.420 --> 00:18:21.950
&gt;&gt; We are also mutating table inside
of the function, great point.

307
00:18:21.950 --> 00:18:25.239
So this is I've been talking
like immutable, immutable,

308
00:18:25.239 --> 00:18:28.680
immutable data immutable data,
we're not doing that here.

309
00:18:28.680 --> 00:18:30.600
We're pushing things into this table.

310
00:18:30.600 --> 00:18:32.420
We're changing table.

311
00:18:32.420 --> 00:18:37.040
So this feels a little un functional
however, since we're doing it inside of

312
00:18:37.040 --> 00:18:41.518
the function and we're not communicating
with the outside world at all and

313
00:18:41.518 --> 00:18:44.590
nobody else can access that table and
mess with it.

314
00:18:44.590 --> 00:18:47.960
While I'm doing this computation,
we're not introducing impurity.

315
00:18:47.960 --> 00:18:51.710
However, this isn't really
a functional style of writing code.

316
00:18:51.710 --> 00:18:53.720
It's still pretty imperative.

317
00:18:53.720 --> 00:18:55.830
Still pretty command oriented.

318
00:18:55.830 --> 00:19:00.410
So in a moment we're going to look at how
we could do this in a more functional

319
00:19:00.410 --> 00:19:00.929
style.

320
00:19:02.995 --> 00:19:04.740
Great points.

321
00:19:04.740 --> 00:19:06.447
Okay, how about show a truth table?

322
00:19:09.043 --> 00:19:11.950
I think everybody is gonna,
yell and one voice.

323
00:19:14.110 --> 00:19:16.139
Not pure exactly.

324
00:19:17.140 --> 00:19:19.030
So, just like before,

325
00:19:19.030 --> 00:19:25.160
we said console logging is not cool
console table, which is a fun fun one.

326
00:19:25.160 --> 00:19:27.110
If anybody hasn't used it, try it out.

327
00:19:27.110 --> 00:19:31.160
Console table is also spitting
out something to the console.

328
00:19:31.160 --> 00:19:33.790
That's not pure and again,
no return statement.

329
00:19:33.790 --> 00:19:36.140
Red Flag not pure function.

330
00:19:37.370 --> 00:19:38.240
Okay, great job.

