WEBVTT

1
00:00:00.050 --> 00:00:04.210
So once again, I've got a version,
a fork of this notebook,

2
00:00:04.210 --> 00:00:09.010
which you can find by clicking on the one
fork at the top to find solutions

3
00:00:09.010 --> 00:00:12.775
here with my solutions and
again your mileage may vary.

4
00:00:12.775 --> 00:00:17.205
[COUGH] Okay, so
we've got this write message function,

5
00:00:17.205 --> 00:00:21.110
which takes in three different arguments.

6
00:00:21.110 --> 00:00:24.209
And the idea is that we want
some functions that we can use,

7
00:00:24.209 --> 00:00:26.928
sort of like when you add
a signature to your email,

8
00:00:26.928 --> 00:00:29.604
or we wanna be able to lock
in some of these values.

9
00:00:29.604 --> 00:00:33.085
So that we can write lots of
messages from the same person or

10
00:00:33.085 --> 00:00:37.000
write lots of messages
with the same signature.

11
00:00:37.000 --> 00:00:39.640
So let's start out with sign message,

12
00:00:39.640 --> 00:00:43.320
we saw that one takes in
the message in the salutation.

13
00:00:43.320 --> 00:00:47.530
And returns the full
application of write message.

14
00:00:49.620 --> 00:00:52.550
So we can use that to write
these friendly notes.

15
00:00:52.550 --> 00:00:56.345
And similarly in the next
exercise which we had to fill in,

16
00:00:56.345 --> 00:00:59.986
we're going to take in
a salutation sign message with,

17
00:00:59.986 --> 00:01:05.184
we're gonna define a new function which
is going to take in the message itself.

18
00:01:05.184 --> 00:01:08.944
And the name of the person
who it's coming from, and

19
00:01:08.944 --> 00:01:14.790
is going to return the call to that
write message with all three arguments.

20
00:01:14.790 --> 00:01:19.811
So now we can create our own functions
like write business memo, by locking in

21
00:01:19.811 --> 00:01:24.690
a very professional salutation like
best or best wishes or thinks period.

22
00:01:24.690 --> 00:01:29.632
Or whatever we want to make a very
professional business memo writer,

23
00:01:29.632 --> 00:01:33.316
which then we can use for
all of our employees to sound

24
00:01:33.316 --> 00:01:38.690
very professional in their
business messages, for example.

25
00:01:38.690 --> 00:01:43.598
These examples again are a little bit
contrived for our educational purposes but

26
00:01:43.598 --> 00:01:48.290
hopefully this goes to show how now I
don't have to keep passing in that middle

27
00:01:48.290 --> 00:01:49.030
argument.

28
00:01:49.030 --> 00:01:56.064
I can just use my locked in version that
I've got with this right business memo and

29
00:01:56.064 --> 00:02:01.032
then similarly we have this
mix signature function Which

30
00:02:01.032 --> 00:02:06.290
is gonna take your preferred
salutation and your name.

31
00:02:06.290 --> 00:02:09.828
And it's gonna give you your very own
little function which you can then use to

32
00:02:09.828 --> 00:02:12.450
sign all of your messages with
that salutation and name.

33
00:02:12.450 --> 00:02:16.686
So it has to return a function that takes
a single argument just the message text

34
00:02:16.686 --> 00:02:17.710
itself.

35
00:02:17.710 --> 00:02:22.545
And then is going to allow us
to write that message with all

36
00:02:22.545 --> 00:02:27.284
three of those arguments
again remembering those first

37
00:02:27.284 --> 00:02:32.250
two from the scope of the outer
function makes signature.

38
00:02:32.250 --> 00:02:36.610
So now we can maybe if we're William
Shakespeare trying to write a bunch of

39
00:02:36.610 --> 00:02:38.861
love letters and sonnets and things,

40
00:02:38.861 --> 00:02:43.172
we can make a signature with some very
fancy design of a more salutation.

41
00:02:43.172 --> 00:02:49.320
And use that to write all the love letters
and sonnets and whatever that we want.

42
00:02:49.320 --> 00:02:50.630
Questions so far?

43
00:02:53.370 --> 00:02:56.530
Okay, all right, let's press on.

44
00:02:56.530 --> 00:02:59.260
How about currying this quote function?

45
00:02:59.260 --> 00:03:02.380
Okay, so we've got our quote function,
it takes three arguments.

46
00:03:02.380 --> 00:03:05.781
There's a bunch of very grumpy programmers
that we're using it to quote, but

47
00:03:05.781 --> 00:03:08.730
this look how long this is so
much repetition, so much repetition.

48
00:03:08.730 --> 00:03:13.216
So, the curried quote function,
we could actually get real fancy and

49
00:03:13.216 --> 00:03:15.820
use nested arrow functions here.

50
00:03:15.820 --> 00:03:19.571
You don't necessarily need to if you
have nested function declarations,

51
00:03:19.571 --> 00:03:21.010
that's also totally fine.

52
00:03:21.010 --> 00:03:24.466
But arrow functions are really handy for

53
00:03:24.466 --> 00:03:28.948
this because they allow us
to take in a single value.

54
00:03:28.948 --> 00:03:33.631
And then return another arrow function,
which takes in another

55
00:03:33.631 --> 00:03:38.497
value the next argument in our
original multi argument function.

56
00:03:38.497 --> 00:03:44.862
And then returns another function,
which is going to take in the third value,

57
00:03:44.862 --> 00:03:49.030
the third argument for
our original function.

58
00:03:49.030 --> 00:03:50.330
And finally, we've got all three.

59
00:03:50.330 --> 00:03:54.960
Finally we can call the quote
function with all three of those.

60
00:03:56.110 --> 00:04:01.037
So what we've done is, we've taken
a three argument function, quote,

61
00:04:01.037 --> 00:04:04.540
name year and text, and
turned it into this series.

62
00:04:04.540 --> 00:04:09.479
If you will,
of successive single argument functions.

63
00:04:10.750 --> 00:04:14.414
So now we can create
a quote crack function, for

64
00:04:14.414 --> 00:04:18.730
example, where we pass in
the first argument as a name.

65
00:04:18.730 --> 00:04:23.497
And we could do that for
several other of these people that

66
00:04:23.497 --> 00:04:27.680
we're quoting here Or
we could take one of these.

67
00:04:29.880 --> 00:04:34.004
Functions that has locked in
the name like quote Dykstra and

68
00:04:34.004 --> 00:04:39.130
then apply it on the next argument to
lock in that second argument as well.

69
00:04:39.130 --> 00:04:44.250
So now we're gonna be quoting
Dykstra in 1975, particularly.

70
00:04:44.250 --> 00:04:50.400
And so what we end up with is a more
simplified version of our original code.

71
00:04:50.400 --> 00:04:55.583
Where we don't have to repeat ourselves
anymore we can make functions like quote,

72
00:04:55.583 --> 00:04:58.395
extra 75 that we can call again and
again and

73
00:04:58.395 --> 00:05:03.229
again instead of having to pass in
extra 1975 extra 1975 every time.

74
00:05:03.229 --> 00:05:08.300
So, the idea here and again this is
like a very kind of simplistic example.

75
00:05:08.300 --> 00:05:11.848
The idea here is that through currying
by breaking down the single argument

76
00:05:11.848 --> 00:05:12.480
functions.

77
00:05:12.480 --> 00:05:17.883
We can decide when we want to partially
apply some of the arguments, excuse

78
00:05:17.883 --> 00:05:23.740
me partially apply the multi argument
function to lock in some of the arguments.

79
00:05:23.740 --> 00:05:26.190
So that we can get a reusable function.

80
00:05:26.190 --> 00:05:29.680
So we don't have to be passing those
complex values around all the time.

81
00:05:31.110 --> 00:05:35.901
And what's gonna feel a little bit weird
about this is thanks to the way that

82
00:05:35.901 --> 00:05:40.540
we've written this kind of name goes
to a function that takes year goes to

83
00:05:40.540 --> 00:05:42.385
a function that takes text.

84
00:05:42.385 --> 00:05:48.380
Is that we end up calling these functions
with successive pairs of parentheses here.

85
00:05:48.380 --> 00:05:53.128
So like in our first example We've got
a syntax that might feel a little bit

86
00:05:53.128 --> 00:05:54.820
strange for JavaScript.

87
00:05:54.820 --> 00:05:59.413
We've got our function being
applied to the first argument.

88
00:05:59.413 --> 00:06:04.290
Then we're immediately using more
parentheses to apply it, the resulting

89
00:06:04.290 --> 00:06:09.640
function to the next argument, then we're
immediately using more parentheses.

90
00:06:09.640 --> 00:06:12.933
To apply that resulting
function to the third argument,

91
00:06:12.933 --> 00:06:15.840
which finally gives us our output.

92
00:06:15.840 --> 00:06:20.611
So this shape of things
of calling lots of single

93
00:06:20.611 --> 00:06:24.547
argument functions in a row as it were,

94
00:06:24.547 --> 00:06:31.370
is actually something that comes out
from the kind of the root of it.

95
00:06:31.370 --> 00:06:33.626
Pretty much all functional programming,

96
00:06:33.626 --> 00:06:36.200
which is something called
the lambda calculus.

97
00:06:37.350 --> 00:06:39.980
And yes, lambda,
like that symbol that big symbol.

98
00:06:39.980 --> 00:06:44.555
That is the logo of all of
the functional programming languages and

99
00:06:44.555 --> 00:06:49.129
all of the functional programming
meetups that all of that stuff in

100
00:06:49.129 --> 00:06:52.494
the lambda calculus,
which is a mathematical.

101
00:06:52.494 --> 00:06:54.625
And kind of conceptual framework for

102
00:06:54.625 --> 00:06:59.925
computing developed by Alonzo church in
the 30s, the 1930s in the lambda calculus.

103
00:06:59.925 --> 00:07:04.524
It's almost like really,
really intense functional programming

104
00:07:04.524 --> 00:07:08.889
where not only do you have to do
everything with pure functions.

105
00:07:08.889 --> 00:07:13.889
You have to do everything with single
argument functions that can only

106
00:07:13.889 --> 00:07:16.270
return a single argument value.

107
00:07:16.270 --> 00:07:21.380
But what that means is that in order
to conceive of [LAUGH] kind of

108
00:07:21.380 --> 00:07:28.188
the base unit that you would need to be
able to write infinitely complex programs.

109
00:07:28.188 --> 00:07:33.154
All you need to define is something
called a lambda function,

110
00:07:33.154 --> 00:07:38.710
which is a function that takes in
one argument and returns one value.

111
00:07:38.710 --> 00:07:44.026
And with that tiny little function,
one argument in one argument out,

112
00:07:44.026 --> 00:07:47.830
you can actually create
anything computable.

113
00:07:47.830 --> 00:07:53.754
You can do all of computation with a tiny
little single argument pure function.

114
00:07:53.754 --> 00:07:58.088
And it turns out that the lambda
calculus is essentially equivalent to

115
00:07:58.088 --> 00:08:00.737
Turing machines if you've heard of that.

116
00:08:00.737 --> 00:08:04.366
So you remember I threw up the words
church Turing thesis up on the board

117
00:08:04.366 --> 00:08:05.280
earlier.

118
00:08:05.280 --> 00:08:08.538
That's something you can look
up if you like me find this

119
00:08:08.538 --> 00:08:11.410
theory of computation
stuff really fascinating.

120
00:08:11.410 --> 00:08:17.140
And you wanna see how The the kind
of forefathers of computation and

121
00:08:17.140 --> 00:08:22.870
church and Turing figured out two
totally different paradigms for

122
00:08:22.870 --> 00:08:27.480
conceiving of anything
a computer could do.

123
00:08:27.480 --> 00:08:29.880
Where the lambda calculus
is the functional one.

124
00:08:29.880 --> 00:08:34.857
And that is why the lambda calculus is
something that is at the root of kind of

125
00:08:34.857 --> 00:08:38.370
all of this functional computation.

126
00:08:38.370 --> 00:08:41.669
If you want to know more about a little
bit of an introduction to the lambda

127
00:08:41.669 --> 00:08:42.220
calculus.

128
00:08:42.220 --> 00:08:46.106
There is a video link here,
which is another talk that I give

129
00:08:46.106 --> 00:08:50.484
all about the lambda calculus and
the single argument functions.

130
00:08:50.484 --> 00:08:55.247
which can also help you get into more of
a habit of doing things in this very weird

131
00:08:55.247 --> 00:08:59.090
feeling functional style in sort
of like an extra intense way.

132
00:08:59.090 --> 00:09:02.700
It's almost like going to the gym and
pumping iron.

133
00:09:02.700 --> 00:09:06.062
More than trying to work a little bit
of functional programming into all

134
00:09:06.062 --> 00:09:06.740
of your code.

135
00:09:06.740 --> 00:09:10.110
So yes, I love the lambda calculus and
I love talking about it.

136
00:09:10.110 --> 00:09:13.401
So I will talk your ear off about it now
but you can learn more about it there.

