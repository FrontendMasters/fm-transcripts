WEBVTT

1
00:00:00.149 --> 00:00:02.369
Again your mileage may vary, but

2
00:00:02.369 --> 00:00:07.560
here are some of the ways that I was able
to implement some of these functions.

3
00:00:07.560 --> 00:00:12.335
Again, you can find this as a fork of
the exercise notebook by clicking on

4
00:00:12.335 --> 00:00:14.930
that 1 fork at the top of the exercise.

5
00:00:16.320 --> 00:00:21.630
So this pipeline function,
how are we gonna do it?

6
00:00:21.630 --> 00:00:26.454
We can use recursion, our bff now that
we are functional programmers and

7
00:00:26.454 --> 00:00:28.996
we can start out with some base cases.

8
00:00:28.996 --> 00:00:34.399
So we can say, look, I have some
unknown number of functions here.

9
00:00:34.399 --> 00:00:39.475
And we're using JavaScript spread
syntax dot dot dot to spread out

10
00:00:39.475 --> 00:00:45.644
however many functions we have, we're
gonna kind of get an array of functions.

11
00:00:45.644 --> 00:00:49.719
It could be two, it could be one,
it could be five, it could be bajillions.

12
00:00:49.719 --> 00:00:52.497
We're gonna take that functions array and
see.

13
00:00:52.497 --> 00:00:55.369
If there's nothing in it,
cool we don't have anything to do,

14
00:00:55.369 --> 00:00:57.060
the input is going to be unchanged.

15
00:00:57.060 --> 00:00:57.950
There's no operations.

16
00:00:57.950 --> 00:01:03.018
If there's one thing in it,
then we're gonna return a simple

17
00:01:03.018 --> 00:01:07.805
function which is going to take
whatever input we pass in.

18
00:01:07.805 --> 00:01:10.641
It's gonna take the first thing
out of the functions array,

19
00:01:10.641 --> 00:01:12.096
which only has one thing in it.

20
00:01:12.096 --> 00:01:16.260
So this is a little bit just basically
like accessing the first element of that

21
00:01:16.260 --> 00:01:19.350
array, the only element and
then call that on the input.

22
00:01:21.020 --> 00:01:25.428
But then in the more interesting,
perhaps in the recursive case,

23
00:01:25.428 --> 00:01:30.072
we're going to return a new function
which takes in whatever input and

24
00:01:30.072 --> 00:01:35.050
we're going to return a recursive
application of the pipeline function.

25
00:01:37.350 --> 00:01:37.858
Where?

26
00:01:37.858 --> 00:01:42.716
We are going to create
a pipeline from the tail,

27
00:01:42.716 --> 00:01:45.761
the rest of those functions.

28
00:01:45.761 --> 00:01:48.155
We're gonna get the tail
those functions and

29
00:01:48.155 --> 00:01:50.304
pass those in to the pipeline function.

30
00:01:50.304 --> 00:01:55.482
And that is gonna give us kind
of the rest of the pipeline

31
00:01:55.482 --> 00:02:00.550
which then we can pass in
whatever the transformation

32
00:02:00.550 --> 00:02:07.775
was on the input that the first element
of our functions array wants to make.

33
00:02:07.775 --> 00:02:13.068
So similarly to how if we only have
one function that we're putting

34
00:02:13.068 --> 00:02:18.269
into our pipeline here,
we're going to apply whatever function

35
00:02:18.269 --> 00:02:24.430
is at the head of functions, apply it or
call it on input, pass input into it.

36
00:02:24.430 --> 00:02:26.618
That's what we're doing here.

37
00:02:26.618 --> 00:02:29.030
We get whatever the result of that is.

38
00:02:29.030 --> 00:02:34.245
That output becomes the input
to the rest of our pipeline.

39
00:02:35.951 --> 00:02:40.755
So what we've done is again we've
kind of recursively chopped off

40
00:02:40.755 --> 00:02:44.355
the first thing that we need
to do in our pipeline so

41
00:02:44.355 --> 00:02:50.308
that then we get a full pipeline of all of
the transformations that we need to make.

42
00:02:50.308 --> 00:02:55.186
And so now once we've implemented that,
we should see that once we've defined all

43
00:02:55.186 --> 00:03:00.007
of our little single element functions
here, I can then pipeline them like this.

44
00:03:00.007 --> 00:03:03.988
Where first the input will go through
exclaim, then it will go through heart,

45
00:03:03.988 --> 00:03:05.811
then it will go through pluralize.

46
00:03:05.811 --> 00:03:08.040
Oops, excuse me, that's the wrong order.

47
00:03:08.040 --> 00:03:13.944
First it'll go [LAUGH] through pluralize,
then it'll go through heart, then it'll

48
00:03:13.944 --> 00:03:19.367
go through exclaim so that I get the
correct output of I heart pipelines, yay.

49
00:03:19.367 --> 00:03:21.491
And similarly,
we wanna make sure that order matters.

50
00:03:21.491 --> 00:03:25.220
So later we can double check that if I
pass in those arguments in the wrong

51
00:03:25.220 --> 00:03:28.962
order, those functions in the wrong order,
pipeline doesn't know.

52
00:03:28.962 --> 00:03:32.391
It's just gonna apply them in
whatever order I pass them in.

53
00:03:32.391 --> 00:03:37.203
And so hopefully this is a little
bit more readable than if we

54
00:03:37.203 --> 00:03:40.955
were to to pass in
the result of each function,

55
00:03:40.955 --> 00:03:46.170
if we were to have something like okay,
first apply pluralize,

56
00:03:49.487 --> 00:03:55.513
And then take that and
pass it into heart in this case and

57
00:03:55.513 --> 00:04:01.162
then take that, excuse me,
pass it into explain.

58
00:04:01.162 --> 00:04:08.040
In this case, I kind of have to read the
series of operations backwards as it were.

59
00:04:08.040 --> 00:04:11.801
I kind of have to read from the inside
out to know that pluralize is gonna get

60
00:04:11.801 --> 00:04:14.980
applied first, and
then heart, and then explain.

61
00:04:14.980 --> 00:04:17.258
So in my pipeline helper now,

62
00:04:17.258 --> 00:04:23.094
I now have an easier way to compose these
functions together more readably so

63
00:04:23.094 --> 00:04:28.497
I can see kind of in reading order
where the data is gonna flow through.

64
00:04:31.926 --> 00:04:34.060
Make sense?

65
00:04:34.060 --> 00:04:37.576
&gt;&gt; Is this kind of the concept
of Unix pipes where

66
00:04:37.576 --> 00:04:42.117
you just pipe standard out into
the next program so again?

67
00:04:42.117 --> 00:04:47.838
&gt;&gt; Is this like the concept of Unix
pipes where you can pipe the output

68
00:04:47.838 --> 00:04:53.678
of one command on the command line,
pipe it into another command?

69
00:04:53.678 --> 00:04:55.201
Yes, it is sort of similar to that.

70
00:04:55.201 --> 00:04:59.839
You could create this kind of pipeline
where the output from one function

71
00:04:59.839 --> 00:05:01.824
flows in to the next function.

72
00:05:01.824 --> 00:05:05.864
It's a very similar concept
to piping things from one

73
00:05:05.864 --> 00:05:09.289
command into the next
on a Unix command line.

74
00:05:09.289 --> 00:05:10.593
Great point.

75
00:05:13.067 --> 00:05:14.772
Okay.

76
00:05:14.772 --> 00:05:19.032
How about the reduced pipeline,
was anybody able to get to this?

77
00:05:19.032 --> 00:05:23.444
So you again, your mileage may vary.

78
00:05:23.444 --> 00:05:26.428
But what's interesting is that
with our reduced function,

79
00:05:26.428 --> 00:05:28.250
we can actually condense this down.

80
00:05:28.250 --> 00:05:32.255
We can take whatever
functions are coming in,

81
00:05:32.255 --> 00:05:35.857
return a new function which takes input.

82
00:05:35.857 --> 00:05:43.363
And calls reduce on our little function
that is going to take an accumulator,

83
00:05:43.363 --> 00:05:48.105
which is basically going
to be our output so far.

84
00:05:48.105 --> 00:05:53.130
And the next function to apply,
the next function to call on that output,

85
00:05:53.130 --> 00:05:55.574
the next function in our pipeline.

86
00:05:55.574 --> 00:06:00.461
And it's going to call that function
on the output that we've seen so

87
00:06:00.461 --> 00:06:02.747
far, our accumulated output.

88
00:06:02.747 --> 00:06:07.416
And so we start this off with our initial
value is whatever the first input was,

89
00:06:07.416 --> 00:06:10.052
that's gonna be the first value coming in.

90
00:06:10.052 --> 00:06:15.211
And then we can reduce over
that array of functions to

91
00:06:15.211 --> 00:06:23.080
successively call them on the result of
all of the calls that we have made so far.

92
00:06:23.080 --> 00:06:27.451
So hopefully this goes to show that once
we start getting used to working with

93
00:06:27.451 --> 00:06:31.504
these helper functions like reduce,
and map, and things like that.

94
00:06:31.504 --> 00:06:36.517
And once we start to get really used to
concepts of, okay, how am I gonna conceive

95
00:06:36.517 --> 00:06:41.040
of this as an accumulated value all
of the outputs that I've seen so far.

96
00:06:41.040 --> 00:06:46.490
For example, we can start to get really,
really small little functions.

97
00:06:46.490 --> 00:06:51.600
And that means that there's less
lines of code to get confused by.

98
00:06:51.600 --> 00:06:55.210
And hopefully there's less lines
of codes to introduce bugs in.

99
00:06:55.210 --> 00:07:00.059
So [LAUGH] this is a little challenge to
show how we could do this in a one line

100
00:07:00.059 --> 00:07:01.341
kind of function.

101
00:07:01.341 --> 00:07:04.713
And we could even turn this whole
thing into an arrow function and

102
00:07:04.713 --> 00:07:06.847
put it all on a single
line if we wanna do.

103
00:07:06.847 --> 00:07:11.300
Although sometimes trying to condense
everything into a single line also

104
00:07:11.300 --> 00:07:12.603
hurts readability.

105
00:07:12.603 --> 00:07:16.372
So, buyer beware on that front, okay?

106
00:07:16.372 --> 00:07:21.534
And the next exercise we were trying
to do some snake charming here where we

107
00:07:21.534 --> 00:07:26.696
are transforming data in one shape in
this snake case strings into data and

108
00:07:26.696 --> 00:07:29.380
another shape to camel case strings.

109
00:07:30.770 --> 00:07:34.148
And what you may have found, and
again your mileage may vary, and

110
00:07:34.148 --> 00:07:38.206
this is very much we're starting to
introduce kind of creativity of the actual

111
00:07:38.206 --> 00:07:40.670
practice of functional programming.

112
00:07:40.670 --> 00:07:41.933
Starting to introduce,

113
00:07:41.933 --> 00:07:46.350
how am I gonna think about this in terms
of small single operation functions?

114
00:07:46.350 --> 00:07:50.700
So your mileage may totally vary,
your functions may look very different.

115
00:07:50.700 --> 00:07:56.512
But what I've done is I started out
with that desnake function which splits

116
00:07:56.512 --> 00:08:02.613
up the string into an array of strings
that I'm gonna put back together later.

117
00:08:02.613 --> 00:08:06.248
I've got some other little
single argument functions here.

118
00:08:06.248 --> 00:08:09.817
I can have a function that
capitalizes the first letter.

119
00:08:09.817 --> 00:08:14.379
And here I'm using some JavaScript
string methods to basically do this,

120
00:08:14.379 --> 00:08:18.216
to capitalize just the first
letter of the lowercase string.

121
00:08:18.216 --> 00:08:24.759
And then I can map that function
that capitalizeFirstLetter

122
00:08:24.759 --> 00:08:30.144
function over an array of
strings to capitalize,

123
00:08:30.144 --> 00:08:35.798
excuse me,
I think I have the wrong comment on that.

124
00:08:35.798 --> 00:08:40.510
I can capitalize all of
the words in a string.

125
00:08:40.510 --> 00:08:46.096
Or I can take a a camel case
approach where I'm only

126
00:08:46.096 --> 00:08:51.957
going to capitalize the tail
of an array of strings.

127
00:08:51.957 --> 00:08:55.313
Only gonna capitalize everything
except the first element.

128
00:08:55.313 --> 00:09:00.657
And the first element I'm just gonna
leave unchanged and not capitalize it.

129
00:09:00.657 --> 00:09:04.330
Now I said we're gonna have to
put those things back together so

130
00:09:04.330 --> 00:09:08.903
I can make a function like concatenate
which is going to do a reduce operation on

131
00:09:08.903 --> 00:09:11.629
an array of strings and
add them all together.

132
00:09:11.629 --> 00:09:15.634
Concatenate them together to produce
a single string, so a single value.

133
00:09:15.634 --> 00:09:19.823
So reduce that array of
strings into a single value.

134
00:09:19.823 --> 00:09:24.565
And then I can do something
like create a pipeline where

135
00:09:24.565 --> 00:09:28.287
I'm gonna first pass a string in desnake.

136
00:09:28.287 --> 00:09:31.764
And then the output of that is gonna
be an array of strings which I'm gonna

137
00:09:31.764 --> 00:09:32.795
pass into camelize.

138
00:09:32.795 --> 00:09:37.677
And then that's going to be an array
of strings that I'm going to pass into

139
00:09:37.677 --> 00:09:42.270
concatenate to merge them back
together into a single string again.

140
00:09:42.270 --> 00:09:47.040
And so my snakeToCamel function becomes
that pipeline applied to whatever

141
00:09:47.040 --> 00:09:49.618
snake_case_string I have coming in.

142
00:09:54.494 --> 00:09:58.815
And I've just got some extra cases
there to make sure it's working.

143
00:09:58.815 --> 00:09:59.773
And similarly, and

144
00:09:59.773 --> 00:10:03.389
in this case this is just goes to show
that everything is functions, right?

145
00:10:03.389 --> 00:10:08.024
So I could create a similar
function called snakeToTrain out of

146
00:10:08.024 --> 00:10:12.934
a pipeline of my desnake function,
my capitalizeAll functions.

147
00:10:12.934 --> 00:10:14.758
So I didn't have to write anything new.

148
00:10:14.758 --> 00:10:18.960
I could just reuse those single arguments,
single operation functions.

149
00:10:18.960 --> 00:10:23.924
And then another function I defined called
hyphenate, which is similar to concatenate

150
00:10:23.924 --> 00:10:26.885
where it reduces an array
of strings to a single one.

151
00:10:26.885 --> 00:10:29.657
But in this case,
it's gonna put them together,

152
00:10:29.657 --> 00:10:32.902
joined by a little hyphens by
those little minus symbols.

153
00:10:32.902 --> 00:10:35.997
And so that is going to give me something.

154
00:10:35.997 --> 00:10:39.550
When I call it on a snake_case_string,

155
00:10:39.550 --> 00:10:45.334
it's going to pipeline that string
through all these functions and

156
00:10:45.334 --> 00:10:49.304
I'll end up with a string
in a different case.

157
00:10:49.304 --> 00:10:52.165
So, I'm not gonna go through all of
the different possibilities for this.

158
00:10:52.165 --> 00:10:56.738
But hopefully as a challenge and
a little bit of a mental exercise,

159
00:10:56.738 --> 00:11:01.557
you can go through and try to reuse
those single argument functions and

160
00:11:01.557 --> 00:11:06.070
to create more different types
of transforming case functions.

161
00:11:06.070 --> 00:11:09.682
And again the idea here is that
in functional programming,

162
00:11:09.682 --> 00:11:13.956
we really start to think about our
programs as data transformations.

163
00:11:13.956 --> 00:11:19.026
We start to think about how we can flow
data through a series of operations

164
00:11:19.026 --> 00:11:23.860
to get from the inputs that we have
to the outputs that we want, okay?

165
00:11:23.860 --> 00:11:30.371
So the question is can you do this
with asynchronous operations?

166
00:11:30.371 --> 00:11:33.875
Can you do this with promises or
perhaps with async await?

167
00:11:33.875 --> 00:11:37.919
So that is an amazing
challenge to think about.

168
00:11:37.919 --> 00:11:41.727
How could you write a version
of the pipeline function that is

169
00:11:41.727 --> 00:11:44.790
intended to work with
asynchronous functions,

170
00:11:44.790 --> 00:11:48.085
with functions that might
take a while to complete?

171
00:11:48.085 --> 00:11:50.153
Spoiler alert, yes you can.

172
00:11:50.153 --> 00:11:56.505
And especially the await keywords
make that easier to do without

173
00:11:56.505 --> 00:12:01.573
thinking about the promise chaining and
whatnot.

174
00:12:01.573 --> 00:12:04.398
So that I'm gonna leave as an exercise for
the reader.

175
00:12:04.398 --> 00:12:08.685
How could you change your pipeline
function so that it works with functions

176
00:12:08.685 --> 00:12:13.259
that might not return immediately, but
it might need to wait for the output of?

177
00:12:13.259 --> 00:12:17.279
And how can you make sure that
that output has completed,

178
00:12:17.279 --> 00:12:22.155
has fulfilled its promise before you
pass it in to the next function?

179
00:12:24.079 --> 00:12:25.430
That's a great point.

180
00:12:25.430 --> 00:12:26.161
But yes,

181
00:12:26.161 --> 00:12:32.210
in functional JavaScript we can do this
by awaiting asynchronous functions.

