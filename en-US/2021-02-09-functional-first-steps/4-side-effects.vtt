WEBVTT

1
00:00:00.280 --> 00:00:05.799
So yeah, so we are, now wondering, how
do we go about, functional programming?

2
00:00:05.799 --> 00:00:13.650
Well, again, the core idea is that,
we use pure functions.

3
00:00:13.650 --> 00:00:14.540
But what does this mean?

4
00:00:14.540 --> 00:00:18.328
What, mantra should I have,
as a functional programmer,

5
00:00:18.328 --> 00:00:23.530
to repeat to myself, to remind myself
how to do functional programming.

6
00:00:23.530 --> 00:00:26.090
Well, that's what we're going to be
talking about the rest of the day.

7
00:00:27.250 --> 00:00:31.186
And there are a few kind of guiding
principles that we're going to get into in

8
00:00:31.186 --> 00:00:35.080
the different sections and the different
exercises that we work through.

9
00:00:36.440 --> 00:00:39.130
But here are a couple of the main things.

10
00:00:40.510 --> 00:00:45.920
Number one,
we have to do everything with functions.

11
00:00:45.920 --> 00:00:49.960
Our program becomes, a function.

12
00:00:49.960 --> 00:00:53.505
So instead of thinking again about
a program as like an imperative, series of

13
00:00:53.505 --> 00:00:57.780
commands, of we have to do this and
then do that and then do the other thing.

14
00:00:57.780 --> 00:01:00.700
We can start thinking about
our programs as, a function.

15
00:01:00.700 --> 00:01:04.325
What are the inputs to my function,
what are the outputs.

16
00:01:04.325 --> 00:01:09.610
So this requires us to think about our
programs a little bit more differently.

17
00:01:09.610 --> 00:01:14.141
Instead of thinking, how should my
program run, which is a pretty imperative

18
00:01:14.141 --> 00:01:18.000
question to be asking ourselves,
we should be asking ourselves.

19
00:01:19.190 --> 00:01:21.440
What should my program take in.

20
00:01:21.440 --> 00:01:23.670
And what should my program, return out.

21
00:01:25.540 --> 00:01:29.790
Again, this is all a consequence of
doing everything with pure functions.

22
00:01:33.050 --> 00:01:38.387
So, let's take again a look
at a couple of versions of,

23
00:01:38.387 --> 00:01:44.759
a program, on the imperative side,
we have a series of commands.

24
00:01:45.940 --> 00:01:48.580
Store this string in this variable.

25
00:01:48.580 --> 00:01:50.750
Log this to the console.

26
00:01:50.750 --> 00:01:52.840
Update this variable
with this other string.

27
00:01:52.840 --> 00:01:54.128
Log that thing to the console.

28
00:01:54.128 --> 00:01:56.826
Imperative commands.

29
00:01:56.826 --> 00:01:58.530
Where For the inputs.

30
00:01:58.530 --> 00:01:59.460
What are the outputs?

31
00:02:00.510 --> 00:02:03.240
We're not really asking ourselves
questions in the imperative Style.

32
00:02:04.590 --> 00:02:08.858
In the functional style our
program here is this single

33
00:02:08.858 --> 00:02:13.140
function this greet function
that we're looking at.

34
00:02:14.310 --> 00:02:19.890
And the program takes into key inputs
the greeting that you want to use.

35
00:02:19.890 --> 00:02:21.950
And the name of the person
that you're greeting.

36
00:02:23.500 --> 00:02:26.530
And the output is going to be this.

37
00:02:26.530 --> 00:02:28.480
Hi, Alonzo, or Howdy Alan?

38
00:02:29.870 --> 00:02:31.740
Response this string?

39
00:02:31.740 --> 00:02:34.889
So we're now thinking about we
have a program a really tiny,

40
00:02:34.889 --> 00:02:38.520
small little program, but
a program for greeting people.

41
00:02:38.520 --> 00:02:41.270
We are thinking about what are its inputs,
a greeting and a name.

42
00:02:41.270 --> 00:02:42.870
What is its output a string and so

43
00:02:42.870 --> 00:02:46.784
this is what we're going to end up doing
in the functional programming style is

44
00:02:46.784 --> 00:02:50.780
thinking about our programs as functions
that take inputs and return outputs.

45
00:02:52.110 --> 00:02:56.617
So this means functional programs are a
really great fit for things like again

46
00:02:56.617 --> 00:03:00.775
data transformation where you know
what type of thing is coming in, and

47
00:03:00.775 --> 00:03:03.800
you know what thing you want to come out.

48
00:03:03.800 --> 00:03:05.722
That is a really great use case for

49
00:03:05.722 --> 00:03:08.821
thinking about your code
in terms of pure functions.

50
00:03:12.994 --> 00:03:16.729
And the other thing that we know that
we're going to need to do functional

51
00:03:16.729 --> 00:03:19.300
programming is to avoid side effects.

52
00:03:19.300 --> 00:03:21.209
So we have to keep repeating to ourselves.

53
00:03:22.830 --> 00:03:26.400
Only return output do nothing else.

54
00:03:26.400 --> 00:03:29.660
Only look at input, look at nothing else.

55
00:03:32.910 --> 00:03:34.900
So here's some code that has side effects.

56
00:03:38.640 --> 00:03:41.952
Real quick, who can shout out a side
effect that this code is doing?

57
00:03:41.952 --> 00:03:43.956
&gt;&gt; Assigning a new value to
the thesis dot name property

58
00:03:43.956 --> 00:03:47.585
&gt;&gt; Assigning a new value to the thesis dot

59
00:03:47.585 --> 00:03:50.200
name property, exactly.

60
00:03:50.200 --> 00:03:53.860
So we have this thesis object and
this function is updating it.

61
00:03:53.860 --> 00:03:56.150
It's affecting that object.

62
00:03:56.150 --> 00:03:56.670
Anything else?

63
00:03:57.820 --> 00:04:01.530
&gt;&gt; Using the outside water data test,
not then [INAUDIBLE].

64
00:04:03.280 --> 00:04:05.793
&gt;&gt; Right?
So reading data from the outside world,

65
00:04:05.793 --> 00:04:10.025
like this thesis object, that's
information that I need to do my work here

66
00:04:10.025 --> 00:04:15.310
and I'm taking it from the outside world
instead of the inputs to the function.

67
00:04:15.310 --> 00:04:17.420
So reading data from the outside world.

68
00:04:17.420 --> 00:04:17.936
Exactly.

69
00:04:17.936 --> 00:04:19.872
Anything else?

70
00:04:19.872 --> 00:04:23.620
&gt;&gt; You're logging to,
&gt;&gt; Logging?

71
00:04:23.620 --> 00:04:26.510
Yes, logging to the console,
we've already covered that one.

72
00:04:26.510 --> 00:04:28.819
So these are the kinds of things that
we're going to when we want to do

73
00:04:28.819 --> 00:04:29.760
functional programming.

74
00:04:29.760 --> 00:04:34.214
We're gonna have to watch out for those
and try to find ways to conceive of our

75
00:04:34.214 --> 00:04:37.320
programs in a way that
we can do the same work.

76
00:04:37.320 --> 00:04:40.190
Without having those side effects,
so how can we do that?

77
00:04:40.190 --> 00:04:44.905
Here is a refactored version,
of this program,

78
00:04:44.905 --> 00:04:51.115
I'll let everybody take a look at,
so now instead of updating,

79
00:04:51.115 --> 00:04:56.410
the global thesis object,
what are we doing instead?

80
00:04:56.410 --> 00:04:58.370
&gt;&gt; Creating a new [INAUDIBLE].

81
00:04:58.370 --> 00:05:00.990
&gt;&gt; We are creating a new object.

82
00:05:00.990 --> 00:05:04.083
So this is going to be a technique that
we're going to get used to doing and

83
00:05:04.083 --> 00:05:07.090
we're going to talk about a lot later
when we get into immutable data.

84
00:05:07.090 --> 00:05:11.580
Especially when we work
with functional programs.

85
00:05:11.580 --> 00:05:17.273
We don't want to update things in place
we want to take the old thing and

86
00:05:17.273 --> 00:05:22.950
make a new slightly different copy
of it that we can return out.

87
00:05:22.950 --> 00:05:26.074
So when we say things
like data transformation,

88
00:05:26.074 --> 00:05:31.160
perhaps that's a misnomer because
we're not really changing the data.

89
00:05:31.160 --> 00:05:35.530
We're taking some data and returning
new data based on the original data.

90
00:05:36.580 --> 00:05:41.824
So in this case, we end up instead of
a change thesis object with different

91
00:05:41.824 --> 00:05:47.570
values now we end up with a new object,
and the old one is still the same.

92
00:05:47.570 --> 00:05:52.150
&gt;&gt; So this is not a unary function
that takes two arguments.

93
00:05:52.150 --> 00:05:56.840
You mentioned earlier that a pure
function should only take one generally.

94
00:05:56.840 --> 00:05:59.582
&gt;&gt; Interesting, okay, interesting point,

95
00:05:59.582 --> 00:06:02.850
does a pure function need
to take only one argument?

96
00:06:03.970 --> 00:06:06.344
No, functions can take lots of arguments,

97
00:06:06.344 --> 00:06:10.706
and in fact in functional programming you
end up with functions that can get quite

98
00:06:10.706 --> 00:06:13.480
large function signature,
so lots of arguments.

99
00:06:14.480 --> 00:06:19.272
And the point that I was
making earlier about a pure

100
00:06:19.272 --> 00:06:24.070
function should only look at its input.

101
00:06:24.070 --> 00:06:27.960
By input, I mean, all of the arguments
passed into the function.

102
00:06:27.960 --> 00:06:32.413
So let me restate that the pure function
should only look at its arguments

103
00:06:32.413 --> 00:06:35.130
at the values that are coming in.

104
00:06:35.130 --> 00:06:40.764
As arguments to it, and that might be one,
or it might be a bunch,

105
00:06:40.764 --> 00:06:46.820
so we can, a term that often comes
up in this is arity of a function.

106
00:06:46.820 --> 00:06:52.630
So the number of arguments that a function
takes can be described as it already is.

107
00:06:52.630 --> 00:06:54.958
Again, we're not going to
focus on these terms, but

108
00:06:54.958 --> 00:06:58.630
a single argument function could
be called a unary function.

109
00:06:58.630 --> 00:07:01.320
Two argument function binary et cetera.

110
00:07:03.220 --> 00:07:08.126
We are going to talk about why in
functional programming you often end up

111
00:07:08.126 --> 00:07:10.988
with a lot of single argument functions,

112
00:07:10.988 --> 00:07:14.444
because it makes your life
easier later on often.

113
00:07:14.444 --> 00:07:19.326
But no, there is no requirement and,
excuse me if I misled or misspoke,

114
00:07:19.326 --> 00:07:24.090
that pure functions need to take
only one argument, not the case.

115
00:07:24.090 --> 00:07:25.780
Pure functions can take lots of arguments.

116
00:07:25.780 --> 00:07:29.836
And in fact, since they can't look
at anything in the outside world,

117
00:07:29.836 --> 00:07:34.374
you often have to pass in a lot of data
into the pure function because everything

118
00:07:34.374 --> 00:07:38.610
that it needs to do its computation
has to come in through its arguments.

119
00:07:40.250 --> 00:07:45.359
&gt;&gt; If this name the old thesis, it was one
of the first inputs, if you assigned in

120
00:07:45.359 --> 00:07:50.950
a default value of thesis that would then
turn this to be in pure function, correct?

121
00:07:53.500 --> 00:07:54.880
&gt;&gt; That's a great question.

122
00:07:54.880 --> 00:08:01.817
So, let me restate if we assign
a default value to old thesis that made

123
00:08:01.817 --> 00:08:08.515
it such that the default value of
old thesis is this thesis object so

124
00:08:08.515 --> 00:08:14.375
that if I don't pass in an old
thesis argument by default,

125
00:08:14.375 --> 00:08:19.160
I'm returning something
based on the thesis,

126
00:08:19.160 --> 00:08:22.300
that we've already defined.

127
00:08:23.400 --> 00:08:26.120
Does that make this no
longer a pure function?

128
00:08:27.520 --> 00:08:28.339
Great question.

129
00:08:30.100 --> 00:08:35.526
So, in the sense that the function
would then be looking at

130
00:08:35.526 --> 00:08:40.623
something that I haven't
explicitly passed into it,

131
00:08:40.623 --> 00:08:45.960
we might get a sense that
that's introducing impurity.

132
00:08:47.580 --> 00:08:51.105
However, we said that a pure function,

133
00:08:51.105 --> 00:08:57.230
it changes nothing about the world,
other than returning its value.

134
00:08:58.520 --> 00:09:01.846
If we pass in the default thesis value for
the old thesis,

135
00:09:01.846 --> 00:09:04.979
does this function change
anything about the world?

136
00:09:08.621 --> 00:09:12.011
In what it does, so
I see some people shaking no,

137
00:09:12.011 --> 00:09:15.170
it's still going to
return that new object.

138
00:09:15.170 --> 00:09:17.459
So it's not going to
touch the thesis object,

139
00:09:17.459 --> 00:09:19.880
even if we pass it in as a default.

140
00:09:19.880 --> 00:09:21.480
So, okay, there's one indication.

141
00:09:21.480 --> 00:09:24.793
And we said the other thing that we know
about pure functions is that they're

142
00:09:24.793 --> 00:09:26.360
deterministic.

143
00:09:26.360 --> 00:09:30.160
If I call it with the same arguments
I'm always gonna get the same result.

144
00:09:32.090 --> 00:09:36.600
So, if I have a default value for
all thesis.

145
00:09:36.600 --> 00:09:40.639
And then I call it,
let's say forget this thesis argument and

146
00:09:40.639 --> 00:09:43.390
I call it rename Thesis Church-Turing.

147
00:09:43.390 --> 00:09:45.972
Am I always to going to
get the same result?

148
00:09:49.291 --> 00:09:54.851
On the face of it, we might think,
yes, as long as thesis stays the same,

149
00:09:54.851 --> 00:09:59.380
yes, I'm never going to
get a different result.

150
00:09:59.380 --> 00:10:04.141
Now the gotcha there is that in JavaScript
unlike in some functional languages

151
00:10:04.141 --> 00:10:07.313
we have objects like this
are mutable meaning I could

152
00:10:07.313 --> 00:10:10.777
change something about thesis
elsewhere in my program or

153
00:10:10.777 --> 00:10:15.500
my sneaky co-worker could come in and
change it under my nose.

154
00:10:15.500 --> 00:10:16.445
And in that case,

155
00:10:16.445 --> 00:10:20.680
I might get a different output if the
value of thesis has changed between calls.

156
00:10:20.680 --> 00:10:25.972
However, later today we're going to
look at how we can work with immutable

157
00:10:25.972 --> 00:10:31.012
data in JavaScript So that,
I can be guaranteed because const thesis,

158
00:10:31.012 --> 00:10:36.810
the thesis object itself is never going
to change and the values of the object.

159
00:10:36.810 --> 00:10:39.472
If I work with immutable
data in JavaScript,

160
00:10:39.472 --> 00:10:44.690
we can be guaranteed that the values
of the properties won't change either.

161
00:10:44.690 --> 00:10:49.178
And so if with that asterisk, if I know
that I'm working with immutable data,

162
00:10:49.178 --> 00:10:53.560
then I can be assured that I'm always
going to get that same output.

163
00:10:53.560 --> 00:10:56.560
And so I would still have
a pretty pure function here.

164
00:10:58.300 --> 00:10:59.560
Does that help answer that question?

165
00:11:01.110 --> 00:11:02.050
&gt;&gt; Yes.

166
00:11:02.050 --> 00:11:02.550
Thank you.

167
00:11:02.550 --> 00:11:03.060
&gt;&gt; Awesome.

168
00:11:03.060 --> 00:11:05.600
And we're going to talk a lot
about immutable data later.

169
00:11:05.600 --> 00:11:07.160
I love talking about immutable data.

170
00:11:07.160 --> 00:11:08.190
Super fun.

171
00:11:08.190 --> 00:11:10.351
So I believe the question is,

172
00:11:10.351 --> 00:11:16.760
can we use JavaScript's spread syntax
to spread out the old thesis object.

173
00:11:16.760 --> 00:11:21.193
And manipulate the data or
return a new copy of the data based on

174
00:11:21.193 --> 00:11:25.210
those spread out values,
instead of doing it this way.

175
00:11:26.650 --> 00:11:29.900
There's definitely lots of different
ways we could write this code.

176
00:11:29.900 --> 00:11:35.550
This is just one way that we could
conceive of doing this operation.

177
00:11:35.550 --> 00:11:40.042
Again, the trick with functional
programming is to make sure that you're

178
00:11:40.042 --> 00:11:43.039
not changing anything about
the outside world and

179
00:11:43.039 --> 00:11:46.532
that whatever that you're
returning back is a new thing,

180
00:11:46.532 --> 00:11:50.474
a new object instead of that old
object that you wanted to update.

181
00:11:50.474 --> 00:11:55.318
And again, we're going to talk
a lot about how we can do those non

182
00:11:55.318 --> 00:11:58.815
mutating updates later in the course.

183
00:11:58.815 --> 00:12:02.712
But essentially using things like spread
syntax is really useful in in functional

184
00:12:02.712 --> 00:12:06.213
JavaScript sometimes especially when
working with arrays and what not,

185
00:12:06.213 --> 00:12:09.170
we're going to,
we're going to see that later.

186
00:12:09.170 --> 00:12:13.677
And so that doesn't necessarily
introduce any impurity here,

187
00:12:13.677 --> 00:12:17.516
unless you were, let's say,
working with mutable or

188
00:12:17.516 --> 00:12:23.220
changeable objects as some of those
values and then changing those objects.

189
00:12:23.220 --> 00:12:27.610
So It doesn't really affect the purity,
what syntax we're using.

