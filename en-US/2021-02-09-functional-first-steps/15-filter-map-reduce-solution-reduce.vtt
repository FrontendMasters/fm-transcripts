WEBVTT

1
00:00:00.350 --> 00:00:02.230
Okay, how about reduce?

2
00:00:02.230 --> 00:00:05.350
So again I find reduce
the oddest one of these and

3
00:00:05.350 --> 00:00:09.420
the one that took me the longest
to kind of wrap my head around.

4
00:00:09.420 --> 00:00:16.177
So there's an implementation here which
you can kind of study and reference.

5
00:00:16.177 --> 00:00:21.912
Again, it's a recursive implementation,
we're gonna get really used to this.

6
00:00:21.912 --> 00:00:25.971
[LAUGH] [COUGH] Excuse me, we're gonna
get really used to those recursive

7
00:00:25.971 --> 00:00:28.690
implementations in functional programming.

8
00:00:30.030 --> 00:00:32.850
And the question is what
can we pass in as these

9
00:00:32.850 --> 00:00:36.413
reducer functions to get in
the habit of thinking about,

10
00:00:36.413 --> 00:00:41.085
okay, we've got an accumulator and
each successive value coming in.

11
00:00:41.085 --> 00:00:44.385
How do we combine those to
merge all of those values,

12
00:00:44.385 --> 00:00:47.865
reduce them into a single output value?

13
00:00:47.865 --> 00:00:53.130
So for example, the sum operation,
we can give a pretty simple reducer

14
00:00:53.130 --> 00:00:58.765
function that takes the accumulator and
the value, and returns their sum.

15
00:00:59.830 --> 00:01:03.082
And then with all of these
reduce applications,

16
00:01:03.082 --> 00:01:09.130
we're using an initial value, to kind
of kick off the reduction operation.

17
00:01:09.130 --> 00:01:12.850
In this case, in the case of sum,
kind of makes sense to start from 0, and

18
00:01:12.850 --> 00:01:15.210
then we can add things on from there.

19
00:01:15.210 --> 00:01:21.255
So 0 is gonna be kind of our
initial starting accumulator, and

20
00:01:21.255 --> 00:01:29.780
from there we're going to add on by using
this reducer function that we implemented.

21
00:01:29.780 --> 00:01:33.928
We're going to add on each of the other
values in our array through this recursive

22
00:01:33.928 --> 00:01:34.600
operation.

23
00:01:36.140 --> 00:01:36.656
Questions there?

24
00:01:40.049 --> 00:01:44.645
Okay, and similarly we could
define like a max reducer where

25
00:01:44.645 --> 00:01:49.871
the reducer function is going to
take the accumulator and the value,

26
00:01:49.871 --> 00:01:55.760
and then figure out whether the value
is higher than the accumulator.

27
00:01:55.760 --> 00:01:59.790
And if it is, it's gonna replace
that accumulator with the value.

28
00:01:59.790 --> 00:02:04.690
So that's gonna become the accumulator
in the next call to the function.

29
00:02:04.690 --> 00:02:09.150
And otherwise if value is smaller,
it's gonna keep the old accumulator.

30
00:02:09.150 --> 00:02:11.180
So essentially, we keep checking values.

31
00:02:11.180 --> 00:02:15.393
We start with 0, and we say okay,
is our first value and I put these out

32
00:02:15.393 --> 00:02:19.903
of order just so it would be a little
bit less trivial of how this is working.

33
00:02:19.903 --> 00:02:22.070
We say okay, 7 greater than 0, yes.

34
00:02:22.070 --> 00:02:25.295
Okay, 7 is our new accumulator,
next recursive call.

35
00:02:25.295 --> 00:02:27.710
Okay, 7 is the accumulator,
1 is the value.

36
00:02:27.710 --> 00:02:28.587
Is 1 greater than 7?

37
00:02:28.587 --> 00:02:33.880
No, okay, 7 is still a accumulator, then
3, and then 5, and so on and so forth.

38
00:02:35.545 --> 00:02:39.755
So reduce is one of these functions
that for me is like a real mind bender,

39
00:02:39.755 --> 00:02:44.518
especially when we think about the types
of reducer functions that we need to write

40
00:02:44.518 --> 00:02:46.680
to get the results that we want.

41
00:02:46.680 --> 00:02:49.372
But once we get in the habit, and
this is why we're doing these exercises,

42
00:02:49.372 --> 00:02:50.328
practice makes perfect.

43
00:02:50.328 --> 00:02:55.085
Once we get in the habit of thinking
about accumulators as this way to

44
00:02:55.085 --> 00:02:58.780
remember where we are in the operation.

45
00:02:58.780 --> 00:03:03.457
That allows us to kind of think
about things in this recursive

46
00:03:03.457 --> 00:03:08.501
functional way instead of using
things like let's say an array or

47
00:03:08.501 --> 00:03:15.435
current a max value that we're using in
a for loop that we're updating over time.

48
00:03:15.435 --> 00:03:20.297
So this accumulator is essentially what
allows us to remember the values that

49
00:03:20.297 --> 00:03:24.025
in a non-functional program
we would be using state.

50
00:03:24.025 --> 00:03:29.065
We would be using state fullness to
remember where we're at in our operation.

51
00:03:29.065 --> 00:03:30.243
Why do we need map and filter?

52
00:03:30.243 --> 00:03:35.518
Because can't you reduce any data
structure into another data structure?

53
00:03:35.518 --> 00:03:40.292
Well, in some cases the way you wanna
conceive of the problem that you're

54
00:03:40.292 --> 00:03:44.224
trying to solve,
the program that you're trying to write.

55
00:03:44.224 --> 00:03:47.866
Is maybe that you want to
think about it in terms of,

56
00:03:47.866 --> 00:03:52.865
if we think about back to our sandwich
here, you wanna think about it in

57
00:03:52.865 --> 00:03:57.868
terms of kind of transforming each
element in an array individually,

58
00:03:57.868 --> 00:04:01.464
kind of one at a time,
independent of each other.

59
00:04:01.464 --> 00:04:03.473
And those are great cases for a map.

60
00:04:03.473 --> 00:04:07.776
Or again if we want to throw out some
elements in an array, filter makes it

61
00:04:07.776 --> 00:04:11.934
really quick and easy to do that if all
I need to know is a certain test for

62
00:04:11.934 --> 00:04:14.493
each element, that predicate function.

63
00:04:14.493 --> 00:04:19.114
Reduce comes in a lot handier
when what we really want as

64
00:04:19.114 --> 00:04:24.530
output is a single value instead
of a sequence of values.

65
00:04:24.530 --> 00:04:29.189
So you could write something kind of
like a map by reducing an array to

66
00:04:29.189 --> 00:04:30.351
another array.

67
00:04:30.351 --> 00:04:35.482
But it would require jumping through
a couple of conceptual hurdles

68
00:04:35.482 --> 00:04:40.432
that there's not really a necessity
to put yourself through when

69
00:04:40.432 --> 00:04:44.932
we also have helper functions
that are exactly designed for

70
00:04:44.932 --> 00:04:49.523
transforming all the elements
of one array, excuse me, for

71
00:04:49.523 --> 00:04:55.309
transforming one array into another by
doing an operation on each element.

72
00:04:55.309 --> 00:04:59.601
So it's a question of trying
to find a technique that's

73
00:04:59.601 --> 00:05:03.450
a really good mental match,
like a mental model.

74
00:05:03.450 --> 00:05:06.960
That's a good match for the problem
in terms of what inputs you have and

75
00:05:06.960 --> 00:05:08.100
what output you want.

