WEBVTT

1
00:00:00.210 --> 00:00:05.028
Let us continue our journey through
the techniques in a functional

2
00:00:05.028 --> 00:00:09.932
programmers toolbox by talking
about higher order functions, and

3
00:00:09.932 --> 00:00:13.373
in order to talk about
higher order functions,

4
00:00:13.373 --> 00:00:17.864
we're also gonna need to think
about first class functions.

5
00:00:17.864 --> 00:00:21.368
Now, first class functions
is just the term again,

6
00:00:21.368 --> 00:00:26.068
the terminology is not important,
but it's a term you might have seen

7
00:00:26.068 --> 00:00:29.986
thrown around in the context
of functional programming.

8
00:00:29.986 --> 00:00:33.472
And you may also have seen it in
the context of JavaScript regardless

9
00:00:33.472 --> 00:00:35.012
of functional programming.

10
00:00:35.012 --> 00:00:40.040
Because we say a language
has first class functions,

11
00:00:40.040 --> 00:00:46.634
when the language supports functions
being passed around as values,

12
00:00:46.634 --> 00:00:50.449
just like strings or arrays or numbers.

13
00:00:50.449 --> 00:00:55.827
And JavaScript supports this,
JavaScript has first class functions.

14
00:00:55.827 --> 00:00:59.127
We probably have already
encountered this in JavaScript,

15
00:00:59.127 --> 00:01:00.980
if you've ever used a callback.

16
00:01:00.980 --> 00:01:06.232
Where you pass in a callback function
as an argument to another function.

17
00:01:06.232 --> 00:01:09.129
Now that might not be a pure function.

18
00:01:09.129 --> 00:01:13.341
It might not be a functional style,
but that is an instance of using, of

19
00:01:13.341 --> 00:01:18.050
taking advantage of first-class functions
because we can pass in functions,

20
00:01:18.050 --> 00:01:19.759
pass them around like data.

21
00:01:19.759 --> 00:01:24.075
Now, in a functional world,
where we said our programs are functions,

22
00:01:24.075 --> 00:01:28.888
our programs are made up of functions,
that becomes really useful because we can

23
00:01:28.888 --> 00:01:32.241
pass functions around, in and
out of other functions.

24
00:01:35.109 --> 00:01:38.903
Another term that comes up,
then again, just to de scarify it,

25
00:01:38.903 --> 00:01:40.942
we're just gonna talk about it but

26
00:01:40.942 --> 00:01:46.033
we don't need to concentrate too much on
the terminology is higher order functions.

27
00:01:46.033 --> 00:01:52.837
So a higher-order function is a function
that takes in another function or

28
00:01:52.837 --> 00:01:59.859
maybe it takes in a couple of functions,
or it returns out another function.

29
00:01:59.859 --> 00:02:05.223
Or again, maybe it takes in one
function and returns a different one.

30
00:02:05.223 --> 00:02:10.094
So a higher order function is
a function that takes other

31
00:02:10.094 --> 00:02:13.318
functions as inputs and or outputs.

32
00:02:13.318 --> 00:02:17.308
And higher-order functions are a key
technique that we're gonna end

33
00:02:17.308 --> 00:02:21.294
up working with in functional
programming is getting used to this idea

34
00:02:21.294 --> 00:02:25.364
that functions can take functions
functions can give functions back.

35
00:02:25.364 --> 00:02:30.516
That's gonna become really useful,
especially when we

36
00:02:30.516 --> 00:02:35.893
try to put functions together
into more complex programs.

37
00:02:35.893 --> 00:02:41.540
So, another thing that this relates
to is that higher order functions

38
00:02:41.540 --> 00:02:46.431
can be really useful for
another alternative to iteration.

39
00:02:46.431 --> 00:02:51.549
So you may have already encountered
higher-order functions when

40
00:02:51.549 --> 00:02:57.041
you've used things like array.map,
or array.filter, or reduce.

41
00:02:57.041 --> 00:03:01.562
These are methods that we call
on JavaScript arrays, but

42
00:03:01.562 --> 00:03:05.990
they are also higher-order
functions in the sense that

43
00:03:05.990 --> 00:03:09.664
they take in another
function as an argument,

44
00:03:09.664 --> 00:03:15.247
which they then apply to some kind
of iterable object, like an array.

45
00:03:15.247 --> 00:03:20.245
And map, reduce and
filter are like three super useful

46
00:03:20.245 --> 00:03:24.702
little functions in
the functional programmers

47
00:03:24.702 --> 00:03:29.700
toolbox because they allow
us to really think about our

48
00:03:29.700 --> 00:03:34.700
applications of what we might
usually use an iterative

49
00:03:34.700 --> 00:03:39.181
loop to iterate over an array or
something that.

50
00:03:39.181 --> 00:03:44.285
It allows us to think about processing
that array with functions instead of

51
00:03:44.285 --> 00:03:50.768
with those loops I don't know if anyone
has ever seen this graphic before.

52
00:03:50.768 --> 00:03:55.699
But when I was learning what filter, map
and reduce are, this was one of the most

53
00:03:55.699 --> 00:04:00.715
helpful things that helped me understand
what is going on with these functions.

54
00:04:00.715 --> 00:04:03.940
I like to call it the filter
map reduce sandwich.

55
00:04:03.940 --> 00:04:06.990
It is an adaptation of
someone else's graphic.

56
00:04:06.990 --> 00:04:08.045
The link is there.

57
00:04:08.045 --> 00:04:10.543
Was just the MapReduce sandwich.

58
00:04:10.543 --> 00:04:14.087
But I think this is a beautiful
demonstration of how these higher order

59
00:04:14.087 --> 00:04:14.997
functions work.

60
00:04:14.997 --> 00:04:22.572
So okay, all three of these functions
filter, map and reduce take in an array.

61
00:04:22.572 --> 00:04:24.280
They operate on an array.

62
00:04:24.280 --> 00:04:26.676
And they operate on.

63
00:04:26.676 --> 00:04:31.548
They use another function that they
take in as input to do something

64
00:04:31.548 --> 00:04:33.991
with each element in that array.

65
00:04:33.991 --> 00:04:38.995
So filter takes in an array and
let's say I have an array of like,

66
00:04:38.995 --> 00:04:43.179
sandwich ingredients here
an array of ingredients.

67
00:04:43.179 --> 00:04:50.197
Filter takes in some kind of function
which that inner function will take

68
00:04:50.197 --> 00:04:55.617
in one element and return a true or
false Boolean value.

69
00:04:55.617 --> 00:05:00.487
So we call that type of function,
the type of function that returns true or

70
00:05:00.487 --> 00:05:03.878
false on a single element,
a predicate function.

71
00:05:03.878 --> 00:05:07.344
That's not super important, but
you might see that term thrown around.

72
00:05:07.344 --> 00:05:14.142
So let's say I have
a function like is not gross.

73
00:05:14.142 --> 00:05:18.944
And I use that to map over,
sorry, excuse me to filter all of

74
00:05:18.944 --> 00:05:23.074
these elements to remove
the ones that are gross and

75
00:05:23.074 --> 00:05:26.838
leave me with only the ones
that are not gross.

76
00:05:26.838 --> 00:05:29.491
So let's say I think
that cucumbers are gross.

77
00:05:29.491 --> 00:05:33.010
And I think that onions are gross,
but everything else here is okay.

78
00:05:33.010 --> 00:05:36.803
If I apply a filter to
my ingredients array,

79
00:05:36.803 --> 00:05:41.622
using my is not gross predicate function,
I'll get out

80
00:05:41.622 --> 00:05:47.055
a shorter array which only has
the things That returned true for

81
00:05:47.055 --> 00:05:51.587
my predicate function so
bread, not gross, cool.

82
00:05:51.587 --> 00:05:55.843
Cucumbers cross boo does not make
it through peppers, not gross,

83
00:05:55.843 --> 00:05:57.823
awesome and so on and so forth.

84
00:05:57.823 --> 00:05:58.811
Cool.

85
00:05:58.811 --> 00:06:01.279
hope everybody's with me so far.

86
00:06:01.279 --> 00:06:08.295
Okay map is a similar function in
the sense that it takes in an array.

87
00:06:08.295 --> 00:06:12.452
In this case, maybe we could take in
a shorter array of not gross ingredients.

88
00:06:12.452 --> 00:06:14.340
Map is also gonna take in a function but

89
00:06:14.340 --> 00:06:16.879
it's gonna be more of like
an operation function.

90
00:06:16.879 --> 00:06:20.765
So maybe I have an operation like cut,
or chop or

91
00:06:20.765 --> 00:06:25.624
slice, slice like tomatoes,
not slice like an array slice

92
00:06:25.624 --> 00:06:30.481
I'm gonna pass in that function and
my erase to the map, and

93
00:06:30.481 --> 00:06:35.760
it's going to apply that function
to each element in the array.

94
00:06:35.760 --> 00:06:39.276
So now I'm gonna get a cut bread and

95
00:06:39.276 --> 00:06:44.015
cut peppers and
cut tomatoes and cut lettuce.

96
00:06:44.015 --> 00:06:48.382
So hopefully these are not
super earth shattering.

97
00:06:48.382 --> 00:06:53.909
Hopefully maybe we've worked with these
on array methods in JavaScript before.

98
00:06:53.909 --> 00:06:57.563
The third one for
me is the hardest to wrap my head around.

99
00:06:57.563 --> 00:07:01.677
Reduce is a little bit different,
because unlike filter and

100
00:07:01.677 --> 00:07:06.535
map which both take in an array and
a function and return another array.

101
00:07:06.535 --> 00:07:12.016
Reduced takes in an array in a function,
but it returns a single value.

102
00:07:12.016 --> 00:07:17.324
So we can think of it as it's taking
that array of all these values and

103
00:07:17.324 --> 00:07:22.834
reducing them down to one value that
comes out of the reduce function.

104
00:07:22.834 --> 00:07:27.702
And in this case, the value that I'm
trying to produce is a sandwich.

105
00:07:27.702 --> 00:07:34.152
So I'm gonna have to pass in some kind of
function that's going to take successive

106
00:07:34.152 --> 00:07:40.233
elements of that array and combine them
into some kind of accumulated value.

107
00:07:40.233 --> 00:07:44.569
So maybe I have a function like layer or
stack again,

108
00:07:44.569 --> 00:07:48.521
not like call stack but
like making a sandwich.

109
00:07:48.521 --> 00:07:53.317
So, I am going to take,
let's say the bread in and

110
00:07:53.317 --> 00:07:56.757
there's nothing to stack it with.

111
00:07:56.757 --> 00:07:58.398
So I'm just gonna stack
it on top of itself.

112
00:07:58.398 --> 00:08:03.155
Then I'm gonna take the peppers
in the next call by function and

113
00:08:03.155 --> 00:08:08.563
apply stack to my pre stacked bread and
get a stack of bread and peppers.

114
00:08:08.563 --> 00:08:13.608
Then I'm gonna take the tomato function
and apply that, excuse me, I'm gonna

115
00:08:13.608 --> 00:08:18.428
take the tomato element in, and apply
my stacking function to the tomato and

116
00:08:18.428 --> 00:08:23.774
my existing bread and pepper stack, and
get a bread, pepper, tomato, stack, and

117
00:08:23.774 --> 00:08:29.420
so on and so forth until I've accumulated
up everything I want in my sandwich.

118
00:08:29.420 --> 00:08:34.190
So usually a reduced function has
a excuse me a word the function that

119
00:08:34.190 --> 00:08:38.711
a reduce function takes in which
we could call a reducer function

120
00:08:38.711 --> 00:08:42.395
usually has the notion of
some kind of accumulator,

121
00:08:42.395 --> 00:08:47.950
some kind of value that allows me to stack
up those intermediate values as I go.

