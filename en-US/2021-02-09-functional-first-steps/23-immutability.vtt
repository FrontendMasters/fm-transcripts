WEBVTT

1
00:00:00.350 --> 00:00:03.770
Let's come back to that
concept of immutability.

2
00:00:03.770 --> 00:00:08.177
That has come up several times today
where we said that immutability and

3
00:00:08.177 --> 00:00:13.110
immutable data really go hand in
hand with functional programming.

4
00:00:13.110 --> 00:00:17.949
And we saw that changing things especially
changing things out in the world feels not

5
00:00:17.949 --> 00:00:20.208
functional feels pretty side effect.

6
00:00:20.208 --> 00:00:21.990
Feels pretty not pure.

7
00:00:21.990 --> 00:00:25.676
So let's take a look at how we can
think about immutability when we

8
00:00:25.676 --> 00:00:29.575
are doing functional programming and
particularly in JavaScript.

9
00:00:31.851 --> 00:00:37.326
So in general, mutability causes a lot of
headaches, whether you're doing functional

10
00:00:37.326 --> 00:00:42.511
programming, whether you've been doing
sort of pseudo functional programming or

11
00:00:42.511 --> 00:00:46.690
whether you are sticking to plain
old object oriented JavaScript.

12
00:00:46.690 --> 00:00:52.675
Mutating value, so changing values
in place, like changing the elements

13
00:00:52.675 --> 00:00:57.805
in an array in place, or
changing the elements in a in an object,

14
00:00:57.805 --> 00:01:02.749
the values in an object in place
can lead to a lot of headaches.

15
00:01:02.749 --> 00:01:07.732
Because you have to really think hard
about What somebody might have done

16
00:01:07.732 --> 00:01:10.600
to change your object out from under you.

17
00:01:11.600 --> 00:01:16.655
So in functional programming, and remember
the aim of using functional programming

18
00:01:16.655 --> 00:01:21.443
is to make us happier and more productive
programmers because we have less bugs.

19
00:01:21.443 --> 00:01:24.110
We have easier tests etcetera.

20
00:01:24.110 --> 00:01:26.570
What we're gonna do is we're
gonna avoid mutability.

21
00:01:26.570 --> 00:01:31.920
We're gonna avoid mutating data or
changing data in place.

22
00:01:31.920 --> 00:01:36.595
And instead we're going to replace
any data that we want to update

23
00:01:36.595 --> 00:01:39.400
with a new slightly modified version.

24
00:01:41.290 --> 00:01:42.170
So let's take a look.

25
00:01:43.280 --> 00:01:48.026
Okay, here I've got an array
of some city names,

26
00:01:48.026 --> 00:01:51.310
which are a little bit out of date.

27
00:01:51.310 --> 00:01:56.385
For example, the city called
Mumbai is no longer called Bombay.

28
00:01:56.385 --> 00:02:00.855
So maybe I have this array of cities and
I want to replace that middle value.

29
00:02:00.855 --> 00:02:04.723
So I use regular old JavaScript.

30
00:02:04.723 --> 00:02:07.945
The first index in the array,
I'm going to assign a new value.

31
00:02:07.945 --> 00:02:09.655
And now cities is different.

32
00:02:10.875 --> 00:02:14.828
Okay, so that worked for me because
I'm trying to work with the CRA but

33
00:02:14.828 --> 00:02:19.653
maybe meanwhile, my coworker over there
she's working with this cities array 2 and

34
00:02:19.653 --> 00:02:22.720
she wasn't expecting any
of the data to change.

35
00:02:22.720 --> 00:02:24.010
Maybe I changed it wrong.

36
00:02:24.010 --> 00:02:28.630
Maybe I put an undefined value in there or
maybe I put a number in there or

37
00:02:28.630 --> 00:02:31.373
did something that broke the assumptions

38
00:02:31.373 --> 00:02:35.870
that she was making about
working with the cities array.

39
00:02:35.870 --> 00:02:38.374
And she has no way of knowing that so
you have to check for

40
00:02:38.374 --> 00:02:41.420
everything if to check for
all of those edge cases, right?

41
00:02:41.420 --> 00:02:45.515
Otherwise I am going to break her code
because she was not expecting me to change

42
00:02:45.515 --> 00:02:47.510
that cities array out from under her.

43
00:02:49.380 --> 00:02:54.557
So a safer way to do this is if I
have this array of old cities is

44
00:02:54.557 --> 00:02:59.530
instead of mutating it and
changing that value in place,

45
00:02:59.530 --> 00:03:06.182
I'm going to create a new cities array,
which I can use this map operation.

46
00:03:06.182 --> 00:03:09.610
And here I'm using the built
in JavaScriptarray.mapsyntax,

47
00:03:09.610 --> 00:03:12.148
instead of our little map helper function,
but

48
00:03:12.148 --> 00:03:16.120
you could totally do this with
the more functional style map helper.

49
00:03:16.120 --> 00:03:19.773
That we saw how to use
plenty of times earlier.

50
00:03:19.773 --> 00:03:23.167
So what I'm gonna do is using a map,
I'm gonna go through

51
00:03:23.167 --> 00:03:27.652
everything in this city's array and
check if it needs to be updated or not.

52
00:03:27.652 --> 00:03:33.047
And that map, as we said before,
that map operation returns a new array,

53
00:03:33.047 --> 00:03:36.440
it doesn't change the array in place.

54
00:03:36.440 --> 00:03:41.327
So now new cities is a totally different
array with different values with some

55
00:03:41.327 --> 00:03:42.820
updated names.

56
00:03:42.820 --> 00:03:45.670
But my old cities array
has not been changed.

57
00:03:45.670 --> 00:03:48.436
So my coworker she was working
with that old cities array and

58
00:03:48.436 --> 00:03:51.311
making assumptions about what
types of data would be in it, or

59
00:03:51.311 --> 00:03:54.340
what shape that data would
be things like that.

60
00:03:54.340 --> 00:03:55.780
I haven't missed any of that up.

61
00:03:55.780 --> 00:03:59.795
She is still working with the same data
she was always working with, but I now

62
00:03:59.795 --> 00:04:04.030
have my new cities array that I can use in
my code to do whatever I'm trying to do.

63
00:04:05.630 --> 00:04:11.177
So the idea is that avoiding mutation and
creating new copies with those slight

64
00:04:11.177 --> 00:04:17.570
differences instead of using the same copy
and changing it in place is much safer.

65
00:04:17.570 --> 00:04:22.335
And also allows us to read more
of that determinant, excuse me,

66
00:04:22.335 --> 00:04:25.000
for that more deterministic code.

67
00:04:25.000 --> 00:04:29.190
So that we know what is gonna happen
because we're confident that no one has

68
00:04:29.190 --> 00:04:31.666
changed the data that we're working with.

69
00:04:34.631 --> 00:04:38.900
Now you might be wondering mm-hm what
if those arrays are really long?

70
00:04:38.900 --> 00:04:42.962
Or what have you have to make lots of
updates to them does not mean that you're

71
00:04:42.962 --> 00:04:46.718
gonna have to make more and more and
more and more and more long arrays.

72
00:04:46.718 --> 00:04:50.897
And isn't that gonna get kinda heavy and
kinda not so performant or

73
00:04:50.897 --> 00:04:53.284
we gonna start using a lot of memory and

74
00:04:53.284 --> 00:04:57.860
also we have to take the time to
copy all of that stuff every time.

75
00:04:57.860 --> 00:04:59.260
What's the deal there?

76
00:04:59.260 --> 00:05:01.614
And it's true copying data this way,

77
00:05:01.614 --> 00:05:05.080
instead of changing it in
place is not super efficient.

78
00:05:05.080 --> 00:05:08.770
We have a lot of work to do, and
that takes time and it takes space.

79
00:05:08.770 --> 00:05:10.443
So that is a challenge for

80
00:05:10.443 --> 00:05:14.745
functional programming if I want
all of my data to be immutable,

81
00:05:14.745 --> 00:05:20.410
if I want to always be returning new
copies, Instead of changing things.

82
00:05:20.410 --> 00:05:25.026
How can I do that in a way that's not
going to immediately blow up my computer

83
00:05:25.026 --> 00:05:26.565
from maxing out memory or

84
00:05:26.565 --> 00:05:30.910
just take forever because I have to
go through every array every time.

85
00:05:32.710 --> 00:05:37.674
So there is a solution to this in
the functional programming world which

86
00:05:37.674 --> 00:05:42.637
is special types of data structures
that are designed to be immutable,

87
00:05:42.637 --> 00:05:44.800
but also efficient.

88
00:05:44.800 --> 00:05:47.429
And these are called
immutable data structures, or

89
00:05:47.429 --> 00:05:49.930
sometimes persistent data structures.

90
00:05:49.930 --> 00:05:53.206
Those are actually two slightly
different terms but they're often used

91
00:05:53.206 --> 00:05:57.730
interchangeably, so we're not gonna
get into the subtle differences here.

92
00:05:57.730 --> 00:06:01.150
Use something called structural sharing.

93
00:06:02.440 --> 00:06:07.549
Immutable data structures
allow us to represent

94
00:06:07.549 --> 00:06:11.916
our data in a kind of tree like structure.

95
00:06:11.916 --> 00:06:16.404
So that we can reuse unchanged
parts of the tree while

96
00:06:16.404 --> 00:06:19.980
changing the parts that we wanna update.

97
00:06:21.150 --> 00:06:25.450
Now, we're not gonna go into
a ton of detail on this today.

98
00:06:25.450 --> 00:06:28.890
But suffice it to say that
the core idea is this.

99
00:06:28.890 --> 00:06:35.366
Let's say I have some array called
Zoo with a bunch of Zoo animals,

100
00:06:35.366 --> 00:06:39.310
little emojis and I want to update that.

101
00:06:39.310 --> 00:06:44.536
I want to instead of my little
bunny rabbit here at index 1,

102
00:06:44.536 --> 00:06:51.133
I wanna have an alien, I'm getting
a really exotic alien animal in my Zoo.

103
00:06:51.133 --> 00:06:55.250
Instead of mutating that in place,
which again, could mess up, I don't know.

104
00:06:55.250 --> 00:06:59.439
Maybe my Zoo keeper colleague over there
is not expecting extra terrestrial animals

105
00:06:59.439 --> 00:07:03.130
and their code only works with
terrestrial animals maybe.

106
00:07:03.130 --> 00:07:07.665
So instead of changing that in place,
what I can do is take my

107
00:07:07.665 --> 00:07:12.566
original Zoo array,
break it up into this tree like structure,

108
00:07:12.566 --> 00:07:17.854
where now instead of an array,
I've got kind of a tree of all my data.

109
00:07:17.854 --> 00:07:23.682
And now what I can do
is copy only the nodes

110
00:07:23.682 --> 00:07:28.483
of the tree that I need to change to

111
00:07:28.483 --> 00:07:33.119
replace that value at index 1.

112
00:07:33.119 --> 00:07:37.607
So before I had my array represented with
these little notes, a little pairs of

113
00:07:37.607 --> 00:07:42.242
buddies of animals, which are then joined
by these kind of intermediary nodes.

114
00:07:42.242 --> 00:07:47.509
And then finally I get sort of a root node
that I can point to in my Zoo variable so

115
00:07:47.509 --> 00:07:50.113
that I can unite all of those animals.

116
00:07:50.113 --> 00:07:57.376
What I'm going to do is keep all of
the nodes that I don't need to change and

117
00:07:57.376 --> 00:08:02.432
create new a new node for
any new values that I need.

118
00:08:02.432 --> 00:08:04.832
So in this case,
I'm copying a little two item array,

119
00:08:04.832 --> 00:08:08.040
which is way better than
copying an eight item array.

120
00:08:08.040 --> 00:08:12.877
And then add some intermediate
nodes that link that that new

121
00:08:12.877 --> 00:08:17.670
node up with the old ones
that I have not changed.

122
00:08:17.670 --> 00:08:22.476
So what I've got here,
is this yellow part of the tree here,

123
00:08:22.476 --> 00:08:25.770
gets to be shared by both versions.

124
00:08:25.770 --> 00:08:31.160
So what happens, is that I get to
create new copies of my array,

125
00:08:31.160 --> 00:08:37.590
which is now a tree under the hood
without copying everything in the array.

126
00:08:39.570 --> 00:08:43.070
And we're not gonna go into ton
of detail about how this works or

127
00:08:43.070 --> 00:08:44.655
how it's more efficient but

128
00:08:44.655 --> 00:08:48.570
I'm gonna leave you with some more
resources later to read up on that.

129
00:08:48.570 --> 00:08:52.260
And a talk of mine you can watch also,
to find out more about that.

130
00:08:52.260 --> 00:08:56.479
Suffice it to say,
this really helps functional programmers,

131
00:08:56.479 --> 00:09:01.632
because we get to work with immutable data
but still not have to copy everything

132
00:09:01.632 --> 00:09:06.650
every single time which would be super
slow and would require tons of space.

