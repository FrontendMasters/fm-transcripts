WEBVTT

1
00:00:00.270 --> 00:00:04.670
Okay, so let's dig in,
what is functional programming?

2
00:00:06.410 --> 00:00:09.507
The word of the day,
the phrase of the day.

3
00:00:09.507 --> 00:00:13.770
If you're anything like me, especially
me when I was just starting out in

4
00:00:13.770 --> 00:00:18.269
programming a few years back, you heard
this term functional programming.

5
00:00:18.269 --> 00:00:24.252
And it seems like it's very trendy,
very cool, like all of these buzz words,

6
00:00:24.252 --> 00:00:29.421
and concepts, and fancy symbols,
like stateless, and pure net,

7
00:00:29.421 --> 00:00:34.410
immutable, side effects,
referential highroller functors,

8
00:00:34.410 --> 00:00:38.063
and monads that are super lazy,
and like what?

9
00:00:38.063 --> 00:00:40.264
And then there's this lambda,

10
00:00:40.264 --> 00:00:45.238
this weird triangle symbol floating
around everywhere, and then all of

11
00:00:45.238 --> 00:00:51.130
the functional meetups have it as their
meetup logo, and what does this all mean?

12
00:00:51.130 --> 00:00:54.178
You might be wondering, I certainly was.

13
00:00:54.178 --> 00:01:00.670
And yes, okay it is trendy,
it got lots of mathematical terminology.

14
00:01:00.670 --> 00:01:05.128
It is something that some programmers
like to think is like super cool, and

15
00:01:05.128 --> 00:01:07.267
it makes them look fancy and smart.

16
00:01:07.267 --> 00:01:11.425
But that's not what we're gonna focus
on today, what we're gonna focus on is

17
00:01:11.425 --> 00:01:15.850
understanding what the ideas
behind functional programming are.

18
00:01:15.850 --> 00:01:21.096
So, one other thing we might know
about functional programming

19
00:01:21.096 --> 00:01:25.368
is that it is a style of coding,
a type of programming

20
00:01:25.368 --> 00:01:30.236
that some languages support and
maybe some others don't.

21
00:01:30.236 --> 00:01:34.136
So you might have heard about some
functional languages like Haskell or

22
00:01:34.136 --> 00:01:34.727
Clojure.

23
00:01:34.727 --> 00:01:37.440
Maybe some other ones, like for
the front-end, there's Elm.

24
00:01:37.440 --> 00:01:42.028
There's some languages that support
multiple types of programming

25
00:01:42.028 --> 00:01:47.260
including functional, and let's say
object oriented like F Sharp or Scala.

26
00:01:47.260 --> 00:01:50.946
And then there is JavaScript,
which probably does not usually

27
00:01:50.946 --> 00:01:55.535
get described as a functional language,
but is actually really wonderful for

28
00:01:55.535 --> 00:01:59.560
learning the basics of functional
programming in my opinion.

29
00:01:59.560 --> 00:02:02.323
And personally,
when I was learning JavaScript,

30
00:02:02.323 --> 00:02:06.630
learning functional programming also
helped me get better at JavaScript, and

31
00:02:06.630 --> 00:02:09.344
become a more productive
JavaScript developer.

32
00:02:09.344 --> 00:02:13.230
Once I started learning some of those
basic functional programming concepts,

33
00:02:13.230 --> 00:02:16.768
we're gonna talk in a moment about
why functional JavaScript is a really

34
00:02:16.768 --> 00:02:17.290
nice fit.

35
00:02:19.120 --> 00:02:24.693
So, one other way to understand
functional programming instead

36
00:02:24.693 --> 00:02:30.581
of thinking of as style of writing
code is as a programming paradigm.

37
00:02:30.581 --> 00:02:34.262
Where a paradigm in programming,
or in science,

38
00:02:34.262 --> 00:02:38.906
or in the world can be thought of
as a sort of like a worldview, or

39
00:02:38.906 --> 00:02:42.499
a mindset, or
a way of understanding the world,

40
00:02:42.499 --> 00:02:47.260
what things are in it, and
how those things behave or interact.

41
00:02:48.970 --> 00:02:53.464
Now, functional programming
is just one of many, many,

42
00:02:53.464 --> 00:02:58.237
many different types of programming
paradigms that software

43
00:02:58.237 --> 00:03:03.396
developers have developed over
the course of computing history.

44
00:03:03.396 --> 00:03:07.990
This is by no means an exhaustive list,
there are tons of these.

45
00:03:07.990 --> 00:03:13.428
But there are two really main distinct
paradigms that you might have heard about.

46
00:03:13.428 --> 00:03:20.706
On the one hand on the non-functional
side, we have imperative programming.

47
00:03:20.706 --> 00:03:25.644
We can think of imperative programming
as understanding the world

48
00:03:25.644 --> 00:03:28.475
of computing as a series of commands.

49
00:03:28.475 --> 00:03:32.355
Where programs are a series of
instructions, do this, and then do that,

50
00:03:32.355 --> 00:03:34.810
and then do this other thing.

51
00:03:34.810 --> 00:03:40.309
So a program becomes a series of commands
that the programmer gives to the computer,

52
00:03:40.309 --> 00:03:41.321
essentially.

53
00:03:41.321 --> 00:03:45.164
And one kind of sub paradigm
of the imperative mindset is

54
00:03:45.164 --> 00:03:49.990
object-oriented programming,
which you may have heard of as well,

55
00:03:49.990 --> 00:03:55.088
you may have studied or that maybe
the paradigm that you work in every day.

56
00:03:55.088 --> 00:03:57.082
And what object-oriented programming is,

57
00:03:57.082 --> 00:04:01.120
it could be the subject of a whole other
workshop, which we're not gonna get into.

58
00:04:01.120 --> 00:04:06.171
But in object-oriented programming,
we use concepts like encapsulation,

59
00:04:06.171 --> 00:04:10.304
where we have objects that keep
internal values to themselves,

60
00:04:10.304 --> 00:04:12.536
and they can change those values.

61
00:04:12.536 --> 00:04:14.876
Which when we have values
changing over time,

62
00:04:14.876 --> 00:04:19.078
we have something called state which we're
gonna talk about several times today.

63
00:04:19.078 --> 00:04:22.859
And then those objects since they're
encapsulated, they keep that to

64
00:04:22.859 --> 00:04:27.143
themselves, but they can talk to each
other through messages that they pass by,

65
00:04:27.143 --> 00:04:31.120
for example, calling methods on
other objects in the program.

66
00:04:31.120 --> 00:04:35.760
So you have a kind of this message
passing lifestyle where the world of

67
00:04:35.760 --> 00:04:39.360
the program is made up of
these little kind of cellular

68
00:04:39.360 --> 00:04:42.480
objects that are little
encapsulated units,

69
00:04:42.480 --> 00:04:46.974
and they behave by interacting
with each other through messages.

70
00:04:46.974 --> 00:04:50.285
If you're curious about
how that all works,

71
00:04:50.285 --> 00:04:52.996
I have a talk you can find on YouTube.

72
00:04:52.996 --> 00:04:56.477
That's all about object-oriented
programming, and maybe that definition

73
00:04:56.477 --> 00:05:00.020
that I just gave is a little bit different
than what you might have heard before.

74
00:05:02.070 --> 00:05:06.697
Okay, now I said on the other side from
imperative programming is what we call

75
00:05:06.697 --> 00:05:08.415
declarative programming.

76
00:05:08.415 --> 00:05:13.255
Which is a worldview in which
instead of telling the computer this

77
00:05:13.255 --> 00:05:16.335
is exactly how I want
you to do my bidding,

78
00:05:16.335 --> 00:05:22.407
like we do an imperative programming with
all these commands, do this, do that.

79
00:05:22.407 --> 00:05:25.764
In declarative programming, we declare,

80
00:05:25.764 --> 00:05:29.673
this is what I would like
from you computer please.

81
00:05:29.673 --> 00:05:34.370
And we let the computer or the program
figure out how it's going to do that

82
00:05:34.370 --> 00:05:37.383
computation or
how it's going to get it to us.

83
00:05:37.383 --> 00:05:42.709
So for example, if you've ever written
SQL queries where you essentially

84
00:05:42.709 --> 00:05:47.609
tell the database what you want back,
but you let the implementation

85
00:05:47.609 --> 00:05:52.512
figure out how exactly it's going
to join different data together,

86
00:05:52.512 --> 00:05:57.460
and how it's going to filter things,
and sort things for you.

87
00:05:57.460 --> 00:06:02.273
So the idea with declarative
programming is to move away from this

88
00:06:02.273 --> 00:06:05.080
command oriented imperative style.

89
00:06:05.080 --> 00:06:10.620
And functional programming is one
type of a declarative paradigm.

90
00:06:10.620 --> 00:06:14.186
So the question now is, what is it?

91
00:06:14.186 --> 00:06:17.645
If it's somehow related to
declarative programming, so

92
00:06:17.645 --> 00:06:20.476
we're no longer giving commands,
what is it?

93
00:06:20.476 --> 00:06:22.574
What are we doing when we're
writing functional programming?

94
00:06:22.574 --> 00:06:25.436
And that is what we're
gonna be exploring today.

95
00:06:25.436 --> 00:06:29.635
I claimed earlier and
I'm going to continue claiming that

96
00:06:29.635 --> 00:06:34.433
functional programming is actually
boils down to one basic idea,

97
00:06:34.433 --> 00:06:37.690
seems too good to be true, right?

98
00:06:37.690 --> 00:06:42.291
But really, there is this one core
principle from which everything else,

99
00:06:42.291 --> 00:06:47.037
all of these scary mathematical terms,
all of the monade, and monoids, and

100
00:06:47.037 --> 00:06:50.635
all of the functors, and
the referential transparency.

101
00:06:50.635 --> 00:06:55.987
And all this stuff kind of boils down to a
single idea which if we keep that in mind,

102
00:06:55.987 --> 00:07:00.947
and kind of use that as our north star
to guide our functional programming,

103
00:07:00.947 --> 00:07:06.064
we should be in good shape to start to
understand how all of these other terms,

104
00:07:06.064 --> 00:07:10.200
and techniques, and
tools are kind of consequences of that.

105
00:07:10.200 --> 00:07:16.280
Now, I would not have this understanding
that functional programming

106
00:07:16.280 --> 00:07:22.572
is actually way simpler than a lot of
academic textbooks make it out to be.

107
00:07:22.572 --> 00:07:27.562
Well, it not for an amazing community
that I was really lucky to join when I

108
00:07:27.562 --> 00:07:31.686
was starting out in programming
called the Recurse Center.

109
00:07:31.686 --> 00:07:35.666
This is their logo, this little computer,
you might have seen them around,

110
00:07:35.666 --> 00:07:37.943
you can read more about it at recurse.com.

111
00:07:37.943 --> 00:07:43.424
And while I was at the Recurse Center,
one of the people there

112
00:07:43.424 --> 00:07:49.029
who is helping me learn programming
was named Mary Rose Cook.

113
00:07:49.029 --> 00:07:52.277
And Mary Rose cook wrote this amazing
article which you can find and

114
00:07:52.277 --> 00:07:54.450
it's linked in the materials.

115
00:07:54.450 --> 00:07:56.943
You can actually click right through it or

116
00:07:56.943 --> 00:07:59.515
you can read it right
here in these slides.

117
00:07:59.515 --> 00:08:02.074
She wrote an article
called an Introduction to

118
00:08:02.074 --> 00:08:05.230
Functional Programming Which
really boiled this down.

119
00:08:05.230 --> 00:08:07.320
That sure there's all these terminologies,

120
00:08:07.320 --> 00:08:10.705
there's all these scary mathematical
notations, and things like that.

121
00:08:10.705 --> 00:08:13.370
But really all you need to
worry about is a single idea.

122
00:08:13.370 --> 00:08:18.004
So I strongly recommend that everybody go
check out this recurse.com publication

123
00:08:18.004 --> 00:08:22.647
called Code Words, check out this article,
and read through it after the course.

124
00:08:22.647 --> 00:08:26.765
It uses Python, so we're gonna be
talking about JavaScript today.

125
00:08:26.765 --> 00:08:32.310
But what Mary and the Recurse Center
taught me is that actually,

126
00:08:32.310 --> 00:08:38.590
functional programming boils down
to a single thing, pure functions.

127
00:08:39.740 --> 00:08:42.396
So that is what we're gonna
be thinking about today.

128
00:08:42.396 --> 00:08:45.040
Pure functions, what are they?

129
00:08:45.040 --> 00:08:49.944
Well, you could say a pure function
is a function like we're used to

130
00:08:49.944 --> 00:08:51.242
writing in code.

131
00:08:51.242 --> 00:08:55.581
But it's special in that it
only takes its input in and

132
00:08:55.581 --> 00:09:01.271
that is the only thing, the only data
that it looks at about the world,

133
00:09:01.271 --> 00:09:05.520
and all that it does is return its output.

134
00:09:05.520 --> 00:09:12.253
So we could think about pure functions
as only input in and only output out.

135
00:09:12.253 --> 00:09:16.330
That has some consequences that
we're gonna dig into in a moment.

136
00:09:16.330 --> 00:09:21.421
You can think of a pure function in
functional programming as kind of like

137
00:09:21.421 --> 00:09:26.605
a black box where you have some input
like this green circle that comes in.

138
00:09:26.605 --> 00:09:29.445
And once the function has
done its computation,

139
00:09:29.445 --> 00:09:32.500
you get some output like
this blue purple triangle.

140
00:09:34.060 --> 00:09:35.808
Now, when we write functions,

141
00:09:35.808 --> 00:09:40.603
typically day to day when we're not really
thinking about what paradigm we're using,

142
00:09:40.603 --> 00:09:43.648
or we're not really trying
to be functional programs,

143
00:09:43.648 --> 00:09:47.754
we're just trying to get our jobs done,
or get our coding exercises done.

144
00:09:47.754 --> 00:09:52.268
We often write functions that look
a little bit more like this where it takes

145
00:09:52.268 --> 00:09:56.149
some input, maybe more than one in and
returns some output out.

146
00:09:56.149 --> 00:10:00.070
But it also kind of communicates
with the outside world.

147
00:10:00.070 --> 00:10:04.362
So it also might be reading things
from the outside world to help it make

148
00:10:04.362 --> 00:10:07.733
its computation, like for
example, what time is it?

149
00:10:07.733 --> 00:10:13.270
Or what profile picture does this
user have stored on their profile,

150
00:10:13.270 --> 00:10:16.998
or what is the airspeed
velocity of a swallow?

151
00:10:16.998 --> 00:10:21.048
Things like that,
that aren't direct inputs to the function,

152
00:10:21.048 --> 00:10:24.278
but the function may be
uses to do its computation.

153
00:10:24.278 --> 00:10:28.957
And similarly, the function might
send something back to the outside

154
00:10:28.957 --> 00:10:31.346
world other than its return value.

155
00:10:31.346 --> 00:10:35.977
So it might do something like
log a value to the console, or

156
00:10:35.977 --> 00:10:39.758
turn on a light if you're
working with LEDs, or

157
00:10:39.758 --> 00:10:44.690
it might update your profile
picture on some website.

158
00:10:44.690 --> 00:10:50.141
Even though none of those are actually the
return value, the output of the function.

159
00:10:50.141 --> 00:10:54.732
That communication with the outside
world that sometimes our day to day

160
00:10:54.732 --> 00:10:58.033
functions do,
that's what we call side effects.

161
00:10:58.033 --> 00:11:03.010
It's basically any time the function
has any relation to the outside world

162
00:11:03.010 --> 00:11:07.118
other than through its input arguments and
its return value.

163
00:11:07.118 --> 00:11:10.943
It is doing some kind of side effect, and

164
00:11:10.943 --> 00:11:15.940
that is what is not allowed
in a pure function.

165
00:11:15.940 --> 00:11:17.260
So a pure function,

166
00:11:17.260 --> 00:11:22.011
to put it in another way is a function
that does not have any side effects.

167
00:11:22.011 --> 00:11:28.002
All it looks at, the only information
it needs is whatever is passed in to it

168
00:11:28.002 --> 00:11:34.295
as an input, and the only thing it does
in the world is return its output value.

169
00:11:35.385 --> 00:11:38.919
But let me suffice to say that with
all these different paradigms,

170
00:11:38.919 --> 00:11:41.709
they all have their advantages and
disadvantages.

171
00:11:41.709 --> 00:11:45.668
Just like everything in programming,
in software development,

172
00:11:45.668 --> 00:11:48.007
it's always a matter of trade-offs.

173
00:11:48.007 --> 00:11:52.875
And so each of these paradigms has
something that it can kind of teach us

174
00:11:52.875 --> 00:11:56.176
about how to think about
the world of a program,

175
00:11:56.176 --> 00:12:00.631
and how to conceive of the complex
programs that we wanna write,

176
00:12:00.631 --> 00:12:03.868
how to break them down
into smaller entities.

177
00:12:03.868 --> 00:12:07.876
And I think that it is the best
thing that we can do as

178
00:12:07.876 --> 00:12:12.362
programmers to learn lots
of different paradigms, and

179
00:12:12.362 --> 00:12:17.230
to think of them as different
tools in our mental toolbox, so

180
00:12:17.230 --> 00:12:22.650
that we can effortlessly switch
between them when we need to.

181
00:12:22.650 --> 00:12:25.475
Now that is a lifelong work,

182
00:12:25.475 --> 00:12:30.315
that is a lifestyle that
we were never done with.

183
00:12:30.315 --> 00:12:34.493
But hopefully, by the end of the day,
we'll have a little bit more

184
00:12:34.493 --> 00:12:39.480
of an intuition of what we like about
writing code in a functional style.

185
00:12:39.480 --> 00:12:43.474
And maybe also an intuition about
times when it's not so convenient.

186
00:12:43.474 --> 00:12:47.290
And especially in a couple of sections
from now, we're gonna get into an exercise

187
00:12:47.290 --> 00:12:50.970
where we're really comparing
imperative and functional programming.

188
00:12:50.970 --> 00:12:54.443
And we'll get into those
differences in a little bit.

