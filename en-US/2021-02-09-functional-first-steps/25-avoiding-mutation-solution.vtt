WEBVTT

1
00:00:00.290 --> 00:00:04.291
So let's take a look at the solutions
to these avoiding mutation exercises.

2
00:00:04.291 --> 00:00:06.647
Again, they are in a Fork notebook,

3
00:00:06.647 --> 00:00:11.516
you can find by clicking that Fork link
at the top of the page of the exercise.

4
00:00:11.516 --> 00:00:18.095
So in this solved version, and again,
plenty of ways to implement these.

5
00:00:18.095 --> 00:00:22.520
The main things you wanna
make sure that you're doing

6
00:00:22.520 --> 00:00:26.757
are not using any of those
mutating array methods.

7
00:00:26.757 --> 00:00:31.474
You might find that you wanna use some
of the non mutating array methods to

8
00:00:31.474 --> 00:00:33.186
implement some of these.

9
00:00:33.186 --> 00:00:37.608
But you can also get creative and use
other things, like perhaps you could use,

10
00:00:37.608 --> 00:00:42.110
spread syntax, this dot, dot to implement
this first one, the push function.

11
00:00:42.110 --> 00:00:45.808
So the push function is gonna
replace that array.push method,

12
00:00:45.808 --> 00:00:49.710
where instead of array.push and
then the element being passed in,

13
00:00:49.710 --> 00:00:54.228
which is gonna mess with the original
array, we're gonna take a push function

14
00:00:54.228 --> 00:00:57.673
that's gonna take an element and
the array to put it on too.

15
00:00:57.673 --> 00:01:02.589
And then we could use the spread
syntax to take everything out of

16
00:01:02.589 --> 00:01:07.506
the original array into a new
array that I'm just creating with

17
00:01:07.506 --> 00:01:12.172
this bracket syntax here, and
then add on the new element.

18
00:01:12.172 --> 00:01:13.361
So that's one way we could do this.

19
00:01:13.361 --> 00:01:15.513
But again, your mileage may vary,

20
00:01:15.513 --> 00:01:19.981
there are plenty of valid solutions
to implement this non mutating push.

21
00:01:19.981 --> 00:01:25.499
Just make sure you're not adding anything
on to the original array in place.

22
00:01:25.499 --> 00:01:30.761
And we're checking for
that in these little titles.

23
00:01:30.761 --> 00:01:33.017
How about the update function?

24
00:01:33.017 --> 00:01:37.387
So this is gonna be a new
function that replaces

25
00:01:37.387 --> 00:01:42.776
JavaScript built-in mutating
index assignment here.

26
00:01:42.776 --> 00:01:48.270
So we wanna replace a single value
in the array at a particular index,

27
00:01:48.270 --> 00:01:54.447
but we don't want to change it in place,
we wanna leave the array unchanged.

28
00:01:54.447 --> 00:01:58.630
So we can define an update function
which takes in the index and

29
00:01:58.630 --> 00:02:02.586
the value that you wanna put there and
the original array.

30
00:02:02.586 --> 00:02:08.830
And in this case, I'm using some non
mutating array methods, slice and concat.

31
00:02:08.830 --> 00:02:13.206
Which again, if we really want to force
ourselves to write code the way we

32
00:02:13.206 --> 00:02:17.011
probably would in a pure functional
language, we could create

33
00:02:17.011 --> 00:02:21.964
function versions of these, kind of wrap
those non mutating methods in a function

34
00:02:21.964 --> 00:02:25.878
signature that gives me a little
bit more of a functional style.

35
00:02:25.878 --> 00:02:29.208
But by this point, I think we've
gotten a lot of practice on that.

36
00:02:29.208 --> 00:02:32.619
So just to make things easier for
ourselves,

37
00:02:32.619 --> 00:02:35.325
we can use a chain of these methods.

38
00:02:35.325 --> 00:02:39.863
So we can first slice off everything
before the index that I wanna

39
00:02:39.863 --> 00:02:41.471
replace in the array.

40
00:02:41.471 --> 00:02:46.461
We can concatenate that with a new
little array with the value that

41
00:02:46.461 --> 00:02:48.909
I wanna put in at that index, and

42
00:02:48.909 --> 00:02:54.914
then concatenate that with the slice of
the rest of the array after that index.

43
00:02:54.914 --> 00:02:59.320
And what we've got here with this chain
of methods is actually something also

44
00:02:59.320 --> 00:03:01.299
a little bit pipelining, right?

45
00:03:01.299 --> 00:03:06.582
And this is something that we are used to
doing perhaps in functional, excuse me.

46
00:03:06.582 --> 00:03:11.208
This is something that we're perhaps used
to doing in JavaScript is chaining methods

47
00:03:11.208 --> 00:03:11.858
together.

48
00:03:11.858 --> 00:03:15.071
Where we can take the output of,

49
00:03:15.071 --> 00:03:19.952
again, this non mutating slice operation,
and

50
00:03:19.952 --> 00:03:23.893
chain that into the concat operation.

51
00:03:23.893 --> 00:03:26.515
So we're calling concat on
the new array return there.

52
00:03:26.515 --> 00:03:31.075
So again, it's a similar vibe of
inputs coming into one function, and

53
00:03:31.075 --> 00:03:35.873
then those outputs going into the next
function, and so on, and so forth.

54
00:03:35.873 --> 00:03:38.553
It's just that here,
we're cheating a little bit and

55
00:03:38.553 --> 00:03:40.776
using that more regular JavaScript syntax.

56
00:03:40.776 --> 00:03:45.570
So challenge to the reader at home is
to create some of those more functional

57
00:03:45.570 --> 00:03:49.529
style wrappers around some of
these operations like slice and

58
00:03:49.529 --> 00:03:54.570
concat which even though the built-in
JavaScript methods are not mutating.

59
00:03:54.570 --> 00:03:58.635
If we really wanna force ourselves
to think about functions first,

60
00:03:58.635 --> 00:04:02.356
we could try to do that without
using the dot method notation.

61
00:04:05.901 --> 00:04:09.660
And then the pop function again,

62
00:04:09.660 --> 00:04:14.768
which is to replace
the mutating myraid pop.

63
00:04:14.768 --> 00:04:18.293
We can use the slice function for
example, excuse me.

64
00:04:18.293 --> 00:04:24.935
We can use the slice method which again
does not mutate the original array,

65
00:04:24.935 --> 00:04:31.702
and so we can slice off everything up to
the next to last element in the array.

66
00:04:31.702 --> 00:04:37.888
But again, if you can implement a slice
function that is going to allow us to get

67
00:04:37.888 --> 00:04:44.263
into more of that functional API function
calls as the way that we write our code,

68
00:04:44.263 --> 00:04:49.091
the style of syntax that we use
as opposed to this dot method.

69
00:04:49.091 --> 00:04:55.434
That's again, another little challenge
that you can try to force yourself

70
00:04:55.434 --> 00:05:01.790
to do to complete this in a way that does
not involve this little period here.

71
00:05:01.790 --> 00:05:03.025
And then of course,

72
00:05:03.025 --> 00:05:07.819
there are lots of other array methods
that we could create similarly, we could

73
00:05:07.819 --> 00:05:12.921
create non mutating functions to sort of
represent the equivalent operations of.

74
00:05:12.921 --> 00:05:17.306
But again, that'll be left as sort of
an exercise for you to stretch mind, or

75
00:05:17.306 --> 00:05:20.475
if you wanna come back to this
in a few days or few weeks and

76
00:05:20.475 --> 00:05:24.270
try that that out, perhaps to just
keep that muscle memory going.

77
00:05:24.270 --> 00:05:26.911
Remember the brain is a muscle,
you gotta use it, and

78
00:05:26.911 --> 00:05:30.729
if you wanna turn it into a super strong
and powerful functional programmer,

79
00:05:30.729 --> 00:05:32.841
you got to use it in a functional style,
and

80
00:05:32.841 --> 00:05:35.808
really force yourself to eat
your functional vegetables.

81
00:05:35.808 --> 00:05:40.466
Even if the mutating regular JavaScript
way of working with things, perhaps comes

82
00:05:40.466 --> 00:05:44.472
a little bit more naturally or
is a little bit more what you're used to.

83
00:05:44.472 --> 00:05:48.239
The immutable data
structures example is here.

84
00:05:48.239 --> 00:05:53.101
Again, we'll just let you all kind
of digest that on your own time, but

85
00:05:53.101 --> 00:05:57.007
I would love to know what
differences did people notice?

86
00:05:57.007 --> 00:06:01.645
Where there are differences in
the two libraries which have a very

87
00:06:01.645 --> 00:06:06.883
different way of working with these
immutable data structures, right?

88
00:06:06.883 --> 00:06:11.289
Like for example, in immutable JS,
we don't even call them arrays,

89
00:06:11.289 --> 00:06:12.569
we call them lists.

90
00:06:12.569 --> 00:06:18.503
For example, there's like a new word
to learn and maps instead of objects.

91
00:06:18.503 --> 00:06:23.363
Whereas in MRI, we're working with more
typical looking regular JavaScript things.

92
00:06:23.363 --> 00:06:28.338
But we're using this sort of
strange produce function with

93
00:06:28.338 --> 00:06:32.924
these little draft call backs
to create new versions.

94
00:06:32.924 --> 00:06:35.470
And I'll let you all dig
into exactly how it works.

95
00:06:35.470 --> 00:06:40.454
But after having just a few minutes to
glance at it, would anybody like to share

96
00:06:40.454 --> 00:06:45.679
some of their thoughts on differences they
noticed or some of their preferences?

97
00:06:45.679 --> 00:06:52.606
&gt;&gt; The MRI library kind of looks more like
the JavaScript we already used to, right?

98
00:06:52.606 --> 00:06:58.509
Sort of kinda looks more like using
a regular ESX Map Reduce function.

99
00:06:58.509 --> 00:07:01.958
I will just have instead
of Array prototype,

100
00:07:01.958 --> 00:07:05.499
whenever you now have different options,
for

101
00:07:05.499 --> 00:07:11.065
us immutable GS can look something
like it something entirely new to me.

102
00:07:11.065 --> 00:07:15.304
&gt;&gt; Yeah, so what I heard is that the MRI
library looks a little bit more like

103
00:07:15.304 --> 00:07:20.181
regular JavaScript, which indeed is we're
working with the same old JavaScript

104
00:07:20.181 --> 00:07:21.968
arrays and things like that.

105
00:07:21.968 --> 00:07:27.188
Whereas in immutable JS,
we have some new stuff to learn,

106
00:07:27.188 --> 00:07:31.873
like lists and maps, and
some new methods like set,

107
00:07:31.873 --> 00:07:35.191
and size, and get things like that.

108
00:07:35.191 --> 00:07:39.917
And so I believe that one of the
objectives of MRI was to do exactly that

109
00:07:39.917 --> 00:07:44.891
to make it so that functional programmers
working with immutable data in

110
00:07:44.891 --> 00:07:48.334
JavaScript didn't need
to learn any new API's.

111
00:07:48.334 --> 00:07:53.060
So that they could basically work with
the features of the language that

112
00:07:53.060 --> 00:07:54.329
they're used to.

113
00:07:54.329 --> 00:07:59.538
And in fact in other cases,
we could actually just

114
00:07:59.538 --> 00:08:06.251
kind of destructor this produce
function out of the MRI object.

115
00:08:06.251 --> 00:08:10.724
I think it's the default value
exported by this library is actually

116
00:08:10.724 --> 00:08:12.223
the function itself.

117
00:08:12.223 --> 00:08:16.808
And then we don't even have this MRI dot,
and we can just work with this

118
00:08:16.808 --> 00:08:21.632
produce function to produce new versions
of these JavaScript objects and

119
00:08:21.632 --> 00:08:24.685
arrays without mutating
any of them in place.

120
00:08:24.685 --> 00:08:27.687
So that is certainly a convenient thing.

121
00:08:27.687 --> 00:08:32.114
However, I think immutable maybe has been
around a tiny bit longer, so there may be

122
00:08:32.114 --> 00:08:36.309
some people out there who are already
a little bit more used to working with it.

123
00:08:36.309 --> 00:08:41.728
It comes from, I believe the same
team that created React at Facebook.

124
00:08:41.728 --> 00:08:47.663
So there might be some overlap between
the React programming community and

125
00:08:47.663 --> 00:08:49.461
the immutable users.

126
00:08:49.461 --> 00:08:52.514
So if you're perhaps more
comfortable with that world,

127
00:08:52.514 --> 00:08:54.622
there might be reasons to use it there.

128
00:08:54.622 --> 00:08:55.218
What do we think?

129
00:08:55.218 --> 00:08:58.299
Are we interested in maybe
trying some of these out,

130
00:08:58.299 --> 00:09:02.149
taking a closer look at the docs,
trying them out in our own code,

131
00:09:02.149 --> 00:09:05.804
seeing if we can really force
ourselves to never mutate data?

132
00:09:05.804 --> 00:09:10.576
What is the benefit of using
these data structures like these

133
00:09:10.576 --> 00:09:15.725
libraries instead of using
the built-in features of JavaScript

134
00:09:15.725 --> 00:09:20.605
that allow us to kind of make
sure that data can't be changed.

135
00:09:20.605 --> 00:09:26.301
For example, if I'm using a const
with a string, for example, so

136
00:09:26.301 --> 00:09:33.424
that no one can ever change the value of
that variable that's holding that string,

137
00:09:33.424 --> 00:09:38.941
or if I'm using object.freeze
to lock in a particular object.

138
00:09:38.941 --> 00:09:44.461
And so that is where that efficiency
issue that we ran into with copying and

139
00:09:44.461 --> 00:09:46.342
copying, and copying!

140
00:09:46.342 --> 00:09:51.038
JavaScript by default,
by its nature does not have these this

141
00:09:51.038 --> 00:09:55.554
kind of structural sharing data
structures that allow us to

142
00:09:55.554 --> 00:10:00.453
really efficiently make lots of
copies of big data structures.

143
00:10:00.453 --> 00:10:02.776
And so depending on what you're doing,

144
00:10:02.776 --> 00:10:05.782
if you're just working with
little single values or

145
00:10:05.782 --> 00:10:10.515
perhaps very simple data structures, and
not doing a tonne of transformations.

146
00:10:10.515 --> 00:10:13.020
You might not run into
that efficiency problem,

147
00:10:13.020 --> 00:10:15.413
you might not run into
performance problems.

148
00:10:15.413 --> 00:10:19.419
And so you might be totally happy
working with those built-in JavaScript

149
00:10:19.419 --> 00:10:22.402
features that make sure that
nothing is gonna change.

150
00:10:22.402 --> 00:10:26.766
However, if you're doing some really big
operations, you have to have some really

151
00:10:26.766 --> 00:10:30.147
big data structures that require
lots of updates of long arrays,

152
00:10:30.147 --> 00:10:31.329
and things like that.

153
00:10:31.329 --> 00:10:36.174
You might find that the efficiency
improvements afforded by these libraries

154
00:10:36.174 --> 00:10:39.976
that use these techniques of
persistent data structures and

155
00:10:39.976 --> 00:10:44.524
immutable data structures might come
in handy, especially when we're

156
00:10:44.524 --> 00:10:48.563
working on in situations where
performance is more of an issue.

157
00:10:48.563 --> 00:10:52.516
Yes, once again, we have not had a ton of
time to dive into the world of immutable

158
00:10:52.516 --> 00:10:53.637
data structures, but

159
00:10:53.637 --> 00:10:57.478
this is an area of functional programming
that I think is super fascinating.

160
00:10:57.478 --> 00:11:01.809
And so I also have a talk linked at
the bottom here about how immutable data

161
00:11:01.809 --> 00:11:05.440
structures work in detail and
why they're more efficient.

162
00:11:05.440 --> 00:11:07.207
So if you wanna dive in more and

163
00:11:07.207 --> 00:11:10.037
understand a little bit
more about how trees and

164
00:11:10.037 --> 00:11:14.299
sharing make all of this efficiency
possible, you can check that out.

165
00:11:14.299 --> 00:11:18.667
And there's also going to be lots of
resources linked where you can read tons

166
00:11:18.667 --> 00:11:22.897
more about how these very fancy,
very interesting, very exciting, and

167
00:11:22.897 --> 00:11:25.370
really performant data structures work.

168
00:11:25.370 --> 00:11:29.866
Are gonna be listed in the resources
at the end of the workshop.

169
00:11:29.866 --> 00:11:35.382
Did these libraries allow us to work with
kind of deeply nested data structures,

170
00:11:35.382 --> 00:11:40.492
so that when I create an immutable
version of let's say, an array which has

171
00:11:40.492 --> 00:11:45.463
other arrays in it, or an object which
has other objects as values in it.

172
00:11:45.463 --> 00:11:49.398
Will it kind of recursively make sure to

173
00:11:49.398 --> 00:11:53.944
make everything all
the way down immutable?

174
00:11:53.944 --> 00:11:55.387
That is a great question.

175
00:11:55.387 --> 00:12:01.422
Since I'm not a core maintainer or
power user of either of these libraries,

176
00:12:01.422 --> 00:12:07.272
I would probably say we should definitely
check with their documentation

177
00:12:07.272 --> 00:12:11.913
to find out how they handle
those nested data structures.

178
00:12:11.913 --> 00:12:17.065
But my gut understanding is yes,
they will help you do that,

179
00:12:17.065 --> 00:12:23.631
so that you can, like let's say make
an immutable list out of a nested list and

180
00:12:23.631 --> 00:12:28.699
still have the deeper nested
lists also be locked in place.

181
00:12:28.699 --> 00:12:33.845
However, don't quote me on that,
go to the source, and check out the docs.

182
00:12:33.845 --> 00:12:35.883
They're linked in here and

183
00:12:35.883 --> 00:12:40.495
make sure that is something
that these libraries implement.

184
00:12:40.495 --> 00:12:44.719
And there are tons of other libraries
out there that do something similar.

185
00:12:44.719 --> 00:12:48.207
So again, you might wanna look around
a little bit, you can search for

186
00:12:48.207 --> 00:12:51.245
other immutable data structures
libraries in JavaScript.

187
00:12:51.245 --> 00:12:54.736
Or perhaps if you program in other
languages too, you can look and

188
00:12:54.736 --> 00:12:56.958
see what libraries exist for immutable or

189
00:12:56.958 --> 00:12:59.511
persistent data structures
in that language.

190
00:12:59.511 --> 00:13:03.160
For example, there's also one for
Python, at least one that I know of, and

191
00:13:03.160 --> 00:13:04.082
things like that.

192
00:13:04.082 --> 00:13:08.547
And always make sure that you dig into
those docs to understand what's happening,

193
00:13:08.547 --> 00:13:12.691
to understand all the API, and the
examples that they'll give you in the docs

194
00:13:12.691 --> 00:13:17.574
to see what happens when I'm working with,
let's say, a deeply nested data structure.

195
00:13:17.574 --> 00:13:18.620
That's a great question.

