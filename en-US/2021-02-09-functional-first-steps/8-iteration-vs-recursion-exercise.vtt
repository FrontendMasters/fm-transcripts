WEBVTT

1
00:00:00.440 --> 00:00:03.680
So in the next exercise,
we're gonna actually dig into that.

2
00:00:03.680 --> 00:00:08.129
And after we've completed these exercises,
we will have a moment to discuss

3
00:00:08.129 --> 00:00:11.072
all of these great questions
about performance and

4
00:00:11.072 --> 00:00:15.540
about problems that you might run into
when you're working with large data.

5
00:00:17.020 --> 00:00:21.840
So the next exercise that
we're going to do is in

6
00:00:21.840 --> 00:00:27.022
a notebook exercise
iteration versus recursion,

7
00:00:27.022 --> 00:00:34.510
which you can also again find in that
functional JavaScript first steps.

8
00:00:35.750 --> 00:00:41.310
Outline right here,
exercise iteration versus recursion.

9
00:00:41.310 --> 00:00:45.904
And it's also in this collection page,
the functional JavaScript first steps,

10
00:00:45.904 --> 00:00:48.180
exercise iteration versus recursion.

11
00:00:49.920 --> 00:00:53.446
And so
the exercises in here are all described.

12
00:00:53.446 --> 00:00:58.049
What we're gonna do is we're going to keep
in mind what we know about a recursive

13
00:00:58.049 --> 00:00:59.846
function and how to write one.

14
00:00:59.846 --> 00:01:02.942
And then we're gonna do
is compare iteration and

15
00:01:02.942 --> 00:01:06.180
recursion in terms of readability.

16
00:01:06.180 --> 00:01:08.920
So I got some code for
you to read and think about here.

17
00:01:10.000 --> 00:01:10.920
Right ability.

18
00:01:10.920 --> 00:01:13.944
So we're gonna actually
implement some functions and

19
00:01:13.944 --> 00:01:17.140
then we're gonna think about performance.

20
00:01:17.140 --> 00:01:21.718
So I've got a couple of these exercises
that are gonna really help us think about

21
00:01:21.718 --> 00:01:26.180
these different, the different mini
paradigms for doing this repetition.

22
00:01:27.350 --> 00:01:29.511
In the right ability exercise,

23
00:01:29.511 --> 00:01:34.660
you are going to write your own
implementation of a function.

24
00:01:34.660 --> 00:01:38.066
And so really quick I just wanna let
you know a couple of things about how

25
00:01:38.066 --> 00:01:39.270
observable works.

26
00:01:39.270 --> 00:01:43.105
Because that's gonna allow you to do this
coding exercise, right in your browser,

27
00:01:43.105 --> 00:01:44.850
in this notebook.

28
00:01:44.850 --> 00:01:48.270
Again, you do not need
an observable account, to do this.

29
00:01:48.270 --> 00:01:52.250
However, if you would like to
save your work, and save your,

30
00:01:52.250 --> 00:01:56.922
functions that you're about to write
here today, you definitely can,

31
00:01:56.922 --> 00:02:01.510
by signing up for observable and
forking, this notebook.

32
00:02:01.510 --> 00:02:06.030
And when you do that,
it will be saved in your own account.

33
00:02:06.030 --> 00:02:09.476
Otherwise, whenever you reload this page,

34
00:02:09.476 --> 00:02:15.350
you're going to lose whatever
edits you had made to these cells.

35
00:02:15.350 --> 00:02:16.490
So just keep that in mind.

36
00:02:17.980 --> 00:02:22.668
So the way observable works is when
I write some JavaScript in one of

37
00:02:22.668 --> 00:02:24.684
these things called a cell.

38
00:02:30.335 --> 00:02:34.747
I am going to get a little
blue play button,

39
00:02:34.747 --> 00:02:39.406
is the little play button
on the right is gonna

40
00:02:39.406 --> 00:02:44.700
show up blue, whenever I've made edits.

41
00:02:44.700 --> 00:02:49.419
And once I'm happy with
the edits that I've made,

42
00:02:49.419 --> 00:02:53.589
whoops, I'm going to
hit that blue button or

43
00:02:53.589 --> 00:03:01.294
I can also use the keyboard shortcut Shift
Enter to run the code that I've entered.

44
00:03:01.294 --> 00:03:04.870
So that is what is going to then.

45
00:03:04.870 --> 00:03:06.182
Through the magic,

46
00:03:06.182 --> 00:03:10.968
the functional reactive magic of
observable is going to update the rest of

47
00:03:10.968 --> 00:03:16.270
my notebook with the new version of
the function that I've implemented.

48
00:03:16.270 --> 00:03:18.265
And once I've implemented this,

49
00:03:18.265 --> 00:03:22.943
function successfully I should see all of
these little Winkey faces turn to party

50
00:03:22.943 --> 00:03:27.400
popper emojis to know that I'm
getting the correct outputs.

51
00:03:27.400 --> 00:03:32.409
And if I do something wrong,
like bad syntax, I'll see some errors.

52
00:03:33.710 --> 00:03:35.419
And you might see other errors pop up,

53
00:03:35.419 --> 00:03:38.010
because this function is no
longer able to be called.

54
00:03:38.010 --> 00:03:41.197
But don't worry, you can always Ctrl or

55
00:03:41.197 --> 00:03:45.320
Command Z to go back,
Shift Enter to re evaluate, or

56
00:03:45.320 --> 00:03:49.745
to rerun this little cell,
this little function code.

57
00:03:49.745 --> 00:03:53.154
And the rest of the notebook
will update and

58
00:03:53.154 --> 00:03:58.647
instantly if anybody runs into any
problems with using observable,

59
00:03:58.647 --> 00:04:03.790
please don't hesitate to ask questions and
there is also a.

60
00:04:03.790 --> 00:04:08.564
Little help button down here
with keyboard shortcuts that you

61
00:04:08.564 --> 00:04:12.506
can take a look at,
if you forget is it shift enter or

62
00:04:12.506 --> 00:04:17.403
control enter you can use that
little help menu to access that.

63
00:04:17.403 --> 00:04:20.626
So that is just a little bit about the
environment that we're working in which

64
00:04:20.626 --> 00:04:24.163
once again, is just really convenient
because we don't have to install anything.

65
00:04:24.163 --> 00:04:26.126
We don't have to have
the right version of node.

66
00:04:26.126 --> 00:04:27.536
We don't have to do any of that.

67
00:04:27.536 --> 00:04:28.856
So that's why we're doing it this way.

