WEBVTT

1
00:00:00.070 --> 00:00:05.620
So what we're gonna do in the next
exercise is work with these functions.

2
00:00:05.620 --> 00:00:09.992
We're going to apply some of them,
we're gonna get used to writing

3
00:00:09.992 --> 00:00:15.420
the type of functions that they take in
and apply to the elements in the array.

4
00:00:15.420 --> 00:00:19.046
And we're also going to try our hand
at implementing some of them, and

5
00:00:19.046 --> 00:00:21.450
understanding the implementations of them.

6
00:00:22.720 --> 00:00:26.360
So that is going to be our next exercise,
which is in the notebook exercise filter,

7
00:00:26.360 --> 00:00:27.040
map, reduce.

8
00:00:28.170 --> 00:00:29.172
So before we jump in,

9
00:00:29.172 --> 00:00:32.770
just wanna quickly pause,
see if anybody has any massive questions.

10
00:00:32.770 --> 00:00:36.604
But hopefully since these are common
array methods in JavaScript,

11
00:00:36.604 --> 00:00:40.310
this might not be the first
time that we've seen them.

12
00:00:40.310 --> 00:00:44.390
But if anyone has any questions,
don't hesitate to ask.

13
00:00:44.390 --> 00:00:47.980
I see a question around weather map.

14
00:00:47.980 --> 00:00:51.088
And we can also say these
other functions filter and

15
00:00:51.088 --> 00:00:53.780
reduce whether they mutate the array.

16
00:00:53.780 --> 00:00:59.630
So in JavaScript when you call array.map,
it will actually return a new array.

17
00:00:59.630 --> 00:01:04.594
Again, the function that you pass
in might be a mutating kind of

18
00:01:04.594 --> 00:01:08.800
function depending on what
code you put in there.

19
00:01:08.800 --> 00:01:13.912
There's nothing in JavaScript that's
forcing there to be a mutation there,

20
00:01:13.912 --> 00:01:18.956
but map will produce a new array instead
of an in place mutation of that array.

21
00:01:18.956 --> 00:01:23.648
However, in our exercise today,
[COUGH] we're going to,

22
00:01:23.648 --> 00:01:28.339
so let me just switch over to
this exercise, which again,

23
00:01:28.339 --> 00:01:34.783
you can always get to from that functional
JavaScript first steps collection.

24
00:01:34.783 --> 00:01:40.030
In our exercise, filter, map,
reduce, we're going to take

25
00:01:40.030 --> 00:01:46.663
a look at how we can conceive of functions
that do these operations like filter,

26
00:01:46.663 --> 00:01:52.330
instead of relying on JavaScript
built in array.filter.

27
00:01:52.330 --> 00:01:55.412
This is because in
a real functional style,

28
00:01:55.412 --> 00:02:00.240
we're actually going to do
everything with these functions.

29
00:02:00.240 --> 00:02:05.072
In this functional style of
passing in the array that we wanna

30
00:02:05.072 --> 00:02:09.631
manipulate into the filter,
function or map or reduce.

31
00:02:09.631 --> 00:02:14.556
Instead of a more object oriented
style of calling methods on

32
00:02:14.556 --> 00:02:19.100
the array that we want
to do something with.

33
00:02:19.100 --> 00:02:25.216
So we're actually gonna start to think
about filter map and reduce as functions,

34
00:02:25.216 --> 00:02:31.710
instead of the array methods that we're
used to thinking about in JavaScript.

35
00:02:31.710 --> 00:02:37.023
That's gonna be part of the brain

36
00:02:37.023 --> 00:02:42.914
work you need to do in this exercise.

37
00:02:42.914 --> 00:02:46.426
You can see all of the instructions
in the exercise, but

38
00:02:46.426 --> 00:02:49.057
essentially we're going to go through.

39
00:02:49.057 --> 00:02:52.849
There is a filter function
that's been implemented for

40
00:02:52.849 --> 00:02:56.963
you using some little helper functions,
like for example,

41
00:02:56.963 --> 00:03:02.707
length a function that you can call on
an array, instead of calling array.length.

42
00:03:02.707 --> 00:03:04.982
Again, this is all just to get us really,

43
00:03:04.982 --> 00:03:07.779
really practiced in using
this functional style.

44
00:03:07.779 --> 00:03:11.270
Getting more used to using
a functional kind of API for

45
00:03:11.270 --> 00:03:15.383
interacting with data and things,
as opposed to the dot method

46
00:03:15.383 --> 00:03:18.969
object oriented API that
we're more used to perhaps.

47
00:03:18.969 --> 00:03:25.650
So in these exercises,
you're gonna be filling in some to TODOS.

48
00:03:25.650 --> 00:03:32.876
You're gonna be finding some predicate
functions and some map functions and

49
00:03:32.876 --> 00:03:38.890
some reducer functions that will
produce the expected output.

50
00:03:38.890 --> 00:03:43.737
And in fact, you're gonna be writing your
own implementation of map to see how

51
00:03:43.737 --> 00:03:48.527
you might do this in a functional way
without cheating and using array.map.

52
00:03:48.527 --> 00:03:53.872
So challenge yourself see if you can
do it without relying on those methods,

53
00:03:53.872 --> 00:03:58.645
there are some helper functions
defined in here to help you do that.

54
00:03:58.645 --> 00:04:01.608
The functions are described in there and

55
00:04:01.608 --> 00:04:06.327
you can also find the code for
them down at the bottom of the page.

56
00:04:06.327 --> 00:04:11.192
One quick note about the way
observable works is that,

57
00:04:11.192 --> 00:04:17.562
the cells do not need to be defined in
the order that you want to run them.

58
00:04:17.562 --> 00:04:24.653
So you can actually call a function higher
up in the page that you define lower down.

59
00:04:24.653 --> 00:04:28.034
And that's sort of similar to function
hoisting in JavaScript if you've run into

60
00:04:28.034 --> 00:04:28.623
that before.

61
00:04:28.623 --> 00:04:32.947
Although it works a little bit
differently and observable and

62
00:04:32.947 --> 00:04:38.280
there's even less dependence on the linear
order in which code is written.

63
00:04:38.280 --> 00:04:42.704
So just to let you know about
the environment that they were working

64
00:04:42.704 --> 00:04:43.341
in here.

65
00:04:43.341 --> 00:04:45.896
So we're going to be implementing map,

66
00:04:45.896 --> 00:04:51.450
we're going to be doing some challenges
where we pass in new functions to map.

67
00:04:51.450 --> 00:04:56.022
And then we're going to also be working
on getting used to writing these reducer

68
00:04:56.022 --> 00:05:00.540
functions which take an accumulator and
a value, and produce a single value.

69
00:05:01.820 --> 00:05:05.866
So go ahead at your own pace and
go through this exercise.

70
00:05:05.866 --> 00:05:08.878
There are some exercises
that are marked challenged

71
00:05:08.878 --> 00:05:11.415
those are kind of extra
if you have the time.

72
00:05:11.415 --> 00:05:15.111
So try to get through everything that not
before coming back to the challenge ones.

73
00:05:15.111 --> 00:05:20.144
And if anybody has any questions,
we will definitely be able

74
00:05:20.144 --> 00:05:24.890
to dig into those when we
review the exercises together.

