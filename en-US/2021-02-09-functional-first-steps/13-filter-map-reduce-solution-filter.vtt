WEBVTT

1
00:00:00.290 --> 00:00:03.670
In the interest of time,
let's gonna through together and

2
00:00:03.670 --> 00:00:05.880
talk about some possible solutions.

3
00:00:05.880 --> 00:00:10.210
Again, there might be more than
one way to solve each of these.

4
00:00:10.210 --> 00:00:15.000
So your mileage may vary, but
let's go through and see some solutions.

5
00:00:15.000 --> 00:00:17.425
Okay, so for this filter function,

6
00:00:17.425 --> 00:00:22.042
we thought we have [COUGH] this kind
of recursive implementation of this

7
00:00:22.042 --> 00:00:26.991
filter function where we're successively
filtering things in an array.

8
00:00:26.991 --> 00:00:30.622
And we take in that predicate function,
where that predicate function again,

9
00:00:30.622 --> 00:00:34.920
it's gonna be something that takes in
a single value and returns a boolean.

10
00:00:34.920 --> 00:00:38.910
So we've got some of these
predicate functions like isEven.

11
00:00:38.910 --> 00:00:40.600
You might have solved this different ways.

12
00:00:40.600 --> 00:00:45.732
But one way you could solve this is by
using the modulo operator in JavaScript,

13
00:00:45.732 --> 00:00:50.166
so to see whether or not there's
something leftover when you divide

14
00:00:50.166 --> 00:00:53.299
this number by two and
if not, then it's even.

15
00:00:53.299 --> 00:01:00.630
So that's one implementation that
will get these little to show up.

16
00:01:00.630 --> 00:01:03.040
And how about the odds function?

17
00:01:03.040 --> 00:01:07.899
Well, if odd is kind of the opposite
of even then we could pass in

18
00:01:07.899 --> 00:01:12.761
our predicate function that
basically returns the opposite of

19
00:01:12.761 --> 00:01:17.800
whatever is even returns, so
that's one way we could do this.

20
00:01:17.800 --> 00:01:21.149
We could also maybe have implemented
this more directly like this but

21
00:01:21.149 --> 00:01:22.020
with a not equal.

22
00:01:22.020 --> 00:01:24.681
Or there might have been other solutions,
but

23
00:01:24.681 --> 00:01:26.940
these are two that you could have used.

24
00:01:28.330 --> 00:01:31.805
And then for the greaterThanFour
function we could have used and

25
00:01:31.805 --> 00:01:34.778
you might wanna do a short
little arrow function here.

26
00:01:34.778 --> 00:01:38.567
Which is handy for working in functional
programming in JavaScript because you

27
00:01:38.567 --> 00:01:41.572
don't have to keep typing that
function keyword all the time.

28
00:01:41.572 --> 00:01:44.812
So arrows, they came in with ES6 syntax,

29
00:01:44.812 --> 00:01:49.470
are super handy for
doing functional programming.

30
00:01:49.470 --> 00:01:53.234
And if you haven't worked with those
a lot, I encourage you to use these

31
00:01:53.234 --> 00:01:56.640
examples to kind of get a sense for
how that syntax feels.

32
00:01:56.640 --> 00:02:00.231
So we might use the greater than
operator to take in a number and

33
00:02:00.231 --> 00:02:04.667
then return the boolean for whether or
not that number is greater than four.

34
00:02:07.785 --> 00:02:08.824
Any questions so far?

35
00:02:12.461 --> 00:02:13.560
Great.

36
00:02:13.560 --> 00:02:19.010
Okay, so then a little bit more
complicated one is this isPrime function.

37
00:02:20.120 --> 00:02:22.480
Now there are lots of different
ways you could have done this.

38
00:02:23.800 --> 00:02:28.775
Here's one way, so
again cheating a little bit because I know

39
00:02:28.775 --> 00:02:33.860
kind of what the types of values
are that we're gonna get here.

40
00:02:35.100 --> 00:02:38.800
I took in the this this array
with all these whole numbers and

41
00:02:38.800 --> 00:02:41.390
I declared it inside of this function, so

42
00:02:41.390 --> 00:02:46.130
that we don't have to look anywhere
in the outside world for this.

43
00:02:46.130 --> 00:02:49.508
And now you might be wondering
in a real life isPrime,

44
00:02:49.508 --> 00:02:54.102
I probably wanna be able to figure
this out for things that go above 10.

45
00:02:54.102 --> 00:02:57.290
But in some functional
programming languages,

46
00:02:57.290 --> 00:03:01.721
you might be able to work with
things like lazy evaluated sequence,

47
00:03:01.721 --> 00:03:05.840
that's a term to type into
the search engine later.

48
00:03:05.840 --> 00:03:10.493
You might be able to work with
sequences that can give you

49
00:03:10.493 --> 00:03:14.900
an array like this of
whatever length you need.

50
00:03:14.900 --> 00:03:19.325
Because thanks to
functional programming and

51
00:03:19.325 --> 00:03:24.998
this concept of only returning
an element from a sequence,

52
00:03:24.998 --> 00:03:28.071
when it's actually asked for.

53
00:03:28.071 --> 00:03:31.259
We could get something that would work,
that would be a version of this

54
00:03:31.259 --> 00:03:34.580
implementation that could work for
even even higher numbers.

55
00:03:34.580 --> 00:03:38.200
This one will be pretty limited in
what it's gonna be accurate for.

56
00:03:39.230 --> 00:03:43.351
But in any case, so given some kind of
sequence of like whole numbers, what I'm

57
00:03:43.351 --> 00:03:48.280
doing and again, this is just how I solved
it, yours might be totally different.

58
00:03:48.280 --> 00:03:51.678
What I'm doing is I'm figuring
out some possible factors.

59
00:03:51.678 --> 00:03:57.449
Where basically the number
that's coming in,

60
00:03:57.449 --> 00:04:04.373
we have to find some kind of
number that's between one and

61
00:04:04.373 --> 00:04:09.580
that number n,
that might be a factor of n.

62
00:04:10.580 --> 00:04:13.973
So what I'm doing is kind of
filtering down this wholes array so

63
00:04:13.973 --> 00:04:18.210
that we're getting things that are between
one and whatever my end number is.

64
00:04:19.560 --> 00:04:22.248
And then taking those possible factors,

65
00:04:22.248 --> 00:04:26.630
I'm determining which of
them actually are factors.

66
00:04:26.630 --> 00:04:30.510
By using this filter function, which,

67
00:04:30.510 --> 00:04:36.443
similar to our isEven function
uses modulo to find out whether

68
00:04:36.443 --> 00:04:41.480
n is perfectly divisible by m,
and then and oopsie.

69
00:04:41.480 --> 00:04:46.087
I'm using a method here instead
of my function, that's better,

70
00:04:46.087 --> 00:04:47.990
that's more functional.

71
00:04:49.630 --> 00:04:54.060
Then I'm just checking to see if
there's anything in this factors array.

72
00:04:54.060 --> 00:04:57.998
If there is then that means that this
number is divisible by more than just

73
00:04:57.998 --> 00:05:02.280
itself and one which by the definition
of a prime number means it's not prime.

74
00:05:02.280 --> 00:05:06.070
So essentially we only have a prime
number if that factors array is zero.

75
00:05:07.630 --> 00:05:13.230
So this i thought was an interesting
function to implement

76
00:05:13.230 --> 00:05:18.831
as a predicate function because
we can actually use filter

77
00:05:18.831 --> 00:05:24.906
inside of a predicate function
that then we can pass to filter.

78
00:05:24.906 --> 00:05:29.467
So this is again, this is when we start
getting used to working with arrays,

79
00:05:29.467 --> 00:05:33.247
excuse me working with these
tools like filter map and reduce,

80
00:05:33.247 --> 00:05:37.950
and working with functions that we
can pass around to other functions.

81
00:05:37.950 --> 00:05:43.321
You may find a lot of the time this is
almost like a type of kind of multi

82
00:05:43.321 --> 00:05:48.412
level filtering that's happening,
where we're using filter

83
00:05:48.412 --> 00:05:54.750
to actually help us define functions
that we can pass into a filter.

84
00:05:54.750 --> 00:05:58.530
So it's sort of like an aura boris,
a filter in here.

85
00:05:58.530 --> 00:06:01.980
Again, your implementation may
have looked different, but

86
00:06:01.980 --> 00:06:04.314
as long as you're using pure functions.

87
00:06:04.314 --> 00:06:09.171
And as long as you're trying
to avoid those array method,

88
00:06:09.171 --> 00:06:12.343
object oriented style method APIs and

89
00:06:12.343 --> 00:06:18.010
use these helper functions that we
defined, you should be good to go

