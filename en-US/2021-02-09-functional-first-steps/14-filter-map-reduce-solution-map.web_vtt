WEBVTT

1
00:00:00.120 --> 00:00:00.980
Now let's talk about Map.

2
00:00:02.730 --> 00:00:07.863
So in this one, I asked you all
to actually implement your own

3
00:00:07.863 --> 00:00:13.210
map function using some of these
helpers that we talked about.

4
00:00:13.210 --> 00:00:15.090
So those are defined here.

5
00:00:15.090 --> 00:00:20.470
And some of these especially like head and
tail, those terms they might

6
00:00:20.470 --> 00:00:26.657
be a little bit new if you haven't worked
with other languages than JavaScript for

7
00:00:26.657 --> 00:00:30.782
example, functional languages
like Clojure maybe,

8
00:00:30.782 --> 00:00:35.150
which often use these terms,
head and tail for arrays.

9
00:00:35.150 --> 00:00:38.100
They're not super native
terms to JavaScript.

10
00:00:38.100 --> 00:00:41.880
But we're trying to use them
because again the nomenclature for

11
00:00:41.880 --> 00:00:45.940
a lot of these functions in
the functional programming world might be

12
00:00:45.940 --> 00:00:49.311
something that is part of what
that learning journey is.

13
00:00:49.311 --> 00:00:55.355
Is like grasping that head is equivalent
to first element in an array.

14
00:00:55.355 --> 00:00:58.708
So that's why we're using some of those
more kind of traditional functional

15
00:00:58.708 --> 00:00:59.850
programming terms here.

16
00:01:01.830 --> 00:01:04.293
Okay, so how is this map exercise?

17
00:01:04.293 --> 00:01:09.070
Were we able to figure out a way to
implement map without calling array.map?

18
00:01:10.280 --> 00:01:15.193
So what we have here is in my solution,
I have a recursive

19
00:01:15.193 --> 00:01:21.880
implementation that has a base case
of if my array is empty, I'm done.

20
00:01:21.880 --> 00:01:24.065
I return an empty array.

21
00:01:24.065 --> 00:01:27.786
I might also have another base
case here of like, for example,

22
00:01:27.786 --> 00:01:30.453
if there's exactly one
element in my array,

23
00:01:30.453 --> 00:01:34.610
I return an array with the function
applied to that element, as well.

24
00:01:36.010 --> 00:01:41.680
And then otherwise, I'm going to
return this recursive application.

25
00:01:41.680 --> 00:01:46.385
And again we might want to have like
a function of concat instead of this

26
00:01:46.385 --> 00:01:51.091
concat method, but array dot.concat
returns a new array with the two

27
00:01:51.091 --> 00:01:55.550
arrays mushed together,
concatenated into a single array.

28
00:01:55.550 --> 00:02:00.680
So it's not going to change the original
array, it's going to give me a new one.

29
00:02:00.680 --> 00:02:04.420
So that seems okay for
our pure functional restrictions here.

30
00:02:04.420 --> 00:02:07.780
So what I'm gonna do is I'm gonna take
the first thing out of the array,

31
00:02:07.780 --> 00:02:08.851
the head of the array.

32
00:02:08.851 --> 00:02:15.836
I'm gonna apply the function to it and
get a little array started with that.

33
00:02:15.836 --> 00:02:21.009
And then concatenate whatever
the array is that comes back when

34
00:02:21.009 --> 00:02:26.767
I recursively apply map with that same
function to the rest of the items

35
00:02:26.767 --> 00:02:33.880
in the array which in functional land
is often called the tail of the array.

36
00:02:33.880 --> 00:02:38.476
And be careful because tail does not
mean the last element of the array.

37
00:02:38.476 --> 00:02:42.447
Which you might easily think
because head is the first element,

38
00:02:42.447 --> 00:02:44.220
tail is a little different.

39
00:02:44.220 --> 00:02:46.295
So if head is a single value,

40
00:02:46.295 --> 00:02:50.280
tail is the whole rest of
the array except for the head.

41
00:02:51.940 --> 00:02:55.870
&gt;&gt; [INAUDIBLE] The bottom
you used a double map.

42
00:02:55.870 --> 00:02:59.650
And then you pass an argument into it and
so

43
00:02:59.650 --> 00:03:04.618
if you look at all the examples
that I have seen is that it

44
00:03:04.618 --> 00:03:10.330
really say objects or
array.map or array.filter.

45
00:03:10.330 --> 00:03:13.898
And so how come just like that,
you got a consonant and

46
00:03:13.898 --> 00:03:18.910
then you assigned it to the map without
using an array and things like that.

47
00:03:18.910 --> 00:03:19.950
How does that work?

48
00:03:19.950 --> 00:03:25.479
&gt;&gt; Right, so I'm understanding the
question right is how is this different

49
00:03:25.479 --> 00:03:31.188
from doing wholes.map with whatever
the function is that I want to pass in,

50
00:03:31.188 --> 00:03:36.010
and why am I doing it this way,
instead of this way?

51
00:03:36.010 --> 00:03:41.003
And so again, this is really just
to build up our muscle memory,

52
00:03:41.003 --> 00:03:46.929
build up our habit of using a functional
API where everything is functions.

53
00:03:46.929 --> 00:03:50.067
And we're not thinking about objects and

54
00:03:50.067 --> 00:03:53.920
their methods as ways
of manipulating them.

55
00:03:53.920 --> 00:03:58.660
We're thinking about functions and
what inputs they need.

56
00:03:58.660 --> 00:04:05.139
So in functional programming languages
like Clojure, for example, the API for

57
00:04:05.139 --> 00:04:11.425
working with these things is often a lot
more like what you see on the left here,

58
00:04:11.425 --> 00:04:18.530
where everything is functions and we pass
in whatever arrays we're operating on.

59
00:04:18.530 --> 00:04:24.045
And so that's why we're trying to
get in the habit of converting

60
00:04:24.045 --> 00:04:29.666
our regular JavaScript object
oriented dot method calling style

61
00:04:29.666 --> 00:04:36.330
to this more functional style where
everything is an argument to a function.

62
00:04:37.340 --> 00:04:42.100
That said, the result of this
in JavaScript is not gonna be

63
00:04:42.100 --> 00:04:47.420
different unless we've bungled
our map implementation.

64
00:04:47.420 --> 00:04:49.287
And so this is totally fine and

65
00:04:49.287 --> 00:04:54.040
if you prefer to work in that
object-oriented style, go for it.

66
00:04:54.040 --> 00:04:58.537
I think that it's really useful to get in
the habit of using this functional style

67
00:04:58.537 --> 00:05:02.837
mostly because it forces us to think
about the functions before we think about

68
00:05:02.837 --> 00:05:04.970
the objects, if you know what I mean.

69
00:05:06.470 --> 00:05:09.200
And again, so it's about that mind shift.

70
00:05:09.200 --> 00:05:10.759
Sorry.
&gt;&gt; Yeah, I do understand.

71
00:05:10.759 --> 00:05:15.313
So usually when I use that object or

72
00:05:15.313 --> 00:05:20.660
in orientated method [INAUDIBLE] style.

73
00:05:21.970 --> 00:05:26.895
So [INAUDIBLE] I've seen what to do and
I've seen that one.

74
00:05:26.895 --> 00:05:31.120
The way you use that array.marvel,
array.filter.

75
00:05:31.120 --> 00:05:32.640
Well, yeah, I will try it out.

76
00:05:32.640 --> 00:05:35.870
Yeah, thank you.
&gt;&gt; Yeah, super great point.

77
00:05:35.870 --> 00:05:40.411
And again, this is totally valid
JavaScript and it's deterministic,

78
00:05:40.411 --> 00:05:45.400
it's not gonna change things as long
as wholes doesn't change, which again,

79
00:05:45.400 --> 00:05:50.590
everything is mutable in JavaScript,
so there's no guarantees there.

80
00:05:50.590 --> 00:05:54.640
But again, this is really just
about changing our mindset.

81
00:05:54.640 --> 00:05:59.074
Getting into a new programming paradigm is
really about changing the way you look at

82
00:05:59.074 --> 00:06:00.479
the world of the program.

83
00:06:00.479 --> 00:06:04.406
And so the reason we're focusing on these
functions is really to force us to think

84
00:06:04.406 --> 00:06:08.102
about the world in terms of functions
instead of thinking about it in terms of

85
00:06:08.102 --> 00:06:08.640
objects.

86
00:06:10.160 --> 00:06:11.620
Okay, great questions.

87
00:06:12.990 --> 00:06:18.868
And so hopefully these doubled and halved
applications were pretty straightforward.

88
00:06:18.868 --> 00:06:22.209
But just again,
to give you an idea of what kind of

89
00:06:22.209 --> 00:06:25.970
functions you can pass in
then to these map functions.

90
00:06:28.120 --> 00:06:33.991
The challenge exercise if anybody got to
it was to figure out what function you

91
00:06:33.991 --> 00:06:40.060
would have to pass to map to get an array
that is essentially this game Fizz Buzz.

92
00:06:40.060 --> 00:06:44.050
If you haven't run into it before, there's
a Wikipedia link, you can read about it.

93
00:06:44.050 --> 00:06:47.836
But essentially the rules are,
if a number is divisible by three,

94
00:06:47.836 --> 00:06:49.330
you replace it with fizz.

95
00:06:49.330 --> 00:06:52.200
If a number is divisible by five,
you replace it with buzz.

96
00:06:52.200 --> 00:06:55.650
If it's divisible by both three and
five, it's fizz buzz.

97
00:06:55.650 --> 00:07:00.534
So what we have here is kind of a series
of little checks which figure out whether

98
00:07:00.534 --> 00:07:02.833
or not is divisible by three or five.

99
00:07:02.833 --> 00:07:08.700
And then figure out which strings fizz or
buzz, we need to replace the number

100
00:07:08.700 --> 00:07:14.203
with and then optionally putting
them together if they are necessary,

101
00:07:14.203 --> 00:07:18.255
and otherwise just returning
the plain old number.

102
00:07:18.255 --> 00:07:21.130
So that's one way you could
solve this exercise again,

103
00:07:21.130 --> 00:07:24.924
there might be other really great
solutions that would also solve this and

104
00:07:24.924 --> 00:07:28.180
produce the fizz buzz
array we're looking for.

105
00:07:28.180 --> 00:07:32.360
But just a little mind bender there to
see how we can use map to play games too.

