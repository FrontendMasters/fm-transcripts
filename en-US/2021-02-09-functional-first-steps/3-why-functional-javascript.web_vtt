WEBVTT

1
00:00:01.140 --> 00:00:04.382
Okay, so we've just talked
about this a little bit but

2
00:00:04.382 --> 00:00:07.990
this really brings us back to
why would we bother doing this?

3
00:00:07.990 --> 00:00:11.242
Why would we bother jumping through
the hoops of making sure we have no side

4
00:00:11.242 --> 00:00:13.864
effects of making sure our
functions are deterministic and

5
00:00:13.864 --> 00:00:17.250
always return the same output
based on the same input?

6
00:00:17.250 --> 00:00:18.210
Why?

7
00:00:18.210 --> 00:00:19.170
Why are we here?

8
00:00:19.170 --> 00:00:21.198
Why are we spending our
short time on the planet,

9
00:00:21.198 --> 00:00:23.600
thinking about functional programming.

10
00:00:23.600 --> 00:00:29.500
Well, as I just mentioned,
when functions are deterministic,

11
00:00:29.500 --> 00:00:35.402
when you know exactly what output
you gonna get given what input,

12
00:00:35.402 --> 00:00:40.250
you get code that's much more predictable,
right?

13
00:00:40.250 --> 00:00:45.660
You don't have to worry about like,
well what if name has been changed?

14
00:00:45.660 --> 00:00:49.560
Or what if somebody deleted
the name variable or I don't know.

15
00:00:49.560 --> 00:00:53.530
So that means there's also less
opportunity for bugs to arise.

16
00:00:53.530 --> 00:00:58.070
It's safer, it's more dependable,
you could say because of that determinism.

17
00:00:59.570 --> 00:01:04.520
That means, it's also much easier to test
and to debug and to find places where

18
00:01:04.520 --> 00:01:09.547
there are problems because If you've
ever tested a function that's not pure,

19
00:01:09.547 --> 00:01:14.498
you might have had to do things like do
all this complicated setup to kind of mock

20
00:01:14.498 --> 00:01:18.698
out the state of the world because
the state of the world matters for

21
00:01:18.698 --> 00:01:20.630
how the program runs.

22
00:01:20.630 --> 00:01:25.551
Whereas with a functional program, which
is going to boil down to a pure function,

23
00:01:25.551 --> 00:01:30.030
all you need to provide to test
your function is a test input.

24
00:01:30.030 --> 00:01:33.350
Give it a string, see if it gives you
the back of the right string back.

25
00:01:33.350 --> 00:01:35.307
Give it an array of numbers,

26
00:01:35.307 --> 00:01:39.795
see if it gives you the right
different array of numbers back and so

27
00:01:39.795 --> 00:01:44.445
that makes it much easier to test our
code and to maintain our code and

28
00:01:44.445 --> 00:01:49.342
to think about the interactions
between different parts of our program

29
00:01:49.342 --> 00:01:54.589
because they each become kind of these
isolated pure deterministic units.

30
00:01:55.720 --> 00:01:59.673
And we're gonna talk about how we can
build complex programs out of simple

31
00:01:59.673 --> 00:02:04.328
functions like this because these pure
functions, in essence, become very simple,

32
00:02:04.328 --> 00:02:08.239
how we can get complexity out of that
we're gonna talk about a lot later.

33
00:02:10.097 --> 00:02:15.085
Now, some bad reasons to use functional
programming include because thinking

34
00:02:15.085 --> 00:02:19.552
that it is the best paradigm that all
those other paradigms we mentioned

35
00:02:19.552 --> 00:02:22.170
are somehow substandard, not the case.

36
00:02:22.170 --> 00:02:26.840
As I mentioned earlier, all these
different programming paradigms they have

37
00:02:26.840 --> 00:02:32.020
something interesting to teach us
about how we can think about programs.

38
00:02:32.020 --> 00:02:36.897
And they all are kind of a different
flavor of programming that we can use

39
00:02:36.897 --> 00:02:40.149
at different times,
depending on our needs and

40
00:02:40.149 --> 00:02:43.910
depending on the mindset
that's most helpful for us.

41
00:02:45.530 --> 00:02:49.661
But functional programming has a lot
of advantages and so especially for

42
00:02:49.661 --> 00:02:53.047
writing code, for example,
like data transformations or

43
00:02:53.047 --> 00:02:56.703
things where you need to be really
certain about what the results

44
00:02:56.703 --> 00:03:01.510
of your program are gonna be because
it's a high stakes environment.

45
00:03:01.510 --> 00:03:04.112
That's a really great time for
functional programming, but

46
00:03:04.112 --> 00:03:06.690
it doesn't mean it's
always the best choice.

47
00:03:06.690 --> 00:03:09.969
So, by the end of the day, we should
have a little bit more of a sense and

48
00:03:09.969 --> 00:03:13.361
we're gonna get to talk about it later
over the course of our exercises,

49
00:03:13.361 --> 00:03:16.000
as to why and
when functional programming is a good fit.

50
00:03:17.520 --> 00:03:20.866
Another terrible reason to use functional
programming is because it's so

51
00:03:20.866 --> 00:03:22.987
buzzword II and it's so
hip and it's so cool and

52
00:03:22.987 --> 00:03:25.339
it makes you look super
smart to other programmers.

53
00:03:26.380 --> 00:03:30.680
That's shouldn't be our objective here
our objective should be to get a deeper

54
00:03:30.680 --> 00:03:34.144
understanding of how we can think
about the world of programs and

55
00:03:34.144 --> 00:03:36.460
the world of computation.

56
00:03:36.460 --> 00:03:40.155
And that will make us smart, and
it will make us feel smart and

57
00:03:40.155 --> 00:03:41.990
eventually look smart.

58
00:03:41.990 --> 00:03:46.504
But that's not our objective here our
objective is not to impress people

59
00:03:46.504 --> 00:03:49.686
with lots of fancy terminology and
Greek symbols,

60
00:03:49.686 --> 00:03:54.274
it's to understand our programs better
write code that's easier to test

61
00:03:54.274 --> 00:03:58.350
easier to debug,
make our lives easier as developers.

62
00:03:58.350 --> 00:04:03.392
And that's why in this workshop, we're
really focusing on those ideas and not

63
00:04:03.392 --> 00:04:08.055
on the kind of fancy jargon and whatnot,
which it can be said is fun to learn

64
00:04:08.055 --> 00:04:13.267
sometimes and can be fun to dig into but
that's not what we're focusing on today.

65
00:04:17.552 --> 00:04:21.020
So now the question becomes why
are we doing this in JavaScript?

66
00:04:21.020 --> 00:04:22.482
And if I'm a JavaScript developer,

67
00:04:22.482 --> 00:04:26.260
why is functional programming something
that I might be interested in?

68
00:04:26.260 --> 00:04:31.030
Well, if you ask me,
object-oriented JavaScript is hard.

69
00:04:32.270 --> 00:04:37.225
[LAUGH] I think that prototype inheritance
and the understanding what this is gonna

70
00:04:37.225 --> 00:04:41.457
be, depending on where it's called,
like all of this stuff when I was

71
00:04:41.457 --> 00:04:45.947
learning JavaScript, I found really
tricky I don't know about you all.

72
00:04:45.947 --> 00:04:49.807
But I found this very hard to think
about and very hard to remember and

73
00:04:49.807 --> 00:04:54.780
very hard to understand and look at my
code and know what it was gonna do.

74
00:04:54.780 --> 00:04:58.380
And so when I started programming in
a functional style in JavaScript,

75
00:04:58.380 --> 00:05:02.490
that became so much easier, because again,
the functions are predictable.

76
00:05:02.490 --> 00:05:03.194
You can test them,

77
00:05:03.194 --> 00:05:06.810
you can see exactly what they're gonna
do if you give them a certain input.

78
00:05:06.810 --> 00:05:12.224
And so to my mind, functional JavaScript
is actually a lot easier to write and

79
00:05:12.224 --> 00:05:14.740
to work with than object oriented.

80
00:05:15.840 --> 00:05:20.370
That's just my opinion yours may vary,
but another great reason to learn

81
00:05:20.370 --> 00:05:25.561
functional programming in JavaScript Is
because there is an established community

82
00:05:25.561 --> 00:05:30.800
as we know from all the other great
functional courses on front end masters.

83
00:05:30.800 --> 00:05:34.600
There's a really great community of folks
who are doing functional programming in

84
00:05:34.600 --> 00:05:35.720
Java Script.

85
00:05:35.720 --> 00:05:38.023
There's a lot of tools,
there's a lot of libraries,

86
00:05:38.023 --> 00:05:41.330
there's even frameworks that
are based of functional principles.

87
00:05:41.330 --> 00:05:46.453
There is a lot of resources for you to
Help you in your functional programming

88
00:05:46.453 --> 00:05:51.620
journey that don't require you to
learn a new syntax for a new language.

89
00:05:51.620 --> 00:05:55.757
I don't require you to bang your head
against academic textbooks by yourself in

90
00:05:55.757 --> 00:05:57.440
your room on your own.

91
00:05:57.440 --> 00:06:00.420
You have people you have tools,
you have community.

92
00:06:00.420 --> 00:06:03.628
And if you ask me, that is the most
important thing when you're trying to

93
00:06:03.628 --> 00:06:06.910
learn anything, but
especially anything about programming.

94
00:06:06.910 --> 00:06:11.018
Is making sure you are surrounded by a
community of learners and other people who

95
00:06:11.018 --> 00:06:15.430
learn in public, other people who like
teaching and sharing their learning.

96
00:06:15.430 --> 00:06:18.259
That is a really great
way to learn any concept,

97
00:06:18.259 --> 00:06:22.360
especially a mind bending one
like functional programming.

98
00:06:22.360 --> 00:06:25.563
So JavaScript is a great environment for
doing that because the community is so

99
00:06:25.563 --> 00:06:28.060
supportive of functional programming.

100
00:06:28.060 --> 00:06:31.630
&gt;&gt; How long should a function
be like how many lines?

101
00:06:33.050 --> 00:06:35.250
&gt;&gt; How many lines should a function be?

102
00:06:36.560 --> 00:06:42.250
That is a, sorry,
&gt;&gt; The maximum of two lines like I heard,

103
00:06:42.250 --> 00:06:44.808
like if it's more than 15 lines,

104
00:06:44.808 --> 00:06:49.779
you have to do two functions like yeah
&gt;&gt; How many lines

105
00:06:49.779 --> 00:06:55.440
should a function be at most I did
not think that there is a number.

106
00:06:55.440 --> 00:06:56.790
That is an answer to that.

107
00:06:56.790 --> 00:07:01.920
I do not think that a 15 line function
is necessarily a bad function.

108
00:07:03.630 --> 00:07:07.820
Someone in chat raised the point, that
each function should do only one thing.

109
00:07:07.820 --> 00:07:10.750
I think that is a great rule of thumb.

110
00:07:10.750 --> 00:07:16.410
That each function should do one kind of
operation or one kind of computation.

111
00:07:18.780 --> 00:07:23.947
However, as we're gonna see later,
we can make really complex

112
00:07:23.947 --> 00:07:29.020
functions that do some kind of
complex thing out of much simpler

113
00:07:29.020 --> 00:07:34.410
functions where it's much easier
to see exactly what it does.

114
00:07:34.410 --> 00:07:36.847
So the tendency in functional programming,

115
00:07:36.847 --> 00:07:39.970
is that you're gonna end up
with very short functions.

116
00:07:39.970 --> 00:07:41.810
And as you're gonna see today,

117
00:07:41.810 --> 00:07:45.639
all of our functions are gonna be
probably no more than a few lines.

118
00:07:47.700 --> 00:07:51.460
But that said, I don't think that focusing
on the length of the function is the most

119
00:07:51.460 --> 00:07:54.899
important thing at this point, I think
it's much more important to focus on

120
00:07:54.899 --> 00:07:58.420
the purity of the function and
the predictability of the function.

121
00:07:58.420 --> 00:07:59.740
Is it deterministic?

122
00:07:59.740 --> 00:08:04.590
Do you know exactly what's gonna happen
when you pass in certain arguments?

123
00:08:04.590 --> 00:08:06.710
Do you know what output you're gonna get?

124
00:08:06.710 --> 00:08:11.470
But as you're gonna see later, we are
going to naturally tend to make smaller

125
00:08:11.470 --> 00:08:16.233
and smaller and smaller functions that
then we can reuse and combine together

126
00:08:16.233 --> 00:08:21.215
using composition to make more complex
operations that are actually end up quite

127
00:08:21.215 --> 00:08:26.300
short, because we're delegating a lot
of that computation to other functions.

