WEBVTT

1
00:00:00.490 --> 00:00:04.278
In our next exercise, we're going to wrap

2
00:00:04.278 --> 00:00:10.050
our heads around how we can
avoid mutation in our code.

3
00:00:10.050 --> 00:00:12.604
And we're gonna look at
a couple of libraries for

4
00:00:12.604 --> 00:00:16.370
using those types of immutable
data structures in JavaScript.

5
00:00:16.370 --> 00:00:17.319
Because like I said,

6
00:00:17.319 --> 00:00:20.630
we have a great functional
programming community in JavaScript.

7
00:00:20.630 --> 00:00:23.860
And part of the benefit of that,
is that we have some awesome tool,

8
00:00:23.860 --> 00:00:27.620
and awesome libraries, for doing things
like working with immutable data.

9
00:00:29.740 --> 00:00:34.850
So we have got another exercise
here avoiding mutation.

10
00:00:34.850 --> 00:00:40.030
Again, you can find it in that collection,
all linked from the overview document.

11
00:00:41.730 --> 00:00:46.607
And in this exercise, we're going to be
going through and, first of all thinking,

12
00:00:46.607 --> 00:00:49.580
about some array operations in JavaScript.

13
00:00:49.580 --> 00:00:52.763
That unlike MapReduce,
and filter and whatnot,

14
00:00:52.763 --> 00:00:55.820
actually do mutate their original arrays.

15
00:00:55.820 --> 00:00:58.880
So I'm thinking of things like push and
pop.

16
00:00:58.880 --> 00:01:05.075
And then there's also the case of, of when
we update a single element in an array by,

17
00:01:05.075 --> 00:01:09.640
let's saying array,
square brackets two equals new value.

18
00:01:10.750 --> 00:01:16.436
So in these exercises, you're going
to be implementing your own versions

19
00:01:16.436 --> 00:01:22.500
of functions to replace those mutating
built in JavaScript array operations.

20
00:01:23.940 --> 00:01:25.290
So we're going to go through those.

21
00:01:25.290 --> 00:01:28.410
And again, you look for
those little tadas to pass.

22
00:01:28.410 --> 00:01:31.290
And we're going to check that again
that those arrays haven't been changed

23
00:01:31.290 --> 00:01:33.320
after you've done things to them.

24
00:01:33.320 --> 00:01:37.467
We're going to define a push
function to replace array.push,

25
00:01:37.467 --> 00:01:42.860
we're gonna define an update function
to replace that index assignment.

26
00:01:42.860 --> 00:01:46.260
And then we're going to replace
a pop method with the pop function.

27
00:01:47.850 --> 00:01:50.260
So we're going to go through and
fill those out.

28
00:01:50.260 --> 00:01:55.203
And then as a challenge you can also
think about other array operations

29
00:01:55.203 --> 00:01:59.472
that you use a lot, other array
methods that you use a lot that

30
00:01:59.472 --> 00:02:03.590
are actually mutating
the change data in place.

31
00:02:03.590 --> 00:02:08.447
And I highly recommend if you want to
read up on which of the JavaScript array

32
00:02:08.447 --> 00:02:13.242
methods change the array that they're
operating on versus which do not.

33
00:02:13.242 --> 00:02:16.960
Check out the resources on
Mozilla Developer Network, MDN.

34
00:02:16.960 --> 00:02:21.066
They're really great for describing
all the individual array methods and

35
00:02:21.066 --> 00:02:25.480
you can check there if you're not
sure if a method is mutating or not.

36
00:02:25.480 --> 00:02:29.230
So that's a little challenge that
you can think about afterwards.

37
00:02:29.230 --> 00:02:33.761
And then we mentioned those immutable
data structures that use that structural

38
00:02:33.761 --> 00:02:36.770
sharing to give us efficient copying.

39
00:02:36.770 --> 00:02:41.691
Because we're always returning new copies
of all this data since we're not mutating

40
00:02:41.691 --> 00:02:42.453
it anymore.

41
00:02:42.453 --> 00:02:46.816
And to have those libraries, Immutable js,
and Immer are very popular for

42
00:02:46.816 --> 00:02:50.930
working with these type of
data structures in JavaScript.

43
00:02:50.930 --> 00:02:55.888
So what I've got here is some example code
to show you a little bit of what it feels

44
00:02:55.888 --> 00:02:58.970
like to work with those libraries.

45
00:02:58.970 --> 00:03:00.879
This is all live JavaScript code, so

46
00:03:00.879 --> 00:03:05.390
we're actually requiring those libraries
right into our observable notebook here.

47
00:03:05.390 --> 00:03:09.550
So you can work with them, so
feel free to read through this and

48
00:03:09.550 --> 00:03:13.640
play with those cells,
write new cells, try these out.

49
00:03:13.640 --> 00:03:16.650
There are links to the documentation for
these libraries.

50
00:03:16.650 --> 00:03:19.974
So we're not going to be necessarily
implementing any code here but

51
00:03:19.974 --> 00:03:23.996
just understanding what it feels like to
work with a couple of these immutable data

52
00:03:23.996 --> 00:03:26.010
structure libraries.

53
00:03:26.010 --> 00:03:28.402
And some reflection questions for

54
00:03:28.402 --> 00:03:33.361
which ones you find most easy and
friendly and fun perhaps to work with.

55
00:03:33.361 --> 00:03:35.747
Because they have different APIs,

56
00:03:35.747 --> 00:03:40.320
different kinds of ways that
you'll work with data in them.

57
00:03:40.320 --> 00:03:45.790
So just a little bit of exploratory time
to check out two of those libraries.

58
00:03:45.790 --> 00:03:50.374
And also to think about how we can replace
some of those mutating array methods with

59
00:03:50.374 --> 00:03:51.510
non mutating ones.

