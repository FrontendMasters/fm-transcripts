WEBVTT

1
00:00:00.060 --> 00:00:05.400
Hello, everybody, welcome to
functional JavaScript first steps.

2
00:00:05.400 --> 00:00:10.680
I'm Anjana Vakil, I'm coming to you
from San Francisco, California.

3
00:00:10.680 --> 00:00:15.678
And I'm really excited to spend the day
with you going over the basic concepts of

4
00:00:15.678 --> 00:00:18.060
functional programming.

5
00:00:18.060 --> 00:00:23.133
And really the core ideas that we
need to get started in our journey,

6
00:00:23.133 --> 00:00:26.960
which may be lifelong as
functional programmers.

7
00:00:28.150 --> 00:00:31.440
So just a couple words about myself,

8
00:00:31.440 --> 00:00:36.500
I am a software developer and
developer advocate.

9
00:00:36.500 --> 00:00:40.121
I do not have a formal computer science
background, I studied philosophy and

10
00:00:40.121 --> 00:00:42.990
was an English teacher
before I got into coding.

11
00:00:42.990 --> 00:00:46.515
And so, when I started working in
software development, I found that

12
00:00:46.515 --> 00:00:50.643
different programming paradigms, different
styles or mindsets for coding were

13
00:00:50.643 --> 00:00:55.060
really interesting to me, perhaps
because of that philosophy background.

14
00:00:55.060 --> 00:00:57.257
And functional programming in particular,

15
00:00:57.257 --> 00:01:00.150
just was really cool when
I first learned about it.

16
00:01:00.150 --> 00:01:04.689
So what I would like to do with you
all today is take you along on some of

17
00:01:04.689 --> 00:01:09.707
the things that I learned in my journey
as a newbie functional programmer,

18
00:01:09.707 --> 00:01:11.078
just starting out.

19
00:01:11.078 --> 00:01:15.978
And really just focus on wrapping our
heads around functional programming

20
00:01:15.978 --> 00:01:19.240
in its most basic form, so
that we can then go on and

21
00:01:19.240 --> 00:01:24.215
continue our learning journey with other
great courses on front end masters

22
00:01:24.215 --> 00:01:29.113
with other great books and resources
that are out there and be in really good

23
00:01:29.113 --> 00:01:34.039
shape to continue diving into functional
programming after this course.

24
00:01:36.640 --> 00:01:40.518
So what we're gonna talk about today is
basically what is functional programming,

25
00:01:40.518 --> 00:01:43.000
what does it mean to do
functional programming?

26
00:01:43.000 --> 00:01:47.120
What does functional code look like
compared to non functional code?

27
00:01:47.120 --> 00:01:51.160
And what are the tools that we
need to write functional programs,

28
00:01:51.160 --> 00:01:53.817
in particular as JavaScript developers?

29
00:01:53.817 --> 00:01:57.691
So since we have a lot of web developers,
a lot of JavaScript folks here,

30
00:01:57.691 --> 00:02:02.012
we're gonna be doing everything in
JavaScript, which is actually although not

31
00:02:02.012 --> 00:02:05.887
usually considered a functional
language is a really great language for

32
00:02:05.887 --> 00:02:08.700
learning functional programming,
in my opinion.

33
00:02:08.700 --> 00:02:12.253
And I'm gonna say a little bit more later
why I think that it's such a great fit for

34
00:02:12.253 --> 00:02:13.100
functional code.

35
00:02:14.570 --> 00:02:20.050
And so we're going to talk about some of
these concepts like pure functions, we're

36
00:02:20.050 --> 00:02:25.453
gonna talk about side effects and why we
want to avoid them, we're gonna talk about

37
00:02:25.453 --> 00:02:30.576
treating programs as pipelines through
which data flows between functions.

38
00:02:30.576 --> 00:02:34.685
And we're gonna be talking about some of
these words that we might have heard but

39
00:02:34.685 --> 00:02:37.936
don't really understand yet
like higher order functions, or

40
00:02:37.936 --> 00:02:42.165
first class functions, things like
closure and currying and whatnot.

41
00:02:42.165 --> 00:02:45.999
Our focus is not gonna be on
the terminology so much, but again,

42
00:02:45.999 --> 00:02:49.762
on those core ideas,
we're gonna talk about immutability and

43
00:02:49.762 --> 00:02:55.635
changing data in a way that's functional,
that works with functional programming.

44
00:02:55.635 --> 00:03:00.879
And we're gonna get some hands on practice
with some coding exercises, that will

45
00:03:00.879 --> 00:03:05.971
allow us to hopefully grapple with those
concepts and ask any questions and talk

46
00:03:05.971 --> 00:03:11.000
to each other about how we can wrap our
heads around some of these tricky ideas.

47
00:03:13.300 --> 00:03:17.691
What we're not gonna be doing today
[LAUGH] Is covering everything there is in

48
00:03:17.691 --> 00:03:21.476
the world to know about functional
programming, not possible.

49
00:03:21.476 --> 00:03:25.290
And you could definitely spend your life
studying this stuff plenty of people

50
00:03:25.290 --> 00:03:27.520
have and will continue to.

51
00:03:27.520 --> 00:03:30.546
But we're gonna just again,
get those basics under our belts so

52
00:03:30.546 --> 00:03:34.246
that we can go on and continue learning
everything you could ever possibly know

53
00:03:34.246 --> 00:03:38.140
about functional programming, although,
again, it'll take you a lifetime.

54
00:03:39.430 --> 00:03:44.200
Again, we're not gonna really focus on
the jargon, we'll look at a few terms that

55
00:03:44.200 --> 00:03:48.696
are helpful to know, and helpful to
understand what to google for, but we're

56
00:03:48.696 --> 00:03:54.100
gonna focus more on those ideas instead of
the academic mathematical side of things.

57
00:03:54.100 --> 00:03:57.127
But at the end of the day, you'll be
in really good shape to go on and

58
00:03:57.127 --> 00:04:00.230
dive in deeper to that mathematical
notation and things like that.

59
00:04:02.060 --> 00:04:05.445
And again, we're gonna be focused on
JavaScript, so we're not gonna talk about

60
00:04:05.445 --> 00:04:08.940
other languages that are usually
considered more pure functional languages.

61
00:04:08.940 --> 00:04:13.558
We're just gonna be using the tools that
we have as JavaScript developers to again,

62
00:04:13.558 --> 00:04:17.983
really focus on the concepts that we need
to understand a lifestyle of functional

63
00:04:17.983 --> 00:04:18.849
programming.

64
00:04:24.150 --> 00:04:30.450
So, today, what we're gonna be doing
is a lot of coding in our browser.

65
00:04:31.530 --> 00:04:36.349
This course, and all of the exercises
that we're gonna be doing are written in

66
00:04:36.349 --> 00:04:40.920
a platform called observable which
you're looking at right now.

67
00:04:40.920 --> 00:04:44.380
What we're seeing right here,
is a observable notebook.

68
00:04:45.420 --> 00:04:50.150
Now, I full disclosure I work at
observable as a developer advocate.

69
00:04:50.150 --> 00:04:52.740
But I think it's an amazing tool for

70
00:04:52.740 --> 00:04:56.886
doing this functional
programming workshop together,

71
00:04:56.886 --> 00:05:01.806
because what observable is,
is a platform for working with code and

72
00:05:01.806 --> 00:05:06.710
data and visualizations,
interactively live in the browser.

73
00:05:06.710 --> 00:05:10.566
So it runs totally in your browser and
requires no setup or installation,

74
00:05:10.566 --> 00:05:12.929
it uses JavaScript and
web technologies, so

75
00:05:12.929 --> 00:05:17.050
we should be right at home as web
developers and JavaScript folks.

76
00:05:17.050 --> 00:05:20.885
And what's really great about
observable is it's reactive,

77
00:05:20.885 --> 00:05:25.530
as you enter new code, you get the rest
of your programs updated instantly.

78
00:05:26.610 --> 00:05:29.590
Actually, this is powered by
functional concepts under the hood.

79
00:05:29.590 --> 00:05:31.990
We're not gonna dig into that,
but if you're curious,

80
00:05:31.990 --> 00:05:33.950
you can read more about
how observable works.

81
00:05:35.260 --> 00:05:39.572
You don't need an observable
account to do the coursework today,

82
00:05:39.572 --> 00:05:43.420
you can edit all of the code
right in your browser.

83
00:05:43.420 --> 00:05:47.978
However, if you do wanna save your
progress, if you want to save the copy

84
00:05:47.978 --> 00:05:52.613
your own copies of the notebooks that
we're going to be looking at today,

85
00:05:52.613 --> 00:05:55.790
you can sign up for
a free account, totally free.

86
00:05:55.790 --> 00:05:59.681
You can log in with your GitHub or
your Twitter or Google accounts,

87
00:05:59.681 --> 00:06:05.100
there's a big signup button at the top
right of the pages that we'll see here.

88
00:06:05.100 --> 00:06:10.260
And you can create a copy of each of
our exercise notebooks called a fork,

89
00:06:10.260 --> 00:06:15.940
that is your own place to play with and
change and refer back to however you want.

90
00:06:17.140 --> 00:06:22.813
So all of the materials for the course
are available on observablehq.com,

91
00:06:22.813 --> 00:06:28.662
you can go to this URL, observable
hq.com slash collection slash at ongina,

92
00:06:28.662 --> 00:06:32.840
slash functional minus
JavaScript minus first steps.

93
00:06:33.950 --> 00:06:36.218
If that's too much to type out,

94
00:06:36.218 --> 00:06:41.342
you can also go to observablehq.com
slash at ongina, and you should see

95
00:06:41.342 --> 00:06:46.388
in my collections the functional
JavaScript first steps collection.

96
00:06:46.388 --> 00:06:51.047
And that will bring you to a page
with all the different slides and

97
00:06:51.047 --> 00:06:54.680
exercises that we're
gonna work through today.

98
00:06:56.530 --> 00:06:59.124
I'm gonna be taking us through one by one,

99
00:06:59.124 --> 00:07:02.520
so hopefully it will be clear
where we are in the course.

100
00:07:02.520 --> 00:07:06.317
But if at any point, anybody has a
question about what notebook we're looking

101
00:07:06.317 --> 00:07:10.140
at or which exercise we're working in,
please don't hesitate to ask.

102
00:07:10.140 --> 00:07:14.181
And remember, you can always come
back to this collection page,

103
00:07:14.181 --> 00:07:19.116
functional JavaScript, first steps to
find all of the materials linked here.

104
00:07:19.116 --> 00:07:22.625
Everything is also linked
out from our introduction,

105
00:07:22.625 --> 00:07:26.285
which is this document that
we're looking at right now,

106
00:07:26.285 --> 00:07:31.770
which also has a great outline of all of
the things that we're gonna cover today.

107
00:07:31.770 --> 00:07:38.670
Wow, so, much stuff, but hopefully this
is going to be functional programming.

108
00:07:38.670 --> 00:07:40.525
So, hopefully time will fly and

109
00:07:40.525 --> 00:07:44.360
we will get through all of this
stuff in just a single day.

110
00:07:44.360 --> 00:07:49.626
So just really quickly to go over the plan
for the day, we're gonna start out

111
00:07:49.626 --> 00:07:56.190
by taking a kind of step back and thinking
about what functional programming even is.

112
00:07:56.190 --> 00:08:00.991
And it turns out that it is actually one
basic idea that everything else follows

113
00:08:00.991 --> 00:08:06.700
from which we will then through the rest
of the day kind of explore in more depth.

114
00:08:06.700 --> 00:08:09.420
So once we establish that main idea,

115
00:08:09.420 --> 00:08:13.282
we're gonna take a look at
some additional tools and

116
00:08:13.282 --> 00:08:18.551
techniques that make working in
functional programming a lot easier,

117
00:08:18.551 --> 00:08:24.050
things like recursion,
things like higher order functions.

118
00:08:24.050 --> 00:08:28.690
We're gonna talk about closure what
that means and why it's useful.

119
00:08:28.690 --> 00:08:33.155
We're gonna talk about building
programs out of function, so,

120
00:08:33.155 --> 00:08:38.360
composing or merging functions together
to create more complex programs.

121
00:08:39.680 --> 00:08:42.137
And we're gonna talk
about immutable data and

122
00:08:42.137 --> 00:08:46.470
why it is sort of goes hand in
hand with functional programming.

123
00:08:46.470 --> 00:08:50.954
And then the end of the day again,
we should be left with probably a very

124
00:08:50.954 --> 00:08:54.754
exhausted brain but
lots of great concepts and questions,

125
00:08:54.754 --> 00:08:58.110
hopefully that we can take
to continue our journey.

126
00:08:58.110 --> 00:09:02.860
So I've got some great resources and
links for you in some next steps.

127
00:09:02.860 --> 00:09:06.334
In our notebooks, there is at the top,
you're gonna see this functional

128
00:09:06.334 --> 00:09:10.200
JavaScript first steps with a list of all
the notebooks and you can click, Next and

129
00:09:10.200 --> 00:09:13.700
Previous to go back and forth between
notebooks and the collection.

130
00:09:13.700 --> 00:09:16.000
They're all in the order that we're
gonna walk through them in the course.

