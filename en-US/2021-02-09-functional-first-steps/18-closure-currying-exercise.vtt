WEBVTT

1
00:00:00.250 --> 00:00:04.947
And in this exercise,
we're going to work with some

2
00:00:04.947 --> 00:00:09.967
little functions that are going
to create closures that

3
00:00:09.967 --> 00:00:14.880
break down one of these
multiple argument functions,

4
00:00:14.880 --> 00:00:20.112
in this case one that's going
to write a message basically

5
00:00:20.112 --> 00:00:26.100
a letter type thing assigned
type of email type of deal.

6
00:00:26.100 --> 00:00:30.492
And in this case, we are observable
is doing a little bit of the work for

7
00:00:30.492 --> 00:00:35.482
us to display that on the screen which we
might consider as kind of side effect D,

8
00:00:35.482 --> 00:00:40.720
but we're still we're just returning this
is actually basically a fancy string.

9
00:00:40.720 --> 00:00:44.970
You don't need to worry about
the implementation here but

10
00:00:44.970 --> 00:00:50.000
we are gonna use this write message
function to create some partially

11
00:00:50.000 --> 00:00:55.289
applied functions that are going to
kind of lock in some of those values,

12
00:00:55.289 --> 00:00:59.797
like the person signing the letter,
or the salutation like,

13
00:00:59.797 --> 00:01:03.380
see ya, or keep carrying on,
things like that.

14
00:01:04.540 --> 00:01:10.457
And I wanna make sure, yes, so
there's a couple of examples for you, at

15
00:01:10.457 --> 00:01:17.160
the top of this exercise on basic closures
to give you a sense of how this works.

16
00:01:17.160 --> 00:01:20.535
And then your task is to
fill in some to dos and

17
00:01:20.535 --> 00:01:25.194
implement these functions to get
the rest of these letters or

18
00:01:25.194 --> 00:01:31.491
these messages to look how they are, how
the first one to do, so we have a message,

19
00:01:31.491 --> 00:01:36.550
we have a salutation and
then we have a person signing the letter.

20
00:01:38.380 --> 00:01:43.869
And then the second part of the exercise
is going to work with currian,

21
00:01:43.869 --> 00:01:49.729
where we have some very silly I think
grumpy programmers who are making some

22
00:01:49.729 --> 00:01:55.435
comments about JavaScript are terrible
language and things like that.

23
00:01:55.435 --> 00:02:00.755
[LAUGH] And so, what we're doing
is we've got a quote function that

24
00:02:00.755 --> 00:02:05.885
is a multi argument function
that's similar to our sign message

25
00:02:05.885 --> 00:02:12.130
is something that we can call on lots
of data to get these quotes to appear.

26
00:02:12.130 --> 00:02:14.190
But we have to repeat ourselves a lot.

27
00:02:14.190 --> 00:02:18.440
We're repeating a lot of the same
values repeating, repeating.

28
00:02:18.440 --> 00:02:22.945
So what we're gonna see in this exercise
is how we can use currian to create

29
00:02:22.945 --> 00:02:27.523
a curried version of this quote function
which then allows us to create more

30
00:02:27.523 --> 00:02:32.248
reusable functions that lock in some of
these arguments and allow us to kind of

31
00:02:32.248 --> 00:02:37.408
simplify our code so that we don't have so
much repetition, so that we don't have so

32
00:02:37.408 --> 00:02:42.535
many of these same values being passed in
and we have shorter function signatures.

33
00:02:42.535 --> 00:02:44.967
So we have functions
that take in maybe one or

34
00:02:44.967 --> 00:02:47.350
maybe two arguments instead of all three.

