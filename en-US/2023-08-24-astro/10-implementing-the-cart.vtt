WEBVTT

1
00:00:00.000 --> 00:00:01.688
Then we're gonna do a few things here.

2
00:00:01.688 --> 00:00:06.903
So I want to set up an EmptyState for
the cart.

3
00:00:06.903 --> 00:00:10.523
That is going to be a kind
of a functional component.

4
00:00:10.523 --> 00:00:12.204
If you've seen one of those,

5
00:00:12.204 --> 00:00:15.646
this is gonna be very similar
to what we would write in React.

6
00:00:15.646 --> 00:00:20.672
The biggest difference is that Solid
also doesn't care about class.

7
00:00:20.672 --> 00:00:23.747
You can just use class,
you don't have to write className.

8
00:00:23.747 --> 00:00:29.447
And the difference between the way
that Astro does scoped styles and

9
00:00:29.447 --> 00:00:33.947
the way that CSS modules do
it is that you have to import

10
00:00:33.947 --> 00:00:38.449
the stylesheet as a JavaScript object,
basically.

11
00:00:38.449 --> 00:00:41.824
And then the classes
come off of that object.

12
00:00:41.824 --> 00:00:46.146
So we've got a class in here
in the module called icon.

13
00:00:46.146 --> 00:00:52.056
So we're just getting styles.icon
to apply the icon class.

14
00:00:52.056 --> 00:00:54.492
A little funky if you've
never used it before.

15
00:00:54.492 --> 00:00:57.395
Once you get the hang of it,

16
00:00:57.395 --> 00:01:02.832
I find it to be the friendliest
flavor of CSS and JS.

17
00:01:02.832 --> 00:01:07.585
So then we're gonna set up
a span with a roll of img,

18
00:01:07.585 --> 00:01:12.351
and then we'll give it
an aria-label of a hot dog.

19
00:01:12.351 --> 00:01:17.791
And then I have to remember what
my shortcut is for, there it is.

20
00:01:17.791 --> 00:01:21.647
Cmd+Ctrl+Space will open up your
emoji thing if you're on a Mac.

21
00:01:24.358 --> 00:01:31.108
And then we're going to set
up a class of styles.empty.

22
00:01:31.108 --> 00:01:36.114
And inside,
we'll just say your cart is empty!

23
00:01:36.114 --> 00:01:42.862
Add a sandwich kit or two and

24
00:01:42.862 --> 00:01:48.441
give flavor a chance.

25
00:01:48.441 --> 00:01:52.996
Okay, so
that's gonna be our EmptyState Next,

26
00:01:52.996 --> 00:01:56.450
we're not actually gonna
implement the Checkout.

27
00:01:56.450 --> 00:02:01.839
So instead, we're just gonna have
a little like, hey, this isn't here yet.

28
00:02:01.839 --> 00:02:05.959
So we don't want it to be broken,
we don't want it to do nothing.

29
00:02:05.959 --> 00:02:09.725
But we also don't wanna spend any time
building it because it's not really

30
00:02:09.725 --> 00:02:10.691
related to Astro.

31
00:02:10.691 --> 00:02:15.800
We would work the same no matter
what framework you're building in.

32
00:02:15.800 --> 00:02:18.437
So we're gonna add this class,
and we're just gonna say,

33
00:02:18.437 --> 00:02:19.979
Checkout is not implemented yet.

34
00:02:24.056 --> 00:02:28.457
Okay, so that's ready to go, and
now we can get to our actual cart,

35
00:02:28.457 --> 00:02:31.795
which is gonna be the bulk
of what we're building.

36
00:02:31.795 --> 00:02:35.511
So we're gonna export a const Cart, and

37
00:02:35.511 --> 00:02:40.005
that is also this functional
component export.

38
00:02:40.005 --> 00:02:43.258
And let's set up the pieces we need here.

39
00:02:43.258 --> 00:02:46.386
So we're gonna get into some signals.

40
00:02:46.386 --> 00:02:50.468
We're gonna set up one called
showNotice and setShowNotice.

41
00:02:50.468 --> 00:02:55.720
So very similar to the way
that you use useState.

42
00:02:55.720 --> 00:03:01.290
So we're gonna create that signal,
and by default, the notice is false.

43
00:03:01.290 --> 00:03:06.754
Then we're gonna get the subtotal,
and that is going to be useStore.

44
00:03:06.754 --> 00:03:08.851
Now, useStore is from nanostores.

45
00:03:08.851 --> 00:03:10.853
This is the Solid-flavored version.

46
00:03:10.853 --> 00:03:15.300
And it just takes whatever
the value of the nanostore is and

47
00:03:15.300 --> 00:03:20.744
converts it into a signal, or in React,
a useState value, or whatever

48
00:03:20.744 --> 00:03:26.678
it is that you need so that you can access
it inside of your component library.

49
00:03:26.678 --> 00:03:32.209
So we're gonna useStore, and
with this one, I wanna get the subtotal.

50
00:03:32.209 --> 00:03:38.517
And then I'm gonna just duplicate
that straight up, and we want cart.

51
00:03:38.517 --> 00:03:45.567
And I forgot to put the dollar sign on
this subtotal, but bear with me, I guess.

52
00:03:45.567 --> 00:03:48.438
No, I did the thing.

53
00:03:48.438 --> 00:03:52.472
Okay, here's what we're gonna do.

54
00:03:52.472 --> 00:03:56.267
That was maybe why I didn't have
that dollar sign on there, was so

55
00:03:56.267 --> 00:03:58.202
that I would be able to do it here.

56
00:03:58.202 --> 00:04:03.089
So what I just did is I aliased this
to cart without the dollar sign so

57
00:04:03.089 --> 00:04:07.736
that I don't have a variable name
collision lower in the code.

58
00:04:07.736 --> 00:04:11.221
So now we've got access to our subtotal,
we've got access to our cart, and

59
00:04:11.221 --> 00:04:12.698
we've got autocomplete here.

60
00:04:12.698 --> 00:04:18.818
You can see that this does know
that it is a record of CartItems.

61
00:04:18.818 --> 00:04:23.031
Then we can start writing
some actual component code.

62
00:04:23.031 --> 00:04:25.427
Let's get some code returned here.

63
00:04:25.427 --> 00:04:28.907
So I'm gonna set up this as an aside.

64
00:04:28.907 --> 00:04:32.396
That's a built-in HTML component.

65
00:04:32.396 --> 00:04:35.614
I'm gonna give it styles of cart.

66
00:04:35.614 --> 00:04:40.234
And then inside, we just wanna kinda
give an indication of where you are,

67
00:04:40.234 --> 00:04:41.434
this is Your Cart.

68
00:04:41.434 --> 00:04:46.014
Next up, we're going to use
the Show component from Solid.

69
00:04:46.014 --> 00:04:48.319
This is very similar to using a ternary,
but

70
00:04:48.319 --> 00:04:51.701
the nice thing about it is that
it's a little more intentional.

71
00:04:51.701 --> 00:04:56.372
You're saying, I'm gonna give
you a condition of when if I,

72
00:04:56.372 --> 00:04:58.544
my goodness, I can't type.

73
00:04:58.544 --> 00:05:00.774
Okay, so give a when.

74
00:05:00.774 --> 00:05:06.167
And then I'm gonna say,
Object.values of cart.

75
00:05:06.167 --> 00:05:08.892
And you see I'm calling
this like a function.

76
00:05:08.892 --> 00:05:14.270
This is the thing that's unique to
signals as compared to React state.

77
00:05:14.270 --> 00:05:17.086
In Solid, you have to call the state or

78
00:05:17.086 --> 00:05:20.344
the signal like a function
to get the value.

79
00:05:20.344 --> 00:05:22.390
So that is why we're doing that.

80
00:05:22.390 --> 00:05:26.503
And then I'm gonna check that
the length is greater than 0.

81
00:05:26.503 --> 00:05:30.328
And that's our condition for
when we would show this thing.

82
00:05:30.328 --> 00:05:33.593
If that condition is not true,
we can provide a fallback.

83
00:05:33.593 --> 00:05:37.740
And the fallback I wanna provide
is that EmptyState we defined.

84
00:05:37.740 --> 00:05:40.780
Okay, so that's how that piece works.

85
00:05:40.780 --> 00:05:45.159
And then inside of it, we can do,
now we know we have CartItems, so

86
00:05:45.159 --> 00:05:46.894
we can just display them.

87
00:05:46.894 --> 00:05:49.046
We don't have to do any
defensive coding here.

88
00:05:49.046 --> 00:05:53.237
The Show component was our defensive
coding against having an empty list.

89
00:05:53.237 --> 00:05:58.546
So we have a class here that
we're gonna set to styles.items,

90
00:05:58.546 --> 00:06:02.965
and then we're gonna loop
over those values again.

91
00:06:02.965 --> 00:06:05.901
So again,
we are storing these as an object.

92
00:06:05.901 --> 00:06:08.590
So to get them in a list
that we can iterate over,

93
00:06:08.590 --> 00:06:10.556
we just run this Object.values.

94
00:06:10.556 --> 00:06:14.341
So we get the cart, and
then we're going to map.

95
00:06:14.341 --> 00:06:19.530
And for each thing here, we're gonna get
an entry, and that entry is a CartItem.

96
00:06:19.530 --> 00:06:23.282
So now we'll have some autocomplete here.

97
00:06:23.282 --> 00:06:29.970
And we're gonna check, if there's not
an entry, we will just return null item.

98
00:06:29.970 --> 00:06:38.864
And otherwise, we're going to return,
A big old pile of markup.

99
00:06:38.864 --> 00:06:43.524
So it's gonna be a class, styles.item.

100
00:06:43.524 --> 00:06:46.287
And then inside of that,

101
00:06:46.287 --> 00:06:52.340
we're gonna set up a span
class of styles.quantity,

102
00:06:52.340 --> 00:06:56.955
and that contains our entry.quantity.

103
00:06:56.955 --> 00:07:01.220
And then we can start duplicating this
a little bit because we're just gonna list

104
00:07:01.220 --> 00:07:04.682
out the quantity, the name of the thing,
the price of the thing.

105
00:07:04.682 --> 00:07:09.444
So in here,
we're gonna call this one styles.name,

106
00:07:09.444 --> 00:07:12.351
and this contains item.title.

107
00:07:12.351 --> 00:07:18.952
Then we're gonna add a button for
the remove.

108
00:07:18.952 --> 00:07:23.217
So we're gonna call this remove,
styles.remove.

109
00:07:23.217 --> 00:07:25.413
I don't know why it didn't
make this a button, but

110
00:07:25.413 --> 00:07:27.162
I don't have time to rewrite the style.

111
00:07:27.162 --> 00:07:29.295
So just know, for everybody out there,

112
00:07:29.295 --> 00:07:32.011
it should have been a button
to be more accessible.

113
00:07:32.011 --> 00:07:33.884
And I'm very sorry that I didn't.

114
00:07:33.884 --> 00:07:36.396
I know what I did,
I put the button inside.

115
00:07:36.396 --> 00:07:42.019
[LAUGH] So it is a button, it is a button,
I'm just not reading ahead of myself here.

116
00:07:42.019 --> 00:07:46.352
And so we'll say, remove item,
and this is gonna be our button.

117
00:07:46.352 --> 00:07:51.559
And onClick,
we get to pass in this function

118
00:07:51.559 --> 00:07:57.065
that we wrote, removeItemFromCart, here.

119
00:07:57.065 --> 00:08:01.117
And we're gonna pass in

120
00:08:01.117 --> 00:08:06.591
the entry.item.id, right?

121
00:08:06.591 --> 00:08:12.305
So then inside of this,
I like to use the multiplication

122
00:08:12.305 --> 00:08:20.341
symbol as an x because it's kinda more
centered than the regular x character.

123
00:08:20.341 --> 00:08:23.224
There might be reasons not to do that,

124
00:08:23.224 --> 00:08:28.280
I am not an accessibility expert,
but that is how I ended up there.

125
00:08:28.280 --> 00:08:32.391
Ended up with an extra parenthesis there.

126
00:08:32.391 --> 00:08:34.478
Okay, so that is now valid.

127
00:08:34.478 --> 00:08:38.817
So we've got the title, and then we've
got an onClick that just removes that

128
00:08:38.817 --> 00:08:40.976
particular item from the cart there.

129
00:08:42.965 --> 00:08:48.922
Then I'm going to take this outside.

130
00:08:48.922 --> 00:08:49.893
Let's get the price.

131
00:08:49.893 --> 00:08:54.326
So outside of that span,
I want the price, and

132
00:08:54.326 --> 00:08:57.748
we can change this to item.price.

133
00:08:59.518 --> 00:09:05.736
And we've got our closing ally, all good,
then we've got this closing ul, all right.

134
00:09:05.736 --> 00:09:09.658
So the last thing then is
we wanna show the subtotal.

135
00:09:09.658 --> 00:09:14.248
So we're gonna set this up
as styles.details because

136
00:09:14.248 --> 00:09:16.853
there's a few pieces in here.

137
00:09:16.853 --> 00:09:23.325
We've got a paragraph that
we'll call styles.subtotal.

138
00:09:25.488 --> 00:09:32.857
And that is going to contain a span.

139
00:09:32.857 --> 00:09:34.622
And these are all kinda
presentational things.

140
00:09:34.622 --> 00:09:40.964
So I tried to keep this as simple as
I could and also make it look nice.

141
00:09:40.964 --> 00:09:45.091
But again, I love CSS, so
I just end up playing with stuff.

142
00:09:45.091 --> 00:09:49.215
So then I'll give it a hard-coded space
because I'm gonna break this, but

143
00:09:49.215 --> 00:09:51.672
I don't want it to be
crammed into the label.

144
00:09:51.672 --> 00:09:57.097
And I'm gonna use that formatCurrency,
pass in the subtotal this time.

145
00:09:57.097 --> 00:09:57.652
And again,

146
00:09:57.652 --> 00:10:01.215
that's a signal, so we have to call it
like a function to get that to show up.

147
00:10:03.736 --> 00:10:08.333
Then outside of this,
I'm gonna copy this one and

148
00:10:08.333 --> 00:10:11.620
just drop it right down here again.

149
00:10:11.620 --> 00:10:15.625
So this one is going
to be called shipping.

150
00:10:15.625 --> 00:10:20.859
And it keeps that style of label, but
we're gonna change this label to shipping.

151
00:10:20.859 --> 00:10:27.794
And just for a little bit of like, hey,
let's make this feel like a real app,

152
00:10:27.794 --> 00:10:32.932
we're gonna delete the shipping price and
insert FREE.

153
00:10:32.932 --> 00:10:35.799
Hey, free shipping.

154
00:10:35.799 --> 00:10:39.776
Finally, we're gonna grab this one
one more time, drop it down here.

155
00:10:39.776 --> 00:10:42.747
And this is going to be our total.

156
00:10:45.756 --> 00:10:49.390
And that will be the actual total.

157
00:10:49.390 --> 00:10:51.142
So now we're gonna add the total.

158
00:10:51.142 --> 00:10:56.540
So we're gonna use this formatCurrency
again and just recalculate the subtotal.

159
00:10:56.540 --> 00:11:00.537
But if we add shipping fees,
if we add taxes calculated,

160
00:11:00.537 --> 00:11:06.285
we would need to probably store another
computed store to factor those pieces in,

161
00:11:06.285 --> 00:11:09.802
and then we would be
formatting the total itself.

162
00:11:09.802 --> 00:11:13.736
But because we know that nothing
else will get added to the amount,

163
00:11:13.736 --> 00:11:15.574
we can use the subtotal again.

164
00:11:15.574 --> 00:11:20.162
And our very last piece here,
no, it's not,

165
00:11:20.162 --> 00:11:25.113
second to last piece here
is the Checkout button.

166
00:11:25.113 --> 00:11:30.548
Like I said, isn't actually gonna work,
but we are going to put it there so

167
00:11:30.548 --> 00:11:34.800
that it doesn't,
we want it to feel as complete as we can.

168
00:11:34.800 --> 00:11:37.177
So here's a button,
gonna give it a class, and

169
00:11:37.177 --> 00:11:41.052
we've got this global class of big-link,
which is what we used in the hero.

170
00:11:41.052 --> 00:11:43.434
So we wanna share that class there.

171
00:11:43.434 --> 00:11:48.845
And then this one is going
to include an onClick

172
00:11:48.845 --> 00:11:54.686
handler that will use
the setShowNotice to true.

173
00:11:57.402 --> 00:11:59.629
And then we can say, Check Out.

174
00:12:03.924 --> 00:12:09.922
I spelled button wrong, so
I'll fix my spelling here, Okay?

175
00:12:09.922 --> 00:12:12.809
That was [INAUDIBLE].

176
00:12:15.011 --> 00:12:17.258
I love autocomplete until
it gets too helpful, and

177
00:12:17.258 --> 00:12:19.461
then I get really confused
as to what's going on.

178
00:12:19.461 --> 00:12:22.872
So then the last thing we're gonna do is
use the Show component one more time.

179
00:12:22.872 --> 00:12:28.655
And we're going to use that to say,
when the showNotice is true,

180
00:12:28.655 --> 00:12:34.141
we want to show this CheckoutNotice
that we defined up above.

181
00:12:34.141 --> 00:12:37.632
So that's that component that just says,
Checkout's not implemented yet.

182
00:12:37.632 --> 00:12:41.747
And our goal here is, again,
if somebody clicks that Check Out button,

183
00:12:41.747 --> 00:12:45.323
we want them to know that we're
aware that the thing is broken,

184
00:12:45.323 --> 00:12:47.364
we were not shipping a dead button.

185
00:12:47.364 --> 00:12:50.715
And then they're like, is the site
broken or is this not implemented yet?

186
00:12:50.715 --> 00:12:53.282
We want them to be very clear,
this is not implemented yet.

187
00:12:55.413 --> 00:13:03.529
Okay, so, This is probably one of the most
complex pieces that we've done so far.

188
00:13:03.529 --> 00:13:08.778
Does anybody have questions about how
that works before I move on here?

189
00:13:11.354 --> 00:13:14.200
&gt;&gt; I have a question more
relevant to shop-items.astro.

190
00:13:14.200 --> 00:13:16.033
&gt;&gt; Sure, yeah, let me pull that up.

191
00:13:16.033 --> 00:13:20.277
&gt;&gt; So in here we have an Astro file or
just making a fetch call.

192
00:13:20.277 --> 00:13:21.046
&gt;&gt; Yes.

193
00:13:21.046 --> 00:13:24.466
&gt;&gt; If something goes wrong,
is there an Astro way of handling that?

194
00:13:24.466 --> 00:13:31.195
My treat is more like a vanilla HTML,
R, and JS situation.

195
00:13:31.195 --> 00:13:33.634
&gt;&gt; All right, let's find out,
just start the site.

196
00:13:40.832 --> 00:13:44.389
So it's not handling it for you, right?

197
00:13:44.389 --> 00:13:48.404
It is telling you that something
went wrong, and it'll tell you,

198
00:13:48.404 --> 00:13:50.781
I think, exactly where it went wrong.

199
00:13:53.876 --> 00:13:54.680
I guess it doesn't.

200
00:13:54.680 --> 00:13:58.540
[INAUDIBLE]
&gt;&gt; It should console log it, yes.

201
00:14:03.880 --> 00:14:08.315
Or actually, that might be in this output.

202
00:14:08.315 --> 00:14:13.721
Yes, so here's our actual output here,
and it's gonna give us the Not Found.

203
00:14:13.721 --> 00:14:18.286
So assume you're gonna need to
kinda do your own handling there,

204
00:14:18.286 --> 00:14:20.610
this is the laziest error check.

205
00:14:20.610 --> 00:14:25.173
At least if it breaks,
I know I can go look at the console,

206
00:14:25.173 --> 00:14:29.848
[LAUGH] but yeah,
you would wanna control that on your own.

