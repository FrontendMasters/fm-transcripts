WEBVTT

1
00:00:00.000 --> 00:00:02.932
We need to get data into
this Astro component, so

2
00:00:02.932 --> 00:00:06.507
we're going to create a new
Astro component that will be for

3
00:00:06.507 --> 00:00:10.531
listing items and then that's
what we're going to display here.

4
00:00:10.531 --> 00:00:15.379
And this is gonna be a child component so
we're going to create one

5
00:00:15.379 --> 00:00:19.702
in the components directory
called shop-items.astro,

6
00:00:19.702 --> 00:00:24.044
this naming convention is my
preference I use Kebab case.

7
00:00:24.044 --> 00:00:28.755
Instead of Pascal case for components
that drives some people up the wall,

8
00:00:28.755 --> 00:00:30.860
I'm sorry if you are one of them.

9
00:00:30.860 --> 00:00:34.495
To me, this is just easier to scan,
I don't know,

10
00:00:34.495 --> 00:00:37.806
I don't like capital letters in
file names.

11
00:00:37.806 --> 00:00:43.646
Yeah, I see some nods.
Yeah, that's how I feel about it [LAUGH].

12
00:00:43.646 --> 00:00:49.060
Okay, so inside this, first we're
gonna set up a little helper function,

13
00:00:49.060 --> 00:00:54.154
and I am going to actually copy paste
this function around a little bit.

14
00:00:54.154 --> 00:00:55.939
Because I use it twice and

15
00:00:55.939 --> 00:01:01.559
I didn't think that was enough times to
merit making like a utility function.

16
00:01:01.559 --> 00:01:06.117
And this is a case where I think like
somebody's gonna be screaming you

17
00:01:06.117 --> 00:01:09.531
should dry this out and
and I don't, I don't care.

18
00:01:09.531 --> 00:01:14.157
So what I'm using is a built-in
API called, the international and

19
00:01:14.157 --> 00:01:18.063
then the number format API
allows me to format currency.

20
00:01:18.063 --> 00:01:22.197
So that I don't have to figure
out how to do that myself.

21
00:01:22.197 --> 00:01:27.319
And it's really just a wonderful
little API that saves me so

22
00:01:27.319 --> 00:01:30.910
much time and
then I can pass in my amount.

23
00:01:30.910 --> 00:01:35.382
And what this will do is any amount that I
send into this format currency will come

24
00:01:35.382 --> 00:01:37.063
out formatted as US dollars.

25
00:01:37.063 --> 00:01:43.281
It is a delightful way to save myself
a bunch of manual processing of numbers.

26
00:01:43.281 --> 00:01:45.200
So next, let's load some products.

27
00:01:45.200 --> 00:01:50.230
So I'm gonna grab a result
from the fetch API.

28
00:01:50.230 --> 00:01:52.319
So Astro enables top level await so

29
00:01:52.319 --> 00:01:56.148
that we don't have to write async
functions to load products.

30
00:01:56.148 --> 00:02:00.726
This is an extraordinarily convenient
little thing that just avoids some mental

31
00:02:00.726 --> 00:02:01.610
loop de loops.

32
00:02:01.610 --> 00:02:04.670
To get product, so
we're going to run fetch.

33
00:02:04.670 --> 00:02:08.505
And inside of this,
we're going to hit https.

34
00:02:08.505 --> 00:02:14.557
And I made a little API to power this,
so it's gonna be called

35
00:02:14.557 --> 00:02:21.693
astro-frontend-masters-api.netlify.app/ap-
i/products.

36
00:02:21.693 --> 00:02:25.320
Let me make this bigger so
that you can see that whole thing.

37
00:02:25.320 --> 00:02:27.584
And we can just hit that straight up.

38
00:02:27.584 --> 00:02:30.180
Then what I'm gonna do is just make
sure that we don't have an issue.

39
00:02:30.180 --> 00:02:36.171
So if anything is wrong with the response,
we'll just console-error and

40
00:02:36.171 --> 00:02:40.081
show it so
that we can check out what's going on.

41
00:02:40.081 --> 00:02:44.431
Fingers crossed, no issues, I've now built
this app several times in preparation for

42
00:02:44.431 --> 00:02:46.388
today and it worked all of those times.

43
00:02:46.388 --> 00:02:49.884
But since we're live there
is a decent chance that this

44
00:02:49.884 --> 00:02:52.019
is all going to blow up in my face.

45
00:02:52.019 --> 00:02:56.881
Then I have a type declared called
ShopItem that we're gonna use for

46
00:02:56.881 --> 00:02:59.879
this and you can just grab that like that.

47
00:02:59.879 --> 00:03:04.309
So we're gonna get back an array of
shop items from this product API.

48
00:03:04.309 --> 00:03:07.824
And we get those by awaiting result.json().

49
00:03:07.824 --> 00:03:10.386
So this is hitting an API.

50
00:03:10.386 --> 00:03:11.364
We're loading the response.

51
00:03:11.364 --> 00:03:12.568
We're checking if the response is okay.

52
00:03:12.568 --> 00:03:15.067
And if the response is okay,

53
00:03:15.067 --> 00:03:20.286
we're grabbing the body of that
response as a JSON object.

54
00:03:20.286 --> 00:03:24.152
And that gives us our shopItems which
we can now see our shop items that's not

55
00:03:24.152 --> 00:03:27.912
super helpful because it doesn't show
us all of the properties in there.

56
00:03:27.912 --> 00:03:32.681
But that's okay because
autocomplete will still work so

57
00:03:32.681 --> 00:03:37.559
we're gonna do a new section
in here called shop-items.

58
00:03:37.559 --> 00:03:44.023
And then let me actually leave this up for
a bit in case anybody still needs it.

59
00:03:44.023 --> 00:03:48.596
Then we're gonna do some looping, so
we're gonna grab our shop items and

60
00:03:48.596 --> 00:03:51.635
we're going to map over them and
grab each item.

61
00:03:51.635 --> 00:03:55.649
And inside of here we
want to return a div, and

62
00:03:55.649 --> 00:04:00.312
that div that we want is going
to have a class of item.

63
00:04:00.312 --> 00:04:02.036
And again, we don't have to add a key or

64
00:04:02.036 --> 00:04:04.611
anything because astro
components don't work that way.

65
00:04:04.611 --> 00:04:09.251
Then we can add an image and
the source is going to be item.image, and

66
00:04:09.251 --> 00:04:14.773
we're just gonna autocomplete our way
to victory here, item.image.src.

67
00:04:14.773 --> 00:04:16.273
And then we can add the alt.

68
00:04:16.273 --> 00:04:23.588
The alt will be item.image.alt.

69
00:04:23.588 --> 00:04:29.419
And below that, we're gonna set up an h2

70
00:04:29.419 --> 00:04:34.758
to be the item name, so item.title.

71
00:04:34.758 --> 00:04:35.460
Where is it?

72
00:04:40.301 --> 00:04:43.121
I don't know why that autocomplete
wasn't working but there it is.

73
00:04:43.121 --> 00:04:48.287
Then we're gonna get the description so
item.description.

74
00:04:48.287 --> 00:04:56.375
Hello, I thought I was helping everybody.

75
00:04:56.375 --> 00:05:00.320
I'm not very good at TypeScript,
I think it shows.

76
00:05:00.320 --> 00:05:04.966
So then what we can do is we're
gonna grab that price and

77
00:05:04.966 --> 00:05:10.622
because I have that helper,
we're gonna grab formatCurrency and

78
00:05:10.622 --> 00:05:16.497
pass in the item.price as our amount,
and that will output a price.

79
00:05:16.497 --> 00:05:19.390
And then the last thing is we're
not gonna do this just yet, but

80
00:05:19.390 --> 00:05:23.230
we're gonna put a little placeholder in to
say we need to add a, add to cart button.

81
00:05:28.536 --> 00:05:32.510
Okay, so then we're not even gonna
bother looking at this unstyled.

82
00:05:32.510 --> 00:05:33.720
We're just gonna throw the styles in.

83
00:05:33.720 --> 00:05:36.724
So we're gonna go into
the _workshop-assets,

84
00:05:36.724 --> 00:05:40.234
the styles folder, and
then components-shop-items.

85
00:05:40.234 --> 00:05:42.420
I named them to match the directory.

86
00:05:42.420 --> 00:05:47.186
And then paste that
into a style component.

87
00:05:47.186 --> 00:05:49.664
And then if we come back out here and

88
00:05:49.664 --> 00:05:54.630
reload nothing happens because
we're not using the component yet.

89
00:05:54.630 --> 00:06:01.603
So next,
let's go add this component into our shop.

90
00:06:01.603 --> 00:06:04.854
So to do that up at the top,
just like we did with the layout,

91
00:06:04.854 --> 00:06:06.822
we're going to import shop items.

92
00:06:06.822 --> 00:06:10.000
From components/shop-items.

93
00:06:10.000 --> 00:06:14.851
And then down here where
it says list products,

94
00:06:14.851 --> 00:06:20.813
we're going to replace that
with a ShopItems component.

95
00:06:20.813 --> 00:06:25.124
This doesn't need any props yet,
we're gonna add props later, but

96
00:06:25.124 --> 00:06:28.480
what this will give you is
a list of our sandwich kits.

97
00:06:35.062 --> 00:06:36.153
Great, easy peasy.

98
00:06:36.153 --> 00:06:38.884
So this is one of the things that, again,

99
00:06:38.884 --> 00:06:42.016
I really like about the way
that Astro is set up.

100
00:06:42.016 --> 00:06:46.721
Is it's not asking you to learn
a lot of really specific APIs

101
00:06:46.721 --> 00:06:51.060
to make things work,
we get to use browser standards.

102
00:06:51.060 --> 00:06:53.732
So here's the Fetch API,
this is a browser standard.

103
00:06:53.732 --> 00:06:57.852
If you need documentation on it, you go
to the Mozilla developer network, right?

104
00:06:57.852 --> 00:06:59.559
MDN docs, you hit up Fetch.

105
00:06:59.559 --> 00:07:00.748
This works everywhere.

106
00:07:00.748 --> 00:07:02.562
This is a standard browser API.

107
00:07:02.562 --> 00:07:06.406
You can run it in your console if
you wanna test it, it's great.

108
00:07:06.406 --> 00:07:11.067
And then we just loop over it using
regular old JavaScript stuff very

109
00:07:11.067 --> 00:07:14.026
familiar if you've worked in JSX before.

110
00:07:14.026 --> 00:07:18.643
But we get some of the benefits of not
writing JSX, like being able to use class

111
00:07:18.643 --> 00:07:23.351
as its own attribute and not having to
add keys to things to make them function.

112
00:07:23.351 --> 00:07:26.019
So it's just very pleasant,
like it's just very nice to work with.

