WEBVTT

1
00:00:00.150 --> 00:00:02.400
A little quick recap of how
far we've come together.

2
00:00:02.400 --> 00:00:06.360
We've got ourselves a homepage
that has a hero image,

3
00:00:06.360 --> 00:00:09.640
it's got a teaser about our products.

4
00:00:09.640 --> 00:00:13.826
We have a blog that is running
off of Astro content collections,

5
00:00:13.826 --> 00:00:17.481
we've got a shop that's
running off third party data.

6
00:00:17.481 --> 00:00:21.408
It's got React components talking to
solid components using nano stores,

7
00:00:21.408 --> 00:00:26.330
all partially hydrated so that we're not
wasting any kilobytes that we don't need.

8
00:00:26.330 --> 00:00:31.817
And we've got a marked down page, and
I think all that's left to do is the thing

9
00:00:31.817 --> 00:00:37.074
that no company is gonna let us get
away without which is a newsletter list.

10
00:00:37.074 --> 00:00:42.195
So we're gonna add a newsletter capture,
and we want this

11
00:00:42.195 --> 00:00:48.690
newsletter capture to work with standard
like post submission of a form.

12
00:00:48.690 --> 00:00:53.083
So we're not gonna make it client side,
we're not gonna escape with a React

13
00:00:53.083 --> 00:00:57.221
component or a solid component to
handle it on click on the client side.

14
00:00:57.221 --> 00:01:01.875
We are instead going to use hybrid
rendering or server side rendering for

15
00:01:01.875 --> 00:01:06.913
our newsletter components so that we
can submit directly using the platform,

16
00:01:06.913 --> 00:01:12.044
and then catch those submissions, and
do whatever it is we need to do with them.

17
00:01:12.044 --> 00:01:13.246
To sort of do that,

18
00:01:13.246 --> 00:01:18.290
we first need to talk a little bit about
the different rendering modes in Astro.

19
00:01:18.290 --> 00:01:23.791
So let me just get over
to server-side rendering.

20
00:01:23.791 --> 00:01:27.121
And the way that this works is Astro,
by default,

21
00:01:27.121 --> 00:01:31.680
is going to precompile everything,
they call it pre-rendering.

22
00:01:31.680 --> 00:01:35.416
So they will look at everything in
your site, they will prerender it, and

23
00:01:35.416 --> 00:01:38.148
they will output as much of
it as they can statically.

24
00:01:38.148 --> 00:01:41.769
And in my opinion,
this is the right default because again,

25
00:01:41.769 --> 00:01:45.530
the vast majority of the things
we build are static content.

26
00:01:45.530 --> 00:01:49.231
Even if we get them in very dynamic
ways from API's through a lot of data

27
00:01:49.231 --> 00:01:50.800
crunching, whatever it is,

28
00:01:50.800 --> 00:01:54.463
what we're ultimately putting out
on the screen is static content.

29
00:01:54.463 --> 00:01:59.632
It's not gonna change between users,
it updates on a very active site maybe

30
00:01:59.632 --> 00:02:04.899
once or twice a day, maybe once or twice
an hour if it's a really active page.

31
00:02:04.899 --> 00:02:08.444
And because of that,
static is a good default, but

32
00:02:08.444 --> 00:02:12.907
that's not always the right choice,
sometimes you need more.

33
00:02:12.907 --> 00:02:17.582
If you do have a use case where you wanna
do server rendering like a form submission

34
00:02:17.582 --> 00:02:20.539
or something where the data
updates to the second,

35
00:02:20.539 --> 00:02:23.570
then you can turn on
server rendering in Astro.

36
00:02:23.570 --> 00:02:29.455
Now they have an option for output
server which puts you into SSR mode.

37
00:02:29.455 --> 00:02:33.620
However, this puts the entire
site into SSR mode.

38
00:02:33.620 --> 00:02:37.600
So it can be the right call,
depending on what you're building.

39
00:02:37.600 --> 00:02:40.312
If everything you're building
is behind a login and

40
00:02:40.312 --> 00:02:44.563
it will be completely customized based on
the user for every single page load, and

41
00:02:44.563 --> 00:02:48.957
the data's always different, then a server
rendered site might be the right call.

42
00:02:48.957 --> 00:02:52.080
And if that's the case you
are covered with this.

43
00:02:52.080 --> 00:02:57.781
But what I find really exciting is
this new mode of hybrid rendering, and

44
00:02:57.781 --> 00:03:04.237
the way that hybrid rendering works, let
me see if I can find the actual note here.

45
00:03:04.237 --> 00:03:05.244
Here this is the one.

46
00:03:05.244 --> 00:03:07.015
The static pre-rendering by default.

47
00:03:07.015 --> 00:03:11.515
So this is, I think,
probably where I would be looking to go.

48
00:03:11.515 --> 00:03:15.087
First, it's where we're gonna go
today is this hybrid rendering mode.

49
00:03:15.087 --> 00:03:19.320
And so what hybrid rendering means is
that by default everything is statically

50
00:03:19.320 --> 00:03:23.280
rendered just like if you didn't
choose one of these options.

51
00:03:23.280 --> 00:03:28.177
But you can export a const
called pre-render and

52
00:03:28.177 --> 00:03:33.075
say false, and
this will tell everything in your

53
00:03:33.075 --> 00:03:37.629
site except this page
to statically render.

54
00:03:37.629 --> 00:03:41.759
And that's really exciting because it
means that you can selectively opt-in to

55
00:03:41.759 --> 00:03:43.470
server rendering as you need it.

56
00:03:43.470 --> 00:03:47.947
So, this follows that same
mindset of partial hydration and

57
00:03:47.947 --> 00:03:50.595
only using code when you need code.

58
00:03:50.595 --> 00:03:52.660
It's the same general idea here.

59
00:03:52.660 --> 00:03:56.989
And I should clarify that
when you use the SSR mode,

60
00:03:56.989 --> 00:04:01.326
you are able to export
a const of prerender = true.

61
00:04:01.326 --> 00:04:06.242
But what I found when I started using it
is that when I'm in server mode, I end up

62
00:04:06.242 --> 00:04:11.699
exporting prerender = true on almost every
page in my project, except for one or two.

63
00:04:11.699 --> 00:04:15.044
So I really like hybrid mode where we
flip that, it's static by default and

64
00:04:15.044 --> 00:04:17.870
then I turn on server
rendering when I need it.

65
00:04:17.870 --> 00:04:21.825
So we are gonna use this static
pre rendering by default.

66
00:04:21.825 --> 00:04:27.170
To actually add this, we are going to add
this little block of config into our site.

67
00:04:27.170 --> 00:04:32.202
So I'm gonna open up
the Astro config here,

68
00:04:32.202 --> 00:04:37.098
and we're gonna add in this little block.

69
00:04:37.098 --> 00:04:45.230
So inside the config, I'm going to add
an output and mark that as hybrid.

70
00:04:45.230 --> 00:04:49.892
And then below that, we're gonna
turn on an experimental flag so

71
00:04:49.892 --> 00:04:52.109
that we can put hybrid output.

72
00:04:54.050 --> 00:04:56.810
Set as true.

73
00:04:56.810 --> 00:05:00.599
I'm not sure when this will be turned off,
but at some point in the future,

74
00:05:00.599 --> 00:05:04.387
I believe all you're gonna need is
the output hybrid for this feature or for

75
00:05:04.387 --> 00:05:05.910
this functionality to work.

76
00:05:07.000 --> 00:05:11.636
Now that we have changed this, actually
this is something I think is really cool

77
00:05:11.636 --> 00:05:15.513
about Astro is that it notices that
your configuration updated and

78
00:05:15.513 --> 00:05:16.981
it'll restart for you.

79
00:05:16.981 --> 00:05:21.782
This is a this is one of those tiny little
DX improvements that makes such a big

80
00:05:21.782 --> 00:05:23.050
difference.

81
00:05:23.050 --> 00:05:25.649
Because I don't know about y'all,
but I have spent so

82
00:05:25.649 --> 00:05:29.166
much time in my career refreshing
a page going, why isn't this working?

83
00:05:29.166 --> 00:05:30.900
And then I'll go back and I'll save it.

84
00:05:30.900 --> 00:05:32.889
I'll turn it off and I'll turn it back on,

85
00:05:32.889 --> 00:05:36.209
just to realize that I was either
refreshing the wrong environment, or

86
00:05:36.209 --> 00:05:39.552
that I needed to restart the dev server
to see that change get picked up.

87
00:05:39.552 --> 00:05:44.400
So little things that save those
very frustrating small moments.

88
00:05:46.190 --> 00:05:50.114
Now that we've got this running,
functionally nothing really changes,

89
00:05:50.114 --> 00:05:52.805
our site is still operating
as our site always did.

90
00:05:52.805 --> 00:05:55.985
These are all statically rendered pages,
but

91
00:05:55.985 --> 00:05:59.500
now we have an option to
add a server rendered page.

92
00:05:59.500 --> 00:06:04.050
So I'm gonna go into our pages folder,
create a new file and

93
00:06:04.050 --> 00:06:06.791
call this one newsletter.astro.

94
00:06:06.791 --> 00:06:11.103
And add some frontmatter like you do,

95
00:06:11.103 --> 00:06:15.821
get our layout from layouts/default,

96
00:06:15.821 --> 00:06:19.608
no page, we want page this time.

97
00:06:19.608 --> 00:06:27.580
And then we're also going to
export const prerender = false.

98
00:06:27.580 --> 00:06:30.571
And that's going to tell Astro that
this is a server rendered page.

99
00:06:32.588 --> 00:06:38.105
So then add in our layout, I think.

100
00:06:41.730 --> 00:06:45.490
I got the form,
I put the form into the workshop assets so

101
00:06:45.490 --> 00:06:48.775
that we don't have to
write a form from scratch.

102
00:06:48.775 --> 00:06:53.280
So we can grab that form,
we're going to first add in a heading.

103
00:06:53.280 --> 00:06:57.938
So an h1 with a class of heading and
we'll say,

104
00:06:57.938 --> 00:07:05.288
get the sandwich newsletter, and
then below, we'll paste in that form.

105
00:07:09.220 --> 00:07:12.271
And then we're also
gonna need some styles,

106
00:07:12.271 --> 00:07:17.268
so we can head up to our assets yet
again and grab those styles out of there.

107
00:07:22.070 --> 00:07:30.528
And now that we've done that,
we have, A functioning site.

108
00:07:30.528 --> 00:07:31.960
So we can go to our newsletter here.

109
00:07:31.960 --> 00:07:34.474
Did I forget to save this?

110
00:07:34.474 --> 00:07:35.360
What is going on?

111
00:07:36.784 --> 00:07:39.228
I know what's going on.

112
00:07:39.228 --> 00:07:43.195
There's a class that I'm gonna use later,
so

113
00:07:43.195 --> 00:07:49.510
make sure you add the newsletter visible
so that that is visible in there.

114
00:07:49.510 --> 00:07:54.182
So this is standard newsletter form,

115
00:07:54.182 --> 00:07:59.298
you can fill it out and you can subscribe.

116
00:07:59.298 --> 00:08:00.730
And so it submits.

117
00:08:00.730 --> 00:08:03.744
But something important happened here.

118
00:08:03.744 --> 00:08:07.110
So I have this set as method post, right?

119
00:08:07.110 --> 00:08:10.034
And if I didn't have
it set as method post,

120
00:08:10.034 --> 00:08:14.108
it would put the values from
the form into the query string.

121
00:08:14.108 --> 00:08:17.684
Because it would be submitted as a get
request, which would allow us to,

122
00:08:17.684 --> 00:08:20.280
grab it using JavaScript and
send it off somewhere.

123
00:08:20.280 --> 00:08:23.105
And that's a perfectly valid way
to handle some of these things.

124
00:08:23.105 --> 00:08:27.172
But putting somebody's email address in a
URL, maybe not the best idea in the world

125
00:08:27.172 --> 00:08:31.238
just because there are ways for people to
get out that, you don't really wanna leak

126
00:08:31.238 --> 00:08:35.320
people's emails, that can cause
you some problems as a business.

127
00:08:35.320 --> 00:08:39.794
So we're using the post, so that it
will submit to the page as the body of

128
00:08:39.794 --> 00:08:42.640
the request as opposed
to a query parameter.

129
00:08:42.640 --> 00:08:46.522
And the next thing we need to do is
actually do something with this.

130
00:08:46.522 --> 00:08:47.309
What's happening?

131
00:08:47.309 --> 00:08:49.560
How are we getting to this?

132
00:08:49.560 --> 00:08:54.673
And you just kind of don't have any
indication that anything has happened.

133
00:08:54.673 --> 00:08:58.810
So the next thing we need to
do is actually process this.

134
00:08:58.810 --> 00:09:02.718
So to handle a form submission,
we have a nice,

135
00:09:02.718 --> 00:09:09.389
I was actually very pleasantly surprised
by how pleasant or how nice this API is.

136
00:09:09.389 --> 00:09:11.742
So I get a message, and
the way that we're doing this just so

137
00:09:11.742 --> 00:09:14.530
everybody's clear on why I'm
creating a message here.

138
00:09:14.530 --> 00:09:19.440
I'm going to take the name and e-mail that
gets submitted, put them into a message,

139
00:09:19.440 --> 00:09:21.497
and then print those on the screen.

140
00:09:21.497 --> 00:09:24.700
And that's how we're gonna
handle the form submission.

141
00:09:24.700 --> 00:09:28.712
Again, we're not going to
set up a newsletter service.

142
00:09:28.712 --> 00:09:33.686
It's a lot of steps, you've got to
have accounts, I don't know that any

143
00:09:33.686 --> 00:09:38.193
of them have an easy free setup,
so that's more of an exercise for

144
00:09:38.193 --> 00:09:42.190
find their API Doc's and you would
submit to their API from this process.

145
00:09:42.190 --> 00:09:45.647
But for us, we're just gonna show
that the submission actually worked.

146
00:09:45.647 --> 00:09:50.433
So we're gonna grab that message and
then we can say if Astro

147
00:09:50.433 --> 00:09:54.836
request method, so
this is similar to astro.props,

148
00:09:54.836 --> 00:10:00.696
it's part of that global Astro object,
and I want to check if it is post.

149
00:10:00.696 --> 00:10:02.970
And if it's post, I get to do stuff.

150
00:10:02.970 --> 00:10:06.831
So I'm gonna try to do a few things, and

151
00:10:06.831 --> 00:10:11.863
if something goes wrong,
I will catch that error,

152
00:10:11.863 --> 00:10:17.377
and then we'll just log it,
so we can console.error.

153
00:10:17.377 --> 00:10:23.650
And so in here, what I wanna do is I wanna
get the data out of the Astro request.

154
00:10:23.650 --> 00:10:26.687
So I'm gonna get astro.request, and

155
00:10:26.687 --> 00:10:30.560
then we can use form data,
which is a browser API.

156
00:10:30.560 --> 00:10:34.106
So that's part of the request
object includes a body,

157
00:10:34.106 --> 00:10:37.220
you can get the form data from the body.

158
00:10:37.220 --> 00:10:44.631
And then I want the name,
which is data.get and the input name.

159
00:10:44.631 --> 00:10:48.970
So these names here
are the ones that we're using.

160
00:10:48.970 --> 00:10:55.211
So name, we get the name,
email, we get email.

161
00:10:55.211 --> 00:10:56.874
Great.

162
00:10:56.874 --> 00:11:01.874
Then this is where you
would save the user info to

163
00:11:01.874 --> 00:11:07.390
your newsletter service,
make this bigger again.

164
00:11:10.010 --> 00:11:17.144
And then down below,
we're just gonna update this message,

165
00:11:17.144 --> 00:11:21.808
so we're gonna say subscribed as well,

166
00:11:21.808 --> 00:11:25.940
we'll say the name with the email.

167
00:11:32.763 --> 00:11:33.749
Great.

168
00:11:33.749 --> 00:11:36.940
And then down here in the body itself,

169
00:11:36.940 --> 00:11:43.250
we're gonna add a new section between
the header and the form itself.

170
00:11:43.250 --> 00:11:49.390
And we're gonna use a little helper
that I like from Astro called ClassList.

171
00:11:49.390 --> 00:11:54.228
And so what ClassList does is
sometimes you have a value in your

172
00:11:54.228 --> 00:11:57.298
code that makes a class conditional and

173
00:11:57.298 --> 00:12:03.150
you end up writing these really just
kind of messy looking ternaries.

174
00:12:03.150 --> 00:12:05.763
Or you have to declare
your classes outside and

175
00:12:05.763 --> 00:12:07.976
then kind of pass them in as a variable.

176
00:12:07.976 --> 00:12:12.930
And Astro just was like,
don't bother this is fine.

177
00:12:12.930 --> 00:12:16.076
So instead, what you can do is
you can just set the class name.

178
00:12:16.076 --> 00:12:18.432
So in this case,
we want to a class of success.

179
00:12:18.432 --> 00:12:20.120
That one's always true.

180
00:12:20.120 --> 00:12:23.759
But then whether or not it's visible
is it gonna be dependent on whether or

181
00:12:23.759 --> 00:12:24.886
not we have a message.

182
00:12:24.886 --> 00:12:30.210
So we can say only add the visible
class if there's a message set.

183
00:12:30.210 --> 00:12:36.966
And then inside, we can set the message
itself and we'll just boop.

184
00:12:36.966 --> 00:12:41.773
And then we can add a link just
to the newsletter page itself.

185
00:12:41.773 --> 00:12:46.750
And this will get us out of
the post request and start over.

186
00:12:46.750 --> 00:12:48.760
So it's kinda like clearing everything.

187
00:12:50.740 --> 00:12:55.658
Then I'm also going to
update this newsletter here,

188
00:12:55.658 --> 00:12:59.609
and I'm gonna change this to a class list.

189
00:12:59.609 --> 00:13:04.326
And we're going to have
newsletter that's always on but

190
00:13:04.326 --> 00:13:09.940
then visible in this case Is dependent
on there not being a message.

191
00:13:09.940 --> 00:13:11.323
So just the opposite.

192
00:13:11.323 --> 00:13:14.720
So if the form has been submitted,
don't show the form, show the message.

193
00:13:14.720 --> 00:13:18.985
If there is no message, if it wasn't
a form submission, show the form.

194
00:13:18.985 --> 00:13:22.850
So a little bit of logic,
all rendered on the server.

195
00:13:22.850 --> 00:13:27.457
And then once we've done that, we save.

196
00:13:27.457 --> 00:13:32.198
Head back out to our browser, and
you can see because this was submitted,

197
00:13:32.198 --> 00:13:37.610
it actually picked up that post request
and is now showing us the details.

198
00:13:37.610 --> 00:13:42.538
And so, the next thing I wanna
do is I want to show that

199
00:13:42.538 --> 00:13:46.683
this does in fact work without JavaScript.

200
00:13:46.683 --> 00:13:50.674
So we're gonna disable JavaScript,
we're going to add one of these.

201
00:13:55.446 --> 00:13:57.078
And it still works, riight?

202
00:13:57.078 --> 00:14:01.480
And so this is like,
I get why people want server rendering.

203
00:14:01.480 --> 00:14:04.253
I feel like I've spent a lot of time
during this workshop saying you don't need

204
00:14:04.253 --> 00:14:05.777
server rendering, it's not important.

205
00:14:05.777 --> 00:14:06.921
That's not what I'm saying,

206
00:14:06.921 --> 00:14:09.600
there are a lot of good reasons
to include server rendering.

207
00:14:09.600 --> 00:14:12.205
I am not against server
rendering as a concept,

208
00:14:12.205 --> 00:14:14.689
I'm against server rendering as a default.

209
00:14:14.689 --> 00:14:17.635
I think that server rendering should
be opted into when you have an actual

210
00:14:17.635 --> 00:14:18.820
reason to use it.

211
00:14:18.820 --> 00:14:21.304
And at that point, it becomes incredible.

212
00:14:21.304 --> 00:14:25.880
I love that this just works with
JavaScript disabled amazing.

213
00:14:25.880 --> 00:14:28.449
Chef's kiss, love it, do it every time.

214
00:14:28.449 --> 00:14:31.420
However, nothing else on this
website needs to be server rendered.

215
00:14:31.420 --> 00:14:35.613
And therefore, I don't want to have
to opt in to server rendering for

216
00:14:35.613 --> 00:14:40.041
my entire project, just for
this one form that needs server rendering.

217
00:14:41.710 --> 00:14:45.892
So, before I forget cuz
that'll be confusing, later,

218
00:14:45.892 --> 00:14:48.602
I'm gonna re-enable JavaScript.

219
00:14:48.602 --> 00:14:51.507
And then when we click this,

220
00:14:51.507 --> 00:14:56.870
it's, I got a pop up of some sort, cancel.

221
00:14:56.870 --> 00:15:00.090
We were talking about you buy earlier.

222
00:15:00.090 --> 00:15:02.290
Yeah, that's a great reason
not to use your buy.

223
00:15:02.290 --> 00:15:06.715
Did you see that the alert got put under
the browser because the stack order

224
00:15:06.715 --> 00:15:07.721
got screwed up.

225
00:15:07.721 --> 00:15:10.600
So that's a fun,
that's a fun problem to get to solve.

226
00:15:10.600 --> 00:15:13.152
Where are you going?

227
00:15:13.152 --> 00:15:17.760
You come back, you came back,
and then you get out of there.

228
00:15:17.760 --> 00:15:18.575
All right, good.

229
00:15:18.575 --> 00:15:22.248
Okay, we're back to mostly normal here.

230
00:15:25.491 --> 00:15:30.269
Okay, so now what we've got, is we've
got a pre-rendered newsletter page and

231
00:15:30.269 --> 00:15:33.090
this whenever we submit it,
it's gonna work.

232
00:15:33.090 --> 00:15:37.511
I'll do it one more time
now with the JavaScript on.

233
00:15:39.210 --> 00:15:42.540
And same result,
it just posts to that page.

234
00:15:42.540 --> 00:15:45.811
And then when we're done,
we hit start over and we start over.

