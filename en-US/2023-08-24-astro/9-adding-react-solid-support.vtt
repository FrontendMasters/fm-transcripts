WEBVTT

1
00:00:00.071 --> 00:00:02.200
All that's left now is to actually
build out these components.

2
00:00:02.200 --> 00:00:05.808
So in order to do that,
we need to add support for

3
00:00:05.808 --> 00:00:09.430
building with both React and Solid.

4
00:00:09.430 --> 00:00:13.680
Now, I am doing this as
a demonstration of how this works.

5
00:00:13.680 --> 00:00:18.648
If you are building a net new Astro site,
then you probably don't want to

6
00:00:18.648 --> 00:00:23.128
introduce multiple frameworks
because using Astro to run a React

7
00:00:23.128 --> 00:00:27.710
component that you're hydrating,
you still have to load React.

8
00:00:27.710 --> 00:00:31.268
So you're gonna get that 30-something
kilobytes of Reacts booting script when

9
00:00:31.268 --> 00:00:33.570
you partially hydrate a component.

10
00:00:33.570 --> 00:00:36.161
So the same will be true for
Spelt, for Solid, for

11
00:00:36.161 --> 00:00:38.840
any of the other frameworks
that you would use.

12
00:00:38.840 --> 00:00:42.309
So if you can help it,
you probably don't want to do that.

13
00:00:42.309 --> 00:00:45.401
You probably wanna pick one and
stick with just the one for

14
00:00:45.401 --> 00:00:47.350
the sake of your bundle size.

15
00:00:47.350 --> 00:00:51.261
But why I think this is so cool and
why I think it's important to teach,

16
00:00:51.261 --> 00:00:51.989
is that, for

17
00:00:51.989 --> 00:00:56.582
many of us we're working on Teams where
the app isn't all built in one framework.

18
00:00:56.582 --> 00:01:01.948
When I was at IBM Cloud, for example,
early on, they didn't have enforcement for

19
00:01:01.948 --> 00:01:06.110
everyone must use this design system or
this specific tool.

20
00:01:06.110 --> 00:01:10.550
So some of the app was built in Vue and
some of the app was built in React.

21
00:01:10.550 --> 00:01:14.016
And later when they wanted
to merge things together,

22
00:01:14.016 --> 00:01:17.880
there wasn't really a clear
path forward on how to do that.

23
00:01:17.880 --> 00:01:23.760
And so they had to make a choice between
leave it as is or rebuild the entire app.

24
00:01:25.310 --> 00:01:27.565
Neither one of those is
really a good solution, but

25
00:01:27.565 --> 00:01:30.293
because we didn't have time to
halt all feature production,

26
00:01:30.293 --> 00:01:32.927
they just never got around to
actually rebuilding the app.

27
00:01:32.927 --> 00:01:37.830
There was this like slow chipping away
at it over a massive amount of time.

28
00:01:37.830 --> 00:01:42.133
What Astro allows is for you to make that
incremental change much more quickly

29
00:01:42.133 --> 00:01:46.171
because you can take those Vue components
and those React components and

30
00:01:46.171 --> 00:01:49.900
put them together in a way that
lets you build under one framework.

31
00:01:49.900 --> 00:01:53.431
And then as you have time, if you're gonna
update a component you can convert it

32
00:01:53.431 --> 00:01:56.850
from, if you're say you're
dropping React in favor of you.

33
00:01:56.850 --> 00:02:00.489
When you work on a React component,
just swap it over to Vue now drop it in.

34
00:02:00.489 --> 00:02:03.808
And then you're incrementally
adopting these features,

35
00:02:03.808 --> 00:02:07.735
as opposed to having to do a drop
everything and rebuild the whole app.

36
00:02:07.735 --> 00:02:12.437
It allows for, I think a more realistic
way of adopting new technology than then

37
00:02:12.437 --> 00:02:17.349
some of the guidance that we get, which is
yeah, just like allocate three months to

38
00:02:17.349 --> 00:02:20.885
drop everything and
build your whole app in our framework.

39
00:02:20.885 --> 00:02:24.660
It's not usually feasible,
right, unless you're Greenfield.

40
00:02:24.660 --> 00:02:27.783
And if you are Greenfield, you don't have
to make that choice, you can just choose

41
00:02:27.783 --> 00:02:31.090
your favorite component framework and
you're off to the races.

42
00:02:31.090 --> 00:02:37.734
So to do this, what we're gonna do is we
are going to open up the terminal and

43
00:02:37.734 --> 00:02:43.410
I'm going to install support for
Solid and React in Astro.

44
00:02:43.410 --> 00:02:44.955
Now here's the thing that's
really cool about this.

45
00:02:44.955 --> 00:02:49.163
What I had expected to do when I
first started working with Astro,

46
00:02:49.163 --> 00:02:52.757
is I thought I was gonna have
to npm install a plug in, and

47
00:02:52.757 --> 00:02:58.250
then I was gonna have to figure out how
to make my Solid and my React stuff work.

48
00:02:58.250 --> 00:03:01.360
And then also I was gonna have
to update some Astro config.

49
00:03:01.360 --> 00:03:05.592
But Astro knows how to run React and
Solid inside of Astro.

50
00:03:05.592 --> 00:03:09.844
So instead, they give us a CLI and
we just run npx astro add, and

51
00:03:09.844 --> 00:03:14.434
then we put in the name of the thing
we wanna use, so react and solid.

52
00:03:14.434 --> 00:03:17.412
And check this out, I love this.

53
00:03:17.412 --> 00:03:23.140
They know not only the Astro plugins, but
they also know the other things we need.

54
00:03:23.140 --> 00:03:24.960
We're gonna need the TypeScript types.

55
00:03:24.960 --> 00:03:26.770
We're gonna need React and ReactDOM.

56
00:03:26.770 --> 00:03:28.990
We're gonna need SolidJS.

57
00:03:28.990 --> 00:03:33.869
Those components or those
dependencies are part of the addition

58
00:03:33.869 --> 00:03:36.590
of this framework to your library.

59
00:03:36.590 --> 00:03:40.962
Now you don't have to do this if you have
a very specific version that you're pinned

60
00:03:40.962 --> 00:03:44.647
to or you have very specific preferences
about how this stuff is done,

61
00:03:44.647 --> 00:03:47.466
you are able to just opt out
of this by pressing n here.

62
00:03:47.466 --> 00:03:50.550
But I don't have this preferences,
I'm very happy to use the defaults.

63
00:03:50.550 --> 00:03:53.132
So I'm gonna let them install
those dependencies for me.

64
00:03:53.132 --> 00:03:55.250
And here's where this really gets magical.

65
00:03:56.890 --> 00:03:58.920
Now they show me my config file.

66
00:03:58.920 --> 00:04:01.810
And they say, can we update your config so
this just works?

67
00:04:01.810 --> 00:04:05.107
It's like, hey, yeah,
that's great, I love not typing.

68
00:04:07.787 --> 00:04:13.030
And then they give you options
on updating your tsconfig,

69
00:04:13.030 --> 00:04:17.020
and sure, that's fine, we can do this.

70
00:04:17.020 --> 00:04:24.455
Now what we're getting here is we get
the jsx and the jsxImportSource of React.

71
00:04:24.455 --> 00:04:31.259
I'm actually gonna change that
because I default to Solid.

72
00:04:31.259 --> 00:04:38.530
So I wanna open this up and
I wanna go into my tsconfig.

73
00:04:38.530 --> 00:04:45.981
And I'm going to change this to preserve
and I'm gonna change this one to solid.js.

74
00:04:48.158 --> 00:04:52.610
And honestly, it's up to you, if I was
going to continue building this site out,

75
00:04:52.610 --> 00:04:56.689
I would be defaulting to Solid components
as opposed to React components.

76
00:04:56.689 --> 00:05:01.130
So I'm gonna make it the default and
then explicitly override for React.

77
00:05:01.130 --> 00:05:04.627
If you want to do it the other way,
you're also welcome to do that.

78
00:05:04.627 --> 00:05:07.293
And the override I'll show
you as we get to it, so

79
00:05:07.293 --> 00:05:10.810
don't worry if I'm saying
words that don't make sense.

80
00:05:10.810 --> 00:05:13.305
All will be revealed in due time.

81
00:05:13.305 --> 00:05:19.341
So, we've got our, our tsconfig
set up here to run Solid stuff.

82
00:05:19.341 --> 00:05:23.940
And I'm gonna go ahead and start
building out the cart component first.

83
00:05:23.940 --> 00:05:25.649
So, we're gonna create a new file.

84
00:05:25.649 --> 00:05:29.416
This one's gonna use two files because
I'm using a Solid component and

85
00:05:29.416 --> 00:05:30.497
I need some styles.

86
00:05:30.497 --> 00:05:37.345
So the first thing that I'm gonna set up,
is I'm actually gonna set up my,

87
00:05:37.345 --> 00:05:42.060
styles and
that is going to be cart.module.css.

88
00:05:42.060 --> 00:05:46.967
And this is built into Astro, this is
something that I am also a huge fan of

89
00:05:46.967 --> 00:05:49.870
because it makes my life so much easier.

90
00:05:49.870 --> 00:05:55.030
So the power of this is
that I want scoped styles.

91
00:05:55.030 --> 00:06:01.119
I don't necessarily want to have to
install CSS and JS only for my components.

92
00:06:01.119 --> 00:06:04.820
And I can't use the single file style
approach of putting a style tag at

93
00:06:04.820 --> 00:06:08.870
the bottom of my Solid components
because that's not how Solid works.

94
00:06:08.870 --> 00:06:14.844
So instead I can use the CSS module spec,
which has the same general approach.

95
00:06:14.844 --> 00:06:17.710
It gives me scope styles per module.

96
00:06:17.710 --> 00:06:22.019
The API is a little bit different,
but I'm still just writing CSS.

97
00:06:22.019 --> 00:06:26.069
So I can go up into my Styles
from the workshop assets,

98
00:06:26.069 --> 00:06:29.582
grab this components, cart.module.css.

99
00:06:29.582 --> 00:06:32.676
Let's copy that and drop it in here.

100
00:06:32.676 --> 00:06:37.800
And this is standard CSS,
nothing magical happen in here.

101
00:06:39.010 --> 00:06:44.496
But then inside of my cart,
which we haven't created yet,

102
00:06:46.535 --> 00:06:51.544
Going to create a new
component in here and

103
00:06:51.544 --> 00:06:55.870
this is gonna be called cart.tsx.

104
00:06:55.870 --> 00:07:00.094
And this one is gonna have quite a bit of
imports because this is gonna be working

105
00:07:00.094 --> 00:07:03.230
with our store,
this is gonna be working with our styles.

106
00:07:03.230 --> 00:07:06.731
And it's gonna be working with
a little bit of Solid.js internals.

107
00:07:06.731 --> 00:07:12.090
If you've never used Solid, don't worry,
this is not about learning Solid.

108
00:07:14.120 --> 00:07:16.730
There are great resources
if you want to do that.

109
00:07:16.730 --> 00:07:22.730
I'm going to be kind of glossing over
the technical details of using Solid.

110
00:07:22.730 --> 00:07:26.395
But if you've used React,
a lot of this is gonna look familiar, so

111
00:07:26.395 --> 00:07:27.710
don't worry too much.

112
00:07:27.710 --> 00:07:30.540
Next, we're gonna get the pieces
we need out of our store.

113
00:07:30.540 --> 00:07:35.191
So we start with the cart,
then we wanna get

114
00:07:35.191 --> 00:07:40.370
removeItemFromCart and
we want the subtotal.

115
00:07:40.370 --> 00:07:46.205
And those are all gonna come
out of our stores cart.

116
00:07:46.205 --> 00:07:51.134
Then, I'm gonna get the styles that I

117
00:07:51.134 --> 00:07:56.073
just set up from cart.module.css.

118
00:07:56.073 --> 00:08:00.025
And finally,
some stuff that I need from Solid.

119
00:08:00.025 --> 00:08:04.965
I need the show component and
the createSignal.

120
00:08:04.965 --> 00:08:11.329
createSignal is similar to the way
that useState works in React.

121
00:08:11.329 --> 00:08:17.270
Same general idea, just a little
different, a little solid flavored.

122
00:08:19.450 --> 00:08:22.499
So then I've got that format currency,
I'm gonna need that again.

123
00:08:22.499 --> 00:08:26.547
So I'm actually just gonna go right
into the shop-items and copy it and

124
00:08:26.547 --> 00:08:28.090
then paste it.

125
00:08:28.090 --> 00:08:30.905
Again, I could have put this
into a utility file, but

126
00:08:30.905 --> 00:08:32.355
it's just not big enough.

127
00:08:32.355 --> 00:08:33.960
I don't mind duplicating this code

