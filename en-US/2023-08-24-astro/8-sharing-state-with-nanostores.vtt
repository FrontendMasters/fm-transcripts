WEBVTT

1
00:00:00.028 --> 00:00:01.988
We wanna make this thing actually work.

2
00:00:01.988 --> 00:00:04.100
And to make this actually work,

3
00:00:04.100 --> 00:00:07.943
we need a way to keep track of
the items that are in the cart.

4
00:00:07.943 --> 00:00:12.484
So in a standard web app you
would have the whole thing is

5
00:00:12.484 --> 00:00:15.066
gonna be built of components.

6
00:00:15.066 --> 00:00:19.260
All of those components are hydrated
as JavaScript, you're running a lot of

7
00:00:19.260 --> 00:00:23.778
JavaScript, so everything on the page is
powered by JavaScript and you'll have in

8
00:00:23.778 --> 00:00:27.926
React like a provider or in other
frameworks, a global store or something.

9
00:00:27.926 --> 00:00:31.913
And that becomes available to all the
components in a way that's sort of built

10
00:00:31.913 --> 00:00:33.028
into the framework.

11
00:00:33.028 --> 00:00:38.338
Now in Astro, because we're
individually hydrating these pieces,

12
00:00:38.338 --> 00:00:41.308
we can't put the store in a provider and

13
00:00:41.308 --> 00:00:46.802
then just grab out of the way you would
and react with a use X hook, right?

14
00:00:46.802 --> 00:00:52.162
So instead we have to figure out a way to
keep the store external to the components

15
00:00:52.162 --> 00:00:57.051
themselves, but still be usable and
updatable within the components.

16
00:00:57.051 --> 00:01:00.187
So that might sound I was very
intimidating to me when I first thought

17
00:01:00.187 --> 00:01:04.051
about this cuz I was like, there's no way
this is gonna be, this is gonna be a mess.

18
00:01:04.051 --> 00:01:07.219
This was honestly the first
part where I was like, well,

19
00:01:07.219 --> 00:01:09.868
this is where Astro is gonna fall down,
right?

20
00:01:09.868 --> 00:01:12.995
And then I got this wonderful,
wonderful demo.

21
00:01:12.995 --> 00:01:18.789
I'm not gonna show the demo, but
I'm going to give a link to the demo.

22
00:01:18.789 --> 00:01:24.813
Because it was absolutely wonderful.

23
00:01:24.813 --> 00:01:28.693
Aryan Deora came on Learn with Jason and

24
00:01:28.693 --> 00:01:35.644
did this demo of sharing state
between multiple frameworks in Astro.

25
00:01:35.644 --> 00:01:37.538
It's so good.

26
00:01:37.538 --> 00:01:41.366
If you wanna see a perfectly
executed demo, watch this.

27
00:01:41.366 --> 00:01:44.359
The TanStack team, Arian and

28
00:01:44.359 --> 00:01:49.155
then I had Dominic,
TK Dodo on the show as well.

29
00:01:49.155 --> 00:01:53.256
Absolutely outstanding, both times,
just incredible, incredible demos.

30
00:01:53.256 --> 00:01:57.566
Let me find Dominic's as well,
this one here.

31
00:01:57.566 --> 00:02:00.047
This is a team that makes wonderful demos.

32
00:02:00.047 --> 00:02:03.785
So good, good, good people to check out.

33
00:02:03.785 --> 00:02:07.700
And this particular demo
is where I realized, wait,

34
00:02:07.700 --> 00:02:13.624
Astro can actually do all these things
that I was really worried it couldn't do.

35
00:02:13.624 --> 00:02:18.938
So we're gonna use a riff on
what Aryan showed using a tool

36
00:02:18.938 --> 00:02:24.361
called Nano Stores to share
state between our solid cart and

37
00:02:24.361 --> 00:02:27.089
our React add to cart button.

38
00:02:27.089 --> 00:02:32.221
So to do that, we first, well,
let's talk a little bit about

39
00:02:32.221 --> 00:02:37.375
why Nano Stores because there
are a lot of things we could use.

40
00:02:37.375 --> 00:02:40.847
A lot of different state
management things are out there.

41
00:02:40.847 --> 00:02:42.397
We could try to put it in local storage.

42
00:02:42.397 --> 00:02:44.201
We could try to put it in session storage.

43
00:02:44.201 --> 00:02:46.475
We could store some, I mean,
maybe we could put it in cookies.

44
00:02:46.475 --> 00:02:48.164
Who knows?

45
00:02:48.164 --> 00:02:52.565
We Could reach for TanStack because the TanStack
Query is framework agnostic now.

46
00:02:52.565 --> 00:02:55.616
We could reach for
a handful of other tools that I've seen

47
00:02:55.616 --> 00:02:58.617
out there that are all very
good in different use cases.

48
00:02:58.617 --> 00:03:02.434
What I like about Nano Stores and the
reason that I'm reaching for it now, and

49
00:03:02.434 --> 00:03:05.737
let me pull up the page for it,
I guess while I'm talking about it.

50
00:03:05.737 --> 00:03:10.162
So, Nano Stores is 313 Bytes.

51
00:03:10.162 --> 00:03:15.497
It does exactly one thing,
and it does it very well,

52
00:03:15.497 --> 00:03:19.031
and it's intentionally simple.

53
00:03:19.031 --> 00:03:23.323
And for the use case that we have,
which is to keep track of one array,

54
00:03:23.323 --> 00:03:25.476
this is the right tool for the job.

55
00:03:25.476 --> 00:03:29.683
We don't need any of
the advanced query invalidation.

56
00:03:29.683 --> 00:03:33.525
We don't need syncing between states.

57
00:03:33.525 --> 00:03:35.563
There's nothing intense happening here.

58
00:03:35.563 --> 00:03:37.457
We just need a list, right?

59
00:03:37.457 --> 00:03:42.423
And for that, and for a lot of use cases,
really if you break down state to

60
00:03:42.423 --> 00:03:47.237
what it actually is, it's usually
just one value, a list of values.

61
00:03:47.237 --> 00:03:49.837
And a lot of times,
we don't need the extra features.

62
00:03:49.837 --> 00:03:54.541
So my general working decision
process here is I'll look and

63
00:03:54.541 --> 00:03:57.225
see, can I do this in Nano Stores?

64
00:03:57.225 --> 00:04:00.913
And if I find myself writing a lot of
custom code to make Nano Stores do it,

65
00:04:00.913 --> 00:04:02.612
I'll reach for TanStack Query.

66
00:04:02.612 --> 00:04:07.935
Because TanStack Query is great when you
need things like cache invalidation and

67
00:04:07.935 --> 00:04:11.469
query sharing and
all these really advanced pieces.

68
00:04:11.469 --> 00:04:14.916
The most of the state that I'm
creating does just doesn't do that,

69
00:04:14.916 --> 00:04:16.437
it's not really necessary.

70
00:04:16.437 --> 00:04:19.075
So again, choose the right tool for
the job and

71
00:04:19.075 --> 00:04:22.197
you're gonna have a lot less
maintenance to do later.

72
00:04:22.197 --> 00:04:24.813
So, Nano Stores is wonderful for this.

73
00:04:24.813 --> 00:04:30.075
It has its teeny tiny, it has
a really small API, and the only real

74
00:04:30.075 --> 00:04:36.007
trade off of using Nano Stores Is that
as part of not shipping a lot of code,

75
00:04:36.007 --> 00:04:41.869
they don't have things that might
seem intuitive like a delete option.

76
00:04:41.869 --> 00:04:44.379
You have to set a key to
undefined to delete it, right?

77
00:04:44.379 --> 00:04:46.655
So there's a little bit of like,
that was a weird choice.

78
00:04:46.655 --> 00:04:50.597
But when you think about it 313 bytes is,
you don't have a lot of room,

79
00:04:50.597 --> 00:04:54.807
you add a delete method and suddenly
your library's doubled in size, right?

80
00:04:54.807 --> 00:05:02.138
[LAUGH] So it's very much like
they chose sparseness over size.

81
00:05:02.138 --> 00:05:04.620
Which makes it a great decision for

82
00:05:04.620 --> 00:05:08.225
this very simple use case
that we are doing today.

83
00:05:08.225 --> 00:05:11.893
So to actually use it,
we're going to head over here and

84
00:05:11.893 --> 00:05:16.355
I'm gonna open up my terminal cuz
we're gonna install something.

85
00:05:16.355 --> 00:05:22.927
So I'm going to install NPM,
install Nano Stores.

86
00:05:22.927 --> 00:05:28.689
And then we're going to
need both the React and

87
00:05:28.689 --> 00:05:32.840
solid adopters for Nano Stores.

88
00:05:35.256 --> 00:05:40.379
And it didn't do something.

89
00:05:43.004 --> 00:05:44.216
I'm using the wrong version of node.

90
00:05:44.216 --> 00:05:47.302
I meant to be using 18.

91
00:05:47.302 --> 00:05:52.368
Okay, so now that I'm using node 18,
I installed Nano Stores.

92
00:05:52.368 --> 00:05:55.504
We've got the packages here and
they're available for us to use.

93
00:05:55.504 --> 00:05:59.645
And we are now able to create our store.

94
00:05:59.645 --> 00:06:00.620
So let me open this up.

95
00:06:00.620 --> 00:06:05.218
I'm gonna create a new folder
in here called stores.

96
00:06:05.218 --> 00:06:07.708
And then I'm gonna create a new file.

97
00:06:07.708 --> 00:06:10.792
And we're going to call it cart.ts.

98
00:06:10.792 --> 00:06:16.172
And the way that a cart works,
it's just a list.

99
00:06:16.172 --> 00:06:19.300
All we need is a list of the things
that are in our cart and

100
00:06:19.300 --> 00:06:22.093
a quantity of how many of
those things are there.

101
00:06:22.093 --> 00:06:26.520
So I'm gonna grab two pieces computed
which we're not gonna use just yet, we'll

102
00:06:26.520 --> 00:06:30.896
look at that in just a second, and map,
which is the thing that we need right now.

103
00:06:30.896 --> 00:06:36.422
So, Nano Stores has, I think,

104
00:06:36.422 --> 00:06:42.575
two or three baseline primitives.

105
00:06:42.575 --> 00:06:45.198
And the first one is an atom,
which is like a value,

106
00:06:45.198 --> 00:06:47.150
like what you would do with useState.

107
00:06:47.150 --> 00:06:53.017
So you set an atom to a value of 0 and
that's your counter, right?

108
00:06:53.017 --> 00:06:56.513
And then you can also use a map.

109
00:06:56.513 --> 00:07:01.712
And a map is an object more or less.

110
00:07:01.712 --> 00:07:03.465
That's really kind of the whole thing.

111
00:07:03.465 --> 00:07:07.796
They've got an option for a deep map
if you wanna do a little bit more, but

112
00:07:07.796 --> 00:07:12.411
through the vast majority of use cases
I've run into you can get away with a map

113
00:07:12.411 --> 00:07:15.041
or an atom, and that's about all you need.

114
00:07:15.041 --> 00:07:19.271
So we're going to set up our cart.

115
00:07:19.271 --> 00:07:23.848
So we're gonna export a const called cart
and that is going to actually Nano Stores 

116
00:07:23.848 --> 00:07:27.819
started prefixing everything with $ sign,
so we're gonna do that so

117
00:07:27.819 --> 00:07:31.479
keep with if you look at their
docs you'll see that everywhere.

118
00:07:31.479 --> 00:07:35.544
And then we're gonna set up
a map with an empty object.

119
00:07:35.544 --> 00:07:39.766
Now, I want auto-complete, so I'm gonna
write some really gnarly typescript.

120
00:07:39.766 --> 00:07:44.641
Feel free to just skip this,
you can just write any here if you want.

121
00:07:44.641 --> 00:07:49.379
But I'm gonna set this up as a record, and
then inside of it, the key is a number,

122
00:07:49.379 --> 00:07:53.249
and a cart item, which is defined already,
is available there.

123
00:07:58.109 --> 00:07:59.017
What did I do?

124
00:07:59.017 --> 00:08:01.199
I'm missing a closing bracket,
there we go.

125
00:08:01.199 --> 00:08:06.512
Okay, so what we're saying here is that
our map consists of a record that includes

126
00:08:06.512 --> 00:08:11.453
a number as a key and a cart item as
a value and that'll give us autocomplete.

127
00:08:11.453 --> 00:08:15.739
The reason I'm using a number as a key
is that the cart items that we have

128
00:08:15.739 --> 00:08:19.970
are coming in with a numeric ID,
just starting at zero and counting.

129
00:08:19.970 --> 00:08:21.797
And that's it.

130
00:08:21.797 --> 00:08:23.056
That's the whole store.

131
00:08:23.056 --> 00:08:25.255
We'll be able to function from there.

132
00:08:25.255 --> 00:08:28.951
So, to add items to the cart,
we could define this elsewhere, but

133
00:08:28.951 --> 00:08:31.987
we're just gonna put it all on this file,
and make it so

134
00:08:31.987 --> 00:08:34.642
that we're exporting
utilities right there.

135
00:08:34.642 --> 00:08:39.641
So, I'm going to export a function
called addItemToCart,

136
00:08:39.641 --> 00:08:44.360
and this is going to accept an item,
which is a shop item.

137
00:08:44.360 --> 00:08:49.970
And that's gonna be coming outta the API,
so that we've got the ability to,

138
00:08:49.970 --> 00:08:55.403
again, we just want auto complete to work,
so, I want a cart item const and

139
00:08:55.403 --> 00:08:59.405
that is going to be,
we're gonna use the cart itself.

140
00:08:59.405 --> 00:09:03.485
And we're gonna try to
get our current item, so

141
00:09:03.485 --> 00:09:07.983
we're checking if that item
is already in our cart.

142
00:09:07.983 --> 00:09:11.530
And I need to add my dollar
sign because I did that.

143
00:09:11.530 --> 00:09:16.464
So we're checking the store to see if
we already have this particular item in

144
00:09:16.464 --> 00:09:17.166
the cart.

145
00:09:17.166 --> 00:09:20.207
And the reason we're doing that
is because if we already have it,

146
00:09:20.207 --> 00:09:23.045
we don't wanna add it again,
we wanna update its quantity.

147
00:09:23.045 --> 00:09:26.272
Next, we're gonna set
the quantity of items.

148
00:09:26.272 --> 00:09:30.251
And we do that by checking to
see if our cart item exists.

149
00:09:30.251 --> 00:09:35.721
If so, we're gonna say the quantity
is the existing quantity,

150
00:09:35.721 --> 00:09:38.568
otherwise, we'll set it to 0.

151
00:09:38.568 --> 00:09:44.823
Then we're going to run $cart.setKey and

152
00:09:44.823 --> 00:09:49.870
we pass in our item.id as the key.

153
00:09:49.870 --> 00:09:53.843
And then it's gonna let
us auto complete here.

154
00:09:53.843 --> 00:09:54.450
Or it's not.

155
00:09:54.450 --> 00:09:56.315
We're gonna set an item.

156
00:09:56.315 --> 00:10:02.530
And then we're gonna set in the quantity
to be the existing quantity plus one.

157
00:10:02.530 --> 00:10:07.633
So, this way, we have either a new item

158
00:10:07.633 --> 00:10:12.438
gets added with the quantity of one.

159
00:10:12.438 --> 00:10:17.518
Or we override the original item
that has the the key of the item

160
00:10:17.518 --> 00:10:23.196
ID with a new quantity of whatever
the original quantity is plus one.

161
00:10:23.196 --> 00:10:28.183
So as we add, we're saying, give me one,
give me one more, give me one more,

162
00:10:28.183 --> 00:10:33.171
and we're not ending up with a list on the
side of like the same product a bunch of

163
00:10:33.171 --> 00:10:33.721
times.

164
00:10:33.721 --> 00:10:38.140
And that is the whole
function to add item to cart.

165
00:10:38.140 --> 00:10:40.137
And then we wanna do the same thing for
removing.

166
00:10:40.137 --> 00:10:46.622
So we're gonna export a function
called removeItemFromCart.

167
00:10:46.622 --> 00:10:49.676
And that one is going to get
just an item ID is all we need.

168
00:10:49.676 --> 00:10:57.230
So that's a number and then we're
going to tell it to ts ignore it.

169
00:10:57.230 --> 00:11:00.311
Because we're going to set
the value to undefined and

170
00:11:00.311 --> 00:11:04.626
rather than wrestle with this record
to not yell when I set it to undefined,

171
00:11:04.626 --> 00:11:08.478
we're just gonna, we know that
we're deleting the key, right?

172
00:11:08.478 --> 00:11:14.249
So I'm going to cart, nope, right,
there's a dollar sign cart,

173
00:11:14.249 --> 00:11:18.620
set key, and
then we set the item ID and undefined.

174
00:11:18.620 --> 00:11:21.953
And that will remove
that item from the cart,

175
00:11:21.953 --> 00:11:25.996
allowing us to now add and
remove things from our cart.

176
00:11:29.275 --> 00:11:32.631
Okay, so
what else would we need in a cart?

177
00:11:32.631 --> 00:11:36.059
The only other thing that we'll need
in this particular case is going to be

178
00:11:36.059 --> 00:11:36.682
a subtotal.

179
00:11:36.682 --> 00:11:42.203
We wanna compute how much the items add
up to in your cart for total price.

180
00:11:42.203 --> 00:11:46.999
So we will export
something called subtotal.

181
00:11:46.999 --> 00:11:51.579
And this is where we're gonna
use that computed thing.

182
00:11:51.579 --> 00:11:55.943
So what computed means is we're going
to compute an additional store based on

183
00:11:55.943 --> 00:11:57.763
the value of a different store.

184
00:11:57.763 --> 00:12:03.620
And in our case,
what we wanna do is take the cart and

185
00:12:03.620 --> 00:12:09.215
based on its values,
we want to give a new value.

186
00:12:09.215 --> 00:12:13.541
We're coming up with something
derived from the $cart store.

187
00:12:13.541 --> 00:12:18.419
And the way this works is we say computed
then we pass in the store that we want to

188
00:12:18.419 --> 00:12:20.162
use as the trigger source.

189
00:12:20.162 --> 00:12:24.495
So whenever the cart changes,
we want this subtotal to recalculate.

190
00:12:24.495 --> 00:12:26.590
That's how we're identifying this here.

191
00:12:26.590 --> 00:12:28.657
So we take the cart and
then we get the entry.

192
00:12:28.657 --> 00:12:32.988
So whatever's in the cart right now or
in the store right now,

193
00:12:32.988 --> 00:12:34.747
we can then do some math.

194
00:12:34.747 --> 00:12:38.847
So we're gonna take our subtotal,
start it at 0, and

195
00:12:38.847 --> 00:12:42.786
then I'm going to get
the values out of our entries.

196
00:12:42.786 --> 00:12:45.372
So because it's an object, right?

197
00:12:45.372 --> 00:12:48.560
We've got the ID and then the items,
but I wanna loop over it.

198
00:12:48.560 --> 00:12:51.749
So I'm just gonna get the values,
which just gives me my list of items.

199
00:12:51.749 --> 00:12:58.384
So I'm gonna get my entries and
then for each, I'm gonna get an entry.

200
00:12:58.384 --> 00:13:02.156
And I want to make sure it exists.

201
00:13:02.156 --> 00:13:04.649
So if it's not there,
we can bail on it and

202
00:13:04.649 --> 00:13:07.441
just return, we'll skip that one entirely.

203
00:13:07.441 --> 00:13:12.895
Otherwise, we're going to increment

204
00:13:12.895 --> 00:13:17.687
the subtotal by the entry quantity

205
00:13:17.687 --> 00:13:22.817
multiplied by the entry item price.

206
00:13:22.817 --> 00:13:25.814
And so this is rough math,
we're not calculating taxes,

207
00:13:25.814 --> 00:13:27.355
we're not doing discounts.

208
00:13:27.355 --> 00:13:30.435
So there's a lot more
complexity that can and

209
00:13:30.435 --> 00:13:33.363
probably will in a high traffic web store.

210
00:13:33.363 --> 00:13:38.149
But for the defaults, if you just
wanna get something off the ground,

211
00:13:38.149 --> 00:13:39.702
this is pretty great.

212
00:13:39.702 --> 00:13:43.747
As far as simplicity goes, and then at the
end, we just wanna return that subtotal.

213
00:13:43.747 --> 00:13:48.058
And so now,
we have the ability to get our cart.

214
00:13:48.058 --> 00:13:51.215
We can add an item to it,
we can remove an item to it, and

215
00:13:51.215 --> 00:13:54.393
we can figure out how much
the total cost of the cart is.

216
00:13:54.393 --> 00:13:57.951
And that is all the dynamic functionality
that we should need in terms of

217
00:13:57.951 --> 00:13:59.386
interacting with our cart.

