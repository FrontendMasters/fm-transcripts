WEBVTT

1
00:00:00.090 --> 00:00:05.290
Let's make this bigger again, and
we're going to create a new file.

2
00:00:05.290 --> 00:00:07.840
And this time it's gonna
live inside of a directory.

3
00:00:07.840 --> 00:00:10.506
So it's gonna be in the blog directory.

4
00:00:10.506 --> 00:00:15.785
And then to determine or to make something
parameterized we can use square brackets.

5
00:00:15.785 --> 00:00:20.285
And I'm just gonna grab anything and
turn it into .astro.

6
00:00:20.285 --> 00:00:28.976
So the file name is [...slug].astro.

7
00:00:28.976 --> 00:00:32.530
And that is the the dynamic path segment.

8
00:00:32.530 --> 00:00:38.119
So we are gonna visit this at
/blog/ whatever the thing is.

9
00:00:38.119 --> 00:00:41.628
And that gets us to the front matter.

10
00:00:41.628 --> 00:00:44.818
So we're gonna start in here,
we're going to, again,

11
00:00:44.818 --> 00:00:47.155
import that getCollection out of astro.

12
00:00:50.121 --> 00:00:52.390
And then we're gonna
import our layout again.

13
00:00:52.390 --> 00:00:55.910
And I probably could have copy pasted
this part but that's all right.

14
00:00:55.910 --> 00:00:58.310
So this time we are a little bit deeper.

15
00:00:58.310 --> 00:01:03.226
So we're gonna go up two levels and
get the page.

16
00:01:03.226 --> 00:01:08.984
Then, we're gonna export
an async function.

17
00:01:08.984 --> 00:01:12.321
And that async function is going
to be called getStaticPaths.

18
00:01:14.767 --> 00:01:22.459
And what we need to return from
getStaticPaths is an array.

19
00:01:22.459 --> 00:01:26.301
And that array includes
objects with params.

20
00:01:26.301 --> 00:01:29.670
And the params would be
they need to match this,

21
00:01:29.670 --> 00:01:34.062
so we would need a slug and
that's gonna need to be something.

22
00:01:34.062 --> 00:01:37.710
And we're also gonna send back
props which are optional.

23
00:01:37.710 --> 00:01:40.710
But that is an object if
we do decide to send it.

24
00:01:40.710 --> 00:01:45.432
So our job here is to get the blog posts
and turn them into an array of these

25
00:01:45.432 --> 00:01:49.530
objects that have the params and
props that we need.

26
00:01:49.530 --> 00:01:54.542
So up at the top of getStaticPaths,
we're going to grab our

27
00:01:54.542 --> 00:01:59.968
blog posts again in the same way
that we did on the blog homepage.

28
00:01:59.968 --> 00:02:02.187
Grab that blog, okay?

29
00:02:02.187 --> 00:02:07.024
And then here,
instead of just hard coding an array,

30
00:02:07.024 --> 00:02:11.331
we're gonna blogPosts.map and
get the post.

31
00:02:13.262 --> 00:02:18.880
And we're gonna return from each one,
our params and our props.

32
00:02:20.140 --> 00:02:23.180
And I'm gonna get rid of this part so
that it stops yelling at me.

33
00:02:23.180 --> 00:02:26.598
So our params are gonna be an object and
our props are gonna be an object.

34
00:02:26.598 --> 00:02:31.101
And inside of our params
we want the slug so

35
00:02:31.101 --> 00:02:35.560
we can get the post.data.slug.

36
00:02:35.560 --> 00:02:40.320
And for the props,
I can just pass through the whole post.

37
00:02:40.320 --> 00:02:44.243
So now I don't need to individually
load each post because I already loaded

38
00:02:44.243 --> 00:02:45.380
the whole list.

39
00:02:45.380 --> 00:02:50.197
So I can just pass it on down and then
have it available as a prop already when

40
00:02:50.197 --> 00:02:53.480
I'm starting to work with the code itself.

41
00:02:53.480 --> 00:02:56.501
And that means that right here, and this
is the only part that gets a little bit

42
00:02:56.501 --> 00:02:58.730
confusing if you've
never seen this before.

43
00:02:58.730 --> 00:03:02.930
Because we're exporting this,
that means that the props are available.

44
00:03:02.930 --> 00:03:09.095
So right here I can use that
post out of Astro.props.

45
00:03:09.095 --> 00:03:13.626
So this is being fed into Astro.props and
I have it here.

46
00:03:15.617 --> 00:03:20.597
So then I can get the content,
because the only thing I don't get out of

47
00:03:20.597 --> 00:03:24.490
the front matter is
the actual page content.

48
00:03:24.490 --> 00:03:28.781
And the way that Astro handles
that is they give us the post and

49
00:03:28.781 --> 00:03:33.589
a render method, which will give
us the ability to render this out.

50
00:03:34.680 --> 00:03:38.420
I'm not gonna worry about the fact
that this is typed as any.

51
00:03:38.420 --> 00:03:43.940
If you want to, you can import some
special types that will set the prompts to

52
00:03:43.940 --> 00:03:50.360
be the content collection posts and then
you'll get the autocomplete and stuff.

53
00:03:50.360 --> 00:03:54.483
I'm not super worried about it.

54
00:03:54.483 --> 00:03:56.808
I'm close enough to this
one that I don't care.

55
00:03:56.808 --> 00:03:59.520
I would probably change it otherwise.

56
00:03:59.520 --> 00:04:02.615
And I also just realized
that I made an error.

57
00:04:02.615 --> 00:04:07.420
The slug is part of the front matter but
it's a special part of Astro.

58
00:04:07.420 --> 00:04:11.875
So it's slug is post.slug,
it gets hoisted outside of the data.

59
00:04:11.875 --> 00:04:15.907
Because that is a specific piece that
is added for a lot of reasons that

60
00:04:15.907 --> 00:04:20.630
are outside of front matter, we need
it for different functional things.

61
00:04:20.630 --> 00:04:23.560
So they give that right at the top level.

62
00:04:25.950 --> 00:04:30.340
So now that we've got that,
we can start building out our layout.

63
00:04:30.340 --> 00:04:33.270
So as usual,
we wrap the whole thing with a layout.

64
00:04:33.270 --> 00:04:38.925
Let's get the post.data.title.

65
00:04:45.244 --> 00:04:49.799
And then underneath that, in fact,
I'm just gonna copy paste this part out.

66
00:04:49.799 --> 00:04:54.740
This time section here,
cuz it's exactly the same.

67
00:04:55.770 --> 00:04:57.760
So we can drop that in here.

68
00:04:57.760 --> 00:04:59.860
And then I want to show the content.

69
00:05:01.320 --> 00:05:04.270
And I'm not worrying too much
about the overall formatting here.

70
00:05:04.270 --> 00:05:06.310
I'm not showing the post author.

71
00:05:06.310 --> 00:05:08.810
I'm not gonna add a lot of
additional markup here.

72
00:05:08.810 --> 00:05:11.686
That's not really the goal
of what we're after.

73
00:05:11.686 --> 00:05:15.278
I just wanna show how you would get
one of these displayed on page.

74
00:05:18.669 --> 00:05:23.630
And if we reload, a-oh, we got pages.

75
00:05:23.630 --> 00:05:26.379
And if I head back, hit one of these.

76
00:05:27.580 --> 00:05:30.520
And there it goes, and if we add
another one, that'll show up as well.

77
00:05:30.520 --> 00:05:33.230
So it is very straightforward.

78
00:05:34.520 --> 00:05:38.530
And what I like about it is that
it brings in familiar things.

79
00:05:38.530 --> 00:05:42.760
This getStaticPaths is pretty
well-won territory at this point.

80
00:05:42.760 --> 00:05:49.120
Most of the frameworks that have a static
export option do give this general API.

81
00:05:50.430 --> 00:05:55.087
So it's something that you've potentially
used before if you've built with modern

82
00:05:55.087 --> 00:05:56.387
front end frameworks.

83
00:05:56.387 --> 00:06:00.410
And it gives you all the power that
you need to do quite a bit here.

84
00:06:00.410 --> 00:06:02.490
And again, we could do a lot more, right?

85
00:06:02.490 --> 00:06:04.150
We could pre-process this object.

86
00:06:04.150 --> 00:06:07.200
We could make an additional
call out to a third party.

87
00:06:07.200 --> 00:06:08.690
We could try to find related posts.

88
00:06:08.690 --> 00:06:09.840
We could do a bunch of stuff.

89
00:06:09.840 --> 00:06:14.563
Do keep in mind though, one of the things
that gets a little tricky as you start

90
00:06:14.563 --> 00:06:18.579
building these things out is that
this is executed at build time.

91
00:06:18.579 --> 00:06:22.115
So typically what you wanna do is you
wanna minimize the number of API calls

92
00:06:22.115 --> 00:06:23.207
that you're making.

93
00:06:23.207 --> 00:06:27.380
So something like getting
the entire blog collection is good.

94
00:06:27.380 --> 00:06:29.622
Because it's one call,
you load all the data, and

95
00:06:29.622 --> 00:06:32.010
then you can loop over that data and
do things.

96
00:06:32.010 --> 00:06:35.670
If you have hundreds of thousands of
posts, maybe it's not as good, right?

97
00:06:35.670 --> 00:06:39.011
And then you might wanna do something like
just get the first hundred, and then use

98
00:06:39.011 --> 00:06:42.370
dynamic rendering to get the older posts
that don't get as much traffic, right?

99
00:06:42.370 --> 00:06:46.281
So there are some strategies that you
wanna keep in mind as you're using

100
00:06:46.281 --> 00:06:48.900
something that builds
statically by default.

101
00:06:48.900 --> 00:06:54.020
That in a dynamic environment,
you can just ignore.

102
00:06:54.020 --> 00:06:56.890
But you pay the price by having
to maintain your servers.

103
00:06:56.890 --> 00:07:01.350
If you wanna do it on a static build,
you can't ignore it, but it'll get slow.

104
00:07:01.350 --> 00:07:05.035
And so as you start to get to
really high numbers of things, or

105
00:07:05.035 --> 00:07:09.086
really slow queries, like if you're
doing a really intense query

106
00:07:09.086 --> 00:07:13.569
to go through multiple layers of your
API and figure out related posts, or

107
00:07:13.569 --> 00:07:18.343
similarity rankings, or something that
takes a lot of computer processing,

108
00:07:18.343 --> 00:07:22.620
you might wanna start thinking about
how exactly does that get done?

109
00:07:22.620 --> 00:07:26.270
And how are you caching those calls if
the data doesn't change, and so on and so

110
00:07:26.270 --> 00:07:28.260
forth, so that your builds stay fast.

111
00:07:28.260 --> 00:07:33.125
Because one of the major assets here is
because Astro is built the way that it's

112
00:07:33.125 --> 00:07:37.618
built, it's powered by V, the builds
are very, very fast, a second or

113
00:07:37.618 --> 00:07:39.420
less out of the box.

114
00:07:39.420 --> 00:07:43.127
And that means that if we don't
add things to make it slow,

115
00:07:43.127 --> 00:07:47.450
we will be able to publish something
to production in a few seconds.

116
00:07:48.650 --> 00:07:50.610
And that's really really powerful, right?

117
00:07:50.610 --> 00:07:54.254
So you don't wanna break that as you start
getting into more and more complex builds,

118
00:07:54.254 --> 00:07:55.740
question?

119
00:07:55.740 --> 00:07:58.935
&gt;&gt; You don't have to go into this
if it's gonna be too long, but

120
00:07:58.935 --> 00:08:03.230
is there any sort of ISR capabilities for
Astro if you wanted to do it that way?

121
00:08:03.230 --> 00:08:06.364
&gt;&gt; Yes, but
not built in the way it is in next.

122
00:08:06.364 --> 00:08:08.480
So-
&gt;&gt; Just put it behind a CDN.

123
00:08:08.480 --> 00:08:13.405
&gt;&gt; Yeah, what you would is you would
wanna say, put Astro into hybrid mode or

124
00:08:13.405 --> 00:08:17.630
server mode so that the pages
themselves are making a request.

125
00:08:17.630 --> 00:08:21.904
And then you would use a cached
API call with a timeout on it.

126
00:08:21.904 --> 00:08:26.128
It's not like Astro doesn't have a TTL
built into it where you can just say,

127
00:08:26.128 --> 00:08:28.977
I want this page to render
once every five minutes.

128
00:08:28.977 --> 00:08:32.670
But building that with Netlify,
for example,

129
00:08:32.670 --> 00:08:35.910
you can just set a cache
expiry on the API.

130
00:08:35.910 --> 00:08:39.980
It's hitting and
it'll get the same general outcome.

131
00:08:39.980 --> 00:08:41.320
But yeah, not built in.

132
00:08:42.460 --> 00:08:46.140
Probably the biggest thing is
the content is a little bit different.

133
00:08:46.140 --> 00:08:51.036
This is something that what we're
effectively doing here is we're saying

134
00:08:51.036 --> 00:08:52.824
take this markdown file and

135
00:08:52.824 --> 00:08:56.800
render the content of the markdown
into an astro component.

136
00:08:57.960 --> 00:09:01.680
And then we use that Astro component
in the contents of the file.

137
00:09:01.680 --> 00:09:06.210
So the the functional outcome is it just
takes the Markdown and turns it into HTML.

138
00:09:06.210 --> 00:09:10.510
But it's important to note that this is
not HTML, this is an Astro component.

139
00:09:10.510 --> 00:09:13.120
And that's gonna be important
when we talk about the RSS later.

