WEBVTT

1
00:00:00.280 --> 00:00:04.110
We want to actually use this thing.

2
00:00:04.110 --> 00:00:06.100
Let's get these showing up.

3
00:00:06.100 --> 00:00:10.409
So I'm going to go back into shop.astro,

4
00:00:13.332 --> 00:00:17.434
And we're gonna import that Cart.

5
00:00:17.434 --> 00:00:21.859
And now I did it as a named export out
of habit, I don't do default exports.

6
00:00:23.280 --> 00:00:26.010
So that's a preference, not a rule.

7
00:00:26.010 --> 00:00:29.520
And I'm gonna grab that components and
shop.

8
00:00:29.520 --> 00:00:34.049
Nope, cart is the one that we want.

9
00:00:34.049 --> 00:00:38.755
And then I'm gonna
replace this with a Cart.

10
00:00:41.934 --> 00:00:46.410
Okay, so this looks like it's working.

11
00:00:46.410 --> 00:00:49.790
But it's not yet
because we rendered this statically.

12
00:00:49.790 --> 00:00:54.139
So this is maybe the biggest
gotta get used to it

13
00:00:54.139 --> 00:00:59.057
of Astro is that by default
nothing is interactive.

14
00:00:59.057 --> 00:01:03.032
So even though we've built this
interactive component, by default,

15
00:01:03.032 --> 00:01:06.090
it's going to render whatever
its standard state is.

16
00:01:06.090 --> 00:01:08.963
And then when we click buttons and
stuff, it won't do anything.

17
00:01:08.963 --> 00:01:14.278
So to make this actually work,
we're going to set it to client:only.

18
00:01:14.278 --> 00:01:16.328
And then because we're
using multiple frameworks,

19
00:01:16.328 --> 00:01:17.930
we have to tell it which one we're using.

20
00:01:19.150 --> 00:01:22.160
So we're saying client:only solid-js.

21
00:01:22.160 --> 00:01:23.460
And now this is hydrated.

22
00:01:23.460 --> 00:01:26.259
This is actually a running
JavaScript component.

23
00:01:27.590 --> 00:01:32.321
So the next thing we wanna do here
is figure out a way to actually put

24
00:01:32.321 --> 00:01:34.910
some things into the cart.

25
00:01:34.910 --> 00:01:38.840
So we're gonna create a new component,
and this one's gonna be built in React.

26
00:01:38.840 --> 00:01:44.350
So we are going to say, add-to-cart.tsx.

27
00:01:44.350 --> 00:01:47.770
And this one is powered by React.

28
00:01:47.770 --> 00:01:53.182
So we're gonna override
the the TSConfig by putting

29
00:01:53.182 --> 00:01:59.120
in our own jsxImportSource and
configuring to React.

30
00:01:59.120 --> 00:02:03.183
And that'll allow us to, Autocomplete
is gonna work the way we expect,

31
00:02:03.183 --> 00:02:07.320
it's not gonna say you can't use class or
className or things like that.

32
00:02:07.320 --> 00:02:09.612
That's why this stuff is worth setting up.

33
00:02:09.612 --> 00:02:12.877
And one of the reasons
that I do like TypeScript

34
00:02:12.877 --> 00:02:16.069
is that you can get those
more useful errors.

35
00:02:16.069 --> 00:02:21.235
So next we want that
addItemToCart out of the store.

36
00:02:21.235 --> 00:02:25.903
And then we can export
a const called AddToCart and

37
00:02:25.903 --> 00:02:30.793
that one is going to return an item,
or it's going to

38
00:02:30.793 --> 00:02:36.256
accept an item as a prop, and
that item will be a ShopItem.

39
00:02:36.256 --> 00:02:43.015
So that is coming out of our
types that we already declared.

40
00:02:43.015 --> 00:02:45.970
Okay, let me make this bigger so
that it's not hidden.

41
00:02:47.960 --> 00:02:51.360
So inside, we get a nice simple component.

42
00:02:51.360 --> 00:02:54.750
I'm always thrilled when I get
to write a component like this.

43
00:02:54.750 --> 00:02:58.490
So this is a button and
it includes a className.

44
00:02:58.490 --> 00:03:00.400
We're back in React land.

45
00:03:00.400 --> 00:03:03.642
So we're gonna use that
big-link class again.

46
00:03:03.642 --> 00:03:12.192
onClick, and inside of our onClick
I'm going to addItemToCart and

47
00:03:12.192 --> 00:03:17.143
pass in the item, and then Add To Cart.

48
00:03:17.143 --> 00:03:20.623
And that's the whole thing, very,
very simple React component,

49
00:03:20.623 --> 00:03:23.627
probably not worth bringing
in the entire React library.

50
00:03:23.627 --> 00:03:26.270
But again, this is for
demonstration purposes.

51
00:03:26.270 --> 00:03:30.040
So back in our shop-items,

52
00:03:30.040 --> 00:03:34.908
where we have that TODO for the cart,

53
00:03:34.908 --> 00:03:42.180
we want to replace this
with our React component.

54
00:03:42.180 --> 00:03:46.694
So up at the top here we can import,

55
00:03:46.694 --> 00:03:53.640
AddToCart from components and add-to-cart.

56
00:03:53.640 --> 00:04:00.245
And then down here we are going
to replace this chunk of code,

57
00:04:00.245 --> 00:04:06.060
this TODO item with our
AddToCart component.

58
00:04:06.060 --> 00:04:11.230
We're gonna pass in the item from Astro.

59
00:04:11.230 --> 00:04:16.400
So the same item that we have here can be
passed into the React component as a prop.

60
00:04:16.400 --> 00:04:19.460
So no magic or
anything necessary for that.

61
00:04:19.460 --> 00:04:21.870
And then we need to set
it to be client:only.

62
00:04:21.870 --> 00:04:24.460
And I'm not gonna use anything
other than the client:only.

63
00:04:24.460 --> 00:04:26.238
So let me talk about these for
a quick second.

64
00:04:26.238 --> 00:04:32.050
So, by default,
you don't get any client interaction.

65
00:04:32.050 --> 00:04:38.483
Astro lets you selectively hydrate
using any of these attributes here.

66
00:04:38.483 --> 00:04:43.911
We are using the only option
because this button won't

67
00:04:43.911 --> 00:04:49.227
work if you don't have JavaScript enabled,
right?

68
00:04:49.227 --> 00:04:53.526
So we're making this into a single page
app, it's just a single page island.

69
00:04:53.526 --> 00:04:58.305
It's one little island of interactivity
that only works if JavaScript is enabled.

70
00:04:58.305 --> 00:05:04.355
If we had something that works and
is progressively enhanced as a component,

71
00:05:04.355 --> 00:05:08.620
then we can use client:load or
client:visible.

72
00:05:08.620 --> 00:05:13.002
I really like client:visible because what
that means is that the component won't

73
00:05:13.002 --> 00:05:15.890
rehydrate until it's scrolled into view.

74
00:05:15.890 --> 00:05:20.062
So if you're working on a dashboard and
that dashboard is several page heights

75
00:05:20.062 --> 00:05:24.169
long, and you've got some stuff that's
really interactive at the bottom,

76
00:05:24.169 --> 00:05:26.590
somebody might not ever
scroll down to that.

77
00:05:26.590 --> 00:05:31.500
So, why load that JavaScript and
use up their network bandwidth?

78
00:05:31.500 --> 00:05:35.421
Instead, you just use client:visible and
under the hood Astro is using, I believe,

79
00:05:35.421 --> 00:05:37.040
an intersection observer.

80
00:05:37.040 --> 00:05:39.331
And when the component gets
close to the viewport,

81
00:05:39.331 --> 00:05:41.530
it'll hydrate that component for you.

82
00:05:41.530 --> 00:05:46.383
And the user's none the wiser, but
they just spent a few less kilobytes and

83
00:05:46.383 --> 00:05:49.340
they're probably happier for that.

84
00:05:49.340 --> 00:05:52.710
Idle means wait for
the first moment that the browser is idle.

85
00:05:52.710 --> 00:05:57.450
Load is treat this like regular JavaScript
and it can be part of the blocking load.

86
00:05:58.590 --> 00:06:05.056
Media, I think you get to set on
the same thing as a CSS media query.

87
00:06:05.056 --> 00:06:10.159
I haven't actually used that one and
I haven't had a reason to use that one,

88
00:06:10.159 --> 00:06:13.605
so I'm not gonna pretend I
know how that one works.

89
00:06:13.605 --> 00:06:17.252
[LAUGH] But so
we're gonna set this to be client:only.

90
00:06:17.252 --> 00:06:20.883
And again,
because we're using multiple frameworks,

91
00:06:20.883 --> 00:06:24.860
we're gonna use React,
set that =react and Save.

92
00:06:24.860 --> 00:06:32.770
Okay, so assuming I haven't typoed
anything, this is going to work now.

93
00:06:32.770 --> 00:06:37.922
So I can come in here,
we can shop for some sandwiches,

94
00:06:37.922 --> 00:06:44.800
and start adding things to our cart,
and we get those items if we want to.

95
00:06:44.800 --> 00:06:48.550
And remember, I'm clicking on
a button that's powered by React.

96
00:06:48.550 --> 00:06:51.020
And this cart is powered by Solid.

97
00:06:51.020 --> 00:06:53.720
And it's all linked
together using Nano Stores.

98
00:06:53.720 --> 00:06:58.702
So as I'm updating these,
they are working as expected

99
00:06:58.702 --> 00:07:03.360
as if they were all using
the same framework.

100
00:07:03.360 --> 00:07:07.390
Because Astro is acting as an umbrella and
Nano Stores gives us the ability

101
00:07:07.390 --> 00:07:11.489
to quickly relay data between these
different islands of interactivity.

102
00:07:12.640 --> 00:07:14.300
So this is pretty powerful stuff, right?

103
00:07:14.300 --> 00:07:18.650
I was blown away when
I saw this first work.

104
00:07:18.650 --> 00:07:22.786
And I think it's really just
such a powerful testimony for,

105
00:07:22.786 --> 00:07:26.770
you can take this a lot further
than you may have expected.

106
00:07:27.870 --> 00:07:32.806
And getting those benefits of
the fact that if I go in here and

107
00:07:32.806 --> 00:07:38.970
disable JavaScript, you disable
JavaScript and I reload the page.

108
00:07:38.970 --> 00:07:43.370
What we get here is a note that
you need to order by phone, but

109
00:07:43.370 --> 00:07:46.201
you can still see all of these things.

110
00:07:46.201 --> 00:07:51.990
The shopping still works, the ability
to order is still there, just by phone.

111
00:07:51.990 --> 00:07:56.415
And we didn't lose the core
functionality of the website.

112
00:07:56.415 --> 00:07:59.598
And then when I re-enable JavaScript,

113
00:08:01.649 --> 00:08:05.332
We get this additional functionality,
but we didn't have to rehydrate this.

114
00:08:05.332 --> 00:08:10.437
I didn't have to load and execute
component code to get these images and

115
00:08:10.437 --> 00:08:13.598
text that aren't dynamic back on the page.

116
00:08:13.598 --> 00:08:18.603
Only this Cart, and only these Add To Cart
buttons have to be loaded and executed.

117
00:08:18.603 --> 00:08:23.776
So this is a great way to build
some very dynamic experiences in

118
00:08:23.776 --> 00:08:29.259
such a way that you're not adding
unnecessary code to your page.

119
00:08:29.259 --> 00:08:32.945
You're only bringing in what's necessary
to get the job done that you need

120
00:08:32.945 --> 00:08:33.840
to get done.

121
00:08:33.840 --> 00:08:35.620
There's not any just in case code.

122
00:08:35.620 --> 00:08:39.526
There's not any you gotta use it because
you got to go all in to get the features

123
00:08:39.526 --> 00:08:40.670
of this thing.

124
00:08:40.670 --> 00:08:43.950
It's just selectively as you need it,
add one or

125
00:08:43.950 --> 00:08:47.030
more features at a time to get that going.

126
00:08:47.030 --> 00:08:51.549
&gt;&gt; I just wanted to know if it's
possible to use Nano Stores to

127
00:08:51.549 --> 00:08:53.955
maintain state across pages?

128
00:08:53.955 --> 00:08:57.213
&gt;&gt; Yes, there are extra things you can do.

129
00:08:57.213 --> 00:09:02.015
You can put it into IndexedDB, or
local storage, or something like that.

130
00:09:02.015 --> 00:09:03.559
And then kinda rehydrate it out.

131
00:09:03.559 --> 00:09:06.270
There are extra packages
that make that work, okay.

132
00:09:06.270 --> 00:09:11.027
[BLANK AUDIO]

