WEBVTT

1
00:00:00.069 --> 00:00:02.975
Speaking of later,
later is now we're gonna talk about RSS.

2
00:00:02.975 --> 00:00:07.185
So the next thing that we wanna
do is add our RSS feed so

3
00:00:07.185 --> 00:00:11.301
that somebody who wants to
can subscribe to this and

4
00:00:11.301 --> 00:00:14.570
get updated whenever we post a new post.

5
00:00:14.570 --> 00:00:17.919
As social media becomes more and
more interesting,

6
00:00:17.919 --> 00:00:21.964
having an RSS feed is a better and
better backup plan, I think.

7
00:00:21.964 --> 00:00:26.833
So what I'm gonna do is add a it looks
like a plug in like you'd be able to

8
00:00:26.833 --> 00:00:30.138
do NPM or NPX Astro add RSS but
it's not that,

9
00:00:30.138 --> 00:00:35.034
it's a it's a separate thing so
we're going to install it manually.

10
00:00:35.034 --> 00:00:40.137
And then we're gonna need a couple
external packages for this we're gonna

11
00:00:40.137 --> 00:00:45.001
use one called sanitize HTML and
one called markdown IT, markdown IT.

12
00:00:45.001 --> 00:00:52.216
I'm not sure which is the proper
pronunciation there, so we install those.

13
00:00:52.216 --> 00:00:57.435
Astrojs/rss, it's a helper
that gives us an XML feed,

14
00:00:57.435 --> 00:01:02.545
that is kind of built to
accept Astro values to make our

15
00:01:02.545 --> 00:01:08.222
lives easier we don't have to
write custom XML on ourselves.

16
00:01:08.222 --> 00:01:12.827
Sanitize HTML is how we're going
to make sure that the XML

17
00:01:12.827 --> 00:01:17.087
content field doesn't break
when we pass HTML into it.

18
00:01:17.087 --> 00:01:22.233
And then the markdown IT is how we're
going to take the markdown content and

19
00:01:22.233 --> 00:01:26.326
turn it into HTML so
that we can send it into the RSS feed.

20
00:01:26.326 --> 00:01:31.257
Because again, what Astro is doing is
giving us an Astro component they're not

21
00:01:31.257 --> 00:01:35.818
giving us a HTML, that's probably
a feature request to add cuz that would be

22
00:01:35.818 --> 00:01:38.190
neat, and it would make this simpler.

23
00:01:38.190 --> 00:01:43.378
So the next thing that we can do
is now we're gonna start using

24
00:01:43.378 --> 00:01:49.487
something called endpoints and
because RSS requires the full site name

25
00:01:49.487 --> 00:01:54.601
the full URL of the website we
are gonna have to define that.

26
00:01:54.601 --> 00:01:59.863
Astro has a config option for this,
so we can just come into the config

27
00:01:59.863 --> 00:02:05.326
astro.config.mjs, and we're going
to add a site key to the config.

28
00:02:05.326 --> 00:02:08.337
And if you don't know what
your site is going to be yet,

29
00:02:08.337 --> 00:02:11.217
you can just make this example.com or
something but

30
00:02:11.217 --> 00:02:14.956
don't forget to change it later,
or else your RSS feed will break.

31
00:02:14.956 --> 00:02:19.450
So what I'm gonna do for
now is I'm gonna point it to

32
00:02:19.450 --> 00:02:24.255
the working demo, so,
this is the demo of the app,

33
00:02:24.255 --> 00:02:28.770
if you wanna go see this,
it's up now and it works.

34
00:02:28.770 --> 00:02:33.136
What I would recommend if you're not sure
what to call it, is just append your

35
00:02:33.136 --> 00:02:37.178
GitHub username to the end, and
you'll be able to deploy it like that.

36
00:02:37.178 --> 00:02:42.003
Otherwise you can let Netlify or
Vercel or whatever generate a name for

37
00:02:42.003 --> 00:02:46.760
you, if you're if you're not
planning on putting this up forever.

38
00:02:46.760 --> 00:02:51.671
And that'll solve the problem
of RSS knowing where it is,

39
00:02:51.671 --> 00:02:54.979
and again, if you're not deploying,

40
00:02:54.979 --> 00:02:59.808
your RSS feed can be broken,
it doesn't really matter.

41
00:02:59.808 --> 00:03:04.225
But we've got that part setup and
we won't get an error we're gonna create

42
00:03:04.225 --> 00:03:08.427
an endpoint, and the way you get an
endpoint is you add a new page, but

43
00:03:08.427 --> 00:03:10.552
we gonna give it a name that we want.

44
00:03:10.552 --> 00:03:17.114
So rss.xml that's gonna be the actual
feed, but then we append .ts to it,

45
00:03:17.114 --> 00:03:23.385
and this identifies to Astro that
we're making kind of a custom return.

46
00:03:23.385 --> 00:03:26.623
Whatever we send back it's not going
to get processed like an Astro page is

47
00:03:26.623 --> 00:03:30.014
not gonna get processed like markdown,
we're just gonna give it something and

48
00:03:30.014 --> 00:03:31.143
it's gonna return that.

49
00:03:31.143 --> 00:03:35.897
So we could do a .json.ts and return
an objective of whatever that we want

50
00:03:35.897 --> 00:03:38.388
people to be able to grab from our site,

51
00:03:38.388 --> 00:03:43.079
maybe we wanna give a JSON feed of our
blog posts, we could do that as well.

52
00:03:43.079 --> 00:03:47.171
In our case, we're gonna do it as XML, and

53
00:03:47.171 --> 00:03:52.632
the way that this works is
this particular little feature

54
00:03:52.632 --> 00:03:59.247
is going to import rss from astrojs/rss and
then we're going to grab.

55
00:03:59.247 --> 00:04:04.919
The AstroConfig type from Astro,
and that's so

56
00:04:04.919 --> 00:04:10.324
that we can get
autocomplete on a piece later.

57
00:04:10.324 --> 00:04:15.862
We're gonna import that,
getCollection again, from Astro content,

58
00:04:15.862 --> 00:04:21.233
and then we're gonna use those
external packages that we installed.

59
00:04:21.233 --> 00:04:26.904
So we're gonna get sanitizeHtml

60
00:04:26.904 --> 00:04:31.967
from sanitize-html and import

61
00:04:31.967 --> 00:04:37.242
markdownIt from markdown-it.

62
00:04:37.242 --> 00:04:42.528
Okay, so then we're going
to grab out our parser and

63
00:04:42.528 --> 00:04:47.455
that's gonna be the the markdown IT so
that's so

64
00:04:47.455 --> 00:04:51.661
that we can turn
the markdown into HTML and

65
00:04:51.661 --> 00:04:56.489
then we're going to
export an async function.

66
00:04:56.489 --> 00:04:58.859
Called get and this is the endpoint part.

67
00:04:58.859 --> 00:05:03.836
So when somebody hits this endpoint
with a get request an HTTP get request,

68
00:05:03.836 --> 00:05:08.749
we're going to send something back and
we can send back whatever we want.

69
00:05:09.917 --> 00:05:15.030
The argument that we get sent to us is
the context, and that's the AstroConfig.

70
00:05:15.030 --> 00:05:20.679
So that is where we get access to that
that site parameter that we just set.

71
00:05:20.679 --> 00:05:25.461
So first and
foremost let's get the blog content, so

72
00:05:25.461 --> 00:05:31.636
I'm gonna grab out my blog as await,
oops, get collection blog.

73
00:05:31.636 --> 00:05:34.964
And then I want to return rss and

74
00:05:34.964 --> 00:05:40.468
this I don't know if this
is gonna autocomplete for

75
00:05:40.468 --> 00:05:43.674
me, it looks like it's not.

76
00:05:43.674 --> 00:05:47.132
I don't know if this one has autocomplete,
or

77
00:05:47.132 --> 00:05:50.335
has TypeScript types this the rss plugin.

78
00:05:50.335 --> 00:05:54.195
So we're gonna set up a title and
a description, and

79
00:05:54.195 --> 00:05:57.880
these are all the required fields for
an rss feed,

80
00:05:57.880 --> 00:06:01.858
so we're gonna say,
All sandwich news all the time.

81
00:06:07.847 --> 00:06:12.308
Then we wanna get the site, and
that's gonna be the context.site.

82
00:06:15.391 --> 00:06:17.435
Then we wanna get our items, and

83
00:06:17.435 --> 00:06:20.782
our items are going to be
a map over those blog posts.

84
00:06:20.782 --> 00:06:23.543
So again we map over and
grab out the post and

85
00:06:23.543 --> 00:06:28.378
then we want to return an object that
has all the things that are required for

86
00:06:28.378 --> 00:06:33.085
one of these to work, so the title
is going to be the post.data.title.

87
00:06:33.085 --> 00:06:37.945
The pubdate is the post.data.date,

88
00:06:37.945 --> 00:06:44.131
the description is
post.data.description and

89
00:06:44.131 --> 00:06:48.252
the link is going to be relative so

90
00:06:48.252 --> 00:06:52.817
blog and then we set up post.slug and

91
00:06:52.817 --> 00:06:57.102
the content is, the messy parts.

92
00:06:57.102 --> 00:06:59.885
So we're going to call that sanitize HTML,

93
00:06:59.885 --> 00:07:03.647
remember we gonna use that
markdown IT

94
00:07:03.647 --> 00:07:08.780
parser.render(post.body) which is just the raw
markdown contained in that markdown file.

95
00:07:12.970 --> 00:07:18.330
And with that saved,
start up the server again,

96
00:07:18.330 --> 00:07:22.530
if you haven't, oops, npm run dev.

97
00:07:22.530 --> 00:07:27.913
So, try to get as much of
that as I can on the screen,

98
00:07:27.913 --> 00:07:31.685
so just to recap here, an rss feed.

99
00:07:31.685 --> 00:07:36.239
If you're not familiar,
is a way of sending a list of items out of

100
00:07:36.239 --> 00:07:41.119
a site in a way that can be
automatically subscribed to,

101
00:07:41.119 --> 00:07:44.597
using a feed reader, google reader.

102
00:07:44.597 --> 00:07:49.812
It was extraordinarily popular and
then kind of fell out of fashion with the rise of social media and

103
00:07:49.812 --> 00:07:54.447
I've seen a resurgence of it lately,
because people are trying to

104
00:07:54.447 --> 00:07:58.291
figure out what happens if
the social media goes away.

105
00:07:58.291 --> 00:08:02.606
Because that has suddenly
become an actual risk.

106
00:08:02.606 --> 00:08:06.699
So rss, starts out by defining
a document with this title description,

107
00:08:06.699 --> 00:08:09.985
the site that its on, and
then provides a list of items,

108
00:08:09.985 --> 00:08:12.891
those items each include
a standard set of fields.

109
00:08:12.891 --> 00:08:16.514
That any feed reader will look for
and then display.

110
00:08:16.514 --> 00:08:21.840
So if I have my rss feed and you've got
yours and we're both using the rss spec,

111
00:08:21.840 --> 00:08:25.635
then somebody can put both
feeds into the feed reader and

112
00:08:25.635 --> 00:08:29.690
we'll see a list of your posts and
my posts in the same list.

113
00:08:29.690 --> 00:08:32.464
Chronologically ordered,
which is, it's great,

114
00:08:32.464 --> 00:08:34.814
it's like such a great
way to curate the web.

115
00:08:34.814 --> 00:08:39.266
If you're, if you haven't tried it before,
start looking to see if,

116
00:08:39.266 --> 00:08:42.622
your favorite creators have rss feeds and
add those.

117
00:08:42.622 --> 00:08:46.016
Because, you can start to curate
your own little social feeds

118
00:08:46.016 --> 00:08:48.177
of what people are creating out there.

119
00:08:48.177 --> 00:08:54.777
Now that we've got this saved,
we don't really have a way to get to it,

120
00:08:54.777 --> 00:08:58.853
but we can just, manually go to it, right?

121
00:08:58.853 --> 00:09:03.095
And this is the thing, so
we've got rss, we've got a channel, and

122
00:09:03.095 --> 00:09:06.445
then we've got our title,
description, link, and

123
00:09:06.445 --> 00:09:10.330
then each of these is an item
containing the default details.

124
00:09:10.330 --> 00:09:14.408
And you can see here that it's using that
site to make all of these permalinks.

125
00:09:17.361 --> 00:09:21.733
So the last little bit that we
wanna do is just make that actually

126
00:09:21.733 --> 00:09:26.271
discoverable on the site, so
let's head over to blog.astro and

127
00:09:26.271 --> 00:09:29.339
down at the bottom below
this section here.

128
00:09:29.339 --> 00:09:34.621
We will just add a quick class feed,

129
00:09:34.621 --> 00:09:39.561
and we'll link to the rss.xml.

130
00:09:39.561 --> 00:09:41.399
And this is something like,

131
00:09:41.399 --> 00:09:45.918
I am actually really a fan of Astro
not having a custom link component or

132
00:09:45.918 --> 00:09:50.683
having specialized behavior around links,
they just use the platform.

133
00:09:50.683 --> 00:09:53.597
You use the anchor tags that
you're familiar with, and

134
00:09:53.597 --> 00:09:55.891
they do what anchor tags
are supposed to do,

135
00:09:55.891 --> 00:09:59.504
you're not really wondering,
is it doing what I think it's doing?

136
00:09:59.504 --> 00:10:01.361
Is it injecting extra JavaScript?

137
00:10:01.361 --> 00:10:04.535
No, it's just a link,
it's just a link and it does link things.

138
00:10:04.535 --> 00:10:10.779
So we're gonna add another emoji,
we'll make it accessible,

139
00:10:10.779 --> 00:10:16.212
make it a role of image aria-label,
satellite dish and

140
00:10:16.212 --> 00:10:20.969
then we're going to add
in that satellite dish.

141
00:10:20.969 --> 00:10:26.045
It's always a risky when you open your
emoji panel and it shows like what your

142
00:10:26.045 --> 00:10:31.297
most frequently used emojis are,
if you like that's laying your soul bare.

143
00:10:31.297 --> 00:10:34.899
All right, so this is gonna be link-text,
the class's link-text, and

144
00:10:34.899 --> 00:10:36.341
we're gonna say subscribe.

145
00:10:38.500 --> 00:10:45.028
To the rss feed,
save that, and here we go.

146
00:10:45.028 --> 00:10:48.214
Now we've got a nice little link
down at the bottom of the blog for

147
00:10:48.214 --> 00:10:51.347
someone who wants to get that rss feed,
they can go, and do so.

148
00:10:54.840 --> 00:10:57.519
So that my friends is rss, so

149
00:10:57.519 --> 00:11:02.655
what we're going to do with
the remainder of our time,

150
00:11:02.655 --> 00:11:09.146
is we're going to put together
hybrid rendering for our Astro site.

151
00:11:09.146 --> 00:11:13.184
We're gonna put together a newsletter
form that will allow people to subscribe,

152
00:11:13.184 --> 00:11:17.116
we're not gonna build in the back end
of actually saving those subscriptions.

153
00:11:17.116 --> 00:11:20.004
That will be exactly the same
as on any other framework,

154
00:11:20.004 --> 00:11:22.283
you're gonna use some service with an API.

155
00:11:22.283 --> 00:11:26.744
I didn't wanna make people sign up for a
newsletter service as part of a workshop,

156
00:11:26.744 --> 00:11:28.424
so we're going to submit it and

157
00:11:28.424 --> 00:11:32.519
display what was submitted on the screen
as a confirmation that it worked.

158
00:11:32.519 --> 00:11:35.597
If you wanna make this into
a functional newsletter subscription,

159
00:11:35.597 --> 00:11:38.729
the only thing you'd have to do is
take the data we're getting out and

160
00:11:38.729 --> 00:11:41.868
actually save it via API to your
newsletter subscription of choice.

161
00:11:41.868 --> 00:11:42.990
Mark?

162
00:11:42.990 --> 00:11:47.711
&gt;&gt; Someone on stream also
commented that you could add

163
00:11:47.711 --> 00:11:52.771
the link rel alternate type
application/rss + xml?

164
00:11:52.771 --> 00:11:57.787
&gt;&gt; That's true yeah, so
if that's a good call out RSS auto

165
00:11:57.787 --> 00:12:02.378
discovery here,
the link rel alternate tag here so

166
00:12:02.378 --> 00:12:07.134
we could absolutely add this
to our default layout And

167
00:12:07.134 --> 00:12:12.025
if someone has an RSS plugin or
if they're using a browser that does auto

168
00:12:12.025 --> 00:12:16.770
discovery of RSS, it would show this
site has an RSS feed available.

169
00:12:20.492 --> 00:12:23.892
I don't know why,
I didn't not include that for a reason,

170
00:12:23.892 --> 00:12:28.052
it was honestly just I kind of forgot
that that's a thing that people do.

171
00:12:28.052 --> 00:12:33.198
I don't know if any, do any browsers
these days do that without a plugin or

172
00:12:33.198 --> 00:12:34.863
without an extension?

173
00:12:34.863 --> 00:12:35.753
&gt;&gt; I think they do.

174
00:12:35.753 --> 00:12:39.220
&gt;&gt; They do, let's try,
let's add this real quick.

175
00:12:39.220 --> 00:12:46.535
So let's drop this in,
we're gonna do a link rel alternate and

176
00:12:46.535 --> 00:12:51.917
we will set this up as rss feed for,
sandwich,

177
00:12:51.917 --> 00:12:56.899
and this one's gonna be rss.xml, okay?

178
00:12:56.899 --> 00:13:01.302
So then if I come out here and I open up,

179
00:13:04.570 --> 00:13:08.954
This page,
do any of these things look like

180
00:13:11.029 --> 00:13:14.488
Okay, so this one doesn't, this is ark and

181
00:13:14.488 --> 00:13:20.473
it doesn't look like it is detecting
an rss feed, but if your browser does,

182
00:13:20.473 --> 00:13:25.732
it'll show what a lot of them will
do is like show a little RSS icon.

183
00:13:25.732 --> 00:13:30.645
Somewhere that you can find
this particular browser doesn't

184
00:13:30.645 --> 00:13:32.162
appear to have it.

185
00:13:33.311 --> 00:13:35.099
But that is a good tip.

