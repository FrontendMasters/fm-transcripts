WEBVTT

1
00:00:00.100 --> 00:00:02.200
So I am Jason Lengstorf.

2
00:00:02.200 --> 00:00:05.536
I am very excited to be here
talking to you today about Astro.

3
00:00:05.536 --> 00:00:10.870
Astro is a new-ish framework,
it's been around for a couple years.

4
00:00:10.870 --> 00:00:14.660
It is built on a lot of
really exciting modern tech.

5
00:00:14.660 --> 00:00:17.884
And the thing that I like about
it the most is just kind of what

6
00:00:17.884 --> 00:00:20.180
it unlocks without asking for too much.

7
00:00:20.180 --> 00:00:22.580
So we'll talk a little bit about
what all those things mean.

8
00:00:22.580 --> 00:00:26.160
But yeah,
I guess let's just dive right in.

9
00:00:26.160 --> 00:00:27.750
So what is Astro?

10
00:00:27.750 --> 00:00:32.670
Astro is a web framework,
first and foremost.

11
00:00:32.670 --> 00:00:36.050
It allows you to build websites and
web apps.

12
00:00:37.360 --> 00:00:41.879
It ships zero JavaScript by default, which
is probably the thing that I think is

13
00:00:41.879 --> 00:00:45.869
the most novel about it when you
compare it to other frameworks today.

14
00:00:47.610 --> 00:00:51.850
And it relies on this concept
called partial hydration.

15
00:00:51.850 --> 00:00:56.103
And so what partial hydration
means is that you're able to say,

16
00:00:56.103 --> 00:00:57.840
here's my website.

17
00:00:57.840 --> 00:01:02.810
And for the vast majority of websites,
not that much of it moves, right?

18
00:01:02.810 --> 00:01:06.130
You've got a lot of content and
that content isn't interactive.

19
00:01:06.130 --> 00:01:09.681
It's not dynamic, it doesn't
change while the page is loaded.

20
00:01:09.681 --> 00:01:14.301
But historically what we've done is if
we wanna build with modern developer

21
00:01:14.301 --> 00:01:18.341
experience tool chains like React or
Svelte or Vue or any of those,

22
00:01:18.341 --> 00:01:21.876
you end up with this problem
where a bunch of static content

23
00:01:21.876 --> 00:01:24.350
ends up needing to be run by JavaScript.

24
00:01:24.350 --> 00:01:28.138
So you've got a lot of dynamic stuff on
the page that never actually does anything

25
00:01:28.138 --> 00:01:29.340
dynamic.

26
00:01:29.340 --> 00:01:33.745
And so the tradeoff there is that you
get this nice developer experience, but

27
00:01:33.745 --> 00:01:37.000
for people consuming the website,
they're loading and

28
00:01:37.000 --> 00:01:41.360
executing a lot of script that
doesn't actually do anything, right?

29
00:01:41.360 --> 00:01:46.268
So what Astro does is it takes
all of that dynamic script,

30
00:01:46.268 --> 00:01:50.550
and by default,
moves it to just HTML and CSS.

31
00:01:50.550 --> 00:01:54.519
So if you take an Astro site, you get
to build it using Astro components, or

32
00:01:54.519 --> 00:01:57.720
you can plug in React or
Svelte or Vue or whatever.

33
00:01:57.720 --> 00:02:02.718
And those components will be compiled on
the server, turned into HTML and CSS,

34
00:02:02.718 --> 00:02:05.520
and by default, just shipped as is.

35
00:02:05.520 --> 00:02:07.562
And for the vast majority of websites and

36
00:02:07.562 --> 00:02:10.444
the vast majority of web pages
even on dynamic websites,

37
00:02:10.444 --> 00:02:14.720
that is the right choice, because most
of that content, again, isn't changing.

38
00:02:14.720 --> 00:02:18.930
It's not dynamic, it's not interactive, so
you don't wanna ship that extra page away.

39
00:02:18.930 --> 00:02:22.576
You want something that just
lists things on a page, and

40
00:02:22.576 --> 00:02:25.770
HTML and CSS is the best way to do that.

41
00:02:25.770 --> 00:02:29.700
If you want something to be interactive,
this is where partial hydration comes in.

42
00:02:29.700 --> 00:02:34.541
You can mark an individual component
in Astro as interactive by saying

43
00:02:34.541 --> 00:02:39.216
client load or client only or
something like that, which is a signal

44
00:02:39.216 --> 00:02:44.270
to Astro to take just this one piece and
make it interactive again.

45
00:02:44.270 --> 00:02:48.108
So this is a really powerful way
to work because it allows you to,

46
00:02:48.108 --> 00:02:51.590
by default, make the best
decision possible for both, or

47
00:02:51.590 --> 00:02:56.496
I guess, for not just both, but for
maintainability, for deliverability, for

48
00:02:56.496 --> 00:03:00.225
consumability, for performance,
for lack of complexity.

49
00:03:00.225 --> 00:03:04.480
And all of those things just work,
it just happens by default.

50
00:03:04.480 --> 00:03:07.966
And when you need it, you say, hey,
I need this part to be dynamic, and

51
00:03:07.966 --> 00:03:09.140
Astro lets you do that.

52
00:03:09.140 --> 00:03:12.070
It lets you bring in that
dynamic content with just

53
00:03:12.070 --> 00:03:14.730
one extra attribute on
any given component.

54
00:03:16.330 --> 00:03:20.554
It's also UI agnostic, I talked about this
a little bit, but it's designed in such

55
00:03:20.554 --> 00:03:24.260
a way that you can put any UI framework
that you're comfortable writing.

56
00:03:24.260 --> 00:03:28.730
So if you if you like to write React, you
can write React components in Astro and

57
00:03:28.730 --> 00:03:30.960
still get all of these benefits.

58
00:03:30.960 --> 00:03:33.190
You can write Vue, Svelte, Solid.

59
00:03:33.190 --> 00:03:34.990
I think Lit works in here.

60
00:03:34.990 --> 00:03:36.881
So anything that you wanna use,

61
00:03:36.881 --> 00:03:39.899
you can probably find
a plug-in to run it in Astro.

62
00:03:39.899 --> 00:03:44.092
And again, by default, that's only going
to be for the developer experience, and

63
00:03:44.092 --> 00:03:46.760
what you get out the other
side is static HTML and CSS.

64
00:03:48.450 --> 00:03:50.230
So why should you use it?

65
00:03:51.760 --> 00:03:54.887
One of the things that I think is most
exciting about Astro is that it's

66
00:03:54.887 --> 00:03:56.320
extremely fast to get started.

67
00:03:56.320 --> 00:04:00.340
We're gonna start from a starter repo
today to get some of the the CSS and

68
00:04:00.340 --> 00:04:03.489
things that we don't wanna
spend a lot of time writing,

69
00:04:03.489 --> 00:04:08.050
but the getting started experience with
Astro is run by CLI, and it's magical.

70
00:04:08.050 --> 00:04:10.210
I'll demo that in a little bit.

71
00:04:10.210 --> 00:04:11.501
It's very fast to build.

72
00:04:11.501 --> 00:04:16.127
Because Astro doesn't ship a lot of
moving parts, you are capable of

73
00:04:16.127 --> 00:04:21.020
getting something up and running in
extremely short turnaround times.

74
00:04:21.020 --> 00:04:25.210
If you wanna get a landing page up today,
you can probably do it.

75
00:04:25.210 --> 00:04:28.737
And because of how it only ships HTML and
CSS by default,

76
00:04:28.737 --> 00:04:31.830
you can also get it shipped to production.

77
00:04:31.830 --> 00:04:33.910
Today you can build the whole thing.

78
00:04:33.910 --> 00:04:38.448
The thing we're gonna build today is
a very full featured site that we will

79
00:04:38.448 --> 00:04:42.615
deploy by the end of today, and
we're gonna deploy it on, mostly,

80
00:04:42.615 --> 00:04:47.222
just a static CDN, with a little bit
of dynamic content to handle the pieces

81
00:04:47.222 --> 00:04:49.005
that are actually dynamic.

82
00:04:50.385 --> 00:04:51.515
It's very fast to deploy.

83
00:04:51.515 --> 00:04:55.579
You can deploy it to just about any
platform because it, again, by default,

84
00:04:55.579 --> 00:04:57.515
only needs a CDN.

85
00:04:57.515 --> 00:05:02.089
So you are able to deploy it to AWS,
to CloudFlare, Netlify, Vercel,

86
00:05:02.089 --> 00:05:04.315
wherever you wanna go, it works.

87
00:05:05.720 --> 00:05:07.620
It's very fast to adopt incrementally.

88
00:05:07.620 --> 00:05:11.444
And this is probably the part that
I think is not the most exciting,

89
00:05:11.444 --> 00:05:15.746
but maybe the most relevant to a lot
of folks, is a lot of these frameworks,

90
00:05:15.746 --> 00:05:19.504
when you see somebody talk about it,
they're talking about them

91
00:05:19.504 --> 00:05:23.080
from the context of,
you're going to start from scratch.

92
00:05:23.080 --> 00:05:25.877
You're going to all-in
adopt this framework and

93
00:05:25.877 --> 00:05:30.230
change everything over to it, and
that's how you get the benefits.

94
00:05:30.230 --> 00:05:33.349
And if you only incrementally adopt it,
when you have problems,

95
00:05:33.349 --> 00:05:35.957
a lot of these frameworks will tell you,
well, yeah,

96
00:05:35.957 --> 00:05:39.340
you have to fully adopt
the framework to get the benefits.

97
00:05:39.340 --> 00:05:44.146
And the thing that I find really
exciting about Astro is that Astro is

98
00:05:44.146 --> 00:05:46.080
a per page benefit.

99
00:05:46.080 --> 00:05:49.188
You can adopt Astro one page
at a time in your stack, and

100
00:05:49.188 --> 00:05:52.250
those pages will benefit from using Astro.

101
00:05:52.250 --> 00:05:56.823
So it's really nice, and because it works
with whatever UI framework you're probably

102
00:05:56.823 --> 00:06:00.529
already using at work, you can bring
these pages over without having to

103
00:06:00.529 --> 00:06:02.870
rewrite all the functionality of your app.

104
00:06:02.870 --> 00:06:07.601
You can take the existing React components
and bring them into an Astro page and

105
00:06:07.601 --> 00:06:12.776
just migrate your homepage to start, or a
particular landing page or whatever it is.

106
00:06:12.776 --> 00:06:17.707
And use a reverse proxy or something
to make that one page run on Astro,

107
00:06:17.707 --> 00:06:21.660
and everything else runs
on your existing stack.

108
00:06:21.660 --> 00:06:25.792
So it's a really nice way to
incrementally move to a modern stack

109
00:06:25.792 --> 00:06:28.548
if you're currently working in something

110
00:06:28.548 --> 00:06:32.850
that would be way too big to try to
migrate all at once to a new stack.

111
00:06:34.630 --> 00:06:35.990
It ships web standards.

112
00:06:35.990 --> 00:06:39.996
Most of what you're gonna be working
with in Astro is just stuff that's

113
00:06:39.996 --> 00:06:41.141
documented on MDN.

114
00:06:41.141 --> 00:06:47.524
You're not going to be using a whole
lot of custom invented stuff on Astro..

115
00:06:47.524 --> 00:06:51.477
What Astro has done is they've assembled
things that are just web standards and

116
00:06:51.477 --> 00:06:56.060
put them together in a way that allows you
to mostly use knowledge you already have.

117
00:06:56.060 --> 00:06:59.894
And again, because you're combining
your web standards knowledge with your

118
00:06:59.894 --> 00:07:03.570
framework UI knowledge, you kind of
just come in knowing how Astro works.

119
00:07:03.570 --> 00:07:07.219
There's only a handful of things you have
to learn to be able to use Astro really

120
00:07:07.219 --> 00:07:07.950
effectively.

121
00:07:09.180 --> 00:07:12.880
And like I said earlier,
it can be deployed anywhere.

122
00:07:12.880 --> 00:07:14.800
By default, it's HTML and CSS.

123
00:07:14.800 --> 00:07:18.080
There's nothing more
versatile than HTML and CSS.

124
00:07:18.080 --> 00:07:20.175
And when you do get into
that JavaScript part,

125
00:07:20.175 --> 00:07:24.211
depending on whether you're shipping it
server-side rendered or client-rendered,

126
00:07:24.211 --> 00:07:27.347
if it's client-rendered, again,
any CDN can host an Astro site.

127
00:07:27.347 --> 00:07:29.142
You don't need specialized hosting.

128
00:07:29.142 --> 00:07:32.778
You don't need to pay the company that
builds the framework to run your hosting.

129
00:07:32.778 --> 00:07:38.351
You can put it on S3 with CloudFront and
run it for just about nothing.

130
00:07:38.351 --> 00:07:41.620
Netlify, Vercel, Cloudflare,
they all host it.

131
00:07:41.620 --> 00:07:44.973
You can also run it in
a server full environment.

132
00:07:44.973 --> 00:07:47.871
You can put it on render or
fly or whatever you want, and

133
00:07:47.871 --> 00:07:50.300
it'll work there as well.

134
00:07:50.300 --> 00:07:51.710
Question?

135
00:07:51.710 --> 00:07:54.840
&gt;&gt; Yeah,
could you compare it to Eleventy at all?

136
00:07:54.840 --> 00:08:01.760
&gt;&gt; Yes, so Eleventy and Astro share
a lot of the foundational philosophy.

137
00:08:01.760 --> 00:08:06.335
And one of the things that I really,
really like about Eleventy is that it

138
00:08:06.335 --> 00:08:10.986
took the philosophy of, do as little
as possible to give the user the least

139
00:08:10.986 --> 00:08:14.830
amount of work to do to
consume your content, right?

140
00:08:14.830 --> 00:08:17.798
And Astro is similar in that both of them,
by default,

141
00:08:17.798 --> 00:08:19.808
are not putting out any JavaScript.

142
00:08:19.808 --> 00:08:23.426
You're writing pages, those pages get
compiled down to HTML and CSS, and

143
00:08:23.426 --> 00:08:24.700
they ship to the browser.

144
00:08:26.780 --> 00:08:32.980
Where they differ is that Astro is a
little less restrictive about JavaScript.

145
00:08:32.980 --> 00:08:37.697
So Eleventy kinda has a stance of,
don't use JavaScript.

146
00:08:37.697 --> 00:08:41.262
It's stance on JavaScript is,
if you want it, you can use it, but

147
00:08:41.262 --> 00:08:42.420
you're on your own.

148
00:08:42.420 --> 00:08:46.443
You have to write custom JavaScript and
put it into your Eleventy templates, and

149
00:08:46.443 --> 00:08:50.150
Eleventy, it just ignores them,
it passes through.

150
00:08:50.150 --> 00:08:52.735
So that can be a good
restriction to put in place,

151
00:08:52.735 --> 00:08:55.960
depending on what you're trying to build.

152
00:08:55.960 --> 00:09:00.117
But in a lot of real-world scenarios,
that's where people start to say, well,

153
00:09:00.117 --> 00:09:03.430
Eleventy doesn't do what I need to
do because I need a login form,

154
00:09:03.430 --> 00:09:04.717
I need this other thing.

155
00:09:04.717 --> 00:09:08.349
And so Eleventy has some ways of dealing
with that that I'm not gonna get into.

156
00:09:08.349 --> 00:09:13.041
But Astro took a different approach,
which is, we're not against JavaScript,

157
00:09:13.041 --> 00:09:16.790
we just think you should use only
the tools that you need, right?

158
00:09:16.790 --> 00:09:21.390
All you actually need for this job is HTML
and CSS, so that's all we're gonna ship.

159
00:09:21.390 --> 00:09:23.770
If you need JavaScript, of course,
we're gonna ship JavaScript.

160
00:09:23.770 --> 00:09:27.492
We'll compile your React and put it up on
the page and rehydrate it for you and make

161
00:09:27.492 --> 00:09:31.900
it work, just like Gatsby or Next or Remix
or any of these other frameworks would do.

162
00:09:31.900 --> 00:09:33.680
But they only do it when you need it.

163
00:09:33.680 --> 00:09:37.709
And that's the big tradeoff between
a Next and a Remix or one of those,

164
00:09:37.709 --> 00:09:41.125
those frameworks are saying you
must go all in on JavaScript

165
00:09:41.125 --> 00:09:44.077
without doing a lot of work
to turn JavaScript off.

166
00:09:44.077 --> 00:09:47.584
Eleventy says you can't have JavaScript
unless you write all of the JavaScript

167
00:09:47.584 --> 00:09:48.114
yourself.

168
00:09:48.114 --> 00:09:52.210
And Astro is kind of in the why not both
category, where you don't have to use

169
00:09:52.210 --> 00:09:56.242
JavaScript, and in fact, won't unless
you specifically ask for it, but

170
00:09:56.242 --> 00:09:59.774
when you ask for it, it is a first
class citizen in the framework.

171
00:09:59.774 --> 00:10:04.204
And so that's really why I
think Astro is exciting.

