WEBVTT

1
00:00:00.260 --> 00:00:03.020
Blogs in Astro can be
done a number of ways.

2
00:00:03.020 --> 00:00:06.640
You can do it with a third-party API.

3
00:00:06.640 --> 00:00:09.750
You can do it by just creating
pages if you wanted to.

4
00:00:09.750 --> 00:00:14.430
And recently, as of Astro 2,
you can put in content collections,

5
00:00:14.430 --> 00:00:19.420
which are a way of letting Astro
kind of do some of the work for us.

6
00:00:19.420 --> 00:00:22.050
I will briefly put this up on the screen.

7
00:00:22.050 --> 00:00:29.280
Let's go to the Astro Docs and
I'll look up content collections here.

8
00:00:29.280 --> 00:00:34.027
And the general idea is that you
create a content folder inside your

9
00:00:34.027 --> 00:00:38.859
source directory that is identified
to Astro as a magic folder, and

10
00:00:38.859 --> 00:00:42.534
then you create collections
by creating a folder.

11
00:00:42.534 --> 00:00:45.309
So if we want a collection called
newsletter, we create the newsletter

12
00:00:45.309 --> 00:00:48.850
folder and then anything inside of it is
considered a part of that collection.

13
00:00:48.850 --> 00:00:51.277
And this again allows
us to define eschema so

14
00:00:51.277 --> 00:00:54.770
that we can keep the frontmatter
of that markdown typesafe.

15
00:00:54.770 --> 00:00:59.115
And we can enforce that every entry in
a content collection has a slug and

16
00:00:59.115 --> 00:01:02.250
a date and an author and
a required category.

17
00:01:02.250 --> 00:01:06.488
Or we can just make sure that frontmatter
that we don't support doesn't get added in

18
00:01:06.488 --> 00:01:09.831
which over time can make our
markdown really difficult to manage,

19
00:01:09.831 --> 00:01:13.670
because we don't know what's required,
what's actually used.

20
00:01:13.670 --> 00:01:16.159
The schema can make sure that
we're very clear on that.

21
00:01:16.159 --> 00:01:20.542
So our case, we're going to set up a blog.

22
00:01:20.542 --> 00:01:25.970
So, we're going to create
a new folder called Content.

23
00:01:27.080 --> 00:01:30.233
Inside of Content, we're going to
create a new folder again, and

24
00:01:30.233 --> 00:01:31.880
this one's gonna be called Blog.

25
00:01:33.330 --> 00:01:38.950
And up in the the workshop Assets,
I have two markdown files.

26
00:01:38.950 --> 00:01:40.490
They both are prefixed with numbers.

27
00:01:40.490 --> 00:01:44.930
So 01 is our first blog, and I'm going
to copy that into the blog folder.

28
00:01:44.930 --> 00:01:50.000
Then 02 is the second one, and I'm going
to copy that into the block folder.

29
00:01:50.000 --> 00:01:54.698
So those are going to be our blog posts,
and each one has a title,

30
00:01:54.698 --> 00:01:56.880
slug, date, description.

31
00:01:58.340 --> 00:02:01.650
This is the front matter that
we can define with a schema.

32
00:02:04.730 --> 00:02:07.450
Next, we're going to
actually configure this.

33
00:02:07.450 --> 00:02:09.510
So let me make this a little bit bigger.

34
00:02:09.510 --> 00:02:14.026
Inside the content directory,
not the blog, so top-level content,

35
00:02:14.026 --> 00:02:19.000
we want to add a new file, and
we're going to call it config.ts.

36
00:02:19.000 --> 00:02:24.010
And this is how we configure
content collections and Astro.

37
00:02:24.010 --> 00:02:28.470
We're going to grab a couple
things from Astro content.

38
00:02:29.550 --> 00:02:32.117
And let's see if it's
going to give those to me,

39
00:02:32.117 --> 00:02:35.150
defined, I think I need to stop and
restart.

40
00:02:35.150 --> 00:02:36.670
So let's stop and restart.

41
00:02:36.670 --> 00:02:39.724
Now that we've got content collections and
that's going to generate some types and

42
00:02:39.724 --> 00:02:40.249
stuff for us.

43
00:02:41.310 --> 00:02:45.181
And you can see here that now it's
created like a .astro folder and

44
00:02:45.181 --> 00:02:50.210
that's got some of the things that are
gonna make our lives a lot easier here.

45
00:02:50.210 --> 00:02:56.623
So then I can get define collection and
Z, which is their packaging Zod for

46
00:02:56.623 --> 00:03:01.690
convenience so
that we can define our our schema.

47
00:03:01.690 --> 00:03:05.387
So I'm gonna export a cons
called collections, and

48
00:03:05.387 --> 00:03:10.610
that is what Astro's gonna look for
to grab out our content collections.

49
00:03:10.610 --> 00:03:12.480
Now we can make as many
of these as we want.

50
00:03:12.480 --> 00:03:13.988
In our case, we only need the one, so

51
00:03:13.988 --> 00:03:16.220
I'm gonna give it a name
that matches the folder.

52
00:03:16.220 --> 00:03:18.330
So blog, blog.

53
00:03:18.330 --> 00:03:22.390
And then we use that define collection and
pass in an object.

54
00:03:22.390 --> 00:03:26.810
And the object has one property that
we're gonna use, which is schema.

55
00:03:26.810 --> 00:03:30.010
And then we use Zod to actually define it.

56
00:03:30.010 --> 00:03:32.580
So I'm going to do a z .object.

57
00:03:32.580 --> 00:03:35.857
This is probably gonna be the case for
every content collection,

58
00:03:35.857 --> 00:03:37.790
it's gonna start with a z .object.

59
00:03:37.790 --> 00:03:42.990
And then I want a title,
which will be a z.string.

60
00:03:42.990 --> 00:03:46.350
I want a date, which is a z.date.

61
00:03:46.350 --> 00:03:51.334
This is something I love about Zod is you
get more fine-grained control than putting

62
00:03:51.334 --> 00:03:53.450
in a string or something like that.

63
00:03:53.450 --> 00:03:55.720
You can just say, I want this to
be a date, and it'll complain.

64
00:03:55.720 --> 00:03:57.330
Okay, so he doesn't put a date in it.

65
00:03:57.330 --> 00:04:01.283
Whereas if it was a string they could put
in whatever they wanted and it would be,

66
00:04:01.283 --> 00:04:02.790
yeah that looks fine.

67
00:04:02.790 --> 00:04:05.820
So then we want our description.

68
00:04:05.820 --> 00:04:07.650
The description is going to be a string.

69
00:04:07.650 --> 00:04:11.215
And because this is going to go,
this would be what I would use for like a,

70
00:04:11.215 --> 00:04:13.040
Social media preview or something.

71
00:04:13.040 --> 00:04:15.700
So I'm gonna set a max of 200 characters,

72
00:04:15.700 --> 00:04:20.392
because we want that to something that's
not gonna get cut off in the previews.

73
00:04:23.935 --> 00:04:24.720
And that's that.

74
00:04:24.720 --> 00:04:27.410
That's a whole content schema.

75
00:04:27.410 --> 00:04:30.789
We've got everything that we need
to make this thing actually work.

76
00:04:31.790 --> 00:04:35.904
Any questions about I introduced
a couple of things pretty quickly there

77
00:04:35.904 --> 00:04:36.920
anything on Zod?

78
00:04:36.920 --> 00:04:39.156
I'm not going to cover Zod it in depth,
but

79
00:04:39.156 --> 00:04:42.270
I can talk about it at
kind of a high level.

80
00:04:42.270 --> 00:04:46.365
I guess to talk about it
at a bit of a high level,

81
00:04:46.365 --> 00:04:52.630
Zod is a way to do schema definition
that is TypeScript friendly.

82
00:04:52.630 --> 00:04:57.620
And what makes this really powerful is
that TypeScript only works statically.

83
00:04:57.620 --> 00:05:01.430
It runs at compile time, right?

84
00:05:01.430 --> 00:05:05.084
Runtime, you don't get any TypeScript
help because by that point,

85
00:05:05.084 --> 00:05:07.700
all the TypeScript has been compiled away.

86
00:05:07.700 --> 00:05:09.610
It gets removed at the build.

87
00:05:09.610 --> 00:05:12.592
So, Zod actually continues to
do type checking at runtime,

88
00:05:12.592 --> 00:05:15.870
which is important when you're
dealing with third-party data.

89
00:05:15.870 --> 00:05:18.972
Like, if we have an API and
we want to pull in some data and

90
00:05:18.972 --> 00:05:22.688
make sure that the API didn't change and
like give us some errors.

91
00:05:22.688 --> 00:05:27.207
If it did, then Zod would let us do that
whereas a TypeScript file wouldn't buy

92
00:05:27.207 --> 00:05:30.016
it because it can't write
like when I'm running

93
00:05:30.016 --> 00:05:32.909
this code in production
that TypeScript is gone.

94
00:05:32.909 --> 00:05:37.272
And we don't know what the third party API
is sending unless we're actually parsing

95
00:05:37.272 --> 00:05:38.203
it as it comes in.

96
00:05:38.203 --> 00:05:42.209
So Zod is kind of a it's like
an enhancement on top of TypeScript that

97
00:05:42.209 --> 00:05:45.442
adds a lot of extra power and
a lot of extra type safety,

98
00:05:45.442 --> 00:05:49.341
especially when you start crossing
the boundaries of services.

99
00:05:49.341 --> 00:05:54.728
In the case of Astro, this is really nice
because it allows us to do something like

100
00:05:54.728 --> 00:06:00.138
type markdown because we're able to parse
that front matter on the way through.

101
00:06:00.138 --> 00:06:04.779
I don't know that that would be
possible without a lot of it,

102
00:06:04.779 --> 00:06:09.966
it would be challenging to get
the kind of type inference that we're

103
00:06:09.966 --> 00:06:15.699
getting here without using some kind
of a schema definition tool like Zod.

104
00:06:15.699 --> 00:06:19.381
So, yeah, question.

105
00:06:19.381 --> 00:06:22.977
&gt;&gt; I don't know if it's outta context, but

106
00:06:22.977 --> 00:06:27.911
could you speak a little bit
about the difference between

107
00:06:27.911 --> 00:06:32.949
something like next.JS,
gets static props for creating

108
00:06:32.949 --> 00:06:36.846
a blog versus creating a blog with astro
&gt;&gt; Yeah,

109
00:06:36.846 --> 00:06:39.360
they're going to be really similar.

110
00:06:39.360 --> 00:06:43.552
In fact,
I believe that ASTRO even uses get

111
00:06:43.552 --> 00:06:47.840
static props as a API method to do this.

112
00:06:47.840 --> 00:06:49.769
Unless, let me see.

113
00:06:49.769 --> 00:06:53.110
Skip ahead here for a second.

114
00:06:53.110 --> 00:06:55.060
It gets out of pads.

115
00:06:55.060 --> 00:06:59.350
So yeah, if they share a lot in
common in terms of the API's

116
00:06:59.350 --> 00:07:00.928
&gt;&gt; The functionally,

117
00:07:00.928 --> 00:07:06.586
they're kind of the same, you are fetching
some things ahead of time and

118
00:07:06.586 --> 00:07:11.594
then passing it to Astro or
next in a format that it understands,

119
00:07:11.594 --> 00:07:17.527
so that it's able to say, okay, I know
that I'm going to get these posts and

120
00:07:17.527 --> 00:07:20.960
I need to have dynamic page endpoints.

121
00:07:20.960 --> 00:07:24.730
For each one so that it renders
properly or with get get static props,

122
00:07:24.730 --> 00:07:26.820
you're kind of doing the same thing.

123
00:07:26.820 --> 00:07:28.240
Here's all the data that I need.

124
00:07:28.240 --> 00:07:30.530
I want that to be available to
these pages when they load and

125
00:07:30.530 --> 00:07:31.810
you do that ahead of rendering.

126
00:07:33.970 --> 00:07:35.615
So from a functional standpoint,

127
00:07:35.615 --> 00:07:38.516
you can you can think of them
as being roughly the same thing.

128
00:07:38.516 --> 00:07:42.192
And when we get into
the implementation here in a second,

129
00:07:42.192 --> 00:07:44.499
you'll you'll see why I say that.

130
00:07:44.499 --> 00:07:48.410
So the first thing I want to do is
actually do like a list of blog posts.

131
00:07:48.410 --> 00:07:51.220
So we're gonna create the blog home page.

132
00:07:51.220 --> 00:07:55.503
And we'll do that by going into
the pages directory, new file, and

133
00:07:55.503 --> 00:07:58.300
blog.astro is the name of the file itself.

134
00:07:59.730 --> 00:08:02.310
Give it some front matter because
this is an Astro component.

135
00:08:02.310 --> 00:08:06.226
And I want to import a helper
function called get collection,

136
00:08:06.226 --> 00:08:11.043
and this is generated by Astro and the way
that they make this work is they they

137
00:08:11.043 --> 00:08:14.657
set it up like this where it
says Astro colon content, and

138
00:08:14.657 --> 00:08:19.810
that gives us the the helpers that are
generated from the schema that we created.

139
00:08:19.810 --> 00:08:24.865
So that's in that .Astro folder, the
generated stuff we're getting access to

140
00:08:24.865 --> 00:08:30.750
these sorts of things that that will then
be used to actually generate the page.

141
00:08:30.750 --> 00:08:31.940
Next up we want to grab our layout.

142
00:08:33.320 --> 00:08:36.924
So this one is going to
be our page layout and

143
00:08:36.924 --> 00:08:41.110
down below we're gonna
grab our blog posts.

144
00:08:41.110 --> 00:08:45.560
So to grab the blog posts we're gonna
wait and we will get our collection.

145
00:08:45.560 --> 00:08:48.304
And this should,
if I've done my job right, there it is,

146
00:08:48.304 --> 00:08:51.380
autocomplete to show us
the available collections.

147
00:08:51.380 --> 00:08:57.480
So now we have our blog posts loaded
into a variable from our collection,

148
00:08:57.480 --> 00:09:01.180
and we can use those
then to build out a page.

149
00:09:01.180 --> 00:09:02.820
So we've got our layout.

150
00:09:02.820 --> 00:09:04.420
I'm gonna set up a section.

151
00:09:04.420 --> 00:09:08.660
That section is going to have
a class of blog entries.

152
00:09:08.660 --> 00:09:15.430
And inside of it, we're going to loop.

153
00:09:15.430 --> 00:09:17.220
So blog posts.map.

154
00:09:18.750 --> 00:09:19.928
And we'll call this a post.

155
00:09:19.928 --> 00:09:27.010
And then we want to
return a div class post.

156
00:09:28.530 --> 00:09:29.670
And inside of that.

157
00:09:31.720 --> 00:09:35.750
We're going to set up a,
we want to show the title.

158
00:09:35.750 --> 00:09:38.630
The title in this case
is going to be linked.

159
00:09:38.630 --> 00:09:43.550
So a Href, and we're going to do a bit of,
of kind of string stuff here.

160
00:09:43.550 --> 00:09:48.490
So we want our blog posts
to live at /blog /the slug.

161
00:09:48.490 --> 00:09:53.650
So we're going to set that up and
we'll grab the post.slug.

162
00:09:53.650 --> 00:09:59.150
Now, if you note,I did define a slug.

163
00:09:59.150 --> 00:10:01.330
Never mind,
it will auto generate a slug for you.

164
00:10:01.330 --> 00:10:06.110
But if you add a slug in
the frontmatter it'll use that instead.

165
00:10:06.110 --> 00:10:09.405
So you do have that control
that I do that in both I did.

166
00:10:09.405 --> 00:10:16.976
I can maybe show that the other way if we
want, then I'm gonna grab the post.data.

167
00:10:16.976 --> 00:10:22.540
And now data is where, stop,
where the front matter shows up.

168
00:10:22.540 --> 00:10:25.990
So the post itself has
a few properties on it.

169
00:10:25.990 --> 00:10:28.050
Data is where the front matter comes in.

170
00:10:28.050 --> 00:10:31.358
And as you can see, as I'm hovering over
the top here, we've got the date, title,

171
00:10:31.358 --> 00:10:32.116
and description.

172
00:10:34.057 --> 00:10:41.076
And I want to grab out
the title in this case, okay?

173
00:10:41.076 --> 00:10:44.796
Next, I'm going to set up a time and

174
00:10:44.796 --> 00:10:49.890
we'll set the date time property in here.

175
00:10:49.890 --> 00:10:52.880
And I want that to be post.

176
00:10:52.880 --> 00:10:57.903
Data date to ISO string and
that's because we're passing

177
00:10:57.903 --> 00:11:02.926
it in as the date time attribute
which means that Google and

178
00:11:02.926 --> 00:11:07.880
other tools can,
pass it as being an actual time.

179
00:11:07.880 --> 00:11:13.550
Kind of thing you have to do but
it can be helpful for your.

180
00:11:14.686 --> 00:11:19.250
Your various SEO efforts.

181
00:11:19.250 --> 00:11:22.621
And then we'll do,
this one is a to date string,

182
00:11:22.621 --> 00:11:26.750
because that means I don't have
to format a date manually.

183
00:11:26.750 --> 00:11:28.670
And that makes me very happy.

184
00:11:29.670 --> 00:11:33.079
And these are browser like platform APIs.

185
00:11:34.280 --> 00:11:38.917
This comes out as odd because
we've told it that it's a date so

186
00:11:38.917 --> 00:11:41.872
it makes sure that we get a date object.

187
00:11:41.872 --> 00:11:44.436
Next, we're gonna grab the,

188
00:11:46.535 --> 00:11:51.341
Description And
then we're going to do a little,

189
00:11:51.341 --> 00:11:54.702
we're gonna actually just do
the exact same thing we did up here.

190
00:11:54.702 --> 00:11:59.531
So I'm gonna copy paste this,
grab out that link.

191
00:11:59.531 --> 00:12:05.221
But instead of the title,
I want it to say, read post.

192
00:12:07.138 --> 00:12:14.230
Okay, so this will get the content on
the screen, but it's not styled yet.

193
00:12:14.230 --> 00:12:17.410
So we want to also add a style sheet.

194
00:12:19.840 --> 00:12:21.860
And I can grab that out
of the workshop assets.

195
00:12:21.860 --> 00:12:25.100
We've got pages blog.CSS in here.

196
00:12:25.100 --> 00:12:29.936
And I'm just going to drop this in and
save it, and

197
00:12:29.936 --> 00:12:35.590
get back out here,
head over to the blog, and there we go.

198
00:12:37.920 --> 00:12:43.054
So that's a Content Collection in action,
right, and I think again this is one

199
00:12:43.054 --> 00:12:48.115
of the really powerful things about this
approach is that, we have the ability

200
00:12:48.115 --> 00:12:53.720
here to very quickly stand up something
like a blog and if it's I mean granted.

201
00:12:53.720 --> 00:12:56.240
This makes the assumption that
everybody who's gonna work on

202
00:12:56.240 --> 00:12:59.180
the blog is comfortable with Markdown and
pushing things to get.

203
00:12:59.180 --> 00:13:03.362
So a markdown based blog comes
with a heavy set of caveats for

204
00:13:03.362 --> 00:13:06.050
who can actually use and maintain it.

205
00:13:07.050 --> 00:13:10.098
But if you're a team of devs, and
you're trying to set up a blog and

206
00:13:10.098 --> 00:13:13.365
you want that to work, or you've got
a team that's very good savvy that

207
00:13:13.365 --> 00:13:16.645
maybe aren't devs but are very
comfortable with working in Markdown.

208
00:13:16.645 --> 00:13:20.423
You can do this so fast like just a matter
of a few minutes you can get a blog up and

209
00:13:20.423 --> 00:13:20.960
running.

210
00:13:20.960 --> 00:13:25.334
And I really think that's a powerful
way to start even if it's not where you

211
00:13:25.334 --> 00:13:30.230
eventually land, if you end up landing
on a content management system.

212
00:13:30.230 --> 00:13:34.066
And here's the thing that's
really cool about this is that,

213
00:13:34.066 --> 00:13:38.638
this Swapping this out to be a load all
my posts from Contentful or Sanity,

214
00:13:38.638 --> 00:13:42.120
you've already written a Zod schema for
it.

215
00:13:42.120 --> 00:13:46.641
So you can just grab that Zod schema and
move the data from Contentful or Sanity or

216
00:13:46.641 --> 00:13:49.150
whatever into that same Zod schema.

217
00:13:49.150 --> 00:13:51.380
You don't have to change any
other code at that point.

218
00:13:51.380 --> 00:13:55.730
You would just be swapping this
out to be load from my CMS.

219
00:13:55.730 --> 00:13:59.190
Use my schema that I defined and
here is my content.

220
00:13:59.190 --> 00:14:01.100
And that is a really powerful move, right?

221
00:14:01.100 --> 00:14:05.538
So it opens the door for get started
quickly and be prepared to continue to

222
00:14:05.538 --> 00:14:11.050
grow over time without heavy refactoring
burning it down and starting from scratch.

223
00:14:11.050 --> 00:14:12.584
So, now that we've got this blog,

224
00:14:12.584 --> 00:14:16.490
everything's looking the way that I
want it to, I'm very happy about that.

225
00:14:16.490 --> 00:14:17.820
I hope you're very happy about that.

226
00:14:19.340 --> 00:14:21.510
And if we click through
to one of the posts,

227
00:14:21.510 --> 00:14:25.220
we can see that it does use the right,
so it uses the slug.

228
00:14:25.220 --> 00:14:27.000
But we haven't built these pages yet.

229
00:14:27.000 --> 00:14:28.480
So we're seeing our (404).

230
00:14:28.480 --> 00:14:31.690
So the next thing we need to do is
build those individual blog pages.

231
00:14:31.690 --> 00:14:34.910
And this is gonna introduce
dynamic routing in Astro.

232
00:14:34.910 --> 00:14:39.352
So you may have seen this if you've worked
with a framework like next or remix.

233
00:14:39.352 --> 00:14:43.786
Same general concept, it's gonna look
really familiar if you've ever built like

234
00:14:43.786 --> 00:14:45.573
get static paths export in Next.

235
00:14:45.573 --> 00:14:47.057
So why don't we go ahead and do that.

