WEBVTT

1
00:00:00.070 --> 00:00:03.074
Does anybody have questions
about Astro the framework?

2
00:00:03.074 --> 00:00:06.527
From this point forward,
I'm talking about deployment.

3
00:00:06.527 --> 00:00:09.133
&gt;&gt; Do you have an idea,
you're starting your site,

4
00:00:09.133 --> 00:00:13.242
you're like, I'm not gonna do service side rendering,
I'm gonna do a hybrid or what?

5
00:00:13.242 --> 00:00:18.194
Do you have a list or an idea when you're
starting that to pick your starting point?

6
00:00:18.194 --> 00:00:21.610
You know, whether you want it to be
server-side rendered or what.

7
00:00:21.610 --> 00:00:24.715
I'm imagining building something and
thinking like, I want that, and

8
00:00:24.715 --> 00:00:27.359
then getting into going, actually,
that was the wrong choice.

9
00:00:27.359 --> 00:00:30.932
So what you consider at the start.

10
00:00:30.932 --> 00:00:33.040
&gt;&gt; It depends on the framework
that I'm using, right?

11
00:00:33.040 --> 00:00:35.551
But so
because we're talking about Astro today,

12
00:00:35.551 --> 00:00:37.712
I'm gonna answer in the context of Astro.

13
00:00:37.712 --> 00:00:43.529
I start static because
if I need servers later,

14
00:00:43.529 --> 00:00:50.477
you only have to add this, This.

15
00:00:50.477 --> 00:00:54.208
You don't have to refactor anything else
in your site, you're just telling it,

16
00:00:54.208 --> 00:00:58.394
okay, I'm gonna use some server stuff now,
and it's like, okay, do whatever you want.

17
00:00:58.394 --> 00:01:01.394
[LAUGH] I'm not your dad,
you can do whatever you want.

18
00:01:01.394 --> 00:01:04.849
[LAUGH] And I think that's such
a powerful way to think about it.

19
00:01:04.849 --> 00:01:10.319
So to answer that question more
specifically, when I get a new project,

20
00:01:10.319 --> 00:01:16.328
what am typically looking at is, what
are the deliverables that are considered

21
00:01:16.328 --> 00:01:21.725
like the value metrics for the client,
for the customer, for my boss.

22
00:01:21.725 --> 00:01:26.432
And what are the things that,
why are we building this?

23
00:01:26.432 --> 00:01:27.840
What goal does it accomplish?

24
00:01:27.840 --> 00:01:30.398
And in order to accomplish that goal,
what do we have to build?

25
00:01:30.398 --> 00:01:34.482
So if somebody comes to me and
says, we are a fintech company and

26
00:01:34.482 --> 00:01:37.485
you need to build a real
time stock ticker, and

27
00:01:37.485 --> 00:01:41.122
if you're not up to the second
accurate we can get sued.

28
00:01:41.122 --> 00:01:45.712
I'm making very different choices
because that's a very specific

29
00:01:45.712 --> 00:01:49.262
set of requirements that
has legal ramifications.

30
00:01:49.262 --> 00:01:53.177
If somebody tells me we've
got an e commerce store, and

31
00:01:53.177 --> 00:01:57.840
our inventory updates, people,
we sell a few things an hour and so

32
00:01:57.840 --> 00:02:01.611
because of that we need our
inventory to be up to date.

33
00:02:01.611 --> 00:02:04.435
I can make a client side
request to validate whether or

34
00:02:04.435 --> 00:02:06.318
not something is in inventory, and

35
00:02:06.318 --> 00:02:10.296
the inventory itself will rebuild
the site every time something's sold.

36
00:02:10.296 --> 00:02:14.668
And it'll be live within minutes, so
I don't need to do anything else, right?

37
00:02:14.668 --> 00:02:18.356
I don't mind having that little
client side request just to say, hey,

38
00:02:18.356 --> 00:02:19.282
is this sold out?

39
00:02:19.282 --> 00:02:22.050
Because if so, disable this button.

40
00:02:22.050 --> 00:02:25.013
So I'm kind of looking at
what are the requirements?

41
00:02:25.013 --> 00:02:26.784
What does the failure state look like?

42
00:02:26.784 --> 00:02:30.621
What is the consequences of something
being a minute out of date or

43
00:02:30.621 --> 00:02:32.029
5 minutes out of date?

44
00:02:32.029 --> 00:02:34.986
And typically speaking, the penalty for

45
00:02:34.986 --> 00:02:38.965
being 5 minutes out of date is nothing,
nobody cares.

46
00:02:38.965 --> 00:02:41.817
So I'm usually gonna reach for
static by default, and

47
00:02:41.817 --> 00:02:45.723
then when I hit a case, add a newsletter
form, then I can flip the switch and

48
00:02:45.723 --> 00:02:49.208
now I've got pre-rendering for
just that newsletter form page.

49
00:02:49.208 --> 00:02:51.781
Or again, we have to add user accounts.

50
00:02:51.781 --> 00:02:55.064
Maybe I would turn on server rendering for
my user account so

51
00:02:55.064 --> 00:02:59.463
that I can avoid a loading skeleton when
I wanna bring in the user specific data,

52
00:02:59.463 --> 00:03:01.848
I wanna instead do that
on the server side.

53
00:03:01.848 --> 00:03:04.029
It all kind of depends
on what we're doing.

54
00:03:04.029 --> 00:03:08.288
Who's impacted by it,
who our competition is, right?

55
00:03:08.288 --> 00:03:11.025
If I'm building a site where I
have to compete with Amazon,

56
00:03:11.025 --> 00:03:15.025
I'm probably making different choices than
if I'm building a site that has to compete

57
00:03:15.025 --> 00:03:17.128
with the average local restaurant website.

58
00:03:17.128 --> 00:03:22.201
And so it really kind of comes
down to the specific requirements,

59
00:03:22.201 --> 00:03:26.456
the specific client and
what the success criteria is.

60
00:03:26.456 --> 00:03:31.132
But, yeah, I mean as a general rule,
static first, you can turn on hybrid

61
00:03:31.132 --> 00:03:36.049
whenever you want, and there's not
really any consequences for doing that.

62
00:03:36.049 --> 00:03:38.535
&gt;&gt; How would you approach authentication?

63
00:03:38.535 --> 00:03:43.371
&gt;&gt; I would approach authentication
using cookie based auth.

64
00:03:43.371 --> 00:03:48.352
I prefer cookie based auth in general,
because you can do things like HTTP

65
00:03:48.352 --> 00:03:51.866
only cookies and
you can make them same site only and

66
00:03:51.866 --> 00:03:56.865
you get a little more kind of security
baked in from the browser that way.

67
00:03:56.865 --> 00:04:01.774
And if you're doing that, then you've
got the ability through this hybrid

68
00:04:01.774 --> 00:04:05.774
rendering to check the cookies
as part of the rendering flow.

69
00:04:05.774 --> 00:04:11.234
Or if you want, you can also make the
cookies not restricted from JavaScript and

70
00:04:11.234 --> 00:04:14.900
then you can use the cookies
as part of your client side

71
00:04:14.900 --> 00:04:17.855
rendering to determine auth state as well.

72
00:04:17.855 --> 00:04:22.308
So that's how I approach it, and
in Astro I don't think it would be much

73
00:04:22.308 --> 00:04:26.335
different than how I've approached
it in any other framework.

74
00:04:26.335 --> 00:04:29.758
If you need server rendering,
If you've got it, if you don't,

75
00:04:29.758 --> 00:04:33.929
all the client side approaches work,
you can use, also if you wanna add auth,

76
00:04:33.929 --> 00:04:35.632
like auth isn't your business.

77
00:04:35.632 --> 00:04:39.721
There are some great tools out there
like clerk.io that will, my goodness,

78
00:04:39.721 --> 00:04:40.401
it's good.

79
00:04:40.401 --> 00:04:42.976
It just like cleans up that
whole process or clerk.dev.

80
00:04:42.976 --> 00:04:46.663
Let me actually load the website
now that I'm saying that out loud.

81
00:04:46.663 --> 00:04:49.044
Clerk.dev.

82
00:04:49.044 --> 00:04:54.384
You just add it and it just works and
you don't have to think about anything,

83
00:04:54.384 --> 00:04:59.307
it's what I always wanted other auth as a
service platforms to be and

84
00:04:59.307 --> 00:05:01.987
you'd like to get you off the ground.

85
00:05:01.987 --> 00:05:05.495
This is perfect if you need to
custom build your auth, yeah,

86
00:05:05.495 --> 00:05:07.121
get into the cookie stuff.

87
00:05:07.121 --> 00:05:11.229
There's a lot of different ways that you
can build that into both client side and

88
00:05:11.229 --> 00:05:12.774
server rendered workflows.

89
00:05:12.774 --> 00:05:16.158
And in either case,
you can do that with Astro.

90
00:05:16.158 --> 00:05:20.553
&gt;&gt; Is there anything special that has
to be done with serverless functions?

91
00:05:20.553 --> 00:05:23.778
For instance, with the form submission?

92
00:05:23.778 --> 00:05:31.152
Is it better to use a serverless function
or go with a custom Astro server function.

93
00:05:31.152 --> 00:05:36.876
&gt;&gt; So if you are using the server,
like the hybrid mode in Astro,

94
00:05:36.876 --> 00:05:39.850
depending on where you deploy,

95
00:05:39.850 --> 00:05:45.812
it will be a serverless function or
a server rendered function.

96
00:05:49.887 --> 00:05:53.767
I guess the short answer
is it doesn't matter,

97
00:05:53.767 --> 00:05:56.780
like whatever you wanna use is fine.

98
00:05:56.780 --> 00:06:01.257
If you would implement a custom
serverless function as

99
00:06:01.257 --> 00:06:05.646
opposed to using the hybrid
rendering mode in Astro.

100
00:06:05.646 --> 00:06:09.881
Also kind of functionally,
you're gonna get the same outcome,

101
00:06:09.881 --> 00:06:12.114
you just choose which you prefer.

102
00:06:12.114 --> 00:06:16.604
If I already had a bunch of serverless
functions built that did all the form

103
00:06:16.604 --> 00:06:18.132
submissions and stuff.

104
00:06:18.132 --> 00:06:22.788
The advantage of porting those into
an Astro server rendered page are just

105
00:06:22.788 --> 00:06:26.243
having the access right there
to customize the template

106
00:06:26.243 --> 00:06:29.112
with whatever the results
of the request are.

107
00:06:29.112 --> 00:06:31.814
But outside of that, there aren't
a lot of additional huge benefits.

108
00:06:31.814 --> 00:06:36.104
So if all you show is a static template
that says like, thanks for signing up,

109
00:06:36.104 --> 00:06:38.159
please check your email to confirm.

110
00:06:38.159 --> 00:06:41.827
You can just show that page,
you don't need to port that into Astro,

111
00:06:41.827 --> 00:06:46.257
you can keep the stuff you've already got,
submit to your serverless function and

112
00:06:46.257 --> 00:06:50.141
then redirect to that page that says
please check your email to confirm.

113
00:06:50.141 --> 00:06:53.670
But under the hood,
those Astro server rendered pages,

114
00:06:53.670 --> 00:06:58.522
if you deploy to Netlify or Vercel it's
gonna be a serverless function, if you

115
00:06:58.522 --> 00:07:03.300
deploy to some of the other platforms it
might be a long running Node server but

116
00:07:03.300 --> 00:07:06.113
it depends on the specific implementation.

117
00:07:06.113 --> 00:07:09.299
And as we'll see, when we get into
deployment, there are a lot of options for

118
00:07:09.299 --> 00:07:10.682
that specific implementation.

119
00:07:10.682 --> 00:07:15.394
And I haven't looked at what
the underlying details of all of them are.

120
00:07:15.394 --> 00:07:20.362
But yeah, if like you're deploying on
Netlify, the functional difference between

121
00:07:20.362 --> 00:07:25.330
deploying to your own serverless function
and using the Astro, like server rendered

122
00:07:25.330 --> 00:07:29.471
page, there is no difference,
they're both serverless functions.

123
00:07:29.471 --> 00:07:33.338
So at that point, it comes down to like,
what do you want to build?

124
00:07:33.338 --> 00:07:35.055
What does your team understand?

125
00:07:35.055 --> 00:07:38.367
Do you have a really good
serverless workflow on your team,

126
00:07:38.367 --> 00:07:41.093
then you probably don't
need to adopt a new one.

127
00:07:41.093 --> 00:07:43.057
If you don't have any serverless workflow,

128
00:07:43.057 --> 00:07:46.518
Astro is probably gonna be a little more
understandable because it's closer to

129
00:07:46.518 --> 00:07:48.704
the rest of what you're
building on the website.

130
00:07:48.704 --> 00:07:49.585
It's always trade offs.

131
00:07:49.585 --> 00:07:52.387
You've just got to decide which
one makes the most sense for

132
00:07:52.387 --> 00:07:54.305
your team and your particular use case.

