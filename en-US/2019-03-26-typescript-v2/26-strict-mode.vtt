WEBVTT

1
00:00:00.310 --> 00:00:05.010
&gt;&gt; Mike North: The third thing you're
going to do as the third pass is in small

2
00:00:05.010 --> 00:00:10.380
chunks because there's really no benefit
to doing this in a huge single pass.

3
00:00:10.380 --> 00:00:15.690
You're going to turn on strict
TypeScript compiler settings.

4
00:00:15.690 --> 00:00:19.780
So the strict null checks,
that makes it so

5
00:00:19.780 --> 00:00:26.276
that null it's not regarded, sorry I
don't wanna use a double negative here.

6
00:00:26.276 --> 00:00:31.860
With strict null checks set to false, null

7
00:00:31.860 --> 00:00:37.660
is regarded as a valid value in any type.

8
00:00:37.660 --> 00:00:41.190
Not the any type, but you could
have a number whose value is null.

9
00:00:42.310 --> 00:00:44.080
So null fits anywhere.

10
00:00:45.280 --> 00:00:48.590
Strict null check,
set to true, makes it so

11
00:00:48.590 --> 00:00:52.170
that the only thing that
can hold the null is null.

12
00:00:52.170 --> 00:00:54.920
And that's where you're
gonna start shaking out,

13
00:00:54.920 --> 00:00:58.910
branches of your code that returned null
and now you'll have to start introducing

14
00:00:58.910 --> 00:01:04.400
the intersection operator with this
function returns the string or null.

15
00:01:06.190 --> 00:01:13.010
Strict true turns on a bunch of strictness
settings, I won't go too deeply into that.

16
00:01:13.010 --> 00:01:18.730
Strict function types it
validates arguments and

17
00:01:18.730 --> 00:01:23.380
return types of callback types.

18
00:01:23.380 --> 00:01:23.980
So if you say,

19
00:01:23.980 --> 00:01:28.270
I take a mouseListener function as
an argument, strictFunctionTypes will

20
00:01:28.270 --> 00:01:33.020
more rigorously type match against
everything you try to pass to it.

21
00:01:33.020 --> 00:01:36.362
And Bind, Call, Apply,
we've already looked at,

22
00:01:36.362 --> 00:01:40.820
that makes sure that the arguments
passed to function bind, call, and

23
00:01:40.820 --> 00:01:44.560
apply and the lexical scope
all type check appropriately.

24
00:01:46.810 --> 00:01:52.310
And normally, without that last flag
set to true, bind, call, and apply,

25
00:01:52.310 --> 00:01:57.110
you basically lose all type safety
through going into those functions.

26
00:01:58.870 --> 00:02:02.720
So this is where you're trying to get rid
of as many explicit anys as you can and

27
00:02:02.720 --> 00:02:05.660
replace them with more meaningful types.

28
00:02:05.660 --> 00:02:10.510
And you wanna avoid casting,
which is where you're

29
00:02:10.510 --> 00:02:16.300
forcing TypeScript to regard
something as a particular type.

30
00:02:16.300 --> 00:02:21.640
That is done with the as keyword, so
you'd say, regard this as a string.

31
00:02:24.060 --> 00:02:26.607
The more of that you
introduce into your app,

32
00:02:26.607 --> 00:02:29.162
the more your types have
a chance of lying to.

33
00:02:33.329 --> 00:02:34.062
&gt;&gt; Speaker 1: So I mean,

34
00:02:34.062 --> 00:02:39.700
what is the benefit of uplifting
an existing code base to TypeScript?

35
00:02:39.700 --> 00:02:42.540
&gt;&gt; Mike North: They are the same benefits
of using TypeScript in the first place.

36
00:02:43.780 --> 00:02:47.114
&gt;&gt; Speaker 1: The amount of
work you are talking about, and

37
00:02:47.114 --> 00:02:50.410
does that justify those benefits?

38
00:02:50.410 --> 00:02:54.810
&gt;&gt; Mike North: So
it kinda depends on a case-by-case basis.

39
00:02:54.810 --> 00:02:55.510
For example,

40
00:02:55.510 --> 00:02:59.960
if you're talking about some of these
really small JavaScript modules that do

41
00:02:59.960 --> 00:03:04.215
one thing and one thing only, left pad
would be a good example of this, right?

42
00:03:04.215 --> 00:03:08.460
It's adding a prescribed amount of white
space to the beginning of the string,

43
00:03:08.460 --> 00:03:12.470
I'm not sure there's a whole lot of value
in converting that kind of thing to

44
00:03:12.470 --> 00:03:13.450
TypeScript.

45
00:03:13.450 --> 00:03:18.500
However, if you want to use
TypeScript elsewhere on code

46
00:03:18.500 --> 00:03:23.310
that is lacking types, someone has
to provide that type information.

47
00:03:23.310 --> 00:03:28.490
You have two choices, you either can,
through something I'll show you later,

48
00:03:28.490 --> 00:03:33.350
say, regard this whole module as an any,
like anything goes.

49
00:03:33.350 --> 00:03:37.510
When I import something from this module,
let me do whatever I want.

50
00:03:37.510 --> 00:03:43.810
You could do that but that's risky for
the same reason any is a risky elsewhere.

51
00:03:44.850 --> 00:03:49.600
The other option is every consumer
of your library has to kind of

52
00:03:49.600 --> 00:03:55.060
fill in the type information, at least for
the portion they wish to use.

53
00:03:55.060 --> 00:03:59.450
Because the compiler it
is performing a holistic

54
00:03:59.450 --> 00:04:04.210
analysis of your app,
which includes all of it's dependencies.

55
00:04:04.210 --> 00:04:06.310
So, missing type information for

56
00:04:06.310 --> 00:04:10.440
dependencies that causes weakness in
any app that depends on that code.

