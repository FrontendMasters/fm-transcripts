WEBVTT

1
00:00:00.430 --> 00:00:03.665
&gt;&gt; Mike North: So those are top
types that can hold any values.

2
00:00:03.665 --> 00:00:05.925
Let's look at bottom types.

3
00:00:05.925 --> 00:00:08.206
So here's a never.

4
00:00:08.206 --> 00:00:14.420
Never, and all bottom types,
can hold no values.

5
00:00:14.420 --> 00:00:21.320
And a common place you'll see
this is narrowing exhaustively.

6
00:00:21.320 --> 00:00:26.630
So we've got a value x and we're
regarding it as a string or a number.

7
00:00:26.630 --> 00:00:29.830
I just have to cast here because
the compiler's too clever,

8
00:00:31.010 --> 00:00:35.490
even if I tried to make it a string or
a number, it would say, that's a string.

9
00:00:35.490 --> 00:00:37.190
You've initialized it.

10
00:00:37.190 --> 00:00:38.949
But that's all I'm trying to get here.

11
00:00:40.050 --> 00:00:42.440
So I have one condition here for

12
00:00:42.440 --> 00:00:46.370
the string case, one condition here for
the number case.

13
00:00:46.370 --> 00:00:48.990
And you can see here, x is a string.

14
00:00:48.990 --> 00:00:54.820
Here, x is a number and
down here, x is a never.

15
00:00:54.820 --> 00:00:57.050
There's nothing left.

16
00:00:57.050 --> 00:01:01.188
This is TypeScript telling you that
if you've been good about your types,

17
00:01:01.188 --> 00:01:02.510
you can never get here.

18
00:01:04.788 --> 00:01:06.726
&gt;&gt; Mike North: So
that's where you might encounter one.

19
00:01:06.726 --> 00:01:10.130
You're not going to be creating
values of type never, but

20
00:01:10.130 --> 00:01:11.944
this is where you'll see one.

21
00:01:11.944 --> 00:01:14.759
So this is the same example but

22
00:01:14.759 --> 00:01:19.410
we're gonna see if we can
use never to our favor.

23
00:01:19.410 --> 00:01:24.920
And for this, I'm gonna create a new
type of error, I wanna a subclass error.

24
00:01:24.920 --> 00:01:27.920
And will call this UnreachableError.

25
00:01:27.920 --> 00:01:31.520
And it's gonna take
a never as an argument.

26
00:01:31.520 --> 00:01:34.960
The only thing that can type check against

27
00:01:34.960 --> 00:01:38.740
that never argument is
a value of type never.

28
00:01:38.740 --> 00:01:41.630
That's what it means to be a bottom type.

29
00:01:41.630 --> 00:01:43.630
A string won't match it,
a number won't match it.

30
00:01:44.670 --> 00:01:46.380
And then of course, we take a message and

31
00:01:46.380 --> 00:01:48.960
we kind of pass it along after
doing some string interpolation.

32
00:01:50.400 --> 00:01:53.980
So, same example as we had above.

33
00:01:53.980 --> 00:01:55.650
Except I've just changed this to a number.

34
00:01:55.650 --> 00:01:58.100
It doesn't really affect anything.

35
00:01:58.100 --> 00:02:02.190
So we've got our string case,
our number case.

36
00:02:02.190 --> 00:02:04.570
Down here, y is never.

37
00:02:04.570 --> 00:02:07.240
Here's where this starts to get cool.

38
00:02:07.240 --> 00:02:11.910
If I add to this variable the possibility
that it could be a boolean.

39
00:02:13.960 --> 00:02:16.110
We get a type error down here.

40
00:02:17.950 --> 00:02:23.440
So, in creating this subclass of error and
in trying to take y and

41
00:02:23.440 --> 00:02:29.720
ensure that it is a never down
at that last else clause,

42
00:02:29.720 --> 00:02:34.910
I am effectively asserting
that all of the conditions,

43
00:02:34.910 --> 00:02:38.020
all of the possibilities
are already taken care of.

44
00:02:38.020 --> 00:02:40.970
Why should be a never by this point?

45
00:02:40.970 --> 00:02:47.784
So this would alert me if I had
a big intersection type like this.

46
00:02:47.784 --> 00:02:52.029
And I start adding possibilities to it,
adding new things that this could be.

47
00:02:52.029 --> 00:02:57.320
This at compile time is telling me,
now you have unhandled cases.

48
00:02:57.320 --> 00:03:00.456
You've gotta go in and
add something like this.

49
00:03:06.592 --> 00:03:09.790
&gt;&gt; Mike North: Ooh, and
now we're okay again.

50
00:03:09.790 --> 00:03:13.840
Because now, down here,
y is back to never again.

51
00:03:14.890 --> 00:03:20.870
This is what we call an exhaustive
switch or an exhaustive conditional,

52
00:03:20.870 --> 00:03:24.340
and it works equally well with if else and
with case switch.

53
00:03:25.360 --> 00:03:31.640
It ensures that we handle everything
before we reach that last clause.

54
00:03:31.640 --> 00:03:35.450
And in a case switch, you would put
this in your default clause, right?

55
00:03:36.640 --> 00:03:40.338
This is another thing that is in almost
every TypeScript app that I write,

56
00:03:40.338 --> 00:03:41.790
UnreachableError.

57
00:03:41.790 --> 00:03:43.170
That, and IsDefined.

58
00:03:44.960 --> 00:03:47.841
If I was in a desert island, and you gave
me only a couple TypeScript functions,

59
00:03:47.841 --> 00:03:49.280
these would be high on the list, yes.

60
00:03:49.280 --> 00:03:53.792
&gt;&gt; Student: So wouldn't it just not
compile so it would never get into

61
00:03:53.792 --> 00:03:59.000
UnreachableError because why is-
&gt;&gt; Mike North: Excellent question.

62
00:03:59.000 --> 00:04:00.780
&gt;&gt; Student: How do you get
into UnreachableError?

63
00:04:00.780 --> 00:04:02.850
&gt;&gt; Mike North: Excellent,
excellent question.

64
00:04:02.850 --> 00:04:08.970
There are a couple of ways, one,
you could have done some casting.

65
00:04:08.970 --> 00:04:12.910
You could have weakened your types in
such a way that they're lying to you,

66
00:04:12.910 --> 00:04:15.760
and you could end up there.

67
00:04:15.760 --> 00:04:19.960
Just because TypeScript at that point of
code says, this is an array of strings.

68
00:04:21.440 --> 00:04:25.150
Shenanigans that were done elsewhere
in your program can make it so

69
00:04:25.150 --> 00:04:26.960
that's not really an array of strings.

70
00:04:26.960 --> 00:04:28.040
So that's one way.

71
00:04:28.040 --> 00:04:31.640
Another way,
especially if you are writing a library,

72
00:04:31.640 --> 00:04:35.690
you'll have consumers that are not
necessarily using your type information.

73
00:04:35.690 --> 00:04:41.430
So, if I had this in a function and
I was taking y as an argument, there's

74
00:04:41.430 --> 00:04:47.550
nothing stopping someone from passing
a boolean in, or an array, or whatever.

75
00:04:47.550 --> 00:04:50.880
Remember, TypeScript is
a compile time only thing.

76
00:04:50.880 --> 00:04:53.500
And it's not doing these
checks at run-time.

77
00:04:53.500 --> 00:04:58.280
So by the time you make your built
version of something and start going,

78
00:04:59.910 --> 00:05:03.660
all of that checking is
not present anymore.

79
00:05:05.330 --> 00:05:07.070
That took me a while, to be honest,

80
00:05:07.070 --> 00:05:12.460
when I first started using TypeScript
to able to delineate between,

81
00:05:13.570 --> 00:05:18.010
is this a run-time type-checking thing or
a compile time type-checking thing?

82
00:05:18.010 --> 00:05:20.750
Another one is HTTP responses.

83
00:05:20.750 --> 00:05:23.862
I'd love to be able to type
check those as they come in but

84
00:05:23.862 --> 00:05:25.640
TypeScript is not there anymore.

85
00:05:25.640 --> 00:05:33.690
So, no matter what you do, there is
the possibility of that stuff leaking in.

86
00:05:33.690 --> 00:05:37.601
Which is why when we look at
these type guards or like,

87
00:05:37.601 --> 00:05:41.270
IsDefined, which we
were looking at before.

88
00:05:41.270 --> 00:05:44.980
We want to make sure that
the implementation of that function

89
00:05:44.980 --> 00:05:50.200
is the run-time equivalent of the type
guard that we wish to create.

90
00:05:50.200 --> 00:05:57.620
Right, that type of x is not undefined,
that lines up very nicely.

91
00:05:57.620 --> 00:06:01.080
But you could have a type
guard that's not quite right.

92
00:06:01.080 --> 00:06:03.580
And that would very easily
allow you to reach this.

93
00:06:03.580 --> 00:06:06.990
And that's exactly where you want
an exception to be thrown so

94
00:06:06.990 --> 00:06:10.240
that you can go and address that and track
down how you could have gotten there.

95
00:06:10.240 --> 00:06:13.490
&gt;&gt; Student2: Right, so
it's kind of like in the environment of my

96
00:06:13.490 --> 00:06:16.650
TypeScript compilation,
this is never gonna happen.

97
00:06:16.650 --> 00:06:20.270
But if we bundle it up, throw it
out there into the wild, it could.

98
00:06:20.270 --> 00:06:23.910
So that's the case where we're
going to throw the error?

99
00:06:23.910 --> 00:06:25.140
&gt;&gt; Mike North: You're on the right path.

100
00:06:25.140 --> 00:06:29.090
I would only soften it,
TypeScript is telling you,

101
00:06:29.090 --> 00:06:33.340
it's never gonna happen, as long as you've
been totally honest about your types.

102
00:06:33.340 --> 00:06:36.460
The type information for
all libraries you depend on is perfect.

103
00:06:37.610 --> 00:06:43.120
Your type guards are implemented
in a totally correct way.

104
00:06:43.120 --> 00:06:48.020
And some of these are really
hard to get 100% check marks on.

105
00:06:48.020 --> 00:06:51.540
But let's compare it to an alternative,
and let me remove this boolean.

106
00:06:52.800 --> 00:06:55.900
Let's compare it to something else.

107
00:06:55.900 --> 00:07:02.250
If we just intended to handle strings and
numbers, we could have just done this.

108
00:07:02.250 --> 00:07:06.970
But you're never going to find out
about these little incongruities, and

109
00:07:06.970 --> 00:07:10.960
you want to know that they are there so
you can go and address them.

110
00:07:10.960 --> 00:07:14.970
It's something that according to
the types should never happen, but

111
00:07:14.970 --> 00:07:20.550
in practice it happens and you want
to leave yourself some breadcrumbs.

112
00:07:20.550 --> 00:07:25.440
I would call this here,
this is almost as great a JavaScript scene

113
00:07:25.440 --> 00:07:29.760
as an empty catch clause in a try catch.

114
00:07:29.760 --> 00:07:34.130
You're swallowing a type error,
potentially.

115
00:07:34.130 --> 00:07:36.460
Because here, it doesn't matter,
I could add whatever I want.

116
00:07:38.650 --> 00:07:41.290
No clues, no clues anywhere.

117
00:07:41.290 --> 00:07:42.820
This is gonna fall straight through.

118
00:07:44.200 --> 00:07:47.380
So it's nice to have an exhaustive switch.

119
00:07:47.380 --> 00:07:53.490
And this is for languages that feature
a high amount of safety, like Rust.

120
00:07:53.490 --> 00:07:55.890
They have exhaustive switches and

121
00:07:55.890 --> 00:07:59.890
exhaustive conditionals built right
into the programming language.

122
00:07:59.890 --> 00:08:03.650
So it's really nice to have this feature
in a JavaScript targeting thing.

