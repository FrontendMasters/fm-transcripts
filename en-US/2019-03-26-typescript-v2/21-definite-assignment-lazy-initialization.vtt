WEBVTT

1
00:00:00.460 --> 00:00:01.505
&gt;&gt; Mike North: In this situation,

2
00:00:01.505 --> 00:00:05.830
w're just providing an initializer
by kind of another means.

3
00:00:06.910 --> 00:00:11.530
We could just as easily moved this
up as a property initializer.

4
00:00:11.530 --> 00:00:16.600
But I'm pointing out that
we can do in either place.

5
00:00:16.600 --> 00:00:22.980
Additionally, if my TypeScript settings
are correct here and they are.

6
00:00:22.980 --> 00:00:29.122
You'll note that we're getting yelled
at here, ignore this first message.

7
00:00:29.122 --> 00:00:33.791
We just see that a lot, cuz we have a lot
of classes and things that are never read,

8
00:00:33.791 --> 00:00:35.798
cuz it's just a page of examples.

9
00:00:35.798 --> 00:00:40.012
This error message is interesting,
password has no initializer and

10
00:00:40.012 --> 00:00:43.217
it's not definitely assigned
in the constructor.

11
00:00:43.217 --> 00:00:48.530
So what we're seeing here is we've
stated that password is a string.

12
00:00:49.640 --> 00:00:52.030
And for any downstream code,

13
00:00:52.030 --> 00:00:56.460
any methods, they might be
able to access private field.

14
00:00:56.460 --> 00:01:01.050
If they try to access password they
expect to get a string back, and

15
00:01:01.050 --> 00:01:03.520
currently that's not going to happen.

16
00:01:04.910 --> 00:01:12.104
Even if we had a condition here where
if we said like if (phone &gt; 0).

17
00:01:14.019 --> 00:01:18.630
&gt;&gt; Mike North: Initialize this,
we'll still get an error because analyzing

18
00:01:18.630 --> 00:01:22.740
the various paths,
we can take though our contractor.

19
00:01:22.740 --> 00:01:25.520
One or more have been identified where

20
00:01:25.520 --> 00:01:29.040
we would not end up setting
passwords up with the value.

21
00:01:29.040 --> 00:01:31.210
There are couple ways we can handle this.

22
00:01:32.800 --> 00:01:35.080
One way would be to decide
that this is the problem,

23
00:01:35.080 --> 00:01:37.540
we just should always
initiatialize password.

24
00:01:37.540 --> 00:01:45.180
The other way would be to add
the possibility that this is undefined.

25
00:01:45.180 --> 00:01:50.300
And now anyone who attempts to access
password, they'll get string or undefined.

26
00:01:50.300 --> 00:01:55.840
They'll have to use one of those guards
that we showed an example of before.

27
00:01:55.840 --> 00:02:01.480
If (this.password), and then within
that block password will be a string.

28
00:02:01.480 --> 00:02:03.480
So that's one thing we could do.

29
00:02:03.480 --> 00:02:05.068
Here's another thing we could do.

30
00:02:05.068 --> 00:02:10.402
We could use a new operator here and
this is one we'd wanna use

31
00:02:10.402 --> 00:02:18.150
if we really know that phone number like
it's guaranteed to be greater than zero.

32
00:02:18.150 --> 00:02:19.490
Basically you know for

33
00:02:19.490 --> 00:02:24.670
a fact that you're always gonna go down
this branch and it's gonna be okay.

34
00:02:24.670 --> 00:02:28.080
Or maybe every time you
instantiate this class,

35
00:02:28.080 --> 00:02:32.110
you call a method on it to do
some asynchronous setup, right?

36
00:02:32.110 --> 00:02:32.800
Like if we did this.

37
00:02:36.249 --> 00:02:38.364
&gt;&gt; Mike North: An asynchronous
init function,

38
00:02:38.364 --> 00:02:41.769
there's no way to make
a constructor asynchronous.

39
00:02:43.070 --> 00:02:46.130
Sorry, I keep saving
in things auto-format.

40
00:02:46.130 --> 00:02:49.790
There's no way to make something
asynchronous, but perhaps we just know

41
00:02:49.790 --> 00:02:54.038
that wherever we use this, right after
we construct it we call init and

42
00:02:54.038 --> 00:02:58.200
then everything downstream should be
able to depend on password being there.

43
00:02:58.200 --> 00:03:02.620
In this case, we would use something
called the definite assignment operator

44
00:03:02.620 --> 00:03:04.990
and it is an exclamation mark.

45
00:03:04.990 --> 00:03:08.860
What this is saying is
trust me TypeScript,

46
00:03:08.860 --> 00:03:14.890
I'm taking responsibility for making sure
that this field gets initialized properly.

47
00:03:14.890 --> 00:03:20.460
So this is an area where I want
you to let me handle this and

48
00:03:20.460 --> 00:03:24.870
don't cause an error at
this point in the code.

49
00:03:27.210 --> 00:03:32.450
So, where my another useful place for
this kind of thing be?

50
00:03:33.510 --> 00:03:39.790
Raise your hand if you've used Angular,
React, Ember, Polymer, or Vue?

51
00:03:42.080 --> 00:03:48.390
Awesome, so, do you find that you end
up directly instantiating components?

52
00:03:48.390 --> 00:03:52.850
You have a component class, do you find
you are ever calling new component, and

53
00:03:52.850 --> 00:03:57.000
then rendering it and
putting that element in the DOM, or

54
00:03:57.000 --> 00:03:58.420
is the framework handling it for you?

55
00:03:59.430 --> 00:04:01.010
Framework handles it for you.

56
00:04:01.010 --> 00:04:06.790
So there are often life cycle hooks
where you might be setting things up,

57
00:04:06.790 --> 00:04:08.330
setting up properties.

58
00:04:08.330 --> 00:04:13.960
And in an early life cycle hook, you might
take care of putting password in place.

59
00:04:13.960 --> 00:04:17.910
And you just know that this is the first
thing that is gonna be called,

60
00:04:17.910 --> 00:04:20.910
the frameworks doing
the constructor stuff.

61
00:04:20.910 --> 00:04:24.030
I'll take responsibility,
I know there's this little gap,

62
00:04:24.030 --> 00:04:28.170
very early in the life cycle, where
password's not there, but realistically,

63
00:04:28.170 --> 00:04:30.320
I'm not doing anything with that code.

64
00:04:30.320 --> 00:04:33.020
And that simplifies downstream stuff,

65
00:04:33.020 --> 00:04:36.010
where you can just access password,
and trust that it will be there.

66
00:04:38.060 --> 00:04:39.260
Here's another related tip.

67
00:04:40.780 --> 00:04:45.350
Let's say that realistically we don't know
if passwords are gonna necessarily be

68
00:04:45.350 --> 00:04:49.050
there, maybe in the middle
of its life cycle.

69
00:04:49.050 --> 00:04:52.040
Your component might get something, right?

70
00:04:53.430 --> 00:04:55.190
And you still wanna simplify things a bit.

71
00:04:56.280 --> 00:04:58.208
I would do something like this.

72
00:05:01.017 --> 00:05:03.852
&gt;&gt; Mike North: I would have a value
that has the potential to be

73
00:05:03.852 --> 00:05:09.415
undefined,
&gt;&gt; Mike North: And

74
00:05:09.415 --> 00:05:14.241
I could do private get password.

75
00:05:14.241 --> 00:05:20.396
This is just a ECMAScript 5 getter,
ES5 getter, it's worked for a long time.

76
00:05:20.396 --> 00:05:22.321
It works natively in IE11 and 10.

77
00:05:26.631 --> 00:05:30.750
&gt;&gt; Mike North: If the password value
doesn't exist, we'll create it lazily,

78
00:05:35.048 --> 00:05:36.370
&gt;&gt; Mike North: And then return it.

79
00:05:40.271 --> 00:05:46.300
&gt;&gt; Mike North: And
we can say this is definitely a string.

80
00:05:46.300 --> 00:05:50.690
The end result is, here,
we have a property that's a string and

81
00:05:50.690 --> 00:05:56.360
we can access password wherever
we need it, it's lazily created.

82
00:05:56.360 --> 00:06:02.000
The first time we ask for it and
then it's cached on the instance.

83
00:06:02.000 --> 00:06:04.630
And so we could repeatedly go ahead and
keep asking for it,

84
00:06:04.630 --> 00:06:06.970
we still instantiate it once.

85
00:06:06.970 --> 00:06:12.165
But this is another trick for
things that may start out as undefined and

86
00:06:12.165 --> 00:06:16.757
you can kind of create a lazily
instantiated value like this.

87
00:06:19.116 --> 00:06:20.578
&gt;&gt; Mike North: Questions?

88
00:06:20.578 --> 00:06:26.590
Cool, this should be mostly regular
JavaScript stuff, especially that.

89
00:06:26.590 --> 00:06:30.110
It's kind of underutilized but
getters have been around for a while.

