WEBVTT

1
00:00:00.030 --> 00:00:02.280
&gt;&gt; Mike North: So
the next thing am gonna do is obtain

2
00:00:03.360 --> 00:00:05.480
a reference to the type checker.

3
00:00:05.480 --> 00:00:09.300
The type checker,
which is part of the compile,

4
00:00:09.300 --> 00:00:14.970
it is what takes all of the types and
the interface you create.

5
00:00:14.970 --> 00:00:20.390
And the abstract syntax tree which is
the in memory representation of your code,

6
00:00:20.390 --> 00:00:20.957
right?

7
00:00:20.957 --> 00:00:25.633
All of the functions and
the arguments and everything and

8
00:00:25.633 --> 00:00:32.640
it binds them together and identifies
what is going to actually typed check.

9
00:00:32.640 --> 00:00:33.650
What is going to work?

10
00:00:35.160 --> 00:00:37.350
Make sure everything is type equivalent.

11
00:00:37.350 --> 00:00:41.688
So it's gonna be the source of a lot of
the information that we're gonna use to

12
00:00:41.688 --> 00:00:43.126
log out documentation.

13
00:00:43.126 --> 00:00:45.700
We're just gonna log it to the console
to keep things nice and simple.

14
00:00:48.860 --> 00:00:54.288
Next, we'll use the type checker to
obtain the TypeScript symbol and

15
00:00:54.288 --> 00:00:58.803
the symbol is something that
can be imported or exported.

16
00:00:58.803 --> 00:01:03.457
It's something with a name,
remember you have three slots on a symbol,

17
00:01:03.457 --> 00:01:08.050
value, type, and namespace,
that's what we are working with here.

18
00:01:09.120 --> 00:01:11.750
And each file is associated with one.

19
00:01:13.900 --> 00:01:18.640
So we are going to take all of our files,
iterate over them, and

20
00:01:18.640 --> 00:01:23.650
for each file,
we're going to ask the symbol, sorry,

21
00:01:23.650 --> 00:01:28.830
ask the checker for
the symbol at the location of that file.

22
00:01:28.830 --> 00:01:30.170
This is just the way you get,

23
00:01:31.720 --> 00:01:34.940
we're effectively using the language
server a little bit here.

24
00:01:34.940 --> 00:01:39.200
We're saying, we're querying
the checker saying, here's a location.

25
00:01:39.200 --> 00:01:42.490
It is character zero in the file,
basically.

26
00:01:42.490 --> 00:01:46.560
Give me whatever the tool tip would
be there, like what is the symbol?

27
00:01:48.010 --> 00:01:51.020
And then we're filtering out
anything that might be undefined.

28
00:01:51.020 --> 00:01:55.140
If there was a compile error of some sort,
or something was really wrong with one of

29
00:01:55.140 --> 00:01:59.490
our declaration files, some files might
not be associated with the symbol.

30
00:01:59.490 --> 00:02:04.009
If they couldn't successfully type
check and we had our TypeScript

31
00:02:04.009 --> 00:02:08.208
settings really relaxed,
some of these might come back like,

32
00:02:08.208 --> 00:02:11.866
I can't give you anything for
this, it's just gone.

33
00:02:14.729 --> 00:02:20.961
&gt;&gt; Mike North: So now we have symbols,
&gt;&gt; Mike North: And I'm just

34
00:02:20.961 --> 00:02:25.780
gonna uncomment this block here and we'll
just kinda walk through it's step by step.

35
00:02:28.832 --> 00:02:32.280
&gt;&gt; Mike North: Actually,
let's try it out incrementally.

36
00:02:32.280 --> 00:02:36.430
So I'm just going to
logout each symbols name.

37
00:02:36.430 --> 00:02:37.669
We'll start there, that's a good start.

38
00:02:45.995 --> 00:02:49.830
&gt;&gt; Mike North: Okay, so this is giving
us basically the same thing as before.

39
00:02:49.830 --> 00:02:53.400
Let me just make sure my other
console log is gone, and it is.

40
00:02:53.400 --> 00:02:56.530
So this must be producing
this output down here.

41
00:03:00.090 --> 00:03:04.580
A symbol associated with a file,
it's name, is gonna be part of that file.

42
00:03:06.070 --> 00:03:10.740
So if the file has exports,
we will enter this branch here.

43
00:03:11.790 --> 00:03:17.261
So let's try to compile that and run it.

44
00:03:20.177 --> 00:03:23.311
&gt;&gt; Mike North: And we're just,
symbol has a property called exports, and

45
00:03:23.311 --> 00:03:26.370
I'm just grabbing that
right off of the symbol.

46
00:03:26.370 --> 00:03:31.440
Looks like it does have exports,
so let's iterate over the exports.

47
00:03:31.440 --> 00:03:37.851
Their type happens to be something called
an UnderscoreEscapeMap, it's a dictionary.

48
00:03:42.130 --> 00:03:44.105
&gt;&gt; Mike North: Sorry for
all the scrolling,

49
00:03:44.105 --> 00:03:48.530
it's just I wanna reveal this bit
by bit so we can all follow along.

50
00:03:49.670 --> 00:03:52.480
So we're gonna iterate over the export.

51
00:03:52.480 --> 00:03:55.660
And for each export,
we're gonna log out its name and

52
00:03:55.660 --> 00:04:00.060
use this technique with a type
checker to obtain its type.

53
00:04:00.060 --> 00:04:03.912
This is the exact same thing we
used to get each file's symbol,

54
00:04:03.912 --> 00:04:10.270
getSymbolAtLocation, getTypeAtLocation.

55
00:04:10.270 --> 00:04:17.700
So this will give us a type, and then
this is typeToString, self-explanatory.

56
00:04:17.700 --> 00:04:19.060
Let's see what this looks like.

57
00:04:22.854 --> 00:04:28.040
&gt;&gt; Mike North: Here we go, there's the
name of the symbol that's this right here.

58
00:04:28.040 --> 00:04:31.100
And then this prints out this string,

59
00:04:31.100 --> 00:04:35.040
which looks a lot like what
we're seeing in our tool tips.

60
00:04:35.040 --> 00:04:39.890
Now, there are couple steps involved here,

61
00:04:39.890 --> 00:04:45.000
but really, once we create our program,
get ahold of a file,

62
00:04:45.000 --> 00:04:48.200
we can start accessing all its exports and

63
00:04:48.200 --> 00:04:52.162
figure out which one are functions and
start checking on their arguments.

64
00:04:54.570 --> 00:04:58.060
At some point today,
I got a question about JSDoc tags.

65
00:04:58.060 --> 00:05:01.950
I think you asked it, Chase,
where you wondered is this part of what

66
00:05:01.950 --> 00:05:09.260
the TypeScript is parsing or is it
VS Code just adding it to a tool type?

67
00:05:09.260 --> 00:05:15.640
It turns out TypeScript understand
these JSDoc tags, so here's our value.

68
00:05:15.640 --> 00:05:20.295
It's got a method called getjsDocTags and
the rest of this is just getting

69
00:05:20.295 --> 00:05:23.760
it into a form where we can
easily see it in the console,

70
00:05:30.621 --> 00:05:32.010
&gt;&gt; Mike North: And there we go.

71
00:05:32.010 --> 00:05:36.490
So these correspond to
the comments in that code.

72
00:05:36.490 --> 00:05:37.960
Let me open up the code just so

73
00:05:37.960 --> 00:05:42.340
we can compare what's being logged out,
there you go.

74
00:05:42.340 --> 00:05:48.280
There's another way, like property we
could access to see this string up here.

75
00:05:48.280 --> 00:05:55.630
But this looks a lot like what
we're logging out on the bottom.

76
00:05:55.630 --> 00:06:02.240
So if you were interested in checking
your code to make sure that nobody's

77
00:06:02.240 --> 00:06:09.080
accessing this old version of some library
or if you wanted to make sure that

78
00:06:12.360 --> 00:06:16.710
nobody's, you wanted to build
a custom linting rule of some sort,

79
00:06:16.710 --> 00:06:20.220
where you need to understand how all
of this code is assembled together.

80
00:06:20.220 --> 00:06:24.560
TypeScript is a great tool for that,
because it understands JavaScript and

81
00:06:24.560 --> 00:06:26.170
TypeScript equally well.

82
00:06:26.170 --> 00:06:32.040
And you get these pretty reasonable
data structures out that

83
00:06:32.040 --> 00:06:37.000
you can iterate over and crawl through and
use it for something like this.

