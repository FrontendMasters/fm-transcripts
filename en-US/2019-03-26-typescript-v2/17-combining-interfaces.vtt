WEBVTT

1
00:00:00.190 --> 00:00:03.120
&gt;&gt; Mike North: So
we can use index signatures

2
00:00:03.120 --> 00:00:05.390
in combination with other types.

3
00:00:05.390 --> 00:00:09.120
And this is where I'm actually
showing off a couple things here.

4
00:00:09.120 --> 00:00:12.370
Number one, I have created another

5
00:00:12.370 --> 00:00:16.150
interface with the same name of
what we were just using, right?

6
00:00:16.150 --> 00:00:18.297
Up here, we had PhoneNumberDict.

7
00:00:19.511 --> 00:00:22.471
&gt;&gt; Mike North: And
now down here, same exact name.

8
00:00:22.471 --> 00:00:28.960
And if we look at this, if I try to
remove it, we're now getting an error.

9
00:00:30.020 --> 00:00:31.230
So let's look below and

10
00:00:31.230 --> 00:00:36.050
study what we've added in order to figure
out why something might be erroring.

11
00:00:36.050 --> 00:00:38.540
What I've added is new types.

12
00:00:38.540 --> 00:00:42.940
They kind of say we have
new required properties.

13
00:00:42.940 --> 00:00:48.050
Everyone must have a home phone number,
and an office phone number.

14
00:00:48.050 --> 00:00:51.630
And, the index signature still
exists underneath all of that.

15
00:00:51.630 --> 00:00:55.920
So that's what's making it so
if we attempt to delete this up here,

16
00:00:55.920 --> 00:00:58.970
we're getting an issue
where home is missing.

17
00:01:00.050 --> 00:01:02.660
Now we could totally add
another one here safely,

18
00:01:05.003 --> 00:01:05.708
&gt;&gt; Mike North: iPhone,

19
00:01:05.708 --> 00:01:07.210
I just need a comma.

20
00:01:08.730 --> 00:01:12.380
And that's fine and we're free to add and
remove this as we see fit.

21
00:01:12.380 --> 00:01:15.048
So you can use index
signatures in combination with

22
00:01:15.048 --> 00:01:18.969
anything else that we have
learned about object types.

23
00:01:18.969 --> 00:01:22.793
&gt;&gt; Mike North: Often this will be a
fallback where you specify certain things

24
00:01:22.793 --> 00:01:25.700
like, we know we can access these things.

25
00:01:25.700 --> 00:01:30.500
So, for example, it would be
convenient to be handed this thing.

26
00:01:30.500 --> 00:01:34.750
I don't have to check whether home and
the office are undefined.

27
00:01:34.750 --> 00:01:36.390
If you know they're present for

28
00:01:36.390 --> 00:01:40.790
sure, it's much nicer to be handed
this thing that's ready to go.

29
00:01:40.790 --> 00:01:44.265
But, there may be optional
extra stuff there and

30
00:01:44.265 --> 00:01:48.604
an index signature would be
a way to facilitate typing that.

31
00:01:53.083 --> 00:01:55.550
&gt;&gt; Mike North: We kind of
demonstrated this already, but

32
00:01:55.550 --> 00:01:59.250
home is definitely there,
office is definitely there.

33
00:01:59.250 --> 00:02:03.330
Mobile will have to be undefined
due to the index signature.

34
00:02:03.330 --> 00:02:06.126
So what we're seeing here
is declaration merging.

35
00:02:07.151 --> 00:02:12.880
&gt;&gt; Mike North: And we're seeing that we
can stack indexes on top of other things.

36
00:02:12.880 --> 00:02:16.750
The last thing I wanna point out
about interfaces loops back to

37
00:02:16.750 --> 00:02:20.270
the type alias discussion
we were having earlier.

38
00:02:20.270 --> 00:02:25.057
Interfaces are kind of like functions,
they're parsed like functions.

39
00:02:25.057 --> 00:02:28.429
In that,
we know that an interface exists and

40
00:02:28.429 --> 00:02:32.540
has a particular name as we
go through in parse things.

41
00:02:32.540 --> 00:02:35.195
But, only when we attempt
to actually access it and

42
00:02:35.195 --> 00:02:39.580
use it will we end up figuring out what
are the allowable types for this thing.

43
00:02:39.580 --> 00:02:45.290
So, type aliases are kind
of sorted out eagerly,

44
00:02:45.290 --> 00:02:48.830
interfaces are sorted out lazily.

45
00:02:48.830 --> 00:02:52.790
So if we were to go up here to our
first example, and we were to say,

46
00:02:52.790 --> 00:03:00.040
we were to try to figure out
a way to make this type work.

47
00:03:00.040 --> 00:03:05.204
If we were just gonna say,
interface number array and

48
00:03:05.204 --> 00:03:10.924
I'm gonna cheat a little bit here,
&gt;&gt; Mike North: Extends.

49
00:03:13.472 --> 00:03:17.829
&gt;&gt; Mike North: And
array of numVals, semicolon,

50
00:03:17.829 --> 00:03:21.758
now this ends up working, why?

51
00:03:21.758 --> 00:03:26.902
Because this is kind of like,
just like a function that's hoisted so

52
00:03:26.902 --> 00:03:31.440
we can refer to it before it's used or
before it's defined.

53
00:03:32.510 --> 00:03:34.140
Numval, by the time we go through and

54
00:03:34.140 --> 00:03:38.850
sort this out, this is actually happy,
it's an interface now.

55
00:03:38.850 --> 00:03:40.430
Until we get down here and

56
00:03:40.430 --> 00:03:44.510
sort out all of this, we don't necessarily
know what this interface can hold.

57
00:03:44.510 --> 00:03:49.210
But at least we can refer to it and
use it as part of the definition for

58
00:03:49.210 --> 00:03:50.490
the type alias.

59
00:03:50.490 --> 00:03:55.743
So you can create things that
are sort of hierarchical types,

60
00:03:55.743 --> 00:03:58.176
self-reverential types.

61
00:03:58.176 --> 00:04:00.840
Some people call this recursive types, but

62
00:04:00.840 --> 00:04:05.309
you can create things like this through
combining types and interfaces.

63
00:04:07.638 --> 00:04:09.086
&gt;&gt; Mike North: Let's
make sure I'm not lying.

64
00:04:15.307 --> 00:04:16.899
&gt;&gt; Mike North: Looks good, let's try this.

65
00:04:18.816 --> 00:04:19.831
&gt;&gt; Mike North: Looks good.

66
00:04:21.298 --> 00:04:22.880
&gt;&gt; Mike North: Four makes it unhappy.

67
00:04:22.880 --> 00:04:24.832
So it can hold our nested arrays,

68
00:04:24.832 --> 00:04:30.681
it can hold the simple values we're
interested in, everything looks copacetic.

69
00:04:30.681 --> 00:04:31.300
&gt;&gt; Mike North: So that's,

70
00:04:31.300 --> 00:04:34.406
hopefully now you understand
the difference between these two.

71
00:04:34.406 --> 00:04:36.921
Type aliases are eager,
interfaces are lazy.

72
00:04:36.921 --> 00:04:42.108
Type aliases are extremely flexible, they
literally can give a name to any type,

73
00:04:42.108 --> 00:04:46.770
anything you would use as the type
of variable fits in a type alias.

74
00:04:46.770 --> 00:04:50.290
Interfaces or what you would wanna use for

75
00:04:50.290 --> 00:04:53.790
things that are objects which includes
functions and includes arrays.

76
00:04:53.790 --> 00:04:58.220
when I say things that are sub-types of
object I mean in the JavaScript sense.

77
00:04:58.220 --> 00:05:01.640
Things that are immutable things, right?

78
00:05:01.640 --> 00:05:04.520
Everything except the primitive
like string, number,

79
00:05:04.520 --> 00:05:06.892
bully, and symbol and the undefined

