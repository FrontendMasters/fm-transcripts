WEBVTT

1
00:00:00.244 --> 00:00:03.384
&gt;&gt; Mike North: JavaScript has
this thing called lexical scope.

2
00:00:03.384 --> 00:00:06.070
Lexical scope just means,

3
00:00:06.070 --> 00:00:12.039
what is the value of this when
you invoke a function, right?

4
00:00:12.039 --> 00:00:14.251
This is important if you deal with,

5
00:00:14.251 --> 00:00:18.974
building something like a single-page app,
and you have components, and

6
00:00:18.974 --> 00:00:22.694
those components have things
that are bound to DOM events.

7
00:00:22.694 --> 00:00:26.894
You need to make sure that your events
fire in a way that allows you to

8
00:00:26.894 --> 00:00:31.322
access stuff on your component,
to make things nice and convenient.

9
00:00:31.322 --> 00:00:35.711
So this is actually part
of a function signature, so

10
00:00:35.711 --> 00:00:38.514
if you're defining a function?

11
00:00:38.514 --> 00:00:42.945
And usually, it's gonna be a function
that's outside the context of a class,

12
00:00:42.945 --> 00:00:46.001
right, cuz classes already
kinda handle this for us.

13
00:00:46.001 --> 00:00:51.181
But if you're gonna really depend
on being able to do something

14
00:00:51.181 --> 00:00:56.862
like what we're doing here,
we need the value of this to be correct.

15
00:00:56.862 --> 00:01:01.892
So you only need to put in your function
signature at the very beginning,

16
00:01:01.892 --> 00:01:05.026
under a pseudo-parameter called this, and

17
00:01:05.026 --> 00:01:09.903
type-checking will be done to make
sure that everything looks okay.

18
00:01:09.903 --> 00:01:14.687
So I'm gonna create an object that
kind of meets this constraint, so

19
00:01:14.687 --> 00:01:17.584
that we can see, explore how this works.

20
00:01:17.584 --> 00:01:21.356
Has both an email and a phone number,
there we go, down here.

21
00:01:21.356 --> 00:01:26.653
And I'm creating a function
called invokeSoon,

22
00:01:26.653 --> 00:01:33.601
and it's deliberately passing
null along as the lexical scope.

23
00:01:33.601 --> 00:01:35.466
And it's a little bit contrived, but

24
00:01:35.466 --> 00:01:37.919
I'm just trying to show
you kinda how this works.

25
00:01:40.055 --> 00:01:42.219
&gt;&gt; Mike North: So
If we try to invoke this,

26
00:01:42.219 --> 00:01:47.506
we'll see that it's not enough
to just pass email along, right?

27
00:01:47.506 --> 00:01:52.968
We have a string here that can be email or
phone.

28
00:01:52.968 --> 00:01:57.142
No matter which one I pick,
I still get a type-checking error, and

29
00:01:57.142 --> 00:02:00.303
the reason is,
this constraint is not satisfied.

30
00:02:00.303 --> 00:02:02.021
We could solve this two ways,

31
00:02:02.021 --> 00:02:06.780
we could bind the function,
&gt;&gt; Mike North: Create a bound version of

32
00:02:06.780 --> 00:02:07.502
the function.

33
00:02:07.502 --> 00:02:12.678
So behind the scenes, we're creating
a closure around the function,

34
00:02:12.678 --> 00:02:17.432
and ensuring that it's invoked
with the correct lexical scope.

35
00:02:17.432 --> 00:02:20.567
Or we could use call and apply, and

36
00:02:20.567 --> 00:02:26.517
as of a very recent TypeScript release,
it escapes me which one,

37
00:02:26.517 --> 00:02:32.814
you can enable strict type-checking
with bind, call, and apply.

38
00:02:32.814 --> 00:02:35.509
You don't run into this a lot, but
now you understand everything,

39
00:02:35.509 --> 00:02:38.165
everything you really need to know
to get started with functions.

40
00:02:38.165 --> 00:02:44.605
And note that, of course, we don't,
this appears to be an additional argument,

41
00:02:44.605 --> 00:02:48.846
you do not have to pass two
arguments to this function.

42
00:02:48.846 --> 00:02:50.980
This function accepts one parameter,
still.

