WEBVTT

1
00:00:00.090 --> 00:00:02.923
&gt;&gt; Mike North: The next topic we're
going to jump into is classes.

2
00:00:02.923 --> 00:00:08.152
And you're probably familiar with
using classes in regular JavaScript.

3
00:00:08.152 --> 00:00:12.580
TypeScript adds some new concepts
on top of what you're used to.

4
00:00:12.580 --> 00:00:17.849
There is something new we need to
think about in terms of class fields,

5
00:00:17.849 --> 00:00:23.674
and- TypeScript also introduces
the concept of access modifier keywords.

6
00:00:23.674 --> 00:00:28.557
Which allow us to have control
over who can see member data and

7
00:00:28.557 --> 00:00:31.570
member functions on instances.

8
00:00:31.570 --> 00:00:37.626
So let's go to the notes,
to the 4-class-basic.ts file

9
00:00:45.326 --> 00:00:47.249
&gt;&gt; Mike North: So in this example,

10
00:00:47.249 --> 00:00:50.380
you can see a couple things.

11
00:00:50.380 --> 00:00:55.147
The first is that we're using
a new something I've been

12
00:00:55.147 --> 00:00:58.300
calling a heritage clause, right?

13
00:00:58.300 --> 00:01:03.259
Extends is the only thing that we can
use to describe inheriting from another

14
00:01:03.259 --> 00:01:08.150
entity in JavaScript,
that you can say class extends base class.

15
00:01:08.150 --> 00:01:11.645
TypeScript introduces implements, and

16
00:01:11.645 --> 00:01:16.948
that describes a class aligning
with a particular interface.

17
00:01:16.948 --> 00:01:21.740
So HasEmail, we know this type
requires that everything have a name

18
00:01:21.740 --> 00:01:25.120
that's a string and
an email that's a string.

19
00:01:27.984 --> 00:01:32.701
&gt;&gt; Mike North: What this means for
any class that implements this interface,

20
00:01:32.701 --> 00:01:36.973
we have to make sure that these
properties that conform to

21
00:01:36.973 --> 00:01:40.800
that interface are available and
stated upfront.

22
00:01:42.360 --> 00:01:47.630
So, in terms of what this means up here,
this is us

23
00:01:47.630 --> 00:01:52.690
declaring that these member
data fields will exist.

24
00:01:52.690 --> 00:01:55.920
And their type is going to be a string.

25
00:01:55.920 --> 00:02:00.006
Here we're stating that
we accept two parameters

26
00:02:00.006 --> 00:02:04.750
within our constructor,
we accept two parameters.

27
00:02:04.750 --> 00:02:09.560
And down here, we are making sure that we
pass the things our constructor receives

28
00:02:09.560 --> 00:02:13.260
onto the instance, which of course
is this, within the constructor.

