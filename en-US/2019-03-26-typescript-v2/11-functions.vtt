WEBVTT

1
00:00:00.120 --> 00:00:04.900
&gt;&gt; Mike North: The next thing we are gonna
look at is functions, and function types.

2
00:00:04.900 --> 00:00:06.796
So look in the notes folder,

3
00:00:06.796 --> 00:00:11.070
this is the file that starts with
the number 2, function basics

4
00:00:26.178 --> 00:00:28.638
&gt;&gt; Mike North: So I have a function here

5
00:00:28.638 --> 00:00:34.300
called sendEmail and
I have an argument her called to.

6
00:00:35.560 --> 00:00:38.530
And what I'm using here is HasEmail.

7
00:00:38.530 --> 00:00:43.300
And if I do,
at least on a Mac, Cmd, click,

8
00:00:43.300 --> 00:00:48.940
that'll take me to this interface from the
previous notes that we were going through.

9
00:00:48.940 --> 00:00:52.660
I exported this interface
from the previous module, and

10
00:00:53.810 --> 00:00:58.390
you can jump to
the definition of this type.

11
00:00:58.390 --> 00:01:04.940
So I'm gonna be reusing things as we
go along, but this points out that

12
00:01:04.940 --> 00:01:08.620
we can import and export interfaces and
types, just like we can do with values.

13
00:01:09.780 --> 00:01:13.216
This is how we indicate a return type,
and it's actually the same

14
00:01:13.216 --> 00:01:17.292
convention we've been using for
variables, It's colon followed by type.

15
00:01:17.292 --> 00:01:21.666
And this is an object that has two
strings, recipient and body, and

16
00:01:21.666 --> 00:01:27.620
here we're just building up that body
to send, apparently, some spam email.

17
00:01:27.620 --> 00:01:35.630
So this is a place where I tend
to always use type annotations.

18
00:01:36.700 --> 00:01:41.470
And this is because I wanted to find
the contract that this function has

19
00:01:41.470 --> 00:01:43.710
with other parts of my program.

20
00:01:45.050 --> 00:01:49.670
Type script can infer
return types pretty well.

21
00:01:49.670 --> 00:01:52.190
But it's very easy to slip up and

22
00:01:52.190 --> 00:01:56.460
unintentionally change things, which
I'll demonstrate in a couple of minutes.

23
00:01:56.460 --> 00:02:00.540
This is the arrow-function flavor of,
basically,

24
00:02:00.540 --> 00:02:04.760
the same thing, and the only
difference is you have the fat arrows.

25
00:02:04.760 --> 00:02:10.980
So it's the parameter list, colon,
type, fat arrow implementation, right?

26
00:02:10.980 --> 00:02:17.050
Parameter list, colon, type, and then the
fat arrow, and you'll get used to that.

27
00:02:18.830 --> 00:02:21.800
So, return types can be inferred.

28
00:02:21.800 --> 00:02:25.305
This is a function that
will take a contact and,

29
00:02:25.305 --> 00:02:28.740
un terms of what this function needs,

30
00:02:28.740 --> 00:02:33.810
it may typically operate on things that
have way more than just the property name.

31
00:02:33.810 --> 00:02:35.610
But I'm being conservative,

32
00:02:35.610 --> 00:02:40.610
in terms of allowing this operate on
any object that has a property name.

33
00:02:40.610 --> 00:02:46.170
When I'm typing function arguments,
I kinda wanna state the minimum thing

34
00:02:46.170 --> 00:02:51.280
I need, in order to avoid
over-constraining the function, right?

35
00:02:51.280 --> 00:02:56.070
This might be useful elsewhere and
I don't want to artificially impose

36
00:02:56.070 --> 00:02:59.820
additional requirements on
what these arguments must be.

37
00:02:59.820 --> 00:03:01.480
I want it to be as flexible as possible.

38
00:03:02.630 --> 00:03:04.760
And what's happening here is,

39
00:03:04.760 --> 00:03:09.350
we split this string, contact.name,
we split it by weight space.

40
00:03:09.350 --> 00:03:12.190
We throw,
if there are less than two parts.

41
00:03:12.190 --> 00:03:16.240
And then we return an object where
the first part is the first name,

42
00:03:16.240 --> 00:03:18.590
the last part is the last name.

43
00:03:18.590 --> 00:03:23.550
The middle name, if we only have
two parts, ends up being undefined.

44
00:03:23.550 --> 00:03:26.340
Or we join everything
in the middle together.

45
00:03:26.340 --> 00:03:30.730
So, if we look at the return type here,
there it is.

46
00:03:30.730 --> 00:03:35.570
Oops, and we can see that it
is correctly inferred, right?

47
00:03:35.570 --> 00:03:40.380
So the compiler's going through all
possible paths of this program, and

48
00:03:40.380 --> 00:03:45.070
it's figuring out what all
is possible to return here.

49
00:03:45.070 --> 00:03:49.813
If, instead of, so like,
let's say we have this function,

50
00:03:49.813 --> 00:03:54.191
and, at some point,
we need to handle the Madonna case or

51
00:03:54.191 --> 00:03:59.510
the Prince case, where it's just
a mononym, there is no last name.

52
00:04:00.810 --> 00:04:07.698
So we would then go up here and
say If parts.length = 1,

53
00:04:07.698 --> 00:04:12.864
instead of throwing, we can just return,

54
00:04:12.864 --> 00:04:17.900
oops, return { name: parts [0] }.

55
00:04:20.100 --> 00:04:25.870
So now, we've added an additional
possibility here where,

56
00:04:25.870 --> 00:04:31.100
now, we return an object, and typescripts
try to impose some consistency here,

57
00:04:31.100 --> 00:04:35.410
but we've returned something that
potentially has an undefined last name.

58
00:04:36.940 --> 00:04:40.950
In fact, all of these values
will end up being undefined.

59
00:04:42.390 --> 00:04:47.020
So, I may not have intended
this to work in such a way.

60
00:04:47.020 --> 00:04:50.060
And this may affect
other parts of my code.

61
00:04:50.060 --> 00:04:53.060
So, I like to specifically
state a return type,

62
00:04:53.060 --> 00:04:57.030
because it keeps me honest within
all branches of this function,

63
00:04:57.030 --> 00:05:00.020
to make sure that what I'm
returning is intentional.

64
00:05:00.020 --> 00:05:03.410
You know,
sometimes you early terminate, right?

65
00:05:03.410 --> 00:05:09.430
If you determine that this function
that was just called, it's no op now.

66
00:05:09.430 --> 00:05:12.380
And early terminating, what does that,

67
00:05:12.380 --> 00:05:17.080
if I just say return semicolon,
what am I really returning there?

68
00:05:19.380 --> 00:05:25.040
If I invoke a function and it just says
return, semicolon, what value do I get?

69
00:05:25.040 --> 00:05:25.606
Undefined.

70
00:05:25.606 --> 00:05:30.812
So, that will change what this function,
it will change the type this

71
00:05:30.812 --> 00:05:36.383
function returns, and that sort of has
a ripple effect through your code.

72
00:05:36.383 --> 00:05:41.565
And I would rather keep that
boundary very deliberately created,

73
00:05:41.565 --> 00:05:47.870
and operate on both inside and the outside
of the function, to make things work.

74
00:05:51.893 --> 00:05:54.760
&gt;&gt; Mike North: So rest params
work just like you'd just expect,

75
00:05:54.760 --> 00:05:57.410
nothing really interesting here.

76
00:05:57.410 --> 00:06:01.709
The only thing you gotta be aware of
is the type of a rest param has to be

77
00:06:01.709 --> 00:06:03.390
array-like.

78
00:06:03.390 --> 00:06:05.400
Cuz it's gonna be consumed as an array.

