WEBVTT

1
00:00:00.390 --> 00:00:03.840
&gt;&gt; Mike North: So the last thing we're
gonna tackle here is when to use generics.

2
00:00:03.840 --> 00:00:06.330
It's a really, really powerful idea.

3
00:00:06.330 --> 00:00:12.020
But people who run into trouble with types
that begin to explode in complexity,

4
00:00:13.300 --> 00:00:17.500
often that comes from
overzealous use of generics.

5
00:00:18.540 --> 00:00:23.670
And I would also be careful
reading Blog articles.

6
00:00:23.670 --> 00:00:27.378
And question the information
that you see out there.

7
00:00:27.378 --> 00:00:31.572
Because this is one thing that
a lot of content gets wrong.

8
00:00:33.408 --> 00:00:35.083
&gt;&gt; Mike North: I wanna show
you a bad example here.

9
00:00:38.025 --> 00:00:41.085
&gt;&gt; Mike North: So
we've got an interface called shape.

10
00:00:41.085 --> 00:00:43.220
It has a method on it called draw.

11
00:00:44.420 --> 00:00:47.760
Circle extends from shape,
circle has a radius.

12
00:00:47.760 --> 00:00:49.690
So here, we're saying draw shapes.

13
00:00:51.070 --> 00:00:54.940
And we have a type parameter
where S must extend shape.

14
00:00:54.940 --> 00:01:00.200
And we take in an array of S's, and
we iterate over each of those and draw.

15
00:01:02.030 --> 00:01:07.280
Here is another implementation
that just uses a base class here.

16
00:01:07.280 --> 00:01:11.880
So generics are great for
relating two things.

17
00:01:11.880 --> 00:01:17.220
I take in an array of t, and
I give you back a dictionary of t.

18
00:01:17.220 --> 00:01:21.976
The generic, that type parameter,
is what ties those two together.

19
00:01:21.976 --> 00:01:25.040
You give me strings,
I give you back strings, right?

20
00:01:26.320 --> 00:01:30.290
Here, we're only using
this type parameter once.

21
00:01:30.290 --> 00:01:35.440
And you can always eliminate
a type parameter that's used once.

22
00:01:35.440 --> 00:01:37.900
There's a convention that
people like to use where,

23
00:01:37.900 --> 00:01:39.340
I don't disagree with it as much.

24
00:01:40.700 --> 00:01:46.380
Where they'll, for convenience,
use a generic for a type assertion.

25
00:01:46.380 --> 00:01:50.230
For example,
they'll wrap fetch in a function and

26
00:01:50.230 --> 00:01:55.839
allow you to pass a type parameter
indicating the structure of the response.

27
00:01:57.370 --> 00:02:02.140
Okay, I mean,
you could certainly eliminate it, right?

28
00:02:02.140 --> 00:02:05.360
But there is some
convenience factor there.

29
00:02:05.360 --> 00:02:07.695
This kind of thing that you're
looking at in front of you,

30
00:02:07.695 --> 00:02:08.990
there's no convenience here.

31
00:02:08.990 --> 00:02:11.578
This is just unnecessary abstraction.

32
00:02:11.578 --> 00:02:16.110
But what this does show us,
it is useful for one thing.

33
00:02:16.110 --> 00:02:19.970
It does show us that
specifying this type here,

34
00:02:19.970 --> 00:02:22.450
that's what allows us to
access this method draw.

35
00:02:23.970 --> 00:02:27.525
This gets us the same thing as this.

36
00:02:27.525 --> 00:02:33.653
So constraints on type parameters
are equivalent to specifying the type on

37
00:02:33.653 --> 00:02:40.380
an argument, in that it dictates what you
can do within the function on s, right?

38
00:02:40.380 --> 00:02:44.710
In both cases, we've got dot draw,
dot draw, right?

39
00:02:44.710 --> 00:02:46.336
Up here, it's coming from this.

40
00:02:46.336 --> 00:02:47.529
Down here, it's coming from that.

41
00:02:50.547 --> 00:02:51.640
&gt;&gt; Mike North: Yes?

42
00:02:51.640 --> 00:02:57.347
&gt;&gt; Speaker 2: So on line 121,
if shape was not an interface and

43
00:02:57.347 --> 00:03:01.740
it was a type alias, would it not work?

44
00:03:01.740 --> 00:03:05.270
&gt;&gt; Mike North: It will be fine, I think.

45
00:03:05.270 --> 00:03:07.080
Type shape equals this.

46
00:03:07.080 --> 00:03:07.860
Yep, no problem.

47
00:03:09.100 --> 00:03:14.090
This is the, we're in the very
large amount of overlap where

48
00:03:14.090 --> 00:03:18.380
there's no real downside to
choosing one of the other.

49
00:03:18.380 --> 00:03:22.867
&gt;&gt; Speaker 2: Sure, well, I guess I'm
just confused on why on line 121,

50
00:03:22.867 --> 00:03:28.211
if you're passing in shapes and
they have radius, wouldn't that error?

51
00:03:28.211 --> 00:03:32.150
Because it's just expecting
something with only draw.

52
00:03:34.780 --> 00:03:37.200
&gt;&gt; Mike North: Can you articulate
why you would expect it to error so

53
00:03:37.200 --> 00:03:38.170
I can answer that question?

54
00:03:39.280 --> 00:03:42.255
&gt;&gt; Speaker 2: Well, yeah,
so because the interface,

55
00:03:42.255 --> 00:03:47.740
something implements an interface,
but it could have other attributes.

56
00:03:47.740 --> 00:03:49.686
&gt;&gt; Mike North: Totally.
&gt;&gt; Speaker 2: With a type alias,

57
00:03:49.686 --> 00:03:52.882
isn't that like a strict definition?

58
00:03:52.882 --> 00:03:58.225
It has to have this stuff, and
if you pass a circle in to draw shapes to,

59
00:03:58.225 --> 00:04:04.220
and you're only telling it I want a shape,
wouldn't it also expect a radius?

60
00:04:05.240 --> 00:04:09.266
&gt;&gt; Mike North: If I was
demanding circle here, yeah,

61
00:04:09.266 --> 00:04:17.498
I would say this is an overly
&gt;&gt; Mike North: This is asking for

62
00:04:17.498 --> 00:04:21.160
too much,
in that I don't need radius down here.

63
00:04:21.160 --> 00:04:23.360
I have access to radius now.

64
00:04:23.360 --> 00:04:26.102
If I needed this, I would demand circles.

65
00:04:26.102 --> 00:04:28.040
I would say you've gotta pass me circles.

66
00:04:28.040 --> 00:04:32.750
The rule I like to follow is you ask for
only what you need and

67
00:04:32.750 --> 00:04:35.460
you return everything you can.

68
00:04:35.460 --> 00:04:40.190
So you ask for only what you need so
that you can use this with square and

69
00:04:40.190 --> 00:04:44.260
triangle and 2D point,
which is just gonna have an X and Y.

70
00:04:45.440 --> 00:04:49.290
If that's gonna work,
if it's all up to the draw function,

71
00:04:49.290 --> 00:04:51.155
then you need no further details.

72
00:04:51.155 --> 00:04:58.030
This is your minimum requirement,
and you can stick with that.

73
00:04:58.030 --> 00:04:58.700
Now, on the other hand,

74
00:04:58.700 --> 00:05:03.900
if you're returning something,
you want your consumers to be able to

75
00:05:03.900 --> 00:05:10.040
access all of the richness of this
object to whatever degree is safe.

76
00:05:10.040 --> 00:05:14.860
So let's say we had multiple types of
collections, like a list, an array,

77
00:05:14.860 --> 00:05:17.935
which extends list, a linked list.

78
00:05:17.935 --> 00:05:22.308
If array and linked list have special
methods on them, there's no reason for

79
00:05:22.308 --> 00:05:25.610
me to kind of give you back
a very low level base class.

80
00:05:25.610 --> 00:05:28.130
That would prevent you from
safely accessing to reach

81
00:05:28.130 --> 00:05:29.520
functionality underneath.

82
00:05:29.520 --> 00:05:32.400
So ask for only what you need,
return everything you can.

83
00:05:33.820 --> 00:05:34.399
Yes, sir?
&gt;&gt; Speaker 3: So

84
00:05:34.399 --> 00:05:36.195
the two functions are equivalent, then?

85
00:05:36.195 --> 00:05:41.800
But you're saying the top one
is just overkill on the generic?

86
00:05:41.800 --> 00:05:44.824
&gt;&gt; Mike North: They're equivalent, and
they will compile to exactly the same

87
00:05:44.824 --> 00:05:46.958
thing, aside from
the name of the function.

88
00:05:46.958 --> 00:05:51.896
&gt;&gt; Speaker 3: Could you give an example
where you would actually want to do the-

89
00:05:51.896 --> 00:05:55.142
&gt;&gt; Mike North: Absolutely, how about this?

90
00:05:58.466 --> 00:06:00.225
&gt;&gt; Mike North: Let me think for a moment.

91
00:06:00.225 --> 00:06:03.950
An example where the type
parameter would be necessary?

92
00:06:03.950 --> 00:06:06.980
&gt;&gt; Speaker 3: Where you'd actually
want to use it on the generic.

93
00:06:06.980 --> 00:06:08.093
&gt;&gt; Mike North: Yeah, okay, here we go.

94
00:06:12.471 --> 00:06:14.550
&gt;&gt; Mike North: So
I'd have to involve something else.

95
00:06:14.550 --> 00:06:15.421
Sorry, that's not true.

96
00:06:17.070 --> 00:06:18.710
&gt;&gt; Mike North: That's Boolean.

97
00:06:18.710 --> 00:06:23.510
I'd have to introduce a second
use of this type parameter.

98
00:06:23.510 --> 00:06:28.460
For example,
return an array of these things.

99
00:06:28.460 --> 00:06:31.397
And I'd say map, and

100
00:06:35.528 --> 00:06:38.240
&gt;&gt; Mike North: S is drawn true.

101
00:06:38.240 --> 00:06:39.011
Return s.

102
00:06:41.351 --> 00:06:45.778
&gt;&gt; Mike North: So now,
let's see, why is this unhappy?

103
00:06:45.778 --> 00:06:48.910
&gt;&gt; [INAUDIBLE]
&gt;&gt; Mike North: Thank you.

104
00:06:50.572 --> 00:06:54.200
&gt;&gt; Mike North: Okay, so now, the fact
that I'm using this in two places,

105
00:06:54.200 --> 00:06:56.020
this serves a purpose.

106
00:06:56.020 --> 00:07:01.360
Without this, even if I just
were to say it return shape,

107
00:07:01.360 --> 00:07:03.740
we have a significant downside.

108
00:07:03.740 --> 00:07:09.019
In that, if I were to try to say
drawShapes1 and pass an array of circles.

109
00:07:19.042 --> 00:07:20.795
&gt;&gt; Mike North: There is my circle.

110
00:07:20.795 --> 00:07:22.450
What don't you like there?

111
00:07:22.450 --> 00:07:23.886
Radius is a number.

112
00:07:28.316 --> 00:07:33.810
&gt;&gt; Mike North: I'd have to
be explicit about this.

113
00:07:33.810 --> 00:07:39.080
It already is saying this is
an unknown property on shape.

114
00:07:39.080 --> 00:07:39.979
I could create this outside.

115
00:07:45.670 --> 00:07:46.960
&gt;&gt; Mike North: And now, it'll be happy.

116
00:07:46.960 --> 00:07:52.475
But now, I'm in a situation where
if I wanted to chain off of that,

117
00:07:52.475 --> 00:07:56.329
I have reduced this down
to an array of shapes.

118
00:07:56.329 --> 00:07:59.080
I don't have an array of circles anymore.

119
00:08:00.280 --> 00:08:03.047
I didn't get out what I passed in,

120
00:08:03.047 --> 00:08:07.828
I got out the lowest common
thing that the function needed.

121
00:08:07.828 --> 00:08:13.284
Whereas if we return an array of s's,
now radius is present.

122
00:08:13.284 --> 00:08:15.780
&gt;&gt; Speaker 3: If we pass in circles,
you're gonna get circles back.

123
00:08:15.780 --> 00:08:17.849
We pass in squares,
we get the squares back.

124
00:08:17.849 --> 00:08:19.294
&gt;&gt; Mike North: And
you can see it right in the tool tip.

125
00:08:19.294 --> 00:08:23.670
See how all of the s's
have changed to circle?

126
00:08:23.670 --> 00:08:26.610
The blank has been filled
in at this call site.

127
00:08:26.610 --> 00:08:29.670
And this is where type parameter
would get you something.

128
00:08:29.670 --> 00:08:34.701
In that drawShapes does not care
about the particulars of the shape.

129
00:08:34.701 --> 00:08:39.261
But what it will do is give
you back what you passed in.

130
00:08:41.821 --> 00:08:45.415
&gt;&gt; Mike North: Or I could return a promise
that resolves to s or something.

131
00:08:45.415 --> 00:08:49.209
But the key is, I've introduced
a second use of the type parameter.

132
00:08:49.209 --> 00:08:51.470
And that makes this generic worthwhile.

133
00:08:52.690 --> 00:08:59.158
Now, the type parameter is describing a
relationship between arguments and return.

134
00:08:59.158 --> 00:09:04.474
And for like classes, you could say
I take in this in my constructor,

135
00:09:04.474 --> 00:09:07.233
and that method returns this type.

136
00:09:07.233 --> 00:09:10.340
There are many more opportunities
with this classes because you have so

137
00:09:10.340 --> 00:09:12.071
many different parts to them, right?

138
00:09:12.071 --> 00:09:15.099
But you gotta be able to point to two.

139
00:09:15.099 --> 00:09:16.687
If you can't do that,

140
00:09:16.687 --> 00:09:21.631
you may just be using a type parameter
as sort of an assertion, right?

141
00:09:21.631 --> 00:09:26.665
Or you're saying give this
back to me as a string.

142
00:09:26.665 --> 00:09:28.720
Give this back to me as an array.

143
00:09:28.720 --> 00:09:29.980
That's not the same thing.

144
00:09:29.980 --> 00:09:33.240
That's not what type parameters
are typically used for.

