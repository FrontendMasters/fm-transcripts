WEBVTT

1
00:00:00.430 --> 00:00:04.410
&gt;&gt; Mike North: So the first thing
I want us to think about is

2
00:00:04.410 --> 00:00:05.800
defining a dictionary.

3
00:00:06.950 --> 00:00:09.520
So can someone help me flesh this out?

4
00:00:09.520 --> 00:00:11.640
I know this is not a dictionary.

5
00:00:11.640 --> 00:00:16.230
Help me create a dictionary
that uses a type parameter.

6
00:00:16.230 --> 00:00:19.400
So I can make a dictionary with numbers,
or strings, or string arrays.

7
00:00:19.400 --> 00:00:20.532
What would I need to change here?

8
00:00:31.560 --> 00:00:35.870
&gt;&gt; Mike North: So we've just been talking
about generics and type parameters.

9
00:00:35.870 --> 00:00:37.980
I probably need something up here.

10
00:00:43.610 --> 00:00:46.600
What makes a dictionary a dictionary?

11
00:00:47.850 --> 00:00:48.931
How's it different from an array?

12
00:00:48.931 --> 00:00:51.208
&gt;&gt; Speaker 2: All of
the values are the same type.

13
00:00:51.208 --> 00:00:53.540
&gt;&gt; Mike North: All of the values
are of the same type.

14
00:00:53.540 --> 00:00:58.889
So we're going to have something,
and then T.

15
00:01:00.770 --> 00:01:03.910
And how are the values organized
within the dictionary?

16
00:01:05.180 --> 00:01:06.320
&gt;&gt; Speaker 3: Key value pairs.

17
00:01:06.320 --> 00:01:12.650
&gt;&gt; Mike North: Key value pairs,
and how do we type an arbitrary

18
00:01:12.650 --> 00:01:18.400
key access in TypeScript
where I can pass in

19
00:01:18.400 --> 00:01:22.150
home or Office or iPhone and
get a phone number back?

20
00:01:22.150 --> 00:01:25.800
&gt;&gt; Speaker 2: So you have that array
where k colon and then the type.

21
00:01:25.800 --> 00:01:27.220
&gt;&gt; Mike North: Perfectly described.

22
00:01:27.220 --> 00:01:31.690
&gt;&gt; Speaker 2: Is the k special in any way,
or can that be anything?

23
00:01:31.690 --> 00:01:32.710
&gt;&gt; Mike North: It can be whatever we want.

24
00:01:34.500 --> 00:01:38.639
&gt;&gt; Speaker 2: Is that convention?

25
00:01:38.639 --> 00:01:40.924
&gt;&gt; Mike North: So
I call it k, because of key.

26
00:01:40.924 --> 00:01:45.306
It's the equivalent of naming
a function argument, and

27
00:01:45.306 --> 00:01:48.327
this is just the type that goes with it.

28
00:01:48.327 --> 00:01:50.543
There we go.

29
00:01:50.543 --> 00:01:56.607
And I'm gonna follow
the convention of acknowledging

30
00:01:56.607 --> 00:02:01.630
that if I pass in key I
might get nothing back.

31
00:02:03.140 --> 00:02:05.000
How would I add that to this type?

32
00:02:08.220 --> 00:02:09.629
&gt;&gt; Speaker 2: Or undefined question mark.

33
00:02:09.629 --> 00:02:14.059
&gt;&gt; Mike North: Good, actually,
we got two good answers.

34
00:02:14.059 --> 00:02:21.779
So I can do it this way and

35
00:02:21.779 --> 00:02:27.183
I'm gonna go out

36
00:02:27.183 --> 00:02:34.520
on a limb here, oops.

37
00:02:34.520 --> 00:02:37.710
Yep, looks like the optional
is not gonna work.

38
00:02:37.710 --> 00:02:39.827
That's a very good guess though, that we,

39
00:02:39.827 --> 00:02:43.387
I would expect that to be something
that they'd introduce in the future.

40
00:02:43.387 --> 00:02:48.090
There's really no,
nothing is stopping them.

41
00:02:48.090 --> 00:02:54.634
In fact, I don't wanna get too deep
into more advanced things here.

42
00:02:54.634 --> 00:02:58.992
There is a way that you could specify
with the question mark, but you're both

43
00:02:58.992 --> 00:03:03.835
right in that either we'll introduce the
possibility of the value being undefined.

44
00:03:03.835 --> 00:03:06.976
Great, so
according to the use of these things,

45
00:03:06.976 --> 00:03:11.360
if these are gonna be like
free-standing functions.

46
00:03:11.360 --> 00:03:14.066
The first thing we are gonna
pass in is a dictionary.

47
00:03:18.128 --> 00:03:23.167
&gt;&gt; Mike North: So
we're gonna make it a DictT.

48
00:03:23.167 --> 00:03:26.364
It's saying cannot find name T.

49
00:03:26.364 --> 00:03:29.165
Anyone have an idea of
what's missing here?

50
00:03:29.165 --> 00:03:34.441
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Mike North: A constraint?

51
00:03:34.441 --> 00:03:36.970
I don't think we need
a constraint right now.

52
00:03:36.970 --> 00:03:39.394
&gt;&gt; Speaker 2: Function T is T.

53
00:03:39.394 --> 00:03:41.230
&gt;&gt; Mike North: Function should
have a generic T, right?

54
00:03:41.230 --> 00:03:44.550
We have to state kind of up front that.

55
00:03:44.550 --> 00:03:49.814
This function, like T is not
a reference to an interface called T,

56
00:03:49.814 --> 00:03:55.830
there is a type perimeter that this
function uses and it is called T, great.

57
00:03:55.830 --> 00:03:59.625
And I'm gonna add
the mapping function here.

58
00:03:59.625 --> 00:04:02.958
So conceptually, when we use array.map,

59
00:04:02.958 --> 00:04:07.910
how would you describe
the function that we pass in?

60
00:04:07.910 --> 00:04:08.780
What's its purpose?

61
00:04:10.400 --> 00:04:13.500
&gt;&gt; Speaker 2: To loop through
whatever array you have?

62
00:04:13.500 --> 00:04:17.050
&gt;&gt; Mike North: Sure,
we iteratively invoke that function.

63
00:04:17.050 --> 00:04:19.640
And what does the function do?

64
00:04:19.640 --> 00:04:21.477
&gt;&gt; Speaker 4: Transforming it.
&gt;&gt; Mike North: It transforms it,

65
00:04:21.477 --> 00:04:25.640
potentially from one type to another type,
right?

66
00:04:25.640 --> 00:04:29.985
So, in this case,
we should probably take an argument of T,

67
00:04:29.985 --> 00:04:35.250
cuz we're iterating over data
structure that has values of T.

68
00:04:35.250 --> 00:04:37.230
And we're spitting out something else.

69
00:04:38.270 --> 00:04:42.790
I want to introduce another type parameter
because that's what we're transforming to.

70
00:04:44.500 --> 00:04:47.180
And I'll fill in the function in a second,
but

71
00:04:49.520 --> 00:04:54.760
we're gonna return a dictionary
of these transformed values.

72
00:04:54.760 --> 00:04:56.720
Now all that's left is for
us to define the function itself.

73
00:04:59.453 --> 00:05:05.634
&gt;&gt; Mike North: Arg is a T and
it returns an S.

74
00:05:09.342 --> 00:05:11.168
&gt;&gt; Speaker 2: Can you
ignore the index argument?

75
00:05:12.490 --> 00:05:14.690
&gt;&gt; Mike North: Can I
ignore the index argument?

76
00:05:14.690 --> 00:05:18.080
&gt;&gt; Speaker 2: The second
argument in a map function.

77
00:05:18.080 --> 00:05:23.766
&gt;&gt; Mike North: You could, it wouldn't,
like in terms of using array.map,

78
00:05:23.766 --> 00:05:27.580
that would sort of defeat the purpose.

79
00:05:27.580 --> 00:05:31.310
The function is the definition
of the work to be done.

80
00:05:31.310 --> 00:05:36.030
We could make it optional and then
just return the same dictionary again,

81
00:05:36.030 --> 00:05:41.170
but to me that would be a sign of misuse,
right?

82
00:05:41.170 --> 00:05:46.023
All we could do is iterate
over the array and do nothing.

83
00:05:46.023 --> 00:05:52.023
Right, so without instructions as to how
to transform from one type to another,

84
00:05:52.023 --> 00:05:54.860
I would say there's no point in this.

85
00:05:54.860 --> 00:05:57.399
So I would keep it mandatory in this case.

86
00:05:57.399 --> 00:06:01.698
&gt;&gt; Speaker 2: I mean like for
the function type Arg is T, but

87
00:06:01.698 --> 00:06:06.112
then as the second argument
of that function Is

88
00:06:06.112 --> 00:06:09.606
an index of type number
&gt;&gt; Mike North: Sorry, thank you,

89
00:06:09.606 --> 00:06:10.249
absolutely.

90
00:06:13.344 --> 00:06:15.288
&gt;&gt; Mike North: Yeah we
could totally do that and

91
00:06:15.288 --> 00:06:17.850
we don't need to make it optional.

92
00:06:17.850 --> 00:06:22.620
Because the way that
the type equivalent works,

93
00:06:22.620 --> 00:06:27.370
if a function chooses to not
receive that argument, that's fine.

94
00:06:27.370 --> 00:06:30.920
If we made it optional, we're indicating
that we may be providing it, but

95
00:06:30.920 --> 00:06:32.310
it could come through as undefined,

96
00:06:32.310 --> 00:06:36.800
which is not what's likely to happen,
so let's implement this.

97
00:06:39.430 --> 00:06:42.570
Conveniently, it's easy to create
an empty dictionary, right?

98
00:06:42.570 --> 00:06:44.020
We're gonna create an empty dictionary.

99
00:06:44.020 --> 00:06:47.690
We're gonna loop over
the existing dictionary and

100
00:06:47.690 --> 00:06:51.500
populate the thing that
we're going to return.

101
00:06:51.500 --> 00:06:52.198
And then we'll return it.

102
00:07:00.118 --> 00:07:01.080
&gt;&gt; Mike North: So there you go.

103
00:07:02.120 --> 00:07:07.503
That's the easy part, and now how do
we iterate over an object's keys?

104
00:07:10.829 --> 00:07:16.334
&gt;&gt; Speaker 2: Object.keys
&gt;&gt; Mike North: Good, Object.keys(dict),

105
00:07:16.334 --> 00:07:20.359
and I'll just use forEach, and

106
00:07:20.359 --> 00:07:24.842
this receives a value and an index.

107
00:07:24.842 --> 00:07:28.303
And that'll be useful to pass along.

108
00:07:28.303 --> 00:07:35.629
And we'll say we're gonna place
in the output dictionary,

109
00:07:35.629 --> 00:07:40.798
sorry I'm gonna rename this for clarity,

110
00:07:40.798 --> 00:07:46.697
under the same dictionary
key what do we do next?

111
00:07:51.782 --> 00:07:53.570
&gt;&gt; Mike North: Gotta use that function,
right?

112
00:07:53.570 --> 00:07:54.982
I'm almost done and I haven't use it yet.

113
00:07:57.617 --> 00:08:03.460
&gt;&gt; Mike North: So this function is made
to take in a T in an index and return S.

114
00:08:13.205 --> 00:08:16.292
&gt;&gt; Mike North: dict and, dKey.

115
00:08:16.292 --> 00:08:17.202
Great, thank you.

116
00:08:19.460 --> 00:08:23.780
&gt;&gt; Mike North: And
this is of type T or undefined, right?

117
00:08:23.780 --> 00:08:28.300
Cuz In theory, there could be
something missing in this dictionary.

118
00:08:28.300 --> 00:08:32.485
Could be someone who's deliberately placed
an undefined value in there trolling us.

119
00:08:35.739 --> 00:08:40.479
&gt;&gt; Mike North: If,
&gt;&gt; Mike North: This item and

120
00:08:40.479 --> 00:08:45.629
will return, sorry, not return, we'll only

121
00:08:45.629 --> 00:08:52.119
place the output item in this
dictionary if it's defined.

122
00:08:52.119 --> 00:08:55.180
I've gotta be careful here.

123
00:08:55.180 --> 00:08:58.999
I just realized what about zeroes and
empty strings and other palsy things?

124
00:09:04.738 --> 00:09:07.780
&gt;&gt; Mike North: There we go,
that's more thorough, right?

125
00:09:07.780 --> 00:09:10.610
So we're looping over all of
the keys in the dictionary.

126
00:09:10.610 --> 00:09:13.360
We're grabbing each value if it's defined.

127
00:09:13.360 --> 00:09:18.000
Transform it, pass it along that,
transform it using this function by

128
00:09:18.000 --> 00:09:22.330
passing along the original value and the
index, we get the transformed value out.

129
00:09:22.330 --> 00:09:24.140
And now we return this thing.

130
00:09:24.140 --> 00:09:28.930
This is a place where we're using,
we can point to the places we're using

131
00:09:28.930 --> 00:09:33.570
the type parameters, and
it's quite necessary, right?

132
00:09:33.570 --> 00:09:36.470
So we take in a dictionary of type T.

133
00:09:36.470 --> 00:09:39.490
T helps us type the function
we're using to transform.

134
00:09:40.800 --> 00:09:45.627
And the function we receive returns
something and that how we'll be

135
00:09:45.627 --> 00:09:50.293
able to infirm what S should and
that determines our output type.

136
00:09:50.293 --> 00:09:55.201
So check out how I can use this.

137
00:09:55.201 --> 00:09:59.429
mapDict, do I have one already created,
no.

138
00:09:59.429 --> 00:10:03.291
So we'll create a, we'll just strings.

139
00:10:07.960 --> 00:10:10.910
&gt;&gt; Mike North: And I'll have a function
here that'll take the string as

140
00:10:10.910 --> 00:10:11.655
an argument.

141
00:10:14.996 --> 00:10:18.223
&gt;&gt; Mike North: And
if I return an array of strings,

142
00:10:18.223 --> 00:10:22.964
mapDict will return
a dictionary of string arrays.

143
00:10:22.964 --> 00:10:27.938
If I where to wrap it
in an object like this,

144
00:10:27.938 --> 00:10:35.141
it's error functions we've
already met as a function body.

145
00:10:35.141 --> 00:10:38.416
Now it's a dictionary of
sort of wrapped values.

146
00:10:38.416 --> 00:10:43.320
Notice I had to use type parameters
to define what this thing does,

147
00:10:43.320 --> 00:10:47.710
but where I'm calling it,
this looks relatively simple.

148
00:10:47.710 --> 00:10:52.020
The types kind of just work,
the blanks are filled in, and

149
00:10:52.020 --> 00:10:56.470
they're inferred by the arguments
that I'm passing to this function.

150
00:10:56.470 --> 00:10:59.870
They don't have to be
explicitly specified.

151
00:11:01.010 --> 00:11:03.580
So this will be like a well

152
00:11:03.580 --> 00:11:08.680
chosen use of generics in that it's
a really flexible piece of code.

153
00:11:08.680 --> 00:11:11.270
The types that it returns.

154
00:11:11.270 --> 00:11:15.600
You have as much level of specificity and

155
00:11:15.600 --> 00:11:18.310
detail that you need in
order to carry them forward.

156
00:11:18.310 --> 00:11:19.826
And I don't have to
provide anything explicit.

157
00:11:19.826 --> 00:11:26.343
We'll make sure that the solution to the
reduce exercise here will be in the repo.

158
00:11:26.343 --> 00:11:29.440
And it follows a similar pattern.

