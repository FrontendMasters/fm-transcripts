WEBVTT

1
00:00:00.200 --> 00:00:04.292
&gt;&gt; Mike North: So the next thing we're
gonna do is jump into kind of a crush

2
00:00:04.292 --> 00:00:09.568
course around TypeScript and how we
would add types to modern JavaScript.

3
00:00:09.568 --> 00:00:14.640
At a high level we're gonna talk about
variables, ordered data structures

4
00:00:14.640 --> 00:00:19.930
like arrays and tuples, and
tuples are just a specific kind of array.

5
00:00:19.930 --> 00:00:23.792
We'll talk a little bit about objects and

6
00:00:23.792 --> 00:00:29.872
then the equivalent of the logical AND
and OR operator end types.

7
00:00:29.872 --> 00:00:32.773
So we call these union and
intersection types, but

8
00:00:32.773 --> 00:00:35.144
they will remind you a lot of AND, and OR.

9
00:00:36.475 --> 00:00:38.686
So we're gonna switch away
from this slide here.

10
00:00:38.686 --> 00:00:42.837
But if you wanna follow along,
there are a bunch of files in

11
00:00:42.837 --> 00:00:47.795
the notes folder of the exercises
of this workshop project.

12
00:00:47.795 --> 00:00:52.323
And I've done this deliberately so
that you can hover over things, and

13
00:00:52.323 --> 00:00:56.110
look at what the tooltip say,
and kind of poke around at it.

14
00:00:56.110 --> 00:00:58.987
So like feel free to do
that as we're discussing,

15
00:00:58.987 --> 00:01:03.930
because your editor is gonna give you
a lot of feedback about what's going on.

16
00:01:03.930 --> 00:01:07.392
And I'm gonna walk through and
uncomment things step by step so

17
00:01:07.392 --> 00:01:11.195
that we can kind of learn about how
TypeScript works incrementally.

18
00:01:19.614 --> 00:01:25.177
&gt;&gt; Mike North: Notes/1, here we go.

19
00:01:25.177 --> 00:01:29.690
So, first let's look at
point number 1 here.

20
00:01:29.690 --> 00:01:34.418
This is just a regular
JavaScript statement, right?

21
00:01:34.418 --> 00:01:38.475
It is a variable declaration,
that's what we would call it.

22
00:01:38.475 --> 00:01:41.230
Like I declare that x exists.

23
00:01:41.230 --> 00:01:42.826
It's a let declaration.

24
00:01:42.826 --> 00:01:47.892
Anybody know what makes this
different from a const declaration?

25
00:01:47.892 --> 00:01:49.635
What's the difference between let and
const?

26
00:01:49.635 --> 00:01:50.201
&gt;&gt; Speaker 2: Reassignment.

27
00:01:50.201 --> 00:01:54.510
&gt;&gt; Mike North: Reassignment, so
let can be reassigned, const cannot.

28
00:01:54.510 --> 00:01:57.795
The type of x ends up being string.

29
00:01:57.795 --> 00:01:59.840
That's what our tooltip tells us.

30
00:01:59.840 --> 00:02:03.156
And that makes sense because we're
initializing it with a string.

31
00:02:03.156 --> 00:02:06.860
You don't really have to do too
much work to understand that.

32
00:02:06.860 --> 00:02:08.581
What we're seeing here is inference.

33
00:02:08.581 --> 00:02:11.440
We don't have to type absolutely
everything in our app.

34
00:02:11.440 --> 00:02:13.852
In fact it would be a bad idea to do so.

35
00:02:13.852 --> 00:02:18.706
You kind of end up typing yourself into
a corner, you make your program very,

36
00:02:18.706 --> 00:02:21.410
very rigid if you type every single thing.

37
00:02:22.700 --> 00:02:28.531
So just like any let declaration,
we're able to reassign

38
00:02:28.531 --> 00:02:34.483
it without running into any trouble,
x = "hello mars".

39
00:02:34.483 --> 00:02:39.344
The new thing that TypeScript is
throwing at us is we get an error here

40
00:02:39.344 --> 00:02:45.110
if we attempt to assign it to a value
that's not of the correct type.

41
00:02:45.110 --> 00:02:49.916
And the error we're getting is,

42
00:02:49.916 --> 00:02:55.586
42 is not assignable to type string.

43
00:02:55.586 --> 00:02:59.760
This is obviously telling us that
there's a mismatch of some sort.

44
00:02:59.760 --> 00:03:05.418
And we'll explain why this 42 is here
instead of a number in just a moment.

45
00:03:07.980 --> 00:03:09.984
&gt;&gt; Mike North: Or
instead of the word number.

46
00:03:09.984 --> 00:03:14.090
So let's look at the same example but
with a const declaration.

47
00:03:14.090 --> 00:03:16.430
The type is different here.

48
00:03:16.430 --> 00:03:23.638
The type of y is literally
the string hello world.

49
00:03:23.638 --> 00:03:28.461
And the reason for this,
the reason that we can make this type so

50
00:03:28.461 --> 00:03:30.372
much more specific, and

51
00:03:30.372 --> 00:03:36.025
it's specific because this variable
cannot hold any arbitrary string.

52
00:03:36.025 --> 00:03:41.770
If we think of types as sets, right,
it's like buckets of allowed values.

53
00:03:41.770 --> 00:03:46.152
Our let declaration,
that variable could hold any string.

54
00:03:46.152 --> 00:03:52.777
This can hold specifically a string whose
value is hello world, and no other string.

55
00:03:52.777 --> 00:03:58.234
If we tried to change it down here and set
it to, well if we tried to reassign it,

56
00:03:58.234 --> 00:04:03.030
we'd run into a problem in general,
because it's a const.

57
00:04:03.030 --> 00:04:07.354
But if we tried to pass it into

58
00:04:07.354 --> 00:04:11.500
a function that wants hello

59
00:04:11.500 --> 00:04:18.899
mars,
&gt;&gt; Mike North: We'd

60
00:04:18.899 --> 00:04:22.416
run into a problem here
saying "hello world" and

61
00:04:22.416 --> 00:04:25.619
"hello mars" are not compatible, right?

62
00:04:25.619 --> 00:04:28.890
So this is what we would
call a literal type.

63
00:04:28.890 --> 00:04:33.385
And that means you're enumerating
a set of allowed values,

64
00:04:33.385 --> 00:04:37.981
specific string, specific numbers,
something like that.

65
00:04:37.981 --> 00:04:42.100
And you really could only pick
from one of that set of options.

66
00:04:42.100 --> 00:04:47.671
Now this is TypeScript being
specific because it can.

67
00:04:47.671 --> 00:04:50.170
And it makes us kind of
wanna revisit the let here.

68
00:04:50.170 --> 00:04:54.673
So if the let declaration
were to take on a value.

69
00:04:54.673 --> 00:04:57.825
If that variable were to take
on a value of whatever string we

70
00:04:57.825 --> 00:05:02.440
initialized it with up here, we would have
run into trouble in reassignment, right?

71
00:05:02.440 --> 00:05:07.669
If it were instead of calling itself
string, if it were to say hello world,

72
00:05:07.669 --> 00:05:11.988
now it's like set itself up to
be way too specific by default.

73
00:05:11.988 --> 00:05:17.335
So this is one place where TypeScript
is trying to be as useful and

74
00:05:17.335 --> 00:05:21.460
strict as it can without
getting in your way.

75
00:05:21.460 --> 00:05:26.516
When you're dealing with a value that's
not reassignable, and the value itself

76
00:05:26.516 --> 00:05:31.645
is immutable, we can't change this string,
we can't re-assign the variable,

77
00:05:31.645 --> 00:05:35.185
it's set in stone,
we can be maximally specific there.

78
00:05:35.185 --> 00:05:39.789
We'll see this come up a couple of
times as we explore different things.

79
00:05:39.789 --> 00:05:40.470
Yes?

80
00:05:40.470 --> 00:05:42.460
&gt;&gt; Speaker 2: I have two questions,
one of them is simpler.

81
00:05:42.460 --> 00:05:47.218
So when the tool tip shows up with
the comment, is that a feature of native

82
00:05:47.218 --> 00:05:52.140
TypeScript or is it a feature of
TypeScript's compatibility with JSDoc?

83
00:05:52.140 --> 00:05:53.790
&gt;&gt; Mike North: When we
see the comment pop up?

84
00:05:53.790 --> 00:05:55.093
&gt;&gt; Speaker 2: Yeah, yeah.

85
00:05:55.093 --> 00:05:58.298
&gt;&gt; Mike North: So you're asking
about this down here, good question.

86
00:05:58.298 --> 00:06:03.888
So you said,
is it a feature of native TypeScript or

87
00:06:03.888 --> 00:06:08.572
a feature of JSDoc and the editor, right?

88
00:06:08.572 --> 00:06:12.690
Kind of both, TypeScript can
understand those comments and

89
00:06:12.690 --> 00:06:17.400
language server is actually pushing
that comment data up to us.

90
00:06:17.400 --> 00:06:21.544
So the end of the when we start
playing with TypeScript compiler API,

91
00:06:21.544 --> 00:06:25.058
we're gonna build a quick and
dirty documentation tool.

92
00:06:25.058 --> 00:06:32.427
And you'll see that in addition to parsing
the executable code the inert comments,

93
00:06:32.427 --> 00:06:38.080
come a long with it and
we can actually even grab JSDoc tags.

94
00:06:38.080 --> 00:06:42.591
So comments are entirely
inert in TypeScript.

95
00:06:42.591 --> 00:06:47.269
There are certain things you can
do that will affect the output,

96
00:06:47.269 --> 00:06:52.910
one example would be if we did @internal,
this is recently added.

97
00:06:52.910 --> 00:06:56.535
This is a special JSDoc
tag that will mean,

98
00:06:56.535 --> 00:07:01.681
even if this was exported,
leave out the type information.

99
00:07:01.681 --> 00:07:04.780
We may export it for
the purpose of testing this value.

100
00:07:04.780 --> 00:07:07.287
We might wanna import it in tests.

101
00:07:07.287 --> 00:07:11.121
But your declaration files,
those .d.ts files,

102
00:07:11.121 --> 00:07:15.302
those won't have anything
about this specific type, or

103
00:07:15.302 --> 00:07:19.932
this symbol, not a JavaScript symbol,
a TypeScript symbol.

104
00:07:19.932 --> 00:07:23.536
&gt;&gt; Speaker 2: Cool, and then the other
thing I was going to ask was, so

105
00:07:23.536 --> 00:07:26.990
for declaring with const,
and it's like an object,

106
00:07:26.990 --> 00:07:31.239
with keys defined obviously like,
you're getting there.

107
00:07:31.239 --> 00:07:33.713
&gt;&gt; Mike North: Great question,
sorry to cut you off there,

108
00:07:33.713 --> 00:07:37.958
I just know exactly where you're going,
so let's try this a different way.

109
00:07:37.958 --> 00:07:46.900
Const yObj =,
&gt;&gt; Mike North: So same deal, right?

110
00:07:46.900 --> 00:07:49.955
We have const declaration
whose value is an object.

111
00:07:49.955 --> 00:07:54.170
It's going to take on the type,
just as it did.

112
00:07:54.170 --> 00:07:59.447
Now, note that the value of, sorry,
the type of foo within the object

113
00:07:59.447 --> 00:08:04.113
ends up being a string, why,
because the object is mutable.

114
00:08:04.113 --> 00:08:08.914
Consts can't be reassigned, and that
means we can expect the property names in

115
00:08:08.914 --> 00:08:12.960
this object to,
we'll want them to remain what they are.

116
00:08:12.960 --> 00:08:17.058
The assumption is you set this up
deliberately with the properties you

117
00:08:17.058 --> 00:08:20.670
wanted there and if you wanted
to add additional properties,

118
00:08:20.670 --> 00:08:23.884
you would have to give
TypeScript the clue about that.

119
00:08:23.884 --> 00:08:32.730
But we'd be done here in JavaScript to do
yobj.foo = "bye", that's totally allowed.

120
00:08:32.730 --> 00:08:37.302
And if TypeScript would have taken
on the literal value, hello,

121
00:08:37.302 --> 00:08:42.219
as the type, right, we wouldn't been
able to able to do this neatly.

122
00:08:42.219 --> 00:08:45.187
So, again,
it's trying to stay out of your way but

123
00:08:45.187 --> 00:08:48.030
being as strict as possible
within those bound.

