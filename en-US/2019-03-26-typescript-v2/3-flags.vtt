WEBVTT

1
00:00:00.300 --> 00:00:05.851
&gt;&gt; Mike North: If you checked out
the project, which is bitly/fem-ts,

2
00:00:05.851 --> 00:00:10.958
for TypeScript,
we can open up the examples folder and

3
00:00:10.958 --> 00:00:16.190
go to a little sub-project
in there called hello-ts.

4
00:00:16.190 --> 00:00:20.536
And we're going to learn about how to
use the TypeScript compiler to turn

5
00:00:20.536 --> 00:00:22.397
TypeScript into JavaScript.

6
00:00:32.358 --> 00:00:35.940
&gt;&gt; Mike North: So
I'm just gonna open up, in hello-ts,

7
00:00:35.940 --> 00:00:41.570
we've got a source folder and
then Index-ts within that folder.

8
00:00:41.570 --> 00:00:45.150
There's just only one file in that folder.

9
00:00:45.150 --> 00:00:51.150
What we've got here is some TypeScript
code, and it's just two functions,

10
00:00:51.150 --> 00:00:58.400
and then a tiny little program that runs,
that uses the above functions.

11
00:00:58.400 --> 00:01:02.610
First, we have a function that
returns a promise that resolves

12
00:01:02.610 --> 00:01:05.030
after a set period of time.

13
00:01:05.030 --> 00:01:09.670
So you can think of this almost,
it's the responsible equivalent

14
00:01:09.670 --> 00:01:12.765
of a sleep or await, right?

15
00:01:12.765 --> 00:01:17.765
When we pause execution and JavaScript
is free to go and do other things

16
00:01:17.765 --> 00:01:24.056
while we're waiting and then it'll resume
after a specified number of milliseconds.

17
00:01:24.056 --> 00:01:26.819
It's just wrapping set time out and
then resolving the promise.

18
00:01:26.819 --> 00:01:30.913
The second function,
it adds two numbers together, and

19
00:01:30.913 --> 00:01:36.190
we begin by waiting half a second
before we return the result.

20
00:01:36.190 --> 00:01:41.450
So it's a really slow calculator basically
that can only do addition of two numbers,

21
00:01:41.450 --> 00:01:42.460
not incredibly useful.

22
00:01:44.180 --> 00:01:49.696
I've chosen this because it includes some
modern syntax that some browsers and

23
00:01:49.696 --> 00:01:55.308
JavaScript environments we may care about,
they can't understand natively.

24
00:01:55.308 --> 00:01:58.173
So we're gonna look at different
ways of compiling this so

25
00:01:58.173 --> 00:02:01.220
that we can get an output that
will run where we need it to work.

26
00:02:02.930 --> 00:02:05.710
All right,
I'm gonna open up my terminal here.

27
00:02:05.710 --> 00:02:07.462
So, and just to be clear,

28
00:02:07.462 --> 00:02:11.704
it's important you use
Visual Studio Code for this workshop.

29
00:02:13.406 --> 00:02:18.310
&gt;&gt; Mike North: It is the editor that is
built kinda hand-in-hand with TypeScript,

30
00:02:18.310 --> 00:02:22.560
right next to the team that
built TypeScript itself.

31
00:02:22.560 --> 00:02:26.930
So it's possible to set up other
environments such that you get the kind of

32
00:02:26.930 --> 00:02:29.110
experience we're about to see.

33
00:02:29.110 --> 00:02:34.480
But it requires much more effort
than what you'll see right here.

34
00:02:36.619 --> 00:02:37.555
&gt;&gt; Mike North: All right, so

35
00:02:37.555 --> 00:02:42.773
the first thing I'm gonna do,
&gt;&gt; Mike North: I'm

36
00:02:42.773 --> 00:02:47.002
gonna go into examples/hello-ts,
so I'm sort of working in

37
00:02:47.002 --> 00:02:50.823
the hello-ts folder,
&gt;&gt; Mike North: And

38
00:02:50.823 --> 00:02:53.751
I'm gonna see what's in the source
folder only this one file.

39
00:02:53.751 --> 00:02:57.100
So I wanna use this command tsc,

40
00:02:57.100 --> 00:03:02.444
which is TypeScript compiler,
src/index.ts.

41
00:03:04.409 --> 00:03:09.672
&gt;&gt; Mike North: And what we have here is
another file that's popped up, index.js.

42
00:03:15.269 --> 00:03:21.960
&gt;&gt; Mike North: And if we look at these
side-by-side, it's a lot of extra code.

43
00:03:23.270 --> 00:03:25.831
I mean,
if we try to find our original code,

44
00:03:25.831 --> 00:03:29.765
it looks like it starts down here,
&gt;&gt; Mike North: And

45
00:03:29.765 --> 00:03:33.450
then more kind of explosion of complexity.

46
00:03:33.450 --> 00:03:37.480
What we're seeing here is ES3 JavaScript,

47
00:03:37.480 --> 00:03:41.500
the kind of JavaScript you would
run in Internet Explorer 6.

48
00:03:41.500 --> 00:03:46.860
So we probably don't care about Internet
Explorer 6, but this is the default.

49
00:03:46.860 --> 00:03:50.720
By default, you build JavaScript
that can run basically anywhere.

50
00:03:52.350 --> 00:03:57.120
We can compile it again
with a flag that will

51
00:03:57.120 --> 00:04:02.155
indicate that things
don't need to be dumped

52
00:04:02.155 --> 00:04:06.805
down quite so much, target ES2015.

53
00:04:10.709 --> 00:04:14.620
&gt;&gt; Mike North: Okay, well, I can see
right away a lot of the code went away.

54
00:04:14.620 --> 00:04:16.660
Line 31 is where we end.

55
00:04:16.660 --> 00:04:21.700
And we still have a little
overhead here like some help or

56
00:04:21.700 --> 00:04:24.630
code that's necessary for
compatibility reasons.

57
00:04:25.710 --> 00:04:28.830
But now I'm seeing promise pop up.

58
00:04:28.830 --> 00:04:33.375
Promise is a part of ES6 or ES2015.

59
00:04:33.375 --> 00:04:35.600
I don't see that we have await.

60
00:04:35.600 --> 00:04:38.430
So it seems that async and

61
00:04:38.430 --> 00:04:42.240
await are not something that is available
with this version of JavaScript.

62
00:04:43.570 --> 00:04:50.510
So we can go up to ES2017 and we should
see await comeback, and in fact, it does.

63
00:04:50.510 --> 00:04:53.370
There is our async and our await.

64
00:04:53.370 --> 00:04:56.945
All that's really change
if we look at add numbers,

65
00:04:56.945 --> 00:05:01.739
is this little extra bits of information
which I'm sure you can assume

66
00:05:01.739 --> 00:05:06.141
that that means like a should be
a number and b should be a number.

67
00:05:06.141 --> 00:05:08.510
That has disappeared because
that's not part of JavaScript.

68
00:05:08.510 --> 00:05:10.600
But other than that, I mean we have

69
00:05:11.970 --> 00:05:16.700
closest makes no difference the same
number of lines of code, right?

70
00:05:17.780 --> 00:05:21.555
Now, if we tried to run this,
let's let's try to run this in Node,

71
00:05:21.555 --> 00:05:26.280
cuz there's nothing here that's
necessarily browser specific in terms of

72
00:05:26.280 --> 00:05:28.010
like functions we're calling.

73
00:05:28.010 --> 00:05:33.170
So we could just run node src/index.js,

74
00:05:33.170 --> 00:05:38.400
and we'll get an error, and
that error says unexpected token export.

75
00:05:38.400 --> 00:05:40.820
Has anyone here worked with Node before?

76
00:05:42.340 --> 00:05:44.754
What am I running into here?

77
00:05:47.024 --> 00:05:50.062
&gt;&gt; Mike North: Can you spot a problem
that would make Node potentially unhappy?

78
00:05:52.448 --> 00:05:56.570
&gt;&gt; Mike North: Export, can we maybe look,
how does Node.js export things?

79
00:05:56.570 --> 00:05:58.632
&gt;&gt; Speaker 2: Module.exports.

80
00:05:58.632 --> 00:06:01.322
&gt;&gt; Mike North: Module.exports, right, and

81
00:06:01.322 --> 00:06:06.080
this is because commonjs
modules are used for Node.

82
00:06:06.080 --> 00:06:11.770
We import things with require,
we export things with module that exports.

83
00:06:11.770 --> 00:06:14.837
So we can add another compiler flag here.

84
00:06:17.964 --> 00:06:23.273
&gt;&gt; Mike North: Modules or module commonjs,
and we should see this change,

85
00:06:23.273 --> 00:06:27.260
and in fact it does, exports.addnumbers.

86
00:06:27.260 --> 00:06:31.400
And now if we will try to run it,
everything works, right?

87
00:06:31.400 --> 00:06:33.280
We wait for brief period of time and

88
00:06:33.280 --> 00:06:36.030
then we log out the result of
the adding three and four together.

89
00:06:37.890 --> 00:06:40.670
So there a lot different
flags you can use here.

90
00:06:40.670 --> 00:06:45.353
Here's another one of my favorites,
--watch.

91
00:06:45.353 --> 00:06:49.763
And that will leave the TypeScript
compiler watching the source files, so

92
00:06:49.763 --> 00:06:53.963
that if I were to change something,
like let's say I add a string here,

93
00:06:53.963 --> 00:06:59.038
result is,
&gt;&gt; Mike North: And comma, and I'm gonna

94
00:06:59.038 --> 00:07:04.650
hit Save and you can see the file on
the right kinda updated automatically.

95
00:07:04.650 --> 00:07:10.300
So it watches your source files and will
incrementally update only what's changed.

96
00:07:10.300 --> 00:07:13.800
It's a nice, fast,
incremental compilation.

97
00:07:13.800 --> 00:07:16.000
It doesn't do your whole app,
just what's changed.

