WEBVTT

1
00:00:00.600 --> 00:00:03.440
&gt;&gt; Mike North: The and and or operators.

2
00:00:03.440 --> 00:00:06.282
So I've created two types here and

3
00:00:06.282 --> 00:00:10.920
one is called HasPhoneNumber,
one is called HasName.

4
00:00:10.920 --> 00:00:15.190
They have something in common and they
have something that's different, right?

5
00:00:15.190 --> 00:00:18.230
So think of this as a Venn diagram, right?

6
00:00:18.230 --> 00:00:21.830
They both have name but
one has email and one has phone.

7
00:00:24.210 --> 00:00:29.940
So, here I've created a piece of
code that basically rolls the dice,

8
00:00:29.940 --> 00:00:31.680
does a math.random.

9
00:00:31.680 --> 00:00:36.720
And half the time, it's gonna
initialize it to HasPhoneNumber.

10
00:00:36.720 --> 00:00:40.300
Half the time,
it's gonna to initialize it to HasEmail.

11
00:00:40.300 --> 00:00:46.070
And, in fact, TypeScript should be able
to figure out, well unfortunately,

12
00:00:46.070 --> 00:00:47.940
that's why I left that there.

13
00:00:47.940 --> 00:00:51.640
It's the same type, but
it just makes it ugly, right?

14
00:00:51.640 --> 00:00:56.430
So here, we get the nice names,
HasEmail or HasPhoneNumber.

15
00:00:56.430 --> 00:00:59.990
We're moving that, okay, I mean,

16
00:00:59.990 --> 00:01:04.270
that's It's kinda accurate in a way, but

17
00:01:04.270 --> 00:01:09.170
like not really what I was after,
and way more verbose.

18
00:01:10.531 --> 00:01:16.096
&gt;&gt; Mike North: So
note that once we have this contact info

19
00:01:16.096 --> 00:01:21.028
variable, we can only access name.

20
00:01:21.028 --> 00:01:26.288
So, think of this as if you have this
sort of Venn diagram, and it could

21
00:01:26.288 --> 00:01:32.150
be one side or the other, we are looking
at the intersection between the two.

22
00:01:32.150 --> 00:01:34.660
We're looking at sort of that lens.

23
00:01:34.660 --> 00:01:38.040
We can only access things that
are guaranteed to be there.

24
00:01:38.040 --> 00:01:40.772
And regardless of whether
this is HasName or

25
00:01:40.772 --> 00:01:44.460
HasPhoneNumber, name is going to be there.

26
00:01:44.460 --> 00:01:47.960
So that's why we can access name and
only name.

27
00:01:47.960 --> 00:01:55.860
Union types, they use this and
operator and percentage worth and.

28
00:01:55.860 --> 00:01:58.530
And this is saying effectively.

29
00:01:58.530 --> 00:02:04.104
Other contact info is both a HasEmail and
also a HasPhoneNumber.

30
00:02:04.104 --> 00:02:10.890
So it must be initialized with
everything these two shapes have.

31
00:02:10.890 --> 00:02:14.560
The union, this will be the full
Venn diagram, both bubbles.

32
00:02:15.930 --> 00:02:20.360
So if we were missing one thing you
would say, Property 'phone' is missing.

33
00:02:22.735 --> 00:02:26.684
&gt;&gt; Mike North: And because we're
guaranteed to have all three of these

34
00:02:26.684 --> 00:02:30.220
things, we can access all three of them,
right?

35
00:02:30.220 --> 00:02:34.592
There's no ambiguity, there's no either or
it's definitely both.

36
00:02:40.801 --> 00:02:45.590
&gt;&gt; Mike North: So in this,
sorry I left that there.

37
00:02:45.590 --> 00:02:48.090
That was an example from a previous run.

38
00:02:48.090 --> 00:02:51.910
So just to recap here,
we covered variables.

39
00:02:51.910 --> 00:02:56.220
We looked at how typescript could
infer the type of variable through

40
00:02:56.220 --> 00:02:57.720
it being initialized.

41
00:02:57.720 --> 00:03:00.942
We looked at arrays and tuples.

42
00:03:00.942 --> 00:03:02.870
Those are the ordered data structures.

43
00:03:02.870 --> 00:03:06.466
One, the array is arbitrary is length.

44
00:03:06.466 --> 00:03:09.670
The other, tuple, has a fixed length and

45
00:03:09.670 --> 00:03:12.800
a specific type for
each element in the tuple.

46
00:03:15.300 --> 00:03:16.620
We looked at object types.

47
00:03:16.620 --> 00:03:20.170
And really the only thing you have to
remember there is question mark means

48
00:03:20.170 --> 00:03:20.670
optional.

49
00:03:21.880 --> 00:03:26.610
And then finally,
the equivalent of or and and

50
00:03:26.610 --> 00:03:31.280
in the type world,
the intersection and union operators.

