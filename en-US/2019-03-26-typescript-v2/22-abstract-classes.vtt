WEBVTT

1
00:00:00.060 --> 00:00:02.890
&gt;&gt; Mike North: This, I kinda feel
abrogated to show you this although I

2
00:00:02.890 --> 00:00:06.790
don't find that I use it all that often,
abstract classes.

3
00:00:06.790 --> 00:00:12.997
Abstract classes cannot be instantiated
directly, they just serve as base classes.

4
00:00:12.997 --> 00:00:17.734
So unlike in interface,
which also can't be instantiated,

5
00:00:17.734 --> 00:00:21.932
abstract classes can have implementations,
right?

6
00:00:21.932 --> 00:00:26.408
In this case, I have a constructor with
some param properties ,so name and

7
00:00:26.408 --> 00:00:29.850
email will be there,
it's serving as a base class.

8
00:00:29.850 --> 00:00:32.420
But I also have an abstract method here,
and

9
00:00:32.420 --> 00:00:36.010
that must be implemented by any subclass.

10
00:00:36.010 --> 00:00:40.430
So I think of this as sort of half class,
half interface.

11
00:00:40.430 --> 00:00:42.430
And this lets us pass around.

12
00:00:42.430 --> 00:00:46.520
We can still refer two things
by their abstract base class.

13
00:00:46.520 --> 00:00:49.980
But concrete implementations
may look very, very different.

14
00:00:49.980 --> 00:00:53.390
All you have to do here is
make the class abstract and

15
00:00:53.390 --> 00:00:57.496
then you can make both fields and
methods abstract as well.

16
00:00:57.496 --> 00:01:05.890
And so classes are required to implement
those with a compatible access modifier.

17
00:01:05.890 --> 00:01:11.202
Like, you could take something protected,
I wonder if you can even do that.

18
00:01:13.261 --> 00:01:13.929
&gt;&gt; Mike North: Yep.

19
00:01:16.658 --> 00:01:18.568
&gt;&gt; Mike North: No, it looks like
that they've fixed this here.

20
00:01:18.568 --> 00:01:23.450
So gotta make things public because
it'd be kinda strange to have abstract

21
00:01:23.450 --> 00:01:25.860
things that are private, like how?

22
00:01:25.860 --> 00:01:29.880
You don't really have visibility
into subclasses in that way.

23
00:01:31.860 --> 00:01:34.350
So here's an example of an implementation,
and you can see,

24
00:01:34.350 --> 00:01:38.485
if we were to remove sendEmail,
it's gonna tell us,

25
00:01:38.485 --> 00:01:44.310
non-abstract class,
ConcreteContact, does not implement

26
00:01:44.310 --> 00:01:49.420
inherited inherited
abstract member sendEmail.

27
00:01:49.420 --> 00:01:52.835
So we have not met all of
the requirements we need to meet.

