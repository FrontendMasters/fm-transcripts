WEBVTT

1
00:00:00.000 --> 00:00:02.562
&gt;&gt; Mike North: First,
let me introduce myself, my name is Mike.

2
00:00:02.562 --> 00:00:04.255
And I work at LinkedIn,

3
00:00:04.255 --> 00:00:10.030
where two things I do make me a great
person to talk to you about TypeScript.

4
00:00:10.030 --> 00:00:13.331
Number one,
I run the developer training program, so

5
00:00:13.331 --> 00:00:16.000
I am a workshop instructor for
the company.

6
00:00:16.000 --> 00:00:20.606
Where I help level up all of
all of the engineers there,

7
00:00:20.606 --> 00:00:25.730
in a various array of topics,
including TypeScript.

8
00:00:25.730 --> 00:00:30.879
And number two,
I am a tech lead on the front-end stack,

9
00:00:30.879 --> 00:00:36.584
where I predominantly focus on
TypeScript adoption, right?

10
00:00:36.584 --> 00:00:40.709
On making it so that if teams wish to
use TypeScript with their project,

11
00:00:40.709 --> 00:00:44.700
everything works smoothly, and
the documentation tools work, and

12
00:00:44.700 --> 00:00:47.110
all of the linting works nicely.

13
00:00:47.110 --> 00:00:51.669
So I have been knee-deep in this area,
and I'm so

14
00:00:51.669 --> 00:00:57.220
happy to be here to share a lot
of what I've learned with you.

15
00:00:57.220 --> 00:01:02.045
So first, before we jump in, and
we're gonna get our hands dirty

16
00:01:02.045 --> 00:01:05.970
really quickly here,
within about 10 minutes.

17
00:01:05.970 --> 00:01:10.096
Let's first pin down exactly what
TypeScript is, so we know what to expect.

18
00:01:10.096 --> 00:01:13.677
So it's an open-source
programming language, primarily,

19
00:01:13.677 --> 00:01:17.620
it's maintained by a core team
of developers at Microsoft.

20
00:01:17.620 --> 00:01:21.202
And it's a typed,
syntactic superset of JavaScript.

21
00:01:21.202 --> 00:01:24.886
What that means is,
if you take TypeScript syntax,

22
00:01:24.886 --> 00:01:29.120
you can kind of see
JavaScript's syntax within it.

23
00:01:29.120 --> 00:01:32.808
It does not mean that every
JavaScript program can happily

24
00:01:32.808 --> 00:01:36.505
run through the TypeScript
compiler without any errors.

25
00:01:36.505 --> 00:01:39.690
So there is sometimes
confusion about that.

26
00:01:39.690 --> 00:01:44.096
Now, it's true that if you loosen
up the TypeScript compiler,

27
00:01:44.096 --> 00:01:47.767
and kind of set it in the most
flexible possible mode,

28
00:01:47.767 --> 00:01:51.616
a lot of regular JavaScript
programs can make it happy.

29
00:01:51.616 --> 00:01:57.400
But there are inherently things you can do
with a really flexible, dynamically typed

30
00:01:57.400 --> 00:02:03.040
language like JavaScript, that will never
make a strongly typed language happy.

31
00:02:04.060 --> 00:02:07.865
TypeScript compiles to
readable JavaScript, and

32
00:02:07.865 --> 00:02:11.410
it has no runtime part,
no runtime component.

33
00:02:11.410 --> 00:02:17.380
What that means to you is that
the types disappear in a build step.

34
00:02:17.380 --> 00:02:21.644
So you're just really, you can almost
think of it like a static analysis tool

35
00:02:21.644 --> 00:02:24.149
that does a lot of
checking on your codebase.

36
00:02:24.149 --> 00:02:28.364
But when you have that build that
you're sending to your users, or

37
00:02:28.364 --> 00:02:30.660
that you're running in Node.js?

38
00:02:30.660 --> 00:02:35.630
Unless you do some
really exotic backflips,

39
00:02:35.630 --> 00:02:39.955
none of that type-checking is there.

40
00:02:39.955 --> 00:02:43.460
And that's good in some ways,
and that's bad in other ways.

41
00:02:43.460 --> 00:02:46.597
It's good in that there's
no cost at runtime, right,

42
00:02:46.597 --> 00:02:48.612
it's not gonna slow your app down.

43
00:02:48.612 --> 00:02:50.859
Runtime type-checking,

44
00:02:50.859 --> 00:02:56.820
that's extra code that every user in
every browser is gonna be running.

45
00:02:58.390 --> 00:03:01.567
So TypeScript disappearing in
a build step is good there.

46
00:03:01.567 --> 00:03:06.819
But of course, when you're
receiving some data from a fetch,

47
00:03:06.819 --> 00:03:10.770
or you're getting some input from a user?

48
00:03:10.770 --> 00:03:15.632
It's important to understand that
there's really no type-checking that's

49
00:03:15.632 --> 00:03:20.502
gonna happen there, because at that point,
it's just a JavaScript program.

50
00:03:20.502 --> 00:03:24.000
So the project kinda has
three things inside of it.

51
00:03:25.200 --> 00:03:29.765
There's the programming language itself,
there's the language server.

52
00:03:29.765 --> 00:03:34.276
Which is a program that kind of feeds
your text editor a lot of great

53
00:03:34.276 --> 00:03:38.544
information that can manifest
itself in auto-completes and

54
00:03:38.544 --> 00:03:41.760
tool tips,
as you hover over various things.

55
00:03:41.760 --> 00:03:45.606
The language server is sort of
something that you can query about,

56
00:03:45.606 --> 00:03:48.364
what's going on with my
program at this point?

57
00:03:48.364 --> 00:03:53.070
And then there's the compiler, and
that is used by the language server.

58
00:03:53.070 --> 00:03:58.068
But it is what actually
performs the type-checking, and

59
00:03:58.068 --> 00:04:04.290
it is one way of taking TypeScript
files and emitting JavaScript files.

60
00:04:04.290 --> 00:04:09.719
A huge advancement that came along with
Babel 7, and Babel's what's let us take

61
00:04:09.719 --> 00:04:15.160
modern JavaScript, and kind of boil it
down so that Internet Explorer can run it.

62
00:04:15.160 --> 00:04:18.846
And so you can just simply state
which browsers you care about and

63
00:04:18.846 --> 00:04:20.696
you get something compatible.

64
00:04:20.696 --> 00:04:24.950
Babel can now take
TypeScript files as inputs.

65
00:04:24.950 --> 00:04:29.243
Now, it's important to understand that
no type-checking is involved in there.

66
00:04:29.243 --> 00:04:34.764
Babel kind of just knows which parts
of the TypeScript code it can eat and

67
00:04:34.764 --> 00:04:38.460
ignore, leaving only
the JavaScript behind.

68
00:04:38.460 --> 00:04:43.258
So you definitely wanna use the TypeScript
compiler side-by-side with Babel.

69
00:04:43.258 --> 00:04:46.211
But the important advancement there is,

70
00:04:46.211 --> 00:04:52.120
you have one piece of tooling that's
responsible for creating your JS files.

71
00:04:52.120 --> 00:04:56.532
You don't have to worry about,
how does TypeScript represent a class for

72
00:04:56.532 --> 00:04:57.821
Internet Explorer?

73
00:04:57.821 --> 00:05:02.439
How does Babel represent it, and
is there gonna be a collision there, so

74
00:05:02.439 --> 00:05:05.850
you can have a great
assurance of consistency.

75
00:05:05.850 --> 00:05:10.734
And almost think of the TypeScript
compiler as a really fancy linter,

76
00:05:10.734 --> 00:05:15.122
or another static analysis tool
that just kind of verifies that

77
00:05:15.122 --> 00:05:19.701
everything looks good, but
doesn't actually produce output.

78
00:05:19.701 --> 00:05:24.542
So since I taught the last version
of this course for Frontend Masters,

79
00:05:24.542 --> 00:05:29.400
which was in 2017,
we've seen a 300% increase in downloads.

80
00:05:30.610 --> 00:05:33.548
And we can see, this is a monthly
download graph on the bottom.

81
00:05:33.548 --> 00:05:37.373
We can see that it's
basically matched React,

82
00:05:37.373 --> 00:05:41.110
in terms of popularity and
prevalence of use.

83
00:05:42.950 --> 00:05:49.563
So NPM does a survey every year,
and they ask their respondents,

84
00:05:49.563 --> 00:05:54.863
what flavor of a JavaScript-y
language do you use?

85
00:05:54.863 --> 00:06:00.360
CoffeeScript, or do you use ES6,
or ES5, or TypeScript?

86
00:06:00.360 --> 00:06:04.719
And it turns out, 46% of respondents
said that in some part or

87
00:06:04.719 --> 00:06:08.936
another of their programming,
they make use of TypeScript.

88
00:06:08.936 --> 00:06:12.476
And if you look at all
of the packages in NPM,

89
00:06:12.476 --> 00:06:18.560
over 40% of them declare TypeScript
as a dependency or devDependency.

90
00:06:18.560 --> 00:06:22.328
So you're probably using it,
even if you don't think you're using it.

91
00:06:22.328 --> 00:06:27.190
You're using something that's
written in this typed language,

92
00:06:27.190 --> 00:06:30.152
and depending on that type-checking.

93
00:06:30.152 --> 00:06:33.070
And potentially, you could take
advantage of that type information.

