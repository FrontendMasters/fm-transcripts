WEBVTT

1
00:00:00.194 --> 00:00:03.560
&gt;&gt; Mike North: We're gonna take
a look at some more advanced types.

2
00:00:03.560 --> 00:00:07.413
I know it seems like we've already been
in advanced having gone through with

3
00:00:07.413 --> 00:00:08.750
a generics.

4
00:00:08.750 --> 00:00:13.919
But I want you to get a sense for
what's possible as you learn more and

5
00:00:13.919 --> 00:00:19.016
more about how to design effective
constraints with typescript.

6
00:00:30.320 --> 00:00:34.120
&gt;&gt; Mike North: First we're
gonna look at mapped types.

7
00:00:34.120 --> 00:00:40.420
And this involves using an interface as

8
00:00:40.420 --> 00:00:48.140
a way from getting to the interfaces keys
to the types associated with those keys.

9
00:00:48.140 --> 00:00:51.757
So we had a function
earlier in the workshop

10
00:00:51.757 --> 00:00:56.589
where we were trying to contact
people by phone or email.

11
00:00:56.589 --> 00:01:02.223
And we used overloads,
we use multiple functions signatures,

12
00:01:02.223 --> 00:01:09.540
in order to insure that email,
one with email and phone, one with phone.

13
00:01:09.540 --> 00:01:12.790
This will require as new
communications methods were added,

14
00:01:12.790 --> 00:01:16.260
will requires to add more signatures,
right?

15
00:01:16.260 --> 00:01:20.890
One for each new, coupling of the first
and the second parameter together.

16
00:01:20.890 --> 00:01:24.491
So we are going to use map type
to accomplish similar thing.

17
00:01:26.412 --> 00:01:30.493
&gt;&gt; Mike North: So here is a new function,
it's called contact,

18
00:01:30.493 --> 00:01:37.440
it has a type parameter that must extend
from a key of the above interface.

19
00:01:37.440 --> 00:01:44.710
Anyone have a hunch as to what
the possible values of that could be?

20
00:01:44.710 --> 00:01:47.000
&gt;&gt; Speaker 2: Email ,phone, fax
&gt;&gt; Mike North: Email, phone,

21
00:01:47.000 --> 00:01:48.150
fax, thank you.

22
00:01:48.150 --> 00:01:50.420
So email, phone, and fax, and

23
00:01:50.420 --> 00:01:55.570
then we're taking that type and
this is what makes it a map type.

24
00:01:55.570 --> 00:01:59.370
We're passing that key into the interface,
and

25
00:01:59.370 --> 00:02:02.870
we'll get the corresponding
value associated with that key.

26
00:02:04.660 --> 00:02:07.580
So here these three will all work, but

27
00:02:07.580 --> 00:02:12.560
if I were to try to reverse things
like use phone up here we're gonna get

28
00:02:12.560 --> 00:02:17.220
the same kinds of errors that we were
getting with the function signatures.

29
00:02:17.220 --> 00:02:20.620
The first parameter and
the second parameter must agree.

30
00:02:20.620 --> 00:02:24.770
But in my opinion, this is a little
bit easier to maintain because for

31
00:02:24.770 --> 00:02:29.430
new communication methods we only need to
add a sort of a new road to the interface.

32
00:02:29.430 --> 00:02:33.880
And what's more, we could use this,
we could consume this type and

33
00:02:33.880 --> 00:02:38.560
do this mapping across many
different things in our app.

34
00:02:38.560 --> 00:02:43.360
So if you have some concept
like the different types of

35
00:02:43.360 --> 00:02:46.670
models that you can get from your API,

36
00:02:46.670 --> 00:02:52.090
and you want to refer to them by name, and
then you can get that correct type back.

37
00:02:52.090 --> 00:02:56.150
You can have one source of truth
where all of this is maintained and

38
00:02:56.150 --> 00:03:00.090
then everything else that consumes
the map's type in this way.

39
00:03:00.090 --> 00:03:00.850
They can

40
00:03:03.140 --> 00:03:07.580
automatically get updated because they're
expressed in terms of that one interface.

41
00:03:08.710 --> 00:03:15.920
So it's just like in the value world,
this is taking, sorry, I'm scrolling here.

42
00:03:15.920 --> 00:03:20.270
In the JavaScript values world,
this is just taking a key and

43
00:03:20.270 --> 00:03:24.460
passing it into an object to get its
value, and the syntax is the same.

44
00:03:26.380 --> 00:03:32.078
So I just think of this like objects.

45
00:03:32.078 --> 00:03:35.376
So as you said, the available keys here,

46
00:03:35.376 --> 00:03:39.820
a key of communication methods email,
phone, or fax.

47
00:03:39.820 --> 00:03:44.399
We can even get all values
by taking these keys and

48
00:03:44.399 --> 00:03:48.756
projecting the set of
the three of them through

49
00:03:48.756 --> 00:03:53.350
the interface to get all
of the possible values.

50
00:03:55.550 --> 00:04:00.980
HasEmail of HasPhoneNumber or fax,
that is all three of these up here.

51
00:04:02.360 --> 00:04:06.627
So if you have anything that were
you've got a or b, or c, and

52
00:04:06.627 --> 00:04:12.157
pass it through interface, you'll get
the corresponding value of that key or

53
00:04:12.157 --> 00:04:16.550
value of the other key, or
the value of the third key, right?

54
00:04:18.534 --> 00:04:22.427
&gt;&gt; Mike North: Pretty cool, I mean it
seems like you would hope it would work,

55
00:04:22.427 --> 00:04:23.240
and it does.

56
00:04:25.030 --> 00:04:28.880
Type queries, a colors,
and advance concept, but

57
00:04:28.880 --> 00:04:33.940
it's relatively simple to understand,
typeof allows us to get

58
00:04:33.940 --> 00:04:37.770
the type of a symbol,
the type of a value I should say.

59
00:04:39.240 --> 00:04:42.580
Symbol is a very overloaded
term in JavaScript.

60
00:04:42.580 --> 00:04:50.710
So here we've got a value whose type
is a promise that resolves to a number.

61
00:04:52.290 --> 00:04:59.070
And I can get the typeof what
promise that resolve has like

62
00:04:59.070 --> 00:05:05.280
the type of this function here,
I can kind of acquire that

63
00:05:05.280 --> 00:05:10.950
by using the type of operator
in the context of a type alias.

64
00:05:10.950 --> 00:05:11.830
You could do the same thing like this.

65
00:05:16.140 --> 00:05:20.840
&gt;&gt; Mike North: Well,
I do it like let, but there you go.

66
00:05:20.840 --> 00:05:24.820
So this is called a type query cuz you're
kind of querying for this values type.

67
00:05:27.170 --> 00:05:31.577
&gt;&gt; Mike North: Conditional types this was
added in types script 2.8 which is pretty

68
00:05:31.577 --> 00:05:32.170
recent.

69
00:05:33.350 --> 00:05:36.990
This is a tunnery operator for types.

70
00:05:36.990 --> 00:05:40.040
So we've got a generic here,
you can only use them with generics.

71
00:05:42.169 --> 00:05:46.575
&gt;&gt; Mike North: We're saying we want to
basically grab the type of a promise, or

72
00:05:46.575 --> 00:05:50.980
let something pass straight
through if it's not a promise.

73
00:05:50.980 --> 00:05:55.820
So this is like, give me the eventual
value that this will turn into and

74
00:05:55.820 --> 00:05:58.960
if it's not a promise,
that is the value itself.

75
00:05:58.960 --> 00:06:05.320
So we take in a type T,
if T extends from Promise,

76
00:06:05.320 --> 00:06:10.350
extract out the type that the Promise
resolves to, we use infer here.

77
00:06:10.350 --> 00:06:12.840
This is the only place you can use infer,
but

78
00:06:12.840 --> 00:06:17.030
it let's you pluck out the type
the Promise resolves to.

79
00:06:17.030 --> 00:06:19.460
So if T extends from Promise,

80
00:06:19.460 --> 00:06:23.960
return what it results to, otherwise,
just let is sail straight through.

81
00:06:25.050 --> 00:06:27.820
And here,
we can see that a is of type number.

82
00:06:29.030 --> 00:06:32.640
We're saying EventualType
of Promise number.

83
00:06:32.640 --> 00:06:38.050
A number comes out cuz we're following
we're in the truthy clause here.

84
00:06:39.390 --> 00:06:44.110
In b we can see that the number array
kinda sails straight through, right?

85
00:06:44.110 --> 00:06:46.390
Cuz it's following this branch down here.

