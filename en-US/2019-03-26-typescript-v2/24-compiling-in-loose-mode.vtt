WEBVTT

1
00:00:00.117 --> 00:00:05.431
&gt;&gt; Mike North: Surf one, you want to
compile your project in loose mode.

2
00:00:05.431 --> 00:00:09.265
And you begin by making
sure your tests pass.

3
00:00:09.265 --> 00:00:13.773
And then, rename all your files or
a chunk of your files from

4
00:00:13.773 --> 00:00:18.567
JavaScript to TypeScript,
allowing for implicit any types.

5
00:00:18.567 --> 00:00:23.394
Implicit anys pop up whenever
the TypeScript compiler cannot

6
00:00:23.394 --> 00:00:26.464
infer a more specific and useful type.

7
00:00:26.464 --> 00:00:30.494
Good example of this would
be a function argument.

8
00:00:30.494 --> 00:00:34.547
So the way TypeScript infers things
is kinda only in one direction.

9
00:00:34.547 --> 00:00:39.994
It's, only through receiving
a value of some sort,

10
00:00:39.994 --> 00:00:42.667
and like passing that on.

11
00:00:42.667 --> 00:00:45.957
So, just to highlight this example here.

12
00:00:50.757 --> 00:00:55.854
&gt;&gt; Mike North: This is an implicit any and
even if down here, if I try to split it to

13
00:00:55.854 --> 00:01:02.096
try to give the clue that it might be a
string, it still remains an implicit any.

14
00:01:02.096 --> 00:01:04.486
Because type information does not,

15
00:01:04.486 --> 00:01:09.043
the inference does not flow up from
the point of usage to the argument.

16
00:01:09.043 --> 00:01:13.133
Some languages do that, this one does not.

17
00:01:13.133 --> 00:01:16.800
So functional arguments are placed
where you're almost always gonna

18
00:01:16.800 --> 00:01:17.923
get an implicit any.

19
00:01:17.923 --> 00:01:22.187
The only case where you wouldn't is if
it's a call back, and there's a specific

20
00:01:22.187 --> 00:01:26.596
type for that call back, and remember,
we don't have to specify anything there.

21
00:01:26.596 --> 00:01:32.361
Your goal in this pass is to fix anything
that is causing TypeScript compile errors.

22
00:01:32.361 --> 00:01:37.655
Examples of where this will pop up
all the time is JavaScript classes.

23
00:01:37.655 --> 00:01:42.470
When you change to TypeScript,
you're gonna have to go and

24
00:01:42.470 --> 00:01:45.456
state the fields and their types, so

25
00:01:45.456 --> 00:01:50.392
you know ahead of time what's
a valid field and what's not.

26
00:01:50.392 --> 00:01:53.402
So you're gonna fix that kind of thing,

27
00:01:53.402 --> 00:01:59.523
being very careful to avoid changing any
behavior, and that is one pull request.

28
00:01:59.523 --> 00:02:02.160
Make sure your tests have passed again,
and merge that in.

