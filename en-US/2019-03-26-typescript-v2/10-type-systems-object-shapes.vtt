WEBVTT

1
00:00:00.280 --> 00:00:04.680
&gt;&gt; Mike North: The next thing we're going
to talk about is a little five-minute

2
00:00:04.680 --> 00:00:07.410
description of type systems.

3
00:00:07.410 --> 00:00:10.630
And how you can tell the difference and
take advantage

4
00:00:10.630 --> 00:00:15.090
of the difference between something
like TypeScript and something like Java.

5
00:00:15.090 --> 00:00:20.120
So, type systems come down to this
question of type equivalents.

6
00:00:20.120 --> 00:00:24.444
And that is the same thing we were looking
at when we saw some error messages

7
00:00:24.444 --> 00:00:29.065
that related to the left-hand and
the right-hand of an assignment, right?

8
00:00:29.065 --> 00:00:34.116
That's TypeScript trying to figure
out is this value you're trying to

9
00:00:34.116 --> 00:00:39.264
assign equivalent to this type of
the variable you're assigning it to.

10
00:00:39.264 --> 00:00:43.660
And the same thing happens when you're
trying to pass an argument to a function.

11
00:00:43.660 --> 00:00:46.820
Just think of it like an object
trying to pass through a hole.

12
00:00:46.820 --> 00:00:51.638
You want the square peg passing
through a square hole as appropriate.

13
00:00:51.638 --> 00:00:57.350
So really, it's about can we
regard x as an HTMLInputElement?

14
00:00:57.350 --> 00:01:04.197
Nominal type systems, like Java and
almost every typed language out there,

15
00:01:04.197 --> 00:01:09.779
they would answer the question
based on whether x is an instance

16
00:01:09.779 --> 00:01:14.751
of a class named whatever
the type you're looking for.

17
00:01:14.751 --> 00:01:19.538
So this would require you to have
all of your code set up in a fairly

18
00:01:19.538 --> 00:01:23.540
object-oriented way where
you have constructors.

19
00:01:23.540 --> 00:01:26.336
And you're dealing primarily
with instances of classes and

20
00:01:26.336 --> 00:01:27.881
you're passing things around.

21
00:01:27.881 --> 00:01:31.542
This isn't necessarily how
JavaScript code is written.

22
00:01:31.542 --> 00:01:36.630
And this would require us to do a lot of
rewriting and to make almost everything

23
00:01:36.630 --> 00:01:41.343
a class and an instance in order to
have factories with specific names.

24
00:01:41.343 --> 00:01:42.532
So that we could take advantage of types.

25
00:01:44.414 --> 00:01:47.258
&gt;&gt; Mike North: TypeScript is
a structural type system,

26
00:01:47.258 --> 00:01:50.272
they only care about
the shape of an object.

27
00:01:50.272 --> 00:01:55.245
Which is property names and types that
are allowed for those properties, right?

28
00:01:55.245 --> 00:01:59.243
So it only cares about
the structure of an object.

29
00:01:59.243 --> 00:02:04.278
So, if we had like a data structure for
a car, we could call it car.

30
00:02:04.278 --> 00:02:08.940
But really, all we care about is the fact
that it has properties called make,

31
00:02:08.940 --> 00:02:11.970
model and
year that are of the appropriate types.

32
00:02:11.970 --> 00:02:13.353
Same goes for functions.

33
00:02:13.353 --> 00:02:17.583
We really only care about
the arguments and the return type.

34
00:02:17.583 --> 00:02:23.607
And if you create a totally different
function that meets those criteria,

35
00:02:23.607 --> 00:02:26.950
that will end up being type equivalent.

36
00:02:26.950 --> 00:02:31.090
That will be usable where you
need that type to be used.

37
00:02:32.140 --> 00:02:35.910
And I should point out that this is
an important concept to understand in

38
00:02:35.910 --> 00:02:36.950
TypeScript.

39
00:02:36.950 --> 00:02:40.690
But also if you have consistent
shapes in JavaScript.

40
00:02:40.690 --> 00:02:47.923
And you avoid introducing new properties
to objects that have been heavily used.

41
00:02:47.923 --> 00:02:52.599
You end up having a better
shot at JavaScript run times,

42
00:02:52.599 --> 00:02:55.297
like V8 optimizing your code.

43
00:02:56.783 --> 00:03:00.157
&gt;&gt; Mike North: TypeScript
uses the term wider and

44
00:03:00.157 --> 00:03:05.450
narrower to describe
a level of specificity.

45
00:03:05.450 --> 00:03:09.964
And you'll no doubt come across
someone who uses wider, narrower, and

46
00:03:09.964 --> 00:03:12.630
I'm gonna start using these terms today.

47
00:03:12.630 --> 00:03:17.270
But here is the diagram to help you
understand what we mean by this.

48
00:03:17.270 --> 00:03:23.090
The widest type is any and
it allows for any possible value.

49
00:03:23.090 --> 00:03:27.960
And just think of it as the set of allowed
values for any is infinitely wide.

50
00:03:27.960 --> 00:03:32.040
It can just take absolutely anything,
itâ€™s almost infinity.

51
00:03:32.040 --> 00:03:35.740
Now, if I said, I want an array,
any array at all.

52
00:03:35.740 --> 00:03:38.570
I don't care what type of
value is in this array,

53
00:03:38.570 --> 00:03:41.090
that would be a narrower type, right?

54
00:03:41.090 --> 00:03:43.330
We're not infinitely wide anymore.

55
00:03:43.330 --> 00:03:46.800
The set of values,
if you line them up end to end,

56
00:03:46.800 --> 00:03:50.367
it would be narrower,
still pretty wide though.

57
00:03:50.367 --> 00:03:55.107
And we could get even more specific and
say this array can be of arbitrary length,

58
00:03:55.107 --> 00:03:57.650
but it must only contain strings.

59
00:03:57.650 --> 00:04:00.910
And then you could say, but
it must be of length three.

60
00:04:00.910 --> 00:04:03.220
But those strings can be anything at all.

61
00:04:03.220 --> 00:04:08.060
And then we could get narrower still
by being very specific about what

62
00:04:08.060 --> 00:04:10.903
certain strings these values might be.

63
00:04:10.903 --> 00:04:17.096
Now if we had a function that
could operate on any array.

64
00:04:17.096 --> 00:04:20.890
We could look at the array type,
and anything below it,

65
00:04:20.890 --> 00:04:26.680
anything narrower than that will be
fine to use, it's just more specific.

66
00:04:26.680 --> 00:04:32.123
We can always regard an array of three
strings that must remain of size three.

67
00:04:32.123 --> 00:04:36.374
We can always regard that as
an arbitrary array of strings, or

68
00:04:36.374 --> 00:04:40.130
as an array of anything,
or as any value, right?

69
00:04:40.130 --> 00:04:44.480
So narrower values can always
fit through the wider hole.

70
00:04:44.480 --> 00:04:46.370
That's the way I kind of think of this.

71
00:04:46.370 --> 00:04:54.160
But if you wanted to have
specifically an array of strings,

72
00:04:54.160 --> 00:04:55.960
and you had an array of any, you'd have
to find a way to narrow that type.

73
00:04:55.960 --> 00:04:59.180
And to validate that only
the correct thing fits through.

74
00:04:59.180 --> 00:05:02.020
So this is what we mean by wider and
narrower.

75
00:05:02.020 --> 00:05:07.390
Wide is very general,
narrow is extremely specific.

76
00:05:07.390 --> 00:05:13.531
We run into this never type when we were
initializing an array with an empty array.

77
00:05:13.531 --> 00:05:20.290
Never is infinitely narrow,
it literally can hold no value.

78
00:05:20.290 --> 00:05:24.490
I mean, it can hold a never, but
it is like circular reasoning, right?

79
00:05:24.490 --> 00:05:28.620
You think of it like there is no hole,
nothing can really pass through.

80
00:05:30.030 --> 00:05:35.580
It is nothing and impossible, or
unreachable, think of it that way

