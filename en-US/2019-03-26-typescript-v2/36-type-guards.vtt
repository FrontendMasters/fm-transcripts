WEBVTT

1
00:00:00.070 --> 00:00:02.682
&gt;&gt; Mike North: We can even
define our own type guards.

2
00:00:05.722 --> 00:00:11.890
&gt;&gt; Mike North: So this is called, this is
referred to as a user defined type guard.

3
00:00:11.890 --> 00:00:16.740
And if we look at the implementation here,
what type does this return?

4
00:00:16.740 --> 00:00:18.520
What's this type here?

5
00:00:18.520 --> 00:00:21.420
Type of something equals string.

6
00:00:24.916 --> 00:00:25.550
&gt;&gt; Mike North: It's a Boolean, right?

7
00:00:26.590 --> 00:00:29.450
Type of, if we were to capture that value,
it's a Boolean.

8
00:00:29.450 --> 00:00:36.471
And a Boolean ended with another Boolean,
it's gonna give us a Boolean.

9
00:00:36.471 --> 00:00:40.900
So the return here,
we're definitely returning a Boolean.

10
00:00:40.900 --> 00:00:45.610
But we have indicated to
the typescript compiler that it should

11
00:00:45.610 --> 00:00:50.720
regard the true or false value
of this Boolean as an indication

12
00:00:50.720 --> 00:00:55.010
of whether x is of type has e-mail.

13
00:00:55.010 --> 00:00:59.510
And that allows us down here to use
it just like we're using type of and

14
00:00:59.510 --> 00:01:02.030
instance of in the previous examples.

15
00:01:02.030 --> 00:01:07.670
We can use it to narrow from
an unknown down to a has e-mail.

16
00:01:07.670 --> 00:01:10.620
These are super, super handy, right?

17
00:01:10.620 --> 00:01:14.570
This is where your own custom
types that you have in your app,

18
00:01:14.570 --> 00:01:20.660
you can create nice guards that will
allow you to handle specific cases.

19
00:01:20.660 --> 00:01:24.110
This is my favorite guard,
I use it all over the place.

20
00:01:25.490 --> 00:01:27.150
Is defined.

21
00:01:27.150 --> 00:01:29.382
And we're bringing back generics here.

22
00:01:29.382 --> 00:01:33.946
Here's why.

23
00:01:33.946 --> 00:01:35.070
We have a tight parameter T.

24
00:01:35.070 --> 00:01:38.150
We take an argument, which could be T or

25
00:01:38.150 --> 00:01:43.364
undefined, and
we return whether the arg is T.

26
00:01:43.364 --> 00:01:48.160
So we're trying to remove
the possibility that it is undefined.

27
00:01:48.160 --> 00:01:55.730
And if we look at the return here, that is
gonna give us the correct Boolean value

28
00:01:55.730 --> 00:02:00.830
if we're trying to figure out that
this is a non-undefined value.

29
00:02:01.850 --> 00:02:03.930
It's value is defined.

30
00:02:03.930 --> 00:02:07.759
The reason I do things this way
is because if I were to pass

31
00:02:07.759 --> 00:02:12.079
this a value that could be a string but
could also be undefined,

32
00:02:12.079 --> 00:02:17.068
when the type checking matches that up,
it's kind of like it does this.

33
00:02:24.989 --> 00:02:27.371
&gt;&gt; Mike North: It almost
lines things up this way.

34
00:02:27.371 --> 00:02:30.170
And so, T becomes string.

35
00:02:30.170 --> 00:02:33.990
So this is how I'm able to kind
of pluck out the undefined.

36
00:02:33.990 --> 00:02:38.841
The argument I pass in
&gt;&gt; Mike North: Has it's

37
00:02:38.841 --> 00:02:40.230
undefined value removed.

38
00:02:40.230 --> 00:02:45.541
And this is useful if you have
a list of things, like this.

39
00:02:55.106 --> 00:02:59.403
&gt;&gt; Mike North: Right, so this is
an array of type string or undefined.

40
00:02:59.403 --> 00:03:00.826
List.

41
00:03:02.238 --> 00:03:03.013
&gt;&gt; Mike North: Filter.

42
00:03:09.048 --> 00:03:10.020
&gt;&gt; Mike North: Filtered.

43
00:03:10.020 --> 00:03:12.650
We've removed all of the undefined values,
and

44
00:03:12.650 --> 00:03:15.520
we've removed undefined
from the type as well.

45
00:03:15.520 --> 00:03:18.350
So it's great if you have a collection,
and

46
00:03:18.350 --> 00:03:23.490
say you have some optional value on
a type, and you have an array of them.

47
00:03:23.490 --> 00:03:28.140
You can just attempt to pluck all them
off, filter out all the undefined values.

48
00:03:28.140 --> 00:03:28.790
Things just work.

49
00:03:28.790 --> 00:03:30.921
I wonder if they fixed this.

50
00:03:33.760 --> 00:03:39.120
&gt;&gt; Mike North: So this, actually, I think
this is doing exactly what it should be.

51
00:03:39.120 --> 00:03:42.210
But the fact that string
can have a falsey value

52
00:03:42.210 --> 00:03:46.400
means that an empty string passes through
the Boolean constructor as false.

53
00:03:46.400 --> 00:03:50.120
Which is why we can't really tell the
difference between an empty string, and

54
00:03:50.120 --> 00:03:51.280
a Boolean.

55
00:03:51.280 --> 00:03:55.670
They both will give the same
truthy-falsey check.

56
00:03:55.670 --> 00:03:56.590
But it's really,

57
00:03:56.590 --> 00:04:01.270
really useful, is defined, when used in
conjunction with filtering functions.

