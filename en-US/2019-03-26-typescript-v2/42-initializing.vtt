WEBVTT

1
00:00:00.126 --> 00:00:05.210
&gt;&gt; Mike North: The last thing we're
gonna do in this workshop is to give

2
00:00:05.210 --> 00:00:10.518
you an idea of how the TypeScript
compiler sees your code.

3
00:00:10.518 --> 00:00:16.032
And we're gonna do this through
taking a tour of a really quick and

4
00:00:16.032 --> 00:00:19.810
dirty documentation generator.

5
00:00:19.810 --> 00:00:24.840
That takes advantage of all of the
information that compiler gathers as it

6
00:00:24.840 --> 00:00:29.230
parses and
type checks your TypeScript source code.

7
00:00:29.230 --> 00:00:35.089
So let's look at in the notes section
at number nine, Compiler API.

8
00:00:44.597 --> 00:00:49.198
&gt;&gt; Mike North: So first, this is proof
that I keep using isDefined over and

9
00:00:49.198 --> 00:00:50.350
over again.

10
00:00:50.350 --> 00:00:52.830
I just cannot seem to get by without it.

11
00:00:54.440 --> 00:00:58.509
We're going to import,
this is called a wild card import.

12
00:00:58.509 --> 00:01:03.870
We're just sort of getting everything from
TypeScript, from the TypeScript module.

13
00:01:03.870 --> 00:01:10.653
We could do import
createProgram from TypeScript,

14
00:01:10.653 --> 00:01:17.752
and then we'd be able to
use createProgram directly.

15
00:01:17.752 --> 00:01:24.055
All this does is it allows
us to do ts.createProgram.

16
00:01:26.645 --> 00:01:28.129
&gt;&gt; Mike North: There it is.

17
00:01:28.129 --> 00:01:32.057
And this is just because we need
a whole bunch of different stuff, but

18
00:01:32.057 --> 00:01:33.490
it's a little nuanced.

19
00:01:34.670 --> 00:01:36.750
It's kinda TypeScript specific.

20
00:01:36.750 --> 00:01:39.390
You don't see wildcard
imports in JavaScript.

21
00:01:42.944 --> 00:01:45.260
&gt;&gt; Mike North: So
the first thing we're gonna do,

22
00:01:45.260 --> 00:01:49.140
we're going to create
a TypeScript program.

23
00:01:49.140 --> 00:01:51.080
And we're passing in two things.

24
00:01:51.080 --> 00:01:54.340
This first object here, options,

25
00:01:54.340 --> 00:01:58.920
it is equivalent conceptually to
your ts.Config compiler options.

26
00:01:58.920 --> 00:02:01.830
So we've got target,
we could have module and

27
00:02:01.830 --> 00:02:08.400
say ys.ModuleKind.CommonJS,
whatever we want to put in there.

28
00:02:08.400 --> 00:02:12.320
These correspond to some of the command
line flags we were looking at when we

29
00:02:12.320 --> 00:02:16.650
first played with TypeScript compiler and
it's also what's in ts.Config.

30
00:02:16.650 --> 00:02:20.400
The second thing we
must pass is rootNames.

31
00:02:20.400 --> 00:02:25.962
And so what I've done is using nodes
path module, I've joined together

32
00:02:25.962 --> 00:02:31.799
an appropriate path that leads to the
example we compiled in that first thing

33
00:02:31.799 --> 00:02:37.670
we did as we were poking around with
how to turn TypeScript into JavaScript.

34
00:02:37.670 --> 00:02:39.430
So it's pointing to the ts file.

35
00:02:43.380 --> 00:02:47.899
The next thing we're gonna do is grab this

36
00:02:47.899 --> 00:02:53.560
program, and by the time we reach this
line of code it will be compiled and

37
00:02:53.560 --> 00:02:55.460
type checked and ready to go.

38
00:02:55.460 --> 00:02:58.650
We're gonna get all of
the source files and

39
00:02:58.650 --> 00:03:03.480
filter out those that
are declaration files.

40
00:03:03.480 --> 00:03:04.830
And this is a good opportunity for

41
00:03:04.830 --> 00:03:10.800
me to kinda show you what all is brought
in automatically to you program.

42
00:03:10.800 --> 00:03:18.590
So I'll comment that out temporarily,
console.log(nonDeclFiles).

43
00:03:18.590 --> 00:03:23.200
Let's just call that files now since
we're gonna skip the filtering

44
00:03:24.280 --> 00:03:29.590
and for the purposes of logging,
I'm just gonna transform them,

45
00:03:29.590 --> 00:03:32.510
their objects, and
I just want the path name.

46
00:03:32.510 --> 00:03:33.651
So I wanna run this code.

47
00:03:39.926 --> 00:03:41.360
&gt;&gt; Mike North: So I didn't save.

48
00:03:41.360 --> 00:03:42.050
My bad.

49
00:03:44.750 --> 00:03:47.620
And we have a whole lot
of different stuff.

50
00:03:48.620 --> 00:03:50.130
Someone has used TypeScript before.

51
00:03:50.130 --> 00:03:54.220
Can you tell me what these
files are all about?

52
00:03:54.220 --> 00:03:57.929
&gt;&gt; Speaker 1: There type definitions for
various different libraries.

53
00:03:57.929 --> 00:03:59.008
&gt;&gt; Mike North: For node, right?

54
00:03:59.008 --> 00:04:05.560
Anything that starts with @types,
those are from the definitely typed,

55
00:04:05.560 --> 00:04:09.202
master repo of public type definitions.

56
00:04:09.202 --> 00:04:12.767
You could get to those
by just clicking into

57
00:04:12.767 --> 00:04:18.080
stuff that I'm importing from
the various node modules.

58
00:04:18.080 --> 00:04:23.450
At types node path, right, so
these are all the different node modules.

59
00:04:24.510 --> 00:04:27.749
So let's keep looking around here.

60
00:04:27.749 --> 00:04:31.867
There's some more types nodes stuff,
lots and lots of it.

61
00:04:31.867 --> 00:04:36.670
&gt;&gt; Mike North: And just scanning for
when things look a bit different.

62
00:04:36.670 --> 00:04:40.410
Here's mocha and chai, so
I'm using those for testing.

63
00:04:40.410 --> 00:04:45.850
Okay, finally we have the original
source file in hello-ts.

64
00:04:45.850 --> 00:04:48.628
Note that everything else
has been a d.ts file.

65
00:04:48.628 --> 00:04:52.162
These are just declaration
files that are being imported.

66
00:04:52.162 --> 00:04:56.928
And then underneath,
because this is printed from the first

67
00:04:56.928 --> 00:05:01.140
things that are parsed all
the way to the last things.

68
00:05:03.080 --> 00:05:07.320
Like, I lost my place,
so here's the program.

69
00:05:07.320 --> 00:05:09.762
This is what I would
consider my source code.

70
00:05:09.762 --> 00:05:13.106
Underneath that we've got esnext, right,

71
00:05:13.106 --> 00:05:18.870
these are actually declaration files
that come with TypeScript itself.

72
00:05:18.870 --> 00:05:24.450
So that's where I can click on
something like, what's a good example?

73
00:05:24.450 --> 00:05:26.260
Map, array.map.

74
00:05:26.260 --> 00:05:28.554
Part of the programming language, right?

75
00:05:28.554 --> 00:05:32.339
Well we find ourself
in a declaration file,

76
00:05:32.339 --> 00:05:37.147
so he same mechanism that is
used to consume library type

77
00:05:37.147 --> 00:05:41.958
information is used to consume
the type information for

78
00:05:41.958 --> 00:05:46.060
everything we would consider JavaScript.

79
00:05:46.060 --> 00:05:48.230
Same goes with the dom API.

80
00:05:48.230 --> 00:05:53.745
And if we looked here, there are actually
a couple different versions of these.

81
00:05:53.745 --> 00:05:57.474
Where, when we're saying,
I want to target es17 or 2017 or

82
00:05:57.474 --> 00:06:02.140
2016 or 2015, you just end up kind
of picking a different file here.

83
00:06:02.140 --> 00:06:06.265
And a lot of the new one just
stack on top of the old ones,

84
00:06:06.265 --> 00:06:10.420
cuz naturally,
the language is additive as time foes on.

85
00:06:11.760 --> 00:06:15.410
So If we're gonna build
the documentation engine

86
00:06:15.410 --> 00:06:20.320
we probably don't wanna document the whole
JavaScript programming language.

87
00:06:20.320 --> 00:06:22.970
We're gonna end up touching
on a lot of different things.

88
00:06:22.970 --> 00:06:27.254
And it sort of starts to get very big,
very quickly.

89
00:06:27.254 --> 00:06:30.312
So as you touch the string,
now they are all in string methods and

90
00:06:30.312 --> 00:06:33.620
those refer to arrays, and
there are the array methods.

91
00:06:33.620 --> 00:06:38.520
Sort of unravels very quickly and
becomes huge.

92
00:06:38.520 --> 00:06:40.760
So that is why I'm filtering through for

93
00:06:40.760 --> 00:06:44.570
only those things that
are not declaration files.

94
00:06:44.570 --> 00:06:48.060
Only the ts files, not the d.ts files.

95
00:06:48.060 --> 00:06:54.400
And, thankfully, there is a property
on there called isDeclarationFile.

96
00:06:54.400 --> 00:07:00.354
If I were to do the same thing now,

97
00:07:00.354 --> 00:07:06.528
console.log nonDeclFiles.map

98
00:07:06.528 --> 00:07:11.222
fileName, run it again.

99
00:07:11.222 --> 00:07:13.669
There we go, we're done to one.

100
00:07:13.669 --> 00:07:18.220
One source file, everything else is
just extra type information that helps

101
00:07:18.220 --> 00:07:20.150
everything compile properly.

