WEBVTT

1
00:00:00.180 --> 00:00:02.060
&gt;&gt; Mike North: Let's touch on arrays.

2
00:00:02.060 --> 00:00:04.850
Right, so we've been working with
primitive values so far, and

3
00:00:04.850 --> 00:00:07.820
with questions we got
a couple object examples.

4
00:00:07.820 --> 00:00:12.210
So here's an example of an array and
pretty intuitive.

5
00:00:12.210 --> 00:00:18.540
One way of representing an array is to use
square brackets following a type, right?

6
00:00:18.540 --> 00:00:21.790
So this is an array of numbers.

7
00:00:21.790 --> 00:00:24.120
We can push 33, and as you would expect,

8
00:00:24.120 --> 00:00:28.710
trying to push a string into
this array will cause a problem.

9
00:00:28.710 --> 00:00:34.710
Now, if we didn't have this here,
we would run into issues.

10
00:00:34.710 --> 00:00:40.472
That's an array of nevers, sounds bad.

11
00:00:40.472 --> 00:00:45.965
Array of nevers as in, it can never
happen, it's never going to work.

12
00:00:45.965 --> 00:00:50.770
[LAUGH] So
never is type script bottom type.

13
00:00:50.770 --> 00:00:55.000
And we will look at that more in detail
later when we're studying top and

14
00:00:55.000 --> 00:00:56.900
bottom types specifically.

15
00:00:56.900 --> 00:01:01.194
But just note that we're gonna
have problems pushing anything at

16
00:01:01.194 --> 00:01:02.216
all into this.

17
00:01:02.216 --> 00:01:06.050
And if we think about it
this is kind of makes sense,

18
00:01:06.050 --> 00:01:11.225
if you could only look at line 57 and
you had to decide the type of aa,

19
00:01:11.225 --> 00:01:17.500
all you can assume is that it's an array
of whatever, it's an array of something.

20
00:01:18.690 --> 00:01:21.700
Now you could say it's
an array of anything at all,

21
00:01:21.700 --> 00:01:26.390
but,
&gt;&gt; Mike North: That's gonna be dangerously

22
00:01:26.390 --> 00:01:28.500
flexible, right?

23
00:01:28.500 --> 00:01:31.910
So an array of nevers, yes it's an array.

24
00:01:31.910 --> 00:01:34.190
But without additional information.

25
00:01:34.190 --> 00:01:38.930
TypeScript doesn't have what it needs in
order to make a nice, safe choice for you.

26
00:01:38.930 --> 00:01:41.770
So that's why for array declarations.

27
00:01:41.770 --> 00:01:43.660
That start out as empty.

28
00:01:43.660 --> 00:01:47.520
You wanna be specific about
what you're putting in there.

29
00:01:47.520 --> 00:01:50.000
Now, if we had even one element,

30
00:01:50.000 --> 00:01:52.440
it's gonna be able to make
a reasonable assumption here.

31
00:01:53.850 --> 00:01:56.770
So if you didn't have
motivation in situations

32
00:01:56.770 --> 00:01:59.710
where you already start out with
something that'll definitely be there and

33
00:01:59.710 --> 00:02:01.340
then conditionally you add other stuff.

34
00:02:02.360 --> 00:02:06.450
Putting that in the declaration itself
as the variable initialization.

35
00:02:07.570 --> 00:02:08.950
Now you have motivation to go and

36
00:02:08.950 --> 00:02:13.420
do that, because it saves you from
having to actually specify that type.

37
00:02:14.470 --> 00:02:17.336
It can be inferred if you
give it some contents at all.

38
00:02:21.577 --> 00:02:24.110
&gt;&gt; Mike North: So, tuple is a fancy word.

39
00:02:25.340 --> 00:02:26.760
Just means array.

40
00:02:26.760 --> 00:02:33.160
It's an array of a fixed length, and
an array that comes with a convention.

41
00:02:33.160 --> 00:02:38.430
So if we were to define a data structure
that could contain a street address,

42
00:02:38.430 --> 00:02:43.040
we could use an object with property
names like house number, street name,

43
00:02:43.040 --> 00:02:44.820
postal code, city.

44
00:02:44.820 --> 00:02:47.690
And then we can pluck
things out as we need them.

45
00:02:47.690 --> 00:02:51.830
Tuples, similarly,
can hold a structured set of data.

46
00:02:51.830 --> 00:02:55.380
But, we just have to remember
that the convention here is,

47
00:02:55.380 --> 00:02:56.780
the first thing is the house number,

48
00:02:56.780 --> 00:03:00.590
the second thing is the street name,
the last thing is the postal code.

49
00:03:00.590 --> 00:03:03.270
And we still get strong typing there.

50
00:03:03.270 --> 00:03:06.450
So these arrays can
only be of length four.

51
00:03:06.450 --> 00:03:10.540
And the types of their members must
be exactly as we declare them.

52
00:03:10.540 --> 00:03:14.220
Now, this is a great way of returning
multiple values from a function.

53
00:03:15.440 --> 00:03:20.090
I was successful in making this fetch and
here is your data.

54
00:03:20.090 --> 00:03:24.900
I was unsuccessful in making this fetch,
and here is your error message, right?

55
00:03:26.050 --> 00:03:31.800
A nice alternative, if you have something
that, through regular use, might throw.

56
00:03:31.800 --> 00:03:34.960
Instead of throwing,
which is good for exceptional errors,

57
00:03:34.960 --> 00:03:39.980
things you didn't plan for,
this would allow you to return in like

58
00:03:39.980 --> 00:03:44.730
a thumbs up a thumbs down for
the result and data about the details.

59
00:03:46.180 --> 00:03:50.192
You can see here that we get type
checking for members of a tuple,

60
00:03:50.192 --> 00:03:53.163
one thing I want to point
out that make it tight in

61
00:03:53.163 --> 00:04:00.644
the future
&gt;&gt; Mike North: You

62
00:04:00.644 --> 00:04:05.454
get type safety around the members,
but I believe.

63
00:04:08.905 --> 00:04:11.590
&gt;&gt; Mike North: You don't
get type safety in push.

64
00:04:11.590 --> 00:04:17.158
So it's gonna regard this as
in terms of the type of push,

65
00:04:17.158 --> 00:04:20.293
it can take strings or numbers.

66
00:04:20.293 --> 00:04:25.385
So with tuples, you're gonna want to be
careful to just sort of set its value and

67
00:04:25.385 --> 00:04:26.677
access its value and

68
00:04:26.677 --> 00:04:30.880
not use the array methods because
they're not really type safe.

69
00:04:30.880 --> 00:04:35.970
There's actually no way to type,
to safely type push

70
00:04:35.970 --> 00:04:40.210
In such a way that based on the number
of elements it currently has.

71
00:04:40.210 --> 00:04:44.530
If we were to try to
incrementally build this up, we

72
00:04:44.530 --> 00:04:49.290
wouldn't know that first we should accept
a number, then we should accept a string,

73
00:04:49.290 --> 00:04:52.330
then we should accept a string,
then we should accept a number.

74
00:04:52.330 --> 00:04:56.520
With that it will require us to kind
of based on state in the array change

75
00:04:56.520 --> 00:04:58.100
the type signature of this function.

76
00:04:59.260 --> 00:05:01.590
And you don't use tuples this way, anyway.

77
00:05:01.590 --> 00:05:05.370
Cuz the only way to get a valid
one is to set it all at once and

78
00:05:05.370 --> 00:05:08.420
that can all be type checked
as a whole statement.

79
00:05:08.420 --> 00:05:09.130
Yes?

80
00:05:09.130 --> 00:05:11.850
&gt;&gt; Speaker 2: If you did, for example,
want to have an array that could be either

81
00:05:11.850 --> 00:05:16.530
number or a string,
how would you go about doing that?

82
00:05:16.530 --> 00:05:17.500
&gt;&gt; Mike North: Good question.

83
00:05:17.500 --> 00:05:22.234
If I showed you
&gt;&gt; Mike North: If I

84
00:05:22.234 --> 00:05:25.773
showed you this tool tip here.

85
00:05:25.773 --> 00:05:33.520
Wait, sorry it's,
&gt;&gt; Mike North: This tool tip.

86
00:05:35.480 --> 00:05:37.489
So here, this kind of an example.

87
00:05:38.810 --> 00:05:42.411
If you had read that,
like can someone give me a shot.

88
00:05:42.411 --> 00:05:43.082
&gt;&gt; Speaker 3: Or a number there.

89
00:05:43.082 --> 00:05:44.149
&gt;&gt; Mike North: String or number.

90
00:05:44.149 --> 00:05:49.700
It's string or number parentheses,
entered an array of them.

91
00:05:49.700 --> 00:05:52.286
&gt;&gt; Speaker 3: So you could do like a
string in a function like I wanna array of

92
00:05:52.286 --> 00:05:54.848
strings or functions to return
back in this the sum of that?

93
00:05:54.848 --> 00:05:56.917
&gt;&gt; Mike North: Correct.
&gt;&gt; Speaker 3: Okay, cool.

94
00:05:56.917 --> 00:05:59.202
&gt;&gt; Mike North: And that's the last
thing we'll cover in this lecture.

95
00:05:59.202 --> 00:06:00.300
&gt;&gt; Speaker 3: I'm sorry.
&gt;&gt; Mike North: No, no,

96
00:06:00.300 --> 00:06:03.998
do not apologize for
leading us to if anything,

97
00:06:03.998 --> 00:06:09.170
you're doing me a favor and
teeing up the next sections.

98
00:06:09.170 --> 00:06:10.530
Other questions about this?

99
00:06:10.530 --> 00:06:13.776
&gt;&gt; Speaker 3: You can'actually
just put any like

100
00:06:13.776 --> 00:06:15.059
&gt;&gt; Mike North: Totally, yep,

101
00:06:15.059 --> 00:06:21.710
you could do any You can always provide
a type indentation to loosen things up.

102
00:06:21.710 --> 00:06:28.990
Similar to our let and const example,
when creating these tuples, right.

103
00:06:28.990 --> 00:06:31.040
These things of fixed length.

104
00:06:31.040 --> 00:06:34.170
Like a pair of numbers in an array.

105
00:06:34.170 --> 00:06:39.900
You are going to often have to or
always have to specify the type you want.

106
00:06:39.900 --> 00:06:47.060
Why, because erring on the side of
not interfering with your work flow.

107
00:06:47.060 --> 00:06:50.215
Type script is gonna consider
this to be an array of numbers.

108
00:06:50.215 --> 00:06:56.487
Right, it's not gonna consider this
to be a tuple containing two numbers.

109
00:06:56.487 --> 00:07:00.267
So you just have to always provide this
type annotation here because it's a pretty

110
00:07:00.267 --> 00:07:01.460
specific thing.

111
00:07:01.460 --> 00:07:06.545
Same goes with a string literal type,
if you wanted a string whose type was

112
00:07:06.545 --> 00:07:11.647
only the string Mike, it wouldn't be
enough to just say let x equal Mike.

113
00:07:11.647 --> 00:07:16.137
You'd have to say let x: Mike = Mike.

114
00:07:16.137 --> 00:07:19.105
And only then would you get that really,
really specific thing.

