WEBVTT

1
00:00:00.360 --> 00:00:03.010
&gt;&gt; Mike North: So let's dig into generics.

2
00:00:03.010 --> 00:00:10.740
Generics parameterize types in the same
way that functions parameterize values.

3
00:00:10.740 --> 00:00:14.430
So we're gonna talk about when
it's appropriate to use a generic.

4
00:00:15.650 --> 00:00:20.240
The ins and
outs of type parameters in general.

5
00:00:20.240 --> 00:00:24.990
And how to constraint type parameters, for

6
00:00:24.990 --> 00:00:29.730
example, within a function, you have what
you need in order to have type safety

7
00:00:29.730 --> 00:00:33.900
within the function, and the outside
world is happy with things as well.

8
00:00:35.270 --> 00:00:36.996
Cuz types are just constraints and

9
00:00:36.996 --> 00:00:39.743
they represent contracts
between various entities.

10
00:00:41.879 --> 00:00:46.030
&gt;&gt; Mike North: So
we're gonna look at the notes/5.

11
00:00:46.030 --> 00:00:51.110
As I said, generics parameterize types
like functions parameterize values.

12
00:00:51.110 --> 00:00:54.110
For example,
if we had a function like this,

13
00:00:54.110 --> 00:00:57.620
and let's pretend it's just
written in JavaScript, right?

14
00:00:57.620 --> 00:01:03.290
With no type annotation,
this function produces a wrapped value,

15
00:01:03.290 --> 00:01:07.360
and depending on what we feed it,
what we give it for

16
00:01:07.360 --> 00:01:12.764
x, that will determine the value of
the thing that comes out, right?

17
00:01:12.764 --> 00:01:15.740
We can put whatever we want there, and

18
00:01:17.270 --> 00:01:21.410
the function allows us to reuse this piece
of code, whether we want to wrap a string,

19
00:01:21.410 --> 00:01:25.300
or a number, or have a wrapped
value inside a wrapped value,

20
00:01:26.440 --> 00:01:29.830
the perimeter x is sort of
a placeholder that is used.

21
00:01:29.830 --> 00:01:32.550
And it allows to reuse this piece of code.

22
00:01:32.550 --> 00:01:38.680
Similarly, we can create
a type that allows us to

23
00:01:38.680 --> 00:01:45.850
provide a type parameter in this case
X in between these angle brackets.

24
00:01:45.850 --> 00:01:53.010
And that type parameter will be used
as the type for this property value.

25
00:01:53.010 --> 00:01:57.690
So here's an example,
if I pass in string array,

26
00:01:57.690 --> 00:02:00.930
this is just like passing
an argument to a function, right?

27
00:02:00.930 --> 00:02:05.298
But I'm passing a type to a generic type.

28
00:02:07.964 --> 00:02:10.765
&gt;&gt; Mike North: So
because of the tool tips like,

29
00:02:12.335 --> 00:02:13.446
&gt;&gt; Mike North: This is correct, but

30
00:02:13.446 --> 00:02:16.236
I'm more interested in what
I can do with this thing.

31
00:02:16.236 --> 00:02:19.746
If we look at val.value,

32
00:02:19.746 --> 00:02:24.537
we can see that it is a string array.

33
00:02:26.096 --> 00:02:27.366
&gt;&gt; Mike North: As you
can see right over here.

34
00:02:28.777 --> 00:02:32.016
&gt;&gt; Mike North: If we were to change
this and make it just a string, well,

35
00:02:32.016 --> 00:02:36.619
we would get a type error here,
we'd have to make this a string.

36
00:02:36.619 --> 00:02:39.285
&gt;&gt; Mike North: And now,
the type of value is string.

37
00:02:39.285 --> 00:02:44.290
Sorry, it keeps disappearing,
I'm being overzealous with my mouse.

38
00:02:44.290 --> 00:02:51.210
But hopefully you can see here,
we're we're sort of filling in a blank or

39
00:02:51.210 --> 00:02:59.149
providing a type that is then incorporated
into what WrappedValue shakes out to be.

40
00:03:04.492 --> 00:03:07.052
&gt;&gt; Mike North: So you can name these
type parameters whatever you want.

41
00:03:07.052 --> 00:03:12.758
I can make this,
&gt;&gt; Mike North: Name function keys.

42
00:03:15.792 --> 00:03:17.269
&gt;&gt; Mike North: I can
make it FrontEndMasters,

43
00:03:17.269 --> 00:03:20.340
just like you can name function
params whatever you want.

44
00:03:20.340 --> 00:03:25.270
That's completely a local name to
everything that has access to this

45
00:03:25.270 --> 00:03:29.970
type param, which is just sort of, think
of it like the same idea as a closure.

46
00:03:29.970 --> 00:03:32.930
Right, you have a scope, and
this is a local variable,

47
00:03:32.930 --> 00:03:35.540
it's almost like an argument
passed to a function.

48
00:03:35.540 --> 00:03:39.532
The name of that argument only
has meaning within that function.

49
00:03:43.586 --> 00:03:47.834
&gt;&gt; Mike North: So the convention,
which you'll see a lot, is to start with

50
00:03:47.834 --> 00:03:53.320
the capital letter T, and use capital
letters like T, U, V, or S, or R.

51
00:03:53.320 --> 00:03:58.438
This a carryover from C++
which uses template parameters

52
00:03:58.438 --> 00:04:04.130
which basically they're
conceptually identical to this.

53
00:04:04.130 --> 00:04:06.760
So that's why you'll see
a lot of TypeScript coding,

54
00:04:06.760 --> 00:04:10.200
including my examples,
they'll just use the capital letter T.

55
00:04:10.200 --> 00:04:14.073
But that's just like saying
this function takes x and

56
00:04:14.073 --> 00:04:18.043
y as arguments, and
we can name this whatever we want.

57
00:04:19.232 --> 00:04:22.881
&gt;&gt; Mike North: So if we were using
something like array filter,

58
00:04:22.881 --> 00:04:27.776
we could type a function that would
appropriately filter based on

59
00:04:27.776 --> 00:04:31.990
the types of things that might
be in this array, right?

60
00:04:31.990 --> 00:04:36.830
If we were filtering through an array of
strings, so that we could remove any empty

61
00:04:36.830 --> 00:04:42.020
string we found, we'd want to
accept as our filtering function,

62
00:04:42.020 --> 00:04:47.060
we'd want that to take a string as
an argument and to return a boolean.

63
00:04:47.060 --> 00:04:51.830
And in fact, that is what happens,
if we had an array containing strings,

64
00:04:51.830 --> 00:04:54.647
.filter(),
&gt;&gt; Mike North: And

65
00:04:54.647 --> 00:05:00.230
we start to implement our callback,
&gt;&gt; Mike North: Let's

66
00:05:00.230 --> 00:05:04.510
say it's a filter that always passes,
it turns out x has a value of a string.

67
00:05:06.193 --> 00:05:08.130
&gt;&gt; Mike North: Right?
That's just what we want.

68
00:05:08.130 --> 00:05:11.649
If we had a named function
that was designed

69
00:05:11.649 --> 00:05:16.131
to,
&gt;&gt; Mike North: Named

70
00:05:16.131 --> 00:05:20.280
function like this,
&gt;&gt; Mike North: That only wanted to receive

71
00:05:20.280 --> 00:05:25.690
numbers, we would absolutely want this
to say, there's a misalignment here.

72
00:05:25.690 --> 00:05:27.740
Your function's designed to take numbers,

73
00:05:27.740 --> 00:05:30.330
I need one that's
designed to take strings.

74
00:05:30.330 --> 00:05:34.770
So this would be an appropriate type using
a generic that would allow us to sort of

75
00:05:34.770 --> 00:05:38.831
fill in the blank, what is the type
of the entity you're filtering for?

76
00:05:40.610 --> 00:05:44.226
&gt;&gt; Mike North: So here's an example of
us using this generic type of passing in

77
00:05:44.226 --> 00:05:47.930
string as the type parameter, so
this T will turn into a string.

78
00:05:49.130 --> 00:05:52.670
And we can see that now,
val is a string, and

79
00:05:52.670 --> 00:05:55.290
we're checking to see if
the type of val is a string.

80
00:05:55.290 --> 00:05:57.130
This all looks great to me, right?

81
00:05:57.130 --> 00:06:01.895
The runtime stuff, this, sorry,
that runtime stuff looks

82
00:06:01.895 --> 00:06:06.661
exactly like what I would want
to check if there's a string or

83
00:06:06.661 --> 00:06:09.941
not, and this in fact should be a string.

84
00:06:11.663 --> 00:06:14.539
&gt;&gt; Mike North: If we try to parse in the
wrong argument, obviously we get an error,

85
00:06:14.539 --> 00:06:16.520
otherwise if it's the right type,
we get OK.

