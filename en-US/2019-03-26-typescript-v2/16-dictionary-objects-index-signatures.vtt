WEBVTT

1
00:00:00.042 --> 00:00:01.897
&gt;&gt; Mike North: Here's our array example.

2
00:00:01.897 --> 00:00:07.797
Index signatures which look like this
here, square brackets, makes sense right.

3
00:00:07.797 --> 00:00:14.400
Because that's how we access a property
off of an object with an arbitrary key.

4
00:00:14.400 --> 00:00:22.155
We are saying if you access a property off
a phone number dict and give it a string.

5
00:00:22.155 --> 00:00:26.953
It'll either not be there at all,
or it'll have this form.

6
00:00:26.953 --> 00:00:31.245
Now, when you are defining
a dictionary type like this, and

7
00:00:31.245 --> 00:00:34.696
a dictionary is just a key
value data structure,

8
00:00:34.696 --> 00:00:39.325
you have almost certainly used
an object as a dictionary before in

9
00:00:39.325 --> 00:00:44.060
JavaScript property keys with
consistent object types, right.

10
00:00:44.060 --> 00:00:49.159
You've got to be careful that you don't
type this in such a way that TypeScript

11
00:00:49.159 --> 00:00:53.871
gives you a false guarantee that no
matter what property key you pass in,

12
00:00:53.871 --> 00:00:57.288
you will definitely get
a well-defined value out.

13
00:00:57.288 --> 00:00:59.860
Let's look at what would
happen if we did that.

14
00:01:05.117 --> 00:01:08.208
&gt;&gt; Mike North: So, an empty object
is a valid case here, right?

15
00:01:08.208 --> 00:01:13.314
No keys, and
no matter what I do it's acting

16
00:01:13.314 --> 00:01:17.874
like there's something there for me.

17
00:01:17.874 --> 00:01:24.777
This is a hard to track down error
waiting to happen, so don't do that.

18
00:01:24.777 --> 00:01:29.137
By adding undefined,
&gt;&gt; Mike North: We force,

19
00:01:30.213 --> 00:01:31.516
&gt;&gt; Mike North: A check on this, and

20
00:01:31.516 --> 00:01:34.521
what you'd have to do
is something like this.

21
00:01:41.825 --> 00:01:45.164
&gt;&gt; Mike North: See how up here
the undefined is present?

22
00:01:45.164 --> 00:01:50.188
And inside the block following the
condition the undefined has disappeared.

23
00:01:50.188 --> 00:01:54.968
What we have done here
is narrowed the type.

24
00:01:54.968 --> 00:01:59.958
TypeScript understands that this
condition that it understands that

25
00:01:59.958 --> 00:02:03.772
this type here can never
have a truthy value, never.

26
00:02:03.772 --> 00:02:09.799
So, there is no way for an undefined
value to pass into this block here.

27
00:02:09.799 --> 00:02:12.881
And this is the proper use
that we would want anyway.

28
00:02:12.881 --> 00:02:15.292
Because if we're just handed something and

29
00:02:15.292 --> 00:02:19.605
we're told that it's this type we don't
necessarily know what's on there.

30
00:02:19.605 --> 00:02:24.278
We don't know which keys are valid for
looking things up.

31
00:02:24.278 --> 00:02:29.398
So, conditions can be
used to narrow types.

32
00:02:29.398 --> 00:02:30.891
We could do it a different way.

33
00:02:38.010 --> 00:02:39.145
&gt;&gt; Mike North: It's just the inverse,
right?

34
00:02:39.145 --> 00:02:43.900
We're checking to see if
the type of d.abc is an object.

35
00:02:46.071 --> 00:02:50.964
&gt;&gt; Mike North: Let's see what
happens with this, impossible.

36
00:02:50.964 --> 00:02:55.321
It says this is like in terms of the Venn
diagram TypeScript's always trying to

37
00:02:55.321 --> 00:02:57.375
figure out a way to make things work.

38
00:02:57.375 --> 00:03:00.949
This is a situation
where it's saying okay,

39
00:03:00.949 --> 00:03:04.344
this can either be undefined or an object.

40
00:03:04.344 --> 00:03:09.114
So now we have some code that would
run in the case where it's a string.

41
00:03:09.114 --> 00:03:15.726
Never gonna happen never,
so you get never.

42
00:03:15.726 --> 00:03:20.999
I'll leave that there so
you can follow on that.

43
00:03:20.999 --> 00:03:25.046
Okay, here is our phone number dictionary.

44
00:03:25.046 --> 00:03:30.119
And this is just demonstrating
that we can place values in there

45
00:03:30.119 --> 00:03:34.722
if we misspelt something we'd
get busted on it, right.

46
00:03:34.722 --> 00:03:39.877
It's telling us there's no araCode,
we have to spell that right, areaCode.

47
00:03:39.877 --> 00:03:46.275
I'm gonna try editing it in a second, but
let's just see what happens right now.

48
00:03:46.275 --> 00:03:51.009
So, we can eliminate it because if this
were in our contacts page in our phone,

49
00:03:51.009 --> 00:03:53.762
we could have multiple
phone numbers there.

50
00:03:53.762 --> 00:03:55.700
Some people are not gonna
have a home number,

51
00:03:55.700 --> 00:03:58.155
they'll only have an office number,
so, this is fine.

52
00:03:58.155 --> 00:04:03.727
So it look likes the structure of
these values here, that's enforced.

53
00:04:03.727 --> 00:04:08.496
But we have total control over
what the properties keys are.

54
00:04:08.496 --> 00:04:13.371
One thing that's important to know is
that you can only have at most one string

55
00:04:13.371 --> 00:04:16.532
index signature and
one number index signature.

56
00:04:16.532 --> 00:04:21.220
So, you could change this to like number
and have something slightly different than

57
00:04:21.220 --> 00:04:24.796
if you passed a string in and
tried to access a property that way.

