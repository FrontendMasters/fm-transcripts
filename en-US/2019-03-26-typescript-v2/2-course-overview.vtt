WEBVTT

1
00:00:00.220 --> 00:00:03.077
&gt;&gt; Mike North: So here's a rough
outline of what we're gonna learn.

2
00:00:03.077 --> 00:00:07.730
We're gonna start out with kind of a crash
course in the TypeScript programming

3
00:00:07.730 --> 00:00:08.860
language.

4
00:00:08.860 --> 00:00:12.200
Now, we don't have time, and
it's not a good use of our time

5
00:00:12.200 --> 00:00:17.640
to go through every little facet of
what can be done with TypeScript.

6
00:00:17.640 --> 00:00:21.205
My main goal here is to ensure that
I leave you with a great mental

7
00:00:21.205 --> 00:00:24.386
model of how to think about
this programming language.

8
00:00:24.386 --> 00:00:25.955
Because then you can go and

9
00:00:25.955 --> 00:00:30.820
you can learn about all the little corners
that I made left untouched on your own.

10
00:00:31.860 --> 00:00:35.420
We'll learn about configuring
the TypeScript compiler.

11
00:00:35.420 --> 00:00:40.366
This is important because it can be
the difference between shrinking

12
00:00:40.366 --> 00:00:42.507
your code by 70%, right?

13
00:00:42.507 --> 00:00:47.367
Like if you're building for IE6, there's
a lot of extra code there because we can't

14
00:00:47.367 --> 00:00:50.977
really depend on as much being
there in the browser for us to use.

15
00:00:50.977 --> 00:00:56.620
And it also helps you set
your strictness settings.

16
00:00:56.620 --> 00:00:59.280
So if you really want type safety,
you kind of have to

17
00:01:00.520 --> 00:01:05.320
set things appropriately so
the rules are strong, right?

18
00:01:06.930 --> 00:01:10.710
We will go through a three step,
practical strategy for

19
00:01:10.710 --> 00:01:13.440
converting from TypeScript to JavaScript.

20
00:01:13.440 --> 00:01:15.290
There are bad ways to do this.

21
00:01:16.520 --> 00:01:20.429
If done correctly, and
if done the way that I'm gonna teach you,

22
00:01:20.429 --> 00:01:23.288
it can be a very smooth,
incremental process.

23
00:01:23.288 --> 00:01:27.270
It doesn't have to be a big,
disruptive thing, right?

24
00:01:27.270 --> 00:01:31.950
We don't have to treat it like
we're rewriting a JavaScript

25
00:01:31.950 --> 00:01:35.920
program in Swift or
something completely unrelated.

26
00:01:35.920 --> 00:01:38.664
We can take advantage of the similarity
between these languages.

27
00:01:38.664 --> 00:01:44.660
And the ability for mixing JavaScript and
TypeScript modules.

28
00:01:44.660 --> 00:01:48.858
We'll focus quite a bit on
advanced types and generics.

29
00:01:48.858 --> 00:01:53.204
And you can think of generics
as parameterized types, right,

30
00:01:53.204 --> 00:01:57.556
we pass a value to a function to
sort of parameterize the value.

31
00:01:57.556 --> 00:02:02.039
We can pass type parameters to generics,
to parameterize types,

32
00:02:02.039 --> 00:02:05.420
like a fill-in-the-blank
kind of situation.

33
00:02:05.420 --> 00:02:09.240
And at the end, I want to give you a quick

34
00:02:09.240 --> 00:02:14.080
demo of how the TypeScript
compiler looks at your code.

35
00:02:14.080 --> 00:02:17.980
So we're going to use the JavaScript API
for the TypeScript compiler,

36
00:02:17.980 --> 00:02:22.150
not because I think a lot of you
will end up using this in your apps.

37
00:02:22.150 --> 00:02:24.560
But it allows us to
pick under the hood and

38
00:02:24.560 --> 00:02:26.840
to see how TypeScript
understands our code.

39
00:02:26.840 --> 00:02:31.800
And how it sort of splits it apart and
how it represents it in data structures.

40
00:02:31.800 --> 00:02:35.178
That's really important in order to
validate that you have the correct

41
00:02:35.178 --> 00:02:35.919
mental model.

