WEBVTT

1
00:00:00.040 --> 00:00:02.640
&gt;&gt; Mike North: Earlier we had
a question about the difference between

2
00:00:02.640 --> 00:00:05.720
interfaces and
something called type aliases.

3
00:00:05.720 --> 00:00:11.600
And these are both ways of giving
a structure a name that we can import and

4
00:00:11.600 --> 00:00:15.240
export from modules, and we can refer to.

5
00:00:15.240 --> 00:00:19.470
The main benefit is we have one central
place where a type is defined, and

6
00:00:19.470 --> 00:00:22.550
it can be used throughout a code base.

7
00:00:22.550 --> 00:00:27.350
So we're gonna study these two concepts,
and compare and contrast them.

8
00:00:28.400 --> 00:00:31.600
Along the way, we're gonna touch on
different types of signatures which

9
00:00:31.600 --> 00:00:36.410
includes the kind of signature we're
used to for invoking a function, and

10
00:00:36.410 --> 00:00:38.170
something called an index signature.

11
00:00:39.300 --> 00:00:43.600
We will discuss the idea of open
interfaces, and this is a way that you can

12
00:00:43.600 --> 00:00:48.210
augment types that you may
import from a library somewhere.

13
00:00:48.210 --> 00:00:52.600
We will discuss the concept of access
modifier keywords which gives us control

14
00:00:52.600 --> 00:00:56.326
over who can see methods and

15
00:00:56.326 --> 00:01:01.060
instance data when it comes to classes.

16
00:01:01.060 --> 00:01:05.937
And finally we'll touch on heritage
clauses which is just a fancy name for

17
00:01:05.937 --> 00:01:07.206
extends, right?

18
00:01:07.206 --> 00:01:09.558
You're used to extends
from JavaScript classes.

19
00:01:09.558 --> 00:01:13.257
There's a new one called implements
that comes with with TypeScript.

20
00:01:13.257 --> 00:01:18.707
So we'll open our notes to
the page that starts with three,

21
00:01:18.707 --> 00:01:21.331
interface and type basics.

22
00:01:25.154 --> 00:01:32.635
&gt;&gt; Mike North: Type aliases,
a really simple concept.

23
00:01:32.635 --> 00:01:36.190
It is literally giving a type a name.

24
00:01:36.190 --> 00:01:42.632
Any type that you can use with a variable,
you can also create a type alias for.

25
00:01:42.632 --> 00:01:44.464
So, when I say string or

26
00:01:44.464 --> 00:01:51.858
number here,
&gt;&gt; Mike North: What I mean

27
00:01:51.858 --> 00:01:56.915
here is anything that could exist in this
space, you can create a type alias for.

28
00:01:56.915 --> 00:01:59.460
This is not true for interfaces.

29
00:01:59.460 --> 00:02:04.660
So type alias is actually more flexible
than an interface in some way.

30
00:02:04.660 --> 00:02:09.570
This is the only time you'll ever
see a type up here on the right hand

31
00:02:09.570 --> 00:02:11.600
side of an equals.

32
00:02:11.600 --> 00:02:16.712
Well, there is one other but,
it is really the identical

33
00:02:16.712 --> 00:02:21.186
concept just in a slightly
different syntax, but

34
00:02:21.186 --> 00:02:25.571
we're exclusively looking
in type space here.

35
00:02:25.571 --> 00:02:28.150
This will compile to no JavaScript at all.

36
00:02:30.615 --> 00:02:37.395
&gt;&gt; Mike North: One of the challenges with
type aliases is that they are defined and

37
00:02:37.395 --> 00:02:42.481
figured out by the compiler
in terms of what values

38
00:02:42.481 --> 00:02:47.790
are allowed,
in line as the file is parsed.

39
00:02:47.790 --> 00:02:51.558
And this prevents you from
creating self reverential types.

40
00:02:51.558 --> 00:02:55.459
So let's say we had a data structure
that we wanted to create a type for,

41
00:02:55.459 --> 00:02:56.771
that looked like this.

42
00:03:01.228 --> 00:03:02.053
&gt;&gt; Mike North: 1, 2, 3, 1, 1.

43
00:03:02.053 --> 00:03:08.294
Right, it consist of 1s, 2s and
3s, but also a nested array.

44
00:03:08.294 --> 00:03:12.165
Really simplified kinda JSONish thing.

45
00:03:12.165 --> 00:03:16.140
Like there's some hierarchy here
in a set of allowed values.

46
00:03:17.190 --> 00:03:23.469
We could try to type this saying
that the value can be 1, 2 or

47
00:03:23.469 --> 00:03:29.269
3, or an array,
where an array is an array of NumVals.

48
00:03:29.269 --> 00:03:32.397
Typescript compiler is not happy,
and the reason is,

49
00:03:32.397 --> 00:03:35.933
it wants to conclusively figure
out what NumVal is all about,

50
00:03:35.933 --> 00:03:40.087
before it moves on to the next line,
and it has not yet encountered this.

51
00:03:40.087 --> 00:03:44.490
So, it runs into a circular problem.

52
00:03:44.490 --> 00:03:48.197
It's like a chicken and the egg problem.

53
00:03:48.197 --> 00:03:52.601
To define A we need B which needs A,
and so follow that all the way down.

54
00:03:55.190 --> 00:03:59.839
So, we will look back to this and
explain how this can be.

55
00:03:59.839 --> 00:04:01.770
We can use to our advantage.

56
00:04:01.770 --> 00:04:03.195
We can use this weakness as strength.

57
00:04:06.180 --> 00:04:07.749
&gt;&gt; Mike North: So
we've already looked at interfaces.

58
00:04:07.749 --> 00:04:11.771
I wanna point out that interfaces
can extend from other interfaces,

59
00:04:11.771 --> 00:04:15.620
like same syntax that you're
used to seeing with classes.

60
00:04:15.620 --> 00:04:21.286
Just remember that extends is used for
inheritance of like things.

61
00:04:21.286 --> 00:04:27.486
Interfaces extend from interfaces,
classes extend from classes.

62
00:04:27.486 --> 00:04:32.173
So here we're just adding country
code to something that already

63
00:04:32.173 --> 00:04:34.310
has a phone number and a name.

