WEBVTT

1
00:00:00.450 --> 00:00:04.522
&gt;&gt; Mike North: This is probably one of
the most valuable things that I'm going to

2
00:00:04.522 --> 00:00:06.521
teach you in this workshop, and

3
00:00:06.521 --> 00:00:10.384
it is a recipe for
converting from JavaScript to TypeScript.

4
00:00:10.384 --> 00:00:15.004
So one of the great things
about TypeScript is it can

5
00:00:15.004 --> 00:00:19.954
inter-operate with JavaScript very,
very easily.

6
00:00:19.954 --> 00:00:23.995
You're gonna have JS and
TS modules side by side.

7
00:00:23.995 --> 00:00:30.483
You can import in one direction or
the other and everything will be okay.

8
00:00:30.483 --> 00:00:33.451
Not a lot of programming
languages give you this.

9
00:00:33.451 --> 00:00:38.669
So we shouldn't treat a transition
from JavaScript to TypeScript

10
00:00:38.669 --> 00:00:44.073
as the same kind of change to a code
base that would result from a change

11
00:00:44.073 --> 00:00:49.032
in one programming language to
something totally unrelated.

12
00:00:49.032 --> 00:00:52.861
It's like rewriting
something from Ruby to Rust.

13
00:00:52.861 --> 00:00:56.459
That is like apples and oranges, right?

14
00:00:56.459 --> 00:01:01.658
So I'm gonna lead you down a three-step
process that will make it so

15
00:01:01.658 --> 00:01:06.867
this change can be made incrementally
on a couple of files at a time.

16
00:01:06.867 --> 00:01:12.352
Or in multiple passes where you get
to the endpoint you are looking

17
00:01:12.352 --> 00:01:17.740
to get without potentially running
into creating extra work for

18
00:01:17.740 --> 00:01:22.747
yourself or disruption for
people who depend on that code.

19
00:01:22.747 --> 00:01:27.027
First, let's talk about what not to do.

20
00:01:27.027 --> 00:01:31.439
What you don't want to do is mix
a conversion from JavaScript to

21
00:01:31.439 --> 00:01:35.946
TypeScript with functional changes,
and these can be subtle.

22
00:01:35.946 --> 00:01:40.777
It can be the difference
between checking whether

23
00:01:40.777 --> 00:01:45.615
a value is truthy or
not to a type of check, right?

24
00:01:45.615 --> 00:01:49.821
Is this truth versus check whether
this value is undefined, no zero and

25
00:01:49.821 --> 00:01:52.706
empty string are gonna
be handled differently.

26
00:01:52.706 --> 00:01:57.437
So you want to avoid even those kinds
of functional changes if you can.

27
00:01:57.437 --> 00:02:01.801
You don't want to try this kind of
conversion if your test coverage is

28
00:02:01.801 --> 00:02:02.636
really low.

29
00:02:02.636 --> 00:02:08.204
Because after each of our three steps run
a test sweep like your test sweep for

30
00:02:08.204 --> 00:02:13.946
this piece of code, and ensure that not
only have we converted to TypeScript,

31
00:02:13.946 --> 00:02:17.863
but the library still works
the way we want it to work.

32
00:02:20.810 --> 00:02:24.618
&gt;&gt; Mike North: You don't want to let
the perfect be the enemy of the good.

33
00:02:24.618 --> 00:02:32.653
And in this sense what I mean is don't try
to type things too strongly, too early on.

34
00:02:32.653 --> 00:02:37.944
Your goal is to get converted, and you'll
start to see some benefits of the strong

35
00:02:37.944 --> 00:02:43.328
typing, but don't chase those benefits
by trying to type things up prematurely.

36
00:02:43.328 --> 00:02:46.400
You want to get converted over and

37
00:02:46.400 --> 00:02:52.222
then start applying stronger
typing where things make sense.

38
00:02:52.222 --> 00:02:56.944
The reason for this is, particularly if
you convert a few files at a time, and

39
00:02:56.944 --> 00:02:59.571
you have some very strongly typed things.

40
00:02:59.571 --> 00:03:04.248
As soon as you convert some of the other
files that interact with your already

41
00:03:04.248 --> 00:03:08.869
strong code, you don't have a chance
to start out with sort of weak types.

42
00:03:08.869 --> 00:03:11.911
Cuz your constraints
are already very tight, right?

43
00:03:11.911 --> 00:03:13.339
In one part of your app.

44
00:03:13.339 --> 00:03:16.891
So you kind of want to
remember the goal is,

45
00:03:16.891 --> 00:03:21.045
get converted and
then we'll ratchet things up.

46
00:03:21.045 --> 00:03:23.252
Don't forget to add tests for your types.

47
00:03:23.252 --> 00:03:29.282
Again, dts lint is the way you write
tests that's specifically are for

48
00:03:29.282 --> 00:03:31.403
type information only.

49
00:03:31.403 --> 00:03:37.195
And also particularly for libraries,
don't try to publish types for

50
00:03:37.195 --> 00:03:40.939
consumer use until you're happy with them.

51
00:03:40.939 --> 00:03:45.596
Because people take type information
that comes along with the library as

52
00:03:45.596 --> 00:03:47.560
an indication of a public API.

53
00:03:47.560 --> 00:03:49.933
What you should do and what you shouldn't.

54
00:03:49.933 --> 00:03:52.371
Remember, it's developer intent.

55
00:03:52.371 --> 00:03:55.997
If you wrote this code in
TypeScript in the first place,

56
00:03:55.997 --> 00:04:00.795
those types would express what you can
do and can't do with piece of code.

57
00:04:00.795 --> 00:04:04.652
So if you prematurely have
people using this stuff, and

58
00:04:04.652 --> 00:04:09.820
there's a bunch of looseness all over
the place, you can lead them on a wild

59
00:04:09.820 --> 00:04:14.851
goose chase where they're assuming
things should be doable and valid.

60
00:04:14.851 --> 00:04:17.240
And in fact that's not the case.

