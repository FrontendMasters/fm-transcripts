WEBVTT

1
00:00:00.050 --> 00:00:02.946
&gt;&gt; Mike North: Type parameters
can also have constraints.

2
00:00:02.946 --> 00:00:08.430
So, as you'll start using type parameters,
you'll

3
00:00:08.430 --> 00:00:14.480
see that if you don't have a constraint
like this, this is the constraint part.

4
00:00:14.480 --> 00:00:21.760
This is saying T must extend,
must be assignable to, this type here.

5
00:00:21.760 --> 00:00:25.330
The best way I can explain
constraints to you is to remove this

6
00:00:25.330 --> 00:00:27.000
to reveal the motivation for adding it.

7
00:00:29.150 --> 00:00:30.280
And there you go.

8
00:00:30.280 --> 00:00:35.361
So, we're getting a type
error because we're trying

9
00:00:35.361 --> 00:00:41.430
to transform an array of type
T to a dictionary of type T.

10
00:00:41.430 --> 00:00:45.900
And we begin by creating an empty
dictionary, we iterate over the array,

11
00:00:45.900 --> 00:00:50.810
we try to place each value into
the dictionary, but it turns out we can't

12
00:00:50.810 --> 00:00:56.540
access this property ID off
of each member of our array.

13
00:00:56.540 --> 00:01:01.180
And the reason is we have
not declared that there is

14
00:01:01.180 --> 00:01:05.390
a minimum requirement that T must meet,
and as a result,

15
00:01:05.390 --> 00:01:10.110
there's very little that we can do with
values of type T inside the function.

16
00:01:10.110 --> 00:01:14.070
It's really flexible in terms of what
can be passed into the function, but

17
00:01:14.070 --> 00:01:18.810
you can only do the things that
you've explicitly asked for.

18
00:01:18.810 --> 00:01:23.500
If we need to access ID,
we must state that T must be an object and

19
00:01:23.500 --> 00:01:27.710
it must have a property called ID,
and this is how we would do it.

20
00:01:27.710 --> 00:01:32.770
We accept a type T, that is at least

21
00:01:33.910 --> 00:01:37.710
an object with a property
ID whose value is a string.

22
00:01:37.710 --> 00:01:40.140
And now, this would be a string.

23
00:01:40.140 --> 00:01:44.947
So, this is the equivalent of
doing something like this,

24
00:01:44.947 --> 00:01:48.673
that we could try to remove this and
just say,

25
00:01:48.673 --> 00:01:53.511
I'm taking an array,
&gt;&gt; Mike North: Of

26
00:01:53.511 --> 00:01:55.430
objects that look like this.

27
00:01:57.250 --> 00:01:58.722
And we could try to change this.

28
00:02:03.779 --> 00:02:06.840
&gt;&gt; Mike North: Right, instead of T there,
we can replace the T here.

29
00:02:06.840 --> 00:02:08.410
We're gonna run into another problem.

30
00:02:08.410 --> 00:02:12.190
So, I've basically boiled this
down to my minimum requirements.

31
00:02:12.190 --> 00:02:15.710
I've said transform this
array to a dictionary, but

32
00:02:15.710 --> 00:02:18.170
there's no type parameter any more.

33
00:02:19.170 --> 00:02:20.610
Here's the problem we'll run into.

34
00:02:22.500 --> 00:02:29.050
Number one, we're getting errors for
passing in any properties

35
00:02:29.050 --> 00:02:34.830
that are more than simply having
an ID who's value is a string.

36
00:02:34.830 --> 00:02:40.091
The other problem we'll get is,
&gt;&gt; Mike North: When we try to access

37
00:02:40.091 --> 00:02:45.320
things off of it, we've greatly
simplified this type in a bad way, right?

38
00:02:45.320 --> 00:02:48.730
We've lost any of this extra
stuff that was passed in.

39
00:02:48.730 --> 00:02:53.760
What we want is to be able to pass in
anything that has an ID that's a string,

40
00:02:53.760 --> 00:02:58.569
and to get out a rearrangement of
this from an array to a dictionary.

41
00:03:00.030 --> 00:03:03.209
But we haven't lost any
fidelity in the types,

42
00:03:03.209 --> 00:03:06.240
we still have access to
everything we put in.

43
00:03:06.240 --> 00:03:11.193
And that's where we're gonna say,
all right whatever you give me

44
00:03:11.193 --> 00:03:16.694
an array of type T, I'm gonna give you
a dictionary of type T out, right?

45
00:03:16.694 --> 00:03:19.273
You'll still be working
with whatever you pass in,

46
00:03:19.273 --> 00:03:21.900
you'll still get it back
in dictionary form.

47
00:03:21.900 --> 00:03:25.338
I'm not gonna reduce it down
to just objects that have ID,

48
00:03:25.338 --> 00:03:27.450
you'll have it as you gave it to me.

49
00:03:28.700 --> 00:03:31.360
And then the type constraint,
we already went over.

50
00:03:31.360 --> 00:03:36.917
This is the equivalent of saying, look,
I'm not just gonna take, it's a way of

51
00:03:36.917 --> 00:03:42.171
stating your requirements for working
with this type within the function.

52
00:03:46.550 --> 00:03:48.165
&gt;&gt; Mike North: And
why isn't everything happy?

53
00:03:48.165 --> 00:03:51.456
I forgot one last thing.

54
00:03:51.456 --> 00:03:52.106
Now we're good.

55
00:03:55.992 --> 00:04:02.337
&gt;&gt; Mike North: So just to recap,
by making this abstract, by adding

56
00:04:02.337 --> 00:04:09.021
this idea of a generic,
&gt;&gt; Mike North: We

57
00:04:09.021 --> 00:04:12.746
can,
&gt;&gt; Mike North: Retain the detail of

58
00:04:12.746 --> 00:04:17.972
the object we passed in even though
this function that was doing the work,

59
00:04:17.972 --> 00:04:22.795
it knows nothing about these extra
properties that might be there.

60
00:04:22.795 --> 00:04:28.572
But because it's given us a blank that we
can fill in, from the outside we can say,

61
00:04:28.572 --> 00:04:32.214
for the purposes of invoking
this function right now,

62
00:04:32.214 --> 00:04:36.569
I'm giving you huge objects with
lots of properties in an ID, and

63
00:04:36.569 --> 00:04:41.953
you'll get those same types back, you
won't have to deal with sort of the lowest

64
00:04:41.953 --> 00:04:46.862
common denominator, cuz that puts you
in a position where you sort of have

65
00:04:46.862 --> 00:04:51.823
to like figure out a way to widen your
types again to make this more useful.

66
00:04:56.072 --> 00:04:58.064
&gt;&gt; Mike North: Like function arguments,

67
00:04:58.064 --> 00:05:01.950
type parameters
are associated with a scope.

68
00:05:01.950 --> 00:05:06.895
So here we have a function that returns
a function, start tuple, finish tuple,

69
00:05:06.895 --> 00:05:08.310
right?

70
00:05:08.310 --> 00:05:11.760
And we're using a technique that

71
00:05:11.760 --> 00:05:16.880
Kyle Simpson in his Frontend Masters
course on functional light programming.

72
00:05:16.880 --> 00:05:22.470
He calls this zero point programming
because we're returning a function and

73
00:05:22.470 --> 00:05:26.430
then invoking the function
that it returns immediately.

74
00:05:26.430 --> 00:05:30.620
So we pass in one argument,
an array of strings,

75
00:05:30.620 --> 00:05:36.360
a second argument, a number, and
the type of the tuple we get out is this.

76
00:05:36.360 --> 00:05:39.990
So just like A and B, right?

77
00:05:39.990 --> 00:05:43.470
The values,
those are regular function parameters,

78
00:05:43.470 --> 00:05:47.190
in here we can access both A and B.

79
00:05:48.500 --> 00:05:52.600
And because of this analogy where
generics are like functions,

80
00:05:52.600 --> 00:05:55.510
we can also access U and T.

81
00:05:55.510 --> 00:06:00.845
Now out here on line 94,
could we access B?

82
00:06:02.761 --> 00:06:04.252
&gt;&gt; Mike North: No, and
we can't access U either,

83
00:06:04.252 --> 00:06:07.190
they are associated with
scopes in the same way.

84
00:06:07.190 --> 00:06:11.310
And this fits similarly to having

85
00:06:11.310 --> 00:06:16.990
a type parameter on a class and
then on a method within that class, right?

86
00:06:16.990 --> 00:06:19.040
Outer and inner scope.

87
00:06:19.040 --> 00:06:24.390
You could have a class, a method within
the class, a function that that returns,

88
00:06:24.390 --> 00:06:30.350
it works just as you'd expect cuz I've
found this to be a very effective analogy.

