WEBVTT

1
00:00:00.340 --> 00:00:05.270
&gt;&gt; Mike North: We can see right away
that this is a lot, this is verbose.

2
00:00:05.270 --> 00:00:07.970
We have to specify email and name.

3
00:00:07.970 --> 00:00:10.620
Those words are here three times, right?

4
00:00:10.620 --> 00:00:14.470
Once to define the type,
once in the constructor signature and

5
00:00:14.470 --> 00:00:18.550
then as we pass from function
arguments onto the instance.

6
00:00:18.550 --> 00:00:22.500
So TypeScript has a shortcut for
this called Parameter Properties.

7
00:00:22.500 --> 00:00:23.920
And we're gonna look at that.

8
00:00:23.920 --> 00:00:28.390
But at the same time, we have to
introduce these access modifier keywords.

9
00:00:28.390 --> 00:00:32.780
So you'll see these as
being one of three choices,

10
00:00:32.780 --> 00:00:35.850
public, which is what you're used to,
right?

11
00:00:35.850 --> 00:00:40.360
The only thing we have in JavaScript is
public, and public with an underscore,

12
00:00:40.360 --> 00:00:44.210
which means shame on you for
using that, but it's still public.

13
00:00:44.210 --> 00:00:50.980
Protected allows the instance, and
any instance of a subclass, to see it.

14
00:00:50.980 --> 00:00:55.580
In private, means only that type
can see it, only that class.

15
00:00:55.580 --> 00:00:59.770
Even a subclass won't be able to see
a private method or private field.

16
00:00:59.770 --> 00:01:04.320
So, here is an example of
these parameter properties.

17
00:01:04.320 --> 00:01:10.020
And unfortunately, the auto formatting
kinda makes things less than ideal.

18
00:01:10.020 --> 00:01:13.295
So, the difference here
from our previous example,

19
00:01:13.295 --> 00:01:16.950
obviously, there are a lot of
things that are not present.

20
00:01:16.950 --> 00:01:23.244
But through adding an access modifier
keyword before our constructor's

21
00:01:23.244 --> 00:01:29.245
arguments, we can create the equivalent
setup to what we had before.

22
00:01:29.245 --> 00:01:32.257
In fact, I have even added
a little something here, and

23
00:01:32.257 --> 00:01:34.833
that is the default value for
the second field.

24
00:01:34.833 --> 00:01:39.461
So this means I take an argument
in my constructor and

25
00:01:39.461 --> 00:01:46.080
a parameter like a field of the same
name should exist on the instance.

26
00:01:46.080 --> 00:01:49.140
And when you receive
it in the constructor,

27
00:01:49.140 --> 00:01:51.080
you should place it on the instance.

28
00:01:51.080 --> 00:01:54.250
And I'm gonna convince you of this
by taking this exact same example.

29
00:01:54.250 --> 00:01:56.300
I'm just gonna remove the interface.

30
00:01:56.300 --> 00:01:59.035
And I'm gonna put it into
the TypeScript Playground so

31
00:01:59.035 --> 00:02:01.419
we can see the JavaSscript
that it compiles to.

32
00:02:06.346 --> 00:02:08.320
&gt;&gt; Mike North: And
get rid of the interface.

33
00:02:09.940 --> 00:02:14.056
So, on the right side,
I know we're getting cut off here but

34
00:02:14.056 --> 00:02:19.060
we can see that if the email is,
this is undefined, void 0 is undefined,

35
00:02:19.060 --> 00:02:23.613
if the email is undefined,
initialize it with the default value.

36
00:02:23.613 --> 00:02:26.833
And then we will receive
name as a function argument,

37
00:02:26.833 --> 00:02:29.840
we put it on the instance,
same with email.

38
00:02:29.840 --> 00:02:34.770
And then this is the comment that was
actually in the body of our constructor.

39
00:02:34.770 --> 00:02:38.440
So you can see anything in your
constructor that you do custom,

40
00:02:38.440 --> 00:02:44.560
would happen after all of this mapping
from parameters to fields has taken place.

41
00:02:45.590 --> 00:02:50.600
This is a really nice convenience
because it allows us to do this common

42
00:02:50.600 --> 00:02:55.950
thing where we want to pass
some stuff into a constructor,

43
00:02:55.950 --> 00:02:59.199
get the fields,
it makes it a lot less verbose.

44
00:03:00.410 --> 00:03:05.830
Note that if we were to make this
protected, which means the outside

45
00:03:05.830 --> 00:03:10.580
world when interacting with
an instance of ParamPropContract,

46
00:03:10.580 --> 00:03:14.050
it wouldn't be able to see this field.

47
00:03:15.400 --> 00:03:18.063
So, we still can receive
it as an argument, but

48
00:03:18.063 --> 00:03:21.337
you're not going to be able to
access it from the outside.

49
00:03:27.475 --> 00:03:30.013
&gt;&gt; Mike North: Just passing
in some nonsense fields here,

50
00:03:30.013 --> 00:03:31.990
nonsense values rather.

51
00:03:31.990 --> 00:03:36.907
Down here you can see we only have
access to name whereas before,

52
00:03:36.907 --> 00:03:38.739
we have access to both.

53
00:03:38.739 --> 00:03:42.733
So that's the difference in
making it public or protected.

54
00:03:42.733 --> 00:03:47.126
And you'll note that another
consequence of me making it

55
00:03:47.126 --> 00:03:52.067
protected was I get an error up
here saying the class incorrectly

56
00:03:52.067 --> 00:03:55.030
implements the interface HasEmail.

57
00:03:55.030 --> 00:03:59.780
Can anyone make a guess as to
why this error is happening?

58
00:03:59.780 --> 00:04:04.117
Clearly, the field is there, but
why might TypeScript be objecting?

59
00:04:07.115 --> 00:04:08.380
&gt;&gt; Speaker 1: Email's not visible.

60
00:04:08.380 --> 00:04:09.840
&gt;&gt; Mike North: Email's not visible.

61
00:04:09.840 --> 00:04:15.570
You expect the instance of
this class to be a HasEmail,

62
00:04:15.570 --> 00:04:19.790
meaning you can access name and
you can access email.

63
00:04:19.790 --> 00:04:22.410
That's what it means to be a HasEmail.

64
00:04:22.410 --> 00:04:27.348
So you're not really conforming to an
interface unless the things that allow you

65
00:04:27.348 --> 00:04:30.843
to conform to it are public and
visible from the outside.

66
00:04:34.286 --> 00:04:36.087
&gt;&gt; Mike North: And
now the error goes away.

67
00:04:38.449 --> 00:04:41.420
&gt;&gt; Mike North: So
class fields can have initializers.

68
00:04:41.420 --> 00:04:44.400
If you want a ParamProp initializer,

69
00:04:44.400 --> 00:04:48.210
just do the same thing you would do for
function arguments,

70
00:04:48.210 --> 00:04:51.090
cuz it is a function argument,
that's kind of where it lives, right?

71
00:04:51.090 --> 00:04:53.590
So that's the default value for
the email field.

72
00:04:55.490 --> 00:04:59.850
But if you have properties that are not
things that you take in as arguments to

73
00:04:59.850 --> 00:05:05.580
a constructor, in this case, age,
which you can see up at the top,

74
00:05:05.580 --> 00:05:09.520
you can just do the same thing
you would do in JavaScript.

75
00:05:09.520 --> 00:05:11.889
This effectively is a default value.

76
00:05:14.080 --> 00:05:18.830
If it is not in some way set like
within the constructor here.

77
00:05:18.830 --> 00:05:26.510
So if in here I were to do like age = 35,
now like this will never come into play.

78
00:05:26.510 --> 00:05:29.690
It is only initialized with
that if it has not yet

79
00:05:29.690 --> 00:05:31.660
been initialized up until that point.

80
00:05:31.660 --> 00:05:33.085
Where do we see evidence of that?

81
00:05:33.085 --> 00:05:35.900
It's basically gonna turn
into this right here.

82
00:05:35.900 --> 00:05:38.304
If it's undefined, initialize it.

83
00:05:40.283 --> 00:05:41.343
&gt;&gt; Mike North: Did you have a question?

84
00:05:41.343 --> 00:05:45.300
&gt;&gt; Speaker 2: Yeah, does it infer
the type, if you give it a default?

85
00:05:45.300 --> 00:05:47.165
&gt;&gt; Mike North: Yes, because it's a,

86
00:05:47.165 --> 00:05:52.440
kinda same rules as a variable,
you're giving it its initial value,

87
00:05:52.440 --> 00:05:57.670
and so it will do the best it can to
make a reasonable guess of the type.

88
00:05:57.670 --> 00:06:02.400
Now the one thing you'd want to be careful
of is if this could be a string or

89
00:06:02.400 --> 00:06:06.610
could be a number and you initialize it to
a number, you're going to have to specific

90
00:06:06.610 --> 00:06:12.590
that you'll deliberately widen the type
to include the possibility of a string.

91
00:06:12.590 --> 00:06:17.020
So it will make its usual guess and
rightly so.

92
00:06:17.020 --> 00:06:19.939
I can take that away, and
it'll still be number.

93
00:06:22.216 --> 00:06:25.515
&gt;&gt; Mike North: There's one other thing
that kind of fits into access modifier

94
00:06:25.515 --> 00:06:29.950
keywords, although it's not really
about access in terms of visibility.

95
00:06:29.950 --> 00:06:33.540
You could also do readonly.

96
00:06:33.540 --> 00:06:37.730
And that, from a type checking
perspective, will yell at you for

97
00:06:37.730 --> 00:06:43.110
attempted sites where you
are trying to write to this value.

98
00:06:43.110 --> 00:06:44.450
Don't fool yourself, through,

99
00:06:44.450 --> 00:06:47.590
because there may be JavaScript
consumers of this library.

100
00:06:47.590 --> 00:06:52.260
And this does nothing at all in terms of
actually preventing rights to this value.

101
00:06:53.260 --> 00:06:58.010
It is just like a renting thing for
people using type information.

102
00:06:58.010 --> 00:07:00.838
So, I'll use this once in while but

103
00:07:00.838 --> 00:07:05.490
just be advised that not
everyone uses type information.

104
00:07:05.490 --> 00:07:08.828
And this is just making a check, right?

