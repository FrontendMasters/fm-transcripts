WEBVTT

1
00:00:00.180 --> 00:00:03.550
&gt;&gt; Mike North: Let's start
by renaming this file.

2
00:00:05.489 --> 00:00:10.430
&gt;&gt; Mike North: I'm renaming it to ts,
I'm going to go to my

3
00:00:10.430 --> 00:00:15.505
tsconfig, and add allow implicit, sorry,

4
00:00:15.505 --> 00:00:21.100
noImplicitAny, setting this to false.

5
00:00:21.100 --> 00:00:26.890
So this option disallows ImplicitAnys and
I wish to allow them.

6
00:00:26.890 --> 00:00:27.990
It's kind of a double negative.

7
00:00:29.210 --> 00:00:34.470
So I'll save that and go back to our file.

8
00:00:34.470 --> 00:00:40.230
Now we actually are doing kinda okay here.

9
00:00:40.230 --> 00:00:44.890
There are obviously a lot of ImplicitAnys,

10
00:00:44.890 --> 00:00:49.260
but we haven't run into
too many problems here.

11
00:00:49.260 --> 00:00:52.040
Let's see, contacts,
it's an array of anys.

12
00:00:53.910 --> 00:00:58.280
This is a clue around that array
of anys versus array of nevers,

13
00:00:58.280 --> 00:01:04.700
we're in a loose mode now, so
it looks like we're actually done.

14
00:01:04.700 --> 00:01:05.780
Let's run our test again.

15
00:01:08.684 --> 00:01:11.500
&gt;&gt; Mike North: Good, so
they've finished running.

16
00:01:11.500 --> 00:01:16.140
All right, and this is where we make
a commit, open up a poll request, and

17
00:01:16.140 --> 00:01:20.520
regard this as getting our foothold
into the Typescript world.

18
00:01:22.220 --> 00:01:22.883
Anyone who remember step two?

19
00:01:26.208 --> 00:01:30.110
&gt;&gt; Mike North: Forbid ImplicitAnys,
so making our anys explicit.

20
00:01:31.720 --> 00:01:33.130
In this we're gonna have
quite a bit of work.

21
00:01:37.174 --> 00:01:42.128
&gt;&gt; Mike North: Now we can see in our
gutter here TypeScript's telling us there

22
00:01:42.128 --> 00:01:45.970
are many places where we
need to address things.

23
00:01:48.480 --> 00:01:55.790
So I'd like to start with formatDate,
so we have to find a type for date.

24
00:01:55.790 --> 00:01:57.570
Does anyone have an idea
of what this might be?

25
00:01:58.920 --> 00:01:59.720
&gt;&gt; Speaker 2: Date.

26
00:01:59.720 --> 00:02:01.700
&gt;&gt; Mike North: Date,
this is a clue, right?

27
00:02:01.700 --> 00:02:06.420
ToISOString,
&gt;&gt; Mike North: Okay, so that's happy.

28
00:02:06.420 --> 00:02:07.320
What about getFullName?

29
00:02:07.320 --> 00:02:14.629
&gt;&gt; [INAUDIBLE]
&gt;&gt; Mike North: Pardon?

30
00:02:14.629 --> 00:02:16.802
&gt;&gt; Speaker 2: String.

31
00:02:16.802 --> 00:02:19.130
&gt;&gt; Mike North: Let's try it.

32
00:02:19.130 --> 00:02:22.767
So I'm getting errors that
Property's firstName,

33
00:02:22.767 --> 00:02:25.927
middleName, and
lastName are not on string.

34
00:02:25.927 --> 00:02:29.101
Got to be an object, right,
with properties on it.

35
00:02:31.430 --> 00:02:36.812
&gt;&gt; Mike North: So I think it's
gonna be firstName, middleName,

36
00:02:41.520 --> 00:02:44.170
&gt;&gt; Mike North: Save.

37
00:02:44.170 --> 00:02:47.240
Okay, so now this looks to be happy.

38
00:02:47.240 --> 00:02:51.690
So this ends up being kind of an array
of strings that we've filter for

39
00:02:51.690 --> 00:02:52.530
anything missing.

40
00:02:55.830 --> 00:03:00.526
This could be all optional,
this filtering gives me clue that

41
00:03:00.526 --> 00:03:05.422
there's something falsy there
that were trying to eliminate.

42
00:03:05.422 --> 00:03:10.210
We'll come back if it
starts to serve to bug us.

43
00:03:11.330 --> 00:03:14.320
All right,
now this one looks a little gnarly,

44
00:03:14.320 --> 00:03:18.410
so I actually would choose to
kind of wait until the end.

45
00:03:19.550 --> 00:03:22.640
The problem we're running into
here if we look at contact

46
00:03:22.640 --> 00:03:26.320
we're accessing all sorts
of stuff off of it.

47
00:03:26.320 --> 00:03:32.230
So this is using a fair amount of whatever
structure, this using a lot of it.

48
00:03:35.030 --> 00:03:39.833
And there's our date,
formatDate we're passing in,

49
00:03:39.833 --> 00:03:44.431
but we should probably be
passing in deep if that's it

50
00:03:44.431 --> 00:03:48.640
should still be fine,dates
define somewhere.

51
00:03:48.640 --> 00:03:52.148
No, it's coming from up here, we're good.

52
00:03:52.148 --> 00:03:57.270
All right, let's look at AddressBook,
so contacts.

53
00:03:57.270 --> 00:04:03.040
So obviously, this needs to be type
the same as the array up here, right?

54
00:04:03.040 --> 00:04:08.140
All this method is like a convenience that
lets us operate on the underlying array.

55
00:04:09.850 --> 00:04:15.820
Here we're filtering through and there's
c, so c has firstName and lastName.

56
00:04:15.820 --> 00:04:20.099
So this looks a lot like the data
structure we were working with in

57
00:04:20.099 --> 00:04:22.643
the function below, the name parts.

58
00:04:22.643 --> 00:04:28.000
This is a point where I'd say, it looks
like we're using this in several places.

59
00:04:28.000 --> 00:04:31.250
I probably want to create an interface for
this.

60
00:04:31.250 --> 00:04:33.530
So I will go ahead and do that.

61
00:04:35.040 --> 00:04:40.974
There it is, so we'll just call it Person,
and up at the top,

62
00:04:46.679 --> 00:04:49.633
&gt;&gt; Mike North: And so we would say that

63
00:04:49.633 --> 00:04:55.860
contacts should probably
in array of Persons.

64
00:04:55.860 --> 00:04:58.180
And this will take in a single person.

65
00:05:01.590 --> 00:05:06.600
&gt;&gt; Mike North: Filter has a property
on it, it's firstName and lastName.

66
00:05:06.600 --> 00:05:13.860
So again, I haven't identified that this
is necessarily, it could be a Person.

67
00:05:13.860 --> 00:05:16.500
I mean,
it's checking to see if they're undefined.

68
00:05:16.500 --> 00:05:20.040
It fits for now, we haven't found
a reason for it to not fit.

69
00:05:20.040 --> 00:05:22.922
I'd wanna make a note here that
I should probably come back,

70
00:05:22.922 --> 00:05:25.180
I may be over-constraining this.

71
00:05:25.180 --> 00:05:30.139
If it's just some properties of a Person,
and now that I'm thinking about it

72
00:05:30.139 --> 00:05:34.655
it probably is, you wouldn't want
to require that it be a full thing.

73
00:05:38.810 --> 00:05:44.215
&gt;&gt; Mike North: Those undefined checks
make me want to make firstName and

74
00:05:44.215 --> 00:05:46.250
lastName optional.

75
00:05:49.250 --> 00:05:51.660
&gt;&gt; Mike North: Okay, so
this piece of code is happy.

76
00:05:53.010 --> 00:05:55.770
Actually, our whole
AddressBook seems to be happy.

77
00:05:55.770 --> 00:05:57.870
Now we're in the gnarly area.

78
00:05:59.780 --> 00:06:03.690
And just for convenience and being
able to not scroll all over the place,

79
00:06:03.690 --> 00:06:07.600
I wanna move this down so it's close by.

80
00:06:07.600 --> 00:06:10.000
All right, we have a salutation,

81
00:06:10.000 --> 00:06:13.150
salutation falling back
to an empty string.

82
00:06:13.150 --> 00:06:16.630
That's a clue that a string
would probably work here.

83
00:06:20.270 --> 00:06:24.198
&gt;&gt; Mike North: And the fact that I need
a fallback at all suggests it could be

84
00:06:24.198 --> 00:06:24.780
falsy.

85
00:06:24.780 --> 00:06:30.880
I guess maybe it could be an empty string,
but this should be okay.

86
00:06:30.880 --> 00:06:33.480
Okay, then we've got phones and addresses.

87
00:06:36.840 --> 00:06:38.890
Anyone have an idea for this?

88
00:06:38.890 --> 00:06:43.610
Does this suggest a particular
shape of this value to anyone?

89
00:06:43.610 --> 00:06:45.232
&gt;&gt; Speaker 3: Op code.
&gt;&gt; Mike North: It's an object,

90
00:06:45.232 --> 00:06:46.284
Object.keys.

91
00:06:58.454 --> 00:06:59.910
&gt;&gt; Mike North: So
something like that, right?

92
00:06:59.910 --> 00:07:03.190
That's what Object.keys wants,
it wants an object.

93
00:07:05.960 --> 00:07:08.037
Let's see, this type error,

94
00:07:13.083 --> 00:07:16.191
&gt;&gt; Mike North: It looks like I am reaching

95
00:07:16.191 --> 00:07:21.005
into that object and passing in pHName.

96
00:07:22.220 --> 00:07:24.490
This error messages is
pretty good one to follow.

97
00:07:26.310 --> 00:07:27.464
What does it suggest we do next?

98
00:07:30.670 --> 00:07:32.270
&gt;&gt; Mike North: What are we missing?

99
00:07:32.270 --> 00:07:36.260
&gt;&gt; Speaker 4: And
phName to your phones property.

100
00:07:36.260 --> 00:07:37.506
&gt;&gt; Mike North: PhName is just a string.

101
00:07:37.506 --> 00:07:39.196
&gt;&gt; Speaker 4: Keys.

102
00:07:39.196 --> 00:07:42.740
&gt;&gt; Mike North: I'm looking at
this it has no index signature.

103
00:07:42.740 --> 00:07:47.430
Let's add an index signature,
cuz we're taking an arbitrary string.

104
00:07:47.430 --> 00:07:49.833
We only know what the string
is at runtime, right?

105
00:07:49.833 --> 00:07:56.060
We're just iterating over all of the keys,
passing that key in.

106
00:07:56.060 --> 00:07:58.220
This is what dictionary access looks like.

107
00:07:59.970 --> 00:08:02.450
Where we can pass in a key and
we get a value back.

108
00:08:04.730 --> 00:08:05.662
So this is where we need.

109
00:08:07.772 --> 00:08:11.836
&gt;&gt; Mike North: Something like that, and
I'm gonna bet addresses is similar.

110
00:08:11.836 --> 00:08:17.060
We could look at it, but AddrName,
let's just prove it to ourselves.

111
00:08:18.160 --> 00:08:22.690
Here it is, reach in to the addresses
object, pass in the key,

112
00:08:22.690 --> 00:08:24.618
get the value out, right?

113
00:08:24.618 --> 00:08:31.239
Telltale sign of a dictionary or an
associate of array, passing key at value.

114
00:08:35.420 --> 00:08:38.145
&gt;&gt; Mike North: So now we need to
figure out what these things are,

115
00:08:43.040 --> 00:08:44.692
&gt;&gt; Mike North: So we've got on address,

116
00:08:44.692 --> 00:08:48.835
houseNumber, street, city,
country, state, postalCode.

117
00:08:48.835 --> 00:08:51.059
I'm gonna just make some
reasonable guesses for

118
00:08:51.059 --> 00:08:53.180
these based on what I
think the type should be.

119
00:08:56.202 --> 00:09:02.108
&gt;&gt; Mike North: HouseNumber,
number, street, string,

120
00:09:02.108 --> 00:09:07.880
city,
&gt;&gt; Mike North: Is a string,

121
00:09:07.880 --> 00:09:13.870
state is a string,
postalCode seems like a number

122
00:09:13.870 --> 00:09:19.590
could be a string,
it doesn't really matter.

123
00:09:19.590 --> 00:09:22.037
These are all just sort of strings or
interpolated things.

124
00:09:30.426 --> 00:09:33.239
&gt;&gt; Mike North: Okay, and
contact has an email property.

125
00:09:39.572 --> 00:09:43.420
&gt;&gt; Mike North: And all of my red
in my side bar has gone away here.

126
00:09:43.420 --> 00:09:47.940
Just so I can show you one more place
where this information pops up in VS Code,

127
00:09:47.940 --> 00:09:50.020
there's this Problems tab.

128
00:09:50.020 --> 00:09:50.980
And cuz I've been opening and

129
00:09:50.980 --> 00:09:55.820
closing a lot of files, some of these
are not related to our example here.

130
00:09:57.560 --> 00:10:02.330
But this gives you sort of little
sticking points within your code,

131
00:10:02.330 --> 00:10:06.360
places where the compiler
is finding errors.

132
00:10:09.660 --> 00:10:12.990
So there we go, and
this would be another commit.

133
00:10:12.990 --> 00:10:15.730
Because we've gotta run our test,
we can't forget that.

134
00:10:17.820 --> 00:10:21.197
I don't expect any problems, cuz I think
we were just adding type information.

135
00:10:21.197 --> 00:10:23.210
There is a problem.

136
00:10:23.210 --> 00:10:25.690
&gt;&gt; Speaker 5: I think phones has
the wrong type for the value.

137
00:10:25.690 --> 00:10:29.380
&gt;&gt; Mike North: Thank you,
phones has the wrong type for the value.

138
00:10:30.660 --> 00:10:36.350
Let's look at this, look in the fixture
data postalCode should be a number.

139
00:10:36.350 --> 00:10:38.920
So we're getting a type error
in the tests themselves.

140
00:10:40.040 --> 00:10:46.960
Let's go address that, and
your phones, there's nothing here.

141
00:10:46.960 --> 00:10:48.460
Did you suggest it should be a number?

142
00:10:51.400 --> 00:10:53.869
&gt;&gt; Mike North: It looks
anything stringifiable here,

143
00:10:53.869 --> 00:10:57.146
I'm willing to accept number
if the tests are happy.

144
00:11:03.271 --> 00:11:06.410
&gt;&gt; Mike North: All right,
let's see what else we got to do.

145
00:11:07.710 --> 00:11:11.339
Type string is not assignable to number,
it's a string,

146
00:11:20.110 --> 00:11:21.106
&gt;&gt; Mike North: There we go, so

147
00:11:21.106 --> 00:11:26.410
now we know our back and our normal state,
assuming our test coverage is good.

148
00:11:26.410 --> 00:11:29.820
You see how much we are leaning on
the test coverage to make sure we haven't

149
00:11:31.010 --> 00:11:34.670
substantially alter the code in
a way that will cause problems.

150
00:11:36.240 --> 00:11:42.296
And the last phase here is going
to be going back to our tsconfig,

151
00:11:42.296 --> 00:11:46.111
enabling strict mode, strict: true,

152
00:11:46.111 --> 00:11:51.948
strictFunctionTypes: true,
strictNullChecks: true and

153
00:11:51.948 --> 00:11:57.350
not that it matters cuz we're
not using BindCallApply.

154
00:11:57.350 --> 00:12:02.226
But for completeness we'll set
up that as well, and luckily,

155
00:12:02.226 --> 00:12:04.530
I don't see any errors here.

156
00:12:04.530 --> 00:12:10.550
So it turns out our third step was kind
of a no-op where nothing new popped up.

157
00:12:10.550 --> 00:12:15.620
We actually got to the finish line
with only forbidding implicit entries.

158
00:12:15.620 --> 00:12:17.510
But it would be totally possible for

159
00:12:17.510 --> 00:12:22.290
new things to pop-up that were fine
in the loose mode, and sort of only

160
00:12:22.290 --> 00:12:26.980
became true violations once we
turn those compiler flags on.

161
00:12:28.100 --> 00:12:28.750
Yes?

162
00:12:28.750 --> 00:12:32.000
&gt;&gt; Speaker 6: So if I accidentally added
commas as I was writing my interface.

163
00:12:32.000 --> 00:12:33.860
It seems like those are fine to do.

164
00:12:33.860 --> 00:12:39.275
&gt;&gt; Mike North: They are, commas are find
between key-value pairs and interfaces.

165
00:12:39.275 --> 00:12:44.124
The reason I prefer to use semicolons is,
it helps me visually

166
00:12:44.124 --> 00:12:49.700
identify the difference between and
an object type and object value.

167
00:12:49.700 --> 00:12:52.427
As you point out, both are fine.

168
00:12:52.427 --> 00:12:56.722
I use prettier to automatically
format things every time I save, and

169
00:12:56.722 --> 00:12:59.620
it's gonna replace commas with semicolons.

