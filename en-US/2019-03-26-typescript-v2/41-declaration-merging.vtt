WEBVTT

1
00:00:00.890 --> 00:00:05.678
&gt;&gt; Mike North: So this is another very,
very important section in terms of

2
00:00:05.678 --> 00:00:10.575
forming the right mental model
about how TypeScript works.

3
00:00:10.575 --> 00:00:16.085
And I've titled the declaration merging,
but this we're gonna look a lot,

4
00:00:16.085 --> 00:00:20.918
look deeply into how Visual Studio
codes' ToolTips provide us with

5
00:00:20.918 --> 00:00:26.174
information that we can use to figure
out whether some thing's of value,

6
00:00:26.174 --> 00:00:28.411
whether some thing's a type.

7
00:00:31.215 --> 00:00:35.734
&gt;&gt; Mike North: Additionally, this helps
us understand how we can put put little

8
00:00:35.734 --> 00:00:39.925
fixes on top of libraries or
imperfect type information, or

9
00:00:39.925 --> 00:00:44.964
maybe you want to prototype something and
types don't exist for it yet.

10
00:00:44.964 --> 00:00:50.629
This helps you augment some of
the existing type information in your app.

11
00:00:50.629 --> 00:00:52.877
So let's look at Section 8 of the notes.

12
00:01:01.453 --> 00:01:05.480
&gt;&gt; Mike North: In TypeScript app,
identifiers and just think of these as

13
00:01:05.480 --> 00:01:11.000
things that you could export, internally
types script to call these symbols.

14
00:01:11.000 --> 00:01:15.265
Identifiers can be associated
with up to three things.

15
00:01:15.265 --> 00:01:18.441
A value, a type or namespace.

16
00:01:18.441 --> 00:01:23.408
A namespace we haven't talked about yet,
but it's pretty simple in

17
00:01:23.408 --> 00:01:28.474
that it's sort of like an object in
that it has a type and it has a value.

18
00:01:28.474 --> 00:01:33.797
So in this situation we could do baz.biz.

19
00:01:33.797 --> 00:01:40.264
It's just sort of a collection
of stuff all merged together.

20
00:01:40.264 --> 00:01:43.824
Not really worth covering on its own, and

21
00:01:43.824 --> 00:01:48.718
increasingly less popular as
a tool to describe things.

22
00:01:48.718 --> 00:01:52.444
So I'm gonna show you how, given a symbol,

23
00:01:52.444 --> 00:01:56.191
you can test whether it
can be used as a type.

24
00:01:56.191 --> 00:01:57.788
And we've already been doing this.

25
00:01:57.788 --> 00:02:03.753
Sorry, we're gonna test for a value first,
and this is very intuitive.

26
00:02:03.753 --> 00:02:08.559
You should be able to complete
an assignment of some sort.

27
00:02:08.559 --> 00:02:14.340
If it's a value,
a variable should be able to hold it.

28
00:02:14.340 --> 00:02:16.658
If you get a type error here,
something is wrong.

29
00:02:16.658 --> 00:02:18.127
Let's try it with the interface.

30
00:02:20.245 --> 00:02:20.824
&gt;&gt; Mike North: No good.

31
00:02:20.824 --> 00:02:25.122
Bar only refers to a type but
it's used as a value here, so

32
00:02:25.122 --> 00:02:29.350
this is an effective test to
see if something is a value.

33
00:02:29.350 --> 00:02:31.238
How to test if something is a type?

34
00:02:31.238 --> 00:02:36.811
Try to use it as a type, try to use it on
the left-hand side of an equals, or if

35
00:02:36.811 --> 00:02:42.648
it's a left you don't even have to do that
&gt;&gt; Mike North: So

36
00:02:42.648 --> 00:02:47.646
if you can do that successfully,
bar can be regarded as type.

37
00:02:47.646 --> 00:02:52.146
To test whether something is
associated with a namespace,

38
00:02:52.146 --> 00:02:55.841
you're gonna have to rely on ToolTips for
that.

39
00:02:57.955 --> 00:03:02.080
&gt;&gt; Mike North: And just note that all
three of these things are importable and

40
00:03:02.080 --> 00:03:03.038
exportable.

41
00:03:03.038 --> 00:03:04.250
There's our interface.

42
00:03:04.250 --> 00:03:08.713
There's our value,
&gt;&gt; Mike North: And there's our namespace.

43
00:03:08.713 --> 00:03:14.656
So now, we kind of have the tests
we can apply to things,

44
00:03:14.656 --> 00:03:18.078
to figure out what's going on.

45
00:03:18.078 --> 00:03:21.450
So functions and variables,
they are purely values.

46
00:03:21.450 --> 00:03:26.893
You can only extract the type
of a value using a type query.

47
00:03:29.755 --> 00:03:32.831
&gt;&gt; Mike North: Interfaces are only types.

48
00:03:32.831 --> 00:03:36.383
If we try to complete an assignment here,

49
00:03:36.383 --> 00:03:40.038
we get the same error
we were seeing above.

50
00:03:40.038 --> 00:03:43.575
Address only refers to a type, and
is being used as a value here.

51
00:03:43.575 --> 00:03:48.080
Classes, this is where
things get interesting,

52
00:03:48.080 --> 00:03:54.743
they pass both the value and the type
tests, and here's what is going on.

53
00:03:54.743 --> 00:04:02.100
On one hand, a class is a factory
to produce instances, right?

54
00:04:02.100 --> 00:04:03.774
It has a constructor.

55
00:04:03.774 --> 00:04:05.258
It has a prototype.

56
00:04:05.258 --> 00:04:10.325
Recently I think JavaScript,
you can even do this now.

57
00:04:15.660 --> 00:04:17.390
&gt;&gt; Mike North: We can have static members,
right?

58
00:04:17.390 --> 00:04:19.488
Where we can access this
right off of the class.

59
00:04:25.650 --> 00:04:30.095
&gt;&gt; Mike North: So this is all associated
with the factory of instances.

60
00:04:30.095 --> 00:04:34.767
On the other hand, using this as a type

61
00:04:34.767 --> 00:04:39.591
describes the instances themselves.

62
00:04:39.591 --> 00:04:44.962
It can be used as almost like
an interface for the instance.

63
00:04:44.962 --> 00:04:51.018
So we can see this symbol
contact works in both positions.

64
00:04:51.018 --> 00:04:53.647
Up here we can capture the class itself.

65
00:04:53.647 --> 00:04:57.117
Down here we can use it as a type.

66
00:04:57.117 --> 00:04:59.120
So it kind of occupies both slots.

67
00:05:02.937 --> 00:05:07.950
&gt;&gt; Mike North: When declarations have
the same name they kinda all stack on top

68
00:05:07.950 --> 00:05:12.774
of each other, and
if you arrange things just the right way,

69
00:05:12.774 --> 00:05:17.805
mainly you don't have values
that collide with other values.

70
00:05:17.805 --> 00:05:22.580
You can end up with something
that looks like this,

71
00:05:22.580 --> 00:05:27.689
where when we export album,
and look at this tool tip,

72
00:05:27.689 --> 00:05:31.687
this is a value, a type, and a namespace,

73
00:05:31.687 --> 00:05:38.269
all stacked on top of each other,
all riding along on the same symbol.

74
00:05:38.269 --> 00:05:39.077
This is where,

75
00:05:39.077 --> 00:05:42.753
like I don't want you to gloss over
the information in your ToolTips.

76
00:05:42.753 --> 00:05:47.115
This tells you a lot, this tells you,
it's a class, there's an interface

77
00:05:47.115 --> 00:05:51.020
of the same name that augments that
class and there's a namespace.

78
00:05:51.020 --> 00:05:56.190
So we could pass the type test here and
that is to, we wouldn't even need

79
00:05:56.190 --> 00:06:01.459
the interface in order to do that cuz
the class has a type in and of itself.

80
00:06:01.459 --> 00:06:06.168
The interface just merges
on top of the class, and

81
00:06:06.168 --> 00:06:11.663
that means that if we had
another album here, a new album,

82
00:06:11.663 --> 00:06:19.307
and then al2 dot, we can see that the
interface has added this property artist.

83
00:06:19.307 --> 00:06:23.023
This is what you do is if
someone has forgotten t

84
00:06:23.023 --> 00:06:27.042
add something in type information for
a library.

85
00:06:27.042 --> 00:06:30.752
You could through an interface
kind of stack on top of that, and

86
00:06:30.752 --> 00:06:33.489
it applies globally
through your entire app.

87
00:06:33.489 --> 00:06:38.049
So there's only sort of one scope for
where type information is held.

88
00:06:38.049 --> 00:06:44.296
It's not on a per module basis,
it is holistically throughout the app.

89
00:06:44.296 --> 00:06:46.245
&gt;&gt; Speaker 2: Even without importing or
exporting it?

90
00:06:46.245 --> 00:06:49.390
&gt;&gt; Mike North: Even without importing or
exporting, what is that?

91
00:06:49.390 --> 00:06:52.148
&gt;&gt; Speaker 2: If you do
an override in your level, but

92
00:06:52.148 --> 00:06:57.594
you imported from outside somewhere,
you're saying it's still appwide?

93
00:06:57.594 --> 00:07:04.999
&gt;&gt; Mike North: Yes, the modification
you make will happen appwide.

94
00:07:04.999 --> 00:07:09.305
And this is important because
you might wanna make all of your

95
00:07:09.305 --> 00:07:14.465
modifications in one file, and
then have that, take a fact elsewhere.

96
00:07:14.465 --> 00:07:19.515
There are certain things like types for
globals, that would be really inconvenient

97
00:07:19.515 --> 00:07:23.656
to try to import and re-export
because there's no concept of that.

98
00:07:23.656 --> 00:07:28.627
Good examples that would jQuery or
Mocha, which it makes describe in it,

99
00:07:28.627 --> 00:07:33.528
those are global functions that you
don't have to exclusively import.

100
00:07:37.686 --> 00:07:42.697
&gt;&gt; Mike North: So namespaces, they have
kind of their own spot in that we can

101
00:07:42.697 --> 00:07:49.002
see on this ToolTip a namespace is
neither a class nor an interface, right?

102
00:07:49.002 --> 00:07:54.071
It's its own thing and
it's part of this thing being exported.

103
00:07:54.071 --> 00:07:56.957
They can be merged with classes or
functions.

104
00:07:56.957 --> 00:08:02.454
So here's an example of a class where
we can see we've got address book.

105
00:08:02.454 --> 00:08:07.188
And what we're doing here,
this is equivalent to what some

106
00:08:07.188 --> 00:08:12.204
languages would call an inner
class where you've got sort of,

107
00:08:12.204 --> 00:08:17.425
you have a class that is namespace
with respect to a parent class.

108
00:08:17.425 --> 00:08:23.993
So when we call our new,
we're having to say addressBook.ABContact.

109
00:08:26.283 --> 00:08:31.066
&gt;&gt; Mike North: The reason that this is
allowed is because a namespace serves

110
00:08:31.066 --> 00:08:34.835
to sort of tack things onto something,
right?

111
00:08:34.835 --> 00:08:38.980
It's just tacking AB
contact onto address book.

112
00:08:38.980 --> 00:08:41.908
And there's not ambiguous syntax here.

113
00:08:41.908 --> 00:08:45.975
Address book is only something
that can be invoked, right?

114
00:08:45.975 --> 00:08:49.956
Cuz the constructor is a function.

115
00:08:49.956 --> 00:08:56.318
So if we were to introduce a collision,
we'd run into problems like this.

116
00:08:56.318 --> 00:08:58.099
So now we've got two things.

117
00:08:58.099 --> 00:09:01.875
Like addressbook.ABContact.

118
00:09:01.875 --> 00:09:03.356
Is it a string?

119
00:09:03.356 --> 00:09:04.714
Is it a class?

120
00:09:04.714 --> 00:09:07.629
Something's got to get resolved here.

121
00:09:07.629 --> 00:09:12.940
But it like, it is largely
the static side of this class.

122
00:09:17.663 --> 00:09:22.074
&gt;&gt; Mike North: Similarly, because it works
with classes, we can expect that it will

123
00:09:22.074 --> 00:09:25.910
work for functions and
classes are just functions, right?

124
00:09:25.910 --> 00:09:27.276
They're factories.

125
00:09:27.276 --> 00:09:31.197
We invoke classes by
using the new keyword.

126
00:09:31.197 --> 00:09:35.776
And so
similarly we can use format this way.

127
00:09:35.776 --> 00:09:41.999
But we've also stored this currency
which is used inside format, right?.

128
00:09:41.999 --> 00:09:44.345
So it can kind of reference
the namespace here.

129
00:09:44.345 --> 00:09:47.483
And there is no collision here.

130
00:09:47.483 --> 00:09:49.552
We either invoke the function or

131
00:09:49.552 --> 00:09:53.773
we use some of these things that
we've tacked onto the function.

132
00:09:55.268 --> 00:09:59.232
&gt;&gt; Mike North: In terms of the things I
want you to takeaway with from my mental

133
00:09:59.232 --> 00:10:02.436
model perspective,
knowing what's the type and

134
00:10:02.436 --> 00:10:05.883
knowing what's the value,
will take you a long way.

135
00:10:05.883 --> 00:10:11.440
And knowing what can be augmented
interfaces versus knowing what

136
00:10:11.440 --> 00:10:17.209
you kinda have to leave alone when
their defined in types, values.

137
00:10:17.209 --> 00:10:22.569
So once you have a value like it's hard,
you can't overwrite that because that

138
00:10:22.569 --> 00:10:28.100
would conflict with the way JavaScript
behaves, when interfaces are fair game.

