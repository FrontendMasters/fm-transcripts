WEBVTT

1
00:00:00.320 --> 00:00:04.472
&gt;&gt; Mike North: When working with unknowns,
going back to that topic for a moment.

2
00:00:04.472 --> 00:00:08.671
There's one thing about this
that kinda bugs me, and

3
00:00:08.671 --> 00:00:12.070
that is illustrated by this example.

4
00:00:12.070 --> 00:00:15.666
So we have a value aa,
which is unknown, bb,

5
00:00:15.666 --> 00:00:19.940
another unknown, but
a completely different type.

6
00:00:19.940 --> 00:00:25.085
And it's actually like we're
not getting a type error here.

7
00:00:25.085 --> 00:00:28.470
So any unknown can be assigned
to any other unknown.

8
00:00:28.470 --> 00:00:29.980
And it's because it's a top type.

9
00:00:29.980 --> 00:00:33.759
It's just like an any,
it's sort of an opaque any.

10
00:00:33.759 --> 00:00:36.990
We can't see into it but
it can hold whatever it wants.

11
00:00:36.990 --> 00:00:42.782
So it's very easy to get a couple sort
of different opaque values mixed up and

12
00:00:42.782 --> 00:00:45.145
intertwined with each other.

13
00:00:45.145 --> 00:00:49.931
So, I'm gonna give you
an alternate solution that for

14
00:00:49.931 --> 00:00:52.948
me it's a little more involved but

15
00:00:52.948 --> 00:00:57.120
the idea is a lot safer and
a lot more intuitive.

16
00:00:59.360 --> 00:01:01.934
And this is called branded types.

17
00:01:01.934 --> 00:01:07.137
So I'm just gonna create an interface
that has a special property name

18
00:01:07.137 --> 00:01:12.791
that is very unlikely to overlap with
anything any other object might have.

19
00:01:12.791 --> 00:01:16.267
And I have a function called brand and
unbrand.

20
00:01:16.267 --> 00:01:22.010
What I'm doing here is,
typically this would be unsafe, all right?

21
00:01:22.010 --> 00:01:24.016
This is called casting, and

22
00:01:24.016 --> 00:01:29.040
it is where you're forcing a value
to be regarded as a particular type.

23
00:01:29.040 --> 00:01:31.896
So I'm passing a string in here, and

24
00:01:31.896 --> 00:01:37.210
I'm forcing it to a top type unknown,
or you could do any here.

25
00:01:37.210 --> 00:01:38.594
And then forcing it to BrandedA.

26
00:01:38.594 --> 00:01:43.456
If we did not do this intermediate
step we'd be all that because

27
00:01:43.456 --> 00:01:46.865
there is no overlap between this types.

28
00:01:46.865 --> 00:01:50.011
We're making a string
look to type script like

29
00:01:50.011 --> 00:01:52.760
an object with a special property on it.

30
00:01:52.760 --> 00:01:57.185
And then we have another matching
function that does the inverse transform.

31
00:01:57.185 --> 00:02:00.810
So we can pass this things around and
they dont look like strings.

32
00:02:00.810 --> 00:02:06.623
Nobody is ever gonna be able to use this
like a string, here is the advantage.

33
00:02:06.623 --> 00:02:12.160
So number one, I wanna make sure
we agree it's opaque, right?

34
00:02:12.160 --> 00:02:16.517
We don't see that this is a string,
we can't do string stuff with it.

35
00:02:16.517 --> 00:02:20.374
But if we had another type, and
this is just the same thing,

36
00:02:20.374 --> 00:02:23.090
just a different property key and value.

37
00:02:25.390 --> 00:02:33.010
&gt;&gt; Mike North: We can create
branded values, right?

38
00:02:33.010 --> 00:02:37.720
BrandB takes an object with a property
called abc, just to illustrate.

39
00:02:37.720 --> 00:02:39.213
You can do this with
whatever type you want.

40
00:02:43.840 --> 00:02:45.729
&gt;&gt; Mike North: But
this is the appealing part.

41
00:02:45.729 --> 00:02:50.960
Because these are two different branded
types with two different properties.

42
00:02:50.960 --> 00:02:53.515
Here this one ends with A,
this one ends with B.

43
00:02:53.515 --> 00:02:55.760
You can never get them confused.

44
00:02:55.760 --> 00:02:57.580
They're two different structures.

45
00:02:57.580 --> 00:03:00.939
There will not be a structural
match between these.

46
00:03:02.060 --> 00:03:08.815
So we've hidden away the original
identity of what this value is.

47
00:03:08.815 --> 00:03:12.350
We've made it so
that they're not interchangeable.

48
00:03:12.350 --> 00:03:16.884
You can't accidentally mix
the unbranding functions,

49
00:03:16.884 --> 00:03:20.100
which will recover the original value.

50
00:03:20.100 --> 00:03:24.110
But you can get back to your original
values through the unbrand if you do it

51
00:03:24.110 --> 00:03:24.830
correctly.

52
00:03:24.830 --> 00:03:26.997
So, it's almost like taking a value and

53
00:03:26.997 --> 00:03:29.490
putting it in an envelope and
packaging it up.

54
00:03:29.490 --> 00:03:32.896
It's like those envelopes you'd
mail an important document in.

55
00:03:32.896 --> 00:03:37.130
Where you can't see the contents,
but it sort of has a stamp on it, so

56
00:03:37.130 --> 00:03:41.670
you know this came from that person and
only they can open it back up again.

57
00:03:43.130 --> 00:03:46.032
So, I'll get to your question in a second.

58
00:03:46.032 --> 00:03:50.854
My only tip here is, make sure that
there's only one place in your code

59
00:03:50.854 --> 00:03:55.210
where you're doing your branding and
your unbranding.

60
00:03:55.210 --> 00:04:00.397
That is the way you can be absolutely
sure nobody is peeking inside this thing,

61
00:04:00.397 --> 00:04:03.785
or accessing trying to
access its original value.

62
00:04:06.170 --> 00:04:09.970
&gt;&gt; Mike North: Having the cast in one
direction to the opaque structure and

63
00:04:09.970 --> 00:04:12.557
back in the same job descriptor module.

64
00:04:12.557 --> 00:04:15.811
That allows you if you
wanted to change things up,

65
00:04:15.811 --> 00:04:20.927
you could remove this property key and
you could make changes in one location.

66
00:04:20.927 --> 00:04:23.897
And because nobody else can interact
with it in a meaningful way,

67
00:04:23.897 --> 00:04:26.790
you shouldn't have to alter
much of anything else.

68
00:04:26.790 --> 00:04:28.144
Did you have a question?

69
00:04:28.144 --> 00:04:32.214
&gt;&gt; Speaker 2: Yeah, what is the point of
doing it this way versus using an object

70
00:04:32.214 --> 00:04:34.290
and doing a private inside of it?

71
00:04:35.770 --> 00:04:39.978
&gt;&gt; Mike North: Privates can only
be used on class instances.

72
00:04:39.978 --> 00:04:42.750
&gt;&gt; Speaker 2: Okay, so this was?

73
00:04:42.750 --> 00:04:48.165
&gt;&gt; Mike North: So, I mean, you could
do things that way, but that would mean

74
00:04:48.165 --> 00:04:55.265
that the class would have to expose a way
of getting that original value back out.

75
00:04:55.265 --> 00:04:59.570
So I use this, in particular,
for ID generation.

76
00:04:59.570 --> 00:05:03.446
Where if I've got a dozen different
type of entities in my app, and

77
00:05:03.446 --> 00:05:08.224
I'm issuing IDs, and I wanna make sure
they're all coming from My ID generator,

78
00:05:08.224 --> 00:05:10.456
it's not just any string it's this.

79
00:05:10.456 --> 00:05:13.260
Now, I will create a branded type.

80
00:05:13.260 --> 00:05:15.420
So you can be sure like
this is the origin.

81
00:05:15.420 --> 00:05:18.776
It's the only function in the whole
app that will return to type with this

82
00:05:18.776 --> 00:05:19.910
structure.

83
00:05:19.910 --> 00:05:27.148
When it comes time to serialize this or
that to JSON, this here is a lie.

84
00:05:27.148 --> 00:05:31.967
This is the real type underneath, and
whenever all of the types compile away,

85
00:05:31.967 --> 00:05:35.471
your code will run exactly as
it would otherwise run, but

86
00:05:35.471 --> 00:05:38.790
this is just a way of saying
hands off this thing.

87
00:05:38.790 --> 00:05:43.662
Like I'm gonna use the type system
as a way to hide the nature of this

88
00:05:43.662 --> 00:05:47.500
value from anyone who would
care to try to poke at it.

89
00:05:47.500 --> 00:05:50.027
And again, it's not about security.

90
00:05:50.027 --> 00:05:54.333
It's about discouraging
developers from intertwining

91
00:05:54.333 --> 00:05:57.748
themselves with private
parts of your code.

92
00:05:57.748 --> 00:06:02.597
As a library author I want
to make sure that I can cut

93
00:06:02.597 --> 00:06:06.307
new releases with changes to my code.

94
00:06:06.307 --> 00:06:10.103
And I'm not gonna break
a lot other people.

95
00:06:10.103 --> 00:06:14.896
And this is a way of sort of drawing
a clean line, don't use this,

96
00:06:14.896 --> 00:06:17.960
I'm deliberately making it difficult.

