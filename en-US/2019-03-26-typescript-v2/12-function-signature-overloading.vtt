WEBVTT

1
00:00:00.090 --> 00:00:04.180
&gt;&gt; Mike North: This part is particularly
interesting, overload signatures.

2
00:00:04.180 --> 00:00:08.880
So we have a function here
called contactPeople.

3
00:00:08.880 --> 00:00:13.620
And I take in an argument
called method and

4
00:00:13.620 --> 00:00:19.510
the type of method here is either
the string email or the string phone.

5
00:00:20.840 --> 00:00:27.634
And then any other parameter that follows
can be either HasEmail or HasPhone.

6
00:00:27.634 --> 00:00:29.950
The same types that we were
using in the last exercise.

7
00:00:31.390 --> 00:00:36.418
So down here, let's make sure
that this works as we'd expect.

8
00:00:36.418 --> 00:00:43.068
If I wanna contact people by email, I can
do this, and that's invalid email address.

9
00:00:43.068 --> 00:00:49.720
But from a type perspective,
it should work, this also works.

10
00:00:49.720 --> 00:00:55.657
This should not work, right, email,
I mean, conceptually, this makes no sense.

11
00:00:55.657 --> 00:00:59.328
If I'm trying to email someone and
they only have a phone number,

12
00:00:59.328 --> 00:01:02.190
we're gonna run into a problem.

13
00:01:02.190 --> 00:01:05.420
And unfortunately, this currently works.

14
00:01:05.420 --> 00:01:09.920
And the reason is we have
defined two independent and

15
00:01:09.920 --> 00:01:13.030
unrelated constraints here.

16
00:01:13.030 --> 00:01:17.640
It can be either email or phone,
the string, and then the objects that we

17
00:01:17.640 --> 00:01:21.860
take can be sort of a mixed bag of
contacts with emails and phone numbers.

18
00:01:21.860 --> 00:01:27.420
So although these
are the narrowest types we could

19
00:01:27.420 --> 00:01:32.480
provide for these two arguments in order
to get done what we need to get done.

20
00:01:32.480 --> 00:01:37.720
There is some disallowed combination
that we want to prevent.

21
00:01:37.720 --> 00:01:40.126
And TypeScript provides
a way of doing this.

22
00:01:40.126 --> 00:01:45.070
So I wanna look at a tool tip here,
contactPeople, and

23
00:01:45.070 --> 00:01:47.980
this matches exactly what
we're seeing above, right?

24
00:01:47.980 --> 00:01:51.550
The first argument is one
of our two special strings.

25
00:01:51.550 --> 00:01:55.703
And then this is our mixed bag
of HasEmail and HasPhoneNumber.

26
00:01:55.703 --> 00:02:00.957
What I wanna do is create two
additional function signatures,

27
00:02:00.957 --> 00:02:03.838
sorry for that little jump there.

28
00:02:03.838 --> 00:02:09.860
And these are specific valid
ways to access this function.

29
00:02:09.860 --> 00:02:13.530
So the first one,
you can only pass an email, and

30
00:02:13.530 --> 00:02:16.560
then you must give me a list of
people with email addresses.

31
00:02:16.560 --> 00:02:20.790
Second one, only phone, and
then, only HasPhoneNumber.

32
00:02:22.270 --> 00:02:28.190
If we look at our tool tip now,
see that little 1 of 2 and 2 of 2?

33
00:02:28.190 --> 00:02:32.320
There are two specific ways that
we can invoke this function,

34
00:02:32.320 --> 00:02:37.020
either specify the string email and
give me objects with an email address.

35
00:02:37.020 --> 00:02:42.720
Or let's get a line with the string
phone and HasPhoneNumber.

36
00:02:42.720 --> 00:02:46.310
And if we look at our third and
problematic example here,

37
00:02:46.310 --> 00:02:51.300
it's telling us that we've provided
an object with the phone number.

38
00:02:51.300 --> 00:02:54.563
So this either I have to change
one thing or the other, right?

39
00:02:54.563 --> 00:02:58.772
It's currently erroring by saying,
you gotta make this string phone,

40
00:02:58.772 --> 00:03:02.330
you're operating on
people's phone numbers.

41
00:03:02.330 --> 00:03:07.123
I don't have email addresses, so,
&gt;&gt; Mike North: Note that we

42
00:03:07.123 --> 00:03:09.390
have two ways to access this function.

43
00:03:10.570 --> 00:03:15.560
And those are the specific function
signatures we've defined up here.

44
00:03:15.560 --> 00:03:18.480
This is not callable from the outside.

45
00:03:18.480 --> 00:03:22.400
It just needs to be wide enough,

46
00:03:22.400 --> 00:03:26.100
general enough to accommodate
all of the function signatures.

47
00:03:26.100 --> 00:03:30.480
So if I were to remove this,
we'd run into an error on

48
00:03:30.480 --> 00:03:34.650
the phone signature saying the underlying

49
00:03:34.650 --> 00:03:39.330
implementation does not accommodate
passing phone as the first parameter.

50
00:03:40.530 --> 00:03:45.045
So it just has to be general enough that
it'll meet the needs of all signatures

51
00:03:45.045 --> 00:03:45.674
above it.

52
00:03:48.758 --> 00:03:49.440
&gt;&gt; Mike North: Yes?

53
00:03:49.440 --> 00:03:53.764
&gt;&gt; Speaker 2: So could you just
safely remove the type signature from

54
00:03:53.764 --> 00:03:55.930
the actual function call?

55
00:03:55.930 --> 00:03:58.440
&gt;&gt; Mike North: It depends
what you mean by safely.

56
00:03:58.440 --> 00:04:03.030
So you could still,
like from the outside world's perspective,

57
00:04:03.030 --> 00:04:06.130
it would be exactly as
safe as it is right now.

58
00:04:06.130 --> 00:04:09.292
And I think what you're
saying here is basically

59
00:04:09.292 --> 00:04:11.842
string,
&gt;&gt; Mike North: And

60
00:04:11.842 --> 00:04:14.340
make this an array of anys, right?

61
00:04:14.340 --> 00:04:17.196
&gt;&gt; Speaker 2: Or
even just removing everything,

62
00:04:17.196 --> 00:04:20.153
all the types from line 53 to 56.

63
00:04:20.153 --> 00:04:22.930
Cuz we've got the declarations on 49 and
50.

64
00:04:22.930 --> 00:04:26.600
&gt;&gt; Mike North: Totally, and these would
become what we call implicit anys.

65
00:04:27.750 --> 00:04:30.710
So this is gonna be an array of anys,
this is gonna be an any.

66
00:04:30.710 --> 00:04:34.740
And from the outside world, because we
can't actually access the signature,

67
00:04:34.740 --> 00:04:39.660
no type checking from the outside world
ever is compared against this signature.

68
00:04:39.660 --> 00:04:43.472
So the outside world don't care,
but within this function,

69
00:04:43.472 --> 00:04:45.530
I'm in the Wild West here.

70
00:04:45.530 --> 00:04:49.110
Within the function,
I don't have any kind of type safety.

71
00:04:50.430 --> 00:04:52.450
So it's a good idea for

72
00:04:52.450 --> 00:04:57.990
the purpose of maintaining this function
to not be super, super general.

73
00:04:57.990 --> 00:05:00.450
You might do something like this,

74
00:05:00.450 --> 00:05:03.820
especially if you end up creating
a whole bunch of these signatures here.

75
00:05:03.820 --> 00:05:08.604
Like let's say, we had fax and
SMS and smoke signal.

76
00:05:08.604 --> 00:05:16.155
And it starts to get to a point where
this becomes a difficult to manage type.

77
00:05:16.155 --> 00:05:19.266
And I might fall back to string here,
right?

78
00:05:22.083 --> 00:05:23.563
&gt;&gt; Mike North: Good questions everybody.

79
00:05:26.247 --> 00:05:27.010
&gt;&gt; Speaker 2: I have a quick question.

80
00:05:27.010 --> 00:05:27.598
&gt;&gt; Mike North: Yes.
&gt;&gt; Speaker 3: So

81
00:05:27.598 --> 00:05:30.960
the overload signature's
a documentation strategy?

82
00:05:30.960 --> 00:05:34.390
&gt;&gt; Mike North: No, well-
&gt;&gt; Speaker 3: It seems kind of like one.

83
00:05:34.390 --> 00:05:39.460
&gt;&gt; Mike North: It has
documentation benefits, to be sure.

84
00:05:39.460 --> 00:05:43.870
Because it's very clear to consumers
what they should be doing.

85
00:05:43.870 --> 00:05:48.316
But I only say it's not purely
a documentation strategy

86
00:05:48.316 --> 00:05:52.769
because it actually has type
checking ramifications.

87
00:05:52.769 --> 00:05:59.888
This signature on line 72, I mean,
this attempt to invoke the function here,

88
00:05:59.888 --> 00:06:05.770
this is not type checking because
we only allow a and a, b and b.

89
00:06:05.770 --> 00:06:09.169
And this signature here
is trying to do a and b.

90
00:06:09.169 --> 00:06:15.180
It is like a disallowed range of
arguments that we can pass in.

91
00:06:15.180 --> 00:06:19.394
So more than just
providing useful tool tips,

92
00:06:19.394 --> 00:06:25.124
it is actually greenlighting
certain styles of invocation and

93
00:06:25.124 --> 00:06:30.650
forbidding anything else that's not,
that doesn't fit.

94
00:06:33.062 --> 00:06:37.391
&gt;&gt; Mike North: Has anyone here ever worked
with a language that supports pattern

95
00:06:37.391 --> 00:06:40.560
matching like Scala or Erlang or Elixir?

96
00:06:40.560 --> 00:06:44.535
So this is similar to patterns,
where often you can

97
00:06:44.535 --> 00:06:49.140
define multiple signatures that
are designed for specific cases.

98
00:06:50.490 --> 00:06:54.470
The difference here is you can
only have multiple function heads.

99
00:06:54.470 --> 00:06:57.600
You can't have multiple implementations,
right?

100
00:06:57.600 --> 00:07:02.877
But you can have multiple behaviors here,
independent functions that share

101
00:07:02.877 --> 00:07:07.921
the same name and kind of stack on top
of each other, just the signatures.

102
00:07:07.921 --> 00:07:11.270
And the reason is this
has to become JavaScript.

103
00:07:11.270 --> 00:07:17.130
And this JavaScript doesn't
support patterns in that way.

104
00:07:19.110 --> 00:07:20.880
But I think of it in similar way.

