WEBVTT

1
00:00:00.330 --> 00:00:04.810
&gt;&gt; Mike North: We also have here,
something like this syntax here.

2
00:00:04.810 --> 00:00:09.140
So I've been likening type
perimeters to function arguments.

3
00:00:09.140 --> 00:00:10.631
Based on that analogy,

4
00:00:10.631 --> 00:00:15.118
can someone venture a guess as to what
equals any means in this context?

5
00:00:15.118 --> 00:00:17.690
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Mike North: What's that?

6
00:00:17.690 --> 00:00:19.420
&gt;&gt; Speaker 2: Default value is an any.

7
00:00:19.420 --> 00:00:19.980
&gt;&gt; Mike North: Correct,

8
00:00:19.980 --> 00:00:24.860
if no type perimeter is provided,
we fall back to an any.

9
00:00:24.860 --> 00:00:28.160
That is the default of
this type parameter.

10
00:00:28.160 --> 00:00:31.570
So here, if we hover over this,

11
00:00:31.570 --> 00:00:37.440
this ends up being an any and
this is sort of a filter for truth values.

12
00:00:37.440 --> 00:00:42.263
Sort of passes X straight through,
it passes val straight through.

13
00:00:42.263 --> 00:00:45.070
And, as a result,
this is what you could expect.

14
00:00:45.070 --> 00:00:49.160
You'll get no type errors for
passing an argument to this,

15
00:00:49.160 --> 00:00:50.980
cause anything goes, right?

16
00:00:52.430 --> 00:00:56.320
So it's the equivalent of
a default parameter value.

17
00:00:56.320 --> 00:00:57.600
It's just a default type.

18
00:01:00.016 --> 00:01:03.817
&gt;&gt; Mike North: So, so far,
in our examples, like in this example,

19
00:01:03.817 --> 00:01:07.956
we've declared that we have
this type parameter, T, and

20
00:01:07.956 --> 00:01:11.090
we have found that we're using T directly.

21
00:01:12.140 --> 00:01:15.310
But you don't always have to do that,
you're not limited to that.

22
00:01:16.360 --> 00:01:21.006
Here's an example,
a little bit more complicated but

23
00:01:21.006 --> 00:01:28.722
one that I pulled out of my own code that,
&gt;&gt; Mike North: When passed a promise,

24
00:01:28.722 --> 00:01:35.636
and this is like the promise type is
generic over the type that it resolves to.

25
00:01:35.636 --> 00:01:39.773
And when we say generic
over that means that it is,

26
00:01:39.773 --> 00:01:46.480
it abstracts the type that it resolves to,
it takes it as a type parameter.

27
00:01:46.480 --> 00:01:49.380
So you could have a promise
that resolves to a number, or

28
00:01:49.380 --> 00:01:52.580
a promise that resolves to
an HTTP response, right?

29
00:01:52.580 --> 00:01:54.350
That's what you get back
when you call fetch.

30
00:01:55.880 --> 00:02:01.570
So T is the parameter, but
I take as an argument Promise T and

31
00:02:01.570 --> 00:02:09.690
I'll infer what T must be based on
the promise that I'm given and its type.

32
00:02:09.690 --> 00:02:13.660
So it takes a promises and argument and
it takes a number as an argument,

33
00:02:13.660 --> 00:02:19.170
and it'll return a new promise
that'll either time out if time's up.

34
00:02:19.170 --> 00:02:21.930
Or if the promise resolves
before it time's up,

35
00:02:21.930 --> 00:02:25.260
it'll actually pass through
the result value of that promise.

36
00:02:25.260 --> 00:02:28.242
And here is the implementation,
should hopefully make sense.

37
00:02:28.242 --> 00:02:31.760
It's called setTimeout.

38
00:02:31.760 --> 00:02:36.240
This thing that setTimeout returns is
necessary in order to cancel the timeout

39
00:02:36.240 --> 00:02:36.750
later on.

40
00:02:37.800 --> 00:02:43.450
And it's all set up, if nothing else
happens, to reject the promise.

41
00:02:45.440 --> 00:02:48.146
If the promise resolves,
we cancel the timeout.

42
00:02:48.146 --> 00:02:51.490
It's not finished,

43
00:02:51.490 --> 00:02:55.740
the callback that we passed to
setTimeout may never get invoked.

44
00:02:55.740 --> 00:02:57.610
And then we resolve with the value.

45
00:02:57.610 --> 00:03:02.600
Note that I don't have to pass in
anything with angle brackets here.

46
00:03:02.600 --> 00:03:07.750
And the reason is fetch returns
a promise that resolves to a response.

47
00:03:07.750 --> 00:03:11.548
And so through receiving this an argument,

48
00:03:11.548 --> 00:03:15.780
type script figures out
that T must be a response.

49
00:03:17.090 --> 00:03:21.870
It infers what T is by kind of
plucking it out of the promise or

50
00:03:21.870 --> 00:03:23.000
the type of the promise.

