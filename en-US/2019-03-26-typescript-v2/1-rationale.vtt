WEBVTT

1
00:00:00.190 --> 00:00:01.740
&gt;&gt; Mike North: So
why would we wanna add types?

2
00:00:01.740 --> 00:00:05.070
Why would someone bother
to make this project?

3
00:00:05.070 --> 00:00:09.430
First, it gives us the opportunity
to take assumptions and

4
00:00:09.430 --> 00:00:13.000
constraints we have as authors
when we write a piece of code.

5
00:00:13.000 --> 00:00:17.340
It gives us an opportunity to
make those a part of our code.

6
00:00:17.340 --> 00:00:21.130
So if you have a function that's designed
to take a string as an argument,

7
00:00:21.130 --> 00:00:25.510
you actually have a place where you could
say, this argument must be a string.

8
00:00:25.510 --> 00:00:27.560
Now, if we were just looking
at regular JavaScript,

9
00:00:27.560 --> 00:00:33.590
you could write a comment saying,
please only pass string to this function.

10
00:00:33.590 --> 00:00:39.390
But you'd be relying on people reading
your source code and finding that.

11
00:00:39.390 --> 00:00:45.450
You could assert that it's a string
like within the function, throwing

12
00:00:45.450 --> 00:00:50.480
error if the type of this value is not
a string, but that starts to add up.

13
00:00:50.480 --> 00:00:55.090
It starts to get towards something
we would call defensive programming.

14
00:00:55.090 --> 00:00:59.730
Which is where you basically don't
trust any of your inputs and

15
00:00:59.730 --> 00:01:02.700
it introduces a lot of overhead and
complexity,

16
00:01:02.700 --> 00:01:07.240
both performance overhead and
cognitive overhead, right?

17
00:01:07.240 --> 00:01:11.118
You hire a new person to your team and
they're gonna have to weave through

18
00:01:11.118 --> 00:01:13.919
the stuff and
figure out where are the assertions and

19
00:01:13.919 --> 00:01:18.581
what's this function actually doing after
it's satisfied that the data is correct.

20
00:01:18.581 --> 00:01:21.190
It makes things a little
difficult to maintain.

21
00:01:21.190 --> 00:01:26.510
So this types assist us in
taking all of our developer

22
00:01:26.510 --> 00:01:31.270
intent and
encoding it into the code we write.

23
00:01:32.960 --> 00:01:37.600
Types help us catch common mistakes,
like a spelling error.

24
00:01:37.600 --> 00:01:42.360
I make spelling errors a few times a day,
at least leading up to my second or

25
00:01:42.360 --> 00:01:46.960
third cup of coffee,
spelling errors are very common.

26
00:01:46.960 --> 00:01:53.390
So because there's a validation that
you're only accessing the properties

27
00:01:53.390 --> 00:01:56.910
that you should be accessing and that
you're naming your arguments correctly.

28
00:01:58.170 --> 00:02:03.420
You're less likely to make those
with types because you've defined

29
00:02:03.420 --> 00:02:10.805
what should be accessed, and everything
else you should not be trying to touch.

30
00:02:10.805 --> 00:02:12.850
An incomplete refactors and
other good example.

31
00:02:12.850 --> 00:02:16.010
Imagine you have a function that
you're using in four places and

32
00:02:16.010 --> 00:02:18.910
you add another required argument and

33
00:02:18.910 --> 00:02:24.450
you only update three of the call
sites leaving one out of date.

34
00:02:24.450 --> 00:02:28.390
The compiler will let you know
that there is a mismatch here, so

35
00:02:28.390 --> 00:02:32.000
it helps catch that kind of thing which
is very difficult to catch in JavaScript.

36
00:02:33.700 --> 00:02:37.990
You'll see throughout our work today that
we're moving a lot of errors we would find

37
00:02:37.990 --> 00:02:40.270
at run time up to compile time.

38
00:02:40.270 --> 00:02:42.510
So we're getting earlier feedback and

39
00:02:42.510 --> 00:02:45.960
we're getting feedback as
a result of static analysis.

40
00:02:45.960 --> 00:02:53.010
Which is an analysis that just looks at
your source code and comes to conclusions.

41
00:02:53.010 --> 00:02:57.700
As opposed to runtime analysis which
requires you to actually go through and

42
00:02:57.700 --> 00:03:00.970
execute every path of your code.

43
00:03:00.970 --> 00:03:04.733
So you could catch some of
the stuff with tests, absolutely.

44
00:03:04.733 --> 00:03:07.477
But while you're writing your code and

45
00:03:07.477 --> 00:03:12.966
maybe you haven't written your test yet,
or maybe your test are incomplete,

46
00:03:12.966 --> 00:03:17.737
is anyone here worked on a project
that has an imperfect test suite?

47
00:03:17.737 --> 00:03:20.799
I have, all hands should go up right now.

48
00:03:20.799 --> 00:03:23.118
All of your test suits
are probably imperfect.

49
00:03:23.118 --> 00:03:28.410
So, this means you are not depending
on tests to catch this type of error.

50
00:03:28.410 --> 00:03:31.200
You certainly can make
other types of errors.

51
00:03:31.200 --> 00:03:34.830
And then finally right away, you're gonna
see that TypeScript is the foundation

52
00:03:34.830 --> 00:03:36.950
of a great developer experience.

53
00:03:36.950 --> 00:03:41.220
It's something that the JavaScript
ecosystem has kind of been missing

54
00:03:41.220 --> 00:03:44.020
relative two typed programming languages.

55
00:03:44.020 --> 00:03:46.800
So I started out as a Java developer and

56
00:03:46.800 --> 00:03:52.120
I used a wide-range of
IDEs to write my code in.

57
00:03:52.120 --> 00:03:57.932
And I've got a lot of outlines
showing me these are the classes and

58
00:03:57.932 --> 00:04:01.560
these are the members of the classes, and
these are public and these are private.

59
00:04:01.560 --> 00:04:07.020
And I got great auto-completes because
the language was setup in such a way

60
00:04:07.020 --> 00:04:12.165
that you could know what you're supposed
to be accessing and what you're not.

61
00:04:12.165 --> 00:04:15.145
And what is the value of
the thing you are accessing?

62
00:04:15.145 --> 00:04:19.955
This is much harder to figure out in a
dynamically typed language like JavaScript

63
00:04:19.955 --> 00:04:20.795
or Ruby.

