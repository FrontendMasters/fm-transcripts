WEBVTT

1
00:00:00.500 --> 00:00:03.600
&gt;&gt; Mike North: So this commands are gonna
get kind of vague and cumbersome.

2
00:00:04.750 --> 00:00:11.210
The conventional way to do this is
to use a configuration file instead.

3
00:00:11.210 --> 00:00:15.220
So in my source folder,
I'm gonna create a file site.

4
00:00:15.220 --> 00:00:20.554
In the hello-ts folder, I'm gonna
create a file called tsconfig.json.

5
00:00:23.661 --> 00:00:27.247
&gt;&gt; Mike North: And we're gonna look at
the various things you can do here to

6
00:00:27.247 --> 00:00:28.260
set it up.

7
00:00:28.260 --> 00:00:32.039
There are two things you need to think
about when configuring the compiler.

8
00:00:32.039 --> 00:00:37.262
Number one is defining
which files are the inputs.

9
00:00:37.262 --> 00:00:43.253
And you can do that either by
specifying a list of files, or

10
00:00:43.253 --> 00:00:49.748
my preference is include,
which lets you specify some globs.

11
00:00:49.748 --> 00:00:55.497
You seen globs before like star.ts or
something.

12
00:00:55.497 --> 00:00:59.680
One valid glob is everything
in source folder.

13
00:00:59.680 --> 00:01:02.190
Right, so that's number one.

14
00:01:02.190 --> 00:01:03.520
What are we compiling?

15
00:01:03.520 --> 00:01:07.980
The second option is,
how are we compiling it?

16
00:01:07.980 --> 00:01:09.729
What are the compiler options?

17
00:01:09.729 --> 00:01:15.617
So to get an equivalent result
of what we were just looking at,

18
00:01:15.617 --> 00:01:19.370
we would do module commonjs, target.

19
00:01:19.370 --> 00:01:24.156
And VS Code gives you some,
there's a JSON schema behind this file

20
00:01:24.156 --> 00:01:28.060
that'll give you the allowed values for
this.

21
00:01:28.060 --> 00:01:31.570
So we'll pick es2017, and

22
00:01:31.570 --> 00:01:36.240
just for fun I'm actually gonna put
the output in a different directory.

23
00:01:37.620 --> 00:01:39.320
Put it in the lib folder.

24
00:01:39.320 --> 00:01:43.850
And this would make it really easy to sort
of to publish only the compiled output.

25
00:01:43.850 --> 00:01:48.017
If this were a library,
I'd wanna publish that to npm so

26
00:01:48.017 --> 00:01:53.350
that JavaScript and TypeScript
consumers alike, can import my code.

27
00:01:53.350 --> 00:01:57.270
They don't have to be
able to read ts files.

28
00:01:57.270 --> 00:01:59.910
So now I can just run tsc.

29
00:02:03.090 --> 00:02:07.680
Everything looks good, and
I should, after refreshing here,

30
00:02:07.680 --> 00:02:12.894
have a lib folder with
this index.js in it.

31
00:02:12.894 --> 00:02:14.270
So this is great.

32
00:02:14.270 --> 00:02:19.790
So I could almost think of it as,
if I delete our first attempt here.

33
00:02:19.790 --> 00:02:23.580
I could think of us,
like our source folder has a ts file,

34
00:02:23.580 --> 00:02:26.030
our lib folder has the js output.

35
00:02:26.030 --> 00:02:31.710
I could check the source folder into Git,
and I could only publish the lib folder,

36
00:02:31.710 --> 00:02:35.110
because we really only care
about the compiled output.

37
00:02:35.110 --> 00:02:38.320
And you'd keep things very
well organized in that way.

38
00:02:38.320 --> 00:02:40.738
So this is great.

39
00:02:40.738 --> 00:02:44.832
One problem I see though, we have
all this great type information and

40
00:02:44.832 --> 00:02:49.830
the stuff that I would ask my users to
run is missing this type information.

41
00:02:49.830 --> 00:02:54.350
Now, it's necessary for
me to provide an option to not use type

42
00:02:54.350 --> 00:02:59.420
information because people might write
JavaScript apps that depend on this code.

43
00:02:59.420 --> 00:03:04.200
But I wanna make sure I provide
some other stuff on top of that.

44
00:03:04.200 --> 00:03:10.050
So we're gonna say declaration true and
SourceMap true.

45
00:03:11.570 --> 00:03:16.850
Run the compiler again and we should see
some new files pop up in the lib folder.

46
00:03:16.850 --> 00:03:22.690
One of them is a .d.ts file, right?

47
00:03:22.690 --> 00:03:27.963
Same file name but
it's .d.ts instead of .js.

48
00:03:27.963 --> 00:03:33.476
And this, if you look at it, it looks kind
of like a function with no implementation,

49
00:03:33.476 --> 00:03:37.110
we can see that the names
of my arguments are there.

50
00:03:37.110 --> 00:03:39.750
We can see that we have types for
the arguments.

51
00:03:39.750 --> 00:03:41.580
This, we'll learn in a moment, but

52
00:03:41.580 --> 00:03:45.140
it happens to be the way you represent
the return type of the function.

53
00:03:45.140 --> 00:03:50.330
But nothing in here describes how you
would actually add a and b together.

54
00:03:50.330 --> 00:03:53.840
And nothing describes that we're waiting
half a second before returning that.

55
00:03:53.840 --> 00:03:57.546
So this is a type declaration
file that is meant

56
00:03:57.546 --> 00:04:02.499
to layer right on top of the JavaScript,
that it represents.

57
00:04:02.499 --> 00:04:07.572
And if you're using a TypeScript
aware editor, like VS Code,

58
00:04:07.572 --> 00:04:13.029
it's going to read this and
kind of match it with that JavaScript and

59
00:04:13.029 --> 00:04:19.252
understand that these are the types that
are meant to go along with this code,

60
00:04:19.252 --> 00:04:23.970
which is what is run in order
to get the value we're after.

61
00:04:25.520 --> 00:04:28.170
The other file is a source map, right?

62
00:04:28.170 --> 00:04:31.078
So, this is what would let us,

63
00:04:31.078 --> 00:04:36.150
if you put break points in your code,
it's what would, in your debugger,

64
00:04:36.150 --> 00:04:41.300
map that break point back to
the original TypeScript source.

65
00:04:41.300 --> 00:04:45.310
So you kind of feel as if you're
debugging through TypeScript code,

66
00:04:45.310 --> 00:04:47.380
when in fact, that is not what's running.

67
00:04:47.380 --> 00:04:49.220
What's running is the JavaScript.

68
00:04:49.220 --> 00:04:52.840
I can close by giving you
another example config here.

69
00:04:52.840 --> 00:04:54.560
So this is a more complicated one.

70
00:04:55.970 --> 00:04:59.730
The compiler has native support for react.

71
00:04:59.730 --> 00:05:01.451
So it can pass JSX.

72
00:05:01.451 --> 00:05:07.890
Can understand that if you call your files
TSX, that's like a TypeScript react file.

73
00:05:07.890 --> 00:05:10.610
But you don't need anything
other than the TypeScript

74
00:05:10.610 --> 00:05:12.090
compiler in order to check that.

75
00:05:13.580 --> 00:05:16.920
Strict, setting strict to
true is really important.

76
00:05:18.080 --> 00:05:21.370
You may wanna have strict as false,
it's default

77
00:05:22.480 --> 00:05:26.890
as your sort of Moving from
JavaScript to TypeScript.

78
00:05:26.890 --> 00:05:31.340
The approach I'll show you involves
starting with the loose configuration and

79
00:05:31.340 --> 00:05:32.650
then tightening it up.

80
00:05:32.650 --> 00:05:35.300
But ultimately,
you wanna end up in a place where you've

81
00:05:35.300 --> 00:05:37.960
got some of these strict
features turned on.

82
00:05:39.270 --> 00:05:43.380
Forbidding implicit any,
that's also important.

83
00:05:43.380 --> 00:05:46.340
Implicit anys are like wild card.

84
00:05:46.340 --> 00:05:49.940
They're places where the compiler
couldn't figure things out by itself.

85
00:05:49.940 --> 00:05:53.190
And it's kind of a place
where any type is allowed.

86
00:05:54.370 --> 00:05:56.650
And to put that in a more pessimistic way,

87
00:05:56.650 --> 00:05:59.350
it's a place where you have
no type safety, right?

88
00:06:00.920 --> 00:06:05.870
The TypeScript compiler can check and
compile regular JavaScript.

89
00:06:05.870 --> 00:06:07.730
And if you are interested in
learning more about this,

90
00:06:07.730 --> 00:06:11.630
check out the Visual Studio Code
course on FrontEnd Masters.

91
00:06:11.630 --> 00:06:17.540
You can use JSdoc comments and
say that this function has an argument and

92
00:06:17.540 --> 00:06:20.470
it is of type string and
here is the description and

93
00:06:20.470 --> 00:06:23.930
the compiler will actually
read that as type information.

94
00:06:23.930 --> 00:06:29.260
So even if you are in a position
where you can't actually switch

95
00:06:29.260 --> 00:06:33.490
to TS files, you can still use
the TypeScript compiler to check and

96
00:06:33.490 --> 00:06:36.960
make sure that your code kind
of lines up in a type-safe way.

97
00:06:38.930 --> 00:06:43.780
And we already talked about the target
environment, and they regularly add

98
00:06:43.780 --> 00:06:49.260
features, and keep pace with new drafts
of the JavaScript specification.

99
00:06:49.260 --> 00:06:51.750
So async and await were things
that were added recently.

100
00:06:53.270 --> 00:06:57.799
I expect they will do something about
some of the new stuff, project fields.

101
00:06:58.880 --> 00:07:01.390
As things are added to
the official JavaScript spec,

102
00:07:01.390 --> 00:07:03.241
you'll see them added as a new target.

103
00:07:07.780 --> 00:07:09.647
&gt;&gt; Mike North: Yes?

104
00:07:09.647 --> 00:07:13.188
&gt;&gt; Speaker 2: Do you have a recommendation
for if you wanted to support,

105
00:07:13.188 --> 00:07:15.728
say, I think you said ES3 was like IA6.

106
00:07:15.728 --> 00:07:17.685
&gt;&gt; Mike North: Yep.
&gt;&gt; Speaker 2: If you wanted the support to

107
00:07:17.685 --> 00:07:21.500
say like IE or all them, or
you didn't want to support IE at all,

108
00:07:21.500 --> 00:07:22.930
unless their targets.

109
00:07:22.930 --> 00:07:24.540
&gt;&gt; Mike North: Yep, good quesiton there.

110
00:07:24.540 --> 00:07:28.746
So really, can I ask you to
refine your question there?

111
00:07:28.746 --> 00:07:32.699
Are you thinking about using
Babel with typescript?

112
00:07:32.699 --> 00:07:33.422
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Mike North: So that,

113
00:07:33.422 --> 00:07:38.221
using Babel with TypeScript that
would reduce TypeScript to really

114
00:07:38.221 --> 00:07:42.607
just the checker,
not the thing it's producing the output.

115
00:07:42.607 --> 00:07:49.119
And the way I would recommend setting that
up, would be have TypeScript emit very,

116
00:07:49.119 --> 00:07:54.899
very, very modern JavaScript, and
let Babel take it the rest of the way.

117
00:07:54.899 --> 00:07:59.003
You already have something that
can take regular JavaScript and

118
00:07:59.003 --> 00:08:04.180
target like with using Babel preset and
you can just list your browsers, right?

119
00:08:04.180 --> 00:08:08.357
And say, I care about the last
two versions of Chrome.

120
00:08:08.357 --> 00:08:12.122
And that library actually keeps
up to date with Chrome, and

121
00:08:12.122 --> 00:08:15.664
will basically remove that
responsibility from you and

122
00:08:15.664 --> 00:08:21.200
your team in terms of keeping track of
what feature should I enable and what not?

123
00:08:21.200 --> 00:08:27.730
So I would say,
leave your target as ESNext maybe.

124
00:08:27.730 --> 00:08:30.360
Now, as projects get really big,

125
00:08:30.360 --> 00:08:35.540
sometimes there are language features
that just are not appealing to include.

126
00:08:35.540 --> 00:08:40.130
For example, at LinkedIn we
have an app that enabling async

127
00:08:40.130 --> 00:08:45.550
in await would be tough,
just because at every await

128
00:08:45.550 --> 00:08:51.190
we have to polyfill using regenerator or
something like that.

129
00:08:51.190 --> 00:08:53.630
And this starts to get expensive,

130
00:08:53.630 --> 00:08:57.120
it actually increases
the asset size quite a bit.

131
00:08:57.120 --> 00:09:02.730
So I would leave all of that in
the hands of lending tools and Babel.

132
00:09:02.730 --> 00:09:06.680
And if you're just using the compiler
as a static analysis tool, well,

133
00:09:06.680 --> 00:09:09.060
leave your target set at ESNext.

