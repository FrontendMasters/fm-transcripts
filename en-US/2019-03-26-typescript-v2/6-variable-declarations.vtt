WEBVTT

1
00:00:00.460 --> 00:00:08.000
&gt;&gt; Mike North: So let's look at separating
variable declarations and initializations.

2
00:00:08.000 --> 00:00:09.850
So, often, we need to do this.

3
00:00:09.850 --> 00:00:13.245
One place I can think of
that I do this is if I have

4
00:00:13.245 --> 00:00:17.735
a variable that takes on a different
value based on some conditions.

5
00:00:17.735 --> 00:00:21.955
Maybe I have a case switch with five or
six case clauses, and

6
00:00:21.955 --> 00:00:26.015
I wanna set the value of something based
on which of those clauses I fall into.

7
00:00:26.015 --> 00:00:31.350
I'll probably declare that variable
outside of the switch statement,

8
00:00:31.350 --> 00:00:34.800
and then assign it in each of the clauses.

9
00:00:34.800 --> 00:00:37.150
So you end up with something like this,
but

10
00:00:37.150 --> 00:00:39.940
we run into something that looks
a little bit troubling here.

11
00:00:41.030 --> 00:00:46.920
We initialize it to 41 or reassign
it to 41 cuz it has no initializer.

12
00:00:46.920 --> 00:00:49.760
And then it looks like we
can use a string as well.

13
00:00:51.210 --> 00:00:57.256
And this gives us a clue as to what's
going on here, z takes on a type of any.

14
00:00:57.256 --> 00:01:01.153
It's basically a wildcard.

15
00:01:01.153 --> 00:01:06.180
Well, type systems, in general,
call this a top type.

16
00:01:06.180 --> 00:01:08.360
Top types can take any value.

17
00:01:09.880 --> 00:01:11.840
And it's not that these are evil.

18
00:01:12.920 --> 00:01:17.770
They just play by the same rules
that JavaScript variables play by,

19
00:01:17.770 --> 00:01:22.010
where we can flip-flop between strings,
and numbers, and arrays, and functions,

20
00:01:22.010 --> 00:01:24.270
and it'll take on whatever you want.

21
00:01:24.270 --> 00:01:28.010
So it's a point of weakness in your types.

22
00:01:28.010 --> 00:01:32.920
Now, there are places where it's
totally valid to use an any, so

23
00:01:32.920 --> 00:01:39.160
don't think that you're on a mission
to completely purge them from your app.

24
00:01:39.160 --> 00:01:41.889
You just wanna make sure
that wherever you have it,

25
00:01:41.889 --> 00:01:44.563
you actually want to allow
absolutely anything.

26
00:01:48.869 --> 00:01:52.990
&gt;&gt; Mike North: So we could improve
the situation if we wanted to by,

27
00:01:52.990 --> 00:01:57.150
in our variable declaration,
specifying a type.

28
00:01:57.150 --> 00:02:00.040
And this is called a type annotation.

29
00:02:00.040 --> 00:02:03.540
We're sort of attaching a little
extra piece of information

30
00:02:03.540 --> 00:02:07.640
to the variable that says, look,
you don't have an initializer,

31
00:02:07.640 --> 00:02:12.490
but I'm telling you number is
what you're designed to hold.

32
00:02:12.490 --> 00:02:19.490
And now we get our desirable type error if
we try to put a string into this variable.

33
00:02:20.940 --> 00:02:24.148
So this is something you
gotta watch out for, right?

34
00:02:24.148 --> 00:02:28.079
If you have declarations where you
don't initialize the variable,

35
00:02:28.079 --> 00:02:31.750
you're gonna wanna specify what
type this is designed to hold.

36
00:02:33.320 --> 00:02:34.220
Yes?

37
00:02:34.220 --> 00:02:38.679
&gt;&gt; Speaker 2: So in the official docs of
TypesScript, they generally do do that

38
00:02:38.679 --> 00:02:44.780
type declaration, even if you're
initializing the variable with a value.

39
00:02:44.780 --> 00:02:48.980
Is it recommended to do it that way or
no, or does it now matter?

40
00:02:48.980 --> 00:02:50.810
&gt;&gt; Mike North: That's a great question.

41
00:02:50.810 --> 00:02:55.314
I would say it's recommended to do that
way if you are writing docs because you

42
00:02:55.314 --> 00:02:58.097
are being very descriptive
in documentation.

43
00:02:58.097 --> 00:02:59.317
And what's more,

44
00:02:59.317 --> 00:03:04.197
I'm sure the TypeScript team would love
to have the ability to show tool tips

45
00:03:04.197 --> 00:03:09.380
in their docs where you could hover over
things and see what they are, right?

46
00:03:09.380 --> 00:03:11.749
So like in this example up here,

47
00:03:11.749 --> 00:03:16.890
describing that this is of type hello
world, like to write that out on text,

48
00:03:16.890 --> 00:03:22.320
you might be verbose in doing so
for descriptive purposes.

49
00:03:22.320 --> 00:03:26.100
But because we have an editor here,
we don't have to do that.

50
00:03:26.100 --> 00:03:31.470
I err on the side of providing type
information in a few specific places.

51
00:03:31.470 --> 00:03:35.070
Variables with initializers,

52
00:03:35.070 --> 00:03:40.990
not one of those places because TypeScript
can always infer at that location.

53
00:03:40.990 --> 00:03:46.270
Now, I'll be very clear to point out
spots where I always put type information

54
00:03:46.270 --> 00:03:52.060
as a way of kind of setting deliberate
boundaries around pieces of code.

55
00:03:52.060 --> 00:03:56.410
Basically, what I'm trying to do
when I provide type information

56
00:03:56.410 --> 00:04:00.900
is provide an explicit contract
between two things, and

57
00:04:00.900 --> 00:04:04.060
keep myself honest on both
sides of that contract.

58
00:04:04.060 --> 00:04:07.470
But here,
it would sort of just be extra stuff.

59
00:04:07.470 --> 00:04:09.510
But I would write my docs in
the same way to be clear.

