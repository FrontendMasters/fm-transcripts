WEBVTT

1
00:00:00.450 --> 00:00:06.010
&gt;&gt; Mike North: Step 2,
you will start with your tests passing,

2
00:00:06.010 --> 00:00:08.120
you will ban implicit anys.

3
00:00:08.120 --> 00:00:15.570
And this is a tsconfig compiler option,
noImplicitAny, true.

4
00:00:15.570 --> 00:00:21.650
So setting that to true means, instead of
TypeScript falling back to any in places

5
00:00:21.650 --> 00:00:26.760
where it can't figure things out through
inference, it will throw an error at you.

6
00:00:26.760 --> 00:00:28.905
Not throw an error but
it will give you a compile error.

7
00:00:31.194 --> 00:00:35.561
&gt;&gt; Mike North: So you're gonna then have
basically a to-do list, and it's mostly

8
00:00:35.561 --> 00:00:40.420
going to consist of implicit anys that
now have turned into compile errors.

9
00:00:40.420 --> 00:00:45.970
And you are gonna go through and
provide meaningful types where you can,

10
00:00:45.970 --> 00:00:49.770
and where you can't,
you'll use an explicit any.

11
00:00:49.770 --> 00:00:53.920
You'll add a type annotation saying,
this is an any,

12
00:00:53.920 --> 00:00:58.140
I am explicitly saying,
whatever is fine here.

13
00:00:59.430 --> 00:01:02.620
This is a good time for
me to highlight DefinitelyTyped,

14
00:01:02.620 --> 00:01:07.720
which is an open source project that
provides ambient type information, right?

15
00:01:07.720 --> 00:01:10.280
This is like the DTS files.

16
00:01:10.280 --> 00:01:17.250
It provides separate npm packages that you
can bring in and it'll, ideally, perfectly

17
00:01:17.250 --> 00:01:21.920
lay on top of the underlying JavaScript
code base that you're used to using.

18
00:01:21.920 --> 00:01:25.720
For example,
if you want to use Lodash, which

19
00:01:25.720 --> 00:01:28.750
unless something has changed recently,
that is not written in TypeScript.

20
00:01:28.750 --> 00:01:30.510
It's written in regular JavaScript.

21
00:01:30.510 --> 00:01:32.340
You can import the Lodash types, and

22
00:01:32.340 --> 00:01:37.470
you'll get all of the benefits
that you get from typed code.

23
00:01:37.470 --> 00:01:39.810
But it's really like
the implementation and

24
00:01:39.810 --> 00:01:41.850
then the type information
laying on top of it.

25
00:01:43.340 --> 00:01:47.570
DefinitelyTyped publishes out
to thousands of libraries and

26
00:01:47.570 --> 00:01:53.749
they all are in the npm package
scope at typed or at types.

27
00:01:55.160 --> 00:01:58.430
So you'll see at types slash lodash.

28
00:01:58.430 --> 00:02:01.430
And if you look in the package
JSON on this workshop project,

29
00:02:01.430 --> 00:02:05.420
I think you'll see at types slash node.

30
00:02:05.420 --> 00:02:08.690
So that has the fs module and
the path module,

31
00:02:08.690 --> 00:02:11.900
all the type information there, right?

32
00:02:11.900 --> 00:02:16.729
So this is a good time to sort of
start bringing that in as a way of

33
00:02:17.790 --> 00:02:20.980
combating these implicit anys.

34
00:02:20.980 --> 00:02:23.280
And then you're going to get
your test passing again, and

35
00:02:23.280 --> 00:02:25.900
this is a second independent poll request.

