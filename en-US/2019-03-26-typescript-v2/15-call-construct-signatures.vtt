WEBVTT

1
00:00:00.000 --> 00:00:03.117
&gt;&gt; Mike North: We can use an interface
to describe a call signature.

2
00:00:03.117 --> 00:00:09.234
And we're simply using parenthesis
here to this describe a function.

3
00:00:09.234 --> 00:00:14.405
Now, what we're starting to see is
interfaces can describe objects,

4
00:00:14.405 --> 00:00:17.175
interfaces can describe functions.

5
00:00:17.175 --> 00:00:22.577
In a moment, we'll see that
interfaces can describe arrays.

6
00:00:22.577 --> 00:00:27.569
So we're dealing exclusively
with JavaScript values

7
00:00:27.569 --> 00:00:31.807
that extend from
the JavaScript object type.

8
00:00:31.807 --> 00:00:36.907
We've not yet seen, and we won't see,
an interface being able to

9
00:00:36.907 --> 00:00:43.117
handle primitive types, or operators
used with types, like string or number.

10
00:00:43.117 --> 00:00:46.233
There is no way to describe
that with an interface.

11
00:00:46.233 --> 00:00:49.100
So that's one clear
difference we're seeing here.

12
00:00:49.100 --> 00:00:52.112
Type aliases are extremely flexible.

13
00:00:52.112 --> 00:00:53.904
They can handle the primitive stuff.

14
00:00:53.904 --> 00:00:58.959
They can handle most things
that an interface can handle.

15
00:00:58.959 --> 00:01:00.768
Everything that an interface can handle.

16
00:01:00.768 --> 00:01:05.147
But interfaces are limited
to JavaScript object and

17
00:01:05.147 --> 00:01:09.236
sub types which includes arrays and
functions.

18
00:01:09.236 --> 00:01:11.387
Things that have prototypes,
think of it that way.

19
00:01:11.387 --> 00:01:14.091
So here is a function signature.

20
00:01:14.091 --> 00:01:17.497
And here is the equivalent with the type,
right?

21
00:01:17.497 --> 00:01:22.908
The wrapping is a little unfortunate here,
but same idea.

22
00:01:22.908 --> 00:01:28.355
This is one signature and
the only difference I wanna really point

23
00:01:28.355 --> 00:01:33.814
out cuz it's a little subtle,
the return is void here, :void.

24
00:01:33.814 --> 00:01:39.127
And just to make parsing possible,
we use a fat arrow here

25
00:01:39.127 --> 00:01:45.563
to define a function type with a type
alias, this would not be valid.

26
00:01:52.841 --> 00:01:54.882
&gt;&gt; Mike North: One cool
thing about function types,

27
00:01:54.882 --> 00:01:57.636
a little prettier it's
supposed to be right here.

28
00:01:57.636 --> 00:02:04.460
One cool thing about function types is we
get something called contextual inference.

29
00:02:04.460 --> 00:02:06.822
So we've already defined this type.

30
00:02:06.822 --> 00:02:08.357
Contactmessenger1.

31
00:02:08.357 --> 00:02:11.067
That's right up here, right?

32
00:02:13.731 --> 00:02:18.014
&gt;&gt; Mike North: It turns out like
we don't need any additional work.

33
00:02:18.014 --> 00:02:22.836
No additional type information in order to
figure out what the return type should be.

34
00:02:22.836 --> 00:02:24.954
What should these arguments type be.

35
00:02:24.954 --> 00:02:27.287
Or what should the argument times be.

36
00:02:27.287 --> 00:02:31.210
That's all coming along for
free because that information exist here.

37
00:02:31.210 --> 00:02:34.717
You'll see the same benefit come
through with call backs, right?

38
00:02:34.717 --> 00:02:40.397
If you say I accept the call back and it's
value like the signature should be this.

39
00:02:40.397 --> 00:02:44.880
Now, at every invocation site,
every time you pass a call back along,

40
00:02:44.880 --> 00:02:47.285
you can forget the type information.

41
00:02:47.285 --> 00:02:50.981
The type checking still happens
exactly as it would, but

42
00:02:50.981 --> 00:02:54.063
you don't need to be so
explicit along the way.

43
00:02:57.746 --> 00:03:00.358
&gt;&gt; Mike North: Construct signatures
look very similar to call signatures.

44
00:03:00.358 --> 00:03:04.530
All you need is new head of that.

45
00:03:04.530 --> 00:03:07.710
You're used to seeing this in a class,
right?

46
00:03:07.710 --> 00:03:11.580
Classes are something, they're new-able,
we can use the new keyword with them.

47
00:03:11.580 --> 00:03:16.766
So this would be a way of describing
a constructor that instantiates either

48
00:03:16.766 --> 00:03:22.380
things that have an email address or a
phone number, and definitely have a name.

