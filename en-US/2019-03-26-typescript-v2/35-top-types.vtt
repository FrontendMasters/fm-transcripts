WEBVTT

1
00:00:00.040 --> 00:00:02.720
&gt;&gt; Mike North: We've been working with
TypeScript's top and bottom types which

2
00:00:02.720 --> 00:00:07.280
are any and never respectively,
in a few different ways today.

3
00:00:07.280 --> 00:00:11.070
So let's dig a little bit deeper into this
topic and give it some proper attention.

4
00:00:11.070 --> 00:00:14.120
We'll look at how we can pass private or

5
00:00:14.120 --> 00:00:17.790
unknown values through
a piece of TypeScript code.

6
00:00:17.790 --> 00:00:21.000
We'll look at exhaustive conditionals.

7
00:00:21.000 --> 00:00:26.890
And, finally, we'll take a look at all of
the various kinds of type guards we can

8
00:00:26.890 --> 00:00:32.430
build and use that can be used with
conditionals to narrow a type down,

9
00:00:32.430 --> 00:00:33.930
so you can get something more specific.

10
00:00:35.010 --> 00:00:38.357
So let's open up our notes to number 6,

11
00:00:38.357 --> 00:00:43.539
guards-and-extreme-types.

12
00:00:46.400 --> 00:00:49.850
&gt;&gt; Mike North: So, first,
let's take a look at top types.

13
00:00:49.850 --> 00:00:52.160
TypeScript actually has two of these,

14
00:00:52.160 --> 00:00:56.390
although one is a relatively
recent development.

15
00:00:56.390 --> 00:00:59.150
Any, of course, is a top type.

16
00:00:59.150 --> 00:01:02.680
But TypeScript also has
a type called unknown.

17
00:01:03.750 --> 00:01:07.750
Like any, unknown can receive any value.

18
00:01:08.920 --> 00:01:13.290
You could assign it to a string or
to a number, whatever you want.

19
00:01:13.290 --> 00:01:15.910
The different between these two

20
00:01:15.910 --> 00:01:21.170
is apparent when we look at how you can
access things off of these two values.

21
00:01:21.170 --> 00:01:28.060
So for the any, you can see that
we're able to grab foo.bar.baz, we're

22
00:01:28.060 --> 00:01:32.860
treating it like it's a nested object and
there is no type checking error there.

23
00:01:34.340 --> 00:01:37.700
And this is you're playing
by JavaScript rules, right?

24
00:01:37.700 --> 00:01:39.740
No type checking.

25
00:01:39.740 --> 00:01:43.980
Unknown, while it is very
happy to hold any value,

26
00:01:43.980 --> 00:01:46.200
you cannot use unknown directly.

27
00:01:46.200 --> 00:01:50.590
You must narrow it in some
way before you use it.

28
00:01:50.590 --> 00:01:55.550
A good example of where you might
want to make use of this is an API

29
00:01:55.550 --> 00:02:01.340
response where you know
you've got some JSON back.

30
00:02:01.340 --> 00:02:05.570
But you need to perform
some sort of assertion

31
00:02:05.570 --> 00:02:09.600
to make sure it really is what you hope it
is, before you continue down that path.

32
00:02:11.435 --> 00:02:13.905
&gt;&gt; Mike North: And
we'll look at how you narrow that down and

33
00:02:13.905 --> 00:02:16.090
it's through using Type Guards.

34
00:02:16.090 --> 00:02:18.160
And we'll see that you it
can hold anything you want,

35
00:02:18.160 --> 00:02:20.630
but we gotta do something
before we can access it.

36
00:02:23.174 --> 00:02:26.668
&gt;&gt; Mike North: In terms of when you
might want to use any, they're great for

37
00:02:26.668 --> 00:02:30.520
parts of our programs where we want
to retain a lot of flexibility.

38
00:02:33.558 --> 00:02:38.232
&gt;&gt; Mike North: So, in this example,
we can see that this function, it just is

39
00:02:38.232 --> 00:02:44.560
interested in printing the resolved value
of a promise out to a console, right?

40
00:02:44.560 --> 00:02:50.010
So all it does is, it waits for
a promise, grabs the resolved value, and

41
00:02:50.010 --> 00:02:51.660
passes it to console.log.

42
00:02:51.660 --> 00:02:53.830
And if we look at the type of console.log,

43
00:02:53.830 --> 00:02:57.470
it turns out, oops,
this is the interesting one.

44
00:02:57.470 --> 00:03:00.400
I guess they're both,
they're somewhere here.

45
00:03:00.400 --> 00:03:02.350
They both take anys, right?

46
00:03:02.350 --> 00:03:04.710
That's what you're passing to console.log.

47
00:03:04.710 --> 00:03:06.200
You can pass it functions and classes,

48
00:03:06.200 --> 00:03:09.770
and it has it's own way of
serializing things out.

49
00:03:09.770 --> 00:03:11.560
So, there is no reason for

50
00:03:11.560 --> 00:03:16.860
us to further limit what kind of
promise we can handle in this way.

51
00:03:16.860 --> 00:03:20.500
Any is absolutely the appropriate
type to use in this case.

52
00:03:22.907 --> 00:03:26.923
&gt;&gt; Mike North: In terms of when we want
to use unknowns, they are good for

53
00:03:26.923 --> 00:03:31.943
either values that are either private
where maybe you have a library and

54
00:03:31.943 --> 00:03:36.713
you pass a value to somebody and
they might pass it somewhere else but

55
00:03:36.713 --> 00:03:40.910
you don't want the to know
the structure of this thing.

56
00:03:40.910 --> 00:03:42.690
Not for a security reason, but

57
00:03:42.690 --> 00:03:46.530
maybe you don't want them to depend
on the structure of this thing.

58
00:03:46.530 --> 00:03:50.850
You don't want that to become
part of your public API, right?

59
00:03:50.850 --> 00:03:56.844
So an example of this might be,
whatever set timeout returns.

60
00:03:58.260 --> 00:04:00.550
Do you really care that that's a number?

61
00:04:00.550 --> 00:04:04.830
It's a number because you pass
a number back to clear timeout, right?

62
00:04:04.830 --> 00:04:08.170
So you can say, set timeout,
in five seconds invoke this function.

63
00:04:08.170 --> 00:04:11.570
And it's almost like it gives you a little
ticket that you can use to cancel

64
00:04:11.570 --> 00:04:12.800
that later on.

65
00:04:12.800 --> 00:04:16.030
But the fact that it's a number,
is not really important to you.

66
00:04:16.030 --> 00:04:20.050
And maybe if this were a part of
a library, the author would want

67
00:04:20.050 --> 00:04:23.450
the freedom to be able to change
this to some other thing and

68
00:04:23.450 --> 00:04:26.220
to not consider that a breaking change.

69
00:04:26.220 --> 00:04:28.550
So that would be a great use of unknown.

70
00:04:29.900 --> 00:04:34.930
But we can certainly see that,
as is, they are not really usable.

71
00:04:36.150 --> 00:04:41.700
So what we need is a type guard in order
to sufficiently narrow this type and

72
00:04:41.700 --> 00:04:43.490
to be able to use it.

73
00:04:43.490 --> 00:04:46.300
Here are two that you'll
already be familiar with,

74
00:04:46.300 --> 00:04:50.410
because they have meaning in
the JavaScript world, typeof.

75
00:04:52.250 --> 00:04:55.710
Inside here, myUnknown is of type string.

76
00:04:55.710 --> 00:05:00.245
So out here it's unknown,
in here, it's a string.

77
00:05:00.245 --> 00:05:04.470
And then string.split works fine.

78
00:05:04.470 --> 00:05:07.530
Instanceof Promise, out here it's unknown.

79
00:05:07.530 --> 00:05:09.370
In here it's a Promise any.

80
00:05:11.230 --> 00:05:14.540
So this would be how you'd sort
of get it to something useful.

