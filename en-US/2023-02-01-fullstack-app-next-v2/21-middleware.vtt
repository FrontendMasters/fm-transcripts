WEBVTT

1
00:00:00.000 --> 00:00:05.762
So we left off with creating our
API handlers for authentication.

2
00:00:05.762 --> 00:00:10.297
We have our all form that we already
completed, we put the offer on the pages.

3
00:00:10.297 --> 00:00:13.336
We have our utility
functions that we made.

4
00:00:13.336 --> 00:00:18.976
The last thing we need is that mechanism
that checks the JSON Web Token and

5
00:00:18.976 --> 00:00:23.518
enforces it across any protected
resources that we want.

6
00:00:23.518 --> 00:00:26.636
So let's figure out what
resources we wanna protect.

7
00:00:26.636 --> 00:00:27.845
So as of right now,

8
00:00:27.845 --> 00:00:32.161
there's really only two types of
resources that we wanna protect.

9
00:00:32.161 --> 00:00:38.373
That's gonna be access to a certain page,
and then obviously access to certain data.

10
00:00:38.373 --> 00:00:40.149
So a page, is a route, so

11
00:00:40.149 --> 00:00:45.489
basically we wanna block routes off based
off what JSON Web Token you have or

12
00:00:45.489 --> 00:00:51.029
not and then for data that's either gonna
be blocking access to an API route.

13
00:00:51.029 --> 00:00:55.319
And we'll make some of those today or
it's also gonna be blocking access to,

14
00:00:55.319 --> 00:00:58.234
like a database query inside
of a server component.

15
00:00:58.234 --> 00:01:00.412
Since you don't need an API route for
server components,

16
00:01:00.412 --> 00:01:01.976
you can just go straight to the database.

17
00:01:01.976 --> 00:01:05.690
So those are three different places
in which we want to block access to.

18
00:01:05.690 --> 00:01:10.269
So for the pages, we're gonna
use something called middleware,

19
00:01:10.269 --> 00:01:15.190
that's probably the best approach
in NextJS to block access to pages.

20
00:01:15.190 --> 00:01:19.185
For blocking access to an API handler
you can also use middleware for

21
00:01:19.185 --> 00:01:23.180
that that works too, if you want
something a little more granular,

22
00:01:23.180 --> 00:01:27.480
you can just block the access yourself
inside the API handler function.

23
00:01:27.480 --> 00:01:31.650
But then blocking access to like
a database query inside of a server

24
00:01:31.650 --> 00:01:34.999
component, you would not
use middleware for that and

25
00:01:34.999 --> 00:01:39.108
you have to do that on the code level,
which we will also do today.

26
00:01:39.108 --> 00:01:41.745
But let's do middleware.

27
00:01:41.745 --> 00:01:46.288
So next section here, what is middleware?

28
00:01:46.288 --> 00:01:50.384
Middleware is just like a common term
that's used in programming it means,

29
00:01:50.384 --> 00:01:54.417
it's like the word API, it means
everything and nothing at the same time.

30
00:01:54.417 --> 00:01:58.093
But really, middleware is just something
that kind of just, you could think of as

31
00:01:58.093 --> 00:02:01.770
like an interceptor or something that sits
in the middle of your final destination

32
00:02:01.770 --> 00:02:05.153
when you're trying to make a request
when you're trying to go somewhere.

33
00:02:05.153 --> 00:02:09.146
It's usually used in the terms of making
requests, you're trying to make a request

34
00:02:09.146 --> 00:02:12.804
somewhere, whether that's a front-end
router or a back-end router, and

35
00:02:12.804 --> 00:02:16.743
there's something in the middle in between
where you're making the request to and

36
00:02:16.743 --> 00:02:18.795
where you started, that's middleware.

37
00:02:18.795 --> 00:02:23.755
And express middleware would be like
exactly what it sounds like you would

38
00:02:23.755 --> 00:02:28.555
use middleware for like parsing the JSON
and the body for adding logs and

39
00:02:28.555 --> 00:02:31.770
checking JSON Web Tokens and
things like that.

40
00:02:31.770 --> 00:02:34.934
NextJS has built in use cases for
middleware,

41
00:02:34.934 --> 00:02:39.725
but it's not the same as like Express
that's because NextJS actually

42
00:02:39.725 --> 00:02:44.127
allows you to have two different
run times when it comes to node.

43
00:02:44.127 --> 00:02:49.949
You have the edge run time, which is,
it's almost like a service function,

44
00:02:49.949 --> 00:02:54.250
but a service function it can
actually compute things and

45
00:02:54.250 --> 00:02:57.580
it runs and
it has full environment of node.

46
00:02:57.580 --> 00:03:00.377
It's not as restricted
as a edge run time and

47
00:03:00.377 --> 00:03:03.865
edge run time is basically,
imagine a network of CDN.

48
00:03:03.865 --> 00:03:08.041
So you have a CDN and
all the nodes on the CDN, a while ago,

49
00:03:08.041 --> 00:03:13.783
you can only put read only assets on that
CDN we're talking like files images.

50
00:03:13.783 --> 00:03:17.483
If you've ever got an image off
the internet, it was probably on a CDN and

51
00:03:17.483 --> 00:03:19.190
that's how it got there so fast.

52
00:03:19.190 --> 00:03:22.725
But for the longest you can only
put read only things on that CDN.

53
00:03:22.725 --> 00:03:27.310
Well, up until the last five years,
we can now actually compute on the edge.

54
00:03:27.310 --> 00:03:32.361
So it's not only read only things,
we can actually run code on that edge,

55
00:03:32.361 --> 00:03:35.951
on that node, and
that's what the edge run time is.

56
00:03:35.951 --> 00:03:40.518
It allows us to run JavaScript on
the CDN node closest to where you made

57
00:03:40.518 --> 00:03:41.476
the request.

58
00:03:41.476 --> 00:03:45.655
So that means whatever code you put up
on the edge run time is going to be

59
00:03:45.655 --> 00:03:49.766
duplicated across the entire CDN
in which you are deploying to, and

60
00:03:49.766 --> 00:03:54.378
the user that makes the request is going
to have that code to get executed from

61
00:03:54.378 --> 00:03:55.996
the node closest to them.

62
00:03:55.996 --> 00:04:00.585
So it's just a really great way to,
I mean, there's so many use cases for

63
00:04:00.585 --> 00:04:03.188
edge run times it's kind of ridiculous.

64
00:04:03.188 --> 00:04:08.001
I've seen people do AB testing,
I've seen people do personalized dynamic

65
00:04:08.001 --> 00:04:13.337
websites It's for people based off the IP
address, like, go to the edge function,

66
00:04:13.337 --> 00:04:18.300
take this IP address, do a lookup to see
what companies this IP address belongs

67
00:04:18.300 --> 00:04:23.066
to change the header on the website to
specifically call that company out.

68
00:04:23.066 --> 00:04:24.663
And it's still SEO friendly, right?

69
00:04:24.663 --> 00:04:29.029
So like you can do things like that on the
edge without ever touching your origin.

70
00:04:29.029 --> 00:04:30.726
So it's just instant.

71
00:04:30.726 --> 00:04:32.611
So it's a lot of crazy stuff you can do.

72
00:04:32.611 --> 00:04:33.613
What we're gonna do,

73
00:04:33.613 --> 00:04:37.216
is prevent people from accessing different
pages that's what we're gonna do.

74
00:04:37.216 --> 00:04:38.654
So let's do that.

75
00:04:38.654 --> 00:04:42.955
In order to make a middleware,
it's actually quite simple,

76
00:04:42.955 --> 00:04:48.509
we just go to the root of our project and
make a new file, we say middleware.cs.

77
00:04:51.540 --> 00:04:54.755
So middleware is kind of like a handler,
it's just a function that runs.

78
00:04:54.755 --> 00:04:59.135
And then we can proceed and
say, hey, cool, go next or

79
00:04:59.135 --> 00:05:03.147
we can stop it and redirect,
we can throw errors.

80
00:05:03.147 --> 00:05:07.927
But basically you can think of as like
the bodyguard for our pages in this case.

81
00:05:07.927 --> 00:05:12.846
Or in the case of NextJS, any route ever,
middleware can sit in front of any route,

82
00:05:12.846 --> 00:05:17.344
even if it's a route to a public image,
even if it's a route to the favicon,

83
00:05:17.344 --> 00:05:19.551
like it can sit in front of any route.

84
00:05:19.551 --> 00:05:23.141
And you'll see, we'll actually have to
tell it not to do that because by default,

85
00:05:23.141 --> 00:05:26.425
it does sit in front of every route and
we don't want our middleware function

86
00:05:26.425 --> 00:05:29.739
running every time someone requests
an image, that's kind of redundant.

87
00:05:29.739 --> 00:05:35.170
So we have to be very explicit about that
and there's many ways you can do it.

88
00:05:35.170 --> 00:05:40.351
But basically the strategy for
this middleware is to one,

89
00:05:40.351 --> 00:05:47.452
determine if the requests coming in is to
a resource on which we want to protect.

90
00:05:47.452 --> 00:05:52.599
If it is what we wanna do is check to see
if there's a JSON Web Token in the cookie

91
00:05:52.599 --> 00:05:57.035
header our specific token,
if it is we want to verify that token and

92
00:05:57.035 --> 00:06:01.949
if you are verified then we'll let you
proceed to whatever you are gonna do

93
00:06:01.949 --> 00:06:06.895
we'll let you in the gate to whatever
resource you're trying to access.

94
00:06:06.895 --> 00:06:12.272
If any one of those things fail,
we will redirect you back to sign in,

95
00:06:12.272 --> 00:06:16.189
that's what the middleware is gonna do,
right?

96
00:06:16.189 --> 00:06:20.545
But there's a lot of stuff we have to do
in between to make sure that happens, so

97
00:06:20.545 --> 00:06:21.735
let's get started.

98
00:06:21.735 --> 00:06:26.257
The first thing is,
as I import some of these things, and

99
00:06:26.257 --> 00:06:29.283
this is gonna seem kind of redundant.

100
00:06:29.283 --> 00:06:34.633
We're gonna have to make the same
function that we already made in the auth

101
00:06:34.633 --> 00:06:39.742
file called, I think we even call it
the same verified JSON Web Token.

102
00:06:39.742 --> 00:06:44.864
So I'm just gonna paste it in, I'm gonna
talk about why we have to make this again.

103
00:06:44.864 --> 00:06:48.445
In that API file and I did this
intentionally we could fix this another

104
00:06:48.445 --> 00:06:51.858
way, but I want it to run into this
I can have it as a talking point.

105
00:06:51.858 --> 00:06:57.825
I'm sorry, but in that auth file,
there is a package up here called bcrypt.

106
00:06:57.825 --> 00:07:02.295
Okay bcrypt runs on node, it's totally
fine, it works in node even runs in our

107
00:07:02.295 --> 00:07:06.590
server components cuz we tell it next day,
yes about it in the next config.

108
00:07:06.590 --> 00:07:13.367
Down here somewhere, there we go right but
it will not run in the edge environment.

109
00:07:13.367 --> 00:07:17.027
And edge environment,
although it's JavaScript,

110
00:07:17.027 --> 00:07:22.001
it is not the same JavaScript as node
it is not fully fleshed out that way.

111
00:07:22.001 --> 00:07:25.950
It uses something very similar to
like a web worker's environment,

112
00:07:25.950 --> 00:07:30.375
it's very limited in how it operates
because it's not a full environment you

113
00:07:30.375 --> 00:07:35.366
have these restrictions where you can't
use code that's like doing dynamic things.

114
00:07:35.366 --> 00:07:39.333
Most of the code has to be static
bcript does a lot of dynamic things, so

115
00:07:39.333 --> 00:07:42.104
not all MPM packages will
run in an edge run time.

116
00:07:42.104 --> 00:07:46.769
So inside this middle word file,
you probably won't be able to run every

117
00:07:46.769 --> 00:07:51.661
single MPM package that you can find and
put it in here that typically works on

118
00:07:51.661 --> 00:07:56.027
node because that code was written
dynamically, not statically.

119
00:07:56.027 --> 00:07:59.169
And this is actually why I had to find
another package for JSON Web Tokens,

120
00:07:59.169 --> 00:08:00.296
this new one called jose.

121
00:08:00.296 --> 00:08:02.964
I actually never used this one
before until this course because

122
00:08:02.964 --> 00:08:06.335
the one that I actually use doesn't work
in edge runtimes because of the way that

123
00:08:06.335 --> 00:08:07.968
it was written whereas this one does.

124
00:08:07.968 --> 00:08:12.072
So remember that you can't use
every package in here and so

125
00:08:12.072 --> 00:08:16.427
to avoid it obviously we would
have just took the verify part or

126
00:08:16.427 --> 00:08:21.200
this whole JSON Web Token part and
put in its own file like JWT.ts and

127
00:08:21.200 --> 00:08:24.047
then we could import it in both places and

128
00:08:24.047 --> 00:08:28.463
I won't have to write it twice but
I wanted to talk about that.

129
00:08:28.463 --> 00:08:30.233
I want to show you why that is.

130
00:08:30.233 --> 00:08:32.455
So we're just going to write it again.

131
00:08:35.589 --> 00:08:38.723
Okay, cool so we have that now
let's make our middleware function.

132
00:08:38.723 --> 00:08:42.254
All you have to do for the middleware
function here is just export a function

133
00:08:42.254 --> 00:08:45.798
that has a request in response very
similar to a handler that's really it.

134
00:08:45.798 --> 00:08:46.762
So let's do that.

135
00:08:56.995 --> 00:09:00.652
There we go, so
we have a request and response and

136
00:09:00.652 --> 00:09:05.304
if you want to type this I believe
there's a Next, let me see.

137
00:09:05.304 --> 00:09:07.050
It might just be the request one.

138
00:09:11.536 --> 00:09:13.284
It might be I thought it
was slightly different.

139
00:09:13.284 --> 00:09:16.499
You could probably use that one but
I think it is slightly different,

140
00:09:16.499 --> 00:09:18.450
I'm not gonna use it, I don't trust it.

141
00:09:18.450 --> 00:09:23.566
So what we have to do is be very like I
said before, very explicit about when

142
00:09:23.566 --> 00:09:28.615
we want this middleware to run and
there's, so many ways we can do that.

143
00:09:28.615 --> 00:09:33.213
The way that I'm going to do it is in
the middleware function itself with my own

144
00:09:33.213 --> 00:09:34.134
conditional so

145
00:09:34.134 --> 00:09:38.478
I'm just going to check to see if
the path name that's being requested.

146
00:09:38.478 --> 00:09:43.081
Look at req.nextUrl,
if that starts with any one of these,

147
00:09:43.081 --> 00:09:47.700
you're free to go,
this is all public resources you can go.

148
00:09:47.700 --> 00:09:52.644
And so this includes like the API folder
because I'm probably gonna do checking

149
00:09:52.644 --> 00:09:56.429
in the API handlers themselves,
if you are signed in or not.

150
00:09:56.429 --> 00:09:58.193
So I don't want to do that
here on the middleware layer.

151
00:09:58.193 --> 00:10:02.480
So Imma let you go if you want to talk to
API, static files, signin and register,

152
00:10:02.480 --> 00:10:06.831
I don't want to block you from accessing
the sign in or register page if you aren't

153
00:10:06.831 --> 00:10:10.425
signed in, then you wouldn't ever
be able to sign in or register and

154
00:10:10.425 --> 00:10:13.990
it'll just be it will just infinitely
redirect until it crashed.

155
00:10:13.990 --> 00:10:16.101
So we want to do that too.

156
00:10:16.101 --> 00:10:19.305
And then this next one is just
like this is like mostly for

157
00:10:19.305 --> 00:10:21.701
development next builds to this folder.

158
00:10:21.701 --> 00:10:23.658
So this is just saying, like, yeah,

159
00:10:23.658 --> 00:10:27.876
you can go here if you want to go to those
resources, we're not gonna block you this

160
00:10:27.876 --> 00:10:32.360
last one here is just the public it's just
the regist I made for, like, public files.

161
00:10:32.360 --> 00:10:34.255
They typically have like,
that slash in front of them.

162
00:10:34.255 --> 00:10:37.089
So, yeah, this is like any public file,
like an image or

163
00:10:37.089 --> 00:10:40.119
something you all get the green card,
you get to go, right?

164
00:10:40.119 --> 00:10:45.062
So that's what we wanna do,
so let's do that

165
00:10:45.062 --> 00:10:50.668
we're gonna say const
pathname= req.nextUrl.

166
00:10:55.961 --> 00:11:02.422
And then from there, cognitive statements
are lots of writes, like that.

167
00:11:05.313 --> 00:11:09.641
You can also do this outside
of the middleware function.

168
00:11:09.641 --> 00:11:15.749
You can export, forgot the exact syntax,
so let's go look at it,

169
00:11:15.749 --> 00:11:22.404
you can export a configuration object
called a matcher here like this and

170
00:11:22.404 --> 00:11:27.327
you can tell NextJS which
routes you want to match on.

171
00:11:27.327 --> 00:11:30.625
So any of these will
trigger the middleware, but

172
00:11:30.625 --> 00:11:35.786
you can also do like regex's as well,
which have like negative look ahead.

173
00:11:35.786 --> 00:11:39.710
So you can say anything that's not this so
there's many ways to do it.

174
00:11:39.710 --> 00:11:44.120
I chose to do it in a code because I
didn't want to write a lot of regex's.

175
00:11:44.120 --> 00:11:48.778
So and I also had problems with this
syntax because it's like regex to

176
00:11:48.778 --> 00:11:51.508
paths syntax I'm not familiar with it so

177
00:11:51.508 --> 00:11:56.509
I had a lot of problems actually trying
to figure out the paths that I want.

178
00:11:56.509 --> 00:12:00.485
It was triggering when I didn't want
it to trigger and vice versa so

179
00:12:00.485 --> 00:12:05.171
I decided to just do it this way which is
they also recommend this way as well just

180
00:12:05.171 --> 00:12:09.857
know that if you did the matcher way where
you export a config with a matcher this

181
00:12:09.857 --> 00:12:12.717
function won't even run
if it doesn't match.

182
00:12:12.717 --> 00:12:17.717
Whereas in our case, the function will
run every single time it just won't get

183
00:12:17.717 --> 00:12:21.806
past this line if it falls here,
so, but it's basically free,

184
00:12:21.806 --> 00:12:24.033
it's a function running on a CDN.

185
00:12:24.033 --> 00:12:27.955
So you're not and it's usually so
inexpensive that it's not like you're

186
00:12:27.955 --> 00:12:32.000
losing money, I mean these things are
fractions of a fraction of a penny to run

187
00:12:32.000 --> 00:12:37.046
so Cool, okay.

188
00:12:40.333 --> 00:12:45.199
Now we want to do is we want to
get the cookies from req.cookies.

189
00:12:45.199 --> 00:12:52.358
So we can say JWT, or get a JWT
from cookies, req.cookies.get and

190
00:12:52.358 --> 00:12:58.394
we can access the environment
variables here like that.

191
00:13:02.418 --> 00:13:06.347
Grab our cookie and
then if you don't have a JSON Web Token,

192
00:13:06.347 --> 00:13:09.819
then what we want to do is
we want to set the pathname.

193
00:13:09.819 --> 00:13:15.037
The pathname is where you were trying to
go before this middleware stopped you.

194
00:13:15.037 --> 00:13:18.757
So we wanna change that, we don't
care what it was, it's sign in now,

195
00:13:18.757 --> 00:13:22.366
that's the path name, and
then we wanna redirect you to it, right?

196
00:13:22.366 --> 00:13:27.619
So that's what we're gonna do, so
we're gonna say, if you don't have a JSON

197
00:13:27.619 --> 00:13:32.636
web token, okay, then req.nextUrl.pathname
whatever it was before,

198
00:13:32.636 --> 00:13:37.837
it doesn't matter because it's signed
in now that's where you're going.

199
00:13:37.837 --> 00:13:44.384
And then we just want to return
this NextResponse.redirect so

200
00:13:44.384 --> 00:13:49.325
we'll say return NextResponse.redirect and

201
00:13:49.325 --> 00:13:53.043
you have to give it a req.nextUrl.

202
00:14:05.836 --> 00:14:09.626
And next response comes from next
server mine is auto imported.

203
00:14:13.682 --> 00:14:18.570
Okay and then from there we'll
just do a try catch just to try to

204
00:14:18.570 --> 00:14:22.816
verify this thing we don't
need to get the user here.

205
00:14:22.816 --> 00:14:26.680
In fact, we wouldn't do anything with it
because we can't pull in Prisma, we can't

206
00:14:26.680 --> 00:14:30.294
run Prisma here on the middleware that's
the next evolution of edge runtimes.

207
00:14:30.294 --> 00:14:32.879
It's like how do we store data and
things like that, and

208
00:14:32.879 --> 00:14:34.749
there are some solutions out there, but

209
00:14:34.749 --> 00:14:38.105
it's not a Postgres database using
Prisma that's not gonna work here.

210
00:14:38.105 --> 00:14:41.666
So there's no need to get
the results of this token and

211
00:14:41.666 --> 00:14:46.650
look it up like we did inside of our sign
in where we got the token, we checked

212
00:14:46.650 --> 00:14:52.292
the ID to see if your real, like, we don't
need to do that, because we can't do it.

213
00:14:52.292 --> 00:14:55.065
And that's not the purpose of this
middleware, this middleware was just

214
00:14:55.065 --> 00:14:58.032
making sure that there is a JSON Web Token
that was created by us and that's it.

215
00:14:58.032 --> 00:15:01.886
The identifying of that is, wherever
you're going next, and not the job

216
00:15:01.886 --> 00:15:06.380
of this middleware, at least in this case,
given our resources, so let's do that.

217
00:15:09.050 --> 00:15:12.953
And make sure we use
the one that we created and

218
00:15:12.953 --> 00:15:17.588
not the one that is in the other file so
we'll do that.

219
00:15:17.588 --> 00:15:21.679
And then from there, you just called next,
just like most middleware, there's

220
00:15:21.679 --> 00:15:25.856
usually a next function that you call
because there's like multiple middleware.

221
00:15:25.856 --> 00:15:30.714
So it's like, just go to the next function
that you're trying to run and we have

222
00:15:30.714 --> 00:15:36.100
catch, we have an error, trying to verify
you can't go wherever you're trying to go.

223
00:15:36.100 --> 00:15:38.942
So what we're gonna do is we're gonna
do the same thing we did above,

224
00:15:38.942 --> 00:15:40.510
we're gonna redirect you to sign in.

225
00:15:40.510 --> 00:15:43.755
We're gonna change the path name to sign
in, and we're gonna redirect you there.

