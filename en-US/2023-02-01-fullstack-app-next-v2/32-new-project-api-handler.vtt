WEBVTT

1
00:00:00.000 --> 00:00:04.007
In this one,
we're going to create a new project.

2
00:00:04.007 --> 00:00:06.313
So we're gonna talk about mutations.

3
00:00:06.313 --> 00:00:11.075
And we're gonna soon discover some
of the shortcomings right now for

4
00:00:11.075 --> 00:00:16.014
working with beta features like
Next.js 13 and server components.

5
00:00:16.014 --> 00:00:19.496
And then we'll discuss different ways
of how we can approach some of those

6
00:00:19.496 --> 00:00:22.135
shortcomings and
what the plan is going forward as far as

7
00:00:22.135 --> 00:00:25.695
like what the team at Next.js and
React are doing to address some of those.

8
00:00:25.695 --> 00:00:27.281
But we'll get there when we get there.

9
00:00:27.281 --> 00:00:29.592
So, let's create a new project.

10
00:00:29.592 --> 00:00:33.915
So let's think about all the things we
need to be able to do a mutation, a post,

11
00:00:33.915 --> 00:00:34.909
or put or delete.

12
00:00:34.909 --> 00:00:38.794
First, we need to be able to
have an API route to hit, so

13
00:00:38.794 --> 00:00:44.044
we have to make an API route which
allows us to interact with the database.

14
00:00:44.044 --> 00:00:47.505
And we have to do API route, because
we have to go over the network to do it

15
00:00:47.505 --> 00:00:51.086
because we can only make a project once
the client has already loaded up and

16
00:00:51.086 --> 00:00:54.478
there's some interaction, so
it's inside of a client component.

17
00:00:54.478 --> 00:00:59.470
So we can't do this in a server component
because how would we tell the server

18
00:00:59.470 --> 00:01:01.818
component when to do the mutation?

19
00:01:01.818 --> 00:01:03.046
It wouldn't know.

20
00:01:03.046 --> 00:01:05.316
Server components load
data before they render.

21
00:01:05.316 --> 00:01:07.956
So we don't have
the appropriate information.

22
00:01:07.956 --> 00:01:12.004
I mean, I guess there's probably a way for
you to make a URL with a query string on

23
00:01:12.004 --> 00:01:16.175
it that you can hit that passes that query
string information to a server component

24
00:01:16.175 --> 00:01:18.791
and the server component
does the mutation there.

25
00:01:18.791 --> 00:01:23.153
But I wouldn't be surprised if somebody
figures out a framework around that.

26
00:01:23.153 --> 00:01:24.690
But we're not gonna do that.

27
00:01:24.690 --> 00:01:25.685
We're gonna keep it classic.

28
00:01:25.685 --> 00:01:27.954
And we're just gonna do
a post request on a client.

29
00:01:27.954 --> 00:01:29.821
So we need an API route.

30
00:01:29.821 --> 00:01:32.407
We need the function on the front
end that calls the API.

31
00:01:32.407 --> 00:01:35.889
And then we need the interaction with
the form that allows you to create

32
00:01:35.889 --> 00:01:36.603
the project.

33
00:01:36.603 --> 00:01:39.205
So we're gonna make all three of those and
we're gonna tie them together.

34
00:01:39.205 --> 00:01:42.489
So the first thing we're gonna do is
let's just create the function that calls

35
00:01:42.489 --> 00:01:43.940
the API that we haven't made yet.

36
00:01:43.940 --> 00:01:47.856
So in our API file in the lib folder,
we'll go there.

37
00:01:50.623 --> 00:01:53.229
And we'll make a new function.

38
00:01:53.229 --> 00:01:56.163
And we'll call this,
we'll call here createNewProject.

39
00:02:01.563 --> 00:02:03.093
And all it really needs is a name.

40
00:02:05.500 --> 00:02:08.103
And I know that because if
I go to my schema project,

41
00:02:08.103 --> 00:02:10.114
let's look at what's required here.

42
00:02:10.114 --> 00:02:13.293
A name is required so as the owner ID.

43
00:02:13.293 --> 00:02:15.544
But we're not gonna ask the user for
their ID,

44
00:02:15.544 --> 00:02:17.521
we're gonna get the ID from the cookie.

45
00:02:17.521 --> 00:02:19.846
So we don't need to ask them for that.

46
00:02:19.846 --> 00:02:24.604
Description is not required, due date is
not required, delete is required what's

47
00:02:24.604 --> 00:02:29.441
got a default, task is not required it'll
be empty array, all these have defaults.

48
00:02:29.441 --> 00:02:32.733
So really, we don't have to
give it a name at very minimal.

49
00:02:32.733 --> 00:02:33.340
So that's what we're gonna do.

50
00:02:33.340 --> 00:02:34.004
So a good name.

51
00:02:36.850 --> 00:02:39.636
That's why I put name there
as the only arguments.

52
00:02:39.636 --> 00:02:42.420
Let's go back to API and
we're just gonna use our fetcher.

53
00:02:47.101 --> 00:02:48.421
We're gonna say url.

54
00:02:48.421 --> 00:02:53.805
Let's say our

55
00:02:53.805 --> 00:03:00.534
url is gonna be for

56
00:03:00.534 --> 00:03:08.164
/api/projects.

57
00:03:16.997 --> 00:03:17.900
All right.

58
00:03:17.900 --> 00:03:19.887
Creating a project, pretty simple.

59
00:03:19.887 --> 00:03:22.840
Nothing crazy there.

60
00:03:22.840 --> 00:03:27.774
The next thing we wanna do is we're gonna
make our API handler in the API folder to

61
00:03:27.774 --> 00:03:31.990
be able to handle the requests from
that function that we just made.

62
00:03:31.990 --> 00:03:33.625
So let's do that.

63
00:03:33.625 --> 00:03:37.238
So we'll go to pages api, make a project.

64
00:03:37.238 --> 00:03:42.325
So that way it's going
to be slash api slash

65
00:03:42.325 --> 00:03:48.835
project exactly what it says here or
export a handler.

66
00:03:53.369 --> 00:03:55.096
Like that.

67
00:03:55.096 --> 00:04:00.567
We'll get our db in here,
we're gonna need some stuff for

68
00:04:00.567 --> 00:04:06.051
validating, so
we'll get our validation stuff in here.

69
00:04:06.051 --> 00:04:09.611
Because remember in our middleware,
anything that goes to api,

70
00:04:09.611 --> 00:04:11.565
our middleware doesn't touch it.

71
00:04:11.565 --> 00:04:14.655
So we have to check for a user in here.

72
00:04:14.655 --> 00:04:19.564
And the reason I did that is because
we're rather check anyway cuz we need

73
00:04:19.564 --> 00:04:22.717
to know who the user is
to scope our queries to.

74
00:04:22.717 --> 00:04:27.201
This is a multi-tenant database, as in
this database has many different users and

75
00:04:27.201 --> 00:04:30.222
we don't want one user
touching someone else's data.

76
00:04:30.222 --> 00:04:35.778
So we have to pretty much make sure all of
our queries are scoped with an ID, a owner

77
00:04:35.778 --> 00:04:41.366
or something like that to make sure that
person A isn't looking at person B data.

78
00:04:41.366 --> 00:04:45.190
So because of that, we were gonna have
to look in the database anyway for

79
00:04:45.190 --> 00:04:46.606
the user and get their ID.

80
00:04:46.606 --> 00:04:49.750
So I might as well just check
the auth while I'm there as well.

81
00:04:49.750 --> 00:04:52.097
So I just did that.

82
00:04:52.097 --> 00:04:56.860
But if you wanted the middleware to also
check for authentication so you don't

83
00:04:56.860 --> 00:05:01.425
have to do it in your api handler,
you can just comment this out right here.

84
00:05:01.425 --> 00:05:05.175
And you don't have to worry about
checking for auth in your handler.

85
00:05:05.175 --> 00:05:09.750
It'll just happen on the middleware,
but I'm not gonna do it.

86
00:05:09.750 --> 00:05:14.648
Okay, so first we're gonna get
the user with the validate,

87
00:05:14.648 --> 00:05:18.406
jwt using rec.cookies
with the cookie name.

88
00:05:18.406 --> 00:05:22.018
So we'll say user, await,

89
00:05:22.018 --> 00:05:26.391
validateJWT with req.cookies.

90
00:05:28.279 --> 00:05:36.213
And using process.env.cookie name.

91
00:05:41.543 --> 00:05:44.903
Need our req and
our response there, there we go.

92
00:05:44.903 --> 00:05:48.494
What we need to do now is
basically go ahead and

93
00:05:48.494 --> 00:05:52.745
create the project with the name and
the owner ID, and

94
00:05:52.745 --> 00:05:57.206
then we'll talk about why we may or
may not send it back.

95
00:05:57.206 --> 00:06:00.877
So I'm just gonna say,

96
00:06:00.877 --> 00:06:05.469
awaits db.project.create

97
00:06:05.469 --> 00:06:10.432
data with a name.body.name,

98
00:06:12.684 --> 00:06:16.863
And then owner ID is user.id.

99
00:06:22.207 --> 00:06:26.450
So right now if we think
about how this is gonna work,

100
00:06:26.450 --> 00:06:33.017
we're gonna put the create projects on
the last open spot of this projects grid.

101
00:06:33.017 --> 00:06:36.558
So, it's always gonna be here.

102
00:06:36.558 --> 00:06:38.531
But let's think about where
these projects come from.

103
00:06:38.531 --> 00:06:40.772
Where do these projects come from?

104
00:06:40.772 --> 00:06:42.781
How do they get on this page, right?

105
00:06:42.781 --> 00:06:47.612
If we go back to the page inside the home.

106
00:06:47.612 --> 00:06:50.955
This look familiar?

107
00:06:50.955 --> 00:06:54.626
So where does that come from,
that come in client side or server side?

108
00:06:54.626 --> 00:06:55.569
Where is that?

109
00:06:59.379 --> 00:06:59.983
&gt;&gt; Server side.

110
00:06:59.983 --> 00:07:00.882
Server side, right?

111
00:07:00.882 --> 00:07:02.581
The projects get fetch server side.

112
00:07:02.581 --> 00:07:04.331
Okay, so let's walk through this.

113
00:07:04.331 --> 00:07:06.197
Just have a thought experiment with me.

114
00:07:06.197 --> 00:07:10.929
If they're coming server side
as in when this page which is

115
00:07:10.929 --> 00:07:15.961
slash home loads up,
that's when the projects are fetched.

116
00:07:15.961 --> 00:07:20.225
And then on the same page
there's a button here that says,

117
00:07:20.225 --> 00:07:23.541
make a new project and
you make a new project.

118
00:07:23.541 --> 00:07:26.382
Where do you put the new project.

119
00:07:26.382 --> 00:07:28.985
Because those old projects were.

120
00:07:28.985 --> 00:07:29.809
What are you saying?

121
00:07:29.809 --> 00:07:30.897
&gt;&gt; Reaload them.

122
00:07:30.897 --> 00:07:33.508
&gt;&gt; Exactly you got to reload.

123
00:07:33.508 --> 00:07:35.441
Because that's what's
fetching the projects.

124
00:07:35.441 --> 00:07:37.451
You're not fetching
the projects on the client.

125
00:07:37.451 --> 00:07:40.189
This is client side,
you would just push it to the array like

126
00:07:40.189 --> 00:07:42.941
I have an array of projects right
here in the state or something.

127
00:07:42.941 --> 00:07:45.999
I'm just gonna push it in here or
if you use react query or stvr,

128
00:07:45.999 --> 00:07:48.019
it will just update the cache or just say,

129
00:07:48.019 --> 00:07:51.752
update the cache of the projects that
already have, it's all client side.

130
00:07:51.752 --> 00:07:54.113
These projects didn't come client side,

131
00:07:54.113 --> 00:07:57.599
they get fetched on server side
which only happens on a render.

132
00:07:59.642 --> 00:08:01.499
So we don't have that ability.

133
00:08:01.499 --> 00:08:06.381
And because we're not using fetch to
actually get this data we can I put

134
00:08:06.381 --> 00:08:11.349
it on an interval, we can't change
its revalidation strategy because

135
00:08:11.349 --> 00:08:16.849
Next.js doesn't know anything about
Prisma so it hasn't tapped into that.

136
00:08:16.849 --> 00:08:21.979
I think they're going to be working
with popular sdk creators to

137
00:08:21.979 --> 00:08:28.450
allow them to tie into the caching and
revalidation strategies that fetch does.

138
00:08:28.450 --> 00:08:32.927
So all of these products in the future
will support Next.js or I'm sorry,

139
00:08:32.927 --> 00:08:37.120
they'll support react eight teens
caching mechanism out the gate but

140
00:08:37.120 --> 00:08:39.410
right now that's not a possibility.

141
00:08:39.410 --> 00:08:43.789
So the only caching we get is on
the route segment based caching.

142
00:08:43.789 --> 00:08:46.526
So basically what I'm saying is
we're gonna create that project and

143
00:08:46.526 --> 00:08:47.953
it's not gonna show up on the page.

144
00:08:47.953 --> 00:08:50.882
And there's really no good way
to do it other than reloading.

145
00:08:50.882 --> 00:08:56.714
And in fact, if you go look at
Next.js's beta documentation,

146
00:08:56.714 --> 00:08:59.311
it tells you to do just that.

147
00:09:03.884 --> 00:09:06.624
So you can see here, they're fetching,

148
00:09:06.624 --> 00:09:10.709
they're creating like a new to do or
updating it or whatever.

149
00:09:10.709 --> 00:09:15.591
And then they have to refresh
the router here because all the other

150
00:09:15.591 --> 00:09:18.362
to does are coming from server side.

151
00:09:21.243 --> 00:09:25.853
But in order to do that, you have to
turn your page into a client page or

152
00:09:25.853 --> 00:09:28.090
whatever component you're in.

153
00:09:28.090 --> 00:09:29.539
I'm not doing that.

154
00:09:29.539 --> 00:09:32.756
I'm not using a client
page just to do that.

155
00:09:32.756 --> 00:09:37.320
So we can talk about different
ways you might wanna do it but

156
00:09:37.320 --> 00:09:42.454
really, at the end of the day,
the only way to do it is to refresh.

157
00:09:42.454 --> 00:09:47.216
There's probably some hacky ways around it
using the url because if you think about

158
00:09:47.216 --> 00:09:51.501
it, the only thing the server's gonna
have access to is the only state that

159
00:09:51.501 --> 00:09:53.833
I can have access to the url are a cookie.

160
00:09:53.833 --> 00:09:55.771
So I'm not gonna put it in
a cookie that seems weird.

161
00:09:55.771 --> 00:10:00.750
So you could probably do some url hacking
with crazy strings to get this to work.

162
00:10:00.750 --> 00:10:02.974
But for now, that's not the case.

163
00:10:02.974 --> 00:10:08.033
So basically the rule of thumb
would be if there's some data

164
00:10:08.033 --> 00:10:14.002
on a page which needs to be updated
because a mutation can happen to it,

165
00:10:14.002 --> 00:10:20.604
that data needs to be fetched client side,
it can't be fetched server side.

166
00:10:24.165 --> 00:10:27.050
Right?
That usually includes lists that can be

167
00:10:27.050 --> 00:10:32.085
added to or removed from because those
things needs to be updated immediately.

168
00:10:32.085 --> 00:10:35.738
So if I have a list of tasks and
I click done and it needs to go away,

169
00:10:35.738 --> 00:10:38.393
that probably needs to happen client-side.

170
00:10:38.393 --> 00:10:40.858
If I have a list of tasks where
I want to create a new one and

171
00:10:40.858 --> 00:10:44.235
I got to add a new one to the list,
that probably has to happen client-side.

172
00:10:44.235 --> 00:10:47.503
Otherwise, you got to do
what they're recommending,

173
00:10:47.503 --> 00:10:49.528
which is just refresh the router.

174
00:10:49.528 --> 00:10:51.517
But the page still has to be
client-side for that to happen.

175
00:10:51.517 --> 00:10:56.348
So pretty much client-side for anything
that needs to have instant updates for

176
00:10:56.348 --> 00:10:57.151
mutations.

177
00:10:57.151 --> 00:11:02.065
&gt;&gt; The only other thing I can think of
is if you have some kind of reactive

178
00:11:02.065 --> 00:11:06.204
front end using probably some
of the library or sockets or

179
00:11:06.204 --> 00:11:09.154
something they just tell the front end.

180
00:11:09.154 --> 00:11:11.411
&gt;&gt; Yeah, so socket is another one.

181
00:11:11.411 --> 00:11:17.637
So frameworks like elixirs,
live view I think that's what it's called.

182
00:11:17.637 --> 00:11:18.603
That's what it does.

183
00:11:18.603 --> 00:11:21.798
It uses sockets to pipe the data over.

184
00:11:21.798 --> 00:11:25.265
So maybe somebody might do something
like that with Next.js but

185
00:11:25.265 --> 00:11:28.729
that also is because they have
stayed on the on the server side but

186
00:11:28.729 --> 00:11:32.918
maybe someone can use that mechanism not
just for state but just for updates.

187
00:11:32.918 --> 00:11:37.654
Because I can definitely see that
that being a thing where you just

188
00:11:37.654 --> 00:11:39.644
feed in the updates there.

189
00:11:39.644 --> 00:11:43.359
But I don't know how that would work.

190
00:11:43.359 --> 00:11:47.044
There would still have to be some type of
client because none of the JavaScript for

191
00:11:47.044 --> 00:11:49.971
this because like the subscription
code that you would write for

192
00:11:49.971 --> 00:11:52.214
those WebSockets would
have to be on the client.

193
00:11:52.214 --> 00:11:54.142
And none of this code
gets sent to the client.

194
00:11:54.142 --> 00:11:57.855
So at the end of day,
you got to put something on the client,

195
00:11:57.855 --> 00:12:02.111
whether it's a web socket or
your data fetching, so I don't know.

196
00:12:02.111 --> 00:12:04.630
Curiously what that is
they're working on it.

197
00:12:04.630 --> 00:12:09.828
According to the docs, they are working
on this, they acknowledge it.

198
00:12:09.828 --> 00:12:14.706
Or the team is working on a new RFC For
mutating data in Next.js.

199
00:12:14.706 --> 00:12:16.164
This rfc has not been published yet.

200
00:12:16.164 --> 00:12:18.931
For now,
we recommend following this pattern.

201
00:12:18.931 --> 00:12:23.224
So, just remember that.

202
00:12:23.224 --> 00:12:27.140
We're not gonna be thinking about it,
just wanted to bring that up.

203
00:12:27.140 --> 00:12:28.014
Back to our api,

204
00:12:28.014 --> 00:12:31.891
we just need to make sure we respond
here otherwise it's just gonna hang.

205
00:12:31.891 --> 00:12:34.179
And because we're not gonna use
anything from this response,

206
00:12:34.179 --> 00:12:35.396
we can just put whatever we want.

207
00:12:42.039 --> 00:12:42.819
Cool.

