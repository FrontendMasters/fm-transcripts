WEBVTT

1
00:00:00.000 --> 00:00:04.928
So we worked on the project cards,
we talked about data fetching and

2
00:00:04.928 --> 00:00:08.385
different ways and
all the trade offs of that and

3
00:00:08.385 --> 00:00:11.769
I keep stopping my server,
turn that back on.

4
00:00:11.769 --> 00:00:17.984
Now, the thing underneath that
is going to be this task lists.

5
00:00:17.984 --> 00:00:19.773
We'll get to the new project afterwards.

6
00:00:19.773 --> 00:00:20.837
But for the task list,

7
00:00:20.837 --> 00:00:24.480
it's just going to list all the tasks
regardless of what project you're on.

8
00:00:24.480 --> 00:00:25.648
So that's what we want to do.

9
00:00:25.648 --> 00:00:28.482
So we need to first create the component.

10
00:00:28.482 --> 00:00:31.911
Then we've got to figure out
what's going to get the data.

11
00:00:31.911 --> 00:00:35.841
Is it going to be the task list
component or the task card component?

12
00:00:35.841 --> 00:00:38.271
Or is it gonna be the page
that contains it?

13
00:00:38.271 --> 00:00:41.397
Anybody want to guess before we make it?

14
00:00:41.397 --> 00:00:43.721
&gt;&gt; Page.
&gt;&gt; Why the page?

15
00:00:46.380 --> 00:00:47.115
No good reason.

16
00:00:47.115 --> 00:00:49.222
You just felt like same page [LAUGH].

17
00:00:49.222 --> 00:00:51.993
Okay, I like it.

18
00:00:51.993 --> 00:00:53.161
We'll see.
We'll find out.

19
00:00:53.161 --> 00:00:55.384
But think about it as we're, what would be
&gt;&gt; The component,

20
00:00:55.384 --> 00:00:56.446
it will be the task component.

21
00:00:56.446 --> 00:00:58.826
&gt;&gt; It would be the task component.

22
00:00:58.826 --> 00:01:00.235
Why you say that?

23
00:01:00.235 --> 00:01:04.727
&gt;&gt; Because you're gonna pass
the project ID into the task component.

24
00:01:04.727 --> 00:01:09.713
And you're gonna go and get the task for
that particular project unless

25
00:01:09.713 --> 00:01:14.300
you wanna bring the tasks down
automatically with the projects.

26
00:01:14.300 --> 00:01:16.349
&gt;&gt; No,
I think what you're saying is accurate.

27
00:01:16.349 --> 00:01:19.850
So we should entertain that.

28
00:01:19.850 --> 00:01:21.068
Let's see what happens.

29
00:01:21.068 --> 00:01:23.791
So let's go to here.

30
00:01:23.791 --> 00:01:27.101
So go to your components folder,

31
00:01:27.101 --> 00:01:32.434
make a task card component and
let's get that going.

32
00:01:32.434 --> 00:01:37.090
So, components,

33
00:01:37.090 --> 00:01:41.456
task, card and.

34
00:01:44.404 --> 00:01:49.060
We definitely want to get the data for the
task card inside the task card component

35
00:01:49.060 --> 00:01:52.016
and that's because it's
mostly self contained.

36
00:01:52.016 --> 00:01:54.587
They're all in the same UI elements.

37
00:01:54.587 --> 00:01:59.401
The page which renders the task card only
renders one task card, it doesn't render

38
00:01:59.401 --> 00:02:03.335
each individual task independently
like it did the project cards.

39
00:02:03.335 --> 00:02:06.575
The project cards were rendered
individually from the page.

40
00:02:06.575 --> 00:02:09.379
So therefore the page was
the one that was responsible for

41
00:02:09.379 --> 00:02:13.070
fetching the data, because it needed
to know how many projects to render.

42
00:02:13.070 --> 00:02:14.635
In the case of the task card,

43
00:02:14.635 --> 00:02:17.517
all the tasks are self
contained in the card itself.

44
00:02:17.517 --> 00:02:20.475
So it doesn't really It makes sense.

45
00:02:20.475 --> 00:02:25.912
It's not the page's responsibility to
have to get that data, although it could,

46
00:02:25.912 --> 00:02:31.038
and it probably wouldn't change anything
as far as like how fast it loaded up,

47
00:02:31.038 --> 00:02:35.077
but it will change what control
you have over when it comes to,

48
00:02:35.077 --> 00:02:38.048
showing a loading UI and
what order it loads.

49
00:02:41.010 --> 00:02:43.054
So let's just get started with that.

50
00:02:43.054 --> 00:02:46.696
So bringing our imports here, we're going
to-- I'm just going to copy them over.

51
00:02:46.696 --> 00:02:50.159
There's so many imports.

52
00:02:50.159 --> 00:02:53.693
Getting our user from cookie,
because you know we have to do that for

53
00:02:53.693 --> 00:02:57.413
our database queries, our cookies,
we're using a button and a card,

54
00:02:57.413 --> 00:03:01.140
our task status Edom, and our database so
let's work on that get data.

55
00:03:01.140 --> 00:03:02.800
So if we need to get data for

56
00:03:02.800 --> 00:03:07.719
all the tasks regardless of the project
what does that query gonna look like?

57
00:03:07.719 --> 00:03:09.814
Well, first we got to get the user and

58
00:03:09.814 --> 00:03:14.290
that's always just going to be from get
user from cookie passing and cookies.

59
00:03:19.329 --> 00:03:24.156
And then we need to use
Prisma to be able to get

60
00:03:24.156 --> 00:03:29.374
all the tasks that
are basically not deleted and

61
00:03:29.374 --> 00:03:34.610
excuse me,
I wanna get all the completed ones.

62
00:03:34.610 --> 00:03:38.018
So, this is just, I'm sorry, I want to get
the ones that aren't completed because if

63
00:03:38.018 --> 00:03:39.852
they're completed they
should even show up.

64
00:03:39.852 --> 00:03:41.596
It should just be open tasks basically.

65
00:03:44.959 --> 00:03:50.768
So we're gonna say const tasks

66
00:03:50.768 --> 00:03:57.024
equals await DB dot tasks dot find

67
00:03:57.024 --> 00:04:03.294
mini Where owner ID is user.id.

68
00:04:03.294 --> 00:04:07.253
Without this owner ID field I
think I mentioned this earlier,

69
00:04:07.253 --> 00:04:11.665
we'd have to query all the projects for
the owner, for the user, and

70
00:04:11.665 --> 00:04:14.426
they get all the tasks for those projects.

71
00:04:14.426 --> 00:04:16.956
And we have to do all that in JavaScript.

72
00:04:16.956 --> 00:04:18.916
Or I guess we could do that
in the database too, but

73
00:04:18.916 --> 00:04:21.032
it would be we'd have to
query the projects for that.

74
00:04:21.032 --> 00:04:26.445
So by just putting that one field on
the task, who does this task belong to?

75
00:04:26.445 --> 00:04:29.232
We can not have to query
the project's table.

76
00:04:29.232 --> 00:04:32.713
Because otherwise the TAs wouldn't
know which owner they belong to.

77
00:04:32.713 --> 00:04:36.851
They only belong to projects they
don't know who the person is.

78
00:04:36.851 --> 00:04:41.708
But now they do, they do know who
that person is, is the owner.

79
00:04:41.708 --> 00:04:46.836
So we got that, but not all right.

80
00:04:46.836 --> 00:04:47.601
So how that works?

81
00:04:47.601 --> 00:04:50.702
Yeah, so went down to much, silverware.

82
00:04:50.702 --> 00:04:57.469
So not status task status dot completed.

83
00:04:57.469 --> 00:05:01.306
So we don't want the completed ones and

84
00:05:01.306 --> 00:05:05.386
we don't want the ones that are deleted.

85
00:05:05.386 --> 00:05:07.232
All right, delete false, sorry.

86
00:05:14.420 --> 00:05:16.469
No, I think I will delete it true when it.

87
00:05:18.659 --> 00:05:20.916
No, it's delete false.

88
00:05:20.916 --> 00:05:24.996
I think we'll find out I forgot
how I set it up in the schema.

89
00:05:24.996 --> 00:05:27.421
We'll either get it or we won't get it.

90
00:05:27.421 --> 00:05:32.457
And then I'm gonna limit how many I get,
so I'm gonna put take and

91
00:05:32.457 --> 00:05:36.134
then a number,
which is basically like limit.

92
00:05:36.134 --> 00:05:38.902
So take the first five.

93
00:05:38.902 --> 00:05:39.891
That's what that's saying.

94
00:05:39.891 --> 00:05:40.710
Only want five.

95
00:05:46.331 --> 00:05:49.394
And then I want to sort them and
I can use order by for that.

96
00:05:49.394 --> 00:05:54.721
So I can say order by and
then they have a due property.

97
00:05:54.721 --> 00:05:59.742
So when they're due and
I want that to ascend.

98
00:05:59.742 --> 00:06:02.820
So the date gets older
as the list goes down.

99
00:06:02.820 --> 00:06:07.131
So the one that's due the soonest
will be at the top of the list.

100
00:06:07.131 --> 00:06:09.759
&gt;&gt; So
we're not specifying which project yet

101
00:06:09.759 --> 00:06:12.172
this belongs to when we make the query.

102
00:06:12.172 --> 00:06:15.307
&gt;&gt; Yeah, so
we just want to get all the open tasks for

103
00:06:15.307 --> 00:06:17.537
this user regardless of project.

104
00:06:17.537 --> 00:06:20.149
&gt;&gt; We're limiting it to five.

105
00:06:20.149 --> 00:06:25.397
&gt;&gt; Yeah, we only want to get
the first five projects for

106
00:06:25.397 --> 00:06:31.019
this user that is not completed
regardless of project.

107
00:06:31.019 --> 00:06:33.114
&gt;&gt; All the first five tasks
regardless of the project.

108
00:06:33.114 --> 00:06:36.117
&gt;&gt; Yep.

109
00:06:36.117 --> 00:06:40.644
&gt;&gt; And so the deleted we want
is that like a double negative?

110
00:06:40.644 --> 00:06:44.407
&gt;&gt; Yeah, I think this needs to be true,
but we're gonna find out.

111
00:06:44.407 --> 00:06:46.366
I had it false for a reason and
I don't remember why.

112
00:06:46.366 --> 00:06:49.222
So I'm gonna leave it false until
it doesn't return something and

113
00:06:49.222 --> 00:06:51.369
then we'll put true cuz it
makes sense to be true.

114
00:06:51.369 --> 00:06:53.699
But I think I had it false for a reason.

115
00:06:53.699 --> 00:06:57.725
I don't remember.

116
00:06:57.725 --> 00:07:01.305
Yes.
&gt;&gt; So is there a reason why we won't do

117
00:07:01.305 --> 00:07:06.324
find all the tasks or is this for
just the initial load?

118
00:07:06.324 --> 00:07:08.012
&gt;&gt; Yeah, this is just the initial load.

119
00:07:08.012 --> 00:07:10.562
This is not all the tasks for a project.

120
00:07:10.562 --> 00:07:13.230
That's when you click on a project.

121
00:07:13.230 --> 00:07:15.942
When you click on one of these, then
we'll get all the tasks for that project.

122
00:07:15.942 --> 00:07:18.004
Yeah, this is one that's
gonna be at the bottom.

123
00:07:18.004 --> 00:07:25.309
That's just like here are your
next five do task that's it.

124
00:07:25.309 --> 00:07:30.216
Regardless of project that they're
on these are the five that are due

125
00:07:30.216 --> 00:07:32.932
based off the due date that they have.

126
00:07:37.213 --> 00:07:38.449
Cool.
Any other questions?

127
00:07:43.429 --> 00:07:46.676
No?
Okay, so we got that.

128
00:07:46.676 --> 00:07:51.180
We can return the task,
and that's what we'll do.

129
00:07:51.180 --> 00:07:57.924
We'll return the task here, we're going to
make our task card component Like this.

130
00:08:02.794 --> 00:08:07.705
Async and then we're going to

131
00:08:07.705 --> 00:08:13.012
say task equals await get data.

132
00:08:13.012 --> 00:08:17.005
So typically we'd probably stop right
here as far as like the data goes.

133
00:08:17.005 --> 00:08:22.294
But I know we're going to reuse this
task cart in the project page when you

134
00:08:22.294 --> 00:08:28.116
click on these projects and it shows you
all the tasks will just reuse that card.

135
00:08:28.116 --> 00:08:32.958
And that is going to have a different
scenario on which it fetches data because

136
00:08:32.958 --> 00:08:34.596
that page as you will see,

137
00:08:34.596 --> 00:08:38.559
is gonna be able to fetch a project
which can already get tasks.

138
00:08:38.559 --> 00:08:39.926
So, it's already gonna have tests.

139
00:08:39.926 --> 00:08:44.241
So I won't need the task
card to also get tasks.

140
00:08:44.241 --> 00:08:47.558
When the project page itself will
already have the task for that project.

141
00:08:47.558 --> 00:08:50.258
So, I wouldn't want to get the data here.

142
00:08:50.258 --> 00:08:53.430
So, I'm gonna to make this task
card take in tasks as well.

143
00:08:53.430 --> 00:08:59.086
As a prop, if you already have tasks,
then you can take them in.

144
00:08:59.086 --> 00:09:01.972
I'm going to rename this to data.

145
00:09:01.972 --> 00:09:05.435
And then if you already have tasks,

146
00:09:05.435 --> 00:09:10.524
then I don't wanna run this
I'll say tasks or that.

147
00:09:19.036 --> 00:09:21.745
So either you give us some tasks or
we'll just go get the tasks

148
00:09:31.749 --> 00:09:33.815
Does that make sense?

149
00:09:33.815 --> 00:09:34.335
Yeah.

150
00:09:34.335 --> 00:09:38.836
Like I said, you can pretty much use
await anywhere you do synchronous code,

151
00:09:38.836 --> 00:09:40.367
and it just kind of works.

152
00:09:40.367 --> 00:09:44.004
If you wrap a parentheses around it,
you can even do like what comes after it.

153
00:09:44.004 --> 00:09:46.722
It's kind of like if get
data returned an object,

154
00:09:46.722 --> 00:09:50.877
you can put parentheses around it and
start accessing the properties on it.

155
00:09:50.877 --> 00:09:52.599
It's kind of nuts.

156
00:09:52.599 --> 00:09:54.794
Okay, all right.

157
00:09:54.794 --> 00:09:56.916
We got our data.

158
00:09:56.916 --> 00:09:59.503
Everything after this is pretty much.

159
00:10:01.929 --> 00:10:04.832
Just standard JSX there's
not much going on here.

160
00:10:04.832 --> 00:10:09.266
So I'm just gonna put this in here and
then we can talk about

161
00:10:09.266 --> 00:10:14.798
the interpolated parts, but
they're not really that interesting so.

162
00:10:22.061 --> 00:10:22.861
Keep going.

163
00:10:25.075 --> 00:10:30.338
Okay, so interpolated parts here Here
we have this thing called title.

164
00:10:30.338 --> 00:10:33.480
So we're gonna have task
card take a title as well.

165
00:10:37.027 --> 00:10:39.395
We have a button that
doesn't really do anything.

166
00:10:39.395 --> 00:10:42.005
There's no unclick here,
and interpolated values.

167
00:10:42.005 --> 00:10:47.220
All we're doing here is looping over
the data, which is an array of tasks.

168
00:10:47.220 --> 00:10:51.804
And we're just making a new task
here with the name and description.

169
00:10:51.804 --> 00:10:52.374
That's it.

170
00:10:52.374 --> 00:10:54.679
If there are no tasks,
we just show a div that says no tasks.

