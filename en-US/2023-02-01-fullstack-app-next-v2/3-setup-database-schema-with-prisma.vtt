WEBVTT

1
00:00:00.000 --> 00:00:02.895
Now let's write a higher schema.

2
00:00:02.895 --> 00:00:07.612
So I'm not gonna pretend that I'm
some database admin expert that knows

3
00:00:07.612 --> 00:00:10.321
everything about optimizing indexes and

4
00:00:10.321 --> 00:00:14.434
things like that because I'm not,
that's just not what I do.

5
00:00:14.434 --> 00:00:18.756
I'm definitely more of a product engineer
and I kind of just work with whatever

6
00:00:18.756 --> 00:00:22.095
tools I need to build something
that people are addicted to or

7
00:00:22.095 --> 00:00:23.749
at least I like to think that.

8
00:00:23.749 --> 00:00:29.559
So this is just how I think about
modeling data from my perspective.

9
00:00:29.559 --> 00:00:33.606
What I like to do is think about all
the information that's on the screen and

10
00:00:33.606 --> 00:00:35.542
kind of walk backwards from there.

11
00:00:35.542 --> 00:00:39.737
So if I have a design from a designer,
I can look at that design and

12
00:00:39.737 --> 00:00:43.236
look at all the information
that's in that design and

13
00:00:43.236 --> 00:00:46.913
that can help me derive
the models that I need to create.

14
00:00:46.913 --> 00:00:49.673
And then there's auxiliary models and
connections and

15
00:00:49.673 --> 00:00:51.616
relationships that exist from there.

16
00:00:51.616 --> 00:00:54.122
And then there's things that
aren't on the screen but

17
00:00:54.122 --> 00:00:57.347
still need to be maintained in
the database and that's other things.

18
00:00:57.347 --> 00:01:00.737
But for the most part, when it comes to
the product, it's what's on the screen and

19
00:01:00.737 --> 00:01:02.298
how do you walk backwards from there?

20
00:01:02.298 --> 00:01:05.558
And then from there, it's, well,
what do the queries look like?

21
00:01:05.558 --> 00:01:06.499
Because that's big too.

22
00:01:06.499 --> 00:01:09.962
Depending on the queries you write, that's
gonna determine what indexes you create,

23
00:01:09.962 --> 00:01:13.115
because that's why you have indexes in
the first place is to optimise queries.

24
00:01:13.115 --> 00:01:14.851
And that's pretty much where I tap out,

25
00:01:14.851 --> 00:01:17.517
anything beyond that I let
the database experts handle that.

26
00:01:17.517 --> 00:01:19.853
But we won't even get there,
so we're good.

27
00:01:19.853 --> 00:01:23.786
Just wanted to give you my thought process
on how I model data because you might go

28
00:01:23.786 --> 00:01:26.974
through this and be, [SOUND] I
would have done that differently.

29
00:01:26.974 --> 00:01:29.386
But now you know how I think about it.

30
00:01:29.386 --> 00:01:31.152
That's why I did it the way that I did it.

31
00:01:31.152 --> 00:01:32.902
So anyway, let's do it.

32
00:01:32.902 --> 00:01:39.624
If we just take a quick look at what we
have here, It's not a complicated schema.

33
00:01:39.624 --> 00:01:44.062
I mean, it's gonna be a pretty
simple project task management app,

34
00:01:44.062 --> 00:01:48.976
where we have a user and the user has
projects and those projects have tasks.

35
00:01:48.976 --> 00:01:50.432
And that's mostly it.

36
00:01:50.432 --> 00:01:53.430
There's a lot of relationships between
the three, but that's mostly it.

37
00:01:53.430 --> 00:01:57.174
So what we can do now is we can
go ahead and create this user.

38
00:01:57.174 --> 00:02:01.152
So the first thing I'm
gonna do is make an ID and

39
00:02:01.152 --> 00:02:05.851
go through and
kind of get all the other stuff in there.

40
00:02:05.851 --> 00:02:11.627
So you can say Model User, like I said,
this is an ID it's a type of string.

41
00:02:11.627 --> 00:02:16.114
You can also do integer if you prefer and
have your user IDs be numbers,

42
00:02:16.114 --> 00:02:19.097
I don't like that, so
I'm gonna say String.

43
00:02:20.219 --> 00:02:24.821
And them gonna say this is an id,
like that.

44
00:02:26.233 --> 00:02:28.481
And then I can say default.

45
00:02:28.481 --> 00:02:31.432
And I'm gonna use uuid.

46
00:02:31.432 --> 00:02:36.761
So this is just basically making
the user IDs strings of type uuid.

47
00:02:36.761 --> 00:02:42.622
A uuid is a type of
universally unique identifier.

48
00:02:42.622 --> 00:02:45.525
It's a formatted string
that looks a certain way,

49
00:02:45.525 --> 00:02:49.387
that's pretty much guaranteed to
be unique, that's what UID is.

50
00:02:49.387 --> 00:02:53.177
So I'm making my user IDs UIDs.

51
00:02:53.177 --> 00:02:57.467
Say created at, of course,
this is gonna be a date time, and

52
00:02:57.467 --> 00:02:59.497
it's gonna default to now.

53
00:03:04.941 --> 00:03:07.297
Then I can say updated at.

54
00:03:07.297 --> 00:03:11.837
That's also gonna be a date time, and
then there's a special updated at.

55
00:03:11.837 --> 00:03:15.250
So we don't have to touch it,
it just updates that field for

56
00:03:15.250 --> 00:03:18.068
us automatically whenever
we touch this model.

57
00:03:20.245 --> 00:03:25.426
Okay, then the users are gonna have
an email, which is gonna be a type string.

58
00:03:25.426 --> 00:03:30.233
First name, which is also a string,
a last name.

59
00:03:32.365 --> 00:03:33.710
We have a password.

60
00:03:36.899 --> 00:03:40.007
Password,.that's a string.

61
00:03:40.007 --> 00:03:41.533
What else do we have on here?

62
00:03:42.842 --> 00:03:45.340
Projects and tasks, we'll, get to that
in a minute when we do relations.

63
00:03:45.340 --> 00:03:49.706
So for user, for the most part,
that's pretty good.

64
00:03:49.706 --> 00:03:54.367
So then we'll keep it moving and
we'll say, model project, and

65
00:03:54.367 --> 00:03:58.871
we can just copy these first
three things here, put them here.

66
00:03:58.871 --> 00:04:01.647
Everything's gonna have an ID,
a create app, an updated app, so

67
00:04:01.647 --> 00:04:02.995
I'm just gonna put that there.

68
00:04:07.454 --> 00:04:11.153
And a project has a name, that's a string.

69
00:04:11.153 --> 00:04:13.631
What else would a project have?

70
00:04:13.631 --> 00:04:16.766
It might have a status.

71
00:04:16.766 --> 00:04:17.732
No, we have the owner stuff.

72
00:04:17.732 --> 00:04:21.619
Yeah, so a project will also
have who owns the project.

73
00:04:21.619 --> 00:04:23.085
Who does it belong to?

74
00:04:23.085 --> 00:04:25.917
If we don't have this, when we do a query,

75
00:04:25.917 --> 00:04:30.112
we won't know what project belongs
to the user that signed in.

76
00:04:30.112 --> 00:04:32.963
We'll just be getting
random people's projects.

77
00:04:32.963 --> 00:04:38.042
So we can say owner ID like this and
that's gonna be a string.

78
00:04:38.042 --> 00:04:39.364
And then we can say owner.

79
00:04:41.388 --> 00:04:44.553
Is going to be a user like that.

80
00:04:44.553 --> 00:04:52.521
And then we can say it's gonna have
a relation with these fields of ownerId,

81
00:04:52.521 --> 00:04:58.260
that maps to the reference
on the user's id like that.

82
00:04:58.260 --> 00:05:00.241
And it's still gonna throw
me this little error here.

83
00:05:01.729 --> 00:05:05.788
Basically this is saying is, I wanna have
an owner field whose type is user and

84
00:05:05.788 --> 00:05:13.014
it's related to A user ID and
it maps to the owner ID over here.

85
00:05:13.014 --> 00:05:16.542
So this owner ID is gonna
map to the ID on the user.

86
00:05:16.542 --> 00:05:20.383
And it's freaking out right now it's,
hey you gotta go to the other side this

87
00:05:20.383 --> 00:05:24.184
relationship add something there and
we could do that but I'm really lazy.

88
00:05:24.184 --> 00:05:27.535
So I'm gonna do it the lazy way,

89
00:05:27.535 --> 00:05:33.632
you can just run MPX Prisma format and
it'll do it for you.

90
00:05:33.632 --> 00:05:38.064
So I did that and you can see right here
added project project, but I'm gonna

91
00:05:38.064 --> 00:05:42.719
lowercase that and call it projects
plural because it's an array of projects.

92
00:05:42.719 --> 00:05:46.027
It's a one to many relationship, so
I'm just gonna change that to projects.

93
00:05:46.027 --> 00:05:47.630
And keep it the type project array.

94
00:05:54.852 --> 00:05:57.662
All right,
keep it moving with the project.

95
00:05:57.662 --> 00:06:01.479
What else do we have on here for
the project?

96
00:06:01.479 --> 00:06:04.791
We have a description, a due.

97
00:06:04.791 --> 00:06:05.974
We got some tasks.

98
00:06:05.974 --> 00:06:08.212
And then we got whether it's deleted or
not, so let's do that.

99
00:06:08.212 --> 00:06:13.658
So for description, We can say String.

100
00:06:13.658 --> 00:06:17.555
Whether it's due or not,
that's gonna be a date time.

101
00:06:17.555 --> 00:06:21.552
But maybe we don't want every single
one of these to have a description.

102
00:06:21.552 --> 00:06:25.744
Maybe that's optional, so you can put
a question mark after the type and

103
00:06:25.744 --> 00:06:27.199
now it's not required.

104
00:06:27.199 --> 00:06:31.485
By default every field is required
unless you put a question mark after it.

105
00:06:31.485 --> 00:06:35.173
So I'm saying the description is optional,
the due date is optional,

106
00:06:35.173 --> 00:06:38.859
not all projects have a description,
not all projects have a due date,

107
00:06:38.859 --> 00:06:42.130
maybe you have an open project
that never ends, so you do that.

108
00:06:44.409 --> 00:06:47.243
And then we'll get back to the tasks
when we do the relationships and

109
00:06:47.243 --> 00:06:48.546
now we could just do delete it.

110
00:06:48.546 --> 00:06:53.264
So whether this was deleted or not, this
is something that a lot of people do for

111
00:06:53.264 --> 00:06:54.201
soft deletes.

112
00:06:54.201 --> 00:06:55.529
You ever heard of a soft delete?

113
00:06:55.529 --> 00:06:59.201
Basically means we're never actually
gonna remove it from the database.

114
00:06:59.201 --> 00:07:04.168
We're just gonna flag it, so
we can filter it out on our queries.

115
00:07:04.168 --> 00:07:07.503
So that way if you ever restore your
account or if you wanna restore this,

116
00:07:07.503 --> 00:07:08.880
it's always there, right?

117
00:07:08.880 --> 00:07:09.970
That's how they get away with that.

118
00:07:09.970 --> 00:07:13.879
So, that's why your data is never deleted,
it's just flagged.

119
00:07:13.879 --> 00:07:16.189
All right, so deleted.

120
00:07:16.189 --> 00:07:18.442
We can say that's a boolean and

121
00:07:18.442 --> 00:07:23.767
it defaults to false And
then we'll keep going.

122
00:07:23.767 --> 00:07:25.077
We'll do another one for task.

123
00:07:26.879 --> 00:07:29.069
And like I said, we can copy these three.

124
00:07:29.069 --> 00:07:32.423
Actually, we can probably copy these
four right here, put that in there.

125
00:07:39.013 --> 00:07:43.963
And then tasks have a status,
a task can be started, completed,

126
00:07:43.963 --> 00:07:48.202
whatever other status those
are gonna be called enums.

127
00:07:48.202 --> 00:07:50.956
They're basically a set of different
values that never change and

128
00:07:50.956 --> 00:07:52.438
we wanna be able to use one of those.

129
00:07:52.438 --> 00:07:58.420
So we can have an enum type here and
we can call this task status.

130
00:07:58.420 --> 00:08:01.471
Like that and
then we can just add those statuses.

131
00:08:01.471 --> 00:08:06.734
So I have them here, not started,
started completed like that.

132
00:08:09.438 --> 00:08:13.187
Yes
&gt;&gt; If a person said they'd rather soft

133
00:08:13.187 --> 00:08:17.862
delete just because you can implement
undo right away if the user deletes.

134
00:08:17.862 --> 00:08:22.821
&gt;&gt; Yeah, 100%, so, yeah,
that's why they have the soft delete so

135
00:08:22.821 --> 00:08:26.959
you can get those people to come back and
take their money.

136
00:08:26.959 --> 00:08:29.578
So, that's why it's there

137
00:08:34.322 --> 00:08:38.676
All right, and then for status we'll say,
let me actually uppercase this.

138
00:08:41.478 --> 00:08:44.175
There we go for
status is gonna be type task status.

139
00:08:44.175 --> 00:08:48.363
And we can say it's gonna default
to just one of these which will

140
00:08:48.363 --> 00:08:51.300
probably just be not started, there we go.

141
00:08:53.235 --> 00:09:00.466
A task belongs to a project, so we can
say projectId, we'll just type String.

142
00:09:00.466 --> 00:09:05.376
We can say projects,
we'll just type projects that has

143
00:09:05.376 --> 00:09:09.240
a relation to the field
called project ID and

144
00:09:09.240 --> 00:09:13.116
mapping that to the field
of ID on a project.

145
00:09:16.735 --> 00:09:21.155
And because I'm lazy, I'm just gonna go
to my terminal, hit up and then enter,

146
00:09:21.155 --> 00:09:21.942
format that.

147
00:09:21.942 --> 00:09:25.833
And it's gonna add the task
to our project but

148
00:09:25.833 --> 00:09:30.142
it's plural I'm gonna
lowercase it call it tasks

149
00:09:36.224 --> 00:09:38.683
Okay, and what else do we have on a task?

150
00:09:38.683 --> 00:09:41.930
I know I'm missing something, so yeah,
I think yeah, tasks also have owners.

151
00:09:41.930 --> 00:09:46.080
I'm just gonna put that on there and then
description, due date and also delete.

152
00:09:46.080 --> 00:09:46.706
So let's do that.

153
00:09:46.706 --> 00:09:49.326
So we'll put the owner on here.

154
00:09:49.326 --> 00:09:53.876
I think there's a query where there's
a view where you wanna get all the tasks

155
00:09:53.876 --> 00:09:57.177
that a user created no matter
what project they're on.

156
00:09:57.177 --> 00:10:01.001
So you would need an owner field here
because if you didn't have this field,

157
00:10:01.001 --> 00:10:04.848
the only query you could make to get all
the tasks regardless of the project.

158
00:10:04.848 --> 00:10:10.183
So to first get the all the tasks for
every project, and then add them together.

159
00:10:10.183 --> 00:10:14.255
Just adding this one field saves you that,
so that's why we have that here.

160
00:10:14.255 --> 00:10:18.291
So this is why I think it's important to
look at the data that's on the design so

161
00:10:18.291 --> 00:10:22.718
you can kind of understand what fields you
have to add and relationships and whatnot.

162
00:10:22.718 --> 00:10:25.022
So we got that.

163
00:10:25.022 --> 00:10:29.346
We also need to do whether this is due or
not.

164
00:10:29.346 --> 00:10:31.125
Date time.

165
00:10:31.125 --> 00:10:33.642
This also has a status.

166
00:10:35.167 --> 00:10:36.903
Does it have a status?

167
00:10:36.903 --> 00:10:38.631
Yeah, no, we already did status.

168
00:10:38.631 --> 00:10:42.215
It has it deleted And

169
00:10:42.215 --> 00:10:47.130
this is Boolean and
it's gonna default to false.

170
00:10:47.130 --> 00:10:52.445
Gonna run this again a format that,
gonna go back up to our owner

171
00:10:52.445 --> 00:10:58.576
you can see it says task lowercase
that pluralize it, now we have tasks.

172
00:11:04.544 --> 00:11:06.410
I think for
the most part I got everything in there.

173
00:11:06.410 --> 00:11:11.328
The only other stuff I have in here are
these unique things, these index things.

174
00:11:11.328 --> 00:11:13.831
So I'll put these in here and
I'll talk about them.

175
00:11:13.831 --> 00:11:17.369
Basically what I'm doing here,
for instance on the project.

176
00:11:19.617 --> 00:11:22.728
This is telling Prisma that we wanna

177
00:11:22.728 --> 00:11:27.196
create a unique constraint
on this complex field.

178
00:11:27.196 --> 00:11:30.447
So we're taking the combination
of an owner ID and a name and

179
00:11:30.447 --> 00:11:32.082
saying that has to be unique.

180
00:11:32.082 --> 00:11:36.957
This is saying a project owned by
one owner can't have the same name,

181
00:11:36.957 --> 00:11:40.586
so you can't have two
projects with the same name.

182
00:11:40.586 --> 00:11:41.652
That's what this is saying.

183
00:11:41.652 --> 00:11:44.807
And then this is an index.

184
00:11:44.807 --> 00:11:48.487
It's not it's not a unique constraint, but
I am telling it to set aside an index.

185
00:11:48.487 --> 00:11:50.935
Because I'm probably gonna
write a query for this.

186
00:11:50.935 --> 00:11:55.223
I'm probably gonna say I need to find
a project that belongs to this owner but

187
00:11:55.223 --> 00:11:55.963
has this ID.

188
00:11:55.963 --> 00:11:57.611
So I wanna write an index for that.

189
00:11:57.611 --> 00:12:02.400
Otherwise, it'll scan the entire
projects table looking for a project.

190
00:12:02.400 --> 00:12:05.031
So it's based off the information
that you're looking for, so

191
00:12:05.031 --> 00:12:06.405
that's why that index is there.

192
00:12:09.323 --> 00:12:11.746
But sometimes you don't really
know what these are ahead of time.

193
00:12:11.746 --> 00:12:14.858
Indexing strategy happens in production,

194
00:12:14.858 --> 00:12:18.225
after production,
as you build out features.

195
00:12:18.225 --> 00:12:22.368
So sometimes you just don't know until you
understand what the queries are after you

196
00:12:22.368 --> 00:12:24.833
write them so
you don't get it right all the time.

197
00:12:24.833 --> 00:12:27.651
I have to go back and
write these after I wrote the queries,

198
00:12:27.651 --> 00:12:29.792
cause I didn't know if I needed them or
not.

199
00:12:32.418 --> 00:12:37.236
And I probably have some others for,
yeah, for the task.

200
00:12:37.236 --> 00:12:42.145
So, this one is just saying, I wanna
index the owner ID of a task because I'm

201
00:12:42.145 --> 00:12:44.755
probably gonna write a query that says,

202
00:12:44.755 --> 00:12:47.922
give me all the tasks that
belongs to this owner.

203
00:12:47.922 --> 00:12:51.220
So I need an index there,
otherwise, it'll be,

204
00:12:51.220 --> 00:12:54.922
it'll still work without
the index it'll just be bad.

205
00:12:54.922 --> 00:12:59.468
Some databases will allow you to
turn on the ability to have an error

206
00:12:59.468 --> 00:13:02.728
thrown if you make a query
that's not indexed.

207
00:13:02.728 --> 00:13:06.428
I know you can do that in Mongo, you can
say throw me an error if you detect me

208
00:13:06.428 --> 00:13:09.312
making a query that isn't
taking advantage of an index.

209
00:13:09.312 --> 00:13:13.037
And then that forces you to go write the
index and that's how I learned how to do

210
00:13:13.037 --> 00:13:15.746
indexing was just let Mongo
scream at me until I go do it.

