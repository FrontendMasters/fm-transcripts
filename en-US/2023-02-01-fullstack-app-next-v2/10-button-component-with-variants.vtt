WEBVTT

1
00:00:00.060 --> 00:00:01.690
Well, we still got some
more components to make.

2
00:00:01.690 --> 00:00:05.399
So before we can actually make
the form for the off page and stuff,

3
00:00:05.399 --> 00:00:09.260
we need a button, we need an input,
we need some more of that stuff.

4
00:00:09.260 --> 00:00:10.880
So let's do that.

5
00:00:10.880 --> 00:00:12.580
So we're gonna make a button component.

6
00:00:14.660 --> 00:00:20.120
So we go into components and make a new
file called Button.tsx const button

7
00:00:26.451 --> 00:00:28.510
And we're just gonna
default export this button.

8
00:00:33.744 --> 00:00:35.450
And it's just gonna be
like a generic UI button.

9
00:00:37.050 --> 00:00:40.414
But this one's gonna use some more
advanced CSS stuff that I've been kind

10
00:00:40.414 --> 00:00:41.940
of using it which is kind of cool.

11
00:00:43.450 --> 00:00:48.350
It allows you to set different
variants for components based off

12
00:00:48.350 --> 00:00:52.900
the props that are passed in,
which I think is really cool.

13
00:00:52.900 --> 00:00:55.860
And this is something
that I was looking for.

14
00:00:55.860 --> 00:00:59.522
I was trying to figure out how to do,
because if you don't have something this,

15
00:00:59.522 --> 00:01:02.820
you end up doing errors
everywhere in a class name.

16
00:01:02.820 --> 00:01:07.372
To toggle classes on or off,
depending on the value of a property,

17
00:01:07.372 --> 00:01:10.250
which to me is very sloppy and cloudy.

18
00:01:10.250 --> 00:01:14.325
So we can use a combination of
this tool that you'll see and

19
00:01:14.325 --> 00:01:19.316
other ones to allow our button to
have different variations very easily

20
00:01:19.316 --> 00:01:23.660
without us having to figure out
the conditionals ourselves.

21
00:01:23.660 --> 00:01:26.960
So that's what we're gonna do.

22
00:01:26.960 --> 00:01:28.290
But first, let's just make our button.

23
00:01:28.290 --> 00:01:33.660
So if you look down here, it's really just
a button that just renders its children.

24
00:01:33.660 --> 00:01:34.690
It's nothing special.

25
00:01:34.690 --> 00:01:35.960
So we'll start there.

26
00:01:35.960 --> 00:01:42.185
Let's do that.
So this thing takes children,

27
00:01:42.185 --> 00:01:46.970
and renders a button.

28
00:01:46.970 --> 00:01:50.560
So we'll start there,
very simple and conspicuous.

29
00:01:50.560 --> 00:01:54.018
And then because we're going to have
different types of buttons, we're going to

30
00:01:54.018 --> 00:01:58.030
have like a primary button, a big button,
a small button, form submit button.

31
00:01:58.030 --> 00:02:01.493
We have to expose those changes
as props so we can toggle,

32
00:02:01.493 --> 00:02:04.030
you don't change them if we pass them in.

33
00:02:04.030 --> 00:02:08.920
And that's where this CVA comes in.

34
00:02:08.920 --> 00:02:10.950
It's such a weird name and
I'll explain it in a minute.

35
00:02:10.950 --> 00:02:17.590
So we're going to import CVA, and
we're gonna call it various props.

36
00:02:17.590 --> 00:02:18.480
This is for TypeScript.

37
00:02:18.480 --> 00:02:22.210
Actually, let's get the autocomplete from.

38
00:02:22.210 --> 00:02:23.807
Class variance authority.

39
00:02:23.807 --> 00:02:26.521
So why is it called class
variance authority?

40
00:02:26.521 --> 00:02:31.381
The person that made it love that show the
Loki show on Disney where I don't know if

41
00:02:31.381 --> 00:02:35.955
anyone has ever seen that show, where
it's like they were like the variance

42
00:02:35.955 --> 00:02:39.970
authority or something like that so
that's why he called it that.

43
00:02:39.970 --> 00:02:40.980
And it's for classes.

44
00:02:40.980 --> 00:02:42.990
So he's put the word class in front of it.

45
00:02:42.990 --> 00:02:44.410
That's literally why it's called that.

46
00:02:44.410 --> 00:02:46.470
It's so weird.

47
00:02:46.470 --> 00:02:50.004
And then he couldn't get the the package
name called CVA because there's

48
00:02:50.004 --> 00:02:53.481
already a package name called CVA,
and the guy wouldn't give it to him,

49
00:02:53.481 --> 00:02:55.510
so he just had to spell it out.

50
00:02:55.510 --> 00:02:56.380
So that's why it's called it.

51
00:02:56.380 --> 00:02:57.890
It looks so official.

52
00:02:57.890 --> 00:03:01.292
It looks like the government
made this package, but it's not,

53
00:03:01.292 --> 00:03:05.900
it's just some random guy who really likes
that Loki show and couldn't get CVA.

54
00:03:05.900 --> 00:03:10.360
So yeah, cuz I went down a rabbit hole,
I was like, what is this?

55
00:03:10.360 --> 00:03:12.260
Why are we doing this?

56
00:03:12.260 --> 00:03:13.119
So that's why it's that.

57
00:03:15.834 --> 00:03:23.254
And then, yeah, we'll import FC for
types from, From types for React.

58
00:03:27.295 --> 00:03:32.150
All right, so what we wanna do
here is actually quite powerful.

59
00:03:32.150 --> 00:03:36.422
So what you do is you can use
CVA to define some default

60
00:03:36.422 --> 00:03:41.350
classes that get applied to
every button in this array.

61
00:03:41.350 --> 00:03:45.975
And then what you can say is like,
all right, I'm going to make some variants

62
00:03:45.975 --> 00:03:50.170
of this button, and you can say,
if I want a prop called intent.

63
00:03:50.170 --> 00:03:52.860
So my button's going to
take a prop called intent.

64
00:03:52.860 --> 00:03:55.211
And if the value of intent is primary,
apply these classes.

65
00:03:55.211 --> 00:03:56.660
If the value of intent is secondary,
apply these classes.

66
00:04:03.150 --> 00:04:06.678
If the value of intent is text,
apply these classes and

67
00:04:06.678 --> 00:04:09.350
that's on top of the default classes.

68
00:04:09.350 --> 00:04:12.410
And then the same thing is down here.

69
00:04:12.410 --> 00:04:15.440
I wanna make a prop called size.

70
00:04:15.440 --> 00:04:20.010
If the value of size is small, apply these
classes so forth, so forth, so forth.

71
00:04:20.010 --> 00:04:23.820
And then here is the default variance
if someone doesn't pass one at.

72
00:04:25.970 --> 00:04:30.560
So this is literally the same thing if you
went and just hit turn area everywhere.

73
00:04:30.560 --> 00:04:37.270
If prop dot size equals small,
like, it gets so sloppy.

74
00:04:37.270 --> 00:04:38.610
So we're gonna do this.

75
00:04:38.610 --> 00:04:40.176
And really, if you were looking at CVA,

76
00:04:40.176 --> 00:04:43.400
it's just a function that just concatenate
strings, it doesn't do anything.

77
00:04:43.400 --> 00:04:46.230
It's just like a string
manipulation library.

78
00:04:46.230 --> 00:04:47.920
It has nothing to do with React or
classes.

79
00:04:47.920 --> 00:04:51.670
It just combined strings,
which is really all you need.

80
00:04:51.670 --> 00:04:53.450
So let's do that.

81
00:04:53.450 --> 00:04:58.529
So we'll say button classes

82
00:04:58.529 --> 00:05:03.183
is CVA with NRA like that,

83
00:05:03.183 --> 00:05:10.165
those are default classes like that and

84
00:05:10.165 --> 00:05:16.099
then we need to make some variants

85
00:05:18.474 --> 00:05:22.625
So we'll say variants, and then for
the variants, I'm gonna have intent.

86
00:05:25.820 --> 00:05:27.000
And I'm gonna have one called primary.

87
00:05:28.900 --> 00:05:32.238
And for primary,
I wanna apply these primary classes, so

88
00:05:32.238 --> 00:05:35.870
background-violet, text-blue,
border-transparent.

89
00:05:35.870 --> 00:05:37.890
These are all Tailwind classes.

90
00:05:37.890 --> 00:05:41.340
And this is why I think Tailwind
shines when you do it like this.

91
00:05:41.340 --> 00:05:45.387
You can make a whole component live
like this with CVA and Tailwind,

92
00:05:45.387 --> 00:05:49.647
maybe pretty cool cuz I would not wanna
write all of these inside of JSX,

93
00:05:49.647 --> 00:05:53.420
plus turners, plus if statements,
I just don't wanna do it.

94
00:05:54.920 --> 00:05:58.236
So we got that, and then for
secondary we're gonna have these.

95
00:06:02.410 --> 00:06:04.847
So intent is secondary at these.

96
00:06:04.847 --> 00:06:06.828
So instead of being a purple
button it's a white button.

97
00:06:12.636 --> 00:06:17.063
And then at the text is or
the intent is text,

98
00:06:17.063 --> 00:06:21.258
then It's just basically transparent.

99
00:06:26.703 --> 00:06:30.480
And then last one is the ability
to manipulate the size.

100
00:06:30.480 --> 00:06:35.310
So I can go down here and say okay, I
want to know the property called size and

101
00:06:35.310 --> 00:06:37.250
the value of small.

102
00:06:37.250 --> 00:06:38.690
I want to apply these classes.

103
00:06:39.720 --> 00:06:45.328
So text medium y-1 which
means padding y-1 on both,

104
00:06:45.328 --> 00:06:49.190
which I think is actually two pixels.

105
00:06:49.190 --> 00:06:51.300
I don't know Tailwind's number.

106
00:06:51.300 --> 00:06:54.700
And then for
medium I'm gonna apply these classes.

107
00:06:55.950 --> 00:07:02.894
Pass in medium button, And for large,
I want to pass in these classes.

108
00:07:11.352 --> 00:07:14.390
And lastly,
we just need a default variance.

109
00:07:14.390 --> 00:07:15.320
So default variance.

110
00:07:17.110 --> 00:07:21.786
Let's just have the intent
default to primary and

111
00:07:21.786 --> 00:07:25.359
we'll have the size default to medium

112
00:07:34.936 --> 00:07:36.560
Here comes the magic.

113
00:07:36.560 --> 00:07:42.018
So what we can do with that is mix
it in with some TypeScript magic and

114
00:07:42.018 --> 00:07:47.100
create an interface that extends
basically an HTML element.

115
00:07:47.100 --> 00:07:49.110
That's what this HTML button element.

116
00:07:50.650 --> 00:07:55.234
And we can derive the type of
all these variants by using

117
00:07:55.234 --> 00:07:59.330
typeof inside the variant
prompts as a generic.

118
00:07:59.330 --> 00:08:01.290
So this is something you
can do in TypeScript.

119
00:08:02.440 --> 00:08:03.961
Is you can do typeof and

120
00:08:03.961 --> 00:08:08.140
TypeScript will derive a type
from that which is really cool.

121
00:08:14.390 --> 00:08:16.080
So I'll just come down here and do that.

122
00:08:16.080 --> 00:08:18.693
You don't actually have to
put anything in here for

123
00:08:18.693 --> 00:08:22.461
these prompts unless you have some other
props that this button is going to

124
00:08:22.461 --> 00:08:26.360
take that are unrelated to
things that change the classes.

125
00:08:26.360 --> 00:08:28.190
You can you can define them here.

126
00:08:28.190 --> 00:08:30.454
But note that things like unclick type,

127
00:08:30.454 --> 00:08:33.960
all that stuff is already part
of the HTML button element.

128
00:08:33.960 --> 00:08:35.130
So it's probably already there.

129
00:08:35.130 --> 00:08:36.930
So let's do some custom prop.

130
00:08:36.930 --> 00:08:38.860
That's not already part of a button.

131
00:08:38.860 --> 00:08:40.760
That doesn't have anything
to do with style,

132
00:08:40.760 --> 00:08:42.850
then you don't need to add anything here.

133
00:08:42.850 --> 00:08:47.375
But if there was, you would add it here.

134
00:08:47.375 --> 00:08:48.804
Okay, and then from there,

135
00:08:48.804 --> 00:08:52.750
I prefer to type check my components
like this using functional component.

136
00:08:52.750 --> 00:08:54.880
Some people like to do it
after the object here.

137
00:08:56.120 --> 00:08:57.790
I'm gonna do it here beforehand.

138
00:08:57.790 --> 00:09:00.877
So I'm gonna say FC, and

139
00:09:00.877 --> 00:09:06.615
then I'm gonna say ButtonProps, like that.

140
00:09:11.182 --> 00:09:12.420
So now we got our ButtonProps.

141
00:09:13.910 --> 00:09:15.170
And lastly, we just gotta apply them.

142
00:09:17.290 --> 00:09:21.052
So to do that, we can go to the button,

143
00:09:21.052 --> 00:09:26.510
we can say className We
can say button class.

144
00:09:26.510 --> 00:09:27.480
Is that what I called them?

145
00:09:28.500 --> 00:09:29.400
Button classes.

146
00:09:36.750 --> 00:09:37.740
Button classes like that.

147
00:09:37.740 --> 00:09:40.660
And then we've got to
just pass in our props.

148
00:09:40.660 --> 00:09:44.560
So we can map the intent and the size and
the class name that we destructure.

149
00:09:44.560 --> 00:09:47.230
And then we can just spread over
the rest of the props, right?

150
00:09:47.230 --> 00:09:51.130
So we'll get the intent.

151
00:09:51.130 --> 00:09:58.130
And you can see it's auto completing
because we passed the props,

152
00:09:58.130 --> 00:10:02.130
the size, and what was the other one?

153
00:10:02.130 --> 00:10:03.140
Size, intent.
Size.

154
00:10:03.140 --> 00:10:04.286
It's another one.

155
00:10:04.286 --> 00:10:05.124
Yeah, class name, duh.

156
00:10:07.683 --> 00:10:08.800
And then we can just do that here.

157
00:10:08.800 --> 00:10:14.052
We can say this is the intent,
this is the size, here's the class name.

158
00:10:15.950 --> 00:10:18.229
And then just spread over these props,
the rest of them.

159
00:10:20.912 --> 00:10:23.638
Which I did not name, so let's do that.

160
00:10:23.638 --> 00:10:25.962
Cool.

161
00:10:31.847 --> 00:10:37.202
So I think this is a really good system to
build out UI components using Tailwind or

162
00:10:37.202 --> 00:10:39.900
class-based styling, in my opinion.

163
00:10:40.910 --> 00:10:45.896
Which if you use Next.js 13,
you can't use component libraries like

164
00:10:45.896 --> 00:10:49.750
Chakra because they don't
work on server components.

165
00:10:49.750 --> 00:10:54.530
So you're kinda stuck with class-based
styling for now, for the most part.

166
00:10:54.530 --> 00:10:55.990
And, Tailwind's amazing.

167
00:10:55.990 --> 00:10:56.660
So, yeah.

168
00:10:56.660 --> 00:10:57.160
&gt;&gt; Mark.

169
00:10:58.190 --> 00:11:03.991
&gt;&gt; You have any opinion on whether prop
types should be defined as type aliases,

170
00:11:03.991 --> 00:11:06.140
or interfaces?

171
00:11:06.140 --> 00:11:07.070
&gt;&gt; I don't have an opinion.

172
00:11:08.080 --> 00:11:10.220
I've always done them as interfaces.

173
00:11:10.220 --> 00:11:15.480
I don't know the differences between using
them as a type alias, or an interface.

174
00:11:17.170 --> 00:11:23.310
For me, I've always used them as
interfaces because I think when that

175
00:11:23.310 --> 00:11:28.100
transition period happened from like class
based components to functional components.

176
00:11:29.430 --> 00:11:33.917
Everybody was using interfaces so
it kind of just stuck with me, but

177
00:11:33.917 --> 00:11:38.717
I feel like types might be a lot more
flexible and in that sense of making,

178
00:11:38.717 --> 00:11:41.705
I can see if I was making
a component library,

179
00:11:41.705 --> 00:11:46.506
I might use types because of the
flexibility of how you can extend them and

180
00:11:46.506 --> 00:11:49.680
do unions and
things like that across types.

181
00:11:49.680 --> 00:11:51.941
So it might be more flexible there,
but for the most part,

182
00:11:51.941 --> 00:11:53.680
I'll just use interfaces.

183
00:11:53.680 --> 00:11:56.590
&gt;&gt; When do we start to
bring in use client?

184
00:11:56.590 --> 00:11:58.620
Is that going to be in the pages?

185
00:11:58.620 --> 00:12:01.320
Or can we bring that into
components like this?

186
00:12:01.320 --> 00:12:03.270
&gt;&gt; You can bring use
client whenever you want.

187
00:12:03.270 --> 00:12:04.805
Can I probably put in a use client here?

188
00:12:04.805 --> 00:12:05.380
Yeah, it works.

189
00:12:07.260 --> 00:12:11.370
It's just a client component now, but
it'll still give you the same result.

190
00:12:11.370 --> 00:12:13.050
It'll still show up on the page and
do its job.

191
00:12:15.580 --> 00:12:20.833
But just like if you've watched
the v2 course of Intro to XJS,

192
00:12:20.833 --> 00:12:26.882
I mentioned in there that unless you're
doing some type of DOM only API,

193
00:12:26.882 --> 00:12:32.833
some type of state management,
some typeof, mostly that like a hook or

194
00:12:32.833 --> 00:12:38.680
something, you should almost
never use the client component.

195
00:12:38.680 --> 00:12:43.095
So looking at this button, you gotta ask
yourself is something happening here that

196
00:12:43.095 --> 00:12:45.400
can only happen in the browser.

197
00:12:45.400 --> 00:12:48.280
And that's the case,
you gotta use, use client.

198
00:12:48.280 --> 00:12:51.348
But even then, you would probably
get an error on the server,

199
00:12:51.348 --> 00:12:55.210
component if you tried to like
if this as a server component.

200
00:12:55.210 --> 00:12:58.999
If I went into here and did window
like actually, if I went in here and

201
00:12:58.999 --> 00:13:01.670
did window, it would just break.

202
00:13:01.670 --> 00:13:05.790
Unless for some reason my node environment
was mocking window out which it might be.

203
00:13:05.790 --> 00:13:08.460
So I think some of the newer
versions of node might do that.

204
00:13:08.460 --> 00:13:10.260
But you get the point.

205
00:13:10.260 --> 00:13:14.550
It won't work on the server, because you
tried to do something on the browser.

206
00:13:14.550 --> 00:13:17.895
So I would say just always use a server
component until the server screams at you

207
00:13:17.895 --> 00:13:21.446
or until something unexpected happens
you're like that's supposed to do this and

208
00:13:21.446 --> 00:13:24.032
then it's like that should have
been a client component so

209
00:13:24.032 --> 00:13:25.884
that way you don't have to think about it.

210
00:13:25.884 --> 00:13:27.030
Let the framework tell you.

