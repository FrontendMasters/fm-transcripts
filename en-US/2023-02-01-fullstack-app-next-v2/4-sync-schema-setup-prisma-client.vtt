WEBVTT

1
00:00:00.000 --> 00:00:07.476
So what we can do now is head over back to
our course site and kinda see what's next.

2
00:00:07.476 --> 00:00:12.707
So the next thing we wanna do is we have
to sync our schema with our database.

3
00:00:12.707 --> 00:00:17.042
When you use a relational database like
Postgres, the database has to know what

4
00:00:17.042 --> 00:00:21.050
the schema is, so that way it actually
knows how to interpret the reads and

5
00:00:21.050 --> 00:00:24.945
the rights and different things like that,
the rules of the database.

6
00:00:24.945 --> 00:00:27.156
If you come from something like Mongo,

7
00:00:27.156 --> 00:00:29.908
you don't really have to
sync any of that stuff.

8
00:00:29.908 --> 00:00:32.043
You don't even really need a schema
although you can use them,

9
00:00:32.043 --> 00:00:33.054
so it's a little different.

10
00:00:33.054 --> 00:00:34.769
But for a relational database,
you need to sync them.

11
00:00:34.769 --> 00:00:35.928
So that's what we're gonna do.

12
00:00:35.928 --> 00:00:39.579
And luckily for us,
we get that for free with Prisma.

13
00:00:39.579 --> 00:00:44.021
We also need to generate that type safe
ORM or that SDK for our database so

14
00:00:44.021 --> 00:00:48.463
we can actually use it in our Next.js
app so we can query the user table,

15
00:00:48.463 --> 00:00:52.040
create new projects,
update tasks, things like that.

16
00:00:52.040 --> 00:00:55.929
So we need that SDK to talk to
the database cuz the database is not in

17
00:00:55.929 --> 00:00:59.278
JavaScript, right,
we need that translation layer.

18
00:00:59.278 --> 00:01:00.835
So we kinda get that for free with Prisma.

19
00:01:00.835 --> 00:01:07.625
So what we can do is you can
just run npx prisma migrate,

20
00:01:07.625 --> 00:01:13.245
like that, or sorry,
npx prisma migrate dev

21
00:01:17.587 --> 00:01:22.848
And if you're using Railway or some hosted
database, it might take a minute cuz

22
00:01:22.848 --> 00:01:28.521
it's going to the Internet and it's doing
stuff, so we'll see how long this takes.

23
00:01:28.521 --> 00:01:31.695
If we run it locally, it will
probably happen almost immediately.

24
00:01:31.695 --> 00:01:33.836
So it's gonna ask for a migration name.

25
00:01:33.836 --> 00:01:36.297
I'm just gonna call this init for
the initial migration.

26
00:01:42.395 --> 00:01:46.815
And then you can see what it says here, it
applied that migration, it put a timestamp

27
00:01:46.815 --> 00:01:50.938
on it, it saved it to this migrations
folder that it created with that folder.

28
00:01:50.938 --> 00:01:54.801
And then in migration SQL, we'll go take
a look at that to see what Prisma did for

29
00:01:54.801 --> 00:01:56.136
you, if you're curious.

30
00:01:56.136 --> 00:02:00.189
And then it says your database
is now in sync with your schema.

31
00:02:00.189 --> 00:02:03.887
And then the last thing it said
is it generate Prisma Client, and

32
00:02:03.887 --> 00:02:04.924
it saved it here.

33
00:02:04.924 --> 00:02:09.878
So if you wanna import it, you'll just
import @prisma/client, and this is gonna

34
00:02:09.878 --> 00:02:14.443
be the SDK that's unique to your schema,
which is probably the same as mine.

35
00:02:14.443 --> 00:02:17.029
That way you can get that
TypeScript in your editor.

36
00:02:17.029 --> 00:02:21.947
So as you start typing out the ORM,
it'll know about a user,

37
00:02:21.947 --> 00:02:23.887
and a user has an email.

38
00:02:23.887 --> 00:02:27.291
It'll know that a task has a name and
a status.

39
00:02:27.291 --> 00:02:28.192
It'll know those things.

40
00:02:28.192 --> 00:02:32.438
So it has to get generated every
single time you change your schema.

41
00:02:32.438 --> 00:02:34.302
So that might be a new concept,

42
00:02:34.302 --> 00:02:39.418
whereas most npm packages we download are
already created and we just consume them.

43
00:02:39.418 --> 00:02:43.954
This is the npm package that gets created
every single time you make a change

44
00:02:43.954 --> 00:02:47.489
to your schema, so
it's a little weird, but kinda cool.

45
00:02:47.489 --> 00:02:49.003
Anyway, let's go look at what happened.

46
00:02:49.003 --> 00:02:52.730
So if we go look at migrations,
here it is,

47
00:02:52.730 --> 00:02:56.569
here's the SQL file that it created for
us.

48
00:02:56.569 --> 00:02:58.357
It's a lot of SQL.

49
00:02:58.357 --> 00:03:02.674
If you don't know SQL, if you look at this
compared to Prisma, then you're like,

50
00:03:02.674 --> 00:03:05.758
I'm so glad Prisma did that,
but this is what you would have

51
00:03:05.758 --> 00:03:09.847
had to written yourself if you were to
do the migration yourself, basically.

52
00:03:09.847 --> 00:03:10.607
So we got that for free.

53
00:03:10.607 --> 00:03:16.534
So we'll get there and
now we are ready to do some stuff with it.

54
00:03:16.534 --> 00:03:18.368
So let's keep it moving.

55
00:03:20.997 --> 00:03:25.548
So one thing we wanna do
is we wanna create a little

56
00:03:25.548 --> 00:03:28.882
wrapper around the Prisma Client.

57
00:03:28.882 --> 00:03:32.677
And that's just because of
the environment in which Next.js runs in.

58
00:03:32.677 --> 00:03:36.992
Next.js, at least for the backend,
is gonna run in a service architecture.

59
00:03:36.992 --> 00:03:41.222
And if you don't know how service works
compared to a server environment,

60
00:03:41.222 --> 00:03:44.592
a server environment is always running,
it's always on.

61
00:03:44.592 --> 00:03:48.683
So databases were designed to
connect with them, with a URL that

62
00:03:48.683 --> 00:03:53.404
states those connections are long-lived,
cuz our server is always on.

63
00:03:53.404 --> 00:03:56.878
If your server is off, then no one can use
your app, so your server is always on.

64
00:03:56.878 --> 00:03:59.241
So databases were designed
to be connected with them.

65
00:03:59.241 --> 00:04:03.543
Most databases have a connection limit
where you can pull those connections and

66
00:04:03.543 --> 00:04:05.416
try to switch them back and forth.

67
00:04:05.416 --> 00:04:07.494
Eventually with a service environment,

68
00:04:07.494 --> 00:04:10.233
you will run into a limit on
that database really soon.

69
00:04:10.233 --> 00:04:15.018
Each database has different limits and
you're gonna have problems.

70
00:04:15.018 --> 00:04:19.599
So to get around that,
you can cache the connection that you

71
00:04:19.599 --> 00:04:24.466
already had to share it across
different service executions.

72
00:04:24.466 --> 00:04:29.419
Because all those Serverless functions are
stateless and they spin up and shut down,

73
00:04:29.419 --> 00:04:33.286
the actual container that hosts
them stay alive for quite a while.

74
00:04:33.286 --> 00:04:34.126
And the RAM,

75
00:04:34.126 --> 00:04:38.867
the memory that your code is accessing
while those containers are alive,

76
00:04:38.867 --> 00:04:43.698
we can tap into that and store these
database connections into that cache.

77
00:04:43.698 --> 00:04:44.721
So therefore,

78
00:04:44.721 --> 00:04:49.764
we're not making new connections every
time we spin up a service function.

79
00:04:49.764 --> 00:04:53.687
So it's a little deep,
nut basically we're gonna do this.

80
00:04:53.687 --> 00:04:58.140
This is gonna create
a Prisma Client instance for us.

81
00:04:58.140 --> 00:05:01.919
It's gonna check to see
if we already did one.

82
00:05:01.919 --> 00:05:05.051
If it did, we're gonna get that one,
if it didn't,

83
00:05:05.051 --> 00:05:08.732
it's gonna save it in the global and
return that one instead.

84
00:05:08.732 --> 00:05:13.204
Right, so
we wanna do this in our lib folder,

85
00:05:13.204 --> 00:05:18.031
cuz it's where we put all
our library stuff, and

86
00:05:18.031 --> 00:05:24.292
we're just gonna call it db.ts,
Like that, there we go.

87
00:05:27.442 --> 00:05:33.896
So db.ts here, And again,
if we look at this, all

88
00:05:33.896 --> 00:05:38.730
it's doing is it's importing our generated
client, just some TypeScript stuff.

89
00:05:38.730 --> 00:05:42.600
TypeScript is gonna freak out if you try
to use something in the global space

90
00:05:42.600 --> 00:05:44.865
that's not actually there.

91
00:05:44.865 --> 00:05:47.265
And then we're checking to
see if we're in production,

92
00:05:47.265 --> 00:05:50.366
cuz we kinda really only wanna make
a new one here if we're in production.

93
00:05:50.366 --> 00:05:55.343
Else, if there isn't one in cache,
go ahead and get it, and

94
00:05:55.343 --> 00:05:57.890
then just export that one out.

95
00:06:02.028 --> 00:06:03.365
That's basically it.

96
00:06:03.365 --> 00:06:07.233
This also helps with the way
Next.js does hot module reloading.

97
00:06:07.233 --> 00:06:08.077
It keeps reloading and

98
00:06:08.077 --> 00:06:10.529
it keeps making a new connection
you'll run into a Prisma error.

99
00:06:10.529 --> 00:06:11.732
This prevents that as well.

100
00:06:14.432 --> 00:06:16.234
Okay, any questions on that?

101
00:06:20.783 --> 00:06:24.496
There's things on the database
level that fix this, so

102
00:06:24.496 --> 00:06:28.209
using a service database like FaunaDB,
PlanetScale,

103
00:06:28.209 --> 00:06:32.633
which is one of my favorites right now,
really cool database, and

104
00:06:32.633 --> 00:06:37.311
Firebase or any HTTP-based database
really can solve this problem.

