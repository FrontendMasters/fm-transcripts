WEBVTT

1
00:00:00.000 --> 00:00:05.267
As we were navigating here like for
instance let's, it did it just now too but

2
00:00:05.267 --> 00:00:10.467
I'm gonna go to sign in and I'm gonna go
back to home watch how long it takes.

3
00:00:13.209 --> 00:00:15.349
See that?

4
00:00:15.349 --> 00:00:19.576
Right, and then when we got
here then this started loading.

5
00:00:19.576 --> 00:00:20.921
All right, let's break that down.

6
00:00:20.921 --> 00:00:23.242
That's very important.

7
00:00:23.242 --> 00:00:30.642
So if we go back to the page and home it's
because where we're loading the data,

8
00:00:30.642 --> 00:00:36.282
we're getting the data for
the projects in the actual page.

9
00:00:36.282 --> 00:00:44.058
So that means this return of the JSX is
completely blocked until this is done.

10
00:00:44.058 --> 00:00:47.998
And because this is at least two seconds,
we won't even see the page.

11
00:00:47.998 --> 00:00:53.889
The transition won't even happen
because this JSX isn't ready, right?

12
00:00:53.889 --> 00:00:59.316
So that's why that long pause was there
first, and then when we got to the page,

13
00:00:59.316 --> 00:01:03.626
it started rendering their JSX and
it saw this, the suspense.

14
00:01:04.686 --> 00:01:07.773
So then that loaded up, and
then that takes four seconds so

15
00:01:07.773 --> 00:01:09.543
that's how we got the skeleton.

16
00:01:09.543 --> 00:01:13.932
So you create this waterfall effect, so
you actually have control over which

17
00:01:13.932 --> 00:01:17.172
elements you want to load first and
last and what order and

18
00:01:17.172 --> 00:01:21.247
how you wanna load them because
that's basically what just happened.

19
00:01:21.247 --> 00:01:22.969
So I thought that was pretty cool.

20
00:01:22.969 --> 00:01:25.750
You kind of get control over that.

21
00:01:25.750 --> 00:01:30.028
But if you block a page with
an async await before the JSX,

22
00:01:30.028 --> 00:01:35.479
like if you put data there, that page
will not render until this is done.

23
00:01:35.479 --> 00:01:40.536
But if you move that data fetching down to
the component level, the page will render.

24
00:01:40.536 --> 00:01:43.326
And this will load in when it's done.

25
00:01:43.326 --> 00:01:48.523
That make sense?

26
00:01:48.523 --> 00:01:49.956
Cool.

27
00:01:49.956 --> 00:01:56.188
Any questions

28
00:01:56.188 --> 00:02:00.344
on that?

29
00:02:00.344 --> 00:02:05.111
&gt;&gt; So this guy will play if
certain projects have more

30
00:02:05.111 --> 00:02:09.884
tasks associated with
them than other projects?

31
00:02:09.884 --> 00:02:11.988
&gt;&gt; Yeah,
it depends on how you do the query, right?

32
00:02:11.988 --> 00:02:15.636
So, in the case of projects,
we decided to, or

33
00:02:15.636 --> 00:02:20.380
that would be in the back of the page,
in case of the projects,

34
00:02:20.380 --> 00:02:25.520
we decided to just include the task
with the project query itself.

35
00:02:25.520 --> 00:02:26.961
So it's just one query.

36
00:02:26.961 --> 00:02:31.716
But yeah, if you did it separately,
to where you got the projects, and

37
00:02:31.716 --> 00:02:34.662
then you did another
query to get the tasks.

38
00:02:34.662 --> 00:02:35.560
Yeah, you can say cool.

39
00:02:35.560 --> 00:02:37.165
Let's just load in the projects.

40
00:02:37.165 --> 00:02:39.163
And then later on,
we'll load in the tasks and

41
00:02:39.163 --> 00:02:41.892
those will come in after the fact
versus load them in together.

42
00:02:41.892 --> 00:02:43.555
So it's totally up to you but

43
00:02:43.555 --> 00:02:46.614
at the same time you also got
to think of it like this.

44
00:02:46.614 --> 00:02:49.194
That, as long as you
have proper indexes and

45
00:02:49.194 --> 00:02:53.867
there's a path to getting that data,
you're doing this on the server side, so

46
00:02:53.867 --> 00:02:58.580
it's probably going to be way quicker than
what you would have to do over an API.

47
00:02:58.580 --> 00:03:00.770
So you don't have to think
about those constraints.

48
00:03:00.770 --> 00:03:03.829
Any constraints you would have made and

49
00:03:03.829 --> 00:03:08.842
your APIs to accommodate the network,
you can forget about it.

50
00:03:08.842 --> 00:03:13.839
The only constraints you have to deal
with now when getting data is whatever

51
00:03:13.839 --> 00:03:17.026
the source is where
you're getting your data.

52
00:03:17.026 --> 00:03:18.258
In this case, it's a database.

53
00:03:18.258 --> 00:03:21.605
But maybe it is like an API like Stripe or
something like that.

54
00:03:21.605 --> 00:03:24.255
But even then,
you're not hitting it from the client.

55
00:03:24.255 --> 00:03:26.505
So it's still removing one layer.

56
00:03:26.505 --> 00:03:31.490
So you've just got to think about in this
case, as it is, is there an index here?

57
00:03:31.490 --> 00:03:32.822
You know, how hard is it to do this?

58
00:03:32.822 --> 00:03:33.842
What is this operation?

59
00:03:33.842 --> 00:03:38.123
Versus like how much data
is coming across the wire?

60
00:03:38.123 --> 00:03:39.519
How long is that network request?

61
00:03:39.519 --> 00:03:40.867
What's waiting on us?

62
00:03:40.867 --> 00:03:45.682
You don't really have to

63
00:03:45.682 --> 00:03:50.958
think about it in this one.

64
00:03:50.958 --> 00:03:54.452
Any other questions?

65
00:03:54.452 --> 00:03:56.050
Nope?

66
00:03:56.050 --> 00:04:00.741
Okay, how would we change it to where each
one of these projects loaded individually

67
00:04:00.741 --> 00:04:03.198
like a skeleton like
the greeting card did?

68
00:04:13.220 --> 00:04:17.645
&gt;&gt; What do we make like a parent
projects component like you were

69
00:04:17.645 --> 00:04:19.479
talking about earlier?

70
00:04:19.479 --> 00:04:21.943
&gt;&gt; Okay, we can make a parent
projects component and

71
00:04:21.943 --> 00:04:23.475
what would that component do?

72
00:04:23.475 --> 00:04:28.186
&gt;&gt; That would that would
make the data fetch and

73
00:04:28.186 --> 00:04:32.769
then I guess you'd use
suspense in that and

74
00:04:32.769 --> 00:04:36.984
have it have a fall back with a.

75
00:04:36.984 --> 00:04:39.662
&gt;&gt; You could, it would ultimately
result in the same thing.

76
00:04:39.662 --> 00:04:43.328
It would result in all the projects
coming in at the same time,

77
00:04:43.328 --> 00:04:46.853
because you would have did
a database query for find many and

78
00:04:46.853 --> 00:04:49.338
you would have got them all back, right?

79
00:04:49.338 --> 00:04:50.585
But you can simulate it.

80
00:04:50.585 --> 00:04:54.433
So there's basically two ways there's like
the simulated way that looks the same and

81
00:04:54.433 --> 00:04:57.279
then there's the one which truly
each one is coming by itself.

82
00:04:57.279 --> 00:05:03.730
The simulated way would be I mean,
we could do it now is just,

83
00:05:03.730 --> 00:05:07.664
we can not put in a wait here, right?

84
00:05:07.664 --> 00:05:09.312
That way it's not blocking.

85
00:05:09.312 --> 00:05:11.458
So we would just say this is a promise.

86
00:05:11.458 --> 00:05:15.800
This is like, get projects,
something like that, right?

87
00:05:15.800 --> 00:05:18.914
And that and our,
our apps gonna break when I do this.

88
00:05:18.914 --> 00:05:21.214
I'm just gonna just comment
this out right click, but

89
00:05:21.214 --> 00:05:23.520
you're gonna see that
the components are gonna load.

90
00:05:23.520 --> 00:05:25.517
This page is going to
load immediately now.

91
00:05:25.517 --> 00:05:27.288
So you didn't wait.

92
00:05:27.288 --> 00:05:29.280
But it still went to go get the projects.

93
00:05:29.280 --> 00:05:31.729
I just didn't wait for it.

94
00:05:31.729 --> 00:05:37.175
And then when I'm ready,
I can wait for it.

95
00:05:37.175 --> 00:05:42.126
But in the meantime,
I can show a spinner right?

96
00:05:42.126 --> 00:05:47.226
I can show a spinner for an array of,
pick an array of five things and show

97
00:05:47.226 --> 00:05:52.327
us a spinner or a shimmer or a skeleton
for each one of those five things.

98
00:05:52.327 --> 00:05:54.725
And then when I'm ready,

99
00:05:54.725 --> 00:06:00.836
I can actually show the data by just
putting a weight in front of it.

100
00:06:00.836 --> 00:06:05.431
So that's the simulated way, or
I would say like background parallel way.

101
00:06:05.431 --> 00:06:10.090
The real way of like actually getting
this to work, which doesn't make sense,

102
00:06:10.090 --> 00:06:12.382
but this is how you would do it, is one,

103
00:06:12.382 --> 00:06:16.135
you would have it to where the container,
in this case the page,

104
00:06:16.135 --> 00:06:19.913
would just get all like the project
IDs that it's going to show.

105
00:06:19.913 --> 00:06:23.305
It'll make a query like this,
give me all the Project IDs, right?

106
00:06:23.305 --> 00:06:24.463
Or it got it from somewhere.

107
00:06:24.463 --> 00:06:27.967
It's got the Project IDs, and then it
would loop over those product IDs and

108
00:06:27.967 --> 00:06:29.479
pass them to each project cart.

109
00:06:29.479 --> 00:06:32.499
And then each project card
would take that ID and

110
00:06:32.499 --> 00:06:34.772
do a get data to get its own project.

111
00:06:34.772 --> 00:06:36.921
And in the meantime,
we would show a shimmer.

112
00:06:36.921 --> 00:06:40.733
So that's how that would work
to be one of those two ways.

113
00:06:40.733 --> 00:06:41.533
Yeah.

114
00:06:41.533 --> 00:06:48.895
&gt;&gt; Could you also just get the number
of projects account from the database?

115
00:06:48.895 --> 00:06:52.645
&gt;&gt; You could do that too, you could say,
just do a query and give me the account,

116
00:06:52.645 --> 00:06:56.109
the number of projects, make an array
of that, show your shimmer, and

117
00:06:56.109 --> 00:06:57.187
then get them later.

118
00:06:57.187 --> 00:06:59.583
Yeah.

119
00:06:59.583 --> 00:07:02.368
So you can get pretty creative with it.

120
00:07:02.368 --> 00:07:06.260
So yeah, it's got to depend
on what you're looking for.

