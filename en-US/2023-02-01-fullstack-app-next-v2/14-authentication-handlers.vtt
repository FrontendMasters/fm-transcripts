WEBVTT

1
00:00:00.074 --> 00:00:03.519
All right, so now we're gonna
start getting into putting all

2
00:00:03.519 --> 00:00:06.711
this stuff together and
starting with authentication.

3
00:00:06.711 --> 00:00:10.556
So before we can actually make
the authentication form and

4
00:00:10.556 --> 00:00:14.713
put it on the page and do all that stuff,
we need the API routes,

5
00:00:14.713 --> 00:00:17.859
we need the functions
that call the API routes.

6
00:00:17.859 --> 00:00:21.221
So when we submit the form,
we can actually log in.

7
00:00:21.221 --> 00:00:24.038
So we're gonna move away from
components and get into some logic.

8
00:00:24.038 --> 00:00:26.889
And we're gonna start
working on some API stuff.

9
00:00:26.889 --> 00:00:31.552
So because it's a form,
it's probably gonna be,

10
00:00:31.552 --> 00:00:36.005
what, a server component or
client component.

11
00:00:36.005 --> 00:00:37.510
It's gonna to be a client component,
exactly.

12
00:00:37.510 --> 00:00:39.699
So how do you fetch data on the client?

13
00:00:39.699 --> 00:00:42.195
How do you mutate data on the client?

14
00:00:42.195 --> 00:00:44.452
Fetch, yeah, nothing changes there.

15
00:00:44.452 --> 00:00:47.334
It's pretty much the same thing for now.

16
00:00:47.334 --> 00:00:49.689
So that's what we're gonna do.

17
00:00:49.689 --> 00:00:53.527
So inside of our lib slash API,

18
00:00:53.527 --> 00:00:58.404
call it lib, make a file, call it API.

19
00:00:58.404 --> 00:01:03.162
And I'm going to make a function just
like my notes here called fetcher if

20
00:01:03.162 --> 00:01:08.388
you've ever used something like es WR or
react query you're not you know this is

21
00:01:08.388 --> 00:01:13.458
not new to you just abstracting away the
fetch function so you can reuse it Many

22
00:01:13.458 --> 00:01:19.345
times cuz it's kind of redundant to have
to do all this stuff all the damn time.

23
00:01:19.345 --> 00:01:21.705
So we're gonna make our own fetcher,
that way we can reuse it.

24
00:01:21.705 --> 00:01:24.838
So there's no wrong or
right way to do this,

25
00:01:24.838 --> 00:01:28.321
this is just how I felt
like writing it this time.

26
00:01:28.321 --> 00:01:30.421
[LAUGH] I change it all the time.

27
00:01:30.421 --> 00:01:31.646
So let's do that.

28
00:01:31.646 --> 00:01:36.198
So I'm gonna say, const fetcher,

29
00:01:36.198 --> 00:01:39.851
make it take an object here.

30
00:01:39.851 --> 00:01:43.207
So async.

31
00:01:43.207 --> 00:01:46.962
And it's gonna take in a URL, a method.

32
00:01:46.962 --> 00:01:49.418
What else do I have here?

33
00:01:49.418 --> 00:01:52.606
Body and whether it's JSON or
not, so it takes a body.

34
00:01:52.606 --> 00:01:57.371
And if it's JSON or not,
which defaults to true.

35
00:01:59.917 --> 00:02:05.256
And all this is gonna do is await,

36
00:02:05.256 --> 00:02:09.261
fetch with the URL here,

37
00:02:09.261 --> 00:02:16.150
with the method that you passed, like so.

38
00:02:16.150 --> 00:02:21.516
And if there's a body,
you could do body and

39
00:02:21.516 --> 00:02:25.004
JSON.stringify the body.

40
00:02:27.743 --> 00:02:30.012
And fetch is okay if you add
a body with nothing on it.

41
00:02:30.012 --> 00:02:31.715
I mean,
I guess it really depends on your server.

42
00:02:31.715 --> 00:02:36.818
But if you didn't want to add
the body field to this object,

43
00:02:36.818 --> 00:02:41.633
if there wasn't a body property
passed as an argument.

44
00:02:41.633 --> 00:02:45.777
Anybody know a shortcut where you can do
this in one line without having to take

45
00:02:45.777 --> 00:02:48.604
this object out in a variable and
do an if statement?

46
00:02:51.941 --> 00:02:52.926
It's a little cool trick.

47
00:02:52.926 --> 00:02:57.290
So if I wanna exclude this body field
entirely, if there is no body value

48
00:02:57.290 --> 00:03:01.757
the way you would have to do it,
you typically you would do this, right?

49
00:03:01.757 --> 00:03:07.040
You would take this out, you'd say
cost options, do something like that.

50
00:03:07.040 --> 00:03:11.891
Any like if body, then options dot body
equals this, just like a couple of lines.

51
00:03:11.891 --> 00:03:14.478
But you could do it on one line too.

52
00:03:14.478 --> 00:03:19.814
And you could say dot dot, dot,

53
00:03:19.814 --> 00:03:24.563
and [INAUDIBLE] no, go away.

54
00:03:24.563 --> 00:03:26.170
You can do parentheses here.

55
00:03:26.170 --> 00:03:30.460
You can say, dot, dot, dot, if, and

56
00:03:30.460 --> 00:03:35.792
then you can say, body and
an object, the body.

57
00:03:35.792 --> 00:03:38.376
So you can do that.

58
00:03:38.376 --> 00:03:43.426
What that would do is basically
only spread over this object

59
00:03:43.426 --> 00:03:49.392
with the body property if body was true,
otherwise nothing happens.

60
00:03:49.392 --> 00:03:52.111
Because and
only works if both conditions are true.

61
00:03:52.111 --> 00:03:53.549
So this will have to be true.

62
00:03:53.549 --> 00:03:55.906
&gt;&gt; Now why is this thing just
freaking out, I wish it would stop.

63
00:03:55.906 --> 00:04:02.185
&gt;&gt; [INAUDIBLE]
&gt;&gt; Man, thank you.

64
00:04:02.185 --> 00:04:03.493
So annoying, there we go.

65
00:04:06.879 --> 00:04:10.902
&gt;&gt; So it will take out the body object.

66
00:04:10.902 --> 00:04:16.199
&gt;&gt; Yeah, so what this is doing,
it's basically saying,

67
00:04:16.199 --> 00:04:20.942
add a body field and
set it to body if body was true.

68
00:04:20.942 --> 00:04:22.682
&gt;&gt; Otherwise, it won't even add the field.

69
00:04:22.682 --> 00:04:29.186
This will never happen if this isn't true,
right?

70
00:04:29.186 --> 00:04:31.716
Cuz what's gonna happen is,
let's break it down.

71
00:04:31.716 --> 00:04:34.338
This turns into true,
and then it goes away.

72
00:04:34.338 --> 00:04:36.399
Then what's left is this object.

73
00:04:36.399 --> 00:04:39.494
Then this object has three
dots on the left of it,

74
00:04:39.494 --> 00:04:41.919
what spreads it and adds a body field.

75
00:04:41.919 --> 00:04:48.985
If this is false,
this whole statement goes away.

76
00:04:48.985 --> 00:04:56.621
So yeah, you do that and then obviously
you just gotta stringify this thing.

77
00:04:56.621 --> 00:04:59.279
But, just something cool.

78
00:04:59.279 --> 00:05:02.659
I saw somebody do this a couple
of years ago and I was like,

79
00:05:02.659 --> 00:05:04.432
I'm gonna steal that [LAUGH].

80
00:05:04.432 --> 00:05:05.961
It's pretty dope.

81
00:05:05.961 --> 00:05:08.930
So you got body, what else?

82
00:05:08.930 --> 00:05:11.083
I got headers.

83
00:05:11.083 --> 00:05:13.599
You should always just
make these like this.

84
00:05:13.599 --> 00:05:17.753
Just these should just be a default

85
00:05:17.753 --> 00:05:24.853
Accept Accept applicationjson.

86
00:05:24.853 --> 00:05:30.946
And then Content-Type.

87
00:05:30.946 --> 00:05:32.765
My goodness.

88
00:05:32.765 --> 00:05:34.146
There we go.

89
00:05:34.146 --> 00:05:37.655
And then lastly,
you wanna be checked for errors.

90
00:05:37.655 --> 00:05:40.064
If not, rest out okay.

91
00:05:40.064 --> 00:05:45.862
Then handle your errors
however you wanna handle them.

92
00:05:45.862 --> 00:05:47.236
There's no wrong way to handle them.

93
00:05:47.236 --> 00:05:52.843
I think I'm just throwing an error that
might get caught somewhere eventually

94
00:05:56.365 --> 00:06:03.313
Otherwise, we can just return res.JSON or
actually probably do.

95
00:06:06.357 --> 00:06:08.112
Yeah, if (json).

96
00:06:08.112 --> 00:06:12.711
If you are expecting JSON then I can say,

97
00:06:12.711 --> 00:06:15.830
data = await rest.json.

98
00:06:15.830 --> 00:06:19.443
And then all my APIs,
I'll always send back a data property.

99
00:06:19.443 --> 00:06:24.084
So for me, it's always whatever
this variable is dot data.

100
00:06:24.084 --> 00:06:26.066
Cuz every API route that I make,

101
00:06:26.066 --> 00:06:29.597
I always send back a data
property to keep it consistent.

102
00:06:29.597 --> 00:06:31.022
I kind of got that from GraphQL.

103
00:06:31.022 --> 00:06:33.388
I really liked that that
it's always a data property.

104
00:06:33.388 --> 00:06:35.977
If it's data, it's always an error
property if there's an error.

105
00:06:35.977 --> 00:06:38.311
So I started making all
my routes like that.

106
00:06:38.311 --> 00:06:42.633
Cuz I hate when you only just throw in the
result of the database call in the route

107
00:06:42.633 --> 00:06:45.795
and you're like,
what's the property on this object?

108
00:06:45.795 --> 00:06:48.277
And you gotta log it and it's just,
what if it's always data?

109
00:06:48.277 --> 00:06:49.176
Then you can do things.

110
00:06:49.176 --> 00:06:50.986
It's way more predictable.

111
00:06:50.986 --> 00:06:53.440
So, I'll always just
return data from my APIs.

112
00:06:53.440 --> 00:06:55.888
So this is always whatever dot data to me.

113
00:06:58.489 --> 00:07:00.452
Cool, yes.

114
00:07:00.452 --> 00:07:04.917
&gt;&gt; I've seen Axios being used much less,
at least in new projects.

115
00:07:04.917 --> 00:07:06.992
Do you have any thoughts on this?

116
00:07:06.992 --> 00:07:08.749
&gt;&gt; I've never used Axios.

117
00:07:08.749 --> 00:07:12.115
&gt;&gt; I've used it twice, and
it's not because I don't like it,

118
00:07:12.115 --> 00:07:14.498
it's cuz I've never felt the need for it.

119
00:07:14.498 --> 00:07:17.031
Even when it first came out,
I never felt the need for it.

120
00:07:17.031 --> 00:07:20.541
When Fetch came out,
I really didn't feel the need for it.

121
00:07:20.541 --> 00:07:25.312
So I think Axios was great when universal
JavaScript was all the buzz and everyone

122
00:07:25.312 --> 00:07:29.326
was like, I gotta write JavaScript
on the front and in the back end.

123
00:07:29.326 --> 00:07:34.673
And then people just like to use Axios so
you can make API calls on both.

124
00:07:34.673 --> 00:07:38.234
But I don't know what it uses now,
but I knew back then it uses XHR.

125
00:07:38.234 --> 00:07:41.245
It didn't use Fetch,
maybe it uses Fetch now.

126
00:07:41.245 --> 00:07:46.251
But unless I'm uploading images, I'm not
using XHR, so I only wanna use Fetch.

127
00:07:46.251 --> 00:07:51.115
And I don't know what else it
offers more than what Fetch does.

128
00:07:51.115 --> 00:07:55.696
And depending on how you use the Fetch or
where you're using the Fetch, for

129
00:07:55.696 --> 00:07:59.477
instance, if we were using this
Fetch on a server component,

130
00:07:59.477 --> 00:08:03.936
that thing has been hijacked by React and
Next.js to have superpowers.

131
00:08:03.936 --> 00:08:06.772
I'm gonna use that thing,
I'm not gonna use Axios.

132
00:08:06.772 --> 00:08:11.413
So yeah, no thanks, but
it was a good project.

133
00:08:14.384 --> 00:08:18.823
Cool, all right,
now we just need to make a function for

134
00:08:18.823 --> 00:08:23.274
us to register our users and
a function for us to sign in.

135
00:08:23.274 --> 00:08:23.883
So let's do that.

136
00:08:23.883 --> 00:08:31.645
So const register is supposed
to take in an object that's,

137
00:08:31.645 --> 00:08:35.848
we're just gonna call it user.

138
00:08:35.848 --> 00:08:41.916
And all its gonna do is
just return fetcher or

139
00:08:41.916 --> 00:08:48.476
the URL of, let's just say /api/register.

140
00:08:48.476 --> 00:08:51.023
We didn't make that yet, but
that's what we're saying it's gonna be.

141
00:08:51.023 --> 00:08:53.673
It's gonna be /api/register.

142
00:08:53.673 --> 00:08:57.213
And its method is gonna be a post.

143
00:08:57.213 --> 00:09:02.658
And the body is gonna be the user,
hence JSON is true,

144
00:09:02.658 --> 00:09:08.479
it's always true,
I don't have to put anything there.

145
00:09:12.403 --> 00:09:15.236
I'm gonna export that.

146
00:09:15.236 --> 00:09:16.774
Cool, now we got registered.

147
00:09:20.455 --> 00:09:23.144
And we're gonna do the same thing for
signin, it's mostly the same.

148
00:09:23.144 --> 00:09:26.383
In fact, I'm just gonna copy it,
paste it, change it to signin,

149
00:09:29.240 --> 00:09:34.379
Change the URL to slide, signin,
and there we go, same thing.

150
00:09:38.518 --> 00:09:40.399
Yes?

151
00:09:40.399 --> 00:09:45.349
&gt;&gt; So, why are we declaring
these functions in our

152
00:09:45.349 --> 00:09:50.563
Lib rather than their
pages slash API directory?

153
00:09:50.563 --> 00:09:52.566
&gt;&gt; That's a good question.

154
00:09:52.566 --> 00:09:57.120
The question was, why we're
declaring these in this Lib folder

155
00:09:57.120 --> 00:10:01.184
versus declaring the in their
perspective components?

156
00:10:01.184 --> 00:10:05.276
The reason I'm doing it is because
although you can do things in server,

157
00:10:05.276 --> 00:10:06.482
well, first of all,

158
00:10:06.482 --> 00:10:10.521
these are gonna be using client
components and not server components.

159
00:10:10.521 --> 00:10:14.712
And I would say the top three reasons
I would probably move them out is one,

160
00:10:14.712 --> 00:10:18.429
when it comes to writing tests,
if this isn't a component file,

161
00:10:18.429 --> 00:10:23.095
now you gotta set up your test to handle
components cuz you're gonna import it from

162
00:10:23.095 --> 00:10:26.169
a component file just to be
able to get access to this.

163
00:10:26.169 --> 00:10:28.110
So maybe I just wanna
unit test it separately.

164
00:10:28.110 --> 00:10:30.551
So that's one thing.

165
00:10:30.551 --> 00:10:32.510
Two, I want separation of concerns.

166
00:10:32.510 --> 00:10:37.326
Maybe that client component is just
full of UI stuff, tell when classes,

167
00:10:37.326 --> 00:10:38.655
style components.

168
00:10:38.655 --> 00:10:42.118
And the last thing I wanna do
is add all this stuff to it.

169
00:10:42.118 --> 00:10:45.569
And then three, not in this app,
but another example.

170
00:10:45.569 --> 00:10:48.950
You might reuse this function
in more than one place.

171
00:10:48.950 --> 00:10:53.162
It might not just be used in that one
component, it might also be reused.

172
00:10:53.162 --> 00:10:57.289
Just somewhere over here on this page,
there might be many points of where

173
00:10:57.289 --> 00:11:00.162
someone can register and
not just that component.

174
00:11:00.162 --> 00:11:04.069
And you don't wanna be importing
a component into another component just to

175
00:11:04.069 --> 00:11:05.968
get a function from that component.

176
00:11:05.968 --> 00:11:09.902
You could have just put that
component in its own file

177
00:11:09.902 --> 00:11:12.914
&gt;&gt; And to make sure we're talking about

178
00:11:12.914 --> 00:11:19.141
the same thing, Next.js is serverless
API route like we would [INAUDIBLE].

179
00:11:19.141 --> 00:11:22.306
Is that what you mean by components,
is like pages in there?

180
00:11:22.306 --> 00:11:23.648
&gt;&gt; No, actual component.

181
00:11:23.648 --> 00:11:25.134
&gt;&gt; Were you not asking?

182
00:11:25.134 --> 00:11:26.980
&gt;&gt; That's what I'm asking about.

183
00:11:26.980 --> 00:11:30.598
&gt;&gt; Though, so, okay,
we still have to make those APIs.

184
00:11:30.598 --> 00:11:34.865
&gt;&gt; This is just the, are you saying,
why do we need to fetch those APIs,

185
00:11:34.865 --> 00:11:38.118
why can't we just talk to
them without the network?

186
00:11:38.118 --> 00:11:41.585
&gt;&gt; So in my experience with an X12,

187
00:11:41.585 --> 00:11:47.561
I would maybe in their pages
slash API make a register page,

188
00:11:47.561 --> 00:11:51.754
and that would have that functionality.

189
00:11:51.754 --> 00:11:53.117
&gt;&gt; And [CROSSTALK] just hit that.

190
00:11:53.117 --> 00:11:54.447
&gt;&gt; So why are we not doing that?

191
00:11:54.447 --> 00:11:58.466
&gt;&gt; No, we are,
this functionality is what's gonna hit it.

192
00:11:58.466 --> 00:12:01.947
This is the slash API that
you're talking about.

193
00:12:01.947 --> 00:12:03.563
Yeah, we gotta go make this.

194
00:12:03.563 --> 00:12:06.706
So when I click that button on the form,

195
00:12:06.706 --> 00:12:11.871
it's gonna make a post request
to that API to handle it, right?

196
00:12:11.871 --> 00:12:17.524
But what's the mechanism from hitting the
button on the form to getting to the API,

197
00:12:17.524 --> 00:12:18.431
it's this.

