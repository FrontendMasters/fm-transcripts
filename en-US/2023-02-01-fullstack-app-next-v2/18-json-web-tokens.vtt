WEBVTT

1
00:00:00.222 --> 00:00:03.265
The next thing we wanna talk
about is JSON Web Tokens.

2
00:00:03.265 --> 00:00:08.407
So for JSON Web Tokens, that's gonna be
our preferred strategy of authentication.

3
00:00:08.407 --> 00:00:10.219
Cuz it's just easy to deal with,

4
00:00:10.219 --> 00:00:14.886
especially with service environments where
you don't typically have a long running

5
00:00:14.886 --> 00:00:17.818
task, where you can keep
track of state on a session.

6
00:00:17.818 --> 00:00:21.561
So we'll just use JSON Web Tokens and
put them in a cookie.

7
00:00:21.561 --> 00:00:25.221
And the reason we're gonna put them
in a cookie, is so that we can access

8
00:00:25.221 --> 00:00:29.369
them pretty much anywhere on our network
layer, whether that's on the server,

9
00:00:29.369 --> 00:00:32.912
whether that's in middleware,
on the edge, and things like that.

10
00:00:32.912 --> 00:00:35.609
So kinda getting the best
of both worlds there.

11
00:00:35.609 --> 00:00:40.658
So we need to make some utility
functions to create some

12
00:00:40.658 --> 00:00:45.596
JSON Web Tokens, and
to verify some JSON Web Tokens,

13
00:00:45.596 --> 00:00:49.984
and then to grab a JSON Web Token
from a cookie and

14
00:00:49.984 --> 00:00:54.291
turn that back into
whatever the payload was.

15
00:00:54.291 --> 00:00:59.499
If you don't know what a JSON Web Token
is, without getting into

16
00:00:59.499 --> 00:01:04.417
all the details of it,
you can think of it as taking a object,

17
00:01:04.417 --> 00:01:09.241
some payload, and
converting it to some globally standard

18
00:01:09.241 --> 00:01:13.213
string that you can use
that's gonna be unique.

19
00:01:13.213 --> 00:01:17.732
And when you get that string on your
server, you can undo that operation and

20
00:01:17.732 --> 00:01:19.106
get back that object.

21
00:01:19.106 --> 00:01:22.376
So it's basically a stateless
way to do authentication.

22
00:01:22.376 --> 00:01:26.822
You just have to send that JSON Web Token
to any protected resource every time

23
00:01:26.822 --> 00:01:30.711
you wanna access it, so the server
can verify that JSON Web Token to

24
00:01:30.711 --> 00:01:35.667
determine if you have access, if you're
allowed, who you are, things like that.

25
00:01:35.667 --> 00:01:39.123
Versus a session where you don't really
need to do anything cuz the server's

26
00:01:39.123 --> 00:01:40.146
keeping track of you.

27
00:01:40.146 --> 00:01:43.229
In this case,
the server won't keep track of our users,

28
00:01:43.229 --> 00:01:47.549
the users are responsible for sending
a JSON Web Token on every single request.

29
00:01:47.549 --> 00:01:50.796
But because it's gonna be in a cookie,
it's gonna be sent on every request

30
00:01:50.796 --> 00:01:53.485
automatically, by default, so
we don't have to look it up.

31
00:01:53.485 --> 00:01:55.064
So that's what we're doing there.

32
00:01:55.064 --> 00:01:55.957
All right, so let's do that.

33
00:01:55.957 --> 00:02:01.796
So in the same file, which was auth,
we're going to import a few things here

34
00:02:01.796 --> 00:02:08.032
at the top, From this package called Jose.

35
00:02:08.032 --> 00:02:12.384
So one is called, what is it?

36
00:02:12.384 --> 00:02:18.241
JWTValidate, [INAUDIBLE].

37
00:02:19.891 --> 00:02:24.019
We're gonna do Sign.JWT and

38
00:02:24.019 --> 00:02:27.986
we're gonna do jwtVerify.

39
00:02:27.986 --> 00:02:29.648
So let's get those in here.

40
00:02:32.240 --> 00:02:36.171
SignJWT and jwtVerify.

41
00:02:38.345 --> 00:02:39.942
Then we'll make two functions.

42
00:02:39.942 --> 00:02:44.748
The first one is gonna be,
createJWT, takes in a user object,

43
00:02:44.748 --> 00:02:47.571
and it just creates a JSON Web Token.

44
00:02:49.550 --> 00:02:54.547
So we'll do that, export const createJWT,

45
00:02:54.547 --> 00:02:59.818
takes in the user, And it does this.

46
00:02:59.818 --> 00:03:03.169
So I'm gonna walk through this to
explain kinda what's going on.

47
00:03:03.169 --> 00:03:09.974
Also noted in production, I probably
wouldn't set up my own authentication.

48
00:03:09.974 --> 00:03:15.333
Not because I don't want to,
I just think it's so hard to get it right.

49
00:03:15.333 --> 00:03:18.334
And I also would rather just work
on the application code, and

50
00:03:18.334 --> 00:03:21.116
not have to reinvent
authentication every single time.

51
00:03:21.116 --> 00:03:22.880
Once you get authentication done, and

52
00:03:22.880 --> 00:03:26.523
it works, you should probably use it that
way for most of the apps going forward.

53
00:03:26.523 --> 00:03:29.175
So there's tons of services out there,
and things like that.

54
00:03:29.175 --> 00:03:32.629
But for this course,
I want to limit how many dependencies we

55
00:03:32.629 --> 00:03:36.709
use to make sure that this course is
somewhat kind of last in the future.

56
00:03:36.709 --> 00:03:40.480
I don't wanna bring in some app and
then, a month later,

57
00:03:40.480 --> 00:03:44.262
the app shuts down, and
then the authentication broke.

58
00:03:44.262 --> 00:03:45.785
So we're writing
authentication from scratch.

59
00:03:45.785 --> 00:03:49.409
But in production, if you don't have
a team dedicated to authentication at your

60
00:03:49.409 --> 00:03:52.502
company, you should probably do
authentication with a service, or

61
00:03:52.502 --> 00:03:54.899
some open source package that
does most of it for you,

62
00:03:54.899 --> 00:03:56.899
versus creating it from scratch yourself.

63
00:03:58.176 --> 00:04:00.688
But this is how you would do it, yes.

64
00:04:00.688 --> 00:04:05.956
&gt;&gt; Just a shout out to Maximiliano Firtman
just launched a Full Stack

65
00:04:05.956 --> 00:04:12.472
authentication course on Frontend Masters
that kinda gets into federated log,

66
00:04:12.472 --> 00:04:19.022
federated authentication, WebAuthn,
pass keys, and a lot of those options.

67
00:04:19.022 --> 00:04:22.163
&gt;&gt; Beautiful, I might take that
course that sounds amazing.

68
00:04:22.163 --> 00:04:24.432
[LAUGH] There's so
much to learn in authentication.

69
00:04:24.432 --> 00:04:27.895
It seems simple on the surface,
and then the more you dig,

70
00:04:27.895 --> 00:04:30.098
you're like, wait, hold on.

71
00:04:30.098 --> 00:04:33.923
And it just goes like onions,
there's layers to it, it never stops.

72
00:04:33.923 --> 00:04:37.152
And then you get to the center,
there's another onion.

73
00:04:37.152 --> 00:04:40.072
[LAUGH] And it just doesn't stop.

74
00:04:40.072 --> 00:04:41.968
But yeah, yeah.

75
00:04:41.968 --> 00:04:46.340
&gt;&gt; And one more question, do you
have any services that you've worked

76
00:04:46.340 --> 00:04:49.724
with that you recommend,
or like, for doing auth?

77
00:04:49.724 --> 00:04:54.034
&gt;&gt; Yeah, there's so many, but I'm only
gonna recommend the ones that I've used,

78
00:04:54.034 --> 00:04:57.038
because I don't like
recommending things I don't use.

79
00:04:57.038 --> 00:04:59.304
The one I've been using
lately has been called Clerk.

80
00:04:59.304 --> 00:05:03.021
This was actually really cool,
kinda reminds me of Auth0 back in the day,

81
00:05:03.021 --> 00:05:04.502
when Auth0 was really dope.

82
00:05:04.502 --> 00:05:06.107
And now it's kind of just like,

83
00:05:06.107 --> 00:05:09.027
they don't care about you
unless you're a huge company.

84
00:05:09.027 --> 00:05:11.965
This is actually super easy,
I've been liking that one.

85
00:05:11.965 --> 00:05:16.539
There's another one that's really cool,
called SuperTokens.

86
00:05:16.539 --> 00:05:20.446
It's a little different to use, but once
you get it set up, it's also really cool.

87
00:05:20.446 --> 00:05:22.737
So check those out.

88
00:05:22.737 --> 00:05:25.866
And then if you want something
a little more low level,

89
00:05:25.866 --> 00:05:29.675
where it's like you still kind of
manage the authentication, and

90
00:05:29.675 --> 00:05:32.413
it's not some service you pay for,
NextAuth.

91
00:05:32.413 --> 00:05:35.322
I believe I've talked about this
one in a V1 version of this course.

92
00:05:35.322 --> 00:05:37.262
So you can check out NextAuth.

93
00:05:37.262 --> 00:05:40.030
It's kinda like,
if you ever use Express and Passport,

94
00:05:40.030 --> 00:05:42.751
it's kind of like Passport for
Next.js, basically.

95
00:05:42.751 --> 00:05:45.091
It's a little complicated to set up.

96
00:05:45.091 --> 00:05:49.079
It's mostly useful when you wanna do
things like Social Auth, OAuth, and

97
00:05:49.079 --> 00:05:50.043
stuff like that.

98
00:05:50.043 --> 00:05:52.752
It makes it very easy to set that up.

99
00:05:52.752 --> 00:05:54.775
If you're just only doing email and
password,

100
00:05:54.775 --> 00:05:56.453
it's kind of overkill to really have.

101
00:05:56.453 --> 00:06:00.955
So I would say those three, cuz these are
the only three that I've used lately, but

102
00:06:00.955 --> 00:06:03.030
there's definitely more out there.

103
00:06:03.030 --> 00:06:07.365
In fact, if you go to the Next.js docs,

104
00:06:09.300 --> 00:06:12.735
They have a section here just for auth.

105
00:06:12.735 --> 00:06:17.216
And they have a list of providers
down here that you can check out,

106
00:06:17.216 --> 00:06:18.368
with examples.

107
00:06:18.368 --> 00:06:21.499
Each one of these links to an example app,
for instance, Magic.

108
00:06:21.499 --> 00:06:23.592
Magic is a good one,
I just haven't tried it in a while.

109
00:06:23.592 --> 00:06:26.589
But you can look at the example
code of how they use it.

110
00:06:26.589 --> 00:06:28.076
And for the most part,

111
00:06:28.076 --> 00:06:32.392
it should work the same as far as
how you make the authentication.

112
00:06:32.392 --> 00:06:35.942
Because I know these example apps
will be in version 12 Next.js, but

113
00:06:35.942 --> 00:06:38.675
how you do the authentication
probably work the same.

114
00:06:38.675 --> 00:06:42.177
The only thing that's probably different
is how you validate the authentication.

115
00:06:42.177 --> 00:06:43.175
That would probably be different.

116
00:06:43.175 --> 00:06:46.426
But, yeah, take a look at that
list of resources, if you want,

117
00:06:46.426 --> 00:06:47.884
see what's going on there.

118
00:06:51.734 --> 00:06:52.808
Any other questions?

119
00:06:54.489 --> 00:06:59.623
No, okay, all righty, so createJWT.

120
00:06:59.623 --> 00:07:01.493
Like I said, it takes a user object, and

121
00:07:01.493 --> 00:07:04.190
then we're just going to create
an expiration date here.

122
00:07:04.190 --> 00:07:06.616
That's the thing about JSON Web Tokens,
they have to expire.

123
00:07:06.616 --> 00:07:11.335
Or you should make them expire,
otherwise, that's a security threat.

124
00:07:11.335 --> 00:07:15.915
So this is just an expiration date that's
basically expiring a week from today.

125
00:07:15.915 --> 00:07:18.854
That's basically what this is saying.

126
00:07:18.854 --> 00:07:20.007
And then we're gonna sign it.

127
00:07:20.007 --> 00:07:22.591
So to sign a JSON Web Token is to do this,
right?

128
00:07:22.591 --> 00:07:25.457
So take an object, so in this case,

129
00:07:25.457 --> 00:07:29.863
the user payload that has
the user's ID and the email.

130
00:07:29.863 --> 00:07:31.168
You can put whatever you want on here.

131
00:07:31.168 --> 00:07:33.533
I decided to put the ID and the email,

132
00:07:33.533 --> 00:07:37.975
because those are two unique fields
that identify your user easily.

133
00:07:37.975 --> 00:07:41.565
So when I verify this JSON Web Token and
I get the payload back,

134
00:07:41.565 --> 00:07:44.687
I wanna be able to quickly
determine who this user is.

135
00:07:44.687 --> 00:07:49.249
So email and ID make sense for me,
because I'm probably gonna do some unique

136
00:07:49.249 --> 00:07:53.970
database query after that, on the ID or
the email, to determine some things.

137
00:07:53.970 --> 00:07:57.611
If your app had RBAC, which stands for
role-based access control,

138
00:07:57.611 --> 00:08:01.192
where users can have different roles and
different permissions for

139
00:08:01.192 --> 00:08:05.106
different things, you might wanna put
that in a JSON Web Token, as well.

140
00:08:05.106 --> 00:08:09.234
So you can quickly check if a user has
the right permission to make this query,

141
00:08:09.234 --> 00:08:11.404
to hit this API, to do things like that.

142
00:08:11.404 --> 00:08:15.655
So put whatever is useful in this payload,
but keep it minimal,

143
00:08:15.655 --> 00:08:19.133
because the string gets bigger and
stuff like that.

144
00:08:19.133 --> 00:08:21.964
So, yeah, payload, crypto stuff,

145
00:08:21.964 --> 00:08:25.771
the algorithm that you're
gonna use to sign this.

146
00:08:25.771 --> 00:08:27.667
There's many different algorithms.

147
00:08:27.667 --> 00:08:30.931
You don't need to concern
yourself with this, at all.

148
00:08:30.931 --> 00:08:33.927
This is why I say,
look into other authentication stuff, or

149
00:08:33.927 --> 00:08:36.650
become some authentication
expert with that course.

150
00:08:36.650 --> 00:08:40.131
But, yeah, this is just an algorithm
that's going to use expiration.

151
00:08:40.131 --> 00:08:42.405
When it was issued and not before.

152
00:08:42.405 --> 00:08:45.376
And then the last thing
is to actually sign it.

153
00:08:45.376 --> 00:08:48.148
So, I have to use this
thing called a TextEncoder,

154
00:08:48.148 --> 00:08:50.608
which basically just
turns this to a buffer.

155
00:08:50.608 --> 00:08:53.690
And then,
we have to sign it with a secret.

156
00:08:53.690 --> 00:08:56.894
The reason you have to sign
a JSON Web Token with a secret is because

157
00:08:56.894 --> 00:08:58.874
anybody could sign a JSON Web Token, and

158
00:08:58.874 --> 00:09:02.797
we wanna make sure it's coming from our
server and not someone else's server.

159
00:09:02.797 --> 00:09:04.211
So the secret is just to make,

160
00:09:04.211 --> 00:09:07.785
cuz you could take a JSON Web Token from
some other app, send it to this app.

161
00:09:07.785 --> 00:09:12.437
And I could just verify it, I'm like,
yeah, you have a JSON Web Token, cool.

162
00:09:12.437 --> 00:09:16.637
And it'll verify, and maybe I'll do
a check after that to determine,

163
00:09:16.637 --> 00:09:18.249
you're not allowed here.

164
00:09:18.249 --> 00:09:22.394
But I don't even want you to be verified,
in the first place, so,

165
00:09:22.394 --> 00:09:24.033
a secret helps with that.

166
00:09:24.033 --> 00:09:29.455
Cool, any questions on that?

167
00:09:29.455 --> 00:09:36.669
No, all right, and for the next one
is to validate a JSON Web Token.

168
00:09:36.669 --> 00:09:38.196
This one's a lot more simpler.

169
00:09:40.320 --> 00:09:44.876
The way this works is, it takes in the
JSON Web Token, which, again, is gonna be

170
00:09:44.876 --> 00:09:49.508
a string, because the result of signing
a JSON Web Token is sending back a string.

171
00:09:51.958 --> 00:09:55.221
We're gonna take that string,
and then we're gonna verify it.

172
00:09:55.221 --> 00:10:00.305
So we passed a string in here,
and the same secret

173
00:10:00.305 --> 00:10:05.143
we used to sign it,
we have to use to verify it.

174
00:10:05.143 --> 00:10:07.421
And then once we do that,
we can get back to payload.

175
00:10:07.421 --> 00:10:09.841
And in this case, for
me it's payload.payload.

176
00:10:09.841 --> 00:10:14.629
Because it's called
payload from this library,

177
00:10:14.629 --> 00:10:18.058
but I also put a key called payload.

178
00:10:18.058 --> 00:10:19.723
So it's payload.payload.

179
00:10:19.723 --> 00:10:21.097
It happens sometimes.

180
00:10:23.319 --> 00:10:25.726
I was thinking about changing it and
I was like, no,

181
00:10:25.726 --> 00:10:27.277
I kinda want that to say payload.

182
00:10:27.277 --> 00:10:28.463
I really do, I don't know.

183
00:10:28.463 --> 00:10:31.625
So, I guess, I could have called
this user, but, whatever.

184
00:10:35.399 --> 00:10:37.342
So once you have all that, you also,

185
00:10:37.342 --> 00:10:42.130
have you noticed we have a new environment
variable here, process.env.JWT_SECRET?

186
00:10:42.130 --> 00:10:46.865
So you need to go into your env,
and you need to make that.

187
00:10:46.865 --> 00:10:50.417
So let's do it.

188
00:10:50.417 --> 00:10:54.203
You could just copy it, JWT_SECRET.

189
00:10:54.203 --> 00:10:56.818
And it can be anything,
just put any string you want.

190
00:10:56.818 --> 00:10:59.972
It literally doesn't matter,
just don't add any spaces.

191
00:10:59.972 --> 00:11:02.901
Actually I think spaces work,
too, but I just don't use them.

192
00:11:02.901 --> 00:11:04.480
I can't verify that.

193
00:11:04.480 --> 00:11:05.505
But you can put whatever you want.

194
00:11:05.505 --> 00:11:10.859
I'll just put JWT_SECRET=shhh_my_precious.

195
00:11:13.661 --> 00:11:17.322
All right, cuz this is just local, you'll
probably change it in production, or

196
00:11:17.322 --> 00:11:18.978
you should change it in production.

197
00:11:18.978 --> 00:11:23.029
You should use something to generate
this for you, versus writing it in.

198
00:11:28.441 --> 00:11:31.362
Cool, and whenever you change
environment variable in Next.js,

199
00:11:31.362 --> 00:11:34.961
if you want it to pick up the environment
variable, you have to restart the server.

200
00:11:34.961 --> 00:11:37.052
It's not gonna pick it up live, so,

201
00:11:37.052 --> 00:11:40.503
you have to restart the server
eventually to get this to run.

202
00:11:45.294 --> 00:11:47.025
Cool, any questions on that?

203
00:11:53.353 --> 00:11:55.871
All right, and you guys understand
why we gotta put that JWT in

204
00:11:55.871 --> 00:11:58.400
an environment variable and
not just hard-code it, right?

205
00:11:58.400 --> 00:12:03.184
Cuz if someone had access to that secret,
then now they can have their server

206
00:12:03.184 --> 00:12:07.313
issue out JSON Web Tokens that
could be used to access our server.

207
00:12:07.313 --> 00:12:10.537
So it has to be secret, yes.

208
00:12:10.537 --> 00:12:11.913
&gt;&gt; Does the length and

209
00:12:11.913 --> 00:12:17.511
complexity of the secret affect how
secure the password is, or the token is?

210
00:12:17.511 --> 00:12:18.833
&gt;&gt; I have no idea.

211
00:12:18.833 --> 00:12:20.397
Yeah, it might.

212
00:12:20.397 --> 00:12:24.809
I think it really depends on
the algorithm and things like that.

213
00:12:24.809 --> 00:12:30.342
But, yeah, that's some low level
cryptography that I do not know about.

214
00:12:30.342 --> 00:12:36.206
It could, I do know the payload affects
the length of the JSON Web Token.

215
00:12:36.206 --> 00:12:39.865
So bigger the payload,
the bigger the the JSON Web Token.

216
00:12:47.071 --> 00:12:50.993
Cool, yes.

217
00:12:50.993 --> 00:12:54.165
&gt;&gt; I see that Scott is
doing a type assertion for

218
00:12:54.165 --> 00:12:57.609
payload.payload to turn
it into the type any.

219
00:12:57.609 --> 00:13:03.161
Will that generally be some kind of
object, or can it really be anything?

220
00:13:03.161 --> 00:13:08.395
&gt;&gt; It's gonna be whatever you put here,
on Sign.

221
00:13:08.395 --> 00:13:13.203
Typically it's an object, but, yeah,
it literally can be whatever you put here.

222
00:13:13.203 --> 00:13:18.942
In this case, for me, it's an object
that has an ID and an email.

223
00:13:18.942 --> 00:13:23.043
And I just put any because TypeScript was
screaming at me and I didn't like it.

224
00:13:23.043 --> 00:13:24.321
So I just ended it.

225
00:13:24.321 --> 00:13:29.560
But realistically, what you would do is
you would, probably, make some interface,

226
00:13:29.560 --> 00:13:33.390
or something, and share it here,
and then also share it here.

227
00:13:33.390 --> 00:13:37.688
I think with Prisma,
because this is gonna be a user object,

228
00:13:37.688 --> 00:13:42.346
we actually have the Prisma types
given to us, so we can use that.

229
00:13:42.346 --> 00:13:45.423
I'm pretty sure we could say
something like this, User, and

230
00:13:45.423 --> 00:13:47.620
let's see if it's from Prisma somewhere.

231
00:13:50.154 --> 00:13:51.224
I know it's in here.

232
00:13:53.461 --> 00:13:55.766
Or actually if I type Project,
I might find it.

233
00:13:58.069 --> 00:14:01.556
Maybe not, Prisma does allow you to
get the types that it generates for

234
00:14:01.556 --> 00:14:04.230
your schema and
you can use them in your application.

235
00:14:04.230 --> 00:14:07.495
I think we have an example here somewhere
where we're actually gonna do that, and

236
00:14:07.495 --> 00:14:08.690
it'll get pretty involved.

237
00:14:08.690 --> 00:14:10.342
So you could do that, but yeah,

238
00:14:10.342 --> 00:14:13.479
this is just me coercing TypeScript
to stop screaming at me.

239
00:14:17.659 --> 00:14:21.639
Cool, any other questions?

240
00:14:21.639 --> 00:14:26.053
All right,
almost done with these utility functions.

241
00:14:26.053 --> 00:14:32.240
So one of the last ones we need to do is
get the JSON Web Token from the cookies,

242
00:14:32.240 --> 00:14:38.044
and then from there, validate that
JSON Web Token, and then from there

243
00:14:38.044 --> 00:14:44.354
check to see if the ID from that JSON Web
Token is indeed a user in our database.

244
00:14:44.354 --> 00:14:50.449
Because, maybe, this is a JSON Web Token
from us, maybe it does have an ID.

245
00:14:50.449 --> 00:14:56.170
But, maybe, since when we issued the ID
until when you try to use our application,

246
00:14:56.170 --> 00:14:58.067
you deleted your account.

247
00:14:58.067 --> 00:15:00.925
So this extra check of like,
I'm gonna take this ID and

248
00:15:00.925 --> 00:15:03.383
check to see if this user
is actually in a database,

249
00:15:03.383 --> 00:15:06.700
is just verifying that there's a user
in a database with this ID, and

250
00:15:06.700 --> 00:15:10.680
that they didn't leave, or they don't
no longer exist, or anything like that.

251
00:15:10.680 --> 00:15:14.269
So it's just an extra step of guarantees.

252
00:15:14.269 --> 00:15:18.446
So let's do that.

253
00:15:18.446 --> 00:15:22.440
We'll say, exports const,
these are from cookie.

254
00:15:22.440 --> 00:15:27.984
And this property right here,
this cookie argument that it's taking, or

255
00:15:27.984 --> 00:15:34.408
cookies, it's gonna come from Next.js has
a cookies library that we're gonna use,

256
00:15:34.408 --> 00:15:38.285
that's gonna allow us to
get access to the cookies.

257
00:15:38.285 --> 00:15:41.026
So that's why I'm passing it in here,

258
00:15:41.026 --> 00:15:44.690
versus just importing
the cookies library myself.

259
00:15:44.690 --> 00:15:48.625
I'll talk about that error,
why I didn't do that, in a minute.

260
00:15:48.625 --> 00:15:52.576
But it has something to do with,
I think I said this earlier,

261
00:15:52.576 --> 00:15:58.089
Next.js being confused about API functions
being client components at this time.

262
00:15:58.089 --> 00:16:00.308
It thinks API functions
are client components.

263
00:16:00.308 --> 00:16:04.661
And whenever I try to import some
server only code in here, and

264
00:16:04.661 --> 00:16:09.785
then this file ends up getting imported
into a API function, it breaks.

265
00:16:09.785 --> 00:16:12.924
Because that code, that package,
in case the cookies package,

266
00:16:12.924 --> 00:16:16.066
was only meant for server components and
not client components,

267
00:16:16.066 --> 00:16:18.482
which it thinks the API
handlers are at this time.

268
00:16:18.482 --> 00:16:22.316
So you had to do this whole workaround,
passing the cookies in.

269
00:16:22.316 --> 00:16:24.471
All right, so we got that.

270
00:16:24.471 --> 00:16:28.220
And then what we need to do is just get
the cookies using this new environment

271
00:16:28.220 --> 00:16:28.825
variable.

272
00:16:28.825 --> 00:16:29.611
So we're gonna do that.

273
00:16:29.611 --> 00:16:34.541
So we're gonna say, jwt = cookies.get, and

274
00:16:34.541 --> 00:16:39.355
we're gonna say process,
or is it targeted?

275
00:16:39.355 --> 00:16:46.777
Yes, process.env, and
we're gonna use COOKIE_NAME.

276
00:16:46.777 --> 00:16:51.672
And that means you need to go make a new
environment variable in your env file, so

277
00:16:51.672 --> 00:16:53.222
we're gonna go do that.

278
00:16:53.222 --> 00:16:56.224
And just like the secret, I mean, you can
kind of just call it whatever you want.

279
00:16:56.224 --> 00:17:02.263
I'm just gonna call it project_app_,
whatever.

280
00:17:02.263 --> 00:17:05.862
In production, I don't know how
teams come up with cookie names, but

281
00:17:05.862 --> 00:17:08.673
somebody has to kinda come up with one,
I don't know.

282
00:17:12.904 --> 00:17:15.008
So you got that environment variable.

283
00:17:15.008 --> 00:17:18.303
And then from there, we just need to call
our validate function, which is async.

284
00:17:18.303 --> 00:17:19.553
So we wanna validate that.

285
00:17:24.327 --> 00:17:30.303
So we'll say, {id} = await jwtVerify.

286
00:17:30.303 --> 00:17:32.154
Let me make this an async function.

287
00:17:35.277 --> 00:17:37.426
Then we can pass in jwt.

288
00:17:37.426 --> 00:17:40.102
I'm sorry validate, not that one.

289
00:17:40.102 --> 00:17:40.696
There we go.

290
00:17:44.908 --> 00:17:46.351
So now we have our id.

291
00:17:46.351 --> 00:17:49.431
We're validating it in jwt,
given this jwt string.

292
00:17:51.624 --> 00:17:54.873
And then from there, like I said,
the last thing we wanna do is just query

293
00:17:54.873 --> 00:17:57.288
the database to find a user
with that id and return it.

294
00:17:57.288 --> 00:17:58.137
So let's do that.

295
00:17:58.137 --> 00:18:03.806
So first we need to bring in our db
helper, that we created right here.

296
00:18:03.806 --> 00:18:09.859
Which, if you remember, is just Prisma,
just a cache instance of Prisma.

297
00:18:12.177 --> 00:18:17.353
So now we can say user = await

298
00:18:17.353 --> 00:18:24.911
db.user.findUnique, where id is id.

299
00:18:27.206 --> 00:18:28.659
And we're just gonna return user.

