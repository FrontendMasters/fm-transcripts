WEBVTT

1
00:00:00.000 --> 00:00:07.060
So we left off last with the auth form
where we created the auth form and

2
00:00:07.060 --> 00:00:13.417
added it to the pages,
the sign in page and the register page.

3
00:00:13.417 --> 00:00:17.017
Now we need to actually
make the API routes and

4
00:00:17.017 --> 00:00:22.146
all the utility functions necessary
to make the auth form work.

5
00:00:22.146 --> 00:00:25.594
So we can get in our app, so
let's take a look at that.

6
00:00:25.594 --> 00:00:31.843
So like always gonna head over to
the notes here you go, take a look at.

7
00:00:31.843 --> 00:00:36.266
So we did the pages now if you go look at
this next one, we're going to focus on

8
00:00:36.266 --> 00:00:40.278
passwords because when we wrote
the seed script we just went ahead and

9
00:00:40.278 --> 00:00:44.635
just put plain text passwords in there
which you know for obvious reasons we

10
00:00:44.635 --> 00:00:48.993
don't want plain text passwords in
the database so we need to be able to hash

11
00:00:48.993 --> 00:00:53.457
those passwords and check those passwords
for sign in and things like that.

12
00:00:53.457 --> 00:00:55.078
So that's what we need to do.

13
00:00:55.078 --> 00:00:59.564
So we're going to make some utility
functions that we're going to use inside

14
00:00:59.564 --> 00:01:03.359
of our API handlers that are all form
is going to make API calls to so

15
00:01:03.359 --> 00:01:05.030
we can sign in and register.

16
00:01:05.030 --> 00:01:06.329
So let's do that.

17
00:01:06.329 --> 00:01:10.122
So first things first is,
to get to this code,

18
00:01:15.311 --> 00:01:19.297
And if you remember how
I organize my code,

19
00:01:19.297 --> 00:01:22.967
I like to just put separate things out.

20
00:01:22.967 --> 00:01:28.671
So in my lib folder,
we have this API we have this DB,

21
00:01:28.671 --> 00:01:32.700
I'm gonna get another one for auth.

22
00:01:32.700 --> 00:01:33.783
Like that.

23
00:01:36.734 --> 00:01:41.518
And then inside of here, we're gonna use
bcrypt from a package called bcrypt.

24
00:01:41.518 --> 00:01:45.002
And this other package called Jose for
something called, for JSON web tokens,

25
00:01:45.002 --> 00:01:46.207
which we'll get to later.

26
00:01:46.207 --> 00:01:49.754
But mostly we're just gonna use
bcrypt here to hash passwords and

27
00:01:49.754 --> 00:01:51.249
compare those passwords.

28
00:01:51.249 --> 00:01:52.445
So let's do that.

29
00:01:52.445 --> 00:01:57.356
So we're just gonna import bcrypt and

30
00:01:57.356 --> 00:02:01.657
it should already be installed.

31
00:02:01.657 --> 00:02:04.713
If not, go ahead and install it.

32
00:02:04.713 --> 00:02:12.157
And I'm going to add a function here,
hash password, like so.

33
00:02:12.157 --> 00:02:16.634
And it's just going to be bcrypt.hash.

34
00:02:16.634 --> 00:02:24.250
Hash It's gonna take in a plaintext
password is its only argument or a hash.

35
00:02:24.250 --> 00:02:26.046
That's my thoughts.

36
00:02:26.046 --> 00:02:30.861
And I believe, yeah,
this takes like how many

37
00:02:30.861 --> 00:02:34.744
rounds of salting you want to do there?

38
00:02:34.744 --> 00:02:35.626
And that's it.

39
00:02:35.626 --> 00:02:36.652
It's pretty simple.

40
00:02:36.652 --> 00:02:40.449
This is also async by default so when we
use hash password we'll have to await it

41
00:02:40.449 --> 00:02:43.800
because it's got to happen
asynchronously and not synchronously.

42
00:02:45.796 --> 00:02:50.147
This thing is frequent I guess.

43
00:02:50.147 --> 00:02:51.943
Maybe I don't have bcrypt.

44
00:02:51.943 --> 00:02:55.810
I'll just install it
just in case let's see or

45
00:02:55.810 --> 00:03:01.076
maybe just wants the types,
yeah it just wants the types for i.

46
00:03:01.076 --> 00:03:05.348
I thought they fixed this with an
automatic that happens forever [INAUDIBLE]

47
00:03:05.348 --> 00:03:06.719
Maybe not, all right.

48
00:03:08.227 --> 00:03:08.777
Of course.

49
00:03:08.777 --> 00:03:12.627
So we got hash password,
that's what we gonna use for sign up.

50
00:03:12.627 --> 00:03:15.714
But for
sign in we gonna compare the passwords.

51
00:03:15.714 --> 00:03:19.086
We are going to take the plain text
password that you post on the form and

52
00:03:19.086 --> 00:03:22.361
we are going to compare with the hash
password for the users.safe.

53
00:03:22.361 --> 00:03:27.190
If they both match when both hash
then you typed in the right password.

54
00:03:27.190 --> 00:03:28.289
If they don't, then you didn't.

55
00:03:28.289 --> 00:03:29.660
So that's what we're going to do now.

56
00:03:29.660 --> 00:03:37.158
So compare passwords like that.

57
00:03:37.158 --> 00:03:41.718
And this one's just gonna take,
like I said, a plain text password and

58
00:03:41.718 --> 00:03:45.670
then the hashed password that
should be saved in a database and

59
00:03:45.670 --> 00:03:47.813
we're just gonna compare them.

60
00:03:47.813 --> 00:03:54.934
So we'll just say clean
text password here and

61
00:03:54.934 --> 00:03:59.323
then hashed password here.

62
00:03:59.323 --> 00:04:07.257
And I'm just gonna return
bcrypt dot compare like that.

63
00:04:07.257 --> 00:04:11.377
And we're just gonna take
the end plain text and

64
00:04:11.377 --> 00:04:15.291
then the hashed like that and
me export that.

65
00:04:22.014 --> 00:04:24.678
Any questions on those two functions?

66
00:04:24.678 --> 00:04:26.308
Nothing unique to.

67
00:04:26.308 --> 00:04:28.358
It's very common in Node too.

68
00:04:28.358 --> 00:04:31.338
This pattern with bcrypt yeah.

69
00:04:31.338 --> 00:04:35.005
&gt;&gt; So
with the async versus sync functions,

70
00:04:35.005 --> 00:04:39.211
is there a reason why we choose one or
the other?

71
00:04:39.211 --> 00:04:41.855
Like, do we want to do something
while it's awaiting or?

72
00:04:41.855 --> 00:04:43.553
&gt;&gt; Yeah, that's a great question.

73
00:04:43.553 --> 00:04:46.121
The question was the difference
between sync and async.

74
00:04:46.121 --> 00:04:48.316
Why would we choose one over the other?

75
00:04:48.316 --> 00:04:52.216
Typically, in Node.js,
you probably want to use async for

76
00:04:52.216 --> 00:04:56.893
most of the things because synchronous
things are blocking the thread.

77
00:04:56.893 --> 00:05:01.467
That's because by default, Node is
single threaded, as in, It can only,

78
00:05:01.467 --> 00:05:05.541
it can't run like things in parallel
across multiple threads, but

79
00:05:05.541 --> 00:05:10.329
it can do them in the background, because
of just the nature of how JavaScript is

80
00:05:10.329 --> 00:05:14.197
as far as like, you know,
the async queue and things like that.

81
00:05:14.197 --> 00:05:19.146
So when we think there is some
type of somewhat difficult

82
00:05:19.146 --> 00:05:22.320
computational work like hashing.

83
00:05:22.320 --> 00:05:26.474
If you can make that async without
blocking the thread that will enable you

84
00:05:26.474 --> 00:05:31.365
and your server, to take in more requests
while that's actually happening whereas if

85
00:05:31.365 --> 00:05:35.586
this was synchronous and I don't know
let's say this thing took forever,

86
00:05:35.586 --> 00:05:40.495
you were trying to compute, you know, some
algorithms on a chessboard or something.

87
00:05:40.495 --> 00:05:41.510
And it took a long time.

88
00:05:41.510 --> 00:05:44.847
You couldn't get any more requests to
come in and your server would stall.

89
00:05:44.847 --> 00:05:48.754
Granted, I know we're using serverless,
and that's not the case here because each

90
00:05:48.754 --> 00:05:51.524
function each serverless
invocation is its own instance and

91
00:05:51.524 --> 00:05:53.711
it doesn't block another
one from happening.

92
00:05:53.711 --> 00:05:55.217
So we don't have to worry about that.

93
00:05:55.217 --> 00:06:00.956
But you should probably still do things
async when you can and not synchronous.

94
00:06:03.666 --> 00:06:09.239
It is also noted that you can spawn up
multiple threads in Node.js as well,

95
00:06:09.239 --> 00:06:12.165
but by default, that's not enabled.

96
00:06:12.165 --> 00:06:13.315
Cool.
Any other questions?

97
00:06:18.011 --> 00:06:22.028
Okay, because this file,
auth.js, or auth.ts,

98
00:06:22.028 --> 00:06:27.026
is going to be used on the server,
there's a chance that it could be

99
00:06:27.026 --> 00:06:31.760
imported in a server component somehow,
maybe not directly,

100
00:06:31.760 --> 00:06:35.810
maybe indirectly through
a module dependency tree.

101
00:06:35.810 --> 00:06:39.456
Because of that,
we have to tell Next.js that there's

102
00:06:39.456 --> 00:06:44.361
gonna be a dependency that needs to be
enabled in that server environment.

103
00:06:44.361 --> 00:06:46.801
So Next.js allows us to use it.

104
00:06:46.801 --> 00:06:53.891
And the way we can do that is if
we go down to our next config.

105
00:06:53.891 --> 00:06:58.829
You can see that there's a property
here called server components

106
00:06:58.829 --> 00:07:00.422
external packages.

107
00:07:00.422 --> 00:07:01.699
That's exactly what it sounds like.

108
00:07:01.699 --> 00:07:05.896
It's external packages that we want
to use in our server components.

109
00:07:05.896 --> 00:07:12.931
And like I said, this file might be
used in a server component eventually.

110
00:07:12.931 --> 00:07:15.600
It will be used in the server
component eventually.

111
00:07:15.600 --> 00:07:18.610
So we'll have to add that here.

112
00:07:18.610 --> 00:07:22.962
If you don't, whenever your server
component tries to import that file,

113
00:07:22.962 --> 00:07:26.637
it's gonna behave as if you've
never installed that module.

114
00:07:29.606 --> 00:07:34.578
The Next.js team is getting
together a list of commonly

115
00:07:34.578 --> 00:07:38.932
used modules and
adding them to this by default.

116
00:07:38.932 --> 00:07:44.047
For instance, I know when version 13 came
out, Prisma was not added, so you had to

117
00:07:44.047 --> 00:07:49.254
add it here, but now I think it's added by
default, so you don't have to add Prisma.

118
00:07:49.254 --> 00:07:52.614
So, that's probably why if you
did some of the Prisma stuff,

119
00:07:52.614 --> 00:07:55.987
you didn't run into any errors
because it's already added.

120
00:07:55.987 --> 00:07:57.686
But for safety, you can add it as well.

121
00:07:59.412 --> 00:08:02.059
So, that list will probably keep growing,
I'm sure.

122
00:08:04.245 --> 00:08:08.987
So server components run on the server,
but they also run in like a somewhat

123
00:08:08.987 --> 00:08:13.292
contained environment on the server
that Next.js is in charge of.

124
00:08:13.292 --> 00:08:16.229
So it's like yes,
you get full access to everything.

125
00:08:16.229 --> 00:08:20.363
But you just need to make sure
that Next.js is okay with it.

126
00:08:20.363 --> 00:08:26.061
There's also still some bugs where
server component environment

127
00:08:26.061 --> 00:08:32.172
thinks that thinks that serverless
functions are client components.

128
00:08:32.172 --> 00:08:35.878
So if you tried to import some
server component code inside of

129
00:08:35.878 --> 00:08:40.470
a handler API handler, it might think
that handler is a client component.

130
00:08:40.470 --> 00:08:42.385
So there's some things
still happening there.

131
00:08:42.385 --> 00:08:46.620
But, I don't think we're right
into that problem today, yes.

132
00:08:46.620 --> 00:08:50.887
&gt;&gt; So, here looks like
you're including that line,

133
00:08:50.887 --> 00:08:55.740
in experimental but
&gt;&gt; Yes, did I?

134
00:08:55.740 --> 00:08:57.738
Yeah, I didn't move it up one,
thanks, sorry.

