WEBVTT

1
00:00:00.000 --> 00:00:04.850
Now we need to work on the sidebar
component which is basically

2
00:00:04.850 --> 00:00:09.994
just gonna be literally the sidebar
on the left of the dashboard.

3
00:00:09.994 --> 00:00:14.145
So, we can work on that and
this one's pretty simple,

4
00:00:14.145 --> 00:00:17.124
it doesn't really do anything crazy,

5
00:00:17.124 --> 00:00:22.647
although it is going to probably
introduce our first client component.

6
00:00:22.647 --> 00:00:27.639
And that's because in the sidebar,
we wanna be able to highlight

7
00:00:27.639 --> 00:00:32.744
the icon of the route that we're
currently on, the active route.

8
00:00:32.744 --> 00:00:36.690
And we only have access to what route we
are on on the client, so that component

9
00:00:36.690 --> 00:00:40.818
that's been highlighted, the icon
opponent, wherever we call it, needs to be

10
00:00:40.818 --> 00:00:45.340
a client component, because we can't do it
on the server, we don't have access to it.

11
00:00:45.340 --> 00:00:49.663
The hook that we use to access
the current route, you can't use the hook

12
00:00:49.663 --> 00:00:54.276
on the server, so, and there's no
window doubt location on the server, so

13
00:00:54.276 --> 00:00:56.890
there's really, not a good way to get it.

14
00:00:56.890 --> 00:00:59.010
I mean,
I guess you could hack it on the server,

15
00:00:59.010 --> 00:01:02.561
you could look at the request object maybe
and try to figure it out from there, or

16
00:01:02.561 --> 00:01:04.212
the headers or something like that.

17
00:01:04.212 --> 00:01:09.708
But that sounds like a lot of work,
so probably won't do that.

18
00:01:09.708 --> 00:01:13.587
One thing I noticed though,
before we move on, as I was going through,

19
00:01:13.587 --> 00:01:16.968
I don't actually think our
telephone is hooked up properly.

20
00:01:16.968 --> 00:01:21.076
I think something's weird going on here.

21
00:01:21.076 --> 00:01:22.823
I might not have post CSS included.

22
00:01:24.645 --> 00:01:27.843
I thought I did, let's see.

23
00:01:27.843 --> 00:01:30.189
That might be it.

24
00:01:30.189 --> 00:01:33.934
It literally won't work without
post CSS so that probably is it, so

25
00:01:33.934 --> 00:01:35.128
I'm gonna add that.

26
00:01:37.299 --> 00:01:39.631
Come here.

27
00:01:39.631 --> 00:01:43.574
Give me just that part.

28
00:01:45.244 --> 00:01:49.492
Okay, they really didn't
want me to copy that.

29
00:01:49.492 --> 00:01:52.918
So, going to NPM install, postcss,

30
00:01:52.918 --> 00:01:57.209
which is the thing that's
powering Tailwind.

31
00:01:57.209 --> 00:01:59.803
It literally won't work without that,
I thought that was already installed.

32
00:01:59.803 --> 00:02:04.277
And auto prefixer just puts
the WebKit browser prefixers and

33
00:02:04.277 --> 00:02:07.002
all the other prefixers on it for us.

34
00:02:07.002 --> 00:02:10.148
And just means dev dependency.

35
00:02:14.710 --> 00:02:15.459
Cool.

36
00:02:15.459 --> 00:02:19.924
I'm going to run the recommended
command that they have for MPX,

37
00:02:19.924 --> 00:02:21.721
tailwind CSS init dash P.

38
00:02:21.721 --> 00:02:28.029
And so
I'm gonna do let's see what that yields.

39
00:02:28.029 --> 00:02:32.599
I think because we needed a postcss
config, I think that even if it's empty,

40
00:02:32.599 --> 00:02:34.726
I still think you need that config.

41
00:02:34.726 --> 00:02:36.553
Because there's literally nothing in it.

42
00:02:36.553 --> 00:02:42.048
But I think it has to be there.

43
00:02:42.048 --> 00:02:44.908
So run that again.

44
00:02:44.908 --> 00:02:47.676
Yeah, that was it.

45
00:02:47.676 --> 00:02:49.655
You literally have to
have an empty config.

46
00:02:49.655 --> 00:02:54.639
Like who, like what about using the config

47
00:02:54.639 --> 00:02:59.495
file at the config but there it is, cool.

48
00:02:59.495 --> 00:03:03.417
That looks about what I
imagined it to look like.

49
00:03:03.417 --> 00:03:07.798
So I was able to just
get that working by just

50
00:03:07.798 --> 00:03:12.929
running MPX tailwind css one word and
knit dash p.

51
00:03:12.929 --> 00:03:17.173
To initialize that config it detected
that we already had a tailwind config so

52
00:03:17.173 --> 00:03:20.372
it didn't touch that Instead
created a postcss config for

53
00:03:20.372 --> 00:03:22.805
us which we needed even though it's empty.

54
00:03:22.805 --> 00:03:25.051
And we have no configuration.

55
00:03:25.051 --> 00:03:27.947
And that's what will break your app.

56
00:03:31.058 --> 00:03:33.794
Okay, so it looks a lot better.

57
00:03:33.794 --> 00:03:37.058
So what we wanna do now is
working on that sidebar which

58
00:03:37.058 --> 00:03:39.243
we'll go into if we go to home here.

59
00:03:39.243 --> 00:03:43.190
Or I don't have anything at home do I?

60
00:03:43.190 --> 00:03:44.240
Let's see.

61
00:03:47.952 --> 00:03:53.209
I have something at home here I just

62
00:03:53.209 --> 00:04:00.293
stopped the server I think
come on MPM run dev.

63
00:04:02.353 --> 00:04:06.172
So if we go to home here, it's going
to be the thing on the side here,

64
00:04:06.172 --> 00:04:07.990
the little sidebar that we had.

65
00:04:07.990 --> 00:04:09.086
That's the sidebar.

66
00:04:09.086 --> 00:04:09.972
It's literally in the name.

67
00:04:09.972 --> 00:04:11.202
It's a sidebar.

68
00:04:11.202 --> 00:04:13.949
So we'll do that.

69
00:04:13.949 --> 00:04:14.498
Let's do it.

70
00:04:14.498 --> 00:04:18.050
So components.

71
00:04:18.050 --> 00:04:20.895
Sidebar tsx.

72
00:04:27.636 --> 00:04:29.183
I forgot our notes.

73
00:04:29.183 --> 00:04:33.371
Actually what we're gonna do,
we're gonna do the other one,

74
00:04:33.371 --> 00:04:36.228
the one that's a client component first.

75
00:04:36.228 --> 00:04:42.684
So this one's actually going to
be called the side bar link tsx.

76
00:04:42.684 --> 00:04:47.733
Let's do that will first,
be a lot easier to follow.

77
00:04:47.733 --> 00:04:50.207
This is the actual link that's
gonna be in the sidebar.

78
00:04:50.207 --> 00:04:52.187
It's like an icon component.

79
00:04:52.187 --> 00:04:52.913
So we'll do that and

80
00:04:52.913 --> 00:04:55.194
it's actually just probably on
the next page of the docs here.

81
00:04:55.194 --> 00:04:56.144
Yeah, there we go.

82
00:05:03.178 --> 00:05:08.501
So this one is gonna be a client component
so I'm gonna put use client at the top.

83
00:05:14.141 --> 00:05:18.542
And I'm gonna import the link

84
00:05:18.542 --> 00:05:23.655
component from Next.js like that

85
00:05:27.327 --> 00:05:32.858
And a couple icons from react feather,
so we have settings,

86
00:05:32.858 --> 00:05:37.311
user, grid, and
calendar from react feather.

87
00:05:37.311 --> 00:05:38.559
It's an icon library.

88
00:05:38.559 --> 00:05:40.606
It looks like this.

89
00:05:40.606 --> 00:05:45.842
It's actually nothing to do with React,
but it's just like the React version

90
00:05:45.842 --> 00:05:50.935
of it that points to feather icons,
which are really cool-looking icons.

91
00:05:50.935 --> 00:05:54.278
I've always used react icons
which is really cool lib but

92
00:05:54.278 --> 00:05:57.701
I was like I want to switch it up so
I'll use react feather.

93
00:05:57.701 --> 00:06:02.146
I think I like it better than react icons.

94
00:06:02.146 --> 00:06:05.998
But anyway, got that and

95
00:06:05.998 --> 00:06:12.246
then we want to, it's for this import.

96
00:06:12.246 --> 00:06:16.004
This one import right here is the only
reason why we have to do use client

97
00:06:18.373 --> 00:06:20.926
Use path name.

98
00:06:20.926 --> 00:06:26.017
That only works in the client.

99
00:06:26.017 --> 00:06:30.845
And the reason I know that, other than
the documentation telling me that is,

100
00:06:30.845 --> 00:06:31.747
it's a hook.

101
00:06:31.747 --> 00:06:34.917
Hooks only work on client components,
and it's based off of browser api,

102
00:06:34.917 --> 00:06:36.794
which only exists in the client component.

103
00:06:40.358 --> 00:06:45.297
But i if you're in doubt, you can
go to the documentation if you type

104
00:06:45.297 --> 00:06:48.341
in use path name, you can see right here.

105
00:06:48.341 --> 00:06:49.213
Use pathway and

106
00:06:49.213 --> 00:06:53.449
hooks allows you to read the current
url path name from a client component.

107
00:06:53.449 --> 00:06:56.929
They put an underline on it just to
emphasize to you this is a client

108
00:06:56.929 --> 00:06:58.145
component only hood.

109
00:07:03.203 --> 00:07:05.499
Okay, so
that's all we have use client here.

110
00:07:09.646 --> 00:07:13.810
And then clsx, cool.

111
00:07:15.689 --> 00:07:21.622
So next thing I want to do is just, pretty
much the strategy is to this sidebar link.

112
00:07:21.622 --> 00:07:26.308
If given a link object,
it's just going to render out a next

113
00:07:26.308 --> 00:07:30.358
link that wraps an icon that
has some classes on it.

114
00:07:30.358 --> 00:07:36.571
That's it and
it maps an icon name to an icon.

115
00:07:36.571 --> 00:07:37.619
And this is actually interesting.

116
00:07:37.619 --> 00:07:39.332
Well, I have to do this and
I'll explain it in a minute.

117
00:07:39.332 --> 00:07:41.955
It has something to do
with the network boundary.

118
00:07:41.955 --> 00:07:45.650
And what can be serialized and
what can't be serialized.

119
00:07:45.650 --> 00:07:50.355
And why you can only pass certain things
as client components versus passing them

120
00:07:50.355 --> 00:07:51.750
as server components.

121
00:07:51.750 --> 00:07:54.721
Cuz in reactors this would actually work,
but we can't do it here.

122
00:07:54.721 --> 00:07:57.169
So I'm just gonna leave
my map of icons here, and

123
00:07:57.169 --> 00:07:59.153
I'm just gonna give them their names.

124
00:07:59.153 --> 00:08:04.153
Literally, the same names that
you import as, so settings,

125
00:08:04.153 --> 00:08:09.939
user, grid, calendar and
you'll see why I'm doing that in a minute.

126
00:08:09.939 --> 00:08:12.657
And then we'll just make the components so
sidebar link

127
00:08:18.651 --> 00:08:25.591
On a wise don't I didn't want to,
al lright, got a CyberLink here.

128
00:08:25.591 --> 00:08:31.847
It's going to take a link
object from someplace.

129
00:08:31.847 --> 00:08:33.691
And then we wanna get the path name here.

130
00:08:33.691 --> 00:08:39.174
So we can say const path = pathname

131
00:08:39.174 --> 00:08:43.530
= usePathName like that.

132
00:08:43.530 --> 00:08:47.724
And then we can say if path.

133
00:08:47.724 --> 00:08:52.950
Name triple equals link dot what
might have called it, link.

134
00:08:52.950 --> 00:08:54.497
Yeah, link.

135
00:08:54.497 --> 00:08:58.730
Then this is an active link.

136
00:08:58.730 --> 00:09:05.061
So we can just make a let here
is active so it's a false.

137
00:09:05.061 --> 00:09:08.689
If that's true then
because it is active true.

138
00:09:12.053 --> 00:09:15.078
You might be thinking, should I
put that in the state somewhere so

139
00:09:15.078 --> 00:09:16.015
it keep track of it?

140
00:09:16.015 --> 00:09:17.262
No, it's totally fine.

141
00:09:17.262 --> 00:09:20.288
I don't need to keep track of it
because it's not gonna change based off

142
00:09:20.288 --> 00:09:22.368
an interaction where I
need to force a reminder.

143
00:09:22.368 --> 00:09:24.532
It's only ever gonna change
when the path changes.

144
00:09:24.532 --> 00:09:28.028
And when the path changes
this thing reloads anyway,

145
00:09:28.028 --> 00:09:32.608
it's a client component so I don't
need to put this in a state I can just

146
00:09:32.608 --> 00:09:35.655
compute it every time I
re renders it's free.

147
00:09:35.655 --> 00:09:39.270
When I say free I mean react doesn't
have to compare this, we get it for

148
00:09:39.270 --> 00:09:48.541
free because the url changes Okay.

149
00:09:48.541 --> 00:09:52.310
Then we wanna get the icon capitalizing
it because it's gonna be a component.

150
00:09:52.310 --> 00:09:55.430
If you don't use capital letters and react
for components, it'll freak out at you.

151
00:09:55.430 --> 00:10:01.078
So you have these capital letters
icons is going to be from icons.

152
00:10:01.078 --> 00:10:07.290
Wherever the link dot i,
okay, Link dot icon is.

153
00:10:11.660 --> 00:10:15.830
So the reason we have to do this,
this being a client component,

154
00:10:15.830 --> 00:10:20.540
it's going to be rendered in a server
component or if we just forget about

155
00:10:20.540 --> 00:10:25.664
server components or cli commands right
now, these are just two components.

156
00:10:25.664 --> 00:10:28.319
You can pass another
component down as a prop.

157
00:10:28.319 --> 00:10:29.317
Like it's totally fine.

158
00:10:29.317 --> 00:10:31.190
You could pass a function as a prop.

159
00:10:31.190 --> 00:10:35.236
You can pass pretty much wherever you
want as a prop to another component,

160
00:10:35.236 --> 00:10:39.031
unless it's a server component
passing down to a client component.

161
00:10:39.031 --> 00:10:41.758
Because there's a network barrier there.

162
00:10:41.758 --> 00:10:45.966
There is what's happening is
the serialization process is

163
00:10:45.966 --> 00:10:49.415
happening because it has
to cross the network and

164
00:10:49.415 --> 00:10:53.972
you cannot serialize a function,
which is what a component is.

165
00:10:53.972 --> 00:10:55.370
A component's just a function.

166
00:10:55.370 --> 00:10:58.705
You also can't serialize like date
objects and things like that, or

167
00:10:58.705 --> 00:10:59.807
anything recursive.

168
00:10:59.807 --> 00:11:01.502
You just can't serialize it.

169
00:11:01.502 --> 00:11:06.460
So because of that we actually can't
pass the icon component itself instead

170
00:11:06.460 --> 00:11:10.255
we've got to pass a string that
tells us what icon to use and

171
00:11:10.255 --> 00:11:15.134
then we can map to it when we're in
the component side and that's why we're

172
00:11:15.134 --> 00:11:19.646
doing it this way so it does change
how he write code just a little bit.

173
00:11:19.646 --> 00:11:22.495
Because if both of,
if everything was client,

174
00:11:22.495 --> 00:11:25.068
we wouldn't have to do this mapping here.

175
00:11:25.068 --> 00:11:28.506
The link object itself would already
know what component to render or

176
00:11:28.506 --> 00:11:29.579
what icon to render.

177
00:11:32.521 --> 00:11:33.768
Does that make sense?

178
00:11:33.768 --> 00:11:35.165
It's a little complicated.

179
00:11:35.165 --> 00:11:39.544
It's hard to think about, but because
they're gonna be next to each other.

180
00:11:39.544 --> 00:11:42.406
We're gonna be using a client
component and a server component, but

181
00:11:42.406 --> 00:11:44.293
they're happening at two different times.

182
00:11:44.293 --> 00:11:46.457
And across, one's happening on the server,

183
00:11:46.457 --> 00:11:49.469
the other one's happening after
the network request was made.

184
00:11:49.469 --> 00:11:55.383
So we can't just pass things down
like that Okay, let's do this.

185
00:11:55.383 --> 00:12:00.724
So let's return our link
component like that.

186
00:12:00.724 --> 00:12:07.911
It's going to have
an href of Link dot link.

187
00:12:07.911 --> 00:12:11.637
And we're just going to put
an icon I got a class size of 40.

188
00:12:11.637 --> 00:12:14.531
So to say, wherever the icon was.

189
00:12:18.618 --> 00:12:20.616
I think it's a self closing, actually.

190
00:12:20.616 --> 00:12:21.762
Here we go.

191
00:12:23.298 --> 00:12:28.371
Size of 40 and we got a class name here,

192
00:12:28.371 --> 00:12:31.803
gonna use clsx, like so and

193
00:12:31.803 --> 00:12:36.146
we'll just grab these really cool

194
00:12:39.110 --> 00:12:42.705
Tailwind styles, like that.

195
00:12:49.042 --> 00:12:54.233
And then className are actually
yeah we got to the is active stuff.

196
00:12:54.233 --> 00:12:58.172
So if is active and

197
00:12:58.172 --> 00:13:03.686
we just wanna go ahead and

198
00:13:03.686 --> 00:13:10.250
just add a stroke to it because

199
00:13:10.250 --> 00:13:14.977
these icons are SVG so

200
00:13:14.977 --> 00:13:19.712
let's add a stroke.

201
00:13:19.712 --> 00:13:22.357
Cool.
Any questions on that?

202
00:13:22.357 --> 00:13:26.466
On why this is a client component,
how it's a client component,

203
00:13:26.466 --> 00:13:29.096
the network boundary, serialization.

204
00:13:32.737 --> 00:13:34.934
Anybody ever try to JSON
stringify something recursive?

205
00:13:37.267 --> 00:13:40.468
Yeah
&gt;&gt; Could you go over the icon thing one

206
00:13:40.468 --> 00:13:41.499
more time, please?

207
00:13:41.499 --> 00:13:43.663
&gt;&gt; Yes, I could totally go over
the icon thing one more time.

208
00:13:43.663 --> 00:13:48.756
So In a perfect scenario,

209
00:13:48.756 --> 00:13:53.249
this link object that's
getting passed as a prop would

210
00:13:53.249 --> 00:13:56.776
already have the icon associated with it.

211
00:13:56.776 --> 00:14:01.203
It'll be something like this, you probably
would have it like that like Link dot icon

212
00:14:01.203 --> 00:14:06.986
like it already would know
We can't do that with this

213
00:14:06.986 --> 00:14:12.433
because this client component is gonna
be rendered in a server component and

214
00:14:12.433 --> 00:14:18.324
that server component can't pass non
serializable props to a client component.

215
00:14:18.324 --> 00:14:22.976
And a component like
link.icon is a function and

216
00:14:22.976 --> 00:14:26.387
functions aren't serializable.

217
00:14:26.387 --> 00:14:29.235
It cannot cross the network.

218
00:14:29.235 --> 00:14:32.085
You can't send a function
across the network.

219
00:14:32.085 --> 00:14:37.200
You can only send JSON or HTML or
CSS, cuz you can't send a function.

220
00:14:37.200 --> 00:14:42.600
So therefore we cannot send If
a component as a property from

221
00:14:42.600 --> 00:14:48.111
a server component to a client upon it,
it just won't work.

222
00:14:48.111 --> 00:14:51.053
Because it won't cross the network
barrier just like the date

223
00:14:51.053 --> 00:14:52.533
object can't be sterilized.

224
00:14:52.533 --> 00:14:55.772
Just like a recursive
object can't be sterilized,

225
00:14:55.772 --> 00:14:58.136
a function too can't be sterilized.

226
00:14:58.136 --> 00:15:02.955
You kind of have to think about it as in
like you have to you have to abstract

227
00:15:02.955 --> 00:15:06.115
away how react made it so
easy for you to, like,

228
00:15:06.115 --> 00:15:10.776
have these components live next to
each other and think about, like,

229
00:15:10.776 --> 00:15:14.983
if you have a server component and
you have a client component.

230
00:15:14.983 --> 00:15:18.758
In between those components
is just big red line.

231
00:15:18.758 --> 00:15:21.774
That red line is the network barrier,
it's the boundaries,

232
00:15:21.774 --> 00:15:23.688
it's where the network call happens.

233
00:15:23.688 --> 00:15:28.890
If you wanna cross that, you got to be
serializable and a component isn't.

234
00:15:28.890 --> 00:15:32.056
So it can't cross it
though it's not allowed.

235
00:15:32.056 --> 00:15:36.756
So that's the way I think about
it in my head when I think about

236
00:15:36.756 --> 00:15:41.287
seeds it's a big red line there and
you can't get past it.

237
00:15:41.287 --> 00:15:46.355
So yeah so in that case we instead
are sending back a stream that

238
00:15:46.355 --> 00:15:52.105
map's to an object of icons that
are already in the client component so

239
00:15:52.105 --> 00:15:56.991
we can scrap it that way because
strings are serializable.

