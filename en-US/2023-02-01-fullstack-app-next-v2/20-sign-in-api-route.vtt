WEBVTT

1
00:00:00.297 --> 00:00:03.800
So the strategy for
Sign in is a little different.

2
00:00:03.800 --> 00:00:06.485
It is a little different.

3
00:00:06.485 --> 00:00:08.271
One, we're not creating a user.

4
00:00:08.271 --> 00:00:11.223
You shouldn't be creating
a user on sign in.

5
00:00:11.223 --> 00:00:14.406
So what we're gonna do is we're also
gonna check to see if it's a post.

6
00:00:14.406 --> 00:00:18.531
Instead of creating a user, we're just
gonna check to see if there's even a user.

7
00:00:18.531 --> 00:00:20.715
With that email that you gave us,

8
00:00:20.715 --> 00:00:24.153
is there even a user that
has that email if it's not.

9
00:00:24.153 --> 00:00:28.840
Are you just barking up the wrong tree
just get out of here if there is we're

10
00:00:28.840 --> 00:00:33.377
going to compare that user's password
that we found with the plaintext

11
00:00:33.377 --> 00:00:38.064
password that you sent us on this request
if that matches you must be who you

12
00:00:38.064 --> 00:00:43.055
say you are because the email returned
the user and that hashed password on that

13
00:00:43.055 --> 00:00:47.325
user matched your plaintext password so
I guess you are that user.

14
00:00:47.325 --> 00:00:51.735
In that case we'll create a JWT, we'll set
the cookie and we'll do the same thing.

15
00:00:51.735 --> 00:00:52.671
So let's do that.

16
00:00:55.235 --> 00:01:01.089
Export default async function.

17
00:01:01.089 --> 00:01:05.465
And I'll just call it signIn.

18
00:01:05.465 --> 00:01:08.682
We'll just go ahead and
bring in our types from next.

19
00:01:11.123 --> 00:01:19.419
Next API request next API response
Request or response type those.

20
00:01:19.419 --> 00:01:24.052
There's also like a next API handler that
you can just make, you know, for the whole

21
00:01:24.052 --> 00:01:28.568
function and you don't have to do these
individual ties but I've liked all that.

22
00:01:28.568 --> 00:01:36.821
Okay, if racked up method equals post
Then let's see if there's a user here.

23
00:01:38.857 --> 00:01:41.687
User equals awaits.

24
00:01:41.687 --> 00:01:45.898
Bring our DB in, .user .find.

25
00:01:45.898 --> 00:01:47.660
Not many find unique

26
00:01:52.586 --> 00:01:57.531
Where email is wrecked up by that email.I

27
00:02:01.288 --> 00:02:05.600
t's also noted that in
a production environment you would

28
00:02:05.600 --> 00:02:08.504
probably,verify sanitize You know,

29
00:02:08.504 --> 00:02:13.611
pretty much any input that sent to
your API, you want to look at that.

30
00:02:13.611 --> 00:02:15.421
Make sure it's, you know, it's there.

31
00:02:15.421 --> 00:02:18.362
I'm just making a ton of
assumptions right now in this code.

32
00:02:18.362 --> 00:02:22.067
But that's the difference between, you
know, building an app and then building

33
00:02:22.067 --> 00:02:25.513
an app for production is that there's
a lot more that goes into production.

34
00:02:25.513 --> 00:02:27.673
You have to verify a lot of these inputs.

35
00:02:27.673 --> 00:02:31.942
And things like that because you can't
trust what a user sending you even if all

36
00:02:31.942 --> 00:02:36.403
the users or the people on your team and
it's an internal app you still can't trust

37
00:02:36.403 --> 00:02:39.572
it so make sure you verify
everything including inputs and

38
00:02:39.572 --> 00:02:43.927
have fallbacks for all that stuff and
even then you still won't get it, right.

39
00:02:43.927 --> 00:02:45.250
All right, it's just it's just hard.

40
00:02:45.250 --> 00:02:47.272
It's a moving target.

41
00:02:47.272 --> 00:02:48.947
Okay, so we got user.

42
00:02:48.947 --> 00:02:53.832
So then what we want to do is we just
want to compare those passwords so

43
00:02:53.832 --> 00:02:58.462
we'll say const is user and
we can say a weight compare passwords

44
00:02:58.462 --> 00:03:03.457
plaintext password that's going to
be wrecked up body that passer.

45
00:03:03.457 --> 00:03:07.177
That's the one that they
sent up from the form and

46
00:03:07.177 --> 00:03:12.094
then the hash one is it's got to
be user dot password there we go.

47
00:03:12.094 --> 00:03:17.082
So if you can say cool if
is users true then we can

48
00:03:17.082 --> 00:03:21.829
go ahead and
To do exactly what we already did,

49
00:03:21.829 --> 00:03:27.915
which is creating a JSON Web Token and
doing all this magic,

50
00:03:27.915 --> 00:03:33.909
so I'm just gonna go ahead and
bring those in right quick.

51
00:03:33.909 --> 00:03:39.570
Don't try to autocomplete them,
there we go and there we go.

52
00:03:39.570 --> 00:03:44.631
Same thing as the last one,
create a JSON web token,

53
00:03:44.631 --> 00:03:47.969
set the header called set cookie,

54
00:03:47.969 --> 00:03:53.969
serialize the JSON web token in
a cookie to a one and good to go.

55
00:03:53.969 --> 00:03:56.854
Else if it's not a post, give it a status,

56
00:03:56.854 --> 00:04:00.877
whatever you wanna call it,
whatever status you wanna do.

57
00:04:02.750 --> 00:04:03.552
And end it.

58
00:04:09.558 --> 00:04:12.277
Any questions on sign in?

59
00:04:15.091 --> 00:04:17.227
Yes.

60
00:04:17.227 --> 00:04:19.505
These API routes are server less.

61
00:04:19.505 --> 00:04:20.136
Correct?

62
00:04:20.136 --> 00:04:21.461
&gt;&gt; Correct?

63
00:04:21.461 --> 00:04:22.779
Yes, they are serverless.

64
00:04:22.779 --> 00:04:26.604
They run on Versailles infrastructure,

65
00:04:26.604 --> 00:04:32.843
which I believe do not quote me on this,
but I believe it's Google.

66
00:04:32.843 --> 00:04:34.686
I think it's Google,
but it doesn't matter.

67
00:04:34.686 --> 00:04:35.663
That's.

68
00:04:35.663 --> 00:04:36.339
that's the whole point.

69
00:04:36.339 --> 00:04:40.916
It doesn't matter servers.

