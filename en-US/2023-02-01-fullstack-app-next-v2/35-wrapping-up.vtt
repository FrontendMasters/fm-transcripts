WEBVTT

1
00:00:00.000 --> 00:00:04.956
Yeah, it's pretty simple with Vercel and
apps like Railway to get things deployed.

2
00:00:04.956 --> 00:00:06.561
It mostly works the same.

3
00:00:06.561 --> 00:00:08.803
So, yeah.

4
00:00:08.803 --> 00:00:13.254
So, the only other thing I want to talk
about before we end it is just like some

5
00:00:13.254 --> 00:00:16.331
of the things to do next to get ready for
production.

6
00:00:16.331 --> 00:00:21.178
So if you've done the intro to next JSP2,
I mentioned in their study up more on

7
00:00:21.178 --> 00:00:24.632
server components client
components data fetching for

8
00:00:24.632 --> 00:00:28.833
this course I'm going to recommend
more production ready things.

9
00:00:28.833 --> 00:00:32.385
So if you go to the beta docs so
betadoc.nextjs.org.

10
00:00:32.385 --> 00:00:38.636
The things you really wanna look into
are gonna be like re-validating data.

11
00:00:38.636 --> 00:00:42.020
This is probably one of
the biggest features in the app,

12
00:00:42.020 --> 00:00:46.700
but it's actually very complicated
to under, I mean, it's just caching,

13
00:00:46.700 --> 00:00:49.302
caching is one of
the hardest things to do.

14
00:00:49.302 --> 00:00:53.395
So it's always gonna be complicated and
you can almost never get it right, but

15
00:00:53.395 --> 00:00:56.631
it does change behavior of your
application significantly.

16
00:00:56.631 --> 00:01:02.467
So read up on that and
obviously caching itself.

17
00:01:02.467 --> 00:01:08.155
So how segment level caching works
versus per request caching and

18
00:01:08.155 --> 00:01:13.855
I talked a little bit about those,
but I didn't use those terms.

19
00:01:13.855 --> 00:01:17.079
I talked about pages being cached and
API calls being cached,

20
00:01:17.079 --> 00:01:20.189
that's the different segment
based caching these pages.

21
00:01:20.189 --> 00:01:23.644
Everything that a page needs
being cached per that segment,

22
00:01:23.644 --> 00:01:26.430
versus something being
cached inside of fetch.

23
00:01:26.430 --> 00:01:30.602
Those are two different types of caches
that can be revalidated differently

24
00:01:32.880 --> 00:01:34.309
How to preload data.

25
00:01:34.309 --> 00:01:37.909
So using this pattern where
you export a preload function,

26
00:01:37.909 --> 00:01:41.593
Next.js doesn't care about this,
it doesn't pick it up.

27
00:01:41.593 --> 00:01:47.731
But inside of a page you can bring in
that preload function, preload the data,

28
00:01:47.731 --> 00:01:54.163
get your stuff, if it's not there, render
some stuff so it can get pretty crazy.

29
00:01:54.163 --> 00:01:57.537
This is very advanced, so
you can read up on that.

30
00:01:57.537 --> 00:01:59.174
The other one would be, okay?

31
00:01:59.174 --> 00:02:03.169
Yeah, this one parallel and
sequential data fetching.

32
00:02:03.169 --> 00:02:07.188
Highly recommend reading up on this.

33
00:02:07.188 --> 00:02:09.348
Basically, just describes how and

34
00:02:09.348 --> 00:02:13.884
we kind of did it in the app where you
have some data fetching, happening and

35
00:02:13.884 --> 00:02:18.580
blocking JSX and rendering where some
might be happening and it background.

36
00:02:18.580 --> 00:02:22.331
While sequential is the one that's
blocking parallels while that's happening

37
00:02:22.331 --> 00:02:25.030
in the background, and when and
why you would use those and

38
00:02:25.030 --> 00:02:26.258
how do you group those up?

39
00:02:26.258 --> 00:02:30.651
How do you tee up data fetching if
one function that's fetching data

40
00:02:30.651 --> 00:02:33.440
requires the output of another function?

41
00:02:33.440 --> 00:02:36.847
How do you queue those together
what does that look like?

42
00:02:36.847 --> 00:02:38.627
So I highly recommend looking at up and

43
00:02:38.627 --> 00:02:42.034
different patterns that are describing
some of these documentations.

44
00:02:42.034 --> 00:02:45.674
A lot of this is like they're just
exploring because it's somewhat brand new

45
00:02:45.674 --> 00:02:49.538
but there are gonna be a bunch of patterns
that evolve from this in the next year so,

46
00:02:49.538 --> 00:02:50.994
it's gonna get pretty crazy.

47
00:02:50.994 --> 00:02:53.881
Like I said, I do think most frameworks
are gonna start copying them too.

48
00:02:53.881 --> 00:02:57.919
So everyone's got hooks now, so yeah.

49
00:02:57.919 --> 00:03:00.565
I think, and this is React.

50
00:03:00.565 --> 00:03:02.712
This isn't just next.js,
React is doing this.

51
00:03:02.712 --> 00:03:07.813
So I think there's gonna be a lot of
innovation in this paradigm of thinking.

52
00:03:07.813 --> 00:03:13.957
So I would look into that,
the only other thing I would look into for

53
00:03:13.957 --> 00:03:18.592
production stuff is not
it's mostly that stuff.

54
00:03:18.592 --> 00:03:19.947
That's the tough stuff.

55
00:03:19.947 --> 00:03:21.691
Maybe, yeah, streaming and suspense.

56
00:03:21.691 --> 00:03:27.068
So really understanding how data and
even components themselves are streamed

57
00:03:27.068 --> 00:03:31.883
to Node.js or to the browser from
Node.js and from the edge runtime.

58
00:03:31.883 --> 00:03:36.550
And how that actually changes how your
browser executes your app is very

59
00:03:36.550 --> 00:03:38.418
important to understand and

60
00:03:38.418 --> 00:03:42.478
how to opt into the streaming and
different things like that.

61
00:03:42.478 --> 00:03:44.831
So we've been using
streaming this whole time.

62
00:03:44.831 --> 00:03:47.789
What server components like loading and

63
00:03:47.789 --> 00:03:51.276
the suspend boundaries
that I have is routing.

64
00:03:51.276 --> 00:03:55.536
So just having a really good idea of how
that works, but for the most part, yeah.

65
00:03:55.536 --> 00:03:57.917
Once you know all that,
you can pretty much do everything.

66
00:03:57.917 --> 00:03:59.550
I mean like I can't wait for

67
00:03:59.550 --> 00:04:04.094
people to start building apps that shows
almost no Javascript in addition to

68
00:04:04.094 --> 00:04:07.942
the framework themselves to
the browsers what happens though.

69
00:04:07.942 --> 00:04:12.203
&gt;&gt; Do you have any resources
you would recommend

70
00:04:12.203 --> 00:04:15.799
to learn more about edge versus node?

71
00:04:15.799 --> 00:04:17.713
&gt;&gt; Tying to think of one resource.

72
00:04:20.473 --> 00:04:22.718
I don't have a go to resource but

73
00:04:22.718 --> 00:04:27.887
I can think of two places off the top of
my head that talk about it very well.

74
00:04:27.887 --> 00:04:31.568
One is a company called Fly.io.

75
00:04:31.568 --> 00:04:34.346
Disclaimer, I am an investor in Fly.io but

76
00:04:34.346 --> 00:04:38.709
I still I've used their products
way before I was investing in them.

77
00:04:38.709 --> 00:04:44.249
But their product is literally
an edge runtime and other docs and

78
00:04:44.249 --> 00:04:50.619
articles describing edge, computing and
stuff like that is limitless.

79
00:04:50.619 --> 00:04:54.692
So yeah, I would go in here and check out
their docs, check out there blog posts

80
00:04:54.692 --> 00:04:58.918
that they've written about as competing
this littered their entire platform.

81
00:04:58.918 --> 00:05:04.138
Another great resource is Cloudflare.

82
00:05:04.138 --> 00:05:08.920
So if you go to Cloudflare workers
which is like their edge runtime They

83
00:05:08.920 --> 00:05:12.163
also have tons of resources,
documentation,

84
00:05:12.163 --> 00:05:17.125
blog posts about how edge runtime works,
the difference between them.

85
00:05:17.125 --> 00:05:20.815
Like I said, it's a CDN.

86
00:05:20.815 --> 00:05:23.022
So in their case,
you can see here's all the nodes.

87
00:05:23.022 --> 00:05:26.819
You can imagine an edge runtime
being every one of these dots has,

88
00:05:26.819 --> 00:05:31.653
let's say you made a function like the
middleware function, and you deployed it,

89
00:05:31.653 --> 00:05:35.746
your middleware function is going to
exist on every one of these dots.

90
00:05:35.746 --> 00:05:41.727
And then if someone from Texas
made an API call to your server,

91
00:05:41.727 --> 00:05:45.995
it's going to talk to the middleware here.

92
00:05:45.995 --> 00:05:49.842
And someone from Seattle made an API
call from servers going to talk

93
00:05:49.842 --> 00:05:51.770
to the middleware here, right?

94
00:05:51.770 --> 00:05:54.384
That's how it works.
Someone from London or whatever,

95
00:05:54.384 --> 00:06:00.071
they made an API call it's gonna come
from here, the closest one to them.

96
00:06:00.071 --> 00:06:01.120
That's how it works.

97
00:06:01.120 --> 00:06:06.372
Whereas, your origin server,
where your serverless functions are,

98
00:06:06.372 --> 00:06:11.025
not your edge run time might be
deployed in Virginia or Oregon.

99
00:06:11.025 --> 00:06:12.640
So, instead of going all the way there.

100
00:06:12.640 --> 00:06:16.780
So, if I am all the way here in Cape Cod
and your origin servers all the way here

101
00:06:16.780 --> 00:06:21.248
in Virginia, instead of going all the way
here to get my authentication checked,

102
00:06:21.248 --> 00:06:24.261
I would just go here to get
my authentication checked.

103
00:06:24.261 --> 00:06:29.419
&gt;&gt; I'm not leveraging any of the new
features, should I use version 13?

104
00:06:29.419 --> 00:06:32.170
&gt;&gt; Yeah, most of the new features
are just in the app directory.

105
00:06:32.170 --> 00:06:36.012
So you can use version 13 and still put
your pages in the pages directory and

106
00:06:36.012 --> 00:06:39.736
you'll get the same experience as
version 12 with the extra benefits of

107
00:06:39.736 --> 00:06:43.300
whatever version 13 has that isn't
included in the app directory.

108
00:06:43.300 --> 00:06:46.829
So yeah, it's totally safe.

109
00:06:46.829 --> 00:06:52.257
And I believe they have an upgrade
guide on here somewhere,

110
00:06:52.257 --> 00:06:54.871
where they talk about that.

111
00:06:57.417 --> 00:07:02.532
So that's upgrade guide,
but they also have like,

112
00:07:02.532 --> 00:07:09.948
kind of like how to
migrate migration Yeah.

113
00:07:09.948 --> 00:07:10.976
I just passed it.

114
00:07:10.976 --> 00:07:13.320
Yeah, migrating from pages to app and
all this stuff.

115
00:07:13.320 --> 00:07:16.889
So yeah, if you can just
read this upgrade guide for

116
00:07:16.889 --> 00:07:21.049
any resources on how you might
best take advantage of that.

117
00:07:21.049 --> 00:07:26.451
Okay, well thanks for
taking the course and yeah this is it.

118
00:07:26.451 --> 00:07:30.721
&gt;&gt; [APPLAUSE]

