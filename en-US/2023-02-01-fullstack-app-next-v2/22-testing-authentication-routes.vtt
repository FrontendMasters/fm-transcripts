WEBVTT

1
00:00:00.000 --> 00:00:04.620
So I think we got all the things,
let's spin this up try to hit

2
00:00:04.620 --> 00:00:08.515
the auth form try to sign in
see if it redirects us and

3
00:00:08.515 --> 00:00:11.968
stuff like that and
let's see what happens.

4
00:00:11.968 --> 00:00:12.468
So NPM run dev.

5
00:00:14.522 --> 00:00:15.790
Get this thing going.

6
00:00:19.137 --> 00:00:24.441
And you can see right off the bat, earlier
in the course when I tried to go to home,

7
00:00:24.441 --> 00:00:28.120
it was just 404,
now it's redirecting the sign in.

8
00:00:28.120 --> 00:00:32.171
So I can tell you right now the middleware
is working cuz otherwise we'd be looking

9
00:00:32.171 --> 00:00:33.238
at 404 right now.

10
00:00:33.238 --> 00:00:35.018
So that works.

11
00:00:35.018 --> 00:00:37.218
You can also do a console log in
the middleware if you want and

12
00:00:37.218 --> 00:00:38.590
it will log out here in the terminal.

13
00:00:38.590 --> 00:00:45.582
Okay, so I'm gonna click on don't have
an account, and I'm gonna try to sign up.

14
00:00:45.582 --> 00:00:46.351
So let's see what happens.

15
00:00:46.351 --> 00:00:50.284
So I'm gonna say and
this is me, that's my email.

16
00:00:50.284 --> 00:00:55.845
I wanna say it's just scott@gmail.com or
whatever that somebody's real email.

17
00:00:55.845 --> 00:00:57.434
And I'm just gonna try to register here.

18
00:00:57.434 --> 00:00:59.821
Let's see what happens.

19
00:00:59.821 --> 00:01:01.512
This is gonna wait.

20
00:01:01.512 --> 00:01:06.601
So we have an error,
let's see what that is.

21
00:01:06.601 --> 00:01:12.834
And what was,
let's look at the network tab.

22
00:01:12.834 --> 00:01:14.861
Wait, did we even hook these up yet?

23
00:01:14.861 --> 00:01:17.077
I thought we did.

24
00:01:17.077 --> 00:01:18.103
Let's see.

25
00:01:18.103 --> 00:01:19.839
I'm gonna run that again in network tab.

26
00:01:19.839 --> 00:01:21.735
Here we go.
So we got a 500.

27
00:01:24.196 --> 00:01:25.782
And it says.

28
00:01:32.307 --> 00:01:35.420
Yeah, it's just a random 500,
so here we go.

29
00:01:35.420 --> 00:01:35.956
There we go.

30
00:01:35.956 --> 00:01:37.383
That's what it's looking for.

31
00:01:37.383 --> 00:01:38.440
I see where it is.

32
00:01:38.440 --> 00:01:41.590
It's in API.

33
00:01:41.590 --> 00:01:42.586
It's in fetcher.

34
00:01:42.586 --> 00:01:43.435
It's in here.

35
00:01:43.435 --> 00:01:45.751
This thing's messed up.

36
00:01:45.751 --> 00:01:47.167
So let's see.

37
00:01:47.167 --> 00:01:50.357
It might be.

38
00:01:50.357 --> 00:01:53.477
The thing I told you guys
was super cool maybe,

39
00:01:53.477 --> 00:01:55.966
[LAUGH] it's probably not that cool.

40
00:01:55.966 --> 00:01:57.698
Is probably breaking it.

41
00:01:57.698 --> 00:01:59.257
So let's check it out.

42
00:01:59.257 --> 00:02:04.421
I think it was actually breaking
here when it was trying to do

43
00:02:04.421 --> 00:02:10.426
res dot JSON because we might not be
sending anything back on the API.

44
00:02:10.426 --> 00:02:12.916
So yeah, that's what it is.

45
00:02:12.916 --> 00:02:20.993
So I mean, a quick way to do this
is just to like, just do this.

46
00:02:20.993 --> 00:02:24.087
I think that's what the issue is.

47
00:02:24.087 --> 00:02:26.708
Let's do that.

48
00:02:26.708 --> 00:02:29.120
You can also just fix this
on the front end too, but

49
00:02:29.120 --> 00:02:31.030
I think it's easier just to do it here.

50
00:02:31.030 --> 00:02:35.448
Just trying to parse JSON when
there isn't any JSON parse.

51
00:02:39.577 --> 00:02:42.599
So let's try that again.

52
00:02:42.599 --> 00:02:47.384
Now I'm actually gonna sign
up with my cat's name,

53
00:02:47.384 --> 00:02:50.332
Darryl, [LAUGH] he's a big boy.

54
00:02:56.446 --> 00:03:00.388
So I wanna make an account here, and yeah,

55
00:03:00.388 --> 00:03:04.888
it looks like it did it but
then it went to sign in.

56
00:03:04.888 --> 00:03:08.817
So that tells me that the redirects,

57
00:03:08.817 --> 00:03:14.523
either our middleware is
blocking a page somewhere,

58
00:03:14.523 --> 00:03:17.583
cuz it redirected the sign.

59
00:03:17.583 --> 00:03:20.332
But I imagine if I went to home.

60
00:03:24.014 --> 00:03:25.199
It's still redirecting.

61
00:03:25.199 --> 00:03:29.934
So that means the middleware's
probably not getting the right cookie.

62
00:03:29.934 --> 00:03:31.220
So let's see.

63
00:03:33.161 --> 00:03:35.709
Cuz it's redirected me now.

64
00:03:35.709 --> 00:03:41.264
So let's log that JSON web
token on that try, to go home.

65
00:03:41.264 --> 00:03:45.974
Yeah, so cookies and objects.

66
00:03:45.974 --> 00:03:48.046
So we got to do a dot value.

67
00:03:48.046 --> 00:03:53.089
So we need to do verify
JSON Web Token dot value

68
00:03:58.404 --> 00:04:00.850
So once we do that we should
have a cookie already.

69
00:04:00.850 --> 00:04:06.529
I should be able to go home
which we don't have a page for

70
00:04:06.529 --> 00:04:09.993
it so it's gonna show up 404.

71
00:04:09.993 --> 00:04:16.905
So it doesn't always work the first time,
but you gotta dig in there.

72
00:04:16.905 --> 00:04:20.761
Okay, any questions on middleware?

73
00:04:20.761 --> 00:04:22.677
&gt;&gt; You bringing together a lot
of different dependencies and

74
00:04:22.677 --> 00:04:24.327
obviously you have a world
of experience in this.

75
00:04:24.327 --> 00:04:26.969
But wherever we go if we were looking for

76
00:04:26.969 --> 00:04:30.504
some other dependency to
solve some niche problem?

77
00:04:30.504 --> 00:04:34.359
Say we build on to this data management,
filtering or

78
00:04:34.359 --> 00:04:39.854
performing functions over on the server,
you're just digging into that?

79
00:04:39.854 --> 00:04:44.925
Where do you recommend going in first for
some of those dependencies?

80
00:04:44.925 --> 00:04:46.306
&gt;&gt; That's a good question.

81
00:04:46.306 --> 00:04:51.553
So when I'm looking for
a new package or a new dependency,

82
00:04:51.553 --> 00:04:56.479
my first thing to do is I always
just go on NPM first, and

83
00:04:56.479 --> 00:04:59.387
I'll try to get lucky, right?

84
00:04:59.387 --> 00:05:04.274
So if you're thinking of like,
you said data management, right?

85
00:05:04.274 --> 00:05:07.480
So I'll look up next data.

86
00:05:07.480 --> 00:05:10.278
Cuz most people try to get the cool names,
right?

87
00:05:10.278 --> 00:05:12.924
So I'm like,
somebody's trying to get this name.

88
00:05:12.924 --> 00:05:14.488
So I'll try to get lucky and

89
00:05:14.488 --> 00:05:17.620
find the exact name of
the thing that I'm looking for.

90
00:05:17.620 --> 00:05:22.342
Sometimes it doesn't work, but
if I do find something on here, let's say,

91
00:05:22.342 --> 00:05:24.895
next data, I don't know what that does.

92
00:05:24.895 --> 00:05:26.809
It's probably not what I'm looking for.

93
00:05:30.226 --> 00:05:33.337
Then I'll go check to see
when it was published last.

94
00:05:33.337 --> 00:05:34.096
I'll look at their GitHub.

95
00:05:34.096 --> 00:05:37.266
This person doesn't even have a GitHub for
it so I probably will never use it.

96
00:05:37.266 --> 00:05:40.126
So then I'll do that to see
if I can find something.

97
00:05:40.126 --> 00:05:44.154
If I can't find that the next
thing I'll do is I'll just

98
00:05:44.154 --> 00:05:48.709
literally just get on Google and
try to find some example code.

99
00:05:48.709 --> 00:05:52.559
Like whether it's in a blog post,
whether it's in a repo

100
00:05:52.559 --> 00:05:57.069
somewhere of someone doing the exact
thing that I'm looking for.

101
00:05:57.069 --> 00:06:01.414
So for
instance you might be talking about,

102
00:06:01.414 --> 00:06:05.884
like, how do you do
a nested query in Prisma?

103
00:06:05.884 --> 00:06:08.610
Obviously Prisma has documentation for
it, but

104
00:06:08.610 --> 00:06:13.200
I figured that it's better in my opinion
to find sometimes an example code cuz that

105
00:06:13.200 --> 00:06:17.456
person who wrote the example code will
have all those different packages and

106
00:06:17.456 --> 00:06:20.339
modules whereas like
a documentation wouldn't.

107
00:06:20.339 --> 00:06:24.132
They're not gonna show you other
modules that they didn't write in their

108
00:06:24.132 --> 00:06:25.057
documentation.

109
00:06:25.057 --> 00:06:27.004
It was like,
this is how you do it manually.

110
00:06:27.004 --> 00:06:28.597
So I try to find that example code.

111
00:06:28.597 --> 00:06:31.156
The last thing I'll do is
I'll just go to GitHub and

112
00:06:31.156 --> 00:06:34.964
I'll go to the source code of the thing
that I'm using and click on issues and

113
00:06:34.964 --> 00:06:38.951
then type in the thing that I'm looking
for to see if someone reported an issue on

114
00:06:38.951 --> 00:06:41.950
it and then see if someone helped them,
they resolve them.

115
00:06:41.950 --> 00:06:45.899
Usually those three things typically
yield more than one result and

116
00:06:45.899 --> 00:06:49.231
it's usually just about which
one of those I wanna take.

117
00:06:49.231 --> 00:06:52.008
So that's kind of how I stay up to date.

118
00:06:52.008 --> 00:06:56.595
Passively, I usually just log on to GitHub
and see like top trending projects in like

119
00:06:56.595 --> 00:07:00.408
JavaScript or top trending projects
that mention the word Next.js or

120
00:07:00.408 --> 00:07:02.430
whatever thing that I'm tracking.

121
00:07:02.430 --> 00:07:06.607
And I usually find a lot of interesting
stuff that I don't need at the time, but

122
00:07:06.607 --> 00:07:09.283
I'll remember it and
I'll come back to it later.

123
00:07:09.283 --> 00:07:13.179
And I'm like, yeah, that was a thing I
read a month ago that I did not need, but

124
00:07:13.179 --> 00:07:14.149
I kinda need it now.

125
00:07:14.149 --> 00:07:15.840
So it usually does that.

126
00:07:15.840 --> 00:07:19.787
And then once you do that, you'll have
your favorite packages that you just love

127
00:07:19.787 --> 00:07:23.739
and you'll probably continue to use it
until the person stops supporting it, or

128
00:07:23.739 --> 00:07:25.970
they forget to update
it to the next version.

129
00:07:25.970 --> 00:07:26.910
And that's usually how it goes..

130
00:07:26.910 --> 00:07:32.000
&gt;&gt; How do we know the middleware we
just built is working on the edge?

131
00:07:32.000 --> 00:07:35.930
&gt;&gt; Well, right now the edge is a computer,
so is got trusted.

132
00:07:35.930 --> 00:07:38.741
[LAUGH] But that's a great question.

133
00:07:38.741 --> 00:07:43.750
When you deploy this you have to deploy it
to a platform that supports this runtime.

134
00:07:43.750 --> 00:07:49.240
And at the top of my head, the only
that ones are aware of a middleware file

135
00:07:49.240 --> 00:07:54.730
in a Next JS app and somehow converting
that to an edge runtime function or

136
00:07:54.730 --> 00:08:00.134
Versailles the creators of Next JS and
Netlifly, their competitors.

137
00:08:00.134 --> 00:08:03.720
Those are the only two that I'm aware
of personally that know what those

138
00:08:03.720 --> 00:08:04.510
functions do.

139
00:08:04.510 --> 00:08:09.554
But you could set this up yourself
on AWS or something like that.

140
00:08:09.554 --> 00:08:16.675
So you just have to trust that creatives
of those platforms are running it there.

141
00:08:16.675 --> 00:08:19.989
But if you really wanted to test it,
I mean, there's nothing stopping you from

142
00:08:19.989 --> 00:08:22.473
looking at the latency of which,
how something came back.

143
00:08:22.473 --> 00:08:25.523
I mean, you can set up a VPN and
go to a different location and

144
00:08:25.523 --> 00:08:26.685
see what node it hits.

145
00:08:26.685 --> 00:08:30.406
Check out the IP address to
see what CDN it came from.

146
00:08:30.406 --> 00:08:33.492
You can try to throw some JavaScript
in there just to see that you'll

147
00:08:33.492 --> 00:08:34.151
get an error.

148
00:08:34.151 --> 00:08:36.023
Like B crypt,
there'll be crypto in there and

149
00:08:36.023 --> 00:08:37.996
see that you'll get an error
if you try to run it.

150
00:08:37.996 --> 00:08:41.304
So there's a lot of ways to verify but
locally, there is no edge,

151
00:08:41.304 --> 00:08:45.536
it's just a simulated edge environment so
that's just running on your computer.

