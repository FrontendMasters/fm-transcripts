WEBVTT

1
00:00:00.220 --> 00:00:02.994
So, we're going to create
a greeting skeleton or

2
00:00:02.994 --> 00:00:05.378
I think someone had a better word for
this.

3
00:00:05.378 --> 00:00:07.123
What was the word?

4
00:00:07.123 --> 00:00:07.702
&gt;&gt; Shimmer.

5
00:00:07.702 --> 00:00:08.491
&gt;&gt; Shimmer?

6
00:00:08.491 --> 00:00:11.141
There it is, the greeting shimmer.

7
00:00:11.141 --> 00:00:15.934
This one's not going to shimmer though,
it's not going to have that, whatever,

8
00:00:15.934 --> 00:00:16.766
the shimmer.

9
00:00:16.766 --> 00:00:19.539
It's not going to have the shimmer but
actually, no, I think it will.

10
00:00:19.539 --> 00:00:21.588
I think this one does have a shimmer.

11
00:00:21.588 --> 00:00:22.260
We'll find out.

12
00:00:22.260 --> 00:00:25.134
I can't remember if I did the shimmer or
not.

13
00:00:25.134 --> 00:00:27.017
I think I might have.

14
00:00:27.017 --> 00:00:27.622
Yeah.

15
00:00:27.622 --> 00:00:29.133
I do animate pulse.

16
00:00:29.133 --> 00:00:30.809
It's definitely going to shimmer.

17
00:00:30.809 --> 00:00:34.916
Okay, so let's create a greeting
skeleton TSX in our components folder.

18
00:00:39.319 --> 00:00:43.690
And there's no logic here, this is all
styling, it's basically just HTML but

19
00:00:43.690 --> 00:00:47.684
I'll walk through it if you want to
see how shimmer works with Tailwind.

20
00:00:47.684 --> 00:00:53.774
It's quite interesting but
nothing special here.

21
00:00:53.774 --> 00:01:00.667
Basically what we're doing here is we're
just creating empty divs with spacings and

22
00:01:00.667 --> 00:01:07.282
backgrounds that look like the shape of
the element that it's trying to imitate.

23
00:01:13.578 --> 00:01:14.255
That's it.

24
00:01:14.255 --> 00:01:15.581
It's not really doing anything else.

25
00:01:17.906 --> 00:01:19.958
So, we have our greeting skeleton.

26
00:01:23.626 --> 00:01:24.627
We exported it.

27
00:01:24.627 --> 00:01:29.728
And now what we want to
do is we want to bring

28
00:01:29.728 --> 00:01:34.741
that into our page and
pass that as a fallback to suspense.

29
00:01:34.741 --> 00:01:38.957
Which is wrapped around the greetings
component that we already brought in.

30
00:01:40.905 --> 00:01:41.689
So let's do that.

31
00:01:41.689 --> 00:01:44.914
Let's go back to our dashboard homepage.

32
00:01:44.914 --> 00:01:51.010
We're going to wrap the greeting
in the suspense component.

33
00:01:51.010 --> 00:01:59.236
We're going to give it a fallback
of greeting skeleton like that.

34
00:02:02.784 --> 00:02:03.297
Okay?

35
00:02:03.297 --> 00:02:08.172
So, then if we go back here and
refresh, we get that skeleton instead

36
00:02:08.172 --> 00:02:13.311
while it's loading, and then boom,
then we get our actual component.

37
00:02:17.755 --> 00:02:20.442
I'm gonna try to make that component for

38
00:02:20.442 --> 00:02:24.960
width because it is actually bothered me,
it should be full width.

39
00:02:24.960 --> 00:02:27.677
It's because its parent isn't.

40
00:02:31.343 --> 00:02:32.970
That's interesting.

41
00:02:32.970 --> 00:02:34.092
It's just CSS stuff.

42
00:02:42.127 --> 00:02:44.207
Yeah, okay, I figured.

43
00:02:44.207 --> 00:02:44.724
Where's this?

44
00:02:44.724 --> 00:02:50.813
This thing is this one,

45
00:02:50.813 --> 00:02:54.116
this one should have a, no, it does.

46
00:02:54.116 --> 00:02:58.861
Has a one of one,
that's 100% total, I don't know.

47
00:02:58.861 --> 00:03:00.284
&gt;&gt; That would be slash full.

48
00:03:00.284 --> 00:03:02.889
Yeah, that's always about to add, but

49
00:03:02.889 --> 00:03:06.961
I don't know why one of one
wouldn't have done the same thing.

50
00:03:06.961 --> 00:03:10.020
There it is, much better.

51
00:03:10.020 --> 00:03:11.876
Cool, okay.

52
00:03:11.876 --> 00:03:18.876
Any questions on that?

53
00:03:18.876 --> 00:03:23.487
I mean, you could have gotten a similar
result to this without server

54
00:03:23.487 --> 00:03:25.965
components and client components.

55
00:03:25.965 --> 00:03:31.573
But the thing to remember is what's
actually happening in the background.

56
00:03:31.573 --> 00:03:35.622
There is no JavaScript here and
the client need it for

57
00:03:35.622 --> 00:03:39.673
this component because it
happened on the server and

58
00:03:39.673 --> 00:03:43.831
it was streamed in because
it's a server component.

59
00:03:43.831 --> 00:03:47.019
The data happened on the server,
the data fetching happened.

60
00:03:47.019 --> 00:03:49.403
So, that's one thing to remember.

61
00:03:49.403 --> 00:03:54.910
And then two, we don't have to set up the
conditional logic on is there a loading,

62
00:03:54.910 --> 00:03:58.531
you basically have to make
a hook to see if it's loading or

63
00:03:58.531 --> 00:04:01.637
not and
then at that point you're on the client.

64
00:04:01.637 --> 00:04:04.420
So, we got all of that logic for

65
00:04:04.420 --> 00:04:09.348
free on when to toggle loading
animation component and

66
00:04:09.348 --> 00:04:13.646
not without sending
JavaScript to the client.

67
00:04:13.646 --> 00:04:16.367
Which is kind of crazy,
other than the JavaScript that Next.js and

68
00:04:16.367 --> 00:04:19.819
React already has because suspense is part
of React, so that's already cacheable.

69
00:04:19.819 --> 00:04:22.509
It's predictable, so
it's cacheable and never changes.

70
00:04:22.509 --> 00:04:25.800
Next.js, whatever they add to
it is cacheable and predictable,

71
00:04:25.800 --> 00:04:26.749
it never changes.

72
00:04:26.749 --> 00:04:31.865
Your code is the only thing that changes,
so that's why it's hard to cache but

73
00:04:31.865 --> 00:04:34.980
all this happened on the server,
pretty cool.

