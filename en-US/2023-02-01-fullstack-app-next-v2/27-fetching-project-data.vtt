WEBVTT

1
00:00:00.080 --> 00:00:01.710
So we got our project card.

2
00:00:01.710 --> 00:00:04.190
The next thing we need to do
obviously bring it in here.

3
00:00:04.190 --> 00:00:09.860
We just got to figure out, how do we
get the data for the projects, though.

4
00:00:09.860 --> 00:00:10.980
So let's think about this.

5
00:00:10.980 --> 00:00:12.730
Let's talk about the different use cases.

6
00:00:12.730 --> 00:00:14.070
So let's talk about this one first.

7
00:00:15.290 --> 00:00:18.080
Where did we get the data for
this greeting card?

8
00:00:18.080 --> 00:00:20.740
The bigger the data in the page,
the bigger the data in the card itself.

9
00:00:29.075 --> 00:00:29.930
You sure?

10
00:00:29.930 --> 00:00:34.880
Let's see,
let's go to the greeting, uh-huh.

11
00:00:34.880 --> 00:00:37.640
We got the data and the component itself.

12
00:00:38.840 --> 00:00:42.716
The data responsible for the greeting
card is in the greeting card itself,

13
00:00:42.716 --> 00:00:45.620
itself contained, and
we didn't get this in the page.

14
00:00:45.620 --> 00:00:46.920
We could've,
there's nothing wrong with that.

15
00:00:46.920 --> 00:00:51.408
We totally could've gotten the data from
the page, pass it down as a prop, and

16
00:00:51.408 --> 00:00:55.060
it would've worked, but
we would not be able to do this.

17
00:00:55.060 --> 00:00:59.257
We would not be able to see it loading
like this independently because its data

18
00:00:59.257 --> 00:01:01.194
would have been bound to the page and

19
00:01:01.194 --> 00:01:04.450
that data would have got
fetched when the page loaded.

20
00:01:04.450 --> 00:01:08.152
Whereas now, the data requirements for
this component is not bound to the page,

21
00:01:08.152 --> 00:01:09.580
it's bound to itself.

22
00:01:09.580 --> 00:01:12.700
So the page and this component can
load independently from each other.

23
00:01:14.530 --> 00:01:16.930
&gt;&gt; And that's gonna be true for
all the components.

24
00:01:16.930 --> 00:01:18.140
Or that's the idea.

25
00:01:18.140 --> 00:01:19.620
&gt;&gt; That's the idea, exactly.

26
00:01:19.620 --> 00:01:24.320
The idea is to push the data fetching
requirements down as far as you can to

27
00:01:24.320 --> 00:01:27.350
the component that needs it and
do it there.

28
00:01:27.350 --> 00:01:31.371
That way you can load them individually
from each other versus making

29
00:01:31.371 --> 00:01:36.300
the page have to wait for all of its
children to load just to show something.

30
00:01:36.300 --> 00:01:39.789
We want to show something
meaningful immediately and

31
00:01:39.789 --> 00:01:42.813
everything else can show
up when it's ready,

32
00:01:42.813 --> 00:01:48.081
you just handle it with a fallback, with
a loading page or a suspense fallback and

33
00:01:48.081 --> 00:01:53.140
you have these nice, for lack of better
words, reactive, you know, apps.

34
00:01:53.140 --> 00:01:57.600
It's not new, people have been
building apps like this for a while.

35
00:01:57.600 --> 00:01:59.590
It's just a lot of setup to do it.

36
00:01:59.590 --> 00:02:01.600
So it's quite a lot having to do it.

37
00:02:01.600 --> 00:02:06.192
Like you have to use something like,
you know, finite state machines or

38
00:02:06.192 --> 00:02:10.407
something like that for your UI to
really hone that in and that's so

39
00:02:10.407 --> 00:02:14.199
repetitive and redundant even
though I do like using them.

40
00:02:14.199 --> 00:02:18.688
Okay, so we had to get the data and
the greeting card internally, but for

41
00:02:18.688 --> 00:02:23.619
the project but but that makes sense
because there's only one greeting card and

42
00:02:23.619 --> 00:02:28.109
it's always the same, but for
the projects, each one of these products

43
00:02:28.109 --> 00:02:32.260
are different and there's gonna
be many projects on the screen.

44
00:02:32.260 --> 00:02:38.806
So would we be getting the data for
the projects in the project card itself?

45
00:02:38.806 --> 00:02:42.228
Or rename it, the project card singular.

46
00:02:42.228 --> 00:02:46.117
Would we be getting that
in the project card itself?

47
00:02:46.117 --> 00:02:48.623
Or what would we have to
get that somewhere else?

48
00:02:50.756 --> 00:02:52.240
Have to get it somewhere else?

49
00:02:52.240 --> 00:02:52.870
&gt;&gt; I think it's in the card.

50
00:02:52.870 --> 00:02:53.520
&gt;&gt; Think it's in the card?

51
00:02:53.520 --> 00:02:54.910
&gt;&gt; Where you described it earlier.

52
00:02:54.910 --> 00:02:55.910
&gt;&gt; Okay, so let's walk through that.

53
00:02:55.910 --> 00:03:00.552
So if we were to get the data for
the project card in

54
00:03:00.552 --> 00:03:05.880
the project component,
&gt;&gt; You've got to generate project cards.

55
00:03:05.880 --> 00:03:07.120
We've got to generate project cards.

56
00:03:07.120 --> 00:03:08.320
So how would we do that?

57
00:03:08.320 --> 00:03:09.830
&gt;&gt; There's many of those.

58
00:03:09.830 --> 00:03:10.370
&gt;&gt; Yeah.

59
00:03:10.370 --> 00:03:15.776
So because of that, we'll have to probably
do it on the page because only the page,

60
00:03:15.776 --> 00:03:20.725
the thing, the container that's
responsible for laying these cards out,

61
00:03:20.725 --> 00:03:23.750
needs to know how many cards to lay out.

62
00:03:23.750 --> 00:03:26.650
So, therefore,
this container as in this page,

63
00:03:26.650 --> 00:03:31.450
is probably going to hold the
responsibility of getting the projects.

64
00:03:31.450 --> 00:03:35.334
Because each one of these projects doesn't
know that there's more projects to go

65
00:03:35.334 --> 00:03:35.952
next to it and

66
00:03:35.952 --> 00:03:40.840
it doesn't have control over, like this
project can't put this project next to it.

67
00:03:40.840 --> 00:03:42.860
But this this page can, this layout can.

68
00:03:44.590 --> 00:03:47.940
So because of that, the page itself will
probably be doing the data fetching for

69
00:03:47.940 --> 00:03:50.840
the project which is
different than this one.

70
00:03:50.840 --> 00:03:52.330
This one didn't need the page.

71
00:03:52.330 --> 00:03:56.810
This greeting card didn't need the page to
do the product, the fetching for the data.

72
00:03:56.810 --> 00:04:01.201
Because it's self contained it knows that
it needs data it doesn't need to be aware

73
00:04:01.201 --> 00:04:04.720
of another one next to it or
anything like that, it's just one.

74
00:04:04.720 --> 00:04:05.721
So it's totally fine but

75
00:04:05.721 --> 00:04:09.660
in the case of this one where we have to
loop over them and put them on the page.

76
00:04:09.660 --> 00:04:12.440
The page is the one I mean think
about where you're gonna do the map.

77
00:04:12.440 --> 00:04:15.924
If this was an array of data,
where are you gonna do data dot map?

78
00:04:15.924 --> 00:04:18.460
Is it gonna be in the individual card?

79
00:04:18.460 --> 00:04:22.140
Or is it gonna be the thing
that's containing them, right?

80
00:04:22.140 --> 00:04:25.135
So unless we make another component
that wraps all of these and

81
00:04:25.135 --> 00:04:26.632
put the data fetching in that,

82
00:04:26.632 --> 00:04:30.680
which we can, we'll have to put it in the
next pair, which in this case is the page.

83
00:04:30.680 --> 00:04:32.890
Does that make sense?

84
00:04:34.080 --> 00:04:35.294
Okay, let's do that.

85
00:04:38.292 --> 00:04:42.997
So we're just gonna make get data,
that's kind of the thing that I'm

86
00:04:42.997 --> 00:04:46.740
following here and
we'll just have to do a query here.

87
00:04:46.740 --> 00:04:50.070
And then we can use that
inside of our page.

88
00:04:50.070 --> 00:04:54.320
So let's go to our page
inside of dashboard

89
00:04:56.732 --> 00:04:59.660
Our dashboard home.

90
00:04:59.660 --> 00:05:00.160
There we go.

91
00:05:01.170 --> 00:05:04.022
And we're going to make
a function called getData.

92
00:05:07.259 --> 00:05:08.287
It's going to be async.

93
00:05:12.804 --> 00:05:14.280
We're going to await a delay.

94
00:05:14.280 --> 00:05:15.570
It'd be super dramatic here.

95
00:05:17.640 --> 00:05:24.352
And let's just delay for
like, two seconds.

96
00:05:24.352 --> 00:05:31.400
And then imagine this was an API
route that was protected.

97
00:05:31.400 --> 00:05:32.340
And someone was trying to get data.

98
00:05:32.340 --> 00:05:35.646
What would be the first thing you'd have
to do before you went to the database

99
00:05:35.646 --> 00:05:36.950
to get them to get their data?

100
00:05:39.390 --> 00:05:41.050
&gt;&gt; Check, make sure they're authenticated.

101
00:05:41.050 --> 00:05:43.019
&gt;&gt; Exactly.
We've got to check to make sure they're

102
00:05:43.019 --> 00:05:43.768
authenticated.

103
00:05:43.768 --> 00:05:47.190
So that's what we're gonna do.

104
00:05:47.190 --> 00:05:50.545
We're gonna use our getUserFromCookies, so

105
00:05:50.545 --> 00:05:55.280
we'll say user = await
getUserFromCookie and pass in cookies.

106
00:05:57.280 --> 00:06:00.480
And notice we had to do this
the same way in the greetings.

107
00:06:00.480 --> 00:06:01.330
We have to do that here too.

108
00:06:04.160 --> 00:06:07.700
So in a lot of these fetching
functions that you'll use for

109
00:06:07.700 --> 00:06:10.952
your server components that
are on protected pages,

110
00:06:10.952 --> 00:06:15.866
you'll find yourself authenticating the
user most of the time which if you think

111
00:06:15.866 --> 00:06:19.700
ahead you can just build
a higher order function for this.

112
00:06:19.700 --> 00:06:23.766
You could do something a little,
just be like with auth,

113
00:06:23.766 --> 00:06:29.050
you just wrap everything,
right and that'll do it for you.

114
00:06:29.050 --> 00:06:31.955
I'm almost positive that's what
people are gonna start doing.

115
00:06:37.375 --> 00:06:38.669
But for us, we're just using a function.

116
00:06:40.170 --> 00:06:43.400
So we got our user.

117
00:06:43.400 --> 00:06:46.604
The next thing we wanna do is we
wanna get all the projects for

118
00:06:46.604 --> 00:06:48.650
the current user, right?

119
00:06:48.650 --> 00:06:50.640
So we can use Prisma for that.

120
00:06:50.640 --> 00:06:57.410
So we can say,
projects = await db.projects.

121
00:06:57.410 --> 00:07:01.238
It's still crazy the fact that I'm writing
a database query, and a component at it,

122
00:07:01.238 --> 00:07:02.630
still blows my mind right now.

123
00:07:03.730 --> 00:07:08.211
And then we'll say findMany, like that,

124
00:07:08.211 --> 00:07:11.580
where we use where clause here.

125
00:07:12.670 --> 00:07:17.176
And basically, we just want to
grab the ones that whose owner is

126
00:07:17.176 --> 00:07:22.021
the one that signed in and make sure
we include tasks cuz we need tasks

127
00:07:22.021 --> 00:07:25.100
to be able to compute
this stuff down here.

128
00:07:25.100 --> 00:07:27.349
And by default, it won't include tasks.

129
00:07:28.400 --> 00:07:29.150
So let's do that.

130
00:07:29.150 --> 00:07:32.760
So we'll say where owner ID is user ID.

131
00:07:35.530 --> 00:07:36.840
Right?

132
00:07:36.840 --> 00:07:39.080
This is just freaking out because
it's like this is probably no and

133
00:07:39.080 --> 00:07:40.570
that's why I put that question mark there.

134
00:07:41.980 --> 00:07:47.390
And then we just want to include tasks.

135
00:07:48.490 --> 00:07:48.990
True.

136
00:07:49.990 --> 00:07:51.630
So now we got our projects.

137
00:07:51.630 --> 00:07:54.943
And then we just return the projects.

138
00:08:02.565 --> 00:08:07.070
I guess I had it in an object there, so
I'll be consistent and do the same thing.

139
00:08:07.070 --> 00:08:10.361
I think this is a good practice,
because this is simple but

140
00:08:10.361 --> 00:08:14.939
I would imagine you will you might have
more data needs other than just one query.

141
00:08:14.939 --> 00:08:19.398
You might do a lot of stuff in here so you
can send them all back here because I mean

142
00:08:19.398 --> 00:08:23.789
I guess you could also just make more
functions and just call all of them here,

143
00:08:23.789 --> 00:08:27.130
but then we get into parallel
versus serial data loading.

144
00:08:27.130 --> 00:08:32.083
And we could talk about that in
a production V2 version of next JS,

145
00:08:32.083 --> 00:08:36.152
where how to optimize parallel
async data fetching and

146
00:08:36.152 --> 00:08:41.930
server components versus serial and
when to do it and how to do it.

147
00:08:41.930 --> 00:08:45.070
It's basically like a prefetch but for
data, it's kind of crazy how that works.

148
00:08:45.070 --> 00:08:49.104
But we can get into that later because
it's kind of complicated but for now,

149
00:08:49.104 --> 00:08:52.587
yeah, I'm just going to do that and
then we can get our projects.

150
00:08:54.706 --> 00:08:59.230
Equals awaits get data like that, we've
got to restructure this structure this.

151
00:09:05.937 --> 00:09:10.160
And now that we have our projects,
by the way, don't forget to destructure.

152
00:09:10.160 --> 00:09:11.257
I didn't put that here, but

153
00:09:11.257 --> 00:09:14.230
you gotta destructure it if
it's an object like that.

154
00:09:14.230 --> 00:09:20.211
Now that we have our projects, we can just
loop over them and create this link for

155
00:09:20.211 --> 00:09:25.650
them around a project card so
we can actually click on them.

156
00:09:25.650 --> 00:09:26.270
So let's do that.

157
00:09:26.270 --> 00:09:30.126
So if you go down to the JSX you can see
right here it says projects map here, so

158
00:09:30.126 --> 00:09:32.500
you just want to put it here.

159
00:09:32.500 --> 00:09:35.203
So you can just say,

160
00:09:35.203 --> 00:09:40.823
projects.mapGet a project.

161
00:09:40.823 --> 00:09:44.675
And then we're gonna have a div here and

162
00:09:44.675 --> 00:09:48.878
inside this div we're
gonna have a link and

163
00:09:48.878 --> 00:09:54.388
then inside this link we're
gonna have a project cart.

164
00:09:54.388 --> 00:09:55.550
We go, okay.

165
00:09:55.550 --> 00:09:59.660
For the div we got some classes
here we got a 1/3 and a p3.

166
00:09:59.660 --> 00:10:06.820
So we'll say class name with
is 1/3 padding is three.

167
00:10:06.820 --> 00:10:08.110
On this link, we need a href.

168
00:10:09.360 --> 00:10:12.700
href is going to be dynamic cuz it's
going to go to, look at the URL here.

169
00:10:12.700 --> 00:10:16.843
It's going to go to /project/ID.

170
00:10:16.843 --> 00:10:24.127
So we'll say /project/project.id.

171
00:10:24.127 --> 00:10:25.895
Like that.

172
00:10:25.895 --> 00:10:31.853
And this project cart
takes a project Like that,

173
00:10:31.853 --> 00:10:36.010
and this is freaking out because
it wants me to put a key.

174
00:10:37.960 --> 00:10:40.220
And I'll do it just so
it goes away cuz it's annoying.

175
00:10:42.170 --> 00:10:44.566
I'll just do a project.id.

176
00:10:46.648 --> 00:10:48.660
Cool, now we have our projects.

177
00:10:51.890 --> 00:10:54.940
So let's go check it out and
see what happens.

178
00:10:54.940 --> 00:10:58.150
Do we actually get some projects here?

179
00:10:58.150 --> 00:10:59.260
Loading, loading, loading.

180
00:11:04.310 --> 00:11:06.070
I didn't get any projects.

181
00:11:06.070 --> 00:11:08.070
Do I have projects here?

182
00:11:08.070 --> 00:11:09.210
Maybe I don't have any projects.

183
00:11:09.210 --> 00:11:09.710
Let's see.

184
00:11:11.880 --> 00:11:12.933
I'm going to log that.

185
00:11:16.902 --> 00:11:17.920
So it didn't error.

186
00:11:17.920 --> 00:11:19.480
Yeah, it looks like I just
don't have any projects.

187
00:11:19.480 --> 00:11:21.810
&gt;&gt; Yeah,
we want to sign in through our seed user.

188
00:11:21.810 --> 00:11:24.210
&gt;&gt; Yeah.
I need to sign in through my seed user.

189
00:11:24.210 --> 00:11:25.090
I guess I'll do that.

190
00:11:25.090 --> 00:11:25.630
Let me do that.

191
00:11:25.630 --> 00:11:27.556
Let me go.

192
00:11:27.556 --> 00:11:34.923
To sign in try to sign in there I
think it is what user at email and

193
00:11:34.923 --> 00:11:38.900
I think it's password, maybe.

194
00:11:38.900 --> 00:11:42.800
I don't think it's gonna work.

195
00:11:42.800 --> 00:11:47.971
Now, I see Alex is gonna work
now because it's trying to like,

196
00:11:47.971 --> 00:11:51.570
it's trying to re-save the password.

197
00:11:51.570 --> 00:11:52.820
Yeah.

198
00:11:52.820 --> 00:11:53.510
Not hashed.

199
00:11:53.510 --> 00:11:55.030
But now it's trying to compare to hashed.

200
00:11:55.030 --> 00:11:59.830
So we got to go back into the seed and
just hash the password.

201
00:11:59.830 --> 00:12:00.490
And that makes sense.

202
00:12:03.300 --> 00:12:06.600
Go down here and hash this.

203
00:12:13.285 --> 00:12:14.270
I'm gonna run my seed again.

204
00:12:16.370 --> 00:12:19.050
There we go, so I'm gonna create
a database so that the hashing of

205
00:12:19.050 --> 00:12:22.530
the passwords in our seed script actually
goes through because of the up cert.

206
00:12:22.530 --> 00:12:29.380
So mpx prisma migrates, let''s see help.

207
00:12:29.380 --> 00:12:34.291
I wanna say it's resets,
but yeah, migrate reset,

208
00:12:34.291 --> 00:12:38.121
which I think runs the seat for
us as well.

209
00:12:40.829 --> 00:12:42.431
If not, we'll just run it again after.

210
00:12:45.366 --> 00:12:47.220
Yeah, so it's running the seat for us.

211
00:12:48.940 --> 00:12:49.870
Okay, cool.

212
00:12:49.870 --> 00:12:51.300
Password, looks like it was hash.

213
00:12:51.300 --> 00:12:54.740
So let's start this thing.

214
00:12:54.740 --> 00:12:57.147
It's already stopped and started again.

215
00:13:00.384 --> 00:13:03.132
And let's go check it out.

216
00:13:03.132 --> 00:13:07.050
Where is it?

217
00:13:07.050 --> 00:13:08.080
Bring it over here, okay?

218
00:13:08.080 --> 00:13:13.552
So if we go to sign in Or

219
00:13:13.552 --> 00:13:17.940
sign in, there we go.

220
00:13:19.290 --> 00:13:21.191
Let's try to sign in with our seed user.

221
00:13:29.093 --> 00:13:30.310
There we go.

222
00:13:30.310 --> 00:13:32.100
It's trying to do something, there it is.

223
00:13:32.100 --> 00:13:35.040
So it's because we have
that delay on the projects.

224
00:13:35.040 --> 00:13:37.200
That two second delay.

225
00:13:37.200 --> 00:13:42.149
Okay, so now we're in it looks like
our projects are loaded up somehow we

226
00:13:42.149 --> 00:13:44.820
got 10 out of 10 completed.

227
00:13:44.820 --> 00:13:49.700
How lucky is that [LAUGH] with the
randomness but that's the way it's seeded.

228
00:13:49.700 --> 00:13:52.089
I guess or math is wrong one of the two.

