WEBVTT

1
00:00:00.000 --> 00:00:04.567
So next if we look at our App,
we wanna work on these project cards here.

2
00:00:04.567 --> 00:00:08.123
So first of all, make the project card,
and then second,

3
00:00:08.123 --> 00:00:11.246
we'll figure out where
we're gonna get the data,

4
00:00:11.246 --> 00:00:15.835
how we're gonna get the data, and
then we'll go from there, sound good?

5
00:00:15.835 --> 00:00:20.561
Okay, so if we go to the project
cards section here on the notes,

6
00:00:20.561 --> 00:00:23.899
the project card is
really not that special.

7
00:00:23.899 --> 00:00:28.378
There's some stuff in here that
is maybe worth talking about.

8
00:00:28.378 --> 00:00:33.051
So we can do that mostly around
some of the TypeScript stuff that

9
00:00:33.051 --> 00:00:36.855
I'm doing here with Prisma,
which is kinda cool.

10
00:00:36.855 --> 00:00:38.253
So we could talk about that.

11
00:00:38.253 --> 00:00:45.774
So let's go into our components,
Folder, and make a project card.

12
00:00:52.867 --> 00:00:54.307
There we go.

13
00:00:54.307 --> 00:00:56.214
I don't know why it did that.

14
00:00:59.068 --> 00:01:06.979
Cool, so I'm gonna do a couple
things here on the imports.

15
00:01:06.979 --> 00:01:08.022
Bring in Prisma in here.

16
00:01:08.022 --> 00:01:11.558
Like I said, I'm gonna do some
TypeScript stuff with Prisma.

17
00:01:11.558 --> 00:01:16.881
We're gonna use the card component
cuz it's a card and clsx for helping

18
00:01:16.881 --> 00:01:22.305
me write classNames without backticks and
pluses cuz I hate doing that.

19
00:01:22.305 --> 00:01:27.523
So the project card is a component for
each one of these cards.

20
00:01:27.523 --> 00:01:30.585
So as a prop, you probably imagine
it needs to take in a project so

21
00:01:30.585 --> 00:01:32.535
it can actually show this information.

22
00:01:32.535 --> 00:01:35.303
So you can see right now
it takes to this date.

23
00:01:35.303 --> 00:01:36.924
This date is when it was created at.

24
00:01:36.924 --> 00:01:38.702
This is the name of the project.

25
00:01:38.702 --> 00:01:42.505
This is how many tasks
are completed out of total.

26
00:01:42.505 --> 00:01:45.459
So it needs all the tasks, and
then it calculates the percentage.

27
00:01:45.459 --> 00:01:49.759
So it needs a few amount of some
stuff there for sure for projects.

28
00:01:49.759 --> 00:01:55.539
So we get that for free automatically
as far as those types through Prisma,

29
00:01:55.539 --> 00:02:01.708
because Prisma creates a Typesafe client
for us that's already got the props.

30
00:02:01.708 --> 00:02:04.542
We just gotta find a way to
translate that to a React prop.

31
00:02:04.542 --> 00:02:09.257
So we can actually do that
pretty effectively here.

32
00:02:09.257 --> 00:02:14.325
So the first thing we wanna do is
we wanna create this object here,

33
00:02:14.325 --> 00:02:19.135
which is gonna be something we
get using Prisma.validator.

34
00:02:19.135 --> 00:02:25.775
So what we can say is, what did I
call it here, project with tasks.

35
00:02:25.775 --> 00:02:31.461
And we can say Prisma.validator,
like this.

36
00:02:31.461 --> 00:02:33.757
And that's gonna take a generic like this.

37
00:02:33.757 --> 00:02:42.079
So this generic is gonna
be Prisma.ProjectArgs.

38
00:02:42.079 --> 00:02:43.986
So let's talk about this.

39
00:02:43.986 --> 00:02:47.766
One, a generic is just like
an argument for a type.

40
00:02:47.766 --> 00:02:49.625
That's the best way I can describe it.

41
00:02:49.625 --> 00:02:53.678
Some types are dynamic,
as in you might have a type for

42
00:02:53.678 --> 00:02:57.643
a function that returns something,
but its value,

43
00:02:57.643 --> 00:03:03.433
the type of what it returns is dependent
on the arguments that it's passed.

44
00:03:03.433 --> 00:03:05.994
So you need a generic to
have that be dynamic.

45
00:03:05.994 --> 00:03:10.097
So in this case,
validator is taking a generic cuz it needs

46
00:03:10.097 --> 00:03:13.881
an argument to what's gonna
affect what it returns.

47
00:03:13.881 --> 00:03:16.427
And that argument is gonna
be Prisma.ProjectArgs.

48
00:03:16.427 --> 00:03:20.759
ProjectArgs are gonna be the arguments
needed for us to make a project.

49
00:03:20.759 --> 00:03:23.409
And we know what's needed
to make a project,

50
00:03:23.409 --> 00:03:28.247
because if we go look at our schema,
it's everything that's required, right?

51
00:03:28.247 --> 00:03:32.796
So it'd be like a name, a ownerId.

52
00:03:32.796 --> 00:03:36.208
Yeah, it would just be those,
basically, a name, a ownerId.

53
00:03:36.208 --> 00:03:41.701
Everything else either has a default or
it's already there, or it's not required.

54
00:03:41.701 --> 00:03:43.802
So those will be the Args there.

55
00:03:43.802 --> 00:03:47.672
So this isn't something built into Prisma,
this is something that was generated,

56
00:03:47.672 --> 00:03:49.970
ProjectArgs, cuz there's a UserArgs,
right?

57
00:03:49.970 --> 00:03:55.233
And then there's a TaskArgs, right,
that's generated from our schema.

58
00:03:55.233 --> 00:04:00.317
So ProjectArgs here, And
then that's gonna be a function.

59
00:04:00.317 --> 00:04:03.770
And that function is basically
a higher order function, or

60
00:04:03.770 --> 00:04:08.340
we're gonna immediately invoke it, and
we're gonna pass in an object here.

61
00:04:08.340 --> 00:04:13.241
And we're here, we just need to include
the tasks, because by default, oops,

62
00:04:13.241 --> 00:04:19.768
by default, A project,
when you query it through Prisma,

63
00:04:19.768 --> 00:04:24.868
when you query anything through Prisma
that has a relationship, for instance,

64
00:04:24.868 --> 00:04:29.293
if I were to query a user, it by default
would not include the project or

65
00:04:29.293 --> 00:04:31.928
the task, it has to mainly include them.

66
00:04:31.928 --> 00:04:34.953
You can think of it as a join
table in SQL, or in Mongo,

67
00:04:34.953 --> 00:04:38.668
I think it's called a population,
you can think of it like that.

68
00:04:38.668 --> 00:04:40.222
So you have to mainly include it.

69
00:04:40.222 --> 00:04:42.406
So we're just saying, yeah,

70
00:04:42.406 --> 00:04:47.278
we want to make a type that looks
like the arguments for a project, but

71
00:04:47.278 --> 00:04:51.744
also includes the tasks,
because projects could have tasks.

72
00:04:53.309 --> 00:04:56.315
Right, I could also say include owner or

73
00:04:56.315 --> 00:05:00.836
whatever if I had an owner there,
but we're not doing that.

74
00:05:00.836 --> 00:05:05.727
Okay, so now that I have that,
I can use some TypeScript magic here.

75
00:05:05.727 --> 00:05:10.384
And I can make a new type,
I'm gonna call it ProjectWithTask.

76
00:05:10.384 --> 00:05:15.051
But I'm gonna use this type here
that also takes an argument,

77
00:05:15.051 --> 00:05:17.487
Prisma.ProjectGetPayload.

78
00:05:17.487 --> 00:05:18.863
So what is the payload of the project?

79
00:05:18.863 --> 00:05:22.837
Well, I want it to be the type
of whatever ProjectWithTask is.

80
00:05:22.837 --> 00:05:27.913
So I'm gonna say type projectWithTask =

81
00:05:27.913 --> 00:05:33.279
Prisma.getProjects, or what is it,

82
00:05:33.279 --> 00:05:37.927
al the way around, Project., oop,

83
00:05:42.962 --> 00:05:45.825
One word, ProjectGetPayload, there we go.

84
00:05:45.825 --> 00:05:48.776
That's a type that takes a generic here,
and

85
00:05:48.776 --> 00:05:54.727
then I'm gonna say typeof,
Our projectWithTask.

86
00:05:54.727 --> 00:05:58.111
So if you didn't know this in TypeScript,

87
00:05:58.111 --> 00:06:03.093
you can tell TypeScript what a type
is by putting typeof in front

88
00:06:03.093 --> 00:06:08.035
of it, Which is really cool.

89
00:06:08.035 --> 00:06:09.358
So now we have a new type,

90
00:06:09.358 --> 00:06:16.440
projectWithTasks, And
it's gonna be this type here.

91
00:06:16.440 --> 00:06:21.431
So now we can actually use this for
our functional component.

92
00:06:21.431 --> 00:06:22.201
So let's do that.

93
00:06:22.201 --> 00:06:24.057
So we're gonna make our components.

94
00:06:24.057 --> 00:06:25.538
We're gonna call this a ProjectCard.

95
00:06:27.812 --> 00:06:31.663
We're gonna make it equal to that, and

96
00:06:31.663 --> 00:06:37.040
then I'm gonna use FC for
functional component here.

97
00:06:37.040 --> 00:06:38.747
That takes a generic.

98
00:06:38.747 --> 00:06:40.331
What do you want your props to look like?

99
00:06:40.331 --> 00:06:41.957
They're gonna look like
a projectWithTasks.

100
00:06:45.415 --> 00:06:50.217
So we did all of that, so we didn't have
to just write our own interface like this

101
00:06:50.217 --> 00:06:54.748
interface Projects, and then we just
put all the stuff that a project has.

102
00:06:54.748 --> 00:06:56.900
That's not hard to do,
I mean, you could do that.

103
00:06:56.900 --> 00:07:01.188
Problem is, if you do that, and then you
go change your project schema, in your

104
00:07:01.188 --> 00:07:05.621
schema when you generate what it means to
be a project, you gotta change this too.

105
00:07:05.621 --> 00:07:07.630
And you had to keep doing that over and
over and over again,

106
00:07:07.630 --> 00:07:09.240
cuz this isn't gonna change automatically.

107
00:07:09.240 --> 00:07:12.264
But if we rely on the stuff
generated from us through Prisma,

108
00:07:12.264 --> 00:07:16.239
which is automatically changeable when
we do migrations and things like that,

109
00:07:16.239 --> 00:07:18.578
then this code won't
ever have to be touched.

110
00:07:18.578 --> 00:07:23.437
It'll just work, up until the point where
you no longer have tasks on projects,

111
00:07:23.437 --> 00:07:24.447
I would assume.

112
00:07:24.447 --> 00:07:28.933
So other than that, it's mostly just
a standard React component, but

113
00:07:28.933 --> 00:07:32.616
we can go through it cuz there's
some JavaScript in here.

114
00:07:32.616 --> 00:07:35.153
So let's go through it
through that JavaScript and

115
00:07:35.153 --> 00:07:37.515
then we can just get the JSX
stuff out of the way.

116
00:07:37.515 --> 00:07:41.730
So the first thing is,
if you go and look at the cards,

117
00:07:41.730 --> 00:07:45.869
they have a date, so
we're gonna format that date.

118
00:07:45.869 --> 00:07:50.993
I think this is where people
will pull in Moment, MomentJS,

119
00:07:50.993 --> 00:07:56.929
a massive date library, but
that takes up half your app, if not more.

120
00:07:56.929 --> 00:07:59.440
We don't need that, one,
because it's massive, two,

121
00:07:59.440 --> 00:08:00.990
there's better things out there.

122
00:08:00.990 --> 00:08:03.339
I think datef and s is way better.

123
00:08:03.339 --> 00:08:05.536
But three, we can just do this
ourselves with a date object,

124
00:08:05.536 --> 00:08:06.797
it's actually really easy to do.

125
00:08:06.797 --> 00:08:08.609
So we'll make a function
called formatDate.

126
00:08:08.609 --> 00:08:10.346
[COUGH] It takes in a date.

127
00:08:13.376 --> 00:08:18.506
And if I can get my notes,
it's just going to make a new date out of

128
00:08:18.506 --> 00:08:23.844
the date that we get back and
use this toLocalDateString, right?

129
00:08:23.844 --> 00:08:30.446
So we can say date,
NewDate from the date .toLocalDateString,

130
00:08:30.446 --> 00:08:34.656
or yeah, DateString, not TimeString.

131
00:08:34.656 --> 00:08:35.751
That will just give me the time.

132
00:08:35.751 --> 00:08:37.982
So that, we can do that.

133
00:08:37.982 --> 00:08:43.039
And then from here, we just pass in our
locale, which is gonna be English US.

134
00:08:45.764 --> 00:08:48.026
And then just the options you wanna use.

135
00:08:48.026 --> 00:08:52.810
So in this case,
we can say we want the weekday to be long,

136
00:08:52.810 --> 00:08:58.914
the year to be numeric, the month to
be short, and the day to be numeric.

137
00:09:00.811 --> 00:09:04.469
So a little date format hack if
you've never used that before,

138
00:09:04.469 --> 00:09:06.344
it's actually really simple.

139
00:09:06.344 --> 00:09:09.563
I don't know why people
don't use this more.

140
00:09:09.563 --> 00:09:10.509
Okay, so we got that.

141
00:09:12.568 --> 00:09:16.338
Now, what we wanna do is we need
to compute the completed count.

142
00:09:16.338 --> 00:09:21.237
So if we look at here, we need to know
how many were completed out of total,

143
00:09:21.237 --> 00:09:25.597
and if you look at the six script
that we've made, it's random.

144
00:09:25.597 --> 00:09:30.902
COMPLETED is, where is it, right here.

145
00:09:30.902 --> 00:09:35.115
So the status, which can be COMPLETED,
NOT_STARTED, or STARTED is random.

146
00:09:35.115 --> 00:09:37.731
So if you go to, you can see right here,
I'm just taking all these and

147
00:09:37.731 --> 00:09:39.098
I'm literally doing a random one.

148
00:09:39.098 --> 00:09:42.460
So we don't know how many it is,
so we can't hardcode it.

149
00:09:42.460 --> 00:09:44.937
So we do have to compute it.

150
00:09:44.937 --> 00:09:49.131
So what we will do is just
basically filter over them and

151
00:09:49.131 --> 00:09:52.413
just grab the ones that are completed, and

152
00:09:52.413 --> 00:09:57.712
then we will do some math to figure
out what is the percentage of that.

153
00:09:57.712 --> 00:10:00.105
So let's do that, so completedCounts,

154
00:10:03.527 --> 00:10:07.368
It's just gonna be, well,
we gotta get the project here.

155
00:10:09.243 --> 00:10:10.247
There we go.

156
00:10:10.247 --> 00:10:15.436
It's gonna be project.tasks.map.

157
00:10:21.595 --> 00:10:23.089
Where is it,
let me export this right quick.

158
00:10:27.521 --> 00:10:28.384
There we go.

159
00:10:28.384 --> 00:10:30.185
Okay, I would imagine this
would give me some type checks.

160
00:10:30.185 --> 00:10:35.015
Probably Project is not,
wait, I gotta do this,

161
00:10:35.015 --> 00:10:38.165
I gotta say, project is that type.

162
00:10:38.165 --> 00:10:39.009
There we go.

163
00:10:39.009 --> 00:10:43.169
Okay, so
now I can say give me the project and

164
00:10:43.169 --> 00:10:50.723
then I just wanna get the ones that
are project.status==='COMPLETED'.

165
00:10:50.723 --> 00:10:55.664
I can use the text COMPLETED here,
but I can also import TASK_STATUS, and

166
00:10:55.664 --> 00:11:00.850
I can say .COMPLETED there, which is
probably better, since this is a enum.

167
00:11:00.850 --> 00:11:04.416
So if you make a enum in a Prisma schema,
you can import that enum into your

168
00:11:04.416 --> 00:11:08.040
JavaScript and use the properties on
it versus remembering the strings,

169
00:11:08.040 --> 00:11:09.158
which is really cool.

170
00:11:09.158 --> 00:11:13.128
And then you can map that to a TypeScript
enum if you want, if you really wanna get

171
00:11:13.128 --> 00:11:16.582
crazy, but you don't need to,
cuz that's basically what this is.

172
00:11:16.582 --> 00:11:20.255
So we can say that, and
then we can do that .length.

173
00:11:20.255 --> 00:11:21.951
So that'll give us how many are completed.

174
00:11:23.730 --> 00:11:28.099
And then we can just look at the progress,
which is just a simple calculation here.

175
00:11:28.099 --> 00:11:34.474
We're just basically saying, round
down completedCount divided by total.

176
00:11:34.474 --> 00:11:38.627
That's gonna give you some percentage
decimal, multiply that back to 100 to get

177
00:11:38.627 --> 00:11:42.326
it back to a whole number, and
that's the progress, so basic math there.

178
00:11:46.086 --> 00:11:48.078
And then from there, it's mostly just JSX.

179
00:11:48.078 --> 00:11:49.395
I'm just gonna copy that.

180
00:11:49.395 --> 00:11:51.050
It's nothing special here.

181
00:11:51.050 --> 00:11:53.646
I can go through and
talk about all the interpolated values.

182
00:11:59.638 --> 00:12:04.547
So I'm just gonna rename my
function to formats, so formatDate.

183
00:12:04.547 --> 00:12:09.198
But basically, all we're doing here is
we're putting a date here using our format

184
00:12:09.198 --> 00:12:13.863
or formatDate function, passing in
project.createdAT, which is a timestamp.

185
00:12:13.863 --> 00:12:18.100
I know that because it's right here,
created as a DateTime.

186
00:12:21.951 --> 00:12:27.161
The next one is here, I'm just showing
the percentage that was completed.

187
00:12:27.161 --> 00:12:30.313
That's the part that's
underneath the card or

188
00:12:30.313 --> 00:12:33.948
underneath the bar that's
showing that right there.

189
00:12:39.140 --> 00:12:40.668
I'm sorry, no,
that's that part right there.

190
00:12:40.668 --> 00:12:43.266
This part is this number right here, so

191
00:12:43.266 --> 00:12:46.982
the number completed divided by total,
that's that.

192
00:12:46.982 --> 00:12:50.437
And then the bar itself is
actually pretty simple.

193
00:12:50.437 --> 00:12:54.342
All it is is just you got one div here,
this background div,

194
00:12:54.342 --> 00:12:57.327
that's just a different color and rounded.

195
00:12:57.327 --> 00:13:01.500
And then you have another div that's
literally sitting on top of it.

196
00:13:01.500 --> 00:13:05.231
And we're just changing the width of
the upper div based off the percentage.

197
00:13:05.231 --> 00:13:07.596
So if it's 100% wide,
it'll go all the way.

198
00:13:07.596 --> 00:13:11.214
If it's 20% wide, it'll go 20% of the way.

199
00:13:11.214 --> 00:13:14.179
That's it, that's really all we're doing,
so you can look at the code here.

200
00:13:14.179 --> 00:13:18.464
So you can see here's the rail,
the background div.

201
00:13:18.464 --> 00:13:22.067
And then here's the upper div, the actual
bar, and the width is what's dynamic.

202
00:13:22.067 --> 00:13:26.311
It's whatever the progress is percentage.

203
00:13:26.311 --> 00:13:29.218
That's really it,
nothing else crazy about it.

204
00:13:29.218 --> 00:13:33.330
The reason I had to make a style tag
versus just putting it in here with

205
00:13:33.330 --> 00:13:37.949
Tailwind, cuz you can actually do
something like this in Tailwind where you

206
00:13:37.949 --> 00:13:43.235
say w and you can put whatever number you
want here, pixels, percentage, whatever.

207
00:13:43.235 --> 00:13:47.943
But it wouldn't work because Tailwind
statically looks at these classes to

208
00:13:47.943 --> 00:13:49.862
determine what it should add.

209
00:13:49.862 --> 00:13:51.173
And if it's dynamic,

210
00:13:51.173 --> 00:13:55.451
which in this case it would have been
dynamic cuz we would need a progress,

211
00:13:55.451 --> 00:14:01.667
it would have been something like w-,
It would have been something like that.

212
00:14:01.667 --> 00:14:03.103
Tailwind can't read that.

213
00:14:03.103 --> 00:14:09.557
It can't evaluate that JavaScript for us
cuz it's statically reading the classes.

214
00:14:09.557 --> 00:14:13.556
Just like TypeScript is a static
analysis tool, so is Tailwind.

215
00:14:13.556 --> 00:14:16.645
So it wouldn't have been
able to read that, so

216
00:14:16.645 --> 00:14:19.116
I had to put a style tag here for that.

217
00:14:21.395 --> 00:14:27.094
And then lastly, yeah,
just a progress percentage at the bottom.

218
00:14:27.094 --> 00:14:29.672
Other than that, it's just regular
old JSX here, nothing crazy.

