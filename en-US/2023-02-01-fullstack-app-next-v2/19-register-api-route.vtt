WEBVTT

1
00:00:00.509 --> 00:00:02.571
All right, auth is looking good.

2
00:00:02.571 --> 00:00:06.276
So we got our all form,
we got our auth pages.

3
00:00:06.276 --> 00:00:12.674
Now we just need to make the API functions
that are gonna use these auth libraries,

4
00:00:12.674 --> 00:00:18.143
so our auth form on our auth pages can
make an API request to register and

5
00:00:18.143 --> 00:00:22.244
sign in, and
then they can finally get into our app.

6
00:00:22.244 --> 00:00:23.976
So let's do that next.

7
00:00:26.117 --> 00:00:29.201
So for the API routes,
we're gonna make one for /register,

8
00:00:29.201 --> 00:00:31.108
which is exactly what it sounds like.

9
00:00:31.108 --> 00:00:32.678
It's for registering.

10
00:00:32.678 --> 00:00:34.226
And we're gonna make one for sign in.

11
00:00:36.689 --> 00:00:38.797
So let's start with register first.

12
00:00:38.797 --> 00:00:43.386
So we're gonna head over to
the pages directory, pages/API.

13
00:00:43.386 --> 00:00:45.635
We're gonna make them for register.

14
00:00:48.709 --> 00:00:54.896
And hence, we're gonna exports
default async function,

15
00:00:54.896 --> 00:01:01.340
so I'll call it register,
like that, request, response.

16
00:01:01.340 --> 00:01:02.355
There we go.

17
00:01:09.291 --> 00:01:12.980
So we've kind of distinct about
the strategy of register, and

18
00:01:12.980 --> 00:01:15.846
like what is the purpose,
what is it going to do?

19
00:01:15.846 --> 00:01:19.032
Well, first it's just gonna check
to see if we're in a POST request,

20
00:01:19.032 --> 00:01:21.304
just to make sure that
we're only handling that.

21
00:01:21.304 --> 00:01:27.450
And then it's just going to
attempt to create a user here.

22
00:01:27.450 --> 00:01:32.349
So you might ask yourself, well, why would
we try to create a user without verifying

23
00:01:32.349 --> 00:01:34.705
if the user's in the database already?

24
00:01:34.705 --> 00:01:37.765
Well, that's because we're juts gonna
leave that to our schema constraints to

25
00:01:37.765 --> 00:01:38.352
do that for us.

26
00:01:38.352 --> 00:01:40.617
Our schema has a constraint
on unique email, so

27
00:01:40.617 --> 00:01:43.746
if you try to create a user with
the same email, it won't let you.

28
00:01:43.746 --> 00:01:45.266
So we don't have to do that check first.

29
00:01:45.266 --> 00:01:47.461
That's the whole point
of a unique constraint.

30
00:01:47.461 --> 00:01:49.670
So this will fail if there's
already user of this email.

31
00:01:49.670 --> 00:01:50.366
So that's done.

32
00:01:50.366 --> 00:01:54.330
So we'll try to create a user
with a hashed password, and

33
00:01:54.330 --> 00:01:56.984
with the first name and the last name.

34
00:01:56.984 --> 00:01:59.840
And then from there, if that's successful,

35
00:01:59.840 --> 00:02:04.162
we'll create a JSON Web Token from
that user and set it as a cookie, and

36
00:02:04.162 --> 00:02:08.360
send back a response of nothing
pretty much, just 201 success.

37
00:02:08.360 --> 00:02:11.700
And that's the strategy of the register.

38
00:02:11.700 --> 00:02:12.562
So let's do that.

39
00:02:12.562 --> 00:02:17.459
If you want to be able to use some
of the hints for the type checking,

40
00:02:17.459 --> 00:02:23.332
you can import the next API request the
next API response interfaces from Next.

41
00:02:23.332 --> 00:02:26.800
If you wanna get some of that nice type
checking, which is actually kinda useful

42
00:02:26.800 --> 00:02:29.351
for these objects, so
I'm actually gonna import those.

43
00:02:31.946 --> 00:02:36.863
So let's say, was it next/server, or no?

44
00:02:36.863 --> 00:02:40.168
No, it's just next now, like consolidated.

45
00:02:40.168 --> 00:02:46.513
So nextAPiRequest, nextAPiResponse,
and you get to put them there.

46
00:02:50.783 --> 00:02:52.056
There we go.

47
00:02:52.056 --> 00:02:54.916
So we'll say, if req.method, and

48
00:02:54.916 --> 00:03:00.560
now we got that type check stuff there,
POST, make sure it's all caps.

49
00:03:00.560 --> 00:03:03.289
If you put lowercase post,
that's never gonna be true.

50
00:03:03.289 --> 00:03:05.881
It's always all caps.

51
00:03:05.881 --> 00:03:11.659
So if it's a POST,
we're going to create a user, awaits,

52
00:03:11.659 --> 00:03:17.336
we're gonna bring in our db.user.create,
like that.

53
00:03:17.336 --> 00:03:22.128
Where our data, email, it's gonna

54
00:03:22.128 --> 00:03:26.773
be req.body.email, like that.

55
00:03:26.773 --> 00:03:30.780
Password is gonna be req.body.password.

56
00:03:30.780 --> 00:03:33.303
No, we can't put a plain
text password on database.

57
00:03:33.303 --> 00:03:35.710
That's right,
we made a hashing function to do that.

58
00:03:35.710 --> 00:03:36.824
So let's bring that in.

59
00:03:36.824 --> 00:03:44.660
So we'll say,
await hashPassword, like that.

60
00:03:44.660 --> 00:03:47.972
And then we can say req.body.password.

61
00:03:47.972 --> 00:03:50.023
So if you're looking at me like,
why did I, or

62
00:03:50.023 --> 00:03:51.873
how did I put in await
on a field like that?

63
00:03:51.873 --> 00:03:52.636
Yeah, you could do that.

64
00:03:52.636 --> 00:03:54.912
You could put in await pretty
much wherever you want.

65
00:03:54.912 --> 00:03:56.195
This works.

66
00:03:56.195 --> 00:04:00.753
The only problem with this is like, how do
you properly handle that specific error?

67
00:04:00.753 --> 00:04:03.693
You can't put a try catch right here.

68
00:04:03.693 --> 00:04:08.719
So you won't be able to get down to
just handling that granular error.

69
00:04:08.719 --> 00:04:12.234
You can handle this whole statement
by putting a try catch here, but

70
00:04:12.234 --> 00:04:13.724
not just this specific one.

71
00:04:13.724 --> 00:04:14.976
But yeah, you could totally do this.

72
00:04:14.976 --> 00:04:15.537
This works.

73
00:04:15.537 --> 00:04:19.608
That's the beauty of async await, is you
can pretty much use it anywhere you would

74
00:04:19.608 --> 00:04:21.736
use synchronous code, it works the same.

75
00:04:21.736 --> 00:04:25.637
So, all right, so we got that, first name,

76
00:04:25.637 --> 00:04:31.466
req.body.first name, And last name.

77
00:04:31.466 --> 00:04:33.945
And you can see we're
getting the autocomplete for

78
00:04:33.945 --> 00:04:37.859
the property still because Prisma knows
that a user has a first name, last name,

79
00:04:37.859 --> 00:04:40.064
password, email, they're all required.

80
00:04:40.064 --> 00:04:41.859
So it's it's doing that for me.

81
00:04:46.235 --> 00:04:47.330
There we go.

82
00:04:49.645 --> 00:04:54.570
And then from there, what we wanna
do is create a JSON Web Token

83
00:04:54.570 --> 00:04:57.805
using that utility method that we made.

84
00:04:57.805 --> 00:04:58.934
So let's do that.

85
00:04:58.934 --> 00:05:05.413
We'll say, jwt =await, it's async,

86
00:05:05.413 --> 00:05:09.676
createJWT, pass in user.

87
00:05:09.676 --> 00:05:13.155
Now we have a jwt.

88
00:05:13.155 --> 00:05:14.838
And then what are we
gonna do with that jwt?

89
00:05:17.713 --> 00:05:19.596
Do you remember where I
said we're gonna save it?

90
00:05:23.029 --> 00:05:24.762
That's the type of food.

91
00:05:24.762 --> 00:05:25.308
&gt;&gt; Cookie.

92
00:05:25.308 --> 00:05:28.406
&gt;&gt; Cookie, yeah,
we're gonna save it in a cookie.

93
00:05:28.406 --> 00:05:29.285
That's right.

94
00:05:29.285 --> 00:05:30.217
So let's do that.

95
00:05:30.217 --> 00:05:32.327
So we have this, yes?

96
00:05:32.327 --> 00:05:33.914
&gt;&gt; Why not local storage?

97
00:05:33.914 --> 00:05:34.640
&gt;&gt; Good question.

98
00:05:34.640 --> 00:05:36.053
The question is, why not local storage?

99
00:05:36.053 --> 00:05:40.264
The reason we're not gonna do it
in local storage is two reasons.

100
00:05:40.264 --> 00:05:44.230
One, if it's in local storage,
then you, on the client side,

101
00:05:44.230 --> 00:05:48.416
are responsible for writing the code
that goes into local storage,

102
00:05:48.416 --> 00:05:52.544
attaching it to a header, and
sending it on every single request.

103
00:05:52.544 --> 00:05:54.096
So I didn't feel like doing that.

104
00:05:54.096 --> 00:05:54.697
That's one reason.

105
00:05:54.697 --> 00:06:00.086
[LAUGH] Two, we're actually
gonna use Next.js middleware,

106
00:06:00.086 --> 00:06:02.166
which runs on the Edge.

107
00:06:02.166 --> 00:06:08.707
So before our server to
verify JSON Web Tokens.

108
00:06:08.707 --> 00:06:12.397
And that environment on the Edge,
which is outside of your computer,

109
00:06:12.397 --> 00:06:14.472
does not have access to local storage.

110
00:06:14.472 --> 00:06:19.508
So there's no way that it could look in
local storage to grab something and check

111
00:06:19.508 --> 00:06:24.481
it, which, yes, you could just attach
it yourself to the headers and stuff.

112
00:06:24.481 --> 00:06:26.946
But going back to Reason 1,
I didn't feel like doing that.

113
00:06:26.946 --> 00:06:30.786
So that's why we're gonna use
cookies because it is less work.

114
00:06:30.786 --> 00:06:35.128
It's pretty much automatic cuz cookies
get sent at every single request, and

115
00:06:35.128 --> 00:06:36.521
because of middleware.

116
00:06:36.521 --> 00:06:40.025
So all those things.

117
00:06:40.025 --> 00:06:41.743
But local storage is a viable option.

118
00:06:41.743 --> 00:06:45.527
I use local storage all the time when
I'm just doing client side apps with

119
00:06:45.527 --> 00:06:47.153
some separate API somewhere.

120
00:06:47.153 --> 00:06:50.864
So totally fine.

121
00:06:50.864 --> 00:06:55.501
All right, so we just wanna do, there's a
set header method on the response object.

122
00:06:55.501 --> 00:06:57.024
So we'll just do that.

123
00:06:57.024 --> 00:06:58.934
So you setHeader.

124
00:06:58.934 --> 00:07:04.230
And when you pass the set cookie header,
you're telling

125
00:07:04.230 --> 00:07:10.203
the browser when it gets the response
back to set these cookies.

126
00:07:10.203 --> 00:07:11.279
So that's what we're gonna do.

127
00:07:11.279 --> 00:07:18.891
So we're gonna say setHeader,
Set-Cookie, like that.

128
00:07:18.891 --> 00:07:23.436
And then we're gonna use this
serialized method from cookie.

129
00:07:23.436 --> 00:07:27.381
I don't know if it should
automatically import it.

130
00:07:27.381 --> 00:07:32.843
Let's see, I would imagine a serializer is
such a proper name in all the stuff here.

131
00:07:32.843 --> 00:07:35.085
Yeah, I'm just gonna have to,
it's not gonna be that far away.

132
00:07:35.085 --> 00:07:39.320
So we'll import it from cookie,

133
00:07:39.320 --> 00:07:44.265
serialize, Like that.

134
00:07:44.265 --> 00:07:47.952
And these things, forget about them.

135
00:07:47.952 --> 00:07:49.026
Probably I don't have it installed.

136
00:07:49.026 --> 00:07:51.170
I'm gonna install cookie.

137
00:07:51.170 --> 00:07:56.262
You might not have it installed either.

138
00:07:56.262 --> 00:07:57.594
&gt;&gt; What's the types again?

139
00:07:57.594 --> 00:07:59.653
&gt;&gt; Is it a types again?

140
00:07:59.653 --> 00:08:01.334
It is the types.

141
00:08:01.334 --> 00:08:03.905
I don't know why,
I thought it was automatic.

142
00:08:03.905 --> 00:08:07.777
Cool, all right, got our types.

143
00:08:07.777 --> 00:08:09.262
So we got to serialize here.

144
00:08:13.467 --> 00:08:18.065
And serialize basically just takes
from the name of the cookie, which for

145
00:08:18.065 --> 00:08:21.567
us is gonna be
process.env.COOKIE_NAME like that.

146
00:08:21.567 --> 00:08:25.272
And then the options for
the cookie that you wanna set.

147
00:08:25.272 --> 00:08:26.213
I couldn't spell process right.

148
00:08:29.127 --> 00:08:35.090
So for us, our options are gonna be,
One, this is the cookie value itself.

149
00:08:35.090 --> 00:08:36.874
So I guess we got to pass it
as a second argument, but

150
00:08:36.874 --> 00:08:38.129
the third argument is the options.

151
00:08:38.129 --> 00:08:43.449
So I'll just copy those,
cuz it's not easy to do that.

152
00:08:43.449 --> 00:08:45.705
So pass the jwt as a second argument.

153
00:08:45.705 --> 00:08:50.308
And then for these options,
we're going to,

154
00:08:50.308 --> 00:08:53.622
one, set the expiration dates.

155
00:08:53.622 --> 00:08:55.221
Make sure it's HTTP only,

156
00:08:55.221 --> 00:08:59.471
which basically means you can't
access the cookies using JavaScript.

157
00:08:59.471 --> 00:09:02.806
They're only processed
through the network on HTTP.

158
00:09:02.806 --> 00:09:04.953
You cannot touch them.

159
00:09:04.953 --> 00:09:09.061
We're basically saying, for this path,
this URL, not some other URL.

160
00:09:09.061 --> 00:09:13.087
And then how long does it live?

161
00:09:13.087 --> 00:09:14.758
Which is basically a week.

162
00:09:14.758 --> 00:09:18.102
I gave it the same time as the expiration
date of the JSON Web Token so

163
00:09:18.102 --> 00:09:19.851
they are kinda in at the same time.

164
00:09:24.125 --> 00:09:27.570
And this thing's just freaking out because
it doesn't know if it's a string or not.

165
00:09:31.144 --> 00:09:32.366
Any questions on that?

166
00:09:38.662 --> 00:09:41.561
Okay, so once we do that,
we can set a status here.

167
00:09:41.561 --> 00:09:44.583
I have 201,
which specifically means successful post.

168
00:09:44.583 --> 00:09:45.664
Good job.

169
00:09:45.664 --> 00:09:47.015
And then I'm just gonna end it.

170
00:09:47.015 --> 00:09:50.527
I don't need to see any thing back,
at least not in the app that I have made.

171
00:09:50.527 --> 00:09:53.285
You could have just send the user
back here after they sign up and

172
00:09:53.285 --> 00:09:56.565
give them the user updates, so they
don't have to eventually come back and

173
00:09:56.565 --> 00:09:58.728
make a round trip and
get the user object anyway.

174
00:09:58.728 --> 00:10:00.063
That's totally fine.

175
00:10:00.063 --> 00:10:05.704
But I think in this world where we're
moving towards, only making the request

176
00:10:05.704 --> 00:10:10.675
that that specific component needs and
not trying to make a request.

177
00:10:10.675 --> 00:10:13.603
Like you know back in the day, [LAUGH] I'm
saying back in the day like this is a long

178
00:10:13.603 --> 00:10:15.018
time ago, this was not that long ago.

179
00:10:15.018 --> 00:10:19.638
But you would anticipate the data that you
were gonna need and you would grab it, and

180
00:10:19.638 --> 00:10:21.492
then you would store it in Redux.

181
00:10:21.492 --> 00:10:23.508
Or you would store it in
some like local cache, and

182
00:10:23.508 --> 00:10:25.913
then by time that page got there,
you already had the data.

183
00:10:25.913 --> 00:10:27.020
And that was an optimization.

184
00:10:27.020 --> 00:10:30.964
Okay, we're moving away from that because
getting data is becoming free now.

185
00:10:30.964 --> 00:10:32.905
Because as you see with
the server component,

186
00:10:32.905 --> 00:10:36.061
we don't even need to cross the network
to get the data, it's just there.

187
00:10:36.061 --> 00:10:39.620
So we don't need to make up
these waterfall optimizations,

188
00:10:39.620 --> 00:10:43.756
like getting this data, and
then getting this and then getting this.

189
00:10:43.756 --> 00:10:47.071
We can just get it when we need it,
and only when we need it,

190
00:10:47.071 --> 00:10:50.344
because it's becoming free,
as in, not such a burden.

191
00:10:50.344 --> 00:10:52.287
So I'm moving towards that direction.

192
00:10:52.287 --> 00:10:56.356
So I'm not sending the user back because
the off form doesn't need the user object.

193
00:10:56.356 --> 00:10:57.897
So I'm not sending it back.

