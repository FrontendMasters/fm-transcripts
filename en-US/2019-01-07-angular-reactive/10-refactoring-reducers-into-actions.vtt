WEBVTT

1
00:00:00.370 --> 00:00:03.530
&gt;&gt; Lukas: One of the issues,
and this kind of came up,

2
00:00:03.530 --> 00:00:08.100
is these strings are not very scalable.

3
00:00:08.100 --> 00:00:12.410
In other words, what happens when
I create another feature called

4
00:00:13.460 --> 00:00:15.080
widgets or whatever?

5
00:00:15.080 --> 00:00:19.400
And I wanna create that.

6
00:00:19.400 --> 00:00:23.286
Well, now what happens is your reducers
that they have the ability to respond to

7
00:00:23.286 --> 00:00:24.580
every action.

8
00:00:24.580 --> 00:00:26.250
There's always a kind of
a weird case where maybe

9
00:00:26.250 --> 00:00:27.720
you might want to have it read.

10
00:00:27.720 --> 00:00:31.810
I don't know, like my client went back and
forth on where you might want to have

11
00:00:31.810 --> 00:00:35.550
one place respond or
two places respond to a single action.

12
00:00:36.790 --> 00:00:38.600
There may be a use case, maybe not.

13
00:00:38.600 --> 00:00:42.520
But more importantly is what
you don't want is to say,

14
00:00:42.520 --> 00:00:48.110
I want to create a new widget
with an update action type and

15
00:00:48.110 --> 00:00:51.820
then over here projects
is responding to that.

16
00:00:51.820 --> 00:00:55.340
That will create definitely
some unpredictable behavior.

17
00:00:55.340 --> 00:00:59.390
And so
you need to keep your action types unique.

18
00:01:00.430 --> 00:01:03.500
And so, in other words, it needs to
be a single, kind of think of it is

19
00:01:03.500 --> 00:01:07.270
like unique key that exist in only
in one place in your application.

20
00:01:07.270 --> 00:01:10.140
So that they're not colliding
because that can happen.

21
00:01:10.140 --> 00:01:17.590
As well, is if you look over here in
the Dev tools, create, delete update.

22
00:01:17.590 --> 00:01:20.730
Well, if I didn't know I was
looking at projects, like, what?

23
00:01:20.730 --> 00:01:21.280
What am I delete?

24
00:01:21.280 --> 00:01:22.660
Like, what's happening?

25
00:01:22.660 --> 00:01:23.680
I don't know.

26
00:01:23.680 --> 00:01:26.680
And so, it's also not very descriptive.

27
00:01:26.680 --> 00:01:30.650
And secondly, it's very easy,
as you can see,

28
00:01:30.650 --> 00:01:35.040
is you're manually
creating these objects to

29
00:01:35.040 --> 00:01:40.460
create a typo or
mess up the type in general.

30
00:01:40.460 --> 00:01:45.430
So we are going to fix that
by leveraging TypeScript.

31
00:01:45.430 --> 00:01:50.205
So we're going to go down
to projects.actions and

32
00:01:50.205 --> 00:01:53.877
we are going to start to build this out.

33
00:01:53.877 --> 00:01:59.192
So the first thing that we
are going to do is we are going

34
00:01:59.192 --> 00:02:04.996
to create an enum with all of
the actions for the projects.

35
00:02:04.996 --> 00:02:09.707
So we are going to call
this ProjectsActionTypes.

36
00:02:09.707 --> 00:02:13.877
And we'll just pick some kind of, I think,

37
00:02:13.877 --> 00:02:17.840
descriptive actions that could happen.

38
00:02:17.840 --> 00:02:19.510
So, for instance, we selected a project.

39
00:02:19.510 --> 00:02:26.760
And then we give this a value of, and
I like to keep this descriptive, Projects.

40
00:02:26.760 --> 00:02:29.990
And we'll say, Selected.

41
00:02:31.330 --> 00:02:32.450
And then from here, AddProject.

42
00:02:36.272 --> 00:02:40.680
&gt;&gt; Lukas: We'll just say
we're going to add some data.

43
00:02:44.274 --> 00:02:51.866
&gt;&gt; Lukas: UpdateProject, DeleteProject,

44
00:02:51.866 --> 00:02:57.950
Update Data, Delete Data.

45
00:02:57.950 --> 00:03:00.570
All right, so now we have an enum.

46
00:03:00.570 --> 00:03:05.200
And so we're keeping all of our action
types, the strings, in a single spot.

47
00:03:07.390 --> 00:03:11.730
And then from here,
let's create an action object.

48
00:03:11.730 --> 00:03:13.630
So let's go with AddProject.

49
00:03:13.630 --> 00:03:18.510
Export class, AddProject.

50
00:03:18.510 --> 00:03:23.880
And now here we are going
to implement the action

51
00:03:25.240 --> 00:03:30.720
interface, and if we click into here,
it has one property.

52
00:03:30.720 --> 00:03:31.590
You are required to have a type.

53
00:03:34.713 --> 00:03:38.767
&gt;&gt; Lukas: Readonly type =

54
00:03:38.767 --> 00:03:44.563
ProjectActionTypes.

55
00:03:49.710 --> 00:03:51.310
&gt;&gt; Lukas: This thing is totally
gonna try to import this on me.

56
00:03:56.890 --> 00:04:02.800
&gt;&gt; Lukas: And so this is, as well, this is
a lot more descriptive than just create.

57
00:04:02.800 --> 00:04:06.120
So just looking at this code you're like,
what's happening?

58
00:04:06.120 --> 00:04:08.720
Well, we're adding a project.

59
00:04:09.790 --> 00:04:15.000
And because we are going
to send in a project,

60
00:04:17.640 --> 00:04:19.650
&gt;&gt; Lukas: We are going to have a payload.

61
00:04:23.330 --> 00:04:25.330
&gt;&gt; Lukas: Which is going
to be of type Project.

62
00:04:33.540 --> 00:04:36.660
&gt;&gt; Lukas: Does this make sense?

63
00:04:36.660 --> 00:04:40.280
So we're creating a strongly
typed action object

64
00:04:41.740 --> 00:04:45.790
that has a type,
which is also pulling from the enum.

65
00:04:45.790 --> 00:04:50.120
And then because we're
passing in a payload, and

66
00:04:50.120 --> 00:04:54.890
modifying with an access modifier,
then due to constructor assignment,

67
00:04:54.890 --> 00:05:01.980
it's assigning it to, when this gets
instantiated, the concrete instance.

68
00:05:01.980 --> 00:05:06.810
Then it will also have a payload
property on that, makes sense?

69
00:05:08.060 --> 00:05:10.694
All right, and then from here,

70
00:05:10.694 --> 00:05:15.584
what we are going to do is we're
going to create a unit type.

71
00:05:18.880 --> 00:05:22.030
&gt;&gt; Lukas: And so we'll go AddProject.

72
00:05:24.630 --> 00:05:26.550
&gt;&gt; Lukas: And
let me go with SelectProject, and

73
00:05:26.550 --> 00:05:28.220
I'll create that in a second.

74
00:05:28.220 --> 00:05:32.798
But then what we'll would do,
&gt;&gt; Lukas: Is, now this is something that

75
00:05:32.798 --> 00:05:38.520
somebody like said you have to explain and
express the detail what's happening here.

76
00:05:38.520 --> 00:05:42.651
I would just say,
I'm kind of understand but typically,

77
00:05:42.651 --> 00:05:45.350
is if you reference project actions,

78
00:05:45.350 --> 00:05:51.105
you can basically reference multiple
specific things kind of behind that unit.

79
00:05:53.120 --> 00:05:55.364
&gt;&gt; Lukas: And if somebody who is in or

80
00:05:55.364 --> 00:06:00.056
a TypeScript expert wants to comment or
clarify that,

81
00:06:00.056 --> 00:06:05.670
that would be totally fine but-
&gt;&gt; Speaker 2: It's just a type.

82
00:06:05.670 --> 00:06:07.750
It's saying that it can be this type or
that type.

83
00:06:07.750 --> 00:06:09.610
&gt;&gt; Lukas: Yeah, so
that's what I kind of figured.

84
00:06:09.610 --> 00:06:12.205
This or this or this, and so when you-
&gt;&gt; Speaker 2: Or type, excuse me.

85
00:06:21.190 --> 00:06:26.730
&gt;&gt; Lukas: So,
this will be ProjectActionTypes.

86
00:06:28.371 --> 00:06:32.305
&gt;&gt; Lukas: Did I spell this wrong?

87
00:06:32.305 --> 00:06:33.883
&gt;&gt; Speaker 2: Projects.

88
00:06:33.883 --> 00:06:34.383
&gt;&gt; Lukas: Projects.

89
00:06:38.825 --> 00:06:40.948
&gt;&gt; Lukas: Why I'm still not seeing it.

90
00:06:40.948 --> 00:06:44.740
ProjectSelected [LAUGH]
Naming things are hard.

91
00:06:47.040 --> 00:06:51.369
&gt;&gt; Lukas: That was a little
head nod to you my friend,

92
00:06:51.369 --> 00:06:55.380
it was like why did they call it select?

93
00:06:55.380 --> 00:06:56.980
Why didn't they just call it query?

94
00:06:56.980 --> 00:06:57.891
And I agree.

95
00:07:01.680 --> 00:07:06.077
&gt;&gt; Lukas: Okay, so
we have two actions, let's go ahead,

96
00:07:06.077 --> 00:07:10.384
I'm going to just burn through and
do two more.

97
00:07:14.628 --> 00:07:18.080
&gt;&gt; Lukas: UpdateProject.

98
00:07:21.759 --> 00:07:24.742
&gt;&gt; Lukas: DeleteProject.

99
00:07:28.421 --> 00:07:31.404
&gt;&gt; Lukas: DeleteProject.

100
00:07:35.083 --> 00:07:36.130
&gt;&gt; Lukas: I think we're good here.

101
00:07:36.130 --> 00:07:42.230
&gt;&gt; Lukas: And we'll go down here and,

102
00:07:53.470 --> 00:07:54.830
&gt;&gt; Lukas: I really hate
that that just happened.

103
00:07:57.810 --> 00:07:59.648
&gt;&gt; Lukas: I don't like
that it's not in order.

104
00:07:59.648 --> 00:08:03.864
UpdateProject.

105
00:08:09.060 --> 00:08:13.290
&gt;&gt; Lukas: I'm just going to
import myself into myself.

106
00:08:15.686 --> 00:08:17.480
&gt;&gt; Lukas: Super awesome.

107
00:08:19.888 --> 00:08:24.830
&gt;&gt; Lukas: All right, so now we have
created these four action objects,

108
00:08:24.830 --> 00:08:30.070
let's go ahead and let's just
expose these two the barrel roll.

109
00:08:32.750 --> 00:08:36.100
Cuz we're gonna need them
inside of our application.

110
00:08:36.100 --> 00:08:43.043
So let's go export,
&gt;&gt; Lukas: /lib/state/,

111
00:08:47.340 --> 00:08:48.090
&gt;&gt; Lukas: I was so close.

112
00:08:52.180 --> 00:08:53.125
&gt;&gt; Lukas: There we go.

113
00:08:53.125 --> 00:08:58.670
And so we'll go,
&gt;&gt; Lukas: SelectProject,

114
00:08:58.670 --> 00:09:03.466
AddProject,
&gt;&gt; Lukas: UpdateProject,

115
00:09:05.430 --> 00:09:06.760
&gt;&gt; Lukas: DeleteProject.

116
00:09:06.760 --> 00:09:10.880
And so, now we just taken care of that
now, it's going to be available for

117
00:09:10.880 --> 00:09:16.370
our consumption inside
of our projects feature.

