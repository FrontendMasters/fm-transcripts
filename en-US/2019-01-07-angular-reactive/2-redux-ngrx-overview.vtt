WEBVTT

1
00:00:00.043 --> 00:00:02.833
&gt;&gt; Lukas Ruebbelke: All right,
so Redux, I would say,

2
00:00:02.833 --> 00:00:06.620
falls into kind of three primary concepts.

3
00:00:06.620 --> 00:00:11.310
So the first one is that your entire
state is in a single state tree.

4
00:00:12.860 --> 00:00:18.220
Secondly, is that state flows down
from that tree into your application.

5
00:00:20.200 --> 00:00:25.205
Thirdly, is that events are captured and

6
00:00:25.205 --> 00:00:30.940
dispatched the action
objects into a reducer.

7
00:00:30.940 --> 00:00:36.090
So the reducer is the only place where
you can mutate application state.

8
00:00:37.220 --> 00:00:41.747
Now, fundamental precept of this,
is that the methods

9
00:00:41.747 --> 00:00:46.483
inside of a reducer are performing
a mutable operations.

10
00:00:46.483 --> 00:00:49.869
And so, in another words,
it's not mutating state, but

11
00:00:49.869 --> 00:00:53.830
it's making a calculation
in returning new state.

12
00:00:53.830 --> 00:00:57.760
And so, this has some significant
performance advantages.

13
00:00:57.760 --> 00:01:02.450
So one, when you have a new object,
the memory pointer changes.

14
00:01:03.450 --> 00:01:09.752
And so, immediately you know,
this is a new thing, just update.

15
00:01:09.752 --> 00:01:12.995
Instead of with AngularJS,
one of the big problems is,

16
00:01:12.995 --> 00:01:16.307
is that they were doing like
a deep comparison of like,

17
00:01:16.307 --> 00:01:20.850
this property change on this object,
but we don't know what.

18
00:01:20.850 --> 00:01:24.490
Or even worse is, did it change at all,
like, and it would go through and

19
00:01:24.490 --> 00:01:27.840
examine all of the properties
on that object.

20
00:01:27.840 --> 00:01:29.810
And depending on the object and

21
00:01:29.810 --> 00:01:35.130
how many you had on the stage,
that got very, very expensive.

22
00:01:35.130 --> 00:01:39.267
And so, instead of doing this deep
comparison of like, hey, what changed?

23
00:01:39.267 --> 00:01:42.750
It's easier to say, I know this thing has
changed, we're just gonna swap it out.

24
00:01:44.080 --> 00:01:49.701
Secondly, is that it allows for an atomic
transaction within your application.

25
00:01:49.701 --> 00:01:53.753
So for instance, as we saw, or imagine if
you're binding to an object that's bound

26
00:01:53.753 --> 00:01:57.520
to a form and I start typing in the form,
well, what's gonna happen?

27
00:01:57.520 --> 00:01:59.352
That object is gonna change.

28
00:01:59.352 --> 00:02:01.990
Well, how do you undo that?

29
00:02:01.990 --> 00:02:06.626
I mean, it's very, very hard to do,
like you have to, I mean, in some cases,

30
00:02:06.626 --> 00:02:11.560
you simply cannot refresh the page and
hope that nobody saved the database.

31
00:02:11.560 --> 00:02:16.402
Whereas, if your working on a piece of
state and your like, I don't want this,

32
00:02:16.402 --> 00:02:21.026
you can just throw it back, throw it away
and go to the next piece of state, or

33
00:02:21.026 --> 00:02:22.864
the previous piece of state.

34
00:02:22.864 --> 00:02:27.785
So with these transactional, with these
atomic transactions in your application,

35
00:02:27.785 --> 00:02:31.952
you can move forward and you can
backwards, and so we'll see this when we

36
00:02:31.952 --> 00:02:36.735
pop out the dev tools, and we can start to
see these applications or these actions,

37
00:02:36.735 --> 00:02:40.150
or these slices of state
go through our application.

38
00:02:40.150 --> 00:02:46.470
So think of the store as your
database in your application.

39
00:02:46.470 --> 00:02:51.140
So the entire,
all your state is in the database.

40
00:02:52.220 --> 00:02:55.700
Now, think of reducers as tables.

41
00:02:55.700 --> 00:03:01.030
And so, just as I would organize
a database in appropriate relations.

42
00:03:01.030 --> 00:03:05.410
I've got projects and users, and so,
kind of by distinct entities, you would

43
00:03:05.410 --> 00:03:11.430
generally want to create your reducers to
kind of map to those distinct entities.

44
00:03:11.430 --> 00:03:15.590
So think of it as a very
normalized kind of a structure.

45
00:03:17.500 --> 00:03:21.390
And the store itself,
we can think of that as just read only,

46
00:03:22.430 --> 00:03:27.000
but if we want to mutate the state,
then it happens at the reducer.

47
00:03:27.000 --> 00:03:30.990
And how we communicate with
a reducer is via an action.

48
00:03:32.250 --> 00:03:37.173
So we query the database via selectors,
and

49
00:03:37.173 --> 00:03:42.227
so we can say, hey store,
give me this data,

50
00:03:42.227 --> 00:03:45.700
and I want this slice of state.

51
00:03:46.790 --> 00:03:47.600
You can display it.

52
00:03:47.600 --> 00:03:51.915
And then, something needs to update that,
then you capture that,

53
00:03:51.915 --> 00:03:56.984
that update into a payload, and then you
say, okay, we need to do this action,

54
00:03:56.984 --> 00:04:01.094
action type, and here is the payload,
you need to complete it.

55
00:04:01.094 --> 00:04:07.076
It goes into the reducer, some calculation
is performed, and so in other words,

56
00:04:07.076 --> 00:04:12.640
it's reducing everything into new state,
and it goes back into the store.

57
00:04:12.640 --> 00:04:18.040
Now, the beauty of this, because
this is built on top of observables,

58
00:04:18.040 --> 00:04:24.070
that when you have an observable stream
and you change something in the stream,

59
00:04:24.070 --> 00:04:29.240
is that it's automatically
pushed out to the consumers.

60
00:04:29.240 --> 00:04:33.240
And so, if you're updating state over and
over, and over, so you know,

61
00:04:33.240 --> 00:04:37.950
let's say, we have new users coming in,
that any time that state changes,

62
00:04:37.950 --> 00:04:41.010
is that observable is
triggering a next event.

63
00:04:41.010 --> 00:04:46.640
And then, going and
pushing new data to your components or

64
00:04:46.640 --> 00:04:48.580
your services, or
whatever is consuming this.

65
00:04:48.580 --> 00:04:53.182
So this is a very efficient
way to propagate new

66
00:04:53.182 --> 00:04:57.436
state changes through your application.

67
00:04:57.436 --> 00:05:00.198
So I mentioned this yesterday, but

68
00:05:00.198 --> 00:05:05.996
if I was going to talk to a brand new
Angular developer about Redux and NGRX,

69
00:05:05.996 --> 00:05:12.369
where I would start is component-driven
architecture with inputs and outputs.

70
00:05:13.410 --> 00:05:17.784
If you have a parent component and
you wanna pass the data or

71
00:05:17.784 --> 00:05:22.796
state into that child component,
how do you do that with an input?

72
00:05:22.796 --> 00:05:26.255
And then, anytime that state
changes on the parent component,

73
00:05:26.255 --> 00:05:28.057
it updates the child component.

74
00:05:28.057 --> 00:05:31.675
So the child component is not having to
worry about where the state is coming from

75
00:05:31.675 --> 00:05:33.190
or how it's being manipulated.

76
00:05:33.190 --> 00:05:36.339
You just know is that, hey, when I get
the state, I'm going to display it,

77
00:05:36.339 --> 00:05:39.390
I'm going to bind it to my template,
it's going to happen.

78
00:05:39.390 --> 00:05:43.420
So state flows down from
a parent to a child via input,

79
00:05:43.420 --> 00:05:47.182
which is because you're
using Angular binding,

80
00:05:47.182 --> 00:05:51.319
when it changes in one place,
it changes in the other.

81
00:05:51.319 --> 00:05:55.767
And if something happens on the child
component that you need to communicate

82
00:05:55.767 --> 00:05:58.510
back up, you do that via an event.

83
00:05:58.510 --> 00:06:01.380
So you understand that
when something happens,

84
00:06:01.380 --> 00:06:05.050
the child component is now responsible for
handling that.

85
00:06:05.050 --> 00:06:07.350
It goes to the parent component, and

86
00:06:07.350 --> 00:06:09.640
then the parent component can
do what ever it needs to.

87
00:06:10.860 --> 00:06:15.805
And so now, you have these pieces or these
parts in your code, we're simply saying,

88
00:06:15.805 --> 00:06:18.964
go and you give me the data,
and if something happens,

89
00:06:18.964 --> 00:06:20.564
I'm going to let you know.

90
00:06:20.564 --> 00:06:24.842
So state flows down, and anytime state
changes, you're gonna get those changes

91
00:06:24.842 --> 00:06:28.810
that are going to flow right down to you,
and you're going to react to them.

92
00:06:28.810 --> 00:06:31.294
So we're here, reactive Angular.

93
00:06:31.294 --> 00:06:35.900
And then, when something happens,
we're delegating it back up.

94
00:06:35.900 --> 00:06:37.310
And so, that is the basic shape.

95
00:06:37.310 --> 00:06:42.440
Imagine all your state in a single place,
state flows down just like parents or

96
00:06:42.440 --> 00:06:43.760
child with an input.

97
00:06:43.760 --> 00:06:48.210
When something happens, events flow up
into the reducer, just like if you had

98
00:06:48.210 --> 00:06:53.070
a child component dispatching an event,
it's that same exact concept.

99
00:06:54.240 --> 00:06:58.597
Now, there's two caveats to that
that I'll get to in a little bit,

100
00:06:58.597 --> 00:07:03.719
I'll just leave a hint, is what happens
if you need to communicate to a server or

101
00:07:03.719 --> 00:07:07.709
do some asynchronous action,
this is where effects come in.

102
00:07:07.709 --> 00:07:12.588
So this is really key for handling control
flow, of like, I need to do this, this,

103
00:07:12.588 --> 00:07:14.140
and this, in this order.

104
00:07:15.450 --> 00:07:19.720
Having this in a single place that
is wrapped in an observable sequence

105
00:07:19.720 --> 00:07:20.810
is phenomenal.

106
00:07:20.810 --> 00:07:24.320
So we need to do asynchronous things,
those go in effects.

107
00:07:24.320 --> 00:07:28.000
And the other piece where it's like,
okay, that makes sense.

108
00:07:28.000 --> 00:07:32.690
Now what happens if, for instance,
you have users and widgets, or

109
00:07:32.690 --> 00:07:33.930
related entities?

110
00:07:35.050 --> 00:07:36.410
How do you get those back together?

111
00:07:36.410 --> 00:07:38.740
Because if they're separated,
what do you do?

112
00:07:38.740 --> 00:07:46.223
And so, you can combine those or
compute them at runtime via selectors,

113
00:07:46.223 --> 00:07:52.124
which think of selectors now
as queries to the database.

114
00:07:52.124 --> 00:07:53.010
Hopefully, that was helpful.

115
00:07:53.010 --> 00:07:57.821
This is, in a very,
like five minutes, you have a store,

116
00:07:57.821 --> 00:08:03.419
state flows down, event flows up
into actions, into the reducer,

117
00:08:03.419 --> 00:08:07.566
which then modify state,
which then flows down.

118
00:08:07.566 --> 00:08:11.287
And then, if you need to do
an asynchronous thing that goes in effects

119
00:08:11.287 --> 00:08:15.480
and if you need to compute two models
together, that happens via a selector.

120
00:08:15.480 --> 00:08:18.845
&gt;&gt; Speaker 2: When you say FX,
is that FX or effects?

121
00:08:18.845 --> 00:08:21.460
&gt;&gt; Lukas Ruebbelke: E-F-F-E-C-T.

122
00:08:21.460 --> 00:08:24.693
So it's stands for, or
it comes from side effects.

123
00:08:25.967 --> 00:08:29.048
&gt;&gt; Lukas Ruebbelke: So for instance,
if you needed to save something

124
00:08:29.048 --> 00:08:33.690
to the server, that's a side
effect outside of the application.

125
00:08:33.690 --> 00:08:39.170
But this is also where I would put
any kind of business logic that,

126
00:08:39.170 --> 00:08:40.150
when this thing happens,

127
00:08:40.150 --> 00:08:44.210
I need to capture it into some kind of
transformation before I pass it on.

128
00:08:44.210 --> 00:08:45.940
And so, really, it's a library for

129
00:08:45.940 --> 00:08:49.128
handling side effects
in your applications.

130
00:08:49.128 --> 00:08:53.922
And so, tripley, you have something go in,
you do your logic with a side effect,

131
00:08:53.922 --> 00:08:58.371
and then once that's done, then you'll
dispatch another action object,

132
00:08:58.371 --> 00:09:01.774
which would then go into the reducer,
and say, okay now,

133
00:09:01.774 --> 00:09:03.880
here is the final state to put it in.

