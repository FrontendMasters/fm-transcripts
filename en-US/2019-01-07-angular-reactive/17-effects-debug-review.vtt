WEBVTT

1
00:00:00.400 --> 00:00:03.530
&gt;&gt; Lukas Ruebbelke: One of the little
things that I wanna call out that I think

2
00:00:03.530 --> 00:00:09.150
is really important, and
kind of by default we've done this,

3
00:00:09.150 --> 00:00:17.900
or I've been very careful to
keep our services really clean.

4
00:00:17.900 --> 00:00:22.891
In other words, you have a bunch of
these very small methods that are simply

5
00:00:22.891 --> 00:00:24.408
calling the service.

6
00:00:24.408 --> 00:00:26.797
So what bothered me is
what stateful service is,

7
00:00:26.797 --> 00:00:30.237
is you would have part of your service
going and fetching the data, and

8
00:00:30.237 --> 00:00:32.890
the other part like having
to like manage that state.

9
00:00:32.890 --> 00:00:36.310
And its like, now this thing is doing two
different things, like what is going on?

10
00:00:37.660 --> 00:00:45.180
Whereas here, we are allowing the service
to do one thing in this case.

11
00:00:45.180 --> 00:00:49.770
We do have some additional like,
go get this thing, and

12
00:00:49.770 --> 00:00:53.020
let's do some type of
observable transformation.

13
00:00:53.020 --> 00:00:57.956
But for the most part,
these create, update and delete.

14
00:00:57.956 --> 00:01:02.289
This is being offloaded
to the ECTP service, and

15
00:01:02.289 --> 00:01:06.207
the control flow around
it is in the effect.

16
00:01:06.207 --> 00:01:10.450
[INAUDIBLE] everything is building.

17
00:01:13.637 --> 00:01:16.872
&gt;&gt; [INAUDIBLE]

18
00:01:20.377 --> 00:01:29.465
&gt;&gt; Lukas Ruebbelke: Check the effects.

19
00:01:41.055 --> 00:01:46.485
&gt;&gt; Lukas Ruebbelke: We'll just fix

20
00:01:46.485 --> 00:01:51.497
these imports

21
00:01:51.497 --> 00:01:56.095
real quick.

22
00:02:07.775 --> 00:02:09.235
&gt;&gt; Lukas Ruebbelke: There we go.

23
00:02:09.235 --> 00:02:15.994
And, that's [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: I

24
00:02:15.994 --> 00:02:18.980
got a good feeling about this.

25
00:02:27.560 --> 00:02:32.739
&gt;&gt; Lukas Ruebbelke: Let's check
the tools here, so I'm calling map

26
00:02:32.739 --> 00:02:38.180
to make sure that in our effects,
that exist here.

27
00:02:38.180 --> 00:02:42.414
So one thing that I am doing that
I will come back, and I'm so

28
00:02:42.414 --> 00:02:46.061
used to on components
making everything private,

29
00:02:46.061 --> 00:02:49.650
that you actually want
your payload to be public.

30
00:02:49.650 --> 00:02:54.980
So that is one thing
that is muscle memory.

31
00:02:54.980 --> 00:02:58.750
But in the case of your action object.

32
00:03:05.320 --> 00:03:08.709
&gt;&gt; Lukas Ruebbelke: I don't think
this is going to change anything.

33
00:03:11.360 --> 00:03:12.690
&gt;&gt; Lukas Ruebbelke: So Data Loaded.

34
00:03:14.540 --> 00:03:18.250
Something I believe is going
wrong in the selector.

35
00:03:18.250 --> 00:03:24.890
So, after a little bit of
debugging pair programming,

36
00:03:24.890 --> 00:03:28.704
the issue is that in our barrel,

37
00:03:28.704 --> 00:03:33.380
we were exporting the wrong selector.

38
00:03:33.380 --> 00:03:38.390
And so, was quite possibly
just an oversight on my part.

39
00:03:38.390 --> 00:03:42.740
But what was happening is that in

40
00:03:42.740 --> 00:03:47.360
our low level selector,
I thought I was referencing this.

41
00:03:47.360 --> 00:03:54.760
But instead, I was exporting this
one right here, which was breaking.

42
00:03:54.760 --> 00:03:59.760
So, once I exported the correct selector

43
00:04:01.150 --> 00:04:03.560
in the barrel roll here.

44
00:04:05.070 --> 00:04:05.810
It fired right up.

45
00:04:07.180 --> 00:04:11.170
And let me just run the server
to prove that it's working.

46
00:04:11.170 --> 00:04:17.940
I also disabled my auto-import extension,
clearly not doing me any favors.

47
00:04:17.940 --> 00:04:19.145
Thanks a lot, import.

48
00:04:22.710 --> 00:04:23.865
&gt;&gt; Lukas Ruebbelke: So
as soon as this builds,

49
00:04:23.865 --> 00:04:28.160
I will demonstrate that we're doing
a round trip, and that's it's coming in.

50
00:04:28.160 --> 00:04:29.315
And then I'll cut a branch.

51
00:04:33.060 --> 00:04:34.170
&gt;&gt; Lukas Ruebbelke: There we go.

52
00:04:34.170 --> 00:04:38.270
So, what's happening here,
is we'll pull up Redux.

53
00:04:42.990 --> 00:04:49.555
&gt;&gt; Lukas Ruebbelke: You can see that we're
saying load data, which is then going.

54
00:04:52.110 --> 00:04:58.272
&gt;&gt; Lukas Ruebbelke: And calling,
and loading the projects here,

55
00:04:58.272 --> 00:05:04.750
and then resolving in
the data loaded down here.

56
00:05:06.520 --> 00:05:12.190
And so just to review the effect
real quick, and what's happening.

57
00:05:13.550 --> 00:05:19.200
If we go to project's effects,
we're listening for

58
00:05:19.200 --> 00:05:22.480
a command event, like do this thing.

59
00:05:22.480 --> 00:05:27.715
Which is then being picked up and
wrapping it in data persistence,

60
00:05:27.715 --> 00:05:33.070
the data persistence library,
to provide us some additional protection.

61
00:05:33.070 --> 00:05:37.730
Kind of some, guards against
asynchronous things going awry.

62
00:05:37.730 --> 00:05:43.430
The big one being, pessimistic updates or
optimistic updates.

63
00:05:43.430 --> 00:05:47.240
And then within the run block,
we're making or

64
00:05:47.240 --> 00:05:51.680
initiating our asynchronous call,
which then completes as, or

65
00:05:51.680 --> 00:05:56.650
when it then completes,
then we dispatch a new event.

66
00:05:56.650 --> 00:05:59.592
So I think of this as
the completion event,

67
00:05:59.592 --> 00:06:02.140
which gets picked up by the reducer.

