WEBVTT

1
00:00:00.150 --> 00:00:05.940
&gt;&gt; Lukas Ruebbelke: So, from here,
let me just pop into the store real quick.

2
00:00:05.940 --> 00:00:07.498
All right.

3
00:00:07.498 --> 00:00:12.470
So, again, if I'm looking at something,
a lot of times it's a matter of habit,

4
00:00:12.470 --> 00:00:14.670
I'll click in and
I'll look at the typescript definition,

5
00:00:14.670 --> 00:00:17.070
it's really interesting
what you can find out.

6
00:00:18.170 --> 00:00:19.710
And so, the store.

7
00:00:21.340 --> 00:00:22.990
Extends observable.

8
00:00:24.540 --> 00:00:29.160
So when you go store.pipe,
like how is that working?

9
00:00:29.160 --> 00:00:31.450
Well, it's because it's extending and
observable.

10
00:00:31.450 --> 00:00:35.340
And that's why we're able to pipe this

11
00:00:35.340 --> 00:00:40.030
observable operators together
on your derivable string.

12
00:00:40.030 --> 00:00:42.720
How does your state go
from one place to another?

13
00:00:42.720 --> 00:00:43.954
Well, it's an observable.

14
00:00:47.146 --> 00:00:49.821
&gt;&gt; Lukas Ruebbelke: So,
what you'll see here and

15
00:00:49.821 --> 00:00:54.958
this has been deprecated
since 6.1 is there's kind of

16
00:00:54.958 --> 00:01:00.074
two main methods that
&gt;&gt; Lukas Ruebbelke: You

17
00:01:00.074 --> 00:01:04.490
will use when dealing with the store.

18
00:01:05.810 --> 00:01:11.360
So why I wanted to call this out,
because I'm going to delete everything

19
00:01:11.360 --> 00:01:17.008
except for these two methods right here.

20
00:01:17.008 --> 00:01:22.270
So select and dispatch,

21
00:01:22.270 --> 00:01:26.420
and that is as far as I know I think
that's all I have ever used in the store.

22
00:01:26.420 --> 00:01:31.590
Is that you use select to essentially
query your application state.

23
00:01:31.590 --> 00:01:36.760
And you use dispatch to say like,
hey this thing happened or

24
00:01:36.760 --> 00:01:40.650
I need you to go do this thing and
so you have dispatch.

25
00:01:40.650 --> 00:01:46.000
And so even the API for
in JRX or Redux is very simple.

26
00:01:46.000 --> 00:01:49.170
When you're dealing with a store, there
is really two methods that you'll use.

27
00:01:50.180 --> 00:01:53.640
Querying via select,
commands via dispatch.

28
00:01:55.880 --> 00:02:00.390
Then also notice that the state
itself is an observable strain.

29
00:02:00.390 --> 00:02:05.330
So typically when I click into this,

30
00:02:05.330 --> 00:02:09.090
I learn something new, even the actions.

31
00:02:09.090 --> 00:02:10.910
And so all of the actions that we create,

32
00:02:10.910 --> 00:02:14.640
you'll see that those are in
an observable stream as well.

33
00:02:16.260 --> 00:02:19.940
So everything is essentially
streaming down or up.

34
00:02:21.630 --> 00:02:28.350
So with that said, in our project,

35
00:02:28.350 --> 00:02:33.730
let's do, we'll go here.

36
00:02:36.180 --> 00:02:43.100
So we can take this
&gt;&gt; Lukas Ruebbelke: And

37
00:02:43.100 --> 00:02:49.341
we're going to replace this
with this .store.dispatch and

38
00:02:49.341 --> 00:02:53.260
an action object has two properties.

39
00:02:53.260 --> 00:02:55.660
On this case it would
definitely have two properties.

40
00:02:55.660 --> 00:03:00.643
So, were gonna go type: 'create',

41
00:03:00.643 --> 00:03:03.363
payload: project.

42
00:03:09.805 --> 00:03:13.320
&gt;&gt; Lukas Ruebbelke: And so what's
interesting about this is that if we

43
00:03:13.320 --> 00:03:15.748
look at this other code down here,

44
00:03:15.748 --> 00:03:21.106
the component kind of knows a little
bit about the implementation details of

45
00:03:21.106 --> 00:03:27.160
like where this is actually coming from
in some of these different things.

46
00:03:27.160 --> 00:03:32.850
Whereas this, on the other hand,
when you look at this,

47
00:03:32.850 --> 00:03:36.000
it's just saying take this thing and
get it out of here.

48
00:03:36.000 --> 00:03:37.610
Or just take this thing and
you do what you want, so

49
00:03:37.610 --> 00:03:43.970
it's like my four year old when
he's like hey, I just made a mess.

50
00:03:43.970 --> 00:03:45.180
Clean it up.

51
00:03:45.180 --> 00:03:51.080
That would be the equivalent
of a mess action object.

52
00:03:51.080 --> 00:03:56.959
What I'll do is so
I just dropped these down here for now.

53
00:03:56.959 --> 00:04:00.090
Just because we'll keep those.

54
00:04:00.090 --> 00:04:03.440
These will eventually go away.

55
00:04:03.440 --> 00:04:04.982
So make a note of that.

56
00:04:18.544 --> 00:04:22.930
&gt;&gt; Lukas Ruebbelke: All right, so
let's go ahead and do update and delete.

57
00:04:22.930 --> 00:04:28.140
So this.store.dispatch type,

58
00:04:32.631 --> 00:04:36.036
&gt;&gt; Lukas Ruebbelke: Update, what's next,

59
00:04:36.036 --> 00:04:38.960
payload, project.

60
00:04:42.410 --> 00:04:47.999
So right now we are just using
very generic, just essentially

61
00:04:47.999 --> 00:04:55.770
generic JavaScript objects,
which could be problematic in the future.

62
00:04:55.770 --> 00:04:59.270
Hint, it will be, and
I'll explain why in the next module.

63
00:05:00.840 --> 00:05:01.590
But for now,

64
00:05:01.590 --> 00:05:05.210
I think it's easy to visualize
the shape of what we're working with.

65
00:05:06.910 --> 00:05:12.802
Although here, we'll just said
project updated and project deleted.

66
00:05:16.073 --> 00:05:18.881
&gt;&gt; Lukas Ruebbelke: And so what we're
doing right here is essentially when we're

67
00:05:18.881 --> 00:05:22.670
doing some kind of manipulation we're
just saying, hey rehydrate the projects.

68
00:05:22.670 --> 00:05:26.092
There's a couple of ways you could do
this and reset the current project.

69
00:05:26.092 --> 00:05:28.920
So ideally we would
have this in one place.

70
00:05:30.920 --> 00:05:36.082
Think about it that anytime the project
is updated were there were some

71
00:05:36.082 --> 00:05:41.343
appropriate event that we'd just go
ahead and rehydrate that for you.

72
00:05:46.358 --> 00:05:49.662
&gt;&gt; Lukas Ruebbelke: What I
will do is we don't need Get

73
00:05:49.662 --> 00:05:54.152
projects cause that is
currently on hiatus.

74
00:06:02.011 --> 00:06:03.782
&gt;&gt; Lukas Ruebbelke: Okay.

75
00:06:03.782 --> 00:06:04.702
&gt;&gt; Speaker 2: Your type.

76
00:06:04.702 --> 00:06:11.472
&gt;&gt; Lukas Ruebbelke: So
do you see what happened?

77
00:06:11.472 --> 00:06:15.161
I had this update and it's like,
that's the wrong string.

78
00:06:17.386 --> 00:06:21.132
&gt;&gt; Lukas Ruebbelke: This is one of
the reasons why using generic JavaScript

79
00:06:21.132 --> 00:06:23.260
objects is problematic.

80
00:06:23.260 --> 00:06:26.520
Cuz it's easy to misspell a string or
whatever.

