WEBVTT

1
00:00:00.640 --> 00:00:06.310
&gt;&gt; Lukas Ruebbelke: This next module
is going to be a little tricky.

2
00:00:06.310 --> 00:00:10.780
And I would say, out of ngrx, dealing with

3
00:00:10.780 --> 00:00:15.640
asynchronous operations is quite
possibly the most complicated piece.

4
00:00:18.240 --> 00:00:22.000
And so, let me earmark or even put,

5
00:00:22.000 --> 00:00:27.070
maybe, a line in the sand or a flag post,

6
00:00:27.070 --> 00:00:32.390
is that at this point, we understand or

7
00:00:32.390 --> 00:00:38.093
we have covered the basic
fundamental shape of Redux in NgRx.

8
00:00:39.410 --> 00:00:45.050
We understand how to set up the store,
through the reducer around it.

9
00:00:45.050 --> 00:00:48.570
We understand actions,
strongly typed actions,

10
00:00:48.570 --> 00:00:52.970
how to simplify your reducer with
entity and how to do basic selectors.

11
00:00:54.014 --> 00:00:59.110
And so at this point,
where I'm like, this is amazing,

12
00:00:59.110 --> 00:01:04.720
like I'm all in,
the very next question that I had is well,

13
00:01:04.720 --> 00:01:08.240
okay, what if i need to actually
call the server and do something?

14
00:01:09.490 --> 00:01:13.210
And so this is where effects come in, so

15
00:01:13.210 --> 00:01:17.759
this is, I think the first challenge
is understanding Redux in that shape.

16
00:01:19.830 --> 00:01:24.120
The next piece is, so,
safe flows down and events flow up.

17
00:01:25.250 --> 00:01:26.870
The next, very next question I had is,

18
00:01:26.870 --> 00:01:29.610
well, what if I need to do
something that's asynchronous?

19
00:01:29.610 --> 00:01:30.720
I need to call a server or something.

20
00:01:30.720 --> 00:01:38.360
So, as an event flows up,
we use an effect as middleware.

21
00:01:38.360 --> 00:01:45.160
To capture that operation to handle it and
then delegate control back into NgRx.

22
00:01:45.160 --> 00:01:51.110
And so, when I talk about effects
is that comes from side effects,

23
00:01:51.110 --> 00:01:56.305
and is in that creates a side effect,
and it is nothing more than

24
00:01:56.305 --> 00:02:02.820
middleware that sits in between
your application and the reducer.

25
00:02:02.820 --> 00:02:05.750
And so, you'll register it,
just like the store.

26
00:02:07.284 --> 00:02:11.560
But, and
it will listen to events the same way.

27
00:02:11.560 --> 00:02:15.630
The difference is that,
as actions are fired, typically,

28
00:02:15.630 --> 00:02:17.539
you'll split your actions into half.

29
00:02:18.620 --> 00:02:23.770
Or, I think of it as splitting
to an initiation kind of action,

30
00:02:23.770 --> 00:02:27.140
like an event trigger, and
then like an event completion.

31
00:02:27.140 --> 00:02:30.390
And so some stuff will go right into
the reducer, and that's totally fine.

32
00:02:30.390 --> 00:02:35.330
But if you need to have some side
effect or some asynchronous thing,

33
00:02:35.330 --> 00:02:40.600
is that instead of having for
instance, if we go to our actions,

34
00:02:43.300 --> 00:02:47.510
where we have like low projects,
AddProject that day, DeleteProject.

35
00:02:47.510 --> 00:02:52.930
Well now we split this into
kind of incoming action or

36
00:02:52.930 --> 00:02:54.600
an incoming event and an outgoing event.

37
00:02:54.600 --> 00:02:57.150
So what I'll do is.

38
00:02:57.150 --> 00:03:01.610
We'll just break, I'm gonna build
up two and then we'll kind of go,

39
00:03:01.610 --> 00:03:05.900
we'll see, maybe I'll do
a little bit more or maybe not.

40
00:03:05.900 --> 00:03:10.003
So, if we have LoadProjects,
this is the command.

41
00:03:12.203 --> 00:03:15.091
&gt;&gt; Lukas Ruebbelke: Then
we could do ProjectsLoaded.

42
00:03:15.091 --> 00:03:17.972
And so this would be the completion.

43
00:03:22.185 --> 00:03:25.901
&gt;&gt; Lukas Ruebbelke: So Projects, as you
can see here that we're just kind of.

44
00:03:30.834 --> 00:03:31.502
&gt;&gt; Lukas Ruebbelke: Flipping this around.

45
00:03:31.502 --> 00:03:34.522
So AddProject would be.

46
00:03:34.522 --> 00:03:36.315
&gt;&gt; Lukas Ruebbelke: ProjectAdded.

47
00:03:42.905 --> 00:03:44.815
&gt;&gt; Lukas Ruebbelke: Data Added.

48
00:03:50.905 --> 00:03:52.761
&gt;&gt; Lukas Ruebbelke: Does it make sense so
far?

49
00:03:52.761 --> 00:03:55.063
Yep, okay?

50
00:03:57.709 --> 00:03:59.400
&gt;&gt; Lukas Ruebbelke: And
so, we'll do these two and

51
00:03:59.400 --> 00:04:01.950
then we may just paste the rest in for
time.

52
00:04:01.950 --> 00:04:02.546
Yes?

53
00:04:02.546 --> 00:04:04.889
&gt;&gt; Student 1: So,
what's the point of clarification?

54
00:04:04.889 --> 00:04:09.236
We have these two actions and
one of them is operated on by middleware?

55
00:04:09.236 --> 00:04:10.390
&gt;&gt; Lukas Ruebbelke: Mm-hm.

56
00:04:10.390 --> 00:04:14.531
&gt;&gt; Student 1: Do all of the actions also
go all the way through the reducer, or

57
00:04:14.531 --> 00:04:19.786
the middleware is handling something
that's sub dev, does that makes sense?

58
00:04:19.786 --> 00:04:25.202
&gt;&gt; Lukas Ruebbelke: So I believe, and this
is something I would probably clarify,

59
00:04:25.202 --> 00:04:28.676
that all middleware, so all effects and

60
00:04:28.676 --> 00:04:35.000
all reducers have the opportunity
to respond to all actions.

61
00:04:35.000 --> 00:04:43.059
As a result, you separate that by
having very specific action types.

62
00:04:43.059 --> 00:04:47.230
And so, I have always
operated under the assumption

63
00:04:47.230 --> 00:04:51.620
that everything responds to everything, as
a result, how you keep that from happening

64
00:04:51.620 --> 00:04:57.040
is you are very precise about
the actions that you trigger.

65
00:04:57.040 --> 00:04:58.890
So that is an excellent question.

66
00:04:58.890 --> 00:05:03.500
And I actually believe, one of my
friends may have gotten burnt by that.

67
00:05:03.500 --> 00:05:08.280
He was expecting it to actually
stop into the effect and

68
00:05:08.280 --> 00:05:09.490
he had it listing on the reducer.

69
00:05:09.490 --> 00:05:10.990
And I think it was hitting both places.

70
00:05:10.990 --> 00:05:12.910
&gt;&gt; Student 2: They were both
operating on that same action.

71
00:05:12.910 --> 00:05:13.450
&gt;&gt; Lukas Ruebbelke: Yep, yep.
And so

72
00:05:13.450 --> 00:05:15.680
this is something I would
have to confirm but.

73
00:05:15.680 --> 00:05:21.190
And I must be willing to put at least
a red bull on that, they all listen to it.

74
00:05:21.190 --> 00:05:26.690
Which is why, you separate these
in terms of load projects.

75
00:05:26.690 --> 00:05:29.720
This will get captured by the effect, and

76
00:05:29.720 --> 00:05:35.570
then when the operation is completed,
then it dispatches this one.

77
00:05:35.570 --> 00:05:42.760
Or the projects loaded, so, just think of
it as kind of command and then completion.

78
00:05:42.760 --> 00:05:45.730
Actually, that is how I
would probably reference

79
00:05:45.730 --> 00:05:47.870
this from now on unless you have
a kind of the initial command,

80
00:05:47.870 --> 00:05:52.220
then you have a completion
event on the back side of it.

81
00:05:52.220 --> 00:05:58.595
So from here, let's create,
our action objects for

82
00:05:58.595 --> 00:06:06.256
this, so ProjectsLoaded implements Action,
readonly type.

83
00:06:22.195 --> 00:06:26.909
&gt;&gt; Lukas Ruebbelke: Now what's interesting
here is LoadProject, LoadProjects rather,

84
00:06:26.909 --> 00:06:31.475
willl no longer have a payload,
because it's just a trigger event.

85
00:06:35.221 --> 00:06:38.283
&gt;&gt; Lukas Ruebbelke: But, on the other
hand, ProjectsLoaded will have.

86
00:06:44.147 --> 00:06:48.950
&gt;&gt; Lukas Ruebbelke: Which is going to
be an array of projects, like cell.

87
00:06:50.500 --> 00:06:53.780
And if we go down here, this,
on the other hand, will be,

88
00:06:55.090 --> 00:06:59.130
will also take a pay load and
then on both cases.

89
00:06:59.130 --> 00:07:00.550
Let's just send one in.

90
00:07:00.550 --> 00:07:01.882
Something will happen at the server.

91
00:07:03.747 --> 00:07:05.080
&gt;&gt; Lukas Ruebbelke: And
then you want to return that.

92
00:07:05.080 --> 00:07:08.230
And this will may vary
depending on your API.

93
00:07:08.230 --> 00:07:13.300
But ProjectAdded, here we go.

94
00:07:13.300 --> 00:07:15.270
So just created the events.

95
00:07:15.270 --> 00:07:15.888
And then what.

96
00:07:20.531 --> 00:07:21.840
&gt;&gt; Lukas Ruebbelke: ProjectLoaded.

97
00:07:26.019 --> 00:07:28.099
&gt;&gt; Lukas Ruebbelke: ProjectAdded.

98
00:07:33.635 --> 00:07:34.991
&gt;&gt; Lukas Ruebbelke: This is plural.

99
00:07:38.121 --> 00:07:39.024
&gt;&gt; Lukas Ruebbelke: There we go.

100
00:07:41.237 --> 00:07:44.371
&gt;&gt; Lukas Ruebbelke: Now
what we're going to do,

101
00:07:44.371 --> 00:07:48.558
is we're going to create our effect.

102
00:07:48.558 --> 00:07:54.665
Now a bit of, kind of a helpful
snippet here, cuz if we go down.

103
00:07:58.397 --> 00:08:02.905
&gt;&gt; Lukas Ruebbelke: To actions, there is,
I've kind of fleshed out the basic

104
00:08:02.905 --> 00:08:08.251
structure of this, just because there
is a lot that is going on here.

105
00:08:11.267 --> 00:08:14.434
&gt;&gt; Lukas Ruebbelke: So in effects,
we'll just paste this in, and

106
00:08:14.434 --> 00:08:20.215
basically what we're doing is, we're
importing project state from the reducer.

107
00:08:23.230 --> 00:08:24.425
Let me see here.

108
00:08:32.846 --> 00:08:35.820
&gt;&gt; Lukas Ruebbelke: Yeah,
we'll get to that in just a second.

109
00:08:35.820 --> 00:08:43.680
So ProjectsEffects, and
it's going to take a couple parameters.

110
00:08:43.680 --> 00:08:44.512
We're injecting a couple things.

111
00:08:44.512 --> 00:08:49.360
So one, its actions, data persistence,

112
00:08:49.360 --> 00:08:54.170
and I'll explain what that is in a moment,
and projects service.

113
00:08:54.170 --> 00:08:58.227
And so obviously, if we're going to do
an asynchronous callback to the server,

114
00:08:58.227 --> 00:09:00.986
then we need the project
service to handle that for us.

115
00:09:07.262 --> 00:09:09.511
&gt;&gt; Lukas Ruebbelke: And so
let's define our first effect.

116
00:09:13.639 --> 00:09:19.820
&gt;&gt; Lukas Ruebbelke: And
we'll call this loadProjects, like so.

117
00:09:21.260 --> 00:09:28.540
And, we're going to use data
persistence to do this.

118
00:09:28.540 --> 00:09:33.560
And so this is a slight variation of
kind of a standard effect sequence.

119
00:09:33.560 --> 00:09:35.900
But there's a good reason for this.

120
00:09:35.900 --> 00:09:39.577
So, we'll go this data persistence fetch.

121
00:09:42.213 --> 00:09:46.384
&gt;&gt; Lukas Ruebbelke: And we're going to go

122
00:09:46.384 --> 00:09:51.050
ProjectActionTypes.

123
00:09:51.050 --> 00:09:55.396
And so notice,
I'm passing in well the very first

124
00:09:55.396 --> 00:10:00.477
parameter is the action type,
and then from here we have.

125
00:10:02.674 --> 00:10:05.914
&gt;&gt; Lukas Ruebbelke: An object
that's going to handle or

126
00:10:05.914 --> 00:10:10.234
respond to this action,
which has two kind of,

127
00:10:10.234 --> 00:10:16.190
there may be additional properties
you could put on this object.

128
00:10:16.190 --> 00:10:24.499
What we care about is run and onerror.

129
00:10:30.002 --> 00:10:32.956
&gt;&gt; Lukas Ruebbelke: So, I'm just going
to leave these as empty functions for

130
00:10:32.956 --> 00:10:33.761
just a moment.

131
00:10:36.633 --> 00:10:43.958
&gt;&gt; Lukas Ruebbelke: Let me go ahead and
do one more for addProjects.

132
00:10:49.545 --> 00:10:50.626
&gt;&gt; Lukas Ruebbelke: AddProject.

133
00:10:53.116 --> 00:10:57.256
&gt;&gt; Lukas Ruebbelke: And from here,
I think we have this fetch up, so

134
00:10:57.256 --> 00:11:01.380
we can do LoadProjects and addProjects.

135
00:11:01.380 --> 00:11:08.360
The difference is that on one, we're
going to do a fetch, and the other one,

136
00:11:08.360 --> 00:11:14.820
we're going to do rather, an optimistic
update but a pessimistic update.

137
00:11:14.820 --> 00:11:16.350
I'll break this down onto another line,
just so

138
00:11:16.350 --> 00:11:19.550
this is a little easier to read
just because the font's pretty big.

139
00:11:21.180 --> 00:11:21.680
All right.

