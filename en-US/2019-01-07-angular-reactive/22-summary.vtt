WEBVTT

1
00:00:00.300 --> 00:00:00.840
&gt;&gt; Lukas Ruebbelke: That's it.

2
00:00:00.840 --> 00:00:03.150
That's everything in the nutshell.

3
00:00:04.400 --> 00:00:08.090
All the steps that I've done, more of
less, and actually there are a few more

4
00:00:08.090 --> 00:00:13.580
changes i will make,
is in the project repository,

5
00:00:13.580 --> 00:00:18.120
under the Wiki, so these will pretty much
for the most part match up with the steps,

6
00:00:18.120 --> 00:00:24.760
but, we've now kind of come to
the full arc of basic Redux.

7
00:00:24.760 --> 00:00:29.232
That's store, actions,

8
00:00:29.232 --> 00:00:35.080
reducers, selectors and entity.

9
00:00:35.080 --> 00:00:38.100
But from there, the asynchronous piece,
which I would say is probably

10
00:00:38.100 --> 00:00:42.990
the most complicated piece because
you're isolating all your control flow,

11
00:00:42.990 --> 00:00:47.630
the business is not attending to that
place and then our computer selectors

12
00:00:47.630 --> 00:00:51.410
which if you're familiar is like
higher other function with the race or

13
00:00:51.410 --> 00:00:56.642
double succession, pretty straight
forward, and then just I think really nice

14
00:00:56.642 --> 00:01:01.630
sheen or
layer of polish on top of it with facades.

15
00:01:01.630 --> 00:01:05.760
And so this is currently how I
build all my applications and

16
00:01:05.760 --> 00:01:07.540
it's working quite well.

17
00:01:07.540 --> 00:01:13.520
So for you doing a dashboard, or
for anybody doing a dashboard,

18
00:01:13.520 --> 00:01:18.860
this is a really awesome way
to something has changed

19
00:01:20.260 --> 00:01:26.930
and now it's feeding in to this kind
of aggregated view of all this data.

20
00:01:26.930 --> 00:01:30.390
And what you can also do for
instance let's say,

21
00:01:30.390 --> 00:01:35.700
I had a collection of users with maybe
like some different statistics on it,

22
00:01:35.700 --> 00:01:37.920
like here's your projects stats and
here's your sales.

23
00:01:37.920 --> 00:01:42.780
So, imagine like ACRN with like,
here's the sales that you've done.

24
00:01:44.080 --> 00:01:48.790
Well what you can do is have
a single data source and

25
00:01:48.790 --> 00:01:53.000
then create custom selectors for
here's your close rate,

26
00:01:53.000 --> 00:01:57.700
here's your burn down rate,
here's your whatever.

27
00:01:57.700 --> 00:02:03.250
And based on a single data set you can
use that to compute different things and

28
00:02:03.250 --> 00:02:05.070
abstract out certain pieces.

29
00:02:05.070 --> 00:02:09.429
And so, now you're gonna have
a dashboard with multiple kind of

30
00:02:09.429 --> 00:02:14.599
independent presentation components
that is the master kind of collection

31
00:02:14.599 --> 00:02:19.042
changes instead it's recomputing
the data it actually needs for

32
00:02:19.042 --> 00:02:22.537
that component but
that data is still in one place.

33
00:02:22.537 --> 00:02:26.044
So this is also for a dashboard.

34
00:02:26.044 --> 00:02:29.511
I think really,
really key where I have a lot of,

35
00:02:29.511 --> 00:02:34.585
were I'm displaying data or a lot of
data in a bunch of different ways and

36
00:02:34.585 --> 00:02:39.659
not having to kind of be like the data's
over here, no it;s over here,

37
00:02:39.659 --> 00:02:44.020
now it's in this service,
now it's in this component.

38
00:02:44.020 --> 00:02:45.370
It's in one place.

39
00:02:45.370 --> 00:02:50.281
You change it in one place and it
simplifies that entire communication flow.

40
00:02:50.281 --> 00:02:54.813
So just to kinda come back full circle,
this is how,

41
00:02:54.813 --> 00:03:01.104
in angular application, you can
reduce complexity at a massive scale.

42
00:03:01.104 --> 00:03:03.840
Move all your state into
a single state tree.

43
00:03:03.840 --> 00:03:04.700
Single source of truth,

44
00:03:06.040 --> 00:03:11.450
any time that you have state in more
than one place, it's confusing.

45
00:03:11.450 --> 00:03:13.270
What's my single source of truth?

46
00:03:13.270 --> 00:03:18.780
You run into problems as well as
having it essentially be read only

47
00:03:18.780 --> 00:03:21.360
that reduces shared immutable state.

48
00:03:21.360 --> 00:03:25.668
And by having small,
very specific methods in your

49
00:03:25.668 --> 00:03:29.485
reducer that when I put
this in I get this out.

50
00:03:29.485 --> 00:03:34.930
And so these are pure functions
with complete referential

51
00:03:34.930 --> 00:03:39.386
transparency that they're
very easy to test.

52
00:03:39.386 --> 00:03:44.486
So one, code volume has went way down
because everything is moving into

53
00:03:44.486 --> 00:03:50.530
their specific place, it promotes reuse
and then finally flow of control.

54
00:03:50.530 --> 00:03:51.530
Two things.

55
00:03:51.530 --> 00:03:54.409
One, well, let me ask you a question.

56
00:03:54.409 --> 00:04:00.097
Would you rather cross a one-way street or
a eight lane, super highway lane?

57
00:04:00.097 --> 00:04:01.190
Take your pick.

58
00:04:01.190 --> 00:04:02.210
It's pretty obvious.

59
00:04:02.210 --> 00:04:05.540
When you cross a one lane street
you have one thing to worry about.

60
00:04:05.540 --> 00:04:10.424
When you're reasoning about your data
flow and it's not doing this, but

61
00:04:10.424 --> 00:04:14.970
this, it's very easy to say,
where is this coming from?

62
00:04:14.970 --> 00:04:17.256
Somewhere from point A to
point B something went wrong.

63
00:04:17.256 --> 00:04:22.902
So that's really simplifies
flow of control because

64
00:04:22.902 --> 00:04:29.331
everything moves in a kind of
circular unidirectional way.

65
00:04:29.331 --> 00:04:33.860
But also,
any kind of complex asynchronous,

66
00:04:33.860 --> 00:04:39.110
like control flow that involves
business logic, now this goes into your

67
00:04:39.110 --> 00:04:44.950
effects that you can then control with
observables, which are extremely powerful.

68
00:04:44.950 --> 00:04:49.030
And they are phenomenal for taking ahead
this thing and I wanna move from here to

69
00:04:49.030 --> 00:04:54.000
here but I want to do these complex
transformations along the way.

70
00:04:55.510 --> 00:05:00.175
And so when we talk about
application complexity as it

71
00:05:00.175 --> 00:05:04.840
pertains to state management,
flow of control, and

72
00:05:04.840 --> 00:05:08.376
code volume, this to me takes the cake.

73
00:05:08.376 --> 00:05:13.337
For these reasons,
state flows down, events flow up.

74
00:05:13.337 --> 00:05:16.030
Single source of truth,
everything in its place

