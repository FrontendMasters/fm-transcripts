WEBVTT

1
00:00:00.280 --> 00:00:04.565
&gt;&gt; Lukas Ruebbelke: I will explain
why we are using the state of

2
00:00:04.565 --> 00:00:08.780
persistence piece in a moment.

3
00:00:08.780 --> 00:00:12.520
So, kind of the standard shape for this,

4
00:00:12.520 --> 00:00:18.385
is this is a generic, standard out of
the box how you would handle an effect.

5
00:00:18.385 --> 00:00:22.600
Is that we're listening
to our actions and,

6
00:00:23.770 --> 00:00:29.390
in comes a type and then from here
we're doing some asynchronous thing.

7
00:00:31.100 --> 00:00:36.946
And, then when it's complete
then we are returning an action,

8
00:00:36.946 --> 00:00:43.456
and so this would be a very straight
forward to use and we could use this.

9
00:00:43.456 --> 00:00:49.555
And I would say if you're not doing any
kind of remote HTTP calling, totally fine.

10
00:00:49.555 --> 00:00:56.907
You could use this form right here,
but the problem is that well,

11
00:00:56.907 --> 00:01:01.463
HTTP calls, asynchronous HTTP calls.

12
00:01:01.463 --> 00:01:06.325
And coordinating that can be
really tricky especially when,

13
00:01:06.325 --> 00:01:09.138
what if you have more than one call?

14
00:01:09.138 --> 00:01:11.472
How do you coordinate that,
how do you synchronize that?

15
00:01:11.472 --> 00:01:16.640
And if you make a change, do you allow
your front end to update then update

16
00:01:16.640 --> 00:01:22.435
it in the back end and then just hope it
works, and if it doesn't you roll it back?

17
00:01:22.435 --> 00:01:26.580
Or do you wait for the server to update
and then you update your front end?

18
00:01:28.450 --> 00:01:35.501
As well is you'll notice in here one
other piece is that the handling of,

19
00:01:35.501 --> 00:01:42.870
the error if something goes wrong is
inside the post here as we make this.

20
00:01:42.870 --> 00:01:47.950
Whereas If we go to our
effects file that by using

21
00:01:47.950 --> 00:01:54.010
data persistence to kind
of wrap the sequence.

22
00:01:54.010 --> 00:01:57.376
That it's going to provide
an extra layer of protection for

23
00:01:57.376 --> 00:02:02.740
just a straight fetch, so there's some
utilities and some guards built in there.

24
00:02:02.740 --> 00:02:07.080
But we can also determine, in the case of
like we're going to create something or

25
00:02:07.080 --> 00:02:11.266
modify something in the server, that we
can either do it as a pessimistic update.

26
00:02:11.266 --> 00:02:12.631
In other words, wait for

27
00:02:12.631 --> 00:02:16.282
the server to complete before
dispatching this into the reducer.

28
00:02:16.282 --> 00:02:19.921
Or you can do it optimistically and
say go ahead and

29
00:02:19.921 --> 00:02:23.224
pass on the data structure
into the reducer.

30
00:02:23.224 --> 00:02:25.409
And then if something goes wrong
then we'll let you know so

31
00:02:25.409 --> 00:02:26.220
that you can undo it.

32
00:02:26.220 --> 00:02:29.210
So, there are very good reasons
to use one or the other.

33
00:02:30.790 --> 00:02:36.500
The other piece here is that I find that
this is a little bit easier to read.

34
00:02:36.500 --> 00:02:40.280
By having a clear, this is my run block,
this is my error block.

35
00:02:40.280 --> 00:02:45.364
And so this just a slight variation
on effects but especially when you're

36
00:02:45.364 --> 00:02:50.510
doing server communication,
this is I think a really good utility.

37
00:02:50.510 --> 00:02:55.731
But it would be very easy to
essentially do it through as well.

38
00:02:55.731 --> 00:03:01.205
So,
&gt;&gt; Lukas Ruebbelke: Go Projects,

39
00:03:01.205 --> 00:03:05.050
Add Project, and so
let's do a run block here.

40
00:03:06.420 --> 00:03:11.470
So it takes an action,
which is going to be LoadProjects.

41
00:03:11.470 --> 00:03:13.246
And it takes stay, so

42
00:03:13.246 --> 00:03:19.269
this is another thing that if you
haven't you will run into this of well,

43
00:03:19.269 --> 00:03:25.320
I need to make some kind of decision
based on something else in the state.

44
00:03:25.320 --> 00:03:28.663
And so getting that into your effect can

45
00:03:28.663 --> 00:03:33.540
sometimes be tricky whereas
this provides this for you.

46
00:03:35.160 --> 00:03:36.210
What is this angry about?

47
00:03:41.165 --> 00:03:45.180
&gt;&gt; Lukas Ruebbelke: All right, now this
is where the asynchronous part comes in.

48
00:03:45.180 --> 00:03:50.384
So from here we're just going to return

49
00:03:50.384 --> 00:03:58.546
this projectsService.all,
&gt;&gt; Lukas Ruebbelke: pipe,

50
00:04:02.147 --> 00:04:02.979
&gt;&gt; Lukas Ruebbelke: (map).

51
00:04:08.663 --> 00:04:13.746
&gt;&gt; Lukas Ruebbelke: I
think I'm getting little

52
00:04:13.746 --> 00:04:19.273
bit parentheses heavy here.

53
00:04:19.273 --> 00:04:22.841
So we are going to get our result,

54
00:04:22.841 --> 00:04:27.684
which is going to be an array of projects,
and

55
00:04:27.684 --> 00:04:31.670
then from here, what do we do?

56
00:04:31.670 --> 00:04:35.750
So we have just made some asynchronous
call, something has happened.

57
00:04:35.750 --> 00:04:38.875
And now we get our collection back,
what do we do?

58
00:04:38.875 --> 00:04:45.373
Well, we would then want to
put it into the reducer, and

59
00:04:45.373 --> 00:04:51.888
so we'll go new ProjectsLoaded and
pass in the result.

60
00:04:57.459 --> 00:05:00.170
&gt;&gt; Lukas Ruebbelke: I could
probably even move this up here.

61
00:05:01.910 --> 00:05:05.196
Now that I've kind of broken this out and
I know where I'm at, here we go.

62
00:05:07.954 --> 00:05:13.285
&gt;&gt; Lukas Ruebbelke: So, how this works
is we're creating a load project

63
00:05:13.285 --> 00:05:18.140
effect that is listening for
little projects.

64
00:05:20.480 --> 00:05:23.250
From there it's going
to run this code here.

65
00:05:26.460 --> 00:05:30.853
And in this case we're saying
I want to return the result of

66
00:05:30.853 --> 00:05:33.465
calling projectsService.all.

67
00:05:36.147 --> 00:05:41.264
&gt;&gt; Lukas Ruebbelke: But
I want to not necessarily return this but

68
00:05:41.264 --> 00:05:48.350
instead we're going to map
it to a new action object.

69
00:05:48.350 --> 00:05:52.330
So our trigger object is here.

70
00:05:55.400 --> 00:05:57.920
This is our command action,
go do this thing.

71
00:05:57.920 --> 00:06:03.008
And then down here,
this is our completed action.

72
00:06:03.008 --> 00:06:08.359
So,
&gt;&gt; Lukas Ruebbelke: With that

73
00:06:08.359 --> 00:06:15.905
said we need to update our reducer
not to listen to LoadProjects but

74
00:06:15.905 --> 00:06:20.635
ProjectsLoaded, does that make sense?

75
00:06:20.635 --> 00:06:23.694
So what we're doing is instead of
going straight to the reducer is we're

76
00:06:23.694 --> 00:06:25.811
creating middleware or
something in the middle.

77
00:06:25.811 --> 00:06:28.921
That takes an incoming object,
it does something, and

78
00:06:28.921 --> 00:06:30.649
then puts something else out.

79
00:06:33.972 --> 00:06:37.257
&gt;&gt; Lukas Ruebbelke: And
then from here let me just do one more.

80
00:06:42.664 --> 00:06:44.454
&gt;&gt; Lukas Ruebbelke: How much
of this did I build out?

81
00:06:48.293 --> 00:06:50.487
&gt;&gt; Lukas Ruebbelke: Let me do the entire
run block and then we'll just fix it.

82
00:06:57.266 --> 00:07:00.801
&gt;&gt; Lukas Ruebbelke: All right,
in this case,

83
00:07:00.801 --> 00:07:05.644
AddProject, here, AddProject.

84
00:07:05.644 --> 00:07:09.795
So, this is the command,

85
00:07:09.795 --> 00:07:14.891
then we're going to go create,

86
00:07:14.891 --> 00:07:18.300
create, all right?

87
00:07:22.231 --> 00:07:26.881
&gt;&gt; Lukas Ruebbelke: So, we'll copy the run
block one more time, sad I lost it,

88
00:07:26.881 --> 00:07:28.932
when it asked me to close.

89
00:07:28.932 --> 00:07:36.246
AddProject,
&gt;&gt; Lukas Ruebbelke: Instead

90
00:07:36.246 --> 00:07:42.659
we're gonna go create and
we're going to pass in the action.payload.

91
00:07:46.149 --> 00:07:50.733
&gt;&gt; Lukas Ruebbelke: And
then we're going to go ProjectAdded.

92
00:07:53.785 --> 00:07:58.191
&gt;&gt; Lukas Ruebbelke: And
this is not an array of projects but

93
00:07:58.191 --> 00:08:01.230
this is a single project.

94
00:08:02.490 --> 00:08:07.349
Now same thing here,
we go back into the reducer,

95
00:08:07.349 --> 00:08:11.988
it's no longer addProject but
ProjectAdded.

96
00:08:14.975 --> 00:08:16.786
&gt;&gt; Lukas Ruebbelke: Make sense?

97
00:08:16.786 --> 00:08:19.091
Now last but not least,

98
00:08:19.091 --> 00:08:24.977
the one thing that you absolutely
must do or it will not work.

99
00:08:27.823 --> 00:08:31.750
&gt;&gt; Lukas Ruebbelke: This is
kind of the equivalent of,

100
00:08:31.750 --> 00:08:35.558
I forgot to import the right thing.

101
00:08:35.558 --> 00:08:42.182
Is in order for this to get
registered in your application,

102
00:08:42.182 --> 00:08:47.481
you need to add this into
your effects module for

103
00:08:47.481 --> 00:08:50.406
root, drop this in here.

104
00:08:50.406 --> 00:08:56.360
And so now It's registering this
two listen for all the events.

105
00:08:57.770 --> 00:09:01.060
If not it just simply would not be at
the middle, it would be somewhere else.

106
00:09:02.100 --> 00:09:03.166
And so then if we go into our

107
00:09:03.166 --> 00:09:07.606
projects component,
&gt;&gt; Lukas Ruebbelke: So

108
00:09:07.606 --> 00:09:11.602
even here it's like I don't know,
something's not right here.

109
00:09:11.602 --> 00:09:14.954
Well, very astute, so, this loadProjects.

110
00:09:14.954 --> 00:09:18.365
The difference is this is
where we're going wrong.

111
00:09:18.365 --> 00:09:24.820
This no longer takes a payload cuz
we're just using this as a trigger.

112
00:09:24.820 --> 00:09:28.821
Now, I addProject on the other hand and
this is still correct but

113
00:09:28.821 --> 00:09:31.489
instead of going straight to the reducer,

114
00:09:31.489 --> 00:09:37.026
that in the effect,
&gt;&gt; Lukas Ruebbelke: It's going to,

115
00:09:37.026 --> 00:09:42.029
the effect then going to call the service,
and when that's

116
00:09:42.029 --> 00:09:48.050
completed it's going to dispatch
a new action object with the result.

