WEBVTT

1
00:00:00.360 --> 00:00:03.280
&gt;&gt; Lukas Ruebbelke: So
things going into the reducer

2
00:00:03.280 --> 00:00:06.160
asynchronously was one
part of the challenge.

3
00:00:06.160 --> 00:00:12.700
The next part of my journey into NgRx is,
well, what happens if you need to

4
00:00:14.220 --> 00:00:20.400
either connect related models together,
or you need to perform some kind of data

5
00:00:20.400 --> 00:00:26.200
manipulation before it lands in your
component before it's consumed?

6
00:00:26.200 --> 00:00:32.150
And so, for this, I am going to show you
how to do computed data with selector.

7
00:00:32.150 --> 00:00:37.094
So we saw some basic selectors
in two modules previous.

8
00:00:37.094 --> 00:00:41.080
But we're going to extend
that just a little bit, and

9
00:00:41.080 --> 00:00:44.330
I'll show you how that you
can take a selector and

10
00:00:44.330 --> 00:00:49.830
do some combinatory kind
of logic to produce a new

11
00:00:51.080 --> 00:00:54.910
and interesting data structure that
you can use to suit your needs.

12
00:00:54.910 --> 00:01:00.107
So I think we're done
with actions effects, and

13
00:01:00.107 --> 00:01:05.189
so what we'll do is we'll
go into our reducer.

14
00:01:07.305 --> 00:01:09.381
&gt;&gt; Lukas Ruebbelke: Or rather,
let's go into the top level reducer.

15
00:01:11.538 --> 00:01:16.870
&gt;&gt; Lukas Ruebbelke: And
let's start to build this out.

16
00:01:19.907 --> 00:01:21.111
&gt;&gt; Lukas Ruebbelke: So
one thing we haven't done is,

17
00:01:21.111 --> 00:01:25.350
we've been working with the collection in
terms of create, read, update, and delete.

18
00:01:25.350 --> 00:01:30.993
But we haven't done very much
around the selected Project ID.

19
00:01:30.993 --> 00:01:36.600
In other words, when you select it, not
a lot is happening at the reducer level.

20
00:01:36.600 --> 00:01:39.980
So just internally,
we're still managing it in the component.

21
00:01:39.980 --> 00:01:42.690
But let's promote that, and

22
00:01:42.690 --> 00:01:48.060
I'll show a use case for
using computer data and a selector.

23
00:01:48.060 --> 00:01:53.488
So export const, we're gonna call this

24
00:01:53.488 --> 00:01:59.882
selectCurrentProjectId = createSelector.

25
00:02:02.939 --> 00:02:07.338
&gt;&gt; Lukas Ruebbelke: And
then within here, we're going to

26
00:02:07.338 --> 00:02:12.012
obviously do selectProjectState, and

27
00:02:12.012 --> 00:02:18.880
we'll go with fromProjects,
getSelectedProjectId.

28
00:02:18.880 --> 00:02:22.710
So we're pulling this in from a rehearsal,
just taking state and

29
00:02:22.710 --> 00:02:27.360
giving you the SelectedProjectId.

30
00:02:27.360 --> 00:02:32.050
So if we go back into our reducer,
now what we can do is

31
00:02:33.170 --> 00:02:37.900
we can say, export const.

32
00:02:37.900 --> 00:02:41.313
So we're going to just get,
well, we have the ID but

33
00:02:41.313 --> 00:02:44.818
how do we get the project
that it's associated with?

34
00:02:44.818 --> 00:02:50.564
So selectCurrentProject,

35
00:02:53.763 --> 00:02:55.665
&gt;&gt; Lukas Ruebbelke: = createSelector.

36
00:03:04.911 --> 00:03:12.879
&gt;&gt; Lukas Ruebbelke: From here,
we're going to selectProjectEntities,

37
00:03:12.879 --> 00:03:17.388
and we'll go selectCurrent,

38
00:03:20.551 --> 00:03:22.646
&gt;&gt; Lukas Ruebbelke: ProjectId, and

39
00:03:22.646 --> 00:03:29.087
then we're going to add in
a third parameter here.

40
00:03:29.087 --> 00:03:34.853
So one thing that I'll point
out is if you click in here and

41
00:03:34.853 --> 00:03:39.060
you look at this type script definition,

42
00:03:39.060 --> 00:03:43.523
this is a very, very overloaded function.

43
00:03:43.523 --> 00:03:45.021
I mean, it just goes on,
and on, and on, and on.

44
00:03:45.021 --> 00:03:49.814
In other words, you can pass in,
I don't know, where the madness stops, but

45
00:03:49.814 --> 00:03:53.735
at least up to 8, which I would say,
if you need more than that,

46
00:03:53.735 --> 00:03:56.370
you might have an architectural problem.

47
00:03:57.960 --> 00:04:01.380
But it will take one, two, three.

48
00:04:01.380 --> 00:04:06.970
And so, the third parameter is
going to be a function, that

49
00:04:06.970 --> 00:04:12.690
is going to essentially be the results of
the previous parameter that we sent to it.

50
00:04:12.690 --> 00:04:17.775
So projectEntities, and projectId.

51
00:04:20.904 --> 00:04:23.862
&gt;&gt; Lukas Ruebbelke: And
from here, well, let's do,

52
00:04:23.862 --> 00:04:27.340
we can keep this pretty simple at first.

53
00:04:28.540 --> 00:04:34.425
We can return projectEntities[projectId].

54
00:04:34.425 --> 00:04:40.801
And so, this is the advantage of kind
of breaking these out into IDs and

55
00:04:40.801 --> 00:04:47.090
entities is that it takes,
this looks this up in almost real-time.

56
00:04:47.090 --> 00:04:52.207
So now, we have selectCurrentProjectId

57
00:04:52.207 --> 00:04:56.928
and,
&gt;&gt; Lukas Ruebbelke: We'll

58
00:04:56.928 --> 00:05:01.332
go into our barrel up here.

59
00:05:06.438 --> 00:05:10.716
&gt;&gt; Lukas Ruebbelke: Make sure I
pull this from the right place.

60
00:05:10.716 --> 00:05:15.482
I make a lot of mistakes but
I don't make a lot of them over and over.

61
00:05:15.482 --> 00:05:20.082
Now, we'll go into our project component.

62
00:05:20.082 --> 00:05:25.945
And what we can do is,
right now, currentProject is,

63
00:05:25.945 --> 00:05:31.060
well, we're just dealing with this object.

64
00:05:31.060 --> 00:05:34.590
It's essentially scoped
to be presentation state.

65
00:05:34.590 --> 00:05:39.882
So we go, currentProject, observable

66
00:05:39.882 --> 00:05:45.122
stream,
&gt;&gt; Lukas Ruebbelke: And,

67
00:05:49.511 --> 00:05:50.276
&gt;&gt; Lukas Ruebbelke: Go here.

68
00:05:50.276 --> 00:05:52.409
And so, I'm gonna leave this here for
just a moment.

69
00:05:52.409 --> 00:05:54.668
Actually no,
let's just take that off, why not?

70
00:05:58.432 --> 00:06:01.905
&gt;&gt; Lukas Ruebbelke: And
then, you can go here,

71
00:06:01.905 --> 00:06:08.867
this.currentProjects = store.pipe(select).

72
00:06:12.002 --> 00:06:13.960
&gt;&gt; Lukas Ruebbelke: And then,
we just pass this selector in.

73
00:06:19.801 --> 00:06:21.972
&gt;&gt; Lukas Ruebbelke: And make sure
that came in from the right place,

74
00:06:21.972 --> 00:06:25.030
selectCurrentProject, from core-data,
thank you very much.

75
00:06:26.940 --> 00:06:31.870
And I think we're good here.

76
00:06:33.500 --> 00:06:38.560
Now, let's go into our projects component.

77
00:06:39.700 --> 00:06:44.996
We'll update currentProject to use
the observable stream version,

78
00:06:44.996 --> 00:06:46.977
and then we'll go async.

79
00:06:50.160 --> 00:06:54.993
&gt;&gt; Lukas Ruebbelke: And now, what we need
to do is make sure that in our component

80
00:06:54.993 --> 00:07:00.423
that,
&gt;&gt; Lukas Ruebbelke: We'll need

81
00:07:00.423 --> 00:07:06.460
to update these, because we're no longer
handling this at the presentation level.

82
00:07:08.060 --> 00:07:12.101
So when we want to select a project,

83
00:07:12.101 --> 00:07:16.686
we'll go this.store.dispatch, and

84
00:07:16.686 --> 00:07:21.806
let me just make sure
that in our action object

85
00:07:21.806 --> 00:07:26.955
that we have, Project selected right here.

86
00:07:26.955 --> 00:07:29.910
SelectProject, and

87
00:07:29.910 --> 00:07:34.841
so,
&gt;&gt; Lukas Ruebbelke: There we go.

88
00:07:34.841 --> 00:07:37.895
So everything is here, so
we should be able to new,

89
00:07:42.481 --> 00:07:45.448
&gt;&gt; Lukas Ruebbelke: SelectProject, and

90
00:07:45.448 --> 00:07:48.915
we'll go project.id.

91
00:07:50.915 --> 00:07:53.847
&gt;&gt; Lukas Ruebbelke: Now, what we could
also do is in the resetCurrentProject,

92
00:08:00.832 --> 00:08:02.223
&gt;&gt; Lukas Ruebbelke: Is we can just go

93
00:08:02.223 --> 00:08:02.867
null.

94
00:08:06.084 --> 00:08:12.158
&gt;&gt; Lukas Ruebbelke: I believe this is,
&gt;&gt; Lukas Ruebbelke: Everything

95
00:08:12.158 --> 00:08:15.005
that we need, all right.

96
00:08:15.005 --> 00:08:24.053
So,
&gt;&gt; Lukas Ruebbelke: I

97
00:08:24.053 --> 00:08:26.160
see some crude lines,
let me just fix that out.

98
00:08:26.160 --> 00:08:27.425
Looks good.

99
00:08:31.766 --> 00:08:34.905
&gt;&gt; Lukas Ruebbelke: And
when we select this,

100
00:08:34.905 --> 00:08:38.944
that if we go into our dev tools,

101
00:08:46.860 --> 00:08:49.772
&gt;&gt; Lukas Ruebbelke: That
we're dispatching the ID.

102
00:08:49.772 --> 00:08:55.177
But then, when we, so
every time the ID changes,

103
00:08:55.177 --> 00:09:01.872
so notice it's selecting,
that ID is changing on the store,

104
00:09:01.872 --> 00:09:07.120
which is then triggering in the selector.

105
00:09:07.120 --> 00:09:15.681
If go down here,
&gt;&gt; Lukas Ruebbelke: I'm

106
00:09:15.681 --> 00:09:17.184
just going to return this.

107
00:09:22.120 --> 00:09:29.212
&gt;&gt; Lukas Ruebbelke: We'll do SELECTOR!,
and we'll just go projectId.

108
00:09:29.212 --> 00:09:35.070
Save this,
&gt;&gt; Lukas Ruebbelke: Go to Console.

109
00:09:36.510 --> 00:09:39.650
Notice that as I select this down here,
every time I change it,

110
00:09:40.700 --> 00:09:44.340
it's changing at the store, but
then it's firing the selector.

111
00:09:44.340 --> 00:09:47.752
And so, it's basically, hey,
something changed, let's go ahead and

112
00:09:47.752 --> 00:09:51.618
trigger this and do this cascade of the
selectors that you've composed together.

113
00:09:52.910 --> 00:09:57.593
&gt;&gt; Lukas Ruebbelke: So now,
the kind of the final piece to this,

114
00:09:57.593 --> 00:10:01.781
is if we go into our project component,

115
00:10:05.576 --> 00:10:07.133
&gt;&gt; Lukas Ruebbelke: Let's take this out,

116
00:10:10.382 --> 00:10:12.400
&gt;&gt; Lukas Ruebbelke: And instead,

117
00:10:12.400 --> 00:10:17.700
let's move this into our selector.

118
00:10:17.700 --> 00:10:20.090
And so, we can do a couple things.

119
00:10:20.090 --> 00:10:25.420
I could put it right in here, I could put
it in like, a constant file or something.

120
00:10:25.420 --> 00:10:29.830
I'll just set it near the selector so
that we know what we're working with.

121
00:10:31.520 --> 00:10:37.770
And so, now that we have kind of
this empty project, we can now say,

122
00:10:37.770 --> 00:10:42.120
well, for instance,
what if you want to reset the project?

123
00:10:42.120 --> 00:10:46.789
So inside of this, we can do, well,

124
00:10:50.080 --> 00:10:52.947
&gt;&gt; Lukas Ruebbelke: Is our projectId?

125
00:10:52.947 --> 00:10:58.312
If so, return the appropriate project.

126
00:10:58.312 --> 00:11:03.098
If not, then return emptyProject.

127
00:11:05.222 --> 00:11:08.674
&gt;&gt; Lukas Ruebbelke: And so, this is kind
of a nice way to say that I'm going to

128
00:11:08.674 --> 00:11:13.971
control and I want to compute on the fly,
depending on the current selected project.

129
00:11:13.971 --> 00:11:18.759
If it's either null, so
there's no selected project, or

130
00:11:18.759 --> 00:11:23.932
there is a selected project that
you can dynamically compute and

131
00:11:23.932 --> 00:11:29.230
determine what is going to
be fed into your component.

132
00:11:29.230 --> 00:11:34.877
What's interesting about this,
is if we go back to the component,

133
00:11:34.877 --> 00:11:42.200
that the component itself is like,
were starting to move these concerns out.

134
00:11:42.200 --> 00:11:44.360
And so, the terms of like,
does it have an ID or not?

135
00:11:44.360 --> 00:11:47.450
Well, empty project or full project?

136
00:11:47.450 --> 00:11:51.810
Well now, the component,
it doesn't really care about that.

137
00:11:51.810 --> 00:11:53.900
It's just going to display
whatever you feed into it.

138
00:11:53.900 --> 00:11:59.010
And this is where we want to
move is to have very thin

139
00:12:01.800 --> 00:12:05.560
components where a lot of these things
of like, you get an empty object or

140
00:12:05.560 --> 00:12:07.720
not, whatever is removing further up.

141
00:12:09.330 --> 00:12:10.080
Does that make sense?

142
00:12:12.540 --> 00:12:17.425
Another thing that we could do
just hypothetically, for example,

143
00:12:17.425 --> 00:12:23.510
if you notice here that we have like,
we're getting all the customers.

144
00:12:25.230 --> 00:12:28.620
And customers is coming, so

145
00:12:28.620 --> 00:12:33.006
this is all coming from the REST API.

146
00:12:33.006 --> 00:12:34.444
And so, if we look at this.

147
00:12:38.654 --> 00:12:40.402
&gt;&gt; Lukas Ruebbelke: Now
we have a customer, and

148
00:12:40.402 --> 00:12:44.662
if we go down to the project,
that the projects have customer IDs.

149
00:12:44.662 --> 00:12:47.841
So wouldn't it be cool if you could
actually take the customers and

150
00:12:47.841 --> 00:12:48.920
get the project ID.

151
00:12:48.920 --> 00:12:55.254
So I'll just real quick, take a second,
and show what that might look like.

152
00:12:57.975 --> 00:13:01.598
&gt;&gt; Lukas Ruebbelke: So
const selectCustomerProjects, or

153
00:13:01.598 --> 00:13:06.758
I would actually do
CustomersProjects cuz it's like,

154
00:13:06.758 --> 00:13:12.261
many the merrier,
cuz that what it feels like it should be.

155
00:13:12.261 --> 00:13:14.903
And so, in order for
this to work, what do we need?

156
00:13:14.903 --> 00:13:23.058
Well, we need selectAllCustomers,
what else?

157
00:13:23.058 --> 00:13:30.360
selectAllProjects, and
then we need to put them together.

158
00:13:30.360 --> 00:13:35.165
So we'll go customers, projects,

159
00:13:35.165 --> 00:13:40.125
and then what we're going to return,

160
00:13:40.125 --> 00:13:44.156
is we'll go object or rather,

161
00:13:57.007 --> 00:13:58.939
&gt;&gt; Lukas Ruebbelke: Return customers and

162
00:13:58.939 --> 00:14:01.517
we're gonna map over this.

163
00:14:07.974 --> 00:14:10.638
&gt;&gt; Lukas Ruebbelke: And
what we want to do is return a new,

164
00:14:15.932 --> 00:14:20.252
&gt;&gt; Lukas Ruebbelke: Object that is made up

165
00:14:20.252 --> 00:14:21.213
of,

166
00:14:32.464 --> 00:14:34.263
&gt;&gt; Lukas Ruebbelke: All of
the customer properties.

167
00:14:34.263 --> 00:14:36.183
So we're just gonna take that,
expand it out.

168
00:14:36.183 --> 00:14:41.120
But what we also want to do is go

169
00:14:41.120 --> 00:14:45.662
projects, and from here,

170
00:14:45.662 --> 00:14:51.784
we're going to go projects.filter

171
00:14:51.784 --> 00:14:59.170
project,
&gt;&gt; Lukas Ruebbelke: And

172
00:14:59.170 --> 00:15:04.359
we're just going to return any project,

173
00:15:09.828 --> 00:15:12.786
&gt;&gt; Lukas Ruebbelke: ID that matches, or

174
00:15:12.786 --> 00:15:19.928
rather customerId that
matches customer.id.

175
00:15:19.928 --> 00:15:21.716
And so, if you are going
to do something like this,

176
00:15:21.716 --> 00:15:23.764
this would be very kind of
specific to what you're doing.

177
00:15:23.764 --> 00:15:27.036
But we're basically saying,
get all the customers, all the projects,

178
00:15:27.036 --> 00:15:28.689
we're mapping over the customers.

179
00:15:28.689 --> 00:15:33.464
And we're saying, for every customer,
we basically wanna create a new

180
00:15:33.464 --> 00:15:37.938
customer object, but we want to
add in this additional thing here.

181
00:15:37.938 --> 00:15:39.744
And that is, loop over the projects and

182
00:15:39.744 --> 00:15:42.275
give us just the projects
that map to this customerId.

183
00:15:43.630 --> 00:15:47.200
And so, when either one of these would
change, then it would re-compute and

184
00:15:47.200 --> 00:15:50.310
return that particular data.

185
00:15:50.310 --> 00:15:55.570
So you can get super fancy or
you can do something that's just simply,

186
00:15:55.570 --> 00:15:59.900
I want to control when I select
the project that it's either going to be

187
00:15:59.900 --> 00:16:03.980
something or it's going to be an empty
object that I can then use to create.

