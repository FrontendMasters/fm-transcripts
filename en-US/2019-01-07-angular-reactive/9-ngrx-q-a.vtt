WEBVTT

1
00:00:00.090 --> 00:00:02.430
&gt;&gt; Speaker 1: How can we check
the size of the state tree?

2
00:00:02.430 --> 00:00:05.260
Do we ever need to clean the state tree?

3
00:00:05.260 --> 00:00:07.438
Are you worried about how
big the storage gets?

4
00:00:12.966 --> 00:00:15.185
&gt;&gt; Lukas Ruebbelke: It's
never been a problem for me.

5
00:00:15.185 --> 00:00:21.130
I would say, I'd be worried about
state if it wasn't in the state tree.

6
00:00:21.130 --> 00:00:26.000
And so, by condensing it and
consolidating into a single place,

7
00:00:26.000 --> 00:00:29.730
I've actually found that my applications
have become far more performing.

8
00:00:29.730 --> 00:00:36.400
There maybe a case where you're
loading in 10,000 objects.

9
00:00:36.400 --> 00:00:40.199
And so there is a possibility you may
have just a ridiculous amount of state.

10
00:00:41.510 --> 00:00:45.590
I would say that's probably
a UX problem at that point.

11
00:00:45.590 --> 00:00:48.950
So if you have 10,000 things
in your application store,

12
00:00:48.950 --> 00:00:52.760
how could somebody possibly have
a meaningful interaction with that?

13
00:00:52.760 --> 00:00:55.400
The other thing is,
because you're doing immutable operations,

14
00:00:55.400 --> 00:00:57.870
is that it's actually far
more performant on memory.

15
00:00:57.870 --> 00:00:59.610
Cuz you're actually just
creating new pointers and

16
00:00:59.610 --> 00:01:03.350
not trying to do this change or
did this not?

17
00:01:03.350 --> 00:01:09.940
&gt;&gt; Speaker 1: The other two questions
are on setting initial state.

18
00:01:09.940 --> 00:01:17.190
Can we fetch the projects in
ngOnInit instead of the constructor?

19
00:01:17.190 --> 00:01:18.999
And would it work any differently?

20
00:01:21.204 --> 00:01:22.840
&gt;&gt; Lukas Ruebbelke: So you can.

21
00:01:22.840 --> 00:01:28.210
So typically,
I try to avoid doing any complex

22
00:01:29.750 --> 00:01:32.550
construction logic in the constructor.

23
00:01:32.550 --> 00:01:33.970
So any kind of setup logic.

24
00:01:35.120 --> 00:01:39.420
Because when this is initialized,

25
00:01:39.420 --> 00:01:45.410
that the store has already been
initialized ahead of that.

26
00:01:45.410 --> 00:01:49.270
It's typically not a problem, but
you definitely could move it to ngOnInit.

27
00:01:51.350 --> 00:01:55.080
This right here, I will also say
that we're going to be refactoring

28
00:01:57.190 --> 00:01:59.830
this kind of selector in here,
so it's a lot cleaner.

29
00:01:59.830 --> 00:02:04.070
Because if I saw this in the constructor,
I was like, that's not good.

30
00:02:04.070 --> 00:02:08.334
But once you actually clean that up and
you're not doing that,

31
00:02:08.334 --> 00:02:10.436
it doesn't offend me as much.

32
00:02:10.436 --> 00:02:16.886
Because I know for a fact that the store
already exists and it is initialized.

33
00:02:16.886 --> 00:02:19.350
But you could do that in ngOnInit and
it wont be a problem

