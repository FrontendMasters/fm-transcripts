WEBVTT

1
00:00:00.270 --> 00:00:02.530
&gt;&gt; Lukas Ruebbelke: Just
to lay a quick foundation,

2
00:00:02.530 --> 00:00:07.950
this is probably my one of my favorite
quotes on software engineering.

3
00:00:07.950 --> 00:00:12.852
It comes from the paper Out of the Tar
Pit, you can Google it, it's a free PDF,

4
00:00:12.852 --> 00:00:17.181
Victor Savkin, of Angular,
now Narwal, suggested that I read it.

5
00:00:17.181 --> 00:00:21.550
And right in the first part of this paper,
Ben Moseley and

6
00:00:21.550 --> 00:00:26.467
Peter Marks mostly they talk about,
that programming is hard,

7
00:00:26.467 --> 00:00:30.496
and that this is because
large systems are complex.

8
00:00:30.496 --> 00:00:34.240
And I think that's almost
self evident that,

9
00:00:34.240 --> 00:00:39.712
yeah like the larger the system,
the more complex that it is, and so

10
00:00:39.712 --> 00:00:44.811
on the surface that's really kind of okay,
we get it what now.

11
00:00:44.811 --> 00:00:49.100
But then they go on to talk
about well what is complexity?

12
00:00:50.290 --> 00:00:55.283
And they define it as state management,
flow of control, and

13
00:00:55.283 --> 00:01:02.198
code volume with state management being
the largest perpetrator of complexity, and

14
00:01:02.198 --> 00:01:09.230
from there stems complex flow of control,
and additional code volume to manage that.

15
00:01:09.230 --> 00:01:13.031
And so the reason why I'm so
in love with NGRX,

16
00:01:13.031 --> 00:01:19.462
which we're going to spend quite a bit
of time talking about in this workshop,

17
00:01:19.462 --> 00:01:25.420
is because, I believe that it handles
those problems very, very well.

18
00:01:25.420 --> 00:01:30.304
So NGRX is based off of Redux,
so Redux is a pattern,

19
00:01:30.304 --> 00:01:36.080
it's also a library created by
Dan Abramov that is for React.

20
00:01:36.080 --> 00:01:41.301
So if I talk about Redux capital R,
I'm talking about the library Redux,

21
00:01:41.301 --> 00:01:45.610
lower case r in most cases I'll
be referring to the pattern.

22
00:01:45.610 --> 00:01:49.431
So Dan Abramov created Redux,
I believe Rob Romald watched his

23
00:01:49.431 --> 00:01:52.602
series over the weekend or
something and just said,

24
00:01:52.602 --> 00:01:57.520
this is amazing I'm going to hook this
upbBut I'm gonna do it with observables.

25
00:01:57.520 --> 00:02:00.635
Which I think it's a little
extra special sauce or

26
00:02:00.635 --> 00:02:04.940
communicating through your application
to make it truly reactive.

27
00:02:04.940 --> 00:02:10.534
So one note about NGRX,
is we are laying the foundation here,

28
00:02:10.534 --> 00:02:15.911
when we talk about the NGRX,
that a lot of times when you hear

29
00:02:15.911 --> 00:02:21.614
NGRX it's talking about typically
people think of the store,

30
00:02:21.614 --> 00:02:26.910
which is basically the main
portion of the redux pattern.

31
00:02:26.910 --> 00:02:32.004
But actually it stands for
angular reactive extension,

32
00:02:32.004 --> 00:02:37.310
so there's actually multiple
pieces within NGRX proper,

33
00:02:37.310 --> 00:02:42.190
and so they've condensed
this all into the platform,

34
00:02:42.190 --> 00:02:47.175
but, what I wanna call out was
kind of the main libraries

35
00:02:47.175 --> 00:02:51.873
here that obviously store
plays a really core part.

36
00:02:51.873 --> 00:02:57.257
Effects, entity, and
then we'll see store-devtools as well,

37
00:02:57.257 --> 00:03:03.520
so the three ones that we're gonna
focus on is store, effects, and entity.

38
00:03:03.520 --> 00:03:06.728
But then we'll also see
the store-devtools in actions,

39
00:03:06.728 --> 00:03:10.853
there's some additional things, so
for instance, the router-store,

40
00:03:10.853 --> 00:03:14.530
if you wanted to hook this into
your router, you certainly could.

41
00:03:14.530 --> 00:03:17.433
I believe that once you
understand the foundations,

42
00:03:17.433 --> 00:03:19.830
it would not be hard to
go in that direction.

43
00:03:19.830 --> 00:03:24.863
So when we talk about NGRX,
typically people default to the store,

44
00:03:24.863 --> 00:03:28.590
but you could be talking about effects,
entity.

45
00:03:28.590 --> 00:03:31.603
There's schematics, there's a lot
of different things under this, so

46
00:03:31.603 --> 00:03:34.809
occasionally, you will need to actually
clarify that, no, it's not this,

47
00:03:34.809 --> 00:03:35.927
just the single thing, but

48
00:03:35.927 --> 00:03:38.520
it's actually a series of tools and
they continue to add to it.

49
00:03:38.520 --> 00:03:42.804
So pretty much every time
I use this I actually pour

50
00:03:42.804 --> 00:03:47.302
champagne out on the ground
I just love it that much.

51
00:03:47.302 --> 00:03:51.125
All right so
let's talk about the application and

52
00:03:51.125 --> 00:03:53.770
what we're gonna be doing today.

53
00:03:53.770 --> 00:03:59.422
So this is a very familiar application,
I've taken this,

54
00:03:59.422 --> 00:04:04.510
pulled it out from yesterday,
and I've removed some

55
00:04:04.510 --> 00:04:10.276
of the extraneous pieces that
are not part of the narrative,

56
00:04:10.276 --> 00:04:14.480
and so primarily a single feature project.

57
00:04:14.480 --> 00:04:19.271
And we're communicating via the REST API,
and so this is where I think most people

58
00:04:19.271 --> 00:04:23.310
get to, when it's like, okay,
we need to do something different.

59
00:04:23.310 --> 00:04:27.665
And so a lot of times what you'll have,
is a lot of services making calls, and

60
00:04:27.665 --> 00:04:31.819
they're either stateful, or
they're sending data to the components,

61
00:04:31.819 --> 00:04:34.300
then the components then become stateful.

62
00:04:34.300 --> 00:04:38.206
And so pretty much where can you hit
that REST API, and it's like, okay,

63
00:04:38.206 --> 00:04:42.301
this is getting very large, we have a lot
of APIs, we have a lot of services and

64
00:04:42.301 --> 00:04:43.760
things are getting messy.

65
00:04:43.760 --> 00:04:49.682
So, we are going to take this
application and we're going to,

66
00:04:49.682 --> 00:04:54.620
through a series of steps,
refactor it to use NGRX.

67
00:04:54.620 --> 00:05:03.817
Now, if we go to the repo,
&gt;&gt; Lukas Ruebbelke: Angular

68
00:05:03.817 --> 00:05:08.840
reactive workshop,
the master is the completed branch.

69
00:05:08.840 --> 00:05:12.514
There's an additional branch and

70
00:05:12.514 --> 00:05:16.694
this is where we will be starting from,

71
00:05:16.694 --> 00:05:21.255
coincidentally called the start branch,

72
00:05:21.255 --> 00:05:26.826
now what's going to happen is,
if we go to the wiki,

73
00:05:26.826 --> 00:05:31.410
there are these reactive workshop steps.

74
00:05:31.410 --> 00:05:35.604
And so for the most part I'm going to
follow this pretty close, and occasionally

75
00:05:35.604 --> 00:05:39.380
I may forget how to type something and
I may pull this up and reference it.

76
00:05:39.380 --> 00:05:43.754
But, these are broken up into steps,
and as I finish with step,

77
00:05:43.754 --> 00:05:47.080
then we'll cut the branch and
we'll push it up.

78
00:05:48.880 --> 00:05:51.388
&gt;&gt; Lukas Ruebbelke: And so
once I get to like let's say step 2,

79
00:05:51.388 --> 00:05:55.637
and I haven't cut a branch, call me
out on that, so by the end of the day,

80
00:05:55.637 --> 00:05:59.090
we are going to have branches for
everyone of these steps.

81
00:05:59.090 --> 00:06:01.776
So that somebody comes in they wanna say,

82
00:06:01.776 --> 00:06:06.710
what exactly happened when we were
talking about, I don't know, entity?

83
00:06:06.710 --> 00:06:07.761
I'd like to revisit that,

84
00:06:07.761 --> 00:06:10.882
you can just go right to that branch of
the branch before and then follow through.

85
00:06:10.882 --> 00:06:16.540
So we're gonna break that out in steps,
if I forget to do that, please remind me.

