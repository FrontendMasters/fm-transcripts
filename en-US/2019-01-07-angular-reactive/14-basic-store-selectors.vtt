WEBVTT

1
00:00:00.090 --> 00:00:04.570
&gt;&gt; Lukas Ruebbelke: We are going
to talk about selectors.

2
00:00:04.570 --> 00:00:11.920
So where we left off was with
converting our reducer to use entity.

3
00:00:11.920 --> 00:00:14.170
But they changed the data structure.

4
00:00:14.170 --> 00:00:17.370
So pulling data directly from
the store is a bit messy.

5
00:00:17.370 --> 00:00:21.068
So for instance if we looked here,
this is prior to dumping out.

6
00:00:21.068 --> 00:00:24.720
We had to jump through some
hoops to make that work.

7
00:00:24.720 --> 00:00:29.920
And so what we're going to do
is we are going to introduce

8
00:00:29.920 --> 00:00:34.540
selectors that allows us to condense or

9
00:00:34.540 --> 00:00:40.070
abstract out some of this
data manipulation here

10
00:00:40.070 --> 00:00:45.090
into what I would say is this
composable query if you will.

11
00:00:45.090 --> 00:00:51.550
So to build this out,
we're going to back to our reducer and

12
00:00:51.550 --> 00:00:58.050
we're going to build out
a first layer of selectors.

13
00:00:58.050 --> 00:01:03.550
So what will happen here is I
build out the low-level selectors

14
00:01:03.550 --> 00:01:06.170
in the feature reducer.

15
00:01:06.170 --> 00:01:10.370
And then I expose them in kind
of the top level reducer,

16
00:01:10.370 --> 00:01:12.990
because ultimately is you
may want to combine them.

17
00:01:12.990 --> 00:01:16.310
And so having all your
selectors in kind of one place,

18
00:01:16.310 --> 00:01:20.590
especially when you're using computed or
combined selectors, that's helpful.

19
00:01:20.590 --> 00:01:22.980
So I think of when you
are dealing with selectors,

20
00:01:22.980 --> 00:01:26.970
have kind of a singular place you know
kind of thinking of it as an APAN point.

21
00:01:28.360 --> 00:01:31.260
So will just build out our selectors here,

22
00:01:31.260 --> 00:01:37.265
I think that was almost
Spanish like [FOREIGN].

23
00:01:41.162 --> 00:01:44.569
&gt;&gt; Lukas Ruebbelke: So the first one
is going to be I'll also precursor,

24
00:01:44.569 --> 00:01:48.674
selectors are just functions so
they take some information and

25
00:01:48.674 --> 00:01:51.010
then they give you something else.

26
00:01:52.290 --> 00:01:55.940
So a very, very simple selector, and

27
00:01:55.940 --> 00:02:01.187
this is technically not
a selector in the NGRX sense yet

28
00:02:01.187 --> 00:02:07.836
but if we wanted to get selected
project ID, you would pass in state.

29
00:02:07.836 --> 00:02:14.360
And so this would be project state and
return what,

30
00:02:14.360 --> 00:02:22.621
well, state dot SelectedProjectId.

31
00:02:29.559 --> 00:02:34.449
&gt;&gt; Lukas Ruebbelke: Also, if we go to
our adapter, and we click on this.

32
00:02:37.670 --> 00:02:43.160
That there's a GET selectors
method that returns,

33
00:02:44.830 --> 00:02:47.680
some additional selectors for
you, right out of the gate.

34
00:02:47.680 --> 00:02:53.825
So, for instance if you wanted all
the IDs or entities, or more importantly

35
00:02:53.825 --> 00:02:59.019
if you wanted all of everything
that it will return that for you.

36
00:02:59.019 --> 00:03:04.490
So what we are going to do is,
pull this off using destructuring.

37
00:03:04.490 --> 00:03:11.760
So we go select Ids,
selectEntities and selectAll.

38
00:03:13.010 --> 00:03:17.916
From adapter.getSelectors.

39
00:03:21.077 --> 00:03:24.739
&gt;&gt; Lukas Ruebbelke: And then, because
selectIds, selectEntties, selectAll,

40
00:03:24.739 --> 00:03:29.713
that's not super descriptive, we're going
to export these with something a little

41
00:03:29.713 --> 00:03:33.721
bit,
&gt;&gt; Lukas Ruebbelke: More informative.

42
00:03:37.594 --> 00:03:39.944
&gt;&gt; Lukas Ruebbelke: SelectIds,

43
00:03:43.970 --> 00:03:47.443
&gt;&gt; Lukas Ruebbelke: ProjectEntities,

44
00:03:54.823 --> 00:03:55.516
&gt;&gt; Lukas Ruebbelke: SelectAllProjects.

45
00:04:00.831 --> 00:04:01.991
&gt;&gt; Lukas Ruebbelke: Here we go.

46
00:04:13.051 --> 00:04:19.790
&gt;&gt; Lukas Ruebbelke: All right, so we
built out these low-level selectors here.

47
00:04:19.790 --> 00:04:27.320
So these are just returning right from
the state, it's returning specific things.

48
00:04:27.320 --> 00:04:34.430
But if we go into the top-level reducer.

49
00:04:34.430 --> 00:04:39.233
And here,
let's spilled out the selectors that

50
00:04:39.233 --> 00:04:43.109
we want to expose to the outside world.

51
00:04:43.109 --> 00:04:49.283
So, am just going to go,
projects selectors, and

52
00:04:49.283 --> 00:04:57.339
from here, we're going to create
a feature selector, which is,

53
00:05:01.559 --> 00:05:05.564
&gt;&gt; Lukas Ruebbelke: SelectProjectState

54
00:05:05.564 --> 00:05:07.345
equals,

55
00:05:11.360 --> 00:05:16.924
&gt;&gt; Lukas Ruebbelke:
FromProjects.ProjectState.

56
00:05:26.714 --> 00:05:30.178
&gt;&gt; Lukas Ruebbelke: So what this does,
I'm gonna break this down to just

57
00:05:30.178 --> 00:05:34.295
a second line here cuz this is a bit long,
so we can just see it.

58
00:05:40.222 --> 00:05:44.978
&gt;&gt; Lukas Ruebbelke: Is we're saying,
I wanna get or select these feature off of

59
00:05:44.978 --> 00:05:51.170
the main state which is for the most part,
the equivalent of this right here.

60
00:05:52.410 --> 00:05:55.343
So we're saying give me
this piece of state.

61
00:05:57.780 --> 00:06:03.994
&gt;&gt; Lukas Ruebbelke: And then from here, we
can build out some additional selectors.

62
00:06:13.480 --> 00:06:17.046
&gt;&gt; Lukas Ruebbelke: Select ProjectIds.

63
00:06:22.823 --> 00:06:27.430
&gt;&gt; Lukas Ruebbelke: And
this is going to take two parameters, so

64
00:06:27.430 --> 00:06:29.927
selectProjectState.

65
00:06:33.622 --> 00:06:34.615
&gt;&gt; Lukas Ruebbelke: There we go.

66
00:06:34.615 --> 00:06:36.225
And,

67
00:06:40.148 --> 00:06:44.139
&gt;&gt; Lukas Ruebbelke: From projects,

68
00:06:44.139 --> 00:06:49.280
selectProjectIds.

69
00:06:49.280 --> 00:06:52.470
Sort of saying, give us the state and
then we're going to use this

70
00:06:52.470 --> 00:06:56.050
smaller selector down here
to create the real selector.

71
00:06:57.130 --> 00:06:58.439
If we look in here.

72
00:07:02.722 --> 00:07:06.646
&gt;&gt; Lukas Ruebbelke: This returns
a memorized selector and

73
00:07:06.646 --> 00:07:11.406
I'll explain what that
is in just a moment.

74
00:07:11.406 --> 00:07:16.390
So when state changes,
that it runs through

75
00:07:16.390 --> 00:07:20.439
the selector and it value.

76
00:07:20.439 --> 00:07:23.726
So think of this as like well,

77
00:07:23.726 --> 00:07:29.777
like an something changes,
it goes through,

78
00:07:29.777 --> 00:07:36.260
through the selector and
it returns something new.

79
00:07:36.260 --> 00:07:40.520
But, if you make a selection and

80
00:07:40.520 --> 00:07:44.460
state has not changed, it's just
going to return the last known state.

81
00:07:44.460 --> 00:07:46.600
So this is essentially
the memo is station pattern,

82
00:07:46.600 --> 00:07:50.400
I believe or the memo pattern is that
it's saying nothing has changed.

83
00:07:50.400 --> 00:07:52.520
So here's just the latest cache version.

84
00:07:52.520 --> 00:07:57.191
And so this is very, very efficient
that it's only going to re-compute

85
00:07:57.191 --> 00:08:00.724
the data when one or
more of these parameters changed.

86
00:08:00.724 --> 00:08:06.250
So, on one hand it's efficient that if
nothing changes likely to re-compute and

87
00:08:06.250 --> 00:08:07.060
do.

88
00:08:07.060 --> 00:08:10.600
Especially if you are doing
any kind of computation.

89
00:08:10.600 --> 00:08:13.084
It's just gonna give
you the last value but

90
00:08:13.084 --> 00:08:17.310
on the flip side if something does change,
it is going to push up a new value.

91
00:08:17.310 --> 00:08:21.340
So, on one hand because it doesn't,
if it doesn't need to, awesome.

92
00:08:21.340 --> 00:08:23.550
But it will if it needs to, also awesome.

93
00:08:23.550 --> 00:08:24.950
So there's benefits on both sides.

94
00:08:26.520 --> 00:08:30.738
All right, so for the sake of time,
let me just copy these down, and

95
00:08:30.738 --> 00:08:32.442
we'll just adjust these.

96
00:08:35.213 --> 00:08:38.623
&gt;&gt; Lukas Ruebbelke: We'll
go select Entities.

97
00:08:45.004 --> 00:08:47.682
&gt;&gt; Lukas Ruebbelke: Entities, and

98
00:08:47.682 --> 00:08:53.246
we'll go selectAllProjects,

99
00:08:58.024 --> 00:09:00.890
&gt;&gt; Lukas Ruebbelke: Okay.

100
00:09:00.890 --> 00:09:05.510
So we've created some low level
selectors at the feature reducer.

101
00:09:05.510 --> 00:09:11.200
Then in our top level reducer,
we have exposed them for consumption and

102
00:09:11.200 --> 00:09:15.980
this is, these are the selectors
that we will interact directly with.

103
00:09:15.980 --> 00:09:18.863
So then I need to go to the here.

104
00:09:20.970 --> 00:09:24.730
And I need to make this available.

105
00:09:27.683 --> 00:09:31.940
&gt;&gt; Lukas Ruebbelke: And then what
we can do because it is available.

106
00:09:31.940 --> 00:09:36.905
Let's go here, take all of this,

107
00:09:36.905 --> 00:09:41.371
and we are going to replace it.

108
00:09:41.371 --> 00:09:46.910
With select and then selectAllProjects.

109
00:09:46.910 --> 00:09:52.910
Let's see where this coming from.

110
00:09:54.980 --> 00:09:57.274
There we go.

111
00:09:57.274 --> 00:10:01.768
And so now we're no longer having to kind
of manually manipulate the data that's

112
00:10:01.768 --> 00:10:03.231
coming to our component.

113
00:10:03.231 --> 00:10:08.360
Is that using entity adapter you get
some kind of pre built slaughters.

114
00:10:08.360 --> 00:10:11.360
More importantly is that
in our topple over reducer,

115
00:10:11.360 --> 00:10:14.580
that we can handle any kind of
computed data that we want to do.

116
00:10:14.580 --> 00:10:19.930
So that when it hits our component
its in the exact shape that we need,

117
00:10:19.930 --> 00:10:21.110
which is critical.

118
00:10:21.110 --> 00:10:24.030
And so if you ever get to.

119
00:10:24.030 --> 00:10:26.030
This applies to any observable stream.

120
00:10:26.030 --> 00:10:29.310
And if you get to the bottom
of an observable stream,

121
00:10:29.310 --> 00:10:33.790
like you are in your .subscribe block and
you're fiddling with data,

122
00:10:33.790 --> 00:10:37.500
and that handler of like, I've got this
data and then I need to transfer it.

123
00:10:37.500 --> 00:10:39.220
I need to do this stuff.

124
00:10:39.220 --> 00:10:43.852
This is very common when you have
promises cuz there's not a concept of

125
00:10:43.852 --> 00:10:46.690
really chaining operators and promises.

126
00:10:46.690 --> 00:10:51.120
You can change promises and accomplish
that but in observable it's very easy.

127
00:10:51.120 --> 00:10:54.500
And so
what you want is by the end of the stream,

128
00:10:54.500 --> 00:10:59.789
when you hit your subscribe lock or
when you piped in to a template

129
00:10:59.789 --> 00:11:03.600
pipe that your data is in
exact shape that you need.

130
00:11:03.600 --> 00:11:07.450
So that is drop it in, and let it go.

131
00:11:07.450 --> 00:11:11.926
And so something like this just
philosophically, from an architectural

132
00:11:11.926 --> 00:11:16.688
standpoint, makes a lot more sense than
having to kind of fiddle and modify and

133
00:11:16.688 --> 00:11:21.540
transform the data to something I can use,
especially at the component level.

134
00:11:27.800 --> 00:11:31.336
&gt;&gt; Lukas Ruebbelke: And that is Selectors
101, so we're gonna revisit this in

135
00:11:31.336 --> 00:11:34.822
a little bit and I'll show you
how to combine this selector.

136
00:11:34.822 --> 00:11:39.840
But pretty straightforward,
just think of this is queries, and

137
00:11:39.840 --> 00:11:44.010
so you're allowed to query this slice of
your data which is exactly, especially

138
00:11:44.010 --> 00:11:48.850
when at the low level we're saying,
I wanna get just the select project ID.

139
00:11:48.850 --> 00:11:52.548
And then you're starting to filter
this up, and compose these, and

140
00:11:52.548 --> 00:11:54.795
do slightly more sophisticated things.

