WEBVTT

1
00:00:00.280 --> 00:00:00.800
&gt;&gt; Lukas Ruebbelke: With that said,

2
00:00:00.800 --> 00:00:05.910
does anybody have any questions
about what we're doing?

3
00:00:05.910 --> 00:00:09.776
With an event coming in, the asynchronous
thing being captured by the effect.

4
00:00:09.776 --> 00:00:11.546
And then once it's done,

5
00:00:11.546 --> 00:00:16.942
it's basically just patching a new action
event to be captured in the reducer.

6
00:00:19.705 --> 00:00:20.766
&gt;&gt; Lukas Ruebbelke: Yes?
&gt;&gt; Speaker 2: The question,

7
00:00:20.766 --> 00:00:21.990
how would handle that sequence?

8
00:00:21.990 --> 00:00:24.430
So say you had to go to one
service to get it then,

9
00:00:24.430 --> 00:00:27.150
and then call another service,
and call another.

10
00:00:27.150 --> 00:00:29.170
Like so you have like three in a row and

11
00:00:29.170 --> 00:00:32.190
they're always serial,
how would you handle that?

12
00:00:32.190 --> 00:00:33.650
&gt;&gt; Lukas Ruebbelke: So,
very good question.

13
00:00:35.520 --> 00:00:38.650
Now let's say, and
I've done this, like AddProject.

14
00:00:38.650 --> 00:00:40.530
Instead, what I wanna do is rehydrate.

15
00:00:42.460 --> 00:00:46.920
So I want to add, especially if you
have more than one person working on it.

16
00:00:46.920 --> 00:00:51.440
And you might say, I'm gonna create this
but because I'm mutating the database.

17
00:00:51.440 --> 00:00:54.716
And I know that there's some changes,
I just want to go ahead and

18
00:00:54.716 --> 00:00:56.770
do a refresh which is viable.

19
00:00:56.770 --> 00:01:00.250
What I would do down here
is instead of saying, okay,

20
00:01:00.250 --> 00:01:03.840
I'm going to dispatch, so
add projects, so we've added it.

21
00:01:03.840 --> 00:01:07.050
I would do, new LoadProjects.

22
00:01:08.790 --> 00:01:12.400
And so now what happens,
you create the project.

23
00:01:14.310 --> 00:01:18.800
So it comes in, it completes, and
then it dispatches a new action

24
00:01:19.930 --> 00:01:24.530
which then gets picked up over here and
does something else.

25
00:01:24.530 --> 00:01:28.060
And so now this is the beauty,
remember we talked about managing state,

26
00:01:28.060 --> 00:01:29.980
control flow and code volume.

27
00:01:29.980 --> 00:01:35.190
And this is a really powerful
way to sequence events together.

28
00:01:35.190 --> 00:01:38.340
And what's nice is that this is happening

29
00:01:38.340 --> 00:01:41.680
in one place like the load
project sequence.

30
00:01:41.680 --> 00:01:46.220
But then, I can put that in
the end of like add projects.

31
00:01:46.220 --> 00:01:50.630
And so now, and you don't even need
to do like asynchronous thing but

32
00:01:50.630 --> 00:01:55.180
you can just essentially have at
the end of your effect sequence,

33
00:01:55.180 --> 00:01:58.956
dispatch another action which gets
picked up by a new effect sequence.

34
00:01:58.956 --> 00:01:59.600
And, you know,

35
00:01:59.600 --> 00:02:05.250
start to stack these kind of Standalone
encapsulated pieces of control flow.

36
00:02:05.250 --> 00:02:09.320
So in my mind that if the reducer and
the storage for

37
00:02:09.320 --> 00:02:14.690
state management affects are there for
flow of control.

38
00:02:16.420 --> 00:02:17.630
So, it's a very good question and

39
00:02:17.630 --> 00:02:21.140
that's something that I've done with
actually sequence events together.

40
00:02:21.140 --> 00:02:22.725
Where I've chained like two or
three of them together.

41
00:02:28.382 --> 00:02:30.711
&gt;&gt; Lukas Ruebbelke: Any other questions,
what does everybody think about this,

42
00:02:30.711 --> 00:02:31.260
pretty neat?

43
00:02:33.230 --> 00:02:37.200
Think it's pretty cool, especially now
our services, they're doing one thing.

44
00:02:37.200 --> 00:02:39.730
Like our HTTP service,
they're making server side calls.

45
00:02:41.190 --> 00:02:49.690
Then, and so I will show something else is
that if we look in the projects service,

46
00:02:49.690 --> 00:02:55.220
possibly what I may even do is you see how
here we're kind of fiddling around and

47
00:02:55.220 --> 00:03:01.450
this is okay but more than likely I
would move this into an effect as well.

48
00:03:01.450 --> 00:03:06.980
And so if I were to even take another pass
at this and refactor this, this right here

49
00:03:06.980 --> 00:03:11.669
would more than likely be
moved into an effect because

50
00:03:11.669 --> 00:03:15.450
this is, it's not really necessary,
I can say.

51
00:03:15.450 --> 00:03:17.980
Load the customers then do this and
then just chain them together.

