WEBVTT

1
00:00:00.410 --> 00:00:04.751
&gt;&gt; Lukas Ruebbelke: So hopping into
the code, I believe I'm on master so

2
00:00:04.751 --> 00:00:11.268
I am going to,
&gt;&gt; Lukas Ruebbelke: Checkout start.

3
00:00:18.743 --> 00:00:19.447
&gt;&gt; Lukas Ruebbelke: Here we go.

4
00:00:28.659 --> 00:00:30.520
&gt;&gt; Lukas Ruebbelke: We're
not gonna save this.

5
00:00:30.520 --> 00:00:35.530
All right, so let's start, and let's
just look at the projects and component.

6
00:00:35.530 --> 00:00:41.460
And we're not going to
change a lot of this.

7
00:00:43.500 --> 00:00:46.830
Or rather everything underneath
of the projects component itself.

8
00:00:46.830 --> 00:00:50.120
So I'll talk about some
architecture here in a moment.

9
00:00:50.120 --> 00:00:55.150
But everything that we're doing is going
to happen in the container component.

10
00:00:55.150 --> 00:00:57.880
And so
we're going to leave the children, or

11
00:00:57.880 --> 00:00:59.935
the presentation components
completely alone, so

12
00:00:59.935 --> 00:01:05.000
insomuch of this is we are only going to
be refactoring the project component.

13
00:01:05.000 --> 00:01:09.100
So, I'm going to start this up and
while that is going.

14
00:01:10.175 --> 00:01:14.717
Let's look at this, so where we left

15
00:01:14.717 --> 00:01:19.757
this off yesterday is we have a project

16
00:01:19.757 --> 00:01:25.279
service that is making basic ACTP calls.

17
00:01:25.279 --> 00:01:30.214
And so you'll see what happen is you'll
call the service and it'll return

18
00:01:30.214 --> 00:01:35.226
the pay load and you'll either in store
this in the service or so you'll call

19
00:01:35.226 --> 00:01:40.265
ACTP it'll store it in the service or
it'll you can put it in the component.

20
00:01:40.265 --> 00:01:45.591
The problem is that if we go
back to the projects component,

21
00:01:45.591 --> 00:01:50.491
that what happens is we pull
this into this component if

22
00:01:50.491 --> 00:01:54.440
we need to use this data somewhere else.

23
00:01:54.440 --> 00:01:59.890
So, for instance, what if you wanted
to maybe go to a home screen.

24
00:01:59.890 --> 00:02:05.760
And it also needed this project's
collection that we're using over here.

25
00:02:05.760 --> 00:02:10.550
Well because this is stored in
the project's component in this case,

26
00:02:11.850 --> 00:02:15.230
that we would essentially have
to pull that data down and

27
00:02:15.230 --> 00:02:20.120
get like a another collection and
store this in home.

28
00:02:20.120 --> 00:02:26.080
Now what happens if in home somebody
makes a change to that collection?

29
00:02:26.080 --> 00:02:30.836
Well of the sudden now you diverge and you
no longer have a single source of truth.

30
00:02:30.836 --> 00:02:39.525
And so just as shared mutable
state is really, really bad.

31
00:02:39.525 --> 00:02:46.540
Having multiple states
is also sub optimal.

32
00:02:46.540 --> 00:02:49.120
The reason being is that if
something changes over here,

33
00:02:50.250 --> 00:02:51.170
how do you change it over here?

34
00:02:51.170 --> 00:02:54.930
And so this is a very common occurrence,
when you have, for instance,

35
00:02:54.930 --> 00:02:57.500
two components that have the same data.

36
00:02:57.500 --> 00:03:00.960
And one needs to change it here and

37
00:03:00.960 --> 00:03:04.800
either need to find a way to
communicate that it changed or

38
00:03:04.800 --> 00:03:10.320
you need to coordinate the changes so
that you don't blow it up over here.

39
00:03:10.320 --> 00:03:14.760
This can only go up to ten,
this goes up to 11, you have problems.

40
00:03:14.760 --> 00:03:19.810
And so
one of the core tenants] of Redux and

41
00:03:19.810 --> 00:03:26.870
NGRX is that north state
is in a single place.

42
00:03:26.870 --> 00:03:31.830
And so all your state goes
into a single state free so

43
00:03:31.830 --> 00:03:35.020
now I'm actually taking,
going from every service.

44
00:03:35.020 --> 00:03:37.230
Taking all of that state,
every component and

45
00:03:37.230 --> 00:03:41.560
now you put it into a single object graph.

46
00:03:41.560 --> 00:03:43.410
And so all your data is in one place.

47
00:03:43.410 --> 00:03:45.550
So remember I talked
about state management?

48
00:03:45.550 --> 00:03:48.370
Flow of control and code volume.

49
00:03:48.370 --> 00:03:50.830
So now imagine just conceptually,

50
00:03:52.900 --> 00:03:57.650
how much easier is it to manage state,
when all your state is in a single place

51
00:03:57.650 --> 00:04:01.800
all of a sudden that becomes a lot
easier to work with mentally.

52
00:04:01.800 --> 00:04:06.500
Not only that is imagine all
the code across your services and

53
00:04:06.500 --> 00:04:11.990
your components used to manage and
fetch those pieces of state.

54
00:04:11.990 --> 00:04:15.280
All of a sudden now that's condensed and

55
00:04:16.430 --> 00:04:21.480
if it's in only one place then you're not
having to look over here, look over here,

56
00:04:21.480 --> 00:04:24.020
look over here but
you're pulling it from one place.

57
00:04:25.160 --> 00:04:28.840
And so now your flow of
control becomes very simple.

58
00:04:30.220 --> 00:04:34.780
And so already we're seeing just by
putting state management in a single place

59
00:04:34.780 --> 00:04:39.380
that your entire application then can
pull state from, state management becomes

60
00:04:39.380 --> 00:04:44.510
simpler flow of control becomes simpler
and your code volume starts to shrink.

61
00:04:45.590 --> 00:04:50.460
And so with that in mind
single source of truth or

62
00:04:50.460 --> 00:04:56.400
store that now we get
data from the store so

63
00:04:56.400 --> 00:05:02.308
it state flows down and when something
happens it flows back up And so

64
00:05:02.308 --> 00:05:09.390
I will kind of talk about these core
pieces as we start to build this out.

65
00:05:09.390 --> 00:05:14.110
So let's go and let's do a quick tour

66
00:05:14.110 --> 00:05:18.130
of the application and
where we're going to be working out of.

67
00:05:18.130 --> 00:05:24.950
So if you into the lib that there is a new
folder in here and, it's the state folder.

68
00:05:24.950 --> 00:05:27.630
And so you could possibly organize,

69
00:05:27.630 --> 00:05:31.611
this slightly different
depending on how you do this.

70
00:05:31.611 --> 00:05:35.773
So typically, possibly in a lib I might
actually have this services folder and

71
00:05:35.773 --> 00:05:38.620
I put my services feature
organised that by feature.

72
00:05:39.670 --> 00:05:43.120
And in this case we have
the state folder and

73
00:05:43.120 --> 00:05:48.440
we have customers and projects.

74
00:05:48.440 --> 00:05:54.819
And then within that also we
have this top level index.ts.

75
00:05:54.819 --> 00:05:58.187
And so just to explain the pieces here,

76
00:05:58.187 --> 00:06:02.882
we have a very simple example
with the customers just so

77
00:06:02.882 --> 00:06:06.370
we can see the pieces as we build the dow.

78
00:06:07.460 --> 00:06:14.530
So in our index dot T S,
we are producing a top level reducer.

79
00:06:15.900 --> 00:06:19.470
And so, under the hood we are saying,

80
00:06:20.570 --> 00:06:24.170
based on this reducer,
create application state.

81
00:06:24.170 --> 00:06:25.780
And so you notice even here,

82
00:06:25.780 --> 00:06:32.320
that we are defining the shape of your
application state in an interface.

83
00:06:32.320 --> 00:06:34.780
And then we are defining a reducer.

84
00:06:36.140 --> 00:06:40.450
So, a reducer takes some action,
it performs some calculation and

85
00:06:40.450 --> 00:06:44.600
then produces new state
which we're saying this is

86
00:06:44.600 --> 00:06:48.540
going to adhere to this
application stake here.

87
00:06:48.540 --> 00:06:54.520
And then as we start to build this out,
we can start to combine these reducers to

88
00:06:55.860 --> 00:07:00.160
organizer state into various levels or
features.

89
00:07:00.160 --> 00:07:04.550
So in this case customers is
the initial feature that we have.

90
00:07:04.550 --> 00:07:08.900
So all of the customers data
is in the application store.

91
00:07:08.900 --> 00:07:15.110
And the only way that we can access it,
or mutate it, is in or through a reducer.

92
00:07:16.270 --> 00:07:21.870
Which, we then come in to our core,
or rather our state module.

93
00:07:23.620 --> 00:07:30.850
And then we say store module for root,
and then we pass in the reducers.

94
00:07:30.850 --> 00:07:34.690
And so what this is doing, this is
telling the rest of the application

95
00:07:34.690 --> 00:07:37.260
that this is where
the state's gonna pull from.

96
00:07:37.260 --> 00:07:44.898
And this is how you are going
to access it, via the reducers.

97
00:07:44.898 --> 00:07:49.090
So if we go into the projects this is
what we are going to be building out.

98
00:07:49.090 --> 00:07:54.403
And the first thing that
we'll build out is a basic

99
00:07:54.403 --> 00:07:59.223
reducer and more so
initializing the store.

100
00:07:59.223 --> 00:08:04.160
So this is like ground,
like ground one or step one, and

101
00:08:04.160 --> 00:08:10.674
this is the first thing that you need
to do when you are integrating in GRX,

102
00:08:10.674 --> 00:08:17.110
so Is I'm doing this all again continue
to talk about some of the pieces.

103
00:08:17.110 --> 00:08:19.565
So if somebody's unfamiliar with Redux,

104
00:08:19.565 --> 00:08:22.710
I'll try to offer a helpful
commentary along the way.

105
00:08:26.670 --> 00:08:32.850
There are as well some additional snippets
in here, so one, some initial state.

106
00:08:32.850 --> 00:08:37.710
And then we have some
immutable operations here

107
00:08:37.710 --> 00:08:41.910
that we'll hook into our reducers
as we start to build the cell.

108
00:08:41.910 --> 00:08:46.580
The main point is that
everyone of these methods

109
00:08:46.580 --> 00:08:49.960
are performing an immutable operation.

110
00:08:49.960 --> 00:08:53.702
And so once we start to build out
the reducers, I'll explain how and

111
00:08:53.702 --> 00:08:57.589
why these are immutable if somebody's
maybe not familiar with that.

