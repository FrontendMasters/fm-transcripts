WEBVTT

1
00:00:00.470 --> 00:00:06.158
&gt;&gt; Lukas Ruebbelke: All right,
so we built out a very

2
00:00:06.158 --> 00:00:13.973
basic reducer that doesn't do a whole lot.

3
00:00:13.973 --> 00:00:20.397
So let's take some time and
build this out.

4
00:00:20.397 --> 00:00:26.150
And extend that functionality so
that instead of just returning state,

5
00:00:26.150 --> 00:00:31.245
we can see how it can manipulate
state using a mutable operations

6
00:00:31.245 --> 00:00:36.244
to update the application state and
then communicate that back

7
00:00:36.244 --> 00:00:40.890
to your components, or
services into your application.

8
00:00:40.890 --> 00:00:48.181
So you'll notice here that one
of the parameters is action.

9
00:00:48.181 --> 00:00:54.622
So an action consist of, well,
the interface for it is one property.

10
00:00:54.622 --> 00:00:59.305
And action will always,
always have a type.

11
00:00:59.305 --> 00:01:02.913
And more often than not,
it will also have a payload.

12
00:01:02.913 --> 00:01:07.598
But there are times where you'll have
a certain action that it doesn't need

13
00:01:07.598 --> 00:01:11.785
any additional information, so
for instance like load projects.

14
00:01:11.785 --> 00:01:16.817
Well, it's just a command link,
it's a trigger for an event.

15
00:01:16.817 --> 00:01:23.993
But within the action type here, you have
a switch statement that looks at that and

16
00:01:23.993 --> 00:01:28.820
then it will perform
some type of operation.

17
00:01:28.820 --> 00:01:34.030
Now what I want to advise
everybody from doing, and

18
00:01:34.030 --> 00:01:40.694
this is certainly, I think,
tempting as I see this quite often,

19
00:01:40.694 --> 00:01:45.553
is that,
let's say you have a state of create.

20
00:01:45.553 --> 00:01:49.430
And then within this,

21
00:01:49.430 --> 00:01:56.365
performing,
&gt;&gt; Lukas Ruebbelke: Some

22
00:01:56.365 --> 00:01:59.899
kind of logic and then nesting it.

23
00:01:59.899 --> 00:02:04.887
And so, I have seen reducers, and
I may be even, when I first started,

24
00:02:04.887 --> 00:02:09.213
I would write reducers like this
where you would have a case and

25
00:02:09.213 --> 00:02:12.308
then I would have this
nested logic in here.

26
00:02:12.308 --> 00:02:16.140
Don't do that.

27
00:02:16.140 --> 00:02:18.304
Trust me, it's gonna be painful.

28
00:02:18.304 --> 00:02:21.049
Is that in your reducer,

29
00:02:21.049 --> 00:02:26.147
what you want to do is
capture the action type,

30
00:02:26.147 --> 00:02:32.050
the case and
then delegate to a stand alone function.

31
00:02:34.844 --> 00:02:36.357
&gt;&gt; Lukas Ruebbelke: Why would you do this?

32
00:02:36.357 --> 00:02:41.660
Because it is testable.

33
00:02:41.660 --> 00:02:47.525
So when something is nested, nested logic
is, I think, in my mind, one of the three

34
00:02:47.525 --> 00:02:52.750
core, if you have an access of evil for
testing, nested logic is in there.

35
00:02:52.750 --> 00:02:53.413
Maybe two.

36
00:02:53.413 --> 00:02:56.900
Hidden states is the first one.

37
00:02:56.900 --> 00:02:59.889
But nested logic I'd say
is probably the second.

38
00:02:59.889 --> 00:03:01.664
And stick around to the end,
I'll tell you the third one.

39
00:03:01.664 --> 00:03:08.230
All right, so we want to create something.

40
00:03:08.230 --> 00:03:15.817
So what we're going to do is we're
going to return a new state object.

41
00:03:15.817 --> 00:03:21.619
So with every case, you're going
to perform semilunar logic and

42
00:03:21.619 --> 00:03:23.735
then return new state.

43
00:03:23.735 --> 00:03:28.550
So the selectedProjectId,
we're not gonna do anything with that.

44
00:03:31.978 --> 00:03:37.765
&gt;&gt; Lukas Ruebbelke: Selected,
I think VS Code is trolling me again.

45
00:03:37.765 --> 00:03:43.550
But on the other hand, projects,
we do wanna do something with this.

46
00:03:43.550 --> 00:03:48.173
And so you'll notice up here,
I've created this method,

47
00:03:48.173 --> 00:03:53.172
createProject, and so
I'm just gonna hook this up real quick.

48
00:03:55.006 --> 00:03:57.782
&gt;&gt; Lukas Ruebbelke: We'll
go state.projects, so

49
00:03:57.782 --> 00:04:02.213
it's going to take
essentially all the projects.

50
00:04:02.213 --> 00:04:06.457
And then we're also going to pass in

51
00:04:06.457 --> 00:04:11.556
the project we want to create, all right.

52
00:04:18.214 --> 00:04:23.526
&gt;&gt; Lukas Ruebbelke: And so let me,
just because this is kind of a cut, copy,

53
00:04:23.526 --> 00:04:29.080
and paste operation,
I'll do update and delete as well.

54
00:04:32.005 --> 00:04:34.831
&gt;&gt; Lukas Ruebbelke: Update and delete.

55
00:04:34.831 --> 00:04:41.409
updateProject and,

56
00:04:46.587 --> 00:04:50.140
&gt;&gt; Lukas Ruebbelke: deleteProject, okay.

57
00:04:50.140 --> 00:04:54.490
So for creating, updating and

58
00:04:54.490 --> 00:04:59.006
deleting,
&gt;&gt; Lukas Ruebbelke: We're

59
00:04:59.006 --> 00:05:02.939
taking in to account those
three possible action types.

60
00:05:02.939 --> 00:05:06.859
Now, let's go up here and
look at these methods real quick.

61
00:05:09.994 --> 00:05:13.176
&gt;&gt; Lukas Ruebbelke: Every operation
that you do in your reducer needs to

62
00:05:13.176 --> 00:05:14.143
be immutable.

63
00:05:14.143 --> 00:05:19.919
Now, at first, that was a little like,

64
00:05:19.919 --> 00:05:22.491
that sounds hard.

65
00:05:22.491 --> 00:05:24.197
You're using a four syllable word.

66
00:05:24.197 --> 00:05:27.326
How do I do that?

67
00:05:27.326 --> 00:05:31.892
And so one, so
I'm just gonna walk through this is

68
00:05:31.892 --> 00:05:35.602
a mutable operation primer if you will.

69
00:05:35.602 --> 00:05:42.334
It's very, very common, or
at least I have done this many,

70
00:05:42.334 --> 00:05:48.276
many times of going something
like projects.push,

71
00:05:48.276 --> 00:05:52.249
push or put a project into an array.

72
00:05:52.249 --> 00:05:54.535
So I wanna add something to an array.push.

73
00:05:56.767 --> 00:05:57.928
&gt;&gt; Lukas Ruebbelke: Incredibly common.

74
00:05:57.928 --> 00:06:00.372
The problem is you're mutating that array.

75
00:06:00.372 --> 00:06:02.910
So if you wanted to get that back out,
how would you do that?

76
00:06:04.883 --> 00:06:09.815
&gt;&gt; Lukas Ruebbelke: Instead what
you could do is something like

77
00:06:09.815 --> 00:06:13.692
projects = projects.concat.

78
00:06:13.692 --> 00:06:17.697
And if you go look in the MDN, so the
Mozilla Developer Network, so they have

79
00:06:17.697 --> 00:06:21.526
a pretty good set of documentation for
a lot of these JavaScript things.

80
00:06:21.526 --> 00:06:27.466
Is it say concat returns a new, so
anytime you're looking at documentation,

81
00:06:27.466 --> 00:06:32.056
it returns a new,
it's a pretty good indication that this is

82
00:06:32.056 --> 00:06:35.665
an immutable operation
you're working with.

83
00:06:35.665 --> 00:06:40.226
So what we're doing is we're saying
take this array and this value and

84
00:06:40.226 --> 00:06:43.647
basically put them together and
return a new array.

85
00:06:43.647 --> 00:06:49.640
What you can also do is a shorthand
version of this saying here's a new array.

86
00:06:49.640 --> 00:06:54.430
I want to spread
the existing projects array

87
00:06:54.430 --> 00:06:59.097
into that and
then I want to add in project.

88
00:06:59.097 --> 00:07:02.147
And so if you look here,
this is exactly what is happening.

89
00:07:06.569 --> 00:07:10.318
&gt;&gt; Lukas Ruebbelke: So when you need to
update something in a collection, and

90
00:07:10.318 --> 00:07:14.302
typically I'd run through and
I would usually slice it out or

91
00:07:14.302 --> 00:07:17.367
basically chop it out and
put the new thing in.

92
00:07:17.367 --> 00:07:20.740
Or usually I would go through the array
and I'd find the thing I wanted to update

93
00:07:20.740 --> 00:07:23.311
and then just start fiddling with it,
which is even worse.

94
00:07:23.311 --> 00:07:28.730
Well, using projects.map
again returns a new array

95
00:07:28.730 --> 00:07:33.669
after performing this
function on every element

96
00:07:33.669 --> 00:07:38.496
in that array,
is I'm loofing over projects.

97
00:07:38.496 --> 00:07:43.728
And I'm looking for
the project that matches my criteria and

98
00:07:43.728 --> 00:07:48.755
then using object.assign,
which creates a new object,

99
00:07:48.755 --> 00:07:52.871
I'm saying go find
the object I want to update.

100
00:07:52.871 --> 00:07:56.523
Create a brand new object and
basically clone this on to it and

101
00:07:56.523 --> 00:07:58.680
then put that in the array instead.

102
00:07:58.680 --> 00:08:03.918
So we're now combining two immutable
operations to update a collection.

103
00:08:03.918 --> 00:08:08.150
Finally, delete project, if you want to
delete something out of an array this is

104
00:08:08.150 --> 00:08:10.280
even easier, just projects.filter.

105
00:08:10.280 --> 00:08:17.341
So again, returns a new array minus
everything that fails this condition here.

106
00:08:17.341 --> 00:08:23.926
So depending on what I may be doing is,
it would be unreasonable for

107
00:08:23.926 --> 00:08:28.864
me to have to do some kind
of immutable operation or

108
00:08:28.864 --> 00:08:32.171
collection manipulation here.

109
00:08:32.171 --> 00:08:33.935
Once we introduced entity,

110
00:08:33.935 --> 00:08:39.450
this is actually gonna come a lot simpler
where they are doing that under the hood.

111
00:08:39.450 --> 00:08:42.835
But for now, I've created these so
that you could look and

112
00:08:42.835 --> 00:08:46.581
see here is kind of the three
most common immutable operations.

113
00:08:46.581 --> 00:08:50.227
And so what we're simply doing
now is saying, I wanna create

114
00:08:50.227 --> 00:08:54.530
a project which returns a new projects
array, that project at the end.

115
00:08:54.530 --> 00:08:58.718
This one is a new projects array that has
a new project where the one is that we

116
00:08:58.718 --> 00:08:59.795
wanted to update.

117
00:08:59.795 --> 00:09:02.793
And this one has a new array minus
the one that we wanted to leave.

118
00:09:02.793 --> 00:09:09.058
So immutable primer,
that was a bonus subject.

119
00:09:09.058 --> 00:09:13.085
And then from here let's do one more.

120
00:09:13.085 --> 00:09:18.149
And we're going to do case,
and this will be select.

121
00:09:18.149 --> 00:09:24.983
And we're going to return,
again, a new object.

122
00:09:24.983 --> 00:09:30.562
But in this case, we do want to
update the selectedProjectId,

123
00:09:30.562 --> 00:09:34.262
so that's going to be action.payload.

124
00:09:34.262 --> 00:09:39.977
And projects are going to
stay exactly the same.

125
00:09:43.197 --> 00:09:47.822
&gt;&gt; Speaker 2: So what you just showed,
that kind of sounds like peer pipes and

126
00:09:47.822 --> 00:09:49.100
Angular.

127
00:09:49.100 --> 00:09:50.139
&gt;&gt; Lukas Ruebbelke: Yep.
&gt;&gt; Speaker 2: We have to create

128
00:09:50.139 --> 00:09:50.919
a new array.

129
00:09:50.919 --> 00:09:53.060
&gt;&gt; Lukas Ruebbelke: Yep,
and so the comment was,

130
00:09:53.060 --> 00:09:58.207
is that what I describing is something
you would use in like a peer pipe.

131
00:09:58.207 --> 00:10:02.853
So we're talking about this in
the context of ngrx and Redux but,

132
00:10:02.853 --> 00:10:08.780
I use these operations all the time in
conservable pipes, or observable streams.

133
00:10:08.780 --> 00:10:12.190
So if I have an observable operation
where I'm stacking things,

134
00:10:12.190 --> 00:10:14.244
I use them all the time, filter, map.

135
00:10:14.244 --> 00:10:19.709
And so generally, it's kind of to
the point now if I'm mutating state,

136
00:10:19.709 --> 00:10:24.367
there are times where I will do
it at a component level cuz it's

137
00:10:24.367 --> 00:10:27.874
like at that point it's
presentation state.

138
00:10:27.874 --> 00:10:32.195
But for
application state if I start to be like,

139
00:10:32.195 --> 00:10:35.554
this is a mutable operation, stop.

140
00:10:35.554 --> 00:10:40.294
And what's interesting is that there's
a package that is store freeze,

141
00:10:40.294 --> 00:10:44.280
whatever, you can actually
freeze your application store.

142
00:10:44.280 --> 00:10:48.867
And so it's not recommended
you do this in production.

143
00:10:48.867 --> 00:10:52.687
But you can freeze it while you're
developing, so if you ever,

144
00:10:52.687 --> 00:10:54.898
am I mutating something, yes or no?

145
00:10:54.898 --> 00:10:58.544
And I think possibly,
maybe Jafar Hussein did that, or

146
00:10:58.544 --> 00:11:02.354
I know he was talking about he
recreated a version of that.

147
00:11:03.839 --> 00:11:04.978
&gt;&gt; Lukas Ruebbelke: Yes?

148
00:11:04.978 --> 00:11:09.906
&gt;&gt; Speaker 2: This may be a little bit
of a tangent, but one thing that using

149
00:11:09.906 --> 00:11:14.836
type script sort of brings out
here in these producers is that

150
00:11:14.836 --> 00:11:20.890
the payload is something you
don't really know anything about.

151
00:11:20.890 --> 00:11:26.175
So in the select case it's just an integer
or a string, actually, I guess for the ID.

152
00:11:26.175 --> 00:11:32.032
And then in the create case,
the payload is actually a project object.

153
00:11:32.032 --> 00:11:33.734
Is there any-
&gt;&gt; Lukas Ruebbelke: You're getting ahead

154
00:11:33.734 --> 00:11:35.210
of me there a little bit.

155
00:11:35.210 --> 00:11:36.807
&gt;&gt; Speaker 2: Am I?
Okay, good, I'm glad.

156
00:11:36.807 --> 00:11:39.250
&gt;&gt; Lukas Ruebbelke: So
let me just do it like an asterisk here.

157
00:11:39.250 --> 00:11:42.632
So we're doing this incrementally and
we're making some concessions.

158
00:11:42.632 --> 00:11:46.105
And so, we'll be starting very slow.

159
00:11:46.105 --> 00:11:50.902
For instance, this,
actually using actions,

160
00:11:50.902 --> 00:11:55.140
types, it just strings, not good.

161
00:11:55.140 --> 00:11:57.981
And so this is a very loosely typed,
kind of a loosey goosey,

162
00:11:57.981 --> 00:11:59.782
like we're gonna build into this so.

163
00:11:59.782 --> 00:12:04.248
I think even, yeah, the next thing I get
into is like, okay, we're dispatching

164
00:12:04.248 --> 00:12:08.162
actions is generic objects and
don't do that, we have typed scripts.

165
00:12:08.162 --> 00:12:10.878
So you're absolutely right.

166
00:12:10.878 --> 00:12:14.988
So we are going to start out, and you're
going to see some things that is like this

167
00:12:14.988 --> 00:12:17.345
is not how we would do it in production,
but for

168
00:12:17.345 --> 00:12:20.561
the sake of a narrative that
we're introducing these in step.

