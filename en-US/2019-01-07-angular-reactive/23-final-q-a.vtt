WEBVTT

1
00:00:00.730 --> 00:00:03.820
&gt;&gt; Speaker 1: If we need to
access a selector from an effect,

2
00:00:03.820 --> 00:00:07.408
what is the best way to ensure we have
the last state of the store there?

3
00:00:07.408 --> 00:00:09.952
&gt;&gt; Lukas: With the latest.

4
00:00:13.480 --> 00:00:21.080
&gt;&gt; Lukas: And so you can access and
so I really need to do this.

5
00:00:21.080 --> 00:00:29.360
But in your effect, you can say,
take from the stored directly and

6
00:00:29.360 --> 00:00:31.840
you can say, give me this, give me,
I believe it's with latest.

7
00:00:32.880 --> 00:00:37.640
So I would have to look that up but
I've had to do that once or twice.

8
00:00:37.640 --> 00:00:42.890
And because it's an observable stream,
then it's the width latest operator,

9
00:00:42.890 --> 00:00:44.442
if I'm not mistaken.

10
00:00:44.442 --> 00:00:48.110
&gt;&gt; Speaker 1: I know that cache could be
implemented with interceptors but here,

11
00:00:48.110 --> 00:00:50.860
the store is kind of a cache, am I right?

12
00:00:53.330 --> 00:00:53.870
&gt;&gt; Lukas: Yes.

13
00:00:56.290 --> 00:01:00.410
And so, one, on some level,
cache is already being

14
00:01:02.530 --> 00:01:05.450
implemented on at a selector level.

15
00:01:05.450 --> 00:01:10.730
But for instance, if you're like,
go fetch this thing but

16
00:01:10.730 --> 00:01:14.600
if it already exist then
don't go fetch the thing.

17
00:01:14.600 --> 00:01:18.950
So this would be like, I'm going to login
and I'm going to get my user profile and

18
00:01:18.950 --> 00:01:21.330
I don't need to do it again.

19
00:01:22.660 --> 00:01:27.970
Because I have it once and so
if that exists, then go ahead and do that.

20
00:01:27.970 --> 00:01:32.597
So part of the problem is one of the
reasons why a lot of times you have to go

21
00:01:32.597 --> 00:01:37.614
and call again and again because your
state, my user profiles over here but

22
00:01:37.614 --> 00:01:38.946
I need it over here.

23
00:01:38.946 --> 00:01:41.974
And so now by saying,
I've done this once, it's in the store,

24
00:01:41.974 --> 00:01:43.500
I don't need to go get it again.

25
00:01:45.290 --> 00:01:49.300
And so typically I find by
having a single source of truth,

26
00:01:49.300 --> 00:01:51.685
that really cuts down all the need for

27
00:01:51.685 --> 00:01:54.840
cache because if it exists, then it would
just select it and you would get it.

28
00:01:55.840 --> 00:02:00.570
But what you could do is for
instance, there is some sequence or

29
00:02:00.570 --> 00:02:06.050
maybe it doesn't exist is that you
could say, hey, dispatch this event.

30
00:02:07.560 --> 00:02:11.640
If there's nothing in the store,
go make the call and then do it.

31
00:02:11.640 --> 00:02:13.650
If not, just pass it through.

32
00:02:13.650 --> 00:02:17.938
So you could definitely implement some
caching strategy and some logic at,

33
00:02:17.938 --> 00:02:22.103
I would say, probably the effect level
is probably where I would do that.

34
00:02:27.110 --> 00:02:28.640
&gt;&gt; Lukas: Yes.

35
00:02:28.640 --> 00:02:30.310
&gt;&gt; Speaker 3: While we're
talking about effects,

36
00:02:30.310 --> 00:02:32.857
&gt;&gt; Speaker 3: I guess the magic with

37
00:02:32.857 --> 00:02:39.084
the effects is that fetch and
pessimistic update and

38
00:02:39.084 --> 00:02:46.060
all the data persistence
stuff returns an observable.

39
00:02:46.060 --> 00:02:46.640
&gt;&gt; Lukas: Yeah.

40
00:02:46.640 --> 00:02:52.248
&gt;&gt; Speaker 3: I don't get what
an observable is because it implements

41
00:02:52.248 --> 00:02:57.270
a publication subscription module or
a pattern.

42
00:02:58.910 --> 00:03:03.175
&gt;&gt; Lukas: One, I love observables,
and I think to really do it justice,

43
00:03:03.175 --> 00:03:07.400
we probably would need to well it
is a workshop in Front End Masters.

44
00:03:08.440 --> 00:03:12.112
Jafar Usein is amazing,
probably one of my heroes,

45
00:03:12.112 --> 00:03:15.100
he does a really good job
of talking about that.

46
00:03:15.100 --> 00:03:20.190
But to simplify, this is the 60-second
version of this, is that

47
00:03:21.280 --> 00:03:26.940
an observable is really a combination
of the iterator pattern and

48
00:03:26.940 --> 00:03:32.110
the observer pattern because
their interface is pretty close.

49
00:03:32.110 --> 00:03:37.610
So now within an application,
is that unique data, and

50
00:03:37.610 --> 00:03:40.805
so an observable will actually
provide that data to you and

51
00:03:40.805 --> 00:03:44.070
it will continue to provide
data as it becomes available.

52
00:03:44.070 --> 00:03:47.160
So unlike a promise which is
a single-fire and you're done,

53
00:03:47.160 --> 00:03:52.500
it'll only ever resolve once, the
observable will continue to produce data

54
00:03:52.500 --> 00:03:57.080
until the end of time
hypothetically via a NXT.

55
00:03:57.080 --> 00:04:00.525
So if you think about an iterator,
it's like NXT, NXT, NXT, NXT, NXT, so

56
00:04:00.525 --> 00:04:02.040
it provides the data.

57
00:04:02.040 --> 00:04:03.490
Now the question is, well,

58
00:04:03.490 --> 00:04:07.680
what happens if that data is
available at some indeterminate time?

59
00:04:07.680 --> 00:04:11.160
So using the observer pattern,
you're able to say,

60
00:04:11.160 --> 00:04:15.250
hey, I'm going to subscribe
to this observable string.

61
00:04:16.370 --> 00:04:20.330
And whenever this data is available,
go ahead and push it to me.

62
00:04:20.330 --> 00:04:23.930
So you have essentially
your initial output.

63
00:04:23.930 --> 00:04:26.830
So we think of data or
programming lot of times as input, output,

64
00:04:26.830 --> 00:04:28.840
I'm going to give you something,
you're going to give me something back.

65
00:04:30.010 --> 00:04:37.200
With observables, you flip that around and
data is coming, there is data streaming,

66
00:04:37.200 --> 00:04:42.930
where there's some event that's
producing data that you consume.

67
00:04:42.930 --> 00:04:45.830
So dom events are actually
a really good way to start

68
00:04:45.830 --> 00:04:48.810
to learn observables cuz
they happen all the time.

69
00:04:48.810 --> 00:04:50.270
Move your mouse over the browser,

70
00:04:50.270 --> 00:04:53.190
and whether you know it or not,
there's dom events firing.

71
00:04:53.190 --> 00:04:58.350
So I'm capturing the stream, so your
initial output and then your final input.

72
00:04:58.350 --> 00:05:00.720
And so I want to take this and
I wanna put it over here.

73
00:05:02.200 --> 00:05:04.480
So we'll take this,
we'll move it over here.

74
00:05:04.480 --> 00:05:09.062
So now you have this
encapsulated stream that one

75
00:05:09.062 --> 00:05:13.320
keeps to manage the state
within the stream.

76
00:05:13.320 --> 00:05:17.430
So now you're getting this microcosm but
then you can start to stack these

77
00:05:17.430 --> 00:05:22.130
operators within the stream and
transform your data as you go along.

78
00:05:22.130 --> 00:05:25.330
You even can pose streams together, so

79
00:05:25.330 --> 00:05:30.250
now with an effect being
this asynchronous thing,

80
00:05:30.250 --> 00:05:36.670
is it captures an initial event which is,
hey, this action object was fired.

81
00:05:36.670 --> 00:05:39.450
You're allowed to do any number
of asynchronous things and

82
00:05:39.450 --> 00:05:43.160
at the end of it you're basically
kicking out a new action object.

83
00:05:44.950 --> 00:05:50.629
And the point is is that any time that
action becomes available it'll retrigger.

84
00:05:50.629 --> 00:05:54.300
And then you have all of
the operators in between.

85
00:05:54.300 --> 00:05:59.301
And so I don't think that that's caught on
on React, as far as I know, maybe it has.

86
00:05:59.301 --> 00:06:05.320
&gt;&gt; Speaker 3: Sounds roughly similar to
Reduct Saga, which uses ES6 generators.

87
00:06:05.320 --> 00:06:08.464
You can keep asking it for
a value, and it will-

88
00:06:08.464 --> 00:06:09.090
&gt;&gt; Lukas: Well so

89
00:06:09.090 --> 00:06:10.880
the thing is you never even
have to ask for the value,

90
00:06:10.880 --> 00:06:13.410
it's going to push it to you cuz
you're basically observing it.

91
00:06:14.410 --> 00:06:19.640
And that's where I think, so
I've done a redox implementation

92
00:06:19.640 --> 00:06:24.340
in 1.x, and we had to use normal eventing.

93
00:06:26.110 --> 00:06:28.880
To where the differences with this, or

94
00:06:28.880 --> 00:06:31.770
at least it was there some kind of
event thing baked on the back end.

95
00:06:31.770 --> 00:06:35.560
This is because an observable stream
you're able to just subscribe to it, and

96
00:06:35.560 --> 00:06:39.810
any time data comes then
it just pushes it to you.

97
00:06:39.810 --> 00:06:41.801
&gt;&gt; Speaker 3: Pushes it to
the component that the effect is.

98
00:06:41.801 --> 00:06:44.888
&gt;&gt; Lukas: Or anything that's
subscribed to it, it pushes the so

99
00:06:44.888 --> 00:06:48.033
you'll never have to pull and
it will push but unlike a promise,

100
00:06:48.033 --> 00:06:49.743
it will push in a number of values.

101
00:06:49.743 --> 00:06:52.805
&gt;&gt; Speaker 3: And
then Angular, like the decision

102
00:06:52.805 --> 00:06:57.753
to re-render a component takes
that effect into account.

103
00:06:57.753 --> 00:07:02.363
So if you'd date it in that
[INAUDIBLE] changes then

104
00:07:02.363 --> 00:07:05.560
Angular will rerender your code.

105
00:07:05.560 --> 00:07:08.180
&gt;&gt; Lukas: Right, but what's interesting

106
00:07:08.180 --> 00:07:13.530
is you can defer change
detection to an observable.

107
00:07:13.530 --> 00:07:17.437
So you can say, for this component tree,
I wanna turn off change detection entirely

108
00:07:17.437 --> 00:07:20.420
because anything that's changed
is in the observable strain.

109
00:07:20.420 --> 00:07:24.742
And then what happens once at the end,
once it fires,

110
00:07:24.742 --> 00:07:30.040
then you fire just a change detection,
so this very, very fast.

111
00:07:31.230 --> 00:07:35.200
When you're saying, hey Angular,
you don't have to do change detection.

112
00:07:35.200 --> 00:07:39.870
Which Angular 2 and above, it's gotten
a lot faster and it does a very good job.

113
00:07:39.870 --> 00:07:43.050
But you know what's faster
than doing change detection?

114
00:07:43.050 --> 00:07:44.450
Not doing it at all.

115
00:07:44.450 --> 00:07:45.280
It's just pushing the change detection.

116
00:07:45.280 --> 00:07:48.528
&gt;&gt; Speaker 3: Sure, so that's another win
for your single source of truth is you

117
00:07:48.528 --> 00:07:51.782
only have one place to look to
determine if you need to re-render?

118
00:07:51.782 --> 00:07:52.742
&gt;&gt; Lukas: Yeah.

119
00:07:52.742 --> 00:07:53.702
&gt;&gt; Speaker 3: Cool.

120
00:07:57.520 --> 00:08:01.019
&gt;&gt; Speaker 4: So we don't need to test
a component if we follow this pattern,

121
00:08:01.019 --> 00:08:02.810
like presentation component?

122
00:08:05.230 --> 00:08:10.110
&gt;&gt; Lukas: That sounded almost like
a statement and not a question,

123
00:08:10.110 --> 00:08:15.600
but you still need to test the component,

124
00:08:16.640 --> 00:08:21.770
but if we look at this,
there's not a lot of logic here.

125
00:08:23.330 --> 00:08:25.493
I think if we have more time,
I would actually,

126
00:08:25.493 --> 00:08:29.670
there's ways to abstract this out,
but when it's all said and done.

127
00:08:29.670 --> 00:08:30.990
So let's pretend this is not here.

128
00:08:32.830 --> 00:08:35.395
And let's look at this
component in particular.

129
00:08:43.070 --> 00:08:51.250
&gt;&gt; Lukas: Actually, this would actually
get put in the facade as well.

130
00:08:54.210 --> 00:08:58.317
&gt;&gt; Lukas: But in this component,
show me where the logic is,

131
00:08:58.317 --> 00:09:01.730
any kind of logic that we have.

132
00:09:01.730 --> 00:09:07.900
So no, no, no, no,
there is a piece of logic?

133
00:09:07.900 --> 00:09:14.840
No, and so the surface area to test
this component is very, very small.

134
00:09:16.810 --> 00:09:20.680
But typically when you focus on

135
00:09:22.370 --> 00:09:27.350
testing something, you want to test
that unit and nothing outside of it.

136
00:09:28.400 --> 00:09:31.490
So I could test this component

137
00:09:31.490 --> 00:09:36.520
in the sense of when I create a project or
I called this project.

138
00:09:36.520 --> 00:09:39.780
I'm going to spy on the facade and

139
00:09:39.780 --> 00:09:44.310
make sure that createProject
was fired with this project.

140
00:09:44.310 --> 00:09:47.390
And so this is where spies
come in handy because for

141
00:09:47.390 --> 00:09:53.390
something that is basically delegating
out, there is no logic necessary to test.

142
00:09:53.390 --> 00:09:56.273
But you can say like,
when I call this, it's called this, so

143
00:09:56.273 --> 00:10:00.550
it's ensuring that it's delegating
properly with the right information.

144
00:10:00.550 --> 00:10:07.571
Now from here what I would do is I would
pass in a project without an ID and

145
00:10:07.571 --> 00:10:13.045
I would say, when I called
state project without an ID I

146
00:10:13.045 --> 00:10:18.060
want to make sure that
createProject was called.

147
00:10:18.060 --> 00:10:25.440
So I would spy on createProject,
and then with this project.

148
00:10:25.440 --> 00:10:29.880
And also I could say, also I wanna make
sure that update project was not called.

149
00:10:31.000 --> 00:10:35.680
And so at the component level,
the surface area for

150
00:10:35.680 --> 00:10:38.120
testing at a unit level is very small.

151
00:10:39.284 --> 00:10:44.780
Now end-to-end testing,
this is a lot easier to do now,

152
00:10:44.780 --> 00:10:48.470
but I would recommend having some
broad level end-to-end test.

153
00:10:48.470 --> 00:10:52.470
So typically I think of a user story, so
when you're working with business analysts

154
00:10:52.470 --> 00:10:55.720
and they're saying,
this should do this and this and this.

155
00:10:55.720 --> 00:10:59.020
Well, I think Protractor's okay, but

156
00:10:59.020 --> 00:11:04.180
I think Cypress is the heat,
it is incredibly easy to set up.

157
00:11:04.180 --> 00:11:10.250
And so when you set up everything correct,
especially using a page-object pattern.

158
00:11:10.250 --> 00:11:14.440
So the selector's getting stuff off the
page is, you've already implemented it and

159
00:11:14.440 --> 00:11:15.330
you can reuse it.

160
00:11:15.330 --> 00:11:20.920
Is that you can create, for instance,
Cypress end-to-end test I believe is fast,

161
00:11:20.920 --> 00:11:24.580
is you could almost write a unit test for
it.

162
00:11:24.580 --> 00:11:30.520
And so I think you should have testing but
here I probably would not be so

163
00:11:30.520 --> 00:11:35.530
motivated to do unit testing on it,
maybe some very cursory things.

164
00:11:35.530 --> 00:11:38.530
But where I would be interested and

165
00:11:38.530 --> 00:11:43.402
testing is when we go down to for

166
00:11:43.402 --> 00:11:48.380
instance, the reducer or

167
00:11:48.380 --> 00:11:53.340
the selector, so
I would test reducers and selectors.

168
00:11:53.340 --> 00:11:55.740
Now those are super easy
because we know that

169
00:11:57.430 --> 00:11:59.860
because it has referential transparency.

170
00:11:59.860 --> 00:12:05.075
When I pass in state and an action object,
I'm going to get something else,

171
00:12:05.075 --> 00:12:07.810
you're going to get
something predictable out.

172
00:12:07.810 --> 00:12:11.490
So this a lot of, when I call this,
this is the return, so

173
00:12:11.490 --> 00:12:15.140
you have a clear contract and
it's deterministic.

174
00:12:15.140 --> 00:12:19.210
The same thing with your
selectors is that you can say,

175
00:12:19.210 --> 00:12:21.840
when I pass this in,
this is what I expect out.

176
00:12:23.370 --> 00:12:27.630
And really where it gets tricky, I would
say, probably the hardest part when you're

177
00:12:27.630 --> 00:12:33.740
testing in GRX is back [INAUDIBLE].

178
00:12:33.740 --> 00:12:37.732
Because now you're dealing with
essentially, streams, marbles and

179
00:12:37.732 --> 00:12:39.230
different things like that.

180
00:12:39.230 --> 00:12:43.640
It was a really good question.

181
00:12:43.640 --> 00:12:50.320
So the answer is, yes but focus on the
things that matter in your business logic,

182
00:12:50.320 --> 00:12:55.230
that's well suited, there's a clear
units of code, and those are testable.

183
00:12:56.360 --> 00:12:58.766
So I think even you were talking
about 100% code coverage.

184
00:12:58.766 --> 00:13:02.710
I would say, that's a really nice idea but

185
00:13:02.710 --> 00:13:05.780
you're going to end up writing
a lot of low quality tests.

186
00:13:08.810 --> 00:13:13.120
So focus on where there's actually
units of logic and then test those.

187
00:13:14.550 --> 00:13:18.450
Starting with the most critical things and
then move backwards.

188
00:13:18.450 --> 00:13:23.660
I would rather have a really
good end-to-end test versus

189
00:13:23.660 --> 00:13:29.189
40 marginal unit test but
I've got a 97% co-coverage or

190
00:13:29.189 --> 00:13:34.840
something like that, so
it's always quality over quantity.

191
00:13:40.500 --> 00:13:45.130
&gt;&gt; Speaker 4: What is the purpose of
the index.ts in state module folder?

192
00:13:45.130 --> 00:13:48.500
It contains all kinds of constants.

193
00:13:48.500 --> 00:13:49.000
Is it a helper?

194
00:13:51.490 --> 00:13:57.739
&gt;&gt; Lukas: So
what you're doing in the barrel roll here,

195
00:13:57.739 --> 00:14:02.706
so this top level, not this one, but

196
00:14:02.706 --> 00:14:05.600
this one right here.

197
00:14:07.950 --> 00:14:14.240
So this is exposing your
application state as a whole.

198
00:14:14.240 --> 00:14:18.750
So all of your individual reducers
are now going to be combined

199
00:14:18.750 --> 00:14:20.320
into a single action reducer map.

200
00:14:22.210 --> 00:14:25.200
And so
your entire shape of your application

201
00:14:28.370 --> 00:14:30.440
needs to be combined somewhere.

202
00:14:30.440 --> 00:14:37.180
So the most logical place is
that if are within your state

203
00:14:37.180 --> 00:14:43.830
management folder here,
I'll just zoom in on this.

204
00:14:43.830 --> 00:14:47.900
Typically, and there's some different
opinions on this, I like to just have

205
00:14:47.900 --> 00:14:50.610
a state folder and then I put
the features in that I'm managing.

206
00:14:52.080 --> 00:14:53.510
They seem to be combined somewhere.

207
00:14:53.510 --> 00:14:59.760
So I believe the best way to
do that is in an index.ts

208
00:14:59.760 --> 00:15:04.540
file that sits right above those.

209
00:15:04.540 --> 00:15:09.640
And so by combining
the reducers in a single place,

210
00:15:09.640 --> 00:15:12.030
we can then export that and
make that available.

211
00:15:13.030 --> 00:15:20.430
Now the selectors provide an interface
to your application state as a whole.

212
00:15:21.430 --> 00:15:26.680
And so for me, philosophically,
when you are defining the shape

213
00:15:26.680 --> 00:15:31.380
of your entire application state and
the way in which you communicate with it.

214
00:15:31.380 --> 00:15:37.920
It makes sense to me to have that
in a single top level index.ts.

215
00:15:37.920 --> 00:15:42.370
Where it becomes I think really helpful
is when you're doing computed selectors

216
00:15:43.370 --> 00:15:52.380
where you need to combine selectors
that involve related entities.

217
00:15:52.380 --> 00:15:58.506
And so now if I were to put this in the
customers reducer, so now the customers

218
00:15:58.506 --> 00:16:03.990
reducer needs to know about
the project's reducer and vice versa.

219
00:16:05.220 --> 00:16:09.820
And so now by having this up is that
I'm able to compose these together

220
00:16:09.820 --> 00:16:11.310
at a top level.

221
00:16:11.310 --> 00:16:17.376
And so some of these, I would say, are
fairly simplistic, but you can definitely,

222
00:16:17.376 --> 00:16:23.485
in a non trivial application, start to
create some very sophisticated selectors.

223
00:16:23.485 --> 00:16:27.260
And that I think needs to
happen in a single place and so

224
00:16:27.260 --> 00:16:32.300
this is essentially, index.ts,
is the public API for

225
00:16:32.300 --> 00:16:36.935
your store, and that's why I do that.

226
00:16:36.935 --> 00:16:38.505
&gt;&gt; [APPLAUSE]

