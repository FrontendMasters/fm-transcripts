WEBVTT

1
00:00:00.000 --> 00:00:04.153
&gt;&gt; Lukas Ruebbelke: So let me do a quick
summary of what we've covered, and

2
00:00:04.153 --> 00:00:08.800
I'll answer any questions
that anybody might have.

3
00:00:08.800 --> 00:00:15.458
So the basic anatomy of a component,
when it's all said and

4
00:00:15.458 --> 00:00:20.300
done is I start to,
&gt;&gt; Lukas Ruebbelke: Kind

5
00:00:20.300 --> 00:00:22.615
of close this out.

6
00:00:24.964 --> 00:00:29.723
&gt;&gt; Lukas Ruebbelke: We have a class,
which holds the imperative logic for

7
00:00:29.723 --> 00:00:31.318
that component.

8
00:00:31.318 --> 00:00:35.489
We have a decorator, or
metadata, that will define how

9
00:00:35.489 --> 00:00:40.124
Angular is supposed to interpret and
handle that component.

10
00:00:40.124 --> 00:00:45.122
So selector is what allows you to
place that component into another

11
00:00:45.122 --> 00:00:47.093
component's template.

12
00:00:47.093 --> 00:00:54.368
templateUrl, styleUrls, so you can
actually have more than one stylesheet.

13
00:00:54.368 --> 00:00:58.615
And then when you create a property or

14
00:00:58.615 --> 00:01:02.588
a method on that component class,

15
00:01:02.588 --> 00:01:08.622
it's now available for
binding in your component.

16
00:01:08.622 --> 00:01:14.442
So in the case of our projects component,
we created a projects array,

17
00:01:14.442 --> 00:01:18.039
which just has three
kind of mock projects.

18
00:01:19.798 --> 00:01:24.293
&gt;&gt; Lukas Ruebbelke: Which we were
then able to bind to in our template.

19
00:01:24.293 --> 00:01:27.886
And so the easiest way to bind it
is just wrap it in curly braces.

20
00:01:27.886 --> 00:01:32.793
And if you want to see it like to JSON,
so I believe under the hood, when you do

21
00:01:32.793 --> 00:01:37.579
the JSON pipe, it's just taking that
object and going object.toJson.

22
00:01:37.579 --> 00:01:40.290
That you just dump that right out.

23
00:01:40.290 --> 00:01:45.260
But you can use structural
directives such as

24
00:01:45.260 --> 00:01:49.325
ngFor to iterate over a collection.

25
00:01:49.325 --> 00:01:52.211
And then whatever element
that ngFor is on,

26
00:01:52.211 --> 00:01:55.644
it will stamp out an instance of that for
every item.

27
00:01:55.644 --> 00:02:00.759
So in this case, we're saying,
&gt;&gt; Lukas Ruebbelke: ngFor="let

28
00:02:00.759 --> 00:02:04.313
project of projects".

29
00:02:04.313 --> 00:02:09.368
Create for every one, for
every project, in projects,

30
00:02:09.368 --> 00:02:15.701
create an instance of this element and
everything that is inside of it.

31
00:02:15.701 --> 00:02:20.656
And then because we said let project,
so we're creating a local scoped

32
00:02:20.656 --> 00:02:24.730
variable in our template that
we can now reference that.

33
00:02:24.730 --> 00:02:28.470
So if I call this hoohaw, whatever,

34
00:02:28.470 --> 00:02:34.153
that I would have to update
it here within the template.

35
00:02:34.153 --> 00:02:38.669
And Angular is able to infer scope and
context, so

36
00:02:38.669 --> 00:02:43.938
that if you wanna capture,
for instance, a click event,

37
00:02:43.938 --> 00:02:49.009
you do this via event binding,
which is in parameters.

38
00:02:49.009 --> 00:02:50.687
So I wanna capture a click event.

39
00:02:50.687 --> 00:02:55.238
But you could also do mouseover,
mouseunder.

40
00:02:55.238 --> 00:02:57.593
So any dom event, you can bind to.

41
00:02:57.593 --> 00:03:02.449
You can also create your own events,
which we will talk about later.

42
00:03:02.449 --> 00:03:08.712
And from here,
you can then capture that event.

43
00:03:08.712 --> 00:03:14.921
And when it triggers,
call a method back on your component,

44
00:03:14.921 --> 00:03:20.173
which in this case we're
calling selectProject.

45
00:03:23.821 --> 00:03:24.354
&gt;&gt; Lukas Ruebbelke: And so

46
00:03:24.354 --> 00:03:29.800
this is fundamentally under
the basic shape of a component.

47
00:03:29.800 --> 00:03:34.483
So it's just a class that then
properties are available for

48
00:03:34.483 --> 00:03:40.394
binding in your templates, that you
use curly braces to do event binding.

49
00:03:40.394 --> 00:03:44.725
And if you want to bind to
a property in your template and

50
00:03:44.725 --> 00:03:47.277
it's typically just a string.

51
00:03:47.277 --> 00:03:53.543
So I will mention one other thing is
that you can use double curly braces or

52
00:03:53.543 --> 00:03:57.974
you can use bracket bracing for
property binding.

53
00:03:57.974 --> 00:04:05.010
So, if we go into, let's say,
ProjectsComponent here,

54
00:04:05.010 --> 00:04:09.949
and let's just call this primaryColor.

55
00:04:09.949 --> 00:04:12.631
And we'll set this to red.

56
00:04:15.669 --> 00:04:22.895
&gt;&gt; Lukas Ruebbelke: Now what we can
do is go to our, really any element,

57
00:04:22.895 --> 00:04:27.609
and we can go [style.color],

58
00:04:30.691 --> 00:04:33.588
&gt;&gt; Lukas Ruebbelke: ="primaryColor".

59
00:04:39.797 --> 00:04:44.204
&gt;&gt; Lukas Ruebbelke: Here, so this is
a way to if you wanna bind to a style or

60
00:04:44.204 --> 00:04:49.916
a class, or moreso, if you wanna
pass data into a child component,

61
00:04:49.916 --> 00:04:52.845
it's done via property binding.

62
00:04:52.845 --> 00:04:58.846
And so just a helpful mnemonic for
this is that if you have a method and

63
00:04:58.846 --> 00:05:04.130
you wanna call it,
how do you actually invoke that method?

64
00:05:07.621 --> 00:05:11.236
&gt;&gt; Lukas Ruebbelke: So for instance,

65
00:05:11.236 --> 00:05:13.165
if I did,

66
00:05:16.418 --> 00:05:22.534
&gt;&gt; Lukas Ruebbelke:
console.log(selectProject),

67
00:05:22.534 --> 00:05:26.481
what's gonna happen?

68
00:05:26.481 --> 00:05:28.226
&gt;&gt; Speaker 2: Log out the code for
selectProject.

69
00:05:28.226 --> 00:05:29.865
&gt;&gt; Lukas Ruebbelke: Right,
its going to log that code out.

70
00:05:29.865 --> 00:05:36.764
But if I do this,
then it's going to invoke that method.

71
00:05:36.764 --> 00:05:41.539
And so here you can think of
property binding is that if you

72
00:05:41.539 --> 00:05:46.117
want to capture that event and
then invoke something,

73
00:05:46.117 --> 00:05:50.213
I think it would just as
parenthesis on a method.

74
00:05:50.213 --> 00:05:55.407
And if you want to reference a property

75
00:05:55.407 --> 00:06:00.924
on something that, so let's say I had,

76
00:06:00.924 --> 00:06:05.159
and it's a dynamic property.

77
00:06:05.159 --> 00:06:08.435
So for instance, you have a collection or
you have an object.

78
00:06:08.435 --> 00:06:14.873
And you want to reference a property,
but you don't know what it is.

79
00:06:14.873 --> 00:06:21.720
So for instance, I could go,
&gt;&gt; Lukas Ruebbelke: That if I want

80
00:06:21.720 --> 00:06:27.521
to go this.selectedProject, and
I want to reference some property on here.

81
00:06:27.521 --> 00:06:29.939
I don't know what it is.

82
00:06:29.939 --> 00:06:33.446
But let's say I pass this in,
it's some prop.

83
00:06:33.446 --> 00:06:39.494
Well, whatever this is, I can access
it because it's in array notation.

84
00:06:39.494 --> 00:06:45.061
So from here, when I think of
I want to bind to a property

85
00:06:45.061 --> 00:06:50.145
on my component class and
put it into my template,

86
00:06:50.145 --> 00:06:55.364
that it's done essentially
with array notation.

87
00:06:55.364 --> 00:07:00.496
Or essentially, you want to access
a property on a collection or

88
00:07:00.496 --> 00:07:02.878
an object, array notation.

89
00:07:02.878 --> 00:07:09.803
So events are parentheses,
properties are brackets.

90
00:07:09.803 --> 00:07:15.801
Just as if you were accessing something
dynamically using array notation.

91
00:07:15.801 --> 00:07:20.464
That just, last but
not least, is that you can

92
00:07:20.464 --> 00:07:25.369
create local variable
references to elements in

93
00:07:25.369 --> 00:07:30.525
your template and
then reference them elsewhere.

94
00:07:33.428 --> 00:07:36.683
&gt;&gt; Speaker 2: So that local variable
reference doesn't have to be a,

95
00:07:36.683 --> 00:07:39.049
what did you call it, a local template?

96
00:07:39.049 --> 00:07:42.992
It could be any tag or any component?

97
00:07:42.992 --> 00:07:44.241
&gt;&gt; Lukas Ruebbelke: Mm-hm, yep.

98
00:07:44.241 --> 00:07:47.578
&gt;&gt; Speaker 2: What's the scope
of those declarations?

99
00:07:47.578 --> 00:07:49.569
&gt;&gt; Lukas Ruebbelke: So I would have said,

100
00:07:49.569 --> 00:07:53.934
I believe it's,
&gt;&gt; Lukas Ruebbelke: I believe

101
00:07:53.934 --> 00:07:57.924
everything inside that component template.

102
00:07:57.924 --> 00:07:58.924
&gt;&gt; Speaker 2: Okay.

103
00:07:58.924 --> 00:08:03.336
&gt;&gt; Lukas Ruebbelke: At one point,
I thought it was only that and down, but

104
00:08:03.336 --> 00:08:07.272
then obviously we're
going kind of parallel.

105
00:08:07.272 --> 00:08:11.359
So I believe it's available to
anything inside of the template.

106
00:08:11.359 --> 00:08:17.007
But if anybody finds some official decree
in the documentation, let me know.

107
00:08:17.007 --> 00:08:20.682
But I generally,
I would never break the Law of Demeter and

108
00:08:20.682 --> 00:08:24.815
reference a local template variable
in another template per se.

