WEBVTT

1
00:00:00.000 --> 00:00:05.089
&gt;&gt; Lukas Ruebbelke: Now the question is,
why is there this funny asterisk here?

2
00:00:05.089 --> 00:00:10.626
So this is synthetic sugar to essentially

3
00:00:10.626 --> 00:00:17.438
signal that this method is
going to change the DOM.

4
00:00:17.438 --> 00:00:20.449
And it's going to either take away or
add things too.

5
00:00:20.449 --> 00:00:25.695
So for instance, if you wanted to show
something or hide something based

6
00:00:25.695 --> 00:00:31.287
on some condition, you would use ngIf,
and it does very much the same thing.

7
00:00:31.287 --> 00:00:38.819
And so, using ngFor, we're able to iterate
over this collection and display it here.

8
00:00:40.575 --> 00:00:44.685
&gt;&gt; Lukas Ruebbelke: But,
&gt;&gt; Lukas Ruebbelke: We're putting data in,

9
00:00:44.685 --> 00:00:48.680
but what if you select one of these
projects and you wanna capture that?

10
00:00:48.680 --> 00:00:51.608
Cuz so
remember a component should do two things,

11
00:00:51.608 --> 00:00:56.349
capture enough data to render it in the
template, and then capture user input and

12
00:00:56.349 --> 00:01:00.274
then essentially delegate that
back up to the appropriate level.

13
00:01:02.792 --> 00:01:09.552
&gt;&gt; Lukas Ruebbelke: We can
use event binding to do that.

14
00:01:09.552 --> 00:01:15.255
And so when we capture an event, such as
a DOM event, we can bind to that event and

15
00:01:15.255 --> 00:01:19.110
then use it to call something
in our component class.

16
00:01:19.110 --> 00:01:22.250
So if we go here, and

17
00:01:22.250 --> 00:01:24.810
I'll just break this to another line so
it's a little bit easier to read.

18
00:01:26.680 --> 00:01:31.050
And we basically wanna say any
time somebody clicks on this item,

19
00:01:31.050 --> 00:01:32.820
we want to capture it.

20
00:01:34.670 --> 00:01:35.300
So, click.

21
00:01:37.510 --> 00:01:41.749
And let's go, selectProject, and

22
00:01:41.749 --> 00:01:47.630
because we are declaring
this on the same element,

23
00:01:47.630 --> 00:01:50.926
that we can pass project in.

24
00:01:54.735 --> 00:01:58.546
&gt;&gt; Lukas Ruebbelke: Click is a native DOM
event, so in Angular JS you had ngClick,

25
00:01:58.546 --> 00:02:02.450
and ngMouseover, and
there was all these custom directives.

26
00:02:02.450 --> 00:02:04.587
And they said let's do away with that.

27
00:02:04.587 --> 00:02:10.059
If it's a native DOM event, let's allow,
you just bind to that directly.

28
00:02:10.059 --> 00:02:12.330
So click, we're going to capture that.

29
00:02:12.330 --> 00:02:16.875
And we're going to call selectProject
in our component class,

30
00:02:16.875 --> 00:02:21.098
which notice,
it's angry because it doesn't exist yet.

31
00:02:21.098 --> 00:02:25.401
And we're going to pass in
the project that was clicked.

32
00:02:25.401 --> 00:02:31.381
And so angular is very good at keeping
track of the item that you've clicked,

33
00:02:31.381 --> 00:02:35.797
and so there's actually kind
of a local scope each item or

34
00:02:35.797 --> 00:02:41.430
part of that iterated sequence,
and then servicing that back up.

35
00:02:41.430 --> 00:02:47.190
So now if we go back into our code here,

36
00:02:47.190 --> 00:02:51.695
we'll go selectedProject.

37
00:02:51.695 --> 00:02:55.356
So we'll declare it, but
we're not going to initialize it.

38
00:02:55.356 --> 00:03:01.537
And then we'll go selectProject,
which will take a project parameter,

39
00:03:01.537 --> 00:03:06.233
and then we'll go
this.selectedProject = project.

40
00:03:08.932 --> 00:03:11.472
&gt;&gt; Lukas Ruebbelke: But
before that, well, let's do this.

41
00:03:11.472 --> 00:03:13.876
How about a little console log?

42
00:03:13.876 --> 00:03:22.352
SELECTED PROJECT,
&gt;&gt; Lukas Ruebbelke: Here,

43
00:03:22.352 --> 00:03:29.297
we'll go in here,
&gt;&gt; Lukas Ruebbelke: We just zoom this up.

44
00:03:29.297 --> 00:03:31.921
No, console.

45
00:03:31.921 --> 00:03:32.979
There we go.

46
00:03:32.979 --> 00:03:39.859
So you can see as I click on this that
we're getting whatever you select.

47
00:03:39.859 --> 00:03:42.273
It's just basically capturing that and

48
00:03:42.273 --> 00:03:45.470
sending that data structure
back to your component.

49
00:03:45.470 --> 00:03:50.701
So we have property binding if
you wanna send data from your

50
00:03:50.701 --> 00:03:56.158
component into your template,
you bind to it as a property.

51
00:03:56.158 --> 00:04:00.316
If something happens in your template and
you wanna capture it,

52
00:04:00.316 --> 00:04:05.402
then you bind to it as an event that then
calls a method on your component class.

53
00:04:12.523 --> 00:04:13.540
&gt;&gt; Lukas Ruebbelke: Okay.

54
00:04:13.540 --> 00:04:16.360
&gt;&gt; Student: Is that using a true event or

55
00:04:16.360 --> 00:04:21.800
do we need true events to go from
component to another component?

56
00:04:21.800 --> 00:04:24.030
Or is this working because it's
all on the same component?

57
00:04:24.030 --> 00:04:27.817
And is there tricks to get it to work
if you want to eventually to go to

58
00:04:27.817 --> 00:04:30.809
a different component that
displays that project?

59
00:04:30.809 --> 00:04:32.656
And that's probably where
maybe you're going.

60
00:04:32.656 --> 00:04:34.210
&gt;&gt; Lukas Ruebbelke: So
I will talk about that.

61
00:04:34.210 --> 00:04:36.781
So the question is, is this a true event?

62
00:04:36.781 --> 00:04:38.609
And what if you wanted to service
it maybe to another component?

63
00:04:38.609 --> 00:04:45.730
And so remember when I said capture
user events and then delegate that up?

64
00:04:45.730 --> 00:04:50.870
So what I would do is I'd capture
the event and then delegate

65
00:04:50.870 --> 00:04:56.060
the unit of work around that to,
for instance, a service, or ngRx.

66
00:04:56.060 --> 00:05:01.100
Which would then basically push
whatever needs to happen back down.

67
00:05:01.100 --> 00:05:05.189
So there's very much to this
concept of the unidirectional flow,

68
00:05:05.189 --> 00:05:08.030
where data flows down, events flow up.

69
00:05:08.030 --> 00:05:14.900
I'lI talk about it a it more when we
get into component of an architecture.

70
00:05:14.900 --> 00:05:19.373
But the idea is you wanna capture
the event itself at the template level, or

71
00:05:19.373 --> 00:05:20.723
the parent template.

72
00:05:20.723 --> 00:05:24.807
And from there delegate it back up so
that it's no longer an event, but

73
00:05:24.807 --> 00:05:29.188
you're rather just doing regular
control flow through the application.

74
00:05:29.188 --> 00:05:29.929
Does that make sense?

75
00:05:29.929 --> 00:05:33.595
&gt;&gt; Student: Yeah, yep, I was just merely
curious because I didn't see any,

76
00:05:33.595 --> 00:05:37.742
I'm listening for this event kind of
a thing that you did and that, okay.

77
00:05:37.742 --> 00:05:40.720
&gt;&gt; Lukas Ruebbelke: So under the hood is
that, and we'll talk about custom events,

78
00:05:40.720 --> 00:05:43.130
but it's literally
capturing that DOM event.

79
00:05:43.130 --> 00:05:46.300
In fact, so
I'm changing parameter to event.

80
00:05:46.300 --> 00:05:48.989
This may or may not work,
but let's see what happens.

81
00:05:54.517 --> 00:05:55.880
&gt;&gt; Lukas Ruebbelke: Project
is not defined?

82
00:05:55.880 --> 00:05:59.979
Hold on.
We can just chop that out and post.

83
00:06:07.683 --> 00:06:10.824
&gt;&gt; Lukas Ruebbelke: So
now, if you can look here,

84
00:06:10.824 --> 00:06:15.620
this is truly like
the mouse event is firing.

85
00:06:17.530 --> 00:06:18.710
But that's not what we want.

86
00:06:18.710 --> 00:06:21.414
But we're using that mouse event to
trigger and say call this thing.

87
00:06:21.414 --> 00:06:25.556
But instead of passing in the event what
we wanna pass in is the actual object

88
00:06:25.556 --> 00:06:27.879
itself that we have a local reference to.

89
00:06:31.692 --> 00:06:33.968
&gt;&gt; Lukas Ruebbelke: So,
&gt;&gt; Student: In this case,

90
00:06:33.968 --> 00:06:39.509
would project be the second parameter
in the function that comes in,

91
00:06:39.509 --> 00:06:42.771
because you have that special $event?

92
00:06:42.771 --> 00:06:43.634
&gt;&gt; Lukas Ruebbelke: Why not try it?

93
00:06:47.385 --> 00:06:49.879
&gt;&gt; Lukas Ruebbelke: So we'll go here,
and this actually may work, and

94
00:06:49.879 --> 00:06:51.625
Marc may have just changed my life.

95
00:06:51.625 --> 00:06:54.348
But I know at one point, this did not.

96
00:06:54.348 --> 00:06:58.057
And so I typically think of it as a single
object that's coming through that.

97
00:07:03.598 --> 00:07:04.110
&gt;&gt; Student: My gosh.

98
00:07:04.110 --> 00:07:05.294
&gt;&gt; Lukas Ruebbelke: What?

99
00:07:05.294 --> 00:07:07.739
&gt;&gt; Student: [LAUGH]
&gt;&gt; Lukas Ruebbelke: I'm so happy.

100
00:07:13.536 --> 00:07:14.405
&gt;&gt; Lukas Ruebbelke: So what would happen?

101
00:07:17.203 --> 00:07:24.194
&gt;&gt; Lukas Ruebbelke: So let's go,
&gt;&gt; Lukas Ruebbelke: MARC IS AWESOME.

102
00:07:29.867 --> 00:07:33.247
&gt;&gt; Lukas Ruebbelke: Actually I did that
wrong, it goes in here, MARC IS AWESOME.

103
00:07:35.749 --> 00:07:38.563
&gt;&gt; Lukas Ruebbelke: And
here, we'll go echo,

104
00:07:46.394 --> 00:07:47.031
&gt;&gt; Lukas Ruebbelke: If this works,

105
00:07:47.031 --> 00:07:48.115
I'm buying Marc a donut.

106
00:07:52.503 --> 00:07:53.320
&gt;&gt; Lukas Ruebbelke: Donut time.

107
00:07:56.887 --> 00:07:58.399
&gt;&gt; Lukas Ruebbelke: So
apparently from DOM events or

108
00:07:58.399 --> 00:08:00.812
capturing DOM events you
can actually stack them.

109
00:08:00.812 --> 00:08:04.074
Once we get into inputs and
outputs, we'll try it again, but

110
00:08:04.074 --> 00:08:05.718
I don't think that will work.

