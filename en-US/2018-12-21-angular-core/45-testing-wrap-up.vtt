WEBVTT

1
00:00:01.330 --> 00:00:06.290
&gt;&gt; Lukas Ruebbelke: I can say
emphatically that the ability to

2
00:00:06.290 --> 00:00:10.870
reliably spin up a component
in a mock module

3
00:00:12.400 --> 00:00:18.800
and have access to its element that it
lives on for free is a major step forward.

4
00:00:18.800 --> 00:00:22.280
This was very, very hard in AngularJS.

5
00:00:22.280 --> 00:00:27.623
And now that we can come in,
and any time you use

6
00:00:27.623 --> 00:00:33.657
the CLI in the spec,
you're getting this for free.

7
00:00:33.657 --> 00:00:36.380
And so I added some additional things,
debug element.

8
00:00:36.380 --> 00:00:40.959
I showed you how to grab a service,
or actually override a service.

9
00:00:40.959 --> 00:00:45.920
And then use debug injector git
to actually pull that back out.

10
00:00:47.310 --> 00:00:50.533
But most of the work has
already been done for you.

11
00:00:50.533 --> 00:00:55.470
Where you're gonna run into problems
is that typically you're not satisfying

12
00:00:55.470 --> 00:00:58.040
a dependency on your component.

13
00:00:58.040 --> 00:01:01.520
And so when we were setting up for
this module,

14
00:01:01.520 --> 00:01:07.990
what I had to do is I had to go and
actually add in these two dependencies

15
00:01:07.990 --> 00:01:12.710
as well as all of this,
and then it worked.

16
00:01:12.710 --> 00:01:16.200
So if you have a test and
you're not running it constantly and

17
00:01:16.200 --> 00:01:21.136
you add in some additional dependency, you
have to update your test to reflect that.

18
00:01:21.136 --> 00:01:24.589
&gt;&gt; Speaker 2: Do you ever
recommend [COUGH] using

19
00:01:24.589 --> 00:01:28.670
the NO_ERRORS_SCHEMA for testing?

20
00:01:28.670 --> 00:01:29.780
&gt;&gt; Lukas Ruebbelke: I haven't.

21
00:01:29.780 --> 00:01:36.100
There may be a good case, but typically
something's wrong, I wanna know about it.

22
00:01:36.100 --> 00:01:38.032
Now if it's not providing, in other words,

23
00:01:38.032 --> 00:01:43.190
it's an odd configuration thing that
actually is not affecting my test,

24
00:01:43.190 --> 00:01:47.318
I have seen where we've turned it off for
that reason.

25
00:01:47.318 --> 00:01:53.320
But typically when you write things,
it's very fine grained, so you have to

26
00:01:53.320 --> 00:01:59.210
be careful that if you have a problem in
your code that a lot of times what people

27
00:01:59.210 --> 00:02:03.470
see as a problem is really a trailing
indicator that something else is wrong.

28
00:02:04.520 --> 00:02:10.080
So when somebody says this component
is really hard to test, so

29
00:02:10.080 --> 00:02:14.466
we have a problem testing,
well, no, your on

30
00:02:14.466 --> 00:02:20.400
init is 250 lines long and
you're doing 17 different things.

31
00:02:20.400 --> 00:02:21.909
What exactly are you wanting to test here?

32
00:02:23.350 --> 00:02:27.400
And so when people say,
testing is hard, well, testing,

33
00:02:27.400 --> 00:02:30.370
untestable code is sometimes
nearly impossible.

34
00:02:32.590 --> 00:02:38.300
Also by moving a lot of the component
logic and the different things

35
00:02:38.300 --> 00:02:43.160
that typically lived in the components
we saw, or if you looked at NGRX, and

36
00:02:43.160 --> 00:02:48.210
how you move that into producers and
stores and those different things.

37
00:02:48.210 --> 00:02:51.040
That a lot of the problems tend
to just work themselves out.

38
00:02:52.700 --> 00:02:54.370
In terms of everything is in one place,

39
00:02:54.370 --> 00:02:58.630
it eliminates like race conditions or
what data do we use.

40
00:02:59.830 --> 00:03:00.780
&gt;&gt; Speaker 3: In broad strokes,

41
00:03:00.780 --> 00:03:04.765
how can we test our store
reducer selector and effects?

42
00:03:07.403 --> 00:03:14.284
&gt;&gt; Lukas Ruebbelke: So I would, well,
&gt;&gt; Lukas Ruebbelke: In broad strokes,

43
00:03:14.284 --> 00:03:21.230
so we don't have, in this particular repo,
we don't have an implementation of NGRX.

44
00:03:21.230 --> 00:03:25.390
But what I can tell you
is that full reducers,

45
00:03:25.390 --> 00:03:32.617
those are very easy to test because what
you have is when I called this reducer,

46
00:03:32.617 --> 00:03:36.688
something comes in, something comes out.

47
00:03:36.688 --> 00:03:43.850
And so these are typically
very small tests, in, out.

48
00:03:46.350 --> 00:03:49.380
And even with selectors,
those are also pretty easy to test.

49
00:03:49.380 --> 00:03:54.600
Is that, I'm going to call this selector
and I expect this thing to come out.

50
00:03:55.830 --> 00:04:00.930
Now where testing gets difficult,
and I can provide some additional

51
00:04:00.930 --> 00:04:04.450
information on that in maybe
like a resource section, is

52
00:04:06.010 --> 00:04:10.630
effects can be tricky
because of the observables.

53
00:04:12.110 --> 00:04:15.269
And so this is where if
you're testing observables,

54
00:04:15.269 --> 00:04:18.639
then you have to understand
like jasmine marbles, and so

55
00:04:18.639 --> 00:04:23.670
that's kind of an additional thing that
you kind of wrap your mind around.

56
00:04:23.670 --> 00:04:27.920
But again,
by moving everything into your store

57
00:04:29.340 --> 00:04:33.780
and your reducers and
your selectors, well,

58
00:04:33.780 --> 00:04:37.160
now everything is kind of very fine
grained, simple purpose, easy to test.

59
00:04:37.160 --> 00:04:42.370
And if something is what I would say is
a pure function with a clean contract,

60
00:04:42.370 --> 00:04:44.260
you put something in,
you get something out.

61
00:04:45.690 --> 00:04:47.060
Those are easy to test.

62
00:04:47.060 --> 00:04:52.000
Where it gets tricky is,
I expect when something comes in, for

63
00:04:52.000 --> 00:04:54.480
certain things to happen
in a certain order.

64
00:04:55.720 --> 00:04:58.540
And then, now you're having to
verify that flow of control.

65
00:05:01.390 --> 00:05:05.600
But I can provide an additional link.

66
00:05:05.600 --> 00:05:12.020
So if you actually look at my repo or
repos or getup.com or a hungry mind,

67
00:05:12.020 --> 00:05:19.203
and there is like an NGRX quick start that
you can look as well as an NGRX workshop.

68
00:05:19.203 --> 00:05:23.560
Are we going there that will have
a lot of tests specifically to NGRX.

