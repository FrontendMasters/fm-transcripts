WEBVTT

1
00:00:00.060 --> 00:00:04.340
&gt;&gt; Lukas Ruebbelke: I'm going to walk
through the pieces in the component spec,

2
00:00:04.340 --> 00:00:09.120
as it's generated, and explain what
it does, and how to work with it.

3
00:00:09.120 --> 00:00:15.110
So, the first thing that I do when
I am creating a component spec,

4
00:00:15.110 --> 00:00:21.120
is I create my local test members.

5
00:00:21.120 --> 00:00:23.730
And so this is by default
going to be two things, but

6
00:00:23.730 --> 00:00:25.480
I'm going to introduce
one additional thing.

7
00:00:26.710 --> 00:00:31.720
So the first thing is,
you want to define the component

8
00:00:31.720 --> 00:00:36.890
that you want to test, which is this
case is going to be a ProjectsComponent.

9
00:00:37.970 --> 00:00:38.470
Good.

10
00:00:39.660 --> 00:00:43.470
Now we're getting a little thing here,
it's like you haven't read a clear disk,

11
00:00:43.470 --> 00:00:45.070
like should it be a cost?

12
00:00:45.070 --> 00:00:47.510
Well, the answer is no, hang on.

13
00:00:47.510 --> 00:00:54.300
The next piece is your test fixture or
your component fixture.

14
00:00:54.300 --> 00:00:58.685
And so what this is,
is a ComponentFixture.

15
00:01:02.445 --> 00:01:04.660
&gt;&gt; Lukas Ruebbelke: That holds your.

16
00:01:06.857 --> 00:01:09.120
&gt;&gt; Lukas Ruebbelke: Component
that you want to pass.

17
00:01:13.912 --> 00:01:20.587
&gt;&gt; Lukas Ruebbelke: So, one other thing
I'm going to bring in, is a debug element.

18
00:01:23.191 --> 00:01:24.536
&gt;&gt; Lukas Ruebbelke: Here we go.

19
00:01:30.070 --> 00:01:34.690
&gt;&gt; Lukas Ruebbelke: And
now we are to the, what I would say is

20
00:01:34.690 --> 00:01:39.920
the most important piece the entire thing.

21
00:01:39.920 --> 00:01:48.070
And this is all your testing happens or
the genesis of it happens in the test bin.

22
00:01:48.070 --> 00:01:50.190
And so everything that should go into
create if you are going to create

23
00:01:50.190 --> 00:01:55.760
a component,
that requires services that has modules.

24
00:01:55.760 --> 00:01:59.278
You have to find a way to instantiate
that in essentially a vacuum.

25
00:01:59.278 --> 00:02:01.006
And so.

26
00:02:03.830 --> 00:02:06.033
&gt;&gt; Lukas Ruebbelke: instantiate test bed.

27
00:02:06.033 --> 00:02:10.720
And this, I think the other team has done
a really, really good job with this.

28
00:02:10.720 --> 00:02:12.680
So we're going to go beforeEach.

29
00:02:14.390 --> 00:02:16.586
And you could do this asynchronously, but

30
00:02:16.586 --> 00:02:19.641
I'm going to do it just in
a synchronous before each block.

31
00:02:22.708 --> 00:02:25.220
&gt;&gt; Lukas Ruebbelke: I think because
a web packet doesn't matter too much,

32
00:02:25.220 --> 00:02:28.180
I suppose if you're doing
lazy loading possibly.

33
00:02:28.180 --> 00:02:30.830
But as of yesterday, I hate lazy loading.

34
00:02:34.512 --> 00:02:41.780
&gt;&gt; Lukas Ruebbelke: So,
Test Bin creates testing modules.

35
00:02:43.420 --> 00:02:46.610
So the first thing we are going to do,
is we say when you create a component or

36
00:02:46.610 --> 00:02:49.940
anything, there needs to be
a module that it lives in.

37
00:02:51.540 --> 00:02:53.522
And within the module.

38
00:02:55.346 --> 00:03:00.280
&gt;&gt; Lukas Ruebbelke: You need to create
a module as if it were the real module.

39
00:03:00.280 --> 00:03:04.650
So, when you call test bit
configure testing module,

40
00:03:04.650 --> 00:03:09.940
it's basically creating an ng module,
just with some of the teeth taken out.

41
00:03:09.940 --> 00:03:13.620
So this is kind of
a standalone mock module,

42
00:03:13.620 --> 00:03:17.430
that you get all of the Angular life
cycles and the different things with it.

43
00:03:18.460 --> 00:03:26.405
So from here, you are going to pass in
your configuration object for that.

44
00:03:26.405 --> 00:03:32.810
So obviously, declarations is
going to be ProjectsComponent.

45
00:03:32.810 --> 00:03:38.152
&gt;&gt; Lukas Ruebbelke: What I'm also going
to call out here, and this is probably

46
00:03:38.152 --> 00:03:44.870
going to be one of the biggest
issues that you're going to have.

47
00:03:44.870 --> 00:03:50.470
When you're building out a test,
is getting the right imports.

48
00:03:50.470 --> 00:03:55.914
And so, I'll just hop back over here, and

49
00:03:55.914 --> 00:04:01.673
I know for
a fact that we're using material.

50
00:04:01.673 --> 00:04:02.900
We have the forms module.

51
00:04:05.203 --> 00:04:10.290
&gt;&gt; Lukas Ruebbelke: We have,
I'm just gonna peek here for a second.

52
00:04:10.290 --> 00:04:12.340
And so, this is not super
important in the sense of,

53
00:04:12.340 --> 00:04:14.261
if you're missing a module
it's going to fail.

54
00:04:14.261 --> 00:04:15.910
I don't know how to do this.

55
00:04:15.910 --> 00:04:20.560
And so, figuring out the error messages
like I am missing these particular things.

56
00:04:20.560 --> 00:04:28.100
So HTTP client module and yes this is,
of you're using angular material,

57
00:04:28.100 --> 00:04:31.050
then you're also going to need
the browsers animation module.

58
00:04:31.050 --> 00:04:35.550
So it's getting those
dependencies just right.

59
00:04:35.550 --> 00:04:40.924
Now also in your declaration, if we
look in our projects component template.

60
00:04:43.930 --> 00:04:47.132
&gt;&gt; Lukas Ruebbelke: Low and behold,
we have two additional projects or

61
00:04:47.132 --> 00:04:49.570
components that we're using.

62
00:04:49.570 --> 00:04:52.230
So, we need to declare these as well.

63
00:04:54.060 --> 00:05:01.490
So, ProjectListComponent and
ProjectDetailsComponent.

64
00:05:03.850 --> 00:05:05.550
And so I believe this is everything, so

65
00:05:05.550 --> 00:05:07.810
one is what component
are you working with?

66
00:05:07.810 --> 00:05:10.960
Does it have additional components
underneath of it that you need to declare,

67
00:05:10.960 --> 00:05:12.730
so that it can substantiate them?

68
00:05:12.730 --> 00:05:15.930
And, are you relying
on additional modules,

69
00:05:15.930 --> 00:05:19.680
so what components is this
component relying on to even work.

70
00:05:21.430 --> 00:05:25.820
We'll see here though,
that fixture still it's like hey,

71
00:05:25.820 --> 00:05:29.860
this is a TestBed this
is not a TestFixture.

72
00:05:31.080 --> 00:05:38.650
So what we have to do, is chain a method
call on here, which is createComponent.

73
00:05:38.650 --> 00:05:42.710
And then we pass in ProjectsComponent.

74
00:05:44.670 --> 00:05:48.600
All right, so now, the fixture's happy.

75
00:05:50.070 --> 00:05:54.317
Because we've created the test bed,
and then, underneath of it,

76
00:05:54.317 --> 00:05:57.160
we've chained this 'createComponent'.

77
00:05:57.160 --> 00:06:01.812
Now, what I will do is,
you can do this asynchronously as well,

78
00:06:01.812 --> 00:06:06.911
where you can do compiled components and
then an asynchronous block.

79
00:06:06.911 --> 00:06:10.251
So this is, one will actually wait for
some asynchronous event,

80
00:06:10.251 --> 00:06:13.310
like if you have an external
template that needs to go load.

81
00:06:13.310 --> 00:06:16.840
And so this is why they split that out,
for that reason.

82
00:06:16.840 --> 00:06:20.100
But, so you can compile components and
then down here,

83
00:06:20.100 --> 00:06:23.620
create component, separate that.

84
00:06:23.620 --> 00:06:26.590
Generally, I would just do
this all in a single block.

85
00:06:27.746 --> 00:06:29.830
But it's kinda six of one half,
a half a dozen of another.

86
00:06:31.750 --> 00:06:33.010
Now that we have our fixture.

87
00:06:34.090 --> 00:06:38.540
Now we can get a reference
to our component.

88
00:06:38.540 --> 00:06:42.793
So we'll go component,
&gt;&gt; Lukas Ruebbelke: =

89
00:06:42.793 --> 00:06:46.940
fixture.componentInstance.

90
00:06:46.940 --> 00:06:50.481
And so now we have access to
the component that we wanna test.

91
00:06:50.481 --> 00:06:56.210
From here, we can also get
access to our debug element.

92
00:06:56.210 --> 00:07:01.090
So this is the actual, like
an instantiated element of this component.

93
00:07:01.090 --> 00:07:04.280
So you actually have reference to
essentially like a debug element,

94
00:07:04.280 --> 00:07:06.810
or a DOM element,
with some debug stuff baked into it.

95
00:07:06.810 --> 00:07:12.670
So this is going to, unlike Angular JS,
this allows you to actually do.

96
00:07:12.670 --> 00:07:16.222
I'm going to set this property, and
I can test the DOM of that, and

97
00:07:16.222 --> 00:07:19.410
make sure that binding,
that it's rendering correctly.

98
00:07:19.410 --> 00:07:22.923
And so, it doesn't really replace indent
testing, but it's kind of a nice,

99
00:07:22.923 --> 00:07:25.866
it's like a poor-man's indent testing,
which is kinda neat.

100
00:07:28.399 --> 00:07:29.260
&gt;&gt; Lukas Ruebbelke: debugElement.

101
00:07:31.020 --> 00:07:34.015
And then we're going
to do one other thing.

102
00:07:39.585 --> 00:07:41.750
&gt;&gt; Lukas Ruebbelke: We're
going to call detectChanges.

103
00:07:42.890 --> 00:07:49.480
Now, why this is happening,
is when you create a component

104
00:07:49.480 --> 00:07:55.310
in a TestBed, it doesn't automatically
trigger change detection.

105
00:07:56.420 --> 00:08:00.440
So for instance, if you change
a property on your component and

106
00:08:00.440 --> 00:08:02.820
you want to verify that
the DOM is updated.

107
00:08:04.140 --> 00:08:08.469
Well, Angular by default does
not automatically trigger change

108
00:08:08.469 --> 00:08:10.751
detection in a test environment,

109
00:08:10.751 --> 00:08:16.600
because what they want to do is allow you
do insertion pre-binding and post-binding.

110
00:08:16.600 --> 00:08:21.880
So they basically are giving you control
on saying, when I change this thing

111
00:08:21.880 --> 00:08:26.690
I can verify something here,
pre-change and then post-change.

112
00:08:26.690 --> 00:08:31.670
And so typically by default, within you
before each, you'll set everything up and

113
00:08:31.670 --> 00:08:34.120
then you'll trigger
an initial detect changes.

114
00:08:35.650 --> 00:08:37.510
And so
that is what is happening there, but

115
00:08:37.510 --> 00:08:41.360
we'll see in a test in a moment,
that if you don't fire that.

116
00:08:41.360 --> 00:08:42.820
So if you change a property and
then you say,

117
00:08:42.820 --> 00:08:47.920
well it should have updated the DOM,
it will not so you manually force that.

118
00:08:49.440 --> 00:08:55.325
And so let me go on to the project's

119
00:08:55.325 --> 00:09:00.080
component, and here we have primary color.

120
00:09:00.080 --> 00:09:04.220
I don't really know what I was
doing there, but it's convenient.

121
00:09:06.150 --> 00:09:07.257
And let me do one other thing.

122
00:09:07.257 --> 00:09:15.566
In
&gt;&gt; Lukas Ruebbelke: The template,

123
00:09:15.566 --> 00:09:22.399
I'm just going to create h1 tag,
and I'm just going to line to this.

124
00:09:26.158 --> 00:09:27.760
&gt;&gt; Lukas Ruebbelke: I
think I'm done with this.

125
00:09:27.760 --> 00:09:28.570
All right, I'll do a Save.

126
00:09:29.930 --> 00:09:36.150
All right, so now into our spec,
I can create a test.

127
00:09:36.150 --> 00:09:40.864
So within this, I could say,

128
00:09:40.864 --> 00:09:46.906
it should have a primaryColor of red.

129
00:09:56.289 --> 00:10:01.170
&gt;&gt; Lukas Ruebbelke: And then we can
just run a basic instruction on this.

130
00:10:01.170 --> 00:10:03.040
So we'll go, expect.

131
00:10:06.028 --> 00:10:08.380
&gt;&gt; Lukas Ruebbelke:
(component.primaryColor).

132
00:10:08.380 --> 00:10:10.260
So notice it's already picking it up.

133
00:10:10.260 --> 00:10:19.100
So, language services for
the win, toBe('red').

134
00:10:19.100 --> 00:10:22.535
Well let's set this to green real
quick and just see what happens.

135
00:10:28.652 --> 00:10:34.170
&gt;&gt; Lukas Ruebbelke: What do you know,
expected red to be green.

136
00:10:34.170 --> 00:10:39.710
Well, really what I was hoping for
is that actually red would be green.

137
00:10:41.400 --> 00:10:44.017
Easy enough, red save.

138
00:10:46.429 --> 00:10:49.047
&gt;&gt; Lukas Ruebbelke: This is all easier
when you have like dual monitors,

139
00:10:49.047 --> 00:10:51.843
so typically when you do that
is just outrun this up, and

140
00:10:51.843 --> 00:10:54.003
I'll just set it ,and just issue coding.

141
00:10:54.003 --> 00:10:57.785
Green, green, green,
you mess you're like it's red, but

142
00:10:57.785 --> 00:11:01.370
a fix is in like 60 seconds or
oops, not done something.

143
00:11:01.370 --> 00:11:03.880
So this is why I'm having to
kind of hop that in fourth here.

