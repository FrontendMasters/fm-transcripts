WEBVTT

1
00:00:00.000 --> 00:00:02.964
&gt;&gt; Lukas Ruebbelke: All right, so
let's go through, very good suggestion.

2
00:00:02.964 --> 00:00:07.123
So if you have suggestions like hey, it
would helpful if we just recapped this or

3
00:00:07.123 --> 00:00:10.429
if you could just restate this
in a clearer term, absolutely.

4
00:00:10.429 --> 00:00:17.449
And so, at a high level, because
we're dealing with an Nx workspace.

5
00:00:17.449 --> 00:00:24.696
And let me just pull this all down
to kinda zoom out really high here.

6
00:00:24.696 --> 00:00:30.767
When you generate an Nx workspace, this
is essentially a monorepo where you're

7
00:00:30.767 --> 00:00:37.301
able to split your kind of client specific
centric applications into the apps folder.

8
00:00:37.301 --> 00:00:43.703
Then you can abstract out common
business logic, state management stuff.

9
00:00:43.703 --> 00:00:49.429
And the things that you could possibly
wanna reuse across multiple applications,

10
00:00:49.429 --> 00:00:53.777
utility libraries,
common functionality, into your libs.

11
00:00:53.777 --> 00:00:55.594
So in the apps folder,

12
00:00:55.594 --> 00:01:00.868
we are working out of a single
application, which is dashboard.

13
00:01:00.868 --> 00:01:05.550
And so we were able to generate
that just as a normal angular

14
00:01:05.550 --> 00:01:09.765
satellite project NGG app dashboard,
generated.

15
00:01:09.765 --> 00:01:18.017
Now, in the libs folder, what I've done
is I've generated four common libraries.

16
00:01:18.017 --> 00:01:21.900
And they all serve kind
of a different purpose.

17
00:01:21.900 --> 00:01:27.244
So the first one that I did is
I created a material library.

18
00:01:27.244 --> 00:01:30.499
And if you look in here, in source.lib,

19
00:01:30.499 --> 00:01:35.430
within the material folder,
is there is a material.module.

20
00:01:35.430 --> 00:01:40.326
And all we are doing is importing all
of the material components that we're

21
00:01:40.326 --> 00:01:43.758
going to use across
the application into one place.

22
00:01:43.758 --> 00:01:49.036
But not only are importing them,
but we are exporting them.

23
00:01:49.036 --> 00:01:51.198
So now,
as you saw in the previous example,

24
00:01:51.198 --> 00:01:54.996
that if you have a component in a module,
and you wanna use it somewhere else,

25
00:01:54.996 --> 00:01:57.350
you need to export that
to make that available.

26
00:01:57.350 --> 00:02:01.790
And so
this is just a nice way to keep your main

27
00:02:01.790 --> 00:02:05.523
application module nice and clean.

28
00:02:07.272 --> 00:02:11.708
&gt;&gt; Lukas Ruebbelke: Then if we
go back into our file structure,

29
00:02:11.708 --> 00:02:17.514
then what I've done is I've
created a core-data lib.

30
00:02:17.514 --> 00:02:21.274
And when we start to
work on our services and

31
00:02:21.274 --> 00:02:26.820
communicate with a server,
this is where those files will go.

32
00:02:26.820 --> 00:02:32.291
Typically, what I'll also do is
when I'm dealing with NgRx or

33
00:02:32.291 --> 00:02:37.980
Redux, that I'll have a state
management piece in here as well.

34
00:02:37.980 --> 00:02:39.851
Possibly separate that out,
it just depends.

35
00:02:39.851 --> 00:02:44.482
And so core data, you can just think of
this as where your data is coming from,

36
00:02:44.482 --> 00:02:46.999
this is where your data is being managed.

37
00:02:46.999 --> 00:02:50.193
This is a highly reusable module.

38
00:02:50.193 --> 00:02:54.365
So this this is something that if
you have multiple applications,

39
00:02:54.365 --> 00:02:58.471
typically you will reuse portions
of this over and over and over.

40
00:02:58.471 --> 00:02:59.841
So having this in one
place is really nice.

41
00:02:59.841 --> 00:03:03.044
As well as if somebody updates the lib,
well then now you

42
00:03:03.044 --> 00:03:07.082
can leverage that in the application
that you happen to be working in.

43
00:03:07.082 --> 00:03:12.396
What we've also done is
generated placeholders for

44
00:03:12.396 --> 00:03:15.906
the login screen and the toolbar.

45
00:03:15.906 --> 00:03:19.228
So as you would imagine, if you have
kind of a standard login screen,

46
00:03:19.228 --> 00:03:20.503
you may have a dashboard.

47
00:03:20.503 --> 00:03:23.966
You may have a widget,
a user portal, or whatever.

48
00:03:23.966 --> 00:03:26.066
You may want to reuse that.

49
00:03:26.066 --> 00:03:29.216
And it's kind of a standalone are you
allowed to see what's behind this wall?

50
00:03:29.216 --> 00:03:30.503
Let's reuse that.

51
00:03:30.503 --> 00:03:35.847
As well as a ui-toolbar, so
just think of this as a header component.

52
00:03:35.847 --> 00:03:40.221
That there's a lot of utility in
every one of our applications,

53
00:03:40.221 --> 00:03:43.468
we want all of the header
to be exactly the same.

54
00:03:43.468 --> 00:03:48.213
And so at a high level, what I've done,
from an architectural standpoint,

55
00:03:48.213 --> 00:03:52.739
is I stopped and I said what are things
that I could possibly want to reuse in

56
00:03:52.739 --> 00:03:54.352
maybe another a project?

57
00:03:54.352 --> 00:03:58.975
And so in AngularJS, the idea was to,
if you had something in a controller,

58
00:03:58.975 --> 00:04:00.940
you would put it into a service.

59
00:04:00.940 --> 00:04:05.021
And then as it became used
across the entire application,

60
00:04:05.021 --> 00:04:08.116
then you would put it
in a common directory.

61
00:04:08.116 --> 00:04:13.515
So this is the next evolution of that, is
that it's so common, that you want to put

62
00:04:13.515 --> 00:04:18.870
it into a standalone lib that can now be
imported across multiple applications.

63
00:04:18.870 --> 00:04:24.189
So this is a kind of a fundamental shift
as I started to work with Nx workspaces.

64
00:04:24.189 --> 00:04:29.425
That it's like I can put this in the lib,
my services that I'm calling the server.

65
00:04:29.425 --> 00:04:32.058
That's not really going to change, and

66
00:04:32.058 --> 00:04:36.091
consume it across multiple
applications very effectively.

67
00:04:36.091 --> 00:04:40.595
And then in the apps, it's I'm approaching
this of what is the user going to see?

68
00:04:40.595 --> 00:04:41.751
What are they going to touch?

69
00:04:41.751 --> 00:04:46.925
And so this is typically going to
consist of some very thin component

70
00:04:46.925 --> 00:04:53.307
that most of what they're dealing with is
either data consumption from core data.

71
00:04:53.307 --> 00:04:54.961
Or if something happens,

72
00:04:54.961 --> 00:04:59.332
delegating it back up to communicate
with some top level directory.

73
00:04:59.332 --> 00:05:02.780
In this case today, it'll be core data.

74
00:05:02.780 --> 00:05:06.392
Hey, go, I selected this thing or
I wanna delete this thing, core data,

75
00:05:06.392 --> 00:05:07.925
go do your thing at the server.

76
00:05:07.925 --> 00:05:11.670
But at the same time,
so consuming data but

77
00:05:11.670 --> 00:05:17.507
we need to introduce NgRx then it
kinda delegates back out to that.

78
00:05:17.507 --> 00:05:20.548
So all the business logic goes there.

79
00:05:20.548 --> 00:05:24.131
And then within the dashboard,

80
00:05:24.131 --> 00:05:29.846
I have went ahead and
generated three components.

81
00:05:29.846 --> 00:05:34.088
So I'm thinking this application is going
to have kind of three basic features.

82
00:05:34.088 --> 00:05:38.633
A customers feature,
a projects feature, and

83
00:05:38.633 --> 00:05:42.846
a kind of a home feature or
a home component.

84
00:05:42.846 --> 00:05:44.973
So when you come to the application,
this is what you're going to see,

85
00:05:44.973 --> 00:05:45.510
the home screen.

86
00:05:45.510 --> 00:05:49.654
And then within each
one of these features,

87
00:05:49.654 --> 00:05:53.126
that I've generated it as a module,

88
00:05:53.126 --> 00:05:58.060
so that I can set up specific
routes to that feature.

89
00:05:58.060 --> 00:06:01.132
Which also sets the stage for
us to do lazy loading.

90
00:06:01.132 --> 00:06:08.101
And so by doing it, for
instance let's take the projects feature.

91
00:06:08.101 --> 00:06:13.417
Because this is in a module, that if for
some reason I wanted to pick this up,

92
00:06:13.417 --> 00:06:17.255
it would be very easy to
promote this into a common lib.

93
00:06:17.255 --> 00:06:21.982
And so I generally operate on the concept
of refactoring through promotion where

94
00:06:21.982 --> 00:06:24.978
this is the appropriate abstraction for
this now.

95
00:06:24.978 --> 00:06:29.824
But as you would get new data and
you realize I can use this over here,

96
00:06:29.824 --> 00:06:33.815
well, you just start to promote
from into a common folder.

97
00:06:33.815 --> 00:06:36.926
Or as a common feature or
into a common lib.

98
00:06:36.926 --> 00:06:42.716
And so we have home, projects, customers.

99
00:06:42.716 --> 00:06:48.071
And then within the module that,
I'll zoom this back down,

100
00:06:48.071 --> 00:06:53.012
that we then imported in our
feature modules down here.

101
00:06:53.012 --> 00:06:56.650
And because I went off script just a bit,

102
00:06:56.650 --> 00:07:02.330
that we saw that I wanted to
actually pull in this home feature.

103
00:07:02.330 --> 00:07:07.336
Or this home component, that I also
had to at the module level export it.

104
00:07:08.813 --> 00:07:12.142
&gt;&gt; Lukas Ruebbelke: And so
this is definitely, as we're doing this,

105
00:07:12.142 --> 00:07:15.172
we're coming from the outside, kind of in.

106
00:07:15.172 --> 00:07:18.799
And so I've generated a lot of
this is the broad shape of it.

107
00:07:18.799 --> 00:07:23.590
But you can also, having an Nx workspace,
start very specific.

108
00:07:23.590 --> 00:07:26.581
Of I'm gonna do just one application.

109
00:07:26.581 --> 00:07:28.043
We could build it out.

110
00:07:28.043 --> 00:07:31.207
So we're kinda coming
outside in just a bit so

111
00:07:31.207 --> 00:07:33.881
I wanna lay kind of these high pieces.

112
00:07:33.881 --> 00:07:38.923
Here's the modules, a lib,
a common lib, an application, etc.

113
00:07:38.923 --> 00:07:45.452
But so coming from the outside kind
of in and seeing the broad strokes.

114
00:07:45.452 --> 00:07:49.122
But you could definitely start with I
wanna start with a single application and

115
00:07:49.122 --> 00:07:50.465
build my components there.

116
00:07:50.465 --> 00:07:53.432
And then as I need common libs or
I need additional things,

117
00:07:53.432 --> 00:07:56.351
then abstract them out and
refactor through promotion.

