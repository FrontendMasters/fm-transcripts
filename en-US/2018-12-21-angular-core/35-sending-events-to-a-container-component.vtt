WEBVTT

1
00:00:00.170 --> 00:00:02.840
&gt;&gt; Lukas Ruebbelke: So, data's coming in.

2
00:00:04.640 --> 00:00:09.800
And, what do we do if somebody

3
00:00:09.800 --> 00:00:14.870
selects an item, or
they want to delete an item?

4
00:00:14.870 --> 00:00:15.990
How do we capture that?

5
00:00:15.990 --> 00:00:20.495
Well, just as we captured a click event,

6
00:00:20.495 --> 00:00:25.790
we can create our own
custom event using output.

7
00:00:31.399 --> 00:00:33.533
&gt;&gt; Lukas Ruebbelke: And,
so let's go with selected.

8
00:00:33.533 --> 00:00:36.199
Typically, not always, but

9
00:00:36.199 --> 00:00:41.646
I prefer to use things like selected,
deleted, canceled.

10
00:00:41.646 --> 00:00:42.575
So kind of like past tense.

11
00:00:42.575 --> 00:00:46.063
Like hey, this event happened.

12
00:00:46.063 --> 00:00:53.984
Now the difference is, you need to
initialize this as an eventEmitter.

13
00:00:53.984 --> 00:00:59.121
So when you create an output,
you initialize it as a new eventEmitter.

14
00:00:59.121 --> 00:01:03.185
So it stands to reason that if you have
a DOM event that's emitting an event,

15
00:01:03.185 --> 00:01:05.900
a custom event would also need to do that.

16
00:01:05.900 --> 00:01:11.690
Now, one thing I will also call out is
notice it's imported from angular core,

17
00:01:11.690 --> 00:01:17.410
but if you go down here, there's all sorts
of implementations other than emitter.

18
00:01:17.410 --> 00:01:20.546
I think they actually pulled
this off of node, but

19
00:01:20.546 --> 00:01:24.964
make sure that when you import this,
you get the right eventEmitter.

20
00:01:26.838 --> 00:01:28.361
&gt;&gt; Lukas Ruebbelke: Let's also do deleted.

21
00:01:32.634 --> 00:01:33.695
&gt;&gt; Lukas Ruebbelke: VS code.

22
00:01:35.892 --> 00:01:36.790
&gt;&gt; Lukas Ruebbelke: All right.

23
00:01:39.160 --> 00:01:41.784
&gt;&gt; Lukas Ruebbelke: So now, we have.

24
00:01:43.834 --> 00:01:45.243
&gt;&gt; Lukas Ruebbelke: Some
events we wanna capture here.

25
00:01:47.826 --> 00:01:48.840
&gt;&gt; Lukas Ruebbelke: So, selected.

26
00:01:48.840 --> 00:01:52.190
Notice, that picked that right up.

27
00:01:54.000 --> 00:01:54.850
selectedProject.

28
00:01:56.170 --> 00:02:01.530
And, it's going to take
a parameter of event.

29
00:02:01.530 --> 00:02:05.800
So this is where it got kind
of interesting earlier.

30
00:02:07.280 --> 00:02:09.740
And they may have updated this recently.

31
00:02:09.740 --> 00:02:11.240
But we'll go here.

32
00:02:11.240 --> 00:02:13.368
deleteProject, also event.

33
00:02:19.781 --> 00:02:20.281
&gt;&gt; Lukas Ruebbelke: There we go.

34
00:02:21.830 --> 00:02:22.920
selectProject.

35
00:02:22.920 --> 00:02:24.480
deleteProject.

36
00:02:24.480 --> 00:02:27.960
But we need to trigger said event.

37
00:02:29.410 --> 00:02:31.760
So, on our list item.

38
00:02:34.380 --> 00:02:35.190
&gt;&gt; Lukas Ruebbelke: We can go here.

39
00:02:37.580 --> 00:02:42.360
And, we'll capture the click event,
at the component level.

40
00:02:42.360 --> 00:02:47.120
And then we'll go selected.emit.

41
00:02:47.120 --> 00:02:49.937
And we're just going to
pass it up to project.

42
00:02:49.937 --> 00:02:51.490
So the difference is,

43
00:02:51.490 --> 00:02:55.918
that you're just firing the emit
method on your eventEmitter.

44
00:02:55.918 --> 00:02:57.231
And then if we go down here.

45
00:02:59.928 --> 00:03:03.034
&gt;&gt; Lukas Ruebbelke: To this delete,
I'm gonna go ahead break to a new line.

46
00:03:03.034 --> 00:03:03.777
We'll go click.

47
00:03:06.545 --> 00:03:10.399
&gt;&gt; Lukas Ruebbelke: And
we'll go, deleted.emit.

48
00:03:13.030 --> 00:03:17.007
&gt;&gt; Lukas Ruebbelke: Also
sending the project and

49
00:03:17.007 --> 00:03:21.826
$event.stopImmediatePropa.

50
00:03:21.826 --> 00:03:23.770
Is it propo or propa?

51
00:03:23.770 --> 00:03:28.370
I think it's not gration, but
I think that's propagation.

52
00:03:29.960 --> 00:03:30.480
We'll see here.

53
00:03:30.480 --> 00:03:32.530
&gt;&gt; Speaker 2: How about Gatreon?

54
00:03:32.530 --> 00:03:34.648
&gt;&gt; Lukas Ruebbelke: Gatreon,
that's not good, superhero.

55
00:03:34.648 --> 00:03:42.181
[LAUGH]
Propagation, you know what?

56
00:03:42.181 --> 00:03:44.070
If only there was a device.

57
00:03:45.450 --> 00:03:46.699
I think I'm good, all right.

58
00:03:48.320 --> 00:03:51.570
So now, instead of capturing the click and
handling it in the component,

59
00:03:51.570 --> 00:03:57.816
we're just hooking it to the eventEmitter
and emitting the event up.

60
00:03:59.020 --> 00:04:04.738
So if we go into our
projectsComponent here,

61
00:04:04.738 --> 00:04:08.499
let me go ahead and let's do,

62
00:04:08.499 --> 00:04:12.867
I'm just gonna comment this out.

63
00:04:16.317 --> 00:04:17.290
&gt;&gt; Lukas Ruebbelke: c.log.

64
00:04:22.041 --> 00:04:22.953
&gt;&gt; Lukas Ruebbelke: Delete Project,
project.

65
00:04:27.815 --> 00:04:28.596
&gt;&gt; Lukas Ruebbelke: And.

66
00:04:31.601 --> 00:04:35.036
&gt;&gt; Lukas Ruebbelke: I know what's
up here somewhere, there we go.

67
00:04:40.930 --> 00:04:41.814
&gt;&gt; Lukas Ruebbelke: Select Project.

68
00:04:48.000 --> 00:04:48.721
&gt;&gt; Lukas Ruebbelke: Okay?

69
00:04:53.762 --> 00:04:54.262
&gt;&gt; Lukas Ruebbelke: Let's go over here.

70
00:04:57.351 --> 00:04:59.457
&gt;&gt; Lukas Ruebbelke: And
let's see as we select this.

71
00:05:03.251 --> 00:05:04.590
&gt;&gt; Lukas Ruebbelke: Pretty good.

72
00:05:04.590 --> 00:05:08.710
Also, we can delete project.

73
00:05:08.710 --> 00:05:11.080
This is,
I think kind of what we were expecting.

74
00:05:11.080 --> 00:05:15.350
The difference is we're capturing,
we're creating

75
00:05:15.350 --> 00:05:20.176
an internal eventEmitter that
we're then calling emit, and

76
00:05:20.176 --> 00:05:26.044
essentially broadcasting that event
to capture on the parent component.

77
00:05:26.044 --> 00:05:32.376
&gt;&gt; Speaker 2: Maybe I missed it, how does
the parent component catch that event?

78
00:05:32.376 --> 00:05:38.734
&gt;&gt; Lukas Ruebbelke: So, notice here,
in the parent component

79
00:05:38.734 --> 00:05:44.038
template, and this to me is [SOUND].

80
00:05:44.038 --> 00:05:44.973
This is a thing of beauty.

81
00:05:46.543 --> 00:05:49.928
&gt;&gt; Lukas Ruebbelke: I look at this,
and I have a pretty good idea

82
00:05:49.928 --> 00:05:54.267
what this thing does,
it's a pretty clear contract.

83
00:05:57.910 --> 00:06:01.007
&gt;&gt; Lukas Ruebbelke: I look and immediately
know, it has an input of projects,

84
00:06:01.007 --> 00:06:03.270
I would expect a projects
list to have that.

85
00:06:03.270 --> 00:06:10.370
And it takes a selected event, even so
selected in respond to it and delete it.

86
00:06:10.370 --> 00:06:14.290
So if you ever looked it like
some kind of component API,

87
00:06:14.290 --> 00:06:18.820
I'm easy it is with jquery, a lot like,
what events is this a meeting?

88
00:06:18.820 --> 00:06:20.990
How do I buy into this thing and
do something.

89
00:06:20.990 --> 00:06:21.642
Well, right here.

90
00:06:23.904 --> 00:06:25.180
&gt;&gt; Lukas Ruebbelke: We have it.

91
00:06:25.180 --> 00:06:29.310
This is a clear API, and so

92
00:06:29.310 --> 00:06:34.210
what's fascinating to me is in just a few
lines of code, we're able to express

93
00:06:35.980 --> 00:06:40.190
exactly what this thing does and
how to interact with it.

94
00:06:40.190 --> 00:06:40.690
And.

95
00:06:42.925 --> 00:06:46.685
&gt;&gt; Lukas Ruebbelke: This also,
I think it's pretty amazing.

96
00:06:46.685 --> 00:06:49.080
If we go into the project.

97
00:06:51.868 --> 00:06:52.838
&gt;&gt; Lukas Ruebbelke: ListComponent.

98
00:06:54.788 --> 00:06:59.530
&gt;&gt; Lukas Ruebbelke: Look at all this
logic that I have laying about.

99
00:07:00.710 --> 00:07:03.520
False, there is no logic in here.

100
00:07:04.760 --> 00:07:08.780
In fact, other than its bindings, there
are zero moving parts in this component.

101
00:07:13.871 --> 00:07:16.611
&gt;&gt; Lukas Ruebbelke: So, for
instance, how would you test this?

102
00:07:20.039 --> 00:07:22.004
&gt;&gt; Lukas Ruebbelke: Or rather,
how would you write a unit test for this?

103
00:07:22.004 --> 00:07:26.294
If a unit test is designed to test a unit
of logic and there is no units of logic.

104
00:07:28.714 --> 00:07:30.886
&gt;&gt; Lukas Ruebbelke: I feel like this
is kind of like the shift from,

105
00:07:30.886 --> 00:07:33.727
if you remember like the old
spinning plate hard drives, and

106
00:07:33.727 --> 00:07:38.270
if you've ever slammed your computer
down in anger, and it goes boop, boop.

107
00:07:38.270 --> 00:07:40.970
And I also know you've got
a problem versus a solid state.

108
00:07:42.570 --> 00:07:47.670
These are much harder to break,
because there's no moving pieces.

109
00:07:47.670 --> 00:07:53.070
Sure, you could put bad data in,
and possibly cause something weird.

110
00:07:53.070 --> 00:07:56.210
But, I'm pretty sure that
Angular is not going to break.

111
00:07:56.210 --> 00:08:00.530
And so as a result, you can fairly
reliably say if I have this component, and

112
00:08:00.530 --> 00:08:04.090
I satisfy these inputs, and
I respond to the outputs correctly.

113
00:08:05.320 --> 00:08:09.140
This is not only extremely stable,
extremely portable, but

114
00:08:09.140 --> 00:08:12.650
also very descriptive and
self documenting what it does.

115
00:08:14.300 --> 00:08:17.110
And so what we have here is, I'll finish
the details component in just a moment,

116
00:08:17.110 --> 00:08:22.150
but this is what's called
a presentation component.

117
00:08:22.150 --> 00:08:25.620
Its a opponent that is simply designed for
presentation, and

118
00:08:25.620 --> 00:08:29.800
then capturing events,
and delegating them up.

119
00:08:29.800 --> 00:08:33.610
So remember, I said a component
has two main responsibilities.

120
00:08:33.610 --> 00:08:38.620
This to me optimizes that particular goal.

121
00:08:41.010 --> 00:08:43.989
It's consuming the data it
needs to satisfy the template.

122
00:08:43.989 --> 00:08:48.185
It's capturing events at
the component level, or locally, or

123
00:08:48.185 --> 00:08:53.170
it's capturing it locally and then
putting it out to the parent component.

124
00:08:56.504 --> 00:09:00.213
&gt;&gt; Lukas Ruebbelke: And,
you can very easily, I mean,

125
00:09:00.213 --> 00:09:03.800
without really working too hard,

126
00:09:03.800 --> 00:09:09.628
I could pick this up and
move this to the home component.

127
00:09:09.628 --> 00:09:13.808
And, I could probably blow up entry
module, and get the imports wrong, and

128
00:09:13.808 --> 00:09:17.680
waste 20 minutes but other than that like,
it would be pretty good.

129
00:09:19.120 --> 00:09:23.580
So now what we have, is a component
that just takes imports and outputs.

130
00:09:23.580 --> 00:09:26.950
It's for the most part like solid
state if you will but then,

131
00:09:26.950 --> 00:09:32.220
you have a container component
like the projects component.

132
00:09:32.220 --> 00:09:36.939
And its entire responsibility and concern,

133
00:09:36.939 --> 00:09:43.147
is simply to capture data and
handle the fetching of data and

134
00:09:43.147 --> 00:09:50.310
where that comes from, so
you'll notice here in getProjects.

135
00:09:50.310 --> 00:09:53.730
Its saying hey,
remote service go get me this thing.

136
00:09:53.730 --> 00:09:57.482
But then once it gets it,
then it's simply taking that and

137
00:09:57.482 --> 00:10:02.081
parsing it out or delegating it out
to its presentation components, so

138
00:10:02.081 --> 00:10:04.932
a container component is concerned about.

139
00:10:04.932 --> 00:10:10.246
The implementation details of where
that data is coming from, the query

140
00:10:10.246 --> 00:10:15.925
portion of the I would say application
state, but also the command portion.

141
00:10:15.925 --> 00:10:21.073
So that when something happens,
for instance a deleted event on

142
00:10:21.073 --> 00:10:26.523
the container component,
it is saying I'm gonna capture this.

143
00:10:26.523 --> 00:10:29.007
And I'm going to delegate this out.

144
00:10:32.265 --> 00:10:36.424
&gt;&gt; Lukas Ruebbelke: And what this does,
is it allows you to create these broad

145
00:10:36.424 --> 00:10:41.539
container components,
that is consuming just enough data, again,

146
00:10:41.539 --> 00:10:46.759
to satisfy its template, but
it handles the implementation details.

147
00:10:48.150 --> 00:10:51.630
As well as with something happens at
the child component level that it then

148
00:10:51.630 --> 00:10:57.810
broadcast that back up that is all
happening is, with something happens

149
00:10:57.810 --> 00:11:03.160
on the projects list, it's capturing
it and say, okay, I know what to do.

150
00:11:05.190 --> 00:11:06.910
I'll just ask the son of the server for
you.

151
00:11:07.910 --> 00:11:13.314
And notice this are very thin methods,

152
00:11:13.314 --> 00:11:19.548
there's not a lot
happening as it should be.

153
00:11:19.548 --> 00:11:24.530
So just as a matter of course,
you want to favor fine-grained,

154
00:11:24.530 --> 00:11:26.575
single purpose methods.

155
00:11:26.575 --> 00:11:28.788
And so as we get into testing tomorrow,

156
00:11:28.788 --> 00:11:31.280
this is going to be
a large recurring thing.

157
00:11:32.810 --> 00:11:37.420
It's when you start to break things out to
serve a single purpose, then you know how

158
00:11:37.420 --> 00:11:42.760
very stable, very chordable and very
testable pieces within your application.

159
00:11:45.310 --> 00:11:46.710
All right.

160
00:11:46.710 --> 00:11:47.440
Yes.

161
00:11:47.440 --> 00:11:48.610
&gt;&gt; Speaker 2: So one more question, so

162
00:11:48.610 --> 00:11:54.240
you're passing in from
the projects component template,

163
00:11:54.240 --> 00:11:59.720
the event,
the $event with the actual method.

164
00:11:59.720 --> 00:12:00.220
No, so

165
00:12:00.220 --> 00:12:06.710
it's like project $event that actual
method is taking in a project, right?

166
00:12:06.710 --> 00:12:09.960
&gt;&gt; Lukas Ruebbelke: So,
something's converting that or.

167
00:12:09.960 --> 00:12:15.260
It definitely expects the $event
Which then can be anything.

168
00:12:16.290 --> 00:12:17.550
&gt;&gt; Speaker 2: Anything that you emit.

169
00:12:17.550 --> 00:12:20.510
&gt;&gt; Lukas Ruebbelke: So whatever you emit,
that's being captured as an event.

170
00:12:20.510 --> 00:12:26.560
I believe that's probably like some
defined signature somewhere else.

171
00:12:26.560 --> 00:12:31.210
But, since we're here, let's do this.

172
00:12:32.450 --> 00:12:33.890
Let's just, we'll stick with selected.

173
00:12:35.520 --> 00:12:38.880
Alright, so in selected,
we now have event and project.

174
00:12:40.250 --> 00:12:43.600
Let's go into our project component,

175
00:12:43.600 --> 00:12:48.270
what I need to do is
update this to be event.

176
00:12:50.460 --> 00:12:52.978
Let's go ahead and log this out.

177
00:12:52.978 --> 00:12:59.592
'HELLO!', $event,
if this work this would be fantastic.

178
00:13:01.820 --> 00:13:03.644
&gt;&gt; Lukas Ruebbelke: And then in here.

179
00:13:12.310 --> 00:13:12.810
&gt;&gt; Lukas Ruebbelke: Here we go.

180
00:13:26.621 --> 00:13:28.206
&gt;&gt; Lukas Ruebbelke: So
it might be a single parameter.

181
00:13:28.206 --> 00:13:29.044
Let's see what happens.

182
00:13:29.044 --> 00:13:30.450
I think that's actually
maybe what I ran into.

183
00:13:30.450 --> 00:13:31.600
It's one or the other.

184
00:13:32.850 --> 00:13:38.770
And what on the template itself,
it expect $event.

185
00:13:38.770 --> 00:13:40.979
But we're gonna find out.

186
00:13:40.979 --> 00:13:45.745
Yeah, see, you basically have one thing.

187
00:13:45.745 --> 00:13:52.060
But, if I go here, I can emit(project).

188
00:13:52.060 --> 00:13:53.410
But this is where I think I got burned.

189
00:13:54.670 --> 00:14:02.113
If I go like this here, and
then into the project component.

190
00:14:07.738 --> 00:14:12.583
&gt;&gt; Lukas Ruebbelke: I think
it does not like this, yeah.

191
00:14:12.583 --> 00:14:17.571
So, what it requires because the I
think is to string interpolation

192
00:14:17.571 --> 00:14:20.117
a $event on the template itself.

193
00:14:22.735 --> 00:14:26.153
&gt;&gt; Lukas Ruebbelke: So
she suspect two event here.

194
00:14:26.153 --> 00:14:31.007
And, make sure I didn't leave this
in a weird spot somewhere else.

195
00:14:33.184 --> 00:14:33.976
&gt;&gt; Lukas Ruebbelke: Just clean this up.

196
00:14:38.246 --> 00:14:39.299
&gt;&gt; Lukas Ruebbelke: Good, good, good.

197
00:14:39.299 --> 00:14:41.198
All right.

198
00:14:43.726 --> 00:14:45.430
&gt;&gt; Lukas Ruebbelke: So far, so good.

