WEBVTT

1
00:00:00.330 --> 00:00:03.433
&gt;&gt; Speaker 1: And so what this will
do is once we start to build out kind

2
00:00:03.433 --> 00:00:08.293
of like presentation components, where we
just are fitting observable strings in,

3
00:00:08.293 --> 00:00:12.900
is that we'll take the observable stream
and wrap it and then feed it in that one.

4
00:00:12.900 --> 00:00:18.291
So what this will also do is
the async pipe when this component

5
00:00:18.291 --> 00:00:23.372
is taken off the screen that
it will unsubscribe for you.

6
00:00:23.372 --> 00:00:27.739
And so
what we're doing here just to summarize,

7
00:00:27.739 --> 00:00:32.000
is that in the project service,
we're going,

8
00:00:32.000 --> 00:00:36.810
calling all which is returning
this HttpClient kit.

9
00:00:38.210 --> 00:00:43.677
Which is returning an observable or
the result wrapped in an observable.

10
00:00:43.677 --> 00:00:48.220
Now in the component,
we're calling this, and,

11
00:00:48.220 --> 00:00:51.820
let me just take this typing off for now.

12
00:00:54.830 --> 00:00:58.658
We're saying, return the stream, and
assign it to this local variable.

13
00:00:58.658 --> 00:01:05.694
Now, we could unwrap it in our component
class, but more importantly we can,

14
00:01:05.694 --> 00:01:10.823
in our template using this async pipe,
unwrap it there.

15
00:01:10.823 --> 00:01:15.588
Which is, if this were, for instance,
mat-list-item was a child component,

16
00:01:15.588 --> 00:01:19.540
then you would pass that in via
the input and unwrap it at that point.

17
00:01:23.682 --> 00:01:28.576
&gt;&gt; Speaker 1: Couple of
different things here,

18
00:01:28.576 --> 00:01:34.817
just to wrap this up,
is we could do create,

19
00:01:34.817 --> 00:01:38.867
which would take a project,

20
00:01:38.867 --> 00:01:45.806
return this.httpClient to create,
you post.

21
00:01:45.806 --> 00:01:50.700
And so this is getting
a little crafty right here.

22
00:01:50.700 --> 00:01:53.200
And so
I'm going to create a convenience method.

23
00:01:54.630 --> 00:02:01.215
We'll go getUrl and
we're just going to return this,

24
00:02:01.215 --> 00:02:06.664
so now what we can do
is just go this.getUrl.

25
00:02:09.020 --> 00:02:12.851
&gt;&gt; Speaker 1: For now create,
we can do a similar thing,

26
00:02:12.851 --> 00:02:17.438
this.getUrl, and
then just pass in the project.

27
00:02:20.094 --> 00:02:24.580
&gt;&gt; Speaker 1: Now if you
wanted to update an object.

28
00:02:24.580 --> 00:02:27.990
And so, this is what I like about
REST APIs is they are conventional.

29
00:02:29.430 --> 00:02:32.510
We can go update and delete.

30
00:02:38.824 --> 00:02:40.710
&gt;&gt; Speaker 1: For update we'll do patch.

31
00:02:40.710 --> 00:02:43.130
And for delete we'll do delete.

32
00:02:43.130 --> 00:02:47.949
The difference is the URL is
now going to have an id, so

33
00:02:47.949 --> 00:02:53.428
it'll be that forward slash
projects with the id on the end.

34
00:02:58.073 --> 00:03:01.470
&gt;&gt; Speaker 1: So I'm going to
just call this out here ForId.

35
00:03:03.762 --> 00:03:05.980
&gt;&gt; Speaker 1: In this case,
we'll pass in the project id.

36
00:03:05.980 --> 00:03:08.770
And and in this case,

37
00:03:08.770 --> 00:03:14.090
we'll just pass in like a projectId.

38
00:03:14.090 --> 00:03:15.499
We won't have to put in the whole payload.

39
00:03:25.216 --> 00:03:29.400
&gt;&gt; Speaker 1: And delete doesn't
require a payload, whereas update does.

40
00:03:30.670 --> 00:03:33.140
And then let's create this
one last convenience method.

41
00:03:35.050 --> 00:03:38.091
And we'll go getUrlForId.

42
00:03:42.040 --> 00:03:44.459
&gt;&gt; Speaker 1: Which is
then going to call return,

43
00:03:50.439 --> 00:03:52.578
&gt;&gt; Speaker 1: getUrl.

44
00:03:58.515 --> 00:04:02.693
&gt;&gt; Speaker 1: There we go, so just
abstracting kind of these methods into

45
00:04:02.693 --> 00:04:05.710
smaller methods that we can then compose.

46
00:04:06.960 --> 00:04:10.370
There we go, and so now.

47
00:04:10.370 --> 00:04:14.450
&gt;&gt; Speaker 2: I think you made
a typo down on the last line.

48
00:04:14.450 --> 00:04:18.399
&gt;&gt; Speaker 1: The last line.
&gt;&gt; Speaker 2: ProjectId, it's.

49
00:04:18.399 --> 00:04:22.019
For update, for update is different.

50
00:04:22.019 --> 00:04:28.700
&gt;&gt; Speaker 1: Yeah, so
update is an actual project object.

51
00:04:28.700 --> 00:04:29.877
So we give project an id and

52
00:04:29.877 --> 00:04:33.523
then we're passing in the project that we
want to actually update at the server.

53
00:04:36.924 --> 00:04:41.532
&gt;&gt; Speaker 1: And so
now that we have these methods,

54
00:04:41.532 --> 00:04:46.800
if we go to,
I'll just do one of them here.

55
00:04:46.800 --> 00:04:48.440
We'll go deleteProject.

56
00:04:49.690 --> 00:04:50.680
We'll take the project.

57
00:04:51.990 --> 00:04:57.320
And then we'll just go
this.projectsService.delete.

58
00:04:57.320 --> 00:05:01.110
And we'll pass in the project.id.

59
00:05:09.090 --> 00:05:10.313
&gt;&gt; Speaker 1: And
then what I can do is subscribe.

60
00:05:10.313 --> 00:05:17.084
And then when I get a result, what
we'll do is we'll just rehydrate this,

61
00:05:17.084 --> 00:05:22.459
so we'll just go this.get,
there is a couple of different

62
00:05:22.459 --> 00:05:27.420
ways to do this it just depends
on your data structure.

63
00:05:27.420 --> 00:05:30.730
Typically, these things if you
have some mutations or server,

64
00:05:30.730 --> 00:05:34.210
you just rehydrate your data structure.

65
00:05:34.210 --> 00:05:39.540
So now in our template,
if we go into our list item,

66
00:05:39.540 --> 00:05:42.120
you'll notice here that we
have this close button.

67
00:05:42.120 --> 00:05:44.306
Well, click,

68
00:05:48.841 --> 00:05:52.750
&gt;&gt; Speaker 1: Delete, and project.

69
00:06:01.296 --> 00:06:02.328
&gt;&gt; Speaker 1: There we go.

70
00:06:04.525 --> 00:06:05.645
&gt;&gt; Speaker 1: deleteProject.

71
00:06:08.587 --> 00:06:11.494
&gt;&gt; Speaker 1: Now one thing we
are going to need to do is,

72
00:06:11.494 --> 00:06:16.250
you'll notice here that this
button is on this button.

73
00:06:16.250 --> 00:06:19.720
And we have a click event
handler on the list item, and

74
00:06:19.720 --> 00:06:23.050
we want to attach a click
handler on the delete button.

75
00:06:24.450 --> 00:06:29.290
So, if I click on this,
it's not really going to trigger my delete

76
00:06:30.480 --> 00:06:33.710
method, but that native DOM
event is going to bubble up and

77
00:06:33.710 --> 00:06:38.170
it's going to trigger this one, as well.

78
00:06:38.170 --> 00:06:38.930
So, that's kind of weird.

79
00:06:40.300 --> 00:06:43.388
And so, what you'll do is you'll go here.

80
00:06:43.388 --> 00:06:48.303
Event.stop,
&gt;&gt; Speaker 1: I

81
00:06:48.303 --> 00:06:50.770
believe it's ImmediatePropagation.

82
00:06:55.457 --> 00:06:56.490
&gt;&gt; Speaker 1: See if
it gives me any hints.

83
00:06:56.490 --> 00:07:03.571
I'll tell you what,
&gt;&gt; Speaker 1: Yep, all right.

84
00:07:05.560 --> 00:07:09.582
Let me just break this down to
the second line so we can read it.

85
00:07:09.582 --> 00:07:10.082
There we go.

86
00:07:14.803 --> 00:07:20.491
&gt;&gt; Speaker 1: And now if I click this,
you can see that it was deleted,

87
00:07:20.491 --> 00:07:23.860
and let's do this one.

88
00:07:23.860 --> 00:07:31.480
You can see now that we're calling delete,
and so let me just boost this up, delete.

89
00:07:32.820 --> 00:07:38.840
And there's really no payload, but you
can see it's going to projects3, delete.

90
00:07:38.840 --> 00:07:42.868
And then if we go into our db.json,
down here,

91
00:07:42.868 --> 00:07:48.530
we can verify that it was indeed
deleted because we're down to 2.

92
00:07:51.300 --> 00:07:59.901
&gt;&gt; Speaker 1: So just to summarize,
&gt;&gt; Speaker 1: In our ProjectsService,

93
00:07:59.901 --> 00:08:05.366
HttpClient which exposes rest verbs.

94
00:08:05.366 --> 00:08:10.552
So, for create, update, and
delete, as well as reads, so

95
00:08:10.552 --> 00:08:15.639
read is get, create is post,
typically I'll use patch for

96
00:08:15.639 --> 00:08:19.490
update, and delete for delete.

97
00:08:19.490 --> 00:08:24.974
Then, it's a matter of getting
your endpoints, so getUrl,

98
00:08:24.974 --> 00:08:30.885
or get a URL with an ID, and
then setting the appropriate payload.

