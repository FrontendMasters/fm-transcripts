WEBVTT

1
00:00:00.420 --> 00:00:06.050
&gt;&gt; Lukas Ruebbelke: So every property or
method that's on your component,

2
00:00:06.050 --> 00:00:12.480
you now have access to, and now you
can test, like, is this property set?

3
00:00:12.480 --> 00:00:14.700
Can I call this property?

4
00:00:14.700 --> 00:00:16.790
For instance,
if we go to projects.component,

5
00:00:16.790 --> 00:00:21.160
let's look at selectProject.

6
00:00:21.160 --> 00:00:27.296
So now, if we go back here,
we could do something like,

7
00:00:27.296 --> 00:00:30.961
it 'should select a project'.

8
00:00:39.172 --> 00:00:45.927
&gt;&gt; Lukas Ruebbelke: And what we can do
is we can go component.selectProject.

9
00:00:48.615 --> 00:00:50.162
&gt;&gt; Lukas Ruebbelke: So
I'm jumping around here.

10
00:00:59.210 --> 00:01:06.300
&gt;&gt; Lukas Ruebbelke: And If I go in here,
we have this emptyProject.

11
00:01:06.300 --> 00:01:13.020
So I'm just going to pick this up, and
because I may want to use this again,

12
00:01:13.020 --> 00:01:17.410
I'm just going to paste this
in the top of my test spec.

13
00:01:18.510 --> 00:01:21.010
It kind of is like,
do I put it in kind of at the top?

14
00:01:21.010 --> 00:01:22.300
Do I make it generally available?

15
00:01:22.300 --> 00:01:25.150
Do I just recreate it every single time?

16
00:01:25.150 --> 00:01:26.880
And I don't have a strong opinion on that.

17
00:01:26.880 --> 00:01:29.544
Typically, if something
becomes super annoying,

18
00:01:29.544 --> 00:01:32.449
if I'm sick of recreating this
same thing over and over,

19
00:01:32.449 --> 00:01:35.426
then I'll basically promote
it to the general test spec.

20
00:01:35.426 --> 00:01:39.546
Or even, if you're doing
something over and over, and over,

21
00:01:39.546 --> 00:01:41.580
you may promote that to a mock.

22
00:01:41.580 --> 00:01:45.581
And so there's some ways to,
depending on how you're using it,

23
00:01:45.581 --> 00:01:47.270
then promote it for reuse.

24
00:01:48.790 --> 00:01:52.750
Which you'll also see quite frequently,

25
00:01:52.750 --> 00:01:57.420
is some utility classes for
generating some of this mock stuff.

26
00:01:57.420 --> 00:02:00.852
So a lot of times people will create
some utilities that I know there

27
00:02:00.852 --> 00:02:02.220
are exist utilities for.

28
00:02:02.220 --> 00:02:04.640
I'm not even gonna hard code this,
I'm just going to call a factory, and

29
00:02:04.640 --> 00:02:06.770
it's gonna generate something for me.

30
00:02:08.300 --> 00:02:13.810
So now what we can say is,
when I call selectProject and

31
00:02:13.810 --> 00:02:19.390
I pass in emptyProject, or
we're going to call this.

32
00:02:19.390 --> 00:02:21.570
And now when do this, what do we expect?

33
00:02:21.570 --> 00:02:24.945
Well, we expect that

34
00:02:24.945 --> 00:02:33.210
component.selectedProject toBe
emptyProject.

35
00:02:33.210 --> 00:02:37.669
Now, I make it bit here because
I'm never quite sure toBe or

36
00:02:37.669 --> 00:02:40.630
toEqual, one is strict and one is not.

37
00:02:40.630 --> 00:02:48.368
But if this fails, then we'll just switch
it to toEqual and that should work.

38
00:02:53.110 --> 00:02:54.026
&gt;&gt; Lukas Ruebbelke: I'm in suspense.

39
00:02:55.867 --> 00:02:56.865
&gt;&gt; Lukas Ruebbelke: All right, so

40
00:02:56.865 --> 00:03:00.870
in the projects.component
it should select a project.

41
00:03:00.870 --> 00:03:05.300
So this actually passed, and so
I'm feeling super good about myself.

