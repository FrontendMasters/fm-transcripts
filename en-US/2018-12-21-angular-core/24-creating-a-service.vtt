WEBVTT

1
00:00:00.000 --> 00:00:03.280
&gt;&gt; Lukas Ruebbelke: So
we just talked about routing and we saw,

2
00:00:03.280 --> 00:00:09.125
in a very interesting, roundabout way,
how to do lazy loading in routing.

3
00:00:09.125 --> 00:00:14.580
So now, we're seeing how to compose or
navigate across components.

4
00:00:14.580 --> 00:00:19.726
So this is, I think of kind of
a horizontal kind of construction as

5
00:00:19.726 --> 00:00:24.890
you're assembling things
horizontally based on a route table.

6
00:00:24.890 --> 00:00:28.228
So this route goes here,
this route goes here, and so

7
00:00:28.228 --> 00:00:30.163
I think of this as horizontal.

8
00:00:30.163 --> 00:00:36.499
Now, in our project component,
we have this data structure here,

9
00:00:36.499 --> 00:00:41.622
projects, that right now
is local to this component.

10
00:00:41.622 --> 00:00:46.694
So obviously, this is not going to scale,
the question is

11
00:00:46.694 --> 00:00:52.708
what happens if the home component
is the project or something else?

12
00:00:52.708 --> 00:00:56.721
And so
what I want to talk about is services,

13
00:00:56.721 --> 00:01:00.526
how to create them, how to consume them.

14
00:01:00.526 --> 00:01:08.291
And then we'll just go right into
communicating with a REST endpoint.

15
00:01:08.291 --> 00:01:13.349
So, now that we have this kind
of project components here,

16
00:01:13.349 --> 00:01:19.432
let's go ahead and abstract out
the data structure that we put in line.

17
00:01:19.432 --> 00:01:22.322
Let's move it to a service and

18
00:01:22.322 --> 00:01:27.649
start to kind of iterate on that,
to make this better.

19
00:01:27.649 --> 00:01:32.899
So the first thing that we're going to
do is, let's generate a project service.

20
00:01:32.899 --> 00:01:37.748
So in our command line,
ng g s for service and

21
00:01:37.748 --> 00:01:40.762
we'll go features, and so

22
00:01:40.762 --> 00:01:46.014
what I'm doing here is
I'm going features/.

23
00:01:46.014 --> 00:01:51.827
So I'm saying in wherever I generate this,
I want this to be in a feature's folder.

24
00:01:51.827 --> 00:01:58.360
So Francis will generate or I'll generate
an interface for the projects as well.

25
00:01:58.360 --> 00:02:04.060
So actually that features
as projects/projects.

26
00:02:04.060 --> 00:02:10.397
And then let's go, project=core-data and

27
00:02:10.397 --> 00:02:17.879
let's give this is a d for
dry run and see what happens.

28
00:02:17.879 --> 00:02:19.278
All right, so you can see here.

29
00:02:19.278 --> 00:02:23.533
lib/projects/projects service, as so.

30
00:02:23.533 --> 00:02:27.365
So let's go ahead and take the flag off.

31
00:02:27.365 --> 00:02:33.050
Now what I'm also going to do,
since we're here,

32
00:02:33.050 --> 00:02:37.557
is I'm going to generate an interface.

33
00:02:37.557 --> 00:02:42.527
So ng g i for interface,
we're going to go projects and

34
00:02:42.527 --> 00:02:47.172
because this is an interface for
a single project,

35
00:02:47.172 --> 00:02:53.886
we are going to leave the singular,
and we'll go project=core-data.

36
00:02:55.938 --> 00:02:56.668
&gt;&gt; Lukas Ruebbelke: There we go.

37
00:02:56.668 --> 00:03:01.170
All right, so now let's go ahead, and

38
00:03:01.170 --> 00:03:07.046
I'm gonna just put this down for a second.

39
00:03:07.046 --> 00:03:11.509
Let's pick up this structure and well,

40
00:03:11.509 --> 00:03:15.324
we'll leave it here for a second.

41
00:03:15.324 --> 00:03:19.819
But let's navigate to our project service.

42
00:03:22.904 --> 00:03:25.373
&gt;&gt; Lukas Ruebbelke: And so,
I kind of hopped right to it.

43
00:03:25.373 --> 00:03:30.359
But if anybody's wondering where
that is at, it's in core-data, lib,

44
00:03:30.359 --> 00:03:32.506
projects, projects service.

45
00:03:32.506 --> 00:03:37.371
And then what we can do is let's go,
and we'll go private.

46
00:03:37.371 --> 00:03:41.327
And so this is a compile time,
it'll check this.

47
00:03:41.327 --> 00:03:48.126
But at runtime, there's really no concept
in essentially private or public.

48
00:03:48.126 --> 00:03:52.042
But nonetheless, I think it's good for

49
00:03:52.042 --> 00:03:56.419
indicating intent is
that I would prefer that

50
00:03:56.419 --> 00:04:01.140
people not access this directly,
but instead,

51
00:04:01.140 --> 00:04:07.839
let's create an all method that
just returns the stopped projects.

52
00:04:08.995 --> 00:04:11.023
&gt;&gt; Lukas Ruebbelke: And
that's not, there we go.

53
00:04:11.023 --> 00:04:15.181
Stopped projects and

54
00:04:15.181 --> 00:04:20.593
let's also,
&gt;&gt; Lukas Ruebbelke: I'm going

55
00:04:20.593 --> 00:04:25.342
to copy the guts of one
of these objects and

56
00:04:25.342 --> 00:04:32.545
let's go into project.ts and
let's define this interface.

57
00:04:34.766 --> 00:04:37.289
&gt;&gt; Lukas Ruebbelke: So
we'll do id as a string.

58
00:04:39.356 --> 00:04:42.598
&gt;&gt; Lukas Ruebbelke: Actually,
most of these are going to be a string.

59
00:04:44.172 --> 00:04:53.057
&gt;&gt; Lukas Ruebbelke: details,
&gt;&gt; Lukas Ruebbelke: Just

60
00:04:53.057 --> 00:04:54.806
because it says string,
doesn't mean it is a string.

61
00:04:54.806 --> 00:05:00.528
We'll go number, and we'll go Boolean.

62
00:05:05.547 --> 00:05:06.167
&gt;&gt; Lukas Ruebbelke: And so,

63
00:05:06.167 --> 00:05:11.850
now we're saying any project object
that we reference in the application,

64
00:05:11.850 --> 00:05:16.760
it needs to appear to this interface,
which allows us to do this.

65
00:05:22.528 --> 00:05:25.595
&gt;&gt; Lukas Ruebbelke: One,
is we can strongly type this so

66
00:05:25.595 --> 00:05:30.826
we can say this is a project,
or rather an array of projects.

67
00:05:30.826 --> 00:05:34.014
And so
notice that I need to import this here.

68
00:05:34.014 --> 00:05:39.544
You can also do it as a generic,
so you could go like this.

69
00:05:39.544 --> 00:05:47.213
For some reason, VS Code thinks every time
I do a generic, that that's an HTML tag.

70
00:05:47.213 --> 00:05:53.701
Whatever, I personally, for me, for
this form, you can also go here.

71
00:05:53.701 --> 00:05:58.230
And you can say when I call all, that
I'm going to get an array of projects.

72
00:06:01.051 --> 00:06:02.580
&gt;&gt; Lukas Ruebbelke: And so
we know what's coming out of it.

73
00:06:02.580 --> 00:06:07.551
And specifically, we can click in here,
and you can see this.

74
00:06:07.551 --> 00:06:11.849
So this is a really nice way of
indicating not only to your IDE,

75
00:06:11.849 --> 00:06:15.982
but other developers,
like this is what this thing is, and

76
00:06:15.982 --> 00:06:18.475
this is what you can expect from it.

77
00:06:18.475 --> 00:06:23.269
And so in our,
&gt;&gt; Lukas Ruebbelke: CoreDataModule.

78
00:06:25.745 --> 00:06:32.168
&gt;&gt; Lukas Ruebbelke: Let's go ahead and,
&gt;&gt; Lukas Ruebbelke: We'll wire this up.

79
00:06:32.168 --> 00:06:35.364
First things first, let's go here.

80
00:06:38.604 --> 00:06:43.351
&gt;&gt; Lukas Ruebbelke: And
CoreDataModule, and then we'll go,

81
00:06:53.365 --> 00:06:53.865
&gt;&gt; Lukas Ruebbelke: ProjectsService.

82
00:06:58.378 --> 00:07:03.712
&gt;&gt; Lukas Ruebbelke: Then we'll do just,
&gt;&gt; Lukas Ruebbelke: One

83
00:07:03.712 --> 00:07:06.610
thing you wanna avoid as well is for
circular reference.

84
00:07:06.610 --> 00:07:11.338
You can see here, it's wanting to
import from workshop core-data while

85
00:07:11.338 --> 00:07:13.482
we're in workshop core-data.

86
00:07:13.482 --> 00:07:19.482
And so, VS Code doesn't really have
a good way of knowing that, and

87
00:07:19.482 --> 00:07:24.765
so if you're in a particular,
kind of like a scoped space.

88
00:07:24.765 --> 00:07:31.751
Then, it's really helpful to just pay
attention to where this is coming from,

89
00:07:31.751 --> 00:07:38.275
and work within that particular,
&gt;&gt; Lukas Ruebbelke: Kind

90
00:07:38.275 --> 00:07:40.440
of playground if you will.

91
00:07:44.513 --> 00:07:46.851
&gt;&gt; Lukas Ruebbelke: Here we go,
so let's clean this up.

92
00:08:09.787 --> 00:08:12.882
&gt;&gt; Lukas Ruebbelke: Then I'll tap
back into our CoreDataModule.

93
00:08:12.882 --> 00:08:19.689
And we will set this up as our providers.

94
00:08:19.689 --> 00:08:26.124
And within here, we are going to define

95
00:08:26.124 --> 00:08:31.586
our ProjectsService, like so.

96
00:08:33.799 --> 00:08:38.777
&gt;&gt; Lukas Ruebbelke: After getting
bit on the route example,

97
00:08:38.777 --> 00:08:43.610
I'm super paranoid about getting this

98
00:08:43.610 --> 00:08:47.723
just right or it'll fall apart.

99
00:08:47.723 --> 00:08:53.308
All right, so now that we have our
module that has a ProjectsService,

100
00:08:53.308 --> 00:08:56.160
or it's registered as a provider.

101
00:08:56.160 --> 00:09:01.086
Let's go into our project component,

102
00:09:01.086 --> 00:09:04.818
and let's declare this, but

103
00:09:04.818 --> 00:09:10.950
we're not going to do
anything with it just yet.

104
00:09:10.950 --> 00:09:13.718
So when you have a service, and

105
00:09:13.718 --> 00:09:18.627
you need to get it into a component,
or anywhere else.

106
00:09:18.627 --> 00:09:22.414
You can use dependency injection, so

107
00:09:22.414 --> 00:09:27.395
you pass it in via a parameter
to the constructor.

108
00:09:27.395 --> 00:09:29.578
So I'll go ProjectsService.

109
00:09:35.279 --> 00:09:36.728
&gt;&gt; Lukas Ruebbelke: There we go.

110
00:09:41.704 --> 00:09:43.064
&gt;&gt; Lukas Ruebbelke: See
what this is angry about.

111
00:09:53.631 --> 00:09:58.579
&gt;&gt; Lukas Ruebbelke: Okay, and so
now that we have injected this It is

112
00:09:58.579 --> 00:10:03.665
available for
us to use elsewhere with a caveat.

113
00:10:03.665 --> 00:10:08.101
So one of the things with
TypeScript that happens,

114
00:10:08.101 --> 00:10:14.097
that does not happen in ES6 is this
idea of constructor assignment.

115
00:10:14.097 --> 00:10:20.955
So if you've done the ES6,
what you would have to do is something

116
00:10:20.955 --> 00:10:26.456
like this.projectsService and
then inject this.

117
00:10:31.181 --> 00:10:32.820
&gt;&gt; Lukas Ruebbelke: And
then when this comes in, and

118
00:10:32.820 --> 00:10:34.594
then go this.projectsService.

119
00:10:34.594 --> 00:10:39.619
And so when I do angular jest in ES6,
this is basically what

120
00:10:39.619 --> 00:10:45.047
I have to do is take a parameter
because scope to that function and

121
00:10:45.047 --> 00:10:49.386
then assign a local member so
that it is available.

122
00:10:49.386 --> 00:10:54.952
With TypeScript, what it would
do is if you add it in public or

123
00:10:54.952 --> 00:10:59.115
private so essentially an access modified.

124
00:10:59.115 --> 00:11:01.489
It will go ahead and say,

125
00:11:01.489 --> 00:11:06.813
clearly this needs to be a part or
a member of this class.

126
00:11:06.813 --> 00:11:10.353
Because you're saying I want to
modify the accessibility of this.

127
00:11:10.353 --> 00:11:15.397
So public, private, what this does is
under the hood it just takes this and

128
00:11:15.397 --> 00:11:17.573
assigns that to a local member.

129
00:11:17.573 --> 00:11:24.349
So what you can do now is, we can go here,
and let's say getProjects().

130
00:11:26.618 --> 00:11:30.552
&gt;&gt; Lukas Ruebbelke: And
we'll go this.projects = this, and

131
00:11:30.552 --> 00:11:33.400
noticed it picked it right up.

132
00:11:37.089 --> 00:11:40.730
&gt;&gt; Lukas Ruebbelke: Now what I wonder
is if I took off this modifier.

133
00:11:40.730 --> 00:11:45.365
Notice here, it's like I don't know
where this is because it's just

134
00:11:45.365 --> 00:11:49.388
now just a method or
a parameter to a function and that's it.

135
00:11:49.388 --> 00:11:53.225
But the minute and
this is a little bit of TypeScript magic,

136
00:11:53.225 --> 00:11:58.780
the minute you go like this, then it's
like I don't know what that is, hooray.

137
00:11:58.780 --> 00:12:03.907
So,
&gt;&gt; Lukas Ruebbelke: We have this method,

138
00:12:03.907 --> 00:12:08.270
getProjects, now we need to call it,
how do we do that?

139
00:12:08.270 --> 00:12:13.552
So I held off talking about
this in the components piece,

140
00:12:13.552 --> 00:12:20.827
because I wanted to talk about it in
the context of what an asynchronous frame.

141
00:12:24.278 --> 00:12:28.635
&gt;&gt; Lukas Ruebbelke: When you have
a component that is relying on data,

142
00:12:28.635 --> 00:12:31.869
that is potentially asynchronous.

143
00:12:31.869 --> 00:12:37.876
When your component is initialized,

144
00:12:37.876 --> 00:12:44.634
if you do something like this.localValue

145
00:12:44.634 --> 00:12:49.523
= this.remoteValue per se.

146
00:12:49.523 --> 00:12:50.890
Like remote asynch value.

147
00:12:53.285 --> 00:12:54.556
&gt;&gt; Lukas Ruebbelke: This
is just pseudocode.

148
00:12:54.556 --> 00:12:55.994
When is the constructor fire?

149
00:12:58.482 --> 00:13:01.124
&gt;&gt; Lukas Ruebbelke: Just the second you
instantiate a class, it's immediate.

150
00:13:01.124 --> 00:13:06.822
And so, you may reference something
locally that doesn't exist yet.

151
00:13:06.822 --> 00:13:10.320
Because there's an asynchronous operation
happening that's going to fetch

152
00:13:10.320 --> 00:13:10.957
that for you.

153
00:13:10.957 --> 00:13:15.534
And so
angular has exposed various life-cycle

154
00:13:15.534 --> 00:13:20.683
hooks of a component such as
being added to the stage,

155
00:13:20.683 --> 00:13:25.385
being initialized,
being taken off the stage.

156
00:13:25.385 --> 00:13:28.650
So that when certain things
happen in your application,

157
00:13:28.650 --> 00:13:31.107
you can then respond to that efficiently.

158
00:13:31.107 --> 00:13:37.467
So this is actually a really good way
to optimize your application, and

159
00:13:37.467 --> 00:13:44.676
so you can for instance, do interesting
things like turn off certain bindings.

160
00:13:44.676 --> 00:13:48.093
And then manually within
your lifestyle hooks,

161
00:13:48.093 --> 00:13:52.357
manually kind of update those things and
be very efficient.

162
00:13:52.357 --> 00:13:57.824
So Leonardo has a pretty good talk,
he did it ng-vikings a few years ago,

163
00:13:57.824 --> 00:14:03.134
where they were able to massively improve
the performance of their application

164
00:14:03.134 --> 00:14:08.206
by delegating a lot of the heavy lifting
in a component life-cycle hooks and

165
00:14:08.206 --> 00:14:10.366
not using the default binding.

166
00:14:10.366 --> 00:14:14.463
So in this case, ngOnInit is fired
when basically all of the data or

167
00:14:14.463 --> 00:14:17.915
all of the bindings for
a component has been satisfied.

168
00:14:17.915 --> 00:14:21.808
So kinda the default is,
this is the safest place to put something.

169
00:14:21.808 --> 00:14:27.198
And so from here,
ngOnInit will go getProjects.

170
00:14:27.198 --> 00:14:35.827
We'll save this, what we'll also do is
just go ahead and just scope these out.

171
00:14:35.827 --> 00:14:36.955
This is a Project.

172
00:14:51.235 --> 00:14:54.304
&gt;&gt; Lukas Ruebbelke: VS Code has failed me,
there we go.

173
00:14:54.304 --> 00:14:56.789
And we'll set this to a Project as well.

174
00:15:05.326 --> 00:15:06.275
&gt;&gt; Lukas Ruebbelke: Still good.

175
00:15:06.275 --> 00:15:11.309
Let's see,
&gt;&gt; Lukas Ruebbelke: At

176
00:15:11.309 --> 00:15:12.181
least it's rendering.

177
00:15:12.181 --> 00:15:13.964
Let's double check.

178
00:15:13.964 --> 00:15:16.122
All right, I have to be super certain.

179
00:15:16.122 --> 00:15:19.598
&gt;&gt; Speaker 2: You had some
red squiggles on the end.

180
00:15:19.598 --> 00:15:25.775
&gt;&gt; Lukas Ruebbelke: That is,
&gt;&gt; Lukas Ruebbelke: I

181
00:15:25.775 --> 00:15:30.625
really dig VS Code but
I guess some false positives sometimes.

182
00:15:30.625 --> 00:15:31.703
So I may wanna take a break.

183
00:15:31.703 --> 00:15:38.080
I actually bet if I stop and restarted it,
some of those things would go away.

184
00:15:38.080 --> 00:15:41.677
So we're definitely pulling
from the remote server.

185
00:15:41.677 --> 00:15:45.481
Well, not the remote, the remote service.

