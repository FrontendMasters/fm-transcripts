WEBVTT

1
00:00:00.000 --> 00:00:04.967
&gt;&gt; Lukas Ruebbelke: What we want to do
is we want to build and work on this.

2
00:00:04.967 --> 00:00:08.963
And so as I do this, I'm going to talk
about the structure of a component.

3
00:00:08.963 --> 00:00:13.919
I'm going to talk about property binding,
event binding, and

4
00:00:13.919 --> 00:00:20.252
also some of the structural directives and
how to do things within your template,

5
00:00:20.252 --> 00:00:25.154
and some of the functionality
that's provided from Angular.

6
00:00:25.154 --> 00:00:31.869
So if we go into our,
&gt;&gt; Lukas Ruebbelke: Projects.component.ts,

7
00:00:31.869 --> 00:00:36.728
let's talk about the basic
structure of a component.

8
00:00:36.728 --> 00:00:42.084
So in Angular everything is a class.

9
00:00:42.084 --> 00:00:46.890
For the most part, 99.9%,
everything you do is going to be a class.

10
00:00:46.890 --> 00:00:52.054
In the case of our ProjectsComponent,
notice export class,

11
00:00:52.054 --> 00:00:57.133
ProjectsComponent and
we're implementing an interface.

12
00:00:57.133 --> 00:01:00.603
And so if it's a service,
same exact thing.

13
00:01:00.603 --> 00:01:05.067
It's export class Projects
service whatever.

14
00:01:05.067 --> 00:01:07.607
So everything at the core is a class, and

15
00:01:07.607 --> 00:01:11.511
then we use this metadata to
essentially decorate our class.

16
00:01:11.511 --> 00:01:15.397
And this is where Angular
gets attached to this, and so

17
00:01:15.397 --> 00:01:18.109
I'll talk about this more tomorrow.

18
00:01:18.109 --> 00:01:20.861
And so I'll talk about this tomorrow, but

19
00:01:20.861 --> 00:01:25.605
when you're testing an Angular component
or a service, you can test it in

20
00:01:25.605 --> 00:01:30.440
isolation in just the class itself,
or you can use the Angular utilities.

21
00:01:30.440 --> 00:01:35.511
But in this metadata,
we can tell Angular this is

22
00:01:35.511 --> 00:01:40.960
how we want to hook this
class into our application.

23
00:01:40.960 --> 00:01:46.378
And so notice that we have our
imperative logic in ProjectsComponent,

24
00:01:46.378 --> 00:01:48.012
so this is our logic.

25
00:01:48.012 --> 00:01:52.891
But then we have, well,
we're connecting it to a template.

26
00:01:52.891 --> 00:01:57.648
So, this is where we're saying this
component gets compiled with this

27
00:01:57.648 --> 00:01:58.449
template.

28
00:01:58.449 --> 00:02:01.762
We're also able to attach a style sheet.

29
00:02:01.762 --> 00:02:05.392
And so
everything is fairly self-encapsulated.

30
00:02:05.392 --> 00:02:09.532
And one interesting and important piece,

31
00:02:09.532 --> 00:02:13.216
is that you'll notice the selector.

32
00:02:13.216 --> 00:02:16.537
And so this is how, other than routing,

33
00:02:16.537 --> 00:02:20.454
how you get a component
into your application.

34
00:02:20.454 --> 00:02:25.122
And so, if we go to back to our app,
component.html,

35
00:02:25.122 --> 00:02:29.288
down here you'll notice it's app-projects.

36
00:02:29.288 --> 00:02:32.914
And so when you want to put
a component into another template as

37
00:02:32.914 --> 00:02:36.136
a child component,
this is where the surface area is.

38
00:02:36.136 --> 00:02:40.576
So when you think of child component,
parent component,

39
00:02:40.576 --> 00:02:43.212
the surface area is the template.

40
00:02:43.212 --> 00:02:46.734
And kind of that, the doorway or

41
00:02:46.734 --> 00:02:51.959
the kind of the gateway
to that is the selector.

42
00:02:54.739 --> 00:02:59.169
&gt;&gt; Lukas Ruebbelke: And so
in our projects.component ts,

43
00:02:59.169 --> 00:03:03.607
let's start to build some of the cell.

44
00:03:07.128 --> 00:03:12.621
&gt;&gt; Lukas Ruebbelke: So when you create
a property or a method on the class,

45
00:03:12.621 --> 00:03:17.636
it is now available for
binding in the template.

46
00:03:17.636 --> 00:03:23.028
So for instance,
if I created a property and

47
00:03:23.028 --> 00:03:29.311
I called it hello, and
I assign the value to world.

48
00:03:29.311 --> 00:03:34.624
And this is going to be fairly
simplistic that, let's go down here.

49
00:03:34.624 --> 00:03:39.308
You can actually put
this anywhere you want,

50
00:03:39.308 --> 00:03:43.999
but I'll put it right
here in this first h3.

51
00:03:43.999 --> 00:03:48.370
You can then render it
with double curly braces.

52
00:03:48.370 --> 00:03:54.145
So this is basic string interpolation.

53
00:03:54.145 --> 00:03:57.012
So if I go here, we go back here,
you can see hello world.

54
00:03:57.012 --> 00:03:59.427
You guys are stunned, I know.

55
00:03:59.427 --> 00:04:01.699
But wait, there's more.

56
00:04:08.201 --> 00:04:10.130
&gt;&gt; Lukas Ruebbelke: We'll take this off,
and

57
00:04:10.130 --> 00:04:15.312
let's put something a little bit
more interesting or non-trivial.

58
00:04:15.312 --> 00:04:20.574
So what we can do here is
we can go to projects,

59
00:04:20.574 --> 00:04:24.321
and we can just create an array.

60
00:04:24.321 --> 00:04:28.274
And then within here I'm
sitting here thinking like,

61
00:04:28.274 --> 00:04:30.342
I'm gonna be typing forever.

62
00:04:30.342 --> 00:04:33.290
Well, fortunately I have a snippet here.

63
00:04:35.337 --> 00:04:37.649
&gt;&gt; Lukas Ruebbelke: And
I'm just going to copy this.

64
00:04:42.708 --> 00:04:47.051
&gt;&gt; Lukas Ruebbelke: And so what I've done
is I've just pulled the projects out of

65
00:04:47.051 --> 00:04:50.984
that snippets file and
we now have an array of objects.

66
00:04:50.984 --> 00:04:55.887
This is going to be or
present significantly more

67
00:04:55.887 --> 00:05:00.799
opportunities then binding
to a single string.

68
00:05:02.935 --> 00:05:08.764
&gt;&gt; Lukas Ruebbelke: So what we can do,
and I'll put this just above the list.

69
00:05:11.665 --> 00:05:16.619
&gt;&gt; Lukas Ruebbelke: Is what happens if
we go and we just bind to this here?

70
00:05:18.677 --> 00:05:19.925
&gt;&gt; Lukas Ruebbelke: Refresh the page.

71
00:05:19.925 --> 00:05:26.691
That's not super helpful,
this kind of two string, super.

72
00:05:26.691 --> 00:05:29.436
Pro tip, right out of the bat.

73
00:05:29.436 --> 00:05:32.684
So this is, I use this all the time.

74
00:05:32.684 --> 00:05:34.996
Pre,
&gt;&gt; Lukas Ruebbelke: Projects, and

75
00:05:34.996 --> 00:05:38.305
then we're going to introduce
what is called a pipe.

76
00:05:38.305 --> 00:05:41.545
This is just a essentially
the pipe symbol, and

77
00:05:41.545 --> 00:05:46.891
what this does is it says take this output
or whatever is outputted out of this,

78
00:05:46.891 --> 00:05:50.381
and run it through this pipe and
do something else.

79
00:05:50.381 --> 00:05:55.849
So this is from bash if you do history,
pipe grep, it's the same as anything.

80
00:05:55.849 --> 00:06:02.169
It's just piping the output from one into
another, which then gets outputted out.

81
00:06:02.169 --> 00:06:04.801
So here, we'll do projects | json.

82
00:06:04.801 --> 00:06:08.782
This is quite possibly one
of the most useful things,

83
00:06:08.782 --> 00:06:15.512
when I'm actually developing, it's like,
I think I know what's happening.

84
00:06:15.512 --> 00:06:16.475
I guess not.

85
00:06:16.475 --> 00:06:19.730
And you can see here that
now we can dump this out.

86
00:06:19.730 --> 00:06:24.606
So, a lot of times when something goes
wrong is you're making assumptions about

87
00:06:24.606 --> 00:06:29.196
a data structure or that your assumptions
about the state of where it's at or

88
00:06:29.196 --> 00:06:31.866
what is happening is
one time is erroneous.

89
00:06:31.866 --> 00:06:35.418
It's very handy to be able to
just say I have this thing and

90
00:06:35.418 --> 00:06:36.974
I wanna just dump it out.

91
00:06:36.974 --> 00:06:37.474
Now.

92
00:06:38.846 --> 00:06:43.431
&gt;&gt; Lukas Ruebbelke: That's okay but
not incredibly useful other

93
00:06:43.431 --> 00:06:47.417
than saying hey, what just happened?

94
00:06:47.417 --> 00:06:53.549
What we can do though,
is because we have a collection

95
00:06:53.549 --> 00:06:59.292
of things is we can iterate
over that collection.

96
00:06:59.292 --> 00:07:03.874
And so we'll use what's called
a structural directive.

97
00:07:03.874 --> 00:07:09.753
And so this is ng for, anybody is used,
so this is kind of a variation of

98
00:07:09.753 --> 00:07:15.635
the AngularJS one which I think was
ng hyphen for, that we can now go and

99
00:07:15.635 --> 00:07:22.464
say let project of projects,
&gt;&gt; Lukas Ruebbelke: And

100
00:07:22.464 --> 00:07:29.940
now this is available as
a variable scoped to this element,

101
00:07:29.940 --> 00:07:34.725
and so we'll go project.title, and

102
00:07:34.725 --> 00:07:39.240
we'll also go project.details.

103
00:07:39.240 --> 00:07:40.881
All right.

104
00:07:40.881 --> 00:07:41.381
Save this.

105
00:07:46.440 --> 00:07:50.669
&gt;&gt; Lukas Ruebbelke: Lo and behold, so
instead of just binding to a single object

106
00:07:50.669 --> 00:07:55.843
we're now able to write the template
over and then loop over using ng4.

