WEBVTT

1
00:00:00.000 --> 00:00:03.805
&gt;&gt; Student: The libraries that we
were creating with the Nx Workspace,

2
00:00:03.805 --> 00:00:08.768
what would be the equivalent of that if
we weren't using that extra layer of?

3
00:00:08.768 --> 00:00:09.485
&gt;&gt; Lukas Ruebbelke: Good question.
So

4
00:00:09.485 --> 00:00:14.880
that would then be scoped
specifically to your project.

5
00:00:14.880 --> 00:00:17.805
&gt;&gt; Lukas Ruebbelke: And
I would just create that,

6
00:00:17.805 --> 00:00:21.554
in your app, it's a common feature.

7
00:00:23.758 --> 00:00:26.743
&gt;&gt; Lukas Ruebbelke: And so the difference
is you lose that portability but

8
00:00:26.743 --> 00:00:31.138
typically you'll see in an app, you'll
see like a shared or a common folder.

9
00:00:31.138 --> 00:00:34.283
And that's where those things would go, so

10
00:00:34.283 --> 00:00:38.969
that it can be reused across components or
additional services.

11
00:00:38.969 --> 00:00:40.350
And so prior to Nx, that's how I did that.

12
00:00:41.722 --> 00:00:44.620
&gt;&gt; Student2: So
if you have your project schematics,

13
00:00:44.620 --> 00:00:48.893
can you transfer those from
one Narwhal domain to another?

14
00:00:48.893 --> 00:00:55.325
Or does the whole project tree get
swallowed up in Git when you check it in?

15
00:00:55.325 --> 00:00:59.000
Is there any segmentation between
Narwhal and your project?

16
00:00:59.000 --> 00:01:02.951
It seemed to me like it was all
consolidated but a lot of people

17
00:01:02.951 --> 00:01:07.846
are asking the question or several
people asked that question on the chat.

18
00:01:07.846 --> 00:01:08.361
Did I butcher it?

19
00:01:08.361 --> 00:01:12.863
&gt;&gt; Lukas Ruebbelke: So the schematics
that we're using is in the global

20
00:01:12.863 --> 00:01:16.957
scope when we did NPMI,
G, or you can do Yarn.

21
00:01:16.957 --> 00:01:21.433
And so that goes into your
global registry, if you will.

22
00:01:21.433 --> 00:01:24.482
If you created custom schematics, so for

23
00:01:24.482 --> 00:01:28.312
instance in the tools,
if you look in the root here,

24
00:01:28.312 --> 00:01:33.123
is that you can create your custom
schematics and check those in.

25
00:01:33.123 --> 00:01:38.808
So the angular CLI stuff,
that's tucked into the module.

26
00:01:38.808 --> 00:01:43.110
Nx, those are tucked in, but if you
created a custom schematic ,you would

27
00:01:43.110 --> 00:01:46.401
put that in tools, schematics,
and drop that in there.

28
00:01:46.401 --> 00:01:49.106
&gt;&gt; Student2: Great,
that answers the question.

29
00:01:49.106 --> 00:01:51.334
&gt;&gt; Student: I'm gonna follow up,
if you were to play this,

30
00:01:51.334 --> 00:01:53.690
how would you select
the libraries that you need?

31
00:01:53.690 --> 00:01:56.309
Or would there be a similar
situation with the schematics or?

32
00:01:56.309 --> 00:02:00.201
&gt;&gt; Lukas Ruebbelke: And so
you can do a targeted build,

33
00:02:00.201 --> 00:02:05.705
ng build target, or
project equals dashboard,

34
00:02:05.705 --> 00:02:11.087
and it will pull in whatever
it needs to do that.

35
00:02:11.087 --> 00:02:16.426
One of the things that with a monorepo,
and it's it's not a huge insurmountable

36
00:02:16.426 --> 00:02:21.628
thing, but if you have, for instance,
a continuous integration pipeline.

37
00:02:21.628 --> 00:02:26.971
Well, before so go grab this repo and
everything that's in it.

38
00:02:26.971 --> 00:02:30.215
Run it through AWS CodeBuild or Jenkins.

39
00:02:30.215 --> 00:02:35.395
And then push it, into CodeDeploy and
then into Fargate or something.

40
00:02:35.395 --> 00:02:40.174
With a monorepo, is you just have
to retool your build scripts,

41
00:02:40.174 --> 00:02:46.472
your continuous integration, to say I want
to just target a piece of this monorepo.

42
00:02:46.472 --> 00:02:48.485
And so it can be done.

43
00:02:48.485 --> 00:02:52.243
But that is the one thing you
would need to be cognizant of,

44
00:02:52.243 --> 00:02:57.862
is that when you build, it needs to be on
a per-project basis, not a per-repo basis.

45
00:02:57.862 --> 00:03:01.941
&gt;&gt; Student3: Do you usually put
services in the lib folder, or-

46
00:03:01.941 --> 00:03:04.670
&gt;&gt; Lukas Ruebbelke: Typically, I do.

47
00:03:04.670 --> 00:03:09.094
&gt;&gt; Student3: And I noticed, so I remember,
we created the logging component.

48
00:03:09.094 --> 00:03:10.398
&gt;&gt; Lukas Ruebbelke: Mm-hm.

49
00:03:10.398 --> 00:03:13.141
&gt;&gt; Student3: Which I don't
feel like we really use it.

50
00:03:13.141 --> 00:03:18.668
But I'm assuming you created that in
the lib folder not in the project

51
00:03:18.668 --> 00:03:25.161
folder because that's something that
could be used across multiple projects.

52
00:03:25.161 --> 00:03:30.110
&gt;&gt; Lukas Ruebbelke: Ding ding, and so
that's it, is if you ever stop and

53
00:03:30.110 --> 00:03:34.506
you're like hey,
I could use this over here.

54
00:03:34.506 --> 00:03:40.143
That's a pretty good candidate for
putting it in the lib folder.

55
00:03:40.143 --> 00:03:43.623
So a lib is essentially transproject,
in other words,

56
00:03:43.623 --> 00:03:46.001
it can go from one project to another.

57
00:03:46.001 --> 00:03:51.783
And my hands got tired from generating
all that code this morning which

58
00:03:51.783 --> 00:03:58.655
is why we didn't talk about the logging
component too much, but that was the idea.

59
00:03:58.655 --> 00:04:02.003
Is that we could share that on
a dashboard, or a widget, or whatever.

60
00:04:04.446 --> 00:04:09.291
&gt;&gt; Student3: And let's say if you have
another project list but that's slightly

61
00:04:09.291 --> 00:04:14.819
different than the one that you currently
have, and you wanna reuse it that.

62
00:04:14.819 --> 00:04:19.895
Is there a way of kind of altering it or
would you just have

63
00:04:19.895 --> 00:04:25.839
to create another project list and
have it in the project folder?

64
00:04:25.839 --> 00:04:29.314
&gt;&gt; Lukas Ruebbelke: So
it depends on what you mean by project.

65
00:04:29.314 --> 00:04:33.933
Or you have a list that you
need it to be different.

66
00:04:33.933 --> 00:04:35.263
What do you mean by-
&gt;&gt; Student3: I guess I'm-

67
00:04:35.263 --> 00:04:36.819
&gt;&gt; Lukas Ruebbelke: Are we talking about

68
00:04:36.819 --> 00:04:38.559
visually different or

69
00:04:38.559 --> 00:04:44.151
are we talking about functionally
it is just fundamentally different?

70
00:04:44.151 --> 00:04:48.571
&gt;&gt; Student3: I guess I'm thinking in
terms of some projects that I've done

71
00:04:48.571 --> 00:04:49.683
where we have.

72
00:04:49.683 --> 00:04:54.539
So we've developed applications and
both of them at the end of the day

73
00:04:54.539 --> 00:04:59.161
seem to do pretty much the same
thing except with different data.

74
00:04:59.161 --> 00:05:00.180
&gt;&gt; Lukas Ruebbelke: Right.

75
00:05:00.180 --> 00:05:04.578
&gt;&gt; Student3: So I guess in terms of,
so it seemed pretty repetitive,

76
00:05:04.578 --> 00:05:10.109
the code that we're writing,
except it was for different data sets.

77
00:05:10.109 --> 00:05:11.190
&gt;&gt; Lukas Ruebbelke: Right.

78
00:05:11.190 --> 00:05:16.183
&gt;&gt; Student3: So I was just wondering
if there's an easier way of, I guess,

79
00:05:16.183 --> 00:05:22.425
kinda creating a component that could
be used amongst different projects but

80
00:05:22.425 --> 00:05:26.088
it would have different data sets,
I guess.

81
00:05:26.088 --> 00:05:30.492
&gt;&gt; Lukas Ruebbelke: So one way that you
could definitely do that is if the data

82
00:05:30.492 --> 00:05:35.658
sets converged or they overlapped
on a common set of properties.

83
00:05:35.658 --> 00:05:40.485
Then what I would do is I
would create an interface

84
00:05:40.485 --> 00:05:44.974
that covered or defined that intersection.

85
00:05:44.974 --> 00:05:48.377
You could also even create an interface
with those properties in the optional,

86
00:05:48.377 --> 00:05:49.505
it could go here or there.

87
00:05:49.505 --> 00:05:54.734
With TypeScript, you can also do union
types, but the idea is that you create

88
00:05:54.734 --> 00:05:59.892
an interface and you say, for instance,
let's say you have a cat and a dog.

89
00:05:59.892 --> 00:06:05.715
They both have four legs,
two eyes, fur, mostly.

90
00:06:05.715 --> 00:06:10.453
And so these are some common
properties on both of these

91
00:06:10.453 --> 00:06:15.400
objects as you would create
a let's say a pet interface.

92
00:06:15.400 --> 00:06:19.607
And now on the list, for instance,

93
00:06:19.607 --> 00:06:24.935
instead of saying this
is a list of projects,

94
00:06:24.935 --> 00:06:29.996
is you could say this
is a list of pet items.

95
00:06:29.996 --> 00:06:33.140
But then in terms of the instantiation,

96
00:06:33.140 --> 00:06:37.864
then you're passing in a concrete
instance of a dog or a cat.

97
00:06:37.864 --> 00:06:40.902
Because a dog or
a cat implements the pet interface,

98
00:06:40.902 --> 00:06:45.262
then you're programming to the interface
and not the concrete instance.

99
00:06:45.262 --> 00:06:51.380
A very good book is
Head First Design Patterns.

100
00:06:51.380 --> 00:06:55.204
And that's one of the first ones they
talk about is composition pattern.

101
00:06:55.204 --> 00:07:00.184
Is that if you have a pretty similar
interface or visual interface, but

102
00:07:00.184 --> 00:07:04.918
the data is slightly different,
is you define a common interface.

103
00:07:04.918 --> 00:07:07.362
So when I said visual interface,
I'm talking about UI.

104
00:07:07.362 --> 00:07:11.822
But then you define an actual interface
that defines that data model,

105
00:07:11.822 --> 00:07:13.947
that both of them can implement.

106
00:07:13.947 --> 00:07:17.419
And then you type everything
to the interface and

107
00:07:17.419 --> 00:07:19.965
not the concrete implementation.

108
00:07:19.965 --> 00:07:21.323
Does that make sense?

109
00:07:21.323 --> 00:07:21.982
&gt;&gt; Student3: Yeah.
&gt;&gt; Lukas Ruebbelke: I mean,

110
00:07:21.982 --> 00:07:26.949
there's probably maybe some more details
that I might change my answer if

111
00:07:26.949 --> 00:07:28.240
I knew precisely.

112
00:07:28.240 --> 00:07:32.140
But I would first start there and
just say what is common and

113
00:07:32.140 --> 00:07:34.619
can I work around the common pieces?

114
00:07:36.764 --> 00:07:39.708
&gt;&gt; Lukas Ruebbelke: And so typically
what you do is you look what is common,

115
00:07:39.708 --> 00:07:40.863
you program to that.

116
00:07:40.863 --> 00:07:44.661
And then you notice where
things are different and

117
00:07:44.661 --> 00:07:48.194
then you write the special
cases around that.

118
00:07:49.769 --> 00:07:52.558
&gt;&gt; Lukas Ruebbelke: All right,
last question for the in crowd.

119
00:07:54.674 --> 00:08:01.314
&gt;&gt; Lukas Ruebbelke: You wanna talk
about building performance, AOT?

120
00:08:01.314 --> 00:08:02.372
How that's gonna change the world?

121
00:08:02.372 --> 00:08:07.981
&gt;&gt; Student3: Yeah, well,
lazy loading touched on that [CROSSTALK].

122
00:08:07.981 --> 00:08:08.938
&gt;&gt; Lukas Ruebbelke: It's amazing,
it works every time.

123
00:08:10.979 --> 00:08:15.865
&gt;&gt; Student2: So I think that's the core
issue of what I'm seeing in my project is

124
00:08:15.865 --> 00:08:21.191
the components To understand more,
&gt;&gt; Student2: How

125
00:08:21.191 --> 00:08:27.873
it decides,
&gt;&gt; Student2: What's loading and

126
00:08:27.873 --> 00:08:30.849
what's not loading when
you're late in terms of lazy.

127
00:08:30.849 --> 00:08:33.341
&gt;&gt; Lukas Ruebbelke: So
the route will activate.

128
00:08:33.341 --> 00:08:38.311
If the route's activated,
it will go and load that but-

129
00:08:38.311 --> 00:08:39.800
&gt;&gt; Student2: Cuz you had the,

130
00:08:39.800 --> 00:08:45.762
in the route itself, you had
the module name and then the hashtag,

131
00:08:45.762 --> 00:08:50.149
then the class module
name within that hashtag.

132
00:08:50.149 --> 00:08:55.107
So does that make it a call to
go fetch additional information

133
00:08:55.107 --> 00:08:57.645
from the server at that point?

134
00:08:57.645 --> 00:09:01.623
&gt;&gt; Lukas Ruebbelke: Mm-hm, so what it's
doing is it's saying go to this file,

135
00:09:01.623 --> 00:09:05.524
grab this module definition,
and then load the rest of it.

136
00:09:09.266 --> 00:09:12.987
&gt;&gt; Lukas Ruebbelke: So there is,
with the Angular router, you can preload.

137
00:09:12.987 --> 00:09:16.718
And so
if you just go Angular router preloading,

138
00:09:16.718 --> 00:09:20.272
there's some different
ways you can do this.

139
00:09:20.272 --> 00:09:23.417
But is basically a preloading strategy.

140
00:09:23.417 --> 00:09:28.386
And you can do I wanna preload them all.

141
00:09:28.386 --> 00:09:32.764
&gt;&gt; Lukas Ruebbelke: Or you can
specifically say I want these a la carte.

142
00:09:32.764 --> 00:09:37.844
And so lets say you know for
a fact that 95% of your

143
00:09:37.844 --> 00:09:42.700
users is going to use 3
out of your 33 modules.

144
00:09:42.700 --> 00:09:46.815
But then I would say take Bootstrap,
the first module, and

145
00:09:46.815 --> 00:09:50.449
make it a light as possible
to get that login screen.

146
00:09:50.449 --> 00:09:56.194
Behind the scene, then I would preload
the three modules and lead up to that.

147
00:09:56.194 --> 00:10:00.435
And then from there,
lazy load everything else.

148
00:10:00.435 --> 00:10:03.209
Especially given the number
of permutations and

149
00:10:03.209 --> 00:10:04.973
possibilities that you have.

150
00:10:04.973 --> 00:10:07.300
&gt;&gt; Student2: Right.

151
00:10:07.300 --> 00:10:10.980
&gt;&gt; Lukas Ruebbelke: Or definitely,
even though you are on mobile,

152
00:10:10.980 --> 00:10:14.852
you're not gonna want to
frontload everything.

153
00:10:14.852 --> 00:10:18.214
Especially, if you're paying per module,
that make no sense.

154
00:10:18.214 --> 00:10:19.823
So you need to turn things on or off.

155
00:10:22.049 --> 00:10:22.565
&gt;&gt; Student2: Okay, yeah,

156
00:10:22.565 --> 00:10:24.724
I think I have a better
understanding of how that works now.

157
00:10:24.724 --> 00:10:25.549
&gt;&gt; Lukas Ruebbelke: Awesome.

158
00:10:25.549 --> 00:10:26.630
&gt;&gt; Student2: Yeah, thank you.

159
00:10:26.630 --> 00:10:29.737
&gt;&gt; Lukas Ruebbelke: Mark,
you got half your hand in the air.

160
00:10:29.737 --> 00:10:30.553
Now it's in the air.

161
00:10:30.553 --> 00:10:31.721
What do you got for me, bud?

162
00:10:31.721 --> 00:10:36.553
&gt;&gt; Student: What is the difference
between the tsconfig.app.json and

163
00:10:36.553 --> 00:10:38.642
tsconfig.spec.json?

164
00:10:38.642 --> 00:10:42.255
&gt;&gt; Lukas Ruebbelke: Well,
let's take a peek.

165
00:10:45.464 --> 00:10:47.341
&gt;&gt; Lukas Ruebbelke: tsconfig.spec.json.

166
00:10:52.355 --> 00:10:57.877
&gt;&gt; Lukas Ruebbelke: Well,
&gt;&gt; Lukas Ruebbelke: So

167
00:10:57.877 --> 00:11:03.378
one is how your TypeScript
is configured for testing.

168
00:11:03.378 --> 00:11:08.583
So notice, we're saying for
the spec here's jasmine.

169
00:11:11.303 --> 00:11:13.955
&gt;&gt; Lukas Ruebbelke: Also it's
saying include any spec file.

170
00:11:13.955 --> 00:11:16.843
So this is specific to testing.

171
00:11:16.843 --> 00:11:21.768
And then in your tsconfig,
&gt;&gt; Lukas Ruebbelke: It's slightly

172
00:11:21.768 --> 00:11:22.625
different.

173
00:11:22.625 --> 00:11:27.314
In this case, it's saying,
for the regular tsconfig.app,

174
00:11:27.314 --> 00:11:31.835
it's saying ignore all the test,
so exclude test and spec.

175
00:11:31.835 --> 00:11:33.758
But then if you look in the spec,

176
00:11:33.758 --> 00:11:36.976
then that on the other hand
is saying give me the test.

177
00:11:36.976 --> 00:11:40.251
So you're just simply saying this
is how I wanna configure my app and

178
00:11:40.251 --> 00:11:42.157
this is how I want to configure my test.

179
00:11:42.157 --> 00:11:45.118
Because when you go to your app,
in most cases,

180
00:11:45.118 --> 00:11:48.314
you don't want to include the test and
vice versa.

181
00:11:49.869 --> 00:11:52.778
&gt;&gt; Lukas Ruebbelke: So one is for testing,
one is for actually the application.

182
00:11:52.778 --> 00:11:59.687
&gt;&gt; Student3: Isn't it advisable to when
you're to do test-driven development,

183
00:11:59.687 --> 00:12:04.847
where you first write the test out and
then develop?

184
00:12:04.847 --> 00:12:09.578
&gt;&gt; Lukas Ruebbelke: There are people that
would say you're not even a programmer if

185
00:12:09.578 --> 00:12:12.798
you don't do test-driven development.

186
00:12:12.798 --> 00:12:15.978
That I do not fall into that category

187
00:12:15.978 --> 00:12:20.436
simply because it depends
on what you're doing.

188
00:12:20.436 --> 00:12:23.016
For instance,
what if you're doing a proof of concept?

189
00:12:23.016 --> 00:12:27.096
You haven't even validated
the feature set.

190
00:12:27.096 --> 00:12:32.883
It would not makes sense to say I'm
gonna build this proof of concept and

191
00:12:32.883 --> 00:12:37.691
then I'm gonna basically write
a bunch of tests along the way.

192
00:12:37.691 --> 00:12:41.536
The unit test at that level is not
the appropriate level of test, or

193
00:12:41.536 --> 00:12:43.537
the appropriate kind of testing.

194
00:12:43.537 --> 00:12:47.138
If you're doing a probe, so I do
believe in test-driven development, but

195
00:12:47.138 --> 00:12:47.937
the right kind.

196
00:12:47.937 --> 00:12:51.361
So if I'm doing a proof of concept,
it certainly is test-driven,

197
00:12:51.361 --> 00:12:52.692
as in user test-driven.

198
00:12:55.414 --> 00:12:59.896
&gt;&gt; Lukas Ruebbelke: Now once I validate
the feature set or the functionality and

199
00:12:59.896 --> 00:13:06.362
I'm putting it into production, you better
believe that there's going to be test.

200
00:13:06.362 --> 00:13:08.259
At least around the critical things.

201
00:13:08.259 --> 00:13:10.285
And then if a bug comes,
then test on that.

202
00:13:10.285 --> 00:13:14.675
As well, is once you start to
integrate into other systems.

203
00:13:14.675 --> 00:13:16.990
Well, then you're gonna
have the integration test.

204
00:13:16.990 --> 00:13:21.284
And so
it's you should always have test, but

205
00:13:21.284 --> 00:13:26.835
do I think a test needs to happen
before you write the code?

206
00:13:29.562 --> 00:13:31.876
&gt;&gt; Lukas Ruebbelke: I would say if that
helps you be a more effective developer,

207
00:13:31.876 --> 00:13:32.626
then by all means.

208
00:13:32.626 --> 00:13:35.515
I personally would generally not do that.

209
00:13:35.515 --> 00:13:38.190
&gt;&gt; Student: Especially in the UI code.

210
00:13:38.190 --> 00:13:39.224
&gt;&gt; Lukas Ruebbelke: Right.

211
00:13:39.224 --> 00:13:42.444
&gt;&gt; Student: It's never gonna happen,
at least, not with the current tools.

212
00:13:42.444 --> 00:13:44.297
Perhaps maybe in the future.

213
00:13:44.297 --> 00:13:48.415
But the only time I've ever
seen it being test-driven

214
00:13:48.415 --> 00:13:52.980
development actually be effective
is on the API layer itself

215
00:13:52.980 --> 00:13:54.778
on the server but-
&gt;&gt; Lukas Ruebbelke: And

216
00:13:54.778 --> 00:14:00.684
the reason why that works is
because it's model-driven.

217
00:14:00.684 --> 00:14:04.357
In other words, once you understand
the model, you can infer the convention.

218
00:14:04.357 --> 00:14:08.429
And so it's very easy to write test
on that because you know, hey,

219
00:14:08.429 --> 00:14:11.218
it's gonna be rest, or it's gonna be this.

220
00:14:11.218 --> 00:14:16.651
And it's pretty much set in stone as
well as so, another example I heard,

221
00:14:16.651 --> 00:14:21.823
just to go the other way, is should
you do test-driven development or

222
00:14:21.823 --> 00:14:24.562
even in terms of agile methodology?

223
00:14:24.562 --> 00:14:28.021
Do you just kind of, where does that go?

224
00:14:28.021 --> 00:14:31.017
Well, if you're doing front end
Web application, you make it,

225
00:14:31.017 --> 00:14:32.006
something happens.

226
00:14:32.006 --> 00:14:32.994
Nobody's gonna die.

227
00:14:32.994 --> 00:14:37.929
But if you're doing embedded
hardware in a pacemaker,

228
00:14:37.929 --> 00:14:44.551
then the stakes are a lot higher and
you may want to actually lead with that.

229
00:14:44.551 --> 00:14:48.104
So it's just understanding, I think you
gotta be careful not to make these blanket

230
00:14:48.104 --> 00:14:49.796
statements, test drive everything.

231
00:14:49.796 --> 00:14:50.796
I think not.

232
00:14:50.796 --> 00:14:51.749
Yes, Mark?

233
00:14:51.749 --> 00:14:56.073
&gt;&gt; Student: Is there a way in Narwhal
to publish libraries individually so

234
00:14:56.073 --> 00:15:01.076
that we can use them in different
projects located in separated repos?

235
00:15:01.076 --> 00:15:03.997
&gt;&gt; Lukas Ruebbelke: Yes, so
when you generate a library,

236
00:15:03.997 --> 00:15:06.381
there's a publishable flag.

237
00:15:06.381 --> 00:15:09.541
And what that would do is
sort of set up the code so

238
00:15:09.541 --> 00:15:13.181
that you can actually publish
that specific library.

239
00:15:13.181 --> 00:15:18.415
So that it can be used,
&gt;&gt; Lukas Ruebbelke: As

240
00:15:18.415 --> 00:15:19.937
basically as an MPM module.

241
00:15:19.937 --> 00:15:24.573
&gt;&gt; Student: Do you typically put all
of the apps in this same repo or

242
00:15:24.573 --> 00:15:27.879
separate it out like you're saying?

243
00:15:27.879 --> 00:15:35.499
&gt;&gt; Lukas Ruebbelke: I would generally put,
&gt;&gt; Lukas Ruebbelke: All the apps for

244
00:15:35.499 --> 00:15:38.655
a particular, within a reasonable domain.

245
00:15:38.655 --> 00:15:42.595
So in other words,
if I'm dealing with a client that has four

246
00:15:42.595 --> 00:15:46.474
front end applications,
they will all go in the monorepo.

247
00:15:46.474 --> 00:15:49.674
And so one of the clients
that I'm working with now,

248
00:15:49.674 --> 00:15:52.440
it's that situation
where they have seven or

249
00:15:52.440 --> 00:15:57.053
eight apps that sit within the monorepo
that share common functionality.

250
00:15:57.053 --> 00:16:00.498
But if I was in a large organization and
you had this

251
00:16:00.498 --> 00:16:05.421
business unit over here that had no
relation whatsoever over to here and

252
00:16:05.421 --> 00:16:09.295
they're using different technologies or
something.

253
00:16:09.295 --> 00:16:12.219
Would I force that into a single monorepo?

254
00:16:12.219 --> 00:16:17.272
Probably not, but
typically if I'm working on related

255
00:16:17.272 --> 00:16:23.400
projects that could benefit from
shared functionality, I will and

256
00:16:23.400 --> 00:16:29.221
will put them all on a single monorepo,
aka Narwhal workspace.

