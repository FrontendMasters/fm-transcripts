WEBVTT

1
00:00:00.080 --> 00:00:02.140
&gt;&gt; Speaker 1: Let me
take just a moment and

2
00:00:02.140 --> 00:00:06.430
let me talk about Narwhal and
the Narwhal workspace.

3
00:00:06.430 --> 00:00:12.350
Usually I will typically call it a Warwhal
workspace, in some cases like monorepo

4
00:00:12.350 --> 00:00:17.260
has some negative connotations even though
you have some very, very large companies.

5
00:00:17.260 --> 00:00:19.960
Google being one of
the biggest ones using this.

6
00:00:21.360 --> 00:00:22.560
That this is,

7
00:00:22.560 --> 00:00:28.070
I'm gonna take strictly from how I feel
Angular applications should be built.

8
00:00:29.350 --> 00:00:32.550
That your component has
two responsibilities,

9
00:00:33.760 --> 00:00:36.510
consuming just enough data
to satisfy the template.

10
00:00:37.740 --> 00:00:43.190
And capturing user events and delegating
that upwards to the application.

11
00:00:43.190 --> 00:00:49.330
So I cannot tell you how many times I've
been called to do an architecture review

12
00:00:49.330 --> 00:00:55.340
on a client's project, and they have very
fat controllers or component classes.

13
00:00:55.340 --> 00:00:58.290
Where it's just doing tons and
tons of stuff.

14
00:00:58.290 --> 00:01:00.670
Your components are,

15
00:01:00.670 --> 00:01:06.270
the classes are hundreds of lines long and
it's a very lopsided application.

16
00:01:06.270 --> 00:01:10.530
That your components should be
very thin and do those two things.

17
00:01:10.530 --> 00:01:12.730
So, when you delegate something up or

18
00:01:12.730 --> 00:01:15.400
when you pull data down,
where is that coming from?

19
00:01:16.920 --> 00:01:21.560
So that needs to come from a service
layer, from a state management library.

20
00:01:21.560 --> 00:01:29.040
And that does not necessarily need to
exist in your front-end application.

21
00:01:29.040 --> 00:01:32.270
Or the piece that is specific
to what the user is seeing and

22
00:01:32.270 --> 00:01:34.390
experiencing and touching.

23
00:01:34.390 --> 00:01:40.260
And so by moving those pieces into a lib,
you can now share that

24
00:01:40.260 --> 00:01:45.650
same state management, that same business
logic across multiple applications.

25
00:01:45.650 --> 00:01:50.600
And so, a very common use case is
that you might have a dashboard

26
00:01:50.600 --> 00:01:54.390
with a lot of stuff that's
doing some complex things.

27
00:01:54.390 --> 00:01:58.000
But then you need to surface just a subset
of this, like maybe it's a dashboard or

28
00:01:58.000 --> 00:01:59.390
it's a mobile app.

29
00:01:59.390 --> 00:02:03.160
Well, by separating your business
logic and your functionality,

30
00:02:03.160 --> 00:02:07.840
your state management into a lib,
you can then spin up a new application.

31
00:02:07.840 --> 00:02:10.180
So let's say like dashboard widget.

32
00:02:10.180 --> 00:02:12.610
And then most of the work is still done,

33
00:02:12.610 --> 00:02:16.770
you just have to build out your
visual layer or your UI layer.

34
00:02:16.770 --> 00:02:23.950
And so this is, I believe,
a really handy way to start to separate

35
00:02:23.950 --> 00:02:28.520
out the pieces that you can use, your core
business logic, your state management.

36
00:02:28.520 --> 00:02:33.283
And then keep the pieces that
you cannot use very, very thin.

37
00:02:33.283 --> 00:02:37.212
Now if you talk to, for instance,
Jeff Cross or Vitrus Afkin or

38
00:02:37.212 --> 00:02:41.666
Thomas Brulsin from Narwhal,
they're going to talk about enterprise

39
00:02:41.666 --> 00:02:46.732
collaboration with teams and sharing
updates across everything, and I agree.

40
00:02:46.732 --> 00:02:50.835
But for me personally,
having really thin components,

41
00:02:50.835 --> 00:02:56.646
with everything else abstracted out to
a lib, I believe is really critical for,

42
00:02:56.646 --> 00:03:01.420
one, having reusable front-end
stuff that people can use.

43
00:03:01.420 --> 00:03:06.178
And then stable kind of core pieces of
logic that you're not having to recreate

44
00:03:06.178 --> 00:03:07.631
over and over and over.

45
00:03:10.286 --> 00:03:14.740
&gt;&gt; Speaker 1: All right,
and so now we have our app.

46
00:03:15.820 --> 00:03:20.570
Let's hop back in and, well, I need to
do some housekeeping here real quick,

47
00:03:20.570 --> 00:03:21.900
before I forget.

48
00:03:21.900 --> 00:03:30.400
So if we look in the resources folder,
there is a style sheet.

49
00:03:30.400 --> 00:03:31.780
And I believe I can just paste this in.

50
00:03:33.440 --> 00:03:36.003
And I should have deleted the other
one first, I'll click that.

51
00:03:39.162 --> 00:03:43.860
&gt;&gt; Speaker 1: We rename this back to,
there we go.

52
00:03:45.580 --> 00:03:49.250
And then let's take this assets folder.

53
00:03:49.250 --> 00:03:52.250
Really I just need these two
pictures here, so it's the logo and

54
00:03:52.250 --> 00:03:53.710
the background image.

55
00:03:53.710 --> 00:04:00.033
And we'll paste these into assets,
all right.

56
00:04:00.033 --> 00:04:08.038
Now that that's done, let's use the CLI
to start to build some of this out.

57
00:04:08.038 --> 00:04:12.866
So, as I was practicing for this workshop,
I was able to generate pretty

58
00:04:12.866 --> 00:04:17.710
much most of the entire file structure and
all of the pieces from the CLI.

59
00:04:19.130 --> 00:04:24.290
We'll do this in stages, but
the CLI is really, really,

60
00:04:24.290 --> 00:04:29.290
really fantastic for generating.

61
00:04:29.290 --> 00:04:32.970
And scaffolding out the shape of
an application very, very quickly.

62
00:04:32.970 --> 00:04:35.466
And we'll see that in just a moment.

63
00:04:35.466 --> 00:04:40.147
Unfortunately, when,
&gt;&gt; Speaker 1: Pour Sass pretty

64
00:04:40.147 --> 00:04:45.447
processor konks out, that's kind
of time to restart it, all right.

65
00:04:53.465 --> 00:04:56.250
&gt;&gt; Speaker 1: And
if we go back into the Wiki.

66
00:04:56.250 --> 00:04:57.530
So I will mention this.

67
00:04:57.530 --> 00:05:00.330
So I showed you the snippets here.

68
00:05:00.330 --> 00:05:03.490
And we'll us these, so
I hop back and forth to copy these.

69
00:05:03.490 --> 00:05:06.480
But if you go to up and running.

70
00:05:06.480 --> 00:05:13.412
This is pretty much the commands that I'm
going to run if you want to follow along.

71
00:05:13.412 --> 00:05:17.700
I only took it out to up and running and
the basic Angular CLI commands because

72
00:05:17.700 --> 00:05:21.989
from there, all bets are off, but
I do know the basic structure that I want.

73
00:05:21.989 --> 00:05:24.886
And so this is kinda where we are at.

74
00:05:24.886 --> 00:05:30.340
So, I mean I will probably flush this out
as this starts to kind of take shape which

75
00:05:30.340 --> 00:05:35.474
is fun, but if anybody wants to like
what command did you just type in there,

76
00:05:35.474 --> 00:05:37.340
what just happened, etc.

