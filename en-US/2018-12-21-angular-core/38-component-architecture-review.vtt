WEBVTT

1
00:00:00.025 --> 00:00:05.111
&gt;&gt; Lukas Ruebbelke: / So let's just take
a minute and recap what just happened.

2
00:00:10.190 --> 00:00:13.071
&gt;&gt; Lukas Ruebbelke: We have
two presentation components,

3
00:00:13.071 --> 00:00:17.782
the project details, and so,
somebody would say, well,

4
00:00:17.782 --> 00:00:22.514
there's state in here is that
truly a presentation component.

5
00:00:22.514 --> 00:00:25.746
Well, I would say, I don't know,
if you wanna get the dictionary out and

6
00:00:25.746 --> 00:00:28.689
fight about it, I don't really care,
call it whatever you want.

7
00:00:28.689 --> 00:00:33.500
The point is all the state that's in here,
is presentational state, and

8
00:00:33.500 --> 00:00:35.060
that's what matters.

9
00:00:36.460 --> 00:00:42.660
And then in the project list component,

10
00:00:42.660 --> 00:00:49.400
I know you're around here somewhere, even
better, there's nothing happening in here.

11
00:00:49.400 --> 00:00:51.248
So this is truly stateless.

12
00:00:56.840 --> 00:01:01.165
&gt;&gt; Lukas Ruebbelke: Templates
are pretty straight-forward, but

13
00:01:01.165 --> 00:01:05.812
now we've taken the kind of
that large bit of code or

14
00:01:05.812 --> 00:01:10.676
that we've broken it out,
because one of the biggest

15
00:01:10.676 --> 00:01:15.729
problems with having code
that's kinda monolithic.

16
00:01:15.729 --> 00:01:20.290
So, especially if something's nested,
you can never reuse that.

17
00:01:20.290 --> 00:01:24.120
Like while I was in here, if I'm like I
just want the form, I don't want the list.

18
00:01:24.120 --> 00:01:26.570
Give me the form, I don't want the list,
or give me the list,

19
00:01:26.570 --> 00:01:28.090
I don't want the form.

20
00:01:28.090 --> 00:01:30.730
Impossible, cuz they're coupled together.

21
00:01:30.730 --> 00:01:34.860
And that's the problem when you have one,
you miss concerns, and

22
00:01:34.860 --> 00:01:38.476
then they are nested or
essentially coupled together, so

23
00:01:38.476 --> 00:01:41.790
that you can't pick one
up without the other.

24
00:01:41.790 --> 00:01:43.820
You can't test one without the other.

25
00:01:43.820 --> 00:01:48.280
And so this to me, in a very simple
example, I think illustrates

26
00:01:49.650 --> 00:01:53.600
how to work around a lot of
conceptual problems as programmers.

27
00:01:53.600 --> 00:01:57.965
But then sets a pattern for
how to think about programming as a whole.

28
00:01:57.965 --> 00:02:01.302
Because when I ask somebody hey,
do you understand redux?

29
00:02:01.302 --> 00:02:05.693
And they're like, no, and
I've got five minutes to figure it out,

30
00:02:05.693 --> 00:02:09.192
I simply come to do you
understand inputs and outputs?

31
00:02:09.192 --> 00:02:14.480
Do you understand that data goes in and
events come out?

32
00:02:15.810 --> 00:02:17.332
Input data in, events out?

33
00:02:17.332 --> 00:02:19.460
You understand redux?

34
00:02:19.460 --> 00:02:23.877
That is essentially that pattern,
state down events up.

35
00:02:23.877 --> 00:02:27.556
And then tomorrow we'll kind
of expand out on that and

36
00:02:27.556 --> 00:02:30.430
we'll see that at an application level.

37
00:02:30.430 --> 00:02:36.099
&gt;&gt; Speaker 2: Is there a command
line short-cut to generate the least

38
00:02:36.099 --> 00:02:42.855
details components in a similar way
to the first time you generated

39
00:02:42.855 --> 00:02:47.351
component for projects, component for-
&gt;&gt; Lukas Ruebbelke: So

40
00:02:47.351 --> 00:02:52.027
the beauty of the Angular CLI, and this
is what you're actually seeing with like

41
00:02:52.027 --> 00:02:57.690
Narwhal, is that you can extend the CLI
to do custom generators via schematics.

42
00:02:57.690 --> 00:03:00.920
And so somebody could if they
haven't already, could sit down and

43
00:03:00.920 --> 00:03:03.310
create a schematic for
a master detail for you.

44
00:03:05.500 --> 00:03:08.400
And so it would be pretty interesting
to say, here's this data model.

45
00:03:10.080 --> 00:03:13.220
Or not even a data model just
the basic structure of it.

46
00:03:13.220 --> 00:03:15.510
Then you just pick it up and
you plug your stuff in.

47
00:03:16.750 --> 00:03:22.210
Because whether I'm dealing with,
in this case projects or customers.

48
00:03:22.210 --> 00:03:25.430
Like it is very conventional in
the sense of that I'm going to probably

49
00:03:25.430 --> 00:03:27.640
do it the same way every single time.

50
00:03:27.640 --> 00:03:32.266
And so, when you have strong
conventions around data modelling,

51
00:03:32.266 --> 00:03:36.078
then it's very easy to automate
a lot of these things.

52
00:03:36.078 --> 00:03:38.765
And so this is world like with like ngrx,
or even REDEX,

53
00:03:38.765 --> 00:03:40.372
people talk about boiler plate.

54
00:03:40.372 --> 00:03:45.951
And I'd encourage people, when you see
something that's the same over and

55
00:03:45.951 --> 00:03:49.800
over, don't mistake convention for
repetition.

56
00:03:50.840 --> 00:03:55.826
It's that there's a reason why everything
is the same because its uniform,

57
00:03:55.826 --> 00:03:58.522
its conventional, and its consistent.

58
00:03:58.522 --> 00:04:02.899
Versus I would say if something is
repetitious then, or it's even boiler

59
00:04:02.899 --> 00:04:07.645
plate, I said the B word, that you can
take that out and you can still function.

60
00:04:07.645 --> 00:04:13.160
That's when I think of boiler plate,
is it's crufty, unnecessary code.

61
00:04:13.160 --> 00:04:17.662
But, when you have a bunch of fine grain
single purpose functions, that are doing

62
00:04:17.662 --> 00:04:21.772
one thing, then of course things are going
to be a little bit more verbose,

63
00:04:21.772 --> 00:04:24.211
because you're breaking everything out.

64
00:04:24.211 --> 00:04:30.926
So, to answer your question, possibly,
but definitely somebody could.

65
00:04:30.926 --> 00:04:33.080
And it would just be
a matter of sitting down and

66
00:04:33.080 --> 00:04:34.910
writing a custom schematic to do that.

67
00:04:38.911 --> 00:04:40.050
&gt;&gt; Speaker 2: Okay.

68
00:04:40.050 --> 00:04:42.796
&gt;&gt; Lukas Ruebbelke: So,
what does everyone think about this?

69
00:04:42.796 --> 00:04:47.384
Like the idea of component driven
architecture, inputs and outputs,

70
00:04:47.384 --> 00:04:52.125
container components that get the data,
pass it in, listen for events,

71
00:04:52.125 --> 00:04:54.120
delegate it back up.

72
00:04:54.120 --> 00:05:00.102
And whenever I see a presentational
component like this,

73
00:05:00.102 --> 00:05:04.017
I just get all googly eyed and giggly.

74
00:05:04.017 --> 00:05:10.210
Because this is incredibly stable,
incredibly portable.

75
00:05:10.210 --> 00:05:15.166
&gt;&gt; Speaker 3: Will you be
getting into any validation

76
00:05:15.166 --> 00:05:19.077
of the details of the product?

77
00:05:19.077 --> 00:05:23.387
&gt;&gt; Lukas Ruebbelke: So
if you look in the, so, full caveat.

78
00:05:23.387 --> 00:05:29.374
There is things that are in the code,
that we ran out of time to talk about.

79
00:05:29.374 --> 00:05:35.050
But the reason why I built out the full
fledged application in the reference

80
00:05:35.050 --> 00:05:39.824
branch, is because,
even though depending on how this went,

81
00:05:39.824 --> 00:05:45.343
there were just going to be things that
I knew I would not be able to get to.

82
00:05:45.343 --> 00:05:49.997
But there is,
I'd recommend everybody to go, and

83
00:05:49.997 --> 00:05:58.250
if you look in the reference branch,
there's definitely validations in here.

84
00:05:58.250 --> 00:06:03.253
And so there's validations,
there is interceptors, route guards.

85
00:06:03.253 --> 00:06:08.018
And what I'll even do to that end is,
in the Wiki,

86
00:06:08.018 --> 00:06:14.266
flush this out as well and
call out some of these specific things.

