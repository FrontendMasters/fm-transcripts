WEBVTT

1
00:00:00.610 --> 00:00:04.630
&gt;&gt; Lukas Ruebbelke: What about
these other features that we have?

2
00:00:04.630 --> 00:00:07.910
So what about Home, Projects, Customers?

3
00:00:08.970 --> 00:00:10.690
Well, we can route to them, but

4
00:00:12.080 --> 00:00:16.440
the difference is each one of these
have their own routing modules.

5
00:00:16.440 --> 00:00:21.750
And so now,
we can lazy load these particular module.

6
00:00:21.750 --> 00:00:27.240
So if I go here,
let's redirect to the home.

7
00:00:27.240 --> 00:00:31.887
So instead of loading, I'm going to
leave this login component here, and

8
00:00:31.887 --> 00:00:33.299
we'll just go login.

9
00:00:33.299 --> 00:00:37.908
And then duplicate that, and
instead let's just go here.

10
00:00:37.908 --> 00:00:40.895
And instead of manually or

11
00:00:40.895 --> 00:00:46.192
actually directing
straight to a component,

12
00:00:46.192 --> 00:00:51.380
instead, we're going to do load children.

13
00:00:51.380 --> 00:00:55.960
And then,
we will put in the path, the file

14
00:00:55.960 --> 00:01:01.110
structure that we're referencing that
module, that to say when this is loading,

15
00:01:01.110 --> 00:01:05.890
reach out in the file structure and
asynchronously pull this in.

16
00:01:05.890 --> 00:01:10.514
So we'll go home/home.module.

17
00:01:13.784 --> 00:01:15.330
&gt;&gt; Lukas Ruebbelke: And so,
this is the module file.

18
00:01:15.330 --> 00:01:20.070
And then,
we are actually targeting the home module.

19
00:01:24.514 --> 00:01:30.390
&gt;&gt; Lukas Ruebbelke: So we're on a route,
we wanna load the child module.

20
00:01:30.390 --> 00:01:34.585
And of course, from this directory
we wanna go to home/home.module.

21
00:01:34.585 --> 00:01:36.147
So this file.

22
00:01:36.147 --> 00:01:39.030
And then, within that, HomeModule here.

23
00:01:39.030 --> 00:01:39.530
So let's save this.

24
00:01:42.120 --> 00:01:44.911
&gt;&gt; Lukas Ruebbelke: Let's go back and see.

25
00:01:49.300 --> 00:01:51.140
&gt;&gt; Lukas Ruebbelke: Undefined
is not a function.

26
00:01:51.140 --> 00:01:53.371
I wonder if I spelled this wrong.

27
00:01:55.390 --> 00:01:56.595
&gt;&gt; Student: So I get it to work.

28
00:01:56.595 --> 00:02:01.206
If in the app module,
you reorganized the whole module and

29
00:02:01.206 --> 00:02:04.038
app routing module declarations.

30
00:02:04.038 --> 00:02:06.040
I'm not sure if that's the right
thing to do in the import.

31
00:02:07.282 --> 00:02:10.170
&gt;&gt; Lukas Ruebbelke: Did-
&gt;&gt; Student: In the app module.

32
00:02:10.170 --> 00:02:11.413
&gt;&gt; Lukas Ruebbelke: Okay.

33
00:02:14.530 --> 00:02:16.080
&gt;&gt; Student: So moving Home above App.

34
00:02:18.504 --> 00:02:20.710
&gt;&gt; Student: I don't know if that's
the right thing to do, though.

35
00:02:20.710 --> 00:02:21.750
&gt;&gt; Lukas Ruebbelke: Is that
how you got it to work?

36
00:02:21.750 --> 00:02:25.060
If that is,
I'm giving you 50 bucks after this class.

37
00:02:25.060 --> 00:02:27.360
&gt;&gt; Student: [LAUGH]
&gt;&gt; Lukas Ruebbelke: [LAUGH]

38
00:02:27.360 --> 00:02:28.540
&gt;&gt; Student: Cuz if

39
00:02:28.540 --> 00:02:30.920
it's doing lazy loading, I figured-
&gt;&gt; Lukas Ruebbelke: Right.

40
00:02:30.920 --> 00:02:32.084
&gt;&gt; Student: Home might not exist yet.

41
00:02:33.463 --> 00:02:38.646
&gt;&gt; Lukas Ruebbelke: So
[LAUGH] because we're lazy loading,

42
00:02:38.646 --> 00:02:45.879
that home module has to exist
before we can route to it.

43
00:02:45.879 --> 00:02:48.360
Within GRX, on the other end,
so order does matter.

44
00:02:48.360 --> 00:02:51.010
For instance,
when we get into effects, effects,

45
00:02:51.010 --> 00:02:53.410
as well also has to be
that very last thing.

46
00:02:53.410 --> 00:02:58.560
So in fact, I'm gonna just go ahead and
put this right on the bottom.

47
00:02:59.840 --> 00:03:01.550
All right, so lesson learned.

48
00:03:01.550 --> 00:03:03.890
I completely spaced out for
about three seconds.

49
00:03:03.890 --> 00:03:07.440
High five, is that if you're lazy loading,

50
00:03:07.440 --> 00:03:11.070
put the modules that you're
lazy loading on top.

51
00:03:11.070 --> 00:03:11.930
So homewards.

52
00:03:13.470 --> 00:03:19.890
So let's go ahead and do these other two.

53
00:03:19.890 --> 00:03:22.400
The other two, so we'll do,
well, the other two features, so

54
00:03:22.400 --> 00:03:25.190
projects and customers.

55
00:03:26.500 --> 00:03:29.797
And then, from here,

56
00:03:29.797 --> 00:03:35.879
we can go projects/proejcts.module.

57
00:03:41.510 --> 00:03:42.655
&gt;&gt; Lukas Ruebbelke: And we'll go

58
00:03:42.655 --> 00:03:47.560
customers/customers.module#CustomersMod-
ule.

59
00:03:53.030 --> 00:03:53.802
&gt;&gt; Lukas Ruebbelke: All right?

60
00:03:56.601 --> 00:03:58.770
&gt;&gt; Lukas Ruebbelke: And so now, yes?

61
00:03:58.770 --> 00:04:00.060
&gt;&gt; Student: I've just
got a quick question.

62
00:04:00.060 --> 00:04:04.020
What does that hashtag
on that loadChildren do,

63
00:04:04.020 --> 00:04:06.145
exactly, after that module part?

64
00:04:06.145 --> 00:04:09.632
projects.module#.

65
00:04:09.632 --> 00:04:13.505
&gt;&gt; Lukas Ruebbelke: So
the question is what is this hashtag, and

66
00:04:13.505 --> 00:04:17.624
then essentially that
signature after that.

67
00:04:17.624 --> 00:04:21.070
So what Angular's doing under the hood

68
00:04:21.070 --> 00:04:25.930
is it's saying go to this file and
load this module.

69
00:04:25.930 --> 00:04:28.677
So you can think of it
almost like a named anchor.

70
00:04:28.677 --> 00:04:33.586
When there's, for instance,
within href is that you're

71
00:04:33.586 --> 00:04:38.680
saying go to project module,
which if we open that up.

72
00:04:38.680 --> 00:04:40.100
Well, let's go to home, since it's open.

73
00:04:40.100 --> 00:04:44.700
And it's saying, or not home routing
module, but if we go to the home

74
00:04:44.700 --> 00:04:49.700
module here, is it's saying,
go to this file and then load this module.

75
00:04:49.700 --> 00:04:54.690
And so, your module is the entry point for
everything inside of that module.

76
00:04:54.690 --> 00:04:58.558
So it's saying go here, and
then bootstrap whatever you load.

77
00:04:58.558 --> 00:05:02.393
When you load it across the wire,
bootstrap it and

78
00:05:02.393 --> 00:05:05.170
spin that up inside of the application.

79
00:05:05.170 --> 00:05:06.110
So very good question.

80
00:05:06.110 --> 00:05:10.390
That is you're basically
saying go to this file, and

81
00:05:10.390 --> 00:05:14.720
then from here, then go and look for

82
00:05:14.720 --> 00:05:18.830
the module in that file, this module,
and then bootstrap the application.

83
00:05:20.860 --> 00:05:25.310
Because technically, if you have
a module and it's configured right,

84
00:05:25.310 --> 00:05:27.720
it could be a standalone application.

85
00:05:27.720 --> 00:05:31.059
Which is kinda what we're doing, is we're
kinda building these standalone things

86
00:05:31.059 --> 00:05:33.271
that we're then bootstrapping
into our application,

87
00:05:33.271 --> 00:05:35.171
because it's being lazy
loaded over the wire.

88
00:05:37.196 --> 00:05:40.961
&gt;&gt; Student: I think the routes
are missing on the lazy loaded modules.

89
00:05:40.961 --> 00:05:41.571
&gt;&gt; Lukas Ruebbelke: Right, yep.

90
00:05:50.158 --> 00:05:50.658
&gt;&gt; Lukas Ruebbelke: Our first path.

91
00:05:52.666 --> 00:05:56.290
&gt;&gt; Lukas Ruebbelke: And
then, from here, component.

92
00:05:57.290 --> 00:05:59.715
And then, let's go with

93
00:06:15.031 --> 00:06:16.980
&gt;&gt; Lukas Ruebbelke: Then,
let's hop into our projects.

94
00:06:19.178 --> 00:06:20.931
&gt;&gt; Lukas Ruebbelke: Let's
do the same thing here.

95
00:06:27.903 --> 00:06:30.190
&gt;&gt; Lukas Ruebbelke: And
component is ProjectsComponent.

96
00:06:33.410 --> 00:06:34.130
Yes?

97
00:06:34.130 --> 00:06:37.050
&gt;&gt; Student3: So having never seen Angular
routing before, this looks basically

98
00:06:37.050 --> 00:06:41.510
what you're doing is declaring
a route at the root level on the app?

99
00:06:42.700 --> 00:06:45.839
That then delegates to
this components router?

100
00:06:45.839 --> 00:06:50.708
So we could theoretically have multiple
routes in this routing table that would be

101
00:06:50.708 --> 00:06:52.410
tacked on to the end of that?

102
00:06:52.410 --> 00:06:53.670
&gt;&gt; Lukas Ruebbelke: Yes.
&gt;&gt; Student3: That's really cool.

103
00:06:53.670 --> 00:06:56.840
&gt;&gt; Lukas Ruebbelke: And so, what we can do
is, and if you look at the reference app,

104
00:06:56.840 --> 00:06:58.470
we'll see how far we'll get today.

105
00:06:58.470 --> 00:07:01.600
So I may kind of circle back on
some of this advanced stuff.

106
00:07:01.600 --> 00:07:05.427
But you can come here, and
then on this component,

107
00:07:05.427 --> 00:07:07.923
then let me just break this down.

108
00:07:11.407 --> 00:07:14.890
&gt;&gt; Lukas Ruebbelke: Is then
defined child routes on this.

109
00:07:14.890 --> 00:07:20.495
And so within this,
then you can say I wanna go to a children.

110
00:07:20.495 --> 00:07:22.750
And then you can define additional routes.

111
00:07:22.750 --> 00:07:28.952
And so, this is a really handy way to
start to define how your application is

112
00:07:28.952 --> 00:07:35.254
navigated from a user experience of
within my customer's, let's say UI,

113
00:07:35.254 --> 00:07:41.564
that maybe you wanna load something
else without having to reload the page.

114
00:07:41.564 --> 00:07:44.140
And so, you can just say when
we go to this sub-route,

115
00:07:44.140 --> 00:07:46.540
just load this component in here.

116
00:07:46.540 --> 00:07:50.000
And so, that's exactly the idea,

117
00:07:50.000 --> 00:07:52.690
is that you start to build a little
subsection, even with it's sub-routes.

118
00:07:52.690 --> 00:07:54.683
And then,
you hook it in to the parent application.

119
00:07:56.770 --> 00:08:01.743
&gt;&gt; Lukas Ruebbelke: And
let's set up the point I was making

120
00:08:01.743 --> 00:08:06.130
is you can navigate from the URL.

121
00:08:06.130 --> 00:08:08.841
So this is good if you want to
direct link into something.

122
00:08:08.841 --> 00:08:14.470
But you can also navigate from the UI.

123
00:08:14.470 --> 00:08:16.223
And so, let's see what that looks like.

124
00:08:16.223 --> 00:08:22.810
So I'm gonna go into our AppComponent.ts.

125
00:08:22.810 --> 00:08:28.280
And what I'm going to do here is
I'm going to generate some links.

126
00:08:30.210 --> 00:08:33.505
So this is just going to
be a basic data structure.

127
00:08:35.758 --> 00:08:38.934
&gt;&gt; Lukas Ruebbelke: Or
rather, we'll go like so.

128
00:08:48.014 --> 00:08:55.004
&gt;&gt; Lukas Ruebbelke: And we'll go
&gt;&gt; Lukas Ruebbelke: So

129
00:08:55.004 --> 00:09:00.074
be home, and
we'll give this a title of Home.

130
00:09:01.381 --> 00:09:03.541
&gt;&gt; Lukas Ruebbelke: We'll duplicate this,
and we'll say customers.

131
00:09:08.140 --> 00:09:12.126
&gt;&gt; Lukas Ruebbelke: Customer projects.

132
00:09:15.463 --> 00:09:16.330
&gt;&gt; Lukas Ruebbelke: Yes?

133
00:09:16.330 --> 00:09:19.080
&gt;&gt; Student3: So my colleague who's
following along at home pointed out that

134
00:09:19.080 --> 00:09:25.850
there's a wild card redirector in
the base router, in your app routing.

135
00:09:26.940 --> 00:09:28.320
Is that override?

136
00:09:30.936 --> 00:09:32.349
&gt;&gt; Lukas Ruebbelke: Let's
take this off real quick.

137
00:09:34.613 --> 00:09:35.752
&gt;&gt; Student3: No idea.

138
00:09:38.145 --> 00:09:40.125
&gt;&gt; Lukas Ruebbelke: We're coding together.

139
00:09:40.125 --> 00:09:43.500
Nope.

140
00:09:43.500 --> 00:09:46.033
Nice try, I've done something wrong,
we'll fix that in just a moment.

141
00:09:46.033 --> 00:09:52.386
But what I will do, let's just finish
this one piece out here in our

142
00:09:55.134 --> 00:09:58.702
&gt;&gt; Lukas Ruebbelke: AppComponent.ts.

143
00:09:58.702 --> 00:10:00.749
And just so I get the structure right,
let me just pull this up.

144
00:10:06.360 --> 00:10:14.788
&gt;&gt; Lukas Ruebbelke: So path, set this to
&gt;&gt; Lukas Ruebbelke: Customers, project.

145
00:10:16.568 --> 00:10:18.022
&gt;&gt; Lukas Ruebbelke: This
is actually gonna be

146
00:10:19.630 --> 00:10:20.266
&gt;&gt; Lukas Ruebbelke: Let's attach

147
00:10:20.266 --> 00:10:21.180
an icon to this.

148
00:10:21.180 --> 00:10:22.375
So we'll go icon.

149
00:10:26.921 --> 00:10:27.524
&gt;&gt; Lukas Ruebbelke: Home.

150
00:10:33.170 --> 00:10:34.790
&gt;&gt; Lukas Ruebbelke: Icon, face.

151
00:10:37.817 --> 00:10:43.157
&gt;&gt; Lukas Ruebbelke: And
let's go icon: 'projects'.

