WEBVTT

1
00:00:00.750 --> 00:00:03.489
&gt;&gt; Mark: What is the reason behind
creating separate modules for

2
00:00:03.489 --> 00:00:04.367
each component?

3
00:00:04.367 --> 00:00:06.340
Projects, home, etc.

4
00:00:07.670 --> 00:00:12.340
Is it not enough to create just components
in one main module like that model.

5
00:00:14.530 --> 00:00:16.780
&gt;&gt; Lukas Ruebbelke: So
you absolutely could.

6
00:00:16.780 --> 00:00:21.610
And that is depending on
the scope that may work.

7
00:00:21.610 --> 00:00:26.305
I may just go as far as just creating
components in a main application.

8
00:00:26.305 --> 00:00:29.861
But if you want to set up lazy loading,

9
00:00:29.861 --> 00:00:34.308
then you need to set up
routing specifically for

10
00:00:34.308 --> 00:00:38.770
that feature,
which then has to have a module.

11
00:00:40.030 --> 00:00:48.406
And so If you want to do lazy loading then
you create a module for that feature.

12
00:00:48.406 --> 00:00:51.090
So for instance,
maybe I only want to use projects or

13
00:00:51.090 --> 00:00:55.810
load projects right off the gates and
let's say maybe so it might not

14
00:00:55.810 --> 00:01:00.639
go to users, well, wrap that in a module
and then set it up to lazy load.

15
00:01:02.570 --> 00:01:06.740
Another reason why I believe they
encouraged this in the style guide

16
00:01:06.740 --> 00:01:08.310
is it just helps with encapsulation.

17
00:01:09.510 --> 00:01:14.510
That for instance, you have a user's
feature that has kind of a bunch

18
00:01:14.510 --> 00:01:20.110
of stuff in it and allows it to just kind
of create a nice container around that.

19
00:01:20.110 --> 00:01:24.602
So the answer is,
you certainly could get away with not

20
00:01:24.602 --> 00:01:28.616
wrapping your feature components and
modules.

21
00:01:28.616 --> 00:01:29.966
But there are some advantages.

22
00:01:29.966 --> 00:01:31.272
One, lazy loading.

23
00:01:31.272 --> 00:01:36.232
Two, I think kind of having a clear
perimeter around that particular

24
00:01:36.232 --> 00:01:39.064
feature for encapsulation purposes.

25
00:01:44.378 --> 00:01:45.924
&gt;&gt; Lukas Ruebbelke: Yeah,
he was just saying,

26
00:01:45.924 --> 00:01:51.390
the difference between an angular js when
you were creating a module versus now.

27
00:01:51.390 --> 00:01:55.354
Is there any major differences of
about how you think about that?

28
00:01:57.751 --> 00:02:01.220
&gt;&gt; Lukas Ruebbelke: So
an Angular js Module to an Angular Module.

29
00:02:01.220 --> 00:02:04.610
Like from a mental analog I
think almost the same thing,

30
00:02:04.610 --> 00:02:07.470
is that they're organization mechanisms.

31
00:02:08.540 --> 00:02:12.520
That in fact, prior to

32
00:02:13.550 --> 00:02:17.300
angular being released, I think it
was release candidate six or seven.

33
00:02:19.240 --> 00:02:23.676
They reintroduced Ngmodule, and
modules at the framework level.

34
00:02:23.676 --> 00:02:26.799
Because they realized,
if we're going to do lazy loading and

35
00:02:26.799 --> 00:02:29.502
these different kind of
performance enhancements,

36
00:02:29.502 --> 00:02:32.518
we have to have a way to
communicate at the framework level.

37
00:02:32.518 --> 00:02:35.890
That this is how this
application is organized and

38
00:02:35.890 --> 00:02:39.140
how it needs to be assembled together.

39
00:02:39.140 --> 00:02:44.090
Because one of the interesting
things is that not only

40
00:02:44.090 --> 00:02:48.710
are we having modules at
the framework level, but

41
00:02:48.710 --> 00:02:52.010
we have ES6, ESNext, whatever.

42
00:02:52.010 --> 00:02:56.130
We have a module system
happening at the language level,

43
00:02:56.130 --> 00:02:59.080
which is used for compilation.

44
00:02:59.080 --> 00:03:02.350
And so at the language level, we're saying
this is how we're going to organize it.

45
00:03:02.350 --> 00:03:06.470
But then we're also using Angular module,
NGModule, to say this is how this is going

46
00:03:06.470 --> 00:03:08.890
to be conceptually organized
at the framework level.

47
00:03:08.890 --> 00:03:11.950
And so from Angular.js to Angular,

48
00:03:11.950 --> 00:03:16.610
I typically, I think though,
I think philosophically they're the same.

49
00:03:16.610 --> 00:03:19.570
Obviously the underlying
execution is very, very different.

50
00:03:20.920 --> 00:03:23.710
But think of it as containers to

51
00:03:23.710 --> 00:03:27.160
logically organize your application
into nice composable pieces.

52
00:03:28.900 --> 00:03:29.500
Yes.

53
00:03:29.500 --> 00:03:33.140
&gt;&gt; Student2: About, I have a question
about the material because it's kind of so

54
00:03:33.140 --> 00:03:35.130
tightly integrated.

55
00:03:35.130 --> 00:03:39.802
This is, how long has it been
that Angular material was

56
00:03:39.802 --> 00:03:42.960
part of the standard distrubution.

57
00:03:44.180 --> 00:03:46.760
&gt;&gt; Lukas Ruebbelke: It's not part
of the standard distribution.

58
00:03:46.760 --> 00:03:49.570
So at the very beginning, when I scaffled,

59
00:03:49.570 --> 00:03:53.810
is that I went NG add and
I was able to add it in.

60
00:03:54.880 --> 00:03:59.660
And so you certainly, there's a bunch
of other files like UI frameworks

61
00:03:59.660 --> 00:04:03.230
that you had use so for instance
there is a bootstrap implementation,

62
00:04:03.230 --> 00:04:06.400
there's a primeng,
there's a couple of different libraries.

63
00:04:06.400 --> 00:04:10.860
I happen to be a fan of
material design as a whole so

64
00:04:10.860 --> 00:04:14.110
the language that it's based on,
I think it's pretty

65
00:04:15.270 --> 00:04:20.366
good as well as Angular material is
officially supported by the angular team.

66
00:04:20.366 --> 00:04:23.130
So Jeremy Elbourn and

67
00:04:23.130 --> 00:04:26.530
his team have done a very good
job of building those things out.

68
00:04:26.530 --> 00:04:31.098
So it's certainly going to have the most
or the tightest integration into angular,

69
00:04:31.098 --> 00:04:33.350
but it's definitely not baked into it.

70
00:04:33.350 --> 00:04:40.150
In other words, had I not done
n g ad- At angular/material and

71
00:04:40.150 --> 00:04:46.330
build that material module then
there would be no angular material.

72
00:04:46.330 --> 00:04:53.136
And so I very well could have built this
with bootstrap or Prime NG or whatever.

73
00:04:53.136 --> 00:04:56.250
&gt;&gt; Student2: So
this is be actively developed now.

74
00:04:56.250 --> 00:04:56.810
&gt;&gt; Lukas Ruebbelke: Yes.
So

75
00:04:56.810 --> 00:04:59.480
it's actually part of
the angular core project.

76
00:04:59.480 --> 00:05:02.050
So it's officially supported,
there's Google developers,

77
00:05:02.050 --> 00:05:03.360
like it's in-house, if you will.

78
00:05:04.410 --> 00:05:09.408
So that is for
me kinda one of the big reasons is that

79
00:05:09.408 --> 00:05:12.861
they work very closely together.

80
00:05:12.861 --> 00:05:15.380
And Jeremy Elbourn is kind of
the lead developer on that.

81
00:05:15.380 --> 00:05:18.930
He's at Google, in Mountain View.

82
00:05:18.930 --> 00:05:23.640
&gt;&gt; Student2: So
they don't develop any other frameworks,

83
00:05:23.640 --> 00:05:25.740
other than Angular Material?

84
00:05:25.740 --> 00:05:30.390
Even though it's not part of
the official release, but

85
00:05:30.390 --> 00:05:33.340
it's as tightly integrated as possible,
right?

86
00:05:33.340 --> 00:05:36.466
Because of the same team
is basically working on it?

87
00:05:36.466 --> 00:05:39.851
&gt;&gt; Lukas Ruebbelke: Right,
so one, it's because

88
00:05:39.851 --> 00:05:44.417
obviously material is a Google concept.

89
00:05:44.417 --> 00:05:48.267
And so Android, if you just look
at all of the things from Google,

90
00:05:48.267 --> 00:05:52.467
they adopt material so naturally
they're encouraged to embrace it and

91
00:05:52.467 --> 00:05:56.770
I think material design as
a design language is pretty solid.

92
00:05:56.770 --> 00:06:00.300
And so that's gonna be
the most closely integrated.

93
00:06:01.530 --> 00:06:04.920
Cuz Google being the creators of
material said well it makes sense for

94
00:06:04.920 --> 00:06:07.940
us to do Angular material and
pay for that to happen.

95
00:06:09.820 --> 00:06:12.290
But you don't have to use it,
certainly not.

96
00:06:12.290 --> 00:06:17.420
&gt;&gt; Student2: Yeah, I'm just wondering
how you picked it, how stable is it?

97
00:06:17.420 --> 00:06:20.890
How is it gonna be maintained?

98
00:06:20.890 --> 00:06:21.610
&gt;&gt; Lukas Ruebbelke: Absolutely,

99
00:06:21.610 --> 00:06:24.630
I mean it's stable as it can be which
is one of the reasons why I picked it.

100
00:06:24.630 --> 00:06:25.240
&gt;&gt; Student2: All right, then.

101
00:06:26.440 --> 00:06:27.110
&gt;&gt; Lukas Ruebbelke: Good question, though.

102
00:06:29.750 --> 00:06:30.250
Yes.

103
00:06:31.640 --> 00:06:36.151
&gt;&gt; Student3: Can you add the normal
workspace to an existing angular four or

104
00:06:36.151 --> 00:06:42.240
to an existing angular for project or does
it have to be like the latest Angular six?

105
00:06:44.720 --> 00:06:53.302
&gt;&gt; Lukas Ruebbelke: So you can add Narwhal
to an existing angular CLI project.

106
00:06:53.302 --> 00:06:56.159
And so for instance,
I generated the workspace and for

107
00:06:56.159 --> 00:06:58.640
there I'm doing Angular CLI stuff.

108
00:06:58.640 --> 00:07:03.392
But if you already have an angular
CLI project, you can add in and

109
00:07:03.392 --> 00:07:05.876
convert it into a URL workspace.

110
00:07:05.876 --> 00:07:08.760
The file structure's not going to be
the same, but you're going to have some of

111
00:07:08.760 --> 00:07:10.730
the generators and
some of the additional tooling.

112
00:07:12.960 --> 00:07:17.500
But is there a reason, so your four dot X.

113
00:07:17.500 --> 00:07:21.540
Like I would wager it would be pretty
straightforward to just upgrade.

114
00:07:23.280 --> 00:07:27.275
I mean, if I were you, I would cut
a branch and update everything and

115
00:07:27.275 --> 00:07:28.406
see what happens.

116
00:07:28.406 --> 00:07:29.626
In other words,

117
00:07:29.626 --> 00:07:34.409
it would not surprise me that
&gt;&gt; Lukas Ruebbelke: Nothing happened,

118
00:07:34.409 --> 00:07:36.039
it just would still work.

119
00:07:37.800 --> 00:07:42.383
Cuz 4.3 or thereabouts that's
when it really stabilized.

120
00:07:42.383 --> 00:07:46.111
Then they get really serious about not
introducing anymore breaking changes.

121
00:07:48.604 --> 00:07:49.469
&gt;&gt; Lukas Ruebbelke: Yes, Mark?

122
00:07:49.469 --> 00:07:55.580
&gt;&gt; Mark: In AppComponent HTML file
there is the sidenav reference.

123
00:07:55.580 --> 00:08:01.920
Could you access the reference to it in
callToggle from the app component itself?

124
00:08:01.920 --> 00:08:05.224
Call a toggle method, and
then inside the toggle method,

125
00:08:07.408 --> 00:08:12.017
&gt;&gt; Mark: Call sidebar.toggle?

126
00:08:12.017 --> 00:08:17.901
&gt;&gt; Lukas Ruebbelke: I could,
&gt;&gt; Lukas Ruebbelke: Let's try this.

127
00:08:19.584 --> 00:08:24.178
&gt;&gt; Lukas Ruebbelke: Toggle
&gt;&gt; Lukas Ruebbelke: I think it's

128
00:08:24.178 --> 00:08:24.975
just lowercase.

129
00:08:28.033 --> 00:08:30.630
&gt;&gt; Lukas Ruebbelke: Then what
happened to our app component?

130
00:08:34.059 --> 00:08:36.310
&gt;&gt; Lukas Ruebbelke: And
notice we don't have a lot in here yet.

131
00:08:36.310 --> 00:08:40.069
Toggle, we will go sidenav.

132
00:08:49.007 --> 00:08:50.360
&gt;&gt; Lukas Ruebbelke: Let's
see what happens.

133
00:08:50.360 --> 00:08:51.110
Roll the dice.

134
00:08:55.200 --> 00:08:57.408
Nothing broke.

135
00:08:58.768 --> 00:09:00.611
&gt;&gt; Mark: Do you have to actually pass it,
or

136
00:09:00.611 --> 00:09:03.530
is it actually set on
the component itself?

137
00:09:03.530 --> 00:09:05.680
&gt;&gt; Lukas Ruebbelke: No, so
you have to pass it in.

138
00:09:05.680 --> 00:09:12.065
But if you wanted to get a reference
to it, this is how you would do this.

139
00:09:21.820 --> 00:09:23.955
&gt;&gt; Lukas Ruebbelke: Using viewChild.

140
00:09:34.463 --> 00:09:36.540
&gt;&gt; Lukas Ruebbelke: So what viewChild
does, let's see if I can click it here.

141
00:09:38.460 --> 00:09:40.750
This is not super, it's pretty light.

142
00:09:44.190 --> 00:09:46.136
Basically it's a view query.

143
00:09:46.136 --> 00:09:50.310
So using viewChild,
you can say I want to query my view,

144
00:09:50.310 --> 00:09:55.060
find the sidenav reference, and
then assign it to this local property.

145
00:09:55.060 --> 00:09:56.852
So we will go localSideNav

146
00:10:08.241 --> 00:10:08.799
&gt;&gt; Lukas Ruebbelke: And so

147
00:10:08.799 --> 00:10:14.053
the technique there is,
cuz we've seen this component

148
00:10:14.053 --> 00:10:20.420
decorator up here, but
we can also decorate properties.

149
00:10:20.420 --> 00:10:22.540
We can actually decorate almost anything.

150
00:10:22.540 --> 00:10:27.970
But in this case, we're saying,
viewChild, go and query the dom.

151
00:10:27.970 --> 00:10:31.050
So decorators are just
methods that get executed.

152
00:10:32.700 --> 00:10:38.428
Go find this element and
then assign it to this local reference.

153
00:10:38.428 --> 00:10:41.798
In here.

154
00:10:41.798 --> 00:10:46.598
And then from there,
we can absolutely call toggle on that, or

155
00:10:46.598 --> 00:10:48.950
anything else that we want.

156
00:10:48.950 --> 00:10:50.980
So that's kind of a bonus technique.

157
00:10:50.980 --> 00:10:56.080
Is if you have something in your template
that you want to pull out locally.

158
00:10:56.080 --> 00:10:58.027
And when I'm dealing with observables and

159
00:10:58.027 --> 00:11:01.662
DOM events that I wanna actually stream
and manipulate, I do this all the time.

160
00:11:01.662 --> 00:11:07.170
So ViewChild, sidenav,
assign it to whatever.

161
00:11:07.170 --> 00:11:11.624
We just equally call it sidenav, and
then you can reference it in here.

