WEBVTT

1
00:00:00.112 --> 00:00:01.013
&gt;&gt; Lukas Ruebbelke: So back to the CLI.

2
00:00:01.013 --> 00:00:01.993
Let's start to build a cell.

3
00:00:01.993 --> 00:00:07.955
So,
&gt;&gt; Lukas Ruebbelke: In recent addition

4
00:00:07.955 --> 00:00:13.448
to the English CLI is the ability to add
in third party dependencies from the CLI.

5
00:00:13.448 --> 00:00:17.013
The biggest one is Angular Material.

6
00:00:17.013 --> 00:00:23.694
So from the command line if you
want to add in Angular Material

7
00:00:23.694 --> 00:00:28.675
that you can just ng add angular/material.

8
00:00:38.241 --> 00:00:42.772
&gt;&gt; Lukas Ruebbelke: And since we
are dealing with angular material,

9
00:00:42.772 --> 00:00:47.745
let's go ahead and let's do,
I'm gonna do one other

10
00:00:47.745 --> 00:00:52.066
thing real quick and
just get it out of the way.

11
00:01:00.506 --> 00:01:04.192
&gt;&gt; Lukas Ruebbelke: When you are dealing
with Angular Material specifically,

12
00:01:04.192 --> 00:01:09.066
that they broke out every one of the
components into kind of their own imports.

13
00:01:09.066 --> 00:01:13.239
And so, one of the kind of fresher
new things is that when you

14
00:01:13.239 --> 00:01:17.828
want to pull in like I need a check box,
a button, a text input,

15
00:01:17.828 --> 00:01:22.605
etc., that you have to kind of pull
them in one by one, piecemeal.

16
00:01:22.605 --> 00:01:26.600
Which I understand why they did that and
there's a good reason, but

17
00:01:26.600 --> 00:01:31.086
as you start to work in your application
and you want to start adding things,

18
00:01:31.086 --> 00:01:33.628
it can really become cluttered and noisy.

19
00:01:33.628 --> 00:01:39.869
So, what we're going to do
is create a material module.

20
00:01:39.869 --> 00:01:42.460
Is what you do is you actually, create
a stand-alone module that just imports

21
00:01:42.460 --> 00:01:44.080
everything that you need and
then, exports it.

22
00:01:44.080 --> 00:01:47.939
So, you're not having to go into
your other applications, and

23
00:01:47.939 --> 00:01:49.872
then adding those in one by one.

24
00:01:49.872 --> 00:01:52.210
So, think of this as kind of,

25
00:01:52.210 --> 00:01:58.209
a barrel roll of sorts that we're just
basically wrapping this as a module.

26
00:01:58.209 --> 00:02:01.338
So we'll go ng g lib and material.

27
00:02:01.338 --> 00:02:06.924
So the difference here is when
you're generating an app or

28
00:02:06.924 --> 00:02:11.256
a lib, it's pretty close,
and now if we look

29
00:02:11.256 --> 00:02:16.163
in the Libs folder,
we now have a material folder.

30
00:02:16.163 --> 00:02:22.657
Which in here you'll notice that we have
our module, let me scale this back down.

31
00:02:22.657 --> 00:02:26.110
And so it's just an angular module.

32
00:02:26.110 --> 00:02:31.637
And then what we will do as well is
you want to make this available for

33
00:02:31.637 --> 00:02:38.556
import in other parts of your application,
so by default it does this export star.

34
00:02:38.556 --> 00:02:41.950
I generally will come in here and
fix this.

35
00:02:41.950 --> 00:02:44.767
I think the star is ambiguous and

36
00:02:44.767 --> 00:02:49.576
so I like to be very precise
about what I'm exporting.

37
00:02:49.576 --> 00:02:54.073
Now if we go into our material module and

38
00:02:54.073 --> 00:03:01.444
we're going to hop into our snippets
here and use our first one.

39
00:03:01.444 --> 00:03:04.620
So we're just going to copy this or

40
00:03:04.620 --> 00:03:09.119
copy the entire thing and
then if we go over here.

41
00:03:12.008 --> 00:03:12.661
&gt;&gt; Lukas Ruebbelke: Just paste that in.

42
00:03:12.661 --> 00:03:15.795
And we do not need the common module.

43
00:03:15.795 --> 00:03:20.642
So,
&gt;&gt; Lukas Ruebbelke: This is

44
00:03:20.642 --> 00:03:24.075
kinda big win number two,
as this will save you a lot of time.

45
00:03:24.075 --> 00:03:27.637
So imports, we just paste that in.

46
00:03:27.637 --> 00:03:33.755
And then what we'll also do is not
only are we going to import them,

47
00:03:33.755 --> 00:03:36.719
but we are going to export them.

48
00:03:36.719 --> 00:03:40.698
This is exports rather, there we go.

49
00:03:40.698 --> 00:03:46.654
The nice thing about having a modern
ID for most of the time it works,

50
00:03:46.654 --> 00:03:51.263
is that you saw how that
basically got red and angry.

51
00:03:51.263 --> 00:03:55.816
It was like, something's not right,
I was able to hop into exports,

52
00:03:55.816 --> 00:03:58.290
or it's export, change it to exports.

53
00:03:58.290 --> 00:04:04.601
Now, what we can do is we can make
this available to our application.

54
00:04:04.601 --> 00:04:11.443
So if we go to, or our dashboard
application, if we go into the app module,

55
00:04:11.443 --> 00:04:17.867
so this is in the dashboard application,
source, app, app module.

56
00:04:17.867 --> 00:04:23.245
And if we go down here into our imports,
we can now start to

57
00:04:23.245 --> 00:04:28.851
type in MaterialModule
&gt;&gt; Lukas Ruebbelke: And

58
00:04:28.851 --> 00:04:33.479
one thing I wanna call out is,
where is my clicker.

59
00:04:35.439 --> 00:04:40.228
&gt;&gt; Lukas Ruebbelke: If you notice
here import MaterialModule

60
00:04:40.228 --> 00:04:43.793
from@workshop/material.

61
00:04:43.793 --> 00:04:48.213
So this is one of the reasons why
we changed that MPM scope, but

62
00:04:48.213 --> 00:04:53.919
this is a lot nicer than .../.../,
lib, dot, dot, dot, dot, dot.

63
00:04:53.919 --> 00:04:58.669
And so this is a really handy
way to keep this nice and clean,

64
00:04:58.669 --> 00:05:03.049
and then I'll go ahead and
just organize these again.

65
00:05:04.910 --> 00:05:09.850
&gt;&gt; Lukas Ruebbelke: Make sure that
everything is still building.

66
00:05:14.350 --> 00:05:15.240
&gt;&gt; Lukas Ruebbelke: workshop/material,
all right.

67
00:05:15.240 --> 00:05:22.760
Let's just see if we can just regain
the policy again and see what happened.

68
00:05:25.976 --> 00:05:30.776
&gt;&gt; Lukas Ruebbelke: There we go, so
one thing I have found that because

69
00:05:30.776 --> 00:05:33.990
of the moving pieces sometimes.

70
00:05:33.990 --> 00:05:37.515
And I think,
I gotta be careful what I say, but

71
00:05:37.515 --> 00:05:42.490
I find that Visual Studio code I
think it's a phenomenal editor,

72
00:05:42.490 --> 00:05:45.757
I think it does a lot
of things really well.

73
00:05:45.757 --> 00:05:51.747
But occasionally I sometimes like
the language services will conk out or

74
00:05:51.747 --> 00:05:56.656
the terminal will get weird or
there's like weird cache and

75
00:05:56.656 --> 00:06:00.287
so the first thing I do
is kind of recompile or

76
00:06:00.287 --> 00:06:04.632
I'll shut down the ID entirely and
then restart it.

77
00:06:04.632 --> 00:06:07.681
So, now that we have
the material module in,

78
00:06:07.681 --> 00:06:12.096
we pulled in the material module,
wrapped it in its own module and

79
00:06:12.096 --> 00:06:15.809
then now we're making it
available to our app module.

80
00:06:15.809 --> 00:06:18.651
All right, back into the command line.

81
00:06:18.651 --> 00:06:23.352
Let's generates some additional
pieces that I know we're going to

82
00:06:23.352 --> 00:06:25.170
need in our application.

83
00:06:25.170 --> 00:06:28.494
&gt;&gt; Student: Could you explain
a little bit why you did that,

84
00:06:28.494 --> 00:06:32.997
why you re-export the material library,
as your own library?

85
00:06:32.997 --> 00:06:38.203
&gt;&gt; Lukas Ruebbelke: So what would happen,
so the question is why do we create this

86
00:06:38.203 --> 00:06:43.115
material module, import it and
then export it back out?

87
00:06:43.115 --> 00:06:48.997
Is imagine if you had, let's say,
three applications in your work space.

88
00:06:48.997 --> 00:06:54.585
Without wrapping this in a module,
you would have to,

89
00:06:54.585 --> 00:07:00.294
at the top of every one of these,
of your applications,

90
00:07:00.294 --> 00:07:04.925
you would have to go
into your applications.

91
00:07:04.925 --> 00:07:10.412
So prior to kind of this technique, what
I would end up doing is I would be in my,

92
00:07:10.412 --> 00:07:16.503
let's say, my application module, and I'd
be importing them at the project level.

93
00:07:16.503 --> 00:07:17.201
&gt;&gt; Student: Okay.

94
00:07:17.201 --> 00:07:21.552
&gt;&gt; Lukas Ruebbelke: And then I would be
down here, not only importing them, but

95
00:07:21.552 --> 00:07:25.120
then I would also in the declaration say,
like,

96
00:07:25.120 --> 00:07:29.663
I need to clear this or
make this available to my application.

97
00:07:29.663 --> 00:07:34.483
And so now,
what this allows you to do is, keep this,

98
00:07:34.483 --> 00:07:39.734
out of all your individual
stand alone applications, and

99
00:07:39.734 --> 00:07:45.215
come in and simply import all
of that into as a single module.

100
00:07:45.215 --> 00:07:50.030
So it's kind of like a barrel
roll at a module level and

101
00:07:50.030 --> 00:07:56.248
it's just a nice way to keep your
application module nice and clean.

102
00:07:56.248 --> 00:08:00.248
What I have found as well is that if you
are working across a couple different

103
00:08:00.248 --> 00:08:02.979
applications and
then you wanna add a particular,

104
00:08:02.979 --> 00:08:05.344
say you wanted to add
in a material stepper.

105
00:08:05.344 --> 00:08:08.954
Well then you have to go around it and
kind of do that across the board or

106
00:08:08.954 --> 00:08:10.341
this is in a single place.

107
00:08:10.341 --> 00:08:15.083
And the only drawback is that you might
have a small application that maybe is

108
00:08:15.083 --> 00:08:16.800
using two or three of them.

109
00:08:16.800 --> 00:08:22.375
Then I would consider possibly just
cutting another module with just those,

110
00:08:22.375 --> 00:08:26.589
so that you're not incurring
the overhead of all of that.

111
00:08:26.589 --> 00:08:27.282
So, excellent question.

112
00:08:27.282 --> 00:08:28.381
All right.

113
00:08:28.381 --> 00:08:30.486
So let's go back to our command line.

114
00:08:30.486 --> 00:08:34.359
So you're importing all of
the material stuff that you need.

115
00:08:34.359 --> 00:08:39.211
And then, the thing that I did not copy
and paste cuz I wanted to talk about this,

116
00:08:39.211 --> 00:08:40.452
is in our ng module.

117
00:08:40.452 --> 00:08:43.997
So that's the decorator that
takes a module configuration.

118
00:08:43.997 --> 00:08:48.281
We have imports which is an array
of things that we want to import.

119
00:08:48.281 --> 00:08:51.847
And so you notice here that
we have angular/material, and

120
00:08:51.847 --> 00:08:55.556
everything is broken up into
their own separate modules, and

121
00:08:55.556 --> 00:08:58.905
we're just bundling this up,
and if you go to exports,

122
00:08:58.905 --> 00:09:03.864
then we're saying I'm going to pull this
in, so it's available to this module.

123
00:09:03.864 --> 00:09:06.873
But I'm also going to make it available,
&gt;&gt; Lukas Ruebbelke: For

124
00:09:06.873 --> 00:09:11.992
every other module or
application that consumes this in.

125
00:09:11.992 --> 00:09:15.457
And if we just go down to the bottom,
what you have is,

126
00:09:15.457 --> 00:09:20.396
you're just exporting the material
module itself, which is just a class.

127
00:09:20.396 --> 00:09:25.110
So back to the command line and
let's generate some stuff.

128
00:09:27.337 --> 00:09:32.016
&gt;&gt; Lukas Ruebbelke: And so what I'm going
to do is I'm going to generate some

129
00:09:32.016 --> 00:09:37.507
libraries, some components, and
just so that they're there.

130
00:09:37.507 --> 00:09:43.616
And so we can start to see now, at scale,
how these pieces start to fit together.

