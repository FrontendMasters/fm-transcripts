WEBVTT

1
00:00:00.120 --> 00:00:01.710
Let's go to the context component here.

2
00:00:03.910 --> 00:00:06.669
All right, so let's hide this again.

3
00:00:09.240 --> 00:00:15.519
So, let's talk about
the prop drilling problem.

4
00:00:15.519 --> 00:00:17.358
You can see here I have
a lot of components.

5
00:00:17.358 --> 00:00:21.859
I have a level 1 context component,
level 2,

6
00:00:21.859 --> 00:00:26.880
level 3, level 4, and then level 5, right?

7
00:00:26.880 --> 00:00:32.355
So this is the parent, child,
grandchild, great grandchild,

8
00:00:32.355 --> 00:00:37.940
great, great grandchild in terms
of the hierarchy here, right?

9
00:00:37.940 --> 00:00:43.260
Let's say that I have this, First

10
00:00:43.260 --> 00:00:48.157
level I have this object
here of James Jamison who's

11
00:00:48.157 --> 00:00:52.940
at his email, and
I have this user data that I need to

12
00:00:52.940 --> 00:00:57.410
get from the first level
all the way to level 5.

13
00:00:58.570 --> 00:01:04.116
Now, if we weren't using context
the way that we would do that is we

14
00:01:04.116 --> 00:01:09.476
would have const object or person,
let's just call it person.

15
00:01:12.017 --> 00:01:16.552
And just say like that's an object
here and what we would have to do

16
00:01:16.552 --> 00:01:21.507
is each one of these, you'd have to
say person equals person, right?

17
00:01:21.507 --> 00:01:23.942
And then here I would have to say props.

18
00:01:25.561 --> 00:01:33.280
Person equals, Props.person.

19
00:01:33.280 --> 00:01:37.206
Then here I would have to say props,

20
00:01:41.600 --> 00:01:49.199
Props equals,
beside person equals props.person.

21
00:01:49.199 --> 00:01:50.000
Same thing here.

22
00:01:50.000 --> 00:01:54.165
So hopefully you're getting the point is
that I have to keep handing this down,

23
00:01:54.165 --> 00:01:55.730
over and over and over again.

24
00:01:58.450 --> 00:02:01.509
Let's actually just go through with it so
you can feel my pain,

25
00:02:01.509 --> 00:02:04.295
cuz before context is around,
this is what you had to do.

26
00:02:06.868 --> 00:02:10.939
Then finally here I can put
like let's put another h5 here,

27
00:02:14.243 --> 00:02:20.174
Of JSON.stringify,

28
00:02:22.420 --> 00:02:30.028
props.person, All right, so
let's just have props here.

29
00:02:37.271 --> 00:02:40.779
So you can see down here,
finally I got the person all the way down.

30
00:02:40.779 --> 00:02:44.130
Now, isn't that just
an exercise in frustration?

31
00:02:44.130 --> 00:02:47.464
So, when it's bad uncouple is, when I was
just annoying to type to get all the way

32
00:02:47.464 --> 00:02:50.630
from the top level,
all the way down to the bottom level.

33
00:02:50.630 --> 00:02:53.588
But secondly,
it's actually kind of a bad thing overall,

34
00:02:53.588 --> 00:02:57.551
because now all of these components,
which didn't know or care about person,

35
00:02:57.551 --> 00:02:59.875
now I have to individually
care about person.

36
00:02:59.875 --> 00:03:04.437
And so if I wanna move level 3 to be
used somewhere else in my application,

37
00:03:04.437 --> 00:03:08.188
I have to make sure that person
is being passed into there, or

38
00:03:08.188 --> 00:03:10.715
else that component, no longer works.

39
00:03:10.715 --> 00:03:14.565
I've now made each one of these components
that actually really didn't care about

40
00:03:14.565 --> 00:03:17.120
props.person, whatever
was gonna be in here?

41
00:03:17.120 --> 00:03:21.277
Now each one of them is kind
of tied in this chain, and

42
00:03:21.277 --> 00:03:24.028
they have to have it or they break.

43
00:03:24.028 --> 00:03:27.950
Wouldn't be better if we could do
something different where we could

44
00:03:27.950 --> 00:03:31.329
actually just pass it directly
from this top level person or

45
00:03:31.329 --> 00:03:34.584
this context component directly
all the way to level 5.

46
00:03:34.584 --> 00:03:37.071
And you can,
there's a thing called context.

47
00:03:37.071 --> 00:03:40.120
So the first thing I'm going to do here
is I'm going to create my context.

48
00:03:40.120 --> 00:03:43.493
Constusercontext equals create
context which comes from react.

49
00:03:45.107 --> 00:03:45.607
Wrap.

50
00:03:47.952 --> 00:03:49.760
Okay, so that's coming from react here.

51
00:03:51.507 --> 00:03:52.007
Okay?

52
00:03:53.810 --> 00:03:56.438
So I've created this context,
I gave it a default object.

53
00:03:56.438 --> 00:04:00.144
So if there's no default state,
it just gives you this kind of, or

54
00:04:00.144 --> 00:04:04.720
sorry, if there's no provided state,
it gives you this default state.

55
00:04:04.720 --> 00:04:08.933
Normally won't do that, but it's good to
know that that's what this object is.

56
00:04:08.933 --> 00:04:15.158
That's why you see here that it's
James Jamison and not Bob Bobason, okay?

57
00:04:15.158 --> 00:04:17.607
And then if I go down here to this,

58
00:04:17.607 --> 00:04:21.548
I mean you can see here if I
actually just delete this.

59
00:04:26.620 --> 00:04:29.564
You'll see that this is actually
changed to Bob Bobason.

60
00:04:31.572 --> 00:04:32.093
Maybe not.

61
00:04:43.426 --> 00:04:45.035
Yeah.

62
00:04:45.035 --> 00:04:49.488
It's because it's not
getting actual real estate.

63
00:04:49.488 --> 00:04:54.011
So, in any case, that's what this is for.

64
00:04:54.011 --> 00:04:59.666
It's for default objects but because
we're actually hooking it into a hook,

65
00:04:59.666 --> 00:05:02.675
that's not why it's gonna work, okay?

66
00:05:02.675 --> 00:05:04.530
So I have this User Provider.

67
00:05:04.530 --> 00:05:08.278
This is actually what's going to
provide everything in this context to

68
00:05:08.278 --> 00:05:12.212
the lower components here, so
that's why level 2, level 3, level 4,

69
00:05:12.212 --> 00:05:14.788
level 5 can all access
these pieces of context.

70
00:05:14.788 --> 00:05:19.625
But here, inside of level 5,
I have this use context

71
00:05:19.625 --> 00:05:24.355
which I'm providing the use
context from here, and

72
00:05:24.355 --> 00:05:29.514
I'm pulling out the user and
the set user which I provided

73
00:05:29.514 --> 00:05:34.054
up here inside of the context component,
right?

74
00:05:34.054 --> 00:05:35.950
And that's why I'm able
to have data up here.

75
00:05:35.950 --> 00:05:41.862
So James Jamison, and
I'm able to use that down here in level 5.

76
00:05:41.862 --> 00:05:44.150
That's why I can even do increment, right?

77
00:05:45.430 --> 00:05:50.785
So this is actually incrementing
the number here that's being

78
00:05:50.785 --> 00:05:57.565
stored here in the context component
here in this state, this suffix, right?

79
00:05:57.565 --> 00:05:59.233
So this gets around
the prop drilling problem,

80
00:05:59.233 --> 00:06:00.907
which is what I showed
you here with the person.

81
00:06:00.907 --> 00:06:05.120
And it also gets around
the making all these intermediary

82
00:06:05.120 --> 00:06:09.960
components care about the person
which they shouldn't have to.

83
00:06:13.066 --> 00:06:15.580
Now the question might ask me is like,
okay, here's a contrived example.

84
00:06:15.580 --> 00:06:19.022
What am I actually gonna use
this really my application,

85
00:06:19.022 --> 00:06:23.121
and I'm going to encourage you to
be sparing in how you use context.

86
00:06:23.121 --> 00:06:27.080
Because one of the nice things
about what I did here with

87
00:06:27.080 --> 00:06:31.470
person is it's now very
explicit where this came from.

88
00:06:31.470 --> 00:06:36.217
I know exactly where person came from
because I can follow the trail back here

89
00:06:36.217 --> 00:06:41.034
I can say, okay, level 5 got it from
level 4, level 4 got it from level 3,

90
00:06:41.034 --> 00:06:42.608
cuz I can see it, right?

91
00:06:42.608 --> 00:06:45.722
Whereas here, I just do use context and
I pull this in,

92
00:06:45.722 --> 00:06:49.060
it's I don't actually really
know where this came from.

93
00:06:49.060 --> 00:06:52.231
I don't know where the context
was set where it's being tracked,

94
00:06:52.231 --> 00:06:53.201
who cares about it.

95
00:06:53.201 --> 00:06:54.970
So that's indirection.

96
00:06:54.970 --> 00:06:58.170
And one of the strengths of
react is that it's explicit,

97
00:06:58.170 --> 00:07:00.447
it makes it very easy to read and follow.

98
00:07:00.447 --> 00:07:05.034
So just know that it's a powerful tool
that you're introducing indirection to

99
00:07:05.034 --> 00:07:07.575
your application, which is hard, right?

100
00:07:07.575 --> 00:07:11.020
You want to have as much explicitness and
readability and

101
00:07:11.020 --> 00:07:13.544
maintainability that your app can have.

102
00:07:13.544 --> 00:07:20.405
&gt;&gt; Is this the same context that we used
yesterday for the colors for the theme?

103
00:07:20.405 --> 00:07:24.764
&gt;&gt; So the question is this the same
context that we used in the complete intro

104
00:07:24.764 --> 00:07:28.049
to react view 6 for the theme,
and the answer's yes,

105
00:07:28.049 --> 00:07:30.206
it's the exact same concept here.

106
00:07:33.960 --> 00:07:38.429
So yeah, steaming would be another good
example of some time when you might use

107
00:07:38.429 --> 00:07:39.522
context, right?

108
00:07:39.522 --> 00:07:41.775
Because you have all these various
different parts of your application.

109
00:07:41.775 --> 00:07:43.051
If you want to switch to dark mode,

110
00:07:43.051 --> 00:07:45.647
a lot of your components are going
to have to care about I was like,

111
00:07:45.647 --> 00:07:48.580
I'm in dark mode now I have to
do things differently, right?

112
00:07:48.580 --> 00:07:51.442
So that'd be a good example
of global application state.

113
00:07:51.442 --> 00:07:52.609
And that's kind of the key here,

114
00:07:52.609 --> 00:07:55.160
is you need to think of things in
like global application state.

115
00:07:55.160 --> 00:07:56.603
That's when context is useful.

116
00:07:56.603 --> 00:07:58.930
What is the second argument
of the create context?

117
00:08:00.500 --> 00:08:05.004
So you're probably asking
what this one is right here.

118
00:08:05.004 --> 00:08:08.254
So notice this is actually one argument,
it's an array, and

119
00:08:08.254 --> 00:08:10.691
this is actually just
made to look like a hook,

120
00:08:10.691 --> 00:08:14.460
and the reason why I do this is it makes
it easier for type script to type.

121
00:08:15.620 --> 00:08:20.863
So this is the use state hook, where
the first thing is the default state and

122
00:08:20.863 --> 00:08:23.287
the second thing is the set state.

123
00:08:23.287 --> 00:08:27.998
Beside the first thing is actually
the hook, contained in the hook.

124
00:08:27.998 --> 00:08:31.040
And the second thing is the set value.

125
00:08:31.040 --> 00:08:33.327
So in this particular case is
an object that returns an object.

126
00:08:33.327 --> 00:08:36.030
That's how the set state works.

127
00:08:36.030 --> 00:08:40.439
So if you remember here,
you state returns a,

128
00:08:40.439 --> 00:08:43.953
we'll just look up here, returns.

129
00:08:43.953 --> 00:08:46.554
The first thing is the user,
the second thing is the set user, and

130
00:08:46.554 --> 00:08:48.360
this is just mimicking that.

131
00:08:48.360 --> 00:08:53.159
So if I had context, which doesn't always
have to be a hook, by the way, and all I

132
00:08:53.159 --> 00:08:57.978
was checking was a color, what I would
have here instead would be green, right?

133
00:09:00.937 --> 00:09:04.521
So that's what that second thing is,

134
00:09:04.521 --> 00:09:08.672
it's just the set state for
the state hook.

135
00:09:08.672 --> 00:09:11.563
&gt;&gt; So is the use context like
the way it manages global state,

136
00:09:11.563 --> 00:09:13.875
similar to the way Redux does it?

137
00:09:13.875 --> 00:09:17.043
&gt;&gt; You're going to use Context in places
that where you typically would probably

138
00:09:17.043 --> 00:09:17.860
use Redux, right?

139
00:09:17.860 --> 00:09:21.235
You're gonna use Context and
Redux in similar ways, and frequently,

140
00:09:21.235 --> 00:09:23.775
you probably don't want to
use them at the same time.

141
00:09:23.775 --> 00:09:28.314
I would suggest either using Context or
using Redux.

142
00:09:28.314 --> 00:09:31.560
It's not a hard and fast rule but I would
say that's how I'm gonna approach it.

143
00:09:31.560 --> 00:09:37.002
And I would say that's a pretty
good way to approach it.

144
00:09:37.002 --> 00:09:39.811
Redux also takes a while,
we have a whole section on Redux so

145
00:09:39.811 --> 00:09:41.850
we'll wait to talk more about that later.

146
00:09:41.850 --> 00:09:44.187
But yeah,
you would use them in similar places.

147
00:09:44.187 --> 00:09:47.890
Does context modify the global
scope of JavaScript and answers?

148
00:09:47.890 --> 00:09:48.993
No, it doesn't.

149
00:09:48.993 --> 00:09:51.050
It's kind of self-contained to react,
right?

150
00:09:51.050 --> 00:09:57.054
So it only manages to modify this,
the user context which is kind

151
00:09:57.054 --> 00:10:03.294
of globally available anywhere
inside of this provider, right?

152
00:10:03.294 --> 00:10:06.970
So it's global to every component
inside of there, right?

153
00:10:06.970 --> 00:10:09.163
But if I put that down here on level 2,

154
00:10:09.163 --> 00:10:13.705
that means that this context component
would not be able to access it, right?

155
00:10:13.705 --> 00:10:16.800
So it's only scoped to everything
inside of the provider.

