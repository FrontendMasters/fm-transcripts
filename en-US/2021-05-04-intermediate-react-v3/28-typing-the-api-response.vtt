WEBVTT

1
00:00:02.490 --> 00:00:04.389
Let's go do Details next.

2
00:00:10.078 --> 00:00:13.077
So we're going to rename this Details.tsx.

3
00:00:19.139 --> 00:00:22.578
So before that,
we have this thing here called, well,

4
00:00:22.578 --> 00:00:24.710
we have these animals that we use.

5
00:00:25.800 --> 00:00:29.010
Let's go and
make a new file called API response type.

6
00:00:29.010 --> 00:00:31.846
So we're gonna actually
make a file just of types.

7
00:00:31.846 --> 00:00:37.278
So we're gonna make a new file here,
and we're gonna call it,

8
00:00:37.278 --> 00:00:42.106
inside of Source, and
call it APIResponseTypes.ts.

9
00:00:42.106 --> 00:00:47.596
We're not gonna have any React in it so
you could call it ts or tsx.

10
00:00:47.596 --> 00:00:50.624
I went with ts.
There's not really good rhyme or reason,

11
00:00:50.624 --> 00:00:52.330
you can call it always tsx.

12
00:00:52.330 --> 00:00:54.650
You can call it always ts
if there's no React in it.

13
00:00:54.650 --> 00:00:55.590
That's kind of up to you.

14
00:00:56.918 --> 00:01:01.660
Export type Animal.

15
00:01:01.660 --> 00:01:03.667
So we're gonna get into what is a type and

16
00:01:03.667 --> 00:01:06.750
what is an interface which is
always a fun discussion to have.

17
00:01:08.960 --> 00:01:10.840
But let's just go ahead and do this one.

18
00:01:10.840 --> 00:01:16.959
Something that is of type animal
is either gonna be a dog or

19
00:01:16.959 --> 00:01:21.087
a cat, Or a bird,

20
00:01:23.849 --> 00:01:30.664
Or a reptile or a rabbit.

21
00:01:33.999 --> 00:01:35.758
Now why did we do this?

22
00:01:35.758 --> 00:01:40.862
Because now we can say anywhere is like
hey, we have this const friend and

23
00:01:40.862 --> 00:01:46.030
they're of type animal, and
I wanna say it's a peacock, right?

24
00:01:46.030 --> 00:01:49.470
It's gonna say, hey, you can't actually
do that, that's not assignable.

25
00:01:49.470 --> 00:01:52.673
So it's actually going to literally
check is this a dog, cat, bird,

26
00:01:52.673 --> 00:01:53.610
reptile or rabbit.

27
00:01:53.610 --> 00:01:55.132
So it's literally checking like,

28
00:01:55.132 --> 00:01:58.690
I've been told that these are the only
types of animals that I can handle.

29
00:01:58.690 --> 00:02:02.010
It will prevent you from
doing it any other way.

30
00:02:03.470 --> 00:02:07.286
Okay, and we're exporting this because now
we can import this and other files and

31
00:02:07.286 --> 00:02:11.500
say, hey, this thing's an animal,
make sure it's always one of these types.

32
00:02:11.500 --> 00:02:17.730
So this is even more
specific than a string type.

33
00:02:17.730 --> 00:02:20.295
I could have just said animals
are always strings, but

34
00:02:20.295 --> 00:02:22.600
we know it's actually
more specific than that.

35
00:02:22.600 --> 00:02:25.260
Okay, now we're gonna export an interface.

36
00:02:25.260 --> 00:02:28.330
And this is always the most
confusing part for people.

37
00:02:29.980 --> 00:02:30.992
When do I use type?

38
00:02:30.992 --> 00:02:32.950
When do I use interface?

39
00:02:32.950 --> 00:02:34.180
And what's the difference?

40
00:02:34.180 --> 00:02:35.935
I'll be honest, it's confused me for
a long time and

41
00:02:35.935 --> 00:02:37.800
I still sometimes have to look it up.

42
00:02:37.800 --> 00:02:41.550
So, I'm just gonna give you
the just huge rule of thumb.

43
00:02:41.550 --> 00:02:43.968
When you can use an interface,
use an interface.

44
00:02:43.968 --> 00:02:45.825
If it's possible to use an interface,

45
00:02:45.825 --> 00:02:50.510
always use interface because it's more
flexible, it's easier to deal with.

46
00:02:50.510 --> 00:02:53.410
This is a time when we have
to actually use a type.

47
00:02:53.410 --> 00:02:58.470
Now, it says type here, but
really what it is is a type alias.

48
00:02:58.470 --> 00:03:03.650
So that alias term is actually
a little bit important here.

49
00:03:03.650 --> 00:03:08.650
Because really what animal is, is we're
just kind of restricting down a string.

50
00:03:08.650 --> 00:03:10.388
And that's really what
this type animal is,

51
00:03:10.388 --> 00:03:13.070
that's why it makes kind
of a type alias here.

52
00:03:13.070 --> 00:03:15.870
Whereas pet this is gonna be like an
interface that other things can implement.

53
00:03:17.190 --> 00:03:19.870
But suffice to say it's
just an object shape.

54
00:03:19.870 --> 00:03:23.350
And you can use types,
aliases this way as well.

55
00:03:23.350 --> 00:03:25.480
So they have some overlap
of when you can use each.

56
00:03:25.480 --> 00:03:29.177
And that's why I'm telling you the advice
that I get from the TypeScript team is

57
00:03:29.177 --> 00:03:31.960
whenever you can use
interface use interface.

58
00:03:31.960 --> 00:03:35.143
If you have some specific
use case like this one here,

59
00:03:35.143 --> 00:03:37.701
we can only use a type alias,
then do that.

60
00:03:39.759 --> 00:03:44.390
All right, so a pet that comes back from
our API has an id which is a number.

61
00:03:45.830 --> 00:03:47.760
It has a name, which is a string.

62
00:03:49.380 --> 00:03:54.167
It has an animal which is a what,
it's an animal.

63
00:03:54.167 --> 00:03:59.221
It has a description, which is a string.

64
00:04:02.068 --> 00:04:03.770
We have a breed, which is a string.

65
00:04:03.770 --> 00:04:08.454
We have an images,
which is a string array.

66
00:04:11.413 --> 00:04:16.470
We have a city which is a string, and
we have a state which is a string.

67
00:04:18.640 --> 00:04:22.352
And now we have a fully typed pet so
that we can say, okay, this object here,

68
00:04:22.352 --> 00:04:23.200
it's a pet.

69
00:04:23.200 --> 00:04:25.799
This is what it has, this is what it
doesn't have, so on and so forth.

70
00:04:29.050 --> 00:04:33.010
And then we can have a pet
respond like a pet API response.

71
00:04:33.010 --> 00:04:36.463
Anytime that we can do a fetch
from that API response,

72
00:04:36.463 --> 00:04:39.810
we're gonna have to cast
it as a pet API response.

73
00:04:39.810 --> 00:04:47.180
So export interface, PetAPIResponse and

74
00:04:47.180 --> 00:04:51.888
it's gonna have a number of

75
00:04:51.888 --> 00:04:57.015
results, which is a number.

76
00:04:57.015 --> 00:04:58.588
It has a start index, which is a number,

77
00:04:58.588 --> 00:05:00.310
it has an end index
which is another number.

78
00:05:02.240 --> 00:05:05.620
It has a hasNext which is a Boolean.

79
00:05:07.340 --> 00:05:09.470
And it has a pets array, which is what?

80
00:05:10.940 --> 00:05:13.227
It's an array of pet objects.

81
00:05:16.279 --> 00:05:20.338
And now we have some very useful flexible
things cuz we have these pet responses in

82
00:05:20.338 --> 00:05:21.780
multiple parts of our apps.

83
00:05:21.780 --> 00:05:26.744
And now we just import these types that we
can use other parts of our application.

84
00:05:29.083 --> 00:05:31.750
All right, so in the details,
let's rename it details.tsx.

85
00:05:31.750 --> 00:05:33.707
We did that.

86
00:05:33.707 --> 00:05:37.681
From react-router-dom,

87
00:05:37.681 --> 00:05:44.150
we're gonna grab the RouteComponentProps.

88
00:05:44.150 --> 00:05:48.631
And then down here at the bottom,

89
00:05:48.631 --> 00:05:54.076
we're gonna import PetAPIResponse and

90
00:05:54.076 --> 00:06:00.880
Animal from ./APIResponseTypes, okay?

91
00:06:00.880 --> 00:06:02.569
So now we've imported these types,
we can use them here.

92
00:06:04.360 --> 00:06:06.960
First thing we have class
Details extends Component.

93
00:06:06.960 --> 00:06:10.580
And now we're gonna tell it what
the shape of this component is.

94
00:06:10.580 --> 00:06:12.970
So the first thing is
it's a RouteComponent.

95
00:06:12.970 --> 00:06:17.130
So we can say this is
a RouteComponentProps.

96
00:06:17.130 --> 00:06:18.970
That's the kind of props
it's gonna expect.

97
00:06:19.980 --> 00:06:24.981
And of those, so we're gonna kinda
do two layers of generics here,

98
00:06:24.981 --> 00:06:27.630
it's going to expect an id string.

99
00:06:31.170 --> 00:06:32.790
So what is this saying?

100
00:06:32.790 --> 00:06:35.720
This is a RouteComponent that
we got from react-router-dom.

101
00:06:35.720 --> 00:06:42.008
And that in and of itself can
accept those Id like here, an app.

102
00:06:42.008 --> 00:06:46.580
This here,
we have to identify to TypeScript.

103
00:06:46.580 --> 00:06:49.061
This is what it is expecting,

104
00:06:49.061 --> 00:06:54.936
from react-router-dom to be passed
in as a parameter from that URL.

105
00:06:58.780 --> 00:07:01.129
Okay, so going back to details.

106
00:07:02.660 --> 00:07:03.928
That's how we get that.

107
00:07:07.712 --> 00:07:12.511
Now something we have to do here that we
were being kinda lazy about here is we

108
00:07:12.511 --> 00:07:16.623
were just loading json pets in here,
but it's gonna say, hey,

109
00:07:16.623 --> 00:07:21.350
I don't really know, or
this is not gonna work for your state.

110
00:07:21.350 --> 00:07:23.894
So we kinda have to be more explicit and

111
00:07:23.894 --> 00:07:27.320
give it more defaults of
what goes into state here.

112
00:07:27.320 --> 00:07:28.530
So we have to go identify,

113
00:07:28.530 --> 00:07:31.390
here's everything that's gonna
come back from the PetAPI.

114
00:07:33.590 --> 00:07:39.454
So we have to say animal
is gonna be empty string.

115
00:07:39.454 --> 00:07:40.920
But it's not just an empty string,
it's what?

116
00:07:40.920 --> 00:07:42.510
It's an animal.

117
00:07:42.510 --> 00:07:46.552
So we have to say, actually,
this is really an animal,

118
00:07:46.552 --> 00:07:49.520
it's not just a string, okay?

119
00:07:49.520 --> 00:07:50.820
Breed is gonna be an empty string.

120
00:07:55.260 --> 00:07:56.960
City is gonna to be an empty string.

121
00:07:58.550 --> 00:07:59.950
State is gonna be an empty string.

122
00:08:01.450 --> 00:08:05.830
Description, Is gonna be an empty string.

123
00:08:06.870 --> 00:08:08.645
Name is gonna be an empty string.

124
00:08:08.645 --> 00:08:11.800
And then images is gonna be an array,
right?

125
00:08:11.800 --> 00:08:15.590
But we have to tell it what
kind of array is it gonna be.

126
00:08:16.890 --> 00:08:20.650
Well, that's easy to do, you just say
it's gonna be an array of strings.

127
00:08:23.497 --> 00:08:27.746
Okay, so we have to be a bit more explicit
about what the state shape is gonna

128
00:08:27.746 --> 00:08:33.675
be, Okay?

129
00:08:36.066 --> 00:08:37.860
Is this upset about async?

130
00:08:39.655 --> 00:08:40.300
No, it's fine.

131
00:08:44.249 --> 00:08:48.990
So we have to say, what is coming back
from this API, it doesn't really know.

132
00:08:48.990 --> 00:08:52.490
So what we're gonna do this,
json is going to tell it.

133
00:08:54.610 --> 00:08:59.164
This, you can expect as a PetAPIResponse.

134
00:09:01.513 --> 00:09:04.370
So now this json is gonna know like
this is called casting, right?

135
00:09:04.370 --> 00:09:07.592
And it doesn't know what API you're
calling when, it's not that intelligent

136
00:09:07.592 --> 00:09:10.930
to really figure out, well, it's calling
this and this has this shape, right?

137
00:09:10.930 --> 00:09:11.890
You have to tell it.

138
00:09:11.890 --> 00:09:14.010
This is gonna come back as that.

139
00:09:14.010 --> 00:09:17.330
And now it knows that this
json is a PetAPIResponse.

140
00:09:19.100 --> 00:09:21.040
There's probably other ways
to cleverly type this.

141
00:09:22.500 --> 00:09:26.845
And some people don't like using
this as this casting of types but

142
00:09:26.845 --> 00:09:30.953
I find it's just really simple
because now I know this json for

143
00:09:30.953 --> 00:09:34.128
sure is definitely gonna
be a PetAPIResponse.

144
00:09:40.216 --> 00:09:47.490
Okay, this is upset that it's a, Location

145
00:09:47.490 --> 00:09:53.370
is actually a location type and we're kind
of hacking around the browser API's here.

146
00:09:53.370 --> 00:09:56.470
The correct way of doing this
is actually putting href here.

147
00:09:56.470 --> 00:10:01.600
And that's actually the technically
spect way that's correct to do it.

148
00:10:01.600 --> 00:10:03.150
There's just like a browser.

149
00:10:03.150 --> 00:10:07.106
All browsers kind of implement the unspect
behavior that if you reassign location,

150
00:10:07.106 --> 00:10:08.340
it respects that as well.

151
00:10:10.270 --> 00:10:14.015
This is gonna make you learn to spect
a lot better, for good or for worse.

152
00:10:17.416 --> 00:10:18.680
Okay, so that's all good.

153
00:10:18.680 --> 00:10:19.690
Everything's happy here.

154
00:10:19.690 --> 00:10:21.440
Everything's happy down here.

155
00:10:21.440 --> 00:10:24.991
Most of the stuff that can pick up pretty
easily with type inference but there's

156
00:10:24.991 --> 00:10:28.390
some places you just kind of just have
to massage and help it out a little bit.

157
00:10:29.770 --> 00:10:31.220
Okay, ErrorBoundary here.

158
00:10:33.350 --> 00:10:35.120
This you have to tell that Detail.

159
00:10:35.120 --> 00:10:37.750
Let's actually make this
a little bit easier.

160
00:10:37.750 --> 00:10:43.719
We're just gonna break this
into another component and

161
00:10:43.719 --> 00:10:50.069
say const DetailsErrorBoundary
is a function component.

162
00:10:51.910 --> 00:10:54.858
So I don't think I imported the top, but
I'm just gonna have VS code auto import

163
00:10:54.858 --> 00:10:56.580
it for me and
then I'll show you how to do that.

164
00:10:58.890 --> 00:11:01.775
So this is a function component, and

165
00:11:01.775 --> 00:11:06.340
it's equal to a function
called details error boundary.

166
00:11:07.450 --> 00:11:09.479
You put the name there twice just so
it's easier to debug.

167
00:11:11.160 --> 00:11:13.060
Cuz that'll show up in your stack traces.

168
00:11:13.060 --> 00:11:15.838
And then we'll just move this in here.

169
00:11:18.598 --> 00:11:27.222
And then export default
DetailsErrorBoundary like that, Okay.

170
00:11:28.379 --> 00:11:33.375
Now I just kind of as a lazy rule, I'll
pass down the props from just like this,

171
00:11:33.375 --> 00:11:37.010
but now what TypeScript is
gonna demand to know is, hey,

172
00:11:37.010 --> 00:11:42.260
I don't know what those props are and
I'm kind of uncomfortable with it.

173
00:11:42.260 --> 00:11:44.725
So for me,
it's just easier just delete the props.

174
00:11:48.702 --> 00:11:50.044
Cuz right now we're not
expecting any props,

175
00:11:50.044 --> 00:11:51.360
there's no reason that
we have to have that.

176
00:11:51.360 --> 00:11:52.201
That's just something that I do.

177
00:11:55.417 --> 00:11:59.189
Now details should be nice and
happy with everything in it.

178
00:12:03.090 --> 00:12:08.127
Okay, we've now gone through TypeScript2,
that's the next checkpoint

179
00:12:08.127 --> 00:12:12.935
that we have there in our repo and
we're gonna go do ErrorBoundary next.

