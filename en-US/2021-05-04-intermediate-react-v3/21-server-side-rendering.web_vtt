WEBVTT

1
00:00:00.200 --> 00:00:05.978
Let's move on to Server Side Rendering, so
we're gonna put our node js hats on here.

2
00:00:10.413 --> 00:00:13.140
And I'm gonna get another
fresh copy of my repo here.

3
00:00:13.140 --> 00:00:16.760
So again, make sure you're starting
with a fresh copy of the adopt me app.

4
00:00:16.760 --> 00:00:18.900
That's the one that's in 12-portals and
refs.

5
00:00:21.010 --> 00:00:24.304
The first part we just talked about was
code splitting as a way of reducing

6
00:00:24.304 --> 00:00:27.436
your bundle size, and getting
something that time to first visual,

7
00:00:27.436 --> 00:00:30.892
time to first paint, time to first
meaningful paint, all that stuff down to

8
00:00:30.892 --> 00:00:34.460
the bare minimum as code splitting
away is a good way of doing that.

9
00:00:34.460 --> 00:00:38.420
The other way that's very useful for doing
this is doing some server side rendering.

10
00:00:40.040 --> 00:00:44.312
So I react as the the fun ability that
it can actually pre-render everything on

11
00:00:44.312 --> 00:00:47.161
the server and
then send the user complete markup and

12
00:00:47.161 --> 00:00:50.290
then react can take over
the existing markup on the page.

13
00:00:52.710 --> 00:00:56.278
This is not again, not always the best
thing because what what is happening here

14
00:00:56.278 --> 00:00:58.310
is you're adding more server time, right?

15
00:00:58.310 --> 00:01:02.426
Because now the server has to do
more of like bringing in react,

16
00:01:02.426 --> 00:01:05.620
running react and
then sending down the markup.

17
00:01:05.620 --> 00:01:08.490
And then you send down the JavaScript,
it's still the same amount of JavaScript.

18
00:01:08.490 --> 00:01:14.210
So now your HTML request is larger,
JavaScript then has to bootstrap.

19
00:01:14.210 --> 00:01:19.039
Take over the page and keep rendering,
that sounds complicated, because it is

20
00:01:19.039 --> 00:01:24.670
right, and it's not always helpful,
I'll say that it's frequently helpful.

21
00:01:24.670 --> 00:01:27.460
But it's not always helpful so,
it's one of the things that just like,

22
00:01:27.460 --> 00:01:30.320
make sure you're improving things right,
measure it.

23
00:01:30.320 --> 00:01:34.327
Make sure, that your service,
especially code splitting and

24
00:01:34.327 --> 00:01:38.562
server side rendering,
they're the double edged swords here and

25
00:01:38.562 --> 00:01:41.830
you can actually,
worsen your performance here.

26
00:01:41.830 --> 00:01:45.057
You're trading off,
like total kilobytes here for,

27
00:01:45.057 --> 00:01:49.910
hopefully time to first paint, that's
what we're trying to optimize here for.

28
00:01:51.860 --> 00:01:52.978
Because with code splitting,

29
00:01:52.978 --> 00:01:56.350
you're downloading more code
because that Glue Code is not free.

30
00:01:56.350 --> 00:02:01.352
And server side rendering you're
increasing server response time with

31
00:02:01.352 --> 00:02:07.020
the hopes of the server can do it faster
than the client, which is not always true.

32
00:02:11.231 --> 00:02:13.185
But that being said,
let's have some fun, let's do it.

33
00:02:13.185 --> 00:02:18.433
[LAUGH] So the first thing we have to do
is we have to take all browser concerns,

34
00:02:18.433 --> 00:02:21.060
all of them, out of our application.

35
00:02:22.220 --> 00:02:23.804
So if this is gonna be running in node,

36
00:02:23.804 --> 00:02:26.150
that means we can't refer
to window anywhere.

37
00:02:26.150 --> 00:02:31.170
Right so for example, in our app.js
were importing Browser Router.

38
00:02:31.170 --> 00:02:34.815
Browser Router definitely
refers to the Window so

39
00:02:34.815 --> 00:02:39.684
you can't use Browser Router in Mode,
so what do we do about that?

40
00:02:40.920 --> 00:02:45.087
We're gonna create a new file here and
we're gonna call it clientapp.js.

41
00:02:47.648 --> 00:02:49.727
And that's gonna go in
the source directory, and

42
00:02:49.727 --> 00:02:51.470
everything that happens in client app.

43
00:02:51.470 --> 00:02:54.160
This is the stuff that we want
to only happen in the browser.

44
00:02:54.160 --> 00:02:56.777
A good example this would be
like Google Analytics, right or

45
00:02:56.777 --> 00:02:58.600
any of your analytics stuff.

46
00:02:58.600 --> 00:03:01.318
You don't want that stuff to fire in Node,

47
00:03:01.318 --> 00:03:05.710
you only want that stuff to fire in
browsers client side JavaScript.

48
00:03:07.600 --> 00:03:12.899
So here in client app js, we're going
to import hydrate, which is going to

49
00:03:12.899 --> 00:03:18.970
be different than render from react router
dom or sorry, from just react dom rather.

50
00:03:20.760 --> 00:03:25.260
This is basically to say, hey, I'm
expecting complete markup at this point,

51
00:03:25.260 --> 00:03:27.554
please take over this complete markup.

52
00:03:29.743 --> 00:03:34.248
We're going to import browser router,

53
00:03:38.809 --> 00:03:40.332
From react router dom.

54
00:03:43.239 --> 00:03:49.448
We're gonna import app from ./app,
here we're gonna call hydrate,

55
00:03:49.448 --> 00:03:56.380
I'm gonna put browser router and inside
of browser router we're gonna put app.

56
00:03:59.631 --> 00:04:04.431
And then we're gonna say document,
oops, that's should be a comma,

57
00:04:04.431 --> 00:04:06.926
document, get elementById route.

58
00:04:06.926 --> 00:04:11.144
And that's it.

59
00:04:13.727 --> 00:04:20.186
And then probably here I'll
just put like a note for you,

60
00:04:20.186 --> 00:04:28.148
other stuff that should only happen
in the browser, like analytics.

61
00:04:28.148 --> 00:04:32.253
So, this stuff won't get executed notes
to go willy nilly referring to document,

62
00:04:32.253 --> 00:04:36.130
right, document doesn't exist a note
it will exists in the client.

63
00:04:36.130 --> 00:04:41.420
This is where you would do all of that,
okay, let's go to app.js now.

64
00:04:43.330 --> 00:04:46.503
And now we're gonna get rid of browser
router here because that's happening in

65
00:04:46.503 --> 00:04:48.076
hydrate, or sorry in the clients app.

66
00:04:51.840 --> 00:04:56.603
We're not gonna do render here so
we can actually just remove this

67
00:04:56.603 --> 00:05:01.114
entire thing here,
that's all happening now in client app.

68
00:05:03.772 --> 00:05:06.521
We have to remove the router here,
so I'm removed the router

69
00:05:11.500 --> 00:05:15.884
Okay, and let's just move strict mode,

70
00:05:15.884 --> 00:05:20.518
we're gonna move that in here to the app,
so

71
00:05:20.518 --> 00:05:23.670
strict mode and strict mode.

72
00:05:29.391 --> 00:05:33.761
Okay, and then we can get rid of this
render here all at the bottom and

73
00:05:33.761 --> 00:05:36.223
we're gonna say export default app.

74
00:05:39.586 --> 00:05:40.364
Okay, and

75
00:05:40.364 --> 00:05:46.077
now this has been totally deep browser
a FIDE right this is now node safe to run.

76
00:05:48.823 --> 00:05:51.869
If we had tried to do this in
node it would have blown up,

77
00:05:51.869 --> 00:05:56.577
because browser router refers to window a
bunch of times, and so does react router,

78
00:05:56.577 --> 00:05:58.131
sorry, react dom as well.

79
00:06:00.801 --> 00:06:04.791
We're still not quite safe though,
our modal refers to a window in

80
00:06:04.791 --> 00:06:09.480
the outside of its first execution,
which is a problem as well.

81
00:06:09.480 --> 00:06:16.961
So let's go fix that, so open modal,
we have to get a little clever about this.

82
00:06:19.120 --> 00:06:22.331
Because whenever this gets imported for
the first time it's gonna try and

83
00:06:22.331 --> 00:06:25.270
reference documents, and
so this is gonna crash.

84
00:06:25.270 --> 00:06:30.376
So let's put let modal here,
and then move this here.

85
00:06:34.724 --> 00:06:38.889
Then we're gonna say,
if it exists, modal root

86
00:06:43.842 --> 00:06:48.460
Then just keep it the same thing,
otherwise go fetch it from the dom.

87
00:06:48.460 --> 00:06:50.805
So this is a little awkward I know and

88
00:06:50.805 --> 00:06:53.784
then this will just be
let muddle route here.

89
00:06:57.311 --> 00:07:01.162
Now, why am I not just
doing something like this,

90
00:07:01.162 --> 00:07:07.410
well this is the kind of an expensive call
anytime that you're touching the dom.

91
00:07:07.410 --> 00:07:12.124
The dom is the slowest part of
the browser, and so anytime that I do

92
00:07:12.124 --> 00:07:16.521
a document.getElementByid ID
that's just a slow look up.

93
00:07:16.521 --> 00:07:20.093
So this is going to hang your
render more than it should,

94
00:07:20.093 --> 00:07:23.950
in my MacBook 16 inch here,
it's going to be fine.

95
00:07:23.950 --> 00:07:27.758
But in someone's like really old Android
device, it might slow down a render and

96
00:07:27.758 --> 00:07:29.490
make it look kind of janky.

97
00:07:29.490 --> 00:07:33.775
So that's why I do this, so
the first time this will work,

98
00:07:33.775 --> 00:07:36.600
it'll basically go grab this.

99
00:07:36.600 --> 00:07:40.078
You might even be able to do
this with the effect, but

100
00:07:40.078 --> 00:07:42.461
whatever the case this works fine.

101
00:07:44.974 --> 00:07:46.030
Okay.

102
00:07:48.911 --> 00:07:53.340
Now we're gonna cut up a really
quick quick node server.

103
00:07:53.340 --> 00:07:57.191
So if this is your first time
running node, I'm gonna try and

104
00:07:57.191 --> 00:07:59.314
keep this as simple as possible.

105
00:07:59.314 --> 00:08:02.414
But before we do that one
more thing to change,

106
00:08:02.414 --> 00:08:08.150
index.HTML we're gonna have the the entry
point be not app.js but client app.js.

107
00:08:10.270 --> 00:08:17.390
Cause this is now the entry point for
the browser.

108
00:08:19.308 --> 00:08:20.090
Okay.

109
00:08:24.021 --> 00:08:29.546
Now, we're gonna have a problem
here because I can't just import

110
00:08:29.546 --> 00:08:36.170
like app.js directly into my node code
still because node doesn't speak jsx.

111
00:08:38.100 --> 00:08:42.919
So it has to import pre built code,
so what I'm gonna have to do is,

112
00:08:42.919 --> 00:08:47.290
before I run my node server,
I have to build my node server.

113
00:08:47.290 --> 00:08:48.202
Which is kind of strange, but

114
00:08:48.202 --> 00:08:50.620
if you're doing server side rendering,
it's just something you have to do.

115
00:08:51.800 --> 00:08:55.204
So let's go ahead and do this,
open your package.JSON And

116
00:08:55.204 --> 00:08:57.940
we're gonna put a couple
more scripts in here.

117
00:08:58.940 --> 00:09:01.633
The first one is gonna be build client.

118
00:09:04.636 --> 00:09:10.064
And we're gonna say parcel build --

119
00:09:10.064 --> 00:09:17.201
public- url ./dist/ source/index.html.

120
00:09:19.461 --> 00:09:23.641
Now what is this doing parcel builds, it's
just getting a production build ready and

121
00:09:23.641 --> 00:09:26.834
you're just telling you that
the the public url here is going to be

122
00:09:26.834 --> 00:09:27.781
coming from dist.

123
00:09:31.081 --> 00:09:38.412
Then we're gonna do a build server,
And where your parcel build,

124
00:09:38.412 --> 00:09:44.430
the destination is gonna
be dist slash server.

125
00:09:44.430 --> 00:09:47.000
This is going to go to disk and
that's fine, but

126
00:09:47.000 --> 00:09:51.070
we don't want our node server and
our client stuff going to the same place.

127
00:09:51.070 --> 00:09:53.330
That's why we do the dash D there
to tell it a different place.

128
00:09:55.840 --> 00:09:59.770
We're do --target node because we're
letting it's like don't build for

129
00:09:59.770 --> 00:10:00.730
browsers.

130
00:10:00.730 --> 00:10:08.330
Build for node js, and we're gonna say
index.js, we're about to go build this.

131
00:10:08.330 --> 00:10:11.714
So that's where that's coming from,

132
00:10:11.714 --> 00:10:16.490
then we're gonna make just like an easy,
do both.

133
00:10:16.490 --> 00:10:22.746
So I'm gonna do npm run build client and
npm run build server,

134
00:10:22.746 --> 00:10:28.901
so, now I'm gonna say npm run build and
it runs both of them.

135
00:10:34.260 --> 00:10:36.508
Okay, last one here,
I'm going to put start,

136
00:10:36.508 --> 00:10:39.340
this is how I'm gonna
start my node server.

137
00:10:39.340 --> 00:10:43.726
npm-s which I think is silent,

138
00:10:43.726 --> 00:10:48.437
run build and node, dist server,

139
00:10:48.437 --> 00:10:53.158
so our build server/index.js.

140
00:10:57.445 --> 00:11:01.082
So we kind of had to like build
a little bit of a house of cards here,

141
00:11:01.082 --> 00:11:05.910
build the client, build the server,
and then start the node server.

142
00:11:05.910 --> 00:11:08.100
That's basically what you and
I did there together.

143
00:11:13.861 --> 00:11:17.262
But now nicely, we can even write
jsx directly in our note code, and

144
00:11:17.262 --> 00:11:19.920
it's gonna be a little bit
easier to read that way.

145
00:11:19.920 --> 00:11:23.594
Otherwise we'd have to go back to
react.creed element calls, which is,

146
00:11:23.594 --> 00:11:26.350
once you write jsx you never
wanna go back to doing that.

