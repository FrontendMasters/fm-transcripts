WEBVTT

1
00:00:00.480 --> 00:00:02.265
Let's test some custom hooks.

2
00:00:04.878 --> 00:00:10.163
So I'm gonna create a new file here and

3
00:00:10.163 --> 00:00:18.101
call this use inside of
tests useBreedList.test.js.

4
00:00:18.101 --> 00:00:24.556
Okay, here we're going to, so we wrote
a custom hook in the complete intro

5
00:00:24.556 --> 00:00:30.910
to React that requests a breed
list based on what an animal was.

6
00:00:30.910 --> 00:00:31.920
And it gets that from an API.

7
00:00:34.950 --> 00:00:39.592
So one of the things that's interesting
about this is it makes an API

8
00:00:39.592 --> 00:00:44.730
request that we're gonna have to somehow
all fake out, or mock as it were.

9
00:00:46.510 --> 00:00:48.810
So let's start writing our test first.

10
00:00:48.810 --> 00:00:54.161
We're gonna import expect and

11
00:00:54.161 --> 00:00:59.610
test from @jest/globals.

12
00:00:59.610 --> 00:01:03.818
We're going to import render

13
00:01:03.818 --> 00:01:08.363
from @testing-library, and

14
00:01:08.363 --> 00:01:13.581
we're going to import useBreedList

15
00:01:13.581 --> 00:01:17.739
from ../useBreedList.

16
00:01:17.739 --> 00:01:19.478
Now, a couple things here.

17
00:01:22.206 --> 00:01:23.917
We're trying to test a hook, right?

18
00:01:23.917 --> 00:01:29.240
And hooks always exist in components, so
you can't test them outside of components.

19
00:01:30.350 --> 00:01:31.110
What do we do about that?

20
00:01:32.510 --> 00:01:34.220
Well, we can actually get
kinda clever about it.

21
00:01:34.220 --> 00:01:39.792
We can write a function here called
getBreedList that takes in an animal.

22
00:01:39.792 --> 00:01:44.204
And then we can write a basically
a fake component inside of

23
00:01:44.204 --> 00:01:46.490
function testComponent.

24
00:01:46.490 --> 00:01:49.982
Cuz remember anything that returns markup,
or

25
00:01:49.982 --> 00:01:54.180
is a React node compatible
thing is a React node, right?

26
00:01:55.730 --> 00:02:01.526
So I'm gonna say list = use breedList
(list) and have this return null,

27
00:02:01.526 --> 00:02:06.870
cuz remember, null is something
valid that you can render in React.

28
00:02:06.870 --> 00:02:11.556
So now this testComponent,
this needs to be animal, testComponent,

29
00:02:11.556 --> 00:02:14.690
technically a valid React component,
right?

30
00:02:16.090 --> 00:02:20.310
And I'm just gonna grab that list here and
then save it outside of that.

31
00:02:22.870 --> 00:02:26.573
Here, I'm going to
render my testComponent.

32
00:02:26.573 --> 00:02:30.870
And then here I'm going to return list.

33
00:02:30.870 --> 00:02:35.767
So I wrote a helper function that's
actually going to go create a React

34
00:02:35.767 --> 00:02:39.585
component, render it, and
get the list out of there,

35
00:02:39.585 --> 00:02:42.082
using all of React's life cycles.

36
00:02:42.082 --> 00:02:46.039
It's kinda strange,
I know, but it does work.

37
00:02:46.039 --> 00:02:47.226
So let's try that.

38
00:02:53.337 --> 00:02:55.934
Let's make this smaller so
you can see more what's going on.

39
00:02:55.934 --> 00:02:59.189
All right, so we're gonna say test.

40
00:03:02.237 --> 00:03:08.470
Gives an empty list with no animal, right?

41
00:03:08.470 --> 00:03:12.315
Because we want it to always
give some sort of array back.

42
00:03:12.315 --> 00:03:14.760
AlI right,
this empty array is more accurate.

43
00:03:17.336 --> 00:03:22.532
Okay, async function we're gonna say

44
00:03:22.532 --> 00:03:28.206
const BreedList status = getBreedList.

45
00:03:32.611 --> 00:03:36.814
Okay and then I'm gonna say

46
00:03:36.814 --> 00:03:43.392
expect(BreedList) to have length 0 and

47
00:03:43.392 --> 00:03:50.660
expect(status) to be unloaded, right?

48
00:03:50.660 --> 00:03:52.448
Because if you haven't
done anything with it,

49
00:03:52.448 --> 00:03:55.410
if you haven't actually reached out to
the API yet, it's gonna be unloaded.

50
00:03:55.410 --> 00:03:57.795
It's gonna be uninitialized basically.

51
00:04:02.557 --> 00:04:04.390
And there you go, that passes.

52
00:04:08.931 --> 00:04:11.057
So that this works okay because we didn't
we're not actually hitting the API, right?

53
00:04:11.057 --> 00:04:12.109
We're actually hitting fetch,

54
00:04:12.109 --> 00:04:14.820
right,because we don't give it an animal
it doesn't actually reach out to the API.

55
00:04:18.140 --> 00:04:20.380
Now we can actually make
this a little bit easier.

56
00:04:20.380 --> 00:04:23.008
There's a thing called testing
library/react hooks, so

57
00:04:23.008 --> 00:04:25.450
they don't have to do all
this black magic here.

58
00:04:25.450 --> 00:04:28.190
It'll do the black magic for
you, it's basically doing this.

59
00:04:29.190 --> 00:04:32.310
But let's go ahead and
install it, so I'm gonna, oops.

60
00:04:32.310 --> 00:04:36.300
If I hit q here, it'll actually
stop my test suite from running.

61
00:04:36.300 --> 00:04:40.926
And then I can say npm install -D

62
00:04:40.926 --> 00:04:47.110
@testing-library testing-library.

63
00:04:47.110 --> 00:04:54.747
And I wanna install react-hooks@5.1.0,

64
00:05:04.122 --> 00:05:08.981
Okay, cool,
we're put Jest back in watch mode.

65
00:05:08.981 --> 00:05:13.483
And then I'm gonna come up here and
underneath this I'm gonna say import,

66
00:05:14.986 --> 00:05:20.921
renderHook from
@testing-library/react-hooks.

67
00:05:20.921 --> 00:05:23.405
This is basically gonna do this for
us, and

68
00:05:23.405 --> 00:05:26.379
it's just gonna make this
look a little bit nicer.

69
00:05:31.919 --> 00:05:36.109
So instead of doing that getBreedList
stuff, cuz I hate writing a bunch of logic

70
00:05:36.109 --> 00:05:40.253
to test something else cuz I feel like
I'm re-implementing a bunch of stuff.

71
00:05:40.253 --> 00:05:43.266
And I feel like I need tests from
my test at that point, right?

72
00:05:43.266 --> 00:05:47.456
So instead I'm going to say render-hook,
and

73
00:05:47.456 --> 00:05:53.963
it's just a function that takes in
useBreedList of whatever I wanna get.

74
00:06:04.599 --> 00:06:05.465
Undefined is not a function.

75
00:06:10.859 --> 00:06:12.246
Yeah, here that's fine.

76
00:06:24.416 --> 00:06:31.621
Okay, and then I need to say,
const[BreedList,

77
00:06:31.621 --> 00:06:35.030
status] = result like that.

78
00:06:38.971 --> 00:06:40.993
Getting closer, what is result?

79
00:06:40.993 --> 00:06:44.059
Result is not iterable.

80
00:06:44.059 --> 00:06:48.913
Let's see what did we do here.

81
00:06:48.913 --> 00:06:53.062
&gt;&gt; .current on result.

82
00:06:56.045 --> 00:06:58.492
&gt;&gt; .current on result, thank you.

83
00:06:58.492 --> 00:07:03.194
So results gives you back
some other things besides

84
00:07:03.194 --> 00:07:07.686
just the results, right,
the current result.

85
00:07:07.686 --> 00:07:11.588
So you do have to pull the current
one out of there, yep, thank you.

86
00:07:11.588 --> 00:07:16.053
Cool, and now we have a passing test.

87
00:07:16.053 --> 00:07:19.313
This is much easier to read than that
function test component business that

88
00:07:19.313 --> 00:07:19.993
we were doing.

89
00:07:19.993 --> 00:07:21.808
This is a really nice
helper to help you do that.

90
00:07:25.639 --> 00:07:27.489
All right, so that's testing a hook.

91
00:07:27.489 --> 00:07:32.178
Now we need to go mock that API so
that if we give it something like dog here

92
00:07:32.178 --> 00:07:36.340
that it's not actually gonna
request against my API, right?

93
00:07:36.340 --> 00:07:40.216
It's actually going to go and
do some sort of mocking result there.

94
00:07:44.171 --> 00:07:46.831
AIl right, so let's go in and do that.

95
00:07:46.831 --> 00:07:50.215
Let's go ahead and
quit out of our watcher here.

96
00:07:50.215 --> 00:07:55.360
We're gonna do npm install -D,

97
00:07:55.360 --> 00:08:00.334
jest fetch mock@3.0.3.

98
00:08:00.334 --> 00:08:04.233
This is a tool that's actually
gonna help us just mock fetch.

99
00:08:04.233 --> 00:08:08.735
So mock is a term that basically says,
here's a fake implementation of that.

100
00:08:08.735 --> 00:08:12.169
So what it's gonna do is it's going
to replace the browser fetch that

101
00:08:12.169 --> 00:08:13.186
it expects to have.

102
00:08:13.186 --> 00:08:16.575
And it's gonna replace that with a
implementation that we're going to provide

103
00:08:16.575 --> 00:08:18.506
to it so
that we can provide it with fake data.

104
00:08:18.506 --> 00:08:19.883
So it never has to hit our API.

105
00:08:23.507 --> 00:08:25.181
It's a good idea,
your tests run all the time.

106
00:08:25.181 --> 00:08:29.239
APIs are slow, you don't wanna
hammer your API, just a better for

107
00:08:29.239 --> 00:08:30.920
everyone if you mock that.

108
00:08:32.870 --> 00:08:38.940
Okay, run my tests again, maybe it
actually we'll wait a second for that.

109
00:08:40.630 --> 00:08:45.102
So in your package.json,
just down here at the bottom,

110
00:08:45.102 --> 00:08:49.050
put another top level thing called jest.

111
00:08:49.050 --> 00:08:53.930
This is like configuration for
jest, 1automock false.

112
00:08:53.930 --> 00:08:57.470
We don't wanna it to, you can have it
say like mock everything by default.

113
00:08:57.470 --> 00:08:59.020
That's what it used to do,
it was terribly annoying.

114
00:09:00.160 --> 00:09:02.567
And we're gonna have a setup files.

115
00:09:05.773 --> 00:09:12.228
And one of them that we're gonna
have a run is ./src/setupjest.js.

116
00:09:12.228 --> 00:09:14.855
So we're gonna have it run this
before it runs the testing suite.

117
00:09:17.629 --> 00:09:19.297
And then we can enable
some of those mocks.

118
00:09:19.297 --> 00:09:26.522
So we just added this,
the jest automock false.

119
00:09:26.522 --> 00:09:31.177
Okay, we're gonna create a new file
here called setupjest.js that's

120
00:09:31.177 --> 00:09:33.398
gonna go in the source directory.

121
00:09:33.398 --> 00:09:36.961
Not the test directory cuz we don't
want jest to think of that's a test cuz

122
00:09:36.961 --> 00:09:37.544
it's not.

123
00:09:40.118 --> 00:09:45.438
And really short here, we're gonna import

124
00:09:45.438 --> 00:09:51.052
enableFetchMocks from jest-fetch-mock.

125
00:09:51.052 --> 00:09:55.786
And then we're just gonna run
that enableFetchMocks, that's it.

126
00:09:55.786 --> 00:09:59.898
Now, here you can actually go in
through and make an entire mock API.

127
00:09:59.898 --> 00:10:04.030
I kind of like doing
it closer to the test.

128
00:10:04.030 --> 00:10:06.958
In the test, here's what this
particular test is expecting so

129
00:10:06.958 --> 00:10:08.515
I can see everything in one test.

130
00:10:08.515 --> 00:10:12.491
Personal preference,
there's not a wrong or right answer there.

131
00:10:15.025 --> 00:10:18.317
Okay, so now we have that,

132
00:10:18.317 --> 00:10:22.764
let's go back to our useBreedList.

133
00:10:22.764 --> 00:10:24.928
We're gonna make a new test
down here at the bottom.

134
00:10:24.928 --> 00:10:30.218
That's what we're testing,
useBreedListTest,

135
00:10:30.218 --> 00:10:35.393
I want to say test gives
back breeds with an animal.

136
00:10:38.591 --> 00:10:39.402
It's an async function.

137
00:10:42.662 --> 00:10:46.022
I wanna say const breeds = and

138
00:10:46.022 --> 00:10:52.074
just give it like a list of
some breeds like Havanese,

139
00:10:52.074 --> 00:10:57.049
Bichon frise, Poodle, and I don't know,

140
00:10:57.049 --> 00:11:00.560
Corgi or something like that.

141
00:11:04.038 --> 00:11:10.924
Then I'm gonna say fetch.mockResponseOnce.

142
00:11:13.718 --> 00:11:18.106
So the next time that jest fetch
gets called respond with this and

143
00:11:18.106 --> 00:11:20.796
I'm just gonna say json.stringify,

144
00:11:25.040 --> 00:11:29.086
Animal, dog, and breeds.

145
00:11:29.086 --> 00:11:36.283
So this is a fetch response that this
particular thing would expect to see.

146
00:11:39.817 --> 00:11:45.004
And then what I can do here is I can say,

147
00:11:45.004 --> 00:11:51.824
const result waitForNextUpdate
= renderHook.

148
00:11:57.920 --> 00:12:00.366
UseBreedList with dog.

149
00:12:03.344 --> 00:12:06.501
So what this waitForNextUpdate is gonna do
is like, okay, something's gonna happen

150
00:12:06.501 --> 00:12:08.850
and then you gotta wait for
this to update and then we can test it.

151
00:12:08.850 --> 00:12:13.102
So it's gonna give you back basically a
promise of you gotta wait something async

152
00:12:13.102 --> 00:12:14.050
is gonna happen.

153
00:12:14.050 --> 00:12:20.374
So I'm gonna say await
waitForNextUpdate like this.

154
00:12:20.374 --> 00:12:24.649
This is going to say, okay,
I'm gonna get something back, wait for

155
00:12:24.649 --> 00:12:26.059
something to happen.

156
00:12:26.059 --> 00:12:32.684
Then we can continue the test
after this point and

157
00:12:32.684 --> 00:12:40.612
now I can say const BreedList
status = result.current.

158
00:12:40.612 --> 00:12:48.834
I can say expect(status) toBe(loaded),
right?

159
00:12:48.834 --> 00:12:51.034
Because it's gone to the API and
come back.

160
00:12:51.034 --> 00:12:59.106
And I expect BreedList = breeds, right?

161
00:12:59.106 --> 00:13:03.337
Whatever I gave it here to respond with,
that's what I expect to get back here.

162
00:13:06.586 --> 00:13:09.420
All right, save that,

163
00:13:09.420 --> 00:13:15.098
now we're gonna say npm run jest or
test watch.

164
00:13:21.798 --> 00:13:23.934
And you can see here,
all of my tests pass.

165
00:13:27.490 --> 00:13:31.032
So again, I always like to make sure
that things fail when I expect them to.

166
00:13:31.032 --> 00:13:36.139
So let's say I go into useBreedList and

167
00:13:36.139 --> 00:13:43.740
I'm going to say that setBreedList
here is gonna just be,

168
00:13:49.876 --> 00:13:51.820
And you can see here, now it fails.

169
00:13:51.820 --> 00:13:55.957
This is like, hey, I expected to get
these back and you gave me back lol hi,

170
00:13:55.957 --> 00:13:56.561
good job.

171
00:13:56.561 --> 00:14:03.799
So that's good, and
then what happens if I say nothing here?

172
00:14:07.469 --> 00:14:10.552
Again, I expected loaded and
I got nothing, right?

