WEBVTT

1
00:00:00.000 --> 00:00:04.385
So lets actually make this one
step more interesting, and

2
00:00:04.385 --> 00:00:06.627
we'll see how you like this.

3
00:00:06.627 --> 00:00:10.351
Right now we're sending it
as one really big response.

4
00:00:10.351 --> 00:00:13.835
We can actually make
this more interesting and

5
00:00:13.835 --> 00:00:17.418
we can do what's called
a streaming response.

6
00:00:17.418 --> 00:00:22.483
So let's actually open back up our
index.html here or sorry, index.js.

7
00:00:22.483 --> 00:00:27.967
We're gonna change this just a tiny bit.

8
00:00:27.967 --> 00:00:33.685
So change render to string
to render to node stream.

9
00:00:33.685 --> 00:00:38.165
And what this is going to do is,
node has a thing called a stream.

10
00:00:38.165 --> 00:00:40.887
You don't really need to care too much
about it unless you're a node coder.

11
00:00:40.887 --> 00:00:45.378
But it's kind of like
a continuous data source, right?

12
00:00:45.378 --> 00:00:47.392
So it's something that's going
to have multiple responses.

13
00:00:47.392 --> 00:00:51.943
So what this is gonna to do is
it's going to render your react

14
00:00:51.943 --> 00:00:54.777
application out in pieces, right?

15
00:00:54.777 --> 00:00:57.721
So it's gonna do this piece, then this
piece, then this piece in this piece.

16
00:00:57.721 --> 00:01:01.545
And what's cool about doing it this way,
is that you can send your users

17
00:01:01.545 --> 00:01:05.523
incremental responses, they can
start rendering things immediately.

18
00:01:05.523 --> 00:01:08.716
So let's take a look at
what that would look like.

19
00:01:11.603 --> 00:01:15.236
The first thing you wanna do here is
we already have the first piece pre

20
00:01:15.236 --> 00:01:18.572
rendered because it's coming
from our index.html, right?

21
00:01:18.572 --> 00:01:25.060
So what I'm gonna do is I'm
gonna say res.write parts 0.

22
00:01:25.060 --> 00:01:29.972
Now what's really cool about doing
it this way, is immediately the user

23
00:01:29.972 --> 00:01:34.093
is going to get their CSS and
everything else in the head tag.

24
00:01:34.093 --> 00:01:36.401
So we're gonna start
downloading stuff immediately.

25
00:01:36.401 --> 00:01:39.249
So they're gonna get CSS probably
before they get your JavaScript app.

26
00:01:39.249 --> 00:01:41.912
Which means that they're not gonna
have any sort of like flash or

27
00:01:41.912 --> 00:01:42.806
anything like that.

28
00:01:42.806 --> 00:01:46.194
It kind of like parallelizes
some of your workload.

29
00:01:46.194 --> 00:01:48.684
So you write this immediately.

30
00:01:48.684 --> 00:01:50.718
This starts happening.

31
00:01:50.718 --> 00:01:54.063
This can be, intensive for
server side render something.

32
00:01:54.063 --> 00:01:59.854
And then we're gonna say
here const stream equals,

33
00:01:59.854 --> 00:02:02.493
render to node stream.

34
00:02:02.493 --> 00:02:07.488
Reactmarkup, and now we have a stream and

35
00:02:07.488 --> 00:02:12.210
what I can do is I can say, stream.pipe

36
00:02:15.126 --> 00:02:18.643
To some basic connecting one
stream into my response.

37
00:02:18.643 --> 00:02:22.994
And then I have to tell it I'm
not done yet, so end false.

38
00:02:25.382 --> 00:02:29.246
So now this stream is hooked
up to my response and so

39
00:02:29.246 --> 00:02:32.469
it's streaming my response to the user.

40
00:02:32.469 --> 00:02:36.570
And then once this is done,
once this stream has finished,

41
00:02:36.570 --> 00:02:41.259
like once my react app is totally
fully rendered, I can say stream.

42
00:02:43.546 --> 00:02:51.997
.on end so that end event to
just give it a call back to say.

43
00:02:51.997 --> 00:02:58.170
All right one set done
write the status of,

44
00:02:58.170 --> 00:03:04.867
status context static
sorry static context.

45
00:03:04.867 --> 00:03:07.693
Or 200 just what we were doing before so

46
00:03:07.693 --> 00:03:11.982
I guess they could have moved
this just literally that up here.

47
00:03:11.982 --> 00:03:19.536
rez.write parts one write so we have
to write the last part of the HTML now.

48
00:03:22.955 --> 00:03:25.003
And then res.end.

49
00:03:25.003 --> 00:03:28.456
And we can delete all
this stuff down here.

50
00:03:32.362 --> 00:03:34.642
So now that we've just
made that much better for

51
00:03:34.642 --> 00:03:38.361
our users that they're gonna get pieces
of the response as fast as possible.

52
00:03:40.692 --> 00:03:41.922
So let's make sure that that works.

53
00:03:41.922 --> 00:03:43.823
We're gonna stop and
start our server again.

54
00:03:47.422 --> 00:03:48.739
This thing on port 3000.

55
00:03:48.739 --> 00:03:55.139
You won't notice any difference,
Because this is all happening so quickly.

56
00:03:55.139 --> 00:03:58.354
But you can be assured that
they're getting multiple pieces

57
00:03:58.354 --> 00:03:59.684
being streamed to them.

58
00:03:59.684 --> 00:04:01.991
Which is pretty cool.

59
00:04:01.991 --> 00:04:03.921
That is server side rendering.

60
00:04:03.921 --> 00:04:05.510
That's basically all of it in a nutshell.

61
00:04:05.510 --> 00:04:07.684
So just as a kind of a way of suggestion.

62
00:04:07.684 --> 00:04:11.727
When I worked at reddit, we didn't have
any node servers that I could write to.

63
00:04:11.727 --> 00:04:13.542
So I couldn't do server side rendering.

64
00:04:13.542 --> 00:04:15.982
But I thought Netflix had a really and
LinkedIn for

65
00:04:15.982 --> 00:04:18.836
that matter had really
interesting ways of solving this.

66
00:04:18.836 --> 00:04:23.383
They had a node server that made all of
the requests to the backends for the user.

67
00:04:23.383 --> 00:04:27.350
And then they use all of those responses
from the back ends as a mid tier service

68
00:04:27.350 --> 00:04:30.174
to do server side rendering and
serve that to the user.

69
00:04:30.174 --> 00:04:35.312
So they basically stood up a node server
In front of all their back end services.

70
00:04:35.312 --> 00:04:39.818
And then they did server side rendering
with that kind of mid-tier service.

71
00:04:39.818 --> 00:04:42.655
So if that works for you, and that's
something you wanna do at your company,

72
00:04:42.655 --> 00:04:44.500
that works really well for
Netflix and LinkedIn.

