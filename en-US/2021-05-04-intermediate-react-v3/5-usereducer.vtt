WEBVTT

1
00:00:00.690 --> 00:00:02.880
Some of you are perking up,
it's like reducers?

2
00:00:02.880 --> 00:00:03.969
This sounds like Redux, right?

3
00:00:03.969 --> 00:00:07.820
And that's because it actually is very,
very similar to Redux.

4
00:00:07.820 --> 00:00:12.640
And there are gonna be people out there
that tell you, I never use useState,

5
00:00:12.640 --> 00:00:15.060
I only ever use useReducer.

6
00:00:15.060 --> 00:00:19.908
So it's basically a thin layer on top of
useState that allows you to treat your

7
00:00:19.908 --> 00:00:23.330
state like a Redux store kind of locally.

8
00:00:23.330 --> 00:00:26.740
So let's just have quick example of that.

9
00:00:26.740 --> 00:00:33.030
I have this useReducer h1, and
if I click plus 1 on the red, it goes red.

10
00:00:33.030 --> 00:00:36.038
Or if I do green, it goes green,
or I can add blue,

11
00:00:36.038 --> 00:00:38.850
and I can turn it white if I add of them,
right?

12
00:00:40.450 --> 00:00:45.320
So it's just allowing you to change the
color values of the various RGB spectrums.

13
00:00:46.440 --> 00:00:51.105
So let's take a look at how we end up
implementing that here using useReducer.

14
00:00:51.105 --> 00:00:52.202
I'm actually a fan,
I think it's pretty great.

15
00:00:52.202 --> 00:00:56.419
And in specific cases, I will pull
on useReducer instead of useState.

16
00:00:56.419 --> 00:00:57.442
But just kinda keep that in mind.

17
00:00:57.442 --> 00:00:59.727
I'm either gonna use useState or
useReducer,

18
00:00:59.727 --> 00:01:03.392
they fundamentally achieve the same
things in relatively different ways.

19
00:01:07.038 --> 00:01:10.670
Okay, so I create a reducer here.

20
00:01:10.670 --> 00:01:14.759
And if you've ever written Redux before,
and if you haven't, we're about to, so

21
00:01:14.759 --> 00:01:15.918
don't worry about it.

22
00:01:15.918 --> 00:01:19.982
But this functionally works
like a reducer in Redux.

23
00:01:19.982 --> 00:01:25.372
It gives you the current state and
an action object.

24
00:01:25.372 --> 00:01:27.774
Okay, and
then you just switch on the action object.

25
00:01:27.774 --> 00:01:32.173
And here I have a couple of different
types of actions, increment red,

26
00:01:32.173 --> 00:01:37.769
decrement red, increment green, decrement
green, increment blue, decrement blue.

27
00:01:37.769 --> 00:01:42.978
And all I'm doing here is I am changing
the state so that the red either goes

28
00:01:42.978 --> 00:01:48.286
up or the red goes down, or the green
goes up or the green goes down, right?

29
00:01:48.286 --> 00:01:52.753
And then all I'm doing is I'm modifying
my state in some capacity, and

30
00:01:52.753 --> 00:01:54.619
then I'm returning it back.

31
00:01:54.619 --> 00:01:58.626
So you can see here, I have useReducer.

32
00:01:58.626 --> 00:02:01.681
I hand it this reducer up here, right?

33
00:02:01.681 --> 00:02:06.248
And a reducer's just a funny way of
saying a function that takes in a state,

34
00:02:06.248 --> 00:02:10.390
it takes an action, and
then it returns back the state at the end.

35
00:02:10.390 --> 00:02:13.968
That's literally everything that
a reducer is right there in a nutshell.

36
00:02:13.968 --> 00:02:19.089
It's a function that has a specific way of
calling in a specific thing that returns.

37
00:02:21.623 --> 00:02:24.135
Okay, so you have a useReducer here,

38
00:02:24.135 --> 00:02:28.072
I hand it the reducer function,
I hand it an initial state.

39
00:02:28.072 --> 00:02:33.694
And then here I get back the current
state and a dispatch function.

40
00:02:33.694 --> 00:02:37.617
And a dispatch function is,
you hand it an action item and

41
00:02:37.617 --> 00:02:43.359
then it calls the reducer with the current
state and that action item, that's it.

42
00:02:43.359 --> 00:02:46.477
So down here, I wonder what this is?

43
00:02:46.477 --> 00:02:51.433
Yeah, inaccessible,
that's why there's a warning here.

44
00:02:53.315 --> 00:02:58.518
And then any time that I click the click,
it dispatches a action item here

45
00:02:58.518 --> 00:03:05.070
of either increment red or decrement red,
depending on which button they pressed.

46
00:03:05.070 --> 00:03:08.389
And the same thing here with
increment green or decrement green,

47
00:03:08.389 --> 00:03:10.212
increment blue or decrement blue.

48
00:03:10.212 --> 00:03:15.022
And it just goes through the reducer,
It modifies the state in some capacity.

49
00:03:15.022 --> 00:03:21.061
In this particular case,
red will go up by 50 or down by 50.

50
00:03:21.061 --> 00:03:26.080
And then yeah, the limitRGB function
is just keeping it between 0 and

51
00:03:26.080 --> 00:03:29.320
255, which are the valid values for RGB.

52
00:03:30.700 --> 00:03:34.103
So the question that would be
valid to ask at this point is,

53
00:03:34.103 --> 00:03:36.400
why would I choose this over useState?

54
00:03:36.400 --> 00:03:41.610
This looks a little bit more complicated,
and I mean, perhaps it is.

55
00:03:41.610 --> 00:03:43.881
I mean, useState, you just say,
here's my default state,

56
00:03:43.881 --> 00:03:45.740
give me back a different piece of state.

57
00:03:45.740 --> 00:03:51.425
I could've totally done
this with const [r,

58
00:03:51.425 --> 00:03:59.340
setR] = useState(50) or
something like that, right?

59
00:03:59.340 --> 00:04:02.580
And then done that for red,
done it for green, done it for blue.

60
00:04:02.580 --> 00:04:06.835
And then instead of dispatching an action
here, I just would've called setR or

61
00:04:06.835 --> 00:04:09.030
setG or setB, right?

62
00:04:09.030 --> 00:04:11.060
Totally valid,
would work exactly the same way.

63
00:04:12.440 --> 00:04:16.941
When people just like this
methodology of using reducers,

64
00:04:16.941 --> 00:04:22.080
because they've used Redux for so
long they wanna keep using that.

65
00:04:22.080 --> 00:04:24.120
That's one reason that people use it.

66
00:04:24.120 --> 00:04:29.123
But the reason that I think that this is,
perhaps in this particular case, useful is

67
00:04:29.123 --> 00:04:33.990
you have a lot of state that's modified
in relatively uniform fashions, right?

68
00:04:33.990 --> 00:04:37.010
So this is either going up or
down by 50, right?

69
00:04:37.010 --> 00:04:39.183
So this actually makes this
pretty easy to understand.

70
00:04:39.183 --> 00:04:42.187
It's like okay,
we can go up or down by 50.

71
00:04:42.187 --> 00:04:45.120
And you can kinda see at a glance here,

72
00:04:45.120 --> 00:04:50.690
this is all of the way that my
state changes in a single glance.

73
00:04:50.690 --> 00:04:54.306
And let me just tell you that the source
of almost every bug is just state

74
00:04:54.306 --> 00:04:57.150
changing in the wrong way, right?

75
00:04:57.150 --> 00:05:01.403
And so in this particular view, I can
see at a glance all of the delta, right,

76
00:05:01.403 --> 00:05:05.070
all of the change that this particular
component can go through and

77
00:05:05.070 --> 00:05:06.200
at a single glance.

78
00:05:06.200 --> 00:05:08.960
And I can kinda comprehend it as a whole.

79
00:05:08.960 --> 00:05:10.150
That's valuable, right?

80
00:05:10.150 --> 00:05:11.320
That makes it very readable.

81
00:05:12.500 --> 00:05:14.783
The other thing that I'll say is,

82
00:05:14.783 --> 00:05:18.280
I can pull this reducer
out now into a unit test.

83
00:05:18.280 --> 00:05:21.506
And I can unit test that if I give
it this state and this action,

84
00:05:21.506 --> 00:05:24.006
that it comes back with
the state that I expect.

85
00:05:24.006 --> 00:05:26.325
Which means that you get to change or

86
00:05:26.325 --> 00:05:30.900
you get to test how your state will
change, and that is very valuable.

87
00:05:30.900 --> 00:05:33.324
So then you can write unit
tests around that and

88
00:05:33.324 --> 00:05:35.880
prevent bugs from state
changing incorrectly.

89
00:05:35.880 --> 00:05:38.600
Which, like I said,
is the source of most bugs.

90
00:05:38.600 --> 00:05:40.205
And if you can test
the source of most bugs,

91
00:05:40.205 --> 00:05:42.130
you can have more confidence
in your application.

92
00:05:43.720 --> 00:05:45.455
That makes sense?

93
00:05:45.455 --> 00:05:50.300
You're kind of decoupling state change
from the display layer, and that's useful.

94
00:05:52.130 --> 00:05:55.690
So again, some people say, I always
do this, and I only do it this way.

95
00:05:55.690 --> 00:05:58.090
And I would say that can be valid, right?

96
00:05:58.090 --> 00:06:00.950
If you're into that,
you can definitely go down that path.

97
00:06:00.950 --> 00:06:01.470
Do I do it?

98
00:06:01.470 --> 00:06:02.448
No, no, definitely not.

99
00:06:02.448 --> 00:06:05.826
Cuz I'm lazy and
I just wanna write useState, right?

100
00:06:05.826 --> 00:06:09.060
I lean into the convenience
probably a little too much.

101
00:06:09.060 --> 00:06:12.091
But for something like this
component that I made here,

102
00:06:12.091 --> 00:06:14.680
I'm pretty happy with
using useReducer here.

103
00:06:14.680 --> 00:06:16.865
And I'm totally fine if you say,
I'm gonna do it sometimes,

104
00:06:16.865 --> 00:06:18.430
I'm not gonna do it sometimes.

105
00:06:18.430 --> 00:06:20.930
I think that's a pragmatic
approach to do it that way.

106
00:06:20.930 --> 00:06:23.432
Should I ever use Redux and
useReducer at the same time?

107
00:06:23.432 --> 00:06:26.800
And I would say I think there's
occasion that you would use both.

108
00:06:26.800 --> 00:06:31.660
Because you're gonna use useReducer
as a local piece of state, right?

109
00:06:31.660 --> 00:06:33.476
So in this particular case,

110
00:06:33.476 --> 00:06:38.045
I probably don't wanna store
this RGB in a global store.

111
00:06:38.045 --> 00:06:41.695
And I think the proper way to use
Redux is, it's for global state only.

112
00:06:41.695 --> 00:06:45.838
I don't keep local view
state in my Redux store.

113
00:06:45.838 --> 00:06:49.130
I use state for that, cuz React
is really good at managing state.

114
00:06:51.260 --> 00:06:54.261
So in that particular case,
I would use useReducer for

115
00:06:54.261 --> 00:06:58.900
the local view state and I would use
Redux for the global state, right?

116
00:06:58.900 --> 00:07:03.848
And now, kind of a superpower they've got
kind of accidentally in this process is,

117
00:07:03.848 --> 00:07:08.535
you can now use reducers both in your
global Redux store and in your useReducer.

118
00:07:08.535 --> 00:07:11.330
I don't know if that would ever be useful
or if you'd ever have occasion to do that.

119
00:07:11.330 --> 00:07:14.746
But now it's possible and
you're using one programming model for

120
00:07:14.746 --> 00:07:16.240
your entire application.

121
00:07:16.240 --> 00:07:17.410
I think that's valid as well.

122
00:07:19.340 --> 00:07:23.897
So yeah, it's definitely possible and
perhaps even a good thing to do.

123
00:07:23.897 --> 00:07:26.157
I haven't done it, so
I'm not gonna tell you that I've done it.

124
00:07:26.157 --> 00:07:29.030
But it sounds like a good idea to me.

125
00:07:29.030 --> 00:07:31.560
Could you use useContext
together with useReducer and

126
00:07:31.560 --> 00:07:33.210
basically kind of recreate Redux?

127
00:07:34.360 --> 00:07:37.210
Seems plausible,
seems like you could definitely do that.

128
00:07:37.210 --> 00:07:42.110
The other thing I'll say about, at that
point, if you're really trying to recreate

129
00:07:42.110 --> 00:07:45.950
Redux using useReducer with context,
just use Redux, right?

130
00:07:45.950 --> 00:07:47.920
Redux has other things on top of it.

131
00:07:47.920 --> 00:07:53.520
It has additional tooling, like
the Redux dev tools, it has middleware.

132
00:07:53.520 --> 00:07:57.095
So if you need to do Redux sagas,
or thunks, or things like that,

133
00:07:57.095 --> 00:07:59.968
stuff that we're gonna talk
about in that section.

134
00:07:59.968 --> 00:08:03.852
But if you're gonna do that together,

135
00:08:03.852 --> 00:08:07.979
just go ahead and
go full in and use Redux.

136
00:08:07.979 --> 00:08:11.910
You also have the Redux hooks, which
are really convenient to use as well.

137
00:08:13.130 --> 00:08:16.350
So right now this is black,
right, this useReducer.

138
00:08:18.084 --> 00:08:23.311
So that means its color here is 0,
0, 0, right?

139
00:08:23.311 --> 00:08:28.650
I'm gonna click Increment red, so
the plus on the red one, so this one here.

140
00:08:28.650 --> 00:08:32.814
So it's gonna call this onClick handler,
which is gonna call a function that's

141
00:08:32.814 --> 00:08:35.630
gonna call dispatch with
this action type in it.

142
00:08:35.630 --> 00:08:39.650
This action type, all it has is a type
on it that says increment r, right?

143
00:08:39.650 --> 00:08:44.872
So I call dispatch with this object, plus.

144
00:08:44.872 --> 00:08:47.020
You probably can't see it,
this got a little bit more red.

145
00:08:47.020 --> 00:08:48.770
Let's click it three times.

146
00:08:48.770 --> 00:08:51.810
All right, so now this is like 200, okay?

147
00:08:53.070 --> 00:08:59.411
So when I click this again,
it's going to dispatch this object.

148
00:08:59.411 --> 00:09:03.600
Which is then going to call this
reducer with the state, right?

149
00:09:03.600 --> 00:09:09.940
So let's pretend it came in with 0, 0,
0, this is the state object right here.

150
00:09:09.940 --> 00:09:13.196
So r 0, just type it out.

151
00:09:15.269 --> 00:09:22.070
R 0, g 0, b 0, that's gonna be the.

152
00:09:27.611 --> 00:09:29.932
What did I do here?

153
00:09:29.932 --> 00:09:35.283
Okay, that's gonna be the state
right there, the r 0, g 0, b 0.

154
00:09:35.283 --> 00:09:40.532
And then the action here is going to

155
00:09:40.532 --> 00:09:47.598
be just an object that
has type INCREMENT_R.

156
00:09:47.598 --> 00:09:50.770
Okay, so that's gonna be the action
that's gonna come in here.

157
00:09:50.770 --> 00:09:53.395
So then it's gonna go to the switch
statement, it's gonna say,

158
00:09:53.395 --> 00:09:55.230
what is the action type here?

159
00:09:55.230 --> 00:09:56.990
It's gonna be type INCREMENT_R, so

160
00:09:56.990 --> 00:09:59.415
it's gonna hit this first case right here,
right?

161
00:09:59.415 --> 00:10:03.460
And then it's gonna return
an Object.assign, empty object.

162
00:10:03.460 --> 00:10:04.320
One big key here is,

163
00:10:04.320 --> 00:10:07.390
make sure you're always returning
a brand new object, right?

164
00:10:07.390 --> 00:10:11.940
So don't return the old object, or
the reducer thinks nothing changed, right?

165
00:10:11.940 --> 00:10:15.419
Cuz it's not doing a deep check,
it's just doing a simple shallow check,

166
00:10:15.419 --> 00:10:16.754
same object, same object?

167
00:10:16.754 --> 00:10:20.526
Cool, I'm not gonna update, same object,
different object, I'm gonna update.

168
00:10:20.526 --> 00:10:24.558
That's the simple algorithm
it goes through to,

169
00:10:24.558 --> 00:10:28.304
if the useReducer is
going to update the view.

170
00:10:28.304 --> 00:10:30.685
So I assigned the old state, right?

171
00:10:30.685 --> 00:10:34.467
So g and b are coming across,
they're gonna stay exactly 0,

172
00:10:34.467 --> 00:10:36.855
we're not overriding that.

173
00:10:36.855 --> 00:10:41.155
And then here,
we're going to add 50 to the red.

174
00:10:41.155 --> 00:10:47.380
So this is gonna come back from r 0,
it'll come back as r 50, right?

175
00:10:47.380 --> 00:10:50.580
And we'll return that,
which is the new value of the store.

176
00:10:50.580 --> 00:10:54.510
It's going to call rerender again here,
which is going to make it more red.

177
00:10:56.550 --> 00:10:58.070
So that's step by step what happens.

178
00:10:59.170 --> 00:11:01.978
And again, if you've ever done Redux,
that should feel very familiar,

179
00:11:01.978 --> 00:11:03.310
that's exactly how Redux works.

