WEBVTT

1
00:00:00.000 --> 00:00:03.889
We're gonna to start from a fresh
copy of our route repo here.

2
00:00:03.889 --> 00:00:07.732
We are going to write some unit tests.

3
00:00:07.732 --> 00:00:12.439
So let me give you my
full bias on unit tests.

4
00:00:12.439 --> 00:00:15.487
As opposed to other people,
I really don't like writing unit tests.

5
00:00:15.487 --> 00:00:16.940
It's like my least
favorite part of my job.

6
00:00:16.940 --> 00:00:18.560
I don't know if maybe
other people like it.

7
00:00:18.560 --> 00:00:19.480
I don't quite like it.

8
00:00:20.620 --> 00:00:24.225
So I only try and write unit
tests that I actually believe in.

9
00:00:24.225 --> 00:00:28.214
That, I think are going to benefit
me that give me in confidence,

10
00:00:28.214 --> 00:00:33.229
that when I check in my code, that I'm
confident that I'm not gonna break stuff.

11
00:00:33.229 --> 00:00:37.527
So in other words, I think 100% test
coverage is a fable fairy tale that's

12
00:00:37.527 --> 00:00:41.119
not worth chasing because a lot
of times you write garbage tests.

13
00:00:41.119 --> 00:00:44.440
Just to make sure you cover
that one last line, right?

14
00:00:44.440 --> 00:00:47.075
And I don't believe in that
garbage one last test, right?

15
00:00:47.075 --> 00:00:50.488
I will not write that one last test.

16
00:00:50.488 --> 00:00:55.016
I fight with people all the time
about this at LinkedIn, all the time.

17
00:00:55.016 --> 00:00:58.704
I'm going to try and teach you to write
effective unit tests that you believe in.

18
00:00:58.704 --> 00:01:00.829
That inspire confidence in your code.

19
00:01:00.829 --> 00:01:05.100
And I'm gonna try to teach you to not
write tests that are a waste of time.

20
00:01:05.100 --> 00:01:07.604
That's my goal here.

21
00:01:07.604 --> 00:01:12.461
I would rather have a few rock
solid confidence inspiring

22
00:01:12.461 --> 00:01:16.923
test than many crappy tests
that cover everything.

23
00:01:16.923 --> 00:01:19.219
That's my gist here.

24
00:01:19.219 --> 00:01:21.527
All right, so we're gonna test with jest.

25
00:01:21.527 --> 00:01:25.669
I've used jest for
basically like six years now.

26
00:01:25.669 --> 00:01:29.689
I used to when it was terrible before
they released like the the revamped

27
00:01:29.689 --> 00:01:30.560
version of it.

28
00:01:30.560 --> 00:01:34.845
And I use it now and
which is revamped and very nice.

29
00:01:34.845 --> 00:01:41.585
So, what I want you to do is I
want you to say npminstall-D jest.

30
00:01:41.585 --> 00:01:47.669
@26.6.3 and
then @testing library/react @11.2.5.

31
00:01:58.299 --> 00:02:03.482
So Jest is also released by Facebook,
it's not the same team at Facebook.

32
00:02:03.482 --> 00:02:05.846
Not necessarily and
they're not tied together.

33
00:02:05.846 --> 00:02:07.616
You can use Jest and Angular together.

34
00:02:07.616 --> 00:02:10.259
You can use Jest and Rust together.

35
00:02:10.259 --> 00:02:14.608
So jest is actually fairly
opinionated about what it's running.

36
00:02:14.608 --> 00:02:19.719
But frequently it is used with JavaScript
frequently it is used with react.

37
00:02:19.719 --> 00:02:22.951
If you're using it with JavaScript,
it is built on top of Jasmine.

38
00:02:22.951 --> 00:02:26.732
So if you need help with like
the various inner workings of like how

39
00:02:26.732 --> 00:02:27.846
the matches work.

40
00:02:27.846 --> 00:02:30.177
All that stuff is coming from Jasmine.

41
00:02:30.177 --> 00:02:32.057
Jest does not choose to re implement that.

42
00:02:32.057 --> 00:02:36.050
They just reuse Jasmine and
Jasmine is a great testing framework.

43
00:02:36.050 --> 00:02:39.613
You can also use Mocha and Sinon and Chai.

44
00:02:39.613 --> 00:02:41.750
And those are great testing
frameworks as well,

45
00:02:41.750 --> 00:02:43.478
we're just gonna stick to Jest today.

46
00:02:45.269 --> 00:02:47.449
We're gonna be using
Testing Library React.

47
00:02:47.449 --> 00:02:50.128
This was formerly called
React Testing Library.

48
00:02:50.128 --> 00:02:55.196
But now they have a testing library for
Svelte and View and for Angular.

49
00:02:55.196 --> 00:02:58.680
So they have various different
flavors of that now.

50
00:02:58.680 --> 00:03:01.880
Previously in this course I used
enzyme instead of testing library.

51
00:03:01.880 --> 00:03:03.575
That used to be like
the State of the Union.

52
00:03:03.575 --> 00:03:06.470
That's what Airbnb uses.

53
00:03:06.470 --> 00:03:10.022
But now everyone's moving
to testing Library React.

54
00:03:10.022 --> 00:03:11.927
Even the React docs recommended.

55
00:03:11.927 --> 00:03:17.559
So just use this,
believe me it's a lot better than Enzyme.

56
00:03:17.559 --> 00:03:19.340
So let's start writing some tests.

57
00:03:19.340 --> 00:03:23.284
I'm gonna show you several varieties
of tests of things that I think I

58
00:03:23.284 --> 00:03:24.100
would write.

59
00:03:24.100 --> 00:03:28.965
First things first,
create a new directory inside

60
00:03:28.965 --> 00:03:33.723
of your source directory
called _ _Tests_ _.

61
00:03:33.723 --> 00:03:35.592
Why all the underscores?

62
00:03:35.592 --> 00:03:39.818
This is a double underscore, also known
as a dunder, and I did not make that up.

63
00:03:39.818 --> 00:03:43.221
It sounds ridiculous, but
that's what the python community calls it.

64
00:03:43.221 --> 00:03:45.519
So what double underscores mean?

65
00:03:45.519 --> 00:03:46.730
It means that it's magical.

66
00:03:46.730 --> 00:03:48.373
And I'm not making that up either.

67
00:03:48.373 --> 00:03:50.190
It means that the name
is actually important.

68
00:03:50.190 --> 00:03:52.559
It must be called underscore,
underscore test underscore underscore.

69
00:03:52.559 --> 00:03:55.592
So if you're looking at python code and
you see a lot of dunders.

70
00:03:55.592 --> 00:03:59.771
That's why the double underscores means,
this is a special name,

71
00:03:59.771 --> 00:04:02.348
it must be called this or
it will not work.

72
00:04:02.348 --> 00:04:04.509
In other words, jest is going to look for

73
00:04:04.509 --> 00:04:08.020
your tests inside of the underscore
underscore test directory.

74
00:04:08.020 --> 00:04:09.659
That's why we're calling it that.

75
00:04:09.659 --> 00:04:16.870
In fact, you can see that my logo changed
here from the VS code, icons, extension.

76
00:04:16.870 --> 00:04:19.890
Okay, we're gonna put all
of our tests in here.

77
00:04:19.890 --> 00:04:22.014
You don't necessarily have
to do this with jest.

78
00:04:22.014 --> 00:04:25.750
But it will pick up things automatically
if you do and I like automatic things.

79
00:04:25.750 --> 00:04:26.495
So I'm gonna do that.

80
00:04:28.819 --> 00:04:30.300
Okay, we also need our babel to work.

81
00:04:30.300 --> 00:04:33.125
So go ahead and open your babelrc.

82
00:04:33.125 --> 00:04:38.757
Because your code is gonna be run,
its browser code but being run in node.

83
00:04:38.757 --> 00:04:41.417
We have to give it some
special kind of tuning here.

84
00:04:43.210 --> 00:04:47.102
So let's go ahead and
take a look at what that would look like.

85
00:04:47.102 --> 00:04:49.805
This is our babelrc.

86
00:04:49.805 --> 00:04:53.089
This all looks fine to me, but the one
thing we have to do is we have to add

87
00:04:53.089 --> 00:04:55.119
one more thing under here says called env.

88
00:04:55.119 --> 00:04:59.431
Which is to apply different sorts
of transformations depending on

89
00:04:59.431 --> 00:05:01.359
what environment we're in.

90
00:05:01.359 --> 00:05:04.006
So if we're inside of
the test environment,

91
00:05:04.006 --> 00:05:07.776
which jest will automatically
put you in the test environment.

92
00:05:07.776 --> 00:05:12.545
Then what we're gonna do is
we're gonna have presets.

93
00:05:15.950 --> 00:05:20.055
Okay?
And it's gonna look relatively similar.

94
00:05:20.055 --> 00:05:26.057
We're gonna have @babel/preset or

95
00:05:26.057 --> 00:05:29.061
press preset env.

96
00:05:30.944 --> 00:05:34.319
Then we have to get that
an object of targets.

97
00:05:37.619 --> 00:05:41.753
That's another object, and

98
00:05:41.753 --> 00:05:46.720
the inside of that is node current.

99
00:05:46.720 --> 00:05:52.426
Basically what we're saying here.

100
00:05:52.426 --> 00:05:53.131
And if this is really hard to copy
because of all of the indentation.

101
00:05:53.131 --> 00:05:53.633
One, yes, it is.

102
00:05:53.633 --> 00:05:54.982
Two, just copy that in my notes.

103
00:05:54.982 --> 00:06:00.781
It's in the, Right here.

104
00:06:00.781 --> 00:06:02.609
Testing.

105
00:06:02.609 --> 00:06:03.567
I think we're in basic React.

106
00:06:03.567 --> 00:06:05.090
No, we're in the one previous to that.

107
00:06:05.090 --> 00:06:07.611
We're in Intro React Testing.

108
00:06:07.611 --> 00:06:10.579
Just copy this beast right there.

109
00:06:10.579 --> 00:06:14.042
But know the reason why
we're doing this is so

110
00:06:14.042 --> 00:06:18.704
that when we're in the testing,
so when note m equals test.

111
00:06:18.704 --> 00:06:22.650
Target node don't target the browser
because my tests run in node.

112
00:06:22.650 --> 00:06:24.270
That's what that means.

113
00:06:28.474 --> 00:06:29.234
Make sense?

114
00:06:33.272 --> 00:06:38.532
All right, and then I want you to go
to your package.json really quick.

115
00:06:38.532 --> 00:06:40.910
We're gonna add two
different commands here.

116
00:06:40.910 --> 00:06:42.949
One is gonna be test.

117
00:06:42.949 --> 00:06:46.085
And that's gonna be jest,
surprise surprise.

118
00:06:46.085 --> 00:06:49.148
And another one is going to be test:watch.

119
00:06:49.148 --> 00:06:55.351
So I'm gonna show you a fun
feature of just called watch.

120
00:06:55.351 --> 00:06:57.440
Which means we can run
our test interactively.

121
00:07:01.139 --> 00:07:03.328
All right,
now we can start writing some tests.

122
00:07:07.680 --> 00:07:11.342
So, some general rules of thumb.

123
00:07:11.342 --> 00:07:14.190
Try not to test implementation details,
right?

124
00:07:14.190 --> 00:07:18.843
Don't test.state one from
state a to state b, right?

125
00:07:18.843 --> 00:07:22.279
Don't test that your hook
went from green to blue.

126
00:07:22.279 --> 00:07:26.405
Test that the button
changed from green to blue.

127
00:07:26.405 --> 00:07:29.729
So, approach all of your testing
from a user perspective.

128
00:07:29.729 --> 00:07:30.940
What is happening to the user?

129
00:07:30.940 --> 00:07:31.910
What is the user seeing?

130
00:07:31.910 --> 00:07:32.789
What is the user doing?

131
00:07:32.789 --> 00:07:36.779
Don't test it from the developers
perspective of what is my state look like?

132
00:07:36.779 --> 00:07:39.080
Did my redux change?

133
00:07:39.080 --> 00:07:44.981
Don't test those details, try and
test what's actually happening.

134
00:07:44.981 --> 00:07:47.498
Another thing is that UI has changed so

135
00:07:47.498 --> 00:07:50.969
frequently I try not to
test UIs in general, right?

136
00:07:50.969 --> 00:07:53.190
Like I try not to test that
the brand is showing up, right?

137
00:07:53.190 --> 00:07:58.527
Because the brand might change class names
it might change something else about it,

138
00:07:58.527 --> 00:07:59.060
right?

139
00:07:59.060 --> 00:08:01.661
There's a million ways to test your code.

140
00:08:01.661 --> 00:08:06.747
Let's try and keep it to a bare minimum of
things that are actually important to us.

141
00:08:06.747 --> 00:08:09.547
In general,
when I encounter a bug I first try and

142
00:08:09.547 --> 00:08:12.154
write a test that would
have caught that bug.

143
00:08:12.154 --> 00:08:14.320
And then I try and
make that test pass, right?

144
00:08:14.320 --> 00:08:18.222
So, I try and make a test that fails
first on the bug that I have and

145
00:08:18.222 --> 00:08:20.334
then I work to make that test pass.

146
00:08:20.334 --> 00:08:21.227
So two things,

147
00:08:21.227 --> 00:08:25.919
it makes my debugging go faster because
then I have confidence of when I fixed it.

148
00:08:25.919 --> 00:08:30.229
Two, I'm kind of guaranteeing that I'm
not gonna regress in the same way again.

149
00:08:30.229 --> 00:08:34.663
Because if I caught a bug and it's been
assigned to me and I have to go fix it

150
00:08:34.663 --> 00:08:38.758
it's bad enough that I don't wanna
waste time on it in the future.

151
00:08:38.758 --> 00:08:42.154
Not always true, these are all
kind of guidelines, not rules.

152
00:08:42.154 --> 00:08:45.280
But those are some things I try and
adhere to.

153
00:08:45.280 --> 00:08:49.143
And then the last thing, just ask
yourself what's important about your app?

154
00:08:49.143 --> 00:08:51.499
Is the login process important?

155
00:08:51.499 --> 00:08:53.929
Probably write a lot of tests about that.

156
00:08:53.929 --> 00:08:57.989
Is the copyright showing
up in the footer correctly?

157
00:08:57.989 --> 00:08:59.609
Is that important?

158
00:08:59.609 --> 00:09:00.435
Maybe not.

159
00:09:00.435 --> 00:09:02.394
Maybe don't test that, right?

160
00:09:02.394 --> 00:09:05.002
That's why I'm saying you don't
need 100% test coverage because no

161
00:09:05.002 --> 00:09:05.809
one cares about that.

162
00:09:05.809 --> 00:09:08.754
That's kind of my methodology
of testing anyway,

163
00:09:08.754 --> 00:09:11.773
of like ask yourself what's
important tests that.

164
00:09:11.773 --> 00:09:15.239
Ask yourself what like, if there's
a bug here, is it gonna cripple me?

165
00:09:15.239 --> 00:09:19.228
Maybe write less tests or no tests about
that and then just react to those.

166
00:09:19.228 --> 00:09:23.570
One of the worst things in
the entire world just anecdotally,

167
00:09:23.570 --> 00:09:28.245
the one of the worst things in
the entire world is having a large test

168
00:09:28.245 --> 00:09:30.933
suite that you have no confidence in.

169
00:09:30.933 --> 00:09:34.433
Because if it fails, and you're just like,
it's just being finicky again,

170
00:09:34.433 --> 00:09:35.390
I'm gonna ignore it.

171
00:09:35.390 --> 00:09:42.790
Not only now slows you down, and
like it doesn't do anything for you.

172
00:09:42.790 --> 00:09:46.420
I would much rather have
no test than bad tests.

173
00:09:49.099 --> 00:09:53.330
So, I'm just crushed
about this kind of stuff.

174
00:09:53.330 --> 00:09:55.843
So I apologize if I'm
rubbing anyone the wrong way.

175
00:09:55.843 --> 00:09:58.746
But I've worked on some really
bad test suites before.

176
00:09:58.746 --> 00:10:02.690
One of them was just so many Selenium,
tests that just nothing.

177
00:10:02.690 --> 00:10:06.489
But I couldn't check it in
until the Selenium test passed.

178
00:10:06.489 --> 00:10:08.946
So I would have something
that would be working.

179
00:10:08.946 --> 00:10:10.409
I have to run it like five times.

180
00:10:10.409 --> 00:10:13.692
I'd be there like,
Friday at like 8PM trying to go home.

181
00:10:13.692 --> 00:10:14.819
It's like just pass.

182
00:10:14.819 --> 00:10:15.700
I know this works.

183
00:10:15.700 --> 00:10:17.338
I watched it work.

184
00:10:17.338 --> 00:10:19.138
And it was just it was like no don't know.

185
00:10:19.138 --> 00:10:21.399
I don't, it's windy over here.

186
00:10:21.399 --> 00:10:23.070
So no,
I'm not gonna pass your test this time.

