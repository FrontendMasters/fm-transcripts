WEBVTT

1
00:00:00.330 --> 00:00:04.021
Let's move on to code splitting so,

2
00:00:04.021 --> 00:00:09.150
we are gonna start with
a fresh version of this app.

3
00:00:11.110 --> 00:00:18.130
So please grab another copy of
this one here, portals-and-refs.

4
00:00:18.130 --> 00:00:20.942
Another fresh copy here,
we'll have to run an npm install.

5
00:00:24.375 --> 00:00:29.027
While it's installing,
let's talk about what code splitting is,

6
00:00:29.027 --> 00:00:33.450
you want your application to
be as fast as possible, right?

7
00:00:33.450 --> 00:00:37.738
There's a lot of research that's gone into
how fast the page load correlates by how

8
00:00:37.738 --> 00:00:39.370
much money your app can make.

9
00:00:39.370 --> 00:00:43.839
Amazon has done just infinite research
on that subject, and relatively you can

10
00:00:43.839 --> 00:00:47.920
translate web performance to dollars made,
in some capacity, right?

11
00:00:49.840 --> 00:00:55.340
So you want to show your users useful
content as fast as possible, right?

12
00:00:55.340 --> 00:00:59.201
I want a user to see above the fold
content so they can decide,

13
00:00:59.201 --> 00:01:01.570
what do I want to do on the site today?

14
00:01:01.570 --> 00:01:05.476
What do I want to click on they can
start that decision making process

15
00:01:05.476 --> 00:01:08.410
of like seeing something understanding it.

16
00:01:08.410 --> 00:01:10.187
Deciding what they're trying to do, and

17
00:01:10.187 --> 00:01:12.940
then translate that to moving
the mouse to clicking on it right.

18
00:01:14.130 --> 00:01:18.485
So in other words, there is a lag between
someone seeing something on the page,

19
00:01:18.485 --> 00:01:22.197
what they can do and then moving their
mouse to be able to click on it.

20
00:01:22.197 --> 00:01:26.080
So we're gonna show you a couple of
techniques on how to improve that.

21
00:01:26.080 --> 00:01:30.394
The first one's gonna be code splitting,
so if you have a enormous application,

22
00:01:30.394 --> 00:01:34.740
let's say what's a really big
application like, like Facebook, right?

23
00:01:34.740 --> 00:01:40.670
Facebook does a million things, but
most of it is a single page application.

24
00:01:40.670 --> 00:01:43.972
But if you load all of Facebook all
at once on your first page load,

25
00:01:43.972 --> 00:01:48.015
that's gonna take a while, particularly
if you're on the 2G network right.

26
00:01:48.015 --> 00:01:51.587
So you need to load part of
the application at a time, and

27
00:01:51.587 --> 00:01:55.769
we're gonna do this through
a technique called code splitting.

28
00:01:58.491 --> 00:02:03.743
So now that we have a fresh copy of this
application, we're gonna do something

29
00:02:03.743 --> 00:02:09.260
where we're going to send the user
the bare minimum amount of JavaScript.

30
00:02:09.260 --> 00:02:11.967
All at once to get our page up and
running, and

31
00:02:11.967 --> 00:02:13.900
then not load everything else.

32
00:02:15.150 --> 00:02:18.398
So, first of all, what I'm gonna
say here is for this application,

33
00:02:18.398 --> 00:02:21.814
not only is it overkill, this is
actually actively a bad idea because our

34
00:02:21.814 --> 00:02:24.020
application is actually so small.

35
00:02:24.020 --> 00:02:27.153
That's splitting it up is a bad idea
because we're going to incur more

36
00:02:27.153 --> 00:02:28.810
network latency.

37
00:02:28.810 --> 00:02:32.770
But imagine you have like
a megabyte of JavaScript, right?

38
00:02:32.770 --> 00:02:37.180
At that point, you'd want to send them
like 100 kilobytes to get them started.

39
00:02:37.180 --> 00:02:41.620
And then back load that 900 kilobytes
later, does that make sense?

40
00:02:41.620 --> 00:02:44.908
Like right now our application is no more
than, like 50 kilobytes, I imagine 5060 or

41
00:02:44.908 --> 00:02:45.730
something like that.

42
00:02:46.950 --> 00:02:51.960
So for us to split that into 10 mega
kilobyte chunks, it's not a great idea.

43
00:02:51.960 --> 00:02:58.743
All that being said, we're definitely
gonna do it, it's gonna be fun, all right,

44
00:02:58.743 --> 00:03:05.701
so head to app.js And
what I want you to do,

45
00:03:05.701 --> 00:03:09.670
is I want at the top here, I want you to
grab two new things out of react here.

46
00:03:09.670 --> 00:03:15.311
I want you to grab lazy, and
I want you to grab suspense,

47
00:03:15.311 --> 00:03:19.710
lazy with a lowercase s with a capital S.

48
00:03:19.710 --> 00:03:23.010
suspense is a component that's why it's
capitalized lazy is a function sweitzer.

49
00:03:24.605 --> 00:03:29.005
What we're gonna do is we're gonna
split this by route, right so

50
00:03:29.005 --> 00:03:33.895
if a user navigates to search params,
they're not gonna load details.

51
00:03:33.895 --> 00:03:36.669
If they go to details,
they're not gonna load search params.

52
00:03:39.454 --> 00:03:42.643
So and then if a user clicks
the page to go to details,

53
00:03:42.643 --> 00:03:45.415
then they're going to
load that on the fly.

54
00:03:45.415 --> 00:03:48.565
And we're gonna do that through
a technique called suspense.

55
00:03:50.600 --> 00:03:53.139
So the first thing I want you
to do here is I want you to

56
00:03:53.139 --> 00:03:56.220
delete these two imports for
details and search params.

57
00:03:56.220 --> 00:03:58.822
If we leave those in,
then they're going to get bundled and

58
00:03:58.822 --> 00:04:01.540
the art what we're trying to do
is here is not bundled them in.

59
00:04:04.230 --> 00:04:08.292
Okay, but now we have these like, hey,
well, what is search parameters and

60
00:04:08.292 --> 00:04:09.740
what is details?

61
00:04:09.740 --> 00:04:16.893
What we're gonna do here is when
to say const details = lazy,

62
00:04:16.893 --> 00:04:22.130
and I'm gonna use
a function called import.

63
00:04:24.060 --> 00:04:25.576
This is called dynamic import,

64
00:04:25.576 --> 00:04:28.985
it's a functionality built into
like JavaScript itself, right?

65
00:04:28.985 --> 00:04:34.342
This isn't even just a react thing, import
here works how like require us to work for

66
00:04:34.342 --> 00:04:37.445
common js,
right where it's a dynamic import.

67
00:04:38.905 --> 00:04:42.512
So this is an import that works at runtime
parcel is actually smart enough to say

68
00:04:42.512 --> 00:04:44.115
like, okay, I found an import.

69
00:04:44.115 --> 00:04:47.440
I'm gonna break the code here, and
I'm gonna break it into multiple bundles.

70
00:04:49.280 --> 00:04:53.407
Okay, so I'm gonna say import./details and

71
00:04:53.407 --> 00:04:57.636
I'm gonna do the same thing here for
detail or for

72
00:04:57.636 --> 00:05:02.588
search params, so now,
what lazy does is this lazy turns

73
00:05:02.588 --> 00:05:07.870
this dynamic import this returns
a promise just so you know.

74
00:05:09.430 --> 00:05:13.413
And this turns it into a component that we
can actually render here that works just

75
00:05:13.413 --> 00:05:15.340
like details in search params.

76
00:05:15.340 --> 00:05:18.429
But now it's a component that's
going to be the lazy loaded later.

77
00:05:20.110 --> 00:05:21.160
Say that three times fast.

78
00:05:29.387 --> 00:05:34.968
Now what I want you to do, Is,

79
00:05:34.968 --> 00:05:41.910
I want you to wrap router here,
with suspense,

80
00:05:41.910 --> 00:05:47.126
which is the component that we got.

81
00:05:47.126 --> 00:05:49.686
And we're gonna move everything
inside a router inside of that.

82
00:05:54.299 --> 00:05:58.050
Okay, now, what is suspense?

83
00:05:58.050 --> 00:06:02.442
Suspense is basically saying, hey app,
if you run into a component that's

84
00:06:02.442 --> 00:06:06.420
being lazy loaded in the background,
this is where you pause.

85
00:06:06.420 --> 00:06:08.995
So for example here,
notice that the header,

86
00:06:08.995 --> 00:06:13.410
actually the header is outside of it or
is inside of it rather.

87
00:06:13.410 --> 00:06:18.786
But if I put it there, I could have
like a Now this h1 won't go away this,

88
00:06:18.786 --> 00:06:26.113
let's make this an h2
This h2 won't go away

89
00:06:31.232 --> 00:06:33.284
But everything inside of
here while it's waiting for

90
00:06:33.284 --> 00:06:35.160
something to load is gonna
show them something.

91
00:06:35.160 --> 00:06:39.953
So what you have to do is you
save fall back equals and

92
00:06:39.953 --> 00:06:45.760
here we're just gonna put like
another h2 of loading route.

93
00:06:48.550 --> 00:06:51.339
So now, if something's loading here,

94
00:06:51.339 --> 00:06:56.353
it'll show that h2 to someone saying,
we're waiting for something.

95
00:06:56.353 --> 00:06:59.913
Now, you should put some effort into this
and make this like a nice loading spinner

96
00:06:59.913 --> 00:07:03.910
or something like that write something so
that the user like feels acknowledged.

97
00:07:03.910 --> 00:07:07.135
Not some super lazy, hey, we're loading
stuff, you can sit there and wait.

98
00:07:09.590 --> 00:07:12.554
Don't be actively hostile to your users,
that's my general advice to you.

99
00:07:15.458 --> 00:07:22.112
All right, so let's go ahead and
turn on our npm run Dev.

100
00:07:22.112 --> 00:07:24.685
Now the first thing I
want you to notice here,

101
00:07:24.685 --> 00:07:28.629
when this is building is that this
is gonna spit out multiple things.

102
00:07:29.910 --> 00:07:35.070
And if we look here inside of our dist,
notice that that we got app.js,

103
00:07:35.070 --> 00:07:40.630
details.js search params.js and
those are all now separate files.

104
00:07:40.630 --> 00:07:43.144
So app.js is gonna be the one
that they always load no matter

105
00:07:43.144 --> 00:07:44.770
what this is going to have react in it.

106
00:07:44.770 --> 00:07:50.310
This is gonna have app.js,
anything that we loaded here.

107
00:07:50.310 --> 00:07:53.636
Team context, react router dom,
all this stuff that's shared among-st

108
00:07:53.636 --> 00:07:56.370
all of them and
anything that's important here in app.js.

109
00:07:56.370 --> 00:08:00.690
The other thing that's pretty cool,
let's say details.js,

110
00:08:00.690 --> 00:08:04.053
let's say we had,
let's not look at the output.

111
00:08:06.398 --> 00:08:08.248
Let's say that modal, in fact,

112
00:08:08.248 --> 00:08:12.050
that's a good one modal is actually
only used here in details.js.

113
00:08:12.050 --> 00:08:16.870
So, that means this is not going
to exist in the app.js bundle.

114
00:08:16.870 --> 00:08:19.550
Or imagine that you're loading moment js,
right?

115
00:08:19.550 --> 00:08:23.117
Everyone knows moment is enormous so, if
that was only being loaded in one route,

116
00:08:23.117 --> 00:08:24.680
it would only come with that route.

117
00:08:25.980 --> 00:08:30.010
Don't use moment, that's maybe
another just high level thing here.

118
00:08:30.010 --> 00:08:35.183
There's much better things you can use,
like date fns or temporals,

119
00:08:35.183 --> 00:08:39.400
the new thing, anyway,
know what this course is about.

120
00:08:41.220 --> 00:08:46.181
Yeah, so that's really cool,
another really cool thing is it is smart

121
00:08:46.181 --> 00:08:51.307
enough about let's say that both details,
and search brands used rx js,

122
00:08:51.307 --> 00:08:56.290
it would be smart to see like both of
these are gonna actually use those.

123
00:08:56.290 --> 00:09:00.108
I'm gonna just share that, and I actually
can create shared bundles that get loaded

124
00:09:00.108 --> 00:09:02.210
with either one of them as well.

125
00:09:02.210 --> 00:09:04.459
So it's actually pretty intelligent
of how it splits these out.

126
00:09:07.354 --> 00:09:09.965
Okay, so let's go ahead and
open our Adopt Me here.

127
00:09:12.005 --> 00:09:14.701
So let's look at our
Network panel down here.

128
00:09:17.631 --> 00:09:23.755
And look at everything coming in, let's
just just notice that we got AP details,

129
00:09:23.755 --> 00:09:29.540
but we did not get search params and
notice this h2 won't go away.

130
00:09:29.540 --> 00:09:34.632
Okay now if I click adopt me notice
it's going to load search params.js,

131
00:09:34.632 --> 00:09:35.460
and it did.

132
00:09:37.510 --> 00:09:41.250
But if I go back to this page,
it's smartest, like I already have these.

133
00:09:41.250 --> 00:09:45.922
I don't have to do anything about that,
right, so that's the power of suspense

134
00:09:45.922 --> 00:09:50.597
that just basically says like, if it's
loaded, it'll keep those in memory and

135
00:09:50.597 --> 00:09:54.260
reload them again,
like it won't re request the JavaScript.

136
00:09:54.260 --> 00:09:57.507
It's smart off to keep them on hand, and

137
00:09:57.507 --> 00:10:02.580
that's pretty much it,
that's as hard as code splitting is.

138
00:10:02.580 --> 00:10:04.883
You just identify points
in your application and

139
00:10:04.883 --> 00:10:08.150
routes is an obvious place to do it,
but you can do it in other places.

140
00:10:08.150 --> 00:10:12.253
In fact, we're gonna do it with modal here
in just a second just to show you that you

141
00:10:12.253 --> 00:10:15.060
can do it even within applications,
or within routes.

142
00:10:16.100 --> 00:10:16.744
But yeah,

143
00:10:16.744 --> 00:10:22.020
this is a way that you can cut down your
bundle size on really large applications.

144
00:10:22.020 --> 00:10:25.418
Just make sure that it's worth it right,
and like I said, in this case,

145
00:10:25.418 --> 00:10:28.927
it would not be worth it because this
is such a small application that we're

146
00:10:28.927 --> 00:10:31.340
definitely we're splitting
hairs at this point.

