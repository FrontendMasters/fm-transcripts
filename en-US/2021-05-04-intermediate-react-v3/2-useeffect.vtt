WEBVTT

1
00:00:00.220 --> 00:00:02.128
So when you go into
the effect component here.

2
00:00:04.378 --> 00:00:06.738
And here in this effect component,

3
00:00:06.738 --> 00:00:10.660
you can basically see here that
it is just a clock, right?

4
00:00:10.660 --> 00:00:13.300
That's basically what you can see here.

5
00:00:13.300 --> 00:00:16.700
Use affect example time and to local time.

6
00:00:16.700 --> 00:00:19.400
Why is this not sticking
in toggle word wrap?

7
00:00:19.400 --> 00:00:20.250
Thank you, okay.

8
00:00:22.460 --> 00:00:25.967
So I have a state here you state,
it is the time and

9
00:00:25.967 --> 00:00:29.440
it starts out with the current time.

10
00:00:29.440 --> 00:00:31.781
You can see wherever I am at
the moment it is currently 10:00 AM.

11
00:00:34.390 --> 00:00:37.094
UseEffect here basically what I'm doing,

12
00:00:37.094 --> 00:00:41.262
is I'm scheduling something to
happen after the first render, and

13
00:00:41.262 --> 00:00:46.470
then I can tell it how often that I
want to rend or be called thereafter.

14
00:00:46.470 --> 00:00:53.000
So in this particular case, useEffect this
function gets scheduled to run, right?

15
00:00:53.000 --> 00:00:56.818
So this does not happen immediately,
this is gonna render first,

16
00:00:56.818 --> 00:01:01.473
then some other stuff might happen,
you don't know and then it's going to run.

17
00:01:01.473 --> 00:01:06.830
But the key here is that you're not gonna
be precisely sure of when it's gonna run.

18
00:01:06.830 --> 00:01:09.966
And we'll get into another
one called use layout effect,

19
00:01:09.966 --> 00:01:13.290
where you actually will
know when it's gonna run.

20
00:01:13.290 --> 00:01:17.880
But suffice to say this will run basically
from your perspective immediately, right?

21
00:01:17.880 --> 00:01:21.380
Like it's gonna run within
milliseconds very likely.

22
00:01:21.380 --> 00:01:27.470
But you're not positive will other
things be scheduled before then, okay?

23
00:01:28.700 --> 00:01:30.575
And the question that you
might have there, is well,

24
00:01:30.575 --> 00:01:32.960
what if I want to make sure that it
does run immediately afterwards?

25
00:01:32.960 --> 00:01:34.678
That's what use layout effect is for, and

26
00:01:34.678 --> 00:01:36.500
we'll talk about that
here in just a second.

27
00:01:37.590 --> 00:01:43.240
So here I have a timer, I set a timeout,
and it returns after one second, right?

28
00:01:43.240 --> 00:01:47.620
And all I'm doing here, is I'm setting
the time here which causes a new

29
00:01:47.620 --> 00:01:51.281
re-render which then schedules
another effect, right?

30
00:01:51.281 --> 00:01:53.241
So that's how it's happening,

31
00:01:53.241 --> 00:01:57.590
every single time is scheduling a new
effect after a re-render, right?

32
00:01:57.590 --> 00:02:01.061
Cuz remember the dependencies here, right?

33
00:02:01.061 --> 00:02:05.923
If I did this and I put this empty array
here, which means it has no dependencies,

34
00:02:05.923 --> 00:02:08.795
notice this now has stopped counting,
right?

35
00:02:08.795 --> 00:02:11.610
Because it stops scheduling
the timer to go off.

36
00:02:11.610 --> 00:02:15.991
But again, if I take that out,
now this is gonna start counting again.

37
00:02:18.072 --> 00:02:18.771
Just pretty cool.

38
00:02:20.841 --> 00:02:22.544
Now you could put in here and

39
00:02:22.544 --> 00:02:27.819
would probably be more accurate if you put
timer in here, or time sorry, not timer.

40
00:02:30.941 --> 00:02:32.750
And notice this would
continue working as well.

41
00:02:32.750 --> 00:02:37.710
You're basically saying like, hey, only
reschedule this whenever time changes.

42
00:02:37.710 --> 00:02:40.620
And by leaving it off, you're basically
saying, hey, when anything changes,

43
00:02:40.620 --> 00:02:41.731
please schedule a new effect.

44
00:02:45.530 --> 00:02:48.240
I think if I had the react hooks eslint,

45
00:02:48.240 --> 00:02:52.280
it would actually tell me to put time and
set time in there.

46
00:02:53.600 --> 00:02:56.884
Cuz basically it's gonna say, hey,
anything that you reference outside of

47
00:02:56.884 --> 00:02:59.272
the body here,
I need that to be a data dependency here.

48
00:03:00.740 --> 00:03:04.619
&gt;&gt; If you have an empty array
that is telling it to just do

49
00:03:04.619 --> 00:03:08.240
it the first time and then never again?

50
00:03:08.240 --> 00:03:10.248
&gt;&gt; Yeah,
that's a good way to think about that.

51
00:03:10.248 --> 00:03:14.571
If I put an empty array here,
it's gonna do at once after it renders for

52
00:03:14.571 --> 00:03:16.856
the first time and then never again.

53
00:03:16.856 --> 00:03:21.740
It's basically component did mount,
if it's effectively component did mount.

54
00:03:21.740 --> 00:03:25.900
It works a little bit differently,
but effectively it's the same.

55
00:03:25.900 --> 00:03:28.310
The nuance there is miniscule.

56
00:03:28.310 --> 00:03:32.520
&gt;&gt; Can you explain where
we can use useEffect?

57
00:03:32.520 --> 00:03:36.080
I understand the useState thing, but

58
00:03:36.080 --> 00:03:41.540
the useEffect I'm not
understanding where we can use it?

59
00:03:41.540 --> 00:03:43.914
Any practical example use of it?

60
00:03:43.914 --> 00:03:48.755
&gt;&gt; Yeah, so useEffect I will
say is probably gonna be your

61
00:03:48.755 --> 00:03:52.240
second most used hook after useState.

62
00:03:53.770 --> 00:03:58.861
So anything that needs to happen
outside of the normal render cycle,

63
00:03:58.861 --> 00:04:02.810
so anytime you need to request
something from an API,

64
00:04:02.810 --> 00:04:06.612
anytime that you need to
subscribe to a WebSocket.

65
00:04:06.612 --> 00:04:10.702
Anytime that you need to
alert the user something

66
00:04:10.702 --> 00:04:15.000
probably even like that
you can use as useEffects.

67
00:04:15.000 --> 00:04:18.726
So anytime that you basically want to
schedule something to happen, that's not

68
00:04:18.726 --> 00:04:22.140
gonna be inside of a render cycle,
you're gonna use an effect to do that.

69
00:04:23.802 --> 00:04:27.350
And I'll just go and say primarily,
you're gonna use it for APIs, right?

70
00:04:27.350 --> 00:04:28.753
Like if you're gonna make
like a fetch request,

71
00:04:28.753 --> 00:04:30.760
you're gonna do instead of an effect.

72
00:04:30.760 --> 00:04:33.752
Here I use the set timeout,
so timeouts and

73
00:04:33.752 --> 00:04:37.670
those kind of things also
would go into effects as well.

74
00:04:39.320 --> 00:04:42.171
So if you wanna schedule a component
update, like every 30 seconds,

75
00:04:42.171 --> 00:04:43.319
you use an effect to do that.

76
00:04:46.000 --> 00:04:48.742
But like if I want to request something
from the API, let's go ahead and

77
00:04:48.742 --> 00:04:49.621
do that really quick.

78
00:04:56.813 --> 00:05:04.145
So if I come in here and
I say const obj = await fetch, and

79
00:05:04.145 --> 00:05:10.433
we can use that API that
we used from yesterday.

80
00:05:10.433 --> 00:05:17.499
So, petsv2.dev-API.

81
00:05:23.528 --> 00:05:25.860
Let's see, I don't even need that.

82
00:05:27.030 --> 00:05:31.768
So and then after that I need to async.

83
00:05:40.871 --> 00:05:42.579
So here I'll call getpets.

84
00:05:50.430 --> 00:05:57.010
And const json= await objects.json.

85
00:06:05.810 --> 00:06:09.480
It's probably blocking
requests outgoing from here.

86
00:06:09.480 --> 00:06:12.330
But suffice to say,
this is how you're gonna do API requests.

87
00:06:12.330 --> 00:06:14.390
And you can look at this from
the complete intro to react as well.

88
00:06:16.340 --> 00:06:19.182
You'll use an effect to render
something for the first time and

89
00:06:19.182 --> 00:06:22.892
then schedule an effect afterwards so that
you can go and fetch stuff from the API.

90
00:06:22.892 --> 00:06:27.515
And you can use that
here out here like say,

91
00:06:27.515 --> 00:06:32.023
setpets to be whatever came back as json.

92
00:06:33.549 --> 00:06:34.520
Does that make sense?

93
00:06:36.040 --> 00:06:39.869
We go over this in depth, there's actually
a section in the complete intro to react

94
00:06:39.869 --> 00:06:41.690
to these six called useEffect.

95
00:06:41.690 --> 00:06:44.208
And that actually goes into that in depth,
so

96
00:06:44.208 --> 00:06:47.471
you can see how we do that from
the confines of the project.

97
00:06:50.638 --> 00:06:53.314
Cool, other questions?

98
00:06:53.314 --> 00:06:57.540
&gt;&gt; So useEffects cannot be async itself,
correct?

99
00:06:57.540 --> 00:07:02.217
&gt;&gt; Yeah, I think if you try and
say async here,

100
00:07:02.217 --> 00:07:09.170
it's gonna say, hey,
I didn't expect promise back here.

101
00:07:09.170 --> 00:07:13.310
&gt;&gt; If you were using an API within,
you would do the pattern that you did and

102
00:07:13.310 --> 00:07:16.140
handle that promise within
the other function?

103
00:07:17.260 --> 00:07:19.090
&gt;&gt; Yeah,
you're you have two choices there.

104
00:07:19.090 --> 00:07:23.027
You can either just handle
the promises directly in here and

105
00:07:23.027 --> 00:07:27.041
say fetch blah, .then.then,
and you can do it that way and

106
00:07:27.041 --> 00:07:33.200
just manipulate the promises directly and
that's fine, I've seen people do that.

107
00:07:33.200 --> 00:07:36.188
I like using async await, so
I'll just make another function and

108
00:07:36.188 --> 00:07:38.590
then call it from within
there just like how you saw.

109
00:07:39.990 --> 00:07:43.700
Line eight here is how you
clean up after yourself.

110
00:07:43.700 --> 00:07:46.458
Whenever something like so, for example,

111
00:07:46.458 --> 00:07:50.333
if I removed this effect from
this useEffect component here,

112
00:07:50.333 --> 00:07:54.879
I'm still gonna have that timeout
happening, and it's going to try and

113
00:07:54.879 --> 00:07:59.720
update something that doesn't exist
which is gonna cause an error.

114
00:07:59.720 --> 00:08:04.060
So you need some way to clear the timeout
after this component gets removed.

115
00:08:04.060 --> 00:08:06.678
Now, obviously, this is not gonna
get removed anytime soon cuz

116
00:08:06.678 --> 00:08:09.330
we have no mechanism to
remove it in our application.

117
00:08:09.330 --> 00:08:13.190
But if it ever did get removed,
we'd have to clear that timeout, right?

118
00:08:13.190 --> 00:08:16.420
And so
that's what this return function here.

119
00:08:16.420 --> 00:08:18.942
You're basically just returning, hey,

120
00:08:18.942 --> 00:08:22.450
if this gets removed,
here is how you gracefully clean up.

121
00:08:23.530 --> 00:08:27.101
In a class component this would
be a component did unmount,

122
00:08:27.101 --> 00:08:30.325
that's the same kind of thing,
it's the same idea.

123
00:08:30.325 --> 00:08:31.283
So it makes sense?

124
00:08:34.400 --> 00:08:37.128
So yeah, you just return a function
here at the end of any effect and

125
00:08:37.128 --> 00:08:39.600
you can allow that to
clean up after yourself.

126
00:08:39.600 --> 00:08:42.990
So in this case, the timer here,
which is the return of the set timeout,

127
00:08:42.990 --> 00:08:46.992
all we do is just say, hey, don't run that
timer, you've just run clear timeout and

128
00:08:46.992 --> 00:08:49.621
it'll prevent that timeout
from executing at the end.

129
00:08:53.779 --> 00:08:55.590
You don't typically need to
clean up your effects, right?

130
00:08:55.590 --> 00:09:01.480
If you're making an API requests, you just
don't do anything about it, which is fine.

131
00:09:01.480 --> 00:09:06.300
It's only when you specifically like,
I think timeout are one of them and

132
00:09:06.300 --> 00:09:08.020
subscriptions, right?

133
00:09:08.020 --> 00:09:12.419
So if you're doing rx-json and you need to
dispose the subscription, that's another

134
00:09:12.419 --> 00:09:16.117
place that you would definitely wanna
do some sort, or like WebSockets.

135
00:09:16.117 --> 00:09:18.215
So if you need to
unsubscribe from updates,

136
00:09:18.215 --> 00:09:22.029
those are the kind of scenarios that you
would do with these cleanup functions.

