WEBVTT

1
00:00:00.310 --> 00:00:02.570
Any questions about what I've shown you so
far?

2
00:00:02.570 --> 00:00:05.254
&gt;&gt; Can I import external CSS, with lazy?

3
00:00:05.254 --> 00:00:06.612
&gt;&gt; You could.

4
00:00:06.612 --> 00:00:10.906
Yeah, can you import external CSS

5
00:00:10.906 --> 00:00:15.655
using lazy like from an external CDN?

6
00:00:15.655 --> 00:00:17.114
&gt;&gt; Yeah.

7
00:00:17.114 --> 00:00:19.332
&gt;&gt; I think you just wanna
let the browser do that.

8
00:00:19.332 --> 00:00:21.634
I don't think you'd want to react
in [INAUDIBLE] To handle that?

9
00:00:21.634 --> 00:00:26.738
You would just say like load CSS and
let the browser handle that.

10
00:00:26.738 --> 00:00:28.136
I wouldn't necessarily use lazy for that.

11
00:00:28.136 --> 00:00:33.126
But what I will say is like
let's say here in details

12
00:00:33.126 --> 00:00:38.017
I had CSS and
I just said import css/style.css.

13
00:00:38.017 --> 00:00:41.632
This would be smart enough that
it would split out this and

14
00:00:41.632 --> 00:00:44.807
it would come with that
lazily loaded component.

15
00:00:44.807 --> 00:00:47.216
So that's how you would kind
of like do what you're asking.

16
00:00:47.216 --> 00:00:52.745
&gt;&gt; Is there any way you can also add
like a pre-catch, preload to these?

17
00:00:53.775 --> 00:00:54.525
&gt;&gt; That's a great question.

18
00:00:54.525 --> 00:00:57.502
So he's asking,
can I add like a prefetch or

19
00:00:57.502 --> 00:01:02.491
a preload to these things cuz like,
let's say I land on the homepage, and

20
00:01:02.491 --> 00:01:06.400
I know they're about to
go to the sign up page.

21
00:01:06.400 --> 00:01:08.840
Can I get ahead of that for them?

22
00:01:08.840 --> 00:01:12.298
So, this is actually something I
implemented myself when I was working at

23
00:01:12.298 --> 00:01:14.716
Netflix and
help some of the engineers do it there.

24
00:01:14.716 --> 00:01:18.536
It's called resource hinting
is what you're getting at.

25
00:01:18.536 --> 00:01:22.282
You need to be one really careful because
a lot of times you don't actually know

26
00:01:22.282 --> 00:01:24.590
what the user is about to do.

27
00:01:24.590 --> 00:01:29.960
So you don't wanna load resources greedily
when the user is not about to use them.

28
00:01:29.960 --> 00:01:32.999
In particular, if you're targeting
in markets where data is expensive,

29
00:01:32.999 --> 00:01:35.010
just be very careful about that.

30
00:01:35.010 --> 00:01:38.689
Now, that being said, the way that
I would achieve what you're doing,

31
00:01:38.689 --> 00:01:40.817
it's not gonna be via resource hinting.

32
00:01:40.817 --> 00:01:44.260
What you gonna do is you're gonna have
a service worker in the background.

33
00:01:44.260 --> 00:01:45.960
Go out and fetch those resources.

34
00:01:45.960 --> 00:01:50.268
And then when react makes a network
request for that js, they'll actually hit

35
00:01:50.268 --> 00:01:54.670
the service worker first and the service
worker will serve that request.

36
00:01:54.670 --> 00:01:57.800
So actually it have been prefetched by the
service worker and then serve to react.

37
00:01:59.000 --> 00:02:00.154
And react we'll know the difference.

38
00:02:00.154 --> 00:02:02.261
That's your question?

39
00:02:02.261 --> 00:02:03.054
&gt;&gt; Yes.

40
00:02:03.054 --> 00:02:08.028
So the bigger like, if there was
like a modal that they might use,

41
00:02:08.028 --> 00:02:13.650
you can use something like that on it
to kind of just like, really load it?

42
00:02:15.330 --> 00:02:15.947
&gt;&gt; Exactly, that's exactly it.

43
00:02:15.947 --> 00:02:21.574
That's how I would do it, there's
probably a way to like pre-populate those

44
00:02:21.574 --> 00:02:26.620
caches with parcel, but you're
really into the weeds at that point.

45
00:02:28.030 --> 00:02:30.291
Like you're messing with parcel
internals at that point and

46
00:02:30.291 --> 00:02:31.540
that's this a scary place to be.

47
00:02:33.240 --> 00:02:35.348
Whereas like that,
service work thing would always work, and

48
00:02:35.348 --> 00:02:36.275
it would work really well.

49
00:02:41.954 --> 00:02:44.561
Okay, let's actually go
implement modal really quick.

50
00:02:44.561 --> 00:02:48.962
So, head back,
let's see what's my notes here?

51
00:02:48.962 --> 00:02:54.350
Go into details.js.

52
00:02:54.350 --> 00:03:01.110
So what I want to show you here, if I
click adopt Luna it loads this nice modal.

53
00:03:01.110 --> 00:03:04.582
Now let's say this modal again
loaded moment js and rxjs and

54
00:03:04.582 --> 00:03:08.550
also all of webassembly,
all at once to show this modal.

55
00:03:08.550 --> 00:03:09.514
It's great idea.

56
00:03:09.514 --> 00:03:12.075
So, user experience I
came up with just now.

57
00:03:12.075 --> 00:03:13.900
Let's say this is a very heavy modal and

58
00:03:13.900 --> 00:03:17.290
we only want it to load that modal
whenever it was necessary on this page.

59
00:03:17.290 --> 00:03:19.460
We can do the exact same thing.

60
00:03:19.460 --> 00:03:20.337
Delete the model here.

61
00:03:20.337 --> 00:03:25.335
Say lazy up here.

62
00:03:25.335 --> 00:03:31.471
And we're gonna say const Modal= lazy.

63
00:03:34.478 --> 00:03:40.145
Function, import./modal.

64
00:03:40.145 --> 00:03:44.343
That's it.

65
00:03:45.630 --> 00:03:48.780
We have done everything we don't even
have to reset up the suspense because

66
00:03:48.780 --> 00:03:52.260
the suspense is already above it right,
like I didn't change that.

67
00:03:52.260 --> 00:03:55.835
That's still up here, it can still use
that suspense because that suspense is

68
00:03:55.835 --> 00:03:59.409
just gonna bubble up until it finds the
other, imports is gonna bubble up until

69
00:03:59.409 --> 00:04:03.005
it finds a suspense, it hits that it's
like okay, I'm gonna load this here.

70
00:04:04.455 --> 00:04:06.324
So now, let's look at this page.

71
00:04:06.324 --> 00:04:11.180
We're gonna look at JS that gets loaded.

72
00:04:11.180 --> 00:04:14.440
As soon as I click adopt Luna,
it's gonna go really fast.

73
00:04:14.440 --> 00:04:18.710
This is all local, but notice it's
gonna load modal.js, which it did.

74
00:04:19.860 --> 00:04:23.965
And if you were very much paying attention
you we're seeing the flash of loading.

75
00:04:26.495 --> 00:04:28.549
Now, modal.js was 10 kilobytes.

76
00:04:28.549 --> 00:04:30.566
And that's in development mode,

77
00:04:30.566 --> 00:04:35.270
which means it's probably under
a kilobyte zipped and minified.

78
00:04:35.270 --> 00:04:38.630
So this was objectively horrible
idea what I just showed you.

79
00:04:38.630 --> 00:04:42.520
But now I've shown you how to
split even outside of routes.

80
00:04:42.520 --> 00:04:47.890
&gt;&gt; Brian does this using the lazy and
lazy loading format does

81
00:04:47.890 --> 00:04:54.150
that work in other bundlers besides
the one we're using right now?

82
00:04:54.150 --> 00:04:55.303
&gt;&gt; Most definitely.

83
00:04:55.303 --> 00:04:59.980
So the question is, does this lazy
loading work outside of parcel,

84
00:04:59.980 --> 00:05:03.765
does this work in webpack,
does this work in esbuild?

85
00:05:03.765 --> 00:05:08.625
So it definitely works in webpack,
it works in snowpack, it works in parcel.

86
00:05:08.625 --> 00:05:13.760
So this import is respected
like it's an official

87
00:05:13.760 --> 00:05:17.804
Java scripts standard made by TC 39.

88
00:05:17.804 --> 00:05:20.276
So all of the bundlers are looking for

89
00:05:20.276 --> 00:05:24.679
this import statement as a way of
like a point where you can split.

90
00:05:24.679 --> 00:05:28.618
The only one today that doesn't
handle that I know as esbuild.

91
00:05:28.618 --> 00:05:31.555
It's actually why I didn't
choose esbuild for this course,

92
00:05:31.555 --> 00:05:33.540
it's cuz I knew this wasn't gonna work.

93
00:05:33.540 --> 00:05:35.198
Otherwise, I would have
shown you esbuild for

94
00:05:35.198 --> 00:05:37.249
the rest of the course cuz it
works as well as parcel does.

95
00:05:38.630 --> 00:05:40.340
And it's significantly faster.

96
00:05:42.090 --> 00:05:43.190
They are working on it.

97
00:05:43.190 --> 00:05:45.710
So it will eventually be an esbuild,
they're just taking their time with it.

98
00:05:47.050 --> 00:05:53.610
So what I have shown you now this is
everything up until all of code splitting.

99
00:05:53.610 --> 00:05:57.198
So if you want to see what we did,
it was here code splitting.

100
00:05:59.148 --> 00:06:03.160
And that's it, that's really
all there is to code splitting.

101
00:06:03.160 --> 00:06:06.317
It's a pretty straightforward thing to do
for react, they make it really easy for

102
00:06:06.317 --> 00:06:08.030
you without lazy API.

103
00:06:08.030 --> 00:06:09.920
Thy used to be a lot harder.

104
00:06:09.920 --> 00:06:12.350
You had to use a component
called react loadable.

105
00:06:12.350 --> 00:06:14.920
And previous versions of
this class did use that.

106
00:06:14.920 --> 00:06:17.540
But now with lazy it's very simple to do.

107
00:06:17.540 --> 00:06:22.096
&gt;&gt; In the [INAUDIBLE] Fallback,
can I load the component forward?

108
00:06:22.096 --> 00:06:26.119
&gt;&gt; So can you use a lazy
component in the fallback?

109
00:06:26.119 --> 00:06:27.807
Yeah.

110
00:06:27.807 --> 00:06:31.822
&gt;&gt; No [LAUGH] That would kind
of defeat the purpose too.

111
00:06:31.822 --> 00:06:36.300
It's a good question, but you wouldn't
want to lazy load a loading component.

112
00:06:37.320 --> 00:06:43.410
&gt;&gt; [INAUDIBLE] A component and load
that into fallback app as a component?

113
00:06:43.410 --> 00:06:48.537
&gt;&gt; So yeah, you can create like a nice
fancy like loading js that makes

114
00:06:48.537 --> 00:06:53.758
us elaborate loading, animation,
and then you can load that in and

115
00:06:53.758 --> 00:06:58.884
show that here and it would just
look like instead of h2 like this,

116
00:06:58.884 --> 00:07:01.930
you would have fancy loading, right?

117
00:07:01.930 --> 00:07:02.710
Something like that.

118
00:07:02.710 --> 00:07:04.380
You could definitely do that.

119
00:07:04.380 --> 00:07:06.594
You wouldn't wanna lazy load it,
that's all

