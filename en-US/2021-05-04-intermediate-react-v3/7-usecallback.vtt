WEBVTT

1
00:00:00.470 --> 00:00:04.243
So you're gonna look at this and
you're gonna say,

2
00:00:04.243 --> 00:00:09.710
this seems a lot like use,
what we were just talking about, useMemo.

3
00:00:09.710 --> 00:00:14.110
So useCallback and useMemo end up
being functionally very similar.

4
00:00:14.110 --> 00:00:19.280
And in fact useCallback is implemented
internally with react with useMemo.

5
00:00:19.280 --> 00:00:22.640
So that's something to just keep in mind,
that these are pretty related.

6
00:00:24.090 --> 00:00:28.099
So first thing I'm gonna do
is I'm going to change my

7
00:00:28.099 --> 00:00:33.210
memo to be back to like one so
this is not crazy anymore.

8
00:00:33.210 --> 00:00:38.250
Okay, and
then we're gonna go back here to Callback.

9
00:00:38.250 --> 00:00:40.561
All right, so, here with useCallback,

10
00:00:40.561 --> 00:00:43.804
I have the time that's going
up every second, all right?

11
00:00:43.804 --> 00:00:49.210
So, this component using an effect here,
is the timer is going up every second.

12
00:00:49.210 --> 00:00:54.155
So, this component here re-rendering
every single second, which means that

13
00:00:54.155 --> 00:00:58.952
everything inside of it needs to be
pretty performance because if it's gonna

14
00:00:58.952 --> 00:01:03.934
hang it's going to make our clock look
like it's not, moving up every second.

15
00:01:03.934 --> 00:01:06.136
It's not gonna look like a clock, right?

16
00:01:06.136 --> 00:01:12.562
But I have this component down here that's
also using this Fibonacci sequence again.

17
00:01:12.562 --> 00:01:14.705
So when it's at one, it's not a big deal.

18
00:01:16.675 --> 00:01:21.270
But if this was at, again 30,
we can just put it up here at 30,

19
00:01:21.270 --> 00:01:22.954
if we want to, or 40.

20
00:01:22.954 --> 00:01:26.624
This will take a second to re-render.

21
00:01:26.624 --> 00:01:30.550
But notice that this is still
counting up at a normal rate.

22
00:01:30.550 --> 00:01:33.290
Let's go dig into that a little bit.

23
00:01:33.290 --> 00:01:36.655
Like we talked about before,
whenever we render a parent component,

24
00:01:36.655 --> 00:01:40.192
the children component are going to
re-render as well unless we have some

25
00:01:40.192 --> 00:01:44.264
sort of like should component update that
tells it like wait, do not re-render me.

26
00:01:44.264 --> 00:01:48.497
So one of those things that can kind of be
a problem is, in order to get access to

27
00:01:48.497 --> 00:01:53.189
local data, we have to use closures,
right, and whenever we're making closures,

28
00:01:53.189 --> 00:01:57.690
we're creating new functions in
the process every single time.

29
00:01:57.690 --> 00:02:00.517
Well, here's kind of a problem with this.

30
00:02:00.517 --> 00:02:06.740
What happens with this Fibonacci sequence
function lives in the callback component.

31
00:02:06.740 --> 00:02:10.640
But it's called in the expensive
computation component.

32
00:02:10.640 --> 00:02:14.260
Now, it's a very specific use case and
if you're wondering why would I do this?

33
00:02:14.260 --> 00:02:17.040
And the answer is frequently
you can code around this.

34
00:02:17.040 --> 00:02:20.120
So I invented a situation
this is what happened, but

35
00:02:20.120 --> 00:02:23.695
you could definitely code around this and
not do it this way.

36
00:02:23.695 --> 00:02:25.260
But I'm gonna show you how
to make it work anyway.

37
00:02:26.300 --> 00:02:29.590
All right, so I have callback component,
and I have the count.

38
00:02:29.590 --> 00:02:34.060
These both live in callback component.

39
00:02:34.060 --> 00:02:36.101
And so I have to use Fibonacci here,

40
00:02:36.101 --> 00:02:39.240
because that's coming from
the callback component.

41
00:02:40.330 --> 00:02:45.192
But that gets passed down into
the expensive computation component

42
00:02:45.192 --> 00:02:47.754
which is running the compute here.

43
00:02:49.976 --> 00:02:54.857
Now, this is a problem because if I don't,
if I'm providing a new

44
00:02:54.857 --> 00:02:59.654
function every single time to
this useCallback component here,

45
00:02:59.654 --> 00:03:03.752
sorry, to the expensive
computation component here,

46
00:03:03.752 --> 00:03:09.530
this is going to re-render every single
time that the time advances, right?

47
00:03:09.530 --> 00:03:14.136
And if this is 40 that's a big
problem because it's going to try and

48
00:03:14.136 --> 00:03:18.680
calculate the Fibonacci of
40 every single second.

49
00:03:18.680 --> 00:03:21.446
And like, I would take this out so I could
show you what it looks like but let me

50
00:03:21.446 --> 00:03:24.410
promise, it would just hang up the entire
browser and we would never get it back.

51
00:03:24.410 --> 00:03:26.474
Right, just take my word for

52
00:03:26.474 --> 00:03:31.378
that if we were not using useCallback
here with the Fibonacci here,

53
00:03:31.378 --> 00:03:37.334
that this would re-render every single
time and then we would have a big problem.

54
00:03:38.575 --> 00:03:40.425
So what does useCallback do?

55
00:03:40.425 --> 00:03:43.355
UseCallback takes in a function here,
right?

56
00:03:44.775 --> 00:03:47.547
And it takes in some sort of dependency
thing here, which in this case,

57
00:03:47.547 --> 00:03:50.663
we're telling it, hey, Fibonacci never
changes, so don't worry about it.

58
00:03:50.663 --> 00:03:56.630
And this way, it's going to give it
back the same Fibonacci function.

59
00:03:56.630 --> 00:04:01.170
So this one here, it's gonna give the same
Fibonacci function back every single time.

60
00:04:01.170 --> 00:04:06.197
So therefore, this expensive
computation component gets the same

61
00:04:06.197 --> 00:04:11.850
function which it's gonna say then,
okay, I do not need to re-render.

62
00:04:11.850 --> 00:04:14.796
That's the the functional thing here.

63
00:04:14.796 --> 00:04:18.559
We do have to talk a little bit
about memo of why that's important.

64
00:04:18.559 --> 00:04:22.028
But do you understand the gist of like
we're trying to give it the literally

65
00:04:22.028 --> 00:04:23.790
the same function every single time so

66
00:04:23.790 --> 00:04:27.205
that react doesn't think that
the function is changing.

67
00:04:27.205 --> 00:04:31.255
Because if I give it Fibonacci and
then I give it a second copy of a,

68
00:04:31.255 --> 00:04:34.808
it's of Fibonacci but
it's a different instance of it.

69
00:04:34.808 --> 00:04:37.125
It's gonna think it's like these
are different things, right?

70
00:04:37.125 --> 00:04:41.318
It's just like how, well,
it's basically this.

71
00:04:50.677 --> 00:04:53.350
These are two different functions, right?

72
00:04:53.350 --> 00:04:58.168
Or maybe a better way of
putting this is function A,

73
00:05:02.063 --> 00:05:04.060
Function B.

74
00:05:11.328 --> 00:05:15.397
A, now it's upset at me.

75
00:05:18.591 --> 00:05:21.179
So I have function A here and
I have function B here.

76
00:05:22.330 --> 00:05:25.375
They're functionally equivalent,
they do exactly the same thing, but

77
00:05:25.375 --> 00:05:27.270
they are not the same thing, right?

78
00:05:27.270 --> 00:05:30.848
They are two functions that are separate
that do precisely the same thing.

79
00:05:30.848 --> 00:05:34.072
And that's the thing that we're gonna run
in here with Fibonacci is that we're gonna

80
00:05:34.072 --> 00:05:36.941
have two different Fibonacci's that
are functionally the same function,

81
00:05:36.941 --> 00:05:40.020
but are actually two different
instances of the same function.

82
00:05:40.020 --> 00:05:44.584
So that's what useCallback is doing
here is it's giving you the same copy of

83
00:05:44.584 --> 00:05:46.050
the same function.

84
00:05:46.050 --> 00:05:46.953
So in this case,

85
00:05:46.953 --> 00:05:50.509
it's gonna give you A every single
time an A is triple equals to A.

86
00:05:53.257 --> 00:05:57.014
Okay, so we got that,
now let's talk about memo.

87
00:05:59.265 --> 00:06:03.116
By default, this Callback component is
gonna re-render expensive computational

88
00:06:03.116 --> 00:06:05.390
component every single time anyway.

89
00:06:05.390 --> 00:06:08.486
It's not gonna check to say, okay,
did I get the same property as last time.

90
00:06:08.486 --> 00:06:11.494
It's just like, you know what,
I don't know what they're doing in there,

91
00:06:11.494 --> 00:06:13.130
they could be doing weird stuff in there.

92
00:06:13.130 --> 00:06:14.526
In this case, we are doing weird stuff.

93
00:06:14.526 --> 00:06:17.390
We're putting new dates in here, so this
actually does change every single time.

94
00:06:18.730 --> 00:06:23.663
What memo does is it's like all right,
I'm gonna check the properties,

95
00:06:23.663 --> 00:06:27.402
and if compute and
count come back the same as last time,

96
00:06:27.402 --> 00:06:30.363
I'm just not gonna re-render it, right?

97
00:06:30.363 --> 00:06:31.753
So it's gonna check the props.

98
00:06:31.753 --> 00:06:34.343
If the props stayed the same,
then it's not going to re-render.

99
00:06:34.343 --> 00:06:35.490
That's what memo does.

100
00:06:36.800 --> 00:06:38.275
If you've ever used react before and

101
00:06:38.275 --> 00:06:41.380
you've heard a thing called a pure
components this is the same idea, right?

102
00:06:41.380 --> 00:06:44.291
So a pure component is
the same idea of like

103
00:06:44.291 --> 00:06:49.114
if the properties don't change then
the render is gonna be the same so

104
00:06:49.114 --> 00:06:52.710
you can just go ahead and
use what it used last time.

105
00:06:52.710 --> 00:06:56.690
Memo is just that but for
functional components.

106
00:07:00.108 --> 00:07:03.806
So between using memo and
using useCallback here,

107
00:07:03.806 --> 00:07:08.370
we're able to prevent this from
rendering every single time.

108
00:07:08.370 --> 00:07:12.899
In fact, you can see here in rendering
the last time that this rendered.

109
00:07:12.899 --> 00:07:17.030
The last time this rendered
was now two minutes ago.

110
00:07:17.030 --> 00:07:21.931
But if I click current count so that the
count here does change, so I click that,

111
00:07:21.931 --> 00:07:24.850
it will take forever to re-render.

112
00:07:24.850 --> 00:07:26.965
Notice that this last last few
render is gonna update and it did.

113
00:07:29.615 --> 00:07:32.453
But it's not re-rendering every
single time because we used memo and

114
00:07:32.453 --> 00:07:35.015
useCallback together to prevent
that render from happening.

115
00:07:37.265 --> 00:07:41.220
Very specific performance
optimization here.

116
00:07:41.220 --> 00:07:44.580
Again, I've never had to do it
professionally, but it does exist.

117
00:07:44.580 --> 00:07:46.500
You might find yourself
in a situation of like,

118
00:07:46.500 --> 00:07:49.524
I have to calculate the Fibonacci sequence
and I also have to have a clock and

119
00:07:49.524 --> 00:07:51.740
I don't know how to have that
at the same time, right?

120
00:07:52.810 --> 00:07:57.154
If you find yourself in that, you'll
be like Brian told me about this right?

121
00:07:57.154 --> 00:07:59.486
[LAUGH] Until then you're gonna be like,

122
00:07:59.486 --> 00:08:03.270
I'm just gonna file that away
under like probably not gonna use.

123
00:08:04.700 --> 00:08:08.190
So there's definitely a lot
of ways to code around this.

124
00:08:08.190 --> 00:08:12.818
One of these is that Fibonacci definitely
does not have to live inside of callback

125
00:08:12.818 --> 00:08:13.577
component.

126
00:08:13.577 --> 00:08:17.411
In this case, it's a pure function
the sense that it takes in an n and

127
00:08:17.411 --> 00:08:18.880
returns a number.

128
00:08:18.880 --> 00:08:21.140
So it actually is not referencing
anything inside of here.

129
00:08:21.140 --> 00:08:23.420
So yeah, you totally could and
that would be totally fine.

130
00:08:24.860 --> 00:08:26.743
And then we would have to use useCallback.

131
00:08:26.743 --> 00:08:28.274
We wouldn't have to use,

132
00:08:28.274 --> 00:08:32.462
we would still have to use memo but
we would not have to use useCallback.

