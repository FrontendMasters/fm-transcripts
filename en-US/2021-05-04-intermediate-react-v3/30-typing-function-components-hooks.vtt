WEBVTT

1
00:00:00.630 --> 00:00:02.910
Let's go and look at Pet.

2
00:00:02.910 --> 00:00:06.482
Pet.js, let's rename that to Pet.tsx.

3
00:00:14.512 --> 00:00:18.714
Okay, so
at the top we're gonna have to import from

4
00:00:18.714 --> 00:00:21.664
react import FunctionComponent,

5
00:00:26.832 --> 00:00:33.720
From 'react' when you give us some IProps.

6
00:00:33.720 --> 00:00:37.283
So interface IProps.

7
00:00:37.283 --> 00:00:40.569
name: string.

8
00:00:40.569 --> 00:00:41.608
animal: string.

9
00:00:49.941 --> 00:00:53.390
I mean, it's basically a pet,
right, is what it's expecting.

10
00:00:53.390 --> 00:00:55.390
So we could have said that this extends.

11
00:00:56.960 --> 00:00:58.670
Let's just go a little off script and
see if this works.

12
00:00:58.670 --> 00:01:05.970
Import, I mean, it's literally just o,
but the location's slightly different.

13
00:01:07.230 --> 00:01:10.392
So we could go in and
do some sort of fancy union and

14
00:01:10.392 --> 00:01:13.020
pull pieces of one out of the other.

15
00:01:13.020 --> 00:01:14.240
But let's not do that.

16
00:01:15.680 --> 00:01:16.620
Let's just do it this way.

17
00:01:16.620 --> 00:01:18.544
I think this is kind of easier for
learning.

18
00:01:18.544 --> 00:01:20.597
breed: string.

19
00:01:20.597 --> 00:01:25.839
images: string array.

20
00:01:25.839 --> 00:01:29.313
And so here's a difference,
a pet has a city and a state, and

21
00:01:29.313 --> 00:01:32.941
this particular component is
expecting one location string.

22
00:01:36.697 --> 00:01:40.738
And id: number, okay?

23
00:01:40.738 --> 00:01:47.972
And then here, const Pet is
a FunctionComponent, that expects Iprops.

24
00:01:54.380 --> 00:01:57.820
And now we have a fully typed
function component for pet,

25
00:01:57.820 --> 00:02:00.267
which just makes it really useful to us.

26
00:02:02.489 --> 00:02:03.490
And that's it.
I think that's it.

27
00:02:03.490 --> 00:02:04.629
I don't think we have to do anything else.

28
00:02:04.629 --> 00:02:06.527
I think the rest of this
just works out of the box.

29
00:02:09.770 --> 00:02:12.159
Now let me show you something that I
think is actually quite cool about this.

30
00:02:12.159 --> 00:02:15.220
If we want to use it's pets, its results,

31
00:02:15.220 --> 00:02:19.908
which is not the next thing we gonna do,
but if we go into results.

32
00:02:24.056 --> 00:02:26.598
And let's say we forget to give it animal,

33
00:02:32.903 --> 00:02:35.150
Or breed or something like that.

34
00:02:35.150 --> 00:02:36.690
It'll actually start yelling at us.

35
00:02:36.690 --> 00:02:38.975
So it won't show us this right now,
cuz it's already upset.

36
00:02:38.975 --> 00:02:40.733
It's like,
I don't know what these are first.

37
00:02:40.733 --> 00:02:44.330
You need to fix this before I'm
gonna be upset about something else.

38
00:02:44.330 --> 00:02:48.190
But it'll actually keep track of,
here's what this component expects.

39
00:02:48.190 --> 00:02:50.680
If you do not give it that,
then react will be upset.

40
00:02:50.680 --> 00:02:55.254
So it actually tracks the props
going into components as well.

41
00:02:55.254 --> 00:02:56.020
Does that make sense?

42
00:02:57.840 --> 00:03:00.730
So let's do this.

43
00:03:00.730 --> 00:03:07.502
I'm just going to copy, This,
I'm gonna comment this out.

44
00:03:07.502 --> 00:03:11.917
And if I try and just say pet like this,
this would normally work, right?

45
00:03:11.917 --> 00:03:13.643
Because react would have no idea nor

46
00:03:13.643 --> 00:03:16.530
would JavaScript have any idea
that pet expects anything.

47
00:03:18.430 --> 00:03:20.410
For now, let's keep going
on our little journey here.

48
00:03:20.410 --> 00:03:23.215
We're gonna go type our custom hook here,
use breed list.

49
00:03:24.926 --> 00:03:28.530
But before we do that,
let's get into API response types here.

50
00:03:28.530 --> 00:03:31.150
We need another interface.

51
00:03:31.150 --> 00:03:36.270
We'll just do that underneath here of

52
00:03:36.270 --> 00:03:42.190
export interface BreedListAPIResponse.

53
00:03:44.630 --> 00:03:49.857
And this just gives us back the animal,
which is an animal and

54
00:03:49.857 --> 00:03:54.894
it also gives us back the breeds,
which is a string array.

55
00:04:01.566 --> 00:04:09.376
Okay, now we can use this inside of the,
useBreedList.

56
00:04:09.376 --> 00:04:14.349
We're gonna rename this first to tsx,

57
00:04:14.349 --> 00:04:22.255
useBreedList.tsx Okay,

58
00:04:25.770 --> 00:04:32.995
At the top here we're
going to import Animal and

59
00:04:32.995 --> 00:04:41.311
Breedlist APIResponse
from ./APIResponseTypes.

60
00:04:47.162 --> 00:04:50.799
What do they call this,
BreedlistAPIResponse?

61
00:04:53.495 --> 00:04:54.600
Okay, now that's okay.

62
00:04:56.630 --> 00:04:59.710
Okay, const localCache,
here's kind of an interesting one.

63
00:04:59.710 --> 00:05:02.058
So what does localCache expect as a key?

64
00:05:02.058 --> 00:05:06.507
Normally we'd like to give it something
like Key1 is always a string, right, or

65
00:05:06.507 --> 00:05:08.200
something like that.

66
00:05:08.200 --> 00:05:10.850
But we actually don't know what
the keys are gonna be, right?.

67
00:05:10.850 --> 00:05:14.110
Because the keys are gonna be whatever
are being requested back from the API.

68
00:05:14.110 --> 00:05:16.863
So we need to be a bit
more flexible than that.

69
00:05:16.863 --> 00:05:21.377
So, it's always gonna be an index, right?

70
00:05:21.377 --> 00:05:23.520
So that's what these square brackets mean.

71
00:05:24.650 --> 00:05:27.580
And actually, technically,
it's always gonna be an animal.

72
00:05:27.580 --> 00:05:31.970
But let's just keep it with string,
so it's a little bit more flexible.

73
00:05:31.970 --> 00:05:35.136
And then it's going to
give back a string array.

74
00:05:39.242 --> 00:05:43.810
So this is just saying, it will accept
any index that's a string, right?

75
00:05:43.810 --> 00:05:48.744
It'll accept any key that's a string,
as long as those strings are storing

76
00:05:48.744 --> 00:05:53.810
a string array, Okay?

77
00:05:55.620 --> 00:05:59.830
This has an enumerated type
that we kind of invented,

78
00:05:59.830 --> 00:06:03.780
which is either unloaded,
loaded, or loading.

79
00:06:03.780 --> 00:06:06.682
So this is the way you do that.

80
00:06:06.682 --> 00:06:10.847
You can say type Status = it's
either gonna be unloaded,

81
00:06:10.847 --> 00:06:15.961
loading, Or loaded.

82
00:06:18.990 --> 00:06:22.511
And now, anywhere that this gets used,
people can be guaranteed it's one of these

83
00:06:22.511 --> 00:06:29.820
three strings,
because TypeScript guarantees it, Okay?

84
00:06:31.120 --> 00:06:35.732
Export default function
useBreedlist the animal,

85
00:06:35.732 --> 00:06:42.030
which would be known as to be as always
an animal and it returns an array.

86
00:06:43.890 --> 00:06:48.197
And in that array,
we have a string array and the status.

87
00:06:53.110 --> 00:06:53.945
Okay, good.

88
00:06:56.492 --> 00:07:00.848
Okay, the BreedList, the thing that we
have to do here is this is an array, but

89
00:07:00.848 --> 00:07:04.020
it doesn't know what kind of array it is.

90
00:07:04.020 --> 00:07:07.329
So we have to tell it that
this is a string array.

91
00:07:10.293 --> 00:07:11.960
And unloaded is a status.

92
00:07:13.630 --> 00:07:16.080
Once we do that,
then it's like cool, I got it.

93
00:07:16.080 --> 00:07:17.386
I know everything about this now.

94
00:07:17.386 --> 00:07:18.810
It says, all right, I know a status.

95
00:07:18.810 --> 00:07:20.640
It's only one of these three strings.

96
00:07:20.640 --> 00:07:23.550
And I know that setStatus can only be
called with one of these three strings.

97
00:07:23.550 --> 00:07:26.816
So if I try and
go under this as setStatus of lol,

98
00:07:26.816 --> 00:07:30.178
it's gonna be like, no,
I don't accept that.

99
00:07:30.178 --> 00:07:35.500
lol is not a status Which is pretty cool,
right?

100
00:07:36.530 --> 00:07:42.510
It's cool that those types kinda
carry through And I think that's it.

101
00:07:42.510 --> 00:07:45.160
Nope, never mind, we got one.

102
00:07:45.160 --> 00:07:50.530
Let's see, requestBreedList.

103
00:07:50.530 --> 00:07:53.100
This doesn't return anything so
this is void.

104
00:07:54.970 --> 00:07:58.410
Here, this is something that's
coming from ESLint as well.

105
00:07:58.410 --> 00:08:04.835
It's like, hey,
I don't like it when you ignore promises.

106
00:08:04.835 --> 00:08:07.816
Promises should be either
explicitly ignored,

107
00:08:07.816 --> 00:08:10.150
or you should do something with them.

108
00:08:11.510 --> 00:08:13.795
Every async function no matter
what returns a promise.

109
00:08:13.795 --> 00:08:16.000
That's just how async functions work.

110
00:08:16.000 --> 00:08:19.170
So you have to say void requestsBreedList.

111
00:08:19.170 --> 00:08:19.940
I know that's weird.

112
00:08:19.940 --> 00:08:24.470
Like, it's not something you'd expect,
but it's an explicit way of saying,

113
00:08:24.470 --> 00:08:27.213
this is giving back a promise,
and I do not care.

114
00:08:27.213 --> 00:08:29.980
It's an ESLint rule,
it's not a TypeScript thing.

115
00:08:29.980 --> 00:08:32.840
You feel free to ignore that, but
it's part of their recommended rule.

116
00:08:32.840 --> 00:08:34.275
So that's why I'm teaching it too.

117
00:08:37.215 --> 00:08:40.940
Okay, here we're gonna
have to say what this is.

118
00:08:40.940 --> 00:08:45.597
And this is a BreedListAPI or

119
00:08:45.597 --> 00:08:50.453
what did I call it, this one?

120
00:08:50.453 --> 00:08:52.898
It's that one.

121
00:08:52.898 --> 00:08:57.875
As blur, and now it knows that
this json is a BreedListAPI, so

122
00:08:57.875 --> 00:09:01.153
it knows that all these things are safe.

123
00:09:07.648 --> 00:09:09.630
They might ask,
why don't I have to type this?

124
00:09:09.630 --> 00:09:12.339
It already knows what it returns,
it returns a promise,

125
00:09:12.339 --> 00:09:13.870
cuz every async function does.

