WEBVTT

1
00:00:00.290 --> 00:00:03.272
So without going too deep,
what would you recommend

2
00:00:03.272 --> 00:00:07.950
to measure performance something
like lighthouse, or other tools.

3
00:00:07.950 --> 00:00:09.012
&gt;&gt; So what would I recommend for

4
00:00:09.012 --> 00:00:11.500
measuring performance lighthouse
is definitely a good starter.

5
00:00:11.500 --> 00:00:15.342
It's going to give you a lot of
performance metrics just kind of all up

6
00:00:15.342 --> 00:00:19.200
then you should be instrumenting
your code in your server side code.

7
00:00:20.780 --> 00:00:25.602
&gt;&gt; With how long it's taking to respond
to things, because you'll see when you

8
00:00:25.602 --> 00:00:30.645
add server side rendering to it, it's
going to take longer to respond to users,

9
00:00:30.645 --> 00:00:35.830
so basically time to response, I think
is TTR or no, it's time to first byte.

10
00:00:35.830 --> 00:00:38.240
That's the thing that you
actually want to watch.

11
00:00:40.340 --> 00:00:44.532
There's a server called, or a service
called caliber that will actually run

12
00:00:44.532 --> 00:00:48.030
lighthouse as a service for you,
which is kind of interesting.

13
00:00:48.030 --> 00:00:53.053
And then having things like New Relic or
Azure monitor or whatever the rest

14
00:00:53.053 --> 00:00:59.610
of those are, having those instrumented
on your services will help a lot as well.

15
00:00:59.610 --> 00:01:03.334
&gt;&gt; If I want only let's say div
homepage to be server side rendered and

16
00:01:03.334 --> 00:01:07.140
the other pages, I just want to keep
them just regular way of react.

17
00:01:08.250 --> 00:01:09.830
I just doing it thing.

18
00:01:09.830 --> 00:01:11.360
Is that possible?

19
00:01:11.360 --> 00:01:12.800
&gt;&gt; That's definitely.

20
00:01:12.800 --> 00:01:15.866
So what you would do here instead of just
this is right now is acting on every

21
00:01:15.866 --> 00:01:18.200
single request coming in
that doesn't match this one.

22
00:01:19.360 --> 00:01:21.989
So basically you would
have something like this,

23
00:01:21.989 --> 00:01:24.689
which would only respond
to the homepage request.

24
00:01:28.600 --> 00:01:30.230
Actually, that might
even work out of the box.

25
00:01:35.000 --> 00:01:37.531
Now, you'd have to do a little bit
more to make sure that you're serving

26
00:01:37.531 --> 00:01:39.820
the index.HTML and everything else.

27
00:01:39.820 --> 00:01:41.984
So this one quite work we
have to go in here and

28
00:01:41.984 --> 00:01:45.801
basically say like if I don't match
anything else send them indexed at HTML.

29
00:01:48.142 --> 00:01:50.254
So I guess that might be this

30
00:01:56.524 --> 00:02:00.574
Express static

31
00:02:00.574 --> 00:02:10.550
dist/index.html Let's see if this works.

32
00:02:10.550 --> 00:02:11.630
It might work.

33
00:02:11.630 --> 00:02:12.930
This is kind of off the top my head.

34
00:02:14.120 --> 00:02:15.330
I've been teaching for a few hours.

35
00:02:17.860 --> 00:02:18.410
Did I break it?

36
00:02:18.410 --> 00:02:19.786
No it worked okay.

37
00:02:19.786 --> 00:02:21.620
So let's say on details.

38
00:02:23.090 --> 00:02:25.760
So now details would not
be server side rendered.

39
00:02:25.760 --> 00:02:28.620
This would only come in
as a react application.

40
00:02:28.620 --> 00:02:32.879
And it looks like I broke something,
but that's kind of the gist here.

41
00:02:36.939 --> 00:02:38.938
I don't really know what I broke here.

42
00:02:43.192 --> 00:02:47.079
Yeah, so somewhere along the pathway here
I broke this particular something, but

43
00:02:47.079 --> 00:02:51.023
that's you just make sure that you're
always serving in index.HTML to everything

44
00:02:51.023 --> 00:02:53.450
else that matches your routes.

45
00:02:53.450 --> 00:02:57.264
&gt;&gt; What should we consider if we want to,
let's say, decide to use server side

46
00:02:57.264 --> 00:03:00.970
rendering for specific pages or
like for the entire website?

47
00:03:00.970 --> 00:03:05.276
I know SEO depends on it and react is not
the best when it comes to SEO because of

48
00:03:05.276 --> 00:03:07.380
how long it takes to load sometimes.

49
00:03:08.430 --> 00:03:12.579
So, is there any other stuff that you
would take into consideration when

50
00:03:12.579 --> 00:03:15.240
deciding to use server side rendering or
not?

51
00:03:16.810 --> 00:03:18.610
&gt;&gt; Yeah I mean SEO is gonna be a big one.

52
00:03:18.610 --> 00:03:24.690
Because you want to serve
rendered markup to web crawlers.

53
00:03:24.690 --> 00:03:27.615
In theory,
Google will execute your react app, but

54
00:03:27.615 --> 00:03:32.240
it's going to mark that down as being
a bit slower than other applications.

55
00:03:32.240 --> 00:03:36.220
So if you can serve rendered markup
on the top is a positive thing.

56
00:03:36.220 --> 00:03:40.520
And then other crawlers, like Yandex and
some of those don't run JavaScript.

57
00:03:41.630 --> 00:03:44.080
So things where SEO is
absolutely critical.

58
00:03:44.080 --> 00:03:47.150
Yeah rendering out to a static
HTML file is probably smart.

59
00:03:49.550 --> 00:03:53.375
Just in general things that are going to
have high interactivity, you're going

60
00:03:53.375 --> 00:03:57.031
to need reactant but everything else
that like there like static blog posts,

61
00:03:57.031 --> 00:04:00.631
you might just server side render and
then write that to like a CDN cache, and

62
00:04:00.631 --> 00:04:02.120
then just serve it from cache.

63
00:04:02.120 --> 00:04:05.650
And you don't even need to execute
JavaScript on those pages.

64
00:04:05.650 --> 00:04:10.305
So it's all going to be the trade off of
interactivity which react is going to

65
00:04:10.305 --> 00:04:12.920
offer you to how fast can I serve it?

66
00:04:12.920 --> 00:04:15.550
Do I have static needs, things like that.

67
00:04:15.550 --> 00:04:16.800
Is it kind of a spectrum there

