WEBVTT

1
00:00:00.090 --> 00:00:03.238
The first thing I'll really wanna
get into with you all is hooks.

2
00:00:03.238 --> 00:00:05.118
And we're gonna go into hooks in depth so

3
00:00:05.118 --> 00:00:08.620
you can really understand all the various
hooks available to you in react.

4
00:00:10.210 --> 00:00:12.850
So, let's go into the hooks in depth part.

5
00:00:12.850 --> 00:00:15.500
And to the use state one.

6
00:00:15.500 --> 00:00:19.743
So at the top of this one is
a link to a code sandbox,

7
00:00:19.743 --> 00:00:23.100
code sandbox is just a code pen.

8
00:00:23.100 --> 00:00:26.343
Or it's like an online editor that's kind
of stripped down where you can kind of do

9
00:00:26.343 --> 00:00:28.650
experiments and
share them with people and I'm a big fan.

10
00:00:30.370 --> 00:00:32.113
So, for this hooks in depth section,

11
00:00:32.113 --> 00:00:34.300
all of it is going to be
using this code sandbox.

12
00:00:37.200 --> 00:00:42.941
Take a second to come up here, And

13
00:00:42.941 --> 00:00:50.580
you can see here I have a very stripped
down version of the repo here, right?

14
00:00:50.580 --> 00:00:52.220
So I have a, this is all on GitHub.

15
00:00:52.220 --> 00:00:56.528
It's on react hooks examples, stash v3
if you want to go fix anything on that.

16
00:00:56.528 --> 00:00:59.220
You can see here that's
importing react DOM.

17
00:00:59.220 --> 00:01:02.746
And then we have all these various
different components here,

18
00:01:02.746 --> 00:01:05.608
which I'm breaking apart
with horizontal rules,

19
00:01:05.608 --> 00:01:08.880
which is not a HTML element
that you see super frequently.

20
00:01:08.880 --> 00:01:13.600
So you can see here we have
something like 10 components here.

21
00:01:14.740 --> 00:01:18.518
And so they use state one here is the use
state example the use effect one here is

22
00:01:18.518 --> 00:01:22.122
the use effect one and we're just going
to go on component by component and

23
00:01:22.122 --> 00:01:25.235
explain to you all the various
different hooks that you can do.

24
00:01:27.505 --> 00:01:31.185
So let's go ahead and dive into this
first one here which is state, So

25
00:01:31.185 --> 00:01:33.380
it's called State.js.

26
00:01:33.380 --> 00:01:35.927
And this is something that you
probably already understood before but

27
00:01:35.927 --> 00:01:38.085
let's just go on to make sure
that we understand you stay for

28
00:01:38.085 --> 00:01:40.400
us because basically everything
depends on you state.

29
00:01:40.400 --> 00:01:42.800
So if you don't understand you state,
you're gonna have a bad time.

30
00:01:46.010 --> 00:01:51.121
Let's see, maybe this just
a little bit further out but

31
00:01:51.121 --> 00:01:53.740
then we can see and do a wrap.

32
00:01:56.620 --> 00:01:57.490
Yeah, that's better.

33
00:01:58.730 --> 00:02:03.610
Okay, bigger again and
make this, there we go.

34
00:02:03.610 --> 00:02:09.990
Okay, so you state at its most basic
allows you to hold on to state.

35
00:02:09.990 --> 00:02:16.630
So, a good example this is I have
this useState, I think it's an h1.

36
00:02:16.630 --> 00:02:21.180
H1 that just goes back and
forth between lime green and crimson.

37
00:02:22.300 --> 00:02:26.683
So on click is shifting over to be green
by setting it to be the opposite of

38
00:02:26.683 --> 00:02:28.630
whatever it was, right?

39
00:02:28.630 --> 00:02:31.720
So you can think of you state is
just like a very simple container.

40
00:02:31.720 --> 00:02:38.320
For state, so I have used to here I have
true, true is gonna be the default value.

41
00:02:38.320 --> 00:02:42.250
So whenever this gets rendered the first
time is green is going to be true.

42
00:02:42.250 --> 00:02:44.450
And then I have this
ability to set is green.

43
00:02:44.450 --> 00:02:48.543
Now whenever I call set is green No matter
what even if I say set is green true

44
00:02:48.543 --> 00:02:51.000
again, it's going to kick off a rerender.

45
00:02:51.000 --> 00:02:54.105
And it might choose not to end up re
rendering that if it detects that none of

46
00:02:54.105 --> 00:02:55.470
the state changed but it might.

47
00:02:57.350 --> 00:03:00.975
So you can basically just think about
every time that I'm calling set is green

48
00:03:00.975 --> 00:03:03.900
is going to kick off an entire
another rerender cycle for you.

49
00:03:06.260 --> 00:03:07.340
Any questions about use state?

50
00:03:08.400 --> 00:03:10.490
&gt;&gt; Yeah,
just a quick clarification question.

51
00:03:10.490 --> 00:03:13.689
So when it rerenders is it re
rendering that one component only or

52
00:03:13.689 --> 00:03:16.560
is it re rendering
everything in that page?

53
00:03:16.560 --> 00:03:19.046
&gt;&gt; React is pretty smart about
what it chooses to rerender and

54
00:03:19.046 --> 00:03:22.495
what it doesn't choose to rerender that's
actually how react is able to get some

55
00:03:22.495 --> 00:03:24.760
pretty good performance benefits, right?

56
00:03:24.760 --> 00:03:28.965
So like a good example this if I scroll
down on here, you can see that I have like

57
00:03:28.965 --> 00:03:33.303
a last rerender here, despite the fact
that this is all one react application,

58
00:03:33.303 --> 00:03:35.200
this is not going up, right?

59
00:03:35.200 --> 00:03:38.690
Whereas like if I clicked on this
right now, notice that it does go up.

60
00:03:39.780 --> 00:03:42.480
So the thing I'll tell you is like,
it doesn't kick off and

61
00:03:42.480 --> 00:03:45.612
rerender everything but you're also
not always going to be positive

62
00:03:45.612 --> 00:03:49.284
of what it's going to render and what it's
not going to render So in other words,

63
00:03:49.284 --> 00:03:52.060
make sure all of your
renders are very performant.

64
00:03:52.060 --> 00:03:54.990
Right, because if they're not performance,
you're going to greatly slow

65
00:03:54.990 --> 00:03:57.390
down your application because
those renders can happen a lot.

66
00:03:58.410 --> 00:04:01.830
Like you can see this one here,
this is re rendering every second.

67
00:04:01.830 --> 00:04:05.460
So and that's, it can be much
more fast than that as well.

68
00:04:05.460 --> 00:04:08.123
So the question is,
does it re render its children, and

69
00:04:08.123 --> 00:04:10.910
it's at least going to attempt
to re render its children.

70
00:04:10.910 --> 00:04:16.950
So if you still had children, it would
attempt to rerender its children as well.

71
00:04:18.770 --> 00:04:23.118
But again this magic reacts scheduler and
so you're not always totally positive of

72
00:04:23.118 --> 00:04:26.110
where it's gonna be able to
optimize performance more.

73
00:04:26.110 --> 00:04:30.040
It's not going to be, so
in general just write performant code.

74
00:04:30.040 --> 00:04:30.940
Just write good code.

75
00:04:30.940 --> 00:04:33.720
I think that's the summary of my
story here is write your code well.

76
00:04:35.560 --> 00:04:37.390
General life advice with Brian.

77
00:04:38.520 --> 00:04:42.227
So the question is I get like a whole slew
of data and I know some of the components

78
00:04:42.227 --> 00:04:45.780
don't need to update and
maybe they're expensive to update.

79
00:04:45.780 --> 00:04:48.893
So it do I have like a knob
that I can go in and say, hey,

80
00:04:48.893 --> 00:04:53.830
definitely don't really rerender this even
though you might want to answer is yes.

81
00:04:53.830 --> 00:04:57.680
So there is a lifecycle method on class
components called should component update.

82
00:04:58.940 --> 00:05:02.082
And should component update allows
you to go in there and say I know

83
00:05:02.082 --> 00:05:05.282
that you maybe your state changed and
you might want to re render but

84
00:05:05.282 --> 00:05:09.167
I'm going to tell you right now you don't
need to and you can just return false and

85
00:05:09.167 --> 00:05:11.080
that should component update method.

86
00:05:12.330 --> 00:05:14.153
So something we're going
to talk about today but

87
00:05:14.153 --> 00:05:16.920
that's some kind of like advanced react
perf stuff that you can get into.

88
00:05:18.790 --> 00:05:21.613
There's a temptation when people
learn about should component update,

89
00:05:21.613 --> 00:05:22.933
that they're gonna go in there and

90
00:05:22.933 --> 00:05:25.450
like throw it on every component
that they have and do not do that.

91
00:05:25.450 --> 00:05:26.738
You're gonna make your code so

92
00:05:26.738 --> 00:05:30.390
much harder to understand like,
why is this not re rendering, right?

93
00:05:30.390 --> 00:05:35.065
So, the first what I'm gonna suggest you
with all these kinds of like, advanced

94
00:05:35.065 --> 00:05:39.880
react perf things is, have a problem
first and then solve a problem, right?

95
00:05:39.880 --> 00:05:43.173
So have a performance problem
with whatever components

96
00:05:43.173 --> 00:05:47.935
you have first don't preemptively solve
it because it makes your component a lot

97
00:05:47.935 --> 00:05:49.980
more complicated to understand.

