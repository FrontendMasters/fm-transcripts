WEBVTT

1
00:00:00.390 --> 00:00:03.149
Let's write a test for pet.js.

2
00:00:03.149 --> 00:00:07.312
So we're gonna go into our directory here,

3
00:00:07.312 --> 00:00:12.722
where a new file and
we're gonna call it pet.test.js.

4
00:00:12.722 --> 00:00:15.090
A lot of people will call
these like spec as well.

5
00:00:16.650 --> 00:00:17.840
It's up to you.

6
00:00:17.840 --> 00:00:20.550
And I will even see people
called like pet tests like that.

7
00:00:20.550 --> 00:00:22.750
I'm gonna say I like pet.test.js.

8
00:00:22.750 --> 00:00:26.560
Now it's very obvious when I'm looking
through like my file switcher here.

9
00:00:26.560 --> 00:00:32.250
If I type test, all my tests will come up.

10
00:00:32.250 --> 00:00:36.033
Another note here, actually, if you have
pet.test.js outside of the under double

11
00:00:36.033 --> 00:00:39.570
underscore test directory, it'll
automatically run all of those files too.

12
00:00:40.970 --> 00:00:44.280
So actually could just call this pet.js
and it would run that automatically.

13
00:00:44.280 --> 00:00:46.000
It doesn't have to be called that.

14
00:00:46.000 --> 00:00:48.540
But I like having both assurances.

15
00:00:48.540 --> 00:00:50.008
So I just, I do both.

16
00:00:52.240 --> 00:00:52.780
Okay.

17
00:00:54.410 --> 00:00:59.686
So first thing we're gonna do

18
00:00:59.686 --> 00:01:06.441
is we're going to import, expect and

19
00:01:06.441 --> 00:01:13.000
test from that at just/global's.

20
00:01:13.000 --> 00:01:15.350
Previously they were just global's,
and you could use them.

21
00:01:15.350 --> 00:01:20.086
I like doing this explicitly so that
one ESLint doesn't get upset and well,

22
00:01:20.086 --> 00:01:23.920
mostly that it's also
explicit which is nice.

23
00:01:23.920 --> 00:01:29.840
Then we're gonna import render
from our testing library/react.

24
00:01:31.380 --> 00:01:39.454
And we're gonna import pet
from dot dot slash pet.

25
00:01:39.454 --> 00:01:40.261
Okay?

26
00:01:43.080 --> 00:01:47.830
So let's say we had a problem with like
the thumbnails not working correctly.

27
00:01:49.640 --> 00:01:52.819
So let's try to test that would actually
test that the thumbnail is showing

28
00:01:52.819 --> 00:01:53.380
correctly.

29
00:01:53.380 --> 00:01:58.095
So we're gonna write a test

30
00:01:58.095 --> 00:02:03.430
displays default thumbnail.

31
00:02:06.611 --> 00:02:10.403
So, here you wanna have a pretty
descriptive string so that immediately if

32
00:02:10.403 --> 00:02:15.060
you read is like okay, I know which test
is failing,that's the rule of thumbnails.

33
00:02:15.060 --> 00:02:19.569
Write enough text that you know which
test is failing if that string pops up.

34
00:02:21.390 --> 00:02:23.640
Okay, then I'm gonna run Async function.

35
00:02:24.940 --> 00:02:28.614
I just make all of these async now even if
there's not anything async about it just

36
00:02:28.614 --> 00:02:31.870
habit because eventually might be
async and there's no reason not to.

37
00:02:31.870 --> 00:02:32.380
That's up to you.

38
00:02:34.700 --> 00:02:38.080
Okay, I'm gonna write
cost pet equals render.

39
00:02:39.230 --> 00:02:43.210
And since this is going through Bible,
we can just use jsx directly.

40
00:02:44.790 --> 00:02:51.476
Then I'm gonna say const petThumbnail

41
00:02:51.476 --> 00:02:58.170
= await pet findByTestId thumbnail.

42
00:02:59.170 --> 00:02:59.950
Now, what's a test ID?

43
00:02:59.950 --> 00:03:02.741
Well, we haven't used it yet,
but I'm about to show you, and

44
00:03:02.741 --> 00:03:04.120
I use them pretty frequently.

45
00:03:04.120 --> 00:03:07.924
You can find things by roles,
by alt text, but what it's gonna try and

46
00:03:07.924 --> 00:03:12.590
prevent you to do is using CSS selectors,
cuz that's the temptation.

47
00:03:12.590 --> 00:03:16.627
What's really nice about this is if I use
a test ID, then I can move that around if

48
00:03:16.627 --> 00:03:19.420
I reorganize my code and
then my test might still work.

49
00:03:22.480 --> 00:03:28.379
Okay, and then already here I'm
gonna write my test I'm going

50
00:03:28.379 --> 00:03:33.724
to expect pet thumbnail that
source to contain none.JPG

51
00:03:33.724 --> 00:03:39.873
because I know that's the name
of my default thumbnail, right?

52
00:03:42.791 --> 00:03:46.048
So this is a test I might write if my
thumbnails just stopped showing up

53
00:03:46.048 --> 00:03:47.180
one time.

54
00:03:47.180 --> 00:03:49.860
And I could write this as soon as like,
okay,

55
00:03:49.860 --> 00:03:54.710
now I'm positive if I didn't give
this any sort of default image.

56
00:03:54.710 --> 00:03:59.400
So it'll now show a none.jpg.

57
00:03:59.400 --> 00:04:01.150
So this isn't gonna work quite yet.

58
00:04:02.170 --> 00:04:04.740
Well, it's because we
haven't used this test idea.

59
00:04:08.581 --> 00:04:12.610
In fact, this won't even run
if you try and do NPM test.

60
00:04:12.610 --> 00:04:14.640
So one fun thing that you can do with NPM.

61
00:04:14.640 --> 00:04:18.770
You can do NPM run test.

62
00:04:18.770 --> 00:04:20.945
But if you're really lazy,
you can just do NPM T and

63
00:04:20.945 --> 00:04:22.488
we'll figure out what that means.

64
00:04:22.488 --> 00:04:23.264
Test.

65
00:04:23.264 --> 00:04:26.160
Formidable trick.

66
00:04:26.160 --> 00:04:28.370
So this is going to just air
out in a really gross way.

67
00:04:28.370 --> 00:04:29.770
And why is that?

68
00:04:31.640 --> 00:04:37.400
Well, if you look inside a pet.js,
it has a link in it.

69
00:04:37.400 --> 00:04:39.760
And a link cannot exist without a router.

70
00:04:39.760 --> 00:04:40.759
It just cannot do it.

71
00:04:42.240 --> 00:04:46.744
So we can kind of just
cheat a little bit and

72
00:04:46.744 --> 00:04:52.040
say import static router
from react router DOM.

73
00:04:52.040 --> 00:04:56.063
And we can just wrap
this in a static router.

74
00:04:57.922 --> 00:04:59.720
In this case,
it's really not going to do anything.

75
00:04:59.720 --> 00:05:02.632
It's just gonna make sure that it's in
a correct environment where this pet can

76
00:05:02.632 --> 00:05:03.380
render correctly.

77
00:05:04.860 --> 00:05:06.690
I think it's static router, right?

78
00:05:06.690 --> 00:05:11.750
Yep, now, we can do an NPM test.

79
00:05:11.750 --> 00:05:14.381
It's not gonna find it, so
that's gonna be an error, but

80
00:05:14.381 --> 00:05:16.432
now at least it's not
erring in the same way.

81
00:05:26.350 --> 00:05:34.670
So there's actually even already caught
a bug for us, which we can go fix.

82
00:05:34.670 --> 00:05:38.560
If we don't give pet an images array,
it tries to find the length on it.

83
00:05:38.560 --> 00:05:40.260
And that's the problem right?

84
00:05:40.260 --> 00:05:41.430
It should.

85
00:05:41.430 --> 00:05:47.340
Now if I came in here and
gave it an empty array here like this.

86
00:05:48.940 --> 00:05:52.830
Then that might work but
we want to be able to give it nothing.

87
00:05:53.870 --> 00:05:54.518
So let's go fix that.

88
00:05:54.518 --> 00:05:59.170
Go into pet.js.

89
00:05:59.170 --> 00:06:04.631
And what we need to do to go fix that is
we just say images and images.length.

90
00:06:07.020 --> 00:06:08.250
So that will actually fix that.

91
00:06:08.250 --> 00:06:09.680
So now we can actually
run it without that.

92
00:06:09.680 --> 00:06:16.962
But let's go ahead and give the thumbnail,
The test ID that we need to give it.

93
00:06:18.392 --> 00:06:23.494
So we're just going to give
it a data-testid=thumbnail.

94
00:06:26.830 --> 00:06:27.330
Just looks like that.

95
00:06:28.650 --> 00:06:34.010
Now, when I say get by test ID,
it's gonna grab this thing right here.

96
00:06:36.030 --> 00:06:39.221
And now, if I modify this later and
I put like, I make the thumbnail,

97
00:06:39.221 --> 00:06:42.576
I don't know down here, all I have to
do is move the test ID and it's now,

98
00:06:42.576 --> 00:06:44.550
it's gonna check that one instead.

99
00:06:44.550 --> 00:06:50.042
It makes it a little bit It makes
your implementation logic and

100
00:06:50.042 --> 00:06:54.687
your testing logic
separated from each other.

101
00:06:54.687 --> 00:06:57.106
Okay, now what happens
if you do npm run test?

102
00:07:00.112 --> 00:07:02.217
Lo and behold, we have a passing test.

103
00:07:04.440 --> 00:07:08.136
Now what I wanna do here Is it's
getting annoying to do run tests every

104
00:07:08.136 --> 00:07:08.910
single time.

105
00:07:08.910 --> 00:07:11.130
So I'm gonna do NPM run test colon watch.

106
00:07:12.770 --> 00:07:14.711
And now it's gonna put me
an interactive test mode.

107
00:07:16.867 --> 00:07:20.990
This actually has to be a Git REPO or
else it doesn't work.

108
00:07:20.990 --> 00:07:25.363
So you just have to say Git
init This will put you into

109
00:07:25.363 --> 00:07:29.340
a Git repo now I can
actually do run test watch.

110
00:07:30.660 --> 00:07:33.280
Here's my work if you already
a Git repo mine just wasn't.

111
00:07:36.420 --> 00:07:39.320
It uses Git to check what has changed and
what hasn't changed.

112
00:07:39.320 --> 00:07:42.610
That's how We have a passing test.

113
00:07:42.610 --> 00:07:45.430
We're running just an interactive mode.

114
00:07:46.710 --> 00:07:50.449
I can hit A, it'll rerun all of my
tests over again, I can hit enter,

115
00:07:50.449 --> 00:07:53.210
it'll run just the tests again.

116
00:07:53.210 --> 00:07:57.850
I can run, I can hit O, it'll actually try
and run only the files that have changed.

117
00:07:57.850 --> 00:07:59.490
There's a bunch of cool
stuff that this can do.

118
00:07:59.490 --> 00:08:03.940
My favorite part of it though,
is that I just like saved my test again.

119
00:08:03.940 --> 00:08:06.960
It'll run the tests that have
set like you've saved recently.

120
00:08:08.350 --> 00:08:11.386
So now I don't have to do NPM run test
every single time I can just be writing my

121
00:08:11.386 --> 00:08:13.770
tests and watching the bottom
to see if things are working.

122
00:08:15.740 --> 00:08:17.090
So, let's write another test here.

123
00:08:17.090 --> 00:08:21.236
We're gonna test now if I
give it a list of arrays, or

124
00:08:21.236 --> 00:08:25.966
a list of JPG so it will choose
the right one for the thumbnail

125
00:08:28.301 --> 00:08:34.101
So let's do test displays
a non default correct

126
00:08:34.101 --> 00:08:39.633
thumbnail Okay, write a function here.

127
00:08:42.633 --> 00:08:43.490
Same thing here.

128
00:08:43.490 --> 00:08:45.699
In fact, you can even copy and paste it.

129
00:08:52.770 --> 00:08:54.300
Okay?

130
00:08:54.300 --> 00:08:59.962
But now we're gonna give
pet a set of images,

131
00:08:59.962 --> 00:09:07.270
images = I'm going to give
it three images 1.jpg, 2.

132
00:09:07.270 --> 00:09:08.740
jpg, and 3.

133
00:09:08.740 --> 00:09:10.040
jpg.

134
00:09:10.040 --> 00:09:14.100
Now, we would expect that by default the
thumbnail should be the first one, right?

135
00:09:14.100 --> 00:09:19.950
So I'm going to say I'm going to
expect I can just copy this as well.

136
00:09:21.090 --> 00:09:25.401
I expect pet that thumbnail
dot source equal to one jpg.

137
00:09:28.805 --> 00:09:30.710
And what did we do here?

138
00:09:30.710 --> 00:09:32.230
&gt;&gt; Forgot async.

139
00:09:32.230 --> 00:09:32.980
&gt;&gt; Yes, thank you.

140
00:09:34.020 --> 00:09:35.626
Make sure this is an async function.

141
00:09:39.851 --> 00:09:41.780
There you go.

142
00:09:41.780 --> 00:09:44.720
Now we have two passing tests for this.

143
00:09:44.720 --> 00:09:49.660
This is like the, for the most part,
like how you test most react components.

144
00:09:50.670 --> 00:09:55.080
You're going to get them to render
here using the testing library react.

145
00:09:55.080 --> 00:09:56.940
You're going to render all this stuff out.

146
00:09:56.940 --> 00:09:59.796
You're going to find whatever
thing you need to test and

147
00:09:59.796 --> 00:10:02.060
you're gonna do a bunch
of expects on that.

148
00:10:03.130 --> 00:10:04.320
That's the whole story here.

149
00:10:05.430 --> 00:10:08.398
Let's test some user,
some interactions from the user,

150
00:10:08.398 --> 00:10:11.500
what happens if I click, or
mouse up or something like that.

151
00:10:13.280 --> 00:10:17.120
So let's make a test for

152
00:10:17.120 --> 00:10:23.267
Carousel.test.js hearing tests.

153
00:10:25.411 --> 00:10:30.489
We're going to import, test or

154
00:10:30.489 --> 00:10:36.900
expect and test from @jest/globals.

155
00:10:36.900 --> 00:10:43.380
We're going to import render
from At testing library/react,

156
00:10:43.380 --> 00:10:46.862
we're going to import carousel.

157
00:10:49.754 --> 00:10:53.704
From ../carousel.

158
00:10:53.704 --> 00:10:59.419
Gonna write a test that lets users click
on thumbnails To make them the hero,

159
00:10:59.419 --> 00:11:05.400
right kind of that logic that we did that
we click on a little thumbnail picture,

160
00:11:05.400 --> 00:11:09.350
and then it makes that like
the focused big picture.

161
00:11:13.380 --> 00:11:16.140
I like this test cuz it's like it's
something that a user would expect to see.

162
00:11:16.140 --> 00:11:20.016
And we're kind of testing it from the user
perspective, like a user is going to

163
00:11:20.016 --> 00:11:23.716
expect to see this we want to assure
ourselves that that continues to work,

164
00:11:23.716 --> 00:11:26.150
particularly if we've
broken this in the past.

165
00:11:28.700 --> 00:11:33.411
So again, const images equals and

166
00:11:33.411 --> 00:11:38.121
we'll do zero dot JPG one dot jpg,

167
00:11:38.121 --> 00:11:42.225
two dot JPG and three dot jpg.

168
00:11:42.225 --> 00:11:46.912
Do, okay const carousel carousel is one of

169
00:11:46.912 --> 00:11:52.770
those words I just have
a hard time spelling.

170
00:11:52.770 --> 00:11:54.700
Alright, carousel equals render.

171
00:11:55.910 --> 00:11:58.870
This one doesn't have any links in it so
we don't have to wrap it in static router.

172
00:11:58.870 --> 00:12:02.705
But we could if we had to,

173
00:12:02.705 --> 00:12:07.102
carousel Images = images.

174
00:12:11.535 --> 00:12:13.560
Okay, so the first thing we do,

175
00:12:13.560 --> 00:12:18.300
we're gonna test the correct one is
the one that we have selected already.

176
00:12:19.790 --> 00:12:26.840
So const hero equqls a weight
Carousel.find by test ID.

177
00:12:26.840 --> 00:12:32.032
So let's go put that in there
as well find by test ID,

178
00:12:32.032 --> 00:12:35.572
hero, and we're going to expect,

179
00:12:39.474 --> 00:12:45.820
That hero.source to contain Images zero.

180
00:12:47.530 --> 00:12:49.037
Right?
Makes sense by default,

181
00:12:49.037 --> 00:12:50.780
the hero is going to be the first one.

182
00:12:52.040 --> 00:12:53.560
Assure ourselves that that's the case.

183
00:12:54.720 --> 00:12:57.708
Then what I want to do is I want to do a
for loop and click on each one of them and

184
00:12:57.708 --> 00:13:00.560
make sure that it changes
correctly every single time.

185
00:13:00.560 --> 00:13:01.970
We're gonna get kind of
two benefits out of this.

186
00:13:01.970 --> 00:13:03.780
If I click on the first one.

187
00:13:03.780 --> 00:13:06.800
I mean, that's already the hero image,
it shouldn't change, right?

188
00:13:06.800 --> 00:13:10.890
And then every one of them we're gonna
make sure that it advances correctly.

189
00:13:10.890 --> 00:13:15.540
So I'm just gonna read a quick four
loop here, four that i equals zero.

190
00:13:15.540 --> 00:13:22.214
i is less than images.length i++.

191
00:13:22.214 --> 00:13:28.006
And now const image equals images of I.

192
00:13:32.644 --> 00:13:40.811
Then I'm gonna say const thumb equals,
A weight

193
00:13:44.016 --> 00:13:48.824
carousel.FindByTestId.

194
00:13:52.110 --> 00:13:58.930
We're looking for a thumbnail, Of i right?

195
00:13:58.930 --> 00:14:05.464
So, we wanna find like thumbnail 1 or
2 or 3 Okay.

196
00:14:05.464 --> 00:14:09.240
Then I'm going to do a thumb dot click.

197
00:14:11.320 --> 00:14:14.390
This is gonna be like a user actually
clicked on that particular element.

198
00:14:14.390 --> 00:14:18.580
And then I'm gonna expect
two things I'm gonna expect.

199
00:14:18.580 --> 00:14:22.560
Hero dot source toContain(image) and

200
00:14:22.560 --> 00:14:29.732
then I'm going to
expect(thumb.classList).toContain("acti-

201
00:14:29.732 --> 00:14:36.374
ve") because when I click on that But
particularly the thumbnail,

202
00:14:36.374 --> 00:14:40.703
it's gonna have an active
class of like this

203
00:14:40.703 --> 00:14:45.400
is the active thumbnail at the moment,
right?

204
00:14:50.840 --> 00:14:51.460
There you go.

205
00:14:52.870 --> 00:14:53.744
This won't work yet,

206
00:14:53.744 --> 00:14:56.970
we still have to go into carousel because
there's none of those test IDs exist yet.

207
00:14:58.910 --> 00:15:00.329
So this is going to fail up first.

208
00:15:03.130 --> 00:15:07.600
So, inside a carousel,
this thumbnail here.

209
00:15:07.600 --> 00:15:08.494
Going to give it a data.

210
00:15:08.494 --> 00:15:14.704
Test ID equal to,

211
00:15:14.704 --> 00:15:19.266
thumbnail.

212
00:15:19.266 --> 00:15:23.110
And we have to give some sort of I too it.

213
00:15:23.110 --> 00:15:24.630
So that's what we'll do up here.

214
00:15:24.630 --> 00:15:27.080
All this we already get index, so index.

215
00:15:30.060 --> 00:15:33.590
Okay, so
our thumbnail's testid is taken care of.

216
00:15:34.750 --> 00:15:37.860
We just have to give it here to this one.

217
00:15:37.860 --> 00:15:42.391
So we'll do data.testid=hero.

218
00:15:46.291 --> 00:15:47.050
There you go.

219
00:15:47.050 --> 00:15:48.600
We are passing tests now.

220
00:15:48.600 --> 00:15:51.281
Now something I always like to
do when I'm writing this test,

221
00:15:51.281 --> 00:15:54.340
I like to make sure that it fails when
I would expect it to fail, right?

222
00:15:55.560 --> 00:16:00.580
So let's just say I accidentally
made the source here.

223
00:16:00.580 --> 00:16:03.500
I'll just make this 5.jpg.

224
00:16:03.500 --> 00:16:05.821
Now if I save this.

225
00:16:13.441 --> 00:16:15.110
Well, that's not failing correctly, is it?

226
00:16:17.491 --> 00:16:20.590
It's cuz it's not checking
the source on the thumbnail.

227
00:16:20.590 --> 00:16:22.380
It's checking it on the hero.

228
00:16:22.380 --> 00:16:22.970
Makes sense.

229
00:16:24.080 --> 00:16:25.800
So I'll just put zero
here instead of active.

230
00:16:27.930 --> 00:16:30.590
And that's going to fail, right?

231
00:16:30.590 --> 00:16:33.440
Because the hero image is not changing,
right?

232
00:16:33.440 --> 00:16:34.720
I just always put it as the 01.

233
00:16:34.720 --> 00:16:38.310
Then we change it back to active.

234
00:16:39.760 --> 00:16:40.502
Everything works.

235
00:16:44.956 --> 00:16:46.041
Cool.

236
00:16:46.041 --> 00:16:49.220
So one,
I love this interactive test watcher.

237
00:16:49.220 --> 00:16:52.230
I love it that I can just
rapidly iterate on something.

238
00:16:52.230 --> 00:16:54.310
Make sure that's working,
make sure that's breaking.

239
00:16:54.310 --> 00:16:55.490
All that works really well for me.

