WEBVTT

1
00:00:00.240 --> 00:00:04.585
Next thing here,
we broke ESLint in the process here,

2
00:00:04.585 --> 00:00:10.827
which is kind of a shame, so we're gonna
go and fix ESLint here in the process.

3
00:00:10.827 --> 00:00:16.006
The other thing is TypeScript has a lot
of its own peculiar particular downfalls,

4
00:00:16.006 --> 00:00:19.248
and so we wanna have special rules for
TypeScript.

5
00:00:19.248 --> 00:00:22.086
Now, we used to do this with
a thing called TSLint, but

6
00:00:22.086 --> 00:00:26.050
TSLint has been deprecated and
now everyone's converging on just ESLint.

7
00:00:26.050 --> 00:00:32.117
So we have to include a special
package called TypeScript dash ESLint,

8
00:00:32.117 --> 00:00:35.161
so let's go fix that all right now.

9
00:00:38.468 --> 00:00:43.884
We're gonna say npm uninstall
@babel/eslint-parser,

10
00:00:43.884 --> 00:00:47.599
because now we have to
have a new parser for

11
00:00:47.599 --> 00:00:51.754
this which is gonna be
the TypeScript parser.

12
00:00:54.035 --> 00:01:00.359
All right, and then now we have to get a
bunch of stuff, so let's just go ahead and

13
00:01:00.359 --> 00:01:06.035
copy and paste it from my notes here,
down here in TypeScript + ESLint.

14
00:01:06.035 --> 00:01:07.634
We want this one here.

15
00:01:10.405 --> 00:01:13.843
So we're getting import-resolver,

16
00:01:13.843 --> 00:01:18.539
eslint-plugin and
typescript-eslint/parser.

17
00:01:18.539 --> 00:01:23.124
So it's just a bunch of tooling to make
ESLint and TypeScript play good together.

18
00:01:27.298 --> 00:01:28.837
And I need a NPM.

19
00:01:30.816 --> 00:01:36.525
Okay, that got me all of my ESLint rules,
let's go modify ESLint RC.

20
00:01:39.365 --> 00:01:43.766
So above the prettier rules here,

21
00:01:43.766 --> 00:01:52.433
we're gonna say plugin:
@typescript-eslint/recommended.

22
00:01:56.843 --> 00:02:00.589
It's kind of a nice step function there.

23
00:02:00.589 --> 00:02:04.767
Inside rules, we're gonna have,

24
00:02:05.932 --> 00:02:14.423
@typescript-eslint/no-empty-functions.

25
00:02:14.423 --> 00:02:17.306
We have a couple of empty functions
throughout our code base.

26
00:02:17.306 --> 00:02:20.095
I found this to not be a particularly
useful function or a rule, so

27
00:02:20.095 --> 00:02:21.529
we're gonna turn it off for now.

28
00:02:23.830 --> 00:02:27.896
You can leave it on if you like,
you just have to fix some things in there.

29
00:02:27.896 --> 00:02:32.401
Inside plugins, we have to get another

30
00:02:32.401 --> 00:02:36.912
plugin here for typescript-eslint.

31
00:02:40.837 --> 00:02:45.520
And then the parser here has to be

32
00:02:45.520 --> 00:02:52.115
@typescripteslint/parser, like that.

33
00:02:55.417 --> 00:03:00.547
And then, In the settings array or

34
00:03:00.547 --> 00:03:06.484
object rather, we will have one for
import/parsers.

35
00:03:10.361 --> 00:03:17.686
That @typescript-eslint/parser.

36
00:03:17.686 --> 00:03:22.793
Wanna have asterik sorry, .ts and .tsx,

37
00:03:22.793 --> 00:03:29.033
this is just telling it where
to use the TypeScript parser.

38
00:03:29.033 --> 00:03:32.075
You have to use double
quotes not single quotes.

39
00:03:37.829 --> 00:03:43.691
Okay, and then underneath that we're gonna
have another one for import/resolver.

40
00:03:46.298 --> 00:03:49.964
For typescript.

41
00:03:53.664 --> 00:04:00.986
We're gonna say alwaysTryTypes, : true.

42
00:04:00.986 --> 00:04:05.132
All right, that was a bit to do,
feel free to copy from my notes as well.

43
00:04:05.132 --> 00:04:07.633
Took some trial and
error to get this exactly right.

44
00:04:09.477 --> 00:04:14.100
But basically this is just setting
up all the resolvers and parsers and

45
00:04:14.100 --> 00:04:16.381
ESLint to all play nice together.

46
00:04:16.381 --> 00:04:20.882
And in particular, you wanna be able to
type check and run ESLint at the same

47
00:04:20.882 --> 00:04:25.252
time, as well as just making sure
that everything works well together.

48
00:04:25.252 --> 00:04:28.668
The nice thing about VS Code is
the TypeScript stuff is all built into it.

49
00:04:28.668 --> 00:04:31.232
We don't have to install any extensions,
everything is just gonna work for

50
00:04:31.232 --> 00:04:31.883
you out of the box.

51
00:04:31.883 --> 00:04:36.813
If you're using something like VI or
Sublime, you probably have to go install

52
00:04:36.813 --> 00:04:40.639
some additional tooling to get
TypeScript working with it.

53
00:04:40.639 --> 00:04:43.821
Now, I think if we say npm run lint, so

54
00:04:43.821 --> 00:04:48.907
the key here is everything was
correct that we did together.

55
00:04:48.907 --> 00:04:52.130
You just need an E here online 8,
typescript,

56
00:04:52.130 --> 00:04:55.193
which I imagine most of you were working,
and

57
00:04:55.193 --> 00:05:00.290
I was staring at it unable to figure out
that you spell typescript with an E.

58
00:05:00.290 --> 00:05:04.563
So, there it is, line 8,
plugin: @typescript-eslint/recommended.

59
00:05:05.671 --> 00:05:09.973
Now, We should be able
to say npm run lint.

60
00:05:13.195 --> 00:05:19.511
And we have an unexpected error
function which no empty function,

61
00:05:19.511 --> 00:05:26.414
I thought we did that,
typescript-eslint/no-empty-functions.

62
00:05:26.414 --> 00:05:28.271
My pages empty function.

63
00:05:31.409 --> 00:05:36.771
[SOUND] [INAUDIBLE] the day I've
[LAUGH] written a lot of code today.

64
00:05:36.771 --> 00:05:38.345
All right, so there we go.

65
00:05:38.345 --> 00:05:41.260
Now we have no linting
errors coming back here.

66
00:05:41.260 --> 00:05:45.975
That's totally good, but we also want
it to run our TypeScript for us.

67
00:05:45.975 --> 00:05:50.145
So you can actually add
something here at the end.

68
00:05:50.145 --> 00:05:54.106
You can say, all right,

69
00:05:54.106 --> 00:06:03.069
plugin:
@typescript-eslint/recommended-requiring--

70
00:06:03.069 --> 00:06:07.317
type-checking.

71
00:06:10.710 --> 00:06:15.350
So this is going to be all the additional
rules that we're going to introduce that

72
00:06:15.350 --> 00:06:18.979
require that the type checking
portion of TypeScript ESLint.

73
00:06:18.979 --> 00:06:21.949
So this is actually like
the magic of having ESLint and

74
00:06:21.949 --> 00:06:26.041
TypeScript together is now we have
an extra set of rules that are going to do

75
00:06:26.041 --> 00:06:28.094
all the type checking for us as well.

76
00:06:31.711 --> 00:06:36.823
So now, Do I feel like a comma or
something like that?

77
00:06:42.483 --> 00:06:45.996
Yeah, parser options project.

78
00:06:45.996 --> 00:06:52.160
So something else we need to do here is we
need to add the parser options project,

79
00:06:52.160 --> 00:06:58.150
if you tell where your TS configure is
cuz it won't figure that out on its own.

80
00:06:58.150 --> 00:07:03.734
And I think you'd say ./tsconfig,
that should work .json.

81
00:07:12.038 --> 00:07:12.968
And there you go.

82
00:07:12.968 --> 00:07:17.355
Now we're getting a bunch of hey,
this is all broken.

83
00:07:17.355 --> 00:07:21.271
[LAUGH] So now ESLint is gonna
start yelling at us a lot for

84
00:07:21.271 --> 00:07:23.752
all these things that are broken.

85
00:07:23.752 --> 00:07:28.381
But yeah, make sure you have there,
line 21, add the project to tsconfig.json.

86
00:07:28.381 --> 00:07:31.150
You just have to let it know all
the configurations that you have for

87
00:07:31.150 --> 00:07:32.294
your TypeScript project.

88
00:07:35.914 --> 00:07:36.814
All right, so

89
00:07:36.814 --> 00:07:41.464
if you wanna skip all that mess that I
just went through in setting this up,

90
00:07:41.464 --> 00:07:46.499
getting ESLint and TypeScript together
always takes me longer than it should.

91
00:07:46.499 --> 00:07:51.430
So if you wanna skip all that,
I have a typescript-1 in that

92
00:07:51.430 --> 00:07:55.309
project over here,
let's take a look at that.

93
00:07:55.309 --> 00:08:00.846
If you go to typescript-1,
this is where we are right now.

94
00:08:03.123 --> 00:08:06.698
Let's head over to ThemeContext and
let's go type that one.

95
00:08:06.698 --> 00:08:12.178
So the first thing here is we're
gonna take ThemeContext and

96
00:08:12.178 --> 00:08:20.581
we're going to rename that, Rename .tsx.

97
00:08:20.581 --> 00:08:26.512
So, that's what we're gonna do file by
file, we're just gonna go rename them.

98
00:08:26.512 --> 00:08:30.233
First the TSX, and we're just gonna
fix problems until they're green.

99
00:08:33.290 --> 00:08:37.890
So this one,
we don't really have to do too much here,

100
00:08:37.890 --> 00:08:41.290
we're just gonna say createContext and

101
00:08:41.290 --> 00:08:47.290
we're gonna give it some explicit
typing here of its getting a string.

102
00:08:47.290 --> 00:08:55.598
And in function that is a theme
string that returns void.

103
00:08:58.414 --> 00:09:02.041
So, yeah, let's talk about
exactly what it's doing here,

104
00:09:02.041 --> 00:09:05.962
this is basically like we're telling
it that this is hook shaped.

105
00:09:05.962 --> 00:09:09.666
But now if you look at this theme context,
now it has a really good idea of what that

106
00:09:09.666 --> 00:09:13.448
looks like and now in the rest of our code
base, we can enforce that type checking.

