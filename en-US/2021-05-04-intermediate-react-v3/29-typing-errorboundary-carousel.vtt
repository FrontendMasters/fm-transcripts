WEBVTT

1
00:00:00.500 --> 00:00:05.690
So let's go to ErrorBoundary.js.

2
00:00:06.890 --> 00:00:08.930
You can see here this is
already having some issues.

3
00:00:08.930 --> 00:00:10.990
So let's go ahead and go fix those.

4
00:00:10.990 --> 00:00:17.615
So first of all rename it
To be ErrorBoundary.tsx and

5
00:00:17.615 --> 00:00:24.504
the first thing at the top from
react we're gonna get component but

6
00:00:24.504 --> 00:00:29.570
we're also gonna get error info and
react node.

7
00:00:29.570 --> 00:00:33.391
You'll find that you'll use react node
quite a bit that's just like here's

8
00:00:33.391 --> 00:00:36.284
a react thing, like a react a child or
a click a component.

9
00:00:39.100 --> 00:00:43.666
So, the first thing we have to put in here
that we didn't put before is we didn't

10
00:00:43.666 --> 00:00:53.507
have a redirect Okay.

11
00:00:54.986 --> 00:00:57.614
So you have to put
redirect in there's false.

12
00:01:02.625 --> 00:01:05.410
Okay and then we have to add
types of the parameters here.

13
00:01:05.410 --> 00:01:09.300
So, get derived state from errors.

14
00:01:09.300 --> 00:01:12.370
We have to tell it what
it expects to return.

15
00:01:12.370 --> 00:01:13.602
In fact, you can see here,

16
00:01:13.602 --> 00:01:16.347
you don't have a return type on
this I expect to return type.

17
00:01:19.928 --> 00:01:25.395
So here we're gonna say it's gonna
return a has error, which is a Boolean,

18
00:01:25.395 --> 00:01:29.594
and it's also gonna return
a redirect which is a Boolean.

19
00:01:35.768 --> 00:01:40.839
So actually,
what we probably could have done is

20
00:01:40.839 --> 00:01:45.792
we kind of made an interface
here of state type.

21
00:01:48.632 --> 00:01:50.220
And this is gonna be has error.

22
00:01:51.910 --> 00:01:54.919
Anyway, you could actually make a type
here and then reuse it multiple places cuz

23
00:01:54.919 --> 00:01:57.950
you can see that we have a state
that does that, we have that.

24
00:01:57.950 --> 00:02:00.961
I'm not gonna finish that out but that's
kinda some of the things you can start

25
00:02:00.961 --> 00:02:03.710
thinking about it as like, hey,
can I make a reusable interface here?

26
00:02:05.707 --> 00:02:07.550
But now this is happy.

27
00:02:07.550 --> 00:02:15.331
This one,
we need to give it a type of Error.

28
00:02:15.331 --> 00:02:16.915
Actually, we can just do
that directly in here.

29
00:02:18.805 --> 00:02:19.635
This is an error.

30
00:02:21.665 --> 00:02:24.207
And the info is error info.

31
00:02:27.938 --> 00:02:35.108
And This returns what?

32
00:02:35.108 --> 00:02:37.787
Also returns nothing then it returns,
void.

33
00:02:41.185 --> 00:02:45.110
Okay component did update,
this just returns void.

34
00:02:45.110 --> 00:02:51.000
So void is good,
render this returns a react node.

35
00:02:53.950 --> 00:02:57.553
So, as you can see here the colon
here means this is what it expects is

36
00:02:57.553 --> 00:02:58.510
the return type.

37
00:02:58.510 --> 00:03:02.700
So anytime that you have like a class
component here, what are those beat,

38
00:03:02.700 --> 00:03:06.026
always return It always returns
some sort of react markup,

39
00:03:06.026 --> 00:03:07.976
something that react can render.

40
00:03:10.380 --> 00:03:13.350
There you go, now ErrorBoundary
is totally written in TypeScript.

41
00:03:13.350 --> 00:03:22.858
Script It's really what
this is like migrating

42
00:03:22.858 --> 00:03:26.880
your app from JavaScript to TypeScript
is just a game of whack a mole, right?

43
00:03:26.880 --> 00:03:29.850
You hit one thing,
another error pops up somewhere.

44
00:03:29.850 --> 00:03:33.190
You hit that one, it goes back to
the other place, I don't know.

45
00:03:33.190 --> 00:03:34.630
But it's a lot of hopping back and forth.

46
00:03:34.630 --> 00:03:38.790
I'm leading you through a journey of like,
getting everything right on the first try.

47
00:03:38.790 --> 00:03:42.338
But believe me, I actually had to hop back
and forth quite a few times like, okay,

48
00:03:42.338 --> 00:03:44.200
this expects this from over here, right?

49
00:03:46.910 --> 00:03:48.180
So yeah, you'll just get used to it.

50
00:03:48.180 --> 00:03:51.307
And then once you have
the full migration done,

51
00:03:51.307 --> 00:03:54.911
then you really don't have
to do this as much anymore.

52
00:03:54.911 --> 00:03:59.458
All right, so we're gonna hop into
carousel now do carousel.tsx.

53
00:04:06.893 --> 00:04:11.525
So here from react we're going to import

54
00:04:11.525 --> 00:04:16.301
mouse event and react node, from react.

55
00:04:18.363 --> 00:04:23.870
And then we're gonna do
an interface of props.

56
00:04:23.870 --> 00:04:26.460
There's some people that insist
that you call this iprops.

57
00:04:27.660 --> 00:04:30.490
It is up to you what you do.

58
00:04:30.490 --> 00:04:34.090
Some people insist that all
interfaces must begin with Is.

59
00:04:34.090 --> 00:04:37.150
Those tend to be kinda see sharp people,
they really like that.

60
00:04:37.150 --> 00:04:38.360
I don't care.

61
00:04:38.360 --> 00:04:43.822
I do, I just follow whatever the
established baseline is in any code base,

62
00:04:43.822 --> 00:04:47.220
but I just wanted to expose
you to both of them.

63
00:04:47.220 --> 00:04:48.820
So I'm going to call this one iprops for
now.

64
00:04:50.670 --> 00:04:53.930
Okay, and it's gonna have an images and
that's gonna be a string.

65
00:04:55.710 --> 00:04:59.900
And then here to carousel I can
identify this component expects iprops.

66
00:05:02.420 --> 00:05:05.490
So you'll see this as a really common
pattern that people will identify

67
00:05:05.490 --> 00:05:08.080
the props first, and then pass it in here.

68
00:05:08.080 --> 00:05:12.531
You really can just say images,
string here,

69
00:05:12.531 --> 00:05:15.740
equally acceptable, up to you.

70
00:05:17.810 --> 00:05:22.719
If I have like one I'll do it this way
if I have two I'll do it our more I'll

71
00:05:22.719 --> 00:05:25.390
do it this way but I wanna do to see both.

72
00:05:26.660 --> 00:05:30.790
So just this component can
actually take several.

73
00:05:30.790 --> 00:05:34.433
So the first one is gonna be props right
then here you would have a state and

74
00:05:34.433 --> 00:05:37.520
you can identify what
the state's gonna look like.

75
00:05:37.520 --> 00:05:40.510
We don't have to do that because
we have default state here and

76
00:05:40.510 --> 00:05:44.890
react is smart enough and to say that, you
gave me state, I'm gonna infer from that.

77
00:05:44.890 --> 00:05:47.479
And then here would be I context,

78
00:05:47.479 --> 00:05:52.483
here's the context of this react
component is going to expect.

79
00:05:55.110 --> 00:05:57.770
But we're not gonna do that, we just have
five props, that's all we care about for

80
00:05:57.770 --> 00:05:58.959
now, so that we're we'll do that.

81
00:06:01.010 --> 00:06:03.094
Okay, handle index click.

82
00:06:04.627 --> 00:06:10.954
This event is a mouse event That
will happen on an HTML element.

83
00:06:15.227 --> 00:06:18.384
Okay and this returns void

84
00:06:22.581 --> 00:06:26.052
Okay, and
then here all we have to do is above it,

85
00:06:26.052 --> 00:06:30.480
just make sure that this actually
has a target that we can use.

86
00:06:30.480 --> 00:06:33.709
So we're gonna say if,

87
00:06:33.709 --> 00:06:38.553
we'll do it this way event.target

88
00:06:38.553 --> 00:06:43.239
is an instance of HTML element,.

89
00:06:46.698 --> 00:06:48.574
Then return.

90
00:06:51.166 --> 00:06:54.628
And now we can be because, it is
technically possible that you can get

91
00:06:54.628 --> 00:06:57.350
a mouse event that has no
HTML element behind it.

92
00:06:57.350 --> 00:07:02.372
It is technically possible and TypeScript
is very defensive to say you need

93
00:07:02.372 --> 00:07:07.312
to assure me that I will not get to
here without this being an HTML element,

94
00:07:07.312 --> 00:07:10.240
and I'm positive of that, right?

95
00:07:10.240 --> 00:07:12.870
So once we get here and
then we can be positive.

96
00:07:12.870 --> 00:07:15.150
All right,
this is definitely gonna be real thing.

97
00:07:15.150 --> 00:07:19.142
All HTML elements do have data sets and
this could be undefined but

98
00:07:19.142 --> 00:07:21.763
that would just cast
to zero which is fine.

99
00:07:24.991 --> 00:07:25.680
Makes sense?

100
00:07:25.680 --> 00:07:26.509
It's kind of strange.

101
00:07:26.509 --> 00:07:29.737
I said, you'd have to do a lot of
defensive programming when you're doing

102
00:07:29.737 --> 00:07:30.361
TypeScript.

103
00:07:37.131 --> 00:07:46.100
Okay, then down here the render
this just returns react, node.

104
00:07:46.100 --> 00:07:51.657
Now, keep in mind It's not TypeScript
requiring you to get these return types,

105
00:07:51.657 --> 00:07:55.240
just so you know, it's actually ES lint.

106
00:07:55.240 --> 00:07:58.780
So the ES lint rules that we put in there,
say, hey, every function,

107
00:07:58.780 --> 00:08:00.570
I just expect return types.

108
00:08:00.570 --> 00:08:05.196
I want to be triple sure, but actually
the react component here would already

109
00:08:05.196 --> 00:08:09.678
guarantee you that, so, to be honest
with you, this is kind of an annoying

110
00:08:09.678 --> 00:08:14.720
rule that we're just adhering to
because it's part of the ESLint thing.

111
00:08:14.720 --> 00:08:18.710
But it's always good just to know,
here's what I expect here.

112
00:08:18.710 --> 00:08:20.540
I don't expect this to
ever return anything.

113
00:08:20.540 --> 00:08:24.452
So if I tried to say, return five here,
it's gonna say, now you know what,

114
00:08:24.452 --> 00:08:28.121
you can't do that you told me that
this is not gonna return anything, so

115
00:08:28.121 --> 00:08:29.360
I'm not gonna let you.

116
00:08:32.289 --> 00:08:34.710
So, is it helpful?

117
00:08:34.710 --> 00:08:37.710
Probably, am I teaching it to you anyway?

118
00:08:37.710 --> 00:08:38.210
Yeah.

119
00:08:40.326 --> 00:08:42.060
So there's like angle brackets here.

120
00:08:43.940 --> 00:08:47.987
These angle brackets represent like
I'm basically passing parameters to

121
00:08:47.987 --> 00:08:49.560
the component type.

122
00:08:49.560 --> 00:08:53.562
So this component type,
you can see here, what I have,

123
00:08:53.562 --> 00:08:57.410
it has a p equals which stands for
props, s equals ss.

124
00:08:57.410 --> 00:09:01.850
I forgot what the ss stands for, I think
it's context but might be different.

125
00:09:03.070 --> 00:09:07.869
And this is just letting that
component know here is a subset of

126
00:09:07.869 --> 00:09:12.700
props that I'm expecting you to deal with,
right?

127
00:09:12.700 --> 00:09:17.249
It's basically like I said,
it's like parameters for

128
00:09:17.249 --> 00:09:21.230
a function where I say math mean 5,
right?.

129
00:09:21.230 --> 00:09:24.580
This is where I'm passing 5
to the math.mean function.

130
00:09:24.580 --> 00:09:27.910
I'm passing props to the component type
and it's gonna do something with it.

131
00:09:28.980 --> 00:09:33.019
So in this particular case, the first
parameter, right that this generic gets,

132
00:09:33.019 --> 00:09:36.600
it's going to assume these
are the props that you're getting.

133
00:09:36.600 --> 00:09:38.826
The second one that we're not giving,

134
00:09:38.826 --> 00:09:41.560
these are the states that you expect,
right?

135
00:09:41.560 --> 00:09:43.959
So they're basically like just
parameters to a function.

136
00:09:48.818 --> 00:09:50.040
That makes sense, hopefully.

137
00:09:55.160 --> 00:09:59.226
&gt;&gt; Brandon's auto important for
you to see the screen.

138
00:09:59.226 --> 00:10:01.450
&gt;&gt; Yeah.
I didn't show you that in the last one.

139
00:10:01.450 --> 00:10:03.580
Let's just go,
I think it was in here that I did that.

140
00:10:05.090 --> 00:10:07.320
Well, I'll just I'll show you down here.

141
00:10:07.320 --> 00:10:11.580
Let's say I needed to look at,
I have a keyboard event.

142
00:10:11.580 --> 00:10:14.079
So you can see there I have,
as soon as I start typing this,

143
00:10:14.079 --> 00:10:16.990
it's actually looking at all the types
that I have available to me.

144
00:10:16.990 --> 00:10:19.746
If I just go down to keyboard event and
I hit Enter,

145
00:10:19.746 --> 00:10:24.290
that gave me the wrong type of keyboard
event that's gonna be the the browser one.

146
00:10:24.290 --> 00:10:30.082
But there's one that comes from,
when it comes from react,

147
00:10:30.082 --> 00:10:35.890
what's another thing that comes
from react like use state.

148
00:10:37.520 --> 00:10:39.634
So here if I type use state and
then I hit Enter,

149
00:10:39.634 --> 00:10:42.420
notice that it actually just
pulls that out of react for me.

150
00:10:42.420 --> 00:10:46.510
So that's something that VS code
just kinda does for you nicely.

151
00:10:46.510 --> 00:10:49.806
So if you know something that you have it,
you have access to it,

152
00:10:49.806 --> 00:10:52.921
you can just start typing it and
you hit enter on it and react or

153
00:10:52.921 --> 00:10:54.773
type VS code will pull it in for you.

154
00:10:56.372 --> 00:10:59.300
Good question, I use it all the time.

155
00:10:59.300 --> 00:11:01.070
I get super lazy and
I don't like typing things.

