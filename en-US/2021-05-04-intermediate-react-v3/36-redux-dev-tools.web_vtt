WEBVTT

1
00:00:00.230 --> 00:00:07.031
So, one of the cool things here that
I quite like about this approach is,

2
00:00:07.031 --> 00:00:12.826
if I change this to be dog, and
I submit, and I go look at Luna,

3
00:00:12.826 --> 00:00:19.640
and then I go back to the homepage,
notice that dog is still here.

4
00:00:19.640 --> 00:00:23.390
That's because now we have a universal
store that's surviving between page loads,

5
00:00:23.390 --> 00:00:26.513
whereas before everything was being
stored in the component state, so

6
00:00:26.513 --> 00:00:28.870
that means it's going to
survive between payloads.

7
00:00:28.870 --> 00:00:31.849
We could have done this with
React Context, as well, and

8
00:00:31.849 --> 00:00:33.891
that would have been great.

9
00:00:33.891 --> 00:00:36.071
And that's Redux.

10
00:00:36.071 --> 00:00:38.525
Hopefully, this was an adventure for you.

11
00:00:38.525 --> 00:00:40.290
Hopefully, you can see the value in this.

12
00:00:40.290 --> 00:00:43.590
So, let's go ahead and
take a look at the Redux dev tools.

13
00:00:43.590 --> 00:00:48.840
You can install them, and
just search for Redux dev tools,

14
00:00:48.840 --> 00:00:53.355
and you can start from your
favorite extension, or

15
00:00:53.355 --> 00:00:56.304
your favorite extension store.

16
00:00:56.304 --> 00:00:57.401
Now I can see all of the actions
being submitted here.

17
00:00:57.401 --> 00:01:00.281
In fact, let's just refresh the page,

18
00:01:00.281 --> 00:01:05.801
you can see there's an Init action here,
which happens, and that's cool.

19
00:01:05.801 --> 00:01:08.520
And I can see what the action was,
I can see what the state was.

20
00:01:08.520 --> 00:01:10.800
There's a lot of information
that will show me.

21
00:01:10.800 --> 00:01:14.496
And then, if I submit this to be cat,
notice I gotta change breed,

22
00:01:14.496 --> 00:01:17.334
and a change animal, and
I can look at the action and

23
00:01:17.334 --> 00:01:20.969
what they looked at, and
all that kind of stuff, that's great.

24
00:01:20.969 --> 00:01:24.288
So, let's just type in here,
delete, right?

25
00:01:24.288 --> 00:01:29.089
And I cited a change location that
deleted all the Seattle, Washington,

26
00:01:29.089 --> 00:01:30.722
that showed me the diff.

27
00:01:30.722 --> 00:01:35.594
But what's kind of cool about this is,
you can actually say, hey,

28
00:01:35.594 --> 00:01:37.657
what happens if I skip this?

29
00:01:37.657 --> 00:01:44.247
So, let's change this to be medium.

30
00:01:44.247 --> 00:01:47.409
Yeah, we have a bug there, that's okay.

31
00:01:47.409 --> 00:01:51.784
I wanna see what happens if everything
else happen the same way, but

32
00:01:51.784 --> 00:01:55.470
I wanted to skip what I
deleted the location.

33
00:01:55.470 --> 00:01:58.276
Well, the Redux dev tools
allow you to do that.

34
00:01:58.276 --> 00:02:00.936
And I can say, skip that.

35
00:02:00.936 --> 00:02:04.242
So, it keeps everything else,
but it goes back in time and

36
00:02:04.242 --> 00:02:06.606
then replays all those actions in order.

37
00:02:06.606 --> 00:02:09.050
This is called time traveling debugging.

38
00:02:09.050 --> 00:02:10.487
So, I can actually say, you know what?

39
00:02:10.487 --> 00:02:15.991
Come back here, jump back here, what does
this look like at this point in time?

40
00:02:15.991 --> 00:02:19.829
And see if this jumps back to this
one where it was medium orchid,

41
00:02:19.829 --> 00:02:23.823
and then I can jump forward to say,
okay, now jump forward again.

42
00:02:23.823 --> 00:02:26.293
Okay, now play, slowly over time,

43
00:02:26.293 --> 00:02:31.400
there's a bunch of really cool time
traveling debugging things you can do.

44
00:02:31.400 --> 00:02:34.833
One of the cool things that I've seen
people do is, if someone's app crashes,

45
00:02:34.833 --> 00:02:38.492
it'll automatically dump the Redux state
and send it to the error logging service.

46
00:02:38.492 --> 00:02:41.833
Obviously, there's PII kind
of concerns there, so,

47
00:02:41.833 --> 00:02:43.832
you wanna be careful about that.

48
00:02:43.832 --> 00:02:46.847
Like GDPR, that kind of stuff
is what I'm talking about.

49
00:02:46.847 --> 00:02:51.118
But then, the developers can step by piece
by piece of what the user did to cause

50
00:02:51.118 --> 00:02:53.200
the app crash, which is pretty cool.

51
00:02:55.010 --> 00:02:59.145
One more thing I wanted to show you,
if I click here on breed,

52
00:02:59.145 --> 00:03:01.509
I can actually click Test, here.

53
00:03:01.509 --> 00:03:06.471
You will, actually, automatically
generate a user test or a unit test for

54
00:03:06.471 --> 00:03:11.695
that particular action, from going from
that state to the next state for you.

55
00:03:11.695 --> 00:03:18.050
I mean, things that generate tests for
me, I'm a big fan of that, right?

56
00:03:18.050 --> 00:03:23.948
And there's several templates, there's
just Tape, Ava, and so on and so forth.

57
00:03:23.948 --> 00:03:29.881
So, yeah,
it'll generate unit tests for you.

58
00:03:31.571 --> 00:03:35.350
Cool, any questions about Redux?

59
00:03:35.350 --> 00:03:38.040
I think that's all we're going
to talk about today for Redux,

60
00:03:38.040 --> 00:03:39.369
we talked about the dev tools.

61
00:03:39.369 --> 00:03:43.125
If you want a deeper dive, definitely,
check out Steve's course on it,

62
00:03:43.125 --> 00:03:43.981
it's awesome.

63
00:03:43.981 --> 00:03:49.181
&gt;&gt; When we dispatch, how Redux gonna

64
00:03:49.181 --> 00:03:53.849
know the right reducer to use?

65
00:03:53.849 --> 00:03:58.500
&gt;&gt; So, how does it get from me dispatching
it, to the root reducer handling it?

66
00:03:58.500 --> 00:04:03.128
So, when I call dispatch, so,
I use dispatch here, gives me back

67
00:04:03.128 --> 00:04:08.430
a function here called dispatch,
which then connects me to Redux, right?

68
00:04:08.430 --> 00:04:11.748
So, when I say change animal and
I dispatch that,

69
00:04:11.748 --> 00:04:17.206
that has been handed over to Redux, which
then hands it over to the route reducer.

70
00:04:17.206 --> 00:04:20.066
So, Redux takes it in via
this dispatch function,

71
00:04:20.066 --> 00:04:22.268
and then hands it to the route reducer.

72
00:04:22.268 --> 00:04:26.831
So, you don't call it,
Redux calls the route reducer for you.

73
00:04:26.831 --> 00:04:28.535
There's still kind of a bug
in this implementation.

74
00:04:28.535 --> 00:04:32.183
What I need to do is, I need to
check that the animal didn't change,

75
00:04:32.183 --> 00:04:33.406
I didn't check that.

76
00:04:33.406 --> 00:04:36.349
But we need to check that the animal
didn't change here in that

77
00:04:36.349 --> 00:04:39.590
handleAnimalChange, cuz those
change events will still happen.

78
00:04:40.930 --> 00:04:44.293
So, I'd have to say, if animal
changed from the last time you see it,

79
00:04:44.293 --> 00:04:46.870
then do that, but
I'll let you do it on your own time.

