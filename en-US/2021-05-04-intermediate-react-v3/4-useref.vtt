WEBVTT

1
00:00:01.190 --> 00:00:06.293
It's going to use ref which is we're gonna

2
00:00:06.293 --> 00:00:12.400
go to the ref component
which is this one down here.

3
00:00:13.700 --> 00:00:15.900
This is kind of a funny one.

4
00:00:15.900 --> 00:00:20.160
We talked about it a little bit in
the complete intro to react vi six.

5
00:00:20.160 --> 00:00:23.388
Towards the end, in fact is literally
the last section the portals and refs.

6
00:00:23.388 --> 00:00:28.847
So if you have a piece of
state that you want to survive

7
00:00:28.847 --> 00:00:35.190
past various different rendering cycles,
you can use ref.

8
00:00:35.190 --> 00:00:38.612
So in the complete intro to react
version six, we use that with modals,

9
00:00:38.612 --> 00:00:40.620
right to keep track of a div.

10
00:00:40.620 --> 00:00:44.996
So it's basically a container that
doesn't get modified from the react

11
00:00:44.996 --> 00:00:49.460
lifecycle methods but But it actually
just kind of lives outside of that.

12
00:00:51.060 --> 00:00:53.990
So, I just wanted to show
you the difference here.

13
00:00:55.000 --> 00:00:58.454
We have this num ref here,
which starts at zero and

14
00:00:58.454 --> 00:01:02.660
we also have a piece of state
here that starts at zero as well.

15
00:01:04.810 --> 00:01:09.272
Every time that someone calls, presses
this button here called delay logging,

16
00:01:09.272 --> 00:01:12.158
it's going to call a function
that's going to say,

17
00:01:12.158 --> 00:01:15.390
here's what my current state is and
here is what my ref is.

18
00:01:17.910 --> 00:01:22.765
Notice those are different numbers so
here I say set state state

19
00:01:22.765 --> 00:01:27.080
number plus one and
then I say num ref current plus plus.

20
00:01:28.270 --> 00:01:33.060
So every ref inside of it has
exactly one thing it has.

21
00:01:34.110 --> 00:01:37.930
Num ref.current.

22
00:01:37.930 --> 00:01:41.467
And this is using the property of
JavaScript that if I have a handle on

23
00:01:41.467 --> 00:01:45.330
an object that it doesn't change,
right, the object is stays the same.

24
00:01:45.330 --> 00:01:49.000
So you're gonna be handed back
the same object every single time.

25
00:01:49.000 --> 00:01:53.923
In fact, if I say,
console.log How would you do that, but

26
00:01:53.923 --> 00:01:59.932
if you checked between renders that
if the previous number of current and

27
00:01:59.932 --> 00:02:04.659
the next number of current
are precisely the same thing,

28
00:02:04.659 --> 00:02:07.930
they would be exactly the same object.

29
00:02:07.930 --> 00:02:09.970
Right?
Not even just like equal in value but

30
00:02:09.970 --> 00:02:12.810
also equal that they are identically.

31
00:02:12.810 --> 00:02:15.290
Identities is referring to the same thing.

32
00:02:16.630 --> 00:02:23.010
So this comes in handy in
a very specific few cases.

33
00:02:23.010 --> 00:02:27.639
So again, this comes in handy for things
like holding on to a div between render

34
00:02:27.639 --> 00:02:32.550
cycles because sometimes I need to dispose
of that div later, right or I need to hold

35
00:02:32.550 --> 00:02:36.710
on to a subscription so that later
I can dispose of that subscription.

36
00:02:39.450 --> 00:02:42.452
In this particular case, I want to
show you how these look end up looking

37
00:02:42.452 --> 00:02:44.455
different because if you
press delay logging,

38
00:02:44.455 --> 00:02:47.480
what this is gonna do is it's going
to schedule a timeout here, right?

39
00:02:47.480 --> 00:02:52.040
You can see that and then it's going
to alert What is the state number?

40
00:02:52.040 --> 00:02:56.521
And what is the num ref current state
is actually going to change immediately

41
00:02:56.521 --> 00:02:58.770
because it's going to say set state.

42
00:03:00.060 --> 00:03:03.462
But this num ref or rad it's going to be
the other way around the state number

43
00:03:03.462 --> 00:03:06.648
is going to not have changed,
right because that's going to have been

44
00:03:06.648 --> 00:03:10.290
previously scheduled and
the number of current will have changed.

45
00:03:10.290 --> 00:03:14.708
So if I click delay logging here
Notice here on the page on the right,

46
00:03:14.708 --> 00:03:19.520
state and ref are one, but
here's a state zero and ref is one.

47
00:03:19.520 --> 00:03:23.500
That's because when it was scheduled
state number was zero, right?

48
00:03:25.050 --> 00:03:30.120
And so re renders and it immediately
renders and state is one and ref is one.

49
00:03:30.120 --> 00:03:32.931
But that's because ref has
already been advanced because I

50
00:03:32.931 --> 00:03:36.260
did that num current plus plus or
num ref current plus plus.

51
00:03:36.260 --> 00:03:40.024
And the state number stayed the same
because it's it's using closure to hold on

52
00:03:40.024 --> 00:03:41.270
the previous state of it.

53
00:03:41.270 --> 00:03:44.360
Now if you're looking this is
like why would I ever use this?

54
00:03:44.360 --> 00:03:48.916
The answer is not frequently I would say
most react applications probably don't

55
00:03:48.916 --> 00:03:51.180
need to use refs that frequently.

56
00:03:51.180 --> 00:03:53.270
However, when you need it
You desperately need it.

57
00:03:53.270 --> 00:03:57.510
So it actually is a tool that you probably
need to be peripherally aware of.

58
00:03:57.510 --> 00:04:01.905
Again, we saw that in a previous one with
our plugin the complete intro to react

59
00:04:01.905 --> 00:04:04.880
version 6,
because we had to have it for modals.

60
00:04:04.880 --> 00:04:06.995
So it makes sense.

61
00:04:06.995 --> 00:04:08.505
Does anyone have any questions about this?

62
00:04:10.954 --> 00:04:13.395
I mean, you can see here you can
make it really apparent here.

63
00:04:13.395 --> 00:04:17.073
This ref is one and the status four right
as you can actually if I clicked it

64
00:04:17.073 --> 00:04:19.805
several times in a row,
that's going to be updated.

65
00:04:19.805 --> 00:04:22.719
And if I click Oon a you'll have two,
Three, four, but

66
00:04:22.719 --> 00:04:25.210
it's just catching up
from the previous ones.

67
00:04:26.270 --> 00:04:30.708
&gt;&gt; If I put an object in useRef,
does ref contain a copy of an object or

68
00:04:30.708 --> 00:04:32.660
a reference to that object?

69
00:04:34.220 --> 00:04:34.820
&gt;&gt; It's good question.

70
00:04:34.820 --> 00:04:42.140
So if I say like Is it
a copy of this object?

71
00:04:42.140 --> 00:04:45.159
So the question is if I put
an object into the ref,

72
00:04:45.159 --> 00:04:49.450
does it contain a copy of the object or
is it actually the same object?

73
00:04:49.450 --> 00:04:51.840
Then the answer is it's
actually the same object.

74
00:04:51.840 --> 00:04:53.859
It does not do a deep copy for you,

75
00:04:53.859 --> 00:04:58.130
it's that you will actually be
holding on to that particular object.

76
00:04:59.790 --> 00:05:02.860
Yeah, just keep ref as a container.

77
00:05:02.860 --> 00:05:03.950
You can put anything in there.

78
00:05:03.950 --> 00:05:06.812
You can put objects, you can put
functions, you can put libraries,

79
00:05:06.812 --> 00:05:10.263
I don't know why you would use it for any,
like libraries and things like that, but

80
00:05:10.263 --> 00:05:12.110
you could definitely use it for functions.

81
00:05:12.110 --> 00:05:13.210
I can see reasons to do that.

82
00:05:16.440 --> 00:05:17.170
It's just a container.

83
00:05:17.170 --> 00:05:20.498
You can stick whatever you want in
the container as you can see and

84
00:05:20.498 --> 00:05:24.379
again in the the complete intro to react
version six we put literally a div,

85
00:05:24.379 --> 00:05:26.904
right like we put an HTML
object into the the ref so

86
00:05:26.904 --> 00:05:30.623
that we could reference it later so
that we could remove it from the DOM.

