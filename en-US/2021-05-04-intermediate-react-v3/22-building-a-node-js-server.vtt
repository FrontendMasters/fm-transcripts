WEBVTT

1
00:00:00.707 --> 00:00:04.288
So if this is your first time writing
node, hopefully it's a long and

2
00:00:04.288 --> 00:00:05.720
fruitful journey for you.

3
00:00:05.720 --> 00:00:07.114
I love nodeJS.

4
00:00:07.114 --> 00:00:08.810
It's probably my favorite
thing to write day to day.

5
00:00:09.820 --> 00:00:14.215
And there's great NodeJS code or
NodeJS courses on front of masters most

6
00:00:14.215 --> 00:00:17.540
specifically, I really
like Scott Master's stuff.

7
00:00:21.250 --> 00:00:24.401
All right, so
we're gonna make a folder called server.

8
00:00:27.740 --> 00:00:31.080
So we have our source,
which is gonna be the front end code and

9
00:00:31.080 --> 00:00:34.027
our server which is gonna be
the server and go ahead and

10
00:00:34.027 --> 00:00:37.584
make a file called index dot j s
inside of your server directory.

11
00:00:39.748 --> 00:00:43.860
And here, you and I are just gonna code
up a quick little note server together.

12
00:00:43.860 --> 00:00:47.409
If this is your first time running node,
no big deal.

13
00:00:47.409 --> 00:00:48.530
We'll do it all together.

14
00:00:48.530 --> 00:00:51.529
If you just follow along,
you'll you'll get exactly what you need.

15
00:00:51.529 --> 00:00:58.612
So we're using Express so
make sure you've installed Express.

16
00:00:58.612 --> 00:01:02.540
So npm install, Express.

17
00:01:02.540 --> 00:01:06.507
So npm install Express at 4.17.1,

18
00:01:06.507 --> 00:01:11.152
that should get you a copy
of Express that which is

19
00:01:11.152 --> 00:01:15.929
like the most common way
of doing nodeJS servers.

20
00:01:17.840 --> 00:01:21.307
And then here when do import,

21
00:01:21.307 --> 00:01:27.415
Express from Express,
import, render to string.

22
00:01:27.415 --> 00:01:32.497
And again, remember we're doing this
with Babel running all of our node code.

23
00:01:32.497 --> 00:01:36.160
So we can use the ES modules
with impunity, right?

24
00:01:36.160 --> 00:01:37.458
Because it's just not a big deal.

25
00:01:37.458 --> 00:01:40.765
It's gonna we're gonna
go through Babel anyway.

26
00:01:40.765 --> 00:01:45.622
From ReactDOM slash server,

27
00:01:45.622 --> 00:01:49.897
import static router from

28
00:01:49.897 --> 00:01:55.919
React Router DOM import Fs from Fs and

29
00:01:55.919 --> 00:02:02.730
import app from dot dot slash source app.

30
00:02:03.780 --> 00:02:08.182
These are all of our imports render to
string is basically instead of doing

31
00:02:08.182 --> 00:02:09.176
lrender to DOM or

32
00:02:09.176 --> 00:02:13.655
render hydrate all those decisions that
give you back a string of the HTML.

33
00:02:13.655 --> 00:02:18.472
Static Router is a special component,
it's a special router from

34
00:02:18.472 --> 00:02:23.733
React Router DOM that doesn't depend
on the browser API is being there.

35
00:02:23.733 --> 00:02:26.692
This is file system,
it's just a node built in and

36
00:02:26.692 --> 00:02:29.940
then this is our react app
here that we coded together.

37
00:02:31.670 --> 00:02:38.751
Okay, let's grab the port which is gonna
be either process.m.port, or 3000.

38
00:02:38.751 --> 00:02:42.032
I just do this because if you're
gonna deploy this to something like

39
00:02:42.032 --> 00:02:43.472
Azure App Service or Heroku or

40
00:02:43.472 --> 00:02:47.780
something like that, they will give you
the port via an environmental variable.

41
00:02:47.780 --> 00:02:50.265
And if you don't provide it,
then I'll just set it to 3000.

42
00:02:52.241 --> 00:02:57.786
Okay, const html equals
fs dot read file sync.

43
00:02:57.786 --> 00:03:02.159
This is going to read and then block
until this is finished reading so

44
00:03:02.159 --> 00:03:06.850
don't do this in your note server but
what during startup, it's okay.

45
00:03:09.030 --> 00:03:12.723
So we're gonna read dist
slash index dot HTML.

46
00:03:12.723 --> 00:03:15.557
And we're gonna say to string, so

47
00:03:15.557 --> 00:03:21.537
this is going to go read our built that
you can see here I already built it.

48
00:03:21.537 --> 00:03:25.920
It's gonna go read this file, but
it's going to split here on not rendered.

49
00:03:25.920 --> 00:03:30.531
So this is all gonna be in part one,
this is all gonna be in part two.

50
00:03:30.531 --> 00:03:32.934
So let's see what that looks like.

51
00:03:32.934 --> 00:03:38.834
So HTML right now it's just
this entire document and

52
00:03:38.834 --> 00:03:43.528
then we're gonna split that into parts by

53
00:03:43.528 --> 00:03:47.700
doing html.split on not rendered.

54
00:03:48.910 --> 00:03:51.840
Which again if you look here,
not rendered is gonna give me,

55
00:03:51.840 --> 00:03:53.402
the first part is gonna be this.

56
00:03:53.402 --> 00:03:56.820
So zero is gonna be that,
and one is gonna be that.

57
00:03:58.710 --> 00:04:02.626
And then we can put our application here,
right?

58
00:04:02.626 --> 00:04:05.645
Then we have complete HTML when
we send that down to the client.

59
00:04:09.750 --> 00:04:14.044
Okay const app is gonna be a new
Express app to start that up.

60
00:04:14.044 --> 00:04:17.624
app.us we have to serve dist.

61
00:04:17.624 --> 00:04:19.870
Slash dist is gonna be served statically.

62
00:04:19.870 --> 00:04:23.883
So, serve all of our HTML,
CSS JavaScript, static

63
00:04:27.970 --> 00:04:31.327
Dist, so this directory here
that's gonna be coming from dist.

64
00:04:33.995 --> 00:04:39.044
App.use, It's gonna

65
00:04:39.044 --> 00:04:44.220
be a handle that takes in req and
res, request and response.

66
00:04:44.220 --> 00:04:47.999
Here we're gonna do first thing,

67
00:04:47.999 --> 00:04:53.090
const static context
equals an empty object.

68
00:04:53.090 --> 00:04:55.563
And we'll use this in just a second.

69
00:04:55.563 --> 00:05:00.498
And then we're gonna say
const react mark-up equals,

70
00:05:03.832 --> 00:05:07.126
And we're gonna put in
here a static router.

71
00:05:07.126 --> 00:05:12.613
With URL equals rec dot URL, so
the request URL that the user asked for,

72
00:05:12.613 --> 00:05:17.462
and then we're gonna say the context
here is gonna be the static

73
00:05:17.462 --> 00:05:21.150
context object that we're
gonna pass into it.

74
00:05:21.150 --> 00:05:22.703
Now why do we do this?

75
00:05:22.703 --> 00:05:25.770
Well, what happens if we ask for
a route that doesn't exist?

76
00:05:25.770 --> 00:05:29.749
We need to get that to the user as a 404,
right?

77
00:05:29.749 --> 00:05:34.333
Otherwise, everything's gonna be a 200
from this response, that's a problem,

78
00:05:34.333 --> 00:05:37.535
because we wanna be able to give
appropriate status codes for

79
00:05:37.535 --> 00:05:39.440
users not finding the right thing.

80
00:05:41.180 --> 00:05:43.416
Okay, and then in here,
we're just gonna render our app.

81
00:05:46.950 --> 00:05:49.217
Now we're gonna say res dot status.

82
00:05:49.217 --> 00:05:52.540
This is where you send a 400 or
something like that,

83
00:05:52.540 --> 00:05:56.960
where they're gonna say static dot
com static context dot status code.

84
00:05:58.410 --> 00:06:02.381
So this is gonna have a now that
this has been through static router,

85
00:06:02.381 --> 00:06:06.433
we can even say that like this
is gonna be a 400 or 404 or 500.

86
00:06:06.433 --> 00:06:08.850
Anything that the client is telling.

87
00:06:08.850 --> 00:06:11.501
This is what I wanted to
send back to the user.

88
00:06:11.501 --> 00:06:15.960
Or this can be a 200 as like 200 okay.

89
00:06:15.960 --> 00:06:19.726
Now this is important just because
if Google is crawling your site, and

90
00:06:19.726 --> 00:06:23.679
they try and crawl something that
doesn't exist, if you give it a 200,

91
00:06:23.679 --> 00:06:27.667
Google's gonna say, great,
here's this page that's on your website.

92
00:06:27.667 --> 00:06:31.534
But if you give it a 404, Google is gonna
be, I'm not gonna index this, right?

93
00:06:31.534 --> 00:06:33.460
That's probably the most important
reason why you wanna do that.

94
00:06:35.690 --> 00:06:39.418
Okay, res dot send them we're
gonna do template string.

95
00:06:39.418 --> 00:06:42.131
We're gonna send the first part of it and
so parts zero,

96
00:06:42.131 --> 00:06:44.350
that's the first part of the HTML.

97
00:06:44.350 --> 00:06:49.175
We're gonna send the markup,
so render to string,

98
00:06:49.175 --> 00:06:53.575
react markup and
then we're gonna do part one.

99
00:06:57.720 --> 00:07:00.050
And this is gonna be our
total complete response.

100
00:07:02.840 --> 00:07:05.510
Here then we say,
res dot end like that and say okay.

101
00:07:05.510 --> 00:07:06.680
I've wrapped everything up.

102
00:07:06.680 --> 00:07:08.632
I'm done, send the response to the user.

103
00:07:11.308 --> 00:07:15.405
Lastly here we're gonna say,
console dot log

104
00:07:19.682 --> 00:07:24.778
Listening on http://local host.

105
00:07:26.635 --> 00:07:28.115
Con port.

106
00:07:28.115 --> 00:07:29.678
This is just so I can remember.

107
00:07:29.678 --> 00:07:32.013
It also gives me something I can just
click on directly in my terminal,

108
00:07:32.013 --> 00:07:33.010
that will take me to the page.

109
00:07:34.770 --> 00:07:38.710
And then I'm gonna say
app dot listen on port.

110
00:07:41.704 --> 00:07:47.173
All right,
all of this should work now in theory.

111
00:07:47.173 --> 00:07:48.820
Cross your fingers.

112
00:07:48.820 --> 00:07:52.062
npm run, start,
this is gonna build the client.

113
00:07:52.062 --> 00:07:54.260
It's gonna build the server, and
then it's gonna start the server.

114
00:07:56.640 --> 00:08:00.407
So there it goes parcel builds the client,
builds the server and

115
00:08:00.407 --> 00:08:02.655
now we're running on port 3000.

116
00:08:02.655 --> 00:08:07.522
And you can see now,
this renders immediately.

117
00:08:07.522 --> 00:08:12.240
Very quickly do we get a response back but
here's something interesting.

118
00:08:13.300 --> 00:08:14.899
If I view page source,

119
00:08:14.899 --> 00:08:20.044
notice that this is actually coming
back with complete markup, right.

120
00:08:20.044 --> 00:08:24.730
It has the options here.

121
00:08:24.730 --> 00:08:28.823
This has the theme this or this is all
the stuff that react was rendering for

122
00:08:28.823 --> 00:08:29.956
us before, right?

123
00:08:29.956 --> 00:08:35.330
This is all coming back as complete
markup from the server response.

124
00:08:35.330 --> 00:08:40.794
What's even cool about this,
is I can come in and

125
00:08:40.794 --> 00:08:44.537
say, where's my options here?

126
00:08:44.537 --> 00:08:47.020
This one, settings.

127
00:08:47.020 --> 00:08:48.327
There we go.

128
00:08:48.327 --> 00:08:51.930
If I really wanted to,
you can actually disable JavaScript.

129
00:08:51.930 --> 00:08:54.045
So I'm going to temporarily
disable JavaScript here.

130
00:08:54.045 --> 00:08:55.179
So disable JavaScript.

131
00:08:56.980 --> 00:08:58.100
Now we'll make the request, right?

132
00:08:58.100 --> 00:09:00.010
Because react will never bootstrap here.

133
00:09:00.010 --> 00:09:04.000
But notice I'm still getting a functional
page at the end of this, right?

134
00:09:04.000 --> 00:09:05.978
Despite the fact that
I disabled JavaScript,

135
00:09:05.978 --> 00:09:09.520
that's because it's complete
markup when it comes to the user.

136
00:09:09.520 --> 00:09:13.086
So their time to first paint
is gonna be extremely quickly.

137
00:09:13.086 --> 00:09:18.220
It's like happened very quickly, but
we've delayed maybe a couple milliseconds,

138
00:09:18.220 --> 00:09:21.910
maybe a second at most,
their time to interactive, right?

139
00:09:21.910 --> 00:09:25.406
Because we spent a bunch of
time rendering on the server.

140
00:09:25.406 --> 00:09:29.253
Now that user is gonna have to wait just
a tiny bit longer to get their JavaScript

141
00:09:29.253 --> 00:09:33.190
payload for them to bootstrap and
hydrate the application.

142
00:09:33.190 --> 00:09:34.344
So that's your trade off here.

143
00:09:34.344 --> 00:09:35.856
You're moving up to
time to first paint and

144
00:09:35.856 --> 00:09:37.540
you're moving back your
time to interactive.

145
00:09:39.040 --> 00:09:40.590
Usually, it's probably worth it.

146
00:09:40.590 --> 00:09:41.090
I'll say.

147
00:09:42.220 --> 00:09:45.272
There's a lot of research that a user
can't decide what to do in less than

148
00:09:45.272 --> 00:09:47.636
like a second and a half or
something like that, right?

149
00:09:47.636 --> 00:09:49.669
Even if they're super
familiar with your website,

150
00:09:49.669 --> 00:09:52.240
they're time to move the mouse and
click on the thing.

151
00:09:52.240 --> 00:09:54.788
You can almost always beat them, right?

152
00:09:54.788 --> 00:09:58.632
In their time to comprehend and
then click on something.

153
00:09:58.632 --> 00:10:01.090
But what I wanna say is measure it.

154
00:10:01.090 --> 00:10:01.869
You should know, right?

155
00:10:01.869 --> 00:10:04.608
You should do user studies,
you should instrument your application,

156
00:10:04.608 --> 00:10:07.770
these are all things that you should be
interested in finding out about your user.

