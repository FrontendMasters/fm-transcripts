WEBVTT

1
00:00:00.370 --> 00:00:03.250
Let's talk about memo or useMemo rather.

2
00:00:04.340 --> 00:00:09.464
So, we're gonna go to memo.js here,
and we're going to,

3
00:00:13.398 --> 00:00:15.539
Do the useMemo as example here.

4
00:00:19.318 --> 00:00:20.151
Okay?

5
00:00:20.151 --> 00:00:24.018
So, there's kind of two things going on
here, in this useMemo for example, if you

6
00:00:24.018 --> 00:00:27.855
click on the use memo header, it'll go
from red to green, kind of like you state.

7
00:00:27.855 --> 00:00:31.175
And then we have the, Fibonacci sequence.

8
00:00:31.175 --> 00:00:36.431
Now, I know that's a math thing, you don't
have to care about it, but just suffice to

9
00:00:36.431 --> 00:00:41.831
say that computing the Fibonacci sequence
recursively is computationally expensive,

10
00:00:41.831 --> 00:00:47.100
which is just to say like, it's expensive
to try and compute the Fibonacci sequence.

11
00:00:47.100 --> 00:00:52.032
So, if I keep clicking this,
once it gets to about, I don't know,

12
00:00:52.032 --> 00:00:55.690
30 it starts getting like really slow.

13
00:00:55.690 --> 00:00:58.674
I've noticed that this
is getting pretty slow,

14
00:00:58.674 --> 00:01:02.700
each time I click it's taking longer,
and longer, and longer.

15
00:01:02.700 --> 00:01:07.649
And it's like exponentially gonna grow of
how long it takes to compute Fibonacci

16
00:01:07.649 --> 00:01:08.750
of 40, right?

17
00:01:10.970 --> 00:01:14.570
So again, you don't have to care about
necessarily how it works, but just know

18
00:01:14.570 --> 00:01:19.060
that it's expensive, and we don't want to
re-render it every single time, right.

19
00:01:19.060 --> 00:01:23.933
So, if I come down here to this memo here,
right?

20
00:01:23.933 --> 00:01:27.910
This fib here is very expensive for
us to compute and

21
00:01:27.910 --> 00:01:34.120
if I recompute it every single time,
it's going to make this very, very slow.

22
00:01:36.561 --> 00:01:38.652
So, I wanna make it so that this in fact,

23
00:01:38.652 --> 00:01:41.744
let's just see what it looks
like if I don't do it this way.

24
00:01:46.484 --> 00:01:49.639
We're gonna copy,
we're gonna make that, that way.

25
00:01:52.293 --> 00:01:55.760
I'm just gonna make this Fibonacci.

26
00:01:55.760 --> 00:01:57.773
So, this is gonna get
computed every single time.

27
00:02:02.871 --> 00:02:06.570
So, if I put it like this, and let's
just put this immediately like it's 35.

28
00:02:09.546 --> 00:02:10.926
So, if I get this up to like 40, right?

29
00:02:10.926 --> 00:02:12.920
Well, this is really slow.

30
00:02:12.920 --> 00:02:17.345
Now if I start clicking on this use memo,
notice it takes a really long time for

31
00:02:17.345 --> 00:02:19.020
that to change colors.

32
00:02:19.020 --> 00:02:23.180
So, I click now, wait,
and it changes, right?

33
00:02:23.180 --> 00:02:25.390
That sucks, right?

34
00:02:25.390 --> 00:02:28.945
Just changing a color should
not take that long to do So

35
00:02:28.945 --> 00:02:31.950
that's where use memo
comes into play here.

36
00:02:31.950 --> 00:02:35.181
I can basically say like, hey,
if this number hasn't changed,

37
00:02:35.181 --> 00:02:39.740
do not recompute it, it's very expensive,
I would not like you to do that.

38
00:02:39.740 --> 00:02:44.262
So, if I change this back to this,
we'll just put this at 40.

39
00:02:48.263 --> 00:02:52.204
It's gonna take a while to re-render the
page, cuz obviously that's very expensive.

40
00:02:54.176 --> 00:02:57.975
Now I can just click back and forth on
this, and it's no problem whatsoever

41
00:02:57.975 --> 00:03:02.210
because it's saying, hey, if num doesn't
change, don't touch this, right?

42
00:03:02.210 --> 00:03:04.360
Just give me back the same
number that I gave it last time.

43
00:03:05.790 --> 00:03:08.993
And then as soon as num changes,
as soon as I click plus here again,

44
00:03:08.993 --> 00:03:11.355
then it's gonna go back and
re compute it again.

45
00:03:13.390 --> 00:03:15.370
So, this is a performance optimization.

46
00:03:15.370 --> 00:03:19.002
Again, only use this when you
actually already have a problem,

47
00:03:19.002 --> 00:03:21.550
don't preemptively use this, right?

48
00:03:21.550 --> 00:03:25.152
So, wait until you have a Fibonacci
of 41 problem before you go in and

49
00:03:25.152 --> 00:03:29.380
throw in a used memo,because this just
makes this code less easy to read, right?

50
00:03:29.380 --> 00:03:32.234
If you look at line 14
versus line 15 here,

51
00:03:32.234 --> 00:03:34.728
which of these is easier to understand?

52
00:03:38.589 --> 00:03:41.020
There you go, 14 or 15.

53
00:03:41.020 --> 00:03:43.610
Obviously 14,
it's just more succinct, right?

54
00:03:43.610 --> 00:03:45.661
It obviously just like
it's the Fibonacci number.

55
00:03:45.661 --> 00:03:48.682
Here, I have to look like, okay,
we're memorizing it, you have to pass in

56
00:03:48.682 --> 00:03:52.150
a function, you have to give it like some
sort of values to watch, blah, blah, blah.

57
00:03:54.420 --> 00:03:56.757
But when you're calculating
Fibonacci of 40,

58
00:03:56.757 --> 00:03:58.990
you should definitely
do something like this.

59
00:04:02.250 --> 00:04:05.020
So, let's talk about that for
just a second.

60
00:04:05.020 --> 00:04:06.980
What exactly is going on here?

61
00:04:09.440 --> 00:04:14.385
What useMemo does is basically you give
it a function and you're gonna say,

62
00:04:14.385 --> 00:04:18.650
only run this function,
this one here, whenever this changes.

63
00:04:18.650 --> 00:04:22.940
So, whenever num changes,
then you can go ahead and run useMemo.

64
00:04:22.940 --> 00:04:28.370
But if this was 40 last time, and
it's 40 now the last answer was accurate.

65
00:04:28.370 --> 00:04:29.440
Just go ahead and leave it at that.

66
00:04:34.020 --> 00:04:37.650
And again, you really only use this for
performance.

67
00:04:37.650 --> 00:04:40.790
That's the only reason you would use it.

68
00:04:40.790 --> 00:04:45.363
&gt;&gt; Brian, I don't understand what the
color change has to do with the changing

69
00:04:45.363 --> 00:04:47.560
of the Fibonacci number.

70
00:04:47.560 --> 00:04:48.181
&gt;&gt; Sure.
So,

71
00:04:48.181 --> 00:04:52.513
the question is like what is the number
the color change has to do with

72
00:04:52.513 --> 00:04:53.580
the Fibonacci?

73
00:04:54.620 --> 00:04:57.188
So, every time that I click on useMemo,

74
00:04:57.188 --> 00:05:01.580
when it changes color from red to green,
the state changes, right?

75
00:05:02.580 --> 00:05:05.320
So, whenever the state changes,
it's going to go back, and

76
00:05:05.320 --> 00:05:07.650
it's going to run this
entire function over again.

77
00:05:07.650 --> 00:05:11.452
And if I'm calculating the Fibonacci
sequence every single time,

78
00:05:11.452 --> 00:05:15.480
it's going to recalculate
the Fibonacci every single time.

79
00:05:15.480 --> 00:05:16.840
&gt;&gt; I have a question as well.

80
00:05:16.840 --> 00:05:22.530
So, for the useMemo, it seems like
it's very similar to the use effect.

81
00:05:22.530 --> 00:05:26.626
So, can you put something in the same way
with the use effect where it looks for

82
00:05:26.626 --> 00:05:30.911
like if the number changes, then it runs
it again, because it's re rendering or

83
00:05:30.911 --> 00:05:34.565
is that use effect that if it hits
that number if that number changes,

84
00:05:34.565 --> 00:05:37.427
it re renders the component
that way versus useMemo?

85
00:05:37.427 --> 00:05:40.870
Where it just reruns a function,
am I getting it right?

86
00:05:40.870 --> 00:05:41.430
&gt;&gt; Yeah.

87
00:05:42.680 --> 00:05:46.360
All right, so let me frame the question
in a slightly different way.

88
00:05:46.360 --> 00:05:48.000
Let me see if I answer your
question in the process.

89
00:05:48.000 --> 00:05:50.600
And if they don't,
then we'll chat a second.

90
00:05:50.600 --> 00:05:57.787
So, the question is, could I do this
same thing with use effect basically?

91
00:05:57.787 --> 00:05:58.848
The answer is,

92
00:05:58.848 --> 00:06:04.750
you could like basically move this into
an asynchronous computation of this.

93
00:06:04.750 --> 00:06:08.698
And then use effect to hook into that and
basically say, all right,

94
00:06:08.698 --> 00:06:11.399
I'm going to render this component once,
and

95
00:06:11.399 --> 00:06:16.190
then I'm going to schedule an effect to
run to go calculate the Fibonacci of 40.

96
00:06:16.190 --> 00:06:18.940
And then when that comes back,
I'm going to re render that.

97
00:06:18.940 --> 00:06:23.981
And then I'm going to have a ray there to
say like okay, only change, only scheduled

98
00:06:23.981 --> 00:06:28.738
as to rerun again, that's actually
probably even better than what's going on

99
00:06:28.738 --> 00:06:33.500
here because this gets hung up every
single time that I click plus here, right?

100
00:06:33.500 --> 00:06:37.360
And if I did that with an effect that
you actually wouldn't hang the UI there.

101
00:06:39.150 --> 00:06:43.843
So, you could do it that way, if you were,
okay, going into like an asynchronous

102
00:06:43.843 --> 00:06:47.620
pattern for this,
that is not always going to be possible.

103
00:06:47.620 --> 00:06:48.860
I do not think.

104
00:06:48.860 --> 00:06:50.224
&gt;&gt; Can you use the useMemo for

105
00:06:50.224 --> 00:06:54.254
like if you have an API call in here in
the same function in the same component,

106
00:06:54.254 --> 00:06:58.300
but you also have like something that
changes colors that affects the state.

107
00:06:58.300 --> 00:07:03.524
So, three renders it but hipness you do
not necessarily want to recall the API.

108
00:07:03.524 --> 00:07:05.580
It is a good question.

109
00:07:05.580 --> 00:07:07.490
So, if you have an API.

110
00:07:07.490 --> 00:07:11.268
Could you use useMemo to basically
not call the API every single time

111
00:07:11.268 --> 00:07:15.377
that something renders in that particular
case you should use an effect,

112
00:07:15.377 --> 00:07:18.436
use effect is specifically catered for
that use case.

113
00:07:18.436 --> 00:07:22.899
I'm not gonna say you couldn't figure out
how to make this work with useMemo but

114
00:07:22.899 --> 00:07:26.650
it would be really strange,
not something you can use a lot.

115
00:07:26.650 --> 00:07:30.663
In fact, in my years of writing react I
don't think I've actually professionally

116
00:07:30.663 --> 00:07:31.650
needed to use memo.

117
00:07:32.770 --> 00:07:36.534
I just did like, I learned about it
to teach this class basically and

118
00:07:36.534 --> 00:07:38.330
haven't really used much sense

