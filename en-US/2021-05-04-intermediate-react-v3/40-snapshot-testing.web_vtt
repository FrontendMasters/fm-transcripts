WEBVTT

1
00:00:00.320 --> 00:00:03.260
Just famously has a feature
called snapshot testing, and

2
00:00:03.260 --> 00:00:07.120
I'm going to leave to you if you
think this is a good idea or not.

3
00:00:07.120 --> 00:00:09.430
But we're gonna do it together so
that you can see what it's like.

4
00:00:11.050 --> 00:00:17.203
So create a new test here and
we're going to do this with results.js.

5
00:00:17.203 --> 00:00:22.129
So create a new file inside
of the test directory,

6
00:00:22.129 --> 00:00:24.840
call results.test.js.

7
00:00:27.510 --> 00:00:31.996
And we need to get one
more thing out of here,

8
00:00:31.996 --> 00:00:38.566
we're gonna say npm
install-Dreact-test-render dots.

9
00:00:38.566 --> 00:00:43.615
So, render that one always
throws me off @17.0.1,

10
00:00:43.615 --> 00:00:46.730
this is from the official react team.

11
00:00:46.730 --> 00:00:51.881
This is how they do, this is a test
render that they provide to you.

12
00:00:57.153 --> 00:01:00.958
Basically, we're gonna do is we're gonna
create low cost, low confidence tests.

13
00:01:04.302 --> 00:01:12.147
Okay, so now that we have that
we're gonna say import expect and

14
00:01:12.147 --> 00:01:16.520
test from at jest slash Global's.

15
00:01:18.760 --> 00:01:23.860
We're going to import create

16
00:01:23.860 --> 00:01:28.960
from react, test, render.

17
00:01:28.960 --> 00:01:37.329
And we're going to import
results from ../ results.

18
00:01:37.329 --> 00:01:45.870
Okay, we're gonna test first
of all that it renders.

19
00:01:45.870 --> 00:01:49.835
Let's just do a snapshot with no pets,
okay,

20
00:01:49.835 --> 00:01:55.340
async I guess I'm going to
disappear doesn't have to be async.

21
00:01:55.340 --> 00:02:00.754
What we're gonna do is we're gonna

22
00:02:00.754 --> 00:02:05.988
say const tree = create results,

23
00:02:05.988 --> 00:02:09.244
pets = empty array.

24
00:02:11.857 --> 00:02:15.690
And then,
we're gonna say two JSON like that.

25
00:02:15.690 --> 00:02:19.660
Okay, and then from here
we're gonna say expect tree.

26
00:02:19.660 --> 00:02:27.127
Too much snapshot Now
what did I just do here?

27
00:02:29.720 --> 00:02:34.665
Sometimes I ask myself that's What I did,

28
00:02:34.665 --> 00:02:37.430
this I need it from up here, there we go.

29
00:02:39.450 --> 00:02:44.307
So I render this out and then I call this
function called to match snapshot what

30
00:02:44.307 --> 00:02:49.013
this is gonna do the first time it runs,
it's going to dump out to a snapshot

31
00:02:49.013 --> 00:02:53.520
file and then in the future it's gonna
check if this has changed at all.

32
00:02:54.720 --> 00:02:56.680
So let's just run it so
you can see what that looks like.

33
00:02:58.000 --> 00:03:01.379
The first time is going to say
I'm gonna create a snapshot,

34
00:03:01.379 --> 00:03:03.920
did one snapshot written.

35
00:03:03.920 --> 00:03:09.720
So let's go take a look here in our test
directory, there's a snapshot directory.

36
00:03:09.720 --> 00:03:12.060
You'll never write to these but
you will check them into Git.

37
00:03:14.170 --> 00:03:20.010
This is what it looks like
when no pets found, right?

38
00:03:20.010 --> 00:03:25.000
This is exactly what I expect it to
look like, so that's what a snapshot is.

39
00:03:25.000 --> 00:03:26.639
This is the markup that I found, and

40
00:03:26.639 --> 00:03:30.270
in the future it's going to check
to see if this has changed, right?

41
00:03:30.270 --> 00:03:35.851
So if I go into results and
say no pet found,

42
00:03:35.851 --> 00:03:40.202
and I do that and I run this again.

43
00:03:42.670 --> 00:03:46.914
It's gonna fail, right,
because it is gonna say, Hey,

44
00:03:46.914 --> 00:03:50.160
I expected to see no pets found like this.

45
00:03:50.160 --> 00:03:52.180
And I found no pets found
with question marks.

46
00:03:54.160 --> 00:03:58.500
So it's just making sure that over time
your app is not changing unexpectedly.

47
00:03:58.500 --> 00:03:59.800
What if I expected this change?

48
00:03:59.800 --> 00:04:04.118
What you would do is you'd
come back in here and

49
00:04:04.118 --> 00:04:08.010
you would just say let's see it's good.

50
00:04:08.010 --> 00:04:16.010
Remember mpx Jess help is update
snapshots or dash you okay?

51
00:04:16.010 --> 00:04:20.951
So if I run npm run test
with nmp ---u like that.

52
00:04:20.951 --> 00:04:25.520
This is actually gonna say, hey,
I know that the snapshots are now correct,

53
00:04:25.520 --> 00:04:26.867
please rewrite them.

54
00:04:29.340 --> 00:04:33.572
And now if you go look in here, one at all
past it says one snapshot updated, and

55
00:04:33.572 --> 00:04:35.100
you can look in here.

56
00:04:35.100 --> 00:04:36.749
Now the question marks are in there.

57
00:04:39.881 --> 00:04:40.660
That's actually not what I want.

58
00:04:40.660 --> 00:04:46.430
So I'm gonna go erase those, but
that is what a snapshot test does for you.

59
00:04:48.210 --> 00:04:52.390
That's this, now, we wanna like
render it with some real pet data.

60
00:04:52.390 --> 00:04:57.870
So I provided you some
here in the snapshots.

61
00:04:57.870 --> 00:05:01.466
So if you wanna just import all of
this here, the other thing you can do

62
00:05:01.466 --> 00:05:05.765
is you can actually just grab it directly
out of the API, which is really easy too.

63
00:05:12.450 --> 00:05:16.490
It's the pets v2API/pets.

64
00:05:16.490 --> 00:05:21.400
So if you go to that, and
then you can just raw data here.

65
00:05:21.400 --> 00:05:25.614
We'll just grab all of the pets out
of here, whatever is easier for

66
00:05:25.614 --> 00:05:28.180
you, you can also grab it from my notes.

67
00:05:30.770 --> 00:05:33.620
I was just having a hard time doing
that on my little Mac trackpad here.

68
00:05:35.900 --> 00:05:39.330
So there's a bunch of places you could
put this as like a test data.js,

69
00:05:39.330 --> 00:05:42.690
you could put that in like it's
something you could import.

70
00:05:42.690 --> 00:05:47.420
I'm just gonna copy and paste it here,
I know it makes my tests really long.

71
00:05:49.070 --> 00:05:53.071
But it's that's okay with me const,

72
00:05:53.071 --> 00:05:57.332
what did I call this in here Pets = blah.

73
00:06:01.211 --> 00:06:05.905
And let's just go ahead and
get rid of all these line breaks so

74
00:06:05.905 --> 00:06:10.615
I'll find &gt; Shift+Enter, or
I can just copy one of these.

75
00:06:13.660 --> 00:06:21.223
Find all the line breaks, and
replace that with, Nothing.

76
00:06:26.114 --> 00:06:29.539
And that'll make it a little bit more
dense, and I just have to go back and

77
00:06:29.539 --> 00:06:33.379
add line breaks, but luckily prettier is
very good at adding line breaks for me.

78
00:06:34.540 --> 00:06:40.270
Okay, so now I can go down here to my
tests, and then I'm going to say test.

79
00:06:43.270 --> 00:06:47.212
I guess we need to, we're gonna need
a static router up here as well, so

80
00:06:47.212 --> 00:06:48.680
we're gonna say import.

81
00:06:50.440 --> 00:06:54.403
Create, right no,

82
00:06:54.403 --> 00:07:00.245
we don't, we don't need that,

83
00:07:00.245 --> 00:07:04.836
we need Static router from

84
00:07:04.836 --> 00:07:10.262
react router dom like that down

85
00:07:10.262 --> 00:07:15.490
here at the bottom test, that

86
00:07:17.693 --> 00:07:22.372
Renders correctly with some pets.

87
00:07:26.522 --> 00:07:31.520
And when I say const r
equals create render r.

88
00:07:34.254 --> 00:07:39.714
When I say r.render Results,

89
00:07:43.910 --> 00:07:46.442
Pets = pets.

90
00:07:48.661 --> 00:07:53.182
And then we're gonna expect
r.get renderedoutput.

91
00:07:57.563 --> 00:07:59.164
To match snapshot.

92
00:08:02.714 --> 00:08:07.178
I think they have to wrap
this in static render because

93
00:08:07.178 --> 00:08:09.766
I think this has links it will,

94
00:08:23.127 --> 00:08:26.187
Okay, so now if I run this npm run test,

95
00:08:32.223 --> 00:08:33.582
What is failing here?

96
00:08:43.820 --> 00:08:48.122
Test utils create render
is not a function, right,

97
00:08:48.122 --> 00:08:51.686
I need shallow from up here,
so, test render

98
00:08:55.372 --> 00:09:00.784
I'm also gonna have to add

99
00:09:00.784 --> 00:09:05.958
test render/shallow.

100
00:09:15.392 --> 00:09:18.791
And you can actually just replace that,
cuz it doesn't matter the old can use.

101
00:09:23.833 --> 00:09:26.550
So actually at this point then
we don't need static router, so

102
00:09:26.550 --> 00:09:27.539
we can get rid of that.

103
00:09:30.113 --> 00:09:32.867
So let's explain that what's happening
here, let's go ahead and run this,

104
00:09:32.867 --> 00:09:33.586
make sure it works.

105
00:09:37.344 --> 00:09:40.404
Okay, and
then we'll look at our snapshot here.

106
00:09:45.113 --> 00:09:49.883
So, one big thing about the test render
and snapshots is for the most part,

107
00:09:49.883 --> 00:09:53.080
It'll actually render all
the way down the tree.

108
00:09:53.080 --> 00:09:57.222
So it actually render out all these
individual pets as well, so we'll have all

109
00:09:57.222 --> 00:10:01.450
the links, it'll have all the all that
stuff that comes with pet.js, right?

110
00:10:01.450 --> 00:10:04.160
It's actually going to render all
of this markup with the images.

111
00:10:04.160 --> 00:10:07.790
And for the most part, I'm writing
right now a test for results.js.

112
00:10:07.790 --> 00:10:12.654
I actually don't care what pet looks
like because the pet tests should cover

113
00:10:12.654 --> 00:10:18.040
pet.js and the results test should
only cover what's in results.js.

114
00:10:18.040 --> 00:10:19.330
Why do I think that?

115
00:10:19.330 --> 00:10:21.729
Because if the test and
results suggest fail,

116
00:10:21.729 --> 00:10:25.090
I don't want it to fail because
something had failed, right?

117
00:10:25.090 --> 00:10:28.030
I want it to fail because
something results failed, right?

118
00:10:28.030 --> 00:10:33.290
So I'm trying to cut down my time
from failed tests to finding bugs.

119
00:10:33.290 --> 00:10:36.980
Right, so everything should
have its own set of tests.

120
00:10:36.980 --> 00:10:39.550
So that's why I'm doing
this shallow render.

121
00:10:39.550 --> 00:10:42.963
The shallow render says like, cool, I'm
only gonna render out until I find like

122
00:10:42.963 --> 00:10:46.640
another layer layer of abstraction
to another level of components.

123
00:10:46.640 --> 00:10:49.460
And then I'm only going to render that,
so that's what I did here with pet.

124
00:10:49.460 --> 00:10:51.148
It's not rendering pet,

125
00:10:51.148 --> 00:10:56.142
it's just rendering everything that's
going in as props to pet Make sense?

126
00:10:59.382 --> 00:11:04.229
That, Is it so,
we could have rewritten this and

127
00:11:04.229 --> 00:11:07.676
we could have done this with all the
rendering down so you see all the divs and

128
00:11:07.676 --> 00:11:10.460
images and pets but
I think that's a bad idea.

129
00:11:10.460 --> 00:11:14.633
That's exactly what this
shallow renders for

130
00:11:14.633 --> 00:11:20.020
oops, we want that in results
test such as this one.

131
00:11:20.020 --> 00:11:24.976
That's what this shallow renders for,
we don't need that anymore, either.

