WEBVTT

1
00:00:00.420 --> 00:00:03.430
Let's talk about TypeScript.

2
00:00:03.430 --> 00:00:05.150
Anyone excited about TypeScript?

3
00:00:05.150 --> 00:00:07.325
People are either like,
I'm not sure about this.

4
00:00:07.325 --> 00:00:10.324
Or they're excited about it and
they wanna tell me about it.

5
00:00:10.324 --> 00:00:12.455
Or they do not wanna talk
about TypeScript at all.

6
00:00:12.455 --> 00:00:17.028
And they're just gonna turn off the stream
right now, it's a polarizing figure.

7
00:00:17.028 --> 00:00:19.153
I have to say that I'm
a big fan of TypeScript.

8
00:00:19.153 --> 00:00:23.871
But also, my peer is the manager
of TypeScript at Microsoft.

9
00:00:23.871 --> 00:00:28.301
So I'm obligated to say that as well,
or he might never talk to me again.

10
00:00:30.850 --> 00:00:37.230
All right, well, first thing is we need to
get another fresh copy of our repo here.

11
00:00:37.230 --> 00:00:38.239
So let's go ahead and do that.

12
00:00:40.150 --> 00:00:40.696
So you and

13
00:00:40.696 --> 00:00:45.770
I are going to quickly convert this
entire application to using TypeScript.

14
00:00:45.770 --> 00:00:47.179
So we're gonna do a migration together,

15
00:00:47.179 --> 00:00:48.840
which I think is probably useful for
a lot of you.

16
00:00:48.840 --> 00:00:50.465
Because if you wanna use TypeScript,

17
00:00:50.465 --> 00:00:54.240
you're probably gonna have to migrate the
current application that you're writing.

18
00:00:54.240 --> 00:00:57.012
Don't get me wrong, it's a lot
easier to start with TypeScript.

19
00:00:57.012 --> 00:00:59.854
Because then you get all
the benefits out of the box.

20
00:00:59.854 --> 00:01:03.630
And I have a strong feeling that
TypeScript is incredibly annoying and

21
00:01:03.630 --> 00:01:06.940
not useful if it's only
30% of your application.

22
00:01:06.940 --> 00:01:10.482
But it's the most useful tool in
my toolbelt if it covers all of my

23
00:01:10.482 --> 00:01:11.340
application.

24
00:01:12.840 --> 00:01:16.516
So if I can use TypeScript on every file,
and they get type checking on every file,

25
00:01:16.516 --> 00:01:18.250
it's incredibly useful.

26
00:01:18.250 --> 00:01:21.096
But the moment that you're only using
an on part of your application,

27
00:01:21.096 --> 00:01:24.488
it really loses a lot of its usefulness
because you don't get the same guarantees.

28
00:01:27.240 --> 00:01:32.287
Okay, so let's do npm i -D

29
00:01:32.287 --> 00:01:37.564
typescript@4.2.2.

30
00:01:40.993 --> 00:01:43.480
So, this is not gonna be
a full intro to TypeScript.

31
00:01:43.480 --> 00:01:48.095
There's a great course already in Frontend
Masters called TypeScript Fundamentals,

32
00:01:48.095 --> 00:01:51.035
from Mike North,
my former co-worker from LinkedIn.

33
00:01:51.035 --> 00:01:54.088
That's really great, so that's a really
good place for you to get started.

34
00:01:59.022 --> 00:02:02.170
So why TypeScript, what is TypeScript?

35
00:02:02.170 --> 00:02:03.510
Let's talk about that for just a second.

36
00:02:03.510 --> 00:02:06.720
TypeScript is a type checker for
JavaScript.

37
00:02:06.720 --> 00:02:08.725
JavaScript is an untyped language.

38
00:02:08.725 --> 00:02:14.794
Which means whenever you create,
like if I say const x = 5,

39
00:02:14.794 --> 00:02:18.483
because this is a dynamic language,

40
00:02:18.483 --> 00:02:23.488
I don't have to say const x: number,
like that.

41
00:02:23.488 --> 00:02:27.062
Whereas if you're in something like Java,
you need to tell Java this is a number and

42
00:02:27.062 --> 00:02:29.527
I promise this is never gonna
change from being a number.

43
00:02:29.527 --> 00:02:31.361
And Java is going to believe you,
foolishly,

44
00:02:31.361 --> 00:02:33.061
because you're probably gonna trick it.

45
00:02:35.064 --> 00:02:38.889
TypeScript allows you to have that same
sort of type checking in this dynamic

46
00:02:38.889 --> 00:02:39.585
language.

47
00:02:39.585 --> 00:02:41.504
And while it ends up being more verbose,

48
00:02:41.504 --> 00:02:44.340
you have to write more
things with TypeScript.

49
00:02:44.340 --> 00:02:48.070
You also get to have assurance
that you're not gonna

50
00:02:48.070 --> 00:02:51.472
have random crashings
cuz of type mismatches.

51
00:02:51.472 --> 00:02:55.518
But my favorite part of it is that
if I import something from React,

52
00:02:55.518 --> 00:02:58.354
I don't have to go look
at the documentation.

53
00:02:58.354 --> 00:03:01.120
I can just look at the types
directly in Visual Studio Code.

54
00:03:01.120 --> 00:03:05.220
And I will say that Visual Studio Code and
TypeScript is like a match made in heaven.

55
00:03:05.220 --> 00:03:07.675
And it's no accident that
the TypeScript team and

56
00:03:07.675 --> 00:03:10.609
the Visual Studio Code team
are the same team at Microsoft.

57
00:03:10.609 --> 00:03:13.806
It's because those two things go together,
right?

58
00:03:15.933 --> 00:03:18.880
So we have TypeScript now.

59
00:03:19.940 --> 00:03:24.831
Now what I want you to do is I want

60
00:03:24.831 --> 00:03:29.910
you to say here in your console,

61
00:03:29.910 --> 00:03:32.930
npx tsc --init.

62
00:03:34.960 --> 00:03:35.829
What is tsc?

63
00:03:37.310 --> 00:03:42.128
It's another node binary that comes
from the TypeScript installation that

64
00:03:42.128 --> 00:03:44.847
allows you to run the TypeScript checker.

65
00:03:44.847 --> 00:03:48.562
And so the init command here
will init a new project for you,

66
00:03:48.562 --> 00:03:50.953
it'll give you a new configuration.

67
00:03:54.070 --> 00:03:58.639
Okay, so now you should have
this tsconfig.json down here.

68
00:04:01.760 --> 00:04:04.708
And this is a commented JSON file for you.

69
00:04:06.976 --> 00:04:10.926
But we have to go change a couple
of these, so let's go change them.

70
00:04:10.926 --> 00:04:15.342
First thing here,
we want this to be not ES5, but ES2020.

71
00:04:17.935 --> 00:04:23.197
The modules we're going to be using,
I believe the modules, no.

72
00:04:23.197 --> 00:04:24.244
What do I say here?

73
00:04:32.135 --> 00:04:38.858
ES, 2020, let's just do that,
ES2020 here as well.

74
00:04:44.191 --> 00:04:46.606
And then here, we have to go into the jsx,

75
00:04:46.606 --> 00:04:50.700
and we're gonna leave that
on "preserve" I think.

76
00:04:50.700 --> 00:04:55.691
Okay, so the thing to just think
about here is normally the TypeScript

77
00:04:55.691 --> 00:05:00.870
binary is going to be doing your
compilation of TypeScript for you.

78
00:05:00.870 --> 00:05:04.085
But in this particular case, it's actually
Parcel that's gonna do this for us, so

79
00:05:04.085 --> 00:05:05.720
this is actually less important.

80
00:05:05.720 --> 00:05:07.599
This is actually mostly for
the type checking.

81
00:05:11.160 --> 00:05:16.180
Okay, and the one thing to note here is,
if you're starting in

82
00:05:16.180 --> 00:05:21.797
a really big project,
you're gonna start with "strict": false.

83
00:05:21.797 --> 00:05:25.479
It's not gonna yell at you constantly
about, hey, everything is broken.

84
00:05:25.479 --> 00:05:28.810
And it's on fire, and
I don't know what to do about it.

85
00:05:28.810 --> 00:05:33.520
If you put it in "strict": true, it's
gonna do that and you're gonna hate it.

86
00:05:33.520 --> 00:05:36.920
False is gonna allow you to
kinda get started kinda slowly.

87
00:05:36.920 --> 00:05:40.163
But we're gonna complete
the whole migration right now.

88
00:05:40.163 --> 00:05:42.823
So we're gonna leave this on true because
it's gonna help us out to do that.

89
00:05:46.228 --> 00:05:53.106
Okay, the next thing that we're gonna
need is we're gonna need some type files.

90
00:05:53.106 --> 00:05:57.500
So that not everything is written
in TypeScript, obviously.

91
00:05:57.500 --> 00:06:02.640
For example, I don't think React is
necessarily written in TypeScript.

92
00:06:04.000 --> 00:06:07.770
So we need to install the types from
something called DefinitelyTyped.

93
00:06:07.770 --> 00:06:09.393
So this is a place where
you can put types for

94
00:06:09.393 --> 00:06:11.070
things that are not written in TypeScript.

95
00:06:12.620 --> 00:06:14.537
So what's a good example of something
that is written in TypeScript?

96
00:06:14.537 --> 00:06:17.279
Like Angular,
Angular itself is written in TypeScript.

97
00:06:17.279 --> 00:06:19.903
Which means that it provides
its own definition files.

98
00:06:19.903 --> 00:06:23.830
Which means that if you install Angular,
you get all the types for free.

99
00:06:23.830 --> 00:06:25.280
Whereas something like React,

100
00:06:25.280 --> 00:06:28.240
you actually have to go to a separate
repo to grab the types for it.

101
00:06:28.240 --> 00:06:32.519
So you have to say,

102
00:06:32.519 --> 00:06:41.884
npm i -D @types/react@17.0.2

103
00:06:41.884 --> 00:06:51.259
@types/react-dom@17.0.1,

104
00:06:55.043 --> 00:06:56.022
And

105
00:06:56.022 --> 00:07:06.022
@types/react-router-dom@5.1.7.

106
00:07:09.403 --> 00:07:12.871
So these are these type files that
we're getting from the DefinitelyTyped

107
00:07:12.871 --> 00:07:13.540
repository.

108
00:07:20.396 --> 00:07:22.634
Okay, so
now if you look in your package.json,

109
00:07:22.634 --> 00:07:25.710
you'll see here that we have
a bunch of type files here.

110
00:07:25.710 --> 00:07:31.566
These are just the type definitions that
allow us to understand how React is typed.

111
00:07:34.218 --> 00:07:36.971
Okay, now we're just gonna
go piece by piece and

112
00:07:36.971 --> 00:07:40.710
convert piece by piece of
this app to TypeScript.

113
00:07:40.710 --> 00:07:42.370
It's slower going, and
then it gets faster.

