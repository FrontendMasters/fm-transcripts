WEBVTT

1
00:00:00.440 --> 00:00:03.113
So the first thing you'll find
with typing in TypeScript,

2
00:00:03.113 --> 00:00:05.733
you get really defensive
because TypeScript is like hey,

3
00:00:05.733 --> 00:00:08.420
that could be a no and
I'm not comfortable with no, right?

4
00:00:08.420 --> 00:00:14.651
So you're gonna have to be very defensive
like making sure nothing could ever be no,

5
00:00:14.651 --> 00:00:18.888
or TypeScript is gonna get
really upset with you, okay?

6
00:00:18.888 --> 00:00:21.846
So the first thing that we're
gonna say here is this modal,

7
00:00:21.846 --> 00:00:24.080
what kind of thing is it?

8
00:00:24.080 --> 00:00:24.960
It doesn't really know.

9
00:00:26.204 --> 00:00:28.730
And the other thing that's
gonna help us out here.

10
00:00:29.930 --> 00:00:34.506
So as we convert each file,
we're gonna change it from

11
00:00:34.506 --> 00:00:39.586
modal.js to we're going to
say rename here, modal.tsx.

12
00:00:39.586 --> 00:00:43.606
Yes, you do have to put the x or else
TypeScript is not gonna check it as react.

13
00:00:47.080 --> 00:00:49.352
So I'm gonna change that to tsx here.

14
00:00:51.730 --> 00:00:53.694
And now we can start type checking.

15
00:01:00.689 --> 00:01:02.597
Okay?

16
00:01:02.597 --> 00:01:05.700
So the first thing that we're gonna
say is this modal, what is it?

17
00:01:05.700 --> 00:01:08.870
It is actually what we
call a function component.

18
00:01:08.870 --> 00:01:13.393
So now we can import this function
definition from react and

19
00:01:13.393 --> 00:01:19.340
say this modal is actually a function
component, which is pretty cool.

20
00:01:19.340 --> 00:01:21.370
And now it knows here,
this is a function component.

21
00:01:22.470 --> 00:01:24.511
That's good.

22
00:01:24.511 --> 00:01:27.668
TypeScript is also gonna do a lot of
inference for us this modal route you can

23
00:01:27.668 --> 00:01:30.390
see it actually already knows like,
okay, I know what this is.

24
00:01:30.390 --> 00:01:32.120
This is an HTML element, right?

25
00:01:32.120 --> 00:01:33.970
So it does that,
that's called type inference.

26
00:01:36.190 --> 00:01:39.550
But now if I try and say immediately
after that modal route equals five,

27
00:01:39.550 --> 00:01:43.250
it's gonna be like, hey, you tricked
me and I'm not okay with that, right?

28
00:01:43.250 --> 00:01:47.608
It's gonna say, hey, you can't do this
because you already told me this is gonna

29
00:01:47.608 --> 00:01:51.671
be an HTML element, if you try and
make it a number, I'm not okay with that.

30
00:01:56.471 --> 00:01:58.640
Okay, so that's the first thing.

31
00:01:58.640 --> 00:02:00.210
The next thing is this mutable.

32
00:02:01.460 --> 00:02:05.610
So this L ref here,
it is a mutable type of any.

33
00:02:05.610 --> 00:02:10.606
So the thing that we're trying to get away
with is we don't want to have any anys,

34
00:02:10.606 --> 00:02:11.788
and what is an any?

35
00:02:11.788 --> 00:02:19.380
If I say const x is an any,
this means that it can be anything, right?

36
00:02:19.380 --> 00:02:21.590
So I can say next thing x equals string.

37
00:02:21.590 --> 00:02:24.600
And it's going to be like, well,
okay, you told me it was in any.

38
00:02:27.090 --> 00:02:30.160
It's not being used anywhere,
which is why it's underlined there.

39
00:02:30.160 --> 00:02:33.655
But we're trying to get away from that
because that is where TypeScript is not

40
00:02:33.655 --> 00:02:34.530
helpful, right?

41
00:02:34.530 --> 00:02:37.571
We don't want to have anys we want to
have everything to be typed really well.

42
00:02:40.280 --> 00:02:44.702
So we're gonna say this
elref here is it's either a,

43
00:02:48.805 --> 00:02:53.877
Mutable ref object,
it always is that actually,

44
00:02:53.877 --> 00:03:00.780
but it's either gonna be an HTML
div element or it's gonna be null.

45
00:03:02.530 --> 00:03:05.896
So this thing is called a generic, which
I know we're getting into a lot of things

46
00:03:05.896 --> 00:03:07.840
here but
it's basically a function of types.

47
00:03:07.840 --> 00:03:10.360
And the way you call it is with this,
right?

48
00:03:10.360 --> 00:03:13.296
So, I'm telling you this mutable ref
object is either going to contain, right?

49
00:03:13.296 --> 00:03:15.620
Because this ref contains things.

50
00:03:15.620 --> 00:03:17.630
It's either gonna be a div or
it's gonna be a null.

51
00:03:17.630 --> 00:03:20.910
In this case it starts with a null and
then we're here we set it to be a div.

52
00:03:22.820 --> 00:03:27.800
But here you can see that I am
totally okay with that, right?

53
00:03:27.800 --> 00:03:28.550
Everything's going okay.

54
00:03:32.610 --> 00:03:34.500
Okay, good so far.

55
00:03:39.110 --> 00:03:42.110
Now something that we need to do
here is like, it's gonna say, hey,

56
00:03:47.962 --> 00:03:51.606
This is kind of sketchy here,
I don't really know if this l ref,

57
00:03:51.606 --> 00:03:55.540
like I can assign null or
I can append child if it's null.

58
00:03:55.540 --> 00:04:02.764
So I need to be a bit more defensive
about and say if null modal root or

59
00:04:02.764 --> 00:04:09.222
elRef.current, return.

60
00:04:12.676 --> 00:04:14.480
Now why am I doing this?

61
00:04:14.480 --> 00:04:17.077
If it ever got here,
which had never should, right?

62
00:04:17.077 --> 00:04:21.500
But TypeScript is forcing me to be
more defensive than I need to be.

63
00:04:21.500 --> 00:04:23.506
But if it ever got here,
this would be disastrous and

64
00:04:23.506 --> 00:04:24.883
it would crash our effect, right?

65
00:04:24.883 --> 00:04:25.670
And we don't want that.

66
00:04:26.920 --> 00:04:31.811
So here I'm just saying in advanced, hey,
if this doesn't exist, just don't do it.

67
00:04:33.921 --> 00:04:37.400
So it's upset that this could
still be null basically, right?

68
00:04:38.410 --> 00:04:43.784
So here if I put this into a function, and

69
00:04:43.784 --> 00:04:51.060
then I can say if, lref.current.

70
00:04:51.060 --> 00:04:57.910
So if somehow this got removed some
other way, Then don't do that, right?

71
00:04:59.110 --> 00:05:02.919
But basically what it was getting upset
about is that it doesn't expect this

72
00:05:02.919 --> 00:05:05.297
to return anything and
I was doing a one liner and

73
00:05:05.297 --> 00:05:08.470
just ignoring the return type there and
it doesn't like that.

74
00:05:11.280 --> 00:05:13.150
And I think if I don't have this,
it's gonna get upset.

75
00:05:14.667 --> 00:05:18.410
No, it's probably okay there,
is that true?

76
00:05:20.290 --> 00:05:25.022
Alright, well, we'll leave it in there
that's in my notes and but, yeah, again,

77
00:05:25.022 --> 00:05:29.227
we're just being defensive here of like,
if it does exist, do it, if not,

78
00:05:29.227 --> 00:05:30.710
then don't do anything.

79
00:05:30.710 --> 00:05:31.848
There's nothing to clean up.

80
00:05:35.880 --> 00:05:38.881
All right,
any questions about this so far?

81
00:05:42.881 --> 00:05:45.070
So we just typed modal.

82
00:05:45.070 --> 00:05:48.181
If you're gonna do a migration
from TypeScript, or sorry,

83
00:05:48.181 --> 00:05:52.480
from JavaScript to TypeScript,
here's my best suggestion for you.

84
00:05:52.480 --> 00:05:56.618
Find the leaf nodes of your React
application and that when I say leaf nodes

85
00:05:56.618 --> 00:06:00.100
I mean like the most outer things
that things do not depend on.

86
00:06:00.100 --> 00:06:02.992
So in this case modal is a leaf
node of this application that,

87
00:06:02.992 --> 00:06:05.100
it doesn't import anything else, right?

88
00:06:06.630 --> 00:06:10.207
And go convert those ones first and
then move your way up the chain

89
00:06:10.207 --> 00:06:13.057
until eventually we're
gonna convert app last and

90
00:06:13.057 --> 00:06:16.190
you'll save yourself a lot
of heartache by doing that.

