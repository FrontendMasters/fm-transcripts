WEBVTT

1
00:00:00.000 --> 00:00:01.556
So let's see if we can implement this.

2
00:00:01.556 --> 00:00:03.320
Again, it's a mouthful to say.

3
00:00:03.320 --> 00:00:04.603
But if we kind of look,

4
00:00:04.603 --> 00:00:09.450
what we wanna do is effectively get
the types working on this appropriately.

5
00:00:09.450 --> 00:00:12.140
And this is again,
it's saying we have this idea,

6
00:00:12.140 --> 00:00:14.030
it's an array full of a given item.

7
00:00:14.030 --> 00:00:17.840
We're gonna work through each one of
those items, what type is that item?

8
00:00:17.840 --> 00:00:23.764
And then we can use that to plug
it in to the rest of the function.

9
00:00:23.764 --> 00:00:29.423
So we can kind of say that we could have,
We have this idea,

10
00:00:29.423 --> 00:00:30.930
we'll have a function called tap.

11
00:00:32.560 --> 00:00:37.060
And there's some kind of value
that we're working with.

12
00:00:37.060 --> 00:00:39.897
I don't know if it's an array of numbers,
an array of strings,

13
00:00:39.897 --> 00:00:43.130
an array of objects, and frankly,
we don't want to know yet.

14
00:00:43.130 --> 00:00:47.190
We wanna be able to make a function
that can figure out what's going on, and

15
00:00:47.190 --> 00:00:48.876
then work for any given types.

16
00:00:48.876 --> 00:00:53.356
But it still says, okay,
I can still consistently figure out

17
00:00:53.356 --> 00:00:57.760
what's going on here and
still be flexible at the same time.

18
00:00:57.760 --> 00:00:59.939
So we could have some kind of argument,
we'll just say arg,

19
00:00:59.939 --> 00:01:02.090
because argument is a word in JavaScript.

20
00:01:02.090 --> 00:01:05.010
And that argument is
gonna be of that type.

21
00:01:05.010 --> 00:01:09.631
Whatever that type is,
it's going to be an array of that type, or

22
00:01:09.631 --> 00:01:12.248
actually just that type in general.

23
00:01:12.248 --> 00:01:13.856
Here, we're using an array,
it's actually natural.

24
00:01:13.856 --> 00:01:16.609
It can be any given thing.

25
00:01:16.609 --> 00:01:19.000
We're gonna say that type whatsoever.

26
00:01:20.700 --> 00:01:25.050
And so we're gonna have this
idea of a variable type.

27
00:01:25.050 --> 00:01:26.399
The argument is gonna be of that type.

28
00:01:28.040 --> 00:01:34.376
The function, which is kind of the
callback function here that we're using

29
00:01:34.376 --> 00:01:41.219
over here, is going to be something that
takes that type, and returns that type.

30
00:01:41.219 --> 00:01:42.789
Actually, it returns void, right?

31
00:01:42.789 --> 00:01:44.678
Cuz this is something with a side effect.

32
00:01:44.678 --> 00:01:47.230
It's like a console.log or
something along those lines.

33
00:01:47.230 --> 00:01:52.114
So tap takes a type, passes that type
into a function that doesn't do anything

34
00:01:52.114 --> 00:01:56.780
with it, and then eventually,
returns that type back to us.

35
00:01:56.780 --> 00:02:05.820
And all we're gonna say is function with
that arg, Return the argument, right?

36
00:02:05.820 --> 00:02:10.014
So now, this tap function can be
used on any type of argument, and

37
00:02:10.014 --> 00:02:11.784
it will plug into what T is.

38
00:02:11.784 --> 00:02:16.167
It's like, cool, all right, but
if you pass me a string as the argument,

39
00:02:16.167 --> 00:02:19.525
you better pass me a function
that takes a string.

40
00:02:19.525 --> 00:02:21.535
And I'm gonna give you back a string,
right?

41
00:02:21.535 --> 00:02:25.508
We're just saying this type
can be anything, but for

42
00:02:25.508 --> 00:02:29.227
whatever it is,
it has to be consistent, right?

43
00:02:29.227 --> 00:02:32.623
So it's a little bit more flexible
than hard-coding in a type, but

44
00:02:32.623 --> 00:02:34.795
you're not putting any in there.

45
00:02:34.795 --> 00:02:39.378
You're simply saying,
be flexible but consistent,

46
00:02:39.378 --> 00:02:42.173
which is kind of a model for life.

47
00:02:42.173 --> 00:02:46.274
One thing to kind of look at too, as we
saw this before as we were working on

48
00:02:46.274 --> 00:02:50.405
stuff, which is the identity,
it didn't give me back a type of number.

49
00:02:50.405 --> 00:02:53.490
It gave me back this type of two,
which is very specific.

50
00:02:53.490 --> 00:02:56.985
It's only const two that
can only be the number 2.

51
00:02:56.985 --> 00:03:00.094
That actually makes sense here as well,
if we actually change this to let.

52
00:03:02.110 --> 00:03:03.719
Now it can be any type of number.

53
00:03:03.719 --> 00:03:07.914
TypeScript was smart enough to figure
out if you have a const of too,

54
00:03:07.914 --> 00:03:12.266
then it will always be 2, cuz you
can't swap it out with another one.

55
00:03:12.266 --> 00:03:15.045
Arrays, however, you could push
additional stuff on top of it.

56
00:03:15.045 --> 00:03:16.252
So you can have, right,

57
00:03:16.252 --> 00:03:20.910
this is just an array of numbers because
you could push additional numbers on here.

58
00:03:20.910 --> 00:03:25.632
But if you use this other as const,
as you can see right here,

59
00:03:25.632 --> 00:03:28.650
it will make it a true constant.

60
00:03:28.650 --> 00:03:29.991
Basically, now it's a read only,

61
00:03:29.991 --> 00:03:32.240
you cannot push additional
things on this array.

62
00:03:32.240 --> 00:03:35.328
So it's just one thing that we kind
of came across as we were looking at

63
00:03:35.328 --> 00:03:36.193
identity as well.

64
00:03:36.193 --> 00:03:37.520
But that's the high level of generics.

65
00:03:37.520 --> 00:03:40.403
Clearly, there's a lot more generics
that are incredibly powerful.

66
00:03:40.403 --> 00:03:45.570
We're gonna look at a bunch of
utility types in a second here that

67
00:03:45.570 --> 00:03:51.730
effectively harness the power of that
to do very sophisticated things.

68
00:03:51.730 --> 00:03:54.308
And like I said,
there's obviously more can go into this.

69
00:03:54.308 --> 00:03:57.713
We just need to know just about enough
that we can work with some of these more

70
00:03:57.713 --> 00:04:00.180
advanced component patterns a little bit.

71
00:04:00.180 --> 00:04:04.632
But first, let's take a look at some
of the utility functions, either A,

72
00:04:04.632 --> 00:04:09.441
built into TypeScript, or B, built into
React's types that we might have to use

73
00:04:09.441 --> 00:04:13.450
with React components that
are outside of TypeScript per se.

74
00:04:13.450 --> 00:04:17.198
But obviously built on top of the ones
that are built into TypeScript, but

75
00:04:17.198 --> 00:04:19.810
also allow you to work
with different components.

