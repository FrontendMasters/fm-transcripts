WEBVTT

1
00:00:00.220 --> 00:00:01.412
So the other question is,

2
00:00:01.412 --> 00:00:05.800
is there any case where you might to
explicitly specify the type in use state?

3
00:00:05.800 --> 00:00:09.776
That is a great segue that I am
going to use to kind of talk

4
00:00:09.776 --> 00:00:14.760
about one of our next problems
we're gonna have to solve for.

5
00:00:14.760 --> 00:00:18.104
Which is, let's assume we're
getting some from an API,

6
00:00:18.104 --> 00:00:21.654
right, like TypeScript inferred
that hidden or is hidden and

7
00:00:21.654 --> 00:00:25.720
toggle hidden should be bullying
because we pass it a bullying.

8
00:00:25.720 --> 00:00:30.116
But if we're fetching something from
an API, it could at the very beginning,

9
00:00:30.116 --> 00:00:34.920
be something like perhaps, undefined or
null or something along those lines.

10
00:00:34.920 --> 00:00:37.152
Right, at which point we don't know yet,

11
00:00:37.152 --> 00:00:40.550
which means TypeScript can't
really infer anything yet.

12
00:00:40.550 --> 00:00:47.770
Which point we might need to be
able to explain what's going on.

13
00:00:47.770 --> 00:00:50.307
So here in our application
we wanna explain,

14
00:00:50.307 --> 00:00:53.620
we will just show like
little character cards here.

15
00:00:53.620 --> 00:00:57.980
And there's some data in here as well.

16
00:00:59.060 --> 00:01:02.922
This is, right now we're gonna load
it from another file simply because,

17
00:01:02.922 --> 00:01:07.440
I wanna make sure that If we use an API
doesn't go down in six months or whatever.

18
00:01:07.440 --> 00:01:11.161
But we're going to basically use
this promise called fetch character,

19
00:01:11.161 --> 00:01:15.550
which is going to immediately resolve,
effectively simulate an API for us.

20
00:01:15.550 --> 00:01:18.049
And you can see a little bit
about the character type and

21
00:01:18.049 --> 00:01:22.160
all the things it's gonna have in there
as well, that we have defined already.

22
00:01:22.160 --> 00:01:25.540
But we're gonna load this, with a promise.

23
00:01:25.540 --> 00:01:30.030
So we can't just immediately hard code in
that data, we have to be able to figure

24
00:01:30.030 --> 00:01:34.989
out, okay, we're gonna start out with null
or undefined in this case, and then we'll

25
00:01:34.989 --> 00:01:39.500
go ahead and we will load the data and be
able to begin to figure it out from there.

26
00:01:41.190 --> 00:01:48.170
Okay, so, let's look at this component and
figure out what we might seek to do here.

27
00:01:48.170 --> 00:01:51.340
We wanna show the character
information component, right?

28
00:01:51.340 --> 00:01:52.780
It's just simple.

29
00:01:52.780 --> 00:01:56.110
It's like a heading and a table that just
shows all of those different attributes.

30
00:01:56.110 --> 00:01:58.210
You can kind of take
a look at it over here.

31
00:01:59.550 --> 00:02:03.100
There's a little more room, which is
it's effectively the character name, and

32
00:02:03.100 --> 00:02:04.960
then all the other properties and a table.

33
00:02:04.960 --> 00:02:07.079
There's nothing particularly
special about it.

34
00:02:08.120 --> 00:02:09.980
We haven't done anything around that yet.

35
00:02:09.980 --> 00:02:13.440
And we don't necessarily
have the characters yet.

36
00:02:13.440 --> 00:02:17.156
So we'll solve for that,
which is we do know that

37
00:02:17.156 --> 00:02:21.700
eventually we do wanna have
a given character that we load.

38
00:02:22.910 --> 00:02:28.904
So we'll say const character and
set character

39
00:02:31.312 --> 00:02:36.510
Equals react I use state,
but what is it going to be?

40
00:02:36.510 --> 00:02:39.482
Normally what we would have done in
regular react so we just said null and

41
00:02:39.482 --> 00:02:40.780
we would have filled in later.

42
00:02:40.780 --> 00:02:44.807
We would have done a little null check at
some point to make sure that it does what

43
00:02:44.807 --> 00:02:46.880
we think it's supposed to do.

44
00:02:46.880 --> 00:02:50.500
We might say something like character.

45
00:02:50.500 --> 00:02:54.000
And if we have it then show me
that character information card.

46
00:02:54.000 --> 00:03:00.377
And you can see we get some autocomplete,
the character

47
00:03:02.031 --> 00:03:06.310
Cool, that's character or null.

48
00:03:08.490 --> 00:03:13.453
Or you could also do and
then do that instead.

49
00:03:16.156 --> 00:03:16.999
Right.

50
00:03:16.999 --> 00:03:21.823
Sweet, one of the problems that typescript
is yelling at me right now about is

51
00:03:21.823 --> 00:03:26.578
saying, listen, hey, the character
information component is expecting

52
00:03:26.578 --> 00:03:29.940
a character type to get passed in and
you gave me null.

53
00:03:30.950 --> 00:03:34.940
And that's a legitimate concern.

54
00:03:34.940 --> 00:03:37.430
We need to deal with that in a second.

55
00:03:37.430 --> 00:03:41.400
But so TypeScript again, is looking at us
if we don't have this file open, right?.

56
00:03:41.400 --> 00:03:43.790
It's trying to show us in
the context of what we're doing.

57
00:03:43.790 --> 00:03:46.550
What the potential issue is now, we
knew that that was going to be an issue.

58
00:03:46.550 --> 00:03:50.515
We're not particularly surprised by it,

59
00:03:50.515 --> 00:03:56.581
what we'll do is we'll use react
at use effect, and we'll say,

60
00:04:00.579 --> 00:04:05.780
When this loads for the first time,
go ahead and fetch a character.

61
00:04:08.050 --> 00:04:09.586
Then with the character

62
00:04:15.880 --> 00:04:18.319
Set the character.

63
00:04:18.319 --> 00:04:20.400
Cool.

64
00:04:20.400 --> 00:04:22.798
And you can see that it
loads the character and

65
00:04:22.798 --> 00:04:25.370
puts everything in there as well.

66
00:04:25.370 --> 00:04:28.630
But you can still see it's angry with us,
right?

67
00:04:28.630 --> 00:04:31.935
For a few reasons, it's like,
hey, you can't pass in null.

68
00:04:31.935 --> 00:04:36.527
Now it's working but we told TypeScript
originally that character was null

69
00:04:36.527 --> 00:04:40.112
cuz that was the first value of past and
like what helped us in

70
00:04:40.112 --> 00:04:44.574
the last exercise is now slightly
problematic for us in this one, right?

71
00:04:44.574 --> 00:04:47.887
You passed in null, I expected their
character was always gonna get set to

72
00:04:47.887 --> 00:04:49.810
null, and
then you set it to a character and

73
00:04:49.810 --> 00:04:53.550
even it's like well character is supposed
to be null like it works this time.

74
00:04:53.550 --> 00:04:55.160
This is not cool.

75
00:04:55.160 --> 00:04:57.850
So really what we got to
do is we might say, okay,

76
00:04:57.850 --> 00:05:00.421
listen state it's gonna
be a character type.

77
00:05:03.670 --> 00:05:08.771
All right, that quiet most of the red
squiggly lines for us, except for

78
00:05:08.771 --> 00:05:15.170
the fact that you passed it null and
you said it was gonna be a character type.

79
00:05:15.170 --> 00:05:20.219
So in this case, what we do is we'd say,
all right, listen, depending on where

80
00:05:20.219 --> 00:05:25.271
we are in fetching the asynchronous code,
character type is either going to be or

81
00:05:25.271 --> 00:05:30.026
the character that we use in our state
is either going to be a character type,

82
00:05:30.026 --> 00:05:34.200
or it's going to be null if
we haven't loaded it yet.

83
00:05:34.200 --> 00:05:36.840
And that will work in this case.

84
00:05:38.440 --> 00:05:39.690
And it will pass it in.

85
00:05:39.690 --> 00:05:43.790
And what's interesting is react
is okay with us right now.

86
00:05:43.790 --> 00:05:47.003
If we did something like paste and
stuff like this,

87
00:05:47.003 --> 00:05:51.150
you can see that in this case
is no longer okay with us.

88
00:05:51.150 --> 00:05:53.860
It's saying, and this is again,
this is TypeScript.

89
00:05:53.860 --> 00:05:56.849
This is actually kind of
impressive if you think about it,

90
00:05:56.849 --> 00:06:00.082
here It knows that you've checked
to see if character exists,

91
00:06:00.082 --> 00:06:04.470
which means TypeScript can pretty much
confirm that character is non null.

92
00:06:04.470 --> 00:06:08.485
And since character can only be null or
a character type,

93
00:06:08.485 --> 00:06:12.260
and is not null,
it must be a character type, right?

94
00:06:12.260 --> 00:06:16.830
Here on the other hand,
you didn't do a check.

95
00:06:16.830 --> 00:06:20.790
And so react or TypeScript is rather like,
I don't know this is null or character

96
00:06:20.790 --> 00:06:24.690
type and this character information
card only takes a character type.

97
00:06:24.690 --> 00:06:28.900
And so I'm uncomfortable right now, right?

98
00:06:28.900 --> 00:06:32.776
And again that TypeScript can vary
subtly trying to help you from what,

99
00:06:32.776 --> 00:06:36.911
cuz you can see this code technically
works, but on a long enough timeline,

100
00:06:36.911 --> 00:06:41.000
you could see a world where the code
base grows and it grows and it grows.

101
00:06:41.000 --> 00:06:46.533
And all of a sudden it
doesn't work at all.

102
00:06:46.533 --> 00:06:48.580
Sweet.

103
00:06:48.580 --> 00:06:51.500
So one of the questions is,
this promise immediately resolves.

104
00:06:51.500 --> 00:06:56.036
What would happen,
if it took a little bit of time,

105
00:06:56.036 --> 00:07:00.681
the promise is gonna run
asynchronously which means

106
00:07:00.681 --> 00:07:04.390
this will be null for a little bit longer.

107
00:07:04.390 --> 00:07:07.321
For instance, we could theoretically go.

108
00:07:07.321 --> 00:07:11.350
Let's actually just say,
let's cheat a little bit.

109
00:07:11.350 --> 00:07:14.359
Let's, we'll simulate
a slow network connection.

110
00:07:31.838 --> 00:07:33.330
I'll just refresh this completely.

111
00:07:36.050 --> 00:07:41.280
Right it will have remained null until
that second expires, and it loads.

112
00:07:41.280 --> 00:07:44.501
We might choose to do something
like add in a loading or

113
00:07:44.501 --> 00:07:47.660
something along those lines
to put in there as well.

114
00:07:47.660 --> 00:07:51.460
So we can say something like for
instance, we've got a loading component.

115
00:07:51.460 --> 00:07:52.669
So we could say,

116
00:08:02.771 --> 00:08:10.754
At this point I don't,
it's true, Until it's false,

117
00:08:10.754 --> 00:08:14.810
right, and so we can at this point will
say, all right, fetch the character.

118
00:08:14.810 --> 00:08:18.981
Let me actually just give myself some
curly braces to buy myself a little more

119
00:08:18.981 --> 00:08:19.640
room here.

120
00:08:21.580 --> 00:08:25.340
And we'll say when it's fetched,

121
00:08:25.340 --> 00:08:30.866
the character will also say,
set loading to false.

122
00:08:33.840 --> 00:08:43.437
And we could show something like As well.

123
00:08:43.437 --> 00:08:47.680
And now, we refresh this cuz
it's using hot reloading.

124
00:08:47.680 --> 00:08:50.240
It's easy loading and
then it loads, right?

125
00:08:50.240 --> 00:08:53.920
And again, like react or
TypeScript just figure it out.

126
00:08:53.920 --> 00:08:58.301
We're checking to see in this case,
is this null or not, it knows

127
00:08:58.301 --> 00:09:03.490
the difference and kind of mostly figure
out a lot of this for us on our behalf.

128
00:09:05.210 --> 00:09:11.075
One of the skills that you might
want to train in yourself is,

129
00:09:11.075 --> 00:09:15.100
and I say this from personal experience.

130
00:09:17.210 --> 00:09:20.963
Sometimes again, that's why the kind of
some of the fundamental concepts make

131
00:09:20.963 --> 00:09:24.548
a little bit of sense here, which is if
you don't fully understand the way it

132
00:09:24.548 --> 00:09:27.190
works, you're like TypeScript
is the problem here.

133
00:09:27.190 --> 00:09:28.990
It's making things harder for me, right?

134
00:09:28.990 --> 00:09:29.990
And it's mostly trying to help you.

135
00:09:29.990 --> 00:09:35.896
So let's look at an example where we
could see that roughly the same logic,

136
00:09:35.896 --> 00:09:42.010
will not work on TypeScript we have, so
we'll comment this out for a second.

137
00:09:44.000 --> 00:09:49.010
And we'll say, yeah,
I'm totally gonna check to see everything.

138
00:09:49.010 --> 00:09:57.020
So if it's loading and
there's no character, right?

139
00:09:57.020 --> 00:10:05.750
Then I wanna show the loading component,
right?

140
00:10:05.750 --> 00:10:10.742
Otherwise, show me
the character information with

141
00:10:10.742 --> 00:10:15.060
the character being the character, right?

142
00:10:17.660 --> 00:10:22.420
And you can see that TypeScript
are happy with this, right?

143
00:10:22.420 --> 00:10:24.770
And you're like what
it just worked before.

144
00:10:24.770 --> 00:10:25.810
Like, what's the difference?

145
00:10:25.810 --> 00:10:27.310
I don't understand.

146
00:10:27.310 --> 00:10:29.300
Like this is ridiculous.

147
00:10:29.300 --> 00:10:34.410
I'm going to quit programming and
start a vegan junk food truck, right?

148
00:10:34.410 --> 00:10:36.010
It's not worth it.

149
00:10:36.010 --> 00:10:40.194
Well, if we think about it,
staring at it for a little bit,

150
00:10:40.194 --> 00:10:45.722
we can figure out that, right before
we're saying like is there a character,

151
00:10:45.722 --> 00:10:49.196
okay if there is a character is not null,
right?

152
00:10:49.196 --> 00:10:54.040
Saying that there is no character doesn't,
saying that something doesn't

153
00:10:54.040 --> 00:10:58.970
exist doesn't help TypeScript know that
it's not null in this case, right?

154
00:10:58.970 --> 00:11:04.252
We actually like to say is does this value
exists thereby it can't be null cuz this

155
00:11:04.252 --> 00:11:09.845
could be all sorts of different things and
it doesn't give TypeScript the confidence

156
00:11:09.845 --> 00:11:14.994
it needs to know that this won't be null
cuz there are edge cases here, right?

157
00:11:14.994 --> 00:11:19.061
So sometimes worth say anything about,
okay what is the logic here am I kind of

158
00:11:19.061 --> 00:11:23.316
explaining this attach to you well enough
to allow it to help me from bucks right,

159
00:11:23.316 --> 00:11:26.400
so kind of flipping some of
the logic around like this can.

160
00:11:26.400 --> 00:11:32.124
There are cases where this condition can
pass in a way that you didn't expect,

161
00:11:32.124 --> 00:11:33.040
right?

162
00:11:33.040 --> 00:11:36.740
So what TypeScript is trying to do
is being, listen, I'm a computer.

163
00:11:36.740 --> 00:11:38.740
I can run all the probabilities here.

164
00:11:38.740 --> 00:11:41.288
There are edge cases here, and

165
00:11:41.288 --> 00:11:46.095
things that can happen that
will slip through the cracks.

166
00:11:46.095 --> 00:11:50.368
So again it is one of those things which
is the computer is probably right in this

167
00:11:50.368 --> 00:11:54.836
case and just worth before you get upset
with it just kind of worth thinking about,

168
00:11:54.836 --> 00:11:57.005
okay, am I thinking about this right?

