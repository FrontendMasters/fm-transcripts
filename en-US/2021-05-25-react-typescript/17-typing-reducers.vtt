WEBVTT

1
00:00:00.200 --> 00:00:02.192
So we've done a lot with useState.

2
00:00:02.192 --> 00:00:06.981
Now one of the things that we
might wanna look at is reducers.

3
00:00:06.981 --> 00:00:12.296
And this is one of the places where I

4
00:00:12.296 --> 00:00:18.541
do think that TypeScript kinda shines.

5
00:00:18.541 --> 00:00:22.311
One of the criticisms levied on Redux, and

6
00:00:22.311 --> 00:00:26.501
this is not necessarily
true as much anymore and

7
00:00:26.501 --> 00:00:31.004
also true of some of
the useReducer stuff in React,

8
00:00:31.004 --> 00:00:37.106
is I think that the reducer pattern
is incredibly powerful, right?

9
00:00:37.106 --> 00:00:42.236
Use state is useful for like, yeah,
I wanna figure out that answer so

10
00:00:42.236 --> 00:00:45.078
that Avengers quiz is toggled or not.

11
00:00:45.078 --> 00:00:48.033
Yeah, useState is good for
little stuff like that.

12
00:00:48.033 --> 00:00:52.598
But if you find yourself putting
seven useStates in a component,

13
00:00:52.598 --> 00:00:56.752
it's probably time to rethink
your approach a little bit.

14
00:00:56.752 --> 00:01:00.678
useReducer is definitely helpful and
Redux,

15
00:01:00.678 --> 00:01:04.910
someway we're gonna tell
how it applies to both.

16
00:01:04.910 --> 00:01:12.256
useReducer is super helpful for
more complicated state management.

17
00:01:12.256 --> 00:01:16.496
Where you might have multiple things and
you're like, okay,

18
00:01:16.496 --> 00:01:21.465
based on three different properties,
I want to determine the third one.

19
00:01:21.465 --> 00:01:26.467
And that's where it can become
super helpful, but there's a lot of

20
00:01:26.467 --> 00:01:31.842
ceremony that we do in reducers to
basically protect us from ourselves.

21
00:01:31.842 --> 00:01:35.136
A lot of times you'll see action
types are usually strings, but

22
00:01:35.136 --> 00:01:37.528
other times we'll assign
them to constants.

23
00:01:37.528 --> 00:01:41.284
That way, if we mess up spelling
one of the action types,

24
00:01:41.284 --> 00:01:44.899
it doesn't fall through
our conditional somewhere.

25
00:01:44.899 --> 00:01:47.977
A lot of times it's like either you
misspelled the action type as you

26
00:01:47.977 --> 00:01:50.839
dispatched the action or
you misspelled it in the reducer, and

27
00:01:50.839 --> 00:01:54.565
all of your conditionals, or your case
statement, it falls through all of them,

28
00:01:54.565 --> 00:01:57.050
and nothing happens, and
there's no error message.

29
00:01:57.050 --> 00:02:00.056
And you're like, I don't know what to do.

30
00:02:00.056 --> 00:02:03.817
And this is an area where I think that
TypeScript definitely begins to help us.

31
00:02:03.817 --> 00:02:05.856
All right, so
here's another example application.

32
00:02:05.856 --> 00:02:09.786
This one is a pizza calculator, the Jock.

33
00:02:09.786 --> 00:02:14.681
But when I used to work at a coding
bootcamp where we did meetups and

34
00:02:14.681 --> 00:02:19.309
stuff like that, it took a bunch
of smart people way too long to

35
00:02:19.309 --> 00:02:23.229
figure out how many pizzas
we should order, right?

36
00:02:23.229 --> 00:02:27.102
So we'd literally made a silly app
where you put in the number of people,

37
00:02:27.102 --> 00:02:30.341
how many slices of pizza you
think they're going to eat, and

38
00:02:30.341 --> 00:02:32.459
you would get the right number of buys.

39
00:02:32.459 --> 00:02:35.629
This application is ultimately not
successful because we ordered from

40
00:02:35.629 --> 00:02:38.584
the pizza place so much that they
started throwing in free pizzas so

41
00:02:38.584 --> 00:02:41.854
that eventually we had a feature request
to add like a guess on how many free

42
00:02:41.854 --> 00:02:44.216
pizzas that we're gonna throw in and
so on so forth.

43
00:02:44.216 --> 00:02:47.498
But generally speaking,
this is an app that we use.

44
00:02:47.498 --> 00:02:50.857
So here you can see number of people,
okay, there should be eight people.

45
00:02:50.857 --> 00:02:57.092
They're gonna each eat 13 slices of pizza,
13 people, 13 slices of pizza.

46
00:02:57.092 --> 00:03:03.559
Another feature request that came
up was how many slices per pie.

47
00:03:03.559 --> 00:03:04.785
But anyway, it works.

48
00:03:04.785 --> 00:03:07.324
Now, I've cheated a little bit.

49
00:03:07.324 --> 00:03:12.952
If you look closely at the reducer,
it's just any all over the place.

50
00:03:12.952 --> 00:03:15.643
We've done a little bit of type scripting,
and

51
00:03:15.643 --> 00:03:18.004
I will talk about some
of the stuff we did.

52
00:03:18.004 --> 00:03:22.900
But then we're gonna add some type safety,
and we're gonna see some of the kinda cool

53
00:03:22.900 --> 00:03:25.486
stuff that we get for
free as we go along here.

54
00:03:25.486 --> 00:03:29.006
But let's take a tour of
the code as it stands first.

55
00:03:29.006 --> 00:03:32.535
Give myself a little bit more room here.

56
00:03:32.535 --> 00:03:34.632
All right, a PizzaData.

57
00:03:34.632 --> 00:03:35.899
Nothing special about that.

58
00:03:35.899 --> 00:03:39.302
It's number of people,
slices per person, slice of a pie.

59
00:03:39.302 --> 00:03:42.417
PizzaState, well,
this is interesting, right?

60
00:03:42.417 --> 00:03:44.372
Cuz really, there's a fourth PizzaState.

61
00:03:44.372 --> 00:03:45.261
There's three input fields.

62
00:03:45.261 --> 00:03:49.880
But there's a fourth piece, which is,
what is the total number of pizzas?

63
00:03:49.880 --> 00:03:53.721
Here, you can see we're gonna
use this intersection here,

64
00:03:53.721 --> 00:03:55.918
which is we're gonna say, cool.

65
00:03:55.918 --> 00:03:58.716
What I wanna do is I
wanna take my PizzaData.

66
00:03:58.716 --> 00:04:02.338
And I also wanna combine it
with this other type, right?

67
00:04:02.338 --> 00:04:07.075
And this is our first kind of
foray in kind of determining types

68
00:04:07.075 --> 00:04:12.101
based on other types,
programmability around our type system.

69
00:04:12.101 --> 00:04:17.355
So PizzaState is simply going to
be everything in PizzaData plus

70
00:04:17.355 --> 00:04:22.621
one more field, which is the number
of pizzas needed in number.

71
00:04:22.621 --> 00:04:26.651
And this is super useful because if we
change something about the PizzaData,

72
00:04:26.651 --> 00:04:29.317
our PizzaState type would
inherit that in this case

73
00:04:29.317 --> 00:04:31.744
cuz it's a combination
of those two objects.

74
00:04:31.744 --> 00:04:35.871
calculatePizzasNeeded is a very
proprietary formula that multiplies number

75
00:04:35.871 --> 00:04:39.869
of people time slices per person divided
by the size of the pie and rounds up,

76
00:04:39.869 --> 00:04:42.507
because you cannot order
two-thirds of a pizza.

77
00:04:42.507 --> 00:04:44.812
So it rounds up to the nearest pizza.

78
00:04:44.812 --> 00:04:50.159
And this is just a helper function that
I'll use my reducer to update the object.

79
00:04:50.159 --> 00:04:55.847
Our initial state,
which is gonna be of the type PizzaState.

80
00:04:55.847 --> 00:04:59.748
The nice part is if you kinda
like messed up a field here,

81
00:04:59.748 --> 00:05:04.161
anything along those lines,
you'd have an undefined field.

82
00:05:04.161 --> 00:05:10.271
You have an extra field, you'd gonna get
unexpected behavior in your reducer.

83
00:05:10.271 --> 00:05:13.443
Here we've got the reducer, we will
get some of the benefits when I begin

84
00:05:13.443 --> 00:05:16.928
typing it, right now might as well be
JavaScript, but we've got the actions to

85
00:05:16.928 --> 00:05:19.912
UPDATE_NUMBER_OF_PEOPLE,
UPDATE_SLICES_PER_PERSON.

86
00:05:19.912 --> 00:05:22.748
Anytime one of these input fields change,

87
00:05:22.748 --> 00:05:27.642
basically recalculate the number of
pieces we need based on the new data.

88
00:05:27.642 --> 00:05:32.531
And then finally, the end result.

89
00:05:32.531 --> 00:05:36.410
We have got a bunch of anies
here in the calculator,

90
00:05:36.410 --> 00:05:41.023
we're gonna have to handle all
of that momentarily as well.

91
00:05:41.023 --> 00:05:43.545
And then we've got kind of
the highest level here.

92
00:05:43.545 --> 00:05:45.612
So we got useReducer.

93
00:05:45.612 --> 00:05:52.143
And right now, it is of the type of any,
and you can dispatch anything.

94
00:05:52.143 --> 00:05:56.174
And what's gonna happen is,
as we add some more typing to this,

95
00:05:56.174 --> 00:06:00.879
we're gonna see how TypeScript begins
to help us from common mistakes that

96
00:06:00.879 --> 00:06:05.379
we will all like to admit were less
common than they really are, right?

97
00:06:05.379 --> 00:06:10.837
But little mistakes that in the course
of my day to day, I make all the time.

98
00:06:10.837 --> 00:06:13.746
So if we go ahead and
look at our reducer, right, and

99
00:06:13.746 --> 00:06:16.805
this is kinda where it
becomes somewhat interesting.

100
00:06:16.805 --> 00:06:21.903
I can go ahead, I can change,
we have a type around our PizzaState.

101
00:06:21.903 --> 00:06:27.503
So I can go ahead,
I can say PizzaState in this case, right?

102
00:06:27.503 --> 00:06:30.262
And the interesting part is all I said for

103
00:06:30.262 --> 00:06:33.753
this reducer function is
that the state argument,

104
00:06:33.753 --> 00:06:39.288
the function is going to expect that it is
going to get PizzaState passed into it.

105
00:06:39.288 --> 00:06:41.961
If I go back down to application,

106
00:06:41.961 --> 00:06:47.782
you can see that TypeScript has already
figured out that even the initial

107
00:06:47.782 --> 00:06:52.855
value of state in this case is
going to be a PizzaState, right?

108
00:06:52.855 --> 00:06:58.343
In some version, it's evens like, if
the reducer always takes this argument and

109
00:06:58.343 --> 00:07:03.003
it's gonna either return some version
of it or the state again, if none of

110
00:07:03.003 --> 00:07:07.539
the action types hit, then I know
the state is going to be a PizzaState.

111
00:07:07.539 --> 00:07:13.268
And it has already figured out the type
of the state of our component, right?

112
00:07:13.268 --> 00:07:17.302
And so you see PizzaState is
a reducer that takes a pizza state.

113
00:07:17.302 --> 00:07:21.374
So I've got an action, we haven't figured
that out yet, and returns a PizzaState.

114
00:07:21.374 --> 00:07:23.451
And initial state fits
in with that as well.

115
00:07:23.451 --> 00:07:25.280
If I just passed in some other object,

116
00:07:25.280 --> 00:07:27.689
TypeScript is already
gonna save me from myself.

117
00:07:27.689 --> 00:07:29.935
The interesting part, though, and

118
00:07:29.935 --> 00:07:34.935
this is kind of a interesting thing about
TypeScript, if I just took this object,

119
00:07:34.935 --> 00:07:39.222
right, so right now we're saying
the initial state is a PizzaState.

120
00:07:39.222 --> 00:07:44.077
But what happens if I just took
the object and passed it in, all right?

121
00:07:46.173 --> 00:07:47.928
TypeScript's happy with that.

122
00:07:47.928 --> 00:07:51.013
I never said that this
object was a PizzaState.

123
00:07:51.013 --> 00:07:56.313
But TypeScript figured out like,
you never said it, but it's true, right?

124
00:07:56.313 --> 00:08:01.560
I can tell that this conforms to the idea
of a PizzaState, and it will accept it.

125
00:08:01.560 --> 00:08:03.246
Unlike some other types systems,

126
00:08:03.246 --> 00:08:06.967
TypeScript does not insist that you
declare absolutely everything because

127
00:08:06.967 --> 00:08:10.413
that's fundamentally incompatible
with the way JavaScript works.

128
00:08:10.413 --> 00:08:11.792
It uses structural typing set,

129
00:08:11.792 --> 00:08:15.072
which is, yeah, you didn't say this
was a PizzaState, but it is, right?

130
00:08:15.072 --> 00:08:16.622
I can figure that out for you.

131
00:08:16.622 --> 00:08:17.869
I will accept this.

132
00:08:17.869 --> 00:08:22.182
This is totally fine, and
it totally works for us.

133
00:08:22.182 --> 00:08:25.404
Right, let me put it back in initial
state, then we are good to go.

134
00:08:25.404 --> 00:08:29.952
But we still need to deal with
the fact that we don't have this

135
00:08:29.952 --> 00:08:32.011
concept of a pizza action.

136
00:08:32.011 --> 00:08:35.789
Let me go ahead and
pop that in as a PizzaState as well.

137
00:08:35.789 --> 00:08:40.094
So now, the calculator is
simply that pizza's down here.

138
00:08:40.094 --> 00:08:44.580
Okay, so this idea of a pizza action,

139
00:08:44.580 --> 00:08:49.641
let's actually go ahead and define this.

140
00:08:49.641 --> 00:08:53.545
A lot of times what you'll see people
do is, because you can easily mess up,

141
00:08:53.545 --> 00:08:57.998
in fact, the one I first somehow can't
spell the word number a lot of times, so

142
00:08:57.998 --> 00:08:59.405
I'll forget the letter B.

143
00:08:59.405 --> 00:09:03.882
This is happened to me more
times than I want to admit.

144
00:09:03.882 --> 00:09:09.359
So a lot of times what people do
is they'll say something like,

145
00:09:15.310 --> 00:09:18.763
And this is sort of try to protect you
from yourself in JavaScript, right?

146
00:09:18.763 --> 00:09:22.371
This way if you misspell it,
now it's an error,

147
00:09:22.371 --> 00:09:28.091
if we replace this with a constant so
on and so forth, then you misspelled it,

148
00:09:28.091 --> 00:09:32.850
there'll be like there is no
constant called numero of people.

149
00:09:32.850 --> 00:09:33.778
With TypeScript,

150
00:09:33.778 --> 00:09:37.319
we don't need to worry about that cuz
the type system is going to help us.

151
00:09:37.319 --> 00:09:38.340
So let's make a pizza action.

152
00:09:42.273 --> 00:09:44.507
We'll make a pizza action and
it is going to be of the type.

153
00:09:46.854 --> 00:09:50.948
Well have update number of people,
let's just do a little copy paste action.

154
00:09:54.137 --> 00:09:57.391
Or it's gonna be UPDATE_SLICES_PER_PERSON.

155
00:10:02.575 --> 00:10:05.801
Or it's going to be UPDATE_SLICES_PER_PIE,
right?

156
00:10:05.801 --> 00:10:10.140
It's either gonna be one
of these three things or,

157
00:10:11.790 --> 00:10:14.143
We're not gonna be okay with this, right?

158
00:10:14.143 --> 00:10:18.895
And then finally, it's gonna
take some kind of payload, Which

159
00:10:18.895 --> 00:10:20.785
should be a number since
we're doing math with it.

160
00:10:22.871 --> 00:10:27.497
Right, now we will say
that the action that we're

161
00:10:27.497 --> 00:10:30.921
expecting should be a pizza action.

162
00:10:30.921 --> 00:10:35.233
And what's cool about this is
now if I misspell something,

163
00:10:35.233 --> 00:10:37.225
TypeScript will catch it.

164
00:10:37.225 --> 00:10:41.296
There's no world that
this should be allowed,

165
00:10:41.296 --> 00:10:44.971
here are the types that
you said were okay.

166
00:10:44.971 --> 00:10:47.602
That is currently not the case.

167
00:10:47.602 --> 00:10:51.019
And it's kinda catching us before
we have to figure out like,

168
00:10:51.019 --> 00:10:55.233
I dispatched the action, nothing happened
cuz it fell through that condition all

169
00:10:55.233 --> 00:10:56.775
the way down to return state.

170
00:10:56.775 --> 00:10:58.817
And that's not cool.

171
00:10:58.817 --> 00:11:03.550
The other interesting thing is
that let's say hypothetically I

172
00:11:03.550 --> 00:11:06.538
removed these two for a second, right?

173
00:11:06.538 --> 00:11:09.878
That kinda changes the way this works,
cuz now I can return PizzaState or

174
00:11:09.878 --> 00:11:10.880
undefined, right?

175
00:11:10.880 --> 00:11:14.337
We can kind of see that as well, and
useReducer here is now angry with me.

176
00:11:14.337 --> 00:11:20.259
It's like no, no, no, no, no, the way this
works, is I need to get back the state.

177
00:11:20.259 --> 00:11:23.673
So it'll begin to catch some those
edge cases if you haven't covered.

178
00:11:23.673 --> 00:11:27.139
We've got this fallback where
it'll always return the state.

179
00:11:27.139 --> 00:11:31.519
But it will begin to save me from
myself in some cases, and again,

180
00:11:31.519 --> 00:11:35.263
catch those little things
that as we're writing code,

181
00:11:35.263 --> 00:11:40.939
we're trying to think about the problem,
we're not totally aware of, all right.

182
00:11:40.939 --> 00:11:44.015
So we need to know how to type this.

183
00:11:44.015 --> 00:11:49.175
Now, it's not a pizza action,
cuz it's the dispatch function.

184
00:11:49.175 --> 00:11:54.669
But is it just like react.dispatch, right?

185
00:11:54.669 --> 00:11:58.272
Is that it, right?

186
00:11:58.272 --> 00:12:02.093
Well no, that's not it.

187
00:12:02.093 --> 00:12:03.829
So we gotta think about this for a second.

188
00:12:03.829 --> 00:12:08.170
Again, the skills that I
wanna teach you is the tools.

189
00:12:08.170 --> 00:12:09.203
So if we look,

190
00:12:09.203 --> 00:12:15.079
we can see that dispatch is a function
that will dispatch pizza actions, right?

191
00:12:15.079 --> 00:12:18.037
Why, because it knows that
the reducer only takes

192
00:12:18.037 --> 00:12:20.087
actions of the type PizzaAction.

193
00:12:20.087 --> 00:12:24.006
TypeScript has figured all of this out for
us.

194
00:12:24.006 --> 00:12:28.359
So now we know exactly what the type is,
we can go ahead and

195
00:12:28.359 --> 00:12:30.459
steal that for ourselves.

196
00:12:30.459 --> 00:12:37.124
We're gonna dispatch, PizzaAction, right?

197
00:12:37.124 --> 00:12:39.480
And now we've got a new problem, and

198
00:12:39.480 --> 00:12:44.420
this is a problem that we've seen before
that TypeScript just figured out for

199
00:12:44.420 --> 00:12:49.056
us, which is these payloads all have
red squiggly lines under them now.

200
00:12:49.056 --> 00:12:53.996
And the reason they have red
squiggly lines is because

201
00:12:53.996 --> 00:12:59.055
the payload is expecting that
the payload is a number.

202
00:12:59.055 --> 00:13:02.506
Again, it's a problem we had before,
which is number fields make strings.

203
00:13:05.507 --> 00:13:08.653
And we're good to go, right?

204
00:13:08.653 --> 00:13:10.502
And now we've added some type safety here.

205
00:13:10.502 --> 00:13:14.892
Again, we can't misspell a action now,
right?

206
00:13:14.892 --> 00:13:17.828
We know that it's gonna
basically run through, again,

207
00:13:17.828 --> 00:13:19.364
this is a small application.

208
00:13:19.364 --> 00:13:22.292
In a larger application, it's gonna
still run through everything and

209
00:13:22.292 --> 00:13:25.510
make sure that we haven't made any of
these tiny little errors that can sneak up

210
00:13:25.510 --> 00:13:27.248
as the complexity of application grows.

211
00:13:27.248 --> 00:13:29.921
And yeah,
if we misspell anything along these lines,

212
00:13:29.921 --> 00:13:33.405
if any of the wrong data is there,
even if we misspell what we dispatch,

213
00:13:33.405 --> 00:13:37.066
a lot of times you'll see in applications
we'll use action creators, and

214
00:13:37.066 --> 00:13:39.764
action creators is still
probably a pretty good idea.

215
00:13:39.764 --> 00:13:44.009
But even if I misspelled any of
the action types here as well,

216
00:13:44.009 --> 00:13:46.185
it'll catch it immediately.

217
00:13:46.185 --> 00:13:49.878
I don't have to wonder when I go to run
my tests or anything along those lines.

218
00:13:49.878 --> 00:13:54.652
One of the interesting things about
TypeScript to think about is how many

219
00:13:54.652 --> 00:13:59.441
unit tests were you writing that
we're just catching weird edge cases?

220
00:13:59.441 --> 00:14:03.166
The type system can effectively
try to catch for you.

221
00:14:03.166 --> 00:14:08.083
That's not to say that you don't
need to test, but it does mean that

222
00:14:08.083 --> 00:14:13.019
there's a class of things that you
don't need to test for anymore.

223
00:14:13.019 --> 00:14:18.004
So my argument would be some of
the extra work that involves in

224
00:14:18.004 --> 00:14:22.306
having a TypeScript
application might be helpful,

225
00:14:22.306 --> 00:14:27.603
there are things that are gonna
save you some work other places.

226
00:14:27.603 --> 00:14:29.314
So one of the questions, and

227
00:14:29.314 --> 00:14:33.165
we'll actually get to this after
the exercise a little bit, but

228
00:14:33.165 --> 00:14:37.893
I'll answer it now as well, is what
happens if there are different payloads?

229
00:14:37.893 --> 00:14:43.825
In this case, let's say it
should be a number or a string.

230
00:14:43.825 --> 00:14:47.362
Or let's say my payload
was a simple thing,

231
00:14:47.362 --> 00:14:52.142
it could be something like,
the value should be a number and

232
00:14:52.142 --> 00:14:57.207
the, I'm having a hard time live
imagining what another thing

233
00:14:57.207 --> 00:15:02.480
the payload might need is location,
I don't know, as a string.

234
00:15:02.480 --> 00:15:04.684
And then you wanna have, or possibly just,

235
00:15:04.684 --> 00:15:08.574
you could have other data types in here
as well, so you can kinda define that.

236
00:15:08.574 --> 00:15:12.006
And we'll actually see a trick after the
next exercise of how to get a little bit

237
00:15:12.006 --> 00:15:13.414
more interesting around this.

238
00:15:13.414 --> 00:15:18.233
But you can basically kinda define
the shape, or you could have two different

239
00:15:18.233 --> 00:15:23.352
kinds of actions be like, it takes either
PizzaAction or something, where it's

240
00:15:23.352 --> 00:15:28.498
got a very similar shape and say like,
now this is this, or other action, right?

241
00:15:28.498 --> 00:15:34.213
So you can have a few different action
shapes, we'll actually see that a little

242
00:15:34.213 --> 00:15:39.772
bit more after we do our next exercise and
then we'll be able to rock and roll.

243
00:15:39.772 --> 00:15:42.481
So the question is,
it seems like because TypeScript is so

244
00:15:42.481 --> 00:15:46.131
ingrained in every piece of data, it
changes the shape of every piece of data,

245
00:15:46.131 --> 00:15:47.705
could create a snowball effect.

246
00:15:47.705 --> 00:15:49.553
Have you encountered this or
is it not a problem?

247
00:15:49.553 --> 00:15:55.132
Well, the interesting part is our data is
deeply ingrained into our applications.

248
00:15:55.132 --> 00:16:00.705
So prior to TypeScript, you might
change the shape of your data and

249
00:16:00.705 --> 00:16:05.680
then hope that you had enough
test coverage to track down all

250
00:16:05.680 --> 00:16:08.681
the places where it was important.

251
00:16:08.681 --> 00:16:13.361
One of the things that we're gonna see
later in this course is how we can be

252
00:16:13.361 --> 00:16:18.682
a little bit more flexible with our types,
we kinda saw that with the PizzaState.

253
00:16:18.682 --> 00:16:22.612
It was based off of the PizzaData, right?

254
00:16:22.612 --> 00:16:26.733
And so PizzaData changes when
PizzaState changes along with it.

255
00:16:26.733 --> 00:16:29.316
Well, a lot of times many of
our applications, the data, and

256
00:16:29.316 --> 00:16:32.760
especially in larger application,
is tightly ingrained with our application.

257
00:16:32.760 --> 00:16:37.530
And we hope that when we update it,
that we've tracked it down and

258
00:16:37.530 --> 00:16:39.014
found everywhere.

259
00:16:39.014 --> 00:16:42.764
TypeScript will at least
make it very obvious and

260
00:16:42.764 --> 00:16:48.257
give you red squiggly lines all over
the place where that has happened.

261
00:16:48.257 --> 00:16:52.130
So yeah, a lot of that is is depending
on the context and stuff like that,

262
00:16:52.130 --> 00:16:56.258
but generally speaking, I think that
TypeScript aids in the debugging, and

263
00:16:56.258 --> 00:17:00.449
it gives you in the same way unit tests
give you more confidence that that change

264
00:17:00.449 --> 00:17:03.142
you made didn't have
unintended consequences.

265
00:17:03.142 --> 00:17:09.019
I think that the type system in TypeScript
also gives you the confidence of yes,

266
00:17:09.019 --> 00:17:12.891
things broke,
maybe that's a good thing, right.

267
00:17:12.891 --> 00:17:18.246
But yeah, so I think that yes, it can
get a lot unwieldy, it can snowball.

268
00:17:18.246 --> 00:17:22.568
But I would argue that the problem with
snowballing, before you had TypeScript

269
00:17:22.568 --> 00:17:25.740
in there, you just had to do
more work to assess it all out.

