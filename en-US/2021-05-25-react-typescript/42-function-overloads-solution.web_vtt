WEBVTT

1
00:00:00.270 --> 00:00:04.721
I am back, and we are going to add some
types to this terrible TypeScript function

2
00:00:04.721 --> 00:00:07.665
cuz right now it just says
with any all over the place,

3
00:00:07.665 --> 00:00:10.036
which is why even have this in TypeScript?

4
00:00:10.036 --> 00:00:13.249
All right, so let's think about this,
like I said before,

5
00:00:13.249 --> 00:00:17.170
this case here has to be able to support,
any other possible conditions.

6
00:00:17.170 --> 00:00:23.258
And you can see that like passing that one
number, is already upsetting TypeScript.

7
00:00:23.258 --> 00:00:27.009
So first thing we know
that we need to do is,

8
00:00:27.009 --> 00:00:31.404
we need to say like that
b can be optional, right?

9
00:00:31.404 --> 00:00:32.779
That that appeased it but

10
00:00:32.779 --> 00:00:37.365
it still doesn't really kinda we still
have any all over the place, it's tricky.

11
00:00:37.365 --> 00:00:40.700
We know that one of the cases
is that it returns a number,

12
00:00:42.090 --> 00:00:44.770
Which now upsets it when we
try to return a function.

13
00:00:44.770 --> 00:00:47.821
Before it was, I'll take anything and
I'll return anything,

14
00:00:47.821 --> 00:00:49.638
I might as well not even be types here.

15
00:00:49.638 --> 00:00:53.357
But now we're saying, one of the cases
is that it could return a number, and

16
00:00:53.357 --> 00:00:57.370
we know that the other case is that it can
return a function, that takes a number and

17
00:00:57.370 --> 00:00:58.329
returns a number.

18
00:00:58.329 --> 00:01:02.751
And you can do this in line, and
if it makes you sad, you can pull it out.

19
00:01:02.751 --> 00:01:07.182
So we can say really if
you didn't have a b,

20
00:01:07.182 --> 00:01:13.834
let's take another may have
a function that takes a b argument,

21
00:01:13.834 --> 00:01:20.008
which should be a number, and
it returns a number, right?

22
00:01:20.008 --> 00:01:22.562
That that should work in a second
right right now it's angry,

23
00:01:22.562 --> 00:01:23.800
we had to put in parentheses.

24
00:01:24.860 --> 00:01:28.641
We in the messages helps too I don't know
that parentheses will work like that, but

25
00:01:28.641 --> 00:01:30.055
we can also pull it out as well.

26
00:01:30.055 --> 00:01:35.294
And so now this will
theoretically do the trick for

27
00:01:35.294 --> 00:01:39.420
us, we'll deal with that in a second.

28
00:01:39.420 --> 00:01:45.660
But we have the situation where
the function it'll either has an a,

29
00:01:45.660 --> 00:01:49.601
it possibly takes a b, or return a number,

30
00:01:49.601 --> 00:01:54.090
or a function that will return a number.

31
00:01:54.090 --> 00:02:00.054
Cool, so that'll work for us, but we wanna
add those overloads in there as well.

32
00:02:00.054 --> 00:02:04.173
So, the two signatures that we want to
take two arguments, you get back a number,

33
00:02:04.173 --> 00:02:07.158
one argument you get back
a function that takes a number, so

34
00:02:07.158 --> 00:02:10.360
let's start with the easier one so
this a function.

35
00:02:10.360 --> 00:02:16.380
Again it looks exactly the first
line in a function declaration so

36
00:02:16.380 --> 00:02:21.754
we'll say in this case a is number,
and b is also a number.

37
00:02:21.754 --> 00:02:26.182
So now it's no longer optional
in this case in that case,

38
00:02:26.182 --> 00:02:29.020
we will in fact, return a number.

39
00:02:29.020 --> 00:02:32.812
Cool, and that is making everything happy
except for the ones when I pass one in

40
00:02:32.812 --> 00:02:35.801
there, so let's actually support
that use case as well, and

41
00:02:35.801 --> 00:02:38.061
you can see those got
really angry down there.

42
00:02:38.061 --> 00:02:42.377
And so in worst case we have one that only
supports a number, in this case it will be

43
00:02:42.377 --> 00:02:49.642
that, Second piece here, And
now TypeScript is happy.

44
00:02:49.642 --> 00:02:53.816
If you give back two numbers, it knows
it's the version that takes two numbers

45
00:02:53.816 --> 00:02:58.053
and returns a number, if you give it one
number, it knows it's the version that

46
00:02:58.053 --> 00:03:02.320
takes one number and returns a function
waiting for the second number, right?

47
00:03:02.320 --> 00:03:06.048
So we've now given this add function
to different function signatures,

48
00:03:06.048 --> 00:03:07.682
depending on how it was called.

49
00:03:07.682 --> 00:03:11.869
And TypeScript can now confirm and
now it's not giving you like yeah,

50
00:03:11.869 --> 00:03:16.189
it could be a function or it could be
a number or anything along those lines,

51
00:03:16.189 --> 00:03:19.983
it now knows kind of deterministically
the two that it supports.

52
00:03:19.983 --> 00:03:24.590
So it can winded down but
again this line here has to be

53
00:03:24.590 --> 00:03:28.883
kind of the cover all your bases,
it will work and

54
00:03:28.883 --> 00:03:34.672
then you can basically refine
the type above with the overloads.

55
00:03:34.672 --> 00:03:38.531
All right, so now let's bring
that into a react situation.

56
00:03:41.788 --> 00:03:48.656
Right, so we're gonna go into this
demanding props based on other props,

57
00:03:48.656 --> 00:03:53.780
and we have a version of our
text component from before,

58
00:03:53.780 --> 00:03:57.283
and it can be expanded and truncated.

59
00:03:57.283 --> 00:03:59.777
And let's open this app real quick, so

60
00:03:59.777 --> 00:04:02.807
there's two props here
we'll see in a second.

61
00:04:02.807 --> 00:04:09.320
We we wanna say is,
that we can only use the expanded boolea,

62
00:04:09.320 --> 00:04:12.530
if it's truncated, right?

63
00:04:12.530 --> 00:04:15.820
We don't wanna support saying
expand is true or false,

64
00:04:15.820 --> 00:04:17.780
if it's not truncated, right?

65
00:04:17.780 --> 00:04:22.738
Again, this is one of those things
where in a component library you just

66
00:04:22.738 --> 00:04:27.877
wanna be deterministic, on how your
code is expected to be used, right?

67
00:04:27.877 --> 00:04:34.039
So right now I could totally take out
truncate, and expanded as still supported,

68
00:04:34.039 --> 00:04:40.254
I wanna make, Truncated or truncate yes or

69
00:04:40.254 --> 00:04:45.474
no for that one but like you cannot use
expanded unless truncate is included,

70
00:04:45.474 --> 00:04:49.750
that is that is the goal of what
we are seeking to do in this case.

71
00:04:51.410 --> 00:04:57.840
All right, so we have to make three
combinations of this component.

72
00:04:57.840 --> 00:05:02.945
Just every use case which is what we have,
right we're already one-third

73
00:05:02.945 --> 00:05:08.310
of the way there, we have the one that
can handle either truncate or expanded.

74
00:05:10.930 --> 00:05:16.370
Now we wanna to have one that is just
truncate with no expanded prop whatsoever,

75
00:05:16.370 --> 00:05:20.362
and then we want truncate and
the optional expanded prop.

76
00:05:20.362 --> 00:05:24.279
Now what's important there
is what we don't have,

77
00:05:24.279 --> 00:05:28.374
which is we're not going
to write an implementation,

78
00:05:28.374 --> 00:05:33.818
that supports having an expanded
prop without a truncate prop, right?

79
00:05:33.818 --> 00:05:37.769
So expanded should only
exist if truncate is true.

80
00:05:39.140 --> 00:05:40.661
All right, so how would this look?

81
00:05:40.661 --> 00:05:42.690
Well we've got TextProps and

82
00:05:42.690 --> 00:05:47.479
TextProps will end up being that
pattern that we've used a few times so

83
00:05:47.479 --> 00:05:52.930
far which is, what are the common things
remember we did this to the buttons.

84
00:05:52.930 --> 00:05:55.368
We had one with primary was a boolean, but

85
00:05:55.368 --> 00:05:59.145
the other two were never we had
all the different combinations.

86
00:05:59.145 --> 00:06:02.949
But the idea that there was a child
react child, their children,

87
00:06:02.949 --> 00:06:07.530
was common to all the different iterations
that we might have around the type.

88
00:06:08.570 --> 00:06:15.315
So we'll keep that, and we'll make
a type called NoTruncateTextProps,

89
00:06:18.574 --> 00:06:25.667
Which is everything
that's in TextProps plus,

90
00:06:25.667 --> 00:06:31.040
we're gonna say truncate is false.

91
00:06:31.040 --> 00:06:35.754
Just to kind of be clear about this,
we're not saying that's the boolean,

92
00:06:35.754 --> 00:06:40.260
we're saying that this is a version
where it is set to false in this case.

93
00:06:42.940 --> 00:06:49.962
And then we will have another version
called TruncateTextProps, and

94
00:06:49.962 --> 00:06:56.991
that is going to be TextProps,
in a situation where truncate is true.

95
00:06:56.991 --> 00:07:03.900
And of truncate is true,
then expanded can be a boolean.

96
00:07:03.900 --> 00:07:07.928
So what we don't have is a situation
where truncate is false and

97
00:07:07.928 --> 00:07:10.673
expanded exist on the type at all, right?

98
00:07:10.673 --> 00:07:14.304
Or once we move it from here,
so this is the children,

99
00:07:14.304 --> 00:07:18.442
this is a version that where
truncate is false or undefined.

100
00:07:18.442 --> 00:07:22.895
And this is one where it's true and
then we will take an expanded prop, so

101
00:07:22.895 --> 00:07:27.786
if truncate doesn't exist, there's no
world where we take an expanded prop.

102
00:07:27.786 --> 00:07:31.476
Now we need to add those
additional signatures,

103
00:07:31.476 --> 00:07:35.880
on top of the component, so
those will go right here.

104
00:07:35.880 --> 00:07:39.378
The other thing you'll notice that like,

105
00:07:39.378 --> 00:07:45.500
generally speaking this course I prefer
arrow functions just cuz I do but,

106
00:07:45.500 --> 00:07:50.651
with overloads I don't believe
there is a syntax that supports

107
00:07:50.651 --> 00:07:56.011
arrow functions so, you have to
do it as a function declaration.

108
00:07:56.011 --> 00:08:03.522
So here one that is text and that is going
to be where the props are the NoTruncate,

109
00:08:05.155 --> 00:08:09.121
TextProps, and
will return the JSX.Element.

110
00:08:15.206 --> 00:08:22.173
We'll have a situation where we
do have the TruncateTextProps,

111
00:08:25.036 --> 00:08:28.975
And will return a JSX.Element,
JSX has a red squiggly line,

112
00:08:28.975 --> 00:08:33.517
just cuz code sandbox is es lint,
is like I don't know what that is, but

113
00:08:33.517 --> 00:08:37.870
it's supported in the react types so
don't stress out about that.

114
00:08:37.870 --> 00:08:42.100
And then finally we'll have
the kind of base case here,

115
00:08:42.100 --> 00:08:47.322
which we could have common TextProps or
something like that as well,

116
00:08:47.322 --> 00:08:50.760
I'm just gonna write it
in line in this case.

117
00:08:50.760 --> 00:08:57.707
Where it's gonna be, We'll say it's,

118
00:09:00.303 --> 00:09:05.453
TextProps, so that common one, and

119
00:09:05.453 --> 00:09:12.610
then it's basically what we had earlier,
right?

120
00:09:12.610 --> 00:09:16.782
Where we had the two optional
ones cuz again every

121
00:09:16.782 --> 00:09:21.068
situation that could happen
has to be supported.

122
00:09:21.068 --> 00:09:26.886
So we could say this point
that truncate is optional,

123
00:09:27.899 --> 00:09:31.788
Is and is Boolean, And expanded.

124
00:09:31.788 --> 00:09:38.276
It's optional and it's a boolean as well,
so basically what we had originally.

125
00:09:38.276 --> 00:09:42.432
And now you can see that we've got
the kind of base case that we had before,

126
00:09:42.432 --> 00:09:45.340
plus these two refinements on it.

127
00:09:45.340 --> 00:09:49.724
So now if we go ahead and
we remove truncate, it's angry with us.

128
00:09:49.724 --> 00:09:54.072
It's you can't expand something
that's not truncated, but

129
00:09:54.072 --> 00:09:56.377
we can remove expanded, right?

130
00:09:56.377 --> 00:10:00.965
So again, the theme that we've been
hammering on here is the ability to be

131
00:10:00.965 --> 00:10:06.072
a little bit just more intentional about
how you expect this component to be used.

132
00:10:06.072 --> 00:10:11.052
To hopefully reduce edge cases right
again that kind of pseudoscience doesn't

133
00:10:11.052 --> 00:10:15.956
feel fair because I'm sure there was some
research done into the idea of having

134
00:10:15.956 --> 00:10:19.098
a type system reduces bugs by 15% or
whatever.

135
00:10:19.098 --> 00:10:23.984
You can see where that would come
from at least, the idea that we're

136
00:10:23.984 --> 00:10:29.482
covering just enough edge cases in how
we get sophisticated with our types.

137
00:10:29.482 --> 00:10:34.795
That a whole bunch of just ways that
a component might accidentally be used,

138
00:10:34.795 --> 00:10:38.289
are no longer allowed by our type system,
right?

139
00:10:38.289 --> 00:10:43.554
And so we can do that as well,
all right great, question.

140
00:10:43.554 --> 00:10:48.948
Yeah, the chat points out that function
declarations are also preferred

141
00:10:48.948 --> 00:10:55.350
cuz they hoisted better and you can
actually use them and define them below.

142
00:10:55.350 --> 00:11:01.337
Yeah there's a lot of reasons why a lot of
people still prefer function declarations,

143
00:11:01.337 --> 00:11:03.370
it's a matter of choice.

144
00:11:03.370 --> 00:11:08.079
If you use a function expression,
you have to define it before you use it.

145
00:11:08.079 --> 00:11:10.537
And it used to be in
the chrome tools that,

146
00:11:10.537 --> 00:11:14.560
you wouldn't get the name of
the function and your error messages.

147
00:11:14.560 --> 00:11:19.446
The developer tools have gotten better
where you actually will get the name of

148
00:11:19.446 --> 00:11:23.175
the function even if you
use a function expression.

149
00:11:23.175 --> 00:11:27.508
But they behave slightly differently, this
kind of goes back I think we talked about

150
00:11:27.508 --> 00:11:32.025
this briefly when we talked about types
and interfaces where they're 90% the same,

151
00:11:32.025 --> 00:11:33.389
but slightly different.

152
00:11:33.389 --> 00:11:38.378
And you need to be aware of the fact that
they could behave slightly differently but

153
00:11:38.378 --> 00:11:41.791
it ultimately does come down
to a matter of preference.

154
00:11:41.791 --> 00:11:44.251
I'm gonna walk a very fine line here,
how about this?

155
00:11:44.251 --> 00:11:47.546
I think that function declarations
are probably the better choice, but

156
00:11:47.546 --> 00:11:50.310
I still write function expressions
using arrow functions.

