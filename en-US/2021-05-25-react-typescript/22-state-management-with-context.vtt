WEBVTT

1
00:00:00.510 --> 00:00:02.451
This gets a little bit trickier, however,

2
00:00:02.451 --> 00:00:04.820
when we think about the piece
with state management.

3
00:00:06.980 --> 00:00:10.942
Because the paradox that
we have to solve for

4
00:00:10.942 --> 00:00:16.403
with TypeScript is you cannot
create like a set, if you use,

5
00:00:16.403 --> 00:00:22.742
you state, you can't create the like
setter outside of a component.

6
00:00:22.742 --> 00:00:26.581
You can only use hooks inside
of a functional component and

7
00:00:26.581 --> 00:00:30.341
you can only create your
context outside of a component,

8
00:00:30.341 --> 00:00:34.904
right because you can't export
anything from inside of component.

9
00:00:34.904 --> 00:00:39.418
So, create contacts needs to get
called outside of a component but

10
00:00:39.418 --> 00:00:44.737
if you want access to dispatch, or if you
want access to set name or set whatever

11
00:00:44.737 --> 00:00:50.155
the US state is that you're setting like
you can only do that inside of the hook.

12
00:00:50.155 --> 00:00:54.887
Which the conundrum that creates for
ourselves ourselves is,

13
00:00:54.887 --> 00:00:59.528
by definition, we are not going
to have all of the information

14
00:00:59.528 --> 00:01:04.189
TypeScript needs when we create
the context to make it happy.

15
00:01:04.189 --> 00:01:08.795
And there are three ways that we can
solve for this, we'll do two now,

16
00:01:08.795 --> 00:01:11.074
one at the very end of this course.

17
00:01:11.074 --> 00:01:14.163
I'm gonna argue that the second
is probably our best choice, but

18
00:01:14.163 --> 00:01:17.474
the it's like one of those things,
the third is the correct choice and

19
00:01:17.474 --> 00:01:19.810
the second is the best choice.

20
00:01:19.810 --> 00:01:22.600
We're gonna look at
different ways to solve for

21
00:01:22.600 --> 00:01:24.910
that problem in TypeScript and react.

22
00:01:24.910 --> 00:01:25.906
So let's make a new one,

23
00:01:25.906 --> 00:01:28.410
I'm gonna call this one just
I'll call this one context TSX.

24
00:01:28.410 --> 00:01:31.465
This is the kind of the more real one,

25
00:01:31.465 --> 00:01:35.710
it has what we already
have that file in here.

26
00:01:35.710 --> 00:01:38.270
So we've got context TSX,
right now it's an empty file.

27
00:01:39.330 --> 00:01:43.983
And again, the state in this application
is red, green and blue values that's

28
00:01:43.983 --> 00:01:49.080
effective was passed all these inputs,
it's a fact of the past is color swatch.

29
00:01:49.080 --> 00:01:49.593
It is so

30
00:01:49.593 --> 00:01:54.556
we can define that right now there is
an RGB color type that we can use.

31
00:01:57.191 --> 00:01:59.166
And so what we can do is we can do import.

32
00:02:01.161 --> 00:02:06.184
RGB color type, and we'll bring that,

33
00:02:06.184 --> 00:02:09.000
from dot slash types.

34
00:02:10.370 --> 00:02:15.274
So one thing to note that we haven't
really seen before right now is that

35
00:02:15.274 --> 00:02:20.344
you can import and export types just
as you would import export JavaScript

36
00:02:20.344 --> 00:02:25.762
functions or objects or primitives and
stuff along that it works the same way.

37
00:02:25.762 --> 00:02:31.364
It all gets stripped out of your code
because TypeScript is not necessarily.

38
00:02:31.364 --> 00:02:34.699
Is that without running TypeScript in
the browser where JavaScript is coming

39
00:02:34.699 --> 00:02:38.032
out the other end, this is kind of a
compile time check, but you can import and

40
00:02:38.032 --> 00:02:40.540
export things and
kind of pass them around like that.

41
00:02:40.540 --> 00:02:44.906
So I pulled in this color type, which is
an interface actually, which again, for

42
00:02:44.906 --> 00:02:49.274
our purposes, there's no practical
difference in the in how we're using them,

43
00:02:49.274 --> 00:02:52.461
like that's not to say like we
looked at the chart earlier.

44
00:02:52.461 --> 00:02:56.416
There are differences, but for our use
case, I chose to use interfaces one just

45
00:02:56.416 --> 00:02:59.972
to demonstrate some of the how the syntax
can be a little bit different.

46
00:02:59.972 --> 00:03:03.956
And so the RGB color type is
simply if we go and click on it or

47
00:03:03.956 --> 00:03:07.660
you actually hold command and
see it as well.

48
00:03:07.660 --> 00:03:12.364
It's red, green and blue and their
numbers I'll just show you that again.

49
00:03:12.364 --> 00:03:14.830
As you can see, you can kind of see
it if you, if you hold him out.

50
00:03:16.090 --> 00:03:21.307
All right, so really all that
our our state is gonna be for

51
00:03:21.307 --> 00:03:26.320
this context API is those
three values plus dispatch.

52
00:03:27.930 --> 00:03:29.584
And so if I go into my reducer,

53
00:03:29.584 --> 00:03:34.431
there's also before we made those counter
actions and the calculator pizza actions.

54
00:03:34.431 --> 00:03:35.722
If you go into the reducer,

55
00:03:35.722 --> 00:03:38.590
you can see I have this idea of
an adjustment action as well.

56
00:03:38.590 --> 00:03:43.517
So we know what it's gonna dispatch, and
we saw before that the type is gonna be

57
00:03:43.517 --> 00:03:47.620
dispatched with of the actions
it expects to dispatch.

58
00:03:47.620 --> 00:03:50.880
So, we're gonna run into the problem with
the fact that like, I will not have this

59
00:03:50.880 --> 00:03:54.540
when we just define the context and that's
what we're gonna try to work around.

60
00:03:54.540 --> 00:03:59.318
But let's at least get
to the point where we

61
00:03:59.318 --> 00:04:03.711
can say interface is RGB context type.

62
00:04:09.980 --> 00:04:12.960
Now we'll extend this RGB color type.

63
00:04:12.960 --> 00:04:17.860
So the red green and
blue plus dispatch should be

64
00:04:17.860 --> 00:04:23.296
react dispatch, adjustment action.

65
00:04:23.296 --> 00:04:24.720
All right.

66
00:04:24.720 --> 00:04:29.788
So what I would normally do at this
point is I would pass in the red,

67
00:04:29.788 --> 00:04:34.131
green blue default values
plus the dispatch function.

68
00:04:34.131 --> 00:04:37.302
So, I could use it throughout
my application, but

69
00:04:37.302 --> 00:04:41.283
as I kind of mentioned earlier,
one of the problems that I have,

70
00:04:41.283 --> 00:04:45.661
is I can only create dispatch inside
of a react component using hooks.

71
00:04:45.661 --> 00:04:50.587
And I can only create my context outside
of a reaction point where I can't

72
00:04:50.587 --> 00:04:51.630
use hooks.

73
00:04:51.630 --> 00:04:57.372
Which means there will be a brief moment
in time where I don't have dispatch yet

74
00:04:57.372 --> 00:05:02.163
even though TypeScript is expecting
that as part of that object.

75
00:05:02.163 --> 00:05:04.360
And that is gonna be what we
have to try to deal with.

76
00:05:04.360 --> 00:05:09.515
So at this point,
we will export this constant of RGB

77
00:05:09.515 --> 00:05:14.802
context that's gonna be
this react create context.

78
00:05:14.802 --> 00:05:18.990
And I don't really have anything to pass
in there yet, it's like a pass it no.

79
00:05:18.990 --> 00:05:21.797
And if you remember from our use
state example before you can

80
00:05:21.797 --> 00:05:24.550
see like kinda where this is
gonna eventually lead us, but

81
00:05:24.550 --> 00:05:26.480
we'll deal with that when we get there.

82
00:05:29.280 --> 00:05:33.240
So yeah, I could put in what
type it should be in here,

83
00:05:33.240 --> 00:05:37.640
I'm gonna get yelled at but
we do know if we're being fair,

84
00:05:37.640 --> 00:05:40.813
we do know that it is
this RGB context type.

85
00:05:44.948 --> 00:05:49.317
Right, and now it's angry cuz Nelly is
not something that conforms to that type,

86
00:05:49.317 --> 00:05:51.995
like I said,
we will deal with that momentarily.

87
00:05:53.085 --> 00:05:54.961
Let's actually get the provider up and
running again.

88
00:06:00.562 --> 00:06:02.409
So RGB contacts provider.

89
00:06:05.990 --> 00:06:09.335
This point will have children and

90
00:06:09.335 --> 00:06:13.998
children is gonna be of the type,
react node.

91
00:06:19.254 --> 00:06:24.169
And what that's going to do is
we'll this is where we'll get to

92
00:06:24.169 --> 00:06:28.170
use our use reducer, and
we're gonna get our RGB.

93
00:06:28.170 --> 00:06:32.496
In fact,
it's actually the colors in this case,

94
00:06:32.496 --> 00:06:38.680
yeah their state is simply RGB, and
we'll have that dispatch as well.

95
00:06:38.680 --> 00:06:42.168
And that will be react, use reducer,

96
00:06:42.168 --> 00:06:47.401
pass in the reducer that will
auto import from that file.

97
00:06:49.660 --> 00:06:54.634
And we know that this reducer
is expecting RGB color type,

98
00:06:54.634 --> 00:06:59.201
I can define one explicitly or
as long as it conforms to

99
00:06:59.201 --> 00:07:04.192
the value as we've seen before,
red, green, and blue.

100
00:07:04.192 --> 00:07:08.885
I don't have to say like,
as long as testing can confirm, it's okay,

101
00:07:08.885 --> 00:07:12.460
I don't necessarily have
to tell it anything.

102
00:07:12.460 --> 00:07:20.131
Neat, and then we'll just
return RGB context dot provider

103
00:07:25.469 --> 00:07:30.711
Children And

104
00:07:30.711 --> 00:07:33.760
it wants a value,
I get my curly brace there.

105
00:07:34.960 --> 00:07:40.956
It wants a value, and
we'll give it three colors,

106
00:07:40.956 --> 00:07:48.499
plus dispatch and I gotta add
a second set of curly braces there.

107
00:07:48.499 --> 00:07:49.142
All right, so

108
00:07:49.142 --> 00:07:52.688
we've got all of that in place, I probably
made a boo boo somewhere over here.

109
00:07:52.688 --> 00:07:56.890
Let's see, X are not const there we go.

110
00:07:58.630 --> 00:08:04.130
And we've got that ready to use, and so
now we can just wrap it in index as well.

111
00:08:23.390 --> 00:08:26.809
Crop, and so
now that's available for us, and

112
00:08:26.809 --> 00:08:31.340
we can pull it into color sliders and
color swatch.

113
00:08:31.340 --> 00:08:33.333
I'm only gonna worry about the sliders for
now,

114
00:08:33.333 --> 00:08:36.400
I'm gonna deal with the input
fields in a little bit.

115
00:08:36.400 --> 00:08:41.024
So for the sliders, we're just gonna say
Instead of passing all these items in,

116
00:08:41.024 --> 00:08:43.824
we don't really need to
pass anything anymore.

117
00:08:43.824 --> 00:08:46.264
Now we can not because we'll
get it off in the context,

118
00:08:46.264 --> 00:08:48.750
I'll delete that in a second though.

119
00:08:48.750 --> 00:08:53.505
Colors will say red, green and blue,

120
00:08:53.505 --> 00:08:57.820
dispatch will equal use context.

121
00:09:02.960 --> 00:09:03.499
Give it the RGB context.

122
00:09:07.149 --> 00:09:10.495
Cool and those are w defines,
we'll just get rid of those as well.

123
00:09:13.361 --> 00:09:17.852
And we've got all that in place, and
we'll get something similar here for

124
00:09:17.852 --> 00:09:20.643
the color swatch,
which will need it as well.

125
00:09:33.642 --> 00:09:35.970
I don't need dispatch in this case.

126
00:09:35.970 --> 00:09:36.690
All right.

