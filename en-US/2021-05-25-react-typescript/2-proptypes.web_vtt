WEBVTT

1
00:00:00.190 --> 00:00:01.420
Here we've got a component.

2
00:00:01.420 --> 00:00:04.995
And this is arguably too
simple of a component.

3
00:00:04.995 --> 00:00:08.170
The fun game like, is this TypeScript or
is this JavaScript?

4
00:00:09.170 --> 00:00:11.300
The answer is, yes.

5
00:00:11.300 --> 00:00:15.030
But also this is a component that
could very clearly just be HTML.

6
00:00:15.030 --> 00:00:18.918
But the kind of interesting part
that we kind of see here is that,

7
00:00:18.918 --> 00:00:21.729
we go TypeScript,
this is a TypeScript file.

8
00:00:21.729 --> 00:00:26.234
It has a TSX extension, TypeScriptX,
right, just like JSX for

9
00:00:26.234 --> 00:00:28.500
our react components.

10
00:00:28.500 --> 00:00:29.957
And as we hover over things,

11
00:00:29.957 --> 00:00:33.490
we can see that we're getting some
autocomplete help here, right?

12
00:00:33.490 --> 00:00:36.856
And so TypeScript has looked at this
component, which again, if I didn't show

13
00:00:36.856 --> 00:00:40.489
you the file name or anything along those
lines, you just assumed it was JavaScript.

14
00:00:40.489 --> 00:00:45.244
Go ahead and figured out, this is
a function that takes no arguments and

15
00:00:45.244 --> 00:00:47.268
returns a JSX element, right?

16
00:00:47.268 --> 00:00:53.130
With basically no extra ceremony that
we have to work or worry about at all.

17
00:00:53.130 --> 00:00:56.751
And you can kinda see as we go through
it has figured that all out just through

18
00:00:56.751 --> 00:00:57.685
static analysis.

19
00:00:59.164 --> 00:01:02.790
And we have had other ways to
kind of make sure that our react

20
00:01:02.790 --> 00:01:07.462
components get the properties that we
think that they should get, right?

21
00:01:07.462 --> 00:01:12.388
A popular ish library has been prop types,
right?

22
00:01:12.388 --> 00:01:16.646
Prop types were basically the way
in development you can define what

23
00:01:16.646 --> 00:01:19.150
properties a component takes.

24
00:01:19.150 --> 00:01:24.518
And in the event that you give it the
wrong one just either from a mistake or

25
00:01:24.518 --> 00:01:27.425
just an error somewhere along the way.

26
00:01:27.425 --> 00:01:31.357
It would give you a warning in your
console as you ran the application to see

27
00:01:31.357 --> 00:01:33.705
like, hey, this was expecting an object,

28
00:01:33.705 --> 00:01:36.254
you pass it a string
that's not gonna work now.

29
00:01:36.254 --> 00:01:41.014
This is at runtime involved you actually
checking all that stuff in the console, so

30
00:01:41.014 --> 00:01:42.449
on and so forth, right?

31
00:01:42.449 --> 00:01:45.967
TypeScript and it's very,
very highest level,

32
00:01:45.967 --> 00:01:49.077
seeks to give you an easier
kind of way to do.

33
00:01:49.077 --> 00:01:53.664
And it's actually less writing and less
code than having to do it with the library

34
00:01:53.664 --> 00:01:58.380
that used to be included in react and
then got pulled out into its own library.

35
00:01:58.380 --> 00:02:00.859
So what would that look like
if we didn't have TypeScript?

36
00:02:00.859 --> 00:02:01.714
We would

37
00:02:10.669 --> 00:02:12.080
From prop types.

38
00:02:12.080 --> 00:02:14.024
And then we might say,
let's say, hypothetically,

39
00:02:14.024 --> 00:02:15.811
when I wanted to put a name
where it says name here.

40
00:02:15.811 --> 00:02:18.112
That seems like a good thing to do.

41
00:02:18.112 --> 00:02:21.988
We can go ahead and we would say
something along the lines of name.

42
00:02:26.349 --> 00:02:28.947
And then we'll go toss it right in here.

43
00:02:28.947 --> 00:02:31.342
And you can see TypeScript getting
a little angry at me right now.

44
00:02:31.342 --> 00:02:33.310
We're not gonna deal with that just yet.

45
00:02:33.310 --> 00:02:36.000
We're gonna read there and
we're gonna figure that out in a second.

46
00:02:36.000 --> 00:02:37.173
But you prop in that name and

47
00:02:37.173 --> 00:02:39.776
then we would say something along
the lines of like name tag.

48
00:02:51.449 --> 00:02:53.448
Right, and this is how we might
have done it in JavaScript.

49
00:02:54.712 --> 00:02:58.333
Now, let's look at what that would look
like if we factored into TypeScript using

50
00:02:58.333 --> 00:02:59.227
a react component.

51
00:03:00.480 --> 00:03:01.526
So you can see we got name.

52
00:03:01.526 --> 00:03:06.302
Now, the interesting part is
TypeScript's yelling at us saying,

53
00:03:06.302 --> 00:03:09.160
hey, this name has a type of any.

54
00:03:09.160 --> 00:03:10.563
And any is TypeScript,

55
00:03:10.563 --> 00:03:14.294
almost basically falling back
into what JavaScript would do.

56
00:03:14.294 --> 00:03:17.545
And such as saying, like,
I don't know what this is.

57
00:03:17.545 --> 00:03:19.495
So I'm basically just gonna be hands off.

58
00:03:19.495 --> 00:03:23.295
It could be a number, it could be
a boolean, it could be a string.

59
00:03:23.295 --> 00:03:26.837
I don't really know, I cannot help
you here in any way, shape or form.

60
00:03:26.837 --> 00:03:28.962
And there's a bunch of ways to do this.

61
00:03:28.962 --> 00:03:31.624
There's a setting in TypeScript
called no implicit any,

62
00:03:31.624 --> 00:03:34.025
which means your code won't
compile if you do this.

63
00:03:34.025 --> 00:03:37.414
Because a lot of times, if you're gonna
opt into the TypeScript lifestyle,

64
00:03:37.414 --> 00:03:38.781
like roughly what you want is.

65
00:03:38.781 --> 00:03:40.731
[LAUGH] You're gonna fall
back to any all the time,

66
00:03:40.731 --> 00:03:42.549
you might as well just
be writing JavaScript.

67
00:03:42.549 --> 00:03:46.154
So let's see what this would
look like in TypeScript instead,

68
00:03:46.154 --> 00:03:49.090
we're gonna see is actually
a little bit simpler.

69
00:03:49.090 --> 00:03:54.239
So, instead of having this over here,
let's actually just move it up Here and

70
00:03:54.239 --> 00:04:00.190
we're gonna call it name tag props,
all right?

71
00:04:00.190 --> 00:04:04.294
And that's simply going to be,
give it the type keyword.

72
00:04:08.030 --> 00:04:10.027
We're gonna say the name
is a type of string.

73
00:04:11.744 --> 00:04:13.622
And here we'll say this is name tag props.

74
00:04:14.773 --> 00:04:17.328
Now, we have a new error down below or

75
00:04:17.328 --> 00:04:21.049
red squiggly line is TypeScript
being salty with us.

76
00:04:21.049 --> 00:04:24.202
And we'll need to address
that in a second.

77
00:04:24.202 --> 00:04:28.360
But you can see roughly a lot
of the syntax is the same.

78
00:04:28.360 --> 00:04:32.173
We have this type keyword, like I said,
if you think about like cost or lead or

79
00:04:32.173 --> 00:04:34.010
something along those lines.

80
00:04:34.010 --> 00:04:36.580
When this gets compiled to JavaScript
that's gonna get ripped out.

81
00:04:36.580 --> 00:04:39.299
So this is not going to bloat our code or
anything along those lines.

82
00:04:39.299 --> 00:04:43.420
And you can see that we've
got this name tag props.

83
00:04:43.420 --> 00:04:44.997
And again, like, really,

84
00:04:44.997 --> 00:04:48.510
the argument that's passed to
a react component is props.

85
00:04:48.510 --> 00:04:51.643
And so we could say,
props dot name, either one,

86
00:04:51.643 --> 00:04:54.730
whichever makes you happier is fine.

87
00:04:54.730 --> 00:04:56.178
Now, interesting part is that,

88
00:04:56.178 --> 00:04:59.334
TypeScript has found that despite
what we told it about this component,

89
00:04:59.334 --> 00:05:02.350
if we hover over you can kind of see
a little bit more about it, right?

90
00:05:02.350 --> 00:05:06.459
It's got these props which are named tag
props, it's gonna return a JSX element.

91
00:05:06.459 --> 00:05:08.710
We hover over here,
we can say a name tag props though.

92
00:05:08.710 --> 00:05:13.570
Assuming that there's one prop that has
a name, and it should be a string, neat.

93
00:05:13.570 --> 00:05:16.859
Okay, what's this red squiggly
line that so upset with me?

94
00:05:16.859 --> 00:05:21.900
It's saying, hey, you told me
this is supposed to have a name?

95
00:05:21.900 --> 00:05:26.500
And you're using this without a name,
that's not good, right?

96
00:05:26.500 --> 00:05:30.158
And to be clear, if you wanted to have
like a nickname be an optional prop,

97
00:05:30.158 --> 00:05:32.120
we'll talk about that a little bit.

98
00:05:32.120 --> 00:05:33.290
There's all sorts of things you can do.

99
00:05:33.290 --> 00:05:36.314
But right now, you said the intention of
this code is that it gets a name, prop.

100
00:05:36.314 --> 00:05:38.559
That name prop is a string,
and I wanna use it and

101
00:05:38.559 --> 00:05:40.536
then you use the component without that.

102
00:05:40.536 --> 00:05:41.638
So, let's go make it happy.

103
00:05:45.919 --> 00:05:49.580
And now my code is happy,
everything works.

104
00:05:49.580 --> 00:05:54.843
So, just quick little tasty notes here is
you could theoretically do this in line,

105
00:05:54.843 --> 00:05:55.610
right?

106
00:05:55.610 --> 00:06:02.688
We could say something along
the lines of Name is string and

107
00:06:02.688 --> 00:06:04.650
everything works as well.

108
00:06:04.650 --> 00:06:08.038
This is fine, we'll use it
occasionally during this workshop,

109
00:06:08.038 --> 00:06:09.770
this course when it behooves us.

110
00:06:09.770 --> 00:06:12.920
But generally speaking, you can imagine
that with one prop, that's a string,

111
00:06:12.920 --> 00:06:13.990
no big deal.

112
00:06:13.990 --> 00:06:18.709
All of a sudden you have one of those
more complicated components that has ten

113
00:06:18.709 --> 00:06:23.000
different props doing it in line,
is going to get a little bit messy.

114
00:06:23.000 --> 00:06:27.030
If you move it into a type up here as
well, you can do stuff like export, and

115
00:06:27.030 --> 00:06:29.110
you can then import into other files.

116
00:06:29.110 --> 00:06:32.320
So, doing it in a type declaration
makes a lot more sense.

117
00:06:32.320 --> 00:06:36.519
But you don't have to,
if you don't want to.

118
00:06:36.519 --> 00:06:38.071
You're the boss of your life.

119
00:06:39.466 --> 00:06:42.507
And so we have this here as well,
let's switch that back just to make sense,

120
00:06:43.814 --> 00:06:50.290
Name tag props,
everything compiles as it should, sweep.

121
00:06:50.290 --> 00:06:53.170
We can see, I have a little component,
it renders a name tag.

122
00:06:53.170 --> 00:06:55.113
We're good to go in that sense.

