WEBVTT

1
00:00:00.170 --> 00:00:06.203
Do a little bit of refactoring just
to see some of this in action.

2
00:00:08.524 --> 00:00:12.700
So, I am going to take the character
cards that we saw earlier.

3
00:00:12.700 --> 00:00:13.200
Layer.

4
00:00:16.067 --> 00:00:21.850
And you can see that if
I go into table row,

5
00:00:26.314 --> 00:00:29.477
We say, okay, we have this idea
of a table row on that card and

6
00:00:29.477 --> 00:00:32.030
just to remind you what they look like.

7
00:00:32.030 --> 00:00:34.170
This is the table row over here.

8
00:00:35.240 --> 00:00:40.335
We have all the factors that are on one of
these characters; alignment intelligence,

9
00:00:40.335 --> 00:00:43.540
strength, speed, so on and so forth.

10
00:00:43.540 --> 00:00:47.876
The table row or cell says give
me a heading of a string and

11
00:00:47.876 --> 00:00:52.920
give me a value that is either a string,
or a number.

12
00:00:52.920 --> 00:00:57.677
And that's cool, but like I would
love if I could give myself some

13
00:00:57.677 --> 00:01:03.059
protection to not miss type,
like literally misspell one of those rows.

14
00:01:04.530 --> 00:01:10.175
I want to like instead of being no
pass in anything I wanna say no,

15
00:01:10.175 --> 00:01:13.637
I want to give you like one of the known.

16
00:01:13.637 --> 00:01:18.524
One of the known things that are going
to be on that character type is

17
00:01:18.524 --> 00:01:20.717
defined if we look at it here.

18
00:01:22.595 --> 00:01:25.570
I believe it's in character
information characters.

19
00:01:25.570 --> 00:01:26.220
Yeah.

20
00:01:26.220 --> 00:01:28.770
Like we know what's on a character object.

21
00:01:28.770 --> 00:01:32.031
I would love to only be able
to pass in one of these.

22
00:01:32.031 --> 00:01:35.356
And not be able to like misspell
something right, and so

23
00:01:35.356 --> 00:01:38.060
instead of going to character information.

24
00:01:39.120 --> 00:01:40.545
I could theoretically.

25
00:01:42.203 --> 00:01:43.300
Misspell alignment.

26
00:01:43.300 --> 00:01:46.460
I'm not gonna get any,
there's no safety around that.

27
00:01:46.460 --> 00:01:48.220
I just hope that it's all fine.

28
00:01:49.920 --> 00:01:51.000
That's not great.

29
00:01:51.000 --> 00:01:56.660
I'd love to say like, hey, I can only make
table rows that match to one of the types.

30
00:01:56.660 --> 00:01:59.110
Could I like had code that in?

31
00:02:00.380 --> 00:02:03.730
Yeah, but you can see how this
could get unwieldy, right?

32
00:02:03.730 --> 00:02:06.995
You can see a world where hard
coding in every possibility and

33
00:02:06.995 --> 00:02:11.220
then updating it throughout
the codebase becomes problematic.

34
00:02:11.220 --> 00:02:13.880
What I might wanna do, it means I
have to change stuff in two places.

35
00:02:13.880 --> 00:02:17.617
This code is not dry if I add a new
property onto character type.

36
00:02:17.617 --> 00:02:23.580
I then also have to add that same
property on to the table row props.

37
00:02:23.580 --> 00:02:24.920
That's not great.

38
00:02:24.920 --> 00:02:28.632
What I love to do is like, hey,
look at the character type, and

39
00:02:28.632 --> 00:02:31.540
figure out what
the properties are on that.

40
00:02:31.540 --> 00:02:35.010
And that should be the stuff I'm
allowed to pass into the table row.

41
00:02:35.010 --> 00:02:36.779
That seems like better, right?

42
00:02:38.460 --> 00:02:40.520
So what would that look like for us?

43
00:02:41.630 --> 00:02:42.230
Let's take a look.

44
00:02:42.230 --> 00:02:43.240
Let's go into this table row.

45
00:02:45.310 --> 00:02:49.460
And we can pull in,
we have character type available.

46
00:02:49.460 --> 00:02:52.520
Well we want to say instead
of having been a string,

47
00:02:52.520 --> 00:02:55.520
had ABS string could be
the key of character type.

48
00:02:57.970 --> 00:03:02.254
Right, so now this is technically broken
and we'll figure why in a second.

49
00:03:02.254 --> 00:03:07.421
But you can see it's like,
hey, but if you look at

50
00:03:07.421 --> 00:03:12.480
this heading is now,
it's not just any string.

51
00:03:12.480 --> 00:03:16.020
It has to be named alignment,
intelligence, strengths, get it.

52
00:03:17.100 --> 00:03:19.210
And we can pass it in.

53
00:03:19.210 --> 00:03:23.420
Now the problem is that I
want them to be capitalized.

54
00:03:23.420 --> 00:03:26.970
And the type definition
has them all lowercase.

55
00:03:26.970 --> 00:03:28.880
There are three ways I can handle this.

56
00:03:28.880 --> 00:03:33.425
I could make it uppercase in
JavaScript programmatically

57
00:03:33.425 --> 00:03:35.750
inside the react component.

58
00:03:36.780 --> 00:03:38.280
I could use CSS.

59
00:03:40.186 --> 00:03:45.228
Or, I could just fix my types,
which considering

60
00:03:45.228 --> 00:03:50.530
this as a course on TypeScript seems to
be the most appropriate of the three.

61
00:03:50.530 --> 00:03:53.408
So we will go in,

62
00:03:53.408 --> 00:03:58.760
we'll go with that, so okay?

63
00:03:58.760 --> 00:04:02.200
What we do in this case,
let's go back to the table row.

64
00:04:02.200 --> 00:04:04.820
We can use that we thought we
had that capitalized before.

65
00:04:04.820 --> 00:04:06.677
So we could actually
combine some of these.

66
00:04:06.677 --> 00:04:15.290
We can also say capitalize
key character type.

67
00:04:15.290 --> 00:04:19.150
Yes, lint is angry at me, but
we will see that it works.

68
00:04:22.310 --> 00:04:25.714
I'm no longer getting yelled at and
you can look if you hover over it.

69
00:04:25.714 --> 00:04:28.857
As you can see that is now name
alignments, so on and so forth, or

70
00:04:28.857 --> 00:04:30.350
any of these table rows.

71
00:04:30.350 --> 00:04:37.498
Now technically name is used here so
if I wanted to be even more.

72
00:04:37.498 --> 00:04:42.290
I wanted to kind of combine even more
this make sure that name wasn't included.

73
00:04:42.290 --> 00:04:47.320
I can also,
there's two ways I could do it.

74
00:04:47.320 --> 00:04:52.050
I can do it with omit or I can do with
exclude, let's try with exclude first.

75
00:04:54.060 --> 00:04:56.779
So we could take yeah Yeah,
we can continue,

76
00:04:56.779 --> 00:05:02.318
this is a little exclude, Name.

77
00:05:05.466 --> 00:05:08.435
So now you can see that name
is not included in that list.

78
00:05:08.435 --> 00:05:09.326
And we have,

79
00:05:09.326 --> 00:05:14.715
like I was giving this component to
somebody else on my team to use, right?

80
00:05:14.715 --> 00:05:18.710
It's already enforcing a lot of that
safety in there and a lot of the kinda

81
00:05:18.710 --> 00:05:22.529
constraints that make it used the way
that it was designed to be used.

82
00:05:22.529 --> 00:05:26.320
And kind of again, help everyone to
avoid just like silly little bugs.

83
00:05:26.320 --> 00:05:30.230
It'll happen before a deadline.

84
00:05:30.230 --> 00:05:33.062
Yeah, I know that these are all
strings and numbers, but

85
00:05:33.062 --> 00:05:36.310
you could also say like, okay,
go look at that type as well.

86
00:05:36.310 --> 00:05:41.034
And the value should only be one of
the values that are in the object, so

87
00:05:41.034 --> 00:05:48.278
I could say, Character type.

88
00:05:51.841 --> 00:05:57.065
Right now we can see that this is
really just a string or a number again.

89
00:05:57.065 --> 00:06:01.560
But now it's based off the type Instead
of me hard coding it in myself.

90
00:06:02.860 --> 00:06:04.858
Alright, so now you have an exercise.

91
00:06:08.614 --> 00:06:13.306
This is all, yeah, this is a little too
simple, but let's, go for it right.

92
00:06:13.306 --> 00:06:18.110
Like clearly it's all in the same file,
but you can imagine how in a slightly

93
00:06:18.110 --> 00:06:21.806
larger code base,
some of this might play out, which is.

94
00:06:28.223 --> 00:06:30.413
We have this idea of a user model.

95
00:06:30.413 --> 00:06:32.767
But it's got this idea of account ID,

96
00:06:32.767 --> 00:06:36.750
which maybe we don't want to let
people use based on that model.

97
00:06:36.750 --> 00:06:40.160
So we won't have a type that
is based on user model.

98
00:06:40.160 --> 00:06:45.517
But with all the properties that are on
user model, except for account ID.

99
00:06:45.517 --> 00:06:47.330
And we don't want like yeah,
could I copy and

100
00:06:47.330 --> 00:06:49.203
paste and
remove a line I totally could write.

101
00:06:49.203 --> 00:06:53.280
But we want to have is a type
that is based on this user model.

102
00:06:53.280 --> 00:06:57.467
And this might be our current
user prompts in this case, but

103
00:06:57.467 --> 00:06:59.830
doesn't allow for account ID.

104
00:06:59.830 --> 00:07:03.610
That way we can't accidentally display it
on the UI, or something along those lines.

