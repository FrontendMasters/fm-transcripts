WEBVTT

1
00:00:00.242 --> 00:00:03.054
So we talked about
higher-order components.

2
00:00:03.054 --> 00:00:07.927
High-order components are just a pattern
in React that you might be familiar with.

3
00:00:07.927 --> 00:00:12.898
Particularly in larger codebases they
will kind of take common pieces of

4
00:00:12.898 --> 00:00:16.322
state management and
pass them into components.

5
00:00:16.322 --> 00:00:18.479
Some of this you can do
these days with hooks.

6
00:00:18.479 --> 00:00:22.069
Hooks and higher-order components
aren't mutually exclusive.

7
00:00:22.069 --> 00:00:23.033
I use hooks and

8
00:00:23.033 --> 00:00:27.860
higher order together because it
allows you were separated the data and

9
00:00:27.860 --> 00:00:32.939
state management piece of your component
with the presentational piece.

10
00:00:32.939 --> 00:00:35.460
You have a hook in your component and
you want to unit test,

11
00:00:35.460 --> 00:00:38.917
well all of a sudden you've got to mark
out a bunch of stuff if it's common APIs.

12
00:00:38.917 --> 00:00:42.488
And you'll have to figure out how to
simulate all the things versus you pull

13
00:00:42.488 --> 00:00:45.777
that out into a hardware component
that does maybe the API fetching,

14
00:00:45.777 --> 00:00:49.139
all that kind of stuff, passes props
into a presentation component.

15
00:00:49.139 --> 00:00:51.273
Easier to test, easier to tune for

16
00:00:51.273 --> 00:00:55.550
performance if you want to memorize
certain props so on and so forth.

17
00:00:55.550 --> 00:01:00.772
It's also a really fantastic way for
us to get a little bit more familiar

18
00:01:00.772 --> 00:01:05.574
with kind of some advanced patterns
using TypeScript and React.

19
00:01:05.574 --> 00:01:08.788
So we're going to take one of
the examples from earlier and

20
00:01:08.788 --> 00:01:12.932
we're going to create a super simple
higher-order component around it.

21
00:01:12.932 --> 00:01:17.750
Just to kind of see the pattern in
practice and then learn a few things about

22
00:01:17.750 --> 00:01:22.973
how to do some of this dynamic typing
with TypeScript around React components.

23
00:01:22.973 --> 00:01:25.969
So we're gonna look at those
character cards that we saw earlier.

24
00:01:25.969 --> 00:01:29.535
And a higher-order component just wraps
a traditional point and takes some of

25
00:01:29.535 --> 00:01:32.559
the stuff you might have done with
the hooks in state management and

26
00:01:32.559 --> 00:01:35.274
passes it into that presentational
component with props.

27
00:01:35.274 --> 00:01:40.203
So if we look over back
into our character card,

28
00:01:40.203 --> 00:01:43.538
go into application over here.

29
00:01:43.538 --> 00:01:46.850
We're gonna kind of take this piece out,
and

30
00:01:46.850 --> 00:01:52.080
we're gonna be able to kind of pass
it in to the application component,

31
00:01:52.080 --> 00:01:56.108
or the character information
card component rather.

32
00:01:56.108 --> 00:02:01.267
And push all of that in and
be able to use that instead.

33
00:02:01.267 --> 00:02:04.588
So what we're gonna do is we're
gonna create a component.

34
00:02:04.588 --> 00:02:07.239
The pattern is to call it with character,
or

35
00:02:07.239 --> 00:02:09.899
with whatever the data you're passing in.

36
00:02:09.899 --> 00:02:13.046
So if it is a component that
needs the current user, cuz so

37
00:02:13.046 --> 00:02:16.259
many things need the current
user from what you display for

38
00:02:16.259 --> 00:02:20.143
log in log out to like whether they
have the permission to view a thing.

39
00:02:20.143 --> 00:02:23.554
It'll be like with current user,
with user or something along those lines.

40
00:02:23.554 --> 00:02:27.665
For this one, we're gonna take the random
character, and we're gonna use that, so

41
00:02:27.665 --> 00:02:29.793
we're gonna call this one with character.

42
00:02:29.793 --> 00:02:33.334
And there are some pieces of higher-order
components that we are gonna kind of like

43
00:02:33.334 --> 00:02:34.608
just brush over a little bit.

44
00:02:34.608 --> 00:02:38.282
Because it's more like the kind of nuances
of making sure the display name looks in

45
00:02:38.282 --> 00:02:39.623
your React tools correctly.

46
00:02:39.623 --> 00:02:43.848
And that's kind of tangential to the part
we are trying to focus on which are these

47
00:02:43.848 --> 00:02:45.101
TypeScript patterns.

48
00:02:45.101 --> 00:02:50.756
So we have this const with character and
we'll just do a naively simple version,

49
00:02:50.756 --> 00:02:54.593
it's gonna take some React
component as an argument.

50
00:02:54.593 --> 00:02:56.944
And we'll give it a type of any for now.

51
00:02:56.944 --> 00:03:01.786
We'll obviously fix that, but just to
kind of get the basic pattern in place.

52
00:03:01.786 --> 00:03:06.442
So it takes any and its gonna
immediately just return that component.

53
00:03:06.442 --> 00:03:10.916
Obviously this is not the best
higher-order component in the world, but

54
00:03:10.916 --> 00:03:12.081
we'll get there.

55
00:03:12.081 --> 00:03:17.782
And then, so if we wanted to kind
of have a version of a character

56
00:03:17.782 --> 00:03:22.732
information card that just
had all the data passed in,

57
00:03:22.732 --> 00:03:26.391
we might say something along the lines of

58
00:03:26.391 --> 00:03:31.474
constCharacterInformationWithCharacter,
right?

59
00:03:31.474 --> 00:03:35.560
Just simulating that is the combination of
our character information component and

60
00:03:35.560 --> 00:03:38.045
with character higher-order
component as well.

61
00:03:38.045 --> 00:03:41.275
And all that will be is
this with character and

62
00:03:41.275 --> 00:03:45.785
we'll pass in the character
information component, right?

63
00:03:45.785 --> 00:03:48.977
Right now, that doesn't really do much
since it's just basically a pass through.

64
00:03:48.977 --> 00:03:52.367
It's actually worse than what we
had before at this exact moment,

65
00:03:52.367 --> 00:03:55.210
because the hierarchical
component has the type any and

66
00:03:55.210 --> 00:03:58.617
it's not actually passing anything
through but we'll fix that.

67
00:03:58.617 --> 00:04:01.300
And then we're just gonna
kind of swap it in here.

68
00:04:01.300 --> 00:04:06.094
And TypeScript's gonna get angry with us,
but like I said,

69
00:04:06.094 --> 00:04:08.727
we will address that in due time.

70
00:04:08.727 --> 00:04:10.125
We'll say that's gonna,

71
00:04:10.125 --> 00:04:13.726
it won't even need the character
because that's gonna be passed in.

72
00:04:13.726 --> 00:04:15.718
So there it is.

73
00:04:15.718 --> 00:04:19.058
If we threw character in here right now,
TypeScript would now be angry,

74
00:04:19.058 --> 00:04:21.217
even though this is
a pass through component.

75
00:04:21.217 --> 00:04:26.423
Because it's like,
I don't know what that prop is, right?

76
00:04:26.423 --> 00:04:30.671
So we've got that, and
now we need to flesh out the rest of this.

77
00:04:30.671 --> 00:04:35.711
Which is what a hierarchy component
should do is it takes a component and

78
00:04:35.711 --> 00:04:41.255
returns that component with some of
the props passed in already on our behalf.

79
00:04:41.255 --> 00:04:44.981
So the first thing that this
is really gonna need to do,

80
00:04:44.981 --> 00:04:50.751
we'll kind of comment this line out for a
second, is it will return a new component.

81
00:04:50.751 --> 00:04:55.923
Which again, in React these days is
effectively just a function, right?

82
00:04:55.923 --> 00:05:00.657
Back in the day when you walked up hills
both ways to build a React application,

83
00:05:00.657 --> 00:05:05.770
you might have put a class inside of this
function, that extended React component.

84
00:05:05.770 --> 00:05:11.297
So we'll return a function and
that one is we're gonna

85
00:05:11.297 --> 00:05:16.834
start to pull up some of our
kind of pieces from up here.

86
00:05:16.834 --> 00:05:20.582
So we can for instance,
pull these pieces up.

87
00:05:22.399 --> 00:05:26.677
All the state management pieces are gonna
get pulled up, so even the fetching part.

88
00:05:26.677 --> 00:05:31.092
And so now if we wanted to reuse this,
we can wrap any component in with

89
00:05:31.092 --> 00:05:36.117
character and we would get all of the kind
of loading and the character itself,

90
00:05:36.117 --> 00:05:40.029
and the fetching and
all of those things as a part of the deal.

91
00:05:40.029 --> 00:05:42.889
And we can say, let's go ahead and

92
00:05:42.889 --> 00:05:48.229
I'm gonna fork this real quick actually,
we'll just save it.

93
00:05:48.229 --> 00:05:53.205
So we get some formatting and right now
things are a little sad with us, but

94
00:05:53.205 --> 00:05:54.339
we can fix that.

95
00:05:54.339 --> 00:05:56.621
I gotta move some stuff around as well.

96
00:05:56.621 --> 00:06:01.001
This goes inside of the component, great.

97
00:06:01.001 --> 00:06:05.588
And then we'll say, If loading is true,

98
00:06:05.588 --> 00:06:09.323
we can just return null or
we can return the loading component.

99
00:06:11.922 --> 00:06:17.062
And otherwise return whatever component

100
00:06:17.062 --> 00:06:21.182
we passed in with the character.

101
00:06:21.182 --> 00:06:24.017
All right, so now we can create all
sorts of different components that will

102
00:06:24.017 --> 00:06:25.599
automatically show loading component.

103
00:06:25.599 --> 00:06:28.238
If they're loading to
automatically fetch the character,

104
00:06:28.238 --> 00:06:31.251
they'll pass it into whatever
component we choose to wrap, great.

105
00:06:34.005 --> 00:06:37.684
And there we go, so
TypeScript is a little angry right now,

106
00:06:37.684 --> 00:06:39.900
saying it's any it's never read.

107
00:06:39.900 --> 00:06:43.172
Yeah, that's all true at this moment,

108
00:06:43.172 --> 00:06:47.224
we will get that kind of
all working as we go along.

109
00:06:47.224 --> 00:06:50.846
And that we can use that
basically solely put this in here.

110
00:06:50.846 --> 00:06:53.066
We don't need the rest of this,

111
00:06:53.066 --> 00:06:57.928
this is all being handled by our
higher-order component, awesome.

112
00:06:57.928 --> 00:06:59.593
Right, so we've got that in place,

113
00:06:59.593 --> 00:07:03.002
now we need to actually flush out
the rest of the higher-order component.

114
00:07:03.002 --> 00:07:06.287
Now, we talked about generics before.

115
00:07:06.287 --> 00:07:09.086
Since this can wrap any component,

116
00:07:09.086 --> 00:07:13.388
that giant asterisk that
I'll talk about in a second.

117
00:07:13.388 --> 00:07:17.629
A higher-order component traditionally in
regular React, can wrap any component and

118
00:07:17.629 --> 00:07:19.013
pass that stuff in as a prop.

119
00:07:19.013 --> 00:07:22.011
However, one of the promises
of TypeScript for us,

120
00:07:22.011 --> 00:07:26.648
is the idea that we want to make sure that
maybe the component that we're wrapping

121
00:07:26.648 --> 00:07:29.121
accepts in this case a character, right?

122
00:07:29.121 --> 00:07:33.129
So really it is not just any component
will be a regular JavaScript we wanna

123
00:07:33.129 --> 00:07:34.821
make this a little bit better.

124
00:07:34.821 --> 00:07:40.064
We wanna say that this with character
will take any component that

125
00:07:40.064 --> 00:07:46.280
takes a character prop, it will be the one
that passes that in for us, right?

126
00:07:46.280 --> 00:07:50.765
And then we wanna return a component that
maybe takes all of the props it originally

127
00:07:50.765 --> 00:07:52.855
took minus the character component.

128
00:07:52.855 --> 00:07:56.922
So if you think about those utility
tests we talked about earlier,

129
00:07:56.922 --> 00:08:00.349
we have roughly all of the pieces
that we need to do this.

130
00:08:00.349 --> 00:08:03.205
We just kinda need to like tie a bunch
of the stuff we learned together.

131
00:08:03.205 --> 00:08:07.349
So this sounds like the kind of job for
a generic.

132
00:08:07.349 --> 00:08:12.175
So we could say with character, in this
case we'll say T, and one of the things

133
00:08:12.175 --> 00:08:16.432
I'm gonna do is, I'm gonna switch
this to a functional component.

134
00:08:16.432 --> 00:08:20.952
One of the reasons is,
the compiler is somewhat confused

135
00:08:20.952 --> 00:08:24.449
by this otherwise fine TypeScript syntax.

136
00:08:24.449 --> 00:08:29.610
The reason for that is, since we
are writing JSX, it is really hard for

137
00:08:29.610 --> 00:08:35.138
the parser to figure out whether or
not we are saying const with character.

138
00:08:35.138 --> 00:08:38.749
And parse is going along sees equal,
sees open angle brackets like

139
00:08:38.749 --> 00:08:41.833
you're gonna write some JSX and
then it gets very confused.

140
00:08:41.833 --> 00:08:48.177
One of the ways to handle this is
if you put a comma here, then boy,

141
00:08:48.177 --> 00:08:53.805
that must be a TypeScript generic and
not a React JSX component.

142
00:08:53.805 --> 00:08:55.224
I don't really like that.

143
00:08:55.224 --> 00:08:58.335
And if you decide that
you're cool with this comma,

144
00:08:58.335 --> 00:09:02.519
you're gonna find that certain
formatters are gonna fight with you.

145
00:09:02.519 --> 00:09:04.965
Prettier is gonna be like,
what's that comma?

146
00:09:04.965 --> 00:09:07.085
I'm gonna take that comma out for you.

147
00:09:07.085 --> 00:09:10.004
And then the TypeScript JSX
parser is gonna be like,

148
00:09:10.004 --> 00:09:12.167
I don't know what's going on anymore.

149
00:09:12.167 --> 00:09:18.014
So even if you like arrow functions,
one of my recommendations here is just to,

150
00:09:18.014 --> 00:09:22.118
when it approves you,
to get more traditional function

151
00:09:22.118 --> 00:09:25.898
declaration like this,
a function declaration.

152
00:09:25.898 --> 00:09:29.330
So we've got this generic and

153
00:09:29.330 --> 00:09:34.135
now we can say that
the component should be

154
00:09:34.135 --> 00:09:39.220
a React component type,
that is based on T.

155
00:09:40.683 --> 00:09:46.227
And we saw that before when we
did that utility types exercise,

156
00:09:46.227 --> 00:09:49.262
React.componentType will go and

157
00:09:49.262 --> 00:09:54.717
find out the props of a given
React component that you pass in.

158
00:09:54.717 --> 00:09:59.531
And so we saw that before when
we use it with the current user

159
00:09:59.531 --> 00:10:01.701
in the previous example.

160
00:10:01.701 --> 00:10:05.070
And we also saw that these
functions will be pretty smart.

161
00:10:05.070 --> 00:10:06.159
So what happens is,

162
00:10:06.159 --> 00:10:09.888
you're gonna pass in a component
as the argument to with character.

163
00:10:09.888 --> 00:10:12.130
It's gonna look at that component,

164
00:10:12.130 --> 00:10:16.398
use the utility type of react.component
to figure out its props, and

165
00:10:16.398 --> 00:10:20.756
assume that we're gonna use a component
to define T in the rest of this.

166
00:10:20.756 --> 00:10:27.636
So then, really, we return a new component
that takes the same props, right?

167
00:10:27.636 --> 00:10:33.466
So here we are reading the props
of whatever component we pass in,

168
00:10:33.466 --> 00:10:40.579
and we're returning a new component that
takes the same props for now, right?

169
00:10:40.579 --> 00:10:45.144
So we've got that in place, and you can
see TypeScript has started to get a little

170
00:10:45.144 --> 00:10:49.059
a bit upset, it doesn't really know
much about component just yet.

171
00:10:49.059 --> 00:10:54.991
Here we're saying, you told me it took the
same props, where's my character, right?

172
00:10:54.991 --> 00:10:57.953
And we know in a higher component that
like, listen, we're gonna give you

173
00:10:57.953 --> 00:11:00.790
a character you don't actually need
to take a character prop anymore.

174
00:11:00.790 --> 00:11:03.878
However, this component could take
other props that we wanna pass through.

175
00:11:03.878 --> 00:11:06.280
So the mission we need to solve for is,

176
00:11:06.280 --> 00:11:11.536
we need to return a component that takes
all of the props that it originally took.,

177
00:11:11.536 --> 00:11:15.687
minus or omitting, the ones that
we know we're going to pass in.

178
00:11:15.687 --> 00:11:16.538
So we need to figure that out.

179
00:11:16.538 --> 00:11:20.108
This is totally at this point,
a TypeScript problem,

180
00:11:20.108 --> 00:11:24.390
that we effectively have
the higher-order component in place.

181
00:11:24.390 --> 00:11:27.614
So we can figure out, okay for
the higher order component,

182
00:11:27.614 --> 00:11:29.558
what are the props that it defines.

183
00:11:29.558 --> 00:11:33.274
Now in this case,
it's just character, right?

184
00:11:33.274 --> 00:11:36.571
If it was just going to be current user,
but maybe other things got passed in or

185
00:11:36.571 --> 00:11:37.907
something along those lines.

186
00:11:37.907 --> 00:11:43.251
But here we know that whatever component
comes out of the with character

187
00:11:43.251 --> 00:11:48.076
higher-order component,
it's gonna have a character type.

188
00:11:48.076 --> 00:11:51.788
So here we'll say character,
CharacterType.

189
00:11:54.652 --> 00:11:56.213
And there we've got that.

190
00:11:56.213 --> 00:11:58.800
So now we've got this type here and so

191
00:11:58.800 --> 00:12:02.731
what we wanna do is we wanna
return a new component here.

192
00:12:02.731 --> 00:12:07.461
That is, like I said before, all of the
props that originally took, minus the ones

193
00:12:07.461 --> 00:12:12.413
that we know we're passing in ourselves
from this higher-order component, right?

194
00:12:12.413 --> 00:12:17.055
And so we saw this before,
this is using our good friend,

195
00:12:17.055 --> 00:12:21.721
the omit utility type that we
played around with before.

196
00:12:21.721 --> 00:12:24.798
So here we'll actually say,

197
00:12:24.798 --> 00:12:30.582
this is omit from the type of
the component we passed in,

198
00:12:30.582 --> 00:12:35.646
all of the keys of with character props,
right?

199
00:12:35.646 --> 00:12:37.301
I got close that.

200
00:12:37.301 --> 00:12:41.846
So this is our new, we're basically
reading the props of whatever

201
00:12:41.846 --> 00:12:46.649
component gets passed in and
dynamically generating a new prop type.

202
00:12:46.649 --> 00:12:50.043
That is, again, everything that it
originally took minus the stuff that

203
00:12:50.043 --> 00:12:51.696
we know we're passing in, right?

204
00:12:51.696 --> 00:12:55.415
And these are the things where I think
when I was learning TypeScript and React,

205
00:12:55.415 --> 00:12:58.356
I was like, TypeScript must be
bad cuz this stuff is hard,

206
00:12:58.356 --> 00:13:01.155
because I didn't really
understand the stuff at the time.

207
00:13:01.155 --> 00:13:04.410
And then as you kinda dig into,
you realize that you can do most of

208
00:13:04.410 --> 00:13:08.529
the functional programming things,
most of the kind of normal React patterns.

209
00:13:08.529 --> 00:13:12.173
You just need to have that kind of
both understanding React, obviously,

210
00:13:12.173 --> 00:13:14.781
understanding of some of
the basics of TypeScript.

211
00:13:14.781 --> 00:13:19.975
But then also understanding the things
that come with React's types, right?

212
00:13:19.975 --> 00:13:21.890
And that's one of the things
where the stuff isn't really

213
00:13:21.890 --> 00:13:22.992
covered super well all the time.

214
00:13:22.992 --> 00:13:24.885
You can find a really
great tutorials on React,

215
00:13:24.885 --> 00:13:26.506
really great tutorials on TypeScript.

216
00:13:26.506 --> 00:13:30.412
The intersection is a little,
sometimes there's not as much in there.

217
00:13:30.412 --> 00:13:31.786
So we don't have everything we need.

218
00:13:31.786 --> 00:13:34.214
We've solved for the red squiggly lines,

219
00:13:34.214 --> 00:13:38.673
cuz it's no longer expecting that there's
a character type passed in there.

220
00:13:38.673 --> 00:13:43.867
Because pick is the opposite of omit, and
so we have effectively, if this thing took

221
00:13:43.867 --> 00:13:48.784
additional props like we pass in, we can
redefine it in a second if we wanted to.

222
00:13:48.784 --> 00:13:52.602
But this is happy, but
now this one's angry because it

223
00:13:52.602 --> 00:13:57.345
doesn't really understand what's
going on here with component.

224
00:13:57.345 --> 00:14:01.786
So we can fix that as well, because it's
like okay, you said maybe this takes other

225
00:14:01.786 --> 00:14:06.429
props, TypeScript doesn't know because
we're using with character information.

226
00:14:06.429 --> 00:14:09.738
This higher-order component,
can be working with any,

227
00:14:09.738 --> 00:14:13.732
at this point, any prop or
any component that takes a character prop.

228
00:14:13.732 --> 00:14:16.999
So it's like, yeah,
you might use this other places,

229
00:14:16.999 --> 00:14:19.165
I can't guarantee you that safety.

230
00:14:19.165 --> 00:14:23.501
And so that's problematic for
me, and that makes sense.

231
00:14:23.501 --> 00:14:26.288
And so we just need to solve for
that as well.

232
00:14:26.288 --> 00:14:29.979
So we're gonna say we're gonna pass in.

233
00:14:32.458 --> 00:14:35.645
So normally we can say, for all of
the other props to go in there, right?

234
00:14:35.645 --> 00:14:41.772
But we need to say, Props as T,

235
00:14:41.772 --> 00:14:44.557
so we're saying hey,
here are the props you expect.

236
00:14:44.557 --> 00:14:47.993
But remember we had to use that as
keyword before, to effectively say,

237
00:14:47.993 --> 00:14:51.504
I know the character is not we're
gonna pass character right next to it.

238
00:14:51.504 --> 00:14:52.922
So we're gonna say listen,

239
00:14:52.922 --> 00:14:56.001
the rest of the props that
are coming in here are totally fine.

240
00:14:56.001 --> 00:15:01.181
We're gonna pass in character, and you can
now see that all the rest of the props

241
00:15:01.181 --> 00:15:06.905
this component will take, or any component
wrapped in this higher-order component,

242
00:15:06.905 --> 00:15:10.723
will get all of its props,
will pass in character as well.

243
00:15:10.723 --> 00:15:15.648
The other kind of thing that we can do
here is just to verify that this works.

244
00:15:15.648 --> 00:15:18.949
We can go ahead and take a look when you
say something along the lines of like,

245
00:15:18.949 --> 00:15:20.713
okay what if I give you this a character?

246
00:15:26.103 --> 00:15:31.916
You can see already, no, it doesn't take
this anymore does not exist on this type.

247
00:15:31.916 --> 00:15:35.824
So, now we have a new component which
dynamically no longer takes the character,

248
00:15:35.824 --> 00:15:38.840
even though it'll take everything
else this component took.

249
00:15:38.840 --> 00:15:41.103
All right, and so
this is a powerful pattern for one,

250
00:15:41.103 --> 00:15:43.788
see how these utility types you
can dynamically create types.

251
00:15:43.788 --> 00:15:47.065
Two, just see how you can separate
the state management from your React

252
00:15:47.065 --> 00:15:47.673
component.

253
00:15:47.673 --> 00:15:50.830
Now you can use the same
functionality everywhere.

254
00:15:50.830 --> 00:15:54.138
Yeah, you could possibly also load this
into a hook, but then you'd have to figure

255
00:15:54.138 --> 00:15:56.706
out how you're loading component and
stuff along those lines.

256
00:15:56.706 --> 00:16:01.394
It's still an important pattern, but
using some of those techniques of both

257
00:16:01.394 --> 00:16:04.577
reading the props of another
component right here.

258
00:16:04.577 --> 00:16:08.425
Being able to dynamically generate
a new type based on that,

259
00:16:08.425 --> 00:16:11.292
and then the ability to
kind of say we know what

260
00:16:11.292 --> 00:16:15.905
we're doing with some of these things
to help TypeScript along the way.

261
00:16:15.905 --> 00:16:18.675
Because we are very
intentional about this.

262
00:16:18.675 --> 00:16:22.292
Can you use as, as a hack?

263
00:16:22.292 --> 00:16:23.412
Of course you can.

264
00:16:23.412 --> 00:16:24.399
Should you?

265
00:16:24.399 --> 00:16:25.887
No.

266
00:16:25.887 --> 00:16:26.926
And so it's one of those things.

267
00:16:26.926 --> 00:16:31.896
But when you need to inform
TypeScript that you roughly know what

268
00:16:31.896 --> 00:16:36.037
you're doing,
this will allow you to get a sense of,

269
00:16:36.037 --> 00:16:40.749
I know I'm going to pass it in
directly two characters over.

270
00:16:40.749 --> 00:16:46.422
And it will be all the things
that this component expects.

