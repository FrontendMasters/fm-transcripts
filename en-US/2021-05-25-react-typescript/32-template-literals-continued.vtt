WEBVTT

1
00:00:00.340 --> 00:00:05.389
All right, so our mission here is to
create composite types out of these two

2
00:00:05.389 --> 00:00:10.220
to make our fictitious component
library just a little bit more solid.

3
00:00:11.380 --> 00:00:13.570
So we say very much the same move
that we pulled last time and

4
00:00:13.570 --> 00:00:16.110
then we'll kind of extend it a little bit.

5
00:00:16.110 --> 00:00:23.501
So here we've got this vertical
alignment-horizontal alignment.

6
00:00:28.340 --> 00:00:34.835
And we can see that makes a and
b happy as we wanted.

7
00:00:34.835 --> 00:00:36.939
Let's see,
we got actually switched us to alignment,

8
00:00:36.939 --> 00:00:38.119
then it will make a and b happy.

9
00:00:38.119 --> 00:00:40.022
A and b are happy cuz they
still expect strength.

10
00:00:40.022 --> 00:00:46.919
A and b are happy, should break is
angry cuz left right isn't a thing.

11
00:00:46.919 --> 00:00:52.149
Should break in first would
eventually work cuz the center

12
00:00:52.149 --> 00:00:57.280
is not a combination of the vertical and
the horizontal.

13
00:00:57.280 --> 00:01:03.891
So, yeah, it does break but we might wanna
say like, okay, we can make it better.

14
00:01:03.891 --> 00:01:07.790
Like what if we wanted center to just,
we don't wanna have to do center center?

15
00:01:07.790 --> 00:01:11.210
That seems a little bit ridiculous.

16
00:01:11.210 --> 00:01:15.229
So what we wanna do is we
wanna be able to make it so

17
00:01:15.229 --> 00:01:20.800
that it will allow for center but
not allow for center center.

18
00:01:20.800 --> 00:01:23.150
So I'm gonna change this one real quick
cuz we want this one to break again.

19
00:01:24.710 --> 00:01:28.817
So this one works and
this one is currently broken, but

20
00:01:28.817 --> 00:01:30.970
we want our API to be center.

21
00:01:30.970 --> 00:01:37.594
So we'll have top left, top center,
top right, and so on, so forth.

22
00:01:37.594 --> 00:01:41.370
But center, instead of center center,
we just want the word center.

23
00:01:41.370 --> 00:01:47.790
So step one, to add center as
an approved type just a union.

24
00:01:47.790 --> 00:01:52.274
And so now if we look,
we've got center, top-center, top-left,

25
00:01:52.274 --> 00:01:54.580
we still got that center-center.

26
00:01:54.580 --> 00:02:01.974
And so how do we pull that out?

27
00:02:01.974 --> 00:02:03.080
How do we exclude it?

28
00:02:03.080 --> 00:02:04.845
That's kind of the answer, right?

29
00:02:04.845 --> 00:02:08.567
Not to put the answer in the question,
but could we say,

30
00:02:11.768 --> 00:02:22.000
Exclude, and
then we wanna take out, Right?

31
00:02:22.000 --> 00:02:25.123
So now we have this idea of an alignment
that is what we would like to see maybe in

32
00:02:25.123 --> 00:02:26.580
the API for our component library.

33
00:02:26.580 --> 00:02:30.867
Right, we've got center center, left,
center, right, top left, top center, so

34
00:02:30.867 --> 00:02:31.940
on and so forth.

35
00:02:31.940 --> 00:02:33.900
But there is no center center.

36
00:02:33.900 --> 00:02:36.830
So you can get, instead of hard coding and
a bunch of type Cs.

37
00:02:36.830 --> 00:02:38.570
Yeah, nine combinations, not that bad.

38
00:02:38.570 --> 00:02:42.430
You could maybe hard coded it in,
but you can see how this grows.

39
00:02:42.430 --> 00:02:47.329
A lot of the programmability though
in TypeScript does leave a little

40
00:02:47.329 --> 00:02:48.690
bit to be desired.

41
00:02:48.690 --> 00:02:55.629
All right, yeah, you could probably
make hex codes work, right?

42
00:02:55.629 --> 00:03:00.360
You're gonna say six
strings of 0 through F.

43
00:03:00.360 --> 00:03:05.975
But you can't do like ranges or
anything like that.

44
00:03:05.975 --> 00:03:08.999
And you can't do like a range of numbers
like whether they're RGB values or

45
00:03:08.999 --> 00:03:10.700
something like that.

46
00:03:10.700 --> 00:03:15.239
That wouldn't work because
you can't do like,

47
00:03:15.239 --> 00:03:19.230
all right, all numbers from 0 to 255.

48
00:03:19.230 --> 00:03:24.820
Now could you make a union type that
was 0 through 255 and do it like that?

49
00:03:24.820 --> 00:03:30.620
Yes, but, yeah, there's one of those
what's the line from Jurassic Park?

50
00:03:30.620 --> 00:03:35.840
They asked if they could not whether or
not they should, right?

51
00:03:35.840 --> 00:03:39.710
So, yes, you could do that but that's
probably taking it a little bit too far.

52
00:03:39.710 --> 00:03:43.727
But I think for creating component
interfaces that are reusable,

53
00:03:43.727 --> 00:03:46.668
these are some powerful tools for
just boxing and

54
00:03:46.668 --> 00:03:51.200
then putting some constraints on how
you intend for a component to be used.

55
00:03:53.260 --> 00:04:01.850
We can do a quick refactoring to see how
this would look in one of our reducers.

56
00:04:01.850 --> 00:04:03.590
So let's pull that up.

57
00:04:03.590 --> 00:04:07.505
And let's see, like could we use this
to create a bunch of our action types?

58
00:04:07.505 --> 00:04:10.554
And again,
it'll be a little on the small side but

59
00:04:10.554 --> 00:04:13.200
enough that I think we can pull it up.

60
00:04:13.200 --> 00:04:15.613
So I'm gonna go back,
I'll go to code sandbox.

61
00:04:19.977 --> 00:04:21.170
That looks like the right one.

62
00:04:26.080 --> 00:04:27.870
Wait for that to come up.

63
00:04:27.870 --> 00:04:32.878
All right, if I go into my reducer, we've

64
00:04:32.878 --> 00:04:36.270
got let's go ahead and
get rid of everything except for the code.

65
00:04:37.830 --> 00:04:40.620
Adjust red, adjust green, adjust blue.

66
00:04:41.650 --> 00:04:46.280
Seems like we could use
what we just learned here.

67
00:04:46.280 --> 00:04:51.120
So we could say something like type
colors cuz, yeah, maybe this eventually

68
00:04:51.120 --> 00:04:55.880
goes on to have HSL and all sorts
of other different kinds of colors.

69
00:04:55.880 --> 00:05:00.314
So we could say

70
00:05:00.314 --> 00:05:05.486
colors are red,

71
00:05:05.486 --> 00:05:11.404
green, blue and,

72
00:05:14.981 --> 00:05:17.620
The action types, just gonna be adjust.

73
00:05:18.770 --> 00:05:20.659
We got to do the template literals here.

74
00:05:31.582 --> 00:05:37.749
So now we can say that this is
simply gonna be for action types.

75
00:05:43.037 --> 00:05:45.854
So we get the same basic result.

76
00:05:45.854 --> 00:05:51.656
There are a few other little things
that we could do here as well.

77
00:05:51.656 --> 00:05:57.273
Like we could, for instance,
be able to use it both in our

78
00:05:57.273 --> 00:06:02.600
JavaScript and
figure out our types based on this.

79
00:06:02.600 --> 00:06:09.320
So could we theoretically have the colors
and maybe abstract some of this as well?

80
00:06:09.320 --> 00:06:10.280
I think that we could.

81
00:06:10.280 --> 00:06:17.624
So we say our colors are red,

82
00:06:17.624 --> 00:06:22.523
green, and blue.

83
00:06:22.523 --> 00:06:24.660
We're gonna say this should be read only,
I don't want this changing.

84
00:06:25.680 --> 00:06:27.100
So this becomes a read only array.

85
00:06:29.060 --> 00:06:33.747
And now we can go ahead and
say instead of hard coding these in.

86
00:06:35.647 --> 00:06:36.692
We could say.

87
00:06:41.402 --> 00:06:45.449
We know in JavaScript, an array is just
an object where the keys are numbers.

88
00:06:46.940 --> 00:06:49.530
So if we look at colors now,
we see it's red, green and blue.

89
00:06:49.530 --> 00:06:50.475
They just need to be uppercase.

90
00:06:58.341 --> 00:07:02.739
It works.

91
00:07:02.739 --> 00:07:04.659
I got to put this here as well.

92
00:07:09.994 --> 00:07:11.870
No, that should work.

93
00:07:11.870 --> 00:07:14.320
Not sure if this is
excellent yelling at me or

94
00:07:14.320 --> 00:07:16.518
not seems to be happy everywhere else.

95
00:07:22.884 --> 00:07:26.342
Yeah, I think that's just a sign
being angry with me again.

96
00:07:26.342 --> 00:07:27.674
Yeah, excellent doesn't,

97
00:07:27.674 --> 00:07:31.360
the excellent built into code
sandbox doesn't respect that.

98
00:07:31.360 --> 00:07:33.690
The template literals exist yet
so it works.

99
00:07:33.690 --> 00:07:37.230
It's just angry about that for right now.

100
00:07:37.230 --> 00:07:43.220
So now I have them in JavaScript so I
could even go ahead and just remove this.

101
00:07:43.220 --> 00:07:45.101
I could say something along the lines of

102
00:07:57.627 --> 00:08:01.667
If the action is a type, I could probably
do this programmatically as well.

103
00:08:08.994 --> 00:08:10.402
Now that I think about it,

104
00:08:10.402 --> 00:08:13.860
you could do this to figure out
how you wanted to make the colors.

105
00:08:13.860 --> 00:08:15.370
You get even more
sophisticated with your types.

106
00:08:15.370 --> 00:08:17.961
But basically we're using
JavaScript to inform our types,

107
00:08:17.961 --> 00:08:20.054
which then we can use
programmatically as well.

108
00:08:30.178 --> 00:08:31.917
Cool, all right, let me stop and

109
00:08:31.917 --> 00:08:34.539
take a look at some of these
questions in the chat.

110
00:08:38.472 --> 00:08:41.400
So one of the question is,
is there more abstract way?

111
00:08:41.400 --> 00:08:45.490
How do I make one of
the interrelations optional?

112
00:08:45.490 --> 00:08:48.834
Should it be possible to have an alignment
that does not have a vertical line

113
00:08:48.834 --> 00:08:50.440
making separate optional as well?

114
00:08:51.580 --> 00:08:55.440
I don't know of the top of my head.

115
00:08:55.440 --> 00:09:04.110
My gut says that you could put one of the
turn areas in there and say like, okay.

116
00:09:04.110 --> 00:09:05.318
Given this case but

117
00:09:05.318 --> 00:09:10.311
like even the attorneys basically can
check to see if they extend other types.

118
00:09:10.311 --> 00:09:14.679
It's not fully like you don't
have everything available to you,

119
00:09:14.679 --> 00:09:17.500
like there might be visiting attorneys.

120
00:09:17.500 --> 00:09:21.400
I'm not sure off the top of my head
if you can make any of that optional.

121
00:09:21.400 --> 00:09:23.070
Again, this is a brand new feature, too.

122
00:09:23.070 --> 00:09:26.385
So it's like it'd be interesting someone
watching this a year from now be like,

123
00:09:26.385 --> 00:09:28.203
yeah, you can totally do those things now.

124
00:09:28.203 --> 00:09:31.560
But at this moment,
I'm pretty sure it's somewhat limited.

125
00:09:33.130 --> 00:09:37.998
But you could theoretically, yeah,
have it go back and forth or go back and

126
00:09:37.998 --> 00:09:43.120
do the tourney of replaced with an empty
string, which would make it shorter.

127
00:09:43.120 --> 00:09:47.310
But I'm not totally sure
where the limitations are.

128
00:09:47.310 --> 00:09:49.605
But, yeah, attorneys would be
the way that I would look into that.

