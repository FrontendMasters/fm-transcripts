WEBVTT

1
00:00:00.134 --> 00:00:04.087
It turns out there is a whole bunch more
of these utility types that we're goinna

2
00:00:04.087 --> 00:00:05.917
see that dynamically figure it out.

3
00:00:05.917 --> 00:00:10.755
But let's look back at color adjustment
real quick to kind of see what's going

4
00:00:10.755 --> 00:00:11.900
on here.

5
00:00:11.900 --> 00:00:15.129
This right here, we've kind of we've
danced around this a little bit and

6
00:00:15.129 --> 00:00:16.439
came up with some questions.

7
00:00:16.439 --> 00:00:21.801
Is effectively it's just gonna
be called a generic property.

8
00:00:21.801 --> 00:00:26.984
We'll call it generic just for short, but
it's effectively like a type variable,

9
00:00:26.984 --> 00:00:30.853
right, cool I'm gonna pass in
a variable for reacts to look for

10
00:00:30.853 --> 00:00:34.649
components of a certain type as
long as it fits this shape, and

11
00:00:34.649 --> 00:00:38.095
we can use those to create things for
ourselves as well.

12
00:00:38.095 --> 00:00:41.095
All right, so we need to talk
a little bit about generics.

13
00:00:43.311 --> 00:00:48.327
And generics this is the part where
we know that we're gonna kind of

14
00:00:48.327 --> 00:00:53.272
dip into some of the more like
TypeScript kind of specific stuff.

15
00:00:53.272 --> 00:00:57.818
But again,
it's just enough to help us make some kind

16
00:00:57.818 --> 00:01:02.277
of sense of what we're kind
of covered here as well.

17
00:01:07.178 --> 00:01:14.001
So generics are a really powerful concept
but when you first see the syntax,

18
00:01:14.001 --> 00:01:18.380
it can be,
a little bit squirrely and again.

19
00:01:18.380 --> 00:01:24.105
We are gonna kind of do as much as we
need to make us somewhat dangerous,

20
00:01:24.105 --> 00:01:28.082
but we'll kinda go in,
there are full courses on

21
00:01:28.082 --> 00:01:33.046
TypeScript you should definitely
also check it out as well.

22
00:01:33.046 --> 00:01:37.239
But this is kinda the high level
piece that will help us understand

23
00:01:37.239 --> 00:01:41.830
the syntax we write for some of these
more complicated react patterns.

24
00:01:41.830 --> 00:01:46.547
All right, so here is a kind of example
and we'll kind of pull this into a play

25
00:01:46.547 --> 00:01:49.568
ground in a second,
we have this idea of a link and

26
00:01:49.568 --> 00:01:53.000
this is saying if we think
about a linked list, right?

27
00:01:53.000 --> 00:01:57.935
Maybe there's a value and we don't wanna
make a linked list that has string values,

28
00:01:57.935 --> 00:02:00.436
a linked list node that has number values,

29
00:02:00.436 --> 00:02:03.007
a linked list node that
has Boolean values,

30
00:02:03.007 --> 00:02:07.768
that's unless you're getting paid by
the hour, in which case yeah, go for it.

31
00:02:07.768 --> 00:02:09.566
But what we want to do is say, hey,

32
00:02:09.566 --> 00:02:13.155
we want to have this idea of
a linked list node, or whatever.

33
00:02:13.155 --> 00:02:18.470
And we wanna be able to say like,
if we decide there's gonna be a linked

34
00:02:18.470 --> 00:02:24.074
list of strings, that's fine but
otherwise we wanna be able to reuse it.

35
00:02:24.074 --> 00:02:26.665
So we're saying for
whatever kind of link list is,

36
00:02:26.665 --> 00:02:29.050
is plug in T everywhere that needs to go.

37
00:02:29.050 --> 00:02:32.618
So it's a linked list of strings,
the value should be a string, and

38
00:02:32.618 --> 00:02:36.014
the next one should be another
link list node of strings as well.

39
00:02:36.014 --> 00:02:40.078
So let's pull that in to
the TypeScript playground.

40
00:02:46.473 --> 00:02:53.938
As well in here, and we'll paste this in.

41
00:02:53.938 --> 00:02:56.057
I'm just gonna make the font
a little bit bigger.

42
00:03:00.098 --> 00:03:04.570
As well and so now we want to make
a link list node we can say like node,

43
00:03:04.570 --> 00:03:09.369
not the greatest name when you talk
about JavaScript, we'll go for it.

44
00:03:09.369 --> 00:03:14.612
What we can't say that it is the value

45
00:03:14.612 --> 00:03:20.878
of actually said that
next is optional too.

46
00:03:20.878 --> 00:03:24.848
Otherwise, it's impossible
to have a last note, right?

47
00:03:24.848 --> 00:03:27.837
So because a value as well, and if we
wanna say that it is because right now

48
00:03:27.837 --> 00:03:30.777
it doesn't know that it's a language
this assumes it's an object, so

49
00:03:30.777 --> 00:03:33.310
we could say, it should be a link.

50
00:03:33.310 --> 00:03:38.069
Typescripts angry with us, because it
doesn't know is a generic type of link

51
00:03:38.069 --> 00:03:40.419
requires at least one type argument.

52
00:03:40.419 --> 00:03:45.130
All right, cool, so we'll say string and
TypeScript is happy with us.

53
00:03:45.130 --> 00:03:50.058
We could change this to 42,
TypeScript is now unhappy with us for

54
00:03:50.058 --> 00:03:51.643
a different reason.

55
00:03:51.643 --> 00:03:58.796
You can say const second is
a link of the type number.

56
00:04:01.080 --> 00:04:04.291
And we can say the value is 42.

57
00:04:06.502 --> 00:04:07.874
Got maybe put an equal sign in there.

58
00:04:10.184 --> 00:04:14.525
And since T is defined as a string and
the first one and a number and

59
00:04:14.525 --> 00:04:19.190
a second one, we can't link from
the first node to the second node.

60
00:04:19.190 --> 00:04:23.173
So if they say I'm gonna
rename this one first,

61
00:04:23.173 --> 00:04:28.566
if they first.next,
equals the second one, I can't do that.

62
00:04:28.566 --> 00:04:32.341
Right, because you can't do a link of
the type number to the one of a string.

63
00:04:32.341 --> 00:04:36.285
So basically, whenever we define it
here is for the rest of the type,

64
00:04:36.285 --> 00:04:38.734
what T will be defined as anything, why T?

65
00:04:38.734 --> 00:04:42.426
Honestly it could be pizza, it could be
sandwich, it could be anything you want.

66
00:04:42.426 --> 00:04:47.265
T is traditionally used for type,
which leads to lots of bad habits too

67
00:04:47.265 --> 00:04:51.614
because you can have subsequent
values in there so you're T and

68
00:04:51.614 --> 00:04:55.500
then a lot of times you'll
see the next one being U.

69
00:04:55.500 --> 00:04:58.540
If T stands for type,
what does U stand for?

70
00:04:58.540 --> 00:05:01.075
Nothing, it stands for the letter after T.

71
00:05:01.075 --> 00:05:04.913
So sometimes other languages you'll see
use ABC, this could literally be you

72
00:05:04.913 --> 00:05:08.930
could use the full word type if you
wanted to, they're just variable names.

73
00:05:08.930 --> 00:05:13.168
But basically, whenever this is defined
here that's what it's gonna be for

74
00:05:13.168 --> 00:05:15.981
this entire time that's
assigned to this object.

75
00:05:15.981 --> 00:05:17.277
This kinda makes sense though, right?

76
00:05:17.277 --> 00:05:18.969
When we use use state before, and

77
00:05:18.969 --> 00:05:21.790
we saw that it was a Boolean
in those angle brackets.

78
00:05:21.790 --> 00:05:26.700
We knew that we could only change that
piece of state to another Boolean,

79
00:05:26.700 --> 00:05:30.561
right, when we saw it as a string,
it's hard codes it for

80
00:05:30.561 --> 00:05:33.718
that given object that
we're talking about.

81
00:05:33.718 --> 00:05:38.621
But it also gives you a fairly
interesting way to be able

82
00:05:38.621 --> 00:05:42.580
to kind of define new types on the fly.

83
00:05:42.580 --> 00:05:46.071
And that's what we saw in that
previous one where it's was listen,

84
00:05:46.071 --> 00:05:49.132
I know we actually have this
ability to create a type based on

85
00:05:49.132 --> 00:05:50.864
the props based on another type.

86
00:05:50.864 --> 00:05:53.360
What I would love for
you to do is do that for me.

87
00:05:53.360 --> 00:05:56.971
It's cool, just give me the interface
you want and I'll do that, so

88
00:05:56.971 --> 00:05:58.830
we see that here as well.

89
00:05:58.830 --> 00:06:03.584
Interestingly, you'll notice
I had to define it here,

90
00:06:03.584 --> 00:06:07.744
if I removed it,
it was angry at me, but clearly,

91
00:06:07.744 --> 00:06:12.993
we've omitted generics plenty of times so
far in this course so

92
00:06:12.993 --> 00:06:18.264
then what gives and how do I get
some of that goodness in my life.

93
00:06:18.264 --> 00:06:18.764
Well, lets take a look, one of this is
kinda an order of operations thing right,

94
00:06:18.764 --> 00:06:19.264
its cool we're gonna define a value, we
got to say what type it is, TypeScript has

95
00:06:19.264 --> 00:06:19.764
not totally figured it out yet
what's going on here.

96
00:06:32.920 --> 00:06:36.227
Now, if we create a function,
it becomes a little bit easier.

97
00:06:36.227 --> 00:06:41.092
So we say const create node, right?

98
00:06:41.092 --> 00:06:45.182
Actually, I'm gonna do this as a function.

99
00:06:46.392 --> 00:06:49.295
Create node and
it's gonna take some value.

100
00:06:51.560 --> 00:06:53.263
And it's gonna return.

101
00:06:57.200 --> 00:06:58.396
That value here.

102
00:06:58.396 --> 00:07:01.203
Now, right now we gave it
no type information and

103
00:07:01.203 --> 00:07:04.000
it doesn't know what's going on here.

104
00:07:04.000 --> 00:07:08.453
But what we can do is say all right,
create node and what I want you to do.

105
00:07:08.453 --> 00:07:13.127
I'm going to tell you effectively,
what yeah,

106
00:07:13.127 --> 00:07:18.146
will tell you all right,
I want this to be T, right?

107
00:07:18.146 --> 00:07:20.568
So we'll say create node two and for

108
00:07:20.568 --> 00:07:25.020
whatever T's value should also be
that T and you're gonna return

109
00:07:28.800 --> 00:07:36.728
So this will be Actually will take, yeah

110
00:07:42.030 --> 00:07:45.700
And so in this case,
we can go ahead and say, create node.

111
00:07:54.694 --> 00:08:00.108
Look at it, it knew that it was
a string and we'll do another one.

112
00:08:00.108 --> 00:08:03.810
And this is some of the stuff that we got
to see in our react components before.

113
00:08:03.810 --> 00:08:08.162
Which is TypeScript was again
trying to do us a favor and

114
00:08:08.162 --> 00:08:11.569
figure out what was
going on here which is,

115
00:08:11.569 --> 00:08:17.534
all right we know that create node
should take some type variable called T,

116
00:08:17.534 --> 00:08:21.627
the value should be a T and
should create a link of T.

117
00:08:21.627 --> 00:08:25.878
So someone's got to tell it what T is
at some point, we could say string and

118
00:08:25.878 --> 00:08:28.410
then it will definitely know.

119
00:08:28.410 --> 00:08:31.556
But in the absence of that information,

120
00:08:31.556 --> 00:08:36.470
TypeScript tries its hardest to
figure it out for you, right?

121
00:08:36.470 --> 00:08:41.140
And so it's, cool, all right, yeah,
we should have this idea of T.

122
00:08:41.140 --> 00:08:44.396
That should be what the value is,
it should be a link of T but

123
00:08:44.396 --> 00:08:48.662
if you pass in a string cash goes like,
well, I have one piece of the puzzle.

124
00:08:48.662 --> 00:08:50.706
I have figured out that
I have this idea of T,

125
00:08:50.706 --> 00:08:53.208
the argument should definitely
be whatever that is.

126
00:08:53.208 --> 00:08:56.470
It's a string, T must be a string and
it figures it all out.

127
00:08:56.470 --> 00:09:00.570
And that's how we got away with
a lot of this TypeScript kind

128
00:09:00.570 --> 00:09:05.162
of figuring stuff out for us and
us not necessarily having to do it,

129
00:09:05.162 --> 00:09:10.747
which is a lot of this logic around that
and piecing together the puzzle, right?

130
00:09:10.747 --> 00:09:15.455
And so these generics are an incredibly
powerful way to create some very

131
00:09:15.455 --> 00:09:20.007
useful abilities what we saw that
before with our adjustment props,

132
00:09:20.007 --> 00:09:24.106
we're gonna look at higher order
components in a little bit.

133
00:09:24.106 --> 00:09:28.033
Where it's a idea of a component that can
wrap any other component well do you have

134
00:09:28.033 --> 00:09:31.612
to make if you had to make it for
every single component you wanted to wrap,

135
00:09:31.612 --> 00:09:35.630
the pattern of higher order components
in react wouldn't make any sense.

136
00:09:35.630 --> 00:09:38.970
But with the generics, and
this I built it to say like okay, for

137
00:09:38.970 --> 00:09:42.513
whatever you pass in, that's what
I want the typing to be around.

138
00:09:42.513 --> 00:09:44.990
That's gonna be the protections
I offer in TypeScript.

139
00:09:44.990 --> 00:09:49.977
It gives you a very powerful way to both
have type safety in your application,

140
00:09:49.977 --> 00:09:54.733
but at the same time, also have the
ability to be really flexible with your

141
00:09:54.733 --> 00:09:58.646
code in a way that allows as
you're coming from JavaScript or

142
00:09:58.646 --> 00:10:01.205
another language like Ruby or Python.

143
00:10:01.205 --> 00:10:04.654
You're thinking type language they don't
let me do things that are flexible,

144
00:10:04.654 --> 00:10:05.485
that's not true.

145
00:10:05.485 --> 00:10:08.890
Again, the generics are really,
really powerful way to make that happen.

