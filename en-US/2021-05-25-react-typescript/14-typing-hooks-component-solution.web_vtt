WEBVTT

1
00:00:00.022 --> 00:00:05.830
So we've got a little bit of a version
of that of the exercise here, right?

2
00:00:05.830 --> 00:00:09.140
We've got a cow that
we're keeping in a hook.

3
00:00:09.140 --> 00:00:10.200
Nothing surprising here.

4
00:00:10.200 --> 00:00:11.470
It knows that it's a number.

5
00:00:11.470 --> 00:00:12.920
It's expecting a number.

6
00:00:12.920 --> 00:00:15.010
The things that we've kinda seen before.

7
00:00:15.010 --> 00:00:19.479
Some of the extra bonus things I
did just to kinda make a point.

8
00:00:19.479 --> 00:00:23.290
Was pulling out the functions or
updating the state.

9
00:00:23.290 --> 00:00:25.839
In this case, you do need to say
that it is in fact a number,

10
00:00:25.839 --> 00:00:29.191
cuz these functions aren't aware of
where they're going to be used right?

11
00:00:29.191 --> 00:00:32.295
So again, with TypeScript,
we, if TypeScript,

12
00:00:32.295 --> 00:00:36.212
if isn't painfully obvious to
TypeScript what's happening.

13
00:00:36.212 --> 00:00:38.640
Then we just simply need
to explain our intent.

14
00:00:38.640 --> 00:00:42.978
So in this case,
these two increment decrement functions,

15
00:00:42.978 --> 00:00:47.330
because any of the use state
hooks will also take a function.

16
00:00:47.330 --> 00:00:48.420
They're used down here as well.

17
00:00:50.240 --> 00:00:54.670
They're outside of the component,
there outside of all the context.

18
00:00:54.670 --> 00:00:57.836
These could be in a separate
file somewhere else, right?

19
00:00:57.836 --> 00:01:02.744
It could be a third party library,
that you installed to increment,

20
00:01:02.744 --> 00:01:04.277
decrement numbers.

21
00:01:04.277 --> 00:01:09.288
As JavaScript, we all know that
there's probably a library.

22
00:01:09.288 --> 00:01:12.833
So, in this way we say as a number,
TypeScript has figured out,

23
00:01:12.833 --> 00:01:16.379
then it returns a number as I kind
of joked in the very beginning,

24
00:01:16.379 --> 00:01:19.491
which is, if it takes a number
you're adding one to it.

25
00:01:19.491 --> 00:01:24.488
It can look that all possibilities
of this function will always

26
00:01:24.488 --> 00:01:27.041
return a number no matter what.

27
00:01:27.041 --> 00:01:28.105
Great.

28
00:01:28.105 --> 00:01:32.959
There's interesting part here, that I
wanna kinda take a look at for a second,

29
00:01:32.959 --> 00:01:34.343
is this change count?

30
00:01:34.343 --> 00:01:38.057
Cuz right now we have effectively
a not dissimilar version from,

31
00:01:38.057 --> 00:01:40.380
we saw the class based example.

32
00:01:40.380 --> 00:01:43.347
The interesting part of
the class base example was,

33
00:01:43.347 --> 00:01:45.243
we had it in a method on the class.

34
00:01:45.243 --> 00:01:47.980
Here we have it in a helper function.

35
00:01:47.980 --> 00:01:52.781
What would happen now, if we in lined it,
just like we did with the increment and

36
00:01:52.781 --> 00:01:54.585
decrement ones here as well?

37
00:01:54.585 --> 00:01:58.272
So I'm actually gonna
make a second version of

38
00:01:58.272 --> 00:02:01.968
this input field just
to demonstrate a point.

39
00:02:01.968 --> 00:02:07.720
And I'm gonna grab this function and
I'm going to inline it.

40
00:02:07.720 --> 00:02:11.108
And we'll face it right in there.

41
00:02:11.108 --> 00:02:14.681
And you can see it works.

42
00:02:14.681 --> 00:02:20.073
The interesting part is,
because it's an inline function,

43
00:02:20.073 --> 00:02:24.219
on and on change,
handler on an input element,

44
00:02:24.219 --> 00:02:29.006
we can actually get rid of
all this extra information.

45
00:02:30.342 --> 00:02:31.086
Right?

46
00:02:31.086 --> 00:02:34.248
But didn't you tell me
that I had to define it?

47
00:02:34.248 --> 00:02:39.800
Yeah, cuz before, this is just a function
that we're storing in a variable name.

48
00:02:39.800 --> 00:02:42.970
It doesn't touch, you can't figure out
the context in which it's gonna be called.

49
00:02:42.970 --> 00:02:46.910
So, we have to just say listen,
this is roughly where I expect to use.

50
00:02:46.910 --> 00:02:50.152
It just protects me from myself please.

51
00:02:50.152 --> 00:02:53.918
Going down here,
you can see that it assumes,

52
00:02:53.918 --> 00:02:58.650
since you have put it on a change handler,
an input element

53
00:02:58.650 --> 00:03:03.970
that the event is a change event
on an input handler, right?

54
00:03:03.970 --> 00:03:08.210
So it basically, does what we think
it's going to do in this case.

