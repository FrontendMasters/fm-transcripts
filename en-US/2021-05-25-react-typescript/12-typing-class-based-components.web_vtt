WEBVTT

1
00:00:00.000 --> 00:00:05.739
So we have class-based components, cuz, if
you're writing a brand new app, you might

2
00:00:05.739 --> 00:00:11.032
use functional components everywhere and
hooks everywhere, so on and so forth.

3
00:00:11.032 --> 00:00:14.347
But if your code base is a few years old,

4
00:00:14.347 --> 00:00:19.081
maybe it's predominantly
class-based components.

5
00:00:19.081 --> 00:00:23.126
If it's a few years old, maybe it's
a mixture between class-based and

6
00:00:23.126 --> 00:00:24.593
functional components.

7
00:00:24.593 --> 00:00:25.457
What do you do,

8
00:00:25.457 --> 00:00:30.115
this whole time we've just ignored the
fact that class-based components exist.

9
00:00:30.115 --> 00:00:36.317
Let's stop ignoring that for a second and
figure out what it might look like.

10
00:00:36.317 --> 00:00:42.139
So, here, we've got a fairly simple,
kinda counter application.

11
00:00:44.133 --> 00:00:47.597
And right now, again,
it doesn't do anything.

12
00:00:47.597 --> 00:00:50.391
What we wanna do is some of
the stuff we saw, if you stay,

13
00:00:50.391 --> 00:00:53.192
we added some state management to it,
and some events.

14
00:00:53.192 --> 00:00:56.662
And we'll see some of the edge
cases in a class-based component.

15
00:00:56.662 --> 00:01:00.436
And then we'll also see how those
edge cases might also apply

16
00:01:00.436 --> 00:01:04.296
in functional components as well,
and how to deal with them.

17
00:01:04.296 --> 00:01:08.445
So the syntax is a little bit different,
because the syntax for

18
00:01:08.445 --> 00:01:11.979
class-based components is
a little bit different.

19
00:01:11.979 --> 00:01:16.022
One of the things is,
we have counter extends component,

20
00:01:16.022 --> 00:01:19.913
at which point here,
we would have two type arguments.

21
00:01:19.913 --> 00:01:23.674
Those angle brackets, they deal
with something called generics, and

22
00:01:23.674 --> 00:01:25.373
we'll talk about a little bit.

23
00:01:25.373 --> 00:01:29.703
You almost think of them as variables for
your type system.

24
00:01:29.703 --> 00:01:34.625
And really, the two things that
it takes is the shape of MyProps,

25
00:01:34.625 --> 00:01:39.459
like we saw in the props argument
in our functional components,

26
00:01:39.459 --> 00:01:42.786
and then also the shape
of our state as well.

27
00:01:42.786 --> 00:01:46.479
Now, clearly, I've red squigglies
cuz those two things aren't defined.

28
00:01:46.479 --> 00:01:49.700
And the code's not blowing up because
again, that's all ripped out of

29
00:01:49.700 --> 00:01:52.506
the JavaScript that comes out
to the other end of TypeScript.

30
00:01:52.506 --> 00:01:56.008
But clearly it's not pleased with me.

31
00:01:56.008 --> 00:01:58.688
So if we wanted to say,
let's have both a prop,

32
00:01:58.688 --> 00:02:01.179
as well as some state they're gonna match.

33
00:02:01.179 --> 00:02:05.185
The state is probably gonna be
the count that seems relatively easy.

34
00:02:05.185 --> 00:02:08.096
The count is going to be
what kind of incident.

35
00:02:08.096 --> 00:02:12.912
So we'll say the CounterProps is

36
00:02:12.912 --> 00:02:17.043
the incident, is a string.

37
00:02:17.043 --> 00:02:26.233
And we'll say,
type CounterState, Is a number.

38
00:02:26.233 --> 00:02:29.325
All right, so far so good.

39
00:02:29.325 --> 00:02:32.088
All right, so now we'll swap those in.

40
00:02:33.967 --> 00:02:34.751
CounterProps.

41
00:02:36.951 --> 00:02:37.987
CounterState.

42
00:02:40.081 --> 00:02:45.001
A red squiggly happens down here where
it's, yeah, you told me that we're gonna

43
00:02:45.001 --> 00:02:49.803
take an incident here but you didn't pass
me an incident, so I need to fix that.

44
00:02:55.679 --> 00:02:58.325
Cool and we'll just pass it in,

45
00:03:06.757 --> 00:03:08.197
Is this.props.

46
00:03:09.877 --> 00:03:13.905
And we'll go ahead and use it, Right here.

47
00:03:13.905 --> 00:03:17.646
All right, so
the props pretty straightforward,

48
00:03:17.646 --> 00:03:23.914
nothing in particularly interesting about
that, but let's also look at the state.

49
00:03:23.914 --> 00:03:29.001
So here, we'll define the state, and we'll
say the type of that is CounterState.

50
00:03:31.308 --> 00:03:33.368
And that count is 0.

51
00:03:35.695 --> 00:03:38.766
All right, and so
now we've got that in place, and

52
00:03:38.766 --> 00:03:40.774
now we can grab the count as well.

53
00:03:46.177 --> 00:03:54.255
This.state, and we'll toss it
in with that 0 is now, Sweet.

54
00:03:54.255 --> 00:03:58.258
So we have that in place.

55
00:03:59.315 --> 00:04:02.872
We do need to get some of
the buttons working, right?

56
00:04:02.872 --> 00:04:04.691
And stuff along those lines.

57
00:04:04.691 --> 00:04:09.694
One of things you might see is,
why did I define it twice?

58
00:04:09.694 --> 00:04:12.356
Generally speaking,
I can get away without it.

59
00:04:12.356 --> 00:04:15.534
If I kinda look here,
you can see the count is number,

60
00:04:15.534 --> 00:04:20.197
there were previous versions where you
might see in a lot of places cuz it helped

61
00:04:20.197 --> 00:04:23.394
with some of the type hinting
in older applications.

62
00:04:23.394 --> 00:04:26.467
So I included it here as well,
so you might see it.

63
00:04:26.467 --> 00:04:30.646
But these days,
if I removed it still worked.

64
00:04:30.646 --> 00:04:37.390
I personally include it cuz I still
think the computer doesn't care, right?

65
00:04:37.390 --> 00:04:41.629
I do think as when you read
large class-based components,

66
00:04:41.629 --> 00:04:44.186
it can be somewhat helpful as well.

67
00:04:44.186 --> 00:04:49.265
So I'd say it's a personal life
decision that I have made.

68
00:04:49.265 --> 00:04:52.818
All right, so let's figure out
how to increment and decrement.

69
00:04:52.818 --> 00:04:55.515
These will be pretty straightforward,

70
00:04:55.515 --> 00:04:59.411
there's nothing particularly
interesting to see here.

71
00:04:59.411 --> 00:05:01.583
I will say this.setState.

72
00:05:02.669 --> 00:05:06.481
And that will take whatever the count is.

73
00:05:09.165 --> 00:05:17.820
And we will go ahead and we'll return
an object where the count is count +1.

74
00:05:17.820 --> 00:05:21.381
All right, decrement,
you can take a lucky guess.

75
00:05:24.460 --> 00:05:30.949
Is gonna subtract 1, and
reset will set it to 0.

76
00:05:30.949 --> 00:05:32.212
Those are the easy ones.

77
00:05:34.775 --> 00:05:42.420
In fact here we can actually say that,
Count is 0.

78
00:05:44.937 --> 00:05:47.455
Nothing particularly special there.

79
00:05:47.455 --> 00:05:50.063
What will be interesting is
this form element, right?

80
00:05:50.063 --> 00:05:52.822
Because here we actually,
the first time so far,

81
00:05:52.822 --> 00:05:56.709
that we are directly interacting
with an element or an event, right?

82
00:05:56.709 --> 00:06:00.846
So far, we've gotten through our time
together without really having to deal

83
00:06:00.846 --> 00:06:01.484
with that.

84
00:06:01.484 --> 00:06:07.660
And that sweet period of innocence is now
over, and we're gonna have to figure out.

85
00:06:07.660 --> 00:06:10.498
Now, I left a hint in some
of the early slides, so

86
00:06:10.498 --> 00:06:13.706
it shouldn't be super
surprising how this goes down.

87
00:06:13.706 --> 00:06:16.281
But let's take a look at it.

88
00:06:19.630 --> 00:06:24.338
And then we'll go ahead and we'll say,
event, we need to know what the event is.

89
00:06:24.338 --> 00:06:27.092
I'm gonna just be blissfully
ignorant of that for a second.

90
00:06:27.092 --> 00:06:32.530
And we'll say, this.setState, and

91
00:06:32.530 --> 00:06:39.961
we'll say count is event.target.value,
right?

92
00:06:39.961 --> 00:06:43.858
And that will work,
except when you say countCount,

93
00:06:43.858 --> 00:06:47.508
we're called changeCount
cuz that makes sense.

94
00:06:47.508 --> 00:06:49.762
TypeScript is angry with us.

95
00:06:49.762 --> 00:06:52.418
TypeScript event is any,

96
00:06:52.418 --> 00:06:57.609
this is cuz we know deep in
our soul that we're gonna

97
00:06:57.609 --> 00:07:02.937
put this on the form when
they hit the Submit button.

98
00:07:02.937 --> 00:07:07.457
Typescript doesn't know that,
TypeScript doesn't have a soul.

99
00:07:07.457 --> 00:07:14.005
And so we need to say, hey,
you made a function on a class property.

100
00:07:14.005 --> 00:07:17.374
I don't know anything about
what's happening here.

101
00:07:17.374 --> 00:07:20.225
So we need to tell it what
event is going to be.

102
00:07:20.225 --> 00:07:26.390
And as I kinda hinted that earlier,
we might say something along the lines of,

103
00:07:28.651 --> 00:07:31.507
We do a ChangeEvent, or
something along those lines.

104
00:07:31.507 --> 00:07:35.531
I've got a Submit button there,
let's go with this one first, and

105
00:07:35.531 --> 00:07:40.062
we'll kinda take a look at it,
momentarily, which is HTMLInputElement.

106
00:07:44.459 --> 00:07:48.887
Here as well, and okay,
now it's angry about count.

107
00:07:48.887 --> 00:07:50.419
Look at that.

108
00:07:50.419 --> 00:07:53.101
One of my favorite things about the web.

109
00:07:53.101 --> 00:07:59.647
It's my single favorite thing, is that
despite the fact that this input field

110
00:07:59.647 --> 00:08:04.701
has the type of number and
only accepts numbers, in the DOM,

111
00:08:04.701 --> 00:08:10.773
the event will still be a string on
the input field, regardless of that.

112
00:08:10.773 --> 00:08:13.385
So we have to coerce into a number,
you can use percent,

113
00:08:13.385 --> 00:08:14.893
I'm just gonna use a plus sign.

114
00:08:14.893 --> 00:08:20.965
But TypeScript has figured out, hey,
I know that the value on InputElements,

115
00:08:20.965 --> 00:08:27.052
when they change, is always gonna be
a string, even if it's the typed number.

116
00:08:27.052 --> 00:08:30.292
So it actually caught that for
us and it's all fair.

117
00:08:30.292 --> 00:08:34.050
Now, since we're just changing it,
this would have theoretically worked like

118
00:08:34.050 --> 00:08:37.380
JavaScript would have coerced it into
a number, and so on and so forth.

119
00:08:37.380 --> 00:08:39.038
But you can see if we added stuff,

120
00:08:39.038 --> 00:08:43.373
you might have accidentally done string
concatenation, or stuff along those lines.

121
00:08:43.373 --> 00:08:47.211
All right, so
we have all of that in place.

122
00:08:47.211 --> 00:08:49.809
Let's just go ahead and
quickly wire this stuff up.

123
00:08:53.202 --> 00:08:56.458
This.increment.

124
00:09:00.278 --> 00:09:05.710
This.decrement, nope,
reset was in the middle.

125
00:09:05.710 --> 00:09:09.120
Despite how I defined the methods.

126
00:09:09.120 --> 00:09:15.624
And this.decrement, and then here
we'll just do it on change for now.

127
00:09:15.624 --> 00:09:20.980
We can talk about how to figure it out for
something else.

128
00:09:20.980 --> 00:09:25.813
I use the one that we used in the example
on the slide earlier just now.

129
00:09:25.813 --> 00:09:33.108
But let's also say this.changeCount, cool.

130
00:09:33.108 --> 00:09:37.768
And we'll also set the value,
To count, as well.

131
00:09:39.889 --> 00:09:42.572
All right, so, it's got a 0 increments,

132
00:09:42.572 --> 00:09:45.629
everyone's favorite,
silly React component.

133
00:09:45.629 --> 00:09:50.629
You can also do it in here and
it changes as well.

134
00:09:50.629 --> 00:09:51.805
So Steve, what do we do here?

135
00:09:51.805 --> 00:09:55.425
We just have to memorize all
of the different APIs for

136
00:09:55.425 --> 00:10:00.871
all the different events, and just commit
it all to memory and do it like that?

137
00:10:00.871 --> 00:10:05.119
My argument is no, my argument is a lot
of the times your tools can help you.

138
00:10:05.119 --> 00:10:07.846
And your tools can guide you
into what the right choice is.

139
00:10:07.846 --> 00:10:10.152
So let's say, hypothetically,

140
00:10:10.152 --> 00:10:14.932
we wanted to do the kinda form
submission to change the number instead.

141
00:10:14.932 --> 00:10:19.207
And we'd have to actually keep some
state of what the form is, and

142
00:10:19.207 --> 00:10:22.238
we're not gonna do that
all the way right now,

143
00:10:22.238 --> 00:10:27.636
cuz that's more of an exercise in React
than learning too much about TypeScript.

144
00:10:27.636 --> 00:10:32.263
But we can hover over this on Submit, and
you can kinda see some of the answers

145
00:10:32.263 --> 00:10:35.030
here, which is you kinda
have it right here.

146
00:10:35.030 --> 00:10:40.199
You can look at, so
what would be the right typing for

147
00:10:40.199 --> 00:10:43.341
a form submission event, right?

148
00:10:43.341 --> 00:10:46.782
Well, instead of this,
up top we had React.ChangeEvent or

149
00:10:46.782 --> 00:10:49.893
just ChangeEvent that I
pulled off the React library.

150
00:10:49.893 --> 00:10:53.935
On HTMLInputElement if we wanted to
make it on form submission, we could

151
00:10:53.935 --> 00:10:58.197
actually see that it's React.FormEvent
on an HTMLFormElement, right?

152
00:10:58.197 --> 00:11:02.331
So a lot of times you do not necessarily
need to go digging in the docs or

153
00:11:02.331 --> 00:11:04.131
anything along those lines.

154
00:11:04.131 --> 00:11:08.733
You can actually just use some of
the tooling available to figure out,

155
00:11:08.733 --> 00:11:12.243
okay, this on submit,
this is what it would expect.

156
00:11:12.243 --> 00:11:17.950
So here is how I need to define
that in my actual class method.

