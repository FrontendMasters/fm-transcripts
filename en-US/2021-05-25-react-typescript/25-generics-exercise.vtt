WEBVTT

1
00:00:00.280 --> 00:00:04.421
All right, so one of the one of the
questions we got a little bit earlier was,

2
00:00:04.421 --> 00:00:08.764
how does this whole TypeScripting work
with some of the functional programming

3
00:00:08.764 --> 00:00:09.500
paradigms?

4
00:00:09.500 --> 00:00:14.170
So JavaScript, again, this is where
the generics become super useful.

5
00:00:14.170 --> 00:00:18.422
For instance, a lot of the things that
we know and love like map or filter,

6
00:00:18.422 --> 00:00:19.863
any of those functions,

7
00:00:19.863 --> 00:00:24.750
think about the fact that lodash should
still work with TypeScript, right?

8
00:00:24.750 --> 00:00:28.367
And we don't want to have a map for
every single different type of array

9
00:00:28.367 --> 00:00:32.170
that could possibly ever exist for
every different kind of object shape or

10
00:00:32.170 --> 00:00:35.262
anything along those lines,
and we don't want to use any.

11
00:00:35.262 --> 00:00:38.082
And that's like a place where
the generics help, right?

12
00:00:38.082 --> 00:00:40.800
So we used it for
creating a linked list node.

13
00:00:40.800 --> 00:00:45.466
I think about some of the common
functional programming paradigms like,

14
00:00:45.466 --> 00:00:47.356
the easiest one is identity.

15
00:00:47.356 --> 00:00:49.782
Identity is a function that
just returns the same Type.

16
00:00:49.782 --> 00:00:51.701
Now, shouldn't have to have
an identity function for

17
00:00:51.701 --> 00:00:54.920
strings different than identity function
for numbers or anything like that.

18
00:00:54.920 --> 00:00:57.708
So we just say, hey,
we're gonna have a type for

19
00:00:57.708 --> 00:01:01.180
this identity function that
is somewhat variable, right?

20
00:01:01.180 --> 00:01:04.761
And we say like, I don't know,
value is of whatever type that is, and

21
00:01:04.761 --> 00:01:06.900
we just want to return it back to us.

22
00:01:06.900 --> 00:01:11.540
It's all an identity function does is
this, it takes whatever the value is and

23
00:01:11.540 --> 00:01:13.210
immediately returns it.

24
00:01:13.210 --> 00:01:18.750
And again, whatever, so
now we can do, two, identity is two,

25
00:01:18.750 --> 00:01:23.983
and because you pass in the number 2,
this identity is now,

26
00:01:23.983 --> 00:01:28.908
this one is set to literally
the number two, or a string or

27
00:01:28.908 --> 00:01:34.140
it'll basically on the fly,
figure out the type for us.

28
00:01:34.140 --> 00:01:38.474
And again, all that figuring out stuff
that was happening magically happens

29
00:01:38.474 --> 00:01:40.920
through these generics as well.

30
00:01:40.920 --> 00:01:43.130
So what you're going to try to do and

31
00:01:43.130 --> 00:01:46.900
you can do this in the kind of
TypeScript playground as well.

32
00:01:48.260 --> 00:01:52.696
We have this idea of another
function called tap and

33
00:01:52.696 --> 00:01:55.798
tap is super useful occasionally.

34
00:01:55.798 --> 00:01:59.901
What tap does is there are different
things in JavaScript that don't return

35
00:01:59.901 --> 00:02:03.117
the value back to us, like pop,
gives us the first number.

36
00:02:03.117 --> 00:02:06.610
If you just wanted to pop a number off but
then get the value back immediately,

37
00:02:06.610 --> 00:02:10.104
you might find yourself like okay,
store in a variable, pop something off,

38
00:02:10.104 --> 00:02:12.460
return the original variable.

39
00:02:12.460 --> 00:02:14.580
So tap can look something like this.

40
00:02:14.580 --> 00:02:19.932
This one is obviously not typed where
we want to pop something off on the end

41
00:02:19.932 --> 00:02:25.881
of the array, but we'll use tap, pass in
an array, say what we want to do with it,

42
00:02:25.881 --> 00:02:30.841
will immediately get back the tooth,
the 1, 2, 3, all right?

43
00:02:30.841 --> 00:02:35.250
I use it a lot for, especially in JSX.

44
00:02:35.250 --> 00:02:41.720
Any of the expressions that you put in
a react component have to return a value.

45
00:02:41.720 --> 00:02:44.630
So a lot of times like,
I don't know why something isn't working.

46
00:02:44.630 --> 00:02:49.071
I wish I could console log this, except
you can't console log inside of JSX and

47
00:02:49.071 --> 00:02:50.226
get the value back.

48
00:02:50.226 --> 00:02:53.270
So you end up doing stuff with like,
and stuff like that.

49
00:02:53.270 --> 00:02:59.229
So you could have one where you'd
have a value, we say tap value.

50
00:03:01.985 --> 00:03:05.790
This would, in your JSX expression,
take the value,

51
00:03:05.790 --> 00:03:09.110
console log it for you and
then return it again.

52
00:03:09.110 --> 00:03:11.680
So you don't necessarily have
to change any of your code.

53
00:03:11.680 --> 00:03:13.950
So a lot of times I'll abstract
this into a log function.

54
00:03:13.950 --> 00:03:16.841
It's just a utility
method to help me debug.

55
00:03:16.841 --> 00:03:22.765
Your job is to take
a basic version of Tap,

56
00:03:22.765 --> 00:03:30.397
and again, and
implement it with the types, right?

57
00:03:30.397 --> 00:03:34.770
So we know that, okay, what is the type
of thing we're passing in here?

58
00:03:36.440 --> 00:03:41.567
And then we know that this function,
with kinda think about if we,

59
00:03:41.567 --> 00:03:46.252
we know that the first argument
is an array of a certain type.

60
00:03:46.252 --> 00:03:51.096
So it might be, a given type,
and then we know that over here,

61
00:03:51.096 --> 00:03:56.593
we're just gonna pass in a single
version of that type into the array,

62
00:03:56.593 --> 00:03:59.550
have it come out the other end.

63
00:03:59.550 --> 00:04:02.421
So what we wanna do is figure out a way
to implement this function, right?

64
00:04:02.421 --> 00:04:05.882
Just give it a shot where you can kind
of see what we do here, identity,

65
00:04:05.882 --> 00:04:08.826
we're gonna take this, and
we're actually the full way.

66
00:04:08.826 --> 00:04:13.480
If we looked at it here as well,
we look at an identity function, right?

67
00:04:13.480 --> 00:04:15.984
We know that we're gonna have
a type variable called T,

68
00:04:15.984 --> 00:04:18.650
the value is gonna be T,
we're going to return it.

69
00:04:18.650 --> 00:04:21.640
Tap is going to be a little
bit more complicated.

70
00:04:21.640 --> 00:04:27.283
But your job is to create a version where,
takes an array of a given type,

71
00:04:27.283 --> 00:04:32.490
takes a function which takes that type and
returns that type.

72
00:04:32.490 --> 00:04:35.090
And then it returns the array of
the given type again, all right.

73
00:04:35.090 --> 00:04:37.885
So it's a little bit more
advanced than identity,

74
00:04:37.885 --> 00:04:41.920
but why don't you give it a shot and
then we'll do it together in a second.

