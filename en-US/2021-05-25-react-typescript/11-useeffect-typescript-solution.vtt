WEBVTT

1
00:00:00.020 --> 00:00:06.238
Our mission right now is to
debug a red squiggly, right?

2
00:00:06.238 --> 00:00:13.420
Which is kind of a rite of passage in
working in a TypeScript application.

3
00:00:13.420 --> 00:00:17.654
All right, so
number is not assignable to type void,

4
00:00:17.654 --> 00:00:21.241
returning either void or undefined, okay?

5
00:00:21.241 --> 00:00:25.646
So what do we need to do here, right?

6
00:00:25.646 --> 00:00:29.346
Well, it turns out that
useEffect is expecting

7
00:00:29.346 --> 00:00:33.052
a function signature
that returns undefined.

8
00:00:33.052 --> 00:00:35.913
SetTimeout and setInterval return numbers,

9
00:00:35.913 --> 00:00:41.320
which are usually an identifier for
clear interval, you would need the number.

10
00:00:41.320 --> 00:00:45.660
So really, because we're using
the immediately returning arrow function,

11
00:00:45.660 --> 00:00:50.657
we accidentally passed in the wrong value,
and TypeScript's built-in React types, or

12
00:00:50.657 --> 00:00:54.602
the React types that you install
with TypeScript, with React rather,

13
00:00:54.602 --> 00:00:55.411
caught that.

14
00:00:55.411 --> 00:01:00.162
So adding the curly braces will make
sure that we're not passing in code

15
00:01:00.162 --> 00:01:03.410
that we didn't intend to pass in.

16
00:01:03.410 --> 00:01:06.197
Now, in this case,
no harm, no foul, right?

17
00:01:06.197 --> 00:01:09.608
But it's one of those things
which is like, right?

18
00:01:09.608 --> 00:01:11.980
This accidentally did
a thing I wasn't expecting.

19
00:01:11.980 --> 00:01:17.750
And again, having that programmatic
ability to analyze your code and

20
00:01:17.750 --> 00:01:23.713
find all of these small bugs will go
through and add reliability to code,

21
00:01:23.713 --> 00:01:29.910
hopefully confidence, as you become
more comfortable with TypeScript.

22
00:01:31.090 --> 00:01:34.698
There's allegedly a study that
shows using type checking,

23
00:01:34.698 --> 00:01:39.930
whether it's TypeScript or Flow,
reduces the number of bugs 15%.

24
00:01:39.930 --> 00:01:40.935
I believe it.

25
00:01:40.935 --> 00:01:42.396
I have questions on the methodology,

26
00:01:42.396 --> 00:01:44.687
cuz how do you know about
the bugs you didn't find, right?

27
00:01:44.687 --> 00:01:49.371
But generally speaking,
the worst bugs are the very

28
00:01:49.371 --> 00:01:54.270
simple ones that didn't seem
obvious at the time, and

29
00:01:54.270 --> 00:02:01.526
you've gotta kinda suss them out and
find them, not at the most opportune time.

30
00:02:01.526 --> 00:02:04.746
So having somebody that's gonna analyze
your code, find all the things where your

31
00:02:04.746 --> 00:02:07.460
code is behaving just a little bit
differently than you might expect,

32
00:02:07.460 --> 00:02:08.715
I think is incredibly helpful.

33
00:02:10.495 --> 00:02:14.525
All right, this whole time, we've
been living in the modern era, right?

34
00:02:14.525 --> 00:02:18.725
We've been using functional components and
hooks everywhere.

35
00:02:18.725 --> 00:02:25.192
But I don't know about the rest of you.

36
00:02:25.192 --> 00:02:28.031
One thing in the chat is
useEffect can take a cleanup

37
00:02:28.031 --> 00:02:32.070
function if it needs a cleanup function,
but that is an optional value.

38
00:02:32.070 --> 00:02:37.000
That's why, theoretically, we can have
a second function in the type signature.

