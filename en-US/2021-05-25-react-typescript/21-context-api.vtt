WEBVTT

1
00:00:00.580 --> 00:00:05.492
So the other kind of core piece of
React that we need to think about is

2
00:00:05.492 --> 00:00:07.310
the context API.

3
00:00:07.310 --> 00:00:13.119
And a lot of the other things that
we saw using the context API,

4
00:00:13.119 --> 00:00:17.750
in its happy path, super easy, right?

5
00:00:17.750 --> 00:00:24.054
The issue we have with the state before,
which is what happens when

6
00:00:24.054 --> 00:00:29.130
we don't necessarily know
everything beforehand?

7
00:00:31.110 --> 00:00:32.429
With use state, we pass in a number.

8
00:00:32.429 --> 00:00:35.222
It's like cool, this state is number,
only take numbers for updating it, neat.

9
00:00:35.222 --> 00:00:38.420
Think about the context API
that we'll have to deal with.

10
00:00:38.420 --> 00:00:42.302
And second is but even without
it being asynchronous, per se,

11
00:00:42.302 --> 00:00:45.460
by the very nature of the way
that it works in React.

12
00:00:47.080 --> 00:00:51.380
There's lots of situations where we might
not have everything we need at the time.

13
00:00:51.380 --> 00:00:55.555
But let's work through
a kind of happy path first,

14
00:00:55.555 --> 00:01:00.240
just to see what it looks like and
how to work with it.

15
00:01:00.240 --> 00:01:03.463
So we've got a little bit
more complicated, but

16
00:01:03.463 --> 00:01:07.786
still simple on the grand scale of
things application here of that

17
00:01:07.786 --> 00:01:11.652
just creates a color swatch based on red,
green and blue.

18
00:01:11.652 --> 00:01:13.067
It's got some sliders.

19
00:01:13.067 --> 00:01:13.865
It's got some inputs.

20
00:01:13.865 --> 00:01:15.360
It takes a div.

21
00:01:15.360 --> 00:01:16.625
It changes the background color.

22
00:01:16.625 --> 00:01:20.350
What we wanna do is we're
gonna do two things.

23
00:01:20.350 --> 00:01:23.285
One, we're gonna eventually refactor
[INAUDIBLE] passing down the colors all

24
00:01:23.285 --> 00:01:24.570
the way through.

25
00:01:24.570 --> 00:01:27.279
And we're also going to
give it a dark mode,

26
00:01:27.279 --> 00:01:30.400
because that seems to
be in vogue these days.

27
00:01:30.400 --> 00:01:36.590
And theming is one of usually the core
use cases of the context API.

28
00:01:36.590 --> 00:01:40.660
There's a state management piece
as well that is frequently used.

29
00:01:40.660 --> 00:01:44.670
But the naming gives us a little bit
of a happy path to start with here.

30
00:01:44.670 --> 00:01:48.139
So we'll start with that just to
get just one, the context API,

31
00:01:48.139 --> 00:01:50.010
especially setting up a context.

32
00:01:50.010 --> 00:01:54.130
Using a context, you do all
the time once you have it set up.

33
00:01:54.130 --> 00:01:59.580
Setting up a new context, a lot of times,
is something you don't do often enough.

34
00:01:59.580 --> 00:02:02.782
You set it up once, and you use that
context throughout your application.

35
00:02:02.782 --> 00:02:07.495
So I think just getting the muscle
memory back around setting that up.

36
00:02:07.495 --> 00:02:13.999
So in this project,
we're gonna make a new file.

37
00:02:13.999 --> 00:02:15.709
I'll call it ThemeContext.

38
00:02:20.310 --> 00:02:23.780
And ThemeContext, let's fork it.

39
00:02:23.780 --> 00:02:24.781
We've got a completed one.

40
00:02:24.781 --> 00:02:25.840
We'll fork this one.

41
00:02:27.380 --> 00:02:29.725
I can save, and stuff like that.

42
00:02:29.725 --> 00:02:33.060
And we'll import React.

43
00:02:33.060 --> 00:02:39.673
And React has createContext on it.

44
00:02:39.673 --> 00:02:41.899
We can actually do it inline if we want.

45
00:02:41.899 --> 00:02:43.080
And we'll kinda take a look at this.

46
00:02:43.080 --> 00:02:44.274
We can make a new context.

47
00:02:47.900 --> 00:02:53.484
CreateContext, and
we'll give a light mode,

48
00:02:53.484 --> 00:02:58.787
which will have a background
color of white,

49
00:02:58.787 --> 00:03:01.730
and make the text white.

50
00:03:01.730 --> 00:03:04.015
And basically, what we have now.

51
00:03:04.015 --> 00:03:06.460
And we'll give it a dark mode.

52
00:03:09.680 --> 00:03:15.561
That'll have a darker background color,
I'm thinking.

53
00:03:15.561 --> 00:03:22.480
Let's go with, Dark gray there,
and we make the text white.

54
00:03:24.400 --> 00:03:28.344
Now, this is gonna behave not
in a dissimilar fashion for

55
00:03:28.344 --> 00:03:30.670
when we did use state before.

56
00:03:30.670 --> 00:03:35.797
Which is TypeScript was looking at
what we passed in as the initial value

57
00:03:35.797 --> 00:03:40.931
of that context, and effectively made
a type on the fly for us, right?

58
00:03:40.931 --> 00:03:46.260
So you can see, okay, the context should
be an object that takes a light and

59
00:03:46.260 --> 00:03:51.250
a dark, and each one of those has
a background color that's a string,

60
00:03:51.250 --> 00:03:53.383
and a color that's a string.

61
00:03:53.383 --> 00:03:55.852
And we could say something
like type is theme.

62
00:03:55.852 --> 00:04:00.264
And maybe that's got a background

63
00:04:00.264 --> 00:04:04.680
color that is a string and a color.

64
00:04:06.400 --> 00:04:10.722
That's a string.
And then we could say something along

65
00:04:10.722 --> 00:04:13.471
the lines of type themes.

66
00:04:15.807 --> 00:04:18.573
And I think we saw this in
one of the previous slides.

67
00:04:18.573 --> 00:04:22.796
I can be like, listen,
we can have as many different keys, or

68
00:04:22.796 --> 00:04:27.080
whatever in this case,
like colors, names, whatever.

69
00:04:27.080 --> 00:04:31.842
They should be strings, and
the value should be a theme, right?

70
00:04:31.842 --> 00:04:37.356
And then we could pull this out, As well.

71
00:04:40.814 --> 00:04:42.683
We'll call this maybe
a const defaultTheme.

72
00:04:46.852 --> 00:04:52.800
And we'll say that this default
theme should be of the type themes.

73
00:04:52.800 --> 00:04:54.250
See if I got that right, I did.

74
00:04:54.250 --> 00:04:55.563
And so now we can pass in default theme.

75
00:04:55.563 --> 00:04:59.269
And again, TypeScript figured it out on
the fly, but now I could have additional

76
00:04:59.269 --> 00:05:02.630
themes that are not just light and
dark that I could add later.

77
00:05:02.630 --> 00:05:05.940
I'm not going to, but just to kinda
show you how that might work.

78
00:05:05.940 --> 00:05:12.604
The other thing I could do here is I could
actually just say that these are, Any CSS

79
00:05:12.604 --> 00:05:17.955
properties could go in there as well and
get rid of just a singular theme, right?

80
00:05:17.955 --> 00:05:21.012
So now the idea of a theme is an object
that has any key as a string,

81
00:05:21.012 --> 00:05:22.850
in this case, light and dark.

82
00:05:22.850 --> 00:05:28.950
And then from there, we'll take anything
conforms to reacts CSS property.

83
00:05:28.950 --> 00:05:32.370
So still, we're giving type
information to TypeScript, but

84
00:05:32.370 --> 00:05:36.046
we're still pretty flexible in how
we define that as overtime as our

85
00:05:36.046 --> 00:05:39.480
application grows and changes,
and stuff along those lines.

86
00:05:41.180 --> 00:05:42.380
So we've got that in place.

87
00:05:42.380 --> 00:05:43.571
We've got our themes.

88
00:05:43.571 --> 00:05:48.580
Now we need to create the theme provider
that we wrap around our application.

89
00:05:48.580 --> 00:05:55.236
And so here, we'll say we're gonna need
to export this as well, eventually.

90
00:05:55.236 --> 00:05:58.610
And we'll also export a theme provider.

91
00:06:00.760 --> 00:06:04.432
And that is gonna take children,
and I could do it inline, or

92
00:06:04.432 --> 00:06:06.890
I can define it separately.

93
00:06:06.890 --> 00:06:07.574
We're gonna do it inline.

94
00:06:10.832 --> 00:06:14.583
So children we know is of
the type React.ReactNode.

95
00:06:18.504 --> 00:06:21.355
And that's gonna be a function.

96
00:06:21.355 --> 00:06:27.240
That is simply going to
return ThemeContext.Provider.

97
00:06:28.920 --> 00:06:33.238
The value, it's gonna be my themes, or

98
00:06:33.238 --> 00:06:38.196
default theme, and
it will render children.

99
00:06:43.740 --> 00:06:47.730
Nope, yeah,
close that the right way, great.

100
00:06:47.730 --> 00:06:49.847
Let's see, we've got some red squigglies.

101
00:06:49.847 --> 00:06:51.205
I gotta export a const.

102
00:06:52.708 --> 00:06:53.970
And everything will work.

103
00:06:53.970 --> 00:06:55.270
All right, so we have that in place.

104
00:06:55.270 --> 00:06:58.585
And again, that is mostly as a refresher
for the context API, as we'll see in

105
00:06:58.585 --> 00:07:02.030
the second example, where we have to
get a little bit more complicated.

106
00:07:02.030 --> 00:07:04.699
And I didn't wanna do the refresher at
the same time as dealing with some of

107
00:07:04.699 --> 00:07:05.650
the edge cases.

108
00:07:05.650 --> 00:07:07.428
So we've got that in place.

109
00:07:07.428 --> 00:07:10.450
The other thing we need to do is
we'll go to our index here, and

110
00:07:10.450 --> 00:07:13.021
we'll just wrap the application
in that provider.

111
00:07:19.478 --> 00:07:25.314
So we'll say, ThemeProvider,

112
00:07:25.314 --> 00:07:28.240
pulling the ThemeProvider.

113
00:07:29.420 --> 00:07:34.215
And then finally, in Application.tsx,
we're gonna just use react.useContext.

114
00:07:49.589 --> 00:07:53.810
UseContext, and we'll bring in
that ThemeContext from before.

115
00:07:53.810 --> 00:07:55.910
And now we have access to
it in the application.

116
00:07:55.910 --> 00:08:04.991
So here I can, for instance,
Gotta put a comma in there.

117
00:08:06.971 --> 00:08:07.906
We'll give it dark mode.

118
00:08:09.947 --> 00:08:14.890
And we can use this throughout our
application, as we might expect.

119
00:08:14.890 --> 00:08:21.620
So that worked, because for a reason we've
seen multiple times in this course so far.

120
00:08:21.620 --> 00:08:27.825
Which is, well, TypeScript had all
the information that it needed,

121
00:08:27.825 --> 00:08:33.100
and we didn't even need to
define all this extra type here.

122
00:08:33.100 --> 00:08:36.070
We chose to do it to give
ourselves some flexibility,

123
00:08:36.070 --> 00:08:38.930
but it looked effectively
at what we passed in.

124
00:08:38.930 --> 00:08:42.845
You can even see if we hover
over createContext, or

125
00:08:42.845 --> 00:08:47.790
the ThemeContext itself,
that the type is themes, right?

126
00:08:47.790 --> 00:08:49.380
And we didn't actually
declare it in there.

127
00:08:49.380 --> 00:08:55.850
If you look here, it's like, it's very
similar if we had said themes, okay, cool.

128
00:08:55.850 --> 00:08:58.150
Make sure you give me something
that conforms to that object.

129
00:08:58.150 --> 00:09:03.910
In the absence of that,
TypeScript was able to figure that out.

130
00:09:03.910 --> 00:09:08.070
One of the questions is what
are the other keys other than strings?

131
00:09:08.070 --> 00:09:11.130
I mean, you could say it's a number.

132
00:09:11.130 --> 00:09:15.489
Also, this syntax works for maps, or
a similar syntax works for maps as well,

133
00:09:15.489 --> 00:09:17.550
which can have any object.

134
00:09:17.550 --> 00:09:19.790
Obviously, this doesn't work anymore.

135
00:09:19.790 --> 00:09:23.137
The thing about JavaScript is that all
the keys are effectively strings anyway.

136
00:09:23.137 --> 00:09:27.255
So it's less of a type script constraint,
and

137
00:09:27.255 --> 00:09:31.805
a little bit more of a how
things are under the hood.

138
00:09:31.805 --> 00:09:35.910
Maps allow for a wider range of keys.

139
00:09:35.910 --> 00:09:38.660
But for what we think about
plain old JavaScript objects,

140
00:09:38.660 --> 00:09:41.100
you can use numbers is how arrays work.

141
00:09:41.100 --> 00:09:45.760
Or strings is usually the most common one,
in this case.

