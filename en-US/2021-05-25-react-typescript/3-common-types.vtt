WEBVTT

1
00:00:01.849 --> 00:00:04.549
We saw string here, that's great,

2
00:00:04.549 --> 00:00:09.130
we might also wanna see what some
of the other common ones are.

3
00:00:09.130 --> 00:00:13.549
So what are some of the other common types
that we might seek to use in a react

4
00:00:13.549 --> 00:00:14.490
application?

5
00:00:14.490 --> 00:00:19.571
And what kinda build on
this as the day goes on.

6
00:00:19.571 --> 00:00:24.980
So commonly used props, we can see
we've got this counter props, right?

7
00:00:24.980 --> 00:00:30.366
We saw the name as a string incident could
be a string, count could be a number,

8
00:00:30.366 --> 00:00:36.510
all the primitives in JavaScript
are available to us in TypeScript as well.

9
00:00:36.510 --> 00:00:40.698
If you wanna do an array, there's a few
different ways to tell it was stick with

10
00:00:40.698 --> 00:00:43.311
this one which is you have,
whatever type it is.

11
00:00:43.311 --> 00:00:45.830
And you'd use the brackets
scale that we see in arrays.

12
00:00:45.830 --> 00:00:51.253
And what's interesting is, with all
the dynamic programming languages,

13
00:00:51.253 --> 00:00:54.737
one of the first examples are,
and check it out.

14
00:00:54.737 --> 00:00:57.863
You can put anything you want in an array,
you're gonna write a string and

15
00:00:57.863 --> 00:01:00.380
then a number, and
then something else, right?

16
00:01:00.380 --> 00:01:03.880
Generally speaking, if you whatever map
over an array, that's not super helpful.

17
00:01:03.880 --> 00:01:07.840
So you could say that an array can
have either strings and numbers in it.

18
00:01:07.840 --> 00:01:10.014
You can just say that it
has an array of anything or

19
00:01:10.014 --> 00:01:12.810
arrays that are certain object or
shape along those lines.

20
00:01:12.810 --> 00:01:16.157
But generally speaking, we can say that,
hey, not only is this an array,

21
00:01:16.157 --> 00:01:18.561
what is an array that should
only consist of strings?

22
00:01:18.561 --> 00:01:22.450
That way if somebody accidentally tries
to put undefined in that array or no, or

23
00:01:22.450 --> 00:01:24.491
a primitive that we weren't expecting.

24
00:01:24.491 --> 00:01:27.095
TypeScript will catch that for
us and be, whoa,

25
00:01:27.095 --> 00:01:31.840
I don't think this is what you wanted
to do and that's helpful as well.

26
00:01:31.840 --> 00:01:35.108
The other thing we can see is before
we set the name was a string,

27
00:01:35.108 --> 00:01:36.230
any string, right?

28
00:01:36.230 --> 00:01:38.323
Because, there's lots of names but

29
00:01:38.323 --> 00:01:42.860
there are cases where we kind of want
one of a few different statuses, right?

30
00:01:42.860 --> 00:01:45.619
We want not just any string, but
maybe we're making a button for

31
00:01:45.619 --> 00:01:48.789
our component library and that button
should either be a primary button,

32
00:01:48.789 --> 00:01:51.410
a secondary button or destructive button.

33
00:01:51.410 --> 00:01:53.774
Right or
disable button what have you, right?

34
00:01:53.774 --> 00:01:57.989
In that case, you might also define
which one of these statuses along with.

35
00:01:57.989 --> 00:02:01.800
Now, yeah, status is a string, but it's
only one of three strings in existence,

36
00:02:01.800 --> 00:02:04.640
if you're not using that string,
you're not passing it in.

37
00:02:06.170 --> 00:02:07.132
So for objects,

38
00:02:07.132 --> 00:02:11.396
generally speaking, you look kind of
that another object is just an empty

39
00:02:11.396 --> 00:02:16.420
object that's just as long as there's
some kind of object, we can work with it.

40
00:02:16.420 --> 00:02:20.601
But a lot of cases you might want
to define the shape of an object,

41
00:02:20.601 --> 00:02:21.615
right, cool.

42
00:02:21.615 --> 00:02:24.727
We're gonna pass in a prop that's an item,
it should have an ID, that's a string and

43
00:02:24.727 --> 00:02:26.300
a title, that's a string.

44
00:02:26.300 --> 00:02:29.875
One of the interesting things about
TypeScript as opposed to some other typed

45
00:02:29.875 --> 00:02:32.959
languages is TypeScript uses
what's called structural typing.

46
00:02:32.959 --> 00:02:33.486
Which is,

47
00:02:33.486 --> 00:02:37.236
as long as it's an object that conforms
to the shape that we're expecting,

48
00:02:37.236 --> 00:02:41.510
we should be good to go, you don't have
to necessarily define every single type.

49
00:02:41.510 --> 00:02:45.729
TypeScript will mostly try to figure it
out because JavaScript itself allows you

50
00:02:45.729 --> 00:02:47.600
to do pretty dynamic programming.

51
00:02:48.680 --> 00:02:51.714
TypeScript tries to look at the structure
of stuff rather than the name or

52
00:02:51.714 --> 00:02:53.590
anything along those lines.

53
00:02:53.590 --> 00:02:58.424
So an item is just simply a JavaScript
object in this case that has an ID and

54
00:02:58.424 --> 00:03:00.000
a title.

55
00:03:00.000 --> 00:03:05.059
Items plural, will be an array and in
which case we can define the shape of it.

56
00:03:05.059 --> 00:03:07.439
This was looking like this makes you sad,

57
00:03:07.439 --> 00:03:10.839
that's probably a good feeling
that you should nurture and

58
00:03:10.839 --> 00:03:15.478
respect because we could theoretically
pull that out into its own type, right?

59
00:03:15.478 --> 00:03:19.155
TypeScript doesn't enforce it,
everything has a type associated with it.

60
00:03:19.155 --> 00:03:22.499
You wanted to find is just an object and
has a type ID and a title, cool,

61
00:03:22.499 --> 00:03:25.135
but you could also pull that
item out into its own type.

62
00:03:25.135 --> 00:03:30.107
So now a single item is of the type item,
and items floral is an array of items,

63
00:03:30.107 --> 00:03:35.287
you can begin to kinda refactor your
code if things get a little crazy.

64
00:03:35.287 --> 00:03:39.840
All right, some other ones that we
might see along the way, which is.

65
00:03:39.840 --> 00:03:42.864
Listen, this item might
have any kinda keys, but

66
00:03:42.864 --> 00:03:47.270
those keys have to be strings and
the value should be an item.

67
00:03:47.270 --> 00:03:50.087
Or if we wanna say that the key is
a number and the value is a string,

68
00:03:50.087 --> 00:03:52.210
we can define all those things as well.

69
00:03:52.210 --> 00:03:55.837
This is another syntax for
doing it that I don't use.

70
00:03:55.837 --> 00:03:59.766
Alright, and terms of methods and
stuff along those lines,

71
00:03:59.766 --> 00:04:02.231
you can kinda see towards the bottom,

72
00:04:02.231 --> 00:04:07.110
there was a common one that you might say,
which is what are your mistakes?

73
00:04:07.110 --> 00:04:11.323
What types of those arguments, which is
a little bit different than JavaScript.

74
00:04:11.323 --> 00:04:14.985
I know you define three arguments can
give me zero, you can give me eight,

75
00:04:14.985 --> 00:04:16.119
I don't really care.

76
00:04:16.119 --> 00:04:20.492
Typescript's a little bit more, listen,
if you said, we're gonna pass in an ID and

77
00:04:20.492 --> 00:04:23.133
it's gonna be a number,
that's what I wanna see.

78
00:04:23.133 --> 00:04:24.683
And if it returns undefined,

79
00:04:24.683 --> 00:04:28.589
a lot of times we say that it returns
void, if it doesn't return anything,

80
00:04:28.589 --> 00:04:31.509
or if we intentionally return
undefined will say void.

81
00:04:31.509 --> 00:04:34.718
So stuff like event handlers and
stuff that don't return anything,

82
00:04:34.718 --> 00:04:35.669
they just execute.

83
00:04:35.669 --> 00:04:39.701
So those would return void, and you can
also see that react comes with a whole

84
00:04:39.701 --> 00:04:43.481
bunch of TypeScript definitions for
common things that you might see.

85
00:04:43.481 --> 00:04:47.855
So if you look at this bottom one here,
we've got React.MouseEvent with this

86
00:04:47.855 --> 00:04:52.376
HTML button element because just to make
sure that you're earning your salary.

87
00:04:52.376 --> 00:04:56.840
We all know that events are not the same,
some of them have a target with a value

88
00:04:56.840 --> 00:05:01.309
and stuff along those, every keyboard
events have different properties and

89
00:05:01.309 --> 00:05:03.320
mouse events, so on and so forth.

90
00:05:03.320 --> 00:05:06.724
So in order for TypeScript to help you
a lot of times it needs to know what

91
00:05:06.724 --> 00:05:08.700
event you're intending this to be.

92
00:05:08.700 --> 00:05:13.246
So, doesn't have a key code or what not,
depending on the type of event.

93
00:05:13.246 --> 00:05:16.663
So we will come with a lot of
the definitions necessary,

94
00:05:16.663 --> 00:05:21.335
so if you know this is onclick handler
on a button, you can be, okay, cool.

95
00:05:21.335 --> 00:05:23.745
It's gonna be a mouse event
from HTML button, right?

96
00:05:23.745 --> 00:05:26.334
And then TypeScript, all right,
cool, I know what's on that event.

97
00:05:26.334 --> 00:05:30.093
Let me autocomplete let me make sure
you don't misspell event.target or

98
00:05:30.093 --> 00:05:33.005
something along those lines
because TypeScript you're

99
00:05:33.005 --> 00:05:35.140
trying to solve save you from two things.

100
00:05:35.140 --> 00:05:37.684
One is, logical mistakes but

101
00:05:37.684 --> 00:05:43.382
let's be really honest with ourselves
most of bugs in my code are,

102
00:05:43.382 --> 00:05:49.130
I misspelled something and
then I don't know what I misspelled.

103
00:05:49.130 --> 00:05:54.098
And then I lose the better part of my
morning and possibly the first half of

104
00:05:54.098 --> 00:05:58.672
my afternoon to find out that I
misspelled an action type in Redux.

105
00:05:58.672 --> 00:06:03.614
Maybe you're better than me, I don't know,
that's my life, that's how it works,

106
00:06:03.614 --> 00:06:04.304
all right?

107
00:06:04.304 --> 00:06:08.462
If there's a return value, and we wanna
define it, we just saw ones that we won't

108
00:06:08.462 --> 00:06:11.559
have a type that had a method or
something along those lines.

109
00:06:11.559 --> 00:06:15.978
If we wanna just define what a function
does in line, we can say okay a and

110
00:06:15.978 --> 00:06:20.931
b should be numbers and the return type
here is a number you see after that colon.

111
00:06:20.931 --> 00:06:23.569
One of the things we're gonna see and
I want you to kinda look out for

112
00:06:23.569 --> 00:06:25.422
it as we write some code
together a little bit.

113
00:06:25.422 --> 00:06:29.509
Is that if a and b are a number and
you're returning a+b,

114
00:06:29.509 --> 00:06:34.194
you can even omit the return type,
because TypeScript would be,

115
00:06:34.194 --> 00:06:38.647
if you give me two numbers and
you return them added together.

116
00:06:38.647 --> 00:06:43.011
I'm smart I can figure out that
a number plus a number is a number.

117
00:06:43.011 --> 00:06:47.697
You'll only need to tell TypeScript about
the types if it can't figure it out itself

118
00:06:47.697 --> 00:06:50.997
for some reason, most of the time,
if it can figure it out,

119
00:06:50.997 --> 00:06:53.220
you can omit tons of this stuff.

120
00:06:53.220 --> 00:06:56.739
It'll be the same way when we
saw that original name tag was,

121
00:06:56.739 --> 00:07:00.540
this is a function that takes no
arguments returns a JSX element.

122
00:07:00.540 --> 00:07:05.990
Why, cuz he returned some JSX and
it figured all that out for you.

123
00:07:05.990 --> 00:07:09.171
Optional props, which we'll see in
a little bit If you just put a question

124
00:07:09.171 --> 00:07:13.510
mark, and so we have required prop, which
is a boolean, then we have optional prop.

125
00:07:13.510 --> 00:07:16.786
Optional prop is one that we could have or
could not have.

126
00:07:16.786 --> 00:07:21.377
Now, the interesting thing about that is
TypeScript is also gonna try to save you

127
00:07:21.377 --> 00:07:22.803
from yourself, right.

128
00:07:22.803 --> 00:07:27.430
In so far, if you say that a property
is optional in a react component, and

129
00:07:27.430 --> 00:07:32.075
then you try to use it, TypeScript is
gonna get a little annoyed with you.

130
00:07:32.075 --> 00:07:35.210
And it's gonna say basically,
hey, that could be undefined and

131
00:07:35.210 --> 00:07:36.758
you didn't check yet, right.

132
00:07:36.758 --> 00:07:41.048
And so it is going to insist that you
check if something is undefined before you

133
00:07:41.048 --> 00:07:42.766
use it in the react component.

134
00:07:42.766 --> 00:07:47.009
There are other all sorts of stuff,
we'll get into some of it in a little bit.

135
00:07:47.009 --> 00:07:50.639
But that is enough that you need to
know to be dangerous to build some react

136
00:07:50.639 --> 00:07:51.364
components.

