WEBVTT

1
00:00:00.030 --> 00:00:06.580
So here I have, what is effectively
a JavaScript function, right?

2
00:00:06.580 --> 00:00:11.887
And you're gonna take a spin at this,
and with this JavaScript function,

3
00:00:11.887 --> 00:00:17.207
we want to allow it to be an add function
that can use a partial application.

4
00:00:17.207 --> 00:00:23.563
Which means,
let me scroll down to the bottom here,

5
00:00:23.563 --> 00:00:30.790
if I give it if we say add(2 and
3), it should return 5.

6
00:00:30.790 --> 00:00:36.838
If I say, add(2),
it should return a function that waits for

7
00:00:36.838 --> 00:00:38.971
the second argument.

8
00:00:38.971 --> 00:00:45.686
So I could say const addTwo, And

9
00:00:45.686 --> 00:00:48.693
then if I said, addTwo,

10
00:00:48.693 --> 00:00:54.294
let's say to (5), that should give me 7.

11
00:00:54.294 --> 00:00:58.251
So effectively, there's two different
interfaces, you give it two numbers,

12
00:00:58.251 --> 00:01:00.692
it gives you back a value,
you give it one number,

13
00:01:00.692 --> 00:01:03.915
it gives you back a function that
takes a second number, sevent.

14
00:01:07.726 --> 00:01:11.718
Right, or
we can also just say like ten is,

15
00:01:18.693 --> 00:01:21.020
My math is doing great right now, right?

16
00:01:21.020 --> 00:01:24.174
Live coding fine live math
is apparently a lot harder.

17
00:01:24.174 --> 00:01:26.883
Now you can see TypeScript a little
angrier about this cuz it doesn't

18
00:01:26.883 --> 00:01:29.000
really understand what's happening.

19
00:01:29.000 --> 00:01:32.726
But, we wanna basically support
both giving it two arguments or

20
00:01:32.726 --> 00:01:36.456
giving it one argument, and
then the second one later, right?

21
00:01:36.456 --> 00:01:38.751
And so kinda looking at the async ad,

22
00:01:38.751 --> 00:01:43.489
you can see that we're definitely gonna
have two lines, which effectively

23
00:01:43.489 --> 00:01:48.468
define both of the different interfaces
that we want to support for it, right?

24
00:01:48.468 --> 00:01:50.181
And you can make helper
types like this is for

25
00:01:50.181 --> 00:01:53.519
the asynchronous one where it's a callback
where it's gonna say it takes a number and

26
00:01:53.519 --> 00:01:55.250
returns nothing, that we're using here.

27
00:01:55.250 --> 00:01:59.924
You can use helper types,
you can do it online but, your mission for

28
00:01:59.924 --> 00:02:05.254
the next five minutes, is to take a stab
at trying to add function overloads,

29
00:02:05.254 --> 00:02:07.645
for this add function right here.

