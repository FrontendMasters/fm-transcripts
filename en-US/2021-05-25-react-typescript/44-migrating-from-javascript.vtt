WEBVTT

1
00:00:00.240 --> 00:00:05.681
One common question that comes up a little
bit is about the migration piece.

2
00:00:05.681 --> 00:00:07.118
We can talk about a little bit,

3
00:00:07.118 --> 00:00:10.176
like I'm gonna warn you that there
is no perfect answer for this.

4
00:00:10.176 --> 00:00:12.852
But we can kind of talk
about it a little bit.

5
00:00:12.852 --> 00:00:16.280
There is some kind of official
advice in the reaction guides.

6
00:00:16.280 --> 00:00:20.472
I've talked to a lot of
different teams about how

7
00:00:20.472 --> 00:00:24.266
some of the different
ways to go about this.

8
00:00:24.266 --> 00:00:31.095
Basically this entire course, we have
used the strictest mode of Type Script.

9
00:00:31.095 --> 00:00:36.430
Right, we've say like, don't allow
anything to implicitly be the type of any.

10
00:00:36.430 --> 00:00:40.577
Right?
We don't allow any kind of accidental ways

11
00:00:40.577 --> 00:00:44.580
that JavaScript can
cause anything to work.

12
00:00:44.580 --> 00:00:49.358
And we haven't allowed
any JavaScript files.

13
00:00:49.358 --> 00:00:55.321
That doesn't work for a large code base.

14
00:00:55.321 --> 00:00:58.376
The problem though is that large code
bases are all specially unique in

15
00:00:58.376 --> 00:00:59.112
their own ways.

16
00:00:59.112 --> 00:01:03.592
But some of the kinda high level advice
that I will give around this is one.

17
00:01:03.592 --> 00:01:05.071
There isn't allowed JS flag.

18
00:01:05.071 --> 00:01:11.650
This will allow your Type Script compiler,
to import files that are JavaScript.

19
00:01:11.650 --> 00:01:14.528
And what it will do in that case,
it will go in, and

20
00:01:14.528 --> 00:01:17.490
it will try to basically
define everything as any.

21
00:01:17.490 --> 00:01:20.230
So you have to have,
the ability to allow implicit any.

22
00:01:20.230 --> 00:01:24.211
And you will not get any tapes,
if you'll basically be a JavaScript app.

23
00:01:24.211 --> 00:01:25.294
And at that point,

24
00:01:25.294 --> 00:01:28.760
you can start converting stuff
over like kind of piecemeal.

25
00:01:28.760 --> 00:01:33.153
One of the rules that we did and like we
were doing a major kind of rewrite of our

26
00:01:33.153 --> 00:01:35.705
application when we switch to Type Script.

27
00:01:35.705 --> 00:01:39.527
So we were kind of only a few months in,
during the biggest one that we did.

28
00:01:39.527 --> 00:01:42.393
But part of it was
basically like we allowed.

29
00:01:42.393 --> 00:01:47.800
We kept we kept the Type Script
rules very very loose.

30
00:01:47.800 --> 00:01:52.281
But the rule was like if you touch
it you have to type it, right?

31
00:01:52.281 --> 00:01:54.580
And so,
if you were gonna commit a file and

32
00:01:54.580 --> 00:01:56.956
change a file you have
to get it up to speed.

33
00:01:56.956 --> 00:02:00.438
And sometimes that snowballs and
gets a little bit out of control

34
00:02:00.438 --> 00:02:04.646
at which point you talk about it as a team
and figure out where to draw the line.

35
00:02:04.646 --> 00:02:08.951
Cuz if it's like, yeah, I was gonna do
this like quick change this one file.

36
00:02:08.951 --> 00:02:13.175
And I was supposed to be like a two point
ticket and it spiraled out of control.

37
00:02:13.175 --> 00:02:15.858
There's a decision to make the team but

38
00:02:15.858 --> 00:02:21.313
you kinda start with the kind of most wide
and broad and loose Type Script rules.

39
00:02:21.313 --> 00:02:24.290
You begin to tighten them up over time.

40
00:02:24.290 --> 00:02:28.920
There are tools that will go through at
least try to like statically analyze your

41
00:02:28.920 --> 00:02:29.760
code as well.

42
00:02:29.760 --> 00:02:33.951
And start to put in some of those
types for you, that'll work as well.

43
00:02:33.951 --> 00:02:37.522
But I think the general like
high level advice is yeah.

44
00:02:37.522 --> 00:02:41.530
It is super compelling,
we struggled with this as a team.

45
00:02:41.530 --> 00:02:46.074
It is super compelling to want to go like
yeah, we're gonna do this type of thing.

46
00:02:46.074 --> 00:02:47.196
We're gonna do it right.

47
00:02:47.196 --> 00:02:50.485
In a way you start a new code base, you're
like, this is could be the code base.

48
00:02:50.485 --> 00:02:54.111
Where we don't accrue any tech debt
cuz we're gonna do everything right.

49
00:02:54.111 --> 00:02:58.630
And then yeah, check into that
code base two years later, right.

50
00:02:58.630 --> 00:03:00.734
Priorities and stuff happens but

51
00:03:00.734 --> 00:03:05.556
I think being really okay with having
some of the more loose in general ones.

52
00:03:05.556 --> 00:03:10.215
And then figuring out for your code base,
what the plan of action is.

53
00:03:10.215 --> 00:03:13.021
This is not solely a technical problem.

54
00:03:13.021 --> 00:03:16.295
This also becomes like just
a collaboration as what the what

55
00:03:16.295 --> 00:03:18.986
the agreement is and
how we're going to do this.

56
00:03:18.986 --> 00:03:23.644
And how do we work together on it and it's
like, maybe you have to talk about this.

57
00:03:23.644 --> 00:03:27.171
But I think using the loose
versions of the tools.

58
00:03:27.171 --> 00:03:31.791
There's also and this is kind of more Type
Script seven than Type Script and react.

59
00:03:31.791 --> 00:03:39.050
But for many libraries, some of them
include types in the NPM packages.

60
00:03:39.050 --> 00:03:44.281
For other ones you can NPM install,
at types slash the name of the package.

61
00:03:44.281 --> 00:03:47.369
Which is community driven
types that you can use for.

62
00:03:47.369 --> 00:03:53.132
So you would say, all right, we're gonna
use the loose version of our dependencies.

63
00:03:53.132 --> 00:03:56.041
And then we're also gonna
install the type definitions for

64
00:03:56.041 --> 00:03:57.911
our dependencies that support them.

65
00:03:57.911 --> 00:04:01.356
And so you start to get most of the way
there, and you can start to allow JS and

66
00:04:01.356 --> 00:04:01.925
then okay.

67
00:04:01.925 --> 00:04:05.410
Eventually we're going once we know
we've converted all the files over and

68
00:04:05.410 --> 00:04:06.560
we did an effort around.

69
00:04:06.560 --> 00:04:10.528
It wasn't just like as we touched on
we did as we committed new files or

70
00:04:10.528 --> 00:04:11.424
changed files.

71
00:04:11.424 --> 00:04:14.777
But we also had a certain number
of points every sprint to go and

72
00:04:14.777 --> 00:04:16.724
convert as many files as possible.

73
00:04:16.724 --> 00:04:19.861
And just kind of work that
out with product as well.

74
00:04:19.861 --> 00:04:23.184
So there isn't necessarily a right answer
on I think depends on the code base.

75
00:04:23.184 --> 00:04:27.980
It depends on your team depends
on a lot of the constraints that

76
00:04:27.980 --> 00:04:29.649
you have at the time.

77
00:04:29.649 --> 00:04:33.740
But I think the large
scale rewrite never works.

