WEBVTT

1
00:00:00.430 --> 00:00:02.966
We still have to,
TypeScript's gonna be angry with us.

2
00:00:02.966 --> 00:00:05.564
And what we're gonna need to do for

3
00:00:05.564 --> 00:00:09.785
the next little bit is to make
TypeScript less mad at us.

4
00:00:09.785 --> 00:00:12.846
So, first thing that it
is mad at us about is,

5
00:00:12.846 --> 00:00:16.405
well color swatch doesn't
need anything anymore.

6
00:00:16.405 --> 00:00:20.251
Color sliders also doesn't
need anything any more,

7
00:00:20.251 --> 00:00:25.816
either I'll comment out the inputs for
now, we'll get to those in a second.

8
00:00:25.816 --> 00:00:30.181
But we still have this problem that I just
kinda hand waved to and ignored there for

9
00:00:30.181 --> 00:00:32.053
a second there, which is, okay.

10
00:00:32.053 --> 00:00:35.106
Yeah, no, I'm not okay with this.

11
00:00:35.106 --> 00:00:37.754
Because we don't know what it's gonna be.

12
00:00:37.754 --> 00:00:40.913
So we could say that listen, we can do it,
we didn't sell this the same way we solved

13
00:00:40.913 --> 00:00:42.831
with some of that state,
you state stuff before.

14
00:00:42.831 --> 00:00:49.493
We can say listen, yeah, it can either
be the RGBContextType or it can be null.

15
00:00:49.493 --> 00:00:55.699
Look, everything's mostly okay,
here, right now.

16
00:00:55.699 --> 00:01:01.180
But not everywhere,
because now it doesn't know

17
00:01:01.180 --> 00:01:06.802
if these properties exist on this object,
right?

18
00:01:06.802 --> 00:01:11.209
Because if you're trying to pull red,
green and blue off of null,

19
00:01:11.209 --> 00:01:12.941
you're gonna crash, and

20
00:01:12.941 --> 00:01:18.077
TypeScript doesn't know how to save
you from yourself in this case, right?

21
00:01:18.077 --> 00:01:22.579
And so you could do something where
we comment, let's copy this, and

22
00:01:22.579 --> 00:01:26.105
we'll comment it out for
a second and we'll just say,

23
00:01:32.003 --> 00:01:34.364
Just name it something, right?

24
00:01:34.364 --> 00:01:40.082
It's, this can be value,
or it can be null.

25
00:01:40.082 --> 00:01:43.783
Test group has,
i believe this is in JavaScript now, too,

26
00:01:43.783 --> 00:01:47.642
where you could say something like,
console.log, value.

27
00:01:49.941 --> 00:01:53.500
?.blue, which is basically,
if value exists,

28
00:01:53.500 --> 00:01:56.741
then pull the blue property off of it,
right?

29
00:01:56.741 --> 00:02:02.058
And if you swapped out everything in
your code base to use value, ?.blue,

30
00:02:02.058 --> 00:02:07.378
you would appease TypeScript, because
all TypeScript is trying to say is,

31
00:02:07.378 --> 00:02:10.303
I cannot promise you that it's not null.

32
00:02:10.303 --> 00:02:15.131
And I can't let you just call
this property because just

33
00:02:15.131 --> 00:02:19.754
because JavaScript lets
you doesn't mean I can't,

34
00:02:19.754 --> 00:02:23.260
in good conscience, let you call this.

35
00:02:23.260 --> 00:02:27.480
And so it's saying, please just make
sure it's there before you use it.

36
00:02:27.480 --> 00:02:32.555
So it doesn't work, and you could do this
all throughout your code base forever.

37
00:02:32.555 --> 00:02:37.670
My argument to you is just
going to be don't, right?

38
00:02:37.670 --> 00:02:40.519
And so that's where we have
some other options here,

39
00:02:40.519 --> 00:02:42.365
to have TypeScript be less angry.

40
00:02:42.365 --> 00:02:46.458
Because to be clear,
TypeScript's not wrong.

41
00:02:46.458 --> 00:02:52.484
Many of us have been caught by
bugs just as insidious where it's,

42
00:02:52.484 --> 00:02:57.425
such and such is not a property
on undefined, right?

43
00:02:57.425 --> 00:03:01.854
It's happened in a JavaScript code base
before that you have thought something was

44
00:03:01.854 --> 00:03:03.255
an object when it's not.

45
00:03:03.255 --> 00:03:09.131
So as much as it seems kind of annoying,
it's not too bad, it's a good idea.

46
00:03:09.131 --> 00:03:16.706
So one of things that we can do is
TypeScript has this keyword called as,

47
00:03:16.706 --> 00:03:21.360
and as allows you, To, say listen.

48
00:03:21.360 --> 00:03:24.906
I understand what you think
is a type system, but

49
00:03:24.906 --> 00:03:29.241
this is a situation where I know better,
and just trust me.

50
00:03:29.241 --> 00:03:32.301
So we could say here's an empty object.

51
00:03:32.301 --> 00:03:38.669
And we're gonna say but just pretend
that it's an RGB context type, right?

52
00:03:38.669 --> 00:03:41.673
And because the default value
is now an empty object,

53
00:03:41.673 --> 00:03:44.358
calling those properties
is not problematic.

54
00:03:44.358 --> 00:03:47.060
It's not gonna blow up,
they'll just be undefined,

55
00:03:47.060 --> 00:03:49.363
which could be problematic
in your code base.

56
00:03:49.363 --> 00:03:54.400
But really, we know that this is
effectively set on the next line, right?

57
00:03:54.400 --> 00:03:57.749
We are confident, we, in this case,

58
00:03:57.749 --> 00:04:02.462
find it within our power to
override type scripts like

59
00:04:02.462 --> 00:04:07.401
built-in mechanisms,
cuz we know what we're doing.

60
00:04:07.401 --> 00:04:11.390
Another place where you might
find yourself using this is in

61
00:04:11.390 --> 00:04:14.280
that character cards that we had earlier.

62
00:04:14.280 --> 00:04:17.043
The alignment when only ever good or
bad, but

63
00:04:17.043 --> 00:04:19.745
TypeScript is assumed
that it was a string.

64
00:04:19.745 --> 00:04:22.885
And so if you pulled it from an API,
TypeScript might not be able to know that.

65
00:04:22.885 --> 00:04:25.528
But you could be, listen,
this JavaScript object,

66
00:04:25.528 --> 00:04:28.887
I know that it's going to be this type,
that it's only good or bad.

67
00:04:28.887 --> 00:04:32.581
Trust me, even though you just got this
JSON response back from the server.

68
00:04:32.581 --> 00:04:35.090
So it's times where you
have enough confidence.

69
00:04:35.090 --> 00:04:39.791
You feel that you're able to take
a little bit of the risk here to know

70
00:04:39.791 --> 00:04:43.668
that maybe the property read
is not on here just yet, but

71
00:04:43.668 --> 00:04:46.992
we know this isn't even
a asynchronous event.

72
00:04:46.992 --> 00:04:49.099
So we know in case it's happening.

73
00:04:49.099 --> 00:04:51.138
There is a third way to do this.

74
00:04:51.138 --> 00:04:54.114
I'll kinda just tell you what it is now,
but

75
00:04:54.114 --> 00:04:58.782
we need to know a few more things
before we can implement it without you

76
00:04:58.782 --> 00:05:03.708
just staring at me, yeah, great,
he's writing complete gibberish.

77
00:05:03.708 --> 00:05:06.464
But the other way is to kind of
create an abstraction that will,

78
00:05:06.464 --> 00:05:09.073
in the same way we had to check
to see if value was null or not.

79
00:05:09.073 --> 00:05:12.975
We could create our own useContext that
checks to see if it's defined before it

80
00:05:12.975 --> 00:05:16.775
lets us use anything, and just take all
those checks and put it in one place.

81
00:05:16.775 --> 00:05:19.649
That is arguably the correct answer.

82
00:05:19.649 --> 00:05:25.158
To be clear, this is what we do,
we know in this case.

83
00:05:25.158 --> 00:05:30.770
If you didn't need dispatch,
you could say you can even define a green,

84
00:05:30.770 --> 00:05:35.738
red, green and blue value here,
and only put in dispatch lane.

85
00:05:35.738 --> 00:05:38.246
There's lots of ways to handle this.

86
00:05:38.246 --> 00:05:42.325
Generally speaking, I think that this
will do the trick most of the time but

87
00:05:42.325 --> 00:05:45.385
understand you're taking on
a certain amount of risk.

88
00:05:45.385 --> 00:05:50.093
So yeah, that is some of the problems
that come with the fact that

89
00:05:50.093 --> 00:05:54.028
a lot of the safety and
benefits here are really good.

90
00:05:54.028 --> 00:05:57.340
But we are ultimately building
on top of a language and

91
00:05:57.340 --> 00:06:01.028
platform that wasn't always
immediately there for this.

92
00:06:01.028 --> 00:06:04.490
So one of the things the problem
we have to solve for, and

93
00:06:04.490 --> 00:06:07.599
again the very beginning of this course,
right?

94
00:06:07.599 --> 00:06:11.295
Yeah, just say that your strings
are gonna be strings, everything's great.

95
00:06:11.295 --> 00:06:16.153
Where are the pain points with React and
TypeScript start to come along

96
00:06:16.153 --> 00:06:20.614
is when you start to do some of
the more advanced React patterns.

97
00:06:20.614 --> 00:06:26.029
Cuz like most things, the easy
things are easy, and the weird cases

98
00:06:26.029 --> 00:06:32.115
are when you try to do some things that
are a little bit trickier, all right?

99
00:06:32.115 --> 00:06:39.069
So if we look, our color sliders and
our color inputs are roughly the same.

100
00:06:39.069 --> 00:06:44.848
We're just basically using, we're
defaulting to the built-in HTML elements.

101
00:06:44.848 --> 00:06:49.236
So this is an input with
the type range this one,

102
00:06:49.236 --> 00:06:54.087
the color slider, this is one,
yeah, type range.

103
00:06:54.087 --> 00:06:58.378
And then the color input is just
a regular type number, right?

104
00:06:58.378 --> 00:07:01.678
But other than that they're
mostly the same other,

105
00:07:01.678 --> 00:07:04.085
than some formatting and stuff that.

106
00:07:04.085 --> 00:07:07.050
It'd be great and then the sliders floor
I'll just create the red, green and

107
00:07:07.050 --> 00:07:07.653
blue for each.

108
00:07:07.653 --> 00:07:10.366
I'll show them to you real quick.

109
00:07:10.366 --> 00:07:14.050
So color sliders, yeah,
it's just three of them,

110
00:07:14.050 --> 00:07:16.915
color inputs is roughly the same thing.

111
00:07:16.915 --> 00:07:20.719
Would it be nice if I could just
use them kind of interchangeably?

112
00:07:20.719 --> 00:07:24.970
And one of the things that we
can notice is that previously,

113
00:07:24.970 --> 00:07:30.683
the sliders we took over the individual
side was actually still to this moment.

114
00:07:30.683 --> 00:07:37.559
Take ID label and value, we're gonna
need an on change in there as well,

115
00:07:37.559 --> 00:07:41.525
the inputs right now don't do anything.

116
00:07:41.525 --> 00:07:44.152
And the slider, it is id label value and

117
00:07:44.152 --> 00:07:47.900
then the on change that we're
gonna put in both places.

118
00:07:47.900 --> 00:07:50.444
It'd be great if I could create
an abstraction here, right?

119
00:07:50.444 --> 00:07:55.449
I would love to just be able to say hey,
they take roughly the same props,

120
00:07:55.449 --> 00:07:58.418
or in a few minutes
exactly the same props.

121
00:07:58.418 --> 00:08:01.947
Wouldn't it be nice to simply define,
okay,

122
00:08:01.947 --> 00:08:07.921
here's the props that I'm expecting that
are kind of similar to both of them.

123
00:08:07.921 --> 00:08:12.283
And just say like, all right, for you,
I wanna say here's the color input

124
00:08:12.283 --> 00:08:15.277
component, make me the three
of them wire them up.

125
00:08:15.277 --> 00:08:17.677
For you, color sliders, do the same.

126
00:08:17.677 --> 00:08:20.906
So one might think, no,
I had to specifically type everything,

127
00:08:20.906 --> 00:08:24.252
there's no way that I can be dynamic
with what component I pass in and

128
00:08:24.252 --> 00:08:26.388
have it conditionally rendered, right?

129
00:08:26.388 --> 00:08:27.956
All right, so let's, let's take a look
at the next one that I wanted to

130
00:08:27.956 --> 00:08:28.856
show you which is that's the wrong one.

131
00:08:28.856 --> 00:08:29.970
Not right?

132
00:08:29.970 --> 00:08:31.563
So let's make a new one
called color adjustment.

133
00:08:35.041 --> 00:08:38.130
And so okay,
we're gonna have an interface here.

134
00:08:38.130 --> 00:08:44.095
It could be a type, and
this is gonna be our AdjustmentinputProps.

135
00:08:44.095 --> 00:08:46.243
And what [INAUDIBLE] id
is gonna be a string.

136
00:08:48.616 --> 00:08:52.803
A label is going to be a string,

137
00:08:54.627 --> 00:08:58.535
Value will be a number,
and then on change.

138
00:09:02.926 --> 00:09:04.778
Is going to be an event, and

139
00:09:04.778 --> 00:09:09.377
we know that it's gonna be a change
event from HTML input elements.

140
00:09:09.377 --> 00:09:12.246
Luckily, they're both HTML input elements.

141
00:09:14.550 --> 00:09:20.689
And that's going to return void,
so we have this common type now.

142
00:09:20.689 --> 00:09:25.674
And what we're gonna say is listen,
you can pass me in any component that

143
00:09:25.674 --> 00:09:29.040
you want as long as it
adheres to this interface.

144
00:09:29.040 --> 00:09:32.015
You wanna use this color input, fine.

145
00:09:32.015 --> 00:09:33.797
You wanna use a color slider?

146
00:09:33.797 --> 00:09:39.111
As long as you pass in a component to
this corner we're building right now that

147
00:09:39.111 --> 00:09:44.127
adheres to this interface,
we'll be able to work with it dynamically.

148
00:09:44.127 --> 00:09:48.809
So then, the props for rendering,
the three will be an interface,

149
00:09:48.809 --> 00:09:52.770
color adjustment props,
just like we've seen before.

150
00:09:52.770 --> 00:09:55.799
And again, this is really
gonna take one thing which is,

151
00:09:55.799 --> 00:09:57.827
what component that I want to render.

152
00:09:57.827 --> 00:10:01.799
And I'm using capital A cuz I'm
gonna talk about a React component.

153
00:10:01.799 --> 00:10:07.163
And so, this is one that we'll use,
called React.

154
00:10:07.163 --> 00:10:08.780
We're gonna talk about these
in a second a little bit more.

155
00:10:08.780 --> 00:10:13.188
I'm just kinda introducing the topic
now of what we call utility types.

156
00:10:13.188 --> 00:10:16.460
So React.ComponentType is,

157
00:10:19.280 --> 00:10:24.715
Saying, okay,
I got pull in react, hold on.

158
00:10:28.847 --> 00:10:30.102
Input.

159
00:10:34.233 --> 00:10:38.619
From react and then adjust it,
let's go with adjustment.

160
00:10:38.619 --> 00:10:40.371
I like that one, better,

161
00:10:40.371 --> 00:10:44.923
what we're gonna say is the type
of the prop that we're expecting.

162
00:10:44.923 --> 00:10:47.772
Previously, we've seen string,
number, boolean.

163
00:10:47.772 --> 00:10:52.182
Some objects, we're gonna say is,
the adjustment prop on this

164
00:10:52.182 --> 00:10:57.259
component can be any component that
adheres to these properties up here.

165
00:10:57.259 --> 00:11:00.674
All right, so
as long as we pass in something,

166
00:11:00.674 --> 00:11:06.028
a component that has the same interface,
we can pass it in dynamically.

167
00:11:06.028 --> 00:11:09.695
So let's actually just grab,
I'm gonna grab the color sliders.

168
00:11:12.217 --> 00:11:15.086
Real quick, and
I'm gonna reuse most of this code.

169
00:11:15.086 --> 00:11:19.123
So we'll just grab that and paste it in.

170
00:11:19.123 --> 00:11:24.017
And at this point,
we do need to pull in react.use.context.

171
00:11:29.953 --> 00:11:33.351
And we'll import RGB context as well.

172
00:11:47.330 --> 00:11:50.626
Context, sweet, the only thing that's
blowing up right now is I haven't pulled

173
00:11:50.626 --> 00:11:53.756
in the color component cuz we don't
actually wanna use the color slider yet.

174
00:11:53.756 --> 00:11:56.685
What we want to do is whatever
adjustment has been passed in.

175
00:11:56.685 --> 00:12:01.629
So we know that the only prop
that this takes is adjustment.

176
00:12:03.933 --> 00:12:07.099
And here we'll say,

177
00:12:09.668 --> 00:12:13.784
Yeah, that's just our
color adjustment props.

178
00:12:13.784 --> 00:12:17.800
And then we can swap it out saying
whatever component is passed in,

179
00:12:17.800 --> 00:12:22.764
instead of rendering three color sliders,
do whatever component was passed in.

180
00:12:25.576 --> 00:12:30.617
Right, so this works, we just need to
use it, so we can kind of swap it out.

181
00:12:30.617 --> 00:12:34.798
So go into application and
we're gonna say is

182
00:12:34.798 --> 00:12:39.430
instead of color sliders
we're gonna say color.

183
00:12:41.313 --> 00:12:43.750
Yep, wait for it,

184
00:12:46.299 --> 00:12:50.759
Import color adjustment,

185
00:12:53.888 --> 00:12:59.624
Color adjustment,
the values are in red, that's fine.

186
00:12:59.624 --> 00:13:03.472
But yeah, my suspicion when autocomplete
didn't work is that I didn't export it.

187
00:13:07.519 --> 00:13:14.211
Or I called it, All right,
that should work now.

188
00:13:14.211 --> 00:13:18.606
So we've got color adjustment, and
now we can basically say all right,

189
00:13:18.606 --> 00:13:23.450
instead of saying color sliders plural,
what I want you to be is a color slider.

190
00:13:25.979 --> 00:13:28.911
I'm sorry, ColorAdjustment.

191
00:13:28.911 --> 00:13:34.436
And the adjustment component is
gonna be a singular color slider.

192
00:13:42.278 --> 00:13:44.828
All right, and then we can go ahead,
we put more of those in there.

193
00:13:44.828 --> 00:13:52.087
I can also change this to a color,
Input, and it will render both of them.

194
00:13:52.087 --> 00:13:58.495
So now, I can just make changes to this
one kinda higher order-ish component, and,

195
00:13:58.495 --> 00:14:04.818
it's not hard coded as you can only have
stuff to put in anything that confirms.

196
00:14:04.818 --> 00:14:07.494
To this adjustment input
props will work and

197
00:14:07.494 --> 00:14:10.904
we can start dynamically
passing in react components.

198
00:14:10.904 --> 00:14:16.148
Well, as we just need to figure out what
React gives us in this case as well.

199
00:14:16.148 --> 00:14:19.590
And so that came from the utility
type of React.component type.

