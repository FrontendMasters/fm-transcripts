WEBVTT

1
00:00:00.020 --> 00:00:02.510
We have one last thing
we're gonna cover here.

2
00:00:02.510 --> 00:00:06.907
And that is taking a little
bit of what we learned and

3
00:00:06.907 --> 00:00:13.051
applying it back to some of the stuff
we were doing with the context API.

4
00:00:13.051 --> 00:00:18.038
And I told you earlier that
there were effectively

5
00:00:18.038 --> 00:00:22.905
three ways to handle
the fact that we didn't have

6
00:00:22.905 --> 00:00:28.260
everything we needed for
the context object in time.

7
00:00:29.320 --> 00:00:35.590
And I told you about two of them, right?

8
00:00:35.590 --> 00:00:38.447
And so we're gonna talk a little
bit about the third and

9
00:00:38.447 --> 00:00:41.550
we'll see the code here,
I'm gonna talk about it.

10
00:00:41.550 --> 00:00:45.740
And then we will go and implement it.

11
00:00:45.740 --> 00:00:49.721
But basically, when we said hey,

12
00:00:49.721 --> 00:00:54.388
it could be the RGBContext type or null,

13
00:00:54.388 --> 00:00:57.974
TypeScript got angry with us.

14
00:00:57.974 --> 00:01:01.616
Well, since it could be null, I'm gonna
need you to check to make sure it's on

15
00:01:01.616 --> 00:01:03.840
the value object before
you use it constantly.

16
00:01:05.640 --> 00:01:10.617
And that seemed tedious, so
then we use the as keyword to say,

17
00:01:10.617 --> 00:01:15.116
listen, we know that this is
going to be a context object

18
00:01:15.116 --> 00:01:19.643
almost immediately,
trust us, everything's cool.

19
00:01:19.643 --> 00:01:22.990
And like I said before,
that's probably okay, but

20
00:01:22.990 --> 00:01:26.540
you did take on a certain amount of risk.

21
00:01:26.540 --> 00:01:31.196
So if you're like,
I'm not comfortable with risk,

22
00:01:31.196 --> 00:01:35.530
that's legitimate and probably wise.

23
00:01:35.530 --> 00:01:37.890
So we can look at this pattern here,

24
00:01:37.890 --> 00:01:42.650
which is to have our own
abstraction around createContext.

25
00:01:42.650 --> 00:01:46.531
And what it will do is it'll create
useContext one that'll basically anytime

26
00:01:46.531 --> 00:01:50.310
we try to use the context,
it'll make sure that it's defined first.

27
00:01:50.310 --> 00:01:54.642
So basically, we're taking all of those,
like I said before, we got to tell me that

28
00:01:54.642 --> 00:01:58.050
the RGB values in the context is
set before I let you use them.

29
00:01:58.050 --> 00:02:00.860
We just basically have an abstraction
around useContext that

30
00:02:00.860 --> 00:02:02.130
automatically checks.

31
00:02:02.130 --> 00:02:06.960
We just use that all over the place, and
then everything will just kind of work.

32
00:02:06.960 --> 00:02:09.663
And there's some trade offs here as well.

33
00:02:09.663 --> 00:02:11.570
So we'll go ahead and
we'll take a look at that.

34
00:02:11.570 --> 00:02:15.256
I wanna talk through
the code just one time and

35
00:02:15.256 --> 00:02:20.688
I'll kind of explain it again,
as we go ahead and we implement it,

36
00:02:20.688 --> 00:02:25.910
which is this idea that we've
got this generic in here.

37
00:02:25.910 --> 00:02:28.720
And I wanna talk especially
about this one right here first.

38
00:02:29.730 --> 00:02:34.304
We're gonna say that we're
gonna have a generic, and

39
00:02:34.304 --> 00:02:39.973
we are going to insist that eventually,
when the context gets set,

40
00:02:39.973 --> 00:02:43.467
that it is an object of some kind, right?

41
00:02:43.467 --> 00:02:46.710
It's a key value and
it could be any object, right,

42
00:02:46.710 --> 00:02:50.703
cuz this is this is pretty generic
helper or it's null, right?

43
00:02:50.703 --> 00:02:53.977
And that's what we did before
in that first example.

44
00:02:53.977 --> 00:02:57.894
And then we'll start out
with an empty context.

45
00:02:57.894 --> 00:03:01.871
And then basically, we're gonna always
check to see if it's undefined and

46
00:03:01.871 --> 00:03:02.748
throw an error.

47
00:03:02.748 --> 00:03:07.887
If it's undefined, which will appease
TypeScript that we checked to save

48
00:03:07.887 --> 00:03:12.945
was undefined first, before we used it,
and then we will return a tuple or

49
00:03:12.945 --> 00:03:18.350
tuple, that's up to you, of our own
useContext and that context provider.

50
00:03:18.350 --> 00:03:22.696
Effectively wrapping that check for
undefined in a helper.

51
00:03:22.696 --> 00:03:26.764
And we'll use that instead of the built
in tools that will then kind of talk to

52
00:03:26.764 --> 00:03:28.174
react.createContext.

53
00:03:28.174 --> 00:03:30.190
All right, so let's get that in place.

54
00:03:30.190 --> 00:03:34.369
Just give me one second to pull
the right code sandbox, and

55
00:03:34.369 --> 00:03:36.683
we'll get started from there.

56
00:03:36.683 --> 00:03:39.488
This is the one we got,
with our color adjustment and everything,

57
00:03:39.488 --> 00:03:40.900
we've got our context, great.

58
00:03:40.900 --> 00:03:44.533
So this is the one and
I will hide everything else right here,

59
00:03:44.533 --> 00:03:47.880
where we used as,
we wanna get rid of that.

60
00:03:47.880 --> 00:03:51.451
So the first thing we're gonna
do is we can do it in this file.

61
00:03:51.451 --> 00:03:56.470
I'm gonna make a new file just so that
we're not scrolling up and down too much.

62
00:03:56.470 --> 00:03:57.790
And so I'll make a new file here.

63
00:03:57.790 --> 00:04:00.026
I'm gonna call it createContext.

64
00:04:04.558 --> 00:04:11.955
All right, it's got React in it,
my god, TSX, Fuck this.

65
00:04:11.955 --> 00:04:14.826
All right, so
we've got this createContext.

66
00:04:14.826 --> 00:04:19.197
And we'll kind of type in the code that
we saw before so that we can just, again,

67
00:04:19.197 --> 00:04:21.760
explain it one more time
as we work through it.

68
00:04:21.760 --> 00:04:24.358
So we'll import React.

69
00:04:26.425 --> 00:04:31.960
From React, and we're gonna export
this createContext function.

70
00:04:31.960 --> 00:04:36.823
I'm gonna use a function
declaration cuz just to be

71
00:04:36.823 --> 00:04:40.905
friends of my function declaration fans.

72
00:04:40.905 --> 00:04:43.719
As before, we can say T,
we can say E in this case,

73
00:04:43.719 --> 00:04:47.780
let's use T because, again,
it's just a name of variable.

74
00:04:47.780 --> 00:04:50.170
It has to extend an object, or can be no.

75
00:04:52.600 --> 00:04:56.740
Just like we saw before, this is like
in that very first example that we did.

76
00:04:56.740 --> 00:04:59.160
And we're gonna use react.createContext.

77
00:05:03.330 --> 00:05:07.257
And this way, T is gonna be whatever
contexts we sought to create.

78
00:05:07.257 --> 00:05:09.660
So before, in this example,
it was RGBContext.

79
00:05:09.660 --> 00:05:12.520
But this helper method
wants to be generic enough.

80
00:05:12.520 --> 00:05:15.400
You wanna use it again,
for themeContext, cool.

81
00:05:15.400 --> 00:05:18.963
I don't care what context
shape you eventually want,

82
00:05:18.963 --> 00:05:23.460
you can pass that in here, and
we'll be able to support it.

83
00:05:23.460 --> 00:05:27.028
So we'll have context, and

84
00:05:27.028 --> 00:05:31.643
we'll say react.createContext.

85
00:05:35.677 --> 00:05:38.890
Yeah, I was either,
gonna get it this time, right?

86
00:05:38.890 --> 00:05:43.323
Or undefined, this means that we don't
have to define it on the outset,

87
00:05:43.323 --> 00:05:46.610
which is what the problem we
ended up with before was.

88
00:05:46.610 --> 00:05:50.757
So we'll say undefined, So

89
00:05:50.757 --> 00:05:53.830
this is effectively that line of code we
were playing with in the first example.

90
00:05:54.940 --> 00:05:56.643
And now we're just gonna put in our check,

91
00:05:56.643 --> 00:05:59.380
we're gonna have this
a special useContext.

92
00:05:59.380 --> 00:06:02.050
So we don't have to check in every
component that uses the context.

93
00:06:03.380 --> 00:06:08.345
So this is our bespoke one or
artisinal useContext if you will.

94
00:06:11.332 --> 00:06:15.724
We'll say our c is react.useContext with

95
00:06:15.724 --> 00:06:20.360
the context we just
created in this closure.

96
00:06:22.220 --> 00:06:24.070
Now we'll check just to
make sure it's defined.

97
00:06:26.010 --> 00:06:31.160
If c is undefined, we can't do anything,

98
00:06:31.160 --> 00:06:37.409
so- Throw a new error or
handle it gracefully.

99
00:06:37.409 --> 00:06:41.641
If you know what the fallback
behavior should be,

100
00:06:41.641 --> 00:06:46.377
it is probably better to
implement that here than to just

101
00:06:46.377 --> 00:06:50.131
throw an error, this is somewhat generic.

102
00:06:56.241 --> 00:07:01.386
You must have a defined context,

103
00:07:01.386 --> 00:07:06.728
how about as a value for Provider.

104
00:07:06.728 --> 00:07:09.959
All right, sweet, so we've got that there.

105
00:07:12.012 --> 00:07:15.650
And now we'll say otherwise, cool.

106
00:07:15.650 --> 00:07:20.591
If that's not the case, you can return

107
00:07:20.591 --> 00:07:25.697
that context object out for us, right?

108
00:07:25.697 --> 00:07:30.192
And now, that's our useContext
that we'll use in our components,

109
00:07:30.192 --> 00:07:31.984
this function right here.

110
00:07:31.984 --> 00:07:36.571
And so all we're gonna return
out of this is that useContext

111
00:07:36.571 --> 00:07:40.800
function we just made,
and also context.Provider.

112
00:07:40.800 --> 00:07:45.370
I guess you could return the whole context
as well, but all we can use it for

113
00:07:45.370 --> 00:07:47.607
is context or the provider rather.

114
00:07:47.607 --> 00:07:51.724
And we saw this syntax before,
but just I'll reiterate it,

115
00:07:51.724 --> 00:07:54.885
all as const is it makes
this array a read only.

116
00:07:54.885 --> 00:07:58.746
And so like I said before,
using const in JavaScript will make it, so

117
00:07:58.746 --> 00:08:01.279
you can't replace two with another two,
but

118
00:08:01.279 --> 00:08:04.810
it still makes a mutable array,
an immutable object.

119
00:08:04.810 --> 00:08:07.737
In this case,
I think you can actually see it here.

120
00:08:07.737 --> 00:08:12.010
Yes, in terms of read only array, so
you cannot push anything on this array.

121
00:08:12.010 --> 00:08:14.561
You cannot pop anything off the array,

122
00:08:14.561 --> 00:08:19.130
you will always get these two values
out of it cuz we have that in place.

123
00:08:20.860 --> 00:08:25.640
So now, we'll go back into our context,
instead of using react.createContext,

124
00:08:25.640 --> 00:08:28.082
we wanna use our brand new createContext.

125
00:08:29.525 --> 00:08:32.315
So we're going to context.TSX.

126
00:08:32.315 --> 00:08:36.094
And now we're gonna pull in, let's see if,

127
00:08:40.995 --> 00:08:42.972
Let me make sure I exported that as well.

128
00:08:42.972 --> 00:08:44.085
I did, sweet.

129
00:08:45.677 --> 00:08:49.842
We will, Import,

130
00:08:49.842 --> 00:08:56.656
createContext from ./createContext.

131
00:08:56.656 --> 00:08:58.291
And we will swap this one out.

132
00:09:00.079 --> 00:09:04.003
And this one now no longer
requires an initial value.

133
00:09:04.003 --> 00:09:07.831
But we do need to tell that generic,
which we defined as T,

134
00:09:07.831 --> 00:09:13.160
what type it should eventually expect,
which is gonna be this RGBContextType.

135
00:09:14.440 --> 00:09:16.481
So we can swap that in.

136
00:09:16.481 --> 00:09:20.009
The other thing we're gonna get out of
this instead of just an RBGContext,

137
00:09:20.009 --> 00:09:23.942
we're getting that useContext and we're
also getting the provider in this case.

138
00:09:23.942 --> 00:09:25.599
So we'll take the provider out of that.

139
00:09:33.243 --> 00:09:36.833
And now here instead you can see
that we no longer have that, so

140
00:09:36.833 --> 00:09:42.957
we're gonna place this in here is instead,
And swap it out here.

141
00:09:45.202 --> 00:09:49.590
Everything's pretty happy
with us in this file.

142
00:09:49.590 --> 00:09:51.430
And we've gone ahead and built that.

143
00:09:51.430 --> 00:09:56.891
So now that's still wired up from before,
and so all of that should be fine as well.

144
00:09:56.891 --> 00:10:00.532
And you can see that it's not angry that
didn't initially have the value cuz it's

145
00:10:00.532 --> 00:10:01.183
gonna check.

146
00:10:01.183 --> 00:10:04.270
It's not expecting a value and
it will later check,

147
00:10:04.270 --> 00:10:07.530
we'll see that in
the components in a moment.

148
00:10:07.530 --> 00:10:11.149
So now we can go into,
I believe color adjustment, and

149
00:10:11.149 --> 00:10:13.996
then color swatch for
the two that used it.

150
00:10:13.996 --> 00:10:16.200
You can say this is no longer a thing.

151
00:10:16.200 --> 00:10:25.543
So here we'll grab,
actually we need our, Our useContext.

152
00:10:28.548 --> 00:10:35.080
If we need to probably export that one
from before, Pull that out of this file.

153
00:10:44.098 --> 00:10:45.182
Is this the right file?

154
00:10:49.123 --> 00:10:51.150
Hold on, let's try on a second.

155
00:10:53.674 --> 00:10:58.040
Or we can do actually, as we'll export
this here, I did, I'm ahead of myself.

156
00:10:59.890 --> 00:11:04.487
It's rare that you live code ahead
of yourself to think about there.

157
00:11:04.487 --> 00:11:07.650
So we'll go and we start on color
adjustment, we'll do that one.

158
00:11:07.650 --> 00:11:13.997
We're gonna pull out that, useContext,
not gonna use React anymore.

159
00:11:15.504 --> 00:11:17.380
So we've got our new useContext.

160
00:11:19.130 --> 00:11:26.820
That one has the context that we created
in the closure, so it no longer takes one.

161
00:11:26.820 --> 00:11:30.510
So now you can see that we basically
got the best of both worlds.

162
00:11:30.510 --> 00:11:35.446
We got a situation where we did
not need to have the full known

163
00:11:35.446 --> 00:11:39.220
context object when we
created the context.

164
00:11:39.220 --> 00:11:45.025
And also we don't need to check to see
if the values exist in every component

165
00:11:45.025 --> 00:11:52.150
because we have an abstraction that will
check for us every time we seek to use it.

166
00:11:52.150 --> 00:11:56.894
Now, you might be wondering,
is there a trade off?

167
00:11:56.894 --> 00:12:01.253
There's a small trade off,
which is instead of being able to use

168
00:12:01.253 --> 00:12:06.178
react.useContext and pass in the,
like the normal API that everyone on

169
00:12:06.178 --> 00:12:11.265
your team knows how to use, each different
context that you create is going

170
00:12:11.265 --> 00:12:16.760
to create its own useContext that
has the right context and a closure.

171
00:12:16.760 --> 00:12:20.983
And so for every context,
you got to use the right useContext, but

172
00:12:20.983 --> 00:12:24.541
you have to pull in the context
from those files anyway.

173
00:12:24.541 --> 00:12:29.407
It really just becomes a documentation and
education effort, right?

174
00:12:29.407 --> 00:12:33.312
And that's still a trade-off cuz again,
mistakes can be made around, you now have

175
00:12:33.312 --> 00:12:36.960
a function that kind of behaves mostly
like the one everyone knows and loves.

176
00:12:36.960 --> 00:12:40.560
These are some of the tricky decisions
that you need to make as a team and

177
00:12:40.560 --> 00:12:42.220
to think about as well, right?

178
00:12:42.220 --> 00:12:45.436
You've gotten the kind of full
type safety this point but

179
00:12:45.436 --> 00:12:47.314
with other trade offs and risks.

180
00:12:47.314 --> 00:12:51.724
And I unfortunately cannot
fully advise on that one,

181
00:12:51.724 --> 00:12:54.880
that is kind of up to you as well.

182
00:12:54.880 --> 00:12:58.606
So we now have our better
useContext in place and

183
00:12:58.606 --> 00:13:03.545
we can do one other thing that we
learned from a previous example

184
00:13:03.545 --> 00:13:07.946
that we didn't talk about
cuz it just wasn't time yet.

185
00:13:07.946 --> 00:13:13.113
But just to kind of tie it all together,
we have this adjustment input props and

186
00:13:13.113 --> 00:13:15.714
these proxy to a bunch of input fields.

187
00:13:15.714 --> 00:13:23.560
And they take ID label, which is not
on a traditional input element, right?

188
00:13:23.560 --> 00:13:26.979
We're using a regular label tag, we're
making a div that has a label tag and

189
00:13:26.979 --> 00:13:30.419
a value and it's using the right HTML for
and everything along those lines.

190
00:13:32.410 --> 00:13:37.080
We can actually say that these adjustment
input props, and this is how you

191
00:13:37.080 --> 00:13:41.911
would do something we saw before but
with an interface, we can say extends.

192
00:13:43.333 --> 00:13:48.032
This is a utility type that is
built into React in this case.

193
00:13:52.105 --> 00:13:56.720
All right, so now our adjustment and for
props take those that we saw before,

194
00:13:56.720 --> 00:14:01.200
but they also support everything that
an input property supports as well.

195
00:14:01.200 --> 00:14:05.549
And then we could then spread
those over the input field and

196
00:14:05.549 --> 00:14:08.491
pass them through in that case as well.

197
00:14:08.491 --> 00:14:12.970
So yeah, we've solved for
that third case on the context API, right?

198
00:14:12.970 --> 00:14:15.070
So we have the three hypotheses.

199
00:14:15.070 --> 00:14:19.153
Like I said, there's not necessarily
a perfect answer in that case.

200
00:14:19.153 --> 00:14:23.485
But you can kind of choose
which one is the right one,

201
00:14:23.485 --> 00:14:28.426
given the trade offs you're
comfortable making as a team.

202
00:14:28.426 --> 00:14:32.249
Typically, we chose to use the as
keywords, we chose the second hypothesis.

203
00:14:33.850 --> 00:14:37.746
Part of that was just the time
space continuum in that case.

204
00:14:37.746 --> 00:14:39.266
I can say that, yeah,

205
00:14:39.266 --> 00:14:44.871
just say that we have shipped app without
any bugs ever would obviously not be true,

206
00:14:44.871 --> 00:14:50.181
but that one has not bitten us in three
years, some wood I can knock on, right?

207
00:14:50.181 --> 00:14:52.808
So far that has not been
less than three years.

208
00:14:52.808 --> 00:14:58.144
So I feel yeah, fairly confident
recommending that when don't ask me,

209
00:14:58.144 --> 00:15:00.247
if it doesn't work for you.

210
00:15:00.247 --> 00:15:04.648
I've given you the warnings and
explain the trade offs.

211
00:15:04.648 --> 00:15:06.547
If you wanna play with the stove,
but yeah, so

212
00:15:06.547 --> 00:15:09.870
those are three ways to handle the context
with the different trade offs as well.

213
00:15:09.870 --> 00:15:13.967
But TypeScript can support and I think
a new ones understanding how React and

214
00:15:13.967 --> 00:15:17.880
TypeScript work together, help to
figure out some of these edge cases.

215
00:15:17.880 --> 00:15:20.986
It's not that things necessarily
have to be hard in TypeScript,

216
00:15:20.986 --> 00:15:23.526
it's just simply that there
might be a way around it,

217
00:15:23.526 --> 00:15:27.320
you just kinda have to get a little bit
more comfortable with some of the nuance.

218
00:15:27.320 --> 00:15:31.742
And also understand that React also brings
a set of utility types and types around

219
00:15:31.742 --> 00:15:36.247
working with components to it as well in
addition to what you get from TypeScript.

220
00:15:41.542 --> 00:15:45.995
So in this case,
one of the questions in the chat is,

221
00:15:45.995 --> 00:15:51.410
why did I choose react.htmlprops
versus componentType?

222
00:15:51.410 --> 00:15:55.180
Cuz this case, I want the actual full,

223
00:15:55.180 --> 00:16:00.225
the prompt definition for
the HTML element itself.

224
00:16:00.225 --> 00:16:05.262
I don't necessarily wanna read it
directly, I wanna go ahead and

225
00:16:05.262 --> 00:16:10.150
pull me out this one from the built
in HTML elements as well.

226
00:16:10.150 --> 00:16:13.861
In fact, I don't wanna support any
other component type in this case.

