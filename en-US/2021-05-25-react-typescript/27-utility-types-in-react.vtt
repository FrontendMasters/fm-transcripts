WEBVTT

1
00:00:00.600 --> 00:00:04.149
So we've talked a little bit
about some of the utility types,

2
00:00:04.149 --> 00:00:07.982
that are either built into TypeScript or
built into Reacts types.

3
00:00:07.982 --> 00:00:10.000
This is not an exhaustive list
of all the utility types.

4
00:00:10.000 --> 00:00:12.802
There are a lot more than a lot
more built into TypeScript,

5
00:00:12.802 --> 00:00:14.529
you can go through the docs and see.

6
00:00:14.529 --> 00:00:16.913
We're just gonna cover some
of the ones who might,

7
00:00:16.913 --> 00:00:19.860
there were most often to likely
find while dealing with React.

8
00:00:21.330 --> 00:00:23.560
The first one is this idea of Keyof.

9
00:00:23.560 --> 00:00:29.212
And keyof allows you to basically
get all the keys in a given type.

10
00:00:29.212 --> 00:00:32.652
So you think about like
object keys in JavaScript,

11
00:00:32.652 --> 00:00:37.560
this one will get you just all of
the keys an object in a union type.

12
00:00:37.560 --> 00:00:41.718
So if you wanted to get just all
the names of a prop on a given object,

13
00:00:41.718 --> 00:00:43.740
keyof will allow you to do that.

14
00:00:43.740 --> 00:00:45.725
We'll actually use this
to figure out like,

15
00:00:45.725 --> 00:00:48.914
when an object like the table rows on a
character card we'll see in a little bit.

16
00:00:48.914 --> 00:00:53.587
I only want to let them specify a known
property on that to pick out what we want

17
00:00:53.587 --> 00:00:58.440
to show on the table row,
we can use key I've defined that as well.

18
00:00:58.440 --> 00:01:01.500
If you just need to get a single one,

19
00:01:01.500 --> 00:01:06.090
you want to get the value of
a single key and an object.

20
00:01:06.090 --> 00:01:10.200
So you can use a bracket notation
that we've seen in JavaScript before.

21
00:01:10.200 --> 00:01:13.643
So prop0 will get us the type of C.

22
00:01:13.643 --> 00:01:16.577
Again, if that was a string or
a number, it would be string or number.

23
00:01:16.577 --> 00:01:18.601
Numbers or work, if you wanted to get two,

24
00:01:18.601 --> 00:01:21.170
you can just use a union
type in there as well.

25
00:01:21.170 --> 00:01:26.660
And again, it's a way to kind of
effectively met a program with our types.

26
00:01:26.660 --> 00:01:28.342
If you want to get all the values,

27
00:01:28.342 --> 00:01:31.180
there isn't necessarily
a built-in helper for that.

28
00:01:31.180 --> 00:01:35.703
If passing in a union of keys,
will get you multiple keys and

29
00:01:35.703 --> 00:01:40.950
saying, okay, passing all the keys
will get you all the values.

30
00:01:40.950 --> 00:01:43.870
So here you can see we've
got this type of obj.

31
00:01:43.870 --> 00:01:50.060
If we say, go get me the values of all
the keys, we'll get all the values.

32
00:01:50.060 --> 00:01:54.239
Sometimes it'd be clear, there are things
that you used to have to write your own

33
00:01:54.239 --> 00:01:57.740
utility tests for them,
they're not built into TypeScript.

34
00:01:57.740 --> 00:02:01.915
So I wouldn't be surprised if
that changes in the future but

35
00:02:01.915 --> 00:02:06.360
as of TypeScript 4.2,
that is absolutely the case.

36
00:02:06.360 --> 00:02:09.837
Unions we've seen but
never really talked about directly,

37
00:02:09.837 --> 00:02:13.020
which is you have a type A that has a,
b and c, right?

38
00:02:13.020 --> 00:02:15.580
It can be either a, or b, or c.

39
00:02:15.580 --> 00:02:18.320
But you can also do that
across two different types.

40
00:02:18.320 --> 00:02:21.290
So we say it can either be
the type of A or the type of B.

41
00:02:21.290 --> 00:02:25.503
Well, now you get everything
kind of in both of them.

42
00:02:25.503 --> 00:02:30.328
The interesting part in
the reason that I bring this up,

43
00:02:30.328 --> 00:02:35.256
cuz unions will be anything
as isn't either one of them,

44
00:02:35.256 --> 00:02:39.345
but it's kind of
the opposite with objects.

45
00:02:39.345 --> 00:02:42.597
So if you unioned objectType A and
objectType B,

46
00:02:42.597 --> 00:02:46.639
the only one that would be in
here is this idea of sharedProp,

47
00:02:46.639 --> 00:02:50.345
because it's the only one
common between the two.

48
00:02:50.345 --> 00:02:55.120
Intersections for raw values are only
the ones that appear in both types,

49
00:02:55.120 --> 00:02:59.894
but you actually saw us use this with
a pizza state before with objects that

50
00:02:59.894 --> 00:03:02.880
will actually combine them together.

51
00:03:02.880 --> 00:03:05.780
So with the objects it will
allow us to say like, okay,

52
00:03:05.780 --> 00:03:07.810
everything is one plus the other one.

53
00:03:07.810 --> 00:03:11.570
So they act opposite,
objects versus primitives.

54
00:03:11.570 --> 00:03:14.003
I don't really get to make the rules here,

55
00:03:14.003 --> 00:03:16.430
I just have to try my
best to explain them.

56
00:03:16.430 --> 00:03:20.501
So for primitives, a union will be
anything that's neither one of them,

57
00:03:20.501 --> 00:03:23.860
but for
objects is only the shared properties.

58
00:03:23.860 --> 00:03:28.767
An intersection in the case of this
ampersand that ends between A and

59
00:03:28.767 --> 00:03:33.671
B on that last line is only once common,
but if you do it two objects it

60
00:03:33.671 --> 00:03:38.518
will create a combined object of the two,
I don't make the rules.

61
00:03:38.518 --> 00:03:43.075
We're not gonna get into this but like you
might see it when you hover over some of

62
00:03:43.075 --> 00:03:47.158
the ones in React, is you can use
conditionals but it's only ternary to

63
00:03:47.158 --> 00:03:51.923
figure out, okay, this is one if it has a
property of a length and that's a number,

64
00:03:51.923 --> 00:03:56.044
cool, rapid, an array, otherwise
give me back the object to itself.

65
00:03:56.044 --> 00:03:59.908
We're not gonna use it directly, if you
needed to get really sophisticated types

66
00:03:59.908 --> 00:04:02.600
you could, but you we will see
it when we hover over some.

67
00:04:02.600 --> 00:04:04.821
So if you see like weird
question marks and colons,

68
00:04:04.821 --> 00:04:08.026
they are effectively the weird question
marks and colons that you know and

69
00:04:08.026 --> 00:04:10.570
love from Terry's,
they're just in your types as well.

70
00:04:11.770 --> 00:04:13.980
And here's an example of
what that might look like.

71
00:04:13.980 --> 00:04:17.770
This is purely one that the types
will actually be only true or false.

72
00:04:17.770 --> 00:04:21.482
But it's a way to look
at both the generics and

73
00:04:21.482 --> 00:04:26.463
the ternary which is if you look
at that result1, if 1 2 and

74
00:04:26.463 --> 00:04:32.550
3 extends B so 123 is of anything
as a number, is 1 2 and 3 a number?

75
00:04:32.550 --> 00:04:35.810
Yes, that would come out as true,
otherwise it would be false.

76
00:04:37.440 --> 00:04:39.840
All right, this one's kind of interesting.

77
00:04:41.400 --> 00:04:45.404
So exclude actually uses one
of these Turner's, right,

78
00:04:45.404 --> 00:04:47.781
but it's built in to TypeScript.

79
00:04:47.781 --> 00:04:50.005
So you don't have to write
an exclude utility helper yourself,

80
00:04:50.005 --> 00:04:51.210
cuz it's built into TypeScript.

81
00:04:51.210 --> 00:04:54.650
But if you wanted to,
this is how it would work.

82
00:04:54.650 --> 00:04:57.790
So we've got, hey, we got this type,
it's either 1, 2 or 3 and

83
00:04:57.790 --> 00:05:00.470
we wanna exclude 2 as that
second argument there.

84
00:05:00.470 --> 00:05:03.420
Cool, you get a new type that has 1 and 3.

85
00:05:03.420 --> 00:05:05.200
You can also again is that extend.

86
00:05:05.200 --> 00:05:10.520
So we've got 1 a 2 b, I wanna exclude
anything that's a number that'll work.

87
00:05:10.520 --> 00:05:14.550
Or if you wanna remove one union for
another one,

88
00:05:14.550 --> 00:05:20.040
it's one of those things where
you would use it every day, no.

89
00:05:20.040 --> 00:05:24.627
Is eventually gonna be something that you
need to just have in your mental framework

90
00:05:24.627 --> 00:05:26.394
for when you need to say, okay,

91
00:05:26.394 --> 00:05:30.230
I need everything from this
other type except for one value.

92
00:05:30.230 --> 00:05:33.543
Absolutely, if there's certain
values that we don't wanna

93
00:05:33.543 --> 00:05:37.251
pass to a smaller component, so
on and so forth and I do generically.

94
00:05:37.251 --> 00:05:41.590
This is again, something that is
somewhat useful to have available to us.

95
00:05:41.590 --> 00:05:47.885
The opposite of exclude is not include,
cause that would be too easy.

96
00:05:47.885 --> 00:05:51.435
The opposite of exclude is extract which,
again,

97
00:05:51.435 --> 00:05:57.495
if this will pull out only the numbers or
only the ones that you're looking for.

98
00:05:57.495 --> 00:06:00.905
Again, I don't make the rules here,
I just explained them.

99
00:06:02.390 --> 00:06:05.118
A pick allows you very
much I pick in lodash.

100
00:06:05.118 --> 00:06:08.800
Takes one type, and allows you to
just pick the keys that you want.

101
00:06:08.800 --> 00:06:12.088
So if you wanted,
only certain keys that have another type,

102
00:06:12.088 --> 00:06:14.090
you can dynamically do that as well.

103
00:06:15.900 --> 00:06:19.875
And it's got a friend called omit,
right, which is okay,

104
00:06:19.875 --> 00:06:25.060
take all the properties of this type and
just don't pick these 1 or 2.

105
00:06:25.060 --> 00:06:29.171
This will actually be super useful for us
in a lot of ways which is like okay, hey,

106
00:06:29.171 --> 00:06:31.610
I'm gonna define a custom button.

107
00:06:31.610 --> 00:06:34.931
Take all the properties
out of a button except for

108
00:06:34.931 --> 00:06:38.460
the ones that I'm gonna define myself,
right?

109
00:06:38.460 --> 00:06:43.577
And I will allow you to do that with your
reaction components as you wrap them.

110
00:06:43.577 --> 00:06:45.662
And we also string manipulation.

111
00:06:45.662 --> 00:06:51.612
If you need to change some of the casing
on a given string type, there are actually

112
00:06:51.612 --> 00:06:57.040
utility types built into TypeScript
that allow you to take a given value,

113
00:06:57.040 --> 00:07:02.664
a given string make it all uppercase or
lowercase, whatever you need to do.

114
00:07:02.664 --> 00:07:06.390
Some of the React specific ones.

115
00:07:06.390 --> 00:07:12.134
So React to HTML props and it takes this
generic of some HTML element, will give

116
00:07:12.134 --> 00:07:18.690
you a type representing everything that
is built into that native HTML DOM node.

117
00:07:18.690 --> 00:07:22.585
So if you want to create your own
input field and you don't want to

118
00:07:22.585 --> 00:07:27.420
necessarily copy all the props of that
an input field tax according to the spec,

119
00:07:27.420 --> 00:07:30.812
this will be like our props,
you have that ampersand and

120
00:07:30.812 --> 00:07:34.770
then everything that a HTML
input element can do as well.

121
00:07:34.770 --> 00:07:38.084
And so
now it will be our special input props,

122
00:07:38.084 --> 00:07:41.150
plus the everything that's an element.

123
00:07:41.150 --> 00:07:44.539
So before we have those range sliders and
those range inputs,

124
00:07:44.539 --> 00:07:48.410
right now they will not take
everything that an input took.

125
00:07:48.410 --> 00:07:53.025
However, we could theoretically and
arguably should go in and say, okay,

126
00:07:53.025 --> 00:07:56.848
adjustment input props are the special
things that we wanted,

127
00:07:56.848 --> 00:07:59.680
cuz label is not one of them for instance.

128
00:07:59.680 --> 00:08:03.600
Plus, everything that an input field
does and we'll pass them all on through.

129
00:08:03.600 --> 00:08:06.721
This is incredibly powerful if you're
building a component library, or

130
00:08:06.721 --> 00:08:10.248
a large enough application that you're
building a large enough React application

131
00:08:10.248 --> 00:08:11.658
is effectively its own library,

132
00:08:11.658 --> 00:08:14.550
cuz you're using pieces of it
throughout the application as well.

133
00:08:16.120 --> 00:08:19.590
And finally, React.ComponentProps.

134
00:08:19.590 --> 00:08:21.860
I believe we saw this one
a little bit earlier.

135
00:08:21.860 --> 00:08:26.239
We'll use it again allows you to
take any given React component,

136
00:08:26.239 --> 00:08:28.400
and figure out its type.

137
00:08:28.400 --> 00:08:30.260
This is also useful.

138
00:08:30.260 --> 00:08:33.110
Let's say, before we would do
an export type or whatever.

139
00:08:33.110 --> 00:08:38.098
Let's say a component didn't export the
type, you can actually kinda figure out

140
00:08:38.098 --> 00:08:41.349
what it was or
you pass in a component you get its type,

141
00:08:41.349 --> 00:08:44.962
and then it will pull out the prop
type itself and allow you to

142
00:08:44.962 --> 00:08:49.890
kind of read the type of another actual
component that you're using in React.

143
00:08:49.890 --> 00:08:56.140
So this is some of the utility types that
we can use in our React applications.

