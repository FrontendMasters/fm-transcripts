WEBVTT

1
00:00:00.210 --> 00:00:01.790
Hello everyone?
My name is Steve Kenny.

2
00:00:01.790 --> 00:00:06.670
I am the front end architect at a company
called Twilio, kind of our bread and

3
00:00:06.670 --> 00:00:09.582
butter is sending text messages and
emails.

4
00:00:09.582 --> 00:00:14.086
Also building a UI around making emails
and building programmable call centers and

5
00:00:14.086 --> 00:00:15.880
stuff along those lines.

6
00:00:15.880 --> 00:00:18.083
And we pretty much use react and

7
00:00:18.083 --> 00:00:24.440
TypeScript pretty much exclusively across
all of our front end applications.

8
00:00:24.440 --> 00:00:29.230
And I think a really interesting part
about that is, these days that is,

9
00:00:29.230 --> 00:00:34.036
kind of a conscious decision of how
we choose to build new applications.

10
00:00:34.036 --> 00:00:39.589
But it was one of those decisions
that actually came out pretty easily.

11
00:00:39.589 --> 00:00:43.732
The company itself has acquired other
companies over the course of the last few

12
00:00:43.732 --> 00:00:48.141
years, I used to work at a company called
Sendgrid, which was acquired by Twilio.

13
00:00:48.141 --> 00:00:50.850
And we kind of came across using React and
TypeScript.

14
00:00:50.850 --> 00:00:54.550
And I wanna say 2018 and
had been using it ever since.

15
00:00:54.550 --> 00:00:56.631
At Twilio around the same time,

16
00:00:56.631 --> 00:01:00.022
that same idea of a lot of
the teams are using react and

17
00:01:00.022 --> 00:01:05.442
started to move to TypeScript for reasons
that we will kind of cover in this course.

18
00:01:05.442 --> 00:01:09.443
And other companies have acquired and
teams that we brought on,

19
00:01:09.443 --> 00:01:13.160
all just happen to use this
very similar technology stack.

20
00:01:13.160 --> 00:01:17.704
And so nowadays it is the kind of
the deliberate decision to use types for

21
00:01:17.704 --> 00:01:18.950
new projects.

22
00:01:18.950 --> 00:01:23.537
But I think that the interesting part is
both it was a conscious choice as well as

23
00:01:23.537 --> 00:01:26.681
a natural progression,
we'll kind of get into why.

24
00:01:26.681 --> 00:01:30.842
And then we'll also kind of talk about
trying to get a like full understanding

25
00:01:30.842 --> 00:01:33.480
around how TypeScript and
React work together.

26
00:01:34.630 --> 00:01:37.450
So on front end masters,
we have courses on react.

27
00:01:37.450 --> 00:01:40.780
We have courses on TypeScript, right?

28
00:01:40.780 --> 00:01:45.975
And I would be remiss in saying that
a full course on TypeScript and

29
00:01:45.975 --> 00:01:51.890
React, if you wanna get really into
the details of TypeScript, right?

30
00:01:51.890 --> 00:01:55.645
There's two full courses on it,
you should definitely also watch.

31
00:01:55.645 --> 00:01:59.030
But this is talking about the kind of
intersection in between the two, right?

32
00:01:59.030 --> 00:02:02.125
So the prerequisites here is I don't
actually expect that you have any

33
00:02:02.125 --> 00:02:04.070
familiarity with TypeScript whatsoever.

34
00:02:04.070 --> 00:02:08.595
We're gonna start from the ground up,
we're gonna learn it in the context of

35
00:02:08.595 --> 00:02:11.880
building a series of simple
React components, right?

36
00:02:11.880 --> 00:02:13.800
So we'll kind of learn by doing,

37
00:02:13.800 --> 00:02:17.310
right, if you wanna get to every
possible kind of edge case.

38
00:02:17.310 --> 00:02:18.614
And definitely, I said,

39
00:02:18.614 --> 00:02:22.780
there's two full course on TypeScript
should definitely watch after this one.

40
00:02:22.780 --> 00:02:27.829
But we're gonna kind of do it in
the context of these React components.

41
00:02:27.829 --> 00:02:31.352
And the other cool thing is
we'll build some components, and

42
00:02:31.352 --> 00:02:33.570
then I'm gonna turn into a liar.

43
00:02:33.570 --> 00:02:38.175
And we will actually talk about some
actual TypeScript concepts in order to get

44
00:02:38.175 --> 00:02:40.420
to more advanced component pattern.

45
00:02:40.420 --> 00:02:43.070
So we're gonna start out with
the simplest component we can imagine.

46
00:02:43.070 --> 00:02:46.437
And we're gonna work all the way to some
of the patterns you might see if you were

47
00:02:46.437 --> 00:02:47.816
building a component library or

48
00:02:47.816 --> 00:02:51.200
building like reusable abstractions that
you want to use in a large code base.

49
00:02:52.290 --> 00:02:54.041
And kind of along the way,

50
00:02:54.041 --> 00:02:58.600
things will like they will escalate
as we go through, all right.

51
00:02:58.600 --> 00:03:03.962
So if we're gonna spend
the next few hours together,

52
00:03:03.962 --> 00:03:08.372
building React components in TypeScript,

53
00:03:08.372 --> 00:03:14.824
we should probably talk a little
bit about why one would do that.

54
00:03:14.824 --> 00:03:18.604
It's one of those things like having
objects that have the properties that you

55
00:03:18.604 --> 00:03:22.039
expect, or do the things that you want
them to do is pretty important for

56
00:03:22.039 --> 00:03:23.470
writing code that works.

57
00:03:23.470 --> 00:03:26.840
The big question is like,
are you gonna find out at runtime?

58
00:03:26.840 --> 00:03:29.450
Or would you like to find out
before your customers find out?

59
00:03:29.450 --> 00:03:32.296
Right, would you like to go with hey,
I'm ready to build.

60
00:03:32.296 --> 00:03:34.420
Here's all the places
where this could break.

61
00:03:34.420 --> 00:03:35.510
And it'll address it for you.

62
00:03:35.510 --> 00:03:40.145
And then you can go like kind of figure
out how to navigate those individual

63
00:03:40.145 --> 00:03:41.830
situations, right?

64
00:03:41.830 --> 00:03:44.060
The other part is,
you get a better development experience.

65
00:03:44.060 --> 00:03:47.285
So your code less buggy,
you get a better development experience,

66
00:03:47.285 --> 00:03:49.670
because all of a sudden,
auto-complete works.

67
00:03:49.670 --> 00:03:51.050
It's like okay, I'm gonna use this object.

68
00:03:51.050 --> 00:03:53.696
It's like, I know all the properties
on that and I know their properties, so

69
00:03:53.696 --> 00:03:54.550
on and so forth.

70
00:03:54.550 --> 00:03:57.240
So auto-complete is a lot more helpful.

71
00:03:57.240 --> 00:04:00.914
And then I think in code basis, towards
the end of this workshop, we're gonna see

72
00:04:00.914 --> 00:04:04.075
is, there are things that you can do
in the components that you build.

73
00:04:04.075 --> 00:04:07.541
And the abstractions that you make
that make other people who use your

74
00:04:07.541 --> 00:04:10.940
code know roughly well,
how you intended for it to be used.

75
00:04:10.940 --> 00:04:14.523
Which enlarge code bases or if you
building reusable code like a component

76
00:04:14.523 --> 00:04:17.316
system, or shared library or
your company, whatever.

77
00:04:17.316 --> 00:04:21.443
Some of these patterns are super helpful
to make sure that like everything is used

78
00:04:21.443 --> 00:04:23.500
the way you kind of intended it.

79
00:04:23.500 --> 00:04:28.116
So there's a lot of advantages and
if we're gonna be just honest about

80
00:04:28.116 --> 00:04:32.497
disadvantages like okay,
there it is more than just JavaScript,

81
00:04:32.497 --> 00:04:35.569
right, as a super set of
features on top of it.

82
00:04:35.569 --> 00:04:39.689
But I'm gonna argue that as we get
into learn some of the concepts,

83
00:04:39.689 --> 00:04:42.500
TypeScript can be incredibly lightweight.

84
00:04:42.500 --> 00:04:46.596
One of the things that we're gonna kind of
see as we go through this is TypeScript

85
00:04:46.596 --> 00:04:50.160
tries its hardest to stay out of your
way and not really get involved.

86
00:04:50.160 --> 00:04:53.344
A lot of times your TypeScript
might just look like JavaScript.

87
00:04:53.344 --> 00:04:57.556
It'll get out of your way and
then only in the cases where it needs

88
00:04:57.556 --> 00:05:02.470
a little bit of help from you, to help
you is where we kind of have to step in.

89
00:05:02.470 --> 00:05:05.367
And give it a little bit more
information about what we wanna do,

90
00:05:05.367 --> 00:05:07.630
what the intent of our code is,
so on and so forth?

91
00:05:07.630 --> 00:05:11.240
It's basically one of those like
helped me help you kind of situations.

92
00:05:11.240 --> 00:05:14.940
Those are times we need to
deal with TypeScript directly.

93
00:05:14.940 --> 00:05:17.734
But as we go see this very
first component we look at,

94
00:05:17.734 --> 00:05:20.730
you won't even notice that
it was TypeScript at first.

