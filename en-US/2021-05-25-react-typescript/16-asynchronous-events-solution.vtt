WEBVTT

1
00:00:00.370 --> 00:00:03.816
All right, let's get this working because
I think it was gonna tie a few of

2
00:00:03.816 --> 00:00:07.210
the different things that we've
talked about so far together.

3
00:00:07.210 --> 00:00:11.474
And then we will be able to kind of
like pull out some of the pieces and

4
00:00:11.474 --> 00:00:17.030
like get a little bit more sophisticated
with some of the future examples.

5
00:00:17.030 --> 00:00:22.104
All right, so if we think about,
kind of in our react hierarchy sure

6
00:00:22.104 --> 00:00:27.740
the input field that has the number
is in the form component over here.

7
00:00:27.740 --> 00:00:32.429
But we know that like, roughly we
need to figure out how to like, yeah,

8
00:00:32.429 --> 00:00:36.190
we can make arguments the best
way to structure this.

9
00:00:36.190 --> 00:00:40.675
But we know that like roughly the state
of how many DogFacts where we fetch

10
00:00:40.675 --> 00:00:44.071
everything is going to have
to happen in application.

11
00:00:44.071 --> 00:00:45.956
So we'll define that over here.

12
00:00:45.956 --> 00:00:52.133
We'll just say value, you set value.

13
00:00:57.460 --> 00:01:01.110
Give it one, one cuz it's different
than three at this point.

14
00:01:01.110 --> 00:01:04.140
So we've got that as well.

15
00:01:04.140 --> 00:01:08.432
And now we know that we need to pass
at least that number into the form or

16
00:01:08.432 --> 00:01:11.580
something along those lines as well.

17
00:01:11.580 --> 00:01:14.766
So we can kind of think about that too.

18
00:01:14.766 --> 00:01:18.204
I'm actually thinking as I meditated for
a second, like,

19
00:01:18.204 --> 00:01:22.487
do I really wanna actually pass that
in and the ability to submit the form.

20
00:01:22.487 --> 00:01:24.720
I might just wanna pass
the ability to go fetch in there.

21
00:01:24.720 --> 00:01:30.430
So I'm actually gonna move
this into form as well.

22
00:01:30.430 --> 00:01:33.400
Cool, so we're gonna say value and
this point we'll put the value in here.

23
00:01:37.460 --> 00:01:40.790
All right, so that's now a one.

24
00:01:40.790 --> 00:01:43.007
And as the changes we will set the value.

25
00:01:43.007 --> 00:01:45.322
And we know that if i inline it,

26
00:01:45.322 --> 00:01:50.920
I don't necessarily have to put all
that type information in there.

27
00:01:50.920 --> 00:01:54.195
And like what you should do
usually depends on how busy,

28
00:01:54.195 --> 00:01:56.850
like if you wanna pull it out,
that's fine.

29
00:01:56.850 --> 00:01:59.736
I'm not saying you should
inline every change handler,

30
00:01:59.736 --> 00:02:02.088
cuz there's definitely
a point when I get it.

31
00:02:02.088 --> 00:02:04.900
You lose a lot of usability and
stuff like that.

32
00:02:04.900 --> 00:02:09.881
But it does allow you to not have to
define the types which seems good for

33
00:02:09.881 --> 00:02:10.900
us right now.

34
00:02:10.900 --> 00:02:15.770
But as exercise to reader like I
would move it around, figure out.

35
00:02:15.770 --> 00:02:19.720
I think the important distinction
is to know that there is

36
00:02:19.720 --> 00:02:24.020
a difference in how they act
as well as actually, cool.

37
00:02:24.020 --> 00:02:25.490
So we've got that.

38
00:02:25.490 --> 00:02:28.490
We can see that now this is changeable.

39
00:02:28.490 --> 00:02:29.320
All right, we're getting there.

40
00:02:29.320 --> 00:02:33.480
Now we want the ability
to fetch said DogFacts.

41
00:02:33.480 --> 00:02:34.770
One of the things we haven't
really talked about.

42
00:02:34.770 --> 00:02:38.570
We haven't done a lot of
passing functions as props.

43
00:02:38.570 --> 00:02:42.304
And so this will be kind of our
first chance to go ahead and

44
00:02:42.304 --> 00:02:43.980
see how that might work.

45
00:02:43.980 --> 00:02:48.290
As you can see, that there is
some onsubmit happening here.

46
00:02:48.290 --> 00:02:52.840
We might wanna call a function that
we pass in, to this child component.

47
00:02:52.840 --> 00:02:54.745
We haven't really talked
about do that yet, but

48
00:02:54.745 --> 00:02:57.490
I think we have all
the requisite information.

49
00:02:57.490 --> 00:03:02.776
In the application itself,
we could say something like all right,

50
00:03:02.776 --> 00:03:07.331
when we get our facts,
we'll second facts and set facts.

51
00:03:09.915 --> 00:03:15.146
Will react that you state and
I could say that it's an array,

52
00:03:15.146 --> 00:03:18.132
that seems like a fair thing to do.

53
00:03:18.132 --> 00:03:21.988
And we're also going to create
a handleSubmit function,

54
00:03:21.988 --> 00:03:25.134
which is simply gonna say
you give me a number I,

55
00:03:25.134 --> 00:03:29.390
which is gonnabe whatever's
in that form over there.

56
00:03:29.390 --> 00:03:36.294
And I'm going to go and fetch some
DogFacts, effects that many DogFacts.

57
00:03:36.294 --> 00:03:42.980
And then with those facts,
we will setFacts to facts.

58
00:03:42.980 --> 00:03:49.070
That was a lot of the same word over and
over, and I've got a red squiggly.

59
00:03:49.070 --> 00:03:52.704
A part of that is that there's a space
in between my equal sign, my arrow but

60
00:03:52.704 --> 00:03:55.310
there's another red squiggly.

61
00:03:55.310 --> 00:03:56.818
It's like hey, so

62
00:03:56.818 --> 00:04:02.110
TypeScript is actually figured out
what the shape of the facts is.

63
00:04:02.110 --> 00:04:05.944
It's like is an array of
objects that have an ID,

64
00:04:05.944 --> 00:04:09.790
which is a number and
a fact that is a string.

65
00:04:09.790 --> 00:04:16.228
All right, and I simply want to replace
the empty array with my array of facts.

66
00:04:16.228 --> 00:04:19.242
But you look it's, hey,

67
00:04:19.242 --> 00:04:25.850
we only expect that there
should be facts plural.

68
00:04:25.850 --> 00:04:30.842
We only expect the facts is if you look
at it as an array of never, all right,

69
00:04:30.842 --> 00:04:34.690
we have over here as well,
an array of never, right?

70
00:04:34.690 --> 00:04:38.991
Because we saw before in that kind of
early run through the common types,

71
00:04:38.991 --> 00:04:43.300
you can have a array of strings,
you can have an array of numbers.

72
00:04:43.300 --> 00:04:44.941
Now we could do a bunch of stuff here.

73
00:04:44.941 --> 00:04:49.060
we could say like, any as long as it's an
array, it could be an array of anything,

74
00:04:49.060 --> 00:04:52.009
and that will theoretically
get TypeScript off her back.

75
00:04:53.580 --> 00:04:55.280
However, we've just lost
all the type safety.

76
00:04:55.280 --> 00:04:57.410
So why is it up to this point?

77
00:04:57.410 --> 00:05:00.751
And so in this case,
just giving you an empty array, cuz if you

78
00:05:00.751 --> 00:05:04.500
had given an array of like let's say
I put some numbers in this array.

79
00:05:04.500 --> 00:05:08.035
Like this is not gonna make TypeScript
any happier about what we're doing.

80
00:05:08.035 --> 00:05:11.540
1, 2, 3, you can see that it
has figured out that this

81
00:05:11.540 --> 00:05:14.338
is actually supposed to
an array of numbers.

82
00:05:14.338 --> 00:05:17.511
That's cool.

83
00:05:17.511 --> 00:05:22.380
But we don't want numbers, we want
DogFacts and like, we don't have them yet.

84
00:05:22.380 --> 00:05:28.912
So what we can do this is again that
question someone asked really well befor.

85
00:05:28.912 --> 00:05:30.907
What happens if we have to step in and

86
00:05:30.907 --> 00:05:34.720
tell TypeScript what the type
of that we're expecting is?

87
00:05:34.720 --> 00:05:38.320
So in this case, we're gonna say,
listen, I know I gave you an array,

88
00:05:38.320 --> 00:05:40.910
you tried to be helpful,
cuz it was an empty array.

89
00:05:40.910 --> 00:05:45.779
And you knew that was
an array of nothing ever.

90
00:05:45.779 --> 00:05:49.720
In this case we'll do,
we have this Dog Fact type.

91
00:05:51.320 --> 00:05:53.440
And we're gonna say
it's an array of those.

92
00:05:53.440 --> 00:05:57.410
So now you can see all the red
squigglies are gone at this point.

93
00:05:57.410 --> 00:05:58.926
We've got the ability to kind of,

94
00:05:58.926 --> 00:06:01.290
we know that it's gonna be
started as an empty array.

95
00:06:01.290 --> 00:06:03.790
You can still have nothing in
your arerray of Dog Facts.

96
00:06:03.790 --> 00:06:07.952
But we now know that it will accept
replacement arrays as long as they

97
00:06:07.952 --> 00:06:10.100
are filled with DogFacts.

98
00:06:10.100 --> 00:06:14.590
And so now we can use that here as well.

99
00:06:14.590 --> 00:06:18.888
Now we wanna pass in,
we wanna say all right,

100
00:06:18.888 --> 00:06:23.755
the form when we'll give
it like an onSubmit prop,

101
00:06:23.755 --> 00:06:28.295
which is what we're
gonnapass in here as well.

102
00:06:28.295 --> 00:06:35.840
So we'll say on submit,
it's gonna be this handle submit, right?

103
00:06:35.840 --> 00:06:39.910
Okay that's interesting.

104
00:06:39.910 --> 00:06:42.540
Red squiggly of doom, right?

105
00:06:42.540 --> 00:06:44.850
Like I don't know what that property is.

106
00:06:44.850 --> 00:06:47.747
The cool part is if you're trying
to figure out how to type this and

107
00:06:47.747 --> 00:06:48.840
TypeScript.

108
00:06:48.840 --> 00:06:50.380
Yeah, you could like, go read the docs.

109
00:06:50.380 --> 00:06:53.145
So what ya redox is great,
Redox is wonderful.

110
00:06:53.145 --> 00:06:58.030
Or you just look at it like, hey, like
here's the function, you tried to pass in.

111
00:06:58.030 --> 00:07:00.748
We don't have that defined as a prop,
but it

112
00:07:00.748 --> 00:07:05.675
kind of gives the answer to the question
here about what the form props might be.

113
00:07:05.675 --> 00:07:08.581
Which is make,
maybe it has an onSubmit property,

114
00:07:08.581 --> 00:07:11.840
which is a function that takes
a number and returns void.

115
00:07:11.840 --> 00:07:15.460
I'm like, yeah, yeah,
that's exactly what I want, right?

116
00:07:15.460 --> 00:07:18.150
So here we could say, form props.

117
00:07:18.150 --> 00:07:19.280
So you can do it in line if you want.

118
00:07:20.280 --> 00:07:21.690
So type form props.

119
00:07:26.030 --> 00:07:32.490
And now we're gonna say that Submit,

120
00:07:32.490 --> 00:07:37.695
so the thing is getting passed in and
that's gonna be our form props.

121
00:07:37.695 --> 00:07:42.423
Right, so now that is,
we can actually say like call

122
00:07:42.423 --> 00:07:47.800
whatever was passed in with
whatever the value is, right?

123
00:07:47.800 --> 00:07:50.740
And again, that's a number so
everyone is happy.

124
00:07:50.740 --> 00:07:52.463
TypeScript has kind of looked like, okay,

125
00:07:52.463 --> 00:07:55.320
you're passing in a callback
function that we know works in here.

126
00:07:55.320 --> 00:07:57.583
Cuz you defined what
this component expects,

127
00:07:57.583 --> 00:08:01.120
we now know that the call callback
functions to get the right value.

128
00:08:01.120 --> 00:08:05.047
It's basically like kind of
checking on everything for us, and

129
00:08:05.047 --> 00:08:08.900
confirming that everything
will work in this case.

130
00:08:08.900 --> 00:08:13.389
And then really the last part here is to
once we have some DogFacts, and since it's

131
00:08:13.389 --> 00:08:18.600
an empty array, we don't have to do as
much of that checking as we did before.

132
00:08:18.600 --> 00:08:23.944
We'll simply say map over the facts.

133
00:08:29.927 --> 00:08:37.596
Let's say the key is fact id.

134
00:08:37.596 --> 00:08:44.301
The fact, That fact not my

135
00:08:44.301 --> 00:08:47.760
favorite API in the world, but I made it
so I have no one else to blame but myself.

136
00:08:49.670 --> 00:08:51.989
To be clear, I did spend time thinking
about what I wanted it to be and

137
00:08:51.989 --> 00:08:53.469
I couldn't come up with anything better.

138
00:08:56.148 --> 00:08:58.550
Go ahead,
we can fetch some Dog Facts, right?

139
00:08:58.550 --> 00:08:59.157
So again,

140
00:08:59.157 --> 00:09:03.280
one of things I wanna kind of take out
of this is it's react as you know it.

141
00:09:03.280 --> 00:09:08.143
And a lot of times if you're like,
find yourself somewhat confused

142
00:09:08.143 --> 00:09:12.700
about what you would need to
do to make TypeScript happy.

143
00:09:12.700 --> 00:09:17.352
The thing to do is kind of like use what,
I'm using Visual Studio code and

144
00:09:17.352 --> 00:09:22.260
code sandbox is just effectively videos
Visual Studio code in the browser.

145
00:09:22.260 --> 00:09:27.090
But if you use this tool to kind of
get the hint of what it's looking for.

146
00:09:27.090 --> 00:09:31.590
That actually solves a lot of it for
us, right?

147
00:09:31.590 --> 00:09:35.541
And you can kind of like get to figure
out like what this component expects and

148
00:09:35.541 --> 00:09:39.140
use those tools, but
we also learned how to pass.

149
00:09:39.140 --> 00:09:42.630
This is the syntax we saw before, but
now we've gotten to do it in practice.

