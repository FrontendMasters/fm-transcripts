WEBVTT

1
00:00:00.440 --> 00:00:03.216
All right, so like most of our exercise
that we're gonna kind of redo part of it

2
00:00:03.216 --> 00:00:05.256
and then we're throwing
a little extension cuz why not?

3
00:00:05.256 --> 00:00:10.733
All right, so let's think about all
the things that we did last time.

4
00:00:10.733 --> 00:00:13.350
We had this as property here.

5
00:00:13.350 --> 00:00:15.590
And again it's optional cuz we'll
default to a div, we're cool with it.

6
00:00:15.590 --> 00:00:16.185
You don't wanna give me an as?

7
00:00:16.185 --> 00:00:19.008
I don't insist on having an as,
but if you can give me an as,

8
00:00:19.008 --> 00:00:20.940
it's going to be this element generic.

9
00:00:20.940 --> 00:00:25.840
Again, we use E or
T cuz that's the convention.

10
00:00:25.840 --> 00:00:29.364
You wanna use sandwich as your generic,
use sandwich, that's between you and

11
00:00:29.364 --> 00:00:30.610
your teammates.

12
00:00:30.610 --> 00:00:32.746
And if it gets past code review,
that's fine.

13
00:00:32.746 --> 00:00:37.703
So we have E and that has to that,
we want to insist that like,

14
00:00:37.703 --> 00:00:43.520
if we're gonna try this,
it's gonna fall to an HTML element.

15
00:00:43.520 --> 00:00:45.049
And get all the benefits of that,

16
00:00:45.049 --> 00:00:47.880
allowing the different props
that HTML element takes.

17
00:00:47.880 --> 00:00:51.890
We need to again TypeScript just
wants to help, it helps you.

18
00:00:51.890 --> 00:00:58.180
So and will default down to a just the
base element type if we can't set that.

19
00:00:59.440 --> 00:01:04.000
All right, so we've got that in place.

20
00:01:04.000 --> 00:01:07.283
And all right, so now,
this is really text on props because it's

21
00:01:07.283 --> 00:01:11.060
again the special ones that we have and
again, that's just a convention.

22
00:01:13.640 --> 00:01:18.343
So then really the ones that
we're gonna use with our actual

23
00:01:18.343 --> 00:01:22.481
text component is the combination
of these props and

24
00:01:22.481 --> 00:01:26.070
whatever is on
the underlying HTML element.

25
00:01:27.630 --> 00:01:34.663
So here, we've got text props
extends react.element type.

26
00:01:34.663 --> 00:01:39.173
And that is going to be everything and
text own props.

27
00:01:42.069 --> 00:01:43.888
Around that element type, and then omit.

28
00:01:47.576 --> 00:01:48.463
Everything that's in the HTML element.

29
00:01:51.979 --> 00:01:56.081
Omit everything, take everything as HTML
element, omit the things that are in text

30
00:01:56.081 --> 00:01:58.410
own props, and
then fill in our text own props.

31
00:01:58.410 --> 00:02:01.440
So it's basically a way to override
anything that we might be stepping over.

32
00:02:01.440 --> 00:02:02.648
In this case,
we're stepping over children.

33
00:02:02.648 --> 00:02:11.340
That, yeah, so
well you have omit react.component props.

34
00:02:14.030 --> 00:02:17.656
And it's gonna be again,
whatever E is in this case, so

35
00:02:17.656 --> 00:02:22.763
get all the props of that element and
then take out everything in text on props.

36
00:02:29.712 --> 00:02:31.730
All right, so
we've got our two types in place.

37
00:02:31.730 --> 00:02:34.055
Now you can see this is
angry with us again,

38
00:02:34.055 --> 00:02:38.250
cuz it's now expecting a generic and
we didn't give it a generic.

39
00:02:38.250 --> 00:02:38.937
We can handle that.

40
00:02:38.937 --> 00:02:43.246
We've decided for whatever decision
making process that we have,

41
00:02:43.246 --> 00:02:46.958
that we've got default element,
that's gonna be a div.

42
00:02:50.225 --> 00:02:53.940
Cool, and now we're gonna say cool.

43
00:02:53.940 --> 00:02:58.910
So these text props is expecting
some kind of definition here.

44
00:02:58.910 --> 00:03:03.516
And again, we're just saying that
with this component, cool, yeah,

45
00:03:03.516 --> 00:03:07.153
we want something that is gonna
be react that on the type.

46
00:03:07.153 --> 00:03:11.394
And we'll let it default in this case
that is going to be whatever our default

47
00:03:11.394 --> 00:03:12.134
element is.

48
00:03:12.134 --> 00:03:15.232
In this case, that's a div and
we'll close that angle bracket.

49
00:03:18.353 --> 00:03:21.591
It's angry cuz bullying is not
assignable text prompts any.

50
00:03:21.591 --> 00:03:26.885
Do with that a moment, let's finished
something and we'll debug in a second.

51
00:03:28.795 --> 00:03:32.304
So we've got all of that there.

52
00:03:32.304 --> 00:03:38.746
All right, now we need to do
a little bit of refactoring here

53
00:03:42.572 --> 00:03:46.274
And we know that we're gonna have
this idea or we have as now as well.

54
00:03:51.027 --> 00:03:53.930
And we're gonna say that we've got as, and

55
00:03:53.930 --> 00:03:59.046
we're gonna say const tagname is going
to be either whatever we passed in as.

56
00:03:59.046 --> 00:04:02.945
In this case,
it's a div by default, otherwise,

57
00:04:02.945 --> 00:04:05.860
it's going to be whatever we pass in.

58
00:04:11.852 --> 00:04:13.633
And we're here, we'll say tag name.

59
00:04:20.701 --> 00:04:22.705
All right, so
we've got all of that in place.

60
00:04:22.705 --> 00:04:24.595
So we'll do one more
other thing in a second.

61
00:04:27.032 --> 00:04:31.279
Boys outside will text prompts any,

62
00:04:31.279 --> 00:04:34.984
let's see react at all in type.

63
00:04:40.187 --> 00:04:40.796
And clear.

64
00:04:50.912 --> 00:04:54.479
I feel like I made a little syntax error
here since my highlighting goes away after

65
00:04:54.479 --> 00:04:55.350
a certain point.

66
00:04:55.350 --> 00:04:55.850
So let's see.

67
00:05:14.967 --> 00:05:16.177
Syntax I think came back.

68
00:05:16.177 --> 00:05:19.778
So there's definitely some error there,
let's say children.

69
00:05:33.579 --> 00:05:34.321
All right, element type.

70
00:05:52.537 --> 00:05:55.003
This is a regular function so
it goes on this side here.

71
00:06:02.655 --> 00:06:06.524
I was using the arrow function syntax,
but this one is a regular function.

72
00:06:14.439 --> 00:06:15.920
All right,
everything's good at this point.

73
00:06:15.920 --> 00:06:19.380
There's still some upset meant here.

74
00:06:19.380 --> 00:06:21.180
Let's see, its value's never read.

75
00:06:21.180 --> 00:06:24.650
That is true,

76
00:06:33.030 --> 00:06:33.697
As well.

77
00:06:33.697 --> 00:06:38.930
All right, so we've got that in place.

78
00:06:38.930 --> 00:06:40.920
Now everything works.

79
00:06:40.920 --> 00:06:46.450
And you can see I can say this is as,
say there's a label.

80
00:06:47.480 --> 00:06:52.016
Make sure that actually, all right,
so as works correctly and

81
00:06:52.016 --> 00:06:53.736
then we say HTML for id.

82
00:06:53.736 --> 00:06:59.780
And that works with that but if I make
it a div again, it doesn't work again.

83
00:06:59.780 --> 00:07:02.445
One other thing that we
can do is that htmlFor.

84
00:07:02.445 --> 00:07:04.544
So the question is anyway,

85
00:07:04.544 --> 00:07:10.034
catch the error on TypeScript when
passing in an avoid element like HR.

86
00:07:10.034 --> 00:07:10.718
I don't know,

87
00:07:10.718 --> 00:07:13.941
off the top of my head, let's actually
play around with it for a second.

88
00:07:13.941 --> 00:07:20.460
Because this won't accept children in this
case, but seems like I can't catch it.

89
00:07:20.460 --> 00:07:25.637
There's some thickness around, like
there are limitations to some of this.

90
00:07:25.637 --> 00:07:29.420
Like you can specify like components
that match a certain property.

91
00:07:29.420 --> 00:07:33.155
You can't say that like, okay, we're gonna
render only a certain type of component,

92
00:07:33.155 --> 00:07:33.970
so on and so forth.

93
00:07:33.970 --> 00:07:38.980
So I don't know the answer to
that one off the top of my head.

94
00:07:38.980 --> 00:07:40.490
But we can see we've got
some of that in place.

95
00:07:40.490 --> 00:07:45.313
The interesting part is right now,
we'll accept all of these,

96
00:07:45.313 --> 00:07:47.160
but we kind of eat them.

97
00:07:47.160 --> 00:07:53.270
Like we can pass an htmlFor because it
never makes it to the tag name at all.

98
00:07:53.270 --> 00:07:58.308
So one of things we can do since
there are additional properties,

99
00:07:58.308 --> 00:08:00.879
is we can kind of grab a rest prop.

100
00:08:05.079 --> 00:08:10.320
We could say, rest and
pass in everything else along these lines.

101
00:08:10.320 --> 00:08:13.937
So here we say label, and
everything else that's passed through,

102
00:08:13.937 --> 00:08:17.115
we'll get pass through to that
tag name that we're using.

103
00:08:17.115 --> 00:08:20.490
Yeah, in this case,
it's the label before it was a div.

104
00:08:20.490 --> 00:08:24.189
And, yeah, well, that's like how do
we know because TypeScript knows.

105
00:08:24.189 --> 00:08:28.957
TypeScript's not gonna let anything in
that the underlying element that we're

106
00:08:28.957 --> 00:08:31.140
wrapping doesn't accept, right?

107
00:08:31.140 --> 00:08:36.091
So we get all of that safety, but
we still get to have these very

108
00:08:36.091 --> 00:08:40.010
like nuanced and
adaptable components as well.

