WEBVTT

1
00:00:00.000 --> 00:00:04.314
We have one more kind of TypeScript
thing that we need to jump into a little

2
00:00:04.314 --> 00:00:04.960
bit here.

3
00:00:06.320 --> 00:00:10.753
That will kind of one final pattern before
we jump into some of the context stuff

4
00:00:10.753 --> 00:00:11.970
that we saw earlier.

5
00:00:11.970 --> 00:00:15.230
Now that we know a little bit more about
generics and stuff along those lines.

6
00:00:15.230 --> 00:00:20.150
TypeScript has this feature
called a function overload.

7
00:00:20.150 --> 00:00:21.640
And that's a really cool word.

8
00:00:21.640 --> 00:00:23.490
And what does it mean?

9
00:00:23.490 --> 00:00:28.799
It basically means that JavaScript,
we think a lot about the idea

10
00:00:28.799 --> 00:00:34.301
that functions can take all sorts
of different types of arguments,

11
00:00:34.301 --> 00:00:39.923
they return different things,
a lot of that kind of dynamic typing.

12
00:00:39.923 --> 00:00:43.210
That is kinda built in the language gives
us a bunch of interesting patterns, right.

13
00:00:43.210 --> 00:00:47.223
You can do stuff like partial application,
currying.

14
00:00:47.223 --> 00:00:51.110
You can do things where it's, okay, if I
give you a callback, use the callback.

15
00:00:51.110 --> 00:00:56.128
Otherwise return a promise like these
are things that we've been doing.

16
00:00:56.128 --> 00:00:58.928
Famously, the best example
I can come up with is

17
00:00:58.928 --> 00:01:03.690
a certain function that a lot of times
we abbreviate it to just $1 sign, right.

18
00:01:03.690 --> 00:01:10.940
jQuery was, in a lot of cases, a single
function that did all sorts of stuff.

19
00:01:10.940 --> 00:01:15.143
And TypeScript does still give you
a little bit of an ability to make

20
00:01:15.143 --> 00:01:18.760
that happen using this thing
called function overload.

21
00:01:18.760 --> 00:01:26.590
Which is basically a way to have multiple
type declarations for the same function.

22
00:01:26.590 --> 00:01:29.837
And let's kind of we'll kind
of look at it together.

23
00:01:29.837 --> 00:01:32.710
We can check out one example right here,

24
00:01:32.710 --> 00:01:36.779
where we've got an asynchronous
add function, right.

25
00:01:36.779 --> 00:01:39.060
This could be an API call or
something along those lines.

26
00:01:39.060 --> 00:01:44.510
I kept it small and simple so
that we could talk about it fairly easily.

27
00:01:44.510 --> 00:01:50.961
And if you look kind of right here, we can
kinda see this is the all cases, right.

28
00:01:50.961 --> 00:01:55.784
We have a number a number b, and
maybe we have a callback right,

29
00:01:55.784 --> 00:02:00.698
add a and b, if there was a callback
function call the callback,

30
00:02:00.698 --> 00:02:04.810
if not immediately return results promise,
right.

31
00:02:04.810 --> 00:02:09.165
And so the type of this we can
actually let's take this and

32
00:02:09.165 --> 00:02:13.770
let's pull it into the TypeScript
playground actually.

33
00:02:13.770 --> 00:02:20.260
The type here I'll leave that for
a second cuz you'll need it.

34
00:02:20.260 --> 00:02:22.082
If we just remove these two lines for

35
00:02:22.082 --> 00:02:27.471
a second, Is what we might expect,
which is we've got a,

36
00:02:27.471 --> 00:02:33.160
what's the number, we've got b and
maybe a functional callback, or undefined.

37
00:02:33.160 --> 00:02:37.384
The callback is optional or it could be
undefined and either it'll be void or

38
00:02:37.384 --> 00:02:38.850
a promise.

39
00:02:38.850 --> 00:02:42.924
All right, and that'll technically work
but when you're the function overloads and

40
00:02:42.924 --> 00:02:46.630
say, hey listen this thing has multiple
different kinds of type signatures.

41
00:02:47.740 --> 00:02:53.220
And given the different combinations, this
is what you can expect from this function.

42
00:02:53.220 --> 00:02:59.710
Again adding more clarity about
the intention of your code in this case.

43
00:02:59.710 --> 00:03:04.492
So all we can do is have actually
additional declarations for

44
00:03:04.492 --> 00:03:06.550
how this might work.

45
00:03:06.550 --> 00:03:11.143
And if you hover over we
say a sync add over here.

46
00:03:15.368 --> 00:03:17.870
Okay, the past and one and two,

47
00:03:17.870 --> 00:03:23.632
we can tell that this is the version of
it that takes a number and a b number.

48
00:03:23.632 --> 00:03:27.655
And returns a promise cuz that is one
of the different signatures it has.

49
00:03:27.655 --> 00:03:31.473
The other one cuz it's
add plus one overload is,

50
00:03:31.473 --> 00:03:37.795
the idea that it might take a callback
at which point it returns void, right.

51
00:03:37.795 --> 00:03:40.925
Cuz the base one can return either one,
but we just say, yeah.

52
00:03:40.925 --> 00:03:43.460
I understand it has all these
different ways it can be used but

53
00:03:43.460 --> 00:03:46.711
the two that we support are if you give
me a b, you're getting back a promise.

54
00:03:46.711 --> 00:03:51.410
Or if you give me a being a callback,
you're getting back undefined, right.

55
00:03:51.410 --> 00:03:58.457
So we pass in something just a function
in this case, we'll say takes the result.

56
00:04:01.192 --> 00:04:04.584
Now you can see that it's actually the
version that takes ab in a callback and

57
00:04:04.584 --> 00:04:05.280
returns void.

58
00:04:05.280 --> 00:04:09.750
So it's basically having two different
interfaces for the same function.

59
00:04:09.750 --> 00:04:14.825
Now, I will tell you a secret about
me when I originally saw this,

60
00:04:14.825 --> 00:04:17.030
that's super cool.

61
00:04:17.030 --> 00:04:18.230
And that makes sense.

62
00:04:18.230 --> 00:04:22.314
And then the first time I went to
go implement it a few years ago,

63
00:04:22.314 --> 00:04:24.490
it just didn't work, right.

64
00:04:24.490 --> 00:04:26.790
I couldn't ,as I, what's wrong?

65
00:04:26.790 --> 00:04:31.499
And I what I'll explain to you
real quick Is effectively,

66
00:04:31.499 --> 00:04:36.591
the one thing to keep in mind,
which is a fact these are the these

67
00:04:36.591 --> 00:04:41.034
are the two type interfaces
that you're supporting.

68
00:04:41.034 --> 00:04:46.460
But effectively the actual implementation
has to be ready for any of those.

69
00:04:46.460 --> 00:04:50.249
So a lot of times you might say,
okay, I wanna have,

70
00:04:50.249 --> 00:04:55.073
I want it to work like this and
you can see it already is blowing up and

71
00:04:55.073 --> 00:04:58.310
then have an additional type signature.

72
00:04:58.310 --> 00:05:02.820
The kinda bottom one has to
effectively work in every case.

73
00:05:02.820 --> 00:05:08.080
So you know we have definitely
an a definitely b definitely a callback.

74
00:05:08.080 --> 00:05:11.238
And then we've got definitely a definitely
b definitely return a promise in

75
00:05:11.238 --> 00:05:12.010
this case.

76
00:05:12.010 --> 00:05:15.990
We have definitely a definitely b,
and the optional function,

77
00:05:15.990 --> 00:05:18.850
right, which covers both cases.

78
00:05:18.850 --> 00:05:23.090
And then TypeScript didn't make
you define a return type per say.

79
00:05:24.240 --> 00:05:30.129
But we know that we does that completeness
checking that we're seeing before right,

80
00:05:30.129 --> 00:05:35.957
okay, in the case of function, there's
both branches of whether or not fn exists.

81
00:05:35.957 --> 00:05:41.071
If it does exist, call it if it doesn't
return the promise that basically

82
00:05:41.071 --> 00:05:45.782
covers all of the bases of the two
overloads that we gave it, right.

83
00:05:45.782 --> 00:05:49.971
So you do need to make sure that the
actual implementation appeases all of the,

84
00:05:49.971 --> 00:05:53.660
I was gonna say all the promises
that you made, but it's overusing.

85
00:05:53.660 --> 00:05:56.148
It's overloading the term promise.

86
00:05:56.148 --> 00:05:58.929
But you have to make sure that this
version cuz this is not actually

87
00:05:58.929 --> 00:05:59.850
the type signature.

88
00:05:59.850 --> 00:06:01.862
This is the implementation,

89
00:06:01.862 --> 00:06:05.808
it has to appease every overload
that you give it, right.

90
00:06:05.808 --> 00:06:07.760
And so
it's a way to have multiple interfaces.

91
00:06:07.760 --> 00:06:10.470
And you can think about the fact
that we might have components.

92
00:06:10.470 --> 00:06:14.510
That might have multiple kind
of prop interfaces for them.

93
00:06:14.510 --> 00:06:17.560
And that might be a thing that we
interplant implement right after this.

94
00:06:17.560 --> 00:06:21.744
So we want to kind of just play around
with it just on the TypeScript level

95
00:06:21.744 --> 00:06:24.393
first, cuz also like I
kind of joked before,

96
00:06:24.393 --> 00:06:28.840
never promised too much to chat
rooms yeah, I think that's fair.

97
00:06:28.840 --> 00:06:34.141
As we saw before, effectively react
is a full fledged framework but

98
00:06:34.141 --> 00:06:39.163
it's also it's boiled down to,
it's a bunch of functions that

99
00:06:39.163 --> 00:06:44.850
return react components now so a lot
of this will kind of apply a little bit

