WEBVTT

1
00:00:00.290 --> 00:00:04.862
We'll look at this idea of
polymorphic components.

2
00:00:04.862 --> 00:00:07.632
Cuz buttons are an interesting one.

3
00:00:07.632 --> 00:00:11.400
A lot of times we use buttons
as they're intended to be used.

4
00:00:11.400 --> 00:00:13.591
And then a lot of times,

5
00:00:13.591 --> 00:00:19.079
we'll have buttons that we want
them to look like buttons.

6
00:00:19.079 --> 00:00:24.720
But semantically speaking,
they should be hyperlinks, right?

7
00:00:24.720 --> 00:00:27.351
The designer hands is something
where it looks like a button.

8
00:00:27.351 --> 00:00:28.243
But it's yeah,

9
00:00:28.243 --> 00:00:32.530
it's not to like do an action on the page
is to actually bring us to another page.

10
00:00:32.530 --> 00:00:36.547
And we might have something where we want
the component system you we want our

11
00:00:36.547 --> 00:00:39.956
button to either be a button or
be a link that looks like a button.

12
00:00:39.956 --> 00:00:42.753
And we don't want to
necessarily have a button and

13
00:00:42.753 --> 00:00:45.291
a button as link component
if we can avoid it.

14
00:00:45.291 --> 00:00:50.179
But you can imagine that,
okay if there is a little voice

15
00:00:50.179 --> 00:00:54.235
screaming in your head that says,
but Steve,

16
00:00:54.235 --> 00:01:00.371
won't TypeScript not let me do like
dynamic stuff like that anymore.

17
00:01:00.371 --> 00:01:05.138
And I will argue that is not true,
you can have a way in which you

18
00:01:05.138 --> 00:01:10.295
might seek to have the ability to
find it as a different component.

19
00:01:10.295 --> 00:01:13.282
So a lot of times what we'll
see is an as properties.

20
00:01:13.282 --> 00:01:16.326
So you can have a button and
you might have an as,

21
00:01:16.326 --> 00:01:19.920
a different HTML element and
sub it in, that'll work.

22
00:01:19.920 --> 00:01:21.445
Also, we've been a little bit,

23
00:01:21.445 --> 00:01:24.017
our last button didn't take
all the props a button did.

24
00:01:24.017 --> 00:01:26.712
So we can actually figure out how
to solve for some of these things.

25
00:01:26.712 --> 00:01:31.140
But what I would love to do is I'd
love to say put button primary,

26
00:01:31.140 --> 00:01:33.027
I'd love to say as an a tag.

27
00:01:33.027 --> 00:01:36.936
And then it should be able
to take an href, right?

28
00:01:36.936 --> 00:01:40.740
In this little version is not
doing all the intellisense.

29
00:01:40.740 --> 00:01:44.425
But like this wouldn't work right now cuz
you can clearly see that the does not on

30
00:01:44.425 --> 00:01:45.256
the button pops.

31
00:01:45.256 --> 00:01:46.880
And you can actually see it down there.

32
00:01:46.880 --> 00:01:48.561
Let's open it up fully.

33
00:01:48.561 --> 00:01:53.885
So we wanna say, okay, by default, if
you say a button, it should be a button.

34
00:01:53.885 --> 00:01:58.676
Otherwise, if they say as some other kind
of element, we want to use that instead.

35
00:01:58.676 --> 00:02:01.524
And like you can limit it,
just using like Wolcott,

36
00:02:01.524 --> 00:02:03.998
what are the strings we
expect is union type.

37
00:02:03.998 --> 00:02:07.656
You see something like another
place that you might use this and

38
00:02:07.656 --> 00:02:11.658
we will use this as an exercise in
a second is around the concept of like

39
00:02:11.658 --> 00:02:13.537
things that can take some text.

40
00:02:13.537 --> 00:02:17.502
You might want to have a text that
could be like a paragraph, or

41
00:02:17.502 --> 00:02:20.859
possibly a div or a section or
an article that you want

42
00:02:20.859 --> 00:02:24.926
to be able to do certain things
in your component library with.

43
00:02:24.926 --> 00:02:29.703
But you want to be able to give it
the different semantic meanings

44
00:02:29.703 --> 00:02:31.211
that it might need.

45
00:02:31.211 --> 00:02:36.997
And so this pattern will allow
you to do that, as well.

46
00:02:36.997 --> 00:02:41.902
So what we need to do is we need to figure
out, which parts that we are going to,

47
00:02:41.902 --> 00:02:45.523
which parts are going,
that we're going to override and

48
00:02:45.523 --> 00:02:49.990
have a regular button, and which parts
that we want to kind of pass in.

49
00:02:49.990 --> 00:02:52.663
So we're gonna need a generic here.

50
00:02:52.663 --> 00:02:57.212
So we'll say type of button props.

51
00:02:57.212 --> 00:03:04.142
We're gonna make a new property
here which is gonna be as.

52
00:03:04.142 --> 00:03:09.287
And again, we said this before,
this is going to be some kind of other

53
00:03:09.287 --> 00:03:14.450
HTML element, an anchor tag button,
something along those lines.

54
00:03:14.450 --> 00:03:18.207
And we could use t we I'm going to use e
in this case because we know it's going

55
00:03:18.207 --> 00:03:20.346
to be it's supposed to be an HTML element.

56
00:03:20.346 --> 00:03:24.041
If you really want use t, go use t,
and right now TypeScript angry.

57
00:03:24.041 --> 00:03:26.120
TypeScript is angry because it's like,
I don't know.

58
00:03:26.120 --> 00:03:28.200
I don't know what,
I don't know what he is.

59
00:03:28.200 --> 00:03:32.427
So we are in TypeScript is is
it's happy again, all right?

60
00:03:32.427 --> 00:03:35.491
When you use this type,
it's angry somewhere else, right?

61
00:03:35.491 --> 00:03:39.942
Because now we didn't pass in e,
but we will.

62
00:03:39.942 --> 00:03:41.585
We can say okay.

63
00:03:41.585 --> 00:03:45.095
We can pass in any type, but
we know we don't want any type.

64
00:03:45.095 --> 00:03:48.297
Remember when we did this with the higher
order component before, we're like,

65
00:03:48.297 --> 00:03:48.825
hey, yeah.

66
00:03:48.825 --> 00:03:52.145
What if you only gave me components
that take a user property?

67
00:03:52.145 --> 00:03:53.226
Wouldn't that be great?

68
00:03:53.226 --> 00:03:55.291
Yeah, yeah, that's cool.

69
00:03:55.291 --> 00:03:56.375
So we want E, but

70
00:03:56.375 --> 00:04:01.341
we want E to be an HTML element because
we're gonna use it as an HTML element.

71
00:04:01.341 --> 00:04:08.291
So say E extends react element type.

72
00:04:08.291 --> 00:04:12.016
And we saw things that
extend react element type or

73
00:04:12.016 --> 00:04:18.060
when we using our event listeners before
the HTML input element, so on so forth.

74
00:04:18.060 --> 00:04:23.632
And they all, we'll just have
a default to react element type.

75
00:04:23.632 --> 00:04:26.630
So this will be our buttons own property.

76
00:04:26.630 --> 00:04:30.102
So these are kind of the ones of our

77
00:04:30.102 --> 00:04:35.071
component systems button so
button own props.

78
00:04:35.071 --> 00:04:38.711
This is how before we set out like
the button props in the primary and

79
00:04:38.711 --> 00:04:40.147
secondary button props.

80
00:04:40.147 --> 00:04:42.276
And so
here we say type ButtonProps is again,

81
00:04:42.276 --> 00:04:45.256
it's going to be that we're going
to have that idea of E again.

82
00:04:45.256 --> 00:04:49.141
And we'll talk through this because this
is the reason we had that little chat

83
00:04:49.141 --> 00:04:53.385
about generics before we jumped into all
of this stuff is, if you didn't understand

84
00:04:53.385 --> 00:04:56.403
what the angle bracket syntax was,
we can talk through it.

85
00:04:56.403 --> 00:05:00.320
But having some of that context
is definitely helpful as well.

86
00:05:00.320 --> 00:05:04.870
So we'll have that idea of E
cuz extends react element type.

87
00:05:04.870 --> 00:05:09.797
And what this is going to be is give me
everything in button own props, right?

88
00:05:09.797 --> 00:05:14.701
So our buttons are unique special
buttons that we're gonna pass in.

89
00:05:14.701 --> 00:05:18.347
That's taking primary,
secondary destructive and stuff like that.

90
00:05:18.347 --> 00:05:21.650
Those are not part of
the HTML button spec.

91
00:05:21.650 --> 00:05:26.351
So take everything that's in
our buttons and combine that,

92
00:05:28.590 --> 00:05:33.523
With everything that is in the react
component around whatever E is,

93
00:05:33.523 --> 00:05:35.741
minus the ones that we define.

94
00:05:35.741 --> 00:05:38.044
So remember, we did this to
the higher order components.

95
00:05:38.044 --> 00:05:40.717
The line I'm about to write is exactly
what we did with the higher order

96
00:05:40.717 --> 00:05:41.498
component before.

97
00:05:41.498 --> 00:05:45.623
But we're also just
combining it with our own.

98
00:05:45.623 --> 00:05:53.710
So well met E, and then key button props

99
00:05:58.458 --> 00:06:01.530
ButtonOwnProps.

100
00:06:01.530 --> 00:06:03.920
All right, one more curly brace or
angle brace.

101
00:06:03.920 --> 00:06:04.420
Nope.

102
00:06:07.972 --> 00:06:09.020
Yeah, one more one way.

103
00:06:13.152 --> 00:06:13.960
I caught that one.

104
00:06:13.960 --> 00:06:14.490
Let's see.

105
00:06:14.490 --> 00:06:20.062
Let's hover over and see what the issues
are omit lacks return type any.

106
00:06:23.622 --> 00:06:27.245
I don't need that,
I put that in, there we go.

107
00:06:27.245 --> 00:06:29.855
All right, so
we've got this new button props.

108
00:06:29.855 --> 00:06:33.264
And so it's a little much to look at here.

109
00:06:33.264 --> 00:06:38.300
But it is looking at anything that you
pointed out as we get excluding children,

110
00:06:38.300 --> 00:06:42.600
primary, secondary, destructive,
and as, which makes sense.

111
00:06:42.600 --> 00:06:46.753
So our button pops will
be anything that does,

112
00:06:46.753 --> 00:06:50.591
but we're gonna pass these in ourselves.

113
00:06:50.591 --> 00:06:54.570
Okay, cool, and then now we need
to figure out what's going on.

114
00:06:54.570 --> 00:06:56.284
So let's just review for a second.

115
00:06:56.284 --> 00:06:58.200
We've got a generic called E.

116
00:06:58.200 --> 00:07:02.815
We placed a constraint on E that is
something that conforms to the shape of

117
00:07:02.815 --> 00:07:04.260
an HTML element.

118
00:07:04.260 --> 00:07:06.701
We take the button on
props that we just made,

119
00:07:06.701 --> 00:07:09.608
we made a new type that is
whatever the element takes.

120
00:07:09.608 --> 00:07:12.707
But lets us override it with in this case,
children, for

121
00:07:12.707 --> 00:07:14.719
instance is the most important one.

122
00:07:14.719 --> 00:07:18.821
But it lets us override
it with our unique types.

123
00:07:18.821 --> 00:07:23.190
So we now know this takes as well.

124
00:07:23.190 --> 00:07:29.130
And we're going to figure
out what E is in this case.

125
00:07:29.130 --> 00:07:34.208
And so our button now our button
component is also going to say like,

126
00:07:34.208 --> 00:07:39.571
hey, this now this is now going to we
basically have to pass the rename.

127
00:07:39.571 --> 00:07:43.148
Button is going to take some,
it's gonna figure out usually for

128
00:07:43.148 --> 00:07:46.735
the as what E is it's going to
pass it into button props, right?

129
00:07:46.735 --> 00:07:50.566
Button props is going to then
look at the element type and

130
00:07:50.566 --> 00:07:55.471
look at our own button props and
kind of pass it up and down back through.

131
00:07:55.471 --> 00:08:01.310
So from when we define as that will
get passed in to button props.

132
00:08:01.310 --> 00:08:04.742
We will create a new type that
has everything that element does

133
00:08:04.742 --> 00:08:07.387
minus the things that we defined so
on so forth.

134
00:08:07.387 --> 00:08:10.950
And TypeScript is going to
figure a lot of that out for us.

135
00:08:10.950 --> 00:08:15.603
So let's make, let's say the by default
button should be buttons, right?

136
00:08:23.950 --> 00:08:25.332
That checks out.

137
00:08:25.332 --> 00:08:30.993
And so we'll say that take the generic

138
00:08:34.780 --> 00:08:36.522
Write element type, and by default,

139
00:08:36.522 --> 00:08:38.816
it's going to be the type
of our default element.

140
00:08:42.651 --> 00:08:47.680
All right, so TypeScript was
pretty happy with us right now.

141
00:08:47.680 --> 00:08:49.200
We do need to do some stuff here.

142
00:08:49.200 --> 00:08:52.356
Right now we'll do what we did
all this work on the type, and

143
00:08:52.356 --> 00:08:54.012
then we still return a button.

144
00:08:54.012 --> 00:08:57.550
So that's not incredibly useful.

145
00:08:57.550 --> 00:09:01.186
And one of the things
in react is that it's,

146
00:09:01.186 --> 00:09:04.540
all of our HTML elements are lowercase.

147
00:09:04.540 --> 00:09:08.148
Are anything would like having react
figured out we usually use uppercase

148
00:09:08.148 --> 00:09:08.681
letters.

149
00:09:08.681 --> 00:09:10.310
So we're just going to kind
of rename it real quick.

150
00:09:10.310 --> 00:09:15.578
We'll say that a TagName is
whatever the as the optional

151
00:09:15.578 --> 00:09:19.958
as property was, or
is that default element.

152
00:09:22.395 --> 00:09:29.851
And here we're just gonna say,
TagName, Everything works.

153
00:09:29.851 --> 00:09:33.078
Now, try to ref here,
it's like whoa, whoa,

154
00:09:33.078 --> 00:09:37.611
I mean there's a lot to read here,
but you can kind of see in there.

155
00:09:37.611 --> 00:09:42.252
It's like, you see that ButtonHTML
elements, HTML button element.

156
00:09:42.252 --> 00:09:44.230
There's no RF on there.

157
00:09:44.230 --> 00:09:52.012
But what happens if I say, okay,
this button treated as an a tag?

158
00:09:52.012 --> 00:09:57.281
Look at that dynamically,
the element that we're using,

159
00:09:57.281 --> 00:10:01.070
I know that E is, now set to an a tag.

160
00:10:01.070 --> 00:10:06.631
Get me all of reacts properties of a tag,
ref is definitely on there.

161
00:10:06.631 --> 00:10:09.884
Definitely support primary as
well from our ButtonOwnProps and

162
00:10:09.884 --> 00:10:14.279
kind of dynamically create that type based
on everything that an anchor tag includes,

163
00:10:14.279 --> 00:10:16.460
plus everything that we defined, right?

164
00:10:16.460 --> 00:10:20.030
And if again,
if we remove that it's like whoa,

165
00:10:20.030 --> 00:10:24.310
like we default back to button
where ref is not supported.

166
00:10:24.310 --> 00:10:29.636
And everything about in
support is okay as well.

167
00:10:29.636 --> 00:10:33.766
Remember that you can see ID didn't get as
a problem even though we didn't define ID

168
00:10:33.766 --> 00:10:35.601
because button support ID, right?

169
00:10:35.601 --> 00:10:37.946
So all HTML element support ID.

170
00:10:37.946 --> 00:10:39.123
So that was fine.

171
00:10:39.123 --> 00:10:42.571
But it dynamically figures out the type
based on the information we gave it.

172
00:10:42.571 --> 00:10:45.462
So you're an anchor tag, and
you've got button on props.

173
00:10:45.462 --> 00:10:46.360
I'll support both of those.

174
00:10:46.360 --> 00:10:48.041
I'll figure it all out for you.

175
00:10:48.041 --> 00:10:51.142
But if you try to use something,
just anything in there,

176
00:10:51.142 --> 00:10:54.124
I'm going to try to prevent
you from making mistakes.

177
00:10:54.124 --> 00:10:58.191
Because maybe you're refactoring
a bunch of buttons into anchor tags.

178
00:10:58.191 --> 00:11:00.016
I will help you along the way so

179
00:11:00.016 --> 00:11:04.620
you don't have some weird edge case
that you don't find until much later.

