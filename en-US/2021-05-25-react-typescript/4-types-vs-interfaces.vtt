WEBVTT

1
00:00:00.080 --> 00:00:01.303
So we have a site for

2
00:00:01.303 --> 00:00:06.220
this workshop, which is gonn be all
the things we're talking about.

3
00:00:06.220 --> 00:00:10.189
You can see, here's the name
tag that we did earlier, and

4
00:00:10.189 --> 00:00:15.600
kind of some of the stuff we were
doing with the different prop types.

5
00:00:15.600 --> 00:00:21.449
And for every single thing that we do
today, there is a code sandbox for

6
00:00:21.449 --> 00:00:26.220
literally everything that you
can kind of take a look at.

7
00:00:26.220 --> 00:00:31.408
Also, if you go to Setup, there is
a repo that also has these examples

8
00:00:31.408 --> 00:00:36.250
if you wanna run them locally,
cuz I don't trust the Internet.

9
00:00:37.480 --> 00:00:41.227
So we have a local version, we have
a code sandbox version as well, and

10
00:00:41.227 --> 00:00:43.760
some repos that we're gonna work on.

11
00:00:43.760 --> 00:00:46.269
But, and on that site in the appendix,

12
00:00:46.269 --> 00:00:52.240
one of the questions we just saw is what
are the different types and interfaces?

13
00:00:52.240 --> 00:00:56.923
A few years ago, there was a lot more
granular answer between the two.

14
00:00:56.923 --> 00:01:03.643
As new versions of TypeScript come out,
the line between types and

15
00:01:03.643 --> 00:01:08.563
interfaces gets a little bit blurrier,
right?

16
00:01:08.563 --> 00:01:14.710
Types and interfaces can do more and
more similar things.

17
00:01:14.710 --> 00:01:20.076
I think one of the ways that I like to
think about it is, in JavaScript, function

18
00:01:20.076 --> 00:01:26.490
declarations and function expressions are
mostly the same but slightly different.

19
00:01:26.490 --> 00:01:31.263
A function declaration will be hoisted
up and a function expression won't be.

20
00:01:31.263 --> 00:01:36.059
Arrow functions will lexically bind this
but they are, other than edge cases,

21
00:01:36.059 --> 00:01:37.144
mostly the same.

22
00:01:37.144 --> 00:01:41.550
I think that is becoming increasingly
true for types and interfaces.

23
00:01:41.550 --> 00:01:47.350
So I included this chart from a tweet
to kinda show some of the differences.

24
00:01:47.350 --> 00:01:51.075
But then I will give you my rule of thumb,
or whatever, for

25
00:01:51.075 --> 00:01:55.000
thinking about when to use a type or
an interface.

26
00:01:55.000 --> 00:01:56.862
I like the types.

27
00:01:56.862 --> 00:02:00.632
One other thing that's kinda
interesting is in Visual Studio Code,

28
00:02:00.632 --> 00:02:04.922
when you hover over a type, it will kind
of explain to you what the type is in that

29
00:02:04.922 --> 00:02:10.300
little pop-up, versus an interface, it
will just tell you what the interface is.

30
00:02:10.300 --> 00:02:13.084
So one way to think about it is for
things like classes and

31
00:02:13.084 --> 00:02:16.238
stuff along those lines,
you'll normally see an interface.

32
00:02:16.238 --> 00:02:20.159
But for simpler, more primitives,
functions and stuff along those lines,

33
00:02:20.159 --> 00:02:21.132
I would use a type.

34
00:02:21.132 --> 00:02:24.200
But also, cuz I wanna see that
when I hover over a lot of times,

35
00:02:24.200 --> 00:02:27.560
it's helpful to me versus just
seeing the name of the interface.

36
00:02:27.560 --> 00:02:31.007
But if that gets so large that it
doesn't make any sense to you anymore,

37
00:02:31.007 --> 00:02:33.430
you can switch it over to an interface.

38
00:02:33.430 --> 00:02:37.088
In other code bases I've worked on,
we use interfaces everywhere.

39
00:02:37.088 --> 00:02:39.790
Part of that is the time space continuum,
right?

40
00:02:39.790 --> 00:02:41.880
You could do more things
with interfaces at the time.

41
00:02:41.880 --> 00:02:47.334
The other part was sometimes the right
decision is whatever the code

42
00:02:47.334 --> 00:02:52.510
base uses that you came into, or
whatever the team agrees upon.

43
00:02:52.510 --> 00:02:55.973
There's a lot of overlap between them.

44
00:02:55.973 --> 00:03:01.017
We're gonna use both over the course
of this workshop just to see them,

45
00:03:01.017 --> 00:03:05.744
but really, it can, to a certain extent,
be at your discretion.

46
00:03:05.744 --> 00:03:11.134
Cool, Checking,
I am going to cover generics.

47
00:03:15.652 --> 00:03:19.080
TypeScript is a superset of
things on top of JavaScript.

48
00:03:19.080 --> 00:03:22.803
So generally speaking,
all the rules of JavaScript apply.

49
00:03:22.803 --> 00:03:28.478
It is just trying to add an extra layer
of protection, because all the JavaScript

50
00:03:28.478 --> 00:03:33.080
jokes that we've seen,
like true plus true equals two, right?

51
00:03:33.080 --> 00:03:35.848
TypeScript, true plus true
still equals two in TypeScript.

52
00:03:35.848 --> 00:03:38.440
TypeScript's just gonna try to
stop you from doing that, right?

53
00:03:38.440 --> 00:03:40.810
It is JavaScript under the hood.

54
00:03:40.810 --> 00:03:47.590
It is JavaScript with an extra layer of
protection and stuff along those lines.

55
00:03:47.590 --> 00:03:50.486
The question is how do we handle dot,
dot, dot,

56
00:03:50.486 --> 00:03:55.306
anything that's collecting all the other
additional arguments in a function?

57
00:03:55.306 --> 00:03:58.948
Generally speaking,
you would treat them like an array.

58
00:03:58.948 --> 00:04:01.937
So we can switchover,
let's write some code real quick,

59
00:04:01.937 --> 00:04:03.829
it's probably a little bit easier.

60
00:04:12.952 --> 00:04:17.472
So we might see something like, Zdd,

61
00:04:17.472 --> 00:04:24.231
where we'd say the first number, First,

62
00:04:24.231 --> 00:04:27.935
a is a number and we can see all the other
numbers that we might see going through.

63
00:04:30.925 --> 00:04:34.814
In this case,
what we would probably do is say, okay,

64
00:04:34.814 --> 00:04:38.210
this is going to be an array of numbers,
right?

65
00:04:38.210 --> 00:04:40.669
Cuz generally speaking,
if you're collecting all of them,

66
00:04:40.669 --> 00:04:42.950
you still wanna know some
information about it, right?

67
00:04:42.950 --> 00:04:45.728
So this might add the first number
to all of the other ones or

68
00:04:45.728 --> 00:04:47.920
something along those lines, right?

69
00:04:47.920 --> 00:04:52.151
And so it's treated like an array of
arguments and so you type it accordingly.

