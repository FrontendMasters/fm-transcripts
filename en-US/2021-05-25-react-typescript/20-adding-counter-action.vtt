WEBVTT

1
00:00:00.470 --> 00:00:02.595
Now, the thing that I want to solve for

2
00:00:02.595 --> 00:00:07.000
this is literally the thing that just
kind of bit me for a second there.

3
00:00:07.000 --> 00:00:10.200
Which is payload can sometimes be there.

4
00:00:10.200 --> 00:00:14.723
It's really only something we're gonna
use on set or in this case, reset, but

5
00:00:14.723 --> 00:00:17.470
increment and decrement don't needed.

6
00:00:17.470 --> 00:00:20.780
And this can be a little bit tricky.

7
00:00:20.780 --> 00:00:26.925
Now, what would be really great
if I could tell TypeScript that,

8
00:00:26.925 --> 00:00:32.970
hey, if it's increment or
decrement, I don't need payload.

9
00:00:34.030 --> 00:00:37.968
But if it's set,
you got to give me a number, right.

10
00:00:37.968 --> 00:00:42.090
Because just saying this wasn't enough for
TypeScript,

11
00:00:42.090 --> 00:00:44.370
you can see everything blew up.

12
00:00:44.370 --> 00:00:50.140
Because it's cool, I don't since
you said the number was optional.

13
00:00:50.140 --> 00:00:52.710
I can't promise you that will be a number.

14
00:00:52.710 --> 00:00:57.338
However, you told me that counter state
demanded that the value be a number, but

15
00:00:57.338 --> 00:01:01.720
I can't promise that I'm gonna set
it to a number on that line of code.

16
00:01:01.720 --> 00:01:06.567
Thereby I can't confirm this code is
going to work the way you think it's

17
00:01:06.567 --> 00:01:07.610
going to work.

18
00:01:09.190 --> 00:01:12.970
By saying it's either gonna
payload is undefined.

19
00:01:12.970 --> 00:01:14.810
We'll make it zero.

20
00:01:16.230 --> 00:01:19.120
Really also if it's a false
value is going to become zero.

21
00:01:19.120 --> 00:01:23.080
But since zero is the only false number,
it works.

22
00:01:24.830 --> 00:01:29.823
Now TypeScript can actually do everything
but it'd be interesting to say all right,

23
00:01:29.823 --> 00:01:34.609
increment decrement don't need a payload
at all and shouldn't have a payload and

24
00:01:34.609 --> 00:01:37.300
set should definitely have a payload.

25
00:01:37.300 --> 00:01:40.540
And it should definitely be
a number not an optional version.

26
00:01:40.540 --> 00:01:44.590
We can do this and what we're gonna
do here is we're just have and

27
00:01:44.590 --> 00:01:48.580
this kinda goes to the question
I got a little bit earlier.

28
00:01:48.580 --> 00:01:51.678
I'll just write this along with everything
else, and say basic counteraction.

29
00:01:54.141 --> 00:01:56.610
And that's just gonna be our increment or
decrement, right.

30
00:01:56.610 --> 00:01:57.794
And so this will be type.

31
00:01:59.860 --> 00:02:01.445
Increment.

32
00:02:03.369 --> 00:02:05.842
Decrement, those are fine, and

33
00:02:05.842 --> 00:02:10.978
we're gonna say that the type of
let's call it a set counteraction.

34
00:02:14.377 --> 00:02:19.896
Has the type set and semicolon and

35
00:02:19.896 --> 00:02:23.839
this one has a mandatory

36
00:02:23.839 --> 00:02:28.780
payload of a number, right.

37
00:02:29.800 --> 00:02:31.835
And so now instead of a counter action,

38
00:02:31.835 --> 00:02:35.700
and we could even say the counter
action was either one of these.

39
00:02:35.700 --> 00:02:37.320
And in fact, let's do that.

40
00:02:37.320 --> 00:02:38.870
Just comment out this one.

41
00:02:40.560 --> 00:02:45.692
And we'll say that the type of counter
action so this reducer will now

42
00:02:45.692 --> 00:02:50.647
accept either the basic counter action or
the set counter action,

43
00:02:50.647 --> 00:02:56.530
so it's either take an action has
a type of increment or decrement.

44
00:02:56.530 --> 00:02:59.055
Or it's gonna take an action
has a type of payload or

45
00:02:59.055 --> 00:03:01.661
type of set which point it
demands to have a payload.

46
00:03:01.661 --> 00:03:04.554
Which means we don't have to
have that fallback in our code,

47
00:03:04.554 --> 00:03:07.800
because types won't let us write
code that could have an edge case.

48
00:03:09.590 --> 00:03:13.033
Some kinda action in here.

49
00:03:16.897 --> 00:03:20.443
Now we can go back to
the code that we had.

50
00:03:23.145 --> 00:03:27.777
Right, I don't have to default back to
zero because there is no world where we

51
00:03:27.777 --> 00:03:29.590
hit the case of set.

52
00:03:29.590 --> 00:03:31.230
We don't have a payload.

53
00:03:31.230 --> 00:03:34.993
And just to kind of drive the point home,
if I forget the payload and set,

54
00:03:34.993 --> 00:03:38.698
it's not gonna have some weird edge
case where it becomes undefined and

55
00:03:38.698 --> 00:03:41.740
I don't understand why
my code isn't working.

56
00:03:41.740 --> 00:03:44.910
It is literally just not
gonna let me write that code.

57
00:03:44.910 --> 00:03:47.997
Similarly if I said here.

58
00:03:51.130 --> 00:03:54.390
It won't let me include a payload and
increment or decrement.

59
00:03:54.390 --> 00:03:56.250
So again, is adding that safety and

60
00:03:56.250 --> 00:03:59.150
showing TypeScript the intent of my code,
right.

61
00:03:59.150 --> 00:04:01.730
If you say set,
you better give me a payload.

62
00:04:01.730 --> 00:04:04.435
If you give me a command document,
I don't even need a payload.

63
00:04:04.435 --> 00:04:08.185
And now I don't have to write code
that does a fallback cuz our code is,

64
00:04:08.185 --> 00:04:10.360
typos not gonna allow those edge cases.

65
00:04:10.360 --> 00:04:11.439
I was originally coding around.

66
00:04:13.400 --> 00:04:16.162
So we can kind of see that again,
if we can help the type system out.

67
00:04:16.162 --> 00:04:19.797
And this is also like in a large enough
code base, there is you're gonna use

68
00:04:19.797 --> 00:04:22.926
the code you write but
other people gonna use the code you write.

69
00:04:22.926 --> 00:04:25.956
And case of bugs a lot of times
is like somebody six months now.

70
00:04:25.956 --> 00:04:29.690
Didn't understand what you were thinking
six months ago when you tried to solve

71
00:04:29.690 --> 00:04:32.820
that issue and they tried to,
they used a little bit differently.

72
00:04:32.820 --> 00:04:34.570
They didn't understand
that they made a mistake.

73
00:04:34.570 --> 00:04:37.645
Sometimes that other person is
just you six months from now,

74
00:04:37.645 --> 00:04:40.310
that doesn't remember
the code that you wrote.

75
00:04:40.310 --> 00:04:43.874
So in this case,
we've now added some extra type safety and

76
00:04:43.874 --> 00:04:47.439
a little bit of sophistication
in our types to make sure that

77
00:04:47.439 --> 00:04:50.460
lots of little edge cases
can't get hit anymore.

