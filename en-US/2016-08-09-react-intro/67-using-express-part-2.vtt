WEBVTT

1
00:00:00.000 --> 00:00:03.974
[MUSIC]

2
00:00:03.974 --> 00:00:06.790
&gt;&gt; Brian Holt: So we're actually just
gonna write things and error for that.

3
00:00:06.790 --> 00:00:13.775
So if error res .status(500)

4
00:00:13.775 --> 00:00:19.835
.send(error.message).

5
00:00:19.835 --> 00:00:23.448
So if I have an error,
give me a status of 500.

6
00:00:23.448 --> 00:00:27.259
Which if you're not familiar
with your http status codes.

7
00:00:27.259 --> 00:00:29.306
One I don't want to talk about
them because they're boring.

8
00:00:29.306 --> 00:00:34.414
Actually they're kind of fun,
depends on who you're talking to.

9
00:00:34.414 --> 00:00:38.318
My fellows they just adopted 451 as

10
00:00:38.318 --> 00:00:43.440
a standard error code,
which means censored.

11
00:00:43.440 --> 00:00:48.184
I appreciated the the literary reference
there to the Fahrenheit 451, right.

12
00:00:49.340 --> 00:00:52.660
So Reddit actually does it
takedown requests, right.

13
00:00:52.660 --> 00:00:54.690
And so if it sends you back a 451,

14
00:00:54.690 --> 00:00:57.750
it means that the government
asked them to censor it.

15
00:00:57.750 --> 00:00:58.740
I thought it was pretty cool.

16
00:01:00.840 --> 00:01:05.356
So anyway, a 500 means holy crap,
the server blew up, right.

17
00:01:05.356 --> 00:01:07.433
&gt;&gt; Students: [LAUGH].

18
00:01:07.433 --> 00:01:08.390
&gt;&gt; Brian Holt: So else if

19
00:01:08.390 --> 00:01:12.945
(redirectLocation) then you're gonna do

20
00:01:12.945 --> 00:01:19.536
a res.redirect(302) which
just means I don't remember,

21
00:01:19.536 --> 00:01:23.679
is 302 temporary or permanent?
&gt;&gt; Speaker 3: Temporary.

22
00:01:23.679 --> 00:01:24.506
&gt;&gt; Brian Holt: Temporary?

23
00:01:24.506 --> 00:01:27.110
Yeah, so
this is gonna be a temporary location.

24
00:01:28.710 --> 00:01:32.325
This is gonna be
a redirectLocation.pathname +

25
00:01:32.325 --> 00:01:38.176
redirectLocation.search which is basically
gonna say it's going to maintain

26
00:01:38.176 --> 00:01:43.522
all the parameters all the way through,
that's what the search part is.

27
00:01:51.184 --> 00:01:52.417
&gt;&gt; Brian Holt: That one matches to that,

28
00:01:52.417 --> 00:01:58.359
okay.
&gt;&gt; Brian Holt: Where

29
00:01:58.359 --> 00:02:03.216
is this parenthesis coming from?
&gt;&gt; Students: Should be on line 29 after

30
00:02:03.216 --> 00:02:05.896
redirectLocation.
&gt;&gt; Brian Holt: Yep, thank you.

31
00:02:07.959 --> 00:02:12.113
&gt;&gt; Brian Holt: Okay, else if

32
00:02:12.113 --> 00:02:18.007
(renderProps).

33
00:02:18.007 --> 00:02:21.718
So if I found something,
this is like the happy path,

34
00:02:21.718 --> 00:02:24.780
this is actually the fun
part of the server.

35
00:02:24.780 --> 00:02:28.652
We wrote all this crap just so we could
write this tiny little body down here.

36
00:02:28.652 --> 00:02:32.040
const body =

37
00:02:32.040 --> 00:02:41.896
ReactDOMServer.renderToString.

38
00:02:41.896 --> 00:02:44.508
And we're going to give ourselves
some breathing room in on this.

39
00:02:44.508 --> 00:02:53.607
React.createElement(provider, {store}, ),

40
00:02:53.607 --> 00:02:58.639
and remember this is just store

41
00:02:58.639 --> 00:03:04.058
store right but we're just going

42
00:03:04.058 --> 00:03:09.294
to do it this way because we can.

43
00:03:09.294 --> 00:03:16.576
React.createElement
&gt;&gt; Brian Holt: (RouterContext,

44
00:03:16.576 --> 00:03:21.464
renderProps).
&gt;&gt; Brian Holt: And

45
00:03:21.464 --> 00:03:25.853
that's it.
&gt;&gt; Brian Holt: So body here, so

46
00:03:25.853 --> 00:03:26.970
what's happening here?

47
00:03:26.970 --> 00:03:32.351
So, Provider right that looks familiar
that's coming from our React store or

48
00:03:32.351 --> 00:03:36.111
from a redux store, right,
and then RouterContext.

49
00:03:36.111 --> 00:03:41.089
If we go in here and look at our,
if it's still working.

50
00:03:41.089 --> 00:03:44.271
[INAUDIBLE] connecting in react.

51
00:03:44.271 --> 00:03:49.689
Notice that there's a RouterContext
here underneath router, right.

52
00:03:49.689 --> 00:03:53.103
We're actually using this directly,
because we can't use the router directly.

53
00:03:53.103 --> 00:03:56.290
We have to use the primitive
underneath it.

54
00:03:56.290 --> 00:04:00.400
And this is actually going to be passing
in all of our renderProps directly to

55
00:04:00.400 --> 00:04:06.840
this, and then the RouterContext knows
how to render your app correctly.

56
00:04:06.840 --> 00:04:10.380
We're basically manipulating
RouterContext directly.

57
00:04:10.380 --> 00:04:14.720
And we're using router, router is just
a little wrapper on top of RouterContext.

58
00:04:14.720 --> 00:04:16.930
That makes some sense?

59
00:04:16.930 --> 00:04:21.210
So router is made really nice use for
like, client side stuff.

60
00:04:21.210 --> 00:04:23.900
And then if you want to do the advanced

61
00:04:23.900 --> 00:04:26.470
rendering on the server stuff you
have to manipulate RouterContext.

62
00:04:26.470 --> 00:04:27.810
That's why they're are different.

63
00:04:27.810 --> 00:04:31.363
Just, so you know,

64
00:04:31.363 --> 00:04:38.578
okay.
&gt;&gt; Brian Holt: So

65
00:04:38.578 --> 00:04:41.360
now we have a nice little body here.

66
00:04:41.360 --> 00:04:46.490
This should be a string of
whatever our React app looks like.

67
00:04:48.140 --> 00:04:51.379
Then weâ€™re do a res.status(200)
which means yeah,

68
00:04:51.379 --> 00:04:53.342
I found whatever I'm looking for.

69
00:04:53.342 --> 00:04:58.293
.send(template(body), right.

70
00:04:58.293 --> 00:05:02.938
Remember up here,
template is our baseTemplate, right?

71
00:05:02.938 --> 00:05:06.760
Our index [INAUDIBLE] this is going
to have the head and the HTML and

72
00:05:06.760 --> 00:05:09.960
all that stuff that we don't really
care about in terms of React.

73
00:05:12.170 --> 00:05:15.270
And then this [INAUDIBLE] you're
gonna insert body straight into that

74
00:05:15.270 --> 00:05:16.640
template tag that we threw on there.

75
00:05:20.710 --> 00:05:23.890
Right, and then we need one more else
which is 404, holy crap I didn't find what

76
00:05:23.890 --> 00:05:30.987
you're looking for, res.status(404).send(

77
00:05:30.987 --> 00:05:37.610
'not found') or whatever snide remark
you'd like to make to your user.

78
00:05:39.210 --> 00:05:41.170
Or you could send your
404 page here as well.

79
00:05:46.670 --> 00:05:52.961
Okay, two more lines [LAUGH] console.log

80
00:05:57.257 --> 00:06:05.275
&gt;&gt; Brian Holt: Listening on port, port.

81
00:06:05.275 --> 00:06:08.600
And then app.listen(port).

82
00:06:13.390 --> 00:06:18.840
Okay, so
&gt;&gt; Brian Holt: Give you

83
00:06:18.840 --> 00:06:23.964
just a couple seconds here to catch up.
&gt;&gt; Speaker 5: Can you do the string

84
00:06:23.964 --> 00:06:26.770
interpolation in Node, for port?
&gt;&gt; Brian Holt: Maybe.

85
00:06:27.810 --> 00:06:28.640
&gt;&gt; Speaker 5: I haven't done it.

86
00:06:28.640 --> 00:06:29.160
&gt;&gt; Brian Holt: You have to check.

87
00:06:29.160 --> 00:06:36.537
I don't remember off the top of my head.
&gt;&gt; Brian Holt: All right,

88
00:06:36.537 --> 00:06:39.907
let's take a wild look and
see if this works.

89
00:06:39.907 --> 00:06:47.016
So end your HTTP server.

90
00:06:47.016 --> 00:06:47.630
Where am I?

91
00:06:50.510 --> 00:06:57.620
So what I'm gonna say is node app.js and
hopefully not go down in a blaze of glory.

92
00:06:58.960 --> 00:07:00.580
All right, so we're on 5050 now.

93
00:07:03.620 --> 00:07:08.126
So instead of being an 8080 and
I'm change this to 5050.

94
00:07:08.126 --> 00:07:12.377
Body is not defined, okay.

95
00:07:12.377 --> 00:07:15.005
So that's that low dash so

96
00:07:15.005 --> 00:07:20.170
let's go find what we did
wrong with index.html.

97
00:07:20.170 --> 00:07:22.177
That should be there.

98
00:07:22.177 --> 00:07:30.424
Did I do this wrong?
&gt;&gt; Speaker 6: Somebody in chat said,

99
00:07:30.424 --> 00:07:32.910
shouldn't we provide an object
literal to the template.

100
00:07:32.910 --> 00:07:34.030
&gt;&gt; Brian Holt: Right, that's

101
00:07:34.030 --> 00:07:34.690
exactly right.

102
00:07:35.770 --> 00:07:37.680
Okay, go to app.

103
00:07:37.680 --> 00:07:39.540
It's not actually just body.

104
00:07:39.540 --> 00:07:40.040
Where is it?

105
00:07:41.200 --> 00:07:44.660
Right here.

106
00:07:44.660 --> 00:07:47.790
So it's not just the string,
you actually have to put in as an object.

107
00:07:49.820 --> 00:07:51.110
So it'd be body body, right.

108
00:07:51.110 --> 00:07:53.340
But you could actually
just do body like that.

109
00:07:53.340 --> 00:08:00.767
That's totally fine.
&gt;&gt; Brian Holt: Oops, let's try that again.

110
00:08:07.020 --> 00:08:09.065
&gt;&gt; Brian Holt: Okay listening again,

111
00:08:09.065 --> 00:08:11.425
refresh the page.

112
00:08:11.425 --> 00:08:15.289
Okay, so now we see our app again.
&gt;&gt; Brian Holt: But

113
00:08:15.289 --> 00:08:17.315
let's look at the interesting thing here.

114
00:08:17.315 --> 00:08:21.307
So open like, to do view source,
View Page Source.

115
00:08:21.307 --> 00:08:24.466
Look at all the stuff that's
getting sent down now.

116
00:08:24.466 --> 00:08:26.718
It's not just an empty thing and

117
00:08:26.718 --> 00:08:30.901
it's maybe a little bit more
impressive to look at Search.

118
00:08:30.901 --> 00:08:35.974
So it you look at Searches page, look at
how much markup is getting sent down,

119
00:08:35.974 --> 00:08:40.752
as opposed to before it was just
the little tiny bare bones index.html.

120
00:08:40.752 --> 00:08:43.060
Now we're actually doing
real universal rendering.

121
00:08:45.350 --> 00:08:50.440
So, to go back to my compelling example,
if we go back to Network and

122
00:08:50.440 --> 00:08:54.690
say throttling to Regular 2G.

123
00:08:54.690 --> 00:08:55.650
Refresh the page.

124
00:08:57.560 --> 00:08:59.200
Notice I got it a lot faster.

125
00:08:59.200 --> 00:09:02.360
And don't get me wrong,

126
00:09:02.360 --> 00:09:06.720
it's actually still just as slow because
that bundle file is still ginormous.

127
00:09:06.720 --> 00:09:09.418
So actually this is.
&gt;&gt; Brian Holt: This

128
00:09:09.418 --> 00:09:13.678
actually now will work totally
without JavaScript, almost.

129
00:09:13.678 --> 00:09:21.192
The search won't work anymore without
JavaScript, so if we refresh again.

130
00:09:21.192 --> 00:09:25.007
And I type orange right now,
the search isn't gonna work

131
00:09:25.007 --> 00:09:29.970
yet.
&gt;&gt; Brian Holt: I actually

132
00:09:29.970 --> 00:09:31.850
don't know what it's gonna do it.

133
00:09:31.850 --> 00:09:36.020
I might just blow it away
once React actually renders.

134
00:09:40.350 --> 00:09:40.965
It's still loading.

135
00:09:40.965 --> 00:09:42.332
[LAUGH].

136
00:09:42.332 --> 00:09:46.090
Yeah, there's a ton of it.

137
00:09:46.090 --> 00:09:47.929
That's never gonna load [LAUGH].

138
00:09:47.929 --> 00:09:52.830
Okay, anyway, something else
you might have noticed though.

139
00:09:52.830 --> 00:09:55.350
Let's take this throttling off cuz that's
going to absolutely drive me crazy.

140
00:09:58.460 --> 00:09:59.880
So if you go in to orange, right.

141
00:10:01.470 --> 00:10:03.910
I broke a lot of the images,
that's gonna be true.

142
00:10:05.020 --> 00:10:05.760
Why didn't these break?

143
00:10:09.317 --> 00:10:10.204
That's why.

144
00:10:10.204 --> 00:10:14.801
So if you want to fix your images
real quick, come into Details and

145
00:10:14.801 --> 00:10:16.400
put a slash on public.

146
00:10:16.400 --> 00:10:19.390
Because it's trying to look for

147
00:10:19.390 --> 00:10:23.700
your images that details slash public
if you don't have the slash on here.

148
00:10:23.700 --> 00:10:25.780
But now we want to go
actually to just public.

149
00:10:25.780 --> 00:10:27.250
So put /public on there.

150
00:10:32.210 --> 00:10:35.848
Okay,
&gt;&gt; Brian Holt: So now, if you go back into

151
00:10:35.848 --> 00:10:43.187
Daredevil, it should work.
&gt;&gt; Brian Holt: Magic,

152
00:10:43.187 --> 00:10:47.321
pretty cool, did people get it as well,

153
00:10:47.321 --> 00:10:52.143
or did we break along the way too?
&gt;&gt; Speaker 7: I guess I have a quick

154
00:10:52.143 --> 00:10:53.139
question is,

155
00:10:53.139 --> 00:10:58.701
what is it about universal rendering
that's actually offering you a speed up.

156
00:10:58.701 --> 00:11:02.578
Cuz you're, on the server side,
generating the DOM, right, but

157
00:11:02.578 --> 00:11:05.700
where you're throttling
is the the network.

158
00:11:05.700 --> 00:11:10.430
It seems like you'd be getting more
delivered by rendering the whole DOM,

159
00:11:10.430 --> 00:11:12.800
as opposed to just getting the JavaScript,
am I missing,

160
00:11:12.800 --> 00:11:15.000
what am I missing?
&gt;&gt; Brian Holt: What you're missing is,

161
00:11:17.915 --> 00:11:20.985
first of all, your service can be way
faster than anyone's laptop, right?

162
00:11:20.985 --> 00:11:24.225
So if someone's on some crappy flip phone,
right,

163
00:11:24.225 --> 00:11:25.905
they don't have to worry
about React rendering it.

164
00:11:25.905 --> 00:11:29.555
It's actually pre-rendered for them.
&gt;&gt; Speaker 8: Gotcha.

165
00:11:29.555 --> 00:11:31.155
&gt;&gt; Brian Holt: And the other thing is,

166
00:11:31.155 --> 00:11:32.595
think about how big this is.

167
00:11:32.595 --> 00:11:36.020
Well, actually I can, we can
demonstratively look at how big this is.

168
00:11:38.790 --> 00:11:42.130
So, we look at our bundle,
how big is our bundle now?

169
00:11:42.130 --> 00:11:44.816
Our bundle is almost a meg,
right, somewhere close to that.

170
00:11:44.816 --> 00:11:50.019
But if we look at Network here,
I mean look at all, refresh.

171
00:11:52.440 --> 00:11:56.150
Our search page is only about 20 KB.

172
00:11:56.150 --> 00:11:58.490
So in order to see their very first view,

173
00:11:58.490 --> 00:12:03.060
they only have to download 20 KB,
right, instead of a meg of JavaScript.

174
00:12:03.060 --> 00:12:05.180
So that's really the speed up right there.

175
00:12:05.180 --> 00:12:09.280
If they perceive seeing this immediately.
&gt;&gt; Speaker 8: Interesting.

176
00:12:09.280 --> 00:12:09.865
&gt;&gt; Brian Holt: So I mean,

177
00:12:09.865 --> 00:12:12.795
front end development is
a psychology game, right.

178
00:12:12.795 --> 00:12:16.465
The idea is to show them something as fast
as possible, and then the idea after that,

179
00:12:16.465 --> 00:12:19.773
once you have universally rendered this,
you wanna hurry as fast you can and

180
00:12:19.773 --> 00:12:20.770
make it interactive.

181
00:12:20.770 --> 00:12:23.580
Cuz once they see it,
they assume it's already interactive.

182
00:12:23.580 --> 00:12:26.494
And if your network is just fast enough,
by the time they click on it,

183
00:12:26.494 --> 00:12:28.120
it's gonna be interactive, right.

184
00:12:28.120 --> 00:12:31.772
Because there's a delay from me seeing it,
to me understanding,

185
00:12:31.772 --> 00:12:34.460
to me deciding what I want to do, right.

186
00:12:34.460 --> 00:12:39.480
And usually,
in that hopefully 400 to 500 milliseconds,

187
00:12:39.480 --> 00:12:42.850
you can get the rest of your JavaScript
out there and then make it interactive.

188
00:12:44.460 --> 00:12:46.100
So this is playing the psychology game for

189
00:12:46.100 --> 00:12:48.780
sure.
&gt;&gt; Speaker 9: What about if you're not

190
00:12:48.780 --> 00:12:52.038
running Node in the back end?
&gt;&gt; Brian Holt: Then you're out of luck.

191
00:12:52.038 --> 00:12:53.833
&gt;&gt; Speaker 9: That's what I thought.

192
00:12:53.833 --> 00:12:54.374
&gt;&gt; Brian Holt: So yeah,

193
00:12:54.374 --> 00:12:56.410
you need you need some sort of node.

194
00:12:58.130 --> 00:12:59.840
So there's a couple strategies to that.

195
00:13:01.316 --> 00:13:04.700
My absolutely hair-brained scheme
that worked okay at Reddit,

196
00:13:04.700 --> 00:13:08.380
before they let me use Node,
is I just started using Node.

197
00:13:08.380 --> 00:13:14.111
So basically, I had a service out on the
side that I would shoot all my data to.

198
00:13:14.111 --> 00:13:17.298
The Node server would hurry and render it,
and then send it down to the client.

199
00:13:17.298 --> 00:13:20.325
Or it could send it back to the server
on the server and send it back.

200
00:13:20.325 --> 00:13:24.760
And if you're just in the same data center
that's a really fast hop, so that's okay.

201
00:13:24.760 --> 00:13:28.320
You can also do some fancy things
like caching that on the side,

202
00:13:28.320 --> 00:13:30.110
like if it's the non-member home page,
right.

203
00:13:30.110 --> 00:13:33.260
All that's totally cacheable,
you can just send it into a cache and

204
00:13:33.260 --> 00:13:34.929
instantly serve it from the cache.

205
00:13:34.929 --> 00:13:38.680
So you can have a Node service on
the side just populating a cache.

206
00:13:38.680 --> 00:13:40.940
So here's a couple things you can do.

207
00:13:40.940 --> 00:13:44.450
But if you actually want to do it in this
style, where you're actually rendering it

208
00:13:44.450 --> 00:13:47.450
on everything, like for example,
when you do on Netflix.

209
00:13:47.450 --> 00:13:50.660
That's what we're doing even for
the member side but

210
00:13:50.660 --> 00:13:51.890
we can do that because we're using Node.

211
00:13:53.060 --> 00:13:56.660
So, Node has to be in there somewhere,
suffice to say.

212
00:13:56.660 --> 00:14:00.080
I've heard of people with mixed
results doing it with Rhino,

213
00:14:00.080 --> 00:14:01.444
which is what you run with Java.

214
00:14:03.720 --> 00:14:08.444
I've also heard that Rhino is like
a hot pile of garbage, so take that for

215
00:14:08.444 --> 00:14:09.770
whatever you will.

216
00:14:09.770 --> 00:14:12.890
I have no personal experience, I'm just
parroting what people have told me.

