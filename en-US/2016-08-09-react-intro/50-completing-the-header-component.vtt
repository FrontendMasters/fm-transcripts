WEBVTT

1
00:00:00.000 --> 00:00:03.618
[MUSIC]

2
00:00:03.618 --> 00:00:06.115
&gt;&gt; Brian Holt: Benjamin H is asking
about handleSearchTermEvent,

3
00:00:06.115 --> 00:00:08.230
we're gonna take care of that momentarily.

4
00:00:09.630 --> 00:00:14.061
Stay tuned, I guess is what I would say.
&gt;&gt; Brian Holt: So

5
00:00:14.061 --> 00:00:17.403
go back to search.jsx.

6
00:00:24.083 --> 00:00:24.674
&gt;&gt; Brian Holt: Yeah,

7
00:00:24.674 --> 00:00:26.743
go back to search.jsx.

8
00:00:26.743 --> 00:00:30.213
And now, we're gonna have to
pass all the1 stuff into,

9
00:00:36.124 --> 00:00:38.585
&gt;&gt; Brian Holt: Into the header, sorry.

10
00:00:38.585 --> 00:00:43.467
[COUGH] So go here and
say const Header equals

11
00:00:43.467 --> 00:00:47.406
= require('./header').

12
00:00:47.406 --> 00:00:49.525
Okay, and now we're gonna rid
of this business right here.

13
00:00:52.405 --> 00:00:54.290
&gt;&gt; Brian Holt: Where it says header and

14
00:00:54.290 --> 00:00:56.745
we're gonna put Header here.

15
00:00:56.745 --> 00:00:59.246
But now we're gonna have to start
passing some of this stuff into,

16
00:01:02.106 --> 00:01:02.930
&gt;&gt; Brian Holt: Into the Header.

17
00:01:04.270 --> 00:01:08.494
So come down here and we're gonna say,

18
00:01:08.494 --> 00:01:18.490
handleSearchTermChange.
&gt;&gt; Brian Holt: And

19
00:01:18.490 --> 00:01:22.915
then we're gonna kinda modify
this here up here in just a sec.

20
00:01:22.915 --> 00:01:26.903
I wanna say
this.handleSearchTermChange and

21
00:01:26.903 --> 00:01:31.196
then we're gonna also pass
it in the search terms.

22
00:01:31.196 --> 00:01:36.577
We're gonna say searchTerm =
this.state.searchTerm, right,

23
00:01:36.577 --> 00:01:42.154
cuz this is coming from the state,
not necessary from the properties.

24
00:01:42.154 --> 00:01:45.954
And then we're gonna
also just do showSearch.

25
00:01:45.954 --> 00:01:50.360
And if you just reference it
like that with nothing provided,

26
00:01:50.360 --> 00:01:52.234
it's gonna pass in true.

27
00:01:52.234 --> 00:01:56.163
So this is kind of a shorthand and
actually our standard requires that,

28
00:01:56.163 --> 00:01:58.470
standard React requires that.

29
00:01:58.470 --> 00:01:59.753
But just know that that's equivalent to

30
00:01:59.753 --> 00:02:03.523
this.
&gt;&gt; Brian Holt: Right?

31
00:02:05.878 --> 00:02:08.158
&gt;&gt; Brian Holt: That's the difference

32
00:02:08.158 --> 00:02:08.958
there.

33
00:02:08.958 --> 00:02:11.558
So here's another personal preference and

34
00:02:11.558 --> 00:02:15.852
I say most React developers agree with me,
not necessarily all of them.

35
00:02:15.852 --> 00:02:18.871
This is kinda hard to parse,
right, it's pretty dense.

36
00:02:18.871 --> 00:02:22.547
We're seeing all these properties being
passed down, so you can actually put these

37
00:02:22.547 --> 00:02:29.183
on multiple lines like this.
&gt;&gt; Brian Holt: And

38
00:02:29.183 --> 00:02:33.470
its nice to be able to, that's pretty easy
to parse, right, pretty easy to read.

39
00:02:33.470 --> 00:02:37.019
Looks kinda weird, because we're not
used to seeing HTML that way but

40
00:02:37.019 --> 00:02:38.594
this this works okay with JSX.

41
00:02:38.594 --> 00:02:42.860
And then some people prefer to put
the closing tag on the last line.

42
00:02:44.660 --> 00:02:46.860
I'm of the school of thought,
it's nice to put it there,

43
00:02:46.860 --> 00:02:49.140
cuz then I can just keep adding, whoops!

44
00:02:49.140 --> 00:02:52.040
I can keep adding new things
underneath it without having to make

45
00:02:52.040 --> 00:02:53.720
sure that that's on the right line.

46
00:02:54.860 --> 00:02:56.366
Up to you, you don't have to do that

47
00:02:56.366 --> 00:03:00.828
either.
&gt;&gt; Brian Holt: Okay, so let's talk about

48
00:03:00.828 --> 00:03:05.390
handleSearchTermEvent and why we
didn't actually use it the same way.

49
00:03:05.390 --> 00:03:07.754
So what we're gonna do here
is going to change this,

50
00:03:07.754 --> 00:03:10.404
the name of this function to
be handleSearchTermChange.

51
00:03:10.404 --> 00:03:12.584
And then we're not gonna
have it take an event.

52
00:03:12.584 --> 00:03:14.729
We're actually gonna just have it take

53
00:03:14.729 --> 00:03:19.822
the searchTerm.
&gt;&gt; Brian Holt: And

54
00:03:19.822 --> 00:03:22.560
then we're gonna change
this to be searchTerm.

55
00:03:22.560 --> 00:03:24.040
Now why is that?

56
00:03:24.040 --> 00:03:25.900
We can actually make
this work with events and

57
00:03:25.900 --> 00:03:31.480
we can actually just call raw from the
child up to the parent given the event.

58
00:03:32.540 --> 00:03:36.730
But that actually makes this this
particular function far less reusable.

59
00:03:37.950 --> 00:03:41.400
Because now it only works with events and
that's kind of a problem.

60
00:03:41.400 --> 00:03:43.810
Because what happens if we have
multiple places that we can

61
00:03:43.810 --> 00:03:45.640
change our search term, right?

62
00:03:46.640 --> 00:03:48.830
We have to either simulate some
sort of synthetic event and

63
00:03:48.830 --> 00:03:51.704
that's a really gross icky thing to do,
right?

64
00:03:51.704 --> 00:03:56.000
Creating this synthetic event that we're
just like passing and creating ourselves.

65
00:03:56.000 --> 00:04:00.660
Instead, what we'll do is we'll unravel
that event in the child then we'll pass up

66
00:04:00.660 --> 00:04:03.550
just the raw string, right?

67
00:04:03.550 --> 00:04:05.210
So let's actually just
go do that really quick.

68
00:04:07.250 --> 00:04:12.245
So come back down to header.jsx.
&gt;&gt; Brian Holt: Did I

69
00:04:12.245 --> 00:04:15.365
call this handleSearchTermChange,
I just wanna make sure,

70
00:04:15.365 --> 00:04:18.065
handleSearchTermChange is
actually what I wanted.

71
00:04:18.065 --> 00:04:22.801
And then this handleSearchTermEvent,

72
00:04:22.801 --> 00:04:26.845
so actually what we wanna do here.

73
00:04:26.845 --> 00:04:31.085
So we're gonna make a new method
here called handleSearchTermEvent.

74
00:04:31.085 --> 00:04:39.535
This is gonna take an event.
&gt;&gt; Brian Holt: And

75
00:04:39.535 --> 00:04:42.974
here we're just gonna say,

76
00:04:42.974 --> 00:04:51.156
this.props.handleSearchTermChange with
e.target.value.

77
00:04:51.156 --> 00:04:53.835
Sorry, I tend to call my events e.

78
00:04:53.835 --> 00:04:56.693
I think it's a pretty common thing for
most UI engineers but

79
00:04:56.693 --> 00:04:59.275
you can call this event if
that makes you feel better.

80
00:05:08.776 --> 00:05:09.480
&gt;&gt; Brian Holt: Okay, so

81
00:05:09.480 --> 00:05:14.232
does anyone who have a question
about why I did it this particular

82
00:05:14.232 --> 00:05:17.800
way?
&gt;&gt; Brian Holt: It's in

83
00:05:17.800 --> 00:05:20.536
the interest of making that
function more reusable.

84
00:05:20.536 --> 00:05:24.636
So now I can use it anywhere that I have
to be able to handleSearchTermChange.

85
00:05:24.636 --> 00:05:27.940
And I'm using the same code path,
which is always a good thing, right?

86
00:05:27.940 --> 00:05:31.415
We're using our code, which means less
code, and that means one place to find

87
00:05:31.415 --> 00:05:37.072
bugs instead of two
&gt;&gt; Speaker 2: Did

88
00:05:37.072 --> 00:05:40.272
you want the onChange to be
this.handleSearchTermEvent instead of

89
00:05:40.272 --> 00:05:42.432
this.props.handleSearchTermEvent?
&gt;&gt; Brian Holt: Yep,

90
00:05:42.432 --> 00:05:47.269
you're right.
&gt;&gt; Brian Holt: So here on onChange,

91
00:05:47.269 --> 00:05:49.636
there should be no props here.

92
00:06:05.127 --> 00:06:06.225
&gt;&gt; Brian Holt: Okay, so come back to

93
00:06:06.225 --> 00:06:11.189
search for just a second.
&gt;&gt; Brian Holt: Make

94
00:06:11.189 --> 00:06:13.264
sure we're passing that in correctly,
we are.

95
00:06:13.264 --> 00:06:17.545
The other thing I wanted to show you real
quick, notice how we're saying searchTerm,

96
00:06:17.545 --> 00:06:18.260
searchTerm.

97
00:06:19.340 --> 00:06:24.039
Well there's a neat ES6 function that
we can actually just say searchTerm and

98
00:06:24.039 --> 00:06:24.830
that works.

99
00:06:24.830 --> 00:06:28.110
And that's exactly the same as this.

100
00:06:28.110 --> 00:06:32.733
So those two things are exactly the same.
&gt;&gt; Brian Holt: And

101
00:06:32.733 --> 00:06:36.318
that's just an ES6 convenience
functionality that if your property and

102
00:06:36.318 --> 00:06:38.454
the name of your variable
is the same thing,

103
00:06:38.454 --> 00:06:41.862
you can just write it once and
it will extrapolate that that's what you

104
00:06:41.862 --> 00:06:50.425
meant.
&gt;&gt; Brian Holt: Okay,

105
00:06:50.425 --> 00:06:52.973
I'll take some questions in just a second.

106
00:06:52.973 --> 00:06:57.557
Let's go make sure that I'm
actually doing everything okay,

107
00:06:57.557 --> 00:07:01.370
make sure I didn't actually
break our search here.

108
00:07:02.830 --> 00:07:06.942
So it's still rendering okay and it looks
like it's still searching okay as well,

109
00:07:06.942 --> 00:07:10.540
so.
&gt;&gt; Brian Holt: Okay,

110
00:07:10.540 --> 00:07:13.221
any questions about that?
&gt;&gt; Speaker 3: What is

111
00:07:13.221 --> 00:07:16.797
let utilSpace doing?
&gt;&gt; Brian Holt: So let utilSpace is

112
00:07:16.797 --> 00:07:21.756
basically declaring I have a mutable
variable that I'm going to use.

113
00:07:21.756 --> 00:07:26.510
So if we go back to Header, I mean you
could just as easily say var here and

114
00:07:26.510 --> 00:07:27.610
that's just fine.

115
00:07:27.610 --> 00:07:29.910
Let is just kinda the new
way of declaring mutability.

116
00:07:31.370 --> 00:07:34.260
It also has block level scoping, which
we don't necessarily need to talk about.

117
00:07:34.260 --> 00:07:36.276
But for all intents and purposes for this,

118
00:07:36.276 --> 00:07:38.945
it's the same thing.
&gt;&gt; Speaker 3: I'm getting an error

119
00:07:38.945 --> 00:07:42.149
that the variable utilSpace is defined but

120
00:07:42.149 --> 00:07:44.780
never used.
&gt;&gt; Brian Holt: Do you have it

121
00:07:44.780 --> 00:07:48.550
down here?
&gt;&gt; Brian Holt: That's the part where

122
00:07:48.550 --> 00:07:52.846
we use it.
&gt;&gt; Brian Holt: See,

123
00:07:52.846 --> 00:07:54.046
isn't your linter helpful?

124
00:07:54.046 --> 00:07:56.628
[LAUGH] That's exactly the kind
of errors you wan it to

125
00:07:56.628 --> 00:08:01.588
find.
&gt;&gt; Brian Holt: And I'll cut a branch and

126
00:08:01.588 --> 00:08:03.884
push it up here in just a sec cuz
we're gonna kind of switch gears for

127
00:08:03.884 --> 00:08:08.349
a little bit after this.
&gt;&gt; Brian Holt: Questions?

128
00:08:12.449 --> 00:08:13.231
&gt;&gt; Brian Holt: I can only assume I'm

129
00:08:13.231 --> 00:08:16.530
teaching this perfectly then.
&gt;&gt; Speaker 4: [LAUGH]

130
00:08:16.530 --> 00:08:17.106
&gt;&gt; Brian Holt: All right so let's

131
00:08:17.106 --> 00:08:17.790
cut a new branch here.

132
00:08:40.031 --> 00:08:41.867
&gt;&gt; Brian Holt: Okay, so I cut fem-20, so

133
00:08:41.867 --> 00:08:44.586
feel free to go grab
that if your stuff's not

134
00:08:44.586 --> 00:08:50.838
working.
&gt;&gt; Brian Holt: Cool,

135
00:08:50.838 --> 00:08:54.444
so let's go and switch gears a little bit,
unless anyone has any other

136
00:08:54.444 --> 00:09:00.427
questions?
&gt;&gt; Speaker 5: Can

137
00:09:00.427 --> 00:09:04.690
you just walk through quickly how
data flows when a user adds an input?

138
00:09:06.110 --> 00:09:08.530
&gt;&gt; Brian Holt: Sure, so

139
00:09:08.530 --> 00:09:12.710
coming to header, so a user's going
to type into this input, right?

140
00:09:14.010 --> 00:09:17.621
Now every time that you type something
it's gonna fire off an onChange event

141
00:09:17.621 --> 00:09:23.220
which is going to come up here
to handleSearchTermEvent, right?

142
00:09:23.220 --> 00:09:25.440
This is gonna handle the event here.

143
00:09:25.440 --> 00:09:28.740
This in turn is going to call
handleSearchTermChange which it's

144
00:09:28.740 --> 00:09:30.920
getting from its properties
which is going to be a function,

145
00:09:30.920 --> 00:09:34.940
but this is given from the parent, right?

146
00:09:34.940 --> 00:09:39.520
So this comes back to our idea that
children can call the parents and say,

147
00:09:39.520 --> 00:09:41.750
hey, I have something happened.

148
00:09:41.750 --> 00:09:45.480
But it's up to the parent to implement
this handleSearchTermChange, right?

149
00:09:45.480 --> 00:09:48.339
The parent is under no obligation
to change anything about its state.

150
00:09:49.730 --> 00:09:53.840
So the parent can say, if I'm being called
by this child just ignore it, right?

151
00:09:53.840 --> 00:09:57.206
That's totally fine and
that's totally a black box to this child.

152
00:09:57.206 --> 00:09:59.547
It has no idea of whether
the parent's respecting this or

153
00:09:59.547 --> 00:10:03.115
not.
&gt;&gt; Brian Holt: Okay, so

154
00:10:03.115 --> 00:10:06.284
it's gonna call with event.target.value,

155
00:10:06.284 --> 00:10:10.830
which is going to be passed up to
the parent, which is search.jsx.

156
00:10:10.830 --> 00:10:12.727
It takes in this searchTerm, right,

157
00:10:12.727 --> 00:10:15.467
which is literally just
a string of what's changing.

158
00:10:15.467 --> 00:10:18.277
And then it's going to call
setState with searchTerm,

159
00:10:18.277 --> 00:10:20.740
which actually gets propagated up here.

160
00:10:20.740 --> 00:10:21.820
We're changing our state,

161
00:10:21.820 --> 00:10:25.690
which is ultimately going to re-render
our entire UI and that's how it works.

