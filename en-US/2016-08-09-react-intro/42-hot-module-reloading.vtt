WEBVTT

1
00:00:00.000 --> 00:00:03.937
[MUSIC]

2
00:00:03.937 --> 00:00:07.460
&gt;&gt; Brian: At this point in time, I want to
leave a little note on hot module reload.

3
00:00:07.460 --> 00:00:11.520
It's one of the exciting parts of
web pack, exciting parts of react.

4
00:00:12.700 --> 00:00:17.645
Not going to cover it today and the reason
for that is it's, in my opinion,

5
00:00:17.645 --> 00:00:20.770
again another opinion,
it's not fully baked yet.

6
00:00:20.770 --> 00:00:25.380
It doesn't totally work the way
I expected to and I hate

7
00:00:25.380 --> 00:00:28.420
wrestling with my tools like it's just
one of my least favorite things to do.

8
00:00:28.420 --> 00:00:31.899
I want to be writing code, I don't want to
be wrestling trying to get things to work.

9
00:00:33.950 --> 00:00:38.680
And hot module reload you tend to have to
wrestle with a little bit, a lot actually.

10
00:00:38.680 --> 00:00:42.280
And most importantly it doesn't work with
stateless functional components, and I

11
00:00:42.280 --> 00:00:46.430
love stateless functional components, and
I'm not willing to give those up right.

12
00:00:46.430 --> 00:00:48.446
Again when I'm talking about
stateless functional components,

13
00:00:48.446 --> 00:00:50.030
I'm talking about components
that look like this.

14
00:00:51.110 --> 00:00:54.448
Reason being is that hot module reload
doesn't have the opportunity to instrument

15
00:00:54.448 --> 00:00:56.508
these, right,
because they are just functions.

16
00:00:58.953 --> 00:01:01.754
&gt;&gt; Brian: Hot Module Reload doesn't have a
way to hook into these to basically allow

17
00:01:01.754 --> 00:01:02.760
you to hot module reload.

18
00:01:04.460 --> 00:01:06.190
Now what is hot module reload?

19
00:01:06.190 --> 00:01:09.570
The basic gist of what hot module
reload is, say I went in here, and

20
00:01:09.570 --> 00:01:13.030
I changed the title of svideo
in my code and I click save.

21
00:01:14.080 --> 00:01:17.080
What Webpack is gonna do is it opens
a connection to your browser and

22
00:01:17.080 --> 00:01:20.450
says, here's new code that he just saved.

23
00:01:20.450 --> 00:01:24.030
It doesn't reload the page,
it actually hot,

24
00:01:24.030 --> 00:01:27.330
on the fly reloads your
code in the browser.

25
00:01:27.330 --> 00:01:29.415
And that's pretty compelling,

26
00:01:29.415 --> 00:01:34.500
bcause you no longer have to refresh your
page to get your changes right away.

27
00:01:34.500 --> 00:01:38.512
So if you're like, excuse me, when I'm
working on a drop down where you have

28
00:01:38.512 --> 00:01:42.216
to click and then click again and
then click again to get to the state that

29
00:01:42.216 --> 00:01:45.983
you need to test, that's super useful
because you can just see your code

30
00:01:45.983 --> 00:01:50.410
changing without having to click in every
single time you refresh the page, right.

31
00:01:50.410 --> 00:01:54.778
And when you're doing user interface
testing, maintaining that state is

32
00:01:54.778 --> 00:01:58.464
a really useful way to maintain
their mental context, right?

33
00:01:58.464 --> 00:02:00.901
There's a tool called
Live Reload that does it for

34
00:02:00.901 --> 00:02:04.222
CSS, which I would suggest you all
use when you're doing your CSS.

35
00:02:04.222 --> 00:02:07.254
That does the same idea that every time
you save your CSS it just reloads it

36
00:02:07.254 --> 00:02:10.043
in the browser, and you don't
actually have to refresh the page.

37
00:02:10.043 --> 00:02:13.249
Hot module reload is the same idea,
but with JavaScript.

38
00:02:14.390 --> 00:02:16.480
So it does work

39
00:02:18.040 --> 00:02:20.630
decently well if everything is not
stateless functional component.

40
00:02:23.120 --> 00:02:26.000
You do have to instrument your code
a little bit to get it to work, but

41
00:02:26.000 --> 00:02:30.710
it's not terrible, so
I'll leave it up to you to implement it.

42
00:02:30.710 --> 00:02:34.530
It's a little bit of a pain and to be
totally honest with you that the author of

43
00:02:34.530 --> 00:02:38.270
Hot Module Reload for React is this is
the same guy that did redux, Dan Abramov,

44
00:02:38.270 --> 00:02:41.630
who is not only a really nice guy but
is super super smart.

45
00:02:43.110 --> 00:02:46.240
He says himself the hot module reload for
react is a hack.

46
00:02:46.240 --> 00:02:51.980
It's a great hack, but
it's still a hack, and I tend to agree.

47
00:02:51.980 --> 00:02:55.510
He has a new tech coming out
called battle transform.

48
00:02:55.510 --> 00:03:00.040
That'll work kind of the same way just in
different method, that'll work better.

49
00:03:00.040 --> 00:03:02.600
But that's still a emerging technology.

50
00:03:02.600 --> 00:03:08.110
So it was too alpha E for me to feel
comfortable talking about today, so

51
00:03:08.110 --> 00:03:12.610
I'll leave that to your own devices
just I don't personally use it.

52
00:03:12.610 --> 00:03:15.552
Again, because I don't wanna
wrestle with my tools, but

53
00:03:15.552 --> 00:03:18.144
once you get it working it
actually is pretty cool.

54
00:03:18.144 --> 00:03:21.925
Any questions on hot module reload?

55
00:03:21.925 --> 00:03:26.944
With the caveat that I
haven't used it extensively,

56
00:03:26.944 --> 00:03:31.527
so I don't have too much knowledge on it,
okay.

57
00:03:31.527 --> 00:03:35.237
&gt;&gt; Speaker 2: So there is a functional
stateless components when you use them

58
00:03:35.237 --> 00:03:36.710
with the module reload?

59
00:03:36.710 --> 00:03:37.290
&gt;&gt; Brian: They just don't refresh.

60
00:03:40.920 --> 00:03:43.714
Yeah, that's the that's the gist of that.

61
00:03:43.714 --> 00:03:48.597
Which is really frustrating that some
components will reload and some won't.

62
00:03:48.597 --> 00:03:52.152
And that cognitive load of trying to
figure out which ones will reload

63
00:03:52.152 --> 00:03:54.370
which ones won't is not worth it, right?

64
00:03:54.370 --> 00:03:56.770
Because if you have a stateless
functional component above it,

65
00:03:56.770 --> 00:03:58.920
that won't refresh unless
everything's broken.

66
00:03:58.920 --> 00:04:02.990
You can have functions or
state full components underneath it,

67
00:04:02.990 --> 00:04:04.960
and those won't reload either
because the parent won't reload.

68
00:04:07.145 --> 00:04:14.370
I think, again,
Iâ€™m not super sure, but itâ€™s okay.

69
00:04:14.370 --> 00:04:15.099
That's a good question.

70
00:04:15.099 --> 00:04:17.475
From Erica is hot module reload
appear they're reacting?

71
00:04:17.475 --> 00:04:19.915
It's not.

72
00:04:19.915 --> 00:04:24.735
It's a Web pack thing, and
anything that plugs in a web pack can.

73
00:04:24.735 --> 00:04:28.320
As far as I know react is really
the only one working on it like

74
00:04:28.320 --> 00:04:31.644
their little community that
cares about it right now.

75
00:04:31.644 --> 00:04:34.276
That might be true of maybe
Angular 2 might do it.

76
00:04:34.276 --> 00:04:38.605
I don't know anything about Angular 2,
so don't ask me.

77
00:04:38.605 --> 00:04:41.160
But it's a Web pack thing, anything
they can plug in the web pack can do it.

78
00:04:41.160 --> 00:04:47.000
So I just haven't heard anyone
else doing it yet, and I think it

79
00:04:47.000 --> 00:04:50.920
has to do with the architecture of react
that it lends itself to hot module reload.

80
00:04:50.920 --> 00:04:57.330
Angular one definitely just would not
be able to, it's two coupled together.

81
00:04:57.330 --> 00:05:00.885
Well I'm not gonna assert
that it can't be done,

82
00:05:00.885 --> 00:05:04.169
I'm just gonna assert that it isn't
being done, and it would be hard to do.

