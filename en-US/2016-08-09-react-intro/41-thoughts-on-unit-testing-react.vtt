WEBVTT

1
00:00:00.025 --> 00:00:00.863
&gt;&gt; [MUSIC]

2
00:00:00.863 --> 00:00:06.902
&gt;&gt; Brian Holt: Here's my
opinion on unit testing react.

3
00:00:06.902 --> 00:00:09.040
I never do it, absolutely never.

4
00:00:09.040 --> 00:00:12.920
Our UI code and Netflix's is evolving so

5
00:00:12.920 --> 00:00:16.760
quickly that if we write unit tests for
reactor they're already out of date.

6
00:00:16.760 --> 00:00:20.110
And so trying to keep up with
that is just horrendous.

7
00:00:21.320 --> 00:00:24.820
Now as you can see it's actually
not too bad to do here.

8
00:00:24.820 --> 00:00:27.147
So if you're okay with writing tests and

9
00:00:27.147 --> 00:00:30.716
then throwing away pretty quickly
then by all means go for it.

10
00:00:30.716 --> 00:00:34.440
Or if you have mark up on pages
that doesn't change very often then

11
00:00:34.440 --> 00:00:36.030
also really good.

12
00:00:36.030 --> 00:00:39.260
That's just not the case for
how we do things at Netflix.

13
00:00:39.260 --> 00:00:42.740
And beyond that we're A/B tests all the
time that like sometimes they'll be shown,

14
00:00:42.740 --> 00:00:43.540
sometimes we'll be not.

15
00:00:43.540 --> 00:00:46.219
So you get these just weird broken,
the worst thing is,

16
00:00:46.219 --> 00:00:49.706
the only thing worse than not having
unit tests is having bad unit tests.

17
00:00:49.706 --> 00:00:53.144
Because then you have these tests that
you're kind of relying on and then not.

18
00:00:53.144 --> 00:00:56.710
And it's just terribly and you wasted
a bunch of time to write them as well.

19
00:00:56.710 --> 00:00:57.520
&gt;&gt; Speaker 2: How does,

20
00:00:57.520 --> 00:01:01.560
how do you deal with regressions then?
&gt;&gt; Brian Holt: So the way that we deal

21
00:01:01.560 --> 00:01:04.512
with regressions is everything
that's more business type logic.

22
00:01:04.512 --> 00:01:13.070
Anything that's, if this uses a non-member
then give them this data sorta thing.

23
00:01:13.070 --> 00:01:14.210
We will put those into modules.

24
00:01:14.210 --> 00:01:16.559
We'll will rip them out of react and
we'll put them into modules.

25
00:01:16.559 --> 00:01:18.221
And we test the hell out of the modules.

26
00:01:18.221 --> 00:01:21.480
So it's not that we don't test any UI
code, we just don't test our react.

27
00:01:21.480 --> 00:01:24.100
We don't test the things
that generate markup.

28
00:01:24.100 --> 00:01:27.840
We test the things that generate
data that then get put in to react.

29
00:01:27.840 --> 00:01:33.268
So we basically externalized all of those
things that we can and then we test those.

30
00:01:33.268 --> 00:01:37.227
The business logic, the everything
that's not generating the markup.

31
00:01:37.227 --> 00:01:44.810
And we try and keep our react components
relatively free of that kind of logic.

32
00:01:44.810 --> 00:01:48.412
So, and again because those
can be reused everywhere.

33
00:01:48.412 --> 00:01:55.379
Once you write that module it's then very
useful to be pulled into other places.

34
00:01:55.379 --> 00:02:00.460
And I'll also say that there are people
at Netflix that do test the react.

35
00:02:00.460 --> 00:02:01.890
And it's totally, it's acceptable.

36
00:02:02.910 --> 00:02:03.900
I just choose not to.

37
00:02:03.900 --> 00:02:06.910
I choose to pull everything
out test that and

38
00:02:06.910 --> 00:02:12.190
then let my UI code be the way it is.

39
00:02:14.360 --> 00:02:17.320
We also have a tool at Netflix
called Hydra that is open source.

40
00:02:17.320 --> 00:02:21.742
There's a nice little article in the
Netflix tech blog about Hydra that goes

41
00:02:21.742 --> 00:02:25.543
through every possible state of
your UI and takes a screen shot and

42
00:02:25.543 --> 00:02:26.530
sends it to you.

43
00:02:26.530 --> 00:02:31.352
So we can pull up our UI in Chinese and
for a non-member.

44
00:02:31.352 --> 00:02:33.883
And then we can see this
looks broken in Chinese or

45
00:02:33.883 --> 00:02:38.240
this looks really broken in Japanese when
they're remember something like that.

46
00:02:38.240 --> 00:02:40.571
That's very useful because then
you can just take a glance and

47
00:02:40.571 --> 00:02:43.070
say yep that looks broken or
yep that looks okay.

48
00:02:43.070 --> 00:02:47.525
And that's useful.
&gt;&gt; Brian Holt: But

49
00:02:47.525 --> 00:02:53.240
I have found unit testing my markup
has not yielded great results for

50
00:02:53.240 --> 00:02:58.710
me so I just simply elect not to but
now you know how to.

51
00:02:58.710 --> 00:03:01.560
And you can do it on your
own if you feel like that's,

52
00:03:01.560 --> 00:03:05.910
I want you to make your own
opinion don't just follow mine.

53
00:03:05.910 --> 00:03:10.120
The other thing I'll say is that's an
unpopular decision, an unpopular opinion.

54
00:03:10.120 --> 00:03:14.785
I would say the general react community
would disagree with me as well.

55
00:03:14.785 --> 00:03:19.269
So, I'm winning over
converts though slowly but

56
00:03:19.269 --> 00:03:24.158
surely.
&gt;&gt; Speaker 2: There's a question on are we

57
00:03:24.158 --> 00:03:28.671
gonna cover testing stateful components?
&gt;&gt; Brian Holt: We

58
00:03:28.671 --> 00:03:32.274
search is a stateful component so
we already did.

59
00:03:32.274 --> 00:03:36.319
[LAUGH] Cuz we were doing
the change events and

60
00:03:36.319 --> 00:03:42.450
then we fired off the change and
tested to see if that still worked.

61
00:03:42.450 --> 00:03:49.500
And then, we indirectly tested the show
cards with our state lists as well.

62
00:03:49.500 --> 00:03:53.697
So we kinda did both.
&gt;&gt; Speaker 2: And

63
00:03:53.697 --> 00:03:58.110
then is Hydro also useful for testing CSS?
&gt;&gt; Brian Holt: In the sense that you can

64
00:03:58.110 --> 00:03:59.560
look and
see if your page looks broken or not.

65
00:03:59.560 --> 00:04:02.850
It doesn't actually do any
assertions like this, this, this.

66
00:04:02.850 --> 00:04:07.536
It's literally just rendering the page,
taking a screenshot and showing it to you.

67
00:04:14.803 --> 00:04:17.202
&gt;&gt; Brian Holt: Yeah, so it's purely,

68
00:04:17.202 --> 00:04:19.953
it's very human oriented.

69
00:04:19.953 --> 00:04:21.897
Even if it's broken,
it doesn't say this is broken.

70
00:04:21.897 --> 00:04:24.262
It just sends you a screenshot
of everything and so

71
00:04:24.262 --> 00:04:27.630
you can just at a glance see does
anything look broken in front of me?

72
00:04:27.630 --> 00:04:29.110
No, okay, move on.

73
00:04:30.540 --> 00:04:32.100
I know we've talked about
using machine learning and

74
00:04:32.100 --> 00:04:34.778
machine vision to automate that process.

75
00:04:34.778 --> 00:04:39.368
But it's a, as you might imagine it's a
pretty difficult problem to solve that we

76
00:04:39.368 --> 00:04:44.310
haven't solved really yet, so.
&gt;&gt; Brian Holt: Cool,

77
00:04:44.310 --> 00:04:47.956
other questions?
&gt;&gt; Speaker 3: Does coverage

78
00:04:47.956 --> 00:04:52.360
kinda seem like misguided with
the metrics it's giving you?

79
00:04:52.360 --> 00:04:57.260
In a way if it's saying 90%
of your code is uncovered?

80
00:04:57.260 --> 00:05:00.570
It's looking at it but
it's not necessarily looking at

81
00:05:00.570 --> 00:05:03.220
what it needs to be looking at?
&gt;&gt; Brian Holt: Yes,

82
00:05:03.220 --> 00:05:07.670
I totally agree with what
you're saying that it's.

83
00:05:07.670 --> 00:05:10.810
People again they feel like if
I have 100% code coverage then

84
00:05:10.810 --> 00:05:12.280
I'm a okay working okay.

85
00:05:12.280 --> 00:05:18.580
And which is why I think it's interesting
but not actually terribly useful.

86
00:05:18.580 --> 00:05:23.800
I mean it's useful in the sense that it
at least lets know that all this code

87
00:05:23.800 --> 00:05:30.330
is getting run at least and it's giving
me back result that's what I expect.

88
00:05:30.330 --> 00:05:33.900
So if you are, if you have that
in mind then yes it's useful.

89
00:05:33.900 --> 00:05:37.920
But I also find that you don't necessarily
need to test all of your error cases and

90
00:05:37.920 --> 00:05:39.990
all your catch blocks and
all that kind of stuff either.

91
00:05:39.990 --> 00:05:43.100
So I don't tend to pay
too much attention to our

92
00:05:43.100 --> 00:05:44.517
code coverage.
&gt;&gt; Speaker 4: So

93
00:05:44.517 --> 00:05:47.959
we've always had the approach of just
watching it trend over time as you're

94
00:05:47.959 --> 00:05:49.157
adding production code.

95
00:05:49.157 --> 00:05:53.301
Make sure coverage isn't falling but
try not to enforce it.

96
00:05:53.301 --> 00:05:57.900
Some people will say you have to hit 70%
but, that literally gives you nothing.

97
00:05:57.900 --> 00:05:59.128
The quality of your tests

98
00:05:59.128 --> 00:06:01.694
aren't determined by coverage.
&gt;&gt; Speaker 5: Yeah,

99
00:06:01.694 --> 00:06:06.429
I had this discussion actually recently
with a coworker, where he was at 50%, and

100
00:06:06.429 --> 00:06:10.470
he said to get up to 70, I just check
to see if variables were existing.

101
00:06:10.470 --> 00:06:11.003
&gt;&gt; Speaker 4: Right, so

102
00:06:11.003 --> 00:06:14.810
people will kinda game the system when
we get into enforcing percentage.

103
00:06:14.810 --> 00:06:17.117
&gt;&gt; Brian Holt: Yep, so it's definitely,

104
00:06:17.117 --> 00:06:21.950
it's just an interesting
side metric to look at.

105
00:06:21.950 --> 00:06:24.090
And the other thing is it's so
easy to set up.

106
00:06:24.090 --> 00:06:26.810
Once you have tests you just throw
in NYC and it's pretty much done.

107
00:06:27.930 --> 00:06:32.163
So you might as well.
&gt;&gt; Brian Holt: Yeah.

108
00:06:32.163 --> 00:06:34.725
&gt;&gt; Speaker 6: So I've not done any unit

109
00:06:34.725 --> 00:06:37.970
testing prior to this.

110
00:06:37.970 --> 00:06:41.360
So what I'm trying to wrap
my head around is obviously,

111
00:06:41.360 --> 00:06:46.120
I can test functionality of my code but
when it comes to say a function that's

112
00:06:46.120 --> 00:06:49.180
maybe supposed to take in currency and
generated output,

113
00:06:49.180 --> 00:06:53.380
I could go crazy trying to look for
is this accurate in all these cases.

114
00:06:53.380 --> 00:06:54.690
What's kind of the line there?

115
00:06:54.690 --> 00:06:59.990
Are you sort of just looking for
basic functionality and those edge cases

116
00:06:59.990 --> 00:07:03.560
are all dealt with somewhere else or?
&gt;&gt; Brian Holt: You're

117
00:07:03.560 --> 00:07:06.710
definitely getting into like
the philosophy of testing here.

118
00:07:06.710 --> 00:07:09.660
And it very much varies
from person to person.

119
00:07:09.660 --> 00:07:12.640
And as you probably have figured out by
now I'm not a great person to ask cuz I'm

120
00:07:12.640 --> 00:07:17.260
pretty like test the minimal amount and
move on.

121
00:07:17.260 --> 00:07:18.740
My personal philosophy,

122
00:07:18.740 --> 00:07:23.555
which again take it your own risk,
is test the happy path for sure.

123
00:07:23.555 --> 00:07:28.114
Make sure that everything the way
it should work does work.

124
00:07:28.114 --> 00:07:34.310
Test edge cases that you see being
frequent, or very possible or

125
00:07:34.310 --> 00:07:37.580
basically if you expect errors will
sometimes occur here, test that.

126
00:07:37.580 --> 00:07:42.610
And then after that wait till it breaks
and then once it breaks, fix it.

127
00:07:42.610 --> 00:07:45.420
Add a unit test so that it won't
happen again, and then move on.

128
00:07:47.780 --> 00:07:51.540
That for me works because I get to write
the least amount of unit tests possible.

129
00:07:51.540 --> 00:07:54.310
And then it will regress at some point,
but

130
00:07:54.310 --> 00:07:56.490
then I prevent that regression
from happening again.

131
00:07:56.490 --> 00:08:01.790
It works for me and
that's totally up to you to decide,

132
00:08:01.790 --> 00:08:04.930
and read other people's stuff and
figure out your own opinion.

133
00:08:06.275 --> 00:08:10.431
Definitely don't just follow by,
&gt;&gt; Brian Holt: Good

134
00:08:10.431 --> 00:08:14.389
question.
&gt;&gt; Brian Holt: Other

135
00:08:14.389 --> 00:08:19.988
questions?
&gt;&gt; Brian Holt: Okay so we are gonna

136
00:08:19.988 --> 00:08:24.995
break these unit tests as we write more
code and we will come back and fix them.

