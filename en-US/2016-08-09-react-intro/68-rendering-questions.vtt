WEBVTT

1
00:00:00.000 --> 00:00:04.556
[MUSIC]

2
00:00:04.556 --> 00:00:05.627
&gt;&gt; Speaker 1: Question on in express,

3
00:00:05.627 --> 00:00:07.979
how would you pass data from
a request object to react?

4
00:00:11.329 --> 00:00:15.394
&gt;&gt; Brian Holt: That's a good question.

5
00:00:15.394 --> 00:00:22.910
So, one thing I do want to before I answer
that question that I want to stress here.

6
00:00:22.910 --> 00:00:27.320
I wonder if I can actually show you,
so let's go to landing.jsx.

7
00:00:27.320 --> 00:00:31.850
What I wanna stress is that you wanna make
sure that whatever you're rendering on

8
00:00:31.850 --> 00:00:36.125
the server is also exactly what you're
going to be rendering on the client or

9
00:00:36.125 --> 00:00:38.400
React's gets really pissed at you.

10
00:00:38.400 --> 00:00:41.540
So I'm gonna do that right now.

11
00:00:41.540 --> 00:00:46.350
Here in the svideo,
I'm gonna say instead of that Math.random.

12
00:00:46.350 --> 00:00:53.600
All right,
that's the name of the function.

13
00:00:54.850 --> 00:01:03.080
Make sure of that, Math.random, yep, cool.

14
00:01:03.080 --> 00:01:03.960
So what this is gonna do,

15
00:01:03.960 --> 00:01:06.930
this is just return a random
number between zero and one.

16
00:01:07.960 --> 00:01:12.796
But the property I wanna exploit here is
it's gonna be different every single time.

17
00:01:12.796 --> 00:01:15.410
So it's gonna be different on the server
than it is on the client, right?

18
00:01:15.410 --> 00:01:18.627
Because it's gonna be running
Math.random two separate times and

19
00:01:18.627 --> 00:01:21.400
React's are gonna get really
pissed at us for doing this.

20
00:01:23.850 --> 00:01:30.690
So first of all, start and stop this
again, which I probably didn't have to.

21
00:01:30.690 --> 00:01:37.180
No, I did.
Okay, so here, now if I go to landing.

22
00:01:38.940 --> 00:01:41.250
Notice that it got really
pissed at me here,

23
00:01:41.250 --> 00:01:44.583
cuz it said React tried to do this and
you messed it up [LAUGH].

24
00:01:44.583 --> 00:01:48.929
And the way that does this
is React has a checksum,

25
00:01:48.929 --> 00:01:53.130
it basically hashes your entire
app into one checksum and

26
00:01:53.130 --> 00:01:56.350
if those checksum don't match up on
the server and on the client, It

27
00:01:56.350 --> 00:02:00.300
says well you messed it up I'm gonna blow
away your entire client and try again.

28
00:02:02.930 --> 00:02:05.490
So, I said that to address his or

29
00:02:05.490 --> 00:02:10.500
her question because you don't wanna be
mucking too much on the server with it,

30
00:02:10.500 --> 00:02:13.880
unless you're sure that whatever
your rendering on the server and

31
00:02:13.880 --> 00:02:16.390
whatever you're running on the client
is gonna end up being the same.

32
00:02:18.090 --> 00:02:20.690
So, all of this to say

33
00:02:22.610 --> 00:02:25.950
coming back here let's get rid of
this because we don't want that.

34
00:02:25.950 --> 00:02:28.700
First of all does that makes
sense of why you need to make

35
00:02:28.700 --> 00:02:31.160
sure that what you're doing on the client
and on the server is the same.

36
00:02:32.530 --> 00:02:36.900
The reason why is you lose all
the performance gains because if you

37
00:02:36.900 --> 00:02:38.810
render on the server and
then send it down and

38
00:02:38.810 --> 00:02:42.990
the checksums match, React does not blow
away the DOM and render something new.

39
00:02:42.990 --> 00:02:47.440
It actually just quietly takes
over what's already there.

40
00:02:47.440 --> 00:02:50.620
If you mess it up and they are different,
Reacts well screw this and

41
00:02:50.620 --> 00:02:52.880
blows the entire thing away and
creates a whole new thing,

42
00:02:52.880 --> 00:02:56.480
which is slower, less performant and
kind of just defeating the whole point.

43
00:02:58.450 --> 00:03:05.040
Okay, let me let me finish my thought and
then I'll address your questions.

44
00:03:05.040 --> 00:03:08.120
So to answer the question,
which I totally sidestepped and

45
00:03:08.120 --> 00:03:12.890
I meant to answer is how do you pass
stuff in from express to react.

46
00:03:12.890 --> 00:03:16.606
It's I mean the wrong one.js.

47
00:03:16.606 --> 00:03:21.214
See here I'm passing store and here's
stuff to I can actually just as have to

48
00:03:21.214 --> 00:03:25.890
render props and then actually get
perpetuated down to the client.

49
00:03:25.890 --> 00:03:29.520
So, you just have to make sure that
that ends up both on the client and

50
00:03:29.520 --> 00:03:32.310
on the server so
that's what I wanted to say.

51
00:03:32.310 --> 00:03:34.421
Yeah what's was your question?

52
00:03:34.421 --> 00:03:38.019
&gt;&gt; Speaker 3: So, when I'm on
the details page or one of them and

53
00:03:38.019 --> 00:03:42.140
I refresh all the styles
everything from public errors.

54
00:03:43.480 --> 00:03:47.850
&gt;&gt; Brian Holt: The reason you need to
change as well as go to index.HTML and

55
00:03:47.850 --> 00:03:53.130
put these as slash as well,
and actually public as well.

56
00:03:53.130 --> 00:03:56.930
Yeah, cuz it's doing relative paths and
we can't do relative paths anymore.

57
00:03:56.930 --> 00:03:57.670
That's a good catch.

58
00:04:00.210 --> 00:04:02.510
Yeah, they need to be /public.

59
00:04:02.510 --> 00:04:05.080
The reason I was working before for
me is cuz it was cached.

60
00:04:09.103 --> 00:04:11.440
&gt;&gt; Brian Holt: So that should work now.

61
00:04:11.440 --> 00:04:12.779
I have to restart and stuff.

62
00:04:16.656 --> 00:04:21.865
&gt;&gt; Brian Holt: Just so you know,
so if you haven't already do,

63
00:04:21.865 --> 00:04:26.360
npm install -g nodemon like this.

64
00:04:26.360 --> 00:04:28.780
It's annoying to start and
stop your server every time.

65
00:04:28.780 --> 00:04:34.380
Nodemon will just do that for
you or nodemon.

66
00:04:34.380 --> 00:04:37.760
I've heard a lot of people
argue how you say this.

67
00:04:37.760 --> 00:04:39.900
The idea is a demon is something
that runs in the background.

68
00:04:39.900 --> 00:04:41.680
This is the nodemon right.

69
00:04:41.680 --> 00:04:43.045
That's the idea.

70
00:04:43.045 --> 00:04:50.093
So I'm gonna say instead of
nodeapp.js I said nodemonapp.js.

71
00:04:50.093 --> 00:04:50.971
It actually does a watch for you.

72
00:04:50.971 --> 00:04:53.690
So any time I change something,
it just restarts my server automatically.

73
00:04:53.690 --> 00:04:56.149
That's the idea, okay.

74
00:05:01.515 --> 00:05:02.950
&gt;&gt; Brian Holt: So now if I refresh this.

75
00:05:02.950 --> 00:05:04.150
It should be okay again.

76
00:05:04.150 --> 00:05:05.440
I should go to Browse All.

77
00:05:05.440 --> 00:05:08.678
Daredevil and refresh,
everything should be happy again.

78
00:05:08.678 --> 00:05:10.728
Okay, cool.

79
00:05:14.438 --> 00:05:19.250
&gt;&gt; Brian Holt: All right,
other questions before I move on?

80
00:05:21.120 --> 00:05:22.810
&gt;&gt; Speaker 1: The question
I had queued up was, so

81
00:05:22.810 --> 00:05:26.799
were specifically can you not use dynamic
values versus where can you use them?

82
00:05:28.210 --> 00:05:31.000
&gt;&gt; Brian Holt: I mean that's
a far reaching question.

83
00:05:31.000 --> 00:05:35.843
The real answer to that question is, if
you're gonna be using dynamic values from

84
00:05:35.843 --> 00:05:40.489
the server you just have to make sure that
they are available in the client too.

85
00:05:40.489 --> 00:05:43.530
And there's any number of ways that you
can make sure that that's the case.

86
00:05:46.010 --> 00:05:49.630
Hopefully, that sufficiently vague, but
it's also kind of a vague question.

87
00:05:49.630 --> 00:05:54.700
So, [LAUGH] just make sure that whatever's
available in your node environment.

88
00:05:54.700 --> 00:05:56.740
It's tough to say without
a concrete example.

