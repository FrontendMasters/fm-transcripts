WEBVTT

1
00:00:00.000 --> 00:00:03.881
[MUSIC]

2
00:00:03.881 --> 00:00:05.505
&gt;&gt; Brian Holt: We're
gonna make app select,

3
00:00:05.505 --> 00:00:08.620
which details to send down
which show to send down.

4
00:00:08.620 --> 00:00:11.550
Like that feels like
the right code path to me,

5
00:00:11.550 --> 00:00:13.260
but you're welcome to disagree with me.

6
00:00:13.260 --> 00:00:16.594
But I think this is a pretty
nice way of doing it.

7
00:00:16.594 --> 00:00:21.492
So the first thing is now that
app is gonna have a method,

8
00:00:21.492 --> 00:00:25.960
we're gonna have to make this not
a stateless functional component anymore.

9
00:00:25.960 --> 00:00:32.275
It does have to be either a create class
or a ES6 class, up to you to choose.

10
00:00:32.275 --> 00:00:33.255
You can choose either one.

11
00:00:33.255 --> 00:00:36.185
I'm okay,
I think let's just do create class.

12
00:00:36.185 --> 00:00:42.462
I feel like that's the easier one,
react.createClass.

13
00:00:50.721 --> 00:00:52.860
&gt;&gt; Brian Holt: This is gonna
all get indented a little bit.

14
00:00:52.860 --> 00:00:56.196
See, put this here.

15
00:01:02.965 --> 00:01:04.900
&gt;&gt; Brian Holt: That's about right.

16
00:01:04.900 --> 00:01:09.845
We're gonna say turn this, and

17
00:01:09.845 --> 00:01:14.982
this is gonna be a render method.

18
00:01:17.030 --> 00:01:20.810
&gt;&gt; Brian Holt: And I indented too much.

19
00:01:30.610 --> 00:01:37.390
There, there, there, okay, so we just
converted this to be a React.createClass.

20
00:01:37.390 --> 00:01:38.550
Again, you can use ES6 here.

21
00:01:38.550 --> 00:01:43.340
You need one of the two, though.

22
00:01:43.340 --> 00:01:49.673
&gt;&gt; Brian Holt: And so
now that we've done that we're going

23
00:01:49.673 --> 00:01:54.808
to give it an assigned show method,

24
00:01:54.808 --> 00:02:00.985
and it takes in the next state and
replace.

25
00:02:06.642 --> 00:02:11.821
&gt;&gt; Brian Holt: And then, what we're going
to do here on our route on details,

26
00:02:11.821 --> 00:02:16.122
were gonna give it an onEnter method,
onEnter, and

27
00:02:16.122 --> 00:02:19.082
it's gonna be this.assignShow.

28
00:02:23.197 --> 00:02:27.172
&gt;&gt; Brian Holt: So every time this route
goes to enter, as every time the router

29
00:02:27.172 --> 00:02:32.000
goes to enter this particular route,
it's gonna run this onEnter method.

30
00:02:32.000 --> 00:02:35.070
Now the advantage here is,
notice we're getting nextState?

31
00:02:35.070 --> 00:02:37.720
We get to manipulate this before
it get's sent down to the route,

32
00:02:37.720 --> 00:02:39.120
which is kind of cool, right?

33
00:02:39.120 --> 00:02:41.570
So what we're going to do is like while
it's in transit to the details route,

34
00:02:41.570 --> 00:02:42.530
we're just like, hey,

35
00:02:42.530 --> 00:02:46.244
here's a tag along show that you just
pass that down on tp the route too.

36
00:02:48.650 --> 00:02:50.715
&gt;&gt; Brian Holt: And
don't follow my notes here,

37
00:02:50.715 --> 00:02:54.570
because I've recently discovered
that there is a bug here.

38
00:02:54.570 --> 00:02:57.386
So we have to be a little bit
more clever than my notes are.

39
00:02:57.386 --> 00:03:01.737
So, I had to remember,

40
00:03:01.737 --> 00:03:07.910
this is programming on the fly.

41
00:03:07.910 --> 00:03:14.400
Okay, so basically we're gonna have an ID,
which is gonna be the IMDB ID.

42
00:03:15.490 --> 00:03:22.680
And we're going to match that
to the particular route.

43
00:03:22.680 --> 00:03:27.776
So what we're gonna do here is were

44
00:03:27.776 --> 00:03:33.413
gonna say constshow = shows.filter

45
00:03:37.353 --> 00:03:40.929
And then we're gonna have
to give that a method, and

46
00:03:40.929 --> 00:03:44.357
that's gonna be show,
and we're gonna return,

47
00:03:49.275 --> 00:03:54.957
Gonna return show.imdbID.

48
00:03:54.957 --> 00:03:57.705
Let me remember how that looks.

49
00:03:57.705 --> 00:03:59.490
&gt;&gt; Speaker 2: [INAUDIBLE] ID capitalized.

50
00:03:59.490 --> 00:04:01.040
&gt;&gt; Brian Holt: Capitalized, okay.

51
00:04:01.040 --> 00:04:04.524
So this has to be capitalized,

52
00:04:04.524 --> 00:04:08.680
===nextState.ID, bless you.

53
00:04:08.680 --> 00:04:14.504
Okay, we're gonna have to check to
make sure that this is correct,

54
00:04:14.504 --> 00:04:17.772
but basically we're getting an IMD,

55
00:04:17.772 --> 00:04:22.471
a show, sorry we're getting next state,
right, and

56
00:04:22.471 --> 00:04:28.530
the next state already has ID and
ID's coming from here, right?

57
00:04:28.530 --> 00:04:31.011
So from whatever the URL
says we're going to.

58
00:04:33.381 --> 00:04:38.187
&gt;&gt; Brian Holt: And so we're just gonna do
a quick check to see if the IMDB ID for

59
00:04:38.187 --> 00:04:44.070
one of these shows is equal to the show
that we're looking for, right?

60
00:04:44.070 --> 00:04:51.400
So ideally this should filter out every
show in shows that does not have the same

61
00:04:51.400 --> 00:04:56.210
IMDB ID, so ideally, this will be
an array of one after we're done, right.

62
00:04:58.260 --> 00:04:59.400
So here we're gonna ask.

63
00:05:02.230 --> 00:05:04.950
Actually this is gonna be array,
just let's call it a show array,

64
00:05:04.950 --> 00:05:08.260
just to be very clear that
this is actually an array.

65
00:05:08.260 --> 00:05:15.010
I'm gonna say if (showArray.length &lt; 1).

66
00:05:15.010 --> 00:05:19.860
That means we've gave it a show
ID that doesn't exist, right?

67
00:05:19.860 --> 00:05:21.890
So we're gonna use this
replace method here.

68
00:05:21.890 --> 00:05:25.960
Because we can't display details for
a show that we don't have, right?

69
00:05:25.960 --> 00:05:30.850
So we're gonna say,
return replace('/'), right?

70
00:05:30.850 --> 00:05:34.430
So basically this says,
hey, if there's no shows,

71
00:05:34.430 --> 00:05:35.600
just send them back to the homepage.

72
00:05:35.600 --> 00:05:38.060
Typically, you'd send them a 404 page,
but we're not doing 404s here.

73
00:05:38.060 --> 00:05:40.540
We're just gonna send them
back to the homepage,

74
00:05:40.540 --> 00:05:42.040
if we can't find the show
they're looking for.

75
00:05:44.040 --> 00:05:48.184
Otherwise, we're gonna just do

76
00:05:48.184 --> 00:05:53.070
an Object.assign(next_state),

77
00:05:53.070 --> 00:05:56.780
nextState.params, show.

78
00:05:56.780 --> 00:05:59.147
And then here is going
to return next state.

79
00:06:00.170 --> 00:06:05.932
Okay so object.assign, some of you
might've seen this before, or you might've

80
00:06:05.932 --> 00:06:11.860
also seen underscored out of sign if you
use low dash or underscore very much.

81
00:06:11.860 --> 00:06:17.170
Basic just here is, I have two objects, I
want to take all of the properties in show

82
00:06:17.170 --> 00:06:23.440
and put them into next date,
nextState.params actually.

83
00:06:23.440 --> 00:06:27.913
Right, so if I have
&gt;&gt; Brian Holt: Right, so

84
00:06:27.913 --> 00:06:30.420
I need to do show array 0.

85
00:06:30.420 --> 00:06:33.120
Thank you,

86
00:06:34.470 --> 00:06:38.150
because now we can be definitely
sure at least one show matched it.

87
00:06:38.150 --> 00:06:40.220
It should be exactly one show, right?

88
00:06:40.220 --> 00:06:42.252
But if there are multiple
shows that matches,

89
00:06:42.252 --> 00:06:43.874
it's just gonna pick the first one.

90
00:06:46.198 --> 00:06:48.460
&gt;&gt; Brian Holt: And
then we're gonna to pop the top.

91
00:06:48.460 --> 00:06:51.706
So, I've just decided,

92
00:06:51.706 --> 00:06:57.470
does that makes sense
what's going on there.

93
00:07:00.320 --> 00:07:03.660
So maybe just a very brief demo.

94
00:07:03.660 --> 00:07:08.505
If I have var X equals {

95
00:07:08.505 --> 00:07:12.585
y: 1, z: 2},

96
00:07:12.585 --> 00:07:17.685
right, and I have var,

97
00:07:17.685 --> 00:07:22.785
I dunno, w = { a: 2,

98
00:07:22.785 --> 00:07:28.610
b: 3} and Y1 or Y5.

99
00:07:28.610 --> 00:07:36.205
And then if I do object.assign,

100
00:07:36.205 --> 00:07:44.341
X,W, if I do console.log X here,

101
00:07:44.341 --> 00:07:49.222
X is gonna be y5, and

102
00:07:49.222 --> 00:07:55.731
then it's going to be z2 and

103
00:07:55.731 --> 00:08:01.155
a2 and b3, right, so

104
00:08:01.155 --> 00:08:07.420
it's gonna basically go.

105
00:08:07.420 --> 00:08:12.110
It goes right to left, and it says
okay notice that these both have Y.

106
00:08:12.110 --> 00:08:14.920
So this one's Y wins, but
it's actually modifying X.

107
00:08:16.700 --> 00:08:18.837
But that's kinda the gist of what
objects assigned does for you,

108
00:08:18.837 --> 00:08:21.612
it's basically merging these two
objects together in a useful way.

109
00:08:21.612 --> 00:08:23.240
Yeah, question?

110
00:08:23.240 --> 00:08:25.803
&gt;&gt; Speaker 2: Question is what
is on inter for the route.

111
00:08:25.803 --> 00:08:29.460
&gt;&gt; Brian Holt: On enter is just going to
get run every single time this route,

112
00:08:29.460 --> 00:08:32.360
it's transitioned to this route
whether that's the first time or

113
00:08:32.360 --> 00:08:36.320
like you're on search and you enter
details, right, that's the basic gist of

114
00:08:36.320 --> 00:08:41.620
any time that it's entering the route
that math is gonna get run.

115
00:08:41.620 --> 00:08:43.544
&gt;&gt; Speaker 2: And
then they're asking what is nextState.

116
00:08:44.958 --> 00:08:47.640
&gt;&gt; Brian Holt: NextState is going to be

117
00:08:47.640 --> 00:08:52.400
the params that are gonna be passed
down to that particular route.

118
00:08:52.400 --> 00:08:55.950
So in this particular case
we have this ID, right, so

119
00:08:55.950 --> 00:08:59.990
that's going to be what's in the nextState
in this particular case right.

120
00:08:59.990 --> 00:09:05.135
But anything else that was being passed
down to details would be in nextState.

121
00:09:07.630 --> 00:09:10.430
So it should just be one object of ID,
and that should be about it.

122
00:09:14.570 --> 00:09:15.680
Other questions?

123
00:09:15.680 --> 00:09:17.539
Any question about objects
assigned before I delete this?

124
00:09:23.494 --> 00:09:25.005
&gt;&gt; Brian Holt: Cool, make sense?

125
00:09:25.005 --> 00:09:25.630
ES6, so

126
00:09:25.630 --> 00:09:28.290
you're welcome to go ahead and use that
in your every day JavaScript programming.

127
00:09:31.500 --> 00:09:34.350
Okay, very useful,
I use it all the time everywhere.

128
00:09:38.856 --> 00:09:41.510
&gt;&gt; Brian Holt: All right, let's go
make sure this actually works now,

129
00:09:41.510 --> 00:09:43.180
since I programmed this on the fly.

130
00:09:48.355 --> 00:09:52.524
&gt;&gt; Brian Holt: Let's go to Details.jsx.

131
00:09:55.360 --> 00:09:57.780
This is a good tangent to
go on really quick here.

132
00:09:58.820 --> 00:10:01.400
This is a personal, Brian Holt thing, but

133
00:10:01.400 --> 00:10:06.570
I noticed that many people in the React
community do the similar things that I do,

134
00:10:06.570 --> 00:10:10.759
just the way I organize
my React components,

135
00:10:10.759 --> 00:10:15.200
because your reactions are going
to end up having a ton of methods.

136
00:10:16.600 --> 00:10:19.050
The very first thing I always
put is get initial state.

137
00:10:19.050 --> 00:10:22.250
So I can always at the very top of my
method see where the initial states coming

138
00:10:22.250 --> 00:10:25.480
from, and then the very bottom
method is always render,

139
00:10:25.480 --> 00:10:28.380
so that I can always
scroll down to the bottom,

140
00:10:28.380 --> 00:10:31.270
cuz your render methods usually end
up being sometimes fairly large.

141
00:10:33.346 --> 00:10:36.850
Beneath get initial state I'll put
what are called the lifecycle methods,

142
00:10:36.850 --> 00:10:40.500
like component will mount, component
did mount, component will unmount.

143
00:10:40.500 --> 00:10:44.330
We'll talk about that a little
bit later in the class.

144
00:10:44.330 --> 00:10:48.370
And then under between render and
all the life cycle methods,

145
00:10:48.370 --> 00:10:50.210
I'll put all like my personal methods,
right?

146
00:10:50.210 --> 00:10:55.300
Like the handle search term event would be
an example of that or a sign show as well.

147
00:10:55.300 --> 00:10:58.595
That's kind of a life cycle one,
but anything that's a,

148
00:10:58.595 --> 00:11:05.120
yeah, some sort of like
personal one that I'm using.

149
00:11:05.120 --> 00:11:06.340
I'm creating.
I'll put that

150
00:11:06.340 --> 00:11:07.460
kinda there in the middle as well.

151
00:11:08.610 --> 00:11:12.950
There's no requirement around that I just
find it useful for code organization for

152
00:11:12.950 --> 00:11:16.870
react, and I notice a bunch of other
people are relatively similar in that.

153
00:11:19.670 --> 00:11:22.830
Okay, so go ahead.

154
00:11:22.830 --> 00:11:24.220
&gt;&gt; Speaker 2: We do have
a couple questions.

155
00:11:25.650 --> 00:11:30.490
So is this the same object that we saw
when were using the pre-code wrapping?

156
00:11:30.490 --> 00:11:32.450
Is that the state or the props object?

157
00:11:32.450 --> 00:11:33.530
&gt;&gt; Brian Holt: Props.

158
00:11:33.530 --> 00:11:34.310
It's a propped object.

159
00:11:34.310 --> 00:11:36.420
We have no state here yet, so.

160
00:11:38.250 --> 00:11:40.099
&gt;&gt; Speaker 2: And
then what is the value of replace?

161
00:11:41.110 --> 00:11:43.740
&gt;&gt; Brian Holt: Replace is a function,
that's worth mentioning.

162
00:11:43.740 --> 00:11:45.640
&gt;&gt; Speaker 2: Yeah, and where does it
come from, as a follow-up question?

163
00:11:45.640 --> 00:11:48.030
&gt;&gt; Brian Holt: It comes from react-router.

164
00:11:48.030 --> 00:11:52.460
So onEnter,
that's specific to react-router,

165
00:11:52.460 --> 00:11:54.740
and it just passes these props in.

166
00:11:54.740 --> 00:11:58.372
It replaces a method
coming from react-router.

167
00:11:58.372 --> 00:12:01.180
It says, hey I actually don't
want to go into this route,

168
00:12:01.180 --> 00:12:03.100
I want to go somewhere else.

169
00:12:03.100 --> 00:12:06.213
In this particular case, we're using it
because we don't want to enter the route

170
00:12:06.213 --> 00:12:07.850
if we don't have the details to display.

