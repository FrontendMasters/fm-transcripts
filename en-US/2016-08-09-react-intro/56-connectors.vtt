WEBVTT

1
00:00:00.000 --> 00:00:03.973
[MUSIC]

2
00:00:03.973 --> 00:00:07.717
&gt;&gt; Brian Holt: This next part we're
gonna make it easy to plug redux into

3
00:00:07.717 --> 00:00:09.590
react using react to redux.

4
00:00:11.330 --> 00:00:20.300
But any questions so far beyond that?
&gt;&gt; Brian Holt: All right.

5
00:00:22.880 --> 00:00:25.952
So, what we're gonna do is, we're gonna
create two different functions here.

6
00:00:25.952 --> 00:00:31.794
One of these we called mapStateToProps and
one is gonna be called mapDispatchToProps.

7
00:00:31.794 --> 00:00:38.408
mapStateToProps = (state).

8
00:00:42.770 --> 00:00:43.917
&gt;&gt; Brian Holt: And.

9
00:00:45.093 --> 00:00:46.188
&gt;&gt; Brian Holt: This expects an object, so

10
00:00:46.188 --> 00:00:48.530
if you remember that we're
gonna use these parenthesis.

11
00:00:48.530 --> 00:00:55.591
So that this is an implicit return.
&gt;&gt; Brian Holt: searchTerm:state.search

12
00:00:55.591 --> 00:01:05.222
term.
&gt;&gt; Brian Holt: Now

13
00:01:05.222 --> 00:01:11.292
what's actually happening here.
&gt;&gt; Brian Holt: When we actually

14
00:01:11.292 --> 00:01:16.800
we're gonna use react redux's ability to
plug components into the react's store.

15
00:01:19.550 --> 00:01:22.712
This is basically saying,
wherever I plug this into react,

16
00:01:22.712 --> 00:01:24.332
pass this in as props, right?

17
00:01:24.332 --> 00:01:30.250
So we're gonna pass the search term as.
&gt;&gt; Brian Holt: Okay,

18
00:01:30.250 --> 00:01:35.237
so we have state.searchTerm
in our redux store, right?

19
00:01:35.237 --> 00:01:37.837
We're gonna pass that in
to react as a search term,

20
00:01:37.837 --> 00:01:40.864
the name of the property is
going to be search term, right?

21
00:01:40.864 --> 00:01:45.022
So then, in whatever component I'm
gonna reference it from it's gonna be

22
00:01:45.022 --> 00:01:51.381
this.props.searchTerm.
&gt;&gt; Brian Holt: Right?

23
00:01:51.381 --> 00:01:52.060
Does that make sense?

24
00:01:53.140 --> 00:01:55.170
So the first part is
the name of the property.

25
00:01:55.170 --> 00:01:57.660
The second part is from
the state here right,

26
00:01:57.660 --> 00:02:02.700
the current state of the redux store,
the search term, right?

27
00:02:02.700 --> 00:02:04.240
That's what's happening here.

28
00:02:04.240 --> 00:02:07.460
If this looks a little confusing to you
feel free to flesh this out a little

29
00:02:07.460 --> 00:02:09.620
bit to be a little bit more clear.

30
00:02:09.620 --> 00:02:11.072
So, let's get rid of these parentheses,
and

31
00:02:11.072 --> 00:02:16.371
I'll just leave it this way
&gt;&gt; Brian Holt: Right,

32
00:02:16.371 --> 00:02:21.468
that's what's happening there.
&gt;&gt; Brian Holt: So

33
00:02:21.468 --> 00:02:26.705
that's just that function.
&gt;&gt; Brian Holt: Okay,

34
00:02:26.705 --> 00:02:29.000
so that's one half of this, right?

35
00:02:29.000 --> 00:02:31.890
We also wanna be able to
dispatch the actions very easily.

36
00:02:33.810 --> 00:02:38.875
So what we're gonna do
is we're gonna create

37
00:02:38.875 --> 00:02:43.955
what's called const mapDispatchToProps.

38
00:02:43.955 --> 00:02:49.786
And then we're gonna have
dispatch function here.

39
00:02:49.786 --> 00:02:52.077
And then we're gonna return
another object full of

40
00:02:52.077 --> 00:02:56.509
functions.
&gt;&gt; Brian Holt: So

41
00:02:56.509 --> 00:03:02.300
we're gonna create a property that we're
gonna pass into other redux type things.

42
00:03:02.300 --> 00:03:05.980
Not react,
we're gonna pass it into react components.

43
00:03:08.130 --> 00:03:12.436
Set search term.
&gt;&gt; Brian Holt: That takes a term,

44
00:03:12.436 --> 00:03:13.870
right, or a search term.

45
00:03:16.000 --> 00:03:17.860
You can call it search
term if you want to.

46
00:03:17.860 --> 00:03:18.670
Search term.

47
00:03:18.670 --> 00:03:26.929
This is another function.
&gt;&gt; Brian Holt: This is fine,

48
00:03:26.929 --> 00:03:30.140
too.
&gt;&gt; Brian Holt: And

49
00:03:30.140 --> 00:03:33.900
then we're just gonna call dispatch, which
is actually in a caller root reducer.

50
00:03:33.900 --> 00:03:38.260
You can think of dispatch
as the root reducer.

51
00:03:38.260 --> 00:03:40.821
I don't actually know if it's literally
the root reducer, it might be,

52
00:03:40.821 --> 00:03:42.492
it might be some sort of
layer of misdirection.

53
00:03:42.492 --> 00:03:45.530
But for your thinking about purposes,

54
00:03:45.530 --> 00:03:49.498
just think of dispatch as
the same as root reducer.

55
00:03:49.498 --> 00:03:50.307
Because ultimately,

56
00:03:50.307 --> 00:03:55.426
that's what you are going to see.
&gt;&gt; Brian Holt: Dispatch,

57
00:03:55.426 --> 00:03:58.600
and then we just have to follow this,
right?

58
00:03:58.600 --> 00:04:00.751
It's gonna expect a state and

59
00:04:00.751 --> 00:04:08.782
an action.
&gt;&gt; Brian Holt: So

60
00:04:08.782 --> 00:04:11.689
I guess that there is a layer of
misdirection, so it's gonna be type.

61
00:04:13.750 --> 00:04:16.370
Set search term, right,
which is what we're getting from up here.

62
00:04:16.370 --> 00:04:17.856
This is a type of action that we're

63
00:04:17.856 --> 00:04:22.256
gonna dispatch.
&gt;&gt; Brian Holt: And

64
00:04:22.256 --> 00:04:25.015
then here we're gonna
say value:searchTerm.

65
00:04:26.150 --> 00:04:30.680
So basically, to kind of demonstrate,
inside of one of our react components

66
00:04:30.680 --> 00:04:35.012
we're gonna say this.props.setSearchTerm.

67
00:04:35.012 --> 00:04:39.450
And then we're gonna call
it with a search term.

68
00:04:39.450 --> 00:04:44.048
So it's gonna be whatever search
term I got so, house, right?

69
00:04:44.048 --> 00:04:49.140
Whatever we're getting from our inputs
essentially is what we're gonna do, right?

70
00:04:49.140 --> 00:04:54.130
This is gonna call this dispatch right
here, with this type of action and

71
00:04:54.130 --> 00:04:55.360
this type of value.

72
00:04:55.360 --> 00:05:00.540
This dispatch is going to feed this
in here to this action right here,

73
00:05:00.540 --> 00:05:04.540
with the previous state of
whatever our store was.

74
00:05:04.540 --> 00:05:05.570
Then we're going to modify it and

75
00:05:05.570 --> 00:05:09.150
we're gonna return the state here,
which is gonna be the new state.

76
00:05:11.040 --> 00:05:12.490
That's the entire life cycle, right?

77
00:05:13.890 --> 00:05:16.750
So hopefully, there's some computer
sciency terms being thrown around,

78
00:05:16.750 --> 00:05:19.070
like reducer and blah, right?

79
00:05:19.070 --> 00:05:24.950
But that's actually, it's pretty,
I'll say it's hard, but it's not complex.

80
00:05:24.950 --> 00:05:30.911
I'll put it that way, in my opinion.
&gt;&gt; Brian Holt: Okay,

81
00:05:30.911 --> 00:05:38.130
so now we have these two functions.
&gt;&gt; Brian Holt: And

82
00:05:38.130 --> 00:05:44.060
we're gonna use react redux to make this,
basically a wrapper for react components.

83
00:05:44.060 --> 00:05:50.301
And so we're gonna say, const connector

84
00:05:50.301 --> 00:05:57.258
= reactRedux.connect mapStateToProps and

85
00:05:57.258 --> 00:06:01.910
mapDispatchToProps, okay?

86
00:06:01.910 --> 00:06:05.596
Now I'm gonna say, because we have
a pretty simple redux store, this is okay,

87
00:06:05.596 --> 00:06:07.361
that we only have one connector.

88
00:06:07.361 --> 00:06:09.965
Particularly if you're gonna
have many connectors, right?

89
00:06:09.965 --> 00:06:14.705
Because not all react components
care about all actions or all state.

90
00:06:14.705 --> 00:06:17.005
Typically they only care about
parts of the tree and so

91
00:06:17.005 --> 00:06:20.475
you'll make different connectors for
different components, right?

92
00:06:20.475 --> 00:06:24.235
And you'll customize them to
whatever those components need.

93
00:06:24.235 --> 00:06:28.820
In our case, we're only really
worried about one action and

94
00:06:28.820 --> 00:06:30.980
one piece of state, so this works for now.

95
00:06:33.400 --> 00:06:36.010
And it's also, instead of doing
this inside of your store,

96
00:06:36.010 --> 00:06:39.351
you actually might do this inside of
your different components as well, so.

97
00:06:42.535 --> 00:06:47.187
&gt;&gt; Brian Holt: Okay, module.exports =

98
00:06:47.187 --> 00:06:52.854
connector, and store, right?

99
00:06:52.854 --> 00:06:55.185
And if you remember correctly,

100
00:06:55.185 --> 00:06:59.597
this is the same as connector: connector,
store: store.

101
00:06:59.597 --> 00:07:03.341
But because we're lazy and
we don't have to,

102
00:07:03.341 --> 00:07:06.706
we can just do that, and that works okay.

103
00:07:13.214 --> 00:07:15.322
&gt;&gt; Brian Holt: That's it, the end.

104
00:07:15.322 --> 00:07:17.060
That's all of redux, right?

105
00:07:17.060 --> 00:07:20.860
We've basically touched
almost every part of redux.

106
00:07:22.440 --> 00:07:25.640
The only thing we're not talking about
is middlewares which is not useful for

107
00:07:25.640 --> 00:07:26.926
us to write now.

108
00:07:26.926 --> 00:07:29.970
But if you've ever done Node Express,
a middleware or

109
00:07:29.970 --> 00:07:31.310
something that runs in the middle.

110
00:07:31.310 --> 00:07:38.192
That's all that is with redux.
&gt;&gt; Brian Holt: Okay, I imagine

111
00:07:38.192 --> 00:07:42.243
you might have some questions about
what we've done here, it's pretty dense.

112
00:07:50.174 --> 00:07:52.911
&gt;&gt; Speaker 2: What does the connect method

113
00:07:52.911 --> 00:07:53.950
do?
&gt;&gt; Brian Holt: This one right here?

114
00:07:56.265 --> 00:07:58.695
We're gonna see it in
action momentarily but

115
00:07:58.695 --> 00:08:01.065
basically this is going
to be a way to connect.

116
00:08:01.065 --> 00:08:06.475
It's a wrapper for a component that,
you're gonna call this connect method.

117
00:08:06.475 --> 00:08:09.995
And you're gonna feed it a react
component and it's going to wrap it with.

118
00:08:09.995 --> 00:08:14.445
What it actually does is, it creates
another react component that's going to

119
00:08:14.445 --> 00:08:19.440
feed in props to whatever
component you wrapped it in.

120
00:08:20.735 --> 00:08:24.770
It's a little abstract, you'll actually
see it happen here momentarily,

121
00:08:24.770 --> 00:08:30.848
when we actually implement it.
&gt;&gt; Speaker 3: The mapDispatchToProps,

122
00:08:30.848 --> 00:08:33.904
so it's returning an object
which has a function

123
00:08:33.904 --> 00:08:36.820
in?
&gt;&gt; Brian Holt: Yes.

124
00:08:36.820 --> 00:08:40.040
So you could have multiple function in
here if you have multiple action types you

125
00:08:40.040 --> 00:08:41.880
want to dispatch, right?

126
00:08:41.880 --> 00:08:44.910
We only have one action so
we have one method right.

127
00:08:44.910 --> 00:08:47.870
That's typically gonna be
a fairly one-to-one ratio.

128
00:08:47.870 --> 00:08:53.100
That I have one method per one dispatch.

129
00:08:53.100 --> 00:08:58.400
I have one method per one action type
that's actually what I wanted to say.

130
00:08:58.400 --> 00:09:02.170
Not totally true, you could have
a method call dispatch multiple actions.

131
00:09:03.740 --> 00:09:06.890
But, at that point, you might think
about having actions that dispatch other

132
00:09:06.890 --> 00:09:10.420
actions, which mind blowing, right?

133
00:09:12.180 --> 00:09:14.970
But that's also a possibility too, and so,

134
00:09:14.970 --> 00:09:18.074
a question you might ask yourself
is how do I do Ajax with this?

135
00:09:18.074 --> 00:09:22.360
Or asynchronous, right,
cuz this is all synchronous code so far.

136
00:09:22.360 --> 00:09:26.470
So what you would do, is you would
dispatch an action that that action

137
00:09:26.470 --> 00:09:29.980
inside of the action would call out and
do your Ajax for you, right?

138
00:09:29.980 --> 00:09:35.820
Then once the Ajax came back inside of
the callback, where you get the data?

139
00:09:35.820 --> 00:09:39.268
You would dispatch yet another action that
would actually update your store, right?

140
00:09:39.268 --> 00:09:41.694
So you would have an action,
makes Ajax call.

141
00:09:41.694 --> 00:09:43.330
Once the Ajax call comes back,

142
00:09:43.330 --> 00:09:46.080
you dispatch another action
which updates the store.

143
00:09:48.370 --> 00:09:51.408
The end.
&gt;&gt; Speaker 4: On line nine is that

144
00:09:51.408 --> 00:09:54.186
the default state that we're passing into,

145
00:09:54.186 --> 00:09:57.320
would that be the initialstate.searchTerm?
&gt;&gt; Brian Holt: Right

146
00:09:57.320 --> 00:09:57.981
here?
&gt;&gt; Speaker 4: Yeah.

147
00:10:00.013 --> 00:10:01.195
&gt;&gt; Brian Holt: It needs to be an object

148
00:10:01.195 --> 00:10:03.760
because it represents the whole store,
right?

149
00:10:04.950 --> 00:10:08.870
And so as we grow we're
actually gonna do shows here,

150
00:10:08.870 --> 00:10:09.790
we're gonna bring them in here.

151
00:10:11.640 --> 00:10:16.440
So you wanna bring in the entire object,
that make sense?

152
00:10:18.120 --> 00:10:22.160
Okay, well I think once you get
going you'll see that it needs to be

153
00:10:22.160 --> 00:10:24.600
an entire object rather
than just a string, right?

154
00:10:25.630 --> 00:10:28.110
I guess technically,
your entire store could be just a string,

155
00:10:28.110 --> 00:10:31.670
but that's a pretty limited store and
pretty poor use of it [LAUGH].

