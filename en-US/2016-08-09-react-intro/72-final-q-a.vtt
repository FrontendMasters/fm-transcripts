WEBVTT

1
00:00:00.117 --> 00:00:03.645
[MUSIC]

2
00:00:03.645 --> 00:00:07.397
&gt;&gt; Speaker 1: At Netflix do you typically
inline styles of the component level or

3
00:00:07.397 --> 00:00:09.880
maintain separate style sheets?

4
00:00:09.880 --> 00:00:11.990
&gt;&gt; Brian Holt: At Netflix we
maintain separate style sheets.

5
00:00:13.730 --> 00:00:17.747
For right now there's enough best
practices around using CSS that I still

6
00:00:17.747 --> 00:00:19.635
feel that that's the best story.

7
00:00:19.635 --> 00:00:23.019
But I will be easily convinced otherwise.

8
00:00:23.019 --> 00:00:26.418
&gt;&gt; Speaker 1: Let's see, what else?

9
00:00:26.418 --> 00:00:30.530
What did we do with our myRoutes
function in the client app?

10
00:00:31.740 --> 00:00:33.000
&gt;&gt; Brian Holt: We blew it up.

11
00:00:33.000 --> 00:00:37.740
[LAUGH] We simply got rid of it and
we replaced it with rootRoute.

12
00:00:37.740 --> 00:00:41.650
So you can still call this
myRoutes if you want to, but

13
00:00:41.650 --> 00:00:45.610
I found it to be more accurate to call it
the rootRoute in this particular case.

14
00:00:45.610 --> 00:00:46.780
So that's up to you,

15
00:00:46.780 --> 00:00:52.270
you can also call it like routeConfig and
I'd be okay with that too.

16
00:00:52.270 --> 00:01:00.210
&gt;&gt; Speaker 1: Can you go over axiom and
node ensure again?

17
00:01:00.210 --> 00:01:06.120
&gt;&gt; Brian Holt: Briefly,
Axios is really just an Ajax client.

18
00:01:06.120 --> 00:01:12.000
It's an Ajax client that uses promises,
and that's really all it is.

19
00:01:12.000 --> 00:01:13.350
It's nothing more, nothing less.

20
00:01:13.350 --> 00:01:14.530
All it does is it makes requests,

21
00:01:14.530 --> 00:01:17.330
returns you a promise with
all the data that you expect.

22
00:01:19.890 --> 00:01:25.640
As far as require.ensure, this is
the only context I've ever used it in.

23
00:01:26.790 --> 00:01:30.390
So I don't necessarily know
a whole lot more than that.

24
00:01:30.390 --> 00:01:31.700
Where is it, it's in ClientApp.

25
00:01:33.560 --> 00:01:35.480
So you're welcome to look
at the documentation on it.

26
00:01:37.630 --> 00:01:42.485
But suffice to say it basically makes
sure that I have these modules available

27
00:01:42.485 --> 00:01:44.740
to me and then do this action.

28
00:01:44.740 --> 00:01:46.930
That's basically the gist of ensure.

29
00:01:46.930 --> 00:01:49.400
&gt;&gt; Speaker 1: Can you
push the final branch?

30
00:01:49.400 --> 00:01:52.302
&gt;&gt; Brian Holt: I will push
the final branch momentarily.

31
00:01:52.302 --> 00:01:57.199
&gt;&gt; Speaker 1: And then just when
rendering on the server how can

32
00:01:57.199 --> 00:02:00.424
you authenticate users using,

33
00:02:00.424 --> 00:02:05.340
how would you handle
authenitcation with this?

34
00:02:05.340 --> 00:02:06.070
&gt;&gt; Brian Holt: That's a good question.

35
00:02:08.240 --> 00:02:10.050
I'm trying to think of how we do it.

36
00:02:10.050 --> 00:02:13.767
Well, let's not talk about the way
Netflix does it cuz it's a little

37
00:02:13.767 --> 00:02:17.226
nuts cuz we have to worry about AB
testing on the side as well, but

38
00:02:17.226 --> 00:02:20.453
you can basically grab sessions and
just feed it sessions.

39
00:02:20.453 --> 00:02:24.801
So on the client you'll go grab sessions,
either from the cookies, or

40
00:02:24.801 --> 00:02:27.996
you'll grab it from the session store or
whatever.

41
00:02:27.996 --> 00:02:32.370
And then you can just feed in whatever
your session's gonna be on the server as

42
00:02:32.370 --> 00:02:33.592
well, using props.

43
00:02:33.592 --> 00:02:37.480
And then just kinda handle that,
merge that together in your client.

