WEBVTT

1
00:00:00.000 --> 00:00:03.628
[MUSIC]

2
00:00:03.628 --> 00:00:06.427
&gt;&gt; Brian Holt: So let's go and
create store.jsx.

3
00:00:06.427 --> 00:00:10.682
I'm gonna give the caveat here that I
haven't actually worked on a huge Redux

4
00:00:10.682 --> 00:00:11.670
project before.

5
00:00:11.670 --> 00:00:15.002
I've done my own personal stuff on it,
so this is really poorly organized.

6
00:00:15.002 --> 00:00:20.342
I'm going to say everything I'm doing in
terms of organization, don't do that.

7
00:00:20.342 --> 00:00:23.267
Unfortunately, I don't have
a much better recommendation.

8
00:00:23.267 --> 00:00:27.740
But I'm sure you can tweet it and some
angry person will tell you what to do.

9
00:00:28.800 --> 00:00:30.670
So create Store.jsx.

10
00:00:30.670 --> 00:00:31.890
I still call it JSX.

11
00:00:31.890 --> 00:00:33.386
You can call it ES6, as well.

12
00:00:33.386 --> 00:00:37.440
I've seen some people do that, because
we're gonna be using ES6 but not JSX.

13
00:00:37.440 --> 00:00:40.760
I just call it JSX because then that
reminds myself I need to transpile this.

14
00:00:40.760 --> 00:00:42.275
I don't really care what's in it,
so whatever.

15
00:00:42.275 --> 00:00:46.268
Store.jsx.

16
00:00:46.268 --> 00:00:54.059
Here we're going to pull in Redux
&gt;&gt; Brian Holt: We're

17
00:00:54.059 --> 00:00:56.804
gonna pull in reactRedux.

18
00:00:56.804 --> 00:01:01.733
All reactRedux is, basically,
a couple of helper

19
00:01:01.733 --> 00:01:07.013
functions to make Redux really
easy to use with React.

20
00:01:07.013 --> 00:01:09.624
You can use Redux with any other library.

21
00:01:09.624 --> 00:01:13.813
In fact, I know it's getting some
popularity in the Angular community these

22
00:01:13.813 --> 00:01:15.880
days, which is pretty cool.

23
00:01:15.880 --> 00:01:17.640
I like the cross-pollination.

24
00:01:17.640 --> 00:01:22.039
&gt;&gt; Speaker 2: We just sent
a Reactive Angular to-

25
00:01:22.039 --> 00:01:23.002
&gt;&gt; Brian Holt: Did they use Redux?

26
00:01:23.002 --> 00:01:24.128
&gt;&gt; Speaker 2: Yeah, they did.

27
00:01:24.128 --> 00:01:24.758
&gt;&gt; Brian Holt: Amazing.

28
00:01:24.758 --> 00:01:25.853
Go watch the other course.

29
00:01:25.853 --> 00:01:28.059
That'll-
&gt;&gt; Speaker 2: He used Rx and

30
00:01:28.059 --> 00:01:31.641
Redux with Angular, too.

31
00:01:31.641 --> 00:01:34.341
&gt;&gt; Brian Holt: Awesome.

32
00:01:34.341 --> 00:01:39.252
Here's a little of just

33
00:01:39.252 --> 00:01:43.923
how I do Flux/Redux.

34
00:01:43.923 --> 00:01:46.090
Make all of your actions constants, so

35
00:01:46.090 --> 00:01:50.170
that if you need to change the name
of your constant later, that's okay.

36
00:01:50.170 --> 00:01:52.547
That you don't have to
go change everything.

37
00:01:52.547 --> 00:01:57.174
This is gonna be the name of my action,
setSearchTerm.

38
00:01:57.174 --> 00:01:58.133
Right now, they're called the same thing.

39
00:01:58.133 --> 00:01:59.801
They don't have to be
called the same thing.

40
00:01:59.801 --> 00:02:02.971
That makes sense to me.

41
00:02:02.971 --> 00:02:05.637
And now we're gonna make
our very first reducer.

42
00:02:05.637 --> 00:02:07.558
Which, again,
that sounds really intimidating.

43
00:02:07.558 --> 00:02:12.179
One of my most biggest pet
peeves with people that write

44
00:02:12.179 --> 00:02:16.809
libraries is they use the big
computer sciency terms.

45
00:02:16.809 --> 00:02:18.510
Angular is the worst at it.

46
00:02:18.510 --> 00:02:22.555
They use like transclusion,
and directives, and

47
00:02:22.555 --> 00:02:26.891
all the stuff that makes it
feel really intimidating.

48
00:02:26.891 --> 00:02:29.483
In reality, they're not actually
very intimidating things, but

49
00:02:29.483 --> 00:02:30.670
they feel very intimidating.

50
00:02:30.670 --> 00:02:32.687
So that's why I'm not
a huge fan of reducer, or

51
00:02:32.687 --> 00:02:34.665
despite the fact that's
actually what it is.

52
00:02:34.665 --> 00:02:40.894
But whatever, rant over.

53
00:02:40.894 --> 00:02:45.984
We're gonna do state, and

54
00:02:45.984 --> 00:02:50.636
we're gonna do action.

55
00:02:50.636 --> 00:02:53.757
You don't see a lot of switch
statements in JavaScript.

56
00:02:53.757 --> 00:02:55.660
Just cuz they're weird and
they fall through, and

57
00:02:55.660 --> 00:02:57.350
they're kind of just
annoying to deal with.

58
00:02:57.350 --> 00:03:00.310
But it actually does make a lot
of sense with your root reducer.

59
00:03:02.220 --> 00:03:06.473
&gt;&gt; Speaker 3: Can you just reclarify
why you're setting the const

60
00:03:06.473 --> 00:03:08.797
SET_SEARCH_TERM there?

61
00:03:08.797 --> 00:03:11.131
&gt;&gt; Brian Holt: Let's get there first,
and then I'll talk about it again.

62
00:03:11.131 --> 00:03:11.643
&gt;&gt; Speaker 3: Okay.

63
00:03:15.086 --> 00:03:17.753
&gt;&gt; Brian Holt: We're gonna do
switch statement on action.type.

64
00:03:17.753 --> 00:03:19.463
The action's gonna come in here.

65
00:03:25.887 --> 00:03:28.261
&gt;&gt; Brian Holt: So
this is a switch statement on that.

66
00:03:28.261 --> 00:03:31.506
Then I'm gonna do case SET_SEARCH_TERM.

67
00:03:31.506 --> 00:03:36.815
So if we see a SET_SEARCH_TERM type event,
type not event.

68
00:03:36.815 --> 00:03:38.341
They're very similar to events, but

69
00:03:38.341 --> 00:03:40.589
they're actually actions is
what I really mean to say.

70
00:03:43.636 --> 00:03:47.384
&gt;&gt; Brian Holt: What I'm gonna do here
is I'm gonna say const newState = a new

71
00:03:47.384 --> 00:03:48.120
object.

72
00:03:48.120 --> 00:03:51.922
Because, remember, we have to return
a new object every single time.

73
00:03:51.922 --> 00:03:54.905
I'm just gonna do this object at
assign that we've seen before.

74
00:03:54.905 --> 00:03:59.651
Objects.assign (newState,

75
00:03:59.651 --> 00:04:04.044
state, set our search term,

76
00:04:04.044 --> 00:04:09.501
{searchTerm: action.value})

77
00:04:12.748 --> 00:04:14.164
&gt;&gt; Brian Holt: And then return newState.

78
00:04:23.789 --> 00:04:25.052
&gt;&gt; Brian Holt: Underneath this
is gonna be another state.

79
00:04:25.052 --> 00:04:28.343
But we'll talk about this just, no,
this would be actually the default.

80
00:04:32.299 --> 00:04:34.306
&gt;&gt; Brian Holt: So
let's talk about what's happening here.

81
00:04:34.306 --> 00:04:36.724
Somewhere inside of my app.

82
00:04:36.724 --> 00:04:40.640
Well, I guess what I should mention is,
we're gonna abstract away our search.

83
00:04:40.640 --> 00:04:42.900
So if you go back to our app, here,

84
00:04:42.900 --> 00:04:46.770
this part right here where we're keeping
track of the state inside of React.

85
00:04:46.770 --> 00:04:49.210
We also want to make this
work in our home page here.

86
00:04:49.210 --> 00:04:53.290
So when you type in here and search for
something, we want that to work too.

87
00:04:53.290 --> 00:04:57.840
So now both of these have to be
able to modify this search term.

88
00:04:57.840 --> 00:05:00.127
So we're gonna abstract
that way into Redux and

89
00:05:00.127 --> 00:05:02.310
let Redux handle all
the heavy lifting here.

90
00:05:02.310 --> 00:05:04.930
I should mention that
that's what we're doing.

91
00:05:09.830 --> 00:05:14.450
We're gonna have both places just
emit actions of saying, hey,

92
00:05:14.450 --> 00:05:16.214
my search term changed.

93
00:05:16.214 --> 00:05:18.718
And then we're gonna let Redux
handle all of the changing.

94
00:05:18.718 --> 00:05:22.140
Then, inside of these
different components,

95
00:05:22.140 --> 00:05:25.399
we're just going to handle them ourselves.

96
00:05:25.399 --> 00:05:27.849
Whenever we see a SET_SEARCH_TERM action,

97
00:05:27.849 --> 00:05:30.840
what we're gonna do is we're
gonna create a newState.

98
00:05:30.840 --> 00:05:32.870
Because, again, it must be new state.

99
00:05:34.400 --> 00:05:36.200
This is gonna be just this blank object.

100
00:05:36.200 --> 00:05:38.820
It's going to get everything
that state had before,

101
00:05:38.820 --> 00:05:41.840
because we need to not blow
away the rest of our state.

102
00:05:41.840 --> 00:05:44.844
Because there's going to be other
things state's keeping track of.

103
00:05:44.844 --> 00:05:47.766
And we don't to blow that
away on every single update.

104
00:05:47.766 --> 00:05:48.885
Does that make sense?

105
00:05:48.885 --> 00:05:50.002
Because it's whole tree of data.

106
00:05:50.002 --> 00:05:55.057
If we don't bring all the old state
along with us, we're going to lose it.

107
00:05:55.057 --> 00:05:59.097
The last thing we're gonna do is,
whatever was in state before for

108
00:05:59.097 --> 00:06:03.588
search term we're going to overwrite
it here, with the action.value.

109
00:06:03.588 --> 00:06:05.790
Whatever was there, now.

110
00:06:05.790 --> 00:06:12.304
Absolutely key with Redux,
you must return the newState.

111
00:06:12.304 --> 00:06:16.825
This is a pure function and
it absolutely must be a pure function.

112
00:06:16.825 --> 00:06:21.795
When I say pure function, it's not going
to modify any of the state around it.

113
00:06:21.795 --> 00:06:25.025
What it's going to do is it's going
to take in what it got from state,

114
00:06:25.025 --> 00:06:28.135
it's going to apply a transformation,
and return a new version of it.

115
00:06:28.135 --> 00:06:30.670
That's what I mean when
I say pure function.

116
00:06:30.670 --> 00:06:33.338
So it's not going to modify any of
its surrounding global environment.

117
00:06:33.338 --> 00:06:36.764
It's going to be input in,
output out, the end.

118
00:06:36.764 --> 00:06:37.307
That's it.

119
00:06:37.307 --> 00:06:38.506
Nothing else gets modified.

120
00:06:38.506 --> 00:06:40.142
Make sense?

121
00:06:40.142 --> 00:06:42.628
Let me show you how you
would violate that.

122
00:06:42.628 --> 00:06:48.821
You'd say let x = 5, and
if I did like x++ in here,

123
00:06:48.821 --> 00:06:53.930
that would be a violation
of this contract.

124
00:06:55.560 --> 00:06:58.020
And say I was using x somewhere
else to do something else.

125
00:06:58.020 --> 00:07:02.770
This is a violation of that.

126
00:07:02.770 --> 00:07:05.810
&gt;&gt; Speaker 4: So the object assign
in this case is sort of like

127
00:07:05.810 --> 00:07:07.100
you're inheriting from a prototype.

128
00:07:07.100 --> 00:07:11.470
Except for you're not actually
keeping the prototypal relationship.

129
00:07:11.470 --> 00:07:13.430
&gt;&gt; Brian Holt: Yeah, so
it's not inheritance.

130
00:07:15.260 --> 00:07:18.020
But this is like the functional
version of inheritance.

131
00:07:18.020 --> 00:07:19.590
That's not even totally true.

132
00:07:19.590 --> 00:07:21.280
That'd be dynamic dispatch.

133
00:07:21.280 --> 00:07:22.150
Watch another course for that.

134
00:07:22.150 --> 00:07:23.155
I don't wanna talk about it.

135
00:07:23.155 --> 00:07:28.655
[LAUGH] But the basic idea here
is keep everything from state but

136
00:07:28.655 --> 00:07:30.680
overwrite this part.

137
00:07:32.090 --> 00:07:33.761
That's the gist of it.

138
00:07:33.761 --> 00:07:36.529
I see where you head's at,
and I think you're right, but

139
00:07:36.529 --> 00:07:37.894
it's a leaky abstraction.

140
00:07:37.894 --> 00:07:41.633
I don't wanna give everyone else the idea,
either.

141
00:07:41.633 --> 00:07:45.220
Any questions about this?

142
00:07:45.220 --> 00:07:47.050
Another thing I'll say about this.

143
00:07:47.050 --> 00:07:49.650
This actually could be another reducer.

144
00:07:49.650 --> 00:07:51.610
In fact, we could even do that.

145
00:07:51.610 --> 00:07:53.030
Well, we'll leave it like this but
you could.

146
00:07:54.750 --> 00:07:59.225
Here would be a good place to
dispatch this to another reducer.

147
00:07:59.225 --> 00:08:03.635
So instead of saying this, I would say,

148
00:08:03.635 --> 00:08:08.969
return reduceSearch
term with action.value.

149
00:08:08.969 --> 00:08:15.638
And that would be this route reducer
dispatching to another reducer.

150
00:08:15.638 --> 00:08:18.390
That's kind of the idea there.

151
00:08:18.390 --> 00:08:19.511
Or we can just do that.

152
00:08:19.511 --> 00:08:20.217
Let's just do it.

153
00:08:20.217 --> 00:08:21.887
Whatever.

154
00:08:21.887 --> 00:08:23.159
#yolo.

155
00:08:23.159 --> 00:08:26.724
&gt;&gt; Students: [LAUGH]
&gt;&gt; Brian Holt: [LAUGH] Okay.

156
00:08:26.724 --> 00:08:28.305
reduceSearchTerm.

157
00:08:36.668 --> 00:08:38.625
&gt;&gt; Brian Holt: Actually you have
to pass more than just that.

158
00:08:38.625 --> 00:08:40.137
You have to pass the state and the action.

159
00:08:40.137 --> 00:08:41.672
So I'm gonna pass state.

160
00:08:41.672 --> 00:08:42.509
I'm gonna pass action.

161
00:08:48.588 --> 00:08:50.763
&gt;&gt; Brian Holt: And then I'm just gonna
copy all that business of what I

162
00:08:50.763 --> 00:08:51.387
wrote up here.

163
00:09:04.669 --> 00:09:06.164
&gt;&gt; Brian Holt: Since we
have multiple reducers now,

164
00:09:06.164 --> 00:09:07.480
this is a little bit inaccurate.

165
00:09:07.480 --> 00:09:11.660
Let's call this rootReducer,
cuz that's exactly what it is.

166
00:09:13.780 --> 00:09:18.617
And then now we have to pass in

167
00:09:18.617 --> 00:09:23.463
state and action, as well.

168
00:09:23.463 --> 00:09:25.218
&gt;&gt; Speaker 6: Would that
be reduceSearchTerm?

169
00:09:25.218 --> 00:09:26.432
&gt;&gt; Brian Holt: It should.

170
00:09:26.432 --> 00:09:27.092
That was a test.

171
00:09:27.092 --> 00:09:27.976
You pass.

172
00:09:27.976 --> 00:09:35.850
&gt;&gt; Students: [LAUGH]
&gt;&gt; Brian Holt: So any questions?

173
00:09:35.850 --> 00:09:37.350
This is still not totally done.

174
00:09:37.350 --> 00:09:39.133
But any questions about reduceSearchTerm?

175
00:09:44.624 --> 00:09:46.104
&gt;&gt; Speaker 3: Someone's asking,

176
00:09:46.104 --> 00:09:50.879
object.assign is the native version
of what jQuery.extend does?

177
00:09:50.879 --> 00:09:52.254
&gt;&gt; Brian Holt: Maybe.

178
00:09:52.254 --> 00:09:55.056
I seem to recall [CROSSTALK]
jQuery expert back there.

179
00:09:55.056 --> 00:09:55.804
&gt;&gt; Speaker 2: Yeah, pretty much.

180
00:09:55.804 --> 00:09:56.896
&gt;&gt; Brian Holt: Okay.

181
00:09:56.896 --> 00:10:01.142
I know it is the equivalent of _.assign,
so

182
00:10:01.142 --> 00:10:06.415
if that speaks to you,
it is literally the same as that.

183
00:10:06.415 --> 00:10:08.920
If you use a underscore or low dash.

