WEBVTT

1
00:00:00.000 --> 00:00:03.923
[MUSIC]

2
00:00:03.923 --> 00:00:06.566
&gt;&gt; Brian Holt: Okay, so
now we need a default, right.

3
00:00:06.566 --> 00:00:12.175
And the reason that we need a default is
basically, this reducer must return state,

4
00:00:12.175 --> 00:00:16.095
and redux depending on it to
return state no matter what.

5
00:00:16.095 --> 00:00:19.244
So what happens if another
action gets fired that this root

6
00:00:19.244 --> 00:00:21.335
reducer doesn't recognize?

7
00:00:21.335 --> 00:00:23.655
Well, if you don't return anything,
it blows away everything,

8
00:00:23.655 --> 00:00:26.950
because you're gonna call a function,
it's gonna return undefined, right.

9
00:00:28.600 --> 00:00:30.670
So you must return something.

10
00:00:30.670 --> 00:00:33.313
So you're gonna say basically
return state, right.

11
00:00:35.896 --> 00:00:38.281
&gt;&gt; Brian Holt: Otherwise,
if you don't return state,

12
00:00:38.281 --> 00:00:42.181
then everything gets blown away and
people die and stuff like that.

13
00:00:46.631 --> 00:00:50.643
&gt;&gt; Brian Holt: Okay,
does that makes sense?

14
00:00:50.643 --> 00:00:53.373
Now, what we want to be able to do,

15
00:00:53.373 --> 00:00:57.813
is we also wanna be able to
initialize our state as well.

16
00:00:57.813 --> 00:01:00.343
Cuz right now, when this gets initialized,

17
00:01:00.343 --> 00:01:04.283
it actually does call your root
reducer once to initialize the state.

18
00:01:04.283 --> 00:01:05.952
So what we want to be able to do is,

19
00:01:05.952 --> 00:01:09.315
we actually want to have an initial
state if nothing else happens.

20
00:01:09.315 --> 00:01:10.551
So let's create an initial state.

21
00:01:10.551 --> 00:01:14.973
We're gonna say, const initialState

22
00:01:14.973 --> 00:01:19.529
equals search term colon empty string.

23
00:01:19.529 --> 00:01:24.716
And this is gonna give us what our
initial state we want it to look like.

24
00:01:24.716 --> 00:01:30.230
And what you can do here,
which is kind of fun.

25
00:01:30.230 --> 00:01:33.330
Have you heard of like a default
parameters from the ES6 before?

26
00:01:33.330 --> 00:01:37.460
So you can actually say,
initialState here, and it says,

27
00:01:37.460 --> 00:01:40.115
if state is undefined, make it this.

28
00:01:40.115 --> 00:01:47.656
Or in other words if no state,
state = initialState.

29
00:01:47.656 --> 00:01:48.937
Same diff.

30
00:01:54.130 --> 00:02:01.540
&gt;&gt; Brian Holt: Or, if you prefer,
state = state || initialState.

31
00:02:01.540 --> 00:02:05.148
That's equivalent to this
is equivalent to this.

32
00:02:06.966 --> 00:02:10.381
&gt;&gt; Brian Holt: Okay, but let's just go
ahead and make it just that top one.

33
00:02:14.505 --> 00:02:17.163
&gt;&gt; Brian Holt: Okay,
any questions about that?

34
00:02:20.698 --> 00:02:23.050
&gt;&gt; Brian Holt: It still doesn't work yet,
cuz we have to do a bunch of other stuff.

35
00:02:23.050 --> 00:02:26.205
But that's the heavy
lifting part of Redux.

36
00:02:26.205 --> 00:02:28.380
Everything else is just getting
it to play nicely with React.

37
00:02:28.380 --> 00:02:31.280
But that's essentially Redux in about,

38
00:02:31.280 --> 00:02:34.620
like, that's it,
that's really all there is to Redux.

39
00:02:36.120 --> 00:02:38.940
So it's actually pretty simple.

40
00:02:38.940 --> 00:02:40.320
It's pretty small.

41
00:02:40.320 --> 00:02:44.598
Well, I guess you actually
have to create the store, so

42
00:02:44.598 --> 00:02:47.337
that const store is equal to redux.

43
00:02:47.337 --> 00:02:49.365
Put this up a little bit.

44
00:02:49.365 --> 00:02:52.943
redux.createStore and
you just pass in your root reducer.

45
00:02:55.454 --> 00:03:00.737
&gt;&gt; Brian Holt: That's it [LAUGH].

46
00:03:00.737 --> 00:03:03.546
However, I want you to take note of
something that's kind of interesting

47
00:03:03.546 --> 00:03:04.594
about Redux.

48
00:03:04.594 --> 00:03:07.260
Notice I only called the Redux
is actually right there.

49
00:03:07.260 --> 00:03:08.939
Everything else is just pure JavaScript.

50
00:03:11.320 --> 00:03:12.900
I think that's pretty cool, right.

51
00:03:12.900 --> 00:03:14.230
Cuz then Redux is not getting in the way.

52
00:03:14.230 --> 00:03:15.680
There's not really a ton
to learn about it.

53
00:03:15.680 --> 00:03:18.780
It's just all JavaScript programming, and

54
00:03:18.780 --> 00:03:22.660
then Redux just steps into kind
of help you marshal that about.

55
00:03:22.660 --> 00:03:26.621
There's actually a gist out there
that I don't know where it is, but

56
00:03:26.621 --> 00:03:30.123
you can actually see all of
Redux implemented in 80 lines.

57
00:03:30.123 --> 00:03:30.990
It's really small.

58
00:03:32.130 --> 00:03:34.630
Now, they actually do some
like optimizations for you.

59
00:03:34.630 --> 00:03:37.785
So the library itself
is a little bit larger.

60
00:03:37.785 --> 00:03:44.878
But the basic bare bones of Redux
is only like 80 lines of code.

61
00:03:44.878 --> 00:03:49.574
And I'll definitely tell you to go
watch Dan Abramov's video on Egghead,

62
00:03:49.574 --> 00:03:53.830
because you actually write Redux with him,
and it's pretty cool.

