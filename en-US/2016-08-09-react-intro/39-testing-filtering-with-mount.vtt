WEBVTT

1
00:00:00.000 --> 00:00:04.286
[MUSIC]

2
00:00:04.286 --> 00:00:06.899
&gt;&gt; Brian Holt: Shallow is really useful
for checking to make sure mark up got in,

3
00:00:06.899 --> 00:00:09.083
that things are getting
rendered the way you expect but

4
00:00:09.083 --> 00:00:12.196
if you actually want to be interacting
with it you have to do a little bit more.

5
00:00:12.196 --> 00:00:14.177
You have to be able to like
have events happening,

6
00:00:14.177 --> 00:00:17.161
like Shallow doesn't have events,
it doesn't have anything like that.

7
00:00:17.161 --> 00:00:20.472
It just basically like gives you
a string back of the mark up and

8
00:00:20.472 --> 00:00:23.548
gives you a couple of easy
methods to be able to look at it.

9
00:00:23.548 --> 00:00:27.504
Another thing that's really nice but
enzyme which I'm not particularly,

10
00:00:27.504 --> 00:00:29.666
actually we're gonna look at right now,

11
00:00:29.666 --> 00:00:32.860
is you can kind of use JQuery-like
syntax on it and it works.

12
00:00:32.860 --> 00:00:36.180
And that's really nice for a lot of us
that have done way too much JQuery code.

13
00:00:36.180 --> 00:00:38.290
So we're going to do
some of that right now.

14
00:00:38.290 --> 00:00:39.670
Okay so we have shallow.

15
00:00:39.670 --> 00:00:41.160
But we need to go one step further.

16
00:00:41.160 --> 00:00:45.310
We need like a real
dom-esque environment right.

17
00:00:45.310 --> 00:00:50.160
So we're going to bring in something
called mount as well from enzyme.

18
00:00:52.670 --> 00:00:54.080
The trade off here is that.

19
00:00:54.080 --> 00:00:57.050
So first of all as far as I know
everything you can do with Shallow you can

20
00:00:57.050 --> 00:00:57.860
also do with Mount.

21
00:00:59.460 --> 00:01:02.140
The trade off being that Mount is
quite a bit slower than Shallow.

22
00:01:02.140 --> 00:01:03.422
Shallow's pretty damn fast.

23
00:01:03.422 --> 00:01:11.092
Okay so it should filter
correctly given new state.

24
00:01:19.454 --> 00:01:25.892
&gt;&gt; Brian Holt: I want to say
const wrapper = mount search.

25
00:01:28.400 --> 00:01:34.175
&gt;&gt; Brian Holt: Okay and
then I want to say const input

26
00:01:34.175 --> 00:01:40.149
= wrapper.find.search-input.

27
00:01:40.149 --> 00:01:45.809
So again, jQuery like syntax here,
most of us should feel pretty comfortable

28
00:01:45.809 --> 00:01:51.400
with that, if not it's okay, but
this is relatively how jQuery would look.

29
00:01:51.400 --> 00:01:54.780
This is going to go in and find our input.

30
00:01:54.780 --> 00:01:56.580
If you remember from our search.jsx.

31
00:01:56.580 --> 00:01:59.533
It's going to go grab this one right here.

32
00:01:59.533 --> 00:02:02.462
And now, we can basically
programmatically interact with it.

33
00:02:06.639 --> 00:02:10.103
&gt;&gt; Brian Holt: So what we're going to do
here is we're going to say, input.node,

34
00:02:10.103 --> 00:02:13.284
which is actually going to be
talking directly to the DOM node.

35
00:02:13.284 --> 00:02:15.504
&gt;&gt; Speaker 2: Can you
scroll up a little bit.

36
00:02:15.504 --> 00:02:16.072
&gt;&gt; Brian Holt: Yeah.

37
00:02:16.072 --> 00:02:17.232
&gt;&gt; Speaker 2: Thank you.
&gt;&gt; Brian Holt: Let me just put a bunch

38
00:02:17.232 --> 00:02:17.984
of empty space up here.

39
00:02:17.984 --> 00:02:18.814
&gt;&gt; Speaker 2: Thanks.

40
00:02:24.227 --> 00:02:30.286
&gt;&gt; Brian Holt: Okay, .value,
input.node.value = 'house', right.

41
00:02:30.286 --> 00:02:36.020
Now, I'm gonna say, it doesn't actually
do these on change events for you so

42
00:02:36.020 --> 00:02:39.840
you actually have to tell it I changed it,
here's the event that actually happened.

43
00:02:39.840 --> 00:02:44.328
So I have to say input.simulate('change').

44
00:02:44.328 --> 00:02:49.820
Basically saying I changed the value and
now I'm gonna give you a change event.

45
00:02:49.820 --> 00:02:53.590
And then that's gonna to fire our
on Change event inside a react.

46
00:02:53.590 --> 00:02:55.514
Does that make sense?

47
00:02:55.514 --> 00:03:03.576
Okay and then here we're gonna
say expect wrapper.state.

48
00:03:03.576 --> 00:03:09.472
So we can actually inspect the state
in our component for the search term.

49
00:03:12.922 --> 00:03:17.130
&gt;&gt; Brian Holt: To equal ('house').

50
00:03:17.130 --> 00:03:17.970
So basically,

51
00:03:17.970 --> 00:03:23.309
first thing we're gonna test is, does
the state match the value of the input.

52
00:03:25.600 --> 00:03:26.800
Basically we're testing to see,

53
00:03:26.800 --> 00:03:31.725
if anywhere our two way data binding got
broken, and then we're also going to test,

54
00:03:31.725 --> 00:03:41.700
(wrapper.find('.show-card)).length.

55
00:03:41.750 --> 00:03:45.170
So unfortunately we can't do this
magic up here where we're just using

56
00:03:45.170 --> 00:03:50.270
the constructor for the, excuse me,

57
00:03:50.270 --> 00:03:59.429
we can't use the component to find it, we
actually have to search on the CSS class.

58
00:04:00.660 --> 00:04:02.060
Mount just doesn't have that capability.

59
00:04:02.060 --> 00:04:05.250
So I guess that's not totally true that
shallow and mount aren't quite the same.

60
00:04:05.250 --> 00:04:09.850
They are a little different and
that's just the way it is.

61
00:04:11.056 --> 00:04:16.140
And then, to equal to, right, cuz we
know we have exactly house of cards and

62
00:04:16.140 --> 00:04:20.710
we have a fuller house and
it shouldn't show anything else.

63
00:04:20.710 --> 00:04:23.950
So basically we're saying if I search for
house, I should only be showing

64
00:04:23.950 --> 00:04:27.900
two different show cards and
I should be dropping the rest of them.

65
00:04:27.900 --> 00:04:31.140
So basically at this point we're just
testing, is the search part of it,

66
00:04:31.140 --> 00:04:32.650
is the filtering part of it working?

67
00:04:33.730 --> 00:04:36.283
So to answer our friends
previous question,

68
00:04:36.283 --> 00:04:39.856
this is indirectly testing if
our filtering works correctly.

69
00:04:42.012 --> 00:04:44.956
&gt;&gt; Brian Holt: Which is always dangerous,
indirect testing is not usually

70
00:04:44.956 --> 00:04:47.449
the best way to do it but
it works for me at this time.

71
00:04:50.029 --> 00:04:52.392
&gt;&gt; Brian Holt: Okay, so
let's go make sure it works and

72
00:04:52.392 --> 00:04:54.835
then we'll take some questions on this.

73
00:04:57.772 --> 00:05:00.252
&gt;&gt; Brian Holt: Npm, run test.

74
00:05:05.924 --> 00:05:09.239
&gt;&gt; Brian Holt: Cool,
so notice it says this.

75
00:05:09.239 --> 00:05:11.142
This is basically means,
you wrote a slow test.

76
00:05:11.142 --> 00:05:15.770
[LAUGH] And it tells you how long
it took you to run this test.

77
00:05:16.810 --> 00:05:18.710
And that is just
the nature of using mount.

78
00:05:18.710 --> 00:05:23.394
Mount is just slower, and there's not
really much you can do about that.

79
00:05:23.394 --> 00:05:24.151
Okay.

80
00:05:27.082 --> 00:05:28.437
&gt;&gt; Brian Holt: Any questions here?

81
00:05:32.154 --> 00:05:35.247
&gt;&gt; Speaker 3: They're asking why we're
using mount instead of shallow and

82
00:05:35.247 --> 00:05:38.290
it's because shallow doesn't allow for
the interaction?

83
00:05:38.290 --> 00:05:40.550
&gt;&gt; Brian Holt: Yep, that's precisely it.

84
00:05:40.550 --> 00:05:44.209
We wanted to be able to simulate events
and change the value of the input and

85
00:05:44.209 --> 00:05:46.510
that's why you have to use mount here and
not,

86
00:05:46.510 --> 00:05:48.651
because shallow doesn't allow for that.

87
00:05:55.094 --> 00:05:57.380
&gt;&gt; Brian Holt: Other questions?

88
00:05:57.380 --> 00:06:00.780
&gt;&gt; Speaker 4: So, you're recommending
use shallow when you can, and

89
00:06:00.780 --> 00:06:02.880
then use mount if you have to?

90
00:06:02.880 --> 00:06:03.730
&gt;&gt; Brian Holt: Precisely.

91
00:06:03.730 --> 00:06:04.380
&gt;&gt; Speaker 4: Okay.

92
00:06:04.380 --> 00:06:07.050
&gt;&gt; Brian Holt: That is eloquently put,
thank you.

93
00:06:09.680 --> 00:06:12.830
There is actually even
one level further than

94
00:06:15.570 --> 00:06:17.820
mount, you can actually do,
it's called static rendering.

95
00:06:17.820 --> 00:06:22.480
Which is actually going to
be using JSDOM in Cheerio.

96
00:06:22.480 --> 00:06:25.740
That actually creates a very
browser like environment.

97
00:06:25.740 --> 00:06:28.660
And we'll have to use
that at the end of today

98
00:06:28.660 --> 00:06:32.040
because once we start introducing
tools like redux and things like that

99
00:06:32.040 --> 00:06:36.198
that it requires an even more realistic
browser environment and it's even slower.

100
00:06:36.198 --> 00:06:40.300
So yeah,
you kind of go down the hierarchy.

101
00:06:40.300 --> 00:06:41.460
Can I do this with Shallow?

102
00:06:41.460 --> 00:06:42.590
No.
Can I do this with Mount?

103
00:06:42.590 --> 00:06:43.780
No.
And then eventually you say,

104
00:06:43.780 --> 00:06:45.520
can I do this with Static Rendering?

105
00:06:45.520 --> 00:06:47.710
Okay, I guess I have to
use static rendering.

106
00:06:47.710 --> 00:06:51.230
&gt;&gt; Speaker 5: If you're using shallow, do
you get access to state or other methods?

107
00:06:51.230 --> 00:06:52.560
&gt;&gt; Brian Holt: No, not as far as I know.

108
00:06:52.560 --> 00:06:55.220
&gt;&gt; Speaker 5: You just get
access to the DOM output.

109
00:06:55.220 --> 00:06:58.299
&gt;&gt; Brian Holt: You might get
access to initial state.

110
00:06:58.299 --> 00:07:01.532
You know I'm not sure
to be totally honest.

111
00:07:04.234 --> 00:07:07.377
&gt;&gt; Brian Holt: Yeah, I'm not exactly
sure what the limitations are and

112
00:07:07.377 --> 00:07:09.350
some are still pretty new library.

113
00:07:09.350 --> 00:07:11.390
I think it's been out for
about six months or so.

114
00:07:14.770 --> 00:07:19.940
That's at least as long as I've been using
it anyway, but good question though.

115
00:07:19.940 --> 00:07:21.122
Any other questions?

116
00:07:21.122 --> 00:07:24.976
&gt;&gt; Speaker 3: Would this work properly
if you were debouncing the inputs?

117
00:07:27.573 --> 00:07:33.026
&gt;&gt; Brian Holt: Yeah it would work because,
&gt;&gt; Brian Holt: This

118
00:07:33.026 --> 00:07:35.720
is almost like a copy and paste, right?

119
00:07:35.720 --> 00:07:38.890
We're inputting house all at once.

120
00:07:38.890 --> 00:07:43.240
It's not like we're doing H,
then O, then U, then S, then E.

121
00:07:43.240 --> 00:07:44.970
So this should work okay.

122
00:07:49.227 --> 00:07:50.717
&gt;&gt; Brian Holt: I think
actually technically,

123
00:07:50.717 --> 00:07:53.869
I don't think you'd use a debouncer,
I think it'd be a throttle.

124
00:07:57.363 --> 00:08:00.530
&gt;&gt; Brian Holt: Because you definitely want
it to run at the end of whenever they

125
00:08:00.530 --> 00:08:01.740
stopped typing right?

126
00:08:03.990 --> 00:08:07.890
Yeah, I might have that backwards.

127
00:08:07.890 --> 00:08:09.050
Don't ask me.
I don't remember.

128
00:08:09.050 --> 00:08:12.000
Anyway, [LAUGH] any other questions?

129
00:08:16.622 --> 00:08:20.160
&gt;&gt; Brian Holt: Okay, I think that's
the end of my unit testing thing.

130
00:08:20.160 --> 00:08:23.080
So I'm just gonna push a branch real
quick if anyone wants to grab the tests.

131
00:08:24.740 --> 00:08:26.570
The only thing about all these
tests that we just wrote,

132
00:08:26.570 --> 00:08:28.514
we're now going to go break all of them.

133
00:08:28.514 --> 00:08:32.152
[LAUGH] And that's just the unfortunate
reality of writing UI code.

134
00:08:34.027 --> 00:08:38.563
&gt;&gt; Brian Holt: So git checkout -b fen-15,

135
00:08:38.563 --> 00:08:44.611
git add-A, git commit -m FEM step 15,

136
00:08:44.611 --> 00:08:48.650
git push origin fem -15.

