WEBVTT

1
00:00:00.000 --> 00:00:03.436
[MUSIC]

2
00:00:03.436 --> 00:00:06.210
&gt;&gt; Brian Holt: So what is Redux?

3
00:00:06.210 --> 00:00:09.860
Well most of us are familiar with
Flux in some capacity right?

4
00:00:09.860 --> 00:00:13.130
If you've heard of React for the most part
of within the same couple sentences you're

5
00:00:13.130 --> 00:00:16.990
gonna say the word flux as well.

6
00:00:16.990 --> 00:00:19.350
I'm personally of the opinion,
like I'm gonna give this big disclaimer,

7
00:00:19.350 --> 00:00:20.640
we're gonna be using Redux, but

8
00:00:20.640 --> 00:00:24.390
this is definitely taking
a sledgehammer to a small nail problem.

9
00:00:24.390 --> 00:00:26.990
For the most part all
the principles I've shown you so

10
00:00:26.990 --> 00:00:30.050
far with React is enough
to make a small app.

11
00:00:30.050 --> 00:00:30.670
In other words for

12
00:00:30.670 --> 00:00:33.860
this small of an app, there's no reason
we should be using anything like Redux.

13
00:00:33.860 --> 00:00:38.770
It's too overpowering it's too much
of a big tool for a small tool job.

14
00:00:38.770 --> 00:00:39.440
React in and

15
00:00:39.440 --> 00:00:42.861
of itself is actually fairly good at
marshalling your state to where should be.

16
00:00:42.861 --> 00:00:48.420
And you use Redux once your state starts
growing into a bigger mess to handle and

17
00:00:48.420 --> 00:00:51.330
you need it to be more manageable and
more available.

18
00:00:53.520 --> 00:00:55.613
So let's talk about Flux a little bit.

19
00:00:55.613 --> 00:01:00.365
Because kinda the evolution of
things is there was Flux first and

20
00:01:00.365 --> 00:01:06.352
then Elm kinda took that the Elm language,
I don't know if you've heard of Elm.

21
00:01:06.352 --> 00:01:09.772
But Elm's a really cool, new functional
language to write interfaces.

22
00:01:09.772 --> 00:01:15.950
I'm really excited about is doing a Elm
class within, what, a month or so?

23
00:01:15.950 --> 00:01:18.120
&gt;&gt; Speaker 2: Yeah, April 14th and 15th.

24
00:01:18.120 --> 00:01:21.400
&gt;&gt; Brian Holt: From Richard Feldman
who's like awesome teacher, awesome guy.

25
00:01:21.400 --> 00:01:21.900
Bless you.

26
00:01:24.150 --> 00:01:28.174
So definitely something
to keep an eye out for.

27
00:01:28.174 --> 00:01:30.300
So there was Flux, Elm took Flux and

28
00:01:30.300 --> 00:01:34.920
just like really simplified it,
made it easier to interact with.

29
00:01:34.920 --> 00:01:36.980
Made it like a really cool thing.

30
00:01:36.980 --> 00:01:40.930
And then Dan Abramov who we've mentioned
several times during the course of

31
00:01:40.930 --> 00:01:41.670
this course.

32
00:01:42.890 --> 00:01:44.713
He's the guy that did hot module reload,

33
00:01:44.713 --> 00:01:47.388
he also works a bit on React
router sometimes I think as well.

34
00:01:47.388 --> 00:01:52.420
He had decided, well,
I won't give you the whole back story.

35
00:01:52.420 --> 00:01:55.659
But the basic gist is he took
the Elm architecture and

36
00:01:55.659 --> 00:01:59.840
kind of ported that as well to React and
just plain JavaScript.

37
00:01:59.840 --> 00:02:01.770
And the end result of that is Redux.

38
00:02:04.420 --> 00:02:08.880
So it's interesting to
know like what Flux is and

39
00:02:08.880 --> 00:02:13.010
then what Redux kind of riffed on flux is.

40
00:02:13.010 --> 00:02:16.380
So the basic idea is,
we have this one way data flow, right?

41
00:02:16.380 --> 00:02:18.383
That we've been dealing
with a lot in React, right?

42
00:02:18.383 --> 00:02:22.397
That you have this parent has a bunch of
data and then it gives some of its data

43
00:02:22.397 --> 00:02:26.684
down to the child, and that child gives
some of its data down the child, right?

44
00:02:26.684 --> 00:02:29.780
So it's just props passing down
props passing down props, right?

45
00:02:29.780 --> 00:02:31.040
That's kind of the idea.

46
00:02:31.040 --> 00:02:32.640
So data flows down but it never flows up.

47
00:02:32.640 --> 00:02:35.200
The child never hands any
data up to the parent,

48
00:02:35.200 --> 00:02:37.451
it's always data flowing down, right?

49
00:02:37.451 --> 00:02:40.649
And then you have these callback
functions that the child can say, hey,

50
00:02:40.649 --> 00:02:41.651
something happened.

51
00:02:41.651 --> 00:02:43.876
And it's up to the parent
to change something and

52
00:02:43.876 --> 00:02:45.728
then re-hand it back down to the child.

53
00:02:45.728 --> 00:02:49.290
But there's one source of truth and
it's at the parent level.

54
00:02:51.340 --> 00:02:54.790
So they kind of took this
another step further with Flux.

55
00:02:54.790 --> 00:02:56.346
So Flux you have a data store right?

56
00:02:56.346 --> 00:03:02.163
In fact I think I, I didn't put it in
here, but do I have a Flux diagram?

57
00:03:07.438 --> 00:03:08.200
&gt;&gt; Brian Holt: React, right?

58
00:03:08.200 --> 00:03:13.750
I'm sure there's lots of,
please Facebook don't fail me now.

59
00:03:15.840 --> 00:03:16.360
You're failing me.

60
00:03:18.410 --> 00:03:18.910
Okay.

61
00:03:21.512 --> 00:03:25.888
&gt;&gt; Brian Holt: This is the one I wanna
show you, so you basically have a store,

62
00:03:25.888 --> 00:03:26.472
right?

63
00:03:26.472 --> 00:03:27.685
And I think that a store makes sense,

64
00:03:27.685 --> 00:03:29.454
it's where we actually keep
all of our data, right?

65
00:03:29.454 --> 00:03:34.033
And then the the store passes all of
it's data that is needed to the view,

66
00:03:34.033 --> 00:03:36.552
right, and then the view displays it.

67
00:03:36.552 --> 00:03:38.110
But now something needs to happen right,

68
00:03:38.110 --> 00:03:40.960
like we need to change something,
right, like for our search term, right.

69
00:03:40.960 --> 00:03:43.660
We need to be able to update
from HO to HOU, right?

70
00:03:43.660 --> 00:03:48.410
There's state changing over time.

71
00:03:49.430 --> 00:03:52.930
So what the view does is that it's
kind of the same idea of like hey,

72
00:03:52.930 --> 00:03:54.150
something happened over here.

73
00:03:54.150 --> 00:03:57.490
And then it's up to basically
the store to be able to handle that.

74
00:03:58.690 --> 00:04:03.210
So I type U this fires off an action,
right?

75
00:04:03.210 --> 00:04:06.380
The action goes to what's called
the dispatcher and the dispatcher is just

76
00:04:06.380 --> 00:04:12.275
a really fancy term for a function that
just dispatches to other function, right?

77
00:04:12.275 --> 00:04:18.445
So, it comes in and it says, I see
an action type of update search term.

78
00:04:18.445 --> 00:04:21.215
So I'm gonna dispatch that to this other
function that's actually gonna go into

79
00:04:21.215 --> 00:04:22.675
the store and update it, right?

80
00:04:22.675 --> 00:04:25.855
So you're just firing off actions,
the actions go to the dispatcher,

81
00:04:25.855 --> 00:04:28.790
the dispatcher dispatches
that to another function, and

82
00:04:28.790 --> 00:04:30.600
that function updates the store, right.

83
00:04:30.600 --> 00:04:33.380
And then the store passes
that data back to the view.

84
00:04:33.380 --> 00:04:37.150
And then the view is just waiting for
more input to send off actions.

85
00:04:37.150 --> 00:04:42.350
So it's this very close tight loop
that the view sends up actions.

86
00:04:42.350 --> 00:04:45.520
Those actions get dispatched, update
the store, they get back to the view.

87
00:04:45.520 --> 00:04:47.620
And it's just this loop over and
over and over again.

88
00:04:49.290 --> 00:04:52.840
So what's nice about this
is it's very well defined.

89
00:04:52.840 --> 00:04:55.790
So if there's a breakdown in the process
then it usually becomes very obvious,

90
00:04:55.790 --> 00:04:57.470
very quickly where the breakdown is.

91
00:04:59.000 --> 00:05:01.595
I don't know if any of you have
worked much with like backbone or

92
00:05:01.595 --> 00:05:04.160
model-view-controllers or
Angular for that matter or

93
00:05:04.160 --> 00:05:06.470
I'm sure Ember has much the same problem.

94
00:05:08.310 --> 00:05:12.170
There's so many cross dependencies and
so many things that modify other things,

95
00:05:12.170 --> 00:05:15.660
that if something breaks you just don't
have any clue how it broke, right, and

96
00:05:15.660 --> 00:05:17.260
that's really a problem.

97
00:05:17.260 --> 00:05:18.430
By tightening this loop and

98
00:05:18.430 --> 00:05:22.430
making this loop very well defined, it's
very easy to follow these actions around.

99
00:05:25.510 --> 00:05:28.550
So that's kind of the basic idea,
this is a Flux.

100
00:05:28.550 --> 00:05:31.000
This is not Redux,this is Flux, right?

101
00:05:32.210 --> 00:05:37.145
And if if this speaks to you, feel free to
just run with Flux and there's plenty of

102
00:05:37.145 --> 00:05:41.439
people that do, that choose to not
do Redux and choose to go with Flux.

103
00:05:41.439 --> 00:05:44.850
And there's plenty of Flux
implementations out there.

104
00:05:44.850 --> 00:05:49.870
There's Flummox there's Alt,
I think Nuclear is another popular one.

105
00:05:51.810 --> 00:05:55.460
There's a bunch of these other
Flux like ideas out there.

106
00:05:56.720 --> 00:05:59.380
But as you can see this is
actually a fairly simple.

107
00:05:59.380 --> 00:06:02.900
Like there's not really much going on
here, like your dispatcher's really thin.

108
00:06:02.900 --> 00:06:07.650
The stores are really just big objects and
actions are just objects as well.

109
00:06:07.650 --> 00:06:10.690
They're objects that have an action
type and a value and that's it.

110
00:06:12.080 --> 00:06:14.520
In other words it's not very
hard to implement Flux.

111
00:06:14.520 --> 00:06:17.350
You can probably do it
within 50 lines of code.

112
00:06:17.350 --> 00:06:23.810
Any questions on Flux, because I'm gonna
build on Flux when I talk about Redux.

113
00:06:25.430 --> 00:06:28.380
&gt;&gt; Speaker 3: So if you're building
a smaller app would you want to use Flux

114
00:06:28.380 --> 00:06:29.850
over Redux?

115
00:06:29.850 --> 00:06:32.550
&gt;&gt; Brian Holt: I would say they
carry the same amount of weight.

116
00:06:32.550 --> 00:06:34.235
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Brian Holt: I would say if I'm building

117
00:06:34.235 --> 00:06:38.875
a small app, I'd just stick with vanilla
React, but that's a great question.

118
00:06:41.875 --> 00:06:46.262
&gt;&gt; Brian Holt: Redux is as lightweight
as Flux is, in other words.

119
00:06:53.016 --> 00:06:54.584
&gt;&gt; Brian Holt: Does this make sense?

120
00:06:54.584 --> 00:06:59.275
I mean, I realize we're still in the
abstract, we haven't written any code yet.

121
00:06:59.275 --> 00:07:04.555
And so if it's not concrete yet it's going
to get concrete very quickly, hopefully.

122
00:07:04.555 --> 00:07:05.055
[LAUGH]

