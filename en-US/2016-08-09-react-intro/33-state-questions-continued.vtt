WEBVTT

1
00:00:00.000 --> 00:00:04.187
[MUSIC]

2
00:00:04.187 --> 00:00:07.749
&gt;&gt; Speaker 1: How are each
of the included modules,

3
00:00:07.749 --> 00:00:12.515
how are they chosen in PM modules?
&gt;&gt; Brian: That's an in-depth question for

4
00:00:12.515 --> 00:00:13.360
another day.

5
00:00:13.360 --> 00:00:17.840
But I think that basic gist of it here is
that I basically looked at the project

6
00:00:17.840 --> 00:00:21.450
that I wanted to build which is a basic
Netflix clone and I just kind of.

7
00:00:21.450 --> 00:00:27.850
Hence, like the things, one that I
understood already, and two, just like

8
00:00:27.850 --> 00:00:33.690
that happened to fit the opinions
of what we wanted to achieve here.

9
00:00:33.690 --> 00:00:37.595
And that's kind of a lesson for you all
when you're starting your projects is,

10
00:00:37.595 --> 00:00:40.918
don't choose things just because
they're hot and shiny and nice,

11
00:00:40.918 --> 00:00:44.783
choose them because they fit what you're
going for what you're trying to do.

12
00:00:44.783 --> 00:00:48.541
So don't go for shininess slash
novelty but go for utility and

13
00:00:48.541 --> 00:00:53.740
if it's actually going to add something to
your project or if you're just doing it.

14
00:00:53.740 --> 00:00:56.955
Cuz you want another thing in
your LinkedIn endorsements.

15
00:00:59.061 --> 00:00:59.945
&gt;&gt; Brian: So hopefully that is

16
00:00:59.945 --> 00:01:03.513
a sufficiently vague answer.
&gt;&gt; [LAUGH]

17
00:01:03.513 --> 00:01:04.790
&gt;&gt; Speaker 1: Well there is a lot

18
00:01:04.790 --> 00:01:07.182
of thumbs up that came in so cool.

19
00:01:07.182 --> 00:01:11.990
There are quite a few people online.
&gt;&gt; Speaker 3: I think the official count

20
00:01:11.990 --> 00:01:14.824
is 162.
&gt;&gt; Brian: Cool, 162 people online,

21
00:01:14.824 --> 00:01:16.210
that's awesome.
&gt;&gt; Speaker 1: Yeah,

22
00:01:16.210 --> 00:01:19.190
we have a bunch of questions, so.
&gt;&gt; Speaker 3: Yeah, the next one was,

23
00:01:19.190 --> 00:01:24.770
we were loading the data from
a file in our bundle, in JS.

24
00:01:24.770 --> 00:01:29.720
Are we going to go over the approach
of using AJAX to request this data.

25
00:01:29.720 --> 00:01:32.870
&gt;&gt; Brian: Yeah, that's one of the later

26
00:01:32.870 --> 00:01:38.640
lessons today.
&gt;&gt; Speaker 3: Okay, and

27
00:01:38.640 --> 00:01:43.990
then have you ever, have you developed
a starter NPM file or a starter standard,

28
00:01:43.990 --> 00:01:47.210
one that used for react.
&gt;&gt; Brian: I typically don't use

29
00:01:47.210 --> 00:01:48.180
boilerplates.

30
00:01:48.180 --> 00:01:53.060
I don't know if I necessarily have
a reason for that, I just haven't.

31
00:01:53.060 --> 00:01:56.083
But there are lots and lots and
lots of them out there for

32
00:01:56.083 --> 00:01:58.977
React and Redux and
Hot Module reload and Webpack and

33
00:01:58.977 --> 00:02:03.251
there's lots of other plates out there
that I'm sure you can Google it just as

34
00:02:03.251 --> 00:02:10.655
well as I can.
&gt;&gt; Speaker 3: And

35
00:02:10.655 --> 00:02:15.004
then the question on global npm
installs They're saying that they've

36
00:02:15.004 --> 00:02:19.428
attempted to stay away from global MPM
in favor of local dependencies and

37
00:02:19.428 --> 00:02:21.200
supporting MPM scripts.

38
00:02:21.200 --> 00:02:23.344
Is that a worthwhile effort
from your perspective?

39
00:02:26.976 --> 00:02:28.375
&gt;&gt; Brian: I use global installs for

40
00:02:28.375 --> 00:02:31.490
things that I used often, like Webpack.

41
00:02:31.490 --> 00:02:35.800
I can jump from project to project and
just save, Webpack run.

42
00:02:35.800 --> 00:02:39.430
Most of these projects are smart enough to
say, if there's a local version of this

43
00:02:39.430 --> 00:02:42.050
I'm gonna go use that so
that you get the right version.

44
00:02:42.050 --> 00:02:47.460
And then if if not then I'm gonna run
it from whatever my global install is.

45
00:02:47.460 --> 00:02:49.010
So I mean it's totally up to you.

46
00:02:49.010 --> 00:02:52.460
If that still is something you
wanna avoid then go for it.

47
00:02:52.460 --> 00:02:57.077
I personally don't but I don't necessarily
have a great reason for that either so,

48
00:02:57.077 --> 00:03:06.015
up to you.
&gt;&gt; Speaker 3: They're

49
00:03:06.015 --> 00:03:10.334
just wanting to know, go over again,
why do you prefer not using semicolons and

50
00:03:10.334 --> 00:03:15.380
where is it not allowed?
&gt;&gt; Brian: I like using or

51
00:03:15.380 --> 00:03:16.474
not using semicolons.

52
00:03:16.474 --> 00:03:20.270
Cuz one, it's one less character
type at the end of every statement.

53
00:03:23.100 --> 00:03:26.210
There is really no drawback to it,
there's no performance gains or

54
00:03:26.210 --> 00:03:29.900
losses, it's totally a wash in that sense.

55
00:03:31.860 --> 00:03:37.030
There is one gotcha with it that you can't
start a new line with a parenthesis or

56
00:03:37.030 --> 00:03:39.810
a square bracket or anything like that.

57
00:03:39.810 --> 00:03:43.020
But we're using standard that will
automatically catch us from doing

58
00:03:43.020 --> 00:03:43.680
something like that.

59
00:03:45.130 --> 00:03:50.020
It just disallows starting new
lines with that and beyond that

60
00:03:50.020 --> 00:03:51.190
it's purely a preference thing.

61
00:03:51.190 --> 00:03:54.570
If you really don't feel comfortable
with it then that's okay with me

62
00:03:54.570 --> 00:03:59.720
too.
&gt;&gt; Speaker 3: Next one is,

63
00:03:59.720 --> 00:04:04.667
can you go over how props are passed
down in both react.create class and

64
00:04:04.667 --> 00:04:09.850
a state list component.
&gt;&gt; Brian: Well

65
00:04:09.850 --> 00:04:11.993
the way to the past down
is totally agnostic, right?

66
00:04:11.993 --> 00:04:16.095
In fact, here's a good example,

67
00:04:16.095 --> 00:04:19.914
you just say name of your prop and

68
00:04:19.914 --> 00:04:24.030
valueIWantToPassDown, right?

69
00:04:24.030 --> 00:04:25.190
Oops, you need an equals sign there.

70
00:04:27.040 --> 00:04:31.460
So you don't actually have to care what
kind of component show card is and

71
00:04:31.460 --> 00:04:34.180
I think that's kind of the beauty
of whether it's a class or

72
00:04:34.180 --> 00:04:39.230
a status function or
a create class component.

73
00:04:41.120 --> 00:04:44.390
Search which is what we're in right
now search.jsx is totally agnostic

74
00:04:44.390 --> 00:04:45.640
to whatever this is.

75
00:04:45.640 --> 00:04:49.920
And you always pass them down the same
way and yeah, you just do it this way

76
00:04:49.920 --> 00:04:54.310
with the name of your key here and then
the value that you're passing down here.

77
00:04:56.240 --> 00:04:57.880
You can also like make this, oops,

78
00:04:57.880 --> 00:05:04.448
make this string as well and
that's how you make it a string as well.

79
00:05:04.448 --> 00:05:07.100
That's very HTML-ish right?

80
00:05:07.100 --> 00:05:13.515
It's kind of the point.
&gt;&gt; Brian: Other

81
00:05:13.515 --> 00:05:16.226
questions?
&gt;&gt; Speaker 3: What are your thoughts on

82
00:05:16.226 --> 00:05:21.155
tools that aim to address the headache
of tooling, with developing,

83
00:05:21.155 --> 00:05:23.664
react TS, for example RWB?
&gt;&gt; Brian: Yeah,

84
00:05:23.664 --> 00:05:26.379
there's a couple projects out there.

85
00:05:26.379 --> 00:05:29.753
There is react project which is
the one from Ryan Florence, that's one

86
00:05:29.753 --> 00:05:34.032
I've twittered around a little bit with.
&gt;&gt; Brian: I don't

87
00:05:34.032 --> 00:05:38.880
know if RWB is the one from Pete Hunt, but
there's another one out there as well.

88
00:05:38.880 --> 00:05:43.583
They're all trying to emulate Ember CLI
which is like one of the most

89
00:05:43.583 --> 00:05:48.618
compelling reasons to use Ember because
Ember CLI is just like amazing,

90
00:05:48.618 --> 00:05:52.185
it helps you scaffold up
a product really quickly.

91
00:05:52.185 --> 00:05:56.110
It will run a server for you, it just
has a bunch of the right opinions for

92
00:05:56.110 --> 00:06:00.183
Ember and people coming from member
to react really miss using Ember CLI.

93
00:06:00.183 --> 00:06:02.800
We're all trying to rush in
get the right thing there.

94
00:06:06.390 --> 00:06:12.305
Yeah I haven't found one compelling enough
that I just like always go to it yet,

95
00:06:12.305 --> 00:06:14.264
like I found my Ember CLI.

96
00:06:14.264 --> 00:06:17.449
And I guess that's part of the extent of
my opinion on the subject as I haven't

97
00:06:17.449 --> 00:06:19.170
found one compelling enough yet.

98
00:06:19.170 --> 00:06:23.811
But I'm excited for people working on it
to hopefully get one right in the future

99
00:06:23.811 --> 00:06:30.839
that we can go ahead and all rally around.
&gt;&gt; Speaker 3: How

100
00:06:30.839 --> 00:06:33.364
is Netflix managing node modules?

101
00:06:33.364 --> 00:06:36.710
Presumably Netflix doesn't
update from public mpm.

102
00:06:38.680 --> 00:06:43.120
&gt;&gt; Brian: I think the Hevlevy

103
00:06:43.120 --> 00:06:47.350
answer I should give is that we do have
something in from the public registry.

104
00:06:49.190 --> 00:06:51.790
And I'm going to leave it at that.

105
00:06:51.790 --> 00:06:57.110
Unfortunately, sorry.
&gt;&gt; Speaker 3: How

106
00:06:57.110 --> 00:06:59.990
well does RxJS play with react.

107
00:06:59.990 --> 00:07:03.160
For instance use it for the search filter
that we were working on yesterday.

108
00:07:04.960 --> 00:07:06.870
&gt;&gt; Brian: Yeah, well,

109
00:07:06.870 --> 00:07:09.450
it's something that bears
mentioning is that.

110
00:07:09.450 --> 00:07:13.239
It the project is called to react but
it is not reactive really at all.

111
00:07:13.239 --> 00:07:17.938
[LAUGH] That confuses a lot of
people to hear reactive programmers,

112
00:07:17.938 --> 00:07:19.590
react as like no.

113
00:07:19.590 --> 00:07:22.490
React to programming and
react are very very different.

114
00:07:22.490 --> 00:07:26.660
To the point that react is actually
becoming more scheduling and botched base.

115
00:07:26.660 --> 00:07:31.650
And reactive is obviously, reactive
uses observables and things like that.

116
00:07:32.830 --> 00:07:36.760
So I just want to dispel that
connotation in anyone's mind.

117
00:07:36.760 --> 00:07:40.860
Now the question asked is does RX and
the play nicely with react?

118
00:07:40.860 --> 00:07:45.818
And the answer is as in as well as,
any asynchronous type works with

119
00:07:45.818 --> 00:07:51.790
reactor it fairs, no better no worse
than using promises with react.

120
00:07:51.790 --> 00:07:55.040
It's just another methodology
of using of asynchronous code.

121
00:07:55.040 --> 00:07:57.910
For the most part,
I mean we do use obviously

122
00:07:57.910 --> 00:08:00.630
RX everywhere particularly in our
back end services at Netflix.

123
00:08:02.840 --> 00:08:05.220
We don't have a ton of reason
to use them in our front end so

124
00:08:05.220 --> 00:08:06.800
we just like, we don't force it right.

125
00:08:06.800 --> 00:08:08.470
We don't necessarily have
to have them in there.

126
00:08:10.770 --> 00:08:15.400
That in the Netflix interface particular
non-member side which is what I work on,

127
00:08:15.400 --> 00:08:17.760
there's not tons of asynchrony.

128
00:08:17.760 --> 00:08:23.170
So we tend not to include RxJS just
because it is such a large project and

129
00:08:23.170 --> 00:08:26.020
it's kind of a sledgehammer for
a tiny nail problem.

130
00:08:28.140 --> 00:08:32.120
But it does play nicely if I mean
if that's what you're going for

131
00:08:32.120 --> 00:08:37.328
if you're looking for, reactive push
type asynchrony it works really

132
00:08:37.328 --> 00:08:44.300
well for that.
&gt;&gt; Speaker 3: Question,

133
00:08:44.300 --> 00:08:46.490
can you go over this dot state again?

134
00:08:46.490 --> 00:08:49.540
Do you need to define
get initial state to use

135
00:08:49.540 --> 00:08:51.990
it?
&gt;&gt; Brian: Yeah do I

136
00:08:51.990 --> 00:08:53.160
have state in this one too?

137
00:08:53.160 --> 00:08:58.580
I do, so the answer is,
I just want tell you yes,

138
00:08:58.580 --> 00:09:02.640
you must do this because you really
really really really really should.

139
00:09:04.490 --> 00:09:07.610
This is just useful documentation for
your future self and everyone else

140
00:09:07.610 --> 00:09:11.860
coming to us like here's all the state
that I plan on tracking throughout this.

141
00:09:11.860 --> 00:09:14.750
There's nothing to say that down
here you can't just initiate

142
00:09:14.750 --> 00:09:17.080
a search term without having done it here.

143
00:09:17.080 --> 00:09:20.310
But it's just good practice to make
sure that you're defining all of your

144
00:09:20.310 --> 00:09:22.720
state before you're using it.

145
00:09:22.720 --> 00:09:28.480
In fact there should really be a literal
for that if there isn't already, so

146
00:09:28.480 --> 00:09:29.950
the answer is you can get around it,

147
00:09:29.950 --> 00:09:34.280
the end but the real answer is you
really don't want to get around it.

148
00:09:34.280 --> 00:09:37.292
This is very useful for you and
you should really always do

149
00:09:37.292 --> 00:09:43.688
this.
&gt;&gt; Speaker 3: What

150
00:09:43.688 --> 00:09:47.879
are your thoughts on electron
with react in GS for

151
00:09:47.879 --> 00:09:51.050
desktops apps in general.
&gt;&gt; Brian: I

152
00:09:51.050 --> 00:09:55.600
really don't have a good answer for
that, I've only toyed with electron.

153
00:09:55.600 --> 00:10:00.313
So everything I'm about to
say is just conjecture and

154
00:10:00.313 --> 00:10:04.060
to take that face value.
&gt;&gt; Speaker 1: I think we'll do a React

155
00:10:04.060 --> 00:10:07.921
native course in the future but
yeah maybe even the summer.

156
00:10:07.921 --> 00:10:09.358
&gt;&gt; Brian: That would be really cool,

157
00:10:09.358 --> 00:10:12.874
react native and or and or electron.
&gt;&gt; Speaker 1: Yeah.

158
00:10:12.874 --> 00:10:14.238
&gt;&gt; Brian: It's really cool it should fit

159
00:10:14.238 --> 00:10:15.080
together nicely.

160
00:10:15.080 --> 00:10:18.300
I know a bunch of people
are using react with electron.

161
00:10:18.300 --> 00:10:19.580
I know Adam used to and

162
00:10:19.580 --> 00:10:22.560
they actually ended up migrating
away from it but that's because Adam

163
00:10:23.580 --> 00:10:28.170
has a level of performance requirements
even higher than what react could offer.

164
00:10:28.170 --> 00:10:31.510
And so it was too much of
an abstraction for them.

165
00:10:31.510 --> 00:10:35.630
I would say most people are not creating
text editors where you expect a type and

166
00:10:35.630 --> 00:10:38.370
immediately see it and
you're editing huge files, right?

167
00:10:38.370 --> 00:10:42.060
So most people don't have that
severe performance concerns and

168
00:10:42.060 --> 00:10:43.320
you shouldn't right?

169
00:10:43.320 --> 00:10:45.220
It usually reacts as sufficiently fast for

170
00:10:45.220 --> 00:10:49.899
most problems.
&gt;&gt; Brian: I know other people are using

171
00:10:49.899 --> 00:10:52.151
it, at this point I might be making it up.

172
00:10:52.151 --> 00:10:56.551
But I recall it Spotify, because I know
Spotify is built on either Electron or

173
00:10:56.551 --> 00:10:57.440
node-webkit.

174
00:10:57.440 --> 00:11:02.430
One of the two or NW, I guess is what it's
called now and that seems to work okay.

175
00:11:04.100 --> 00:11:10.356
So yeah anything that works in a browser
should work fairly well and in electron,

176
00:11:10.356 --> 00:11:16.494
that's about all I can say about that.
&gt;&gt; Speaker 3: [LAUGH]

177
00:11:16.494 --> 00:11:17.349
Another question,

178
00:11:17.349 --> 00:11:19.820
Webpack is great because
of hot module replacement.

179
00:11:19.820 --> 00:11:26.210
Can you do something similar with roll up?
&gt;&gt; Brian: I don't think so,

180
00:11:26.210 --> 00:11:28.380
not that I'm aware of.

181
00:11:28.380 --> 00:11:32.460
We will talk about hot module reload today
but we're just going to talk about it.

182
00:11:32.460 --> 00:11:37.500
We're not actually going to implement
it and I'll talk about the rest that

183
00:11:37.500 --> 00:11:41.870
when we get there again.
&gt;&gt; Speaker 3: Okay this is going to follow

184
00:11:41.870 --> 00:11:46.770
up to a previous question are the props
passed down and react create class.

185
00:11:46.770 --> 00:11:49.940
I notice when you use a stateless
class the example had

186
00:11:49.940 --> 00:11:52.040
props as an explicit parameter.

187
00:11:52.040 --> 00:11:55.180
This wasn't the case when
using react create class,

188
00:11:55.180 --> 00:11:59.830
why is that?
&gt;&gt; Brian: Well we're doing React

189
00:11:59.830 --> 00:12:03.670
createClass here, this actually is
creating an entire context for us, right?

190
00:12:03.670 --> 00:12:07.360
Like this is actually an object
component that we have and

191
00:12:07.360 --> 00:12:09.740
thus it has of this, right?

192
00:12:09.740 --> 00:12:15.250
So if we go over to the landing,
if you do this in here,

193
00:12:15.250 --> 00:12:17.460
it's going to refer to
the function prototype, right?

194
00:12:17.460 --> 00:12:20.920
Because this isn't actually any sort
of objects or any sort of functions.

195
00:12:20.920 --> 00:12:24.810
It's literally just a bare
bones JavaScript function, so

196
00:12:24.810 --> 00:12:28.330
react to can't hook into this and make it.

197
00:12:29.960 --> 00:12:31.960
They can't give it a context right?

198
00:12:31.960 --> 00:12:34.460
So that's why you have
to put props into here

199
00:12:34.460 --> 00:12:36.850
because that's the only way it's
gonna get those props passed in.

200
00:12:38.600 --> 00:12:43.893
And that's the necessary part of
moving to a stateless functional

201
00:12:43.893 --> 00:12:50.375
component.
&gt;&gt; Speaker 3: Are there

202
00:12:50.375 --> 00:12:53.619
any react form validation
libraries that you

203
00:12:53.619 --> 00:12:56.845
recommend?
&gt;&gt; Brian: The only one that I'm aware of

204
00:12:56.845 --> 00:12:59.200
that I have never ever used.

205
00:12:59.200 --> 00:13:05.960
So again venture at your own peril
is formally like most of you that

206
00:13:05.960 --> 00:13:10.710
have done angular have heard of angular
formally there is a reactor formally.

207
00:13:10.710 --> 00:13:12.170
I don't know how well baked it is.

208
00:13:13.400 --> 00:13:14.250
I know Kent and

209
00:13:14.250 --> 00:13:16.840
he's going to come and teach I think in
front of master sometime in the future.

210
00:13:18.240 --> 00:13:21.540
He's a brilliant developer and probably
one of the nicest people I've ever met.

211
00:13:22.590 --> 00:13:28.180
And he maintains that project and
I know people just go crazy for

212
00:13:28.180 --> 00:13:31.660
angular formerly and so
I imagine react form they can be only as

213
00:13:31.660 --> 00:13:37.390
good.
&gt;&gt; Speaker 3: With

214
00:13:37.390 --> 00:13:40.080
respect to testing the reactor
you mostly testing UI,

215
00:13:40.080 --> 00:13:44.050
do you keep your business logic elsewhere?
&gt;&gt; Brian: We're literally about to talk

216
00:13:44.050 --> 00:13:49.270
about that but
that's like the next section but yeah.

217
00:13:49.270 --> 00:13:52.356
What we'll talk about the next session
if I don't sufficiently answer that,

218
00:13:52.356 --> 00:13:55.453
then ask it again.
&gt;&gt; Speaker 3: Question on hash history

219
00:13:55.453 --> 00:14:00.410
versus browser history,
hash history seems easiest but ugliest.

220
00:14:00.410 --> 00:14:05.520
Browser history is pretty but needy in
terms of server routing support for

221
00:14:05.520 --> 00:14:07.508
deep links, thoughts?
&gt;&gt; Brian: Agreed,

222
00:14:07.508 --> 00:14:11.590
[LAUGH] I totally agree
with that assertion.

223
00:14:11.590 --> 00:14:15.960
And we're gonna switch to browser
history later today so we'll talk

224
00:14:15.960 --> 00:14:19.260
about that as well, more in-depth.
&gt;&gt; Speaker 3: Is there any way to

225
00:14:19.260 --> 00:14:21.780
get around hot module
reloading not working

226
00:14:22.950 --> 00:14:25.160
well with stateless components?
&gt;&gt; Brian: No,

227
00:14:25.160 --> 00:14:28.030
not as far as I know which is
why we're not doing it today.

228
00:14:28.030 --> 00:14:31.420
That's actually the very reason that
we're not gonna implement it today.

