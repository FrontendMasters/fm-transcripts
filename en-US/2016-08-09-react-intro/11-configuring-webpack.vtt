WEBVTT

1
00:00:00.000 --> 00:00:03.953
[MUSIC]

2
00:00:03.953 --> 00:00:08.000
&gt;&gt; Brian Holt: So eventually we're gonna
be doing some pretty fun slash crazy stuff

3
00:00:08.000 --> 00:00:11.276
with webpack and
trying to put that on the command line,

4
00:00:11.276 --> 00:00:13.663
that one line is gonna get really crazy.

5
00:00:13.663 --> 00:00:18.752
And it's actually better for us to
abstract that out into just a config file,

6
00:00:18.752 --> 00:00:21.119
so we're gonna do that real quick.

7
00:00:22.450 --> 00:00:26.686
So come back over to your project,
create a new file and call it webpack,

8
00:00:26.686 --> 00:00:31.346
gotta remember it, webpack.config.js.

9
00:00:31.346 --> 00:00:33.233
It actually is significant,

10
00:00:33.233 --> 00:00:37.990
what you call it because webpack looks
specifically for that file, okay?

11
00:00:39.650 --> 00:00:43.250
And make sure it goes in the root
directory of your project,

12
00:00:43.250 --> 00:00:44.765
not in the js directory.

13
00:00:48.302 --> 00:00:52.710
&gt;&gt; Brian Holt: Okay, so now we have this
webpack.config.js in our root directory.

14
00:00:54.480 --> 00:00:56.335
And we just gotta put
a couple things in here.

15
00:00:58.530 --> 00:01:00.557
&gt;&gt; Brian Holt: So
we're gonna pull in path.

16
00:01:00.557 --> 00:01:05.648
That's a node module,
&gt;&gt; Brian Holt: That

17
00:01:05.648 --> 00:01:10.287
allows us to do some path resolution that
just makes creating relative paths and

18
00:01:10.287 --> 00:01:15.694
absolute paths a little bit easier,
&gt;&gt; Brian Holt: And

19
00:01:15.694 --> 00:01:18.261
then we're going to say module.exports.

20
00:01:18.261 --> 00:01:20.020
&gt;&gt; Sneezing Student: [SOUND]
&gt;&gt; Brian Holt: Bless you, and

21
00:01:20.020 --> 00:01:24.815
we're gonna export an object and this
object is going to be fed into webpack and

22
00:01:24.815 --> 00:01:27.590
then webpack is gonna use all of these for
us.

23
00:01:30.190 --> 00:01:34.720
Okay, so context and
then you're gonna do underscore,

24
00:01:34.720 --> 00:01:39.030
underscore, two underscores dirname.

25
00:01:39.030 --> 00:01:41.920
Again, this is something that web,
or sorry not webpack,

26
00:01:41.920 --> 00:01:46.940
but node exposes to us that basically lets
you know where you're running this from.

27
00:01:46.940 --> 00:01:50.626
So now I can run this from anywhere
inside of my project and it's gonna work.

28
00:01:50.626 --> 00:01:55.433
That's why that context is important,
okay?

29
00:01:55.433 --> 00:01:57.438
And then we're going to do entry.

30
00:02:00.057 --> 00:02:04.156
&gt;&gt; Brian Holt: My notes
are incorrect here, so entry.

31
00:02:04.156 --> 00:02:08.320
[COUGH] If you remember if you look over
a package.json real quick it's this piece

32
00:02:08.320 --> 00:02:15.570
right here is letting it us know where
we're going to enter our webpack.

33
00:02:15.570 --> 00:02:18.250
It lets us know what the the main file for
our project is,

34
00:02:18.250 --> 00:02:19.744
that's what I'm getting at.

35
00:02:19.744 --> 00:02:27.737
So here we're gonna say ./js/ClientApp.js.

36
00:02:27.737 --> 00:02:30.763
We're actually gonna rename
that here in a second,

37
00:02:30.763 --> 00:02:33.524
but for
right now it's sufficient to say that.

38
00:02:33.524 --> 00:02:37.912
Okay, now we're gonna say output and this
is gonna say that second part of where we

39
00:02:37.912 --> 00:02:40.082
gonna put the bundle when we're done.

40
00:02:40.082 --> 00:02:49.511
path: path.join{__dirname} and

41
00:02:49.511 --> 00:02:57.580
then we're gong to say /public.

42
00:02:57.580 --> 00:03:00.670
So again this is just making sure
that this is always going to

43
00:03:00.670 --> 00:03:04.740
go to the correct public directory and
path is just doing,

44
00:03:04.740 --> 00:03:08.443
it's a nice little helper method to make
sure that that path bundles up nicely.

45
00:03:08.443 --> 00:03:14.072
Okay, and then filename,

46
00:03:14.072 --> 00:03:20.450
all lowercase, bundle.js.

47
00:03:20.450 --> 00:03:21.840
Hopefully self-explanatory,

48
00:03:21.840 --> 00:03:23.960
that it's, that's the name
of the file when it's done.

49
00:03:26.810 --> 00:03:28.580
Okay, then we're going to do resolve.

50
00:03:31.490 --> 00:03:32.595
That's another object.

51
00:03:36.551 --> 00:03:41.710
&gt;&gt; Brian Holt: Remember when we said, dot
slash my title, and we omitted the .js?

52
00:03:41.710 --> 00:03:45.660
Basically you need to tell webpack,
if you want to use that,

53
00:03:45.660 --> 00:03:49.069
you don't have to use that, you can always
refer to the extension as well, but

54
00:03:49.069 --> 00:03:52.350
I'm hashtag lazy, so I don't like to.

55
00:03:52.350 --> 00:03:56.511
So you can basically tell it here's the
order of file extensions that I want you

56
00:03:56.511 --> 00:03:57.216
to look for.

57
00:03:57.216 --> 00:03:59.040
So if it's not .js look for .jsx.

58
00:03:59.040 --> 00:04:03.613
If it's not .jsx look for .jsn.

59
00:04:03.613 --> 00:04:05.023
So we're gonna say extensions.

60
00:04:08.560 --> 00:04:09.813
&gt;&gt; Brian Holt: We're gonna say blank.

61
00:04:09.813 --> 00:04:13.454
So first thing we want you to look for
is if it's I'm looking for

62
00:04:13.454 --> 00:04:18.144
./my-title look for something literally
called my title with no extension.

63
00:04:18.144 --> 00:04:21.613
After that look for .js.

64
00:04:21.613 --> 00:04:24.684
After that, look for .jsx.

65
00:04:24.684 --> 00:04:29.900
And after that look for
.json, that makes sense?

66
00:04:29.900 --> 00:04:32.926
So it kinda goes through this
progression of okay I didn't find this,

67
00:04:32.926 --> 00:04:36.486
I'm gonna look for this, I'm gonna look
for this and I'm gonna go look for this.

68
00:04:42.073 --> 00:04:45.136
&gt;&gt; Brian Holt: So this can end some
ambiguity if you have multiple files

69
00:04:45.136 --> 00:04:47.885
called the same thing such
as just don't do that.

70
00:04:50.045 --> 00:04:51.705
Question from online?

71
00:04:51.705 --> 00:04:53.335
&gt;&gt; Speaker 3: I think I got it.

72
00:04:53.335 --> 00:04:53.835
&gt;&gt; Brian Holt: Okay.

73
00:04:58.384 --> 00:05:00.699
&gt;&gt; Brian Holt: Any questions
about extensions or resolve.

74
00:05:02.850 --> 00:05:03.350
Okay.

75
00:05:05.190 --> 00:05:07.010
Stats.

76
00:05:07.010 --> 00:05:10.500
We wanted to kind of see what's
going on with our webpack config.

77
00:05:10.500 --> 00:05:15.170
We wanted to output nice things so we
can kind of get a grasp what's going on.

78
00:05:15.170 --> 00:05:16.420
So colors true.

79
00:05:16.420 --> 00:05:20.230
That's always helpful so you can kind of
distinguish pieces that really quickly.

80
00:05:21.950 --> 00:05:25.169
And colors is basically like if
we go back over here real quick,

81
00:05:25.169 --> 00:05:27.890
notice that this is in green,
this is in green.

82
00:05:27.890 --> 00:05:34.036
We want it to display in colors so
it's easier to parse very quickly.

83
00:05:34.036 --> 00:05:35.093
Reasons true and

84
00:05:35.093 --> 00:05:39.705
what this is going to do is it's going
to give us verbose error messages.

85
00:05:39.705 --> 00:05:41.988
So when crap blows up
you want to know why.

86
00:05:41.988 --> 00:05:46.180
That's the gist here and then chunks.

87
00:05:46.180 --> 00:05:50.212
We're gonna talk about chunks at, it's
the very last part of this workshop but

88
00:05:50.212 --> 00:05:54.424
right now we don't want it to display any
chunk of messaging because it's noisy and

89
00:05:54.424 --> 00:05:56.680
we're not doing any chunking right now.

90
00:05:56.680 --> 00:05:57.880
So just do chunks false.

91
00:06:03.960 --> 00:06:09.550
&gt;&gt; Brian Holt: Okay,
last part here is we're gonna do module.

92
00:06:10.990 --> 00:06:13.790
These are all the external modules
that you want webpack to pull in.

93
00:06:13.790 --> 00:06:19.373
I'm gonna say loaders and
loaders is an array.

94
00:06:22.504 --> 00:06:25.092
&gt;&gt; Brian Holt: And this is basically
the array of different extra

95
00:06:25.092 --> 00:06:28.330
build steps that you want
it to plug into the middle.

96
00:06:28.330 --> 00:06:30.780
The nice thing about loaders is you
can you can have a bunch of them,

97
00:06:30.780 --> 00:06:35.310
and you basically supply, it's do this
then do this then do this then do that.

98
00:06:35.310 --> 00:06:38.650
So you're just giving it an order, you're
building your build pipeline right here.

99
00:06:40.890 --> 00:06:42.010
Okay.
So

100
00:06:42.010 --> 00:06:44.540
right now we're gonna only have one loader
that we care about which is going to

101
00:06:44.540 --> 00:06:45.140
the babel one.

102
00:06:46.350 --> 00:06:48.160
So the first thing
you're gonna do is test.

103
00:06:49.870 --> 00:06:53.100
And what test is, is it's gonna say, if

104
00:06:53.100 --> 00:06:58.090
a filename passes this regular expression,
then run it through this loader, right?

105
00:06:58.090 --> 00:07:01.890
So for example, we don't want babel
running on CSS for example, right?

106
00:07:01.890 --> 00:07:05.230
That would be really silly because
that doesn't make any sense.

107
00:07:05.230 --> 00:07:07.620
But we want it running on
anything that's js or jsx.

108
00:07:10.100 --> 00:07:11.060
Okay?

109
00:07:11.060 --> 00:07:15.760
So if you're not familiar with
regular expression in JavaScript,

110
00:07:15.760 --> 00:07:17.550
they're between slashes.

111
00:07:18.670 --> 00:07:22.905
Okay?
And then you're gonna do backslash.

112
00:07:22.905 --> 00:07:24.653
Sorry.
We'll start over.

113
00:07:24.653 --> 00:07:29.646
We're going to do /

114
00:07:29.646 --> 00:07:34.640
then we're gonna do

115
00:07:34.640 --> 00:07:39.051
\.jsx?$/.

116
00:07:39.051 --> 00:07:42.669
So one, this is definitely not
a workshop on regular expressions.

117
00:07:44.190 --> 00:07:46.300
One, because I'm not super good at these.

118
00:07:47.640 --> 00:07:50.340
I used to have to write them for
my very first web development job,

119
00:07:50.340 --> 00:07:52.470
and they were just a mess.

120
00:07:52.470 --> 00:07:55.720
But the basic gist of it here is

121
00:07:55.720 --> 00:07:57.790
the dollar sign mean it's always
going to come at the end, right?

122
00:07:57.790 --> 00:07:59.309
Cuz file extensions are always at the end.

123
00:08:01.090 --> 00:08:04.870
The backslash here is escaping because
we wanna literally look for a period.

124
00:08:04.870 --> 00:08:09.070
Otherwise period has meaning
within regular expression.

125
00:08:09.070 --> 00:08:11.610
Then we always want to look for js, right?

126
00:08:11.610 --> 00:08:15.830
Because whether it's js or jsx, we wanna
be looking for those kind of files.

127
00:08:15.830 --> 00:08:21.960
And then the x question mark basically
means the x can or cannot be here.

128
00:08:21.960 --> 00:08:25.470
So if it's .js works,
if it's .jsx it works.

129
00:08:25.470 --> 00:08:26.620
So it's optionally there.

130
00:08:29.090 --> 00:08:32.407
Is that a sufficient explanation of
regular expressions cuz that's about how

131
00:08:32.407 --> 00:08:33.747
you're going to get out of me.

132
00:08:33.747 --> 00:08:34.510
[LAUGH]
&gt;&gt; Speaker 4: I have

133
00:08:34.510 --> 00:08:38.694
one really awesome resource too,
which is regxr.com.

134
00:08:38.694 --> 00:08:41.297
&gt;&gt; Brian Holt: Okay.
&gt;&gt; Speaker 4: It's just regxr.com and

135
00:08:41.297 --> 00:08:45.750
it shows highlighting
around different groupings.

136
00:08:47.270 --> 00:08:50.500
And it'll tell you,
if you highlight over A-Z for instance,

137
00:08:50.500 --> 00:08:53.270
it'll give you tips on what that means.

138
00:08:53.270 --> 00:08:55.963
&gt;&gt; Brian Holt: Cool, so you can probably
just grab this out of here right now.

139
00:09:00.060 --> 00:09:06.375
&gt;&gt; Brian Holt: And now you can take
a look at what that actually means.

140
00:09:06.375 --> 00:09:11.916
Cool, thanks man.

141
00:09:11.916 --> 00:09:17.657
Okay, my consistent motto in life is that
if you're using regular expressions,

142
00:09:17.657 --> 00:09:19.995
you probably are doing it wrong.

143
00:09:19.995 --> 00:09:22.432
[LAUGH] There's usually
a better way to do it.

144
00:09:26.671 --> 00:09:33.519
&gt;&gt; Brian Holt: Okay, so
now we're gonna do loader, babel-loader.

145
00:09:33.519 --> 00:09:36.804
And this is basically saying
anything that this returns true on,

146
00:09:36.804 --> 00:09:38.307
run it through Babel loader.

147
00:09:44.092 --> 00:09:47.112
&gt;&gt; Brian Holt: That's it,
that's all for our webpack config.

148
00:09:49.305 --> 00:09:52.454
&gt;&gt; Brian Holt: [COUGH] Webpack works
nicely out of the box to just compile

149
00:09:52.454 --> 00:09:56.206
modules, but as soon as you start
trying to do much more than that,

150
00:09:56.206 --> 00:09:58.912
it's a lot of set up to
get it to work correctly.

151
00:09:58.912 --> 00:10:01.669
And it's a lot of fidgeting
to get things correct.

152
00:10:03.050 --> 00:10:06.110
Which is why a lot of people complain
that webpack is too complicated.

153
00:10:07.684 --> 00:10:10.880
It is, this is a little silly for

154
00:10:10.880 --> 00:10:14.690
our little toy project that we wanna
bundle and run it through Babel.

155
00:10:14.690 --> 00:10:16.460
I think it could be a little easier,
but then again,

156
00:10:16.460 --> 00:10:19.440
we did have it running just
with our package.json too.

157
00:10:19.440 --> 00:10:22.030
So take that for what you will.

158
00:10:25.480 --> 00:10:30.276
So what's beautiful about this now is I
can actually go remove all this crap in my

159
00:10:30.276 --> 00:10:30.784
build.

160
00:10:30.784 --> 00:10:33.328
So now it just runs webpack.

161
00:10:33.328 --> 00:10:40.700
Because it's gonna grab all that
configuration out of my webpack config.js.

162
00:10:40.700 --> 00:10:43.050
So if I save that in my package.json.

163
00:10:43.050 --> 00:10:47.890
Make sure you've also saved
your webpack config.js and

164
00:10:47.890 --> 00:10:49.360
come back over to your terminal.

165
00:10:49.360 --> 00:10:52.910
If I just run webpack now,
just bare bones,

166
00:10:52.910 --> 00:10:55.410
it's gonna actually find that config and
it's going to run it correctly.

167
00:10:57.420 --> 00:10:59.420
Which I think is pretty nice.

168
00:10:59.420 --> 00:11:01.059
But you can also do npm run build.

169
00:11:02.390 --> 00:11:03.470
And that works as well.

170
00:11:16.506 --> 00:11:17.620
&gt;&gt; Brian Holt: Yeah.

171
00:11:17.620 --> 00:11:18.820
&gt;&gt; Speaker 5: Mine has an exciting error,

172
00:11:18.820 --> 00:11:23.410
cannot resolve module babel-loader,
do you have any idea why?

173
00:11:24.460 --> 00:11:25.115
&gt;&gt; Brian Holt: So maybe.

174
00:11:25.115 --> 00:11:28.610
&gt;&gt; Speaker 5: Or I guess it says
error in entry module not found.

175
00:11:31.230 --> 00:11:33.200
&gt;&gt; Brian Holt: Okay,
well the Babel loader one,

176
00:11:33.200 --> 00:11:37.890
just do npm install babel-loader and
that should hopefully resolve that.

177
00:11:41.930 --> 00:11:47.010
Entry module not found probably means
that you pointed at the wrong file,

178
00:11:47.010 --> 00:11:49.010
so the entry here is.

179
00:11:49.010 --> 00:11:52.460
&gt;&gt; Speaker 6: If you do npm install
in the directory, it should install.

180
00:11:52.460 --> 00:11:54.400
&gt;&gt; Brian Holt: It should have
gotten babel loader, right?

181
00:11:54.400 --> 00:11:55.756
&gt;&gt; Speaker 6: Yeah, so
they got babel loaders.

182
00:11:55.756 --> 00:11:57.589
So you shouldn't need to install.

183
00:11:57.589 --> 00:11:59.227
&gt;&gt; Speaker 5: Yeah, I'm not sure.

184
00:11:59.227 --> 00:12:00.120
Okay.

185
00:12:00.120 --> 00:12:02.487
&gt;&gt; Brian Holt: Okay,
so for the entry part,

186
00:12:02.487 --> 00:12:05.810
my guess is that this line is not correct.

187
00:12:07.010 --> 00:12:09.749
If you're following my notes,
my notes are incorrect here, by the way.

188
00:12:15.176 --> 00:12:16.200
&gt;&gt; Brian Holt: Anyone else?

189
00:12:16.200 --> 00:12:17.207
So who is getting it?

190
00:12:19.106 --> 00:12:20.138
&gt;&gt; Brian Holt: Okay.

191
00:12:22.757 --> 00:12:26.081
&gt;&gt; Speaker 7: I'm actually
getting a weird error with

192
00:12:26.081 --> 00:12:33.419
node_modules/webpack-core/lib/LoadersLis-
t.js r.forEach function(r),

193
00:12:33.419 --> 00:12:38.325
and the TypeError is r.forEach
is not a function, right?

194
00:12:38.325 --> 00:12:40.824
&gt;&gt; Brian Holt: [CROSSTALK] Yeah,
I have no idea.

195
00:12:40.824 --> 00:12:43.365
&gt;&gt; All: [LAUGH]
&gt;&gt; Brian Holt: Okay, so

196
00:12:43.365 --> 00:12:46.132
&gt;&gt; Speaker 9: Yeah, too many changes.

197
00:12:46.132 --> 00:12:48.265
&gt;&gt; Speaker 7: I think you
should just push up a branch.

198
00:12:48.265 --> 00:12:50.461
&gt;&gt; Brian Holt: I wholeheartedly agree.

199
00:13:10.110 --> 00:13:12.400
&gt;&gt; Sneezing Student: Okay.
&gt;&gt; Brian Holt: So fem-5 is up now.

200
00:13:14.280 --> 00:13:17.990
And if you're not getting the correct
thing right now, I would say don't worry

201
00:13:17.990 --> 00:13:21.680
too much about it because we went through
line by line of what this config does.

202
00:13:23.720 --> 00:13:26.160
So, hopefully you understand
the concepts here.

203
00:13:26.160 --> 00:13:30.070
We could debug it but anyway, debugging
webpack's not very fun especially errors

204
00:13:30.070 --> 00:13:33.620
like that, holy crap, because I don't
want to dig in the internals of webpack.

