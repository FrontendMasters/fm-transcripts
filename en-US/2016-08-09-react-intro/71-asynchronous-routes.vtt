WEBVTT

1
00:00:00.000 --> 00:00:03.960
[MUSIC]

2
00:00:03.960 --> 00:00:06.352
&gt;&gt; Brian Holt: Now we have a little bit of
a problem that we have to deal with our

3
00:00:06.352 --> 00:00:07.710
router though.

4
00:00:07.710 --> 00:00:11.130
So go to client app.jsx.

5
00:00:11.130 --> 00:00:13.890
Our router has to understand what
it called asynchronous routes.

6
00:00:13.890 --> 00:00:16.270
All these routes are very
synchronous right now.

7
00:00:16.270 --> 00:00:20.940
It says hey, if index route matches,
give it landing,

8
00:00:20.940 --> 00:00:22.780
like I already have
landing to give to you.

9
00:00:22.780 --> 00:00:26.170
So it's synchronous,
this happened then this happens.

10
00:00:26.170 --> 00:00:28.780
Well if we're going to do chunking,

11
00:00:28.780 --> 00:00:33.660
that landing routes not going to
be available until I ask for it.

12
00:00:33.660 --> 00:00:38.260
So I have to introduce this concept
of being asynchronous to our router.

13
00:00:38.260 --> 00:00:43.800
So what we're gonna do is we're going
to require note require.ensure to say,

14
00:00:43.800 --> 00:00:46.310
hey when I asked for this index route,

15
00:00:46.310 --> 00:00:52.135
run this function that that's going to go
request my route and then wait for it.

16
00:00:52.135 --> 00:00:53.235
That's the basic idea here.

17
00:00:55.465 --> 00:01:02.145
So first thing here,
we have required that web pack uses and

18
00:01:02.145 --> 00:01:05.875
we have require that node uses and while
generally you can treat them the same,

19
00:01:05.875 --> 00:01:12.350
they're not actually the same, and we
have to kind of mitigate that right now.

20
00:01:12.350 --> 00:01:16.327
So if (typeof module !=

21
00:01:16.327 --> 00:01:22.474
'undefined' &amp;&amp; module require),

22
00:01:22.474 --> 00:01:27.354
so if module is not undefined and

23
00:01:27.354 --> 00:01:32.958
it actually does exist with module,

24
00:01:32.958 --> 00:01:37.476
then you have to ask another,

25
00:01:37.476 --> 00:01:43.082
if (typeof require.ensure triple

26
00:01:43.082 --> 00:01:49.953
=== 'undefined') { require.ensure

27
00:01:49.953 --> 00:01:55.946
= require ('node-ensure')}.

28
00:01:55.946 --> 00:02:01.900
And so this is a shim for Node.js.

29
00:02:01.900 --> 00:02:05.140
So Webpack has the idea
of require.ensure but

30
00:02:05.140 --> 00:02:09.840
Node doesn't because asynchronous
requiring makes zero sense for Node.

31
00:02:09.840 --> 00:02:11.330
Node has everything
available to it already.

32
00:02:11.330 --> 00:02:15.060
And so having our asynchronous code
doesn't make any sense on the server, but

33
00:02:15.060 --> 00:02:17.040
it does make sense in the client.

34
00:02:17.040 --> 00:02:23.806
So that's what node ensure does, it makes
these Node ensure calls synchronous.

35
00:02:23.806 --> 00:02:30.755
Okay,
&gt;&gt; Brian Holt: So now we have to do,

36
00:02:30.755 --> 00:02:36.569
we have to replace the myRoutes
stuff with some pretty crazy stuff,

37
00:02:36.569 --> 00:02:41.294
so buckle up.
&gt;&gt; Speaker 2: Can you

38
00:02:41.294 --> 00:02:46.116
explain really quickly one more
time what you are doing with

39
00:02:46.116 --> 00:02:50.050
the required.
&gt;&gt; Brian Holt: Let's get through it and

40
00:02:50.050 --> 00:02:51.700
then if it still doesn't make sense,
ask me again.

41
00:02:53.830 --> 00:02:54.700
Yeah, let's do that.

42
00:02:55.920 --> 00:02:58.270
So I'm gonna change this
to be called root route.

43
00:03:01.070 --> 00:03:05.180
And so
you can configure React router two ways.

44
00:03:05.180 --> 00:03:08.510
We can do it with components,
which is what we saw up here, but

45
00:03:08.510 --> 00:03:10.010
you can also do it with a config object,

46
00:03:10.010 --> 00:03:13.770
and the only way to do asynchronous
routing is with config object.

47
00:03:15.330 --> 00:03:19.997
So let's just kind of emulate
what we had before using a config

48
00:03:19.997 --> 00:03:24.953
object.
&gt;&gt; Brian Holt: If you compare the two,

49
00:03:24.953 --> 00:03:26.503
they're relatively similar.

50
00:03:26.503 --> 00:03:29.623
Just this one's done with
code instead of components.

51
00:03:41.546 --> 00:03:42.752
&gt;&gt; Brian Holt: Location callback.

52
00:03:46.796 --> 00:03:48.543
&gt;&gt; Brian Holt: Require.ensure.

53
00:03:54.594 --> 00:03:56.137
&gt;&gt; Brian Holt: This is the call.

54
00:03:56.137 --> 00:04:03.740
Empty array and error.

55
00:04:03.740 --> 00:04:07.010
So let me type all this out and
I'll explain it in one go.

56
00:04:07.010 --> 00:04:09.190
If error, actually no, ignore that part,

57
00:04:09.190 --> 00:04:11.860
if you were following my notes ignore
the if error part because that breaks.

58
00:04:13.120 --> 00:04:18.808
So just state its callback,
(null, require ('./Landing')).

59
00:04:26.930 --> 00:04:28.466
&gt;&gt; Brian Holt: Okay, and

60
00:04:28.466 --> 00:04:32.424
this will be childRoutes.

61
00:04:32.424 --> 00:04:34.960
So what's actually happening here?

62
00:04:34.960 --> 00:04:38.140
So again this looks really similar
to what we were doing before, right?

63
00:04:38.140 --> 00:04:40.980
But the difference is that,
instead of just giving it a component say,

64
00:04:40.980 --> 00:04:43.850
hey here's my landing,
what it's actually doing is saying,

65
00:04:44.850 --> 00:04:48.410
hey whenever you wanna get my
index route call getComponent and

66
00:04:48.410 --> 00:04:52.840
then I will asynchronously go grab
that for you and bring it to you.

67
00:04:52.840 --> 00:04:55.450
Okay, so that's what inquired.ensure
is doing, it's saying,

68
00:04:55.450 --> 00:04:59.040
don't grab this now, but
I want the ability to grab this later.

69
00:04:59.040 --> 00:05:04.700
Require.ensure does other things

70
00:05:04.700 --> 00:05:08.110
I don't want to talk about especially
since I'm like almost out of time.

71
00:05:08.110 --> 00:05:11.059
But if you wanna look it up,
just go look up what inquire.ensure means.

72
00:05:12.840 --> 00:05:16.998
But so, we're getting this
callback from get Component, and

73
00:05:16.998 --> 00:05:22.210
then we're calling that component
back with require ('./Landing').

74
00:05:22.210 --> 00:05:23.700
This is signaling to web pack.

75
00:05:23.700 --> 00:05:25.320
It's like, hey it's time.

76
00:05:25.320 --> 00:05:27.330
Go out and grab me this bundle, right.

77
00:05:27.330 --> 00:05:28.250
That's what's happening here,

78
00:05:28.250 --> 00:05:31.270
and it won't grab it until you
call this require ('./Landing').

79
00:05:31.270 --> 00:05:33.410
So we actually even wanna
get rid of Landing up here.

80
00:05:35.000 --> 00:05:37.425
Otherwise, it's gonna pull it in,
defeat our entire purpose.

81
00:05:37.425 --> 00:05:42.422
So get rid of landing,
get rid of search, get rid of details,

82
00:05:42.422 --> 00:05:47.236
but leave layout.
&gt;&gt; Brian Holt: Because we want

83
00:05:47.236 --> 00:05:50.679
to make all those calls asynchronous.

84
00:05:50.679 --> 00:05:53.437
Okay, so go to childRoutes, and

85
00:05:53.437 --> 00:05:57.678
now we have to go do the rest
of our children routes.

86
00:06:02.064 --> 00:06:05.390
&gt;&gt; Brian Holt: So path: 'search',

87
00:06:09.795 --> 00:06:15.560
&gt;&gt; Brian Holt: getComponent (location,

88
00:06:15.560 --> 00:06:24.757
call back)
&gt;&gt; Brian Holt: And

89
00:06:24.757 --> 00:06:29.593
then you're gonna say cb (null,

90
00:06:29.593 --> 00:06:34.569
require('/search').
&gt;&gt; Speaker 3: Do we not

91
00:06:34.569 --> 00:06:39.764
need to use require.ensure on the-
&gt;&gt; Brian Holt: You do, sorry,

92
00:06:39.764 --> 00:06:48.471
require.ensure.
&gt;&gt; Brian Holt: (error)

93
00:06:53.295 --> 00:06:54.303
&gt;&gt; Brian Holt: Move that inside of there.

94
00:07:02.577 --> 00:07:03.139
&gt;&gt; Brian Holt: I'm going to do

95
00:07:03.139 --> 00:07:03.925
the same for detail.

96
00:07:03.925 --> 00:07:08.790
It looks relatively the same so I'm just
going to go ahead and copy and paste.

97
00:07:08.790 --> 00:07:12.900
This is gonna be 'details/:id' and

98
00:07:12.900 --> 00:07:16.892
this is gonna be Details right there.

99
00:07:28.012 --> 00:07:28.667
&gt;&gt; Brian Holt: Okay,

100
00:07:28.667 --> 00:07:33.400
so now we've made all of
our routes asynchronous.

101
00:07:33.400 --> 00:07:36.360
We've set it up so that we don't
actually just give it a component.

102
00:07:36.360 --> 00:07:40.438
We give it the ability to call for
a component, which means that later we can

103
00:07:40.438 --> 00:07:45.373
go download these bundles.
&gt;&gt; Brian Holt: So

104
00:07:45.373 --> 00:07:49.704
come down here to your router.
&gt;&gt; Brian Holt: And

105
00:07:49.704 --> 00:07:52.369
rather than doing my routes like this,

106
00:07:52.369 --> 00:07:57.459
what we're gonna do is just make router
just a self-closing component and

107
00:07:57.459 --> 00:08:01.844
we're just gonna pass in the routes
using rootRoute like that.

108
00:08:16.715 --> 00:08:17.321
&gt;&gt; Brian Holt: Okay,

109
00:08:17.321 --> 00:08:24.000
now what else we need to do, Instead of
myRoutes this is now called rootRoute.

110
00:08:26.490 --> 00:08:30.500
And we're also gonna have to share
history with browser entries.

111
00:08:30.500 --> 00:08:35.540
So App.History = browserHistory.

112
00:08:36.710 --> 00:08:43.636
So I'll just do that as well.
&gt;&gt; Brian Holt: And

113
00:08:43.636 --> 00:08:48.162
you have one more bit
to fix browser entry as

114
00:08:48.162 --> 00:08:55.591
well.
&gt;&gt; Brian Holt: All right,

115
00:08:55.591 --> 00:08:57.455
I'm gonna answer your
questions in a second.

116
00:08:57.455 --> 00:08:59.965
I know, some of my friends here
have to leave right at five.

117
00:08:59.965 --> 00:09:04.215
So I want the big payoff moment
before everyone has to take off, and

118
00:09:04.215 --> 00:09:05.685
then I'll answer all your
questions at the end.

119
00:09:07.165 --> 00:09:10.757
This is the very last section so
[SOUND] you can breathe a little bit.

120
00:09:10.757 --> 00:09:12.735
Not too much, just a little bit.

121
00:09:12.735 --> 00:09:14.944
Okay, go to browserEntry.jsx.

122
00:09:17.370 --> 00:09:22.090
So unfortunately you have to make

123
00:09:22.090 --> 00:09:27.125
browser entry a little bit more
complicated because we have

124
00:09:27.125 --> 00:09:32.200
to tell when it renders for the first
time, that it needs to be able to wait.

125
00:09:32.200 --> 00:09:35.360
Because otherwise it's going to try and
synchronously go do something, and

126
00:09:35.360 --> 00:09:36.910
that's going to mess up
our server side rendering.

127
00:09:36.910 --> 00:09:39.800
Remember that React gets unhappy if it

128
00:09:39.800 --> 00:09:42.530
doesn't look the same on the server
as it does on the client.

129
00:09:42.530 --> 00:09:45.906
We have to tell it, please wait before you
get unhappy, otherwise it's just gonna say

130
00:09:45.906 --> 00:09:49.283
instantly, I'm unhappy, I'm gonna blow
everything away, and we've just lost all

131
00:09:49.283 --> 00:09:52.929
the benefit of server-side rendering.
&gt;&gt; Brian Holt: Okay,

132
00:09:52.929 --> 00:09:54.730
so bring in reactRouter here.

133
00:09:56.470 --> 00:09:59.700
And we're going to use that same match
API that were using on the server.

134
00:10:07.850 --> 00:10:14.440
OK, so we're just going to
comment that out for a second,

135
00:10:14.440 --> 00:10:21.706
we're gonna say match({
history: App.History, routes:

136
00:10:21.706 --> 00:10:30.812
Apps.Routes}).
&gt;&gt; Brian Holt: And

137
00:10:30.812 --> 00:10:35.286
then we have to get it
that callback (error,

138
00:10:35.286 --> 00:10:39.182
redirectLocation, renderProps).

139
00:10:50.090 --> 00:10:52.670
&gt;&gt; Brian Holt: And then I'm just going to

140
00:10:52.670 --> 00:10:56.668
say if (error) {console.error}.

141
00:10:56.668 --> 00:10:57.728
Actually need to return.

142
00:10:57.728 --> 00:11:02.883
Return console.error('BrowserEntry

143
00:11:02.883 --> 00:11:07.751
require.ensure') error actually is

144
00:11:07.751 --> 00:11:12.910
not required ensure browser entry error.

145
00:11:15.150 --> 00:11:18.310
Error, always useful to have good errors.

146
00:11:19.320 --> 00:11:21.610
Otherwise we're just gonna move
this business up into here.

147
00:11:24.640 --> 00:11:30.788
Back on render and
we're also gonna pass down ...renderProps.

148
00:11:38.966 --> 00:11:39.939
&gt;&gt; Brian Holt: And document, yeah,

149
00:11:39.939 --> 00:11:45.564
everything like that.
&gt;&gt; Brian Holt: All right,

150
00:11:45.564 --> 00:11:48.485
so something pretty magical
is about to happen.

151
00:11:48.485 --> 00:11:56.583
Wait, we have to go to app first.
&gt;&gt; Brian Holt: No,

152
00:11:56.583 --> 00:11:59.110
I think I already fixed that,
that should be okay.

153
00:11:59.110 --> 00:12:00.010
No it's not.

154
00:12:00.010 --> 00:12:04.881
Okay, go to app.js real quick, and

155
00:12:04.881 --> 00:12:09.380
Routes right here in app.js.

156
00:12:09.380 --> 00:12:11.460
This is now an object,
and no longer a function.

157
00:12:11.460 --> 00:12:15.460
So just take off
the parentheses like that.

158
00:12:17.170 --> 00:12:18.292
So there were parenthesis there.

159
00:12:18.292 --> 00:12:20.970
I just took them off because this
will move from being a function

160
00:12:20.970 --> 00:12:22.360
to a configuration object.

161
00:12:22.360 --> 00:12:27.547
That's the reason.
&gt;&gt; Brian Holt: Okay.

162
00:12:31.147 --> 00:12:32.654
&gt;&gt; Brian Holt: So go look at your, wow,

163
00:12:32.654 --> 00:12:39.194
that's some fun stuff going on here.
&gt;&gt; Brian Holt: ClientApp

164
00:12:39.194 --> 00:12:43.916
route is not defined.
&gt;&gt; Brian Holt: So

165
00:12:43.916 --> 00:12:51.677
let's go fix these real quick.
&gt;&gt; Brian Holt: Line 3 in route.

166
00:12:51.677 --> 00:12:53.184
Route is defined but never used.

167
00:12:53.184 --> 00:12:55.354
So go to clientApp, giveit a route, righ,

168
00:12:55.354 --> 00:12:59.302
because we're actually not using route
anymore we're using a config object.

169
00:12:59.302 --> 00:13:00.130
That makes sense.

170
00:13:00.130 --> 00:13:05.070
Also is the same as nextRoute, thank you.

171
00:13:05.070 --> 00:13:07.480
Expected error to be handled no callback,
jeez.

172
00:13:07.480 --> 00:13:10.570
Okay, well sorry, I don't care.

173
00:13:10.570 --> 00:13:12.370
I'm not gonna take care
of the errors right now.

174
00:13:14.120 --> 00:13:16.400
And actually here's how
you get rid of those,

175
00:13:16.400 --> 00:13:19.002
just pretend there's no errors.

176
00:13:19.002 --> 00:13:21.390
&gt;&gt; Students: [LAUGH]
&gt;&gt; Brian Holt: Okay?

177
00:13:21.390 --> 00:13:27.050
Hashtag done, nailed it.
&gt;&gt; Students: [LAUGH]

178
00:13:27.050 --> 00:13:27.865
&gt;&gt; Brian Holt: Give me a break.

179
00:13:27.865 --> 00:13:29.260
It's the end of the day.

180
00:13:29.260 --> 00:13:32.720
Extra space before our childRoutes.

181
00:13:32.720 --> 00:13:33.800
Line 23.

182
00:13:33.800 --> 00:13:38.680
Too many spaces there, and
unexpected trailing comma, my gosh.

183
00:13:38.680 --> 00:13:39.820
Okay, whatever, I don't care.

184
00:13:39.820 --> 00:13:42.035
39, get rid of that too.

185
00:13:42.035 --> 00:13:47.890
&gt;&gt; [INAUDIBLE]
&gt;&gt; Brian Holt: I know.

186
00:13:47.890 --> 00:13:52.030
Thank you standard.
&gt;&gt; Brian Holt: Okay, so

187
00:13:52.030 --> 00:13:56.359
now we did a modifier web pack config,
so stop it and

188
00:13:56.359 --> 00:14:01.094
start it and
we should see something pretty different,

189
00:14:01.094 --> 00:14:10.477
hopefully.
&gt;&gt; Brian Holt: So

190
00:14:10.477 --> 00:14:13.420
now you start seeing
that there's a bundle.

191
00:14:13.420 --> 00:14:15.760
But now there's bundle one, and
bundle two, and bundle three.

192
00:14:17.490 --> 00:14:20.770
So now webpack is being smart enough.

193
00:14:20.770 --> 00:14:21.847
Like I think it's magical, right?

194
00:14:21.847 --> 00:14:24.230
Because I didn't,
we didn't really do anything to say,

195
00:14:24.230 --> 00:14:27.406
please separate this into this and
this into this and this into this, right?

196
00:14:27.406 --> 00:14:30.230
We just said these things
can be included separately.

197
00:14:30.230 --> 00:14:31.120
I promise it's okay.

198
00:14:31.120 --> 00:14:34.232
And when Pax is like okay,
I'll do that for you and it just does it.

199
00:14:34.232 --> 00:14:39.450
So now, hopefully if you go into,

200
00:14:41.830 --> 00:14:45.325
if I just refresh the page here and
let just the JS,

201
00:14:45.325 --> 00:14:49.510
notice I'm getting bundle, bundle is with
the thing that everyone's gonna to get,

202
00:14:49.510 --> 00:14:54.340
every single time a hundred percent and
that now contains magical logic within it.

203
00:14:54.340 --> 00:14:56.020
Let's say when I move from page to page.

204
00:14:58.420 --> 00:15:02.400
This is all from YouTube, so
let's actually just go to.

205
00:15:04.590 --> 00:15:08.380
Okay, so now we have bundle and
bundle one.js right and that's it.

206
00:15:08.380 --> 00:15:11.924
Now as soon as I click browse all,
notice I get bundle two.

207
00:15:11.924 --> 00:15:17.974
And when I go to details,
I get bundle three.

208
00:15:17.974 --> 00:15:19.271
That's so cool in my opinion.

209
00:15:19.271 --> 00:15:20.580
We didn't have to do anything.

210
00:15:20.580 --> 00:15:21.420
it was just for free.

211
00:15:23.510 --> 00:15:27.470
Now let's be totally realistic
about what we just did here.

212
00:15:27.470 --> 00:15:34.256
We went from 985K to 907 and this one's
3K, this one's 4K, and this one's 35K.

213
00:15:34.256 --> 00:15:36.618
So it's not actually super
compelling right now, but

214
00:15:36.618 --> 00:15:38.220
I hope you can imagine in a large app.

215
00:15:38.220 --> 00:15:41.380
This actually could make
a whole world of difference.

216
00:15:41.380 --> 00:15:45.760
Instead of three megs of JavaScript,
you'd be getting maybe a meg or a meg and

217
00:15:45.760 --> 00:15:46.760
a half or something like that.

