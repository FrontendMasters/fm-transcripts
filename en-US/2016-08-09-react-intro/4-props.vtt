WEBVTT

1
00:00:00.000 --> 00:00:04.184
[MUSIC]

2
00:00:04.184 --> 00:00:07.389
&gt;&gt; Brian: This is kind of cute that we
can check out this other thing a bunch of

3
00:00:07.389 --> 00:00:08.321
times on the page,

4
00:00:08.321 --> 00:00:12.365
but let's be totally honest, it's
totally and completely worthless, right?

5
00:00:12.365 --> 00:00:16.025
You would never actually want to say this,
check this other thing out,

6
00:00:16.025 --> 00:00:18.690
a bunch of times, not super useful.

7
00:00:18.690 --> 00:00:19.449
So we're going to

8
00:00:19.449 --> 00:00:24.190
mess with something called Props.
&gt;&gt; Brian: And

9
00:00:24.190 --> 00:00:28.220
props basically allow us to make these
components a little bit more flexible.

10
00:00:28.220 --> 00:00:31.240
In this particular case, we don't want
to be saying check out this other thing

11
00:00:31.240 --> 00:00:32.320
a bunch of different terms, but

12
00:00:32.320 --> 00:00:36.200
we do want to be able to pass information
into it that it can display for us.

13
00:00:36.200 --> 00:00:37.379
So we're gonna make it a little bit more

14
00:00:37.379 --> 00:00:42.465
flexible.
&gt;&gt; Brian: So

15
00:00:42.465 --> 00:00:46.341
what we're gonna do here,
I'm gonna deviate just a tiny bit from my

16
00:00:46.341 --> 00:00:51.024
notes.
&gt;&gt; Brian: So

17
00:00:51.024 --> 00:00:53.972
where it says null in all three
different places here for

18
00:00:53.972 --> 00:00:58.079
my title.
&gt;&gt; Brian: I'm

19
00:00:58.079 --> 00:01:00.290
gonna pass in a string
that I want to display.

20
00:01:00.290 --> 00:01:05.740
So I'm gonna say title, and whatever
you want to say, I say props are great.

21
00:01:11.030 --> 00:01:13.520
Okay, and then here I'm going to say,

22
00:01:13.520 --> 00:01:18.460
the title,
&gt;&gt; Brian: Used props

23
00:01:18.460 --> 00:01:23.311
everywhere.
&gt;&gt; Brian: And then down here title.

24
00:01:30.139 --> 00:01:31.572
&gt;&gt; Brian: Props are the best,

25
00:01:31.572 --> 00:01:33.940
get really excited about props.

26
00:01:35.860 --> 00:01:39.550
Okay, so now I'm passing this information
down into my composite component.

27
00:01:39.550 --> 00:01:41.390
And what's really cool about it is,

28
00:01:41.390 --> 00:01:45.200
now MyTitle here has access to this
information that we're passing down to it.

29
00:01:46.910 --> 00:01:51.727
So instead of,
&gt;&gt; Brian: This just,

30
00:01:51.727 --> 00:01:57.123
string that we're putting here,
what we're going to do instead

31
00:01:57.123 --> 00:02:04.844
is we're going to say this.props.title.
&gt;&gt; Brian: Okay?

32
00:02:07.855 --> 00:02:08.420
&gt;&gt; Brian: And save that.

33
00:02:12.723 --> 00:02:13.333
&gt;&gt; Brian: Let's go over and

34
00:02:13.333 --> 00:02:14.150
refresh the page here.

35
00:02:14.150 --> 00:02:19.469
And notice now it's actually
displaying three different

36
00:02:19.469 --> 00:02:25.306
strings using the same component.
&gt;&gt; Brian: So

37
00:02:25.306 --> 00:02:31.095
now we've made this MyTitle
way more flexible, right.

38
00:02:31.095 --> 00:02:34.587
Now we've actually made a component that
we're actually would be pretty useful that

39
00:02:34.587 --> 00:02:37.513
we can pass things into it's going
to display different titles for us.

40
00:02:37.513 --> 00:02:40.747
And as you can imagine we can have a ton
of markup in here that we do a bunch of

41
00:02:40.747 --> 00:02:41.808
different things, but

42
00:02:41.808 --> 00:02:45.280
we can make it flexible by
passing in different properties.

43
00:02:45.280 --> 00:02:49.030
And you can pass anything in this property
to a component, you can pass in functions,

44
00:02:49.030 --> 00:02:50.180
you can pass an object.

45
00:02:50.180 --> 00:02:52.060
You can pass in bouillons, numbers,

46
00:02:52.060 --> 00:02:55.585
whatever works in JavaScript is going
to be is going to work as if passing

47
00:02:55.585 --> 00:02:59.641
into it as a property.
&gt;&gt; Brian: So

48
00:02:59.641 --> 00:03:01.120
how do you feel about that now?

49
00:03:01.120 --> 00:03:03.313
That makes it 10 times more useful now,

50
00:03:03.313 --> 00:03:07.020
instead of just some rote presentation
of check out this other thing.

51
00:03:07.020 --> 00:03:09.990
Now we can pass whatever we want down,
and we can be using MyTitle everywhere,

52
00:03:09.990 --> 00:03:19.152
which I think is pretty awesome.
&gt;&gt; Brian: Questions about properties?

53
00:03:25.162 --> 00:03:26.414
&gt;&gt; Speaker 2: There was one question,

54
00:03:26.414 --> 00:03:29.634
is it possible control scope when
calling the method rendered in

55
00:03:29.634 --> 00:03:33.600
the class?
&gt;&gt; Brian: Is it

56
00:03:33.600 --> 00:03:37.940
possible to control scope?
&gt;&gt; Speaker 2: Need more

57
00:03:37.940 --> 00:03:39.070
clarification?
&gt;&gt; Brian: I do,

58
00:03:39.070 --> 00:03:40.670
I would need more clarification of that.

59
00:03:40.670 --> 00:03:44.870
So basically the question
of what scope do you have,

60
00:03:45.940 --> 00:03:48.010
which is a question I do understand.

61
00:03:48.010 --> 00:03:50.280
It's going to be the component itself.

62
00:03:50.280 --> 00:03:51.902
And you don't actually
want to change that,

63
00:03:51.902 --> 00:03:54.890
because reacting need to be able to talk
to the components that it's working with,

64
00:03:54.890 --> 00:03:56.440
bit specifically in the render function.

65
00:03:56.440 --> 00:04:04.956
It's actually best talking about
the render function in general.

66
00:04:04.956 --> 00:04:12.590
So all components in react
have to have a render method.

67
00:04:12.590 --> 00:04:17.903
And the absolute hard requirement of
the render method is that it has to return

68
00:04:17.903 --> 00:04:23.352
a component, it must return a component.
&gt;&gt; Brian: So

69
00:04:23.352 --> 00:04:27.780
let's just say I comment this out,
react should yell at me now.

70
00:04:27.780 --> 00:04:30.229
This is like what the hell you
didn't return the component to me.

71
00:04:31.290 --> 00:04:34.300
So if you go to go down here and
refresh it's gonna say,

72
00:04:35.530 --> 00:04:39.730
render a valid react component
must be returned, right.

73
00:04:39.730 --> 00:04:43.698
So if you see that there's a decent
chance that you just did like this

74
00:04:43.698 --> 00:04:48.610
where you just created a component and
forgot to return it.

75
00:04:48.610 --> 00:04:52.260
It's a decent, I've done that a bunch of
times, so that's what that looks like.

76
00:04:52.260 --> 00:04:58.069
But the other thing about
render is it must be pure, and

77
00:04:58.069 --> 00:05:03.243
when I say pure,
the ideas is if I have Bar X = 1,

78
00:05:03.243 --> 00:05:06.560
and then up here I say, X++.

79
00:05:06.560 --> 00:05:11.950
This is no longer a pure function because
every time that I'm calling render,

80
00:05:11.950 --> 00:05:14.760
I'm changing x, and
let's say I refer to x down here.

81
00:05:14.760 --> 00:05:18.850
I wonder if this is even gonna work.

82
00:05:18.850 --> 00:05:25.410
I have no idea.
&gt;&gt; Brian: It does, look.

83
00:05:27.370 --> 00:05:31.020
So it does work but the idea here is you
don't know how many times render is going

84
00:05:31.020 --> 00:05:33.530
to get called render is going to
called a bunch of times, right.

85
00:05:33.530 --> 00:05:39.700
For example, we only put the component on
the page three times yet we got to four.

86
00:05:39.700 --> 00:05:41.610
I don't I'm not actually
sure how that happened.

87
00:05:43.720 --> 00:05:47.190
But the idea is that you have no idea how
many times render is going to be called,

88
00:05:47.190 --> 00:05:49.970
and so you need to basically

89
00:05:49.970 --> 00:05:53.580
not allow how many times they get called
to affect the way it's going to look.

90
00:05:53.580 --> 00:05:57.560
So in this particular case that we're
keeping track of the outside state,

91
00:05:57.560 --> 00:05:58.930
you can't do that

92
00:05:58.930 --> 00:06:00.749
render needs to work in a vacuum.

93
00:06:02.420 --> 00:06:03.360
&gt;&gt; Speaker 3: Question?
&gt;&gt; Brian: Yeah

94
00:06:04.930 --> 00:06:05.839
&gt;&gt; Speaker 3: We do know of I mean

95
00:06:05.839 --> 00:06:08.632
there must be a way to know
how many render gets called,

96
00:06:08.632 --> 00:06:12.824
I mean there is you know, when component
gets mounted, does mount or something,

97
00:06:12.824 --> 00:06:15.774
render gets called then, or
I think at an initial stage.

98
00:06:15.774 --> 00:06:21.930
I think render gets called, yeah.
&gt;&gt; Brian: It does, but something

99
00:06:21.930 --> 00:06:27.200
that you may not be aware is that react
does a lot of batching of its updates.

100
00:06:27.200 --> 00:06:31.400
And so you might be calling set state or
force update,

101
00:06:31.400 --> 00:06:35.520
but you might actually not be updating
it until a bunch of stuff gets

102
00:06:35.520 --> 00:06:37.400
batched together and
it all gets flushed all at once.

103
00:06:38.830 --> 00:06:41.960
So react is doing some scheduling
underneath the hood that you have no idea.

104
00:06:41.960 --> 00:06:45.400
And you really should not have to know
about, that should be an implementation

105
00:06:45.400 --> 00:06:48.870
detail of react, and it should not be
something you have to worry about.

106
00:06:48.870 --> 00:06:52.500
So you just totally sidestep
the problem it in general if you just

107
00:06:52.500 --> 00:06:54.605
make sure that render is a pure function,

108
00:06:54.605 --> 00:06:58.210
given the same inputs is always
going to work the same way.

109
00:07:00.710 --> 00:07:03.490
Any other questions?
&gt;&gt; Speaker 2: They're asking if you needed

110
00:07:03.490 --> 00:07:04.790
the div.

111
00:07:04.790 --> 00:07:09.920
And the answer is obviously you just
need to, I shouldn't say obviously,

112
00:07:09.920 --> 00:07:12.060
but you need to return one element, right?
&gt;&gt; Brian: Yep.

113
00:07:12.060 --> 00:07:13.410
&gt;&gt; Speaker 2: So even if you remove that

114
00:07:13.410 --> 00:07:14.840
div you need to put in the H1.
&gt;&gt; Brian: Yeah, so

115
00:07:14.840 --> 00:07:20.642
you can get rid of this div,
that's totally fine, because as long

116
00:07:20.642 --> 00:07:22.920
as you have one H1 the returning here.
&gt;&gt; Speaker 2: Yeah.

117
00:07:22.920 --> 00:07:26.354
You can only return one element
which is why all of people in

118
00:07:26.354 --> 00:07:30.854
the react components wrap it in a div
cuz they have multiple things going on?

119
00:07:30.854 --> 00:07:31.684
&gt;&gt; Brian: Yep,

120
00:07:31.684 --> 00:07:37.850
just to show what this can't look like.

121
00:07:37.850 --> 00:07:40.740
This doesn't work because at
the top level you're gonna have two

122
00:07:40.740 --> 00:07:41.670
components returning.

123
00:07:42.860 --> 00:07:46.140
In fact, I think, yeah,
if you refresh that,

124
00:07:46.140 --> 00:07:47.950
you're gonna get a syntax error, right?

125
00:07:47.950 --> 00:07:51.088
Because you're trying to say var x equals

126
00:07:51.088 --> 00:07:57.340
what?
&gt;&gt; Brian: Actually, that, yeah.

127
00:07:57.340 --> 00:08:06.520
Well, this actu-
&gt;&gt; Brian: Not what I was expecting.

128
00:08:08.000 --> 00:08:09.575
&gt;&gt; Speaker 4: But it, yeah,

129
00:08:09.575 --> 00:08:13.640
it's returned the last
&gt;&gt; Brian: Yeah that's probably what it is.

130
00:08:13.640 --> 00:08:16.570
Yeah okay.
&gt;&gt; Speaker 4: It returned the last element

131
00:08:16.570 --> 00:08:17.560
&gt;&gt; Brian: We're JavaScript edge

132
00:08:17.560 --> 00:08:18.300
cases, right?

133
00:08:18.300 --> 00:08:20.456
That's a JavaScript
&gt;&gt; Speaker 4: If you wrap them both div,

134
00:08:20.456 --> 00:08:22.630
then they'll both render, right?
&gt;&gt; Brian: Yeah

135
00:08:22.630 --> 00:08:28.230
exactly.
&gt;&gt; Speaker 5: So

136
00:08:28.230 --> 00:08:32.170
you're returning the element
attributes as the first argument and

137
00:08:32.170 --> 00:08:35.210
the inner HTML as the second?
&gt;&gt; Brian: Precisely, the children right?

138
00:08:36.670 --> 00:08:40.690
So, this is always going to be the,
whatever attributes you're passing,

139
00:08:40.690 --> 00:08:43.250
we talked about putting style here,
you can say style,

140
00:08:45.620 --> 00:08:49.450
color red.
&gt;&gt; Speaker 5: And

141
00:08:49.450 --> 00:08:54.400
you could theoretically put HTML
tags on line 21 in the title string,

142
00:08:56.490 --> 00:08:59.896
if you want to wrap that in a span or

143
00:08:59.896 --> 00:09:04.431
something?
&gt;&gt; Brian: Yeah I think that would probably

144
00:09:04.431 --> 00:09:05.732
work if you said like,

145
00:09:05.732 --> 00:09:09.856
well you have to be with something
that will fits inside of an H1 right?

146
00:09:09.856 --> 00:09:12.529
So spans actually do,

147
00:09:12.529 --> 00:09:17.320
so yeah you could do React.DOM.span.

148
00:09:26.160 --> 00:09:26.878
&gt;&gt; Brian: That should work.
&gt;&gt; Speaker 4: But

149
00:09:26.878 --> 00:09:31.044
you can just pass the span in the string?
&gt;&gt; Brian: Sorry say

150
00:09:31.044 --> 00:09:36.188
that one more time.
&gt;&gt; Speaker 4: If you had

151
00:09:36.188 --> 00:09:41.112
an actual span tag in the props are great
string, like wrapping the word props or

152
00:09:41.112 --> 00:09:45.148
something, would that render as HTML?
&gt;&gt; Brian: In this particular case it

153
00:09:45.148 --> 00:09:49.712
probably should, because in this
particular case we're just passing desktop

154
00:09:49.712 --> 00:09:53.950
props title just, essentially raw
like we're not doing anything to it.

155
00:09:53.950 --> 00:09:57.750
You're goning to run into a slippery
slope here because this is a string and

156
00:09:57.750 --> 00:09:59.510
this is not a string.

157
00:09:59.510 --> 00:10:03.630
So you have to be aware that,
that can be either a reaction element or

158
00:10:03.630 --> 00:10:04.195
it could be a string.

159
00:10:04.195 --> 00:10:08.130
So you'll just have to be able to be
aware of that and handle that separately.

