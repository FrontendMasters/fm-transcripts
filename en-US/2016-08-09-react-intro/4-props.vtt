WEBVTT

1
00:00:00.000 --> 00:00:04.184
[MUSIC]

2
00:00:04.184 --> 00:00:07.389
&gt;&gt; Brian: This is kind of cute that we
can check out this other thing a bunch of

3
00:00:07.389 --> 00:00:08.321
times on the page,

4
00:00:08.321 --> 00:00:12.365
but let's be totally honest, it's
totally and completely worthless, right?

5
00:00:12.365 --> 00:00:16.025
You would never actually want to say this,
check this other thing out,

6
00:00:16.025 --> 00:00:18.690
a bunch of times, not super useful.

7
00:00:18.690 --> 00:00:20.975
So we're going to mess with
something called Props.

8
00:00:24.007 --> 00:00:27.606
&gt;&gt; Brian: And props basically allow us to
make these components a little bit more

9
00:00:27.606 --> 00:00:28.220
flexible.

10
00:00:28.220 --> 00:00:31.240
In this particular case, we don't want
to be saying check out this other thing

11
00:00:31.240 --> 00:00:32.320
a bunch of different terms, but

12
00:00:32.320 --> 00:00:36.200
we do want to be able to pass information
into it that it can display for us.

13
00:00:36.200 --> 00:00:37.742
So we're gonna make it
a little bit more flexible.

14
00:00:42.329 --> 00:00:44.029
&gt;&gt; Brian: So what we're gonna do here,

15
00:00:44.029 --> 00:00:46.826
I'm gonna deviate just
a tiny bit from my notes.

16
00:00:50.899 --> 00:00:54.542
&gt;&gt; Brian: So where it says null in all
three different places here for my title.

17
00:00:57.847 --> 00:01:00.290
&gt;&gt; Brian: I'm gonna pass in
a string that I want to display.

18
00:01:00.290 --> 00:01:05.740
So I'm gonna say title, and whatever
you want to say, I say props are great.

19
00:01:11.030 --> 00:01:13.520
Okay, and then here I'm going to say,

20
00:01:13.520 --> 00:01:19.223
the title,
&gt;&gt; Brian: Used props everywhere.

21
00:01:22.111 --> 00:01:23.311
&gt;&gt; Brian: And then down here title.

22
00:01:30.139 --> 00:01:33.940
&gt;&gt; Brian: Props are the best,
get really excited about props.

23
00:01:35.860 --> 00:01:39.550
Okay, so now I'm passing this information
down into my composite component.

24
00:01:39.550 --> 00:01:41.390
And what's really cool about it is,

25
00:01:41.390 --> 00:01:45.200
now MyTitle here has access to this
information that we're passing down to it.

26
00:01:46.910 --> 00:01:51.727
So instead of,
&gt;&gt; Brian: This just,

27
00:01:51.727 --> 00:01:56.436
string that we're putting here,
what we're going to do

28
00:01:56.436 --> 00:02:00.865
instead is we're going
to say this.props.title.

29
00:02:04.314 --> 00:02:04.844
&gt;&gt; Brian: Okay?

30
00:02:07.855 --> 00:02:08.420
&gt;&gt; Brian: And save that.

31
00:02:12.723 --> 00:02:14.150
&gt;&gt; Brian: Let's go over and
refresh the page here.

32
00:02:14.150 --> 00:02:18.492
And notice now it's
actually displaying three

33
00:02:18.492 --> 00:02:22.732
different strings using
the same component.

34
00:02:25.065 --> 00:02:31.095
&gt;&gt; Brian: So now we've made this
MyTitle way more flexible, right.

35
00:02:31.095 --> 00:02:34.587
Now we've actually made a component that
we're actually would be pretty useful that

36
00:02:34.587 --> 00:02:37.513
we can pass things into it's going
to display different titles for us.

37
00:02:37.513 --> 00:02:40.747
And as you can imagine we can have a ton
of markup in here that we do a bunch of

38
00:02:40.747 --> 00:02:41.808
different things, but

39
00:02:41.808 --> 00:02:45.280
we can make it flexible by
passing in different properties.

40
00:02:45.280 --> 00:02:49.030
And you can pass anything in this property
to a component, you can pass in functions,

41
00:02:49.030 --> 00:02:50.180
you can pass an object.

42
00:02:50.180 --> 00:02:54.059
You can pass in bouillons, numbers,
whatever works in JavaScript is going to

43
00:02:54.059 --> 00:02:56.718
be is going to work as if
passing into it as a property.

44
00:02:59.538 --> 00:03:01.120
&gt;&gt; Brian: So
how do you feel about that now?

45
00:03:01.120 --> 00:03:03.313
That makes it 10 times more useful now,

46
00:03:03.313 --> 00:03:07.020
instead of just some rote presentation
of check out this other thing.

47
00:03:07.020 --> 00:03:09.990
Now we can pass whatever we want down,
and we can be using MyTitle everywhere,

48
00:03:09.990 --> 00:03:11.253
which I think is pretty awesome.

49
00:03:17.886 --> 00:03:19.152
&gt;&gt; Brian: Questions about properties?

50
00:03:25.162 --> 00:03:26.414
&gt;&gt; Speaker 2: There was one question,

51
00:03:26.414 --> 00:03:30.240
is it possible control scope when calling
the method rendered in the class?

52
00:03:33.370 --> 00:03:35.060
&gt;&gt; Brian: Is it possible to control scope?

53
00:03:37.580 --> 00:03:38.760
&gt;&gt; Speaker 2: Need more clarification?

54
00:03:38.760 --> 00:03:40.670
&gt;&gt; Brian: I do,
I would need more clarification of that.

55
00:03:40.670 --> 00:03:44.870
So basically the question
of what scope do you have,

56
00:03:45.940 --> 00:03:48.010
which is a question I do understand.

57
00:03:48.010 --> 00:03:50.280
It's going to be the component itself.

58
00:03:50.280 --> 00:03:51.902
And you don't actually
want to change that,

59
00:03:51.902 --> 00:03:54.890
because reacting need to be able to talk
to the components that it's working with,

60
00:03:54.890 --> 00:03:56.440
bit specifically in the render function.

61
00:03:56.440 --> 00:04:04.956
It's actually best talking about
the render function in general.

62
00:04:04.956 --> 00:04:12.590
So all components in react
have to have a render method.

63
00:04:12.590 --> 00:04:17.412
And the absolute hard requirement of
the render method is that it has to

64
00:04:17.412 --> 00:04:20.859
return a component,
it must return a component.

65
00:04:23.189 --> 00:04:27.780
&gt;&gt; Brian: So let's just say I comment
this out, react should yell at me now.

66
00:04:27.780 --> 00:04:30.229
This is like what the hell you
didn't return the component to me.

67
00:04:31.290 --> 00:04:34.300
So if you go to go down here and
refresh it's gonna say,

68
00:04:35.530 --> 00:04:39.730
render a valid react component
must be returned, right.

69
00:04:39.730 --> 00:04:43.698
So if you see that there's a decent
chance that you just did like this

70
00:04:43.698 --> 00:04:48.610
where you just created a component and
forgot to return it.

71
00:04:48.610 --> 00:04:52.260
It's a decent, I've done that a bunch of
times, so that's what that looks like.

72
00:04:52.260 --> 00:04:58.069
But the other thing about
render is it must be pure, and

73
00:04:58.069 --> 00:05:03.243
when I say pure,
the ideas is if I have Bar X = 1,

74
00:05:03.243 --> 00:05:06.560
and then up here I say, X++.

75
00:05:06.560 --> 00:05:11.950
This is no longer a pure function because
every time that I'm calling render,

76
00:05:11.950 --> 00:05:14.760
I'm changing x, and
let's say I refer to x down here.

77
00:05:14.760 --> 00:05:18.850
I wonder if this is even gonna work.

78
00:05:18.850 --> 00:05:19.388
I have no idea.

79
00:05:24.471 --> 00:05:25.410
&gt;&gt; Brian: It does, look.

80
00:05:27.370 --> 00:05:31.020
So it does work but the idea here is you
don't know how many times render is going

81
00:05:31.020 --> 00:05:33.530
to get called render is going to
called a bunch of times, right.

82
00:05:33.530 --> 00:05:39.700
For example, we only put the component on
the page three times yet we got to four.

83
00:05:39.700 --> 00:05:41.610
I don't I'm not actually
sure how that happened.

84
00:05:43.720 --> 00:05:47.190
But the idea is that you have no idea how
many times render is going to be called,

85
00:05:47.190 --> 00:05:49.970
and so you need to basically

86
00:05:49.970 --> 00:05:53.580
not allow how many times they get called
to affect the way it's going to look.

87
00:05:53.580 --> 00:05:57.560
So in this particular case that we're
keeping track of the outside state,

88
00:05:57.560 --> 00:06:00.749
you can't do that render
needs to work in a vacuum.

89
00:06:02.420 --> 00:06:03.130
&gt;&gt; Speaker 3: Question?

90
00:06:03.130 --> 00:06:06.143
&gt;&gt; Brian: Yeah
&gt;&gt; Speaker 3: We do know of I mean there

91
00:06:06.143 --> 00:06:09.906
must be a way to know how many render
gets called, I mean there is you know,

92
00:06:09.906 --> 00:06:12.824
when component gets mounted,
does mount or something,

93
00:06:12.824 --> 00:06:15.774
render gets called then, or
I think at an initial stage.

94
00:06:15.774 --> 00:06:19.440
I think render gets called, yeah.

95
00:06:19.440 --> 00:06:21.930
&gt;&gt; Brian: It does, but something

96
00:06:21.930 --> 00:06:27.200
that you may not be aware is that react
does a lot of batching of its updates.

97
00:06:27.200 --> 00:06:31.400
And so you might be calling set state or
force update,

98
00:06:31.400 --> 00:06:35.520
but you might actually not be updating
it until a bunch of stuff gets

99
00:06:35.520 --> 00:06:37.400
batched together and
it all gets flushed all at once.

100
00:06:38.830 --> 00:06:41.960
So react is doing some scheduling
underneath the hood that you have no idea.

101
00:06:41.960 --> 00:06:45.400
And you really should not have to know
about, that should be an implementation

102
00:06:45.400 --> 00:06:48.870
detail of react, and it should not be
something you have to worry about.

103
00:06:48.870 --> 00:06:52.500
So you just totally sidestep
the problem it in general if you just

104
00:06:52.500 --> 00:06:54.605
make sure that render is a pure function,

105
00:06:54.605 --> 00:06:58.210
given the same inputs is always
going to work the same way.

106
00:07:00.710 --> 00:07:02.350
Any other questions?

107
00:07:02.350 --> 00:07:04.790
&gt;&gt; Speaker 2: They're asking
if you needed the div.

108
00:07:04.790 --> 00:07:07.410
And the answer is
obviously you just need to,

109
00:07:07.410 --> 00:07:11.860
I shouldn't say obviously, but
you need to return one element, right?

110
00:07:11.860 --> 00:07:12.740
&gt;&gt; Brian: Yep.
&gt;&gt; Speaker 2: So even if

111
00:07:12.740 --> 00:07:14.580
you remove that div you
need to put in the H1.

112
00:07:14.580 --> 00:07:18.346
&gt;&gt; Brian: Yeah, so you can get rid
of this div, that's totally fine,

113
00:07:18.346 --> 00:07:22.790
because as long as you have
one H1 the returning here.

114
00:07:22.790 --> 00:07:25.233
&gt;&gt; Speaker 2: Yeah.
You can only return one element which is

115
00:07:25.233 --> 00:07:29.788
why all of people in the react components
wrap it in a div cuz they have multiple

116
00:07:29.788 --> 00:07:30.854
things going on?

117
00:07:30.854 --> 00:07:37.850
&gt;&gt; Brian: Yep,
just to show what this can't look like.

118
00:07:37.850 --> 00:07:40.740
This doesn't work because at
the top level you're gonna have two

119
00:07:40.740 --> 00:07:41.670
components returning.

120
00:07:42.860 --> 00:07:46.140
In fact, I think, yeah,
if you refresh that,

121
00:07:46.140 --> 00:07:47.950
you're gonna get a syntax error, right?

122
00:07:47.950 --> 00:07:51.631
Because you're trying to
say var x equals what?

123
00:07:55.750 --> 00:07:57.340
&gt;&gt; Brian: Actually, that, yeah.

124
00:07:57.340 --> 00:08:06.520
Well, this actu-
&gt;&gt; Brian: Not what I was expecting.

125
00:08:08.000 --> 00:08:10.960
&gt;&gt; Speaker 4: But it, yeah,
it's returned the last

126
00:08:10.960 --> 00:08:13.640
&gt;&gt; Brian: Yeah that's probably what it is.

127
00:08:13.640 --> 00:08:14.300
Yeah okay.

128
00:08:14.300 --> 00:08:17.560
&gt;&gt; Speaker 4: It returned the last element
&gt;&gt; Brian: We're JavaScript edge

129
00:08:17.560 --> 00:08:18.300
cases, right?

130
00:08:18.300 --> 00:08:20.456
That's a JavaScript
&gt;&gt; Speaker 4: If you wrap them both div,

131
00:08:20.456 --> 00:08:22.350
then they'll both render, right?

132
00:08:22.350 --> 00:08:23.050
&gt;&gt; Brian: Yeah exactly.

133
00:08:28.020 --> 00:08:31.880
&gt;&gt; Speaker 5: So you're returning the
element attributes as the first argument

134
00:08:31.880 --> 00:08:33.960
and the inner HTML as the second?

135
00:08:33.960 --> 00:08:35.210
&gt;&gt; Brian: Precisely, the children right?

136
00:08:36.670 --> 00:08:40.690
So, this is always going to be the,
whatever attributes you're passing,

137
00:08:40.690 --> 00:08:46.370
we talked about putting style here,
you can say style, color red.

138
00:08:49.360 --> 00:08:54.100
&gt;&gt; Speaker 5: And you could theoretically
put HTML tags on line 21 in the title

139
00:08:54.100 --> 00:08:59.896
string, if you want to
wrap that in a span or

140
00:08:59.896 --> 00:09:02.580
something?

141
00:09:02.580 --> 00:09:05.732
&gt;&gt; Brian: Yeah I think that would
probably work if you said like,

142
00:09:05.732 --> 00:09:09.856
well you have to be with something
that will fits inside of an H1 right?

143
00:09:09.856 --> 00:09:17.320
So spans actually do, so
yeah you could do React.DOM.span.

144
00:09:26.160 --> 00:09:26.700
&gt;&gt; Brian: That should work.

145
00:09:26.700 --> 00:09:28.902
&gt;&gt; Speaker 4: But
you can just pass the span in the string?

146
00:09:28.902 --> 00:09:35.601
&gt;&gt; Brian: Sorry say that one more time.

147
00:09:35.601 --> 00:09:39.201
&gt;&gt; Speaker 4: If you had an actual span
tag in the props are great string,

148
00:09:39.201 --> 00:09:43.650
like wrapping the word props or
something, would that render as HTML?

149
00:09:43.650 --> 00:09:46.238
&gt;&gt; Brian: In this particular
case it probably should,

150
00:09:46.238 --> 00:09:50.802
because in this particular case we're
just passing desktop props title just,

151
00:09:50.802 --> 00:09:53.950
essentially raw like we're
not doing anything to it.

152
00:09:53.950 --> 00:09:57.750
You're goning to run into a slippery
slope here because this is a string and

153
00:09:57.750 --> 00:09:59.510
this is not a string.

154
00:09:59.510 --> 00:10:03.630
So you have to be aware that,
that can be either a reaction element or

155
00:10:03.630 --> 00:10:04.195
it could be a string.

156
00:10:04.195 --> 00:10:08.130
So you'll just have to be able to be
aware of that and handle that separately.

