WEBVTT

1
00:00:00.000 --> 00:00:03.845
[MUSIC]

2
00:00:03.845 --> 00:00:05.912
&gt;&gt; Brian Holt: We're gonna talk about
a little bit more about tooling because

3
00:00:05.912 --> 00:00:06.770
tooling's fun.

4
00:00:06.770 --> 00:00:08.210
Let's talk about webpack.

5
00:00:09.460 --> 00:00:12.680
So there's a bunch of
different packages out there.

6
00:00:12.680 --> 00:00:17.398
I think many of you've probably
at least touched Browserify or

7
00:00:17.398 --> 00:00:21.581
Webpack or Require or
something that's gonna use AMD,

8
00:00:21.581 --> 00:00:25.511
they're common or yeah,
six imports or whatever.

9
00:00:25.511 --> 00:00:27.290
We're gonna be using Webpack.

10
00:00:27.290 --> 00:00:30.240
One, that seems to be the most
popular at this very moment in time

11
00:00:30.240 --> 00:00:31.070
in the react community.

12
00:00:31.070 --> 00:00:34.760
And two, we're actually gonna be taking
advantage of some of the more advanced

13
00:00:34.760 --> 00:00:39.180
features tomorrow of Webpack.

14
00:00:39.180 --> 00:00:40.270
But what is Webpack?

15
00:00:40.270 --> 00:00:42.640
Webpack is just a build tool, right.

16
00:00:42.640 --> 00:00:46.330
So if we look at our ClientaApp.js,

17
00:00:46.330 --> 00:00:48.780
we have a bunch of stuff in the same file,
right.

18
00:00:48.780 --> 00:00:52.560
This actually could be very easily
split up into a couple of files.

19
00:00:52.560 --> 00:00:56.570
Most notably we could split out my title,
so it's just like, my title,

20
00:00:56.570 --> 00:00:58.180
is just in its own file.

21
00:00:58.180 --> 00:01:00.404
In fact we're literally about to do that.

22
00:01:00.404 --> 00:01:05.005
[LAUGH] And then, what we can do
is we can require that file in and

23
00:01:05.005 --> 00:01:07.200
then use it in here.

24
00:01:07.200 --> 00:01:09.290
And I think that
separation of concerns and

25
00:01:09.290 --> 00:01:11.930
that separation of code
makes a lot of sense, right?

26
00:01:13.260 --> 00:01:15.864
However, JavaScript, until recently,

27
00:01:15.864 --> 00:01:20.724
did not have the native ability to be able
to split code out into separate files.

28
00:01:20.724 --> 00:01:24.750
Everything was expected to be
either global or in the same file.

29
00:01:24.750 --> 00:01:29.160
So these build tools allow us to be able
to pull these files in separately without

30
00:01:29.160 --> 00:01:31.490
polluting the global namespace.

31
00:01:31.490 --> 00:01:34.990
Like right now we have React and
ReactDOM being pulled in.

32
00:01:34.990 --> 00:01:36.125
But if you actually go into here.

33
00:01:36.125 --> 00:01:41.630
I actually have React available
globally on my web page.

34
00:01:41.630 --> 00:01:45.945
And that's a problem, right, you don't
wanna expose these things globally, you

35
00:01:45.945 --> 00:01:50.078
wanna keep them all into a tight bundle
because if something later like some idiot

36
00:01:50.078 --> 00:01:55.090
on your team overwrites React, your entire
app blows up and that's not a good thing.

37
00:01:55.090 --> 00:01:59.954
And it's better to just have these local
scopes instead of this huge global mess.

38
00:02:02.040 --> 00:02:05.240
That's a fun name of a method,
did you see that?

39
00:02:05.240 --> 00:02:08.070
Secret DOM, do not use or
you will be fired.

40
00:02:08.070 --> 00:02:11.020
&gt;&gt; All: [LAUGH]
&gt;&gt; Brian Holt: I did not put that there.

41
00:02:12.640 --> 00:02:16.383
How awesome, secret DOM server.

42
00:02:16.383 --> 00:02:19.870
I love that.

43
00:02:20.910 --> 00:02:22.540
I guess Facebook is serious about that.

44
00:02:23.560 --> 00:02:26.450
Okay, so don't use that.

45
00:02:26.450 --> 00:02:28.755
That's the second part of my
workshop is just don't use that and

46
00:02:28.755 --> 00:02:29.660
you'll never be fired.

47
00:02:31.730 --> 00:02:35.520
Okay, so
anyway let's talk about webpack so.

48
00:02:35.520 --> 00:02:39.200
Like this is manageable because
we have 28 lines of code but

49
00:02:39.200 --> 00:02:43.820
can you imagine the entire Netflix code
base in one giant file like it which is

50
00:02:43.820 --> 00:02:45.490
just the worst thing ever.

51
00:02:45.490 --> 00:02:48.980
Like your editor would
crash just on opening it.

52
00:02:48.980 --> 00:02:51.400
Because we have hundreds of
thousands of lines of code.

53
00:02:54.080 --> 00:02:55.910
So we wanna be able to split
them out into separate files.

54
00:02:55.910 --> 00:02:59.430
We wanna be able to pull in
our dependencies in a nice,

55
00:02:59.430 --> 00:03:01.730
beautiful way without having to
pollute our global namespace.

56
00:03:03.140 --> 00:03:05.720
So enter Webpack,
Webpack's gonna do this for us.

57
00:03:05.720 --> 00:03:06.780
You can also use Browserify.

58
00:03:08.010 --> 00:03:09.970
My personal favorite
these days is Roll up.

59
00:03:11.030 --> 00:03:13.440
Again we're not gonna be talking
about it but it's super cool.

60
00:03:15.970 --> 00:03:17.570
So something to check
out in your own time.

61
00:03:19.370 --> 00:03:21.820
The cool thing about roll
up is it does tree shaking.

62
00:03:23.280 --> 00:03:25.230
So for example.

63
00:03:25.230 --> 00:03:27.470
I mean everyone's used jQuery.

64
00:03:27.470 --> 00:03:30.908
But the question I always have for
everyone, has anyone used all of jQuery?

65
00:03:30.908 --> 00:03:36.690
And unexception well maybe you would
because he was on the jQuery UI team,

66
00:03:36.690 --> 00:03:38.650
so you don't count.

67
00:03:38.650 --> 00:03:43.050
Most people have not scratched the entire
surface and because there's but

68
00:03:43.050 --> 00:03:44.480
200 methods in jQuery's.

69
00:03:44.480 --> 00:03:48.032
200 plus, maybe 300 at this point.

70
00:03:48.032 --> 00:03:49.988
An insane amount of methods.

71
00:03:49.988 --> 00:03:51.540
So what tree-shaking is gonna do for you,

72
00:03:51.540 --> 00:03:53.950
is it's actually going to shake out
the parts you don't use, and so

73
00:03:53.950 --> 00:03:56.040
you are only including
the parts that you are using.

74
00:03:56.040 --> 00:04:00.260
And it just cuts down on file sizes
automatically, automagically, for you.

75
00:04:01.800 --> 00:04:04.080
Anyway, we're gonna be using Webpack,
we're not gonna be using rollup.

76
00:04:07.300 --> 00:04:10.360
Cool, so let's go ahead and
split my tile into its own file.

77
00:04:14.170 --> 00:04:18.960
So let's grab this right here and
we also need to grab that up there.

78
00:04:18.960 --> 00:04:20.450
We're gonna create a new file.

79
00:04:21.460 --> 00:04:28.979
We're gonna call it MyTitle.js
&gt;&gt; Brian Holt: And

80
00:04:28.979 --> 00:04:29.903
I'm gonna put this in here.

81
00:04:33.938 --> 00:04:39.569
&gt;&gt; Brian Holt: And then underneath here,
and this is super important,

82
00:04:39.569 --> 00:04:43.690
you need to module.exports = MyTitle.

83
00:04:46.110 --> 00:04:49.170
Now to head this question off of the pass
because I'm sure someone is typing it

84
00:04:49.170 --> 00:04:54.500
right now, is that why are you
not using ES6 module [LAUGH].

85
00:04:54.500 --> 00:04:57.220
The answer to that question is,
we're gonna be using this in React later.

86
00:04:57.220 --> 00:05:02.074
And not that it's impossible
to use ES6 modules with Node.

87
00:05:02.074 --> 00:05:04.100
We're gonna be using Node later.

88
00:05:04.100 --> 00:05:07.530
And it's not impossible to
use ES6 modules with Node,

89
00:05:07.530 --> 00:05:10.830
you just have to have like
another layer in front of it and

90
00:05:10.830 --> 00:05:15.160
it's just like one more busy work
step that we don't wanna do.

91
00:05:15.160 --> 00:05:17.758
So I'm gonna stick to common JS and

92
00:05:17.758 --> 00:05:23.142
wait till the node ES6 story improves
before I switch to ES6 modules.

93
00:05:23.142 --> 00:05:25.390
Because this works as is and
I'm happy with it.

94
00:05:25.390 --> 00:05:28.900
So that's the answer to someone's
question that was coming.

95
00:05:30.770 --> 00:05:31.800
Okay, so save that.

96
00:05:35.580 --> 00:05:38.655
Go to a client app.

97
00:05:38.655 --> 00:05:40.796
We can get rid of the MyTitle here now.

98
00:05:46.776 --> 00:05:47.450
&gt;&gt; Brian Holt: Okay?

99
00:05:47.450 --> 00:05:49.782
And you can also get rid of the h1 here,

100
00:05:49.782 --> 00:05:53.411
because we're not using it
anywhere inside of a client app.

101
00:05:57.652 --> 00:06:00.190
&gt;&gt; Brian Holt: Or you can wait for
standard DLU, your choice.

102
00:06:01.430 --> 00:06:07.957
And then the other thing we're
gonna do here is we're gonna say

103
00:06:07.957 --> 00:06:13.140
var MyTitle = require('./MyTitle.').

104
00:06:15.350 --> 00:06:18.571
You can put the .js on there
if it makes you feel better.

105
00:06:18.571 --> 00:06:21.600
Webpack will infer that
you mean a JS file.

106
00:06:21.600 --> 00:06:22.640
So either way works for you.

107
00:06:26.450 --> 00:06:32.650
Okay, so now we have this
separated into two nice files.

108
00:06:32.650 --> 00:06:34.700
But now we need to be able to
bundle them together, right.

109
00:06:34.700 --> 00:06:38.620
Because your browser
doesn't speak that right.

110
00:06:38.620 --> 00:06:41.299
Like if we come back over here and
try and run this again,

111
00:06:41.299 --> 00:06:43.310
it's gonna say what the hell is require?

112
00:06:43.310 --> 00:06:44.430
You just made that crap up.

113
00:06:46.950 --> 00:06:50.838
So [COUGH] let's actually make Webpack
create this bundled file for us.

114
00:06:53.794 --> 00:06:56.190
&gt;&gt; Brian Holt: So wanna make
sure you have Webpack installed.

115
00:06:56.190 --> 00:07:00.440
It should already be, if you did the npm
installs, it should already be in there.

116
00:07:02.540 --> 00:07:03.550
But we're gonna be running the client.

117
00:07:03.550 --> 00:07:05.320
So yeah, you do have to install
it globally real quick.

118
00:07:07.580 --> 00:07:08.490
Come here.

119
00:07:08.490 --> 00:07:13.612
If you don't already have a public
directory, you actually probably should

120
00:07:13.612 --> 00:07:18.668
cuz yeah, the CSS is in there so you
should already have a public directory.

121
00:07:18.668 --> 00:07:23.278
And then what we're gonna do
now is we're gonna go to,

122
00:07:23.278 --> 00:07:27.855
that's the other thing is we
need to go to index.html.

123
00:07:27.855 --> 00:07:31.603
And we're no longer going
to refer to client app.js,

124
00:07:31.603 --> 00:07:35.279
right, we're gonna be
referring to the bundled JS.

125
00:07:35.279 --> 00:07:38.266
So what we're gonna do now instead of
saying client app here, we go ahead and

126
00:07:38.266 --> 00:07:39.119
delete that and say,

127
00:07:41.318 --> 00:07:51.204
&gt;&gt; Brian Holt: public/bundle.js.

128
00:07:51.433 --> 00:07:55.087
The very nice part about doing it this way
is now that bundle is always going to have

129
00:07:55.087 --> 00:07:57.667
everything we need and
we don't have to come back here and

130
00:07:57.667 --> 00:07:59.690
modify every time we add a new file.

131
00:07:59.690 --> 00:08:01.679
So, that's another added bonus.

132
00:08:02.820 --> 00:08:05.940
Cuz I'm sure many of us have seen
like those projects that have like 15

133
00:08:05.940 --> 00:08:07.910
dependencies underneath that, right?

134
00:08:07.910 --> 00:08:08.970
That's crazy annoying.

135
00:08:10.570 --> 00:08:16.920
Okay, so now let's go create
bundle in our command line.

136
00:08:16.920 --> 00:08:24.265
We're gonna say Webpack and
we're just gonna say js/ App.

137
00:08:24.265 --> 00:08:30.680
So you basically have to tell
Webpack where is my file.

138
00:08:30.680 --> 00:08:38.070
Right, so where is my entry, and in our
case ClientApp is gonna be our entry.

139
00:08:38.070 --> 00:08:40.892
And then we have to tell what
file we want it to generate.

140
00:08:40.892 --> 00:08:46.900
So we want it to generate
public/bundle.js, okay.

141
00:08:46.900 --> 00:08:48.816
We hit Enter.

142
00:08:48.816 --> 00:08:50.623
You should get something
nice looking like that.

143
00:08:56.273 --> 00:09:02.617
&gt;&gt; Brian Holt: And so now, if we go
over here and we open in public bundle,

144
00:09:02.617 --> 00:09:07.030
she get this kind of crazy mess of stuff.

145
00:09:07.030 --> 00:09:10.411
The top stuff appears like
basically make Require work and

146
00:09:10.411 --> 00:09:12.828
then you'll see all your code down here.

147
00:09:18.496 --> 00:09:20.590
&gt;&gt; Brian Holt: At this
point it's still readable.

148
00:09:20.590 --> 00:09:24.333
We're going to make it an unreadable
mess here in about ten seconds,

149
00:09:24.333 --> 00:09:28.713
okay,
&gt;&gt; Brian Holt: So

150
00:09:28.713 --> 00:09:33.024
any other thing to take note,

151
00:09:33.024 --> 00:09:36.822
if we say ls public -lsa.

152
00:09:36.822 --> 00:09:40.003
Notice it's actually not a very big file,
right.

153
00:09:43.410 --> 00:09:45.050
&gt;&gt; Brian Holt: We're also
going to change that shortly.

154
00:09:45.050 --> 00:09:47.116
This is quickly going
to become a huge file.

155
00:09:51.064 --> 00:09:54.240
&gt;&gt; Brian Holt: So now if you refresh
the page, it should still work.

156
00:09:54.240 --> 00:09:57.028
And if you look at your network,
you see that you are pulling in

157
00:10:02.285 --> 00:10:03.425
&gt;&gt; Brian Holt: Bundle, right there.

158
00:10:03.425 --> 00:10:05.994
Bundle.js.

