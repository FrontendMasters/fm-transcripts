WEBVTT

1
00:00:00.000 --> 00:00:03.632
[MUSIC]

2
00:00:03.632 --> 00:00:06.600
&gt;&gt; Brian: So now we're gonna start
making search actually somewhat useful.

3
00:00:07.600 --> 00:00:14.458
So I come now to search.JSX.
&gt;&gt; Brian: And

4
00:00:14.458 --> 00:00:20.201
what we are gonna do
here is make this a div.

5
00:00:20.201 --> 00:00:22.092
className = container,

6
00:00:32.418 --> 00:00:32.962
&gt;&gt; Brian: [COUGH] And

7
00:00:32.962 --> 00:00:36.970
this is one of my favorite
cool features about ReACT.

8
00:00:36.970 --> 00:00:39.946
The first time I fell in love with
Angular was when I saw ng-repeat for

9
00:00:39.946 --> 00:00:42.485
the first time,
like it's just the killer feature.

10
00:00:42.485 --> 00:00:45.192
My God, I don't have to create
all these elements myself,

11
00:00:45.192 --> 00:00:47.285
I can just let Angular take care of it for
you.

12
00:00:47.285 --> 00:00:51.417
Well, I'm about to show you

13
00:00:51.417 --> 00:00:56.064
the Angular or the ng-repeat or

14
00:00:56.064 --> 00:01:01.056
the pound each of ReACT right now so

15
00:01:01.056 --> 00:01:07.980
I'm gonna say data.shows.map((show).

16
00:01:07.980 --> 00:01:13.245
So again, remember everything
in here is just a JavaScript

17
00:01:13.245 --> 00:01:18.089
expression, right, and
then data.shows, right,

18
00:01:18.089 --> 00:01:22.975
if you look at our data.json.
&gt;&gt; Brian: This

19
00:01:22.975 --> 00:01:27.812
is the shows array, right?
&gt;&gt; Brian: And then map,

20
00:01:27.812 --> 00:01:29.920
that's just a plain old JavaScript, right?

21
00:01:29.920 --> 00:01:31.700
That's not a ReACT-specific function.

22
00:01:32.850 --> 00:01:39.789
So you can even go look, mdn array map.
&gt;&gt; Brian: This is

23
00:01:39.789 --> 00:01:45.510
an ES5 function that basically it's
more functionalesque programming.

24
00:01:45.510 --> 00:01:46.830
Actually it's very functional programming.

25
00:01:46.830 --> 00:01:48.360
I use map everywhere in
functional programming.

26
00:01:49.680 --> 00:01:51.820
And you basically take in an array.

27
00:01:51.820 --> 00:01:54.760
You apply some transformation
to every item in the array.

28
00:01:54.760 --> 00:01:58.280
So basically this function that we're
providing for it is going to get

29
00:02:00.120 --> 00:02:04.060
applied to every single individual
item in the array and it's going to

30
00:02:05.400 --> 00:02:09.260
create a new array full of everything that
you return from your map function, right.

31
00:02:10.550 --> 00:02:14.097
So just as a very basic.

32
00:02:14.097 --> 00:02:15.705
Yeah, did you have a question?
&gt;&gt; Speaker 2: There was a question on why

33
00:02:15.705 --> 00:02:17.386
you were using data.shows
instead of just shows

34
00:02:17.386 --> 00:02:18.770
there.
&gt;&gt; Brian: Yeah.

35
00:02:18.770 --> 00:02:20.594
Why don't you call this data instead?

36
00:02:20.594 --> 00:02:25.560
[LAUGH] Cuz otherwise, it's gonna be
shows.shows, which is weird, right?

37
00:02:27.910 --> 00:02:28.520
Sorry, my bad.

38
00:02:30.130 --> 00:02:32.850
Okay, so
I just wanted to brief primers map,

39
00:02:32.850 --> 00:02:38.566
if I have a bar x equals 1,2,3,4,5, right?

40
00:02:38.566 --> 00:02:40.279
And I say,

41
00:02:40.279 --> 00:02:46.183
const y = x.map(function(num)

42
00:02:46.183 --> 00:02:51.135
[ return x * 10 ] ) right or

43
00:02:51.135 --> 00:02:54.760
something like that.

44
00:02:58.180 --> 00:03:01.534
Yeah, thank you.

45
00:03:01.534 --> 00:03:07.410
What you're going to get back here is 10,
20, 30, 40, 50, right?

46
00:03:08.830 --> 00:03:10.735
So it's gonna take this function and

47
00:03:10.735 --> 00:03:13.693
apply it individually to every
single item in the array.

48
00:03:13.693 --> 00:03:17.040
And whatever you return is going
to be put into the array, right?

49
00:03:17.040 --> 00:03:21.417
So in this particular case, it's gonna
do it times 10 here, times 10 here.

50
00:03:21.417 --> 00:03:26.221
So this function gets run 5 times on
each individual item in the array.

51
00:03:26.221 --> 00:03:26.942
Does that makes sense?

52
00:03:26.942 --> 00:03:29.200
Is that a good basic
primer into what map is?

53
00:03:30.600 --> 00:03:34.580
Okay, so suffice to say that
this is not ReACT specific.

54
00:03:34.580 --> 00:03:38.377
This is something you can use
everywhere in JavaScript.

55
00:03:38.377 --> 00:03:40.001
Excuse me [COUGH]

56
00:03:48.865 --> 00:03:51.515
&gt;&gt; Brian: And that's one of my favorite
parts about ReACT is like most

57
00:03:51.515 --> 00:03:54.550
of the ReACT statements,
this is just good JavaScript, right?

58
00:03:54.550 --> 00:03:57.750
This isn't like you didn't
have to learn ng-repeat and

59
00:03:57.750 --> 00:03:59.760
all the different syntaxes
of doing ng-repeat.

60
00:03:59.760 --> 00:04:01.896
Like you just have to know how
to do a bit more JavaScript.

61
00:04:01.896 --> 00:04:05.730
And everything that you're learning
here doesn't just apply to ReACT,

62
00:04:05.730 --> 00:04:07.580
it applies to everything in JavaScript.

63
00:04:07.580 --> 00:04:12.162
I think that's just a sign of
a good design of a framework.

64
00:04:12.162 --> 00:04:16.992
Okay, so this function here, all we have
to do is return ReACT components, right,

65
00:04:16.992 --> 00:04:20.394
cuz if you imagine what's
happening underneath the hood,

66
00:04:20.394 --> 00:04:25.020
what it's being transpiled to, this is
going to just be transpiled to an array of

67
00:04:25.020 --> 00:04:27.560
different different components, right.

68
00:04:27.560 --> 00:04:30.630
And ReACT knows what to do with
an array of components, right.

69
00:04:30.630 --> 00:04:31.530
Does that make sense?

70
00:04:32.630 --> 00:04:37.779
So here,
if I just say return &lt;h3&gt;[show t},

71
00:04:37.779 --> 00:04:42.681
I'm now going to have an array of h3s,
right,

72
00:04:42.681 --> 00:04:47.831
of these different titles in there and
ReACT knows

73
00:04:47.831 --> 00:04:54.413
what to do with that.
&gt;&gt; Brian: Now if you wanna make

74
00:04:54.413 --> 00:04:58.479
this extra clever again, and we don't want
this return statement in here, we can do

75
00:04:58.479 --> 00:05:02.400
the same thing that we're doing up here,
and just turn these into parentheses.

76
00:05:05.600 --> 00:05:06.599
And that works as well.

77
00:05:14.941 --> 00:05:16.387
&gt;&gt; Brian: Does that make sense?

78
00:05:27.026 --> 00:05:29.088
&gt;&gt; Brian: If that's too clever for you,

79
00:05:29.088 --> 00:05:32.110
feel free just to stick
to that version of it.

80
00:05:33.140 --> 00:05:33.880
And I'm okay with that, too.

81
00:05:35.820 --> 00:05:40.142
Or you can just do function, right, and

82
00:05:40.142 --> 00:05:45.494
that's okay, too,
whatever floats your boat.

83
00:05:45.494 --> 00:05:47.004
Stand up for a little bit.

84
00:05:59.164 --> 00:06:00.628
&gt;&gt; Brian: Okay, I'll turn that

85
00:06:00.628 --> 00:06:06.300
into,
&gt;&gt; Brian: Yeah,

86
00:06:06.300 --> 00:06:08.790
so let's save that.
&gt;&gt; Speaker 2: Don't you need to drop

87
00:06:08.790 --> 00:06:11.366
the return?
&gt;&gt; Brian: I do need to drop the return or

88
00:06:11.366 --> 00:06:18.703
else that's not going to compile.
&gt;&gt; Brian: We got a bunch of, so yeah, you

89
00:06:18.703 --> 00:06:25.258
need to get rid of all this stuff up here.
&gt;&gt; Brian: And

90
00:06:25.258 --> 00:06:31.980
that got rid of all of our Lint, great.
&gt;&gt; Brian: So

91
00:06:31.980 --> 00:06:35.644
now refresh this page and
click Browse All and

92
00:06:35.644 --> 00:06:40.177
notice that we're getting
a list of all the titles now,

93
00:06:40.177 --> 00:06:45.253
right?
&gt;&gt; Brian: Does

94
00:06:45.253 --> 00:06:48.890
that makes sense or
is this to hand-wavy black magic?

95
00:06:48.890 --> 00:06:57.050
Or do we mostly follow how we got to
getting titles here in our ReACT project?

96
00:06:57.050 --> 00:07:00.086
It's okay if someone says
this is too hand-wavy,

97
00:07:00.086 --> 00:07:03.322
I can go explain it again.
&gt;&gt; Brian: Yeah.

98
00:07:03.322 --> 00:07:04.508
&gt;&gt; Speaker 3: So in my console,

99
00:07:04.508 --> 00:07:07.360
I'm getting a unique key error for ReACT.

100
00:07:07.360 --> 00:07:08.483
Is that something we're
gonna cover at some point?

101
00:07:08.483 --> 00:07:09.639
&gt;&gt; Brian: Yeah, we're gonna cover that

102
00:07:09.639 --> 00:07:11.400
briefly here in just a second.

103
00:07:11.400 --> 00:07:15.310
Yes, you'll definitely see here,
each child needs a key.

104
00:07:16.520 --> 00:07:18.130
And we'll talk about that momentarily.

