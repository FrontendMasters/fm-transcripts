WEBVTT

1
00:00:00.000 --> 00:00:03.604
[MUSIC]

2
00:00:03.604 --> 00:00:06.280
&gt;&gt; Brian Holt: We just
integrated header into details.

3
00:00:06.280 --> 00:00:07.530
Now we're going to put it into a search,
so

4
00:00:07.530 --> 00:00:11.080
they're going to share
some of the same code.

5
00:00:11.080 --> 00:00:19.541
Let's go ahead and make that happen.
&gt;&gt; Brian Holt: Go ahead and,

6
00:00:19.541 --> 00:00:23.380
let's actually go back to header, that's
actually what I want to do right now.

7
00:00:25.930 --> 00:00:29.210
Well just to demonstrate,
notice this header is slightly different.

8
00:00:29.210 --> 00:00:33.110
There is an input here that's not
gonna be present in the details one.

9
00:00:33.110 --> 00:00:35.630
Now we need to make our header
a little bit more flexible that will

10
00:00:35.630 --> 00:00:38.250
conditionally show that
either the back button or

11
00:00:38.250 --> 00:00:41.864
the search button and we're just going
to do that with some properties.

12
00:00:41.864 --> 00:00:45.930
Because search knows that if
you need to show the input

13
00:00:45.930 --> 00:00:49.310
as this detail knows it needs
to show the back button.

14
00:00:49.310 --> 00:00:50.920
We'll just pass as in this
properties to header.

15
00:00:53.848 --> 00:00:57.088
&gt;&gt; Brian Holt: Inside of headeder.jsx.

16
00:00:57.088 --> 00:01:01.956
Let's go ahead and abstract that out.

17
00:01:01.956 --> 00:01:06.569
First you we're gonna do is we're
going to do this let utilSpace.

18
00:01:06.569 --> 00:01:10.915
And this is going to be
where we're going to stick

19
00:01:10.915 --> 00:01:15.791
the component that we want
to use inside of the header,

20
00:01:15.791 --> 00:01:20.573
and then want to say,
if this.props.showSearch.

21
00:01:26.752 --> 00:01:30.495
&gt;&gt; Brian Holt: Then we are going to say

22
00:01:30.495 --> 00:01:36.013
utilSpace = input, type=text

23
00:01:36.013 --> 00:01:41.334
classname = search-input and

24
00:01:41.334 --> 00:01:45.479
placeholder = search.

25
00:01:45.479 --> 00:01:46.766
This should look pretty familiar.

26
00:01:46.766 --> 00:01:49.509
This is exactly what we saw before.

27
00:01:49.509 --> 00:01:55.521
I'm going to say value

28
00:01:55.521 --> 00:02:04.382
= this.props.searchTerm and

29
00:02:04.382 --> 00:02:14.382
onChange=this.props.handleSearchTerm.

30
00:02:17.362 --> 00:02:21.842
&gt;&gt; Speaker 2: It's so
much nicer than doing it just like

31
00:02:21.842 --> 00:02:25.546
ES5 string concatenation.
&gt;&gt; Brian Holt: Absolutely.

32
00:02:25.546 --> 00:02:31.458
I find JSXP very, very compelling.
&gt;&gt; Speaker 2: I mean ES6 and

33
00:02:31.458 --> 00:02:37.670
string literals aren't terrible but-
&gt;&gt; Brian Holt: I think it's-

34
00:02:37.670 --> 00:02:38.247
&gt;&gt; Speaker 2: It's still nicer.

35
00:02:38.247 --> 00:02:39.386
&gt;&gt; Brian Holt: Yeah, definitely.

36
00:02:41.979 --> 00:02:43.416
&gt;&gt; Brian Holt: Notice we're referring to

37
00:02:43.416 --> 00:02:45.730
props that we don't necessarily have yet.

38
00:02:45.730 --> 00:02:49.270
This is some personal
advice to you is that,

39
00:02:49.270 --> 00:02:52.618
just write the code as
if it was already there.

40
00:02:52.618 --> 00:02:55.368
Just expect it to be there, and then go
figure out later how to get it there.

41
00:02:55.368 --> 00:02:59.574
And that that just lets you
write the code right now and

42
00:02:59.574 --> 00:03:04.531
then fix it later from some
engineers this is counterintuitive

43
00:03:04.531 --> 00:03:08.940
most of us want like make
something work and then use it.

44
00:03:08.940 --> 00:03:11.380
I think we talked a little
bit about this yesterday but

45
00:03:11.380 --> 00:03:15.160
with reactor two usually a good idea to
just assume something was going to happen

46
00:03:15.160 --> 00:03:16.510
and then later go make it happen.

47
00:03:19.950 --> 00:03:24.698
Big reminds me I was reading yesterday
on Reddit that Stephen Hawking threw

48
00:03:24.698 --> 00:03:28.841
a party for time travelers and
then he announced it the next day and

49
00:03:28.841 --> 00:03:31.120
no one showed up, unfortunately.

50
00:03:31.120 --> 00:03:32.740
But I thought that was pretty funny.

51
00:03:32.740 --> 00:03:38.372
[LAUGH].
&gt;&gt; Brian Holt: Else you want to

52
00:03:38.372 --> 00:03:45.367
make utilSpace equal to our back button.
&gt;&gt; Brian Holt: And

53
00:03:45.367 --> 00:03:47.000
you can actually just go ahead and
rip it out from down here.

54
00:03:56.217 --> 00:03:58.785
&gt;&gt; Brian Holt: Now we have utilSpace and

55
00:03:58.785 --> 00:04:05.386
it's gonna depending on this
boolean they're going to pass and

56
00:04:05.386 --> 00:04:09.787
later we're just going to say utilSpace so

57
00:04:09.787 --> 00:04:14.446
whatever it is in
utilSpace put it down here.

58
00:04:14.446 --> 00:04:15.790
Any questions about that?

59
00:04:15.790 --> 00:04:18.370
This is kind of how you
do conditionals in JSX,

60
00:04:18.370 --> 00:04:20.990
this is the way that typically it's on.

61
00:04:20.990 --> 00:04:24.880
You can get fancy with ternaries,
but I don't recommend it.

62
00:04:24.880 --> 00:04:29.710
Ternaries tend to be more confusing than
helpful, for very basic things ternaries

63
00:04:29.710 --> 00:04:32.310
work okay but for entire reactor
components it gets pretty messy.

64
00:04:33.920 --> 00:04:39.996
There's also a conditional
components that you can use,

65
00:04:39.996 --> 00:04:44.708
you say,
something in the effect I've never

66
00:04:44.708 --> 00:04:49.544
used them before but
it looks something like,

67
00:04:49.544 --> 00:04:58.050
if condition=this.props.searchTerm and
then you put blah in here.

68
00:04:58.050 --> 00:04:58.840
Don't copy this.

69
00:04:58.840 --> 00:04:59.869
I'm just giving a demonstration.

70
00:04:59.869 --> 00:05:03.905
Else, this.

71
00:05:03.905 --> 00:05:06.910
You can do something to that effect.

72
00:05:06.910 --> 00:05:10.790
I think it's messy and
muddles up everything, so I elect not to.

73
00:05:10.790 --> 00:05:14.880
But that's another open source library you
have to pull in to be able to do that.

74
00:05:14.880 --> 00:05:15.810
That's not part of react.

75
00:05:17.730 --> 00:05:18.930
I find this to be much more preferable.

76
00:05:20.810 --> 00:05:24.840
Another thing people ask me is
why don't I say util = input,

77
00:05:24.840 --> 00:05:27.600
and then I'll do an if
statement to change it?

78
00:05:27.600 --> 00:05:30.520
Well you have to think that you're
creating react components in here and

79
00:05:30.520 --> 00:05:32.900
that's not free.

80
00:05:32.900 --> 00:05:35.100
It's pretty cheap but it's not free.

81
00:05:35.100 --> 00:05:38.590
If you do it this way, nothing's wasted.

82
00:05:39.970 --> 00:05:41.709
That's another reason that you
might not want to do it that way.

83
00:05:44.983 --> 00:05:47.449
&gt;&gt; Brian Holt: Any question about this?

84
00:05:50.740 --> 00:05:52.410
Kind of make some sense of
why we're doing it this way.

85
00:05:54.740 --> 00:05:58.671
Something I wanted to, okay go ahead.
&gt;&gt; Speaker 3: Somebody is asking that they

86
00:05:58.671 --> 00:06:01.210
thought that JSS tags
had to be capitalized.

87
00:06:04.795 --> 00:06:05.920
&gt;&gt; Brian Holt: Down here.

88
00:06:07.010 --> 00:06:11.160
Notice we're not doing utilSpace.

89
00:06:11.160 --> 00:06:13.880
This wouldn't work, but this isn't really,

90
00:06:15.210 --> 00:06:19.370
this is a variable holding a react
component and not a react class.

91
00:06:19.370 --> 00:06:21.853
You need to separate
those two in your mind.

92
00:06:21.853 --> 00:06:24.107
Because we're just doing it like this,

93
00:06:24.107 --> 00:06:28.349
this is fine because this is just
a variable, this is not a react component,

94
00:06:28.349 --> 00:06:33.150
it's just a variable that happens to be
holding already rendered react components.

95
00:06:34.170 --> 00:06:35.589
I could see how that's confusing.

96
00:06:35.589 --> 00:06:38.743
If I should say it this
is the way this works,

97
00:06:38.743 --> 00:06:43.194
if you feel better about calling
this capital U, UtilSpace.

98
00:06:43.194 --> 00:06:48.771
It's not exactly accurate, because then
you would miss some sort of constructor.

99
00:06:48.771 --> 00:06:51.066
But you can do it if you want.

100
00:06:51.066 --> 00:06:54.295
Nothing's stopping you.
&gt;&gt; Brian Holt: Any other

101
00:06:54.295 --> 00:07:00.800
questions?
&gt;&gt; Brian Holt: Cool.

102
00:07:00.800 --> 00:07:04.340
Kind of a another tangent I wanted
to run on down real quick is that,

103
00:07:05.920 --> 00:07:07.760
something I like about react,

104
00:07:07.760 --> 00:07:12.470
and something that you need to get used
to as you're writing react components.

105
00:07:12.470 --> 00:07:17.240
We tend to think of UIs over time,
that you have a user interface,

106
00:07:17.240 --> 00:07:20.750
you do something that changes the state,
and then it changes over time.

107
00:07:20.750 --> 00:07:23.445
You have to think about
these user interfaces,

108
00:07:23.445 --> 00:07:26.375
ask people are gonna interact with them,
as the server comes back and

109
00:07:26.375 --> 00:07:29.780
it's these Interfaces
over time estate changes.

110
00:07:31.280 --> 00:07:34.040
That's not the way you wanna think about
writing react you want to think about

111
00:07:34.040 --> 00:07:37.480
react given properties this
is what it's going to look.

112
00:07:37.480 --> 00:07:40.380
It's more of a snapshot
mentality rather than over time.

113
00:07:43.190 --> 00:07:47.220
If show search do this,
otherwise do that right.

114
00:07:47.220 --> 00:07:50.810
It's very synchronous,
it's a very now type experience.

115
00:07:52.710 --> 00:07:57.050
And I think this is cognitively
less of a load to think through.

116
00:07:57.050 --> 00:08:00.210
You don't have to think about what
is this going to look at over time.

117
00:08:00.210 --> 00:08:03.774
I just have to think about given
such state it looks like this,

118
00:08:03.774 --> 00:08:09.991
does that kind of makes sense?
&gt;&gt; Brian Holt: It's like I

119
00:08:09.991 --> 00:08:14.576
said it's way easier to think about things
otherwise you're thinking about over time

120
00:08:14.576 --> 00:08:18.910
I'm drifting towards these different
particular things whereas I can just say,

121
00:08:18.910 --> 00:08:20.760
nope it's input output.

122
00:08:20.760 --> 00:08:22.513
Input of parameters,
output of this component,

123
00:08:22.513 --> 00:08:26.807
that's all it is.
&gt;&gt; Brian Holt: And

124
00:08:26.807 --> 00:08:29.364
that's actually a very
functional mentality,

125
00:08:29.364 --> 00:08:32.990
that's how you tend to think about
functional programming as well.

126
00:08:35.110 --> 00:08:37.143
It's just a series of transformations
given some sort of input.

127
00:08:47.714 --> 00:08:48.714
&gt;&gt; Brian Holt: We are going to have to do

128
00:08:48.714 --> 00:08:49.770
some prop types as well.

129
00:08:50.950 --> 00:08:51.708
Let's go ahead and do that.

130
00:08:51.708 --> 00:08:55.320
This is a create class, so
we're gonna stick our prop types up here.

131
00:08:59.862 --> 00:09:01.798
&gt;&gt; Brian Holt: Let's go ahead and

132
00:09:01.798 --> 00:09:03.980
bring those out too.

133
00:09:05.440 --> 00:09:10.545
We're gonna need function, func,
bool and string is another thing that,

134
00:09:10.545 --> 00:09:14.317
I have a lot of things complained
about with prop types.

135
00:09:14.317 --> 00:09:19.861
One of things I like to complain about
is some of them are shortened and

136
00:09:19.861 --> 00:09:24.831
some of them are not, and
it just drives me absolutely crazy,

137
00:09:24.831 --> 00:09:29.340
it's func and bool but
it's not num, no it's number.

138
00:09:30.980 --> 00:09:34.002
I just hate having to either to
shorten everything or shorten nothing.

139
00:09:34.002 --> 00:09:38.745
Anyway, sorry, rent over.
&gt;&gt; Speaker 2: [LAUGH].

140
00:09:38.745 --> 00:09:41.020
&gt;&gt; Brian Holt: It's getting later in

141
00:09:41.020 --> 00:09:41.981
the day.

142
00:09:41.981 --> 00:09:42.714
I'm getting cranky.

143
00:09:42.714 --> 00:09:48.624
[LAUGH] HandleSearchTerm is going
to function that showsSearch

144
00:09:48.624 --> 00:09:55.210
is going to be a boolean or a bool and
searchTerm is going to be a string.

145
00:10:01.270 --> 00:10:04.216
Any questions about that?
&gt;&gt; Speaker 4: If you have showSearch is

146
00:10:04.216 --> 00:10:09.394
an optional prop type, but
if you have showSearch,

147
00:10:09.394 --> 00:10:17.030
then wouldn't you want searchTerm and
handleSearchTerm to be required?

148
00:10:17.030 --> 00:10:20.580
How would you define that?
&gt;&gt; Brian Holt: I don't know if you

149
00:10:20.580 --> 00:10:24.020
can do this, cascading is required.

150
00:10:24.020 --> 00:10:25.914
I'm not aware of aware
of a way to do that.

151
00:10:25.914 --> 00:10:29.109
Yeah as far as I know is
just is required or not.

152
00:10:29.109 --> 00:10:32.021
I can see where they would be useful but

153
00:10:32.021 --> 00:10:35.604
I don't know.
&gt;&gt; Speaker 2: Suppose you could bundle it

154
00:10:35.604 --> 00:10:39.281
as like an object and then the properties,
I mean is not pretty.

155
00:10:39.281 --> 00:10:39.985
&gt;&gt; Brian Holt: Yeah.

156
00:10:39.985 --> 00:10:40.797
&gt;&gt; Speaker 2: [CROSSTALK].

157
00:10:40.797 --> 00:10:41.388
&gt;&gt; Brian Holt: This is a really

158
00:10:41.388 --> 00:10:42.940
complicated and scary mess to get into.

159
00:10:45.470 --> 00:10:47.760
And this is just a bugging help.

160
00:10:47.760 --> 00:10:52.320
It's just kind of type hinting so doing
much more work than this is tough for

161
00:10:52.320 --> 00:10:52.930
me to justify.

162
00:10:54.220 --> 00:10:56.030
At that point I'd rather
just use typescript and

163
00:10:56.030 --> 00:10:58.180
the typescript take care of it.

164
00:10:58.180 --> 00:10:59.130
And that interested in it.

165
00:11:02.190 --> 00:11:05.890
The nice thing about making these
definitely don't make these is required.

166
00:11:05.890 --> 00:11:09.780
Because now if I just don't
give cert showSearch,

167
00:11:09.780 --> 00:11:13.400
it does just assumes that
showSearch is gonna be false and so

168
00:11:13.400 --> 00:11:17.850
now if you go back and look at details
.JSX, actually don't have to changes this

169
00:11:17.850 --> 00:11:20.420
at all because I'm not passing
that showSearch as required.

170
00:11:20.420 --> 00:11:22.870
It's just going to
default back to the back.

171
00:11:22.870 --> 00:11:24.350
And that's really nice.

