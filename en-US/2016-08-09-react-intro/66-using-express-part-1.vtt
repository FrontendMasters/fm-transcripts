WEBVTT

1
00:00:00.036 --> 00:00:04.032
[MUSIC]

2
00:00:04.032 --> 00:00:06.272
&gt;&gt; Brian Holt: Here comes
a bunch of just code vomit,

3
00:00:06.272 --> 00:00:11.100
unfortunate this is a really long file and
you just have to write it.

4
00:00:11.100 --> 00:00:14.480
And there's no, again there's like,
you go from zero to done, and

5
00:00:14.480 --> 00:00:15.656
there's no middle step.

6
00:00:15.656 --> 00:00:19.780
So I'll be explaining line
by line while I'm going, but

7
00:00:19.780 --> 00:00:22.350
then will look at it
holistically after I'm done.

8
00:00:22.350 --> 00:00:25.871
And then after I'm done with
this I'll cut a branch.

9
00:00:29.970 --> 00:00:33.170
&gt;&gt; Brian Holt: Yeah I got,
I think we're doing well in time.

10
00:00:33.170 --> 00:00:36.361
So we're gonna be done by five I think.

11
00:00:38.820 --> 00:00:42.048
&gt;&gt; [INAUDIBLE]
&gt;&gt; Brian Holt: What's that?

12
00:00:42.048 --> 00:00:43.003
&gt;&gt; Speaker 2: What do you call this file?

13
00:00:43.003 --> 00:00:44.979
&gt;&gt; Brian Holt: This going
to be called app.js, oops.

14
00:00:47.060 --> 00:00:47.708
&gt;&gt; Speaker 2: In the root?

15
00:00:47.708 --> 00:00:51.690
&gt;&gt; Brian Holt: Yeah this is going in
the root and this is not going JS.

16
00:00:51.690 --> 00:00:54.375
So it's going to be app.js but
it's not going and JS.

17
00:00:59.575 --> 00:01:01.876
&gt;&gt; Brian Holt: We can also call
it server JS if that's better for

18
00:01:01.876 --> 00:01:04.300
you just make sure that you
always refer to as such.

19
00:01:06.180 --> 00:01:09.190
First thing you wanna
do is babel-register.

20
00:01:09.190 --> 00:01:12.130
This is basically saying it's
going to hook into require.

21
00:01:12.130 --> 00:01:16.880
Now every file that you get required, is
going to transpiled, but it's key to note

22
00:01:16.880 --> 00:01:22.810
that this file that we're in right
now app.js does not get transpiled.

23
00:01:22.810 --> 00:01:27.410
So we can't use all our fanciest ES6,
we can't use JSX in here, we can

24
00:01:27.410 --> 00:01:31.130
only use whatever node it can understand,
but everything that it requires can.

25
00:01:32.590 --> 00:01:37.380
And you can use babel-node if you want to,
but I don't wanna show you that

26
00:01:37.380 --> 00:01:40.200
because you don't use babel-node
in production, it's way too slow.

27
00:01:41.290 --> 00:01:42.916
So this is the way it has to be.

28
00:01:46.040 --> 00:01:47.746
&gt;&gt; Brian Holt: We're
gonna be using express,

29
00:01:47.746 --> 00:01:51.180
express is just a lightweight server for
node.

30
00:01:52.890 --> 00:01:57.040
You could be using COA you could be using
happy anywhere this is totally fine.

31
00:01:58.890 --> 00:02:02.243
Upon react, hope you are familiar
at this point with react,

32
00:02:02.243 --> 00:02:04.359
otherwise I have greatly failed you.

33
00:02:07.254 --> 00:02:12.193
&gt;&gt; Brian Holt: Const reactDOMserver,
this is specifically a package for

34
00:02:12.193 --> 00:02:14.670
rendering react to a string.

35
00:02:17.370 --> 00:02:20.300
So it's going to be react-dom/server.

36
00:02:20.300 --> 00:02:24.820
We're going to get react router as well.

37
00:02:28.516 --> 00:02:29.987
&gt;&gt; Brian Holt: There is
a lot it requires here.

38
00:02:32.421 --> 00:02:37.437
&gt;&gt; Brian Holt: And actually,
&gt;&gt; Brian Holt: Actually what

39
00:02:37.437 --> 00:02:42.841
we want out of this is not React router,
we want match out of it like that.

40
00:02:47.021 --> 00:02:49.330
&gt;&gt; Brian Holt: And
we also want RouterContext.

41
00:02:49.330 --> 00:02:52.048
So match and RouterContext.

42
00:03:00.500 --> 00:03:04.410
&gt;&gt; Brian Holt: Then we want,
from react redux, we want provider,

43
00:03:08.315 --> 00:03:12.829
&gt;&gt; Brian Holt: Equals require react redux

44
00:03:17.161 --> 00:03:20.226
&gt;&gt; Brian Holt: Const store, we're going to

45
00:03:20.226 --> 00:03:25.008
be pulling in our own
store from our own store,

46
00:03:25.008 --> 00:03:29.608
so it's gonna be require./JS/store.

47
00:03:29.608 --> 00:03:34.726
Unfortunately, we can't do the trick
of saying just store we actually

48
00:03:34.726 --> 00:03:39.501
have to do say JSX because this is
not Webpac there's no resolve for

49
00:03:39.501 --> 00:03:43.702
us, we actually have to specify
that this is the JSX file.

50
00:03:46.558 --> 00:03:51.081
&gt;&gt; Brian Holt: You're gonna pull in low
dash underscore equals require a low dash

51
00:03:51.081 --> 00:03:53.100
we're going to using that for

52
00:03:53.100 --> 00:03:57.180
the templating that we're just
talking about in the HTML.

53
00:03:57.180 --> 00:04:00.725
We're pulling in FS,
which stands for file system.

54
00:04:00.725 --> 00:04:05.975
This is from node, cuz we have to
read that index file into memory.

55
00:04:05.975 --> 00:04:11.052
I'm gonna do const port=5050,
you can do 8080y you

56
00:04:11.052 --> 00:04:16.215
can do 8000 whatever you want,
I gonna use 5050.

57
00:04:16.215 --> 00:04:22.563
Const basedTemplate = require.

58
00:04:25.004 --> 00:04:29.256
&gt;&gt; Brian Holt: Sorry,
not require cuz you can't require HTML, so

59
00:04:29.256 --> 00:04:34.185
I'm gonna say fs.readFileSync
(./index.html), so

60
00:04:34.185 --> 00:04:41.420
this is just gonna read whatever is in
index or HTML, bring that into memory.

61
00:04:41.420 --> 00:04:42.750
We're gonna use that to template.

62
00:04:44.190 --> 00:04:52.360
Actually right now, so we're gonna say
const template = _template(baseTemplate).

63
00:04:52.360 --> 00:04:58.847
So basically this is going to create a new
function that whenever we call template,

64
00:04:58.847 --> 00:05:03.955
it's going to create a new string
with this using this template.

65
00:05:07.605 --> 00:05:10.056
&gt;&gt; Brian Holt: That's usually
confusing for some people, so

66
00:05:10.056 --> 00:05:13.742
this is a function that returns to
function in case anyone missed that.

67
00:05:17.169 --> 00:05:22.229
&gt;&gt; Brian Holt: Const clientapp,
this is where we're gonna pull

68
00:05:22.229 --> 00:05:29.342
in our clientApp =
require(./js/client/ClientApp.jsx),

69
00:05:29.342 --> 00:05:33.820
const, is that all we need out of there?.

70
00:05:33.820 --> 00:05:42.092
I might actually be,so we can
just actually say routes, right.

71
00:05:42.092 --> 00:05:45.221
Routes like that.

72
00:05:49.466 --> 00:05:53.610
&gt;&gt; Brian Holt: Actually that might not
work, this might not work in node.

73
00:05:53.610 --> 00:05:57.789
We'll try it and we might have to refactor
this to be a little bit more explicit.

74
00:06:02.075 --> 00:06:03.630
&gt;&gt; Brian Holt: I mean,
const works for sure.

75
00:06:03.630 --> 00:06:06.870
So const app =express.

76
00:06:06.870 --> 00:06:08.850
Actually, I remember it doesn't work,
so sorry.

77
00:06:08.850 --> 00:06:11.010
We have to refactor a little bit.

78
00:06:11.010 --> 00:06:20.072
So this has to say const
match=react router.match,

79
00:06:20.072 --> 00:06:24.012
const routercontext =

80
00:06:24.012 --> 00:06:30.119
reactrouter.routercontext, and

81
00:06:30.119 --> 00:06:36.624
I'm just turn this into reactrouter.

82
00:06:40.699 --> 00:06:45.290
&gt;&gt; Brian Holt: And
this is gonna be ReactRedux.

83
00:06:49.690 --> 00:06:54.230
&gt;&gt; Brian Holt: And
this is gonna be Provider.

84
00:07:02.033 --> 00:07:08.135
&gt;&gt; Brian Holt: .provider, and
they're going to say const store,

85
00:07:08.135 --> 00:07:13.566
this one's all that weird,
but just put that.

86
00:07:15.320 --> 00:07:17.778
&gt;&gt; Brian Holt: Equals store.store.

87
00:07:21.621 --> 00:07:23.990
&gt;&gt; Brian Holt: Okay, yeah I forgot.

88
00:07:23.990 --> 00:07:28.540
Because destructuring doesn't work in
node as of 4.3, it doesn't work anyway.

89
00:07:28.540 --> 00:07:32.905
I'm may work in five,
I don't think it does though.

90
00:07:34.065 --> 00:07:37.503
Okay, and then I have to do
routes down here as well don't I?

91
00:07:41.593 --> 00:07:46.495
&gt;&gt; Brian Holt: This is going
to be ClientApp.routes,

92
00:07:51.329 --> 00:07:53.841
&gt;&gt; Brian Holt: ClientApp=that.

93
00:07:57.707 --> 00:07:59.252
&gt;&gt; Brian Holt: Is that enough requires for
you?

94
00:07:59.252 --> 00:08:01.590
[LAUGH] It's a wall of text.

95
00:08:04.320 --> 00:08:06.193
All right, now for the meat of it,

96
00:08:06.193 --> 00:08:09.689
this gets a little fun [LAUGH]
depending on the definition of fun.

97
00:08:13.321 --> 00:08:16.170
&gt;&gt; Brian Holt: So we'll create
a new express server right there.

98
00:08:16.170 --> 00:08:20.894
And then we're gonna

99
00:08:20.894 --> 00:08:26.144
do app.use/public,

100
00:08:26.144 --> 00:08:34.310
express.static(./public).

101
00:08:34.310 --> 00:08:37.525
Now, what's happening here?

102
00:08:37.525 --> 00:08:40.650
[COUGH] What's actually happening here is,
whenever someone request something to

103
00:08:40.650 --> 00:08:43.830
public, we wanna just immediately serve
them whatever files in there, right?

104
00:08:43.830 --> 00:08:48.659
So, if someone requests style.css if
we want to serve them, styles.css,

105
00:08:48.659 --> 00:08:51.201
that's what a static file server does.

106
00:08:52.904 --> 00:08:55.172
&gt;&gt; Brian Holt: It also sets all the proper
headers and everything like that,

107
00:08:55.172 --> 00:08:58.051
it does some auto magic for you behind
the scenes, that's really annoying and

108
00:08:58.051 --> 00:08:59.420
not very fun so I'm okay doing that.

109
00:09:01.110 --> 00:09:03.460
And now everything else,
if that's not going to public,

110
00:09:03.460 --> 00:09:06.240
it's going to go through react router and
that's the way we want it.

111
00:09:06.240 --> 00:09:08.813
So we're going to say app.use, and

112
00:09:08.813 --> 00:09:12.554
it's going to be a function
that says (req, res).

113
00:09:15.203 --> 00:09:17.312
&gt;&gt; Brian Holt: So basically
anything that doesn't match this,

114
00:09:17.312 --> 00:09:19.380
is going to match this,
that's the gist there.

115
00:09:21.950 --> 00:09:26.020
And we're going to use the match function
that we brought in from react router.

116
00:09:28.000 --> 00:09:32.460
And what this is going to do is,
this actually uses the same matching

117
00:09:32.460 --> 00:09:36.030
algorithm that react router does and
it's going to run it on the server for us.

118
00:09:37.980 --> 00:09:44.700
So routes is gonna be routes,capital R,
right?

119
00:09:44.700 --> 00:09:47.041
So that's, this function that
we're getting from clientApp.

120
00:09:50.330 --> 00:09:54.163
&gt;&gt; Brian Holt: Okay, and location is
going to be coming from our requests,

121
00:09:54.163 --> 00:09:58.850
so that's why it's req and res here,
this is request and response.

122
00:09:58.850 --> 00:10:02.100
So everything to do with what the user
is sending to you goes into request,

123
00:10:02.100 --> 00:10:04.580
everything they want to send
back goes into response.

124
00:10:04.580 --> 00:10:08.823
And that's always abbreviated
in node as req and res.

125
00:10:11.495 --> 00:10:13.570
&gt;&gt; Brian Holt: If you want to put
requests and response that's fine.

126
00:10:14.940 --> 00:10:16.720
Just showing you how
everyone always does it.

127
00:10:16.720 --> 00:10:17.789
&gt;&gt; Speaker 3: Can you use error functions?

128
00:10:18.920 --> 00:10:19.562
&gt;&gt; Brian Holt: Yep, you can.

129
00:10:19.562 --> 00:10:20.400
&gt;&gt; Speaker 3: Okay.

130
00:10:23.402 --> 00:10:24.902
&gt;&gt; Brian Holt: It's a crapshoot I know,
and

131
00:10:24.902 --> 00:10:28.636
most this is like I just read it the first
time as he's like does this work?

132
00:10:28.636 --> 00:10:30.760
Damn and they switch to the old syntax.

133
00:10:35.774 --> 00:10:39.677
&gt;&gt; Brian Holt: Okay, so match is gonna do
its best to try and find something that

134
00:10:39.677 --> 00:10:44.900
matches, and then it's gonna call
it's callback with whatever happened.

135
00:10:44.900 --> 00:10:46.156
So it's gonna be error,

136
00:10:48.025 --> 00:10:52.780
&gt;&gt; Brian Holt: RedirectLocation

137
00:10:52.780 --> 00:10:56.645
render props.

138
00:11:00.868 --> 00:11:03.151
&gt;&gt; Brian Holt: So it's going to call
this function whenever it finds or

139
00:11:03.151 --> 00:11:04.960
doesn't find whatever it's looking for.

140
00:11:06.180 --> 00:11:10.470
So error is going to be like I hit a 500,
like something went wrong and

141
00:11:10.470 --> 00:11:13.750
what the if their server exploded,
that's error is.

142
00:11:13.750 --> 00:11:17.940
Redirect location means react router
told me to redirect somewhere, so

143
00:11:17.940 --> 00:11:21.350
I want you to redirect somewhere.

144
00:11:21.350 --> 00:11:23.280
And then if both error and

145
00:11:23.280 --> 00:11:26.930
redirect location are undefined and render
props is done, then that means I found

146
00:11:26.930 --> 00:11:30.990
the correct route here all the properties
I want you to give to the route.

147
00:11:30.990 --> 00:11:33.820
And then if error, redirect location and

148
00:11:33.820 --> 00:11:37.030
render props are all undefined,
that means 404, nothing was found.

149
00:11:38.700 --> 00:11:41.760
So that's the general progression
of what's going on here.

