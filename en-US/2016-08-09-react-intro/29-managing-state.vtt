WEBVTT

1
00:00:00.000 --> 00:00:03.864
[MUSIC]

2
00:00:03.864 --> 00:00:06.501
&gt;&gt; Brian Holt: Now we have a state full
component and not much has changed so

3
00:00:06.501 --> 00:00:12.139
far.
&gt;&gt; Brian Holt: Now

4
00:00:12.139 --> 00:00:18.620
what we're gonna do is we're gonna
start adding some state to it.

5
00:00:20.460 --> 00:00:22.170
I don't know why I have
two different things here.

6
00:00:22.170 --> 00:00:24.120
I'll just show you both syntaxes,
that's all.

7
00:00:26.310 --> 00:00:31.172
Okay, so now we have to put in
another method called getInitialState.

8
00:00:41.951 --> 00:00:43.385
&gt;&gt; Brian Holt: Always a danger of writing

9
00:00:43.385 --> 00:00:45.090
this off the top of your head.

10
00:00:45.090 --> 00:00:47.910
This actually doesn't take anything,
so it's just as that, okay.

11
00:00:49.450 --> 00:00:54.870
This is though maybe the major key
difference between the class syntax and

12
00:00:54.870 --> 00:00:56.120
this syntax.

13
00:00:56.120 --> 00:01:01.080
With the class syntax you do
this instead of the constructor.

14
00:01:01.080 --> 00:01:04.720
The constructors is like,
what's run when you create the new object.

15
00:01:04.720 --> 00:01:08.120
Inside of their create
class way of writing this

16
00:01:08.120 --> 00:01:09.875
you do instead of getInitialState.

17
00:01:09.875 --> 00:01:15.460
So that's the biggest difference.
&gt;&gt; Brian Holt: Here, we're going

18
00:01:15.460 --> 00:01:20.750
to return an object that we want to be the
initial state of our particular component.

19
00:01:20.750 --> 00:01:26.126
So in this particular way,
we're gonna say return searchTerm and

20
00:01:26.126 --> 00:01:32.079
then you can put whatever string you
want here like this is my search term.

21
00:01:32.079 --> 00:01:39.190
Whatever you want the default thing to be,
okay?

22
00:01:39.190 --> 00:01:46.459
And then what we're gonna do is we're
gonna go down to the input here and

23
00:01:46.459 --> 00:01:53.126
we're gonna make this value
equals this.state.search term,

24
00:01:53.126 --> 00:01:57.438
okay?
&gt;&gt; Brian Holt: And

25
00:01:57.438 --> 00:02:00.410
just to show you that you can
reference this in multiple places.

26
00:02:00.410 --> 00:02:02.620
What I'm gonna do here is svideo.

27
00:02:02.620 --> 00:02:06.641
Just temporarily I'm gonna change
this to be this.state.searchTerm as

28
00:02:06.641 --> 00:02:12.269
well.
&gt;&gt; Brian Holt: We'll

29
00:02:12.269 --> 00:02:14.535
change that back here in just a sec.

30
00:02:14.535 --> 00:02:16.755
But this is just for
demonstration purposes.

31
00:02:18.515 --> 00:02:25.506
Okay, so save all that.
&gt;&gt; Speaker 2: Comma

32
00:02:25.506 --> 00:02:29.590
after the getInitialState.
&gt;&gt; Brian Holt: Yes, you do.

33
00:02:32.420 --> 00:02:33.987
The dangers of changing
your notes on the fly.

34
00:02:33.987 --> 00:02:37.570
So when you're doing the class syntax.

35
00:02:37.570 --> 00:02:40.550
ES6 classes expect no
commas between methods.

36
00:02:40.550 --> 00:02:44.130
I don't know why they decided that
because it just seems to be inconsistent.

37
00:02:44.130 --> 00:02:48.950
But that's what the TC39 decided whereas
like now we're just an object, right?

38
00:02:48.950 --> 00:02:52.860
You obviously need commas
inside of your objects.

39
00:02:52.860 --> 00:02:55.520
Okay, so yeah, save that.

40
00:02:55.520 --> 00:02:56.690
Yeah, that worked just fine.

41
00:02:56.690 --> 00:03:02.390
So let's refresh.

42
00:03:03.610 --> 00:03:05.940
So now it says,
this is my searchTerm right here,

43
00:03:05.940 --> 00:03:08.460
and notice that's what it
says inside the box too.

44
00:03:08.460 --> 00:03:12.185
But I want you to go and try and
type inside of the search box.

45
00:03:12.185 --> 00:03:15.836
[SOUND] We broke it.

46
00:03:15.836 --> 00:03:18.100
[LAUGH] How do you break an input?

47
00:03:18.100 --> 00:03:20.380
It's actually very difficult
to break an input.

48
00:03:20.380 --> 00:03:22.180
They work fairly well for the most part.

49
00:03:23.570 --> 00:03:26.300
Let's talk about what React is
doing underneath the hood here.

50
00:03:27.360 --> 00:03:31.020
What React is actually trying to do here
is every time I touch that keyboard,

51
00:03:31.020 --> 00:03:33.770
React is like,
I know an event happened, right?

52
00:03:33.770 --> 00:03:36.620
So I'm gonna fire off a re-render cycle.

53
00:03:36.620 --> 00:03:41.380
Well you have to remember,
this is my search term.

54
00:03:41.380 --> 00:03:45.630
So every time it re-renders,
it's going to put that in the value here.

55
00:03:45.630 --> 00:03:47.030
And because nothing is actually changing,

56
00:03:47.030 --> 00:03:50.690
there's nothing binding this
input to this search term.

57
00:03:50.690 --> 00:03:54.481
So every time it fires off that re-render
it's it's just gonna put it right back

58
00:03:54.481 --> 00:03:57.111
where it was right,
because nothing ever modifies it.

59
00:03:57.111 --> 00:04:00.100
Does that makes sense?

60
00:04:00.100 --> 00:04:01.300
I mean it's crazy, right?

61
00:04:01.300 --> 00:04:04.428
Like it's kind of dumb and I actually,
like a lot of people don't like React for

62
00:04:04.428 --> 00:04:04.999
that reason.

63
00:04:04.999 --> 00:04:09.071
There's none of this magical to a binding
read like that's that's a term that

64
00:04:09.071 --> 00:04:13.141
they're loves to throw around these two
way bindings also Ember does it too and

65
00:04:13.141 --> 00:04:14.020
everyone does.

66
00:04:15.190 --> 00:04:19.300
This takes a much more explicit
approach is like hey this is your UI,

67
00:04:19.300 --> 00:04:21.020
you need to handle your own events.

68
00:04:22.540 --> 00:04:27.897
So let's make it handle its own events.
&gt;&gt; Brian Holt: We are gonna put

69
00:04:27.897 --> 00:04:34.600
in a another method in here
called handle search term event.

70
00:04:36.810 --> 00:04:41.686
It takes in an event.

71
00:04:41.686 --> 00:04:46.426
All this is gonna do is this
is gonna say this.setState.

72
00:04:50.465 --> 00:04:53.503
&gt;&gt; Brian Holt: searchTerm:

73
00:04:53.503 --> 00:04:59.080
event.target.value.

74
00:04:59.080 --> 00:05:02.078
If anyone's ever done jQuery before,
that looks super familiar, right?

75
00:05:02.078 --> 00:05:05.310
The event.target.value, right?

76
00:05:05.310 --> 00:05:09.900
This event is actually not really a DOM
event, it's a synthetic event but

77
00:05:09.900 --> 00:05:11.740
you can treat it just like a normal event.

78
00:05:11.740 --> 00:05:19.920
They've emulated the API perfectly.
&gt;&gt; Brian Holt: Okay?

79
00:05:19.920 --> 00:05:21.580
So now we have our event handler.

80
00:05:21.580 --> 00:05:24.380
Now we have to actually
make it handle the event.

81
00:05:24.380 --> 00:05:30.085
So we're gonna go down here to
the input and then we're are gonna say,

82
00:05:30.085 --> 00:05:33.675
onChange this.handleSearchTermEvent.

83
00:05:45.491 --> 00:05:48.680
&gt;&gt; Brian Holt: So this part right here.

84
00:05:48.680 --> 00:05:52.703
So we had added handleSearchTermEvent and
we added this onChange right here.

85
00:06:01.619 --> 00:06:02.254
&gt;&gt; Brian Holt: Any questions about that?

86
00:06:02.254 --> 00:06:06.460
To make sure I'm not
blowing up anything here.

87
00:06:06.460 --> 00:06:10.605
Let's get here.
&gt;&gt; Brian Holt: And

88
00:06:10.605 --> 00:06:12.130
let's go ahead and refresh here.

89
00:06:13.610 --> 00:06:18.579
So now hopefully.
&gt;&gt; Brian Holt: If

90
00:06:18.579 --> 00:06:22.900
you look over here it's magically on
the fly updating our title over here.

91
00:06:22.900 --> 00:06:26.183
So now,
it actually is bound to each other.

92
00:06:34.283 --> 00:06:36.388
&gt;&gt; Brian Holt: Data binding is not free in

93
00:06:36.388 --> 00:06:37.730
React.

94
00:06:37.730 --> 00:06:39.620
But it's pretty cheap.

95
00:06:39.620 --> 00:06:40.990
It's not very expensive to do.

96
00:06:42.810 --> 00:06:46.380
I like it better because there's
no black magic here, right.

97
00:06:46.380 --> 00:06:49.840
I hate when I'm doing writing code,
it's why I don't write Rails, right?

98
00:06:49.840 --> 00:06:53.690
If you buy into the Rails methodology and
you buy into the Rails black magic,

99
00:06:53.690 --> 00:06:55.230
it's the best, right.

100
00:06:55.230 --> 00:06:57.660
Because you do things and
like I do one thing,

101
00:06:57.660 --> 00:07:02.570
then you skip steps two three four and
five and you're omit the step six, right.

102
00:07:02.570 --> 00:07:06.285
My programming mind doesn't work as I
wanna know what's happening on the steps

103
00:07:06.285 --> 00:07:07.010
in the middle.

104
00:07:07.010 --> 00:07:11.090
And particularly if there's a bug in the
middle of those steps like then I'm just

105
00:07:11.090 --> 00:07:13.970
livid right because they
messed it up not me.

106
00:07:13.970 --> 00:07:16.680
And if I have bugs, I want them to be
my bugs because I wrote them because

107
00:07:16.680 --> 00:07:18.230
I'm the idiot,
not someone else is the idiot.

108
00:07:19.530 --> 00:07:21.770
So that's why I like this,
there's no black magic to it.

109
00:07:21.770 --> 00:07:24.470
I know exactly how I'm getting
from point A to point B.

110
00:07:29.880 --> 00:07:32.370
A lot of people will comment
to me like this feels like

111
00:07:32.370 --> 00:07:37.450
back in 1999 when I was saying like
onChange right directly in the DOM.

112
00:07:37.450 --> 00:07:41.190
I feel like this is OK because
on the flip side, right,

113
00:07:41.190 --> 00:07:45.860
because now I can say onChange
this.handleSearchTerm.

114
00:07:45.860 --> 00:07:47.870
Where is this start handleSearchTerm?

115
00:07:47.870 --> 00:07:50.830
It's right here,
like it's literally just above it, right.

116
00:07:50.830 --> 00:07:53.740
Whereas in the other case, you'd read it
in your HTML and then it'd be in some

117
00:07:53.740 --> 00:07:57.390
other random JavaScript file that who
the hell knows where that is, right.

118
00:07:57.390 --> 00:08:01.289
This is nice because all of our concerns
are just mashed together in one component.

119
00:08:05.040 --> 00:08:06.020
Okay.

120
00:08:06.020 --> 00:08:07.758
Any questions about that?
&gt;&gt; Speaker 3: So

121
00:08:07.758 --> 00:08:13.056
like 95% of the time though, input binding
shouldn't be much more complicated

122
00:08:13.056 --> 00:08:16.753
than just modifying the string, right.
&gt;&gt; Brian Holt: Mm-hm.

123
00:08:16.753 --> 00:08:18.330
&gt;&gt; Speaker 3: And there's no shorthand for

124
00:08:18.330 --> 00:08:20.600
that?
&gt;&gt; Brian Holt: There is,

125
00:08:20.600 --> 00:08:23.950
there is link events.

126
00:08:23.950 --> 00:08:27.870
It's a React add-on, so
it actually is maintained by React itself.

127
00:08:27.870 --> 00:08:30.680
And there's link state,
that's what it's called, React link state.

128
00:08:30.680 --> 00:08:36.450
So if you wanna Google and use that,
it's not a whole lot more short than this,

129
00:08:36.450 --> 00:08:40.980
to the point that sometimes like
you need to do some sort of other

130
00:08:40.980 --> 00:08:45.050
data merging in here rather than,
it's not so simple as the sidestep state.

131
00:08:45.050 --> 00:08:47.679
So the nice thing about doing
it the long way, the long way,

132
00:08:47.679 --> 00:08:50.415
like the additional 20 characters
you are gonna type here is

133
00:08:50.415 --> 00:08:53.750
now I already have this method here if
I have to go ever change in the future.

