WEBVTT

1
00:00:00.000 --> 00:00:04.358
[MUSIC]

2
00:00:04.358 --> 00:00:06.015
&gt;&gt; Brian Holt: I guess the question is,
what questions do you have?

3
00:00:06.015 --> 00:00:08.540
Like, probably the craziest
thing we did was this.

4
00:00:11.500 --> 00:00:15.470
&gt;&gt; Speaker 2: So that filter is being
fired every time the value changes?

5
00:00:15.470 --> 00:00:16.465
&gt;&gt; Brian Holt: Yep.
&gt;&gt; Speaker 2: In either of those.

6
00:00:16.465 --> 00:00:17.200
Okay.

7
00:00:17.200 --> 00:00:18.410
&gt;&gt; Brian Holt: It is.

8
00:00:18.410 --> 00:00:21.347
So every time you type,
it's doing that filter.

9
00:00:21.347 --> 00:00:26.214
So, I mean, that's something to keep in
mind that this render function needs to be

10
00:00:26.214 --> 00:00:31.030
pretty damn performant, because it's
gonna get run a lot, a lot, a lot, a lot.

11
00:00:32.590 --> 00:00:35.720
So if you're doing really heavy lifting,
it's gonna slow down your entire render,

12
00:00:35.720 --> 00:00:37.060
so you want to make sure
this is pretty fast.

13
00:00:37.060 --> 00:00:41.690
We don't have that many shows, so
this actually ends up being pretty fast.

14
00:00:41.690 --> 00:00:44.240
But if we were filtering
over a set of 10,000 movies,

15
00:00:44.240 --> 00:00:46.980
you would want to offload
that somewhere else.

16
00:00:47.990 --> 00:00:52.968
Maybe do some sort of debouncing
of that filter, right, so

17
00:00:52.968 --> 00:00:59.453
that it would only filter every 500
milliseconds or something like that.

18
00:01:02.534 --> 00:01:04.110
&gt;&gt; Brian Holt: What other questions?

19
00:01:04.110 --> 00:01:08.471
Does this line make sense to people, or
does anyone else want me to re-explain it?

20
00:01:08.471 --> 00:01:09.550
&gt;&gt; Speaker 3: Can you go
through it one more time?

21
00:01:09.550 --> 00:01:10.840
&gt;&gt; Brian Holt: Sure, definitely.

22
00:01:10.840 --> 00:01:12.989
So let's make this
a little bit more verbose.

23
00:01:14.170 --> 00:01:15.230
I think that usually helps.

24
00:01:34.313 --> 00:01:37.847
&gt;&gt; Brian Holt: Okay, so that makes
it perhaps a little bit clearer.

25
00:01:37.847 --> 00:01:41.561
Or we can even just make this function,
get rid of that.

26
00:01:41.561 --> 00:01:42.979
Okay?

27
00:01:42.979 --> 00:01:47.620
And then let's just break this
down piece by piece, okay?

28
00:01:47.620 --> 00:01:48.120
So.

29
00:01:54.486 --> 00:01:56.277
&gt;&gt; Brian Holt: First thing is
we're concatenating the title and

30
00:01:56.277 --> 00:01:58.835
the description, right, because we
wanna search both in the title and

31
00:01:58.835 --> 00:01:59.529
the description.

32
00:01:59.529 --> 00:02:00.617
Okay.

33
00:02:00.617 --> 00:02:03.370
We're making it, toUpperCase.

34
00:02:03.370 --> 00:02:06.920
The reason why we want to
be case insensitive, right?

35
00:02:06.920 --> 00:02:08.720
Otherwise, if I search for
lowercase house,

36
00:02:08.720 --> 00:02:10.310
I wouldn't find House of Cards, right.

37
00:02:10.310 --> 00:02:12.529
I want to find both of
those with lower case.

38
00:02:12.529 --> 00:02:13.532
Okay.

39
00:02:13.532 --> 00:02:15.457
indexOf is checking to say,

40
00:02:15.457 --> 00:02:20.810
the said does this search term exist
anywhere inside of the string.

41
00:02:20.810 --> 00:02:24.420
We're also making this toUpperCase,
right, so that it can match that as well.

42
00:02:25.540 --> 00:02:31.856
And if it's less than 0, that means it
wasn't found anywhere in the string.

43
00:02:31.856 --> 00:02:34.831
And if it's less than or
equal to zero, it can be zero,

44
00:02:34.831 --> 00:02:37.430
because if it's the very first thing,
right?

45
00:02:37.430 --> 00:02:42.070
So if I search for house,
it's gonna return 0 for

46
00:02:42.070 --> 00:02:44.610
House of Cards, right, because that's
the first thing in House of Cards.

47
00:02:46.540 --> 00:02:51.830
And, yeah, so if it returns true,
it keeps it in the array, right.

48
00:02:51.830 --> 00:02:54.668
If it returns false,
it drops it from the arra.

49
00:02:54.668 --> 00:02:56.630
Y so if I type house,
it's gonna drop daredevil,

50
00:02:56.630 --> 00:02:58.849
because daredevil doesn't
have house anywhere in it.

51
00:03:01.744 --> 00:03:02.680
&gt;&gt; Brian Holt: Better, worse?

52
00:03:02.680 --> 00:03:03.987
Okay, cool.

53
00:03:10.691 --> 00:03:12.800
&gt;&gt; Brian Holt: So we just made
this little bit more terse, right.

54
00:03:12.800 --> 00:03:16.075
We left out the curly brace,
which means it's an implicit return.

55
00:03:16.075 --> 00:03:18.830
And then we're using
arrow functions as well.

56
00:03:23.430 --> 00:03:25.960
&gt;&gt; Brian Holt: Other questions?

57
00:03:25.960 --> 00:03:27.740
&gt;&gt; Speaker 4: Can you push a branch here?

58
00:03:27.740 --> 00:03:30.431
&gt;&gt; Brian Holt: Yep.
I think we're gonna probably end here for

59
00:03:30.431 --> 00:03:33.073
the day as well,
cuz I said I'd end at four.

60
00:03:33.073 --> 00:03:37.825
And it's gonna take me at least another
half hour to 40 minutes to talk

61
00:03:37.825 --> 00:03:39.380
about unit testing.

62
00:03:39.380 --> 00:03:40.107
So.

63
00:03:40.107 --> 00:03:41.768
&gt;&gt; Speaker 4: One question,
I don't know if you missed it,

64
00:03:41.768 --> 00:03:42.810
this was a little bit ago.

65
00:03:42.810 --> 00:03:47.840
Can you use fat arrows for
auto binding with ES6 classes?

66
00:03:47.840 --> 00:03:50.564
&gt;&gt; Brian Holt: One of the standard
React rules is not to do that,

67
00:03:50.564 --> 00:03:52.630
because it's very not performant.

68
00:03:52.630 --> 00:03:58.697
.bind is actually a fairly, well, I mean,
comparatively fairly expensive maneuver.

69
00:03:58.697 --> 00:04:03.595
And so when you're doing render at lot and
you're doing a lot of .binds,

70
00:04:03.595 --> 00:04:08.335
which is what fat arrow functions
being compiled to Babel end up doing,

71
00:04:08.335 --> 00:04:13.800
ends up being pretty expensive, so there's
actually a rule to disallow that in.

72
00:04:18.319 --> 00:04:19.503
&gt;&gt; Brian Holt: With standard React.

73
00:04:19.503 --> 00:04:21.690
So it does work, it's expensive.

74
00:04:21.690 --> 00:04:23.419
That's the complete
answer to that question.

75
00:04:30.127 --> 00:04:31.850
&gt;&gt; Brian Holt: Any other questions?

76
00:04:37.803 --> 00:04:41.040
&gt;&gt; Brian Holt: Who eventually got here,
where it's filtering on the fly?

77
00:04:44.730 --> 00:04:45.230
Cool.

78
00:04:46.470 --> 00:04:48.960
Anyone seeing any weird errors
that they're not expecting?

79
00:04:51.390 --> 00:04:56.002
&gt;&gt; Speaker 4: Somebody's asking, he might
get it once you push, but he's getting

80
00:04:56.002 --> 00:05:01.023
input into the search box, but
it doesn't seem to trigger the re-render.

81
00:05:01.023 --> 00:05:05.665
&gt;&gt; Brian Holt: My guess is that
somewhere is messed up with the search

82
00:05:05.665 --> 00:05:09.750
term is not getting updated correctly.

83
00:05:09.750 --> 00:05:12.538
So I would make sure that you
have handleSearchTerm, and

84
00:05:12.538 --> 00:05:14.059
it's using this.setState.

85
00:05:14.059 --> 00:05:18.970
I would recommend making sure that
the onChange is correct here, and

86
00:05:18.970 --> 00:05:21.433
that the value is correct as well.

87
00:05:21.433 --> 00:05:24.418
Okay.

88
00:05:24.418 --> 00:05:29.490
If all of that is correct,
then I would check down here to make sure

89
00:05:29.490 --> 00:05:35.100
that you're using this.state.searchTerm.

90
00:05:35.100 --> 00:05:37.400
And that's the entire cycle
of how it gets there, so.

91
00:05:51.041 --> 00:05:53.540
&gt;&gt; Brian Holt: Other questions or errors
or anything else you want to discuss?

92
00:05:55.080 --> 00:05:58.791
I'll be pushing a branch
here just momentarily.

93
00:05:58.791 --> 00:05:59.890
&gt;&gt; Speaker 5: I had a question.

94
00:05:59.890 --> 00:06:00.530
&gt;&gt; Brian Holt: Sure.

95
00:06:00.530 --> 00:06:03.090
&gt;&gt; Speaker 5: So
you said the reason if you have a bigger

96
00:06:03.090 --> 00:06:06.409
list it's not as performant because
it has to filter all those.

97
00:06:08.680 --> 00:06:12.343
How would we go about
making it more performant?

98
00:06:12.343 --> 00:06:14.826
I mean, I know in Netflix,
it does a post request and

99
00:06:14.826 --> 00:06:16.527
then it filters on the server side.

100
00:06:16.527 --> 00:06:23.300
But if you want a more dynamic
single page app, what could we do?

101
00:06:23.300 --> 00:06:25.180
&gt;&gt; Brian Holt: So
there's a couple solutions.

102
00:06:25.180 --> 00:06:30.520
I mean, obviously the first one,
which you nailed, is server-side.

103
00:06:30.520 --> 00:06:34.820
I could see something to the effect
of where you kept a smaller list of

104
00:06:34.820 --> 00:06:38.200
hot titles that you would be more
interested in filtering over, and

105
00:06:38.200 --> 00:06:44.670
then it's doing batched backend requests
to filter in other movie titles.

106
00:06:44.670 --> 00:06:48.020
So you're just making sure that, my list
is definitely no greater than 100, and

107
00:06:48.020 --> 00:06:49.900
then I'm gonna feed in dynamically.

108
00:06:49.900 --> 00:06:53.574
So you type like, house, right,
it instantly shows you House of Cards, and

109
00:06:53.574 --> 00:06:57.191
then it's gonna go show you, I don't know,
like House of something else,

110
00:06:57.191 --> 00:06:59.650
some dumb movie that we carry on Netflix.

111
00:06:59.650 --> 00:07:02.910
And it's just gonna kind of start
inserting those kind of asynchronously.

112
00:07:05.250 --> 00:07:07.320
Just some way to figure out that that's.

113
00:07:07.320 --> 00:07:12.290
If you had them all in memory, basically,
I would emulate that client-side, right,

114
00:07:12.290 --> 00:07:17.145
where maybe in a service worker that would
be doing it, right, something like that.

115
00:07:17.145 --> 00:07:18.662
I don't know.

116
00:07:18.662 --> 00:07:21.312
You can get creative [LAUGH].

117
00:07:21.312 --> 00:07:26.004
But just basically making sure that the
render is actually done on a fairly small

118
00:07:26.004 --> 00:07:30.980
subset of them and that asynchronously,
you come back with a larger set.

119
00:07:30.980 --> 00:07:31.780
That's the gist.

120
00:07:34.150 --> 00:07:38.535
&gt;&gt; Speaker 6: So if I type house of and
my results come in,

121
00:07:38.535 --> 00:07:43.820
when I continue typing to further define,
is it refiltering

122
00:07:43.820 --> 00:07:48.380
the array that was already passed or
is it refiltering the whole array again?

123
00:07:48.380 --> 00:07:50.070
&gt;&gt; Brian Holt: It's refiltering
the whole array every single time.

124
00:07:53.100 --> 00:07:53.777
&gt;&gt; Speaker 6: Okay.
&gt;&gt; Brian Holt: Yeah,

125
00:07:53.777 --> 00:07:55.815
I wonder if you could do some sort of,
like, memoization.

126
00:07:55.815 --> 00:07:58.820
Memoization is actually a great
answer to that question too,

127
00:07:58.820 --> 00:08:01.650
where you're caching the output
of a function, right.

128
00:08:01.650 --> 00:08:04.590
Cuz if you type house,
it's gonna get the same answer every time.

129
00:08:05.660 --> 00:08:10.830
But then you can maybe possibly memoize
previous search results that, house,

130
00:08:10.830 --> 00:08:14.320
and then house of, that's only
gonna be a further subset, right.

131
00:08:14.320 --> 00:08:15.140
Perhaps.

132
00:08:15.140 --> 00:08:18.815
Right now, we have a pretty dumb search,
right, that if you search for house of,

133
00:08:18.815 --> 00:08:21.933
it's gonna make, it has to be house of and
not necessarily of house.

134
00:08:21.933 --> 00:08:23.944
Or, they can't be in different
parts of the word, so

135
00:08:23.944 --> 00:08:25.540
that doesn't work necessarily as well.

136
00:08:25.540 --> 00:08:27.969
I don't know.

137
00:08:27.969 --> 00:08:33.750
I'm sure you can get creative with that.

138
00:08:33.750 --> 00:08:34.580
&gt;&gt; Brian Holt: Yeah?

139
00:08:34.580 --> 00:08:37.919
&gt;&gt; Speaker 4: Is React using any kind
of tree algorithms like we discussed

140
00:08:37.919 --> 00:08:40.740
yesterday in the CS workshop for
the virtual DOM?

141
00:08:40.740 --> 00:08:42.440
&gt;&gt; Brian Holt: The answer is yes.

142
00:08:42.440 --> 00:08:45.500
It's creating a tree underneath
the hood and then it's doing diffing.

143
00:08:45.500 --> 00:08:48.850
That's the magic secret sauce.

144
00:08:48.850 --> 00:08:53.156
Beyond that, I actually haven't looked
at how they're doing the diffing.

145
00:08:53.156 --> 00:08:55.779
But basically,
you have your DOM that lives out here,

146
00:08:55.779 --> 00:09:00.360
you have your virtual DOM and they're
essentially supposed to mirror each other.

147
00:09:00.360 --> 00:09:03.408
And then what I'm going to
do as the consumer of React,

148
00:09:03.408 --> 00:09:07.270
I'm gonna make a bunch of changes
to the React DOM, the virtual DOM.

149
00:09:07.270 --> 00:09:11.239
And then this is gonna do a diff against,
like, I have this, the DOM says this,

150
00:09:11.239 --> 00:09:14.381
I'm gonna find just the right
amount of things that change, so

151
00:09:14.381 --> 00:09:17.908
I'm just gonna update that,
update that, and update that, right.

152
00:09:17.908 --> 00:09:21.938
Whereas something like Angular is like,
I'm gonna blow away the entire thing, and

153
00:09:21.938 --> 00:09:25.470
then I'm gonna rerender it altogether,
which is much less performant.

154
00:09:25.470 --> 00:09:29.070
So that's the basic gist of what the
virtual DOM is doing underneath the hood.

155
00:09:30.550 --> 00:09:32.350
All that to say is,
you don't actually have to care.

156
00:09:35.310 --> 00:09:37.960
That's an interesting side
note to what React is, but

157
00:09:37.960 --> 00:09:40.030
it's not necessarily why you use React.

158
00:09:40.030 --> 00:09:43.226
It's just an implementation detail.

159
00:09:43.226 --> 00:09:45.790
But that's a good question.

160
00:09:48.853 --> 00:09:49.900
&gt;&gt; Brian Holt: Any other questions?

161
00:09:53.647 --> 00:09:57.199
&gt;&gt; Brian Holt: Great,
I think that I'll conclude for today.

162
00:09:57.199 --> 00:09:59.043
You survived.

163
00:09:59.043 --> 00:10:00.203
Halfway through.

164
00:10:00.203 --> 00:10:02.459
And we'll pick up tomorrow.

165
00:10:10.053 --> 00:10:11.164
&gt;&gt; Speaker 4: [INAUDIBLE] I was wondering,

166
00:10:11.164 --> 00:10:13.940
do we ever need to think about
the virtual DOM when we code?

167
00:10:13.940 --> 00:10:16.167
&gt;&gt; Brian Holt: Nope, absolutely never.

168
00:10:16.167 --> 00:10:18.170
That's the point.

169
00:10:18.170 --> 00:10:21.420
Notice I've not said the word virtual,
I think I said it once today, right,

170
00:10:21.420 --> 00:10:22.490
previously.

171
00:10:22.490 --> 00:10:26.420
It's cuz you don't actually have to care,
which is a wonderful thing.

172
00:10:26.420 --> 00:10:29.650
And the other thing is, tomorrow,
they can change it out to be some sort of

173
00:10:29.650 --> 00:10:32.810
scheduling thing that no
longer uses a virtual DOM.

174
00:10:32.810 --> 00:10:34.110
And again, you don't have to care.

175
00:10:34.110 --> 00:10:35.500
You can keep writing React the same way.

176
00:10:35.500 --> 00:10:39.276
In fact, I've been told that they have
some experimental branches now that

177
00:10:39.276 --> 00:10:42.462
are working that are totally moving
away from the virtual DOM and

178
00:10:42.462 --> 00:10:43.653
using something else.

179
00:10:43.653 --> 00:10:46.132
I don't know if totally moving
away from the virtual DOM, but

180
00:10:46.132 --> 00:10:49.440
totally reimplementing the way
that React works, fundamentally.

181
00:10:49.440 --> 00:10:52.950
And you don't have to care,
it still works the same way to you, right.

182
00:10:52.950 --> 00:10:53.610
It's a black box.

