WEBVTT

1
00:00:00.000 --> 00:00:03.662
[MUSIC]

2
00:00:03.662 --> 00:00:05.940
&gt;&gt; Brian Holt: Our tests are broken,
unfortunately,

3
00:00:05.940 --> 00:00:08.630
cuz we've just done a ton of stuff.

4
00:00:08.630 --> 00:00:12.230
I really wanna get to universal
rendering and web packed chunking.

5
00:00:12.230 --> 00:00:15.910
So are we okay if I skip fixing there,
I'll show you how to test redux really

6
00:00:15.910 --> 00:00:20.858
quick cuz it's super fast, but are we
okay if I skip fixing a react tests?

7
00:00:20.858 --> 00:00:23.305
And then we'll come back to it
eventually if there's time at the end,

8
00:00:23.305 --> 00:00:29.549
okay.
&gt;&gt; Brian Holt: So

9
00:00:29.549 --> 00:00:34.674
go to your app.speck real quick.
&gt;&gt; Brian Holt: This

10
00:00:34.674 --> 00:00:37.505
is one of the joys of,
&gt;&gt; Brian Holt: So

11
00:00:37.505 --> 00:00:38.360
this is down at the bottom.

12
00:00:39.670 --> 00:00:42.810
This is one of the joys of redux is,
it's so

13
00:00:42.810 --> 00:00:46.030
easy to test because it's functional and
anything that's

14
00:00:46.030 --> 00:00:50.070
purely functional in nature is just input
in, output out, nothing in the middle.

15
00:00:50.070 --> 00:00:51.500
There's no set up and no tear down,

16
00:00:51.500 --> 00:00:56.448
it's just wonderful.
&gt;&gt; Brian Holt: Okay, so

17
00:00:56.448 --> 00:01:04.160
we're gonna test Store,
&gt;&gt; Brian Holt: And make a new method here.

18
00:01:05.270 --> 00:01:10.253
it('should bootstrap'), so
we're just gonna make sure

19
00:01:10.253 --> 00:01:14.468
that our it everything gets
created very quickly and

20
00:01:14.468 --> 00:01:18.129
easily.
&gt;&gt; Brian Holt: And

21
00:01:18.129 --> 00:01:21.330
all we're gonna say is delay
bring in Store up here.

22
00:01:21.330 --> 00:01:28.904
I need to bring Store up here as well, so,
&gt;&gt; Brian Holt: const { store,

23
00:01:28.904 --> 00:01:35.900
reducer }.
&gt;&gt; Brian Holt: We

24
00:01:35.900 --> 00:01:37.560
have to go fix that as well, okay.

25
00:01:40.320 --> 00:01:48.443
So rootReducer, rather.
&gt;&gt; Brian Holt: = store,

26
00:01:48.443 --> 00:01:53.302
so we're gonna say require('./Store'),
okay.

27
00:01:53.302 --> 00:01:57.293
Remember, we actually didn't export
rootReducer because we don't need it at

28
00:01:57.293 --> 00:02:00.680
anywhere else, but
we actually do wanna be able to test it.

29
00:02:00.680 --> 00:02:06.261
So save this, head over to store.jsx,
and down here at the bottom,

30
00:02:06.261 --> 00:02:12.920
where it says connector and store,
just also say, rootReducer as well, right?

31
00:02:12.920 --> 00:02:17.732
The actual crux of what we're interested
in testing in redux is just the reducers,

32
00:02:17.732 --> 00:02:19.750
right, from state A to state B.

33
00:02:19.750 --> 00:02:22.600
That's the most important part and
the part that's prone to breaking.

34
00:02:25.550 --> 00:02:27.950
So do that, go back to app spec.

35
00:02:31.380 --> 00:02:32.639
And here, let's go actually test that.

36
00:02:32.639 --> 00:02:39.960
So we're gonna say const state
= rootReducer(undefined).

37
00:02:43.050 --> 00:02:48.038
And we’re gonna send in an action

38
00:02:48.038 --> 00:02:53.220
type of : ’@@redux/INIT’.

39
00:02:53.220 --> 00:02:57.061
So this is the action when
redux bootstraps, just FYI,

40
00:02:57.061 --> 00:03:00.180
that's the name of
the action that it sends.

41
00:03:00.180 --> 00:03:05.113
And I think they made it look like
this cuz you would never name

42
00:03:05.113 --> 00:03:07.520
your action this, right?

43
00:03:07.520 --> 00:03:11.510
So that's why they did that.
&gt;&gt; Speaker 2: Should Store be lower case

44
00:03:11.510 --> 00:03:17.770
on line 32, cuz isn't it referencing-
&gt;&gt; Brian Holt: I mean, it's up to you.

45
00:03:17.770 --> 00:03:19.672
This is actually like
the note to yourself.

46
00:03:19.672 --> 00:03:20.244
&gt;&gt; Speaker 2: Right, okay.

47
00:03:20.244 --> 00:03:21.194
&gt;&gt; Brian Holt: So I called it uppercase

48
00:03:21.194 --> 00:03:24.187
cuz it's actually referring to Store.jsx,
that's what we're testing

49
00:03:24.187 --> 00:03:29.592
here.
&gt;&gt; Brian Holt: Okay,

50
00:03:29.592 --> 00:03:35.042
so now we should have a state returned
from our reducer, right, because remember,

51
00:03:35.042 --> 00:03:39.977
reducer takes in an old state and creates
a new state and hands it back to you.

52
00:03:39.977 --> 00:03:46.502
What I'm interested in seeing is I'm
interested to see if expect(state) to deep

53
00:03:46.502 --> 00:03:52.744
equal, and we just expected the deep to
equal that initial state that we set up,

54
00:03:52.744 --> 00:03:57.240
in our case,
it's gonna be searchTerm: that, right?

55
00:03:58.470 --> 00:04:00.820
Remember, that's what our
initial state looked like.

56
00:04:00.820 --> 00:04:05.880
So it goes from having nothing to creating
this, basically, this initial state.

57
00:04:05.880 --> 00:04:08.095
That's what our test is
asserting presently.

58
00:04:10.530 --> 00:04:11.174
&gt;&gt; Brian Holt: So save that.

59
00:04:11.174 --> 00:04:14.207
&gt;&gt; Speaker 3: Your require, I think,

60
00:04:14.207 --> 00:04:20.067
at the top, needs a ../js.
&gt;&gt; Brian Holt: You're right,

61
00:04:20.067 --> 00:04:24.878
../js, thank you.
&gt;&gt; Speaker 3: Mm-hm.

62
00:04:24.878 --> 00:04:25.444
&gt;&gt; Brian Holt: Just this one here.

63
00:04:31.647 --> 00:04:34.567
&gt;&gt; Brian Holt: Okay, so let's come in here

64
00:04:34.567 --> 00:04:42.230
to, we'll just cancel my http server for
a second and run npm test.

65
00:04:42.230 --> 00:04:45.100
Just keep in mind,
the old tests are definitely broken.

66
00:04:45.100 --> 00:04:49.615
We're just caring about Store right now.
&gt;&gt; Brian Holt: So

67
00:04:49.615 --> 00:04:55.792
if we look here, our Store is passing,

68
00:04:55.792 --> 00:04:59.536
right, the other three

69
00:04:59.536 --> 00:05:05.697
are failing.
&gt;&gt; Brian Holt: Any

70
00:05:05.697 --> 00:05:12.080
questions about the bootstrap test?
&gt;&gt; Brian Holt: It's really simple, right?

71
00:05:12.080 --> 00:05:14.370
That's a two liner and
that's what I really,

72
00:05:14.370 --> 00:05:17.790
really like about testing redux,
and this is like, whereas I say

73
00:05:17.790 --> 00:05:21.630
don't test react that much just test
the hell out of your redux, right?

74
00:05:21.630 --> 00:05:24.805
That's the place that like all your app
transformations, all your business logic,

75
00:05:24.805 --> 00:05:26.186
and all your state transformation.

76
00:05:26.186 --> 00:05:30.478
One, it's super easy to test, and two,
it's the part of the app that you really

77
00:05:30.478 --> 00:05:33.022
need to test that doesn't
change from UI to UI.

78
00:05:33.022 --> 00:05:36.975
It just changes with whatever new
business logic you're introducing,

79
00:05:36.975 --> 00:05:39.380
which is far less
frequent than UI changes.

80
00:05:42.220 --> 00:05:44.779
ie, you could have not paid attention
previously, and you should definitely be

81
00:05:44.779 --> 00:05:48.131
paying attention now.
&gt;&gt; Class: [LAUGH]

82
00:05:48.131 --> 00:05:48.731
&gt;&gt; Brian Holt: So actually,

83
00:05:48.731 --> 00:05:51.981
what I'm gonna do here is I'm just gonna
say X describe cuz I am sick of hearing

84
00:05:51.981 --> 00:05:52.587
that output.

85
00:05:52.587 --> 00:05:54.392
[LAUGH]

86
00:06:02.333 --> 00:06:04.124
&gt;&gt; Brian Holt: Okay, so
we're gonna do one more test.

87
00:06:04.124 --> 00:06:08.470
We're gonna make sure that if we
pass in a set search term event,

88
00:06:08.470 --> 00:06:12.260
that it's gonna correctly set our state.

89
00:06:12.260 --> 00:06:18.145
So I'm gonna say,
it('should handle setSearchTerm

90
00:06:18.145 --> 00:06:24.718
actions'.
&gt;&gt; Brian Holt: Okay,

91
00:06:24.718 --> 00:06:32.290
and I'm gonna do something similar,
const state = reducer.

92
00:06:32.290 --> 00:06:36.536
I'm gonna pass in an initial
state of searchTerm,

93
00:06:36.536 --> 00:06:41.375
call in some random string,
where you can buy whatever you

94
00:06:41.375 --> 00:06:46.376
want there.
&gt;&gt; Brian Holt: And

95
00:06:46.376 --> 00:06:52.905
then another action,
&gt;&gt; Brian Holt: Which

96
00:06:52.905 --> 00:06:57.386
is gonna be type: 'setSearchTerm,

97
00:06:57.386 --> 00:07:04.806
value: 'correct string',
like whatever string you want,

98
00:07:04.806 --> 00:07:09.987
just make sure that you're consistent, or

99
00:07:09.987 --> 00:07:15.185
else, it's not really testing anything.

100
00:07:17.525 --> 00:07:22.597
Okay, so
now I have a state back from here, so

101
00:07:22.597 --> 00:07:28.664
I'm gonna do an expect(state)
to deep equal({,

102
00:07:28.664 --> 00:07:31.773
&gt;&gt; Brian Holt: searchTerm:

103
00:07:31.773 --> 00:07:37.733
'correctString'}).

104
00:07:42.046 --> 00:07:43.811
&gt;&gt; Brian Holt: That makes sense,

105
00:07:43.811 --> 00:07:45.140
correct space s.

106
00:07:46.530 --> 00:07:50.275
As long as this one and
this one are the same, so just to recap,

107
00:07:50.275 --> 00:07:54.080
this is the initial state
they were passing in, right?

108
00:07:54.080 --> 00:07:57.750
So we want this search term
to be blown away, right?

109
00:07:57.750 --> 00:07:58.760
That's the idea here.

110
00:08:00.410 --> 00:08:02.770
We're sending in a setSearchTerm action,

111
00:08:02.770 --> 00:08:06.403
which is going to get dispatched
to our reducer, our rootReducer,

112
00:08:06.403 --> 00:08:10.244
which is going to then dispatch to
our setSearchTerm reducer, right?

113
00:08:10.244 --> 00:08:13.266
And then it's going to return this-
&gt;&gt; Speaker 5: Should that be rootReducer

114
00:08:13.266 --> 00:08:16.320
then?
&gt;&gt; Brian Holt: Yeah,

115
00:08:16.320 --> 00:08:17.750
this needs to be rootReducer.

116
00:08:17.750 --> 00:08:24.022
Yep, definitely.
&gt;&gt; Brian Holt: Yeah,

117
00:08:24.022 --> 00:08:25.710
whatever the name of
that function method is.

118
00:08:27.090 --> 00:08:30.300
So we're just checking this to
make sure that this gets updated

119
00:08:30.300 --> 00:08:35.125
correctly.
&gt;&gt; Brian Holt: All right,

120
00:08:35.125 --> 00:08:35.925
so let's try and run that.

121
00:08:35.925 --> 00:08:40.499
So we're gonna run here, clear,

122
00:08:40.499 --> 00:08:49.027
npm test again.
&gt;&gt; Brian Holt: So,

123
00:08:49.027 --> 00:08:52.532
notice we're no longer running these
tests, but we are running both of these,

124
00:08:52.532 --> 00:08:53.330
and they do pass.

125
00:08:56.170 --> 00:08:59.995
And if you wanted to, you could actually
do an npm run cover, if you wanted to see

126
00:08:59.995 --> 00:09:03.729
the coverage on store, I don't know,
might be interesting, might not be.

127
00:09:03.729 --> 00:09:09.251
[LAUGH]
&gt;&gt; Brian Holt: Let's

128
00:09:09.251 --> 00:09:17.691
make this smaller.
&gt;&gt; Brian Holt: So,

129
00:09:17.691 --> 00:09:21.580
it's saying that you have kind of
crappy coverage, which is kind of true.

130
00:09:23.450 --> 00:09:27.700
But notice Store, we're hitting
most of the lines here, right?

131
00:09:27.700 --> 00:09:33.882
So, an okay amount.
&gt;&gt; Brian Holt: Okay,

132
00:09:33.882 --> 00:09:41.244
any questions about testing redux?
&gt;&gt; Brian Holt: Makes sense?

133
00:09:49.576 --> 00:09:51.792
&gt;&gt; Brian Holt: Looks like Scott T asked,

134
00:09:51.792 --> 00:09:56.020
why is this setSearchTerm right here?

135
00:09:56.020 --> 00:10:00.618
Well, if you remember in our Store, that's
the name of the variable, right, and

136
00:10:00.618 --> 00:10:02.207
the variable is set to this.

137
00:10:02.207 --> 00:10:08.173
So that's why it's setSearchTerm and
why it's actually gonna be this, right?

138
00:10:08.173 --> 00:10:13.230
Now if I had them be the same thing,
then it would be that, right?

139
00:10:13.230 --> 00:10:14.518
But that's actually what we're looking for
here.

140
00:10:14.518 --> 00:10:18.082
[COUGH] It's up to you
how you wanna do that.

141
00:10:18.082 --> 00:10:20.494
&gt;&gt; Speaker 6: I have a question.

142
00:10:20.494 --> 00:10:21.056
&gt;&gt; Brian Holt: Sure.

143
00:10:21.056 --> 00:10:21.963
&gt;&gt; Speaker 6: Is rootReducer

144
00:10:21.963 --> 00:10:23.011
reusable at all?

145
00:10:23.011 --> 00:10:25.664
I mean, in its current state,
it's not, but

146
00:10:25.664 --> 00:10:30.385
could you set something up reusable?
&gt;&gt; Brian Holt: So,

147
00:10:30.385 --> 00:10:35.180
the answer is not particularly cuz
it's kind of your dispatch function.

148
00:10:35.180 --> 00:10:39.420
Definitely the reduceSearchTerm,
that could be reused somewhere else.

149
00:10:39.420 --> 00:10:43.650
So one of the caveats is you only have
one redux store on any given page.

150
00:10:43.650 --> 00:10:45.510
It's actually a hard
requirement of redux is that,

151
00:10:45.510 --> 00:10:47.118
that's the only store on the page.

152
00:10:47.118 --> 00:10:51.774
So this one's reusable, but typically,
your rootReducer is not gonna be reusable.

153
00:10:51.774 --> 00:10:54.853
And I'll say it,
which I had mentioned previously,

154
00:10:54.853 --> 00:10:58.619
you actually really don't usually
make your own rootReducers,

155
00:10:58.619 --> 00:11:01.708
there's a redux function
called compose reducers.

156
00:11:01.708 --> 00:11:07.630
I think that's what it's called,
might even just be compose.

157
00:11:09.105 --> 00:11:09.635
I don't recall.

158
00:11:10.715 --> 00:11:14.845
Anyway, there's a function that basically
you pass in a bunch of reducers to,

159
00:11:14.845 --> 00:11:17.175
and then it just does your dispatch for
you.

160
00:11:17.175 --> 00:11:20.715
It's just a little bit lazier way to
get your rootReducer created for you.

161
00:11:21.745 --> 00:11:23.005
I kinda like being explicit,

162
00:11:23.005 --> 00:11:25.015
but up to you.
&gt;&gt; Speaker 6: So

163
00:11:25.015 --> 00:11:29.833
if you have more than one dispatch,
you wouldn't create a new rootReducer,

164
00:11:29.833 --> 00:11:31.500
you would get a new case, right?

165
00:11:31.500 --> 00:11:32.262
&gt;&gt; Brian Holt: Exactly.
&gt;&gt; Speaker 6: Okay.

166
00:11:32.262 --> 00:11:32.762
&gt;&gt; Brian Holt: Yep, precisely.

167
00:11:38.519 --> 00:11:39.785
&gt;&gt; Brian Holt: Yep, cuz you're gonna have

168
00:11:39.785 --> 00:11:45.504
a case for every action you have.
&gt;&gt; Speaker 7: Can you talk

169
00:11:45.504 --> 00:11:50.780
about testing a redux connected component?
&gt;&gt; Brian Holt: Yeah,

170
00:11:50.780 --> 00:11:53.040
it's a lot more complicated,
which is actually what I would show you in

171
00:11:53.040 --> 00:11:57.880
the other section, how to test
the integration between the two.

172
00:11:57.880 --> 00:12:01.220
But remember when I was saying that
we have shallow, we have mount, and

173
00:12:01.220 --> 00:12:04.838
we have static, we have to resort to
using static because it gets complicated

174
00:12:04.838 --> 00:12:08.717
enough.
&gt;&gt; Brian Holt: Yeah,

175
00:12:08.717 --> 00:12:12.009
because redux has to be able to
bootstrap a full instance of react and

176
00:12:12.009 --> 00:12:15.390
be able to talk to all
the individual components.

177
00:12:15.390 --> 00:12:18.010
But honestly, I don't think there's
any really special cases here.

178
00:12:19.790 --> 00:12:23.670
Basically, what you do is you create
the store, right, that you provide to

179
00:12:23.670 --> 00:12:28.380
the provider and then you actually
run actions against the store, right?

180
00:12:28.380 --> 00:12:29.800
That's the basic gist of what goes on.

181
00:12:31.510 --> 00:12:35.350
Cuz this store, did I bring that in?

182
00:12:36.900 --> 00:12:41.990
Sorry, I'm in an app here.
&gt;&gt; Brian Holt: I

183
00:12:41.990 --> 00:12:44.880
don't actually need store in here,
right, anyway.

184
00:12:46.110 --> 00:12:49.630
So the store method has something
called dispatch as well.

185
00:12:49.630 --> 00:12:52.201
So you can actually call a dispatch
directly in the store, and

186
00:12:52.201 --> 00:12:54.873
that's actually how you're gonna
dispatch all these action,

187
00:12:54.873 --> 00:12:56.770
is just directly call
dispatch on the store.

188
00:12:58.630 --> 00:13:00.780
So maybe towards the end,
I'll fix one of the tests, so

189
00:13:00.780 --> 00:13:04.210
you can see it, but I definitely wanna
get to universal rendering first and

190
00:13:04.210 --> 00:13:08.160
as well as web packed chunking cuz I
think that's the most compelling part.

191
00:13:08.160 --> 00:13:11.370
And I already showed you how to do this,
basically,

192
00:13:11.370 --> 00:13:15.800
once, and the next step is not
terribly difficult to arrive to.

193
00:13:15.800 --> 00:13:19.327
So if we don't get to it,
we'll be okay, so says I.

194
00:13:19.327 --> 00:13:19.827
[LAUGH]

