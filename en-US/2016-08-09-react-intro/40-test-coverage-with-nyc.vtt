WEBVTT

1
00:00:00.130 --> 00:00:04.289
[MUSIC]

2
00:00:04.289 --> 00:00:05.935
&gt;&gt; Brian Holt: Now we're
gonna test coverage,

3
00:00:05.935 --> 00:00:07.940
which is kind of an interesting metric.

4
00:00:07.940 --> 00:00:10.530
I think people rely on it too heavily.

5
00:00:10.530 --> 00:00:15.126
But I also think it is,
it's interesting to look at nonetheless.

6
00:00:15.126 --> 00:00:20.480
Chasing a 100% test coverage is foolish,
if you wanna ask my opinion.

7
00:00:20.480 --> 00:00:21.799
No one did, but that's what I think.

8
00:00:23.360 --> 00:00:27.240
And luckily we don't actually have
to really write any code for this,

9
00:00:27.240 --> 00:00:30.170
we can just go ahead and
just figure out the bash command and

10
00:00:30.170 --> 00:00:32.740
it just automatically
works with our tests.

11
00:00:32.740 --> 00:00:35.785
The basic idea of test coverage
is it's gonna show you how

12
00:00:35.785 --> 00:00:38.255
much of your code is actually
getting covered by unit test.

13
00:00:38.255 --> 00:00:41.805
So basically if I run this test,
am I missing blocks of code,

14
00:00:41.805 --> 00:00:43.295
am I missing code paths.

15
00:00:44.525 --> 00:00:49.034
And we can actually visually show
you this with this tool called NYC..

16
00:00:49.034 --> 00:00:50.057
Most of us are probably,

17
00:00:50.057 --> 00:00:53.385
if you've done anything with test coverage
are used to using Istanbul, right.

18
00:00:53.385 --> 00:00:56.958
That's the most common
one with JavaScript.

19
00:00:56.958 --> 00:01:00.047
We're gonna use NYC,
which actually wraps Istanbul, and

20
00:01:00.047 --> 00:01:02.570
I think it's just a little
bit easier to use.

21
00:01:02.570 --> 00:01:06.430
You can achieve this
with Istanbul just fine.

22
00:01:06.430 --> 00:01:11.760
So at this point,
if you don't have NYC installed,

23
00:01:11.760 --> 00:01:14.799
just say npn install -g nyc.

24
00:01:14.799 --> 00:01:21.864
What we're gonna do here is nyc --

25
00:01:21.864 --> 00:01:28.460
reporter=lcov --reporter=

26
00:01:28.460 --> 00:01:34.670
text -- reporter=html.

27
00:01:34.670 --> 00:01:37.360
Basically saying give me all of
the reports you can possibly generate.

28
00:01:37.360 --> 00:01:38.580
That's what all these mean.

29
00:01:40.310 --> 00:01:46.350
Then I wanna say --require babel-register.

30
00:01:46.350 --> 00:01:50.374
At this point we are saying like, you're
gonna run into ES6 when you're running my

31
00:01:50.374 --> 00:01:51.970
tests, so just be aware of that.

32
00:01:53.470 --> 00:02:01.258
And then you're gonna say --extension.jsx.

33
00:02:01.258 --> 00:02:04.363
So that's saying also
look at all my jsx files.

34
00:02:04.363 --> 00:02:06.978
And then the last thing you're gonna say
is you're gonna give it the command to

35
00:02:06.978 --> 00:02:08.100
actually run your tests.

36
00:02:08.100 --> 00:02:11.370
So in this particular case,
it's gonna be npm test.

37
00:02:13.890 --> 00:02:16.953
Kind of a long command,
hopefully it works.

38
00:02:23.581 --> 00:02:25.327
&gt;&gt; Brian Holt: So
it's gonna run your test first and

39
00:02:25.327 --> 00:02:28.270
then it's gonna give you
a basically a code coverage report.

40
00:02:29.960 --> 00:02:31.460
So we were good children and

41
00:02:31.460 --> 00:02:34.999
we actually covered all of the code
paths in search and show card.

42
00:02:36.530 --> 00:02:37.290
Which is kind of cool.

43
00:02:38.530 --> 00:02:40.980
This basically means that all
of the code in search and

44
00:02:40.980 --> 00:02:43.390
show card got covered by our tests, right.

45
00:02:43.390 --> 00:02:47.970
Everything ran at least once, which is
not to say there's no bugs in your code,

46
00:02:47.970 --> 00:02:51.820
it just means that at least for
the test case that you're running,

47
00:02:51.820 --> 00:02:54.780
your code got covered and
you got an expected result back.

48
00:02:56.480 --> 00:02:58.850
So let's go make it so
like part of it's not covered.

49
00:03:02.140 --> 00:03:06.350
So let's go to search.jsx and just put
like another random function here.

50
00:03:06.350 --> 00:03:08.918
So random function.

51
00:03:13.848 --> 00:03:18.642
&gt;&gt; Brian Holt: Okay, and
this is gonna be console.log or

52
00:03:18.642 --> 00:03:22.300
something like that, right.

53
00:03:22.300 --> 00:03:24.680
It's just like another function here,
right.

54
00:03:24.680 --> 00:03:28.610
And now nothing's calling this,
it's never getting run anywhere but

55
00:03:28.610 --> 00:03:29.900
it exists in our code, right?

56
00:03:31.320 --> 00:03:34.049
So save that and come back and
run your command again.

57
00:03:42.917 --> 00:03:47.108
&gt;&gt; Brian Holt: And what you'll see
here is that now we don't have a 100%

58
00:03:47.108 --> 00:03:48.186
coverage now.

59
00:03:48.186 --> 00:03:49.480
And we have uncovered lines,

60
00:03:49.480 --> 00:03:52.130
it's gonna tell you which lines
did not get covered by this.

61
00:03:53.460 --> 00:03:56.140
So this is actually can
be even more interesting.

62
00:03:56.140 --> 00:04:01.730
So now if you look at ls -lsa, you have
a hidden folder here called NYC output.

63
00:04:01.730 --> 00:04:03.420
Nope not output, I want coverage.

64
00:04:03.420 --> 00:04:04.910
So you have a folder now called coverage.

65
00:04:06.370 --> 00:04:07.520
If you CD in the coverage.

66
00:04:10.290 --> 00:04:12.680
It has like a bunch of interesting
reports you can look at but

67
00:04:12.680 --> 00:04:18.490
the most interesting here if you say
open index.html, it's actually gives

68
00:04:18.490 --> 00:04:22.320
you like a nice visual representation
of what your coverage looks like.

69
00:04:22.320 --> 00:04:28.254
You can actually go look in and see,
this is the code that never got ran.

70
00:04:28.254 --> 00:04:34.000
So you can actually visually see the code
that's not getting covered by your tests.

71
00:04:34.000 --> 00:04:36.980
I think that's a pretty compelling read,
that's actually a pretty cool

72
00:04:36.980 --> 00:04:40.430
feature of Istanbul and I think it's
a fairly recent change as well.

73
00:04:41.490 --> 00:04:42.706
&gt;&gt; Speaker 2: Can you show
us how you got there again?

74
00:04:42.706 --> 00:04:46.844
&gt;&gt; Brian Holt: Sure.

75
00:04:46.844 --> 00:04:51.280
So, I'm in my repo, right?

76
00:04:52.290 --> 00:04:57.880
I went to coverage,
there's a command in OSX.

77
00:04:57.880 --> 00:05:03.920
I don't think it exists in Windows or
I don't know about Linux at all.

78
00:05:03.920 --> 00:05:07.290
It's just called open, that says
please open this with the host OS, and

79
00:05:07.290 --> 00:05:10.490
you just open index.html.

80
00:05:10.490 --> 00:05:14.330
If you're using iTerm 2 like I am,

81
00:05:14.330 --> 00:05:18.630
you can also Cmd+Click which
is kind of a fun thing.

82
00:05:18.630 --> 00:05:19.660
Cmd+Click index.

83
00:05:21.110 --> 00:05:23.990
And that's actually gonna open Sublime but
whatever.

84
00:05:27.820 --> 00:05:32.025
The other thing you can do is you can just
come to your browser and say File &gt; Open.

85
00:05:34.490 --> 00:05:39.570
And then navigate there,
right, so coverage index.html.

86
00:05:39.570 --> 00:05:40.070
That works too.

87
00:05:41.540 --> 00:05:42.040
Yep.

88
00:05:46.000 --> 00:05:47.250
And the nice thing about like.

89
00:05:47.250 --> 00:05:51.340
We got this really nice pretty looking
report for essentially zero work, right?

90
00:05:51.340 --> 00:05:54.000
We just had to install the tool and
just have it run our tests,

91
00:05:54.000 --> 00:05:55.990
which I think is also pretty compelling.

92
00:05:55.990 --> 00:05:57.055
I like getting things for free.

93
00:06:01.999 --> 00:06:04.369
&gt;&gt; Brian Holt: So
any questions about this?

94
00:06:09.010 --> 00:06:10.740
Cool, not cool.

95
00:06:10.740 --> 00:06:13.460
Sit down, you're stupid and whatever.

96
00:06:13.460 --> 00:06:15.210
You can be nice about it though.

97
00:06:15.210 --> 00:06:19.085
Okay, so let's just take this
entire mess and put it into our

98
00:06:19.085 --> 00:06:24.080
package.json because that is an absolute
terror to have to type every single time.

99
00:06:25.360 --> 00:06:29.654
So go to your package.json and
you can call it cover or coverage,

100
00:06:29.654 --> 00:06:31.540
whatever you wanna call it.

101
00:06:31.540 --> 00:06:39.662
I call it cover
&gt;&gt; Brian Holt: And

102
00:06:39.662 --> 00:06:43.520
now you can just do npm run cover and
it'll tell you.

103
00:06:46.897 --> 00:06:52.860
&gt;&gt; Speaker 3: Somebody in chat had
problems with command not found for nyc.

104
00:06:52.860 --> 00:06:54.213
So did I actually.

105
00:06:54.213 --> 00:06:56.328
&gt;&gt; Brian Holt: Did you
install it globally?

106
00:06:56.328 --> 00:06:57.210
&gt;&gt; Speaker 3: No.
&gt;&gt; Brian Holt: No.

107
00:06:57.210 --> 00:06:58.032
That might help.

108
00:06:58.032 --> 00:07:02.380
[LAUGH] If you're run it from MPM though,
right.

109
00:07:02.380 --> 00:07:05.976
So if you put this in your MPM, and then
you say MPM run cover it will work for

110
00:07:05.976 --> 00:07:09.583
sure, because there's a local copy,
and MPM is smart enough to find it.

111
00:07:15.942 --> 00:07:20.928
&gt;&gt; Brian Holt: So yeah, if you're
having problems in not finding it,

112
00:07:20.928 --> 00:07:26.720
just put this in your MPM package.json and
then just do mpm.

113
00:07:26.720 --> 00:07:29.450
So I will prove my assertion.

114
00:07:29.450 --> 00:07:32.083
I will uninstall nyc.

115
00:07:37.247 --> 00:07:40.710
&gt;&gt; Brian Holt: So now if I type nyc,
it doesn't work, right?

116
00:07:40.710 --> 00:07:44.894
But I can still do mpm run cover and
it will still work.

117
00:07:51.322 --> 00:07:53.274
&gt;&gt; Brian Holt: So that works as well.

118
00:08:00.566 --> 00:08:01.263
&gt;&gt; Brian Holt: Okay.

119
00:08:03.994 --> 00:08:06.900
&gt;&gt; Brian Holt: So I'm gonna go take
that fluff code out of here now.

120
00:08:06.900 --> 00:08:08.030
So, because we don't need it.

