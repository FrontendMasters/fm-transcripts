WEBVTT

1
00:00:00.000 --> 00:00:03.924
[MUSIC]

2
00:00:03.924 --> 00:00:07.896
&gt;&gt; Brian Holt: We're gonna talk about
Babel now because we're gonna move

3
00:00:07.896 --> 00:00:11.640
away from using just raw
JavaScript versions of React.

4
00:00:11.640 --> 00:00:15.815
We're gonna start moving into JSX, and
I think most of you will find this to be

5
00:00:15.815 --> 00:00:18.526
pleasant eventually,
though initially gross.

6
00:00:18.526 --> 00:00:22.380
[LAUGH] But
I recommend that you keep an open mind.

7
00:00:22.380 --> 00:00:27.050
I would say almost every
major company using

8
00:00:27.050 --> 00:00:31.524
React uses JSX as well with very,
very few exceptions.

9
00:00:31.524 --> 00:00:35.580
I don't know a bunch of
smart people using it, so

10
00:00:35.580 --> 00:00:37.130
I think it's a good
reason to give it a shot.

11
00:00:39.270 --> 00:00:43.040
If you don't know about Babel,
Babel is a fantastic tool

12
00:00:43.040 --> 00:00:48.130
used to be called 6to5 that basically
takes the future looking JavaScript and

13
00:00:48.130 --> 00:00:51.320
compiles it to current JavaScript.

14
00:00:51.320 --> 00:00:56.621
Why that's really cool is,
you can start running, writing things off,

15
00:00:56.621 --> 00:01:00.643
like using advanced features
of JavaScript today, and

16
00:01:00.643 --> 00:01:05.604
that it gets compiled in such a way
that browsers can understand using

17
00:01:05.604 --> 00:01:09.731
today's syntax of the futuristic
JavaScript, right?

18
00:01:09.731 --> 00:01:13.762
For example like Aero functions,
right, ever like most people use their

19
00:01:13.762 --> 00:01:17.480
own functions fine kind of appealing,
and you can use those today.

20
00:01:17.480 --> 00:01:21.294
Despite the fact that for example, the
Android stock browser definitely does not

21
00:01:21.294 --> 00:01:24.650
support Aero functions and
probably never will, right?

22
00:01:24.650 --> 00:01:27.570
You don't wanna cut those people out
just so you can use fancy syntax in

23
00:01:27.570 --> 00:01:30.410
your new code, so this is kind of
the happy medium that you have.

24
00:01:30.410 --> 00:01:34.180
You can write it and then it gets compiled
to such a way that older browsers can

25
00:01:34.180 --> 00:01:39.540
understand it, so
we're gonna be using Babel 6.

26
00:01:39.540 --> 00:01:43.020
A lot of people complain about Babel 6,
the nice thing about Babel 5 and

27
00:01:43.020 --> 00:01:45.580
previous is it just worked out of the box.

28
00:01:45.580 --> 00:01:48.210
You can install Babel, type Babel run,

29
00:01:48.210 --> 00:01:52.000
and it just worked, right,
just kind of like standard does today.

30
00:01:53.060 --> 00:01:57.530
Babel 6 need a little bit more difficult,
now everything is a plugin So

31
00:01:57.530 --> 00:02:00.390
you can include things not include things.

32
00:02:00.390 --> 00:02:04.060
Ultimately, it's a positive change but
it's a little less beginner friendly.

33
00:02:05.800 --> 00:02:09.580
So the first thing is we know we have
to configure Babel to work correctly.

34
00:02:09.580 --> 00:02:12.910
So what we're going to do is we're
gonna go over to our project then

35
00:02:16.130 --> 00:02:19.319
we're going to create a new file
inside of the root of the project.

36
00:02:20.700 --> 00:02:26.821
ie., not in the JS directory and
call .bubblerc that dot is important so

37
00:02:26.821 --> 00:02:30.919
make sure it's there.
&gt;&gt; Brian Holt: And

38
00:02:30.919 --> 00:02:34.440
again that it gets saved at the root
directory of the project okay.

39
00:02:34.440 --> 00:02:39.362
It's gonna say hey you're using a dot
just say yes I'm sure I wanna use a dot

40
00:02:45.007 --> 00:02:45.897
&gt;&gt; Brian Holt: Okay?

41
00:02:45.897 --> 00:02:48.970
And babelrc files or just JSON.

42
00:02:51.270 --> 00:02:59.318
So we're gonna give it two presets.
&gt;&gt; Brian Holt: One's

43
00:02:59.318 --> 00:03:04.080
gonna be called react And
one is going to be called es2015.

44
00:03:06.500 --> 00:03:11.120
So, Babel has a concept called a plugin,
right?

45
00:03:11.120 --> 00:03:12.830
I think we briefly said that.

46
00:03:12.830 --> 00:03:15.720
And a plugin does exactly
one transformation.

47
00:03:15.720 --> 00:03:20.460
It takes an arrow function and
makes it a normal function Or you have

48
00:03:20.460 --> 00:03:25.300
the spread operator and that turns it
into something that works in es5 right?

49
00:03:26.580 --> 00:03:29.650
However it would be really
annoying to include every es6,

50
00:03:30.840 --> 00:03:34.610
es2015 plug in by hand
because it's really big.

51
00:03:34.610 --> 00:03:35.860
There's a lot of stuff in es2015.

52
00:03:38.080 --> 00:03:42.830
So they added the ability to roll
them up into big presets, right?

53
00:03:42.830 --> 00:03:45.470
So we can include and
entire bundle of plugins.

54
00:03:45.470 --> 00:03:49.210
So that's what's happening
here that's what a preset is.

55
00:03:49.210 --> 00:03:53.500
So we're including everything we
need to do react transformations and

56
00:03:53.500 --> 00:03:56.550
we're are including everything that
we need to do es2015 transformations.

57
00:03:58.090 --> 00:04:00.400
Now, when you're doing production code.

58
00:04:00.400 --> 00:04:05.050
Don't include all of es2015
because it's actually pretty big,

59
00:04:05.050 --> 00:04:10.450
it's gonna include all the polyfills for
every feature in 2015 Chances

60
00:04:10.450 --> 00:04:15.960
are you probably only use maybe a tenth of
it, a fifth of it, not very much of it.

61
00:04:15.960 --> 00:04:18.540
For example a lot of people
don't use generators and

62
00:04:18.540 --> 00:04:22.400
the runtime to get generators to work
correctly is actually fairly large.

63
00:04:22.400 --> 00:04:24.530
It's a library called regenerator and
it's really big.

64
00:04:24.530 --> 00:04:28.488
And so you don't wanna be sending that
down to all of your clients if they're not

65
00:04:28.488 --> 00:04:30.130
to use it.

66
00:04:30.130 --> 00:04:32.770
So this is great for
messing around in development.

67
00:04:32.770 --> 00:04:34.350
It's not good for production.

68
00:04:34.350 --> 00:04:35.070
When you're doing it for

69
00:04:35.070 --> 00:04:38.000
a production go actually include
the individual plugins that you need.

70
00:04:41.190 --> 00:04:47.800
Okay so again this is in .babble R.C.
make sure this is valid.

71
00:04:47.800 --> 00:04:50.509
json which means make sure
these are double quotes.

72
00:04:52.330 --> 00:04:55.920
Single quotes don't work in JSON
just in case you're wondering.

73
00:04:58.340 --> 00:04:59.690
Yeah there you go just need that.

74
00:05:02.350 --> 00:05:06.300
And just to show you like these are not
magical it appearing out of the ether.

75
00:05:06.300 --> 00:05:09.569
They're actually already in your package
dot JSON that you installed there earlier.

76
00:05:10.720 --> 00:05:13.728
So you see babel-preset- whatever, right?

77
00:05:13.728 --> 00:05:15.980
es2015-react, right?

78
00:05:15.980 --> 00:05:20.400
So if you look over
here in your babel R.C.

79
00:05:20.400 --> 00:05:27.636
You just have to refer to everything after
babel- preset- something so -react-es2015.

80
00:05:27.636 --> 00:05:30.665
That's where that's magically appearing

81
00:05:30.665 --> 00:05:35.735
from.
&gt;&gt; Brian Holt: Okay?

82
00:05:35.735 --> 00:05:37.250
And make sure you have saved that.

83
00:05:39.620 --> 00:05:40.610
Questions so far?

84
00:05:40.610 --> 00:05:41.470
Feel pretty good about that?

85
00:05:43.940 --> 00:05:44.440
Cool.

86
00:05:47.290 --> 00:05:49.490
So you can actually read this
straight from the command line.

87
00:05:49.490 --> 00:05:53.490
But we're already using
Web PAC to build our project.

88
00:05:53.490 --> 00:05:57.860
So we're actually just gonna have Web PAC
as an extra intermediary step and

89
00:05:57.860 --> 00:05:59.990
run it through our babble process for us.

90
00:06:01.020 --> 00:06:03.280
Web PAC has a concept called a loader,

91
00:06:03.280 --> 00:06:06.790
and a loader basically is just this
intermediary step that you want to do

92
00:06:06.790 --> 00:06:09.200
while it's doing its transformations for
you.

93
00:06:09.200 --> 00:06:13.530
Cause out of the box all webpacks wants to
do is just bundle your files together and

94
00:06:13.530 --> 00:06:15.210
give you a bundle of all of your files.

95
00:06:16.240 --> 00:06:18.870
But you can have it do a bunch of other
things like run your lint for you.

96
00:06:18.870 --> 00:06:20.670
You can have it run your tests for you.

97
00:06:20.670 --> 00:06:23.040
You can have it do babble translation for

98
00:06:23.040 --> 00:06:25.390
you it can do a lot of
pretty awesome stuff.

99
00:06:26.680 --> 00:06:30.350
So again if you look at your packaged
dot json and you come down here.

100
00:06:30.350 --> 00:06:36.170
You can see that in your dev
dependencies we have a Babel loader and

101
00:06:36.170 --> 00:06:38.770
you do need that.

102
00:06:38.770 --> 00:06:42.660
We have one here called Jason dash
loader that's the the syntax for

103
00:06:44.690 --> 00:06:49.450
maybe the the standard it's
blank slash loader and

104
00:06:49.450 --> 00:06:53.170
that's something that's going to Web
package just for For future reference.

105
00:06:53.170 --> 00:06:57.610
So we're gonna use the Babel
dash loader right now.

106
00:06:57.610 --> 00:07:00.310
So first thing we'll gonna do here
is we're gonna to go over to our,

107
00:07:00.310 --> 00:07:04.920
we're already impacts touches, so
scroll up to find your scripts, okay.

108
00:07:06.260 --> 00:07:11.260
All we're gonna do here is web pack and
we're gonna add an extra little bit right

109
00:07:11.260 --> 00:07:16.386
here in the middle of it I'm gonna
say dash, dash, two dashes right.

110
00:07:16.386 --> 00:07:22.500
Module dash bind, okay.

111
00:07:22.500 --> 00:07:23.710
That's one dash, right there.

112
00:07:23.710 --> 00:07:25.030
In case you can't see that.

113
00:07:26.960 --> 00:07:28.549
Okay, and then using single quotes.

114
00:07:31.620 --> 00:07:33.210
We're going to say, js=babel.

115
00:07:33.210 --> 00:07:39.000
That's basically telling it
anytime you run into a J.S.

116
00:07:39.000 --> 00:07:42.905
file I need to run that through Babel.

117
00:07:42.905 --> 00:07:46.622
That's the,
what's going on underneath the hood.

118
00:07:46.622 --> 00:07:52.350
Okay, so we decided that part,

119
00:07:52.350 --> 00:08:00.190
everything else remains the same and
questions about that?

120
00:08:06.325 --> 00:08:10.570
Okay, so let's go ahead and save it,
come back to your command line and

121
00:08:12.830 --> 00:08:17.870
we're just going to run build
again npm run build and

122
00:08:17.870 --> 00:08:20.795
this is.

123
00:08:20.795 --> 00:08:24.685
This is gonna take a decent amount
of time more for it to happen.

124
00:08:26.365 --> 00:08:29.645
The reason being is now it's
running everything through your

125
00:08:29.645 --> 00:08:33.289
transpolation process and
it's not exactly a task process.

126
00:08:36.030 --> 00:08:38.040
But now, everything is also
being run through Babel.

127
00:08:38.040 --> 00:08:42.010
So now we can go crazy and
use all of our favorite ES2015 feature,

128
00:08:42.010 --> 00:08:44.460
the S6 whatever you want to call it.

129
00:08:44.460 --> 00:08:48.860
We can use anything with JSX
which will do momentarily but

130
00:08:48.860 --> 00:08:51.840
now that we have this
intermediary build process where.

131
00:08:51.840 --> 00:08:56.390
That's just built into our build pipeline
and we can do whatever we want with it.

