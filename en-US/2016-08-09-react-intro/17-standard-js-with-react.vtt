WEBVTT

1
00:00:00.000 --> 00:00:03.878
[MUSIC]

2
00:00:03.878 --> 00:00:07.249
&gt;&gt; Brian: Now Standard's not being super
useful for us, so let's go ahead and

3
00:00:07.249 --> 00:00:12.103
go fix Standard real quick.
&gt;&gt; Brian: So first thing we

4
00:00:12.103 --> 00:00:17.080
wanna do is we wanna be able to test, not
only Standard but Standard React rules.

5
00:00:17.080 --> 00:00:22.080
And the reason for that being, it's like
we wanna additional enforcement of make

6
00:00:22.080 --> 00:00:25.250
sure you're put setting prop types which
we'll talk about in here in a second, but

7
00:00:25.250 --> 00:00:28.500
there's other best practices for
React that we want to enforce.

8
00:00:28.500 --> 00:00:33.860
So the first we wanna do is we
wanna create a new file and

9
00:00:33.860 --> 00:00:38.983
it's called dot,
again the dot being important,

10
00:00:38.983 --> 00:00:46.895
eslintrc.json.
&gt;&gt; Brian: The reason why .json and

11
00:00:46.895 --> 00:00:51.440
this is gonna go on just the home
directory of your, let's say the home

12
00:00:51.440 --> 00:00:57.151
directory of the,
&gt;&gt; Brian: The root directory of

13
00:00:57.151 --> 00:01:03.754
your project, I have mine in Bundler
here complete intro to React, okay.

14
00:01:03.754 --> 00:01:05.618
You can also do this with YAML I think,

15
00:01:05.618 --> 00:01:09.540
if anyone's into that I don't know why
you would be, but if you are, go ahead.

16
00:01:09.540 --> 00:01:14.895
I'm going to do mine in Json,

17
00:01:14.895 --> 00:01:22.194
okay, and then it's gonna be extends.

18
00:01:22.194 --> 00:01:27.467
It's going to be Standard and Standard,

19
00:01:27.467 --> 00:01:32.446
sorry lower case, standard-react.

20
00:01:32.446 --> 00:01:37.420
And this is basically saying go out and
find these ES Lint rules and

21
00:01:37.420 --> 00:01:40.140
use this as my ES Lint rules, okay.

22
00:01:41.170 --> 00:01:43.970
And so now instead of interacting with
Standard directly we're actually gonna

23
00:01:43.970 --> 00:01:48.180
interact with ES Lint, which it's going
to load all of our standard rules and

24
00:01:48.180 --> 00:01:51.460
the only reason to do that like I said
Standard is not configurable in any way

25
00:01:51.460 --> 00:01:56.720
like Standard is exactly what Standard is,
it will not let you input anything else.

26
00:01:56.720 --> 00:01:59.470
So if you want to get around that
they said well if you want to make

27
00:01:59.470 --> 00:02:02.940
like this config than just drop down
into ES Lint, load our rules and

28
00:02:02.940 --> 00:02:03.720
then do whatever you want.

29
00:02:05.280 --> 00:02:10.739
That makes sense to me, some people find
that really annoying but I'm okay with it.

30
00:02:10.739 --> 00:02:17.140
Okay, so now we have ESLint set up and
now we actually want instead of having

31
00:02:17.140 --> 00:02:21.870
to look every single time and like run
mpm, run Lint a bunch of different times,

32
00:02:21.870 --> 00:02:25.300
why don't we just have Webpack run it
every single time that we save, right?

33
00:02:25.300 --> 00:02:27.370
That would actually be pretty cool,
cuz every time there's a console

34
00:02:27.370 --> 00:02:28.828
they could see everything
that we were doing wrong.

35
00:02:28.828 --> 00:02:34.054
So let's do that, let's go to our

36
00:02:34.054 --> 00:02:42.103
webpack.config.js.
&gt;&gt; Brian: Okay,

37
00:02:42.103 --> 00:02:45.969
here we're gonna do preLoaders.

38
00:02:48.090 --> 00:02:49.420
Now why preloaders?

39
00:02:50.760 --> 00:02:54.819
Because we actually, we don't wanna
run standard on bundle, right?

40
00:02:54.819 --> 00:02:57.634
We don't wanna run it on the code
after it's run through Babel,

41
00:02:57.634 --> 00:02:59.720
we actually wanna run it before, right?

42
00:02:59.720 --> 00:03:02.150
We wanna make sure our source
code is correct, right?

43
00:03:02.150 --> 00:03:05.594
And then we don't actually care what the
bundle looks like once we are sure that

44
00:03:05.594 --> 00:03:10.461
our code looks correct.
&gt;&gt; Brian: Okay, so

45
00:03:10.461 --> 00:03:13.828
we're gonna do another test,
it's gonna be the exact same one,

46
00:03:13.828 --> 00:03:16.829
in fact you can copy and
paste this one if it works better for

47
00:03:16.829 --> 00:03:22.059
you.
&gt;&gt; Brian: So

48
00:03:22.059 --> 00:03:23.627
I just need to be inside of an object.

49
00:03:33.299 --> 00:03:36.366
&gt;&gt; Brian: Okay, loader,

50
00:03:36.366 --> 00:03:39.875
eslint-loader.

51
00:03:46.561 --> 00:03:50.735
&gt;&gt; Brian: And, the one thing that we
wanna exclude is we don't actually wanna

52
00:03:50.735 --> 00:03:53.970
Lint our modules cuz that
makes exactly zero sense.

53
00:03:55.070 --> 00:03:58.330
So we're gonna give another regular
expression that if anything matches node

54
00:03:58.330 --> 00:04:02.549
modules just ignore that's because we
don't care if it's in node modules.

55
00:04:05.620 --> 00:04:07.870
Cuz otherwise it's gonna
let Lint react for

56
00:04:07.870 --> 00:04:11.020
you which if react has Lint
errors you don't care, right?

57
00:04:11.020 --> 00:04:14.708
That's their problem not yours.

58
00:04:17.361 --> 00:04:21.160
&gt;&gt; Brian: Okay, so let's try this again.

59
00:04:22.340 --> 00:04:32.160
So firstly you have to restart your watch.
&gt;&gt; Brian: It's

60
00:04:32.160 --> 00:04:34.900
gonna take even longer now cuz
we're linking all of our files.

61
00:04:36.180 --> 00:04:38.550
We just added like another one point two
seconds on it or something like that.

62
00:04:38.550 --> 00:04:43.320
So let's go introduce let's go
put some semicolons in here

63
00:04:43.320 --> 00:04:45.800
because we're naughty children or
something like that

64
00:04:47.590 --> 00:04:51.700
except that's the other thing I forgot
about this is Webpack's actually smart

65
00:04:51.700 --> 00:04:55.930
enough to say you put in semicolons that's
going to make zero effect on your code so

66
00:04:55.930 --> 00:04:58.720
I'm just not going to rerun right now
because it doesn't actually matter, right?

67
00:04:59.760 --> 00:05:01.340
Webpack's actually kind
of smart like that, so

68
00:05:01.340 --> 00:05:04.689
we're gonna put in some text string
modifications because that is significant.

69
00:05:06.390 --> 00:05:08.780
And now if we run it again
we're going to get errors here.

70
00:05:12.440 --> 00:05:17.290
So, I think the good news here is that it

71
00:05:17.290 --> 00:05:20.780
actually does still rerun right so
you actually do get this

72
00:05:20.780 --> 00:05:24.259
because Lint errors aren't gonna crash
your programs most of the time, right.

73
00:05:26.050 --> 00:05:29.210
But it is going to let you know
this is a problem, please fix that.

74
00:05:29.210 --> 00:05:31.540
So just the way that you read this.

75
00:05:31.540 --> 00:05:36.030
This is line one column 31 line two
column 38, so it actually points to you,

76
00:05:37.030 --> 00:05:42.717
this is where you're wrong and
so now if I go take those out,

77
00:05:42.717 --> 00:05:47.330
it'll happily re-compile.

78
00:05:47.330 --> 00:05:48.440
So now we have

79
00:05:48.440 --> 00:05:53.356
Standard running all the time.
&gt;&gt; Speaker 2: Can you quickly go over to

80
00:05:53.356 --> 00:05:58.969
the preloaders versus loaders?
&gt;&gt; Brian: Sure, preloaders get run first,

81
00:05:58.969 --> 00:06:05.368
that's the gist to that one.
&gt;&gt; Brian: And

82
00:06:05.368 --> 00:06:08.984
again, the reason why we run that first
is, we don't want to compile it first

83
00:06:08.984 --> 00:06:12.712
before we run Babel, or before we run
the Linter on it because we don't actually

84
00:06:12.712 --> 00:06:15.640
care if the compiled code passes Lint,
it won't, right?

85
00:06:15.640 --> 00:06:17.680
That's the point,
especially if you uglify and

86
00:06:17.680 --> 00:06:20.780
minify it,
then it's definitely not gonna pass Lint.

87
00:06:20.780 --> 00:06:26.875
You actually just only care about
your codes you Linted first,

88
00:06:26.875 --> 00:06:31.581
and then you compile it.
&gt;&gt; Brian: Cool,

89
00:06:31.581 --> 00:06:39.828
other questions?
&gt;&gt; Speaker 2: Can

90
00:06:39.828 --> 00:06:42.420
you upload the latest to GitHub?
&gt;&gt; Brian: Yep,

91
00:06:42.420 --> 00:06:43.650
I'll do that, here in just a sec.

92
00:06:44.710 --> 00:06:51.430
Actually I'll just do it right now.
&gt;&gt; Speaker 3: If

93
00:06:51.430 --> 00:06:56.809
you have multiple loaders or
preloaders do they get run in the order

94
00:06:56.809 --> 00:07:00.890
in which you define them in the config?
&gt;&gt; Brian: Yes.

95
00:07:00.890 --> 00:07:05.209
I believe that's the case.

96
00:07:05.209 --> 00:07:10.250
But you wanna check.
&gt;&gt; [LAUGH]

97
00:07:10.250 --> 00:07:11.930
&gt;&gt; Speaker 2: So preloaders actually get

98
00:07:11.930 --> 00:07:15.310
run at a different point
in the life cycle?

99
00:07:15.310 --> 00:07:16.830
&gt;&gt; Brian: Yeah you're guaranteed anything

100
00:07:16.830 --> 00:07:18.779
that runs in the preloaders get run first.

101
00:07:20.304 --> 00:07:24.390
And the nice thing about that as just,
yeah, you probably could just put that

102
00:07:24.390 --> 00:07:28.040
instead of loaders here, but the I think
the basically the idea is preloaders

103
00:07:28.040 --> 00:07:30.700
is there anything that to me doing
like checking your style making sure

104
00:07:30.700 --> 00:07:34.560
your tests are running right and
the load is reaction to be like modifying

105
00:07:34.560 --> 00:07:38.650
the output of code right that's
the basic gist of what's going on.

106
00:07:38.650 --> 00:07:43.349
I think there are post loaders as well
maybe that might be like uglify or

107
00:07:43.349 --> 00:07:49.789
something like that, not sure
&gt;&gt; Brian: Okay.

108
00:08:05.919 --> 00:08:06.502
&gt;&gt; Brian: And so

109
00:08:06.502 --> 00:08:11.286
that just pushed up FEM 7 for
those that need it,

110
00:08:11.286 --> 00:08:16.778
hopefully Here we go.
&gt;&gt; Brian: Hopefully GitHub

111
00:08:16.778 --> 00:08:21.894
doesn't go down again.
&gt;&gt; Brian: All right, so

112
00:08:21.894 --> 00:08:26.996
that's, [COUGH] kind of my
additional spiel on ESLint,

113
00:08:26.996 --> 00:08:32.314
as well as on updating Webpack,
any questions on ESLint,

114
00:08:32.314 --> 00:08:35.370
Webpack before we move on at all?

115
00:08:36.620 --> 00:08:38.560
I guess one thing I wanted to address,
just so

116
00:08:38.560 --> 00:08:41.160
you don't think these
are appearing out of nowhere.

117
00:08:41.160 --> 00:08:43.090
So this extends, where that's coming from.

118
00:08:43.090 --> 00:08:47.568
If you look at your package.json
we have ESLint config,

119
00:08:47.568 --> 00:08:52.888
right that's where these are coming from,
so you have Standard and

120
00:08:52.888 --> 00:08:59.394
reactors that are being brought in and-
&gt;&gt; Brian: We could do JSX,

121
00:08:59.394 --> 00:09:02.360
but just you know that
reactor's including JSX,

122
00:09:02.360 --> 00:09:05.889
just like how they're peer
dependencies is what they are so

123
00:09:05.889 --> 00:09:10.548
you just include Standard in Standard
React and you'll get all the rest of them

124
00:09:10.548 --> 00:09:16.075
that are being brought in there.
&gt;&gt; Brian: Okay.

125
00:09:22.677 --> 00:09:24.951
&gt;&gt; Brian: So that's how that works.

126
00:09:28.764 --> 00:09:29.865
&gt;&gt; Brian: Okay, cool.

127
00:09:29.865 --> 00:09:31.740
Well, we're going to
work on React Router now,

128
00:09:31.740 --> 00:09:36.595
unless anyone has any other questions.
&gt;&gt; Brian: Is

129
00:09:36.595 --> 00:09:38.545
everyone having Webpack watch work okay?

130
00:09:38.545 --> 00:09:40.475
Are they seeing Lint errors?

131
00:09:40.475 --> 00:09:45.510
When they invent them, cool.
&gt;&gt; Speaker 2: Somebody is asking

132
00:09:45.510 --> 00:09:48.920
about can you explain peer dependencies?
&gt;&gt; Brian: [LAUGH] I

133
00:09:50.090 --> 00:09:52.926
don't want to but I can.

134
00:09:52.926 --> 00:09:56.550
I'm going to give you like

135
00:09:56.550 --> 00:10:00.200
the 30 second version because this is
definitely not a React workshop or sorry,

136
00:10:00.200 --> 00:10:04.460
it definitely is a React workshop,
definitely not a node workshop.

137
00:10:04.460 --> 00:10:07.950
If you have further questions
definitely check out Kyle Simpson's

138
00:10:07.950 --> 00:10:09.990
node workshop cuz it's the best.

139
00:10:11.340 --> 00:10:16.060
So you have in your package update Json,
you have libraries that you depend on,

140
00:10:16.060 --> 00:10:19.040
right, that that must
go out to production.

141
00:10:19.040 --> 00:10:21.510
These are ones you're
actually using in your app.

142
00:10:21.510 --> 00:10:25.340
So that basically when
you're compiling to be run

143
00:10:25.340 --> 00:10:28.150
on your server these are all
ones are getting included.

144
00:10:28.150 --> 00:10:31.180
Those are dependencies you have dev
dependencies these are ones that you

145
00:10:31.180 --> 00:10:33.590
are using to actually compile your code to

146
00:10:33.590 --> 00:10:37.270
add to bug ability to your code right like
you don't need a Mocha in production which

147
00:10:37.270 --> 00:10:40.510
is our testing framework you
don't need Webpack in production.

148
00:10:43.360 --> 00:10:44.550
You don't need any of those things.

149
00:10:44.550 --> 00:10:48.450
The idea of a pure dependency is,
I have React and

150
00:10:48.450 --> 00:10:50.020
then I also have React Router right?

151
00:10:50.020 --> 00:10:54.610
React Router makes zero sense by itself
it needs React to work correctly, so

152
00:10:54.610 --> 00:10:57.660
React Router has a peer
dependency on React.

153
00:10:57.660 --> 00:10:59.870
That they need to be both
included into a project.

154
00:11:01.650 --> 00:11:04.250
That's the gist behind a peer dependency.

155
00:11:04.250 --> 00:11:05.803
Their giant,just mess and

156
00:11:05.803 --> 00:11:10.020
node, in fact a lot people are encouraged
not to use peer dependencies.

157
00:11:10.020 --> 00:11:14.970
But I'll leave that for
you all can go read Hacker News and

158
00:11:14.970 --> 00:11:17.790
argue with people on about
the internet cus I don't want to.

