WEBVTT

1
00:00:03.868 --> 00:00:06.078
[MUSIC]
&gt;&gt; Brian Holt: So let's actually make this

2
00:00:06.078 --> 00:00:11.394
do something now, and let's go to
Search.jsx which is where we are.

3
00:00:11.394 --> 00:00:14.830
So we're gonna do a little bit
more functional programming stuff.

4
00:00:14.830 --> 00:00:17.620
We did map already, right?

5
00:00:17.620 --> 00:00:18.868
So put this on a new line.

6
00:00:18.868 --> 00:00:20.292
And I'm gonna put something
in the middle here.

7
00:00:20.292 --> 00:00:24.298
I'm gonna do a filter as well,

8
00:00:24.298 --> 00:00:31.758
.filter(show).
&gt;&gt; Brian Holt: So,

9
00:00:31.758 --> 00:00:33.583
we'll do it the clever way and

10
00:00:33.583 --> 00:00:38.995
I'll explain it along the way.
&gt;&gt; Brian Holt: So, the basic gist

11
00:00:38.995 --> 00:00:43.188
of what I wanna do here, is I want people
to be able to dynamically search for

12
00:00:43.188 --> 00:00:50.013
the show that they're looking for.
&gt;&gt; Brian Holt: So

13
00:00:50.013 --> 00:00:54.456
the first thing is,
if it shows up either in the title or

14
00:00:54.456 --> 00:00:58.919
in the description,
I want to be able to search for it.

15
00:00:58.919 --> 00:01:00.976
So I'm gonna do show.description and

16
00:01:00.976 --> 00:01:03.725
show.title together in these backticks,
right?

17
00:01:03.725 --> 00:01:08.463
Remember, this is a backtick.
&gt;&gt; Brian Holt: So,

18
00:01:08.463 --> 00:01:12.300
I'm gonna make this like mushed together
strings, so I can look at both of them.

19
00:01:13.350 --> 00:01:17.115
Then I'm gonna do a toUpperCase,
because I want it to be case insensitive.

20
00:01:18.986 --> 00:01:20.875
&gt;&gt; Brian Holt: Then I'm gonna do indexOf,

21
00:01:20.875 --> 00:01:25.607
which basically is gonna ask,
hey do you contain this string, where?

22
00:01:25.607 --> 00:01:28.510
And then I'm gonna ask if it's

23
00:01:28.510 --> 00:01:35.445
indexOf(this.state.searchTerm.toUpperCase)
as well, right?

24
00:01:35.445 --> 00:01:37.968
Cuz I'm gonna look for
both of them uppercase, and

25
00:01:37.968 --> 00:01:43.831
that way case becomes a non-issue.
&gt;&gt; Brian Holt: And

26
00:01:43.831 --> 00:01:47.960
then here, I'm gonna ask if that's
greater than or equal to 0.

27
00:01:47.960 --> 00:01:51.590
If it doesn't find anything in
this indexOf, it returns -1.

28
00:01:51.590 --> 00:01:56.109
If it finds anything in your string,
then it's gonna return 0 to

29
00:01:56.109 --> 00:02:01.051
the end of the string, it gives you
the index of where that string lies.

30
00:02:03.315 --> 00:02:05.953
&gt;&gt; Brian Holt: It's a little clever.

31
00:02:05.953 --> 00:02:11.348
You can break this down a little bit
more if that feels better to you,

32
00:02:11.348 --> 00:02:17.746
but it feels okay to me.
&gt;&gt; Brian Holt: And for those

33
00:02:17.746 --> 00:02:21.990
of you that don't know what filter is,
I'll just give you the 30 second version.

34
00:02:21.990 --> 00:02:27.129
If I have [1, 2, 3, 4,

35
00:02:27.129 --> 00:02:31.446
3, 2, 1] and I say,

36
00:02:31.446 --> 00:02:36.591
.filter (function(num)

37
00:02:36.591 --> 00:02:41.750
{ return num === 2}).

38
00:02:41.750 --> 00:02:49.360
Basically that what this is gonna do is
it's gonna apply, this needs both of them.

39
00:02:49.360 --> 00:02:54.126
It's going to run this function on
every single item in the array,

40
00:02:54.126 --> 00:02:56.176
just like map does, right?

41
00:02:56.176 --> 00:02:58.343
If it returns true it
keeps it in the array, and

42
00:02:58.343 --> 00:03:01.140
if it returns false it
drops it from the array.

43
00:03:01.140 --> 00:03:04.781
So what this is going to return is,
&gt;&gt; Speaker 2: [COUGH]

44
00:03:04.781 --> 00:03:05.787
&gt;&gt; Brian Holt: Bless you.

45
00:03:05.787 --> 00:03:13.122
2,2, right, because num is only
gonna equal 2 where it's equal to 2.

46
00:03:13.122 --> 00:03:16.917
So this is a totally worthless example,
but this shows you exactly what filter's

47
00:03:16.917 --> 00:03:24.194
doing underneath the hood.
&gt;&gt; Brian Holt: So,

48
00:03:24.194 --> 00:03:29.546
what this is doing, it says, if I have the
search term anywhere in my show title or

49
00:03:29.546 --> 00:03:33.955
my description, then keep it in the array,
otherwise drop it from

50
00:03:33.955 --> 00:03:39.820
the array.
&gt;&gt; Brian Holt: Okay, so save that.

51
00:03:39.820 --> 00:03:43.350
Also, if you have more questions
about functional programming,

52
00:03:43.350 --> 00:03:46.640
Brian Lonsdorf has an awesome
Frontend Masters that you can check out.

53
00:03:46.640 --> 00:03:51.210
And also,
I gave a intro to CS Frontend Masters, and

54
00:03:51.210 --> 00:03:56.450
at the very end of that course is also
an intro to functional programming,

55
00:03:56.450 --> 00:03:59.460
like a 101, and we talk about filter.

56
00:04:01.180 --> 00:04:02.710
Okay so, save that.

57
00:04:04.020 --> 00:04:07.820
I have one ESLint error
on line 25 over wrong

58
00:04:07.820 --> 00:04:12.742
indentation.
&gt;&gt; Brian Holt: Does it expect it to

59
00:04:12.742 --> 00:04:17.410
be one more?
&gt;&gt; Brian Holt: It does, okay.

60
00:04:17.410 --> 00:04:22.853
So get rid of that, refresh.

61
00:04:22.853 --> 00:04:25.228
The other thing is let's
get rid of this business up

62
00:04:25.228 --> 00:04:28.663
here.
&gt;&gt; Brian Holt: Here,

63
00:04:28.663 --> 00:04:34.749
we don't want this to say svideo again.
&gt;&gt; Brian Holt: That's line 18.

64
00:04:34.749 --> 00:04:36.373
We just changed this h1 to,

65
00:04:36.373 --> 00:04:40.099
instead of reflecting the state
cuz we're done debugging that,

66
00:04:40.099 --> 00:04:44.045
just make that say svideo again,
we just want it to say the branding.

67
00:04:48.782 --> 00:04:51.310
&gt;&gt; Brian Holt: Okay, so now refresh this.

68
00:04:52.560 --> 00:04:57.291
Another thing, get rid of this event,
sorry, not that one.

69
00:04:57.291 --> 00:05:00.153
Make your searchTerm on your
getInitialState just be

70
00:05:00.153 --> 00:05:05.591
blank.
&gt;&gt; Brian Holt: So

71
00:05:05.591 --> 00:05:10.050
line 8 right here, we just made
that an empty string, right here.

72
00:05:10.050 --> 00:05:12.660
Cuz we don't want to be initially
searching for anything, right?

73
00:05:12.660 --> 00:05:15.168
We want it to be showing
everything initially.

74
00:05:15.168 --> 00:05:15.866
&gt;&gt; Speaker 3: But we should initiate it

75
00:05:15.866 --> 00:05:20.428
still, nonetheless, even if it's empty?
&gt;&gt; Brian Holt: Yeah, definitely.

76
00:05:20.428 --> 00:05:23.020
Otherwise it's undefined and
we actually want it to be an empty string,

77
00:05:23.020 --> 00:05:23.620
not undefined.

78
00:05:24.730 --> 00:05:30.612
Good question.
&gt;&gt; Brian Holt: Okay,

79
00:05:30.612 --> 00:05:33.370
so now we have all of our shows.

80
00:05:33.370 --> 00:05:37.370
But what happens if we start searching for
House, right?

81
00:05:37.370 --> 00:05:38.946
Now it's only showing House of Cards and

82
00:05:38.946 --> 00:05:43.446
Fuller House.
&gt;&gt; Brian Holt: Or Marco, right?

83
00:05:43.446 --> 00:05:45.974
So now we've made this
dynamic searching ability.

84
00:05:49.447 --> 00:05:51.580
&gt;&gt; Brian Holt: Right?

85
00:05:51.580 --> 00:05:53.046
I think that's pretty compelling, right?

86
00:05:53.046 --> 00:05:57.722
I think it's pretty cool, personally.
&gt;&gt; Brian Holt: That it didn't take

87
00:05:57.722 --> 00:06:00.990
a terrible amount of effort to make
this dynamic search ability work.

88
00:06:00.990 --> 00:06:03.550
And that's one,
thanks to functional programming, and two,

89
00:06:03.550 --> 00:06:07.240
thanks to the ability to use
functional programming with React.

