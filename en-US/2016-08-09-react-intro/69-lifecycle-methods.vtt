WEBVTT

1
00:00:00.000 --> 00:00:04.234
[MUSIC]

2
00:00:04.234 --> 00:00:06.520
&gt;&gt; Brian Holt: So we're gonna talk about
lifecycle methods that actually really

3
00:00:06.520 --> 00:00:07.680
are important in React.

4
00:00:07.680 --> 00:00:11.810
However, personally I try and
minimize how much I use them.

5
00:00:11.810 --> 00:00:14.210
And actually I went through this
entire workshop creating and

6
00:00:14.210 --> 00:00:16.861
realized I'd never made
any lifecycle methods.

7
00:00:16.861 --> 00:00:18.240
I'm like, holy shit,

8
00:00:18.240 --> 00:00:21.620
this is really bad because I
really have to know these things.

9
00:00:21.620 --> 00:00:23.954
So I just kind of tacked it on
here to the end really quick.

10
00:00:23.954 --> 00:00:31.060
Actually it's out of a good

11
00:00:31.060 --> 00:00:35.600
example of when you would be passing
context both on the server and the client.

12
00:00:35.600 --> 00:00:40.630
Notice how we're passing the data.shows
in various places in our app.

13
00:00:40.630 --> 00:00:43.830
This is typically something that
you request from a server, but

14
00:00:43.830 --> 00:00:47.980
if you have some sort of seed value, just
make sure that that's loaded separately.

15
00:00:47.980 --> 00:00:50.080
That's a better answer to that question.

16
00:00:50.080 --> 00:00:53.536
So just make sure that you're kind of
loading it into the side using requires

17
00:00:53.536 --> 00:00:55.490
rather than just only using Ajax, right.

18
00:00:55.490 --> 00:00:59.153
Cuz if you're only loading
Ajax is this dynamic, sorry,

19
00:00:59.153 --> 00:01:04.091
the server side rendering is decidedly
less useful because you're gonna load

20
00:01:04.091 --> 00:01:07.400
an empty page which is not
very compelling, right.

21
00:01:07.400 --> 00:01:10.290
You want to show the user
content as fast as possible,

22
00:01:10.290 --> 00:01:12.152
that's what I want to talk about.

23
00:01:12.152 --> 00:01:16.060
Okay, lifecycle methods.

24
00:01:16.060 --> 00:01:23.415
So what we're gonna do is I'm gonna add
the live IMDB rating to our details page.

25
00:01:24.695 --> 00:01:28.864
So go to your details page, and what we're

26
00:01:28.864 --> 00:01:32.345
gonna do here is we're gonna
make a request to an API.

27
00:01:32.345 --> 00:01:36.125
The OMDB API, which is actually
just a reflection of IMDB,

28
00:01:36.125 --> 00:01:40.926
and we're going to request
the rating from it.

29
00:01:40.926 --> 00:01:46.290
So, we're gonna be using a library
called axios from the very very talented

30
00:01:46.290 --> 00:01:51.280
Matt Zabriskie and all this is,

31
00:01:51.280 --> 00:01:53.940
is it's a Ajax library that uses promises.

32
00:01:53.940 --> 00:01:56.360
It's really simple, pretty lightweight.

33
00:01:56.360 --> 00:02:00.430
You can use any request
library that suits your fancy,

34
00:02:00.430 --> 00:02:01.840
I'm just gonna use axios cuz I like it.

35
00:02:02.840 --> 00:02:05.990
So this is actually to
maintain some state now.

36
00:02:05.990 --> 00:02:11.013
So what we're gonna do is we're gonna add

37
00:02:11.013 --> 00:02:16.043
a constructor (props) super (props)

38
00:02:20.267 --> 00:02:23.256
&gt;&gt; Brian Holt: And then we're gonna say

39
00:02:23.256 --> 00:02:28.385
this.state = omdbData: empty object.

40
00:02:31.571 --> 00:02:36.277
&gt;&gt; Brian Holt: So we start with
an empty state, then we're gonna put

41
00:02:36.277 --> 00:02:42.590
a componentDidMount() method,
componentDidMount().

42
00:02:42.590 --> 00:02:43.770
And use a space there.

43
00:02:45.220 --> 00:02:48.080
So this is a specific lifecycle method for
React.

44
00:02:48.080 --> 00:02:53.070
So the lifecycle method in React
is that basically as components go

45
00:02:53.070 --> 00:02:57.520
through different parts of their lives,
they call these different methods.

46
00:02:57.520 --> 00:02:59.050
So the first one we've
already used a bunch,

47
00:02:59.050 --> 00:03:02.249
which is getInitialState/Constructor
depending which one you're using.

48
00:03:03.690 --> 00:03:09.440
That's the first one that always gets
called when a React component is created.

49
00:03:09.440 --> 00:03:11.750
Number two is componentWillMount.

50
00:03:11.750 --> 00:03:14.790
componentWillMount gets called right
before it's going to go in the dom.

51
00:03:14.790 --> 00:03:18.470
You're not gonna use
componentWillMount a terrible much.

52
00:03:18.470 --> 00:03:20.970
But the big key to know about
componentWillMount is that it runs

53
00:03:20.970 --> 00:03:22.560
both in the browser and in node.

54
00:03:22.560 --> 00:03:25.450
So if there's anything you wanna do
that needs to happen as well as in

55
00:03:25.450 --> 00:03:26.960
node as it does in the browser.

56
00:03:26.960 --> 00:03:28.700
You're gonna use componentWillMount.

57
00:03:29.930 --> 00:03:32.020
Afterwards we're going to
use componentDidMount.

58
00:03:32.020 --> 00:03:34.340
Which means it did finally
make it into the dom.

59
00:03:34.340 --> 00:03:40.573
This does not get called in node and this
is the perfect place to do Ajax calls.

60
00:03:40.573 --> 00:03:43.578
Right because you don't want your server
actually making calls out to different

61
00:03:43.578 --> 00:03:45.860
other servers,
that doesn't make any sense.

62
00:03:45.860 --> 00:03:48.040
You want all of that to be
happening in the browser.

63
00:03:48.040 --> 00:03:51.780
So that's why we're gonna do all of
our Ajax in componentDidMount like

64
00:03:51.780 --> 00:03:54.895
unexceptionally Ajax happens
in the componentDidMount.

65
00:03:54.895 --> 00:04:01.090
I.e., you do actually end
up using componentDidMount

66
00:04:01.090 --> 00:04:05.220
quite a bit because Ajax is a very common
thing when we're doing web development.

67
00:04:07.040 --> 00:04:10.891
Okay, and then ultimately, lastly
there's componentWillUnmount and what

68
00:04:10.891 --> 00:04:15.148
componentWillUnmount does is it runs right
before it's about to exit the dom i.e.,

69
00:04:15.148 --> 00:04:19.019
this also doesn't get called in node
because that wouldn't make any sense.

70
00:04:19.019 --> 00:04:22.600
ComponentWillUmount is to
do any sort of cleanup.

71
00:04:22.600 --> 00:04:24.770
So if you're doing it like
any event listeners or

72
00:04:24.770 --> 00:04:26.480
if you're like hooked
into other libraries or

73
00:04:26.480 --> 00:04:31.310
if you need to like unsubscribe from
an observable or something like that.

74
00:04:31.310 --> 00:04:39.175
This will happen at componentWillUnmount
&gt;&gt; Brian Holt: Basically,

75
00:04:39.175 --> 00:04:42.761
a lot of times you're using
componentWillUnmount to not leak memory,

76
00:04:42.761 --> 00:04:45.435
that's usually what it's used for.

77
00:04:45.435 --> 00:04:49.225
Your doings any sort of
deallocations that you need to do.

78
00:04:49.225 --> 00:04:52.075
Okay, so we're gonna use componentDidMount
to do an Ajax recall real quick.

79
00:04:53.220 --> 00:04:57.448
So we're going to axios.get,

80
00:04:57.448 --> 00:05:05.442
we're gonna do back ticks
http://www.ondbapi.com.

81
00:05:05.442 --> 00:05:13.020
By the way I did contact
the the guy that runs omdbapi.

82
00:05:13.020 --> 00:05:17.032
And specifically told him that we're gonna
be hammering his API very brief, and

83
00:05:17.032 --> 00:05:18.687
then made a nice donation to him.

84
00:05:18.687 --> 00:05:23.679
So if you appreciate him, I'd encourage
you to go make a nice donation to him

85
00:05:23.679 --> 00:05:28.925
as well, cuz I don't think he makes
a terrible amount of money on it.

86
00:05:28.925 --> 00:05:36.770
This.props.shows and go in and

87
00:05:36.770 --> 00:05:46.022
grab this.props.params.imdbID.

88
00:05:46.022 --> 00:05:50.309
Nope, not that one.

89
00:05:50.309 --> 00:05:59.470
Props.ID rather, and then after the square
bracket we're gonna put imdbID, right.

90
00:05:59.470 --> 00:06:02.840
So we wanna make the request
against the omdbi ID and

91
00:06:02.840 --> 00:06:06.970
we wanna pass it, the ID of the show
that we wanna get information for.

92
00:06:10.740 --> 00:06:15.581
This returns a promise, which I do not
have much time to explain promises.

93
00:06:15.581 --> 00:06:18.530
So suffice to say, just follow along if
you don't know what promises are, and

94
00:06:18.530 --> 00:06:19.575
then go look them up later.

95
00:06:19.575 --> 00:06:23.441
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Brian Holt: Response

96
00:06:27.602 --> 00:06:29.085
&gt;&gt; Brian Holt: This.setState.

97
00:06:29.085 --> 00:06:33.788
omdbData response.data and

98
00:06:33.788 --> 00:06:39.052
then we also want to put a catch cuz

99
00:06:39.052 --> 00:06:46.397
you always want to do
that with your promises.

100
00:06:46.397 --> 00:06:53.257
Error console.error, axios error and

101
00:06:53.257 --> 00:07:00.180
then you just wanna log out that error.

102
00:07:00.180 --> 00:07:03.655
Okay so all this is gonna do is whenever
the component finally does make it on

103
00:07:03.655 --> 00:07:04.160
the page.

104
00:07:04.160 --> 00:07:06.727
It's gonna reach out to the API,
say hey OMBD API,

105
00:07:06.727 --> 00:07:11.180
give me all of your data about Daredevil,
about House of Cards, whatever.

106
00:07:11.180 --> 00:07:14.820
And then I'm just gonna internalize
that here in my state, right.

107
00:07:14.820 --> 00:07:15.516
That's all that's happening so far.

108
00:07:15.516 --> 00:07:18.250
So let's actually go make
a display something from that.

109
00:07:21.350 --> 00:07:25.660
So an interesting thing is that omdbData
is not always going to be there, right.

110
00:07:25.660 --> 00:07:27.700
So for example, when it runs on
the server, it's not gonna be there.

111
00:07:27.700 --> 00:07:30.940
And when you first render it the first
time, it's not gonna be there either.

112
00:07:30.940 --> 00:07:34.680
So you have to be guarded
against that possibility.

113
00:07:34.680 --> 00:07:40.016
So what we're going to do up

114
00:07:40.016 --> 00:07:45.816
here is let rating If (this.

115
00:07:45.816 --> 00:07:52.983
state.ondbData.imdbRating.

116
00:07:52.983 --> 00:07:58.591
So if that ends up being available

117
00:07:58.591 --> 00:08:03.397
to me I'm gonna say H three,

118
00:08:03.397 --> 00:08:09.409
className equals video-rating,

119
00:08:09.409 --> 00:08:18.447
rating with
this.state.omdbData.imdbRating.

120
00:08:18.447 --> 00:08:20.010
Close H3.

121
00:08:20.010 --> 00:08:20.810
Okay, so

122
00:08:20.810 --> 00:08:24.890
if I have the rating available to me,
then go ahead and render this component.

123
00:08:24.890 --> 00:08:28.506
Otherwise not, okay.

124
00:08:30.646 --> 00:08:34.327
&gt;&gt; Speaker 2: There is a question of why
we're doing this here instead of inside of

125
00:08:34.327 --> 00:08:34.980
an action?

126
00:08:37.150 --> 00:08:39.310
&gt;&gt; Brian Holt: Cuz I wanted to
show the lifecycle methods.

127
00:08:39.310 --> 00:08:42.030
You actually probably
would stick this in redux.

128
00:08:42.030 --> 00:08:45.990
But it depends on who you're asking.

129
00:08:45.990 --> 00:08:50.810
Cuz this would be more of view state
because it's an individual IMDB call.

130
00:08:50.810 --> 00:08:52.206
So up to you.

131
00:08:57.705 --> 00:08:59.400
&gt;&gt; Brian Holt: As you can see
this is all very subjective.

132
00:09:01.080 --> 00:09:02.400
Year and poster.

133
00:09:02.400 --> 00:09:04.490
So between these two we're
just gonna put our rating.

134
00:09:06.230 --> 00:09:09.740
So if this is not there
then rating's undefined and

135
00:09:09.740 --> 00:09:11.720
nothing gets rendered out here.

136
00:09:11.720 --> 00:09:14.560
If there is a rating, then this gets
rated out, this gets output there.

137
00:09:20.315 --> 00:09:21.063
&gt;&gt; Brian Holt: Right, so let's save that.

138
00:09:25.520 --> 00:09:29.570
&gt;&gt; Brian Holt: And
hopefully that solved everything.

139
00:09:29.570 --> 00:09:31.820
So now it's listening again.

140
00:09:31.820 --> 00:09:34.460
Refresh your page, go into daredevil.

141
00:09:36.838 --> 00:09:38.610
So I got a nice error there.

142
00:09:41.350 --> 00:09:43.135
Cannot read IMDB ID of undefined.

143
00:09:43.135 --> 00:09:51.583
This.state.omdb

144
00:09:51.583 --> 00:09:54.565
dating

145
00:10:01.076 --> 00:10:02.412
&gt;&gt; Brian Holt: That's a mystery.

146
00:10:07.076 --> 00:10:08.660
&gt;&gt; Brian Holt: Where is
it actually happening?

147
00:10:08.660 --> 00:10:09.650
Is that happening in the render?

148
00:10:10.820 --> 00:10:15.060
No, it's happening up
here this.props.params.

149
00:10:15.060 --> 00:10:15.560
id.

150
00:10:21.540 --> 00:10:23.700
&gt;&gt; Brian Holt: Right, damn it,
that's not gonna work either.

151
00:10:23.700 --> 00:10:25.375
So I have to use assign
show up here as well.

152
00:10:29.512 --> 00:10:34.090
&gt;&gt; Brian Holt: So instead of doing this,
I'm going to say thi.assignShow.

153
00:10:35.290 --> 00:10:37.710
I probably should've called it
something more descriptive than that.

154
00:10:38.850 --> 00:10:39.865
That's what needs to happen.

155
00:10:44.015 --> 00:10:45.000
&gt;&gt; Brian Holt: Right?
Cuz we

156
00:10:45.000 --> 00:10:47.750
actually have to go find
the show from redux.

157
00:10:49.550 --> 00:10:50.050
Yup.

158
00:10:51.710 --> 00:10:53.320
So hopefully that works.

159
00:10:53.320 --> 00:10:54.369
I'll come back in just a sec.

160
00:10:56.570 --> 00:10:58.000
Cool.

161
00:10:58.000 --> 00:11:02.790
So now you see this little 8.8 right out
there but notice like when we very first

162
00:11:02.790 --> 00:11:06.391
load the page it just like
suddenly pops on the page, right.

163
00:11:06.391 --> 00:11:10.324
It's not there the first
time which is kind of fun.

164
00:11:13.195 --> 00:11:18.310
&gt;&gt; Brian Holt: Yeah, so I had to use
assignShow to get the correct imdbID.

165
00:11:24.405 --> 00:11:26.360
&gt;&gt; Speaker 2: Okay,
let me kind of branch and push this up.

166
00:11:27.945 --> 00:11:31.085
We have one more thing, and
a half hour to talk about it.

167
00:11:31.085 --> 00:11:32.004
It's kind of a heavy subject but

168
00:11:32.004 --> 00:11:33.546
I really want to talk about
it cuz it's super exciting

169
00:11:58.417 --> 00:11:59.640
&gt;&gt; Speaker 2: Any questions about Ajax or

170
00:11:59.640 --> 00:12:00.601
lifecycle methods?

171
00:12:06.810 --> 00:12:09.217
&gt;&gt; Speaker 2: One thing, I currently
use many of the lifecycle methods.

172
00:12:09.217 --> 00:12:14.643
Is it smart to utilize redux and
the store instead for the Ajax calls?

173
00:12:14.643 --> 00:12:16.420
&gt;&gt; Brian Holt: Totally up to you.

174
00:12:16.420 --> 00:12:18.380
I don't have a good answer for
what you and

175
00:12:18.380 --> 00:12:23.299
your app is
&gt;&gt; Brian Holt: Yeah,

176
00:12:23.299 --> 00:12:28.167
I try and avoid lifecycle methods as
much as possible cuz it introduces this

177
00:12:28.167 --> 00:12:30.420
concept of time to my components.

178
00:12:30.420 --> 00:12:35.250
And I prefer to think of my components
as parameters in components out, and

179
00:12:35.250 --> 00:12:38.980
as little time involved in
that process as possible.

180
00:12:40.130 --> 00:12:42.856
But that's a personal decision and
that definitely is up to you.

181
00:12:42.856 --> 00:12:47.258
There are certain things that you
must use lifecycle methods for,

182
00:12:47.258 --> 00:12:52.140
like you can't get away from them,
but sometimes you can minimize them.

