WEBVTT

1
00:00:00.000 --> 00:00:03.766
[MUSIC]

2
00:00:03.766 --> 00:00:06.177
&gt;&gt; Brian Holt: Let's start by
writing our first component and

3
00:00:06.177 --> 00:00:09.380
getting something on the pages
just as fast as we possibly can.

4
00:00:11.110 --> 00:00:15.860
So we're not gonna use JSX right now, no
transpilation, we're just gonna be pulling

5
00:00:15.860 --> 00:00:21.310
in a bare bones version of react and
then just rendering something.

6
00:00:21.310 --> 00:00:23.940
Just to show you that you
can actually write, react

7
00:00:23.940 --> 00:00:27.600
really quickly that you don't actually
need all this other build stuff pull in.

8
00:00:27.600 --> 00:00:28.726
All that's conveniences and

9
00:00:28.726 --> 00:00:31.211
if you don't want the conveniences
you don't have to have them.

10
00:00:33.370 --> 00:00:35.889
&gt;&gt; Brian Holt: I'm gonna be
drawing some parallels between,

11
00:00:38.642 --> 00:00:39.769
&gt;&gt; Brian Holt: Angular, Backbone,

12
00:00:39.769 --> 00:00:41.970
Knockout, Ember, all that kind of stuff.

13
00:00:43.470 --> 00:00:47.810
Usually most of the Angular because
that's what I did before Angular 1,

14
00:00:47.810 --> 00:00:49.140
right not Angular 2.

15
00:00:50.170 --> 00:00:53.212
But just like no,
these are those are definitely more

16
00:00:53.212 --> 00:00:55.860
frameworks certainly Angular and
Ember are.

17
00:00:57.196 --> 00:00:59.460
And I'm gonna be using
the term Angular and

18
00:00:59.460 --> 00:01:03.950
frame or using the term framework and
library interchangeably.

19
00:01:03.950 --> 00:01:06.240
Those terms actually
aren't interchangeable.

20
00:01:06.240 --> 00:01:09.322
But I don't want to differentiate,
so I'm not going to.

21
00:01:10.372 --> 00:01:13.597
&gt;&gt; Brian Holt: [COUGH] Okay.

22
00:01:16.349 --> 00:01:18.539
&gt;&gt; Brian Holt: So this is
constantly an argument people have,

23
00:01:18.539 --> 00:01:20.520
is Reaction a framework or
is it a library?

24
00:01:20.520 --> 00:01:25.150
I think the answer is really, it can
be whatever you choose to use it for.

25
00:01:25.150 --> 00:01:28.920
You really can treat react like
a framework and if anyone tells you

26
00:01:28.920 --> 00:01:34.050
otherwise it either don't understand react
in the true the way you can use it or

27
00:01:34.050 --> 00:01:35.910
they're just, I don't know,

28
00:01:35.910 --> 00:01:38.890
stuck on the word framework being a bad
word which I don't think it's a bad word.

29
00:01:38.890 --> 00:01:42.610
I think Ember in particular embraces
the framework term really well.

30
00:01:44.830 --> 00:01:50.140
But in truth what React aims to
fill is the view layer, right.

31
00:01:50.140 --> 00:01:54.400
Like in the MVC array or the MVVM or
MV Star, whatever you wanna call it.

32
00:01:54.400 --> 00:01:58.030
It really aims to fulfill the view part,
right.

33
00:01:58.030 --> 00:02:01.970
So if you're writing backbone, right,
it really aims to be the view and

34
00:02:01.970 --> 00:02:05.300
then it allows you to basically
define your own models and

35
00:02:05.300 --> 00:02:09.000
allow you to define your own
controllers or view controllers.

36
00:02:09.000 --> 00:02:11.290
Whatever you wanna call.

37
00:02:12.560 --> 00:02:13.360
Don't get me wrong again.

38
00:02:13.360 --> 00:02:16.090
You can manage these sorts of
things inside of reactors.

39
00:02:16.090 --> 00:02:22.659
Just many choose not to put that way.

40
00:02:22.659 --> 00:02:26.883
And then eventually, we're gonna move
all of that model type data out of React

41
00:02:26.883 --> 00:02:29.061
anyway when we start using Redux later.

42
00:02:31.492 --> 00:02:32.077
&gt;&gt; Brian Holt: And yeah, so

43
00:02:32.077 --> 00:02:34.750
we're gonna start building our
little app piece by piece.

44
00:02:36.390 --> 00:02:40.690
So let's go ahead and
open your project here.

45
00:02:45.230 --> 00:02:48.340
Let's see.

46
00:02:48.340 --> 00:02:52.530
So, I want you to open index.HTML
inside of your project.

47
00:02:52.530 --> 00:02:55.550
Again make sure you're on the start branch
that you're not on the master branch

48
00:02:55.550 --> 00:03:01.430
because otherwise, this seem to
look slightly different, okay?

49
00:03:02.900 --> 00:03:04.350
So, first thing we want to do here.

50
00:03:06.020 --> 00:03:07.720
Is we're gonna put two
script tags here at the top.

51
00:03:11.910 --> 00:03:17.950
Why is this, I'm gonna re-indent
these set fours or two spaces.

52
00:03:19.580 --> 00:03:22.925
Okay, so I'm gonna say

53
00:03:22.925 --> 00:03:32.925
src=node_modules/react/dist/react.js.

54
00:03:35.950 --> 00:03:39.537
So we're just going to put
the precompiled react.

55
00:03:39.537 --> 00:03:46.565
And by the same token we're going
to be pulling in react-dom as well.

56
00:03:54.604 --> 00:03:58.799
&gt;&gt; Brian Holt: And actually, you probably
want this to be at the bottom so you can

57
00:03:58.799 --> 00:04:03.853
with that to top that doesn't really
matter but whatever you would like to do.

58
00:04:03.853 --> 00:04:05.318
Okay?

59
00:04:05.318 --> 00:04:06.983
We're going to another script tag here.

60
00:04:13.239 --> 00:04:17.147
&gt;&gt; Brian Holt: And we're gonna start
pulling in some things that we need,

61
00:04:17.147 --> 00:04:17.779
okay?.

62
00:04:22.922 --> 00:04:27.620
&gt;&gt; Brian Holt: Okay,
this always infuriates people.

63
00:04:27.620 --> 00:04:29.690
And it's an opinion, right?

64
00:04:29.690 --> 00:04:34.400
You don't have to use semicolons and I'm
just like I'm just like look of horror on

65
00:04:34.400 --> 00:04:39.260
people's faces like but I need my
semi-colons and I love my semi-colons.

66
00:04:39.260 --> 00:04:42.530
That sweet period comma
combination just does it for me.

67
00:04:43.610 --> 00:04:45.284
No you don't have to and it's okay.

68
00:04:45.284 --> 00:04:48.980
We're gonna be using something called
standard JS which is going to or

69
00:04:48.980 --> 00:04:50.920
standard is actually what it's called.

70
00:04:50.920 --> 00:04:54.260
That actually won't allow
you to use comp semi-colons.

71
00:04:54.260 --> 00:04:58.990
So my invitation for you is, one try it.

72
00:04:58.990 --> 00:05:02.330
And see that eventually,
especially when you're writing reactors.

73
00:05:02.330 --> 00:05:06.497
Lots of like parenthesis and curly
braces and things that you can be using.

74
00:05:06.497 --> 00:05:10.179
And it's nice not to have to worry about,
do I need to put a semicolon here or

75
00:05:10.179 --> 00:05:10.891
not, right?

76
00:05:10.891 --> 00:05:12.220
At least I always have that problem.

77
00:05:13.240 --> 00:05:16.143
So I invite you to try not using
something semi-colons today.

78
00:05:16.143 --> 00:05:20.350
And if you just can't do it, totally fine
I'll give you the escape hatch later.

79
00:05:20.350 --> 00:05:21.644
But just give it a shot.

80
00:05:27.125 --> 00:05:29.253
&gt;&gt; Brian Holt: Okay?

81
00:05:29.253 --> 00:05:31.790
So by pulling these two
modules right here.

82
00:05:31.790 --> 00:05:34.353
They're making a globally
available react just so

83
00:05:34.353 --> 00:05:37.284
you know that's why we're
able to say React.DOM.div.

84
00:05:37.284 --> 00:05:42.653
And that's okay.

85
00:05:42.653 --> 00:05:50.211
Okay, and now we're going to make
our very own first component So,

86
00:05:50.211 --> 00:05:54.191
var MyFirstComponent equals = and

87
00:05:54.191 --> 00:05:58.180
I wanna use just parentheses here.

88
00:05:59.570 --> 00:06:02.470
We're using parenthesis because we
want to do this on multiple lines.

89
00:06:02.470 --> 00:06:04.650
So, we can kinda see the way
that the nesting is working.

90
00:06:06.890 --> 00:06:08.940
And that's gonna be very helpful to us.

91
00:06:10.080 --> 00:06:13.590
And the parenthesis basically allow
you to do multiline expression.

92
00:06:13.590 --> 00:06:17.420
If you didn't have that parenthesis there,
JavaScript would throw an error

93
00:06:17.420 --> 00:06:22.120
cuz it's like you said equals nothing
blank and it would be upset about that.

94
00:06:23.160 --> 00:06:26.221
Okay.
So, we're gonna say div.

95
00:06:26.221 --> 00:06:28.630
Div's a function.

96
00:06:31.060 --> 00:06:34.840
First thing we pass to is null because
we're not giving it any context.

97
00:06:36.240 --> 00:06:40.190
And then the second thing on
the next line, it's gonna be the h1,

98
00:06:40.190 --> 00:06:45.980
again with null and say,
this is my first component or

99
00:06:45.980 --> 00:06:48.880
whatever string you want to put in
there that you expect to show up.

100
00:06:48.880 --> 00:06:53.399
Okay, then I'm gonna come

101
00:06:53.399 --> 00:06:57.918
down here underneath it and

102
00:06:57.918 --> 00:07:02.050
say ReactDOM.render.

103
00:07:04.670 --> 00:07:09.680
MyFirstComponent, and then we'll say,

104
00:07:09.680 --> 00:07:16.790
document.getElementByID('app')) and
that's it.

105
00:07:19.070 --> 00:07:19.731
Okay?

106
00:07:24.110 --> 00:07:25.400
&gt;&gt; Brian Holt: So go ahead and save that.

107
00:07:28.420 --> 00:07:33.600
And then come over here to your
browser and just in a new tab open.

108
00:07:34.680 --> 00:07:39.410
Where wherever your, you put your project.

109
00:07:40.860 --> 00:07:41.610
I put mine here.

110
00:07:41.610 --> 00:07:44.780
So this is the index.HTML
that we were just working on.

111
00:07:44.780 --> 00:07:46.965
I'm gonna open it in my browser.

112
00:07:50.654 --> 00:07:52.020
&gt;&gt; Brian Holt: And
again you can do that in Chrome.

113
00:07:52.020 --> 00:07:54.670
If you just go to Chrome
you say File &gt; Open File.

114
00:07:54.670 --> 00:07:55.330
Just so you know.

115
00:07:57.570 --> 00:08:00.066
So check it out.

116
00:08:00.066 --> 00:08:02.176
That's react.

117
00:08:02.176 --> 00:08:06.940
So hopefully you now realize that,
actually, react is pretty simple.

118
00:08:06.940 --> 00:08:10.600
In terms of, it's not very hard
to get something on a page.

119
00:08:10.600 --> 00:08:14.980
And I think a lot of tutorials go, make
you do way too much up front to try and

120
00:08:14.980 --> 00:08:16.650
get this first hello world on the page.

121
00:08:19.020 --> 00:08:20.410
It's cuz it's not really that difficult.

122
00:08:20.410 --> 00:08:23.170
Like we did it in what,
how many lines of code?

123
00:08:23.170 --> 00:08:25.480
One, two, three, four, five, six, seven.

124
00:08:28.154 --> 00:08:30.122
&gt;&gt; Brian Holt: Seven lines of code
to get something on the page,

125
00:08:30.122 --> 00:08:31.083
which is not bad at all.

126
00:08:36.985 --> 00:08:39.506
&gt;&gt; Brian Holt: Any questions about that?

127
00:08:39.506 --> 00:08:42.930
Magical, magical,
I'm gonna go with magical.

128
00:08:44.440 --> 00:08:46.440
Okay, so let's go back and

129
00:08:46.440 --> 00:08:48.800
chit chat a little bit about
what we actually did here.

130
00:08:48.800 --> 00:08:52.400
Okay, so
the first thing you need to realize about

131
00:08:52.400 --> 00:08:54.880
react components is
everything's a function right.

132
00:08:54.880 --> 00:08:57.539
Now, so
they were calling the div function, right?

133
00:08:59.694 --> 00:09:03.340
So, that's the first important thing
to keep in mind is that everything is

134
00:09:03.340 --> 00:09:08.090
a function everything, except this
my first component in this in this

135
00:09:08.090 --> 00:09:12.380
particular case is actually just kinda
the result of these two functions, right,

136
00:09:12.380 --> 00:09:14.000
which is going to be a react element.

137
00:09:17.080 --> 00:09:19.979
But we'll see later how to create
our own functional components.

138
00:09:21.910 --> 00:09:24.730
This null, this is like the attributes
that we're passing to it.

139
00:09:24.730 --> 00:09:31.378
So if I went ahead here and said, color or
actually it'll have to be style, color.

140
00:09:31.378 --> 00:09:38.770
Style: {color: 'red'}}.

141
00:09:38.770 --> 00:09:39.420
Now I saved it.

142
00:09:40.950 --> 00:09:41.990
And it came back over here.

143
00:09:42.990 --> 00:09:45.780
Now it's red.
So that's what this is.

144
00:09:45.780 --> 00:09:47.510
These are the kind of attributes
that we're passing to it.

145
00:09:47.510 --> 00:09:49.770
In fact, if we go here and
inspect element.

146
00:09:49.770 --> 00:09:51.095
Inspect.

147
00:09:54.079 --> 00:09:57.417
&gt;&gt; Brian Holt: You can see here it's
actually literally passing the style

148
00:09:57.417 --> 00:09:59.190
attribute onto there.

149
00:09:59.190 --> 00:10:00.180
So that's what that first part is.

150
00:10:00.180 --> 00:10:02.568
It's the attributes that we're gonna
be supplying to our different,

151
00:10:02.568 --> 00:10:04.210
let's see if I can make
this a little bit bigger.

152
00:10:08.123 --> 00:10:11.612
&gt;&gt; Brian Holt: So this is actually like
the attributes that we'll be passing to

153
00:10:11.612 --> 00:10:13.043
the various components.

154
00:10:15.562 --> 00:10:16.350
&gt;&gt; Brian Holt: That's what that is.

155
00:10:16.350 --> 00:10:17.790
Right now, we're gonna leave that null.

156
00:10:21.900 --> 00:10:24.470
And then, as you can see it's just
different layers of nesting, right.

157
00:10:24.470 --> 00:10:27.900
This kind of mimics the way that
we would write HTML, right.

158
00:10:27.900 --> 00:10:31.920
Like we have like an outer tag
that's has inter-tags, right.

159
00:10:31.920 --> 00:10:35.001
That makes some sense hopefully
if you've written any amount of

160
00:10:35.001 --> 00:10:38.207
HTML
&gt;&gt; Brian Holt: And

161
00:10:38.207 --> 00:10:39.200
you don't have to pull these out.

162
00:10:39.200 --> 00:10:42.400
I just find this much easier to
read than if it looked like this.

163
00:10:48.189 --> 00:10:48.881
&gt;&gt; Brian Holt: Right?

164
00:10:48.881 --> 00:10:50.420
I mean that's what we're doing.

165
00:10:50.420 --> 00:10:53.764
But I find it much easier to just pull
these out so it looks a little bit neater.

166
00:10:56.710 --> 00:10:57.776
&gt;&gt; Brian Holt: And then ReactDOM.

167
00:10:57.776 --> 00:11:00.560
Okay, so there is, there's react, right?

168
00:11:00.560 --> 00:11:03.440
And react is just a particular
way of writing components.

169
00:11:03.440 --> 00:11:06.800
So, whether you're writing react with for
the browser or

170
00:11:06.800 --> 00:11:11.930
using ReactNative to write it for
iOS or ReactBliss to write it for

171
00:11:11.930 --> 00:11:17.140
the command line or
ReactGL thread for Web GL Or

172
00:11:17.140 --> 00:11:20.260
for example, we have an internal library
at Netflix that we write React for

173
00:11:20.260 --> 00:11:24.610
your PS4 or we write React for
your smart TV, right?

174
00:11:24.610 --> 00:11:28.320
So React is just that library that
allows you to write these components.

175
00:11:28.320 --> 00:11:31.959
And then there's these various other
libraries like ReactDOM, ReactBliss,

176
00:11:31.959 --> 00:11:35.890
etcetera, etcetera, that allow you to take
these components of you've written and

177
00:11:35.890 --> 00:11:39.990
react and then throw them at
particular rendering targets, right?

178
00:11:39.990 --> 00:11:43.991
So that's why React and
ReactDOM are separate packages, right.

179
00:11:43.991 --> 00:11:47.508
React the way we write the components and
ReactDOM is the way that we put

180
00:11:47.508 --> 00:11:51.040
the component that we've,
written on to the DOM.

181
00:11:51.040 --> 00:11:55.880
So for example I really only use ReactDOM
but if you want to use ReactNative this

182
00:11:55.880 --> 00:11:59.170
you'd pull ReactNative in to do
that instead of ReactDOM to them.

183
00:11:59.170 --> 00:12:00.180
Hopefully make some sense.

184
00:12:03.500 --> 00:12:07.360
Yeah, it actually used
to be the same thing.

185
00:12:07.360 --> 00:12:10.840
ReactDOM used to be built in to react
because that's really the only way people

186
00:12:10.840 --> 00:12:12.260
first started using it.

187
00:12:12.260 --> 00:12:13.870
But then react native happened and

188
00:12:13.870 --> 00:12:17.460
it all exploded into a bunch
of different packages.

