WEBVTT

1
00:00:00.000 --> 00:00:03.626
[MUSIC]

2
00:00:03.626 --> 00:00:06.241
&gt;&gt; Brian Holt: So I have certain
opinions about unit testing and

3
00:00:06.241 --> 00:00:10.383
I say many of them are not popular with
the general community, so I will try and

4
00:00:10.383 --> 00:00:12.515
keep my own personal bias to a minimum.

5
00:00:12.515 --> 00:00:16.673
I want to show you how to do this and then
I will hopefully let you make your own

6
00:00:16.673 --> 00:00:21.169
decision at the end of whether or not you
think these are awesome and great ideas.

7
00:00:22.780 --> 00:00:25.649
So we're gonna be using mocha and
chai today.

8
00:00:25.649 --> 00:00:29.990
You can do this with jasmine,
you can do this with ava.

9
00:00:29.990 --> 00:00:34.274
There's actually another great workshop
online from the previously mentioned

10
00:00:34.274 --> 00:00:36.355
Kent C Dodds on testing react with ava.

11
00:00:36.355 --> 00:00:38.856
And you're welcome to go check that
out it that's interesting to you.

12
00:00:38.856 --> 00:00:43.702
But, these principles were general apply
to the testing framework is rather not

13
00:00:43.702 --> 00:00:44.496
important.

14
00:00:44.496 --> 00:00:47.660
The more important thing
is how to test react.

15
00:00:49.270 --> 00:00:51.550
So, Mocha's as the test runner,
for those who don't know that.

16
00:00:52.630 --> 00:00:55.870
Chai is the search library, the things
that actually checking what is true and

17
00:00:55.870 --> 00:00:57.270
what is false.

18
00:00:57.270 --> 00:00:59.900
And then we're gonna use
a specialized React testing tool

19
00:00:59.900 --> 00:01:02.000
from our friends at AirBnB called Enzyme.

20
00:01:03.020 --> 00:01:07.667
And it's just a bunch of
extra testing utilities for

21
00:01:07.667 --> 00:01:12.219
React, to make testing
React a little bit easier.

22
00:01:12.219 --> 00:01:13.539
Pretty great.

23
00:01:13.539 --> 00:01:16.283
There's also something called
React Testing Utils and

24
00:01:16.283 --> 00:01:20.330
if you'll notice in your package.JSON,
it's actually in there.

25
00:01:20.330 --> 00:01:24.120
Reason being is that Enzyme is actually
using those we're actually going to

26
00:01:24.120 --> 00:01:28.920
be directly using the React Testing Utils
but those are also available for you.

27
00:01:28.920 --> 00:01:30.790
You can check them out
at the documentation.

28
00:01:32.210 --> 00:01:33.868
I don't actually know too much about them.

29
00:01:33.868 --> 00:01:36.940
Cuz I don't really use them that much but
you're welcome to check it out.

30
00:01:39.270 --> 00:01:43.948
Okay, so we can have this like weird
state where we have everything

31
00:01:43.948 --> 00:01:46.798
going through Babel to be able to be run.

32
00:01:46.798 --> 00:01:49.909
And we need that to still happen
on the node side of things or

33
00:01:49.909 --> 00:01:54.228
else things are gonna crash because no
doesn't necessary speak all the ES6 that

34
00:01:54.228 --> 00:01:55.068
we're using.

35
00:01:55.068 --> 00:01:58.728
We were in this weird state that
we were gonna be in node but

36
00:01:58.728 --> 00:02:01.730
we needed to be running
through Babel as well.

37
00:02:01.730 --> 00:02:04.390
So we're gonna kind of do a little
hack to get that to work.

38
00:02:06.010 --> 00:02:08.660
So what I want you to
do is in your complete,

39
00:02:08.660 --> 00:02:12.140
like the root of the project,
create a new folder.

40
00:02:13.770 --> 00:02:15.980
And you have to call it test, I think.

41
00:02:15.980 --> 00:02:20.160
Yeah, it must actually be called test,
T-E-S-T.

42
00:02:20.160 --> 00:02:23.956
Singular, reason being is that
what Mocha is gonna look for,

43
00:02:23.956 --> 00:02:27.899
when you get want to go is to
find the tests so, yeah T-E-S-T.

44
00:02:27.899 --> 00:02:29.805
I'm gonna repeat that a couple times,

45
00:02:29.805 --> 00:02:32.759
inevitably someone still not
gonna get it but that's okay.

46
00:02:32.759 --> 00:02:40.790
And then, inside of Mocha we're going
to create a directory called Helpers.

47
00:02:46.740 --> 00:02:49.720
Okay, so inside of test,
singular test rght,

48
00:02:49.720 --> 00:02:52.859
we're gonna create
a directory called helpers.

49
00:02:52.859 --> 00:02:56.159
This one's not important what you
call it I just call it helpers.

50
00:02:56.159 --> 00:02:59.270
Okay, inside of helpers create a new file.

51
00:03:00.580 --> 00:03:03.140
And it's just gonna be nice five lines.

52
00:03:03.140 --> 00:03:08.460
It's gonna be require Babel dash register.

53
00:03:08.460 --> 00:03:09.760
&gt;&gt; Speaker 2: What
should we call that one?

54
00:03:09.760 --> 00:03:11.760
&gt;&gt; Brian Holt: I called it setup.js.

55
00:03:20.220 --> 00:03:22.320
&gt;&gt; Brian Holt: Okay,
required Babel register.

56
00:03:24.720 --> 00:03:27.550
Require('babel-polyfill').

57
00:03:27.550 --> 00:03:32.327
This is basically setting up your
babel pipeline to be able to run

58
00:03:32.327 --> 00:03:36.579
your tests through babel as
we're running them, okay.

59
00:03:36.579 --> 00:03:45.700
And then, we're gonna create a browser
like environment for our test to run in.

60
00:03:45.700 --> 00:03:47.526
So that basically you
can run your tests and

61
00:03:47.526 --> 00:03:49.262
the test can think there in the browser.

62
00:03:49.262 --> 00:03:51.622
We gonna use something called JS dom.

63
00:03:51.622 --> 00:03:57.152
JS dom is basically a very lightweight
implementation of the dom that basically

64
00:03:57.152 --> 00:04:03.430
your test can interact with a fake dom and
get the information back it needs.

65
00:04:03.430 --> 00:04:06.040
If you've ever used Phantom,
Phantom is actually, like,

66
00:04:06.040 --> 00:04:08.400
going to run, it's a web kit.

67
00:04:08.400 --> 00:04:09.630
I think Phantom runs web kit.

68
00:04:11.560 --> 00:04:13.504
What this is gonna do,
this is very similar.

69
00:04:13.504 --> 00:04:16.720
It's gonna run something like
the browser but this one actually

70
00:04:16.720 --> 00:04:20.170
doesn't actually load the real browser
forwards Phantom is a real browser.

71
00:04:20.170 --> 00:04:21.120
So i.e.

72
00:04:21.120 --> 00:04:22.810
this is way faster than Phantom.

73
00:04:22.810 --> 00:04:25.196
Phantom is crazy slow.

74
00:04:25.196 --> 00:04:31.419
Okay, so global.document=

75
00:04:31.419 --> 00:04:38.368
require('jsdom').jsdom.

76
00:04:38.368 --> 00:04:42.588
And then we're gonna give it
basically its starter document.

77
00:04:42.588 --> 00:04:45.432
So you're just gonna say body.

78
00:04:45.432 --> 00:04:52.333
Then we're gonna put our little
mounting place the app div in there.

79
00:04:56.734 --> 00:04:59.970
&gt;&gt; Brian Holt: So this is going to be like
the starter DOM for our particular test.

80
00:05:02.500 --> 00:05:04.669
I'm gonna do

81
00:05:04.669 --> 00:05:12.760
global.window.=document.default view.

82
00:05:14.440 --> 00:05:18.328
So jsDOM is gonna create a document for
us and we're gonna create a window

83
00:05:18.328 --> 00:05:22.360
as well just so that if it goes to look
for a window that it's there, right.

84
00:05:23.800 --> 00:05:30.740
And I'm gonna say
global.navigator=window.navigator

85
00:05:30.740 --> 00:05:36.324
this is basically for
one to go from page to page.

86
00:05:36.324 --> 00:05:40.440
This is allowing it to be able to do
like back-and-forth and stuff like that.

87
00:05:40.440 --> 00:05:42.630
So one thing I would like to
mention at this place is,

88
00:05:42.630 --> 00:05:44.030
I did not write any of that.

89
00:05:44.030 --> 00:05:46.964
This is all from Kent C Dodds and
I directly stole it from his repo.

90
00:05:46.964 --> 00:05:49.440
This is just highway robbery right here.

91
00:05:49.440 --> 00:05:52.310
So, I get exactly zero of this credit.

92
00:05:54.170 --> 00:05:55.120
So thank you Kent.

93
00:05:55.120 --> 00:05:55.750
You're the best.

94
00:05:57.260 --> 00:05:58.494
Now you can give me credit again.

95
00:05:58.494 --> 00:06:01.475
&gt;&gt; Speaker 3: There's
a question of what is global?

96
00:06:01.475 --> 00:06:02.535
&gt;&gt; Brian Holt: What is global?

97
00:06:02.535 --> 00:06:04.950
Most of us are used to seeing window,
right.

98
00:06:04.950 --> 00:06:09.640
That's like the global in the browser,
right.

99
00:06:09.640 --> 00:06:12.140
Global is like the window of node, right.

100
00:06:12.140 --> 00:06:18.280
It's the global variable that floats
from all of the node instances.

101
00:06:18.280 --> 00:06:19.290
The reason why you never use it,

102
00:06:19.290 --> 00:06:22.300
is because using global's are really,
really bad.

103
00:06:22.300 --> 00:06:23.350
You never wanna do that, right.

104
00:06:24.470 --> 00:06:26.765
Yeah, in node there is a global.

105
00:06:26.765 --> 00:06:29.940
So this is just setting up your
global to be browser like.

106
00:06:31.150 --> 00:06:31.830
It's good question though.

107
00:06:33.110 --> 00:06:36.869
I'm very happy that you didn't know
that global existed [LAUGH] and

108
00:06:36.869 --> 00:06:38.920
you can go back to
ignoring it at this point.

109
00:06:42.530 --> 00:06:43.225
Any questions about this?

110
00:06:43.225 --> 00:06:45.870
Does it kind of make sense
of what this is for?

111
00:06:45.870 --> 00:06:50.237
This is basically going to be run before
all of your tests to create a new

112
00:06:50.237 --> 00:06:52.915
window browser like environment, okay.

113
00:06:52.915 --> 00:06:56.472
&gt;&gt; Speaker 3: So there was a followup,
when we say window.navigator,

114
00:06:56.472 --> 00:06:57.495
what is window?

115
00:06:57.495 --> 00:07:01.135
Is it what we define on line five?

116
00:07:01.135 --> 00:07:05.128
&gt;&gt; Brian Holt: Yep, it's gonna
be this jsdom implementation so,

117
00:07:05.128 --> 00:07:10.305
here we're creating the document and
from document we're getting

118
00:07:10.305 --> 00:07:15.288
a window out of the document,
&gt;&gt; Brian Holt: If that makes any sense.

119
00:07:19.588 --> 00:07:22.596
&gt;&gt; Brian Holt: Yeah, all of this is
just in the name of creating a browser

120
00:07:22.596 --> 00:07:23.670
like environment.

121
00:07:25.860 --> 00:07:29.865
So that React can think as
if it's in the browser and

122
00:07:29.865 --> 00:07:32.859
you can run it as if it was the browser.

123
00:07:32.859 --> 00:07:37.979
&gt;&gt; Speaker 3: And then you have
a closing bracket on your body.

124
00:07:37.979 --> 00:07:40.529
&gt;&gt; Brian Holt: Have a closing
bracket on my body.

125
00:07:40.529 --> 00:07:42.289
&gt;&gt; Speaker 3: On, of the body tag.

126
00:07:42.289 --> 00:07:43.190
&gt;&gt; Brian Holt: Thank you

