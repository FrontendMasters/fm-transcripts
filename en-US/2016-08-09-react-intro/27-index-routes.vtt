WEBVTT

1
00:00:00.000 --> 00:00:03.747
[MUSIC]

2
00:00:03.747 --> 00:00:07.290
&gt;&gt; Brian Holt: Now we have to go over
to client app.jsx and make that work.

3
00:00:08.380 --> 00:00:12.873
Any questions with this before I move on?

4
00:00:19.298 --> 00:00:20.594
&gt;&gt; Brian Holt: Okay.

5
00:00:27.006 --> 00:00:29.310
&gt;&gt; Brian Holt: Here we're gonna have to
pull it in, so that's the first thing.

6
00:00:30.780 --> 00:00:36.439
Const Layout = require a /Layout.

7
00:00:43.644 --> 00:00:47.859
&gt;&gt; Brian Holt: And, so here's kind of the
tricky part of what we're gonna do here.

8
00:00:49.540 --> 00:00:50.500
It should do it correctly.

9
00:00:50.500 --> 00:00:52.430
Yeah, we'll pull it in the sec, okay?

10
00:00:53.480 --> 00:00:56.954
So, this is what's gonna be
called a nested route, right?

11
00:00:59.213 --> 00:01:01.628
&gt;&gt; Brian Holt: As you might expect,
we're gonna have a route.

12
00:01:05.569 --> 00:01:07.230
&gt;&gt; Brian Holt: Let's just do it this way.

13
00:01:07.230 --> 00:01:11.380
Path=, and it's gonna be the same
as the slash above it, right?

14
00:01:12.420 --> 00:01:16.210
I'll kind of explain that here in a sec,
and the component is going to be equal to

15
00:01:19.210 --> 00:01:21.020
layout, okay?

16
00:01:23.180 --> 00:01:25.950
And then,
we're gonna indent these two ones,

17
00:01:25.950 --> 00:01:30.950
and this is going to be so
you can have this one on the outside.

18
00:01:32.190 --> 00:01:36.530
So, these two having the same
path doesn't make any sense, but

19
00:01:36.530 --> 00:01:40.136
the same time we want /always
to go to running, right?

20
00:01:40.136 --> 00:01:45.230
We kind of have this weird
problem where you have these two

21
00:01:45.230 --> 00:01:50.830
routes betting the same place that wanna
use the same layout, so what we're

22
00:01:50.830 --> 00:01:55.930
gonna do about that is we're going to make
this from what's called an index route.

23
00:01:55.930 --> 00:01:58.967
So, we have to pull in one more
thing up here from React Router and

24
00:01:58.967 --> 00:02:00.054
that's index route.

25
00:02:03.121 --> 00:02:07.429
&gt;&gt; Brian Holt: Okay, and
now wanna change this router here,

26
00:02:07.429 --> 00:02:12.735
the nested one to be an index route and
get rid of the path.

27
00:02:16.720 --> 00:02:18.944
&gt;&gt; Brian Holt: So, let me, go ahead.

28
00:02:18.944 --> 00:02:25.966
&gt;&gt; Speaker 2: Can we just wrap
the router and landing component?

29
00:02:25.966 --> 00:02:28.897
&gt;&gt; Brian Holt: The answer is
that would probably work.

30
00:02:28.897 --> 00:02:33.514
Router expects to be the top
level component of your app fish.

31
00:02:33.514 --> 00:02:36.882
[LAUGH] Because of that we're going to
actually not make that the case when we

32
00:02:36.882 --> 00:02:38.810
started into Redox.

33
00:02:38.810 --> 00:02:42.680
But, for the most part,
you don't want to wrap router in UI code,

34
00:02:42.680 --> 00:02:44.410
that's more what I'm getting at here.

35
00:02:48.270 --> 00:02:52.220
The other thing that's nice about this
approach is you can have multiple nested

36
00:02:52.220 --> 00:02:55.700
routes, so say you have different layouts
between different parts of your app,

37
00:02:55.700 --> 00:02:58.360
you can use this wrapped route and
different parts of it.

38
00:03:01.800 --> 00:03:08.630
Okay, so to recap what's happening here,
we have this path, right?

39
00:03:08.630 --> 00:03:11.580
So, this is the top level path,
but if we for example had,

40
00:03:11.580 --> 00:03:14.473
maybe further down or
[INAUDIBLE] have different layers of

41
00:03:14.473 --> 00:03:18.435
nesting,
&gt;&gt; Brian Holt: Like,

42
00:03:18.435 --> 00:03:21.020
the idea of this could be like home,
right?

43
00:03:21.020 --> 00:03:26.170
And then, this would be /home/search, and
this would be /home right here, right?

44
00:03:26.170 --> 00:03:28.430
That's the idea of these
nested routes is you can share

45
00:03:31.340 --> 00:03:35.060
code amongst these next nested parts
of your URL structuring, right?

46
00:03:35.060 --> 00:03:38.960
So, this is actually tied to URL
structuring for good or for bad.

47
00:03:38.960 --> 00:03:40.410
I think it's usually a good thing,

48
00:03:40.410 --> 00:03:45.040
because that makes that your
UI reflects your URL nesting.

49
00:03:45.040 --> 00:03:46.980
That is an opinion that
they enforce upon you,

50
00:03:46.980 --> 00:03:51.515
but some might argue that's itâ€™s
an okay opinion to enforce.

51
00:03:54.910 --> 00:03:58.230
Basically, what this is going
to do is it's going to render

52
00:03:58.230 --> 00:04:00.679
layout because it matches this one first.

53
00:04:00.679 --> 00:04:01.960
Okay, and

54
00:04:01.960 --> 00:04:06.350
then it's going to pass to layout whatever
one matches interior to that one, right?

55
00:04:06.350 --> 00:04:11.410
So, if you go to slash the index route is,
just whatever the path is of its parent,

56
00:04:11.410 --> 00:04:14.210
right, so
you only have one index route per nesting.

57
00:04:17.370 --> 00:04:20.180
That's going to match the parent,
so it's going to have lending

58
00:04:20.180 --> 00:04:24.389
being passed as a child or
as children technically to layout.

59
00:04:26.230 --> 00:04:27.980
Now if you go to /search, right?

60
00:04:27.980 --> 00:04:29.570
It's gonna match this one right because

61
00:04:30.650 --> 00:04:34.880
that's up in the URL structure
that it matches this first, and

62
00:04:34.880 --> 00:04:38.310
then it's gonna match this one's
gonna pass search as the children.

63
00:04:40.290 --> 00:04:41.780
Do we follow?
Does that make sense?

64
00:04:41.780 --> 00:04:46.977
Okay, again, a hard requirement of this,
and one that I've never

65
00:04:46.977 --> 00:04:53.008
tried to get around, but as far as I know
there is not a good way to get around it.

66
00:04:53.008 --> 00:04:55.213
They must share some sort
of the URL structure, and

67
00:04:55.213 --> 00:04:58.701
this big particular case is not very hard
because we're dealing with the slash,

68
00:04:58.701 --> 00:05:01.389
right, and everything matches
slash that comes in your app.

69
00:05:01.389 --> 00:05:07.029
That everything is nested
underneath slash, so go ahead and

70
00:05:07.029 --> 00:05:15.190
say that, and let's come back here looks
like I don't have any essence problems.

71
00:05:15.190 --> 00:05:21.580
So, I should be able to come back
over here to my app here, refresh,

72
00:05:21.580 --> 00:05:25.620
and go to Browse All, and those have
my nice background the background now.

73
00:05:25.620 --> 00:05:27.235
My nice background in the background.

74
00:05:30.776 --> 00:05:32.230
&gt;&gt; Brian Holt: I think that's pretty cool,
right?

75
00:05:32.230 --> 00:05:33.360
And now, if you look again,

76
00:05:33.360 --> 00:05:37.370
if you look at search,
you next book good job, Bryan search.

77
00:05:38.560 --> 00:05:41.330
We don't actually put that app container
around it or anything like that.

78
00:05:41.330 --> 00:05:44.710
Now it just shows up because it's
part of the nested layering than

79
00:05:44.710 --> 00:05:46.420
nested layering of like
the routes that we've done.

80
00:05:50.190 --> 00:05:52.980
Any questions about what's happening here?

81
00:05:52.980 --> 00:05:55.550
Hopefully it's not too much
of black magic to you.

82
00:05:55.550 --> 00:05:59.690
The router is a little bit of black magic,
but hopefully it's not too much.

83
00:05:59.690 --> 00:06:02.260
&gt;&gt; Speaker 3: We should take app
container out of landing, right?

84
00:06:03.450 --> 00:06:04.454
&gt;&gt; Brian Holt: Yeah we definitely should.

85
00:06:07.748 --> 00:06:09.119
&gt;&gt; Brian Holt: Definitely
should good point.

86
00:06:11.720 --> 00:06:12.497
&gt;&gt; Brian Holt: If you would look,

87
00:06:12.497 --> 00:06:15.803
inspected that in the DOM you'd actually
see that there's two App containers in

88
00:06:15.803 --> 00:06:17.709
there which is not
necessarily what you want.

89
00:06:21.693 --> 00:06:23.170
&gt;&gt; Brian Holt: So, yeah save that.

90
00:06:23.170 --> 00:06:28.118
I just took out line five and
we've been line ten, I think,

91
00:06:31.629 --> 00:06:33.962
&gt;&gt; Brian Holt: And built okay.

92
00:06:33.962 --> 00:06:38.832
So now, for refresh, go back to
the home page, still works okay.

93
00:06:38.832 --> 00:06:40.657
Yeah.
&gt;&gt; Speaker 4: There's a question about

94
00:06:40.657 --> 00:06:43.009
using flow type for prop type checking.

95
00:06:43.009 --> 00:06:45.578
How does that work?

96
00:06:45.578 --> 00:06:48.532
&gt;&gt; Brian Holt: Well, it works really well,

97
00:06:48.532 --> 00:06:53.259
I have very little
experience of flow type, but

98
00:06:53.259 --> 00:06:57.986
the basic idea is that you
start with flow type by

99
00:06:57.986 --> 00:07:02.256
letting flow type infer all of your types.

100
00:07:02.256 --> 00:07:04.028
You kind of build it up by saying like,
okay,

101
00:07:04.028 --> 00:07:05.672
this is definitely going to be a boolean.

102
00:07:05.672 --> 00:07:07.968
This is definitely gonna be a string,

103
00:07:07.968 --> 00:07:11.573
and then once you kind of get
that strong typing to your app.

104
00:07:11.573 --> 00:07:15.764
Basically, flow type is able to follow
between different files that type

105
00:07:15.764 --> 00:07:20.563
signatures, and then it's able to say,
hey, this was a boolean in the other file,

106
00:07:20.563 --> 00:07:22.546
and it's not a boolean over here.

107
00:07:22.546 --> 00:07:27.720
So, this is going to be a real problem and
that's kind of the gist here.

108
00:07:29.360 --> 00:07:31.690
I'm not gonna give you much more of the
gist, cuz otherwise I'd be making it up.

109
00:07:31.690 --> 00:07:34.150
[LAUGH] But
that's how a FlowType is gonna do it.

110
00:07:34.150 --> 00:07:35.856
That's how TypeScript's gonna do it.

111
00:07:38.453 --> 00:07:41.305
&gt;&gt; Brian Holt: Yeah, I don't wanna
talk about types much more than that.

112
00:07:41.305 --> 00:07:46.121
[LAUGH] Good question though,
other questions?

113
00:07:50.309 --> 00:07:51.081
&gt;&gt; Brian Holt: Okay.

114
00:07:52.170 --> 00:07:55.620
&gt;&gt; Speaker 4: I guess, is there any reason
to use prop types if you're using flow?

115
00:07:55.620 --> 00:07:58.210
&gt;&gt; Brian Holt: No, absolutely not.

116
00:07:58.210 --> 00:08:02.300
No, flow type definitely supersedes that.

117
00:08:03.660 --> 00:08:06.970
So from what I'm told, obviously I've
never seen Facebook source code but

118
00:08:06.970 --> 00:08:10.560
they don't have prop types anywhere
because they use flow type everywhere.

119
00:08:10.560 --> 00:08:13.120
And that kind of replaces the need for
proptypes.

120
00:08:16.180 --> 00:08:18.300
&gt;&gt; Speaker 4: And then, are we gonna
review stripping out the proptype

121
00:08:18.300 --> 00:08:20.320
validation for production code?

122
00:08:20.320 --> 00:08:21.430
&gt;&gt; Brian Holt: Nope.

123
00:08:21.430 --> 00:08:21.955
&gt;&gt; Speaker 4: Okay.
&gt;&gt; Brian Holt: We are not.

124
00:08:21.955 --> 00:08:22.820
[LAUGH]

125
00:08:22.820 --> 00:08:24.190
&gt;&gt; Speaker 4: And then, can you put

126
00:08:24.190 --> 00:08:25.720
the latest up on GitHub again?

127
00:08:25.720 --> 00:08:26.648
&gt;&gt; Brian Holt: Yep, definitely

128
00:08:38.674 --> 00:08:39.480
&gt;&gt; Brian Holt: Checkout -b,

129
00:08:39.480 --> 00:08:43.544
I think tonight I'm gonna home and
read a one line piece of code to do this.

130
00:08:43.544 --> 00:08:47.862
Totally saw this idea from

131
00:08:47.862 --> 00:08:53.161
Hendrick who also did a friend in

132
00:08:53.161 --> 00:08:58.461
Masters one that guy's awesome

133
00:08:58.461 --> 00:09:03.770
like one of my favorite people.

134
00:09:03.770 --> 00:09:08.051
But, to hear the tool called YOLO,

135
00:09:08.051 --> 00:09:14.090
that out didn't just get commit push,
right?

136
00:09:14.090 --> 00:09:18.040
Just right away and so I heard him say,
that is the greatest idea for

137
00:09:18.040 --> 00:09:19.470
workshops in the history of mankind and

138
00:09:19.470 --> 00:09:23.370
so that's why I started doing
the branches based on that idea from him.

139
00:09:25.990 --> 00:09:27.320
Definitely going to watch
this course though.

140
00:09:27.320 --> 00:09:31.568
It's called Modern app development or
something like that, and it's it's A++,

141
00:09:31.568 --> 00:09:32.320
really good.

142
00:09:32.320 --> 00:09:38.179
I don't know why I just
gave an eBay rating, right.

143
00:09:38.179 --> 00:09:39.400
A++, would buy from again.

144
00:09:43.320 --> 00:09:44.390
Okay.

145
00:09:44.390 --> 00:09:49.160
Okay.
That's the extent of what we're gonna talk

146
00:09:49.160 --> 00:09:51.230
about with React Router at least for
today.

147
00:09:52.640 --> 00:09:58.699
Any of you have any questions about that
before we move on to something else?

148
00:10:00.490 --> 00:10:03.122
&gt;&gt; [INAUDIBLE]
&gt;&gt; Brian Holt: We are.

149
00:10:05.240 --> 00:10:07.530
&gt;&gt; Speaker 5: So,
I'm getting a console error.

150
00:10:07.530 --> 00:10:10.560
Index route does not make sense at
the root of your route config and

151
00:10:10.560 --> 00:10:12.530
I can't see where my codes
any different than yours.

152
00:10:13.600 --> 00:10:16.560
&gt;&gt; Brian Holt: I've never
seen that error before.

153
00:10:17.840 --> 00:10:21.223
My guess is that you have a sibling to
this and it needs to be inside of it

154
00:10:26.252 --> 00:10:28.980
&gt;&gt; Brian Holt: So you have a route, right?

155
00:10:30.040 --> 00:10:33.599
The first child inside of
the route is the index route.

156
00:10:33.599 --> 00:10:39.100
So router, route, index route.

157
00:10:39.100 --> 00:10:42.145
&gt;&gt; Speaker 5: Let's copy and
paste your code and see if it fixes it.

158
00:10:42.145 --> 00:10:43.404
&gt;&gt; Brian Holt: [LAUGH].

