WEBVTT

1
00:00:00.000 --> 00:00:03.862
[MUSIC]

2
00:00:03.862 --> 00:00:08.528
&gt;&gt; Brian Holt: Now we're going to go
convert our app to be JSX instead of just

3
00:00:08.528 --> 00:00:10.490
raw JavaScript.

4
00:00:10.490 --> 00:00:12.600
Because now, it's being run through Babel.

5
00:00:12.600 --> 00:00:15.200
Babel understands JSX and
it can output it.

6
00:00:18.471 --> 00:00:23.520
&gt;&gt; Brian Holt: So,
let's talk about a little bit what JSX is.

7
00:00:23.520 --> 00:00:28.250
First of all JSX is a big reason why

8
00:00:28.250 --> 00:00:33.620
React did not catch on for
over a year after I got open source.

9
00:00:33.620 --> 00:00:37.706
It was a good 18 months before I
picked it up and I I tried it once and

10
00:00:37.706 --> 00:00:38.620
I was like this is gross.

11
00:00:38.620 --> 00:00:41.480
I'm not touching it and
I left it and came back later.

12
00:00:41.480 --> 00:00:45.500
It's like, okay I just had to throw
a bit of caution to the wind.

13
00:00:46.870 --> 00:00:49.660
So JSX basically allows you to
write HTML in your JavaScript,

14
00:00:49.660 --> 00:00:53.150
like that's the the gist of what JSX is.

15
00:00:53.150 --> 00:00:55.060
And a lot of people look at that and say,

16
00:00:55.060 --> 00:00:58.580
why in the hell would I ever want
to write HTML in JavaScript, right.

17
00:00:58.580 --> 00:00:59.530
I'm in JavaScript.

18
00:00:59.530 --> 00:01:00.930
I want it to be JavaScript.

19
00:01:00.930 --> 00:01:02.260
I want my HTML to be HTML.

20
00:01:03.370 --> 00:01:06.970
Furthermore, people point is,
we just got away like five or

21
00:01:06.970 --> 00:01:09.320
six years ago of writing
JavaScript in our HTML.

22
00:01:09.320 --> 00:01:13.090
Why would you want to flip that on its
head and write HTML in our JavaScript.

23
00:01:13.090 --> 00:01:14.360
All valid complaints and

24
00:01:14.360 --> 00:01:17.800
if you're feeling that way you
are certainly not the only person.

25
00:01:17.800 --> 00:01:21.138
In fact, I would almost guarantee that
every person felt that way when they saw

26
00:01:21.138 --> 00:01:22.158
JSX for the first time.

27
00:01:24.391 --> 00:01:26.239
&gt;&gt; Brian Holt: The reason
why it's really great is,

28
00:01:26.239 --> 00:01:29.489
because if you look at what we code
we've written here in my title.

29
00:01:30.890 --> 00:01:32.160
What is this doing?

30
00:01:32.160 --> 00:01:34.820
This is really just mimicking what our
Ishmael eventually is going to look

31
00:01:34.820 --> 00:01:35.480
like, right.

32
00:01:37.450 --> 00:01:40.830
We're doing the same sort of nest
in the same sort of indentation.

33
00:01:40.830 --> 00:01:43.360
We're ultimately just mimicking
what the way it looks.

34
00:01:43.360 --> 00:01:45.680
So if we're just mimicking it,

35
00:01:45.680 --> 00:01:48.410
wouldn't make sense to maybe just
do it in the first place, right.

36
00:01:48.410 --> 00:01:49.340
Instead of having mimic in it,

37
00:01:49.340 --> 00:01:52.970
we can literally just write
the HTML that we're looking for.

38
00:01:55.050 --> 00:01:57.610
So, that's why I find it very valuable.

39
00:01:57.610 --> 00:02:00.891
I'm actually writing the HTML
that I intend to see on the page.

40
00:02:05.955 --> 00:02:07.405
&gt;&gt; Brian Holt: The other thing is,

41
00:02:07.405 --> 00:02:13.478
that React kind of eschews the idea of a
traditional model view controller, right.

42
00:02:13.478 --> 00:02:17.310
And Model View control works
amazing on a server, right.

43
00:02:17.310 --> 00:02:22.730
Like for all of you that have written,
Django or rails or any one of those mvc's.

44
00:02:22.730 --> 00:02:28.090
It's a really great idea on the server to
separate these concerns from into models,

45
00:02:28.090 --> 00:02:29.130
used controllers.

46
00:02:29.130 --> 00:02:32.530
That's a good separation of concerns for
the server and someone said,

47
00:02:32.530 --> 00:02:34.760
well if it's good for
the server it must be good for the client.

48
00:02:34.760 --> 00:02:37.910
And so, we brought that in,
like with Backbone and

49
00:02:37.910 --> 00:02:40.050
earlier Angular and earlier Amber, right.

50
00:02:40.050 --> 00:02:43.010
Like we've been writing these model view
controllers, as well in the client and

51
00:02:43.010 --> 00:02:45.450
to me, it's a really leaky abstraction.

52
00:02:45.450 --> 00:02:47.010
Like what what works for

53
00:02:47.010 --> 00:02:51.600
interacting with databases is not
necessarily good for user interfaces.

54
00:02:51.600 --> 00:02:54.640
User interfaces are an entirely
different beast in my opinion.

55
00:02:55.900 --> 00:02:58.520
So what React has had to do
instead of trying to separate,

56
00:02:58.520 --> 00:02:59.770
arbitrarily in my opinion.

57
00:02:59.770 --> 00:03:03.000
These different concerns into a model,
a view and a controller.

58
00:03:03.000 --> 00:03:07.480
What they decided to do is, they tried to
separate it into individual components.

59
00:03:07.480 --> 00:03:10.610
And they take all the concerns,
that entire model view controller and

60
00:03:10.610 --> 00:03:14.600
they just mash it into together
very small components.

61
00:03:14.600 --> 00:03:19.060
So when you're looking at a component, you
see all of the concerns in one place now.

62
00:03:19.060 --> 00:03:20.840
And in my opinion,
that makes a lot of sense,

63
00:03:20.840 --> 00:03:23.720
because these components are now
entirely self-contained.

64
00:03:23.720 --> 00:03:28.000
And if you have a bug in a component,
there's only one place it can be.

65
00:03:28.000 --> 00:03:28.905
It's not in the model.

66
00:03:28.905 --> 00:03:29.460
It's not in the view.

67
00:03:29.460 --> 00:03:30.310
It's not the controller.

68
00:03:30.310 --> 00:03:32.540
It's definitely inside of
this one component and

69
00:03:32.540 --> 00:03:34.460
so, I think that's really powerful.

70
00:03:34.460 --> 00:03:35.620
So, if I go to a web page and

71
00:03:35.620 --> 00:03:39.210
I see there's something wrong
with my navigation bar, right?

72
00:03:39.210 --> 00:03:40.750
Like the sign out button is broken or

73
00:03:40.750 --> 00:03:44.370
something like that, I know precisely
what's broken about it, right.

74
00:03:44.370 --> 00:03:47.600
Like I know it's broken
somewhere in this component and

75
00:03:47.600 --> 00:03:50.050
that ability to just
visually debug a page.

76
00:03:50.050 --> 00:03:52.130
Super, super powerful, right?

77
00:03:52.130 --> 00:03:56.600
You now have limited, from the hundreds of
thousands of lines of code that you have.

78
00:03:56.600 --> 00:04:00.102
You know it's in this block of code
somewhere, it just has to be, right.

79
00:04:01.761 --> 00:04:04.620
&gt;&gt; Brian Holt: I don't know if anyone's
here is coming from an Angular background.

80
00:04:04.620 --> 00:04:09.820
That's what I came from and if you have a
bug in Angular, it can be in the template.

81
00:04:09.820 --> 00:04:11.700
It can be in the directive.

82
00:04:11.700 --> 00:04:14.540
It can be in the directive that
transcluding in the other directive.

83
00:04:14.540 --> 00:04:17.380
It can can be in the controller or

84
00:04:17.380 --> 00:04:20.510
it can be in one of the many
services you're bringing in, right.

85
00:04:20.510 --> 00:04:21.530
Just by looking at a component,

86
00:04:21.530 --> 00:04:24.220
say there's a bug on that with
this particular component.

87
00:04:24.220 --> 00:04:29.100
You still don't necessarily know
what's happening or where it is.

88
00:04:29.100 --> 00:04:30.960
Now, that's not entirely true.

89
00:04:30.960 --> 00:04:35.340
You can still have external bugs in React,
but if you write your React really well,

90
00:04:35.340 --> 00:04:39.980
typically those just don't happen.

91
00:04:39.980 --> 00:04:45.596
So all that to say, that I believe one,
that JSX is a good thing and

92
00:04:45.596 --> 00:04:50.101
I believe that React uses it really well.

93
00:04:50.101 --> 00:04:51.670
&gt;&gt; Brian Holt: Any questions about that so
far?

94
00:04:51.670 --> 00:04:59.690
Like kind of the ideology behind JSX or
React?

95
00:04:59.690 --> 00:05:06.910
Okay, so I almost guarantee anyone that
toughs through and writes a bit of JSX.

96
00:05:06.910 --> 00:05:12.315
And gets through writing like a little
app that way, almost no one goes back.

97
00:05:12.315 --> 00:05:15.880
[LAUGH] So if you just give it
a shot then, then it'll be good.

98
00:05:18.280 --> 00:05:20.800
Much more so, I understand a lot
people don't like standard.

99
00:05:20.800 --> 00:05:23.470
That they're going to do standard
today and then say, Brian's an idiot,

100
00:05:23.470 --> 00:05:24.300
I'm no longer going to do it.

101
00:05:24.300 --> 00:05:27.590
I'm totally cool with that, but
most people don't say JSX is a bad idea.

102
00:05:30.020 --> 00:05:33.670
But that is to say, you can always
go back and write it this way.

103
00:05:33.670 --> 00:05:36.380
And there are some smart people that I
know that have elected to do it this way.

104
00:05:39.130 --> 00:05:39.909
I just choose not to.

105
00:05:43.580 --> 00:05:48.460
Okay, so let's open my title.js and

106
00:05:48.460 --> 00:05:54.569
let's go ahead and
rename it to my title.jsx.

107
00:05:59.932 --> 00:06:03.764
&gt;&gt; Brian Holt: The reason that we do this,
it's not going to really change anything.

108
00:06:03.764 --> 00:06:08.550
If you remember in our web pack thick,
we set it up to look for

109
00:06:08.550 --> 00:06:11.730
JS files, so this would work either way.

110
00:06:11.730 --> 00:06:13.960
The reason why I put the X on there is,

111
00:06:13.960 --> 00:06:17.010
to let future Brian and
other developers touching this code.

112
00:06:17.010 --> 00:06:22.290
Know that this file must be transpired or
it is not going to work.

113
00:06:22.290 --> 00:06:26.950
This is not valid JavaScript and
anything that I put .js on,

114
00:06:26.950 --> 00:06:31.490
I myself expect to be
strictly valid JavaScript.

115
00:06:31.490 --> 00:06:33.640
And JSX is not valid JavaScript.

116
00:06:33.640 --> 00:06:38.401
It's valid JSX, which has a path to
become valid JavaScript through Babble.

117
00:06:40.272 --> 00:06:45.112
&gt;&gt; Brian Holt: Okay, so here in render,

118
00:06:45.112 --> 00:06:51.492
instead of doing this right here,

119
00:06:51.492 --> 00:06:59.860
we're going to say div
instead of that okay.

120
00:06:59.860 --> 00:07:04.098
And instead of H1 here going to say

121
00:07:04.098 --> 00:07:09.911
H1
&gt;&gt; Brian Holt: Let's

122
00:07:09.911 --> 00:07:12.305
actually put this on two lines,
becayse I think that'll be a bit clearer.

123
00:07:18.759 --> 00:07:21.857
&gt;&gt; Brian Holt: And we're actually
going to move this into here.

124
00:07:24.967 --> 00:07:26.903
&gt;&gt; Brian Holt: This actually
is not going to be an object.

125
00:07:33.775 --> 00:07:39.362
&gt;&gt; Brian Holt: Okay,
someone here said it feels dirty and

126
00:07:39.362 --> 00:07:43.250
understandably so, right.

127
00:07:44.790 --> 00:07:47.750
But it's pretty magical.

128
00:07:47.750 --> 00:07:48.440
I think it's pretty cool.

129
00:07:49.470 --> 00:07:52.370
Okay, so
we have to do a couple other things here.

130
00:07:52.370 --> 00:07:55.540
So first of all,
if we'd say this.props.title, like this.

131
00:07:55.540 --> 00:07:58.620
It's literally going to put
the string on there this.props.title

132
00:07:58.620 --> 00:08:00.020
which is not what we want, right?

133
00:08:00.020 --> 00:08:04.986
That's not the intention here, so
you need to surround it with curly braces.

134
00:08:04.986 --> 00:08:10.530
Now, why are we putting
in curly braces here?

135
00:08:10.530 --> 00:08:13.930
The reason we're putting curly braces
here is if you said the inside of my

136
00:08:13.930 --> 00:08:17.210
curly braces I'm going to give
you a JavaScript expression.

137
00:08:17.210 --> 00:08:19.660
I want you to evaluate that
JavaScript expression and

138
00:08:19.660 --> 00:08:23.170
put whatever that returns into here.

139
00:08:23.170 --> 00:08:26.860
So for example, if I have like,
you don't have to do this.

140
00:08:26.860 --> 00:08:28.170
I'm just giving an example.

141
00:08:28.170 --> 00:08:36.124
Const stupid FN or
something like that equals function.

142
00:08:36.124 --> 00:08:42.820
Return stupid FN or
something like that right there.

143
00:08:42.820 --> 00:08:45.530
So this is actually like
a real function and so,

144
00:08:45.530 --> 00:08:50.720
if you're I can actually say stupid FN and
call the function.

145
00:08:50.720 --> 00:08:53.250
So, anything that you can do with
a JavaScript script expression can be

146
00:08:53.250 --> 00:08:53.760
put into there.

147
00:08:53.760 --> 00:08:59.310
Or, we can even do this this dot
props title like to uppercase right?

148
00:09:00.430 --> 00:09:00.950
That works too.

149
00:09:00.950 --> 00:09:04.080
Anything that you could put on
the right side of a new assignment like

150
00:09:04.080 --> 00:09:05.230
var x equals blank.

151
00:09:05.230 --> 00:09:06.550
You can put in the here and that's okay.

152
00:09:11.100 --> 00:09:16.690
Okay, so now we've learned that these
these curly braces mean expression or

153
00:09:16.690 --> 00:09:18.480
a word also applies to attributes here.

154
00:09:20.150 --> 00:09:22.370
So we actually have to surround this one,

155
00:09:22.370 --> 00:09:25.470
as well with another set of curly
braces and it's kind of weird.

156
00:09:26.540 --> 00:09:31.220
Let me explain why that is
the outside of a curly.

157
00:09:31.220 --> 00:09:35.130
A set of curly braces means
JavaScript expression, right?

158
00:09:35.130 --> 00:09:39.060
The inner set of curly braces means like
literally just like a normal JavaScript

159
00:09:39.060 --> 00:09:40.110
object, right?

160
00:09:40.110 --> 00:09:43.500
So if this feels better to you,
you can actually copy paste this and say,

161
00:09:43.500 --> 00:09:49.300
style and then here,
say const style = that.

162
00:09:49.300 --> 00:09:53.020
Does that splitting apart feel better for
you?

163
00:09:53.020 --> 00:09:55.580
I don't know,
explain better what's going on there.

164
00:09:56.580 --> 00:09:58.970
Some people get weirded out by
seeing two sets of curly braces and

165
00:09:58.970 --> 00:10:01.310
they think it's a mustache or
something like that and it's not.

166
00:10:01.310 --> 00:10:02.600
It's totally different.

167
00:10:02.600 --> 00:10:04.684
It's literally an object
inside of this expression.

168
00:10:14.710 --> 00:10:16.230
&gt;&gt; Brian Holt: Okay,
any questions about that?

169
00:10:16.230 --> 00:10:19.488
You can get rid of this too.

170
00:10:19.488 --> 00:10:25.529
&gt;&gt; Speaker 2: Can you do ask name
instead of sending down the style

171
00:10:25.529 --> 00:10:31.066
from props to just hardcode like a.

172
00:10:31.066 --> 00:10:33.200
&gt;&gt; Brian Holt: Can you
do like CSS class names?

173
00:10:33.200 --> 00:10:34.710
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Brian Holt: Yeah, absolutely.

174
00:10:34.710 --> 00:10:39.450
And we'll do a lot of that
here in a little bit.

175
00:10:39.450 --> 00:10:41.640
&gt;&gt; Speaker 3: You put a semicolon there.

176
00:10:41.640 --> 00:10:43.290
&gt;&gt; Brian Holt: Did I?
It's going to yell at me.

177
00:10:43.290 --> 00:10:44.360
So, it is force of habit.

178
00:10:44.360 --> 00:10:46.480
I'm still getting used to this.

179
00:10:46.480 --> 00:10:50.480
The other thing is, don't try and
run standard right now.

180
00:10:50.480 --> 00:10:53.512
It's going to barf on you.

181
00:10:53.512 --> 00:10:57.850
[LAUGH] Actually, it should be okay.

182
00:10:57.850 --> 00:11:03.921
It should be okay, but it's going to view
it's not going to lead to your react yet

183
00:11:03.921 --> 00:11:06.710
and we have to configure that later.

184
00:11:07.880 --> 00:11:13.550
&gt;&gt; Speaker 4: Why don't you put
quotes around the style attribute?

185
00:11:13.550 --> 00:11:15.140
&gt;&gt; Brian Holt: Like inside of here or?

186
00:11:15.140 --> 00:11:16.977
&gt;&gt; Speaker 4: Outside of the braces.

187
00:11:16.977 --> 00:11:21.380
&gt;&gt; Brian Holt: So, if you wanted to
literally put in the style, right.

188
00:11:21.380 --> 00:11:28.158
You could actually do that and that's
actually, it might not work for style but

189
00:11:28.158 --> 00:11:34.670
by putting the curly braces
to supplant the quotes right.

190
00:11:34.670 --> 00:11:36.350
So if you're putting in curly braces,

191
00:11:36.350 --> 00:11:41.460
you don't need the quotes and
that's just the way it is.

192
00:11:41.460 --> 00:11:44.370
I don't know there's a good reason for it.

193
00:11:44.370 --> 00:11:49.550
Well the reason for it is, once you're
inside quotes, this doesn't work.

194
00:11:49.550 --> 00:11:53.490
Because it's actually going
to put literally the curly

195
00:11:53.490 --> 00:11:54.930
braces in there, right.

196
00:11:54.930 --> 00:11:58.021
So once it's a string, it says okay, I'm
not going to evaluate anything about this.

197
00:12:03.390 --> 00:12:12.494
&gt;&gt; Brian Holt: Okay, so
any questions about MyTitle,

198
00:12:12.494 --> 00:12:16.520
what we did to it?

199
00:12:16.520 --> 00:12:17.020
Okay.

200
00:12:18.040 --> 00:12:20.560
&gt;&gt; Speaker 3: Asking why are you
using constant instead of R?

201
00:12:21.590 --> 00:12:23.360
&gt;&gt; Brian Holt: I did mean to explain this,
that's a good idea.

202
00:12:24.520 --> 00:12:28.170
We're in ES six wonderful play land now,
right.

203
00:12:28.170 --> 00:12:32.250
So all these can actually
be are constant now.

204
00:12:32.250 --> 00:12:40.360
The reason why use const and
this is up for debate.

205
00:12:40.360 --> 00:12:41.690
So, this is a Brian Holt opinion.

206
00:12:41.690 --> 00:12:44.480
This is not necessarily you must do this.

207
00:12:44.480 --> 00:12:49.820
I use const everywhere and then,
I don't use var at all, anymore, period.

208
00:12:49.820 --> 00:12:53.100
And the reason why I use const and
not necessarily let is,

209
00:12:53.100 --> 00:12:54.750
because I default to const.

210
00:12:54.750 --> 00:12:56.220
Because I'm letting my future self and

211
00:12:56.220 --> 00:13:01.814
other devs know that I don't plan on
changing this right now or ever, right?

212
00:13:01.814 --> 00:13:03.950
And then,the moment that I do need
something that I need to be able to

213
00:13:03.950 --> 00:13:06.950
change, I'll say, let x, right.

214
00:13:06.950 --> 00:13:11.390
And that's letting,
again future self/other people know,

215
00:13:11.390 --> 00:13:17.270
that I have X and I plan on X is going
to mutate sometime down the line.

216
00:13:17.270 --> 00:13:20.654
It's just footnotes for
whoever comes after me.

217
00:13:20.654 --> 00:13:24.718
That make sense?

218
00:13:26.246 --> 00:13:28.740
&gt;&gt; Brian Holt: Okay, cool.

219
00:13:28.740 --> 00:13:32.680
I really like something that
Kyle Simpson says, that code is more for

220
00:13:32.680 --> 00:13:34.644
future developers than it is for
a computer.

221
00:13:34.644 --> 00:13:39.690
You're just annotating what you're
doing by the way that you write code.

222
00:13:39.690 --> 00:13:43.450
And so, any future hints that
you can give to yourself,

223
00:13:43.450 --> 00:13:46.030
like hey, I'm doing this and
I plan to do this.

224
00:13:46.030 --> 00:13:50.060
And I'm setting these limitations
on myself is usually helpful.

225
00:13:50.060 --> 00:13:53.200
And it's funny that I quote
Kyle to promote that idea,

226
00:13:53.200 --> 00:13:55.080
because I know Kyle
doesn't really like const.

227
00:13:55.080 --> 00:13:57.951
[LAUGH] I'm using his own
logic against him, though,

228
00:13:57.951 --> 00:14:02.375
you probably should listen to him,
because he's ten times smarter than I am.

229
00:14:05.454 --> 00:14:07.036
&gt;&gt; Brian Holt: Actually,
empirically speaking,

230
00:14:07.036 --> 00:14:09.390
I believe he's literally ten
times smarter than I am.

