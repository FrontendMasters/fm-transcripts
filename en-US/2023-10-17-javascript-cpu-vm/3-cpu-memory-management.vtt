WEBVTT

1
00:00:00.080 --> 00:00:03.114
So I showed you a very
simple way of adding stuff,

2
00:00:03.114 --> 00:00:08.072
but the ad I showed you was kind of lying
because it fixed the location in memory,

3
00:00:08.072 --> 00:00:11.820
where we basically were adding constants,
right?

4
00:00:11.820 --> 00:00:13.000
And that's not a real thing.

5
00:00:14.470 --> 00:00:15.504
So let's do a more realistic example.

6
00:00:17.858 --> 00:00:22.596
Okay, so a more realistic example
is that we have basically

7
00:00:22.596 --> 00:00:25.640
a program section and a data section.

8
00:00:26.660 --> 00:00:29.314
So in the program section we
have our code does the stuff and

9
00:00:29.314 --> 00:00:31.220
in the data section we just have our data.

10
00:00:31.220 --> 00:00:34.449
This is where we store our local
variables, your objects, etc, right?

11
00:00:36.060 --> 00:00:37.520
Now modern CPUs.

12
00:00:37.520 --> 00:00:42.375
Okay, before we actually go there,
you can imagine that you can easily get

13
00:00:42.375 --> 00:00:46.240
yourself in trouble and
have the CPU start executing data.

14
00:00:46.240 --> 00:00:49.560
And then all kinds of
hell will break loose.

15
00:00:49.560 --> 00:00:51.070
Usually the computer will crash.

16
00:00:51.070 --> 00:00:55.098
But if the code is malicious, maybe I
can manipulate the data to look like

17
00:00:55.098 --> 00:00:59.401
Instructions that do stuff that the CPU
isn't supposed to be doing, right.

18
00:00:59.401 --> 00:01:02.956
And that's basically where
a lot of the exploits come

19
00:01:02.956 --> 00:01:07.617
in which is that you overwrite a buffer
basically the software assumes

20
00:01:07.617 --> 00:01:12.810
that the data is receiving is this big but
you send that that big.

21
00:01:12.810 --> 00:01:17.238
And so, you overwrite the section over
here because the receiving software is not

22
00:01:17.238 --> 00:01:19.280
well guarded against this.

23
00:01:19.280 --> 00:01:19.906
And then,

24
00:01:19.906 --> 00:01:25.340
this thing over here happens to be code
that the program actually that's running.

25
00:01:25.340 --> 00:01:29.670
And by overwriting the program, all of
a sudden you get to control the stuff.

26
00:01:29.670 --> 00:01:33.759
This is how many of the issues happen
around, you send somebody JPEG and

27
00:01:33.759 --> 00:01:35.020
it's executable.

28
00:01:35.020 --> 00:01:37.340
Well, some setting was incorrect.

29
00:01:37.340 --> 00:01:39.690
Things got overwritten when
they weren't supposed to.

30
00:01:39.690 --> 00:01:44.602
The parsing program was not clean enough
in terms of making sure that everything

31
00:01:44.602 --> 00:01:45.900
was correct.

32
00:01:45.900 --> 00:01:49.474
It overwrote stuff that it wasn't supposed
to, and then it executed it later, and

33
00:01:49.474 --> 00:01:50.710
then all hell breaks loose.

34
00:01:52.080 --> 00:01:54.879
So modern CPUs have things
like memory management,

35
00:01:54.879 --> 00:01:58.252
where you separate out see a memory
section and say this you're

36
00:01:58.252 --> 00:02:02.387
allowed to execute, but you're not allowed
to write into it or read on it, or

37
00:02:02.387 --> 00:02:07.130
the only reads that can happen is out
of the program counter, no other way.

38
00:02:07.130 --> 00:02:09.614
You can mark pages as data only,

39
00:02:09.614 --> 00:02:15.090
meaning that you're not allowed
to execute any code in here.

40
00:02:15.090 --> 00:02:19.917
So modern CPUs have this and that helps
certainly with a lot of tricks but

41
00:02:19.917 --> 00:02:22.900
still we see issues all
the time about this.

42
00:02:22.900 --> 00:02:27.181
And this is why low level
languages like C and C++ and

43
00:02:27.181 --> 00:02:33.001
an assembly are kind of dangerous
because they allow you to do anything.

44
00:02:33.001 --> 00:02:36.269
It's their power but
also their downfall and

45
00:02:36.269 --> 00:02:41.171
this is why our rust is becoming
popular is because rust has compiled

46
00:02:41.171 --> 00:02:45.400
some guarantees that the memory
will not be overwritten.

47
00:02:46.850 --> 00:02:51.785
And because of that it's much
more difficult if not I mean I

48
00:02:51.785 --> 00:02:56.621
guess you could say in theory
impossible to get something

49
00:02:56.621 --> 00:03:00.769
wrong in Rust in terms of your exploits,
right.

50
00:03:00.769 --> 00:03:04.420
Whereas it's relatively easy in C.

51
00:03:04.420 --> 00:03:06.270
Again, JavaScript is
also a managed language.

52
00:03:06.270 --> 00:03:07.300
You don't have to worry about memory.

53
00:03:07.300 --> 00:03:11.512
You don't have to worry about overriding
things because the VM hopefully was

54
00:03:11.512 --> 00:03:15.218
written correctly, and
won't allow you to do any of these things.

55
00:03:15.218 --> 00:03:18.150
So we have now a code section and
a data section.

56
00:03:18.150 --> 00:03:22.223
The way this would work is that we have
a special register called an address

57
00:03:22.223 --> 00:03:23.580
register.

58
00:03:23.580 --> 00:03:26.232
And this register we load 13.

59
00:03:26.232 --> 00:03:27.146
What's 13?

60
00:03:27.146 --> 00:03:31.963
Well it's just a location of
this if you start counting

61
00:03:31.963 --> 00:03:35.116
0 1 2 3 4 5 6 7 8 this is 13.

62
00:03:35.116 --> 00:03:38.599
Now you can see how this is a problem like
I'm supposed to remember that's 13 like

63
00:03:38.599 --> 00:03:41.162
that's craziness right so
we'll talk about it in a second.

64
00:03:41.162 --> 00:03:46.995
So that's 13 and here is next instruction.

65
00:03:46.995 --> 00:03:49.388
So this is a second register called AE0.

66
00:03:49.388 --> 00:03:50.566
Again, I'm making these things up.

67
00:03:50.566 --> 00:03:53.384
The actual CPU registers have different
names over the years, whatever,

68
00:03:53.384 --> 00:03:54.330
that's not important.

69
00:03:54.330 --> 00:03:56.460
But fundamentally, they work the same way.

70
00:03:56.460 --> 00:03:57.890
And this is an offset.

71
00:03:57.890 --> 00:04:00.597
So in this particular case,
we're saying, look,

72
00:04:00.597 --> 00:04:04.730
13 is the location where the data is,
and I'm interested in the 0th offset.

73
00:04:04.730 --> 00:04:08.320
So 0 plus 13 is the address
I'm interested in, right?

74
00:04:08.320 --> 00:04:15.122
And from this location,
I'm gonna load the A0 plus AE0 to R0.

75
00:04:15.122 --> 00:04:21.170
So I'm gonna take the value 3 and
move it into the R0 register, right?

76
00:04:21.170 --> 00:04:24.110
Now I'm gonna load a new constant into A0,
which is 1.

77
00:04:24.110 --> 00:04:27.035
And I'm gonna run the same
exact instruction to say,

78
00:04:27.035 --> 00:04:30.486
now fetch the next thing, and
now I'm gonna fetch 5, right?

79
00:04:30.486 --> 00:04:36.283
And now I can do a basic
operation of addition.

80
00:04:36.283 --> 00:04:39.661
And now I have to do the reverse
now I have to load yet

81
00:04:39.661 --> 00:04:44.651
another address where I want to store
something and in this case I'm gonna

82
00:04:44.651 --> 00:04:49.258
say you can now store the R0 to
the address of A0 plus AE0, right?

83
00:04:49.258 --> 00:04:50.400
And now you get the output.

84
00:04:50.400 --> 00:04:53.815
So let's run this.

85
00:04:53.815 --> 00:04:59.132
So if I run this, let's see.

86
00:04:59.132 --> 00:05:03.613
So you can see the memory before,
oops, the memory before we have here,

87
00:05:03.613 --> 00:05:07.357
and you can see that there's a 0 and
5 and a 0 location, and

88
00:05:07.357 --> 00:05:11.046
then after the code was finished running,
there's an 8.

89
00:05:11.046 --> 00:05:15.450
All right, and you can follow along
basically what's happening in here.

90
00:05:15.450 --> 00:05:20.676
And so the simplest possible CPU you
can imagine, basically has two general

91
00:05:20.676 --> 00:05:26.228
purpose registers which will just call
R0 and R1 and has a special address and

92
00:05:26.228 --> 00:05:30.660
address extend or offset register
that you can see over here.

93
00:05:30.660 --> 00:05:35.380
This basically stores like your
base address of something.

94
00:05:35.380 --> 00:05:40.220
And this store is the offset and then you
can do lookups by the base plus offset.

95
00:05:40.220 --> 00:05:44.740
Now if you're looking at this you should
be going, gee, this looks very familiar.

96
00:05:46.110 --> 00:05:48.243
What does it look like?

97
00:05:48.243 --> 00:05:51.059
Does this reminds you of array access?

98
00:05:52.420 --> 00:05:56.648
Where the A0 contains
the pointer to the array and

99
00:05:56.648 --> 00:06:01.858
AE0 contains the offset of
an element in an array.

100
00:06:01.858 --> 00:06:02.621
&gt;&gt; Yeah.

101
00:06:02.621 --> 00:06:04.240
&gt;&gt; Right?

102
00:06:04.240 --> 00:06:08.081
And so, this is why when you talk about
CPUs you have to kind of realize like on

103
00:06:08.081 --> 00:06:11.080
end of the day everything
is just the array access.

104
00:06:11.080 --> 00:06:15.882
So the CPU really deals with
everything as array offsets.

105
00:06:15.882 --> 00:06:22.131
And so we can do basic operations so what
I've shown you is how to load data how

106
00:06:22.131 --> 00:06:28.399
to kind of think about it that the CPUs
have a code section and a Data section.

107
00:06:28.399 --> 00:06:31.708
And so
let's build something more complicated.

108
00:06:31.708 --> 00:06:33.672
Let's go to the next level up.

