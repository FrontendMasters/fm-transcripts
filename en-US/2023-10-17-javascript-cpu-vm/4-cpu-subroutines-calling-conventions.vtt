WEBVTT

1
00:00:00.370 --> 00:00:02.890
Okay, so let's talk about subroutines.

2
00:00:02.890 --> 00:00:04.200
We know why we need functions, right?

3
00:00:04.200 --> 00:00:07.621
Could you imagine writing
code without functions?

4
00:00:07.621 --> 00:00:10.781
Like how you just wanna do stuff over and
over again, and

5
00:00:10.781 --> 00:00:13.080
you need things for doing this, right?

6
00:00:13.080 --> 00:00:16.278
So what's the mechanism for doing it?

7
00:00:16.278 --> 00:00:18.765
So here we're gonna load A1, A0.

8
00:00:18.765 --> 00:00:21.661
So again, we load the data section,
in this case, it's 23.

9
00:00:21.661 --> 00:00:23.424
Notice it's becoming annoying, doesn't it?

10
00:00:23.424 --> 00:00:28.018
If you change the program,
you have to change this number.

11
00:00:28.018 --> 00:00:31.062
This is gonna be a problem and
this is why we have compilers.

12
00:00:31.062 --> 00:00:33.395
This is why nobody writes machine code,
right?

13
00:00:33.395 --> 00:00:36.661
Even the simplest compiler
which is the assembly, and

14
00:00:36.661 --> 00:00:38.720
we'll get through it in a second.

15
00:00:38.720 --> 00:00:43.762
Okay, so let's introduce
the idea of calling a subroutine.

16
00:00:43.762 --> 00:00:48.303
And the reason why we call it a subroutine
not a function is a subroutine is

17
00:00:48.303 --> 00:00:49.803
extremely primitive.

18
00:00:49.803 --> 00:00:52.546
A function has a return value.

19
00:00:52.546 --> 00:00:57.990
A function has a set of parameters.

20
00:00:57.990 --> 00:01:00.661
Subroutines have none of it.

21
00:01:00.661 --> 00:01:04.695
They don't have a return value, they don't
understand the concept of parameters or

22
00:01:04.695 --> 00:01:05.264
anything.

23
00:01:05.264 --> 00:01:08.257
It's just basically move
something somewhere else.

24
00:01:08.257 --> 00:01:13.846
What we're gonna do is we're
gonna load a A0 is, let's see,

25
00:01:13.846 --> 00:01:18.601
23 is the location of the data section,
0 in here.

26
00:01:18.601 --> 00:01:21.912
And then we're gonna call subroutine,
and we need to give it an address.

27
00:01:21.912 --> 00:01:24.661
And so in this case, the address is 19.

28
00:01:24.661 --> 00:01:27.352
And I intentionally aligned this so
this is 10.

29
00:01:27.352 --> 00:01:28.940
So 19 will be the same as 29.

30
00:01:28.940 --> 00:01:29.697
So it will be right here.

31
00:01:29.697 --> 00:01:31.440
This is the instruction that we jump to,
right?

32
00:01:31.440 --> 00:01:37.731
So from here,
the CPU just goes into this instruction.

33
00:01:37.731 --> 00:01:41.148
It performs a bunch of things and
then it will do a return.

34
00:01:41.148 --> 00:01:44.350
And return will give it back
into where it left off.

35
00:01:44.350 --> 00:01:46.499
So it will go back to 16.

36
00:01:46.499 --> 00:01:49.998
And now you're thinking to yourself, wait,
wait, wait, wait, how does this work?

37
00:01:49.998 --> 00:01:54.230
How does the CPU supposed to know
how to go back to some place?

38
00:01:54.230 --> 00:01:57.537
We have to keep information
about that somehow, right?

39
00:01:57.537 --> 00:02:00.779
So let's go to the CPU side and

40
00:02:00.779 --> 00:02:05.334
let's go to go subroutine, where is it?

41
00:02:05.334 --> 00:02:07.583
Here we go, GO_SUB.

42
00:02:07.583 --> 00:02:11.081
So we go and
read the address of where we wanna go.

43
00:02:11.081 --> 00:02:13.213
That's pretty straightforward.

44
00:02:13.213 --> 00:02:18.096
And now we have to do some trickery.

45
00:02:18.096 --> 00:02:22.316
So remember that PC is the address of
the next instruction I'm about to do.

46
00:02:22.316 --> 00:02:26.580
So the PC now gets set to go subroutine.

47
00:02:26.580 --> 00:02:28.590
So that's the address of
where we're supposed to go.

48
00:02:28.590 --> 00:02:31.470
But now we have lost where we used to be.

49
00:02:31.470 --> 00:02:33.990
So how do we know where we come back?

50
00:02:33.990 --> 00:02:37.130
And so we need another special
register called the stack pointer.

51
00:02:37.130 --> 00:02:41.949
And stack pointer stores the current
value of program counter.

52
00:02:41.949 --> 00:02:46.018
So when a return instruction happens,
you do the step in reverse.

53
00:02:46.018 --> 00:02:48.660
You restore the program counter
from the stack pointer.

54
00:02:48.660 --> 00:02:50.273
Notice something interesting.

55
00:02:50.273 --> 00:02:53.162
Where exactly in memory
should the stack pointer be?

56
00:02:55.458 --> 00:02:57.066
Because it's data, right?

57
00:02:57.066 --> 00:03:01.549
And so
a default place is to just initialize

58
00:03:01.549 --> 00:03:05.665
the stack pointer to the end of memory.

59
00:03:05.665 --> 00:03:08.056
And a stack grows from
one end of the memory,

60
00:03:08.056 --> 00:03:10.460
your code is on the other
side of the memory.

61
00:03:10.460 --> 00:03:15.324
The stuff in the middle is your data, and
you really better hope that the data and

62
00:03:15.324 --> 00:03:17.369
the stack pointers don't meet.

63
00:03:17.369 --> 00:03:22.209
Because if they meet, the stack pointer
will overwrite your data and it will keep

64
00:03:22.209 --> 00:03:27.561
overwriting it into your instruction code,
etc and completely mess things up, right?

65
00:03:27.561 --> 00:03:31.945
And these are basically the kind of
crashes you see when you use stuff like C.

66
00:03:31.945 --> 00:03:35.487
Like you're stuck, you got into an
infinite loop, you kept calling yourself.

67
00:03:35.487 --> 00:03:40.550
So the stack pointer just kept on
recording where you were coming from and

68
00:03:40.550 --> 00:03:45.542
eventually it ran off and destroyed
everything inside of your memory.

69
00:03:45.542 --> 00:03:50.430
So when you create this, you need to
leave space for the stack pointer.

70
00:03:50.430 --> 00:03:52.130
And I intentionally didn't leave space.

71
00:03:52.130 --> 00:03:53.922
And in this particular case,
what does this do?

72
00:03:53.922 --> 00:03:56.626
Let's see, this, yes.

73
00:03:56.626 --> 00:03:58.010
&gt;&gt; Is that called a stack overflow?

74
00:03:58.010 --> 00:03:59.323
&gt;&gt; That is called a stack overflow?

75
00:03:59.323 --> 00:04:01.028
Yes, that is exactly what that is.

76
00:04:01.028 --> 00:04:05.501
Stack overflow is when your stack
grows out of what you have allocated.

77
00:04:05.501 --> 00:04:10.880
So typically, the compilers will
allocate certain amount of space.

78
00:04:10.880 --> 00:04:16.034
They think, I don't think you will ever
recurse deeper than x, some number x.

79
00:04:16.034 --> 00:04:17.674
And they allocate that space and

80
00:04:17.674 --> 00:04:21.633
then they all put checks to make sure
that you will never go over that, right?

81
00:04:21.633 --> 00:04:23.511
So a modern CPU will throw a, or

82
00:04:23.511 --> 00:04:28.499
so a modern virtual machine will throw
a nice error saying you've overflown, and

83
00:04:28.499 --> 00:04:33.220
an old one will just overwrite it and
destroy everything else in the process.

84
00:04:33.220 --> 00:04:37.557
&gt;&gt; Does AE0 then have boundaries?

85
00:04:37.557 --> 00:04:39.491
&gt;&gt; No, there's no boundaries in the CPU,
right?

86
00:04:39.491 --> 00:04:42.888
It's up to the compiler
to do the right thing.

87
00:04:42.888 --> 00:04:48.230
There are no boundaries in a sense
that you can do whatever you want,

88
00:04:48.230 --> 00:04:52.745
but modern CPUs have something
called a virtual memory.

89
00:04:52.745 --> 00:04:55.283
I'm showing you a very simplified
CPU because I don't wanna

90
00:04:55.283 --> 00:04:56.387
get things complicated.

91
00:04:56.387 --> 00:05:00.172
But the way it works in reality is
that you have a physical memory and

92
00:05:00.172 --> 00:05:01.736
you have a virtual memory.

93
00:05:01.736 --> 00:05:05.626
And what virtual memory is, is basically
mapping of what's called pages,

94
00:05:05.626 --> 00:05:08.373
a section of memory onto what
you think the memory is.

95
00:05:08.373 --> 00:05:15.367
And then a CPU can run in what
they call levels, kernels, rings?

96
00:05:15.367 --> 00:05:17.107
Rings, I think it's called rings.

97
00:05:17.107 --> 00:05:17.831
I can't remember.

98
00:05:17.831 --> 00:05:22.664
There's special levels
basically where you can run.

99
00:05:22.664 --> 00:05:24.245
And in the ring zero is what
the operating system runs on and

100
00:05:24.245 --> 00:05:25.191
it can access anything anywhere.

101
00:05:25.191 --> 00:05:28.759
But then when it enters
a higher-level ring,

102
00:05:28.759 --> 00:05:34.167
you get to only see the set of memory
that is mapped to its memory space.

103
00:05:34.167 --> 00:05:37.967
And so
when the CPU is in this application mode,

104
00:05:37.967 --> 00:05:41.292
it doesn't get to read anything at once.

105
00:05:41.292 --> 00:05:45.653
On top of that, modern CPUs have
rules encoded inside of it,

106
00:05:45.653 --> 00:05:51.313
which basically mark individual pages
as either execution only or read only.

107
00:05:51.313 --> 00:05:56.450
And that prevents accessing or overriding
things that you're not supposed to.

108
00:05:56.450 --> 00:06:01.619
So there are some checks in modern CPUs,
but that's all modern stuff.

109
00:06:01.619 --> 00:06:06.615
If you go back and
think of the simplest possible thing,

110
00:06:06.615 --> 00:06:11.842
it's just physical memory,
do whatever you want, etc.

111
00:06:11.842 --> 00:06:14.598
Okay, so this subroutine, what does it do?

112
00:06:14.598 --> 00:06:19.890
It looks like it increments
the value of R0.

113
00:06:19.890 --> 00:06:25.337
So, you load things into memory,
into the A0 and R0 values.

114
00:06:25.337 --> 00:06:28.050
So, it's supposed to increment 10,
11, 20, and 40, right?

115
00:06:28.050 --> 00:06:33.632
And so,
what we're doing here is we are into A0.

116
00:06:33.632 --> 00:06:38.755
We are loading the zeroth index of 23,
and then we call go subroutine.

117
00:06:38.755 --> 00:06:41.468
And then we load index 1 and
we go subroutine, and

118
00:06:41.468 --> 00:06:43.352
19, go subroutine, and so on.

119
00:06:43.352 --> 00:06:48.931
And so what we're doing here is we're
just incrementing these values, right?

120
00:06:48.931 --> 00:06:50.058
So let's run this.

121
00:06:53.501 --> 00:06:55.701
And it blew up.

122
00:06:55.701 --> 00:06:57.120
So let's see what happened.

123
00:06:57.120 --> 00:07:00.607
What happened is we have these values 10,
20, 30, 40.

124
00:07:00.607 --> 00:07:05.206
What happened is the stack pointer
started overriding things from the back.

125
00:07:05.206 --> 00:07:09.950
As we called our subroutine,
we messed with the values.

126
00:07:09.950 --> 00:07:16.021
And when we got to value 41, that was
also the value, we incremented 40 to 41,

127
00:07:16.021 --> 00:07:20.998
and then we wrote it back in and
then the subroutine wanted to return.

128
00:07:20.998 --> 00:07:23.120
And it said,
look at the end of the memory.

129
00:07:23.120 --> 00:07:26.540
That's where your thing is, but
then we just overwrote the number.

130
00:07:26.540 --> 00:07:31.150
And so it had to return to a bogus
non-existing state and it blew up, right?

131
00:07:31.150 --> 00:07:36.960
And so the only difference between
this program, which blows up,

132
00:07:36.960 --> 00:07:41.419
and this program that works
is that on the end of it,

133
00:07:41.419 --> 00:07:44.964
I allocated a bunch of 0s for the stack.

134
00:07:44.964 --> 00:07:47.395
And this makes the code work just fine.

135
00:07:47.395 --> 00:07:52.194
So now, if you run this program,
you notice that we started with 10, 20,

136
00:07:52.194 --> 00:07:56.152
30, 40 and then we ended up with 11,
21, 31, 41.

137
00:07:56.152 --> 00:07:58.779
And so the subroutines job
was to increment the value in

138
00:07:58.779 --> 00:07:59.872
a particular memory.

139
00:07:59.872 --> 00:08:03.317
Now, I kind of intentionally made
a nice offset here for you so

140
00:08:03.317 --> 00:08:06.041
you can see when you're
inside of a subroutine.

141
00:08:06.041 --> 00:08:10.736
But you can see how you load,
the 23 goes to the array index, right?

142
00:08:10.736 --> 00:08:16.149
The data section, and
then the GO_SUB makes an assumption.

143
00:08:16.149 --> 00:08:23.169
It makes an assumption that
the thing that is in A0 and

144
00:08:23.169 --> 00:08:28.478
AE0 is the parameters of the function.

145
00:08:28.478 --> 00:08:32.356
And that's one assumption you can do for

146
00:08:32.356 --> 00:08:38.296
communicating data from a call
site to a subroutine, right?

147
00:08:38.296 --> 00:08:40.311
And that's called the calling convention.

148
00:08:40.311 --> 00:08:46.036
In other words, what are the rules
of passing data to a subroutine?

149
00:08:46.036 --> 00:08:46.657
How do I pass it?

150
00:08:46.657 --> 00:08:48.090
Do I pass it in memory?

151
00:08:48.090 --> 00:08:50.316
Do I pass it through registers?

152
00:08:50.316 --> 00:08:54.731
Do I pass it through stack,
which we're not gonna get into here?

153
00:08:54.731 --> 00:08:57.848
How do we pass data to the subroutine,
right?

154
00:08:57.848 --> 00:09:02.707
This is essentially what parameters
are in the modern function, right?

155
00:09:02.707 --> 00:09:04.333
How do we do this?

156
00:09:04.333 --> 00:09:06.839
And so there's not just that,
it's other things.

157
00:09:06.839 --> 00:09:11.815
For example, so if the subroutine runs and
it needs to modify R0 and

158
00:09:11.815 --> 00:09:14.975
R1, is it okay to just clobber the value?

159
00:09:14.975 --> 00:09:19.510
Or is the function that's calling
us going to crash because it

160
00:09:19.510 --> 00:09:23.797
assumed that these things
didn't get modified, right?

161
00:09:23.797 --> 00:09:26.674
So, calling convention
basically sets a rule.

162
00:09:26.674 --> 00:09:29.775
It's a concept that CPU
doesn't understand, but

163
00:09:29.775 --> 00:09:33.317
it's a kind of an agreement
between everybody involved.

164
00:09:33.317 --> 00:09:37.218
That basically says that,
hey, who's responsible for

165
00:09:37.218 --> 00:09:40.721
saving the values of the registers,
so that I can.

166
00:09:40.721 --> 00:09:44.191
Because internally when I'm executing,
I need to have my few registers so

167
00:09:44.191 --> 00:09:45.470
that I can do work, right?

168
00:09:45.470 --> 00:09:48.929
Without registers, I can't do anything
because it's my local thing, right?

169
00:09:48.929 --> 00:09:52.277
So that means when I'm doing my stuff,
I need some registers and

170
00:09:52.277 --> 00:09:56.060
that means that when you called me,
I'm gonna destroy those as I run it.

171
00:09:56.060 --> 00:10:00.002
So who's responsible for
saving the values of these registers?

172
00:10:00.002 --> 00:10:01.412
Is it me?

173
00:10:01.412 --> 00:10:02.546
Is it you?

174
00:10:02.546 --> 00:10:06.694
Is it okay that certain things
are marked as free to destroy?

175
00:10:06.694 --> 00:10:08.057
You have to have an agreement.

176
00:10:08.057 --> 00:10:11.702
And unless you have this agreement between
who's doing the call site and calling,

177
00:10:11.702 --> 00:10:12.546
it doesn't work.

178
00:10:12.546 --> 00:10:15.050
And this is called the calling convention.

179
00:10:15.050 --> 00:10:19.374
Typically, the way this works
is that we put arguments

180
00:10:19.374 --> 00:10:23.049
into registers until we
run out of registers.

181
00:10:23.049 --> 00:10:26.590
And then we put them in a stack.

182
00:10:26.590 --> 00:10:30.873
And then I believe typically
the subroutine is responsible for

183
00:10:30.873 --> 00:10:34.200
making sure that it
doesn't destroy any value.

184
00:10:34.200 --> 00:10:38.476
In other words, if it wants to use
a register, it is responsible for

185
00:10:38.476 --> 00:10:40.509
saving its value than using it.

186
00:10:40.509 --> 00:10:41.939
And before it returns,

187
00:10:41.939 --> 00:10:45.955
it's supposed to restore the value so
that it can return, right?

188
00:10:45.955 --> 00:10:51.619
And you can see how there is
an overhead to calling a function.

189
00:10:51.619 --> 00:10:54.080
The overhead isn't in the jump.

190
00:10:54.080 --> 00:10:58.168
The overhead is in how
do I pass parameters?

191
00:10:58.168 --> 00:11:02.766
And how do I save the kind of the state
of the system so that when I go and

192
00:11:02.766 --> 00:11:07.613
run a different program, it doesn't
destroy the set of registers that

193
00:11:07.613 --> 00:11:11.206
the previous program had and
all hell breaks loose?

194
00:11:13.415 --> 00:11:18.332
And so those are calling conventions and
this is why modern

195
00:11:18.332 --> 00:11:22.959
virtual machines spend a lot
of time inlining things.

196
00:11:22.959 --> 00:11:27.641
Because if you can inline things,
that means you can skip the cost of

197
00:11:27.641 --> 00:11:31.850
who's saving what and
where does things go and etc, right?

198
00:11:31.850 --> 00:11:35.493
And so code inlining is a common problem,

199
00:11:35.493 --> 00:11:40.600
a common feature of modern CPUs and
things go and get done.

