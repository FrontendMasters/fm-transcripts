WEBVTT

1
00:00:00.039 --> 00:00:03.771
VMs do something called inline caching.

2
00:00:03.771 --> 00:00:06.564
To make this thing go faster,
I'll explain all of this in a second.

3
00:00:06.564 --> 00:00:09.584
But first, let's run a benchmark.

4
00:00:09.584 --> 00:00:12.597
The benchmark is that something, and

5
00:00:12.597 --> 00:00:17.602
I'll explain in a second,
the fastest is 30 microseconds.

6
00:00:17.602 --> 00:00:22.699
And as it goes down,
you can see that the slowest operation

7
00:00:22.699 --> 00:00:27.285
is 75 microseconds,
which is 55 times slower.

8
00:00:27.285 --> 00:00:28.055
Is that 55 times?

9
00:00:28.055 --> 00:00:29.044
Yeah, 55.

10
00:00:30.777 --> 00:00:36.110
Yeah, I think so, 55 times slower
than the original operation.

11
00:00:36.110 --> 00:00:37.458
So there's a huge
difference in performance.

12
00:00:37.458 --> 00:00:40.250
Okay, so
let's dive into this particular test.

13
00:00:40.250 --> 00:00:41.415
What is this test doing?

14
00:00:43.319 --> 00:00:46.158
Okay, I'm gonna create bunch of arrays.

15
00:00:46.158 --> 00:00:48.229
You can see array1, 2, 3,
4, 5, all the way to 10.

16
00:00:48.229 --> 00:00:52.723
All of these arrays get
filled with objects.

17
00:00:52.723 --> 00:00:56.211
All of these objects have
a property called value 0.

18
00:00:56.211 --> 00:01:01.189
And the benchmarks,
all it does is it iterates over the items

19
00:01:01.189 --> 00:01:04.909
in the array and
adds the value to it, right?

20
00:01:04.909 --> 00:01:08.522
So it takes the value property and
increments the sum, and

21
00:01:08.522 --> 00:01:12.150
it does that for
every single one of these arrays, right?

22
00:01:12.150 --> 00:01:16.470
So we start with an array
of 10,000 objects.

23
00:01:16.470 --> 00:01:19.276
All arrays have 10,000 objects.

24
00:01:19.276 --> 00:01:22.653
All objects have a value property,

25
00:01:22.653 --> 00:01:27.607
all of them try to sum up
all these value properties,

26
00:01:27.607 --> 00:01:31.885
and yet
somehow this first array runs fast and

27
00:01:31.885 --> 00:01:35.392
this last array runs horribly slow.

28
00:01:35.392 --> 00:01:38.936
What is going on under the hood?

29
00:01:38.936 --> 00:01:41.592
That's the question that
we should be asking, right?

30
00:01:41.592 --> 00:01:42.316
Okay, so

31
00:01:42.316 --> 00:01:48.289
the kind of objects that I have put inside
of this array are not the same, okay?

32
00:01:48.289 --> 00:01:54.448
So the array1 will contain an object
that contains value and a prop_0.

33
00:01:54.448 --> 00:01:56.426
And the next object is gonna be value and
prop_0, and

34
00:01:56.426 --> 00:01:59.619
the next one's gonna be value and prop_0,
value, prop_0, and so on and so forth.

35
00:01:59.619 --> 00:02:00.678
10,000 of them, right?

36
00:02:00.678 --> 00:02:05.092
So you can see that all of these
objects have the same shape.

37
00:02:06.510 --> 00:02:12.410
In the next array, so this one here means
this contains an array of one shape.

38
00:02:12.410 --> 00:02:17.108
array2 will contain two shapes,
it's gonna contain a value, prop_0, but

39
00:02:17.108 --> 00:02:19.150
also contain a value, prop_1.

40
00:02:19.150 --> 00:02:23.058
And then goes back to value,
prop_0, value, prop_1.

41
00:02:23.058 --> 00:02:29.634
The third one will contain prop_0, prop_1,
prop_2, go back to 0, 1, 2 3, 0, 1, 2, 3.

42
00:02:29.634 --> 00:02:32.932
The fourth one, you can imagine,
will be 1, 2 3, 0, 1 2 3, 0,

43
00:02:32.932 --> 00:02:34.795
1 2 3, and so on and so forth, right?

44
00:02:34.795 --> 00:02:39.781
So this number here really talks
about how many different shapes

45
00:02:39.781 --> 00:02:42.192
of objects have I put in there.

46
00:02:42.192 --> 00:02:48.526
And the way I do that is that I create
the value and I say, give me uniqueName.

47
00:02:48.526 --> 00:02:52.515
And this uniqueName just gives me
a prop_0, and it's the shapesCount, right?

48
00:02:52.515 --> 00:02:55.486
So I do a modular shape count.

49
00:02:55.486 --> 00:03:01.664
So you can see how all I've done is
I created bunch of arrays that have,

50
00:03:01.664 --> 00:03:05.226
they all have value 0, But

51
00:03:05.226 --> 00:03:09.532
they are all different
shapes of the system, okay?

52
00:03:09.532 --> 00:03:13.546
So then the question becomes,
why should this matter here?

53
00:03:13.546 --> 00:03:17.362
Why should the shapes have such
a significant impact in terms of

54
00:03:17.362 --> 00:03:18.298
performance?

55
00:03:18.298 --> 00:03:23.376
And it's not just a significant impact,
if you look at this graph,

56
00:03:23.376 --> 00:03:29.449
notice 1, 2, 3, 4, about the same,
and something happens at 5, right?

57
00:03:29.449 --> 00:03:34.001
You just see that, 1,
it's like we're getting slower bit, bit,

58
00:03:34.001 --> 00:03:35.504
bit, bam, big jump.

59
00:03:35.504 --> 00:03:40.444
And now, we're reasonably slow,
reasonably slow, reasonably slow,

60
00:03:40.444 --> 00:03:42.444
and then big jump right here.

61
00:03:42.444 --> 00:03:43.978
What just happened?

62
00:03:43.978 --> 00:03:44.878
What's going on in here?

63
00:03:47.583 --> 00:03:52.583
And so let's kind of dwell deeper
into this particular thing.

64
00:03:52.583 --> 00:03:55.789
So let's talk about inline caches.

65
00:03:55.789 --> 00:04:01.730
Okay, So let's go back into
our particular case, right?

66
00:04:01.730 --> 00:04:06.420
We have our person, which has two
properties, name and age, and so

67
00:04:06.420 --> 00:04:08.163
we wanna print this out.

68
00:04:08.163 --> 00:04:09.740
Pretty straightforward, right?

69
00:04:09.740 --> 00:04:11.814
Do you have a question?

70
00:04:11.814 --> 00:04:13.072
&gt;&gt; No.
&gt;&gt; Okay, so

71
00:04:13.072 --> 00:04:17.752
what's actually happening underneath?

72
00:04:17.752 --> 00:04:22.214
What's happening underneath is
that this person here, right,

73
00:04:22.214 --> 00:04:27.826
gets converted into a hidden class 0,
which contains, as I said, name and age.

74
00:04:27.826 --> 00:04:31.910
And then the actual person
which contains the values,

75
00:04:31.910 --> 00:04:34.403
as you can see over here, right?

76
00:04:34.403 --> 00:04:39.152
And so when we wanna then do
the console.log of person_name,

77
00:04:39.152 --> 00:04:43.733
age is whatever, the VM has to
get a hold of the hidden class.

78
00:04:43.733 --> 00:04:50.174
It has to then look up the index
of name and index of age.

79
00:04:50.174 --> 00:04:52.903
And then it can perform the operation,
right?

80
00:04:52.903 --> 00:04:54.693
And so
the index lookup happens right here.

81
00:04:59.019 --> 00:04:59.565
Make sense?

82
00:04:59.565 --> 00:05:01.976
Okay, so that's kind of to set the stage.

83
00:05:01.976 --> 00:05:03.775
Now, let's introduce inline caches.

84
00:05:03.775 --> 00:05:07.064
So what happens when we have
two different objects and

85
00:05:07.064 --> 00:05:10.219
we're running inside of a loop like this,
right?

86
00:05:10.219 --> 00:05:13.509
And then we're basically trying to
figure out the Average age, right?

87
00:05:13.509 --> 00:05:15.495
So we're just summing up the ages and
we figure this out.

88
00:05:15.495 --> 00:05:17.109
So what's happening in here?

89
00:05:19.409 --> 00:05:24.007
So what's happening in here is that we
need to go and look up the hidden class.

90
00:05:24.007 --> 00:05:29.054
We're inside of this loop, and
this person_age right here basically

91
00:05:29.054 --> 00:05:35.041
says give me the person in the array, then
I'm gonna be looking up the hidden class.

92
00:05:35.041 --> 00:05:41.596
Then I am going to get the index of
the hidden class and add it over here.

93
00:05:41.596 --> 00:05:44.522
Now, the thing you should be
thinking to yourself is wait,

94
00:05:44.522 --> 00:05:48.516
we all know that the hidden classes are
the same, but how will the compiler know?

95
00:05:48.516 --> 00:05:53.058
Can the compiler observe somehow the fact
that it's always the same hidden class

96
00:05:53.058 --> 00:05:54.606
going through the system?

97
00:05:54.606 --> 00:05:56.251
And can it use that to its advantage?

98
00:05:56.251 --> 00:06:00.130
And the answer is yes,
the compiler can observe this.

99
00:06:00.130 --> 00:06:04.968
And so, sorry, before we jump there,
I just wanna show is that here we

100
00:06:04.968 --> 00:06:09.406
have a situation where we have
three different hidden classes.

101
00:06:09.406 --> 00:06:13.234
Because one has an extra
thing called the school and

102
00:06:13.234 --> 00:06:17.965
one has the properties written
in the opposite order, right?

103
00:06:17.965 --> 00:06:20.615
So we have three different
situations in here.

104
00:06:22.731 --> 00:06:27.319
So this code will still work just fine
because we're looking this up every

105
00:06:27.319 --> 00:06:28.210
single time.

106
00:06:28.210 --> 00:06:31.464
And because we're doing a lookup every
single time, there is no problem.

107
00:06:31.464 --> 00:06:35.051
The fact that the shapes are megamorphic,
right, there are different shapes,

108
00:06:35.051 --> 00:06:38.284
isn't the problem because the system
can just work as you would expect.

109
00:06:38.284 --> 00:06:39.421
Make sense?

110
00:06:39.421 --> 00:06:42.720
Okay, so let's introduce an inline cache.

111
00:06:42.720 --> 00:06:46.018
And the inline cache works
something like this.

112
00:06:46.018 --> 00:06:51.136
After the compiler runs this code for
a while, it basically notices that,

113
00:06:51.136 --> 00:06:55.294
hey, I keep seeing HC_0 all the time,
HC_1 and HC_2.

114
00:06:55.294 --> 00:07:03.087
And so what I know from experience is that
if I see HC_0, the property is at index 2.

115
00:07:03.087 --> 00:07:05.333
If I see HC_1, it's also on index 2.

116
00:07:05.333 --> 00:07:09.909
If I see HC_2,
the property is on index 1, okay?

117
00:07:09.909 --> 00:07:13.923
Otherwise, I give up, just go look it up.

118
00:07:13.923 --> 00:07:19.899
And it turns out that the compilers are
willing to do this up to four times, okay?

119
00:07:19.899 --> 00:07:22.373
All of a sudden, this should make sense.

120
00:07:22.373 --> 00:07:25.250
I know what's happening here.

121
00:07:25.250 --> 00:07:28.700
The reason why up to four they're
relatively the same speed is because

122
00:07:28.700 --> 00:07:31.987
the inline check, right,
the inline comparison is super cheap.

123
00:07:31.987 --> 00:07:36.181
Because to see if two numbers
are the same, you just subtract them and

124
00:07:36.181 --> 00:07:37.784
see if you get 0, right?

125
00:07:37.784 --> 00:07:40.298
CPUs are really good at that.

126
00:07:40.298 --> 00:07:43.688
So you have an address of this thing, and
you have an address of what you expect,

127
00:07:43.688 --> 00:07:45.575
you subtract the numbers, and you get a 0.

128
00:07:45.575 --> 00:07:49.546
You know that the answer is 3, because
over the time, you've seen the code run.

129
00:07:49.546 --> 00:07:52.971
And you've seen that this property
gets read over and over again, and

130
00:07:52.971 --> 00:07:55.894
you've seen this particular
shape of the object, right?

131
00:07:55.894 --> 00:08:00.402
So you can see that up to four times,
the things go fast.

132
00:08:00.402 --> 00:08:06.844
The fifth time, it becomes slow because it
has to call this other index of function.

133
00:08:06.844 --> 00:08:08.451
So that explains this step over here.

134
00:08:08.451 --> 00:08:12.555
What's up with this step over here, right?

135
00:08:12.555 --> 00:08:15.007
There's a huge difference in performance
between 10,000 and then 100,000.

136
00:08:15.007 --> 00:08:18.940
What's going on in there?

137
00:08:18.940 --> 00:08:21.347
Sorry, 1,000 and 10,000.

138
00:08:21.347 --> 00:08:26.697
Well, I said the actual implementation
is a little more complicated.

139
00:08:26.697 --> 00:08:31.221
And so the place where this breaks down
is this indexOf is not a linear search.

140
00:08:31.221 --> 00:08:37.467
Instead, it's more like a hash map lookup,
but even that is oversimplification.

141
00:08:37.467 --> 00:08:43.457
What it actually is, is that you
write the word age as a string.

142
00:08:43.457 --> 00:08:49.112
But during the initial parsing, all of
these things got converted into numbers.

143
00:08:49.112 --> 00:08:54.810
Somewhere, there is a map that
says age property is actually 37.

144
00:08:54.810 --> 00:08:58.352
So from now on, I'm just only gonna
talk about 37, forget the age.

145
00:08:58.352 --> 00:09:00.925
Age doesn't exist, right?

146
00:09:00.925 --> 00:09:06.588
And so the thing you wanna know is,
at which location is property 37 at?

147
00:09:06.588 --> 00:09:09.724
And because you're comparing just
numbers rather than strings,

148
00:09:09.724 --> 00:09:11.574
the problem gets a lot better, right?

149
00:09:11.574 --> 00:09:15.476
Because number comparisons are way
cheaper than string comparisons.

150
00:09:15.476 --> 00:09:19.292
So now you go in and
you actually have two levels of cache.

151
00:09:19.292 --> 00:09:25.161
One level of cache,
which is like a table look-aside buffer.

152
00:09:25.161 --> 00:09:32.492
Sorry, what that means is imagine
you have a table of 1024 entries.

153
00:09:32.492 --> 00:09:40.188
You can take your age and
use it as an index into that 1024 entries.

154
00:09:40.188 --> 00:09:45.810
If you happen to have a number that's
bigger than 1024, then you just module it,

155
00:09:45.810 --> 00:09:49.803
and you get it into a number
that's between 0 and 1024.

156
00:09:49.803 --> 00:09:55.998
And now, inside of that, it's essentially
a hash map, you get a location and memory.

157
00:09:55.998 --> 00:09:58.767
You read that location in the memory,
and you get two numbers.

158
00:09:58.767 --> 00:10:03.618
One is a hidden class and the other
one is the answer you're looking for.

159
00:10:03.618 --> 00:10:07.278
And if the hidden class number is the one
that you happen to be looking up,

160
00:10:07.278 --> 00:10:09.571
then the answer is 3,
and you can continue.

161
00:10:09.571 --> 00:10:14.793
And this is the reason why this is
relatively efficient, because it's

162
00:10:14.793 --> 00:10:20.638
couple of more comparisons in kind of
secondary cache, and everything works.

163
00:10:20.638 --> 00:10:23.706
But this cache is 1024 entries long.

164
00:10:23.706 --> 00:10:29.344
And so if you create more than 1000
entries, now you busted that cache, and

165
00:10:29.344 --> 00:10:34.836
now the VM is completely lost and says,
sorry, I gotta do the expensive bit.

166
00:10:34.836 --> 00:10:40.816
And the expensive bit is go into
the hidden class data structure,

167
00:10:40.816 --> 00:10:44.959
and look around,
see which one is the index.

168
00:10:44.959 --> 00:10:48.826
Go find it and figure out what the
property happens to be, and then go and

169
00:10:48.826 --> 00:10:49.476
return it.

170
00:10:51.211 --> 00:10:55.700
And this is a perfect place to get
yourself shot in microbenchmarks.

171
00:10:55.700 --> 00:10:57.561
Because in microbenchmarks,

172
00:10:57.561 --> 00:11:02.646
you wanna show somebody look how fast my
function is processing something, right?

173
00:11:02.646 --> 00:11:03.780
What do you do?

174
00:11:03.780 --> 00:11:05.807
You create bogus data, and

175
00:11:05.807 --> 00:11:11.458
chances are very good that bogus data
is gonna be all the same shape, right?

176
00:11:11.458 --> 00:11:16.372
The system runs through it, and
the V8 looks at it and says, look at this.

177
00:11:16.372 --> 00:11:20.807
All of these things are the same
performance, same numbers,

178
00:11:20.807 --> 00:11:24.400
etc., therefore,
I know what the answers are.

179
00:11:24.400 --> 00:11:25.450
Your hands is up, no?

180
00:11:25.450 --> 00:11:26.210
&gt;&gt; Yeah.

181
00:11:26.210 --> 00:11:28.797
&gt;&gt; Yes.
&gt;&gt; Does the compiler update

182
00:11:28.797 --> 00:11:32.794
the person_HC hash lookup on demand?

183
00:11:36.078 --> 00:11:40.606
&gt;&gt; So the hidden class gets
updated whenever a write could

184
00:11:40.606 --> 00:11:44.455
possibly result in a change of shape,
right?

185
00:11:44.455 --> 00:11:49.542
Let's go back to here.

186
00:11:49.542 --> 00:11:53.846
So if I have a person and I write into
the name, no shape has changed, right,

187
00:11:53.846 --> 00:11:55.879
because it already contains name.

188
00:11:55.879 --> 00:12:01.397
But if I go in right now school,
then school is a new property.

189
00:12:01.397 --> 00:12:07.781
And so what now happens is that you now
have to allocate more space to the object,

190
00:12:07.781 --> 00:12:13.805
and then you change the hiddenClassId
to have a different data structure.

191
00:12:13.805 --> 00:12:19.635
Now, that explains the fact, this one
also contain the extra information.

192
00:12:19.635 --> 00:12:22.993
And then by the way,
notice a particular problem.

193
00:12:22.993 --> 00:12:25.565
You can write into objects
at any point in time,

194
00:12:25.565 --> 00:12:29.307
which means you can extend their set
of properties any point in time.

195
00:12:29.307 --> 00:12:34.606
This creates a problem, because
where exactly are you gonna put it?

196
00:12:34.606 --> 00:12:40.182
When VM originally allocated the object,
it allocated a certain size to it.

197
00:12:40.182 --> 00:12:45.424
And so now where do I put it
if you add it later on, right?

198
00:12:45.424 --> 00:12:49.236
And so with arrays,
array added a level of indirection.

199
00:12:49.236 --> 00:12:51.341
We don't have a level of indirection here.

200
00:12:51.341 --> 00:12:54.551
Instead, there is a special
location called an expander,

201
00:12:54.551 --> 00:12:58.027
where additional properties can
be attached and grow forever.

202
00:12:58.027 --> 00:13:02.498
And this is another reason why you wanna
make sure that your property is on

203
00:13:02.498 --> 00:13:05.372
the main object,
not on the expander object.

204
00:13:05.372 --> 00:13:10.335
Because you wanna make sure that it's
a direct kind of a read kind of a thing,

205
00:13:10.335 --> 00:13:10.892
right?

206
00:13:10.892 --> 00:13:16.272
So this is another reason why you wanna
preallocate all of the properties ahead of

207
00:13:16.272 --> 00:13:21.511
time so that the hidden class is fixed and
no later do you actually go and use it.

208
00:13:21.511 --> 00:13:26.932
Nice trick that sometimes people see
do is after the object's allocated,

209
00:13:26.932 --> 00:13:30.814
they freeze it so
that you can't add new properties.

210
00:13:30.814 --> 00:13:33.442
Sorry, there's freeze and seal, so
you wanna seal the object, I think.

211
00:13:33.442 --> 00:13:35.483
Freeze means you can't
change the properties,

212
00:13:35.483 --> 00:13:37.282
seal means you can't add the properties.

213
00:13:37.282 --> 00:13:41.123
So you wanna seal it so
that new properties cannot be added.

214
00:13:41.123 --> 00:13:45.854
And then in production, you don't seal it
cuz it's extra code that you don't need.

215
00:13:45.854 --> 00:13:48.339
&gt;&gt; So to go back to the benchmark,

216
00:13:48.339 --> 00:13:52.355
where you had the different
objects in the array,

217
00:13:52.355 --> 00:13:58.390
there's just a bunch of undefines on
the objects where there's no value.

218
00:13:58.390 --> 00:13:59.162
&gt;&gt; That's fine.

219
00:13:59.162 --> 00:14:02.419
&gt;&gt; It will increase the performance for
this.

220
00:14:02.419 --> 00:14:06.042
&gt;&gt; Sorry, undefine's where?

221
00:14:06.042 --> 00:14:09.712
It's not about the value that's over here,

222
00:14:09.712 --> 00:14:14.356
it's about the fact that
the property name is changing.

223
00:14:14.356 --> 00:14:19.069
It's about the fact that this one is value
and prop_0, but this one is value and

224
00:14:19.069 --> 00:14:19.775
prop_1.

225
00:14:19.775 --> 00:14:21.129
Now, there's two of them in there.

226
00:14:21.129 --> 00:14:28.449
&gt;&gt; Yeah, so if you made each of those
objects instead of only having one prop.

227
00:14:28.449 --> 00:14:32.541
&gt;&gt; If I made all of the objects have
prop_0, prop_1, prop through all the way

228
00:14:32.541 --> 00:14:36.387
through 10,000 across,
then it would be fine, it would run fast.

229
00:14:36.387 --> 00:14:38.399
Yes, because then it
would be the same shape.

230
00:14:38.399 --> 00:14:43.167
&gt;&gt; Yeah, well, that was great.

231
00:14:43.167 --> 00:14:48.500
&gt;&gt; Right, and so the thing to kinda
think about for yourself is like, hey,

232
00:14:48.500 --> 00:14:54.359
when I look at my code, again, you as a
human had more knowledge, is the shape of

233
00:14:54.359 --> 00:14:59.369
the object going underneath here
always gonna be the same, right?

234
00:14:59.369 --> 00:15:04.866
This value read right here,
is my shape gonna be always the same?

235
00:15:04.866 --> 00:15:06.574
And if the answer for you is, no,

236
00:15:06.574 --> 00:15:10.490
it's always a different kind of shape
of an object, then this is a problem.

237
00:15:10.490 --> 00:15:13.701
It's gonna have a negative
impact in terms of performance.

238
00:15:13.701 --> 00:15:16.166
Objects have always different shape.

239
00:15:16.166 --> 00:15:17.883
Does that sound familiar to JSX?

240
00:15:19.850 --> 00:15:22.016
JSX have props, right,
that are your properties, and

241
00:15:22.016 --> 00:15:23.318
it's always a different shape.

242
00:15:23.318 --> 00:15:29.146
So JSX is actually the worst
possible way of structuring

243
00:15:29.146 --> 00:15:35.601
your data because it wreaks havoc
on the actual code running.

244
00:15:35.601 --> 00:15:38.707
And it has the worst property that
if you create a microbenchmark,

245
00:15:38.707 --> 00:15:42.203
if you're not careful and you don't
create sufficient amount of shapes,

246
00:15:42.203 --> 00:15:44.217
the microbenchmarks go through the roof.

247
00:15:44.217 --> 00:15:46.103
They're like, look how fast I am.

248
00:15:46.103 --> 00:15:49.503
And then in reality,
things don't go so fast, right?

249
00:15:49.503 --> 00:15:54.268
The other thing to kind of point out
is that the other place you can get

250
00:15:54.268 --> 00:15:56.282
yourself confused is here.

251
00:15:56.282 --> 00:16:00.111
This is inline cache, these first four
copies, right, which is why they're fast.

252
00:16:00.111 --> 00:16:03.778
The second one, you're like,
but that's not so

253
00:16:03.778 --> 00:16:07.541
bad because I have 1024 different shapes,
right?

254
00:16:07.541 --> 00:16:10.262
But in the real world,
you don't just run your code,

255
00:16:10.262 --> 00:16:13.605
you run your code and the framework
code and all this other stuff.

256
00:16:13.605 --> 00:16:16.593
And so in the benchmark,
the contention for

257
00:16:16.593 --> 00:16:21.136
that cache is very low because
it's just your benchmark running.

258
00:16:21.136 --> 00:16:25.784
In real world, the contention for
that cache is much, much higher.

259
00:16:25.784 --> 00:16:27.690
Because when you run the framework,

260
00:16:27.690 --> 00:16:31.579
the framework is pushing all kinds of
stuff into the cache inadvertently.

261
00:16:31.579 --> 00:16:32.723
Then you run the JSX code,

262
00:16:32.723 --> 00:16:35.791
that's pushing a whole bunch of
stuff into the cache inadvertently.

263
00:16:35.791 --> 00:16:38.580
And now, you realize your
performance suffers even more.

264
00:16:38.580 --> 00:16:42.354
So these numbers right here,
the middle numbers,

265
00:16:42.354 --> 00:16:46.752
the 45 to 50,
that is a very optimistic benchmark lie.

266
00:16:46.752 --> 00:16:51.255
In real world, I would expect
these numbers to be a lot worse,

267
00:16:51.255 --> 00:16:56.035
because these numbers only apply
if there is a cache hit, right?

268
00:16:56.035 --> 00:16:59.349
And the reason why there's cache hits
here is because all we're doing is

269
00:16:59.349 --> 00:17:02.350
a tight loop that just goes over
these shapes over and over again.

270
00:17:02.350 --> 00:17:04.607
Of course, there's no other reads,
of course,

271
00:17:04.607 --> 00:17:07.690
there's gonna be no other cash misses,
not true in the real world.

272
00:17:10.017 --> 00:17:14.853
Okay, so we, again,
ran this through the optimizer, and so

273
00:17:14.853 --> 00:17:19.790
we asked the benchmark to produce
all this extra information.

274
00:17:19.790 --> 00:17:24.481
So we can go into our code here, And

275
00:17:24.481 --> 00:17:27.905
we can ask for the inline-cache.log.

276
00:17:30.864 --> 00:17:32.822
It's gonna chug on it for a while.

277
00:17:36.402 --> 00:17:39.198
How long did the program run for?

278
00:17:39.198 --> 00:17:40.809
For a while.

279
00:17:43.340 --> 00:17:44.741
That joke was not long enough.

280
00:17:44.741 --> 00:17:50.639
[LAUGH]
&gt;&gt; What kinda computer syncs the best?

281
00:17:50.639 --> 00:17:52.034
&gt;&gt; What kinda computer syncs the best?

282
00:17:52.034 --> 00:17:53.717
&gt;&gt; A Dell?

283
00:17:53.717 --> 00:17:57.639
&gt;&gt; Syncs.
[LAUGH]

284
00:17:57.639 --> 00:17:59.016
&gt;&gt; There's a question.

285
00:17:59.016 --> 00:18:06.175
So large object with over 124 props
can't hash and cache properly?

286
00:18:06.175 --> 00:18:09.461
&gt;&gt; Sorry, first of all,
the cache is 1024 in V8.

287
00:18:09.461 --> 00:18:14.979
Different VMs can have different caches.

288
00:18:14.979 --> 00:18:19.232
Typically, the objects will
go into inline caches so

289
00:18:19.232 --> 00:18:22.836
they don't affect the intermediary cache.

290
00:18:22.836 --> 00:18:28.021
Only the objects that don't have inline
caches, and you do actually read all

291
00:18:28.021 --> 00:18:33.712
these extra properties, only then would
you put pressure on your secondary cache.

292
00:18:33.712 --> 00:18:38.008
And yes, if you had an object that
had over 1024 properties, and

293
00:18:38.008 --> 00:18:42.970
you try to read them all, then you would
basically bust through that cache, and

294
00:18:42.970 --> 00:18:45.140
you would end up in the slow world.

