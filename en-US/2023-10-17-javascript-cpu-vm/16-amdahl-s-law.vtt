WEBVTT

1
00:00:00.150 --> 00:00:04.147
Really I just wanted to talk to you about
one last thing called Amdahl's law,

2
00:00:04.147 --> 00:00:06.130
which is a super, super quick thing.

3
00:00:06.130 --> 00:00:10.375
And it's even funny that it's a law or
it has a name because it's so obvious,

4
00:00:10.375 --> 00:00:11.235
it just hurts.

5
00:00:11.235 --> 00:00:14.703
Which is that,
imagine you have an application, right?

6
00:00:14.703 --> 00:00:18.913
And you have some piece of code that's
hot that you wanna optimize, right?

7
00:00:18.913 --> 00:00:23.032
But that piece of code
only is 5% of the time, so

8
00:00:23.032 --> 00:00:27.155
if you make it amazing ten times faster,
right?

9
00:00:27.155 --> 00:00:30.718
Which means instead of 5%, now it is
half a percent, so you saved four and

10
00:00:30.718 --> 00:00:34.241
a half percent and now your code is
four and a half percent faster, right?

11
00:00:34.241 --> 00:00:39.885
So this thing talks about is that, you
can get amazing performance improvements

12
00:00:39.885 --> 00:00:45.203
over small code, but it really matters
how it is in the big picture, right?

13
00:00:45.203 --> 00:00:48.193
And if the big picture of that
code isn't used very often,

14
00:00:48.193 --> 00:00:52.174
then you're not gonna see a huge
performance improvement overall, right?

15
00:00:52.174 --> 00:00:57.153
So for example, we talked about how JSX
could be like orders of magnitude faster

16
00:00:57.153 --> 00:00:59.470
in terms of running and doing stuff.

17
00:00:59.470 --> 00:01:03.845
And it's true, but overall that
piece of code represents maybe 2, 3,

18
00:01:03.845 --> 00:01:07.387
4% of the overall execution
of the application, right?

19
00:01:07.387 --> 00:01:11.055
So even if you can make that zero,
overall you've only

20
00:01:11.055 --> 00:01:15.922
improved the application speed by
a couple of percentage points, and so

21
00:01:15.922 --> 00:01:18.900
that may not be worth
the work that you need.

22
00:01:18.900 --> 00:01:22.400
Anyways, Amdahl's law is mostly used in
kind of the hardware design, etc., but

23
00:01:22.400 --> 00:01:23.803
I think it's appropriate here.

24
00:01:23.803 --> 00:01:27.319
And I kind of just wanted to put
things in perspective that like, hey,

25
00:01:27.319 --> 00:01:30.673
don't just go optimizing everything
all the time crazy, right?

26
00:01:30.673 --> 00:01:35.541
Because fundamentally,
you write code for yourself first.

27
00:01:35.541 --> 00:01:37.998
It's only secondary and
incidental for the computer.

28
00:01:37.998 --> 00:01:42.664
The computer can execute the craziest,
ugliest code you have, just as fine,

29
00:01:42.664 --> 00:01:44.297
it does not get a headache.

30
00:01:44.297 --> 00:01:46.816
I will get a headache trying
to read the crazy code, right?

31
00:01:46.816 --> 00:01:52.464
So we write code for us first, make it
pretty so that future self will thank you.

32
00:01:52.464 --> 00:01:56.067
The fact that sometimes we come across
code that really needs to be optimized and

33
00:01:56.067 --> 00:01:58.670
these tricks matter, then yeah,
sure, we can do that.

34
00:01:58.670 --> 00:02:02.701
And sometimes, for example,
some things are just good idea,

35
00:02:02.701 --> 00:02:05.670
like using triple equals
over double equals,

36
00:02:05.670 --> 00:02:09.797
it's hard to argue that using
double equals is better, right?

37
00:02:09.797 --> 00:02:11.545
So just use it cuz it's just easier.

38
00:02:11.545 --> 00:02:15.733
It doesn't make it any harder to read
what's going on or understand etc.

39
00:02:15.733 --> 00:02:18.434
I can also make a pretty good
argument that like, hey,

40
00:02:18.434 --> 00:02:22.491
initialize all of your properties at the
beginning because it just makes it easier

41
00:02:22.491 --> 00:02:24.872
to understand what's
happening in your code.

42
00:02:24.872 --> 00:02:28.684
And it just so also happens to make the
code run faster because the inline caches

43
00:02:28.684 --> 00:02:31.541
and hidden classes that we talked about,
etc., right?

44
00:02:31.541 --> 00:02:36.085
So I would say, primarily, do these
things because they're a good idea for

45
00:02:36.085 --> 00:02:39.282
you as a human and
only later do them for the computer.

46
00:02:39.282 --> 00:02:44.086
Most things I've shown you were really, I
wanted to show you not necessarily tricks

47
00:02:44.086 --> 00:02:48.498
to kind of hack the system, but more I
wanted to show you how the system works.

48
00:02:48.498 --> 00:02:52.319
How the machine underneath and
the virtual machine on the top,

49
00:02:52.319 --> 00:02:57.386
how they talk to each other and how they
create this illusion of having JavaScript.

50
00:02:57.386 --> 00:02:58.831
Because it is an illusion, right?

51
00:02:58.831 --> 00:02:59.488
At end of the day.

52
00:02:59.488 --> 00:03:02.790
It doesn't exist, the hardware doesn't
know how to execute JavaScript.

53
00:03:02.790 --> 00:03:08.327
And so we go through these layers of
trickery that we create this illusion

54
00:03:08.327 --> 00:03:13.431
that we have JavaScript for us,
running inside of the modern CPU.

