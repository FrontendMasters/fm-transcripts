WEBVTT

1
00:00:00.130 --> 00:00:03.817
If you load this code again,
inside of these awesome tool,

2
00:00:03.817 --> 00:00:06.190
notice he talks about functions ICs.

3
00:00:06.190 --> 00:00:09.170
These are called inline caches.

4
00:00:09.170 --> 00:00:13.425
The optimizations which we kind of talked
about earlier, maps, which we'll talk

5
00:00:13.425 --> 00:00:17.400
about and profiling is just the amount
of time spent in different locations.

6
00:00:17.400 --> 00:00:19.887
So let's look into the inline caches.

7
00:00:21.108 --> 00:00:24.440
And let's look at our function.

8
00:00:25.900 --> 00:00:28.540
Okay, so let's look at our code here.

9
00:00:29.640 --> 00:00:31.440
Why is this actually red?

10
00:00:31.440 --> 00:00:32.100
That's a good question.

11
00:00:33.180 --> 00:00:34.170
Insufficient time for you guys.

12
00:00:34.170 --> 00:00:36.030
It's, okay.

13
00:00:36.030 --> 00:00:40.400
Anyways, so this is your code, and
notice how it gets color-coded, right?

14
00:00:40.400 --> 00:00:41.790
Certain things are green.

15
00:00:41.790 --> 00:00:43.630
Certain things are red, etc.

16
00:00:43.630 --> 00:00:46.544
So for example, this timer is red,
and it surprises me,

17
00:00:46.544 --> 00:00:48.960
it's complaining about some information.

18
00:00:48.960 --> 00:00:51.181
I think, I don't fully understand this.

19
00:00:51.181 --> 00:00:55.339
I think this is complaining about
the fact that for the majority of time,

20
00:00:55.339 --> 00:00:59.780
it sees this thing only return true,
and it never sees it return false.

21
00:00:59.780 --> 00:01:03.147
And so it's like, I think bad things will
happen when it returns false, and so

22
00:01:03.147 --> 00:01:05.250
I don't know how to optimize it.

23
00:01:05.250 --> 00:01:08.969
Which kind of makes sense because like
it's a timer it usually returns true and

24
00:01:08.969 --> 00:01:11.570
only once returns false and
never runs again, right.

25
00:01:11.570 --> 00:01:16.457
But notice that the array dot
length is green what it means is

26
00:01:16.457 --> 00:01:21.246
that every time we got here
the the hidden class ID was right

27
00:01:21.246 --> 00:01:25.092
here this is the hidden class ID for
the array.

28
00:01:25.092 --> 00:01:28.650
And you can actually click on this.

29
00:01:28.650 --> 00:01:33.340
It basically shows you like, hey,
this hidden class ID was an array.

30
00:01:33.340 --> 00:01:35.370
And it had all of these
properties on it and

31
00:01:35.370 --> 00:01:37.980
one of these properties
should be linked somewhere.

32
00:01:38.990 --> 00:01:41.760
It isn't like this special, so
maybe the length is not here.

33
00:01:41.760 --> 00:01:42.493
But anyway,

34
00:01:42.493 --> 00:01:46.571
this talks about your object that you
had In here right this is the array.

35
00:01:46.571 --> 00:01:48.460
This is not our objects
is the array itself.

36
00:01:49.980 --> 00:01:53.486
And because array instance is
always the same everywhere,

37
00:01:53.486 --> 00:01:56.370
array dot length is is
an inline cashable items.

38
00:01:56.370 --> 00:01:59.980
So this is green, the system's like yep,
I can get this value, no problem.

39
00:01:59.980 --> 00:02:01.749
I never have issues with it,

40
00:02:01.749 --> 00:02:05.363
because every time I run the code
array the hidden class for

41
00:02:05.363 --> 00:02:11.580
the array is always the same and therefore
I know exactly where the link this, okay?

42
00:02:11.580 --> 00:02:16.469
And so
now we're running over array one, so

43
00:02:16.469 --> 00:02:22.164
this contains always
the same hidden class right.

44
00:02:22.164 --> 00:02:26.633
And so when we do a dot value over here
if I hover over it, it says, look,

45
00:02:26.633 --> 00:02:28.060
this is monomorphic.

46
00:02:28.060 --> 00:02:31.960
Every time I ran this code,
I've always seen the same exact object.

47
00:02:31.960 --> 00:02:36.530
And I can click on this object and
this object will click on it.

48
00:02:36.530 --> 00:02:38.350
Let me zoom into it.

49
00:02:38.350 --> 00:02:39.720
Come on, escape.

50
00:02:39.720 --> 00:02:42.940
And this object always had property 0.

51
00:02:42.940 --> 00:02:45.060
It says it was of unknown type.

52
00:02:45.060 --> 00:02:47.341
I don't know why it's saying that, but

53
00:02:47.341 --> 00:02:51.650
it says this particular object that
I've ever seen always had property 0.

54
00:02:51.650 --> 00:02:56.564
And in here, I've always gotten the same
object, therefore I know exactly what

55
00:02:56.564 --> 00:03:00.550
the offset into the array is,
and that's a fast access, right?

56
00:03:02.120 --> 00:03:05.938
Now if I go to the second benchmark,
we're going over array 2, and so

57
00:03:05.938 --> 00:03:08.679
now we know two different things in here,
right.

58
00:03:08.679 --> 00:03:11.180
And again,
the length is always green, right?

59
00:03:11.180 --> 00:03:15.740
Because the array instance is
always the same hidden class.

60
00:03:15.740 --> 00:03:17.170
The shape of the array is always the same,
right?

61
00:03:17.170 --> 00:03:20.053
Cuz all arrays in the system have the same
shape unless you start micing with

62
00:03:20.053 --> 00:03:20.860
prototypes.

63
00:03:20.860 --> 00:03:23.680
Don't do that.
That has another bad benefit.

64
00:03:23.680 --> 00:03:26.520
But notice now,
this isn't green, it's yellow.

65
00:03:26.520 --> 00:03:29.440
All right, so
this box right here is yellow.

66
00:03:29.440 --> 00:03:34.433
And so if you hover over it, it says,
originally I saw this value, but

67
00:03:34.433 --> 00:03:37.600
then sometimes I saw this other value.

68
00:03:37.600 --> 00:03:39.250
So now I have two different things.

69
00:03:39.250 --> 00:03:45.590
So sometimes I saw something
that had prop 1 on it and

70
00:03:45.590 --> 00:03:52.180
sometimes I saw something
that had prop 0 on it.

71
00:03:52.180 --> 00:03:55.119
So now basically it's saying I
saw two different objects on this

72
00:03:55.119 --> 00:03:56.430
particular thing.

73
00:03:56.430 --> 00:03:59.830
Actually, this is wrong, they should also
say that there's a value on this as well.

74
00:04:03.178 --> 00:04:06.740
I think there's a bug with the tool.

75
00:04:06.740 --> 00:04:10.840
So this tool should say it has value 0 and
prop 0 and value 0 and prop 1, okay.

76
00:04:12.380 --> 00:04:15.790
But the point here is that
you can see the shapes here.

77
00:04:15.790 --> 00:04:17.710
It's telling you what these things are.

78
00:04:17.710 --> 00:04:21.510
This is basically the memory location
where the hidden class used to be stored

79
00:04:21.510 --> 00:04:23.710
so the VM could do these operations.

80
00:04:23.710 --> 00:04:28.180
And so we know that in this particular
case, we can still have an inline cache,

81
00:04:28.180 --> 00:04:31.290
even if it's 2, and
we can see the same thing here.

82
00:04:31.290 --> 00:04:33.830
Notice there's three things in here now.

83
00:04:33.830 --> 00:04:35.090
We see the same thing here.

84
00:04:35.090 --> 00:04:38.400
Now there's 4 things in here now, right?

85
00:04:38.400 --> 00:04:39.430
Notice now it goes red.

86
00:04:40.450 --> 00:04:45.390
It basically says we didn't know
what it was, it became monomorphic.

87
00:04:45.390 --> 00:04:46.400
Then it became polymorphic.

88
00:04:46.400 --> 00:04:49.440
Then it was polymorphic in
the department for some kept increasing.

89
00:04:49.440 --> 00:04:51.380
And then we gave up and said, screw this.

90
00:04:51.380 --> 00:04:52.180
This is mega morphic.

91
00:04:52.180 --> 00:04:53.480
We don't know what to do.

92
00:04:53.480 --> 00:04:56.220
And so
we're gonna do the slow path over here.

93
00:04:56.220 --> 00:05:00.180
In the code,
it manifests itself as a read-read.

94
00:05:00.180 --> 00:05:03.600
It basically the tool is telling you like,
this thing is slow.

95
00:05:03.600 --> 00:05:07.875
If you can make this thing somehow go
faster if you can fix this problem,

96
00:05:07.875 --> 00:05:09.381
I can go faster, right.

97
00:05:09.381 --> 00:05:13.844
And so you can see just by looking at
the tool which particular property reads

98
00:05:13.844 --> 00:05:15.460
are problematic, right?

99
00:05:15.460 --> 00:05:22.607
So this is problematic and
goes all the way down to here.

100
00:05:22.607 --> 00:05:24.868
All of these things
are problematic values, right?

101
00:05:24.868 --> 00:05:26.548
Make sense?

102
00:05:27.862 --> 00:05:31.940
And as I said, the cool thing is that
you can actually go and explore this.

103
00:05:31.940 --> 00:05:36.587
So inside of your explorer, you can see
that there were lots of megamorphic

104
00:05:36.587 --> 00:05:40.150
reads because we created a lot
of different properties.

105
00:05:42.510 --> 00:05:45.430
And you can see where these things are.

106
00:05:45.430 --> 00:05:48.690
So for example, this one, it says,
this is the worst offender right here.

107
00:05:48.690 --> 00:05:50.060
And of course,
we know that's the worst offender.

108
00:05:50.060 --> 00:05:51.340
We designed it that way, right?

109
00:05:52.680 --> 00:05:54.690
You can see where monomorphic reads are.

110
00:05:54.690 --> 00:05:58.960
So for example, it says, this length
property is monomorphic, right?

111
00:05:58.960 --> 00:06:02.290
So you can kind of zoom in on
all of these functions and

112
00:06:02.290 --> 00:06:06.169
you can kind of look around and
say hey what's going on here?

113
00:06:06.169 --> 00:06:11.190
So in this particular function
this benchmark one function,

114
00:06:11.190 --> 00:06:13.032
why is it so slow okay?

115
00:06:13.032 --> 00:06:16.946
This benchmark one function which is
right here everything is green so

116
00:06:16.946 --> 00:06:21.126
it should basically come up with
everything being monomorphic you see mono

117
00:06:21.126 --> 00:06:23.790
meaning one morphism, one shape, right?

118
00:06:23.790 --> 00:06:27.320
Everything in here is green
because everything is monomorphic.

119
00:06:27.320 --> 00:06:28.410
That's what you wanna see.

120
00:06:28.410 --> 00:06:34.400
And when you see the things that are not
green, that's kind of a bad thing.

121
00:06:34.400 --> 00:06:37.820
So this is kind of a nice
tool to kind of explore.

122
00:06:37.820 --> 00:06:39.710
These tools existed before.

123
00:06:41.010 --> 00:06:45.030
About a year ago, the released is Dopt
explore and I think it makes a huge

124
00:06:45.030 --> 00:06:49.130
difference because it puts a nice UI,
and you can go around and explore.

125
00:06:49.130 --> 00:06:52.701
You could have always open this log
files and generate, these log files,

126
00:06:52.701 --> 00:06:55.754
most people didn't know about
the special instructions, and

127
00:06:55.754 --> 00:06:59.830
if you were determined enough, you
could go to figure out what's going on.

128
00:06:59.830 --> 00:07:05.430
But this UI tool really makes it super,
super nice to go over.

