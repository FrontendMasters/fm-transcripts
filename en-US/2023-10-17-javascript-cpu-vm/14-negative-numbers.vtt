WEBVTT

1
00:00:00.820 --> 00:00:03.320
Okay, here's a fun one.

2
00:00:03.320 --> 00:00:07.060
I don't have a benchmark to show you but I
think it's fun to talk about for a second.

3
00:00:07.060 --> 00:00:14.637
And that is,
why in the world is- x slower than 0- x?

4
00:00:14.637 --> 00:00:18.449
Anybody who wants to take a crack at this,
I think this is a pretty fun one.

5
00:00:21.364 --> 00:00:23.530
&gt;&gt; Is-
&gt;&gt; Go ahead.

6
00:00:23.530 --> 00:00:27.319
&gt;&gt; Is- x a multiplication?

7
00:00:27.319 --> 00:00:28.396
&gt;&gt; No.

8
00:00:28.396 --> 00:00:29.250
&gt;&gt; No, okay.

9
00:00:29.250 --> 00:00:30.485
&gt;&gt; That was a good one.

10
00:00:30.485 --> 00:00:33.000
&gt;&gt; Does it have to do with coercion?

11
00:00:33.000 --> 00:00:34.216
&gt;&gt; Sort of, yes.

12
00:00:34.216 --> 00:00:36.720
Yes, you're on track.

13
00:00:36.720 --> 00:00:39.910
So, you were talking about
two's complement, right?

14
00:00:39.910 --> 00:00:41.500
Negative numbers.
&gt;&gt; No, I was thinking that,

15
00:00:41.500 --> 00:00:44.414
is it more steps in the assembly
code to change it from positive?

16
00:00:44.414 --> 00:00:45.314
&gt;&gt; No, not even that.

17
00:00:45.314 --> 00:00:46.099
Not even that.

18
00:00:46.099 --> 00:00:49.625
There is no such thing as- 0.

19
00:00:49.625 --> 00:00:54.538
Well, actually, let's do a sane thing.

20
00:00:54.538 --> 00:00:57.960
There's no such thing as- 0,
there's only 0.

21
00:00:57.960 --> 00:01:00.399
Except, JavaScript is not sane.

22
00:01:00.399 --> 00:01:03.594
&gt;&gt; [LAUGH]
&gt;&gt; JavaScript understands 0, and

23
00:01:03.594 --> 00:01:05.073
it also understands- 0.

24
00:01:05.073 --> 00:01:08.703
It's just wrote- 0, right?

25
00:01:08.703 --> 00:01:10.558
This is insane, 0- 0?

26
00:01:10.558 --> 00:01:14.185
0, but- 0, -0.

27
00:01:14.185 --> 00:01:16.753
Okay, what in the world's going on here,
right?

28
00:01:16.753 --> 00:01:23.240
To understand this is there is no way for
the CPU to encode- 0.

29
00:01:23.240 --> 00:01:27.700
Negative 0 doesn't exist because
two's complement of zero,

30
00:01:27.700 --> 00:01:31.424
remember two's complement
is you flip all the bits.

31
00:01:31.424 --> 00:01:35.590
So you get one, one, one everywhere,
and then you add one to it.

32
00:01:35.590 --> 00:01:39.276
And when you add one to one, one,
one everywhere, it overflows and

33
00:01:39.276 --> 00:01:40.449
becomes zero again.

34
00:01:40.449 --> 00:01:45.680
So negation of a zero, or
two's complement of zero is zero, right?

35
00:01:45.680 --> 00:01:46.912
And that's fine,

36
00:01:46.912 --> 00:01:51.840
because in math there's no such thing
as- 0 unless you do limits, right?

37
00:01:51.840 --> 00:01:53.940
And so in JavaScript is different.

38
00:01:53.940 --> 00:01:56.400
And so for some reason, it encodes- 0.

39
00:01:56.400 --> 00:01:59.109
Now, if you write this thing, 0- x,

40
00:01:59.109 --> 00:02:02.980
then what you're saying is
subtract the value from 0.

41
00:02:02.980 --> 00:02:06.485
If you say this,
then you're actually saying,

42
00:02:06.485 --> 00:02:11.699
give me the negative of this number,
which for the most part is a number,

43
00:02:11.699 --> 00:02:17.705
except when it's 0, then it's- 0,
which cannot be encoded into as a integer.

44
00:02:17.705 --> 00:02:19.304
So what does JavaScript do?

45
00:02:19.304 --> 00:02:22.470
It encodes us as eee754.

46
00:02:22.470 --> 00:02:26.900
eee754 is how we do
floating point numbers.

47
00:02:26.900 --> 00:02:30.440
Turns out floating point
numbers can have- 0.

48
00:02:30.440 --> 00:02:32.552
So in floating point numbers,

49
00:02:32.552 --> 00:02:37.114
we actually store the negation
right here in the corner like- 1.

50
00:02:37.114 --> 00:02:38.284
What do I do?

51
00:02:38.284 --> 00:02:40.928
Right here on the first bit,
if you start as- 1.

52
00:02:40.928 --> 00:02:43.882
So this bit that defines the sign,
positive or negative,

53
00:02:43.882 --> 00:02:45.329
then we have the exponent and

54
00:02:45.329 --> 00:02:48.788
mantissa which is basically
the value minus the exponent, right?

55
00:02:48.788 --> 00:02:54.752
So for 0 you can actually
encode- 0 in triple notation and

56
00:02:54.752 --> 00:03:02.160
this is why a negative x if x is 0
becomes a floating point number, right?

57
00:03:02.160 --> 00:03:05.663
And so the problem is if you do 0- x for,

58
00:03:05.663 --> 00:03:10.918
if input is 1 then you get- 1,
if the input is 0 you get 0,

59
00:03:10.918 --> 00:03:16.609
but if you get- x and if you start with 1,
then you get with- 1.

60
00:03:16.609 --> 00:03:19.799
But if you start with 0,
then you get a float.

61
00:03:22.300 --> 00:03:26.499
And you can see how that would ruin
the day for the compiler, right?

62
00:03:26.499 --> 00:03:30.957
Because compiler makes an assumption that
the number it's getting is going to be

63
00:03:30.957 --> 00:03:31.684
an integer.

64
00:03:31.684 --> 00:03:34.428
And so now, all of a sudden,
that assumption is broken.

65
00:03:34.428 --> 00:03:38.754
And so the way you ruin your
day is if you try to go and

66
00:03:38.754 --> 00:03:41.859
access a property using a integer.

67
00:03:41.859 --> 00:03:42.949
This is easy, that's easy.

68
00:03:42.949 --> 00:03:46.703
Remember, eex instruction and
the xx index, there you go,

69
00:03:46.703 --> 00:03:49.139
there's your memory, piece of cake.

70
00:03:49.139 --> 00:03:54.270
You put a- 0, it's a float,
I can't use floats to access the thing.

71
00:03:54.270 --> 00:03:58.794
As a matter of fact,
I don't know how it is NUMA registers but

72
00:03:58.794 --> 00:04:03.790
the old CPUs had dedicated registers for
floating point numbers.

73
00:04:03.790 --> 00:04:05.510
They were separate beasts.

74
00:04:05.510 --> 00:04:09.054
If you wanted to deal with floating point
numbers, totally different registers,

75
00:04:09.054 --> 00:04:11.799
totally different operations you
could do on them, et cetera.

76
00:04:11.799 --> 00:04:16.734
The arithmetic logic unit for adding and
subtracting or multiplying floating

77
00:04:16.734 --> 00:04:21.080
points is way different than doing it for
regular integers, right?

78
00:04:21.080 --> 00:04:25.887
So, the amusing part here
is that through a negation,

79
00:04:25.887 --> 00:04:30.599
you can end up with a negative
floating point number.

80
00:04:30.599 --> 00:04:34.742
If you try to use it in array access or
property access,

81
00:04:34.742 --> 00:04:40.277
will really mess up the generated
code that the compiler has to do.

82
00:04:40.277 --> 00:04:44.607
And the result of that is this,
that Chrome has been actually pretty good,

83
00:04:44.607 --> 00:04:46.679
it's only 3x, it's not too bad.

84
00:04:46.679 --> 00:04:49.980
It used to be way worse in the past.

85
00:04:49.980 --> 00:04:53.471
And then Firefox looks like didn't
optimize this very well, and so

86
00:04:53.471 --> 00:04:55.747
in Firefox is 10x, kind of a difference.

87
00:04:55.747 --> 00:04:58.497
Kind of crazy?

88
00:04:58.497 --> 00:05:01.825
All these different ways to
shoot ourselves in the foot,

89
00:05:01.825 --> 00:05:04.264
because JavaScript is dynamic, right?

90
00:05:04.264 --> 00:05:06.501
If it'd be statically compiled,

91
00:05:06.501 --> 00:05:10.906
then this wouldn't happen because
you couldn't do this, right?

92
00:05:10.906 --> 00:05:13.960
You would not be allowed to just
randomly do these kinds of things.

