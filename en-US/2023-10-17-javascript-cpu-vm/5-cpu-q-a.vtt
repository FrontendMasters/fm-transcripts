WEBVTT

1
00:00:00.000 --> 00:00:03.454
Is RAM then a huge array?

2
00:00:03.454 --> 00:00:05.235
&gt;&gt; RAM is exactly a huge array, yes.

3
00:00:05.235 --> 00:00:07.295
That's the way to think about it.

4
00:00:07.295 --> 00:00:12.419
&gt;&gt; Are the A0,
A1 in this case part of the registers or

5
00:00:12.419 --> 00:00:16.160
the ALU he was talking about earlier?

6
00:00:16.160 --> 00:00:20.299
&gt;&gt; They are part of the registers
in the sense that you can read and

7
00:00:20.299 --> 00:00:21.500
write into them.

8
00:00:21.500 --> 00:00:25.002
But certain registers
have specialized roles.

9
00:00:25.002 --> 00:00:28.218
What I mean by that is,
if you have a number and

10
00:00:28.218 --> 00:00:32.281
you wanna multiply it and
the number happens to be an A0,

11
00:00:32.281 --> 00:00:36.530
A0 usually cannot be part of
a multiplication operation.

12
00:00:36.530 --> 00:00:39.843
Right so you have to move it from
A0 to one of the registers that

13
00:00:39.843 --> 00:00:41.258
know how to multiply etc.

14
00:00:41.258 --> 00:00:44.327
So you can think of it as
these registers are for

15
00:00:44.327 --> 00:00:47.713
the most part general purpose but
some know how to do

16
00:00:47.713 --> 00:00:52.457
certain things while others do not
know how to do certain things right?

17
00:00:52.457 --> 00:00:57.192
So the the address register the why the
reason why it's called A it's because it's

18
00:00:57.192 --> 00:00:59.559
really good at adding things together and

19
00:00:59.559 --> 00:01:02.279
using that as a offset into the memory,
right?

20
00:01:02.279 --> 00:01:06.454
So if you wanna do that operation, you
can't really do it out of an R0 register.

21
00:01:06.454 --> 00:01:08.900
R0 register is not really good at that.

22
00:01:08.900 --> 00:01:13.320
So typically CPUs have
specialized registers.

23
00:01:13.320 --> 00:01:16.951
Like program counter is
an example of highly specialized

24
00:01:16.951 --> 00:01:19.680
register that you can read and write into.

25
00:01:19.680 --> 00:01:23.584
But you do it through a special
set of instructions and

26
00:01:23.584 --> 00:01:28.640
it has automatic behavior,
it automatically increments and so on.

27
00:01:28.640 --> 00:01:31.060
Same thing with a stack pointer.

28
00:01:31.060 --> 00:01:36.031
So yeah, they're all registers, but
they're specialized in the sense

29
00:01:36.031 --> 00:01:39.890
that certain registers can
only do certain operations.

30
00:01:39.890 --> 00:01:42.400
&gt;&gt; Does it mean there's a tone
of general registers just a few.

31
00:01:42.400 --> 00:01:44.170
&gt;&gt; Yeah, so typical modern CPU.

32
00:01:44.170 --> 00:01:48.196
I don't know it's been a while since I
done this, but I would guess that we're

33
00:01:48.196 --> 00:01:51.370
talking on the order of like
60 general purpose registers.

34
00:01:51.370 --> 00:01:55.757
On the order of like 24 these
address index registers and

35
00:01:55.757 --> 00:02:02.034
then a handful of programmed counters,
stack pointer, flag registers and so on.

36
00:02:02.034 --> 00:02:03.750
And that's what you get.

37
00:02:03.750 --> 00:02:06.563
There's also super specialized registers,

38
00:02:06.563 --> 00:02:11.467
which I think modern CPUs have called
SIMD, single instruction multiple data,

39
00:02:11.467 --> 00:02:15.159
where you say, like,
I wanna do a multiplication, right?

40
00:02:15.159 --> 00:02:19.134
But I don't just wanna do a multiplication
on like two numbers I wanna do on

41
00:02:19.134 --> 00:02:20.170
a matrix, right?

42
00:02:20.170 --> 00:02:26.840
So like, let me load 50 different
values into specialized 50 registers.

43
00:02:26.840 --> 00:02:30.748
And now do multiply by five,
all of them all at once, right?

44
00:02:30.748 --> 00:02:36.591
So these are super specialized things and
they're useful for

45
00:02:36.591 --> 00:02:40.760
really graphics and these days AI, right?

46
00:02:40.760 --> 00:02:44.207
But once you get into AI,
because you think about what AI is,

47
00:02:44.207 --> 00:02:46.922
AI is whole bunch of multiplications,
right?

48
00:02:46.922 --> 00:02:49.530
Because you're doing statistics
is really what it comes down to.

49
00:02:49.530 --> 00:02:54.415
And so when you get to the AI world,
there you have like super

50
00:02:54.415 --> 00:02:59.009
specialized hardware that can
just rip through tons and

51
00:02:59.009 --> 00:03:02.739
tons of data, in terms of multiplications.

52
00:03:02.739 --> 00:03:06.790
So the idea is, if you just wanna multiply
things over and over and over again like

53
00:03:06.790 --> 00:03:10.380
a huge matrix, then you know what
the set of instructions are, right?

54
00:03:10.380 --> 00:03:12.943
So you don't have to have a program
counter that goes read and

55
00:03:12.943 --> 00:03:14.160
all these other machinery.

56
00:03:14.160 --> 00:03:19.032
Instead, you have a specialized pipeline
that just gets reads the memory

57
00:03:19.032 --> 00:03:19.984
in sequence.

58
00:03:19.984 --> 00:03:24.536
And then multiplies it and then spits it
out to a different location memory, right,

59
00:03:24.536 --> 00:03:27.370
and can just process this
in extremely fast things.

60
00:03:27.370 --> 00:03:31.237
And so if you look at modern CPUs,
they have a dedicated neural nets or

61
00:03:31.237 --> 00:03:33.315
whatever you wanna call it, right?

62
00:03:33.315 --> 00:03:37.130
All it is is a big array of multipliers.

63
00:03:37.130 --> 00:03:40.395
And these arrays are really good at,
you set them up with the initial

64
00:03:40.395 --> 00:03:43.315
parameter saying,
this is where the A part of the matrix is,

65
00:03:43.315 --> 00:03:45.513
this is where the B part of the matrix is,
go.

66
00:03:45.513 --> 00:03:49.310
And then, the matrix might be 50,000
euros or something like that.

67
00:03:49.310 --> 00:03:52.917
And so it just rips through them
without any sort of sub routines or or

68
00:03:52.917 --> 00:03:54.580
any other additional things.

69
00:03:54.580 --> 00:03:57.837
It just knows how to do that and
knows how to do it really well.

70
00:03:57.837 --> 00:04:01.970
&gt;&gt; So these are hardware differences,
the registers, then.

71
00:04:01.970 --> 00:04:06.920
&gt;&gt; Hardware differences also
differences of architectures, right?

72
00:04:06.920 --> 00:04:12.175
So when you're talking about a Intel CPU,
the instructions, numbers have

73
00:04:12.175 --> 00:04:17.360
a special meeting, and also the registers
have a certain layout, right?

74
00:04:17.360 --> 00:04:21.150
The instructions assume
certain register layout.

75
00:04:21.150 --> 00:04:26.283
So part of the reason why you can't
just take a code from Intel and run

76
00:04:26.283 --> 00:04:32.426
it on an M1 chip without translation right
is because the M1 chip is a RISC chip.

77
00:04:32.426 --> 00:04:35.944
And because of that it has
different register layout.

78
00:04:35.944 --> 00:04:38.859
And obviously it has a different
set of instructions have different

79
00:04:38.859 --> 00:04:39.685
meaning, right?

80
00:04:39.685 --> 00:04:44.190
So nothing really fits inside of these two
architectures like the CPUs are different,

81
00:04:44.190 --> 00:04:46.485
the layout of the registers are different.

82
00:04:46.485 --> 00:04:47.955
And so things just don't work.

83
00:04:47.955 --> 00:04:49.775
And that's why you have to
really compile it separately.

84
00:04:49.775 --> 00:04:50.546
Yes.

85
00:04:50.546 --> 00:04:55.304
&gt;&gt; So I always thought of like
JavaScript and the JavaScript engine has

86
00:04:55.304 --> 00:05:00.159
been something that's multiple
layers removed from the hardware.

87
00:05:00.159 --> 00:05:00.814
&gt;&gt; Yeah.

88
00:05:00.814 --> 00:05:07.109
&gt;&gt; Is that still what the case is?

89
00:05:07.109 --> 00:05:08.839
&gt;&gt; Yes
&gt;&gt; Does the JavaScript engine

90
00:05:08.839 --> 00:05:13.541
actually have access to the bare metal or,
&gt;&gt; The engine absolutely, yes.

91
00:05:13.541 --> 00:05:17.939
So the VA has basically via
generates these instructions, right.

92
00:05:17.939 --> 00:05:20.678
So what I wanna show you here
in this first phase of the kind

93
00:05:20.678 --> 00:05:23.890
of the presentation is I wanna show
you what the hardware level is.

94
00:05:23.890 --> 00:05:27.260
I wanna show you what
the capabilities of the CPU are.

95
00:05:27.260 --> 00:05:29.757
Because once you understand
the capabilities and

96
00:05:29.757 --> 00:05:33.930
you know what JavaScript is, you'd be
like, wait, there is this chasm, right?

97
00:05:33.930 --> 00:05:36.006
How do you fill this chasm?

98
00:05:36.006 --> 00:05:40.610
And that's the thing that will
determine how things perform, right?

99
00:05:40.610 --> 00:05:44.625
Because in order to fill this chasm,
the V8 has to do tricks.

100
00:05:44.625 --> 00:05:46.440
And how do these tricks work?

101
00:05:46.440 --> 00:05:49.406
And then once you see how these tricks
work, it becomes totally obvious why

102
00:05:49.406 --> 00:05:51.590
certain things are fast or
some of the things are slow.

