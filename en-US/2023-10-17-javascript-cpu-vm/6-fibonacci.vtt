WEBVTT

1
00:00:00.240 --> 00:00:03.291
Now, at this point you should be
looking to yourself and saying, like,

2
00:00:03.291 --> 00:00:04.100
this is insanity.

3
00:00:04.100 --> 00:00:08.070
Every time I change program,
I have to change all these values, right?

4
00:00:08.070 --> 00:00:11.250
And so you need a compiler, pretty
quickly you're like, I need a compiler.

5
00:00:12.350 --> 00:00:16.426
And what the compiler allows you
to do is to say things like, hey,

6
00:00:16.426 --> 00:00:19.780
into a0 I wanna load the address
of the data section.

7
00:00:19.780 --> 00:00:23.887
And I'm just gonna put a label
where the data section is, right.

8
00:00:23.887 --> 00:00:27.309
And so when the compiler runs it like
does the math and figures it out and

9
00:00:27.309 --> 00:00:30.332
like yeah that's 37 and
just puts it over there, right.

10
00:00:30.332 --> 00:00:34.853
You don't have to do that because you'll
just go crazy always changing these values

11
00:00:34.853 --> 00:00:39.183
right like imagine every time you add the
feature to the program you have to go back

12
00:00:39.183 --> 00:00:42.322
and like recompute all these
things it's just insanity.

13
00:00:42.322 --> 00:00:46.303
So that's basically the difference
between assembly and machine language,

14
00:00:46.303 --> 00:00:48.545
machine language is just numbers, right?

15
00:00:48.545 --> 00:00:52.525
Assembly are for each number we
look up its corresponding name on

16
00:00:52.525 --> 00:00:57.254
the instruction name of the instruction,
so we say load ae instead of 37.

17
00:00:57.254 --> 00:01:01.612
And instead of random number, it puts an
address, we can put an actual text label

18
00:01:01.612 --> 00:01:06.034
in there, and so we know that if we add
things, shift things around, the compiler

19
00:01:06.034 --> 00:01:10.230
will recompute all these things so
you don't have to worry about it, right?

20
00:01:10.230 --> 00:01:14.572
And it also makes it much easier for you
to read, because now you'll be like, yeah,

21
00:01:14.572 --> 00:01:16.240
so a0 gets the address.

22
00:01:16.240 --> 00:01:20.130
A1 gets zero then we call
the gosubroutine which is the increment.

23
00:01:20.130 --> 00:01:23.083
Then we look at array
location one increment two,

24
00:01:23.083 --> 00:01:27.640
increment three increment halt,
right, much easier to read, right?

25
00:01:27.640 --> 00:01:29.470
Okay, what does the subroutine label do?

26
00:01:29.470 --> 00:01:32.942
Well, the label is increment and

27
00:01:32.942 --> 00:01:37.460
what it does is it reads from the memory.

28
00:01:37.460 --> 00:01:39.180
It increments the value,
stores it back in there.

29
00:01:39.180 --> 00:01:42.724
And by the way, the subroutine
automatically produces the return

30
00:01:42.724 --> 00:01:46.890
instruction and anything else that
you need to kinda not worry about it.

31
00:01:46.890 --> 00:01:50.797
And then you just have your label for
data section and label for Stack.

32
00:01:50.797 --> 00:01:54.170
And you know that things get initialized,
and everything works, right?

33
00:01:54.170 --> 00:01:56.290
This is assembly right here.

34
00:01:56.290 --> 00:02:00.926
A little more complicated, but
fundamentally that's what it's.

35
00:02:00.926 --> 00:02:08.660
Okay, let's implement Fibonacci.

36
00:02:08.660 --> 00:02:11.361
So the way Fibonacci works is again,

37
00:02:11.361 --> 00:02:16.430
we have to load the data location at zero,
and we call the Fibonacci.

38
00:02:17.570 --> 00:02:22.493
Go to the subroutine Fibonacci and
then we store the result inside

39
00:02:22.493 --> 00:02:26.267
of location one and so
what is that location zero.

40
00:02:26.267 --> 00:02:32.139
So location zero is four so we're asking
for the fourth Fibonacci number, right.

41
00:02:33.500 --> 00:02:35.190
Okay, so how does it work?

42
00:02:35.190 --> 00:02:38.280
The subroutine has a label notice.

43
00:02:38.280 --> 00:02:43.504
We save, say, save R1, meaning that in the
process of executing this particular code,

44
00:02:43.504 --> 00:02:45.790
we're gonna destroy the value of R1.

45
00:02:45.790 --> 00:02:50.310
What it means is that we are gonna
have to push R1 on a stack.

46
00:02:50.310 --> 00:02:53.278
The way this works is
you push R1 on a stack,

47
00:02:53.278 --> 00:02:56.740
then you do whatever set
of instructions you want.

48
00:02:56.740 --> 00:02:59.890
And then on the end of it,
you pop it out of the stack, right?

49
00:02:59.890 --> 00:03:03.386
So the stack not only can store
your program counter information,

50
00:03:03.386 --> 00:03:07.070
it can also store arbitrary data,
including local variables that but

51
00:03:07.070 --> 00:03:11.019
that's an advanced concept that we
haven't we're not getting into yet.

52
00:03:12.260 --> 00:03:15.400
And so this is an example of
calling convention, right.

53
00:03:15.400 --> 00:03:20.330
We have a deal that when I call a
subroutine and when I come back out of it

54
00:03:20.330 --> 00:03:25.690
the R1 is going to have the parameter
I'm passing in or the result value.

55
00:03:25.690 --> 00:03:29.040
So the R1 is used both as an input and
an output.

56
00:03:29.040 --> 00:03:31.150
Sorry, R0, not R1.

57
00:03:31.150 --> 00:03:34.816
And I really don't want you to
mess with R1, that is not for you.

58
00:03:34.816 --> 00:03:39.785
So if you need to use R1 for some
internal things, make sure you save it so

59
00:03:39.785 --> 00:03:42.790
that it's available later.

60
00:03:42.790 --> 00:03:46.530
And then we can do
a comparator instruction.

61
00:03:46.530 --> 00:03:51.460
Now remember, at the beginning I said
the R0 is little special because

62
00:03:51.460 --> 00:03:54.350
when you write into the R0 you set flags.

63
00:03:55.440 --> 00:03:59.772
And so what set flags operation does
is it says there is a set of bits and

64
00:03:59.772 --> 00:04:04.776
says if the value you set is zero, then
we'll set a bit if the value is negative,

65
00:04:04.776 --> 00:04:09.090
then we'll set a bid if its value
is positive, we set a bid, right?

66
00:04:09.090 --> 00:04:12.720
And what that allows you to do,
is to run a compare instruction.

67
00:04:12.720 --> 00:04:15.118
And what compare instruction basically is,

68
00:04:15.118 --> 00:04:17.650
a subtraction where you
throw away the result.

69
00:04:19.740 --> 00:04:23.258
And so you compare it to zero, in other
words, you subtract it from zero, and

70
00:04:23.258 --> 00:04:26.250
the only time that it's zero is
if it's the same number, right?

71
00:04:26.250 --> 00:04:28.220
And if you get a negative number,
then you know you're less than.

72
00:04:28.220 --> 00:04:30.000
If you get a positive then
you're greater than etc.

73
00:04:30.000 --> 00:04:32.700
And this is basically how
you do an if statement.

74
00:04:32.700 --> 00:04:36.950
So you do a subtraction
which sets a set of flags.

75
00:04:36.950 --> 00:04:40.406
And then based on
the flags you have special

76
00:04:40.406 --> 00:04:43.760
instructions that basically say jump.

77
00:04:43.760 --> 00:04:48.680
So, the way that works is that you run
your expression which modifies the flags.

78
00:04:49.910 --> 00:04:54.547
Then you wanna run your condition
in this particular case,

79
00:04:54.547 --> 00:04:57.246
it is jump if less than or equal to.

80
00:04:57.246 --> 00:05:02.162
And then the condition then
has to have a label of where

81
00:05:02.162 --> 00:05:05.590
you wanna go to the then location.

82
00:05:05.590 --> 00:05:11.136
So you have to have a label for then and
you have to have a label for end and

83
00:05:11.136 --> 00:05:16.973
so now this if condition either ends
up in this location or this location.

84
00:05:16.973 --> 00:05:20.605
And then, obviously, if you end up in the
else, then you have to jump out of it so

85
00:05:20.605 --> 00:05:24.890
you don't double run the end of it, so you
have to have a label end in here as well.

86
00:05:24.890 --> 00:05:29.133
So you can see how an if statement is
actually a bunch of jumps that happen in

87
00:05:29.133 --> 00:05:32.360
order to kind of figure out
what's going on for the CPU.

88
00:05:34.820 --> 00:05:37.146
Does that make sense, or was it too fast?

89
00:05:37.146 --> 00:05:39.136
&gt;&gt; A little fast.

90
00:05:39.136 --> 00:05:42.518
&gt;&gt; A little fast, okay, so

91
00:05:42.518 --> 00:05:47.600
basically you run an expression in.

92
00:05:47.600 --> 00:05:50.210
So let me just actually do
this next to each other.

93
00:05:50.210 --> 00:05:53.790
You run a comparator expression which
basically is just a subtraction.

94
00:05:54.830 --> 00:05:59.109
And the side effect of subtraction is that
you set flags in the flags register, okay.

95
00:06:01.230 --> 00:06:04.182
These flags are things like,
is it zero, is it a positive number,

96
00:06:04.182 --> 00:06:07.028
is it a negative number,
was it an overflow, is it a carryover,

97
00:06:07.028 --> 00:06:10.020
like there's a bunch of different
flags that exist in the system.

98
00:06:11.860 --> 00:06:16.728
So this instruction that you run, so R0
is special that whatever value you write

99
00:06:16.728 --> 00:06:19.592
into R0, again,
depends on architecture but

100
00:06:19.592 --> 00:06:24.890
typically R0 is zero special that it
ends up affecting the flags register.

101
00:06:24.890 --> 00:06:27.443
So by subtracting the R0
from some number unit,

102
00:06:27.443 --> 00:06:32.210
we can then see if that number was bigger,
smaller equal to whatever, right?

103
00:06:32.210 --> 00:06:35.060
And so now based on that you
wanna do a conditional jump.

104
00:06:35.060 --> 00:06:40.777
In other words, you wanna modify the
programme counter to some other address,

105
00:06:40.777 --> 00:06:45.630
but only if as positive or
negative or equal to, right?

106
00:06:45.630 --> 00:06:51.960
And so this is the conditional jump that
says hey jump but only if this was true.

107
00:06:51.960 --> 00:06:56.110
If it was not true then don't jump, right?

108
00:06:56.110 --> 00:06:59.908
So right after the condition you have to
give it an address of where exactly you

109
00:06:59.908 --> 00:07:02.370
should be jumping, so
you make a branch, right?

110
00:07:02.370 --> 00:07:05.360
You're either gonna jump or
you're not gonna jump.

111
00:07:05.360 --> 00:07:09.500
And jump is just like I'm either gonna
update the program counter or not, right?

112
00:07:09.500 --> 00:07:10.290
It's all it is.

113
00:07:11.380 --> 00:07:14.334
So in this case,
if I don't update the program counter and

114
00:07:14.334 --> 00:07:15.902
I'm running the else branch,

115
00:07:15.902 --> 00:07:19.725
which means there's a set of instructions
that that deal with the else work.

116
00:07:19.725 --> 00:07:24.422
And when the else work is done because
the else work is followed by the then

117
00:07:24.422 --> 00:07:26.820
work I gotta jump over that, right?

118
00:07:26.820 --> 00:07:30.569
So I have to have non conditional jump
like I always have to jump over that

119
00:07:30.569 --> 00:07:33.200
because I'm into it I have to end up here,
right?

120
00:07:33.200 --> 00:07:35.140
I have to end up at the label end so

121
00:07:35.140 --> 00:07:39.410
if I did jump to the then section then
I can just continue running through.

122
00:07:39.410 --> 00:07:43.217
If I ended up in the else section
then I have to jump out of it,

123
00:07:43.217 --> 00:07:46.050
jump over the then section
to end up in here.

124
00:07:48.500 --> 00:07:49.800
This is pretty low level, right?

125
00:07:49.800 --> 00:07:53.610
This is not how you normally think
about your if conditions, right?

126
00:07:53.610 --> 00:07:56.430
It's just a block, you put curlies.

127
00:07:56.430 --> 00:08:00.552
But those curlies somehow have to
translate into all of this on the end of

128
00:08:00.552 --> 00:08:01.109
the day.

129
00:08:03.970 --> 00:08:09.734
Okay, so what this basically says
that if you have, if the value of R0,

130
00:08:09.734 --> 00:08:14.270
which is the argument into
the Fibonacci sequence is 0,

131
00:08:14.270 --> 00:08:18.711
then load the result to be 0,
and because it's a then,

132
00:08:18.711 --> 00:08:22.990
it just falls through and
exits the thing, right?

133
00:08:22.990 --> 00:08:24.784
So Fibonacci sequence of 0 is 0.

134
00:08:26.070 --> 00:08:32.533
Pibonacci sequence of 1 is 1.

135
00:08:32.533 --> 00:08:37.100
So you load the result into R0 and
then you exit the subroutine, right?

136
00:08:37.100 --> 00:08:39.917
So now R0 will contain the result value,
either 0 or

137
00:08:39.917 --> 00:08:42.366
1 depending on whether it's 0 or 1, okay.

138
00:08:42.366 --> 00:08:47.202
Otherwise, what we're gonna do is
we're gonna decrement R0, because

139
00:08:47.202 --> 00:08:53.230
the Fibonacci sequence is the sum of the
previous two numbers in sequences, right?

140
00:08:53.230 --> 00:08:55.960
By the way, did you hear about
the Fibonacci conference?

141
00:08:55.960 --> 00:08:57.730
It was as big as the last
two put together.

142
00:08:59.450 --> 00:09:01.947
So you decrement R0, right, and

143
00:09:01.947 --> 00:09:06.320
then you make a copy of R0 to
put it in the R1, register.

144
00:09:06.320 --> 00:09:11.130
But now we're using R1 register,
this is the reason why we had to save it.

145
00:09:11.130 --> 00:09:15.576
Because if we didn't save it, then the
program that called us would be like, hey,

146
00:09:15.576 --> 00:09:18.590
you changed my value,
that's no good, right?

147
00:09:18.590 --> 00:09:20.350
So we had to save it at the beginning.

148
00:09:20.350 --> 00:09:24.331
So we make a copy of the value
inside R1 register and

149
00:09:24.331 --> 00:09:27.950
then we recursively call ourselves, right?

150
00:09:27.950 --> 00:09:32.652
So, it goes up to ourselves so
that we can compute the result and

151
00:09:32.652 --> 00:09:37.150
now we know that the result
is gonna be in R0, okay?

152
00:09:37.150 --> 00:09:40.471
Now, we need to save R0,
so we push it on a stack.

153
00:09:43.097 --> 00:09:46.818
And now we can take the R1 and
put it back into R0,

154
00:09:46.818 --> 00:09:51.514
decrement it one more time, and
now call ourselves again, and

155
00:09:51.514 --> 00:09:56.402
now we have the result again in R0,
and we move it from R0 to R1.

156
00:09:56.402 --> 00:10:01.770
And then maybe restore the R0 we had
over here, we pop it from the stack.

157
00:10:01.770 --> 00:10:06.873
So, now the R0 will contain
the Fibonacci of x-1.

158
00:10:06.873 --> 00:10:12.130
And now,
the R1 contains the Fibonacci of x-2.

159
00:10:12.130 --> 00:10:13.070
We add them together.

160
00:10:14.840 --> 00:10:18.470
And now, the R0 contains
the Fibonacci sequence that we want.

161
00:10:18.470 --> 00:10:20.084
So, we can execute this.

162
00:10:23.529 --> 00:10:28.188
And you can see that you can see that
it recuses quite a lot internally

163
00:10:28.188 --> 00:10:32.219
because we all know that Fibonacci
is quite a recursive etc.

164
00:10:32.219 --> 00:10:37.377
And you can also see that at
the beginning we started with

165
00:10:37.377 --> 00:10:44.510
four is our kind of the initial value
we were interested in to compute.

166
00:10:44.510 --> 00:10:48.630
And then by the time we're done,
you see the answer three is in here.

167
00:10:48.630 --> 00:10:50.395
But notice what's in the back of here,

168
00:10:50.395 --> 00:10:53.670
there's a bunch of garbage that ended
up in here see all this stuff here.

169
00:10:54.700 --> 00:10:58.765
That's a leftover stuff of our stack
because when we push things on a stack,

170
00:10:58.765 --> 00:11:00.420
we wrote into memory.

171
00:11:00.420 --> 00:11:02.423
But when you pop things out,
we didn't bother clean up,

172
00:11:02.423 --> 00:11:05.170
because that's just extra work,
why would you do that?

173
00:11:05.170 --> 00:11:09.700
And so now there is potentially
dangerous information in there.

174
00:11:09.700 --> 00:11:13.180
Let's say somebody pushed
a private key onto a stack.

175
00:11:14.350 --> 00:11:18.008
And now that memory in one program shuts
down and you start up another program and

176
00:11:18.008 --> 00:11:19.800
now the program gets that memory.

177
00:11:19.800 --> 00:11:24.357
So part of the job of the operating system
is to clear that memory to make sure like,

178
00:11:24.357 --> 00:11:26.932
there is nothing there
when it gives it to you,

179
00:11:26.932 --> 00:11:30.720
because you could like accidentally
read somebody else's stuff.

180
00:11:32.240 --> 00:11:35.840
And you can also see how the stack
has kind of grown backwards, right,

181
00:11:35.840 --> 00:11:39.190
in towards the data, but
hopefully we had enough space.

182
00:11:39.190 --> 00:11:44.532
So if I go here and
just modify where is my number here.

183
00:11:44.532 --> 00:11:49.029
So five so that's the input
this is the result, right,

184
00:11:49.029 --> 00:11:53.907
if I just modify it to five and
I rerun it now you can see that and

185
00:11:53.907 --> 00:12:00.532
five is funny because five of the answer
is 5 and 4 of the answer is 4, okay, 6.

186
00:12:04.327 --> 00:12:06.529
6, the answer is 8, right?

187
00:12:06.529 --> 00:12:10.002
So now, you can see that it's
computing the other numbers, and

188
00:12:10.002 --> 00:12:13.810
you can see just how expensive it
was in terms of computation, right?

189
00:12:13.810 --> 00:12:16.270
It's quite a lot of stuff
that happened inside of it.

190
00:12:16.270 --> 00:12:18.940
And notice,
the bigger the number you choose,

191
00:12:18.940 --> 00:12:21.760
the further the stack has grown into you,
right?

192
00:12:21.760 --> 00:12:25.820
And so at some point, the stack is so
big that it will collide with you.

193
00:12:25.820 --> 00:12:31.595
And so that's why you have to have
extra stuff in there, inside of it.

194
00:12:31.595 --> 00:12:36.481
Okay, so this was kind of the main
thing of like showing you

195
00:12:36.481 --> 00:12:39.350
how a physical CPU works.

196
00:12:39.350 --> 00:12:43.098
And I'm kind of hoping that
at this point you kinda

197
00:12:43.098 --> 00:12:48.010
have a good idea of how things
work on the silicon level, right?

198
00:12:48.010 --> 00:12:50.930
What actually is happening under the hood?

199
00:12:50.930 --> 00:12:54.020
&gt;&gt; When numbers are stored in
the registers, there'll be.

200
00:12:54.020 --> 00:12:54.740
&gt;&gt; Yes.

201
00:12:54.740 --> 00:12:57.680
&gt;&gt; Binary,
when they do addition or subtraction,

202
00:12:57.680 --> 00:13:01.650
whatever remember this one to
do with like two's complement?

203
00:13:01.650 --> 00:13:03.520
&gt;&gt; Yes.
&gt;&gt; In a different way, doesn't it?

204
00:13:03.520 --> 00:13:07.460
&gt;&gt; So the crazy thing is that
CPUs do not know how to subtract.

205
00:13:10.200 --> 00:13:12.520
Crazy, right,
they can only add negative numbers.

206
00:13:13.950 --> 00:13:18.810
And the negative numbers are represented
in something called two's complement.

207
00:13:20.050 --> 00:13:24.623
And basically it's a negative number I
believe don't quote me it's been years but

208
00:13:24.623 --> 00:13:28.997
I believe you just take the value of the
positive number, you flip all the bits so

209
00:13:28.997 --> 00:13:32.280
one becomes 00 becomes 1 and
then you add 1 to it into it.

210
00:13:33.770 --> 00:13:35.095
And for some strange reason,

211
00:13:35.095 --> 00:13:38.230
that particular optimization
is called two's complement.

212
00:13:38.230 --> 00:13:42.568
And the two's complement has this nice
property that if you add it to a number,

213
00:13:42.568 --> 00:13:44.950
you've effectively done a subtraction.

214
00:13:46.350 --> 00:13:52.151
&gt;&gt; So would you have one register,
basically save for just subtraction.

215
00:13:52.151 --> 00:13:56.200
&gt;&gt; No, the CPU has no instruction for
subtraction.

216
00:13:56.200 --> 00:13:58.988
I mean, maybe the modern CPUs have for
convenience or whatever, but

217
00:13:58.988 --> 00:14:01.260
fundamentally, CPUs do not
understand subtraction.

218
00:14:01.260 --> 00:14:04.200
All they understand is
adding two's complement.

219
00:14:04.200 --> 00:14:06.702
&gt;&gt; Yeah.
&gt;&gt; So the compiler will typically take

220
00:14:06.702 --> 00:14:10.700
your number and convert it into
a two's complement version, and

221
00:14:10.700 --> 00:14:12.670
then it will just add it.

222
00:14:12.670 --> 00:14:13.680
And so that's the subtraction.

223
00:14:13.680 --> 00:14:19.377
So if you say A minus B, it loads B
runs a two's complement operation on it,

224
00:14:19.377 --> 00:14:21.646
and then just says go and add.

225
00:14:21.646 --> 00:14:26.185
And so that's what I mean, like modern
CPUs might have a convenience instruction

226
00:14:26.185 --> 00:14:30.334
that internally automatically combines
two's complement in addition,

227
00:14:30.334 --> 00:14:33.425
but in terms of the hardware
that does the computation,

228
00:14:33.425 --> 00:14:36.684
the arithmetic logic unit only
knows how to do additions.

