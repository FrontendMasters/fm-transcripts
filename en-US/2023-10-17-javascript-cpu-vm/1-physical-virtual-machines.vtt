WEBVTT

1
00:00:00.410 --> 00:00:02.018
Let's talk about CPUs.

2
00:00:02.018 --> 00:00:04.570
I don't think this is a picture of a CPU,
or if it's a picture of a CPU,

3
00:00:04.570 --> 00:00:05.890
it's a really old one.

4
00:00:05.890 --> 00:00:08.600
Because CPUs today have a lot more legs.

5
00:00:08.600 --> 00:00:12.530
I think they're called legs, I don't know
what they're called, pinouts, or whatever.

6
00:00:12.530 --> 00:00:14.820
What it is is you have a chip, right?

7
00:00:14.820 --> 00:00:16.193
And the chip has a silicon.

8
00:00:16.193 --> 00:00:19.040
And silicon is protected in
this black packaging, right?

9
00:00:19.040 --> 00:00:20.951
So this is really just packaging,
what you're looking at,

10
00:00:20.951 --> 00:00:23.490
it's not actually silicon,
silicon's inside of it.

11
00:00:23.490 --> 00:00:27.442
And Silicons have wires out, and these
wires have to be connected to the rest

12
00:00:27.442 --> 00:00:29.930
of the system, and so
they have these pinouts.

13
00:00:29.930 --> 00:00:32.770
Usually, we do probably
bold grid arrays or

14
00:00:32.770 --> 00:00:38.420
other things these days because a CPU
today easily can have 500 pins, easily.

15
00:00:38.420 --> 00:00:41.673
Maybe the latest ones
are pushing thousand, so,

16
00:00:41.673 --> 00:00:46.090
you need a lot of legs to kind of wire up,
solder, et cetera.

17
00:00:46.090 --> 00:00:50.670
So the trend that's actually happening is
that, inside of this physical packaging,

18
00:00:50.670 --> 00:00:53.090
you have multiple pieces of silicon.

19
00:00:53.090 --> 00:00:55.742
So you'll have a silicon for
the CPU and a silicon for

20
00:00:55.742 --> 00:00:59.670
memory right next to each other, and
then they'll just interconnect them.

21
00:00:59.670 --> 00:01:03.774
You might be wondering why silicon for CPU
and memory actually have to be separate,

22
00:01:03.774 --> 00:01:06.670
why can't they be in physical,
same silicon?

23
00:01:06.670 --> 00:01:10.654
Turns out that the manufacturing
process for DRAM is incompatible for

24
00:01:10.654 --> 00:01:13.220
the management process for logic.

25
00:01:13.220 --> 00:01:16.983
And so they can't physically put them on
a same silicon, they have to actually have

26
00:01:16.983 --> 00:01:20.829
two separate silicones that have to go
through separate manufacturing processes.

27
00:01:22.480 --> 00:01:26.242
Okay, so I write something like this,
right, I write a array, and

28
00:01:26.242 --> 00:01:29.476
I maybe write a map on it, and
so if you look at it there's so

29
00:01:29.476 --> 00:01:33.634
much stuff going on in here that
are strings there's a concept of an array,

30
00:01:33.634 --> 00:01:35.834
there's a concept of a class, right?

31
00:01:35.834 --> 00:01:38.612
Array is a class that
has a method called Map,

32
00:01:38.612 --> 00:01:42.643
there is a property map that exists
on some prototype somewhere.

33
00:01:42.643 --> 00:01:47.231
There is a function that the VM has
to create that represents the mapping

34
00:01:47.231 --> 00:01:50.454
operation that are happening over here,
right?

35
00:01:50.454 --> 00:01:55.408
So there is a lot of things
that is inside of just a simple

36
00:01:55.408 --> 00:01:58.337
line of code like this, right?

37
00:01:58.337 --> 00:02:02.325
And so all of this has to get
translated to machine code.

38
00:02:02.325 --> 00:02:04.586
Machine code is this thing on the right.

39
00:02:04.586 --> 00:02:05.665
It's just numbers.

40
00:02:05.665 --> 00:02:07.482
It's really just numbers.

41
00:02:07.482 --> 00:02:08.614
That's the only thing
that CPUs understand.

42
00:02:08.614 --> 00:02:09.936
It's just numbers, right?

43
00:02:09.936 --> 00:02:14.802
And so the question then becomes well,
how does it happen, right?

44
00:02:14.802 --> 00:02:16.362
Like this is crazy magic.

45
00:02:16.362 --> 00:02:19.243
The thing in the middle
is what we call assembly,

46
00:02:19.243 --> 00:02:24.490
which is basically numbers converted
to a friendly human-readable text.

47
00:02:24.490 --> 00:02:27.430
It kinda represents in between state.

48
00:02:27.430 --> 00:02:30.780
But fundamentally that's what a VM is,
right?

49
00:02:30.780 --> 00:02:35.756
VM is translating the thing you
write into all these numbers

50
00:02:35.756 --> 00:02:38.450
that the CPU can go and execute.

51
00:02:40.580 --> 00:02:43.770
And so again, that's what the thing does.

52
00:02:43.770 --> 00:02:45.770
So there's many different VMs out there.

53
00:02:45.770 --> 00:02:49.930
I mean, the most famous one
probably is the V8, right?

54
00:02:49.930 --> 00:02:54.842
So many VMs for JavaScript there's
a lot more VMs there's Java VM

55
00:02:54.842 --> 00:02:58.697
there's other languages as well Python and
so on.

56
00:02:58.697 --> 00:03:04.621
This is for JavaScript spider monkey and
Script core core script.

57
00:03:04.621 --> 00:03:05.340
&gt;&gt; JavaScript core.

58
00:03:05.340 --> 00:03:05.967
&gt;&gt; JavaScript core.

59
00:03:05.967 --> 00:03:07.052
Nothing.
Yes.

60
00:03:07.052 --> 00:03:09.185
That from Apple, right?

61
00:03:09.185 --> 00:03:10.572
And so, surprisingly,

62
00:03:10.572 --> 00:03:14.935
I think on high enough level all these
VMs really fundamentally work the same.

63
00:03:14.935 --> 00:03:17.125
I mean,
the implementation details are different,

64
00:03:17.125 --> 00:03:19.885
the way they lay out things in
the memory is different, etc.

65
00:03:19.885 --> 00:03:21.665
But fundamentally,
they work on the same way.

66
00:03:21.665 --> 00:03:24.206
So if I can explain to you how one works,

67
00:03:24.206 --> 00:03:27.990
I'm hoping that all the other
ones Will be not too far off.

68
00:03:29.440 --> 00:03:33.242
And so, as I said, in physical machines,
physical CPUs, we have,

69
00:03:33.242 --> 00:03:36.320
at the end of the day,
all we have is numbers.

70
00:03:36.320 --> 00:03:37.590
Those are stored in memory, right?

71
00:03:37.590 --> 00:03:39.300
So you have a memory, and

72
00:03:39.300 --> 00:03:44.267
you can think of memory as a humongous
array of numbers T hat's all it is,

73
00:03:44.267 --> 00:03:49.790
right And then we have a CPU, and CPU can
do things like arithmetic operations.

74
00:03:49.790 --> 00:03:52.762
It can add numbers,
subtract numbers, divide,

75
00:03:52.762 --> 00:03:56.320
multiply logical operations on it,
and so on and so forth.

76
00:03:56.320 --> 00:04:00.609
And you have this flat memory that
somehow you have to turn into, like,

77
00:04:00.609 --> 00:04:03.699
interesting things like
objects with structure.

78
00:04:03.699 --> 00:04:08.783
If you have conditional jumps,
which is kind of like an if statement,

79
00:04:08.783 --> 00:04:13.621
sort of, but like a very primitive one,
and that's all you have.

80
00:04:13.621 --> 00:04:17.162
And you have this thing called subroutines
that if you squint squint hard enough,

81
00:04:17.162 --> 00:04:20.640
you can say like, it's kind of like
a function but not really, right?

82
00:04:20.640 --> 00:04:23.742
And out of these primitives,
you need to build up.

83
00:04:23.742 --> 00:04:26.600
Up this rich world of strings,
local variables,

84
00:04:26.600 --> 00:04:29.799
memory management with
garbage collection like nice,

85
00:04:29.799 --> 00:04:35.060
beautiful if switch statements, looping
things so you can do four while do right.

86
00:04:35.060 --> 00:04:39.980
Primitive types, objects and
arrays Classes, functions, closures,

87
00:04:39.980 --> 00:04:44.650
exceptions, stack traces,
none of those things exist, right?

88
00:04:44.650 --> 00:04:47.948
And so the VM has to create an illusion
of all of these things for us.

89
00:04:50.634 --> 00:04:57.170
And the way it works is that you have
a big array of memory, and you have a CPU.

90
00:04:57.170 --> 00:05:00.646
And CPU has what is known as registers,
basically,

91
00:05:00.646 --> 00:05:04.850
those you can think of those
ere as local variables.

92
00:05:04.850 --> 00:05:08.937
All right, very few different CPUs have
different amount in the demo I'm gonna

93
00:05:08.937 --> 00:05:11.080
show you I think only have two registers.

94
00:05:12.450 --> 00:05:18.960
All add six, some CPU, I believe had
like eight or somewhere in that range.

95
00:05:18.960 --> 00:05:24.302
I think modern CPUs probably have
60 to 100 kind of arrange of CPUs,

96
00:05:24.302 --> 00:05:27.080
but it's a limited number, right?

97
00:05:27.080 --> 00:05:32.130
That's tiny in comparison
to the size of the memory.

98
00:05:32.130 --> 00:05:35.440
Then there's the ALU, which stands for
Arithmetic Logic Unit.

99
00:05:35.440 --> 00:05:37.350
This basically knows how to do math.

100
00:05:37.350 --> 00:05:38.910
Any kind of math you can think of.

101
00:05:38.910 --> 00:05:43.010
Multiplication, division, subtraction,
whatever, math goes here, right?

102
00:05:43.010 --> 00:05:47.369
And, one,
there's a couple of special registers.

103
00:05:47.369 --> 00:05:49.854
In this I don't know why they
pull out this special or

104
00:05:49.854 --> 00:05:53.881
just go to program counter there's other
ones like stack Connery and other things.

105
00:05:53.881 --> 00:05:58.585
And then what a program counter does is
basically just has a pointer to a location

106
00:05:58.585 --> 00:06:01.054
of the next instruction to read, right?

107
00:06:01.054 --> 00:06:05.927
And so the way this works is
that the CPU on its address bus,

108
00:06:05.927 --> 00:06:11.798
this shows a line but
it's a 64-bit CPU will have 64-bit wires,

109
00:06:11.798 --> 00:06:18.289
will say to the memory, I need the data
from this specific location, right?

110
00:06:18.289 --> 00:06:22.254
And then the memory will send back
the data on the memory bus right here.

111
00:06:22.254 --> 00:06:27.978
Again, 64 bits, or you can see how we can
easily get to 500 pinouts on a CPU, right?

112
00:06:27.978 --> 00:06:32.140
Because each of these buses require
as wide as the bits you have.

113
00:06:32.140 --> 00:06:33.932
This sends the instruction in.

114
00:06:33.932 --> 00:06:36.680
And this instruction
tells the CPU what to do.

115
00:06:37.700 --> 00:06:41.305
Instruction might say, take this
number and put it on register A, or

116
00:06:41.305 --> 00:06:44.289
take this number from register B and
add it to register A or

117
00:06:44.289 --> 00:06:46.570
something of that sort, right?

118
00:06:46.570 --> 00:06:50.136
And the program counter automatically
increments and basically reads the next

119
00:06:50.136 --> 00:06:53.822
location in memory for the next thing that
the CPU is supposed to be doing, right?

120
00:06:53.822 --> 00:06:58.572
So you have this program counter that
is just incrementing, reading the data

121
00:06:58.572 --> 00:07:03.175
from the memory, and each number that
shows up is a specific instruction,

122
00:07:03.175 --> 00:07:07.360
meaning this number means you are to
add these two things together.

123
00:07:07.360 --> 00:07:09.939
Or this number means you are to
do this operation, right?

124
00:07:11.530 --> 00:07:13.401
And so that's basically what it is.

