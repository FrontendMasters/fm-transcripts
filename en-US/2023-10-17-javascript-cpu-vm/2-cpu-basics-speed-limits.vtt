WEBVTT

1
00:00:00.126 --> 00:00:03.886
I have a model of a CPU, right?

2
00:00:03.886 --> 00:00:07.331
And we are gonna import
memory from a separate file,

3
00:00:07.331 --> 00:00:09.694
I'll show you the file in a second.

4
00:00:09.694 --> 00:00:11.880
Actually let's go into the file.

5
00:00:11.880 --> 00:00:14.183
This is a super simple memory.

6
00:00:14.183 --> 00:00:18.267
All it says is, if I hover over,
you can see that this happens to be 100.

7
00:00:18.267 --> 00:00:21.944
I just randomly assign numbers
to these instructions, but

8
00:00:21.944 --> 00:00:24.010
these are just numbers, right?

9
00:00:24.010 --> 00:00:28.911
And so basically, it says a 100, 5,

10
00:00:28.911 --> 00:00:34.239
111, 3, 4, 1, and then 0, right?

11
00:00:34.239 --> 00:00:39.829
And so to CPU that 100 means
load a constant into register0,

12
00:00:39.829 --> 00:00:41.910
which means, read 5.

13
00:00:41.910 --> 00:00:44.730
Again, the numbers are made up, right,
like just just kind of prove the point.

14
00:00:44.730 --> 00:00:48.020
Different architectures basically have
different meanings for these numbers.

15
00:00:48.020 --> 00:00:51.946
So this one loads 5, and
then it says Register1, load 3, and

16
00:00:51.946 --> 00:00:55.310
then it says add Register 1 to Register0.

17
00:00:55.310 --> 00:00:58.970
So now you should be ending up with
8 inside of Registers0, right?

18
00:00:58.970 --> 00:01:00.883
So if I go and run this code,

19
00:01:00.883 --> 00:01:06.180
so what you can see is that in
memory we have these numbers, right?

20
00:01:06.180 --> 00:01:08.987
And these are the registers
that exist in the CPU.

21
00:01:08.987 --> 00:01:11.051
I've kind of split them out for you here.

22
00:01:11.051 --> 00:01:15.260
So you can see program counter
starts at 0, the R1 and R1 is,

23
00:01:15.260 --> 00:01:18.528
everything's zeroed out
at the initial state.

24
00:01:18.528 --> 00:01:22.955
And then it reads an instruction that
says load 5 into R0, so after this,

25
00:01:22.955 --> 00:01:25.715
there is a 5 in Register1, load 3 into R1.

26
00:01:25.715 --> 00:01:27.621
Now we have a 3 in the Register 1.

27
00:01:27.621 --> 00:01:32.358
Then we'd say instruction to add
perform the odd operations of 3 and

28
00:01:32.358 --> 00:01:37.352
5 becomes 8, and you can see that
there is now 8 inside of Register 0.

29
00:01:37.352 --> 00:01:41.248
And then I just have a halt instruction
completely stop doing anything you're

30
00:01:41.248 --> 00:01:42.259
finished, right?

31
00:01:42.259 --> 00:01:44.536
Fundamentally, that's what a CPU is.

32
00:01:44.536 --> 00:01:49.391
Now, it's kind of important to
understand the nuances of it all.

33
00:01:49.391 --> 00:01:52.065
So let's build something more complicated.

34
00:01:52.065 --> 00:01:57.359
The first thing that I wanted to show
you is, this isn't the real thing

35
00:01:57.359 --> 00:02:03.215
because 3 and 5 are constants that
are encoded within the program, right?

36
00:02:03.215 --> 00:02:09.099
And what this code really hasn't done is
it hasn't only shown you how to read or

37
00:02:09.099 --> 00:02:11.607
write data into memory, right?

38
00:02:11.607 --> 00:02:15.922
And so we're gonna build more complicated
versions of it in a second, but

39
00:02:15.922 --> 00:02:18.923
I just wanted to show you
the basics of CPU, right?

40
00:02:18.923 --> 00:02:24.794
So the CPU has these registers, these are,
you can think of them as local variables.

41
00:02:24.794 --> 00:02:26.500
Flags, we'll talk about later.

42
00:02:26.500 --> 00:02:28.201
Here's our program counter,

43
00:02:28.201 --> 00:02:31.868
which is a special register that
automatically increments to read

44
00:02:31.868 --> 00:02:36.270
the Nix instructions and stack pointer
which we're going to talk about later.

45
00:02:36.270 --> 00:02:41.327
I pronounced the memory state, right,
you can see I log out some information so

46
00:02:41.327 --> 00:02:45.875
that you can kind of see it and it
really is just a loop that runs forever.

47
00:02:45.875 --> 00:02:52.243
And what the loop does is it says, grab me
the next instruction from a memory, right?

48
00:02:52.243 --> 00:02:55.980
So take a look at the address of
the program counter, go fetch the data,

49
00:02:55.980 --> 00:02:58.367
and increment the program counter, right?

50
00:02:58.367 --> 00:03:01.526
And now we have a decode step,
so now we have this we go and

51
00:03:01.526 --> 00:03:03.761
look like what instruction do we have?

52
00:03:03.761 --> 00:03:05.210
Is it a HALT?

53
00:03:05.210 --> 00:03:08.043
So I believe the first
instruction was load R3.

54
00:03:08.043 --> 00:03:11.423
So it was load constant to R0,
right, was this one right here.

55
00:03:11.423 --> 00:03:15.266
And what this instruction
really does is just says fine,

56
00:03:15.266 --> 00:03:20.885
just take the program counter location
again and load it into Register 0, right?

57
00:03:20.885 --> 00:03:24.300
And that's how we loaded
the information in.

58
00:03:24.300 --> 00:03:25.127
And of course,

59
00:03:25.127 --> 00:03:28.822
I have some logging information here
to kind of see what's going on.

60
00:03:28.822 --> 00:03:33.721
But fundamentally, this is the operation
that was performed by the CPU, right?

61
00:03:33.721 --> 00:03:36.142
You can see the same thing for
load constant R1.

62
00:03:36.142 --> 00:03:38.434
It's the same exact thing, but
this time we're doing it R1.

63
00:03:38.434 --> 00:03:43.197
There is a difference R0 is special,
and it has these things called flags.

64
00:03:43.197 --> 00:03:45.951
Flags will make more sense
when we talk about jumps.

65
00:03:45.951 --> 00:03:48.844
So just ignore them for a second.

66
00:03:48.844 --> 00:03:53.569
And you can just see that all the CPU is
basically this huge decode thing that

67
00:03:53.569 --> 00:03:57.844
kind of figures out like, okay,
so the instruction was whatever,

68
00:03:57.844 --> 00:04:01.528
that means I have to perform
one of these many operations.

69
00:04:01.528 --> 00:04:03.315
And these operations,

70
00:04:03.315 --> 00:04:09.750
basically say how to fetch data how to
add data how to manipulate data etc.

71
00:04:09.750 --> 00:04:14.202
The speed of the CPU,
we measure things in kind of gigahertz,

72
00:04:14.202 --> 00:04:18.350
right, the frequency by
which we can process it.

73
00:04:18.350 --> 00:04:21.628
The way to think about it is,
at the end of the day,

74
00:04:21.628 --> 00:04:25.000
we kind of reached the limit
in terms of megahertz.

75
00:04:25.000 --> 00:04:27.434
If you look at it through the history,

76
00:04:27.434 --> 00:04:31.160
I remember when I was a kid my
first computer was at 86xD,

77
00:04:31.160 --> 00:04:35.965
it was running at a whopping 5 megahertz
not gigahertz megahertz, okay?

78
00:04:35.965 --> 00:04:41.684
And over time, I could watch like it
goes from 5 megahertz to 40 megahertz,

79
00:04:41.684 --> 00:04:47.158
25 to 50, 100, and every time it
went up I was like this is amazing.

80
00:04:47.158 --> 00:04:51.084
And every year the megahertz just
would go up, and up, and up and

81
00:04:51.084 --> 00:04:56.032
then it finally hit about 2.5 to 4
gigahertz, and we've been stuck there for

82
00:04:56.032 --> 00:05:01.240
last, I don't know, 10 to 15 years,
we haven't really moved, right?

83
00:05:01.240 --> 00:05:02.823
So fundamentally,

84
00:05:02.823 --> 00:05:08.930
we kind of reached the limit of how
fast we can move the electrons around.

85
00:05:08.930 --> 00:05:14.150
And one way to think about it is, I'm
gonna get the math wrong, so I apologize.

86
00:05:14.150 --> 00:05:21.002
One way to think about speed is how fast
can electron travel in a given time?

87
00:05:21.002 --> 00:05:25.070
Actually, let me rephrase that just to
kind of blow your mind a little bit.

88
00:05:25.070 --> 00:05:26.610
How fast do electrons move?

89
00:05:26.610 --> 00:05:27.750
Anybody?

90
00:05:27.750 --> 00:05:29.050
&gt;&gt; Speed of light?

91
00:05:29.050 --> 00:05:30.663
&gt;&gt; Not even close.

92
00:05:30.663 --> 00:05:34.727
[LAUGH] This is a trick question,
I'm so sorry.

93
00:05:34.727 --> 00:05:38.494
Electrons have weight, and therefore,
sorry for going into physics here.

94
00:05:38.494 --> 00:05:41.289
[LAUGH] Electrons have weight,
and because they have weight,

95
00:05:41.289 --> 00:05:43.286
they can never approach
the speed of light.

96
00:05:43.286 --> 00:05:46.953
Photons have no weight and they can go
speed of light, but electrons cannot.

97
00:05:46.953 --> 00:05:51.332
Turns out electrons in your
devices go extremely slow

98
00:05:51.332 --> 00:05:54.650
on the order of centimeters per second.

99
00:05:55.930 --> 00:06:00.642
Let that sink in, centimeters per second.

100
00:06:02.856 --> 00:06:06.645
So how is electricity instant?

101
00:06:06.645 --> 00:06:11.275
Okay, the reason electricity is instant is
because electrons don't like each other.

102
00:06:11.275 --> 00:06:14.246
And so when you push on this electron
here, it pushes on the next one, and

103
00:06:14.246 --> 00:06:17.140
it pushes on the next one,
it pushes on the next one, right?

104
00:06:17.140 --> 00:06:22.030
And the propagation of the pushing
is at the speed of light.

105
00:06:22.030 --> 00:06:25.330
The electrons themselves are super slow.

106
00:06:25.330 --> 00:06:26.970
So there's something
called an electron drift.

107
00:06:27.990 --> 00:06:30.334
And that's what measures
the speed of the electrons.

108
00:06:30.334 --> 00:06:35.649
And if you get the electrons going
any reasonable speed, running speed,

109
00:06:35.649 --> 00:06:40.806
like for humans, how we would walk etc,
electrons tend to melt wires.

110
00:06:40.806 --> 00:06:45.147
So the speed of electrons is extremely
slow, it's the propagation of the wave

111
00:06:45.147 --> 00:06:48.258
that is speed of light,
not the electrons themselves.

112
00:06:48.258 --> 00:06:51.333
Sorry for the digression,
let's go back to it.

113
00:06:51.333 --> 00:06:55.711
So one way to think about speed is,
how far can light or

114
00:06:55.711 --> 00:06:59.029
this propagation of travel in a second.

115
00:06:59.029 --> 00:07:03.265
And so a nanosecond is this long, right,

116
00:07:03.265 --> 00:07:07.144
in terms of how fast you can go places.

117
00:07:07.144 --> 00:07:10.232
So nanoseconds, we're talking about,

118
00:07:10.232 --> 00:07:15.537
if I remember my math correctly, and
somebody should double check me.

119
00:07:15.537 --> 00:07:18.349
I believe nanoseconds equals gigahertz.

120
00:07:18.349 --> 00:07:20.167
Is that right?

121
00:07:20.167 --> 00:07:26.506
So gigahertz means a million flips
back and forth per second, right?

122
00:07:26.506 --> 00:07:31.276
So a nanosecond would be one-millionth
of a second if I get this right.

123
00:07:31.276 --> 00:07:32.724
Can you double check me?

124
00:07:32.724 --> 00:07:34.275
&gt;&gt; Gigahertz is a billion.

125
00:07:34.275 --> 00:07:34.914
&gt;&gt; Is it a billion?

126
00:07:34.914 --> 00:07:36.476
&gt;&gt; Yeah.
&gt;&gt; In Gigahertz is a billion?

127
00:07:36.476 --> 00:07:37.509
&gt;&gt; Yeah.
&gt;&gt; Okay, but

128
00:07:37.509 --> 00:07:42.148
I believe a nanosecond is about this long
in terms of what light travels, right?

129
00:07:42.148 --> 00:07:46.347
And I think a gigahertz is
a billion of hertz, right?

130
00:07:46.347 --> 00:07:47.827
So that's what equals, okay?

131
00:07:47.827 --> 00:07:49.240
So here's the problem.

132
00:07:49.240 --> 00:07:54.069
That's a gigahertz,
if you move it down to 4 gigahertz, so

133
00:07:54.069 --> 00:08:01.170
that's one quarter that's about this much,
that's about the size of a CPU, okay?

134
00:08:01.170 --> 00:08:06.154
This is why we're not gonna go much
faster than what we currently are,

135
00:08:06.154 --> 00:08:08.613
chips are about this big, right?

136
00:08:08.613 --> 00:08:12.447
You can't go much faster,
you can't get into a situation where

137
00:08:12.447 --> 00:08:16.920
you flip something on one side of
the chip, and there isn't enough time for

138
00:08:16.920 --> 00:08:21.330
speed of light to get to the other side
of the chip to do something, right?

139
00:08:21.330 --> 00:08:24.824
So this is the reason why
we're hitting this limit.

140
00:08:24.824 --> 00:08:30.399
And the reason I'm telling you all this,
it's cuz I wanna convince you that,

141
00:08:30.399 --> 00:08:34.723
in the future,
we're not gonna see 100 gigahertz CPUs.

142
00:08:34.723 --> 00:08:38.321
It's just not gonna happen because there's
physical limitations that are preventing

143
00:08:38.321 --> 00:08:39.253
this from happening.

144
00:08:41.030 --> 00:08:42.579
Anyway, so getting back to this.

145
00:08:42.579 --> 00:08:45.378
So what we've seen is that
the CPU speed has gone up.

146
00:08:45.378 --> 00:08:49.634
The other thing we can do to make
the computer's faster or CPUs faster is,

147
00:08:49.634 --> 00:08:53.151
we can be really clever about
doing multiple things at once.

148
00:08:53.151 --> 00:08:58.857
So in the past, it took several
clock cycles to process a operation.

149
00:08:58.857 --> 00:09:03.468
So like an operation like load
constantly to Register 0 it might have

150
00:09:03.468 --> 00:09:05.540
taken multiple clock cycles.

151
00:09:05.540 --> 00:09:09.173
So one clock cycles for
the CPU to decode what instruction says,

152
00:09:09.173 --> 00:09:13.220
another clock cycle to go to the memory,
and so on and so forth, right?

153
00:09:13.220 --> 00:09:17.311
And so CPUs got really good at
parallelizing things together.

154
00:09:17.311 --> 00:09:20.286
So now what you can have is
that on any given one cycle,

155
00:09:20.286 --> 00:09:24.535
you can actually have multiple
instructions getting processed by the CPU.

156
00:09:24.535 --> 00:09:27.778
Now you can imagine that that creates
problems because instructions have

157
00:09:27.778 --> 00:09:29.880
codependencies between themselves, right?

158
00:09:29.880 --> 00:09:34.389
You can say, if you have Instruction A,
it might need data from Instruction B.

159
00:09:34.389 --> 00:09:38.820
And so now you get to the world
of speculative execution.

160
00:09:38.820 --> 00:09:42.591
And what speculative execution basically
says is that, let's say I come across

161
00:09:42.591 --> 00:09:45.925
an if statement, I need to make
a decision, do I go this way or that way?

162
00:09:45.925 --> 00:09:50.283
One way to do it is to say, well, let me
just stall the pipeline, meaning that,

163
00:09:50.283 --> 00:09:53.603
let me just wait until the previous
instruction completes so

164
00:09:53.603 --> 00:09:57.700
that I have the data to make
a decision about how to go next, right?

165
00:09:57.700 --> 00:10:01.644
And you can imagine that, if statements
are pretty common, inside of CPUs, and

166
00:10:01.644 --> 00:10:04.609
so, as a result,
you would stall the pipeline quite often.

167
00:10:05.700 --> 00:10:09.898
And so
what modern CPUs do is they say, well,

168
00:10:09.898 --> 00:10:13.443
how about we guess whether we go A or B.

169
00:10:13.443 --> 00:10:14.599
Let's just make an educated guess.

170
00:10:14.599 --> 00:10:19.596
So what they do is they keep statistics,
and they see like last time I was at this

171
00:10:19.596 --> 00:10:24.628
branch I went that way, so let's just go
the same way as I did last time, okay?

172
00:10:24.628 --> 00:10:27.271
And so that's called
speculative execution, and so

173
00:10:27.271 --> 00:10:31.180
the CPU starts executing something
that may not be correct, right?

174
00:10:31.180 --> 00:10:32.889
And so the CPU executes that, and

175
00:10:32.889 --> 00:10:36.248
eventually the previous instruction
completes and says, yes,

176
00:10:36.248 --> 00:10:39.250
the value is this, and
the guess you have made is correct.

177
00:10:39.250 --> 00:10:41.190
And usually the answer is yes,
it's correct.

178
00:10:41.190 --> 00:10:44.922
And the CPU can then take the data that it
computed and commit it into its official

179
00:10:44.922 --> 00:10:49.020
registers and say, yep, that was correct,
and let's keep executing.

180
00:10:49.020 --> 00:10:52.171
Sometimes the CPU gets this wrong, and
basically all the work that it has done

181
00:10:52.171 --> 00:10:55.099
has to be thrown away, it cannot be
committed, it's the wrong thing.

182
00:10:55.099 --> 00:10:58.331
And sometimes we get
bizarre bugs like this.

183
00:10:58.331 --> 00:10:58.892
What is it called?

184
00:10:58.892 --> 00:11:01.108
Scepter?

185
00:11:01.108 --> 00:11:06.335
Where you speculatively execute and
read memory that doesn't belong to you,

186
00:11:06.335 --> 00:11:10.610
and then you get to read memory
that might contain a private key or

187
00:11:10.610 --> 00:11:13.561
something like that few years ago.

188
00:11:13.561 --> 00:11:15.711
&gt;&gt; That bug blew up the Internet-
&gt;&gt; Yeah.

189
00:11:15.711 --> 00:11:16.549
&gt;&gt; Four years ago.

190
00:11:16.549 --> 00:11:18.749
&gt;&gt; Yeah, that by the globe and
they're few years ago, right?

191
00:11:18.749 --> 00:11:19.827
&gt;&gt; Yeah
&gt;&gt; The hilarious

192
00:11:19.827 --> 00:11:22.769
thing about the bug is that
it's working as intended.

193
00:11:22.769 --> 00:11:27.556
Modern CPUs all have speculative
execution and speculative execution

194
00:11:27.556 --> 00:11:32.671
means that at times the CPU can end up
executing stuff it's not supposed to.

195
00:11:32.671 --> 00:11:37.381
The CPU is good about like not committing
it and so you don't get to see it, but

196
00:11:37.381 --> 00:11:39.283
you can see a side effect of it.

197
00:11:39.283 --> 00:11:42.926
And a side effect of it is that you can

198
00:11:42.926 --> 00:11:47.551
see what got loaded into an L0 and
L1 cache.

199
00:11:47.551 --> 00:11:52.335
And through that in direction it
is possible to figure out what

200
00:11:52.335 --> 00:11:56.391
data was read in memory
that doesn't belong to you.

201
00:11:56.391 --> 00:11:59.746
And that was a huge problem
that kind of blew up.

202
00:11:59.746 --> 00:12:01.267
Anyways, I digress.

203
00:12:01.267 --> 00:12:04.200
&gt;&gt; As someone said,
it was called zero-day specter.

204
00:12:04.200 --> 00:12:06.387
&gt;&gt; Zero-day specter, yeah, yeah.

205
00:12:06.387 --> 00:12:08.593
So that came on it.

206
00:12:08.593 --> 00:12:11.856
So what I'm showing you here is all
the different tricks we have for

207
00:12:11.856 --> 00:12:13.439
making CPUs go faster, right?

208
00:12:13.439 --> 00:12:16.964
Trick 1 is make the clock go faster and
we have reached the limit.

209
00:12:16.964 --> 00:12:20.895
Trick 2 is do more operations per clock.

210
00:12:20.895 --> 00:12:22.532
In other words, parallelism.

211
00:12:22.532 --> 00:12:24.909
And I'm gonna argue that
we've also reached the limit.

212
00:12:24.909 --> 00:12:29.867
Modern CPUs can probably keep somewhere
on the order of five to ten instructions

213
00:12:29.867 --> 00:12:34.307
concurrently, in memory going through
the pipeline of decode stage,

214
00:12:34.307 --> 00:12:39.201
arithmetic stage, commit stage, and
all the other branching that happens.

215
00:12:39.201 --> 00:12:40.884
So again, we probably reached the limit,

216
00:12:40.884 --> 00:12:43.320
I don't think we can do
much more complicated.

217
00:12:43.320 --> 00:12:49.080
And so the only thing we have to
us today is adding more cores.

218
00:12:49.080 --> 00:12:51.590
And so we've seen that in
the recent years, right?

219
00:12:51.590 --> 00:12:53.670
CPUs keep adding more and more cores.

220
00:12:53.670 --> 00:12:59.999
And so now it's not uncommon for
your phone to have 16 cores.

221
00:12:59.999 --> 00:13:02.762
I forget the exact number, but
I think it's on the order of 16.

222
00:13:02.762 --> 00:13:06.835
And what's cool about it is,
some of the cores are high performance,

223
00:13:06.835 --> 00:13:10.369
meaning they eat a lot of battery,
but they're super fast.

224
00:13:10.369 --> 00:13:15.761
And some of the cores are slow,
but they sip on a battery, right?

225
00:13:15.761 --> 00:13:18.824
And so with the CPU, what it
actually does, or the applications,

226
00:13:18.824 --> 00:13:20.940
usually they run on the slow cores.

227
00:13:20.940 --> 00:13:22.977
But then when they need to
do something complicated,

228
00:13:22.977 --> 00:13:26.720
they switch over to the fast core and
do the complicated stuff and go back down.

229
00:13:26.720 --> 00:13:29.540
Now, why does all this stuff matter for
JavaScript?

230
00:13:29.540 --> 00:13:33.210
It matters because,
JavaScript has a design flaw, and

231
00:13:33.210 --> 00:13:35.794
that is that it's single-threaded.

232
00:13:35.794 --> 00:13:39.419
Which means,
we can only utilize one CPU at a time.

233
00:13:41.000 --> 00:13:47.800
So you might be figuring, hey, let's
build, our app is slow, we don't care.

234
00:13:47.800 --> 00:13:51.693
In the future the CPUs will be faster,
not really.

235
00:13:51.693 --> 00:13:56.449
Yes, we have been making amazing
progress in terms of when you look at

236
00:13:56.449 --> 00:14:01.287
a modern device and you say how many
teraflops of data it can process and

237
00:14:01.287 --> 00:14:03.450
these amazing numbers.

238
00:14:03.450 --> 00:14:07.822
But it's bit of a cheating because those
are numbers that are sum of all the cores

239
00:14:07.822 --> 00:14:10.570
when all the cores
are pushing all at once.

240
00:14:10.570 --> 00:14:15.300
But our single threaded JavaScript
can't take advantage of that.

241
00:14:15.300 --> 00:14:18.790
Now there's ways to make a multi threaded
through service workers or other tricks.

242
00:14:19.800 --> 00:14:23.357
But fundamentally,
we're in the single threaded world and so

243
00:14:23.357 --> 00:14:24.750
we get to have one CPU.

244
00:14:24.750 --> 00:14:29.859
So even if you have modern
computer with lots of cores and

245
00:14:29.859 --> 00:14:33.128
whatever you get to use one, okay?

246
00:14:33.128 --> 00:14:34.994
So, I kind of digress.

247
00:14:34.994 --> 00:14:36.546
Have any questions at this point?

248
00:14:36.546 --> 00:14:38.448
Yes.

249
00:14:38.448 --> 00:14:41.399
&gt;&gt; JavaScript being single threaded,

250
00:14:41.399 --> 00:14:46.728
is that a limitation of the JavaScript
engine that's being used or

251
00:14:46.728 --> 00:14:51.176
is that like a more fundamental
&gt;&gt; It's a limitation of

252
00:14:51.176 --> 00:14:53.796
the design really, right?

253
00:14:53.796 --> 00:14:56.237
&gt;&gt; Of the design of the language itself?

254
00:14:56.237 --> 00:15:01.149
&gt;&gt; I would say that all languages in their
nature are fundamentally single threaded,

255
00:15:01.149 --> 00:15:01.650
right?

256
00:15:01.650 --> 00:15:06.270
But many languages like for example,
Go have lots of primitives for

257
00:15:06.270 --> 00:15:09.525
taking work and
pushing it on the other thread.

258
00:15:09.525 --> 00:15:12.634
Now JavaScript does have a primitive,
which is a service worker, but

259
00:15:12.634 --> 00:15:15.386
that primitive I wouldn't call
it a light weight primitive.

260
00:15:15.386 --> 00:15:22.056
So in Go this go sub routines are
extremely cheap and and easy to work with.

261
00:15:22.056 --> 00:15:25.305
In JavaScript, if you wanted to have
some work done on a service worker,

262
00:15:25.305 --> 00:15:26.227
that's not cheap.

263
00:15:26.227 --> 00:15:31.160
That's a lot of work in terms
of you as a developer to code,

264
00:15:31.160 --> 00:15:35.993
but also a lot of work in terms
of the computer to execute,

265
00:15:35.993 --> 00:15:40.726
but also a lot of work in terms
of the fact that the service

266
00:15:40.726 --> 00:15:45.191
worker doesn't share memory
with the main thread.

267
00:15:45.191 --> 00:15:48.156
And so passing data between,
requires a serialization and

268
00:15:48.156 --> 00:15:49.883
deserialization stuff, right?

269
00:15:49.883 --> 00:15:52.931
You basically have to convert everything
to JSON, send it over as a string, and

270
00:15:52.931 --> 00:15:54.760
the other side has to
convert everything back.

271
00:15:54.760 --> 00:15:58.364
Now, there are new things in there, like
shared array buffers and other things that

272
00:15:58.364 --> 00:16:02.140
are coming to JavaScript, but as of right
now, we don't really have good primitives.

273
00:16:02.140 --> 00:16:06.565
Now, in the future, it's possible
that the language will evolve and

274
00:16:06.565 --> 00:16:10.780
we'll get some primitives that
are useful for multiple CPUs.

275
00:16:10.780 --> 00:16:16.100
But as of today, the way we are today,
JavaScript is single-threaded.

276
00:16:16.100 --> 00:16:21.095
And again, I'm gonna say all languages
fundamentally are single-threaded,

277
00:16:21.095 --> 00:16:26.091
it's just some languages have primitives
then make it easy to basically offload

278
00:16:26.091 --> 00:16:27.620
work to other things.

279
00:16:27.620 --> 00:16:29.900
&gt;&gt; Service workers
are native to the browser.

280
00:16:29.900 --> 00:16:31.730
&gt;&gt; Yes.
&gt;&gt; So for like NodeJS,

281
00:16:31.730 --> 00:16:36.825
there you have no really option for
another thread the, right?

282
00:16:36.825 --> 00:16:37.572
&gt;&gt; Correct.

283
00:16:37.572 --> 00:16:41.231
So NodeJS,
you have to spawn up separate isolates.

284
00:16:41.231 --> 00:16:42.431
What are they call them?

285
00:16:42.431 --> 00:16:43.584
&gt;&gt; Process.
&gt;&gt; Processes

286
00:16:43.584 --> 00:16:44.084
&gt;&gt; Child.

287
00:16:44.084 --> 00:16:45.132
&gt;&gt; Child's or whatever?

288
00:16:45.132 --> 00:16:46.922
Yeah, those are separate threads, right?

289
00:16:46.922 --> 00:16:48.711
So if you wanna do more work,

290
00:16:48.711 --> 00:16:53.593
that's basically how it goes.
And the problem becomes, I don't know,

291
00:16:53.593 --> 00:16:57.445
can you easily share streams
between child and parent?

292
00:16:57.445 --> 00:17:01.143
Probably, it's tricky.

293
00:17:01.143 --> 00:17:04.573
Okay, so let's go further.

