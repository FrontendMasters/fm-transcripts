WEBVTT

1
00:00:00.260 --> 00:00:02.820
So let's go to one more thing.

2
00:00:02.820 --> 00:00:05.340
So let's talk about holey arrays.

3
00:00:05.340 --> 00:00:09.477
These are my favorite because they're
not holy as in religious, they're holey,

4
00:00:09.477 --> 00:00:11.730
as in they have holes inside of them.

5
00:00:11.730 --> 00:00:14.844
Okay, and okay, so

6
00:00:14.844 --> 00:00:19.615
let's talk about them first.

7
00:00:19.615 --> 00:00:22.245
So imagine you write something like this.

8
00:00:22.245 --> 00:00:27.535
You say array, 1, 2, and then you leave
a space over there and put three.

9
00:00:27.535 --> 00:00:32.381
Now, you would think so
if you read the, let's see, so 0, 1, 2.

10
00:00:32.381 --> 00:00:36.028
If you read location 2,
you'd get undefined.

11
00:00:36.028 --> 00:00:40.332
And you might think that what
actually happened was that you have

12
00:00:40.332 --> 00:00:42.329
undefined in this location.

13
00:00:42.329 --> 00:00:44.561
But that is not what's actually happening.

14
00:00:44.561 --> 00:00:51.652
What's happening is that you have a hole.

15
00:00:51.652 --> 00:00:56.471
And if you try to read that location,
you will go up the prototype chain to

16
00:00:56.471 --> 00:00:59.948
the object array and
see what's at the location 2.

17
00:00:59.948 --> 00:01:02.313
And if there is some value at location 2,

18
00:01:02.313 --> 00:01:05.227
then you will get something
other than undefined.

19
00:01:05.227 --> 00:01:09.983
Now you can see how arrays with
holes might be a problem for

20
00:01:09.983 --> 00:01:12.072
the optimizer, right?

21
00:01:12.072 --> 00:01:17.967
Because if you know ahead of time that
you have just an array of numbers,

22
00:01:17.967 --> 00:01:22.011
the access and
manipulation is so much cheaper.

23
00:01:22.011 --> 00:01:25.954
Cuz if you've to add things together, you
know it's perfectly safe to read the value

24
00:01:25.954 --> 00:01:30.375
and put it on the register and add it to
something and move on with your life.

25
00:01:30.375 --> 00:01:34.513
On the other hand, if you have an array
that can have many different shapes

26
00:01:34.513 --> 00:01:38.010
inside of it, then you can't
just read the value and do this.

27
00:01:38.010 --> 00:01:41.911
First of all, you know that if
you read the value between 0 and

28
00:01:41.911 --> 00:01:47.150
the length of the array, it is safe
to go and access out of the memory.

29
00:01:47.150 --> 00:01:49.334
But if you read outside of the length,

30
00:01:49.334 --> 00:01:53.710
then you need to use prototype
chain to resolve it to undefined.

31
00:01:53.710 --> 00:01:57.162
And this is the weird part, you actually
have to go through a prototype chain.

32
00:01:57.162 --> 00:02:02.269
Because if you don't, there could be
something in a prototype on location 7,

33
00:02:02.269 --> 00:02:05.563
and then you read 7 and
your array is only six size.

34
00:02:05.563 --> 00:02:07.241
So you think you'd get on the you don't.

35
00:02:07.241 --> 00:02:12.002
You get whatever is at the prototype of 7.

36
00:02:12.002 --> 00:02:16.706
And so it kind of becomes, basically,
this particular operation becomes tricky.

37
00:02:16.706 --> 00:02:20.996
This adding, because you might get,
sorry, the reading part becomes tricky

38
00:02:20.996 --> 00:02:23.932
because you might get weird
values out of the system.

39
00:02:23.932 --> 00:02:26.706
So when you do something like this,

40
00:02:26.706 --> 00:02:32.160
when you say that you're gonna put
-3 at location 2, when you go and

41
00:02:32.160 --> 00:02:37.073
read this particular bit right here,
you're gonna get -3.

42
00:02:37.073 --> 00:02:40.912
And you can see how it ruins the day for
the optimizer.

43
00:02:40.912 --> 00:02:45.316
So, what happens in JavaScript
is that even though you have

44
00:02:45.316 --> 00:02:47.795
one exact type of array, right?

45
00:02:47.795 --> 00:02:50.765
There's only one thing called
an array as far as you're concerned.

46
00:02:50.765 --> 00:02:55.241
Internally the V8 has lots of
different types for arrays.

47
00:02:55.241 --> 00:02:59.957
It basically tracks things and says, hey,
is this an array of nothing but integers?

48
00:02:59.957 --> 00:03:02.080
If so, there's a special subclass for it.

49
00:03:02.080 --> 00:03:04.188
You can't see it as a developer, but

50
00:03:04.188 --> 00:03:08.340
the the VM does because it knows that
it can do all kinds of optimization.

51
00:03:08.340 --> 00:03:13.343
If you can promise me that that
particular array will have nothing but

52
00:03:13.343 --> 00:03:17.320
numbers inside of it,
I can do a bunch of other things.

53
00:03:18.385 --> 00:03:22.062
There are specified arrays for
numbers, specified arrays for

54
00:03:22.062 --> 00:03:23.985
floating point numbers.

55
00:03:23.985 --> 00:03:26.650
There is specified arrays for
mixed types, so

56
00:03:26.650 --> 00:03:30.355
that meaning you can have objects
and/or numbers inside of it.

57
00:03:30.355 --> 00:03:35.166
And everything else has also additional
subclass called the holey arrays,

58
00:03:35.166 --> 00:03:39.300
which is the array that could
have a hole inside of it, okay?

59
00:03:39.300 --> 00:03:43.458
And these holey arrays are bane of your
existence in terms of performance,

60
00:03:43.458 --> 00:03:46.470
because they will cause
all kinds of problems.

61
00:03:46.470 --> 00:03:50.409
And the reason why they cause problems
is because the generated code can't just

62
00:03:50.409 --> 00:03:53.580
assume that if I read the value, I'm good.

63
00:03:53.580 --> 00:03:58.520
It has to be like, I read the value,
I got the special undefined value here.

64
00:03:58.520 --> 00:04:01.759
I better check the prototype chain just
in case there is something in there.

65
00:04:03.310 --> 00:04:06.033
And so prototype access will become so
much slower.

66
00:04:08.407 --> 00:04:11.260
And so, how can this possibly work?

67
00:04:11.260 --> 00:04:16.059
So the way this works is that, again,
you have this hidden class for an array,

68
00:04:16.059 --> 00:04:17.070
right?

69
00:04:17.070 --> 00:04:19.854
And this hidden class kinda
has an index of as before, and

70
00:04:19.854 --> 00:04:21.831
you have a special symbol called a HOLE.

71
00:04:21.831 --> 00:04:24.954
It's a special value that you recognize
like, that's not a real value,

72
00:04:24.954 --> 00:04:25.990
that's a hole, right?

73
00:04:25.990 --> 00:04:29.190
There's no holes in memory,
you can't do that.

74
00:04:29.190 --> 00:04:32.449
But you can put special values that
you will recognize, like, yeah,

75
00:04:32.449 --> 00:04:34.960
that's actually pretend to
be a hole over here, right?

76
00:04:37.470 --> 00:04:40.785
And so then you can create your objects.

77
00:04:40.785 --> 00:04:44.136
You can fill it with values, right?

78
00:04:44.136 --> 00:04:45.986
And then you can also fill it with holes.

79
00:04:45.986 --> 00:04:48.099
Where is a hole here?

80
00:04:48.099 --> 00:04:52.963
A hole, where am I using it?

81
00:04:52.963 --> 00:04:53.501
I don't know, right?

82
00:04:53.501 --> 00:04:57.828
But hey, the point is, the code that you
kind of have to create is something like

83
00:04:57.828 --> 00:05:02.270
this, where you iterate over the values,
and then you see, is it a hole?

84
00:05:02.270 --> 00:05:06.960
If so, then you have to go down the rabbit
hole of the prototype chain, right?

85
00:05:06.960 --> 00:05:08.580
So you read the value.

86
00:05:08.580 --> 00:05:12.126
If the value you get is a hole, then you
have to do all this complicated stuff

87
00:05:12.126 --> 00:05:15.200
about going up the prototype
chain to try to resolve it.

88
00:05:15.200 --> 00:05:17.860
Otherwise, the value is just undefined,
right?

89
00:05:17.860 --> 00:05:21.560
Do you see how it gets
complicated with this?

90
00:05:21.560 --> 00:05:24.770
So holey arrays are kind
of a nice complication.

91
00:05:24.770 --> 00:05:26.690
Now, how do you get holey arrays?

92
00:05:26.690 --> 00:05:27.530
Well, I showed you.

93
00:05:28.680 --> 00:05:31.338
The most obvious way is this way.

94
00:05:31.338 --> 00:05:35.952
But you can also get holey
arrays by doing code like this.

95
00:05:35.952 --> 00:05:41.000
You can say array = new Array(10).

96
00:05:41.000 --> 00:05:45.459
That creates a holey array
with 10 holes in it.

97
00:05:45.459 --> 00:05:46.187
And guess what?

98
00:05:46.187 --> 00:05:50.776
Once the array is holey, all of
the derived arrays, if you perform a map

99
00:05:50.776 --> 00:05:55.614
operation or something like that,
they will all be holey all the way down.

100
00:05:55.614 --> 00:05:56.882
Holes all over them, yes?

101
00:05:56.882 --> 00:06:03.496
&gt;&gt; If you do a new Array(10).fill and
fil it with undefined, is that then a new?

102
00:06:03.496 --> 00:06:04.580
&gt;&gt; So, good question.

103
00:06:04.580 --> 00:06:09.935
I know in the past it was holey for
the rest of its life.

104
00:06:09.935 --> 00:06:11.335
I don't know what new VMs do,

105
00:06:11.335 --> 00:06:15.144
whether they're smart enough to kinda
recognize this particular thing or not.

106
00:06:15.144 --> 00:06:18.881
But there is a way to figure this out.

107
00:06:18.881 --> 00:06:22.901
And let's do this, let's run a benchmark.

108
00:06:22.901 --> 00:06:25.197
I have a benchmark on holey arrays.

109
00:06:26.665 --> 00:06:29.278
What does the benchmark do?

110
00:06:29.278 --> 00:06:37.703
Let's see, Let me remind myself.

111
00:06:37.703 --> 00:06:41.060
All right, so
I have just array with numbers.

112
00:06:41.060 --> 00:06:43.880
I have arrays of strings, and
what am I trying to do here?

113
00:06:43.880 --> 00:06:47.040
For each one of them,
I am just trying to read the value, right?

114
00:06:47.040 --> 00:06:49.320
So I'm just reading the value and
comparing it to the false.

115
00:06:49.320 --> 00:06:52.920
Notice I'm using triple equals so
that we don't have any surprises.

116
00:06:52.920 --> 00:06:55.240
So I have an array of numbers and
I'm just trying to iterate over it.

117
00:06:55.240 --> 00:06:58.830
So iterating over numbers, as you can see,
is faster than iterating over strings.

118
00:07:01.750 --> 00:07:06.940
Now I also have tried to subclass array
to create a different prototype chain.

119
00:07:06.940 --> 00:07:10.199
And it looks like in the past, this
used to have a performance difference,

120
00:07:10.199 --> 00:07:12.130
now it seems like they
perform just as well.

121
00:07:12.130 --> 00:07:19.150
Good job V8, you seem to have fixed
this particular performance issue.

122
00:07:19.150 --> 00:07:21.510
Mixed array, as you can see, is about 70.

123
00:07:21.510 --> 00:07:23.320
Arrays with holes, look at that.

124
00:07:23.320 --> 00:07:26.460
Now we're slower at
iterating over these things.

125
00:07:26.460 --> 00:07:31.080
And arrays with holes that have things
on a prototype, bam, you get hit.

126
00:07:32.130 --> 00:07:35.160
So it turns out that, and so here,

127
00:07:35.160 --> 00:07:41.129
the way we've created this is I
created a subclass called MyArray.

128
00:07:41.129 --> 00:07:47.010
And then in this subclass,
I messed with the prototype.

129
00:07:47.010 --> 00:07:53.152
So not only does the VM keep track of the
fact whether or not the array has holes,

130
00:07:53.152 --> 00:07:58.010
it also keeps track of the fact,
is the prototype chain pure?

131
00:07:58.010 --> 00:08:01.420
In other words,
didn't anybody mess with it, right?

132
00:08:01.420 --> 00:08:06.220
Because if nobody messed with it, then
it can just answer the question, right?

133
00:08:06.220 --> 00:08:07.485
So in this particular case,

134
00:08:07.485 --> 00:08:10.480
I've messed with the prototype
chain by putting something on it.

135
00:08:10.480 --> 00:08:12.313
I put it on a 0th location.

136
00:08:12.313 --> 00:08:17.423
But just by putting it anywhere, I have
basically made the whole thing dirty.

137
00:08:17.423 --> 00:08:20.599
And so now when I deal with MyArray,
let's see,

138
00:08:20.599 --> 00:08:23.943
when I create myArrayHoles
prototype right here.

139
00:08:23.943 --> 00:08:29.867
When I put holes into it, so that's
another way of putting holes into it,

140
00:08:29.867 --> 00:08:33.128
is you can directly set a value, right?

141
00:08:33.128 --> 00:08:37.563
If you set a value past the end
you create a hole in the middle.

142
00:08:37.563 --> 00:08:42.584
So if you have an empty array and
you say array value 10, then you

143
00:08:42.584 --> 00:08:48.974
just have 10 holes and then position 10,
which is really 11th is now a value,

144
00:08:48.974 --> 00:08:53.569
and so you made yourself a holey array,
congratulations.

145
00:08:55.354 --> 00:08:58.742
So this is why, in general,
you should be using .push,

146
00:08:58.742 --> 00:09:02.847
unless you're really really sure
that this is gonna work just fine.

147
00:09:02.847 --> 00:09:05.825
And so just by the fact that I've,
yeah, and

148
00:09:05.825 --> 00:09:09.633
this creates holes here because
I do it only every other one.

149
00:09:11.132 --> 00:09:13.558
See now I have every other one is a hole,
right?

150
00:09:13.558 --> 00:09:16.506
And so
most of the times when it reads the value,

151
00:09:16.506 --> 00:09:20.732
it will just go to prototype chain
will receive undefined, right?

152
00:09:20.732 --> 00:09:23.910
Except in the case of 0 it will get 0.

153
00:09:23.910 --> 00:09:28.612
And so that alone is enough to
confuse the optimizer and the V8 so

154
00:09:28.612 --> 00:09:31.137
much that it basically gives up and

155
00:09:31.137 --> 00:09:36.210
generates these super slow code
that it knows is safe, right?

156
00:09:36.210 --> 00:09:41.003
And so the reason in performance that
you see here is what you're looking at

157
00:09:41.003 --> 00:09:46.080
are different assumptions that were
violated for the optimizer, right?

158
00:09:46.080 --> 00:09:50.111
So the code right here, the super
slow code that was generated here,

159
00:09:50.111 --> 00:09:53.169
this is where all the assumptions
are off the table,

160
00:09:53.169 --> 00:09:58.370
and the V8 actually has to do everything
by the book to get you the answer, right?

161
00:09:58.370 --> 00:10:03.210
All the other ones that you see here
are tricks that the V8 knows it

162
00:10:03.210 --> 00:10:07.830
is safe to play as long as
certain invariants are true.

163
00:10:07.830 --> 00:10:10.630
And so this is why you can have
a different performance in it.

164
00:10:10.630 --> 00:10:12.646
And if you compare this to,
that's what, like,

165
00:10:12.646 --> 00:10:15.450
that's a 10x difference in
performance of iteration speed.

166
00:10:15.450 --> 00:10:18.355
That's big, right?

167
00:10:18.355 --> 00:10:24.414
Now, luckily, the the Deopt Explorer
will tell you about this.

168
00:10:24.414 --> 00:10:25.721
Mark question, yes?

169
00:10:25.721 --> 00:10:31.293
&gt;&gt; Yeah, online they're asking about,
why did the engine implement

170
00:10:31.293 --> 00:10:36.290
it this way with holes instead
of filling it with undefined?

171
00:10:36.290 --> 00:10:38.565
&gt;&gt; Because that's what the spec says,
right?

172
00:10:38.565 --> 00:10:43.322
The spec of JavaScript says that this is
the bizarre behavior you need to get.

173
00:10:43.322 --> 00:10:48.626
So the, [SOUND] Memory,
no, not this memory.

174
00:10:48.626 --> 00:10:50.910
This memory, holding memory.

175
00:10:52.280 --> 00:10:58.340
Here, the spec says that in this situation
where you have a holey array and

176
00:10:58.340 --> 00:11:01.188
on prototype you put the value 2.

177
00:11:01.188 --> 00:11:08.467
If you try to access array 2,
if you say array, If I can type,

178
00:11:08.467 --> 00:11:13.899
where you say this,
then the answer should be -3.

179
00:11:15.620 --> 00:11:17.180
That's what the spec says, right?

180
00:11:17.180 --> 00:11:20.420
So the VM has to implement
this bizarre behavior.

181
00:11:20.420 --> 00:11:25.215
Now, you should never
write code like this.

182
00:11:25.215 --> 00:11:28.648
If you do, and I'm your manager,
we probably should have a chat.

183
00:11:28.648 --> 00:11:32.483
[LAUGH] You're trying to be
a little little too clever, but

184
00:11:32.483 --> 00:11:34.445
the VM has no choice, right?

185
00:11:34.445 --> 00:11:35.613
It has to follow the spec.

186
00:11:37.775 --> 00:11:42.274
And if you remember, for a while,
we had this thing called MooTools,

187
00:11:42.274 --> 00:11:45.490
which went viled, I guess,
before jQuery days.

188
00:11:45.490 --> 00:11:47.656
So maybe this was a long time ago.

189
00:11:47.656 --> 00:11:50.505
This is ancient history, archeology.

190
00:11:50.505 --> 00:11:55.066
But MooTools would modify prototypes
left and right all over the place.

191
00:11:55.066 --> 00:11:57.771
&gt;&gt; And there was a library
before that called prototype.

192
00:11:57.771 --> 00:11:59.038
&gt;&gt; Well,
there was a prototype before that, right?

193
00:11:59.038 --> 00:12:01.561
They would just modify these things.

194
00:12:01.561 --> 00:12:06.988
And so the VMs, to this day,
need to implement the correct behavior.

195
00:12:06.988 --> 00:12:10.189
Because, what if you come to a website
that still uses one of these old things,

196
00:12:10.189 --> 00:12:13.357
and I'm sure there are websites out
there that still use this thing, right?

197
00:12:13.357 --> 00:12:15.278
And so you have to behave correctly.

198
00:12:15.278 --> 00:12:18.158
And so the answer is here
is -3 if you do array of 2,

199
00:12:18.158 --> 00:12:20.260
even though there's a hole, right?

200
00:12:20.260 --> 00:12:22.857
That's sort of why we call it a hole,
not an undefined,

201
00:12:22.857 --> 00:12:25.143
because you can see through
it to the other side.

202
00:12:25.143 --> 00:12:27.540
And the thing that's on
the other side is a prototype.

203
00:12:27.540 --> 00:12:32.550
Now the fun thing is,
the way the Javascript is

204
00:12:32.550 --> 00:12:37.691
implemented is that even
though you are reading

205
00:12:37.691 --> 00:12:42.850
the value 2,
it gets converted to a string 2.

206
00:12:42.850 --> 00:12:45.990
Everything is a string
as if it was a string.

207
00:12:45.990 --> 00:12:49.950
So all these reads pretend to be strings.

208
00:12:49.950 --> 00:12:54.370
And so
array of 2 really gives you this string 2.

209
00:12:57.397 --> 00:12:59.090
Crazy, right?

210
00:12:59.090 --> 00:13:04.531
So the VMs basically have to do it because
that's what the spec says they have to do,

211
00:13:04.531 --> 00:13:05.090
right?

212
00:13:05.090 --> 00:13:06.710
That's kind of the thing about JavaScript,
right?

213
00:13:06.710 --> 00:13:11.036
Is there a lot of ugly parts to it that
nobody in their right mind should be

214
00:13:11.036 --> 00:13:11.550
using.

215
00:13:13.060 --> 00:13:19.640
But these ugly parts kind of define what
is and isn't possible for the VMs to do.

216
00:13:20.940 --> 00:13:23.388
And VMs, for the most part,

217
00:13:23.388 --> 00:13:29.880
cheat in a sense that they hope
that you won't do those bad things.

218
00:13:29.880 --> 00:13:32.540
And they have flags that basically say,
did you do the bad thing?

219
00:13:32.540 --> 00:13:33.356
You didn't?
Good,

220
00:13:33.356 --> 00:13:35.830
I can do the short circuit code, right?

221
00:13:35.830 --> 00:13:40.056
Which is why it is possible to do a bad
thing in one place in the codebase,

222
00:13:40.056 --> 00:13:45.060
and ruin the performance of some other
piece of code somewhere else, right?

223
00:13:45.060 --> 00:13:50.160
You're thinking, I'm gonna add
something to prototype chain.

224
00:13:50.160 --> 00:13:51.910
Let's add to the prototype chain.

225
00:13:51.910 --> 00:13:56.110
And all of a sudden the VM's like, I can't
do all these optimizations that I did.

226
00:13:56.110 --> 00:13:58.070
And the code over there becomes slow.

227
00:13:58.070 --> 00:14:01.260
And somebody then screams at you and
says, why is the code slow, right?

228
00:14:01.260 --> 00:14:04.150
Like, I just added this completely
unrelated to your code.

229
00:14:04.150 --> 00:14:05.610
Well, it could be related.

230
00:14:05.610 --> 00:14:13.479
So this is kind of the the downfall of
kind of the JavaScript VMs is that,

231
00:14:13.479 --> 00:14:18.480
the kind of tricks VMs
use changes over time.

232
00:14:19.520 --> 00:14:24.303
And the tricks they use are really driven
by the patterns that the developers use in

233
00:14:24.303 --> 00:14:25.844
their codebase, right?

234
00:14:25.844 --> 00:14:29.646
So if you use a particular
pattern long enough and

235
00:14:29.646 --> 00:14:35.677
becomes popular enough in the web,
then it's likely that some optimization

236
00:14:35.677 --> 00:14:40.613
trick will be inside of the VM to
kind of take advantage of that.

237
00:14:43.643 --> 00:14:48.209
The performance of dynamic systems like
JavaScript is basically unknown until you

238
00:14:48.209 --> 00:14:50.044
have the whole program, right?

239
00:14:50.044 --> 00:14:54.589
We showed you how deoptimization
can mess with you.

240
00:14:54.589 --> 00:15:02.219
For example, you could read a property
off of a prototype like map.

241
00:15:02.219 --> 00:15:05.867
And so map is now inlinable because it's
always the same map that you're getting

242
00:15:05.867 --> 00:15:06.517
all the time.

243
00:15:06.517 --> 00:15:10.057
Until you run MooTools and in monkey
patches map to do something else and

244
00:15:10.057 --> 00:15:14.305
all of a sudden your code is like, I
thought it was constant, it isn't, deopt,

245
00:15:14.305 --> 00:15:15.908
and all kinds of things change.

246
00:15:17.953 --> 00:15:20.642
Okay, so but
let's look at the Deopt Explorer.

247
00:15:20.642 --> 00:15:27.973
And let's go into, why is holey,
because it's not recent.

248
00:15:27.973 --> 00:15:35.904
Okay, open file,
Profile &gt; holey-arrays, here we go.

249
00:15:35.904 --> 00:15:43.526
So this thing should tell us about the
holey arrays, let's see how good it is.

250
00:15:43.526 --> 00:15:52.070
Okay, so here's our benchmark and

251
00:16:03.009 --> 00:16:03.870
Here we go.

252
00:16:03.870 --> 00:16:06.441
Here it is, this is the moment,
see how it's read?

253
00:16:06.441 --> 00:16:08.770
It's really not liking this.

254
00:16:08.770 --> 00:16:14.230
And so if you hover over it, you can
see the classes that go underneath it.

255
00:16:15.270 --> 00:16:19.025
And you can see that it's the same one,
and

256
00:16:19.025 --> 00:16:23.521
you should be able to see
the fact that it has holes.

257
00:16:29.869 --> 00:16:34.303
Okay, here we go, the element
type it's HOLEY_ELEMENTS, right?

258
00:16:34.303 --> 00:16:38.470
So you can actually see this
information in the system.

259
00:16:38.470 --> 00:16:42.965
And so you can see the performance,
the de-optimization system basically tells

260
00:16:42.965 --> 00:16:48.100
you, hey, I saw this particular thing,
this is what you actually have over here.

261
00:16:48.100 --> 00:16:52.777
And so you wanna avoid anything
that is of kind holey anything,

262
00:16:52.777 --> 00:16:56.320
because that creates problems for
the system.

263
00:16:59.160 --> 00:17:01.128
I'm wondering if there's more stuff here.

264
00:17:01.128 --> 00:17:02.740
So these are the maps, right?

265
00:17:02.740 --> 00:17:06.117
The maps basically show the kinda
objects that are in the system.

266
00:17:06.117 --> 00:17:09.069
And you can see,
this is because we created our own array,

267
00:17:09.069 --> 00:17:12.031
this is our own array,
this was our own instance, right?

268
00:17:12.031 --> 00:17:13.899
This is what it is.

269
00:17:13.899 --> 00:17:17.755
You can see how many functions are in the
system, how many object shapes existed.

270
00:17:17.755 --> 00:17:20.055
In this particular case there
was only one object shape.

271
00:17:20.055 --> 00:17:21.340
But it gives you an idea.

272
00:17:21.340 --> 00:17:26.420
So the maps are V8's way of
calling it the object shapes.

273
00:17:27.640 --> 00:17:30.920
So hidden classes basically translates
to what they call now maps.

274
00:17:30.920 --> 00:17:33.630
Originally it was called hidden classes,
then I guess they changed it to maps.

275
00:17:33.630 --> 00:17:37.410
And the tool actually gives you
a pretty good view of what happened and

276
00:17:37.410 --> 00:17:38.529
where it happened.

277
00:17:38.529 --> 00:17:41.984
So, you can, for example, see here when
the transitions are happening, right?

278
00:17:41.984 --> 00:17:45.560
You can see specific location in
the codebase where this particular

279
00:17:45.560 --> 00:17:49.650
class decided, nope, I am no longer
a regular array, I am now a holey array.

280
00:17:49.650 --> 00:17:52.450
It was on line 20 of the code, right?

281
00:17:53.660 --> 00:17:56.530
And you can see the transitioning
that are happening in your system.

282
00:17:56.530 --> 00:17:58.337
So this is a way kind of to debug and

283
00:17:58.337 --> 00:18:01.383
kind of figure out,
if you really wanna go deep onto it.

284
00:18:01.383 --> 00:18:06.151
Normally, I would not go here until
I have a piece of code that I really

285
00:18:06.151 --> 00:18:10.509
know is hot piece of code that
really needs every single point of

286
00:18:10.509 --> 00:18:12.912
performance extracted out of it.

287
00:18:12.912 --> 00:18:17.108
Then I would kinda look into these tools,
usually I would not.

288
00:18:17.108 --> 00:18:20.059
Questions, yes?

289
00:18:20.059 --> 00:18:24.394
&gt;&gt; What sort of hot pieces of code
that you really need to dig into

290
00:18:24.394 --> 00:18:29.570
would you find yourself using this for
most often, when you're?

291
00:18:29.570 --> 00:18:32.923
&gt;&gt; So in Angular we transition
to something called Ivy,

292
00:18:32.923 --> 00:18:36.730
I don't know if you,
some of you have Angular backgrounds.

293
00:18:36.730 --> 00:18:40.645
Okay, so Ivy was basically kind
of a rewrite of the runtime and

294
00:18:40.645 --> 00:18:44.109
compile time,
specifically to make sure that the code

295
00:18:44.109 --> 00:18:47.140
we generate would be
monomorphic in all cases.

296
00:18:48.350 --> 00:18:50.400
And the reasoning was actually twofold.

297
00:18:50.400 --> 00:18:54.174
One is, first of all, I showed you why
you don't wanna have megamorphic code.

298
00:18:54.174 --> 00:18:57.063
But also if you end up
with megamorphic code,

299
00:18:57.063 --> 00:19:00.418
you are putting pressure
on the second level cache.

300
00:19:00.418 --> 00:19:03.400
And if you're putting pressure
on second level cache,

301
00:19:03.400 --> 00:19:07.350
that means the your application
code now runs slower, right?

302
00:19:07.350 --> 00:19:11.126
And so the idea was that by doing
something like Ivy, not only do you get

303
00:19:11.126 --> 00:19:15.606
better performance in terms of executing
all these data bindings, but you also get

304
00:19:15.606 --> 00:19:19.766
better performance because you're no
longer putting pressure on the second

305
00:19:19.766 --> 00:19:25.030
level cache, and now that cache can make
your application code actually go faster.

306
00:19:25.030 --> 00:19:25.997
And we have seen,

307
00:19:25.997 --> 00:19:29.750
pretty over the cross the board
performance improvements with Ivy.

308
00:19:31.260 --> 00:19:33.445
So there's a lot of benefits to it.

309
00:19:33.445 --> 00:19:38.665
It was a humongous undertaking, though,
and I wouldn't wanna do it ever again.

310
00:19:38.665 --> 00:19:42.593
But that's a place where all of
these things mattered, right?

311
00:19:42.593 --> 00:19:45.792
So we would look with these tools and
be like, okay,

312
00:19:45.792 --> 00:19:50.523
are we generating code that could
potentially produce a megamorphic reads,

313
00:19:50.523 --> 00:19:54.550
which means inline caching can't
be used or anything like that.

314
00:19:54.550 --> 00:19:56.115
And so
these are the tricks that we would use.

