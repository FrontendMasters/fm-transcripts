WEBVTT

1
00:00:00.240 --> 00:00:05.830
Okay, so we talked about the inline
caches and how inline caches work.

2
00:00:05.830 --> 00:00:10.625
And so you can see that inline cache
is a pretty cool trick that VMS can

3
00:00:10.625 --> 00:00:13.810
use to make property access faster.

4
00:00:13.810 --> 00:00:18.850
And so for the most part,
property access is fast.

5
00:00:18.850 --> 00:00:22.976
And that's one of the reasons why as I
said when V8 first came out with Chrome,

6
00:00:22.976 --> 00:00:26.151
10 15 years ago,
I don't remember how about a long time

7
00:00:26.151 --> 00:00:30.450
it was such a huge step in performance
because it added inline caching.

8
00:00:30.450 --> 00:00:34.680
Now, the funny thing is that inline
caching was not a new concept.

9
00:00:34.680 --> 00:00:37.320
Other VMs already do this already.

10
00:00:37.320 --> 00:00:39.800
So the trick was well known.

11
00:00:39.800 --> 00:00:43.784
It's just for some reason JavaScript was
not considered cool or whatever and so

12
00:00:43.784 --> 00:00:46.470
the JavaScript interpreters
didn't really use it.

13
00:00:48.330 --> 00:00:51.170
But now we do and
it's kind of an important trick.

14
00:00:51.170 --> 00:00:54.454
The other thing I kind of showed
you is this hidden class thing that

15
00:00:54.454 --> 00:00:56.015
happens underneath an whole.

16
00:00:56.015 --> 00:00:59.524
And I showed you how the Deopt Explorer
kind of shows you these particular

17
00:00:59.524 --> 00:01:00.410
things, right?

18
00:01:00.410 --> 00:01:01.634
And I showed you how to use
that particular tool, so

19
00:01:01.634 --> 00:01:02.510
I think it's pretty cool.

20
00:01:02.510 --> 00:01:06.450
We have a couple of more benchmarks
to show off, so let's see.

21
00:01:06.450 --> 00:01:10.024
Let's talk about equality,
so there is double equal and

22
00:01:10.024 --> 00:01:12.660
triple equal in JavaScript, right?

23
00:01:12.660 --> 00:01:15.080
And we all know kind of the differences.

24
00:01:15.080 --> 00:01:17.781
By the way,
once you should kind of look up, actually,

25
00:01:17.781 --> 00:01:21.008
this is a tweet that I did so
we can kind of go onto it, let's go.

26
00:01:21.008 --> 00:01:22.095
Bigger font.

27
00:01:22.095 --> 00:01:27.957
What's kind of cool I find is
this particular matrix here,

28
00:01:27.957 --> 00:01:32.998
which shows off what other type and
which other type

29
00:01:32.998 --> 00:01:38.760
have the same value in both
double equal and triple equal.

30
00:01:38.760 --> 00:01:41.710
And you can see that it's
kind of a complicated thing.

31
00:01:41.710 --> 00:01:43.700
And I don't think anybody
actually knows this.

32
00:01:43.700 --> 00:01:47.830
From day to day,
we don't kind of keep this in our head.

33
00:01:47.830 --> 00:01:51.469
And so
it's just another argument led like,

34
00:01:51.469 --> 00:01:55.980
hey, keep the world simple and
just do the right stuff.

35
00:01:55.980 --> 00:01:58.800
Okay, so why is there such a big
difference between the two?

36
00:01:58.800 --> 00:02:01.180
So let's kind of look into it.

37
00:02:02.440 --> 00:02:07.963
So let's go equality, And let's run.

38
00:02:14.390 --> 00:02:19.723
So let's run the equality benchmark and
we get that the double equals.

39
00:02:22.547 --> 00:02:24.660
Wait, what the triple equals is slower?

40
00:02:24.660 --> 00:02:27.770
Wait, no, that doesn't make any sense.

41
00:02:27.770 --> 00:02:31.540
Because I'm doing triple equals and
I'm printing double equals.

42
00:02:31.540 --> 00:02:35.421
Triple equals is significantly
faster than double equals.

43
00:02:35.421 --> 00:02:36.445
Why is that?

44
00:02:37.873 --> 00:02:42.510
Well, it comes down to that triple equals
just has to compare the values directly.

45
00:02:42.510 --> 00:02:45.230
There's no coercion that has to happen,
right?

46
00:02:45.230 --> 00:02:49.360
Whereas a double equals is like,
well, I'm a number, you're a string,

47
00:02:49.360 --> 00:02:52.704
we could still be equal if I
convert the string into a number or

48
00:02:52.704 --> 00:02:57.096
if I convert a number into a string, and
so it's like all this extra step that has

49
00:02:57.096 --> 00:03:01.390
to happen in there to kind of figure this
out if that actually works out or not.

50
00:03:03.179 --> 00:03:06.384
So in this particular case,
let's see what is the benchmark do?

51
00:03:06.384 --> 00:03:08.624
So in this case, we have bunch of objects.

52
00:03:10.335 --> 00:03:18.400
And into the objects we put in a custom
property for every single object.

53
00:03:18.400 --> 00:03:20.429
So this is gonna be mega morphic,
right right here.

54
00:03:21.940 --> 00:03:26.845
And then we are going to put
a value in here for I, and then for

55
00:03:26.845 --> 00:03:31.361
the comparison we're gonna
either do a triple equal so

56
00:03:31.361 --> 00:03:34.621
we're gonna compare the object to 1.

57
00:03:34.621 --> 00:03:39.540
Now notice is a number, and
this object is going to be an object

58
00:03:39.540 --> 00:03:44.082
the fact that it's mega
morphic doesn't matter because

59
00:03:44.082 --> 00:03:49.113
we're not actually reading any
properties off of it, right.

60
00:03:49.113 --> 00:03:51.795
Whereas in this case we're
using a double equals.

61
00:03:51.795 --> 00:03:58.020
So we're comparing an object to a number
which should always be false In here.

62
00:03:58.020 --> 00:04:02.407
And so this particular path is super
fast because to compare two objects,

63
00:04:02.407 --> 00:04:05.180
the object is just a memory location,
right?

64
00:04:05.180 --> 00:04:09.120
And so you compare the number that's
inside of a register with another

65
00:04:09.120 --> 00:04:11.080
number that you expect.

66
00:04:11.080 --> 00:04:11.740
Are they same?

67
00:04:11.740 --> 00:04:12.850
Yes, no.

68
00:04:12.850 --> 00:04:15.500
Move on with your life,
pretty, straightforward.

69
00:04:15.500 --> 00:04:20.333
With double equals, the world is a little
more complicated because there is coercion

70
00:04:20.333 --> 00:04:22.860
and hopefully I'm pronouncing it right.

71
00:04:22.860 --> 00:04:24.140
Coercion, right?

72
00:04:24.140 --> 00:04:28.760
And the coercion means that you might
have to call the value of property.

73
00:04:30.480 --> 00:04:32.835
And so I'm gonna show you
a couple of cool things,

74
00:04:32.835 --> 00:04:36.090
which I think are just weird
that happens in JavaScript.

75
00:04:36.090 --> 00:04:38.690
So we're running the benchmark.

76
00:04:38.690 --> 00:04:42.417
First of all, we are gonna get that the
triple equals is significantly faster than

77
00:04:42.417 --> 00:04:43.559
double equals, right?

78
00:04:44.580 --> 00:04:49.940
So then let's add a value
of property to the object.

79
00:04:49.940 --> 00:04:51.263
And now let's run it.

80
00:04:56.466 --> 00:04:57.890
Twice as fast.

81
00:04:59.110 --> 00:04:59.790
Isn't that weird?

82
00:05:01.650 --> 00:05:03.360
Just by adding this
particular property to it?

83
00:05:05.150 --> 00:05:09.312
Okay, let's modify a property
on the object prototype of,

84
00:05:09.312 --> 00:05:12.419
which is the value of,
and let's run it now.

85
00:05:16.904 --> 00:05:19.690
Again a different number,
not as bad, but a different number.

86
00:05:19.690 --> 00:05:21.180
So what's going on over here?

87
00:05:21.180 --> 00:05:25.730
Why do these things affect
the runtime performance?

88
00:05:25.730 --> 00:05:29.731
And it's one of those weird things
about JavaScript is that when you mess

89
00:05:29.731 --> 00:05:34.192
something over here, which you feels
completely unrelated to something else,

90
00:05:34.192 --> 00:05:36.960
yet there is a path that
somehow makes it related.

91
00:05:36.960 --> 00:05:40.950
And so it's oftentimes possible to change
a performance of a system far away,

92
00:05:40.950 --> 00:05:43.020
which you think is unrelated.

93
00:05:43.020 --> 00:05:46.332
Just by adding properties to
prototypes somewhere else,

94
00:05:46.332 --> 00:05:50.760
which is another reason why you shouldn't
probably do that out-of-the-box.

95
00:05:50.760 --> 00:05:55.782
The reason for that is because a double
equals needs to do a coercion of

96
00:05:55.782 --> 00:06:02.480
this object and the way we coerce the
object, is we call the value of property.

97
00:06:02.480 --> 00:06:05.800
Let me maybe show this to
you in another example.

98
00:06:05.800 --> 00:06:08.030
So 3=3, true.

99
00:06:08.030 --> 00:06:11.180
There's not a, that surprising result.

100
00:06:12.190 --> 00:06:15.680
Okay, let's say we have a value of object.

101
00:06:15.680 --> 00:06:20.808
So first of all, we all agree that is not,

102
00:06:20.808 --> 00:06:23.708
of course not I'm sorry.

103
00:06:25.389 --> 00:06:26.850
That's false, right?

104
00:06:26.850 --> 00:06:29.008
What did you know that you can do this?

105
00:06:33.591 --> 00:06:34.330
That's true.

106
00:06:36.730 --> 00:06:38.760
This is coercion, right?

107
00:06:38.760 --> 00:06:43.020
So how does it know if a object
is actually equal to 3?

108
00:06:43.020 --> 00:06:48.360
Well the JavaScript under the hood calls
value of on that particular object.

109
00:06:48.360 --> 00:06:52.610
And by calling value of,
we can get the result.

110
00:06:52.610 --> 00:06:58.100
So now that you know this, you can see how
adding the property would change things.

111
00:06:58.100 --> 00:06:59.210
And so let's do another thing.

112
00:06:59.210 --> 00:07:01.390
Let's comment out this property, right?

113
00:07:01.390 --> 00:07:04.100
This property makes lots and
lots of different shapes.

114
00:07:04.100 --> 00:07:08.970
By commenting out this property, all of a
sudden all the shapes are the same, right?

115
00:07:08.970 --> 00:07:13.999
And so, yet again, if I run this, it will
change the performance of the system.

116
00:07:15.810 --> 00:07:22.860
So the speed here is different than
a speed when it's commented out.

117
00:07:24.654 --> 00:07:26.440
At least it should be, right?

118
00:07:26.440 --> 00:07:28.540
Yes, there's a slight difference in speed.

119
00:07:28.540 --> 00:07:31.340
And it all has to do with
the prototype chain, right?

120
00:07:31.340 --> 00:07:40.680
Because the double equal internally grabs
this object and calls dot value of on.

121
00:07:40.680 --> 00:07:43.130
And what have you learned
about calling a dot value of?

122
00:07:43.130 --> 00:07:46.710
Well, that may be a megamorphic call or
maybe a monomorphic call.

123
00:07:46.710 --> 00:07:49.880
It depends, right,
depending on the shape of the object.

124
00:07:49.880 --> 00:07:53.897
So this read here can actually
internally call dot value of, and

125
00:07:53.897 --> 00:07:58.280
that dot value of actually can mess
with us depending on whether we have

126
00:07:58.280 --> 00:08:00.120
the same object all the time.

127
00:08:00.120 --> 00:08:03.156
Whether we have a different
shape of the object and

128
00:08:03.156 --> 00:08:07.650
whether this value of is declared here or
it's declared on a prototype.

129
00:08:09.110 --> 00:08:13.078
So I believe the fastest iteration should
be this one where the value of is

130
00:08:13.078 --> 00:08:16.140
declared here and
we didn't mess with the prototype.

131
00:08:16.140 --> 00:08:23.936
So this should be the fastest version
of the double equals 25 microseconds.

132
00:08:23.936 --> 00:08:26.730
And so
I think this is kind of interesting.

133
00:08:26.730 --> 00:08:30.410
And so in here we can look
at the inline caches and

134
00:08:30.410 --> 00:08:34.000
we can see,
what things are performing well.

135
00:08:34.000 --> 00:08:36.770
So right now,
everything you see is green, right?

136
00:08:36.770 --> 00:08:39.480
There's no red bits anywhere.

137
00:08:39.480 --> 00:08:42.200
Let's go back to quality.

138
00:08:43.560 --> 00:08:45.389
So let's change this.

139
00:08:46.910 --> 00:08:48.510
And then run it again.

140
00:08:55.973 --> 00:08:58.440
So now we should see megamorphic stuff.

141
00:09:05.390 --> 00:09:07.230
No, it's not gonna show it to us.

142
00:09:08.480 --> 00:09:09.635
Doesn't show okay.

143
00:09:09.635 --> 00:09:14.846
I would expect that this would mark it as
red because internally the object shape is

144
00:09:14.846 --> 00:09:20.133
always different, and it has to hold that
value of somebody doesn't tell it to us,

145
00:09:20.133 --> 00:09:23.485
but that's what's
happening under the hood.

146
00:09:23.485 --> 00:09:26.961
That's why you can end up with a situation
like these where things are very,

147
00:09:26.961 --> 00:09:29.715
very different types of performance.

148
00:09:29.715 --> 00:09:31.647
I think that in general,

149
00:09:31.647 --> 00:09:36.989
there's very few reasons to use
double equals if you think about it.

150
00:09:36.989 --> 00:09:39.453
For the most part, what you really
meant to say was triple equals,

151
00:09:39.453 --> 00:09:40.950
you're just being lazy.

152
00:09:40.950 --> 00:09:46.780
Okay, so generally, using triple equals
is kinda preferred over double equals.

153
00:09:46.780 --> 00:09:48.440
Now, I'm guilty of this, too.

154
00:09:48.440 --> 00:09:49.040
I'm lazy, too.

155
00:09:49.040 --> 00:09:53.500
I also tend to put in two double
equals instead of triple equal.

156
00:09:53.500 --> 00:09:57.410
But you can see that it kinda have
a performance impact to your application.

