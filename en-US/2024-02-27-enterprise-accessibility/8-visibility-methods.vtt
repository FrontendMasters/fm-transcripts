WEBVTT

1
00:00:00.000 --> 00:00:05.761
All right, so visibility methods, there's
a ton of ways to hide and show content.

2
00:00:05.761 --> 00:00:10.996
And I want you to know all of these
techniques, because when you're debugging

3
00:00:10.996 --> 00:00:16.485
something, evaluating something, sometimes
the CSS is what causes the issue.

4
00:00:16.485 --> 00:00:19.939
Or yeah, if you change the CSS
slightly to another method,

5
00:00:19.939 --> 00:00:21.811
it might have a better outcome.

6
00:00:21.811 --> 00:00:27.367
So starting with the visually-hidden or
screen reader-only CSS classes,

7
00:00:27.367 --> 00:00:31.134
sometimes sr-only,
that's the one in Tailwind.

8
00:00:31.134 --> 00:00:35.597
Those are utility classes,
I have them in every project I work on.

9
00:00:35.597 --> 00:00:40.364
And what they do, here's an example
of the sr-only from Tailwind.

10
00:00:40.364 --> 00:00:45.350
They use absolute positioning,
kind of clipping the content,

11
00:00:45.350 --> 00:00:49.333
overflow hidden,
basically making it rendered.

12
00:00:49.333 --> 00:00:53.776
So it's in the rendered output,
but you can't see it.

13
00:00:53.776 --> 00:00:58.317
And so this can be something to, if you
have screen reader text in a button or

14
00:00:58.317 --> 00:01:01.489
an extra heading that's not
part of the design, but

15
00:01:01.489 --> 00:01:05.767
you wanna add to the heading structure,
you could use these classes.

16
00:01:05.767 --> 00:01:08.445
And so in our slides,
we have some examples.

17
00:01:08.445 --> 00:01:10.648
So I've got sr-only on.

18
00:01:10.648 --> 00:01:13.662
I can turn it on and off, and
we can see what it does to the content.

19
00:01:13.662 --> 00:01:15.597
So there's a button, I can toggle it.

20
00:01:15.597 --> 00:01:19.598
There's some content right after
the piece that's updating, so

21
00:01:19.598 --> 00:01:22.036
you can see that it collapses the space.

22
00:01:22.036 --> 00:01:24.575
So it doesn't take up space.

23
00:01:24.575 --> 00:01:29.053
And when one of this is on,
I can inspect it in Chrome DevTools.

24
00:01:29.053 --> 00:01:33.099
So under the Elements Inspector over
here on the right where it says,

25
00:01:33.099 --> 00:01:35.771
Styles Computed, there's a little arrow.

26
00:01:35.771 --> 00:01:42.296
You can go to Accessibility and we can
inspect what's the effect of these styles.

27
00:01:42.296 --> 00:01:47.212
So for sr-only,
this has the sr-only class on it, and

28
00:01:47.212 --> 00:01:52.241
I can see in the styles panel
that it is matching that CSS.

29
00:01:52.241 --> 00:01:57.195
When that is turned on, I can still
see the content inside of here.

30
00:01:57.195 --> 00:01:59.542
So it says,
widget content with a link in it.

31
00:01:59.542 --> 00:02:05.086
And if I try to tab,
I should be going right

32
00:02:05.086 --> 00:02:10.799
past that content, or actually I'm not.

33
00:02:10.799 --> 00:02:15.284
That's something you wanna watch out for
and why I put a link inside of the sr-only

34
00:02:15.284 --> 00:02:18.611
content so you can see what
happens to a focusable elements.

35
00:02:18.611 --> 00:02:23.186
So with sr-only alone, it's not gonna
keep me from tabbing onto interactive

36
00:02:23.186 --> 00:02:25.834
elements inside, so
I have to handle those.

37
00:02:25.834 --> 00:02:29.700
I have to put probably
tabindex of -1 on that, or

38
00:02:29.700 --> 00:02:34.220
display: none or something,
I have to think about that.

39
00:02:34.220 --> 00:02:36.488
So that's sr-only.

40
00:02:36.488 --> 00:02:40.830
Display: none, this is the biggest hammer.

41
00:02:40.830 --> 00:02:45.420
This is a good tool to have in your
toolbox, cuz it hide stuff from everybody.

42
00:02:45.420 --> 00:02:46.910
So for display: none,

43
00:02:46.910 --> 00:02:51.159
which its counterparts would be
display: block, flex, or grid,

44
00:02:51.159 --> 00:02:55.940
inline block, table, there's a bunch
of different display properties.

45
00:02:55.940 --> 00:02:59.801
I love them, they're awesome,
especially grid and Flexbox.

46
00:02:59.801 --> 00:03:03.784
But when I turn on display: none,
it's funny,

47
00:03:03.784 --> 00:03:08.210
I called it display: block,
it should be display: none,

48
00:03:08.210 --> 00:03:12.547
it collapses the space, And
when I inspect that content,

49
00:03:12.547 --> 00:03:17.970
it's got display: none for everybody and
it is hidden from everybody.

50
00:03:17.970 --> 00:03:21.355
So the screen reader-only one,
I can still see the information

51
00:03:21.355 --> 00:03:25.382
in the susceptibility tree, which we're
gonna talk about in a little bit.

52
00:03:25.382 --> 00:03:27.288
But here's a little preview for you.

53
00:03:27.288 --> 00:03:30.744
When something has display: none on it,
it's not rendered for anybody.

54
00:03:30.744 --> 00:03:35.446
I can't reach any of the links, or inputs,
or anything inside, so it's very helpful.

55
00:03:35.446 --> 00:03:42.284
But it has no display, it's gone,
it's hidden, that's what we wanted.

56
00:03:42.284 --> 00:03:45.750
You can't animate display: none directly,
but

57
00:03:45.750 --> 00:03:50.382
you can kind of show it or hide it
at the end of a keyframe animation.

58
00:03:50.382 --> 00:03:52.803
So some of these are animatable
properties, some are not.

59
00:03:54.758 --> 00:03:57.247
Visibility: hidden is another one.

60
00:03:57.247 --> 00:04:02.256
I don't think this one's animatable
either, but like display: none,

61
00:04:02.256 --> 00:04:06.234
it will hide something visually,
it reserves the space.

62
00:04:06.234 --> 00:04:08.905
So that's different than display: none.

63
00:04:08.905 --> 00:04:11.325
So sometimes visibility:
hidden is what you want so

64
00:04:11.325 --> 00:04:13.199
that your layouts don't get messed up.

65
00:04:13.199 --> 00:04:20.581
But something with visibility: hidden,
if we go and inspect, let me get to it.

66
00:04:23.652 --> 00:04:25.988
Where am I?

67
00:04:25.988 --> 00:04:29.598
Here we go, so in Tailwind,
that class is invisible.

68
00:04:29.598 --> 00:04:32.788
It puts on the CSS property
of visibility: hidden.

69
00:04:32.788 --> 00:04:36.728
And when I go over to the Accessibility
Inspector, it is ignored.

70
00:04:36.728 --> 00:04:41.084
So it's kind of like display: none,
but it collapses the space, or

71
00:04:41.084 --> 00:04:42.973
sorry, reserves the space.

72
00:04:42.973 --> 00:04:45.488
So slightly different technique,

73
00:04:45.488 --> 00:04:49.601
which you have all these
different tools in your toolbox.

74
00:04:49.601 --> 00:04:54.570
This one's helpful in select cases.

75
00:04:54.570 --> 00:04:57.588
So here's another one, opacity,
this one is animatable.

76
00:04:57.588 --> 00:05:01.165
You can go from 0 to 1 and
you can transition it,

77
00:05:01.165 --> 00:05:03.446
you can do all kinds of things.

78
00:05:03.446 --> 00:05:10.788
So opacity: 0,
this one also reserves the space.

79
00:05:10.788 --> 00:05:16.472
Unlike visibility: hidden and display:
none, I can tab onto items inside.

80
00:05:16.472 --> 00:05:20.680
So it's not gonna render any
links inert inside or anything.

81
00:05:20.680 --> 00:05:25.658
So if you're using this to hide stuff,
be aware that you're still gonna be able

82
00:05:25.658 --> 00:05:29.768
to reach focusable items inside
without doing something extra.

83
00:05:29.768 --> 00:05:33.655
For this one, if I go to this opacity,

84
00:05:33.655 --> 00:05:38.525
I can see it has opacity: 0 and
it is rendered.

85
00:05:38.525 --> 00:05:41.572
So I've got the information
over here still.

86
00:05:41.572 --> 00:05:45.561
So a screen reader user will be
able to interact with this content,

87
00:05:45.561 --> 00:05:48.206
reach this content, but you can't see it.

88
00:05:48.206 --> 00:05:54.525
So maybe it's just a transition thing
going in and out, stuff's still reachable,

89
00:05:54.525 --> 00:06:00.053
it's still announced, unlike
display: none or visibility: hidden.

90
00:06:00.053 --> 00:06:03.231
Aria-hidden, which is not actually CSS,
but

91
00:06:03.231 --> 00:06:08.250
it is a visibility method for
screen readers and assistive technologies.

92
00:06:08.250 --> 00:06:12.950
This is an attribute that you can
put in your HTML with true or

93
00:06:12.950 --> 00:06:16.710
false, and
it will mark that group of content,

94
00:06:16.710 --> 00:06:21.236
that subtree,
it will tell a screen reader to ignore it.

95
00:06:21.236 --> 00:06:25.699
It will not affect anything
focusable inside, kind of sr-only,

96
00:06:25.699 --> 00:06:30.164
except sr-only will keep something
in the accessibility tree for

97
00:06:30.164 --> 00:06:33.450
a screen reader,
aria-hidden will remove it.

98
00:06:33.450 --> 00:06:36.954
So the risk with this one, and
why I'm telling you about it,

99
00:06:36.954 --> 00:06:41.769
is that anything focusable inside of here
will have its accessibility information

100
00:06:41.769 --> 00:06:44.608
stripped away and
it won't affect the display.

101
00:06:44.608 --> 00:06:49.472
So aria-only affects screen readers,
it doesn't affect keyboard events,

102
00:06:49.472 --> 00:06:52.138
it doesn't affect the CSS or the display.

103
00:06:52.138 --> 00:06:57.477
You could use CSS attribute selectors and
target it if you wanted to style it.

104
00:06:57.477 --> 00:07:01.958
But on its own, aria doesn't do
anything that you'll be able to see.

105
00:07:01.958 --> 00:07:05.208
It is only gonna be
effective in screen readers,

106
00:07:05.208 --> 00:07:09.187
which is why it's really,
I don't know, full pitfalls.

107
00:07:09.187 --> 00:07:13.386
Cuz people are like, I'm gonna slap
this on here and then you never test it.

108
00:07:13.386 --> 00:07:17.918
And it can be worse than if
you didn't include it, but

109
00:07:17.918 --> 00:07:23.374
it can be an effective tool when
used in the right circumstance.

110
00:07:23.374 --> 00:07:28.257
So if we go on and inspect this one,
we can already see we can see it,

111
00:07:28.257 --> 00:07:29.666
we can focus on it.

112
00:07:33.713 --> 00:07:37.865
Element, okay,
has already hidden true on it.

113
00:07:37.865 --> 00:07:42.131
When it's not present, it's the same
as aria-hidden false, so it's ignored.

114
00:07:42.131 --> 00:07:47.816
We can see element is aria-hidden, it's
not exposed, but it had that link inside.

115
00:07:47.816 --> 00:07:51.754
So I have to probably put tabindex and
-1 on that link and

116
00:07:51.754 --> 00:07:53.732
any other element in there.

117
00:07:53.732 --> 00:07:56.793
There is something really
helpful to know about and

118
00:07:56.793 --> 00:08:00.579
it's the inert attribute,
it we'll do both of those things.

119
00:08:00.579 --> 00:08:02.738
It's the aria-hidden and the tabindex, and

120
00:08:02.738 --> 00:08:05.961
we dove pretty deep into that in
the web app accessibility workshop.

121
00:08:05.961 --> 00:08:11.090
So if you're interested in that, we did a
whole exercise of how to work with inert,

122
00:08:11.090 --> 00:08:14.927
especially in React,
which is a little bit tricky right now.

123
00:08:14.927 --> 00:08:19.369
But talk about another spidey-sense thing,
if you see aria-hidden true,

124
00:08:19.369 --> 00:08:23.139
it should be like,
there's something I need to watch here.

125
00:08:23.139 --> 00:08:27.041
Are there focusable elements
inside when it's aria-hidden true?

126
00:08:27.041 --> 00:08:30.744
That could be a problem, and
AXE will actually flag that for you now.

127
00:08:30.744 --> 00:08:33.670
So it will help you identify these,
cuz I mean,

128
00:08:33.670 --> 00:08:37.118
who really is gonna catch
this with their own eyeballs?

129
00:08:37.118 --> 00:08:40.273
So it's helpful when the computer
can point it out to us.

130
00:08:40.273 --> 00:08:42.744
I love that rule.

131
00:08:42.744 --> 00:08:45.997
So our last one is the hidden attribute.

132
00:08:45.997 --> 00:08:46.981
Yeah, question?

133
00:08:46.981 --> 00:08:49.902
&gt;&gt; A quick question, Marcy.

134
00:08:49.902 --> 00:08:53.446
What instances would you actually
want to use aria-hidden on?

135
00:08:53.446 --> 00:08:58.819
Because the impression I've gotten
is basically try to avoid it.

136
00:08:58.819 --> 00:09:02.084
&gt;&gt; Yeah, well,
I think when you're doing modals,

137
00:09:02.084 --> 00:09:05.360
it is a component of making
the background inert.

138
00:09:05.360 --> 00:09:10.079
But by itself,
that's why I like the inert attribute and

139
00:09:10.079 --> 00:09:15.105
a polyfill is that it will handle
all of the tabindex for you.

140
00:09:15.105 --> 00:09:19.415
The polyfill will actually block the DOM,
go change all the tabindexes,

141
00:09:19.415 --> 00:09:23.029
tabindexes, and then when you
take the inert attribute off,

142
00:09:23.029 --> 00:09:26.107
the DOM walker will go back up and
reset everything.

143
00:09:26.107 --> 00:09:32.655
And I've had to write that myself,
I did it in Angular, it is a pain.

144
00:09:32.655 --> 00:09:34.986
And it's also really hard to do,

145
00:09:34.986 --> 00:09:39.651
if you're trying to say your modal
is buried in the DOM somewhere,

146
00:09:39.651 --> 00:09:44.842
you need a clear path up to the body to
be able to set your siblings as inert.

147
00:09:44.842 --> 00:09:48.115
Otherwise, there's kinda no way to do it.

148
00:09:48.115 --> 00:09:52.979
So you always want your modals, the use
case for aria-hidden and inert is easiest

149
00:09:52.979 --> 00:09:57.012
when your modal is a sibling to
the content that you're gonna hide.

150
00:09:57.012 --> 00:10:01.660
So aria-hidden and
tabindex kind of together are useful, but

151
00:10:01.660 --> 00:10:05.180
inert is just so
much easier, it's less work.

152
00:10:05.180 --> 00:10:07.896
[LAUGH] But if you see this, yeah,

153
00:10:07.896 --> 00:10:11.590
I mostly want you to be
aware of the pitfalls.

154
00:10:11.590 --> 00:10:12.576
Question?

155
00:10:12.576 --> 00:10:18.445
&gt;&gt; In chat, someone said, aria-hidden
is great to hide the presence of icons.

156
00:10:18.445 --> 00:10:19.476
&gt;&gt; Yeah, that's a good point.

157
00:10:19.476 --> 00:10:24.818
Yeah, so say you've got a link that
has screen reader-only text in it,

158
00:10:24.818 --> 00:10:30.702
but it also has an icon, you could put
aria-hidden of true on the icon element.

159
00:10:30.702 --> 00:10:35.761
And it can suppress special characters and
things in a screen reader as

160
00:10:35.761 --> 00:10:40.835
long as you're replacing it with
something that can be super useful.

161
00:10:40.835 --> 00:10:45.085
What I see is people will put it
in codebases for some reason and

162
00:10:45.085 --> 00:10:48.454
then they just don't
replace it with anything.

163
00:10:48.454 --> 00:10:53.127
We have an example in a minute that you'll
see was inspired by a real-life thing and

164
00:10:53.127 --> 00:10:56.685
it just kinda gets slapped on
stuff without thinking about it.

165
00:10:56.685 --> 00:10:58.532
So watch out for it.

166
00:10:58.532 --> 00:11:00.602
And now you know what it does, so

167
00:11:00.602 --> 00:11:04.751
you can be more informed we
probably just don't even need that.

168
00:11:04.751 --> 00:11:06.955
Test it in a screen reader.

169
00:11:06.955 --> 00:11:12.027
I think icons, that is a good use
case cuz it's kinda limited in scope.

170
00:11:12.027 --> 00:11:17.570
And as long as the icons, there's some way
to understand what the interface is doing.

171
00:11:17.570 --> 00:11:20.844
If it's in an icon button,
if you have other text in it,

172
00:11:20.844 --> 00:11:23.156
then aria-hidden is fine on the icon.

173
00:11:23.156 --> 00:11:24.627
That's a great call out, thank you.

