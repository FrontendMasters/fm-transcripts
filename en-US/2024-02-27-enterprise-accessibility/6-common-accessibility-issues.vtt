WEBVTT

1
00:00:00.070 --> 00:00:01.970
What should make your
Spidey senses go off?

2
00:00:01.970 --> 00:00:04.750
That's always how I think about
it when I'm reviewing a PR.

3
00:00:04.750 --> 00:00:08.925
If I'm evaluating an open source library,
component library or something,

4
00:00:08.925 --> 00:00:12.180
there's certain things that
I can look at in code.

5
00:00:12.180 --> 00:00:14.760
I don't even need to test it, and
I know it's gonna be a problem.

6
00:00:15.870 --> 00:00:20.327
I still test it, I still go and check,
especially if I'm opening up an issue or

7
00:00:20.327 --> 00:00:23.330
something or
I'm giving feedback to my team.

8
00:00:23.330 --> 00:00:28.200
But my Spidey senses are going off a lot
of the time when I see certain things.

9
00:00:28.200 --> 00:00:31.360
And so
I would love especially as tech leads for

10
00:00:31.360 --> 00:00:35.600
you to kind of gain that
intuition of like, I saw that.

11
00:00:35.600 --> 00:00:37.810
I thought it might be an issue.

12
00:00:37.810 --> 00:00:41.702
So I opened it up on a preview URL or
I I pulled down their branch,

13
00:00:41.702 --> 00:00:46.562
I opened it up in Storybook, and yeah,
sure enough, my intuition was right.

14
00:00:46.562 --> 00:00:48.372
There's an accessibility issue here.

15
00:00:48.372 --> 00:00:54.002
You can get excellent code review
feedback if you can do that quickly.

16
00:00:54.002 --> 00:00:58.250
So some of the things that you should
eventually, it takes practice, but

17
00:00:58.250 --> 00:01:02.906
you hopefully will spot from a mile away,
and then have the curiosity to dig in and

18
00:01:02.906 --> 00:01:06.974
follow a regular testing workflow,
which we will do in a few minutes.

19
00:01:08.424 --> 00:01:10.754
And we wanna bring kindness
to these situations, right?

20
00:01:10.754 --> 00:01:12.544
We don't wanna be judgmental.

21
00:01:12.544 --> 00:01:15.384
We want people to work with us.

22
00:01:15.384 --> 00:01:16.814
We wanna work with them.

23
00:01:16.814 --> 00:01:19.194
And that's how we can make
this more successful.

24
00:01:19.194 --> 00:01:23.370
It's like, how to win friends and
influence people that kind of thinking,

25
00:01:23.370 --> 00:01:25.328
it's like maybe a little clichÃ© but

26
00:01:25.328 --> 00:01:28.738
it's not always fun to have
someone give you feedback on a PR.

27
00:01:28.738 --> 00:01:33.288
I don't know if you're like me and kind of
like one negative comment can just kind of

28
00:01:33.288 --> 00:01:36.408
ruin your day, so we want to be helpful.

29
00:01:36.408 --> 00:01:41.430
We're all on the same team here, so
form labels made with space Spans.

30
00:01:41.430 --> 00:01:46.230
Instantly, I know that's a problem
because I have a text input.

31
00:01:46.230 --> 00:01:50.286
I can use that text input if I'm
not using a screen reader, but

32
00:01:50.286 --> 00:01:55.670
if it's marked up this way with span for
the label text instead of a label element,

33
00:01:55.670 --> 00:01:58.500
I mean I have no idea
what that field is for.

34
00:01:59.570 --> 00:02:06.100
I might be lucky enough where if a field
has a placeholder or I guess placeholder.

35
00:02:07.350 --> 00:02:11.270
Web browsers and assistive technologies
like over time have learned that

36
00:02:11.270 --> 00:02:13.740
placeholder is better than nothing.

37
00:02:13.740 --> 00:02:14.660
So it actually,

38
00:02:14.660 --> 00:02:19.210
a placeholder will put a name onto
an input if there's nothing else.

39
00:02:19.210 --> 00:02:20.623
But we don't wanna rely on that.

40
00:02:20.623 --> 00:02:23.013
Placeholders go away when
you type in the field.

41
00:02:23.013 --> 00:02:25.093
So it's like, what was I typing?

42
00:02:25.093 --> 00:02:29.343
So we want a visible text
label whenever possible.

43
00:02:29.343 --> 00:02:33.473
So the easy fix with this one is
just change that span to a label.

44
00:02:33.473 --> 00:02:35.746
Put an HTML4 in React, or a for

45
00:02:35.746 --> 00:02:41.446
attribute in vanilla HTML that points
to the ID of first name on that input.

46
00:02:41.446 --> 00:02:43.216
Pair those together.

47
00:02:43.216 --> 00:02:46.037
You will know that they're paired
when you can click on the label and

48
00:02:46.037 --> 00:02:47.596
it will send focus into the input.

49
00:02:47.596 --> 00:02:50.297
So you increase the click target area and

50
00:02:50.297 --> 00:02:55.556
you're telling a screen reader user
exactly what this field is for.

51
00:02:55.556 --> 00:02:58.126
Because placeholder might not
even be the same as the label.

52
00:02:58.126 --> 00:03:01.412
It could be an example of
what they're gonna type in.

53
00:03:01.412 --> 00:03:03.092
And it goes away when you start typing.

54
00:03:03.092 --> 00:03:06.321
So that's a cognitive issue,
like remembering,

55
00:03:06.321 --> 00:03:10.912
having to remember what that field is,
that is an accessibility issue.

56
00:03:12.132 --> 00:03:16.824
Could be a WCAG violation even, but, yeah,
so like that one I can usually spot and

57
00:03:16.824 --> 00:03:19.012
you'll start to see it too.

58
00:03:19.012 --> 00:03:22.309
There are two ways to label or
multiple ways to label an input.

59
00:03:22.309 --> 00:03:26.059
You can do what's called implicit
labeling, where the label wraps the input.

60
00:03:26.059 --> 00:03:28.667
And if it has text in there, text content,

61
00:03:28.667 --> 00:03:33.279
it will automatically assign that
cuz they're paired implicitly.

62
00:03:33.279 --> 00:03:37.349
The explicit is the foreign
ID attribute paring.

63
00:03:37.349 --> 00:03:40.483
You can also use aria label
attribute on the input, but

64
00:03:40.483 --> 00:03:42.335
that won't make visible text.

65
00:03:42.335 --> 00:03:45.405
So we always prefer
visible text when you can.

66
00:03:45.405 --> 00:03:51.410
And we're gonna dive way deeper into
accessible names in the next section.

67
00:03:51.410 --> 00:03:53.184
So custom controls.

68
00:03:54.870 --> 00:03:58.889
Anytime I see a custom control that
could be a default HTML element,

69
00:03:58.889 --> 00:04:01.365
I'm gonna dig in and go test it.

70
00:04:01.365 --> 00:04:05.513
This has historically been a problem
because form controls that we wanna

71
00:04:05.513 --> 00:04:10.997
customize, like radio buttons and check
boxes, they've been really hard to style.

72
00:04:10.997 --> 00:04:15.305
So there's been some accessibility
anti-patterns over the years of like, wow,

73
00:04:15.305 --> 00:04:18.195
we made it look really pretty,
but you can't reach it or

74
00:04:18.195 --> 00:04:20.057
operate it with the keyboard even.

75
00:04:20.057 --> 00:04:23.928
So I'm usually going to
test those recommending,

76
00:04:23.928 --> 00:04:28.159
if we can use a core input
that's more accessible that,

77
00:04:28.159 --> 00:04:33.742
might be customized, but it's one
that is repeatable and centralized,

78
00:04:33.742 --> 00:04:38.445
or I might even recommend like
the default HTML form element.

79
00:04:38.445 --> 00:04:41.588
But we are in a golden age of
web development right now.

80
00:04:41.588 --> 00:04:42.472
It's really exciting.

81
00:04:42.472 --> 00:04:44.142
We have a lot of new CSS features.

82
00:04:44.142 --> 00:04:46.192
Things are getting easier to style.

83
00:04:46.192 --> 00:04:51.312
And I have a talk resource included in
here with my buddy Jason Langstorff and

84
00:04:51.312 --> 00:04:52.592
Una Cravats.

85
00:04:52.592 --> 00:04:54.914
I think she changed her name to Kravanov.

86
00:04:54.914 --> 00:04:59.717
She works on the Google Chrome Dev Rel
team, and they have this video from

87
00:04:59.717 --> 00:05:04.939
Jason's, learn with Json show about
what's new in HTML and CSS in 2023.

88
00:05:04.939 --> 00:05:06.106
And it's really cool.

89
00:05:06.106 --> 00:05:08.226
There's a lot going on.

90
00:05:08.226 --> 00:05:12.446
So this is getting better, but we can't
always use the newest, shiniest thing.

91
00:05:12.446 --> 00:05:16.726
So sometimes custom controls can
be full of accessibility issues.

92
00:05:18.596 --> 00:05:23.516
Colors, contrast, sometimes you can
just tell by looking at colors when you

93
00:05:23.516 --> 00:05:27.057
look at a design that they're too faint.

94
00:05:27.057 --> 00:05:30.715
This can be programmatically determined so
you can sample foreground and

95
00:05:30.715 --> 00:05:32.097
background colors.

96
00:05:32.097 --> 00:05:34.859
There's a ratio that you can calculate,
but

97
00:05:34.859 --> 00:05:40.547
you can start to spot it with your eyes if
you can see the screen some of the time.

98
00:05:40.547 --> 00:05:43.919
So I can usually tell if
something's like way off, but

99
00:05:43.919 --> 00:05:47.744
automated tooling can catch some
of the contrast issues too.

100
00:05:48.884 --> 00:05:53.024
So when I run like the AKS browser
extension, we'll see that in a little bit.

101
00:05:53.024 --> 00:05:56.204
That will surface contrast
issues quite often.

102
00:05:56.204 --> 00:05:56.934
That's a huge one.

103
00:05:59.214 --> 00:06:03.979
Modals and layers like any time you have
a custom modal, something that opens over

104
00:06:03.979 --> 00:06:08.485
the other content, there's a background
layer that grays everything out.

105
00:06:10.375 --> 00:06:15.623
Those kind of handmade modals can
sometimes not have accessibility built in,

106
00:06:15.623 --> 00:06:19.758
so they might not have focus,
might not send focus into it, or

107
00:06:19.758 --> 00:06:22.400
restore it when they close.

108
00:06:22.400 --> 00:06:27.010
Doing like a keyboard trap intentionally
to keep you in the modal layer.

109
00:06:27.010 --> 00:06:28.410
Sometimes that's not present.

110
00:06:29.530 --> 00:06:33.118
Using a dialogue role on the modal
dialogue and focusable and

111
00:06:33.118 --> 00:06:36.200
labelled buttons and calls to action.

112
00:06:36.200 --> 00:06:40.595
Fortunately, there are a lot of
really great component libraries now,

113
00:06:40.595 --> 00:06:44.918
like chakra headless UI, they have
a lot of accessibility baked in, so

114
00:06:44.918 --> 00:06:49.188
this has gotten a lot better if
you're using some of those libraries.

115
00:06:49.188 --> 00:06:50.552
But you wanna test them.

116
00:06:50.552 --> 00:06:54.024
Don't take their word for it, test it.

117
00:06:54.024 --> 00:06:57.528
Then there's non-modal
dialogues that are similar.

118
00:06:57.528 --> 00:07:01.700
The background's not grayed out usually,
but we still want to move focus into those

119
00:07:01.700 --> 00:07:05.716
layers when they open, make them keyboard
reachable and operable and all that.

120
00:07:06.886 --> 00:07:11.085
Sometimes skip links to get to and
from non-modal dialogs can be nice.

121
00:07:12.845 --> 00:07:16.556
So here's the one eye is
like always a red flag.

122
00:07:16.556 --> 00:07:18.606
I can always spot this one.

123
00:07:18.606 --> 00:07:22.036
An on click event on a div.

124
00:07:23.099 --> 00:07:25.189
Just, that's it.

125
00:07:25.189 --> 00:07:28.642
And especially when it's like
in a modal or in a component and

126
00:07:28.642 --> 00:07:33.315
it's like the submit, it's not like
an extra click handler wrapping the thing,

127
00:07:33.315 --> 00:07:37.809
it's like the main call to action
is a div with a click event on it.

128
00:07:37.809 --> 00:07:39.309
I know that's gonna be a problem.

129
00:07:39.309 --> 00:07:41.424
So it should be a button.

130
00:07:41.424 --> 00:07:43.694
And there's all kinds of
reasons why this happens.

131
00:07:43.694 --> 00:07:46.840
Sometimes it's like you have old
style code, like old Sass or

132
00:07:46.840 --> 00:07:49.214
something that everyone's afraid to touch.

133
00:07:50.784 --> 00:07:52.824
I mean, you deal with the constraints.

134
00:07:52.824 --> 00:07:55.846
Like, if you have to make
this into an aria div button,

135
00:07:55.846 --> 00:07:58.704
like we'll see in the next section.

136
00:07:58.704 --> 00:07:59.684
Do the best you can.

137
00:07:59.684 --> 00:08:03.573
But like the goal is to swap those out for
buttons cuz it's way less work.

138
00:08:03.573 --> 00:08:06.757
Was there a question?

139
00:08:06.757 --> 00:08:12.565
&gt;&gt; Yeah, around colors,
is there a special color palette or

140
00:08:12.565 --> 00:08:19.735
an accessible color palette to
avoid issues with choosing colors?

141
00:08:19.735 --> 00:08:24.396
&gt;&gt; Yeah, there is a lot of color
palette generators and things online.

142
00:08:24.396 --> 00:08:29.771
We talked about color quite a bit in
the web app accessibility workshop,

143
00:08:29.771 --> 00:08:34.176
and I think it's that set of
slides I have a bunch of links and

144
00:08:34.176 --> 00:08:36.796
things to read about with color.

145
00:08:36.796 --> 00:08:41.389
But I think if you search for
accessible color power generator,

146
00:08:41.389 --> 00:08:44.847
you might find some stuff like that.

147
00:08:44.847 --> 00:08:48.037
There is an article from stripe,
interestingly enough,

148
00:08:48.037 --> 00:08:52.787
where they wrote about making a design
system that had color contrast built in.

149
00:08:52.787 --> 00:08:53.857
That's very cool.

150
00:08:53.857 --> 00:08:57.497
It's super technical and
geeky and I love it.

151
00:08:57.497 --> 00:09:02.445
So if you just search stripe
accessibility design system contrast or

152
00:09:02.445 --> 00:09:04.931
something you'll find that one.

153
00:09:04.931 --> 00:09:09.672
But yeah, there's a lot of really great
resources out there for that kinda thing,

154
00:09:09.672 --> 00:09:10.359
question.

155
00:09:10.359 --> 00:09:15.445
&gt;&gt; Speaking of striping colors their
home page H1, it has this cool gradient

156
00:09:15.445 --> 00:09:20.223
overlay effect on it but the color
is actually some dark gray, right?

157
00:09:20.223 --> 00:09:24.880
So I'm wondering how would
a contrast checker check that?

158
00:09:24.880 --> 00:09:28.056
Because visually it's like red and
blue and green or whatever, but

159
00:09:28.056 --> 00:09:30.210
the computer value is actually gray.

160
00:09:30.210 --> 00:09:36.500
Is it checked against the visual color or
the actual computed color?

161
00:09:36.500 --> 00:09:37.650
&gt;&gt; That's a great question.

162
00:09:37.650 --> 00:09:38.614
Yeah, it does make sense.

163
00:09:38.614 --> 00:09:43.251
And what can make it even more complicated
is sometimes those gradients are animated

164
00:09:43.251 --> 00:09:45.808
and they move so
like what color you sampling?

165
00:09:45.808 --> 00:09:49.561
Yeah, contrast checkers usually
just skip those, like X.

166
00:09:49.561 --> 00:09:52.867
I used to work on it and
that went into the can't tell fork,

167
00:09:52.867 --> 00:09:57.591
it would be like nope, can't tell it goes
into this category called Needs Review,

168
00:09:57.591 --> 00:10:01.383
which is like the computer can't
tell if it should be pass or fail.

169
00:10:01.383 --> 00:10:06.691
So we're gonna put it into this queue for
people to review manually.

170
00:10:06.691 --> 00:10:07.476
So, yeah,

171
00:10:07.476 --> 00:10:13.971
that one's tough because it might have a
different color value in different areas.

172
00:10:13.971 --> 00:10:17.477
So I guess if I was testing that
manually and providing feedback,

173
00:10:17.477 --> 00:10:22.245
I'd probably sample a bunch of colors and
kind of take the worst case scenario.

174
00:10:22.245 --> 00:10:26.715
Yeah, that's a pretty involved test.

175
00:10:26.715 --> 00:10:28.879
Of course a computer can't tell.

176
00:10:28.879 --> 00:10:33.136
Although I do think there are some tools
now that use computer vision as opposed to

177
00:10:33.136 --> 00:10:36.825
JavaScript to evaluate that so
they can sample pixels.

178
00:10:36.825 --> 00:10:40.139
Events is a tool company
that's like a new startup,

179
00:10:40.139 --> 00:10:44.506
they do stuff around that and so
there are new approaches to that, but

180
00:10:44.506 --> 00:10:48.145
it is pretty hard and
it's computationally expensive.

181
00:10:48.145 --> 00:10:51.025
So to run acts to test
contrast in that way,

182
00:10:51.025 --> 00:10:55.585
as you'll see later on when we get
to automation, some of that stuff

183
00:10:55.585 --> 00:11:00.157
you wanna only run in your page
level tests, not in your unit tests.

