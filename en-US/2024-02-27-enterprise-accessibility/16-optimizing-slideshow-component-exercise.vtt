WEBVTT

1
00:00:00.150 --> 00:00:03.988
So just like before,
we have a component on the page.

2
00:00:03.988 --> 00:00:07.910
These are some pictures I took
in Hawaii a couple weeks ago.

3
00:00:07.910 --> 00:00:10.636
We also have a version
of it on StackBlitz,

4
00:00:10.636 --> 00:00:13.510
if you want to play with it there.

5
00:00:13.510 --> 00:00:18.340
I am going to make some changes
here on the actual site.

6
00:00:18.340 --> 00:00:20.347
So there's this gallery.

7
00:00:20.347 --> 00:00:23.840
It has these pictures in it.

8
00:00:23.840 --> 00:00:28.693
And there are some captions,
there's some dots down here

9
00:00:28.693 --> 00:00:32.564
to go around that may or
may not be accessible.

10
00:00:32.564 --> 00:00:34.513
And then there's a full screen.

11
00:00:34.513 --> 00:00:37.227
So the full screen could
be a good candidate for

12
00:00:37.227 --> 00:00:39.213
using the role of application.

13
00:00:39.213 --> 00:00:44.951
A user has intentionally
gone into this mode.

14
00:00:44.951 --> 00:00:47.631
It's a full screen slideshow.

15
00:00:48.651 --> 00:00:50.527
They're not gonna be trying
to navigate by headings,

16
00:00:50.527 --> 00:00:51.964
there's just less on the page right now.

17
00:00:51.964 --> 00:00:56.354
So I think I could probably safely
toggle this application rule on and

18
00:00:56.354 --> 00:00:59.141
off to make this work better in NVDA.

19
00:00:59.141 --> 00:01:01.900
But I'm putting it Kind of
behind this setting that

20
00:01:01.900 --> 00:01:04.219
gets going into full screen mode.

21
00:01:04.219 --> 00:01:09.137
That's a toggle that I can kind of use
as a flag on whether I'm gonna use this

22
00:01:09.137 --> 00:01:11.739
application role or not.

23
00:01:11.739 --> 00:01:15.759
And so this is one instance where
I could probably get away with it.

24
00:01:18.059 --> 00:01:20.889
So let's play with this
in NVDA real quick.

25
00:01:22.039 --> 00:01:27.264
See what it looks like before
we do anything with it.

26
00:01:27.264 --> 00:01:32.048
[SOUND]
&gt;&gt; Exercise 3, slide show exercise.

27
00:01:32.048 --> 00:01:34.663
&gt;&gt; So we've got our gallery here.

28
00:01:34.663 --> 00:01:35.480
I'm gonna tab.

29
00:01:35.480 --> 00:01:38.237
&gt;&gt; And mark go full screen button and
your full screen.

30
00:01:38.237 --> 00:01:40.038
&gt;&gt; There's our button,
can I get to any of the other buttons?

31
00:01:40.038 --> 00:01:42.636
&gt;&gt; Look at the whole
previous slide button.

32
00:01:42.636 --> 00:01:44.449
&gt;&gt; Yeah, I can.
&gt;&gt; Next slide button.

33
00:01:44.449 --> 00:01:45.243
&gt;&gt; So I can use these.

34
00:01:45.243 --> 00:01:49.712
&gt;&gt; Grammatic light in sharks' code where
the water reflections are broken up by

35
00:01:49.712 --> 00:01:50.960
rocks and families.

36
00:01:50.960 --> 00:01:53.519
&gt;&gt; So it is doing a pretty good
job of reading everything.

37
00:01:53.519 --> 00:01:57.030
I actually want to check and
see if this is the completed one or not.

38
00:01:57.030 --> 00:01:59.995
[LAUGH] But if I want to go
into full scope screen mode.

39
00:01:59.995 --> 00:02:02.361
&gt;&gt; Go full screen button and
your full screen.

40
00:02:02.361 --> 00:02:05.792
&gt;&gt; It tells me what that button does
even though it's an icon button,

41
00:02:05.792 --> 00:02:09.431
it has a label on it that says enter
full screen mode and I can hit Enter.

42
00:02:09.431 --> 00:02:10.129
&gt;&gt; Image slideshow.

43
00:02:10.129 --> 00:02:15.013
&gt;&gt; And it sent me into the full slideshow,
or it opened it at least I don't know if

44
00:02:15.013 --> 00:02:18.412
it moved my focus or
not kind of didn't sound like it.

45
00:02:18.412 --> 00:02:20.161
So if I use the arrow key Keys.

46
00:02:20.161 --> 00:02:22.738
&gt;&gt; Three of five.

47
00:02:22.738 --> 00:02:25.671
&gt;&gt; It is-
&gt;&gt; Four of five, the beach palm trees and

48
00:02:25.671 --> 00:02:26.975
canoes and wiki key.

49
00:02:26.975 --> 00:02:29.088
&gt;&gt; It is actually advancing me.

50
00:02:29.088 --> 00:02:33.062
&gt;&gt; Five of five sun sliding in late
in the afternoon at Kyluma beach.

51
00:02:33.062 --> 00:02:35.193
&gt;&gt; Cool, seems to be working okay.

52
00:02:35.193 --> 00:02:38.953
So let's go see what's going
on with our code right now.

53
00:02:38.953 --> 00:02:40.660
So-
&gt;&gt; HTTPS.

54
00:02:40.660 --> 00:02:46.409
&gt;&gt; I mostly want you to know that NVDA and
Windows testing is that easy.

55
00:02:46.409 --> 00:02:47.639
Like that was so seamless.

56
00:02:47.639 --> 00:02:52.186
I could just go NVDA, open it up
on my Mac, so that you can go and

57
00:02:52.186 --> 00:02:55.659
test stuff and make sure it works.

58
00:02:55.659 --> 00:02:57.859
So we saw the portal switcher.

59
00:02:57.859 --> 00:03:05.584
That component is under our components
directory in slideshow.tsx.

60
00:03:05.584 --> 00:03:12.504
So this version of this might even be
working better than it used to actually.

61
00:03:13.914 --> 00:03:17.754
So we have a series of divs.

62
00:03:17.754 --> 00:03:21.079
We have a list of elements.

63
00:03:21.079 --> 00:03:25.858
These previous and
next buttons are not very accessible.

64
00:03:25.858 --> 00:03:29.798
So this actually, I'm kind of wondering
if we were seeing the wrong version.

65
00:03:29.798 --> 00:03:34.893
I'm gonna do a little check
here to see which one, yeah,

66
00:03:34.893 --> 00:03:39.576
see that was the completed slideshow,
I wondered.

67
00:03:39.576 --> 00:03:42.143
That's why that was working so
much better.

68
00:03:42.143 --> 00:03:46.653
I'm actually going to change it back.

69
00:03:46.653 --> 00:03:49.983
So, let's go look at NVDA again.

70
00:03:49.983 --> 00:03:53.413
We'll go see what it looks like
before it has fixes in it.

71
00:03:54.443 --> 00:03:56.763
And this is the deployed version also.

72
00:03:59.103 --> 00:04:01.319
Let me see if I can open it up locally.

73
00:04:02.739 --> 00:04:03.965
I thought that a link would work.

74
00:04:03.965 --> 00:04:06.601
&gt;&gt; Slide show HTTP, HTML.

75
00:04:06.601 --> 00:04:12.729
&gt;&gt; That's the one thing sometimes you have
to be able to access what you're doing.

76
00:04:12.729 --> 00:04:16.661
I think it depends on what network I'm on,
or demo might be foiled.

77
00:04:16.661 --> 00:04:19.766
&gt;&gt; Refresh, loading complete.

78
00:04:19.766 --> 00:04:21.210
Slide show exercise.

79
00:04:21.210 --> 00:04:23.000
&gt;&gt; Well, we know that this was working.

80
00:04:23.000 --> 00:04:29.030
So, I am going to opt to show
you what code I used for this.

81
00:04:29.030 --> 00:04:31.924
If I was better set up, we would
be able to test them back to back.

82
00:04:31.924 --> 00:04:36.675
So, we really need to test
it in Windows to see, but

83
00:04:36.675 --> 00:04:40.551
in a live demo, I'm a little bit caught.

84
00:04:40.551 --> 00:04:43.531
So let's go over to our code.

85
00:04:44.901 --> 00:04:47.511
Let's look at what this
completed version looks like.

86
00:04:47.511 --> 00:04:50.261
It'll kind of help with time, anyways.

87
00:04:50.261 --> 00:04:56.661
So this completed version,
it is under completed components.

88
00:04:56.661 --> 00:04:59.673
So we've got some state variables.

89
00:04:59.673 --> 00:05:03.823
We have what slide we're on,
managing that with react-use-state.

90
00:05:03.823 --> 00:05:05.743
We've got a full-screen mode.

91
00:05:05.743 --> 00:05:08.613
So that is that state
that I can hinge off of

92
00:05:08.613 --> 00:05:11.823
how I want to make this
work in a screen reader.

93
00:05:13.023 --> 00:05:17.093
I've got some logic here to increment or
decrement the slides in either direction.

94
00:05:17.093 --> 00:05:18.793
Our buttons can do that.

95
00:05:18.793 --> 00:05:22.333
They call a function to change
the current slide index.

96
00:05:23.843 --> 00:05:26.573
Here's some code to enter full screen.

97
00:05:26.573 --> 00:05:31.091
So when I enter full screen mode,
when the user clicks that button,

98
00:05:31.091 --> 00:05:34.813
I can send focus into
the slideshow content.

99
00:05:34.813 --> 00:05:37.513
And here's that ref again, another ref.

100
00:05:37.513 --> 00:05:41.638
So the slideshow ref is on

101
00:05:41.638 --> 00:05:47.991
the container with the images in it.

102
00:05:47.991 --> 00:05:50.871
So I'm sending you
directly to that element.

103
00:05:50.871 --> 00:05:54.138
And it has a time index of -1,

104
00:05:54.138 --> 00:05:59.684
to just make sure that we
can catch that focus event.

105
00:05:59.684 --> 00:06:04.087
The way that those images were
actually announcing was that it hasn't

106
00:06:04.087 --> 00:06:06.798
already a live attribute of polite on it.

107
00:06:06.798 --> 00:06:12.948
So whenever the content changes,
it was announcing that to you.

108
00:06:12.948 --> 00:06:16.158
It has this aria-role
description of image slide show.

109
00:06:16.158 --> 00:06:19.955
So you can't make up roles, you can't
can use aria-role description and

110
00:06:19.955 --> 00:06:22.172
you can put whatever you want in there.

111
00:06:22.172 --> 00:06:27.173
So if this is like a special type
of element, because this one

112
00:06:27.173 --> 00:06:33.059
I'm switching between a role of
application in full full screen mode,

113
00:06:33.059 --> 00:06:37.990
or a roll of region,
which is a little bit better than a dev.

114
00:06:37.990 --> 00:06:43.648
It actually is a sectioning element, we
can label, but it's not super descriptive.

115
00:06:43.648 --> 00:06:47.789
So I opted to put aria-role description
on here to say this widget,

116
00:06:47.789 --> 00:06:51.048
this custom widget is an image slide show.

117
00:06:51.048 --> 00:06:56.228
I could put a label that says that I
opted to use aria-role description.

118
00:06:56.228 --> 00:07:00.228
And so
this application mode is what is allowing

119
00:07:00.228 --> 00:07:03.632
me to actually go through those images.

120
00:07:03.632 --> 00:07:08.029
Because if you're not in the right mode,
if my focus is on a div,

121
00:07:08.029 --> 00:07:10.236
I'm not on an input or a button.

122
00:07:10.236 --> 00:07:14.051
I'm gonna be in browse mode, so
those arrow keys are not actually going.

123
00:07:14.051 --> 00:07:15.698
It's not gonna pass that
through to the browser.

124
00:07:15.698 --> 00:07:18.579
It's going to try and
navigate me through the content.

125
00:07:18.579 --> 00:07:23.245
And so the way that that slideshow was
actually working is that application mode,

126
00:07:23.245 --> 00:07:25.759
but I don't want to leave
it on all the time.

127
00:07:25.759 --> 00:07:28.145
So I toggle it.

128
00:07:28.145 --> 00:07:29.048
So let's see what else?

129
00:07:29.048 --> 00:07:33.747
We have a button like a reachable operable
button to close full screen mode.

130
00:07:33.747 --> 00:07:38.273
We also have a way to escape.

131
00:07:38.273 --> 00:07:41.690
So we come up here, we've got a key
handler, it handles multiple things.

132
00:07:41.690 --> 00:07:44.164
So it's got the close on escape.

133
00:07:45.304 --> 00:07:49.973
We've got arrow right and arrow left, or
arrow right and arrow down, increment and

134
00:07:49.973 --> 00:07:54.414
arrow left and arrow up,
we're gonna decrement the slideshow.

135
00:07:54.414 --> 00:08:00.457
But without the application role that I
wish I could show you a little bit better.

136
00:08:01.737 --> 00:08:02.557
That just wouldn't work.

137
00:08:02.557 --> 00:08:06.157
We would just get stuck cuz
we're in browse mode, right?

138
00:08:06.157 --> 00:08:12.497
So I can kick the user automatically into
focus mode, but the application role, but

139
00:08:12.497 --> 00:08:17.967
I'm being very selective with it to be,
I don't know, careful [LAUGH].

140
00:08:17.967 --> 00:08:20.787
So let's see, what else were
there gems do we find in here?

141
00:08:20.787 --> 00:08:24.897
So each image, we're iterating
over a list of images here.

142
00:08:24.897 --> 00:08:30.997
That's the the slideshow content and
each image is marked up as a figure.

143
00:08:30.997 --> 00:08:35.157
It has an aria labeled by of the image,

144
00:08:35.157 --> 00:08:42.188
let's see the image alt text and
it has extra text for a caption.

145
00:08:42.188 --> 00:08:43.978
So there's alt text and a caption.

146
00:08:43.978 --> 00:08:48.138
The alt text is more specific,
like what's in the image.

147
00:08:48.138 --> 00:08:53.168
The caption is more of a description
of it, almost marketing copy.

148
00:08:53.168 --> 00:08:54.408
So they're slightly different.

149
00:08:54.408 --> 00:08:59.276
So I included them both, and I used the
figure to announce what are you saying?

150
00:08:59.276 --> 00:09:05.349
So you could kinda hear both
pieces of content for each image.

151
00:09:05.349 --> 00:09:09.562
And so, that uses figure and
fig caption, the regular image tag.

152
00:09:09.562 --> 00:09:11.669
There's also a counter in there.

153
00:09:11.669 --> 00:09:15.541
So anytime this content is changing,
the screen reader is picking it up and

154
00:09:15.541 --> 00:09:16.529
reading it aloud.

155
00:09:17.829 --> 00:09:19.425
That's what that aria-live was doing.

156
00:09:21.076 --> 00:09:23.536
And then we have our previous and
next buttons.

157
00:09:23.536 --> 00:09:28.336
I think the original version, these were
divs or they didn't have labels on them.

158
00:09:28.336 --> 00:09:30.216
And then our dots at the bottom.

159
00:09:30.216 --> 00:09:34.067
I can't tell you how many slideshows I've
seen where the dots to control it are just

160
00:09:34.067 --> 00:09:36.706
little divs that have
click events on them.

161
00:09:36.706 --> 00:09:38.996
So those should be accessible too.

162
00:09:38.996 --> 00:09:40.480
And these are buttons.

163
00:09:40.480 --> 00:09:41.628
They're for their labels.

164
00:09:41.628 --> 00:09:48.858
It says, go to slide, and then I'm using
the same iterable over the map of images.

165
00:09:48.858 --> 00:09:51.098
It's like an array of objects, I think.

166
00:09:51.098 --> 00:09:56.300
So I can count those and
use that same way of mapping over an array

167
00:09:56.300 --> 00:10:01.125
of objects to give these little
dot buttons unique names.

168
00:10:04.032 --> 00:10:09.000
So we've got our button.

169
00:10:09.000 --> 00:10:10.260
So let's focus into it.

170
00:10:12.970 --> 00:10:16.729
See if it works in a Mac environment.

171
00:10:21.826 --> 00:10:24.973
I don't know how I'm missing.

172
00:10:24.973 --> 00:10:26.546
This is the inaccessible version.

173
00:10:26.546 --> 00:10:29.246
[LAUGH] I'm like,
why can't I click on this?

174
00:10:29.246 --> 00:10:32.240
This version locally is the one
that's not accessible at all,

175
00:10:32.240 --> 00:10:34.056
that you have to click on everything.

176
00:10:35.396 --> 00:10:39.743
The version that we saw
in NVDA works better.

177
00:10:39.743 --> 00:10:43.747
We can actually reach-
&gt;&gt; Image slideshow.

178
00:10:43.747 --> 00:10:46.746
&gt;&gt; We can go into it.

179
00:10:46.746 --> 00:10:50.899
&gt;&gt; One to five Sun streaks through the
clouds at a beach on the Oahu North Shore.

180
00:10:50.899 --> 00:10:52.491
&gt;&gt; So it just announces everything.

181
00:10:52.491 --> 00:10:54.837
&gt;&gt; Like in shark's Cove button go.

182
00:10:54.837 --> 00:10:58.774
&gt;&gt; And that use a combination of factors,
so aria-live.

183
00:10:58.774 --> 00:11:02.516
Changing the content and side of there,
yeah, we went over that.

184
00:11:02.516 --> 00:11:03.996
So any questions on this one?

185
00:11:03.996 --> 00:11:08.126
I know there's a lot of stuff
going on with this slideshow.

186
00:11:09.276 --> 00:11:13.264
&gt;&gt; Would the aria-role description
work on web components so

187
00:11:13.264 --> 00:11:17.006
I can custom describe all my components?

188
00:11:17.006 --> 00:11:21.730
&gt;&gt; Potentially yep,
I think it's a good tool to reach for.

189
00:11:21.730 --> 00:11:29.088
I would say, check the aria specification
for what it taught, like read up on it.

190
00:11:29.088 --> 00:11:32.062
[LAUGH] Read the requirements for
it first, and

191
00:11:32.062 --> 00:11:35.199
then yeah, see if it can work for
your use cases.

192
00:11:35.199 --> 00:11:36.608
&gt;&gt; Another question.

193
00:11:36.608 --> 00:11:41.082
If in your example the images were
delayed content, imagination, etc.

194
00:11:41.082 --> 00:11:45.542
What would be the loading skeleton for
the screen reader?

195
00:11:45.542 --> 00:11:47.132
&gt;&gt; Good question.

196
00:11:47.132 --> 00:11:51.044
So if you're dynamically loading
content that takes a second,

197
00:11:51.044 --> 00:11:54.472
you're fetching asynchronous data maybe.

198
00:11:54.472 --> 00:11:59.057
You could have a loading state that,
if it has a loading spinner on it,

199
00:11:59.057 --> 00:12:04.952
you could put an aria-live region on
the loading spinner that says loading.

200
00:12:04.952 --> 00:12:08.892
And that way the screen reader user will
be notified that there's content loading.

201
00:12:08.892 --> 00:12:12.314
It would be nice if you could centralize
that in your code base somehow,

202
00:12:12.314 --> 00:12:15.682
because if you had a bunch of
components all loading asynchronously,

203
00:12:15.682 --> 00:12:17.982
it would be like loading,
loading, loading.

204
00:12:19.152 --> 00:12:23.294
So you kind of need announcement
manager almost like loading somehow.

205
00:12:23.294 --> 00:12:28.166
One per page I guess would be probably
ideal because a bunch of loading

206
00:12:28.166 --> 00:12:31.198
announcements might be kind of annoying.

207
00:12:31.198 --> 00:12:35.496
But that's a great question about skeleton
loaders with performance if we can

208
00:12:35.496 --> 00:12:38.832
announce that something's loading,
that'd be awesome.

209
00:12:38.832 --> 00:12:42.824
I've seen on airline sites when
they'll have a loading page,

210
00:12:42.824 --> 00:12:47.810
they'll send focus to the loader that will
announce it if it has alt text on it.

211
00:12:47.810 --> 00:12:50.799
And then it'll load and
go to the next page or the next view.

212
00:12:50.799 --> 00:12:54.287
So there's various techniques, but

213
00:12:54.287 --> 00:13:00.393
it is great call out that we should
announce that stuff is loading.

214
00:13:00.393 --> 00:13:03.722
&gt;&gt; For the [INAUDIBLE]
&gt;&gt; MVDA.

215
00:13:03.722 --> 00:13:08.987
Ask for a license to parallels or
something, because MVDA itself is free.

216
00:13:10.197 --> 00:13:15.197
And I know for a lot of developers, we
don't have Windows machines necessarily,

217
00:13:15.197 --> 00:13:16.977
but you can get a VM.

218
00:13:16.977 --> 00:13:21.087
There is also this thing
called Assistive Labs that

219
00:13:21.087 --> 00:13:24.164
you can use to test in the cloud.

220
00:13:24.164 --> 00:13:28.219
So that could be a service
you could look into.

221
00:13:28.219 --> 00:13:31.744
I haven't really worked with it myself,
but I know a lot of people really love it.

222
00:13:31.744 --> 00:13:35.662
And so it could be a good option for
your team.

