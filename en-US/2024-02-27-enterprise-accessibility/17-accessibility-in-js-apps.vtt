WEBVTT

1
00:00:00.000 --> 00:00:05.633
Let's switch gears a bit and dive into
accessibility in JavaScript applications,

2
00:00:05.633 --> 00:00:09.124
something that I have been
very passionate about for

3
00:00:09.124 --> 00:00:14.778
a long time because I feel like there's
a lot to improve in JavaScript-heavy apps.

4
00:00:14.778 --> 00:00:17.166
So let's focus on some
of the unique aspects,

5
00:00:17.166 --> 00:00:20.672
starting with client-side rendering and
client-side routing.

6
00:00:20.672 --> 00:00:24.979
So, when you render your pages
using libraries like React,

7
00:00:24.979 --> 00:00:30.046
Angular, View, Framework of the week,
[LAUGH] often those JavaScript

8
00:00:30.046 --> 00:00:34.872
libraries are taking over rendering and
routing from the browser.

9
00:00:34.872 --> 00:00:41.557
So, replacing one view with another using
JavaScript, and there is no page refresh.

10
00:00:41.557 --> 00:00:47.369
That has implications, especially for
keyboard and screen reader users,

11
00:00:47.369 --> 00:00:51.839
often missed, but
let's talk about what goes into that.

12
00:00:51.839 --> 00:00:56.026
Sometimes these apps are doing what's
called hydration, where you have

13
00:00:56.026 --> 00:01:00.830
content that's pre-rendered on the server,
and then there's client side code.

14
00:01:00.830 --> 00:01:02.625
Sometimes it's a duplication.

15
00:01:02.625 --> 00:01:03.782
Don't love that.

16
00:01:03.782 --> 00:01:09.190
But you go from this pre rendered server
code, the JavaScript downloads executes,

17
00:01:09.190 --> 00:01:13.086
and then they hydrate the pages
into interactive versions.

18
00:01:13.086 --> 00:01:14.855
And so that's pretty popular.

19
00:01:14.855 --> 00:01:19.195
Gatsby did that, Next does it,
Spelte, among others.

20
00:01:19.195 --> 00:01:23.553
You can configure a lot of your libraries
and frameworks to render on the server,

21
00:01:23.553 --> 00:01:24.461
which is great.

22
00:01:24.461 --> 00:01:25.517
It's super cool.

23
00:01:25.517 --> 00:01:28.482
At least with things like Astro,
they give you the option.

24
00:01:28.482 --> 00:01:31.116
Really, obviously, it's pretty cool.

25
00:01:31.116 --> 00:01:34.542
It's gotten easier for
sure to pre render on the server.

26
00:01:34.542 --> 00:01:38.506
So this question comes up,
do people turn JavaScript off?

27
00:01:38.506 --> 00:01:42.212
It's kind of the elephant in the room,
we're talking about rendering on

28
00:01:42.212 --> 00:01:45.320
the server, talking about a lot
of clients like JavaScript,

29
00:01:45.320 --> 00:01:47.800
there's been a debate over that for
a long time.

30
00:01:47.800 --> 00:01:50.521
And most of the internet requires it now.

31
00:01:50.521 --> 00:01:53.209
I don't know if you've
turned off JavaScript and

32
00:01:53.209 --> 00:01:56.347
tried to navigate the web recently,
but it would be hard.

33
00:01:56.347 --> 00:01:59.353
[LAUGH] You're gonna
have a bad time probably.

34
00:01:59.353 --> 00:02:04.157
And so it is easier to render web
apps on the server now than it was

35
00:02:04.157 --> 00:02:05.437
a few years ago.

36
00:02:05.437 --> 00:02:09.072
But we've come to know and expect and
users have come to know and

37
00:02:09.072 --> 00:02:11.964
expect a certain level
of modern interactivity.

38
00:02:11.964 --> 00:02:17.231
Anyone that uses Facebook would be
upset if it refreshed every time they

39
00:02:17.231 --> 00:02:22.234
hit the light button, like that
asynchronous posting to a server,

40
00:02:22.234 --> 00:02:26.707
updating, I mean,
we expect things to be fast and async, so

41
00:02:26.707 --> 00:02:30.347
not too many people
are turning JavaScript off.

42
00:02:30.347 --> 00:02:35.361
For accessibility, it is not strictly
a requirement that you support node.js.

43
00:02:35.361 --> 00:02:39.630
In fact, JavaScript is necessary for
stateful ARIA.

44
00:02:39.630 --> 00:02:43.538
If you have any ARIA states
that you're turning on and off,

45
00:02:43.538 --> 00:02:48.010
you have to toggle those with
JavaScript and even keyboard events.

46
00:02:48.010 --> 00:02:50.741
I mean, sure,
you could do a lot with forms, but

47
00:02:50.741 --> 00:02:54.487
that's not gonna get to the type
of experience that we expect now.

48
00:02:54.487 --> 00:02:57.997
So JavaScript is not a bad thing.

49
00:02:57.997 --> 00:02:59.305
I love JavaScript.

50
00:02:59.305 --> 00:03:01.278
It's powerful, it's in every browser.

51
00:03:01.278 --> 00:03:02.957
I mean, it's everywhere, right?

52
00:03:02.957 --> 00:03:03.747
We can do a lot.

53
00:03:03.747 --> 00:03:05.704
It's gotten really good, too.

54
00:03:05.704 --> 00:03:08.515
A lot of the features
we have now are great.

55
00:03:08.515 --> 00:03:12.494
So, for accessibility,
JavaScript can be helpful.

56
00:03:12.494 --> 00:03:16.429
It also can be the source of
a lot of inaccessible apps.

57
00:03:16.429 --> 00:03:21.781
So, let's talk about the accessibility
impacts of JavaScript.

58
00:03:21.781 --> 00:03:24.653
So screen readers do look
at a page as rendered.

59
00:03:24.653 --> 00:03:29.764
So however the page is constructed,
whether it's hydrated from the server and

60
00:03:29.764 --> 00:03:34.263
then turned into client side code,
or if it's totally rendered all in

61
00:03:34.263 --> 00:03:39.220
the client with JavaScript, screen readers
are going to look at what has been

62
00:03:39.220 --> 00:03:43.748
rendered at the end of that process,
so it's fine to use JavaScript.

63
00:03:43.748 --> 00:03:47.431
You do need to consider
lower bandwidth networks and

64
00:03:47.431 --> 00:03:53.038
people with older devices, but that's
not strictly an accessibility issue,

65
00:03:53.038 --> 00:03:58.159
it's more usability performance,
like those topics start to come up.

66
00:03:58.159 --> 00:04:02.147
But this is where accessibility and
Performance tend to intersect.

67
00:04:02.147 --> 00:04:07.609
So with client-side routing, that is
when we take the functionality of page

68
00:04:07.609 --> 00:04:13.589
refreshes away from the browser and we let
JavaScript replace those views instead.

69
00:04:13.589 --> 00:04:15.510
So we're replacing one with another.

70
00:04:15.510 --> 00:04:20.067
And this has those impacts, as I said, on
keyboard users because when you click on

71
00:04:20.067 --> 00:04:24.627
something without doing anything about it,
and a JavaScript library or a routing

72
00:04:24.627 --> 00:04:29.009
library, your focus is just gonna stay
there, cuz the page didn't refresh.

73
00:04:29.009 --> 00:04:33.479
So for a keyboard user, they might be
left there going, did anything happen?

74
00:04:33.479 --> 00:04:36.304
I clicked that,
I didn't hear anything, and

75
00:04:36.304 --> 00:04:39.065
maybe it changed the view,
if I could see it.

76
00:04:39.065 --> 00:04:43.110
But I'm still left on that link, just kind
of functionally, that's what happens.

77
00:04:43.110 --> 00:04:48.208
And so for a screen reader user, they
might have no idea that the page changed.

78
00:04:48.208 --> 00:04:53.404
They're clicking, okay, I clicked
this link, nothing happened, I didn't

79
00:04:53.404 --> 00:04:58.924
hear anything, I have no idea, I'm still
on this link, I think it might be broken.

80
00:04:58.924 --> 00:05:00.725
That's kind of a problem, isn't it?

81
00:05:00.725 --> 00:05:02.476
So we need to handle that.

82
00:05:02.476 --> 00:05:03.863
And there are some techniques.

83
00:05:03.863 --> 00:05:09.510
And I had heard many techniques over
the years, including, okay, I'm on this

84
00:05:09.510 --> 00:05:14.668
nav link, I hit Enter, I send focus
to a heading in the new content area.

85
00:05:14.668 --> 00:05:19.109
Okay, that could work, for a screen reader
user, That would announce that content.

86
00:05:19.109 --> 00:05:22.914
It would move me in the new content so
I would know something happened.

87
00:05:22.914 --> 00:05:25.541
And screen reader users
have been happy with that.

88
00:05:25.541 --> 00:05:26.760
It's worked fine.

89
00:05:26.760 --> 00:05:29.721
If you add tab index of
negative one on that heading,

90
00:05:29.721 --> 00:05:33.172
you can make sure you catch it
with that programmatic focus.

91
00:05:33.172 --> 00:05:37.603
He used JavaScript to actually
call focus on that element.

92
00:05:37.603 --> 00:05:41.704
Another technique, very similar is
when you're on that nav link and

93
00:05:41.704 --> 00:05:46.034
you hit Enter, you send focus to
a wrapper element instead of a heading.

94
00:05:46.034 --> 00:05:49.491
It's pretty similar except it's gonna
announce more than just the heading.

95
00:05:49.491 --> 00:05:52.922
So both of those have been recommended.

96
00:05:52.922 --> 00:05:55.089
There's other techniques
that I've seen in the wild.

97
00:05:55.089 --> 00:05:59.761
So another technique could be maybe you
leave focus Where it was on the nav link,

98
00:05:59.761 --> 00:06:02.846
but there's an ARIA live
region on the new content.

99
00:06:02.846 --> 00:06:05.455
And when it changes,
it'll automatically announce it.

100
00:06:05.455 --> 00:06:08.232
It kind of like our slide show,
when that content changed,

101
00:06:08.232 --> 00:06:10.244
it was automatically getting announced.

102
00:06:10.244 --> 00:06:12.484
I've seen that on sites.

103
00:06:12.484 --> 00:06:17.173
You could potentially leave focus where
it is and have a separate live region.

104
00:06:17.173 --> 00:06:21.778
That's just hidden from view, but
it's still rendered and it just says, hey,

105
00:06:21.778 --> 00:06:25.044
page change to portfolio page or
whatever the new pages.

106
00:06:25.044 --> 00:06:28.067
So these are all techniques and
they're all floating around.

107
00:06:28.067 --> 00:06:33.303
I thought, I really wish I had more
information on what to recommend.

108
00:06:33.303 --> 00:06:37.725
So when I worked at Gatsby, I did some
testing with a group called Fable in

109
00:06:37.725 --> 00:06:42.382
Toronto, they have a community of
disabled testers that you can work with.

110
00:06:42.382 --> 00:06:43.621
They're amazing.

111
00:06:43.621 --> 00:06:48.005
And they'll test prototypes,
pages, product demos,

112
00:06:48.005 --> 00:06:53.299
whatever you put in front of them,
and they will test it with a variety

113
00:06:53.299 --> 00:06:58.526
of screen readers and voice navigation and
magnification in Zoom.

114
00:06:58.526 --> 00:07:02.077
So they can really catch you on some
biases, which is what happened for me.

115
00:07:02.077 --> 00:07:03.102
I was like, cool.

116
00:07:03.102 --> 00:07:05.743
I know the screen reader
techniques work great.

117
00:07:05.743 --> 00:07:10.270
I was not thinking about low
vision like magnification in Zoom.

118
00:07:10.270 --> 00:07:13.010
And I was not thinking
about voice navigation.

119
00:07:13.010 --> 00:07:17.105
So it was really helpful for
me to bring in these prototypes and

120
00:07:17.105 --> 00:07:21.989
get other perspectives that I was not
considering, and it ended up really

121
00:07:21.989 --> 00:07:27.462
affecting my advice, which was kind of
a combination of all of these techniques.

122
00:07:27.462 --> 00:07:32.502
So what I ended up landing on was
move focus into the new content, so

123
00:07:32.502 --> 00:07:37.819
from the nav link you clicked on,
move it into the new page somewhere.

124
00:07:37.819 --> 00:07:41.824
And I actually found moving
it to something focusable and

125
00:07:41.824 --> 00:07:45.246
operable like a button,
like a skip link maybe,

126
00:07:45.246 --> 00:07:49.096
something that's like
a heading is not interactive.

127
00:07:49.096 --> 00:07:54.203
So I've learned maybe that would be
more helpful, and then separately

128
00:07:54.203 --> 00:07:59.235
make a live region announcement so
that the page change is announced.

129
00:07:59.235 --> 00:08:02.675
And so there's a whole research study,
if you're curious,

130
00:08:02.675 --> 00:08:05.332
you can go read about it
on the Getsby.js site.

131
00:08:05.332 --> 00:08:08.256
That's where I worked
when I did this research.

132
00:08:08.256 --> 00:08:12.141
This has been referenced in almost
all of the JavaScript frameworks.

133
00:08:12.141 --> 00:08:14.307
So I've seen it in Svelte.

134
00:08:14.307 --> 00:08:16.488
I've seen View talk about it.

135
00:08:16.488 --> 00:08:20.747
I mean React, it's funny though,
they don't at me on GitHub, but

136
00:08:20.747 --> 00:08:25.008
I'll see the link pops up, hey,
cool, they're referencing this

137
00:08:25.008 --> 00:08:29.153
in JavaScript libraries, so
you might see it pop up a little bit.

138
00:08:29.153 --> 00:08:33.039
And that's neat because
if people are hungry for

139
00:08:33.039 --> 00:08:36.932
this type of research and
it was so awesome to do.

140
00:08:36.932 --> 00:08:40.802
That I think even aside from
what the findings were for

141
00:08:40.802 --> 00:08:46.049
client-side routing, we could let it
be an example of how you can engage

142
00:08:46.049 --> 00:08:50.970
with user testing with a group like Fable,
cuz that was super cool.

143
00:08:50.970 --> 00:08:54.890
And if you wanna look at a demo,
I do have one in the slides,

144
00:08:54.890 --> 00:08:59.541
a little routing demo of like,
I guess we could look at it real quick.

145
00:08:59.541 --> 00:09:02.815
Let's see what I mean
by client-side routing.

146
00:09:02.815 --> 00:09:06.993
So in this example, I have two routes.

147
00:09:06.993 --> 00:09:14.456
I click them, and my focus, I can move
from the link to the main content area.

148
00:09:14.456 --> 00:09:19.455
And that's basically what I'm saying,
whether you leave the focus

149
00:09:19.455 --> 00:09:24.554
where it was over here on the left,
or do you move it to the new content.

150
00:09:24.554 --> 00:09:29.327
And so this uses a random third
party router that I found,

151
00:09:29.327 --> 00:09:33.018
but there's plenty of routing libraries.

152
00:09:33.018 --> 00:09:35.111
Look for ones that give you hooks so

153
00:09:35.111 --> 00:09:38.298
that you can actually say
where the focus should go.

154
00:09:38.298 --> 00:09:41.599
Cuz some of the challenges with
libraries trying to solve that for

155
00:09:41.599 --> 00:09:44.729
us is that it's really hard to
get it right for every use case.

156
00:09:44.729 --> 00:09:47.766
Like when you send focus,
it can mess with scrolling.

157
00:09:47.766 --> 00:09:50.182
Sometimes it can mess
with browser history.

158
00:09:50.182 --> 00:09:54.544
And so like React Router and Remix,
they've been trying to find a solution for

159
00:09:54.544 --> 00:09:56.803
years and haven't quite landed on one.

160
00:09:56.803 --> 00:10:00.851
I think the pros I promise that we're
hoping that the navigation API in Chrome

161
00:10:00.851 --> 00:10:02.789
will handle it at the browser level.

162
00:10:02.789 --> 00:10:07.789
But in the meantime, look for
routers that will allow you to

163
00:10:07.789 --> 00:10:12.897
move focus to the right place or
just use multi -page sites.

164
00:10:12.897 --> 00:10:16.842
So, real talk real quick.

165
00:10:16.842 --> 00:10:18.328
I did all this research.

166
00:10:18.328 --> 00:10:19.829
I love Javascript.

167
00:10:19.829 --> 00:10:23.839
I'm not a huge fan of client side routing,
I have to be honest with you, and

168
00:10:23.839 --> 00:10:27.085
it's because a lot of the solutions
are kind of half baked and

169
00:10:27.085 --> 00:10:31.223
we end up just marginalizing, that
screen reader experience of being like,

170
00:10:31.223 --> 00:10:32.836
I don't know what happened.

171
00:10:32.836 --> 00:10:35.558
It's like hasn't been quite
important enough to solve and

172
00:10:35.558 --> 00:10:36.815
it's hard to get it right.

173
00:10:36.815 --> 00:10:41.841
We've done all the experimentations
of trying to move focus to the main

174
00:10:41.841 --> 00:10:46.633
content area for everyone that uses
a router and people disable it.

175
00:10:46.633 --> 00:10:48.076
It doesn't work.

176
00:10:48.076 --> 00:10:53.361
So find a solution that works for
you, client-side routing can be cool.

177
00:10:53.361 --> 00:10:58.939
You can actually be more, you can dictate
more of where focus should go because

178
00:10:58.939 --> 00:11:04.113
you're crafting it, but we can't
exactly mimic full page refreshes.

179
00:11:04.113 --> 00:11:08.331
That's when the browser refreshes and
the screen reader really like,

180
00:11:08.331 --> 00:11:11.647
you can configure those to
read the whole page summary.

181
00:11:11.647 --> 00:11:14.451
We just can't replace that
functionality with client-side routing.

182
00:11:14.451 --> 00:11:21.249
So if you're choosing how to architect
your site, at least put in your decision

183
00:11:21.249 --> 00:11:26.536
criteria about whether you
could get away with multi-page.

184
00:11:26.536 --> 00:11:29.194
You can have that page have
a lot of client rendering on it,

185
00:11:29.194 --> 00:11:30.830
but maybe you don't have a router.

186
00:11:30.830 --> 00:11:32.271
That's what the site I work on does.

187
00:11:32.271 --> 00:11:35.486
And it's kind of refreshing,
I'll be honest.

188
00:11:35.486 --> 00:11:36.692
A lot less concerns.

189
00:11:36.692 --> 00:11:40.311
But we can always change that,
we have client side routing.

190
00:11:40.311 --> 00:11:45.577
So these are the techniques
you could look for, look at.

191
00:11:45.577 --> 00:11:47.269
And I think at the bare minimum,

192
00:11:47.269 --> 00:11:51.031
this first one of sending focus to
the main heading and the new content,

193
00:11:51.031 --> 00:11:55.169
it wasn't the one I ended up recommending
at the end of the research story, but

194
00:11:55.169 --> 00:11:58.587
I think it's it's better than
just leaving Focus where it was.

195
00:11:58.587 --> 00:12:02.037
So you have some options.

196
00:12:02.037 --> 00:12:04.010
Any questions on client side routing?

197
00:12:04.010 --> 00:12:04.947
&gt;&gt; I have one.

198
00:12:04.947 --> 00:12:08.496
I was scanning the article that you
linked, that you wrote for Gatsby,

199
00:12:08.496 --> 00:12:11.232
and there's a sentence here
that I'm curious about.

200
00:12:11.232 --> 00:12:14.367
It says, a back button would
help to use browser history, and

201
00:12:14.367 --> 00:12:16.310
it was a limitation of the prototype.

202
00:12:16.310 --> 00:12:17.590
So does that mean that,

203
00:12:17.590 --> 00:12:21.752
because assistive technologies don't
have hooks into the native browser,

204
00:12:21.752 --> 00:12:26.056
routing forward backward buttons,
is that something that you'd lose out on?

205
00:12:26.056 --> 00:12:31.450
&gt;&gt; I think you can hook into browser
DOM APIs like the the navigator API.

206
00:12:31.450 --> 00:12:32.666
I'm pretty sure you can.

207
00:12:32.666 --> 00:12:35.912
&gt;&gt; Is that considered a dark pattern
cuz I use that a lot myself but

208
00:12:35.912 --> 00:12:40.107
is that less accessible, inherently,
if you're using these technologies?

209
00:12:40.107 --> 00:12:41.313
&gt;&gt; Not necessarily.

210
00:12:41.313 --> 00:12:46.020
I think, yeah, as I've read about,
l seeing what the Remix team and

211
00:12:46.020 --> 00:12:48.631
React Router team is the same people.

212
00:12:48.631 --> 00:12:52.068
But seeing what they've tried,
I've seen some comments about it,

213
00:12:52.068 --> 00:12:53.857
some things messing with history.

214
00:12:53.857 --> 00:12:57.970
I think you just have to test solutions,
make sure they still work.

215
00:12:57.970 --> 00:13:00.577
But a lot of those
DOM APIs should work fine.

216
00:13:00.577 --> 00:13:04.155
I think it's more like
where you move focus and

217
00:13:04.155 --> 00:13:08.937
how the page change is announced,
how is that communicated?

218
00:13:08.937 --> 00:13:13.584
Those are the things that
kind of just get skipped.

219
00:13:13.584 --> 00:13:17.191
So I think those are the concerns
that we have to look at and

220
00:13:17.191 --> 00:13:19.907
then try to keep browser history working.

221
00:13:19.907 --> 00:13:24.318
I've seen so many client routed sites that
just don't even hook into browser history.

222
00:13:24.318 --> 00:13:28.837
It's like we gave up that feature, but
I think you could add support back in.

223
00:13:28.837 --> 00:13:30.591
[LAUGH] But you could see this is like,

224
00:13:30.591 --> 00:13:33.319
you end up having to replace
the stuff that you took away.

