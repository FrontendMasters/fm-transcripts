WEBVTT

1
00:00:00.010 --> 00:00:03.285
So let's transition to some ARIA.

2
00:00:03.285 --> 00:00:07.849
So we're kind of layering on top of some
of the basics here to get more advanced.

3
00:00:07.849 --> 00:00:12.554
So with ARIA, the first kind of
concept that I want you to know

4
00:00:12.554 --> 00:00:15.709
about is accessible name computation.

5
00:00:15.709 --> 00:00:21.570
Which we've already talked about a little
bit with images inside of links and

6
00:00:21.570 --> 00:00:24.651
buttons and ARIA labels, form labels.

7
00:00:24.651 --> 00:00:28.629
And so within ARIA,
which is a specification for

8
00:00:28.629 --> 00:00:32.704
a standard set of attributes for
accessibility,

9
00:00:32.704 --> 00:00:37.651
there is this big concept that
has an impact on HTML markup and

10
00:00:37.651 --> 00:00:40.475
it's called accessible naming.

11
00:00:40.475 --> 00:00:44.701
And names apply to form controls,
links and

12
00:00:44.701 --> 00:00:48.136
buttons, section elements even.

13
00:00:48.136 --> 00:00:53.099
So I mentioned earlier that section and
nav landmarks that are repeated a lot.

14
00:00:53.099 --> 00:00:55.794
You can give those names and
then in a screen reader,

15
00:00:55.794 --> 00:00:57.519
it's easier to tell them apart.

16
00:00:57.519 --> 00:01:01.584
Like is that section for
the personal information section or

17
00:01:01.584 --> 00:01:06.457
is that for my communication preferences
like what is that section for?

18
00:01:06.457 --> 00:01:07.442
Or a nav?

19
00:01:07.442 --> 00:01:09.631
Is it our main nav is
that our social links?

20
00:01:09.631 --> 00:01:12.015
Like what nav is that?

21
00:01:12.015 --> 00:01:17.935
Those names with aria-label or
aria-labeledby our super helpful,

22
00:01:17.935 --> 00:01:22.949
tables have names, figures,
field sets and legends and so

23
00:01:22.949 --> 00:01:29.187
that like it's this programmatic way
of exposing the name of something.

24
00:01:29.187 --> 00:01:33.690
But div elements do not, so
if you put an aria-label on a div,

25
00:01:33.690 --> 00:01:38.983
Axe will complain at you because that
role doesn't allow it to be named.

26
00:01:38.983 --> 00:01:43.763
So there's multiple ways to name
something, depending on what its role is,

27
00:01:43.763 --> 00:01:47.365
text content, if you have
a label element with text in it,

28
00:01:47.365 --> 00:01:51.871
that will become its accessible name for
an input when they're paired.

29
00:01:51.871 --> 00:01:55.760
Aria-label, you can put right on
an interactive element or a landmark.

30
00:01:55.760 --> 00:02:01.195
Aria-labelledby, and aria-labelledby is
really great because you can point to

31
00:02:01.195 --> 00:02:06.701
an ID of another element, and it will grab
the text from that, even if it's hidden,

32
00:02:06.701 --> 00:02:10.600
even if it has display none,
which is kind of interesting.

33
00:02:10.600 --> 00:02:14.568
But that means you can reuse
content that is visible and

34
00:02:14.568 --> 00:02:16.905
not risk it getting out of date.

35
00:02:16.905 --> 00:02:21.498
And so
there's a lot of intricacies in here.

36
00:02:21.498 --> 00:02:24.086
So how does this even work?

37
00:02:24.086 --> 00:02:29.217
Because when you have multiple things
on an element, something has to win.

38
00:02:29.217 --> 00:02:31.010
So which one wins?

39
00:02:31.010 --> 00:02:35.557
Well, there is a document, a specification
called the accessible name and

40
00:02:35.557 --> 00:02:40.686
description computation specification,
very geeky, and they standardize this.

41
00:02:40.686 --> 00:02:45.427
So that browsers have at least some
consistency cross-platform and

42
00:02:45.427 --> 00:02:50.504
it's not absolute chaos trying to
understand which thing's gonna win.

43
00:02:50.504 --> 00:02:56.526
So I have an example of an implicit
label wrapping an input.

44
00:02:56.526 --> 00:02:59.932
So zip code is label text.

45
00:02:59.932 --> 00:03:04.564
The input also has an ARIA label
of zip-code which kind of makes me

46
00:03:04.564 --> 00:03:06.849
think it might have been a typo.

47
00:03:06.849 --> 00:03:09.712
They didn't really know what
an aria label was doing.

48
00:03:09.712 --> 00:03:15.477
It also has a placeholder, for
a sample zip code and a title attribute.

49
00:03:15.477 --> 00:03:18.256
So that's a lot of things.

50
00:03:18.256 --> 00:03:23.218
Fortunately, the Chrome dev tools,
we can sort out which thing wins.

51
00:03:23.218 --> 00:03:24.788
So it's not a mystery.

52
00:03:24.788 --> 00:03:29.005
But this process of
the algorithm in the browser and

53
00:03:29.005 --> 00:03:35.978
the accessibility APIs on your computer or
your phone, they follow this standard.

54
00:03:35.978 --> 00:03:38.947
So at least you know it's repeatable.

55
00:03:38.947 --> 00:03:40.126
There's some order here.

56
00:03:40.126 --> 00:03:42.130
[LAUGH] Thank goodness.

57
00:03:42.130 --> 00:03:45.935
[LAUGH] So it,
I've read through the thing.

58
00:03:45.935 --> 00:03:49.758
So it goes like this, for
non-hidden elements that allow naming,

59
00:03:49.758 --> 00:03:54.119
it goes aria-label-by, then aria-label,
then title and placeholder,

60
00:03:54.119 --> 00:03:58.611
cuz they added those in when they saw
enough people were skipping names, like,

61
00:03:58.611 --> 00:04:02.263
there's a title and a placeholder on it,
better than nothing.

62
00:04:02.263 --> 00:04:03.034
So those are in there now.

63
00:04:03.034 --> 00:04:09.073
And then it will go to a label element,
and then certain child controls,

64
00:04:09.073 --> 00:04:13.236
and then text content,
if I read that correctly.

65
00:04:13.236 --> 00:04:16.583
Fair warning,
that was my interpretation of it.

66
00:04:16.583 --> 00:04:20.595
But I mean, how we follow the spec
is less important than like,

67
00:04:20.595 --> 00:04:23.108
what are we hearing in a screen reader?

68
00:04:23.108 --> 00:04:28.735
And like Chrome DevTools, well,
we can rely on that to tell us.

69
00:04:28.735 --> 00:04:31.377
I mostly just wanted you
to know that this exists.

70
00:04:31.377 --> 00:04:34.377
This isn't just like,
pull it out of thin air,

71
00:04:34.377 --> 00:04:38.207
it is pretty interesting that
they've standardized that.

72
00:04:38.207 --> 00:04:42.344
So, yeah, if you're hearing
differences cross platform,

73
00:04:42.344 --> 00:04:45.852
they're more likely related
to things like roles.

74
00:04:45.852 --> 00:04:47.869
There are some definite differences there.

75
00:04:47.869 --> 00:04:50.755
But in terms of which thing wins for
a label,

76
00:04:50.755 --> 00:04:53.882
it should be pretty static,
pretty standard.

77
00:04:53.882 --> 00:04:55.828
So what are accessible descriptions?

78
00:04:55.828 --> 00:04:58.911
We heard about names, and
those are always announced.

79
00:04:58.911 --> 00:05:04.059
Names are always announced in a screen
reader, whereas Descriptions are optional.

80
00:05:04.059 --> 00:05:07.555
They may be read out in
a screen reader after the fact.

81
00:05:07.555 --> 00:05:09.378
There's a slight delay.

82
00:05:09.378 --> 00:05:14.333
But they're configurable, so
users might opt out of descriptions.

83
00:05:14.333 --> 00:05:19.408
So, you don't wanna rely on a description
with things like aria-describedby.

84
00:05:19.408 --> 00:05:24.032
It works just like aria-labeledby,
except it creates a description,

85
00:05:24.032 --> 00:05:26.319
points to an ID on another element.

86
00:05:26.319 --> 00:05:31.098
And title is the one that you have
a little mouse tool tip thing

87
00:05:31.098 --> 00:05:33.824
that pops up only for mouse users.

88
00:05:33.824 --> 00:05:37.386
Title will act as a description
if there's already label,

89
00:05:37.386 --> 00:05:42.246
like if there's already an accessible
name, title will become a description.

90
00:05:42.246 --> 00:05:43.896
But you can't always count on those.

91
00:05:43.896 --> 00:05:46.491
So just know that those also exist.

92
00:05:46.491 --> 00:05:50.368
If you're trying to figure out
which attributes to use and

93
00:05:50.368 --> 00:05:55.114
you wanna make sure you incorporate
some of the helpful information for

94
00:05:55.114 --> 00:05:59.406
users, just know that description may or
may not be announced.

95
00:05:59.406 --> 00:06:02.667
So you don't wanna rely on it for
anything important.

96
00:06:02.667 --> 00:06:06.346
It's like helpful stuff
that's like nice to have, but

97
00:06:06.346 --> 00:06:10.654
not like the critical information,
but with these attributes,

98
00:06:10.654 --> 00:06:15.508
especially ARIA label, and I mean,
ARIA label buys better for this, but

99
00:06:15.508 --> 00:06:18.818
we wanna prefer visible
text whenever possible.

100
00:06:18.818 --> 00:06:21.397
So I think there's
sometimes a tendency for

101
00:06:21.397 --> 00:06:25.245
developers to slap an ARIA-label
on something and call it good.

102
00:06:25.245 --> 00:06:28.832
But that text usually isn't visible.

103
00:06:28.832 --> 00:06:31.607
We don't wanna be repetitive either.

104
00:06:31.607 --> 00:06:36.905
So if the text, like say you've got a
heading or something on the page already,

105
00:06:36.905 --> 00:06:41.255
you can use aria-labelledby to
make the connection to use that as

106
00:06:41.255 --> 00:06:45.948
an accessible name, but
then that visible text won't get outdated.

107
00:06:45.948 --> 00:06:49.198
And you're reusing something
that's already on the page.

108
00:06:49.198 --> 00:06:54.397
And there is a CAG success criterion
related to this called label and name.

109
00:06:54.397 --> 00:06:58.941
It's basically to make sure that your
ARIA labels don't get out of sync with

110
00:06:58.941 --> 00:07:03.627
what's on screen, because it can be
super confusing if something's labeled

111
00:07:03.627 --> 00:07:07.613
programmatically one way, but
visually it says something else.

112
00:07:07.613 --> 00:07:11.031
So that's why we prefer visible text.

113
00:07:11.031 --> 00:07:16.354
And here is the Chrome Devtools
accessibility inspector.

114
00:07:16.354 --> 00:07:19.762
Make this a little bit bigger,
showing a button.

115
00:07:19.762 --> 00:07:21.802
And we've seen this a few times already.

116
00:07:21.802 --> 00:07:27.499
But you can see in the computer
properties when there is a label,

117
00:07:27.499 --> 00:07:29.830
I guess I'm in the image.

118
00:07:29.830 --> 00:07:33.111
I'm focused on the SVG within the button,
but

119
00:07:33.111 --> 00:07:37.406
when you're on an element that
has accessible name, like,

120
00:07:37.406 --> 00:07:43.213
I guess contenders, [LAUGH] It'll show you
kinda which one won by crossing it out,

121
00:07:43.213 --> 00:07:47.368
crossing the ones out that
aren't applying, question?

122
00:07:47.368 --> 00:07:51.842
&gt;&gt; The user has a description turned off,
will they still be alerted of

123
00:07:51.842 --> 00:07:56.487
the presence of ARIA described by,
so they can hear it if they want to?

124
00:07:56.487 --> 00:08:01.341
&gt;&gt; You can hear it if you want to
I believe, there's probably a key

125
00:08:01.341 --> 00:08:05.753
command I think it just depends
on the user's settings.

126
00:08:05.753 --> 00:08:08.069
Yeah.
&gt;&gt; Is the ARIA label necessary when

127
00:08:08.069 --> 00:08:12.234
the same string, for example the zip code,
is also in the label?

128
00:08:12.234 --> 00:08:15.126
Or can I remove the ARIA
stuff when I have a label?

129
00:08:15.126 --> 00:08:16.095
&gt;&gt; You can remove it.

130
00:08:16.095 --> 00:08:19.574
Yeah, so if you already have a label,
use that.

131
00:08:19.574 --> 00:08:24.339
So ARIA label, we don't want it
to be the first thing we choose,

132
00:08:24.339 --> 00:08:28.666
it's a way to just directly
apply an accessible name, but

133
00:08:28.666 --> 00:08:33.699
like how we talked about using HTML first,
if it's a form control,

134
00:08:33.699 --> 00:08:38.146
you definitely wanna try and
use visible label text first.

135
00:08:38.146 --> 00:08:40.502
Or text content, like in a button.

136
00:08:40.502 --> 00:08:45.146
If it has text in it, we should let
that'll just be the accessible name,

137
00:08:45.146 --> 00:08:49.944
text content was further down the list
of choices but when there's nothing

138
00:08:49.944 --> 00:08:54.436
else to out compete, text content it
will win as the accessible name so

139
00:08:54.436 --> 00:08:58.733
like that's why a button that has
text in it, that'll work fine.

140
00:08:58.733 --> 00:09:04.097
So opt for that first And then you can
start considering ARIA if you need to.

