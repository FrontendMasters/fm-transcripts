WEBVTT

1
00:00:00.140 --> 00:00:03.150
We have a component to fix.

2
00:00:03.150 --> 00:00:09.215
This is based on something that I
saw in the real world of a portal

3
00:00:09.215 --> 00:00:16.320
switcher to take you from two different
parts of a giant web application.

4
00:00:16.320 --> 00:00:20.951
It's cute, it's got this little
insurance logo with umbrella,

5
00:00:20.951 --> 00:00:26.587
they look sophisticated, and no one knew
that there was accessibility issues.

6
00:00:26.587 --> 00:00:29.637
This has been on a site for
a while, or a similar thing.

7
00:00:29.637 --> 00:00:33.143
And so for our exercise,
we're gonna look into this widget and

8
00:00:33.143 --> 00:00:35.647
see how many issues we can find.

9
00:00:35.647 --> 00:00:39.867
There is a version, so when you hover
over it, you can get to the other portal.

10
00:00:39.867 --> 00:00:43.326
There's an insurance agent portal and
a broker portal.

11
00:00:43.326 --> 00:00:47.506
Different roles that these
customers have or users have.

12
00:00:47.506 --> 00:00:51.243
So there's a version in this
Next.js repository, and

13
00:00:51.243 --> 00:00:56.556
there's a completed file in there,
or at least a more complete file.

14
00:00:56.556 --> 00:00:59.686
There's also a version
of it on StackBlitz.

15
00:00:59.686 --> 00:01:01.608
If you wanna play with it over there,

16
00:01:01.608 --> 00:01:04.522
it saves you from even having
to clone this repository.

17
00:01:05.742 --> 00:01:11.660
So I am going to go and find it in our
project directory to make some changes.

18
00:01:11.660 --> 00:01:17.672
But let's do our little
investigation here.

19
00:01:17.672 --> 00:01:18.632
We'll do it together.

20
00:01:18.632 --> 00:01:21.546
So, yeah, so we can keep things moving.

21
00:01:21.546 --> 00:01:25.743
But the first thing I'm gonna
do is try to tap into it.

22
00:01:25.743 --> 00:01:27.916
So I can reach this logo.

23
00:01:27.916 --> 00:01:35.116
It's got a focus outline, but
I can't get to the portal switcher.

24
00:01:35.116 --> 00:01:36.026
I skipped right by it.

25
00:01:36.026 --> 00:01:37.616
And why is that?

26
00:01:37.616 --> 00:01:41.616
So I go in here and
I Ctrl click and Inspect.

27
00:01:41.616 --> 00:01:44.169
I'm gonna go look at it in the dev tools.

28
00:01:44.169 --> 00:01:45.839
Zoom in a little bit.

29
00:01:45.839 --> 00:01:50.379
So we've got div, div, div, anchor.

30
00:01:50.379 --> 00:01:52.539
That's what I could focus on.

31
00:01:52.539 --> 00:01:57.922
That anchor element, if I look at
it in the accessibility inspector,

32
00:01:57.922 --> 00:02:00.396
it doesn't have any text in it.

33
00:02:01.697 --> 00:02:06.347
And if I look at why, is missing alt text.

34
00:02:06.347 --> 00:02:07.597
So that's a bummer.

35
00:02:07.597 --> 00:02:09.548
That means that that link won't have any,

36
00:02:09.548 --> 00:02:12.907
I have no idea what that link
does in a screen reader.

37
00:02:12.907 --> 00:02:16.163
And then when it comes to
the portal switcher stuff,

38
00:02:16.163 --> 00:02:18.387
there's just divs on divs on divs.

39
00:02:18.387 --> 00:02:19.904
There's some SVG in here.

40
00:02:21.325 --> 00:02:26.075
If I open up the portal switcher,
it injects another div.

41
00:02:26.075 --> 00:02:31.465
So there's nothing for
me to reach and operate here.

42
00:02:31.465 --> 00:02:34.155
It's using some mouse events to show it.

43
00:02:34.155 --> 00:02:35.965
And the real component was just like this.

44
00:02:35.965 --> 00:02:37.683
It had a few more links in it, but

45
00:02:37.683 --> 00:02:41.098
I couldn't get to it
with the keyboard at all.

46
00:02:41.098 --> 00:02:42.908
So let's fix that.

47
00:02:42.908 --> 00:02:45.348
Let's see how many issues we
can find with this thing.

48
00:02:45.348 --> 00:02:47.418
We're gonna fix this component.

49
00:02:47.418 --> 00:02:51.581
We were looking at what goes
into accessible user interfaces,

50
00:02:51.581 --> 00:02:56.568
and we have one for an insurance agent
portal that has a little drop-down.

51
00:02:56.568 --> 00:02:58.278
We saw some of the issues with it.

52
00:02:59.878 --> 00:03:03.230
Let's go ahead and
look at a more complete version.

53
00:03:03.230 --> 00:03:05.510
I wouldn't say it's perfect,
but it's got a start.

54
00:03:05.510 --> 00:03:09.926
So, in this version that's
embedded right in our page,

55
00:03:09.926 --> 00:03:14.260
I can tab onto that link for
the insurance agent portal.

56
00:03:14.260 --> 00:03:17.710
That was a div with a click
event on it before.

57
00:03:17.710 --> 00:03:22.365
I can also get onto a button for
this Change Portal part of the drop down.

58
00:03:22.365 --> 00:03:23.525
That wasn't there before.

59
00:03:23.525 --> 00:03:26.614
So we'll go to compare
the code in a second.

60
00:03:26.614 --> 00:03:30.421
But I can hit the Enter key
now to toggle this portal, and

61
00:03:30.421 --> 00:03:35.965
it's basically showing and hiding this
neighboring link on the keyboard.

62
00:03:35.965 --> 00:03:39.185
Whereas before I could only
reach it with the mouse.

63
00:03:39.185 --> 00:03:44.062
I couldn't even get to this link,
unless I was a keyboard user.

64
00:03:44.062 --> 00:03:50.556
So this now has the ability to toggle
with the Enter key and the Escape key.

65
00:03:50.556 --> 00:03:53.946
And I skip by that link
when it's not active.

66
00:03:53.946 --> 00:03:55.916
So let's go look at what
that code looks like.

67
00:03:57.196 --> 00:04:00.448
In VS Code,
here's the original portal switcher.

68
00:04:01.649 --> 00:04:03.514
So it's a React component,

69
00:04:03.514 --> 00:04:07.879
it has some state to track whether
it's showing the portal or not.

70
00:04:09.119 --> 00:04:14.169
It's got a div that wraps it, and
a div just inside of that wrapper element

71
00:04:14.169 --> 00:04:18.909
that has onMouseEnter and
onMouseLeave that set that portal state.

72
00:04:18.909 --> 00:04:22.209
And that was the only way to
get into that component before,

73
00:04:22.209 --> 00:04:27.023
which is why keyboard users, it's like
too bad, so sad, can't get into it.

74
00:04:27.023 --> 00:04:31.396
So I had to add an affordance is what we
call that button that I made that you

75
00:04:31.396 --> 00:04:33.143
could toggle.

76
00:04:33.143 --> 00:04:38.868
We'll look at what that looks like when
we go to the more complete component.

77
00:04:38.868 --> 00:04:40.928
So this also had a link.

78
00:04:40.928 --> 00:04:45.813
Wrapping the logo, it was missing
an alt attribute probably with,

79
00:04:45.813 --> 00:04:48.998
insurance company, the name of the thing.

80
00:04:48.998 --> 00:04:50.718
What is that logo?

81
00:04:50.718 --> 00:04:52.648
Whose company is that?

82
00:04:52.648 --> 00:04:56.599
That'd be helpful especially
because it's inside of a link so

83
00:04:56.599 --> 00:05:00.110
this text will become
the accessible name of that link.

84
00:05:00.110 --> 00:05:06.163
And as far as the other widgets on here,
there's a div with an onClick, it's like,

85
00:05:06.163 --> 00:05:12.240
well, this is kind of suspect, this div
onClick equals window.location.href.

86
00:05:12.240 --> 00:05:16.689
It's actually pretty easy
to delete all that and

87
00:05:16.689 --> 00:05:20.497
say a href instead, close out that link.

88
00:05:22.838 --> 00:05:26.542
It simplifies, I can actually make
it accessible by removing code and

89
00:05:26.542 --> 00:05:29.448
just swapping out that div element for
an anchor.

90
00:05:29.448 --> 00:05:31.558
And that's pretty easy.

91
00:05:31.558 --> 00:05:35.058
It's gonna have a default
focus style in this example.

92
00:05:35.058 --> 00:05:39.808
You have to watch out for
CSS that suppresses focus outlines.

93
00:05:39.808 --> 00:05:42.204
The real world version of this.

94
00:05:42.204 --> 00:05:48.062
There's a style sheet on this page
that just turns off focus outlines for

95
00:05:48.062 --> 00:05:53.644
everything and so I had to add a focus
style back in so be aware of that.

96
00:05:53.644 --> 00:05:56.987
This Change Portal text that's just kind

97
00:05:56.987 --> 00:06:01.006
of hanging out here in a div
by itself with an icon.

98
00:06:02.126 --> 00:06:04.856
And then there's another div
with an onClick down here.

99
00:06:04.856 --> 00:06:09.281
This one is another instance
that could be just a plain href

100
00:06:09.281 --> 00:06:12.366
instead of a div with a click event on it.

101
00:06:12.366 --> 00:06:14.256
So we could change that.

102
00:06:14.256 --> 00:06:16.256
So those two are improved.

103
00:06:17.296 --> 00:06:22.077
There's probably some more semantic things
that we could do in addition to we need

104
00:06:22.077 --> 00:06:24.437
something to tab onto.

105
00:06:24.437 --> 00:06:28.167
I don't wanna use the links that are there
because those are gonna navigate to pages.

106
00:06:28.167 --> 00:06:32.577
I need something extra that
I can tab onto and toggle.

107
00:06:32.577 --> 00:06:38.797
So an approach for
this is to wrap something in a button.

108
00:06:38.797 --> 00:06:39.564
That chevron,

109
00:06:39.564 --> 00:06:43.520
that was the thing that visually you
could say, there's a drop down here.

110
00:06:43.520 --> 00:06:47.309
So that's a pretty good candidate for
wrapping in a button or something.

111
00:06:47.309 --> 00:06:53.956
So this iteration of the solution
has that Change Portal text and

112
00:06:53.956 --> 00:06:57.415
the icon are wrapped in a button.

113
00:06:57.415 --> 00:07:01.328
And so
that button has an aria-label on it.

114
00:07:01.328 --> 00:07:05.660
It's maybe not super necessary
because there is text on here that

115
00:07:05.660 --> 00:07:07.415
says Change Portal.

116
00:07:07.415 --> 00:07:11.205
Sorry, my auto-complete.

117
00:07:11.205 --> 00:07:14.455
So Change Portal is probably find text for
this button.

118
00:07:14.455 --> 00:07:20.515
If the button was just around the icon,
then the RA label could be nice,

119
00:07:20.515 --> 00:07:24.959
if it was instead of wrapping
the text just the icon,

120
00:07:24.959 --> 00:07:29.904
then toggle portal or
something could be helpful.

121
00:07:29.904 --> 00:07:33.574
But there's text on screen,
we might as well use that.

122
00:07:33.574 --> 00:07:38.994
So here's where we can make this more
accessible, is now we have this onKeyDown.

123
00:07:38.994 --> 00:07:40.786
That's the button's reachable, and

124
00:07:40.786 --> 00:07:43.235
now we have an event that
we're paying attention to.

125
00:07:43.235 --> 00:07:47.786
I could potentially use a click event
here, but I don't wanna do it for

126
00:07:47.786 --> 00:07:48.721
every click.

127
00:07:48.721 --> 00:07:52.435
I just want it to work
on only certain keys.

128
00:07:52.435 --> 00:07:54.235
So let's look at this toggle handler.

129
00:07:55.235 --> 00:07:56.875
It's an event handler.

130
00:07:58.155 --> 00:08:03.323
And if I pass in the event
object as a parameter argument,

131
00:08:03.323 --> 00:08:06.996
I can inspect what key the user pressed.

132
00:08:06.996 --> 00:08:10.861
So event, I can use the code property
to check which key was it, and

133
00:08:10.861 --> 00:08:14.136
there's strings for
all the different keys.

134
00:08:14.136 --> 00:08:18.116
Enter, space, arrow right, arrow left,
escape, all of those things.

135
00:08:19.266 --> 00:08:25.905
And I can do things like prevent
default if that button is in a form or

136
00:08:25.905 --> 00:08:30.541
it's scrolling the page
when I hit space bar.

137
00:08:30.541 --> 00:08:34.584
You can kind of prevent some of that
stuff with event.preventdefault and

138
00:08:34.584 --> 00:08:36.288
then I can change the state.

139
00:08:36.288 --> 00:08:40.483
So that button when I click it,
if I'm pressing the right keys,

140
00:08:40.483 --> 00:08:42.748
I can update that state variable.

141
00:08:42.748 --> 00:08:45.958
And then also,
to make it a bit more ergonomic,

142
00:08:45.958 --> 00:08:51.073
I added an onKeyDown on the wrapper
element where the mouse events were.

143
00:08:51.073 --> 00:08:55.029
So anytime you're within this widget,
if you hit the Escape key,

144
00:08:55.029 --> 00:08:57.926
whether you're on
the original toggle button or

145
00:08:57.926 --> 00:09:02.383
you're on that broker portal
link that's the one that shows.

146
00:09:02.383 --> 00:09:05.563
Anywhere within this widget,
if I hit Escape, I can close it.

147
00:09:05.563 --> 00:09:12.843
So I kind of expanded my event
area to be the wrapper element.

148
00:09:12.843 --> 00:09:14.333
And that's kind of an ergonomic thing.

149
00:09:14.333 --> 00:09:19.233
So that if I'm anywhere within this
component, the Escape key will apply.

150
00:09:19.233 --> 00:09:23.999
So for that, I match on event.code is
equal Escape, and if the portal is

151
00:09:23.999 --> 00:09:29.468
showing that state variable,
then I'm gonna set that state to false.

152
00:09:29.468 --> 00:09:30.708
And I can handle focus.

153
00:09:30.708 --> 00:09:36.248
So if I am on that child blink,
I'll show you what I mean.

154
00:09:36.248 --> 00:09:41.352
If I open the portal and I'm down here
on broker portal and I hit Escape,

155
00:09:41.352 --> 00:09:45.620
I wanna send focus back to that
button that will be visible.

156
00:09:45.620 --> 00:09:48.670
Cuz otherwise,
my focus will just kinda go, poof.

157
00:09:48.670 --> 00:09:49.360
It'll get lost.

158
00:09:49.360 --> 00:09:54.630
Cuz that element is not rendered when
the state variable doesn't match in React.

159
00:09:54.630 --> 00:09:56.570
Let's see what that looks like.

160
00:09:56.570 --> 00:09:57.490
So I'm gonna inspect.

161
00:09:59.360 --> 00:10:03.558
So we don't actually
see the broker portal,

162
00:10:03.558 --> 00:10:07.874
like React and
JSX are injecting it on demand.

163
00:10:07.874 --> 00:10:11.717
When that state variable matches,
it's not just this version anyway,

164
00:10:11.717 --> 00:10:15.560
is not just showing and hiding it
with CSS, it's actually inserting and

165
00:10:15.560 --> 00:10:17.376
removing it from the DOM.

166
00:10:17.376 --> 00:10:21.438
So if we remove DOM that we're focused on,
whoops, now our focus,

167
00:10:21.438 --> 00:10:23.380
who knows where it's gonna go.

168
00:10:23.380 --> 00:10:25.528
In Chrome, it'll go nearby.

169
00:10:25.528 --> 00:10:30.248
In Firefox, it'll probably kick you all
the way back up to the top of the page.

170
00:10:30.248 --> 00:10:34.744
So we're doing some focus management
by sending focus back somewhere

171
00:10:34.744 --> 00:10:38.548
that's reliable when it deletes that node.

172
00:10:38.548 --> 00:10:39.958
So we could see it go in and out.

173
00:10:40.978 --> 00:10:46.211
So this code, toggleButton,
that is using the useRef

174
00:10:46.211 --> 00:10:50.742
API in React,
which is your new best friend.

175
00:10:50.742 --> 00:10:54.721
If you didn't already know,
it's amazing for accessibility,

176
00:10:54.721 --> 00:10:57.622
it gives you the ability to put refs.

177
00:10:57.622 --> 00:10:59.722
So here's this ref toggleButton.

178
00:10:59.722 --> 00:11:00.892
So I have a reference.

179
00:11:00.892 --> 00:11:06.893
And I can use that as a kind of
a doorway to the underlying DOM APIs.

180
00:11:06.893 --> 00:11:11.936
So React uses SyntheticEvent, which is
like, if you ever worked with jQuery and

181
00:11:11.936 --> 00:11:16.310
struggled to understand whether you
had a jQuery object or a DOM node,

182
00:11:16.310 --> 00:11:21.230
SyntheticEvent is kind of similar in
that it's like wrapping your elements.

183
00:11:21.230 --> 00:11:25.300
And you aren't on the raw DOM
node unless you're specific.

184
00:11:25.300 --> 00:11:32.190
So the ref API, you can get access to
that raw DOM node with ref.current.

185
00:11:32.190 --> 00:11:35.470
And you can have collections of refs,
they could be an arrays.

186
00:11:35.470 --> 00:11:37.190
Ref is really powerful.

187
00:11:37.190 --> 00:11:39.040
You can use it for other things too.

188
00:11:39.040 --> 00:11:41.215
It's a great utility.

189
00:11:41.215 --> 00:11:44.645
But when I have a ref, I can send focus.

190
00:11:44.645 --> 00:11:47.455
So this focus is actually
a DOM API method.

191
00:11:48.695 --> 00:11:51.865
And if that element's present,
I can send focus to it.

192
00:11:51.865 --> 00:11:56.704
So this is kind of a pattern,
at least in React, of how you manage

193
00:11:56.704 --> 00:12:01.739
focus with React elements,
kind of in combination with DOM APIs.

194
00:12:03.384 --> 00:12:10.656
So yeah, there's kind of some
fundamentals in here that are helpful,

195
00:12:10.656 --> 00:12:15.880
like alt text,
links that actually work as links.

196
00:12:15.880 --> 00:12:18.695
Buttons that we make
sure have labels in them.

197
00:12:20.327 --> 00:12:22.527
And then moving focus around.

198
00:12:22.527 --> 00:12:27.187
I think one area that this could go even
further is looking at the ARIA on it.

199
00:12:27.187 --> 00:12:30.104
It's pretty basic right now,
just showing and hiding an element,

200
00:12:30.104 --> 00:12:32.067
kind of sending focus around.

201
00:12:32.067 --> 00:12:37.084
We could potentially look at
whether it needs a dialogue roll or

202
00:12:37.084 --> 00:12:39.427
some more ARIA on here.

203
00:12:39.427 --> 00:12:41.191
We're gonna tackle ARIA
in the next section.

204
00:12:41.191 --> 00:12:45.031
So this was kind of the start of
some keyboard focus management.

205
00:12:46.131 --> 00:12:50.923
But really, we're kind of looking at every
accessibility issue we can find within

206
00:12:50.923 --> 00:12:52.611
a component.

207
00:12:52.611 --> 00:12:56.551
That takes a few passes with
tools like the axe tooling.

208
00:12:58.001 --> 00:13:01.043
I really like Storybook for
working with stuff like this,

209
00:13:01.043 --> 00:13:04.578
cuz you can isolate a component and
test it on its own.

210
00:13:04.578 --> 00:13:08.340
You also need to test the component
integrated with other components,

211
00:13:08.340 --> 00:13:10.858
especially if focus is going between.

212
00:13:10.858 --> 00:13:13.348
So we'll look at that and
automated tests a little bit later.

213
00:13:14.388 --> 00:13:16.388
Any questions so far?

214
00:13:16.388 --> 00:13:20.727
&gt;&gt; Just to make sure for the ARIA values,
do they always have to be strings because

215
00:13:20.727 --> 00:13:24.616
I see that aria-expanded is string true or
string false?

216
00:13:24.616 --> 00:13:25.546
&gt;&gt; Great question.

217
00:13:25.546 --> 00:13:30.836
So, what gets rendered in
the browser is usually string.

218
00:13:31.996 --> 00:13:35.949
There's also Boolean attributes like inert
where it's basically is the attribute

219
00:13:35.949 --> 00:13:36.736
present or not.

220
00:13:36.736 --> 00:13:38.076
The value doesn't really matter.

221
00:13:39.526 --> 00:13:44.567
In React and TypeScript, in some
instances, it will complain at you if

222
00:13:44.567 --> 00:13:50.358
you have a string that should be,
I don't know, a number or a Boolean.

223
00:13:50.358 --> 00:13:56.678
There's some aria-value things for sliders
that kind of caught me by surprise.

224
00:13:56.678 --> 00:14:00.128
When you use TypeScript,
it will tell you what it expects.

225
00:14:00.128 --> 00:14:02.723
Otherwise, strings are usually fine.

226
00:14:02.723 --> 00:14:05.993
React lately has been
complaining about tabindex.

227
00:14:05.993 --> 00:14:07.453
It really wants that to be a number.

228
00:14:08.513 --> 00:14:11.223
And if you use TypeScript,
you'll know about that.

229
00:14:11.223 --> 00:14:14.673
If you use JSX in React, strings are fine.

230
00:14:14.673 --> 00:14:15.313
It's very weird.

231
00:14:16.883 --> 00:14:18.793
So I always thought strings were fine.

232
00:14:18.793 --> 00:14:22.346
I have had to convert some of
my attributes to be numbers and

233
00:14:22.346 --> 00:14:26.564
Booleans lately, because I`m using
a lot more TypeScript lately.

234
00:14:26.564 --> 00:14:31.537
And it`s actually really awesome for
accessibility,

235
00:14:31.537 --> 00:14:35.034
because a lot of the types are built in.

236
00:14:35.034 --> 00:14:39.792
So it can catch some accessibility issues,
if you use an HTML element,

237
00:14:39.792 --> 00:14:45.986
use an attribute that's not allowed on
that element, TypeScript can tell you.

238
00:14:45.986 --> 00:14:50.078
It can also be a hindrance sometimes,
like we saw on the web app workshop,

239
00:14:50.078 --> 00:14:53.114
inert is not really working
well in React right now, so

240
00:14:53.114 --> 00:14:55.036
I had to do a workaround with refs.

241
00:14:56.196 --> 00:14:58.652
It's kind of a pain right now, but

242
00:14:58.652 --> 00:15:04.247
on the flip side of that TypeScript can
be pretty helpful in a lot of cases.

243
00:15:04.247 --> 00:15:08.817
I didn't love it for a long time,
now I'm into it cuz it can be helpful.

244
00:15:08.817 --> 00:15:14.513
So this whole string number thing,
you just satisfy the TypeScript compiler

245
00:15:14.513 --> 00:15:20.224
a lot of times and make sure that what's
getting rendered is what you expect.

246
00:15:20.224 --> 00:15:23.736
Is it giving the right
state in the browser and

247
00:15:23.736 --> 00:15:27.804
assistive technology which
we can usually look at in

248
00:15:27.804 --> 00:15:32.995
the Chrome Dev Tools Accessibility
inspector, it'll show you.

249
00:15:32.995 --> 00:15:37.067
Cool, any other questions
before we move on?

250
00:15:37.067 --> 00:15:40.605
We're gonna come back to this example and
write some automated tests for

251
00:15:40.605 --> 00:15:41.535
it a little later.

