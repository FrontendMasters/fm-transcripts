WEBVTT

1
00:00:00.236 --> 00:00:05.221
So let's dig into some tactical
guidance on what goes into

2
00:00:05.221 --> 00:00:07.977
an accessible user interface.

3
00:00:07.977 --> 00:00:12.475
I have to start by saying that the
foundations of accessibility always apply.

4
00:00:12.475 --> 00:00:15.926
So the basics are important.

5
00:00:15.926 --> 00:00:17.675
As accessibility champions,

6
00:00:17.675 --> 00:00:21.910
it might be a little bit tiresome to have
to beat that drum on the basics, but

7
00:00:21.910 --> 00:00:26.365
those are the things that are getting
missed over, and over, and over again.

8
00:00:26.365 --> 00:00:30.611
So we have to learn the basics of
accessibility and share those basics,

9
00:00:30.611 --> 00:00:32.662
because if we can get those right,

10
00:00:32.662 --> 00:00:36.302
we can really cut down the number
of issues that pop up later.

11
00:00:36.302 --> 00:00:37.605
I mean, those really do add up.

12
00:00:37.605 --> 00:00:41.595
I heard someone here in class
just talking about having 1,100

13
00:00:41.595 --> 00:00:44.384
issues that they had to
solve in three months.

14
00:00:44.384 --> 00:00:47.639
So if you could anticipate some of those,

15
00:00:47.639 --> 00:00:51.737
you're gonna have a way
smaller backlog of things.

16
00:00:51.737 --> 00:00:53.485
So when it comes to our UIs,

17
00:00:53.485 --> 00:00:57.594
it doesn't really matter how
they're assembled to end users.

18
00:00:57.594 --> 00:01:03.162
If you're using the newest, latest,
greatest JavaScript framework or

19
00:01:03.162 --> 00:01:06.679
you're on more of a CMS or
a Vanilla web stack.

20
00:01:06.679 --> 00:01:10.686
I mean, there's just so
many different types of stacks out there.

21
00:01:10.686 --> 00:01:12.215
And really at the end of the day,

22
00:01:12.215 --> 00:01:14.717
it's about what's getting
rendered in a browser.

23
00:01:14.717 --> 00:01:16.569
What is the user experiencing?

24
00:01:16.569 --> 00:01:20.654
We always have to keep kind
of our eyes on the prize,

25
00:01:20.654 --> 00:01:23.509
that's what we really care about.

26
00:01:23.509 --> 00:01:28.577
And so we can start by
designing with access in mind.

27
00:01:28.577 --> 00:01:31.009
Sometimes this comes before our role even.

28
00:01:31.009 --> 00:01:35.629
So just know that as developers,
as we discussed, you can only fix so

29
00:01:35.629 --> 00:01:40.569
much, visual contrast, font size,
icons that are easy to understand,

30
00:01:40.569 --> 00:01:43.292
intuitive, interactive interfaces.

31
00:01:43.292 --> 00:01:46.425
Don't make me think about
what is interactive.

32
00:01:46.425 --> 00:01:48.246
Is that a link or not?

33
00:01:48.246 --> 00:01:49.636
Can I click on that?

34
00:01:49.636 --> 00:01:53.368
I mean, chances are if one person
is confused about an interface,

35
00:01:53.368 --> 00:01:56.044
a lot of people are probably
confused about it.

36
00:01:56.044 --> 00:02:00.676
And nothing is more eye-opening than
watching users struggle to use the thing

37
00:02:00.676 --> 00:02:02.720
that you've put out in the world.

38
00:02:02.720 --> 00:02:07.853
So user testing sometimes, if you need to
get design stakeholders to pay attention,

39
00:02:07.853 --> 00:02:10.778
have them watch someone
with a disability try and

40
00:02:10.778 --> 00:02:13.150
navigate the thing they've created.

41
00:02:13.150 --> 00:02:14.774
Cuz it could be really beautiful.

42
00:02:14.774 --> 00:02:20.989
It could really solve some customer needs,
but it needs some accessibility attention.

43
00:02:20.989 --> 00:02:24.402
In development, we wanna watch out for

44
00:02:24.402 --> 00:02:28.649
using valid semantic markup with HTML and
ARIA.

45
00:02:28.649 --> 00:02:34.532
So that's kind of the technical
foundation of any web user interface,

46
00:02:34.532 --> 00:02:38.552
is using HTML elements
that are available to us,

47
00:02:38.552 --> 00:02:42.192
exhaust that list as
thoroughly as you can.

48
00:02:42.192 --> 00:02:46.974
Because there are a lot of features on
the web that we don't have to rewrite if

49
00:02:46.974 --> 00:02:48.631
we can use what's there.

50
00:02:48.631 --> 00:02:55.827
HTML is one pillar of the web platform,
with HTML, CSS, and JavaScript.

51
00:02:55.827 --> 00:03:00.562
JavaScript and CSS will affect your HTML,
so they all go together.

52
00:03:00.562 --> 00:03:03.450
It's like one happy family.

53
00:03:03.450 --> 00:03:08.198
But we have differing amounts of all of
these technologies in our applications.

54
00:03:08.198 --> 00:03:13.726
But HTML is always that thing that if
you're putting out a web user interface,

55
00:03:13.726 --> 00:03:16.758
it's going to have HTML in it, probably.

56
00:03:16.758 --> 00:03:19.307
So we wanna learn those basics and

57
00:03:19.307 --> 00:03:23.778
make sure we're using HTML
elements that are available.

58
00:03:23.778 --> 00:03:27.895
Now, ARIA, we'll talk about
more in the next section, but

59
00:03:27.895 --> 00:03:31.545
that is
the Accessible Rich Internet Applications.

60
00:03:31.545 --> 00:03:35.407
That is a standard set of roles,
states and properties,

61
00:03:35.407 --> 00:03:38.874
their attributes that you
can bolt on to your HTML.

62
00:03:38.874 --> 00:03:43.362
It's more of an advanced tool, as you'll
find out a little bit later, so I wanna

63
00:03:43.362 --> 00:03:47.654
caution you when you get started because
that is easy to mess up and get wrong.

64
00:03:47.654 --> 00:03:50.725
I've done it, we've all done it.

65
00:03:50.725 --> 00:03:56.456
And there may be some framework-specific
quirks in how you construct your UIs,

66
00:03:56.456 --> 00:03:59.328
like if you're using React or Angular.

67
00:03:59.328 --> 00:04:04.719
How you compile components together, there
might be some extra markup that comes

68
00:04:04.719 --> 00:04:10.202
along with those that you wanna make sure
you're testing in the browser at the end.

69
00:04:10.202 --> 00:04:14.741
It's like, I didn't realize that component
was bringing in all this extra cruft.

70
00:04:14.741 --> 00:04:19.672
There's some non-standard attributes
that's putting into my markup,

71
00:04:19.672 --> 00:04:23.910
or it's messing with my keyboard
accessibility or something.

72
00:04:23.910 --> 00:04:28.263
We wanna make sure we're looking at
it kind of in that full rendered

73
00:04:28.263 --> 00:04:32.693
environment to see if CSS and
JavaScript and the markup on the page,

74
00:04:32.693 --> 00:04:36.212
are those playing nicely together and
how we expect.

75
00:04:36.212 --> 00:04:39.543
And we'll go into that
a lot more in accessibility

76
00:04:39.543 --> 00:04:42.569
in JavaScript applications a little later.

77
00:04:42.569 --> 00:04:46.327
Starting, though,
with some semantic structure,

78
00:04:46.327 --> 00:04:49.423
just to kinda tip you
off on elements to use.

79
00:04:49.423 --> 00:04:53.135
H1 through H6 headings
are super foundational.

80
00:04:53.135 --> 00:04:57.295
They're very helpful in a screen reader,
because they give you an overall outline.

81
00:04:57.295 --> 00:05:02.042
So we wanna pick heading levels
that create an overall hierarchy of

82
00:05:02.042 --> 00:05:05.359
our content, and
you can style them with CSS.

83
00:05:05.359 --> 00:05:09.439
So you wanna pick the right
heading level for the content and

84
00:05:09.439 --> 00:05:12.702
kinda how it fits into the overall page,
not for

85
00:05:12.702 --> 00:05:16.712
the way it looks,
cuz we can always style things with CSS.

86
00:05:16.712 --> 00:05:19.571
And I did find that there
are some approaches,

87
00:05:19.571 --> 00:05:23.015
at least in React,
of being able to use context to try and

88
00:05:23.015 --> 00:05:26.266
programmatically choose
the right heading level.

89
00:05:26.266 --> 00:05:30.910
So you can do things with components
where you could pass a heading

90
00:05:30.910 --> 00:05:32.859
level in as a prop, maybe.

91
00:05:32.859 --> 00:05:37.682
You could look up some techniques on
how to do it more programmatically

92
00:05:37.682 --> 00:05:38.837
using context.

93
00:05:38.837 --> 00:05:42.168
Sometimes we in pursuit of
making something fancy,

94
00:05:42.168 --> 00:05:44.372
it might get overly complicated.

95
00:05:44.372 --> 00:05:48.596
So those are some trade-offs
that you might have to consider.

96
00:05:48.596 --> 00:05:52.092
But we still wanna think about
that overall end user experience.

97
00:05:52.092 --> 00:05:53.902
What's that heading level?

98
00:05:53.902 --> 00:05:56.466
What are your heading levels,
do they all work well together?

99
00:05:56.466 --> 00:05:59.736
And we'll look at some
tools to test that later.

100
00:05:59.736 --> 00:06:04.310
We also wanna use landmark element
to structure our pages, like main,

101
00:06:04.310 --> 00:06:05.998
nav, footer, section.

102
00:06:05.998 --> 00:06:09.408
And section and nav,
since we tend to have more than one,

103
00:06:09.408 --> 00:06:13.120
we can label those using aria-label and
aria-labelledby.

104
00:06:13.120 --> 00:06:16.529
Use lists, ul, ol,
those can group items and

105
00:06:16.529 --> 00:06:20.645
they will be automatically
counted in screen readers.

106
00:06:20.645 --> 00:06:24.701
And these are all really helpful
semantic things to organize and

107
00:06:24.701 --> 00:06:29.449
group your content together for
people who rely on assistive technology.

108
00:06:29.449 --> 00:06:32.950
Cuz if you can't see
the overall structure,

109
00:06:32.950 --> 00:06:37.850
you can follow along kinda how
its marked up if it's done well.

110
00:06:37.850 --> 00:06:42.434
For interactivity with keyboards and
screen readers, this one's super critical.

111
00:06:42.434 --> 00:06:46.694
If a mouse user can do something,
a keyboard user needs to be able to do

112
00:06:46.694 --> 00:06:51.407
the same thing, and screen readers
piggyback on the keyboard experience.

113
00:06:51.407 --> 00:06:56.035
So an example would be of using something,
an HTML element,

114
00:06:56.035 --> 00:06:59.317
as it should be used
is the button element.

115
00:06:59.317 --> 00:07:01.908
The button element is focusable.

116
00:07:01.908 --> 00:07:06.540
It has a button roll by default, it's
just built into the thing, it's baked in.

117
00:07:06.540 --> 00:07:10.951
If you put a click event on a button,
you can still fire it with keyboards.

118
00:07:10.951 --> 00:07:13.179
Enter key will fire that click event.

119
00:07:13.179 --> 00:07:16.563
Whereas a div, sure,
I can put a roll of button on it,

120
00:07:16.563 --> 00:07:18.381
I could put a tab index on it.

121
00:07:18.381 --> 00:07:20.904
It is not going to respond
to that click event.

122
00:07:20.904 --> 00:07:23.081
I have to put a key event on it too.

123
00:07:23.081 --> 00:07:27.114
So the button is just, it's less work.

124
00:07:27.114 --> 00:07:28.682
Everyone loves doing less work, right?

125
00:07:28.682 --> 00:07:30.459
[LAUGH] Question?

126
00:07:30.459 --> 00:07:35.140
&gt;&gt; Is it better practice to use
headings within section elements to

127
00:07:35.140 --> 00:07:37.401
define the content, or ARIA?

128
00:07:37.401 --> 00:07:40.690
&gt;&gt; It would be best to use headings first.

129
00:07:40.690 --> 00:07:44.506
You always use the default HTML first,
exhaust all of that, and

130
00:07:44.506 --> 00:07:47.412
we'll go through the rules
of ARIA a little bit.

131
00:07:47.412 --> 00:07:54.038
See, we always wanna try to use the HTML
first, partly for support reasons.

132
00:07:54.038 --> 00:07:58.108
Yeah, it's just kinda one of the rules
of accessibility in the web is use

133
00:07:58.108 --> 00:07:58.923
those first.

