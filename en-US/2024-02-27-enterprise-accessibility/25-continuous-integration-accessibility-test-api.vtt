WEBVTT

1
00:00:00.054 --> 00:00:02.495
CI, continuous integration.

2
00:00:02.495 --> 00:00:06.759
So this is a DevOps software
development practice.

3
00:00:06.759 --> 00:00:10.167
I mean, we're probably all familiar with
it, I just wanted to define it in case.

4
00:00:10.167 --> 00:00:14.640
So it where developers merge code
together into a central place,

5
00:00:14.640 --> 00:00:18.152
we run builds automatically and
the tests are run.

6
00:00:18.152 --> 00:00:22.784
So these tests could be all
kinds of things, linters,

7
00:00:22.784 --> 00:00:27.930
TypeScript, type checks,
automated tests for features.

8
00:00:27.930 --> 00:00:31.433
We wanna make sure we aren't
breaking other people's stuff.

9
00:00:31.433 --> 00:00:33.840
And this has become very commonplace.

10
00:00:33.840 --> 00:00:39.263
We don't have to use third party services
anymore, even Circle CI or Travis.

11
00:00:39.263 --> 00:00:43.530
I think it's happening directly on GitHub,
GitLab, Azure DevOps,

12
00:00:43.530 --> 00:00:45.715
wherever your code repository is.

13
00:00:45.715 --> 00:00:51.483
CI is just part of how we work most of
the time now, it's really easy to set up.

14
00:00:51.483 --> 00:00:55.483
So with hosted CI,
at least there's on premise stuff, and

15
00:00:55.483 --> 00:00:57.411
this goes deep into DevOps.

16
00:00:57.411 --> 00:01:02.110
But in a nutshell,
we write code and tests.

17
00:01:02.110 --> 00:01:07.353
There's an integration in our
source repository to run some

18
00:01:07.353 --> 00:01:12.607
sort of checks, GitHub actions or
however you hook this up.

19
00:01:12.607 --> 00:01:17.434
We enable CI builds for the project and
then when we push our code, bam,

20
00:01:17.434 --> 00:01:19.535
it's gonna run all the tests.

21
00:01:19.535 --> 00:01:24.453
You can run it when you submit a pull
request, you can run it when you're doing

22
00:01:24.453 --> 00:01:28.100
a build pipeline, so
we do all of those things in my work.

23
00:01:28.100 --> 00:01:34.154
And some platforms are easier than others,
like Azure DevOps, not my fave.

24
00:01:34.154 --> 00:01:39.597
Jenkins, I tried setting up Jenkins a few
times, that one was also a bit difficult.

25
00:01:39.597 --> 00:01:44.514
CircleCI and Travis were just so
much easier, I think they came later.

26
00:01:44.514 --> 00:01:46.285
But some tools are easier.

27
00:01:46.285 --> 00:01:49.447
I really miss GitHub, I have to be honest.

28
00:01:49.447 --> 00:01:51.598
[LAUGH] It's amazing.

29
00:01:51.598 --> 00:01:57.240
The pull request reviews are awesome,
Azure DevOps could use some love.

30
00:01:57.240 --> 00:02:01.743
So I do have a screenshot of a pull
request with some checks on it, and

31
00:02:01.743 --> 00:02:04.595
every repo is gonna have different tools.

32
00:02:04.595 --> 00:02:06.760
These ones have some
GitHub Actions looks like.

33
00:02:06.760 --> 00:02:10.711
This is Microsoft's Fluent UI
component library.

34
00:02:10.711 --> 00:02:15.256
But for contributing to things,
it is so nice to see checks,

35
00:02:15.256 --> 00:02:20.447
it just feels kind of comfy when you
can satisfy some of those checks.

36
00:02:20.447 --> 00:02:26.621
It's caught me from adding some pain that
my co-workers would have to deal with.

37
00:02:26.621 --> 00:02:29.209
I work in an agency, so we're like,

38
00:02:29.209 --> 00:02:34.060
our merge strategy is the most
complex I've ever seen, it's wild.

39
00:02:34.060 --> 00:02:36.341
So we have to really be on guard, so

40
00:02:36.341 --> 00:02:41.238
that we're not breaking things because
of how our merge strategy works.

41
00:02:41.238 --> 00:02:45.335
So CI checks are everything
in that environment.

42
00:02:45.335 --> 00:02:51.049
So CI can really help if you have
some accessibility testing built-in,

43
00:02:51.049 --> 00:02:53.764
you can fail a build if you want, or

44
00:02:53.764 --> 00:02:58.648
at least have your coworkers
know that something has broken.

45
00:02:58.648 --> 00:03:03.601
So we can kind of spread that testing and
awareness around when our team members

46
00:03:03.601 --> 00:03:06.839
are involved and
you can track who broke the build.

47
00:03:06.839 --> 00:03:10.824
I've seen some teams will have it
up on a monitor in their office,

48
00:03:10.824 --> 00:03:13.225
they kind of make a team thing out of it.

49
00:03:13.225 --> 00:03:17.036
I was lucky enough to have been in
Mountain View in the angular office when I

50
00:03:17.036 --> 00:03:18.694
broke the build once, [LAUGH] and

51
00:03:18.694 --> 00:03:21.847
they had it on their monitor,
it was kind of a badge of honor.

52
00:03:21.847 --> 00:03:25.600
[LAUGH] But it is helpful for
accountability,

53
00:03:25.600 --> 00:03:30.239
not only can you get blame on things,
but in the moment,

54
00:03:30.239 --> 00:03:35.098
you can keep things from breaking,
which is really nice.

55
00:03:35.098 --> 00:03:38.674
So should accessibility
issues fail a build or not?

56
00:03:38.674 --> 00:03:42.025
It depends, it depends on what
the accessibility issues are.

57
00:03:42.025 --> 00:03:46.680
If they're your feature tests that you
wrote for your own components, yeah,

58
00:03:46.680 --> 00:03:48.879
those should probably fail a build.

59
00:03:48.879 --> 00:03:53.325
If somebody changed an element,
so it's not focusable anymore, or

60
00:03:53.325 --> 00:03:57.708
they deleted some code, or
just something broke that used to work.

61
00:03:57.708 --> 00:04:01.926
If you have test coverage for it, and
it broke, that should fail a build.

62
00:04:01.926 --> 00:04:08.357
If you have say, Cypress X or one of
the accessibility test APIs running,

63
00:04:08.357 --> 00:04:12.417
you probably don't want
that to fail a build.

64
00:04:12.417 --> 00:04:15.539
Maybe in your first environment.

65
00:04:15.539 --> 00:04:18.123
But at least for us, we submit code, and

66
00:04:18.123 --> 00:04:21.780
then it has to go to a staging
environment and then to UAT.

67
00:04:21.780 --> 00:04:24.630
I mean,
it goes to like multiple steps of the way.

68
00:04:24.630 --> 00:04:29.479
So we don't really want things that are
page level accessibility issues that may

69
00:04:29.479 --> 00:04:32.187
not even be in scope for
what we just shipped,

70
00:04:32.187 --> 00:04:34.419
cropping up in a later environment.

71
00:04:34.419 --> 00:04:37.326
We really need those to
get handled earlier.

72
00:04:37.326 --> 00:04:41.385
So we wanna test it,
we might wanna be more choosy and

73
00:04:41.385 --> 00:04:44.170
selective about when we run those.

74
00:04:44.170 --> 00:04:47.880
So linters and CI builds,
I've seen type checks fail builds, and

75
00:04:47.880 --> 00:04:52.595
whether accessibility link rules should
fail builds, that's another question.

76
00:04:52.595 --> 00:04:56.392
So it's worth experimenting,
configuring your rules,

77
00:04:56.392 --> 00:05:00.265
add something that has just
the right amount of friction and

78
00:05:00.265 --> 00:05:04.855
doesn't make everyone want it to
turn it off, [LAUGH] like snapshots.

79
00:05:04.855 --> 00:05:07.434
&gt;&gt; So I guess going back to CI,

80
00:05:07.434 --> 00:05:12.494
are there any types of tests
that commonly flake out?

81
00:05:12.494 --> 00:05:14.220
Because I know at least my company,

82
00:05:14.220 --> 00:05:17.514
that's something we're trying to
wrangle a little bit right now.

83
00:05:17.514 --> 00:05:22.416
And I wasn't sure if there were just
some tests that sometimes they work,

84
00:05:22.416 --> 00:05:26.766
sometimes they don't, or
if they're generally reliable, and

85
00:05:26.766 --> 00:05:32.249
as long as you have the test itself set up
properly, it'll pass when it should be.

86
00:05:32.249 --> 00:05:36.151
&gt;&gt; Yes, flaky tests,
those are challenging.

87
00:05:36.151 --> 00:05:41.341
I have seen flaky tests where
the test runs too quickly,

88
00:05:41.341 --> 00:05:45.987
and it hasn't had enough time to wait for
things.

89
00:05:45.987 --> 00:05:49.732
Yeah, sometimes we need
to use test Apis to wait,

90
00:05:49.732 --> 00:05:54.204
or we need to make our test
more asynchronous or something.

91
00:05:54.204 --> 00:05:57.387
So I think the tooling's gotten
a little bit better for that.

92
00:05:57.387 --> 00:05:59.363
For things in accessibility,

93
00:05:59.363 --> 00:06:03.853
focus management can actually be
the cause of flaky tests sometimes.

94
00:06:03.853 --> 00:06:08.397
Because you're trying to send
focus to something, and well, for

95
00:06:08.397 --> 00:06:12.779
one in a CI environment depending
on what tool you're running,

96
00:06:12.779 --> 00:06:15.555
it might be using virtual dom in memory.

97
00:06:15.555 --> 00:06:17.914
So, there might be some weirdness there.

98
00:06:17.914 --> 00:06:21.208
But then the timing of things,
when things are flaky,

99
00:06:21.208 --> 00:06:24.442
that means that they pass sometimes and
fail others.

100
00:06:24.442 --> 00:06:27.782
If it passes locally, but
always fails in CI or

101
00:06:27.782 --> 00:06:32.080
it only fails in CI part of the time,
that's double flaky.

102
00:06:32.080 --> 00:06:34.654
Then you kind of have to think about,
well, what's happening there?

103
00:06:34.654 --> 00:06:39.297
It's something about the way
that that test is being run,

104
00:06:39.297 --> 00:06:42.532
something about the way the UI is set up.

105
00:06:42.532 --> 00:06:48.344
Do I need to just wait for things more,
or use use effect more, or something

106
00:06:48.344 --> 00:06:54.369
that's gonna put some guard rails around
when that focus event will happen.

107
00:06:54.369 --> 00:06:58.864
I've had to do stuff as detailed
as putting event listeners on

108
00:06:58.864 --> 00:07:02.157
CSS transitions to make
sure stuff is ready.

109
00:07:02.157 --> 00:07:06.934
So kinda dig into why it's failing and
that might help narrow it down.

110
00:07:06.934 --> 00:07:09.632
Flaky tests are some of
the hardest things though,

111
00:07:09.632 --> 00:07:12.715
it's like you just wanna punt on it and
not think about it.

112
00:07:12.715 --> 00:07:16.288
[LAUGH] question?

113
00:07:16.288 --> 00:07:19.006
&gt;&gt; Flaky tests, in my opinion,

114
00:07:19.006 --> 00:07:22.889
mostly happen in end-to-end tests
&gt;&gt; Yeah,

115
00:07:22.889 --> 00:07:27.997
there's more going on,
there's more variables, things are slower.

116
00:07:27.997 --> 00:07:33.037
So definitely the accessibility test
APIs that we're gonna talk about now,

117
00:07:33.037 --> 00:07:34.287
they're slower.

118
00:07:34.287 --> 00:07:38.655
So things like Axe-Core,
particularly the algorithm for

119
00:07:38.655 --> 00:07:41.372
color contrast, it's doing a lot.

120
00:07:41.372 --> 00:07:45.264
It's looking at the get-computed
style of elements,

121
00:07:45.264 --> 00:07:47.762
which is very expensive as a check.

122
00:07:47.762 --> 00:07:50.352
And if you have to call it multiple times,

123
00:07:50.352 --> 00:07:53.390
that's even more
computationally expensive.

124
00:07:53.390 --> 00:07:55.852
And so for running things like axe,

125
00:07:55.852 --> 00:08:00.613
we probably only wanna run it at
a page level, we're not gonna want to

126
00:08:00.613 --> 00:08:05.478
invoke it in every unit test or
that's gonna be a very slow test suite.

127
00:08:05.478 --> 00:08:10.733
You can scope axe to only look at
certain elements using the API,

128
00:08:10.733 --> 00:08:15.617
but it's still a big API to call
in a unit test environment.

129
00:08:15.617 --> 00:08:22.447
So my first bit of advice for using
Axe-Core is to probably use it in Cypress.

130
00:08:22.447 --> 00:08:27.049
There's a bunch of different flavors
though, and if you find it works in

131
00:08:27.049 --> 00:08:31.055
anywhere in your test suite
without being too slow, go for it.

132
00:08:31.055 --> 00:08:33.204
But end-to-end tests can be kind of flaky.

133
00:08:33.204 --> 00:08:40.523
So yeah, at least they have the wait for
API in Cypress and in testing library.

134
00:08:40.523 --> 00:08:44.298
I think I always have to remember is that
is that in Jest or in testing library?

135
00:08:44.298 --> 00:08:46.149
Sometimes it's hard to tell.

136
00:08:46.149 --> 00:08:51.439
So let's talk about using an accessibility
testing API like Axe-Core.

137
00:08:51.439 --> 00:08:55.248
So we've seen Axe-Core in
the browser extensions.

138
00:08:55.248 --> 00:08:59.940
Axe-Core is a JavaScript library
that you can call anywhere,

139
00:08:59.940 --> 00:09:04.821
really, but it's great for
page-level accessibility tests.

140
00:09:04.821 --> 00:09:08.779
So when we run it in the Chrome
extension or Firefox extension,

141
00:09:08.779 --> 00:09:13.486
we hear about things like color contrast,
and the document language, and

142
00:09:13.486 --> 00:09:15.371
all of the markup on the page.

143
00:09:15.371 --> 00:09:20.313
So in an automated environment,
we can mimic that by having a computer

144
00:09:20.313 --> 00:09:25.087
run it instead of us, manually
pushing that button in the browser,

145
00:09:25.087 --> 00:09:27.881
we can run it with things like Cypress.

146
00:09:27.881 --> 00:09:29.505
And it's pretty awesome.

147
00:09:29.505 --> 00:09:34.458
So what's nice about these APIs is
that you don't have to write all

148
00:09:34.458 --> 00:09:36.856
of those accessibility tests.

149
00:09:36.856 --> 00:09:42.169
We're trying to get budget and support for
doing the things we know most about,

150
00:09:42.169 --> 00:09:45.114
which are the features
that are in our apps.

151
00:09:45.114 --> 00:09:49.549
Leadership probably doesn't wanna fund us
to write accessibility testing rules at

152
00:09:49.549 --> 00:09:51.616
companies when that's not what we do.

153
00:09:51.616 --> 00:09:54.769
So you can benefit from
a lot of these rules by

154
00:09:54.769 --> 00:09:57.850
pulling in an accessibility testing API.

155
00:09:57.850 --> 00:10:02.935
And the accessibility companies like
WebAiM and DQ, and there are many others,

156
00:10:02.935 --> 00:10:08.096
but they are dealing with accessibility
compliance in the real world every day and

157
00:10:08.096 --> 00:10:11.192
they bake that knowledge
into these libraries.

158
00:10:11.192 --> 00:10:16.139
So if ARIA isn't working right
somewhere or there's some detail,

159
00:10:16.139 --> 00:10:21.358
this folds into a concept of what's
called accessibility supported.

160
00:10:21.358 --> 00:10:24.777
And so that's a big thing that
these libraries are looking at,

161
00:10:24.777 --> 00:10:27.305
it's not just is it
theoretically possible?

162
00:10:27.305 --> 00:10:31.185
They look at what's really working for
people, so that's pretty cool.

163
00:10:31.185 --> 00:10:35.560
And they keep really close
track of WCAG and ARIA,

164
00:10:35.560 --> 00:10:39.207
they're in the W3Cs conformance task,

165
00:10:39.207 --> 00:10:43.700
accessibility conformance
testing rules group.

166
00:10:43.700 --> 00:10:46.844
So there's a lot going on with these APIs.

167
00:10:49.553 --> 00:10:53.807
So for Axe and automated tests,
there is an Axe-Core React library

168
00:10:53.807 --> 00:10:57.249
you could check out, but
watch the performance of it.

169
00:10:57.249 --> 00:10:59.983
Like I was saying,
I think it could be a bit heavy-handed.

170
00:10:59.983 --> 00:11:04.033
There is just axe, if you have just
testing and it would be hard to get

171
00:11:04.033 --> 00:11:08.456
Cypress or anything else, but
you're like, but we have that right now.

172
00:11:08.456 --> 00:11:10.747
You could try out just axe,

173
00:11:10.747 --> 00:11:15.633
it's maintained by a community
member as is Cypress Axe.

174
00:11:15.633 --> 00:11:19.266
So I think there's even a fork of Cypress
Axe just because people were having

175
00:11:19.266 --> 00:11:20.078
issues with it.

176
00:11:20.078 --> 00:11:23.887
So some of these are more well
maintained than others, but

177
00:11:23.887 --> 00:11:28.251
I haven't had issues with Cypress X,
so it's been pretty great.

178
00:11:28.251 --> 00:11:33.760
So these APIs can help you with things
like HTML nesting and structuring issues,

179
00:11:33.760 --> 00:11:37.892
label and name computation that
we really dug into earlier,

180
00:11:37.892 --> 00:11:41.475
incorrect ARIA usage which
can be highly detailed.

181
00:11:41.475 --> 00:11:45.209
If you grab one ARIA attribute,
did you happen to get all

182
00:11:45.209 --> 00:11:49.040
of the other things that go
with it like an ARIA menu role?

183
00:11:49.040 --> 00:11:50.417
They can really help with that,

184
00:11:50.417 --> 00:11:54.245
because they can be like, you forgot the
required property that goes along with it.

185
00:11:54.245 --> 00:11:55.707
So that's nice.

186
00:11:55.707 --> 00:12:01.167
Color contrast, data table markup,
they can look at that programmatically.

187
00:12:01.167 --> 00:12:03.598
And then some viewport and
zooming problems,

188
00:12:03.598 --> 00:12:07.478
if you've disabled page zooming or
something, they can point that out.

