WEBVTT

1
00:00:00.120 --> 00:00:03.108
Going back to our little insurance portal,

2
00:00:03.108 --> 00:00:06.590
we've got some tests that
we could write for this.

3
00:00:06.590 --> 00:00:08.480
So that's what I always do.

4
00:00:08.480 --> 00:00:12.800
If I am fixing something on a component, I
really wanna write some tests when I ship

5
00:00:12.800 --> 00:00:16.590
it cuz that's a great time to like,
okay, we fix some bugs.

6
00:00:16.590 --> 00:00:19.030
How can we prevent this
from ever happening again?

7
00:00:19.030 --> 00:00:20.355
We could probably write some tests for it.

8
00:00:21.466 --> 00:00:28.186
So, let's go over to VS Code, and
this is gonna be our last coding exercise.

9
00:00:28.186 --> 00:00:31.916
We have one more section that will be
a little shorter after this that we will

10
00:00:31.916 --> 00:00:33.446
have a discussion at the end.

11
00:00:33.446 --> 00:00:34.566
Should be easy breezy.

12
00:00:35.816 --> 00:00:41.999
So our portal switcher,
I have some Jest tests set up in here.

13
00:00:41.999 --> 00:00:45.959
So, where you structure
your tests can vary.

14
00:00:45.959 --> 00:00:48.609
Sometimes people put tests
off in their own directory.

15
00:00:48.609 --> 00:00:52.843
Sometimes people have a directory for
each component that has its own

16
00:00:52.843 --> 00:00:57.219
storybook stories and
Jest tests all kinda co-located.

17
00:00:57.219 --> 00:01:01.651
This is a small project, so
I just co-located everything.

18
00:01:01.651 --> 00:01:03.391
But we have this set up.

19
00:01:03.391 --> 00:01:05.911
It uses testing-library and jest-dom.

20
00:01:05.911 --> 00:01:10.621
We have testing-library/react,
testing-library/user-event.

21
00:01:10.621 --> 00:01:16.721
We pull in our component and render it,
and then we have this little sandbox.

22
00:01:16.721 --> 00:01:18.371
We can write some assertions.

23
00:01:18.371 --> 00:01:21.084
So I have at least one in there to
make sure that this renders and

24
00:01:21.084 --> 00:01:22.136
it's in the document.

25
00:01:23.346 --> 00:01:28.616
So what other kinds of tests do you think
that we could write for this component?

26
00:01:28.616 --> 00:01:33.210
If you think about the things that
we fixed, there was like stuff for

27
00:01:33.210 --> 00:01:38.626
keyboard users, any ideas on kind of what
our test assertions would look like?

28
00:01:39.946 --> 00:01:42.606
&gt;&gt; I guess simulating
the keyboard user flow for

29
00:01:42.606 --> 00:01:45.561
trying to use the component
to change the portal?

30
00:01:45.561 --> 00:01:50.463
&gt;&gt; Yeah, yeah, totally.

31
00:01:50.463 --> 00:01:52.804
I guess some other things
I had in mind were, yeah,

32
00:01:52.804 --> 00:01:54.503
the keyboard support is the big one.

33
00:01:54.503 --> 00:01:56.503
I think that's primarily what we'll do.

34
00:01:56.503 --> 00:02:01.045
But if there's anything in here that
kind of goes outside of the scope of

35
00:02:01.045 --> 00:02:05.527
a single component, like,
do we need to do anything outside of jest?

36
00:02:05.527 --> 00:02:08.057
So that's something to keep in mind.

37
00:02:08.057 --> 00:02:12.462
And I guess for this one,
it was that there's links in here and

38
00:02:12.462 --> 00:02:17.227
I wanted to make sure that those
links navigate to the right place.

39
00:02:17.227 --> 00:02:22.440
It just seemed like something
that could easily be broken.

40
00:02:22.440 --> 00:02:24.550
And I wanted some protection against that.

41
00:02:24.550 --> 00:02:29.265
But that was kind of outside of
the scope of Jest, because Jest and

42
00:02:29.265 --> 00:02:31.493
JSDOM get very mad if you try and

43
00:02:31.493 --> 00:02:36.580
do things with the window.location.href
in very particular ways.

44
00:02:36.580 --> 00:02:42.984
So sometimes when the tooling doesn't
have knowledge of the window object or

45
00:02:42.984 --> 00:02:47.812
there's some API that's kind
of just outside of the scope

46
00:02:47.812 --> 00:02:52.070
of your little internal
unit-tested component.

47
00:02:52.070 --> 00:02:54.875
You might start to be thinking
about other types of testing,

48
00:02:54.875 --> 00:02:56.789
like component testing in Cypress.

49
00:02:56.789 --> 00:02:59.819
That might be easier,
or Cypress in general.

50
00:02:59.819 --> 00:03:04.461
So that's something I was thinking about,
can I add multiple types of coverage for

51
00:03:04.461 --> 00:03:07.789
this to make sure I'm covering
the things that seem risky?

52
00:03:10.209 --> 00:03:11.799
So let's write some tests.

53
00:03:13.899 --> 00:03:18.249
For the keyboard test, let's do that.

54
00:03:18.249 --> 00:03:21.839
So, within this describe statement,

55
00:03:21.839 --> 00:03:26.967
I could say it renders the portal,
or sorry, toggles.

56
00:03:28.537 --> 00:03:34.114
Toggles the portal switcher
with the keyboard.

57
00:03:34.114 --> 00:03:36.815
And I am gonna make this
an asynchronous function.

58
00:03:44.792 --> 00:03:48.896
Okay, so
in here I need to render our component.

59
00:03:52.293 --> 00:03:54.370
I need to get the toggle button.

60
00:03:54.370 --> 00:03:58.020
So, and actually I'll show
you kind of my workflow.

61
00:03:58.020 --> 00:04:02.441
So when I'm writing tests, I put I put
the component on one side or up top, and

62
00:04:02.441 --> 00:04:06.407
then I put the tests so
I can look at them next to each other.

63
00:04:06.407 --> 00:04:10.597
I'm on a small screen right now, so
I am going to collapse the sidebar.

64
00:04:11.737 --> 00:04:16.745
So let's open this PortalSwitcher and
then I'll do control-click, open

65
00:04:16.745 --> 00:04:22.768
to the side on the test, and then I can do
Command+B to put them next to each other.

66
00:04:22.768 --> 00:04:26.297
So that's kind of nice, cuz now I
don't have to flip back and forth.

67
00:04:26.297 --> 00:04:29.777
Conceptually, I can look
at what our code look like.

68
00:04:29.777 --> 00:04:35.798
And actually, we can do it a little
bit TDD style by writing these tests.

69
00:04:35.798 --> 00:04:38.308
I'm writing them for
what I know is gonna be the fix.

70
00:04:39.328 --> 00:04:42.766
And that way they should fail with
the old code, which is kinda,

71
00:04:42.766 --> 00:04:45.369
that's a nice way to work, I think.

72
00:04:45.369 --> 00:04:49.573
So, let's say const toggleButton, and

73
00:04:49.573 --> 00:04:53.423
actually I might need one userEvent.

74
00:04:53.423 --> 00:04:56.229
Sometimes you have to set
up userEvent a certain way.

75
00:04:56.229 --> 00:04:57.109
We'll see if we need it.

76
00:04:57.109 --> 00:05:01.079
So toggleButton = screen.getByRole.

77
00:05:01.079 --> 00:05:06.613
So here's that matcher, that Kent C Dodds,
everyone's friend, was recommending,

78
00:05:06.613 --> 00:05:11.518
which I love, cuz that's centering
accessibility in our testing.

79
00:05:11.518 --> 00:05:16.628
So, I'm gonna get a link,
or sorry, a button.

80
00:05:16.628 --> 00:05:18.658
It says it right there, toggleButton.

81
00:05:18.658 --> 00:05:23.887
And I don't want just any toggleButton,
I want one with a name

82
00:05:23.887 --> 00:05:29.149
that matches the regular
expression of Toggle portal menu.

83
00:05:29.149 --> 00:05:33.179
And that's what we ended up putting
on at least the icon button version.

84
00:05:33.179 --> 00:05:34.369
It has an label.

85
00:05:34.369 --> 00:05:39.139
So the name, hey, there's another thing
we learned today, the accessible name.

86
00:05:39.139 --> 00:05:44.776
This API will get that name from any
of those options that we talked about.

87
00:05:44.776 --> 00:05:46.732
So now you know what that does.

88
00:05:46.732 --> 00:05:48.446
So that's pretty cool.

89
00:05:48.446 --> 00:05:50.766
So toggleButton, getByRole.

90
00:05:50.766 --> 00:05:52.176
This is an async function.

91
00:05:52.176 --> 00:05:55.697
So I can await userEvent.type.

92
00:05:55.697 --> 00:05:58.396
I can say toggleButton.

93
00:05:59.776 --> 00:06:03.187
And I'm gonna pass it the Enter key.

94
00:06:05.171 --> 00:06:10.771
I'm actually going to make
this slightly bigger.

95
00:06:10.771 --> 00:06:14.555
And, is that right?

96
00:06:14.555 --> 00:06:21.089
I have extra parentheses or
curly braces I didn't need.

97
00:06:21.089 --> 00:06:24.370
Okay, so, let's get through this,
const brokerLink.

98
00:06:24.370 --> 00:06:27.320
I'm gonna store where I'm gonna try and
get to.

99
00:06:27.320 --> 00:06:33.670
So that is an await screen.getByRole.

100
00:06:33.670 --> 00:06:35.820
And that one is a link.

101
00:06:35.820 --> 00:06:40.500
It has a name of Broker Portal.

102
00:06:40.500 --> 00:06:47.427
And text strings and matchers do
make me a little bit uncomfortable.

103
00:06:47.427 --> 00:06:51.907
They seem a little flaky, or
they could be less stable.

104
00:06:51.907 --> 00:06:55.027
But that's what they say to you,
so I'm gonna try it.

105
00:06:56.317 --> 00:07:00.683
Await, so we're gonna await this
expectation cuz it's dependent on

106
00:07:00.683 --> 00:07:04.682
an asynchronous brokerLink call
with the screen.getByRole.

107
00:07:04.682 --> 00:07:11.932
So I'm going to await this expected
broker link to be visible.

108
00:07:13.062 --> 00:07:14.362
And this is from jest-dom.

109
00:07:15.772 --> 00:07:19.851
jest-dom also has a bunch of really
cool accessibility stuff in it,

110
00:07:19.851 --> 00:07:23.667
like to be focused, to be visible,
to have an accessible name.

111
00:07:23.667 --> 00:07:24.882
jest-dom is awesome.

112
00:07:25.902 --> 00:07:29.479
So we are going to expect that
that link is visible after we

113
00:07:29.479 --> 00:07:31.352
toggle it with the keyboard.

114
00:07:32.352 --> 00:07:38.921
I'm also going to await
userEvent.type on brokerLink,

115
00:07:38.921 --> 00:07:45.771
when it supports the escape key,
it should send focus back.

116
00:07:45.771 --> 00:07:52.211
We haven't moved that code over so
that this test would pass for that yet.

117
00:07:52.211 --> 00:07:55.332
So here is where in Jest and
testing-library,

118
00:07:55.332 --> 00:07:57.601
I can say waitFor an async action.

119
00:07:59.621 --> 00:08:06.847
And I can await an expected
toggleButton to have focus.

120
00:08:08.577 --> 00:08:10.517
Cool, so that should fail.

121
00:08:10.517 --> 00:08:12.557
It should be blowing up red.

122
00:08:12.557 --> 00:08:14.987
So I'm gonna do Ctrl+backtick.

123
00:08:16.087 --> 00:08:22.299
Let's open our terminal here,
and I can say yarn run.

124
00:08:22.299 --> 00:08:23.829
Actually, one thing I'm
gonna do real quick.

125
00:08:25.049 --> 00:08:27.237
Let me show you where
these tests are set up.

126
00:08:27.237 --> 00:08:31.515
So in package.json, for
any testing tool on the web,

127
00:08:31.515 --> 00:08:35.329
this is your command center
of all your scripts.

128
00:08:35.329 --> 00:08:36.309
You probably knew that.

129
00:08:36.309 --> 00:08:41.261
But when I'm setting up things like Jest,
or Cypress, or Playwright, or

130
00:08:41.261 --> 00:08:44.340
whatever, this is where
my test commands go.

131
00:08:44.340 --> 00:08:49.390
So if you're ever new on a project,
go see what test commands there are.

132
00:08:49.390 --> 00:08:53.120
It's made me very effective on a new
project cuz I can be like, storybook.

133
00:08:53.120 --> 00:08:55.890
And I didn't even need to ask someone.

134
00:08:55.890 --> 00:09:01.000
So always go check the scripts cuz it can
help orient you to what tooling you have.

135
00:09:02.571 --> 00:09:05.391
So, back to yarn run test.

136
00:09:05.391 --> 00:09:06.701
That's gonna run Jest.

137
00:09:08.051 --> 00:09:10.181
Let's see what happens.

138
00:09:10.181 --> 00:09:11.701
Wow, a big thing of red.

139
00:09:11.701 --> 00:09:12.591
We knew that, right?

140
00:09:12.591 --> 00:09:14.641
We knew that.
We were expecting that, [LAUGH].

141
00:09:14.641 --> 00:09:15.491
No pun intended.

142
00:09:16.601 --> 00:09:20.297
So TestingLibraryElementError: unable
to find an accessible element with

143
00:09:20.297 --> 00:09:23.264
the role "link" and
the name '/Broker Portal/'.

144
00:09:23.264 --> 00:09:26.384
So that element, it was not toggleable.

145
00:09:27.604 --> 00:09:30.294
We fired that event and
it didn't do anything.

146
00:09:30.294 --> 00:09:36.954
So even before that, I have one detail
where the links don't quite match.

147
00:09:39.594 --> 00:09:41.332
And, let's see what else.

148
00:09:42.613 --> 00:09:44.773
Unable to find an element by.

149
00:09:44.773 --> 00:09:48.103
I hope that's not just
an issue with my test.

150
00:09:49.593 --> 00:09:54.061
But we can write some feature tests that,
if it's not working,

151
00:09:54.061 --> 00:09:58.733
hopefully it's because we
just haven't fixed it yet.

152
00:09:58.733 --> 00:10:02.628
But sometimes this is the going around and
around trying to fix your test.

153
00:10:02.628 --> 00:10:04.258
Sometimes, that's the work.

154
00:10:05.588 --> 00:10:10.948
So let's swap out our PortalSwitcher for

155
00:10:10.948 --> 00:10:15.090
the one that is working better.

156
00:10:15.090 --> 00:10:18.701
I'm gonna put it here
in our main directory.

157
00:10:18.701 --> 00:10:19.822
Replace that one.

158
00:10:23.242 --> 00:10:24.999
Hopefully it'll work, [LAUGH].

159
00:10:30.242 --> 00:10:33.698
My demo gods at this time of
the day might not be blessing me.

160
00:10:37.951 --> 00:10:41.585
So, yeah, we might not be
able to fix this one in time.

161
00:10:41.585 --> 00:10:45.082
So what it should do is go
from failing to passing, and

162
00:10:45.082 --> 00:10:49.278
now I'm gonna wanna go and
fix those but in the interest of time,

163
00:10:49.278 --> 00:10:52.565
we're gonna have to live
with some broken tests.

164
00:10:53.645 --> 00:10:57.615
How's that for a motivator to be like,
I need to go fix those?

165
00:10:57.615 --> 00:11:03.893
So these tests do work but sometimes,
it's probably a tooling thing.

166
00:11:03.893 --> 00:11:07.193
I was switching stuff around to try and
make the whole project work.

167
00:11:08.753 --> 00:11:10.523
Yeah, sometimes you got to
go check your tests again.

168
00:11:11.833 --> 00:11:15.473
But when these are running in
your CI environment and you had,

169
00:11:15.473 --> 00:11:19.563
everything worked, [LAUGH] and
then it starts to fail.

170
00:11:19.563 --> 00:11:24.438
It can tell you something about your
environment, somebody broke a component.

171
00:11:24.438 --> 00:11:26.608
I mean, you look at what the failure is.

172
00:11:26.608 --> 00:11:29.745
This looks deeper than
the actual component itself,

173
00:11:29.745 --> 00:11:34.078
I could tell, because it's not finding
the component on the page at all.

174
00:11:35.118 --> 00:11:39.036
Definitely try it out when you're
writing some accessibility tests.

175
00:11:39.036 --> 00:11:44.728
Check these things out, make sure
your components rendered for one.

176
00:11:44.728 --> 00:11:46.698
I mean,
that's why we have these tests in here.

177
00:11:46.698 --> 00:11:49.328
It renders, that test failed.

178
00:11:49.328 --> 00:11:53.560
So that actually was very helpful
because I didn't go wondering, well,

179
00:11:53.560 --> 00:11:55.728
why didn't my keyboard tests work?

180
00:11:55.728 --> 00:11:57.308
I'm like, well, even before I get there,

181
00:11:57.308 --> 00:11:59.808
I already know that there's
an infrastructure issue.

182
00:11:59.808 --> 00:12:01.953
So that's why that test's valuable.

183
00:12:03.513 --> 00:12:07.003
And so part of the stuff is it takes time.

184
00:12:07.003 --> 00:12:10.243
It's not the quickest fix.

185
00:12:10.243 --> 00:12:12.858
And that's why when executives
in leadership are like,

186
00:12:12.858 --> 00:12:14.343
just automate everything.

187
00:12:14.343 --> 00:12:17.578
It's like,
that is not a cost saving measure.

188
00:12:17.578 --> 00:12:21.829
[LAUGH] I don't know if you've had
a fiddle with a test suite, but

189
00:12:21.829 --> 00:12:26.949
you could have everything working and
it can just stop with like one upgrade,

190
00:12:26.949 --> 00:12:29.492
TypeScript or a plugin or something.

191
00:12:29.492 --> 00:12:31.932
And then all of a sudden it's
like everything changed.

192
00:12:31.932 --> 00:12:36.102
So it can be costly, but
it's amazing when it works.

193
00:12:36.102 --> 00:12:41.415
And that's why I showed it here, even
though I risked it not working, [LAUGH].

194
00:12:41.415 --> 00:12:43.160
Because it can be really awesome,

195
00:12:43.160 --> 00:12:46.349
especially when you have
a little more stable environment.

196
00:12:46.349 --> 00:12:50.549
Your test tools have been working,
you haven't made any changes.

197
00:12:50.549 --> 00:12:54.599
You can write some tests,
you can run them in CI.

198
00:12:54.599 --> 00:12:55.669
It works really well.

199
00:12:57.579 --> 00:12:58.972
Or it can, anyway.

