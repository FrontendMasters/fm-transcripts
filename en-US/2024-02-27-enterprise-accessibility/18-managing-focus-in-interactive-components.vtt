WEBVTT

1
00:00:00.240 --> 00:00:03.924
All right, let's talk about managing
focus in interactive components,

2
00:00:03.924 --> 00:00:08.090
coz that's a lot of what we're building
in these client-rendered applications.

3
00:00:08.090 --> 00:00:12.220
And a lot of these need attention for
the keyboard.

4
00:00:12.220 --> 00:00:15.700
It's so cool when there is support for
the keyboard.

5
00:00:15.700 --> 00:00:20.733
So try ditching your mouse for a day
each week as a regular workflow step.

6
00:00:20.733 --> 00:00:23.393
And see if you can highlight
accessibility problems.

7
00:00:23.393 --> 00:00:27.450
I bet you'll find all kinds of issues just
by having the team regularly ditch your

8
00:00:27.450 --> 00:00:28.353
mouse for a week.

9
00:00:28.353 --> 00:00:31.753
Have no mouse Mondays or something.

10
00:00:31.753 --> 00:00:32.823
Could be very effective.

11
00:00:34.033 --> 00:00:37.273
So some common patterns to look out for.

12
00:00:37.273 --> 00:00:41.812
We talked about some of these in
the HTML context of things, but

13
00:00:41.812 --> 00:00:46.863
in terms of focus management,
modals and view changes are a big one.

14
00:00:46.863 --> 00:00:50.133
When those layers open,
we have to move focus into them and

15
00:00:50.133 --> 00:00:52.213
put it back when they close.

16
00:00:52.213 --> 00:00:57.040
We also have to prevent interaction in
the background using things like focus

17
00:00:57.040 --> 00:01:00.976
scopes and focus trapping,
that we use very intentionally and

18
00:01:00.976 --> 00:01:04.187
not by accident,
tab switchers and date pickers.

19
00:01:04.187 --> 00:01:09.508
We talked a little bit about roving tab
index, that's when you manage tab index so

20
00:01:09.508 --> 00:01:13.730
that only one element in
a group is flexible at a time.

21
00:01:13.730 --> 00:01:15.670
And you use scripting to move it around.

22
00:01:15.670 --> 00:01:17.350
I have a link in here for that.

23
00:01:17.350 --> 00:01:21.513
We covered it in the web app
workshop a little bit more.

24
00:01:21.513 --> 00:01:26.148
But those are common patterns, and
sometimes those, when you do create that

25
00:01:26.148 --> 00:01:31.353
one focusable control with roving tab
index, that's when the arrow keys come in.

26
00:01:31.353 --> 00:01:37.412
And we saw how to target the arrow keys
with the event object in our events.

27
00:01:37.412 --> 00:01:42.965
When you're adding and deleting items,
that's one, and we saw a widget that,

28
00:01:42.965 --> 00:01:47.294
I think multiple widgets today,
that when the node goes away,

29
00:01:47.294 --> 00:01:52.667
because that state condition isn't
met in JSX anymore and react.

30
00:01:52.667 --> 00:01:55.991
If you're focused on that element,
it just kind of goes poof.

31
00:01:55.991 --> 00:02:00.120
When you delete an item,
it's basically doing the same thing, so

32
00:02:00.120 --> 00:02:03.227
we have to manage focus to
send it back somewhere.

33
00:02:03.227 --> 00:02:04.988
I've got a question.

34
00:02:04.988 --> 00:02:06.478
&gt;&gt; What is focus trapping?

35
00:02:07.538 --> 00:02:13.238
&gt;&gt; Focus trapping,
let me think of the best example to show.

36
00:02:16.048 --> 00:02:20.308
Maybe the one from the other workshop.

37
00:02:20.308 --> 00:02:21.974
Yeah.

38
00:02:21.974 --> 00:02:23.527
I didn't think about that.

39
00:02:26.807 --> 00:02:30.447
Let's look at our source slides,
look very familiar, don't they?

40
00:02:30.447 --> 00:02:33.087
Let's go to focus management,
keyboard trapping.

41
00:02:34.337 --> 00:02:40.277
So I have an example here in,
using the focus scope I mentioned,

42
00:02:40.277 --> 00:02:44.798
it's from a library called React ARIA.

43
00:02:44.798 --> 00:02:47.298
So we'll see a very
stripped down example here.

44
00:02:47.298 --> 00:02:51.747
So I've got, and I'll actually,
let's open this a little bit bigger.

45
00:02:54.027 --> 00:02:57.628
So on StackBlitz,
I've got this focus scope.

46
00:02:58.808 --> 00:03:00.864
So on this page, it has a button.

47
00:03:00.864 --> 00:03:04.913
And when I click that button,
it shows and hides, or

48
00:03:04.913 --> 00:03:08.994
at least shows, another set of components.

49
00:03:08.994 --> 00:03:11.094
So it's pretty basic.

50
00:03:11.094 --> 00:03:12.584
This could be an immortal.

51
00:03:12.584 --> 00:03:15.236
Maybe these new elements would
be on top of everything, and

52
00:03:15.236 --> 00:03:18.114
there would be a grayed-out background.

53
00:03:18.114 --> 00:03:22.953
But when I tab in here,
my focus cycle is between.

54
00:03:22.953 --> 00:03:24.863
So I'm being trapped.

55
00:03:24.863 --> 00:03:29.556
And we don't wanna do this by accident,
[LAUGH] Where I've seen that happen is,

56
00:03:29.556 --> 00:03:32.013
I mean, maybe even here on StackBlitz.

57
00:03:32.013 --> 00:03:34.233
If I try to tab, well, first of all,

58
00:03:34.233 --> 00:03:38.193
I'm trapped because the focus scope
is that good at what it does.

59
00:03:38.193 --> 00:03:39.128
I can't even get out.

60
00:03:39.128 --> 00:03:43.344
[LAUGH] But if I tab through StackBlitz,

61
00:03:43.344 --> 00:03:50.000
let's see what happens when I
get to the text editor portion.

62
00:03:50.000 --> 00:03:51.680
This is a focus trap right here.

63
00:03:51.680 --> 00:03:53.521
This is an unintentional focus trap.

64
00:03:53.521 --> 00:03:55.551
So, I finally got out.

65
00:03:56.551 --> 00:03:59.320
Maybe it wasn't quite a focus trap,
it was close.

66
00:04:01.208 --> 00:04:02.519
Let's see.

67
00:04:02.519 --> 00:04:03.329
Here we go.

68
00:04:03.329 --> 00:04:04.229
Here's a focus strap.

69
00:04:04.229 --> 00:04:05.349
I'm hitting tab.

70
00:04:05.349 --> 00:04:09.189
See how it just keeps moving the content?

71
00:04:09.189 --> 00:04:10.169
I can't get out of it.

72
00:04:10.169 --> 00:04:12.209
I can't get past it.

73
00:04:12.209 --> 00:04:14.139
So there's intentional and unintentional.

74
00:04:14.139 --> 00:04:18.152
The unintentional ones are the ones
that are WCAG violations,

75
00:04:18.152 --> 00:04:20.879
because you can't do anything.

76
00:04:20.879 --> 00:04:24.377
So what they need to do for
StackBlitz, or CodePen, or

77
00:04:24.377 --> 00:04:28.679
anything like that is give me
an edit mode and a button.

78
00:04:28.679 --> 00:04:31.506
Let me tab onto that button,
go into edit mode,

79
00:04:31.506 --> 00:04:35.399
then do this, hit Escape or
something to get back out.

80
00:04:35.399 --> 00:04:37.732
Whereas over here, this example,

81
00:04:37.732 --> 00:04:42.316
I can skip by the stuff when it's
not active, say it's in a modal, and

82
00:04:42.316 --> 00:04:46.704
I can trap it at the right time,
and then turn it off when I'm done.

83
00:04:46.704 --> 00:04:50.265
So that's kind of how we do it on purpose.

84
00:04:50.265 --> 00:04:53.114
[LAUGH] Is put it in something.

85
00:04:53.114 --> 00:04:54.338
So in my react here,

86
00:04:54.338 --> 00:04:58.514
I have this only happening when
the is open state variable is truthy.

87
00:04:59.744 --> 00:05:02.162
And so, yeah, it's a great question.

88
00:05:03.332 --> 00:05:04.332
&gt;&gt; Another question.

89
00:05:04.332 --> 00:05:07.282
How would you manage focus in and
out of an iframe?

90
00:05:09.242 --> 00:05:11.238
&gt;&gt; I know, iframes are my nemesis.

91
00:05:11.238 --> 00:05:13.634
&gt;&gt; [LAUGH]
&gt;&gt; They are hard.

92
00:05:13.634 --> 00:05:18.021
So iframes, when you have third party
content that loads into an iframe,

93
00:05:18.021 --> 00:05:20.598
you are responsible for it.

94
00:05:20.598 --> 00:05:23.178
Even though you can't
do anything about it.

95
00:05:23.178 --> 00:05:27.472
So, the accessibility issues that
get iframed in, yeah, guess who's,

96
00:05:27.472 --> 00:05:30.548
if you get sued for
something, that's in scope.

97
00:05:30.548 --> 00:05:32.628
So, that's troubling.

98
00:05:32.628 --> 00:05:39.791
But, I think you should be able to just
seamlessly tab into the iframe, I believe.

99
00:05:39.791 --> 00:05:44.858
Honestly, I try to do everything I can
to avoid iframes, [LAUGH] Cuz they're

100
00:05:44.858 --> 00:05:50.102
very hard, but I think, yeah, it's part
of the overall what gets rendered.

101
00:05:50.102 --> 00:05:53.497
So think about the user experience
is that it's part of the page,

102
00:05:53.497 --> 00:05:55.792
it's part of what they're gonna tap into.

103
00:05:55.792 --> 00:05:58.697
It's kind of they don't care
if it's in an iframe or not.

104
00:05:58.697 --> 00:06:04.083
It's on the page and if I can get into it,
yeah, I think what I would do kind of,

105
00:06:04.083 --> 00:06:08.004
since I'm just sort of
spitballing here about iframes,

106
00:06:08.004 --> 00:06:12.108
the steps I would take to test that,
I would with anything.

107
00:06:12.108 --> 00:06:16.733
Make a little sandbox,
on StackBlitz or CodePen or whatever,

108
00:06:16.733 --> 00:06:21.550
put an iframe in it with some
focusable elements, and go test it.

109
00:06:21.550 --> 00:06:24.621
That's always the way
to get a true answer,

110
00:06:24.621 --> 00:06:28.790
is to go test it yourself, and
so that's what I would do.

111
00:06:28.790 --> 00:06:30.793
I'm not gonna do it right the second, but

112
00:06:30.793 --> 00:06:34.700
that's how you can answer that question
whenever you have something like that.

113
00:06:34.700 --> 00:06:38.476
It's like put it in a plain HTML
page with no other dependencies,

114
00:06:38.476 --> 00:06:41.190
no other styles to get in the way.

115
00:06:41.190 --> 00:06:43.011
And then just see what it does.

116
00:06:46.153 --> 00:06:46.820
Cool.

117
00:06:46.820 --> 00:06:51.353
So when to show a focus outline,
I have an example here.

118
00:06:51.353 --> 00:06:56.290
Because I have had issues opened on
component libraries of mouse users

119
00:06:56.290 --> 00:06:58.893
who are very mad about focus styles.

120
00:06:58.893 --> 00:07:01.880
And this could be when you're talking
about convincing leadership and

121
00:07:01.880 --> 00:07:05.379
stakeholders, and they're like,
why is this blue outline on everything?

122
00:07:05.379 --> 00:07:07.569
You're like, well,
that's the keyboard focus.

123
00:07:07.569 --> 00:07:08.905
Yeah, people don't love that.

124
00:07:08.905 --> 00:07:12.079
[LAUGH] It's really hard
to make everyone happy.

125
00:07:12.079 --> 00:07:16.819
So fortunately, we have a really great
pseudo class now called Focus Visible.

126
00:07:16.819 --> 00:07:22.038
And it will discern, it uses heuristics
to discern between keyboard focus and

127
00:07:22.038 --> 00:07:27.015
mouse focus, which when you click
it does actually focus things.

128
00:07:27.015 --> 00:07:31.194
So like I clicked on this div, it has
a tab index of negative 1 on it, and

129
00:07:31.194 --> 00:07:32.115
a focus style.

130
00:07:33.405 --> 00:07:36.813
When I click it,
either by clicking on a button and

131
00:07:36.813 --> 00:07:41.033
sending focus to it with the mouse,
or if I click directly on,

132
00:07:41.033 --> 00:07:45.034
say this is a wrapper element,
my client routing target.

133
00:07:45.034 --> 00:07:48.054
I'm sending focus to the heading or
to a wrapper element.

134
00:07:48.054 --> 00:07:50.434
It has tab index of -1 on it.

135
00:07:50.434 --> 00:07:53.601
And I saw the sun and I have these
issues getting filed that like,

136
00:07:53.601 --> 00:07:55.984
why is this focus style showing?

137
00:07:55.984 --> 00:08:00.504
Well, it's because your style
is matching on CSS focus.

138
00:08:00.504 --> 00:08:04.536
Now, these days we have a more modern
pseudo class we can use called

139
00:08:04.536 --> 00:08:06.384
Focus Visible.

140
00:08:06.384 --> 00:08:11.474
When I click, it will not show that
outline on tab index of negative 1.

141
00:08:11.474 --> 00:08:16.764
When I use the keyboard,
it will, that's what we want.

142
00:08:16.764 --> 00:08:18.878
We want it to work for keyboards.

143
00:08:18.878 --> 00:08:21.618
And mouse users, probably not.

144
00:08:21.618 --> 00:08:25.465
I mean, some, the kind of the caveat
here is for voice navigation,

145
00:08:25.465 --> 00:08:29.528
it acts like mouse clicking, but
users might still want a focus style.

146
00:08:29.528 --> 00:08:33.596
So, kind of what I say to that is,
if you can make it configurable,

147
00:08:33.596 --> 00:08:37.375
if you're a big web app and
you have accessibility settings,

148
00:08:37.375 --> 00:08:41.606
let users tell you that they really
want focus outlines all the time.

149
00:08:41.606 --> 00:08:43.886
That would be the coolest thing
ever if you really needed it.

150
00:08:44.976 --> 00:08:46.986
And you're using voice navigation.

151
00:08:46.986 --> 00:08:50.186
But otherwise,
focus visible is pretty great.

152
00:08:50.186 --> 00:08:56.576
And it could allow you to style
with more specific pseudo-classes.

153
00:08:56.576 --> 00:09:03.033
And they're really synonymous,
it's :focus versus :focus-visible.

154
00:09:03.033 --> 00:09:07.263
So it's really easy to use kinda
in place of regular focus styles.

155
00:09:07.263 --> 00:09:11.943
And I have a link to the MDM docs
on it if you wanna read about it.

156
00:09:11.943 --> 00:09:16.505
But really the difference here
is what happens when you click

157
00:09:16.505 --> 00:09:18.480
versus use the keyboard.

158
00:09:18.480 --> 00:09:22.103
There's a slight difference that when
you're really being selective with how you

159
00:09:22.103 --> 00:09:24.315
style for these different inputs.

160
00:09:24.315 --> 00:09:25.275
It can save you.

161
00:09:25.275 --> 00:09:29.195
You can keep your stakeholders happy and
make it accessible.

162
00:09:29.195 --> 00:09:33.979
There's also a JavaScript library called,
What Input, that does something similar,

163
00:09:33.979 --> 00:09:37.309
but it's nice to use the standard CSS,
now that it's there.

164
00:09:40.023 --> 00:09:42.916
Any questions about focus visible?

165
00:09:42.916 --> 00:09:44.056
It's awesome.

166
00:09:44.056 --> 00:09:44.556
I love it.

167
00:09:45.566 --> 00:09:48.906
Gets us out of what I used
to call button focus hell.

168
00:09:48.906 --> 00:09:51.886
That was when I was working
on a component library and

169
00:09:51.886 --> 00:09:55.966
fielding the why is this having this
blue outline questions on Github.

170
00:09:55.966 --> 00:09:57.758
It was not my favorite time.

171
00:09:57.758 --> 00:09:59.307
[LAUGH]

