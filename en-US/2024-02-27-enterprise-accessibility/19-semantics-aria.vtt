WEBVTT

1
00:00:00.090 --> 00:00:03.760
I have to say it, if you're building
a JavaScript heavy application,

2
00:00:03.760 --> 00:00:05.360
you have to use semantic HTML.

3
00:00:05.360 --> 00:00:08.610
It's kind of some of the worst
offenders I've seen.

4
00:00:08.610 --> 00:00:11.940
Just like when everything can be a div,
it will be a div.

5
00:00:11.940 --> 00:00:12.980
But we can do better.

6
00:00:12.980 --> 00:00:13.773
We have spent so

7
00:00:13.773 --> 00:00:18.940
much time already talking about semantics
that you should already have some ideas.

8
00:00:18.940 --> 00:00:20.288
And here's another reason.

9
00:00:20.288 --> 00:00:24.568
It's more pragmatic to use HTML because
you don't have to recreate everything.

10
00:00:24.568 --> 00:00:26.808
It's like saves time and money,
and who doesn't love that?

11
00:00:27.858 --> 00:00:33.488
The select element can do a lot, probably
more features than we even realize.

12
00:00:33.488 --> 00:00:37.564
The button element is perfect example
of something that's powerful and

13
00:00:37.564 --> 00:00:38.508
simple as well.

14
00:00:39.958 --> 00:00:43.949
So we want to create structure and
use the right element for the job, so

15
00:00:43.949 --> 00:00:48.912
just another plug on checking MDN,
even when you're writing components.

16
00:00:48.912 --> 00:00:53.265
I mean, even more so, so
that those components bake in things that

17
00:00:53.265 --> 00:00:59.331
are accessible, so we should use headings,
landmarks, lists, figures, data tables for

18
00:00:59.331 --> 00:01:04.106
tabular data, not for layout [LAUGH] and
more to add semantic structure.

19
00:01:04.106 --> 00:01:05.709
So this is essential for

20
00:01:05.709 --> 00:01:10.266
users of assistive technologies
using buttons and links.

21
00:01:10.266 --> 00:01:13.026
So here's the call out for buttons.

22
00:01:13.026 --> 00:01:17.056
This means toggling UI components and
being part of forms.

23
00:01:17.056 --> 00:01:21.154
Links are for navigation and they need
an href attribute to be accessible or

24
00:01:21.154 --> 00:01:24.092
reachable, and
there's plenty of other elements.

25
00:01:24.092 --> 00:01:28.750
So as tech leads, we wanna encourage
our teammates to learn about HTML and

26
00:01:28.750 --> 00:01:31.172
use it to its fullest potential.

27
00:01:31.172 --> 00:01:33.697
It's kind of like a teaching
moment that we can say hey,

28
00:01:33.697 --> 00:01:35.322
is there a better element for that?

29
00:01:35.322 --> 00:01:36.528
I don't actually know.

30
00:01:36.528 --> 00:01:38.952
Let's do some research real quick.

31
00:01:38.952 --> 00:01:40.908
Let's go look at MDN and see,

32
00:01:40.908 --> 00:01:44.755
is there an attribute that
would really help out for this?

33
00:01:44.755 --> 00:01:46.931
This is a read-only form control.

34
00:01:46.931 --> 00:01:49.871
Let's make it into a native input
instead of some custom thing.

35
00:01:50.951 --> 00:01:54.753
So that's a good kind of a gentle
push in the right direction and

36
00:01:54.753 --> 00:01:56.271
when you are a tech lead.

37
00:01:56.271 --> 00:01:59.451
And then keep that
rendered output in mind.

38
00:01:59.451 --> 00:02:02.800
What are all these components
rendering when they all come together?

39
00:02:02.800 --> 00:02:08.650
Are there a bunch of wrapper elements
that are adding non-standard attributes?

40
00:02:08.650 --> 00:02:13.554
React does complain about those luckily,
but we want to kind of check every so

41
00:02:13.554 --> 00:02:16.798
often to make sure our
lists are well-formed, and

42
00:02:16.798 --> 00:02:22.720
they don't have a bunch of extra stuff
that doesn't make standard HTML happy.

43
00:02:22.720 --> 00:02:26.734
And we can do that because just by
checking our source, running acts, and

44
00:02:26.734 --> 00:02:30.619
then flipping over to the dev tool side or
the element inspector side and

45
00:02:30.619 --> 00:02:33.686
just kinda like do a little
health check of your markup.

46
00:02:35.716 --> 00:02:40.596
And make sure you understand ARIA before
using it, so one more plug for that.

47
00:02:40.596 --> 00:02:43.194
Just it's so easy to slap it on there.

48
00:02:43.194 --> 00:02:45.695
And if you don't have
the workflow to test it,

49
00:02:45.695 --> 00:02:50.554
that's how really broken things can
ship when we don't even know about it.

50
00:02:50.554 --> 00:02:52.804
So, yeah, and
there isn't always great support.

51
00:02:52.804 --> 00:02:58.924
So we looked at ARIA, or
the allysupport.io, A11Y.

52
00:02:58.924 --> 00:03:04.196
It is pretty effective at at least
sharing if things are not well supported.

53
00:03:05.206 --> 00:03:07.972
There are some ARIA attributes
that were proposed but

54
00:03:07.972 --> 00:03:11.026
never really went anywhere
like ARIA grabbed.

55
00:03:11.026 --> 00:03:16.406
There were some drag and drop proposals
for ARIA that just never went anywhere.

56
00:03:16.406 --> 00:03:19.357
But if you didn't ever look it up,
you might just go, yeah,

57
00:03:19.357 --> 00:03:21.419
I'm just going to add
ARIA grab onto stuff,

58
00:03:21.419 --> 00:03:24.905
and it's really just kind of pointless
because it doesn't do anything.

59
00:03:24.905 --> 00:03:31.715
It might not hurt anything, but we don't
want to just use it and hope for the best.

60
00:03:31.715 --> 00:03:36.353
So if you can use,
this is very important, actually.

61
00:03:36.353 --> 00:03:40.495
The rules of ARIA,
share these with your coworkers.

62
00:03:40.495 --> 00:03:44.632
If you're really trying to convince
someone off the ledge of those putting

63
00:03:44.632 --> 00:03:48.848
ARIA on everything, the rules of ARIA,
I did not come up with these myself.

64
00:03:48.848 --> 00:03:50.348
They are from the W3C and

65
00:03:50.348 --> 00:03:54.007
one of their kind of supporting
non-normative documents.

66
00:03:54.007 --> 00:03:57.608
But that just means it's not as
legally binding as things like

67
00:03:57.608 --> 00:04:01.018
the Web Content Accessibility Guidelines.

68
00:04:01.018 --> 00:04:04.728
But they say, great advice,
if you can use a native HTML element or

69
00:04:04.728 --> 00:04:08.838
attribute with the semantics and
behavior you require already built in,

70
00:04:08.838 --> 00:04:12.614
instead of repurposing an element and
adding an ARIA role, state,

71
00:04:12.614 --> 00:04:15.491
or property and
making it accessible, then do so.

72
00:04:17.311 --> 00:04:20.731
Do not change some native semantics
unless you really have to.

73
00:04:20.731 --> 00:04:25.190
So that's like if we talked
over the break about whether to

74
00:04:25.190 --> 00:04:28.657
mark up a sidebar with a nav element or
a list.

75
00:04:30.167 --> 00:04:34.590
I said use both because the nav
element will be a landmark, and

76
00:04:34.590 --> 00:04:38.647
then the list its purpose
is to group lists of items.

77
00:04:38.647 --> 00:04:40.682
So they have different purposes, and

78
00:04:40.682 --> 00:04:45.125
if we use both elements then they can
each keep their respective roles.

79
00:04:45.125 --> 00:04:47.865
Another example would be
the ARIA live attributes.

80
00:04:47.865 --> 00:04:51.684
Those exist so that you can put them
on things that already have roles.

81
00:04:51.684 --> 00:04:53.190
Because there's role status.

82
00:04:53.190 --> 00:04:54.614
That does the same thing,

83
00:04:54.614 --> 00:04:58.245
but it would have to replace a role
when an element already has one.

84
00:04:59.775 --> 00:05:03.959
So the third rule, all interactive ARIA
controls must be usable with the keyboard.

85
00:05:03.959 --> 00:05:06.399
That's a pretty good one.

86
00:05:06.399 --> 00:05:09.305
Number 4,
do not use role of presentation or

87
00:05:09.305 --> 00:05:11.989
ARIA hidden true on a focusable element.

88
00:05:11.989 --> 00:05:16.495
So that creates those ghost controls that
we talked about a little bit earlier with

89
00:05:16.495 --> 00:05:18.869
ARIA hidden, that pitfall.

90
00:05:18.869 --> 00:05:23.719
We tend to use inert to get around that,
to make sure we're not missing anything.

91
00:05:23.719 --> 00:05:27.358
And then, number five 5, all interactive
elements must have an accessible name.

92
00:05:27.358 --> 00:05:29.031
Hey, we know that one.

93
00:05:29.031 --> 00:05:35.837
[LAUGH] I don't normally just read stuff
off the screen, but rules are rules.

94
00:05:35.837 --> 00:05:39.638
[LAUGH] So what to look for
in a framework?

95
00:05:39.638 --> 00:05:42.228
This is a question that you had earlier.

96
00:05:42.228 --> 00:05:46.085
When you're choosing a Javascript
framework or a library like React, Vue,

97
00:05:46.085 --> 00:05:50.229
Svelte, whatever happens to pop up,
we have new frameworks all the time.

98
00:05:50.229 --> 00:05:54.019
There are some things to look for
when it comes to accessibility.

99
00:05:54.019 --> 00:05:57.429
Support for semantic HTML and
ARIA, does it get in your way?

100
00:05:57.429 --> 00:06:00.089
Is it difficult to do the right thing?

101
00:06:00.089 --> 00:06:02.209
Most of the libraries have
gotten pretty good at this.

102
00:06:02.209 --> 00:06:04.132
They don't get in your way too much.

103
00:06:04.132 --> 00:06:08.376
But they don't necessarily discourage you
from doing anti-patterns like putting

104
00:06:08.376 --> 00:06:12.252
click events on div buttons and
things, cuz they don't really know.

105
00:06:12.252 --> 00:06:13.162
It's hard for them to tell.

106
00:06:14.202 --> 00:06:19.062
But just make sure that you
can write accessible HTML.

107
00:06:19.062 --> 00:06:22.567
The routing libraries, does the routing
library give you any hooks for

108
00:06:22.567 --> 00:06:23.453
accessibility?

109
00:06:23.453 --> 00:06:26.401
Do they have accessibility documentation?

110
00:06:26.401 --> 00:06:27.531
Is there a way to do it?

111
00:06:29.211 --> 00:06:31.021
We talked a lot about that.

112
00:06:31.021 --> 00:06:36.981
Is there documentation and community
around the framework for accessibility?

113
00:06:36.981 --> 00:06:40.715
If you do a kind of gut check in
their issue list on GitHub, or

114
00:06:40.715 --> 00:06:43.428
I guess that's mostly were open sources.

115
00:06:43.428 --> 00:06:47.861
But, if you go through their issues and
search for accessibility,

116
00:06:47.861 --> 00:06:49.658
how many issues are open?

117
00:06:49.658 --> 00:06:50.688
Have they closed some?

118
00:06:50.688 --> 00:06:52.948
Have they been nice about it?

119
00:06:52.948 --> 00:06:54.748
What's the culture?

120
00:06:54.748 --> 00:06:57.288
You can kind of do a little
bit of investigating.

121
00:06:59.238 --> 00:07:01.718
Have things languished for a long time?

122
00:07:01.718 --> 00:07:03.348
And then are there testing tools?

123
00:07:03.348 --> 00:07:08.438
It's really helpful to be able to have
all the testing tools at your disposal.

124
00:07:08.438 --> 00:07:09.728
In React, we're pretty blessed.

125
00:07:09.728 --> 00:07:11.628
We have a lot of great testing tools.

126
00:07:11.628 --> 00:07:15.957
There's others,
like testing library has flavors for

127
00:07:15.957 --> 00:07:19.098
more than just React, so that's cool.

128
00:07:20.538 --> 00:07:22.858
But then, kind of regardless,
like, think like a user.

129
00:07:22.858 --> 00:07:25.535
They're not gonna care
how something's built.

130
00:07:25.535 --> 00:07:26.925
They're gonna care if it works or not.

131
00:07:26.925 --> 00:07:29.119
So the rendered output
is what's important.

