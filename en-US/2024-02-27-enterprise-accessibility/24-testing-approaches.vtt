WEBVTT

1
00:00:00.270 --> 00:00:01.759
So some approaches for testing.

2
00:00:01.759 --> 00:00:06.815
Now, there's multiple types of tests
that could apply to any one component or

3
00:00:06.815 --> 00:00:08.280
group of components.

4
00:00:09.730 --> 00:00:12.060
And of course,
people have different approaches.

5
00:00:12.060 --> 00:00:16.420
Your approach might be dictated by
what tooling is available to you.

6
00:00:16.420 --> 00:00:21.858
So kind of use what you can and
find how it fits in, that's totally fine.

7
00:00:21.858 --> 00:00:23.898
And sometimes these lines are blurry.

8
00:00:23.898 --> 00:00:24.830
In my opinion,

9
00:00:24.830 --> 00:00:28.920
just you should use whatever tooling
helps you get the job done, and

10
00:00:28.920 --> 00:00:33.819
it's not as important whether it's
integration testing or end to end testing.

11
00:00:33.819 --> 00:00:37.364
Well, we're using Jest, but
they're kinda more integration tests,

12
00:00:37.364 --> 00:00:41.332
like we're using Storybook for whole
pages, it's whatever gets the job done.

13
00:00:41.332 --> 00:00:47.505
Whatever makes our jobs easier,
makes our data so it's not destructive and

14
00:00:47.505 --> 00:00:52.826
we can have repeatable test cases,
and just make the job easier.

15
00:00:53.866 --> 00:00:56.739
So there's linting, with ESLint,

16
00:00:56.739 --> 00:01:01.451
ESLint-Plugin-JSX -A11y for
React projects.

17
00:01:01.451 --> 00:01:03.441
And that one's pretty standard.

18
00:01:03.441 --> 00:01:07.571
There's also an Axe Linter,
which uses the same engine as Axe core and

19
00:01:07.571 --> 00:01:09.601
the Axe extensions.

20
00:01:09.601 --> 00:01:14.021
Those are nice because you can
check issues early in development.

21
00:01:14.021 --> 00:01:18.339
I think where they're challenging is they
sometimes have some false positives that

22
00:01:18.339 --> 00:01:21.030
you're like, well,
that's not really an issue.

23
00:01:21.030 --> 00:01:24.344
The linter couldn't really tell
whether that was an issue or not, so

24
00:01:24.344 --> 00:01:26.345
you might need to configure your linter so

25
00:01:26.345 --> 00:01:29.163
that it doesn't just turn into
noise that people ignore.

26
00:01:30.813 --> 00:01:36.737
For unit tests, those can be helpful for
internal component APIs and logic.

27
00:01:36.737 --> 00:01:41.651
You wanna kind of isolate these components
from the outside world so they're not

28
00:01:41.651 --> 00:01:46.564
gonna call out to the network, maybe not
test other components in conjunction,

29
00:01:46.564 --> 00:01:49.076
but hey, do what you need to do.

30
00:01:49.076 --> 00:01:51.646
So Jest is a modern tool.

31
00:01:51.646 --> 00:01:54.044
Jest DOM is pretty essential.

32
00:01:54.044 --> 00:01:58.684
And then Testing Library, those
are kind of the trifecta these days for

33
00:01:58.684 --> 00:02:01.474
accessibility unit testing.

34
00:02:01.474 --> 00:02:02.249
They are amazing.

35
00:02:02.249 --> 00:02:07.161
I've tried a lot of accessibility tools
over the years, and I've been paying

36
00:02:07.161 --> 00:02:12.304
very close attention to how the browser
works and what the tool is doing.

37
00:02:12.304 --> 00:02:13.494
We are in the best time for

38
00:02:13.494 --> 00:02:16.342
testing tools we've ever been
with what we have right now.

39
00:02:16.342 --> 00:02:17.614
It's awesome.

40
00:02:17.614 --> 00:02:22.402
For example, if you use Jest in Testing
Library to try and send focus to a div,

41
00:02:22.402 --> 00:02:26.088
like you're gonna write
an accessibility test to do TDD and

42
00:02:26.088 --> 00:02:30.829
capture that failure, it will fail
because that element is not focusable.

43
00:02:30.829 --> 00:02:32.162
That's what we want.

44
00:02:32.162 --> 00:02:36.765
Because we can do true test-driven
development style and get a test that

45
00:02:36.765 --> 00:02:41.530
fails, just like the issue, we capture it,
reproduce it, fix the test.

46
00:02:41.530 --> 00:02:45.215
We can do it for accessibility
a lot easier than we used to.

47
00:02:45.215 --> 00:02:46.612
So check those out.

48
00:02:46.612 --> 00:02:51.436
Component testing is
another way to go about it.

49
00:02:51.436 --> 00:02:53.150
There's Cypress Component Testing.

50
00:02:53.150 --> 00:02:55.949
If you already use Cypress and
you like their API,

51
00:02:55.949 --> 00:02:58.088
that's totally worth checking out.

52
00:02:58.088 --> 00:03:02.772
You can use it for single components or
groups of components,

53
00:03:02.772 --> 00:03:08.938
whereas regular end-to-end Cypress
is more for whole groups of pages.

54
00:03:08.938 --> 00:03:11.688
And then don't sleep on Storybook.

55
00:03:11.688 --> 00:03:15.832
I'm kind of obsessed with it
because it is so awesome.

56
00:03:15.832 --> 00:03:20.994
I joined a new team, they had it set up,
but they kinda weren't using it,

57
00:03:20.994 --> 00:03:25.905
but we also have data that we have
to get from a client, people client,

58
00:03:25.905 --> 00:03:29.096
and it's stuff that is destructive action.

59
00:03:29.096 --> 00:03:33.192
To test that flow, I have to hit the big
button, and then that data's gone, and

60
00:03:33.192 --> 00:03:34.488
we have to get a new data.

61
00:03:34.488 --> 00:03:36.778
That's pretty tough.

62
00:03:36.778 --> 00:03:41.548
So Storybook allows us to mock that data,
have our components not be

63
00:03:41.548 --> 00:03:46.567
behind a VPN either, that's kinda nice,
cuz I didn't have access for

64
00:03:46.567 --> 00:03:52.002
a week or two, but I actually was able
to ship fixes using Storybook only.

65
00:03:52.002 --> 00:03:52.800
It's awesome.

66
00:03:52.800 --> 00:03:56.017
And so now my whole team is like,
we love Storybook.

67
00:03:56.017 --> 00:03:57.648
It's like music to my ears.

68
00:03:57.648 --> 00:04:00.452
[LAUGH] So it can be very helpful.

69
00:04:00.452 --> 00:04:05.303
Even if you're not building a capital D,
capital S design system,

70
00:04:05.303 --> 00:04:10.678
just find ways to make these tools work
for you so that it's easier to test.

71
00:04:10.678 --> 00:04:16.006
Sometimes these things are faster too, you
get hot reload, you get all the latest and

72
00:04:16.006 --> 00:04:20.742
greatest things without some of
the constraints of your full environment,

73
00:04:20.742 --> 00:04:21.780
it's awesome.

74
00:04:21.780 --> 00:04:25.573
So then there's integration testing.

75
00:04:25.573 --> 00:04:27.835
Cypress or WebdriverIO, I mean,

76
00:04:27.835 --> 00:04:33.258
you can kind of bend those tools to
your will for all kinds of purposes.

77
00:04:33.258 --> 00:04:38.920
Integration testing and end-to-end testing
are where they are intended to be used.

78
00:04:38.920 --> 00:04:43.127
And I think integration testing is
when you integrate multiple components

79
00:04:43.127 --> 00:04:44.292
together.

80
00:04:44.292 --> 00:04:48.555
For focus management cases, like say
I have two components that kind of,

81
00:04:48.555 --> 00:04:52.953
you send focus from one to another, that
would be a bit outside of the scope of

82
00:04:52.953 --> 00:04:56.152
a unit test cuz they're
not isolated anymore.

83
00:04:56.152 --> 00:04:57.774
But with integration testing,

84
00:04:57.774 --> 00:05:00.846
maybe with Cypress component testing too,
I could do this.

85
00:05:00.846 --> 00:05:05.073
But I could test to make sure that
focus is caught in the right place,

86
00:05:05.073 --> 00:05:07.609
it moves around the app in the right way.

87
00:05:07.609 --> 00:05:09.725
And then there's end-to-end testing,

88
00:05:09.725 --> 00:05:13.083
which I've heard is kind of
synonymous with integration testing.

89
00:05:13.083 --> 00:05:15.500
There isn't always a clear distinction.

90
00:05:15.500 --> 00:05:20.066
The tools for integration testing
are usually the same for end-to-end.

91
00:05:20.066 --> 00:05:23.808
Lots of organizations call it
something slightly different.

92
00:05:23.808 --> 00:05:25.855
It's basically for whole pages.

93
00:05:25.855 --> 00:05:29.795
And it's nice to have these tools, say,
you have kind of a niche JavaScript

94
00:05:29.795 --> 00:05:33.388
framework, maybe you rolled your own or
something.

95
00:05:33.388 --> 00:05:37.172
You can use Cypress,
and maybe WebdriverIO,

96
00:05:37.172 --> 00:05:40.498
kind of with agnostic frameworks.

97
00:05:40.498 --> 00:05:46.162
So it's a really great tool to sort
bolt on to any frontend tech stack,

98
00:05:46.162 --> 00:05:51.346
because you don't need ESLint plugins for
every single thing.

99
00:05:51.346 --> 00:05:55.460
They might exist, probably not when
you've rolled your own CMS and

100
00:05:55.460 --> 00:05:58.647
JavaScript framework, but
it can be pretty handy.

101
00:06:00.696 --> 00:06:05.570
And then I have some things about
configuring tools, like questions to ask.

102
00:06:05.570 --> 00:06:07.128
How is the UI rendered?

103
00:06:07.128 --> 00:06:10.006
We talked about hybrid apps,
you've got some web views.

104
00:06:10.006 --> 00:06:13.941
Maybe those could be covered in Storybook,
but maybe you need other tooling for

105
00:06:13.941 --> 00:06:15.008
the mobile wrapper.

106
00:06:16.168 --> 00:06:20.398
Can you inject tooling for
accessibility tests into that context?

107
00:06:20.398 --> 00:06:24.286
So Cypress args we're gonna look at,
that tool will handle injecting args

108
00:06:24.286 --> 00:06:27.137
into the web context for
us, and that's pretty cool.

109
00:06:28.247 --> 00:06:29.489
How is your code bundled?

110
00:06:29.489 --> 00:06:32.640
Does it use webpack or
Parcel or something else?

111
00:06:32.640 --> 00:06:38.217
Cuz sometimes those configs are where you
have to look to configure your tooling.

112
00:06:38.217 --> 00:06:39.782
You might have a team that does that.

113
00:06:39.782 --> 00:06:41.091
Smaller companies, you might not.

114
00:06:41.091 --> 00:06:45.813
Can you make changes to the infrastructure
for accessibility tooling, or will you

115
00:06:45.813 --> 00:06:50.076
have to make do with what's already there,
like my story with user event?

116
00:06:50.076 --> 00:06:54.564
I think right now, the project I'm on is
locked into a much older version, and

117
00:06:54.564 --> 00:06:55.992
I'm gonna have to wait.

118
00:06:55.992 --> 00:06:59.897
[LAUGH] Someday, I'm gonna upgrade that.

119
00:06:59.897 --> 00:07:01.501
And just sort of funny,

120
00:07:01.501 --> 00:07:05.925
who do I have to talk to to get
a configuration change around here?

121
00:07:05.925 --> 00:07:06.671
Anyone?

122
00:07:06.671 --> 00:07:10.977
[LAUGH] All right, I'm a nerd.

123
00:07:10.977 --> 00:07:15.298
&gt;&gt; Any experience specifically with
Playwright or any things to look out for

124
00:07:15.298 --> 00:07:15.999
with that?

125
00:07:15.999 --> 00:07:18.487
&gt;&gt; Actually, yeah,
I should put that on there.

126
00:07:18.487 --> 00:07:24.563
So Playwright, there's another one,
too, for snapshot tests.

127
00:07:24.563 --> 00:07:31.462
And I think they can be super handy for
accessibility snapshots.

128
00:07:31.462 --> 00:07:33.270
Visual snapshots can be useful.

129
00:07:33.270 --> 00:07:39.027
I've seen teams disable those cuz they
end up being real blocking to progress.

130
00:07:39.027 --> 00:07:43.163
So yeah, I think there's some
really powerful APIs there,

131
00:07:43.163 --> 00:07:45.362
like being able to test things.

132
00:07:45.362 --> 00:07:49.653
I think you can use Playwright more
effectively to test Chrome extensions too.

133
00:07:50.693 --> 00:07:55.313
So there's some really powerful APIs that
you just don't get with other tools.

134
00:07:55.313 --> 00:07:58.171
So definitely worth checking out.

135
00:07:58.171 --> 00:08:02.794
&gt;&gt; I always thought that testing
library was built with Jest.

136
00:08:02.794 --> 00:08:06.502
Are those two just two
separate testing options?

137
00:08:06.502 --> 00:08:08.380
&gt;&gt; They are technically separate.

138
00:08:08.380 --> 00:08:11.488
I think they really do work well together,
but

139
00:08:11.488 --> 00:08:15.325
testing library has all of
these different flavors now.

140
00:08:15.325 --> 00:08:20.154
If I go to testing library,
I think under here, so Core API,

141
00:08:20.154 --> 00:08:25.957
they have all the school stuff like
ByRole, ByLabelText, ByAltText.

142
00:08:25.957 --> 00:08:30.421
I mean, Kent C.Dodds,
when he writes about testing library,

143
00:08:30.421 --> 00:08:35.641
his gotchas and things to watch out for
are use by role instead of by test ID.

144
00:08:35.641 --> 00:08:41.380
They're really making accessibility
testing central to their recommendations,

145
00:08:41.380 --> 00:08:43.552
which love to see it.

146
00:08:43.552 --> 00:08:49.642
When we go down here to,
where are the, yeah, frameworks.

147
00:08:49.642 --> 00:08:53.997
So we have DOM, React,
Reason, Native, Vue,

148
00:08:53.997 --> 00:09:00.289
all of these flavors that don't
necessarily require Jest, I think.

149
00:09:00.289 --> 00:09:03.190
So-
&gt;&gt; Also, there's a slightly more

150
00:09:03.190 --> 00:09:08.104
recent test runner called VTest that's,
it's very similar to Jest, but

151
00:09:08.104 --> 00:09:13.190
you can kinda take Jest out, plug testing
library in and it basically works.

152
00:09:13.190 --> 00:09:14.696
&gt;&gt; Okay-
&gt;&gt; Love that, so

153
00:09:14.696 --> 00:09:16.834
much easier than it used to be.

154
00:09:16.834 --> 00:09:19.214
So, yeah, probably another
tool that we could add, too.

155
00:09:19.214 --> 00:09:23.804
So under ecosystem, there's all these
other extensions and things as well.

156
00:09:25.094 --> 00:09:28.804
And there's been so
many framework libraries over the years,

157
00:09:28.804 --> 00:09:33.434
like Selenium WebDriver, and Jasmine,
and Mocha, and Sinon, and Enzyme.

158
00:09:33.434 --> 00:09:35.017
Just, we've evolved, right?

159
00:09:35.017 --> 00:09:37.682
I think we're in a golden era of testing,
also.

