WEBVTT

1
00:00:00.000 --> 00:00:04.777
So that is aggregation and sometimes
very useful to answer these big picture

2
00:00:04.777 --> 00:00:09.641
questions, like do we have more users
on mobile or on desktop, for example.

3
00:00:09.641 --> 00:00:16.905
But when we look at this aggregated chart,
we're hiding a lot of information.

4
00:00:16.905 --> 00:00:21.187
By nature of aggregation,
we're obscuring a lot of the details and

5
00:00:21.187 --> 00:00:25.917
the finer points in our dataset to just
bring out the big picture of, okay,

6
00:00:25.917 --> 00:00:29.485
total number of users, which is bigger.

7
00:00:29.485 --> 00:00:33.501
However, earlier, we talked about
things like, for example, for

8
00:00:33.501 --> 00:00:36.420
future development or
for performance reasons.

9
00:00:36.420 --> 00:00:41.790
I might need to dig into the nitty
gritty and ask myself, okay, based

10
00:00:41.790 --> 00:00:48.270
on my usage data for my site, what are
the most common resolutions that we see?

11
00:00:48.270 --> 00:00:50.600
Doesn't matter if they're on tablet or
desktop, right?

12
00:00:50.600 --> 00:00:54.075
Probably we're gonna have not so
much overlap between mobile and desktop,

13
00:00:54.075 --> 00:00:55.620
let's say.

14
00:00:55.620 --> 00:01:01.240
What are the main widths, let's say, that
folks are browsing our site in so that I

15
00:01:01.240 --> 00:01:06.952
can make sure I have really strong designs
for those browser widths, for example.

16
00:01:06.952 --> 00:01:11.320
Or what are the aspect ratios
that are most commonly used?

17
00:01:11.320 --> 00:01:14.224
Maybe the width itself
doesn't really matter, but

18
00:01:14.224 --> 00:01:17.920
I wanna make sure that my site looks
really great at that particular

19
00:01:17.920 --> 00:01:21.160
aspect ratio that we see people
using over and over again.

20
00:01:21.160 --> 00:01:25.458
Or vice versa like, for example,
which resolutions do we see folks using on

21
00:01:25.458 --> 00:01:29.959
multiple device types, which I would miss
if I was only aggregating the data and

22
00:01:29.959 --> 00:01:31.924
breaking it down by device types.

23
00:01:31.924 --> 00:01:34.799
I would miss that pattern of, actually,

24
00:01:34.799 --> 00:01:38.020
folks are browsing really
narrow on desktop.

25
00:01:38.020 --> 00:01:41.324
I don't know, maybe they keep
the window open as a sidebar on their

26
00:01:41.324 --> 00:01:44.190
side of their desktop or
something like that.

27
00:01:44.190 --> 00:01:49.050
So by digging into the details,
we can answer different questions than

28
00:01:49.050 --> 00:01:54.120
the big picture questions that we
can answer with those aggregations.

29
00:01:54.120 --> 00:01:56.080
So we wanna be able to do both.

30
00:01:56.080 --> 00:02:00.117
So we've just looked at how to aggregate
data together using those group

31
00:02:00.117 --> 00:02:01.300
transforms.

32
00:02:01.300 --> 00:02:07.250
And there is an analogous transform
in plot, analogous to the group y.

33
00:02:07.250 --> 00:02:10.443
The group transform works for
categorical variables, like we said.

34
00:02:10.443 --> 00:02:16.360
There is an analogous transform called
bin that works on continuous variables.

35
00:02:16.360 --> 00:02:19.585
So if you have, let's say,
a numeric range,

36
00:02:19.585 --> 00:02:23.805
a numeric series of values that
you wanna be aggregating by,

37
00:02:23.805 --> 00:02:29.540
you might wanna bin it into, I don't know,
hundreds or thousands of intervals.

38
00:02:29.540 --> 00:02:32.390
So there is an analogous grouping for
that.

39
00:02:32.390 --> 00:02:36.713
But now we're gonna move on from
aggregation to digging into the details.

40
00:02:36.713 --> 00:02:41.110
So let's try to answer some of these
questions like which are the most common

41
00:02:41.110 --> 00:02:44.132
aspect ratios,
which are the most common widths and

42
00:02:44.132 --> 00:02:47.377
heights, whether across one device type or
multiple.

43
00:02:47.377 --> 00:02:51.487
And we're gonna use a dot plot or
a scatter plot is another word for

44
00:02:51.487 --> 00:02:53.216
that to try to answer this.

45
00:02:53.216 --> 00:02:58.480
So what we've got in our next
exercise is kind of the basic Canvas,

46
00:02:58.480 --> 00:03:01.500
as it were, for a scatter plot.

47
00:03:01.500 --> 00:03:06.828
So this has a sort of preconfigured
some general settings for

48
00:03:06.828 --> 00:03:12.791
this plot, like for example,
we have a grid on both the x and y axes.

49
00:03:12.791 --> 00:03:16.856
And we have a certain value range for

50
00:03:16.856 --> 00:03:23.233
each of these axes that might
not be the entire dataset.

51
00:03:23.233 --> 00:03:28.208
For example, there might be some
resolutions out there that are more

52
00:03:28.208 --> 00:03:32.254
than 4,000, I don't know, 200 pixels wide.

53
00:03:32.254 --> 00:03:33.500
But in our case,

54
00:03:33.500 --> 00:03:39.130
we're just gonna look at the ones
that fit in this span of the data.

55
00:03:39.130 --> 00:03:42.312
So this is all configured here, again,

56
00:03:42.312 --> 00:03:46.090
in the options passed into
our call to dot plot.

57
00:03:46.090 --> 00:03:49.505
So again, we have that default width
setup to make sure that this plot extends

58
00:03:49.505 --> 00:03:51.630
the full width of the cell.

59
00:03:51.630 --> 00:03:54.810
We are scaling the height
based on the width so

60
00:03:54.810 --> 00:03:59.310
that it's kind of two to
one width to height ratio.

61
00:03:59.310 --> 00:04:02.694
And then we're setting up the x-axis and

62
00:04:02.694 --> 00:04:07.928
the y-axis with grids and
with a slightly constrained domain.

63
00:04:07.928 --> 00:04:10.435
Meaning, the set of values
that we're gonna be

64
00:04:10.435 --> 00:04:12.638
visualizing from the original dataset.

65
00:04:12.638 --> 00:04:17.010
That domain of input values from the data
space is gonna be slightly constrained

66
00:04:17.010 --> 00:04:19.829
from what we actually see
represented in the data.

67
00:04:19.829 --> 00:04:23.398
And again, plot's default is to
look at the values in your data and

68
00:04:23.398 --> 00:04:25.130
make sure it can fit all of them.

69
00:04:25.130 --> 00:04:27.660
So it will set up your axes accordingly.

70
00:04:27.660 --> 00:04:33.160
Here, we just wanna tell it to kinda
cut off after a certain point.

71
00:04:33.160 --> 00:04:37.600
And there's one other thing in here which
we'll talk about later around the opacity

72
00:04:37.600 --> 00:04:41.150
scale, which we're gonna be using for
the next exercise.

73
00:04:41.150 --> 00:04:46.599
So your task here is to take
this starting point and

74
00:04:46.599 --> 00:04:54.280
add some code into the call to
Plot.dot that creates a scatter plot.

75
00:04:54.280 --> 00:04:56.927
So here we're using the dot mark,

76
00:04:56.927 --> 00:05:01.413
which as you might gather is
essentially little circles.

77
00:05:01.413 --> 00:05:06.803
And we're going to be trying to set
up the x and y axes or the x and

78
00:05:06.803 --> 00:05:12.197
y channels to convey the width
on the x-axis horizontally and

79
00:05:12.197 --> 00:05:14.600
the height on the y-axis.

80
00:05:14.600 --> 00:05:19.449
And then see if you can play around
with some of the other channels to

81
00:05:19.449 --> 00:05:21.880
visualize the device category.

82
00:05:21.880 --> 00:05:23.860
And last time, we looked at some users.

83
00:05:23.860 --> 00:05:26.971
Why don't we look at the number
of sessions this time?

84
00:05:26.971 --> 00:05:30.791
So that we can see how many individual
browsing sessions we saw for

85
00:05:30.791 --> 00:05:33.770
each width and height in our dataset.

86
00:05:33.770 --> 00:05:37.654
And then, again, if you want to
get really ahead of the game,

87
00:05:37.654 --> 00:05:41.391
try to add some tooltips to add
a little bit more detail about

88
00:05:41.391 --> 00:05:44.635
each of the dots that we're
gonna be drawing here.

89
00:05:44.635 --> 00:05:50.080
So this is now we're gonna stretch
the plot muscles we've been working out so

90
00:05:50.080 --> 00:05:54.434
far and we're gonna try to map
width against height on the x and

91
00:05:54.434 --> 00:05:58.155
y axes using this kind of
layout as a starting point.

92
00:05:58.155 --> 00:06:00.299
But feel free to tweak it and
see what changes.

