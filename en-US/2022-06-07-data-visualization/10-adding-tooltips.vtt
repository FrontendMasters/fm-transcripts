WEBVTT

1
00:00:00.090 --> 00:00:05.580
For our last exercise,
we were trying to add custom tooltips.

2
00:00:05.580 --> 00:00:08.548
So let us take a look in the Hints button.

3
00:00:08.548 --> 00:00:12.173
If we expand that,
we can see the syntax for

4
00:00:12.173 --> 00:00:16.829
passing in a custom function
to one of these channels.

5
00:00:16.829 --> 00:00:20.545
And this will work for
all kinds of different channels, but

6
00:00:20.545 --> 00:00:25.320
it's especially used for, I think,
for these text based ones like title.

7
00:00:25.320 --> 00:00:31.199
So here, we can see that if we specify
just a little JavaScript arrow function,

8
00:00:31.199 --> 00:00:35.050
this is a quick easy way
to write this in line.

9
00:00:35.050 --> 00:00:38.807
You could also imagine, for example,
elsewhere you've defined a complex

10
00:00:38.807 --> 00:00:41.050
function that you want
to then be passing in.

11
00:00:41.050 --> 00:00:42.045
That would also be fine.

12
00:00:42.045 --> 00:00:45.649
But in this case, we're gonna have
a pretty quick little function.

13
00:00:45.649 --> 00:00:47.831
So an arrow function is a great choice.

14
00:00:47.831 --> 00:00:51.462
So commas, so this was my solution,

15
00:00:51.462 --> 00:00:56.979
yours might look different,
was to pass in a function.

16
00:00:56.979 --> 00:01:02.064
And you'll see this convention
of kind of naming the input

17
00:01:02.064 --> 00:01:08.082
to these little functions that take
in data points from the data set,

18
00:01:08.082 --> 00:01:12.577
naming d for datum, or
data point, what have you.

19
00:01:12.577 --> 00:01:13.634
But this is arbitrary.

20
00:01:13.634 --> 00:01:16.388
You could name it job,
you could name it row,

21
00:01:16.388 --> 00:01:20.430
you could name it my friend the data,
whatever you want.

22
00:01:20.430 --> 00:01:25.121
So in this case,
I am taking in each data point d, and

23
00:01:25.121 --> 00:01:29.630
then returning a string template literal.

24
00:01:29.630 --> 00:01:34.615
You could also be having a string
concatenated together with plus, or

25
00:01:34.615 --> 00:01:39.570
you could be map joining an array
of values, or what have you.

26
00:01:39.570 --> 00:01:43.539
I'm a big fan of these template literals,
so between these backticks,

27
00:01:43.539 --> 00:01:47.896
having kind of a little string template
where then we can insert variables using

28
00:01:47.896 --> 00:01:50.890
this dollar sign curly braces syntax.

29
00:01:50.890 --> 00:01:55.936
And so here,
I've just made a kind of verbose string

30
00:01:55.936 --> 00:02:01.901
of saying the conclusion status
after however long minutes,

31
00:02:01.901 --> 00:02:06.260
and where I'm taking the minutes value,
and

32
00:02:06.260 --> 00:02:11.060
kind of cutting it a little
bit to two places.

33
00:02:11.060 --> 00:02:13.937
So if I Shift+Enter here, and

34
00:02:13.937 --> 00:02:19.478
if our tooltips are not bugging us here,
it's very small.

35
00:02:19.478 --> 00:02:25.251
But now I can see it says
cancelled after 3.10 minutes,

36
00:02:25.251 --> 00:02:29.418
or failure after 3.35 minutes, etc.

37
00:02:29.418 --> 00:02:32.004
If y'all had other solutions,
we'd love to see them.

38
00:02:32.004 --> 00:02:34.515
Feel free to drop those
functions in the chat.

39
00:02:34.515 --> 00:02:38.897
And I think a couple of folks were having
a little difficulty with those tooltips.

40
00:02:38.897 --> 00:02:43.180
We might have run into some kind of
bug and plot, it's entirely possible.

41
00:02:43.180 --> 00:02:45.223
So I will try and collect more data there.

42
00:02:45.223 --> 00:02:46.885
And again, plot is open source.

43
00:02:46.885 --> 00:02:52.087
So if you do ever run into any problems
with it, you can go to the GitHub

44
00:02:52.087 --> 00:02:56.507
repo github.com/observablehq/plot and
file those.

45
00:02:56.507 --> 00:02:59.064
Or maybe look out at
the existing issues and

46
00:02:59.064 --> 00:03:01.772
see if anybody else has
already reported it.

47
00:03:01.772 --> 00:03:06.366
But at this point,
we should have a pretty useful chart.

48
00:03:06.366 --> 00:03:11.242
We've got all kinds of useful
questions answered by this chart.

49
00:03:11.242 --> 00:03:15.937
We have which jobs ran in
which run number answered.

50
00:03:15.937 --> 00:03:20.323
We have what was their conclusion status
just answered with a little bit of

51
00:03:20.323 --> 00:03:25.840
redundancy, which can be helpful here in
both the fill and the stroke encoding.

52
00:03:25.840 --> 00:03:31.390
And we have how long did each test take
to complete, answered by the opacity.

53
00:03:31.390 --> 00:03:36.754
Then we have also what
are the details of each test job run?

54
00:03:36.754 --> 00:03:40.452
In this case, in my solution,
the completion, and

55
00:03:40.452 --> 00:03:43.910
then the duration
abbreviated in our tooltips.

56
00:03:43.910 --> 00:03:48.095
So we also have a little bit of
interactivity already happening,

57
00:03:48.095 --> 00:03:52.510
where if I am interested in a particular
entry, I can hover over it and

58
00:03:52.510 --> 00:03:54.045
get some more details.

59
00:03:55.920 --> 00:03:58.865
So questions so far?

60
00:03:58.865 --> 00:04:03.698
And at the bottom of this worksheet,
you'll see my finished solution, just for

61
00:04:03.698 --> 00:04:04.490
reference.

62
00:04:04.490 --> 00:04:08.658
It's basically the same as what you'll
find in the solution, copy, paste.

63
00:04:08.658 --> 00:04:10.839
But that is just for reference.

64
00:04:10.839 --> 00:04:13.406
In case yours looks slightly different,
that's totally okay.

65
00:04:15.207 --> 00:04:17.610
Anybody got questions at the moment?

66
00:04:19.290 --> 00:04:23.240
&gt;&gt; Yeah, I have a quick question
just about the title option.

67
00:04:23.240 --> 00:04:27.401
Is that just for creating tooltips?

68
00:04:27.401 --> 00:04:32.280
Or are there other effects that we
can cause to that sell on a hover?

69
00:04:32.280 --> 00:04:35.420
&gt;&gt; Are there other interactions
that we could code into this?

70
00:04:35.420 --> 00:04:40.780
Yeah, so for plot, the simplicity
that plot tries to offer is for

71
00:04:40.780 --> 00:04:47.214
it to be flexible enough that you can
create custom visualizations like this,

72
00:04:47.214 --> 00:04:52.490
but high level enough that you
don't have to spend a lot of time.

73
00:04:52.490 --> 00:04:54.559
I mean, as we can see,
we ran through this.

74
00:04:54.559 --> 00:04:56.213
We were going a little bit
slowly cuz we're learning.

75
00:04:56.213 --> 00:04:58.162
But we ran through this
a few lines of code,

76
00:04:58.162 --> 00:05:00.490
we got our very custom visualization.

77
00:05:00.490 --> 00:05:05.985
So the interactivity options with plot are
a little bit more limited than something

78
00:05:05.985 --> 00:05:11.883
like D3, which, for example, is built to
make incredibly customized interactions.

79
00:05:11.883 --> 00:05:16.845
So there are more options for
building interactivity into plot.

80
00:05:16.845 --> 00:05:21.806
For example,
you can have certain state changes

81
00:05:21.806 --> 00:05:25.679
on mouse over, and things like that.

82
00:05:25.679 --> 00:05:30.563
But if you really want to get some super
fancy animations, or other kinds of

83
00:05:30.563 --> 00:05:35.604
intricate interactions going on,
you're probably gonna wanna drop down to

84
00:05:35.604 --> 00:05:41.047
a lower level library that gives you even
more flexibility with customizing that.

85
00:05:41.047 --> 00:05:44.877
And D3 would kind of be
the logical next step from there.

86
00:05:44.877 --> 00:05:47.744
But you can also check out
the plot documentation,

87
00:05:47.744 --> 00:05:49.951
which is linked from these materials.

88
00:05:49.951 --> 00:05:55.153
But it's also on the GitHub repo,
so github.com/observablehq/plot has

89
00:05:55.153 --> 00:06:00.700
all of the API documentation, so you
can see what all the options are there.

90
00:06:00.700 --> 00:06:04.655
But again, if you're trying to make
something really cool with confetti

91
00:06:04.655 --> 00:06:07.268
going off when you hover
over a certain thing, or

92
00:06:07.268 --> 00:06:10.456
what have you, you're gonna
want a more low level flexible

93
00:06:10.456 --> 00:06:14.824
library that supports all kinds of fancy
animations and interactions like D3.

94
00:06:14.824 --> 00:06:18.662
And again, Shirley Wu has some
great courses on Frontend Masters

95
00:06:18.662 --> 00:06:22.587
that are an excellent kind of segue
after this first steps course.

96
00:06:22.587 --> 00:06:27.397
So just to recap what we have covered so
far is some of the basic building blocks

97
00:06:27.397 --> 00:06:32.060
of visualizations in general,
according to the grammar of graphics, and

98
00:06:32.060 --> 00:06:35.510
their implementation in plot,
specifically.

99
00:06:35.510 --> 00:06:37.890
So we've covered marks.

100
00:06:37.890 --> 00:06:42.416
And in particular, we started looking
at this cell mark in the subsequent

101
00:06:42.416 --> 00:06:45.922
exercises that we're gonna
do in our next two projects.

102
00:06:45.922 --> 00:06:48.680
We're going to take a look at
a few different marks as well.

103
00:06:48.680 --> 00:06:53.961
But we saw how we can configure marks with
these options objects that map channels,

104
00:06:53.961 --> 00:06:57.170
encoding channels in the visualization.

105
00:06:57.170 --> 00:07:02.956
So this output in the visual
space to inputs or

106
00:07:02.956 --> 00:07:08.755
properties of the data
set in the data space.

107
00:07:08.755 --> 00:07:13.429
And how we can even customize those,
we saw we can put in constant values if we

108
00:07:13.429 --> 00:07:18.193
want a channel to always have the same
value coming out, we saw that earlier.

109
00:07:18.193 --> 00:07:23.754
And we can also put in custom functions
if we have something that's a little

110
00:07:23.754 --> 00:07:30.130
more complicated than a one to one mapping
from data features to channel properties.

111
00:07:31.240 --> 00:07:34.603
And we also saw how to use scales in plot.

112
00:07:34.603 --> 00:07:38.989
So in this case, we manipulated the color
scale, and the other scales like x,

113
00:07:38.989 --> 00:07:41.391
for example, we can also customize here.

114
00:07:41.391 --> 00:07:47.630
For example, we were rotating the ticks
on the x-axis with this custom property.

115
00:07:47.630 --> 00:07:51.605
But we saw that with these scales,
we can configure the domain and

116
00:07:51.605 --> 00:07:56.300
range of these scaling functions for
a particular channel, or in this case,

117
00:07:56.300 --> 00:07:57.547
group of channels.

118
00:07:57.547 --> 00:08:04.109
Because the color scale applies to both
the fill and stroke channels, as we saw.

119
00:08:04.109 --> 00:08:09.140
To customize the domain of input
values and the range of output

120
00:08:09.140 --> 00:08:14.462
values in the visual space that
these scales are using to make that

121
00:08:14.462 --> 00:08:20.860
conversion from data values to
properties of the visualization.

122
00:08:20.860 --> 00:08:25.460
So these are the concepts that
we've covered in this project.

123
00:08:25.460 --> 00:08:30.125
And in the next project, we're gonna
take a look also at some aggregation

124
00:08:30.125 --> 00:08:36.270
operations, some transforms that help us
aggregate data and group it together.

125
00:08:36.270 --> 00:08:39.392
And also, we're gonna look at faceting, so

126
00:08:39.392 --> 00:08:44.242
splitting plots up into smaller,
multiple charts that are gonna help

127
00:08:44.242 --> 00:08:48.454
us get a more instant picture
of certain subsets of the data.

