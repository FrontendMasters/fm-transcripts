WEBVTT

1
00:00:00.000 --> 00:00:05.608
So, okay, data visualization is what
we are here to talk about, but why?

2
00:00:05.608 --> 00:00:07.176
What are we even talking about?

3
00:00:07.176 --> 00:00:08.328
What is data viz and

4
00:00:08.328 --> 00:00:12.875
why should we as software developers
even care about it in the first place?

5
00:00:12.875 --> 00:00:15.672
Well, we've heard a couple
of reasons already so far.

6
00:00:15.672 --> 00:00:21.654
But, let's go through and take a look at
a few ways we can understand data viz and

7
00:00:21.654 --> 00:00:26.853
how it relates to our day to day in
the world of software development.

8
00:00:26.853 --> 00:00:31.929
So, one way we could
characterize data visualization

9
00:00:31.929 --> 00:00:38.341
is as the process of translating
data to graphical representation.

10
00:00:38.341 --> 00:00:42.759
Not only is that kind of a yawn
inducing definition, but

11
00:00:42.759 --> 00:00:49.435
it also doesn't really tell us a lot about
what the interesting value of data viz is.

12
00:00:49.435 --> 00:00:54.125
So okay, yes, we have some data and we
want a graphical representation of it but

13
00:00:54.125 --> 00:00:55.461
why does that matter?

14
00:00:55.461 --> 00:01:00.358
Why isn't it easier to just look at
the data itself instead of looking at

15
00:01:00.358 --> 00:01:02.816
a graphical representation of it?

16
00:01:02.816 --> 00:01:08.090
Well, one reason is because our bosses
ask us to build data visualizations so

17
00:01:08.090 --> 00:01:12.716
that we can put together things like
dashboards or insight charts in

18
00:01:12.716 --> 00:01:17.769
the web apps that we're being tasked
with building in our day to day work.

19
00:01:17.769 --> 00:01:21.506
So one thing we could say is that,
well as front end developers,

20
00:01:21.506 --> 00:01:25.812
we often have to put visualizations
into the sites that we're building.

21
00:01:25.812 --> 00:01:31.440
Whether it be for internal tooling to
kind of understand our systems better,

22
00:01:31.440 --> 00:01:36.376
or whether it be because the app
that we're building wants to expose

23
00:01:36.376 --> 00:01:41.504
some kind of information to users
about the data that they care about.

24
00:01:41.504 --> 00:01:46.151
And so that means that it is also,
as we said before a very relevant

25
00:01:46.151 --> 00:01:50.207
skill especially in the front
end world but I would say for

26
00:01:50.207 --> 00:01:55.278
software developers in general,
it is a really nice addition to have on

27
00:01:55.278 --> 00:02:00.542
your resume because it pops up in,
sometimes it is an entire job, right?

28
00:02:00.542 --> 00:02:02.929
Of being a data visualization developer.

29
00:02:02.929 --> 00:02:07.602
But sometimes, even if you're doing
front end or full stack development, and

30
00:02:07.602 --> 00:02:10.265
most of the time you
are building those apps.

31
00:02:10.265 --> 00:02:13.944
And take a look at a few ways
we can understand data viz and

32
00:02:13.944 --> 00:02:16.070
how it relates to our day to day.

33
00:02:16.070 --> 00:02:19.192
Got it.
And that's because the reason that we

34
00:02:19.192 --> 00:02:23.993
care about making these graphical
representations of data,

35
00:02:23.993 --> 00:02:26.667
is that by visualizing data, we,

36
00:02:26.667 --> 00:02:32.022
human creatures with are very visual
perception are more quickly and

37
00:02:32.022 --> 00:02:37.034
accurately able to discover meaning and
patterns in that data.

38
00:02:37.034 --> 00:02:41.878
Than if we were just looking at rows and
rows of numbers.

39
00:02:41.878 --> 00:02:46.900
And so this means that data visualization
essentially lets us more easily and

40
00:02:46.900 --> 00:02:51.855
more quickly discover meanings and
patterns And then give us the insights.

41
00:02:51.855 --> 00:02:56.774
So the answers to the questions that we
have that will help us in our day to day,

42
00:02:56.774 --> 00:02:58.970
whether that's as developers and

43
00:02:58.970 --> 00:03:03.739
we're gonna to look at some of the
questions that we can answer with data and

44
00:03:03.739 --> 00:03:08.233
data visualization being a very
effective way to find those answers.

45
00:03:08.233 --> 00:03:10.054
But also, again for our users, right?

46
00:03:10.054 --> 00:03:14.875
If we're building apps and we want
our users to be able to get insight

47
00:03:14.875 --> 00:03:19.950
into their own data or the things
that they care about, using graphical

48
00:03:19.950 --> 00:03:25.533
representations of data is a really great
way to quickly convey that meaning,

49
00:03:25.533 --> 00:03:30.125
that insight to the audience's
that we're trying to help out.

50
00:03:30.125 --> 00:03:34.360
Okay, so
let's take a look at an example here.

51
00:03:34.360 --> 00:03:36.749
We have data,
we're swimming in it these days, right?

52
00:03:36.749 --> 00:03:38.224
It is just coming out our ears.

53
00:03:38.224 --> 00:03:42.893
We have so much of it, but finding meaning
within it, that's the challenging part.

54
00:03:42.893 --> 00:03:48.856
So if we're looking at this data here,
what do folks notice about this data?

55
00:03:48.856 --> 00:03:52.685
Got some rows, got some stuff in here.

56
00:03:52.685 --> 00:03:56.503
Shout it out or in the chat, feel free
to drop it in, what do you notice here?

57
00:03:56.503 --> 00:03:58.201
What does this data say to you?

58
00:03:58.201 --> 00:04:01.861
What do you discover from
looking at these rows?

59
00:04:03.785 --> 00:04:06.136
Anything?

60
00:04:08.348 --> 00:04:13.191
So I'm seeing some URLs here and,
they have GitHub in them.

61
00:04:13.191 --> 00:04:16.041
So it looks like this has
something to do with GitHub maybe.

62
00:04:16.041 --> 00:04:18.074
I also see spelt Js.

63
00:04:18.074 --> 00:04:21.879
So it looks like maybe something
to do with the spelt GitHub repo.

64
00:04:21.879 --> 00:04:24.412
&gt;&gt; Someone said requesting
data from the GitHub API.

65
00:04:24.412 --> 00:04:29.669
&gt;&gt; Yep, exactly,
requesting data from the GitHub API.

66
00:04:29.669 --> 00:04:35.738
I don't know, there's some Shah's
going on there some more URL stuff.

67
00:04:35.738 --> 00:04:39.667
There are some status,
there's a status column here,

68
00:04:39.667 --> 00:04:42.622
everything is completed, success.

69
00:04:42.622 --> 00:04:44.901
Okay, now I'm seeing the word test, so

70
00:04:44.901 --> 00:04:47.796
maybe this has something
to do with tests running.

71
00:04:47.796 --> 00:04:49.947
But I don't know about you all, but

72
00:04:49.947 --> 00:04:53.549
I'm not immediately getting
a lot of value from this data.

73
00:04:53.549 --> 00:04:56.579
I'm not immediately seeing
any kind of patterns or

74
00:04:56.579 --> 00:04:59.051
knowing what I should be understanding.

75
00:04:59.051 --> 00:05:04.693
I've so far gathered, maybe this has
to do with tests running on the spelt

76
00:05:04.693 --> 00:05:10.524
JS repo on GitHub, maybe, but I don't
really know too much more than that.

77
00:05:10.524 --> 00:05:13.066
Now, what we look at it graphically?

78
00:05:13.066 --> 00:05:16.970
So this is the same data, but visualized.

79
00:05:16.970 --> 00:05:18.915
So what can we see here?

80
00:05:18.915 --> 00:05:23.643
Anything else jumping out
to folks that wasn't clear

81
00:05:23.643 --> 00:05:26.696
from the rows of data themselves?

82
00:05:28.318 --> 00:05:34.806
&gt;&gt; It's like showing the frequency of a,
maybe a request to these different nodes.

83
00:05:34.806 --> 00:05:37.774
&gt;&gt; Right, okay, so
we have these ticks happening for

84
00:05:37.774 --> 00:05:40.957
all of these different nodes or
these different rows.

85
00:05:40.957 --> 00:05:44.206
So it looks like something is
happening with some frequency.

86
00:05:44.206 --> 00:05:46.555
Exactly, something is being repeated.

87
00:05:46.555 --> 00:05:48.782
Anything else jump out at folks?

88
00:05:48.782 --> 00:05:53.186
&gt;&gt; Just looks like tests running and
depending on when they finish they

89
00:05:53.186 --> 00:05:56.749
could finish between two and
six minutes or whatever.

90
00:05:56.749 --> 00:05:57.586
&gt;&gt; Right, exactly.

91
00:05:57.586 --> 00:06:01.306
So now we know something about the number
of minutes that each of these tests

92
00:06:01.306 --> 00:06:02.083
took, right?

93
00:06:02.083 --> 00:06:03.104
The duration of them.

94
00:06:03.104 --> 00:06:06.102
Could we get that from just
looking at the rows of data?

95
00:06:06.102 --> 00:06:10.393
With difficulty, maybe I certainly
didn't notice it immediately.

96
00:06:10.393 --> 00:06:12.913
Anything else?

97
00:06:12.913 --> 00:06:16.810
&gt;&gt; The ratio of successes to failures and
canceled tests.

98
00:06:16.810 --> 00:06:17.518
&gt;&gt; Yes, exactly.

99
00:06:17.518 --> 00:06:21.094
So now we have this element
of color coming in.

100
00:06:21.094 --> 00:06:25.308
So we have success displayed in green,
failures displayed in red.

101
00:06:25.308 --> 00:06:28.574
And of course those colors can be
tweaked for better accessibility and

102
00:06:28.574 --> 00:06:29.469
things like that.

103
00:06:29.469 --> 00:06:33.435
But already from that, we can see that
most of the ticks look like they're green.

104
00:06:33.435 --> 00:06:38.417
So it looks like we have a largely
successful runs, we have some gray ones

105
00:06:38.417 --> 00:06:43.398
that are canceled and we can see where
a few red failures jumped out at us,

106
00:06:43.398 --> 00:06:48.398
which maybe is something we'd want to
dig into and take a closer look at.

107
00:06:48.398 --> 00:06:54.301
Okay, so this is just a tiny example
of how, when we're looking at data,

108
00:06:54.301 --> 00:06:58.028
this is in one sense a visualization,
right?

109
00:06:58.028 --> 00:07:03.802
These are these are values set up in rows,
one row for each observation and

110
00:07:03.802 --> 00:07:10.439
one column for each kind of characteristic
or different value of that observation.

111
00:07:10.439 --> 00:07:14.956
But in terms of finding those insights,
like, here are the tests that

112
00:07:14.956 --> 00:07:18.841
are failing or this is how long
most of my tests are taking to run.

113
00:07:18.841 --> 00:07:21.146
That is, I hope you all agree,

114
00:07:21.146 --> 00:07:25.866
much easier to grasp quickly
from a graphical visualization.

115
00:07:25.866 --> 00:07:30.802
So that's the TLDR,
we can all go home now.

116
00:07:30.802 --> 00:07:31.696
No, just kidding.

117
00:07:31.696 --> 00:07:35.386
All right, [LAUGH] so this is what
we're gonna be pouring into today.

118
00:07:35.386 --> 00:07:40.042
We're gonna be discovering how we can
build customized visualizations to give us

119
00:07:40.042 --> 00:07:42.751
the insights that we
particularly care about.

120
00:07:42.751 --> 00:07:47.845
And that's gonna be different for every
particular question that we have, we're

121
00:07:47.845 --> 00:07:52.718
gonna want to set up our visualization in
different ways to give us the answers to

122
00:07:52.718 --> 00:07:57.182
the questions that we care about from
the data that we're working with.

123
00:07:57.182 --> 00:08:01.388
So, now, for
us particularly as developers,

124
00:08:01.388 --> 00:08:06.134
why is data viz super relevant for
our day to day work?

125
00:08:06.134 --> 00:08:10.677
Well, there are a lot of things that
visualizing data and getting those

126
00:08:10.677 --> 00:08:14.993
insights from the visualizations
can help us do as app developers,

127
00:08:14.993 --> 00:08:18.569
as front-end developers,
as full stack developers.

128
00:08:18.569 --> 00:08:23.339
So, for example, when we're
developing features for our user,

129
00:08:23.339 --> 00:08:28.106
if we look at the data, of how
people are actually using our sites,

130
00:08:28.106 --> 00:08:31.341
and our products,
we can find out some really

131
00:08:31.341 --> 00:08:35.976
great information to help us
develop the right things for them.

132
00:08:35.976 --> 00:08:38.831
So for example,
asking what should we build?

133
00:08:38.831 --> 00:08:41.316
Like what issues are folks
struggling with?

134
00:08:41.316 --> 00:08:46.030
What areas of our app are folks
spending the most time on?

135
00:08:46.030 --> 00:08:51.253
What are all of our issues that
folks file on our open source repo?

136
00:08:51.253 --> 00:08:54.109
What patterns are we seeing in there?

137
00:08:54.109 --> 00:08:55.609
Prioritizing use cases.

138
00:08:55.609 --> 00:09:00.248
Later on we're gonna take a look at
visualizing data about the different

139
00:09:00.248 --> 00:09:04.903
types of devices that folks are using
when they visit our site or our app.

140
00:09:04.903 --> 00:09:09.709
And understanding, okay,
most of our users are on this type of

141
00:09:09.709 --> 00:09:14.968
device can help us prioritize things
like the designs that we build,

142
00:09:14.968 --> 00:09:18.519
the features that we
bake in to our platforms.

143
00:09:18.519 --> 00:09:23.094
Understanding whether or not our features
are successful, okay, I just spent

144
00:09:23.094 --> 00:09:27.532
the last six months of my life developing
this really shiny glittery button,

145
00:09:27.532 --> 00:09:28.982
are people clicking it?

146
00:09:28.982 --> 00:09:32.116
How do I know if I don't
actually look at the usage data?

147
00:09:32.116 --> 00:09:36.878
And by visualizing that I can see, okay,
which features that we've built in

148
00:09:36.878 --> 00:09:40.777
the last quarter or year,
whatever, which ones are landing?

149
00:09:40.777 --> 00:09:44.341
Which ones are folks actually
getting a lot of traction from?

150
00:09:44.341 --> 00:09:49.204
And that can help us plan out our roadmap
in the future to know what types of

151
00:09:49.204 --> 00:09:53.128
things folks actually wanna
see on the apps that we built.

152
00:09:53.128 --> 00:09:54.406
And by the same token,

153
00:09:54.406 --> 00:09:58.522
as we are continuously developing
these sites most of the time, right?

154
00:09:58.522 --> 00:10:00.742
It's never a done deal.

155
00:10:00.742 --> 00:10:04.818
We can understand better as we're
iterating on our feature set and

156
00:10:04.818 --> 00:10:08.456
on the functionality and
the user experience of our sites,

157
00:10:08.456 --> 00:10:13.112
we can understand from the data that we
look at how we should progress and what

158
00:10:13.112 --> 00:10:18.239
things we should keep and what things we
should maybe figure out alternatives for.

159
00:10:18.239 --> 00:10:23.165
So in terms of feature development itself,
data visualization, data itself

160
00:10:23.165 --> 00:10:28.330
very valuable and visualizing that data
to see those patterns, super valuable.

161
00:10:28.330 --> 00:10:29.663
Okay, what about performance?

162
00:10:29.663 --> 00:10:33.771
This is an area where data
viz can be super handy,

163
00:10:33.771 --> 00:10:38.693
in terms of understanding how
fast is our system running.

164
00:10:38.693 --> 00:10:43.249
We just saw in the test visualization that
we can get a sense of how long are these

165
00:10:43.249 --> 00:10:44.710
test jobs taking to run.

166
00:10:44.710 --> 00:10:48.072
If we see things taking ten minutes and
so on and so

167
00:10:48.072 --> 00:10:52.676
forth we can dig into those cases and
try to optimize performance.

168
00:10:52.676 --> 00:10:57.196
Similarly, when we're looking at
the performance of different parts of our

169
00:10:57.196 --> 00:11:01.104
site, we're gonna look later at
some data around API responses.

170
00:11:01.104 --> 00:11:05.954
And see, okay, are there certain endpoints
on our site that are taking a really long

171
00:11:05.954 --> 00:11:08.156
time to return responses to the user?

172
00:11:08.156 --> 00:11:13.363
Or are there certain features again,
that we could improve the performance

173
00:11:13.363 --> 00:11:18.728
of by digging into those details in a
visual depiction of that data, we can more

174
00:11:18.728 --> 00:11:24.699
quickly understand where we should focus
our attention where those bottlenecks are.

175
00:11:24.699 --> 00:11:29.031
And we can also understand how
well our improvements are actually

176
00:11:29.031 --> 00:11:32.904
improving things by the same
token reliability, right?

177
00:11:32.904 --> 00:11:37.660
Are we getting a lot of errors or
do we have, for example test jobs that

178
00:11:37.660 --> 00:11:42.181
are really flaky and tend to timeout
all the time or what have you.

179
00:11:42.181 --> 00:11:45.476
So understanding not just speed but
also reliability and

180
00:11:45.476 --> 00:11:50.276
maybe we have different trade offs and in
terms of, maybe it's okay to be slow, but

181
00:11:50.276 --> 00:11:54.898
we want to make sure that 100% of the time
the user is getting what they need.

182
00:11:54.898 --> 00:11:58.419
Other times it might be better to make
the other trade off and say, okay,

183
00:11:58.419 --> 00:12:02.254
we want things to be really fast even if
once in a while something gets dropped.

184
00:12:02.254 --> 00:12:07.732
So being able to look at that and say,
how well is what we're building matching

185
00:12:07.732 --> 00:12:12.889
In our needs or our users needs,
in terms of performance, super useful.

186
00:12:12.889 --> 00:12:14.564
Yeah, and by the same token,

187
00:12:14.564 --> 00:12:18.527
understanding where those bottlenecks
are where we should improve.

188
00:12:18.527 --> 00:12:22.930
And similarly to with feature development,
if we have made some performance

189
00:12:22.930 --> 00:12:27.468
enhancements, being able to prove to
ourselves and to our bosses, of course,

190
00:12:27.468 --> 00:12:29.993
that they actually made a positive impact.

191
00:12:29.993 --> 00:12:33.206
And helped improve the performance
of the site can be

192
00:12:33.206 --> 00:12:38.173
really successfully accomplished by
showing a visualization that says, hey,

193
00:12:38.173 --> 00:12:41.907
look how long this bar was before and
look how short it is now.

194
00:12:41.907 --> 00:12:46.786
So this can also be really useful for
not just finding those insights but

195
00:12:46.786 --> 00:12:49.728
also conveying those insights to others.

196
00:12:49.728 --> 00:12:53.736
The final area that I think it
bears mentioning in terms of how

197
00:12:53.736 --> 00:12:58.376
visualization can help us as developers
is understanding our code and

198
00:12:58.376 --> 00:13:01.143
our development practices themselves.

199
00:13:01.143 --> 00:13:03.831
So not just the site's than
the features that we build but

200
00:13:03.831 --> 00:13:06.472
actually the process of
development that we engage in.

201
00:13:06.472 --> 00:13:11.272
So if we look at data about our code
base or about the contributions to our

202
00:13:11.272 --> 00:13:16.232
code base, for example if it's a GitHub
repo we can quite easily discover

203
00:13:16.232 --> 00:13:20.484
a lot of interesting things from
the data that GitHub exposes.

204
00:13:20.484 --> 00:13:23.654
We can understand things like how
is the codebase organized, right?

205
00:13:23.654 --> 00:13:28.845
What is the relative size of different
directories in the codebase or

206
00:13:28.845 --> 00:13:33.496
which are the parts of the codebase
that are quickly moving and

207
00:13:33.496 --> 00:13:37.162
changing a lot and
which are the ones that are more

208
00:13:37.162 --> 00:13:41.482
stable that are sitting more
kind of in stasis as it were?

209
00:13:41.482 --> 00:13:44.751
When we're talking about our
development workflow, again,

210
00:13:44.751 --> 00:13:48.031
we just looked at some test jobs
from continuous integration.

211
00:13:48.031 --> 00:13:51.488
If those jobs are failing all the time or
taking a really long time,

212
00:13:51.488 --> 00:13:55.254
that means our development workflow
is gonna be a little bit laborious,

213
00:13:55.254 --> 00:13:58.178
it's gonna feel sticky and
difficult to move through.

214
00:13:58.178 --> 00:14:00.351
So how can we make that smoother?

215
00:14:00.351 --> 00:14:04.456
Or if we're looking at things like,
how long does it take for

216
00:14:04.456 --> 00:14:07.125
our site to deploy once I make a change?

217
00:14:07.125 --> 00:14:09.111
How can I improve that process?

218
00:14:09.111 --> 00:14:14.143
How can I make it a smoother faster
process from merging a change in

219
00:14:14.143 --> 00:14:19.376
to the codebase to getting that up
in front of my user, for example?

220
00:14:19.376 --> 00:14:23.688
Likewise, we can visualize different
notions of productivity and

221
00:14:23.688 --> 00:14:27.620
I'm using quotes around
productivity here because I think,

222
00:14:27.620 --> 00:14:31.945
we as teams need to define what our
own notions of productivity are.

223
00:14:31.945 --> 00:14:35.717
It's not always going to be
sort of these archaic metrics,

224
00:14:35.717 --> 00:14:38.668
like lines of code written
in number of hours.

225
00:14:38.668 --> 00:14:44.179
But maybe it'll be things like, for
example how quickly are we able to respond

226
00:14:44.179 --> 00:14:49.543
to open source contributions if folks
open an issue on our open source repo?

227
00:14:49.543 --> 00:14:52.459
How long do they have to wait
before we get back to them?

228
00:14:52.459 --> 00:14:56.279
Or how long do our developers
have to wait for their PRs,

229
00:14:56.279 --> 00:15:00.195
their pull requests to get
reviewed by other teammates?

230
00:15:00.195 --> 00:15:06.860
Or how does collaboration across different
projects in our organization work?

231
00:15:06.860 --> 00:15:12.040
So understanding notions of productivity
and visualizing that data so

232
00:15:12.040 --> 00:15:16.528
that the team can, again,
have smooth our collaboration and

233
00:15:16.528 --> 00:15:19.892
a more pleasant day to
day as we work together,

234
00:15:19.892 --> 00:15:24.839
as we collaborate is a really great
application in data viz as well.

235
00:15:24.839 --> 00:15:29.325
And yes, similarly if we do have
open source projects weather as

236
00:15:29.325 --> 00:15:33.731
perhaps individual labor of love,
open source maintenance or

237
00:15:33.731 --> 00:15:37.322
maybe we work on open source for
a living day to day.

238
00:15:37.322 --> 00:15:41.821
Understanding how the contributor
community interfaces with that project can

239
00:15:41.821 --> 00:15:46.047
be a really useful way to take a look
at some contribution data for example,

240
00:15:46.047 --> 00:15:47.205
again from GitHub.

241
00:15:47.205 --> 00:15:51.645
And understand okay, how many new
contributors do we have every month for

242
00:15:51.645 --> 00:15:52.299
example?

243
00:15:52.299 --> 00:15:55.289
Or how many folks come
back time after time and

244
00:15:55.289 --> 00:15:58.994
continuously file bug reports
to help us out etcetera.

245
00:15:58.994 --> 00:16:01.749
So, this is another kind of area,

246
00:16:01.749 --> 00:16:07.639
this notion of the the meta level of
how well our development workflows and

247
00:16:07.639 --> 00:16:14.194
practices functioning that we can get some
really solid answers to by visualizing

248
00:16:14.194 --> 00:16:19.620
data about our code bases and
our contribution and collaboration.

