WEBVTT

1
00:00:00.100 --> 00:00:06.104
Okay, so at this point, we are going
to jump into our first project,

2
00:00:06.104 --> 00:00:09.219
which is called are tests passing?

3
00:00:09.219 --> 00:00:14.524
And if you were able to click that
data visualization for steps link

4
00:00:14.524 --> 00:00:20.500
at the top of the original notebook,
you should see this sidebar here.

5
00:00:20.500 --> 00:00:23.960
And so right now, we are in the notebook
Project: Are tests passing?

6
00:00:23.960 --> 00:00:28.726
So if anybody had any difficulties
accessing that, please let me know, but

7
00:00:28.726 --> 00:00:32.012
hopefully, we're all
literally on the same page.

8
00:00:32.012 --> 00:00:37.491
All right, so this is going to be
our first exposure, as it were,

9
00:00:37.491 --> 00:00:42.990
to working in an interactive
Observable environment.

10
00:00:42.990 --> 00:00:48.681
So what we're looking at is an Observable
notebook, which means it is a combination

11
00:00:48.681 --> 00:00:54.228
of code right up here, in this case, text
and some headings and things like that.

12
00:00:54.228 --> 00:00:58.110
And visualizations,
which is what we're gonna be building.

13
00:00:58.110 --> 00:01:01.808
This is the starting point,
not the ending point.

14
00:01:01.808 --> 00:01:03.977
So what we're gonna be doing is,

15
00:01:03.977 --> 00:01:07.699
filling out some to-dos
essentially in this notebook.

16
00:01:07.699 --> 00:01:11.980
And I'll walk you through kind of
what that is going to feel like.

17
00:01:13.180 --> 00:01:17.177
So first of all,
a little context around this project.

18
00:01:17.177 --> 00:01:22.139
We're going to be visualizing some
data from the GitHub Actions API.

19
00:01:23.140 --> 00:01:26.825
If folks haven't worked
with GitHub Actions,

20
00:01:26.825 --> 00:01:32.261
these are essentially kind of
automation tasks or processes or jobs,

21
00:01:32.261 --> 00:01:37.805
as they're called, that you can set
up to run on your GitHub projects.

22
00:01:37.805 --> 00:01:42.801
For example, to run tests in
continuous integration, among many,

23
00:01:42.801 --> 00:01:44.274
many other things.

24
00:01:44.274 --> 00:01:50.974
But what we're gonna be looking at are,
again, as we saw briefly in the intro,

25
00:01:50.974 --> 00:01:55.687
some data around tests running
in CI as GitHub Actions.

26
00:01:55.687 --> 00:01:58.351
And so what we've got here in Observable,

27
00:01:58.351 --> 00:02:03.440
we can attach data files to our notebooks,
as I mentioned briefly before.

28
00:02:03.440 --> 00:02:09.198
What we've got is essentially a JSON
file already attached to the notebook.

29
00:02:09.198 --> 00:02:14.532
That represents the data that you might
get if you had downloaded some data

30
00:02:14.532 --> 00:02:20.299
from the GitHub API about jobs running
on the open source public SvelteJS repo,

31
00:02:20.299 --> 00:02:24.194
just as an example of
something publicly available.

32
00:02:24.194 --> 00:02:30.074
And in this case, we've actually already
done a little bit of wrangling on this

33
00:02:30.074 --> 00:02:36.244
data to exclude or filter out some of the
data that we don't need for this exercise.

34
00:02:36.244 --> 00:02:40.983
And to do a little bit of processing
to make it easier to visualize.

35
00:02:40.983 --> 00:02:44.830
In the next exercise, we're gonna do
a tiny bit of data wrangling ourselves.

36
00:02:44.830 --> 00:02:48.150
But for this one, we've assumed we've
already got that taken care of, and so

37
00:02:48.150 --> 00:02:50.960
we can jump right into the visualization.

38
00:02:50.960 --> 00:02:54.293
So what we're doing here
in this first cell is we're

39
00:02:54.293 --> 00:02:59.167
parsing that file attachment using
a built-in function from Observable.

40
00:02:59.167 --> 00:03:02.440
And we're just telling
Observable to read it as JSON.

41
00:03:02.440 --> 00:03:06.863
So then we get essentially
this testJobs object,

42
00:03:06.863 --> 00:03:11.920
it's an adjacent array of
objects that have information

43
00:03:11.920 --> 00:03:16.045
about different runs of
different test jobs.

44
00:03:16.045 --> 00:03:19.770
And what we're doing here is we're
just exploring it in table format.

45
00:03:19.770 --> 00:03:23.320
Later on in our project that
explores interactivity,

46
00:03:23.320 --> 00:03:26.493
we're gonna take a closer
look at these inputs.

47
00:03:26.493 --> 00:03:30.573
But this is just to make it
a little bit more human readable

48
00:03:30.573 --> 00:03:32.790
than that JSON object itself.

49
00:03:32.790 --> 00:03:37.637
So when we're editing Observable code,

50
00:03:37.637 --> 00:03:42.761
what we're going to be
doing is essentially

51
00:03:42.761 --> 00:03:48.991
editing in these little gray or
blue boxes where we see

52
00:03:48.991 --> 00:03:53.991
the sort of JavaScript looking code here.

53
00:03:53.991 --> 00:03:58.703
So for example, I can add a comment or

54
00:03:58.703 --> 00:04:02.049
I can say, I don't know.

55
00:04:02.049 --> 00:04:07.081
Let's say just get the 0th indexed
element in this testJobs data.

56
00:04:07.081 --> 00:04:10.842
And once I've edited something
in one of these codes,

57
00:04:10.842 --> 00:04:14.698
I'll see a little blue play
button show up on the right.

58
00:04:14.698 --> 00:04:18.082
So I can click that or
press Shift+Enter as a handy

59
00:04:18.082 --> 00:04:22.200
keyboard shortcut that then
you're gonna be doing all day.

60
00:04:22.200 --> 00:04:23.790
So we'll get used to it.

61
00:04:23.790 --> 00:04:28.288
But I can either click this play button or
press Shift+Enter to update the,

62
00:04:28.288 --> 00:04:31.793
of course, this is an interval now
[LAUGH] to break the code, and

63
00:04:31.793 --> 00:04:34.402
then press Shift+Enter
again to unbreak it.

64
00:04:34.402 --> 00:04:37.288
So this is what we're
gonna be doing today.

65
00:04:37.288 --> 00:04:41.240
We're gonna be editing some of these
cells to put in our own code, and

66
00:04:41.240 --> 00:04:45.990
then reevaluating or rerunning these
cells to see the value update.

67
00:04:45.990 --> 00:04:51.190
So we'll take a look at this
in our first actual exercise.

68
00:04:51.190 --> 00:04:54.910
So here we've got our
first plot visualization.

69
00:04:54.910 --> 00:04:59.030
This is a very simple and
not yet very useful

70
00:04:59.030 --> 00:05:04.190
visualization of this test
job data that uses a mark.

71
00:05:04.190 --> 00:05:07.650
So remember we said marks are these
different elements that we can draw on

72
00:05:07.650 --> 00:05:09.100
the screen.

73
00:05:09.100 --> 00:05:11.989
In this case,
we're using a mark called a cell,

74
00:05:11.989 --> 00:05:17.060
which are these little kind of rectangles
here, similar to cells in a table.

75
00:05:17.060 --> 00:05:22.736
And so what this plot is doing is
essentially drawing a little cell or

76
00:05:22.736 --> 00:05:26.134
a rectangle for each row in the dataset.

77
00:05:26.134 --> 00:05:30.371
And each run number kind
of gets its own positioned,

78
00:05:30.371 --> 00:05:34.509
in this case,
column of all of the different jobs,

79
00:05:34.509 --> 00:05:39.790
the different tests that ran in
that particular numbered run.

80
00:05:39.790 --> 00:05:41.775
And here, the run numbers are sequential.

81
00:05:41.775 --> 00:05:45.490
We could, for example, be visualizing
something else like timestamps here, but

82
00:05:45.490 --> 00:05:48.380
here, we're just visualizing
them run by run.

83
00:05:48.380 --> 00:05:51.725
So let's take a look at the code that
makes this visualization tick and

84
00:05:51.725 --> 00:05:54.250
understand what's happening.

85
00:05:54.250 --> 00:05:56.260
So this is how we create a new plot.

86
00:05:56.260 --> 00:05:59.560
We call Plot.plot.

87
00:05:59.560 --> 00:06:03.915
And then inside of the call
to the method lowercase plot,

88
00:06:03.915 --> 00:06:08.633
we're going to give it an object
that specifies the options or

89
00:06:08.633 --> 00:06:14.360
the configuration, as it were,
for this chart, this plot.

90
00:06:14.360 --> 00:06:17.247
So the first thing we're gonna
wanna do is pass in an array

91
00:06:17.247 --> 00:06:20.260
of marks to tell plot which
marks we want it to draw.

92
00:06:20.260 --> 00:06:23.613
In this case, we're using a cell mark.

93
00:06:23.613 --> 00:06:27.752
And we're gonna explore some different
types of marks in our future projects, but

94
00:06:27.752 --> 00:06:29.774
for now, we'll just stick with cells.

95
00:06:29.774 --> 00:06:34.830
Each mark basically takes in the data
that we want to draw the marks with.

96
00:06:34.830 --> 00:06:36.660
In this case, it's called testJobs.

97
00:06:36.660 --> 00:06:39.502
It's that JSON array that we saw before.

98
00:06:39.502 --> 00:06:42.140
Well, it's a JavaScript object
cuz we parsed in the JSON file.

99
00:06:43.610 --> 00:06:48.600
And then we're going to pass
in essentially a mapping.

100
00:06:48.600 --> 00:06:52.558
So a little object that maps
channels in the visualization,

101
00:06:52.558 --> 00:06:55.748
which we're gonna explain
in a bit more detail.

102
00:06:55.748 --> 00:06:58.984
But in this case,
we have an x position and

103
00:06:58.984 --> 00:07:03.427
a y position as the kind of
outputs in our visualization.

104
00:07:03.427 --> 00:07:07.494
And it's going to say for
each of those output channels,

105
00:07:07.494 --> 00:07:13.720
what is the input value that I should be
mapping or sort of scaling to this output?

106
00:07:13.720 --> 00:07:17.647
So in this case, the run number
value is gonna go on the x-axis, so

107
00:07:17.647 --> 00:07:21.550
that's these numbers
running horizontally here.

108
00:07:21.550 --> 00:07:23.485
And then the name of the test job,

109
00:07:23.485 --> 00:07:27.370
which is called name in our dataset,
is going to be on the y-axis.

110
00:07:27.370 --> 00:07:33.360
So that's why we have all these
different names of jobs vertically here.

111
00:07:33.360 --> 00:07:34.730
So that's it for our marks array.

112
00:07:34.730 --> 00:07:38.477
That's the only mark we wanna draw in
this visualization, but in others,

113
00:07:38.477 --> 00:07:41.460
you could have multiple different
types of marks going on.

114
00:07:41.460 --> 00:07:46.135
And then we're going to have some
just sort of general properties

115
00:07:46.135 --> 00:07:49.760
of the way plot is drawing
its chart on the screen.

116
00:07:49.760 --> 00:07:54.719
So the width here, in Observable,
we get a little automatic

117
00:07:54.719 --> 00:07:59.972
variable called width,
which essentially scales to the size,

118
00:07:59.972 --> 00:08:04.660
the width of the cell,
this sort of area here on the page.

119
00:08:04.660 --> 00:08:07.448
And then we have just some margin setup so

120
00:08:07.448 --> 00:08:11.232
that we make a little extra room for
these text labels.

121
00:08:11.232 --> 00:08:16.366
We also have some information
passed to the x scale

122
00:08:16.366 --> 00:08:21.020
to tell it to rotate
the labels 45 degrees.

123
00:08:21.020 --> 00:08:24.850
So that's why we get these
angled labels on the x-axis.

124
00:08:24.850 --> 00:08:28.080
So this is one example of a simple plot.

125
00:08:28.080 --> 00:08:31.760
Essentially, we've got the information for
each individual mark.

126
00:08:31.760 --> 00:08:34.212
In this case, we just have one, the cell.

127
00:08:34.212 --> 00:08:38.484
And then we have some information about
the plot as a whole and the scales that

128
00:08:38.484 --> 00:08:42.920
configure the different output channels
that we are drawing information to.

129
00:08:44.830 --> 00:08:48.787
So let's talk about
channels a little bit more.

130
00:08:48.787 --> 00:08:51.066
When we're working with plot, and again,

131
00:08:51.066 --> 00:08:53.418
this is inspired by
the grammar of graphics.

132
00:08:53.418 --> 00:08:57.874
So this is a more general data viz
concept than just plot library.

133
00:08:57.874 --> 00:09:01.723
You'll see this also implemented
in other data viz libraries.

134
00:09:01.723 --> 00:09:06.926
When we're working with marks in plot,
again, we are going to be expressing

135
00:09:06.926 --> 00:09:12.466
values in the data as visual properties
of different types in our visualization.

136
00:09:12.466 --> 00:09:15.369
And those different types
are called channels.

137
00:09:15.369 --> 00:09:18.855
So we saw, for example,
we saw we have the x channel,

138
00:09:18.855 --> 00:09:21.890
which is essentially
a horizontal position.

139
00:09:21.890 --> 00:09:24.768
We have the y channel for
vertical position.

140
00:09:24.768 --> 00:09:29.665
And then if we dig into the plot
documentation on GitHub, which is linked

141
00:09:29.665 --> 00:09:34.560
here, we can see some of the other
channels that we have available to us,

142
00:09:34.560 --> 00:09:35.947
and there are a few.

143
00:09:35.947 --> 00:09:39.862
But a few that we're gonna
care about here might be fill,

144
00:09:39.862 --> 00:09:44.761
which is essentially the color inside
of the rectangles or other shapes

145
00:09:44.761 --> 00:09:49.678
we might be doing like a dot mark that
might also have a filled interior.

146
00:09:49.678 --> 00:09:53.261
Or the fillOpacity, so
the opacity of that inner shading.

147
00:09:53.261 --> 00:09:58.058
Similarly, we might have the stroke or
the outline of each of those cells or

148
00:09:58.058 --> 00:10:01.080
other marks, dots, what have you.

149
00:10:01.080 --> 00:10:05.950
Or, for example, if we're using a line
mark, then that would be a stroke.

150
00:10:05.950 --> 00:10:10.517
Stroke would be the relevant property for
the color of that line.

151
00:10:10.517 --> 00:10:14.188
And similarly, strokeOpacity,
so the opacity of that outline.

152
00:10:14.188 --> 00:10:18.899
We also have a channel called title,
which essentially configures tool

153
00:10:18.899 --> 00:10:23.389
tips on each of the little marks,
so in this case, each of the cells.

154
00:10:23.389 --> 00:10:28.318
So what we're gonna do in our first
exercise is to use some of these other

155
00:10:28.318 --> 00:10:31.621
channels to make this
chart more informative.

156
00:10:31.621 --> 00:10:32.953
Because right now,

157
00:10:32.953 --> 00:10:37.114
I am not getting a whole lot of
information from these squares.

158
00:10:37.114 --> 00:10:39.384
So if we scroll down a little bit,

159
00:10:39.384 --> 00:10:44.328
our first to do here is to use the fill
channel, so the fill color of each of

160
00:10:44.328 --> 00:10:49.461
these rectangles to visualize the
conclusion status of each of the tests.

161
00:10:49.461 --> 00:10:52.475
So did they succeed, fail,
or were they canceled?

162
00:10:54.015 --> 00:10:58.766
So what we're gonna need to do is take
the column in the data that corresponds

163
00:10:58.766 --> 00:10:59.367
to that.

164
00:10:59.367 --> 00:11:02.890
Which if we look up here,
we can see that column with the success or

165
00:11:02.890 --> 00:11:06.370
cancellation or
what have you is called conclusion.

166
00:11:06.370 --> 00:11:12.130
And so that's what we're gonna need to map
to the fill channel to get this going.

167
00:11:12.130 --> 00:11:17.542
So as our first exercise, take some time
to fill out this part of the code here.

168
00:11:17.542 --> 00:11:19.950
Put your own code in here.

169
00:11:19.950 --> 00:11:23.040
Again, you don't need an Observable
account to be editing this.

170
00:11:23.040 --> 00:11:25.711
But if you already have
an Observable account or

171
00:11:25.711 --> 00:11:29.049
if you're interested in saving
your work in your own copy or

172
00:11:29.049 --> 00:11:33.590
your own fork of this notebook so
that you can come back to it later.

173
00:11:33.590 --> 00:11:36.374
Feel free to scroll up to the top and

174
00:11:36.374 --> 00:11:41.566
you should see a little sign in or
sign up button at the top right.

175
00:11:41.566 --> 00:11:45.309
But if you don't want to,
that is completely fine.

176
00:11:45.309 --> 00:11:52.250
You can just edit this code here, and then
press Shift+Enter to watch me break this.

177
00:11:52.250 --> 00:11:55.797
Excellent, okay,
cuz this is not JavaScript, but

178
00:11:55.797 --> 00:12:00.320
essentially to update whatever
changes you've made to the cell.

179
00:12:01.510 --> 00:12:05.480
Below this cell, you'll notice a couple
of buttons to give you some hints.

180
00:12:05.480 --> 00:12:10.211
So if you're a little confused or
stuck, take a look at the Hint button.

181
00:12:10.211 --> 00:12:15.692
And then if you wanna see one potential
solution, there's also a button for that.

182
00:12:15.692 --> 00:12:17.939
So let's take a couple of minutes and

183
00:12:17.939 --> 00:12:21.210
try to map the conclusion
column to the fill channel.

