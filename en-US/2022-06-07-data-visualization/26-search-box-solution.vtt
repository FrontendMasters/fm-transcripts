WEBVTT

1
00:00:02.170 --> 00:00:08.330
So, Now we hopefully have
found a way to connect

2
00:00:08.330 --> 00:00:14.119
all of these inputs to make
a multi inputable visualization.

3
00:00:14.119 --> 00:00:19.500
And again these are convenience
widgets when working in Observable.

4
00:00:19.500 --> 00:00:22.822
They were designed to play nicely with
plot cuz they're all part of the same

5
00:00:22.822 --> 00:00:23.770
ecosystem.

6
00:00:23.770 --> 00:00:29.320
But you could follow a similar pattern if
you were using your own HTML widgets or

7
00:00:29.320 --> 00:00:33.540
if you were using reactive
inputs in some other framework.

8
00:00:34.600 --> 00:00:39.174
Okay, so within Observable,
in this inputs.search,

9
00:00:39.174 --> 00:00:44.794
we said that what we need to do is
replace the input array to this input,

10
00:00:44.794 --> 00:00:47.655
confusing terminology to make sure

11
00:00:47.655 --> 00:00:52.168
that this is searching over
the data that we care about.

12
00:00:52.168 --> 00:00:57.090
Which in our case is going to
be the API log data, right?

13
00:00:57.090 --> 00:01:01.862
So one thing we can do is just
simply replace that empty array

14
00:01:01.862 --> 00:01:04.290
with the API log data.

15
00:01:04.290 --> 00:01:08.637
And if we've done this right,
if I have done this right, now,

16
00:01:08.637 --> 00:01:12.331
if there's nothing entered
into this search input,

17
00:01:12.331 --> 00:01:15.879
I will see all 2000 results
of my full dataset.

18
00:01:15.879 --> 00:01:20.214
But if I enter in a prefix like for
example,

19
00:01:20.214 --> 00:01:24.797
users, it will not work,
[LAUGH] let's see.

20
00:01:24.797 --> 00:01:31.510
Users, no files, there we go,
files, it must be user, singular.

21
00:01:31.510 --> 00:01:34.397
There we go, okay yes,
so now it's working.

22
00:01:34.397 --> 00:01:36.128
Now if I enter in user,

23
00:01:36.128 --> 00:01:40.971
I see I only have 83 log results
from user related endpoints.

24
00:01:40.971 --> 00:01:47.571
If I enter in search into my search meta,
then I will see all of these many,

25
00:01:47.571 --> 00:01:52.575
many, many hits,
these 1,115 logs from the slash

26
00:01:52.575 --> 00:01:57.053
file slash search endpoint and
so on and so forth.

27
00:01:57.053 --> 00:02:02.787
So if the user of my dashboard or
in this case my single visualization

28
00:02:02.787 --> 00:02:08.523
with connected inputs,
is interested in visualizing data just for

29
00:02:08.523 --> 00:02:15.190
a particular endpoint, they can do so
using this search box, okay.

30
00:02:15.190 --> 00:02:19.448
But that only works if the plot actually
knows about what's in the search box,

31
00:02:19.448 --> 00:02:23.400
which right now it does not,
it's still displaying everything right.

32
00:02:23.400 --> 00:02:28.041
Or, well, actually I've dragged
down my same check boxes and

33
00:02:28.041 --> 00:02:31.642
it's still displaying
whatever matches that.

34
00:02:31.642 --> 00:02:35.867
To filter that we had set up before
cuz I've copied down the code for

35
00:02:35.867 --> 00:02:38.350
my plot from the earlier exercise.

36
00:02:38.350 --> 00:02:43.505
So now what we need to do is
make sure that we are filtering

37
00:02:43.505 --> 00:02:47.470
on both the checkboxes and the search box.

38
00:02:48.660 --> 00:02:54.004
So I'll notice that this input search
results, give me this path search value,

39
00:02:54.004 --> 00:02:57.870
and that value is what we're
putting into the table here.

40
00:02:57.870 --> 00:03:04.140
So that path search variable and
actually holds the filtered down data set.

41
00:03:04.140 --> 00:03:10.245
That's the result of applying that search
string, or looking for that search string,

42
00:03:10.245 --> 00:03:14.959
so what if, instead of filtering
down my entire set of API log data.

43
00:03:14.959 --> 00:03:17.768
Based on those selected codes,

44
00:03:17.768 --> 00:03:23.470
what if I start with the already
filtered path search data set?

45
00:03:23.470 --> 00:03:25.582
Which is gonna be the subset of the data,

46
00:03:25.582 --> 00:03:29.650
maybe all of it that matches whatever
the user has put into that box.

47
00:03:29.650 --> 00:03:33.361
So let's try replacing our API
log data with path search,

48
00:03:33.361 --> 00:03:35.870
and now I'm seeing fewer data points.

49
00:03:35.870 --> 00:03:37.170
That sounds good.

50
00:03:37.170 --> 00:03:40.968
So now I should be able to,
and again, we could drag these

51
00:03:40.968 --> 00:03:45.579
cells around if we don't wanna see things,
let me hide this for now.

52
00:03:45.579 --> 00:03:48.300
Just so
we have a little bit of easy review.

53
00:03:48.300 --> 00:03:52.877
So now, let's say I uncheck
some of these boxes okay,

54
00:03:52.877 --> 00:03:56.958
it seems like the checkboxes
are still working,

55
00:03:56.958 --> 00:04:00.057
and if I undo that we get more points.

56
00:04:00.057 --> 00:04:03.868
Okay cool, let's try adding back the 200.

57
00:04:03.868 --> 00:04:08.160
All right It seems like that is still
working let's try out with our,

58
00:04:08.160 --> 00:04:11.426
I don't know., our search,
a thousand results.

59
00:04:11.426 --> 00:04:15.529
Now we're seeing they're all the same
color because remember we were coloring in

60
00:04:15.529 --> 00:04:19.096
that fill channel based on the path,
so now they're all the same path so

61
00:04:19.096 --> 00:04:21.965
they're all the same color,
but it seems to be working.

62
00:04:21.965 --> 00:04:27.534
So what we've got is a reactively
updating interactive visualization,

63
00:04:27.534 --> 00:04:32.471
with multiple controls that the user
can use to like really Hone in

64
00:04:32.471 --> 00:04:36.447
on the particular data that
they are interested in.

65
00:04:36.447 --> 00:04:41.074
So they can drill down to
whatever specific endpoint or

66
00:04:41.074 --> 00:04:43.697
status codes they care about.

67
00:04:43.697 --> 00:04:50.652
And they can also filter down
to a particular endpoint.

68
00:04:50.652 --> 00:04:53.962
Or we can imagine extending this
to a different use case, right?

69
00:04:53.962 --> 00:04:54.524
Like, for

70
00:04:54.524 --> 00:04:58.460
example if we were doing this with our
resolution data, from the past one we

71
00:04:58.460 --> 00:05:02.911
could give folks the option to constrain
the resolutions that they're looking at.

72
00:05:02.911 --> 00:05:06.697
Or choose only one or
two of the different device types, so

73
00:05:06.697 --> 00:05:11.647
you can adapt this basic principle of
creating these interactive charts for

74
00:05:11.647 --> 00:05:16.150
whatever the type of interactive is,
that you're trying to build.

75
00:05:17.990 --> 00:05:21.900
And this is how we can do
it with observable inputs.

76
00:05:21.900 --> 00:05:26.170
We've now gone through
our entire final project.

77
00:05:26.170 --> 00:05:32.068
So, if you got slightly different results,
you can take a look at the reference,

78
00:05:32.068 --> 00:05:36.443
finished implementation,
it's down at the bottom there.

79
00:05:36.443 --> 00:05:41.256
But hopefully by now,
folks have a nicely working

80
00:05:41.256 --> 00:05:46.420
multi input interactive data viz,
isn't that fun?

