WEBVTT

1
00:00:00.440 --> 00:00:03.923
This was a little trickier
than our last examples,

2
00:00:03.923 --> 00:00:08.297
you're doing it right and
if this was a little bit of a struggle,

3
00:00:08.297 --> 00:00:13.562
it just goes to show why sometimes doing
the number crunching in the wrangling

4
00:00:13.562 --> 00:00:18.890
phase as opposed to during the
visualization interface can be a helper.

5
00:00:18.890 --> 00:00:20.410
Yeah, questions from the chat.

6
00:00:20.410 --> 00:00:23.911
&gt;&gt; One of the objects has
a Resolution value of not set.

7
00:00:23.911 --> 00:00:27.280
How would you recommend that we
handle that just use null values for

8
00:00:27.280 --> 00:00:28.430
the width and height?

9
00:00:29.560 --> 00:00:30.800
&gt;&gt; So good question.

10
00:00:30.800 --> 00:00:35.020
I guess it depends on,
in terms of a real world application.

11
00:00:35.020 --> 00:00:39.223
It depends on what you want to do
when you're missing data values from

12
00:00:39.223 --> 00:00:40.880
your data set.

13
00:00:40.880 --> 00:00:47.893
So, in some cases, like for example,
when we're converting to numeric values,

14
00:00:47.893 --> 00:00:52.302
we might just be dropping
those missing numbers, or

15
00:00:52.302 --> 00:00:55.324
you might be choosing some kind of.

16
00:00:55.324 --> 00:00:58.458
Default value that you want to stand in,
for

17
00:00:58.458 --> 00:01:03.626
missing values like zero for example,
so we'll see in our next exercise

18
00:01:03.626 --> 00:01:08.795
when we're plotting the resolution
values in kind of more detail.

19
00:01:08.795 --> 00:01:13.619
We'll see that we might end up with
some zero values that are artifacts

20
00:01:13.619 --> 00:01:16.855
from those kind of missing data values.

21
00:01:16.855 --> 00:01:21.427
So one thing you could do if you wanna
exclude those from your visualization,

22
00:01:21.427 --> 00:01:24.731
is you could use a filter
operation like we said before,

23
00:01:24.731 --> 00:01:28.737
to make sure that any rows of the data
that are missing values that you

24
00:01:28.737 --> 00:01:32.640
care about don't get included
in the final data set.

25
00:01:32.640 --> 00:01:37.249
Or if you want to be visualizing those
separately as maybe a different category,

26
00:01:37.249 --> 00:01:40.730
you could be doing that in your
data wrangling phase as well.

27
00:01:44.247 --> 00:01:46.690
Cool, good question.

28
00:01:46.690 --> 00:01:52.210
Okay, so let's see if we can get this
user total bar chart happening here.

29
00:01:52.210 --> 00:01:56.940
So what I've done is I've just pasted
in our previous chart with the count.

30
00:01:56.940 --> 00:02:00.150
And so we said that in this one,
if we open up these hints.

31
00:02:00.150 --> 00:02:03.917
The calculation that we wanna
perform here instead of count,

32
00:02:03.917 --> 00:02:05.950
is the sum of a particular value.

33
00:02:05.950 --> 00:02:08.667
But if I replace sum here,
instead of count,

34
00:02:08.667 --> 00:02:12.770
I'll notice that nothing
really happens to my chart.

35
00:02:12.770 --> 00:02:16.937
And that's because plot is still
essentially summing up observations, and

36
00:02:16.937 --> 00:02:20.331
so in this case it's kind of
the same thing as sum versus account

37
00:02:20.331 --> 00:02:24.580
when we're talking about observation,
so instead and we're telling plot.

38
00:02:24.580 --> 00:02:30.213
Hey sum up whatever variable,
whatever property is on the y axis,

39
00:02:30.213 --> 00:02:35.241
what we need to do is specify
which variable we care about for

40
00:02:35.241 --> 00:02:40.593
the y axis by passing it into our
inputs configuration as well.

41
00:02:40.593 --> 00:02:45.054
So in this case we care
about that users property,

42
00:02:45.054 --> 00:02:49.620
so what I'm going to do is
add in to our inputs here,

43
00:02:49.620 --> 00:02:53.960
in addition to device
being along the x axis.

44
00:02:53.960 --> 00:02:58.390
At the end of the day, what we want
on the y axis is the number of users.

45
00:02:58.390 --> 00:03:01.812
It's just that instead of the direct
number of users for each different

46
00:03:01.812 --> 00:03:05.078
observation, as if they were all
little tiny bars along the x axis.

47
00:03:05.078 --> 00:03:10.465
We wanna smush them together and
just get one bar with

48
00:03:10.465 --> 00:03:18.140
its y value set at the sum of the users
values for that device category.

49
00:03:18.140 --> 00:03:23.327
So by declaring the same channel
in our inputs as our outputs,

50
00:03:23.327 --> 00:03:29.010
we're telling plot,
hey taken users for that y axis value.

51
00:03:29.010 --> 00:03:32.825
But instead of outputting
the original values,

52
00:03:32.825 --> 00:03:38.250
group them together by device category and
sum up those y values.

53
00:03:38.250 --> 00:03:42.250
Some of those users count for
the y values.

54
00:03:42.250 --> 00:03:43.970
So let's see what happens when we do that.

55
00:03:43.970 --> 00:03:47.140
So now we see that the units have changed.

56
00:03:47.140 --> 00:03:51.692
And I think maybe we just need to
add a little bit more margin here.

57
00:03:51.692 --> 00:03:55.059
To see the numbers there we go,
okay, they're not all zeros.

58
00:03:55.059 --> 00:04:00.484
And again, we cannot configure
the size and shape of our plot here.

59
00:04:00.484 --> 00:04:04.595
We could do other things like
configure the, we could change this

60
00:04:04.595 --> 00:04:08.570
to be in the millions of users by
changing the units in our data.

61
00:04:08.570 --> 00:04:13.390
And so now we have got actually we see
that the difference is even more stark, we

62
00:04:13.390 --> 00:04:18.080
have a lot more users for desktop devices
than we do for tablets for example.

63
00:04:19.190 --> 00:04:22.504
Okay, now what else did we wanna do here,

64
00:04:22.504 --> 00:04:26.766
we wanted to try to color
the bars by device category,

65
00:04:26.766 --> 00:04:30.760
did anybody figure out
the way to fulfill in here?

66
00:04:31.970 --> 00:04:36.591
So in this case we're not actually
doing any aggregation on the colors or

67
00:04:36.591 --> 00:04:41.062
the device categories, so
we're just going to include another input

68
00:04:41.062 --> 00:04:44.797
channel here that's not going
to get transformed at all.

69
00:04:44.797 --> 00:04:48.990
That's going to fill the bars
by the device category.

70
00:04:48.990 --> 00:04:51.707
And again we already saw
in our last exercise or

71
00:04:51.707 --> 00:04:55.180
our last project how we can
override the color scales.

72
00:04:55.180 --> 00:04:59.230
Range values, if we wanna have
different colors for these.

73
00:04:59.230 --> 00:05:02.702
But in this case, we don't really need
to map them to any kind of meaning,

74
00:05:02.702 --> 00:05:05.447
we just need to distinguish
the three different kinds, so

75
00:05:05.447 --> 00:05:07.140
the default colors will work fine.

76
00:05:08.620 --> 00:05:10.120
Now, what about the title?

77
00:05:10.120 --> 00:05:14.765
We said we would be cool to
add a tooltip with the actual

78
00:05:14.765 --> 00:05:18.760
value of the total number of users.

79
00:05:18.760 --> 00:05:23.674
So, this is going to follow
a similar pattern to the way that

80
00:05:23.674 --> 00:05:26.260
we declared the users.

81
00:05:26.260 --> 00:05:29.491
Some should come through on the y channel,

82
00:05:29.491 --> 00:05:34.175
we're going to do something
similar with the title channel.

83
00:05:34.175 --> 00:05:40.096
So in this case we're gonna add
in the title as the users value,

84
00:05:40.096 --> 00:05:45.349
to our inputs here and
we're gonna perform that same sum

85
00:05:45.349 --> 00:05:50.960
operation on the title channel
that we did on the y channel.

86
00:05:50.960 --> 00:05:54.279
So that now, hopefully when we hover,

87
00:05:54.279 --> 00:06:00.350
we see a tooltip with the total
number of users for each category.

88
00:06:00.350 --> 00:06:04.669
Eventually we have to wait
a little while for it to show up.

89
00:06:04.669 --> 00:06:09.304
Okay, any questions so
far on that excercise?

90
00:06:09.304 --> 00:06:10.981
Yeah, I think we have one question, yeah.

91
00:06:10.981 --> 00:06:15.839
&gt;&gt; Yes, so for this y has a title of sum.

92
00:06:15.839 --> 00:06:20.720
So when we hover over the bar and
see this number,

93
00:06:20.720 --> 00:06:28.119
are we seeing the y's sum of title or
are we seeing the x's title of users?

94
00:06:29.350 --> 00:06:33.462
&gt;&gt; So what we're seeing with
each of the channels is that,

95
00:06:33.462 --> 00:06:37.837
we've declared in these outputs
of this group transform,

96
00:06:37.837 --> 00:06:42.400
is the sum of whatever value
we've passed into that channel.

97
00:06:42.400 --> 00:06:47.676
So here we're seeing two different
representations of the same value.

98
00:06:47.676 --> 00:06:51.080
Where the value is the sum
of the user's channels.

99
00:06:51.080 --> 00:06:56.353
So first of all,
we're seeing it on the y channel.

100
00:06:56.353 --> 00:06:59.835
So we're seeing it with
the height of each of these bars.

101
00:06:59.835 --> 00:07:06.595
That corresponds based on our output
domain here sorry, our output range,

102
00:07:06.595 --> 00:07:12.420
corresponds to the relative
input values from our domain.

103
00:07:12.420 --> 00:07:15.731
But then also when we hover over them,

104
00:07:15.731 --> 00:07:20.903
we are seeing that same value
encoded in the other channel,

105
00:07:20.903 --> 00:07:26.496
the title channel, which we have
also passed in the same users.

106
00:07:26.496 --> 00:07:31.150
Column, the same users value
due to that transform.

107
00:07:31.150 --> 00:07:35.500
So essentially we're telling plot
to do this same calculation, and

108
00:07:35.500 --> 00:07:37.980
express it as two different channels.

109
00:07:37.980 --> 00:07:41.955
So express it on the one hand as
the height of each of these bars,

110
00:07:41.955 --> 00:07:46.080
the y channel, and on the other
hand as the title on each of these,

111
00:07:46.080 --> 00:07:50.450
Bar elements that shows up as that
little tooltip when we hover over.

112
00:07:51.450 --> 00:07:55.563
So essentially we're similarly
to in our last project,

113
00:07:55.563 --> 00:07:58.305
we kind of reduplicated the success or

114
00:07:58.305 --> 00:08:03.690
failure state through both the film
channel and the stroke channel.

115
00:08:03.690 --> 00:08:05.710
It's a similar approach here.

116
00:08:05.710 --> 00:08:09.604
It's just we have the added complication
of there's an aggregation transform

117
00:08:09.604 --> 00:08:10.760
happening.

118
00:08:10.760 --> 00:08:15.330
So in both cases, we're grouping
that number of users based on

119
00:08:15.330 --> 00:08:20.990
the three different values for
device, that we have in our dataset.

120
00:08:20.990 --> 00:08:25.850
Okay, so we've done our first
aggregation operation pretty cool.

121
00:08:25.850 --> 00:08:28.488
And now we have a more useful chart.

122
00:08:28.488 --> 00:08:33.060
And we'll leave it as an exercise to the
reader to play around with if you wanted

123
00:08:33.060 --> 00:08:37.494
to, let's say aggregate by the number
of sessions that we saw in the dataset

124
00:08:37.494 --> 00:08:39.390
instead of the number of users.

125
00:08:39.390 --> 00:08:42.573
I bet at this point,
you can figure that out real quick.

