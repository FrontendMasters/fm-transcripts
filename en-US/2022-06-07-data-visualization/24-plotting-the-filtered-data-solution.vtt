WEBVTT

1
00:00:00.330 --> 00:00:00.943
Let's take a look.

2
00:00:00.943 --> 00:00:05.640
So again, there are a few different
ways that we could do this.

3
00:00:05.640 --> 00:00:10.713
One way is that we can take
our selected codes array,

4
00:00:10.713 --> 00:00:15.553
and use it in our a filter
call to our API logs data to

5
00:00:15.553 --> 00:00:19.935
compare the status code
of each data point and

6
00:00:19.935 --> 00:00:26.772
check it against that array [LAUGH] and
see if it is one of the valid ones.

7
00:00:26.772 --> 00:00:30.837
So, one way we could do that
is in our call to filter.

8
00:00:30.837 --> 00:00:34.123
And again,
we could name these whatever we want, but

9
00:00:34.123 --> 00:00:37.422
let's just keep with this
convention of D for datum.

10
00:00:37.422 --> 00:00:43.888
We can see if the selectedCodes
Array includes

11
00:00:43.888 --> 00:00:49.705
the value of the data points status code.

12
00:00:49.705 --> 00:00:51.797
And if it does this will return true.

13
00:00:51.797 --> 00:00:57.706
So, it will pass our filter and
if it does not it will get filtered out.

14
00:00:57.706 --> 00:01:00.864
If I have typed this correctly,
how does that sound everybody?

15
00:01:00.864 --> 00:01:02.013
Seeing some thumbs up.

16
00:01:02.013 --> 00:01:06.031
Excellent, hoping for
virtual thumbs-up from you all out there.

17
00:01:06.031 --> 00:01:12.003
Alright so, now let's see if we've done
this right then, when we get rid of this.

18
00:01:12.003 --> 00:01:17.353
Okay, when I uncheck some of these boxes,
the chart should update.

19
00:01:17.353 --> 00:01:21.358
Okay great so,
as we are deselecting some of these codes,

20
00:01:21.358 --> 00:01:25.390
we're seeing fewer and
fewer data points visualized.

21
00:01:25.390 --> 00:01:29.283
We're also seeing some of those colors
change probably because certain of

22
00:01:29.283 --> 00:01:32.123
the paths that let's say
the all of those yellow dots,

23
00:01:32.123 --> 00:01:34.050
a lot of them came back with 200s.

24
00:01:34.050 --> 00:01:38.857
And if we take away the 200 code
then we have different colors.

25
00:01:38.857 --> 00:01:40.446
And so on and so forth.

26
00:01:40.446 --> 00:01:43.679
And so, we can still go back to
our original plot by checking

27
00:01:43.679 --> 00:01:44.785
everything again.

28
00:01:44.785 --> 00:01:50.179
By default, everything is selected but
users can decide to drill down and

29
00:01:50.179 --> 00:01:54.790
maybe I'm only interested in
looking at these server errors.

30
00:01:54.790 --> 00:02:00.427
These a couple of 503 that returned really
quickly and now I can hover over and see.

31
00:02:00.427 --> 00:02:05.355
Some of these were all of
these were these really

32
00:02:05.355 --> 00:02:09.400
long 30 millisecond search endpoints.

33
00:02:09.400 --> 00:02:13.099
So, you'll notice though that also
this messes with our axis, right?

34
00:02:13.099 --> 00:02:14.586
The values chosen on our axis.

35
00:02:14.586 --> 00:02:19.385
That's because plot again is
sort of cleverly trying to

36
00:02:19.385 --> 00:02:24.286
figure out which axis it should use,
what input domain it

37
00:02:24.286 --> 00:02:29.307
has to account for
by looking at the values in our data set.

38
00:02:29.307 --> 00:02:33.028
So, if we want to stabilize that,
we already know how to do that,

39
00:02:33.028 --> 00:02:35.814
we can override the default values for
the axis.

40
00:02:35.814 --> 00:02:40.601
If we want to make sure that plot does
it keep changing this as the input

41
00:02:40.601 --> 00:02:41.937
dataset changes.

42
00:02:41.937 --> 00:02:43.830
But for now, we'll call this good enough.

