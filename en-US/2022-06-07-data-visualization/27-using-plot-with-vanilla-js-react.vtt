WEBVTT

1
00:00:00.420 --> 00:00:04.529
Let us move on to our final module.

2
00:00:04.529 --> 00:00:09.793
This one isn't going to be so much of
a project as just a quick whirlwind

3
00:00:09.793 --> 00:00:15.428
tour of how we can use this Plot library
in different places around the Web.

4
00:00:15.428 --> 00:00:19.094
So we've been looking at how we
can use it in Observable so far.

5
00:00:19.094 --> 00:00:23.134
But we can also use plot,
it's just a JavaScript library module,

6
00:00:23.134 --> 00:00:27.767
we can also use it in other projects
that have nothing to do with Observable.

7
00:00:27.767 --> 00:00:31.870
And we've seen all the syntax so that we
will need to create some basic plots here.

8
00:00:31.870 --> 00:00:36.909
So, we can take those and share them
with the world, either on Observable or

9
00:00:36.909 --> 00:00:42.500
in our own projects, whether vanilla or
with a framework like React.

10
00:00:42.500 --> 00:00:49.369
So let us jump into this last item in
our data visualization collection here.

11
00:00:50.370 --> 00:00:54.252
If folks have any trouble finding it,

12
00:00:54.252 --> 00:01:00.211
I'll drop the link into the chart,
maybe if I can find it.

13
00:01:00.211 --> 00:01:02.121
Here we go [LAUGH] okay.

14
00:01:06.365 --> 00:01:09.260
All righty, so that is right there.

15
00:01:10.260 --> 00:01:15.258
Okay, so, once you've got
your amazing visualizations,

16
00:01:15.258 --> 00:01:20.158
whether they are aggregations or
facets small multiples,

17
00:01:20.158 --> 00:01:24.480
or interactive, or static,
or whatever they are.

18
00:01:25.800 --> 00:01:29.766
Visualizations are only as good as
the people whose eyes they are in front

19
00:01:29.766 --> 00:01:30.490
of, right?

20
00:01:30.490 --> 00:01:34.439
So, usually, unless you're just
exploring your own data for

21
00:01:34.439 --> 00:01:38.474
yourself which is a super valid
use case of data visualization.

22
00:01:38.474 --> 00:01:41.393
In fact that's exactly
what Plot was built for,

23
00:01:41.393 --> 00:01:45.594
was this kind of exploratory data
analysis where you're trying to get

24
00:01:45.594 --> 00:01:50.078
a better sense of what is happening in
a particular data set, maybe get some

25
00:01:50.078 --> 00:01:54.590
idea of what those patterns are to
answer your questions as we said before.

26
00:01:54.590 --> 00:01:57.575
And once you've got those
questions answered,

27
00:01:57.575 --> 00:02:02.524
if you're trying to share those answers
with others, whether it be other people

28
00:02:02.524 --> 00:02:06.087
like that you work with let's say,
or the world at large or

29
00:02:06.087 --> 00:02:10.626
other users because you're baking
this into the apps you're building.

30
00:02:10.626 --> 00:02:16.520
You're going to want to share your plots
with more people than just us probably.

31
00:02:16.520 --> 00:02:20.411
So, let's take a look at a few
different options you have for

32
00:02:20.411 --> 00:02:23.769
sharing any plots that you
have made in Observable,

33
00:02:23.769 --> 00:02:27.969
because Observable exposes a few
different ways that you can take

34
00:02:27.969 --> 00:02:33.330
your work that you've built in
a notebook and share it with the world.

35
00:02:33.330 --> 00:02:35.390
So there are a few different options here.

36
00:02:35.390 --> 00:02:39.452
And there are links in this notebook
that you can read more about how these

37
00:02:39.452 --> 00:02:41.790
different options work.

38
00:02:41.790 --> 00:02:45.915
So, first of all with Observable
notebooks, as you are seeing,

39
00:02:45.915 --> 00:02:49.140
there is a notion of publicly
available notebook or

40
00:02:49.140 --> 00:02:52.443
a shared notebook that more
than one person can see.

41
00:02:52.443 --> 00:02:55.717
There's also a notion of a private
notebook that only I can see which

42
00:02:55.717 --> 00:02:59.040
is really useful for
that initial exploration.

43
00:02:59.040 --> 00:03:02.369
But in order to share all of these
materials with you, I had published, so

44
00:03:02.369 --> 00:03:05.960
you'll see a little published at
the top of each of these notebooks.

45
00:03:05.960 --> 00:03:10.960
I have published these notebooks to make
them accessible to the world at large.

46
00:03:10.960 --> 00:03:14.207
And so if you have signed up for
an Observable account, and

47
00:03:14.207 --> 00:03:19.047
again not necessary, but if you have, and
you're tinkering around in Observable and

48
00:03:19.047 --> 00:03:23.779
you want to share a notebook that you've
made, at the top you'll see some options.

49
00:03:23.779 --> 00:03:26.797
You'll see a sharing option or
if you don't see it,

50
00:03:26.797 --> 00:03:32.080
you'll see in the three dots menu here, an
option to publish or an option to share.

51
00:03:32.080 --> 00:03:36.951
The difference is essentially share it
lets you share a notebook with up to,

52
00:03:36.951 --> 00:03:39.320
I think for other individual users.

53
00:03:39.320 --> 00:03:43.460
So kind of like a private
collaborative space.

54
00:03:43.460 --> 00:03:46.890
And then publish lets you share
the notebook more widely,

55
00:03:46.890 --> 00:03:51.680
like I've done by making these notebooks
public so that everyone can see them.

56
00:03:51.680 --> 00:03:54.601
You can go into Publish and
in this case I've already published it, so

57
00:03:54.601 --> 00:03:55.900
we'll see Publish settings.

58
00:03:55.900 --> 00:04:00.064
You can choose to make notebooks public,
meaning they are discoverable,

59
00:04:00.064 --> 00:04:02.256
they'll show up on your user profile.

60
00:04:02.256 --> 00:04:05.490
Again, if you have an account,
or you can make them enlisted.

61
00:04:05.490 --> 00:04:08.785
So similar to an unlisted YouTube video or

62
00:04:08.785 --> 00:04:13.990
a link shared document on Google Docs or
something like that.

63
00:04:13.990 --> 00:04:15.294
This is the option for you,

64
00:04:15.294 --> 00:04:19.379
if you don't really want everybody to know
about this notebook, but you wanna be able

65
00:04:19.379 --> 00:04:24.030
to slack the link to your teammates who
don't have Observable accounts, let's say.

66
00:04:24.030 --> 00:04:25.740
So there are a few
different options there.

67
00:04:25.740 --> 00:04:28.470
You can set URLs, etc, etc.

68
00:04:28.470 --> 00:04:31.620
So that is one option or
two options I guess you have,

69
00:04:31.620 --> 00:04:36.487
you can share your notebook with specific
users using that share menu item here,

70
00:04:36.487 --> 00:04:40.020
where you can type in individual
users to share this with.

71
00:04:40.020 --> 00:04:43.022
So I don't know maybe I wanna
send it to my colleague,

72
00:04:43.022 --> 00:04:45.910
my former colleague,
Mike Freeman, let's say.

73
00:04:45.910 --> 00:04:50.398
I can add individual users there or
you can publish your notebook, either for

74
00:04:50.398 --> 00:04:54.180
the whole world or just for
people with the link.

75
00:04:54.180 --> 00:04:59.212
But perhaps more exciting,
is you can also embed cells from public or

76
00:04:59.212 --> 00:05:03.740
link shared notebooks in
other places on the Web.

77
00:05:03.740 --> 00:05:08.310
So, for example,
what we're looking at here,

78
00:05:08.310 --> 00:05:13.662
this little widget here is
actually an iframe displaying

79
00:05:13.662 --> 00:05:20.137
a live embed of the interactive
exercise from the previous project.

80
00:05:20.137 --> 00:05:25.470
So I can interact with this
just as I could before.

81
00:05:25.470 --> 00:05:30.061
This is really the same content as what
was in our notebook that we were just

82
00:05:30.061 --> 00:05:30.889
looking at.

83
00:05:30.889 --> 00:05:35.727
And Observable will generate a little
snippet, little HTML snippet or

84
00:05:35.727 --> 00:05:40.483
JavaScript or source code for
other things like React that you can copy

85
00:05:40.483 --> 00:05:44.890
from this little Export menu item,
again, three dots.

86
00:05:44.890 --> 00:05:49.487
Export there is an Embed Cells
option where you can select

87
00:05:49.487 --> 00:05:54.740
either parts of your notebook or
the entire notebook.

88
00:05:54.740 --> 00:05:59.697
And you can decide whether to export
that into a little I-frame which again,

89
00:05:59.697 --> 00:06:02.289
you can just copy and
chuck in a web page or

90
00:06:02.289 --> 00:06:06.269
wherever you want,
even in another notebook, it turns out.

91
00:06:06.269 --> 00:06:10.905
Or you can download some, like basically
a little snippet of JavaScript so

92
00:06:10.905 --> 00:06:15.230
that you can throw it in whatever
vanilla environment you want.

93
00:06:15.230 --> 00:06:19.626
And this is going to include the reactive
runtime that makes things like

94
00:06:19.626 --> 00:06:24.315
the connection between those different
cells, between the input cells and

95
00:06:24.315 --> 00:06:25.810
the chart work.

96
00:06:25.810 --> 00:06:30.294
So that includes the Observable
runtime which is open source, and

97
00:06:30.294 --> 00:06:35.334
that is going to give you all those code
that you need to kind of get that up and

98
00:06:35.334 --> 00:06:38.718
running in a different
JavaScript environment.

99
00:06:38.718 --> 00:06:42.368
And similarly there is
also some snippets and

100
00:06:42.368 --> 00:06:45.739
instructions for pulling it into React.

101
00:06:45.739 --> 00:06:51.127
So again this is to embed cells
from Observable into other places.

102
00:06:51.127 --> 00:06:56.545
So this assumes that you are starting
from an Observable notebook.

103
00:06:56.545 --> 00:07:00.955
And if we look at, for example, another
notebook like now I've just switched back

104
00:07:00.955 --> 00:07:03.675
to our third project here,
the API responses one.

105
00:07:05.135 --> 00:07:10.071
Unlike my previous one where I didn't
have any named cells, you'll see that you

106
00:07:10.071 --> 00:07:14.760
have the choice of any named cells
that you have in your notebook.

107
00:07:14.760 --> 00:07:19.580
And whether those are interactive with
view of, or not, with like status codes.

108
00:07:19.580 --> 00:07:23.304
You can check just the ones
that you're interested in and

109
00:07:23.304 --> 00:07:28.514
then it will generate the corresponding
snippets of whatever format you like.

110
00:07:28.514 --> 00:07:32.750
The other cool thing is that you
can actually copy just the URL.

111
00:07:34.720 --> 00:07:38.185
And then that gives you
essentially a standalone link

112
00:07:38.185 --> 00:07:43.410
that goes straight to that iframe
with the cells that you've selected.

113
00:07:43.410 --> 00:07:45.340
So this is a really handy dandy way.

114
00:07:45.340 --> 00:07:46.700
You don't even have to deploy anything.

115
00:07:46.700 --> 00:07:48.888
It's already up on Observable so

116
00:07:48.888 --> 00:07:53.969
you can just send people to this embed
link directly if you want them to see your

117
00:07:53.969 --> 00:07:58.910
cool interactive charts to make
them jealous of your data skills.

118
00:07:59.950 --> 00:08:05.578
So those are some options for working
with Observable to share your work and

119
00:08:05.578 --> 00:08:11.040
there are links in there to documentation
of those different features.

120
00:08:12.790 --> 00:08:16.453
All righty, but, there are probably gonna
be times where you are not interested in

121
00:08:16.453 --> 00:08:17.350
using Observable.

122
00:08:17.350 --> 00:08:20.370
Maybe you didn't wanna sign up for
an account, totally legit.

123
00:08:20.370 --> 00:08:24.668
Or maybe you don't want to have the added
overhead of including the Observable

124
00:08:24.668 --> 00:08:26.820
runtime in your project.

125
00:08:26.820 --> 00:08:32.310
So it is entirely possible to just
use Plot as a standalone library.

126
00:08:32.310 --> 00:08:34.721
There are instructions in the Plot,

127
00:08:34.721 --> 00:08:38.370
GitHub repo about how to
install Plot in your project.

128
00:08:38.370 --> 00:08:42.702
Essentially, if you're using something in

129
00:08:42.702 --> 00:08:47.490
JavaScript land that is
packaged up by a bundler,

130
00:08:47.490 --> 00:08:52.621
you're gonna be able to
install observablehq/plot

131
00:08:52.621 --> 00:08:59.246
as a dependency of your project with yarn,
with NPM, what have you.

132
00:08:59.246 --> 00:09:03.420
You can also import Plot as a ES module.

133
00:09:03.420 --> 00:09:08.178
So what I've got here is
a little code sandbox which you

134
00:09:08.178 --> 00:09:11.980
can check out and mess with on your own.

135
00:09:11.980 --> 00:09:17.488
But essentially what I've done is I've
included in the project dependencies,

136
00:09:17.488 --> 00:09:22.429
I've done the equivalent of doing
yarn install, Observable HDQ Plot or

137
00:09:22.429 --> 00:09:25.760
NPM, install, Observable HQ Plot.

138
00:09:25.760 --> 00:09:30.860
So we've got observablehq/plot
as a project dependency,

139
00:09:30.860 --> 00:09:37.460
and then I am able to import this capital
P plot with all of our mark functions and

140
00:09:37.460 --> 00:09:42.760
the dot plot method and
all of that stuff, all of the things that

141
00:09:42.760 --> 00:09:48.570
we were using in the Observable
environment are right there in Plot.

142
00:09:48.570 --> 00:09:51.075
And if you notice it's all declarative,
right?

143
00:09:51.075 --> 00:09:55.323
It's all just method calls
with options passed in.

144
00:09:55.323 --> 00:10:00.079
So the syntax is gonna be exactly the
same, you can copy paste it from what we

145
00:10:00.079 --> 00:10:04.335
were doing in Observable
into some other environment.

146
00:10:04.335 --> 00:10:07.880
The only tricky part is you have to make
sure that you can access the data that

147
00:10:07.880 --> 00:10:11.415
before Observable was helping us
access as those file attachments.

148
00:10:11.415 --> 00:10:16.321
So in this case, for example, if I have
included my JSON file in my project,

149
00:10:16.321 --> 00:10:20.845
I can just import it or maybe I'm
fetching data directly from the API or

150
00:10:20.845 --> 00:10:23.005
from a database or what have you.

151
00:10:23.005 --> 00:10:27.103
Again that's kind of out of scope here but

152
00:10:27.103 --> 00:10:32.489
once I've got that data in I
can basically use the exact

153
00:10:32.489 --> 00:10:37.192
same calls to Plot marks,
so, Cell plots etc.

154
00:10:37.192 --> 00:10:40.227
In this case we were looking at
our project one results here,

155
00:10:40.227 --> 00:10:42.904
all of the same stuff,
the color, domain and range,

156
00:10:42.904 --> 00:10:46.620
all of that is exactly the same
literally copy pasted.

157
00:10:46.620 --> 00:10:51.460
The only thing we have to think about is
that basically this call to plot dot plot.

158
00:10:51.460 --> 00:10:56.026
What that returns is the nodes,
the sort of tree,

159
00:10:56.026 --> 00:11:02.140
the mini sub tree of, in this case,
SVG nodes that are generated.

160
00:11:02.140 --> 00:11:04.040
So Plot is built on top of D3 and

161
00:11:04.040 --> 00:11:09.660
kind of makes the SVG elements that you
need to get your pretty visualization.

162
00:11:09.660 --> 00:11:14.574
So, what this is doing is essentially
returning a DOM node which then we can

163
00:11:14.574 --> 00:11:17.470
append to our document wherever we want.

164
00:11:17.470 --> 00:11:22.660
So, in this case in my HTML I have
a little plot container element that

165
00:11:22.660 --> 00:11:27.770
have assigned to be the kind of
little bucks that Plot can draw into.

166
00:11:27.770 --> 00:11:32.732
And I'm just appending
whatever Plot outputs from my

167
00:11:32.732 --> 00:11:38.060
calls to the library as
the child of that container.

168
00:11:38.060 --> 00:11:42.996
So that is one way that you can
get your Plot into whatever

169
00:11:42.996 --> 00:11:47.107
document you are putting
together on the Web.

170
00:11:47.107 --> 00:11:53.740
All righty, and so that is in the Vanilla
environment where we're framework free.

171
00:11:53.740 --> 00:11:57.460
But if you are using a framework like for
example React,

172
00:11:57.460 --> 00:12:00.210
you can totally still use plot.

173
00:12:00.210 --> 00:12:03.284
However, for example React, right?

174
00:12:03.284 --> 00:12:07.700
It is called React because
it is making the reactivity

175
00:12:07.700 --> 00:12:11.340
happen with its own way
of touching the DOM.

176
00:12:11.340 --> 00:12:16.677
And so generally, when you're using
a framework like React, you don't want to

177
00:12:16.677 --> 00:12:22.340
be touching the DOM yourself or letting
other libraries touch the DOM for you.

178
00:12:22.340 --> 00:12:24.950
But in the case of Plot,
that's exactly what we want Plot to do.

179
00:12:24.950 --> 00:12:29.000
We want it to draw those nodes
that we just saw, right?

180
00:12:29.000 --> 00:12:33.057
Okay, so what we need to do
in React specifically and

181
00:12:33.057 --> 00:12:38.960
just throwing this in there as a note for
y'all React developers out there,

182
00:12:38.960 --> 00:12:43.687
is essentially escape the React World
with the use ref Hook.

183
00:12:43.687 --> 00:12:49.298
So what this is gonna do is allow us
to kind of hook into a particular

184
00:12:49.298 --> 00:12:54.197
DOM node that we've set up that
is essentially going to be

185
00:12:54.197 --> 00:12:59.425
a little safe little place that
Plot can draw its chart into.

186
00:12:59.425 --> 00:13:04.016
And so what we can do is use a ref
Hook to create that node and

187
00:13:04.016 --> 00:13:09.678
connect it to whatever plots output
is within the call to a use effect.

188
00:13:09.678 --> 00:13:15.550
So that we actually let Plot draw its
chart as a side effect within our app.

189
00:13:15.550 --> 00:13:20.014
And then for any interactivity like for
example, our checkboxes, we're gonna have

190
00:13:20.014 --> 00:13:23.680
to recreate that in kind of whatever
the paradigm of our framework is.

191
00:13:23.680 --> 00:13:28.063
In this case, we're gonna
recreate it as a React component,

192
00:13:28.063 --> 00:13:32.530
which then we can capture
in the application state.

193
00:13:32.530 --> 00:13:38.266
And watch for any changes to the state
of those checkboxes to update

194
00:13:38.266 --> 00:13:45.510
the element that we've told Plot to draw
into with a new call using the new values.

195
00:13:45.510 --> 00:13:48.371
So in this case which checkboxes
are clicked for example?

196
00:13:48.371 --> 00:13:51.551
So I don't get the convenience
of Observables built in

197
00:13:51.551 --> 00:13:56.950
reactivity because I'm in a different
reactive paradigm, but it's all possible.

198
00:13:56.950 --> 00:14:01.735
So this is again another sandbox that
shows just a little example of it,

199
00:14:01.735 --> 00:14:05.504
really quickly we can take
a look at how this is working.

200
00:14:05.504 --> 00:14:10.558
So essentially again, I've installed
a Plot as a dependency of the project,

201
00:14:10.558 --> 00:14:16.164
same deal, I've got my data coming through
in a file, in this case it's the log data.

202
00:14:16.164 --> 00:14:21.129
And then what I've done here is I've
created a little checkboxes component

203
00:14:21.129 --> 00:14:26.380
that does the same work as our input
start checkbox was doing before.

204
00:14:26.380 --> 00:14:31.363
And then these are the three hooks that
I'm gonna rely on my trusty friends use

205
00:14:31.363 --> 00:14:33.920
refuse effect and use state.

206
00:14:33.920 --> 00:14:36.920
So what I've got is I have
a component I'm calling it my Plot,

207
00:14:36.920 --> 00:14:38.247
you can be more creative and

208
00:14:38.247 --> 00:14:42.650
better at naming things than me where
I'll pass in the data that I care about.

209
00:14:42.650 --> 00:14:46.652
And I can use that to, if I wanna swap out
the datasets or do something else with it,

210
00:14:46.652 --> 00:14:48.620
I can do that as well.

211
00:14:48.620 --> 00:14:51.923
I'm gonna have here I have a similar
thing to like all the status codes that I

212
00:14:51.923 --> 00:14:53.240
had before.

213
00:14:53.240 --> 00:14:57.916
I'm setting up a use ref to kind of
designate an element that Plot is

214
00:14:57.916 --> 00:15:00.177
going to care about and talk to.

215
00:15:00.177 --> 00:15:04.392
And then I'm using use State to
track the state of which of these

216
00:15:04.392 --> 00:15:06.230
checkboxes are selected.

217
00:15:07.510 --> 00:15:12.451
And so then what I have is a little
handler function that sets the state when

218
00:15:12.451 --> 00:15:18.204
somebody changes the checkboxes, and the
magic happens within a call to use Effect.

219
00:15:18.204 --> 00:15:23.236
Where I pass in the values that Plot cares
about, in this case, it's the data and

220
00:15:23.236 --> 00:15:28.130
any of those interactive values that
we're using to filter down the data.

221
00:15:28.130 --> 00:15:30.041
So in this case, our selected codes,

222
00:15:30.041 --> 00:15:34.040
similar to what we had before
in observables, reactivity.

223
00:15:34.040 --> 00:15:37.796
And then again, I'm just doing exactly the
same thing that I was doing before just

224
00:15:37.796 --> 00:15:39.442
swapping out a few variable names.

225
00:15:39.442 --> 00:15:45.091
So the syntax for Plot is all the same, so
what I'm doing is I'm calling Plot and I'm

226
00:15:45.091 --> 00:15:50.522
getting those nodes out as, I'm capturing
it as this thing I'll call dot plot.

227
00:15:50.522 --> 00:15:55.319
And then I am appending that to
the current contents of this node

228
00:15:55.319 --> 00:15:57.682
that I've set up with use ref.

229
00:15:57.682 --> 00:16:02.320
So ref is then the return node
from this call to use ref.

230
00:16:02.320 --> 00:16:06.390
And all I have to do is remember
that each time I redraw this chart,

231
00:16:06.390 --> 00:16:10.830
if I'm appending to this current node
within the ref that I have set up,

232
00:16:10.830 --> 00:16:13.730
I'm gonna keep getting more and
more charts.

233
00:16:13.730 --> 00:16:18.220
So I have to just remember to remove
the old ones if I'm redrawing the chart,

234
00:16:18.220 --> 00:16:20.896
when let's say the selected codes changes.

235
00:16:20.896 --> 00:16:26.220
So here I'm just returning
a little JSX snippet with

236
00:16:26.220 --> 00:16:33.125
my with a DIV that is set up hooked
in to that use ref Hook, hook took.

237
00:16:33.125 --> 00:16:35.912
So this is just a pattern for

238
00:16:35.912 --> 00:16:41.010
using Plot reactively in
a framework like React.

239
00:16:41.010 --> 00:16:45.228
You can hopefully use this to figure
out how you would wanna connect it to

240
00:16:45.228 --> 00:16:48.250
other frameworks if you're using those.

241
00:16:48.250 --> 00:16:52.822
And again, you can totally use it just
in Vanilla JavaScript as well, but

242
00:16:52.822 --> 00:16:55.940
this is all just to convey
that It is all possible.

243
00:16:55.940 --> 00:16:58.710
You don't have to use Observable
notebooks specifically.

244
00:16:58.710 --> 00:17:03.080
If you do, you get the advantage of things
like the checkbox, reactivity, etc, all

245
00:17:03.080 --> 00:17:07.110
baked in, with all those different inputs
that we saw in the Snippets as well.

246
00:17:08.300 --> 00:17:14.133
But if you want to use Plot on its
own as just a JavaScript library,

247
00:17:14.133 --> 00:17:16.160
it is totally doable.

248
00:17:16.160 --> 00:17:23.181
And here are a couple of patterns that
you can use as a starting point for that.

249
00:17:23.181 --> 00:17:27.495
There's more info in
the Plot documentation, so

250
00:17:27.495 --> 00:17:32.117
you can check out
the observablehq/plot GitHub repo

251
00:17:32.117 --> 00:17:36.851
to see more options and
examples and things like that.

252
00:17:36.851 --> 00:17:41.134
There are also some examples around of,
again,

253
00:17:41.134 --> 00:17:45.417
Plot embedded in React and
things like that, and

254
00:17:45.417 --> 00:17:50.750
once again you have links to how
to do it with Observable too.

255
00:17:50.750 --> 00:17:56.026
So that is how to get your plots
out of the staging ground and

256
00:17:56.026 --> 00:18:00.129
into the wide wide world
of the Web out there.

257
00:18:01.360 --> 00:18:06.867
If anybody has questions or runs into
problems using Plot in other environments

258
00:18:06.867 --> 00:18:11.890
than Observable, that is what the open
source repo is there for as well.

259
00:18:11.890 --> 00:18:15.069
So after going through this workshop,

260
00:18:15.069 --> 00:18:20.461
you can also jump in there to see if
folks have raised other issues or

261
00:18:20.461 --> 00:18:23.928
if you would like to
request new examples or

262
00:18:23.928 --> 00:18:27.900
additional documentation,
things like that.

263
00:18:27.900 --> 00:18:29.712
You can hop on to the GitHub repo.

