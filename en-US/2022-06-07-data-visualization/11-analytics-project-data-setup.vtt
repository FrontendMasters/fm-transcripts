WEBVTT

1
00:00:00.060 --> 00:00:04.895
So we are going to jump back
in with another project.

2
00:00:04.895 --> 00:00:10.736
This one is going to be the project what
size devices our users browsing with.

3
00:00:10.736 --> 00:00:15.134
You should be able to navigate to
it right from that sidebar there,

4
00:00:15.134 --> 00:00:20.300
the data visualization first steps
collection you should see there.

5
00:00:20.300 --> 00:00:25.200
And we can drop the link
in the chat as well.

6
00:00:25.200 --> 00:00:28.920
So that is what we're gonna
to be working through next.

7
00:00:30.080 --> 00:00:33.880
And so in this project we're going to
be looking at a different dataset.

8
00:00:33.880 --> 00:00:38.050
This time, we have another
file attached to our notebook.

9
00:00:38.050 --> 00:00:40.400
This one is called device analytics.

10
00:00:40.400 --> 00:00:44.320
And we'll notice it as a CSV
comma separated values file.

11
00:00:44.320 --> 00:00:48.655
Another really common type of file
that you might get data in, again,

12
00:00:48.655 --> 00:00:50.280
if it's a small data set.

13
00:00:50.280 --> 00:00:55.336
And this is some mock data about
usage to a hypothetical site that is

14
00:00:55.336 --> 00:01:01.205
the kind of data one might be able to
export from an analytics platform like for

15
00:01:01.205 --> 00:01:03.581
example, Google Analytics.

16
00:01:03.581 --> 00:01:08.119
So this data set has some data
about visitors to a site and

17
00:01:08.119 --> 00:01:14.540
which device types and screen
resolutions those visitors were using.

18
00:01:14.540 --> 00:01:16.270
So let's take a look at this data set.

19
00:01:16.270 --> 00:01:19.963
What we're doing is very
similar to our last Json file.

20
00:01:19.963 --> 00:01:24.247
We're reading in this file that's attached
to the notebook again if you were doing

21
00:01:24.247 --> 00:01:28.348
this in vanilla JavaScript you would be
parsing this in with whatever library of

22
00:01:28.348 --> 00:01:32.220
choice or maybe you'd be fetching
it from elsewhere on the web.

23
00:01:32.220 --> 00:01:36.330
In this case, an observable we're
loading it as a file attachment and

24
00:01:36.330 --> 00:01:38.082
then parsing it as a CSV file.

25
00:01:38.082 --> 00:01:41.619
Which once again is
giving us our nice little

26
00:01:41.619 --> 00:01:46.310
JavaScript array of an object for
each row in the CSV data.

27
00:01:47.360 --> 00:01:51.548
And if we throw all of that into another
little table to make it a bit more human

28
00:01:51.548 --> 00:01:53.980
readable, we can see what we've got here.

29
00:01:53.980 --> 00:01:56.633
So we have a column called device,

30
00:01:56.633 --> 00:02:01.667
where we have a kind of size
category desktop, mobile or tablet.

31
00:02:01.667 --> 00:02:04.500
We might have a few tablets
in there if we scroll down.

32
00:02:04.500 --> 00:02:09.502
Then we have the resolution column
which shows us the resolution

33
00:02:09.502 --> 00:02:14.421
that folks on this device,
this resolution we're browsing.

34
00:02:14.421 --> 00:02:15.926
And then we have a column for

35
00:02:15.926 --> 00:02:19.527
the number of users that we saw
with that combination of device and

36
00:02:19.527 --> 00:02:24.060
resolution and the number of sessions that
those users browsed in on that device.

37
00:02:24.060 --> 00:02:29.469
So, what we've got here is some data
that has the values that we want,

38
00:02:29.469 --> 00:02:34.160
but doesn't necessarily have
the exact shape that we want.

39
00:02:34.160 --> 00:02:39.219
So we're gonna do a little tiny
bit of lightweight data wrangling,

40
00:02:39.219 --> 00:02:43.390
which as we talked about before
is a crucial first step to

41
00:02:43.390 --> 00:02:48.010
setting ourselves up for
a nice visualization.

42
00:02:48.010 --> 00:02:51.640
So let's take a look at
one of these objects here.

43
00:02:51.640 --> 00:02:55.141
So if I'm just looking at
the first thing in this dataset,

44
00:02:55.141 --> 00:02:59.928
I see I have these different properties
corresponding to those column names and

45
00:02:59.928 --> 00:03:04.470
then I have string value for
each of these observations here.

46
00:03:04.470 --> 00:03:08.279
So our first task is to get
this into better shape so

47
00:03:08.279 --> 00:03:11.190
that we can more easily visualize it.

48
00:03:11.190 --> 00:03:13.552
So we have a couple of problems her.

49
00:03:13.552 --> 00:03:19.157
First of all, we have this resolution
value hear which is a string that

50
00:03:19.157 --> 00:03:26.370
combines both the width and the height of
the user's screen or resolution settings.

51
00:03:26.370 --> 00:03:31.466
So what would be more helpful than that,
is to also have additional

52
00:03:31.466 --> 00:03:36.840
columns that separate out the width and
the height of the resolution.

53
00:03:36.840 --> 00:03:41.511
So instead of one string where we
have this kind of 1920 by 1080,

54
00:03:41.511 --> 00:03:47.574
we also want a column that says, width
that's 1920, and then height that's 1080.

55
00:03:47.574 --> 00:03:52.811
And it would be great if those were
numeric values instead of strings,

56
00:03:52.811 --> 00:03:58.820
because that way we can actually treat
them as a continuous data space.

57
00:03:58.820 --> 00:04:03.784
Similarly, we notice we have strings for
these users insertions counts, and again,

58
00:04:03.784 --> 00:04:08.920
these are actually numbers, so it'd be
useful to have them as numeric values.

59
00:04:08.920 --> 00:04:13.904
So our task, our mission should we choose
to accept it is to do a little bit

60
00:04:13.904 --> 00:04:19.700
of lightweight data wrangling using
our good old friend array dot map.

61
00:04:19.700 --> 00:04:23.859
So we have this device analytics
array with our original data,

62
00:04:23.859 --> 00:04:28.270
we're gonna map over it with
a function that we're gonna write.

63
00:04:28.270 --> 00:04:32.858
So we're gonna replace this little
identity function to make sure that we

64
00:04:32.858 --> 00:04:36.632
first of all add width and
height columns with numeric values

65
00:04:36.632 --> 00:04:41.013
corresponding to the values broken
down from the resolution column.

66
00:04:41.013 --> 00:04:47.850
And convert the values in the users and
sessions columns from strings to numbers.

67
00:04:47.850 --> 00:04:51.974
So there are some hints about
ways that we can do those

68
00:04:51.974 --> 00:04:54.703
conversions in the hints button.

69
00:04:54.703 --> 00:04:59.586
But this is just basically going to be
a little thought exercise for us to get

70
00:04:59.586 --> 00:05:04.720
ourselves into the habit of wrangling
our data to make our lives easier later.

